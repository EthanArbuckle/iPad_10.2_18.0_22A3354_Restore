uint64_t FigMediaServerStart()
{
  int v0;
  int v1;
  _DWORD *v2;
  void *v3;
  void (*v4)(uint64_t);
  void *v5;
  const __CFDictionary *ModelSpecificPropertyList;
  _BOOL8 ShouldStartSubServer;
  void *v8;
  void (*v9)(_QWORD);
  void *v10;
  void (*v11)(_QWORD);
  void *v12;
  void (*v13)(_QWORD);
  void *v14;
  void (*v15)(_QWORD);
  void *v16;
  void (*v17)(_QWORD);
  int out_token;

  FigWatchdogStart();
  v0 = FigWatchdogBeginVitalWork();
  if (v0)
  {
    v1 = v0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      FigMediaServerStart_cold_1(v1);
  }
  GSInitialize();
  FigServer_InitializeWithEnvironment();
  fpServer_CreateRPCTimeoutThread();
  getpid();
  proc_disable_cpumon();
  FigKTraceInit();
  v2 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  signal(30, (void (__cdecl *)(int))1);
  signal(31, (void (__cdecl *)(int))1);
  FigNote_OneTimeInitializationForMediaServerd();
  FigSysdiagnoseBlock_OneTimeInitializationForMediaserverd();
  FigSandboxRegistrationServerStart();
  feServer_LoadCelestial();
  FigShared_OneTimeInitialization();
  out_token = 0;
  notify_register_dispatch("com.apple.language.changed", &out_token, MEMORY[0x1E0C80D38], &__block_literal_global_12);
  FigPlayerCMSessionOneTimeInitialization();
  feServer_startCTTelephonyCenterOnADispatchQueue_sAnythingButARunLoop = (uint64_t)dispatch_queue_create("com.apple.mediaserverd.coretelephony.notarunloop", 0);
  v3 = dlopen("/System/Library/Frameworks/CoreTelephony.framework/CoreTelephony", 4);
  if (v3)
  {
    v4 = (void (*)(uint64_t))dlsym(v3, "CTTelephonyCenterSetDefaultDispatchQueue");
    if (v4)
      v4(feServer_startCTTelephonyCenterOnADispatchQueue_sAnythingButARunLoop);
  }
  v5 = (void *)FigOSTransactionCreate();
  FigControlCommandsStartServer();
  ModelSpecificPropertyList = (const __CFDictionary *)FigCreateModelSpecificPropertyList();
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartWirelessDisplayServer")))
  {
    FigVirtualFramebufferServerStart();
    FigVirtualDisplaySessionServerStart();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartCPECryptorServer")))
  {
    FigCPECryptorStartServer();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartCPEServer")))
  {
    FigCPEServerStart();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartContentKeySessionServer")))
  {
    FigContentKeyBossStartServer();
    FigContentKeySessionStartServer();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartCustomURLLoaderServer")))
  {
    FigCustomURLLoaderServerStart();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartByteStreamServer")))
  {
    FigByteStreamServerStart();
  }
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartFormatReaderServer")))
    FigFormatReaderServerStart();
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartSampleGeneratorServer")))
  {
    FigSampleGeneratorServerStart();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartAssetServer")))
  {
    FigAssetServerStart();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartAudioDeviceClockServer")))
  {
    FigAudioDeviceClockServerStart();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartMutableCompositionServer")))
  {
    FigMutableCompositionServerStart();
  }
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartMutableMovieServer"))
    && !FigRemote_ShouldConnectToMediaparserdForFileParsing())
  {
    FigMutableMovieServerStart();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartAssetImageGeneratorServer")))
  {
    FigAssetImageGeneratorServerStart();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartMTAudioProcessingTapServer")))
  {
    MTAudioProcessingTapServerStart();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("VideoCompositorServer")))
  {
    FigVideoCompositorServerStart();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartPlayerServer")))
  {
    FigPlayerServerStart();
  }
  if ((_os_feature_enabled_impl() & 1) == 0)
  {
    ShouldStartSubServer = feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("PreloadPhotoJPEG"));
    if (ShouldStartSubServer)
      FigPhotoJPEGPreload(ShouldStartSubServer);
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartRecorderServer")))
  {
    FigStartCaptureServers();
  }
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartAVConferenceServer")))
  {
    v8 = dlopen("/System/Library/PrivateFrameworks/GameKitServices.framework/GameKitServices", 4);
    if (v8)
    {
      v9 = (void (*)(_QWORD))dlsym(v8, "AVConferenceServerStart");
      if (v9)
        v9(v9);
    }
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartVideoQueueServer")))
  {
    FigVideoQueueServerStart();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartMonitoringNetworkActivity")))
  {
    FigStartMonitoringNetworkActivity();
  }
  if ((_os_feature_enabled_impl() & 1) == 0)
  {
    if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartSystemControllerServer")))
      FigSystemControllerStartServer();
    if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartEndpointServer")))
      FigEndpointStartServer();
    if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartEndpointRemoteControlSessionServer")))
      FigEndpointRemoteControlSessionStartServer();
    if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartEndpointStreamServer")))
      FigEndpointStreamStartServer();
    if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartAirPlayServicesServer")))
    {
      v10 = dlopen("/System/Library/PrivateFrameworks/AirPlaySender.framework/AirPlaySender", 4);
      if (v10)
      {
        v11 = (void (*)(_QWORD))dlsym(v10, "AirPlayReceiverServicesServerStart");
        if (v11)
          v11(v11);
      }
    }
    if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartSTSServer")))
      FigSTSServerStart();
    if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartRouteDiscovererServer")))
      FigRouteDiscovererStartServer();
    if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartRoutingContextServer")))
      FigRoutingContextStartServer();
    if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartVolumeControllerServer")))
      FigVolumeControllerStartServer();
    if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartEndpointUIAgentServer")))
      FigEndpointUIAgentStartServer();
    if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartRoutingSessionManagerServer")))
      FigRoutingSessionManagerStartServer();
    if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartAirPlayAlwaysOnModules")))
    {
      v12 = dlopen("/System/Library/PrivateFrameworks/AirPlaySender.framework/AirPlaySender", 4);
      if (v12)
      {
        v13 = (void (*)(_QWORD))dlsym(v12, "AirPlayStartAlwaysOnModules");
        if (v13)
          v13(v13);
      }
    }
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartRemakerServer")))
  {
    FigRemakerServerStart();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartNeroidServer")))
  {
    FigNeroidStartServer();
  }
  FigAudioSessionInitializeVTFigAudioSession();
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartDecompressionServer"))
    && !VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode())
  {
    VTDecompressionSessionServerStart();
  }
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartCompressionServer"))
    && !VTVideoCodecService_ShouldUseSeparateCodecProcessForEncode())
  {
    VTCompressionSessionServerStart();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartAssetDownloaderServer")))
  {
    FigAssetDownloaderStartServer();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartAssetCacheInspectorServer")))
  {
    FigAssetCacheInspectorStartServer();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartSampleBufferAudioRendererServer")))
  {
    FigSampleBufferAudioRendererServerStart();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartSampleBufferRenderSynchronizerServer")))
  {
    FigSampleBufferRenderSynchronizerServerStart();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartVideoTargetServer")))
  {
    FigVideoTargetStartServer();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartVisualContextServer")))
  {
    FigVisualContextServerStart();
  }
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartVisionHWAccelerationServer")))
  {
    v14 = dlopen("/System/Library/PrivateFrameworks/VisionHWAccelerationServices.framework/VisionHWAccelerationServices", 4);
    if (v14)
    {
      v15 = (void (*)(_QWORD))dlsym(v14, "VisionHWAccelerationServicesStart");
      if (v15)
        v15(v15);
    }
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, CFSTR("StartVirtualCaptureCardServer")))
  {
    FigVirtualCaptureCardServerStart();
  }
  if (ModelSpecificPropertyList)
    CFRelease(ModelSpecificPropertyList);
  if (v5)
    os_release(v5);
  if ((_os_feature_enabled_impl() & 1) == 0)
  {
    v16 = dlopen("/System/Library/PrivateFrameworks/AirPlaySender.framework/AirPlaySender", 4);
    if (v16)
    {
      v17 = (void (*)(_QWORD))dlsym(v16, "SidePlayManagerStart");
      if (v17)
        v17(v17);
    }
  }
  FigWatchdogCompleteVitalWork();
  if (*v2 == 1)
    kdebug_trace();
  return 0;
}

uint64_t FigSharedPlayerGetDefaultEngineTopology(int *a1)
{
  const __CFString *v2;
  const __CFString *v3;
  int v4;
  char v6[200];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFString *)CFPreferencesCopyValue(CFSTR("mediaengine"), CFSTR("com.apple.coremedia"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  if (!v2)
  {
    v4 = 33;
    goto LABEL_7;
  }
  v3 = v2;
  CFStringGetCString(v2, v6, 200, 0x8000100u);
  if (CFEqual(v3, CFSTR("fig")) || CFEqual(v3, CFSTR("mission")))
    goto LABEL_4;
  if (CFEqual(v3, CFSTR("remotefig")) || CFEqual(v3, CFSTR("remotemission")))
  {
LABEL_10:
    v4 = 33;
    goto LABEL_5;
  }
  if (!CFEqual(v3, CFSTR("marlow")))
  {
    CFEqual(v3, CFSTR("remotemarlow"));
    goto LABEL_10;
  }
LABEL_4:
  v4 = 1;
LABEL_5:
  CFRelease(v3);
LABEL_7:
  *a1 = v4;
  return 0;
}

uint64_t FigMovieStartServing()
{
  return 4294954514;
}

uint64_t FigShared_OneTimeInitialization()
{
  int64_t v1;

  v1 = 0;
  sDiskCacheIsRemote = 1;
  return FigShared_CopyDiskCacheParams(0, &v1, 0, 0, 0, 0);
}

void CentralOneTimeSetup()
{
  id v0;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  v0 = objc_alloc_init(MEMORY[0x1E0CB34A8]);
  objc_msgSend(MEMORY[0x1E0CB3978], "detachNewThreadSelector:toTarget:withObject:", sel_invokeThread_, objc_opt_class(), 0);

}

uint64_t FigRemakerServerStart()
{
  gRemakerFamilyServerState_3 = FigReentrantMutexCreate();
  if (!gRemakerFamilyServerState_3 || FigServer_IsMediaparserd())
    return FigSignalErrorAt();
  FigServer_IsMediaplaybackd();
  return FigXPCServerStart();
}

uint64_t FigSharedPlayerCreate(const __CFAllocator *a1, int a2, CFTypeRef *a3)
{
  return FigSharedPlayerCreateWithOptions(a1, a2, 0, a3);
}

uint64_t FigPlayerRemoteCreate(const __CFAllocator *a1, int a2, _QWORD *a3)
{
  return FigPlayerRemoteCreateWithOptions(a1, a2, 0, a3);
}

uint64_t FigPlayerGetClassID()
{
  MEMORY[0x19402F294](&FigPlayerGetClassID_sRegisterFigPlayerTypeOnce, RegisterFigPlayerType);
  return sFigPlayerClassID;
}

uint64_t RegisterFigPlayerType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigPlayerCentralCreate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FigPlayerCentralCreateWithOptions(a1, a2, 0, a3);
}

uint64_t FigPlayerAsyncCreate(uint64_t a1, const void *a2, _QWORD *a3)
{
  return FigPlayerAsyncCreateWithOptions(a1, a2, 0, a3);
}

uint64_t playerasync_SetProperty(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  CFTypeRef v8;
  _QWORD *v9;
  CFTypeRef v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v14;
  char v15;
  CFTypeRef v16;
  CFTypeRef cf;

  v16 = 0;
  cf = 0;
  v15 = 0;
  v14 = 0;
  if (*(_DWORD *)CMBaseObjectGetDerivedStorage() || !a2)
  {
    v6 = FigSignalErrorAt();
    goto LABEL_18;
  }
  v6 = FPSupport_HandlePlayerSetPropertyAndCopyModification((uint64_t)a1, a2, a3, 0, (uint64_t)playerasync_handleSetProperty, &v15, &cf, &v16);
  if ((_DWORD)v6)
  {
LABEL_18:
    v12 = v6;
    v11 = 0;
    goto LABEL_12;
  }
  if (v15)
  {
LABEL_11:
    v11 = 0;
    v12 = 0;
    goto LABEL_12;
  }
  v7 = playerasync_createCommand(a1, 3, 0, &v14);
  if (!(_DWORD)v7)
  {
    v8 = cf;
    if (cf)
      v8 = CFRetain(cf);
    v9 = v14;
    v14[4] = v8;
    v10 = v16;
    if (v16)
      v10 = CFRetain(v16);
    v9[5] = v10;
    playerasync_runAsynchronousCommand(a1, v9);
    goto LABEL_11;
  }
  v12 = v7;
  v11 = v14;
LABEL_12:
  fpa_releaseCommand(v11);
  if (cf)
    CFRelease(cf);
  if (v16)
    CFRelease(v16);
  return v12;
}

uint64_t playerasync_createCommand(const void *a1, int a2, const void *a3, _QWORD *a4)
{
  _DWORD *v8;
  _DWORD *v9;
  CFTypeRef v10;
  CFTypeRef v11;

  v8 = malloc_type_calloc(1uLL, 0x70uLL, 0x10F2040C1459ED2uLL);
  if (!v8)
    return FigSignalErrorAt();
  v9 = v8;
  v8[6] = a2;
  if (a1)
    v10 = CFRetain(a1);
  else
    v10 = 0;
  *((_QWORD *)v9 + 1) = v10;
  if (a3)
    v11 = CFRetain(a3);
  else
    v11 = 0;
  *((_QWORD *)v9 + 2) = v11;
  *a4 = v9;
  return 0;
}

void fpa_releaseCommand(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  if (a1)
  {
    switch(*((_WORD *)a1 + 12))
    {
      case 1:
        goto LABEL_5;
      case 2:
      case 3:
      case 4:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x23:
        v2 = (const void *)a1[4];
        if (v2)
          CFRelease(v2);
LABEL_5:
        v3 = (const void *)a1[5];
        if (v3)
          goto LABEL_6;
        break;
      case 6:
      case 0x12:
      case 0x13:
      case 0x15:
      case 0x21:
      case 0x2B:
        v3 = (const void *)a1[4];
        if (!v3)
          break;
        goto LABEL_6;
      case 0x10:
        v6 = (const void *)a1[4];
        if (!v6)
          goto LABEL_17;
        goto LABEL_16;
      case 0x11:
        v3 = (const void *)a1[8];
        if (!v3)
          break;
        goto LABEL_6;
      case 0x20:
      case 0x29:
        v6 = (const void *)a1[5];
        if (v6)
LABEL_16:
          CFRelease(v6);
LABEL_17:
        v3 = (const void *)a1[6];
        if (!v3)
          break;
        goto LABEL_6;
      case 0x2F:
        v3 = (const void *)a1[7];
        if (!v3)
          break;
LABEL_6:
        CFRelease(v3);
        break;
      default:
        break;
    }
    v4 = (const void *)a1[2];
    if (v4)
      CFRelease(v4);
    v5 = (const void *)a1[1];
    if (v5)
      CFRelease(v5);
    free(a1);
  }
}

uint64_t FigPlayerFileCreate(uint64_t a1, _QWORD *a2)
{
  return FigPlayerFileCreateWithOptions(a1, 0, a2);
}

uint64_t playerfig_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  return FPSupport_HandlePlayerSetPropertyAndCopyModification(a1, a2, a3, 0, (uint64_t)playerfig_handleSetProperty, 0, 0, 0);
}

uint64_t playerfig_SetConnectionActive(const void *a1, int a2)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2AC8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a2)
    v6 = 2;
  else
    v6 = *(_BYTE *)(DerivedStorage + 64) && !*(_BYTE *)(DerivedStorage + 65);
  return playerfig_updatePlayerActiveState(a1, v6);
}

const void *playerfig_disturbPlayQueue()
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFIndex Count;
  uint64_t v3;
  const void *v4;
  CFIndex v5;
  const void *ValueAtIndex;
  const void *result;
  CFRange v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2AC8 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504));
  v3 = Count;
  v4 = *(const void **)(DerivedStorage + 512);
  if (v4)
  {
    v8.location = 0;
    v8.length = Count;
    v5 = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(DerivedStorage + 504), v8, v4) + 1;
  }
  else
  {
    v5 = Count;
  }
  if (v5 >= 1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
    CMBaseObjectGetDerivedStorage();
    itemfig_antiprepare(ValueAtIndex);
  }
  if (v3 < 1)
    result = 0;
  else
    result = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
  *(_QWORD *)(DerivedStorage + 512) = result;
  *(_QWORD *)(DerivedStorage + 520) = 0;
  return result;
}

void playeritemfig_releaseRenderPipelines(const void *a1, uint64_t a2, CFTypeRef a3)
{
  void *v6;
  uint64_t DerivedStorage;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  __CFDictionary *NotificationPayloadForProperties;
  uint64_t v17;
  uint64_t FigBaseObject;
  uint64_t v19;
  void (*v20)(uint64_t);
  const void *v21;
  const __CFArray *v22;
  CFIndex Count;
  uint64_t v24;
  const void *ValueAtIndex;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t);
  const void *v29;
  const __CFArray *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  uint64_t v34;
  const void *v35;
  const __CFArray *v36;
  const void *v37;
  const void *v38;
  CFTypeRef cf;

  v6 = (void *)MEMORY[0x19403137C]();
  if (a2)
    DerivedStorage = CMBaseObjectGetDerivedStorage();
  else
    DerivedStorage = 0;
  cf = 0;
  if (a1)
  {
    v14 = CMBaseObjectGetDerivedStorage();
    if (a3 || (v15 = FigDeferredTransactionCreate(*MEMORY[0x1E0C9AE00], (uint64_t *)&cf), a3 = cf, !v15))
    {
      if (*(_BYTE *)(v14 + 123))
      {
        *(_BYTE *)(v14 + 123) = 0;
        NotificationPayloadForProperties = playerfig_createNotificationPayloadForProperties(a1, a2, v8, v9, v10, v11, v12, v13, CFSTR("IsNeroPlaybackActive"), 0);
        CMNotificationCenterGetDefaultLocalCenter();
        FigDispatchAsyncPostNotification();
        if (NotificationPayloadForProperties)
          CFRelease(NotificationPayloadForProperties);
      }
      v17 = *(_QWORD *)(v14 + 568);
      if (v17)
      {
        FigBaseObject = FigRenderPipelineGetFigBaseObject(v17);
        if (FigBaseObject)
        {
          v19 = FigBaseObject;
          v20 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
          if (v20)
            v20(v19);
        }
        v21 = *(const void **)(v14 + 568);
        if (v21)
        {
          CFRelease(v21);
          *(_QWORD *)(v14 + 568) = 0;
        }
      }
      v22 = *(const __CFArray **)(v14 + 640);
      if (v22)
      {
        Count = CFArrayGetCount(v22);
        if (Count >= 1)
        {
          v24 = Count + 1;
          do
          {
            ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v14 + 640), 0);
            v26 = FigRenderPipelineGetFigBaseObject(ValueAtIndex);
            if (v26)
            {
              v27 = v26;
              v28 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
              if (v28)
                v28(v27);
            }
            CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v14 + 640), 0);
            --v24;
          }
          while (v24 > 1);
        }
        v29 = *(const void **)(v14 + 640);
        if (v29)
        {
          CFRelease(v29);
          *(_QWORD *)(v14 + 640) = 0;
        }
      }
      if (a2)
      {
        if (*(_QWORD *)(DerivedStorage + 1104))
        {
          MEMORY[0x19402EEEC](*(_QWORD *)(v14 + 224));
          v30 = *(const __CFArray **)(v14 + 208);
          if (v30)
            playerfig_clearVideoLayers(v30, 0, a3);
          MEMORY[0x19402EF04](*(_QWORD *)(v14 + 224));
          itemfig_handleReadyToDisplayVideoLatch(a2, 4, a3);
          itemfig_removeAllImageQueues(a2);
        }
        playeritemfig_releaseVideoCompositionObjects(a2);
      }
      v31 = *(const void **)(v14 + 600);
      if (v31)
      {
        CFRelease(v31);
        *(_QWORD *)(v14 + 600) = 0;
      }
      v32 = *(const void **)(v14 + 608);
      if (v32)
      {
        CFRelease(v32);
        *(_QWORD *)(v14 + 608) = 0;
      }
      v33 = *(const void **)(v14 + 616);
      if (v33)
      {
        CFRelease(v33);
        *(_QWORD *)(v14 + 616) = 0;
      }
      v34 = *(_QWORD *)(v14 + 560);
      if (v34)
      {
        playerfig_removeAudioRenderPipelineListeners((uint64_t)a1, v34);
        v35 = *(const void **)(v14 + 560);
        if (v35)
        {
          CFRelease(v35);
          *(_QWORD *)(v14 + 560) = 0;
        }
      }
      FPSupport_ReleasePassthroughHelper();
      *(_QWORD *)(v14 + 912) = 0;
      v36 = *(const __CFArray **)(v14 + 632);
      if (v36)
      {
        if (CFArrayGetCount(v36) >= 1)
        {
          do
          {
            v37 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v14 + 632), 0);
            playerfig_removeAudioRenderPipelineListeners((uint64_t)a1, (uint64_t)v37);
            CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v14 + 632), 0);
          }
          while (CFArrayGetCount(*(CFArrayRef *)(v14 + 632)) > 0);
        }
        v38 = *(const void **)(v14 + 632);
        if (v38)
        {
          CFRelease(v38);
          *(_QWORD *)(v14 + 632) = 0;
        }
      }
      FPSupport_resetClosedCaptionLayer(v14 + 296);
    }
  }
  else
  {
    a3 = 0;
  }
  FigDeferredTransactionCommit((uint64_t)a3);
  if (cf)
    CFRelease(cf);
  objc_autoreleasePoolPop(v6);
}

uint64_t playerasync_CopyProperty(const void *a1, const void *a2, const void *a3, uint64_t *a4)
{
  _DWORD *DerivedStorage;
  _DWORD *v9;
  uint64_t v10;
  CFTypeRef v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFTypeRef v16;
  CFTypeRef v17;
  uint64_t v18;

  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  v18 = 0;
  if (!a4)
    return FigSignalErrorAt();
  v9 = DerivedStorage;
  *a4 = 0;
  if (*DerivedStorage || !a2)
    return FigSignalErrorAt();
  if (!CFEqual(a2, CFSTR("UserVolume")))
  {
    if (CFEqual(a2, CFSTR("LastSentSubtitleSample")))
    {
      MEMORY[0x19402EEEC](*((_QWORD *)v9 + 10));
      v12 = (CFTypeRef)*((_QWORD *)v9 + 12);
      if (v12)
        v12 = CFRetain(v12);
      *a4 = (uint64_t)v12;
      goto LABEL_12;
    }
    if (CFEqual(a2, CFSTR("Status")))
    {
      MEMORY[0x19402EEEC](*((_QWORD *)v9 + 17));
      if (*((_QWORD *)v9 + 2) || v9[2])
      {
        v14 = 0;
        *a4 = FigCFNumberCreateSInt32();
      }
      else
      {
        v14 = 4294954513;
      }
      MEMORY[0x19402EF04](*((_QWORD *)v9 + 17));
      v13 = 0;
      goto LABEL_34;
    }
    if (FigCFEqual())
    {
      v13 = 0;
      v14 = 4294954512;
      goto LABEL_34;
    }
LABEL_14:
    v15 = playerasync_createCommand(a1, 2, 0, &v18);
    if ((_DWORD)v15)
    {
      v14 = v15;
      v13 = v18;
    }
    else
    {
      v16 = CFRetain(a2);
      v13 = v18;
      *(_QWORD *)(v18 + 32) = v16;
      if (a3)
        v17 = CFRetain(a3);
      else
        v17 = 0;
      *(_QWORD *)(v13 + 40) = v17;
      *(_QWORD *)(v13 + 48) = a4;
      if (CFEqual(a2, CFSTR("IsValid")))
      {
        MEMORY[0x19402EEEC](*((_QWORD *)v9 + 17));
        while (!*((_QWORD *)v9 + 2) && !v9[2])
          FigConditionVariableWaitRelative();
        MEMORY[0x19402EF04](*((_QWORD *)v9 + 17));
        playerasync_runImmediateCommand(a1, v13, 0);
      }
      else
      {
        playerasync_runSynchronousCommand((uint64_t)a1, (_DWORD *)v13);
      }
      v14 = *(unsigned int *)(v13 + 28);
    }
    goto LABEL_34;
  }
  MEMORY[0x19402EEEC](*((_QWORD *)v9 + 10));
  v10 = *((_QWORD *)v9 + 11);
  if (!v10)
  {
    MEMORY[0x19402EF04](*((_QWORD *)v9 + 10));
    goto LABEL_14;
  }
  *a4 = v10;
  CFRetain(*((CFTypeRef *)v9 + 11));
LABEL_12:
  MEMORY[0x19402EF04](*((_QWORD *)v9 + 10));
  v13 = 0;
  v14 = 0;
LABEL_34:
  fpa_releaseCommand((_QWORD *)v13);
  return v14;
}

void playerfig_updateVideoLayerSize(const void *a1, CFTypeRef a2)
{
  uint64_t DerivedStorage;
  const void *v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  void (*v9)(const void *, char *, uint64_t *);
  float v10;
  float v11;
  uint64_t v12;
  double v13;
  double v14;
  int VideoMatrixRotationAngleAndFlips;
  double v16;
  double v17;
  const __CFArray *v18;
  CGAffineTransform v19;
  CGAffineTransform t2;
  CGAffineTransform t1;
  char v22;
  CGAffineTransform v23;
  uint64_t v24;
  CFTypeRef v25;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(const void **)(DerivedStorage + 512);
  v25 = 0;
  if (v5)
  {
    v6 = DerivedStorage;
    if (!*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 1200))
      return;
    v7 = (void *)MEMORY[0x19403137C]();
    if (*(_QWORD *)(v6 + 200) && *(_QWORD *)(v6 + 208))
    {
      v24 = 0;
      v8 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
      *(_OWORD *)&v23.a = *MEMORY[0x1E0C9BAA8];
      *(_OWORD *)&v23.c = v8;
      *(_OWORD *)&v23.tx = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
      if (!a2)
      {
        if (FigDeferredTransactionCreate(*MEMORY[0x1E0C9AE00], (uint64_t *)&v25))
        {
LABEL_27:
          v12 = (uint64_t)v25;
          goto LABEL_12;
        }
        a2 = v25;
      }
      v9 = *(void (**)(const void *, char *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v9)
      {
        v9(v5, (char *)&v24 + 4, &v24);
        v11 = *((float *)&v24 + 1);
        v10 = *(float *)&v24;
      }
      else
      {
        v10 = 0.0;
        v11 = 0.0;
      }
      if (*(_BYTE *)(v6 + 76))
      {
        FPSupport_AppendDeferredTransactionChangeForSettingBoundsOnLayers(a2, *(CFArrayRef *)(v6 + 200), (uint64_t)"playerfig_updateVideoLayerSize", 0.0, 0.0, v11, v10);
        v11 = *((float *)&v24 + 1);
        v10 = *(float *)&v24;
      }
      v13 = v11 * 0.5;
      v14 = v10 * 0.5;
      if (FPSupport_ShouldApplyVideoTrackMatrix(a1, v5))
      {
        LOBYTE(v19.a) = 0;
        v22 = 0;
        VideoMatrixRotationAngleAndFlips = itemfig_getVideoMatrixRotationAngleAndFlips((uint64_t)v5, &v19, &v22);
        CGAffineTransformMakeRotation(&t1, (double)VideoMatrixRotationAngleAndFlips * 3.14159265 / 180.0);
        v16 = -1.0;
        if (v22)
          v17 = -1.0;
        else
          v17 = 1.0;
        if (!LOBYTE(v19.a))
          v16 = 1.0;
        CGAffineTransformMakeScale(&t2, v17, v16);
        CGAffineTransformConcat(&v23, &t1, &t2);
      }
      v18 = *(const __CFArray **)(v6 + 208);
      v19 = v23;
      FPSupport_AppendDeferredTransactionChangeForSettingTransformOnLayers(a2, 1, (__int128 *)&v19, v18, (uint64_t)"playerfig_updateVideoLayerSize", v13, v14);
      goto LABEL_27;
    }
  }
  else
  {
    v7 = (void *)MEMORY[0x19403137C]();
  }
  v12 = 0;
LABEL_12:
  FigDeferredTransactionCommit(v12);
  if (v25)
    CFRelease(v25);
  objc_autoreleasePoolPop(v7);
}

void playerfig_applyEQPreset(uint64_t a1)
{
  uint64_t DerivedStorage;
  int v3;
  CFNumberRef v4;
  int valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
  {
    FigSignalErrorAt();
  }
  else if (*(_QWORD *)(DerivedStorage + 560) || *(_QWORD *)(DerivedStorage + 632))
  {
    valuePtr = *(_DWORD *)(DerivedStorage + 80);
    if (*(_QWORD *)(DerivedStorage + 512))
    {
      v3 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 936);
      if (v3)
        valuePtr = v3;
    }
    v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    fp_setPropertyOnAllAudioRenderPipelines(a1, (uint64_t)CFSTR("EQPreset"), (uint64_t)v4);
    CFRelease(v4);
  }
}

uint64_t playerfig_doesAnyWorkingOrLameDuckItemHaveVideo()
{
  uint64_t DerivedStorage;
  CFIndex FirstIndexOfValue;
  CFIndex v2;
  unsigned __int8 v3;
  CFIndex v4;
  const void *ValueAtIndex;
  uint64_t v6;
  const __CFArray *v7;
  CFIndex Count;
  CFIndex v9;
  uint64_t v10;
  const __CFArray *v11;
  uint64_t v14;
  int v15;
  CFRange v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
  if (!*(_QWORD *)(DerivedStorage + 512)
    || (v16.length = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504)),
        v16.location = 0,
        FirstIndexOfValue = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(DerivedStorage + 504), v16, *(const void **)(DerivedStorage + 512)), FirstIndexOfValue < 0))
  {
    v3 = 0;
  }
  else
  {
    v2 = FirstIndexOfValue;
    v3 = 0;
    v4 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), v4);
      v6 = CMBaseObjectGetDerivedStorage();
      if (*(_DWORD *)(v6 + 1000))
        break;
      v7 = *(const __CFArray **)(v6 + 1048);
      if (v7)
      {
        Count = CFArrayGetCount(v7);
        if (Count >= 1)
        {
          v9 = Count;
          v10 = 0;
          while (1)
          {
            v15 = 0;
            v14 = 0;
            FigCFArrayGetInt32AtIndex();
            itemfig_getTrackStorage((uint64_t)ValueAtIndex, v15, &v14);
            if (v14)
            {
              if (*(_DWORD *)(v14 + 4) == 1986618469)
              {
                v11 = *(const __CFArray **)(v14 + 216);
                if (v11)
                {
                  if (CFArrayGetCount(v11) >= 1)
                    break;
                }
              }
            }
            if (v9 == ++v10)
              goto LABEL_13;
          }
          v3 = 1;
        }
      }
LABEL_13:
      if (v4++ == v2)
        goto LABEL_19;
    }
    v3 = 1;
  }
LABEL_19:
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
  return v3;
}

uint64_t FigPlaybackItemGetClassID()
{
  MEMORY[0x19402F294](&FigPlaybackItemGetClassID_sRegisterFigPlaybackItemTypeOnce, RegisterFigPlaybackItemType);
  return sFigPlaybackItemClassID;
}

uint64_t RegisterFigPlaybackItemType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigRemote_SerializeCookiesForURL(const __CFURL *a1, uint64_t a2)
{
  CFTypeRef v4;
  void (*v5)(CFTypeRef, const __CFURL *, CFArrayRef *);
  CFIndex Count;
  CFArrayRef v7;
  uint64_t v8;
  CFArrayRef theArray;

  theArray = 0;
  if (!FigCFHTTPIsHTTPBasedURL(a1))
    return 0;
  v4 = FigURLStorageSessionCopyGlobalSession();
  v5 = *(void (**)(CFTypeRef, const __CFURL *, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v5 || (v5(v4, a1, &theArray), !theArray))
  {
    v8 = 0;
    goto LABEL_10;
  }
  Count = CFArrayGetCount(theArray);
  v7 = theArray;
  if (Count < 1)
  {
    v8 = 0;
    if (!theArray)
      goto LABEL_10;
    goto LABEL_9;
  }
  v8 = MEMORY[0x19402EA30](theArray, *MEMORY[0x1E0C9AE00], a2);
  v7 = theArray;
  if (theArray)
LABEL_9:
    CFRelease(v7);
LABEL_10:
  if (v4)
    CFRelease(v4);
  return v8;
}

uint64_t itemasync_SetProperty(const void *a1, const void *a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  CFTypeRef v9;
  _QWORD *v10;
  CFTypeRef v11;
  _QWORD *v12;
  uint64_t v13;
  char v15;
  CFTypeRef v16;
  CFTypeRef cf;
  _QWORD *v18;

  v18 = 0;
  v16 = 0;
  cf = 0;
  v15 = 0;
  if (*(_DWORD *)CMBaseObjectGetDerivedStorage() || !a2)
  {
    v13 = FigSignalErrorAt();
    v12 = 0;
    v6 = 0;
    goto LABEL_14;
  }
  v6 = (void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v6 || *(_DWORD *)CMBaseObjectGetDerivedStorage())
  {
    v7 = FigSignalErrorAt();
    goto LABEL_22;
  }
  v7 = FPSupport_HandlePlayerSetPropertyAndCopyModification((uint64_t)a1, a2, a3, 0, (uint64_t)itemasync_handleSetProperty, &v15, &cf, &v16);
  if ((_DWORD)v7)
  {
LABEL_22:
    v13 = v7;
    v12 = 0;
    goto LABEL_14;
  }
  if (v15)
  {
LABEL_13:
    v12 = 0;
    v13 = 0;
    goto LABEL_14;
  }
  v8 = playerasync_createCommand(v6, 26, a1, &v18);
  if (!(_DWORD)v8)
  {
    v9 = cf;
    if (cf)
      v9 = CFRetain(cf);
    v10 = v18;
    v18[4] = v9;
    v11 = v16;
    if (v16)
      v11 = CFRetain(v16);
    v10[5] = v11;
    playerasync_runAsynchronousCommand(v6, v10);
    goto LABEL_13;
  }
  v13 = v8;
  v12 = v18;
LABEL_14:
  fpa_releaseCommand(v12);
  if (cf)
    CFRelease(cf);
  if (v16)
    CFRelease(v16);
  if (v6)
    CFRelease(v6);
  return v13;
}

uint64_t playercentral_CopyPlayQueueItem(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, CFTypeRef *);
  uint64_t v10;
  uint64_t v11;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
    v6 = CMBaseObjectGetDerivedStorage();
  else
    v6 = 0;
  cf = 0;
  if (*(_BYTE *)(DerivedStorage + 8))
    return FigSignalErrorAt();
  v7 = *(_QWORD *)(DerivedStorage + 16);
  if (!v7)
    return FigSignalErrorAt();
  if (!v6)
  {
    if (a3)
    {
      v8 = 0;
      goto LABEL_13;
    }
    return FigSignalErrorAt();
  }
  if (*(_BYTE *)(v6 + 16) || !a3)
    return FigSignalErrorAt();
  v8 = *(_QWORD *)(v6 + 8);
LABEL_13:
  v9 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v9)
  {
    v10 = v9(v7, v8, &cf);
    if (cf)
    {
      v11 = FigCFWeakReferenceTableCopyValue();
      if (v11)
        v10 = v10;
      else
        v10 = 4294954511;
      CFRelease(cf);
    }
    else
    {
      v11 = 0;
    }
  }
  else
  {
    v11 = 0;
    v10 = 4294954514;
  }
  *a3 = v11;
  return v10;
}

uint64_t playerfig_CopyPlayQueueItem(uint64_t a1, const void *a2, const void **a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;
  const __CFArray *v12;
  CFIndex v13;
  const void *ValueAtIndex;
  uint64_t v15;
  const __CFArray *v16;
  CFIndex FirstIndexOfValue;
  CFIndex v18;
  NSObject *v19;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFRange v21;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  *a3 = 0;
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  if (!a2)
  {
    v11 = (_QWORD *)(DerivedStorage + 496);
    MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
    if (CFArrayGetCount(*(CFArrayRef *)(v7 + 504)) >= 1)
    {
      v12 = *(const __CFArray **)(v7 + 504);
      v13 = 0;
      goto LABEL_10;
    }
    goto LABEL_16;
  }
  v8 = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)v8)
    return FigSignalErrorAt();
  v9 = v8;
  if (*(_QWORD *)(v8 + 8) != a1)
    return FigSignalErrorAt();
  v11 = (_QWORD *)(v7 + 496);
  MEMORY[0x19402EA0C](*(_QWORD *)(v7 + 496));
  if (*(_BYTE *)(v9 + 1))
  {
    v16 = *(const __CFArray **)(v7 + 504);
    v21.length = CFArrayGetCount(v16);
    v21.location = 0;
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v16, v21, a2);
    if (FirstIndexOfValue == -1)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v15 = FigSignalErrorAt();
      ValueAtIndex = *a3;
      if (*a3)
LABEL_11:
        CFRetain(ValueAtIndex);
LABEL_17:
      if (dword_1EE2A2AC8 >= 5)
      {
        v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      goto LABEL_19;
    }
    v18 = FirstIndexOfValue + 1;
    if (FirstIndexOfValue + 1 < CFArrayGetCount(*(CFArrayRef *)(v7 + 504)))
    {
      v12 = *(const __CFArray **)(v7 + 504);
      v13 = v18;
LABEL_10:
      ValueAtIndex = CFArrayGetValueAtIndex(v12, v13);
      v15 = 0;
      *a3 = ValueAtIndex;
      if (!ValueAtIndex)
        goto LABEL_17;
      goto LABEL_11;
    }
LABEL_16:
    v15 = 0;
    *a3 = 0;
    goto LABEL_17;
  }
  v15 = FigSignalErrorAt();
LABEL_19:
  MEMORY[0x19402EA24](*v11);
  return v15;
}

uint64_t itemfig_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  return FPSupport_HandlePlayerSetPropertyAndCopyModification(a1, a2, a3, 0, (uint64_t)itemfig_handleSetProperty, 0, 0, 0);
}

uint64_t itemasync_SetCurrentTime(const void *a1, __int128 *a2, int a3)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 v11;
  uint64_t v12;
  void *v13;

  v13 = 0;
  if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  v7 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v7)
  {
    v12 = FigSignalErrorAt();
    fpa_releaseCommand(0);
    return v12;
  }
  v8 = (void *)v7;
  if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
  {
    v9 = FigSignalErrorAt();
    goto LABEL_7;
  }
  playerasync_removeQueuedSeekCommands(v8, a1);
  v9 = playerasync_createCommand(v8, 30, a1, &v13);
  v10 = v13;
  if (!(_DWORD)v9)
  {
    v11 = *a2;
    *((_QWORD *)v13 + 6) = *((_QWORD *)a2 + 2);
    *((_OWORD *)v10 + 2) = v11;
    *((_DWORD *)v10 + 14) = a3;
    playerasync_runAsynchronousCommand(v8, v10);
LABEL_7:
    v10 = 0;
  }
  fpa_releaseCommand(v10);
  CFRelease(v8);
  return v9;
}

uint64_t itemfig_SetCurrentTime(const void *a1, CMTime *a2, char a3)
{
  CMTime v4;

  v4 = *a2;
  return itemfig_setCurrentTimeWithRangeAndIDGuts(a1, &v4, a3, MEMORY[0x1E0CA2E28], MEMORY[0x1E0CA2E30], 0, 0, 0);
}

uint64_t itemfig_SetCurrentTimeWithRange(const void *a1, CMTime *a2, char a3, CMTime *a4, uint64_t a5)
{
  __int128 v6;
  uint64_t v7;
  CMTime v8;
  CMTime v9;

  v9 = *a2;
  v8 = *a4;
  v6 = *(_OWORD *)a5;
  v7 = *(_QWORD *)(a5 + 16);
  return itemfig_setCurrentTimeWithRangeAndIDGuts(a1, &v9, a3, &v8, &v6, 0, 0, 0);
}

uint64_t itemfig_GetCurrentTime(uint64_t a1, uint64_t a2)
{
  _BYTE *DerivedStorage;
  _BYTE *v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
    return FigSignalErrorAt();
  if (!a2)
    return FigSignalErrorAt();
  v4 = DerivedStorage;
  v5 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v5)
    return FigSignalErrorAt();
  v6 = (const void *)v5;
  v7 = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)v7)
  {
    v11 = FigSignalErrorAt();
  }
  else
  {
    v8 = v7;
    MEMORY[0x19402EA0C](*(_QWORD *)(v7 + 496));
    v9 = *((_QWORD *)v4 + 44);
    if (v9)
    {
      FigPlaybackBossGetTime(v9, &v13);
      *(_OWORD *)a2 = v13;
      *(_QWORD *)(a2 + 16) = v14;
    }
    else
    {
      v10 = *(_OWORD *)(v4 + 24);
      *(_QWORD *)(a2 + 16) = *((_QWORD *)v4 + 5);
      *(_OWORD *)a2 = v10;
    }
    MEMORY[0x19402EA24](*(_QWORD *)(v8 + 496));
    v11 = 0;
  }
  CFRelease(v6);
  return v11;
}

uint64_t FigTimebaseSynchronizeToMoment(OpaqueCMTimebase *a1, OpaqueCMTimebase *a2, uint64_t a3)
{
  int v3;
  _DWORD v5[2];
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a3 + 8);
  v3 = *(_DWORD *)(a3 + 4);
  v5[0] = 120;
  v5[1] = v3;
  v7 = *(_OWORD *)(a3 + 16);
  v8 = *(_QWORD *)(a3 + 32);
  v9 = *(_OWORD *)(a3 + 40);
  v10 = *(_QWORD *)(a3 + 56);
  v11 = *(_QWORD *)(a3 + 64);
  v13 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v12 = *MEMORY[0x1E0CA2E18];
  v15 = v13;
  v14 = v12;
  return figtimebase_synchronizeToMomentInternal(a1, a2, (uint64_t)v5);
}

void itemasync_reflectSubItemNotification(uint64_t a1, const void *a2, const void *a3, uint64_t a4, const __CFDictionary *a5)
{
  const void *v8;
  const void *Value;

  CMBaseObjectGetDerivedStorage();
  v8 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v8)
    CMBaseObjectGetDerivedStorage();
  if (CFEqual(a3, CFSTR("ItemWasRemovedFromPlayQueue")))
  {
    if (a5)
    {
      Value = CFDictionaryGetValue(a5, CFSTR("AsRequested"));
      if (!v8 || (const void *)*MEMORY[0x1E0C9AE50] == Value)
        goto LABEL_8;
      goto LABEL_7;
    }
    if (v8)
LABEL_7:
      playerasync_removeItemFromPlayQueueWithoutInformingSubPlayer((uint64_t)v8, a2);
  }
LABEL_8:
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (v8)
    CFRelease(v8);
}

uint64_t itemasync_MakeReadyForInspection(const void *a1, const void *a2, uint64_t a3)
{
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  CFTypeRef v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = 0;
  if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  v7 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v7)
  {
    v8 = (const void *)v7;
    if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
    {
      v12 = FigSignalErrorAt();
      v11 = 0;
    }
    else
    {
      v9 = playerasync_createCommand(v8, 33, a1, &v14);
      if ((_DWORD)v9)
      {
        v12 = v9;
        v11 = v14;
      }
      else
      {
        if (a2)
          v10 = CFRetain(a2);
        else
          v10 = 0;
        v11 = v14;
        *(_QWORD *)(v14 + 32) = v10;
        *(_QWORD *)(v11 + 40) = a3;
        playerasync_runSynchronousCommand((uint64_t)v8, (_DWORD *)v11);
        v12 = *(unsigned int *)(v11 + 28);
      }
    }
    fpa_releaseCommand((_QWORD *)v11);
    CFRelease(v8);
    return v12;
  }
  else
  {
    v13 = FigSignalErrorAt();
    fpa_releaseCommand(0);
    return v13;
  }
}

uint64_t itemcentral_MakeReadyForInspection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 16))
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  if (!itemcentral_isParentPlayerValid())
    return FigSignalErrorAt();
  v7 = *(_QWORD *)(v6 + 8);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v8)
    return v8(v7, a2, a3);
  else
    return 4294954514;
}

uint64_t itemfig_makeReadyForInspection(void *a1, const __CFArray *a2, char *a3)
{
  _BYTE *DerivedStorage;
  _BYTE *v8;
  uint64_t ready;
  __CFArray *v10;
  CFIndex Count;
  uint64_t v12;
  CFIndex i;
  const void *ValueAtIndex;
  __CFArray *v15;
  const __CFString *v16;
  __CFArray *Mutable;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, __CFArray *, char *, _QWORD);
  uint64_t v20;
  uint64_t v21;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v23 = 1;
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  if (DerivedStorage[1242]
    || (DerivedStorage[1242] = 1, ready = itemfig_retrieveAssetBasicsIfReady(a1), !(_DWORD)ready))
  {
    if (v8[1200])
      goto LABEL_8;
    if (!v8[1240])
    {
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      if (!Mutable)
        return FigSignalErrorAt();
      v10 = Mutable;
      CFArrayAppendValue(Mutable, CFSTR("assetProperty_ContentByteStream"));
      CFArrayAppendValue(v10, CFSTR("assetProperty_FormatReader"));
      CFArrayAppendValue(v10, CFSTR("assetProperty_Tracks"));
      CFArrayAppendValue(v10, CFSTR("MediaSelectionArray"));
      if (!a2)
        goto LABEL_32;
LABEL_9:
      Count = CFArrayGetCount(a2);
      if (!Count)
        goto LABEL_32;
      v12 = Count;
      if (v10 || (v10 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378])) != 0)
      {
        if (v12 >= 1)
        {
          for (i = 0; v12 != i; ++i)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
            if (CFEqual(ValueAtIndex, CFSTR("Lyrics")))
            {
              v15 = v10;
              v16 = CFSTR("Lyrics");
            }
            else if (CFEqual(ValueAtIndex, CFSTR("AccurateDuration")))
            {
              v15 = v10;
              v16 = CFSTR("Duration");
            }
            else if (CFEqual(ValueAtIndex, CFSTR("InitialSamples")))
            {
              v15 = v10;
              v16 = CFSTR("assetProperty_InitialSamples");
            }
            else if (CFEqual(ValueAtIndex, CFSTR("iTunesGaplessInfo")))
            {
              v15 = v10;
              v16 = CFSTR("iTunesGaplessInfo");
            }
            else
            {
              if (!CFEqual(ValueAtIndex, CFSTR("CPEProtector")))
              {
                os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                continue;
              }
              CFArrayAppendValue(v10, CFSTR("assetProperty_ProtectedStatus"));
              v15 = v10;
              v16 = CFSTR("assetProperty_CPEProtector");
            }
            CFArrayAppendValue(v15, v16);
          }
        }
        if (!CFArrayGetCount(v10))
        {
          CFRelease(v10);
LABEL_37:
          v21 = 0;
          if (a3)
            *a3 = v23;
          return v21;
        }
LABEL_32:
        if (v10)
        {
          v18 = *((_QWORD *)v8 + 152);
          v19 = *(uint64_t (**)(uint64_t, __CFArray *, char *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 16);
          if (v19)
          {
            v20 = v19(v18, v10, &v23, 0);
            v21 = v20;
            if (a3 && !(_DWORD)v20)
              *a3 = v23;
          }
          else
          {
            v21 = 4294954514;
          }
          CFRelease(v10);
          return v21;
        }
        goto LABEL_37;
      }
      return FigSignalErrorAt();
    }
    ready = itemfig_assureBasicsReadyUsingAsset(a1);
    if (!(_DWORD)ready)
    {
LABEL_8:
      v10 = 0;
      if (!a2)
        goto LABEL_32;
      goto LABEL_9;
    }
  }
  return ready;
}

uint64_t FigReadCacheAddOneFile(uint64_t a1, const void *a2)
{
  int v3;
  uint64_t result;
  _DWORD *v5;

  v3 = a1;
  if (gFigReadCache && *(_DWORD *)gFigReadCache || (result = FigReadCacheInitialize(a1, 64, 0x40000u), !(_DWORD)result))
  {
    v5 = malloc_type_calloc(1uLL, 0x40uLL, 0x1062040E84F1957uLL);
    v5[4] = (v3 << 31 >> 31) & 5;
    *((_QWORD *)v5 + 3) = CFRetain(a2);
    IssueFigReadCacheRequest(v5);
    return 0;
  }
  return result;
}

uint64_t FigReadCacheInitialize(uint64_t a1, int a2, unsigned int a3)
{
  size_t v4;
  uint64_t v5;
  const __CFAllocator *v6;
  const __CFDictionary *ModelSpecificPropertyList;
  const __CFDictionary *v8;
  CFTypeID v9;
  CFTypeID v10;
  CFIndex AppIntegerValue;
  CFIndex v14;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  vm_map_t *v20;
  vm_map_t v21;
  CFAllocatorRef v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  __CFDictionary *Mutable;
  CFAllocatorContext value;
  uint64_t valuePtr;

  LODWORD(v4) = a2;
  MEMORY[0x19402F294](&sSetupFigReadCacheStructureOnce, SetupFigReadCacheStructure);
  if (!gFigReadCache)
    return 4294967188;
  MEMORY[0x19402EEEC](*(_QWORD *)(gFigReadCache + 8));
  v5 = gFigReadCache;
  if (*(_DWORD *)gFigReadCache)
  {
    v4 = 0;
  }
  else
  {
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    ModelSpecificPropertyList = (const __CFDictionary *)FigCreateModelSpecificPropertyList();
    if (ModelSpecificPropertyList)
    {
      v8 = ModelSpecificPropertyList;
      value.version = 0;
      valuePtr = 0;
      if (CFDictionaryGetValueIfPresent(ModelSpecificPropertyList, CFSTR("ReadCacheNumberOfBlocks"), (const void **)&value))
      {
        v9 = CFGetTypeID((CFTypeRef)value.version);
        if (v9 == CFNumberGetTypeID())
        {
          CFNumberGetValue((CFNumberRef)value.version, kCFNumberSInt64Type, &valuePtr);
          if ((unint64_t)(valuePtr - 2) < 0xFFFFFFFE)
            LODWORD(v4) = valuePtr;
        }
      }
      if (CFDictionaryGetValueIfPresent(v8, CFSTR("ReadCacheBlockSize"), (const void **)&value))
      {
        v10 = CFGetTypeID((CFTypeRef)value.version);
        if (v10 == CFNumberGetTypeID())
        {
          CFNumberGetValue((CFNumberRef)value.version, kCFNumberSInt64Type, &valuePtr);
          if ((unint64_t)(valuePtr - 0x20000) < 0xFFFE0000)
            a3 = valuePtr;
        }
      }
      CFRelease(v8);
    }
    LOBYTE(value.version) = 0;
    AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("read_cache_num_entries"), CFSTR("com.apple.coremedia"), (Boolean *)&value);
    if (AppIntegerValue >= 0x100000000 || AppIntegerValue <= 1 || LOBYTE(value.version) == 0)
      v4 = v4;
    else
      v4 = AppIntegerValue;
    v14 = CFPreferencesGetAppIntegerValue(CFSTR("read_cache_block_size"), CFSTR("com.apple.coremedia"), (Boolean *)&value);
    if (v14 >= 0x100000000 || v14 <= 0x1FFFF || LOBYTE(value.version) == 0)
      v17 = a3;
    else
      v17 = v14;
    if (v17 <= 0x20000)
      v18 = 0x20000;
    else
      v18 = v17;
    *(_QWORD *)(gFigReadCache + 16) = FigSemaphoreCreate();
    *(_QWORD *)(gFigReadCache + 32) = FigSimpleMutexCreate();
    v19 = FigSimpleMutexCreate();
    v20 = (vm_map_t *)MEMORY[0x1E0C83DA0];
    *(_QWORD *)(gFigReadCache + 184) = v19;
    v21 = *v20;
    value.version = 0;
    value.info = (void *)v18;
    memset(&value.retain, 0, 40);
    value.deallocate = (CFAllocatorDeallocateCallBack)PurgeableVMAllocatorDeallocateCallBack;
    value.preferredSize = 0;
    v22 = CFAllocatorCreate(0, &value);
    v23 = gFigReadCache;
    *(_QWORD *)(gFigReadCache + 168) = v22;
    *(_DWORD *)(v23 + 104) = v18;
    *(_DWORD *)(v23 + 108) = v4;
    v24 = malloc_type_calloc(v4, 0x68uLL, 0x1030040915FFAA9uLL);
    *(_QWORD *)(gFigReadCache + 112) = v24;
    if (v24)
    {
      if ((_DWORD)v4)
      {
        v25 = 0;
        v26 = 104 * v4;
        while (1)
        {
          vm_allocate(v21, (vm_address_t *)(*(_QWORD *)(gFigReadCache + 112) + v25 + 40), *(unsigned int *)(gFigReadCache + 104), 1593835523);
          v27 = *(_QWORD *)(gFigReadCache + 112) + v25;
          v28 = *(void **)(v27 + 40);
          v29 = v28
              ? CMBlockBufferCreateWithMemoryBlock(0, v28, *(unsigned int *)(gFigReadCache + 104), *(CFAllocatorRef *)(gFigReadCache + 168), 0, 0, *(unsigned int *)(gFigReadCache + 104), 0, (CMBlockBufferRef *)(v27 + 48)): FigSignalErrorAt();
          v4 = v29;
          if ((_DWORD)v29)
            break;
          v30 = *(_QWORD *)(gFigReadCache + 112) + v25;
          *(_DWORD *)(v30 + 72) = -1;
          MoveToVGroup(v30, 4u, 0);
          v25 += 104;
          if (v26 == v25)
          {
            v4 = 0;
            break;
          }
        }
      }
    }
    else
    {
      v4 = FigSignalErrorAt();
    }
    Mutable = CFDictionaryCreateMutable(v6, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA52C0], (const void *)*MEMORY[0x1E0C9AE40]);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA52C8], CFSTR("com.apple.coremedia.readcache"));
    FigThreadCreate();
    if (Mutable)
      CFRelease(Mutable);
    v5 = gFigReadCache;
    *(_DWORD *)gFigReadCache = 1;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v5 + 8));
  return v4;
}

uint64_t SetupFigReadCacheStructure()
{
  uint64_t result;
  uint64_t v1;

  result = (uint64_t)malloc_type_calloc(1uLL, 0x138uLL, 0x106004043265632uLL);
  if (result)
  {
    v1 = result;
    *(_QWORD *)(result + 8) = FigSimpleMutexCreate();
    result = FigReadWriteLockCreate();
    *(_QWORD *)(v1 + 88) = result;
    gFigReadCache = v1;
  }
  return result;
}

BOOL MoveToVGroup(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v4;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v23;

  v23 = 0;
  if (*(_DWORD *)(a1 + 72) == a2)
  {
    v4 = 1;
  }
  else
  {
    v6 = a2;
    MEMORY[0x19402EEEC](*(_QWORD *)(gFigReadCache + 184));
    v7 = *(_DWORD *)(a1 + 72);
    if (v7 != -1)
    {
      v8 = gFigReadCache;
      v9 = *(_QWORD *)(a1 + 80);
      v10 = *(_QWORD *)(a1 + 88);
      if (v9)
      {
        *(_QWORD *)(v9 + 88) = v10;
        v10 = *(_QWORD *)(a1 + 88);
      }
      else
      {
        *(_QWORD *)(gFigReadCache + 24 * v7 + 192) = v10;
      }
      v11 = v8 + 24 * v7;
      v12 = (_QWORD *)(v11 + 200);
      if (v10)
        v12 = (_QWORD *)(v10 + 80);
      *v12 = v9;
      *(_QWORD *)(a1 + 80) = 0;
      *(_QWORD *)(a1 + 88) = 0;
      --*(_DWORD *)(v11 + 208);
    }
    v13 = gFigReadCache;
    v14 = gFigReadCache + 24 * v6;
    if (a3 == 1)
    {
      v17 = *(_QWORD *)(v14 + 192);
      v15 = (_QWORD *)(v14 + 192);
      v16 = v17;
      if (v17)
      {
        *(_QWORD *)(v16 + 80) = a1;
        *(_QWORD *)(a1 + 88) = v16;
      }
      else
      {
        *(_QWORD *)(gFigReadCache + 24 * v6 + 200) = a1;
      }
    }
    else
    {
      v19 = *(_QWORD *)(v14 + 200);
      v15 = (_QWORD *)(v14 + 200);
      v18 = v19;
      if (v19)
      {
        *(_QWORD *)(v18 + 88) = a1;
        *(_QWORD *)(a1 + 80) = v18;
      }
      else
      {
        *(_QWORD *)(gFigReadCache + 24 * v6 + 192) = a1;
      }
    }
    *v15 = a1;
    ++*(_DWORD *)(v13 + 24 * v6 + 208);
    *(_DWORD *)(a1 + 72) = v6;
    MEMORY[0x19402EF04](*(_QWORD *)(gFigReadCache + 184));
    switch(v6)
    {
      case 0u:
        goto LABEL_24;
      case 1u:
        v20 = 1537;
        goto LABEL_23;
      case 2u:
        v20 = 1025;
        goto LABEL_23;
      case 3u:
        v20 = 513;
        goto LABEL_23;
      case 4u:
        v20 = 33;
        goto LABEL_23;
      default:
        v20 = 1;
LABEL_23:
        v6 = v20 | ((a3 != 1) << 6);
LABEL_24:
        v4 = 0;
        v23 = v6;
        break;
    }
  }
  return !MEMORY[0x194031988](*MEMORY[0x1E0C83DA0], *(_QWORD *)(a1 + 40), v4, &v23)
      && v23 == 2;
}

uint64_t IssueFigReadCacheRequest(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  MEMORY[0x19402EEEC](*(_QWORD *)(gFigReadCache + 32));
  v2 = gFigReadCache;
  v3 = *(_QWORD *)(gFigReadCache + 48);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = a1;
    *a1 = v3;
    v4 = gFigReadCache;
  }
  else
  {
    *(_QWORD *)(gFigReadCache + 40) = a1;
    v4 = v2;
  }
  *(_QWORD *)(v2 + 48) = a1;
  ++*(_DWORD *)(v2 + 56);
  MEMORY[0x19402EF04](*(_QWORD *)(v4 + 32));
  return FigSemaphoreSignal();
}

uint64_t FigCachedFileByteStreamCreate(const void *a1, uint64_t a2, CFAllocatorRef Default, _QWORD *a4)
{
  _QWORD *CacheNewRequestCompletion;
  void *v8;
  uint64_t v9;
  uint64_t DerivedStorage;
  const void *ByteStream;
  uint64_t CMBaseObject;
  unsigned int (*v13)(uint64_t, _QWORD, _QWORD, CFNumberRef *);
  uint64_t v14;
  uint64_t v15;
  CFNumberRef number;
  uint64_t v18;
  uint64_t v19;

  v18 = 0;
  if (!a1)
    return FigSignalErrorAt();
  if (!a4)
    return FigSignalErrorAt();
  CacheNewRequestCompletion = FigReadCacheNewRequestCompletion();
  if (!CacheNewRequestCompletion)
    return FigSignalErrorAt();
  v8 = CacheNewRequestCompletion;
  v19 = 0;
  FigReadCacheAddOneFileAndCopyContainer(1, a1, CacheNewRequestCompletion, &v18);
  if (!v18)
  {
    FigReadCacheDisposeRequestCompletion(v8);
    v15 = CMByteStreamCreateForFileURL();
    v14 = 0;
    if (!(_DWORD)v15)
      return v14;
    return v15;
  }
  number = 0;
  MEMORY[0x19402F294](&FigCachedFileByteStreamGetClassID_sRegisterFigCachedFileByteStreamClassOnce, RegisterFigCachedFileByteStreamClass);
  v9 = CMDerivedObjectCreate();
  if ((_DWORD)v9)
  {
    v14 = v9;
    FigReadCacheDisposeRequestCompletion(v8);
  }
  else
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!Default)
      Default = CFAllocatorGetDefault();
    *(_QWORD *)DerivedStorage = Default;
    *(_QWORD *)DerivedStorage = CFRetain(Default);
    *(_QWORD *)(DerivedStorage + 32) = v8;
    ByteStream = (const void *)FigReadCacheContainerGetByteStream(v18);
    *(_QWORD *)(DerivedStorage + 8) = ByteStream;
    *(_QWORD *)(DerivedStorage + 8) = CFRetain(ByteStream);
    *(_QWORD *)(DerivedStorage + 24) = v18;
    *(_QWORD *)(DerivedStorage + 16) = CFRetain(a1);
    *(_QWORD *)(DerivedStorage + 112) = FigSimpleMutexCreate();
    *(_BYTE *)(DerivedStorage + 120) = 0;
    FigByteStreamStatsSetupWorker();
    CMBaseObject = CMByteStreamGetCMBaseObject();
    v13 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
    if (v13 && !v13(CMBaseObject, *MEMORY[0x1E0CA2070], *MEMORY[0x1E0C9AE00], &number))
    {
      CFNumberGetValue(number, kCFNumberSInt64Type, (void *)(DerivedStorage + 40));
      CFRelease(number);
    }
    v14 = 0;
    *a4 = v19;
  }
  return v14;
}

_QWORD *FigReadCacheNewRequestCompletion()
{
  _QWORD *v0;

  v0 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
  if (v0)
  {
    *v0 = FigSimpleMutexCreate();
    v0[1] = FigSemaphoreCreate();
  }
  return v0;
}

uint64_t FigReadCacheCopyContainerForFile(const void *a1, _QWORD *a2, _QWORD *a3)
{
  return FigReadCacheCopyContainer(a1, 0, a2, a3);
}

uint64_t playerasync_SetRate(void *a1, float a2)
{
  uint64_t v5;
  _QWORD *v6;
  void *v7;

  v7 = 0;
  if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  playerasync_cancelQueuedCommandsMatching(a1, 9u, 0);
  v5 = playerasync_createCommand(a1, 9, 0, &v7);
  v6 = v7;
  if (!(_DWORD)v5)
  {
    *((float *)v7 + 8) = a2;
    playerasync_runAsynchronousCommand(a1, v6);
    v6 = 0;
  }
  fpa_releaseCommand(v6);
  return v5;
}

uint64_t itemasync_GetCurrentTime(uint64_t a1, uint64_t a2)
{
  _DWORD *DerivedStorage;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  unsigned int v14;

  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v4 = DerivedStorage;
  v5 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)a2 = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v5 + 16);
  if (*DerivedStorage)
    return FigSignalErrorAt();
  v7 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v7)
    return FigSignalErrorAt();
  v8 = (const void *)v7;
  v9 = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)v9)
  {
    v13 = FigSignalErrorAt();
  }
  else
  {
    v10 = v9;
    MEMORY[0x19402EEEC](*(_QWORD *)(v9 + 136));
    v11 = *((_QWORD *)v4 + 2);
    if (v11)
    {
      v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (v12)
        v13 = v12(v11, a2);
      else
        v13 = 4294954514;
    }
    else
    {
      v14 = v4[2];
      if (v14)
        v13 = v14;
      else
        v13 = 4294954513;
    }
    MEMORY[0x19402EF04](*(_QWORD *)(v10 + 136));
  }
  CFRelease(v8);
  return v13;
}

void FigReadCacheThread()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  const void *v5;
  char v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex i;
  const void *ValueAtIndex;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  __n128 v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  __n128 v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  const void *v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  int v43;
  int v44;
  BOOL v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  const void *v58;
  const void *v59;
  _QWORD *v60;
  uint64_t j;
  uint64_t v62;
  _QWORD *v63;
  void *v64;
  _OWORD v65[2];
  uint64_t v66;

  while (1)
  {
    v0 = gFigReadCache;
    if (!*(_QWORD *)(gFigReadCache + 40))
    {
      v46 = 0;
      goto LABEL_94;
    }
    v1 = FigSimpleMutexTryLock();
    v0 = gFigReadCache;
    if (!v1)
    {
      v46 = 0;
      v47 = 0;
      if (gFigReadCache)
        goto LABEL_94;
      goto LABEL_129;
    }
    *(_OWORD *)(gFigReadCache + 64) = *(_OWORD *)(gFigReadCache + 40);
    *(_QWORD *)(v0 + 80) = *(_QWORD *)(v0 + 56);
    *(_QWORD *)(v0 + 40) = 0;
    *(_QWORD *)(v0 + 48) = 0;
    *(_DWORD *)(v0 + 56) = 0;
    MEMORY[0x19402EF04](*(_QWORD *)(v0 + 32));
    v0 = gFigReadCache;
    v2 = *(_QWORD *)(gFigReadCache + 64);
    do
    {
      v3 = *(_QWORD *)v2;
      v4 = *(_QWORD **)(v2 + 8);
      if (*(_QWORD *)v2)
      {
        *(_QWORD *)(v3 + 8) = v4;
        v4 = *(_QWORD **)(v2 + 8);
      }
      else
      {
        *(_QWORD *)(v0 + 64) = v4;
      }
      if (!v4)
        v4 = (_QWORD *)(v0 + 72);
      *v4 = v3;
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      --*(_DWORD *)(v0 + 80);
      switch(*(_DWORD *)(v2 + 16))
      {
        case 0:
          v5 = *(const void **)(v2 + 24);
          v6 = 0;
          goto LABEL_57;
        case 1:
          Count = CFArrayGetCount(*(CFArrayRef *)(v2 + 24));
          if (Count >= 1)
          {
            v8 = Count;
            for (i = 0; i != v8; ++i)
            {
              ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 24), i);
              LoadOneFile(ValueAtIndex, 0);
            }
          }
          goto LABEL_61;
        case 2:
          v66 = 0;
          memset(v65, 0, sizeof(v65));
          if (!FigFileGetFileInfo())
            FindFileInCacheAndCopyContainer(*(CFTypeRef *)(v2 + 24), (uint64_t)v65, (CFTypeRef *)(v2 + 56));
          goto LABEL_89;
        case 3:
          v11 = 0;
          break;
        case 4:
          v28 = *(_QWORD *)(v2 + 24);
          if (v28)
          {
            CFRelease(*(CFTypeRef *)(v2 + 24));
            --*(_DWORD *)(gFigReadCache + 160);
            if (CFGetRetainCount((CFTypeRef)v28) <= 1)
            {
              MEMORY[0x19402EEEC](*(_QWORD *)(v28 + 24));
              v29 = *(_QWORD *)(v28 + 104);
              if (v29)
              {
                do
                {
                  v30 = *(_QWORD *)(v29 + 64);
                  if (*(_DWORD *)v29 == 1)
                  {
                    v31 = *(_QWORD *)(v29 + 56);
                    if (v31)
                    {
                      *(_QWORD *)(v31 + 64) = v30;
                      v32 = *(_QWORD *)(v29 + 64);
                    }
                    else
                    {
                      *(_QWORD *)(v28 + 104) = v30;
                      v32 = v30;
                    }
                    if (v32)
                      v33 = (_QWORD *)(v32 + 56);
                    else
                      v33 = (_QWORD *)(v28 + 112);
                    *v33 = v31;
                    *(_QWORD *)(v29 + 56) = 0;
                    *(_QWORD *)(v29 + 64) = 0;
                    --*(_DWORD *)(v28 + 120);
                    MoveToVGroup(v29, 4u, 1);
                    RecycleCacheEntry(v29);
                  }
                  v29 = v30;
                }
                while (v30);
              }
              if (*(_DWORD *)(gFigReadCache + 304))
                *(_BYTE *)(gFigReadCache + 157) = 1;
              v34 = *(const void **)(v28 + 88);
              if (v34)
              {
                CFRelease(v34);
                *(_QWORD *)(v28 + 88) = 0;
              }
              MEMORY[0x19402EF04](*(_QWORD *)(v28 + 24));
              if (!*(_DWORD *)(v28 + 120))
                DeleteCacheContainer((CFTypeRef)v28);
            }
          }
          goto LABEL_62;
        case 5:
          v5 = *(const void **)(v2 + 24);
          v6 = 1;
LABEL_57:
          LoadOneFile(v5, v6);
          goto LABEL_61;
        case 6:
          v35 = *(_QWORD *)(v2 + 24);
          v36 = 0;
          goto LABEL_60;
        case 7:
          v35 = *(_QWORD *)(v2 + 24);
          v36 = 1;
LABEL_60:
          LoadOneByteStreamForOpenFile(v35, v36);
LABEL_61:
          CFRelease(*(CFTypeRef *)(v2 + 24));
LABEL_62:
          free((void *)v2);
          goto LABEL_90;
        case 8:
          v37 = *(_QWORD *)(gFigReadCache + 120);
          if (!v37)
            goto LABEL_89;
          while (!*(_BYTE *)(v37 + 96) || *(_QWORD *)(v37 + 88) != *(_QWORD *)(v2 + 32))
          {
            v37 = *(_QWORD *)(v37 + 136);
            if (!v37)
              goto LABEL_89;
          }
          *(_QWORD *)(v2 + 56) = CFRetain((CFTypeRef)v37);
          ++*(_DWORD *)(gFigReadCache + 160);
LABEL_89:
          FigSemaphoreSignal();
          goto LABEL_90;
        case 9:
          v38 = v2;
          v39 = 0;
          goto LABEL_70;
        case 0xA:
          v38 = v2;
          v39 = 1;
LABEL_70:
          HandleAddOneFileAndCopyContainer(v38, v39);
          goto LABEL_90;
        default:
          goto LABEL_90;
      }
      while (1)
      {
        v12 = *(_QWORD *)(v2 + 24);
        v13 = *(unsigned int *)(gFigReadCache + 104);
        if ((*(_QWORD *)(v12 + 48) + (v13 - 1)) / v13 > *(unsigned int *)(gFigReadCache + 304))
          break;
        v23 = *(_QWORD *)(v2 + 32);
LABEL_31:
        if (!PopulateCacheContainer(v12, *(_QWORD *)(v23 + 8) / (unint64_t)v13 * v13)
          || FillFromCacheContainer(*(_QWORD **)(v2 + 24), *(_QWORD *)(v2 + 32))
          || !*(_QWORD *)(*(_QWORD *)(v2 + 32) + 16))
        {
          goto LABEL_71;
        }
      }
      ScanForUnreferencedDataReadyEntries();
      ScanForAbandonedEntries();
      v14 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 24);
      if (!v14)
        v14 = (unint64_t)*(unsigned int *)(gFigReadCache + 108) >> 2;
      FigReadWriteLockLockForWrite();
      if (v14 > *(unsigned int *)(gFigReadCache + 304))
      {
        v16 = FreeEntriesInGroup(3u, *(_QWORD *)(gFigReadCache + 144), v14, v15);
        if (v16)
        {
          v18 = FreeEntriesInGroup(2u, *(_QWORD *)(gFigReadCache + 144), v16, v17);
          if (v18)
          {
            v20 = FreeEntriesInGroup(1u, *(_QWORD *)(gFigReadCache + 144), v18, v19);
            if (v20)
            {
              if (!*(_DWORD *)(gFigReadCache + 304))
              {
                v24 = FreeEntriesInGroup(3u, 0, v20, v21);
                if (v24)
                {
                  v26 = FreeEntriesInGroup(2u, 0, v24, v25);
                  if (v26)
                    FreeEntriesInGroup(1u, 0, v26, v27);
                }
              }
            }
          }
        }
      }
      FigReadWriteLockUnlockForWrite();
      v22 = *(_DWORD *)(gFigReadCache + 304);
      v23 = *(_QWORD *)(v2 + 32);
      if (!*(_QWORD *)(v23 + 24))
        v11 = v22 != 0;
      if (v22)
      {
        v13 = *(unsigned int *)(gFigReadCache + 104);
        v12 = *(_QWORD *)(v2 + 24);
        goto LABEL_31;
      }
LABEL_71:
      FigSemaphoreSignal();
      if (v11)
      {
        v40 = gFigReadCache;
        if (*(_DWORD *)(gFigReadCache + 304))
        {
          v41 = *(_QWORD *)(gFigReadCache + 144);
          if (!v41)
            goto LABEL_87;
          v42 = *(_QWORD **)(v41 + 136);
          if (!v42)
            goto LABEL_87;
          v43 = 0;
          do
          {
            v40 = gFigReadCache;
            v44 = *(_DWORD *)(gFigReadCache + 304);
            if (v44)
              v45 = v43 == 0;
            else
              v45 = 0;
            if (!v45)
              goto LABEL_86;
            MEMORY[0x19402EEEC](v42[2]);
            if (CFGetRetainCount(v42) < 2)
              v43 = 0;
            else
              v43 = PopulateCacheContainer((uint64_t)v42, 0) ^ 1;
            MEMORY[0x19402EF04](v42[2]);
            v42 = (_QWORD *)v42[17];
          }
          while (v42);
          v40 = gFigReadCache;
          v44 = *(_DWORD *)(gFigReadCache + 304);
LABEL_86:
          if (v44)
LABEL_87:
            *(_BYTE *)(v40 + 157) = 1;
        }
      }
LABEL_90:
      v0 = gFigReadCache;
      v2 = *(_QWORD *)(gFigReadCache + 64);
    }
    while (v2);
    v46 = 1;
LABEL_94:
    if (*(_BYTE *)(v0 + 156))
    {
      *(_BYTE *)(v0 + 156) = 1;
      v48 = *(_QWORD *)(v0 + 120);
      if (!v48)
        goto LABEL_107;
      do
      {
        v49 = *(_QWORD *)(v48 + 136);
        MEMORY[0x19402EEEC](*(_QWORD *)(v48 + 16));
        *(_BYTE *)(v48 + 152) = 0;
        v50 = *(_QWORD *)(v48 + 104);
        if (v50)
        {
          while (*(_DWORD *)v50 != 2)
          {
            v53 = *(_QWORD *)(v50 + 56);
            v51 = *(_QWORD *)(v50 + 64);
            v52 = (_QWORD *)(v50 + 56);
            if (v53)
            {
              *(_QWORD *)(v53 + 64) = v51;
              v54 = *(_QWORD *)(v50 + 64);
            }
            else
            {
              *(_QWORD *)(v48 + 104) = v51;
              v54 = v51;
            }
            if (v54)
              v55 = (_QWORD *)(v54 + 56);
            else
              v55 = (_QWORD *)(v48 + 112);
            *v55 = v53;
            *v52 = 0;
            v52[1] = 0;
            --*(_DWORD *)(v48 + 120);
            v50 = v51;
            if (!v51)
              goto LABEL_105;
          }
          goto LABEL_115;
        }
LABEL_105:
        MEMORY[0x19402EF04](*(_QWORD *)(v48 + 16));
        DeleteCacheContainer((CFTypeRef)v48);
        v48 = v49;
      }
      while (v49);
      v0 = gFigReadCache;
LABEL_107:
      if (*(_DWORD *)(v0 + 108))
      {
        v56 = 0;
        v57 = 48;
        do
        {
          v58 = *(const void **)(*(_QWORD *)(v0 + 112) + v57);
          if (v58)
          {
            CFRelease(v58);
            v0 = gFigReadCache;
          }
          ++v56;
          v57 += 104;
        }
        while (v56 < *(unsigned int *)(v0 + 108));
      }
      v59 = *(const void **)(v0 + 168);
      if (v59)
      {
        CFRelease(v59);
        v0 = gFigReadCache;
      }
      free(*(void **)(v0 + 112));
      free((void *)gFigReadCache);
      gFigReadCache = 0;
LABEL_115:
      v47 = 1;
    }
    else if (*(_DWORD *)(v0 + 152) && (v60 = *(_QWORD **)(v0 + 120)) != 0)
    {
      v47 = 0;
      do
      {
        for (j = v60[13]; j; j = *(_QWORD *)(j + 64))
        {
          if (*(_DWORD *)j == 1)
          {
            MEMORY[0x19402EEEC](v60[3]);
            if (*(_DWORD *)j == 1)
            {
              ReadDataForCacheEntry((uint64_t)v60, j);
              v47 = 1;
            }
            MEMORY[0x19402EF04](v60[3]);
            v0 = gFigReadCache;
          }
          if (*(_QWORD *)(v0 + 40))
            break;
        }
        v60 = (_QWORD *)v60[17];
      }
      while (v60);
    }
    else
    {
      v47 = 0;
    }
LABEL_129:
    if (!(v47 | v46))
    {
      ScanForUnreferencedDataReadyEntries();
      ScanForAbandonedEntries();
      v62 = gFigReadCache;
      if (!*(_DWORD *)(gFigReadCache + 176) && *(int *)(gFigReadCache + 164) >= 1)
      {
        v63 = *(_QWORD **)(gFigReadCache + 120);
        if (v63)
        {
          do
          {
            MEMORY[0x19402EEEC](v63[2]);
            if (v63[18] && CFGetRetainCount(v63) <= 1)
            {
              v64 = (void *)v63[18];
              if (v64)
              {
                os_release(v64);
                v63[18] = 0;
              }
              --*(_DWORD *)(gFigReadCache + 164);
            }
            MEMORY[0x19402EF04](v63[2]);
            v63 = (_QWORD *)v63[17];
          }
          while (v63);
          v62 = gFigReadCache;
        }
      }
      if (*(_BYTE *)(v62 + 156) || !*(_BYTE *)(v62 + 157))
        FigSemaphoreWaitRelative();
      else
        *(_BYTE *)(v62 + 157) = 0;
    }
  }
}

uint64_t LoadOneFile(const void *a1, char a2)
{
  uint64_t result;
  __int128 v5[2];
  uint64_t v6;

  v6 = 0;
  memset(v5, 0, sizeof(v5));
  result = FigFileGetFileInfo();
  if (!(_DWORD)result)
  {
    result = FindFileInCacheAndCopyContainer(a1, (uint64_t)v5, 0);
    if (!(_DWORD)result)
      return CreateAndLoadNewContainerInCacheAndReturnContainer((unint64_t)a1, 0, v5, a2, 0);
  }
  return result;
}

uint64_t RegisterFigReadCacheContainerType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigReadCacheContainerID = result;
  return result;
}

double FRCContainerInit(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t AssureContainerFileIsOpen(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 96))
  {
    if (!*(_QWORD *)(a1 + 88))
      return FigSignalErrorAt();
    return 0;
  }
  if (!*(_QWORD *)(a1 + 144))
  {
    *(_QWORD *)(a1 + 144) = FigOSTransactionCreate();
    ++*(_DWORD *)(gFigReadCache + 164);
  }
  if (*(_QWORD *)(a1 + 88))
    return 0;
  FigGetDefaultManagedFilePool();
  return FigManagedFilePoolCreateByteStreamForFile();
}

uint64_t PopulateCacheContainer(uint64_t a1, unint64_t a2)
{
  unsigned __int8 v2;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v2 = *(_BYTE *)(a1 + 153);
  if (!v2)
  {
    v5 = (_QWORD *)(a1 + 104);
    v6 = *(_QWORD **)(a1 + 104);
    while (1)
    {
      if (v6)
      {
        while (1)
        {
          v7 = v6[3];
          if (a2 == v7)
            break;
          v8 = a2 >= v7;
          if (a2 >= v7)
          {
            v6 = (_QWORD *)v6[8];
            if (v6)
              continue;
          }
          goto LABEL_10;
        }
        v11 = gFigReadCache;
      }
      else
      {
        v8 = 1;
LABEL_10:
        v9 = *(_QWORD *)(gFigReadCache + 288);
        if (!v9)
          return v2;
        MoveToVGroup(*(_QWORD *)(gFigReadCache + 288), 0, 0);
        FigAtomicIncrement32();
        *(_DWORD *)v9 = 1;
        v10 = *(_QWORD *)(a1 + 48) - a2;
        v11 = gFigReadCache;
        if (v10 >= *(unsigned int *)(gFigReadCache + 104))
          v10 = *(unsigned int *)(gFigReadCache + 104);
        *(_QWORD *)(v9 + 24) = a2;
        *(_QWORD *)(v9 + 32) = v10 + a2;
        *(_QWORD *)(v9 + 8) = a1;
        *(_QWORD *)(v9 + 16) = 0;
        if (v8)
        {
          v12 = *(_QWORD *)(a1 + 112);
          if (v12)
          {
            *(_QWORD *)(v12 + 64) = v9;
            *(_QWORD *)(v9 + 56) = v12;
          }
          else
          {
            *v5 = v9;
          }
          *(_QWORD *)(a1 + 112) = v9;
        }
        else
        {
          v13 = v6[7];
          v14 = v5;
          if (v13)
          {
            *(_QWORD *)(v9 + 56) = v13;
            v14 = (_QWORD *)(v6[7] + 64);
          }
          *(_QWORD *)(v9 + 64) = v6;
          *v14 = v9;
          v6[7] = v9;
        }
        ++*(_DWORD *)(a1 + 120);
        v2 = 1;
      }
      a2 += *(unsigned int *)(v11 + 104);
      if (a2 >= *(_QWORD *)(a1 + 48))
        return v2;
    }
  }
  return 0;
}

uint64_t ReadDataForCacheEntry(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *);
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  result = AssureContainerFileIsOpen(a1);
  if (!(_DWORD)result)
  {
    if (*(_DWORD *)(a2 + 72))
      MoveToVGroup(a2, 0, 0);
    v5 = *(_QWORD *)(a2 + 24);
    v6 = *(_QWORD *)(a2 + 32);
    v7 = *(_QWORD *)(a1 + 88);
    v8 = *(_QWORD *)(a2 + 40);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 8);
    if (v9)
    {
      v12 = 0;
      v10 = v6 - v5;
      result = v9(v7, v10, v5, v8, &v12);
      if ((_DWORD)result)
        v11 = 0;
      else
        v11 = v12 == v10;
      if (v11)
      {
        *(_DWORD *)a2 = 3;
        FigAtomicDecrement32();
        return 0;
      }
    }
    else
    {
      result = 4294954514;
    }
    *(_DWORD *)a2 = 4;
  }
  return result;
}

uint64_t FigReadCacheContainerGetByteStream(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 88);
  return result;
}

uint64_t FigCachedFileByteStreamCopyProperty(uint64_t a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  CFTypeRef *v7;
  uint64_t StatsDictionary;
  uint64_t v9;
  uint64_t result;
  uint64_t CMBaseObject;
  uint64_t (*v12)(uint64_t, const void *, uint64_t, uint64_t *);

  CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2F50]))
    goto LABEL_2;
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2F98]))
  {
    StatsDictionary = FigByteStreamStatsCreateStatsDictionary();
    goto LABEL_6;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2088]))
  {
LABEL_2:
    v7 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
LABEL_3:
    StatsDictionary = (uint64_t)CFRetain(*v7);
LABEL_6:
    v9 = StatsDictionary;
    result = 0;
    *a4 = v9;
    return result;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA20A0]))
  {
    v7 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    goto LABEL_3;
  }
  CMBaseObject = CMByteStreamGetCMBaseObject();
  v12 = *(uint64_t (**)(uint64_t, const void *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
  if (v12)
    return v12(CMBaseObject, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t IsReferenceMovie(uint64_t a1, BOOL *a2)
{
  uint64_t result;

  if (!a1)
    return FigSignalErrorAt();
  if (a2)
    *a2 = 0;
  result = FigAtomStreamInitWithByteStream();
  if (!(_DWORD)result)
  {
    LODWORD(result) = FigAtomStreamPositionViaAtomPath();
    if (a2)
      *a2 = (_DWORD)result == 0;
    if ((_DWORD)result == -12890)
      return 0;
    else
      return result;
  }
  return result;
}

uint64_t FigCachedFileByteStreamRead(uint64_t a1, uint64_t a2, uint64_t a3, CMBlockBufferRef *a4, _QWORD *a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, CMBlockBufferRef *, _QWORD *);
  uint64_t v16;
  uint64_t v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((a3 & 0x8000000000000000) == 0 && a4)
  {
    v10 = DerivedStorage;
    if (!*(_BYTE *)(DerivedStorage + 120))
    {
      v13 = *(_QWORD *)(DerivedStorage + 8);
      v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CMBlockBufferRef *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 8);
      if (v14)
        return v14(v13, a2, a3, a4, a5);
      return 4294954514;
    }
    v17 = 0;
    v11 = *(_QWORD *)(DerivedStorage + 40);
    if (a2 && v11 <= a3)
    {
      v12 = 4294954423;
      if (!a5)
        return v12;
    }
    else
    {
      if (a3 + a2 <= (unint64_t)v11)
        v16 = a2;
      else
        v16 = v11 - a3;
      FigGetUpTimeNanoseconds();
      v12 = FigReadCacheContainerReadBytes(*(_QWORD *)(v10 + 24), (OpaqueCMBlockBuffer *)a3, (OpaqueCMBlockBuffer *)(v16 + a3), *(_QWORD **)(v10 + 32), a4, &v17);
      FigGetUpTimeNanoseconds();
      FigByteStreamStatsLogOneRead();
      if (!a5)
        return v12;
    }
    *a5 = v17;
    return v12;
  }
  return FigSignalErrorAt();
}

uint64_t FigReadCacheContainerReadBytes(uint64_t a1, OpaqueCMBlockBuffer *a2, OpaqueCMBlockBuffer *a3, _QWORD *a4, CMBlockBufferRef *a5, _QWORD *a6)
{
  return ReadBBufOrCopyBytes(a1, a2, a3, a4, 0, a5, a6);
}

uint64_t ReadBBufOrCopyBytes(uint64_t a1, OpaqueCMBlockBuffer *a2, OpaqueCMBlockBuffer *a3, _QWORD *a4, CMBlockBufferRef *a5, CMBlockBufferRef *a6, _QWORD *a7)
{
  uint64_t IsOpen;
  unint64_t v11;
  OpaqueCMBlockBuffer *v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, char *, char *, uint64_t *);
  uint64_t v23;
  uint64_t (*v24)(uint64_t, int64_t, OpaqueCMBlockBuffer *, CMBlockBufferRef *, uint64_t *);
  uint64_t v25;
  int64_t v26;
  OpaqueCMBlockBuffer *v27;
  CMBlockBufferRef *v28;
  uint64_t (*v29)(uint64_t, uint64_t, char *, CMBlockBufferRef *, uint64_t *);
  uint64_t v30;
  CMBlockBufferRef targetBBuf;
  uint64_t v32;
  CMBlockBufferRef theBuffer[2];
  __int128 v34;
  uint64_t v35;
  CMBlockBufferRef *v36;
  uint64_t v37;

  IsOpen = 4294955046;
  if (!a1 || !gFigReadCache || *(_BYTE *)(gFigReadCache + 156) || !*(_BYTE *)(a1 + 152))
    return IsOpen;
  v35 = 0;
  *(_OWORD *)theBuffer = 0u;
  v34 = 0u;
  v32 = 0;
  v11 = *(_QWORD *)(a1 + 48);
  if (v11 <= (unint64_t)a2)
    return 4294954423;
  if (a2 == a3)
    return 4294954424;
  if (v11 >= (unint64_t)a3)
    v16 = a3;
  else
    v16 = *(OpaqueCMBlockBuffer **)(a1 + 48);
  v17 = v16 - a2;
  theBuffer[1] = a2;
  v34 = (unint64_t)(v16 - a2);
  LOBYTE(v35) = 1;
  v36 = a6;
  v37 = 0;
  IsOpen = FillFromCacheContainer((_QWORD *)a1, (uint64_t)theBuffer);
  v18 = v34;
  if (!*(_BYTE *)(a1 + 153) && (_QWORD)v34)
  {
    IssueCacheMissRequest(a1, a4, (uint64_t)theBuffer);
    v18 = v34;
  }
  if (v18)
  {
    targetBBuf = 0;
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 24));
    IsOpen = AssureContainerFileIsOpen(a1);
    if ((_DWORD)IsOpen)
      goto LABEL_18;
    v19 = *(_QWORD *)(a1 + 88);
    v20 = v34;
    if (a6)
    {
      v21 = v37;
      v22 = *(uint64_t (**)(uint64_t, uint64_t, char *, char *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 8);
      if (v22)
      {
        IsOpen = v22(v19, v20, (char *)v16 - v20, (char *)a6 + v21, &v32);
        if (!(_DWORD)IsOpen)
        {
          *(_QWORD *)&v34 = v34 - v32;
          v37 += v32;
        }
        goto LABEL_18;
      }
      goto LABEL_48;
    }
    v29 = *(uint64_t (**)(uint64_t, uint64_t, char *, CMBlockBufferRef *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 32);
    if (v29)
    {
      IsOpen = v29(v19, v20, (char *)v16 - v20, &targetBBuf, &v32);
      if (!(_DWORD)IsOpen && v32)
      {
        if (theBuffer[0])
        {
          CMBlockBufferAppendBufferReference(theBuffer[0], targetBBuf, 0, 0, 0);
          if (targetBBuf)
            CFRelease(targetBBuf);
        }
        else
        {
          theBuffer[0] = targetBBuf;
        }
        IsOpen = 0;
        goto LABEL_51;
      }
    }
    else
    {
      IsOpen = 4294954514;
    }
    if (theBuffer[0])
      CFRelease(theBuffer[0]);
    theBuffer[0] = 0;
    goto LABEL_18;
  }
  if ((_BYTE)v35)
    goto LABEL_20;
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 24));
  IsOpen = AssureContainerFileIsOpen(a1);
  if (!(_DWORD)IsOpen)
  {
    if (a6)
    {
      v23 = *(_QWORD *)(a1 + 88);
      v24 = *(uint64_t (**)(uint64_t, int64_t, OpaqueCMBlockBuffer *, CMBlockBufferRef *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v24)
      {
        v25 = v23;
        v26 = v16 - a2;
        v27 = a2;
        v28 = a6;
        goto LABEL_46;
      }
    }
    else
    {
      if (theBuffer[0])
        CFRelease(theBuffer[0]);
      theBuffer[0] = 0;
      v30 = *(_QWORD *)(a1 + 88);
      v24 = *(uint64_t (**)(uint64_t, int64_t, OpaqueCMBlockBuffer *, CMBlockBufferRef *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (v24)
      {
        v28 = theBuffer;
        v25 = v30;
        v26 = v16 - a2;
        v27 = a2;
LABEL_46:
        IsOpen = v24(v25, v26, v27, v28, &v32);
        if ((_DWORD)IsOpen)
          goto LABEL_18;
LABEL_51:
        *(_QWORD *)&v34 = v34 - v32;
        goto LABEL_18;
      }
    }
LABEL_48:
    IsOpen = 4294954514;
  }
LABEL_18:
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 24));
LABEL_20:
  if (a5)
    *a5 = theBuffer[0];
  if (a7)
    *a7 = v17 - v34;
  return IsOpen;
}

uint64_t FillFromCacheContainer(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t DataForCacheEntry;
  size_t v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  size_t v13;
  uint64_t appended;
  _BOOL4 v15;
  int v16;
  uint64_t v17;

  FigReadWriteLockLockForRead();
  MEMORY[0x19402EEEC](a1[2]);
  v4 = a1[13];
  if (v4)
  {
    DataForCacheEntry = 0;
    v6 = *(_QWORD *)(a2 + 16);
    while (1)
    {
      if (!v6)
        goto LABEL_36;
      v7 = *(_QWORD *)(a2 + 8);
      v8 = *(_QWORD *)(v4 + 24);
      v9 = v7 - v8;
      if (v7 >= v8)
      {
        v10 = *(_QWORD *)(v4 + 32);
        v11 = v10 > v7;
        v12 = v10 - v7;
        if (v11)
          break;
      }
      if (v7 <= v8)
      {
        *(_QWORD *)(a2 + 24) = v8 / *(unsigned int *)(gFigReadCache + 104) - v7 / *(unsigned int *)(gFigReadCache + 104);
        goto LABEL_36;
      }
LABEL_33:
      v4 = *(_QWORD *)(v4 + 64);
      if (!v4)
        goto LABEL_36;
    }
    if (v6 >= v12)
      v13 = v12;
    else
      v13 = v6;
    *(_QWORD *)(v4 + 16) = FigGetUpTimeNanoseconds();
    if (!*(_QWORD *)(a2 + 40))
    {
      if (*(_QWORD *)a2)
      {
        appended = CMBlockBufferAppendBufferReference(*(CMBlockBufferRef *)a2, *(CMBlockBufferRef *)(v4 + 48), v9, v13, 0);
      }
      else
      {
        *(_QWORD *)(gFigReadCache + 144) = a1;
        appended = CMBlockBufferCreateWithBufferReference(0, *(CMBlockBufferRef *)(v4 + 48), v9, v13, 0, (CMBlockBufferRef *)a2);
      }
      DataForCacheEntry = 0;
      if ((_DWORD)appended)
      {
        DataForCacheEntry = appended;
        goto LABEL_36;
      }
    }
    if (!*(_BYTE *)(v4 + 96))
    {
      *(_BYTE *)(v4 + 96) = 1;
      FigAtomicIncrement32();
    }
    if (*(_DWORD *)(v4 + 72))
    {
      v15 = MoveToVGroup(v4, 0, 0);
      v16 = *(_DWORD *)v4;
      if (*(_DWORD *)v4 != 3 || !v15)
        goto LABEL_24;
      *(_DWORD *)v4 = 1;
      FigAtomicIncrement32();
    }
    v16 = *(_DWORD *)v4;
LABEL_24:
    if (v16 != 3)
    {
      MEMORY[0x19402EEEC](a1[3]);
      if (*(_DWORD *)v4 != 3)
      {
        DataForCacheEntry = ReadDataForCacheEntry((uint64_t)a1, v4);
        if ((_DWORD)DataForCacheEntry)
          *(_BYTE *)(a2 + 32) = 0;
      }
      MEMORY[0x19402EF04](a1[3]);
    }
    v17 = *(_QWORD *)(a2 + 40);
    if (v17 && *(_BYTE *)(a2 + 32))
    {
      CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v4 + 48), v9, v13, (void *)(v17 + *(_QWORD *)(a2 + 48)));
      *(_QWORD *)(a2 + 48) += v13;
    }
    v6 = *(_QWORD *)(a2 + 16) - v13;
    *(_QWORD *)(a2 + 8) += v13;
    *(_QWORD *)(a2 + 16) = v6;
    goto LABEL_33;
  }
  DataForCacheEntry = 0;
LABEL_36:
  MEMORY[0x19402EF04](a1[2]);
  FigReadWriteLockUnlockForRead();
  return DataForCacheEntry;
}

uint64_t playerfig_prepareWorkingItem(const void *a1, uint64_t a2, CFTypeRef a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t PlaybackPrerequisitePropertiesReady;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  BOOL v12;
  const void *ValueAtIndex;
  const void *v15;
  BOOL v16;
  const void *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  unsigned int v22;
  CFTypeRef cf;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v24 = 1;
  cf = 0;
  if (!a3)
  {
    v7 = FigDeferredTransactionCreate(*MEMORY[0x1E0C9AE00], (uint64_t *)&cf);
    if ((_DWORD)v7)
    {
      PlaybackPrerequisitePropertiesReady = v7;
      goto LABEL_19;
    }
    a3 = cf;
  }
  if (*(_QWORD *)(DerivedStorage + 512))
  {
    v8 = CMBaseObjectGetDerivedStorage();
    if (*(_BYTE *)(v8 + 1289))
    {
      v9 = 0;
      PlaybackPrerequisitePropertiesReady = 0;
    }
    else
    {
      PlaybackPrerequisitePropertiesReady = itemfig_makePlaybackPrerequisitePropertiesReady(*(_QWORD *)(DerivedStorage + 512), &v24);
      if (v24)
      {
        v9 = playerfig_prepareWorkingItem2(a1, a2, a3);
      }
      else
      {
        *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 993) = a2;
        if (dword_1EE2A2AC8)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v9 = 0;
          a2 = a2;
        }
        else
        {
          v9 = 0;
        }
      }
    }
    if (*(_BYTE *)(v8 + 1289))
      v12 = 0;
    else
      v12 = (_DWORD)v9 == 0;
    if (!v12)
    {
      *(_BYTE *)(v8 + 1289) = 1;
      if (!*(_DWORD *)(DerivedStorage + 776) && *(_QWORD *)(DerivedStorage + 512))
      {
        v22 = a2;
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
          v15 = *(const void **)(DerivedStorage + 512);
          if (*(_BYTE *)(DerivedStorage + 780))
            v16 = 1;
          else
            v16 = ValueAtIndex == v15;
          if (!v16)
          {
            if (!dword_1EE2A2AC8)
              goto LABEL_18;
            goto LABEL_40;
          }
          v17 = ValueAtIndex;
          if (dword_1EE2A2AC8)
          {
            v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v19 = *(_QWORD *)(DerivedStorage + 512);
            a2 = v22;
          }
          else
          {
            v19 = *(_QWORD *)(DerivedStorage + 512);
          }
          playerfig_gracefullyRemoveItemFromPlayQueue(a1, v19, 0, 0, 1, 0);
          if (v17 == v15)
            playerfig_postDeferredCurrentItemDidChangeNotificationWithReason(a1, CFSTR("ReasonAdvanceDueToError"));
          v20 = *(_QWORD *)(DerivedStorage + 512);
          if (!v20)
            goto LABEL_18;
          itemfig_makePlaybackPrerequisitePropertiesReady(v20, &v24);
          if (!v24)
            break;
          if (playerfig_prepareWorkingItem2(a1, a2, a3))
          {
            *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 1289) = 1;
            if (*(_QWORD *)(DerivedStorage + 512))
              continue;
          }
          goto LABEL_18;
        }
        if (dword_1EE2A2AC8)
        {
LABEL_40:
          v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          PlaybackPrerequisitePropertiesReady = v9;
          goto LABEL_19;
        }
      }
LABEL_18:
      PlaybackPrerequisitePropertiesReady = v9;
    }
  }
  else
  {
    PlaybackPrerequisitePropertiesReady = 0;
  }
LABEL_19:
  FigDeferredTransactionCommit((uint64_t)cf);
  if (cf)
    CFRelease(cf);
  return PlaybackPrerequisitePropertiesReady;
}

uint64_t playerfig_prepareWorkingItem2(const void *a1, uint64_t a2, CFTypeRef a3)
{
  uint64_t DerivedStorage;
  CMTimeEpoch v7;
  uint64_t *v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _DWORD *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const __CFString *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  void (*v22)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(const __CFString *, CMTime *);
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t v30;
  uint64_t FigBaseObject;
  void (*v32)(uint64_t, const __CFString *, uint64_t, os_log_type_t *);
  int v33;
  int v34;
  const void *v35;
  uint64_t started;
  NSObject *v37;
  uint64_t v38;
  void (*v39)(uint64_t, const __CFString *, uint64_t, os_log_type_t *);
  int v40;
  NSObject *v41;
  unsigned int v42;
  unsigned int v43;
  const char *v44;
  const char *v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  CFTypeRef v53;
  NSObject *v54;
  unsigned int v55;
  unsigned int v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, const __CFString *, uint64_t);
  uint64_t v63;
  NSObject *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  __n128 v68;
  double v69;
  void (*v70)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  NSObject *v71;
  unsigned int v72;
  unsigned int v73;
  const char *v74;
  const char *v75;
  NSObject *v76;
  unsigned int v77;
  unsigned int v78;
  const void *v79;
  NSObject *v80;
  unsigned int v81;
  unsigned int v82;
  const char *v83;
  const char *v84;
  uint64_t matched;
  NSObject *v86;
  unsigned int v87;
  unsigned int v88;
  const void *v89;
  const void *v90;
  __CFDictionary *v91;
  __CFDictionary *v92;
  __CFDictionary *FailedNotificationPayloadWithContentStream;
  __CFDictionary *NotificationPayloadForProperties;
  __CFDictionary *v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  double v104;
  double v105;
  double v106;
  double v107;
  uint64_t v108;
  void (*v109)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v110;
  void (*v111)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v112;
  void (*v113)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v114;
  float v115;
  void (*v116)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);
  uint64_t v117;
  float v118;
  void (*v119)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);
  const __CFArray *v120;
  NSObject *v121;
  unsigned int v122;
  unsigned int v123;
  const char *v124;
  const void *v125;
  __CFError *Value;
  NSObject *v127;
  unsigned int v128;
  unsigned int v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  NSObject *v134;
  unsigned int v135;
  unsigned int v136;
  const char *v137;
  const char *v139;
  const char *v140;
  const char *v141;
  const void *v142;
  NSObject *v143;
  unsigned int v144;
  unsigned int v145;
  const char *v146;
  NSObject *v147;
  unsigned int v148;
  unsigned int v149;
  const char *v150;
  NSObject *v151;
  unsigned int v152;
  unsigned int v153;
  const char *v154;
  NSObject *v155;
  unsigned int v156;
  unsigned int v157;
  const char *v158;
  const char *v159;
  uint64_t v160;
  CFTypeRef v161;
  NSObject *v162;
  unsigned int v163;
  unsigned int v164;
  const char *v165;
  uint64_t v166;
  NSObject *v167;
  unsigned int v168;
  unsigned int v169;
  const char *v170;
  const char *v171;
  const char *v172;
  uint64_t v173;
  NSObject *v174;
  unsigned int v175;
  unsigned int v176;
  uint64_t v177;
  NSObject *v178;
  unsigned int v179;
  unsigned int v180;
  const char *v181;
  NSObject *v182;
  unsigned int v183;
  unsigned int v184;
  const char *v185;
  const char *v186;
  const void *v187;
  uint64_t v188;
  CFIndex Count;
  CFIndex FirstIndexOfValue;
  const void *ValueAtIndex;
  uint64_t v192;
  NSObject *v193;
  unsigned int v194;
  unsigned int v195;
  const char *v196;
  NSObject *v197;
  unsigned int v198;
  unsigned int v199;
  const char *v200;
  NSObject *v201;
  unsigned int v202;
  unsigned int v203;
  const char *v204;
  const char *v205;
  uint64_t v206;
  __int128 v207;
  uint64_t v208;
  BOOL v209;
  const void *v210;
  CFTypeRef v211;
  const void *v212;
  CMTime v213;
  CFTypeRef v214;
  int v215;
  os_log_type_t type[8];
  CFTypeRef cf;
  unsigned __int8 v218;
  CMTime v219;
  const char *v220;
  __int16 v221;
  const __CFString *v222;
  __int16 v223;
  const char *v224;
  __int16 v225;
  const char *v226;
  CMTime __dst[5];
  uint64_t v228;
  CFRange v229;

  v228 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v215 = 2;
  v214 = 0;
  v207 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&v213.value = *MEMORY[0x1E0CA2E68];
  v7 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v213.epoch = v7;
  v8 = &sFigCDSNodeProtocolID;
  if (dword_1EE2A2AC8 >= 2)
  {
    LODWORD(cf) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v10 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    if (a1)
      v11 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
    else
      v11 = "";
    strncpy((char *)__dst, v11, 8uLL);
    if (*(_QWORD *)(DerivedStorage + 512))
      v12 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
    else
      v12 = "";
    strncpy((char *)__dst, v12, 8uLL);
    kdebug_trace();
  }
  if (!*(_QWORD *)(DerivedStorage + 512))
  {
    v15 = 0;
    started = 0;
LABEL_39:
    v209 = 1;
    goto LABEL_205;
  }
  if (!*(_DWORD *)(DerivedStorage + 60))
  {
    LODWORD(cf) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
    v209 = 1;
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v15 = 0;
    started = 0;
    goto LABEL_205;
  }
  if (a3)
    goto LABEL_16;
  v13 = FigDeferredTransactionCreate(*MEMORY[0x1E0C9AE00], (uint64_t *)&v214);
  if ((_DWORD)v13)
  {
    started = v13;
    v15 = 0;
    goto LABEL_39;
  }
  a3 = v214;
LABEL_16:
  v14 = a2;
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
  v15 = *(const __CFString **)(DerivedStorage + 512);
  v16 = CMBaseObjectGetDerivedStorage();
  v209 = v15 == 0;
  if (v15)
    CFRetain(v15);
  if (*(double *)(v16 + 1584) == 0.0)
    *(CFAbsoluteTime *)(v16 + 1584) = CFAbsoluteTimeGetCurrent();
  v210 = a1;
  if (*(double *)(v16 + 1928) == 0.0)
  {
    *(CFAbsoluteTime *)(v16 + 1928) = CFAbsoluteTimeGetCurrent();
    v17 = CMBaseObjectGetDerivedStorage();
    v18 = *(double *)(v17 + 1928);
    if (v18 != 0.0)
    {
      v19 = v17;
      v20 = *(double *)(v17 + 1920);
      MEMORY[0x19402EEEC](*(_QWORD *)(v17 + 1896));
      v21 = *(_QWORD *)(v19 + 1904);
      if (v21)
      {
        v22 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 56);
        if (v22)
          v22(v21, CFSTR("playerStats"), CFSTR("TimeItemToCurrent"), (uint64_t)((v18 - v20) * 1000.0), 0);
      }
      MEMORY[0x19402EF04](*(_QWORD *)(v19 + 1896));
      a1 = v210;
    }
  }
  v206 = v16;
  v23 = v14;
  if (!(_DWORD)v14)
    goto LABEL_70;
  v218 = 0;
  __dst[0] = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v24 = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)type = 0;
  cf = 0;
  if (!*(_DWORD *)(v24 + 996)
    || (v25 = v24,
        (v26 = *(unsigned int (**)(const __CFString *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 32)) == 0)
    || v26(v15, __dst))
  {
    v34 = 0;
    goto LABEL_53;
  }
  if ((__dst[0].flags & 1) == 0)
  {
    *(_OWORD *)&__dst[0].value = v207;
    __dst[0].epoch = v7;
  }
  v27 = *(_QWORD *)(v25 + 968);
  v28 = *(unsigned int *)(v25 + 996);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 56);
  if (!v29 || v29(v27, v28, &cf, 0))
    goto LABEL_52;
  v30 = *MEMORY[0x1E0C9AE00];
  FigBaseObject = FigTrackReaderGetFigBaseObject(cf);
  v32 = *(void (**)(uint64_t, const __CFString *, uint64_t, os_log_type_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
  if (v32)
  {
    v32(FigBaseObject, CFSTR("SecondaryEditCursorService"), v30, type);
    if (*(_QWORD *)type)
    {
      v219 = __dst[0];
      v33 = itemfig_lookForEmptyEditAndMapTime(*(uint64_t *)type, (__int128 *)&v219.value, __dst, &v218);
      v34 = v218;
      v35 = *(const void **)type;
      if (v33 | v218)
      {
        a1 = v210;
        goto LABEL_50;
      }
      if (*(_QWORD *)type)
      {
        CFRelease(*(CFTypeRef *)type);
        *(_QWORD *)type = 0;
      }
    }
  }
  v38 = FigTrackReaderGetFigBaseObject(cf);
  v39 = *(void (**)(uint64_t, const __CFString *, uint64_t, os_log_type_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
  if (v39)
    v39(v38, CFSTR("EditCursorService"), v30, type);
  if (!*(_QWORD *)type)
  {
LABEL_52:
    v34 = 0;
    a1 = v210;
    goto LABEL_53;
  }
  v219 = __dst[0];
  v40 = itemfig_lookForEmptyEditAndMapTime(*(uint64_t *)type, (__int128 *)&v219.value, __dst, &v218);
  v34 = v218;
  v35 = *(const void **)type;
  a1 = v210;
  if (!v40 && !v218 && *(_QWORD *)type)
  {
    CFRelease(*(CFTypeRef *)type);
    v34 = 0;
    *(_QWORD *)type = 0;
    goto LABEL_53;
  }
LABEL_50:
  if (v35)
    CFRelease(v35);
LABEL_53:
  if (cf)
    CFRelease(cf);
  if (v34)
  {
    if (dword_1EE2A2AC8 < 2)
    {
      v23 = 0;
      goto LABEL_70;
    }
    LODWORD(cf) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v42 = cf;
    if (os_log_type_enabled(v41, type[0]))
      v43 = v42;
    else
      v43 = v42 & 0xFFFFFFFE;
    if (!v43)
      goto LABEL_69;
    if (v210)
    {
      v44 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
      if (v15)
      {
LABEL_63:
        v45 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
LABEL_68:
        LODWORD(v219.value) = 136316162;
        *(CMTimeValue *)((char *)&v219.value + 4) = (CMTimeValue)"playerfig_prepareWorkingItem2";
        LOWORD(v219.flags) = 2048;
        *(_QWORD *)((char *)&v219.flags + 2) = v210;
        HIWORD(v219.epoch) = 2082;
        v220 = v44;
        v221 = 2048;
        v222 = v15;
        v223 = 2082;
        v224 = v45;
        _os_log_send_and_compose_impl();
LABEL_69:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v23 = 0;
        a1 = v210;
        goto LABEL_70;
      }
    }
    else
    {
      v44 = "";
      if (v15)
        goto LABEL_63;
    }
    v45 = "";
    goto LABEL_68;
  }
LABEL_70:
  v46 = itemfig_rebuildRenderPipelinesAndBossGuts(v15, 1, 1, v23, &v215, a3, 0);
  v208 = DerivedStorage;
  if ((_DWORD)v46)
  {
    started = v46;
    if (!dword_1EE2A2AC8)
    {
LABEL_143:
      v58 = v206;
      goto LABEL_144;
    }
    v53 = a3;
    LODWORD(cf) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v54 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v55 = cf;
    if (os_log_type_enabled(v54, type[0]))
      v56 = v55;
    else
      v56 = v55 & 0xFFFFFFFE;
    if (!v56)
      goto LABEL_141;
    if (v210)
    {
      v57 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
      if (v15)
      {
LABEL_228:
        v75 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
        goto LABEL_124;
      }
    }
    else
    {
      v57 = "";
      if (v15)
        goto LABEL_228;
    }
    v75 = "";
LABEL_124:
    LODWORD(v219.value) = 136316418;
    *(CMTimeValue *)((char *)&v219.value + 4) = (CMTimeValue)"playerfig_prepareWorkingItem2";
    LOWORD(v219.flags) = 2048;
    *(_QWORD *)((char *)&v219.flags + 2) = v210;
    HIWORD(v219.epoch) = 2082;
    v220 = v57;
    v221 = 2048;
    v222 = v15;
    v223 = 2082;
    v224 = v75;
    v225 = 1024;
    LODWORD(v226) = started;
    _os_log_send_and_compose_impl();
LABEL_141:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v8 = &sFigCDSNodeProtocolID;
    a3 = v53;
    v10 = (_DWORD *)MEMORY[0x1E0CA1FC0];
    a1 = v210;
LABEL_142:
    DerivedStorage = v208;
    goto LABEL_143;
  }
  itemfig_assureContentProtectionReadyForInspection(v15);
  v58 = v206;
  v59 = *(_QWORD *)(v206 + 1160);
  if (!v59)
  {
LABEL_90:
    itemfig_ExternalProtectionStatusChangedGuts((uint64_t)v15);
    if (*(double *)(v206 + 1592) == 0.0)
      *(CFAbsoluteTime *)(v206 + 1592) = CFAbsoluteTimeGetCurrent();
    itemfig_getDurationIfReady((uint64_t)v15, (uint64_t)&v213);
    MEMORY[0x19402EEEC](*(_QWORD *)(v206 + 1896));
    v67 = *(_QWORD *)(v206 + 1904);
    __dst[0] = v213;
    v68.n128_f64[0] = CMTimeGetSeconds(__dst);
    if (v67)
    {
      v69 = v68.n128_f64[0];
      v70 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 56);
      if (v70)
        v70(v67, CFSTR("playerStats"), CFSTR("FDur"), (uint64_t)(round(v69) * 1000.0), 0);
    }
    MEMORY[0x19402EF04](*(_QWORD *)(v206 + 1896), v68);
    if (*(float *)(DerivedStorage + 48) != 0.0)
    {
      if (*(const __CFString **)(DerivedStorage + 520) != v15)
      {
        if (dword_1EE2A2AC8 >= 2)
        {
          LODWORD(cf) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          v71 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v72 = cf;
          if (os_log_type_enabled(v71, type[0]))
            v73 = v72;
          else
            v73 = v72 & 0xFFFFFFFE;
          if (v73)
          {
            if (v210)
              v74 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
            else
              v74 = "";
            if (v15)
              v84 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
            else
              v84 = "";
            LODWORD(v219.value) = 136316162;
            *(CMTimeValue *)((char *)&v219.value + 4) = (CMTimeValue)"playerfig_prepareWorkingItem2";
            LOWORD(v219.flags) = 2048;
            *(_QWORD *)((char *)&v219.flags + 2) = v210;
            HIWORD(v219.epoch) = 2082;
            v220 = v74;
            v221 = 2048;
            v222 = v15;
            v223 = 2082;
            v224 = v84;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          a1 = v210;
          v58 = v206;
        }
        itemfig_bumpBossControlTokenAndMarkBossAsNonIdle((uint64_t)v15, 0);
        __dst[0] = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
        v219 = __dst[0];
        matched = itemfig_matchBossRateToPlayerRateAndPlaybackState((uint64_t)v15, __dst, &v219);
        if ((_DWORD)matched)
        {
          started = matched;
          if (dword_1EE2A2AC8)
          {
            v53 = a3;
            LODWORD(cf) = 0;
            type[0] = OS_LOG_TYPE_DEFAULT;
            v86 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v87 = cf;
            if (os_log_type_enabled(v86, type[0]))
              v88 = v87;
            else
              v88 = v87 & 0xFFFFFFFE;
            if (!v88)
              goto LABEL_141;
            if (v210)
              v57 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
            else
              v57 = "";
            if (v15)
              v75 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
            else
              v75 = "";
            goto LABEL_124;
          }
          goto LABEL_144;
        }
        goto LABEL_353;
      }
      *(_QWORD *)(DerivedStorage + 520) = 0;
      if (dword_1EE2A2AC8 >= 2)
      {
        v211 = a3;
        v79 = a1;
        LODWORD(cf) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v80 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v81 = cf;
        if (os_log_type_enabled(v80, type[0]))
          v82 = v81;
        else
          v82 = v81 & 0xFFFFFFFE;
        if (v82)
        {
          if (v79)
            v83 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
          else
            v83 = "";
          if (v15)
            v139 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
          else
            v139 = "";
          v140 = "does not have an";
          *(CMTimeValue *)((char *)&v219.value + 4) = (CMTimeValue)"playerfig_prepareWorkingItem2";
          LODWORD(v219.value) = 136316418;
          if (!v215)
            v140 = "created new";
          LOWORD(v219.flags) = 2048;
          *(_QWORD *)((char *)&v219.flags + 2) = v79;
          v141 = "reused";
          if (v215 != 1)
            v141 = v140;
          HIWORD(v219.epoch) = 2082;
          v220 = v83;
          v221 = 2048;
          v222 = v15;
          v223 = 2082;
          v224 = v139;
          v225 = 2082;
          v226 = v141;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        a1 = v79;
        v10 = (_DWORD *)MEMORY[0x1E0CA1FC0];
        a3 = v211;
      }
      v142 = a1;
      if (v215 == 1)
      {
        if (fp_audioPipelineIsRunning(*(_QWORD *)(DerivedStorage + 560)))
        {
          if (dword_1EE2A2AC8 >= 2)
          {
            LODWORD(cf) = 0;
            type[0] = OS_LOG_TYPE_DEFAULT;
            v143 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v144 = cf;
            if (os_log_type_enabled(v143, type[0]))
              v145 = v144;
            else
              v145 = v144 & 0xFFFFFFFE;
            if (v145)
            {
              if (v142)
                v146 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
              else
                v146 = "";
              if (v15)
                v159 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
              else
                v159 = "";
              LODWORD(v219.value) = 136316162;
              *(CMTimeValue *)((char *)&v219.value + 4) = (CMTimeValue)"playerfig_prepareWorkingItem2";
              LOWORD(v219.flags) = 2048;
              *(_QWORD *)((char *)&v219.flags + 2) = v142;
              HIWORD(v219.epoch) = 2082;
              v220 = v146;
              v221 = 2048;
              v222 = v15;
              v223 = 2082;
              v224 = v159;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            a1 = v142;
          }
          fp_bumpTransitionNumber();
          itemfig_bumpBossControlTokenAndMarkBossAsNonIdle((uint64_t)v15, 0);
          itemfig_applyLoudnessInfo(v15, *(unsigned int *)(v206 + 996), 0, 1);
          v160 = FigPlaybackBossPrerollAndScheduleGaplessStart(*(_QWORD *)(v206 + 352), *(const void **)(DerivedStorage + 536), *(const void **)(v206 + 512), *(float *)(DerivedStorage + 48));
          if ((_DWORD)v160)
          {
            started = v160;
            if (!dword_1EE2A2AC8)
              goto LABEL_143;
            v161 = a3;
            LODWORD(cf) = 0;
            type[0] = OS_LOG_TYPE_DEFAULT;
            v162 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v163 = cf;
            if (os_log_type_enabled(v162, type[0]))
              v164 = v163;
            else
              v164 = v163 & 0xFFFFFFFE;
            if (!v164)
              goto LABEL_419;
            if (v142)
              v165 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
            else
              v165 = "";
            if (!v15)
            {
              v170 = "";
LABEL_418:
              LODWORD(v219.value) = 136316418;
              *(CMTimeValue *)((char *)&v219.value + 4) = (CMTimeValue)"playerfig_prepareWorkingItem2";
              LOWORD(v219.flags) = 2048;
              *(_QWORD *)((char *)&v219.flags + 2) = v142;
              HIWORD(v219.epoch) = 2082;
              v220 = v165;
              v221 = 2048;
              v222 = v15;
              v223 = 2082;
              v224 = v170;
              v225 = 1024;
              LODWORD(v226) = started;
              _os_log_send_and_compose_impl();
LABEL_419:
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              v8 = &sFigCDSNodeProtocolID;
              a3 = v161;
              v10 = (_DWORD *)MEMORY[0x1E0CA1FC0];
              a1 = v142;
              goto LABEL_142;
            }
            goto LABEL_416;
          }
          v166 = playerfig_setExitTransitionIDOnItemPrecedingWorkingItem((uint64_t)a1, *(const void **)(DerivedStorage + 536));
          if ((_DWORD)v166)
          {
            started = v166;
            if (!dword_1EE2A2AC8)
              goto LABEL_143;
            v161 = a3;
            LODWORD(cf) = 0;
            type[0] = OS_LOG_TYPE_DEFAULT;
            v167 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v168 = cf;
            if (os_log_type_enabled(v167, type[0]))
              v169 = v168;
            else
              v169 = v168 & 0xFFFFFFFE;
            if (!v169)
              goto LABEL_419;
            if (v142)
              v165 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
            else
              v165 = "";
            if (!v15)
            {
              v170 = "";
              goto LABEL_418;
            }
            goto LABEL_416;
          }
        }
        else
        {
          if (dword_1EE2A2AC8 >= 2)
          {
            LODWORD(cf) = 0;
            type[0] = OS_LOG_TYPE_DEFAULT;
            v151 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v152 = cf;
            if (os_log_type_enabled(v151, type[0]))
              v153 = v152;
            else
              v153 = v152 & 0xFFFFFFFE;
            if (v153)
            {
              if (v142)
                v154 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
              else
                v154 = "";
              if (v15)
                v171 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
              else
                v171 = "";
              LODWORD(v219.value) = 136316162;
              *(CMTimeValue *)((char *)&v219.value + 4) = (CMTimeValue)"playerfig_prepareWorkingItem2";
              LOWORD(v219.flags) = 2048;
              *(_QWORD *)((char *)&v219.flags + 2) = v142;
              HIWORD(v219.epoch) = 2082;
              v220 = v154;
              v221 = 2048;
              v222 = v15;
              v223 = 2082;
              v224 = v171;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            a1 = v142;
          }
          itemfig_applyLoudnessInfo(v15, *(unsigned int *)(v206 + 996), 0, 0);
          itemfig_bumpBossControlTokenAndMarkBossAsNonIdle((uint64_t)v15, 0);
          __dst[0] = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
          v219 = __dst[0];
          v173 = itemfig_matchBossRateToPlayerRateAndPlaybackState((uint64_t)v15, __dst, &v219);
          if ((_DWORD)v173)
          {
            started = v173;
            if (!dword_1EE2A2AC8)
              goto LABEL_143;
            v161 = a3;
            LODWORD(cf) = 0;
            type[0] = OS_LOG_TYPE_DEFAULT;
            v174 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v175 = cf;
            if (os_log_type_enabled(v174, type[0]))
              v176 = v175;
            else
              v176 = v175 & 0xFFFFFFFE;
            if (!v176)
              goto LABEL_419;
            if (v142)
              v165 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
            else
              v165 = "";
            if (!v15)
            {
              v170 = "";
              goto LABEL_418;
            }
LABEL_416:
            v170 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
            goto LABEL_418;
          }
        }
      }
      else if (CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0) == v15)
      {
        if (dword_1EE2A2AC8 >= 2)
        {
          LODWORD(cf) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          v155 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v156 = cf;
          if (os_log_type_enabled(v155, type[0]))
            v157 = v156;
          else
            v157 = v156 & 0xFFFFFFFE;
          if (v157)
          {
            if (v142)
              v158 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
            else
              v158 = "";
            if (v15)
              v172 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
            else
              v172 = "";
            LODWORD(v219.value) = 136316162;
            *(CMTimeValue *)((char *)&v219.value + 4) = (CMTimeValue)"playerfig_prepareWorkingItem2";
            LOWORD(v219.flags) = 2048;
            *(_QWORD *)((char *)&v219.flags + 2) = v142;
            HIWORD(v219.epoch) = 2082;
            v220 = v158;
            v221 = 2048;
            v222 = v15;
            v223 = 2082;
            v224 = v172;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          a1 = v142;
        }
        itemfig_bumpBossControlTokenAndMarkBossAsNonIdle((uint64_t)v15, 0);
        __dst[0] = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
        v219 = __dst[0];
        v177 = itemfig_matchBossRateToPlayerRateAndPlaybackState((uint64_t)v15, __dst, &v219);
        if ((_DWORD)v177)
        {
          started = v177;
          if (!dword_1EE2A2AC8)
            goto LABEL_143;
          v161 = a3;
          LODWORD(cf) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          v178 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v179 = cf;
          if (os_log_type_enabled(v178, type[0]))
            v180 = v179;
          else
            v180 = v179 & 0xFFFFFFFE;
          if (!v180)
            goto LABEL_419;
          if (v142)
            v165 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
          else
            v165 = "";
          if (!v15)
          {
            v170 = "";
            goto LABEL_418;
          }
          goto LABEL_416;
        }
      }
      else
      {
        if (v215 == 2)
        {
          if (dword_1EE2A2AC8 >= 2)
          {
            LODWORD(cf) = 0;
            type[0] = OS_LOG_TYPE_DEFAULT;
            v147 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v148 = cf;
            if (os_log_type_enabled(v147, type[0]))
              v149 = v148;
            else
              v149 = v148 & 0xFFFFFFFE;
            if (v149)
            {
              if (v142)
                v150 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
              else
                v150 = "";
              if (v15)
                v181 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
              else
                v181 = "";
              LODWORD(v219.value) = 136316162;
              *(CMTimeValue *)((char *)&v219.value + 4) = (CMTimeValue)"playerfig_prepareWorkingItem2";
              LOWORD(v219.flags) = 2048;
              *(_QWORD *)((char *)&v219.flags + 2) = v142;
              HIWORD(v219.epoch) = 2082;
              v220 = v150;
              v221 = 2048;
              v222 = v15;
              v223 = 2082;
              v224 = v181;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            a1 = v142;
          }
          itemfig_bumpBossControlTokenAndMarkBossAsNonIdle((uint64_t)v15, 0);
          FigPlaybackBossStartPreroll(*(_QWORD *)(v206 + 352), *(const __CFDictionary **)(v206 + 512), *(const void **)(v206 + 512), *(float *)(DerivedStorage + 48));
        }
        if (dword_1EE2A2AC8 >= 2)
        {
          LODWORD(cf) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          v182 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v183 = cf;
          if (os_log_type_enabled(v182, type[0]))
            v184 = v183;
          else
            v184 = v183 & 0xFFFFFFFE;
          if (v184)
          {
            if (v142)
              v185 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
            else
              v185 = "";
            if (v15)
              v186 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
            else
              v186 = "";
            LODWORD(v219.value) = 136316162;
            *(CMTimeValue *)((char *)&v219.value + 4) = (CMTimeValue)"playerfig_prepareWorkingItem2";
            LOWORD(v219.flags) = 2048;
            *(_QWORD *)((char *)&v219.flags + 2) = v142;
            HIWORD(v219.epoch) = 2082;
            v220 = v185;
            v221 = 2048;
            v222 = v15;
            v223 = 2082;
            v224 = v186;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          a1 = v142;
        }
        *(_BYTE *)(v206 + 625) = 1;
      }
      playerfig_scheduleVideoSlotAndVideoTargetConfigurationSwitchAndPossiblyStartBossForNextItem(a1);
    }
LABEL_353:
    v187 = a1;
    if (*(_BYTE *)(DerivedStorage + 544) && v15 == CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0))
    {
      v60 = v10;
      itemfig_bumpBossControlTokenAndMarkBossAsNonIdle((uint64_t)v15, *(_DWORD *)(DerivedStorage + 552));
      started = FigPlaybackBossStartPreroll(*(_QWORD *)(v206 + 352), *(const __CFDictionary **)(v206 + 512), *(const void **)(v206 + 512), *(float *)(DerivedStorage + 548));
      *(_BYTE *)(DerivedStorage + 544) = 0;
      if ((_DWORD)started && dword_1EE2A2AC8)
      {
        LODWORD(cf) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v201 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v202 = cf;
        if (os_log_type_enabled(v201, type[0]))
          v203 = v202;
        else
          v203 = v202 & 0xFFFFFFFE;
        if (v203)
        {
          if (a1)
            v204 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
          else
            v204 = "";
          if (v15)
            v205 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
          else
            v205 = "";
          LODWORD(v219.value) = 136316418;
          *(CMTimeValue *)((char *)&v219.value + 4) = (CMTimeValue)"playerfig_prepareWorkingItem2";
          LOWORD(v219.flags) = 2048;
          *(_QWORD *)((char *)&v219.flags + 2) = a1;
          HIWORD(v219.epoch) = 2082;
          v220 = v204;
          v221 = 2048;
          v222 = v15;
          v223 = 2082;
          v224 = v205;
          v225 = 1024;
          LODWORD(v226) = started;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v8 = &sFigCDSNodeProtocolID;
        v60 = (_DWORD *)MEMORY[0x1E0CA1FC0];
      }
    }
    else
    {
      v60 = v10;
      started = 0;
    }
    v188 = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19402EA0C](*(_QWORD *)(v188 + 496));
    if (!*(_QWORD *)(v188 + 512)
      || (Count = CFArrayGetCount(*(CFArrayRef *)(v188 + 504)),
          v229.location = 0,
          v229.length = Count,
          FirstIndexOfValue = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(v188 + 504), v229, *(const void **)(v188 + 512)), FirstIndexOfValue == -1)|| FirstIndexOfValue + 1 >= Count)
    {
      MEMORY[0x19402EA24](*(_QWORD *)(v188 + 496));
    }
    else
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v188 + 504), FirstIndexOfValue + 1);
      CFRetain(ValueAtIndex);
      MEMORY[0x19402EA24](*(_QWORD *)(v188 + 496));
      if (ValueAtIndex)
      {
        v192 = CMBaseObjectGetDerivedStorage();
        itemfig_makePlaybackPrerequisitePropertiesReady((uint64_t)ValueAtIndex, 0);
        if (*(_BYTE *)(v192 + 952))
        {
          itemfig_lookForLyrics((uint64_t)ValueAtIndex);
          *(_BYTE *)(v192 + 952) = 0;
        }
        CFRelease(ValueAtIndex);
        a1 = v187;
        v58 = v206;
        v10 = v60;
        if (*(_BYTE *)(DerivedStorage + 813) && dword_1EE2A2AC8)
        {
          LODWORD(cf) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          v193 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v194 = cf;
          if (os_log_type_enabled(v193, type[0]))
            v195 = v194;
          else
            v195 = v194 & 0xFFFFFFFE;
          if (v195)
          {
            if (a1)
              v196 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
            else
              v196 = "";
            LODWORD(v219.value) = 136315650;
            *(CMTimeValue *)((char *)&v219.value + 4) = (CMTimeValue)"playerfig_prepareWorkingItem2";
            LOWORD(v219.flags) = 2048;
            *(_QWORD *)((char *)&v219.flags + 2) = a1;
            HIWORD(v219.epoch) = 2082;
            v220 = v196;
            _os_log_send_and_compose_impl();
            v58 = v206;
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v8 = &sFigCDSNodeProtocolID;
          v10 = (_DWORD *)MEMORY[0x1E0CA1FC0];
        }
        *(_BYTE *)(DerivedStorage + 813) = 0;
        goto LABEL_144;
      }
    }
    if (*(_BYTE *)(DerivedStorage + 813))
    {
      a1 = v187;
      v58 = v206;
    }
    else
    {
      *(_BYTE *)(DerivedStorage + 813) = 1;
      a1 = v187;
      v58 = v206;
      if (dword_1EE2A2AC8)
      {
        LODWORD(cf) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v197 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v198 = cf;
        if (os_log_type_enabled(v197, type[0]))
          v199 = v198;
        else
          v199 = v198 & 0xFFFFFFFE;
        if (v199)
        {
          if (a1)
            v200 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
          else
            v200 = "";
          LODWORD(v219.value) = 136315650;
          *(CMTimeValue *)((char *)&v219.value + 4) = (CMTimeValue)"playerfig_prepareWorkingItem2";
          LOWORD(v219.flags) = 2048;
          *(_QWORD *)((char *)&v219.flags + 2) = a1;
          HIWORD(v219.epoch) = 2082;
          v220 = v200;
          _os_log_send_and_compose_impl();
          v58 = v206;
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v8 = &sFigCDSNodeProtocolID;
        v60 = (_DWORD *)MEMORY[0x1E0CA1FC0];
      }
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
    }
    goto LABEL_393;
  }
  v60 = v10;
  v61 = *(_QWORD *)(DerivedStorage + 848);
  v62 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v62)
  {
    started = 4294954514;
LABEL_107:
    if (dword_1EE2A2AC8)
    {
      v53 = a3;
      LODWORD(cf) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v76 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v77 = cf;
      if (os_log_type_enabled(v76, type[0]))
        v78 = v77;
      else
        v78 = v77 & 0xFFFFFFFE;
      if (!v78)
        goto LABEL_141;
      if (v210)
        v57 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
      else
        v57 = "";
      if (v15)
        goto LABEL_228;
      v75 = "";
      goto LABEL_124;
    }
LABEL_393:
    v10 = v60;
    goto LABEL_144;
  }
  started = v62(v59, CFSTR("DisplayList"), v61);
  if ((_DWORD)started)
    goto LABEL_107;
  CMNotificationCenterGetDefaultLocalCenter();
  v63 = FigNotificationCenterAddWeakListener();
  v10 = v60;
  if (!(_DWORD)v63)
    goto LABEL_90;
  started = v63;
  if (dword_1EE2A2AC8)
  {
    v53 = a3;
    LODWORD(cf) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v64 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v65 = cf;
    if (os_log_type_enabled(v64, type[0]))
      v66 = v65;
    else
      v66 = v65 & 0xFFFFFFFE;
    if (!v66)
      goto LABEL_141;
    if (v210)
      v57 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
    else
      v57 = "";
    if (!v15)
    {
      v75 = "";
      goto LABEL_124;
    }
    goto LABEL_228;
  }
LABEL_144:
  if (v15)
  {
    v89 = a1;
    if ((_DWORD)started)
    {
      v90 = *(const void **)(v58 + 128);
      LODWORD(__dst[0].value) = started;
      v91 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, __dst);
      if (v91)
      {
        v92 = v91;
        FailedNotificationPayloadWithContentStream = itemfig_createFailedNotificationPayloadWithContentStream(v90, v91);
        CFRelease(v92);
      }
      else
      {
        FailedNotificationPayloadWithContentStream = 0;
      }
      v125 = v89;
      *(_BYTE *)(v206 + 1266) = 0;
      Value = (__CFError *)CFDictionaryGetValue(FailedNotificationPayloadWithContentStream, CFSTR("CFError"));
      itemfig_reportingAgentReportError((uint64_t)v15, Value, CFSTR("CoreMediaErrorDomain"), CFSTR("Failed to become ready for playback"), started);
      DerivedStorage = v208;
      if (*((_DWORD *)v8 + 690))
      {
        LODWORD(cf) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v127 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v128 = cf;
        if (os_log_type_enabled(v127, type[0]))
          v129 = v128;
        else
          v129 = v128 & 0xFFFFFFFE;
        if (v129)
        {
          if (v125)
            v130 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
          else
            v130 = "";
          v131 = CMBaseObjectGetDerivedStorage();
          LODWORD(v219.value) = 136316418;
          *(CMTimeValue *)((char *)&v219.value + 4) = (CMTimeValue)"playerfig_prepareWorkingItem2";
          LOWORD(v219.flags) = 2048;
          *(_QWORD *)((char *)&v219.flags + 2) = v125;
          HIWORD(v219.epoch) = 2082;
          v220 = v130;
          v221 = 2048;
          v222 = v15;
          v223 = 2082;
          v224 = (const char *)(v131 + 2048);
          v225 = 1024;
          LODWORD(v226) = started;
          _os_log_send_and_compose_impl();
          DerivedStorage = v208;
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v8 = &sFigCDSNodeProtocolID;
      }
    }
    else
    {
      if (!*(_QWORD *)(v58 + 600))
      {
        NotificationPayloadForProperties = playerfig_createNotificationPayloadForProperties(a1, (uint64_t)v15, v47, v48, v49, v50, v51, v52, CFSTR("PlayableTimeIntervals"), 0);
        CMNotificationCenterGetDefaultLocalCenter();
        FigDispatchAsyncPostNotification();
        if (NotificationPayloadForProperties)
          CFRelease(NotificationPayloadForProperties);
      }
      v212 = a3;
      v95 = playerfig_createNotificationPayloadForProperties(a1, (uint64_t)v15, v47, v48, v49, v50, v51, v52, CFSTR("SeekableTimeIntervals"), 0);
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
      if (v95)
        CFRelease(v95);
      FailedNotificationPayloadWithContentStream = playerfig_createNotificationPayloadForProperties(a1, (uint64_t)v15, v96, v97, v98, v99, v100, v101, CFSTR("CanPlayFastForward"), (uint64_t)CFSTR("CanPlayFastReverse"));
      *(_BYTE *)(v58 + 1266) = 1;
      if (*(double *)(v58 + 1984) == 0.0)
      {
        *(CFAbsoluteTime *)(v58 + 1984) = CFAbsoluteTimeGetCurrent();
        v102 = CMBaseObjectGetDerivedStorage();
        if (*(_BYTE *)(v102 + 1696))
        {
          v103 = v102;
          LODWORD(__dst[0].value) = 0;
          LODWORD(v219.value) = 0;
          v104 = *(double *)(v102 + 1960);
          v105 = *(double *)(v102 + 1920);
          v106 = *(double *)(v102 + 1976);
          v107 = *(double *)(v102 + 1984);
          MEMORY[0x19402EEEC](*(_QWORD *)(v102 + 1896));
          v108 = *(_QWORD *)(v103 + 1904);
          if (v108)
          {
            v109 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                               + 56);
            if (v109)
              v109(v108, CFSTR("playerStats"), CFSTR("RdyInspTime"), (uint64_t)((v104 - v105) * 1000.0), 0);
          }
          v110 = *(_QWORD *)(v103 + 1904);
          if (v110)
          {
            v111 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                               + 56);
            if (v111)
              v111(v110, CFSTR("playerStats"), CFSTR("AudCrTime"), (uint64_t)((v106 - v105) * 1000.0), 0);
            v112 = *(_QWORD *)(v103 + 1904);
            if (v112)
            {
              v113 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                 + 56);
              if (v113)
                v113(v112, CFSTR("playerStats"), CFSTR("RdyPlbkTime"), (uint64_t)((v107 - v105) * 1000.0), 0);
            }
          }
          itemfig_GetDimensions(v15, (float *)__dst, (float *)&v219);
          v114 = *(_QWORD *)(v103 + 1904);
          if (v114)
          {
            v115 = *(float *)&__dst[0].value;
            v116 = *(void (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 56);
            if (v116)
              v116(v114, CFSTR("crabsStats"), CFSTR("ReWd"), (int)v115, 0);
          }
          v117 = *(_QWORD *)(v103 + 1904);
          if (v117)
          {
            v118 = *(float *)&v219.value;
            v119 = *(void (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 56);
            if (v119)
              v119(v117, CFSTR("crabsStats"), CFSTR("ReHt"), (int)v118, 0);
          }
          MEMORY[0x19402EF04](*(_QWORD *)(v103 + 1896));
        }
        itemfig_networkActivitySubmitMetricsForInitialStartupIfAvailable();
      }
      DerivedStorage = v208;
      v120 = *(const __CFArray **)(v208 + 504);
      if (v120 && CFArrayGetCount(v120) && CFArrayGetValueAtIndex(*(CFArrayRef *)(v208 + 504), 0) == v15)
      {
        itemfig_handleReadyToDisplayVideoLatch((uint64_t)v15, 3, v212);
        playerfig_scheduleVideoTargetImageQueueConfigurationTransitionForItem(a1, v15, MEMORY[0x1E0CA2E18]);
      }
      if (*((_DWORD *)v8 + 690))
      {
        LODWORD(cf) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v121 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v122 = cf;
        if (os_log_type_enabled(v121, type[0]))
          v123 = v122;
        else
          v123 = v122 & 0xFFFFFFFE;
        if (v123)
        {
          if (a1)
            v124 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
          else
            v124 = "";
          v132 = CMBaseObjectGetDerivedStorage();
          LODWORD(v219.value) = 136316162;
          *(CMTimeValue *)((char *)&v219.value + 4) = (CMTimeValue)"playerfig_prepareWorkingItem2";
          LOWORD(v219.flags) = 2048;
          *(_QWORD *)((char *)&v219.flags + 2) = a1;
          HIWORD(v219.epoch) = 2082;
          v220 = v124;
          v221 = 2048;
          v222 = v15;
          v223 = 2082;
          v224 = (const char *)(v132 + 2048);
          _os_log_send_and_compose_impl();
          DerivedStorage = v208;
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v8 = &sFigCDSNodeProtocolID;
      }
      if (*MEMORY[0x1E0CA1FC0] == 1)
      {
        v133 = CMBaseObjectGetDerivedStorage();
        strncpy((char *)__dst, (const char *)(v133 + 2048), 8uLL);
        kdebug_trace();
      }
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    if (FailedNotificationPayloadWithContentStream)
      CFRelease(FailedNotificationPayloadWithContentStream);
    CFRelease(v15);
    v10 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  }
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
LABEL_205:
  FigDeferredTransactionCommit((uint64_t)v214);
  if (v214)
    CFRelease(v214);
  if (*v10 == 1)
    kdebug_trace();
  if (*((_DWORD *)v8 + 690) >= 2u)
  {
    LODWORD(cf) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v134 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v135 = cf;
    if (os_log_type_enabled(v134, type[0]))
      v136 = v135;
    else
      v136 = v135 & 0xFFFFFFFE;
    if (v136)
    {
      if (v209)
        v137 = "";
      else
        v137 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
      LODWORD(v219.value) = 136315906;
      *(CMTimeValue *)((char *)&v219.value + 4) = (CMTimeValue)"playerfig_prepareWorkingItem2";
      LOWORD(v219.flags) = 2048;
      *(_QWORD *)((char *)&v219.flags + 2) = v15;
      HIWORD(v219.epoch) = 2082;
      v220 = v137;
      v221 = 1024;
      LODWORD(v222) = started;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return started;
}

uint64_t playerasync_reflectSubPlayerNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage;
  const __CFDictionary *Value;
  const __CFDictionary *v8;
  _QWORD *v9;
  uint64_t v10;
  const void *v11;
  const __CFDictionary *v12;
  uint64_t v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(a5, CFSTR("AVController_Volume"));
    if (!Value)
      goto LABEL_11;
    v8 = Value;
    v10 = *(_QWORD *)(DerivedStorage + 80);
    v9 = (_QWORD *)(DerivedStorage + 80);
    MEMORY[0x19402EEEC](v10);
    v11 = (const void *)v9[1];
    v9[1] = v8;
    v12 = v8;
  }
  else
  {
    if (!FigCFEqual())
      goto LABEL_11;
    v13 = *(_QWORD *)(DerivedStorage + 80);
    v9 = (_QWORD *)(DerivedStorage + 80);
    MEMORY[0x19402EEEC](v13);
    v11 = (const void *)v9[2];
    v9[2] = a5;
    if (!a5)
      goto LABEL_8;
    v12 = a5;
  }
  CFRetain(v12);
LABEL_8:
  if (v11)
    CFRelease(v11);
  MEMORY[0x19402EF04](*v9);
LABEL_11:
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t FigFormatReaderCreateForStream(uint64_t a1, const __CFAllocator *a2, uint64_t a3, CFTypeRef *a4)
{
  return FigFormatReaderCreateForStreamReturningResults(a1, 0, a2, a3, a4, 0, 0, 0);
}

uint64_t ensureRegistryInitialized()
{
  MEMORY[0x19402F294](&ensureRegistryInitialized_sInitRegistryOnce, initRegistry);
  if (gFFRRegistry && CFArrayGetCount((CFArrayRef)gFFRRegistry))
    return 0;
  else
    return FigSignalErrorAt();
}

uint64_t initRegistry()
{
  uint64_t result;
  CFPropertyListRef v1;
  const void *v2;
  int v3;
  int v4;
  const char *v5;
  uint64_t (*v6)(const void *, int, uint64_t, CFDictionaryRef, _QWORD *, _QWORD *);
  char *v7;
  uint64_t (*v8)(const void *, int, uint64_t, CFDictionaryRef, _QWORD *, _QWORD *);

  gFFRRegistry = (uint64_t)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
  result = FigFormatReaderCreatePropertyListDictionaryFromCString("<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"><plist version=\"1.0\"><dict>\t<key>video/mp4</key>\t<array>\t\t<string>audio/mp4</string>\t\t<string>audio/x-m4a</string>\t\t<string>audio/x-m4b</string>\t\t<string>audio/x-m4p</string>\t\t<string>video/x-m4v</string>\t\t<string>audio/x-m4r</string>\t\t<string>video/3gpp</string>\t\t<string>audio/3gpp</string>\t\t<string>video/3gpp2</string>\t\t<string>audio/3gpp2</string>\t\t<string>application/mp4</string>\t</array>\t<key>audio/vnd.wave</key>\t<array>\t\t<string>audio/wav</string>\t\t<string>audio/x-wav</string>\t\t<string>audio/wave</string>\t</array>\t<key>audio/mpeg</key>\t<array>\t\t<string>audio/mpa</string>\t\t<string>audio/x-mpeg</string>\t\t<string>audio/mpg</string>\t\t<string>audio/x-mpg</string>\t\t<string>audio/mpeg3</string>\t\t<string>audio/x-mpeg3</string>\t\t<string>audio/mp3</string>\t\t<string>audio/x-mp3</string>\t</array>\t<key>audio/aac</key>\t<array>\t\t<string>audio/x-aac</string>\t</array>\t<key>video/mp2t</key>\t<array>\t\t<string>video/x-mp2t</string>\t\t<string>video/m2ts</string>\t\t<string>video/x-m2ts</string>\t</array>\t<key>audio/aiff</key>\t<array>\t\t<string>audio/x-aiff</string>\t</array>\t<key>video/vnd.avi</key>\t<array>\t\t<string>video/avi</string>\t\t<string>video/msvideo</string>\t\t<string>video/x-msvideo</string>\t</array></dict></plist>", 0, (const __CFDictionary **)&gFFREquivalentMIMETypes);
  if ((_DWORD)result)
    return result;
  result = RegisterStaticFormatReader("<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"><plist version=\"1.0\"><dict>\t<key>ContainerLabelling</key>\t<dict>\t\t<key>com.apple.ostype</key>\t\t<array>\t\t\t<string>MooV</string>\t\t</array>\t\t<key>public.mime-type</key>\t\t<array>\t\t\t<string>video/quicktime</string>\t\t\t<string>video/mp4</string>\t\t</array>\t\t<key>public.filename-extension</key>\t\t<array>\t\t\t<string>mov</string>\t\t\t<string>qt</string>\t\t\t<string>mqv</string>\t\t\t<string>mp4</string>\t\t\t<string>m4a</string>\t\t\t<string>m4v</string>\t\t\t<string>m4b</string>\t\t\t<string>m4p</string>\t\t\t<string>m4r</string>\t\t\t<string>aax</string>\t\t\t<string>3gp</string>\t\t\t<string>3gpp</string>\t\t\t<string>3g2</string>\t\t\t<string>3gp2</string>\t\t\t<string>aivu</string>\t\t</array>\t\t<key>com.apple.uti</key>\t\t<array>\t\t\t<string>com.apple.quicktime-movie</string>\t\t\t<string>public.mpeg-4</string>\t\t\t<string>public.mpeg-4-audio</string>\t\t\t<string>com.apple.m4a-audio</string>\t\t\t<string>com.apple.protected-mpeg-4-audio</string>\t\t\t<string>com.apple.m4v-video</string>\t\t\t<string>com.apple.mpeg-4-ringtone</string>\t\t\t<string>com.audible.aax-audiobook</string>\t\t\t<string>public.3gpp</string>\t\t\t<string>public.3gpp2</string>\t\t\t<string>com.apple.immersive-video</string>\t\t</array>\t</dict></dict></plist>", (uint64_t)InstantiateMovieFormatReader);
  if ((_DWORD)result)
    return result;
  result = RegisterStaticFormatReader("<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"><plist version=\"1.0\"><dict>\t<key>ContainerLabelling</key>\t<dict>\t\t<key>public.mime-type</key>\t\t<array>\t\t\t<string>video/vnd.avi</string>\t\t</array>\t\t<key>public.filename-extension</key>\t\t<array>\t\t\t<string>avi</string>\t\t</array>\t\t<key>com.apple.uti</key>\t\t<array>\t\t\t<string>public.avi</string>\t\t</array>\t</dict></dict></plist>", (uint64_t)InstantiateAVIFormatReader);
  if ((_DWORD)result)
    return result;
  v1 = CFPreferencesCopyValue(CFSTR("CombinedAudioFormatReader"), CFSTR("com.apple.coremedia"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  if (!v1)
    goto LABEL_13;
  v2 = v1;
  if (!CFEqual(v1, CFSTR("AudioFile")))
  {
    v3 = CFEqual(v2, CFSTR("AudioFileStream"));
    v4 = v3;
    v5 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"htt"
         "p://www.apple.com/DTDs/PropertyList-1.0.dtd\"><plist version=\"1.0\"><dict>\t<key>ContainerLabelling</key>\t<di"
         "ct>\t\t<key>com.apple.ostype</key>\t\t<array>\t\t\t<string>mp3!</string>\t\t\t<string>MP3!</string>\t\t\t<strin"
         "g>MPG3</string>\t\t\t<string>mpg3</string>\t\t\t<string>Mp3 </string>\t\t\t<string>MP3 </string>\t\t\t<string>a"
         "mr </string>\t\t\t<string>amrw</string>\t\t\t<string>AIFF</string>\t\t\t<string>AIFC</string>\t\t</array>\t\t<k"
         "ey>public.mime-type</key>\t\t<array>\t\t\t<string>audio/mpeg</string>\t\t\t<string>audio/AMR</string>\t\t\t<str"
         "ing>audio/AMR-WB</string>\t\t\t<string>audio/aac</string>\t\t\t<string>audio/vnd.wave</string>\t\t\t<string>aud"
         "io/aiff</string>\t\t\t<string>audio/x-caf</string>\t\t\t<string>audio/basic</string>\t\t\t<string>audio/flac</s"
         "tring>\t\t\t<string>audio/usac</string>\t\t</array>\t\t<key>public.filename-extension</key>\t\t<array>\t\t\t<st"
         "ring>mp3</string>\t\t\t<string>m1a</string>\t\t\t<string>m2a</string>\t\t\t<string>mpa</string>\t\t\t<string>mp"
         "2</string>\t\t\t<string>mp1</string>\t\t\t<string>aif</string>\t\t\t<string>aiff</string>\t\t\t<string>aifc</st"
         "ring>\t\t\t<string>wav</string>\t\t\t<string>w64</string>\t\t\t<string>aac</string>\t\t\t<string>adts</string>\t"
         "\t\t<string>ac3</string>\t\t\t<string>ec3</string>\t\t\t<string>eac3</string>\t\t\t<string>caf</string>\t\t\t<s"
         "tring>amr</string>\t\t\t<string>awb</string>\t\t\t<string>aa</string>\t\t\t<string>au</string>\t\t\t<string>fla"
         "c</string>\t\t\t<string>latm</string>\t\t\t<string>loas</string>\t\t\t<string>xhe</string>\t\t</array>\t\t<key>"
         "com.apple.uti</key>\t\t<array>\t\t\t<string>public.mp2</string>\t\t\t<string>public.mp3</string>\t\t\t<string>p"
         "ublic.aiff-audio</string>\t\t\t<string>public.aifc-audio</string>\t\t\t<string>com.microsoft.waveform-audio</st"
         "ring>\t\t\t<string>com.sony.wave64</string>\t\t\t<string>public.aac-audio</string>\t\t\t<string>public.ac3-audi"
         "o</string>\t\t\t<string>public.enhanced-ac3-audio</string>\t\t\t<string>com.apple.coreaudio-format</string>\t\t"
         "\t<string>org.3gpp.adaptive-multi-rate-audio</string>\t\t\t<string>com.audible.aa-audiobook</string>\t\t\t<stri"
         "ng>public.au-audio</string>\t\t\t<string>org.xiph.flac</string>\t\t\t<string>public.mp4a-loas</string>\t\t</arr"
         "ay>\t</dict></dict></plist>";
    if (!v3)
      v5 = 0;
    v6 = InstantiateAudioFileStreamFormatReader;
    if (!v3)
      v6 = 0;
    gSelectedAudioFormatReaderInfo = (uint64_t)v5;
    gAudioFormatReaderCreator = (uint64_t)v6;
    CFRelease(v2);
    if (v4)
      goto LABEL_12;
LABEL_13:
    result = RegisterStaticFormatReader("<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"><plist version=\"1.0\"><dict>\t<key>ContainerLabelling</key>\t<dict>\t\t<key>com.apple.ostype</key>\t\t<array>\t\t\t<string>AIFF</string>\t\t\t<string>AIFC</string>\t\t</array>\t\t<key>public.mime-type</key>\t\t<array>\t\t\t<string>audio/vnd.wave</string>\t\t\t<string>audio/aiff</string>\t\t\t<string>audio/x-caf</string>\t\t\t<string>audio/basic</string>\t\t</array>\t\t<key>public.filename-extension</key>\t\t<array>\t\t\t<string>aif</string>\t\t\t<string>aiff</string>\t\t\t<string>aifc</string>\t\t\t<string>caf</string>\t\t\t<string>aa</string>\t\t\t<string>wav</string>\t\t\t<string>au</string>\t\t\t<string>w64</string>\t\t</array>\t\t<key>com.apple.uti</key>\t\t<array>\t\t\t<string>public.aiff-audio</string>\t\t\t<string>public.aifc-audio</string>\t\t\t<string>com.apple.coreaudio-format</string>\t\t\t<string>com.audible.aa-audiobook</string>\t\t\t<string>com.microsoft.waveform-audio</string>\t\t\t<string>public.au-audio</string>\t\t\t<string>com.sony.wave64</string>\t\t</array>\t</dict></dict></plist>", (uint64_t)InstantiateAudioFileFormatReader);
    if ((_DWORD)result)
      return result;
    v7 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"htt"
         "p://www.apple.com/DTDs/PropertyList-1.0.dtd\"><plist version=\"1.0\"><dict>\t<key>ContainerLabelling</key>\t<di"
         "ct>\t\t<key>com.apple.ostype</key>\t\t<array>\t\t\t<string>mp3!</string>\t\t\t<string>MP3!</string>\t\t\t<strin"
         "g>MPG3</string>\t\t\t<string>mpg3</string>\t\t\t<string>Mp3 </string>\t\t\t<string>MP3 </string>\t\t\t<string>a"
         "mr </string>\t\t\t<string>amrw</string>\t\t</array>\t\t<key>public.mime-type</key>\t\t<array>\t\t\t<string>audi"
         "o/mpeg</string>\t\t\t<string>audio/AMR</string>\t\t\t<string>audio/AMR-WB</string>\t\t\t<string>audio/aac</stri"
         "ng>\t\t\t<string>audio/flac</string>\t\t\t<string>audio/usac</string>\t\t</array>\t\t<key>public.filename-exten"
         "sion</key>\t\t<array>\t\t\t<string>mp3</string>\t\t\t<string>m1a</string>\t\t\t<string>m2a</string>\t\t\t<strin"
         "g>mpa</string>\t\t\t<string>mp2</string>\t\t\t<string>mp1</string>\t\t\t<string>aac</string>\t\t\t<string>adts<"
         "/string>\t\t\t<string>amr</string>\t\t\t<string>awb</string>\t\t\t<string>ac3</string>\t\t\t<string>ec3</string"
         ">\t\t\t<string>eac3</string>\t\t\t<string>flac</string>\t\t\t<string>latm</string>\t\t\t<string>loas</string>\t"
         "\t\t<string>xhe</string>\t\t</array>\t\t<key>com.apple.uti</key>\t\t<array>\t\t\t<string>public.mp3</string>\t\t"
         "\t<string>public.mp2</string>\t\t\t<string>public.aac-audio</string>\t\t\t<string>org.3gpp.adaptive-multi-rate-"
         "audio</string>\t\t\t<string>public.ac3-audio</string>\t\t\t<string>public.enhanced-ac3-audio</string>\t\t\t<str"
         "ing>org.xiph.flac</string>\t\t\t<string>public.mp4a-loas</string>\t\t</array>\t</dict></dict></plist>";
    v8 = InstantiateAudioFileStreamFormatReader;
    goto LABEL_15;
  }
  gSelectedAudioFormatReaderInfo = (uint64_t)"<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE plist PUBLIC \"-//Apple "
                                            "Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.d"
                                            "td\"><plist version=\"1.0\"><dict>\t<key>ContainerLabelling</key>\t<dict>\t\t"
                                            "<key>com.apple.ostype</key>\t\t<array>\t\t\t<string>mp3!</string>\t\t\t<stri"
                                            "ng>MP3!</string>\t\t\t<string>MPG3</string>\t\t\t<string>mpg3</string>\t\t\t"
                                            "<string>Mp3 </string>\t\t\t<string>MP3 </string>\t\t\t<string>amr </string>\t"
                                            "\t\t<string>amrw</string>\t\t\t<string>AIFF</string>\t\t\t<string>AIFC</stri"
                                            "ng>\t\t</array>\t\t<key>public.mime-type</key>\t\t<array>\t\t\t<string>audio"
                                            "/mpeg</string>\t\t\t<string>audio/AMR</string>\t\t\t<string>audio/AMR-WB</st"
                                            "ring>\t\t\t<string>audio/aac</string>\t\t\t<string>audio/vnd.wave</string>\t"
                                            "\t\t<string>audio/aiff</string>\t\t\t<string>audio/x-caf</string>\t\t\t<stri"
                                            "ng>audio/basic</string>\t\t\t<string>audio/flac</string>\t\t\t<string>audio/"
                                            "usac</string>\t\t</array>\t\t<key>public.filename-extension</key>\t\t<array>"
                                            "\t\t\t<string>mp3</string>\t\t\t<string>m1a</string>\t\t\t<string>m2a</strin"
                                            "g>\t\t\t<string>mpa</string>\t\t\t<string>mp2</string>\t\t\t<string>mp1</str"
                                            "ing>\t\t\t<string>aif</string>\t\t\t<string>aiff</string>\t\t\t<string>aifc<"
                                            "/string>\t\t\t<string>wav</string>\t\t\t<string>w64</string>\t\t\t<string>aa"
                                            "c</string>\t\t\t<string>adts</string>\t\t\t<string>ac3</string>\t\t\t<string"
                                            ">ec3</string>\t\t\t<string>eac3</string>\t\t\t<string>caf</string>\t\t\t<str"
                                            "ing>amr</string>\t\t\t<string>awb</string>\t\t\t<string>aa</string>\t\t\t<st"
                                            "ring>au</string>\t\t\t<string>flac</string>\t\t\t<string>latm</string>\t\t\t"
                                            "<string>loas</string>\t\t\t<string>xhe</string>\t\t</array>\t\t<key>com.appl"
                                            "e.uti</key>\t\t<array>\t\t\t<string>public.mp2</string>\t\t\t<string>public."
                                            "mp3</string>\t\t\t<string>public.aiff-audio</string>\t\t\t<string>public.aif"
                                            "c-audio</string>\t\t\t<string>com.microsoft.waveform-audio</string>\t\t\t<st"
                                            "ring>com.sony.wave64</string>\t\t\t<string>public.aac-audio</string>\t\t\t<s"
                                            "tring>public.ac3-audio</string>\t\t\t<string>public.enhanced-ac3-audio</stri"
                                            "ng>\t\t\t<string>com.apple.coreaudio-format</string>\t\t\t<string>org.3gpp.a"
                                            "daptive-multi-rate-audio</string>\t\t\t<string>com.audible.aa-audiobook</str"
                                            "ing>\t\t\t<string>public.au-audio</string>\t\t\t<string>org.xiph.flac</strin"
                                            "g>\t\t\t<string>public.mp4a-loas</string>\t\t</array>\t</dict></dict></plist>";
  gAudioFormatReaderCreator = (uint64_t)InstantiateAudioFileFormatReader;
  CFRelease(v2);
LABEL_12:
  v7 = (char *)gSelectedAudioFormatReaderInfo;
  v8 = (uint64_t (*)(const void *, int, uint64_t, CFDictionaryRef, _QWORD *, _QWORD *))gAudioFormatReaderCreator;
LABEL_15:
  result = RegisterStaticFormatReader(v7, (uint64_t)v8);
  if (!(_DWORD)result)
  {
    result = RegisterStaticFormatReader("<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"><plist version=\"1.0\"><dict>\t<key>ContainerLabelling</key>\t<dict>\t\t<key>public.mime-type</key>\t\t<array>\t\t\t<string>text/vtt</string>\t\t</array>\t\t<key>public.filename-extension</key>\t\t<array>\t\t\t<string>vtt</string>\t\t\t<string>webvtt</string>\t\t</array>\t\t\t<key>com.apple.uti</key>\t\t\t<array>\t\t\t\t<string>org.w3.webvtt</string>\t\t\t</array>\t</dict></dict></plist>", (uint64_t)InstantiateWebVTTFormatReader);
    if (!(_DWORD)result)
    {
      result = RegisterStaticFormatReader("<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"><plist version=\"1.0\"><dict>\t<key>ContainerLabelling</key>\t<dict>\t\t<key>public.mime-type</key>\t\t<array>\t\t\t<string>text/scc</string>\t\t</array>\t\t<key>public.filename-extension</key>\t\t<array>\t\t\t<string>scc</string>\t\t\t<string>sc2</string>\t\t</array>\t</dict></dict></plist>", (uint64_t)InstantiateSCCFormatReader);
      if (!(_DWORD)result)
        return RegisterStaticFormatReader("<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"><plist version=\"1.0\"><dict>\t<key>ContainerLabelling</key>\t<dict>\t\t<key>public.mime-type</key>\t\t<array>\t\t\t<string>application/ttml+xml</string>\t\t</array>\t\t<key>public.filename-extension</key>\t\t<array>\t\t\t<string>itt</string>\t\t\t<string>ttml</string>\t\t</array>\t</dict></dict></plist>", (uint64_t)InstantiateTTMLFormatReader);
    }
  }
  return result;
}

uint64_t FigThingFind(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *Value;

  v3 = gAllFigThings;
  if (gAllFigThings)
  {
    while (1)
    {
      v5 = *(const void **)a1;
      if (!*(_QWORD *)a1
        || (v6 = CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 8), CFSTR("FigThingType")), CFEqual(v5, v6)))
      {
        v7 = *(const void **)(a1 + 8);
        if (!v7 || (v8 = CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 8), CFSTR("FigThingSubtype")), CFEqual(v7, v8)))
        {
          v9 = *(const void **)(a1 + 16);
          if (!v9)
            break;
          Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 8), CFSTR("FigThingManufacturer"));
          if (CFEqual(v9, Value))
            break;
        }
      }
      v3 = *(_QWORD *)(v3 + 40);
      if (!v3)
        goto LABEL_11;
    }
    *a2 = v3;
  }
LABEL_11:
  if (*a2)
    return 0;
  else
    return 4294967294;
}

uint64_t QTMovieFormatReaderCreateFromStream(const void *a1, const __CFAllocator *a2, const __CFDictionary *a3, _QWORD *a4)
{
  unsigned int v8;
  uint64_t DerivedStorage;
  const void *Value;
  const void *v11;
  char v12;
  int v13;
  int Int32IfPresent;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int TrackReaderDictionary;

  FigFormatReaderGetClassID();
  v8 = CMDerivedObjectCreate();
  if (v8)
    goto LABEL_31;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    Value = CFDictionaryGetValue(a3, CFSTR("Instantiation_AllowIncrementalFragmentParsing"));
    v11 = (const void *)*MEMORY[0x1E0C9AE50];
    if (Value == (const void *)*MEMORY[0x1E0C9AE50])
      v12 = 19;
    else
      v12 = 0;
    if (Value == (const void *)*MEMORY[0x1E0C9AE50])
      v13 = 3;
    else
      v13 = 0;
    if (CFDictionaryGetValue(a3, CFSTR("Instantiation_PrepareForCopying")) == v11)
      v12 |= 0xBu;
    if (CFDictionaryGetValue(a3, CFSTR("Instantiation_MovieProxy")) == v11)
      v12 |= 0x20u;
    if (CFDictionaryGetValue(a3, CFSTR("ReadEntireMoovAtom")) == v11)
      v12 |= 0x40u;
    if (CFDictionaryGetValue(a3, CFSTR("Instantiation_EnableAssetAnalysis")) == v11)
      FigAssetAnalysisReporterCreate();
    Int32IfPresent = FigCFDictionaryGetInt32IfPresent();
    v15 = v12 | 2;
  }
  else
  {
    v13 = 0;
    Int32IfPresent = 0;
    v15 = 2;
  }
  v8 = MovieInformationCreate((uint64_t)a2, v13, (uint64_t *)(DerivedStorage + 8));
  if (v8)
    goto LABEL_31;
  *(_QWORD *)DerivedStorage = CFRetain(a1);
  v16 = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 80) = v16;
  if (!v16 || (v17 = FigSimpleMutexCreate(), (*(_QWORD *)(DerivedStorage + 72) = v17) == 0))
  {
    v8 = FigSignalErrorAt();
LABEL_31:
    TrackReaderDictionary = v8;
    goto LABEL_27;
  }
  if (Int32IfPresent)
    MovieInformationSetAudibleGroupID(*(_QWORD *)(DerivedStorage + 8), 0);
  v8 = MoovParseByteStream(*(_QWORD *)(DerivedStorage + 8), v15, *(const void **)DerivedStorage, 0);
  if (v8)
    goto LABEL_31;
  TrackReaderDictionary = CreateTrackReaderDictionary(a2, (uint64_t *)DerivedStorage);
  if (!TrackReaderDictionary)
    *a4 = 0;
LABEL_27:
  if (MoovIsParsingError(TrackReaderDictionary))
    return 4294954448;
  else
    return TrackReaderDictionary;
}

uint64_t FigFormatReaderGetClassID()
{
  MEMORY[0x19402F294](&FigFormatReaderGetClassID_sRegisterFigFormatReaderOnce, RegisterFigFormatReader);
  return sFigFormatReaderClassID;
}

uint64_t RegisterFigFormatReader()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t playercentral_SetRate(OpaqueFigPlayer *a1, float a2)
{
  uint64_t DerivedStorage;
  uint64_t SetRateOptions;
  uint64_t v6;
  CFTypeRef v8;
  uint64_t (*v9)(OpaqueFigPlayer *, CFTypeRef, float);
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (*(_BYTE *)(DerivedStorage + 8) || !*(_QWORD *)(DerivedStorage + 16))
  {
    SetRateOptions = FigSignalErrorAt();
LABEL_3:
    v6 = SetRateOptions;
    goto LABEL_4;
  }
  SetRateOptions = FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E0C9AE00], 0, (CFMutableDictionaryRef *)&cf);
  if ((_DWORD)SetRateOptions)
    goto LABEL_3;
  v8 = cf;
  v9 = *(uint64_t (**)(OpaqueFigPlayer *, CFTypeRef, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
  if (v9)
  {
    SetRateOptions = v9(a1, v8, a2);
    goto LABEL_3;
  }
  v6 = 4294954514;
LABEL_4:
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t playerfig_SetRate(const void *a1, float a2)
{
  return playerfig_setRateForReason(a1, 0, a2);
}

uint64_t playerfig_SetRateWithFade(const void *a1, CMTime *a2, float a3)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  CMTime v8;

  v8 = *a2;
  v6 = *MEMORY[0x1E0CA2E18];
  v7 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v4 = v6;
  v5 = v7;
  return playerfig_setRateGuts(a1, 0, &v8, (uint64_t)&v6, (uint64_t)&v4, a3);
}

uint64_t playerfig_applySoftwareVolume(uint64_t a1, const void *a2, int a3, float a4, float a5)
{
  _QWORD *DerivedStorage;
  const void *v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  char v12;
  __CFString **v13;
  uint64_t v14;
  const __CFAllocator *v15;
  CFNumberRef v16;
  CFNumberRef v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  float v23;
  float valuePtr;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v23 = a5;
  valuePtr = a4;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](DerivedStorage[62]);
  v10 = (const void *)FigCFCopyCompactDescription();
  if (dword_1EE2A2AC8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v10)
    CFRelease(v10);
  if (!DerivedStorage[70] && !DerivedStorage[79])
  {
    if (dword_1EE2A2AC8)
    {
      v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v20 = 0;
    goto LABEL_31;
  }
  if (!CFEqual(a2, CFSTR("SoftwareVolume1")))
  {
    if (CFEqual(a2, CFSTR("SoftwareVolume2")))
    {
      v12 = 0;
      v13 = kFigAudioRenderPipelineProperty_SoftwareVolume2RampDuration;
      goto LABEL_11;
    }
    if (CFEqual(a2, CFSTR("SoftwareVolume5")))
    {
      v14 = 0;
      v12 = 1;
      goto LABEL_12;
    }
    v20 = FigSignalErrorAt();
LABEL_31:
    MEMORY[0x19402EA24](DerivedStorage[62]);
    return v20;
  }
  v12 = 0;
  v13 = kFigAudioRenderPipelineProperty_SoftwareVolume1RampDuration;
LABEL_11:
  v14 = (uint64_t)*v13;
LABEL_12:
  if (a5 < 0.0)
    v23 = 0.0;
  v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v16 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloatType, &valuePtr);
  v17 = CFNumberCreate(v15, kCFNumberFloatType, &v23);
  if ((v12 & 1) == 0 && (v18 = fp_setPropertyOnAllAudioRenderPipelines(a1, v14, (uint64_t)v17), (_DWORD)v18))
  {
    v20 = v18;
  }
  else
  {
    v19 = fp_setPropertyOnAllAudioRenderPipelines(a1, (uint64_t)a2, (uint64_t)v16);
    v20 = v19;
    if (a3 && !(_DWORD)v19)
    {
      if (v23 > 0.0)
        usleep((v23 * 1000.0 * 1000.0));
      v20 = 0;
    }
  }
  MEMORY[0x19402EA24](DerivedStorage[62]);
  if (v17)
    CFRelease(v17);
  if (v16)
    CFRelease(v16);
  return v20;
}

uint64_t playerfig_setRateGuts(const void *a1, unsigned int a2, CMTime *a3, uint64_t a4, uint64_t a5, float a6)
{
  uint64_t DerivedStorage;
  int v13;
  uint64_t v14;
  float v15;
  float v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  _BOOL4 v21;
  unsigned int PlaythroughPrediction;
  uint64_t NextPlaybackState;
  NSObject *v24;
  uint64_t v25;
  CMTime *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  NSObject *v35;
  const __CFArray *ValueAtIndex;
  const char *v37;
  const char *v38;
  NSObject *v39;
  unsigned int value;
  unsigned int v41;
  const char *v42;
  double v43;
  const char *Description;
  __CFDictionary *NotificationPayloadForProperties;
  NSObject *v46;
  unsigned int v47;
  unsigned int v48;
  const char *v49;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CMTime *v52;
  uint64_t v53;
  CMTime v54;
  os_log_type_t type;
  char v56;
  int v57;
  char v58;
  int v59;
  float v60;
  char v61;
  CMTime v62;
  const char *v63;
  __int16 v64;
  double v65;
  __int16 v66;
  int v67;
  __int16 v68;
  const char *v69;
  CMTime __dst[5];
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v61 = 0;
  v60 = a6;
  v59 = 0;
  v58 = 0;
  v57 = 0;
  v56 = 0;
  if (a6 != 0.0)
  {
    LOBYTE(__dst[0].value) = 0;
    FigCFDictionaryGetBooleanIfPresent();
  }
  v13 = 0;
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetInt32IfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  if ((*(_BYTE *)(a5 + 12) & 1) == 0)
    FigCFDictionaryGetCMTimeIfPresent();
  if ((*(_BYTE *)(a4 + 12) & 1) == 0)
    FigCFDictionaryGetCMTimeIfPresent();
  if (*(_BYTE *)DerivedStorage)
    return 0;
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
  v15 = *(float *)(DerivedStorage + 48);
  if (*(_DWORD *)(DerivedStorage + 52) == 4)
    v16 = *(float *)(DerivedStorage + 48);
  else
    v16 = 0.0;
  if (!*(_BYTE *)(DerivedStorage + 57) || (*(_BYTE *)(a4 + 12) & 1) != 0 || (*(_BYTE *)(a5 + 12) & 1) != 0)
    v13 = 2;
  v17 = v13;
  if (v15 != a6)
    playerfig_clearCoordinatedPlaybackSynchronizationTimebaseForItemsAfterItem((uint64_t)a1, 0);
  v52 = a3;
  v53 = a5;
  v18 = *(unsigned __int8 *)(DerivedStorage + 56);
  v19 = *(_DWORD *)(DerivedStorage + 52);
  v20 = *(_QWORD *)(DerivedStorage + 512);
  v21 = v20 != 0;
  PlaythroughPrediction = itemfig_getPlaythroughPrediction(v20);
  NextPlaybackState = playerfig_getNextPlaybackState((uint64_t)a1, a6, a2, v19, v15 != a6, v21, v18, v17, PlaythroughPrediction, &v59, (_BYTE *)(DerivedStorage + 56), (BOOL *)&v61, &v60);
  if ((_DWORD)NextPlaybackState)
  {
    v14 = NextPlaybackState;
    LODWORD(v54.value) = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
  }
  else
  {
    v14 = playerfig_enterPlaybackState((uint64_t)a1, v59);
    if ((_DWORD)v14)
    {
      LODWORD(v54.value) = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *(float *)(DerivedStorage + 48) = a6;
    v25 = CMBaseObjectGetDerivedStorage();
    v26 = (CMTime *)v53;
    if (a6 == 0.0)
      v27 = *(_DWORD *)(v25 + 68);
    else
      v27 = 0;
    if ((*(_BYTE *)(a4 + 12) & 1) != 0 || (*(_BYTE *)(v53 + 12) & 1) != 0)
      v61 = 1;
    v28 = *(_DWORD *)(v25 + 72);
    MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
    if (a6 != 0.0 && v15 == 0.0 && v27 < v28)
    {
      if (dword_1EE2A2AC8)
      {
        LODWORD(v54.value) = 0;
        type = OS_LOG_TYPE_DEFAULT;
        v35 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v26 = (CMTime *)v53;
      }
      playerfig_updateEffectiveResourceConservationLevel(a1);
    }
    ValueAtIndex = *(const __CFArray **)(DerivedStorage + 504);
    if (ValueAtIndex)
    {
      if (CFArrayGetCount(ValueAtIndex) < 1)
        ValueAtIndex = 0;
      else
        ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
    }
    if (*MEMORY[0x1E0CA1FC0] == 1)
    {
      if (ValueAtIndex)
        v37 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
      else
        v37 = "";
      strncpy((char *)__dst, v37, 8uLL);
      if (a1)
        v38 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
      else
        v38 = "";
      strncpy((char *)__dst, v38, 8uLL);
      kdebug_trace();
    }
    if (v61)
    {
      __dst[0] = *v52;
      v62 = *(CMTime *)a4;
      v54 = *v26;
      v14 = playerfig_setBossRateWithFade(a1, a2, __dst, &v62, &v54, v60, v16);
      if ((_DWORD)v14)
      {
        LODWORD(v54.value) = 0;
        type = OS_LOG_TYPE_DEFAULT;
        v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        value = v54.value;
        if (os_log_type_enabled(v39, type))
          v41 = value;
        else
          v41 = value & 0xFFFFFFFE;
        if (v41)
        {
          if (a1)
            v42 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
          else
            v42 = "";
          v43 = v60;
          Description = FigPlayerPlaybackStateGetDescription(*(_DWORD *)(DerivedStorage + 52));
          LODWORD(v62.value) = 136316418;
          *(CMTimeValue *)((char *)&v62.value + 4) = (CMTimeValue)"playerfig_setRateGuts";
          LOWORD(v62.flags) = 2048;
          *(_QWORD *)((char *)&v62.flags + 2) = a1;
          HIWORD(v62.epoch) = 2082;
          v63 = v42;
          v64 = 2048;
          v65 = v43;
          v66 = 1024;
          v67 = v14;
          v68 = 2082;
          v69 = Description;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    if (v15 != a6)
    {
      NotificationPayloadForProperties = playerfig_createNotificationPayloadForProperties(a1, 0, v29, v30, v31, v32, v33, v34, CFSTR("CurrentRate"), 0);
      FigCFDictionarySetInt32();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      if (NotificationPayloadForProperties)
        CFRelease(NotificationPayloadForProperties);
      playerfig_updateStartHostTimeEstimatesOfAllItems((uint64_t)a1);
    }
    if (a6 == 0.0 && v15 != 0.0 && v27 > v28)
    {
      if (dword_1EE2A2AC8)
      {
        LODWORD(v54.value) = 0;
        type = OS_LOG_TYPE_DEFAULT;
        v46 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v47 = v54.value;
        if (os_log_type_enabled(v46, type))
          v48 = v47;
        else
          v48 = v47 & 0xFFFFFFFE;
        if (v48)
        {
          if (a1)
            v49 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
          else
            v49 = "";
          LODWORD(v62.value) = 136315650;
          *(CMTimeValue *)((char *)&v62.value + 4) = (CMTimeValue)"playerfig_setRateGuts";
          LOWORD(v62.flags) = 2048;
          *(_QWORD *)((char *)&v62.flags + 2) = a1;
          HIWORD(v62.epoch) = 2082;
          v63 = v49;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      playerfig_updateEffectiveResourceConservationLevel(a1);
    }
  }
  return v14;
}

uint64_t playerfig_GetRate(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 48);
  return 0;
}

uint64_t ParseChildAtoms(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  unsigned int v10;
  uint64_t (**v11)(uint64_t, uint64_t);
  uint64_t result;
  int v13;
  uint64_t (**v14)(uint64_t, uint64_t);
  int v15;
  int v16;
  _BYTE *v17;
  _BYTE *v18;
  char v19;

  v10 = 0;
  v11 = (uint64_t (**)(uint64_t, uint64_t))(a4 + 8);
  while (1)
  {
    result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if ((_DWORD)result)
      return result;
    if (a3 >= 1)
    {
      v13 = 0;
      v14 = v11;
      while (*((_DWORD *)v14 - 2))
      {
        ++v13;
        v14 += 2;
        if (a3 == v13)
          goto LABEL_12;
      }
      v15 = 1 << v13;
      if ((*((_BYTE *)v14 - 4) & 1) != 0 && (v15 & v10) != 0)
      {
        MovieAtomReportChildAtomParsingFailureMessage(a1, 0, a2, (uint64_t)"Repeated non-repeatable atom");
        return FigSignalErrorAt();
      }
      v10 |= v15;
      result = (*v14)(a2, a5);
      if ((_DWORD)result == 1937010544)
      {
        result = 0;
        goto LABEL_17;
      }
      if ((_DWORD)result)
        return result;
    }
LABEL_12:
    LODWORD(result) = FigAtomStreamAdvanceToNextAtom();
    if ((_DWORD)result)
    {
      if ((_DWORD)result == -12890)
        result = 0;
      else
        result = result;
LABEL_17:
      if (a3 >= 1)
      {
        v16 = 0;
        v17 = (_BYTE *)(a4 + 4);
        v18 = (_BYTE *)(a4 + 4);
        do
        {
          v19 = *v18;
          v18 += 16;
          if ((v19 & 2) != 0 && ((v10 >> v16) & 1) == 0)
          {
            MovieAtomReportChildAtomParsingFailureMessage(a1, *((unsigned int *)v17 - 1), a2, (uint64_t)"Missing mandatory atom");
            result = FigSignalErrorAt();
          }
          ++v16;
          v17 = v18;
        }
        while (a3 != v16);
      }
      return result;
    }
  }
}

uint64_t GetFileTypeAtom()
{
  uint64_t CurrentAtomTypeAndDataLength;
  uint64_t v2;
  char *dataPointerOut;
  CMBlockBufferRef theBuffer;
  uint64_t v5;

  theBuffer = 0;
  v5 = 0;
  dataPointerOut = 0;
  CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!(_DWORD)CurrentAtomTypeAndDataLength)
    CurrentAtomTypeAndDataLength = FigSignalErrorAt();
  v2 = CurrentAtomTypeAndDataLength;
  if (theBuffer)
    CFRelease(theBuffer);
  return v2;
}

uint64_t FigReadCacheContainerReadBBuf(uint64_t a1, OpaqueCMBlockBuffer *a2, OpaqueCMBlockBuffer *a3, _QWORD *a4, CMBlockBufferRef *a5)
{
  return ReadBBufOrCopyBytes(a1, a2, a3, a4, a5, 0, 0);
}

uint64_t GetMovieAtom(_OWORD *a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[14];

  v3 = a1[5];
  v7[11] = a1[4];
  v7[12] = v3;
  v7[13] = a1[6];
  v4 = a1[1];
  v7[7] = *a1;
  v7[8] = v4;
  v5 = a1[3];
  v7[9] = a1[2];
  v7[10] = v5;
  LODWORD(result) = FigAtomStreamGetCurrentAtomGlobalOffset();
  if (!(_DWORD)result)
  {
    memset(v7, 0, 112);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a2 + 48);
    LODWORD(result) = FigAtomStreamAdvanceToNextAtom();
    if ((_DWORD)result == -12890
      || !(_DWORD)result && (LODWORD(result) = FigAtomStreamGetCurrentAtomTypeAndDataLength(), !(_DWORD)result))
    {
      LODWORD(result) = FigAtomStreamInitWithParent();
      if (!(_DWORD)result)
        LODWORD(result) = figMDRW_ParseChildAtoms((uint64_t)v7, 3, (uint64_t)&GetMovieAtom_atomDispatch, a2);
    }
  }
  if ((_DWORD)result)
    return result;
  else
    return 1937010544;
}

uint64_t playerasync_GetRate(const void *a1, _DWORD *a2)
{
  _DWORD *DerivedStorage;
  _DWORD *v5;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *i;
  unsigned int v12;
  BOOL v13;
  int v14;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, _DWORD *);
  uint64_t v18;

  v18 = 0;
  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v5 = DerivedStorage;
  *a2 = 0;
  if (*DerivedStorage)
    return FigSignalErrorAt();
  v7 = playerasync_createCommand(a1, 10, 0, &v18);
  v8 = (_DWORD *)v18;
  if ((_DWORD)v7)
    goto LABEL_18;
  *(_QWORD *)(v18 + 32) = a2;
  v9 = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(v9 + 104));
  if (!*(_BYTE *)(v9 + 6))
  {
    for (i = *(uint64_t **)(v9 + 112); i; i = (uint64_t *)*i)
    {
      v12 = *((_DWORD *)i + 6);
      v13 = v12 > 0x11;
      v14 = (1 << v12) & 0x28A00;
      if (!v13 && v14 != 0)
        goto LABEL_6;
    }
    MEMORY[0x19402EF04](*(_QWORD *)(v9 + 104));
    v16 = *((_QWORD *)v5 + 2);
    if (!v16)
    {
      MEMORY[0x19402EEEC](*((_QWORD *)v5 + 17));
      v10 = v5[2];
      MEMORY[0x19402EF04](*((_QWORD *)v5 + 17));
      goto LABEL_7;
    }
    v17 = *(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (!v17)
    {
      v10 = 4294954514;
      goto LABEL_7;
    }
    v7 = v17(v16, a2);
LABEL_18:
    v10 = v7;
    goto LABEL_7;
  }
LABEL_6:
  MEMORY[0x19402EF04](*(_QWORD *)(v9 + 104));
  playerasync_runSynchronousCommand((uint64_t)a1, v8);
  v10 = v8[7];
LABEL_7:
  fpa_releaseCommand(v8);
  return v10;
}

uint64_t CheckAtomVersionIsZero()
{
  return FigAtomStreamGetCurrentAtomVersionAndFlags();
}

uint64_t CheckAtomVersionIsZero_0()
{
  return FigAtomStreamGetCurrentAtomVersionAndFlags();
}

uint64_t DoPostParsingSampleTableCommon(_QWORD *a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int j;
  int v8;
  const char *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int SampleToChunkFirstChunk;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int SampleToChunkSamplesPerChunk;
  uint64_t result;
  char v25;
  char v26;
  int v27;
  signed int v28;
  int v29;
  int v30;
  int v31;
  int SyncSampleNumber;
  signed int v33;
  char v34;
  int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int i;
  int CompositionOffsetDisplayOffset;
  const char *v45;

  if (!a2)
    return 0;
  if (*(int *)(a2 + 288) < 1)
  {
LABEL_67:
    v37 = *(_QWORD *)(a2 + 728);
    if (v37 && *(_QWORD *)(v37 + 56))
      AssureTrackFragmentFixups(a2);
    if (MovieSampleTableHaveCompositionShiftLeastInfo(a2))
    {
      *(_DWORD *)(a2 + 112) = MovieSampleTableGetMaxDecodeToDisplay(a2);
      *(_DWORD *)(a2 + 116) = MovieSampleTableGetMinDecodeToDisplay(a2);
    }
    else if (MovieSampleTableHaveCompositionOffsetTable(a2))
    {
      v41 = MovieSampleTableNumCompositionOffsetEntries(a2);
      if (v41 >= 1)
      {
        v42 = v41;
        for (i = 0; i != v42; ++i)
        {
          CompositionOffsetDisplayOffset = MovieSampleTableGetCompositionOffsetDisplayOffset(a2, i);
          if (*(_DWORD *)(a2 + 112) < CompositionOffsetDisplayOffset)
            *(_DWORD *)(a2 + 112) = CompositionOffsetDisplayOffset;
          if (*(_DWORD *)(a2 + 116) > CompositionOffsetDisplayOffset)
            *(_DWORD *)(a2 + 116) = CompositionOffsetDisplayOffset;
        }
      }
    }
    v38 = *(_QWORD *)(a2 + 728);
    if (v38 && *(_QWORD *)(v38 + 56) && *(_BYTE *)(v38 + 13))
    {
      v39 = *(_DWORD *)(v38 + 32);
      if (*(_DWORD *)(a2 + 112) < v39)
        *(_DWORD *)(a2 + 112) = v39;
      v40 = *(_DWORD *)(v38 + 36);
      if (*(_DWORD *)(a2 + 116) > v40)
      {
        result = 0;
        *(_DWORD *)(a2 + 116) = v40;
        return result;
      }
    }
    return 0;
  }
  if (!*(_QWORD *)(a2 + 56))
  {
    v45 = "'stsd' atom missing";
LABEL_97:
    _MovieAtomReportParsingMessage(a1, a2, 0, (uint64_t)v45, 2);
    return FigSignalErrorAt();
  }
  if (!MovieSampleTableHaveTimeToSampleTable(a2))
  {
    v45 = "'stts' atom missing";
    goto LABEL_97;
  }
  if ((int)MovieSampleTableNumTimeToSampleEntries(a2) <= 0)
  {
    v45 = "'stts' atom has zero entries";
    goto LABEL_97;
  }
  if (!MovieSampleTableHaveSampleToChunkTable(a2))
  {
    v45 = "'stsc' atom missing";
    goto LABEL_97;
  }
  if ((int)MovieSampleTableNumSampleToChunkEntries(a2) <= 0)
  {
    v45 = "'stsc' atom has zero entries";
    goto LABEL_97;
  }
  if (!MovieSampleTableHaveChunkOffsetTable(a2))
  {
    v45 = "'stco'/'co64' atom missing";
    goto LABEL_97;
  }
  if ((int)MovieSampleTableNumChunkTableEntries(a2) <= 0)
  {
    v45 = "Chunk offset atom has zero entries";
    goto LABEL_97;
  }
  if (MovieSampleTableHaveTimeToSampleTable(a2) && (v4 = MovieSampleTableNumTimeToSampleEntries(a2), v4 >= 1))
  {
    v5 = v4;
    v6 = 0;
    for (j = 0; j != v5; ++j)
      v6 += MovieSampleTableGetSampleCountAtIndex(a2, j);
  }
  else
  {
    v6 = 0;
  }
  v8 = *(_DWORD *)(a2 + 288);
  if (v6 == v8)
  {
LABEL_39:
    v26 = 0;
    v25 = 1;
    goto LABEL_40;
  }
  if (v6 > v8)
  {
    v9 = "Inconsistent sample count - 'stsz' is under-reporting";
    goto LABEL_38;
  }
  if (!MovieSampleTableHaveSampleToChunkTable(a2)
    || (v10 = MovieSampleTableNumSampleToChunkEntries(a2), v11 = v10 - 1, v10 < 1))
  {
LABEL_33:
    v17 = 0;
    goto LABEL_34;
  }
  if (v10 != 1)
  {
    v12 = v10;
    v13 = 0;
    v14 = 1;
    while (1)
    {
      SampleToChunkFirstChunk = MovieSampleTableGetSampleToChunkFirstChunk(a2, v14);
      v16 = MovieSampleTableGetSampleToChunkFirstChunk(a2, v14 - 1);
      v17 = 0;
      if (SampleToChunkFirstChunk < 0)
        goto LABEL_34;
      if (v16 < 0)
        goto LABEL_34;
      v18 = __OFSUB__(SampleToChunkFirstChunk, v16);
      v19 = SampleToChunkFirstChunk - v16;
      if (v19 < 0 != v18)
        goto LABEL_34;
      v13 += MovieSampleTableGetSampleToChunkSamplesPerChunk(a2, v14++ - 1) * v19;
      if (v12 == v14)
        goto LABEL_28;
    }
  }
  v11 = 0;
  v13 = 0;
LABEL_28:
  v20 = MovieSampleTableNumChunkTableEntries(a2);
  v21 = MovieSampleTableGetSampleToChunkFirstChunk(a2, v11);
  v17 = 0;
  if ((v20 & 0x80000000) == 0 && (v21 & 0x80000000) == 0)
  {
    v18 = __OFSUB__(v20, v21);
    v22 = v20 - v21;
    if (v22 < 0 == v18)
    {
      if (v22 >= 0)
      {
        SampleToChunkSamplesPerChunk = MovieSampleTableGetSampleToChunkSamplesPerChunk(a2, v11);
        v17 = SampleToChunkSamplesPerChunk + SampleToChunkSamplesPerChunk * v22 + v13;
        goto LABEL_34;
      }
      goto LABEL_33;
    }
  }
LABEL_34:
  if (v17 != v6)
  {
    v9 = "Inconsistent sample count - 'stts' / 'stco' / 'stsz'";
LABEL_38:
    _MovieAtomReportParsingMessage(a1, a2, 0, (uint64_t)v9, 2);
    result = FigSignalErrorAt();
    if ((_DWORD)result)
      return result;
    goto LABEL_39;
  }
  _MovieAtomReportParsingMessage(a1, a2, 0, (uint64_t)"Overriding 'stsz' sample count with calculated value from 'stts'/'stco'", 2);
  result = (uint64_t)MovieTrackReviseParsedSampleCount(a2, v6);
  if ((_DWORD)result)
    return result;
  v25 = 0;
  v26 = 1;
LABEL_40:
  v27 = *(_DWORD *)(a2 + 288);
  if (MovieSampleTableHaveSampleDependencyTable(a2))
  {
    if (!*(_BYTE *)(a2 + 736) && (int)MovieSampleTableNumSampleDependencyEntries(a2) < v27)
      _MovieAtomReportParsingMessage(a1, a2, 0, (uint64_t)"Number of sample dependency entries too small vs. track sample count", 2);
    if ((int)MovieSampleTableNumSampleDependencyEntries(a2) > v27)
    {
      result = MovieTrackReviseSampleDependencyTable(a2, v27);
      if ((_DWORD)result)
        return result;
    }
  }
  v28 = *(_DWORD *)(a2 + 288);
  if (MovieSampleTableHaveSyncSampleTable(a2))
  {
    if ((v25 & 1) != 0)
    {
      v29 = MovieSampleTableNumSyncSampleEntries(a2);
      if (v29 >= 1)
      {
        v30 = v29;
        v31 = 0;
        while (1)
        {
          SyncSampleNumber = MovieSampleTableGetSyncSampleNumber(a2, v31);
          if (SyncSampleNumber < 1 || SyncSampleNumber > v28)
            break;
          if (v30 == ++v31)
            goto LABEL_57;
        }
        _MovieAtomReportParsingMessage(a1, a2, 0, (uint64_t)"Sync sample table has an entry which is out of the range", 2);
        result = FigSignalErrorAt();
        if ((_DWORD)result)
          return result;
      }
    }
    else
    {
      result = MovieTrackReviseSyncSampleTable(a2, v28);
      if ((_DWORD)result)
        return result;
    }
  }
LABEL_57:
  v33 = *(_DWORD *)(a2 + 288);
  if (MovieSampleTableHavePartialSyncSampleTable(a2))
    v34 = v26 ^ 1;
  else
    v34 = 1;
  if ((v34 & 1) != 0 || (result = MovieTrackRevisePartialSyncSampleTable(a2, v33), !(_DWORD)result))
  {
    v35 = *(_DWORD *)(a2 + 288);
    v36 = MovieSampleTableHaveCompositionOffsetTable(a2) ? v26 ^ 1 : 1;
    if ((v36 & 1) != 0)
      goto LABEL_67;
    result = MovieTrackReviseCompositionOffsetTable(a2, v35);
    if (!(_DWORD)result)
      goto LABEL_67;
  }
  return result;
}

uint64_t ConvertSampleDescriptionsToFormatDescriptions(_QWORD *a1, CFArrayRef *cf)
{
  const __CFAllocator *v4;
  const __CFArray *v5;
  CFIndex Count;
  signed int v7;
  int v8;
  CFIndex v9;
  const __CFAllocator *v10;
  OpaqueCMBlockBuffer *ValueAtIndex;
  const __CFAllocator *v12;
  OpaqueCMBlockBuffer *v13;
  CMMediaType v14;
  const __CFDictionary *v15;
  uint64_t v16;
  uint64_t v17;
  __CFArray *Mutable;
  CFArrayRef v19;
  const char *v21;
  void *values;
  unsigned int destination;
  CMMetadataFormatDescriptionRef formatDescriptionOut;

  v4 = CFGetAllocator(cf);
  v5 = cf[5];
  if (v5)
    Count = CFArrayGetCount(v5);
  else
    Count = 0;
  if (!cf[7])
  {
    v21 = "Track has no sample descriptions";
    goto LABEL_58;
  }
  v7 = 1986618469;
  v8 = *((_DWORD *)cf + 6);
  if (v8 <= 1986618468)
  {
    if (v8 == 1885954932 || v8 == 1635088502)
      goto LABEL_12;
    if (v8)
      goto LABEL_11;
    v21 = "MediaType is zero";
LABEL_58:
    MovieInformationReportParsingFailureMessage(a1, (uint64_t)cf, (uint64_t)v21, 2);
LABEL_59:
    v16 = FigSignalErrorAt();
LABEL_60:
    MovieInformationReportParsingFailureMessage(a1, (uint64_t)cf, (uint64_t)"Error when generating format descriptions", 7);
    ReleaseSampleDescriptionInfoArray((uint64_t)cf);
    return v16;
  }
  if (v8 != 1986618469)
LABEL_11:
    v7 = *((_DWORD *)cf + 6);
LABEL_12:
  if (Count >= 1)
  {
    v9 = 0;
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    do
    {
      ValueAtIndex = (OpaqueCMBlockBuffer *)CFArrayGetValueAtIndex(cf[5], v9);
      formatDescriptionOut = 0;
      if (v7 > 1935893869)
      {
        if (v7 <= 1952807027)
        {
          if (v7 == 1935893870)
          {
            v17 = CMSceneFormatDescriptionCreateFromBigEndianSceneDescriptionBlockBuffer();
            goto LABEL_44;
          }
          if (v7 == 1936684398)
          {
            v17 = FigAudioFormatDescriptionCreateFromBigEndianSoundDescriptionBlockBufferWithReporter();
            goto LABEL_44;
          }
        }
        else
        {
          switch(v7)
          {
            case 1952807028:
              v12 = v4;
              v13 = ValueAtIndex;
              v14 = 1952807028;
              goto LABEL_34;
            case 1953325924:
              v17 = CMTimeCodeFormatDescriptionCreateFromBigEndianTimeCodeDescriptionBlockBuffer(v4, ValueAtIndex, 0, &formatDescriptionOut);
              goto LABEL_44;
            case 1986618469:
              CFStringGetSystemEncoding();
              v17 = FigVideoFormatDescriptionCreateFromBigEndianImageDescriptionBlockBufferWithReporter();
LABEL_44:
              v16 = v17;
              goto LABEL_45;
          }
        }
      }
      else if (v7 <= 1835365472)
      {
        if (v7 == 1668047728)
        {
          v17 = CMClosedCaptionFormatDescriptionCreateFromBigEndianClosedCaptionDescriptionBlockBuffer(v4, ValueAtIndex, 0, &formatDescriptionOut);
          goto LABEL_44;
        }
        if (v7 == 1751216244)
        {
          v17 = CMHapticFormatDescriptionCreateFromBigEndianHapticDescriptionBlockBuffer();
          goto LABEL_44;
        }
      }
      else
      {
        switch(v7)
        {
          case 1835365473:
            v17 = CMMetadataFormatDescriptionCreateFromBigEndianMetadataDescriptionBlockBuffer(v4, ValueAtIndex, 0, &formatDescriptionOut);
            goto LABEL_44;
          case 1885564004:
            v17 = CMPointCloudFormatDescriptionCreateFromBigEndianPointCloudDescriptionBlockBuffer();
            goto LABEL_44;
          case 1935832172:
            v12 = v4;
            v13 = ValueAtIndex;
            v14 = 1935832172;
LABEL_34:
            v17 = CMTextFormatDescriptionCreateFromBigEndianTextDescriptionBlockBuffer(v12, v13, 0, v14, &formatDescriptionOut);
            goto LABEL_44;
        }
      }
      destination = 0;
      values = 0;
      v15 = 0;
      if (!FigCreateCFDataWithBlockBufferNoCopy())
      {
        v15 = CFDictionaryCreate(v4, MEMORY[0x1E0CA2278], (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (values)
          CFRelease(values);
      }
      CMBlockBufferCopyDataBytes(ValueAtIndex, 4uLL, 4uLL, &destination);
      v16 = CMFormatDescriptionCreate(v4, v7, bswap32(destination), v15, &formatDescriptionOut);
      if (v15)
        CFRelease(v15);
LABEL_45:
      if ((_DWORD)v16)
        goto LABEL_60;
      Mutable = cf[6];
      if (!Mutable)
      {
        Mutable = CFArrayCreateMutable(v10, 0, MEMORY[0x1E0C9B378]);
        cf[6] = Mutable;
        if (!Mutable)
          goto LABEL_59;
      }
      CFArrayAppendValue(Mutable, formatDescriptionOut);
      if (formatDescriptionOut)
        CFRelease(formatDescriptionOut);
      ++v9;
    }
    while (Count != v9);
  }
  v19 = cf[5];
  if (!v19)
    return 0;
  CFRelease(v19);
  v16 = 0;
  cf[5] = 0;
  return v16;
}

uint64_t FigTrackReaderGetClassID()
{
  MEMORY[0x19402F294](&FigTrackReaderGetClassID_sRegisterFigTrackReaderBaseTypeOnce, RegisterFigTrackReaderBaseType);
  return sFigTrackReaderClassID;
}

uint64_t RegisterFigTrackReaderBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t GetMovieUserDataAtom(_OWORD *a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[14];

  v3 = a1[5];
  v7[11] = a1[4];
  v7[12] = v3;
  v7[13] = a1[6];
  v4 = a1[1];
  v7[7] = *a1;
  v7[8] = v4;
  v5 = a1[3];
  v7[9] = a1[2];
  v7[10] = v5;
  result = FigAtomStreamGetCurrentAtomGlobalOffset();
  if (!(_DWORD)result)
  {
    memset(v7, 0, 112);
    result = FigAtomStreamAdvanceToNextAtom();
    if ((_DWORD)result == -12890
      || !(_DWORD)result && (result = FigAtomStreamGetCurrentAtomTypeAndDataLength(), !(_DWORD)result))
    {
      LODWORD(result) = FigAtomStreamInitWithParent();
      if (!(_DWORD)result)
        LODWORD(result) = figMDRW_ParseChildAtoms((uint64_t)v7, 1, (uint64_t)&GetMovieUserDataAtom_atomDispatch, a2);
      if ((_DWORD)result == -12893)
        return 0;
      else
        return result;
    }
  }
  return result;
}

uint64_t GetiTunesMetaDataAtom()
{
  return FigAtomStreamGetCurrentAtomGlobalOffset();
}

uint64_t FigCRABSGetClassID()
{
  MEMORY[0x19402F294](&FigCRABSGetClassID_sRegisterFigCRABSOnce, RegisterFigCRABS);
  return sFigCRABSClassID;
}

uint64_t RegisterFigCRABS()
{
  CMByteStreamGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FPSupport_BuildAlternateTrackGroups(uint64_t a1, __CFDictionary **a2)
{
  const __CFAllocator *v4;
  __CFDictionary *Mutable;
  uint64_t FigBaseObject;
  void (*v7)(uint64_t, const __CFString *, const __CFAllocator *, CFArrayRef *);
  CFIndex Count;
  CFIndex v9;
  CFIndex v10;
  const void *ValueAtIndex;
  const void *v12;
  CFTypeID TypeID;
  CFIndex v14;
  CFIndex v15;
  CFIndex v16;
  uint64_t v17;
  int v18;
  const void *v19;
  const void *v20;
  CFTypeID v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, CFTypeRef *, uint64_t *);
  uint64_t v24;
  CFTypeRef v25;
  int isTrackEnabled;
  __CFString **v27;
  __CFString *v28;
  __CFArray *v29;
  CFIndex v30;
  const __CFNumber *v31;
  const __CFNumber *v32;
  CFTypeID v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t v36;
  unsigned int (*v37)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD);
  unsigned int (*v38)(uint64_t, _QWORD, uint64_t, CFTypeRef *, CFTypeRef *);
  __CFString *key;
  __CFDictionary **v41;
  uint64_t v42;
  const __CFAllocator *allocator;
  int v44;
  CFIndex v45;
  uint64_t valuePtr;
  CFTypeRef v47;
  CFArrayRef theArray;
  CFTypeRef cf;

  v47 = 0;
  theArray = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v24 = FigSignalErrorAt();
LABEL_60:
    v29 = 0;
    goto LABEL_61;
  }
  FigBaseObject = FigFormatReaderGetFigBaseObject(a1);
  v7 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
  if (!v7
    || (v7(FigBaseObject, CFSTR("AlternateGroupArray"), v4, &theArray), !theArray)
    || (Count = CFArrayGetCount(theArray), Count < 1))
  {
LABEL_54:
    LODWORD(cf) = 0;
    v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 64);
    if (!v37 || v37(a1, 1, 1935832172, 0, 0))
    {
      v38 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 64);
      if (v38)
      {
        if (!v38(a1, 0, 1935832172, &v47, &cf))
        {
          v29 = CFArrayCreateMutable(v4, 1, MEMORY[0x1E0C9B378]);
          if (!v29)
            goto LABEL_75;
          v24 = fpSupport_addTrackInfoToArray((uint64_t)v47, (int)cf, 1935832172, v29);
          if ((_DWORD)v24)
            goto LABEL_61;
          CFDictionarySetValue(Mutable, CFSTR("Subtitle"), v29);
          CFRelease(v29);
          if (v47)
          {
            CFRelease(v47);
            v47 = 0;
          }
        }
      }
    }
    goto LABEL_58;
  }
  v9 = Count;
  v42 = 0;
  allocator = v4;
  v41 = a2;
  v10 = 0;
  v44 = 0;
  v45 = Count;
  while (2)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, v10);
    if (!ValueAtIndex)
      goto LABEL_52;
    v12 = ValueAtIndex;
    TypeID = CFArrayGetTypeID();
    if (TypeID != CFGetTypeID(v12))
      goto LABEL_52;
    v14 = CFArrayGetCount((CFArrayRef)v12);
    if (v14 < 1)
      goto LABEL_52;
    v15 = v14;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    do
    {
      v19 = CFArrayGetValueAtIndex((CFArrayRef)v12, v16);
      if (!v19)
        goto LABEL_26;
      v20 = v19;
      v21 = CFNumberGetTypeID();
      if (v21 != CFGetTypeID(v20))
        goto LABEL_26;
      valuePtr = 0;
      CFNumberGetValue((CFNumberRef)v20, kCFNumberSInt32Type, (char *)&valuePtr + 4);
      v22 = HIDWORD(valuePtr);
      cf = 0;
      v23 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 56);
      if (!v23)
      {
        v24 = 4294954514;
        goto LABEL_60;
      }
      v24 = v23(a1, v22, &cf, &valuePtr);
      v25 = cf;
      if ((_DWORD)v24)
      {
        isTrackEnabled = 0;
        if (!cf)
          goto LABEL_16;
LABEL_15:
        CFRelease(v25);
        goto LABEL_16;
      }
      isTrackEnabled = fpSupport_isTrackEnabled((uint64_t)cf);
      v25 = cf;
      if (cf)
        goto LABEL_15;
LABEL_16:
      if ((_DWORD)v24)
        goto LABEL_60;
      if (v18)
      {
        if (v18 != (_DWORD)valuePtr)
          goto LABEL_51;
        if (!isTrackEnabled)
          goto LABEL_26;
      }
      else
      {
        v18 = valuePtr;
        if (!isTrackEnabled)
          goto LABEL_26;
      }
      if (v17 > 0)
        goto LABEL_51;
      ++v17;
LABEL_26:
      ++v16;
    }
    while (v15 != v16);
    if (v17 < 1)
      goto LABEL_51;
    if (v18 == 1835365473)
    {
      if (!(_DWORD)v42)
      {
        LODWORD(v42) = 1;
        v27 = kFigPlaybackItemAlternateType_Metadata;
        goto LABEL_40;
      }
      LODWORD(v42) = 1;
      goto LABEL_51;
    }
    if (v18 == 1935832172)
    {
      if (!v44)
      {
        v44 = 1;
        v27 = kFigPlaybackItemAlternateType_Subtitle;
        goto LABEL_40;
      }
      v44 = 1;
LABEL_51:
      v9 = v45;
LABEL_52:
      if (++v10 == v9)
      {
        a2 = v41;
        v4 = allocator;
        if (!v44)
          goto LABEL_54;
LABEL_58:
        v24 = 0;
        v29 = 0;
        *a2 = Mutable;
        Mutable = 0;
        goto LABEL_61;
      }
      continue;
    }
    break;
  }
  if (v18 != 1936684398)
    goto LABEL_51;
  if (HIDWORD(v42))
  {
    HIDWORD(v42) = 1;
    goto LABEL_51;
  }
  HIDWORD(v42) = 1;
  v27 = kFigPlaybackItemAlternateType_Audio;
LABEL_40:
  v28 = *v27;
  v29 = CFArrayCreateMutable(allocator, v15, MEMORY[0x1E0C9B378]);
  if (v29)
  {
    key = v28;
    v30 = 0;
    while (1)
    {
      v31 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)v12, v30);
      if (v31)
      {
        v32 = v31;
        v33 = CFNumberGetTypeID();
        if (v33 == CFGetTypeID(v32))
        {
          LODWORD(cf) = 0;
          CFNumberGetValue(v32, kCFNumberSInt32Type, &cf);
          v34 = cf;
          v35 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 56);
          if (!v35)
          {
            v24 = 4294954514;
            goto LABEL_61;
          }
          v36 = v35(a1, v34, &v47, 0);
          if ((_DWORD)v36)
            goto LABEL_76;
          v36 = fpSupport_addTrackInfoToArray((uint64_t)v47, (int)cf, v18, v29);
          if ((_DWORD)v36)
            goto LABEL_76;
          if (v47)
          {
            CFRelease(v47);
            v47 = 0;
          }
        }
      }
      if (v15 == ++v30)
      {
        CFDictionarySetValue(Mutable, key, v29);
        CFRelease(v29);
        goto LABEL_51;
      }
    }
  }
LABEL_75:
  v36 = FigSignalErrorAt();
LABEL_76:
  v24 = v36;
LABEL_61:
  if (v47)
    CFRelease(v47);
  if (theArray)
    CFRelease(theArray);
  if (Mutable)
    CFRelease(Mutable);
  if (v29)
    CFRelease(v29);
  return v24;
}

uint64_t FPSupport_GetDefaultTrackIDForMediaType(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t, CFTypeRef *, int *);
  uint64_t v9;
  CFTypeRef v10;
  CMAudioFormatDescriptionRef v11;
  signed int MediaSubType;
  int v13;
  CFTypeRef v14;
  unsigned int (*v15)(uint64_t, uint64_t, uint64_t, CFTypeRef *, int *);
  uint64_t v16;
  void (*v17)(CFTypeRef, uint64_t, _QWORD);
  const void *v19;
  int v20;
  char v21;
  int v22;
  CFTypeRef v23;
  CFTypeRef cf;
  CMAudioFormatDescriptionRef desc;

  v23 = 0;
  cf = 0;
  v22 = 0;
  v21 = 0;
  v20 = 0;
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *, int *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 64);
  if (!v8)
  {
    v14 = 0;
    goto LABEL_29;
  }
  v9 = 0;
  while (1)
  {
    if (v8(a1, v9, a2, &cf, &v20))
    {
LABEL_27:
      v14 = v23;
      goto LABEL_29;
    }
    if (!fpSupport_isTrackEnabled((uint64_t)cf))
      goto LABEL_24;
    if ((_DWORD)a2 != 1936684398)
      break;
    v10 = cf;
    desc = 0;
    fpSupport_copyFormatDescription((uint64_t)cf, &desc);
    v11 = desc;
    if (desc)
    {
      if (CMAudioFormatDescriptionGetRichestDecodableFormat(desc))
        goto LABEL_20;
      goto LABEL_23;
    }
LABEL_24:
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    ++v9;
    v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *, int *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 64);
    if (!v8)
      goto LABEL_27;
  }
  if ((_DWORD)a2 == 1952807028)
  {
    v10 = cf;
    desc = 0;
    fpSupport_copyFormatDescription((uint64_t)cf, &desc);
    v11 = desc;
    if (desc)
    {
      MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
      if (MediaSubType > 1937142899)
      {
        if (MediaSubType != 1937142900 && MediaSubType != 2021028980)
        {
          v13 = 2004251764;
          goto LABEL_19;
        }
        goto LABEL_20;
      }
      if (MediaSubType == 1634301044)
        goto LABEL_20;
      v13 = 1937010800;
LABEL_19:
      if (MediaSubType == v13)
      {
LABEL_20:
        if (!v23)
        {
          v23 = v10;
          if (v10)
            CFRetain(v10);
        }
      }
LABEL_23:
      CFRelease(v11);
      goto LABEL_24;
    }
    goto LABEL_24;
  }
  if ((_DWORD)a2 == 1986618469)
  {
    fpSupport_pickPreferredVideoTrack(cf, &v23, &v22, &v21, a4);
    goto LABEL_24;
  }
  v19 = v23;
  v14 = cf;
  v23 = cf;
  if (cf)
    CFRetain(cf);
  if (v19)
    CFRelease(v19);
LABEL_29:
  if ((_DWORD)a2 != 1986618469 || v14)
  {
LABEL_40:
    if (v14)
    {
      v17 = *(void (**)(CFTypeRef, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v17)
        v17(v14, a3, 0);
      CFRelease(v14);
    }
  }
  else
  {
    v15 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 64);
    if (v15)
    {
      v16 = 0;
      do
      {
        if (v15(a1, v16, 1635088502, &cf, &v20))
          break;
        if (fpSupport_isTrackEnabled((uint64_t)cf))
          fpSupport_pickPreferredVideoTrack(cf, &v23, &v22, &v21, a4);
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        ++v16;
        v15 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 64);
      }
      while (v15);
      v14 = v23;
      goto LABEL_40;
    }
  }
  if (cf)
    CFRelease(cf);
  return 0;
}

uint64_t fpSupport_isTrackEnabled(uint64_t a1)
{
  uint64_t FigBaseObject;
  void (*v2)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v3;
  CFTypeRef cf1;

  cf1 = 0;
  FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  v2 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (!v2)
    return 1;
  v2(FigBaseObject, CFSTR("TrackEnabled"), *MEMORY[0x1E0C9AE00], &cf1);
  if (!cf1)
    return 1;
  v3 = CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E0C9AE50]);
  CFRelease(cf1);
  return v3;
}

uint64_t FPSupport_ChooseTrackIDsUsingPreferredLanguageLists(const void *a1, const __CFDictionary *a2, const void *a3, _DWORD *a4)
{
  CFTypeID TypeID;
  const void *Value;
  const void *v10;
  const __CFArray *v11;
  CFTypeID v12;
  CFTypeID v13;
  CFTypeID v14;
  CFIndex v15;
  const void *ValueAtIndex;
  const void *v17;
  CFTypeID v18;
  CFIndex v19;
  CFIndex v20;
  CFIndex v21;
  const __CFDictionary *v22;
  const __CFDictionary *v23;
  CFTypeID v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  CFTypeID v29;
  CFIndex Count;
  CFTypeRef cf2;
  int valuePtr;

  if (a3 && a4)
  {
    if (!a1)
      return 0;
    TypeID = CFDictionaryGetTypeID();
    if (TypeID != CFGetTypeID(a1))
      return 0;
    Value = CFDictionaryGetValue((CFDictionaryRef)a1, a3);
    v10 = Value;
    if (a2)
    {
      v11 = (const __CFArray *)CFDictionaryGetValue(a2, a3);
      if (!v10)
        return 0;
    }
    else
    {
      v11 = 0;
      if (!Value)
        return 0;
    }
    v12 = CFArrayGetTypeID();
    v13 = CFGetTypeID(v10);
    if (v11)
    {
      if (v12 == v13)
      {
        v14 = CFArrayGetTypeID();
        if (v14 == CFGetTypeID(v11))
        {
          Count = CFArrayGetCount(v11);
          if (Count >= 1)
          {
            v15 = 0;
            cf2 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
            while (1)
            {
              ValueAtIndex = CFArrayGetValueAtIndex(v11, v15);
              if (ValueAtIndex)
              {
                v17 = ValueAtIndex;
                v18 = CFStringGetTypeID();
                if (v18 == CFGetTypeID(v17))
                {
                  v19 = CFArrayGetCount((CFArrayRef)v10);
                  if (v19 >= 1)
                    break;
                }
              }
LABEL_27:
              if (++v15 == Count)
                return 0;
            }
            v20 = v19;
            v21 = 0;
            while (1)
            {
              v22 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v10, v21);
              if (v22)
              {
                v23 = v22;
                v24 = CFDictionaryGetTypeID();
                if (v24 == CFGetTypeID(v23))
                {
                  v25 = CFDictionaryGetValue(v23, CFSTR("ExcludeFromAutoSelection"));
                  if (!v25 || !CFEqual(v25, cf2))
                  {
                    v26 = CFDictionaryGetValue(v23, CFSTR("Language"));
                    if (v26)
                    {
                      if (CFEqual(v26, v17))
                      {
                        v27 = CFDictionaryGetValue(v23, CFSTR("TrackID"));
                        if (v27)
                        {
                          v28 = v27;
                          v29 = CFNumberGetTypeID();
                          if (v29 == CFGetTypeID(v28))
                            break;
                        }
                      }
                    }
                  }
                }
              }
              if (v20 == ++v21)
                goto LABEL_27;
            }
            valuePtr = 0;
            CFNumberGetValue((CFNumberRef)v28, kCFNumberSInt32Type, &valuePtr);
            *a4 = valuePtr;
          }
        }
      }
    }
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t fcSupport_GetListOfChapterTrackIDsForMediaType(int a1, int a2, uint64_t a3, uint64_t *a4, int **a5, unsigned int *a6)
{
  uint64_t FigBaseObject;
  uint64_t (*v13)(uint64_t, const __CFString *, _QWORD, CFDictionaryRef *);
  uint64_t v14;
  BOOL v15;
  CFIndex Count;
  unsigned int v17;
  int *v18;
  uint64_t v19;
  CFIndex v21;
  CFIndex i;
  const __CFNumber *ValueAtIndex;
  uint64_t v24;
  unsigned int (*v25)(uint64_t, uint64_t, _QWORD, int *);
  uint64_t v27;
  _BOOL4 v29;
  uint64_t v30;
  const __CFNumber *v31;
  int **v32;
  int v33;
  unsigned int v34;
  Boolean v35;
  Boolean v36;
  unsigned int valuePtr;
  int v38;
  void *value;
  CFDictionaryRef theDict;

  value = 0;
  theDict = 0;
  FigBaseObject = FigFormatReaderGetFigBaseObject(a3);
  v13 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
  if (!v13)
  {
    v17 = 0;
    v18 = 0;
    v14 = 4294954514;
    goto LABEL_11;
  }
  v14 = v13(FigBaseObject, CFSTR("TrackReferenceDictionary"), *MEMORY[0x1E0C9AE00], &theDict);
  if ((_DWORD)v14)
    v15 = 1;
  else
    v15 = theDict == 0;
  if (v15)
  {
LABEL_9:
    v17 = 0;
    v18 = 0;
LABEL_11:
    free(v18);
    v19 = 0;
    v18 = 0;
    goto LABEL_12;
  }
  if (!CFDictionaryGetValueIfPresent(theDict, CFSTR("chap"), (const void **)&value)
    || (Count = CFArrayGetCount((CFArrayRef)value), Count < 2))
  {
    v14 = 0;
    goto LABEL_9;
  }
  v21 = Count;
  v33 = a2;
  v32 = a5;
  v18 = (int *)malloc_type_malloc((2 * Count) & 0xFFFFFFFFFFFFFFFCLL, 0x100004052888210uLL);
  if (!v18)
  {
    v14 = FigSignalErrorAt();
    v17 = 0;
    goto LABEL_11;
  }
  v17 = 0;
  v19 = 0;
  for (i = 1; i < v21; i += 2)
  {
    v38 = 0;
    ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)value, i);
    if (ValueAtIndex)
    {
      valuePtr = 0;
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
      v24 = valuePtr;
      v25 = *(unsigned int (**)(uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 56);
      if (v25)
      {
        if (!v25(a3, v24, 0, &v38) && v38 == a1)
        {
          if (v19 < 1)
          {
LABEL_39:
            v36 = 0;
            fcSupport_getTrackMediaTypeAndEnabled(a3, valuePtr, &v36);
            v29 = v33 == 1 && v36 != 0;
            if (v33 == 2 || v29)
            {
              v30 = v19 + 1;
              v18[v19] = valuePtr;
              if (a6 && !v17)
              {
                v31 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)value, i - 1);
                if (v31)
                {
                  v35 = 0;
                  v34 = 0;
                  CFNumberGetValue(v31, kCFNumberSInt32Type, &v34);
                  fcSupport_getTrackMediaTypeAndEnabled(a3, v34, &v35);
                  if (v35)
                    v17 = valuePtr;
                  else
                    v17 = 0;
                }
                else
                {
                  v17 = 0;
                }
              }
            }
            else
            {
              v30 = v19;
            }
            v19 = v30;
          }
          else
          {
            v27 = 0;
            while (valuePtr != v18[v27])
            {
              if (v19 == ++v27)
                goto LABEL_39;
            }
          }
        }
      }
    }
  }
  v14 = 0;
  a5 = v32;
  if (!v19)
    goto LABEL_11;
LABEL_12:
  if (theDict)
    CFRelease(theDict);
  if (a6)
  {
    if (v19 >= 1 && !v17 && v18)
      v17 = *v18;
    *a6 = v17;
  }
  if (a4)
    *a4 = v19;
  if (a5)
    *a5 = v18;
  else
    free(v18);
  return v14;
}

uint64_t FCSupport_GetListOfChapterImageTrackIDs(uint64_t a1, uint64_t *a2, int **a3, unsigned int *a4)
{
  return fcSupport_GetListOfChapterTrackIDsForMediaType(1986618469, 2, a1, a2, a3, a4);
}

uint64_t itemfig_assureBasicsReadyForInspection(void *a1)
{
  uint64_t DerivedStorage;
  uint64_t ready;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  ready = itemfig_assureBasicsReadyUsingAsset(a1);
  if (!(_DWORD)ready && *(_BYTE *)(DerivedStorage + 952))
  {
    itemfig_lookForLyrics((uint64_t)a1);
    *(_BYTE *)(DerivedStorage + 952) = 0;
  }
  return ready;
}

void itemfig_lookForLyrics(uint64_t a1)
{
  CFArrayRef v2;
  CFArrayRef v3;
  void (*v4)(uint64_t, CFArrayRef, _QWORD);

  v2 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)kFigPlaybackItemProperty_Lyrics, 1, MEMORY[0x1E0C9B378]);
  if (v2)
  {
    v3 = v2;
    v4 = *(void (**)(uint64_t, CFArrayRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (v4)
      v4(a1, v3, 0);
    CFRelease(v3);
  }
}

uint64_t FigSampleCursorGetClassID()
{
  MEMORY[0x19402F294](&FigSampleCursorGetClassID_sRegisterFigSampleCursorTypeOnce, RegisterFigSampleCursorType);
  return sFigSampleCursorClassID;
}

uint64_t RegisterFigSampleCursorType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

void ScanForUnreferencedDataReadyEntries()
{
  _QWORD *i;
  uint64_t j;
  unsigned int v2;
  int v3;

  if (gFigReadCache && (*(_DWORD *)(gFigReadCache + 176) || *(_DWORD *)(gFigReadCache + 208)))
  {
    for (i = *(_QWORD **)(gFigReadCache + 120); i; i = (_QWORD *)i[17])
    {
      MEMORY[0x19402EEEC](i[2]);
      for (j = i[13]; j; j = *(_QWORD *)(j + 64))
      {
        if (*(_DWORD *)j == 3 && !*(_DWORD *)(j + 72) && CFGetRetainCount(*(CFTypeRef *)(j + 48)) == 1)
        {
          if (*(_QWORD *)(j + 16))
          {
            v2 = 3;
            v3 = 0;
          }
          else
          {
            v2 = 1;
            v3 = 1;
          }
          MoveToVGroup(j, v2, v3);
          if (*(_BYTE *)(j + 96))
          {
            *(_BYTE *)(j + 96) = 0;
            FigAtomicDecrement32();
          }
        }
      }
      MEMORY[0x19402EF04](i[2]);
    }
  }
}

uint64_t resetTrackCursor(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  signed int v7;
  uint64_t v8;
  int v9;
  uint64_t result;
  uint64_t v11;
  int v12;

  v2 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 80) = 1;
  if (*(_DWORD *)(v2 + 288))
  {
    *(_DWORD *)(a1 + 88) = 0;
    v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    if (v3)
      LOBYTE(v3) = *(_DWORD *)(v2 + 408) == 1;
    *(_BYTE *)(a1 + 120) = v3;
    *(_QWORD *)(a1 + 96) = 0;
    v11 = 0;
    CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v2 + 416), 0, 8uLL, &v11);
    *(_DWORD *)(a1 + 112) = bswap32(v11);
    *(_DWORD *)(a1 + 116) = 1;
    *(_OWORD *)(a1 + 128) = xmmword_1932FCCF0;
    if (*(int *)(v2 + 432) < 2)
    {
      v6 = (*(uint64_t (**)(uint64_t))(v2 + 624))(v2);
    }
    else
    {
      v12 = 0;
      v11 = 0;
      CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v2 + 440), 0, 0xCuLL, &v11);
      v4 = bswap32(v11);
      v12 = 0;
      v11 = 0;
      CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v2 + 440), 0xCuLL, 0xCuLL, &v11);
      if (v4 <= 0)
        return FigSignalErrorAt();
      v5 = bswap32(v11);
      if (v5 <= 0)
        return FigSignalErrorAt();
      v6 = v5 - v4;
      if (v5 < v4)
        return FigSignalErrorAt();
    }
    *(_DWORD *)(a1 + 144) = v6;
    v12 = 0;
    v11 = 0;
    CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v2 + 440), 0, 0xCuLL, &v11);
    v7 = bswap32(HIDWORD(v11));
    *(_DWORD *)(a1 + 148) = v7;
    v8 = *(int *)(v2 + 244);
    if ((_DWORD)v8)
    {
      *(_DWORD *)(a1 + 112) /= v8;
      v9 = v7 / (int)v8;
      *(_DWORD *)(a1 + 148) = v9;
    }
    else
    {
      v11 = 0;
      CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v2 + 416), 0, 8uLL, &v11);
      v8 = bswap32(HIDWORD(v11));
      v9 = *(_DWORD *)(a1 + 148);
    }
    *(_QWORD *)(a1 + 104) = v8;
    if (v9 < 1 || v9 > *(_DWORD *)(v2 + 288))
      return FigSignalErrorAt();
    *(_QWORD *)(a1 + 152) = 0;
  }
  ResetFragmentCursor(v2, a1 + 184);
  result = 0;
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a1 + 80);
  return result;
}

double ResetFragmentCursor(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = *(_QWORD *)(a1 + 728);
  if (v2 && (v3 = *(_QWORD *)(v2 + 56)) != 0)
  {
    *(_QWORD *)(a2 + 8) = v2;
    *(_QWORD *)(a2 + 16) = v3;
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(v3 + 72);
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t FigMetadataReaderCreateForiTunes(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  _QWORD *DerivedStorage;
  uint64_t v9;
  uint64_t CurrentAtomGlobalOffset;
  uint64_t CMBaseObject;
  void (*v13)(uint64_t, _QWORD, _QWORD, CFNumberRef *);
  uint64_t v14;
  void (*v15)(uint64_t, _QWORD, _QWORD, _OWORD *);
  int v16;
  const void *v17;
  BOOL v18;
  char v19;
  uint64_t CurrentAtomTypeAndDataLength;
  uint64_t Atom;
  CFNumberRef number[2];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD v29[7];
  int64_t v30;
  int v31;

  if (!a2)
    return FigSignalErrorAt();
  if (!a4)
    return FigSignalErrorAt();
  v5 = a3;
  if (a3 < 0)
    return FigSignalErrorAt();
  v6 = a2;
  FigMetadataReaderGetClassID();
  v7 = CMDerivedObjectCreate();
  if ((_DWORD)v7)
    return v7;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (!FigAtomStreamInitWithByteStream())
  {
    *(_QWORD *)&v29[0] = 0;
    number[0] = 0;
    CMBaseObject = CMByteStreamGetCMBaseObject();
    v13 = *(void (**)(uint64_t, _QWORD, _QWORD, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v13)
      v13(CMBaseObject, *MEMORY[0x1E0CA2070], 0, number);
    v14 = CMByteStreamGetCMBaseObject();
    v15 = *(void (**)(uint64_t, _QWORD, _QWORD, _OWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v15)
      v15(v14, *MEMORY[0x1E0CA2068], 0, v29);
    v16 = 0;
    v17 = *(const void **)&v29[0];
    if (number[0] && *(_QWORD *)&v29[0])
    {
      if (CFNumberCompare(number[0], *(CFNumberRef *)&v29[0], 0))
      {
        v30 = 0;
        if (FigAtomStreamGetCurrentAtomTypeAndDataLength())
          v18 = 0;
        else
          v18 = v30 <= 0x2000;
        v16 = v18;
      }
      else
      {
        v16 = 0;
      }
      v17 = *(const void **)&v29[0];
    }
    if (v17)
      CFRelease(v17);
    if (number[0])
      CFRelease(number[0]);
    if (v16)
    {
      if (!FigAtomStreamReadCurrentAtomAndCreateBBuf())
      {
        CFGetAllocator(0);
        if (!CMByteStreamCreateForBlockBuffer())
        {
          v6 = 0;
          v5 = 0;
        }
      }
    }
  }
  *DerivedStorage = CFRetain(v6);
  DerivedStorage[1] = v5;
  v30 = 0;
  memset(v29, 0, sizeof(v29));
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  *(_OWORD *)number = 0u;
  v9 = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(v9 + 16))
    return 4294954687;
  if (*(_QWORD *)(v9 + 24))
    return 4294954687;
  v31 = 0;
  if (FigAtomStreamInitWithByteStream() || FigAtomStreamInitWithParent())
    return 4294954687;
  v19 = 0;
  do
  {
    CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if ((_DWORD)CurrentAtomTypeAndDataLength)
    {
      CurrentAtomGlobalOffset = CurrentAtomTypeAndDataLength;
      goto LABEL_38;
    }
    if (v31 == 1801812339 || v31 == 1768715124)
    {
      CurrentAtomGlobalOffset = FigAtomStreamGetCurrentAtomGlobalOffset();
    }
    else
    {
      if (v31 != 1751411826)
        goto LABEL_35;
      CurrentAtomGlobalOffset = FigMetadataValidateHandlerType((uint64_t)number, v30);
      if (!(_DWORD)CurrentAtomGlobalOffset)
        v19 = 1;
    }
    if ((_DWORD)CurrentAtomGlobalOffset)
      goto LABEL_38;
LABEL_35:
    Atom = FigAtomStreamAdvanceToNextAtom();
  }
  while (!(_DWORD)Atom);
  CurrentAtomGlobalOffset = Atom;
  if ((_DWORD)Atom == -12890)
    CurrentAtomGlobalOffset = 0;
LABEL_38:
  if (!v19)
    return 4294954687;
  if (!(_DWORD)CurrentAtomGlobalOffset)
    *a4 = 0;
  return CurrentAtomGlobalOffset;
}

uint64_t itemasync_GetDimensions(const void *a1, _DWORD *a2, _DWORD *a3)
{
  _DWORD *DerivedStorage;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = 0;
  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  *a2 = 0;
  if (!a3)
    return FigSignalErrorAt();
  *a3 = 0;
  if (*DerivedStorage)
    return FigSignalErrorAt();
  v8 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v8)
  {
    v9 = (const void *)v8;
    if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
    {
      v12 = FigSignalErrorAt();
      v11 = 0;
    }
    else
    {
      v10 = playerasync_createCommand(v9, 28, a1, &v14);
      v11 = v14;
      if ((_DWORD)v10)
      {
        v12 = v10;
      }
      else
      {
        *(_QWORD *)(v14 + 32) = a2;
        *(_QWORD *)(v11 + 40) = a3;
        playerasync_runSynchronousCommand((uint64_t)v9, (_DWORD *)v11);
        v12 = *(unsigned int *)(v11 + 28);
      }
    }
    fpa_releaseCommand((_QWORD *)v11);
    CFRelease(v9);
    return v12;
  }
  else
  {
    v13 = FigSignalErrorAt();
    fpa_releaseCommand(0);
    return v13;
  }
}

uint64_t itemcentral_GetDimensions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 16))
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  if (!itemcentral_isParentPlayerValid())
    return FigSignalErrorAt();
  v7 = *(_QWORD *)(v6 + 8);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v8)
    return v8(v7, a2, a3);
  else
    return 4294954514;
}

uint64_t itemfig_GetDimensions(const void *a1, float *a2, float *a3)
{
  uint64_t DerivedStorage;
  const void *v7;
  uint64_t v8;
  CMVideoFormatDescriptionRef v9;
  double v10;
  double height;
  double v12;
  uint64_t result;
  CGSize PresentationDimensions;
  CGFloat width;
  int VideoMatrixRotationAngleAndFlips;
  float v17;
  float v18;
  CMVideoFormatDescriptionRef videoDesc;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = *(const void **)(DerivedStorage + 8);
  videoDesc = 0;
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  if (*(_QWORD *)(DerivedStorage + 656))
  {
    v9 = 0;
    v10 = *(float *)(DerivedStorage + 736);
    height = *(double *)(DerivedStorage + 720) * v10;
    v12 = *(double *)(DerivedStorage + 728) * v10;
  }
  else if (*(_BYTE *)(DerivedStorage + 1872))
  {
    v9 = 0;
    height = *(double *)(DerivedStorage + 1880);
    v12 = *(double *)(DerivedStorage + 1888);
  }
  else
  {
    result = itemfig_copyVideoFormatDescription((uint64_t)a1, (uint64_t *)&videoDesc);
    if ((_DWORD)result)
      return result;
    v9 = videoDesc;
    if (videoDesc)
    {
      PresentationDimensions = CMVideoFormatDescriptionGetPresentationDimensions(videoDesc, *(_BYTE *)(v8 + 1152), *(_BYTE *)(v8 + 1153));
      width = PresentationDimensions.width;
      height = PresentationDimensions.height;
    }
    else
    {
      height = 0.0;
      width = 0.0;
    }
    if (FPSupport_ShouldApplyVideoTrackMatrix(v7, a1)
      && ((VideoMatrixRotationAngleAndFlips = itemfig_getVideoMatrixRotationAngleAndFlips((uint64_t)a1, 0, 0),
           VideoMatrixRotationAngleAndFlips == 270)
       || VideoMatrixRotationAngleAndFlips == 90))
    {
      v12 = width;
    }
    else
    {
      v12 = height;
      height = width;
    }
  }
  if ((height == 0.0 || v12 == 0.0)
    && (itemfig_IsThereMediaTrack(v8, 1935832172) || itemfig_IsThereMediaTrack(v8, 1668047728)))
  {
    height = 1280.0;
    v12 = 720.0;
  }
  v17 = height;
  *a2 = v17;
  v18 = v12;
  *a3 = v18;
  if (v9)
    CFRelease(v9);
  return 0;
}

uint64_t itemfig_copyVideoFormatDescription(uint64_t a1, uint64_t *a2)
{
  _BYTE *DerivedStorage;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  CFTypeRef v11;
  CFTypeRef cf;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  cf = 0;
  *a2 = 0;
  if (*DerivedStorage)
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  v7 = itemfig_assureBasicsReadyForInspection(a1);
  if ((_DWORD)v7)
    return v7;
  v8 = *((unsigned int *)v6 + 250);
  if ((_DWORD)v8)
  {
    v9 = *((_QWORD *)v6 + 121);
    v10 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 56);
    if (v10)
    {
      v8 = v10(v9, v8, &cf, 0);
      v11 = cf;
      if (!(_DWORD)v8)
      {
        v8 = itemfig_copyFormatDescription((uint64_t)cf, a2);
        v11 = cf;
      }
      if (v11)
        CFRelease(v11);
    }
    else
    {
      return 4294954514;
    }
  }
  return v8;
}

uint64_t itemfig_CopyProperty(void *a1, const void *a2, const __CFAllocator *a3, __CFDictionary **a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  const void *v10;
  BOOL v11;
  uint64_t DurationIfReady;
  const __CFAllocator *v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFDictionaryRef v18;
  CFDictionaryRef v19;
  CFDictionaryRef v20;
  CFDictionaryRef v21;
  CFArrayRef v22;
  uint64_t IsApplicationAuthorized;
  CFDictionaryRef v24;
  __int128 v25;
  const __CFAllocator *v26;
  CFNumberRef v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  CFDictionaryRef v31;
  CFDictionaryRef v32;
  CFDictionaryRef v33;
  CFDictionaryRef v34;
  CFArrayRef v35;
  CFStringRef DictionaryRepresentation;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  CFAllocatorRef v41;
  uint64_t CMBaseObject;
  uint64_t (*v43)(uint64_t, const __CFString *, CFAllocatorRef, uint64_t);
  uint64_t v44;
  __CFString **v45;
  uint64_t PlayabilityMetricsDictionary;
  uint64_t (*v47)(void *, CMTimeRange *);
  CMTimeEpoch v48;
  CMTimeRange *p_keys;
  const __CFAllocator *v50;
  void (*v51)(void *, CMTimeRange *);
  __int128 v52;
  CFStringRef *v53;
  int v54;
  double v55;
  double v56;
  const void *value;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  __CFString **v62;
  int v63;
  __CFString **v64;
  BOOL v65;
  const void *v66;
  CMVideoDimensions Dimensions;
  double v68;
  double v69;
  uint64_t TrackIDArray;
  CMTimeValue v71;
  const __CFAllocator *v72;
  CMTimeRange *v73;
  CFNumberType v74;
  const __CFArray *v75;
  unsigned int VideoFrame;
  CMTimeValue *v77;
  uint64_t v78;
  __CFString **v79;
  const void *v80;
  CMTimeValue v81;
  const __CFNumber *v82;
  uint64_t v83;
  uint64_t (*v84)(uint64_t, const __CFString *, const __CFAllocator *, CMTimeRange *);
  uint64_t v85;
  void *v86;
  uint64_t v87;
  CFStringRef *v88;
  __CFDictionary *v89;
  __CFString **v90;
  int v91;
  __CFString **v92;
  __CFDictionary *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __CFArray *MutableCopy;
  int AccessLogEntry;
  const void *v99;
  const __CFArray *v100;
  CFArrayRef Copy;
  const __CFDictionary *v102;
  CFStringRef *v103;
  void *v104;
  const __CFString *v105;
  CMTime v106;
  CMTime valuePtr;
  Float64 Seconds;
  Float64 v109;
  CMTime cf;
  CFTypeRef v111;
  CMTimeRange values;
  CMTimeRange keys;
  _BYTE time[32];
  void *v115[2];
  __int128 v116;
  uint64_t v117;
  CGSize v118;
  CGSize v119;
  CGRect v120;
  CGRect CleanAperture;
  CGRect v122;

  v117 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = FigCFWeakReferenceHolderCopyReferencedObject();
  v10 = (const void *)v9;
  if (*(_BYTE *)DerivedStorage)
    v11 = 1;
  else
    v11 = a4 == 0;
  if (v11)
  {
    IsApplicationAuthorized = FigSignalErrorAt();
    if (!v10)
      return IsApplicationAuthorized;
    goto LABEL_46;
  }
  if (!v9)
    return 0;
  if (CFEqual(a2, CFSTR("SeekableTimeIntervals")))
  {
    cf.value = 0;
    memset(&keys, 0, 32);
    memset(&values, 0, 32);
    valuePtr.value = 0;
    v106.value = 0;
    *(_OWORD *)v115 = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)&v116 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    DurationIfReady = itemfig_getDurationIfReady((uint64_t)a1, (uint64_t)v115);
    if ((_DWORD)DurationIfReady)
    {
      IsApplicationAuthorized = DurationIfReady;
      v15 = 0;
    }
    else
    {
      *(_OWORD *)time = *(_OWORD *)v115;
      *(_QWORD *)&time[16] = v116;
      v106.value = CMTimeGetSeconds((CMTime *)time);
      v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v14 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, &valuePtr);
      v15 = v14;
      if (v14)
      {
        keys.start.value = (CMTimeValue)CFSTR("start");
        values.start.value = (CMTimeValue)v14;
        v16 = CFNumberCreate(v13, kCFNumberDoubleType, &v106);
        v17 = v16;
        if (v16)
        {
          *(_QWORD *)&keys.start.timescale = CFSTR("end");
          *(_QWORD *)&values.start.timescale = v16;
          *(_OWORD *)time = *MEMORY[0x1E0CA2E68];
          *(_QWORD *)&time[16] = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
          v18 = CMTimeCopyAsDictionary((CMTime *)time, v13);
          v19 = v18;
          if (v18)
          {
            keys.start.epoch = (CMTimeEpoch)CFSTR("startTime");
            values.start.epoch = (CMTimeEpoch)v18;
            *(_OWORD *)time = *(_OWORD *)v115;
            *(_QWORD *)&time[16] = v116;
            v20 = CMTimeCopyAsDictionary((CMTime *)time, v13);
            v21 = v20;
            if (v20
              && (keys.duration.value = (CMTimeValue)CFSTR("endTime"),
                  values.duration.value = (CMTimeValue)v20,
                  (cf.value = (CMTimeValue)CFDictionaryCreate(v13, (const void **)&keys, (const void **)&values, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) != 0)&& (v22 = CFArrayCreate(v13, (const void **)&cf, 1, MEMORY[0x1E0C9B378])) != 0)
            {
              IsApplicationAuthorized = 0;
              *a4 = v22;
            }
            else
            {
              IsApplicationAuthorized = FigSignalErrorAt();
            }
            goto LABEL_15;
          }
          IsApplicationAuthorized = FigSignalErrorAt();
LABEL_85:
          v21 = 0;
LABEL_15:
          if (cf.value)
            CFRelease((CFTypeRef)cf.value);
          if (v15)
            CFRelease(v15);
          if (v17)
            CFRelease(v17);
          if (v19)
            CFRelease(v19);
          if (!v21)
            goto LABEL_46;
          v24 = v21;
          goto LABEL_45;
        }
        IsApplicationAuthorized = FigSignalErrorAt();
LABEL_83:
        v19 = 0;
        goto LABEL_85;
      }
      IsApplicationAuthorized = FigSignalErrorAt();
    }
    v17 = 0;
    goto LABEL_83;
  }
  if (CFEqual(a2, CFSTR("PlayableTimeIntervals")))
  {
    v111 = 0;
    *(_OWORD *)v115 = 0u;
    v116 = 0u;
    memset(time, 0, sizeof(time));
    cf = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    v25 = *(_OWORD *)(MEMORY[0x1E0CA2E50] + 16);
    *(_OWORD *)&keys.start.value = *MEMORY[0x1E0CA2E50];
    *(_OWORD *)&keys.start.epoch = v25;
    *(_OWORD *)&keys.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E50] + 32);
    itemfig_getNonNegativeCurrentTime((uint64_t)a1, &cf);
    values.start = cf;
    itemfig_getPlayableRangeAtTime((uint64_t)a1, &values.start, &keys);
    *(_OWORD *)&values.start.value = *(_OWORD *)&keys.start.value;
    values.start.epoch = keys.start.epoch;
    Seconds = CMTimeGetSeconds(&values.start);
    v26 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v27 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, &Seconds);
    if (v27)
    {
      v28 = v27;
      v115[0] = CFSTR("start");
      *(_QWORD *)time = v27;
      values = keys;
      CMTimeRangeGetEnd(&valuePtr, &values);
      v109 = CMTimeGetSeconds(&valuePtr);
      v29 = CFNumberCreate(v26, kCFNumberDoubleType, &v109);
      if (v29)
      {
        v30 = v29;
        v115[1] = CFSTR("end");
        *(_QWORD *)&time[8] = v29;
        *(_OWORD *)&values.start.value = *(_OWORD *)&keys.start.value;
        values.start.epoch = keys.start.epoch;
        v31 = CMTimeCopyAsDictionary(&values.start, v26);
        if (v31)
        {
          v32 = v31;
          *(_QWORD *)&v116 = CFSTR("startTime");
          *(_QWORD *)&time[16] = v31;
          values = keys;
          CMTimeRangeGetEnd(&v106, &values);
          v33 = CMTimeCopyAsDictionary(&v106, v26);
          if (v33)
          {
            v34 = v33;
            *((_QWORD *)&v116 + 1) = CFSTR("endTime");
            *(_QWORD *)&time[24] = v33;
            v111 = CFDictionaryCreate(v26, (const void **)v115, (const void **)time, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            if (v111)
            {
              v35 = CFArrayCreate(v26, &v111, 1, MEMORY[0x1E0C9B378]);
              if (v35)
              {
                IsApplicationAuthorized = 0;
                *a4 = v35;
              }
              else
              {
                IsApplicationAuthorized = FigSignalErrorAt();
              }
              if (v111)
                CFRelease(v111);
            }
            else
            {
              IsApplicationAuthorized = FigSignalErrorAt();
            }
            CFRelease(v34);
          }
          else
          {
            IsApplicationAuthorized = FigSignalErrorAt();
          }
          CFRelease(v32);
        }
        else
        {
          IsApplicationAuthorized = FigSignalErrorAt();
        }
        CFRelease(v30);
      }
      else
      {
        IsApplicationAuthorized = FigSignalErrorAt();
      }
      v24 = v28;
LABEL_45:
      CFRelease(v24);
      goto LABEL_46;
    }
LABEL_91:
    PlayabilityMetricsDictionary = FigSignalErrorAt();
    goto LABEL_67;
  }
  if (CFEqual(a2, CFSTR("Timebase")))
  {
    DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 336);
    if (!DictionaryRepresentation)
    {
LABEL_36:
      IsApplicationAuthorized = 0;
LABEL_37:
      *a4 = (__CFDictionary *)DictionaryRepresentation;
      goto LABEL_46;
    }
LABEL_35:
    DictionaryRepresentation = (CFStringRef)CFRetain(DictionaryRepresentation);
    goto LABEL_36;
  }
  if (CFEqual(a2, CFSTR("Lyrics")))
  {
    v38 = CMBaseObjectGetDerivedStorage();
    if (*(_QWORD *)(v38 + 960))
    {
      IsApplicationAuthorized = 0;
    }
    else
    {
      v39 = v38;
      v40 = *(_QWORD *)(v38 + 1216);
      v41 = CFGetAllocator(a1);
      CMBaseObject = FigAssetGetCMBaseObject(v40);
      v43 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
      if (v43)
        IsApplicationAuthorized = v43(CMBaseObject, CFSTR("Lyrics"), v41, v39 + 960);
      else
        IsApplicationAuthorized = 4294954514;
    }
    DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 960);
    if (DictionaryRepresentation)
      goto LABEL_61;
LABEL_62:
    *a4 = 0;
    goto LABEL_46;
  }
  if (CFEqual(a2, CFSTR("AvailableAlternateTrackGroups")))
  {
    DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 984);
    if (DictionaryRepresentation)
      goto LABEL_35;
    goto LABEL_53;
  }
  if (CFEqual(a2, CFSTR("ChosenAlternateTrackIDDictionary")))
  {
    itemfig_copyChosenAlternateTrackIDsDictionary((uint64_t)a1, a3, a4);
LABEL_58:
    IsApplicationAuthorized = 0;
    goto LABEL_46;
  }
  if (CFEqual(a2, CFSTR("EstimatedDuration")))
  {
    IsApplicationAuthorized = itemfig_assureFormatReader(a1);
    if ((_DWORD)IsApplicationAuthorized)
      goto LABEL_46;
    v44 = *(_QWORD *)(DerivedStorage + 968);
    v45 = kFigFormatReaderProperty_EstimatedDuration;
    goto LABEL_66;
  }
  if (CFEqual(a2, CFSTR("AccurateDuration")))
  {
    *(_OWORD *)&keys.start.value = *MEMORY[0x1E0CA2E18];
    keys.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    v47 = *(uint64_t (**)(void *, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v47)
    {
      IsApplicationAuthorized = v47(a1, &keys);
      if ((_DWORD)IsApplicationAuthorized)
      {
        DictionaryRepresentation = 0;
      }
      else
      {
        *(_OWORD *)&values.start.value = *(_OWORD *)&keys.start.value;
        values.start.epoch = keys.start.epoch;
        DictionaryRepresentation = (CFStringRef)CMTimeCopyAsDictionary(&values.start, a3);
      }
    }
    else
    {
      DictionaryRepresentation = 0;
      IsApplicationAuthorized = 4294954514;
    }
    goto LABEL_37;
  }
  if (CFEqual(a2, CFSTR("EndTime")))
  {
    if ((*(_DWORD *)(DerivedStorage + 152) & 0x1D) == 1)
    {
      *(_OWORD *)&keys.start.value = *(_OWORD *)(DerivedStorage + 140);
      v48 = *(_QWORD *)(DerivedStorage + 156);
LABEL_99:
      keys.start.epoch = v48;
      p_keys = &keys;
LABEL_100:
      v50 = a3;
LABEL_101:
      DictionaryRepresentation = (CFStringRef)CMTimeCopyAsDictionary(&p_keys->start, v50);
      goto LABEL_36;
    }
    goto LABEL_53;
  }
  if (CFEqual(a2, CFSTR("ReverseEndTime")))
  {
    if ((*(_DWORD *)(DerivedStorage + 176) & 0x1D) == 1)
    {
      *(_OWORD *)&keys.start.value = *(_OWORD *)(DerivedStorage + 164);
      v48 = *(_QWORD *)(DerivedStorage + 180);
      goto LABEL_99;
    }
LABEL_53:
    IsApplicationAuthorized = 0;
    goto LABEL_62;
  }
  if (CFEqual(a2, CFSTR("AdvanceTimeForOverlappedPlayback")))
  {
    if ((*(_DWORD *)(DerivedStorage + 200) & 0x1D) == 1)
    {
      *(_OWORD *)&keys.start.value = *(_OWORD *)(DerivedStorage + 188);
      v48 = *(_QWORD *)(DerivedStorage + 204);
      goto LABEL_99;
    }
    goto LABEL_53;
  }
  if (CFEqual(a2, CFSTR("MaximumTimePlayedToSinceLastSeek")))
  {
    *(_OWORD *)&keys.start.value = *MEMORY[0x1E0CA2E18];
    keys.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    v51 = *(void (**)(void *, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v51)
      v51(a1, &keys);
    if ((keys.start.flags & 0x1D) != 1)
    {
      DictionaryRepresentation = 0;
      goto LABEL_36;
    }
    *(_OWORD *)&values.start.value = *(_OWORD *)&keys.start.value;
    values.start.epoch = keys.start.epoch;
    p_keys = &values;
    goto LABEL_100;
  }
  if (CFEqual(a2, CFSTR("LoopTimeRange")))
  {
    if ((*(_DWORD *)(DerivedStorage + 248) & 0x1D) == 1)
    {
      v52 = *(_OWORD *)(DerivedStorage + 252);
      *(_OWORD *)&keys.start.value = *(_OWORD *)(DerivedStorage + 236);
      *(_OWORD *)&keys.start.epoch = v52;
      *(_OWORD *)&keys.duration.timescale = *(_OWORD *)(DerivedStorage + 268);
      DictionaryRepresentation = (CFStringRef)CMTimeRangeCopyAsDictionary(&keys, a3);
      goto LABEL_36;
    }
    goto LABEL_53;
  }
  if (CFEqual(a2, CFSTR("ReversesMoreVideoFramesInMemory")))
  {
    v53 = (CFStringRef *)MEMORY[0x1E0C9AE50];
    v54 = *(unsigned __int8 *)(DerivedStorage + 284);
    goto LABEL_117;
  }
  if (CFEqual(a2, CFSTR("AggressivelyCachesVideoFrames")))
  {
    v53 = (CFStringRef *)MEMORY[0x1E0C9AE50];
    v54 = *(unsigned __int8 *)(DerivedStorage + 285);
    goto LABEL_117;
  }
  if (CFEqual(a2, CFSTR("DecodeAllFramesDuringOrdinaryPlayback")))
  {
    v53 = (CFStringRef *)MEMORY[0x1E0C9AE50];
    v54 = *(unsigned __int8 *)(DerivedStorage + 286);
    goto LABEL_117;
  }
  if (CFEqual(a2, CFSTR("CleanApertureRectangle")))
  {
    if (!*(_QWORD *)(DerivedStorage + 656))
    {
      keys.start.value = 0;
      IsApplicationAuthorized = itemfig_copyVideoFormatDescription((uint64_t)a1, &keys.start.value);
      if ((_DWORD)IsApplicationAuthorized)
        goto LABEL_46;
      value = (const void *)keys.start.value;
      if (keys.start.value)
      {
        CleanAperture = CMVideoFormatDescriptionGetCleanAperture((CMVideoFormatDescriptionRef)keys.start.value, 0);
        x = CleanAperture.origin.x;
        y = CleanAperture.origin.y;
        width = CleanAperture.size.width;
        height = CleanAperture.size.height;
        CFRelease(value);
      }
      else
      {
        height = 0.0;
        width = 0.0;
        y = 0.0;
        x = 0.0;
      }
      v122.origin.x = x;
      v122.origin.y = y;
      v122.size.width = width;
      v122.size.height = height;
      DictionaryRepresentation = (CFStringRef)CGRectCreateDictionaryRepresentation(v122);
      goto LABEL_37;
    }
    v55 = *(float *)(DerivedStorage + 736);
    v120.size.width = *(double *)(DerivedStorage + 720) * v55;
    v120.size.height = *(double *)(DerivedStorage + 728) * v55;
    v120.origin.x = 0.0;
    v120.origin.y = 0.0;
    DictionaryRepresentation = (CFStringRef)CGRectCreateDictionaryRepresentation(v120);
    goto LABEL_36;
  }
  if (CFEqual(a2, CFSTR("EncodedDimensions")))
  {
    if (!*(_QWORD *)(DerivedStorage + 656))
    {
      keys.start.value = 0;
      IsApplicationAuthorized = itemfig_copyVideoFormatDescription((uint64_t)a1, &keys.start.value);
      if ((_DWORD)IsApplicationAuthorized)
        goto LABEL_46;
      v66 = (const void *)keys.start.value;
      if (keys.start.value)
      {
        Dimensions = CMVideoFormatDescriptionGetDimensions((CMVideoFormatDescriptionRef)keys.start.value);
        v68 = (double)Dimensions.width;
        v69 = (double)Dimensions.height;
        CFRelease(v66);
      }
      else
      {
        v68 = 0.0;
        v69 = 0.0;
      }
      v119.width = v68;
      v119.height = v69;
      DictionaryRepresentation = (CFStringRef)CGSizeCreateDictionaryRepresentation(v119);
      goto LABEL_37;
    }
    v56 = *(float *)(DerivedStorage + 736);
    v118.width = *(double *)(DerivedStorage + 720) * v56;
    v118.height = *(double *)(DerivedStorage + 728) * v56;
    DictionaryRepresentation = (CFStringRef)CGSizeCreateDictionaryRepresentation(v118);
    goto LABEL_36;
  }
  if (CFEqual(a2, CFSTR("ApertureMode")))
  {
    if (*(_BYTE *)(DerivedStorage + 1152))
    {
      v62 = kFigPlaybackItemApertureMode_CleanAperture;
      v63 = *(unsigned __int8 *)(DerivedStorage + 1153);
      v64 = kFigPlaybackItemApertureMode_ProductionAperture;
LABEL_133:
      v65 = v63 == 0;
      goto LABEL_134;
    }
    v62 = kFigPlaybackItemApertureMode_EncodedPixels;
LABEL_145:
    DictionaryRepresentation = *v62;
    goto LABEL_35;
  }
  if (CFEqual(a2, CFSTR("VideoTrackMatrix")))
  {
    PlayabilityMetricsDictionary = itemfig_copyVideoTrackMatrix(a3, (uint64_t)a1, a4);
    goto LABEL_67;
  }
  if (CFEqual(a2, CFSTR("TrackIDArray")))
  {
    keys.start.value = 0;
    TrackIDArray = itemfig_createTrackIDArray(a1, (CFArrayRef *)&keys);
    goto LABEL_152;
  }
  if (CFEqual(a2, CFSTR("ChosenTrackIDArray")))
  {
    keys.start.value = 0;
    TrackIDArray = itemfig_createChosenTrackIDArray(a1, (CFArrayRef *)&keys);
LABEL_152:
    IsApplicationAuthorized = TrackIDArray;
    v71 = keys.start.value;
    if ((_DWORD)TrackIDArray)
      v71 = 0;
    goto LABEL_154;
  }
  if (CFEqual(a2, CFSTR("EQPreset")))
  {
    v72 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v73 = (CMTimeRange *)(DerivedStorage + 936);
    v74 = kCFNumberIntType;
LABEL_157:
    DictionaryRepresentation = (CFStringRef)CFNumberCreate(v72, v74, v73);
    goto LABEL_36;
  }
  if (CFEqual(a2, CFSTR("VideoSlotArray")))
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 1120));
    v75 = *(const __CFArray **)(DerivedStorage + 1112);
    if (v75)
    {
      IsApplicationAuthorized = 0;
      *a4 = CFArrayCreateCopy(a3, v75);
    }
    else
    {
      IsApplicationAuthorized = 4294954513;
    }
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 1120));
    goto LABEL_46;
  }
  if (CFEqual(a2, CFSTR("HasEnqueuedFirstVideoFrame")))
  {
    VideoFrame = itemfig_hasEnqueuedFirstVideoFrame((uint64_t)a1);
    IsApplicationAuthorized = 0;
    v77 = (CMTimeValue *)MEMORY[0x1E0C9AE50];
    if (!VideoFrame)
      v77 = (CMTimeValue *)MEMORY[0x1E0C9AE40];
    v71 = *v77;
    goto LABEL_154;
  }
  if (CFEqual(a2, CFSTR("BlendsVideoFrames")))
  {
    v62 = (__CFString **)MEMORY[0x1E0C9AE50];
    v63 = *(unsigned __int8 *)(DerivedStorage + 1136);
LABEL_171:
    v64 = (__CFString **)MEMORY[0x1E0C9AE40];
    goto LABEL_133;
  }
  if (CFEqual(a2, CFSTR("PropagatePerFrameHDRDisplayMetadata")))
  {
    v62 = (__CFString **)MEMORY[0x1E0C9AE50];
    v63 = *(unsigned __int8 *)(DerivedStorage + 1137);
    goto LABEL_171;
  }
  if (CFEqual(a2, CFSTR("ImageQueueInterpolationCurve")))
  {
    DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 1128);
    goto LABEL_35;
  }
  if (CFEqual(a2, CFSTR("ReadBandwidth")))
  {
    v78 = *(_QWORD *)(DerivedStorage + 128);
    if (v78)
    {
      v79 = (__CFString **)MEMORY[0x1E0CA2F88];
LABEL_183:
      PlayabilityMetricsDictionary = CMByteStreamCopyProperty(v78, (uint64_t)*v79, 0, (uint64_t)a4);
      goto LABEL_67;
    }
    goto LABEL_393;
  }
  if (CFEqual(a2, CFSTR("FileSize")))
  {
    v78 = *(_QWORD *)(DerivedStorage + 128);
    if (v78)
    {
      v79 = (__CFString **)MEMORY[0x1E0CA2070];
      goto LABEL_183;
    }
LABEL_393:
    IsApplicationAuthorized = 4294954513;
    goto LABEL_46;
  }
  if (CFEqual(a2, CFSTR("AvailableFileSize")))
  {
    v78 = *(_QWORD *)(DerivedStorage + 128);
    if (v78)
    {
      v79 = (__CFString **)MEMORY[0x1E0CA2068];
      goto LABEL_183;
    }
    goto LABEL_393;
  }
  if (CFEqual(a2, CFSTR("AudioDeviceChannelMap")))
  {
    *a4 = *(__CFDictionary **)(DerivedStorage + 944);
    v80 = *(const void **)(DerivedStorage + 944);
    if (v80)
      CFRetain(v80);
    goto LABEL_58;
  }
  if (CFEqual(a2, CFSTR("MovieMatrix")))
  {
    IsApplicationAuthorized = itemfig_assureFormatReader(a1);
    if ((_DWORD)IsApplicationAuthorized)
      goto LABEL_46;
    v44 = *(_QWORD *)(DerivedStorage + 968);
    v45 = kFigFormatReaderProperty_MovieMatrix;
LABEL_66:
    PlayabilityMetricsDictionary = FigFormatReaderCopyProperty(v44, (uint64_t)*v45, (uint64_t)a3, (uint64_t)a4);
LABEL_67:
    IsApplicationAuthorized = PlayabilityMetricsDictionary;
    goto LABEL_46;
  }
  if (CFEqual(a2, CFSTR("IsReadyForPlayback")))
  {
    v62 = (__CFString **)MEMORY[0x1E0C9AE50];
    v63 = *(unsigned __int8 *)(DerivedStorage + 1266);
    goto LABEL_171;
  }
  if (CFEqual(a2, CFSTR("BasicsReadyForInspection")))
  {
    v62 = (__CFString **)MEMORY[0x1E0C9AE50];
    v63 = *(unsigned __int8 *)(DerivedStorage + 1240);
    goto LABEL_171;
  }
  if (CFEqual(a2, CFSTR("ReadAheadAllowBackfill")))
  {
    if (*(_BYTE *)(DerivedStorage + 1382))
    {
      v62 = (__CFString **)MEMORY[0x1E0C9AE50];
      v63 = *(unsigned __int8 *)(DerivedStorage + 1381);
      goto LABEL_171;
    }
    if (*(_QWORD *)(DerivedStorage + 128))
    {
      CMByteStreamGetCMBaseObject();
      FigCRABSGetClassID();
      if (CMBaseObjectIsMemberOfClass())
      {
        v78 = *(_QWORD *)(DerivedStorage + 128);
        v79 = kFigCachedReadAheadByteStreamProperty_ReadAheadAllowBackfill;
        goto LABEL_183;
      }
    }
    goto LABEL_393;
  }
  if (CFEqual(a2, CFSTR("SaveDownloadedDataToDiskWhenDone")))
  {
    if (*(_QWORD *)(DerivedStorage + 128))
    {
      CMByteStreamGetCMBaseObject();
      FigCRABSGetClassID();
      if (CMBaseObjectIsMemberOfClass())
      {
        v78 = *(_QWORD *)(DerivedStorage + 128);
        v79 = kFigCachedReadAheadByteStreamProperty_SaveMemoryCacheToDiskWhenDone;
        goto LABEL_183;
      }
    }
    goto LABEL_393;
  }
  if (!CFEqual(a2, CFSTR("RequiresExternalProtection")))
  {
    if (CFEqual(a2, CFSTR("CPEProtector")))
    {
      itemfig_assureContentProtectionReadyForInspection(a1);
      DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 1160);
      if (!DictionaryRepresentation)
        goto LABEL_36;
      goto LABEL_35;
    }
    if (CFEqual(a2, CFSTR("IsAuthorizationRequired")))
    {
      itemfig_assureContentProtectionReadyForInspection(a1);
      v62 = (__CFString **)MEMORY[0x1E0C9AE50];
      v64 = (__CFString **)MEMORY[0x1E0C9AE40];
      v65 = *(_QWORD *)(DerivedStorage + 1160) == 0;
LABEL_134:
      if (v65)
        v62 = v64;
      goto LABEL_145;
    }
    if (CFEqual(a2, CFSTR("IsAuthorized")))
    {
      itemfig_assureContentProtectionReadyForInspection(a1);
      v85 = *(_QWORD *)(DerivedStorage + 1160);
      if (v85)
      {
        LODWORD(keys.start.value) = 0;
        IsApplicationAuthorized = FigCPEProtectorIsApplicationAuthorized(v85, (uint64_t)&keys);
        if (!(_DWORD)IsApplicationAuthorized)
        {
          if ((keys.start.value & 1) != 0)
          {
            IsApplicationAuthorized = FigCPEProtectorIsContentAuthorized(*(_QWORD *)(DerivedStorage + 1160), (uint64_t)&keys);
            if (!(_DWORD)IsApplicationAuthorized && (keys.start.value & 1) != 0)
            {
              v88 = (CFStringRef *)MEMORY[0x1E0C9AE50];
              goto LABEL_235;
            }
          }
          else
          {
            IsApplicationAuthorized = 0;
          }
        }
        v88 = (CFStringRef *)MEMORY[0x1E0C9AE40];
LABEL_235:
        DictionaryRepresentation = *v88;
LABEL_61:
        DictionaryRepresentation = (CFStringRef)CFRetain(DictionaryRepresentation);
        goto LABEL_37;
      }
LABEL_397:
      v62 = (__CFString **)MEMORY[0x1E0C9AE50];
      goto LABEL_145;
    }
    if (CFEqual(a2, CFSTR("Metadata")))
    {
      PlayabilityMetricsDictionary = itemfig_copyMetadata(a1, a3, a4);
      goto LABEL_67;
    }
    if (CFEqual(a2, CFSTR("VideoCompositionInstructionArray")))
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 672));
      v86 = *(void **)(DerivedStorage + 680);
      if (v86)
        v86 = (void *)CFRetain(v86);
      *a4 = (__CFDictionary *)v86;
      v87 = *(_QWORD *)(DerivedStorage + 672);
      goto LABEL_240;
    }
    if (CFEqual(a2, CFSTR("VideoCompositorSourceSampleDataTrackIDs")))
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 776));
      v89 = *(__CFDictionary **)(DerivedStorage + 784);
      if (!v89)
      {
LABEL_239:
        *a4 = v89;
        v87 = *(_QWORD *)(DerivedStorage + 776);
        goto LABEL_240;
      }
LABEL_238:
      v89 = (__CFDictionary *)CFRetain(v89);
      goto LABEL_239;
    }
    if (CFEqual(a2, CFSTR("VideoCompositorSourceVideoTrackWindows")))
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 776));
      v89 = *(__CFDictionary **)(DerivedStorage + 792);
      if (!v89)
        goto LABEL_239;
      goto LABEL_238;
    }
    if (CFEqual(a2, CFSTR("VideoCompositorSourceSampleDataTrackWindows")))
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 776));
      v89 = *(__CFDictionary **)(DerivedStorage + 800);
      if (!v89)
        goto LABEL_239;
      goto LABEL_238;
    }
    if (CFEqual(a2, CFSTR("UsesMinimalLatencyForVideoCompositionRendering")))
    {
      v62 = (__CFString **)MEMORY[0x1E0C9AE50];
      v63 = *(unsigned __int8 *)(DerivedStorage + 688);
      goto LABEL_171;
    }
    if (CFEqual(a2, CFSTR("VideoCompositor")))
    {
      switch(*(_DWORD *)(DerivedStorage + 664))
      {
        case 1:
          v62 = kFigPlaybackItemVideoCompositor_Basic;
          goto LABEL_145;
        case 2:
          v62 = kFigPlaybackItemVideoCompositor_OpenGL;
          goto LABEL_145;
        case 3:
          v62 = kFigPlaybackItemVideoCompositor_vImage;
          goto LABEL_145;
        case 4:
          v62 = kFigPlaybackItemVideoCompositor_Metal;
          goto LABEL_145;
        default:
          DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 656);
          if (DictionaryRepresentation)
            goto LABEL_35;
          break;
      }
      goto LABEL_36;
    }
    if (CFEqual(a2, CFSTR("SynchronizedLayers")))
    {
      DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 864);
      if (!DictionaryRepresentation)
        goto LABEL_36;
      goto LABEL_35;
    }
    if (CFEqual(a2, CFSTR("BufferState")))
    {
      MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 1400));
      v90 = kFigPlaybackItemBufferState_Filling;
      v91 = *(_DWORD *)(DerivedStorage + 1408);
      v92 = kFigPlaybackItemBufferState_Full;
    }
    else
    {
      if (!CFEqual(a2, CFSTR("WillKeepUpPrediction")))
      {
        if (CFEqual(a2, CFSTR("LikelyToKeepUpTrigger")))
        {
          if (*(_DWORD *)(DerivedStorage + 1352))
            v62 = kFigPlaybackItemLikelyToKeepUpTrigger_Live;
          else
            v62 = kFigPlaybackItemLikelyToKeepUpTrigger_Default;
          goto LABEL_145;
        }
        if (!CFEqual(a2, CFSTR("ConnectionState")))
        {
          if (CFEqual(a2, CFSTR("ProgressToPlayThrough")))
          {
            LODWORD(keys.start.value) = 0;
            MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 616));
            v94 = *(_QWORD *)(DerivedStorage + 600);
            if (v94)
              FigPlayabilityMonitorGetProgressToPlayThrough(v94, &keys);
            MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 616));
            v72 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v73 = &keys;
          }
          else
          {
            if (CFEqual(a2, CFSTR("ContinuePlayingDuringPrerollForSeek")))
            {
              v62 = (__CFString **)MEMORY[0x1E0C9AE50];
              v63 = *(unsigned __int8 *)(DerivedStorage + 287);
              goto LABEL_171;
            }
            if (CFEqual(a2, CFSTR("ContinuePlayingDuringPrerollForRateChange")))
            {
              v62 = (__CFString **)MEMORY[0x1E0C9AE50];
              v63 = *(unsigned __int8 *)(DerivedStorage + 288);
              goto LABEL_171;
            }
            if (CFEqual(a2, CFSTR("IFrameOnlySpeedThreshold")))
            {
              if (!*(_BYTE *)(DerivedStorage + 290))
              {
                v95 = *(_QWORD *)(DerivedStorage + 352);
                if (v95)
                  *(float *)(DerivedStorage + 292) = FigPlaybackBossGetIFrameOnlySpeedThreshold(v95);
              }
              v72 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
              v73 = (CMTimeRange *)(DerivedStorage + 292);
            }
            else
            {
              if (CFEqual(a2, CFSTR("UseIFrameOnlyPlaybackForHighRateScaledEdits")))
              {
                v62 = (__CFString **)MEMORY[0x1E0C9AE50];
                v63 = *(unsigned __int8 *)(DerivedStorage + 289);
                goto LABEL_171;
              }
              if (CFEqual(a2, CFSTR("MinimumIntervalForIFrameOnlyPlayback")))
              {
                v50 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
                keys.start.epoch = *(_QWORD *)(DerivedStorage + 312);
                *(_OWORD *)&keys.start.value = *(_OWORD *)(DerivedStorage + 296);
                p_keys = &keys;
                goto LABEL_101;
              }
              if (CFEqual(a2, CFSTR("ThoroughlyRefreshClosedCaptionsWhenSeeking")))
              {
                v62 = (__CFString **)MEMORY[0x1E0C9AE50];
                v63 = *(unsigned __int8 *)(DerivedStorage + 320);
                goto LABEL_171;
              }
              if (CFEqual(a2, CFSTR("PlayabilityMetrics")))
              {
                if (*(_QWORD *)(DerivedStorage + 600))
                {
                  PlayabilityMetricsDictionary = itemfig_createPlayabilityMetricsDictionary((uint64_t)a1, a3, a4);
                  goto LABEL_67;
                }
                goto LABEL_91;
              }
              if (CFEqual(a2, CFSTR("EnableDownloadWhenInPlayQueue")))
              {
                v62 = (__CFString **)MEMORY[0x1E0C9AE50];
                v63 = *(unsigned __int8 *)(DerivedStorage + 1328);
                goto LABEL_171;
              }
              if (CFEqual(a2, CFSTR("EnableDownloadWhenNotInPlayQueue")))
              {
                v62 = (__CFString **)MEMORY[0x1E0C9AE50];
                v63 = *(unsigned __int8 *)(DerivedStorage + 1329);
                goto LABEL_171;
              }
              if (CFEqual(a2, CFSTR("AccessLog")))
              {
                if (*(_BYTE *)(DerivedStorage + 1697))
                {
                  keys.start.value = 0;
                  v96 = CMBaseObjectGetDerivedStorage();
                  MEMORY[0x19402EA0C](*(_QWORD *)(v96 + 496));
                  MutableCopy = (__CFArray *)FigCFArrayCreateMutableCopy();
                  if (MutableCopy)
                  {
                    AccessLogEntry = itemfig_createAccessLogEntry((uint64_t)v10, (uint64_t)a1, (CFMutableDictionaryRef *)&keys);
                    v99 = (const void *)keys.start.value;
                    if (!AccessLogEntry)
                    {
                      CFArrayAppendValue(MutableCopy, (const void *)keys.start.value);
                      v99 = (const void *)keys.start.value;
                    }
                    *a4 = MutableCopy;
                    if (v99)
                      CFRelease(v99);
                    IsApplicationAuthorized = 0;
                  }
                  else
                  {
                    IsApplicationAuthorized = FigSignalErrorAt();
                    *a4 = 0;
                  }
                  MEMORY[0x19402EA24](*(_QWORD *)(v96 + 496));
                  goto LABEL_46;
                }
                goto LABEL_393;
              }
              if (CFEqual(a2, CFSTR("CanPlayFastForward"))
                || CFEqual(a2, CFSTR("CanPlayFastReverse"))
                || CFEqual(a2, CFSTR("CanPlayReverse"))
                || CFEqual(a2, CFSTR("SupportsFrameStepping")))
              {
                goto LABEL_397;
              }
              if (CFEqual(a2, CFSTR("SoundCheckVolumeNormalization")))
              {
                v72 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
                v73 = (CMTimeRange *)(DerivedStorage + 1440);
              }
              else
              {
                if (!CFEqual(a2, CFSTR("Volume")))
                {
                  if (CFEqual(a2, CFSTR("MediaKind")))
                  {
                    DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 1448);
                    if (!DictionaryRepresentation)
                      goto LABEL_36;
                    goto LABEL_35;
                  }
                  if (CFEqual(a2, CFSTR("LoudnessInfo")))
                  {
                    DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 1456);
                    if (!DictionaryRepresentation)
                      goto LABEL_36;
                    goto LABEL_35;
                  }
                  if (CFEqual(a2, CFSTR("VisualContextArray")))
                  {
                    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 1736));
                    v100 = *(const __CFArray **)(DerivedStorage + 1728);
                    if (v100)
                      Copy = CFArrayCreateCopy(a3, v100);
                    else
                      Copy = 0;
                    *a4 = Copy;
                    v87 = *(_QWORD *)(DerivedStorage + 1736);
                    goto LABEL_240;
                  }
                  if (CFEqual(a2, CFSTR("TextMarkupArray")))
                  {
                    DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 1832);
                    if (!DictionaryRepresentation)
                      goto LABEL_36;
                    goto LABEL_35;
                  }
                  if (CFEqual(a2, CFSTR("TextHighlightArray")))
                  {
                    DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 1840);
                    if (!DictionaryRepresentation)
                      goto LABEL_36;
                    goto LABEL_35;
                  }
                  if (CFEqual(a2, CFSTR("LegibleOutputs")))
                  {
                    v102 = *(const __CFDictionary **)(DerivedStorage + 1752);
                    if (!v102)
                      goto LABEL_53;
                  }
                  else if (CFEqual(a2, CFSTR("MetadataOutputs")))
                  {
                    DictionaryRepresentation = (CFStringRef)FigXMLNodeGetTag(*(_QWORD *)(DerivedStorage + 1760));
                    if (!DictionaryRepresentation)
                      goto LABEL_36;
                    v102 = (const __CFDictionary *)DictionaryRepresentation;
                  }
                  else
                  {
                    if (!CFEqual(a2, CFSTR("RenderedLegibleOutputs")))
                    {
                      if (CFEqual(a2, CFSTR("MediaSelectionArray")))
                      {
                        IsApplicationAuthorized = itemfig_assureBasicsReadyForInspection(a1);
                        DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 1792);
                        if (!DictionaryRepresentation)
                          goto LABEL_37;
                        goto LABEL_61;
                      }
                      if (CFEqual(a2, CFSTR("SelectedMediaArray")))
                      {
                        PlayabilityMetricsDictionary = itemfig_createSelectedMediaArray(a3, a1, a4);
                        goto LABEL_67;
                      }
                      if (CFEqual(a2, CFSTR("SeekingWaitsForVideoCompositionRendering")))
                      {
                        v53 = (CFStringRef *)MEMORY[0x1E0C9AE50];
                        v54 = *(unsigned __int8 *)(DerivedStorage + 545);
                      }
                      else
                      {
                        if (CFEqual(a2, CFSTR("AudioProcessingTap")))
                        {
                          DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 1432);
                          if (!DictionaryRepresentation)
                            goto LABEL_36;
                          goto LABEL_35;
                        }
                        if (CFEqual(a2, CFSTR("TimePitchAlgorithm")))
                        {
                          IsApplicationAuthorized = itemfig_assureBasicsReadyForInspection(a1);
                          DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 1464);
                          goto LABEL_61;
                        }
                        if (CFEqual(a2, CFSTR("AudioProcessingUnits")))
                        {
                          DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 1480);
                          if (!DictionaryRepresentation)
                            goto LABEL_36;
                          goto LABEL_35;
                        }
                        if (CFEqual(a2, CFSTR("AudioCurves")))
                        {
                          DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 1472);
                          if (!DictionaryRepresentation)
                            goto LABEL_36;
                          goto LABEL_35;
                        }
                        if (CFEqual(a2, CFSTR("DisplayNonForcedSubtitles")))
                        {
                          v53 = (CFStringRef *)MEMORY[0x1E0C9AE50];
                          v54 = *(unsigned __int8 *)(DerivedStorage + 1020);
                        }
                        else
                        {
                          if (CFEqual(a2, CFSTR("AutomaticallyLoadedAssetProperties")))
                          {
                            DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 1224);
                            if (!DictionaryRepresentation)
                              goto LABEL_36;
                            goto LABEL_35;
                          }
                          if (CFEqual(a2, CFSTR("AutomaticallyLoadedAssetTrackProperties")))
                          {
                            DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 1232);
                            if (!DictionaryRepresentation)
                              goto LABEL_36;
                            goto LABEL_35;
                          }
                          if (CFEqual(a2, CFSTR("CanPlayUpTo2xForward")))
                            goto LABEL_397;
                          if (CFEqual(a2, CFSTR("HasEnabledAudio")))
                          {
                            v53 = (CFStringRef *)MEMORY[0x1E0C9AE50];
                            v54 = *(unsigned __int8 *)(DerivedStorage + 2017);
                          }
                          else if (CFEqual(a2, CFSTR("HasEnabledVideo")))
                          {
                            v53 = (CFStringRef *)MEMORY[0x1E0C9AE50];
                            v54 = *(unsigned __int8 *)(DerivedStorage + 2018);
                          }
                          else if (CFEqual(a2, CFSTR("HasDiscoveredVideo")))
                          {
                            v53 = (CFStringRef *)MEMORY[0x1E0C9AE50];
                            v54 = *(unsigned __int8 *)(DerivedStorage + 2019);
                          }
                          else if (CFEqual(a2, CFSTR("PlayHapticTracks")))
                          {
                            v53 = (CFStringRef *)MEMORY[0x1E0C9AE50];
                            v54 = *(unsigned __int8 *)(DerivedStorage + 1023);
                          }
                          else
                          {
                            if (CFEqual(a2, CFSTR("HapticPlaybackLocality")))
                            {
                              DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 1032);
                              if (!DictionaryRepresentation)
                                goto LABEL_36;
                              goto LABEL_35;
                            }
                            if (CFEqual(a2, CFSTR("AudioSpatializationAllowed")))
                            {
                              v53 = (CFStringRef *)MEMORY[0x1E0C9AE50];
                              v54 = *(unsigned __int8 *)(DerivedStorage + 1392);
                            }
                            else
                            {
                              if (!CFEqual(a2, CFSTR("StereoAudioSpatializationAllowed")))
                              {
                                if (CFEqual(a2, CFSTR("CoordinationIdentifier")))
                                {
                                  DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 2032);
                                  if (DictionaryRepresentation)
                                    goto LABEL_35;
                                  v103 = (CFStringRef *)(DerivedStorage + 2032);
                                  FPSupport_CreateDefaultCoordinationIdentifierForPlaybackItem((uint64_t)a1, v103);
                                  DictionaryRepresentation = *v103;
                                  if (*v103)
                                    goto LABEL_35;
                                  goto LABEL_393;
                                }
                                if (CFEqual(a2, CFSTR("ParticipatesInCoordinatedPlayback")))
                                {
                                  v62 = (__CFString **)MEMORY[0x1E0C9AE50];
                                  v63 = *(unsigned __int8 *)(DerivedStorage + 2040);
                                  goto LABEL_171;
                                }
                                if (CFEqual(a2, CFSTR("IsCoordinatedPlaybackSupported")))
                                  goto LABEL_397;
                                if (!CFEqual(a2, CFSTR("ReportingAgent")))
                                {
                                  if (CFEqual(a2, CFSTR("ArtificiallyDelayPreparingItemForTestingOnly")))
                                  {
                                    DictionaryRepresentation = (CFStringRef)FigCFNumberCreateFloat64();
                                    goto LABEL_36;
                                  }
                                  if (CFEqual(a2, CFSTR("SpeedRampData")))
                                  {
                                    DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 2072);
                                    if (!DictionaryRepresentation)
                                      goto LABEL_36;
                                    goto LABEL_35;
                                  }
                                  if (!CFEqual(a2, CFSTR("UniqueInstanceIdentifier")))
                                  {
                                    if (CFEqual(a2, CFSTR("ImageQueueGauge")))
                                    {
                                      DictionaryRepresentation = (CFStringRef)itemfig_copyImageQueueGauge((uint64_t)a1, (uint64_t)a3);
                                      goto LABEL_36;
                                    }
                                    if (!CFEqual(a2, CFSTR("PriorImageQueueGauge")))
                                    {
                                      IsApplicationAuthorized = 4294954512;
                                      goto LABEL_46;
                                    }
                                    DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 2136);
                                    if (!DictionaryRepresentation)
                                      goto LABEL_36;
                                    goto LABEL_35;
                                  }
                                  v105 = *(const __CFString **)(DerivedStorage + 2128);
                                  if (v105)
                                  {
                                    DictionaryRepresentation = CFStringCreateCopy(a3, v105);
                                    goto LABEL_36;
                                  }
                                  goto LABEL_53;
                                }
                                MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 1896));
                                v104 = *(void **)(DerivedStorage + 1904);
                                if (v104)
                                  v104 = (void *)CFRetain(v104);
                                *a4 = (__CFDictionary *)v104;
                                v87 = *(_QWORD *)(DerivedStorage + 1896);
LABEL_240:
                                MEMORY[0x19402EF04](v87);
                                goto LABEL_58;
                              }
                              v53 = (CFStringRef *)MEMORY[0x1E0C9AE50];
                              v54 = *(unsigned __int8 *)(DerivedStorage + 1393);
                            }
                          }
                        }
                      }
LABEL_117:
                      if (!v54)
                        v53 = (CFStringRef *)MEMORY[0x1E0C9AE40];
                      DictionaryRepresentation = *v53;
                      if (!*v53)
                        goto LABEL_36;
                      goto LABEL_35;
                    }
                    v102 = *(const __CFDictionary **)(DerivedStorage + 1784);
                    if (!v102)
                      goto LABEL_53;
                  }
                  DictionaryRepresentation = (CFStringRef)CFDictionaryCreateCopy(a3, v102);
                  goto LABEL_36;
                }
                v72 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
                v73 = (CMTimeRange *)(DerivedStorage + 1428);
              }
            }
          }
          v74 = kCFNumberFloat32Type;
          goto LABEL_157;
        }
        MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 1400));
        v93 = *(__CFDictionary **)(DerivedStorage + 1416);
        if (!v93)
        {
LABEL_269:
          *a4 = v93;
          MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 1400));
          goto LABEL_58;
        }
LABEL_268:
        v93 = (__CFDictionary *)CFRetain(v93);
        goto LABEL_269;
      }
      MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 1400));
      v90 = kFigPlaybackItemWillKeepUpPrediction_LikelyToKeepUp;
      v91 = *(_DWORD *)(DerivedStorage + 1424);
      v92 = kFigPlaybackItemWillKeepUpPrediction_UnlikelyToKeepUp;
    }
    if (v91)
      v90 = v92;
    v93 = (__CFDictionary *)*v90;
    goto LABEL_268;
  }
  v81 = *MEMORY[0x1E0C9AE40];
  keys.start.value = *MEMORY[0x1E0C9AE40];
  v82 = *(const __CFNumber **)(DerivedStorage + 1168);
  if (v82)
  {
    values.start.value = 0;
    CFNumberGetValue(v82, kCFNumberSInt64Type, &values);
    v71 = *MEMORY[0x1E0C9AE50];
    if (!values.start.value)
      v71 = v81;
    keys.start.value = v71;
    if (v71 != v81)
      goto LABEL_217;
  }
  itemfig_assureContentProtectionReadyForInspection(a1);
  v83 = *(_QWORD *)(DerivedStorage + 1160);
  if (!v83)
  {
    v71 = v81;
    goto LABEL_217;
  }
  v84 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v84)
  {
    IsApplicationAuthorized = 4294954514;
    goto LABEL_46;
  }
  IsApplicationAuthorized = v84(v83, CFSTR("ExternalProtectionRequiredForPlayback"), a3, &keys);
  if (!(_DWORD)IsApplicationAuthorized)
  {
    v71 = keys.start.value;
LABEL_217:
    IsApplicationAuthorized = 0;
LABEL_154:
    *a4 = (__CFDictionary *)v71;
  }
LABEL_46:
  CFRelease(v10);
  return IsApplicationAuthorized;
}

uint64_t itemasync_GetDuration(const void *a1, uint64_t a2)
{
  _DWORD *DerivedStorage;
  uint64_t v5;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = 0;
  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v5 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)a2 = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v5 + 16);
  if (*DerivedStorage)
    return FigSignalErrorAt();
  v7 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v7)
  {
    v8 = (const void *)v7;
    if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
    {
      v11 = FigSignalErrorAt();
      v10 = 0;
    }
    else
    {
      v9 = playerasync_createCommand(v8, 29, a1, &v13);
      v10 = (_DWORD *)v13;
      if ((_DWORD)v9)
      {
        v11 = v9;
      }
      else
      {
        *(_QWORD *)(v13 + 32) = a2;
        playerasync_runSynchronousCommand((uint64_t)v8, v10);
        v11 = v10[7];
      }
    }
    fpa_releaseCommand(v10);
    CFRelease(v8);
    return v11;
  }
  else
  {
    v12 = FigSignalErrorAt();
    fpa_releaseCommand(0);
    return v12;
  }
}

uint64_t itemfig_GetDuration(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  CMTimeEpoch v9;
  uint64_t v10;
  uint64_t v11;
  CMTimeEpoch epoch;
  int v13;
  uint64_t v14;
  CMTime *v15;
  uint64_t CMBaseObject;
  uint64_t (*v17)(uint64_t, const __CFString *, uint64_t, CMTime *);
  const void *value;
  __int128 v19;
  uint64_t FigBaseObject;
  unsigned int (*v21)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *);
  BOOL v22;
  __int128 v23;
  CMTime time2;
  CFDictionaryRef dictionaryRepresentation;
  CMTime time1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = CMBaseObjectGetDerivedStorage();
  dictionaryRepresentation = 0;
  if (*(_BYTE *)DerivedStorage || !a2)
    return FigSignalErrorAt();
  v7 = v5;
  v8 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)a2 = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v8 + 16);
  if ((*(_DWORD *)(DerivedStorage + 248) & 0x1D) != 1)
    goto LABEL_9;
  time1 = *(CMTime *)(DerivedStorage + 236);
  v23 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&time2.value = *MEMORY[0x1E0CA2E68];
  v9 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  time2.epoch = v9;
  if (CMTimeCompare(&time1, &time2) < 0)
    goto LABEL_9;
  if ((*(_DWORD *)(DerivedStorage + 272) & 0x1D) == 1
    && (time1 = *(CMTime *)(DerivedStorage + 260),
        *(_OWORD *)&time2.value = v23,
        time2.epoch = v9,
        CMTimeCompare(&time1, &time2) >= 1))
  {
    v10 = 0;
    v11 = MEMORY[0x1E0CA2E30];
    *(_OWORD *)a2 = *MEMORY[0x1E0CA2E30];
    epoch = *(_QWORD *)(v11 + 16);
  }
  else
  {
LABEL_9:
    v13 = *(unsigned __int8 *)(v7 + 78);
    v14 = *MEMORY[0x1E0C9AE00];
    if (v13
      || (FigBaseObject = FigPlaybackItemGetFigBaseObject(a1),
          (v21 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48)) == 0)
      || (!v21(FigBaseObject, CFSTR("EstimatedDuration"), v14, &dictionaryRepresentation)
        ? (v22 = dictionaryRepresentation == 0)
        : (v22 = 1),
          v22))
    {
      v15 = (CMTime *)CMBaseObjectGetDerivedStorage();
      time2.value = 0;
      CMBaseObject = FigAssetGetCMBaseObject(v15[50].epoch);
      v17 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
      if (v17)
      {
        v10 = v17(CMBaseObject, CFSTR("Duration"), v14, &time2);
        value = (const void *)time2.value;
        if (!(_DWORD)v10)
        {
          CMTimeMakeFromDictionary(&time1, (CFDictionaryRef)time2.value);
          v15[49] = time1;
          value = (const void *)time2.value;
        }
        if (value)
          CFRelease(value);
        if (!(_DWORD)v10)
        {
          v19 = *(_OWORD *)(DerivedStorage + 1176);
          *(_QWORD *)(a2 + 16) = *(_QWORD *)(DerivedStorage + 1192);
          *(_OWORD *)a2 = v19;
        }
      }
      else
      {
        v10 = 4294954514;
      }
      goto LABEL_26;
    }
    CMTimeMakeFromDictionary(&time1, dictionaryRepresentation);
    v10 = 0;
    *(_OWORD *)a2 = *(_OWORD *)&time1.value;
    epoch = time1.epoch;
  }
  *(_QWORD *)(a2 + 16) = epoch;
LABEL_26:
  if (dictionaryRepresentation)
    CFRelease(dictionaryRepresentation);
  return v10;
}

uint64_t playerasync_AddToPlayQueue(void *a1, const void *a2, const void *a3)
{
  _DWORD *DerivedStorage;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  const void *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  CFTypeRef v17;
  _QWORD *v18;
  _QWORD *v19;

  v19 = 0;
  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v7 = (_DWORD *)CMBaseObjectGetDerivedStorage();
    if (a3)
    {
LABEL_3:
      v8 = (_DWORD *)CMBaseObjectGetDerivedStorage();
      goto LABEL_6;
    }
  }
  else
  {
    v7 = 0;
    if (a3)
      goto LABEL_3;
  }
  v8 = 0;
LABEL_6:
  if (*DerivedStorage || !a2 || *v7)
    return FigSignalErrorAt();
  if (!v8)
  {
    v10 = FigCFWeakReferenceHolderCopyReferencedObject();
    if ((void *)v10 == a1)
    {
      v12 = 0;
LABEL_18:
      v16 = playerasync_createCommand(a1, 6, a2, &v19);
      if ((_DWORD)v16)
      {
        v14 = v16;
        v15 = v19;
      }
      else
      {
        if (a3)
          v17 = CFRetain(a3);
        else
          v17 = 0;
        v18 = v19;
        v19[4] = v17;
        playerasync_runAsynchronousCommand(a1, v18);
        v15 = 0;
        v14 = 0;
      }
      goto LABEL_23;
    }
LABEL_28:
    a1 = (void *)v10;
    v14 = FigSignalErrorAt();
    v15 = 0;
    v12 = 0;
    goto LABEL_23;
  }
  if (*v8)
    return FigSignalErrorAt();
  v10 = FigCFWeakReferenceHolderCopyReferencedObject();
  if ((void *)v10 != a1)
    goto LABEL_28;
  v11 = FigCFWeakReferenceHolderCopyReferencedObject();
  v12 = a1;
  if ((void *)v11 == a1)
    goto LABEL_18;
  v13 = (const void *)v11;
  v14 = FigSignalErrorAt();
  v15 = 0;
  v12 = v13;
LABEL_23:
  fpa_releaseCommand(v15);
  if (a1)
    CFRelease(a1);
  if (v12)
    CFRelease(v12);
  return v14;
}

uint64_t playercentral_AddToPlayQueue(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = CMBaseObjectGetDerivedStorage();
  if (a3)
    v7 = CMBaseObjectGetDerivedStorage();
  else
    v7 = 0;
  if (*(_BYTE *)(DerivedStorage + 8))
    return FigSignalErrorAt();
  v9 = *(_QWORD *)(DerivedStorage + 16);
  if (!v9 || *(_BYTE *)(v6 + 16))
    return FigSignalErrorAt();
  if (!v7)
  {
    v10 = 0;
    goto LABEL_13;
  }
  if (*(_BYTE *)(v7 + 16))
    return FigSignalErrorAt();
  v10 = *(_QWORD *)(v7 + 8);
LABEL_13:
  v11 = *(_QWORD *)(v6 + 8);
  v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v12)
  {
    if (!v12(v9, v11, v10))
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 88));
      CFSetAddValue(*(CFMutableSetRef *)(DerivedStorage + 80), a2);
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 88));
    }
  }
  return 0;
}

uint64_t playerfig_AddToPlayQueue(uint64_t a1, void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _DWORD *v8;
  const char *v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t AssetBasicsIfReady;
  __CFArray *v19;
  CFIndex Count;
  CFIndex FirstIndexOfValue;
  CFIndex v22;
  const void *ValueAtIndex;
  NSObject *v24;
  const void *v25;
  CFIndex v26;
  NSObject *v27;
  NSObject *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  NSObject *v32;
  __int128 __dst;
  uint64_t v34;
  CFRange v35;
  CFRange v36;

  v34 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2AC8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v8 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    if (a1)
      v9 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
    else
      v9 = "";
    strncpy((char *)&__dst, v9, 8uLL);
    if (a2)
      v10 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
    else
      v10 = "";
    strncpy((char *)&__dst, v10, 8uLL);
    if (a3)
      v11 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
    else
      v11 = "";
    strncpy((char *)&__dst, v11, 8uLL);
    kdebug_trace();
  }
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  if (!a2)
    return FigSignalErrorAt();
  v12 = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)v12)
    return FigSignalErrorAt();
  v13 = v12;
  if (*(_QWORD *)(v12 + 8) != a1)
    return FigSignalErrorAt();
  if (a3)
  {
    v16 = CMBaseObjectGetDerivedStorage();
    if (*(_BYTE *)v16)
      return FigSignalErrorAt();
    v17 = v16;
    if (*(_QWORD *)(v16 + 8) != a1)
      return FigSignalErrorAt();
  }
  else
  {
    v17 = 0;
  }
  if (*(_BYTE *)(v13 + 1240)
    || *(_BYTE *)(v13 + 1242)
    || (*(_BYTE *)(v13 + 1242) = 1,
        AssetBasicsIfReady = itemfig_retrieveAssetBasicsIfReady(a2),
        !(_DWORD)AssetBasicsIfReady))
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
    if (!*(_BYTE *)(v13 + 1) && (!a3 || *(_BYTE *)(v17 + 1)))
    {
      v19 = *(__CFArray **)(v13 + 1512);
      if (v19)
        CFArrayRemoveAllValues(v19);
      if (*(_BYTE *)(DerivedStorage + 813) && dword_1EE2A2AC8)
      {
        v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      *(_BYTE *)(DerivedStorage + 813) = 0;
      Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504));
      if (a3)
      {
        v35.location = 0;
        v35.length = Count;
        FirstIndexOfValue = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(DerivedStorage + 504), v35, a3);
        if (FirstIndexOfValue != -1)
        {
          v22 = FirstIndexOfValue + 1;
          if (FirstIndexOfValue + 1 < Count)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), v22);
            playerfig_maybeUndoQueueingForItem(a1, ValueAtIndex);
          }
LABEL_44:
          v25 = *(const void **)(DerivedStorage + 512);
          if (v25)
          {
            v36.location = 0;
            v36.length = Count;
            v26 = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(DerivedStorage + 504), v36, v25);
            if (v26 == -1)
            {
              v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              *(_QWORD *)(DerivedStorage + 512) = 0;
              goto LABEL_58;
            }
            if (v22 <= v26)
            {
              if (!dword_1EE2A2AC8)
                goto LABEL_58;
              goto LABEL_57;
            }
            if (v22 == v26 + 1 && *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 496) && dword_1EE2A2AC8)
            {
LABEL_57:
              v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
          }
          else if (!Count && dword_1EE2A2AC8)
          {
            goto LABEL_57;
          }
LABEL_58:
          CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 504), v22, a2);
          *(_BYTE *)(v13 + 1) = 1;
          itemfig_reportingAgentReportEnqueueTime();
        }
        v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v22 = Count;
      goto LABEL_44;
    }
    v14 = FigSignalErrorAt();
    MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 496));
  }
  else
  {
    v14 = AssetBasicsIfReady;
  }
  if (*v8 == 1)
  {
    if (a1)
      v29 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
    else
      v29 = "";
    strncpy((char *)&__dst, v29, 8uLL);
    v30 = CMBaseObjectGetDerivedStorage();
    strncpy((char *)&__dst, (const char *)(v30 + 2048), 8uLL);
    if (a3)
      v31 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
    else
      v31 = "";
    strncpy((char *)&__dst, v31, 8uLL);
    kdebug_trace();
  }
  return v14;
}

uint64_t itemfig_copyFormatDescription(uint64_t a1, uint64_t *a2)
{
  uint64_t FigBaseObject;
  uint64_t (*v4)(uint64_t, const __CFString *, _QWORD, CFArrayRef *);
  uint64_t v5;
  uint64_t v6;
  CFArrayRef theArray;

  theArray = 0;
  FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  v4 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (v4)
  {
    v5 = v4(FigBaseObject, CFSTR("TrackFormatDescriptionArray"), *MEMORY[0x1E0C9AE00], &theArray);
    if (!(_DWORD)v5)
    {
      if (!theArray)
        return 4294954513;
      if (CFArrayGetCount(theArray))
      {
        CFArrayGetValueAtIndex(theArray, 0);
        v6 = 0;
        *a2 = FigFormatDescriptionRetain();
        goto LABEL_7;
      }
      v5 = FigSignalErrorAt();
    }
    v6 = v5;
  }
  else
  {
    v6 = 4294954514;
  }
LABEL_7:
  if (theArray)
    CFRelease(theArray);
  return v6;
}

uint64_t FigMetadataReaderGetClassID()
{
  MEMORY[0x19402F294](&FigMetadataReaderGetClassID_sRegisterFigMetadataReaderBaseTypeOnce, RegisterFigMetadataReaderBaseType);
  return sFigMetadataReaderClassID;
}

uint64_t RegisterFigMetadataReaderBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigMetadataValidateHandlerType(uint64_t a1, unint64_t a2)
{
  if (a2 < 0x18)
    return 4294954687;
  else
    return FigAtomStreamReadCurrentAtomData();
}

uint64_t FigiTunesMetadataCopyValue(uint64_t a1, CFTypeRef cf1, uint64_t a3, uint64_t a4, uint64_t a5, CFTypeRef *a6, CFTypeRef *a7)
{
  uint64_t (*v14)(uint64_t, CFTypeRef, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, CFTypeRef, uint64_t, uint64_t, uint64_t, CFTypeRef *, CFTypeRef *);
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  CFTypeRef v24;
  CFTypeRef cf;

  v24 = 0;
  cf = 0;
  if (a1)
  {
    if (a3 && cf1 && a6 && (CFEqual(cf1, CFSTR("comn")) || CFEqual(cf1, CFSTR("itsk")) || CFEqual(cf1, CFSTR("itlk"))))
    {
      v14 = *(uint64_t (**)(uint64_t, CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
      if (!v14 || (v15 = v14(a1, cf1, a3), v15 < 1))
      {
        v21 = 0;
        v20 = 0;
        goto LABEL_25;
      }
      v16 = v15;
      v17 = 0;
      while (1)
      {
        v18 = *(uint64_t (**)(uint64_t, CFTypeRef, uint64_t, uint64_t, uint64_t, CFTypeRef *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
        if (!v18)
          break;
        v19 = v18(a1, cf1, a3, v17, a5, &cf, &v24);
        if (v19)
        {
          v20 = v19;
LABEL_22:
          if (cf)
            CFRelease(cf);
          goto LABEL_24;
        }
        if (!a4 || CFGetTypeID(cf) == a4)
        {
          *a6 = cf;
          cf = 0;
          v20 = 0;
          if (a7)
          {
            *a7 = v24;
            v21 = 1;
            goto LABEL_27;
          }
          v21 = 1;
          goto LABEL_25;
        }
        CFRelease(cf);
        cf = 0;
        CFRelease(v24);
        v24 = 0;
        if (v16 == ++v17)
        {
          v20 = 0;
          goto LABEL_22;
        }
      }
      v20 = -12782;
      goto LABEL_22;
    }
    v20 = FigSignalErrorAt();
LABEL_24:
    v21 = 0;
LABEL_25:
    if (v24)
      CFRelease(v24);
  }
  else
  {
    v20 = FigSignalErrorAt();
    v21 = 0;
  }
LABEL_27:
  if (a4)
    v22 = -12608;
  else
    v22 = -12607;
  if (v21 | v20)
    return v20;
  else
    return v22;
}

char *FigiTunesMetadataGetItemCount(const void *a1, const void *a2, const __CFString *a3)
{
  uint64_t DerivedStorage;
  uint64_t CommonKeyToShortKeyMapping;
  const __CFDictionary *v8;
  CFTypeID v9;
  int v10;
  int v11;
  CFTypeID v12;
  CFTypeID v13;
  CFTypeID v14;
  char *v15;
  const __CFAllocator *v16;
  int v17;
  CFStringRef v18;
  int DataAtomCount;
  int Atom;
  char *v21;
  CFStringRef theString2;
  uint64_t valuePtr;
  _OWORD v25[7];
  _OWORD v26[7];
  char *v27;

  v27 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CommonKeyToShortKeyMapping = FigiTunesMetadataGetCommonKeyToShortKeyMapping();
  if (!DerivedStorage)
    goto LABEL_53;
  memset(v26, 0, sizeof(v26));
  memset(v25, 0, sizeof(v25));
  valuePtr = 0;
  if (a2)
  {
    v8 = (const __CFDictionary *)CommonKeyToShortKeyMapping;
    if (CFEqual(a2, CFSTR("comn")))
    {
      if (a3)
      {
        v9 = CFGetTypeID(a3);
        if (v9 == CFStringGetTypeID())
        {
          HIDWORD(valuePtr) = CFDictionaryGetValue(v8, a3);
          if (!HIDWORD(valuePtr))
            return 0;
          goto LABEL_22;
        }
      }
    }
    else if (CFEqual(a2, CFSTR("itsk")))
    {
      if (!a3)
        goto LABEL_22;
      v12 = CFGetTypeID(a3);
      if (v12 == CFStringGetTypeID())
      {
        if (!FigiTunesMetadataShortStringKeyToOSTypeKey(a3, (unsigned int *)&valuePtr + 1))
          goto LABEL_53;
      }
      else
      {
        v14 = CFGetTypeID(a3);
        if (v14 != CFNumberGetTypeID()
          || !CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, (char *)&valuePtr + 4))
        {
          goto LABEL_53;
        }
      }
      if (HIDWORD(valuePtr) != 757935405)
      {
LABEL_22:
        v10 = 0;
        v11 = 1;
LABEL_23:
        if (*(uint64_t *)(DerivedStorage + 24) < 1
          || FigiTunesMetadataGetItemListAtomStream(DerivedStorage, (uint64_t)v26, 0))
        {
          return 0;
        }
        v15 = 0;
        if (!a2)
        {
          v11 = 1;
          v10 = 1;
        }
        while (1)
        {
          if (FigAtomStreamGetCurrentAtomTypeAndDataLength())
            return 0;
          if ((_DWORD)valuePtr == 757935405)
          {
            if (v10)
            {
              if (!a3)
              {
                theString2 = 0;
                DataAtomCount = FigiTunesMetadataGetDataAtomCount((uint64_t)v25, &theString2);
                v15 = (char *)theString2 + (_QWORD)v15;
                v27 = v15;
                goto LABEL_39;
              }
              theString2 = 0;
              v16 = CFGetAllocator(a1);
              v17 = FigiTunesMetadataCopyLongKey((uint64_t)v25, v16, &theString2);
              if (v17)
                goto LABEL_54;
              v18 = theString2;
              if (theString2)
              {
                if (CFStringCompare(a3, theString2, 0) == kCFCompareEqualTo)
                {
                  DataAtomCount = FigiTunesMetadataGetDataAtomCount((uint64_t)v25, &v27);
                  CFRelease(v18);
                  goto LABEL_48;
                }
                CFRelease(v18);
              }
            }
          }
          else if (v11 && (!a3 || HIDWORD(valuePtr) == (_DWORD)valuePtr))
          {
            theString2 = 0;
            DataAtomCount = FigiTunesMetadataGetDataAtomCount((uint64_t)v25, &theString2);
            if (a3)
              v21 = 0;
            else
              v21 = v15;
            v15 = (char *)theString2 + (_QWORD)v21;
            v27 = (char *)theString2 + (_QWORD)v21;
            if (a3)
              goto LABEL_48;
            goto LABEL_39;
          }
          DataAtomCount = 0;
LABEL_39:
          Atom = FigAtomStreamAdvanceToNextAtom();
          if (Atom)
          {
            if (Atom != -12890)
              return 0;
            goto LABEL_48;
          }
        }
      }
    }
    else if (CFEqual(a2, CFSTR("itlk")))
    {
      if (!a3 || (v13 = CFGetTypeID(a3), v13 == CFStringGetTypeID()))
      {
        v11 = 0;
        v10 = 1;
        goto LABEL_23;
      }
    }
  }
  else if (!a3)
  {
    v10 = 0;
    v11 = 0;
    goto LABEL_23;
  }
LABEL_53:
  v17 = FigSignalErrorAt();
LABEL_54:
  DataAtomCount = v17;
LABEL_48:
  if (DataAtomCount)
    return 0;
  else
    return v27;
}

uint64_t FigiTunesMetadataGetCommonKeyToShortKeyMapping()
{
  MEMORY[0x19402F294](&FigiTunesMetadataSetUpCommonKeyMappingOnce_sCreateKeyArrayOnce, FigiTunesMetadataSetUpCommonKeyMapping);
  return giTunesMetadataCommonKeyToShortKeyDict;
}

CFDictionaryRef FigiTunesMetadataSetUpCommonKeyMapping()
{
  const __CFAllocator *v0;
  CFDictionaryRef result;
  const void *v2[15];
  void *keys[13];

  keys[12] = *(void **)MEMORY[0x1E0C80C00];
  keys[0] = CFSTR("title");
  keys[1] = CFSTR("description");
  keys[2] = CFSTR("publisher");
  keys[3] = CFSTR("contributor");
  keys[4] = CFSTR("type");
  keys[5] = CFSTR("source");
  keys[6] = CFSTR("copyrights");
  keys[7] = CFSTR("albumName");
  keys[8] = CFSTR("author");
  keys[9] = CFSTR("artist");
  keys[10] = CFSTR("artwork");
  keys[11] = CFSTR("software");
  v2[0] = CFSTR("title");
  v2[1] = CFSTR("description");
  v2[2] = CFSTR("publisher");
  v2[3] = CFSTR("contributor");
  v2[4] = CFSTR("contributor");
  v2[5] = CFSTR("contributor");
  v2[6] = CFSTR("contributor");
  v2[7] = CFSTR("type");
  v2[8] = CFSTR("source");
  v2[9] = CFSTR("copyrights");
  v2[10] = CFSTR("albumName");
  v2[11] = CFSTR("author");
  v2[12] = CFSTR("artist");
  v2[13] = CFSTR("artwork");
  v2[14] = CFSTR("software");
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  giTunesMetadataCommonKeyToShortKeyDict = (uint64_t)CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)&FigiTunesMetadataSetUpCommonKeyMapping_toShortKeys, 12, MEMORY[0x1E0C9B390], 0);
  result = CFDictionaryCreate(v0, (const void **)&FigiTunesMetadataSetUpCommonKeyMapping_fromShortKeys, v2, 15, 0, MEMORY[0x1E0C9B3A0]);
  giTunesMetadataShortKeyToCommonKeyDict = (uint64_t)result;
  return result;
}

CFIndex FigiTunesMetadataShortStringKeyToOSTypeKey(const __CFString *a1, unsigned int *a2)
{
  unsigned int Value;
  CFIndex result;
  UInt8 buffer[4];
  CFRange v7;

  MEMORY[0x19402F294](&FigiTunesMetadataSetUpStringKeyMappingOnce_sCreateKeyArrayOnce, FigiTunesMetadataSetUpStringKeyMapping);
  Value = CFDictionaryGetValue((CFDictionaryRef)giTunesMetadataShortStringKeyToOSTypeKeyDict, a1);
  *(_DWORD *)buffer = Value;
  if (Value)
    goto LABEL_2;
  if (CFStringGetLength(a1) != 4)
    return 0;
  v7.location = 0;
  v7.length = 4;
  result = CFStringGetBytes(a1, v7, 0, 0, 0, buffer, 4, 0);
  if (result)
  {
    Value = bswap32(*(unsigned int *)buffer);
LABEL_2:
    *a2 = Value;
    return 1;
  }
  return result;
}

CFDictionaryRef FigiTunesMetadataSetUpStringKeyMapping()
{
  const __CFAllocator *v0;
  CFDictionaryRef result;
  void *keys[51];

  keys[50] = *(void **)MEMORY[0x1E0C80C00];
  keys[0] = CFSTR("@alb");
  keys[1] = CFSTR("@ART");
  keys[2] = CFSTR("@cmt");
  keys[3] = CFSTR("covr");
  keys[4] = CFSTR("cprt");
  keys[5] = CFSTR("@day");
  keys[6] = CFSTR("@enc");
  keys[7] = CFSTR("gnre");
  keys[8] = CFSTR("@gen");
  keys[9] = CFSTR("@nam");
  keys[10] = CFSTR("@st3");
  keys[11] = CFSTR("@too");
  keys[12] = CFSTR("@wrt");
  keys[13] = CFSTR("aART");
  keys[14] = CFSTR("akID");
  keys[15] = CFSTR("apID");
  keys[16] = CFSTR("atID");
  keys[17] = CFSTR("cnID");
  keys[18] = CFSTR("cpil");
  keys[19] = CFSTR("disk");
  keys[20] = CFSTR("geID");
  keys[21] = CFSTR("grup");
  keys[22] = CFSTR("plID");
  keys[23] = CFSTR("rtng");
  keys[24] = CFSTR("tmpo");
  keys[25] = CFSTR("trkn");
  keys[26] = CFSTR("stik");
  keys[27] = CFSTR("purd");
  keys[28] = CFSTR("@ard");
  keys[29] = CFSTR("@arg");
  keys[30] = CFSTR("@aut");
  keys[31] = CFSTR("@lyr");
  keys[32] = CFSTR("@cak");
  keys[33] = CFSTR("@con");
  keys[34] = CFSTR("@des");
  keys[35] = CFSTR("@dir");
  keys[36] = CFSTR("@equ");
  keys[37] = CFSTR("@lnt");
  keys[38] = CFSTR("@mak");
  keys[39] = CFSTR("@ope");
  keys[40] = CFSTR("@phg");
  keys[41] = CFSTR("@prd");
  keys[42] = CFSTR("@prf");
  keys[43] = CFSTR("@pub");
  keys[44] = CFSTR("@sne");
  keys[45] = CFSTR("@sol");
  keys[46] = CFSTR("@src");
  keys[47] = CFSTR("@thx");
  keys[48] = CFSTR("@url");
  keys[49] = CFSTR("@xpd");
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  giTunesMetadataShortStringKeyToOSTypeKeyDict = (uint64_t)CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)&FigiTunesMetadataSetUpStringKeyMapping_iTunesShortOSTypeKeys, 50, MEMORY[0x1E0C9B390], 0);
  result = CFDictionaryCreate(v0, (const void **)&FigiTunesMetadataSetUpStringKeyMapping_iTunesShortOSTypeKeys, (const void **)keys, 50, 0, MEMORY[0x1E0C9B3A0]);
  giTunesMetadataOSTypeKeyToShortStringKeyDict = (uint64_t)result;
  return result;
}

uint64_t FigiTunesMetadataGetItemListAtomStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (*(uint64_t *)(a1 + 24) < 1)
    return 0;
  result = FigAtomStreamInitWithByteStream();
  if (!(_DWORD)result)
  {
    if (a3 < 0)
      return FigSignalErrorAt();
    else
      return FigAtomStreamInitWithParent();
  }
  return result;
}

void itemfig_antiprepare()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2AC8 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  itemfig_unregisterPlayabilityMonitor();
}

uint64_t FigAudioQueueRenderPipelineCreate(const __CFAllocator *a1, const __CFDictionary *a2, _QWORD *a3)
{
  uint64_t v6;
  CFTypeRef v7;
  uint64_t DerivedStorage;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  dispatch_queue_t v12;
  int BooleanIfPresent;
  char v14;
  uint64_t v15;
  uint64_t v16;
  CFMutableDictionaryRef Mutable;
  const opaqueCMFormatDescription *Value;
  const opaqueCMFormatDescription *v19;
  int v20;
  BOOL v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  int v31;
  BOOL v32;
  int v33;
  BOOL v34;
  int v35;
  BOOL v36;
  int v37;
  BOOL v38;
  int v39;
  BOOL v40;
  int v41;
  BOOL v42;
  int v43;
  BOOL v44;
  int v45;
  BOOL v46;
  int v47;
  const __CFAllocator *v48;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  uint64_t v50;
  uint64_t v52;
  const __CFAllocator *v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t updated;
  _QWORD *v58;
  CFTypeRef v59;
  char __str[128];
  CFTypeRef cf;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  v58 = a3;
  if (!a3)
    return FigSignalErrorAt();
  cf = 0;
  FigRenderPipelineGetClassID();
  v6 = CMDerivedObjectCreate();
  if ((_DWORD)v6)
    return v6;
  v7 = cf;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(DerivedStorage + 220) = 0;
  v9 = (char *)(DerivedStorage + 220);
  if (FigCFDictionaryGetValueIfPresent())
    CFStringGetCString(0, v9, 10, 0x600u);
  v10 = FigReentrantMutexCreate();
  *(_QWORD *)(DerivedStorage + 8) = v10;
  if (v10)
  {
    v11 = FigSimpleMutexCreate();
    *(_QWORD *)(DerivedStorage + 48) = v11;
    if (v11)
    {
      snprintf(__str, 0x80uLL, "com.apple.coremedia.faqrp.notification.%s", v9);
      v12 = dispatch_queue_create(__str, 0);
      *(_QWORD *)(DerivedStorage + 16) = v12;
      if (v12)
      {
        LOBYTE(cf) = 0;
        FigCFDictionaryGetBooleanIfPresent();
        LOBYTE(cf) = 0;
        FigCFDictionaryGetBooleanIfPresent();
        snprintf(__str, 0x80uLL, "com.apple.coremedia.faqrp.asyncQueue.%s", v9);
        *(_QWORD *)(DerivedStorage + 24) = FigDispatchQueueCreateWithPriority();
        LOBYTE(cf) = 0;
        BooleanIfPresent = FigCFDictionaryGetBooleanIfPresent();
        v14 = (char)cf;
        if (!BooleanIfPresent)
          v14 = 0;
        *(_BYTE *)(DerivedStorage + 67) = v14;
        *(_DWORD *)(DerivedStorage + 216) = 1065353216;
        *(_WORD *)(DerivedStorage + 100) = 256;
        v15 = CMBaseObjectGetDerivedStorage();
        if (!a2)
        {
          v50 = FigSignalErrorAt();
          if ((_DWORD)v50)
            return v50;
          goto LABEL_99;
        }
        v16 = v15;
        CMBaseObjectGetDerivedStorage();
        Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        cf = 0;
        FigCFDictionarySetValueFromKeyInDict();
        FigCFDictionarySetValueFromKeyInDict();
        FigCFDictionarySetValueFromKeyInDict();
        FigCFDictionarySetValueFromKeyInDict();
        FigDispatchQueueHolderCreateWithDispatchQueue();
        FigCFDictionarySetValue();
        if (cf)
          CFRelease(cf);
        Value = (const opaqueCMFormatDescription *)CFDictionaryGetValue(a2, CFSTR("FormatDescription"));
        if (Value)
        {
          v19 = Value;
          LOBYTE(cf) = 0;
          v20 = FigCFDictionaryGetBooleanIfPresent();
          if ((_BYTE)cf)
            v21 = v20 == 0;
          else
            v21 = 1;
          if (v21)
            v22 = 0;
          else
            v22 = 32;
          LOBYTE(cf) = 0;
          v23 = FigCFDictionaryGetBooleanIfPresent();
          if ((_BYTE)cf)
            v24 = v23 == 0;
          else
            v24 = 1;
          if (!v24)
            v22 |= 0x10u;
          LOBYTE(cf) = 0;
          v25 = FigCFDictionaryGetBooleanIfPresent();
          if ((_BYTE)cf)
            v26 = v25 == 0;
          else
            v26 = 1;
          if (!v26)
            v22 |= 2u;
          LOBYTE(cf) = 0;
          v27 = FigCFDictionaryGetBooleanIfPresent();
          if ((_BYTE)cf)
            v28 = v27 == 0;
          else
            v28 = 1;
          if (!v28)
            v22 |= 0x8000u;
          LOBYTE(cf) = 0;
          v29 = FigCFDictionaryGetBooleanIfPresent();
          if ((_BYTE)cf)
            v30 = v29 == 0;
          else
            v30 = 1;
          if (!v30)
            v22 |= 4u;
          LOBYTE(cf) = 0;
          v31 = FigCFDictionaryGetBooleanIfPresent();
          if ((_BYTE)cf)
            v32 = v31 == 0;
          else
            v32 = 1;
          if (!v32)
            v22 |= 0x40u;
          LOBYTE(cf) = 0;
          v33 = FigCFDictionaryGetBooleanIfPresent();
          if ((_BYTE)cf)
            v34 = v33 == 0;
          else
            v34 = 1;
          if (!v34)
            v22 |= 0x80u;
          LOBYTE(cf) = 0;
          v35 = FigCFDictionaryGetBooleanIfPresent();
          if ((_BYTE)cf)
            v36 = 1;
          else
            v36 = v35 == 0;
          if (v36)
            v22 |= 0x200u;
          LOBYTE(cf) = 0;
          v37 = FigCFDictionaryGetBooleanIfPresent();
          if ((_BYTE)cf)
            v38 = v37 == 0;
          else
            v38 = 1;
          if (!v38)
            v22 |= 0x100u;
          LOBYTE(cf) = 0;
          v39 = FigCFDictionaryGetBooleanIfPresent();
          if ((_BYTE)cf)
            v40 = v39 == 0;
          else
            v40 = 1;
          if (!v40)
            v22 |= 0x800u;
          LOBYTE(cf) = 0;
          v41 = FigCFDictionaryGetBooleanIfPresent();
          if ((_BYTE)cf)
            v42 = v41 == 0;
          else
            v42 = 1;
          if (!v42)
            v22 |= 0x402u;
          LOBYTE(cf) = 0;
          v43 = FigCFDictionaryGetBooleanIfPresent();
          if ((_BYTE)cf)
            v44 = v43 == 0;
          else
            v44 = 1;
          if (!v44)
            v22 |= 0x2000u;
          LOBYTE(cf) = 0;
          v45 = FigCFDictionaryGetBooleanIfPresent();
          if ((_BYTE)cf)
            v46 = v45 == 0;
          else
            v46 = 1;
          v47 = v22 | 0x4000;
          if (v46)
            v47 = v22;
          *(_DWORD *)(v16 + 96) = v47;
          *(_BYTE *)(v16 + 66) = v47 & 2;
          v48 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
          v50 = CMBufferQueueCreate(v48, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(v16 + 32));
          if ((_DWORD)v50)
          {
LABEL_82:
            if (Mutable)
              CFRelease(Mutable);
            if ((_DWORD)v50)
              return v50;
LABEL_99:
            *v58 = v7;
            return v50;
          }
          v52 = CMBaseObjectGetDerivedStorage();
          v59 = 0;
          v53 = CFGetAllocator(v7);
          v54 = FigAudioQueueCreateWithOptions(v53, v19, *(_QWORD *)(v52 + 32), *(_DWORD *)(v52 + 96), Mutable, (uint64_t *)&v59);
          if ((_DWORD)v54)
          {
            v50 = v54;
            FigSignalErrorAt();
            goto LABEL_89;
          }
          CMNotificationCenterGetDefaultLocalCenter();
          v55 = FigNotificationCenterAddWeakListeners();
          if ((_DWORD)v55)
          {
            v50 = v55;
LABEL_89:
            if (v59)
              CFRelease(v59);
            goto LABEL_82;
          }
          if (dword_1EE2A2CB0)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          *(_QWORD *)(v16 + 40) = v59;
          updated = faqrp_updateTimePitchBypass();
        }
        else
        {
          updated = FigSignalErrorAt();
        }
        v50 = updated;
        goto LABEL_82;
      }
    }
  }
  return 4294954510;
}

uint64_t FigRenderPipelineGetClassID()
{
  MEMORY[0x19402F294](&FigRenderPipelineGetClassID_sRegisterFigRenderPipelineTypeOnce, RegisterFigRenderPipelineType);
  return sFigRenderPipelineClassID;
}

uint64_t RegisterFigRenderPipelineType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigAudioQueueCreate(uint64_t a1, const opaqueCMFormatDescription *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t *a8)
{
  const __CFAllocator *v12;
  const __CFDictionary *Mutable;
  uint64_t v14;

  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetValue();
  v14 = FigAudioQueueCreateWithOptions(v12, a2, a4, a7, Mutable, a8);
  if (Mutable)
    CFRelease(Mutable);
  return v14;
}

uint64_t figAudioQueueRenderPipelineSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  CFTypeID TypeID;
  CFTypeID v11;
  AudioQueueParameterValue v12;
  uint64_t v13;
  AudioQueueParameterID v14;
  CFTypeID v15;
  CFTypeID v16;
  CFTypeID v17;
  CFTypeID v18;
  CFTypeID v19;
  CFTypeID v20;
  CFTypeID v21;
  uint64_t v22;
  __CFString **v23;
  CFTypeID v24;
  int Value;
  CFTypeID v26;
  int v27;
  const void *v28;
  CFTypeID v29;
  CFTypeID v30;
  CFTypeID v31;
  CFTypeID v32;
  CFTypeID v33;
  _BOOL4 v34;
  const __CFNumber **v35;
  CFTypeID v36;
  const __CFNumber *v37;
  const __CFNumber *v38;
  const __CFNumber *SInt32;
  const __CFNumber *v40;
  float valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)DerivedStorage)
    goto LABEL_2;
  if (CFEqual(CFSTR("Timebase"), a2))
  {
    if (!a3 || (TypeID = CMTimebaseGetTypeID(), TypeID == CFGetTypeID(a3)))
    {
      faqrp_setTimebase(a1, (uint64_t)a3);
      goto LABEL_9;
    }
LABEL_2:
    v7 = FigSignalErrorAt();
LABEL_3:
    v8 = v7;
    goto LABEL_4;
  }
  if (CFEqual(CFSTR("SoftwareVolume1"), a2))
  {
    if (!a3)
      goto LABEL_2;
    v11 = CFNumberGetTypeID();
    if (v11 != CFGetTypeID(a3))
      goto LABEL_2;
    valuePtr = 1.0;
    CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, &valuePtr);
    v12 = valuePtr;
    *(float *)(DerivedStorage + 104) = valuePtr;
    if (*(_BYTE *)(DerivedStorage + 103))
      goto LABEL_9;
    v13 = *(_QWORD *)(DerivedStorage + 40);
    v14 = 1;
LABEL_39:
    v7 = FigAudioQueueSetParameter(v13, v14, v12);
    goto LABEL_3;
  }
  if (CFEqual(CFSTR("SoftwareVolume1RampDuration"), a2))
  {
    if (!a3)
      goto LABEL_2;
    v15 = CFNumberGetTypeID();
    if (v15 != CFGetTypeID(a3))
      goto LABEL_2;
    valuePtr = 0.0;
    CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, &valuePtr);
    v13 = *(_QWORD *)(DerivedStorage + 40);
    v12 = valuePtr;
    v14 = 4;
    goto LABEL_39;
  }
  if (CFEqual(CFSTR("SoftwareVolume2"), a2))
  {
    if (!a3)
      goto LABEL_2;
    v16 = CFNumberGetTypeID();
    if (v16 != CFGetTypeID(a3))
      goto LABEL_2;
    valuePtr = 1.0;
    CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, &valuePtr);
    v13 = *(_QWORD *)(DerivedStorage + 40);
    v12 = valuePtr;
    v14 = 5;
    goto LABEL_39;
  }
  if (CFEqual(CFSTR("SoftwareVolume3"), a2))
  {
    if (!a3)
      goto LABEL_2;
    v17 = CFNumberGetTypeID();
    if (v17 != CFGetTypeID(a3))
      goto LABEL_2;
    valuePtr = 1.0;
    CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, &valuePtr);
    v13 = *(_QWORD *)(DerivedStorage + 40);
    v12 = valuePtr;
    v14 = 9;
    goto LABEL_39;
  }
  if (CFEqual(CFSTR("SoftwareVolume5"), a2))
  {
    if (!a3)
      goto LABEL_2;
    v18 = CFNumberGetTypeID();
    if (v18 != CFGetTypeID(a3))
      goto LABEL_2;
    valuePtr = 1.0;
    CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, &valuePtr);
    v13 = *(_QWORD *)(DerivedStorage + 40);
    v12 = valuePtr;
    v14 = 14;
    goto LABEL_39;
  }
  if (CFEqual(CFSTR("SoftwareVolume2RampDuration"), a2))
  {
    if (!a3)
      goto LABEL_2;
    v19 = CFNumberGetTypeID();
    if (v19 != CFGetTypeID(a3))
      goto LABEL_2;
    valuePtr = 0.0;
    CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, &valuePtr);
    v13 = *(_QWORD *)(DerivedStorage + 40);
    v12 = valuePtr;
    v14 = 6;
    goto LABEL_39;
  }
  if (CFEqual(CFSTR("Pan"), a2))
  {
    if (!a3)
      goto LABEL_2;
    v20 = CFNumberGetTypeID();
    if (v20 != CFGetTypeID(a3))
      goto LABEL_2;
    valuePtr = 0.0;
    CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, &valuePtr);
    v13 = *(_QWORD *)(DerivedStorage + 40);
    v12 = valuePtr;
    v14 = 13;
    goto LABEL_39;
  }
  if (CFEqual(CFSTR("EQPreset"), a2))
  {
    if (!a3)
      goto LABEL_2;
    v21 = CFNumberGetTypeID();
    if (v21 != CFGetTypeID(a3))
      goto LABEL_2;
    v22 = *(_QWORD *)(DerivedStorage + 40);
    v23 = kFigAudioQueueProperty_EQPreset;
    goto LABEL_44;
  }
  if (CFEqual(CFSTR("Muted"), a2))
  {
    if (a3)
    {
      v24 = CFBooleanGetTypeID();
      if (v24 == CFGetTypeID(a3))
      {
        Value = CFBooleanGetValue((CFBooleanRef)a3);
        faqrp_setMuted(a1, Value);
        goto LABEL_9;
      }
    }
    goto LABEL_2;
  }
  if (CFEqual(CFSTR("Suspended"), a2))
  {
    if (a3)
    {
      v26 = CFBooleanGetTypeID();
      if (v26 == CFGetTypeID(a3))
      {
        v27 = CFBooleanGetValue((CFBooleanRef)a3);
        faqrp_setSuspended(a1, v27);
        goto LABEL_9;
      }
    }
    goto LABEL_2;
  }
  if (CFEqual(CFSTR("ClientName"), a2))
  {
    v28 = *(const void **)(DerivedStorage + 56);
    *(_QWORD *)(DerivedStorage + 56) = a3;
    if (a3)
      CFRetain(a3);
    if (v28)
      CFRelease(v28);
    v22 = *(_QWORD *)(DerivedStorage + 40);
    v23 = kFigAudioQueueProperty_ClientName;
    goto LABEL_44;
  }
  if (CFEqual(CFSTR("OfflineMixer"), a2))
  {
    v22 = *(_QWORD *)(DerivedStorage + 40);
    v23 = kFigAudioQueueProperty_OfflineMixer;
    goto LABEL_44;
  }
  if (CFEqual(CFSTR("AudioDeviceUID"), a2))
  {
    v22 = *(_QWORD *)(DerivedStorage + 40);
    v23 = kFigAudioQueueProperty_DeviceUID;
    goto LABEL_44;
  }
  if (CFEqual(CFSTR("AudioQueueClockDevice"), a2))
  {
    v22 = *(_QWORD *)(DerivedStorage + 40);
    v23 = kFigAudioQueueProperty_ClockDevice;
    goto LABEL_44;
  }
  if (CFEqual(CFSTR("AudioDeviceChannelMap"), a2))
  {
    v22 = *(_QWORD *)(DerivedStorage + 40);
    v23 = kFigAudioQueueProperty_DeviceChannelMap;
    goto LABEL_44;
  }
  if (CFEqual(CFSTR("STSLabel"), a2))
  {
    v22 = *(_QWORD *)(DerivedStorage + 40);
    v23 = kFigAudioQueueProperty_STSLabel;
    goto LABEL_44;
  }
  if (CFEqual(CFSTR("MATOriginalSourceFormat"), a2))
  {
    v22 = *(_QWORD *)(DerivedStorage + 40);
    v23 = kFigAudioQueueProperty_MATOriginalSourceFormat;
    goto LABEL_44;
  }
  if (CFEqual(CFSTR("IsTimebaseStarter"), a2))
  {
    if (a3)
    {
      v29 = CFBooleanGetTypeID();
      if (v29 == CFGetTypeID(a3))
      {
        v8 = 0;
        *(_BYTE *)(DerivedStorage + 65) = *MEMORY[0x1E0C9AE50] == (_QWORD)a3;
        goto LABEL_4;
      }
    }
    goto LABEL_9;
  }
  if (CFEqual(CFSTR("AudioProcessingUnits"), a2))
  {
    v22 = *(_QWORD *)(DerivedStorage + 40);
    v23 = kFigAudioQueueProperty_AudioProcessingUnits;
    goto LABEL_44;
  }
  if (CFEqual(CFSTR("AudioCurves"), a2))
  {
    v22 = *(_QWORD *)(DerivedStorage + 40);
    v23 = kFigAudioQueueProperty_AudioCurves;
    goto LABEL_44;
  }
  if (CFEqual(CFSTR("SecondaryAudioCurves"), a2))
  {
    v22 = *(_QWORD *)(DerivedStorage + 40);
    v23 = kFigAudioQueueProperty_SecondaryAudioCurves;
    goto LABEL_44;
  }
  if (CFEqual(CFSTR("AllowedToUseHardware"), a2))
  {
    v22 = *(_QWORD *)(DerivedStorage + 40);
    v23 = kFigAudioQueueProperty_AllowedToUseHardware;
    goto LABEL_44;
  }
  if (!CFEqual(CFSTR("HandleFormatDescriptionChanges"), a2))
  {
    if (CFEqual(CFSTR("TimePitchAlgorithm"), a2))
    {
      v22 = *(_QWORD *)(DerivedStorage + 40);
      v23 = kFigAudioQueueProperty_TimePitchAlgorithm;
    }
    else if (CFEqual(CFSTR("TrackID"), a2))
    {
      v22 = *(_QWORD *)(DerivedStorage + 40);
      v23 = kFigAudioQueueProperty_TrackID;
    }
    else if (CFEqual(CFSTR("AudioProcessingTap"), a2))
    {
      v22 = *(_QWORD *)(DerivedStorage + 40);
      v23 = kFigAudioQueueProperty_AudioProcessingTap;
    }
    else
    {
      if (CFEqual(CFSTR("PipelineRate"), a2))
      {
        if (a3)
        {
          v31 = CFNumberGetTypeID();
          if (v31 == CFGetTypeID(a3))
          {
            CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, (void *)(DerivedStorage + 216));
            goto LABEL_9;
          }
        }
        goto LABEL_2;
      }
      if (CFEqual(CFSTR("FAQRate2"), a2))
      {
        v22 = *(_QWORD *)(DerivedStorage + 40);
        v23 = kFigAudioQueueProperty_Rate2;
      }
      else if (CFEqual(CFSTR("LoudnessInfo"), a2))
      {
        v22 = *(_QWORD *)(DerivedStorage + 40);
        v23 = kFigAudioQueueProperty_LoudnessInfo;
      }
      else if (CFEqual(CFSTR("CinematicAudioParameters"), a2))
      {
        v22 = *(_QWORD *)(DerivedStorage + 40);
        v23 = kFigAudioQueueProperty_CinematicAudioParameters;
      }
      else if (CFEqual(CFSTR("AudioDynamicRangeCompression"), a2))
      {
        v22 = *(_QWORD *)(DerivedStorage + 40);
        v23 = kFigAudioQueueProperty_AudioDynamicRangeCompression;
      }
      else if (CFEqual(CFSTR("AdjustTargetLevel"), a2))
      {
        v22 = *(_QWORD *)(DerivedStorage + 40);
        v23 = kFigAudioQueueProperty_AdjustTargetLevel;
      }
      else if (CFEqual(CFSTR("AdjustCompressionProfile"), a2))
      {
        v22 = *(_QWORD *)(DerivedStorage + 40);
        v23 = kFigAudioQueueProperty_AdjustCompressionProfile;
      }
      else if (CFEqual(CFSTR("ExpectScaledEdits"), a2))
      {
        if (!a3)
          goto LABEL_9;
        v32 = CFBooleanGetTypeID();
        if (v32 != CFGetTypeID(a3))
          goto LABEL_9;
        *(_BYTE *)(DerivedStorage + 100) = CFBooleanGetValue((CFBooleanRef)a3);
        faqrp_updateTimePitchBypass();
        v22 = *(_QWORD *)(DerivedStorage + 40);
        v23 = kFigAudioQueueProperty_ExpectScaledEdits;
      }
      else if (CFEqual(CFSTR("ShouldCompensateForNeroScreenLatency"), a2))
      {
        v22 = *(_QWORD *)(DerivedStorage + 40);
        v23 = kFigAudioQueueProperty_ShouldCompensateForNeroScreenLatency;
      }
      else
      {
        if (CFEqual(CFSTR("SweepFilterSweepValue"), a2))
        {
          valuePtr = 0.0;
          CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, &valuePtr);
          v13 = *(_QWORD *)(DerivedStorage + 40);
          v12 = valuePtr;
          v14 = 22;
          goto LABEL_39;
        }
        if (CFEqual(CFSTR("SweepFilterConfiguration"), a2))
        {
          v22 = *(_QWORD *)(DerivedStorage + 40);
          v23 = kFigAudioQueueProperty_SweepFilterConfiguration;
        }
        else if (CFEqual(CFSTR("EnableSweepFilter"), a2))
        {
          v22 = *(_QWORD *)(DerivedStorage + 40);
          v23 = kFigAudioQueueProperty_EnableSweepFilter;
        }
        else if (CFEqual(CFSTR("CodecProgramTargetLevel"), a2))
        {
          v22 = *(_QWORD *)(DerivedStorage + 40);
          v23 = kFigAudioQueueProperty_CodecProgramTargetLevel;
        }
        else
        {
          if (CFEqual(CFSTR("OfflineAudioQueueRate"), a2))
          {
            if (!*(_BYTE *)(DerivedStorage + 66))
            {
              v8 = 4294954444;
              goto LABEL_4;
            }
            valuePtr = 0.0;
            if (!a3)
              goto LABEL_2;
            v33 = CFGetTypeID(a3);
            if (v33 != CFNumberGetTypeID())
              goto LABEL_2;
            CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, &valuePtr);
            v34 = valuePtr == 1.0 || valuePtr == 0.0;
            *(_BYTE *)(DerivedStorage + 101) = v34;
            if (v34 && !*(_BYTE *)(DerivedStorage + 100))
              v35 = (const __CFNumber **)MEMORY[0x1E0C9AE50];
            else
              v35 = (const __CFNumber **)MEMORY[0x1E0C9AE40];
            v37 = *v35;
            if (*v35 == (const __CFNumber *)*MEMORY[0x1E0C9AE50])
              v38 = (const __CFNumber *)*MEMORY[0x1E0C9AE40];
            else
              v38 = (const __CFNumber *)*MEMORY[0x1E0C9AE50];
            FigAudioQueueSetProperty(*(_QWORD *)(DerivedStorage + 40), CFSTR("EnableTimePitch"), v38);
            FigAudioQueueSetProperty(*(_QWORD *)(DerivedStorage + 40), CFSTR("TimePitchBypass"), v37);
            FigAudioQueueSetParameter(*(_QWORD *)(DerivedStorage + 40), 2u, valuePtr);
LABEL_9:
            v8 = 0;
            goto LABEL_4;
          }
          if (CFEqual(CFSTR("DisconnectOfflineMixerWhileResetting"), a2))
          {
            v22 = *(_QWORD *)(DerivedStorage + 40);
            v23 = kFigAudioQueueProperty_DisconnectOfflineMixerWhileResetting;
          }
          else
          {
            if (CFEqual(CFSTR("OfflineRenderPriority"), a2))
            {
              if (a3)
              {
                v36 = CFStringGetTypeID();
                if (v36 == CFGetTypeID(a3)
                  && (CFEqual(a3, CFSTR("BufferedAirPlayUrgent"))
                   || CFEqual(a3, CFSTR("BufferedAirPlayDefault"))
                   || CFEqual(a3, CFSTR("BufferedAirPlayRelaxed"))))
                {
                  SInt32 = (const __CFNumber *)FigCFNumberCreateSInt32();
                  if (SInt32)
                  {
                    v40 = SInt32;
                    v8 = FigAudioQueueSetProperty(*(_QWORD *)(DerivedStorage + 40), CFSTR("RenderThreadPriority"), SInt32);
                    CFRelease(v40);
                    goto LABEL_4;
                  }
                }
              }
              goto LABEL_2;
            }
            if (CFEqual(CFSTR("MXSession"), a2))
            {
              v22 = *(_QWORD *)(DerivedStorage + 40);
              v23 = kFigAudioQueueProperty_MXSession;
            }
            else if (CFEqual(CFSTR("BestAvailableContentType"), a2))
            {
              v22 = *(_QWORD *)(DerivedStorage + 40);
              v23 = kFigAudioQueueProperty_BestAvailableContentType;
            }
            else
            {
              if (!CFEqual(CFSTR("SceneCompositionPreset"), a2))
              {
                v8 = 4294954446;
                goto LABEL_4;
              }
              v22 = *(_QWORD *)(DerivedStorage + 40);
              v23 = kFigAudioQueueProperty_SceneCompositionPreset;
            }
          }
        }
      }
    }
LABEL_44:
    v7 = FigAudioQueueSetProperty(v22, *v23, (const __CFNumber *)a3);
    goto LABEL_3;
  }
  if (!a3)
    goto LABEL_2;
  v30 = CFBooleanGetTypeID();
  if (v30 != CFGetTypeID(a3))
    goto LABEL_2;
  v8 = 0;
  *(_BYTE *)(DerivedStorage + 92) = (const void *)*MEMORY[0x1E0C9AE50] == a3;
LABEL_4:
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 8));
  return v8;
}

uint64_t FigAudioQueueSetProperty(uint64_t a1, const void *a2, const __CFNumber *a3)
{
  CFTypeID TypeID;
  CFTypeID v7;
  uint64_t *v8;
  const void *v9;
  uint64_t v10;
  CFTypeID v11;
  uint64_t v12;
  unint64_t v13;
  CFTypeID v14;
  CFTypeID v15;
  int Value;
  uint64_t v17;
  CFIndex Count;
  uint64_t v19;
  const __CFNumber **v20;
  CFIndex v21;
  const void *ValueAtIndex;
  const __CFNumber *v23;
  uint64_t v25;
  uint64_t v26;
  CFTypeID v27;
  const void *v28;
  _QWORD *LastSubAudioQueue;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  CFTypeID v33;
  const __CFNumber *v34;
  int v35;
  NSObject *v36;
  CFTypeID v37;
  __CFDictionary *Mutable;
  const __CFNumber *v39;
  CFIndex v40;
  const void *v41;

  if (!a1)
    return FigSignalErrorAt();
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 24));
  if (*(_BYTE *)(a1 + 16))
    goto LABEL_55;
  if (CFEqual(a2, CFSTR("TimebaseRate")))
  {
    if (a3)
    {
      TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(a3))
      {
        CFNumberGetValue(a3, kCFNumberFloat32Type, (void *)(a1 + 408));
        goto LABEL_90;
      }
    }
    goto LABEL_88;
  }
  if (!CFEqual(a2, CFSTR("AudioProcessingUnits")))
  {
    if (CFEqual(a2, CFSTR("AudioCurves")))
    {
      if (a3)
      {
        v11 = CFDictionaryGetTypeID();
        if (v11 != CFGetTypeID(a3))
          goto LABEL_88;
      }
      v12 = a1;
      v13 = 0;
LABEL_26:
      v10 = faq_setAudioCurves(v12, v13, a3);
      goto LABEL_89;
    }
    if (CFEqual(a2, CFSTR("SecondaryAudioCurves")))
    {
      if (a3)
      {
        v14 = CFDictionaryGetTypeID();
        if (v14 != CFGetTypeID(a3))
          goto LABEL_88;
      }
      v12 = a1;
      v13 = 1;
      goto LABEL_26;
    }
    if (CFEqual(a2, CFSTR("ExpectScaledEdits")))
    {
      if (!a3
        || (v15 = CFBooleanGetTypeID(), v15 != CFGetTypeID(a3))
        || (Value = CFBooleanGetValue(a3), Value == *(unsigned __int8 *)(a1 + 672)))
      {
LABEL_90:
        Mutable = *(__CFDictionary **)(a1 + 240);
        if (Mutable
          || (Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]), (*(_QWORD *)(a1 + 240) = Mutable) != 0))
        {
          if (a3)
            v39 = a3;
          else
            v39 = (const __CFNumber *)*MEMORY[0x1E0C9B0D0];
          CFDictionarySetValue(Mutable, a2, v39);
          v26 = 0;
        }
        else
        {
          v26 = 4294954355;
        }
        goto LABEL_96;
      }
      *(_BYTE *)(a1 + 672) = Value;
      goto LABEL_32;
    }
    if (CFEqual(a2, CFSTR("OfflineMixer")))
    {
      if ((*(_BYTE *)(a1 + 48) & 2) != 0)
      {
        if (a3)
        {
          v17 = FigAudioQueueOfflineMixerGetTypeID();
          if (v17 != CFGetTypeID(a3))
            goto LABEL_88;
        }
        if (*(_BYTE *)(a1 + 16))
        {
          v20 = (const __CFNumber **)(a1 + 712);
          if (!*(_QWORD *)(a1 + 712))
          {
            *v20 = a3;
            if (!a3)
              goto LABEL_90;
            goto LABEL_116;
          }
          v19 = 0;
        }
        else
        {
          Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 176));
          v19 = Count;
          v20 = (const __CFNumber **)(a1 + 712);
          if (!*(_QWORD *)(a1 + 712))
            goto LABEL_105;
          if (Count >= 1)
          {
            v21 = 0;
            do
            {
              if (*(_BYTE *)(a1 + 16))
                ValueAtIndex = 0;
              else
                ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), v21);
              faq_disconnectFromOfflineMixer(a1, (uint64_t)ValueAtIndex);
              ++v21;
            }
            while (v19 != v21);
          }
        }
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
LABEL_105:
        *v20 = a3;
        if (!a3)
          goto LABEL_90;
        if (v19 >= 1)
        {
          v40 = 0;
          do
          {
            v41 = *(_BYTE *)(a1 + 16) ? 0 : CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), v40);
            v25 = faq_connectToOfflineMixer((_QWORD *)a1, (uint64_t)v41);
            if ((_DWORD)v25)
              goto LABEL_56;
          }
          while (v19 != ++v40);
        }
LABEL_116:
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        goto LABEL_90;
      }
    }
    else
    {
      if (CFEqual(a2, CFSTR("AllowedToUseHardware")))
        goto LABEL_90;
      if (CFEqual(a2, CFSTR("MXSession")))
      {
        v23 = *(const __CFNumber **)(a1 + 256);
        if (v23 != a3)
        {
          *(_QWORD *)(a1 + 256) = a3;
          if (a3)
            CFRetain(a3);
          if (v23)
            CFRelease(v23);
          faq_setPropertyOnAllSubAudioQueues(a1, a2, (const __CFString *)a3);
        }
        goto LABEL_90;
      }
      if (CFEqual(a2, CFSTR("AudioProcessingTap")))
      {
        if (a3)
        {
          v27 = MTAudioProcessingTapGetTypeID();
          if (v27 != CFGetTypeID(a3))
            goto LABEL_88;
        }
        if (*(const __CFNumber **)(a1 + 728) == a3)
          goto LABEL_90;
        *(_BYTE *)(a1 + 736) = 0;
        faq_removeAudioProcessingTapListeners(a1);
        v28 = *(const void **)(a1 + 728);
        *(_QWORD *)(a1 + 728) = a3;
        if (a3)
          CFRetain(a3);
        if (v28)
          CFRelease(v28);
        v25 = faq_addAudioProcessingTapListeners(a1);
        if (!(_DWORD)v25)
        {
          v25 = faq_setPropertyOnAllSubAudioQueues(a1, a2, (const __CFString *)a3);
          if (!(_DWORD)v25)
          {
            LastSubAudioQueue = faq_GetLastSubAudioQueue(a1);
            v30 = LastSubAudioQueue[74];
            if (v30)
            {
              v31 = LastSubAudioQueue[75];
              v32 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
              if (v32)
                v32(v30, v31);
            }
            goto LABEL_90;
          }
        }
LABEL_56:
        v26 = v25;
        goto LABEL_96;
      }
      if (CFEqual(a2, CFSTR("DiscardSampleBuffers")))
      {
        if (a3)
        {
          v33 = CFBooleanGetTypeID();
          if (v33 == CFGetTypeID(a3))
          {
            v34 = (const __CFNumber *)*MEMORY[0x1E0C9AE50];
            v35 = *MEMORY[0x1E0C9AE50] == (_QWORD)a3;
            if (*(unsigned __int8 *)(a1 + 304) != v35)
            {
              *(_BYTE *)(a1 + 304) = v35;
              FigAtomicCompareAndSwap32();
              v36 = *(NSObject **)(a1 + 336);
              if (v34 == a3)
              {
                dispatch_source_set_timer(v36, 0, 0x1DCD6500uLL, 0x4C4B40uLL);
              }
              else
              {
                dispatch_source_set_timer(v36, 0xFFFFFFFFFFFFFFFFLL, 0, 0);
                if (*(_QWORD *)(a1 + 288))
                  FigSemaphoreSignal();
              }
            }
          }
        }
        goto LABEL_90;
      }
      if (CFEqual(a2, CFSTR("ShouldCompensateForNeroScreenLatency")))
      {
        *(_BYTE *)(a1 + 738) = *MEMORY[0x1E0C9AE50] == (_QWORD)a3;
        goto LABEL_90;
      }
      if (CFEqual(a2, CFSTR("DisconnectOfflineMixerWhileResetting")))
      {
        *(_BYTE *)(a1 + 752) = *MEMORY[0x1E0C9AE50] == (_QWORD)a3;
        goto LABEL_90;
      }
      if (!CFEqual(a2, CFSTR("RenderThreadPriority")))
      {
        if (!CFEqual(a2, CFSTR("Rate2Rate")))
        {
          v10 = faq_setPropertyOnAllSubAudioQueues(a1, a2, (const __CFString *)a3);
          goto LABEL_89;
        }
        CFNumberGetValue(a3, kCFNumberFloat32Type, (void *)(a1 + 756));
LABEL_32:
        faq_updateRate2Enable(a1);
        goto LABEL_90;
      }
      if ((*(_BYTE *)(a1 + 49) & 4) != 0)
      {
        if (a3)
        {
          v37 = CFNumberGetTypeID();
          if (v37 == CFGetTypeID(a3))
          {
            if (!*(_QWORD *)(a1 + 280))
              goto LABEL_90;
            v10 = FigThreadSetProperty();
            goto LABEL_89;
          }
        }
        goto LABEL_88;
      }
    }
LABEL_55:
    v25 = FigSignalErrorAt();
    goto LABEL_56;
  }
  if (a3)
  {
    v7 = CFGetTypeID(a3);
    if (v7 != CFArrayGetTypeID())
    {
LABEL_88:
      v10 = FigSignalErrorAt();
      goto LABEL_89;
    }
  }
  if (*(_BYTE *)(a1 + 16))
    v8 = 0;
  else
    v8 = (uint64_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), 0);
  v9 = *(const void **)(a1 + 680);
  *(_QWORD *)(a1 + 680) = a3;
  if (a3)
    CFRetain(a3);
  if (v9)
    CFRelease(v9);
  if (!v8)
    goto LABEL_90;
  v10 = subaq_buildAudioProcssingUnits(a1, v8);
LABEL_89:
  v26 = v10;
  if (!(_DWORD)v10)
    goto LABEL_90;
LABEL_96:
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
  return v26;
}

uint64_t FigPlaybackBossCreate(const __CFAllocator *a1, const void *a2, uint64_t a3, _DWORD *a4, const void **a5, uint64_t a6, const void *a7, const void *a8, OpaqueCMClock *a9, char a10, const __CFDictionary *a11, uint64_t *a12)
{
  uint64_t v17;
  const void **v18;
  uint64_t Instance;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t FigBaseObject;
  unsigned int (*v29)(uint64_t, const __CFString *, uint64_t, CFBooleanRef *);
  uint64_t v30;
  unsigned int (*v31)(uint64_t, const __CFString *, uint64_t, CFBooleanRef *);
  uint64_t v32;
  void (*v33)(uint64_t, const __CFString *, uint64_t, CFBooleanRef *);
  CFMutableArrayRef Mutable;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  const __CFDictionary *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v42;
  __int128 v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, uint64_t, char *, char *);
  uint64_t v53;
  const void *v54;
  int v55;
  uint64_t v56;
  void (*v57)(uint64_t, const __CFString *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  unsigned int (*v60)(uint64_t, const __CFString *, const __CFAllocator *, CMTimeRange *);
  uint64_t v62;
  OpaqueCMClock *HostTimeClock;
  uint64_t v64;
  NSObject *v65;
  CFIndex v66;
  _QWORD *ValueAtIndex;
  uint64_t v68;
  void (*v69)(uint64_t, const __CFString *, const __CFAllocator *, CMTimeRange *);
  CFIndex v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, const __CFString *, uint64_t);
  CFIndex v75;
  _DWORD *v76;
  NSObject *v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  BOOL v81;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v83;
  unsigned int v84;
  uint64_t v87;
  int v89;
  void *value;
  CFBooleanRef BOOLean;
  int v92;
  const char *v93;
  __int16 v94;
  uint64_t v95;
  CMTimeRange v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  value = 0;
  BOOLean = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a2 || !a7 || !a12)
    return FigSignalErrorAt();
  if (a3 >= 1)
  {
    if (a4 && a5)
    {
      v17 = a3;
      v18 = a5;
      while (*v18)
      {
        ++v18;
        if (!--v17)
          goto LABEL_10;
      }
    }
    return FigSignalErrorAt();
  }
LABEL_10:
  if (FigPlaybackBossGetTypeID_oneTimeOnly != -1)
    dispatch_once_f(&FigPlaybackBossGetTypeID_oneTimeOnly, 0, (dispatch_function_t)figPlaybackBossClassInitialize);
  Instance = _CFRuntimeCreateInstance();
  v20 = &sFigCDSNodeProtocolID;
  if (!Instance)
  {
    v62 = FigSignalErrorAt();
LABEL_112:
    if ((_DWORD)v62)
      v81 = *((_DWORD *)v20 + 788) == 0;
    else
      v81 = 1;
    if (!v81)
    {
      v89 = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v83 = v89;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
        v84 = v83;
      else
        v84 = v83 & 0xFFFFFFFE;
      if (v84)
      {
        v92 = 136315394;
        v93 = "FigPlaybackBossCreate";
        v94 = 1024;
        LODWORD(v95) = v62;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return v62;
  }
  v21 = Instance;
  v22 = FigSimpleMutexCreate();
  *(_QWORD *)(v21 + 24) = v22;
  if (!v22)
    goto LABEL_123;
  v23 = FigSimpleMutexCreate();
  *(_QWORD *)(v21 + 576) = v23;
  if (!v23)
    goto LABEL_123;
  v24 = FigSimpleMutexCreate();
  *(_QWORD *)(v21 + 64) = v24;
  if (!v24)
    goto LABEL_123;
  v25 = FigDispatchQueueCreateWithPriority();
  *(_QWORD *)(v21 + 32) = v25;
  if (!v25)
    goto LABEL_123;
  FigThreadMakeDispatchQueueAbortable();
  *(_DWORD *)(v21 + 544) = 1000000;
  *(_BYTE *)(v21 + 841) = 0;
  if (a11 && CFDictionaryGetValueIfPresent(a11, CFSTR("Boss_ItemIdentifier"), (const void **)&value))
    CFStringGetCString((CFStringRef)value, (char *)(v21 + 841), 10, 0x600u);
  *(_QWORD *)(v21 + 48) = a7;
  CFRetain(a7);
  v26 = FigSampleGeneratorDataSourceCacheCreate((uint64_t)a1, (_QWORD *)(v21 + 56));
  if ((_DWORD)v26)
    goto LABEL_124;
  *(_QWORD *)(v21 + 40) = a2;
  CFRetain(a2);
  *(_BYTE *)(v21 + 121) = (a10 & 8) != 0;
  v27 = *MEMORY[0x1E0C9AE00];
  FigBaseObject = FigFormatReaderGetFigBaseObject(*(_QWORD *)(v21 + 40));
  v29 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
  if (v29)
  {
    if (!v29(FigBaseObject, CFSTR("AccurateDurationIsKnown"), v27, &BOOLean))
    {
      *(_BYTE *)(v21 + 123) = CFBooleanGetValue(BOOLean);
      if (BOOLean)
      {
        CFRelease(BOOLean);
        BOOLean = 0;
      }
    }
  }
  v30 = FigFormatReaderGetFigBaseObject(*(_QWORD *)(v21 + 40));
  v31 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
  if (v31)
  {
    if (!v31(v30, CFSTR("SampleCursorTimeAccuracyIsExact"), v27, &BOOLean))
    {
      *(_BYTE *)(v21 + 124) = CFBooleanGetValue(BOOLean);
      if (BOOLean)
      {
        CFRelease(BOOLean);
        BOOLean = 0;
      }
    }
  }
  v32 = FigFormatReaderGetFigBaseObject(*(_QWORD *)(v21 + 40));
  v33 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (v33)
    v33(v32, CFSTR("CouldContainFragments"), v27, &BOOLean);
  if (BOOLean)
  {
    *(_BYTE *)(v21 + 125) = CFBooleanGetValue(BOOLean);
    if (BOOLean)
    {
      CFRelease(BOOLean);
      BOOLean = 0;
    }
  }
  if (*(_BYTE *)(v21 + 125))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    *(_BYTE *)(v21 + 126) = 1;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(v21 + 72) = Mutable;
  if (!Mutable)
  {
LABEL_123:
    v26 = FigSignalErrorAt();
LABEL_124:
    v62 = v26;
    goto LABEL_111;
  }
  v35 = MEMORY[0x1E0CA2E18];
  v36 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)(v21 + 168) = *MEMORY[0x1E0CA2E18];
  v37 = *(_QWORD *)(v35 + 16);
  *(_QWORD *)(v21 + 184) = v37;
  *(_OWORD *)(v21 + 288) = v36;
  *(_QWORD *)(v21 + 304) = v37;
  *(_OWORD *)(v21 + 336) = v36;
  *(_QWORD *)(v21 + 352) = v37;
  *(_BYTE *)(v21 + 122) = a10 & 1;
  *(_WORD *)(v21 + 392) = 0;
  *(_BYTE *)(v21 + 404) = 1;
  *(_BYTE *)(v21 + 135) = 0;
  *(_DWORD *)(v21 + 136) = 0x40000000;
  *(_BYTE *)(v21 + 140) = 1;
  *(_QWORD *)(v21 + 144) = 0x300000003;
  *(_DWORD *)(v21 + 152) = 0;
  *(_DWORD *)(v21 + 130) = 257;
  *(_DWORD *)(v21 + 776) = 0;
  *(_BYTE *)(v21 + 780) = 0;
  *(_BYTE *)(v21 + 468) = 0;
  *(_OWORD *)(v21 + 792) = v36;
  *(_QWORD *)(v21 + 808) = v37;
  *(_OWORD *)(v21 + 816) = v36;
  *(_QWORD *)(v21 + 832) = v37;
  *(_QWORD *)(v21 + 96) = -1;
  if (a11 && (v38 = (const __CFDictionary *)CFDictionaryGetValue(a11, CFSTR("Boss_LoopTimeRange"))) != 0)
  {
    CMTimeRangeMakeFromDictionary(&v96, v38);
    v39 = *(_OWORD *)&v96.start.epoch;
    *(_OWORD *)(v21 + 192) = *(_OWORD *)&v96.start.value;
    *(_OWORD *)(v21 + 208) = v39;
    v40 = *(_OWORD *)&v96.duration.timescale;
  }
  else
  {
    v42 = MEMORY[0x1E0CA2E40];
    v43 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
    *(_OWORD *)(v21 + 192) = *MEMORY[0x1E0CA2E40];
    *(_OWORD *)(v21 + 208) = v43;
    v40 = *(_OWORD *)(v42 + 32);
  }
  *(_OWORD *)(v21 + 224) = v40;
  MEMORY[0x19402EEEC](*(_QWORD *)(v21 + 64));
  if (*(_BYTE *)(v21 + 840))
  {
    v89 = 0;
    v44 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a3 >= 1)
  {
    v45 = *MEMORY[0x1E0C9AE50];
    v87 = *MEMORY[0x1E0C9AE40];
    v46 = a3;
    while (1)
    {
      v96.start.value = 0;
      if (FigPlaybackBossTrackGetTypeID_oneTimeOnly != -1)
        dispatch_once_f(&FigPlaybackBossTrackGetTypeID_oneTimeOnly, 0, (dispatch_function_t)figPlaybackBossTrackClassInitialize);
      v47 = (char *)_CFRuntimeCreateInstance();
      if (!v47)
        break;
      v48 = v47;
      CFArrayAppendValue(*(CFMutableArrayRef *)(v21 + 72), v47);
      CFRelease(v48);
      ++*(_QWORD *)(v21 + 80);
      v49 = FigCFWeakReferenceHolderCreateWithReferencedObject();
      *((_QWORD *)v48 + 2) = v49;
      if (!v49)
        break;
      *((_DWORD *)v48 + 6) = *a4;
      v50 = *(_QWORD *)(v21 + 40);
      v51 = *a4;
      v52 = *(uint64_t (**)(uint64_t, uint64_t, char *, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
      if (!v52)
      {
        v62 = 4294954514;
        goto LABEL_109;
      }
      v53 = v52(v50, v51, v48 + 32, v48 + 72);
      if ((_DWORD)v53)
        goto LABEL_108;
      v54 = *a5;
      *((_QWORD *)v48 + 10) = *a5;
      CFRetain(v54);
      v55 = *(unsigned __int8 *)(v21 + 127);
      v56 = FigRenderPipelineGetFigBaseObject(*((_QWORD *)v48 + 10));
      v57 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v57)
      {
        if (v55)
          v58 = v45;
        else
          v58 = v87;
        v57(v56, CFSTR("ThrottleForBackground"), v58);
      }
      v59 = FigRenderPipelineGetFigBaseObject(*((_QWORD *)v48 + 10));
      v60 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v60)
      {
        if (!v60(v59, CFSTR("NeedsToFlushWhenRateChanges"), a1, &v96) && v96.start.value == v45)
        {
          v48[88] = 1;
          *(_BYTE *)(v21 + 107) = 1;
        }
      }
      v48[89] = 1;
      ++a5;
      ++a4;
      if (!--v46)
        goto LABEL_65;
    }
    v53 = FigSignalErrorAt();
    goto LABEL_108;
  }
LABEL_65:
  v53 = bossSetCursorServiceInTrackList(*(const __CFArray **)(v21 + 72), a6);
  if ((_DWORD)v53)
  {
LABEL_108:
    v62 = v53;
LABEL_109:
    v20 = &sFigCDSNodeProtocolID;
    goto LABEL_110;
  }
  bossElectNewTimebaseStarter(v21);
  v20 = &sFigCDSNodeProtocolID;
  if (a8)
  {
    if (a8 == (const void *)1)
    {
      *(_QWORD *)(v21 + 112) = 0;
      *(_BYTE *)(v21 + 120) = 1;
      goto LABEL_80;
    }
    *(_QWORD *)(v21 + 112) = a8;
    CFRetain(a8);
  }
  else
  {
    HostTimeClock = CMClockGetHostTimeClock();
    v64 = CMTimebaseCreateWithSourceClock(a1, HostTimeClock, (CMTimebaseRef *)(v21 + 112));
    if ((_DWORD)v64)
      goto LABEL_106;
  }
  if (a9)
  {
    *(_QWORD *)(v21 + 88) = -1;
    v64 = CMTimebaseSetSourceClock(*(CMTimebaseRef *)(v21 + 112), a9);
    if ((_DWORD)v64)
      goto LABEL_106;
  }
  else
  {
    *(_QWORD *)(v21 + 88) = -2;
    bossElectNewPreferredClock(v21);
  }
  v89 = 0x40000000;
  if (bossGetVideoDecoderMaxSpeedThreshold(v21, (float *)&v89))
  {
    *(_DWORD *)(v21 + 136) = v89;
    *(_BYTE *)(v21 + 140) = 0;
    if (dword_1EE2A2C50)
    {
      v65 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
LABEL_80:
  v96.start.value = 0;
  if (a3 > 0)
  {
    v66 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v21 + 72), v66);
      v68 = FigRenderPipelineGetFigBaseObject(ValueAtIndex[10]);
      v69 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v69)
        v69(v68, CFSTR("Timebase"), a1, &v96);
      if (v96.start.value)
      {
        CFRelease((CFTypeRef)v96.start.value);
        goto LABEL_92;
      }
      ++v66;
    }
    while (a3 != v66);
    v70 = 0;
    do
    {
      v71 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v21 + 72), v70);
      v72 = *(_QWORD *)(v21 + 112);
      v73 = FigRenderPipelineGetFigBaseObject(v71[10]);
      v74 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v74)
        v74(v73, CFSTR("Timebase"), v72);
      ++v70;
    }
    while (a3 != v70);
LABEL_92:
    v75 = 0;
    do
    {
      v76 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v21 + 72), v75);
      v64 = bossBuildMentorForTrack(v21, (uint64_t)v76, a1, *(const __CFDictionary **)(a6 + 8 * v75));
      if ((_DWORD)v64)
        goto LABEL_106;
      v76[52] = 1000 * FigAtomicIncrement32();
      v64 = bossAddNotificationListenersForTrack(v21, (uint64_t)v76);
      if ((_DWORD)v64)
        goto LABEL_106;
    }
    while (a3 != ++v75);
  }
  if (*(_QWORD *)(v21 + 112))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    v64 = CMNotificationCenterAddListener();
    if ((_DWORD)v64)
    {
LABEL_106:
      v62 = v64;
LABEL_110:
      MEMORY[0x19402EF04](*(_QWORD *)(v21 + 64));
LABEL_111:
      CFRelease((CFTypeRef)v21);
      goto LABEL_112;
    }
  }
  bossSetExpectScaledEdits(*(const __CFArray **)(v21 + 72), (char *)(v21 + 104), (char *)(v21 + 105));
  MEMORY[0x19402EF04](*(_QWORD *)(v21 + 64));
  *(_DWORD *)(v21 + 424) = 1634624887;
  *(_QWORD *)(v21 + 784) = voucher_copy();
  *a12 = v21;
  if (dword_1EE2A2C50)
  {
    v89 = 0;
    v77 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v78 = v89;
    if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
      v79 = v78;
    else
      v79 = v78 & 0xFFFFFFFE;
    if (v79)
    {
      v80 = *a12;
      v92 = 136315394;
      v93 = "FigPlaybackBossCreate";
      v94 = 2048;
      v95 = v80;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return 0;
}

uint64_t FigPlaybackBossGetTypeID()
{
  if (FigPlaybackBossGetTypeID_oneTimeOnly != -1)
    dispatch_once_f(&FigPlaybackBossGetTypeID_oneTimeOnly, 0, (dispatch_function_t)figPlaybackBossClassInitialize);
  return gFigPlaybackBossTypeID;
}

uint64_t figPlaybackBossClassInitialize()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gFigPlaybackBossTypeID = result;
  return result;
}

void figPlaybackBossInit(uint64_t a1)
{
  bzero((void *)(a1 + 16), 0x348uLL);
}

uint64_t figAudioQueueRenderPipelineCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t Parameter;
  const void *v10;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  __CFString **v17;
  uint64_t v18;
  uint64_t v19;
  CFDictionaryRef v20;
  const void **v21;
  int v22;
  const void **v23;
  const void *v24;
  const void **v25;
  CMTime v26;
  _OWORD v27[10];
  void *values[2];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 valuePtr;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)DerivedStorage)
  {
    v8 = FigSignalErrorAt();
LABEL_3:
    Parameter = v8;
    goto LABEL_8;
  }
  if (CFEqual(CFSTR("SourceSampleBufferQueue"), a2))
  {
    *a4 = *(_QWORD *)(DerivedStorage + 32);
    v10 = *(const void **)(DerivedStorage + 32);
    if (!v10)
    {
LABEL_7:
      Parameter = 0;
      goto LABEL_8;
    }
LABEL_6:
    CFRetain(v10);
    goto LABEL_7;
  }
  if (CFEqual(CFSTR("Timebase"), a2))
  {
    *a4 = *(_QWORD *)(DerivedStorage + 112);
    v10 = *(const void **)(DerivedStorage + 112);
    if (!v10)
      goto LABEL_7;
    goto LABEL_6;
  }
  if (!CFEqual(CFSTR("PerformanceDictionary"), a2))
  {
    if (CFEqual(CFSTR("SoftwareVolume1"), a2))
    {
      LODWORD(valuePtr) = 1065353216;
      if (*(_BYTE *)(DerivedStorage + 103))
      {
        LODWORD(valuePtr) = *(_DWORD *)(DerivedStorage + 104);
      }
      else
      {
        Parameter = FigAudioQueueGetParameter(*(_QWORD *)(DerivedStorage + 40), 1u, &valuePtr);
        if ((_DWORD)Parameter)
          goto LABEL_8;
      }
      v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloatType, &valuePtr);
      goto LABEL_19;
    }
    if (CFEqual(CFSTR("EQPreset"), a2))
    {
      v16 = *(_QWORD *)(DerivedStorage + 40);
      v17 = kFigAudioQueueProperty_EQPreset;
LABEL_24:
      v8 = FigAudioQueueCopyProperty(v16, *v17, a3, a4);
      goto LABEL_3;
    }
    if (CFEqual(CFSTR("Muted"), a2))
    {
      v21 = (const void **)MEMORY[0x1E0C9AE50];
      v22 = *(unsigned __int8 *)(DerivedStorage + 103);
LABEL_35:
      if (!v22)
        v21 = (const void **)MEMORY[0x1E0C9AE40];
      v13 = *v21;
LABEL_38:
      v13 = CFRetain(v13);
      goto LABEL_19;
    }
    if (CFEqual(CFSTR("PreferredClock"), a2))
    {
      v16 = *(_QWORD *)(DerivedStorage + 40);
      v17 = kFigAudioQueueProperty_Clock;
      goto LABEL_24;
    }
    if (CFEqual(CFSTR("IsRunning"), a2))
    {
      v21 = (const void **)MEMORY[0x1E0C9AE50];
      v22 = *(unsigned __int8 *)(DerivedStorage + 64);
      goto LABEL_35;
    }
    if (CFEqual(CFSTR("PipelineLatency"), a2))
    {
      v16 = *(_QWORD *)(DerivedStorage + 40);
      v17 = kFigAudioQueueProperty_PipelineLatency;
      goto LABEL_24;
    }
    if (CFEqual(CFSTR("UnpauseLatencyEstimate"), a2))
    {
      v16 = *(_QWORD *)(DerivedStorage + 40);
      v17 = kFigAudioQueueProperty_UnpauseLatencyEstimate;
      goto LABEL_24;
    }
    if (CFEqual(CFSTR("EndPresentationTimeForQueuedSamples"), a2))
    {
      valuePtr = 0uLL;
      *(_QWORD *)&v39 = 0;
      CMBufferQueueGetEndPresentationTimeStamp((CMTime *)&valuePtr, *(CMBufferQueueRef *)(DerivedStorage + 32));
      v16 = *(_QWORD *)(DerivedStorage + 40);
      if (v16 && (BYTE12(valuePtr) & 1) == 0)
      {
        v17 = kFigAudioQueueProperty_EndPresentationTimeForQueuedSamples;
        goto LABEL_24;
      }
      *(_OWORD *)values = valuePtr;
      *(_QWORD *)&v29 = v39;
      v13 = CMTimeCopyAsDictionary((CMTime *)values, a3);
LABEL_19:
      Parameter = 0;
      *a4 = v13;
      goto LABEL_8;
    }
    if (CFEqual(CFSTR("EndPresentationTimeForDecodedSamples"), a2))
    {
      v16 = *(_QWORD *)(DerivedStorage + 40);
      if (v16)
      {
        v17 = kFigAudioQueueProperty_EndPresentationTimeForDecodedSamples;
        goto LABEL_24;
      }
LABEL_95:
      Parameter = 4294954446;
      goto LABEL_8;
    }
    if (CFEqual(CFSTR("OfflineMixer"), a2))
    {
      v16 = *(_QWORD *)(DerivedStorage + 40);
      v17 = kFigAudioQueueProperty_OfflineMixer;
      goto LABEL_24;
    }
    if (CFEqual(CFSTR("AudioDeviceUID"), a2))
    {
      v16 = *(_QWORD *)(DerivedStorage + 40);
      v17 = kFigAudioQueueProperty_DeviceUID;
      goto LABEL_24;
    }
    if (CFEqual(CFSTR("AudioDeviceChannelMap"), a2))
    {
      v16 = *(_QWORD *)(DerivedStorage + 40);
      v17 = kFigAudioQueueProperty_DeviceChannelMap;
      goto LABEL_24;
    }
    if (CFEqual(CFSTR("STSLabel"), a2))
    {
      v16 = *(_QWORD *)(DerivedStorage + 40);
      v17 = kFigAudioQueueProperty_STSLabel;
      goto LABEL_24;
    }
    if (CFEqual(CFSTR("IsTimebaseStarter"), a2))
    {
      v21 = (const void **)MEMORY[0x1E0C9AE50];
      v22 = *(unsigned __int8 *)(DerivedStorage + 65);
      goto LABEL_35;
    }
    if (CFEqual(CFSTR("AudioProcessingUnits"), a2))
    {
      v16 = *(_QWORD *)(DerivedStorage + 40);
      v17 = kFigAudioQueueProperty_AudioProcessingUnits;
      goto LABEL_24;
    }
    if (CFEqual(CFSTR("AudioCurves"), a2))
    {
      v16 = *(_QWORD *)(DerivedStorage + 40);
      v17 = kFigAudioQueueProperty_AudioCurves;
      goto LABEL_24;
    }
    if (CFEqual(CFSTR("SecondaryAudioCurves"), a2))
    {
      v16 = *(_QWORD *)(DerivedStorage + 40);
      v17 = kFigAudioQueueProperty_SecondaryAudioCurves;
      goto LABEL_24;
    }
    if (CFEqual(CFSTR("HandleFormatDescriptionChanges"), a2))
    {
      v21 = (const void **)MEMORY[0x1E0C9AE50];
      v22 = *(unsigned __int8 *)(DerivedStorage + 92);
      goto LABEL_35;
    }
    if (CFEqual(CFSTR("ExpectScaledEdits"), a2))
    {
      v25 = (const void **)MEMORY[0x1E0C9AE50];
      if (!*(_BYTE *)(DerivedStorage + 100))
        v25 = (const void **)MEMORY[0x1E0C9AE40];
    }
    else
    {
      if (CFEqual(CFSTR("IsPausedForConfigurationChange"), a2))
      {
        v16 = *(_QWORD *)(DerivedStorage + 40);
        v17 = kFigAudioQueueProperty_IsPausedForConfigurationChange;
        goto LABEL_24;
      }
      if (!CFEqual(CFSTR("SpatializationEnabled"), a2))
      {
        if (CFEqual(CFSTR("MXSession"), a2))
        {
          v16 = *(_QWORD *)(DerivedStorage + 40);
          v17 = kFigAudioQueueProperty_MXSession;
          goto LABEL_24;
        }
        if (CFEqual(CFSTR("WillTrimShortDurationSamples"), a2))
        {
          v16 = *(_QWORD *)(DerivedStorage + 40);
          v17 = kFigAudioQueueProperty_WillTrimShortDurationSamples;
          goto LABEL_24;
        }
        if (CFEqual(CFSTR("EmploysHardwarePassthrough"), a2))
        {
          v16 = *(_QWORD *)(DerivedStorage + 40);
          v17 = kFigAudioQueueProperty_EmploysHardwarePassthrough;
          goto LABEL_24;
        }
        goto LABEL_95;
      }
      v25 = (const void **)MEMORY[0x1E0C9AE50];
      if ((*(_BYTE *)(DerivedStorage + 97) & 1) == 0)
        v25 = (const void **)MEMORY[0x1E0C9AE40];
    }
    v13 = *v25;
    if (!*v25)
      goto LABEL_19;
    goto LABEL_38;
  }
  v12 = CMBaseObjectGetDerivedStorage();
  memset(v27, 0, sizeof(v27));
  if (*(_BYTE *)v12)
  {
    Parameter = 4294954444;
  }
  else
  {
    v14 = *(_QWORD *)(v12 + 40);
    if (v14)
      v15 = FigAudioQueueCopyPerformanceDictionary(v14, (CFDictionaryRef *)v27) == 0;
    else
      v15 = 0;
    v18 = CMBaseObjectGetDerivedStorage();
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    valuePtr = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    *(_OWORD *)values = 0u;
    v29 = 0u;
    if (*(_BYTE *)v18)
    {
      Parameter = FigCFCreateCombinedDictionary();
      if (!v15)
        goto LABEL_8;
      v19 = 1;
    }
    else
    {
      if ((*(_BYTE *)(v18 + 204) & 1) != 0)
      {
        v26 = *(CMTime *)(v18 + 192);
        v26.value = CMTimeGetSeconds(&v26);
        *(_QWORD *)&valuePtr = CFSTR("MaxStartDelay");
        values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, &v26);
        v20 = CFDictionaryCreate(a3, (const void **)&valuePtr, (const void **)values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        CFRelease(values[0]);
      }
      else
      {
        v20 = CFDictionaryCreate(a3, (const void **)&valuePtr, (const void **)values, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      }
      *(_QWORD *)((unint64_t)v27 | (8 * v15)) = v20;
      v19 = v15 + 1;
      Parameter = FigCFCreateCombinedDictionary();
    }
    v23 = (const void **)v27;
    do
    {
      v24 = *v23++;
      CFRelease(v24);
      --v19;
    }
    while (v19);
  }
LABEL_8:
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 8));
  return Parameter;
}

uint64_t FigAudioQueueCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, _QWORD *a4)
{
  char *ValueAtIndex;
  CMTimeEpoch epoch;
  CMTime *p_time;
  const void *v11;
  uint64_t AudioQueueLatencyFigTime;
  int64_t v14;
  int32_t v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v17;
  AudioQueuePropertyID v18;
  const void **v19;
  const __CFAllocator *v20;
  CMTime *v21;
  CFNumberType v22;
  int v23;
  const void **v24;
  BOOL v25;
  UInt32 v26;
  CMTime rhs;
  CMTime lhs;
  CMTime v29;
  CMTime time;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (a1 && a4)
  {
    *a4 = 0;
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 24));
    if (*(_BYTE *)(a1 + 16))
    {
      AudioQueueLatencyFigTime = FigSignalErrorAt();
      goto LABEL_12;
    }
    ValueAtIndex = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), 0);
    if (CFEqual(a2, CFSTR("EndPresentationTimeForQueuedSamples")))
    {
      *(_OWORD *)&time.value = *(_OWORD *)(ValueAtIndex + 484);
      epoch = *(_QWORD *)(ValueAtIndex + 500);
LABEL_6:
      time.epoch = epoch;
      p_time = &time;
LABEL_7:
      v11 = CMTimeCopyAsDictionary(p_time, a3);
LABEL_8:
      AudioQueueLatencyFigTime = 0;
LABEL_9:
      *a4 = v11;
LABEL_12:
      MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
      return AudioQueueLatencyFigTime;
    }
    if (CFEqual(a2, CFSTR("EndPresentationTimeForDecodedSamples")))
    {
      MEMORY[0x19402EEEC](*((_QWORD *)ValueAtIndex + 67));
      time = *(CMTime *)(ValueAtIndex + 508);
      *a4 = CMTimeCopyAsDictionary(&time, a3);
      MEMORY[0x19402EF04](*((_QWORD *)ValueAtIndex + 67));
      AudioQueueLatencyFigTime = 0;
      goto LABEL_12;
    }
    if (CFEqual(a2, CFSTR("Clock")))
    {
      v11 = (const void *)*((_QWORD *)ValueAtIndex + 72);
      if (!v11)
      {
        AudioQueueLatencyFigTime = 4294954356;
        goto LABEL_12;
      }
      goto LABEL_15;
    }
    if (CFEqual(a2, CFSTR("PipelineLatency")))
    {
      time = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
      if (*(_DWORD *)(*((_QWORD *)ValueAtIndex + 8) + 8) == 1819304813)
      {
        v14 = 1;
        v15 = 10;
      }
      else
      {
        v14 = 25;
        v15 = 100;
      }
      CMTimeMake(&time, v14, v15);
      if ((ValueAtIndex[120] & 1) != 0)
      {
        lhs = time;
        rhs = *(CMTime *)(ValueAtIndex + 108);
        CMTimeAdd(&v29, &lhs, &rhs);
        time = v29;
      }
      v29 = time;
      p_time = &v29;
      goto LABEL_7;
    }
    if (CFEqual(a2, CFSTR("UnpauseLatencyEstimate")))
    {
      time = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
      AudioQueueLatencyFigTime = subaq_getAudioQueueLatencyFigTime(a1, (uint64_t)ValueAtIndex, &time);
      v29 = time;
      v11 = CMTimeCopyAsDictionary(&v29, a3);
      goto LABEL_9;
    }
    if (CFEqual(a2, CFSTR("DynamicLatency")))
    {
      lhs = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      if (!*(_BYTE *)(a1 + 760) || !ValueAtIndex[721])
        goto LABEL_47;
      rhs.value = 0;
      v26 = 8;
      if (FigAudioQueueTimingShimGetProperty(*((_QWORD *)ValueAtIndex + 5), 0x7164646Cu, &rhs, &v26))
      {
        if (dword_1EE2A2A48 < 5)
        {
LABEL_47:
          *(_OWORD *)&time.value = *(_OWORD *)&lhs.value;
          epoch = lhs.epoch;
          goto LABEL_6;
        }
      }
      else
      {
        CMTimeMakeWithSeconds(&lhs, *(Float64 *)&rhs.value, 1000000000);
        if (dword_1EE2A2A48 < 5)
          goto LABEL_47;
      }
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_47;
    }
    if (CFEqual(a2, CFSTR("OfflineMixer")))
    {
      v11 = *(const void **)(a1 + 712);
      if (!v11)
        goto LABEL_8;
      goto LABEL_15;
    }
    if (CFEqual(a2, CFSTR("DeviceUID")))
    {
      time.value = 0;
      LODWORD(v29.value) = 8;
      v17 = *((_QWORD *)ValueAtIndex + 5);
      v18 = 1634820964;
      goto LABEL_42;
    }
    if (CFEqual(a2, CFSTR("STSLabel")))
    {
      time.value = 0;
      LODWORD(v29.value) = 8;
      v17 = *((_QWORD *)ValueAtIndex + 5);
      v18 = 1937011564;
LABEL_42:
      AudioQueueLatencyFigTime = FigAudioQueueTimingShimGetProperty(v17, v18, &time, (UInt32 *)&v29);
      if (!(_DWORD)AudioQueueLatencyFigTime)
        *a4 = time.value;
      goto LABEL_12;
    }
    if (CFEqual(a2, CFSTR("AllowedToUseHardware")))
    {
      v19 = (const void **)MEMORY[0x1E0C9AE40];
LABEL_46:
      v11 = *v19;
LABEL_15:
      v11 = CFRetain(v11);
      goto LABEL_8;
    }
    if (CFEqual(a2, CFSTR("MXSession")))
    {
      v11 = *(const void **)(a1 + 256);
      if (!v11)
        goto LABEL_8;
      goto LABEL_15;
    }
    if (CFEqual(a2, CFSTR("TimebaseRate")))
    {
      v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v21 = (CMTime *)(a1 + 408);
      v22 = kCFNumberFloat32Type;
LABEL_54:
      v11 = CFNumberCreate(v20, v22, v21);
      goto LABEL_8;
    }
    if (CFEqual(a2, CFSTR("AudioProcessingUnits")))
    {
      v11 = *(const void **)(a1 + 680);
      if (!v11)
        goto LABEL_8;
      goto LABEL_15;
    }
    if (CFEqual(a2, CFSTR("AudioCurves")))
    {
      v11 = *(const void **)(a1 + 648);
      if (!v11)
        goto LABEL_8;
      goto LABEL_15;
    }
    if (CFEqual(a2, CFSTR("SecondaryAudioCurves")))
    {
      v11 = *(const void **)(a1 + 656);
      if (!v11)
        goto LABEL_8;
      goto LABEL_15;
    }
    if (CFEqual(a2, CFSTR("DiscardSampleBuffers")))
    {
      v19 = (const void **)MEMORY[0x1E0C9AE50];
      v23 = *(unsigned __int8 *)(a1 + 304);
    }
    else if (CFEqual(a2, CFSTR("IsPausedForConfigurationChange")))
    {
      v19 = (const void **)MEMORY[0x1E0C9AE50];
      v23 = *(unsigned __int8 *)(a1 + 753);
    }
    else
    {
      if (CFEqual(a2, CFSTR("EQPreset")))
      {
        LODWORD(time.value) = -1;
        subaq_getEQPreset(a1, (uint64_t)ValueAtIndex, (int *)&time);
        v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v21 = &time;
        v22 = kCFNumberIntType;
        goto LABEL_54;
      }
      if (!CFEqual(a2, CFSTR("WillTrimShortDurationSamples")))
      {
        if (!CFEqual(a2, CFSTR("EmploysHardwarePassthrough")))
        {
          AudioQueueLatencyFigTime = 4294954353;
          goto LABEL_12;
        }
        v19 = (const void **)MEMORY[0x1E0C9AE50];
        v24 = (const void **)MEMORY[0x1E0C9AE40];
        v25 = (*(_DWORD *)(a1 + 48) & 4) == 0;
        goto LABEL_69;
      }
      v19 = (const void **)MEMORY[0x1E0C9AE50];
      v23 = ValueAtIndex[544];
    }
    v24 = (const void **)MEMORY[0x1E0C9AE40];
    v25 = v23 == 0;
LABEL_69:
    if (v25)
      v19 = v24;
    goto LABEL_46;
  }
  return FigSignalErrorAt();
}

uint64_t FigSampleBufferConsumerCreateForBufferQueue(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  const __CFAllocator *v7;
  uint64_t v8;
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;

  if (!a1 || !a4)
    return FigSignalErrorAt();
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  FigSampleBufferConsumerGetClassID();
  v8 = CMDerivedObjectCreate();
  if (!(_DWORD)v8)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_QWORD *)(DerivedStorage + 120) = FigBufferQueueRetain();
    v10 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)(DerivedStorage + 12) = *(_OWORD *)a2;
    *(_QWORD *)(DerivedStorage + 28) = v10;
    v11 = *(_QWORD *)(a3 + 16);
    *(_OWORD *)(DerivedStorage + 36) = *(_OWORD *)a3;
    *(_QWORD *)(DerivedStorage + 52) = v11;
    v12 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)(DerivedStorage + 60) = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)(DerivedStorage + 76) = *(_QWORD *)(v12 + 16);
    CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
    v8 = CMBufferQueueCreate(v7, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(DerivedStorage + 128));
    if (!(_DWORD)v8)
    {
      *(_QWORD *)(DerivedStorage + 144) = CFArrayCreateMutable(v7, 0, MEMORY[0x1E0C9B378]);
      *(_QWORD *)DerivedStorage = FigSimpleMutexCreate();
      *(_BYTE *)(DerivedStorage + 8) = 1;
      *(_QWORD *)(DerivedStorage + 88) = FigSimpleMutexCreate();
      *a4 = 0;
    }
  }
  return v8;
}

uint64_t FigSampleBufferConsumerGetClassID()
{
  MEMORY[0x19402F294](&FigSampleBufferConsumerGetClassID_sRegisterFigSampleBufferConsumerTypeOnce, RegisterFigSampleBufferConsumerType);
  return sFigSampleBufferConsumerClassID;
}

uint64_t RegisterFigSampleBufferConsumerType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t figSampleGeneratorCreateForFormatReaderCommon(const void *a1, const void *a2, const void *a3, int a4, char a5, const void *a6, uint64_t a7, CMTime *a8, char a9, const void *a10, _QWORD *a11)
{
  const __CFAllocator *v17;
  uint64_t v18;
  uint64_t DerivedStorage;
  CFTypeRef v21;
  CFTypeRef v22;
  const void *v23;
  const __CFAllocator *v24;
  uint64_t v25;
  CMMemoryPoolRef v26;
  __CFDictionary *Mutable;
  uint64_t v28;
  __int128 v29;
  CMTimeEpoch v30;
  uint64_t FigBaseObject;
  void (*v32)(uint64_t, const __CFString *, const __CFAllocator *, const __CFDictionary **);
  CMTime *v33;
  uint64_t v34;
  void (*v35)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  const void *v36;
  uint64_t v37;
  void (*v38)(uint64_t, const __CFString *, const __CFAllocator *, const void **);
  const void *v39;
  __int128 v41;
  CMTime time2;
  CMTime time;
  CMTime v45;
  const void *v46;
  void (*v47)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  const __CFDictionary *v48;
  CFTypeRef v49;

  v48 = 0;
  v49 = 0;
  v46 = 0;
  v47 = 0;
  if (!a11)
    return FigSignalErrorAt();
  v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  FigSampleGeneratorGetClassID();
  v18 = CMDerivedObjectCreate();
  if ((_DWORD)v18)
    goto LABEL_3;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)DerivedStorage = a1;
  if (a1)
    CFRetain(a1);
  if (a2)
    v21 = CFRetain(a2);
  else
    v21 = 0;
  *(_QWORD *)(DerivedStorage + 16) = v21;
  v22 = a3;
  if (a3)
    v22 = CFRetain(a3);
  *(_QWORD *)(DerivedStorage + 24) = v22;
  *(_BYTE *)(DerivedStorage + 32) = a5;
  if (a6)
    *(_QWORD *)(DerivedStorage + 40) = CFRetain(a6);
  *(_QWORD *)(DerivedStorage + 56) = a7;
  time = *a8;
  CMTimeConvertScale(&v45, &time, 1000000000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
  *(CMTime *)(DerivedStorage + 64) = v45;
  v23 = *(const void **)(DerivedStorage + 56);
  if (v23)
    CFRetain(v23);
  if (a4)
    *(_BYTE *)(DerivedStorage + 33) = 1;
  if (a10)
  {
    *(_QWORD *)(DerivedStorage + 48) = CFRetain(a10);
    v24 = v17;
LABEL_22:
    if (!*(_BYTE *)(DerivedStorage + 32))
    {
      if (gSGFFRCommonMemoryPool != -1)
        dispatch_once_f(&gSGFFRCommonMemoryPool, 0, (dispatch_function_t)sgffr_initializeSharedMemoryPoolManagement);
      MEMORY[0x19402EEEC](qword_1EE29F7F8);
      v26 = (CMMemoryPoolRef)MEMORY[0x19402D578](&unk_1EE29F800);
      if (!v26 && byte_1EE29F808)
      {
        Mutable = CFDictionaryCreateMutable(v24, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA4BA0], CFSTR("SampleGeneratorForFormatReader-SampleData"));
        v26 = CMMemoryPoolCreate(Mutable);
        if (Mutable)
          CFRelease(Mutable);
        FigCFWeakReferenceStore();
      }
      MEMORY[0x19402EF04](qword_1EE29F7F8);
      *(_QWORD *)(DerivedStorage + 8) = v26;
    }
    v28 = MEMORY[0x1E0CA2E68];
    v29 = *MEMORY[0x1E0CA2E68];
    *(_OWORD *)(DerivedStorage + 88) = *MEMORY[0x1E0CA2E68];
    v30 = *(_QWORD *)(v28 + 16);
    *(_QWORD *)(DerivedStorage + 104) = v30;
    *(_OWORD *)(DerivedStorage + 112) = v29;
    *(_QWORD *)(DerivedStorage + 128) = v30;
    if ((a9 & 2) != 0)
      *(_BYTE *)(DerivedStorage + 34) = 1;
    if (a3)
    {
      v41 = v29;
      FigBaseObject = FigTrackReaderGetFigBaseObject(a3);
      v32 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, const __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v32)
      {
        v32(FigBaseObject, CFSTR("AdvanceDecodeDelta"), v24, &v48);
        if (v48)
        {
          CMTimeMakeFromDictionary(&v45, v48);
          CFRelease(v48);
          time = v45;
          *(_OWORD *)&time2.value = v41;
          time2.epoch = v30;
          if (CMTimeCompare(&time, &time2) >= 1)
          {
            v33 = (CMTime *)(DerivedStorage + 88);
            if ((a9 & 1) == 0)
              v33 = (CMTime *)(DerivedStorage + 112);
            *v33 = v45;
          }
        }
      }
      v34 = FigTrackReaderGetFigBaseObject(a3);
      v35 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v35)
      {
        v35(v34, CFSTR("HasAudioSampleDependencyInformation"), v24, (CFTypeRef *)&v47);
        v35 = v47;
      }
      v36 = (const void *)*MEMORY[0x1E0C9AE50];
      if (v35 == (void (*)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))*MEMORY[0x1E0C9AE50])
        *(_BYTE *)(DerivedStorage + 35) = 1;
      v37 = FigTrackReaderGetFigBaseObject(a3);
      v38 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v38)
      {
        v38(v37, CFSTR("HasSeamSamples"), v24, &v46);
        v39 = v46;
      }
      else
      {
        v39 = 0;
      }
      if (v39 == v36)
      {
        *(_BYTE *)(DerivedStorage + 36) = 1;
        v39 = v36;
      }
    }
    else
    {
      v39 = 0;
    }
    *a11 = v49;
    v49 = 0;
    if (v47)
    {
      CFRelease(v47);
      v39 = v46;
    }
    if (v39)
      CFRelease(v39);
    return 0;
  }
  v25 = FigSampleGeneratorDataSourceCacheCreate((uint64_t)a1, (_QWORD *)(DerivedStorage + 48));
  v24 = v17;
  if (!(_DWORD)v25)
    goto LABEL_22;
  v18 = v25;
LABEL_3:
  if (v49)
    CFRelease(v49);
  return v18;
}

uint64_t FigSampleGeneratorGetClassID()
{
  MEMORY[0x19402F294](&FigSampleGeneratorGetClassID_sRegisterFigSampleGeneratorTypeOnce, RegisterFigSampleGeneratorType);
  return sFigSampleGeneratorClassID;
}

uint64_t RegisterFigSampleGeneratorType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t AudioMentorNew(const void *a1, const void *a2, const void *a3, const __CFDictionary *a4, _QWORD *a5)
{
  _QWORD *v10;
  _QWORD *v11;
  const void *Value;
  const void *v13;
  BOOL v14;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t (*)(), _QWORD *, _QWORD *);
  uint64_t v18;
  CFDictionaryRef v19;
  void *values;

  values = CFSTR("com.apple.coremedia.audiomentor");
  if (!a1)
    return FigSignalErrorAt();
  if (!a2)
    return FigSignalErrorAt();
  if (!a3)
    return FigSignalErrorAt();
  if (!a5)
    return FigSignalErrorAt();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  v10 = malloc_type_calloc(0x160uLL, 1uLL, 0x9705882BuLL);
  if (!v10)
    return FigSignalErrorAt();
  v11 = v10;
  v10[1] = CFRetain(a1);
  v11[2] = CFRetain(a2);
  v11[3] = CFRetain(a3);
  *((_BYTE *)v11 + 41) = 0;
  if (a4)
  {
    Value = CFDictionaryGetValue(a4, CFSTR("SampleBufferCryptor"));
    v11[6] = Value;
    if (Value)
      CFRetain(Value);
    if (_os_feature_enabled_impl())
    {
      v13 = (const void *)*MEMORY[0x1E0C9AE50];
      v14 = v13 == CFDictionaryGetValue(a4, CFSTR("OptimizeSampleCursorIPCForPower"));
    }
    else
    {
      v14 = 0;
    }
    *((_BYTE *)v11 + 41) = v14;
  }
  FigCFDictionaryGetInt32IfPresent();
  v11[10] = FigSemaphoreCreate();
  v11[11] = FigSemaphoreCreate();
  v11[12] = FigSimpleMutexCreate();
  v11[9] = FigSimpleMutexCreate();
  v11[15] = FigSemaphoreCreate();
  *((_DWORD *)v11 + 11) = 0;
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterAddListener();
  v16 = v11[3];
  v17 = *(uint64_t (**)(uint64_t, uint64_t (*)(), _QWORD *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 32);
  if (v17)
  {
    v18 = v17(v16, audioMentorLowWaterTrigger, v11, v11 + 4);
    if (!(_DWORD)v18)
    {
      *((_BYTE *)v11 + 40) = 1;
      *((_DWORD *)v11 + 28) = 0;
      v19 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], MEMORY[0x1E0CA52C8], (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v18 = FigThreadCreate();
      if (!(_DWORD)v18)
      {
        *a5 = v11;
        v11 = 0;
      }
      if (v19)
        CFRelease(v19);
      goto LABEL_23;
    }
  }
  else
  {
    v18 = 4294954514;
  }
  FigSignalErrorAt();
LABEL_23:
  AudioMentorDispose(v11);
  return v18;
}

uint64_t sbcbq_installLowWaterTrigger(void *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  opaqueCMBufferQueue *v10;
  uint64_t result;
  CMTime v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = DerivedStorage;
  if ((*(_DWORD *)(DerivedStorage + 48) & 0x1D) == 1)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 88));
    *(_QWORD *)(v9 + 96) = a2;
    *(_QWORD *)(v9 + 104) = a3;
    MEMORY[0x19402EF04](*(_QWORD *)(v9 + 88));
    v10 = *(opaqueCMBufferQueue **)(v9 + 120);
    v12 = *(CMTime *)(v9 + 36);
    result = CMBufferQueueInstallTrigger(v10, (CMBufferQueueTriggerCallback)sbcbq_LowWater, a1, 2, &v12, (CMBufferQueueTriggerToken *)(v9 + 112));
  }
  else
  {
    result = 0;
  }
  *a4 = v9 + 88;
  return result;
}

uint64_t sbcbq_LowWater()
{
  uint64_t result;
  uint64_t v1;
  void (*v2)(_QWORD);

  result = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(result + 8))
  {
    v1 = result;
    MEMORY[0x19402EEEC](*(_QWORD *)(result + 88));
    v2 = *(void (**)(_QWORD))(v1 + 96);
    if (v2)
      v2(*(_QWORD *)(v1 + 104));
    JUMPOUT(0x19402EF04);
  }
  return result;
}

uint64_t audioMentorLowWaterTrigger()
{
  return FigSemaphoreSignal();
}

uint64_t audioMentorThread(uint64_t a1)
{
  const void *v2;
  int v4;
  const void *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  int v12;
  char v13;
  int v14;
  int v15;
  const void *v16;
  const void *v17;
  int v18;
  const void *v19;
  const void *v20;
  CFTypeRef v21;
  const void *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, CFTypeRef);
  int v25;
  uint64_t v26;
  void (*v27)(uint64_t);
  OSStatus v28;
  int v29;
  int v30;
  CFTypeRef v31;
  uint64_t (*v32)(CFTypeRef, CMTime *);
  uint64_t (*v33)(CFTypeRef, CMTime *);
  uint64_t (*v34)(CFTypeRef, uint64_t, _QWORD);
  int CursorForPresentationTimeStamp;
  const void *v36;
  uint64_t (*v37)(CFTypeRef, CMTime *);
  CMTimeEpoch v38;
  CFTypeRef v39;
  uint64_t (*v40)(CFTypeRef, CMTime *);
  int v41;
  uint64_t FigBaseObject;
  void (*v43)(uint64_t, const __CFString *, const __CFAllocator *, const __CFNumber **);
  const __CFNumber *v44;
  const __CFNumber *v45;
  uint64_t (*v46)(CFTypeRef, CMTime *);
  int v47;
  CFDictionaryRef v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, CFDictionaryRef, _QWORD);
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t);
  int v56;
  const void *v57;
  CFTypeRef v58;
  void (*v59)(CFTypeRef, CMTime *);
  const AudioFormatListItem *FormatList;
  int v61;
  CFTypeRef v62;
  uint64_t (*v63)(CFTypeRef, uint64_t, _QWORD);
  CFTypeRef v64;
  uint64_t (*v65)(CFTypeRef, CMTime *);
  int v66;
  const void *v67;
  uint64_t v68;
  uint64_t (*v69)(const void *, uint64_t, CMTime *);
  CMTimeValue v70;
  int v71;
  int v72;
  CFTypeRef v73;
  int v74;
  uint64_t (*v75)(CFTypeRef, CMTime *);
  int v76;
  int v77;
  CMTimeValue v78;
  void (*v79)(CMTimeValue, _QWORD, _QWORD);
  uint64_t v80;
  void (*v81)(uint64_t, const __CFString *, CFTypeRef);
  int v82;
  uint64_t v83;
  CMTimeValue v84;
  uint64_t (*v85)(CMTimeValue, uint64_t, CMTime *);
  int v86;
  const __CFString *v87;
  int v88;
  const __CFString *v89;
  __CFDictionary *v90;
  uint64_t v91;
  void (*v92)(uint64_t);
  char v93;
  uint64_t (*v94)(const void *, void **);
  int v95;
  char v96;
  CMTime *v97;
  CMTime *v98;
  int v99;
  int v100;
  uint64_t v101;
  CFTypeRef v102;
  uint64_t v103;
  CFTypeRef v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int (*v108)(uint64_t);
  uint64_t v109;
  unsigned int (*v110)(uint64_t);
  __CFDictionary *v111;
  uint64_t v112;
  unsigned int (*v113)(uint64_t);
  __CFDictionary *v114;
  uint64_t v115;
  CFTypeRef v116;
  uint64_t v117;
  uint64_t (*v118)(uint64_t, const void *, uint64_t, uint64_t, _QWORD, CFTypeRef, uint64_t, _QWORD, uint64_t (*)(uint64_t *, uint64_t, opaqueCMSampleBuffer *), _OWORD *, const void *, CMSampleBufferRef *);
  int v119;
  CFTypeRef v120;
  uint64_t v121;
  uint64_t v122;
  CMSampleBufferRef v123;
  uint64_t (*v124)(uint64_t, CMSampleBufferRef);
  int v125;
  CMItemCount NumSamples;
  CMItemCount v127;
  uint64_t (*v128)(const void *, CMItemCount, uint64_t *);
  uint64_t (*v129)(const void *, CFTypeRef *);
  CFTypeRef v130;
  uint64_t v131;
  uint64_t (*v132)(const void *, CFTypeRef);
  uint64_t (*v133)(const void *, CFTypeRef);
  const void *v134;
  CFDictionaryRef v135;
  uint64_t v136;
  void (*v137)(uint64_t, uint64_t, CFDictionaryRef, _QWORD);
  uint64_t v138;
  void (*v139)(uint64_t, uint64_t, _QWORD, _QWORD);
  CMSampleBufferRef v140;
  uint64_t (*v141)(CFTypeRef, CMSampleBufferRef);
  int v142;
  uint64_t (*v143)(const void *, CFTypeRef);
  unint64_t v144;
  int *p_mFormatID;
  int v146;
  int v147;
  unsigned int v148;
  BOOL v149;
  int v150;
  int v152;
  uint64_t (*v153)(CFTypeRef, uint64_t, _QWORD);
  uint64_t v154;
  int v155;
  CMTimeValue v156;
  uint64_t (*v157)(CFTypeRef, CMTimeValue);
  uint64_t (*v158)(CFTypeRef, uint64_t, _QWORD);
  const __CFString *v159;
  int v160;
  const __CFString *v161;
  __CFDictionary *v162;
  const void *v163;
  uint64_t v164;
  CMTimeEpoch epoch;
  uint64_t v166;
  __int128 v167;
  int v168;
  uint64_t (*v169)(const void *, CFTypeRef);
  uint64_t v170;
  uint64_t v171;
  unsigned int v172;
  const __CFString *v173;
  const void *v174;
  int v175;
  int v176;
  const __CFString *v177;
  const __CFString *v178;
  const __CFString *v179;
  const __CFString *v180;
  uint64_t v181;
  uint64_t v182;
  const __CFString *key;
  void *v184;
  const __CFNumber *value;
  CFTypeRef valuea;
  int v187;
  CFTypeRef v188;
  int v189;
  __int128 v190;
  const __CFAllocator *allocator;
  CFTypeRef *v192;
  char v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  _OWORD *v197;
  int v198;
  _OWORD *v199;
  CFTypeRef v200;
  CFTypeRef v201;
  const void *v202;
  __int128 v203;
  uint64_t v204;
  CMTime v205;
  CMTime v206;
  __int128 v207;
  uint64_t v208;
  CMTime v209;
  CMTime v210;
  CFTypeRef cf;
  CMTime rhs;
  CMTime lhs;
  CMTime time2;
  CMTime time1;
  uint64_t v216;
  const __CFNumber *v217;
  _OWORD v218[2];
  __int128 v219;
  _OWORD v220[2];
  uint64_t v221;
  void *values[2];
  uint64_t v223;
  CMSampleBufferRef v224;
  int valuePtr;
  CFTypeRef v226;
  CFTypeRef v227[2];

  cf = 0;
  if (*(_BYTE *)(a1 + 41))
    FigFormatReaderXPCRemoteEnsureEfficientIPCFromCurrentThread(*(unsigned int *)(a1 + 44), &cf);
  if (*(_DWORD *)(a1 + 112) == 4)
    goto LABEL_4;
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v199 = (_OWORD *)(a1 + 300);
  v197 = (_OWORD *)(a1 + 324);
  v188 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
  v184 = (void *)(a1 + 268);
  key = (const __CFString *)*MEMORY[0x1E0CA26E0];
  v182 = *MEMORY[0x1E0CA2760];
  v181 = *MEMORY[0x1E0CA2768];
  v192 = (CFTypeRef *)(a1 + 288);
  v178 = (const __CFString *)*MEMORY[0x1E0CA26B8];
  v179 = (const __CFString *)*MEMORY[0x1E0CA26B0];
  v174 = (const void *)*MEMORY[0x1E0C9AE40];
  v180 = (const __CFString *)*MEMORY[0x1E0CA26D8];
  v177 = (const __CFString *)*MEMORY[0x1E0CA2698];
  v173 = (const __CFString *)*MEMORY[0x1E0CA2658];
  do
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 96));
    v4 = *(_DWORD *)(a1 + 112);
    v5 = *(const void **)(a1 + 128);
    v210 = *(CMTime *)(a1 + 136);
    v201 = *(CFTypeRef *)(a1 + 160);
    v202 = v5;
    v209 = *(CMTime *)(a1 + 168);
    v7 = *(_DWORD *)(a1 + 192);
    v6 = *(_DWORD *)(a1 + 196);
    v9 = *(_DWORD *)(a1 + 200);
    v8 = *(_DWORD *)(a1 + 204);
    v10 = *(int *)(a1 + 208);
    v11 = *(_OWORD *)(a1 + 212);
    v208 = *(_QWORD *)(a1 + 228);
    v207 = v11;
    v12 = *(unsigned __int8 *)(a1 + 236);
    v13 = *(_BYTE *)(a1 + 237);
    v14 = *(unsigned __int8 *)(a1 + 238);
    v15 = *(unsigned __int8 *)(a1 + 239);
    v16 = *(const void **)(a1 + 248);
    v200 = *(CFTypeRef *)(a1 + 240);
    v17 = *(const void **)(a1 + 256);
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_BYTE *)(a1 + 280) = 0;
    *(_BYTE *)(a1 + 116) = 0;
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 256) = 0;
    *(_QWORD *)(a1 + 240) = 0;
    if (!v4)
    {
      if (*(_BYTE *)(a1 + 117))
      {
        *(_BYTE *)(a1 + 117) = 0;
        FigSemaphoreSignal();
      }
      FigMemoryBarrier();
      MEMORY[0x19402EF04](*(_QWORD *)(a1 + 96));
      v19 = v202;
      v22 = v200;
      if (v16)
        audioMentorEnqueueBufferConsumedMarker(a1, v16);
      goto LABEL_422;
    }
    v195 = v6;
    v193 = v13;
    v198 = v14;
    FigMemoryBarrier();
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 96));
    if ((v4 - 1) >= 2)
    {
      v19 = v202;
      v22 = v200;
      if (v4 != 3)
        goto LABEL_422;
      *(_QWORD *)&v218[0] = 0;
      *(_DWORD *)(a1 + 264) = v7;
      if ((v195 - 3) >= 0xFFFFFFFE)
      {
        if (*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72))
        {
          v26 = *(_QWORD *)(a1 + 24);
          v27 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
          if (v27)
            v27(v26);
        }
        *(_BYTE *)(a1 + 297) = 1;
        v28 = CMSampleBufferCreate(allocator, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)v218);
        if (v28)
        {
          v25 = v28;
          goto LABEL_166;
        }
        ++*(_DWORD *)(a1 + 268);
        values[0] = CFNumberCreate(allocator, kCFNumberIntType, v184);
        v48 = CFDictionaryCreate(allocator, MEMORY[0x1E0CA2748], (const void **)values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        CMSetAttachment(*(CMAttachmentBearerRef *)&v218[0], key, values[0], 1u);
        v49 = *(_QWORD *)(a1 + 24);
        v50 = *(void (**)(uint64_t, uint64_t, CFDictionaryRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 64);
        if (v50)
          v50(v49, v182, v48, 0);
        v51 = *(_QWORD *)(a1 + 24);
        v52 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
        if (v52)
          v52(v51, v181, 0, 0);
        if (values[0])
          CFRelease(values[0]);
        if (v48)
          CFRelease(v48);
        if (v198)
          FigSemaphoreSignal();
        v53 = *(_QWORD *)(a1 + 24);
        v54 = *(_QWORD *)&v218[0];
        v55 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (!v55)
        {
          v198 = 0;
          goto LABEL_165;
        }
        v56 = v55(v53, v54);
        if (v56)
        {
          v25 = v56;
          v198 = 0;
          goto LABEL_166;
        }
        v198 = 0;
        if (!v200)
          goto LABEL_33;
      }
      else
      {
        *(_BYTE *)(a1 + 297) = 1;
        if (!v200)
        {
LABEL_33:
          if (v16)
            v25 = audioMentorEnqueueBufferConsumedMarker(a1, v16);
          else
            v25 = 0;
          v57 = 0;
          goto LABEL_167;
        }
      }
      v23 = *(_QWORD *)(a1 + 24);
      v24 = *(uint64_t (**)(uint64_t, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v24)
      {
        v25 = v24(v23, v200);
        if (!v25)
          goto LABEL_33;
LABEL_166:
        FigSignalErrorAt();
        v57 = v16;
LABEL_167:
        if (v198)
          FigSemaphoreSignal();
        audioMentorThreadFinishPreroll(a1, 0, v17);
        if (!*(_BYTE *)a1)
        {
          v87 = CFSTR("MentorStoppingDueToCompletion");
          if (v25)
            v87 = CFSTR("MentorStoppingDueToError");
          if (v25 == -1)
            v88 = 0;
          else
            v88 = v25;
          if (v25 == -1)
            v89 = CFSTR("MentorResettingDueToModeSwitch");
          else
            v89 = v87;
          v90 = FigMentorNotificationPayloadCreate((uint64_t)v89, v17, v88, *(unsigned __int8 *)(a1 + 280), v57, 0);
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterPostNotification();
          if (v90)
            CFRelease(v90);
        }
        if (*(_QWORD *)&v218[0])
          CFRelease(*(CFTypeRef *)&v218[0]);
        goto LABEL_422;
      }
LABEL_165:
      v25 = -12782;
      goto LABEL_166;
    }
    v206 = v210;
    v205 = v209;
    v203 = v207;
    v204 = v208;
    v226 = v201;
    v227[0] = v202;
    valuePtr = v9;
    v224 = 0;
    v216 = 0;
    v217 = 0;
    v18 = *MEMORY[0x1E0CA1FC0];
    if ((v7 & 0xFFFFFFFD) == 1 && v18 == 1)
    {
      kdebug_trace();
      v18 = *MEMORY[0x1E0CA1FC0];
    }
    v19 = v202;
    if (v18 == 1)
      kdebug_trace();
    *(_DWORD *)(a1 + 284) = 0;
    *(_DWORD *)(a1 + 264) = v7;
    v20 = *(const void **)(a1 + 272);
    *(_QWORD *)(a1 + 272) = v17;
    if (v17)
      CFRetain(v17);
    if (v20)
      CFRelease(v20);
    values[0] = 0;
    values[1] = 0;
    v223 = 0;
    memset(v218, 0, sizeof(v218));
    v219 = 0u;
    memset(v220, 0, sizeof(v220));
    v21 = v202;
    v221 = 0;
    if (!v15)
      goto LABEL_43;
    time1 = v206;
    *(_OWORD *)&time2.value = *v199;
    time2.epoch = *(_QWORD *)(a1 + 316);
    if (CMTimeCompare(&time1, &time2))
    {
      v21 = v227[0];
LABEL_43:
      if (v21)
      {
LABEL_44:
        v29 = 0;
        goto LABEL_45;
      }
      goto LABEL_62;
    }
    v21 = v227[0];
    if ((*(_DWORD *)(a1 + 336) & 0x1D) != 1)
      goto LABEL_43;
    if (v227[0])
      goto LABEL_44;
    *(_OWORD *)&v206.value = *v197;
    v206.epoch = *(_QWORD *)(a1 + 340);
LABEL_62:
    time1 = v206;
    CursorForPresentationTimeStamp = audioMentorCreateCursorForPresentationTimeStamp(a1, v12, (__int128 *)&time1.value, (uint64_t)v227);
    if (CursorForPresentationTimeStamp)
      goto LABEL_63;
    if (v4 != 2)
      goto LABEL_86;
    memset(&time1, 0, sizeof(time1));
    v31 = v227[0];
    v46 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (!v46)
      goto LABEL_360;
    LODWORD(v31) = v46(v31, &time1);
    if ((_DWORD)v31)
      goto LABEL_361;
    if ((time1.flags & 0x1D) != 1)
    {
      CursorForPresentationTimeStamp = FigSignalErrorAt();
LABEL_63:
      LODWORD(v31) = CursorForPresentationTimeStamp;
      goto LABEL_64;
    }
    time2 = time1;
    lhs = v206;
    if (!CMTimeCompare(&time2, &lhs))
    {
      v31 = v227[0];
      v153 = *(uint64_t (**)(CFTypeRef, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
      if (v153)
      {
        LODWORD(v31) = v153(v31, -1, 0);
        if ((_DWORD)v31)
          goto LABEL_361;
        goto LABEL_86;
      }
LABEL_360:
      LODWORD(v31) = -12782;
LABEL_361:
      FigSignalErrorAt();
LABEL_64:
      v36 = 0;
      v29 = 0;
LABEL_385:
      v82 = 0;
      goto LABEL_386;
    }
LABEL_86:
    v29 = 1;
LABEL_45:
    if ((v206.flags & 0x1D) != 1)
    {
      v31 = v227[0];
      v37 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
      if (!v37)
        goto LABEL_382;
      LODWORD(v31) = v37(v31, &v206);
      if ((_DWORD)v31)
        goto LABEL_383;
      if ((v206.flags & 0x1D) == 1)
      {
        if (v4 != 2)
          goto LABEL_46;
        v175 = v29;
        v190 = *MEMORY[0x1E0CA2E68];
        *(_OWORD *)&time1.value = *MEMORY[0x1E0CA2E68];
        v38 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
        time1.epoch = v38;
        v39 = v227[0];
        v40 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
        if (!v40)
          goto LABEL_72;
        v41 = v40(v39, &time1);
        if (v41)
        {
          LODWORD(v31) = v41;
          if (v41 == -12782)
          {
LABEL_72:
            *(_OWORD *)&time1.value = v190;
            time1.epoch = v38;
LABEL_73:
            lhs = v206;
            rhs = time1;
            CMTimeAdd(&time2, &lhs, &rhs);
            v206 = time2;
            v29 = v175;
            goto LABEL_46;
          }
          FigSignalErrorAt();
        }
        else
        {
          if ((time1.flags & 0x1D) == 1)
            goto LABEL_73;
          LODWORD(v31) = FigSignalErrorAt();
        }
        v29 = v175;
      }
      else
      {
LABEL_106:
        v30 = FigSignalErrorAt();
LABEL_107:
        LODWORD(v31) = v30;
      }
LABEL_384:
      v36 = 0;
      goto LABEL_385;
    }
LABEL_46:
    if (!v226 && (v205.flags & 0x1D) == 1)
    {
      time1 = v205;
      v30 = audioMentorCreateCursorForPresentationTimeStamp(a1, v12, (__int128 *)&time1.value, (uint64_t)&v226);
      if (v30)
        goto LABEL_107;
      if (v4 != 1)
        goto LABEL_61;
      memset(&time1, 0, sizeof(time1));
      v31 = v226;
      v32 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
      if (!v32)
        goto LABEL_382;
      LODWORD(v31) = v32(v31, &time1);
      if ((_DWORD)v31)
        goto LABEL_383;
      if ((time1.flags & 0x1D) != 1)
        goto LABEL_106;
      time2 = time1;
      lhs = v205;
      if (!CMTimeCompare(&time2, &lhs))
      {
        v31 = v226;
        v158 = *(uint64_t (**)(CFTypeRef, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
        if (!v158)
          goto LABEL_382;
        LODWORD(v31) = v158(v31, -1, 0);
        if ((_DWORD)v31)
          goto LABEL_383;
      }
      if (!(_DWORD)v10)
        goto LABEL_61;
      v31 = v226;
      if (!v226)
        goto LABEL_61;
      v33 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
      if (!v33)
        goto LABEL_382;
      LODWORD(v31) = v33(v31, &time1);
      if ((_DWORD)v31)
        goto LABEL_383;
      if ((time1.flags & 0x1D) != 1)
        goto LABEL_106;
      v31 = v226;
      v34 = *(uint64_t (**)(CFTypeRef, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
      if (v34)
      {
        LODWORD(v31) = v34(v31, v10, 0);
        if ((_DWORD)v31)
          goto LABEL_383;
LABEL_61:
        v189 = 1;
        goto LABEL_75;
      }
LABEL_382:
      LODWORD(v31) = -12782;
LABEL_383:
      FigSignalErrorAt();
      goto LABEL_384;
    }
    v189 = 0;
LABEL_75:
    FigBaseObject = FigSampleCursorGetFigBaseObject(v227[0]);
    v43 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, const __CFNumber **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v43)
      v43(FigBaseObject, CFSTR("GradualDecoderRefresh"), allocator, &v217);
    v44 = v217;
    if (v217)
    {
      CFNumberGetValue(v217, kCFNumberSInt32Type, &valuePtr);
      v45 = v217;
      if (v4 == 2)
      {
        valuePtr = 0;
        if (v217)
        {
          CFRelease(v217);
          v45 = 0;
          v8 = 0;
          v217 = 0;
        }
        else
        {
          v8 = 0;
        }
        goto LABEL_109;
      }
      v47 = 0;
    }
    else
    {
      if (v4 == 2)
      {
        v45 = 0;
        v8 = 0;
        valuePtr = 0;
LABEL_109:
        v47 = 1;
        goto LABEL_110;
      }
      v47 = 0;
      v45 = 0;
    }
LABEL_110:
    if (valuePtr)
    {
      if (!v45)
      {
        v217 = CFNumberCreate(allocator, kCFNumberSInt32Type, &valuePtr);
        if (!v217)
        {
          FigSignalErrorAt();
          v36 = 0;
          LODWORD(v31) = 0;
LABEL_307:
          v134 = v16;
          goto LABEL_308;
        }
      }
    }
    value = v44;
    if (v4 != 1)
      goto LABEL_126;
    if (!v226)
      goto LABEL_126;
    v58 = v227[0];
    time1.value = 0;
    v59 = *(void (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 160);
    if (!v59)
      goto LABEL_126;
    v59(v58, &time1);
    if (!time1.value)
      goto LABEL_126;
    if (CMFormatDescriptionGetMediaType((CMFormatDescriptionRef)time1.value) == 1936684398)
    {
      time2.value = 0;
      FormatList = CMAudioFormatDescriptionGetFormatList((CMAudioFormatDescriptionRef)time1.value, (size_t *)&time2);
      if (FormatList)
      {
        if (time2.value >= 0x30uLL)
        {
          v144 = time2.value / 0x30uLL;
          p_mFormatID = (int *)&FormatList->mASBD.mFormatID;
          while (1)
          {
            v147 = *p_mFormatID;
            p_mFormatID += 12;
            v146 = v147;
            v61 = 1;
            if (v147 > 1885430639)
              break;
            if (v146 > 1667326823)
            {
              if (v146 > 1668641632)
              {
                if (v146 == 1668641633)
                  goto LABEL_121;
                v152 = 1885430632;
              }
              else
              {
                if (v146 == 1667326824)
                  goto LABEL_121;
                v152 = 1667326832;
              }
LABEL_340:
              if (v146 == v152)
                goto LABEL_121;
              goto LABEL_341;
            }
            v148 = v146 - 1633772389;
            v149 = v148 > 0xB;
            v150 = (1 << v148) & 0x80F;
            if (!v149 && v150 != 0)
              goto LABEL_121;
LABEL_341:
            v61 = 0;
            if (!--v144)
              goto LABEL_121;
          }
          if (v146 <= 1903522656)
          {
            if (v146 > 1902207847)
            {
              if (v146 == 1902207848)
                goto LABEL_121;
              v152 = 1902207856;
            }
            else
            {
              if (v146 == 1885430640)
                goto LABEL_121;
              v152 = 1886745441;
            }
          }
          else if (v146 <= 2053202791)
          {
            if (v146 == 1903522657)
              goto LABEL_121;
            v152 = 1970495843;
          }
          else
          {
            if (v146 == 2053202792 || v146 == 2053202800)
              goto LABEL_121;
            v152 = 2054517601;
          }
          goto LABEL_340;
        }
      }
    }
    v61 = 0;
LABEL_121:
    if (time1.value)
      CFRelease((CFTypeRef)time1.value);
    if (!v61)
      goto LABEL_126;
    v62 = v226;
    v63 = *(uint64_t (**)(CFTypeRef, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
    if (!v63)
    {
      LODWORD(v31) = -12782;
LABEL_306:
      FigSignalErrorAt();
      v36 = 0;
      goto LABEL_307;
    }
    LODWORD(v31) = v63(v62, 1, 0);
    if ((_DWORD)v31)
      goto LABEL_306;
LABEL_126:
    v64 = v227[0];
    time1.value = 0;
    v187 = v47;
    if (!v8
      || (v65 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8)) == 0)
    {
      v71 = v29;
LABEL_132:
      v8 = 0;
      goto LABEL_142;
    }
    v66 = v65(v64, &time1);
    v67 = (const void *)time1.value;
    if (v66)
    {
      v72 = 0;
    }
    else
    {
      time2.value = 0;
      v68 = ~v8;
      v69 = *(uint64_t (**)(const void *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
      if (v69)
      {
        LODWORD(v69) = v69(v67, v68, &time2) == 0;
        v70 = time2.value;
      }
      else
      {
        v70 = 0;
      }
      if (v70 == v68)
        v72 = 0;
      else
        v72 = (int)v69;
      v67 = (const void *)time1.value;
    }
    v71 = v29;
    if (v67)
      CFRelease(v67);
    if (!v72)
      goto LABEL_132;
LABEL_142:
    v73 = v227[0];
    v74 = valuePtr;
    time1.value = 0;
    v75 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (!v75)
    {
      LODWORD(v31) = -12782;
LABEL_160:
      v82 = v189;
LABEL_161:
      v29 = v71;
      if (time1.value)
        CFRelease((CFTypeRef)time1.value);
      v36 = 0;
      goto LABEL_386;
    }
    v76 = v75(v73, &time1);
    if (v76)
    {
      LODWORD(v31) = v76;
      goto LABEL_160;
    }
    if (v74 <= v8)
      v77 = v8;
    else
      v77 = v74;
    if (v77 >= 1)
    {
      v78 = time1.value;
      v79 = *(void (**)(CMTimeValue, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
      if (v79)
        v79(v78, -v77, 0);
    }
    v80 = FigSampleCursorGetFigBaseObject(time1.value);
    v81 = *(void (**)(uint64_t, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    v82 = v189;
    if (v81)
      v81(v80, CFSTR("EagerlyFetchSampleDependencyAttributes"), v188);
    if (audioMentorGetDecodeWalkCatchupStatusForSteps(time1.value, 0) != 2)
    {
      v83 = 0;
      while (1)
      {
        time2.value = 0;
        v84 = time1.value;
        v85 = *(uint64_t (**)(CMTimeValue, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                       + 168);
        if (!v85)
          break;
        v86 = v85(v84, -1, &time2);
        if (!time2.value)
          goto LABEL_184;
        LODWORD(v31) = v86;
        if (v86)
          goto LABEL_161;
        v83 += time2.value;
        if (audioMentorGetDecodeWalkCatchupStatusForSteps(time1.value, -v83) == 2)
          goto LABEL_184;
      }
      if (time2.value)
      {
        LODWORD(v31) = -12782;
        goto LABEL_161;
      }
    }
LABEL_184:
    v36 = (const void *)time1.value;
    if ((v195 - 1) > 1)
    {
      v93 = 1;
      v29 = v71;
    }
    else
    {
      v29 = v71;
      if (*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72))
      {
        v91 = *(_QWORD *)(a1 + 24);
        v92 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
        if (v92)
          v92(v91);
        v93 = 0;
      }
      else
      {
        v93 = 1;
      }
    }
    v94 = *(uint64_t (**)(const void *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
    if (v4 == 1)
    {
      if (v94)
      {
        v95 = v94(v36, values);
        if (!v95)
        {
          if ((BYTE4(values[1]) & 0x1D) != 1)
            goto LABEL_303;
          goto LABEL_196;
        }
        LODWORD(v31) = v95;
        if (v95 != -12782)
          goto LABEL_204;
      }
      *(_OWORD *)values = *MEMORY[0x1E0CA2E68];
      v223 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
LABEL_196:
      v96 = 0;
      if (values[0])
      {
        v196 = 2 * LODWORD(values[1]) / SLODWORD(values[0]);
        v172 = 1;
        v97 = &v205;
        v98 = &v206;
        v99 = 3 * LODWORD(values[1]) / SLODWORD(values[0]);
      }
      else
      {
        v99 = 0;
        v196 = 1;
        v97 = &v205;
        v98 = &v206;
        v172 = 1;
      }
      goto LABEL_209;
    }
    if (!v94)
      goto LABEL_201;
    v100 = v94(v36, values);
    if (v100)
    {
      LODWORD(v31) = v100;
      if (v100 == -12782)
      {
LABEL_201:
        *(_OWORD *)values = *MEMORY[0x1E0CA2E68];
        v223 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
        goto LABEL_202;
      }
LABEL_204:
      FigSignalErrorAt();
LABEL_304:
      v134 = v16;
      v19 = v202;
      goto LABEL_387;
    }
    if ((BYTE4(values[1]) & 0x1D) != 1)
    {
LABEL_303:
      LODWORD(v31) = FigSignalErrorAt();
      goto LABEL_304;
    }
LABEL_202:
    if (values[0])
    {
      v99 = SLODWORD(values[1]) / (4 * LODWORD(values[0]));
      v196 = v99;
      v172 = -1;
      v96 = 1;
      v97 = &v206;
      v98 = &v205;
    }
    else
    {
      v99 = 0;
      v172 = -1;
      v96 = 1;
      v97 = &v206;
      v98 = &v205;
      v196 = 1;
    }
LABEL_209:
    *(_QWORD *)&v218[0] = a1;
    *(_OWORD *)((char *)v218 + 8) = *(_OWORD *)&v98->value;
    *((_QWORD *)&v218[1] + 1) = v98->epoch;
    v219 = *(_OWORD *)&v97->value;
    *(_QWORD *)&v220[0] = v97->epoch;
    BYTE1(v221) = v96;
    *(_OWORD *)((char *)v220 + 8) = v203;
    *((_QWORD *)&v220[1] + 1) = v204;
    LOBYTE(v221) = v193;
    if ((v93 & 1) == 0)
    {
      time1.value = 0;
      LODWORD(v31) = CMSampleBufferCreate(allocator, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, &v224);
      if ((_DWORD)v31)
        goto LABEL_283;
      ++*(_DWORD *)(a1 + 268);
      time1.value = (CMTimeValue)CFNumberCreate(allocator, kCFNumberIntType, v184);
      v135 = CFDictionaryCreate(allocator, MEMORY[0x1E0CA2748], (const void **)&time1, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CMSetAttachment(v224, key, (CFTypeRef)time1.value, 1u);
      v136 = *(_QWORD *)(a1 + 24);
      v137 = *(void (**)(uint64_t, uint64_t, CFDictionaryRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 64);
      if (v137)
        v137(v136, v182, v135, 0);
      v138 = *(_QWORD *)(a1 + 24);
      v139 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
      if (v139)
        v139(v138, v181, 0, 0);
      if (time1.value)
        CFRelease((CFTypeRef)time1.value);
      if (v135)
        CFRelease(v135);
      v31 = *(CFTypeRef *)(a1 + 24);
      v140 = v224;
      v141 = *(uint64_t (**)(CFTypeRef, CMSampleBufferRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v141)
      {
        LODWORD(v31) = v141(v31, v140);
        if ((_DWORD)v31)
          goto LABEL_283;
        if (v224)
        {
          CFRelease(v224);
          v224 = 0;
        }
        v19 = v202;
        if (v198)
          FigSemaphoreSignal();
        v198 = 0;
        goto LABEL_211;
      }
      LODWORD(v31) = -12782;
LABEL_283:
      FigSignalErrorAt();
      v134 = v16;
      v19 = v202;
LABEL_308:
      v142 = v198;
LABEL_309:
      v82 = v189;
      if (v142)
        goto LABEL_388;
      goto LABEL_389;
    }
    v19 = v202;
LABEL_211:
    v176 = v29;
    v101 = 1;
    if (v4 != 1)
      v101 = -1;
    v170 = v101;
    v102 = v226;
    if (v226
      && (v103 = *(_QWORD *)(CMBaseObjectGetVTable() + 16), v103 == *(_QWORD *)(CMBaseObjectGetVTable() + 16))
      && (v143 = *(uint64_t (**)(const void *, CFTypeRef))(v103 + 32)) != 0)
    {
      v194 = v143(v36, v102);
      if (v194 == v170)
        goto LABEL_369;
    }
    else
    {
      v194 = 0;
    }
    v171 = v99;
    v104 = v188;
    if (!value)
      v104 = v174;
    valuea = v104;
    while (1)
    {
      if (*(_BYTE *)(a1 + 116))
      {
        LODWORD(v31) = -1;
LABEL_356:
        v134 = v16;
        v142 = v198;
        v29 = v176;
        goto LABEL_309;
      }
      if ((*(_DWORD *)(a1 + 264) | 2) == 3)
      {
        v105 = *(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
        v106 = *(_QWORD *)(a1 + 24);
        v107 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
        if (v105)
        {
          v108 = *(unsigned int (**)(uint64_t))(v107 + 104);
          if (!v108)
            goto LABEL_226;
        }
        else
        {
          v108 = *(unsigned int (**)(uint64_t))(v107 + 24);
          if (!v108)
            goto LABEL_226;
        }
        if (!v108(v106))
LABEL_226:
          audioMentorThreadFinishPreroll(a1, 2, v17);
      }
      v109 = *(_QWORD *)(a1 + 24);
      v110 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v110 && v110(v109))
      {
        if (!*(_BYTE *)a1)
        {
          v111 = FigMentorNotificationPayloadCreate((uint64_t)CFSTR("MentorPausingDueToHighWaterLevel"), v17, 0, *(unsigned __int8 *)(a1 + 280), 0, 0);
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterPostNotification();
          if (v111)
            CFRelease(v111);
        }
        v82 = v189;
        if (*MEMORY[0x1E0CA1FC0] == 1)
          kdebug_trace();
        v29 = v176;
        do
        {
          FigSemaphoreWaitRelative();
          if (*(_BYTE *)(a1 + 116))
          {
            LODWORD(v31) = -1;
            goto LABEL_386;
          }
          v112 = *(_QWORD *)(a1 + 24);
          v113 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        }
        while (v113 && v113(v112));
        if (*MEMORY[0x1E0CA1FC0] == 1)
          kdebug_trace();
        *(_DWORD *)(a1 + 284) = 0;
        if (!*(_BYTE *)a1)
        {
          v114 = FigMentorNotificationPayloadCreate((uint64_t)CFSTR("MentorResumingAfterHighWaterLevel"), v17, 0, *(unsigned __int8 *)(a1 + 280), 0, 0);
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterPostNotification();
          if (v114)
            CFRelease(v114);
        }
      }
      v115 = *(_QWORD *)(a1 + 16);
      v116 = v226;
      v117 = *(unsigned int *)(a1 + 264);
      v118 = *(uint64_t (**)(uint64_t, const void *, uint64_t, uint64_t, _QWORD, CFTypeRef, uint64_t, _QWORD, uint64_t (*)(uint64_t *, uint64_t, opaqueCMSampleBuffer *), _OWORD *, const void *, CMSampleBufferRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (!v118)
      {
        LODWORD(v31) = -12782;
        v19 = v202;
LABEL_355:
        FigSignalErrorAt();
        goto LABEL_356;
      }
      v119 = v118(v115, v36, v196, v171, v172, v116, v117, 0, audioMentorRemapSBufTiming, v218, v17, &v224);
      if (v119)
      {
        LODWORD(v31) = v119;
        v19 = v202;
        if (v119 == -12840)
          goto LABEL_369;
        goto LABEL_355;
      }
      v19 = v202;
      if (v217)
      {
        CMSetAttachment(v224, v179, v217, 1u);
        CMSetAttachment(v224, v178, valuea, 1u);
      }
      if (*(_QWORD *)(a1 + 48))
        FigSampleBufferSetDecryptor();
      v120 = *v192;
      v82 = v189;
      if (*v192)
      {
        v121 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
        if (v121 == *(_QWORD *)(CMBaseObjectGetVTable() + 16))
        {
          v132 = *(uint64_t (**)(const void *, CFTypeRef))(v121 + 32);
          if (v132)
          {
            if (v132(v36, v120))
            {
              *(_BYTE *)(a1 + 296) = 1;
LABEL_252:
              CMSetAttachment(v224, v180, v188, 1u);
              *(_BYTE *)(a1 + 296) = 0;
              goto LABEL_253;
            }
          }
        }
      }
      if (*(_BYTE *)(a1 + 296))
        goto LABEL_252;
LABEL_253:
      v29 = v176;
      if (*(_BYTE *)(a1 + 297))
      {
        CMSetAttachment(v224, v177, v188, 1u);
        *(_BYTE *)(a1 + 297) = 0;
      }
      v122 = *(_QWORD *)(a1 + 24);
      v123 = v224;
      v124 = *(uint64_t (**)(uint64_t, CMSampleBufferRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (!v124)
        goto LABEL_343;
      v125 = v124(v122, v123);
      if (v125)
        goto LABEL_344;
      ++*(_DWORD *)(a1 + 284);
      *(_BYTE *)(a1 + 280) = 1;
      NumSamples = CMSampleBufferGetNumSamples(v224);
      v127 = v187 ? -NumSamples : NumSamples;
      v128 = *(uint64_t (**)(const void *, CMItemCount, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 168);
      if (!v128)
      {
LABEL_343:
        LODWORD(v31) = -12782;
LABEL_345:
        FigSignalErrorAt();
        goto LABEL_386;
      }
      v125 = v128(v36, v127, &v216);
      if (v125)
        goto LABEL_344;
      if (v127 != v216)
        break;
      if (*v192)
      {
        CFRelease(*v192);
        *v192 = 0;
      }
      if (v4 == 1)
      {
        v129 = *(uint64_t (**)(const void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (!v129)
          goto LABEL_343;
        v125 = v129(v36, v192);
        if (v125)
        {
LABEL_344:
          LODWORD(v31) = v125;
          goto LABEL_345;
        }
      }
      else
      {
        *(_BYTE *)(a1 + 296) = 1;
      }
      v130 = v226;
      if (v226)
      {
        v131 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
        if (v131 == *(_QWORD *)(CMBaseObjectGetVTable() + 16)
          && (v133 = *(uint64_t (**)(const void *, CFTypeRef))(v131 + 32)) != 0)
        {
          v194 = v133(v36, v130);
        }
        else
        {
          v194 = 0;
        }
      }
      if (v224)
      {
        CFRelease(v224);
        v224 = 0;
      }
      if (v194 == v170)
        goto LABEL_369;
    }
    v31 = v226;
    if (!v226)
      goto LABEL_365;
    v154 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    if (v154 != *(_QWORD *)(CMBaseObjectGetVTable() + 16)
      || (v169 = *(uint64_t (**)(const void *, CFTypeRef))(v154 + 32)) == 0
      || !v169(v36, v31))
    {
      LODWORD(v31) = 0;
LABEL_365:
      v155 = 1;
      goto LABEL_366;
    }
    FigSignalErrorAt();
    v155 = 0;
    LODWORD(v31) = -12840;
LABEL_366:
    if (*v192)
    {
      CFRelease(*v192);
      *v192 = 0;
    }
    *(_BYTE *)(a1 + 296) = 1;
    if (!v155)
      goto LABEL_356;
LABEL_369:
    time1.value = 0;
    LODWORD(v31) = CMSampleBufferCreate(allocator, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)&time1);
    if (!(_DWORD)v31)
    {
      CMSetAttachment((CMAttachmentBearerRef)time1.value, v173, v188, 1u);
      v31 = *(CFTypeRef *)(a1 + 24);
      v156 = time1.value;
      v157 = *(uint64_t (**)(CFTypeRef, CMTimeValue))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v157)
        LODWORD(v31) = v157(v31, v156);
      else
        LODWORD(v31) = -12782;
      CFRelease((CFTypeRef)time1.value);
    }
    if (*v192)
    {
      CFRelease(*v192);
      *v192 = 0;
    }
    *(_BYTE *)(a1 + 296) = 1;
    v29 = v176;
    v82 = v189;
    if (v16 && !(_DWORD)v31)
    {
      LODWORD(v31) = audioMentorEnqueueBufferConsumedMarker(a1, v16);
      v134 = 0;
      goto LABEL_387;
    }
LABEL_386:
    v134 = v16;
LABEL_387:
    if (v198)
LABEL_388:
      FigSemaphoreSignal();
LABEL_389:
    audioMentorThreadFinishPreroll(a1, 0, v17);
    if (*MEMORY[0x1E0CA1FC0] == 1)
      kdebug_trace();
    if (!*(_BYTE *)a1)
    {
      v159 = CFSTR("MentorStoppingDueToCompletion");
      if ((_DWORD)v31)
        v159 = CFSTR("MentorStoppingDueToError");
      if ((_DWORD)v31 == -1)
        v160 = 0;
      else
        v160 = (int)v31;
      if ((_DWORD)v31 == -1)
        v161 = CFSTR("MentorResettingDueToModeSwitch");
      else
        v161 = v159;
      v162 = FigMentorNotificationPayloadCreate((uint64_t)v161, v17, v160, *(unsigned __int8 *)(a1 + 280), v134, 0);
      CMNotificationCenterGetDefaultLocalCenter();
      v19 = v202;
      CMNotificationCenterPostNotification();
      if (v162)
        CFRelease(v162);
    }
    if (((_DWORD)v31 - 1) <= 0xFFFFFFFD)
    {
      if (*v192)
      {
        CFRelease(*v192);
        *v192 = 0;
      }
      *(_BYTE *)(a1 + 296) = 1;
    }
    if (v29 && v227[0])
    {
      CFRelease(v227[0]);
      v227[0] = 0;
    }
    if (v82 && v226)
    {
      CFRelease(v226);
      v226 = 0;
    }
    if (v224)
      CFRelease(v224);
    if (v217)
      CFRelease(v217);
    if (v36)
      CFRelease(v36);
    v163 = *(const void **)(a1 + 272);
    if (v163)
    {
      CFRelease(v163);
      *(_QWORD *)(a1 + 272) = 0;
    }
    v22 = v200;
    if (v4 == 1)
    {
      v164 = a1 + 300;
      *v199 = *(_OWORD *)&v209.value;
      epoch = v209.epoch;
      goto LABEL_423;
    }
LABEL_422:
    v166 = MEMORY[0x1E0CA2E18];
    v167 = *MEMORY[0x1E0CA2E18];
    *v199 = *MEMORY[0x1E0CA2E18];
    epoch = *(_QWORD *)(v166 + 16);
    *(_QWORD *)(a1 + 316) = epoch;
    v164 = a1 + 324;
    *v197 = v167;
LABEL_423:
    *(_QWORD *)(v164 + 16) = epoch;
    if (v19)
      CFRelease(v19);
    if (v201)
      CFRelease(v201);
    if (v22)
      CFRelease(v22);
    if (v16)
      CFRelease(v16);
    if (v17)
      CFRelease(v17);
    v168 = *(_DWORD *)(a1 + 112);
    if (v168 == 4)
      break;
    if (!*(_BYTE *)(a1 + 116))
    {
      do
      {
        FigSemaphoreWaitRelative();
        FigMemoryBarrier();
      }
      while (!*(_BYTE *)(a1 + 116));
      v168 = *(_DWORD *)(a1 + 112);
    }
  }
  while (v168 != 4);
LABEL_4:
  v2 = *(const void **)(a1 + 288);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 288) = 0;
  }
  if (cf)
    CFRelease(cf);
  return 0;
}

void AudioMentorDispose(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;

  if (a1)
  {
    AudioMentorInvalidate((uint64_t)a1);
    if (a1[10])
    {
      FigSemaphoreDestroy();
      a1[10] = 0;
    }
    if (a1[11])
    {
      FigSemaphoreDestroy();
      a1[11] = 0;
    }
    if (a1[12])
    {
      FigSimpleMutexDestroy();
      a1[12] = 0;
    }
    if (a1[9])
    {
      FigSimpleMutexDestroy();
      a1[9] = 0;
    }
    if (a1[15])
    {
      FigSemaphoreDestroy();
      a1[15] = 0;
    }
    v2 = (const void *)a1[16];
    if (v2)
      CFRelease(v2);
    v3 = (const void *)a1[20];
    if (v3)
      CFRelease(v3);
    v4 = (const void *)a1[30];
    if (v4)
      CFRelease(v4);
    v5 = (const void *)a1[31];
    if (v5)
      CFRelease(v5);
    v6 = (const void *)a1[32];
    if (v6)
      CFRelease(v6);
    v7 = (const void *)a1[1];
    if (v7)
      CFRelease(v7);
    v8 = (const void *)a1[2];
    if (v8)
      CFRelease(v8);
    v9 = (const void *)a1[3];
    if (v9)
      CFRelease(v9);
    v10 = (const void *)a1[6];
    if (v10)
      CFRelease(v10);
    free(a1);
  }
}

uint64_t EditMentorNewWithChildAudioMentorAndSingleEditSegment(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  return editMentorNewWithChildAudioVideoEditOrCallbacksMentorAndSingleEditSegmentOrTrack(a1, 0, 0, 0, a2, 0, 0, a3);
}

uint64_t editMentorNewWithChildAudioVideoEditOrCallbacksMentorAndSingleEditSegmentOrTrack(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, const void *a6, char a7, _QWORD *a8)
{
  char *v15;
  CFAllocatorRef *v16;
  _QWORD **v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  CFMutableDictionaryRef Mutable;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  void (*v32)(const void *, __CFString *, CFAllocatorRef, CFTypeRef *);
  CFTypeRef v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  CFTypeRef cf;

  v15 = (char *)malloc_type_calloc(0x2B0uLL, 1uLL, 0xA5A507CBuLL);
  v16 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (v15)
  {
    v17 = (_QWORD **)v15;
    *((_DWORD *)v15 + 80) = 0;
    v18 = MEMORY[0x1E0CA2E68];
    v19 = *MEMORY[0x1E0CA2E68];
    *((_OWORD *)v15 + 12) = *MEMORY[0x1E0CA2E68];
    v20 = *(_QWORD *)(v18 + 16);
    *((_QWORD *)v15 + 26) = v20;
    v21 = MEMORY[0x1E0CA2E30];
    v22 = *MEMORY[0x1E0CA2E30];
    *(_OWORD *)(v15 + 216) = *MEMORY[0x1E0CA2E30];
    v23 = *(_QWORD *)(v21 + 16);
    *((_QWORD *)v15 + 29) = v23;
    *((_OWORD *)v15 + 9) = v19;
    *((_QWORD *)v15 + 20) = v20;
    *((_QWORD *)v15 + 23) = v23;
    *(_OWORD *)(v15 + 168) = v22;
    *((_QWORD *)v15 + 39) = FigSimpleMutexCreate();
    *((_DWORD *)v17 + 81) = 1000 * FigAtomicIncrement32() + 10000;
    v17[34] = (_QWORD *)FigSimpleMutexCreate();
    v24 = FigSimpleMutexCreate();
    v17[43] = (_QWORD *)v24;
    if (v24)
    {
      v25 = FigSimpleMutexCreate();
      v17[45] = (_QWORD *)v25;
      if (v25)
      {
        Mutable = CFDictionaryCreateMutable(*v16, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v17[36] = Mutable;
        if (Mutable)
        {
          v27 = FigSimpleMutexCreate();
          v17[35] = (_QWORD *)v27;
          if (v27)
          {
            v17[15] = dispatch_queue_create("com.apple.coremedia.editmentor.notification", 0);
            EditMentorDispose(0);
            goto LABEL_7;
          }
        }
      }
    }
    v34 = FigSignalErrorAt();
    EditMentorDispose(v17);
    if ((_DWORD)v34)
      return v34;
LABEL_14:
    v17 = 0;
LABEL_7:
    *v17 = a2;
    v17[1] = a1;
    v17[2] = a3;
    if (a4)
    {
      *((_BYTE *)v17 + 24) = 1;
      v28 = *(_OWORD *)(a4 + 16);
      *((_OWORD *)v17 + 2) = *(_OWORD *)a4;
      *((_OWORD *)v17 + 3) = v28;
      v29 = *(_OWORD *)(a4 + 32);
      v30 = *(_OWORD *)(a4 + 48);
      v31 = *(_OWORD *)(a4 + 64);
      v17[14] = *(_QWORD **)(a4 + 80);
      *((_OWORD *)v17 + 5) = v30;
      *((_OWORD *)v17 + 6) = v31;
      *((_OWORD *)v17 + 4) = v29;
    }
    if (a6)
    {
      v17[17] = CFRetain(a6);
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterAddListener();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterAddListener();
      cf = 0;
      v32 = *(void (**)(const void *, __CFString *, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
      if (v32)
      {
        v32(a6, CFSTR("EditCursorService_IsLoopingForever"), *v16, &cf);
        v33 = cf;
        *((_BYTE *)v17 + 297) = cf == (CFTypeRef)*MEMORY[0x1E0C9AE50];
        if (v33)
          CFRelease(v33);
      }
      else
      {
        *((_BYTE *)v17 + 297) = *MEMORY[0x1E0C9AE50] == 0;
      }
      v35 = 1;
    }
    else if (a5)
    {
      if ((*(_DWORD *)(a5 + 12) & 0x1D) != 1
        || (*(_DWORD *)(a5 + 60) & 0x1D) != 1
        || ((*(_DWORD *)(a5 + 36) & 0x1D) != 1 || (*(_DWORD *)(a5 + 84) & 0x1D) != 1)
        && ((~*(_DWORD *)(a5 + 36) & 5) != 0 || (~*(_DWORD *)(a5 + 84) & 5) != 0))
      {
        v34 = FigSignalErrorAt();
LABEL_39:
        EditMentorDispose(v17);
        return v34;
      }
      v35 = 0;
      v36 = *(_OWORD *)(a5 + 16);
      *((_OWORD *)v17 + 9) = *(_OWORD *)a5;
      *((_OWORD *)v17 + 10) = v36;
      v37 = *(_OWORD *)(a5 + 32);
      v38 = *(_OWORD *)(a5 + 48);
      v39 = *(_OWORD *)(a5 + 80);
      *((_OWORD *)v17 + 13) = *(_OWORD *)(a5 + 64);
      *((_OWORD *)v17 + 14) = v39;
      *((_OWORD *)v17 + 11) = v37;
      *((_OWORD *)v17 + 12) = v38;
    }
    else
    {
      v35 = 0;
    }
    *((_BYTE *)v17 + 128) = v35;
    if ((a7 & 1) != 0)
      *((_BYTE *)v17 + 240) = 1;
    if (!*v17 && !v17[1] && !v17[2] && (!*((_BYTE *)v17 + 24) || !v17[6]))
      goto LABEL_36;
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterAddListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterAddListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterAddListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterAddListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterAddListener();
    if (*v17)
    {
      v40 = VideoMentorSetTimeRemapCallback(*v17, (uint64_t)editMentorRemapSampleBufferTiming, (uint64_t)editMentorRemapTimeInterval, (uint64_t)v17);
    }
    else
    {
LABEL_36:
      v41 = v17[1];
      if (v41)
      {
        v40 = AudioMentorSetTimeRemapCallback(v41, (uint64_t)editMentorRemapSampleBufferTiming, (uint64_t)editMentorRemapTimeInterval, (uint64_t)v17);
      }
      else
      {
        v42 = v17[2];
        if (v42)
        {
          MEMORY[0x19402EEEC](v42[34]);
          v42[31] = editMentorRemapSampleBufferTiming;
          v42[32] = editMentorRemapTimeInterval;
          v42[33] = v17;
          MEMORY[0x19402EF04](v42[34]);
          goto LABEL_42;
        }
        if (!*((_BYTE *)v17 + 24))
          goto LABEL_42;
        v40 = ((uint64_t (*)(_QWORD *, uint64_t (*)(uint64_t, const void *, opaqueCMSampleBuffer *), uint64_t (*)(_QWORD *, const void *, uint64_t, uint64_t, uint64_t), _QWORD **))v17[7])(v17[5], editMentorRemapSampleBufferTiming, editMentorRemapTimeInterval, v17);
      }
    }
    v34 = v40;
    if ((_DWORD)v40)
      goto LABEL_39;
LABEL_42:
    v34 = 0;
    *a8 = v17;
    return v34;
  }
  v34 = FigSignalErrorAt();
  if (!(_DWORD)v34)
    goto LABEL_14;
  return v34;
}

void EditMentorDispose(_QWORD **a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  void (*v6)(_QWORD *);
  _QWORD *v7;
  NSObject *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;

  if (a1)
  {
    if (!*a1 && !a1[1] && !a1[2] && (!*((_BYTE *)a1 + 24) || !a1[6]))
      goto LABEL_10;
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    if (*a1)
    {
      VideoMentorSetTimeRemapCallback(*a1, 0, 0, 0);
    }
    else
    {
LABEL_10:
      v2 = a1[1];
      if (v2)
      {
        AudioMentorSetTimeRemapCallback(v2, 0, 0, 0);
      }
      else
      {
        v3 = a1[2];
        if (v3)
        {
          MEMORY[0x19402EEEC](v3[34]);
          v3[32] = 0;
          v3[33] = 0;
          v3[31] = 0;
          MEMORY[0x19402EF04](v3[34]);
        }
        else if (*((_BYTE *)a1 + 24))
        {
          ((void (*)(_QWORD *, _QWORD, _QWORD, _QWORD))a1[7])(a1[5], 0, 0, 0);
        }
      }
    }
    if (a1[17])
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      v4 = a1[17];
      v5 = *(_QWORD **)(CMBaseObjectGetVTable() + 8);
      if (*v5 >= 2uLL)
      {
        v6 = (void (*)(_QWORD *))v5[8];
        if (v6)
          v6(v4);
      }
      v7 = a1[17];
      if (v7)
      {
        CFRelease(v7);
        a1[17] = 0;
      }
    }
    v8 = a1[15];
    if (v8)
    {
      dispatch_sync_f(v8, 0, (dispatch_function_t)editMentorNoop);
      dispatch_release((dispatch_object_t)a1[15]);
      a1[15] = 0;
    }
    v9 = a1[44];
    if (v9)
    {
      CFRelease(v9);
      a1[44] = 0;
    }
    v10 = a1[41];
    if (v10)
    {
      CFRelease(v10);
      a1[41] = 0;
    }
    v11 = a1[71];
    if (v11)
    {
      CFRelease(v11);
      a1[71] = 0;
    }
    v12 = a1[75];
    if (v12)
    {
      CFRelease(v12);
      a1[75] = 0;
    }
    v13 = a1[76];
    if (v13)
    {
      CFRelease(v13);
      a1[76] = 0;
    }
    v14 = a1[84];
    if (v14)
    {
      CFRelease(v14);
      a1[84] = 0;
    }
    v15 = a1[42];
    if (v15)
    {
      CFRelease(v15);
      a1[42] = 0;
    }
    v16 = a1[36];
    if (v16)
    {
      CFRelease(v16);
      a1[36] = 0;
    }
    v17 = a1[38];
    if (v17)
    {
      CFRelease(v17);
      a1[38] = 0;
    }
    if (a1[39])
    {
      FigSimpleMutexDestroy();
      a1[39] = 0;
    }
    if (a1[34])
    {
      FigSimpleMutexDestroy();
      a1[34] = 0;
    }
    if (a1[35])
    {
      FigSimpleMutexDestroy();
      a1[35] = 0;
    }
    if (a1[43])
    {
      FigSimpleMutexDestroy();
      a1[43] = 0;
    }
    if (a1[45])
      FigSimpleMutexDestroy();
    free(a1);
  }
}

uint64_t AudioMentorSetTimeRemapCallback(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x19402EEEC](a1[9]);
  a1[7] = a2;
  a1[8] = a4;
  MEMORY[0x19402EF04](a1[9]);
  return 0;
}

uint64_t EditMentorNewWithChildEditMentor(_QWORD *a1, const void *a2, char a3, _QWORD *a4)
{
  return editMentorNewWithChildAudioVideoEditOrCallbacksMentorAndSingleEditSegmentOrTrack(0, 0, a1, 0, 0, a2, a3, a4);
}

uint64_t EditMentorSetTimeRemapCallback(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x19402EEEC](a1[34]);
  a1[31] = a2;
  a1[32] = a3;
  a1[33] = a4;
  MEMORY[0x19402EF04](a1[34]);
  return 0;
}

uint64_t FigPlaybackBossSetTimeWithRange(uint64_t a1, CMTime *a2, unsigned int a3, CMTime *a4, CMTime *a5, const void *a6, int a7)
{
  int v7;
  uint64_t v10;
  int v11;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v15;
  __n128 *v17;
  __n128 v18;
  int v19;
  float v20;
  int v21;
  NSObject *v22;
  unsigned int value;
  unsigned int v24;
  int v25;
  char v26;
  CMTime *v27;
  int v28;
  int v29;
  char v30;
  uint64_t v31;
  OpaqueCMTimebase *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  const void *v37;
  NSObject *v38;
  unsigned int v39;
  unsigned int v40;
  NSObject *v41;
  unsigned int v42;
  unsigned int v43;
  NSObject *v44;
  unsigned int v45;
  unsigned int v46;
  NSObject *v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  char v51;
  NSObject *v52;
  unsigned int v53;
  unsigned int v54;
  NSObject *v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t started;
  NSObject *v59;
  unsigned int v60;
  unsigned int v61;
  CMTime v65;
  os_log_type_t type;
  char v67;
  __n128 v68;
  CMTimeEpoch v69;
  CMTime v70;
  CMTime time2;
  uint64_t v72;
  __int16 v73;
  int v74;
  CMTime time;
  uint64_t v76;

  v7 = a7;
  v10 = a1;
  v76 = *MEMORY[0x1E0C80C00];
  memset(&v70, 0, sizeof(v70));
  v68 = 0uLL;
  v69 = 0;
  v11 = *(unsigned __int8 *)(a1 + 130);
  v67 = 0;
  if (dword_1EE2A2C50)
  {
    LODWORD(v65.value) = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v7 = a7;
    v10 = a1;
  }
  if (*(_BYTE *)(v10 + 16) || *(_BYTE *)(v10 + 120))
    return FigSignalErrorAt();
  FigPlaybackBossGetDuration(v10, &v68);
  time = *a2;
  v17 = (__n128 *)MEMORY[0x1E0CA2E68];
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if ((CMTimeCompare(&time, &time2) & 0x80000000) == 0)
  {
    time = *a2;
    *(__n128 *)&time2.value = v68;
    time2.epoch = v69;
    if (CMTimeCompare(&time, &time2) < 1)
      goto LABEL_11;
    v17 = &v68;
  }
  v18 = *v17;
  a2->epoch = v17[1].n128_i64[0];
  *(__n128 *)&a2->value = v18;
LABEL_11:
  v70 = *a2;
  if ((_BYTE)a3)
  {
    time = *a2;
    time2 = *a4;
    v65 = *a5;
    bossSnapTimeToIFrameWithRange(v10, &time, a3, &time2, &v65, (uint64_t)&v70);
  }
  *(_BYTE *)(v10 + 128) = 0;
  v19 = *(_DWORD *)(v10 + 424);
  if (v19 == 1886151033 || v19 == 1886530416 || v19 == 1886154860)
  {
    time = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    v20 = *(float *)(v10 + 432);
    time2 = v70;
    if (bossCheckTimeWithEndTimes(v10, &time2, (uint64_t)&time, v20))
      v70 = time;
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(v10 + 576));
  v21 = *(_DWORD *)(v10 + 424);
  if (v21 != 1634624887 && v21 != 1886151033 && v21 != 1886154860)
  {
    memset(&time, 0, sizeof(time));
    if ((*(_BYTE *)(v10 + 484) & 1) != 0)
      time = *(CMTime *)(v10 + 472);
    else
      CMTimebaseGetTime(&time, *(CMTimebaseRef *)(v10 + 112));
    time2 = v70;
    v65 = time;
    if (!CMTimeCompare(&time2, &v65))
    {
      v15 = 0;
      v33 = 1;
      goto LABEL_120;
    }
  }
  if (v7)
  {
    *(_BYTE *)(v10 + 780) = 1;
    *(_DWORD *)(v10 + 776) = v7;
  }
  bossBumpCurrentMasterOrder(v10);
  MEMORY[0x19402EEEC](*(_QWORD *)(v10 + 64));
  if (*(_BYTE *)(v10 + 840))
  {
    LODWORD(v65.value) = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    value = v65.value;
    if (os_log_type_enabled(v22, type))
      v24 = value;
    else
      v24 = value & 0xFFFFFFFE;
    if (v24)
    {
      LODWORD(time2.value) = 136315394;
      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"FigPlaybackBossSetTimeWithRange";
      LOWORD(time2.flags) = 2048;
      *(_QWORD *)((char *)&time2.flags + 2) = v10;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  bossSetMentorModesToDoNothing(v10, 0, *(_QWORD *)(v10 + 80), 0);
  MEMORY[0x19402EF04](*(_QWORD *)(v10 + 64));
  v25 = *(_DWORD *)(v10 + 424);
  if (v25 == 1886154860 || (v26 = 0, v25 == 1886151033))
  {
    if (v11)
    {
      v26 = 1;
    }
    else
    {
      v27 = (CMTime *)MEMORY[0x1E0CA2E18];
      *(_OWORD *)(v10 + 444) = *MEMORY[0x1E0CA2E18];
      *(_QWORD *)(v10 + 460) = v27->epoch;
      bossStopTimebaseAndAudioContext(v10, 0, v27);
      v26 = 0;
    }
  }
  if (*(_QWORD *)(v10 + 592)
    && *(_BYTE *)(v10 + 468)
    && ((v28 = *(_DWORD *)(v10 + 424), v28 == 1885435251) || v28 == 1919247481 || v28 == 1886545266))
  {
    v29 = v11;
    v15 = 0;
    *(CMTime *)(v10 + 472) = v70;
    v30 = 1;
  }
  else
  {
    v29 = v11;
    v31 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)(v10 + 472) = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)(v10 + 488) = *(_QWORD *)(v31 + 16);
    if ((v26 & 1) != 0)
    {
      v30 = 0;
      v15 = 0;
    }
    else
    {
      v32 = *(OpaqueCMTimebase **)(v10 + 112);
      time = v70;
      v15 = CMTimebaseSetTime(v32, &time);
      v30 = 0;
    }
  }
  v33 = 0;
  ++*(_DWORD *)(v10 + 724);
  v34 = *(_DWORD *)(v10 + 424);
  v35 = 3;
  if (v34 <= 1886530415)
  {
    if (v34 <= 1886151032)
    {
      if (v34 == 1634624887)
      {
LABEL_65:
        v37 = *(const void **)(v10 + 416);
        *(_QWORD *)(v10 + 416) = a6;
        if (a6)
          CFRetain(a6);
        if (v37)
          CFRelease(v37);
        bossBumpCurrentMasterOrder(v10);
        MEMORY[0x19402EEEC](*(_QWORD *)(v10 + 64));
        if (*(_BYTE *)(v10 + 840))
        {
          LODWORD(v65.value) = 0;
          type = OS_LOG_TYPE_DEFAULT;
          v38 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v39 = v65.value;
          if (os_log_type_enabled(v38, type))
            v40 = v39;
          else
            v40 = v39 & 0xFFFFFFFE;
          if (v40)
          {
            LODWORD(time2.value) = 136315394;
            *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"FigPlaybackBossSetTimeWithRange";
            LOWORD(time2.flags) = 2048;
            *(_QWORD *)((char *)&time2.flags + 2) = v10;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v50 = *(_QWORD *)(v10 + 80);
        time = v70;
        v15 = bossSetMentorModesToScrub(v10, 0, v50, &time, 0, &v67);
        MEMORY[0x19402EF04](*(_QWORD *)(v10 + 64));
        v33 = 0;
        if (v67)
          v51 = 1;
        else
          v51 = v30;
        if ((v51 & 1) == 0)
        {
          *(_BYTE *)(v10 + 780) = 0;
          *(_DWORD *)(v10 + 776) = 0;
          v33 = 1;
        }
        *(_DWORD *)(v10 + 424) = 1885435251;
        if (dword_1EE2A2C50)
        {
          LODWORD(v65.value) = 0;
          type = OS_LOG_TYPE_DEFAULT;
          v52 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v53 = v65.value;
          if (os_log_type_enabled(v52, type))
            v54 = v53;
          else
            v54 = v53 & 0xFFFFFFFE;
          if (v54)
          {
            LODWORD(time2.value) = 136315650;
            *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"FigPlaybackBossSetTimeWithRange";
            LOWORD(time2.flags) = 2048;
            *(_QWORD *)((char *)&time2.flags + 2) = v10;
            HIWORD(time2.epoch) = 2082;
            v72 = v10 + 841;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        goto LABEL_120;
      }
      if (v34 != 1768189029)
      {
        v36 = 1885435251;
        goto LABEL_64;
      }
LABEL_80:
      LODWORD(v65.value) = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v44 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v45 = v65.value;
      if (os_log_type_enabled(v44, type))
        v46 = v45;
      else
        v46 = v45 & 0xFFFFFFFE;
      if (!v46)
        goto LABEL_85;
      goto LABEL_84;
    }
    if (v34 != 1886151033)
    {
      if (v34 == 1886154860)
      {
        bossBumpCurrentMasterOrder(v10);
        MEMORY[0x19402EEEC](*(_QWORD *)(v10 + 64));
        if (*(_BYTE *)(v10 + 840))
        {
          LODWORD(v65.value) = 0;
          type = OS_LOG_TYPE_DEFAULT;
          v47 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v48 = v65.value;
          if (os_log_type_enabled(v47, type))
            v49 = v48;
          else
            v49 = v48 & 0xFFFFFFFE;
          if (v49)
          {
            LODWORD(time2.value) = 136315394;
            *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"FigPlaybackBossSetTimeWithRange";
            LOWORD(time2.flags) = 2048;
            *(_QWORD *)((char *)&time2.flags + 2) = v10;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v35 = 2;
        bossSetMentorModesToDoNothing(v10, 0, *(_QWORD *)(v10 + 80), 2);
        bossResetSideQueuesAndSwitchMentorsToMainQueues(v10);
        MEMORY[0x19402EF04](*(_QWORD *)(v10 + 64));
      }
      else if (v34 != 1886155888)
      {
        goto LABEL_120;
      }
    }
LABEL_108:
    if (v29)
    {
      bossBumpCurrentMasterOrder(v10);
      MEMORY[0x19402EEEC](*(_QWORD *)(v10 + 64));
      if (*(_BYTE *)(v10 + 840))
      {
        LODWORD(v65.value) = 0;
        type = OS_LOG_TYPE_DEFAULT;
        v55 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v56 = v65.value;
        if (os_log_type_enabled(v55, type))
          v57 = v56;
        else
          v57 = v56 & 0xFFFFFFFE;
        if (v57)
        {
          LODWORD(time2.value) = 136315394;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"FigPlaybackBossSetTimeWithRange";
          LOWORD(time2.flags) = 2048;
          *(_QWORD *)((char *)&time2.flags + 2) = v10;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      bossSetMentorModesToDoNothing(v10, 0, *(_QWORD *)(v10 + 80), 2);
      bossSwitchMentorsToSideQueues(v10, 0);
      MEMORY[0x19402EF04](*(_QWORD *)(v10 + 64));
      time = v70;
      started = figPlaybackBossStartPrerollAndSetPlayState(v10, &time, *(_QWORD *)(v10 + 432), *(_DWORD *)(v10 + 440), 2, 1886154860, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], a6);
    }
    else
    {
      time = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
      started = figPlaybackBossStartPrerollAndSetPlayState(v10, &time, *(_QWORD *)(v10 + 432), *(_DWORD *)(v10 + 440), v35, 1886530416, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], a6);
    }
    v15 = started;
    goto LABEL_119;
  }
  if (v34 <= 1919247480)
  {
    if (v34 == 1886530416)
      goto LABEL_108;
    if (v34 != 1886544244)
    {
      v36 = 1886545266;
      goto LABEL_64;
    }
LABEL_75:
    LODWORD(v65.value) = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v42 = v65.value;
    if (os_log_type_enabled(v41, type))
      v43 = v42;
    else
      v43 = v42 & 0xFFFFFFFE;
    if (!v43)
      goto LABEL_85;
LABEL_84:
    LODWORD(time2.value) = 136315650;
    *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"FigPlaybackBossSetTimeWithRange";
    LOWORD(time2.flags) = 2048;
    *(_QWORD *)((char *)&time2.flags + 2) = v10;
    HIWORD(time2.epoch) = 2082;
    v72 = v10 + 841;
    _os_log_send_and_compose_impl();
LABEL_85:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_119:
    v33 = 0;
    goto LABEL_120;
  }
  if (v34 == 2003853684)
    goto LABEL_75;
  if (v34 == 1920298606)
    goto LABEL_80;
  v36 = 1919247481;
LABEL_64:
  if (v34 == v36)
    goto LABEL_65;
LABEL_120:
  MEMORY[0x19402EF04](*(_QWORD *)(v10 + 576));
  if (v7 && v33)
  {
    if (dword_1EE2A2C50)
    {
      LODWORD(v65.value) = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v59 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v60 = v65.value;
      if (os_log_type_enabled(v59, type))
        v61 = v60;
      else
        v61 = v60 & 0xFFFFFFFE;
      if (v61)
      {
        LODWORD(time2.value) = 136315906;
        *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"FigPlaybackBossSetTimeWithRange";
        LOWORD(time2.flags) = 2048;
        *(_QWORD *)((char *)&time2.flags + 2) = v10;
        HIWORD(time2.epoch) = 2082;
        v72 = v10 + 841;
        v73 = 1024;
        v74 = v7;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    figPlaybackBossPostSeekDidComplete(v10, v7, 0);
  }
  return v15;
}

__n128 FigPlaybackBossGetDuration@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;
  __n128 *v3;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 204) & 1) == 0
      || (*(_BYTE *)(a1 + 228) & 1) == 0
      || *(_QWORD *)(a1 + 232)
      || (*(_QWORD *)(a1 + 216) & 0x8000000000000000) != 0)
    {
      bossGetContentDuration(a1, (uint64_t)a2);
      return result;
    }
    v3 = (__n128 *)MEMORY[0x1E0CA2E30];
  }
  else
  {
    v3 = (__n128 *)MEMORY[0x1E0CA2E18];
  }
  result = *v3;
  *a2 = *v3;
  a2[1].n128_u64[0] = v3[1].n128_u64[0];
  return result;
}

void bossSetMentorModesToDoNothing(uint64_t a1, CFIndex a2, uint64_t a3, int a4)
{
  CFDictionaryRef v8;
  uint64_t v9;
  int v10;
  CFIndex v11;
  uint64_t v12;
  CMTime v13;
  CMTime keys;

  if (a4)
  {
    keys.value = (CMTimeValue)CFSTR("AbortReading");
    if (a4 == 2)
      keys.value = (CMTimeValue)CFSTR("SynchronouslyAbortReading");
    v8 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&keys, MEMORY[0x1E0C9AE50], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  }
  else
  {
    v8 = 0;
  }
  bossBumpEveryTrackCurrentOrder(a1, a2, a3, 0);
  *(_BYTE *)(a1 + 600) = 0;
  v9 = *(_QWORD *)(a1 + 592);
  if (v9)
  {
    v10 = *(_DWORD *)(a1 + 544);
    keys = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    v13 = keys;
    FigVideoCompositionProcessorSetPlaybackTimeRange(v9, &keys, (uint64_t)&v13, v10, 0);
  }
  if (a2 < FigCFRangeGetLimit())
  {
    v11 = a2;
    do
    {
      v12 = *((_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v11) + 24);
      if (v12)
        EditMentorSetModeToDoNothing(v12);
      ++v11;
    }
    while (v11 < FigCFRangeGetLimit());
  }
  if (a4)
    FigThreadAbortQueue();
  if (v8)
    CFRelease(v8);
}

uint64_t bossBumpEveryTrackCurrentOrder(uint64_t a1, CFIndex a2, uint64_t a3, char a4)
{
  uint64_t result;
  CFIndex v8;
  _BYTE *ValueAtIndex;

  *(_BYTE *)(a1 + 601) = 0;
  result = FigCFRangeGetLimit();
  if (a2 < result)
  {
    v8 = a2;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v8);
      bossBumpTrackCurrentOrder(ValueAtIndex);
      if ((a4 & 2) != 0)
        ValueAtIndex[212] = 1;
      if ((a4 & 1) != 0)
      {
        ValueAtIndex[213] = 1;
        *(_BYTE *)(a1 + 601) = 1;
      }
      ++v8;
      result = FigCFRangeGetLimit();
    }
    while (v8 < result);
  }
  return result;
}

void EditMentorSetModeToDoNothing(uint64_t a1)
{
  editMentorStartNewParentOrder(a1, 0, 0);
}

uint64_t sub_1929078E4()
{
  const void *v0;
  const __CFDictionary *v1;
  uint64_t v2;
  const void *v3;

  *(_DWORD *)(v2 + 320) = 0;
  v3 = *(const void **)(v2 + 672);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(v2 + 672) = 0;
  }
  return editMentorSetChildMentorModeToDoNothing(v2, v1, v0);
}

void editMentorStartNewParentOrder(uint64_t a1, const void *a2, const void *a3)
{
  const void *v6;
  const void *v7;
  CFTypeRef v8;
  const __CFDictionary *MutableCopy;
  const void *Value;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 312));
  *(_BYTE *)(a1 + 296) = 0;
  v6 = *(const void **)(a1 + 608);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 608) = 0;
  }
  v7 = *(const void **)(a1 + 600);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 600) = 0;
  }
  if (a2)
    v8 = CFRetain(a2);
  else
    v8 = 0;
  *(_QWORD *)(a1 + 600) = v8;
  MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
  *(_QWORD *)(a1 + 608) = MutableCopy;
  *(_BYTE *)(a1 + 680) = 0;
  if (MutableCopy)
  {
    Value = CFDictionaryGetValue(MutableCopy, CFSTR("PrerollPolicy"));
    if (Value)
    {
      v11 = Value;
      if (CFEqual(Value, CFSTR("PrerollUntilOutputReachesLowWater"))
        || CFEqual(v11, CFSTR("PrerollUntilOutputReachesLowWaterOrSampleNotImmediatelyAvailable")))
      {
        *(_BYTE *)(a1 + 680) = 1;
      }
    }
  }
  v12 = (const void *)*MEMORY[0x1E0C9AE40];
  *(_BYTE *)(a1 + 616) = v12 != CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 608), CFSTR("SendPermanentEmptyMediaMarkers"));
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 608), CFSTR("SendPermanentEmptyMediaMarkers"), v12);
  v13 = (const void *)*MEMORY[0x1E0C9AE50];
  *(_BYTE *)(a1 + 617) = v13 == CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 608), CFSTR("OKToWaitForTrackToGrow"));
  *(_BYTE *)(a1 + 681) = v13 == CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 608), CFSTR("ConsolidateContinuousEdits"));
  *(_BYTE *)(a1 + 682) = v13 == CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 608), CFSTR("RoundUpStartPTS"));
  v14 = *(const void **)(a1 + 568);
  *(_QWORD *)(a1 + 568) = a3;
  if (a3)
    CFRetain(a3);
  if (v14)
    CFRelease(v14);
  editMentorBumpChildOrder(a1);
  JUMPOUT(0x19402EF04);
}

CFNumberRef editMentorBumpChildOrder(uint64_t a1)
{
  const void *v2;
  CFNumberRef result;

  v2 = *(const void **)(a1 + 328);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 328) = 0;
  }
  ++*(_DWORD *)(a1 + 324);
  result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, (const void *)(a1 + 324));
  *(_QWORD *)(a1 + 328) = result;
  return result;
}

uint64_t editMentorSetChildMentorModeToDoNothing(uint64_t a1, const __CFDictionary *a2, const void *a3)
{
  if (*(_QWORD *)a1)
    return VideoMentorSetModeToDoNothing(*(_QWORD *)a1, a2, a3);
  if (*(_QWORD *)(a1 + 8))
    return AudioMentorSetModeToDoNothing(*(_QWORD *)(a1 + 8), a2, a3);
  if (*(_QWORD *)(a1 + 16))
    EditMentorSetModeToDoNothing(*(_QWORD *)(a1 + 16));
  if (*(_BYTE *)(a1 + 24))
    return (*(uint64_t (**)(_QWORD))(a1 + 64))(*(_QWORD *)(a1 + 40));
  else
    return 0;
}

uint64_t AudioMentorSetModeToDoNothing(uint64_t a1, CFDictionaryRef theDict, const void *a3)
{
  const __CFDictionary *v4;
  const void *v6;
  const void *Value;
  int v8;
  const void *v9;
  unsigned int v10;
  BOOL v11;
  char v12;

  v4 = theDict;
  if (theDict)
  {
    v6 = (const void *)*MEMORY[0x1E0C9AE50];
    Value = CFDictionaryGetValue(theDict, CFSTR("AbortReading"));
    LODWORD(v4) = v6 == CFDictionaryGetValue(v4, CFSTR("SynchronouslyAbortReading"));
    if (v6 == Value)
      v8 = 1;
    else
      v8 = (int)v4;
  }
  else
  {
    v8 = 0;
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 96));
  if (!*(_BYTE *)a1)
  {
    v9 = *(const void **)(a1 + 248);
    if (v9)
      CFRelease(v9);
    *(_QWORD *)(a1 + 248) = a3;
    if (a3)
      CFRetain(a3);
    *(_DWORD *)(a1 + 112) = 0;
    *(_BYTE *)(a1 + 116) = 1;
    *(_BYTE *)(a1 + 117) = v8;
    FigMemoryBarrier();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 96));
  FigSemaphoreSignal();
  if (v8)
  {
    v10 = 0;
    do
    {
      if (!*(_BYTE *)(a1 + 116))
        break;
      FigThreadAbort();
      if (*(_BYTE *)(a1 + 116))
        FigSemaphoreWaitRelative();
      v11 = v10++ >= 4;
      v12 = v11 ? (char)v4 : 1;
    }
    while ((v12 & 1) != 0);
  }
  return 0;
}

uint64_t bossSetMentorModesToScrub(uint64_t a1, CFIndex a2, uint64_t a3, CMTime *a4, int a5, _BYTE *a6)
{
  uint64_t v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v11;
  int v12;
  CFIndex v13;
  _DWORD *ValueAtIndex;
  _DWORD *v15;
  CFDictionaryRef value;
  __CFDictionary *v17;
  uint64_t v18;
  CMTimeValue *v19;
  CMTimeFlags v20;
  CMTimeEpoch v21;
  CMTimeFlags v23;
  CMTimeEpoch v24;
  uint64_t v25;
  const void *v26;
  uint64_t v27;
  const void *v28;
  const __CFAllocator *allocator;
  CFDictionaryRef cf;
  int v34;
  CMTimeEpoch v36;
  CMTimeFlags v37;
  CMTime v38;
  CMTime time2;
  CMTime type;
  CMTime lhs;
  CMTimeValue v42;
  CMTimeScale v43;
  CMTime v44;
  CMTime time;
  uint64_t v46;

  v7 = a3;
  v46 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A2C50)
  {
    LODWORD(lhs.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v7 = a3;
  }
  bossBumpEveryTrackCurrentOrder(a1, a2, v7, 2 * (a5 != 0));
  *(_BYTE *)(a1 + 600) = 0;
  v11 = *(_QWORD *)(a1 + 592);
  if (v11)
  {
    v12 = *(_DWORD *)(a1 + 544);
    time = *a4;
    v44 = *a4;
    FigVideoCompositionProcessorSetPlaybackTimeRange(v11, &time, (uint64_t)&v44, v12, 0);
  }
  if (a2 < FigCFRangeGetLimit())
  {
    cf = 0;
    allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v36 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    v37 = *(_DWORD *)(MEMORY[0x1E0CA2E68] + 12);
    v34 = v37 & 0x1F;
    v13 = a2;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v13);
      if (*((_QWORD *)ValueAtIndex + 24))
      {
        v15 = ValueAtIndex;
        if (*(_BYTE *)(a1 + 133) && ValueAtIndex[18] == 1668047728)
        {
          CMTimeMakeWithSeconds(&v38, 10.0, 1);
          value = CMTimeCopyAsDictionary(&v38, allocator);
        }
        else
        {
          value = 0;
        }
        v17 = bossCopyOptionsDictionaryForMentors(a1, 3, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, value, 0);
        v18 = bossCopyRenderPipelineCachedVideoFrames(a1, *((_QWORD *)v15 + 10));
        if (v15[18] == 1986618469)
          cf = CFDictionaryCreate(allocator, (const void **)&kFigPlaybackBoss_ScrubOrder, (const void **)(a1 + 536), 1, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
        if (*((_BYTE *)v15 + 400))
        {
          v19 = (CMTimeValue *)(v15 + 113);
          v43 = v15[115];
          v42 = *(_QWORD *)(v15 + 113);
          v20 = v15[116];
          v21 = *(_QWORD *)(v15 + 117);
          if ((v20 & 0x1F) != 3 && v34 != 3)
            goto LABEL_35;
          memset(&time, 0, sizeof(time));
          lhs.value = *v19;
          lhs.timescale = v15[115];
          lhs.flags = v20;
          lhs.epoch = v21;
          type.value = *MEMORY[0x1E0CA2E68];
          type.timescale = *(_DWORD *)(MEMORY[0x1E0CA2E68] + 8);
          type.flags = v37;
          type.epoch = v36;
          CMTimeSubtract(&v44, &lhs, &type);
          CMTimeAbsoluteValue(&time, &v44);
          CMTimeMake(&time2, 1, 1000000000);
          lhs = time;
          if (CMTimeCompare(&lhs, &time2) > 0)
          {
LABEL_35:
            time.value = v42;
            time.timescale = v43;
            time.flags = v20;
            time.epoch = v21;
            lhs.value = *MEMORY[0x1E0CA2E68];
            lhs.timescale = *(_DWORD *)(MEMORY[0x1E0CA2E68] + 8);
            lhs.flags = v37;
            lhs.epoch = v36;
            if (CMTimeCompare(&time, &lhs) > 0)
              goto LABEL_26;
          }
          v43 = v15[121];
          v42 = *(_QWORD *)(v15 + 119);
          v23 = v15[122];
          v24 = *(_QWORD *)(v15 + 123);
          if ((v23 & 0x1F) != 3 && v34 != 3)
            goto LABEL_34;
          memset(&time, 0, sizeof(time));
          lhs.value = *(_QWORD *)(v15 + 119);
          lhs.timescale = v15[121];
          lhs.flags = v23;
          lhs.epoch = v24;
          type.value = *MEMORY[0x1E0CA2E68];
          type.timescale = *(_DWORD *)(MEMORY[0x1E0CA2E68] + 8);
          type.flags = v37;
          type.epoch = v36;
          CMTimeSubtract(&v44, &lhs, &type);
          CMTimeAbsoluteValue(&time, &v44);
          CMTimeMake(&time2, 1, 1000000000);
          lhs = time;
          if (CMTimeCompare(&lhs, &time2) > 0)
          {
LABEL_34:
            time.value = v42;
            time.timescale = v43;
            time.flags = v23;
            time.epoch = v24;
            lhs.value = *MEMORY[0x1E0CA2E68];
            lhs.timescale = *(_DWORD *)(MEMORY[0x1E0CA2E68] + 8);
            lhs.flags = v37;
            lhs.epoch = v36;
            if (CMTimeCompare(&time, &lhs) >= 1)
            {
LABEL_26:
              memset(&time, 0, sizeof(time));
              v44 = *a4;
              *(_OWORD *)&lhs.value = *(_OWORD *)v19;
              lhs.epoch = *(_QWORD *)(v15 + 117);
              CMTimeSubtract(&time, &v44, &lhs);
              memset(&v44, 0, sizeof(v44));
              lhs = *a4;
              type = *(CMTime *)(v15 + 119);
              CMTimeAdd(&v44, &lhs, &type);
              v25 = *((_QWORD *)v15 + 24);
              v26 = (const void *)*((_QWORD *)v15 + 25);
              lhs = time;
              type = v44;
              EditMentorSetModeToForwardPlayback(v25, (uint64_t)&lhs, (uint64_t)&type, v17, v18, 0, v26);
            }
          }
        }
        v27 = *((_QWORD *)v15 + 24);
        v28 = (const void *)*((_QWORD *)v15 + 25);
        time = *a4;
        EditMentorSetModeToScrub(v27, (uint64_t)&time, v17, v18, (uint64_t)cf, v28);
      }
      ++v13;
    }
    while (v13 < FigCFRangeGetLimit());
  }
  if (a6)
    *a6 = 0;
  return 0;
}

__CFDictionary *bossCopyOptionsDictionaryForMentors(uint64_t a1, int a2, const void *a3, const void *a4, const void *a5, const void *a6, int a7, int a8, float a9, char a10, char a11, char a12, int a13, char a14, void *value, char a16)
{
  __CFDictionary *Mutable;
  __CFDictionary *v26;
  __CFString **v27;
  __CFString **v28;
  __CFString **v29;
  __CFString **v30;
  const void **v31;
  const void **v32;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void **v34;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 20, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v26 = Mutable;
  if (*(_DWORD *)(a1 + 152) == 1)
    v27 = kVideoMentorScrubPolicy_BlendFrames;
  else
    v27 = kVideoMentorScrubPolicy_FrameAccurate;
  CFDictionarySetValue(Mutable, CFSTR("ScrubPolicy"), *v27);
  if (a10)
  {
    v28 = kMentorPrerollPolicy_PrerollUntilOutputReachesLowWaterOrSampleNotImmediatelyAvailable;
    if (a9 <= 1.0)
      v28 = kMentorPrerollPolicy_PrerollUntilOutputReachesLowWater;
    CFDictionarySetValue(v26, CFSTR("PrerollPolicy"), *v28);
  }
  if (a2 == 2)
    v29 = kMentorModeChangePolicy_CancelPreviousOutput;
  else
    v29 = kMentorModeChangePolicy_RepurposeOrCancelPreviousOutput;
  if (a2 == 1)
    v29 = kMentorModeChangePolicy_PreservePreviousOutput;
  CFDictionarySetValue(v26, CFSTR("ModeChangePolicy"), *v29);
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  if (a3)
    CFDictionarySetValue(v26, CFSTR("DefaultGradualDecoderRefresh"), a3);
  if (a4)
    CFDictionarySetValue(v26, CFSTR("BonusAudioPrimingPacketCountAtStart"), a4);
  if (a5)
    CFDictionarySetValue(v26, CFSTR("PostDecoderDrain"), a5);
  if (a6)
    CFDictionarySetValue(v26, CFSTR("TrimDurationAtEOF"), a6);
  v30 = kMentorCursorAccuracy_Exact;
  if (!*(_BYTE *)(a1 + 122))
    v30 = kMentorCursorAccuracy_Approximate;
  CFDictionarySetValue(v26, CFSTR("CursorAccuracy"), *v30);
  v31 = (const void **)MEMORY[0x1E0C9AE40];
  if (a7)
    CFDictionarySetValue(v26, CFSTR("TrimSampleBufferDurations"), (const void *)*MEMORY[0x1E0C9AE40]);
  v32 = (const void **)MEMORY[0x1E0C9AE50];
  if (a8)
    CFDictionarySetValue(v26, CFSTR("SynchronouslyResetOutput"), (const void *)*MEMORY[0x1E0C9AE50]);
  if (!*(_BYTE *)(a1 + 135) && *(_BYTE *)(a1 + 140))
  {
    if (!*(_BYTE *)(a1 + 120))
    {
      v36 = 0x40000000;
      if (bossGetVideoDecoderMaxSpeedThreshold(a1, (float *)&v36))
      {
        if (dword_1EE2A2C50)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        *(_DWORD *)(a1 + 136) = v36;
      }
    }
    *(_BYTE *)(a1 + 140) = 0;
  }
  if (*(_BYTE *)(a1 + 132))
  {
    FigCFDictionarySetFloat32();
    FigCFDictionarySetFloat32();
  }
  else if (!*(_BYTE *)(a1 + 120) && *(float *)(a1 + 136) < a9)
  {
    CFDictionarySetValue(v26, CFSTR("PlayIFramesOnly"), *v32);
  }
  if (a13)
    FigCFDictionarySetInt32();
  if (*(_BYTE *)(a1 + 120) || *(_QWORD *)(a1 + 592))
    CFDictionarySetValue(v26, CFSTR("PostUpcomingOutputPTSRangeChangeNotifications"), *v32);
  if (*(_DWORD *)(a1 + 424) == 1920298606 && *(_BYTE *)(a1 + 429))
    CFDictionarySetValue(v26, CFSTR("SendPermanentEmptyMediaMarkers"), *v31);
  if (a11)
    CFDictionarySetValue(v26, CFSTR("OKToWaitForTrackToGrow"), *v32);
  if (a12)
    CFDictionarySetValue(v26, CFSTR("ConsolidateContinuousEdits"), *v32);
  if (a14)
    CFDictionarySetValue(v26, CFSTR("RoundUpStartPTS"), *v32);
  if (value)
    CFDictionarySetValue(v26, CFSTR("ExtendedCatchUpDuration"), value);
  if (a16)
    v34 = v32;
  else
    v34 = v31;
  CFDictionarySetValue(v26, CFSTR("RemoveExcessFramesInRefreshIntervals"), *v34);
  FigCFDictionarySetInt32();
  return v26;
}

void EditMentorSetModeToScrub(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, const void *a6)
{
  editMentorStartNewParentOrder(a1, a3, a6);
}

uint64_t sub_19290897C(__int128 a1, uint64_t a2, uint64_t a3, CMTime *time1, uint64_t a5, __int128 a6, CMTime *time2, CFTypeRef cf, CMTime *a9, uint64_t a10, __int128 time1a, __int128 time1_16, __int128 a13, __int128 time2a, __int128 time2_16, __int128 a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  const void *v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const void *v36;
  const void *v37;
  __int128 *v38;
  uint64_t v39;
  unsigned int (*v40)(uint64_t, CMTimeRange *, CFTypeRef *);
  CFTypeRef v41;
  unsigned int (*v42)(CFTypeRef, __int128 *);
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  const void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, __int128 *, CMTimeValue, const void *, const void *, const void *);
  uint64_t v62;
  CMTime v64;
  CMTimeRange v65;
  CMTime start;
  CFTypeRef v67;
  CMTime v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  CMTimeRange v72[3];

  *(_DWORD *)(v32 + 320) = 1;
  v36 = *(const void **)(v32 + 672);
  if (v36)
  {
    CFRelease(v36);
    *(_QWORD *)(v32 + 672) = 0;
  }
  *(_OWORD *)&v64.value = *(_OWORD *)v34;
  v64.epoch = *(_QWORD *)(v34 + 16);
  MEMORY[0x19402EEEC](*(_QWORD *)(v32 + 344), *((_QWORD *)&a1 + 1), a2, a3, time1, a5, a6, *((_QWORD *)&a6 + 1));
  v37 = *(const void **)(v32 + 336);
  if (v37)
  {
    CFRelease(v37);
    *(_QWORD *)(v32 + 336) = 0;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v32 + 344));
  v38 = (__int128 *)(v32 + 368);
  v71 = 0u;
  memset(v72, 0, 48);
  v69 = 0u;
  v70 = 0u;
  memset(&v68, 0, sizeof(v68));
  v67 = 0;
  v39 = *(_QWORD *)(v32 + 136);
  if (v39)
  {
    v40 = *(unsigned int (**)(uint64_t, CMTimeRange *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 8);
    if (!v40
      || (*(_OWORD *)&v65.start.value = *(_OWORD *)&v64.value, v65.start.epoch = v64.epoch, v40(v39, &v65, &v67))
      || (v41 = v67,
          (v42 = *(unsigned int (**)(CFTypeRef, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24)) == 0)
      || v42(v41, &v69))
    {
      FigSignalErrorAt();
      goto LABEL_16;
    }
  }
  else
  {
    v43 = *(_OWORD *)(v32 + 192);
    v71 = *(_OWORD *)(v32 + 176);
    *(_OWORD *)&v72[0].start.value = v43;
    v44 = *(_OWORD *)(v32 + 224);
    *(_OWORD *)&v72[0].start.epoch = *(_OWORD *)(v32 + 208);
    *(_OWORD *)&v72[0].duration.timescale = v44;
    v45 = *(_OWORD *)(v32 + 160);
    v69 = *(_OWORD *)(v32 + 144);
    v70 = v45;
  }
  *(_OWORD *)&v65.start.value = *(_OWORD *)&v64.value;
  v65.start.epoch = v64.epoch;
  start = v72[0].start;
  if ((CMTimeCompare(&v65.start, &start) & 0x80000000) == 0)
  {
    v65 = v72[0];
    CMTimeRangeGetEnd(&v68, &v65);
    v65.start = v68;
    start = v64;
    if ((CMTimeCompare(&v65.start, &start) & 0x80000000) == 0 && (BYTE12(v69) & 0x1D) == 1)
    {
      v46 = 0;
      v47 = *(_OWORD *)&v72[0].start.value;
      *(_OWORD *)(v32 + 400) = v71;
      *(_OWORD *)(v32 + 416) = v47;
      v48 = *(_OWORD *)&v72[0].duration.timescale;
      *(_OWORD *)(v32 + 432) = *(_OWORD *)&v72[0].start.epoch;
      *(_OWORD *)(v32 + 448) = v48;
      v49 = v70;
      *v38 = v69;
      *(_OWORD *)(v32 + 384) = v49;
      goto LABEL_17;
    }
  }
LABEL_16:
  v46 = 1;
LABEL_17:
  if (v67)
    CFRelease(v67);
  if ((v46 & 1) != 0)
  {
    v68 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  }
  else
  {
    *(_OWORD *)&v65.start.value = *(_OWORD *)&v64.value;
    v65.start.epoch = v64.epoch;
    v50 = *(_OWORD *)(v32 + 416);
    v71 = *(_OWORD *)(v32 + 400);
    *(_OWORD *)&v72[0].start.value = v50;
    v51 = *(_OWORD *)(v32 + 448);
    *(_OWORD *)&v72[0].start.epoch = *(_OWORD *)(v32 + 432);
    *(_OWORD *)&v72[0].duration.timescale = v51;
    v52 = *(_OWORD *)(v32 + 384);
    v69 = *v38;
    v70 = v52;
    editMentorMapTrackTimeToMediaTimeUsingEditSegment(&v65.start, (CMTime *)&v69, (uint64_t)&v68);
  }
  *(_QWORD *)(v35 - 88) = v68.value;
  flags = v68.flags;
  *(_DWORD *)(v35 - 80) = v68.timescale;
  if ((flags & 0x1D) != 1)
  {
    v69 = *(_OWORD *)v34;
    *(_QWORD *)&v70 = *(_QWORD *)(v34 + 16);
    return editMentorSetChildMentorModeToEmptyEdit(v32, 0, (uint64_t)&v69, 0, v33, v30);
  }
  epoch = v68.epoch;
  v65.start.value = 0;
  v55 = (const void *)editMentorRetainCurrentChildOrderAndOptionsDictionary(v32, (__CFDictionary **)&v65);
  v56 = *(_QWORD *)v32;
  if (*(_QWORD *)v32)
  {
    *(_QWORD *)&v69 = *(_QWORD *)(v35 - 88);
    DWORD2(v69) = *(_DWORD *)(v35 - 80);
    HIDWORD(v69) = flags;
    *(_QWORD *)&v70 = epoch;
    v57 = VideoMentorSetModeToScrub(v56, 0, &v69, (CFDictionaryRef)v65.start.value, v31, v30, v55);
    goto LABEL_32;
  }
  v59 = *(_QWORD *)(v32 + 8);
  if (v59)
  {
    v57 = AudioMentorSetModeToDoNothing(v59, 0, v30);
    goto LABEL_32;
  }
  v60 = *(_QWORD *)(v32 + 16);
  if (v60)
  {
    *(_QWORD *)&v69 = *(_QWORD *)(v35 - 88);
    DWORD2(v69) = *(_DWORD *)(v35 - 80);
    HIDWORD(v69) = flags;
    *(_QWORD *)&v70 = epoch;
    EditMentorSetModeToScrub(v60, (uint64_t)&v69, (const void *)v65.start.value, (uint64_t)v31, (uint64_t)v30, v55);
  }
  if (*(_BYTE *)(v32 + 24))
  {
    v61 = *(uint64_t (**)(uint64_t, __int128 *, CMTimeValue, const void *, const void *, const void *))(v32 + 72);
    v62 = *(_QWORD *)(v32 + 40);
    *(_QWORD *)&v69 = *(_QWORD *)(v35 - 88);
    DWORD2(v69) = *(_DWORD *)(v35 - 80);
    HIDWORD(v69) = flags;
    *(_QWORD *)&v70 = epoch;
    v57 = v61(v62, &v69, v65.start.value, v31, v30, v55);
LABEL_32:
    v58 = v57;
    if (!v55)
      goto LABEL_34;
    goto LABEL_33;
  }
  v58 = 0;
  if (v55)
LABEL_33:
    CFRelease(v55);
LABEL_34:
  if (v65.start.value)
    CFRelease((CFTypeRef)v65.start.value);
  return v58;
}

__n128 editMentorMapTrackTimeToMediaTimeUsingEditSegment@<Q0>(CMTime *a1@<X0>, CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  int32_t v6;
  int32_t v7;
  int32_t v8;
  __n128 result;
  CMTime rhs;
  CMTime time2;
  CMTime time1;

  time1 = *a2;
  time2 = a2[2];
  v6 = CMTimeCompare(&time1, &time2);
  time1 = a2[3];
  time2 = a2[1];
  v7 = CMTimeCompare(&time1, &time2);
  if (v6 | v7)
  {
    v8 = v7;
    time2 = *a1;
    rhs = a2[2];
    CMTimeSubtract(&time1, &time2, &rhs);
    *a1 = time1;
    if (v8)
    {
      time2 = *a1;
      rhs = a2[1];
      CMTimeMultiplyTimeByTimeRatio();
      *a1 = time1;
    }
    time2 = *a1;
    rhs = *a2;
    CMTimeAdd(&time1, &time2, &rhs);
    *a1 = time1;
  }
  result = *(__n128 *)&a1->value;
  *(_OWORD *)a3 = *(_OWORD *)&a1->value;
  *(_QWORD *)(a3 + 16) = a1->epoch;
  return result;
}

uint64_t editMentorRetainCurrentChildOrderAndOptionsDictionary(uint64_t a1, __CFDictionary **a2)
{
  uint64_t v4;
  __CFDictionary *MutableCopy;
  _OWORD *v6;
  CMTimeEpoch v7;
  _OWORD *v8;
  __int128 v10;
  CMTime time2;
  CMTime time1;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 312));
  v4 = *(_QWORD *)(a1 + 328);
  if (v4)
    CFRetain(*(CFTypeRef *)(a1 + 328));
  if (a2)
  {
    MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
    if ((*(_DWORD *)(a1 + 380) & 0x1D) == 1 && (*(_DWORD *)(a1 + 404) & 0x1D) == 1)
    {
      v6 = (_OWORD *)(a1 + 392);
      time1 = *(CMTime *)(a1 + 392);
      v10 = *MEMORY[0x1E0CA2E68];
      *(_OWORD *)&time2.value = *MEMORY[0x1E0CA2E68];
      v7 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
      time2.epoch = v7;
      if (CMTimeCompare(&time1, &time2))
      {
        v8 = (_OWORD *)(a1 + 440);
        time1 = *(CMTime *)(a1 + 440);
        *(_OWORD *)&time2.value = v10;
        time2.epoch = v7;
        if (CMTimeCompare(&time1, &time2))
        {
          *(_OWORD *)&time1.value = *v8;
          time1.epoch = *(_QWORD *)(a1 + 456);
          *(_OWORD *)&time2.value = *v6;
          time2.epoch = *(_QWORD *)(a1 + 408);
          if (CMTimeCompare(&time1, &time2))
          {
            FigCFDictionaryGetFloat32IfPresent();
            *(_OWORD *)&time1.value = *v6;
            time1.epoch = *(_QWORD *)(a1 + 408);
            *(_OWORD *)&time2.value = *v8;
            time2.epoch = *(_QWORD *)(a1 + 456);
            CMTimeGetSeconds(&time1);
            time1 = time2;
            CMTimeGetSeconds(&time1);
            FigCFDictionarySetFloat32();
          }
        }
      }
    }
    if (*(_BYTE *)(a1 + 682))
      CFDictionarySetValue(MutableCopy, CFSTR("RoundUpStartPTS"), (const void *)*MEMORY[0x1E0C9AE50]);
    *a2 = MutableCopy;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 312));
  return v4;
}

uint64_t FigPlaybackBossSetEndTime(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __int128 v6;
  OpaqueCMTimebase *v7;
  float EffectiveRate;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if ((*((_DWORD *)a2 + 3) & 0x1D) != 1)
  {
    v4 = MEMORY[0x1E0CA2E18];
    *a2 = *MEMORY[0x1E0CA2E18];
    *((_QWORD *)a2 + 2) = *(_QWORD *)(v4 + 16);
  }
  if (dword_1EE2A2C50)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v6 = *a2;
  *(_QWORD *)(a1 + 184) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 168) = v6;
  if (*(_DWORD *)(a1 + 424) == 1886151033)
  {
    v7 = *(OpaqueCMTimebase **)(a1 + 112);
    if (v7)
      EffectiveRate = CMTimebaseGetEffectiveRate(v7);
    else
      EffectiveRate = 1.0;
    bossScheduleReachedEndCallbackForRate(a1, EffectiveRate);
  }
  return 0;
}

uint64_t FigPlaybackBossSetReverseEndTime(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __int128 v6;
  OpaqueCMTimebase *v7;
  float EffectiveRate;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if ((*((_DWORD *)a2 + 3) & 0x1D) != 1)
  {
    v4 = MEMORY[0x1E0CA2E18];
    *a2 = *MEMORY[0x1E0CA2E18];
    *((_QWORD *)a2 + 2) = *(_QWORD *)(v4 + 16);
  }
  if (dword_1EE2A2C50)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v6 = *a2;
  *(_QWORD *)(a1 + 304) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 288) = v6;
  if (*(_DWORD *)(a1 + 424) == 1886151033)
  {
    v7 = *(OpaqueCMTimebase **)(a1 + 112);
    if (v7)
      EffectiveRate = CMTimebaseGetEffectiveRate(v7);
    else
      EffectiveRate = 1.0;
    bossScheduleReachedEndCallbackForRate(a1, EffectiveRate);
  }
  return 0;
}

uint64_t FigPlaybackBossSetStopAtEnd(_BYTE *a1, char a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t result;
  NSObject *v6;

  if (dword_1EE2A2C50)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a1 || a1[16])
    return FigSignalErrorAt();
  if (a1[840])
  {
    v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  result = 0;
  a1[129] = a2;
  return result;
}

uint64_t FigPlaybackBossGetTimebase(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16))
      return 0;
    else
      return *(_QWORD *)(result + 112);
  }
  return result;
}

uint64_t FigPlayabilityMonitorCreate(const void *a1, _DWORD *a2, CFTypeRef *a3, int64_t a4, const void *a5, const void *a6, int a7, UInt8 **a8)
{
  const __CFAllocator *v13;
  __CFData *Mutable;
  __CFData *v15;
  UInt8 *MutableBytePtr;
  uint64_t (*v17)(const void *, UInt8 *);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  OpaqueCMClock *HostTimeClock;
  void *v24;
  uint64_t CMBaseObject;
  unsigned int (*v26)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *);
  uint64_t v27;
  void (*v28)(uint64_t, const __CFString *, const __CFAllocator *, UInt8 *);
  int v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v33;
  NSObject *v34;
  NSObject *v35;
  CFNumberRef v36;
  uint64_t v37;
  void (*v38)(uint64_t, _QWORD, CFNumberRef);
  CFTypeRef *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(uint64_t, uint64_t, CMTime *, int *);
  uint64_t FigBaseObject;
  uint64_t (*v45)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *);
  int v46;
  char v47;
  CMTimeValue value;
  BOOL v49;
  unsigned int (*v50)(CMTimeValue, CMTime *, CFTypeRef *, _QWORD, _QWORD);
  CMTimeValue v51;
  unsigned int (*v52)(CMTimeValue, CMTime *, uint64_t, CFTypeRef *, _QWORD, _QWORD);
  CFTypeRef v53;
  uint64_t v54;
  uint64_t v55;
  CFTypeRef v56;
  CMTimeValue v57;
  unsigned int (*v58)(CMTimeValue, CMTime *);
  uint64_t v59;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v61;
  unsigned int v62;
  Float64 Seconds;
  uint64_t v64;
  const __CFAllocator *v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t, uint64_t, const __CFAllocator *, CMTime *);
  uint64_t v68;
  int v69;
  double v70;
  CFNumberRef v71;
  NSObject *v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  void (*v76)(uint64_t, const __CFString *, CFNumberRef);
  uint64_t v77;
  unsigned int (*v78)(uint64_t, _QWORD, const __CFAllocator *, CMTime *);
  uint64_t *v79;
  uint64_t v80;
  void (*v81)(uint64_t, const __CFString *, const __CFAllocator *, UInt8 *);
  CMTimeEpoch epoch;
  NSObject *v83;
  unsigned int v84;
  unsigned int v85;
  int v87;
  _BYTE *v88;
  const __CFAllocator *v92;
  CMTime v93;
  int v94;
  CFTypeRef v95;
  CFTypeRef v96;
  uint64_t valuePtr;
  CMTime v98;
  CMTime v99;
  double v100;
  CMTime BOOLean[5];
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  v98 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  valuePtr = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 8648);
  if (Mutable)
  {
    v15 = Mutable;
    CFDataSetLength(Mutable, 8648);
    MutableBytePtr = CFDataGetMutableBytePtr(v15);
    bzero(MutableBytePtr, 0x21C8uLL);
    *(_QWORD *)MutableBytePtr = v15;
    if (*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80))
    {
      v17 = *(uint64_t (**)(const void *, UInt8 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
      if (!v17)
      {
        v64 = 4294954514;
LABEL_103:
        FigPlayabilityMonitorDestroy((uint64_t)MutableBytePtr);
        return v64;
      }
      v18 = v17(a1, MutableBytePtr + 8);
      if ((_DWORD)v18)
      {
LABEL_149:
        v64 = v18;
        goto LABEL_103;
      }
    }
    else
    {
      *((_QWORD *)MutableBytePtr + 1) = CFRetain(a1);
    }
    *((_QWORD *)MutableBytePtr + 2) = CFRetain(a5);
    *((_QWORD *)MutableBytePtr + 3) = CFRetain(a6);
    v19 = FigReentrantMutexCreate();
    *((_QWORD *)MutableBytePtr + 6) = v19;
    if (!v19)
      goto LABEL_147;
    v20 = FigReentrantMutexCreate();
    *((_QWORD *)MutableBytePtr + 7) = v20;
    if (!v20)
      goto LABEL_147;
    v21 = FigReentrantMutexCreate();
    *((_QWORD *)MutableBytePtr + 1079) = v21;
    if (!v21)
      goto LABEL_147;
    v22 = FigConditionVariableCreate();
    *((_QWORD *)MutableBytePtr + 9) = v22;
    if (!v22)
      goto LABEL_147;
    v18 = FigRetainProxyCreate();
    if ((_DWORD)v18)
      goto LABEL_149;
    HostTimeClock = CMClockGetHostTimeClock();
    v18 = CMTimebaseCreateWithSourceClock(v13, HostTimeClock, (CMTimebaseRef *)MutableBytePtr + 4);
    if ((_DWORD)v18)
      goto LABEL_149;
    v18 = CMTimebaseCreateWithSourceTimebase(v13, *((CMTimebaseRef *)MutableBytePtr + 4), (CMTimebaseRef *)MutableBytePtr + 5);
    if ((_DWORD)v18)
      goto LABEL_149;
    CMTimebaseSetRate(*((CMTimebaseRef *)MutableBytePtr + 4), 1.0);
    v24 = malloc_type_calloc(a4, 0x30uLL, 0x10200403DD621CEuLL);
    *((_QWORD *)MutableBytePtr + 11) = v24;
    if (!v24)
      goto LABEL_147;
    *((_QWORD *)MutableBytePtr + 10) = 0;
    *((_DWORD *)MutableBytePtr + 24) = 1;
    MutableBytePtr[314] = 0;
    if (*((_QWORD *)MutableBytePtr + 2))
    {
      CMByteStreamGetCMBaseObject();
      FigCRABSGetClassID();
      if (CMBaseObjectIsMemberOfClass())
      {
        BOOLean[0].value = 0;
        CMBaseObject = CMByteStreamGetCMBaseObject();
        v26 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (v26 && !v26(CMBaseObject, CFSTR("CRABS_ReadAheadActive"), v13, BOOLean))
        {
          MutableBytePtr[314] = CFBooleanGetValue((CFBooleanRef)BOOLean[0].value) == 0;
          CFRelease((CFTypeRef)BOOLean[0].value);
        }
        v27 = CMByteStreamGetCMBaseObject();
        v28 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, UInt8 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
        if (v28)
          v28(v27, CFSTR("CRABS_ReportingAgent"), v13, MutableBytePtr + 8568);
      }
    }
    *((_DWORD *)MutableBytePtr + 26) = 0;
    *((_QWORD *)MutableBytePtr + 33) = 0x7FFFFFFFFFFFFFFFLL;
    MutableBytePtr[8554] = 1;
    if (a7)
    {
      if (a7 != 1)
      {
LABEL_27:
        CMTimeMakeWithSeconds(BOOLean, 5.0, 1000);
        *(CMTime *)(MutableBytePtr + 160) = BOOLean[0];
        v30 = *((int *)MutableBytePtr + 28);
        if ((_DWORD)v30 == 1)
        {
          if (*((float *)MutableBytePtr + 29) == 0.0)
            *((_DWORD *)MutableBytePtr + 29) = 1067869798;
          if (*((float *)MutableBytePtr + 30) == 0.0)
            *((_DWORD *)MutableBytePtr + 30) = 1066611507;
          if (*((float *)MutableBytePtr + 31) == 0.0)
            *((_DWORD *)MutableBytePtr + 31) = 1066192077;
          if (*((float *)MutableBytePtr + 32) == 0.0)
            *((_DWORD *)MutableBytePtr + 32) = 1067869798;
          if (*((float *)MutableBytePtr + 33) == 0.0)
            *((_DWORD *)MutableBytePtr + 33) = 1077936128;
          if (*((double *)MutableBytePtr + 17) == 0.0)
            *((_QWORD *)MutableBytePtr + 17) = 0x404E000000000000;
          if (*((double *)MutableBytePtr + 18) == 0.0)
            *((_QWORD *)MutableBytePtr + 18) = 0x4024000000000000;
          if (*((double *)MutableBytePtr + 19) == 0.0)
            *((_QWORD *)MutableBytePtr + 19) = 0x3FF0000000000000;
        }
        v31 = *((_QWORD *)MutableBytePtr + 1071);
        if (v31)
        {
          v32 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 56);
          if (v32)
            v32(v31, CFSTR("playMonStats"), CFSTR("PMAlgo"), v30, 0);
        }
        v33 = FigDispatchQueueCreateWithPriority();
        *((_QWORD *)MutableBytePtr + 40) = v33;
        if (v33)
        {
          *((_QWORD *)MutableBytePtr + 1070) = voucher_copy();
          v34 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *((dispatch_queue_t *)MutableBytePtr + 40));
          *((_QWORD *)MutableBytePtr + 37) = v34;
          if (v34)
          {
            dispatch_set_context(v34, *((void **)MutableBytePtr + 41));
            dispatch_source_set_timer(*((dispatch_source_t *)MutableBytePtr + 37), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
            dispatch_source_set_event_handler_f(*((dispatch_source_t *)MutableBytePtr + 37), (dispatch_function_t)fpm_UpdateTimerProc);
            dispatch_resume(*((dispatch_object_t *)MutableBytePtr + 37));
            v35 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *((dispatch_queue_t *)MutableBytePtr + 40));
            *((_QWORD *)MutableBytePtr + 38) = v35;
            if (v35)
            {
              v88 = MutableBytePtr + 8552;
              dispatch_set_context(v35, *((void **)MutableBytePtr + 41));
              dispatch_source_set_timer(*((dispatch_source_t *)MutableBytePtr + 38), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
              dispatch_source_set_event_handler_f(*((dispatch_source_t *)MutableBytePtr + 38), (dispatch_function_t)fpm_StallWarningProc);
              dispatch_resume(*((dispatch_object_t *)MutableBytePtr + 38));
              v18 = CMTimebaseAddTimerDispatchSource(*((CMTimebaseRef *)MutableBytePtr + 3), *((dispatch_source_t *)MutableBytePtr + 38));
              if ((_DWORD)v18)
                goto LABEL_149;
              LODWORD(BOOLean[0].value) = 32;
              v92 = v13;
              v36 = CFNumberCreate(v13, kCFNumberSInt32Type, BOOLean);
              v37 = CMByteStreamGetCMBaseObject();
              v38 = *(void (**)(uint64_t, _QWORD, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
              if (v38)
                v38(v37, *MEMORY[0x1E0CA2F48], v36);
              CFRelease(v36);
              if (a4 >= 1)
              {
                v39 = a3;
                while (1)
                {
                  v99.value = 0;
                  v93.value = 0;
                  v95 = 0;
                  v96 = 0;
                  v94 = 0;
                  v40 = *((_QWORD *)MutableBytePtr + 1);
                  v41 = *a2;
                  v42 = *(unsigned int (**)(uint64_t, uint64_t, CMTime *, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 56);
                  if (v42)
                  {
                    if (!v42(v40, v41, &v99, &v94))
                      break;
                  }
LABEL_88:
                  if (v96)
                  {
                    CFRelease(v96);
                    v96 = 0;
                  }
                  if (v95)
                  {
                    CFRelease(v95);
                    v95 = 0;
                  }
                  if (v93.value)
                    CFRelease((CFTypeRef)v93.value);
                  ++v39;
                  ++a2;
                  if (!--a4)
                    goto LABEL_95;
                }
                if (v94 == 1952807028 || v94 == 1668310898)
                {
                  FigBaseObject = FigTrackReaderGetFigBaseObject(v99.value);
                  v45 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                  if (v45)
                    v46 = v45(FigBaseObject, CFSTR("CaptionSampleCursorService"), v92, &v93);
                  else
                    v46 = -12782;
                  value = v93.value;
                  if (v46)
                    v49 = 1;
                  else
                    v49 = v93.value == 0;
                  v47 = !v49;
                  if (v93.value)
                    goto LABEL_74;
                }
                else
                {
                  v47 = 0;
                  value = v93.value;
                  if (v93.value)
                    goto LABEL_74;
                }
                v57 = v99.value;
                v58 = *(unsigned int (**)(CMTimeValue, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 32);
                if (!v58 || v58(v57, &v93))
                {
LABEL_86:
                  if (v99.value)
                  {
                    CFRelease((CFTypeRef)v99.value);
                    v99.value = 0;
                  }
                  goto LABEL_88;
                }
                value = v93.value;
LABEL_74:
                v50 = *(unsigned int (**)(CMTimeValue, CMTime *, CFTypeRef *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
                if (v50)
                {
                  BOOLean[0] = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
                  if (!v50(value, BOOLean, &v96, 0, 0))
                  {
                    v51 = v93.value;
                    v52 = *(unsigned int (**)(CMTimeValue, CMTime *, uint64_t, CFTypeRef *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
                    if (v52)
                    {
                      BOOLean[0] = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
                      if (!v52(v51, BOOLean, 1, &v95, 0, 0))
                      {
                        *(_DWORD *)(*((_QWORD *)MutableBytePtr + 11) + 48 * *((_QWORD *)MutableBytePtr + 10)) = *a2;
                        *(_QWORD *)(*((_QWORD *)MutableBytePtr + 11) + 48 * *((_QWORD *)MutableBytePtr + 10) + 8) = CFRetain((CFTypeRef)v99.value);
                        *(_QWORD *)(*((_QWORD *)MutableBytePtr + 11) + 48 * *((_QWORD *)MutableBytePtr + 10) + 16) = CFRetain(v96);
                        v53 = CFRetain(v95);
                        v55 = *((_QWORD *)MutableBytePtr + 10);
                        v54 = *((_QWORD *)MutableBytePtr + 11);
                        *(_QWORD *)(v54 + 48 * v55 + 24) = v53;
                        if (a3)
                        {
                          v56 = *v39;
                          if (*v39)
                          {
                            v56 = CFRetain(v56);
                            v55 = *((_QWORD *)MutableBytePtr + 10);
                            v54 = *((_QWORD *)MutableBytePtr + 11);
                          }
                        }
                        else
                        {
                          v56 = 0;
                        }
                        v59 = v54 + 48 * v55;
                        *(_QWORD *)(v59 + 32) = v56;
                        *(_BYTE *)(v59 + 40) = v47;
                        *((_QWORD *)MutableBytePtr + 10) = v55 + 1;
                      }
                    }
                  }
                }
                goto LABEL_86;
              }
LABEL_95:
              if (*((_QWORD *)MutableBytePtr + 10))
              {
                FigFormatReaderUtilityGetDuration(*((_QWORD *)MutableBytePtr + 1), 1, &v98);
                if (dword_1EE2A2A08)
                {
                  LODWORD(v93.value) = 0;
                  LOBYTE(v96) = 0;
                  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  v61 = v93.value;
                  if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, (os_log_type_t)v96))
                    v62 = v61;
                  else
                    v62 = v61 & 0xFFFFFFFE;
                  if (v62)
                  {
                    BOOLean[0] = v98;
                    Seconds = CMTimeGetSeconds(BOOLean);
                    LODWORD(v99.value) = 136315650;
                    *(CMTimeValue *)((char *)&v99.value + 4) = (CMTimeValue)"FigPlayabilityMonitorCreate";
                    LOWORD(v99.flags) = 2048;
                    *(_QWORD *)((char *)&v99.flags + 2) = MutableBytePtr;
                    HIWORD(v99.epoch) = 2048;
                    v100 = Seconds;
                    _os_log_send_and_compose_impl();
                  }
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                v65 = v92;
                if ((v98.flags & 0x1D) == 1)
                {
                  BOOLean[0] = v98;
                  v99 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
                  if (CMTimeCompare(BOOLean, &v99) >= 1)
                  {
                    if (!*((_QWORD *)MutableBytePtr + 2))
                      goto LABEL_128;
                    CMByteStreamGetCMBaseObject();
                    FigCRABSGetClassID();
                    if (CMBaseObjectIsMemberOfClass())
                    {
                      v66 = CMByteStreamGetCMBaseObject();
                      v67 = *(uint64_t (**)(uint64_t, uint64_t, const __CFAllocator *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                      if (v67)
                      {
                        v68 = *MEMORY[0x1E0CA2070];
                        BOOLean[0].value = 0;
                        v69 = v67(v66, v68, v92, BOOLean);
                        if (v69 || !BOOLean[0].value)
                        {
                          if (v69)
                            goto LABEL_125;
                        }
                        else
                        {
                          CFNumberGetValue((CFNumberRef)BOOLean[0].value, kCFNumberSInt64Type, &valuePtr);
                          CFRelease((CFTypeRef)BOOLean[0].value);
                        }
                        v70 = (double)valuePtr;
                        BOOLean[0] = v98;
                        v93.value = (uint64_t)(v70 / CMTimeGetSeconds(BOOLean));
                        v71 = CFNumberCreate(v92, kCFNumberSInt64Type, &v93);
                        if (dword_1EE2A2A08)
                        {
                          LODWORD(v96) = 0;
                          LOBYTE(v95) = 0;
                          v72 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                          v73 = v96;
                          if (os_log_type_enabled(v72, (os_log_type_t)v95))
                            v74 = v73;
                          else
                            v74 = v73 & 0xFFFFFFFE;
                          if (v74)
                          {
                            LODWORD(v99.value) = 136315650;
                            *(CMTimeValue *)((char *)&v99.value + 4) = (CMTimeValue)"FigPlayabilityMonitorCreate";
                            LOWORD(v99.flags) = 2048;
                            *(_QWORD *)((char *)&v99.flags + 2) = MutableBytePtr;
                            HIWORD(v99.epoch) = 2048;
                            v100 = (double)(8 * v93.value) / 1000.0;
                            _os_log_send_and_compose_impl();
                          }
                          fig_log_call_emit_and_clean_up_after_send_and_compose();
                          v65 = v92;
                        }
                        v75 = CMByteStreamGetCMBaseObject();
                        v76 = *(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 56);
                        if (v76)
                          v76(v75, CFSTR("CRABS_DataConsumptionRateHint"), v71);
                        if (v71)
                          CFRelease(v71);
                      }
                    }
                  }
                }
LABEL_125:
                if (*((_QWORD *)MutableBytePtr + 2))
                {
                  BOOLean[0].value = 0;
                  v77 = CMByteStreamGetCMBaseObject();
                  v78 = *(unsigned int (**)(uint64_t, _QWORD, const __CFAllocator *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                  if (v78)
                  {
                    if (!v78(v77, *MEMORY[0x1E0CA2078], v65, BOOLean))
                    {
                      v87 = CFBooleanGetValue((CFBooleanRef)BOOLean[0].value);
                      CFRelease((CFTypeRef)BOOLean[0].value);
                      *v88 = 0;
                      if (v87)
                      {
LABEL_130:
                        CMByteStreamGetCMBaseObject();
                        FigCRABSGetClassID();
                        if (CMBaseObjectIsMemberOfClass() && *((_QWORD *)MutableBytePtr + 3))
                        {
                          v79 = (uint64_t *)(MutableBytePtr + 8640);
                          v80 = CMByteStreamGetCMBaseObject();
                          v81 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, UInt8 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                          if (v81)
                            v81(v80, CFSTR("CRABS_NetworkUrgencyMonitor"), v65, MutableBytePtr + 8640);
                          if (*v79)
                            FigNetworkUrgencyMonitorSetTimebase(*v79, *((_QWORD *)MutableBytePtr + 3));
                        }
                        FigRetainProxyLockMutex();
                        MutableBytePtr[313] = 1;
                        CMTimebaseGetTime(BOOLean, *((CMTimebaseRef *)MutableBytePtr + 3));
                        v99 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
                        CMTimeMaximum(&v93, BOOLean, &v99);
                        *((_OWORD *)MutableBytePtr + 15) = *(_OWORD *)&v93.value;
                        epoch = v93.epoch;
                        *((_QWORD *)MutableBytePtr + 32) = v93.epoch;
                        *(_OWORD *)(MutableBytePtr + 216) = *((_OWORD *)MutableBytePtr + 15);
                        *((_QWORD *)MutableBytePtr + 29) = epoch;
                        fpm_ensureUpdatePrimed((uint64_t)MutableBytePtr);
                        CMNotificationCenterGetDefaultLocalCenter();
                        FigNotificationCenterAddWeakListener();
                        CMNotificationCenterGetDefaultLocalCenter();
                        FigNotificationCenterAddWeakListener();
                        CMNotificationCenterGetDefaultLocalCenter();
                        FigNotificationCenterAddWeakListener();
                        CMNotificationCenterGetDefaultLocalCenter();
                        FigNotificationCenterAddWeakListener();
                        FigRetainProxyUnlockMutex();
                        if (dword_1EE2A2A08)
                        {
                          LODWORD(v93.value) = 0;
                          LOBYTE(v96) = 0;
                          v83 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                          v84 = v93.value;
                          if (os_log_type_enabled(v83, (os_log_type_t)v96))
                            v85 = v84;
                          else
                            v85 = v84 & 0xFFFFFFFE;
                          if (v85)
                          {
                            LODWORD(v99.value) = 136315650;
                            *(CMTimeValue *)((char *)&v99.value + 4) = (CMTimeValue)"FigPlayabilityMonitorCreate";
                            LOWORD(v99.flags) = 2048;
                            *(_QWORD *)((char *)&v99.flags + 2) = MutableBytePtr;
                            HIWORD(v99.epoch) = 2048;
                            v100 = *(double *)&a5;
                            _os_log_send_and_compose_impl();
                          }
                          fig_log_call_emit_and_clean_up_after_send_and_compose();
                        }
                        v64 = 0;
                        *a8 = MutableBytePtr;
                        return v64;
                      }
LABEL_129:
                      fpm_prepareDataRateProfile((uint64_t)MutableBytePtr);
                      goto LABEL_130;
                    }
                  }
                }
LABEL_128:
                *v88 = 0;
                goto LABEL_129;
              }
            }
          }
        }
LABEL_147:
        v64 = FigSignalErrorAt();
        if (!(_DWORD)v64)
          return v64;
        goto LABEL_103;
      }
      v29 = 3;
    }
    else
    {
      v29 = 2;
    }
    *((_DWORD *)MutableBytePtr + 28) = v29;
    goto LABEL_27;
  }
  return FigSignalErrorAt();
}

uint64_t FigCachedFileByteStreamSetProperty(uint64_t a1, const void *a2, void *a3)
{
  uint64_t DerivedStorage;
  void *v6;
  int v7;
  uint64_t v8;
  CFDictionaryRef v10;
  CFDictionaryRef v11;
  void *values;

  values = a3;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, CFSTR("CFBS_EnableCaching")))
    return 4294954512;
  v6 = (void *)*MEMORY[0x1E0C9AE50];
  v7 = *MEMORY[0x1E0C9AE50] == (_QWORD)a3;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 112));
  if (*(unsigned __int8 *)(DerivedStorage + 120) == v7)
    goto LABEL_10;
  *(_BYTE *)(DerivedStorage + 120) = v7;
  v8 = *(_QWORD *)(DerivedStorage + 24);
  if (v6 == a3)
    FigReadCacheContainerShowInterestInCaching(v8);
  else
    FigReadCacheContainerShowDisinterestInCaching(v8);
  if (!FigServer_IsMediaserverd())
  {
LABEL_10:
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 112));
  }
  else
  {
    v10 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&kFigCachedFileByteStreamProperty_EnableCaching, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!v10)
      return FigSignalErrorAt();
    v11 = v10;
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 112));
    CFRelease(v11);
  }
  return 0;
}

void fpm_ensureUpdatePrimed(uint64_t a1)
{
  dispatch_time_t v2;
  int64_t v3;
  unint64_t v4;
  int64_t v5;
  NSObject *v6;
  dispatch_time_t v7;

  if (!*(_BYTE *)(a1 + 312) || fpm_shouldUpdateAggressively(a1))
  {
    v2 = dispatch_time(0, 0);
    v3 = 0;
    v4 = *(_QWORD *)(a1 + 192) + 500000000;
    v5 = v4 - v2;
    if (v4 >= v2)
    {
      if (fpm_shouldUpdateAggressively(a1))
        v3 = 0;
      else
        v3 = v5;
    }
    *(_BYTE *)(a1 + 312) = 1;
    v6 = *(NSObject **)(a1 + 296);
    v7 = dispatch_time(0, v3);
    dispatch_source_set_timer(v6, v7, 0xFFFFFFFFFFFFFFFFLL, 0);
  }
}

uint64_t FigSyncMomentSourceSetTimebase(_QWORD *a1, const void *a2)
{
  const void *v4;
  const void *v5;
  __n128 SyncMoment;
  _OWORD v8[7];
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  if (!a1)
    return FigSignalErrorAt();
  CFRetain(a1);
  MEMORY[0x19402EA0C](a1[3]);
  v4 = (const void *)a1[8];
  if (v4 == a2)
    goto LABEL_10;
  if (v4)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    v5 = (const void *)a1[8];
    if (v5)
      CFRelease(v5);
    a1[8] = 0;
  }
  if (!a2)
  {
LABEL_10:
    MEMORY[0x19402EA24](a1[3]);
  }
  else
  {
    v17 = 0;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v10 = 0u;
    a1[8] = CFRetain(a2);
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    figSyncMomentSource_UpdateToCurrentTimebaseRate((uint64_t)a1);
    SyncMoment = figSyncMomentSource_getSyncMoment((uint64_t)a1, 3, (uint64_t)&v10);
    MEMORY[0x19402EA24](a1[3], SyncMoment);
    v8[4] = v14;
    v8[5] = v15;
    v8[6] = v16;
    v9 = v17;
    v8[0] = v10;
    v8[1] = v11;
    v8[2] = v12;
    v8[3] = v13;
    figSyncMomentSource_SendMoment((dispatch_queue_t *)a1, (uint64_t)v8, 0);
  }
  CFRelease(a1);
  return 0;
}

void figSyncMomentSource_SendMoment(dispatch_queue_t *cf, uint64_t a2, int a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  int v7;
  _BOOL4 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  dispatch_queue_t *context;
  _BYTE v13[120];
  uint64_t v14;

  v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)&v13[64] = *(_OWORD *)(a2 + 64);
  *(_OWORD *)&v13[80] = v4;
  *(_OWORD *)&v13[96] = *(_OWORD *)(a2 + 96);
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v13 = *(_OWORD *)a2;
  *(_OWORD *)&v13[16] = v5;
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v13[32] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v13[48] = v6;
  *(_QWORD *)&v13[112] = *(_QWORD *)(a2 + 112);
  v14 = 0;
  context = cf;
  if (!a3)
  {
    dispatch_sync_f(cf[10], &context, (dispatch_function_t)figSyncMomentSource_updatePendingMoment);
    if (!(_BYTE)v14)
      return;
    goto LABEL_5;
  }
  v7 = *(_DWORD *)&v13[4];
  if (*((_BYTE *)cf + 208))
    v7 = *((_DWORD *)cf + 23) | *(_DWORD *)&v13[4];
  v8 = *((unsigned __int8 *)cf + 208) == 0;
  *((_DWORD *)cf + 22) = *(_DWORD *)v13;
  *((_DWORD *)cf + 23) = v7;
  v9 = *(_OWORD *)&v13[88];
  *((_OWORD *)cf + 10) = *(_OWORD *)&v13[72];
  *((_OWORD *)cf + 11) = v9;
  *((_OWORD *)cf + 12) = *(_OWORD *)&v13[104];
  v10 = *(_OWORD *)&v13[24];
  *((_OWORD *)cf + 6) = *(_OWORD *)&v13[8];
  *((_OWORD *)cf + 7) = v10;
  v11 = *(_OWORD *)&v13[56];
  *((_OWORD *)cf + 8) = *(_OWORD *)&v13[40];
  *((_OWORD *)cf + 9) = v11;
  LOBYTE(v14) = v8;
  *((_BYTE *)cf + 208) = 1;
  if (v8)
  {
LABEL_5:
    CFRetain(cf);
    dispatch_async_f(cf[27], cf, (dispatch_function_t)figSyncMomentSource_sendMomentInternal);
  }
}

double FigTimebaseGetSyncMoment(OpaqueCMTimebase *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  unsigned int v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[2];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v12 = 0;
  v10 = 0u;
  v11 = 0u;
  v9 = 0u;
  v7 = 0u;
  memset(v8, 0, sizeof(v8));
  v6 = 0u;
  if (!figtimebase_getSyncMomentInternal(a1, 0, (uint64_t)&v6))
  {
    v4 = v7;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = v4;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_QWORD *)(a2 + 8) = *((_QWORD *)&v6 + 1);
    v5 = DWORD1(v6) & 0xFFFFFFF7;
    *(_DWORD *)a2 = 72;
    *(_DWORD *)(a2 + 4) = v5;
    *(_QWORD *)(a2 + 32) = *(_QWORD *)&v8[0];
    *(_QWORD *)(a2 + 56) = *((_QWORD *)&v8[1] + 1);
    *(_QWORD *)(a2 + 64) = 0;
    *(_OWORD *)(a2 + 40) = *(_OWORD *)((char *)v8 + 8);
    result = *(double *)&v9;
    *(_QWORD *)(a2 + 64) = v9;
  }
  return result;
}

uint64_t playerfig_doingGapless()
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v2;
  uint64_t v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 77))
  {
    if (dword_1EE2A2AC8)
      goto LABEL_12;
    return 0;
  }
  if (*(float *)(DerivedStorage + 48) != 1.0)
  {
    if (dword_1EE2A2AC8)
      goto LABEL_12;
    return 0;
  }
  if (*(_DWORD *)(DerivedStorage + 776))
  {
    if (dword_1EE2A2AC8)
      goto LABEL_12;
    return 0;
  }
  if (*(_BYTE *)(DerivedStorage + 800))
  {
    if (dword_1EE2A2AC8)
    {
LABEL_12:
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 0;
  }
  if (!dword_1EE2A2AC8)
    return 1;
  v2 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  v4 = 1;
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return v4;
}

uint64_t FigPlaybackBossSetRate(uint64_t a1, const void *a2, float a3)
{
  return FigPlaybackBossSetRateAndAnchorTime(a1, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], a2, a3);
}

uint64_t bossScheduleReachedEndCallbackForTime(uint64_t a1, CMTime *a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v5;
  __int128 v6;
  OpaqueCMTimebase *v7;
  uint64_t result;
  NSObject *v9;
  CMTime time;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A2C50)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v5 = *(NSObject **)(a1 + 160);
  if (v5)
    goto LABEL_4;
  v9 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(a1 + 32));
  *(_QWORD *)(a1 + 160) = v9;
  if (!v9)
    return FigSignalErrorAt();
  dispatch_set_context(v9, (void *)a1);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a1 + 160), (dispatch_function_t)figPlaybackBossReachedEndWithContext);
  dispatch_resume(*(dispatch_object_t *)(a1 + 160));
  result = CMTimebaseAddTimerDispatchSource(*(CMTimebaseRef *)(a1 + 112), *(dispatch_source_t *)(a1 + 160));
  if (!(_DWORD)result)
  {
    v5 = *(NSObject **)(a1 + 160);
LABEL_4:
    v6 = *(_OWORD *)&a2->value;
    *(_QWORD *)(a1 + 328) = a2->epoch;
    *(_OWORD *)(a1 + 312) = v6;
    v7 = *(OpaqueCMTimebase **)(a1 + 112);
    time = *a2;
    return CMTimebaseSetTimerDispatchSourceNextFireTime(v7, v5, &time, 1u);
  }
  return result;
}

void bossConfigureRatePlan(int a1, uint64_t a2, float *a3, uint64_t a4, float a5)
{
  int v7;
  float v8;
  float v9;
  const __CFNumber *v10;
  const __CFNumber *v11;
  CFTypeID v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v7 = *(unsigned __int8 *)a3;
  if (*(_BYTE *)a3)
    v8 = 2.1;
  else
    v8 = a3[2];
  v9 = fabs(a5);
  *(_WORD *)(a4 + 8) = 0;
  if (!a1)
  {
    *(float *)a4 = a5;
    *(float *)(a4 + 4) = v9;
    goto LABEL_22;
  }
  if (*(_BYTE *)a2 && *(float *)(a2 + 4) > a5 || *(_BYTE *)(a2 + 1) && *(float *)(a2 + 8) < a5)
    goto LABEL_9;
  if (v8 < v9)
  {
    if ((getPlaybackBossSnippetRate_preferencesChecked & 1) == 0)
    {
      v10 = (const __CFNumber *)CFPreferencesCopyAppValue(CFSTR("snippet_rate"), CFSTR("com.apple.coremedia"));
      getPlaybackBossSnippetRate_preferencesChecked = 1;
      if (v10)
      {
        v11 = v10;
        v12 = CFGetTypeID(v10);
        if (v12 == CFNumberGetTypeID())
          CFNumberGetValue(v11, kCFNumberFloat32Type, &getPlaybackBossSnippetRate_playbackBossSnippetRate);
        CFRelease(v11);
      }
    }
    *(_DWORD *)(a4 + 4) = getPlaybackBossSnippetRate_playbackBossSnippetRate;
    goto LABEL_20;
  }
  if (a5 == 0.0)
  {
    *(_DWORD *)(a4 + 4) = 1065353216;
LABEL_20:
    *(float *)a4 = a5;
LABEL_21:
    *(_BYTE *)(a4 + 8) = 1;
    goto LABEL_22;
  }
  if (v7)
  {
    FPSupport_ConfigSnapRateForLQZL((float *)(a4 + 4), (float *)a4, a5);
  }
  else
  {
    if (a3[1] > v9)
    {
LABEL_9:
      *(_BYTE *)(a4 + 9) = 1;
      *(_DWORD *)(a4 + 4) = 1065353216;
      *(float *)a4 = a5;
      goto LABEL_22;
    }
    *(float *)a4 = a5;
    *(float *)(a4 + 4) = v9;
  }
  if (a5 <= 0.0)
    goto LABEL_21;
LABEL_22:
  if (dword_1EE2A2C50)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

uint64_t bossCheckTimeWithEndTimes(uint64_t a1, CMTime *a2, uint64_t a3, float a4)
{
  __int128 *v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __int128 v9;
  NSObject *v10;
  uint64_t v11;
  CMTime time2;
  CMTime time1;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if ((a2->flags & 0x1D) != 1 || a4 == 0.0)
    return 0;
  if (a4 > 0.0)
  {
    if ((*(_DWORD *)(a1 + 180) & 0x1D) == 1)
    {
      v7 = (__int128 *)(a1 + 168);
      time1 = *a2;
      time2 = *(CMTime *)(a1 + 168);
      if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
      {
        if (dword_1EE2A2C50)
          goto LABEL_12;
        goto LABEL_13;
      }
    }
    return 0;
  }
  if ((*(_DWORD *)(a1 + 300) & 0x1D) != 1)
    return 0;
  v7 = (__int128 *)(a1 + 288);
  time1 = *a2;
  time2 = *(CMTime *)(a1 + 288);
  if (CMTimeCompare(&time1, &time2) > 0)
    return 0;
  if (dword_1EE2A2C50)
  {
LABEL_12:
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_13:
  if (a3)
  {
    v9 = *v7;
    *(_QWORD *)(a3 + 16) = *((_QWORD *)v7 + 2);
    *(_OWORD *)a3 = v9;
  }
  if (dword_1EE2A2C50)
  {
    v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v11 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)(a1 + 312) = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(v11 + 16);
  CMTimebaseSetTimerDispatchSourceToFireImmediately(*(CMTimebaseRef *)(a1 + 112), *(dispatch_source_t *)(a1 + 160));
  return 1;
}

uint64_t figPlaybackBossStartPrerollAndSetPlayState(uint64_t a1, CMTime *a2, uint64_t a3, __int16 a4, int a5, int a6, CMTime *a7, __int128 *a8, const void *a9)
{
  int v11;
  uint64_t v12;
  float v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _DWORD *v18;
  OpaqueCMClock *HostTimeClock;
  const void *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  NSObject *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  float v35;
  uint64_t started;
  NSObject *v37;
  unsigned int v38;
  unsigned int v39;
  OpaqueCMClock *v40;
  OpaqueCMTimebase *v41;
  _QWORD *v42;
  CFTypeRef v43;
  _BOOL4 v46;
  os_log_type_t type;
  unsigned int v50;
  CMTime v51;
  uint64_t v52;
  CMTime time;
  uint64_t v54;

  v11 = a6;
  v12 = a3;
  v54 = *MEMORY[0x1E0C80C00];
  v15 = *(float *)&a3;
  v46 = (*((_DWORD *)a8 + 3) & 0x1D) == 1;
  if (dword_1EE2A2C50)
  {
    v50 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v11 = a6;
    v12 = a3;
  }
  v18 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    time = *a7;
    CMTimeGetSeconds(&time);
    kdebug_trace();
    if (*v18 == 1)
    {
      strncpy((char *)&time, (const char *)(a1 + 841), 8uLL);
      kdebug_trace();
    }
  }
  ++*(_DWORD *)(a1 + 640);
  HostTimeClock = CMClockGetHostTimeClock();
  CMClockGetTime(&time, HostTimeClock);
  *(CMTime *)(a1 + 616) = time;
  v20 = *(const void **)(a1 + 416);
  *(_QWORD *)(a1 + 416) = a9;
  if (a9)
    CFRetain(a9);
  if (v20)
    CFRelease(v20);
  *(_DWORD *)(a1 + 424) = v11;
  v21 = *(_OWORD *)&a7->value;
  *(_QWORD *)(a1 + 808) = a7->epoch;
  *(_OWORD *)(a1 + 792) = v21;
  v22 = *a8;
  *(_QWORD *)(a1 + 832) = *((_QWORD *)a8 + 2);
  *(_OWORD *)(a1 + 816) = v22;
  *(_DWORD *)(a1 + 504) = v12;
  *(_BYTE *)(a1 + 106) = 0;
  if ((a2->flags & 0x1D) == 1)
  {
    v23 = *(_OWORD *)&a2->value;
    *(_QWORD *)(a1 + 460) = a2->epoch;
    *(_OWORD *)(a1 + 444) = v23;
  }
  else if ((a7->flags & 0x1D) == 1)
  {
    v24 = *(_OWORD *)&a7->value;
    a2->epoch = a7->epoch;
    *(_OWORD *)&a2->value = v24;
  }
  else
  {
    CMTimebaseGetTime(&time, *(CMTimebaseRef *)(a1 + 112));
    *a2 = time;
  }
  v25 = *(_OWORD *)&a2->value;
  *(_QWORD *)(a1 + 524) = a2->epoch;
  *(_OWORD *)(a1 + 508) = v25;
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
  if (*(_BYTE *)(a1 + 840))
  {
    v26 = v12;
    v27 = v11;
    v50 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v29 = v50;
    if (os_log_type_enabled(v28, type))
      v30 = v29;
    else
      v30 = v29 & 0xFFFFFFFE;
    if (v30)
    {
      LODWORD(v51.value) = 136315394;
      *(CMTimeValue *)((char *)&v51.value + 4) = (CMTimeValue)"figPlaybackBossStartPrerollAndSetPlayState";
      LOWORD(v51.flags) = 2048;
      *(_QWORD *)((char *)&v51.flags + 2) = a1;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v11 = v27;
    v12 = v26;
  }
  v31 = *(_QWORD *)(a1 + 80);
  bossBroadcastPrerollRateToRenderPipelines(a1, 0, v15);
  bossBumpCurrentMasterOrder(a1);
  v32 = *(_QWORD *)(a1 + 80);
  time = *a2;
  v33 = bossSetMentorModesForTimeAndRate(a1, 0, v32, &time, v12, a4, a5, v46);
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
  if (v11 == 1886151033)
  {
    v34 = *(float *)(a1 + 432);
    v35 = *(float *)(a1 + 436);
    time = *a7;
    v51 = *(CMTime *)a8;
    started = bossStartTimebaseAndAudioContext(a1, (__int128 *)&time.value, &v51, v34, v35);
    if ((_DWORD)started)
    {
      v33 = started;
      *(_DWORD *)(a1 + 424) = 1885435251;
    }
    else
    {
      *(_DWORD *)(a1 + 424) = 1886151033;
      ++*(_DWORD *)(a1 + 712);
      ++*(_DWORD *)(a1 + 720);
      v40 = CMClockGetHostTimeClock();
      CMClockGetTime(&time, v40);
      *(CMTime *)(a1 + 656) = time;
      v41 = *(OpaqueCMTimebase **)(a1 + 112);
      if (v41)
      {
        CMTimebaseGetTime(&time, v41);
        v33 = 0;
        *(CMTime *)(a1 + 688) = time;
      }
      else
      {
        return 0;
      }
    }
  }
  else if (!v31)
  {
    if (dword_1EE2A2C50)
    {
      v50 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v38 = v50;
      if (os_log_type_enabled(v37, type))
        v39 = v38;
      else
        v39 = v38 & 0xFFFFFFFE;
      if (v39)
      {
        LODWORD(v51.value) = 136315650;
        *(CMTimeValue *)((char *)&v51.value + 4) = (CMTimeValue)"figPlaybackBossStartPrerollAndSetPlayState";
        LOWORD(v51.flags) = 2048;
        *(_QWORD *)((char *)&v51.flags + 2) = a1;
        HIWORD(v51.epoch) = 2082;
        v52 = a1 + 841;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v42 = malloc_type_calloc(1uLL, 0x10uLL, 0xE0040E685C293uLL);
    *v42 = CFRetain((CFTypeRef)a1);
    v43 = *(CFTypeRef *)(a1 + 536);
    if (v43)
      v43 = CFRetain(v43);
    v42[1] = v43;
    dispatch_async_f(*(dispatch_queue_t *)(a1 + 32), v42, (dispatch_function_t)figPlaybackBoss_AllMentorsPrerollCompleteWithContext);
  }
  return v33;
}

uint64_t bossSetMentorModesForTimeAndRate(uint64_t a1, CFIndex a2, uint64_t a3, CMTime *a4, uint64_t a5, __int16 a6, int a7, int a8)
{
  float v14;
  uint64_t v15;
  float v17;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  int v22;
  float v23;
  CFIndex v24;
  char *ValueAtIndex;
  uint64_t v26;
  __CFDictionary *v27;
  uint64_t v28;
  uint64_t v29;
  const void *v30;
  CMTime *p_rhs;
  CMTime *p_type;
  CMTime v34;
  CMTime v35;
  CMTime type;
  CMTime rhs;
  CMTime lhs;
  CMTime time;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (*(float *)&a5 == 0.0)
  {
    time = *a4;
    return bossSetMentorModesToScrub(a1, a2, a3, &time, 0, 0);
  }
  v14 = *((float *)&a5 + 1);
  if (*(float *)&a5 > 0.0)
  {
    time = *a4;
    lhs = *(CMTime *)(a1 + 168);
    return bossSetMentorModesToForwardPlayback(a1, a2, a3, &time, &lhs, HIBYTE(a6), a6, a7, *(float *)&a5, *((float *)&a5 + 1), 0, a8, 1);
  }
  v17 = -*(float *)&a5;
  *(_OWORD *)&v35.value = *(_OWORD *)&a4->value;
  v35.epoch = a4->epoch;
  *(_OWORD *)&v34.value = *(_OWORD *)(a1 + 288);
  v34.epoch = *(_QWORD *)(a1 + 304);
  if (dword_1EE2A2C50)
  {
    LODWORD(rhs.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  bossBumpEveryTrackCurrentOrder(a1, a2, a3, 3);
  *(_BYTE *)(a1 + 600) = 0;
  v19 = *(uint64_t **)(a1 + 592);
  if (v19)
  {
    v20 = *(unsigned int *)(a1 + 544);
    time = v35;
    lhs = v34;
    FigVideoCompositionProcessorRequestPreroll(v19, (__int128 *)&time.value, (__int128 *)&lhs.value, v20, -1);
  }
  v15 = 0;
  if (a2 < FigCFRangeGetLimit())
  {
    v21 = a7;
    v22 = HIBYTE(a6);
    if ((_BYTE)a6)
      v23 = v17 / v14;
    else
      v23 = 1.0;
    v24 = a2;
    do
    {
      ValueAtIndex = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v24);
      v26 = *((_QWORD *)ValueAtIndex + 20);
      if (v26)
        bossSetUpSnippetPlaybackForRate(a1, (uint64_t)ValueAtIndex, v26, 0, v23);
      if (*((_QWORD *)ValueAtIndex + 24))
      {
        v27 = bossCopyOptionsDictionaryForMentors(a1, v21, *((const void **)ValueAtIndex + 27), *((const void **)ValueAtIndex + 28), *((const void **)ValueAtIndex + 29), *((const void **)ValueAtIndex + 30), 0, a8, v17, 1, 0, *((_DWORD *)ValueAtIndex + 18) == 1986618469, *((_DWORD *)ValueAtIndex + 86), ValueAtIndex[399], 0, 0);
        v28 = bossCopyRenderPipelineCachedVideoFrames(a1, *((_QWORD *)ValueAtIndex + 10));
        if (v22 && *((_DWORD *)ValueAtIndex + 18) == 1936684398)
          EditMentorSetModeToEmptyEdit(*((_QWORD *)ValueAtIndex + 24), 0, v27, 0, *((const void **)ValueAtIndex + 25));
        if (ValueAtIndex[400])
        {
          memset(&time, 0, sizeof(time));
          lhs = v35;
          rhs = *(CMTime *)(ValueAtIndex + 428);
          CMTimeAdd(&time, &lhs, &rhs);
          memset(&lhs, 0, sizeof(lhs));
          rhs = v34;
          type = *(CMTime *)(ValueAtIndex + 404);
          CMTimeSubtract(&lhs, &rhs, &type);
          v29 = *((_QWORD *)ValueAtIndex + 24);
          v30 = (const void *)*((_QWORD *)ValueAtIndex + 25);
          rhs = time;
          type = lhs;
          p_rhs = &rhs;
          p_type = &type;
        }
        else
        {
          v29 = *((_QWORD *)ValueAtIndex + 24);
          v30 = (const void *)*((_QWORD *)ValueAtIndex + 25);
          time = v35;
          lhs = v34;
          p_rhs = &time;
          p_type = &lhs;
        }
        EditMentorSetModeToReversePlayback(v29, (uint64_t)p_rhs, (uint64_t)p_type, v27, v28, 0, v30);
      }
      ++v24;
    }
    while (v24 < FigCFRangeGetLimit());
  }
  return v15;
}

uint64_t bossSetMentorModesToForwardPlayback(uint64_t a1, CFIndex a2, uint64_t a3, CMTime *a4, CMTime *a5, int a6, int a7, int a8, float a9, float a10, char a11, unsigned __int8 a12, char a13)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t *v22;
  uint64_t v23;
  float v24;
  CFIndex v25;
  _QWORD *ValueAtIndex;
  uint64_t v27;
  uint64_t FigBaseObject;
  uint64_t (*v29)(uint64_t, const __CFString *, uint64_t, CMTime *);
  int v30;
  const void *value;
  uint64_t v32;
  char v33;
  char v34;
  _BOOL4 v35;
  __CFDictionary *v36;
  uint64_t v37;
  uint64_t v38;
  const void *v39;
  CMTime *p_rhs;
  CMTime *p_type;
  uint64_t v43;
  CMTime type;
  CMTime rhs;
  CMTime lhs;
  CMTime time;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A2C50)
  {
    LODWORD(rhs.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  bossBumpEveryTrackCurrentOrder(a1, a2, a3, 3);
  *(_BYTE *)(a1 + 600) = 0;
  v22 = *(uint64_t **)(a1 + 592);
  if (v22)
  {
    v23 = *(unsigned int *)(a1 + 544);
    time = *a4;
    lhs = *a5;
    FigVideoCompositionProcessorRequestPreroll(v22, (__int128 *)&time.value, (__int128 *)&lhs.value, v23, 1);
  }
  if (a2 < FigCFRangeGetLimit())
  {
    v43 = *MEMORY[0x1E0C9AE00];
    if (a7)
      v24 = a9 / a10;
    else
      v24 = 1.0;
    v25 = a2;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v25);
      v27 = (uint64_t)ValueAtIndex;
      if (*(_DWORD *)(a1 + 424) != 1920298606)
        goto LABEL_15;
      time.value = 0;
      FigBaseObject = FigRenderPipelineGetFigBaseObject(ValueAtIndex[10]);
      v29 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
      if (!v29)
        goto LABEL_15;
      v30 = v29(FigBaseObject, CFSTR("SourceSampleBufferQueue"), v43, &time);
      value = (const void *)time.value;
      if (!v30)
        break;
      if (time.value)
        goto LABEL_14;
LABEL_15:
      v32 = *(_QWORD *)(v27 + 160);
      if (v32)
        bossSetUpSnippetPlaybackForRate(a1, v27, v32, 1, v24);
      v33 = *(_DWORD *)(v27 + 72) == 1986618469;
      if (*(_QWORD *)(v27 + 192))
      {
        v34 = bossTrackShouldRemoveExcessFramesInRefreshIntervals(a1, v27, a9);
        if (a11)
          v35 = 1;
        else
          v35 = *(_BYTE *)(v27 + 248) != 0;
        v36 = bossCopyOptionsDictionaryForMentors(a1, a8, *(const void **)(v27 + 216), *(const void **)(v27 + 224), *(const void **)(v27 + 232), *(const void **)(v27 + 240), v35, a12, a9, 1, a13, v33, *(_DWORD *)(v27 + 344), *(_BYTE *)(v27 + 399), 0, v34);
        v37 = bossCopyRenderPipelineCachedVideoFrames(a1, *(_QWORD *)(v27 + 80));
        if (a6 && *(_DWORD *)(v27 + 72) == 1936684398)
          EditMentorSetModeToEmptyEdit(*(_QWORD *)(v27 + 192), 0, v36, 0, *(const void **)(v27 + 200));
        if (*(_BYTE *)(v27 + 400))
        {
          memset(&time, 0, sizeof(time));
          lhs = *a4;
          rhs = *(CMTime *)(v27 + 404);
          CMTimeSubtract(&time, &lhs, &rhs);
          memset(&lhs, 0, sizeof(lhs));
          rhs = *a5;
          type = *(CMTime *)(v27 + 428);
          CMTimeAdd(&lhs, &rhs, &type);
          v38 = *(_QWORD *)(v27 + 192);
          v39 = *(const void **)(v27 + 200);
          rhs = time;
          type = lhs;
          p_rhs = &rhs;
          p_type = &type;
        }
        else
        {
          v38 = *(_QWORD *)(v27 + 192);
          v39 = *(const void **)(v27 + 200);
          time = *a4;
          lhs = *a5;
          p_rhs = &time;
          p_type = &lhs;
        }
        EditMentorSetModeToForwardPlayback(v38, (uint64_t)p_rhs, (uint64_t)p_type, v36, v37, 0, v39);
      }
      if (++v25 >= FigCFRangeGetLimit())
        return 0;
    }
    CMBufferQueueReset((CMBufferQueueRef)time.value);
    value = (const void *)time.value;
    if (!time.value)
      goto LABEL_15;
LABEL_14:
    CFRelease(value);
    goto LABEL_15;
  }
  return 0;
}

uint64_t bossSetUpSnippetPlaybackForRate(uint64_t a1, uint64_t a2, uint64_t a3, char a4, float a5)
{
  double v9;
  CFPropertyListRef v10;
  CFTypeID v11;
  uint64_t result;
  uint64_t v13;
  CMTime seconds;
  _BYTE v15[24];
  CMTime v16;
  CMTime v17;
  CMTime time;

  v17 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v16 = v17;
  if (a5 == 1.0)
    goto LABEL_8;
  v9 = a5;
  if ((getPlaybackBossSnippetDuration_preferencesChecked & 1) == 0)
  {
    v10 = CFPreferencesCopyAppValue(CFSTR("snippet_duration"), CFSTR("com.apple.coremedia"));
    getPlaybackBossSnippetDuration_preferencesChecked = 1;
    CMTimeMake(&time, 1, 1);
    *(CMTime *)getPlaybackBossSnippetDuration_playbackBossSnippetDuration = time;
    if (v10)
    {
      v11 = CFGetTypeID(v10);
      if (v11 == CFNumberGetTypeID())
      {
        seconds.value = 0x3FF0000000000000;
        CFNumberGetValue((CFNumberRef)v10, kCFNumberFloat64Type, &seconds);
        CMTimeMakeWithSeconds(&time, *(Float64 *)&seconds.value, 1000);
        *(CMTime *)getPlaybackBossSnippetDuration_playbackBossSnippetDuration = time;
      }
      CFRelease(v10);
    }
  }
  v17 = *(CMTime *)getPlaybackBossSnippetDuration_playbackBossSnippetDuration;
  time = *(CMTime *)getPlaybackBossSnippetDuration_playbackBossSnippetDuration;
  CMTimeMultiplyByFloat64(&v16, &time, v9);
  if (*(_BYTE *)(a2 + 168))
    goto LABEL_8;
  v13 = *(_QWORD *)(a2 + 160);
  bossGetContentDuration(a1, (uint64_t)v15);
  result = FigSnippetEditCursorServiceSetTrackDuration(v13, (uint64_t)v15);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(a2 + 168) = 1;
LABEL_8:
    time = v17;
    seconds = v16;
    return FigSnippetEditCursorServiceSetSnippetDurationAndStep(a3, &time, &seconds, a4);
  }
  return result;
}

CMTime *snippet_updateSnippetCount(CMTime *result)
{
  CMTime *v1;
  int32_t timescale;
  CMTimeValue v3;
  CMTime v4;
  CMTime v5;

  v1 = result;
  if ((result[2].flags & 0x1D) == 1)
  {
    memset(&v5, 0, sizeof(v5));
    timescale = result[2].timescale;
    v4 = *result;
    result = CMTimeConvertScale(&v5, &v4, timescale, kCMTimeRoundingMethod_RoundAwayFromZero);
    v3 = (v5.value + v1[2].value - 1) / v1[2].value;
  }
  else
  {
    v3 = 1;
  }
  *(_QWORD *)&v1[3].timescale = v3;
  return result;
}

void EditMentorSetModeToForwardPlayback(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t a6, const void *a7)
{
  editMentorStartNewParentOrder(a1, a4, a7);
}

uint64_t sub_19290D0FC()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  const void *v3;
  uint64_t v4;
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  const void *v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  const void *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  *(_DWORD *)(v0 + 320) = 2;
  v7 = *(_OWORD *)v4;
  *(_QWORD *)(v0 + 636) = *(_QWORD *)(v4 + 16);
  *(_OWORD *)(v0 + 620) = v7;
  v8 = *v5;
  *(_QWORD *)(v0 + 660) = *((_QWORD *)v5 + 2);
  *(_OWORD *)(v0 + 644) = v8;
  v9 = *(const void **)(v0 + 672);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(v0 + 672) = 0;
  }
  v20 = 0u;
  v21 = 0u;
  v10 = *(_OWORD *)(v0 + 636);
  v16 = *(_OWORD *)(v0 + 620);
  v17 = v10;
  v18 = *(_OWORD *)(v0 + 652);
  v19 = 0u;
  if (!editMentorSelectFirstEditSegmentForParentRange(v0, (uint64_t)&v16, (_BYTE *)(v6 - 65), (uint64_t)&v19))
  {
    v16 = *(_OWORD *)v4;
    *(_QWORD *)&v17 = *(_QWORD *)(v4 + 16);
    v11 = v0;
    v12 = 1;
    v13 = v1;
    v14 = v3;
    return editMentorSetChildMentorModeToEmptyEdit(v11, 0, (uint64_t)&v16, v12, v13, v14);
  }
  *(_QWORD *)(v0 + 672) = v3;
  if (v3)
    CFRetain(v3);
  if (*(_BYTE *)(v6 - 65))
  {
    v16 = *(_OWORD *)v4;
    *(_QWORD *)&v17 = *(_QWORD *)(v4 + 16);
    v11 = v0;
    v12 = 0;
    v13 = v1;
    v14 = 0;
    return editMentorSetChildMentorModeToEmptyEdit(v11, 0, (uint64_t)&v16, v12, v13, v14);
  }
  v16 = v19;
  v17 = v20;
  v18 = v21;
  return editMentorSetChildMentorModeToForwardPlayback(v0, &v16, v2);
}

uint64_t editMentorSelectFirstEditSegmentForParentRange(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4)
{
  _BYTE *v8;
  uint64_t *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, CMTimeRange *, uint64_t);
  uint64_t v14;
  unsigned int (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  unsigned int (*v19)(uint64_t, uint64_t);
  __int128 v20;
  uint64_t result;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  int32_t v35;
  __int128 v36;
  int32_t v37;
  CMTime v38;
  _BYTE v39[32];
  __int128 v40;
  CMTimeRange time1;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  CMTime time2;

  v8 = (_BYTE *)(a1 + 560);
  *(_DWORD *)(a1 + 560) = 0;
  *(_DWORD *)(a1 + 563) = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 344));
  v9 = (uint64_t *)(a1 + 336);
  v10 = *(const void **)(a1 + 336);
  if (v10)
  {
    CFRelease(v10);
    *v9 = 0;
  }
  v11 = *(_QWORD *)(a1 + 136);
  if (v11)
  {
    if (*(_DWORD *)(a1 + 320) == 3)
      v12 = a2 + 24;
    else
      v12 = a2;
    *(_OWORD *)v39 = *(_OWORD *)v12;
    *(_QWORD *)&v39[16] = *(_QWORD *)(v12 + 16);
    v13 = *(unsigned int (**)(uint64_t, CMTimeRange *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 8);
    if (!v13)
      goto LABEL_19;
    *(_OWORD *)&time1.start.value = *(_OWORD *)v39;
    time1.start.epoch = *(_QWORD *)&v39[16];
    if (v13(v11, &time1, a1 + 336))
      goto LABEL_19;
    v14 = *(_QWORD *)(a1 + 336);
    v15 = *(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (!v15 || v15(v14, a1 + 368))
      goto LABEL_19;
    if (*(_DWORD *)(a1 + 320) == 3)
    {
      *(_OWORD *)&time1.start.value = *(_OWORD *)(a1 + 416);
      time1.start.epoch = *(_QWORD *)(a1 + 432);
      time2 = *(CMTime *)(a2 + 24);
      if (!CMTimeCompare(&time1.start, &time2))
      {
        v16 = *v9;
        v17 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (v17)
          v17(v16, 0xFFFFFFFFLL);
        v18 = *v9;
        v19 = *(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
        if (!v19 || v19(v18, a1 + 368))
        {
LABEL_19:
          FigSignalErrorAt();
LABEL_20:
          MEMORY[0x19402EF04](*(_QWORD *)(a1 + 344));
          return 0;
        }
      }
    }
    v20 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)&time1.start.value = *(_OWORD *)a2;
    *(_OWORD *)&time1.start.epoch = v20;
    *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(a2 + 32);
    if (editMentorConsolidateCurrentEdit(a1, &time1))
      goto LABEL_20;
  }
  else
  {
    v22 = *(_OWORD *)(a1 + 192);
    *(_OWORD *)(a1 + 400) = *(_OWORD *)(a1 + 176);
    *(_OWORD *)(a1 + 416) = v22;
    v23 = *(_OWORD *)(a1 + 224);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(a1 + 208);
    *(_OWORD *)(a1 + 448) = v23;
    v24 = *(_OWORD *)(a1 + 160);
    *(_OWORD *)(a1 + 368) = *(_OWORD *)(a1 + 144);
    *(_OWORD *)(a1 + 384) = v24;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 344));
  v25 = *(_OWORD *)(a1 + 416);
  *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(a1 + 400);
  v42 = v25;
  v26 = *(_OWORD *)(a1 + 448);
  v43 = *(_OWORD *)(a1 + 432);
  v44 = v26;
  v27 = *(_OWORD *)(a1 + 384);
  *(_OWORD *)&time1.start.value = *(_OWORD *)(a1 + 368);
  *(_OWORD *)&time1.start.epoch = v27;
  v28 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v39 = *(_OWORD *)a2;
  *(_OWORD *)&v39[16] = v28;
  v40 = *(_OWORD *)(a2 + 32);
  result = editMentorDoesEditSegmentIntersectTrackRange((uint64_t)&time1, (uint64_t)v39);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(a1 + 562) = 1;
    return result;
  }
  if ((*(_BYTE *)(a1 + 380) & 1) != 0)
  {
    v29 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v39 = *(_OWORD *)a2;
    *(_OWORD *)&v39[16] = v29;
    v30 = *(_OWORD *)(a2 + 32);
    v31 = *(_OWORD *)(a1 + 416);
    *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(a1 + 400);
    v42 = v31;
    v32 = *(_OWORD *)(a1 + 448);
    v43 = *(_OWORD *)(a1 + 432);
    v44 = v32;
    v33 = *(_OWORD *)(a1 + 368);
    v34 = *(_OWORD *)(a1 + 384);
    v40 = v30;
    *(_OWORD *)&time1.start.value = v33;
    *(_OWORD *)&time1.start.epoch = v34;
    editMentorIntersectTrackRangeWithEditSegmentAndMapToMediaRange(a1, (__int128 *)v39, (__int128 *)&time1.start.value, a4);
    editMentorUpdateChildMentorProperties(a1);
  }
  *a3 = 1;
  if (*(_DWORD *)(a1 + 320) == 2)
  {
    *(_OWORD *)&time1.start.value = *(_OWORD *)a2;
    time1.start.epoch = *(_QWORD *)(a2 + 16);
    *(_OWORD *)v39 = *(_OWORD *)(a1 + 416);
    *(_QWORD *)&v39[16] = *(_QWORD *)(a1 + 432);
    v35 = CMTimeCompare(&time1.start, (CMTime *)v39);
    result = 1;
    if ((v35 & 0x80000000) == 0)
      return result;
  }
  else
  {
    v36 = *(_OWORD *)(a1 + 432);
    *(_OWORD *)&time1.start.value = *(_OWORD *)(a1 + 416);
    *(_OWORD *)&time1.start.epoch = v36;
    *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(a1 + 448);
    CMTimeRangeGetEnd(&v38, &time1);
    *(_OWORD *)&time1.start.value = *(_OWORD *)(a2 + 24);
    time1.start.epoch = *(_QWORD *)(a2 + 40);
    v37 = CMTimeCompare(&time1.start, &v38);
    result = 1;
    if (v37 < 1)
      return result;
  }
  *a3 = 1;
  *v8 = 1;
  return result;
}

void editMentorIntersectTrackRangeWithEditSegmentAndMapToMediaRange(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  CMTimeEpoch epoch;
  __int128 v15;
  CMTimeRange v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  CMTime v20;
  __int128 v21;
  CMTimeEpoch v22;
  CMTimeRange time1;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  CMTime v27;
  CMTime v28;

  memset(&v28, 0, sizeof(v28));
  memset(&v27, 0, sizeof(v27));
  if ((*((_DWORD *)a2 + 3) & 0x1D) == 1
    && (*(_OWORD *)&time1.start.value = *a2,
        time1.start.epoch = *((_QWORD *)a2 + 2),
        *(_OWORD *)&v16.start.value = a3[3],
        v16.start.epoch = *((_QWORD *)a3 + 8),
        CMTimeCompare(&time1.start, &v16.start) > 0))
  {
    v25 = 0u;
    v26 = 0u;
    v24 = 0u;
    memset(&time1, 0, sizeof(time1));
    *(_OWORD *)&v16.start.value = *a2;
    v16.start.epoch = *((_QWORD *)a2 + 2);
    editMentorSelectEditForTimeInConsolidatedEdit(a1, (uint64_t)&v16, 0, &time1);
    v8 = *a2;
    v20.epoch = *((_QWORD *)a2 + 2);
    v16 = time1;
    v17 = v24;
    v18 = v25;
    v19 = v26;
    *(_OWORD *)&v20.value = v8;
    editMentorMapTrackTimeToMediaTimeUsingEditSegment(&v20, &v16.start, (uint64_t)&v21);
    *(_OWORD *)a4 = v21;
    *(_QWORD *)(a4 + 16) = v22;
  }
  else
  {
    v9 = *a3;
    *(_QWORD *)(a4 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)a4 = v9;
  }
  v10 = a3[4];
  *(_OWORD *)&time1.start.value = a3[3];
  *(_OWORD *)&time1.start.epoch = v10;
  *(_OWORD *)&time1.duration.timescale = a3[5];
  CMTimeRangeGetEnd(&v28, &time1);
  if ((*((_DWORD *)a2 + 9) & 0x1D) == 1
    && (time1.start = v28,
        v12 = *(__int128 *)((char *)a2 + 24),
        v11 = (__int128 *)((char *)a2 + 24),
        *(_OWORD *)&v16.start.value = v12,
        v16.start.epoch = *((_QWORD *)v11 + 2),
        CMTimeCompare(&time1.start, &v16.start) > 0))
  {
    v25 = 0u;
    v26 = 0u;
    v24 = 0u;
    memset(&time1, 0, sizeof(time1));
    *(_OWORD *)&v16.start.value = *v11;
    v16.start.epoch = *((_QWORD *)v11 + 2);
    editMentorSelectEditForTimeInConsolidatedEdit(a1, (uint64_t)&v16, 0, &time1);
    v13 = *v11;
    v20.epoch = *((_QWORD *)v11 + 2);
    v16 = time1;
    v17 = v24;
    v18 = v25;
    v19 = v26;
    *(_OWORD *)&v20.value = v13;
    editMentorMapTrackTimeToMediaTimeUsingEditSegment(&v20, &v16.start, (uint64_t)&v21);
    *(_OWORD *)(a4 + 24) = v21;
    epoch = v22;
  }
  else
  {
    v15 = a3[1];
    *(_OWORD *)&time1.start.value = *a3;
    *(_OWORD *)&time1.start.epoch = v15;
    *(_OWORD *)&time1.duration.timescale = a3[2];
    CMTimeRangeGetEnd(&v27, &time1);
    *(_OWORD *)(a4 + 24) = *(_OWORD *)&v27.value;
    epoch = v27.epoch;
  }
  *(_QWORD *)(a4 + 40) = epoch;
}

uint64_t editMentorSetChildMentorModeToForwardPlayback(uint64_t a1, __int128 *a2, const void *a3)
{
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, __int128 *, __int128 *, __CFDictionary *, const void *, _QWORD, const void *);
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __CFDictionary *v19;

  v19 = 0;
  v6 = (const void *)editMentorRetainCurrentChildOrderAndOptionsDictionary(a1, &v19);
  v7 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v17 = *a2;
    v18 = *((_QWORD *)a2 + 2);
    v15 = *(__int128 *)((char *)a2 + 24);
    v16 = *((_QWORD *)a2 + 5);
    v8 = VideoMentorSetModeToForwardPlayback(v7, 0, (uint64_t)&v17, 0, &v15, v19, a3, 0, v6);
    goto LABEL_9;
  }
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v17 = *a2;
    v18 = *((_QWORD *)a2 + 2);
    v15 = *(__int128 *)((char *)a2 + 24);
    v16 = *((_QWORD *)a2 + 5);
    v8 = AudioMentorSetModeToForwardPlayback(v9, 0, (uint64_t)&v17, 0, (uint64_t)&v15, v19, 0, v6);
    goto LABEL_9;
  }
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    v17 = *a2;
    v18 = *((_QWORD *)a2 + 2);
    v15 = *(__int128 *)((char *)a2 + 24);
    v16 = *((_QWORD *)a2 + 5);
    EditMentorSetModeToForwardPlayback(v10, (uint64_t)&v17, (uint64_t)&v15, v19, (uint64_t)a3, 0, v6);
  }
  if (*(_BYTE *)(a1 + 24))
  {
    v11 = *(uint64_t (**)(uint64_t, __int128 *, __int128 *, __CFDictionary *, const void *, _QWORD, const void *))(a1 + 80);
    v12 = *(_QWORD *)(a1 + 40);
    v17 = *a2;
    v18 = *((_QWORD *)a2 + 2);
    v15 = *(__int128 *)((char *)a2 + 24);
    v16 = *((_QWORD *)a2 + 5);
    v8 = v11(v12, &v17, &v15, v19, a3, 0, v6);
LABEL_9:
    v13 = v8;
    if (!v6)
      goto LABEL_11;
    goto LABEL_10;
  }
  v13 = 0;
  if (v6)
LABEL_10:
    CFRelease(v6);
LABEL_11:
  if (v19)
    CFRelease(v19);
  return v13;
}

uint64_t AudioMentorSetModeToForwardPlayback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const __CFDictionary *a6, const void *a7, const void *a8)
{
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v11 = *(_OWORD *)a3;
  v12 = *(_QWORD *)(a3 + 16);
  v9 = *(_OWORD *)a5;
  v10 = *(_QWORD *)(a5 + 16);
  return audioMentorSetModeToForwardOrReversePlayback(a1, a2, &v11, a4, &v9, a6, a7, a8, 1);
}

uint64_t audioMentorSetModeToForwardOrReversePlayback(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, __int128 *a5, const __CFDictionary *a6, const void *a7, const void *a8, int a9)
{
  unsigned int v13;
  const __CFNumber *Value;
  CMTime *v15;
  const __CFNumber *v16;
  int v17;
  BOOL v18;
  const __CFDictionary *v19;
  const void *v20;
  const void *v21;
  char v22;
  char v23;
  _BOOL4 ShouldSynchronouslyResetOutput;
  uint64_t (*v25)(uint64_t, CFTypeRef *);
  uint64_t v26;
  uint64_t (*v27)(uint64_t, CFTypeRef *);
  const void *v28;
  __int128 v29;
  const void *v30;
  __int128 v31;
  const void *v32;
  const void *v33;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v36;
  int v37;
  int PolicyFromPrerollPolicy;
  CMTime v43;
  CFTypeRef v44;
  CFTypeRef v45;
  _DWORD valuePtr[32];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v44 = 0;
  v45 = 0;
  PolicyFromPrerollPolicy = audioMentorGetInitialReadPolicyFromPrerollPolicy((uint64_t)a6);
  v13 = audioMentorGetModeChangePolicy(a6);
  valuePtr[0] = 0;
  if (a6 && (Value = (const __CFNumber *)CFDictionaryGetValue(a6, CFSTR("DefaultGradualDecoderRefresh"))) != 0)
  {
    CFNumberGetValue(Value, kCFNumberSInt32Type, valuePtr);
    v37 = valuePtr[0];
  }
  else
  {
    v37 = 0;
  }
  valuePtr[0] = 0;
  FigCFDictionaryGetInt32IfPresent();
  v36 = valuePtr[0];
  valuePtr[0] = 0;
  v15 = (CMTime *)MEMORY[0x1E0CA2E18];
  if (a6)
  {
    v16 = (const __CFNumber *)CFDictionaryGetValue(a6, CFSTR("PostDecoderDrain"));
    if (v16)
    {
      CFNumberGetValue(v16, kCFNumberSInt32Type, valuePtr);
      v17 = valuePtr[0];
    }
    else
    {
      v17 = 0;
    }
    v43 = *v15;
    v19 = (const __CFDictionary *)CFDictionaryGetValue(a6, CFSTR("TrimDurationAtEOF"));
    if (v19)
      CMTimeMakeFromDictionary(&v43, v19);
    v20 = CFDictionaryGetValue(a6, CFSTR("CursorAccuracy"));
    v18 = v20 && CFEqual(CFSTR("Exact"), v20);
    v21 = CFDictionaryGetValue(a6, CFSTR("TrimSampleBufferDurations"));
    if (v21 && CFEqual((CFTypeRef)*MEMORY[0x1E0C9AE40], v21))
    {
      v22 = 0;
      goto LABEL_20;
    }
  }
  else
  {
    v18 = 0;
    v17 = 0;
    v43 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  }
  v22 = 1;
LABEL_20:
  if (a9 == 1)
  {
    LOBYTE(valuePtr[0]) = 0;
    FigCFDictionaryGetBooleanIfPresent();
    v23 = valuePtr[0];
    if (v13)
      goto LABEL_22;
  }
  else
  {
    v23 = 0;
    if (v13)
    {
LABEL_22:
      ShouldSynchronouslyResetOutput = audioMentorShouldSynchronouslyResetOutput(a6);
      if (!a2)
        goto LABEL_28;
      goto LABEL_26;
    }
  }
  ShouldSynchronouslyResetOutput = 0;
  if (!a2)
    goto LABEL_28;
LABEL_26:
  v25 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v25)
    goto LABEL_48;
  v26 = v25(a2, &v45);
  if ((_DWORD)v26)
    goto LABEL_49;
LABEL_28:
  if (a4)
  {
    v27 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v27)
    {
      v26 = v27(a4, &v44);
      if (!(_DWORD)v26)
        goto LABEL_31;
LABEL_49:
      FigSignalErrorAt();
      goto LABEL_51;
    }
LABEL_48:
    v26 = 4294954514;
    goto LABEL_49;
  }
LABEL_31:
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 96));
  if (!*(_BYTE *)a1)
  {
    v28 = *(const void **)(a1 + 128);
    if (v28)
      CFRelease(v28);
    *(_QWORD *)(a1 + 128) = v45;
    v45 = 0;
    v29 = *a3;
    *(_QWORD *)(a1 + 152) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 136) = v29;
    v30 = *(const void **)(a1 + 160);
    if (v30)
      CFRelease(v30);
    *(_QWORD *)(a1 + 160) = v44;
    v44 = 0;
    v31 = *a5;
    *(_QWORD *)(a1 + 184) = *((_QWORD *)a5 + 2);
    *(_OWORD *)(a1 + 168) = v31;
    *(_DWORD *)(a1 + 192) = PolicyFromPrerollPolicy;
    *(_DWORD *)(a1 + 196) = v13;
    *(_DWORD *)(a1 + 200) = v37;
    *(_DWORD *)(a1 + 204) = v36;
    *(_DWORD *)(a1 + 208) = v17;
    *(CMTime *)(a1 + 212) = v43;
    *(_BYTE *)(a1 + 236) = v18;
    *(_BYTE *)(a1 + 237) = v22;
    *(_BYTE *)(a1 + 238) = ShouldSynchronouslyResetOutput;
    *(_BYTE *)(a1 + 239) = v23;
    v32 = *(const void **)(a1 + 248);
    if (v32)
      CFRelease(v32);
    *(_QWORD *)(a1 + 248) = a7;
    if (a7)
      CFRetain(a7);
    v33 = *(const void **)(a1 + 256);
    if (v33)
      CFRelease(v33);
    *(_QWORD *)(a1 + 256) = a8;
    if (a8)
      CFRetain(a8);
    *(_DWORD *)(a1 + 112) = a9;
    *(_BYTE *)(a1 + 116) = 1;
    FigMemoryBarrier();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 96));
  FigSemaphoreSignal();
  if (ShouldSynchronouslyResetOutput && FigSemaphoreWaitRelative())
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v26 = 0;
LABEL_51:
  if (v45)
    CFRelease(v45);
  if (v44)
    CFRelease(v44);
  return v26;
}

const __CFDictionary *audioMentorGetModeChangePolicy(const __CFDictionary *result)
{
  const void *v1;

  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("ModeChangePolicy"));
    if (result)
    {
      v1 = result;
      if (CFEqual(result, CFSTR("PreservePreviousOutput")))
      {
        return 0;
      }
      else if (CFEqual(v1, CFSTR("CancelPreviousOutput")))
      {
        return (const __CFDictionary *)1;
      }
      else
      {
        return (const __CFDictionary *)(2 * (CFEqual(v1, CFSTR("RepurposeOrCancelPreviousOutput")) != 0));
      }
    }
  }
  return result;
}

uint64_t audioMentorCreateCursorForPresentationTimeStamp(uint64_t a1, int a2, __int128 *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, __int128 *, uint64_t, _QWORD, _QWORD);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, __int128 *, uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  v5 = *(_QWORD *)(a1 + 8);
  if (a2)
  {
    v11 = *a3;
    v13 = *((_QWORD *)a3 + 2);
    v6 = *(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 8);
    if (v6)
    {
      v15 = v11;
      v16 = v13;
      v7 = v6(v5, &v15, a4, 0, 0);
      goto LABEL_6;
    }
  }
  else
  {
    v12 = *a3;
    v14 = *((_QWORD *)a3 + 2);
    v8 = *(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 16);
    if (v8)
    {
      v15 = v12;
      v16 = v14;
      v7 = v8(v5, &v15, 1, a4, 0, 0);
LABEL_6:
      v9 = v7;
      if (!(_DWORD)v7)
        return v9;
      goto LABEL_9;
    }
  }
  v9 = 4294954514;
LABEL_9:
  FigSignalErrorAt();
  return v9;
}

uint64_t sbcbq_flush()
{
  _QWORD *DerivedStorage;
  uint64_t v1;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  v1 = 15;
  if (!*((_BYTE *)DerivedStorage + 8))
    v1 = 16;
  MEMORY[0x19402B01C](DerivedStorage[v1], sbcbq_invalidateSampleBuffer, 0);
  if (!*((_BYTE *)DerivedStorage + 8))
    *((_BYTE *)DerivedStorage + 136) = 1;
  MEMORY[0x19402EF04](*DerivedStorage);
  return 0;
}

BOOL sbcbq_isQueueBelowLowWater()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  CMTime v4;
  CMTime time1;
  CMTime v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = DerivedStorage;
  v2 = 120;
  if (!*(_BYTE *)(DerivedStorage + 8))
    v2 = 128;
  CMBufferQueueGetDuration(&v6, *(CMBufferQueueRef *)(DerivedStorage + v2));
  time1 = v6;
  v4 = *(CMTime *)(v1 + 36);
  return CMTimeCompare(&time1, &v4) < 1;
}

BOOL sbcbq_isQueueAtOrAboveHighWater()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  CMTime v5;
  CMTime time1;
  CMTime v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = DerivedStorage;
  v2 = 120;
  if (!*(_BYTE *)(DerivedStorage + 8))
    v2 = 128;
  CMBufferQueueGetDuration(&v7, *(CMBufferQueueRef *)(DerivedStorage + v2));
  time1 = v7;
  v3 = *(_OWORD *)(v1 + 12);
  v5.epoch = *(_QWORD *)(v1 + 28);
  *(_OWORD *)&v5.value = v3;
  return CMTimeCompare(&time1, &v5) >= 0;
}

uint64_t locateChunk(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  const __CFArray *Count;
  uint64_t result;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  signed int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const __CFArray *v56;
  signed int v57;
  uint64_t v58;
  unsigned int v59;

  v6 = *(_DWORD *)(a1 + 80);
  v7 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v7 + 432) == 1)
  {
    v8 = (v6 - 1) / *(_DWORD *)(a1 + 148);
    *a2 = v8;
    v9 = *(_DWORD *)(a1 + 148) * v8;
    *(_DWORD *)(a1 + 140) = v9 + 1;
    if (v9 < 0 || v9 >= *(_DWORD *)(v7 + 288))
      return FigSignalErrorAt();
    if (!a3)
      return 0;
    v10 = *(int *)(a1 + 136);
    v59 = 0;
    v58 = 0;
    CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v7 + 440), 12 * v10, 0xCuLL, &v58);
    v11 = bswap32(v59);
    *a3 = v11;
    if ((int)v11 >= 1)
    {
      Count = *(const __CFArray **)(*(_QWORD *)(a1 + 8) + 56);
      if (Count)
        Count = (const __CFArray *)CFArrayGetCount(Count);
      if ((uint64_t)Count >= v11)
        return 0;
    }
  }
  else
  {
    v14 = *(_DWORD *)(a1 + 140);
    v15 = *(_QWORD *)(*(_QWORD *)a1 + 24) != 0;
    v16 = *(_DWORD *)(a1 + 80);
    v17 = v14;
    while (v17 > v16 || *(int *)(a1 + 144) * (uint64_t)*(int *)(a1 + 148) + (int)v17 <= (unint64_t)v16)
    {
      if (!v15)
        goto LABEL_18;
      v18 = *(_DWORD *)(a1 + 144);
      v19 = *(int *)(a1 + 136) + 1;
      v20 = *(_QWORD *)(a1 + 8);
      if ((_DWORD)v19 == *(_DWORD *)(v20 + 432))
      {
        v21 = (*(uint64_t (**)(void))(v20 + 624))() + 1;
      }
      else
      {
        v59 = 0;
        v58 = 0;
        CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v20 + 440), 12 * v19, 0xCuLL, &v58);
        v21 = bswap32(v58);
      }
      *(_DWORD *)(a1 + 144) = v21;
      v22 = *(_QWORD *)(a1 + 8);
      v23 = *(int *)(a1 + 136);
      v59 = 0;
      v58 = 0;
      CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v22 + 440), 12 * v23, 0xCuLL, &v58);
      v24 = *(_DWORD *)(a1 + 144) - bswap32(v58);
      *(_DWORD *)(a1 + 144) = v24;
      if (v18 == v24)
      {
LABEL_18:
        v25 = *(int *)(a1 + 136);
        if (v6 >= v14)
        {
          v37 = v25 + 1;
          v38 = *(_QWORD *)(a1 + 8);
          if ((int)v37 >= *(_DWORD *)(v38 + 432))
            return FigSignalErrorAt();
          v39 = *(_DWORD *)(a1 + 140) + *(_DWORD *)(a1 + 144) * *(_DWORD *)(a1 + 148);
          *(_DWORD *)(a1 + 140) = v39;
          if (v39 < 1 || v39 > *(_DWORD *)(v38 + 288))
            return FigSignalErrorAt();
          *(_DWORD *)(a1 + 136) = v37;
          v59 = 0;
          v58 = 0;
          CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v38 + 440), 12 * v37, 0xCuLL, &v58);
          v40 = bswap32(HIDWORD(v58));
          *(_DWORD *)(a1 + 148) = v40;
          v41 = *(_QWORD *)(a1 + 8);
          v42 = *(_DWORD *)(v41 + 244);
          if (v42)
            *(_DWORD *)(a1 + 148) = v40 / v42;
          v43 = *(int *)(a1 + 136) + 1;
          if ((_DWORD)v43 == *(_DWORD *)(v41 + 432))
          {
            v44 = (*(uint64_t (**)(void))(v41 + 624))() + 1;
          }
          else
          {
            v59 = 0;
            v58 = 0;
            CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v41 + 440), 12 * v43, 0xCuLL, &v58);
            v44 = bswap32(v58);
          }
          *(_DWORD *)(a1 + 144) = v44;
          v45 = *(_QWORD *)(a1 + 8);
          v46 = *(int *)(a1 + 136);
          v59 = 0;
          v58 = 0;
          CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v45 + 440), 12 * v46, 0xCuLL, &v58);
          v32 = *(_DWORD *)(a1 + 148);
          *(_DWORD *)(a1 + 144) -= bswap32(v58);
          if (v32 < 1)
            return FigSignalErrorAt();
          v36 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 288);
        }
        else
        {
          if ((int)v25 < 1)
            return FigSignalErrorAt();
          *(_DWORD *)(a1 + 136) = v25 - 1;
          v26 = *(_QWORD *)(a1 + 8);
          v59 = 0;
          v58 = 0;
          CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v26 + 440), 12 * v25, 0xCuLL, &v58);
          v27 = bswap32(v58);
          v28 = *(_QWORD *)(a1 + 8);
          v29 = *(int *)(a1 + 136);
          v59 = 0;
          v58 = 0;
          CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v28 + 440), 12 * v29, 0xCuLL, &v58);
          *(_DWORD *)(a1 + 144) = v27 - bswap32(v58);
          v30 = *(_QWORD *)(a1 + 8);
          v31 = *(int *)(a1 + 136);
          v59 = 0;
          v58 = 0;
          CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v30 + 440), 12 * v31, 0xCuLL, &v58);
          v32 = bswap32(HIDWORD(v58));
          *(_DWORD *)(a1 + 148) = v32;
          v33 = *(_QWORD *)(a1 + 8);
          v34 = *(_DWORD *)(v33 + 244);
          if (v34)
          {
            v32 /= v34;
            *(_DWORD *)(a1 + 148) = v32;
          }
          v35 = *(_DWORD *)(a1 + 140) - *(_DWORD *)(a1 + 144) * v32;
          *(_DWORD *)(a1 + 140) = v35;
          if (v35 < 1)
            return FigSignalErrorAt();
          v36 = *(_DWORD *)(v33 + 288);
          if (v35 > v36 || v32 < 1)
            return FigSignalErrorAt();
        }
        if (v32 > v36)
          return FigSignalErrorAt();
      }
      v15 = 0;
      v17 = *(_DWORD *)(a1 + 140);
      v16 = *(_DWORD *)(a1 + 80);
    }
    v47 = *(_QWORD *)(a1 + 8);
    v48 = *(int *)(a1 + 136);
    v59 = 0;
    v58 = 0;
    CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v47 + 440), 12 * v48, 0xCuLL, &v58);
    v49 = v58;
    v50 = *(_DWORD *)(a1 + 80);
    v51 = *(_DWORD *)(a1 + 140);
    v52 = *(_DWORD *)(a1 + 148);
    if (!a3)
      goto LABEL_45;
    v53 = *(_QWORD *)(a1 + 8);
    v54 = *(int *)(a1 + 136);
    v59 = 0;
    v58 = 0;
    CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v53 + 440), 12 * v54, 0xCuLL, &v58);
    v55 = bswap32(v59);
    *a3 = v55;
    if ((int)v55 >= 1)
    {
      v56 = *(const __CFArray **)(*(_QWORD *)(a1 + 8) + 56);
      if (v56)
        v56 = (const __CFArray *)CFArrayGetCount(v56);
      if ((uint64_t)v56 >= v55)
      {
LABEL_45:
        v57 = bswap32(v49) + (v50 - v51) / v52 - 1;
        if ((v57 & 0x80000000) == 0
          && v57 < (*(int (**)(void))(*(_QWORD *)(a1 + 8) + 624))()
          && *(_DWORD *)(a1 + 80) <= *(_DWORD *)(*(_QWORD *)(a1 + 8) + 288))
        {
          result = 0;
          *a2 = v57;
          return result;
        }
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t CheckChunkNumber(uint64_t a1, int a2)
{
  if (a2 < 0 || (*(int (**)(void))(a1 + 624))() <= a2)
    return FigSignalErrorAt();
  else
    return 0;
}

uint64_t sgffr_getContiguousSampleOffsetAndSize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v7;

  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 144);
  if (v6)
  {
    v7 = v6(a1, a2, a3, 0, 0);
    if (!(_DWORD)v7)
      return v7;
  }
  else
  {
    v7 = 4294954514;
  }
  FigSignalErrorAt();
  return v7;
}

uint64_t sgffr_getPTSAndDTSAndDuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  _OWORD *v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  CMTimeEpoch epoch;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  CMTime v14;
  CMTime lhs;
  CMTime v16;

  v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v6)
    goto LABEL_11;
  v7 = v6(a2, a3 + 24);
  if ((_DWORD)v7)
    goto LABEL_12;
  v8 = (_OWORD *)(a3 + 48);
  if (!*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48))
  {
    v11 = MEMORY[0x1E0CA2E18];
    *v8 = *MEMORY[0x1E0CA2E18];
    epoch = *(_QWORD *)(v11 + 16);
LABEL_8:
    *(_QWORD *)(a3 + 64) = epoch;
    v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
    if (v12)
    {
      v7 = v12(a2, a3);
      if (!(_DWORD)v7)
        return v7;
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (!v9)
  {
LABEL_11:
    v7 = 4294954514;
    goto LABEL_12;
  }
  v7 = v9(a2, a3 + 48);
  if (!(_DWORD)v7)
  {
    *(_OWORD *)&lhs.value = *v8;
    lhs.epoch = *(_QWORD *)(a3 + 64);
    v14 = *(CMTime *)(a1 + 88);
    CMTimeSubtract(&v16, &lhs, &v14);
    *v8 = *(_OWORD *)&v16.value;
    epoch = v16.epoch;
    goto LABEL_8;
  }
LABEL_12:
  FigSignalErrorAt();
  return v7;
}

uint64_t audioMentorRemapSBufTiming(uint64_t *a1, uint64_t a2, opaqueCMSampleBuffer *target)
{
  uint64_t v6;
  const __CFDictionary *v7;
  const __CFDictionary *v8;
  const __CFNumber *Value;
  const __CFDictionary *v10;
  const __CFDictionary *v11;
  CMItemCount NumSamples;
  CMTimeEpoch epoch;
  _OWORD *v14;
  _BOOL4 v15;
  char v16;
  _OWORD *v17;
  char v18;
  const __CFString *v19;
  const __CFString *v20;
  const __CFString *v21;
  void (*v22)(_QWORD, uint64_t, opaqueCMSampleBuffer *);
  CMTime v24;
  CMTime v25;
  CMTime v26;
  CMTime v27;
  CMTime presentationTimeStamp;
  CMSampleTimingInfo lhs;
  CMTime rhs;
  CMTime v31;
  CMTime v32;
  CMTime v33;
  unsigned int valuePtr;
  CMTime v35;
  CMTime v36;
  CMTime v37;

  v6 = *a1;
  memset(&v37, 0, sizeof(v37));
  memset(&v36, 0, sizeof(v36));
  memset(&v35, 0, sizeof(v35));
  valuePtr = -1;
  v33 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v32 = v33;
  v31 = v33;
  if (!*((_BYTE *)a1 + 80))
    goto LABEL_28;
  CMSampleBufferGetOutputPresentationTimeStamp(&v37, target);
  CMSampleBufferGetOutputDuration(&v35, target);
  lhs.duration = v37;
  rhs = v35;
  CMTimeAdd(&v36, &lhs.duration, &rhs);
  v7 = (const __CFDictionary *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0CA4E38], 0);
  if (v7)
  {
    v8 = v7;
    Value = (const __CFNumber *)CFDictionaryGetValue(v7, (const void *)*MEMORY[0x1E0CA4EC0]);
    v10 = (const __CFDictionary *)CFDictionaryGetValue(v8, (const void *)*MEMORY[0x1E0CA4EB8]);
    if (Value)
    {
      v11 = v10;
      if (v10)
      {
        CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
        CMTimeMakeFromDictionary(&v33, v11);
        if ((*((_DWORD *)a1 + 17) & 0x1D) == 1)
        {
          memset(&lhs, 0, sizeof(lhs));
          memset(&rhs, 0, sizeof(rhs));
          NumSamples = CMSampleBufferGetNumSamples(target);
          if ((valuePtr & 0x80000000) == 0 && NumSamples > valuePtr)
          {
            CMSampleBufferGetSampleTimingInfo(target, valuePtr, &lhs);
            presentationTimeStamp = lhs.presentationTimeStamp;
            v27 = v33;
            CMTimeAdd(&rhs, &presentationTimeStamp, &v27);
            v27 = rhs;
            v26 = *(CMTime *)(a1 + 7);
            CMTimeSubtract(&presentationTimeStamp, &v27, &v26);
            epoch = presentationTimeStamp.epoch;
            rhs = presentationTimeStamp;
            *((_OWORD *)a1 + 2) = *(_OWORD *)&presentationTimeStamp.value;
            a1[6] = epoch;
          }
        }
      }
    }
  }
  v14 = a1 + 1;
  if ((*((_DWORD *)a1 + 5) & 0x1D) == 1
    && (lhs.duration = v37, *(_OWORD *)&rhs.value = *v14, rhs.epoch = a1[3], CMTimeCompare(&lhs.duration, &rhs) < 0))
  {
    v16 = 0;
    v15 = 0;
  }
  else
  {
    if ((*((_DWORD *)a1 + 11) & 0x1D) == 1)
    {
      *(_OWORD *)&lhs.duration.value = *((_OWORD *)a1 + 2);
      lhs.duration.epoch = a1[6];
      rhs = v37;
      v15 = CMTimeCompare(&lhs.duration, &rhs) < 1;
    }
    else
    {
      v15 = 0;
    }
    v16 = 1;
  }
  v17 = a1 + 4;
  if ((*((_DWORD *)a1 + 11) & 0x1D) == 1
    && (*(_OWORD *)&lhs.duration.value = *v17,
        lhs.duration.epoch = a1[6],
        rhs = v36,
        CMTimeCompare(&lhs.duration, &rhs) < 0))
  {
    v18 = 0;
    if (v15)
      goto LABEL_20;
  }
  else if ((*((_DWORD *)a1 + 5) & 0x1D) == 1
         && (lhs.duration = v36, *(_OWORD *)&rhs.value = *v14, rhs.epoch = a1[3], CMTimeCompare(&lhs.duration, &rhs) < 1)
         || (v18 = 1, v15))
  {
LABEL_20:
    v19 = (const __CFString *)*MEMORY[0x1E0CA2728];
    lhs.duration = v35;
    audioMentorSetAttachmentAsFigTimeDictionary(target, v19, &lhs.duration);
    lhs.duration = v37;
    *(_OWORD *)&rhs.value = *v14;
    rhs.epoch = a1[3];
    if (CMTimeCompare(&lhs.duration, &rhs) <= 0)
    {
      *(_OWORD *)&lhs.duration.value = *v14;
      lhs.duration.epoch = a1[3];
      CMSampleBufferSetOutputPresentationTimeStamp(target, &lhs.duration);
    }
    goto LABEL_28;
  }
  if ((v16 & 1) == 0)
  {
    v20 = (const __CFString *)*MEMORY[0x1E0CA2728];
    *(_OWORD *)&lhs.duration.value = *v14;
    lhs.duration.epoch = a1[3];
    rhs = v37;
    CMTimeSubtract(&v25, &lhs.duration, &rhs);
    audioMentorSetAttachmentAsFigTimeDictionary(target, v20, &v25);
  }
  if ((v18 & 1) == 0)
  {
    v21 = (const __CFString *)*MEMORY[0x1E0CA2720];
    lhs.duration = v36;
    *(_OWORD *)&rhs.value = *v17;
    rhs.epoch = a1[6];
    CMTimeSubtract(&v24, &lhs.duration, &rhs);
    audioMentorSetAttachmentAsFigTimeDictionary(target, v21, &v24);
  }
LABEL_28:
  if (*((_BYTE *)a1 + 81))
    CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E0CA26E8], (CFTypeRef)*MEMORY[0x1E0C9AE50], 1u);
  CMSampleBufferGetOutputPresentationTimeStamp(&v32, target);
  CMSampleBufferGetOutputDuration(&v31, target);
  rhs = v32;
  presentationTimeStamp = v31;
  CMTimeAdd(&lhs.duration, &rhs, &presentationTimeStamp);
  *(_OWORD *)(v6 + 324) = *(_OWORD *)&lhs.duration.value;
  *(_QWORD *)(v6 + 340) = lhs.duration.epoch;
  MEMORY[0x19402EEEC](*(_QWORD *)(v6 + 72));
  v22 = *(void (**)(_QWORD, uint64_t, opaqueCMSampleBuffer *))(v6 + 56);
  if (v22)
    v22(*(_QWORD *)(v6 + 64), a2, target);
  MEMORY[0x19402EF04](*(_QWORD *)(v6 + 72));
  return 0;
}

void audioMentorSetAttachmentAsFigTimeDictionary(const void *a1, const __CFString *a2, CMTime *a3)
{
  const __CFAllocator *v5;
  CFDictionaryRef v6;
  CFDictionaryRef v7;
  CMTime v8;

  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v8 = *a3;
  v6 = CMTimeCopyAsDictionary(&v8, v5);
  if (v6)
  {
    v7 = v6;
    CMSetAttachment(a1, a2, v6, 1u);
    CFRelease(v7);
  }
}

uint64_t editMentorRemapSampleBufferTiming(uint64_t a1, const void *a2, opaqueCMSampleBuffer *a3)
{
  CMTimeEpoch v5;
  CMTimeEpoch v6;
  uint64_t v7;
  CMTimeEpoch v8;
  CMTimeEpoch v9;
  CMTimeEpoch v10;
  CMTimeEpoch epoch;
  CFTypeRef v12;
  CFTypeRef v13;
  CMTimeFlags flags;
  const __CFNumber *v15;
  const __CFNumber *v16;
  const __CFString *v17;
  const __CFString *v18;
  CMTimeRange *p_outputPresentationTimeStamp;
  const __CFArray *SampleAttachmentsArray;
  const __CFArray *v21;
  CFIndex Count;
  CFIndex v23;
  CFIndex v24;
  const void *v25;
  const void *v26;
  __CFDictionary *ValueAtIndex;
  uint64_t v28;
  const __CFString *v29;
  const __CFString *v30;
  _BOOL4 v31;
  char v32;
  double Seconds;
  Float64 v34;
  const __CFString *v35;
  double v36;
  const __CFNumber *v37;
  const __CFNumber *v38;
  CFTypeID v39;
  CFNumberRef v40;
  CFNumberRef v41;
  uint64_t (*v42)(_QWORD, CFTypeRef, opaqueCMSampleBuffer *);
  CFTypeID TypeID;
  CMTimeEpoch v45;
  CMTimeScale v46;
  CMTimeValue v47;
  CMTimeFlags v48;
  int v49;
  CMTimeEpoch v50;
  CMTimeEpoch v51;
  int32_t v52;
  CFTypeRef cf;
  CMTime v54;
  __int128 v55;
  CMTime v56;
  CMTime v57;
  _BYTE time1[56];
  uint64_t v59;
  CMTimeEpoch v60;
  CMTime v61;
  CMTime v62;
  CMTime v63;
  CMTime v64;
  CMTime v65;
  CMTime v66;
  CMTime v67;
  CMTime v68;
  __int128 v69;
  CMTime v70;
  __int128 v71;
  CMTime v72;
  __int128 v73;
  CMTime v74;
  CMTime outputPresentationTimeStamp;
  double valuePtr;
  CMTime v77;
  CMTime v78;
  CMTimeRange v79;
  CMTimeRange rhs;
  CMTimeRange lhs;
  CMTime v82;
  __int128 v83;
  __int128 v84;
  _BYTE v85[24];
  __int128 v86;
  _BYTE v87[24];
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (editMentorChildOrderRefIsCurrent_RetainParentOrder(a1, a2, &cf, 0, 0))
  {
    v49 = *(unsigned __int8 *)(a1 + 240);
    v68 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    v67 = v68;
    v66 = v68;
    v65 = v68;
    v64 = v68;
    v63 = v68;
    v62 = v68;
    CMSampleBufferGetOutputPresentationTimeStamp((CMTime *)time1, a3);
    v69 = *(_OWORD *)time1;
    v5 = *(_QWORD *)&time1[16];
    CMSampleBufferGetOutputDuration(&v68, a3);
    *(_OWORD *)&lhs.start.value = v69;
    lhs.start.epoch = v5;
    rhs.start = v68;
    CMTimeAdd((CMTime *)time1, &lhs.start, &rhs.start);
    *(_OWORD *)&rhs.start.value = *(_OWORD *)time1;
    v6 = *(_QWORD *)&time1[16];
    *(_OWORD *)&lhs.start.value = v69;
    lhs.start.epoch = v5;
    editMentorSelectEditForTimeInConsolidatedEdit(a1, (uint64_t)&lhs, 1, time1);
    v73 = *(_OWORD *)time1;
    v86 = *(_OWORD *)&time1[24];
    *(_OWORD *)v87 = *(_OWORD *)&time1[40];
    v7 = *(_QWORD *)&time1[16];
    v8 = v60;
    *(_QWORD *)&v87[16] = v59;
    v72 = v61;
    rhs.start.epoch = v6;
    editMentorSelectEditForTimeInConsolidatedEdit(a1, (uint64_t)&rhs, 1, time1);
    v71 = *(_OWORD *)time1;
    v84 = *(_OWORD *)&time1[24];
    *(_OWORD *)v85 = *(_OWORD *)&time1[40];
    *(_QWORD *)&v85[16] = v59;
    v70 = v61;
    if (v7 == v5)
      v9 = v8;
    else
      v9 = v5;
    if (*(_QWORD *)&time1[16] == v6)
      v10 = v60;
    else
      v10 = v6;
    *(_OWORD *)time1 = v73;
    *(_QWORD *)&time1[16] = v5;
    *(_OWORD *)&lhs.start.value = *(_OWORD *)&v87[8];
    v50 = v9;
    lhs.start.epoch = v9;
    v52 = CMTimeCompare((CMTime *)time1, &lhs.start);
    v55 = v73;
    *(_OWORD *)&v74.value = v86;
    v74.epoch = *(_QWORD *)v87;
    *(_OWORD *)time1 = v71;
    *(_OWORD *)&time1[24] = v84;
    *(_QWORD *)&time1[16] = v6;
    *(_QWORD *)&time1[40] = *(_QWORD *)v85;
    CMTimeRangeGetEnd(&v57, (CMTimeRange *)time1);
    *(_OWORD *)time1 = v73;
    *(_QWORD *)&time1[16] = v5;
    CMTimeSubtract(&v74, &v57, (CMTime *)time1);
    *(_OWORD *)time1 = *(_OWORD *)&v85[8];
    *(CMTime *)&time1[24] = v70;
    *(_QWORD *)&time1[16] = v10;
    CMTimeRangeGetEnd(&v56, (CMTimeRange *)time1);
    *(_OWORD *)&lhs.start.value = *(_OWORD *)&v85[8];
    v51 = v10;
    lhs.start.epoch = v10;
    CMTimeSubtract((CMTime *)time1, &v56, &lhs.start);
    v54 = v74;
    memset(time1, 0, 48);
    CMSampleBufferGetOutputPresentationTimeStamp(&lhs.start, a3);
    v83 = *(_OWORD *)&lhs.start.value;
    epoch = lhs.start.epoch;
    CMSampleBufferGetOutputDuration(&v82, a3);
    v12 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
    v13 = CMGetAttachment(a3, (CFStringRef)*MEMORY[0x1E0CA26E8], 0);
    if (v12 == v13)
    {
      *(_OWORD *)&rhs.start.value = v83;
      rhs.start.epoch = epoch;
      v79.start = v82;
      CMTimeSubtract(&lhs.start, &rhs.start, &v79.start);
      v83 = *(_OWORD *)&lhs.start.value;
      epoch = lhs.start.epoch;
    }
    *(_OWORD *)&lhs.start.value = v83;
    lhs.start.epoch = epoch;
    rhs.start = v82;
    CMTimeRangeMake((CMTimeRange *)time1, &lhs.start, &rhs.start);
    rhs.duration = v54;
    rhs.start.epoch = epoch;
    v79 = *(CMTimeRange *)time1;
    *(_OWORD *)&rhs.start.value = v55;
    CMTimeRangeGetIntersection(&lhs, &rhs, &v79);
    value = lhs.start.value;
    flags = lhs.start.flags;
    timescale = lhs.start.timescale;
    if ((lhs.start.flags & 1) != 0)
    {
      v48 = lhs.duration.flags;
      if ((lhs.duration.flags & 1) != 0 && !lhs.duration.epoch)
      {
        v47 = lhs.duration.value;
        if ((lhs.duration.value & 0x8000000000000000) == 0)
        {
          v45 = lhs.start.epoch;
          v46 = lhs.duration.timescale;
          lhs.duration = v54;
          lhs.start.epoch = epoch;
          rhs = *(CMTimeRange *)time1;
          *(_OWORD *)&lhs.start.value = v55;
          if (!CMTimeRangeContainsTimeRange(&lhs, &rhs))
          {
            lhs.start.value = v47;
            lhs.start.timescale = v46;
            lhs.start.flags = v48;
            lhs.start.epoch = 0;
            *(_OWORD *)&rhs.start.value = *MEMORY[0x1E0CA2E68];
            rhs.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
            if (CMTimeCompare(&lhs.start, &rhs.start))
            {
              memset(&rhs, 0, 24);
              lhs.start.value = value;
              lhs.start.timescale = timescale;
              lhs.start.flags = flags;
              lhs.start.epoch = v45;
              *(_OWORD *)&v79.start.value = *(_OWORD *)time1;
              v79.start.epoch = *(_QWORD *)&time1[16];
              CMTimeSubtract(&rhs.start, &lhs.start, &v79.start);
              memset(&v79, 0, 24);
              lhs = *(CMTimeRange *)time1;
              CMTimeRangeGetEnd(&v78, &lhs);
              lhs.start.value = value;
              lhs.start.timescale = timescale;
              lhs.start.flags = flags;
              lhs.start.epoch = v45;
              lhs.duration.value = v47;
              lhs.duration.timescale = v46;
              lhs.duration.flags = v48;
              lhs.duration.epoch = 0;
              CMTimeRangeGetEnd(&v77, &lhs);
              CMTimeSubtract(&v79.start, &v78, &v77);
              valuePtr = 1.0;
              v15 = (const __CFNumber *)CMGetAttachment(a3, (CFStringRef)*MEMORY[0x1E0CA2708], 0);
              if (v15)
              {
                v16 = v15;
                TypeID = CFNumberGetTypeID();
                if (TypeID == CFGetTypeID(v16))
                {
                  CFNumberGetValue(v16, kCFNumberDoubleType, &valuePtr);
                  rhs.start.value = (uint64_t)(valuePtr * (double)rhs.start.value);
                  v79.start.value = (uint64_t)(valuePtr * (double)v79.start.value);
                }
              }
              if (v12 == v13)
              {
                if (rhs.start.value >= 1)
                {
                  v29 = (const __CFString *)*MEMORY[0x1E0CA2720];
                  *(_OWORD *)&lhs.start.value = *(_OWORD *)&rhs.start.value;
                  lhs.start.epoch = rhs.start.epoch;
                  editMentorAddToTrimAttachment(a3, &lhs.start, v29);
                }
                if (v79.start.value >= 1)
                {
                  v30 = (const __CFString *)*MEMORY[0x1E0CA2728];
                  *(_OWORD *)&lhs.start.value = *(_OWORD *)&v79.start.value;
                  lhs.start.epoch = v79.start.epoch;
                  editMentorAddToTrimAttachment(a3, &lhs.start, v30);
                }
                lhs.start.value = value;
                lhs.start.timescale = timescale;
                lhs.start.flags = flags;
                lhs.start.epoch = v45;
                lhs.duration.value = v47;
                lhs.duration.timescale = v46;
                lhs.duration.flags = v48;
                lhs.duration.epoch = 0;
                CMTimeRangeGetEnd(&outputPresentationTimeStamp, &lhs);
                p_outputPresentationTimeStamp = (CMTimeRange *)&outputPresentationTimeStamp;
              }
              else
              {
                if (rhs.start.value >= 1)
                {
                  v17 = (const __CFString *)*MEMORY[0x1E0CA2728];
                  *(_OWORD *)&lhs.start.value = *(_OWORD *)&rhs.start.value;
                  lhs.start.epoch = rhs.start.epoch;
                  editMentorAddToTrimAttachment(a3, &lhs.start, v17);
                }
                if (v79.start.value >= 1)
                {
                  v18 = (const __CFString *)*MEMORY[0x1E0CA2720];
                  *(_OWORD *)&lhs.start.value = *(_OWORD *)&v79.start.value;
                  lhs.start.epoch = v79.start.epoch;
                  editMentorAddToTrimAttachment(a3, &lhs.start, v18);
                }
                lhs.start.value = value;
                lhs.start.timescale = timescale;
                lhs.start.flags = flags;
                lhs.start.epoch = v45;
                p_outputPresentationTimeStamp = &lhs;
              }
              CMSampleBufferSetOutputPresentationTimeStamp(a3, &p_outputPresentationTimeStamp->start);
            }
          }
        }
      }
    }
    CMSampleBufferGetOutputPresentationTimeStamp(&v67, a3);
    CMSampleBufferGetOutputDuration(&v66, a3);
    *(CMTime *)time1 = v67;
    lhs.start = v66;
    CMTimeAdd(&v65, (CMTime *)time1, &lhs.start);
    v64 = v67;
    rhs.start = v67;
    *(_OWORD *)time1 = v73;
    *(_OWORD *)&time1[24] = v86;
    *(_QWORD *)&time1[16] = v5;
    *(_QWORD *)&time1[40] = *(_QWORD *)v87;
    *(_OWORD *)&lhs.start.value = *(_OWORD *)&v87[8];
    lhs.duration = v72;
    lhs.start.epoch = v50;
    editMentorMapTimeFromRangeToRange(&rhs.start, (uint64_t)time1, (uint64_t)&lhs, &v64);
    v62 = v65;
    rhs.start = v65;
    *(_OWORD *)time1 = v71;
    *(_OWORD *)&time1[24] = v84;
    *(_QWORD *)&time1[16] = v6;
    *(_QWORD *)&time1[40] = *(_QWORD *)v85;
    *(_OWORD *)&lhs.start.value = *(_OWORD *)&v85[8];
    lhs.duration = v70;
    lhs.start.epoch = v51;
    editMentorMapTimeFromRangeToRange(&rhs.start, (uint64_t)time1, (uint64_t)&lhs, &v62);
    *(CMTime *)time1 = v62;
    lhs.start = v64;
    CMTimeSubtract(&v63, (CMTime *)time1, &lhs.start);
    *(CMTime *)time1 = v63;
    *(_OWORD *)&lhs.start.value = *MEMORY[0x1E0CA2E68];
    lhs.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    if (CMTimeCompare((CMTime *)time1, &lhs.start))
    {
      *(CMTime *)time1 = v63;
      lhs.start = v66;
      v31 = CMTimeCompare((CMTime *)time1, &lhs.start) != 0;
    }
    else
    {
      v31 = 0;
    }
    if (v52 || v31)
    {
      v32 = !v31;
      if (v49)
        v32 = 1;
      if ((v32 & 1) == 0)
      {
        rhs.start.value = 0x3FF0000000000000;
        *(CMTime *)time1 = v63;
        lhs.start = v66;
        Seconds = CMTimeGetSeconds((CMTime *)time1);
        *(_OWORD *)time1 = *(_OWORD *)&lhs.start.value;
        *(_QWORD *)&time1[16] = lhs.start.epoch;
        v34 = CMTimeGetSeconds((CMTime *)time1);
        v35 = (const __CFString *)*MEMORY[0x1E0CA2708];
        v36 = Seconds / v34;
        v37 = (const __CFNumber *)CMGetAttachment(a3, (CFStringRef)*MEMORY[0x1E0CA2708], 0);
        if (v37)
        {
          v38 = v37;
          v39 = CFGetTypeID(v37);
          if (v39 == CFNumberGetTypeID())
            CFNumberGetValue(v38, kCFNumberDoubleType, &rhs);
        }
        *(double *)&rhs.start.value = *(double *)&rhs.start.value / v36;
        v40 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, &rhs);
        if (v40)
        {
          v41 = v40;
          CMSetAttachment(a3, v35, v40, 1u);
          CFRelease(v41);
        }
      }
      *(CMTime *)time1 = v64;
      CMSampleBufferSetOutputPresentationTimeStamp(a3, (CMTime *)time1);
    }
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 272));
    v42 = *(uint64_t (**)(_QWORD, CFTypeRef, opaqueCMSampleBuffer *))(a1 + 248);
    if (v42)
      v28 = v42(*(_QWORD *)(a1 + 264), cf, a3);
    else
      v28 = 0;
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 272));
  }
  else
  {
    SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a3, 1u);
    if (SampleAttachmentsArray)
    {
      v21 = SampleAttachmentsArray;
      Count = CFArrayGetCount(SampleAttachmentsArray);
      if (Count >= 1)
      {
        v23 = Count;
        v24 = 0;
        v25 = (const void *)*MEMORY[0x1E0CA25D8];
        v26 = (const void *)*MEMORY[0x1E0C9AE50];
        do
        {
          ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex(v21, v24);
          CFDictionarySetValue(ValueAtIndex, v25, v26);
          ++v24;
        }
        while (v23 != v24);
      }
    }
    v28 = 0;
  }
  if (cf)
    CFRelease(cf);
  return v28;
}

uint64_t editMentorChildOrderRefIsCurrent_RetainParentOrder(uint64_t a1, const void *a2, CFTypeRef *a3, _DWORD *a4, void (*a5)(uint64_t))
{
  const void *v10;
  const void *v11;
  uint64_t v12;
  char v13;

  *a3 = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 312));
  if (!a2 || (v10 = *(const void **)(a1 + 328)) == 0 || !CFEqual(a2, v10))
  {
    v12 = 0;
    if (!a4)
      goto LABEL_10;
    goto LABEL_9;
  }
  v11 = *(const void **)(a1 + 568);
  if (v11)
    *a3 = CFRetain(v11);
  v12 = 1;
  if (a4)
LABEL_9:
    *a4 = *(_DWORD *)(a1 + 320);
LABEL_10:
  v13 = v12 ^ 1;
  if (!a5)
    v13 = 1;
  if ((v13 & 1) == 0)
    a5(a1);
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 312));
  return v12;
}

uint64_t sbcbq_postNotification(uint64_t a1, const void *a2, const void *a3)
{
  _QWORD *DerivedStorage;
  const void *v7;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  if (*((_BYTE *)DerivedStorage + 8))
  {
    MEMORY[0x19402EF04](*DerivedStorage);
    CMNotificationCenterGetDefaultLocalCenter();
    return CMNotificationCenterPostNotification();
  }
  else
  {
    CFArrayAppendValue((CFMutableArrayRef)DerivedStorage[18], a2);
    if (a3)
      v7 = a3;
    else
      v7 = (const void *)*MEMORY[0x1E0C9B0D0];
    CFArrayAppendValue((CFMutableArrayRef)DerivedStorage[18], v7);
    MEMORY[0x19402EF04](*DerivedStorage);
    return 0;
  }
}

uint64_t fpm_UpdateTimerProc()
{
  __CFData *Owner;
  UInt8 *MutableBytePtr;
  void *v2;

  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    Owner = (__CFData *)FigRetainProxyGetOwner();
    MutableBytePtr = CFDataGetMutableBytePtr(Owner);
    MEMORY[0x19402EA0C](*((_QWORD *)MutableBytePtr + 6));
    os_retain(*((void **)MutableBytePtr + 1070));
    voucher_adopt();
    fpm_updateCacheAndNotify((uint64_t)MutableBytePtr);
    v2 = (void *)voucher_adopt();
    os_release(v2);
    MEMORY[0x19402EA24](*((_QWORD *)MutableBytePtr + 6));
  }
  return FigRetainProxyUnlockMutex();
}

uint64_t itemasync_CopyProperty(const void *a1, const void *a2, const void *a3, uint64_t *a4)
{
  _DWORD *DerivedStorage;
  _DWORD *v9;
  uint64_t v10;
  const void *v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v16;
  CFTypeRef v17;
  uint64_t v18;
  CFTypeRef v19;
  int v20;
  int v21;
  const void *v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  v27 = 0;
  if (!a4)
    return FigSignalErrorAt();
  v9 = DerivedStorage;
  *a4 = 0;
  if (*DerivedStorage || !a2)
    return FigSignalErrorAt();
  v10 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v10)
  {
    v11 = (const void *)v10;
    v12 = (_DWORD *)CMBaseObjectGetDerivedStorage();
    if (*v12)
    {
      v14 = FigSignalErrorAt();
LABEL_16:
      v18 = 0;
LABEL_32:
      fpa_releaseCommand((_QWORD *)v18);
      CFRelease(v11);
      return v14;
    }
    v13 = v12;
    if (CFEqual(a2, CFSTR("Status")))
    {
      MEMORY[0x19402EEEC](*((_QWORD *)v13 + 17));
      if (*((_QWORD *)v9 + 2) || v9[2])
      {
        v14 = 0;
        *a4 = FigCFNumberCreateSInt32();
      }
      else
      {
        v14 = 4294954513;
      }
      MEMORY[0x19402EF04](*((_QWORD *)v13 + 17));
      goto LABEL_16;
    }
    v16 = playerasync_createCommand(v11, 25, a1, &v27);
    if ((_DWORD)v16)
    {
      v14 = v16;
      v18 = v27;
      goto LABEL_32;
    }
    v17 = CFRetain(a2);
    v18 = v27;
    *(_QWORD *)(v27 + 32) = v17;
    if (a3)
      v19 = CFRetain(a3);
    else
      v19 = 0;
    *(_QWORD *)(v18 + 40) = v19;
    *(_QWORD *)(v18 + 48) = a4;
    v20 = *((unsigned __int8 *)v13 + 4);
    v21 = CFEqual(a2, CFSTR("PlayableTimeIntervals"));
    if (v20 && v21)
    {
      if (!*((_QWORD *)v9 + 2))
      {
        v14 = FigSignalErrorAt();
        goto LABEL_32;
      }
      v22 = v11;
      v23 = v18;
      v24 = 1;
    }
    else
    {
      v25 = CFEqual(a2, CFSTR("BasicsReadyForInspection"));
      if ((!v20 || !v25) && !CFEqual(a2, CFSTR("Timebase")))
      {
        playerasync_runSynchronousCommand((uint64_t)v11, (_DWORD *)v18);
        goto LABEL_31;
      }
      MEMORY[0x19402EEEC](*((_QWORD *)v13 + 17));
      while (!*((_QWORD *)v9 + 2) && !v9[2])
        FigConditionVariableWaitRelative();
      MEMORY[0x19402EF04](*((_QWORD *)v13 + 17));
      v22 = v11;
      v23 = v18;
      v24 = 0;
    }
    playerasync_runImmediateCommand(v22, v23, v24);
LABEL_31:
    v14 = *(unsigned int *)(v18 + 28);
    goto LABEL_32;
  }
  v26 = FigSignalErrorAt();
  fpa_releaseCommand(0);
  return v26;
}

uint64_t fpm_updateCache(uint64_t a1)
{
  int v2;
  _OWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t CMBaseObject;
  unsigned int (*v7)(uint64_t, _QWORD, uint64_t, const __CFBoolean **);
  int v8;
  CMTimeEpoch v9;
  int Duration;
  CMTimeEpoch v11;
  uint64_t result;
  uint64_t v13;
  double Seconds;
  double v15;
  void (*v16)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  OpaqueCMTimebase *v17;
  NSObject *v18;
  CMTimeEpoch v19;
  int Value;
  CMTimeEpoch epoch;
  int32_t v22;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v24;
  unsigned int v25;
  double v26;
  CMTimeValue v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, CMTime *);
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t, CMTime *);
  CMTimeValue v34;
  CMTime v35;
  CMTime time;
  CMTime rhs;
  CMTime v38;
  CMTimeValue v39;
  CMTimeValue v40;
  CMTime v41;
  char v42;
  const __CFBoolean *v43;
  CMTime v44;
  CMTime v45;
  CMTime v46;
  CMTime v47;
  CMTime lhs;
  double v49;
  CMTime time1;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  memset(&v46, 0, sizeof(v46));
  memset(&v47, 0, sizeof(v47));
  CMTimebaseGetTime(&v46, *(CMTimebaseRef *)(a1 + 24));
  v45 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E10];
  v44 = v45;
  v43 = 0;
  v42 = 1;
  v2 = *(_DWORD *)(a1 + 96);
  v40 = 0x7FFFFFFFFFFFFFFFLL;
  memset(&v41, 0, sizeof(v41));
  v3 = (_OWORD *)(a1 + 240);
  v38 = *(CMTime *)(a1 + 240);
  v39 = 0;
  v4 = *(unsigned __int8 *)(a1 + 313);
  *(_BYTE *)(a1 + 313) = 0;
  v5 = *MEMORY[0x1E0C9AE00];
  CMBaseObject = CMByteStreamGetCMBaseObject();
  v7 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, const __CFBoolean **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
  if (v7
    && !v7(CMBaseObject, *MEMORY[0x1E0CA2078], v5, &v43)
    && (Value = CFBooleanGetValue(v43), CFRelease(v43), Value))
  {
    v47 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    epoch = v47.epoch;
    *(_OWORD *)(a1 + 216) = *(_OWORD *)&v47.value;
    *(_QWORD *)(a1 + 232) = epoch;
    v8 = 1;
  }
  else
  {
    v8 = 0;
    if (v4)
    {
      *(_OWORD *)&v47.value = *(_OWORD *)(a1 + 216);
      v9 = *(_QWORD *)(a1 + 232);
    }
    else
    {
      *(_OWORD *)&v47.value = *v3;
      v9 = *(_QWORD *)(a1 + 256);
    }
    v47.epoch = v9;
  }
  Duration = FigFormatReaderUtilityGetDuration(*(_QWORD *)(a1 + 8), v8, &v44);
  if (v8 && !Duration && (v44.flags & 0x1D) == 1)
  {
    *v3 = *(_OWORD *)&v44.value;
    v11 = v44.epoch;
  }
  else
  {
    time1 = v47;
    result = fpm_getPlayableDurationFromTime(a1, &time1, (uint64_t)&v45, &v42, &v40, &v39);
    if ((_DWORD)result)
      return result;
    lhs = v47;
    rhs = v45;
    CMTimeAdd(&time1, &lhs, &rhs);
    *v3 = *(_OWORD *)&time1.value;
    v11 = time1.epoch;
  }
  *(_QWORD *)(a1 + 256) = v11;
  *(_QWORD *)(a1 + 192) = dispatch_time(0, 0);
  *(_DWORD *)(a1 + 184) = v2;
  if ((v44.flags & 0x1D) == 1)
  {
    *(_OWORD *)&time1.value = *v3;
    time1.epoch = *(_QWORD *)(a1 + 256);
    lhs = v44;
    if (CMTimeCompare(&time1, &lhs) >= 1)
    {
      *v3 = *(_OWORD *)&v44.value;
      *(_QWORD *)(a1 + 256) = v44.epoch;
    }
    *(_OWORD *)&lhs.value = *v3;
    lhs.epoch = *(_QWORD *)(a1 + 256);
    CMTimeConvertScale(&time1, &lhs, v44.timescale, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    *v3 = *(_OWORD *)&time1.value;
    *(_QWORD *)(a1 + 256) = time1.epoch;
  }
  v13 = *(_QWORD *)(a1 + 8568);
  *(_OWORD *)&time1.value = *v3;
  time1.epoch = *(_QWORD *)(a1 + 256);
  lhs = *(CMTime *)(a1 + 216);
  CMTimeSubtract(&time, &time1, &lhs);
  Seconds = CMTimeGetSeconds(&time);
  if (v13)
  {
    v15 = Seconds;
    v16 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 56);
    if (v16)
      v16(v13, CFSTR("playMonStats"), CFSTR("BDur"), (uint64_t)(v15 * 1000.0), 0);
  }
  if (*(_DWORD *)(a1 + 104) == 3
    || v42
    || (*(_OWORD *)&time1.value = *v3,
        time1.epoch = *(_QWORD *)(a1 + 256),
        lhs = v44,
        (CMTimeCompare(&time1, &lhs) & 0x80000000) == 0))
  {
    v17 = *(OpaqueCMTimebase **)(a1 + 24);
    v18 = *(NSObject **)(a1 + 304);
    *(_OWORD *)&time1.value = *MEMORY[0x1E0CA2E18];
    v19 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
LABEL_24:
    time1.epoch = v19;
    CMTimebaseSetTimerDispatchSourceNextFireTime(v17, v18, &time1, 0);
    goto LABEL_25;
  }
  CMTimeMake(&v35, 100, 1000);
  *(_OWORD *)&time1.value = *v3;
  time1.epoch = *(_QWORD *)(a1 + 256);
  CMTimeSubtract(&v41, &time1, &v35);
  time1 = v46;
  lhs = v41;
  v22 = CMTimeCompare(&time1, &lhs);
  v17 = *(OpaqueCMTimebase **)(a1 + 24);
  if (v22 < 0)
  {
    v18 = *(NSObject **)(a1 + 304);
    *(_OWORD *)&time1.value = *(_OWORD *)&v41.value;
    v19 = v41.epoch;
    goto LABEL_24;
  }
  if (CMTimebaseGetRate(v17) > 0.0)
  {
    *(_QWORD *)(a1 + 104) = 3;
    if (dword_1EE2A2A08)
    {
      LODWORD(rhs.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v24 = rhs.value;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
        v25 = v24;
      else
        v25 = v24 & 0xFFFFFFFE;
      if (v25)
      {
        v26 = *(float *)(a1 + 108);
        LODWORD(lhs.value) = 136315650;
        *(CMTimeValue *)((char *)&lhs.value + 4) = (CMTimeValue)"fpm_updateCache";
        LOWORD(lhs.flags) = 2048;
        *(_QWORD *)((char *)&lhs.flags + 2) = a1;
        HIWORD(lhs.epoch) = 2048;
        v49 = v26;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    FigRetainProxyRetain();
    CMNotificationCenterGetDefaultLocalCenter();
    FigDeferNotificationToDispatchQueue();
  }
LABEL_25:
  if (*(_BYTE *)(a1 + 312))
  {
    *(_BYTE *)(a1 + 312) = 0;
    fpm_ensureUpdatePrimed(a1);
  }
  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    CMByteStreamGetCMBaseObject();
    FigCRABSGetClassID();
    result = CMBaseObjectIsMemberOfClass();
    if ((_DWORD)result)
    {
      time1 = v38;
      *(_OWORD *)&lhs.value = *v3;
      lhs.epoch = *(_QWORD *)(a1 + 256);
      result = CMTimeCompare(&time1, &lhs);
      if ((_DWORD)result)
        return 0;
      if (*(_DWORD *)(a1 + 104) != 1)
      {
        v27 = v40;
        if (v40 != 0x7FFFFFFFFFFFFFFFLL)
        {
          v28 = *(_QWORD *)(a1 + 264);
          if (v40 == v28)
            return 0;
          if (v28 != 0x7FFFFFFFFFFFFFFFLL)
          {
            v29 = *(_QWORD *)(a1 + 272);
            time1.value = *(_QWORD *)(a1 + 264);
            *(_QWORD *)&time1.timescale = v29;
            v30 = *(_QWORD *)(a1 + 16);
            v31 = *(void (**)(uint64_t, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 16);
            if (v31)
              v31(v30, 1, &time1);
            v27 = v40;
          }
          time1.value = v27;
          *(_QWORD *)&time1.timescale = v39;
          v32 = *(_QWORD *)(a1 + 16);
          v33 = *(void (**)(uint64_t, uint64_t, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24)
                                                                           + 8);
          if (v33)
            v33(v32, 16, 1, &time1);
          result = 0;
          v34 = v39;
          *(_QWORD *)(a1 + 264) = v40;
          *(_QWORD *)(a1 + 272) = v34;
        }
      }
    }
  }
  return result;
}

uint64_t sbcbq_sendSampleBuffer(uint64_t a1, const void *a2)
{
  _QWORD *DerivedStorage;
  uint64_t v4;
  uint64_t v5;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  v4 = 15;
  if (!*((_BYTE *)DerivedStorage + 8))
    v4 = 16;
  v5 = CMBufferQueueEnqueue((CMBufferQueueRef)DerivedStorage[v4], a2);
  MEMORY[0x19402EF04](*DerivedStorage);
  return v5;
}

void audioMentorThreadFinishPreroll(uint64_t a1, uint64_t a2, const void *a3)
{
  __CFDictionary *v4;
  __CFDictionary *v5;

  if ((*(_DWORD *)(a1 + 264) | 2) == 3)
  {
    v4 = FigMentorPrerollCompletePayloadCreate(a3);
    v5 = v4;
    if (*(_BYTE *)a1)
    {
      if (!v4)
        goto LABEL_5;
    }
    else
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      if (!v5)
      {
LABEL_5:
        *(_DWORD *)(a1 + 264) = 0;
        if (*MEMORY[0x1E0CA1FC0] == 1)
          kdebug_trace();
        return;
      }
    }
    CFRelease(v5);
    goto LABEL_5;
  }
}

__CFDictionary *FigMentorPrerollCompletePayloadCreate(const void *a1)
{
  __CFDictionary *Mutable;
  __CFDictionary *v3;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v3 = Mutable;
  if (a1)
    CFDictionarySetValue(Mutable, CFSTR("MentorPrerollComplete_Order"), a1);
  FigCFDictionarySetInt32();
  return v3;
}

void editMentorChildMentorPrerollComplete(int a1, uint64_t a2, int a3, int a4, CFDictionaryRef theDict)
{
  const void *Value;
  int IsCurrent_RetainParentOrder;
  CFTypeRef v8;
  __CFDictionary *v9;
  CFTypeRef cf;
  int v11;

  v11 = 0;
  cf = 0;
  if (theDict)
  {
    Value = CFDictionaryGetValue(theDict, CFSTR("MentorPrerollComplete_Order"));
    FigCFDictionaryGetInt32IfPresent();
    if ((v11 - 1) <= 1)
    {
      IsCurrent_RetainParentOrder = editMentorChildOrderRefIsCurrent_RetainParentOrder(a2, Value, &cf, 0, editMentorAdjustSettingsFollowingChildPrerollComplete);
      v8 = cf;
      if (IsCurrent_RetainParentOrder)
      {
        v9 = FigMentorPrerollCompletePayloadCreate(cf);
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        if (v9)
          CFRelease(v9);
      }
      if (v8)
        CFRelease(v8);
    }
  }
}

void editMentorAdjustSettingsFollowingChildPrerollComplete(uint64_t a1)
{
  __CFDictionary *v1;

  *(_BYTE *)(a1 + 680) = 0;
  v1 = *(__CFDictionary **)(a1 + 608);
  if (v1)
    CFDictionarySetValue(v1, CFSTR("PrerollPolicy"), CFSTR("NoPreroll"));
}

uint64_t FigSampleCursorCompareInDecodeOrder(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v4 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (a2)
    v5 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  else
    v5 = 0;
  if (v4 == v5 && (v7 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 32)) != 0)
    return v7(a1, a2);
  else
    return 0;
}

void editMentorForwardNotificationFromChildMentor(int a1, uint64_t a2, uint64_t a3, int a4, CFDictionaryRef theDict)
{
  const __CFDictionary *v5;
  const void *Value;
  const void *v9;
  int IsCurrent_RetainParentOrder;
  CFTypeRef v11;
  __CFDictionary *v12;
  CFTypeRef cf;

  v5 = theDict;
  cf = 0;
  if (theDict)
  {
    Value = CFDictionaryGetValue(theDict, CFSTR("Mentor_Order"));
    FigCFDictionaryGetInt32IfPresent();
    v9 = CFDictionaryGetValue(v5, CFSTR("Mentor_NotificationThatWasRequestedButDropped"));
    LODWORD(v5) = CFDictionaryGetValue(v5, CFSTR("Mentor_SamplesWereGenerated")) == (const void *)*MEMORY[0x1E0C9AE50];
  }
  else
  {
    Value = 0;
    v9 = 0;
  }
  IsCurrent_RetainParentOrder = editMentorChildOrderRefIsCurrent_RetainParentOrder(a2, Value, &cf, 0, 0);
  v11 = cf;
  if (IsCurrent_RetainParentOrder)
  {
    v12 = FigMentorNotificationPayloadCreate(a3, cf, 0, (int)v5, v9, 0);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if (v12)
      CFRelease(v12);
  }
  if (v11)
    CFRelease(v11);
}

uint64_t FigCachedFileByteStreamGetAvailableLengthAtOffset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
    return FigSignalErrorAt();
  v6 = *(_QWORD *)(DerivedStorage + 8);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v7)
    return v7(v6, a2, a3);
  else
    return 4294954514;
}

uint64_t itemfig_PlayableRangeChanged(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage;
  const void *Value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  if (a5)
    Value = CFDictionaryGetValue(a5, CFSTR("FPM_IsFilling"));
  else
    Value = (const void *)*MEMORY[0x1E0C9AE40];
  if ((const void *)*MEMORY[0x1E0C9AE50] == Value)
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 1400));
    *(_DWORD *)(DerivedStorage + 1408) = 0;
    MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 1400));
  }
  CFRetain(a2);
  return FigDeferNotificationToDispatchQueue();
}

uint64_t itemfig_LikelyToKeepUp(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  BOOL v4;
  const char *v5;
  char __dst[8];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 1400));
  if (*(_DWORD *)(DerivedStorage + 1424))
    v4 = *MEMORY[0x1E0CA1FC0] == 1;
  else
    v4 = 0;
  if (v4)
  {
    if (a2)
      v5 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
    else
      v5 = "";
    strncpy(__dst, v5, 8uLL);
    kdebug_trace();
  }
  *(_DWORD *)(DerivedStorage + 1424) = 0;
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 1400));
  CFRetain(a2);
  return FigDeferNotificationToDispatchQueue();
}

void itemfig_PrerollComplete(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  const void *Value;
  uint64_t DerivedStorage;
  int *p_valuePtr;
  const __CFAllocator *v9;
  CFDictionaryRef v10;
  int valuePtr;
  void *values;

  CMBaseObjectGetDerivedStorage();
  values = 0;
  if (!a5)
    goto LABEL_7;
  Value = CFDictionaryGetValue(a5, CFSTR("PrerollToken"));
  valuePtr = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 504));
  if (*(const void **)(DerivedStorage + 512) == Value)
  {
    p_valuePtr = (int *)(DerivedStorage + 540);
    valuePtr = *(_DWORD *)(DerivedStorage + 540);
  }
  else
  {
    p_valuePtr = &valuePtr;
  }
  *p_valuePtr = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 504));
  if (valuePtr)
  {
    v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
    v10 = CFDictionaryCreate(v9, (const void **)kFigPlayerParameter_PrerollID, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  }
  else
  {
LABEL_7:
    v10 = 0;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (values)
    CFRelease(values);
  if (v10)
    CFRelease(v10);
}

uint64_t bossStartTimebaseAndAudioContext(uint64_t a1, __int128 *a2, CMTime *a3, float a4, float a5)
{
  uint64_t v7;
  CMTime v9;
  __int128 v10;
  uint64_t v11;

  v10 = *a2;
  v11 = *((_QWORD *)a2 + 2);
  v9 = *a3;
  v7 = bossSetPossiblyOutsourcedTimebaseRate(a1, (uint64_t)&v10, &v9, a4, a5);
  if (!(_DWORD)v7)
  {
    bossScheduleReachedEndCallbackForRate(a1, a4);
    bossScheduleAdvanceForOverlappedPlaybackCallbackForRate(a1, a4);
  }
  return v7;
}

uint64_t bossSetPossiblyOutsourcedTimebaseRate(uint64_t a1, uint64_t a2, CMTime *a3, float a4, float a5)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFNumberRef v10;
  _QWORD *ValueAtIndex;
  _QWORD *v12;
  CFIndex v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t FigBaseObject;
  void (*v17)(uint64_t, const __CFString *, CFNumberRef);
  uint64_t v18;
  float v19;
  uint64_t (*v20)(uint64_t, CMTime *, CMTime *, float, float);
  uint64_t v21;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  NSObject *v24;
  unsigned int value;
  unsigned int v26;
  uint64_t v27;
  CMClockOrTimebaseRef v28;
  const void *v29;
  CMClockRef HostTimeClock;
  OpaqueCMTimebase *v32;
  NSObject *v34;
  CMTime type;
  CMTime v36;
  float valuePtr;
  CMTime immediateSourceTime;
  uint64_t v39;
  __int16 v40;
  double v41;
  __int16 v42;
  double v43;
  __int16 v44;
  int v45;
  CMTime v46;
  CMTime __dst;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  valuePtr = a5;
  memset(&v36, 0, sizeof(v36));
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
  if (*(_BYTE *)(a1 + 840))
  {
    LODWORD(v46.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    strncpy((char *)&__dst, (const char *)(a1 + 841), 8uLL);
    kdebug_trace();
  }
  if ((*(_QWORD *)(a1 + 96) & 0x8000000000000000) != 0)
  {
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
    v46.value = *(_QWORD *)a2;
    flags = *(_DWORD *)(a2 + 12);
    v46.timescale = *(_DWORD *)(a2 + 8);
    epoch = *(_QWORD *)(a2 + 16);
    if (a4 != 0.0 && (flags & 0x1D) != 1 && (a3->flags & 0x1D) == 1)
    {
      CMTimebaseGetTime(&__dst, *(CMTimebaseRef *)(a1 + 112));
      v46.value = __dst.value;
      flags = __dst.flags;
      v46.timescale = __dst.timescale;
      epoch = __dst.epoch;
      if (dword_1EE2A2C50)
      {
        v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    if ((flags & 0x1D) != 1)
    {
      __dst = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
      immediateSourceTime = __dst;
      return CMTimebaseSetRateAndAnchorTimeWithFlags();
    }
    v28 = CMTimebaseCopySource(*(CMTimebaseRef *)(a1 + 112));
    v29 = v28;
    if ((a3->flags & 0x1D) == 1)
    {
      HostTimeClock = CMClockGetHostTimeClock();
      __dst = *a3;
      CMSyncConvertTime(&v36, &__dst, HostTimeClock, v29);
      if (!v29)
        goto LABEL_39;
    }
    else
    {
      CMSyncGetTime(&v36, v28);
      if (!v29)
      {
LABEL_39:
        v32 = *(OpaqueCMTimebase **)(a1 + 112);
        __dst.value = v46.value;
        __dst.timescale = v46.timescale;
        __dst.flags = flags;
        __dst.epoch = epoch;
        immediateSourceTime = v36;
        return CMTimebaseSetRateAndAnchorTime(v32, a4, &__dst, &immediateSourceTime);
      }
    }
    CFRelease(v29);
    goto LABEL_39;
  }
  v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat32Type, &valuePtr);
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), *(_QWORD *)(a1 + 96));
  v12 = ValueAtIndex;
  if (ValueAtIndex)
    CFRetain(ValueAtIndex);
  if (*(uint64_t *)(a1 + 80) >= 1)
  {
    v13 = 0;
    do
    {
      v14 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v13);
      v15 = v14[10];
      if (v15)
      {
        if (v13 != *(_QWORD *)(a1 + 96) && *((_DWORD *)v14 + 18) == 1936684398)
        {
          FigBaseObject = FigRenderPipelineGetFigBaseObject(v15);
          v17 = *(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 56);
          if (v17)
            v17(FigBaseObject, CFSTR("PipelineRate"), v10);
        }
      }
      ++v13;
    }
    while (*(_QWORD *)(a1 + 80) > v13);
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
  CFRelease(v10);
  v18 = v12[10];
  v19 = valuePtr;
  v46 = *(CMTime *)a2;
  *(_OWORD *)&type.value = *(_OWORD *)&a3->value;
  type.epoch = a3->epoch;
  v20 = *(uint64_t (**)(uint64_t, CMTime *, CMTime *, float, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 8);
  if (!v20)
  {
    v21 = 4294954514;
    goto LABEL_25;
  }
  __dst = v46;
  immediateSourceTime = type;
  v21 = v20(v18, &__dst, &immediateSourceTime, a4, v19);
  if ((_DWORD)v21)
  {
LABEL_25:
    LODWORD(v46.value) = 0;
    v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    value = v46.value;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      v26 = value;
    else
      v26 = value & 0xFFFFFFFE;
    if (v26)
    {
      v27 = v12[10];
      LODWORD(immediateSourceTime.value) = 136316418;
      *(CMTimeValue *)((char *)&immediateSourceTime.value + 4) = (CMTimeValue)"bossSetPossiblyOutsourcedTimebaseRate";
      LOWORD(immediateSourceTime.flags) = 2048;
      *(_QWORD *)((char *)&immediateSourceTime.flags + 2) = a1;
      HIWORD(immediateSourceTime.epoch) = 2048;
      v39 = v27;
      v40 = 2048;
      v41 = a4;
      v42 = 2048;
      v43 = valuePtr;
      v44 = 1024;
      v45 = v21;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFRelease(v12);
  return v21;
}

uint64_t FigAudioQueueSetParameter(uint64_t a1, AudioQueueParameterID a2, AudioQueueParameterValue a3)
{
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  uint64_t v9;
  char *ValueAtIndex;
  float *v11;
  double v12;
  double v13;

  if (a1)
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 24));
    if (*(_BYTE *)(a1 + 16))
    {
      v9 = FigSignalErrorAt();
    }
    else
    {
      Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 176));
      if (Count >= 1)
      {
        v7 = Count;
        v8 = 0;
        v9 = 0;
        while (1)
        {
          ValueAtIndex = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), v8);
          if (ValueAtIndex[689])
          {
LABEL_6:
            if (!(_DWORD)v9)
            {
              v9 = FigAudioQueueTimingShimSetParameter(*((_QWORD *)ValueAtIndex + 5), a2, a3);
              if ((_DWORD)v9)
                goto LABEL_39;
            }
          }
          else
          {
            switch(a2)
            {
              case 1u:
                if (!*(_BYTE *)(a1 + 248) || *((float *)ValueAtIndex + 173) <= 0.0)
                  goto LABEL_6;
                v11 = (float *)(ValueAtIndex + 696);
                goto LABEL_17;
              case 4u:
                *((AudioQueueParameterValue *)ValueAtIndex + 173) = a3;
                goto LABEL_19;
              case 5u:
                if (!*(_BYTE *)(a1 + 249) || *((float *)ValueAtIndex + 175) <= 0.0)
                  goto LABEL_6;
                v11 = (float *)(ValueAtIndex + 704);
LABEL_17:
                *v11 = a3;
                goto LABEL_20;
              case 6u:
                *((AudioQueueParameterValue *)ValueAtIndex + 175) = a3;
LABEL_19:
                if (a3 <= 0.0)
                  goto LABEL_6;
LABEL_20:
                v9 = 1;
                break;
              default:
                goto LABEL_6;
            }
          }
          if (v7 == ++v8)
            goto LABEL_24;
        }
      }
      v9 = 0;
LABEL_24:
      switch(a2)
      {
        case 1u:
          *(_BYTE *)(a1 + 248) = 0;
          break;
        case 4u:
          *(_BYTE *)(a1 + 248) = a3 > 0.0;
          break;
        case 5u:
          *(_BYTE *)(a1 + 249) = 0;
          break;
        case 6u:
          *(_BYTE *)(a1 + 249) = a3 > 0.0;
          break;
        default:
          break;
      }
      if ((_DWORD)v9)
      {
        v9 = 0;
      }
      else
      {
        switch(a2)
        {
          case 1u:
            v9 = 0;
            *(AudioQueueParameterValue *)(a1 + 200) = a3;
            *(_BYTE *)(a1 + 204) = 1;
            break;
          case 2u:
            v9 = 0;
            *(AudioQueueParameterValue *)(a1 + 232) = a3;
            *(_BYTE *)(a1 + 236) = 1;
            break;
          case 3u:
          case 4u:
          case 6u:
          case 7u:
          case 8u:
            break;
          case 5u:
            v9 = 0;
            *(AudioQueueParameterValue *)(a1 + 208) = a3;
            *(_BYTE *)(a1 + 212) = 1;
            break;
          case 9u:
            v9 = 0;
            *(AudioQueueParameterValue *)(a1 + 216) = a3;
            *(_BYTE *)(a1 + 220) = 1;
            break;
          default:
            if (a2 == 14)
            {
              v9 = 0;
              *(AudioQueueParameterValue *)(a1 + 224) = a3;
              *(_BYTE *)(a1 + 228) = 1;
            }
            else if (a2 == 22)
            {
              v9 = 0;
              *(AudioQueueParameterValue *)(a1 + 704) = a3;
              *(_BYTE *)(a1 + 708) = 1;
            }
            break;
        }
      }
    }
LABEL_39:
    MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
  }
  else
  {
    v9 = FigSignalErrorAt();
  }
  if (a2 == 2)
  {
    if ((_DWORD)v9 && (*(_BYTE *)(a1 + 48) & 4) != 0 && *(float *)(a1 + 272) != a3)
    {
      FigAudioQueuePause(a1);
      v12 = MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 24));
      v13 = faq_reset(a1, v12);
      MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24), v13);
    }
    *(AudioQueueParameterValue *)(a1 + 272) = a3;
  }
  return v9;
}

uint64_t FigAudioQueuePrime(uint64_t a1, CMTime *a2, uint64_t a3, CMTime *a4, float a5)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD *ValueAtIndex;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  CMTimeEpoch epoch;
  _BOOL8 v17;
  const void *v18;
  int v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  UInt32 v25;
  int32_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  CMTime type;
  CMTime v33;
  UInt32 value[9];
  CMTime time2;
  CMTime time1;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  value[0] = 0;
  if (a1 && (a2->flags & 0x1D) == 1)
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 24));
    if (*(_BYTE *)(a1 + 16))
      goto LABEL_57;
    if ((*(_DWORD *)(a1 + 532) & 0x1D) == 1)
    {
      if (dword_1EE2A2A48)
        goto LABEL_8;
    }
    else if (dword_1EE2A2A48)
    {
LABEL_8:
      value[1] = 0;
      LOBYTE(type.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (!*(_BYTE *)(a1 + 16))
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), 0);
      if (ValueAtIndex)
      {
        v12 = ValueAtIndex;
        if (ValueAtIndex[5])
        {
          *(float *)(a1 + 408) = a5;
          v13 = *(unsigned __int8 *)(a1 + 570);
          time2 = *a2;
          memset(&time1, 0, sizeof(time1));
          subaq_getCurrentQueueTime((uint64_t)ValueAtIndex, &time1);
          *(CMTime *)(a1 + 424) = time1;
          if (!v13 || (*(_DWORD *)(a1 + 460) & 1) == 0)
            *(CMTime *)(a1 + 448) = time1;
          v14 = MEMORY[0x1E0CA2E18];
          if ((*(_DWORD *)(a1 + 532) & 0x1D) == 1)
          {
            if (*(_BYTE *)(a1 + 304))
              *((_BYTE *)v12 + 545) = 1;
          }
          else
          {
            *(CMTime *)(a1 + 496) = time1;
            v15 = *(_OWORD *)&time2.value;
            *(_OWORD *)(a1 + 544) = *(_OWORD *)&time2.value;
            epoch = time2.epoch;
            *(_QWORD *)(a1 + 560) = time2.epoch;
            *(_QWORD *)(a1 + 536) = epoch;
            *(_OWORD *)(a1 + 520) = v15;
            *(_QWORD *)(a1 + 488) = *(_QWORD *)(v14 + 16);
            *(_OWORD *)(a1 + 472) = *(_OWORD *)v14;
            *((_BYTE *)v12 + 546) = 1;
            v12[69] = 0;
          }
          *(_BYTE *)(a1 + 297) = 1;
          v17 = (*(_BYTE *)(a1 + 48) & 4) != 0 && *(_BYTE *)(a1 + 304) && *(float *)(a1 + 272) != 1.0;
          faq_enqueueSourceData(a1, v17);
          if (*(_BYTE *)(a1 + 16))
            v18 = 0;
          else
            v18 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), 0);
          if ((*(_BYTE *)(a3 + 12) & 1) != 0)
          {
            time1 = *(CMTime *)a3;
            time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
            if (CMTimeCompare(&time1, &time2))
            {
              v26 = *((_DWORD *)v18 + 25);
              time1 = *(CMTime *)a3;
              CMTimeConvertScale(&v33, &time1, v26, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
              v25 = v33.value;
            }
            else
            {
              v25 = 0;
            }
          }
          else
          {
            LODWORD(time1.value) = 0;
            LODWORD(time2.value) = 4;
            if (FigAudioQueueTimingShimGetProperty(*((_QWORD *)v18 + 5), 0x64766266u, &time1, (UInt32 *)&time2))goto LABEL_54;
            v19 = *(_DWORD *)(*((_QWORD *)v18 + 8) + 8);
            if (v19 == 1634492771)
              v20 = 2;
            else
              v20 = 3;
            v21 = LODWORD(time1.value) << v20;
            if (v19 == 1633772400 || v19 == 1633772392)
            {
              v22 = FigUInt32NearestPowerOfTwo();
              if (v22 >= 0x20000)
                v23 = 0x20000;
              else
                v23 = v22;
              v24 = v23 >> 2;
              if (v24 >= 0x4000)
                v24 = 0x4000;
              if (v21 <= v24)
                v21 = v24;
            }
            v25 = v21 >= 0x4000 ? 0x4000 : v21;
            if (!v25)
              goto LABEL_54;
          }
          v27 = *((_DWORD *)v18 + 120);
          v28 = FigAudioQueueTimingShimPrime(*((_QWORD *)v18 + 5), v25, value);
          if ((_DWORD)v28)
          {
            v29 = v28;
            type = *(CMTime *)v14;
            v30 = *((_DWORD *)v18 + 120);
            if (v30 <= 0)
              v30 = v27;
            CMTimeMake(&type, v30, *((_DWORD *)v18 + 25));
            *(CMTime *)&value[1] = type;
            time2 = *(CMTime *)(a1 + 520);
            CMTimeAdd(&time1, &time2, (CMTime *)&value[1]);
            *(CMTime *)(a1 + 520) = time1;
            *((_DWORD *)v18 + 120) = 0;
            goto LABEL_55;
          }
          if (a4)
          {
            CMTimeMake(&time1, value[0], 0);
            v29 = 0;
            *a4 = time1;
LABEL_55:
            MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
            return v29;
          }
LABEL_54:
          v29 = 0;
          goto LABEL_55;
        }
      }
    }
LABEL_57:
    v29 = FigSignalErrorAt();
    goto LABEL_55;
  }
  return FigSignalErrorAt();
}

const __CFDictionary *faq_getFigTimeAttachment(const void *a1, const __CFString *a2, CMTime *a3)
{
  const __CFDictionary *result;
  CMTime v5;

  result = (const __CFDictionary *)CMGetAttachment(a1, a2, 0);
  if (result)
  {
    CMTimeMakeFromDictionary(&v5, result);
    *a3 = v5;
    return (const __CFDictionary *)1;
  }
  return result;
}

uint64_t FigAudioQueueStart(uint64_t a1, CMTime *a2, CMTime *a3, uint64_t a4, uint64_t a5, int a6, float a7)
{
  CMTime v8;
  CMTime v9;

  v9 = *a2;
  v8 = *a3;
  return figAudioQueueStartCommon(a1, &v9, &v8, a4, a5, 0, 0, a6, a7);
}

void faqrp_startTimebaseAtAnchorAudioTimeStamp(uint64_t a1, int a2, CMTime *a3, CMTime *a4, float a5)
{
  uint64_t DerivedStorage;
  OpaqueCMTimebase *v11;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v13;
  CMClockRef HostTimeClock;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  CFMutableDictionaryRef Mutable;
  CMTime v18;
  CMTime v19;
  CMTime rhs;
  CMTime time;
  CMTime lhs;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 48));
  v11 = *(OpaqueCMTimebase **)(DerivedStorage + 120);
  *(_QWORD *)(DerivedStorage + 120) = 0;
  v19 = *(CMTime *)(DerivedStorage + 128);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 48));
  if (a2)
  {
    LODWORD(rhs.value) = 0;
    LOBYTE(value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    FigCFDictionarySetInt32();
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    *(_BYTE *)(DerivedStorage + 64) = 0;
    if (Mutable)
      CFRelease(Mutable);
    if (v11)
      goto LABEL_10;
  }
  else
  {
    v13 = *(const void **)(DerivedStorage + 112);
    HostTimeClock = CMClockGetHostTimeClock();
    time = *a3;
    CMSyncConvertTime(&lhs, &time, v13, HostTimeClock);
    value = lhs.value;
    flags = lhs.flags;
    timescale = lhs.timescale;
    if ((lhs.flags & 1) != 0)
    {
      epoch = lhs.epoch;
      CMTimeMake(&v18, 1, 1000);
      lhs = *a4;
      rhs.value = value;
      rhs.timescale = timescale;
      rhs.flags = flags;
      rhs.epoch = epoch;
      CMTimeSubtract(&time, &lhs, &rhs);
      CMTimeAbsoluteValue(&lhs, &time);
      rhs = v18;
      CMTimeCompare(&lhs, &rhs);
    }
    if (v11)
    {
      lhs = *a3;
      time = v19;
      rhs = *a4;
      faqrp_startTimebaseCommon(a5, a1, v11, &lhs, &time, &rhs);
LABEL_10:
      CFRelease(v11);
    }
  }
}

void figSyncMomentSource_TimebaseRateOrTimeChangedCallback(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  int v7;
  __n128 SyncMoment;
  _OWORD v9[7];
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  if (a2)
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(a2 + 24));
    if (*(_BYTE *)(a2 + 236) || *(_QWORD *)(a2 + 64) != a4)
      JUMPOUT(0x19402EA24);
    if (CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0CA2E78]))
    {
      figSyncMomentSource_UpdateToCurrentTimebaseRate(a2);
      v7 = 1;
    }
    else
    {
      v7 = 2;
    }
    v18 = 0;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v11 = 0u;
    SyncMoment = figSyncMomentSource_getSyncMoment(a2, v7, (uint64_t)&v11);
    MEMORY[0x19402EA24](*(_QWORD *)(a2 + 24), SyncMoment);
    v9[4] = v15;
    v9[5] = v16;
    v9[6] = v17;
    v10 = v18;
    v9[0] = v11;
    v9[1] = v12;
    v9[2] = v13;
    v9[3] = v14;
    figSyncMomentSource_SendMoment((dispatch_queue_t *)a2, (uint64_t)v9, 0);
  }
  else
  {
    FigSignalErrorAt();
  }
}

void figPlaybackBoss_timebaseRateChanged(uint64_t a1, uint64_t a2)
{
  int v3;
  NSObject *v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned __int16 v6;
  os_log_type_t type;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a2 + 424);
  if (v3 == 2003853684)
  {
    if (dword_1EE2A2C50)
    {
      v8 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v6 = 24953;
  }
  else
  {
    if (v3 != 1886544244)
    {
      FigDeferNotificationToDispatchQueue();
      return;
    }
    if (dword_1EE2A2C50)
    {
      v8 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v6 = 29808;
  }
  *(_DWORD *)(a2 + 424) = v6 | 0x706C0000;
}

void itemfig_TimeJumped(uint64_t a1, void *a2)
{
  dispatch_queue_t *DerivedStorage;
  dispatch_queue_t *v4;

  CMBaseObjectGetDerivedStorage();
  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
  {
    v4 = DerivedStorage;
    if (a2)
      CFRetain(a2);
    dispatch_async_f(v4[12], a2, (dispatch_function_t)itemfig_deferredTimeJumped_f);
  }
}

uint64_t fpm_timebaseJumpedCallback()
{
  __CFData *Owner;
  UInt8 *MutableBytePtr;
  Float64 Rate;
  _QWORD *v3;
  uint64_t CMBaseObject;
  unsigned int (*v5)(uint64_t, _QWORD, _QWORD, CMTime *);
  _BOOL4 v6;
  int Value;
  CMTime v9;
  CMTime time2;
  CMTime time1;

  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    Owner = (__CFData *)FigRetainProxyGetOwner();
    MutableBytePtr = CFDataGetMutableBytePtr(Owner);
    MEMORY[0x19402EA0C](*((_QWORD *)MutableBytePtr + 6));
    MutableBytePtr[313] = 1;
    CMTimebaseGetTime(&time1, *((CMTimebaseRef *)MutableBytePtr + 3));
    time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    CMTimeMaximum(&v9, &time1, &time2);
    *((CMTime *)MutableBytePtr + 9) = v9;
    Rate = CMTimebaseGetRate(*((CMTimebaseRef *)MutableBytePtr + 3));
    v3 = (_QWORD *)MEMORY[0x1E0C9AE00];
    if (Rate == 0.0)
    {
      v6 = 0;
      if (*((_QWORD *)MutableBytePtr + 2))
      {
        time1.value = 0;
        CMBaseObject = CMByteStreamGetCMBaseObject();
        v5 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
        if (v5)
        {
          if (!v5(CMBaseObject, *MEMORY[0x1E0CA2078], *v3, &time1))
          {
            Value = CFBooleanGetValue((CFBooleanRef)time1.value);
            CFRelease((CFTypeRef)time1.value);
            if (Value)
              v6 = 1;
          }
        }
      }
      *((_DWORD *)MutableBytePtr + 26) = v6;
      *((_DWORD *)MutableBytePtr + 27) = 0;
    }
    FigRetainProxyRetain();
    CMNotificationCenterGetDefaultLocalCenter();
    FigDeferNotificationToDispatchQueue();
    MEMORY[0x19402EA24](*((_QWORD *)MutableBytePtr + 6));
  }
  return FigRetainProxyUnlockMutex();
}

void bossScheduleReachedEndCallbackForRate(uint64_t a1, float a2)
{
  CMTimeFlags flags;
  int v4;
  CMTimeEpoch epoch;
  NSObject *v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  CFIndex v15;
  NSObject *v16;
  CMTime v17;
  CMTime time2;
  CMTimeValue value;
  CMTimeScale timescale;
  CMTime time;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (a2 <= 0.0)
  {
    value = *(_QWORD *)(a1 + 288);
    timescale = *(_DWORD *)(a1 + 296);
    flags = *(_DWORD *)(a1 + 300);
    if ((flags & 0x1D) == 1)
    {
      v4 = 0;
      epoch = *(_QWORD *)(a1 + 304);
    }
    else if (*(_BYTE *)(a1 + 122) || *(_BYTE *)(a1 + 124))
    {
      value = *MEMORY[0x1E0CA2E68];
      flags = *(_DWORD *)(MEMORY[0x1E0CA2E68] + 12);
      timescale = *(_DWORD *)(MEMORY[0x1E0CA2E68] + 8);
      epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
      if (dword_1EE2A2C50)
      {
        LODWORD(v17.value) = 0;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v4 = 0;
    }
    else
    {
      value = *MEMORY[0x1E0CA2E18];
      flags = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
      timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
      epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      if (dword_1EE2A2C50)
      {
        LODWORD(v17.value) = 0;
        v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
        v4 = 1;
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      else
      {
        v4 = 1;
      }
    }
    if ((flags & 0x1D) != 1)
      goto LABEL_25;
    memset(&v17, 0, sizeof(v17));
    CMTimebaseGetTime(&v17, *(CMTimebaseRef *)(a1 + 112));
    time.value = value;
    time.timescale = timescale;
    time.flags = flags;
    time.epoch = epoch;
    time2 = v17;
    if (CMTimeCompare(&time, &time2) < 0)
      goto LABEL_25;
    if (!dword_1EE2A2C50)
      goto LABEL_38;
LABEL_21:
    v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    v14 = 1;
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_26;
  }
  value = *(_QWORD *)(a1 + 168);
  flags = *(_DWORD *)(a1 + 180);
  timescale = *(_DWORD *)(a1 + 176);
  if ((flags & 0x1D) == 1)
  {
    v4 = 0;
    epoch = *(_QWORD *)(a1 + 184);
  }
  else if (*(_BYTE *)(a1 + 122) || *(_BYTE *)(a1 + 123) && *(_BYTE *)(a1 + 124))
  {
    FigPlaybackBossGetDuration(a1, (__n128 *)&time);
    value = time.value;
    flags = time.flags;
    timescale = time.timescale;
    epoch = time.epoch;
    if (dword_1EE2A2C50)
    {
      LODWORD(v17.value) = 0;
      v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v4 = 0;
  }
  else
  {
    value = *MEMORY[0x1E0CA2E18];
    flags = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
    timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
    epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    if (dword_1EE2A2C50)
    {
      LODWORD(v17.value) = 0;
      v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
      v4 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    else
    {
      v4 = 1;
    }
  }
  if ((flags & 0x1D) != 1
    || (memset(&v17, 0, sizeof(v17)),
        CMTimebaseGetTime(&v17, *(CMTimebaseRef *)(a1 + 112)),
        time.value = value,
        time.timescale = timescale,
        time.flags = flags,
        time.epoch = epoch,
        time2 = v17,
        CMTimeCompare(&time, &time2) > 0))
  {
LABEL_25:
    v14 = 0;
    goto LABEL_26;
  }
  if (dword_1EE2A2C50)
    goto LABEL_21;
LABEL_38:
  v14 = 1;
LABEL_26:
  *(_BYTE *)(a1 + 128) = 0;
  time.value = value;
  time.timescale = timescale;
  time.flags = flags;
  time.epoch = epoch;
  bossScheduleReachedEndCallbackForTime(a1, &time);
  if (v14)
  {
    v10 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)(a1 + 312) = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)(a1 + 328) = *(_QWORD *)(v10 + 16);
    CMTimebaseSetTimerDispatchSourceToFireImmediately(*(CMTimebaseRef *)(a1 + 112), *(dispatch_source_t *)(a1 + 160));
  }
  if (v4)
  {
    CFRetain((CFTypeRef)a1);
    if (!*(_BYTE *)(a1 + 16))
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
      if (*(_BYTE *)(a1 + 840))
      {
        LODWORD(v17.value) = 0;
        v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v12 = v17.value;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          v13 = v12;
        else
          v13 = v12 & 0xFFFFFFFE;
        if (v13)
        {
          LODWORD(time2.value) = 136315394;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"bossScheduleReachedEndCallbackWhenMentorsIdle";
          LOWORD(time2.flags) = 2048;
          *(_QWORD *)((char *)&time2.flags + 2) = a1;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (*(uint64_t *)(a1 + 80) < 1)
      {
LABEL_44:
        MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
        bossScheduleReachedEndCallbackUsingRenderPipelineQueueEndPTS(a1);
      }
      else
      {
        v15 = 0;
        while (!*((_BYTE *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v15) + 212))
        {
          if (*(_QWORD *)(a1 + 80) <= ++v15)
            goto LABEL_44;
        }
        MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
        *(_BYTE *)(a1 + 584) = 1;
      }
    }
    CFRelease((CFTypeRef)a1);
  }
  else
  {
    *(_BYTE *)(a1 + 584) = 0;
  }
}

void itemfig_invalidateRampOutTimer()
{
  uint64_t DerivedStorage;
  NSObject *v1;
  uint64_t v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(NSObject **)(DerivedStorage + 1304);
  if (v1)
  {
    v2 = DerivedStorage;
    CMTimebaseRemoveTimerDispatchSource(*(CMTimebaseRef *)(DerivedStorage + 328), v1);
    dispatch_source_cancel(*(dispatch_source_t *)(v2 + 1304));
    dispatch_release(*(dispatch_object_t *)(v2 + 1304));
    *(_QWORD *)(v2 + 1304) = 0;
  }
}

uint64_t figPlaybackBossSetRateToZero(uint64_t a1, int a2, CMTime *a3)
{
  CMTime *v6;
  int v7;
  unsigned __int16 v8;
  int v9;
  int v10;
  int v11;
  OpaqueCMTimebase *v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  OpaqueCMClock *HostTimeClock;
  OpaqueCMTimebase *v15;
  CMTime v17;
  CMTime v18;
  CMTime lhs;
  CMTime v20;
  CMTime time;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v6 = (CMTime *)MEMORY[0x1E0CA2E18];
  bossScheduleReachedEndCallbackForTime(a1, MEMORY[0x1E0CA2E18]);
  bossScheduleAdvanceForOverlappedPlaybackCallbackForTime(a1, v6);
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 576));
  v7 = *(_DWORD *)(a1 + 424);
  if (v7 <= 1886530415)
  {
    if (v7 > 1886154859)
    {
      if (v7 == 1886154860)
        goto LABEL_14;
      v8 = 29808;
      goto LABEL_10;
    }
    if (v7 != 1768189029)
    {
      v8 = 24953;
LABEL_10:
      v9 = v8 | 0x706C0000;
      goto LABEL_13;
    }
LABEL_24:
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_33;
  }
  if (v7 > 1920298605)
  {
    if (v7 == 1920298606)
      goto LABEL_24;
    v9 = 2003853684;
  }
  else
  {
    if (v7 == 1886530416)
    {
      *(_DWORD *)(a1 + 424) = 1886545266;
      goto LABEL_33;
    }
    v9 = 1886544244;
  }
LABEL_13:
  if (v7 != v9)
    goto LABEL_33;
LABEL_14:
  time = *a3;
  bossStopTimebaseAndAudioContext(a1, a2, &time);
  v10 = *(_DWORD *)(a1 + 424);
  if (v10 > 1886155887)
  {
    v11 = 1885435251;
    if (v10 == 1886155888 || v10 == 1886544244)
      goto LABEL_26;
    if (v10 != 2003853684)
      goto LABEL_27;
LABEL_25:
    v11 = 1919247481;
LABEL_26:
    *(_DWORD *)(a1 + 424) = v11;
    goto LABEL_27;
  }
  if (v10 == 1886151033)
    goto LABEL_25;
  if (v10 == 1886154860)
  {
    if ((*(_DWORD *)(a1 + 456) & 0x1D) == 1)
    {
      v12 = *(OpaqueCMTimebase **)(a1 + 112);
      time = *(CMTime *)(a1 + 444);
      CMTimebaseSetTime(v12, &time);
      *(_OWORD *)(a1 + 444) = *(_OWORD *)&v6->value;
      *(_QWORD *)(a1 + 460) = v6->epoch;
    }
    bossReplaceMainQueuesWithSideQueuesAndSwitchMentorsToMainQueues(a1);
    v11 = 1886545266;
    goto LABEL_26;
  }
LABEL_27:
  *(int32x2_t *)(a1 + 716) = vadd_s32(*(int32x2_t *)(a1 + 716), (int32x2_t)0x100000001);
  if ((*(_BYTE *)(a1 + 668) & 1) != 0)
  {
    HostTimeClock = CMClockGetHostTimeClock();
    CMClockGetTime(&lhs, HostTimeClock);
    time = *(CMTime *)(a1 + 656);
    CMTimeSubtract(&v20, &lhs, &time);
    *(double *)(a1 + 648) = *(double *)(a1 + 648) + fabs(CMTimeGetSeconds(&v20));
    *(_OWORD *)(a1 + 656) = *(_OWORD *)&v6->value;
    *(_QWORD *)(a1 + 672) = v6->epoch;
  }
  v15 = *(OpaqueCMTimebase **)(a1 + 112);
  if (v15 && (*(_BYTE *)(a1 + 700) & 1) != 0)
  {
    CMTimebaseGetTime(&v17, v15);
    time = *(CMTime *)(a1 + 688);
    CMTimeSubtract(&v18, &v17, &time);
    *(double *)(a1 + 680) = *(double *)(a1 + 680) + fabs(CMTimeGetSeconds(&v18));
    *(_OWORD *)(a1 + 688) = *(_OWORD *)&v6->value;
    *(_QWORD *)(a1 + 704) = v6->epoch;
  }
LABEL_33:
  *(_DWORD *)(a1 + 432) = 0;
  return MEMORY[0x19402EF04](*(_QWORD *)(a1 + 576));
}

void bossStopTimebaseAndAudioContext(uint64_t a1, int a2, CMTime *a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFIndex v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t FigBaseObject;
  unsigned int (*v9)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *);
  const __CFDictionary *v11;
  NSObject *v12;
  CMTime v13;
  CMTime time;
  os_log_type_t v15;
  os_log_type_t type[4];
  CFDictionaryRef dictionaryRepresentation;
  CMTime v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v13 = *a3;
  dictionaryRepresentation = 0;
  if (a2 == 1)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
    if (*(_BYTE *)(a1 + 840))
    {
      LODWORD(time.value) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (*(uint64_t *)(a1 + 80) >= 1)
    {
      v5 = 0;
      v6 = *MEMORY[0x1E0C9AE00];
      do
      {
        v7 = *((_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v5) + 10);
        if (v7)
        {
          FigBaseObject = FigRenderPipelineGetFigBaseObject(v7);
          v9 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
          if (v9)
          {
            if (!v9(FigBaseObject, CFSTR("NextNonJerkyStopTime"), v6, &dictionaryRepresentation)
              && dictionaryRepresentation != 0)
            {
              break;
            }
          }
        }
        ++v5;
      }
      while (*(_QWORD *)(a1 + 80) > v5);
    }
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
    v11 = dictionaryRepresentation;
    if (dictionaryRepresentation)
    {
      if (dword_1EE2A2C50)
      {
        *(_DWORD *)type = 0;
        v15 = OS_LOG_TYPE_DEFAULT;
        v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v11 = dictionaryRepresentation;
      }
      CMTimeMakeFromDictionary(&v13, v11);
    }
  }
  v18 = v13;
  bossSetPossiblyOutsourcedTimebaseRate(a1, (uint64_t)&v18, MEMORY[0x1E0CA2E18], 0.0, 1.0);
  if (dictionaryRepresentation)
    CFRelease(dictionaryRepresentation);
}

uint64_t FigAudioQueuePause(uint64_t a1)
{
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  _QWORD *v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v7;
  unsigned int v8;
  Float64 Seconds;
  uint64_t v10;
  const void *ValueAtIndex;
  uint64_t v12;
  CMTime v14;
  CMTime time;
  os_log_type_t type;
  unsigned int v17;
  int v18;
  const char *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  _QWORD *v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  Float64 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return FigSignalErrorAt();
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 24));
  if (*(_BYTE *)(a1 + 16))
  {
    v10 = FigSignalErrorAt();
LABEL_28:
    v12 = v10;
    goto LABEL_29;
  }
  if (*(_BYTE *)(a1 + 73) || *(_BYTE *)(a1 + 568))
  {
    Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 176));
    if (Count < 1)
    {
LABEL_20:
      if (*(_BYTE *)(a1 + 16))
        ValueAtIndex = 0;
      else
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), 0);
      *(_BYTE *)(a1 + 73) = 0;
      *(_BYTE *)(a1 + 570) = 1;
      *(_BYTE *)(a1 + 753) = 0;
      *(_BYTE *)(a1 + 640) = 0;
      subaq_getCurrentQueueTime((uint64_t)ValueAtIndex, &v14);
      if ((*(_BYTE *)(a1 + 460) & 1) != 0)
        *(CMTime *)(a1 + 472) = v14;
      v12 = 0;
      *(_BYTE *)(a1 + 297) = 0;
      *(_BYTE *)(a1 + 568) = 0;
      *(_BYTE *)(a1 + 641) = 0;
      *(_BYTE *)(a1 + 737) = 0;
      goto LABEL_29;
    }
    v3 = Count;
    v4 = 0;
    while (1)
    {
      if (*(_BYTE *)(a1 + 16))
        v5 = 0;
      else
        v5 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), v4);
      if (dword_1EE2A2A48)
      {
        v17 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v7 = v17;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
          v8 = v7;
        else
          v8 = v7 & 0xFFFFFFFE;
        if (v8)
        {
          subaq_getCurrentQueueTime((uint64_t)v5, &time);
          Seconds = CMTimeGetSeconds(&time);
          v18 = 136316162;
          v19 = "FigAudioQueuePause";
          v20 = 2048;
          v21 = a1;
          v22 = 2048;
          v23 = v5;
          v24 = 2082;
          v25 = a1 + 768;
          v26 = 2048;
          v27 = Seconds;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v10 = FigAudioQueueTimingShimPause(v5[5]);
      if ((_DWORD)v10)
        goto LABEL_28;
      if (v3 == ++v4)
        goto LABEL_20;
    }
  }
  v12 = 0;
LABEL_29:
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
  return v12;
}

uint64_t playerasync_RemoveFromPlayQueue(void *a1, const void *a2)
{
  _DWORD *DerivedStorage;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  _QWORD *v11;
  void *v12;

  v12 = 0;
  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  v5 = DerivedStorage;
  if (!a2)
  {
    if (*DerivedStorage)
      return FigSignalErrorAt();
    goto LABEL_9;
  }
  v6 = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (*v5)
    return FigSignalErrorAt();
  if (!v6)
  {
LABEL_9:
    v8 = 0;
    goto LABEL_10;
  }
  if (*v6)
    return FigSignalErrorAt();
  v7 = FigCFWeakReferenceHolderCopyReferencedObject();
  v8 = a1;
  if ((void *)v7 != a1)
  {
    v8 = (const void *)v7;
    v9 = FigSignalErrorAt();
LABEL_12:
    v11 = 0;
    goto LABEL_13;
  }
LABEL_10:
  v9 = playerasync_createCommand(a1, 7, a2, &v12);
  v11 = v12;
  if (!(_DWORD)v9)
  {
    playerasync_runAsynchronousCommand(a1, v12);
    goto LABEL_12;
  }
LABEL_13:
  fpa_releaseCommand(v11);
  if (v8)
    CFRelease(v8);
  return v9;
}

uint64_t playercentral_RemoveFromPlayQueue(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t);
  __CFSet *v9;
  const __CFAllocator *v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
    v4 = CMBaseObjectGetDerivedStorage();
  else
    v4 = 0;
  if (*(_BYTE *)(DerivedStorage + 8))
    return FigSignalErrorAt();
  v6 = *(_QWORD *)(DerivedStorage + 16);
  if (!v6)
    return FigSignalErrorAt();
  if (!v4)
  {
    v7 = 0;
    goto LABEL_12;
  }
  if (*(_BYTE *)(v4 + 16))
    return FigSignalErrorAt();
  v7 = *(_QWORD *)(v4 + 8);
LABEL_12:
  v8 = *(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v8 || v8(v6, v7))
    return 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 88));
  v9 = *(__CFSet **)(DerivedStorage + 80);
  if (a2)
  {
    if (!CFSetContainsValue(*(CFSetRef *)(DerivedStorage + 80), a2))
    {
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 88));
      return 0;
    }
    v9 = (__CFSet *)CFRetain(a2);
    CFSetRemoveValue(*(CFMutableSetRef *)(DerivedStorage + 80), a2);
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 88));
    if (!v9)
      return 0;
  }
  else
  {
    v10 = CFGetAllocator(*(CFTypeRef *)(DerivedStorage + 80));
    *(_QWORD *)(DerivedStorage + 80) = CFSetCreateMutable(v10, 0, MEMORY[0x1E0C9B3B0]);
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 88));
    CFSetRemoveAllValues(v9);
  }
  CFRelease(v9);
  return 0;
}

uint64_t playerfig_RemoveFromPlayQueue(const void *a1, const __CFString *a2)
{
  uint64_t DerivedStorage;
  uint64_t *v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _DWORD *v7;
  const char *v8;
  const char *v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  const void *v13;
  _QWORD *v14;
  _BOOL4 v15;
  int v16;
  const __CFString *v17;
  uint64_t v18;
  NSObject *v19;
  int v20;
  const __CFString *ValueAtIndex;
  NSObject *v22;
  NSObject *v23;
  uint64_t v24;
  char v25;
  char v26;
  NSObject *v27;
  CFIndex Count;
  const void *v29;
  uint64_t v30;
  const char *v31;
  const char *v32;
  char v34;
  __int128 v35;
  uint64_t v36;
  char __dst[16];
  uint64_t v38;
  uint64_t v39;
  CFRange v40;

  v39 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v34 = 0;
  v5 = &sFigCDSNodeProtocolID;
  if (dword_1EE2A2AC8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v5 = &sFigCDSNodeProtocolID;
  }
  v7 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    if (a1)
      v8 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
    else
      v8 = "";
    strncpy(__dst, v8, 8uLL);
    if (a2)
      v9 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
    else
      v9 = "";
    strncpy(__dst, v9, 8uLL);
    kdebug_trace();
  }
  if (*(_BYTE *)DerivedStorage)
    goto LABEL_67;
  if (!a2)
  {
    v14 = (_QWORD *)(DerivedStorage + 496);
    MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
    playeritemfig_releaseRenderPipelines(a1, 0, 0);
    if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504)) < 1)
    {
      v15 = 0;
    }
    else
    {
      v20 = 1;
      v15 = 1;
      do
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
        playerfig_gracefullyRemoveItemFromPlayQueue(a1, ValueAtIndex, v20, 1, 1, 0);
        v20 = 2;
      }
      while (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504)) > 0);
    }
    if (dword_1EE2A2AC8 < 2)
    {
      v13 = 0;
      v25 = 0;
    }
    else
    {
      v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v13 = 0;
      v25 = 0;
      v7 = (_DWORD *)MEMORY[0x1E0CA1FC0];
      v5 = &sFigCDSNodeProtocolID;
    }
    goto LABEL_42;
  }
  v10 = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*v10 || (v11 = v10, (v12 = FigCFWeakReferenceHolderCopyReferencedObject()) == 0))
  {
LABEL_67:
    v30 = FigSignalErrorAt();
    goto LABEL_58;
  }
  v13 = (const void *)v12;
  if ((const void *)v12 != a1)
  {
    v24 = FigSignalErrorAt();
LABEL_57:
    CFRelease(v13);
    v30 = v24;
    goto LABEL_58;
  }
  v14 = (_QWORD *)(DerivedStorage + 496);
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 496));
  if (!v11[1])
  {
    if (dword_1EE2A2AC8)
    {
      v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    MEMORY[0x19402EA24](*v14);
    v24 = 4294954516;
    v13 = a1;
    goto LABEL_57;
  }
  v15 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0) == a2;
  v16 = playerfig_maybeUndoQueueingForItem((uint64_t)a1, a2);
  v17 = *(const __CFString **)(DerivedStorage + 512);
  if (v17)
  {
    if (v17 == a2)
    {
      v18 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 352);
      if (v18)
        FigPlaybackBossSetRate(v18, 0, 0.0);
    }
  }
  playerfig_gracefullyRemoveItemFromPlayQueue(a1, a2, 0, 1, 1, (BOOL *)&v34);
  if (v16)
    v34 = 1;
  if (dword_1EE2A2AC8 >= 2)
  {
    v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v7 = (_DWORD *)MEMORY[0x1E0CA1FC0];
    v5 = &sFigCDSNodeProtocolID;
  }
  if (v34)
  {
    MEMORY[0x19402EA24](*v14);
    *(_OWORD *)__dst = *MEMORY[0x1E0CA2E18];
    v38 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    v35 = *(_OWORD *)__dst;
    v36 = v38;
    playerfig_stopResetDisturbReprepareAndResumeWithTransaction(a1, (uint64_t)__dst, (uint64_t)&v35, 0);
    v25 = 1;
  }
  else
  {
    if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 496))
      playerfig_prepareNextItemForTransition(a1, *(const void **)(DerivedStorage + 512));
    v25 = 0;
  }
  v13 = a1;
LABEL_42:
  if (*(_BYTE *)(DerivedStorage + 813)
    || (Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504))) != 0
    && ((v29 = *(const void **)(DerivedStorage + 512)) == 0
     || (v40.location = 0,
         v40.length = Count,
         CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(DerivedStorage + 504), v40, v29) + 1 != Count)))
  {
    v26 = 1;
    if ((v25 & 1) != 0)
      goto LABEL_45;
    goto LABEL_44;
  }
  v26 = 0;
  *(_BYTE *)(DerivedStorage + 813) = 1;
  if ((v25 & 1) == 0)
LABEL_44:
    MEMORY[0x19402EA24](*v14);
LABEL_45:
  if (v15)
  {
    playerfig_postDeferredCurrentItemDidChangeNotificationWithReason(a1, CFSTR("ReasonRemoveFromPlayqueue"));
    playerfig_updatePlaybackStateAndBossRate(a1, 7, 0);
  }
  if ((v26 & 1) == 0)
  {
    if (*((_DWORD *)v5 + 690))
    {
      v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
  }
  v24 = 0;
  v30 = 0;
  if (v13)
    goto LABEL_57;
LABEL_58:
  if (*v7 == 1)
  {
    if (a1)
      v31 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
    else
      v31 = "";
    strncpy(__dst, v31, 8uLL);
    if (a2)
      v32 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
    else
      v32 = "";
    strncpy(__dst, v32, 8uLL);
    kdebug_trace();
  }
  return v30;
}

void playerfig_gracefullyRemoveItemFromPlayQueue(const void *a1, const __CFString *a2, int a3, uint64_t a4, int a5, BOOL *a6)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  uint64_t Count;
  CFIndex FirstIndexOfValue;
  const void *v14;
  BOOL v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  const void *v20;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v22;
  const void *ValueAtIndex;
  uint64_t v24;
  NSObject *v25;
  __CFString *v26;
  NSObject *v27;
  NSObject *v28;
  os_log_type_t v30;
  uint64_t v31;
  CFRange v32;
  CFRange v33;

  v31 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = CMBaseObjectGetDerivedStorage();
  Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504));
  v32.location = 0;
  v32.length = Count;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(DerivedStorage + 504), v32, a2);
  CFRetain(a2);
  if (FirstIndexOfValue != -1)
  {
    v30 = OS_LOG_TYPE_DEFAULT;
    v14 = *(const void **)(DerivedStorage + 512);
    if (v14)
    {
      v33.location = 0;
      v33.length = Count;
      v15 = FirstIndexOfValue <= CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(DerivedStorage + 504), v33, v14);
      if (!a6)
        goto LABEL_5;
    }
    else
    {
      v15 = 1;
      if (!a6)
      {
LABEL_5:
        if (!FirstIndexOfValue)
        {
          if (*(_BYTE *)(DerivedStorage + 544))
          {
            *(_BYTE *)(DerivedStorage + 544) = 0;
            playerfig_postDeferredPrerollWasCancelledNotification((uint64_t)a1, *(_DWORD *)(DerivedStorage + 552));
          }
          v16 = MEMORY[0x1E0CA2E18];
          v17 = *MEMORY[0x1E0CA2E18];
          *(_OWORD *)(v11 + 548) = *MEMORY[0x1E0CA2E18];
          v18 = *(_QWORD *)(v16 + 16);
          *(_QWORD *)(v11 + 564) = v18;
          *(_OWORD *)(v11 + 572) = v17;
          *(_QWORD *)(v11 + 588) = v18;
        }
        v19 = *(_DWORD *)(v11 + 524);
        if (v19)
        {
          *(_DWORD *)(v11 + 524) = 0;
          *(_DWORD *)(v11 + 536) = 0;
          itemfig_postSeekWasCanceledNotification((uint64_t)a1, (uint64_t)a2, v19, 1);
        }
        v20 = *(const void **)(v11 + 1384);
        if (v20)
        {
          CFRelease(v20);
          *(_QWORD *)(v11 + 1384) = 0;
        }
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 504), FirstIndexOfValue);
        *(_BYTE *)(v11 + 1) = 0;
        *(_BYTE *)(v11 + 1288) = 0;
        *(_BYTE *)(v11 + 993) = 0;
        itemfig_configureDownloadForItem((uint64_t)a2, *(unsigned __int8 *)(v11 + 1329));
        if (a3 != 2 && !FirstIndexOfValue)
        {
          CMNotificationCenterGetDefaultLocalCenter();
          FigDispatchAsyncPostNotification();
          if (dword_1EE2A2AC8)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (!a3 && Count >= 2)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
            v24 = CMBaseObjectGetDerivedStorage();
            if (*(double *)(v24 + 1552) == 0.0)
              *(CFAbsoluteTime *)(v24 + 1552) = CFAbsoluteTimeGetCurrent();
            CMNotificationCenterGetDefaultLocalCenter();
            FigDispatchAsyncPostNotification();
            CMNotificationCenterGetDefaultLocalCenter();
            FigDispatchAsyncPostNotification();
            if (dword_1EE2A2AC8)
            {
              v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            itemfig_makePlaybackPrerequisitePropertiesReady((uint64_t)ValueAtIndex, &v30);
            if (v30)
            {
              *(_BYTE *)(v11 + 1288) = 1;
            }
            else if (dword_1EE2A2AC8)
            {
              v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
          }
        }
        playerfig_configureDownloadInPlayQueue();
      }
    }
    *a6 = v15;
    goto LABEL_5;
  }
  v30 = OS_LOG_TYPE_DEFAULT;
  v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (a5 == 1)
  {
    itemfig_removeAllImageQueues((uint64_t)a2);
    if (!*(_QWORD *)(DerivedStorage + 512))
      playerfig_freeTransitionImageQueueAndSlot();
    if (!Count)
      playerfig_scheduleVideoTargetImageQueueConfigurationTransitionForItem(a1, a2, MEMORY[0x1E0CA2E18]);
  }
  if (!*(_QWORD *)(DerivedStorage + 512))
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 224));
    playerfig_clearVideoLayers(*(const __CFArray **)(DerivedStorage + 208), 0, 0);
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 224));
  }
  playeritemfig_releaseVideoCompositionObjects((uint64_t)a2);
  itemfig_ExternalProtectionStatusChangedGuts((uint64_t)a2);
  itemfig_clearCoordinatedPlaybackSynchronizationTimebase();
  itemfig_releaseAIMEDataAndAllAIMEDataChannelResources();
  CFRelease(a2);
  v26 = fp_copyPlayQueueDescription();
  if (dword_1EE2A2AC8)
  {
    v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v26)
    CFRelease(v26);
}

void FigPlayabilityMonitorDestroy(uint64_t a1)
{
  const void *v2;
  NSObject *v3;
  OpaqueCMTimebase *v4;
  NSObject *v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;

  if (*(_QWORD *)(a1 + 328))
    FigRetainProxyInvalidate();
  v2 = *(const void **)(a1 + 8640);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 8640) = 0;
  }
  if (*(_QWORD *)(a1 + 24))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  if (*(_QWORD *)(a1 + 16))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    if (*(_BYTE *)(a1 + 8553))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
    }
  }
  if (*(_QWORD *)(a1 + 24))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  if (*(_QWORD *)(a1 + 48))
  {
    MEMORY[0x19402EA0C]();
    if (*(int *)(a1 + 64) >= 1)
    {
      do
        FigConditionVariableWaitRelative();
      while (*(int *)(a1 + 64) > 0);
    }
  }
  v3 = *(NSObject **)(a1 + 304);
  if (v3)
  {
    v4 = *(OpaqueCMTimebase **)(a1 + 24);
    if (v4)
    {
      CMTimebaseRemoveTimerDispatchSource(v4, v3);
      v3 = *(NSObject **)(a1 + 304);
    }
    dispatch_source_cancel(v3);
    dispatch_release(*(dispatch_object_t *)(a1 + 304));
    *(_QWORD *)(a1 + 304) = 0;
  }
  v5 = *(NSObject **)(a1 + 296);
  if (v5)
  {
    dispatch_source_cancel(v5);
    dispatch_release(*(dispatch_object_t *)(a1 + 296));
    *(_QWORD *)(a1 + 296) = 0;
  }
  v6 = *(NSObject **)(a1 + 320);
  if (v6)
  {
    dispatch_sync_f(v6, 0, (dispatch_function_t)fpm_EmptyDispatchFunc);
    dispatch_release(*(dispatch_object_t *)(a1 + 320));
  }
  v7 = *(void **)(a1 + 8560);
  if (v7)
  {
    os_release(v7);
    *(_QWORD *)(a1 + 8560) = 0;
  }
  if (*(uint64_t *)(a1 + 80) >= 1)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = *(_QWORD *)(a1 + 88);
      v11 = *(const void **)(v10 + v8 + 16);
      if (v11)
      {
        CFRelease(v11);
        v10 = *(_QWORD *)(a1 + 88);
      }
      v12 = *(const void **)(v10 + v8 + 24);
      if (v12)
      {
        CFRelease(v12);
        v10 = *(_QWORD *)(a1 + 88);
      }
      v13 = *(const void **)(v10 + v8 + 8);
      if (v13)
      {
        CFRelease(v13);
        v10 = *(_QWORD *)(a1 + 88);
      }
      v14 = *(const void **)(v10 + v8 + 32);
      if (v14)
        CFRelease(v14);
      ++v9;
      v8 += 48;
    }
    while (v9 < *(_QWORD *)(a1 + 80));
  }
  free(*(void **)(a1 + 88));
  v15 = *(const void **)(a1 + 24);
  if (v15)
    CFRelease(v15);
  v16 = *(const void **)(a1 + 32);
  if (v16)
    CFRelease(v16);
  v17 = *(const void **)(a1 + 40);
  if (v17)
    CFRelease(v17);
  v18 = *(const void **)(a1 + 8568);
  if (v18)
  {
    CFRelease(v18);
    *(_QWORD *)(a1 + 8568) = 0;
  }
  v19 = *(const void **)(a1 + 16);
  if (v19)
    CFRelease(v19);
  v20 = *(const void **)(a1 + 8);
  if (v20)
    CFRelease(v20);
  if (*(_QWORD *)(a1 + 8632))
    MEMORY[0x19402EA0C]();
  v21 = *(const void **)(a1 + 8624);
  if (v21)
    CFRelease(v21);
  if (*(_QWORD *)(a1 + 8632))
    MEMORY[0x19402EA24]();
  if (*(_QWORD *)(a1 + 328))
  {
    FigRetainProxyRelease();
    *(_QWORD *)(a1 + 328) = 0;
  }
  if (*(_QWORD *)(a1 + 56))
  {
    FigSimpleMutexDestroy();
    *(_QWORD *)(a1 + 56) = 0;
  }
  if (*(_QWORD *)(a1 + 8632))
  {
    FigSimpleMutexDestroy();
    *(_QWORD *)(a1 + 8632) = 0;
  }
  if (*(_QWORD *)(a1 + 72))
  {
    FigConditionVariableDestroy();
    *(_QWORD *)(a1 + 72) = 0;
  }
  if (*(_QWORD *)(a1 + 48))
  {
    MEMORY[0x19402EA24]();
    FigSimpleMutexDestroy();
    *(_QWORD *)(a1 + 48) = 0;
  }
  CFRelease(*(CFTypeRef *)a1);
}

uint64_t FigPlaybackBossGetTime@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  if (!result || *(_BYTE *)(result + 16) || *(_BYTE *)(result + 120))
  {
    v2 = MEMORY[0x1E0CA2E18];
  }
  else
  {
    if ((*(_DWORD *)(result + 456) & 0x1D) != 1)
    {
      a2[1] = 0;
      a2[2] = 0;
      *a2 = 0;
      return CMTimebaseGetTimeClampedAboveAnchorTime();
    }
    v2 = result + 444;
  }
  *(_OWORD *)a2 = *(_OWORD *)v2;
  a2[2] = *(_QWORD *)(v2 + 16);
  return result;
}

void FigPlaybackBossInvalidate(uint64_t a1)
{
  const __CFArray *v2;
  const __CFArray *Copy;
  CFIndex v4;
  _QWORD *ValueAtIndex;
  _QWORD *v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  CFIndex v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  NSObject *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;

  if (a1 && !*(_BYTE *)(a1 + 16))
  {
    figPlaybackBossPrerollCompleted(a1, 1);
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 576));
    bossBumpCurrentMasterOrder(a1);
    if (*(_QWORD *)(a1 + 64))
      MEMORY[0x19402EEEC]();
    bossSetMentorModesToDoNothing(a1, 0, *(_QWORD *)(a1 + 80), 1);
    if (*(_QWORD *)(a1 + 32))
      FigThreadAbortQueueForTeardown();
    if (*(_QWORD *)(a1 + 64))
      MEMORY[0x19402EF04]();
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 576));
    if (*(_QWORD *)(a1 + 64))
      MEMORY[0x19402EEEC]();
    v2 = *(const __CFArray **)(a1 + 72);
    if (v2)
      Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v2);
    else
      Copy = 0;
    if (*(_QWORD *)(a1 + 64))
      MEMORY[0x19402EF04]();
    if (CFArrayGetCount(Copy) >= 1)
    {
      v4 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(Copy, v4);
        v6 = (_QWORD *)ValueAtIndex[15];
        if (v6)
          VideoMentorInvalidate(v6);
        v7 = ValueAtIndex[13];
        if (v7)
          AudioMentorInvalidate(v7);
        ++v4;
      }
      while (CFArrayGetCount(Copy) > v4);
    }
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 24));
    *(_BYTE *)(a1 + 16) = 1;
    FigMemoryBarrier();
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 24));
    if (*(_QWORD *)(a1 + 112))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
    }
    bossRemoveVideoCompositionProcessorNotificationListenersForPrerollForBoss(a1);
    if (*(_BYTE *)(a1 + 126))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      *(_BYTE *)(a1 + 126) = 0;
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    v8 = *(NSObject **)(a1 + 160);
    if (v8)
    {
      CMTimebaseRemoveTimerDispatchSource(*(CMTimebaseRef *)(a1 + 112), v8);
      dispatch_source_cancel(*(dispatch_source_t *)(a1 + 160));
      dispatch_release(*(dispatch_object_t *)(a1 + 160));
      *(_QWORD *)(a1 + 160) = 0;
    }
    v9 = *(NSObject **)(a1 + 360);
    if (v9)
    {
      CMTimebaseRemoveTimerDispatchSource(*(CMTimebaseRef *)(a1 + 112), v9);
      dispatch_source_cancel(*(dispatch_source_t *)(a1 + 360));
      dispatch_release(*(dispatch_object_t *)(a1 + 360));
      *(_QWORD *)(a1 + 360) = 0;
    }
    if (*(_QWORD *)(a1 + 64))
      MEMORY[0x19402EEEC]();
    if (*(uint64_t *)(a1 + 80) >= 1)
    {
      v10 = 0;
      do
      {
        v11 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v10);
        v12 = (const void *)v11[6];
        if (v12)
        {
          CFRelease(v12);
          v11[6] = 0;
        }
        v13 = (const void *)v11[12];
        if (v13)
        {
          CFRelease(v13);
          v11[12] = 0;
        }
        v14 = (const void *)v11[32];
        if (v14)
        {
          CFRelease(v14);
          v11[32] = 0;
        }
        ++v10;
      }
      while (*(_QWORD *)(a1 + 80) > v10);
    }
    figPlaybackBossTeardownTracks(a1, 1);
    if (*(_QWORD *)(a1 + 64))
      MEMORY[0x19402EF04]();
    if (Copy)
      CFRelease(Copy);
    v15 = *(NSObject **)(a1 + 32);
    if (v15)
    {
      dispatch_sync_f(v15, 0, (dispatch_function_t)figPlaybackBossNOOP);
      dispatch_release(*(dispatch_object_t *)(a1 + 32));
      *(_QWORD *)(a1 + 32) = 0;
    }
    v16 = *(const void **)(a1 + 40);
    if (v16)
    {
      CFRelease(v16);
      *(_QWORD *)(a1 + 40) = 0;
    }
    v17 = *(const void **)(a1 + 48);
    if (v17)
    {
      CFRelease(v17);
      *(_QWORD *)(a1 + 48) = 0;
    }
    v18 = *(const void **)(a1 + 56);
    if (v18)
    {
      CFRelease(v18);
      *(_QWORD *)(a1 + 56) = 0;
    }
    v19 = *(const void **)(a1 + 112);
    if (v19)
    {
      CFRelease(v19);
      *(_QWORD *)(a1 + 112) = 0;
    }
    v20 = *(const void **)(a1 + 496);
    if (v20)
    {
      CFRelease(v20);
      *(_QWORD *)(a1 + 496) = 0;
    }
    v21 = *(const void **)(a1 + 416);
    if (v21)
    {
      CFRelease(v21);
      *(_QWORD *)(a1 + 416) = 0;
    }
    v22 = *(const void **)(a1 + 536);
    if (v22)
    {
      CFRelease(v22);
      *(_QWORD *)(a1 + 536) = 0;
    }
    v23 = *(const void **)(a1 + 552);
    if (v23)
    {
      CFRelease(v23);
      *(_QWORD *)(a1 + 552) = 0;
    }
    v24 = *(const void **)(a1 + 568);
    if (v24)
    {
      CFRelease(v24);
      *(_QWORD *)(a1 + 568) = 0;
    }
    if (*(_BYTE *)(a1 + 468) && *(_QWORD *)(a1 + 592))
      bossRemoveVideoCompositionProcessorNotificationListenersForSeekForBoss(a1);
    v25 = *(const void **)(a1 + 592);
    if (v25)
    {
      CFRelease(v25);
      *(_QWORD *)(a1 + 592) = 0;
    }
  }
}

void figPlaybackBossTeardownTracks(uint64_t a1, int a2)
{
  CFIndex v4;
  _QWORD *ValueAtIndex;
  uint64_t v6;
  uint64_t v7;
  uint64_t FigBaseObject;
  void (*v9)(uint64_t, const __CFString *, _QWORD);

  if (*(uint64_t *)(a1 + 80) >= 1)
  {
    v4 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v4);
      v6 = (uint64_t)ValueAtIndex;
      if (a2)
      {
        v7 = ValueAtIndex[10];
        if (v7)
        {
          FigBaseObject = FigRenderPipelineGetFigBaseObject(v7);
          v9 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
          if (v9)
            v9(FigBaseObject, CFSTR("Timebase"), 0);
        }
      }
      bossRemoveNotificationListenersForTrack(v6);
      ++v4;
    }
    while (*(_QWORD *)(a1 + 80) > v4);
  }
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 72));
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 96) = -1;
  if (*(_QWORD *)(a1 + 88) != -1)
    *(_QWORD *)(a1 + 88) = -2;
}

uint64_t AudioMentorInvalidate(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  if (!*(_BYTE *)result)
  {
    v1 = result;
    *(_BYTE *)result = 1;
    if (*(_QWORD *)(result + 104))
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(result + 96));
      *(_DWORD *)(v1 + 112) = 4;
      *(_BYTE *)(v1 + 116) = 1;
      FigMemoryBarrier();
      MEMORY[0x19402EF04](*(_QWORD *)(v1 + 96));
      FigSemaphoreSignal();
      FigThreadAbortForTeardown();
      result = FigThreadJoin();
      *(_QWORD *)(v1 + 104) = 0;
    }
    v2 = *(_QWORD *)(v1 + 24);
    if (v2)
    {
      if (*(_BYTE *)(v1 + 40))
      {
        v3 = *(_QWORD *)(v1 + 32);
        result = CMBaseObjectGetVTable();
        v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(result + 16) + 40);
        if (v4)
          result = v4(v2, v3);
      }
    }
    if (*(_QWORD *)(v1 + 16))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      return CMNotificationCenterRemoveListener();
    }
  }
  return result;
}

uint64_t sbcbq_removeLowWaterTrigger(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  _QWORD *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = (_QWORD *)DerivedStorage;
  if (a2)
    CMBufferQueueRemoveTrigger(*(CMBufferQueueRef *)(DerivedStorage + 120), *(CMBufferQueueTriggerToken *)(DerivedStorage + 112));
  MEMORY[0x19402EEEC](v4[11]);
  v4[12] = 0;
  v4[13] = 0;
  MEMORY[0x19402EF04](v4[11]);
  v4[14] = 0;
  return 0;
}

void sgffr_finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage;
  if (*(_QWORD *)(DerivedStorage + 56) && *(_BYTE *)(DerivedStorage + 32))
  {
    sgffr_finishPrerollBatch(a1, 0);
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  if (*(_QWORD *)v3)
  {
    CFRelease(*(CFTypeRef *)v3);
    *(_QWORD *)v3 = 0;
  }
  v4 = *(const void **)(v3 + 8);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(v3 + 8) = 0;
  }
  v5 = *(const void **)(v3 + 24);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(v3 + 24) = 0;
  }
  v6 = *(const void **)(v3 + 16);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(v3 + 16) = 0;
  }
  v7 = *(const void **)(v3 + 40);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(v3 + 40) = 0;
  }
  v8 = *(const void **)(v3 + 48);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(v3 + 48) = 0;
  }
  v9 = *(const void **)(v3 + 136);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(v3 + 136) = 0;
  }
  v10 = *(const void **)(v3 + 56);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(v3 + 56) = 0;
  }
}

uint64_t sbcbq_finalize()
{
  _QWORD *DerivedStorage;
  const void *v1;
  uint64_t result;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  FigBufferQueueRelease();
  FigBufferQueueRelease();
  v1 = (const void *)DerivedStorage[18];
  if (v1)
    CFRelease(v1);
  if (*DerivedStorage)
    FigSimpleMutexDestroy();
  result = DerivedStorage[11];
  if (result)
    return FigSimpleMutexDestroy();
  return result;
}

void *figPlaybackBossFinalize(_QWORD *a1)
{
  const void *v2;
  void *v3;

  FigPlaybackBossInvalidate((uint64_t)a1);
  FigSimpleMutexDestroy();
  a1[72] = 0;
  FigSimpleMutexDestroy();
  a1[3] = 0;
  FigSimpleMutexDestroy();
  a1[8] = 0;
  v2 = (const void *)a1[9];
  if (v2)
  {
    CFRelease(v2);
    a1[9] = 0;
  }
  v3 = (void *)a1[98];
  if (v3)
    os_release(v3);
  return memset(a1 + 2, 85, 0x348uLL);
}

void FigSyncMomentSourceDestroy(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

void playercentral_removeItemFromPlayQueueWithoutInformingSubPlayer(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  CFTypeRef v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 88));
  if (!CFSetContainsValue(*(CFSetRef *)(DerivedStorage + 80), a2))
    JUMPOUT(0x19402EF04);
  v4 = CFRetain(a2);
  CFSetRemoveValue(*(CFMutableSetRef *)(DerivedStorage + 80), a2);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 88));
  if (v4)
    CFRelease(v4);
}

void figAudioQueueRenderPipelineFinalize(uint64_t a1)
{
  _QWORD *DerivedStorage;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  NSObject *v8;
  NSObject *v9;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  figAudioQueueRenderPipelineInvalidate(a1);
  v3 = (const void *)DerivedStorage[5];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[5] = 0;
  }
  v4 = (const void *)DerivedStorage[4];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[4] = 0;
  }
  v5 = (const void *)DerivedStorage[15];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[15] = 0;
  }
  v6 = (const void *)DerivedStorage[23];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[23] = 0;
  }
  v7 = (const void *)DerivedStorage[7];
  if (v7)
  {
    CFRelease(v7);
    DerivedStorage[7] = 0;
  }
  if (DerivedStorage[6])
  {
    FigSimpleMutexDestroy();
    DerivedStorage[6] = 0;
  }
  if (DerivedStorage[1])
  {
    FigSimpleMutexDestroy();
    DerivedStorage[1] = 0;
  }
  v8 = DerivedStorage[2];
  if (v8)
  {
    dispatch_release(v8);
    DerivedStorage[2] = 0;
  }
  v9 = DerivedStorage[3];
  if (v9)
  {
    dispatch_release(v9);
    DerivedStorage[3] = 0;
  }
}

uint64_t figAudioQueueRenderPipelineInvalidate(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  uint64_t v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  v3 = *(NSObject **)(DerivedStorage + 24);
  if (v3 && v3 != dispatch_get_current_queue())
    dispatch_sync_f(v3, 0, (dispatch_function_t)faqrp_noop);
  if (!*(_BYTE *)DerivedStorage)
  {
    v4 = *(_QWORD *)(DerivedStorage + 40);
    if (v4)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListeners();
      FigAudioQueueInvalidate(v4);
    }
    faqrp_setTimebase(a1, 0);
    *(_BYTE *)DerivedStorage = 1;
  }
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 8));
  return 0;
}

void FigAudioQueueInvalidate(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex i;
  _QWORD *ValueAtIndex;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  _QWORD *v14;
  const void *v15;
  opaqueCMBufferQueue *v16;
  opaqueCMBufferQueueTriggerToken *v17;
  opaqueCMBufferQueueTriggerToken *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  void *v27;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 24))
    {
      MEMORY[0x19402EA0C]();
      if (*(_BYTE *)(a1 + 16))
        JUMPOUT(0x19402EA24);
      *(_BYTE *)(a1 + 16) = 1;
      FigMemoryBarrier();
      MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
    }
    else
    {
      if (*(_BYTE *)(a1 + 16))
        return;
      *(_BYTE *)(a1 + 16) = 1;
      FigMemoryBarrier();
    }
    if (*(_QWORD *)(a1 + 280))
    {
      *(_BYTE *)(a1 + 296) = 1;
      FigMemoryBarrier();
      FigSemaphoreSignal();
      FigThreadJoin();
      *(_QWORD *)(a1 + 280) = 0;
    }
    v2 = *(NSObject **)(a1 + 336);
    if (v2)
      dispatch_source_cancel(v2);
    v3 = *(NSObject **)(a1 + 32);
    if (v3)
      dispatch_sync_f(v3, 0, (dispatch_function_t)faq_noop);
    v4 = *(NSObject **)(a1 + 336);
    if (v4)
    {
      dispatch_release(v4);
      *(_QWORD *)(a1 + 336) = 0;
    }
    v5 = *(_QWORD *)(a1 + 24);
    if (v5)
      MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 24));
    v6 = *(const __CFArray **)(a1 + 176);
    if (v6)
    {
      Count = CFArrayGetCount(v6);
      if (Count >= 1)
      {
        v8 = Count;
        for (i = 0; i != v8; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), i);
          v11 = ValueAtIndex[5];
          if (v11)
          {
            if (*(_QWORD *)(a1 + 712))
            {
              faq_disconnectFromOfflineMixer(a1, (uint64_t)ValueAtIndex);
              v11 = ValueAtIndex[5];
            }
            FigAudioQueueTimingShimStop(v11, 1u);
          }
        }
      }
      v12 = *(const void **)(a1 + 176);
      if (v12)
      {
        CFRelease(v12);
        *(_QWORD *)(a1 + 176) = 0;
      }
    }
    if (v5)
      MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    *(_QWORD *)(a1 + 712) = 0;
    v13 = *(_QWORD *)(a1 + 24);
    if (v13)
      MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 24));
    while (1)
    {
      v14 = *(_QWORD **)(a1 + 184);
      if (!v14)
        break;
      *(_QWORD *)(a1 + 184) = *v14;
      faq_destroyTransitionRecord(v14);
    }
    if (v13)
      MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
    v15 = *(const void **)(a1 + 104);
    if (v15)
    {
      CFRelease(v15);
      *(_QWORD *)(a1 + 104) = 0;
    }
    v16 = *(opaqueCMBufferQueue **)(a1 + 64);
    if (v16)
    {
      v17 = *(opaqueCMBufferQueueTriggerToken **)(a1 + 88);
      if (v17)
      {
        CMBufferQueueRemoveTrigger(v16, v17);
        *(_QWORD *)(a1 + 88) = 0;
      }
      v18 = *(opaqueCMBufferQueueTriggerToken **)(a1 + 96);
      if (v18)
      {
        CMBufferQueueRemoveTrigger(*(CMBufferQueueRef *)(a1 + 64), v18);
        *(_QWORD *)(a1 + 96) = 0;
      }
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CFRelease(*(CFTypeRef *)(a1 + 80));
      FigBufferQueueRelease();
      *(_QWORD *)(a1 + 64) = 0;
    }
    faq_removeAudioProcessingTapListeners(a1);
    *(_BYTE *)(a1 + 236) = 0;
    *(_BYTE *)(a1 + 204) = 0;
    *(_BYTE *)(a1 + 212) = 0;
    *(_BYTE *)(a1 + 220) = 0;
    *(_BYTE *)(a1 + 228) = 0;
    v19 = *(const void **)(a1 + 240);
    if (v19)
    {
      CFRelease(v19);
      *(_QWORD *)(a1 + 240) = 0;
    }
    v20 = *(const void **)(a1 + 256);
    if (v20)
    {
      CFRelease(v20);
      *(_QWORD *)(a1 + 256) = 0;
    }
    v21 = *(const void **)(a1 + 264);
    if (v21)
    {
      CFRelease(v21);
      *(_QWORD *)(a1 + 264) = 0;
    }
    v22 = *(const void **)(a1 + 648);
    if (v22)
    {
      CFRelease(v22);
      *(_QWORD *)(a1 + 648) = 0;
    }
    v23 = *(const void **)(a1 + 656);
    if (v23)
    {
      CFRelease(v23);
      *(_QWORD *)(a1 + 656) = 0;
    }
    v24 = *(const void **)(a1 + 56);
    if (v24)
    {
      CFRelease(v24);
      *(_QWORD *)(a1 + 56) = 0;
    }
    v25 = *(const void **)(a1 + 728);
    if (v25)
    {
      CFRelease(v25);
      *(_QWORD *)(a1 + 728) = 0;
    }
    v26 = *(const void **)(a1 + 696);
    if (v26)
    {
      CFRelease(v26);
      *(_QWORD *)(a1 + 696) = 0;
    }
    faq_clearSeamHandlingState((__n128 *)a1);
    v27 = *(void **)(a1 + 744);
    if (v27)
    {
      os_release(v27);
      *(_QWORD *)(a1 + 744) = 0;
    }
  }
}

uint64_t itemasync_Invalidate(void *a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t DerivedStorage;

  CMBaseObjectGetDerivedStorage();
  v2 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v2)
  {
    v3 = (const void *)v2;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (FigAtomicCompareAndSwap32())
    {
      CFRetain(a1);
      dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 56), a1, (dispatch_function_t)itemasync_InvalidateOnQueue);
    }
    CFRelease(v3);
  }
  return 0;
}

uint64_t itemfig_Invalidate(const void *a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  const void *v4;
  uint64_t v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void (*v7)(const void *, const void *);
  NSObject *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const __CFArray *v33;
  CFIndex Count;
  CFIndex v35;
  CFIndex i;
  _DWORD *ValueAtIndex;
  const void *v38;
  const void *v39;
  const void *v40;
  const void *v41;
  const void *v42;
  const void *v43;
  const void *v44;
  const void *v45;
  const void *v46;
  const void *v47;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3)
  {
    v4 = v3;
    if (!*(_BYTE *)DerivedStorage)
    {
      v5 = CMBaseObjectGetDerivedStorage();
      if (dword_1EE2A2AC8)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      itemfig_invalidateRampOutTimer();
      MEMORY[0x19402EA0C](*(_QWORD *)(v5 + 496));
      if (*(_BYTE *)(DerivedStorage + 1))
      {
        CFRetain(a1);
        MEMORY[0x19402EA24](*(_QWORD *)(v5 + 496));
        v7 = *(void (**)(const void *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
        if (v7)
          v7(v4, a1);
      }
      else
      {
        MEMORY[0x19402EA24](*(_QWORD *)(v5 + 496));
      }
      *(_BYTE *)DerivedStorage = 1;
      if (*(_DWORD *)(DerivedStorage + 524))
      {
        v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v9 = *(const void **)(DerivedStorage + 1384);
      if (v9)
      {
        CFRelease(v9);
        *(_QWORD *)(DerivedStorage + 1384) = 0;
      }
      if (*(_QWORD *)(DerivedStorage + 1344))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
        v10 = *(const void **)(DerivedStorage + 1344);
        if (v10)
        {
          CFRelease(v10);
          *(_QWORD *)(DerivedStorage + 1344) = 0;
        }
      }
      if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 1216))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListeners();
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListeners();
      }
      itemfig_updateListenersForVideoTrack((uint64_t)a1, 0);
      v11 = *(const void **)(DerivedStorage + 960);
      if (v11)
        CFRelease(v11);
      v12 = *(const void **)(DerivedStorage + 944);
      if (v12)
        CFRelease(v12);
      v13 = *(const void **)(DerivedStorage + 1280);
      if (v13)
      {
        CFRelease(v13);
        *(_QWORD *)(DerivedStorage + 1280) = 0;
      }
      v14 = *(const void **)(DerivedStorage + 1224);
      if (v14)
      {
        CFRelease(v14);
        *(_QWORD *)(DerivedStorage + 1224) = 0;
      }
      v15 = *(const void **)(DerivedStorage + 1232);
      if (v15)
      {
        CFRelease(v15);
        *(_QWORD *)(DerivedStorage + 1232) = 0;
      }
      itemfig_removeAllImageQueues((uint64_t)a1);
      v16 = *(const void **)(DerivedStorage + 864);
      if (v16)
      {
        CFRelease(v16);
        *(_QWORD *)(DerivedStorage + 864) = 0;
      }
      v17 = *(const void **)(DerivedStorage + 1128);
      if (v17)
      {
        CFRelease(v17);
        *(_QWORD *)(DerivedStorage + 1128) = 0;
      }
      playeritemfig_releaseVideoCompositionObjects((uint64_t)a1);
      v18 = *(const void **)(DerivedStorage + 656);
      if (v18)
      {
        CFRelease(v18);
        *(_QWORD *)(DerivedStorage + 656) = 0;
      }
      v19 = *(const void **)(DerivedStorage + 744);
      if (v19)
      {
        CFRelease(v19);
        *(_QWORD *)(DerivedStorage + 744) = 0;
      }
      v20 = *(const void **)(DerivedStorage + 752);
      if (v20)
      {
        CFRelease(v20);
        *(_QWORD *)(DerivedStorage + 752) = 0;
      }
      v21 = *(const void **)(DerivedStorage + 760);
      if (v21)
      {
        CFRelease(v21);
        *(_QWORD *)(DerivedStorage + 760) = 0;
      }
      v22 = *(const void **)(DerivedStorage + 768);
      if (v22)
      {
        CFRelease(v22);
        *(_QWORD *)(DerivedStorage + 768) = 0;
      }
      v23 = *(const void **)(DerivedStorage + 920);
      if (v23)
      {
        CFRelease(v23);
        *(_QWORD *)(DerivedStorage + 920) = 0;
      }
      v24 = *(const void **)(DerivedStorage + 928);
      if (v24)
      {
        CFRelease(v24);
        *(_QWORD *)(DerivedStorage + 928) = 0;
      }
      v25 = *(const void **)(DerivedStorage + 1448);
      if (v25)
      {
        CFRelease(v25);
        *(_QWORD *)(DerivedStorage + 1448) = 0;
      }
      v26 = *(const void **)(DerivedStorage + 1456);
      if (v26)
      {
        CFRelease(v26);
        *(_QWORD *)(DerivedStorage + 1456) = 0;
      }
      v27 = *(const void **)(DerivedStorage + 2032);
      if (v27)
      {
        CFRelease(v27);
        *(_QWORD *)(DerivedStorage + 2032) = 0;
      }
      v28 = *(const void **)(DerivedStorage + 2128);
      if (v28)
      {
        CFRelease(v28);
        *(_QWORD *)(DerivedStorage + 2128) = 0;
      }
      if (*(_QWORD *)(DerivedStorage + 968))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
      }
      v29 = *(const void **)(DerivedStorage + 976);
      if (v29)
      {
        CFRelease(v29);
        *(_QWORD *)(DerivedStorage + 976) = 0;
      }
      v30 = *(const void **)(DerivedStorage + 1336);
      if (v30)
      {
        CFRelease(v30);
        *(_QWORD *)(DerivedStorage + 1336) = 0;
      }
      if (*(_QWORD *)(DerivedStorage + 128))
      {
        CMByteStreamGetCMBaseObject();
        FigCRABSGetClassID();
        if (CMBaseObjectIsMemberOfClass())
        {
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterRemoveWeakListener();
        }
      }
      v31 = *(const void **)(DerivedStorage + 632);
      if (v31)
      {
        CFRelease(v31);
        *(_QWORD *)(DerivedStorage + 632) = 0;
      }
      v32 = *(const void **)(DerivedStorage + 112);
      if (v32)
      {
        CFRelease(v32);
        *(_QWORD *)(DerivedStorage + 112) = 0;
      }
      v33 = *(const __CFArray **)(DerivedStorage + 648);
      if (v33)
      {
        Count = CFArrayGetCount(v33);
        if (Count >= 1)
        {
          v35 = Count;
          for (i = 0; i != v35; ++i)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 648), i);
            if (ValueAtIndex[1] == 1986618469)
              itemfig_clearTrackImageQueueTable((uint64_t)a1, (uint64_t)ValueAtIndex);
          }
        }
      }
      v38 = *(const void **)(DerivedStorage + 680);
      if (v38)
      {
        CFRelease(v38);
        *(_QWORD *)(DerivedStorage + 680) = 0;
      }
      v39 = *(const void **)(DerivedStorage + 784);
      if (v39)
      {
        CFRelease(v39);
        *(_QWORD *)(DerivedStorage + 784) = 0;
      }
      v40 = *(const void **)(DerivedStorage + 792);
      if (v40)
      {
        CFRelease(v40);
        *(_QWORD *)(DerivedStorage + 792) = 0;
      }
      v41 = *(const void **)(DerivedStorage + 800);
      if (v41)
      {
        CFRelease(v41);
        *(_QWORD *)(DerivedStorage + 800) = 0;
      }
      v42 = *(const void **)(DerivedStorage + 1792);
      if (v42)
      {
        CFRelease(v42);
        *(_QWORD *)(DerivedStorage + 1792) = 0;
      }
      v43 = *(const void **)(DerivedStorage + 1816);
      if (v43)
      {
        CFRelease(v43);
        *(_QWORD *)(DerivedStorage + 1816) = 0;
      }
      v44 = *(const void **)(DerivedStorage + 1832);
      if (v44)
      {
        CFRelease(v44);
        *(_QWORD *)(DerivedStorage + 1832) = 0;
      }
      v45 = *(const void **)(DerivedStorage + 1840);
      if (v45)
      {
        CFRelease(v45);
        *(_QWORD *)(DerivedStorage + 1840) = 0;
      }
      v46 = *(const void **)(DerivedStorage + 1848);
      if (v46)
      {
        CFRelease(v46);
        *(_QWORD *)(DerivedStorage + 1848) = 0;
      }
      v47 = *(const void **)(DerivedStorage + 1160);
      if (v47)
      {
        CFRelease(v47);
        *(_QWORD *)(DerivedStorage + 1160) = 0;
      }
      itemfig_reportingAgentTeardown();
    }
    CFRelease(v3);
  }
  return 0;
}

void ReleaseSampleDescriptionInfoArray(uint64_t a1)
{
  const __CFArray *v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex i;
  void *ValueAtIndex;
  const void *v7;
  const void *v8;

  v2 = *(const __CFArray **)(a1 + 56);
  if (v2)
  {
    Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      v4 = Count;
      for (i = 0; i != v4; ++i)
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), i);
        free(ValueAtIndex);
      }
    }
    v7 = *(const void **)(a1 + 56);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(a1 + 56) = 0;
    }
  }
  v8 = *(const void **)(a1 + 40);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a1 + 40) = 0;
  }
}

void ReleaseDataReferenceInfoArray(uint64_t a1)
{
  const __CFArray *v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex i;
  _QWORD *ValueAtIndex;
  const void *v7;
  const void *v8;
  const void *v9;

  v2 = *(const __CFArray **)(a1 + 64);
  if (v2)
  {
    Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      v4 = Count;
      for (i = 0; i != v4; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 64), i);
        v7 = (const void *)ValueAtIndex[1];
        if (v7)
          CFRelease(v7);
        v8 = (const void *)ValueAtIndex[2];
        if (v8)
          CFRelease(v8);
        free(ValueAtIndex);
      }
    }
    v9 = *(const void **)(a1 + 64);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(a1 + 64) = 0;
    }
  }
}

void FigiTunesMetadataFinalize()
{
  CFTypeRef *DerivedStorage;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    *DerivedStorage = 0;
  }
}

uint64_t FigCachedFileByteStreamFinalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  uint64_t v2;
  void *v3;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  v2 = *(_QWORD *)(DerivedStorage + 24);
  if (v2)
  {
    if (*(_BYTE *)(DerivedStorage + 120))
    {
      FigReadCacheContainerShowDisinterestInCaching(v2);
      v2 = *(_QWORD *)(DerivedStorage + 24);
    }
    FigReadCacheReleaseContainer(v2);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v3 = *(void **)(DerivedStorage + 32);
  if (v3)
  {
    FigReadCacheDisposeRequestCompletion(v3);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  FigSimpleMutexDestroy();
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
  v4 = *(const void **)(DerivedStorage + 16);
  if (v4)
    CFRelease(v4);
  return FigByteStreamStatsTeardownWorker();
}

uint64_t FigReadCacheReleaseContainer(uint64_t a1)
{
  _DWORD *v2;

  if (a1)
  {
    v2 = malloc_type_calloc(1uLL, 0x40uLL, 0x1062040E84F1957uLL);
    v2[4] = 4;
    *((_QWORD *)v2 + 3) = a1;
    IssueFigReadCacheRequest(v2);
  }
  return 0;
}

void FigReadCacheDisposeRequestCompletion(void *a1)
{
  if (a1)
  {
    FigSimpleMutexDestroy();
    FigSemaphoreDestroy();
    free(a1);
  }
}

void itemfig_Finalize(const void *a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const __CFArray *v18;
  CFIndex Count;
  CFIndex v20;
  CFIndex i;
  _QWORD *ValueAtIndex;
  _QWORD *v23;
  const void *v24;
  int v25;
  BOOL v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  const void *v36;
  const void *v37;
  const void *v38;
  const void *v39;
  const void *v40;
  const void *v41;
  const void *v42;
  const void *v43;
  const void *v44;
  const void *v45;
  const void *v46;
  const void *v47;
  const void *v48;
  const void *v49;
  const void *v50;
  const void *v51;
  const void *v52;
  const void *v53;
  const void *v54;
  const void *v55;
  const void *v56;
  const void *v57;
  const void *v58;
  const void *v59;
  const void *v60;
  const void *v61;
  const void *v62;
  const void *v63;
  const void *v64;
  const void *v65;
  const void *v66;
  const void *v67;
  const void *v68;
  const void *v69;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  itemfig_Invalidate(a1);
  v4 = *(const void **)(DerivedStorage + 1744);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(DerivedStorage + 1776);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(DerivedStorage + 16);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  FigStopForwardingMediaServicesProcessDeathNotification();
  FigStopForwardingMediaServicesProcessDeathNotification();
  v7 = *(const void **)(DerivedStorage + 824);
  if (v7)
    CFRelease(v7);
  v8 = 0;
  v9 = DerivedStorage + 368;
  do
  {
    v10 = *(const void **)(v9 + v8);
    if (v10)
    {
      CFRelease(v10);
      *(_QWORD *)(v9 + v8) = 0;
    }
    v8 += 8;
  }
  while (v8 != 112);
  v11 = *(const void **)(DerivedStorage + 1760);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(DerivedStorage + 1760) = 0;
  }
  v12 = *(const void **)(DerivedStorage + 1768);
  if (v12)
    CFRelease(v12);
  v13 = *(const void **)(DerivedStorage + 128);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(DerivedStorage + 128) = 0;
  }
  v14 = *(const void **)(DerivedStorage + 968);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(DerivedStorage + 968) = 0;
  }
  v15 = *(const void **)(DerivedStorage + 1216);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(DerivedStorage + 1216) = 0;
  }
  v16 = *(const void **)(DerivedStorage + 1248);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(DerivedStorage + 1248) = 0;
  }
  v17 = *(const void **)(DerivedStorage + 1272);
  if (v17)
  {
    CFRelease(v17);
    *(_QWORD *)(DerivedStorage + 1272) = 0;
  }
  v18 = *(const __CFArray **)(DerivedStorage + 648);
  if (v18)
  {
    Count = CFArrayGetCount(v18);
    if (Count >= 1)
    {
      v20 = Count;
      for (i = 0; i != v20; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 648), i);
        v23 = ValueAtIndex;
        v24 = (const void *)ValueAtIndex[2];
        if (v24)
        {
          v25 = *((_DWORD *)ValueAtIndex + 1);
          v26 = v25 == 1986618469 || v25 == 1635088502;
          if (!v26 || (FigStopForwardingMediaServicesProcessDeathNotification(), (v24 = (const void *)v23[2]) != 0))
          {
            CFRelease(v24);
            v23[2] = 0;
          }
        }
        v27 = (const void *)v23[3];
        if (v27)
        {
          CFRelease(v27);
          v23[3] = 0;
        }
        v28 = (const void *)v23[4];
        if (v28)
        {
          CFRelease(v28);
          v23[4] = 0;
        }
        v29 = (const void *)v23[5];
        if (v29)
        {
          CFRelease(v29);
          v23[5] = 0;
        }
        v30 = (const void *)v23[6];
        if (v30)
        {
          CFRelease(v30);
          v23[6] = 0;
        }
        v31 = (const void *)v23[7];
        if (v31)
        {
          CFRelease(v31);
          v23[7] = 0;
        }
        v32 = (const void *)v23[10];
        if (v32)
        {
          CFRelease(v32);
          v23[10] = 0;
        }
        v33 = (const void *)v23[12];
        if (v33)
        {
          CFRelease(v33);
          v23[12] = 0;
        }
        v34 = (const void *)v23[11];
        if (v34)
        {
          CFRelease(v34);
          v23[11] = 0;
        }
        v35 = (const void *)v23[13];
        if (v35)
        {
          CFRelease(v35);
          v23[13] = 0;
        }
        v36 = (const void *)v23[14];
        if (v36)
        {
          CFRelease(v36);
          v23[14] = 0;
        }
        v37 = (const void *)v23[16];
        if (v37)
        {
          CFRelease(v37);
          v23[16] = 0;
        }
        v38 = (const void *)v23[18];
        if (v38)
        {
          CFRelease(v38);
          v23[18] = 0;
        }
        v39 = (const void *)v23[19];
        if (v39)
        {
          CFRelease(v39);
          v23[19] = 0;
        }
        v40 = (const void *)v23[22];
        if (v40)
        {
          CFRelease(v40);
          v23[22] = 0;
        }
        v41 = (const void *)v23[23];
        if (v41)
        {
          CFRelease(v41);
          v23[23] = 0;
        }
        v42 = (const void *)v23[24];
        if (v42)
        {
          CFRelease(v42);
          v23[24] = 0;
        }
        v43 = (const void *)v23[26];
        if (v43)
        {
          CFRelease(v43);
          v23[26] = 0;
        }
        v44 = (const void *)v23[25];
        if (v44)
        {
          CFRelease(v44);
          v23[25] = 0;
        }
        v45 = (const void *)v23[27];
        if (v45)
        {
          CFRelease(v45);
          v23[27] = 0;
        }
        v46 = (const void *)v23[28];
        if (v46)
        {
          CFRelease(v46);
          v23[28] = 0;
        }
        v47 = (const void *)v23[29];
        if (v47)
        {
          CFRelease(v47);
          v23[29] = 0;
        }
        v48 = (const void *)v23[31];
        if (v48)
        {
          CFRelease(v48);
          v23[31] = 0;
        }
        v49 = (const void *)v23[30];
        if (v49)
        {
          CFRelease(v49);
          v23[30] = 0;
        }
        v50 = (const void *)v23[32];
        if (v50)
        {
          CFRelease(v50);
          v23[32] = 0;
        }
        v51 = (const void *)v23[33];
        if (v51)
        {
          CFRelease(v51);
          v23[33] = 0;
        }
        v52 = (const void *)v23[34];
        if (v52)
        {
          CFRelease(v52);
          v23[34] = 0;
        }
        v53 = (const void *)v23[35];
        if (v53)
        {
          CFRelease(v53);
          v23[35] = 0;
        }
        v54 = (const void *)v23[36];
        if (v54)
        {
          CFRelease(v54);
          v23[36] = 0;
        }
        v55 = (const void *)v23[37];
        if (v55)
        {
          CFRelease(v55);
          v23[37] = 0;
        }
        v56 = (const void *)v23[21];
        if (v56)
          CFRelease(v56);
        free(v23);
      }
    }
    v57 = *(const void **)(DerivedStorage + 648);
    if (v57)
    {
      CFRelease(v57);
      *(_QWORD *)(DerivedStorage + 648) = 0;
    }
  }
  if (*(_QWORD *)(DerivedStorage + 640))
  {
    FigSimpleMutexDestroy();
    *(_QWORD *)(DerivedStorage + 640) = 0;
  }
  v58 = *(const void **)(DerivedStorage + 1048);
  if (v58)
  {
    CFRelease(v58);
    *(_QWORD *)(DerivedStorage + 1048) = 0;
  }
  v59 = *(const void **)(DerivedStorage + 1088);
  if (v59)
  {
    CFRelease(v59);
    *(_QWORD *)(DerivedStorage + 1088) = 0;
  }
  itemfig_releaseAIMEDataAndAllAIMEDataChannelResources();
  v60 = *(const void **)(DerivedStorage + 1096);
  if (v60)
  {
    CFRelease(v60);
    *(_QWORD *)(DerivedStorage + 1096) = 0;
  }
  if (*(_QWORD *)(DerivedStorage + 1120))
  {
    FigSimpleMutexDestroy();
    *(_QWORD *)(DerivedStorage + 1120) = 0;
  }
  if (*(_QWORD *)(DerivedStorage + 504))
  {
    FigSimpleMutexDestroy();
    *(_QWORD *)(DerivedStorage + 504) = 0;
  }
  v61 = *(const void **)(DerivedStorage + 512);
  if (v61)
  {
    CFRelease(v61);
    *(_QWORD *)(DerivedStorage + 512) = 0;
  }
  if (*(_QWORD *)(DerivedStorage + 1208))
    FigSimpleMutexDestroy();
  if (*(_QWORD *)(DerivedStorage + 616))
    FigSimpleMutexDestroy();
  if (*(_QWORD *)(DerivedStorage + 1736))
    FigSimpleMutexDestroy();
  if (*(_QWORD *)(DerivedStorage + 1400))
    FigSimpleMutexDestroy();
  if (*(_QWORD *)(DerivedStorage + 672))
  {
    FigSimpleMutexDestroy();
    *(_QWORD *)(DerivedStorage + 672) = 0;
  }
  if (*(_QWORD *)(DerivedStorage + 776))
  {
    FigSimpleMutexDestroy();
    *(_QWORD *)(DerivedStorage + 776) = 0;
  }
  if (*(_QWORD *)(DerivedStorage + 848))
  {
    FigSimpleMutexDestroy();
    *(_QWORD *)(DerivedStorage + 848) = 0;
  }
  v62 = *(const void **)(DerivedStorage + 1144);
  if (v62)
  {
    CFRelease(v62);
    *(_QWORD *)(DerivedStorage + 1144) = 0;
  }
  v63 = *(const void **)(DerivedStorage + 328);
  if (v63)
  {
    CFRelease(v63);
    *(_QWORD *)(DerivedStorage + 328) = 0;
  }
  v64 = *(const void **)(DerivedStorage + 336);
  if (v64)
  {
    CFRelease(v64);
    *(_QWORD *)(DerivedStorage + 336) = 0;
  }
  v65 = *(const void **)(DerivedStorage + 1032);
  if (v65)
  {
    CFRelease(v65);
    *(_QWORD *)(DerivedStorage + 1032) = 0;
  }
  if (*(_QWORD *)(DerivedStorage + 1896))
  {
    FigSimpleMutexDestroy();
    *(_QWORD *)(DerivedStorage + 1896) = 0;
  }
  v66 = *(const void **)(DerivedStorage + 2072);
  if (v66)
  {
    CFRelease(v66);
    *(_QWORD *)(DerivedStorage + 2072) = 0;
  }
  if (*(_QWORD *)(DerivedStorage + 2088))
  {
    FigSimpleMutexDestroy();
    *(_QWORD *)(DerivedStorage + 2088) = 0;
  }
  v67 = *(const void **)(DerivedStorage + 2144);
  if (v67)
  {
    CFRelease(v67);
    *(_QWORD *)(DerivedStorage + 2144) = 0;
  }
  v68 = *(const void **)(DerivedStorage + 2136);
  if (v68)
  {
    CFRelease(v68);
    *(_QWORD *)(DerivedStorage + 2136) = 0;
  }
  v69 = *(const void **)(DerivedStorage + 984);
  if (v69)
  {
    CFRelease(v69);
    *(_QWORD *)(DerivedStorage + 984) = 0;
  }
  if (v3)
    CFRelease(v3);
}

void playerasync_removeItemFromPlayQueueWithoutInformingSubPlayer(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFSetContainsValue(*(CFSetRef *)(DerivedStorage + 48), a2))
  {
    CFRetain(a2);
    CFSetRemoveValue(*(CFMutableSetRef *)(DerivedStorage + 48), a2);
    CFRelease(a2);
  }
}

void itemasync_Finalize()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  const void *v2;
  const void *v3;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 4))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    *(_BYTE *)(DerivedStorage + 4) = 0;
  }
  if (*(_QWORD *)(DerivedStorage + 24))
  {
    if (*(_QWORD *)(DerivedStorage + 16))
    {
      v1 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v1)
      {
        v2 = (const void *)v1;
        CMBaseObjectGetDerivedStorage();
        FigCFWeakReferenceTableRemoveValue();
        CFRelease(v2);
      }
    }
  }
  v3 = *(const void **)(DerivedStorage + 16);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 24);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
}

uint64_t FigDiskCacheRepositoryCopyDefaultParentURLForCurrentTask(CFTypeRef *a1, int a2)
{
  const __CFAllocator *v4;
  const __CFURL *v5;
  const __CFURL *v6;
  size_t v7;
  CFURLRef v8;
  uint64_t v9;
  CFStringRef v10;
  uint64_t v11;
  UInt8 buffer[1024];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    *a1 = 0;
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v5 = (const __CFURL *)FigCFURLCreateFromSystemTemporaryDirectory();
    if (v5)
    {
      v6 = v5;
      if (!CFURLGetFileSystemRepresentation(v5, 0, buffer, 1024))
      {
        v9 = FigSignalErrorAt();
        goto LABEL_10;
      }
      CFRelease(v6);
      __strlcat_chk();
      v7 = strlen((const char *)buffer);
      v8 = CFURLCreateFromFileSystemRepresentation(v4, buffer, v7, 1u);
      if (v8)
      {
        v6 = v8;
        if (!a2 || (v9 = FigCFURLCreateDirectory(), !(_DWORD)v9))
        {
          v10 = CFURLGetString(v6);
          if (v10)
          {
            v11 = 0;
            *a1 = CFRetain(v10);
          }
          else
          {
            *a1 = 0;
            v11 = 4294954669;
          }
          goto LABEL_13;
        }
LABEL_10:
        v11 = v9;
LABEL_13:
        CFRelease(v6);
        return v11;
      }
    }
    return 4294954669;
  }
  return FigSignalErrorAt();
}

uint64_t FigCreateCacheMemoryAllocatorForCRABS(uint64_t a1, CFAllocatorRef *a2)
{
  _QWORD *v4;
  CFAllocatorRef v5;
  CFAllocatorContext context;

  v4 = malloc_type_malloc(0x20uLL, 0x1020040D49128EBuLL);
  context.version = 0;
  context.info = v4;
  context.retain = 0;
  context.release = (CFAllocatorReleaseCallBack)QTMovieCacheMemReleaseCallBack;
  context.copyDescription = 0;
  context.allocate = (CFAllocatorAllocateCallBack)QTMovieCacheMemAllocateCallBack;
  context.reallocate = (CFAllocatorReallocateCallBack)QTMovieCacheMemReallocateCallBack;
  context.deallocate = (CFAllocatorDeallocateCallBack)QTMovieCacheMemDeallocateCallBack;
  context.preferredSize = (CFAllocatorPreferredSizeCallBack)QTMovieCacheMemPreferredSizeCallBack;
  *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a1;
  v5 = CFAllocatorCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &context);
  *a2 = v5;
  if (v5)
    return 0;
  else
    return 4294967188;
}

uint64_t FigShared_CopyDiskCacheParams(const __CFString *cf, int64_t *a2, int64_t *a3, int64_t *a4, BOOL *a5, _QWORD *a6)
{
  const __CFString *v11;
  uint64_t DirectoryAtPath;
  uint64_t v13;
  uint64_t v14;
  CFTypeRef v16;
  CFTypeRef cfa;

  v11 = cf;
  v16 = 0;
  cfa = cf;
  if (cf)
  {
    CFRetain(cf);
    if ((sDiskCacheIsRemote & 1) != 0)
    {
      DirectoryAtPath = fs_CreateDirectoryAtPath(v11);
      goto LABEL_6;
    }
LABEL_12:
    v14 = FigSharedRemote_CopyDiskCacheParams(v11, a2, a3, a4, a5, (uint64_t)a6);
    goto LABEL_13;
  }
  if ((sDiskCacheIsRemote & 1) == 0)
    goto LABEL_12;
  DirectoryAtPath = FigDiskCacheRepositoryCopyDefaultParentURLForCurrentTask(&cfa, 0);
LABEL_6:
  v13 = DirectoryAtPath;
  if ((_DWORD)DirectoryAtPath)
    goto LABEL_14;
  if ((sDiskCacheIsRemote & 1) == 0)
  {
    v11 = (const __CFString *)cfa;
    goto LABEL_12;
  }
  MEMORY[0x19402F294](&fmp_EnsureDiskCache_sInitDiskCacheOnce, InitDiskCache);
  v13 = sDiskInitStatus;
  if (!sDiskInitStatus)
  {
    v13 = fs_CopyRepositoryByParent((const __CFString *)cfa, 1, (void **)&v16);
    if (!(_DWORD)v13)
    {
      v14 = FigDiskCacheRepositoryCopyInfo(v16, (unint64_t)a2, (unint64_t)a3, (unint64_t)a4, a6);
LABEL_13:
      v13 = v14;
    }
  }
LABEL_14:
  if (cfa)
    CFRelease(cfa);
  if (v16)
    CFRelease(v16);
  return v13;
}

uint64_t InitDiskCache()
{
  uint64_t result;

  sDiskCacheLock = FigSimpleMutexCreate();
  if (sDiskCacheLock
    && (sDiskCacheList = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) != 0)
  {
    result = 0;
  }
  else
  {
    result = FigSignalErrorAt();
  }
  sDiskInitStatus = result;
  return result;
}

uint64_t FigDiskCacheRepositoryCreate(const __CFURL *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  const __CFAllocator *v8;
  uint64_t Instance;
  uint64_t v10;
  uint64_t v11;
  const __CFString *v12;
  CFURLRef v13;
  const __CFURL *v14;
  const __CFURL *v15;
  CFURLRef v16;
  const CFDictionaryKeyCallBacks *v17;
  const CFDictionaryValueCallBacks *v18;
  uint64_t v19;

  if (!a1 || !a4)
    return FigSignalErrorAt();
  *a4 = 0;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (sRegisterFigDiskCacheRepositoryTypeOnce != -1)
    dispatch_once_f(&sRegisterFigDiskCacheRepositoryTypeOnce, 0, (dispatch_function_t)RegisterFigDiskCacheRepositoryType);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v10 = Instance;
  v11 = FigSimpleMutexCreate();
  *(_QWORD *)(v10 + 16) = v11;
  if (!v11)
  {
    v12 = 0;
    v15 = 0;
    goto LABEL_29;
  }
  *(_QWORD *)(v10 + 24) = 0;
  v12 = CFURLCopyFileSystemPath(a1, kCFURLPOSIXPathStyle);
  if (v12)
  {
    v13 = CFURLCreateWithFileSystemPath(v8, v12, kCFURLPOSIXPathStyle, 1u);
    *(_QWORD *)(v10 + 24) = v13;
    if (v13)
      goto LABEL_9;
    goto LABEL_13;
  }
  if (!*(_QWORD *)(v10 + 24))
  {
LABEL_13:
    v15 = 0;
LABEL_29:
    v19 = FigSignalErrorAt();
    goto LABEL_30;
  }
LABEL_9:
  *(_QWORD *)(v10 + 32) = 0;
  v14 = (const __CFURL *)MEMORY[0x19402A59C](v8, CFSTR("diskcacherepository.plist"), 0, 0);
  v15 = v14;
  if (v14)
  {
    v16 = CFURLCopyAbsoluteURL(v14);
    *(_QWORD *)(v10 + 32) = v16;
    if (!v16)
      goto LABEL_29;
  }
  else if (!*(_QWORD *)(v10 + 32))
  {
    goto LABEL_29;
  }
  *(_QWORD *)(v10 + 64) = 0;
  *(_QWORD *)(v10 + 40) = a2;
  *(_QWORD *)(v10 + 48) = a3;
  v17 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v18 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  *(_QWORD *)(v10 + 72) = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(v10 + 80) = CFDictionaryCreateMutable(v8, 0, v17, v18);
  *(_QWORD *)(v10 + 88) = CFDictionaryCreateMutable(v8, 0, v17, v18);
  *(_QWORD *)(v10 + 96) = CFDictionaryCreateMutable(v8, 0, v17, v18);
  *(_QWORD *)(v10 + 104) = CFDictionaryCreateMutable(v8, 0, v17, v18);
  *(_DWORD *)(v10 + 128) = getpid();
  if (!*(_QWORD *)(v10 + 72)
    || !*(_QWORD *)(v10 + 80)
    || !*(_QWORD *)(v10 + 96)
    || !*(_QWORD *)(v10 + 88)
    || !*(_QWORD *)(v10 + 104))
  {
    goto LABEL_29;
  }
  if (!FigCFURLCreateDirectory())
  {
    if (!FigFileForkOpenMainByCFURL())
    {
      fdcr_ReadRepositoryPlist(v10);
      fdcr_WriteRepositoryPlist(v10, 0, 1, 1);
      FigFileForkClose();
    }
    v19 = 0;
    *(_BYTE *)(v10 + 112) = 1;
    *a4 = v10;
    goto LABEL_31;
  }
  v19 = 4294954675;
LABEL_30:
  CFRelease((CFTypeRef)v10);
LABEL_31:
  if (v15)
    CFRelease(v15);
  if (v12)
    CFRelease(v12);
  return v19;
}

void fdcr_RemoveFilePathInListFromArray(const __CFArray *a1, const __CFDictionary *a2, int a3)
{
  CFMutableSetRef Mutable;
  const __CFSet *v7;
  CFIndex Count;
  unint64_t v9;
  const __CFURL *ValueAtIndex;
  CFStringRef PathComponent;
  char v12;

  if (a1 && a2 && (Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0])) != 0)
  {
    v7 = Mutable;
    CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)fdcr_CopyFilenameFromPathDictionaryApplierFunction, Mutable);
    Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      v9 = Count + 1;
      do
      {
        ValueAtIndex = (const __CFURL *)CFArrayGetValueAtIndex(a1, v9 - 2);
        PathComponent = CFURLCopyLastPathComponent(ValueAtIndex);
        if (CFSetContainsValue(v7, PathComponent))
        {
          if (!a3 || (v12 = 0, !fdcr_IsResourceInUse((uint64_t)ValueAtIndex, &v12)) && v12)
            CFArrayRemoveValueAtIndex(a1, v9 - 2);
        }
        if (PathComponent)
          CFRelease(PathComponent);
        --v9;
      }
      while (v9 > 1);
    }
    CFRelease(v7);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t FigDiskCacheRepositorySetTarget(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;

  if (!a1)
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
  v8 = FigCFURLCreateDirectory();
  if ((_DWORD)v8)
  {
    v9 = v8;
  }
  else if (FigFileForkOpenMainByCFURL())
  {
    v9 = 0;
  }
  else
  {
    fdcr_ReadRepositoryPlist(a1);
    if (a4)
    {
      *(_BYTE *)(a1 + 56) = 1;
    }
    else
    {
      if (a2 >= 1)
        *(_QWORD *)(a1 + 40) = a2;
      if (a3 >= 1)
        *(_QWORD *)(a1 + 48) = a3;
    }
    v9 = fdcr_WriteRepositoryPlist(a1, 0, 1, 0);
    FigFileForkClose();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  return v9;
}

uint64_t fdcr_WriteRepositoryPlist(uint64_t a1, uint64_t a2, int a3, char a4)
{
  uint64_t v8;
  const __CFAllocator *v9;
  const __CFURL *v10;
  CFMutableArrayRef Mutable;
  __CFArray *v12;
  DIR *v13;
  DIR *v14;
  dirent *v15;
  const char *v16;
  const char *v17;
  const char *d_name;
  unsigned int d_type;
  BOOL v20;
  int v21;
  const __CFString *v23;
  const __CFString *v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  CFURLRef v28;
  CFURLRef v29;
  int v30;
  CFIndex Count;
  CFIndex v32;
  CFIndex v33;
  const __CFString *v34;
  const __CFArray *v35;
  const __CFURL *ValueAtIndex;
  const __CFArray *v37;
  CFIndex v38;
  unint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  CFIndex v43;
  unint64_t v44;
  void *v45;
  const CFDictionaryKeyCallBacks *v46;
  const CFDictionaryValueCallBacks *v47;
  CFMutableDictionaryRef v48;
  CFMutableDictionaryRef v49;
  CFMutableDictionaryRef v50;
  uint64_t v51;
  CFDictionaryRef v52;
  CFDictionaryRef v53;
  uint64_t i;
  const void *v55;
  char v57;
  const __CFURL *url;
  char v59;
  const __CFArray *propertyValueTypeRefPtr;
  void *keys[2];
  __int128 v62;
  __int128 v63;
  const __CFString *v64;
  void *values[2];
  __int128 v66;
  __int128 v67;
  CFNumberRef v68;
  uint64_t buffer[128];
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v68 = 0;
  v66 = 0u;
  v67 = 0u;
  *(_OWORD *)values = 0u;
  *(_OWORD *)keys = xmmword_1E2F8A218;
  v62 = *(_OWORD *)&off_1E2F8A228;
  v63 = xmmword_1E2F8A238;
  v64 = CFSTR("automaticallyManagesSize");
  v8 = FigCFURLCreateDirectory();
  if (!(_DWORD)v8)
  {
    v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (a3)
    {
      v10 = *(const __CFURL **)(a1 + 24);
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      if (Mutable)
      {
        v12 = Mutable;
        if (CFURLGetFileSystemRepresentation(v10, 1u, (UInt8 *)buffer, 1024))
        {
          v13 = opendir((const char *)buffer);
          if (v13)
          {
            v14 = v13;
            v57 = a4;
            url = v10;
            v15 = readdir(v13);
            if (v15)
            {
              v16 = ".";
              v17 = "..";
              do
              {
                d_name = v15->d_name;
                if (v15->d_name[0])
                {
                  d_type = v15->d_type;
                  v20 = d_type > 8;
                  v21 = (1 << d_type) & 0x111;
                  if (!v20 && v21 != 0)
                  {
                    if (strcmp(v15->d_name, v16))
                    {
                      if (strcmp(d_name, v17))
                      {
                        if (strcmp(d_name, "diskcacherepository.plist"))
                        {
                          v23 = CFStringCreateWithCString(v9, d_name, 0x8000100u);
                          if (v23)
                          {
                            v24 = v23;
                            v25 = v17;
                            v26 = v16;
                            v27 = a2;
                            v28 = CFURLCreateCopyAppendingPathComponent(v9, url, v23, 0);
                            if (v28)
                            {
                              v29 = v28;
                              CFArrayAppendValue(v12, v28);
                              CFRelease(v29);
                            }
                            CFRelease(v24);
                            a2 = v27;
                            v16 = v26;
                            v17 = v25;
                          }
                        }
                      }
                    }
                  }
                }
                v15 = readdir(v14);
              }
              while (v15);
            }
            closedir(v14);
            a4 = v57;
LABEL_24:
            fdcr_RemoveFilePathInListFromArray(v12, *(const __CFDictionary **)(a1 + 72), 0);
            fdcr_RemoveFilePathInListFromArray(v12, *(const __CFDictionary **)(a1 + 80), a4 & 1);
            Count = CFArrayGetCount(v12);
            if (Count >= 1)
            {
              v32 = Count;
              v33 = 0;
              v34 = (const __CFString *)*MEMORY[0x1E0C9B4E0];
              v35 = (const __CFArray *)*MEMORY[0x1E0C9AE50];
              do
              {
                ValueAtIndex = (const __CFURL *)CFArrayGetValueAtIndex(v12, v33);
                buffer[0] = 0;
                v59 = 0;
                propertyValueTypeRefPtr = 0;
                CFURLCopyResourcePropertyForKey(ValueAtIndex, v34, &propertyValueTypeRefPtr, 0);
                if (propertyValueTypeRefPtr == v35)
                  fdcr_GetDirectoryStats(ValueAtIndex, 0, (unint64_t)buffer);
                else
                  FigCFURLGetFileStats();
                if (propertyValueTypeRefPtr)
                {
                  CFRelease(propertyValueTypeRefPtr);
                  propertyValueTypeRefPtr = 0;
                }
                fdcr_IsResourceInUse((uint64_t)ValueAtIndex, &v59);
                if (!v59 && buffer[0] >= 1)
                  fdcr_DeleteResource(ValueAtIndex);
                ++v33;
              }
              while (v32 != v33);
            }
            if (v12)
              CFRelease(v12);
            if (!fdcr_CleanCacheFileList(a1, *(const __CFDictionary **)(a1 + 72))
              && !fdcr_CleanCacheFileList(a1, *(const __CFDictionary **)(a1 + 80)))
            {
              if (*(_BYTE *)(a1 + 56))
                CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 72), (CFDictionaryApplierFunction)markDiskCacheRepositoryPurgeable, 0);
              propertyValueTypeRefPtr = 0;
              if (!fdcr_CopySortedCacheFileListCheckedIn(a1, &propertyValueTypeRefPtr))
              {
                v37 = propertyValueTypeRefPtr;
                buffer[0] = 0;
                if (propertyValueTypeRefPtr)
                {
                  v38 = CFArrayGetCount(propertyValueTypeRefPtr);
                  if (v38 >= 1)
                  {
                    v39 = v38 + 1;
                    do
                    {
                      v40 = (void *)CFArrayGetValueAtIndex(v37, v39 - 2);
                      if (v40)
                      {
                        v41 = v40;
                        if (FigCFDictionaryGetInt64IfPresent())
                        {
                          if (buffer[0] > *(_QWORD *)(a1 + 48))
                          {
                            fdcr_DeleteCacheEntry(a1, *(const __CFString **)v41, *((const __CFURL **)v41 + 1));
                            CFArrayRemoveValueAtIndex(v37, v39 - 2);
                            free(v41);
                          }
                        }
                      }
                      --v39;
                    }
                    while (v39 > 1);
                  }
                }
                while (*(_QWORD *)(a1 + 64) > *(_QWORD *)(a1 + 40))
                {
                  if (!CFArrayGetCount(propertyValueTypeRefPtr))
                  {
                    FigSignalErrorAt();
                    break;
                  }
                  v42 = (void *)CFArrayGetValueAtIndex(propertyValueTypeRefPtr, 0);
                  fdcr_DeleteCacheEntry(a1, *(const __CFString **)v42, *((const __CFURL **)v42 + 1));
                  CFArrayRemoveValueAtIndex(propertyValueTypeRefPtr, 0);
                  free(v42);
                }
                v43 = CFArrayGetCount(propertyValueTypeRefPtr);
                if (v43 >= 1)
                {
                  v44 = v43 + 1;
                  do
                  {
                    v45 = (void *)CFArrayGetValueAtIndex(propertyValueTypeRefPtr, v44 - 2);
                    if (CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 88), *(const void **)v45))
                    {
                      fdcr_DeleteCacheEntry(a1, *(const __CFString **)v45, *((const __CFURL **)v45 + 1));
                      CFArrayRemoveValueAtIndex(propertyValueTypeRefPtr, v44 - 2);
                      free(v45);
                    }
                    --v44;
                  }
                  while (v44 > 1);
                }
                if (!CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 80)))
                  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 88));
              }
              fdcr_PurgeFileInfoList(propertyValueTypeRefPtr);
            }
            goto LABEL_64;
          }
        }
        v30 = FigSignalErrorAt();
        CFRelease(v12);
        if (!v30)
        {
LABEL_23:
          v12 = 0;
          goto LABEL_24;
        }
      }
      else if (!FigSignalErrorAt())
      {
        goto LABEL_23;
      }
    }
LABEL_64:
    v46 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
    v47 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    v48 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v49 = CFDictionaryCreateMutable(v9, 0, v46, v47);
    if (!v48)
      goto LABEL_69;
    v50 = v49;
    if (!v49)
      goto LABEL_69;
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 72), (CFDictionaryApplierFunction)fdcr_ConvertValueFromCFURLToCFStringApplierFunction, v48);
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 80), (CFDictionaryApplierFunction)fdcr_ConvertValueFromCFURLToCFStringApplierFunction, v50);
    *(CFAbsoluteTime *)(a1 + 120) = CFAbsoluteTimeGetCurrent();
    v51 = a1 + 120;
    values[0] = CFNumberCreate(v9, kCFNumberSInt64Type, (const void *)(v51 - 80));
    values[1] = CFNumberCreate(v9, kCFNumberSInt64Type, (const void *)(v51 - 72));
    *(_QWORD *)&v66 = CFNumberCreate(v9, kCFNumberSInt32Type, (const void *)(v51 + 8));
    *((_QWORD *)&v66 + 1) = CFNumberCreate(v9, kCFNumberDoubleType, (const void *)v51);
    *(_QWORD *)&v67 = v48;
    *((_QWORD *)&v67 + 1) = v50;
    v68 = CFNumberCreate(v9, kCFNumberSInt8Type, (const void *)(v51 - 64));
    v52 = CFDictionaryCreate(v9, (const void **)keys, (const void **)values, 7, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v52)
    {
      v53 = v52;
      if (FigCFPropertyListWriteToFigFileFork())
        v8 = 0;
      else
        v8 = FigSignalErrorAt();
      CFRelease(v53);
    }
    else
    {
LABEL_69:
      v8 = FigSignalErrorAt();
    }
  }
  for (i = 0; i != 7; ++i)
  {
    v55 = values[i];
    if (v55)
      CFRelease(v55);
  }
  return v8;
}

uint64_t FigDiskCacheRepositoryCopyInfo(_QWORD *a1, unint64_t a2, unint64_t a3, unint64_t a4, _QWORD *a5)
{
  unint64_t v10;
  _BOOL4 v11;
  CFTypeRef v13;

  if (!a1)
    return FigSignalErrorAt();
  v10 = a2 | a3 | a4;
  v11 = v10 != 0;
  if (!v10 && !a5)
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](a1[2]);
  if (v11)
  {
    if (!FigFileForkOpenMainByCFURL())
    {
      fdcr_ReadRepositoryPlist((uint64_t)a1);
      FigFileForkClose();
    }
    if (a2)
      *(_QWORD *)a2 = a1[8];
    if (a3)
      *(_QWORD *)a3 = a1[5];
    if (a4)
      *(_QWORD *)a4 = a1[6];
  }
  if (a5)
  {
    v13 = (CFTypeRef)a1[3];
    if (v13)
      v13 = CFRetain(v13);
    *a5 = v13;
  }
  MEMORY[0x19402EF04](a1[2]);
  return 0;
}

uint64_t FigShared_CheckOutOfDiskCache(const __CFString *cf, const void *a2, CFTypeRef *a3, const void **a4)
{
  const __CFString *v7;
  uint64_t DirectoryAtPath;
  uint64_t v9;
  uint64_t v10;
  CFTypeRef v12;
  CFTypeRef cfa;

  v7 = cf;
  v12 = 0;
  cfa = cf;
  if (cf)
  {
    CFRetain(cf);
    if ((sDiskCacheIsRemote & 1) != 0)
    {
      DirectoryAtPath = fs_CreateDirectoryAtPath(v7);
      goto LABEL_6;
    }
LABEL_12:
    v10 = FigSharedRemote_CheckOutOfDiskCache(v7, (uint64_t)a2, a3, a4);
    goto LABEL_13;
  }
  if ((sDiskCacheIsRemote & 1) == 0)
    goto LABEL_12;
  DirectoryAtPath = FigDiskCacheRepositoryCopyDefaultParentURLForCurrentTask(&cfa, 0);
LABEL_6:
  v9 = DirectoryAtPath;
  if ((_DWORD)DirectoryAtPath)
    goto LABEL_14;
  if ((sDiskCacheIsRemote & 1) == 0)
  {
    v7 = (const __CFString *)cfa;
    goto LABEL_12;
  }
  MEMORY[0x19402F294](&fmp_EnsureDiskCache_sInitDiskCacheOnce, InitDiskCache);
  v9 = sDiskInitStatus;
  if (!sDiskInitStatus)
  {
    v9 = fs_CopyRepositoryByParent((const __CFString *)cfa, 1, (void **)&v12);
    if (!(_DWORD)v9)
    {
      v10 = FigDiskCacheRepositoryCheckOut((uint64_t)v12, a2, a3, a4);
LABEL_13:
      v9 = v10;
    }
  }
LABEL_14:
  if (cfa)
    CFRelease(cfa);
  if (v12)
    CFRelease(v12);
  return v9;
}

uint64_t FigDiskCacheRepositoryCheckOut(uint64_t a1, const void *a2, CFTypeRef *a3, const void **a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  if (!a1 || !a2 || !a3 || !a4)
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
  v8 = FigCFURLCreateDirectory();
  if ((_DWORD)v8)
  {
    v9 = v8;
  }
  else
  {
    if (FigFileForkOpenMainByCFURL())
    {
      v9 = 0;
    }
    else
    {
      fdcr_ReadRepositoryPlist(a1);
      v11 = fdcr_CheckOutResource((CFDictionaryRef *)a1, a2, a3, a4);
      if (!(_DWORD)v11)
        v11 = fdcr_WriteRepositoryPlist(a1, 0, 1, 0);
      v9 = v11;
      FigFileForkClose();
    }
    if (*(_BYTE *)(a1 + 56))
      FigFileMarkPurgeable();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  return v9;
}

uint64_t FigByteFlumeGetClassID()
{
  MEMORY[0x19402F294](&FigByteFlumeGetClassID_sRegisterFigByteFlumeBaseTypeOnce, RegisterFigByteFlumeBaseType);
  return sFigByteFlumeClassID;
}

uint64_t RegisterFigByteFlumeBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigByteRateHistoryCreate(_QWORD *a1)
{
  void *v2;

  v2 = malloc_type_calloc(1uLL, 0x40uLL, 0x10200403C164FF8uLL);
  if (!v2)
    return FigSignalErrorAt();
  *a1 = v2;
  return 0;
}

uint64_t FigByteRateHistoryAllocSampleArray(uint64_t a1, int a2)
{
  void *v4;
  void *v5;
  void *v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_DWORD *)(a1 + 8) == a2)
    return 0;
  v4 = malloc_type_calloc(1uLL, 16 * a2, 0x1000040D9A13B51uLL);
  if (v4)
  {
    v5 = v4;
    v6 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      v7 = *(_DWORD *)(a1 + 8);
      v8 = *(_DWORD *)(a1 + 12);
      if (v7 >= a2)
        v7 = a2;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      if (v7 >= 1)
      {
        v9 = v8 + 1;
        v10 = (uint64_t)v5 + 16 * a2 - 16;
        do
        {
          v9 = (v9 + *(_DWORD *)(a1 + 8) - 1) % *(_DWORD *)(a1 + 8);
          *(_OWORD *)v10 = *(_OWORD *)(*(_QWORD *)a1 + 16 * v9);
          v11 = *(_QWORD *)(a1 + 32) + *(int *)(v10 + 8);
          *(_QWORD *)(a1 + 24) += *(_QWORD *)v10;
          *(_QWORD *)(a1 + 32) = v11;
          v10 -= 16;
          --v7;
        }
        while (v7);
        v6 = *(void **)a1;
      }
      free(v6);
    }
    *(_QWORD *)a1 = v5;
    *(_DWORD *)(a1 + 8) = a2;
    *(_DWORD *)(a1 + 12) = 0;
    return 0;
  }
  return FigSignalErrorAt();
}

CFTypeRef FigCFHTTPCreateUserAgent()
{
  CFTypeRef result;

  MEMORY[0x19402F294](&FigCFHTTPCreateUserAgent_sUserAgentInitOnce, FigCFHTTPCreateUserAgentOnce);
  result = (CFTypeRef)gFigCFHTTPUserAgent;
  if (gFigCFHTTPUserAgent)
    return CFRetain((CFTypeRef)gFigCFHTTPUserAgent);
  return result;
}

uint64_t FigCFHTTPSetProperty(uint64_t a1, const void *a2, const __CFNumber *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  int v9;
  int valuePtr;

  valuePtr = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated())
  {
    v6 = 4294954511;
    goto LABEL_14;
  }
  if (CFEqual(a2, CFSTR("FBF_BandwidthSampleCount")))
  {
    if (CFNumberGetValue(a3, kCFNumberSInt32Type, &valuePtr))
    {
      FigByteRateHistoryAllocSampleArray(*(_QWORD *)(DerivedStorage + 344), valuePtr);
      v6 = 0;
      goto LABEL_14;
    }
LABEL_10:
    v6 = FigSignalErrorAt();
    goto LABEL_14;
  }
  if (!CFEqual(a2, CFSTR("FBF_InactivityTimeout")))
  {
    v6 = 4294954512;
    goto LABEL_14;
  }
  v9 = 0;
  if (!CFNumberGetValue(a3, kCFNumberSInt32Type, &v9) || v9 < -1)
    goto LABEL_10;
  v6 = 0;
  if (v9 < 0)
    v7 = 60000000000;
  else
    v7 = 1000000 * v9;
  *(_QWORD *)(DerivedStorage + 464) = v7;
LABEL_14:
  FigRetainProxyUnlockMutex();
  return v6;
}

uint64_t FigCFHTTPOpenResponse(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t DerivedStorage;
  uint64_t v13;
  unsigned int (*v14)(uint64_t, __CFString *, _QWORD, CFTypeRef *);
  _BOOL4 v15;
  int v16;
  BOOL v17;
  BOOL v18;
  int v19;
  _QWORD *v20;
  unsigned int (*v21)(uint64_t, _QWORD, uint64_t, _QWORD);
  unint64_t v22;
  int v23;
  BOOL v24;
  int v26;
  uint64_t v27;
  void (*v28)(uint64_t);
  void (*v29)(_QWORD, _QWORD, uint64_t);
  uint64_t v30;
  void (*v31)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD);
  _BOOL4 v32;
  uint64_t Error;
  CFTypeRef v34;
  void (*v35)(uint64_t, uint64_t, _QWORD);
  uint64_t v36;
  uint64_t v37;
  CFTypeRef cf;
  char v40;

  v40 = 0;
  FigRetainProxyRetain();
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated())
    goto LABEL_52;
  FigRetainProxyGetOwner();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v13 = DerivedStorage;
  if (*(_DWORD *)(DerivedStorage + 96) != a2)
  {
    a8 = FigSignalErrorAt();
    fbf_ReleaseAndCreateLastError(v13, -12934, (uint64_t)CFSTR("CoreMediaErrorDomain"), (uint64_t)CFSTR("Invalid request Id"));
    if (!(_DWORD)a8)
      goto LABEL_52;
    goto LABEL_29;
  }
  if (!*(_BYTE *)(DerivedStorage + 385))
  {
    cf = 0;
    v14 = *(unsigned int (**)(uint64_t, __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
    if (v14)
    {
      if (!v14(a1, CFSTR("FHRP_CFNetworkTimingData"), *MEMORY[0x1E0C9AE00], &cf))
      {
        *(_DWORD *)(v13 + 388) = FigNetworkInterfaceGetInterfaceTypeFromCFNStats((uint64_t)cf);
        if (cf)
          CFRelease(cf);
      }
    }
    *(_BYTE *)(v13 + 385) = 1;
    fbf_ConfigurePathEvaluator(v13, *(_QWORD *)v13);
  }
  if (!*(_DWORD *)(v13 + 72))
  {
    fbf_GetResponseProperties(a1, (_QWORD *)v13);
    fbf_ReportingAgentSetCDNHeaders(v13, a1);
  }
  if ((_DWORD)a8)
  {
    fbf_ReleaseAndSetLastErrorFromHTTPRequest(v13, a1, a8, &v40);
LABEL_29:
    FigRetainProxyRetainOwner();
    *(_DWORD *)(v13 + 72) = 2;
    v23 = *(_DWORD *)(v13 + 44);
    if (*(_BYTE *)(v13 + 40))
      v24 = v23 == 1;
    else
      v24 = 0;
    v26 = v24 || v23 == 2;
    FigNetworkInterfaceReporterSamplePhysicalStatistics(*(_QWORD *)(v13 + 592), a1, *(_QWORD *)(v13 + 32), 0x1E301B6D8, v26);
    *(_BYTE *)(v13 + 608) = 1;
    fbf_ReportingAgentReportErrorEvent(v13, CFSTR("CoreMediaErrorDomain"), CFSTR("Failed without successful flume open"), 1u, (int)a8);
    v27 = *(_QWORD *)(v13 + 88);
    if (v27)
    {
      v28 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v28)
        v28(v27);
    }
    v29 = *(void (**)(_QWORD, _QWORD, uint64_t))(v13 + 104);
    *(_QWORD *)(v13 + 104) = 0;
    v29(*(_QWORD *)(v13 + 120), 0, a8);
    FigCFHTTPStopAllReads(v13, a8);
    FigRetainProxyReleaseOwner();
    goto LABEL_52;
  }
  if ((a7 & 1) != 0)
  {
    v15 = fbf_httpRequestHandlesNetworkTransitions(a1);
    fbf_UpdateAndReportMultiPathActivity((_QWORD *)v13, v15);
  }
  if ((a7 & 2) != 0)
  {
    v16 = *(_DWORD *)(v13 + 44);
    v17 = *(_BYTE *)(v13 + 40) && v16 == 1;
    v18 = v17 || v16 == 2;
    v19 = v18;
    FigNetworkInterfaceReporterSamplePhysicalStatistics(*(_QWORD *)(v13 + 592), a1, *(_QWORD *)(v13 + 32), 0x1E301B6D8, v19);
    if (!*(_DWORD *)(v13 + 72))
    {
      v20 = (_QWORD *)(v13 + 336);
      v21 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 24);
      if (v21 && !v21(a1, 0, v13 + 336, 0))
      {
        v22 = *v20 / 0xF4240uLL;
      }
      else
      {
        v22 = 0;
        *v20 = 0;
      }
      v30 = *(_QWORD *)(v13 + 32);
      if (v30)
      {
        v31 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
        if (v31)
          v31(v30, CFSTR("byteFlumeStats"), CFSTR("FByt"), v22, 0);
      }
      FigReportingAgentUpdateFinalTransactionMetrics(*(_QWORD *)(v13 + 32), a1, 0, 1);
      v32 = !FigCFHTTPIsDataURL(*(const __CFURL **)(v13 + 168));
      Error = fbf_ParseResponseHeadersAndSetLastError(a1, v13, v32);
      if (!(_DWORD)Error)
      {
        *(_DWORD *)(v13 + 72) = 1;
        if (!*(_QWORD *)(v13 + 128))
        {
          v34 = *(CFTypeRef *)(v13 + 88);
          if (v34)
            v34 = CFRetain(v34);
          *(_QWORD *)(v13 + 128) = v34;
        }
        v35 = *(void (**)(uint64_t, uint64_t, _QWORD))(v13 + 104);
        v36 = *(_QWORD *)(v13 + 120);
        *(_QWORD *)(v13 + 104) = 0;
        v37 = *(unsigned __int8 *)(v13 + 280);
        FigRetainProxyUnlockMutex();
        v35(v36, v37, 0);
        FigRetainProxyLockMutex();
        FigRetainProxyIsInvalidated();
        goto LABEL_52;
      }
      a8 = Error;
      goto LABEL_29;
    }
  }
LABEL_52:
  FigRetainProxyUnlockMutex();
  return FigRetainProxyRelease();
}

const __CFString *FigCFHTTPCopyMimeTypeFromHTTPResponse(__CFHTTPMessage *a1)
{
  const __CFString *v1;
  const __CFString *v2;
  uint64_t location;
  CFStringRef v4;
  CFStringRef v5;
  CFRange v7;

  v1 = CFHTTPMessageCopyHeaderFieldValue(a1, CFSTR("Content-Type"));
  v2 = v1;
  if (v1)
  {
    location = CFStringFind(v1, CFSTR(";"), 0).location;
    if (location >= 1)
    {
      v7.length = location;
      v7.location = 0;
      v4 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v2, v7);
      if (v4)
      {
        v5 = v4;
        CFRelease(v2);
        return v5;
      }
    }
  }
  return v2;
}

uint64_t FigCFHTTPCopyProperty(const void *a1, const void *a2, const __CFAllocator *a3, __CFDictionary **a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  __CFDictionary *Value;
  const __CFDictionary *v11;
  __CFString *v12;
  const __CFAllocator *v13;
  uint64_t *p_valuePtr;
  const __CFAllocator *v15;
  uint64_t v16;
  const void *v17;
  __CFDictionary *v18;
  const __CFData *v19;
  uint64_t v21;
  __CFDictionary *Mutable;
  const __CFString *InterfaceType;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v25;
  __CFDictionary *v26;
  const void *v27;
  __CFDictionary *v28;
  int ArraySize;
  uint64_t valuePtr;
  uint64_t v31;
  uint64_t v32;
  void *values[3];
  void *keys[17];

  keys[16] = *(void **)MEMORY[0x1E0C80C00];
  v31 = 0;
  v32 = 0;
  valuePtr = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!FigRetainProxyIsInvalidated())
  {
    if (CFEqual(a2, CFSTR("FBF_EntireLength")))
    {
      if (*(_DWORD *)(DerivedStorage + 72) == 1)
      {
        Value = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, (const void *)(DerivedStorage + 216));
LABEL_14:
        v9 = 0;
LABEL_15:
        *a4 = Value;
        return v9;
      }
      return 4294954513;
    }
    if (CFEqual(a2, CFSTR("FBF_URL")))
    {
      Value = *(__CFDictionary **)(DerivedStorage + 176);
      if (!Value)
        Value = *(__CFDictionary **)(DerivedStorage + 168);
      goto LABEL_13;
    }
    if (CFEqual(a2, CFSTR("FBF_MIMEType")))
    {
      v11 = *(const __CFDictionary **)(DerivedStorage + 264);
      if (!v11)
        return 4294954513;
      v12 = CFSTR("MIME Type");
      goto LABEL_12;
    }
    ArraySize = 0;
    if (CFEqual(a2, CFSTR("FBF_BandwidthSample")))
    {
      v9 = FigCFHTTPCopyBandwidthInfo(DerivedStorage, (double *)&v32, 0, 0);
      if ((_DWORD)v9)
        return v9;
      v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      p_valuePtr = &v32;
      goto LABEL_25;
    }
    if (CFEqual(a2, CFSTR("FBF_BandwidthMovingAverage")))
    {
      v9 = FigCFHTTPCopyBandwidthInfo(DerivedStorage, 0, 0, (double *)&v31);
      if ((_DWORD)v9)
        return v9;
      v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      p_valuePtr = &v31;
      goto LABEL_25;
    }
    if (CFEqual(a2, CFSTR("FBF_BandwidthStandardDeviation")))
    {
      v9 = FigCFHTTPCopyBandwidthInfo(DerivedStorage, 0, (double *)&valuePtr, 0);
      if ((_DWORD)v9)
        return v9;
      v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      p_valuePtr = &valuePtr;
LABEL_25:
      Value = CFNumberCreate(v13, kCFNumberDoubleType, p_valuePtr);
      goto LABEL_15;
    }
    if (CFEqual(a2, CFSTR("FBF_BandwidthInfo")))
    {
      v9 = FigCFHTTPCopyBandwidthInfo(DerivedStorage, (double *)&v32, (double *)&valuePtr, (double *)&v31);
      if ((_DWORD)v9)
        return v9;
      keys[0] = CFSTR("FBF_BandwidthSample");
      keys[1] = CFSTR("FBF_BandwidthMovingAverage");
      keys[2] = CFSTR("FBF_BandwidthStandardDeviation");
      v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, &v32);
      values[1] = CFNumberCreate(v15, kCFNumberDoubleType, &v31);
      values[2] = CFNumberCreate(v15, kCFNumberDoubleType, &valuePtr);
      v16 = 0;
      *a4 = CFDictionaryCreate(a3, (const void **)keys, (const void **)values, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      do
      {
        v17 = values[v16];
        if (v17)
          CFRelease(v17);
        ++v16;
      }
      while (v16 != 3);
      return 0;
    }
    if (CFEqual(a2, CFSTR("FBF_BandwidthSampleCount")))
    {
      FigRetainProxyLockMutex();
      if (FigRetainProxyIsInvalidated())
      {
        v9 = 4294954511;
LABEL_41:
        FigRetainProxyUnlockMutex();
        return v9;
      }
      ArraySize = FigByteRateHistoryGetArraySize(*(_QWORD *)(DerivedStorage + 344));
      v18 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &ArraySize);
    }
    else
    {
      if (CFEqual(a2, CFSTR("FBF_HTTPResponseHeaders")))
      {
        Value = *(__CFDictionary **)(DerivedStorage + 256);
        if (!Value)
          return 4294954513;
        goto LABEL_13;
      }
      if (CFEqual(a2, CFSTR("FBF_RemoteIPAddress")))
      {
        v19 = *(const __CFData **)(DerivedStorage + 136);
        if (v19)
        {
          Value = FigCFHTTPCreateAddressString(v19);
          if (!Value)
            return 4294954363;
          goto LABEL_14;
        }
        return 4294954513;
      }
      if (CFEqual(a2, CFSTR("FBF_SuggestedFileName")))
      {
        Value = *(__CFDictionary **)(DerivedStorage + 208);
        if (!Value)
          return 4294954513;
        goto LABEL_13;
      }
      if (CFEqual(a2, CFSTR("FBF_PlaybackSessionID")))
      {
        v11 = *(const __CFDictionary **)(DerivedStorage + 224);
        if (!v11)
          return 4294954513;
        v12 = CFSTR("X-Playback-Session-Id");
LABEL_12:
        Value = (__CFDictionary *)CFDictionaryGetValue(v11, v12);
        if (!Value)
          return 4294954513;
LABEL_13:
        Value = (__CFDictionary *)CFRetain(Value);
        goto LABEL_14;
      }
      if (CFEqual(a2, CFSTR("FBF_AccessLog")))
        return fbf_CreateAccessLog(DerivedStorage, a3, a4);
      if (CFEqual(a2, CFSTR("FBF_NoCache")))
      {
        Value = *(__CFDictionary **)(DerivedStorage + 264);
        if (Value)
          Value = (__CFDictionary *)CFDictionaryGetValue(Value, CFSTR("no-cache"));
        if (Value != (__CFDictionary *)*MEMORY[0x1E0C9AE50])
          return 4294954513;
        goto LABEL_13;
      }
      if (CFEqual(a2, CFSTR("FBF_StorageSession")))
      {
        Value = *(__CFDictionary **)(DerivedStorage + 232);
        if (!Value)
          return 4294954513;
        goto LABEL_13;
      }
      if (CFEqual(a2, CFSTR("FBF_LastError")))
      {
        Value = *(__CFDictionary **)(DerivedStorage + 24);
        if (Value)
          goto LABEL_13;
        return 0;
      }
      if (CFEqual(a2, CFSTR("FBF_networkInterfaceStats")))
      {
        FigRetainProxyLockMutex();
        v21 = *(_QWORD *)(DerivedStorage + 592);
        if (v21 && (Mutable = FigNetworkInterfaceReporterCopyPhysicalStatistics(v21)) != 0
          || (Mutable = CFDictionaryCreateMutable(a3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) != 0)
        {
          InterfaceType = fbf_GetInterfaceType(DerivedStorage);
          CFDictionarySetValue(Mutable, CFSTR("cs-iftype"), InterfaceType);
          FigRetainProxyUnlockMutex();
          v9 = 0;
          *a4 = Mutable;
        }
        else
        {
          FigRetainProxyUnlockMutex();
          return 4294954510;
        }
        return v9;
      }
      if (CFEqual(a2, CFSTR("FBF_ReportingAgent")))
      {
        Value = *(__CFDictionary **)(DerivedStorage + 32);
        if (!Value)
          goto LABEL_14;
        goto LABEL_13;
      }
      if (CFEqual(a2, CFSTR("FBF_InteractivePlaybackAssertion")))
      {
        v28 = 0;
        FigRetainProxyLockMutex();
        v9 = FigPlaybackAssertionCreate((uint64_t)a3, (uint64_t)a1, (uint64_t)fbf_releaseInteractivePlaybackAssertion, &v28);
        if (!(_DWORD)v9)
        {
          if (dword_1EE2A2D10)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          CFRetain(a1);
          ++*(_DWORD *)(DerivedStorage + 380);
        }
        FigRetainProxyUnlockMutex();
        *a4 = v28;
        return v9;
      }
      if (CFEqual(a2, CFSTR("FBF_NetworkUrgencyMonitor")))
      {
        FigRetainProxyLockMutex();
        v25 = *(const void **)(DerivedStorage + 624);
        if (v25)
        {
          CFRetain(v25);
          v9 = 0;
          v26 = *(__CFDictionary **)(DerivedStorage + 624);
        }
        else
        {
          v26 = 0;
          v9 = 4294954513;
        }
        FigRetainProxyUnlockMutex();
        *a4 = v26;
        return v9;
      }
      if (CFEqual(a2, CFSTR("FBF_EntireLengthAvailableOnDemand")))
      {
        Value = (__CFDictionary *)*MEMORY[0x1E0C9AE40];
        goto LABEL_13;
      }
      if (!CFEqual(a2, CFSTR("FBF_ClientNetworkActivity")))
        return 4294954512;
      FigRetainProxyLockMutex();
      v27 = *(const void **)(DerivedStorage + 640);
      if (!v27)
      {
        v9 = 4294954513;
        goto LABEL_41;
      }
      v18 = (__CFDictionary *)CFRetain(v27);
    }
    v9 = 0;
    *a4 = v18;
    goto LABEL_41;
  }
  return 4294954511;
}

uint64_t FigCRABSCreate(const void *a1, uint64_t a2, const void *a3, const void *a4, int a5, CFTypeRef *a6)
{
  uint64_t v11;
  uint64_t DerivedStorage;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t FigBaseObject;
  uint64_t v20;
  void (*v21)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef v22;
  CFTypeRef v23;
  uint64_t v24;
  void (*v25)(uint64_t, const __CFString *, uint64_t, uint64_t);
  uint64_t v26;
  void (*v27)(uint64_t, const __CFString *, uint64_t, uint64_t);
  uint64_t v28;
  void (*v29)(uint64_t, __CFString *, __CFString *, const __CFString *, _QWORD);
  uint64_t v30;
  int v31;
  void (*v32)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);
  uint64_t v33;
  void (*v34)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);
  uint64_t v35;
  unsigned int (*v36)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v38;
  CFTypeRef v41;
  CFTypeRef v42;
  CFTypeRef cf[18];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a1 && a3 && a6)
  {
    v42 = 0;
    MEMORY[0x19402F294](&FigCRABSGetClassID_sRegisterFigCRABSOnce, RegisterFigCRABS);
    v11 = CMDerivedObjectCreate();
    if (!(_DWORD)v11)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v13 = FigReentrantMutexCreate();
      *(_QWORD *)(DerivedStorage + 72) = v13;
      if (!v13)
        goto LABEL_41;
      v14 = FigReentrantMutexCreate();
      *(_QWORD *)(DerivedStorage + 384) = v14;
      if (!v14)
        goto LABEL_41;
      *(_DWORD *)(DerivedStorage + 504) = a5;
      *(_BYTE *)(DerivedStorage + 132) = a5 & 1;
      if (crabsUpdateLength(DerivedStorage, (uint64_t)a1))
      {
        *(_QWORD *)(DerivedStorage + 96) = 0x4000;
        *(_QWORD *)(DerivedStorage + 56) = -1;
      }
      *(_QWORD *)(DerivedStorage + 224) = 0;
      *(_QWORD *)(DerivedStorage + 184) = 10;
      v15 = malloc_type_malloc(0x50uLL, 0x100004000313F17uLL);
      *(_QWORD *)(DerivedStorage + 192) = v15;
      if (!v15)
        goto LABEL_41;
      *(_QWORD *)(DerivedStorage + 248) = 0;
      *(_QWORD *)(DerivedStorage + 200) = 0;
      *(_QWORD *)(DerivedStorage + 264) = 0;
      *(_QWORD *)(DerivedStorage + 272) = DerivedStorage + 264;
      *(_QWORD *)(DerivedStorage + 280) = 0;
      *(_QWORD *)(DerivedStorage + 288) = DerivedStorage + 280;
      *(_QWORD *)(DerivedStorage + 296) = 0;
      *(_QWORD *)(DerivedStorage + 304) = DerivedStorage + 296;
      *(_QWORD *)(DerivedStorage + 312) = 0;
      *(_QWORD *)(DerivedStorage + 320) = DerivedStorage + 312;
      *(_QWORD *)(DerivedStorage + 328) = 0;
      *(_QWORD *)(DerivedStorage + 256) = DerivedStorage + 248;
      *(_QWORD *)(DerivedStorage + 336) = DerivedStorage + 328;
      *(_QWORD *)(DerivedStorage + 368) = 0;
      *(_QWORD *)(DerivedStorage + 376) = DerivedStorage + 368;
      v16 = FigConditionVariableCreate();
      *(_QWORD *)(DerivedStorage + 552) = v16;
      if (!v16)
        goto LABEL_41;
      v17 = FigConditionVariableCreate();
      *(_QWORD *)(DerivedStorage + 656) = v17;
      if (v17)
      {
        v18 = FigRetainProxyCreate();
        if (!(_DWORD)v18)
        {
          *(_QWORD *)(DerivedStorage + 8) = FigDiskCacheProviderRetain(a4);
          *(_QWORD *)(DerivedStorage + 16) = 0;
          crabsDiskBackingIsBusy(DerivedStorage, 1);
          cf[0] = 0;
          FigBaseObject = FigByteFlumeGetFigBaseObject(a1);
          v20 = *MEMORY[0x1E0C9AE00];
          v21 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
          if (v21)
            v21(FigBaseObject, CFSTR("FBF_URL"), v20, cf);
          *(_QWORD *)(DerivedStorage + 936) = FigOSTransactionCreate();
          if (cf[0])
            CFRelease(cf[0]);
          v22 = CFRetain(a1);
          v23 = v42;
          *(_QWORD *)(DerivedStorage + 32) = v22;
          *(_QWORD *)(DerivedStorage + 40) = v23;
          *(_DWORD *)(DerivedStorage + 48) = 9000;
          *(_QWORD *)DerivedStorage = CFRetain(a3);
          *(_BYTE *)(DerivedStorage + 104) = 1;
          *(_BYTE *)(DerivedStorage + 112) = 1;
          *(_DWORD *)(DerivedStorage + 108) = 0;
          *(_QWORD *)(DerivedStorage + 832) = 0;
          *(_OWORD *)(DerivedStorage + 840) = 0u;
          *(_OWORD *)(DerivedStorage + 856) = 0u;
          *(_OWORD *)(DerivedStorage + 872) = 0u;
          *(_OWORD *)(DerivedStorage + 888) = 0u;
          *(_OWORD *)(DerivedStorage + 904) = 0u;
          v24 = FigByteFlumeGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
          v25 = *(void (**)(uint64_t, const __CFString *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
          if (v25)
            v25(v24, CFSTR("FBF_NetworkUrgencyMonitor"), a2, DerivedStorage + 968);
          v18 = crabsInitialize(DerivedStorage);
          if (!(_DWORD)v18)
          {
            FigByteStreamStatsSetupWorker();
            v26 = FigByteFlumeGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
            v27 = *(void (**)(uint64_t, const __CFString *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
            if (v27)
              v27(v26, CFSTR("FBF_ReportingAgent"), v20, DerivedStorage + 920);
            *(_DWORD *)(DerivedStorage + 928) = 0;
            v28 = *(_QWORD *)(DerivedStorage + 920);
            if (v28)
            {
              v29 = *(void (**)(uint64_t, __CFString *, __CFString *, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
              if (v29)
                v29(v28, CFSTR("crabsStats"), CFSTR("PlayType"), CFSTR("FILE"), 0);
              v30 = *(_QWORD *)(DerivedStorage + 920);
              if (v30)
              {
                v31 = *(_DWORD *)(DerivedStorage + 504);
                v32 = *(void (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                 + 56);
                if (v32)
                  v32(v30, CFSTR("crabsStats"), CFSTR("DBacked"), v31 & 1, 0);
              }
              v33 = *(_QWORD *)(DerivedStorage + 920);
              if (v33)
              {
                v34 = *(void (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                 + 56);
                if (v34)
                  v34(v33, CFSTR("crabsStats"), CFSTR("CachedBytes"), 0, 0);
              }
            }
            CMNotificationCenterGetDefaultLocalCenter();
            v18 = FigNotificationCenterAddWeakListeners();
            if (!(_DWORD)v18)
            {
              if (dword_1EE2A29E8)
              {
                v41 = 0;
                v35 = FigByteFlumeGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
                v36 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                if (v36)
                {
                  if (!v36(v35, CFSTR("FBF_URL"), v20, &v41))
                  {
                    FigIsItOKToLogURLs();
                    if (dword_1EE2A29E8)
                    {
                      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                      fig_log_call_emit_and_clean_up_after_send_and_compose();
                    }
                    if (v41)
                      CFRelease(v41);
                  }
                }
              }
              v38 = 0;
              *a6 = v42;
              return v38;
            }
          }
        }
      }
      else
      {
LABEL_41:
        v18 = FigSignalErrorAt();
      }
      v38 = v18;
      if (v42)
        CFRelease(v42);
      return v38;
    }
    return v11;
  }
  return FigSignalErrorAt();
}

uint64_t FigCRABSCopyProperty(const void *a1, const void *a2, const __CFAllocator *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t SInt64;
  uint64_t v11;
  uint64_t v12;
  uint64_t FigBaseObject;
  uint64_t (*v14)(uint64_t, __CFString *, const __CFAllocator *, _QWORD *);
  __CFString **v15;
  const __CFAllocator *v16;
  const void *v17;
  CFNumberType v18;
  const void *v19;
  const void *v20;
  const void *v21;
  CFTypeRef *v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  const void *v26;
  CFTypeRef v27;
  const void *v28;
  double v29;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, const __CFString *, const __CFAllocator *, CFDictionaryRef *);
  int v35;
  int v36;
  int v37;
  NSObject *v38;
  CFTypeRef v39;
  uint64_t v40;
  unsigned int (*v41)(uint64_t, const __CFString *, const __CFAllocator *, void **);
  uint64_t v42;
  const void *v43;
  const void *v44;
  _BOOL4 IsEntireLengthAvailableInCache;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, const __CFString *, const __CFAllocator *, void **);
  int v48;
  const void *v49;
  CFTypeRef v50;
  const void **v51;
  const void **v52;
  BOOL v53;
  int v54;
  const void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const void *v59;
  uint64_t v60;
  CFTypeRef cf;
  CFDictionaryRef theDict;
  void *value[17];

  value[16] = *(void **)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2070]))
  {
    result = crabsEnsureInitialized(a1);
    if ((_DWORD)result)
      return result;
    SInt64 = FigCFNumberCreateSInt64();
    goto LABEL_4;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2068]))
  {
    result = crabsEnsureInitialized(a1);
    if (!(_DWORD)result)
    {
      MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 72));
      MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 72));
      v12 = FigCFNumberCreateSInt64();
      *a4 = v12;
      if (!v12)
        return FigSignalErrorAt();
      return 0;
    }
    return result;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2098]))
  {
    result = crabsEnsureInitialized(a1);
    if ((_DWORD)result)
      return result;
    FigBaseObject = FigByteFlumeGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
    v14 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
    if (v14)
    {
      v15 = kFigByteFlumeProperty_URL;
      return v14(FigBaseObject, *v15, a3, a4);
    }
    return 4294954514;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2F60]))
    return 4294954512;
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2F78]))
  {
    result = crabsEnsureInitialized(a1);
    if ((_DWORD)result)
      return result;
    FigBaseObject = FigByteFlumeGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
    v14 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
    if (v14)
    {
      v15 = kFigByteFlumeProperty_MIMEType;
      return v14(FigBaseObject, *v15, a3, a4);
    }
    return 4294954514;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2FA8]))
  {
    v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v17 = (const void *)(DerivedStorage + 48);
LABEL_26:
    v18 = kCFNumberSInt32Type;
LABEL_27:
    SInt64 = (uint64_t)CFNumberCreate(v16, v18, v17);
LABEL_4:
    v11 = SInt64;
LABEL_5:
    result = 0;
LABEL_6:
    *a4 = v11;
    return result;
  }
  v19 = (const void *)*MEMORY[0x1E0CA2F88];
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2F88]))
  {
    FigBaseObject = FigByteFlumeGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
    v14 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
    if (v14)
    {
      v15 = kFigByteFlumeProperty_BandwidthSample;
      return v14(FigBaseObject, *v15, a3, a4);
    }
    return 4294954514;
  }
  v20 = (const void *)*MEMORY[0x1E0CA2F90];
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2F90]))
  {
    FigBaseObject = FigByteFlumeGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
    v14 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
    if (v14)
    {
      v15 = kFigByteFlumeProperty_BandwidthStandardDeviation;
      return v14(FigBaseObject, *v15, a3, a4);
    }
    return 4294954514;
  }
  v21 = (const void *)*MEMORY[0x1E0CA20A8];
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA20A8]))
  {
    FigBaseObject = FigByteFlumeGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
    v14 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
    if (v14)
    {
      v15 = kFigByteFlumeProperty_BandwidthMovingAverage;
      return v14(FigBaseObject, *v15, a3, a4);
    }
    return 4294954514;
  }
  if (!CFEqual(a2, CFSTR("CRABS_ReadAheadActive")))
  {
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2F48]))
    {
      FigBaseObject = FigByteFlumeGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
      v14 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
      if (v14)
      {
        v15 = kFigByteFlumeProperty_BandwidthSampleCount;
        return v14(FigBaseObject, *v15, a3, a4);
      }
      return 4294954514;
    }
    if (CFEqual(a2, CFSTR("CRABS_ReadAheadAssertion")))
    {
      cf = 0;
      v23 = FigRetainProxyLockMutex();
      if ((_DWORD)v23)
      {
        v24 = v23;
        *a4 = 0;
        return v24;
      }
      v26 = *(const void **)(DerivedStorage + 760);
      if (v26)
        v27 = CFRetain(v26);
      else
        v27 = 0;
      v24 = FigReadAheadAssertionCreate((uint64_t)a3, (uint64_t)a1, (uint64_t)crabsReleaseReadAheadAssertion, &cf);
      if (!(_DWORD)v24)
      {
        if (dword_1EE2A29E8)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CFRetain(a1);
        v37 = *(_DWORD *)(DerivedStorage + 116);
        *(_DWORD *)(DerivedStorage + 116) = v37 + 1;
        if (v37 != -1)
        {
          if (dword_1EE2A29E8)
          {
            v38 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (*(double *)(DerivedStorage + 120) == 0.0)
            *(CFAbsoluteTime *)(DerivedStorage + 120) = CFAbsoluteTimeGetCurrent();
          v24 = 4294954511;
          if (crabsStartIdleRead(DerivedStorage) == -12785)
            goto LABEL_84;
          crabsReportingIssueIRATEventIfNeeded(DerivedStorage, 800);
        }
        v24 = 0;
      }
LABEL_84:
      crabsRetainProxyUnlockWithActions();
      if (v27)
        CFRelease(v27);
      v39 = cf;
      if ((_DWORD)v24)
      {
        *a4 = 0;
        if (v39)
          CFRelease(v39);
      }
      else
      {
        *a4 = cf;
      }
      return v24;
    }
    if (CFEqual(a2, CFSTR("CRABS_ReportingAgent")))
    {
      v25 = *(const void **)(DerivedStorage + 920);
      if (v25)
      {
        CFRetain(v25);
        v11 = *(_QWORD *)(DerivedStorage + 920);
      }
      else
      {
        v11 = 0;
      }
      goto LABEL_5;
    }
    if (CFEqual(a2, CFSTR("CRABS_ReadAheadStartTime")))
    {
      v29 = *(double *)(DerivedStorage + 120);
      v28 = (const void *)(DerivedStorage + 120);
      if (v29 > 0.0)
      {
        v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v18 = kCFNumberDoubleType;
        v17 = v28;
        goto LABEL_27;
      }
      *a4 = 0;
      return 4294954513;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2090]))
    {
      Mutable = CFDictionaryCreateMutable(a3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!Mutable)
        return 4294954510;
      v32 = Mutable;
      value[0] = 0;
      theDict = 0;
      v33 = FigByteFlumeGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
      v34 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v34)
      {
        v35 = v34(v33, CFSTR("FBF_BandwidthInfo"), a3, &theDict);
        v36 = 0;
        if (!v35 && theDict)
        {
          if (CFDictionaryGetValueIfPresent(theDict, CFSTR("FBF_BandwidthSample"), (const void **)value))
          {
            CFDictionaryAddValue(v32, v19, value[0]);
            v36 = 1;
          }
          else
          {
            v36 = 0;
          }
          if (CFDictionaryGetValueIfPresent(theDict, CFSTR("FBF_BandwidthMovingAverage"), (const void **)value))
          {
            CFDictionaryAddValue(v32, v21, value[0]);
            v36 = 1;
          }
          if (CFDictionaryGetValueIfPresent(theDict, CFSTR("FBF_BandwidthStandardDeviation"), (const void **)value))
          {
            CFDictionaryAddValue(v32, v20, value[0]);
            v36 = 1;
          }
          CFRelease(theDict);
        }
      }
      else
      {
        v36 = 0;
      }
      v40 = FigByteFlumeGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
      v41 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v41 && !v41(v40, CFSTR("FBF_RemoteIPAddress"), a3, value) && value[0])
      {
        CFDictionaryAddValue(v32, (const void *)*MEMORY[0x1E0CA2FA0], value[0]);
        if (value[0])
          CFRelease(value[0]);
      }
      else if (!v36)
      {
        CFRelease(v32);
        return 4294954513;
      }
      result = 0;
      *a4 = v32;
      return result;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2F80]))
    {
      FigBaseObject = FigByteFlumeGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
      v14 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
      if (v14)
      {
        v15 = kFigByteFlumeProperty_NetworkInterfaceStatistics;
        return v14(FigBaseObject, *v15, a3, a4);
      }
      return 4294954514;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2FA0]))
    {
      FigBaseObject = FigByteFlumeGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
      v14 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
      if (v14)
      {
        v15 = kFigByteFlumeProperty_RemoteIPAddress;
        return v14(FigBaseObject, *v15, a3, a4);
      }
      return 4294954514;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2FB0]))
      return FigCRABSScheduledIOCreate(*(const void **)(DerivedStorage + 40), (uint64_t)a3, a4);
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2FC0]))
    {
      FigBaseObject = FigByteFlumeGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
      v14 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
      if (v14)
      {
        v15 = kFigByteFlumeProperty_SuggestedFileName;
        return v14(FigBaseObject, *v15, a3, a4);
      }
      return 4294954514;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2078]))
    {
      value[0] = 0;
      v42 = crabsEnsureInitialized(a1);
      if (!(_DWORD)v42)
      {
        v43 = (const void *)*MEMORY[0x1E0C9AE40];
        if (FigRetainProxyLockMutex())
        {
          v44 = (const void *)*MEMORY[0x1E0C9AE50];
        }
        else
        {
          IsEntireLengthAvailableInCache = crabsIsEntireLengthAvailableInCache(DerivedStorage);
          v44 = (const void *)*MEMORY[0x1E0C9AE50];
          if (IsEntireLengthAvailableInCache)
            v43 = (const void *)*MEMORY[0x1E0C9AE50];
          FigRetainProxyUnlockMutex();
        }
        if (v43 == v44)
        {
          v49 = 0;
        }
        else
        {
          v46 = FigByteFlumeGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
          v47 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
          if (v47)
          {
            v48 = v47(v46, CFSTR("FBF_EntireLengthAvailableOnDemand"), a3, value);
            v49 = value[0];
            if (v48)
              v44 = v43;
            else
              v44 = value[0];
          }
          else
          {
            v49 = 0;
            v44 = v43;
          }
        }
        if (v44)
        {
          v50 = CFRetain(v44);
          v49 = value[0];
        }
        else
        {
          v50 = 0;
        }
        *a4 = v50;
        if (v49)
          CFRelease(v49);
      }
      return v42;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2F98]))
      return crabsCreateReadStatsDictionary(DerivedStorage, (uint64_t)a3, a4);
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2F38]))
    {
      FigBaseObject = FigByteFlumeGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
      v14 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
      if (v14)
      {
        v15 = kFigByteFlumeProperty_AccessLog;
        return v14(FigBaseObject, *v15, a3, a4);
      }
      return 4294954514;
    }
    if (CFEqual(a2, CFSTR("CRABS_PlaybackSessionID")))
    {
      FigBaseObject = FigByteFlumeGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
      v14 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
      if (v14)
      {
        v15 = kFigByteFlumeProperty_PlaybackSessionID;
        return v14(FigBaseObject, *v15, a3, a4);
      }
      return 4294954514;
    }
    if (CFEqual(a2, CFSTR("CRABS_CacheIsVolatile")))
    {
      if ((*(_BYTE *)(DerivedStorage + 504) & 3) != 0 || !*(_BYTE *)(DerivedStorage + 133))
        v51 = (const void **)MEMORY[0x1E0C9AE40];
      else
        v51 = (const void **)MEMORY[0x1E0C9AE50];
    }
    else
    {
      if (CFEqual(a2, CFSTR("CRABS_CacheIsDiskBacked")))
      {
        v51 = (const void **)MEMORY[0x1E0C9AE50];
        v52 = (const void **)MEMORY[0x1E0C9AE40];
        v53 = (*(_DWORD *)(DerivedStorage + 504) & 1) == 0;
      }
      else
      {
        if (CFEqual(a2, CFSTR("CRABS_ReadAheadAllowBackfill")))
        {
          v51 = (const void **)MEMORY[0x1E0C9AE50];
          v54 = *(unsigned __int8 *)(DerivedStorage + 132);
        }
        else
        {
          if (!CFEqual(a2, CFSTR("CRABS_SaveMemoryCacheToDiskWhenDone")))
          {
            if (CFEqual(a2, CFSTR("CRABS_StorageSession")))
            {
              v56 = *(_QWORD *)(DerivedStorage + 32);
              if (v56)
              {
                FigBaseObject = FigByteFlumeGetFigBaseObject(v56);
                v14 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                if (v14)
                {
                  v15 = kFigByteFlumeProperty_StorageSession;
                  return v14(FigBaseObject, *v15, a3, a4);
                }
                return 4294954514;
              }
              return 4294954513;
            }
            if (CFEqual(a2, CFSTR("CRABS_ConnectionState")))
            {
              v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
              v17 = (const void *)(DerivedStorage + 108);
              goto LABEL_26;
            }
            if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2F70]))
            {
              v57 = *(_QWORD *)(DerivedStorage + 32);
              if (v57)
              {
                FigBaseObject = FigByteFlumeGetFigBaseObject(v57);
                v14 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                if (v14)
                {
                  v15 = kFigByteFlumeProperty_LastError;
                  return v14(FigBaseObject, *v15, a3, a4);
                }
                return 4294954514;
              }
              return 4294954513;
            }
            if (CFEqual(a2, CFSTR("CRABS_InteractivePlaybackAssertion")))
            {
              v58 = *(_QWORD *)(DerivedStorage + 32);
              if (v58)
              {
                FigBaseObject = FigByteFlumeGetFigBaseObject(v58);
                v14 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                if (v14)
                {
                  v15 = kFigByteFlumeProperty_InteractivePlaybackAssertion;
                  return v14(FigBaseObject, *v15, a3, a4);
                }
                return 4294954514;
              }
              return 4294954513;
            }
            if (CFEqual(a2, CFSTR("CRABS_NetworkUrgencyMonitor")))
            {
              v59 = *(const void **)(DerivedStorage + 968);
              if (v59)
              {
                CFRetain(v59);
                result = 0;
                v11 = *(_QWORD *)(DerivedStorage + 968);
                goto LABEL_6;
              }
              return 4294954513;
            }
            if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2FB8]))
            {
              if (!CFEqual(a2, CFSTR("CRABS_ClientNetworkActivity")))
                return 4294954512;
              v60 = *(_QWORD *)(DerivedStorage + 32);
              if (v60)
              {
                FigBaseObject = FigByteFlumeGetFigBaseObject(v60);
                v14 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                if (v14)
                {
                  v15 = kFigByteFlumeProperty_ClientNetworkActivity;
                  return v14(FigBaseObject, *v15, a3, a4);
                }
                return 4294954514;
              }
              return 4294954513;
            }
            v55 = *(const void **)(DerivedStorage + 960);
            if (!v55)
              return 4294954513;
LABEL_156:
            SInt64 = (uint64_t)CFRetain(v55);
            goto LABEL_4;
          }
          v51 = (const void **)MEMORY[0x1E0C9AE50];
          v54 = *(unsigned __int8 *)(DerivedStorage + 136);
        }
        v52 = (const void **)MEMORY[0x1E0C9AE40];
        v53 = v54 == 0;
      }
      if (v53)
        v51 = v52;
    }
    v55 = *v51;
    goto LABEL_156;
  }
  result = FigRetainProxyLockMutex();
  if (!(_DWORD)result)
  {
    v22 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    if (*(_DWORD *)(DerivedStorage + 560) != 1 && *(_DWORD *)(DerivedStorage + 664) != 1)
      v22 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    *a4 = CFRetain(*v22);
    FigRetainProxyUnlockMutex();
    return 0;
  }
  return result;
}

uint64_t FigCRABSSetProperty(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t FigBaseObject;
  uint64_t (*v8)(uint64_t, const __CFString *, const void *);
  const void *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, const __CFString *, const void *);
  uint64_t v13;
  const void *v14;
  CFTypeRef v15;
  uint64_t v16;
  CFTypeID v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, const __CFString *, const void *);
  uint64_t v20;
  CFTypeID v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  CFTypeID v26;
  int v27;
  int v28;
  CFTypeID v29;
  const void *v30;
  int v31;
  CFTypeID v32;
  const void *v33;
  uint64_t v34;
  int valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2F48]))
  {
    FigBaseObject = FigByteFlumeGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
    v8 = *(uint64_t (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 56);
    if (v8)
      return v8(FigBaseObject, CFSTR("FBF_BandwidthSampleCount"), a3);
    return 4294954514;
  }
  v10 = (const void *)*MEMORY[0x1E0CA2FA8];
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2FA8]))
  {
LABEL_7:
    if (!CFEqual(a2, CFSTR("CRABS_DataConsumptionRateHint"))
      && !CFEqual(a2, CFSTR("CRABS_AllowCacheMemoryToBeVolatile"))
      || (v13 = crabsEnsureInitialized(a1), !(_DWORD)v13))
    {
      v13 = FigRetainProxyLockMutex();
      if (!(_DWORD)v13)
      {
        v14 = *(const void **)(DerivedStorage + 760);
        if (v14)
          v15 = CFRetain(v14);
        else
          v15 = 0;
        if (CFEqual(a2, v10))
        {
          valuePtr = -1;
          v17 = CFGetTypeID(a3);
          if (v17 == CFNumberGetTypeID())
          {
            CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr);
            if (valuePtr >= -1)
            {
              v16 = 0;
              *(_DWORD *)(DerivedStorage + 48) = valuePtr;
              goto LABEL_53;
            }
          }
          goto LABEL_51;
        }
        if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2F68]))
        {
          if (*(_QWORD *)(DerivedStorage + 8) && CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0C9AE50]))
          {
            v18 = FigDiskCacheProviderGetFigBaseObject(*(_QWORD *)(DerivedStorage + 8));
            v19 = *(uint64_t (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 56);
            if (!v19)
            {
              v16 = 4294954514;
              goto LABEL_53;
            }
            v16 = v19(v18, CFSTR("CacheIsComplete"), a3);
            if ((_DWORD)v16)
              goto LABEL_53;
            v20 = crabsSyncCache(DerivedStorage);
            goto LABEL_52;
          }
          goto LABEL_51;
        }
        if (CFEqual(a2, CFSTR("CRABS_DataConsumptionRateHint")))
        {
          v34 = 0;
          v21 = CFGetTypeID(a3);
          if (v21 == CFNumberGetTypeID())
          {
            CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt64Type, &v34);
            if (v34 >= 1)
            {
              v22 = (uint64_t)(((double)*(uint64_t *)(DerivedStorage + 96) + (double)v34 * 2.5 + -1.0)
                            / (double)*(uint64_t *)(DerivedStorage + 96));
              if (*(_QWORD *)(DerivedStorage + 184) < v22)
              {
                v23 = malloc_type_realloc(*(void **)(DerivedStorage + 192), 8 * v22, 0x100004000313F17uLL);
                if (v23)
                {
                  if (*(_QWORD *)(DerivedStorage + 184) < v22)
                  {
                    v24 = v22;
                    do
                      v23[--v24] = *(_QWORD *)(DerivedStorage + 88);
                    while (v24 > *(_QWORD *)(DerivedStorage + 184));
                  }
                  v16 = 0;
                  *(_QWORD *)(DerivedStorage + 184) = v22;
                  *(_QWORD *)(DerivedStorage + 192) = v23;
                  goto LABEL_53;
                }
                goto LABEL_51;
              }
              goto LABEL_62;
            }
          }
        }
        else
        {
          if (!CFEqual(a2, CFSTR("CRABS_ReadAheadAllowBackfill")))
          {
            if (CFEqual(a2, CFSTR("CRABS_AllowCacheMemoryToBeVolatile")))
            {
              v28 = *(unsigned __int8 *)(DerivedStorage + 133);
              v29 = CFGetTypeID(a3);
              if (v29 != CFBooleanGetTypeID())
                goto LABEL_51;
              v16 = 0;
              v30 = (const void *)*MEMORY[0x1E0C9AE50];
              v31 = *MEMORY[0x1E0C9AE50] == (_QWORD)a3;
              *(_BYTE *)(DerivedStorage + 133) = v31;
              if ((*(_BYTE *)(DerivedStorage + 504) & 3) != 0 || v28 == v31)
                goto LABEL_53;
              if (v30 == a3)
                crabsMakeCacheInFrontListVolatile((_QWORD *)DerivedStorage);
              else
                crabsMakeCacheInFrontListNonvolatile((_QWORD *)DerivedStorage);
            }
            else
            {
              if (CFEqual(a2, CFSTR("CRABS_SaveMemoryCacheToDiskWhenDone")))
              {
                v32 = CFGetTypeID(a3);
                if (v32 == CFBooleanGetTypeID())
                {
                  v16 = 0;
                  *(_BYTE *)(DerivedStorage + 136) = *MEMORY[0x1E0C9AE50] == (_QWORD)a3;
                  goto LABEL_53;
                }
                goto LABEL_51;
              }
              if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2FB8]))
              {
                v16 = 4294954512;
LABEL_53:
                crabsRetainProxyUnlockWithActions();
                if (v15)
                  CFRelease(v15);
                return v16;
              }
              v33 = *(const void **)(DerivedStorage + 960);
              *(_QWORD *)(DerivedStorage + 960) = a3;
              if (a3)
                CFRetain(a3);
              if (v33)
                CFRelease(v33);
            }
LABEL_62:
            v16 = 0;
            goto LABEL_53;
          }
          v25 = *(unsigned __int8 *)(DerivedStorage + 132);
          v26 = CFGetTypeID(a3);
          if (v26 == CFBooleanGetTypeID())
          {
            v27 = CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0C9AE50]);
            v16 = 0;
            *(_BYTE *)(DerivedStorage + 132) = v27;
            if (!v27 || v25)
              goto LABEL_53;
            *(_WORD *)(DerivedStorage + 130) = 0;
            v20 = crabsStartIdleRead(DerivedStorage);
            goto LABEL_52;
          }
        }
LABEL_51:
        v20 = FigSignalErrorAt();
LABEL_52:
        v16 = v20;
        goto LABEL_53;
      }
    }
    return v13;
  }
  v11 = FigByteFlumeGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
  v12 = *(uint64_t (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
  if (v12)
  {
    v13 = v12(v11, CFSTR("FBF_InactivityTimeout"), a3);
    if ((_DWORD)v13)
      return v13;
    goto LABEL_7;
  }
  return 4294954514;
}

uint64_t crabsUnlockWithActions(uint64_t a1)
{
  BOOL v2;
  const void *Owner;

  if (*(_WORD *)(a1 + 176))
    v2 = (*(_WORD *)(a1 + 176) & 0x10) == 0;
  else
    v2 = 0;
  if (v2)
  {
    FigRetainProxyRetain();
    Owner = (const void *)FigRetainProxyGetOwner();
    if (Owner)
      CFRetain(Owner);
    *(_WORD *)(a1 + 176) |= 0x10u;
    CMNotificationCenterGetDefaultLocalCenter();
    FigThreadGetGlobalNetworkBufferingQueue();
    FigDeferNotificationToDispatchQueue();
  }
  return FigRetainProxyUnlockMutex();
}

uint64_t FigCRABSRead(const void *a1, size_t a2, uint64_t a3, char *a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v12;

  v12 = 0;
  CMBaseObjectGetDerivedStorage();
  FigGetUpTimeNanoseconds();
  v10 = readOrRef(a1, a2, a3, a4, 0, &v12, -1);
  if (a5)
    *a5 = v12;
  FigGetUpTimeNanoseconds();
  FigByteStreamStatsLogOneRead();
  return v10;
}

uint64_t readOrRef(const void *a1, size_t a2, uint64_t a3, char *a4, CMBlockBufferRef *a5, uint64_t *a6, int a7)
{
  uint64_t DerivedStorage;
  const void *v14;
  CFTypeRef v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  size_t v23;
  uint64_t v24;
  unsigned int v25;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v27;
  uint64_t *v28;
  unsigned int v29;
  uint64_t v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  unsigned int v57;
  _BOOL4 v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  uint64_t v62;
  uint64_t *v63;
  int v64;
  int v65;
  int64_t v66;
  int64_t v67;
  uint64_t v68;
  OSStatus Empty;
  uint64_t v70;
  uint64_t v71;
  size_t v72;
  CFTypeRef *v74;
  int v75;
  uint64_t UpTimeNanoseconds;
  uint64_t v77;
  int *v78;
  unsigned int v80;
  BOOL v81;
  size_t v85;
  const __CFAllocator *v86;
  CFTypeRef cf;
  uint64_t *v89;
  uint64_t v90;
  int IsBusy;
  CMBlockBufferRef *blockBufferOut;
  CFTypeRef v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  int *v97;
  CMBlockBufferCustomBlockSource customBlockSource;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v97 = 0;
  v14 = *(const void **)(DerivedStorage + 760);
  if (!v14)
  {
    v15 = 0;
    if (!a1)
      goto LABEL_4;
    goto LABEL_3;
  }
  v15 = CFRetain(v14);
  if (a1)
LABEL_3:
    CFRetain(a1);
LABEL_4:
  if (a5)
    *a5 = 0;
  if (a3 < 0)
  {
    v24 = FigSignalErrorAt();
    goto LABEL_228;
  }
  blockBufferOut = a5;
  v16 = 0;
  if (!a4)
    goto LABEL_10;
  v17 = a3;
  if (*(_QWORD *)(DerivedStorage + 96) < a2)
    goto LABEL_24;
  v16 = 0;
  if (FigReadWriteLockLockForRead())
  {
LABEL_10:
    v17 = a3;
    goto LABEL_24;
  }
  v18 = *(_QWORD *)(DerivedStorage + 160);
  if (v18 < 0)
  {
LABEL_22:
    v17 = a3;
    goto LABEL_23;
  }
  v17 = a3;
  v19 = a3 - v18;
  if (a3 >= v18)
  {
    v20 = *(_QWORD *)(DerivedStorage + 96) + v18;
    v21 = v20 - a3;
    if (v20 > a3)
    {
      v22 = a3;
      if (v21 >= a2)
        v23 = a2;
      else
        v23 = v20 - a3;
      memcpy(a4, (const void *)(*(_QWORD *)(DerivedStorage + 152) + v19), v23);
      if (v21 >= a2)
      {
        v85 = v23;
        FigReadWriteLockUnlockForRead();
        v30 = 0;
        if (a6)
          *a6 = v85;
        goto LABEL_210;
      }
      v17 = v23 + v22;
      v16 = v23;
      a3 = v22;
      goto LABEL_23;
    }
    v16 = 0;
    goto LABEL_22;
  }
LABEL_23:
  FigReadWriteLockUnlockForRead();
LABEL_24:
  v90 = a3;
  v24 = FigRetainProxyLockMutex();
  if ((_DWORD)v24)
  {
LABEL_228:
    v30 = v24;
    goto LABEL_210;
  }
  if (FigRetainProxyIsInvalidated())
  {
    v30 = 4294954511;
    goto LABEL_210;
  }
  v94 = a2;
  v95 = a4;
  v89 = a6;
  if ((*(_QWORD *)(DerivedStorage + 56) == -1 || !*(_QWORD *)(DerivedStorage + 80))
    && !crabsUpdateLength(DerivedStorage, *(_QWORD *)(DerivedStorage + 32)))
  {
    v25 = crabsInitialize(DerivedStorage);
    if (v25)
    {
      v29 = v25;
      goto LABEL_163;
    }
    if (dword_1EE2A29E8)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  if (*(_QWORD *)(DerivedStorage + 56) != -1 && *(_QWORD *)(DerivedStorage + 80))
    goto LABEL_44;
  v27 = v16;
  if (*(_DWORD *)(DerivedStorage + 560) == 1)
  {
    v28 = (uint64_t *)(DerivedStorage + 512);
LABEL_37:
    v29 = crabsWaitForLoad(DerivedStorage, v28, 0, 0, a7);
    goto LABEL_38;
  }
  v28 = (uint64_t *)(DerivedStorage + 616);
  if (*(_DWORD *)(DerivedStorage + 664) == 1)
    goto LABEL_37;
  if (!*(_DWORD *)(DerivedStorage + 116)
    || (*(_BYTE *)(DerivedStorage + 504) & 8) != 0
    && *(_QWORD *)(DerivedStorage + 360) == *(_QWORD *)(DerivedStorage + 88))
  {
    v34 = *(_QWORD *)(DerivedStorage + 96);
    if (v34 == 0x4000)
    {
      v35 = v17 >> 14;
    }
    else if (v34 == 0x10000)
    {
      v35 = v17 >> 16;
    }
    else
    {
      v35 = v17 / v34;
    }
    v29 = crabsIssueImmedLoad(DerivedStorage, v17, v34 - v17 + v35 * v34);
    if (!v29)
      goto LABEL_37;
  }
  else
  {
    v29 = crabsMoveFirehose(DerivedStorage, v17);
    v28 = (uint64_t *)(DerivedStorage + 512);
    if (!v29)
      goto LABEL_37;
  }
LABEL_38:
  if (v29 == -12930)
    v30 = 0;
  else
    v30 = v29;
  v16 = v27;
  if ((_DWORD)v30)
  {
    if ((_DWORD)v30 == -12785)
      goto LABEL_209;
    FigSignalErrorAt();
    goto LABEL_163;
  }
LABEL_44:
  v31 = v94;
  if (*(_BYTE *)(DerivedStorage + 129))
  {
    v32 = *(_QWORD *)(DerivedStorage + 96);
    if (v32 == 0x4000)
    {
      v33 = v17 >> 14;
    }
    else if (v32 == 0x10000)
    {
      v33 = v17 >> 16;
    }
    else
    {
      v33 = v17 / v32;
    }
    if (*(uint64_t *)(DerivedStorage + 184) >= 1)
    {
      v36 = 0;
      v37 = *(_QWORD *)(DerivedStorage + 192);
      do
        *(_QWORD *)(v37 + 8 * v36++) = v33;
      while (v36 < *(_QWORD *)(DerivedStorage + 184));
    }
    crabsMoveAnchor(DerivedStorage, v33);
    *(_BYTE *)(DerivedStorage + 129) = 0;
  }
  cf = a1;
  IsBusy = crabsDiskBackingIsBusy(DerivedStorage, 0);
  if (v16 >= v94)
  {
    v38 = 0;
LABEL_160:
    v97 = v38;
    if (*(_DWORD *)(DerivedStorage + 560) == 1)
    {
      v29 = 0;
      goto LABEL_162;
    }
    a1 = cf;
    v74 = (CFTypeRef *)blockBufferOut;
    if (!*(_DWORD *)(DerivedStorage + 116))
      goto LABEL_169;
    v75 = *(_DWORD *)(DerivedStorage + 504);
    if ((v75 & 8) != 0 && *(_QWORD *)(DerivedStorage + 360) == *(_QWORD *)(DerivedStorage + 88))
      goto LABEL_169;
    if ((v75 & 3) == 0)
    {
      UpTimeNanoseconds = FigGetUpTimeNanoseconds();
      if (*(_QWORD *)(DerivedStorage + 496) > UpTimeNanoseconds)
      {
LABEL_169:
        v29 = 0;
        goto LABEL_181;
      }
      *(_QWORD *)(DerivedStorage + 496) = UpTimeNanoseconds + 50000000;
    }
    v29 = 0;
    if (!crabsSelectNextFill(DerivedStorage, &v97))
    {
      v77 = v16;
      v78 = v97;
      if (v97)
      {
        if (crabsShouldStartFirehose(DerivedStorage, *v97))
        {
          v30 = 4294954511;
          if (crabsMoveFirehose(DerivedStorage, *(_QWORD *)(DerivedStorage + 96) * *v78) == -12785)
            goto LABEL_209;
        }
        v29 = 0;
      }
      v16 = v77;
    }
    goto LABEL_181;
  }
  v38 = 0;
  v86 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v93 = v15;
  while (1)
  {
    v39 = *(_QWORD *)(DerivedStorage + 96);
    v96 = v16;
    if (v39 == 0x4000)
    {
      v40 = v17 >> 14;
    }
    else if (v39 == 0x10000)
    {
      v40 = v17 >> 16;
    }
    else
    {
      v40 = v17 / v39;
    }
    if (v40 >= *(_QWORD *)(DerivedStorage + 88) || !*(_BYTE *)(DerivedStorage + 104))
    {
      v16 = v96;
      goto LABEL_160;
    }
    v38 = *(int **)(*(_QWORD *)(DerivedStorage + 80) + 8 * v40);
    if (!v38
      && (crabsInitBlock(DerivedStorage, v40)
       || (v38 = *(int **)(*(_QWORD *)(DerivedStorage + 80) + 8 * v40)) == 0))
    {
      v30 = FigSignalErrorAt();
      goto LABEL_173;
    }
    if ((~*((unsigned __int16 *)v38 + 4) & 0x14) != 0)
    {
      v41 = *(uint64_t **)(DerivedStorage + 192);
      v42 = *(_QWORD *)(DerivedStorage + 200);
      if (v41[v42] != v40)
      {
        v43 = (v42 + 1) % *(_QWORD *)(DerivedStorage + 184);
        *(_QWORD *)(DerivedStorage + 200) = v43;
        v44 = *(_QWORD *)(DerivedStorage + 224);
        v45 = v41[v43];
        v41[v43] = v40;
        v46 = *(_QWORD *)(DerivedStorage + 216);
        v47 = v46 < 1;
        v48 = v46 - 1;
        if (!v47)
          *(_QWORD *)(DerivedStorage + 216) = v48;
        if (v44 == v45)
        {
          v49 = *(_QWORD *)(DerivedStorage + 88);
          v50 = *(_QWORD *)(DerivedStorage + 184);
          if (v50 >= 1)
          {
            do
            {
              v52 = *v41++;
              v51 = v52;
              if (v49 >= v52)
                v49 = v51;
              --v50;
            }
            while (v50);
          }
          if (*(_QWORD *)(DerivedStorage + 224) != v49)
            crabsMoveAnchor(DerivedStorage, v49);
        }
      }
    }
    v53 = v40 * v39;
    v54 = v17 - v40 * v39;
    if (*(_QWORD *)(DerivedStorage + 96) - v54 >= v31 - v96)
      v55 = v31 - v96;
    else
      v55 = *(_QWORD *)(DerivedStorage + 96) - v54;
    v56 = v55 + v17;
    if (v95 && (*(_BYTE *)(DerivedStorage + 504) & 1) != 0 && !IsBusy && v56 == v53 + v38[1])
    {
      v57 = *((unsigned __int16 *)v38 + 4);
      if ((v57 & 0x200) != 0)
      {
        if (((v57 >> 8) & 1) == 0)
          goto LABEL_95;
      }
      else if (!*((_QWORD *)v38 + 11))
      {
        goto LABEL_95;
      }
      if (!*((_QWORD *)v38 + 10))
      {
        *(_QWORD *)&customBlockSource.version = v55;
        v16 = v96;
        FigFileForkRead();
        v67 = *(_QWORD *)&customBlockSource.version;
        v15 = v93;
        goto LABEL_152;
      }
    }
LABEL_95:
    if (*((_QWORD *)v38 + 10))
    {
      if ((*(_BYTE *)(DerivedStorage + 504) & 1) != 0 && v38 == *(int **)(DerivedStorage + 744))
        crabsCompleteLazyPagein(DerivedStorage, 1);
      goto LABEL_109;
    }
    v58 = (v38[2] & 0x80) != 0
       && crabsMakeBackingNonvolatile((_QWORD *)DerivedStorage, (uint64_t)v38, *(_QWORD *)(DerivedStorage + 224) <= *v38) != 0;
    if (!crabAllocWorkingSet(DerivedStorage, (uint64_t)v38))
    {
      v59 = crabsSwipeUnusedWorking(DerivedStorage, (uint64_t)v38);
      if ((_DWORD)v59)
      {
        v30 = v59;
        if (!v58)
          goto LABEL_231;
        v15 = v93;
        if ((*(_BYTE *)(DerivedStorage + 504) & 3) == 0)
          crabsMakeBlockVolatileRelativeToAnchor((_QWORD *)DerivedStorage, v38);
LABEL_173:
        a1 = cf;
        goto LABEL_209;
      }
    }
    v60 = *((unsigned __int16 *)v38 + 4);
    if ((v60 & 0x200) != 0)
      v61 = (v60 >> 8) & 1;
    else
      v61 = *((_QWORD *)v38 + 11) != 0;
    v31 = v94;
    if (v61)
      crabsPageInBlock(DerivedStorage, v38);
LABEL_109:
    if ((v38[2] & 4) != 0 || v56 <= (unint64_t)(v53 + v38[1]))
      goto LABEL_127;
    LOBYTE(customBlockSource.version) = 0;
    *(_WORD *)(DerivedStorage + 176) |= 4u;
    crabsRetainWorking((_QWORD *)DerivedStorage, (uint64_t)v38);
    if (*(_DWORD *)(DerivedStorage + 664) == 1)
    {
      v62 = *(_QWORD *)(DerivedStorage + 632);
      if (v62 <= v17 && *(_QWORD *)(DerivedStorage + 640) + v62 >= v56)
      {
        v63 = (uint64_t *)(DerivedStorage + 616);
        if (*(_QWORD *)(DerivedStorage + 648) + v62 < v56)
          goto LABEL_122;
      }
    }
    if ((*(_BYTE *)(DerivedStorage + 504) & 8) == 0
      || *(_DWORD *)(DerivedStorage + 116) && *(_QWORD *)(DerivedStorage + 360) != *(_QWORD *)(DerivedStorage + 88))
    {
      v64 = crabsEvaluateFirehose(DerivedStorage, v38, 0, &customBlockSource);
      if (v64 | LOBYTE(customBlockSource.version))
      {
        v63 = (uint64_t *)(DerivedStorage + 512);
        if (!LOBYTE(customBlockSource.version))
          goto LABEL_122;
        v65 = crabsMoveFirehose(DerivedStorage, v17);
        v63 = (uint64_t *)(DerivedStorage + 512);
        if (!v65)
          goto LABEL_122;
      }
    }
    v29 = crabsIssueImmedLoad(DerivedStorage, v17, v55);
    v63 = (uint64_t *)(DerivedStorage + 616);
    if (!v29)
LABEL_122:
      v29 = crabsWaitForLoad(DerivedStorage, v63, v17, v55, a7);
    if (v29 == -12785)
      break;
    crabsReleaseWorking((_QWORD *)DerivedStorage, v38, 1, 1);
    if (v29 && v29 != -12930)
    {
      FigSignalErrorAt();
      a1 = cf;
      v74 = (CFTypeRef *)blockBufferOut;
      v15 = v93;
      v16 = v96;
      goto LABEL_181;
    }
    v31 = v94;
LABEL_127:
    v66 = v53 + v38[1];
    if (v56 <= v66)
      v67 = v55;
    else
      v67 = v66 - v17;
    if (v67 < 1)
    {
      v15 = v93;
LABEL_134:
      v16 = v96;
      goto LABEL_152;
    }
    v15 = v93;
    if (v95)
    {
      v68 = -(v40 * v39);
      v16 = v96;
      memcpy(&v95[v96], (const void *)(*(_QWORD *)(*((_QWORD *)v38 + 10) + 16) + v90 + v96 + v68), v67);
      crabsRetainWorking((_QWORD *)DerivedStorage, (uint64_t)v38);
      crabsReleaseWorking((_QWORD *)DerivedStorage, v38, 1, 1);
    }
    else
    {
      if (!blockBufferOut)
        goto LABEL_134;
      HIDWORD(customBlockSource.AllocateBlock) = 0;
      *(_QWORD *)&customBlockSource.version = 0;
      customBlockSource.FreeBlock = (void (__cdecl *)(void *, void *, size_t))crabsBBufRefReleaseFn;
      customBlockSource.refCon = (void *)*((_QWORD *)v38 + 10);
      v16 = v96;
      if (!*blockBufferOut)
      {
        Empty = CMBlockBufferCreateEmpty(v86, (v94 - 1 + *(_QWORD *)(DerivedStorage + 96)) / *(_QWORD *)(DerivedStorage + 96) + 1, 0, blockBufferOut);
        if (Empty)
        {
LABEL_221:
          v29 = Empty;
          v74 = (CFTypeRef *)blockBufferOut;
          a1 = cf;
          if (*blockBufferOut)
          {
            CFRelease(*blockBufferOut);
            *blockBufferOut = 0;
          }
          goto LABEL_181;
        }
      }
      if (v96 + v90 - v53 < 0)
      {
        v29 = FigSignalErrorAt();
LABEL_162:
        a1 = cf;
LABEL_163:
        v74 = (CFTypeRef *)blockBufferOut;
LABEL_181:
        if (v16 > 0 && v29 == -12930)
          v80 = 0;
        else
          v80 = v29;
        if (v89)
          *v89 = v16;
        if (v80)
          v81 = 0;
        else
          v81 = v16 == 0;
        if (v81 && v94 != 0)
          v80 = -12930;
        if (v80 == -12930)
          v30 = 4294954423;
        else
          v30 = v80;
        if (v74 && (_DWORD)v30 && *v74)
        {
          CFRelease(*v74);
          *v74 = 0;
        }
        if ((_DWORD)v30 != -12873 && (_DWORD)v30 != 0)
          *(_WORD *)(DerivedStorage + 176) |= 4u;
        goto LABEL_209;
      }
      Empty = CMBlockBufferAppendMemoryBlock(*blockBufferOut, *(void **)(*((_QWORD *)v38 + 10) + 16), *(_QWORD *)(DerivedStorage + 96), 0, &customBlockSource, v96 + v90 - v53, v67, 0);
      if (Empty)
        goto LABEL_221;
      crabsRetainWorking((_QWORD *)DerivedStorage, (uint64_t)v38);
      CFRetain(cf);
      ++gCRABS_Stats_4;
      ++*(_QWORD *)(DerivedStorage + 872);
      v70 = *(_QWORD *)(DerivedStorage + 96);
      gCRABS_Stats_2 += v70;
      *(_QWORD *)(DerivedStorage + 856) += v70;
      v31 = v94;
    }
    if (!FigReadWriteLockLockForWrite())
    {
      if ((v38[2] & 4) != 0)
      {
        v72 = *(_QWORD *)(DerivedStorage + 96);
        v71 = *(_QWORD *)(DerivedStorage + 160);
        if (v72 >= v31)
        {
          if (v71 != v53)
          {
            memcpy(*(void **)(DerivedStorage + 152), *(const void **)(*((_QWORD *)v38 + 10) + 16), v72);
            goto LABEL_150;
          }
LABEL_151:
          FigReadWriteLockUnlockForWrite();
          goto LABEL_152;
        }
      }
      else
      {
        v71 = *(_QWORD *)(DerivedStorage + 160);
      }
      if (v71 != v53)
      {
        v53 = -1;
LABEL_150:
        *(_QWORD *)(DerivedStorage + 160) = v53;
        goto LABEL_151;
      }
      goto LABEL_151;
    }
LABEL_152:
    v16 += v67;
    v17 += v67;
    if (v67 < v55 || v16 >= v31)
      goto LABEL_160;
  }
  v30 = 4294954511;
LABEL_231:
  a1 = cf;
  v15 = v93;
LABEL_209:
  crabsUnlockWithActions(DerivedStorage);
LABEL_210:
  if (v15)
    CFRelease(v15);
  if (a1)
    CFRelease(a1);
  return v30;
}

uint64_t crabsInitBlock(uint64_t a1, int a2)
{
  _WORD *v4;

  v4 = malloc_type_calloc(1uLL, 0x68uLL, 0x10B0040C2E76BD9uLL);
  if (!v4)
    return FigSignalErrorAt();
  if ((*(_BYTE *)(a1 + 504) & 1) != 0)
    v4[4] |= 0x200u;
  *(_DWORD *)v4 = a2;
  *((_QWORD *)v4 + 12) = -1;
  *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * a2) = v4;
  return 0;
}

uint64_t crabAllocWorkingSet(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  unint64_t v6;
  _QWORD *v7;
  __int16 v9;
  int v10;
  _OWORD v11[5];
  __int128 v12;
  uint64_t v13;

  if (*(uint64_t *)(a1 + 344) > 15)
    return 0;
  v5 = CFAllocatorAllocate(*(CFAllocatorRef *)a1, *(_QWORD *)(a1 + 96), 0);
  if (v5)
    goto LABEL_4;
  if ((*(_BYTE *)(a1 + 504) & 1) != 0)
    return 0;
  v13 = 0;
  v12 = 0u;
  memset(v11, 0, sizeof(v11));
  v9 = *(_WORD *)(a2 + 8);
  *(_WORD *)(a2 + 8) = v9 | 0x400;
  v10 = crabsSwipeBacking(a1, (uint64_t)v11, 0);
  v2 = 0;
  v5 = (void *)*((_QWORD *)&v12 + 1);
  *(_WORD *)(a2 + 8) = *(_WORD *)(a2 + 8) & 0xFBFF | v9 & 0x400;
  if (!v10)
  {
    if (v5)
    {
LABEL_4:
      v6 = *(_QWORD *)(a1 + 96);
      gCRABS_Stats_0 += v6;
      gCRABS_Stats_1 += v6;
      *(int64x2_t *)(a1 + 840) = vaddq_s64(*(int64x2_t *)(a1 + 840), vdupq_n_s64(v6));
      v7 = malloc_type_malloc(0x20uLL, 0x10300405ED1140EuLL);
      *(_QWORD *)(a2 + 80) = v7;
      if (v7)
      {
        *v7 = a2;
        v7[1] = a1;
        *((_DWORD *)v7 + 6) = 0;
        v7[2] = v5;
        v2 = 1;
        addToWorkingSet((_QWORD *)a1, a2, 1, 1);
        return v2;
      }
      CFAllocatorDeallocate(*(CFAllocatorRef *)a1, v5);
      return 0;
    }
  }
  return v2;
}

vm_address_t QTMovieCacheMemAllocateCallBack(vm_size_t size, uint64_t a2, uint64_t a3)
{
  vm_address_t result;
  unsigned int *v6;
  uint64_t v7;
  const __CFAllocator *v8;
  CFMutableDictionaryRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFDictionaryKeyCallBacks v12;
  vm_address_t address;
  vm_size_t valuePtr;

  result = 0;
  valuePtr = size;
  address = 0;
  if (*(_QWORD *)(a3 + 16) + size <= *(_QWORD *)(a3 + 24))
  {
    v6 = (unsigned int *)MEMORY[0x1E0C83DA0];
    if (vm_allocate(*MEMORY[0x1E0C83DA0], &address, size, 1610612739))
      return 0;
    v7 = *(_QWORD *)(a3 + 16);
    if (!v7)
    {
      *(_QWORD *)a3 = size;
      goto LABEL_12;
    }
    if (*(_QWORD *)a3 != size)
    {
      v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      if (*(_QWORD *)(a3 + 8)
        || (memset(&v12, 0, sizeof(v12)),
            v9 = CFDictionaryCreateMutable(v8, 0, &v12, MEMORY[0x1E0C9B3A0]),
            (*(_QWORD *)(a3 + 8) = v9) != 0))
      {
        v10 = CFNumberCreate(v8, kCFNumberSInt64Type, &valuePtr);
        if (v10)
        {
          v11 = v10;
          CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a3 + 8), (const void *)address, v10);
          CFRelease(v11);
          size = valuePtr;
          if (*(_QWORD *)(a3 + 8))
          {
            v7 = *(_QWORD *)(a3 + 16);
            goto LABEL_12;
          }
        }
        else
        {
          size = valuePtr;
        }
      }
      MEMORY[0x19403197C](*v6, address, size);
      return 0;
    }
LABEL_12:
    *(_QWORD *)(a3 + 16) = v7 + size;
    return address;
  }
  return result;
}

uint64_t addToWorkingSet(_QWORD *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;

  MEMORY[0x19402EA0C](a1[48]);
  v8 = *(_QWORD *)(a2 + 64);
  v9 = *(_QWORD **)(a2 + 72);
  if (v8)
  {
    *(_QWORD *)(v8 + 72) = v9;
    v9 = *(_QWORD **)(a2 + 72);
LABEL_5:
    *v9 = v8;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    goto LABEL_6;
  }
  if (v9)
  {
    a1[47] = v9;
    goto LABEL_5;
  }
LABEL_6:
  result = MEMORY[0x19402EA24](a1[48]);
  v11 = a2 + 32;
  if (!*(_QWORD *)(a2 + 32) && !*(_QWORD *)(a2 + 40))
  {
    if (a3)
    {
      if (!a4)
      {
        v17 = (_QWORD *)a1[40];
        *(_QWORD *)(a2 + 32) = 0;
        *(_QWORD *)(a2 + 40) = v17;
        *v17 = a2;
        a1[40] = v11;
        goto LABEL_22;
      }
      v12 = a1 + 39;
      v13 = a1[39];
      *(_QWORD *)(a2 + 32) = v13;
      if (v13)
        v14 = (_QWORD *)(v13 + 40);
      else
        v14 = a1 + 40;
      *v14 = v11;
      a1[39] = a2;
    }
    else
    {
      ++a1[44];
      *(_WORD *)(a2 + 8) |= 0x20u;
      if (!a4)
      {
        v18 = (_QWORD *)a1[42];
        *(_QWORD *)(a2 + 32) = 0;
        *(_QWORD *)(a2 + 40) = v18;
        *v18 = a2;
        a1[42] = v11;
        goto LABEL_22;
      }
      v12 = a1 + 41;
      v15 = a1[41];
      *(_QWORD *)(a2 + 32) = v15;
      if (v15)
        v16 = (_QWORD *)(v15 + 40);
      else
        v16 = a1 + 42;
      *v16 = v11;
      a1[41] = a2;
    }
    *(_QWORD *)(a2 + 40) = v12;
LABEL_22:
    ++a1[43];
  }
  return result;
}

_QWORD *crabsRetainWorking(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;

  result = (_QWORD *)FigAtomicIncrement32();
  if ((_DWORD)result == 1 && (*(_QWORD *)(a2 + 32) || *(_QWORD *)(a2 + 40)))
  {
    v5 = a1[12];
    gCRABS_Stats_1 -= v5;
    a1[106] -= v5;
    return removeFromWorkingSet(a1, a2);
  }
  return result;
}

_QWORD *removeFromWorkingSet(_QWORD *result, uint64_t a2)
{
  __int16 v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_WORD *)(a2 + 8);
  if ((v2 & 0x20) != 0)
  {
    --result[44];
    v5 = *(_QWORD *)(a2 + 32);
    v6 = *(_QWORD **)(a2 + 40);
    if (v5)
    {
      *(_QWORD *)(v5 + 40) = v6;
      v6 = *(_QWORD **)(a2 + 40);
    }
    else
    {
      if (!v6)
      {
LABEL_12:
        *(_WORD *)(a2 + 8) = v2 & 0xFFDF;
        goto LABEL_13;
      }
      result[42] = v6;
    }
    *v6 = v5;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    goto LABEL_12;
  }
  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD **)(a2 + 40);
  if (v3)
  {
    *(_QWORD *)(v3 + 40) = v4;
    v4 = *(_QWORD **)(a2 + 40);
LABEL_8:
    *v4 = v3;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    goto LABEL_13;
  }
  if (v4)
  {
    result[40] = v4;
    goto LABEL_8;
  }
LABEL_13:
  --result[43];
  return result;
}

uint64_t removeFromList(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = (_QWORD *)(a3 + 32);
  v5 = 32;
  if (!a4)
  {
    v5 = 48;
    v4 = (_QWORD *)(a3 + 48);
  }
  if (*(_QWORD *)(a3 + v5) || v4[1])
  {
    if (a4)
    {
      v6 = *(_QWORD *)(a3 + 32);
      v7 = *(_QWORD **)(a3 + 40);
      if (v6)
      {
        *(_QWORD *)(v6 + 40) = v7;
        v7 = *(_QWORD **)(a3 + 40);
        goto LABEL_11;
      }
    }
    else
    {
      v6 = *(_QWORD *)(a3 + 48);
      v7 = *(_QWORD **)(a3 + 56);
      if (v6)
      {
        *(_QWORD *)(v6 + 56) = v7;
        v7 = *(_QWORD **)(a3 + 56);
        goto LABEL_11;
      }
    }
    *(_QWORD *)(a2 + 8) = v7;
LABEL_11:
    *v7 = v6;
    *v4 = 0;
    v4[1] = 0;
    if (result + 264 == a2)
      *(_WORD *)(a3 + 8) &= ~0x1000u;
  }
  return result;
}

uint64_t crabsEvaluateFirehose(uint64_t a1, int *a2, int a3, _BYTE *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  *a4 = 1;
  if (*(_DWORD *)(a1 + 560) != 1 || *(_QWORD *)(a1 + 56) == -1 || !*(_QWORD *)(a1 + 80))
    return 0;
  v4 = *(_QWORD *)(a1 + 528);
  v5 = *(_QWORD *)(a1 + 544);
  v6 = v5 + v4;
  v7 = *(_QWORD *)(a1 + 96);
  if (v7 == 0x4000)
  {
    v8 = v6 >> 14;
  }
  else
  {
    v8 = v6 / v7;
    if (v7 == 0x10000)
      v8 = v6 >> 16;
  }
  v9 = *a2;
  v10 = v7 * v9;
  if (v4 <= v7 * v9 + a2[1] && *(_QWORD *)(a1 + 536) + v4 >= v10 + v7 && v6 < v10 + v7)
  {
    if (v5 < 1)
    {
      if (v7 == 0x4000)
      {
        v12 = v4 >> 14;
      }
      else if (v7 == 0x10000)
      {
        v12 = v4 >> 16;
      }
      else
      {
        v12 = v4 / v7;
      }
      if (v12 > v9 || v12 + 2 < v9)
        goto LABEL_26;
    }
    else if (*(_QWORD *)(a1 + 584) / *(uint64_t *)(a1 + 600) + v6 < v10)
    {
      goto LABEL_26;
    }
    v13 = 1;
LABEL_61:
    *a4 = 0;
    return v13;
  }
LABEL_26:
  if (!a3)
  {
    v16 = 1;
LABEL_38:
    if (*(uint64_t *)(a1 + 568) >= 1)
    {
      v16 = 0;
      *a4 = 0;
    }
    goto LABEL_40;
  }
  v14 = v8 + 2;
  if (__OFSUB__(v8, v8 + 2))
    v14 = v8;
  v15 = v14 + 1;
  v16 = 1;
  v17 = v8;
  do
  {
    if (v17 >= *(_QWORD *)(a1 + 88))
      break;
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v17);
    if (v18 && (*(_WORD *)(v18 + 8) & 1) != 0)
    {
      v16 = 0;
      *a4 = 0;
    }
    ++v17;
  }
  while (v15 != v17);
  if (v16)
    goto LABEL_38;
LABEL_40:
  if (*(uint64_t *)(a1 + 216) <= 0)
  {
    v23 = *(_QWORD *)(a1 + 184);
    if (v23 >= 1)
    {
      v24 = 0;
      v25 = v8 - 8;
      v26 = v8 + 2;
      while (v16 && *(_DWORD *)(a1 + 116))
      {
        v27 = *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * v24);
        if (v27 >= v25 && v27 <= v26)
        {
          v16 = 0;
          *a4 = 0;
          v23 = *(_QWORD *)(a1 + 184);
        }
        v22 = 0;
        if (++v24 >= v23)
          return v22;
      }
    }
    return 0;
  }
  v19 = *(_QWORD *)(a1 + 208);
  v20 = *(_QWORD *)(a1 + 88);
  if (v19 >= v20)
    return 0;
  while (1)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v19);
    if (!v21 || (*(_WORD *)(v21 + 8) & 4) == 0)
      break;
    v22 = 0;
    if (v20 == ++v19)
      return v22;
  }
  v13 = 0;
  v22 = 0;
  if (*a2 != v19)
    goto LABEL_61;
  return v22;
}

uint64_t crabsMoveFirehose(uint64_t a1, uint64_t a2)
{
  int IsBusy;
  const void *v5;
  CFTypeRef v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, __CFString *, __CFString *, uint64_t);
  NSObject *v26;

  IsBusy = crabsDiskBackingIsBusy(a1, 0);
  v5 = *(const void **)(a1 + 760);
  if (v5)
    v6 = CFRetain(v5);
  else
    v6 = 0;
  v7 = (uint64_t *)(a1 + 512);
  if (*(_DWORD *)(a1 + 560) == 1)
  {
    v8 = *v7;
    v9 = 1;
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  if (*(_QWORD *)(a1 + 56) == -1 || (v10 = *(_QWORD *)(a1 + 80)) == 0)
  {
    if (dword_1EE2A29E8)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v7 = (uint64_t *)(a1 + 512);
    }
    v14 = crabsIssueLoad(a1, (uint64_t)v7, a2, 0, v9, v8);
    goto LABEL_15;
  }
  v11 = *(_QWORD *)(a1 + 96);
  if (v11 == 0x4000)
  {
    v12 = a2 >> 14;
  }
  else if (v11 == 0x10000)
  {
    v12 = a2 >> 16;
  }
  else
  {
    v12 = a2 / v11;
  }
  v16 = *(_QWORD *)(a1 + 88);
  if (v12 < v16)
  {
    while (1)
    {
      v17 = *(_QWORD *)(v10 + 8 * v12);
      if (!v17)
      {
        if (crabsInitBlock(a1, v12))
          break;
        v10 = *(_QWORD *)(a1 + 80);
        v17 = *(_QWORD *)(v10 + 8 * v12);
        if (!v17)
          break;
      }
      if ((*(_WORD *)(v17 + 8) & 4) != 0 && (!IsBusy || *(_QWORD *)(v17 + 80)) && ++v12 < *(_QWORD *)(a1 + 88))
        continue;
      v16 = *(_QWORD *)(a1 + 88);
      goto LABEL_28;
    }
    v14 = FigSignalErrorAt();
LABEL_15:
    v15 = v14;
    if (!v6)
      return v15;
    goto LABEL_46;
  }
LABEL_28:
  if (v12 >= v16)
  {
    v15 = 4294954366;
    if (!v6)
      return v15;
    goto LABEL_46;
  }
  v18 = v12 + 1;
  if (v12 + 1 < v16)
  {
    while (1)
    {
      v19 = *(_QWORD *)(v10 + 8 * v18);
      if (v19)
      {
        if ((*(_WORD *)(v19 + 8) & 4) != 0 && (!IsBusy || *(_QWORD *)(v19 + 80)))
          break;
      }
      if (v16 == ++v18)
      {
        v18 = v16;
        break;
      }
    }
  }
  v20 = *(_QWORD *)(a1 + 96);
  v21 = v20 * v12;
  v22 = v20 * v18;
  if (dword_1EE2A29E8)
  {
    v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v23 = *(_QWORD *)(a1 + 920);
  if (v23)
  {
    v24 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 32);
    if (v24)
      v24(v23, CFSTR("crabsStats"), CFSTR("FMoves"), 1);
  }
  v15 = crabsIssueLoad(a1, a1 + 512, v21, v22 - v21, v9, v8);
  if (!(_DWORD)v15)
    *(_BYTE *)(a1 + 112) = 1;
  if (v6)
LABEL_46:
    CFRelease(v6);
  return v15;
}

uint64_t crabsIssueLoad(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  const void *v12;
  CFTypeRef v13;
  CFTypeRef v14;
  const void *v15;
  CFTypeRef v16;
  uint64_t UpTimeNanoseconds;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(CFTypeRef, __CFString *, __CFString *, uint64_t);
  uint64_t v22;
  void (*v23)(CFTypeRef, __CFString *, __CFString *, unint64_t);
  void (*v24)(CFTypeRef, __CFString *, __CFString *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  CFMutableDictionaryRef Mutable;
  uint64_t v42;
  void (*v43)(CFTypeRef, uint64_t);
  void (*v44)(CFTypeRef, __CFString *, __CFString *, uint64_t);
  void (*v45)(CFTypeRef, __CFString *, __CFString *, uint64_t);
  const void *v46;
  uint64_t (*v47)(CFTypeRef, uint64_t, uint64_t, CFMutableDictionaryRef, void (*)(const void *, uint64_t, uint64_t, uint64_t, OpaqueCMBlockBuffer *, char, int), CFTypeRef, _QWORD, uint64_t *);
  uint64_t v48;
  const void *v49;
  uint64_t v50;
  void (*v51)(CFTypeRef, __CFString *, __CFString *, uint64_t);
  void (*v52)(CFTypeRef, __CFString *, __CFString *, uint64_t);
  uint64_t v53;
  void (*v54)(CFTypeRef, uint64_t);
  void (*v55)(CFTypeRef, __CFString *, __CFString *, uint64_t);
  void (*v57)(CFTypeRef, __CFString *, __CFString *, uint64_t);
  uint64_t v58;
  int v59;
  CFTypeRef v60;
  CFTypeRef v61;
  uint64_t v62;

  v12 = *(const void **)(a1 + 760);
  if (v12)
    v13 = CFRetain(v12);
  else
    v13 = 0;
  v14 = *(CFTypeRef *)(a1 + 32);
  if (v14)
    v14 = CFRetain(v14);
  v60 = v13;
  v61 = v14;
  v15 = *(const void **)(a1 + 920);
  if (v15)
    v16 = CFRetain(v15);
  else
    v16 = 0;
  v59 = a5;
  if (a5)
  {
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    v18 = UpTimeNanoseconds - *(_QWORD *)(a2 + 64);
    if (v18 >= 1)
    {
      if (v16)
      {
        v19 = UpTimeNanoseconds;
        v58 = a6;
        v20 = *(_QWORD *)(a2 + 32);
        v21 = *(void (**)(CFTypeRef, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 32);
        if (v21)
          v21(v16, CFSTR("crabsStats"), CFSTR("FMReqBytes"), v20);
        v22 = *(_QWORD *)(a2 + 64);
        v23 = *(void (**)(CFTypeRef, __CFString *, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 32);
        if (v23)
          v23(v16, CFSTR("crabsStats"), CFSTR("FMReqTime"), (v19 - v22) / 0xF4240uLL);
        v24 = *(void (**)(CFTypeRef, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 40);
        a6 = v58;
        if (v24)
          v24(v16, CFSTR("crabsStats"), CFSTR("FOBR"), (uint64_t)((double)v20 * 8.0 / ((double)v18 / 1000000000.0)));
      }
    }
  }
  v62 = 0;
  v25 = *(_QWORD *)(a1 + 56);
  if (v25 == -1 || (v26 = *(_QWORD *)(a1 + 80)) == 0)
  {
    v36 = *(_QWORD *)(a1 + 96);
    v29 = a3 / v36 * v36;
    v37 = a3 % v36 + a4;
    v38 = (a4 + a3) % v36;
    v39 = v37 + v36 - v38;
    if (!v38)
      v39 = v37;
    if (a4)
      v32 = v39;
    else
      v32 = 0;
LABEL_39:
    *(_QWORD *)(a2 + 16) = v29;
    *(_QWORD *)(a2 + 24) = v32;
    *(_QWORD *)(a2 + 32) = 0;
    *(_DWORD *)(a2 + 48) = 1;
    *(_QWORD *)a2 = 1;
    *(_QWORD *)(a2 + 64) = FigGetUpTimeNanoseconds();
    *(_BYTE *)(a2 + 96) = 0;
    v40 = FigAtomicIncrement32();
    *(_DWORD *)(a2 + 8) = v40;
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v42 = a1 + 512;
    FigCFDictionarySetInt();
    FigRetainProxyUnlockMutex();
    if (v59)
    {
      v43 = *(void (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v43)
        v43(v61, a6);
      if (v16)
      {
        v44 = *(void (**)(CFTypeRef, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 32);
        if (v44)
          v44(v16, CFSTR("crabsStats"), CFSTR("AbortReqCount"), 1);
        v45 = *(void (**)(CFTypeRef, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 32);
        if (v45)
          v45(v16, CFSTR("crabsStats"), CFSTR("AFMReq"), 1);
      }
    }
    v46 = v61;
    v47 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, CFMutableDictionaryRef, void (*)(const void *, uint64_t, uint64_t, uint64_t, OpaqueCMBlockBuffer *, char, int), CFTypeRef, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v47)
    {
      v48 = v29;
      v49 = v60;
      v50 = v47(v61, v48, v32, Mutable, crabsIncrementalReadCallback, v60, v40, &v62);
    }
    else
    {
      v50 = 4294954514;
      v49 = v60;
    }
    FigRetainProxyLockMutex();
    if (FigRetainProxyIsInvalidated())
    {
      v50 = 4294954511;
    }
    else
    {
      if ((_DWORD)v50)
      {
        *(_DWORD *)(a2 + 48) = v50;
        *(_QWORD *)a2 = 1;
        goto LABEL_69;
      }
      if (v40 == *(_DWORD *)(a2 + 8) && *(_QWORD *)a2 == 1)
      {
        *(_QWORD *)a2 = v62;
        if (v16)
        {
          v51 = *(void (**)(CFTypeRef, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 32);
          if (v51)
            v51(v16, CFSTR("crabsStats"), CFSTR("MReqCount"), 1);
          if (v42 != a2)
          {
            v52 = *(void (**)(CFTypeRef, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 32);
            if (v52)
              v52(v16, CFSTR("crabsStats"), CFSTR("IMReq"), 1);
            goto LABEL_61;
          }
          v57 = *(void (**)(CFTypeRef, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 32);
          if (v57)
            v57(v16, CFSTR("crabsStats"), CFSTR("FMReq"), 1);
        }
        else if (v42 != a2)
        {
LABEL_61:
          v50 = 0;
          ++*(_DWORD *)(a1 + 836);
          goto LABEL_69;
        }
        v50 = 0;
        ++*(_DWORD *)(a1 + 832);
      }
      else
      {
        FigRetainProxyUnlockMutex();
        v53 = v62;
        v54 = *(void (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (v54)
          v54(v61, v53);
        FigRetainProxyLockMutex();
        if (FigRetainProxyIsInvalidated())
        {
          v50 = 4294954511;
          v46 = v61;
        }
        else
        {
          v46 = v61;
          if (v16)
          {
            v55 = *(void (**)(CFTypeRef, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 32);
            if (v55)
              v55(v16, CFSTR("crabsStats"), CFSTR("AbortReqCount"), 1);
          }
          v50 = FigSignalErrorAt();
        }
      }
    }
LABEL_69:
    if (Mutable)
      CFRelease(Mutable);
    if (v16)
      goto LABEL_72;
    goto LABEL_73;
  }
  v27 = *(_QWORD *)(a1 + 96);
  v28 = a3 / v27;
  v29 = a3 / v27 * v27;
  v30 = (a4 + a3) % v27;
  if (v30)
    v31 = v27 - v30;
  else
    v31 = 0;
  if (a3 % v27 + a4 + v31 + v29 <= v25)
    v32 = a3 % v27 + a4 + v31;
  else
    v32 = v25 - v29;
  v33 = v29 >> 14;
  if (v27 == 0x10000)
    v28 = v29 >> 16;
  if (v27 != 0x4000)
    v33 = v28;
  v34 = *(_QWORD *)(v26 + 8 * v33);
  if (!v34)
    goto LABEL_39;
  v35 = *(int *)(v34 + 4);
  if (!(_DWORD)v35)
    goto LABEL_39;
  v32 -= v35;
  if (v32)
  {
    v29 += v35;
    goto LABEL_39;
  }
  v50 = 0;
  *(_DWORD *)(a2 + 48) = 0;
  v49 = v60;
  v46 = v61;
  if (v16)
LABEL_72:
    CFRelease(v16);
LABEL_73:
  if (v46)
    CFRelease(v46);
  if (v49)
    CFRelease(v49);
  return v50;
}

uint64_t FigCFHTTPRead(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, const void *a6, uint64_t a7, _QWORD *a8)
{
  return FigCFHTTPReadWithAdditionalHeaders(a1, 0, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t crabsWaitForLoad(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  const void *v10;
  CFTypeRef v11;
  const void *Owner;
  CFTypeRef v13;
  uint64_t v14;
  OpaqueCMClock *HostTimeClock;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  NSObject *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  NSObject *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  NSObject *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  CFTypeRef v54;
  uint64_t v55;
  OpaqueCMClock *clock;
  uint64_t v57;
  uint64_t v58;
  CMTime v59;
  os_log_type_t type;
  unsigned int v61;
  CMTime v62;
  CMTime v63;
  CMTime time;
  uint64_t v65;
  uint64_t v66;
  CFTypeRef v67;
  uint64_t v68;
  int v69;
  const char *v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  int v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  uint64_t v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v10 = *(const void **)(a1 + 760);
  if (v10)
    v11 = CFRetain(v10);
  else
    v11 = 0;
  Owner = (const void *)FigRetainProxyGetOwner();
  if (Owner)
    v13 = CFRetain(Owner);
  else
    v13 = 0;
  v14 = a3;
  v67 = v11;
  v68 = 0;
  v66 = a2[5];
  HostTimeClock = CMClockGetHostTimeClock();
  v65 = 0;
  ++a2[7];
  clock = HostTimeClock;
  if (a5 == -1)
  {
    v19 = *(_QWORD *)(a1 + 968);
    CMTimeMake(&v62, *(int *)(a1 + 48), 1000);
    v18 = FigNetworkUrgencyAssertDeadline(v19, &v62);
    v16 = 0;
  }
  else
  {
    CMClockGetTime(&time, HostTimeClock);
    v16 = (uint64_t)((double)a5 * 1000000.0 + CMTimeGetSeconds(&time) * 1000000000.0);
    v17 = *(_QWORD *)(a1 + 968);
    CMTimeMake(&v63, a5, 1000);
    v18 = FigNetworkUrgencyAssertDeadline(v17, &v63);
  }
  FigRetainProxyUnlockMutex();
  v20 = FigThreadRegisterAbortAction();
  FigRetainProxyLockMutex();
  if (!(_DWORD)v20)
  {
    v55 = v18;
    if (FigRetainProxyIsInvalidated() || !*(_BYTE *)(a1 + 104))
    {
LABEL_95:
      v20 = 4294954425;
    }
    else
    {
      v21 = v14;
      if (*(_QWORD *)(a1 + 56) != -1)
      {
        if (a4)
        {
          v22 = *(_QWORD *)(a1 + 80);
          if (v22)
          {
            v23 = *(_QWORD *)(a1 + 96);
            if (v23 == 0x4000)
              v24 = v14 >> 14;
            else
              v24 = v23 == 0x10000 ? v14 >> 16 : v14 / v23;
            v25 = *(int **)(v22 + 8 * v24);
            if (v25)
            {
              v26 = v25[1] + v23 * *v25;
              v27 = v26 <= v14;
              v28 = v26 - v14;
              if (!v27)
              {
                if (v28 >= a4)
                  v28 = a4;
                v21 = v28 + v14;
                a4 -= v28;
              }
            }
          }
        }
      }
      v57 = 0;
      v29 = v21 + a4;
      v30 = (double)v16;
      v58 = v21;
      if (!a4)
        goto LABEL_33;
LABEL_27:
      v20 = *((unsigned int *)a2 + 12);
      if ((_DWORD)v20 == 1
        && (v31 = a2[2], v31 <= v21)
        && a2[3] + v31 >= v29
        && a2[4] + v31 < v29
        && !crabsRangeInBlockIsCached(a1, v21, a4))
      {
        while (1)
        {
          v20 = v68;
          if ((_DWORD)v68)
            break;
          if (a5 == -1)
          {
            v57 = *(_QWORD *)(a1 + 400);
          }
          else
          {
            CMClockGetTime(&v59, clock);
            if ((uint64_t)(v30 + CMTimeGetSeconds(&v59) * -1000000000.0) < 1)
            {
              v20 = 4294966295;
              goto LABEL_88;
            }
          }
          v20 = FigRetainProxyConditionVariableWaitRelative();
          if (FigRetainProxyIsInvalidated())
            goto LABEL_80;
          if ((_DWORD)v20 == -12792)
          {
            crabsReportingReportError(a1, (uint64_t)CFSTR("CoreMediaErrorDomain"), (uint64_t)CFSTR("CRABS Timed out"), -1001);
            v61 = 0;
            type = OS_LOG_TYPE_DEFAULT;
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v33 = v61;
            if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
              v34 = v33;
            else
              v34 = v33 & 0xFFFFFFFE;
            if (v34)
            {
              v35 = *a2;
              v69 = 136316162;
              v70 = "crabsWaitForLoad";
              v71 = 2048;
              v72 = a1;
              v73 = 2048;
              v74 = v35;
              v75 = 1024;
              v76 = -1001;
              v77 = 1024;
              LODWORD(v78) = a5;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v20 = 4294966295;
            v21 = v58;
          }
          if (a5 == -1 && (_DWORD)v20 && v57 != *(_QWORD *)(a1 + 400))
          {
            if (dword_1EE2A29E8)
            {
              v54 = v13;
              v61 = 0;
              type = OS_LOG_TYPE_DEFAULT;
              v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v42 = v61;
              if (os_log_type_enabled(v41, type))
                v43 = v42;
              else
                v43 = v42 & 0xFFFFFFFE;
              if (v43)
              {
                v44 = *a2;
                v45 = *(_QWORD *)(a1 + 400);
                v69 = 136316418;
                v70 = "crabsWaitForLoad";
                v71 = 2048;
                v72 = a1;
                v73 = 2048;
                v74 = v44;
                v75 = 1024;
                v76 = v20;
                v77 = 2048;
                v78 = v57;
                v79 = 2048;
                v80 = v45;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              v13 = v54;
              v21 = v58;
            }
          }
          else if ((_DWORD)v20)
          {
            goto LABEL_88;
          }
          v36 = *(unsigned __int8 *)(a1 + 104);
          if (!*(_BYTE *)(a1 + 104) && dword_1EE2A29E8)
          {
            v61 = 0;
            type = OS_LOG_TYPE_DEFAULT;
            v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v38 = v61;
            if (os_log_type_enabled(v37, type))
              v39 = v38;
            else
              v39 = v38 & 0xFFFFFFFE;
            if (v39)
            {
              v40 = *a2;
              v69 = 136315650;
              v70 = "crabsWaitForLoad";
              v71 = 2048;
              v72 = a1;
              v73 = 2048;
              v74 = v40;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v36 = *(unsigned __int8 *)(a1 + 104);
            v21 = v58;
          }
          if (!v36)
            goto LABEL_95;
          v20 = *((unsigned int *)a2 + 12);
          if (v20 > 1)
            goto LABEL_88;
          ++gCRABS_Stats_7;
          ++*(_QWORD *)(a1 + 896);
          if (a4)
            goto LABEL_27;
LABEL_33:
          if (*(_QWORD *)(a1 + 56) != -1 && *(_QWORD *)(a1 + 80))
            goto LABEL_80;
        }
        if (dword_1EE2A29E8)
        {
          v61 = 0;
          type = OS_LOG_TYPE_DEFAULT;
          v49 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v50 = v61;
          if (os_log_type_enabled(v49, type))
            v51 = v50;
          else
            v51 = v50 & 0xFFFFFFFE;
          if (v51)
          {
            v52 = *a2;
            v69 = 136315650;
            v70 = "crabsWaitForLoad";
            v71 = 2048;
            v72 = a1;
            v73 = 2048;
            v74 = v52;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v20 = v68;
        }
      }
      else
      {
        v46 = *(_QWORD *)(a1 + 96);
        if (v46 == 0x4000)
        {
          v47 = v21 >> 14;
        }
        else if (v46 == 0x10000)
        {
          v47 = v21 >> 16;
        }
        else
        {
          v47 = v21 / v46;
        }
        v48 = *(int **)(*(_QWORD *)(a1 + 80) + 8 * v47);
        if (v48 && v48[1] + v46 * *v48 >= v29)
        {
LABEL_80:
          v20 = 0;
        }
        else if (v20 <= 1)
        {
          v20 = FigSignalErrorAt();
        }
      }
    }
LABEL_88:
    FigRetainProxyUnlockMutex();
    FigThreadUnregisterAbortAction();
    FigRetainProxyLockMutex();
    v18 = v55;
    if (FigRetainProxyIsInvalidated())
      v20 = 4294954425;
  }
  FigNetworkUrgencyCancelDeadline(*(_QWORD *)(a1 + 968), v18);
  --a2[7];
  if (v13)
    CFRelease(v13);
  if (v11)
    CFRelease(v11);
  return v20;
}

uint64_t FigCFHTTPReadResponse(uint64_t a1, int a2, uint64_t a3, void *a4, size_t a5, size_t a6, char a7, int a8)
{
  const void *Owner;
  CFTypeRef v16;
  uint64_t DerivedStorage;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, __CFString *, _QWORD, CFTypeRef *);
  uint64_t v21;
  char v22;
  _BOOL4 v23;
  unsigned int (*v24)(uint64_t, __CFString *, _QWORD, CFTypeRef *);
  const void *v25;
  unsigned int (*v26)(uint64_t, _QWORD, uint64_t, _QWORD);
  uint64_t v27;
  unint64_t v28;
  void (*v29)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD);
  int Error;
  _BOOL4 v31;
  uint64_t UpTimeNanoseconds;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD);
  uint64_t v37;
  void (*v38)(uint64_t, __CFString *, __CFString *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int HTTPRequestFlags;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  NSObject *v49;
  const void *v50;
  int v51;
  int HTTPRequest;
  void (*v53)(const void *);
  void (*v54)(uint64_t, __CFString *, __CFString *, uint64_t);
  uint64_t v55;
  int v57;
  int v58;
  BOOL v59;
  int v61;
  int v62;
  __CFError *v63;
  int v64;
  NSObject *v65;
  uint64_t v66;
  void (*v67)(uint64_t);
  NSObject *v68;
  NSObject *v69;
  NSObject *v70;
  NSObject *v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  NSObject *v75;
  NSObject *v76;
  NSObject *v77;
  int v78;
  int v79;
  uint64_t v80;
  CFTypeRef v81;
  size_t offsetToData;
  uint64_t v83;
  CMBlockBufferRef blockBufferOut;
  char v85;
  uint64_t v86;
  uint64_t v87;
  CFTypeRef v88[19];

  v88[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v86 = 0;
  v87 = 0;
  v85 = 0;
  blockBufferOut = 0;
  FigRetainProxyRetain();
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated())
    goto LABEL_105;
  offsetToData = a5;
  Owner = (const void *)FigRetainProxyGetOwner();
  if (Owner)
    v16 = CFRetain(Owner);
  else
    v16 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v18 = *(_QWORD *)(DerivedStorage + 56);
  if (v18)
  {
    v19 = DerivedStorage;
    while (*(_QWORD *)(v18 + 24) != a1 || *(_DWORD *)(v18 + 32) != a2)
    {
      v18 = *(_QWORD *)(v18 + 128);
      if (!v18)
        goto LABEL_101;
    }
    if (!*(_BYTE *)(v18 + 125))
    {
      FigAtomicIncrement32();
      if (*(_BYTE *)(v18 + 104))
        goto LABEL_24;
      v88[0] = 0;
      v20 = *(unsigned int (**)(uint64_t, __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
      if (v20 && !v20(a1, CFSTR("FHRP_CFNetworkTimingData"), *MEMORY[0x1E0C9AE00], v88))
      {
        LODWORD(v21) = FigNetworkInterfaceGetInterfaceTypeFromCFNStats((uint64_t)v88[0]);
        *(_DWORD *)(v19 + 388) = v21;
        if (!v88[0])
          goto LABEL_18;
        CFRelease(v88[0]);
      }
      LODWORD(v21) = *(_DWORD *)(v19 + 388);
LABEL_18:
      if (!(_DWORD)v21)
      {
        v21 = *(_QWORD *)(v19 + 408);
        if (v21)
        {
          LODWORD(v21) = FigNetworkPathInformationGetInterfaceType();
          *(_DWORD *)(v19 + 388) = v21;
        }
      }
      if (FigNetworkInterfaceIsCellular(v21))
        ++*(_QWORD *)(v19 + 360);
      fbf_ConfigurePathEvaluator(v19, *(_QWORD *)v19);
      *(_BYTE *)(v18 + 104) = 1;
LABEL_24:
      v81 = v16;
      if (*(_DWORD *)(v19 + 72))
      {
        if (!a8)
        {
          v22 = a7;
          if ((a7 & 1) != 0)
          {
            v88[0] = 0;
            v23 = fbf_httpRequestHandlesNetworkTransitions(a1);
            *(_BYTE *)(v18 + 124) = v23;
            fbf_UpdateAndReportMultiPathActivity((_QWORD *)v19, v23);
            v24 = *(unsigned int (**)(uint64_t, __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
            if (v24)
            {
              if (!v24(a1, CFSTR("FHRP_RemoteIPAddress"), *MEMORY[0x1E0C9AE00], v88))
              {
                v25 = *(const void **)(v19 + 136);
                if (v25)
                {
                  if (CFEqual(v25, v88[0]))
                  {
                    CFRelease(v88[0]);
                  }
                  else
                  {
                    if (*(_QWORD *)(v19 + 32))
                    {
                      v80 = *(_QWORD *)(v19 + 32);
                      v54 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 32);
                      if (v54)
                        v54(v80, CFSTR("byteFlumeStats"), CFSTR("SrvAddrCount"), 1);
                    }
                    CFRelease(*(CFTypeRef *)(v19 + 136));
                    v55 = *(_QWORD *)(v19 + 144) + 1;
                    *(CFTypeRef *)(v19 + 136) = v88[0];
                    *(_QWORD *)(v19 + 144) = v55;
                  }
                }
                else
                {
                  *(CFTypeRef *)(v19 + 136) = v88[0];
                }
                fbf_ReportingAgentSetServerAddress(v19);
                if (!a4)
                  goto LABEL_73;
LABEL_44:
                if (a6)
                {
                  v79 = a8;
                  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
                  v86 = UpTimeNanoseconds - *(_QWORD *)(v19 + 320);
                  LODWORD(v87) = a6;
                  ++*(_DWORD *)(v19 + 284);
                  FigByteRateHistoryAddToSample(*(_QWORD *)(v19 + 344), (uint64_t)&v86);
                  if (FigByteRateHistoryGetCurrentSampleDuration(*(_QWORD *)(v19 + 344)) >= 100000000)
                    FigByteRateHistoryNextSample(*(uint64_t **)(v19 + 344));
                  v33 = *(_QWORD *)(v19 + 312) + v86;
                  *(_QWORD *)(v19 + 312) = v33;
                  *(_QWORD *)(v19 + 320) = UpTimeNanoseconds;
                  v34 = *(_QWORD *)(v19 + 288) + a6;
                  *(_QWORD *)(v19 + 288) = v34;
                  if (v33 >= 1)
                  {
                    v35 = *(_QWORD *)(v19 + 32);
                    if (v35)
                    {
                      v36 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
                      if (v36)
                        v36(v35, CFSTR("byteFlumeStats"), CFSTR("ADT"), v33 / 0xF4240uLL, 0);
                      v37 = *(_QWORD *)(v19 + 32);
                      if (v37)
                      {
                        v38 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                  + 40);
                        if (v38)
                          v38(v37, CFSTR("byteFlumeStats"), CFSTR("OBR"), (uint64_t)((double)v34 * 8.0 / ((double)v33 / 1000000000.0)));
                      }
                    }
                  }
                  v22 = a7;
                  if ((a7 & 4) != 0)
                    *(_QWORD *)(v19 + 296) += a6;
                  if ((a7 & 8) != 0)
                    *(_QWORD *)(v19 + 304) += a6;
                  if (!offsetToData && CMBlockBufferGetDataLength((CMBlockBufferRef)a4) == a6)
                  {
                    CFRetain(a4);
                    blockBufferOut = (CMBlockBufferRef)a4;
                    goto LABEL_62;
                  }
                  if (!CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CMBlockBufferRef)a4, 0, 0, offsetToData, a6, 0, &blockBufferOut))
                  {
LABEL_62:
                    v39 = *(_QWORD *)(v18 + 112);
                    *(_QWORD *)(v18 + 112) = v39 + a6;
                    if ((int64_t)(v39 + a6) >= *(_QWORD *)(v18 + 8))
                    {
                      v40 = 1;
                      *(_BYTE *)(v18 + 127) = 1;
                    }
                    else
                    {
                      v40 = 0;
                    }
                    v41 = *(const void **)(v19 + 24);
                    if (v41)
                    {
                      CFRelease(v41);
                      *(_QWORD *)(v19 + 24) = 0;
                    }
                    *(_QWORD *)(v19 + 328) = 0;
                    if (*(_BYTE *)(v19 + 17) == 1)
                    {
                      if (dword_1EE2A2D10)
                      {
                        LODWORD(v83) = 0;
                        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                        fig_log_call_emit_and_clean_up_after_send_and_compose();
                      }
                      *(_WORD *)(v19 + 17) = 0;
                      *(_DWORD *)(v19 + 496) = 0;
                      if (FigByteFlumePostHostAvailableNotification(v19))
                        fbf_ReportingAgentResetErrorStats(v19);
                    }
                    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t, CMBlockBufferRef, uint64_t, _QWORD))(v18 + 16))(*(_QWORD *)(v18 + 40), *(_QWORD *)(v18 + 48), *(_QWORD *)(v18 + 64), v39, blockBufferOut, v40, 0);
                    if (FigRetainProxyIsInvalidated())
                      goto LABEL_100;
                    goto LABEL_73;
                  }
                  v57 = FigSignalErrorAt();
                  a8 = v79;
                  if (!v57)
                    goto LABEL_100;
LABEL_110:
                  v83 = 0;
                  v58 = *(_DWORD *)(v19 + 44);
                  if (*(_BYTE *)(v19 + 40))
                    v59 = v58 == 1;
                  else
                    v59 = 0;
                  v61 = v59 || v58 == 2;
                  FigNetworkInterfaceReporterSamplePhysicalStatistics(*(_QWORD *)(v19 + 592), a1, *(_QWORD *)(v19 + 32), 0x1E301B6D8, v61);
                  v62 = *(_DWORD *)(v19 + 72);
                  if (v62)
                  {
                    if (*(_BYTE *)(v19 + 152))
                    {
                      v63 = *(__CFError **)(v19 + 24);
                      if (v63)
                      {
                        if (*(_QWORD *)(v19 + 216) > *(_QWORD *)(v19 + 160)
                          && CFErrorGetCode(*(CFErrorRef *)(v19 + 24)) == -1009)
                        {
                          CFErrorGetDomain(v63);
                          if (FigCFEqual() || (CFErrorGetDomain(v63), FigCFEqual()))
                          {
                            v64 = -17760;
                            fbf_ReleaseAndCreateLastError(v19, -17760, (uint64_t)CFSTR("CoreMediaErrorDomain"), (uint64_t)CFSTR("File exceeds max size allowed over cellular."));
                            fbf_FailImmediately(v19);
LABEL_144:
                            LOBYTE(v66) = 1;
                            goto LABEL_145;
                          }
                        }
                      }
                    }
                    if (!*(_DWORD *)(v19 + 380))
                    {
                      if (dword_1EE2A2D10)
                      {
                        v68 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                        os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT);
                        fig_log_call_emit_and_clean_up_after_send_and_compose();
                      }
                      fbf_FailImmediately(v19);
                      goto LABEL_143;
                    }
                    FigCFHTTPGoInactiveIfUnreachable(v19, &v83);
                    if (*(_BYTE *)(v19 + 392))
                    {
                      if (dword_1EE2A2D10)
                      {
                        v65 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                        os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT);
                        fig_log_call_emit_and_clean_up_after_send_and_compose();
                      }
                      FigHTTPRescheduleTimer(8073216000.0, *(_QWORD *)(v19 + 48), *(NSObject **)(v19 + 456));
                      fbf_CancelReconnect(v19);
                      goto LABEL_143;
                    }
                    if (*(_BYTE *)(v19 + 17))
                    {
                      if (!dword_1EE2A2D10)
                      {
LABEL_143:
                        v64 = -12935;
                        goto LABEL_144;
                      }
                      v69 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                      os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT);
                      LOBYTE(v66) = 1;
                      fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_135:
                      v64 = -12935;
LABEL_145:
                      FigByteFlumePostHostUnavailableNotification(v19);
                      FigRetainProxyRetainOwner();
                      FigCFHTTPStopAllReads(v19, v64);
                      FigRetainProxyReleaseOwner();
                      if (FigRetainProxyIsInvalidated())
                        goto LABEL_100;
                      if (!v62)
                      {
                        if (dword_1EE2A2D10)
                        {
                          v71 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                          os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT);
                          fig_log_call_emit_and_clean_up_after_send_and_compose();
                        }
                        *(_BYTE *)(v19 + 608) = 1;
                        fbf_FailImmediately(v19);
                        if (a8)
                          v73 = a8;
                        else
                          v73 = v57;
                        fbf_ReportingAgentReportErrorEvent(v19, CFSTR("CoreMediaErrorDomain"), CFSTR("Failed without successful flume open"), 1u, v73);
                        goto LABEL_100;
                      }
                      if ((v66 & 1) != 0)
                        goto LABEL_100;
                      *(_BYTE *)(v19 + 17) = 1;
                      if (a8 == -12421 || v85)
                      {
                        v72 = *(_QWORD *)(v19 + 328) + 300000000000;
                        if (v72 >= FigGetUpTimeNanoseconds())
                        {
                          v74 = v83;
                          if (v83)
                          {
                            if (dword_1EE2A2D10)
                            {
                              v75 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                              os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT);
                              fig_log_call_emit_and_clean_up_after_send_and_compose();
                            }
                            fbf_SetRetryAttemptTimer(v19, v74);
                          }
                          else
                          {
                            if (dword_1EE2A2D10)
                            {
                              v77 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                              os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT);
                              fig_log_call_emit_and_clean_up_after_send_and_compose();
                            }
                            fbf_TryReconnect(v19);
                          }
                          goto LABEL_100;
                        }
                        if (!dword_1EE2A2D10)
                          goto LABEL_164;
                      }
                      else if (!dword_1EE2A2D10)
                      {
LABEL_164:
                        *(_QWORD *)(v19 + 512) = 0;
                        fbf_postConnectionToHostLostNotification(v19);
                        goto LABEL_100;
                      }
                      v70 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                      os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT);
                      fig_log_call_emit_and_clean_up_after_send_and_compose();
                      goto LABEL_164;
                    }
                    if (dword_1EE2A2D10)
                    {
                      v76 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                      os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT);
                      fig_log_call_emit_and_clean_up_after_send_and_compose();
                    }
                  }
                  else
                  {
                    *(_DWORD *)(v19 + 72) = 2;
                    v66 = *(_QWORD *)(v19 + 88);
                    if (!v66)
                      goto LABEL_135;
                    v67 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
                    if (v67)
                      v67(v66);
                  }
                  LOBYTE(v66) = 0;
                  goto LABEL_135;
                }
LABEL_73:
                if ((v22 & 2) != 0)
                {
                  FigReportingAgentUpdateFinalTransactionMetrics(*(_QWORD *)(v19 + 32), a1, 0, 1);
                  *(_DWORD *)(v18 + 120) = -12930;
                  if (!*(_BYTE *)(v18 + 125))
                  {
                    FigCFHTTPFinishReadRequest(v19, v18, 1);
                    FigRetainProxyIsInvalidated();
                  }
                  goto LABEL_100;
                }
                HTTPRequestFlags = fbf_CreateHTTPRequestFlags(v19);
                v44 = *(_DWORD *)(v18 + 36);
                if (((v44 ^ HTTPRequestFlags) & 0xFFFFFE7F) == 0)
                {
                  if (!FigNetworkInterfaceIsCellular(*(_DWORD *)(v19 + 388)))
                  {
                    if (!*(_BYTE *)(v18 + 105))
                    {
                      if (dword_1EE2A2D10)
                      {
                        LODWORD(v83) = 0;
                        v49 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                        os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT);
                        fig_log_call_emit_and_clean_up_after_send_and_compose();
                      }
                      *(_BYTE *)(v18 + 105) = 1;
                    }
                    goto LABEL_100;
                  }
                  v44 = *(_DWORD *)(v18 + 36);
                }
                if (HTTPRequestFlags != v44)
                {
                  v45 = *(_QWORD *)(v18 + 112);
                  v46 = v45 + *(_QWORD *)v18;
                  v47 = *(_QWORD *)(v18 + 8) - v45;
                  if (dword_1EE2A2D10)
                  {
                    LODWORD(v83) = 0;
                    v48 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT);
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                  }
                  v50 = *(const void **)(v18 + 24);
                  v51 = *(_DWORD *)(v18 + 32);
                  *(_QWORD *)(v18 + 24) = 0;
                  *(_DWORD *)(v18 + 32) = 0;
                  *(_DWORD *)(v18 + 36) = HTTPRequestFlags;
                  HTTPRequest = fbf_CreateHTTPRequest(v19, v18, v46, v47);
                  if (HTTPRequest)
                  {
                    *(_QWORD *)(v18 + 24) = v50;
                    *(_DWORD *)(v18 + 32) = v51;
                    *(_DWORD *)(v18 + 120) = HTTPRequest;
                    if (!*(_BYTE *)(v18 + 125))
                      FigCFHTTPFinishReadRequest(v19, v18, 0);
                  }
                  else if (v50)
                  {
                    v53 = *(void (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
                    if (v53)
                      v53(v50);
                    CFRelease(v50);
                  }
                }
LABEL_100:
                ReadRequestRelease(v18);
                v16 = v81;
                goto LABEL_101;
              }
            }
          }
LABEL_43:
          if (!a4)
            goto LABEL_73;
          goto LABEL_44;
        }
      }
      else
      {
        v78 = a8;
        v26 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 24);
        if (!v26 || v26(a1, 0, v19 + 336, 0))
          *(_QWORD *)(v19 + 336) = 0;
        fbf_GetResponseProperties(a1, (_QWORD *)v19);
        v27 = *(_QWORD *)(v19 + 32);
        if (v27)
        {
          v28 = *(_QWORD *)(v19 + 336);
          v29 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
          if (v29)
            v29(v27, CFSTR("byteFlumeStats"), CFSTR("FByt"), v28 / 0xF4240, 0);
        }
        fbf_ReportingAgentSetCDNHeaders(v19, a1);
        a8 = v78;
        if (!v78)
        {
          Error = fbf_ParseResponseHeadersAndSetLastError(a1, v19, 0);
          if (Error)
          {
            v57 = Error;
            goto LABEL_110;
          }
          v31 = fbf_httpRequestHandlesNetworkTransitions(a1);
          *(_BYTE *)(v18 + 124) = v31;
          fbf_UpdateAndReportMultiPathActivity((_QWORD *)v19, v31);
          if (!*(_QWORD *)(v18 + 8))
            *(_QWORD *)(v18 + 8) = *(_QWORD *)(v19 + 216) - *(_QWORD *)v18;
          *(_DWORD *)(v19 + 72) = 1;
          v22 = a7;
          goto LABEL_43;
        }
      }
      fbf_ReleaseAndSetLastErrorFromHTTPRequest(v19, a1, a8, &v85);
      v57 = a8;
      goto LABEL_110;
    }
  }
LABEL_101:
  if (v16)
    CFRelease(v16);
  if (blockBufferOut)
    CFRelease(blockBufferOut);
LABEL_105:
  FigRetainProxyUnlockMutex();
  return FigRetainProxyRelease();
}

BOOL FigByteRateHistoryHasCompleteSample(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) >= *(_DWORD *)(a1 + 8);
}

double FigByteRateHistoryNextSample(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  int v4;
  int v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  double result;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v2 = a1[3];
  v1 = a1[4];
  v3 = (double)v1 * 1000000000.0 / (double)v2;
  v4 = *((_DWORD *)a1 + 4) + 1;
  v5 = *((_DWORD *)a1 + 2);
  if (v4 >= v5)
  {
    v6 = *((double *)a1 + 5);
    if (v6 == 0.0)
      v7 = (double)v1 * 1000000000.0 / (double)v2;
    else
      v7 = v3 * 0.1 + v6 * 0.9;
    *((double *)a1 + 5) = v7;
  }
  v8 = *((int *)a1 + 3);
  v9 = *a1;
  v10 = (double)*(int *)(*a1 + 16 * v8 + 8) * 1000000000.0 / (double)*(uint64_t *)(*a1 + 16 * v8) - v3;
  v11 = v10 * v10;
  v12 = *((double *)a1 + 6);
  if (1.79769313e308 - v11 >= v12)
  {
    v13 = a1[7] + 1;
  }
  else
  {
    v12 = 0.0;
    v13 = 1;
  }
  result = v11 + v12;
  *((double *)a1 + 6) = result;
  a1[7] = v13;
  v15 = ((int)v8 + 1) % v5;
  *((_DWORD *)a1 + 3) = v15;
  *((_DWORD *)a1 + 4) = v4;
  v16 = v9 + 16 * v15;
  v17 = v1 - *(int *)(v16 + 8);
  a1[3] = v2 - *(_QWORD *)v16;
  a1[4] = v17;
  *(_QWORD *)v16 = 0;
  *(_QWORD *)(v16 + 8) = 0;
  return result;
}

void crabsIncrementalReadCallback(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, OpaqueCMBlockBuffer *a5, char a6, int a7)
{
  CFTypeRef v10;
  const void *Owner;
  uint64_t DerivedStorage;
  __n128 v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  int updated;
  CFRunLoopRef Current;
  int v25;
  int *v26;
  BOOL v27;
  int v28;
  size_t DataLength;
  int v30;
  int v31;
  uint64_t UpTimeNanoseconds;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  void (*v37)(uint64_t, __CFString *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  void (*v44)(uint64_t, __CFString *, __CFString *, uint64_t);
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  size_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  __int16 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  size_t v60;
  uint64_t v62;
  OSStatus v63;
  __int16 v64;
  int64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int16 v72;
  int v73;
  char v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int **v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _BOOL4 v86;
  int *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(uint64_t, __CFString *, __CFString *, uint64_t);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v94;
  uint64_t FigBaseObject;
  void (*v96)(uint64_t, const __CFString *, _QWORD, uint64_t);
  uint64_t v97;
  int v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v104;
  CFTypeRef cf;
  int v107;
  uint64_t *v108;
  int *v109[23];

  v109[21] = *(int **)MEMORY[0x1E0C80C00];
  if (a1)
    v10 = CFRetain(a1);
  else
    v10 = 0;
  v109[0] = 0;
  FigMemoryBarrier();
  if (a7 == -12932 || !v10)
  {
LABEL_223:
    if (!v10)
      return;
    goto LABEL_224;
  }
  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    Owner = (const void *)FigRetainProxyGetOwner();
    if (Owner)
      Owner = CFRetain(Owner);
    cf = Owner;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!*(_BYTE *)(DerivedStorage + 104))
      goto LABEL_221;
    v14 = DerivedStorage;
    v15 = (uint64_t *)(DerivedStorage + 512);
    v16 = *(int *)(DerivedStorage + 520);
    if (v16 == a2)
    {
      v17 = (uint64_t *)(DerivedStorage + 528);
      v18 = (uint64_t *)(DerivedStorage + 544);
      v19 = (uint64_t *)(DerivedStorage + 568);
      v20 = (uint64_t *)(DerivedStorage + 512);
    }
    else
    {
      if (*(_DWORD *)(DerivedStorage + 624) != a2)
      {
        v41 = *(_QWORD *)(DerivedStorage + 32);
        v42 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (v42)
          v42(v41, a3);
        v43 = *(_QWORD *)(v14 + 920);
        if (v43)
        {
          v44 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 32);
          if (v44)
            v44(v43, CFSTR("crabsStats"), CFSTR("AbortReqCount"), 1);
        }
        goto LABEL_221;
      }
      v20 = (uint64_t *)(DerivedStorage + 616);
      v17 = (uint64_t *)(DerivedStorage + 632);
      v18 = (uint64_t *)(DerivedStorage + 648);
      v19 = (uint64_t *)(DerivedStorage + 672);
    }
    v21 = *v17;
    v22 = *v18;
    v102 = *v19;
    v108 = v20;
    if (*(_QWORD *)(DerivedStorage + 56) == -1 || !*(_QWORD *)(DerivedStorage + 80))
    {
      updated = a7;
      if (a7)
        goto LABEL_49;
      updated = crabsUpdateLength(DerivedStorage, *(_QWORD *)(DerivedStorage + 32));
      if (updated)
        goto LABEL_49;
      if (!v20[3])
        v20[3] = *(_QWORD *)(v14 + 56) - v20[2];
      updated = crabsInitialize(v14);
      if (updated)
      {
LABEL_49:
        v45 = crabsCancelRead((_QWORD *)v14, v20, updated);
        goto LABEL_219;
      }
    }
    v104 = v15;
    if ((*(_BYTE *)(v14 + 504) & 1) != 0 && !*(_QWORD *)(v14 + 720))
    {
      FigRetainProxyUnlockMutex();
      Current = CFRunLoopGetCurrent();
      FigAIOClientCreate((uint64_t)Current, (uint64_t)crabsAIOCallback, *(const void **)(v14 + 760), (_QWORD *)(v14 + 720));
      FigRetainProxyLockMutex();
      if (FigRetainProxyIsInvalidated() || !*(_BYTE *)(v14 + 104))
        goto LABEL_221;
    }
    v25 = 0;
    v26 = 0;
    if (a7)
      v27 = a7 == -12930;
    else
      v27 = 1;
    v28 = v27;
    if (a5)
    {
      v97 = v22;
      v100 = v21;
      DataLength = 0;
      v99 = 0;
      v30 = 0;
      v31 = 0;
      if (v28)
      {
        DataLength = CMBlockBufferGetDataLength(a5);
        if (DataLength)
        {
          UpTimeNanoseconds = FigGetUpTimeNanoseconds();
          v33 = UpTimeNanoseconds - v108[8];
          if (v33 >= 1)
          {
            v34 = *(_QWORD *)(v14 + 920);
            v35 = v16 == a2
                ? &kFigReportingEventKey_SampleFirehoseObservedBitrate
                : (uint64_t *)kFigReportingEventKey_SampleImmediateObservedBitrate;
            if (v34)
            {
              v36 = v108[4];
              v37 = *(void (**)(uint64_t, __CFString *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 40);
              if (v37)
                v37(v34, CFSTR("crabsStats"), *v35, (uint64_t)((double)v36 * 8.0 / ((double)v33 / 1000000000.0)));
            }
          }
          v38 = v108[4];
          v39 = v108[8];
          if (v38)
          {
            v40 = (UpTimeNanoseconds - (v39 + v108[9])) / (v38 + DataLength - v108[10]);
          }
          else
          {
            v46 = UpTimeNanoseconds - v39;
            v108[9] = v46;
            v108[10] = DataLength;
            v40 = v46 / (uint64_t)DataLength;
          }
          if (v40 <= 1)
            v40 = 1;
          v108[11] = v40;
          if (v38 + DataLength <= v108[3])
          {
            v98 = 0;
            goto LABEL_59;
          }
          FigLogBacktrace();
          v47 = v108[3];
          v48 = v108[4];
          DataLength = v47 - v48;
          if (v47 != v48)
          {
            v98 = 1;
LABEL_59:
            v49 = 0;
            v107 = 0;
            v99 = 0;
            v25 = 0;
            v26 = 0;
            v101 = v97 + v100;
            while (1)
            {
              v50 = v101 + v49;
              v51 = *(_QWORD *)(v14 + 96);
              if (v51 == 0x4000)
              {
                v52 = v50 >> 14;
              }
              else if (v51 == 0x10000)
              {
                v52 = v50 >> 16;
              }
              else
              {
                v52 = v50 / v51;
              }
              v53 = *(_QWORD *)(v14 + 88);
              if (v52 >= v53)
              {
                FigLogBacktrace();
                v53 = *(_QWORD *)(v14 + 88);
                v98 = 1;
              }
              if (v52 >= v53)
              {
                v109[0] = v26;
                FigSignalErrorAt();
                v30 = 0;
                goto LABEL_139;
              }
              v26 = *(int **)(*(_QWORD *)(v14 + 80) + 8 * v52);
              if (!v26
                && (crabsInitBlock(v14, v52) || (v26 = *(int **)(*(_QWORD *)(v14 + 80) + 8 * v52)) == 0))
              {
                FigSignalErrorAt();
                goto LABEL_220;
              }
              if (*((_QWORD *)v26 + 10))
              {
                if ((*(_BYTE *)(v14 + 504) & 1) != 0 && v26 == *(int **)(v14 + 744))
                  crabsCompleteLazyPagein(v14, 1);
              }
              else
              {
                if (v102 <= 0)
                {
                  v55 = *((_WORD *)v26 + 4);
                  v54 = (v55 & 1) != 0 && (v55 & 0x800) == 0;
                }
                else
                {
                  v54 = 1;
                }
                crabsReadyBlockForLoad(v14, v26, v54);
                if (!*((_QWORD *)v26 + 10))
                {
                  v109[0] = v26;
                  if ((v26[2] & 0x800) != 0)
                    crabsUnhint(v14, (uint64_t)v26);
                  v30 = 1;
                  *(_BYTE *)(v14 + 134) = 1;
                  v25 = -12876;
                  goto LABEL_136;
                }
              }
              v56 = *(_QWORD *)(v14 + 96);
              v57 = v26[1];
              v58 = v50 - v56 * *v26;
              if (v57 > v58)
              {
                v49 += v57 - v58;
                if (v49 >= DataLength)
                  goto LABEL_128;
                v58 = v26[1];
              }
              v59 = v56 - v58;
              if ((uint64_t)(DataLength - v49) >= v59)
                v60 = v59;
              else
                v60 = DataLength - v49;
              if (v58 <= v57 && (v26[2] & 4) == 0)
              {
                if (v25 || (v62 = *((_QWORD *)v26 + 10)) == 0)
                {
                  v109[0] = v26;
                  v30 = 1;
                  *(_BYTE *)(v14 + 134) = 1;
                  v25 = -12876;
                  crabsReportingReportError(v14, (uint64_t)CFSTR("CoreMediaErrorDomain"), (uint64_t)CFSTR("No space for load"), -12876);
LABEL_136:
                  v74 = v107;
                  goto LABEL_137;
                }
                if ((v49 & 0x8000000000000000) != 0 || (v60 & 0x8000000000000000) != 0)
                {
                  FigSignalErrorAt();
                  goto LABEL_221;
                }
                v63 = CMBlockBufferCopyDataBytes(a5, v49, v60, (void *)(*(_QWORD *)(v62 + 16) + v58));
                if (v63)
                {
                  v25 = v63;
                }
                else
                {
                  v64 = *((_WORD *)v26 + 4);
                  *((_WORD *)v26 + 4) = v64 | 8;
                  ++*(_QWORD *)(v14 + 400);
                  if ((*(_BYTE *)(v14 + 504) & 1) == 0 && (v64 & 0x100) != 0)
                    *((_WORD *)v26 + 4) = v64 | 0x48;
                  v65 = v26[1];
                  v66 = v60 + v58;
                  if ((uint64_t)(v60 + v58) > v65)
                  {
                    MEMORY[0x19402EA0C](*(_QWORD *)(v14 + 72));
                    v67 = *(_QWORD *)(v14 + 64) - v26[1];
                    v26[1] = v66;
                    v68 = v67 + v66;
                    *(_QWORD *)(v14 + 64) = v68;
                    FigReportingAgentStatsSetIntValue(*(_QWORD *)(v14 + 920), 0x1E301B6B8, 0x1E301C758, v68);
                    MEMORY[0x19402EA24](*(_QWORD *)(v14 + 72));
                    v65 = v26[1];
                  }
                  if (a7 == -12930
                    || (v69 = *(_QWORD *)(v14 + 96), v69 == v65)
                    || (v70 = *v26, v71 = *(_QWORD *)(v14 + 88) - 1, (a6 & 1) != 0) && v71 == v70
                    || v71 == v70 && v65 + v69 * v70 >= *(_QWORD *)(v14 + 56))
                  {
                    v72 = *((_WORD *)v26 + 4);
                    *((_WORD *)v26 + 4) = v72 | 4;
                    if ((v72 & 1) != 0)
                    {
                      crabsUnhint(v14, (uint64_t)v26);
                      v99 = *(_QWORD *)(v14 + 248) == 0;
                    }
                    else if (!v102 && (*((_QWORD *)v26 + 4) || *((_QWORD *)v26 + 5)))
                    {
                      removeFromWorkingSet((_QWORD *)v14, (uint64_t)v26);
                      addToWorkingSet((_QWORD *)v14, (uint64_t)v26, 1, 0);
                    }
                  }
                  if ((v26[2] & 0x20) != 0)
                  {
                    crabsRetainWorking((_QWORD *)v14, (uint64_t)v26);
                    crabsReleaseWorking((_QWORD *)v14, v26, 1, 1);
                  }
                  v25 = 0;
                  *(_WORD *)(v14 + 176) |= 1u;
                }
              }
              v49 += v60;
              if (v49 >= DataLength)
              {
LABEL_128:
                v74 = v107;
                goto LABEL_131;
              }
              if (v108 == v104
                && *(_DWORD *)(v14 + 664) == 1
                && crabsRangeInBlockIsCached(v14, *(_QWORD *)(v14 + 632), *(_QWORD *)(v14 + 640)))
              {
                MEMORY[0x19402D920](*(_QWORD *)(v14 + 656));
              }
              FigRetainProxyUnlockMutex();
              FigRetainProxyLockMutex();
              if (FigRetainProxyIsInvalidated() || !*(_BYTE *)(v14 + 104))
                goto LABEL_221;
              v73 = v107;
              if (*((_DWORD *)v108 + 2) != a2)
                v73 = 1;
              v107 = v73;
            }
          }
          v98 = 1;
          v99 = 0;
          v26 = 0;
          v25 = 0;
          v74 = 0;
LABEL_131:
          v30 = 0;
          v109[0] = v26;
LABEL_137:
          if (v74)
            goto LABEL_221;
          v108[4] += DataLength;
LABEL_139:
          v31 = v98;
        }
        else
        {
          v26 = 0;
          v25 = 0;
          v99 = 0;
          v30 = 0;
          v31 = 0;
        }
      }
    }
    else
    {
      DataLength = 0;
      v99 = 0;
      v30 = 0;
      v31 = 0;
    }
    if (v31)
      v75 = -12870;
    else
      v75 = v25;
    if (v75)
      a7 = v75;
    if (v31 | a7)
    {
      if (crabsCancelRead((_QWORD *)v14, v108, a7) == -12785)
        goto LABEL_221;
    }
    else if ((a6 & 1) != 0 || v108[4] == v108[3])
    {
      *((_DWORD *)v108 + 12) = 0;
    }
    if ((!*(_DWORD *)(v14 + 116) || *(_BYTE *)(v14 + 135)) && v108 == v104 && *(_DWORD *)(v14 + 560) == 1)
    {
      v76 = *(_QWORD *)(v14 + 544) + *(_QWORD *)(v14 + 528);
      v77 = v76 - DataLength;
      v78 = *(_QWORD *)(v14 + 96);
      if (v78 == 0x4000)
      {
        v79 = v77 >> 14;
        v80 = v76 >> 14;
      }
      else if (v78 == 0x10000)
      {
        v79 = v77 >> 16;
        v80 = v76 >> 16;
      }
      else
      {
        v79 = v77 / v78;
        v80 = v76 / v78;
      }
      if (v79 > v80)
      {
LABEL_165:
        v109[0] = v26;
        if (!*(_QWORD *)(v14 + 568) && crabsCancelRead((_QWORD *)v14, v104, -12932) == -12785)
          goto LABEL_221;
      }
      else
      {
        v81 = v80 - v79 + 1;
        v82 = (int **)(*(_QWORD *)(v14 + 80) + 8 * v79);
        while (1)
        {
          v26 = *v82;
          if (*v82)
          {
            if ((v26[2] & 1) != 0)
              break;
          }
          ++v82;
          if (!--v81)
            goto LABEL_165;
        }
        v109[0] = *v82;
      }
    }
    if ((*(_BYTE *)(v14 + 504) & 3) == 0)
      v13.n128_f32[0] = crabsPurgeCompletionSweep((_QWORD *)v14);
    if (*(_DWORD *)(v14 + 560) != 1)
    {
LABEL_213:
      if (*(_BYTE *)(v14 + 104))
        crabsRebalanceWorkingSet((_QWORD *)v14);
      if (a7 == -12935)
      {
        if (!v108[7])
        {
          crabsReportingReportError(v14, (uint64_t)CFSTR("CoreMediaErrorDomain"), (uint64_t)CFSTR("Network error with no clients"), -12935);
LABEL_220:
          MEMORY[0x19402D920](v108[5]);
LABEL_221:
          crabsRetainProxyUnlockWithActions();
          if (cf)
            CFRelease(cf);
          goto LABEL_223;
        }
      }
      else if (!a7 || a7 == -12930)
      {
        v45 = crabsStartIdleRead(v14, v13);
LABEL_219:
        if (v45 == -12785)
          goto LABEL_221;
        goto LABEL_220;
      }
      if (v30)
      {
        if (*(_BYTE *)(v14 + 112))
        {
          *(_BYTE *)(v14 + 112) = 0;
          *(_WORD *)(v14 + 176) |= 8u;
          if (dword_1EE2A29E8)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
      }
      else
      {
        v94 = *(const void **)(v14 + 952);
        if (v94)
        {
          CFRelease(v94);
          *(_QWORD *)(v14 + 952) = 0;
        }
        FigBaseObject = FigByteFlumeGetFigBaseObject(*(_QWORD *)(v14 + 32));
        v96 = *(void (**)(uint64_t, const __CFString *, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
        if (v96)
          v96(FigBaseObject, CFSTR("FBF_LastError"), *MEMORY[0x1E0C9AE00], v14 + 952);
        *(_DWORD *)(v14 + 944) = a7;
        *(_WORD *)(v14 + 176) |= 0x20u;
      }
      goto LABEL_220;
    }
    v83 = *(_QWORD *)(v14 + 544) + *(_QWORD *)(v14 + 528);
    v84 = *(_QWORD *)(v14 + 96);
    if (v84 == 0x4000)
    {
      v85 = v83 >> 14;
    }
    else if (v84 == 0x10000)
    {
      v85 = v83 >> 16;
    }
    else
    {
      v85 = v83 / v84;
    }
    if (*(_QWORD *)(v14 + 416) != *(_QWORD *)(v14 + 408) || v99)
    {
      v86 = 0;
      if (!crabsSelectNextFill(v14, v109) && v109[0])
        v86 = v85 > *v109[0];
      *(_QWORD *)(v14 + 416) = *(_QWORD *)(v14 + 408);
    }
    else
    {
      v86 = 0;
    }
    v87 = *(int **)(*(_QWORD *)(v14 + 80) + 8 * v85);
    if (v87)
    {
      if (v86)
        goto LABEL_186;
    }
    else if (crabsInitBlock(v14, v85))
    {
      v87 = 0;
      if (v86)
        goto LABEL_186;
    }
    else
    {
      v87 = *(int **)(*(_QWORD *)(v14 + 80) + 8 * v85);
      if (v86)
        goto LABEL_186;
    }
    if ((*(_BYTE *)(v14 + 504) & 3) != 0 || (v87[2] & 0x10) != 0)
      goto LABEL_201;
    v88 = *(_QWORD *)(v14 + 224);
    v89 = *v87;
    if (*(_BYTE *)(v14 + 133))
    {
      if (v88 <= v89 && *(_QWORD *)(v14 + 472) + v88 > v89)
        goto LABEL_201;
    }
    else if (v88 <= v89)
    {
      goto LABEL_201;
    }
    if (crabsEnsureSafetyMargin((_QWORD *)v14, v85))
      goto LABEL_201;
    *(_BYTE *)(v14 + 134) = 1;
LABEL_186:
    if (!*(_QWORD *)(v14 + 568) && (v87[2] & 1) == 0)
    {
LABEL_212:
      if (crabsCancelRead((_QWORD *)v14, v104, -12932) == -12785)
        goto LABEL_221;
      goto LABEL_213;
    }
LABEL_201:
    v90 = *(_QWORD *)(v14 + 568);
    if (*(_BYTE *)(v14 + 132))
    {
      if (v90)
        goto LABEL_213;
    }
    else
    {
      if (v90)
        goto LABEL_213;
      if (v85 < *(_QWORD *)(v14 + 224) && (v87[2] & 1) == 0)
        goto LABEL_212;
    }
    if (*(_DWORD *)(v14 + 560) != 1 || !*(_BYTE *)(v14 + 608))
      goto LABEL_213;
    *(_BYTE *)(v14 + 608) = 0;
    v91 = *(_QWORD *)(v14 + 920);
    if (v91)
    {
      v92 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 32);
      if (v92)
        v92(v91, CFSTR("crabsStats"), CFSTR("AFDIC"), 1);
    }
    goto LABEL_212;
  }
  crabsRetainProxyUnlockWithActions();
LABEL_224:
  CFRelease(v10);
}

float crabsPurgeCompletionSweep(_QWORD *a1)
{
  float result;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;

  crabsEnsureCanary((uint64_t)a1);
  v3 = **(_QWORD **)(a1[36] + 8);
  v4 = (unsigned int *)MEMORY[0x1E0C83DA0];
  v5 = 0;
  if (v3)
  {
    do
    {
      v6 = **(_QWORD **)(*(_QWORD *)(v3 + 56) + 8);
      if ((*(_WORD *)(v3 + 8) & 0x80) != 0)
      {
        v7 = *(_QWORD *)(v3 + 88);
        v13 = 0;
        if (MEMORY[0x194031988](*v4, v7, 1, &v13))
          v8 = 0;
        else
          v8 = (v13 & 3) == 2;
        if (!v8)
          goto LABEL_19;
        crabsRemovePurgedBacking((uint64_t)a1, (int *)v3, 0);
        crabsCleanupOrphan(a1, (int *)v3);
        ++v5;
      }
      v3 = v6;
    }
    while (v6);
  }
  v9 = **(_QWORD **)(a1[34] + 8);
  if (v9)
  {
    do
    {
      v10 = **(_QWORD **)(*(_QWORD *)(v9 + 56) + 8);
      if ((*(_WORD *)(v9 + 8) & 0x80) != 0)
      {
        v11 = *(_QWORD *)(v9 + 88);
        v14 = 0;
        if (MEMORY[0x194031988](*v4, v11, 1, &v14))
          v12 = 0;
        else
          v12 = (v14 & 3) == 2;
        if (!v12)
          break;
        crabsRemovePurgedBacking((uint64_t)a1, (int *)v9, 1);
        crabsCleanupOrphan(a1, (int *)v9);
        ++v5;
      }
      v9 = v10;
    }
    while (v10);
  }
LABEL_19:
  if (v5 >= 1)
  {
    result = (float)((float)(uint64_t)a1[60] * 0.5) + (double)v5 * 0.5 + 0.5;
    a1[60] = (uint64_t)result;
  }
  return result;
}

BOOL crabsEnsureCanary(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  BOOL v5;
  void *v6;
  int v8;
  int v9;

  v2 = *(_QWORD *)(a1 + 456);
  v3 = (unsigned int *)MEMORY[0x1E0C83DA0];
  if (!v2)
    goto LABEL_8;
  v8 = 0;
  v4 = 1;
  if (MEMORY[0x194031988](*MEMORY[0x1E0C83DA0], v2, 1, &v8))
    v5 = 0;
  else
    v5 = (v8 & 3) == 2;
  if (v5)
  {
    CFAllocatorDeallocate(*(CFAllocatorRef *)a1, *(void **)(a1 + 456));
    *(_QWORD *)(a1 + 456) = 0;
LABEL_8:
    v6 = CFAllocatorAllocate(*(CFAllocatorRef *)a1, *(_QWORD *)(a1 + 96), 0);
    *(_QWORD *)(a1 + 456) = v6;
    if (v6)
    {
      v9 = 33;
      MEMORY[0x194031988](*v3, v6, 0, &v9);
      return *(_QWORD *)(a1 + 456) != 0;
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

BOOL crabsMakeVolatile(uint64_t a1, int a2, int a3)
{
  BOOL v3;
  int v4;
  int v5;
  BOOL v6;
  int v8;

  v8 = 1;
  switch(a2)
  {
    case 0:
      v3 = a3 == 1;
      v4 = 1089;
      v5 = 1281;
      goto LABEL_4;
    case 1:
      v3 = a3 == 1;
      v4 = 577;
      v5 = 769;
LABEL_4:
      if (v3)
        v4 = v5;
      goto LABEL_10;
    case 2:
      v4 = 257;
      goto LABEL_10;
    case 3:
      v4 = 1537;
      goto LABEL_10;
    case 4:
      v4 = 33;
LABEL_10:
      v8 = v4;
      break;
    default:
      break;
  }
  if (MEMORY[0x194031988](*MEMORY[0x1E0C83DA0], a1, 0, &v8))
    v6 = 1;
  else
    v6 = (v8 & 3) == 2;
  return !v6;
}

uint64_t crabsStartIdleRead(uint64_t a1)
{
  uint64_t result;
  _BOOL4 v3;
  int *v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  char v6;
  int *v7[21];

  v7[20] = *(int **)MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 104) || *(_DWORD *)(a1 + 108) || *(_BYTE *)(a1 + 135))
    return 0;
  if (*(_QWORD *)(a1 + 56) == -1 || !*(_QWORD *)(a1 + 80))
  {
    if (*(_DWORD *)(a1 + 560) == 1
      || (*(_BYTE *)(a1 + 504) & 8) != 0 && (!*(_DWORD *)(a1 + 116) || *(_QWORD *)(a1 + 360) == *(_QWORD *)(a1 + 88)))
    {
      return 0;
    }
    if (crabsMoveFirehose(a1, 0) == -12785)
      return 4294954511;
    else
      return 0;
  }
  else
  {
    v6 = 0;
    result = crabsTaskHints(a1, &v6);
    if ((_DWORD)result == -12785)
      return 4294954511;
    if ((*(_BYTE *)(a1 + 504) & 8) != 0)
    {
      if (!*(_DWORD *)(a1 + 116))
        return result;
      v3 = *(_QWORD *)(a1 + 360) != *(_QWORD *)(a1 + 88);
    }
    else
    {
      v3 = 1;
    }
    if (!(_DWORD)result && v3)
    {
      result = 0;
      if (*(_DWORD *)(a1 + 116))
      {
        if (!v6)
        {
          if (*(_DWORD *)(a1 + 560) != 1)
          {
            v7[0] = 0;
            if (crabsSelectNextFill(a1, v7)
              || (v4 = v7[0]) == 0
              || !crabsShouldStartFirehose(a1, *v7[0]))
            {
              if (*(_BYTE *)(a1 + 112))
              {
                *(_BYTE *)(a1 + 112) = 0;
                *(_WORD *)(a1 + 176) |= 8u;
                if (dword_1EE2A29E8)
                {
                  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
              }
              return 0;
            }
            if (crabsMoveFirehose(a1, *(_QWORD *)(a1 + 96) * *v4) == -12785)
              return 4294954511;
          }
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t crabsTaskHints(uint64_t a1, char *a2)
{
  int IsBusy;
  const void *v5;
  CFTypeRef v6;
  char v7;
  _BOOL4 v8;
  int *v9;
  char v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  char v22;

  IsBusy = crabsDiskBackingIsBusy(a1, 0);
  v5 = *(const void **)(a1 + 760);
  if (v5)
    v6 = CFRetain(v5);
  else
    v6 = 0;
  if ((*(_BYTE *)(a1 + 504) & 1) != 0)
  {
    crabsCompleteLazyPagein(a1, 0);
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v8 = !*(_QWORD *)(a1 + 568) && !*(_QWORD *)(a1 + 672);
  v9 = *(int **)(a1 + 248);
  if (v9)
  {
    v10 = 0;
    v11 = 0;
    while (1)
    {
      if (!v8 && !v7)
        goto LABEL_58;
      if ((v9[2] & 4) != 0 && !IsBusy)
      {
        if ((*(_BYTE *)(a1 + 504) & 1) != 0 && !*((_QWORD *)v9 + 10))
        {
          if (v7
            && !*(_QWORD *)(a1 + 744)
            && *(_QWORD *)(a1 + 720)
            && (crabAllocWorkingSet(a1, (uint64_t)v9)
             || !crabsSwipeUnusedWorking(a1, (uint64_t)v9)))
          {
            v11 = FigAIOIssueRead(*(_QWORD *)(a1 + 720), *(_QWORD *)(a1 + 16), *((_QWORD *)v9 + 12), v9[1], *(_QWORD *)(*((_QWORD *)v9 + 10) + 16));
            if ((_DWORD)v11)
            {
              crabsReleaseWorkingBlock((CFAllocatorRef *)a1, (uint64_t)v9);
              v20 = (_DWORD)v11 == 35;
              if ((_DWORD)v11 == 35)
                v11 = 0;
              else
                v11 = v11;
              if (v20)
                v7 = 0;
            }
            else
            {
              *(_QWORD *)(a1 + 744) = v9;
              crabsRetainWorking((_QWORD *)a1, (uint64_t)v9);
            }
          }
          else
          {
            v7 = 0;
          }
        }
        goto LABEL_25;
      }
      v22 = 0;
      if (v8 && !crabsEvaluateFirehose(a1, v9, 1, &v22))
      {
        v13 = *(_QWORD *)(a1 + 96);
        v14 = v13 * *v9;
        v17 = *(_DWORD *)(a1 + 664) == 1
           && (v15 = *(_QWORD *)(a1 + 632), v15 <= v14 + v9[1])
           && (v16 = v14 + v13, *(_QWORD *)(a1 + 640) + v15 >= v16)
           && *(_QWORD *)(a1 + 648) + v15 < v16;
        if (v22 && !v17 && !crabsMoveFirehose(a1, v14, "crabsTaskHints", 5499))
          v10 = 1;
        if (v10)
          v18 = 1;
        else
          v18 = v17;
        if ((v18 & 1) != 0)
          goto LABEL_43;
        if (*(_DWORD *)(a1 + 664) != 1)
        {
          v19 = crabsIssueImmedLoad(a1, *(_QWORD *)(a1 + 96) * *v9, *(_QWORD *)(a1 + 96));
          if ((_DWORD)v19 == -12785)
          {
            v10 = 0;
            v11 = 4294954511;
            if (a2)
              goto LABEL_59;
            goto LABEL_60;
          }
          v11 = v19;
          v10 = 1;
LABEL_43:
          v12 = 1;
          goto LABEL_24;
        }
        v10 = 0;
      }
      v12 = 0;
LABEL_24:
      v8 = v12;
LABEL_25:
      v9 = (int *)*((_QWORD *)v9 + 6);
      if (!v9)
        goto LABEL_58;
    }
  }
  v11 = 0;
  v10 = 0;
LABEL_58:
  if (a2)
LABEL_59:
    *a2 = v10;
LABEL_60:
  if (v6)
    CFRelease(v6);
  return v11;
}

uint64_t crabsReleaseWorking(_QWORD *a1, _QWORD *a2, int a3, int a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  result = FigAtomicDecrement32();
  if (!(_DWORD)result)
  {
    if (!a4)
    {
      result = FigRetainProxyTryLockMutex();
      if (!(_DWORD)result)
      {
        MEMORY[0x19402EA0C](a1[48]);
        if (!a2[8] && !a2[9])
        {
          v10 = a1[46];
          a2[8] = v10;
          if (v10)
            v11 = (_QWORD *)(v10 + 72);
          else
            v11 = a1 + 47;
          *v11 = a2 + 8;
          a1[46] = a2;
          a2[9] = a1 + 46;
        }
        JUMPOUT(0x19402EA24);
      }
    }
    if (*(_DWORD *)(a2[10] + 24))
    {
      if (a4)
        return result;
      return crabsUnlockWithActions((uint64_t)a1);
    }
    result = addToWorkingSet(a1, (uint64_t)a2, a3, 1);
    v9 = a1[12];
    gCRABS_Stats_1 += v9;
    a1[106] += v9;
    if (!a4)
      return crabsUnlockWithActions((uint64_t)a1);
  }
  return result;
}

uint64_t crabsCancelRead(_QWORD *a1, uint64_t *a2, int a3)
{
  const void *v6;
  CFTypeRef v7;
  uint64_t v8;
  int v9;
  uint64_t UpTimeNanoseconds;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  void (*v17)(uint64_t, __CFString *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void (*v21)(uint64_t, __CFString *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t *v23;
  void (*v24)(uint64_t, __CFString *, uint64_t, uint64_t);
  const void *Owner;
  CFTypeRef v26;
  uint64_t v27;
  const void *v28;
  CFTypeRef v29;
  uint64_t (*v30)(CFTypeRef, uint64_t);
  uint64_t v31;
  void (*v32)(uint64_t, __CFString *, __CFString *, uint64_t);
  uint64_t *v33;
  uint64_t v34;
  void (*v35)(uint64_t, __CFString *, __CFString *, uint64_t);
  __CFString *v36;
  uint64_t v38;
  uint64_t v39;
  int v40;

  v6 = (const void *)a1[95];
  if (v6)
    v7 = CFRetain(v6);
  else
    v7 = 0;
  if (*((_DWORD *)a2 + 12) != 1)
  {
    v27 = 0;
    goto LABEL_56;
  }
  v8 = *a2;
  v9 = *((_DWORD *)a2 + 2);
  *a2 = 0;
  *((_DWORD *)a2 + 12) = a3;
  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  v11 = UpTimeNanoseconds - a2[8];
  if (v11 >= 1)
  {
    v12 = UpTimeNanoseconds;
    v39 = v8;
    v40 = v9;
    v13 = a2[4];
    v14 = a1[115];
    v15 = a1 + 64;
    if (a1 + 64 == a2)
      v16 = &kFigReportingEventKey_FirehoseRequestBytes;
    else
      v16 = &kFigReportingEventKey_ImmediateRequestBytes;
    if (v14)
    {
      v17 = *(void (**)(uint64_t, __CFString *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 32);
      if (v17)
        v17(v14, CFSTR("crabsStats"), *v16, v13);
    }
    v38 = v13;
    v18 = a1[115];
    if (v15 == a2)
      v19 = &kFigReportingEventKey_FirehoseRequestTimeMilliseconds;
    else
      v19 = &kFigReportingEventKey_ImmediateRequestTimeMilliseconds;
    if (v18)
    {
      v20 = a2[8];
      v21 = *(void (**)(uint64_t, __CFString *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 32);
      if (v21)
        v21(v18, CFSTR("crabsStats"), *v19, (uint64_t)((double)(v12 - v20) / 1000000.0));
    }
    v22 = a1[115];
    if (v15 == a2)
      v23 = &kFigReportingEventKey_SampleFirehoseObservedBitrate;
    else
      v23 = (uint64_t *)kFigReportingEventKey_SampleImmediateObservedBitrate;
    v9 = v40;
    v8 = v39;
    if (v22)
    {
      v24 = *(void (**)(uint64_t, __CFString *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 40);
      if (v24)
        v24(v22, CFSTR("crabsStats"), *v23, (uint64_t)((double)v38 * 8.0 / ((double)v11 / 1000000000.0)));
    }
  }
  Owner = (const void *)FigRetainProxyGetOwner();
  if (Owner)
    v26 = CFRetain(Owner);
  else
    v26 = 0;
  v28 = (const void *)a1[4];
  if (v28)
    v29 = CFRetain(v28);
  else
    v29 = 0;
  FigRetainProxyUnlockMutex();
  v30 = *(uint64_t (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v30)
    v27 = v30(v29, v8);
  else
    v27 = 4294954514;
  FigRetainProxyLockMutex();
  if (v29)
    CFRelease(v29);
  if (!FigRetainProxyIsInvalidated())
  {
    if (*((_DWORD *)a2 + 2) != v9)
      goto LABEL_54;
    if ((_DWORD)v27)
    {
      if ((_DWORD)v27 != -12934)
        goto LABEL_54;
      if (*a2)
      {
        v27 = 4294954362;
        if (!v26)
          goto LABEL_56;
LABEL_55:
        CFRelease(v26);
        goto LABEL_56;
      }
    }
    v31 = a1[115];
    if (v31)
    {
      v32 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 32);
      if (v32)
        v32(v31, CFSTR("crabsStats"), CFSTR("AbortReqCount"), 1);
    }
    v33 = a1 + 64;
    v34 = a1[115];
    if (v33 == a2)
    {
      if (v34)
      {
        v35 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 32);
        if (v35)
        {
          v36 = CFSTR("AFMReq");
          goto LABEL_53;
        }
      }
    }
    else if (v34)
    {
      v35 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 32);
      if (v35)
      {
        v36 = CFSTR("AIMReq");
LABEL_53:
        v35(v34, CFSTR("crabsStats"), v36, 1);
      }
    }
LABEL_54:
    if (!v26)
      goto LABEL_56;
    goto LABEL_55;
  }
  v27 = 4294954511;
  if (v26)
    goto LABEL_55;
LABEL_56:
  if (v7)
    CFRelease(v7);
  return v27;
}

uint64_t FigCFHTTPCancel(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;

  FigByteFlumeGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigRetainProxyRetain();
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated())
  {
    v5 = FigSignalErrorAt();
  }
  else
  {
    FigRetainProxyRetainOwner();
    v4 = *(_QWORD *)(DerivedStorage + 56);
    if (v4)
    {
      while (*(_QWORD *)(v4 + 64) != a2)
      {
        v4 = *(_QWORD *)(v4 + 128);
        if (!v4)
          goto LABEL_5;
      }
      *(_DWORD *)(v4 + 120) = -12932;
      FigCFHTTPFinishReadRequest(DerivedStorage, v4, 1);
      v5 = 0;
    }
    else
    {
LABEL_5:
      v5 = 4294954362;
    }
    FigRetainProxyReleaseOwner();
  }
  FigRetainProxyUnlockMutex();
  FigRetainProxyRelease();
  return v5;
}

uint64_t FigCFHTTPFinishReadRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v6;
  int v7;
  BOOL v8;
  int v10;
  int IsInvalidated;
  int v12;
  const void *v13;
  CFTypeRef v14;
  char v15;
  char v16;
  const void *v17;
  void (*v18)(const void *);
  char v19;

  FigRetainProxyRetainOwner();
  v6 = (_BYTE *)(a2 + 125);
  if (*(_BYTE *)(a2 + 125))
    return FigRetainProxyReleaseOwner();
  if (*(_BYTE *)(a2 + 126))
    RemoveReadRequestFromQueue(a1, a2);
  v7 = *(_DWORD *)(a1 + 44);
  if (*(_BYTE *)(a1 + 40))
    v8 = v7 == 1;
  else
    v8 = 0;
  v10 = v8 || v7 == 2;
  FigNetworkInterfaceReporterSamplePhysicalStatistics(*(_QWORD *)(a1 + 592), *(_QWORD *)(a2 + 24), *(_QWORD *)(a1 + 32), 0x1E301B6D8, v10);
  if (!*(_BYTE *)(a2 + 127) && !*v6)
  {
    if (*(_BYTE *)(a1 + 377))
    {
      *v6 = 1;
    }
    else
    {
      IsInvalidated = FigRetainProxyIsInvalidated();
      *v6 = 1;
      if (IsInvalidated)
        goto LABEL_20;
    }
    (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD))(a2 + 16))(*(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 112), 0, a3, *(unsigned int *)(a2 + 120));
    v6 = (_BYTE *)(a2 + 127);
  }
  *v6 = 1;
LABEL_20:
  v12 = *(_DWORD *)(a2 + 120);
  if (v12 && v12 != -12930)
  {
    v16 = 0;
    v15 = 1;
  }
  else
  {
    v13 = *(const void **)(a1 + 128);
    if (v13)
    {
      CFRelease(v13);
      *(_QWORD *)(a1 + 128) = 0;
    }
    v14 = *(CFTypeRef *)(a2 + 24);
    if (v14)
      v14 = CFRetain(v14);
    v15 = 0;
    *(_QWORD *)(a1 + 128) = v14;
    v16 = 1;
  }
  v17 = *(const void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  FigRetainProxyUnlockMutex();
  if ((v16 & 1) == 0)
  {
    if (v17)
    {
      v18 = *(void (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v18)
        v18(v17);
    }
  }
  v19 = v15 ^ 1;
  if (v17 != *(const void **)(a1 + 88))
    v19 = 1;
  if ((v19 & 1) == 0 && !*(_DWORD *)(a1 + 72))
  {
    if (v17)
    {
      CFRelease(v17);
      *(_QWORD *)(a1 + 88) = 0;
    }
    *(_DWORD *)(a1 + 96) = -1;
  }
  if (v17)
    CFRelease(v17);
  FigRetainProxyLockMutex();
  ReadRequestRelease(a2);
  return FigRetainProxyReleaseOwner();
}

void ReadRequestRelease(uint64_t a1)
{
  const void *v2;
  uint64_t DerivedStorage;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;

  if (!FigAtomicDecrement32())
  {
    v2 = *(const void **)(a1 + 24);
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)(a1 + 24) = 0;
    }
    if (*(_BYTE *)(a1 + 126))
    {
      FigRetainProxyLockMutex();
      if (!FigRetainProxyIsInvalidated())
      {
        FigRetainProxyGetOwner();
        DerivedStorage = CMBaseObjectGetDerivedStorage();
        RemoveReadRequestFromQueue(DerivedStorage, a1);
      }
      FigRetainProxyUnlockMutex();
    }
    v4 = *(const void **)(a1 + 40);
    if (v4)
      CFRelease(v4);
    v5 = *(const void **)(a1 + 80);
    if (v5)
      CFRelease(v5);
    v6 = *(const void **)(a1 + 88);
    if (v6)
      CFRelease(v6);
    v7 = *(const void **)(a1 + 96);
    if (v7)
      CFRelease(v7);
    v8 = *(const void **)(a1 + 72);
    if (v8)
      CFRelease(v8);
    FigRetainProxyRelease();
    free((void *)a1);
  }
}

void crabsBBufRefReleaseFn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  const void *v5;
  _OWORD v6[6];
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 8);
  crabsReleaseWorking((_QWORD *)v4, *(_QWORD **)a1, 1, 0);
  --gCRABS_Stats_4;
  --*(_QWORD *)(v4 + 872);
  gCRABS_Stats_2 -= a3;
  *(_QWORD *)(v4 + 856) -= a3;
  if ((*(_BYTE *)(v4 + 504) & 1) == 0 && FigRetainProxyTryLockMutex())
  {
    if (*(uint64_t *)(v4 + 344) >= 49)
    {
      do
      {
        v7 = 0;
        memset(v6, 0, sizeof(v6));
        if (crabsSwipeUnusedWorking(v4, (uint64_t)v6))
          break;
        removeFromWorkingSet((_QWORD *)v4, (uint64_t)v6);
        crabsReleaseWorkingBlock((CFAllocatorRef *)v4, (uint64_t)v6);
      }
      while (*(uint64_t *)(v4 + 344) >= 17);
    }
    crabsUnlockWithActions(v4);
  }
  v5 = *(const void **)(v4 + 40);
  if (v5)
    CFRelease(v5);
}

uint64_t FigByteRateHistoryAddToSample(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)result + 16 * *(int *)(result + 12);
  *(_QWORD *)v2 += *(_QWORD *)a2;
  *(_DWORD *)(v2 + 8) += *(_DWORD *)(a2 + 8);
  v3 = *(_QWORD *)(result + 32) + *(int *)(a2 + 8);
  *(_QWORD *)(result + 24) += *(_QWORD *)a2;
  *(_QWORD *)(result + 32) = v3;
  return result;
}

uint64_t crabsIssueImmedLoad(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v6;
  CFTypeRef v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v6 = *(const void **)(a1 + 760);
  if (v6)
    v7 = CFRetain(v6);
  else
    v7 = 0;
  v8 = &sFigCDSNodeProtocolID;
  do
  {
    while (*(_DWORD *)(a1 + 664) != 1)
    {
LABEL_9:
      if (*((_DWORD *)v8 + 634) >= 2u)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v8 = &sFigCDSNodeProtocolID;
      }
      v14 = crabsIssueLoad(a1, a1 + 616, a2, a3, 0, 0);
      if ((_DWORD)v14 != -12871)
      {
        if (!v7)
          return v14;
        goto LABEL_19;
      }
    }
    if (*(_QWORD *)(a1 + 56) == -1)
    {
      v9 = *(_QWORD *)(a1 + 632);
      v10 = *(_QWORD *)(a1 + 640);
    }
    else
    {
      v9 = *(_QWORD *)(a1 + 632);
      v10 = *(_QWORD *)(a1 + 640);
      if (*(_QWORD *)(a1 + 80) && crabsRangeInBlockIsCached(a1, *(_QWORD *)(a1 + 632), *(_QWORD *)(a1 + 640)))
        goto LABEL_9;
    }
    v12 = crabsWaitForLoad(a1, (uint64_t *)(a1 + 616), v9, v10, -1);
    if ((_DWORD)v12)
      v13 = (_DWORD)v12 == -12930;
    else
      v13 = 1;
  }
  while (v13);
  v14 = v12;
  if (v7)
LABEL_19:
    CFRelease(v7);
  return v14;
}

uint64_t crabsReadyBlockForLoad(uint64_t a1, int *a2, int a3)
{
  _BOOL4 v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;

  v6 = (a2[2] & 0x80) != 0 && crabsMakeBackingNonvolatile((_QWORD *)a1, (uint64_t)a2, *(_QWORD *)(a1 + 224) <= *a2) != 0;
  if (crabAllocWorkingSet(a1, (uint64_t)a2))
  {
    LODWORD(v7) = 0;
    goto LABEL_6;
  }
  if (a3)
    goto LABEL_22;
  v12 = *((unsigned __int16 *)a2 + 4);
  if ((v12 & 0x200) != 0)
  {
    if (((v12 >> 8) & 1) != 0)
      goto LABEL_22;
  }
  else if (*((_QWORD *)a2 + 11))
  {
LABEL_22:
    LODWORD(v7) = 0;
    goto LABEL_23;
  }
  if (crabsAllocBacking(a1, a2))
  {
    LODWORD(v7) = 1;
  }
  else
  {
    v7 = 0;
    if (!crabsBlockIsAKeeper((_QWORD *)a1, a2))
    {
      v10 = 1;
      goto LABEL_27;
    }
  }
LABEL_23:
  if (!crabsSwipeUnusedWorking(a1, (uint64_t)a2))
  {
LABEL_6:
    v8 = *((unsigned __int16 *)a2 + 4);
    if ((v8 & 0x200) != 0)
    {
      v9 = (v8 >> 8) & 1;
      if ((_DWORD)v7)
        goto LABEL_12;
    }
    else
    {
      v9 = *((_QWORD *)a2 + 11) != 0;
      if ((_DWORD)v7)
        goto LABEL_12;
    }
    if (v9)
    {
      crabsPageInBlock(a1, a2);
      v8 = *((unsigned __int16 *)a2 + 4);
    }
LABEL_12:
    if ((v8 & 0x200) != 0)
    {
      if (((v8 >> 8) & 1) != 0)
        goto LABEL_14;
    }
    else if (*((_QWORD *)a2 + 11))
    {
LABEL_14:
      v10 = 0;
LABEL_15:
      v11 = 1;
      goto LABEL_25;
    }
    if (crabsAllocBacking(a1, a2))
    {
      v10 = 0;
      v11 = 1;
LABEL_26:
      crabsAddBlockToBackedList((uint64_t *)a1, a2);
      v7 = v11;
      goto LABEL_27;
    }
    v10 = 0;
    LODWORD(v7) = crabsSwipeBacking(a1, (uint64_t)a2, 0) == 0;
    goto LABEL_15;
  }
  v11 = 0;
  v10 = 1;
LABEL_25:
  v13 = v7;
  v7 = v11;
  if (v13)
    goto LABEL_26;
LABEL_27:
  if ((v6 & v10) == 1 && (*(_BYTE *)(a1 + 504) & 3) == 0)
    crabsMakeBlockVolatileRelativeToAnchor((_QWORD *)a1, a2);
  return v7;
}

BOOL crabsAllocBacking(uint64_t a1, int *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t, integer_t *, int *);
  uint64_t v10;
  _BOOL8 result;
  _BOOL4 v12;
  host_t v13;
  kern_return_t v14;
  unint64_t v15;
  int v16;
  void *v17;
  void *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;
  size_t v26;
  unint64_t v27;
  mach_msg_type_number_t host_info_outCnt;
  integer_t host_info_out[4];
  __int128 v30;
  _DWORD v31[7];

  v4 = *(_DWORD *)(a1 + 504);
  if ((v4 & 1) != 0)
  {
    *(_QWORD *)host_info_out = 0;
    v5 = *(_QWORD *)(a1 + 8);
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 96);
      v7 = a2 + 24;
      v8 = *a2;
      v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, integer_t *, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 8);
      if (v9)
      {
        if (v9(v5, v6, v6 * v8, host_info_out, a2 + 24))
        {
          v10 = *(_QWORD *)(a1 + 16);
          if (v10)
          {
            if (v10 != *(_QWORD *)host_info_out)
            {
              FigSignalErrorAt();
              result = 0;
              *v7 = -1;
              return result;
            }
          }
          else
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)host_info_out;
          }
          *((_WORD *)a2 + 4) |= 0x100u;
        }
      }
    }
  }
  else if ((v4 & 3) != 0)
  {
    *((_QWORD *)a2 + 11) = CFAllocatorAllocate(*(CFAllocatorRef *)a1, *(_QWORD *)(a1 + 96), 0);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 464) >= *(_QWORD *)(a1 + 472) && (a2[2] & 0x10) == 0;
    v30 = 0u;
    memset(v31, 0, sizeof(v31));
    *(_OWORD *)host_info_out = 0u;
    host_info_outCnt = 60;
    v26 = 8;
    v27 = 0;
    v13 = MEMORY[0x194030F38]();
    v14 = host_statistics(v13, 2, host_info_out, &host_info_outCnt);
    v15 = 0;
    if (!v14)
    {
      v16 = sysctlbyname("vm.vm_page_free_target", &v27, &v26, 0, 0);
      v15 = 0;
      if (!v16)
      {
        if (host_info_out[0] <= v27)
          v15 = 0;
        else
          v15 = *MEMORY[0x1E0C85AD8] * (host_info_out[0] - v27);
      }
    }
    if (!v12 || v15 > *(_QWORD *)(a1 + 96) && crabsEnsureCanary(a1))
    {
      v17 = CFAllocatorAllocate(*(CFAllocatorRef *)a1, *(_QWORD *)(a1 + 96), 0);
      if (v17)
      {
        v18 = v17;
        if (*(_QWORD *)(a1 + 96))
        {
          v19 = 0;
          v20 = (_QWORD *)MEMORY[0x1E0C85AD8];
          do
          {
            *((_BYTE *)v17 + v19) = 0;
            v19 += *v20;
          }
          while (v19 < *(_QWORD *)(a1 + 96));
        }
        if (v12
          && ((v21 = *(_QWORD *)(a1 + 456),
               host_info_out[0] = 0,
               !MEMORY[0x194031988](*MEMORY[0x1E0C83DA0], v21, 1, host_info_out))
            ? (v22 = (host_info_out[0] & 3) == 2)
            : (v22 = 0),
              v22))
        {
          CFAllocatorDeallocate(*(CFAllocatorRef *)a1, v18);
        }
        else
        {
          *((_QWORD *)a2 + 11) = v18;
          if ((a2[2] & 0x10) == 0)
            ++*(_QWORD *)(a1 + 464);
        }
      }
    }
  }
  v23 = *((unsigned __int16 *)a2 + 4);
  if ((v23 & 0x200) == 0)
  {
    if (!*((_QWORD *)a2 + 11))
      goto LABEL_37;
LABEL_40:
    v24 = *(_QWORD *)(a1 + 96);
    if ((*(_BYTE *)(a1 + 504) & 1) != 0)
    {
      gCRABS_Stats_5 += v24;
      v25 = (_QWORD *)(a1 + 880);
    }
    else
    {
      gCRABS_Stats_0 += v24;
      v25 = (_QWORD *)(a1 + 840);
    }
    *v25 += v24;
    if ((v23 & 0x200) == 0)
      return *((_QWORD *)a2 + 11) != 0;
    return (v23 >> 8) & 1;
  }
  if (((v23 >> 8) & 1) != 0)
    goto LABEL_40;
LABEL_37:
  if ((v23 & 0x200) == 0)
    return *((_QWORD *)a2 + 11) != 0;
  return (v23 >> 8) & 1;
}

uint64_t *crabsAddBlockToBackedList(uint64_t *result, int *a2)
{
  __int16 v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *((_WORD *)a2 + 4);
  if ((v2 & 1) == 0)
  {
    if ((v2 & 0x10) != 0)
    {
      v6 = result[37];
      *((_QWORD *)a2 + 6) = v6;
      if (v6)
        v7 = (_QWORD *)(v6 + 56);
      else
        v7 = result + 38;
      *v7 = a2 + 12;
      v5 = result + 37;
      result[37] = (uint64_t)a2;
    }
    else
    {
      if (result[28] <= *a2)
        return addToAscendingBackedBlockList(result, result + 33, a2);
      v3 = result[35];
      *((_QWORD *)a2 + 6) = v3;
      if (v3)
        v4 = (_QWORD *)(v3 + 56);
      else
        v4 = result + 36;
      *v4 = a2 + 12;
      v5 = result + 35;
      result[35] = (uint64_t)a2;
    }
    *((_QWORD *)a2 + 7) = v5;
  }
  return result;
}

_QWORD *addToAscendingBackedBlockList(_QWORD *result, uint64_t *a2, int *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  if (!*a2)
  {
    *((_QWORD *)a3 + 6) = 0;
    a2[1] = (uint64_t)(a3 + 12);
    goto LABEL_5;
  }
  v4 = *a3;
  if (*a3 < *(_DWORD *)v3)
  {
    *((_QWORD *)a3 + 6) = v3;
    *(_QWORD *)(v3 + 56) = a3 + 12;
LABEL_5:
    *a2 = (uint64_t)a3;
    *((_QWORD *)a3 + 7) = a2;
    goto LABEL_6;
  }
  v5 = a2[1];
  if (v4 <= ***(_DWORD ***)(v5 + 8))
  {
    v6 = *(_QWORD *)(result[10] + 8 * (v4 - 1));
    if (!v6 || (*(_WORD *)(v6 + 8) & 0x1000) == 0 || (v7 = *(_QWORD *)(v6 + 48)) == 0)
    {
      while (v4 > *(_DWORD *)v3)
      {
        v3 = *(_QWORD *)(v3 + 48);
        if (!v3)
          goto LABEL_18;
      }
      v7 = v3;
    }
    *((_QWORD *)a3 + 7) = *(_QWORD *)(v7 + 56);
    *((_QWORD *)a3 + 6) = v7;
    **(_QWORD **)(v7 + 56) = a3;
    *(_QWORD *)(v7 + 56) = a3 + 12;
LABEL_18:
    ++gCRABS_Stats_6;
    ++result[111];
  }
  else
  {
    *((_QWORD *)a3 + 6) = 0;
    *((_QWORD *)a3 + 7) = v5;
    *(_QWORD *)v5 = a3;
    a2[1] = (uint64_t)(a3 + 12);
  }
LABEL_6:
  if (result + 33 == a2)
    *((_WORD *)a3 + 4) |= 0x1000u;
  return result;
}

uint64_t crabsSyncBlock(uint64_t a1, uint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;
  uint64_t v6;

  v3 = *(_DWORD *)(a1 + 504);
  if ((v3 & 1) != 0 && *(_QWORD *)(a1 + 728) == a2)
    return crabsCompleteLazySync(a1, 1);
  v4 = *(unsigned __int16 *)(a2 + 8);
  if ((v4 & 8) == 0)
    return 0;
  if ((v4 & 0x200) != 0)
  {
    if (((v4 >> 8) & 1) == 0)
      return FigSignalErrorAt();
  }
  else if (!*(_QWORD *)(a2 + 88))
  {
    return FigSignalErrorAt();
  }
  if ((v3 & 1) == 0)
  {
    memcpy(*(void **)(a2 + 88), *(const void **)(*(_QWORD *)(a2 + 80) + 16), *(int *)(a2 + 4));
    result = 0;
LABEL_9:
    *(_WORD *)(a2 + 8) &= ~8u;
    return result;
  }
  if (*(_BYTE *)(a1 + 135))
    return 4294954755;
  v6 = *(int *)(a2 + 4);
  if (crabsDiskBackingIsBusy(a1, 0))
    return 4294954754;
  result = FigFileForkWrite();
  if (!v6)
    goto LABEL_9;
  return FigSignalErrorAt();
}

uint64_t FigCRABS_HintActiveRanges(const void *a1, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  const void *v19;
  CFTypeRef v20;
  uint64_t v21;
  int **v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  int v36;
  int *v37;
  int v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  CFTypeRef v59;
  uint64_t v60;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
    CFRetain(a1);
  v9 = crabsEnsureInitialized(a1);
  if ((_DWORD)v9)
    goto LABEL_172;
  if (a3 < 1)
  {
    v18 = 1;
    if (a2)
      goto LABEL_28;
    goto LABEL_27;
  }
  v10 = 0;
  v11 = *(_QWORD *)(DerivedStorage + 96);
  v12 = 1;
  do
  {
    v13 = a4[2 * v10];
    if (v11 == 0x4000)
    {
      v14 = v13 >> 14;
    }
    else if (v11 == 0x10000)
    {
      v14 = v13 >> 16;
    }
    else
    {
      v14 = v13 / v11;
    }
    if (v14 < 0 || (v15 = *(_QWORD *)(DerivedStorage + 88), v14 >= v15))
    {
      v9 = FigSignalErrorAt();
      goto LABEL_172;
    }
    v16 = v13 + a4[2 * v10 + 1] - 1;
    while (1)
    {
      v17 = v16 >> 16;
      if (v11 != 0x10000)
      {
        v17 = v16 >> 14;
        if (v11 != 0x4000)
          v17 = v16 / v11;
      }
      if (v14 >= v15 || v14 > v17)
        break;
      if (v14 != *(_QWORD *)(DerivedStorage + 360))
        v12 = 0;
      ++v14;
    }
    ++v10;
    v18 = v12 != 0;
  }
  while (v10 < a3 && v12);
  if (!a2)
  {
LABEL_27:
    if (!v18)
      goto LABEL_28;
    v51 = 0;
LABEL_173:
    v20 = 0;
    if (a1)
      goto LABEL_153;
    goto LABEL_154;
  }
LABEL_28:
  v9 = FigRetainProxyLockMutex();
  if ((_DWORD)v9)
  {
LABEL_172:
    v51 = v9;
    goto LABEL_173;
  }
  if (!*(_BYTE *)(DerivedStorage + 104))
  {
    v51 = FigSignalErrorAt();
    v20 = 0;
    goto LABEL_152;
  }
  v19 = *(const void **)(DerivedStorage + 760);
  if (v19)
    v20 = CFRetain(v19);
  else
    v20 = 0;
  if (a3 < 1)
  {
    if ((a2 & 2) == 0)
    {
      if ((a2 & 0x10) != 0)
      {
        v44 = *(_QWORD *)(DerivedStorage + 88);
        goto LABEL_141;
      }
      goto LABEL_150;
    }
    v50 = 0;
    v44 = *(_QWORD *)(DerivedStorage + 88);
    goto LABEL_146;
  }
  v59 = v20;
  v21 = 0;
  v60 = a3;
  v22 = (int **)(DerivedStorage + 248);
  v23 = *(_QWORD *)(DerivedStorage + 96);
  while (2)
  {
    v24 = &a4[2 * v21];
    v25 = *v24;
    if (v23 == 0x4000)
    {
      v26 = v25 >> 14;
    }
    else if (v23 == 0x10000)
    {
      v26 = v25 >> 16;
    }
    else
    {
      v26 = v25 / v23;
    }
    while (2)
    {
      v27 = v25 + a4[2 * v21 + 1] - 1;
      if (v23 == 0x4000)
      {
        v28 = v27 >> 14;
      }
      else if (v23 == 0x10000)
      {
        v28 = v27 >> 16;
      }
      else
      {
        v28 = v27 / v23;
      }
      if (v26 <= v28 && v26 < *(_QWORD *)(DerivedStorage + 88))
      {
        v29 = *(int **)(*(_QWORD *)(DerivedStorage + 80) + 8 * v26);
        if (!v29
          && (crabsInitBlock(DerivedStorage, v26)
           || (v29 = *(int **)(*(_QWORD *)(DerivedStorage + 80) + 8 * v26)) == 0))
        {
LABEL_143:
          v30 = FigSignalErrorAt();
LABEL_144:
          v51 = v30;
          v20 = v59;
          goto LABEL_152;
        }
        if ((a2 & 4) != 0 && *(_QWORD *)(DerivedStorage + 232) > v26)
          *(_QWORD *)(DerivedStorage + 232) = v26;
        *(_QWORD *)(DerivedStorage + 360) = v26;
        if ((a2 & 8) != 0)
        {
          if ((*(_BYTE *)(DerivedStorage + 504) & 1) != 0)
          {
            if (v29 == *(int **)(DerivedStorage + 728))
            {
              v30 = crabsCompleteLazySync(DerivedStorage, 1);
              if ((_DWORD)v30)
                goto LABEL_144;
            }
            if (v29 == *(int **)(DerivedStorage + 744))
              crabsCompleteLazyPagein(DerivedStorage, 1);
          }
          v31 = *((_QWORD *)v29 + 10);
          if (v31 && *(int *)(v31 + 24) >= 1)
            goto LABEL_143;
          if ((v29[2] & 4) != 0 || v29[1])
            crabsMarkBlockUnfilled(DerivedStorage, (uint64_t)v29);
        }
        if ((*(_BYTE *)(DerivedStorage + 504) & 3) != 0)
        {
          if ((a2 & 1) == 0)
            goto LABEL_70;
LABEL_68:
          if ((v29[2] & 0x80) != 0)
            crabsMakeBackingNonvolatile((_QWORD *)DerivedStorage, (uint64_t)v29, *(_QWORD *)(DerivedStorage + 224) <= *v29);
        }
        else
        {
          crabsCleanupBlockIfPurged(DerivedStorage, v29);
          if ((a2 & 1) != 0)
            goto LABEL_68;
        }
LABEL_70:
        v32 = *((unsigned __int16 *)v29 + 4);
        if ((v32 & 1) == 0 && ((v32 & 4) == 0 || (*(_BYTE *)(DerivedStorage + 504) & 1) != 0 && !*((_QWORD *)v29 + 10)))
        {
          if ((v32 & 0x80) != 0)
          {
            crabsMakeBackingNonvolatile((_QWORD *)DerivedStorage, (uint64_t)v29, *(_QWORD *)(DerivedStorage + 224) <= *v29);
            v32 = *((unsigned __int16 *)v29 + 4);
          }
          if ((v32 & 0x200) != 0)
          {
            if (((v32 >> 8) & 1) == 0)
              goto LABEL_86;
          }
          else if (!*((_QWORD *)v29 + 11))
          {
            goto LABEL_86;
          }
          v33 = DerivedStorage + 296;
          if ((v32 & 0x10) == 0)
          {
            if (*(_QWORD *)(DerivedStorage + 224) <= *v29)
              v33 = DerivedStorage + 264;
            else
              v33 = DerivedStorage + 280;
          }
          removeFromList(DerivedStorage, v33, (uint64_t)v29, 0);
LABEL_86:
          v34 = *((unsigned __int16 *)v29 + 4);
          v35 = v34 & 0xFFFFF7FF;
          v36 = ~(v34 << 11) & 0x800 | v34;
          if ((a2 & 0x10) == 0)
            v36 = v35;
          v32 = v36 | 1;
          *((_WORD *)v29 + 4) = v32;
          v37 = *v22;
          if (*v22)
          {
            v38 = *v29;
            if (*v29 < *v37)
            {
              *((_QWORD *)v29 + 2) = v37;
              *((_QWORD *)v37 + 3) = v29 + 4;
              goto LABEL_92;
            }
            v40 = *(_QWORD *)(DerivedStorage + 256);
            if (v38 <= ***(_DWORD ***)(v40 + 8))
            {
              v42 = *(_QWORD *)(*(_QWORD *)(DerivedStorage + 80) + 8 * (v38 - 1));
              if (!v42 || (*(_WORD *)(v42 + 8) & 1) == 0 || (v43 = *(int **)(v42 + 16)) == 0)
              {
                while (v38 > *v37)
                {
                  v37 = (int *)*((_QWORD *)v37 + 2);
                  if (!v37)
                    goto LABEL_120;
                }
                v43 = v37;
              }
              *((_QWORD *)v29 + 3) = *((_QWORD *)v43 + 3);
              *((_QWORD *)v29 + 2) = v43;
              **((_QWORD **)v43 + 3) = v29;
              *((_QWORD *)v43 + 3) = v29 + 4;
LABEL_120:
              ++gCRABS_Stats_6;
              ++*(_QWORD *)(DerivedStorage + 888);
            }
            else
            {
              *((_QWORD *)v29 + 2) = 0;
              *((_QWORD *)v29 + 3) = v40;
              *(_QWORD *)v40 = v29;
              *(_QWORD *)(DerivedStorage + 256) = v29 + 4;
            }
          }
          else
          {
            *((_QWORD *)v29 + 2) = 0;
            *(_QWORD *)(DerivedStorage + 256) = v29 + 4;
LABEL_92:
            *v22 = v29;
            *((_QWORD *)v29 + 3) = v22;
          }
        }
        if ((a2 & 1) == 0 || (v32 & 0x10) != 0)
        {
          LOBYTE(v39) = v32;
        }
        else
        {
          if ((v32 & 0x80) != 0)
          {
            crabsMakeBackingNonvolatile((_QWORD *)DerivedStorage, (uint64_t)v29, *(_QWORD *)(DerivedStorage + 224) <= *v29);
            v32 = *((unsigned __int16 *)v29 + 4);
          }
          LOBYTE(v39) = v32 | 0x10;
          *((_WORD *)v29 + 4) = v32 | 0x10;
          if ((v32 & 1) != 0)
            goto LABEL_102;
          if ((v32 & 0x200) == 0)
          {
            if (!*((_QWORD *)v29 + 11))
              goto LABEL_102;
LABEL_108:
            if (*(_QWORD *)(DerivedStorage + 224) <= *v29)
              v41 = DerivedStorage + 264;
            else
              v41 = DerivedStorage + 280;
            removeFromList(DerivedStorage, v41, (uint64_t)v29, 0);
            crabsAddBlockToBackedList((uint64_t *)DerivedStorage, v29);
            v39 = *((_WORD *)v29 + 4);
            goto LABEL_102;
          }
          if (((v32 >> 8) & 1) != 0)
            goto LABEL_108;
        }
LABEL_102:
        if ((v39 & 0x20) != 0)
        {
          removeFromWorkingSet((_QWORD *)DerivedStorage, (uint64_t)v29);
          addToWorkingSet((_QWORD *)DerivedStorage, (uint64_t)v29, 1, 1);
        }
        ++v26;
        v25 = *v24;
        v23 = *(_QWORD *)(DerivedStorage + 96);
        continue;
      }
      break;
    }
    ++v21;
    a3 = v60;
    if (v21 != v60)
      continue;
    break;
  }
  if ((a2 & 2) != 0)
  {
    v44 = *(_QWORD *)(DerivedStorage + 88);
    v54 = *(_QWORD *)(DerivedStorage + 96);
    v55 = v60;
    v20 = v59;
    do
    {
      v57 = *a4;
      a4 += 2;
      v56 = v57;
      if (v54 == 0x4000)
      {
        v58 = v56 >> 14;
      }
      else if (v54 == 0x10000)
      {
        v58 = v56 >> 16;
      }
      else
      {
        v58 = v56 / v54;
      }
      if (v44 > v58)
      {
        if (v54 == 0x4000)
        {
          v44 = v56 >> 14;
        }
        else if (v54 == 0x10000)
        {
          v44 = v56 >> 16;
        }
        else
        {
          v44 = v56 / v54;
        }
      }
      --v55;
    }
    while (v55);
    v50 = 0;
    goto LABEL_146;
  }
  v20 = v59;
  if ((a2 & 0x10) == 0)
    goto LABEL_150;
  v44 = *(_QWORD *)(DerivedStorage + 88);
  v45 = *(_QWORD *)(DerivedStorage + 96);
  v46 = v60;
  do
  {
    v48 = *a4;
    a4 += 2;
    v47 = v48;
    if (v45 == 0x4000)
    {
      v49 = v47 >> 14;
    }
    else if (v45 == 0x10000)
    {
      v49 = v47 >> 16;
    }
    else
    {
      v49 = v47 / v45;
    }
    if (v44 > v49)
    {
      if (v45 == 0x4000)
      {
        v44 = v47 >> 14;
      }
      else if (v45 == 0x10000)
      {
        v44 = v47 >> 16;
      }
      else
      {
        v44 = v47 / v45;
      }
    }
    --v46;
  }
  while (v46);
LABEL_141:
  v50 = 1;
  if (*(_QWORD *)(DerivedStorage + 224) > v44)
  {
LABEL_146:
    v52 = crabsDoJump(DerivedStorage, v44);
    if (!(_DWORD)v52)
      goto LABEL_147;
    goto LABEL_151;
  }
LABEL_147:
  if ((v50 & 1) == 0 && !a3)
  {
    v51 = 0;
    goto LABEL_152;
  }
LABEL_150:
  v52 = crabsStartIdleRead(DerivedStorage);
LABEL_151:
  v51 = v52;
LABEL_152:
  crabsRetainProxyUnlockWithActions();
  if (a1)
LABEL_153:
    CFRelease(a1);
LABEL_154:
  if (v20)
    CFRelease(v20);
  return v51;
}

void crabsCleanupBlockIfPurged(uint64_t a1, int *a2)
{
  uint64_t v4;
  BOOL v5;
  int v6;

  if ((a2[2] & 0x80) != 0)
  {
    v4 = *((_QWORD *)a2 + 11);
    v6 = 0;
    if (MEMORY[0x194031988](*MEMORY[0x1E0C83DA0], v4, 1, &v6))
      v5 = 0;
    else
      v5 = (v6 & 3) == 2;
    if (v5)
      crabsRemovePurgedBacking(a1, a2, *(_QWORD *)(a1 + 224) <= *a2);
  }
}

uint64_t fpSupport_copyFormatDescription(uint64_t a1, _QWORD *a2)
{
  uint64_t FigBaseObject;
  uint64_t (*v4)(uint64_t, const __CFString *, _QWORD, CFArrayRef *);
  uint64_t v5;
  CFArrayRef v6;
  CFIndex Count;
  const void *ValueAtIndex;
  CFArrayRef theArray;

  theArray = 0;
  FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  v4 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (!v4)
    return 4294954514;
  v5 = v4(FigBaseObject, CFSTR("TrackFormatDescriptionArray"), *MEMORY[0x1E0C9AE00], &theArray);
  v6 = theArray;
  if ((_DWORD)v5)
    goto LABEL_8;
  if (!theArray)
    return 4294954513;
  Count = CFArrayGetCount(theArray);
  v6 = theArray;
  if (Count)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
    if (ValueAtIndex)
      ValueAtIndex = CFRetain(ValueAtIndex);
    v5 = 0;
    *a2 = ValueAtIndex;
    v6 = theArray;
LABEL_8:
    if (!v6)
      return v5;
    goto LABEL_13;
  }
  v5 = 4294954513;
  if (theArray)
LABEL_13:
    CFRelease(v6);
  return v5;
}

void crabsUnhint(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(unsigned __int16 *)(a2 + 8);
  *(_WORD *)(a2 + 8) = v4 & 0xF7FE;
  if (*(_QWORD *)(a1 + 360) == *(_DWORD *)a2)
    *(_QWORD *)(a1 + 360) = *(_QWORD *)(a1 + 88);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD **)(a2 + 24);
  if (v5)
  {
    *(_QWORD *)(v5 + 24) = v6;
    v6 = *(_QWORD **)(a2 + 24);
  }
  else
  {
    if (!v6)
      goto LABEL_8;
    *(_QWORD *)(a1 + 256) = v6;
  }
  *v6 = v5;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
LABEL_8:
  if ((v4 & 0x200) != 0)
  {
    if (((v4 >> 8) & 1) == 0)
      return;
  }
  else if (!*(_QWORD *)(a2 + 88))
  {
    return;
  }
  crabsAddBlockToBackedList((uint64_t *)a1, (int *)a2);
  if ((*(_BYTE *)(a1 + 504) & 3) == 0 && !*(_QWORD *)(a2 + 80) && (*(_WORD *)(a2 + 8) & 0x10) == 0)
    crabsMakeBlockVolatileRelativeToAnchor((_QWORD *)a1, (int *)a2);
}

uint64_t crabsSelectNextFill(uint64_t a1, int **a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if ((*(_BYTE *)(a1 + 504) & 3) == 0)
    crabsPurgeCompletionSweep((_QWORD *)a1);
  *a2 = 0;
  if (*(_BYTE *)(a1 + 131))
    return 0;
  v5 = *(_QWORD *)(a1 + 88);
  if (v5 < 1)
  {
    v6 = 0;
LABEL_21:
    if (*(_QWORD *)(a1 + 56) != -1 && *(_QWORD *)(a1 + 80))
    {
      *(_BYTE *)(a1 + 131) = 1;
      if (v6 == *(_QWORD *)(a1 + 88))
        *(_BYTE *)(a1 + 130) = 1;
      if (dword_1EE2A29E8)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    return 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = (v6 + *(_QWORD *)(a1 + 240)) % v5;
    v8 = *(int **)(*(_QWORD *)(a1 + 80) + 8 * v7);
    if (!v8)
    {
      if (crabsInitBlock(a1, v7))
        return FigSignalErrorAt();
      v8 = *(int **)(*(_QWORD *)(a1 + 80) + 8 * v7);
      if (!v8)
        return FigSignalErrorAt();
    }
    if ((*(_BYTE *)(a1 + 504) & 3) == 0 && *(_QWORD *)(a1 + 224) > *v8)
      crabsCleanupBlockIfPurged(a1, v8);
    if ((v8[2] & 4) == 0)
    {
      v9 = *v8;
      if (*(_DWORD *)(a1 + 664) != 1)
        break;
      v10 = *(_QWORD *)(a1 + 96);
      v11 = *(_QWORD *)(a1 + 632);
      if (v11 > v10 * v9 + v8[1])
        break;
      v12 = v10 * v9 + v10;
      if (*(_QWORD *)(a1 + 640) + v11 < v12 || *(_QWORD *)(a1 + 648) + v11 >= v12)
        break;
    }
    ++v6;
    v5 = *(_QWORD *)(a1 + 88);
    if (v6 >= v5)
      goto LABEL_21;
  }
  if (*(_QWORD *)(a1 + 224) > v9 && !*(_BYTE *)(a1 + 132))
    goto LABEL_21;
  *(_QWORD *)(a1 + 240) = (int)v7;
  if (!*((_QWORD *)v8 + 10))
  {
    crabsReadyBlockForLoad(a1, v8, 0);
    if (!*((_QWORD *)v8 + 10))
      return 4294954420;
  }
  result = 0;
  *a2 = v8;
  return result;
}

uint64_t crabsSwipeUnusedWorking(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t *v10;
  unsigned int v11;
  int v12;
  uint64_t v13;

  for (i = *(_QWORD *)(a1 + 336); ; i = *(_QWORD *)(a1 + 336))
  {
    v5 = *(uint64_t **)(i + 8);
    v6 = *v5;
    if (!*v5)
      flushPendingReleaseSet((_QWORD *)a1);
    removeFromWorkingSet((_QWORD *)a1, *v5);
    if ((*(_WORD *)(v6 + 8) & 8) == 0 || !crabsBlockIsAKeeper((_QWORD *)a1, (int *)v6))
      break;
    addToWorkingSet((_QWORD *)a1, v6, 1, 1);
  }
  if ((*(_BYTE *)(a1 + 504) & 1) != 0 && v6 == *(_QWORD *)(a1 + 728))
  {
    v7 = crabsCompleteLazySync(a1, 0);
    if ((_DWORD)v7)
    {
      v13 = v7;
      addToWorkingSet((_QWORD *)a1, v6, 1, 1);
      return v13;
    }
  }
  v8 = *(unsigned __int16 *)(v6 + 8);
  if ((v8 & 8) != 0)
  {
    if ((v8 & 0x200) != 0)
    {
      if (((v8 >> 8) & 1) != 0)
        goto LABEL_13;
    }
    else if (*(_QWORD *)(v6 + 88))
    {
LABEL_13:
      v9 = crabsSyncBlock(a1, v6);
      goto LABEL_14;
    }
    v9 = 0;
LABEL_14:
    if (v9)
      crabsMarkBlockUnfilled(a1, v6);
  }
  v10 = *(uint64_t **)(v6 + 80);
  *(_QWORD *)(a2 + 80) = v10;
  *v10 = a2;
  *(_QWORD *)(v6 + 80) = 0;
  if ((*(_BYTE *)(a1 + 504) & 3) == 0)
  {
    v11 = *(unsigned __int16 *)(v6 + 8);
    if ((v11 & 0x200) != 0)
      v12 = (v11 >> 8) & 1;
    else
      v12 = *(_QWORD *)(v6 + 88) != 0;
    if ((v11 & 0x11) == 0 && v12)
      crabsMakeBlockVolatileRelativeToAnchor((_QWORD *)a1, (int *)v6);
  }
  crabsCleanupOrphan((_QWORD *)a1, (int *)v6);
  addToWorkingSet((_QWORD *)a1, a2, 1, 1);
  return 0;
}

void crabsMakeBlockVolatileRelativeToAnchor(_QWORD *a1, int *a2)
{
  int *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int *v12;
  int *v13;
  uint64_t v14;
  int *v15;
  int *v16;
  int *v17;
  _BOOL4 v18;
  int *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int *v26;
  int *v27;
  uint64_t v28;
  int *v29;
  int *v30;
  int *v31;
  int *v32;
  int *v33;
  int v34;
  int v35;
  int *v36;
  int *v37;

  if (!*((_QWORD *)a2 + 11))
    return;
  v2 = a2;
  if ((a2[2] & 0x91) != 0)
    return;
  v3 = a1;
  v4 = a1[28];
  v5 = *a2;
  if (*((_BYTE *)a1 + 133))
  {
    if (v4 <= v5 && a1[59] + v4 > v5)
      return;
  }
  else if (v4 <= v5)
  {
    return;
  }
  if (v4 > v5)
  {
    if (crabsChangeBlockVolatility(a1, a2, 2, 1) && (v2[2] & 0x80) == 0)
    {
      v6 = v3[12];
      gCRABS_Stats_3 += v6;
      v3[108] += v6;
    }
    return;
  }
  v7 = a1[53];
  if (v7 < v5)
  {
    v8 = a1[54];
    if (v8 > v5)
    {
      v9 = 0;
      v10 = 0;
      v11 = a1[10];
      v12 = *(int **)(v11 + 8 * v7);
      v13 = *(int **)(v11 + 8 * v8);
      v14 = 16;
      v15 = v12;
      v16 = v13;
      while (1)
      {
        if (v10)
        {
LABEL_24:
          if (v9 == 1)
          {
            if (*v12 < (int)v5)
            {
              do
              {
                v17 = (int *)*((_QWORD *)v12 + 6);
                if ((v12[2] & 0x80) != 0 && !crabsChangeBlockVolatility(v3, v12, 3, 1))
                  crabsRemovePurgedBacking((uint64_t)v3, v12, 1);
                v12 = v17;
              }
              while (*v17 < *v2);
            }
            v18 = crabsChangeBlockVolatility(v3, v2, 0, 1);
            v19 = **(int ***)(*((_QWORD *)v2 + 7) + 8);
            while (v19 && v7 <= *v19)
            {
              v20 = v19;
              v19 = **(int ***)(*((_QWORD *)v19 + 7) + 8);
              if ((v20[2] & 0x80) != 0 && !crabsChangeBlockVolatility(v3, v20, 0, 1))
                crabsRemovePurgedBacking((uint64_t)v3, v20, 1);
            }
            goto LABEL_77;
          }
          if (*v13 > (int)v5)
          {
            do
            {
              v36 = **(int ***)(*((_QWORD *)v13 + 7) + 8);
              if ((v13[2] & 0x80) != 0 && !crabsChangeBlockVolatility(v3, v13, 1, 1))
                crabsRemovePurgedBacking((uint64_t)v3, v13, 1);
              v13 = v36;
            }
            while (*v36 > *v2);
          }
LABEL_74:
          a1 = v3;
          a2 = v2;
          v34 = 1;
LABEL_75:
          v35 = 1;
          goto LABEL_76;
        }
        v15 = (int *)*((_QWORD *)v15 + 6);
        v16 = **(int ***)(*((_QWORD *)v16 + 7) + 8);
        if (v15 == a2)
          break;
        if (v16 == a2)
        {
          v9 = 2;
          goto LABEL_22;
        }
        v10 = 0;
LABEL_23:
        if (!--v14)
          goto LABEL_24;
      }
      v9 = 1;
LABEL_22:
      v10 = v9;
      goto LABEL_23;
    }
  }
  v21 = a1[55];
  if (v21 >= v5 || (v22 = a1[56], v22 <= v5))
  {
    if (v7 > v5)
    {
      v34 = 0;
      goto LABEL_75;
    }
    if (a1[56] >= v5)
      goto LABEL_74;
    v34 = 1;
    v35 = 2;
LABEL_76:
    v18 = crabsChangeBlockVolatility(a1, a2, v34, v35);
    goto LABEL_77;
  }
  v23 = 0;
  v24 = 0;
  v25 = a1[10];
  v26 = *(int **)(v25 + 8 * v21);
  v27 = *(int **)(v25 + 8 * v22);
  v28 = 16;
  v29 = v26;
  v30 = v27;
  while (!v24)
  {
    v29 = (int *)*((_QWORD *)v29 + 6);
    v30 = **(int ***)(*((_QWORD *)v30 + 7) + 8);
    if (v29 == a2)
    {
      v23 = 1;
LABEL_45:
      v24 = v23;
      goto LABEL_46;
    }
    if (v30 == a2)
    {
      v23 = 2;
      goto LABEL_45;
    }
    v24 = 0;
LABEL_46:
    if (!--v28)
      break;
  }
  if (v23 != 2)
  {
    if (*v26 < (int)v5)
    {
      do
      {
        v37 = (int *)*((_QWORD *)v26 + 6);
        if ((v26[2] & 0x80) != 0 && !crabsChangeBlockVolatility(v3, v26, 0, 2))
          crabsRemovePurgedBacking((uint64_t)v3, v26, 1);
        v26 = v37;
      }
      while (*v37 < *v2);
    }
    goto LABEL_74;
  }
  if (*v27 > (int)v5)
  {
    do
    {
      v31 = **(int ***)(*((_QWORD *)v27 + 7) + 8);
      if ((v27[2] & 0x80) != 0 && !crabsChangeBlockVolatility(v3, v27, 3, 1))
        crabsRemovePurgedBacking((uint64_t)v3, v27, 1);
      v27 = v31;
    }
    while (*v31 > *v2);
  }
  v18 = crabsChangeBlockVolatility(v3, v2, 1, 2);
  v32 = (int *)*((_QWORD *)v2 + 6);
  while (v32 && v22 >= *v32)
  {
    v33 = v32;
    v32 = (int *)*((_QWORD *)v32 + 6);
    if ((v33[2] & 0x80) != 0 && !crabsChangeBlockVolatility(v3, v33, 1, 2))
      crabsRemovePurgedBacking((uint64_t)v3, v33, 1);
  }
LABEL_77:
  if (v18)
  {
    *((_WORD *)v2 + 4) &= ~0x80u;
    crabsPurgeCompletionSweep(v3);
    *((_WORD *)v2 + 4) |= 0x80u;
  }
}

void crabsCleanupOrphan(_QWORD *a1, int *a2)
{
  unsigned int v4;
  int v5;
  uint64_t v6;

  if (!*((_QWORD *)a2 + 10))
  {
    v4 = *((unsigned __int16 *)a2 + 4);
    if ((v4 & 0x200) != 0)
    {
      v5 = (v4 >> 8) & 1;
      if ((v4 & 0x400) != 0)
        return;
    }
    else
    {
      v5 = *((_QWORD *)a2 + 11) != 0;
      if ((v4 & 0x400) != 0)
        return;
    }
    if (!v5)
    {
      crabsMarkBlockUnfilled((uint64_t)a1, (uint64_t)a2);
      if ((a2[2] & 1) == 0)
      {
        v6 = *a2;
        if (a1[45] == v6)
          a1[45] = a1[11];
        *(_QWORD *)(a1[10] + 8 * v6) = 0;
        free(a2);
      }
    }
  }
}

void crabsPageInBlock(uint64_t a1, int *a2)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;

  v4 = *(_DWORD *)(a1 + 504);
  if ((v4 & 1) != 0 && *(int **)(a1 + 744) == a2)
  {
    crabsCompleteLazyPagein(a1, 1);
    return;
  }
  v5 = *((_QWORD *)a2 + 10);
  if (!v5)
    goto LABEL_13;
  v6 = *((unsigned __int16 *)a2 + 4);
  if ((v6 & 0x200) != 0)
    v7 = (v6 >> 8) & 1;
  else
    v7 = *((_QWORD *)a2 + 11) != 0;
  v8 = a2[1];
  if (!v7)
  {
    if (!v8)
      return;
LABEL_13:
    FigSignalErrorAt();
    return;
  }
  if (v8)
  {
    if ((v4 & 1) != 0)
    {
      if (crabsDiskBackingIsBusy(a1, 0))
      {
        crabsMarkBlockUnbacked(a1, a2, *(_QWORD *)(a1 + 224) <= *a2);
      }
      else
      {
        FigFileForkRead();
        crabsMarkBlockUnbacked(a1, a2, *(_QWORD *)(a1 + 224) <= *a2);
        __error();
        FigSignalErrorAt();
      }
    }
    else
    {
      memcpy(*(void **)(v5 + 16), *((const void **)a2 + 11), a2[1]);
      if ((~*((unsigned __int16 *)a2 + 4) & 5) == 0)
        crabsUnhint(a1, (uint64_t)a2);
    }
  }
}

void crabsReleaseWorkingBlock(CFAllocatorRef *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 80);
  if (v2)
  {
    CFAllocatorDeallocate(*a1, *(void **)(v2 + 16));
    free(*(void **)(a2 + 80));
    *(_QWORD *)(a2 + 80) = 0;
  }
}

uint64_t QTMovieCacheMemDeallocateCallBack(void *key, uint64_t *a2)
{
  const __CFDictionary *v4;
  const __CFNumber *Value;
  uint64_t v6;
  uint64_t result;
  uint64_t valuePtr;

  valuePtr = 0;
  v4 = (const __CFDictionary *)a2[1];
  if (v4 && (Value = (const __CFNumber *)CFDictionaryGetValue(v4, key)) != 0)
  {
    CFNumberGetValue(Value, kCFNumberCFIndexType, &valuePtr);
    v6 = valuePtr;
  }
  else
  {
    v6 = *a2;
    valuePtr = *a2;
  }
  result = MEMORY[0x19403197C](*MEMORY[0x1E0C83DA0], key, v6);
  a2[2] -= valuePtr;
  return result;
}

uint64_t itemfig_CopyTrackProperty(void *a1, uint64_t a2, const void *a3, const __CFAllocator *a4, CFDictionaryRef *a5)
{
  _BYTE *DerivedStorage;
  _BYTE *v12;
  const void *v13;
  uint64_t TrackStorage;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, CFTypeRef *, int *);
  uint64_t v17;
  const __CFAllocator *v18;
  int *p_valuePtr;
  CFNumberType v20;
  const void *Copy;
  uint64_t v22;
  uint64_t FigBaseObject;
  uint64_t (*v24)(uint64_t, __CFString *, const __CFAllocator *, CFDictionaryRef *);
  __CFString **v25;
  uint64_t v26;
  __CFString **v27;
  uint64_t v28;
  __CFString **v29;
  CFTypeRef v30;
  uint64_t (*v31)(CFTypeRef);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const void **v36;
  const void **v37;
  CFTypeRef v38;
  unsigned int (*v39)(CFTypeRef, uint64_t, _OWORD *);
  const void *v40;
  CFTypeRef *v41;
  CFTypeRef v42;
  const __CFDictionary *v43;
  const __CFData *v44;
  _OWORD v45[6];
  uint64_t v46;
  int valuePtr;
  CFTypeRef v48;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v48 = 0;
  valuePtr = 0;
  v46 = 0;
  if (*DerivedStorage || !a5)
    return FigSignalErrorAt();
  v12 = DerivedStorage;
  v13 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v13)
    goto LABEL_78;
  TrackStorage = itemfig_assureBasicsReadyForInspection(a1);
  if ((_DWORD)TrackStorage)
    goto LABEL_21;
  v15 = *((_QWORD *)v12 + 121);
  v16 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (!v16)
    goto LABEL_22;
  TrackStorage = v16(v15, a2, &v48, &valuePtr);
  if ((_DWORD)TrackStorage)
  {
LABEL_21:
    v22 = TrackStorage;
    goto LABEL_23;
  }
  v17 = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a3, CFSTR("MediaType")))
  {
    if (CFEqual(a3, CFSTR("FormatDescriptionArray")))
    {
      FigBaseObject = FigTrackReaderGetFigBaseObject(v48);
      v24 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v24)
      {
        v25 = kFigTrackProperty_FormatDescriptionArray;
LABEL_20:
        TrackStorage = v24(FigBaseObject, *v25, a4, a5);
        goto LABEL_21;
      }
      goto LABEL_22;
    }
    if (CFEqual(a3, CFSTR("Dimensions")))
    {
      FigBaseObject = FigTrackReaderGetFigBaseObject(v48);
      v24 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v24)
      {
        v25 = kFigTrackProperty_Dimensions;
        goto LABEL_20;
      }
LABEL_22:
      v22 = 4294954514;
      goto LABEL_23;
    }
    if (CFEqual(a3, CFSTR("EstimatedDataRate")))
    {
      v26 = (uint64_t)v48;
      v27 = kFigTrackProperty_EstimatedDataRate;
LABEL_32:
      TrackStorage = FigTrackReaderCopyProperty(v26, (uint64_t)*v27, (uint64_t)a4, (uint64_t)a5);
      goto LABEL_21;
    }
    if (CFEqual(a3, CFSTR("NominalFrameRate")))
    {
      v26 = (uint64_t)v48;
      v27 = kFigTrackProperty_NominalFrameRate;
      goto LABEL_32;
    }
    if (CFEqual(a3, CFSTR("CurrentVideoFrameRate")))
    {
      TrackStorage = itemfig_getTrackStorage((uint64_t)a1, a2, &v46);
      if ((_DWORD)TrackStorage)
        goto LABEL_21;
      MEMORY[0x19402EA0C](*(_QWORD *)(v17 + 496));
      if (valuePtr == 1986618469)
      {
        v28 = *(_QWORD *)(v46 + 16);
        if (v28)
        {
          v29 = kFigRenderPipelineProperty_CurrentVideoFrameRate;
LABEL_38:
          v22 = FigRenderPipelineCopyProperty(v28, (uint64_t)*v29, (uint64_t)a4, (uint64_t)a5);
LABEL_109:
          MEMORY[0x19402EA24](*(_QWORD *)(v17 + 496));
          goto LABEL_23;
        }
      }
      goto LABEL_108;
    }
    if (CFEqual(a3, CFSTR("Matrix")))
    {
      v26 = (uint64_t)v48;
      v27 = kFigTrackProperty_Matrix;
      goto LABEL_32;
    }
    if (CFEqual(a3, CFSTR("FormatDetails")))
    {
      TrackStorage = itemfig_createTrackFormatDetailsDictionary(v12, (uint64_t)v48, a4, a5);
      goto LABEL_21;
    }
    if (CFEqual(a3, CFSTR("HasMultipleNonEmptyEdits")))
    {
      if (*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16)
        && (v30 = v48,
            (v31 = *(uint64_t (**)(CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16)) != 0)
        && (v32 = v31(v30), v32 >= 1))
      {
        v33 = v32;
        v34 = 0;
        v35 = 0;
        v36 = (const void **)MEMORY[0x1E0C9AE40];
        v37 = (const void **)MEMORY[0x1E0C9AE50];
        do
        {
          memset(v45, 0, sizeof(v45));
          v38 = v48;
          v39 = *(unsigned int (**)(CFTypeRef, uint64_t, _OWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 24);
          if (v39 && !v39(v38, v34, v45) && (BYTE12(v45[0]) & 1) != 0)
          {
            if (v35 > 0)
              goto LABEL_56;
            ++v35;
          }
          ++v34;
        }
        while (v33 != v34);
        v37 = v36;
      }
      else
      {
        v37 = (const void **)MEMORY[0x1E0C9AE40];
      }
LABEL_56:
      v40 = *v37;
      *a5 = (CFDictionaryRef)*v37;
      CFRetain(v40);
      v22 = 0;
      goto LABEL_23;
    }
    if (CFEqual(a3, CFSTR("AudioCurves")))
    {
      TrackStorage = itemfig_getTrackStorage((uint64_t)a1, a2, &v46);
      if ((_DWORD)TrackStorage)
        goto LABEL_21;
      if (valuePtr == 1936684398)
      {
        Copy = *(const void **)(v46 + 80);
        if (!Copy)
          goto LABEL_11;
        goto LABEL_66;
      }
LABEL_78:
      TrackStorage = FigSignalErrorAt();
      goto LABEL_21;
    }
    if (CFEqual(a3, CFSTR("AudioProcessingUnits")))
    {
      TrackStorage = itemfig_getTrackStorage((uint64_t)a1, a2, &v46);
      if ((_DWORD)TrackStorage)
        goto LABEL_21;
      if (valuePtr != 1936684398)
        goto LABEL_78;
      Copy = *(const void **)(v46 + 96);
      if (!Copy)
        goto LABEL_11;
    }
    else
    {
      if (CFEqual(a3, CFSTR("Enabled")))
      {
        v22 = itemfig_getTrackStorage((uint64_t)a1, a2, &v46);
        if ((_DWORD)v22)
          goto LABEL_23;
        if (*(_BYTE *)(v46 + 8))
          v41 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
        else
          v41 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
        Copy = CFRetain(*v41);
        goto LABEL_12;
      }
      if (!CFEqual(a3, CFSTR("VideoFieldMode")))
      {
        if (CFEqual(a3, CFSTR("AudioProcessingTap")))
        {
          TrackStorage = itemfig_getTrackStorage((uint64_t)a1, a2, &v46);
          if ((_DWORD)TrackStorage)
            goto LABEL_21;
          if (valuePtr != 1936684398)
            goto LABEL_78;
          Copy = *(const void **)(v46 + 88);
          if (!Copy)
            goto LABEL_11;
          goto LABEL_66;
        }
        if (CFEqual(a3, CFSTR("LoudnessInfo")))
        {
          TrackStorage = itemfig_getTrackStorage((uint64_t)a1, a2, &v46);
          if ((_DWORD)TrackStorage)
            goto LABEL_21;
          if (valuePtr != 1936684398)
            goto LABEL_78;
          Copy = *(const void **)(v46 + 104);
          if (!Copy)
            goto LABEL_11;
          goto LABEL_66;
        }
        if (CFEqual(a3, CFSTR("EffectiveLoudnessInfo")))
        {
          TrackStorage = itemfig_getTrackStorage((uint64_t)a1, a2, &v46);
          if ((_DWORD)TrackStorage)
            goto LABEL_21;
          if (valuePtr == 1936684398)
          {
            TrackStorage = itemfig_copyCombinedLoudnessInfoDictionary((uint64_t)a1, a2, a5);
            goto LABEL_21;
          }
          goto LABEL_78;
        }
        if (CFEqual(a3, CFSTR("EffectiveEQPreset")))
        {
          TrackStorage = itemfig_getTrackStorage((uint64_t)a1, a2, &v46);
          if ((_DWORD)TrackStorage)
            goto LABEL_21;
          MEMORY[0x19402EA0C](*(_QWORD *)(v17 + 496));
          if (valuePtr == 1936684398)
          {
            v28 = *(_QWORD *)(v46 + 16);
            if (v28)
            {
              v29 = kFigAudioRenderPipelineProperty_EQPreset;
              goto LABEL_38;
            }
          }
LABEL_108:
          v22 = 4294954513;
          goto LABEL_109;
        }
        if (CFEqual(a3, CFSTR("WillTrimShortDurationAudioSamples")))
        {
          TrackStorage = itemfig_getTrackStorage((uint64_t)a1, a2, &v46);
          if ((_DWORD)TrackStorage)
            goto LABEL_21;
          MEMORY[0x19402EA0C](*(_QWORD *)(v17 + 496));
          if (valuePtr == 1936684398)
          {
            v28 = *(_QWORD *)(v46 + 16);
            if (!v28)
            {
              v42 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
              if (*MEMORY[0x1E0C9AE50])
                v42 = CFRetain(v42);
              v22 = 0;
              *a5 = (CFDictionaryRef)v42;
              goto LABEL_109;
            }
            v29 = kFigAudioRenderPipelineProperty_WillTrimShortDurationSamples;
            goto LABEL_38;
          }
          goto LABEL_108;
        }
        if (CFEqual(a3, CFSTR("EmploysHardwarePassthrough")))
        {
          TrackStorage = itemfig_getTrackStorage((uint64_t)a1, a2, &v46);
          if ((_DWORD)TrackStorage)
            goto LABEL_21;
          MEMORY[0x19402EA0C](*(_QWORD *)(v17 + 496));
          if (valuePtr == 1936684398)
          {
            v28 = *(_QWORD *)(v46 + 16);
            if (v28)
            {
              v29 = kFigAudioRenderPipelineProperty_EmploysHardwarePassthrough;
              goto LABEL_38;
            }
          }
          goto LABEL_108;
        }
        if (CFEqual(a3, CFSTR("TimePitchAlgorithm")))
        {
          TrackStorage = itemfig_getTrackStorage((uint64_t)a1, a2, &v46);
          if ((_DWORD)TrackStorage)
            goto LABEL_21;
          if (valuePtr != 1936684398)
            goto LABEL_78;
          Copy = *(const void **)(v46 + 112);
          if (!Copy)
            goto LABEL_11;
          goto LABEL_66;
        }
        if (CFEqual(a3, CFSTR("SweepFilterConfiguration")))
        {
          TrackStorage = itemfig_getTrackStorage((uint64_t)a1, a2, &v46);
          if ((_DWORD)TrackStorage)
            goto LABEL_21;
          if (valuePtr != 1936684398)
            goto LABEL_78;
          v43 = *(const __CFDictionary **)(v46 + 128);
          if (!v43)
          {
            Copy = CFDictionaryCreate(a4, (const void **)kFigPlaybackItemTrackSweepFilterConfigurationKey_Enabled, MEMORY[0x1E0C9AE40], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            goto LABEL_11;
          }
        }
        else
        {
          if (CFEqual(a3, CFSTR("SweepFilterSweepValue")))
          {
            TrackStorage = itemfig_getTrackStorage((uint64_t)a1, a2, &v46);
            if ((_DWORD)TrackStorage)
              goto LABEL_21;
            if (valuePtr == 1936684398)
            {
              v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
              p_valuePtr = (int *)(v46 + 136);
              v20 = kCFNumberFloat32Type;
              goto LABEL_10;
            }
            goto LABEL_78;
          }
          if (CFEqual(a3, CFSTR("CinematicAudioParameters")))
          {
            TrackStorage = itemfig_getTrackStorage((uint64_t)a1, a2, &v46);
            if ((_DWORD)TrackStorage)
              goto LABEL_21;
            if (valuePtr == 1936684398)
            {
              v44 = *(const __CFData **)(v46 + 152);
              if (v44)
                Copy = CFDataCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v44);
              else
                Copy = 0;
              goto LABEL_11;
            }
            goto LABEL_78;
          }
          if (!CFEqual(a3, CFSTR("VideoEnhancementFilterOptions")))
          {
            if (!CFEqual(a3, CFSTR("DisableColorMatching")))
            {
              v22 = 4294954512;
              goto LABEL_23;
            }
            TrackStorage = itemfig_getTrackStorage((uint64_t)a1, a2, &v46);
            if ((_DWORD)TrackStorage)
              goto LABEL_21;
            if (valuePtr != 1986618469)
              goto LABEL_78;
            Copy = *(const void **)(v46 + 64);
            if (!Copy)
              goto LABEL_11;
            goto LABEL_66;
          }
          TrackStorage = itemfig_getTrackStorage((uint64_t)a1, a2, &v46);
          if ((_DWORD)TrackStorage)
            goto LABEL_21;
          if (valuePtr != 1986618469)
            goto LABEL_78;
          v43 = *(const __CFDictionary **)(v46 + 56);
          if (!v43)
          {
            v22 = 0;
            *a5 = 0;
            goto LABEL_23;
          }
        }
        Copy = CFDictionaryCreateCopy(a4, v43);
        goto LABEL_11;
      }
      TrackStorage = itemfig_getTrackStorage((uint64_t)a1, a2, &v46);
      if ((_DWORD)TrackStorage)
        goto LABEL_21;
      if (valuePtr != 1986618469)
        goto LABEL_78;
      Copy = *(const void **)(v46 + 24);
      if (!Copy)
        goto LABEL_11;
    }
LABEL_66:
    Copy = CFRetain(Copy);
    goto LABEL_11;
  }
  v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  p_valuePtr = &valuePtr;
  v20 = kCFNumberSInt32Type;
LABEL_10:
  Copy = CFNumberCreate(v18, v20, p_valuePtr);
LABEL_11:
  v22 = 0;
LABEL_12:
  *a5 = (CFDictionaryRef)Copy;
LABEL_23:
  if (v48)
    CFRelease(v48);
  if (v13)
    CFRelease(v13);
  return v22;
}

CFArrayRef FigMatrixToCFArray(const __CFAllocator *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const __CFAllocator *v6;
  uint64_t i;
  uint64_t v8;
  CFNumberRef v9;
  CFArrayRef v10;
  uint64_t j;
  const void *v12;
  _OWORD v14[4];
  uint64_t v15;
  uint64_t v16;

  v4 = 0;
  v5 = 0;
  v16 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  do
  {
    for (i = 0; i != 12; i += 4)
    {
      v8 = v4;
      v9 = CFNumberCreate(v6, kCFNumberFloat32Type, (const void *)(a2 + i));
      v4 = v8 + 1;
      *((_QWORD *)v14 + v8) = v9;
    }
    ++v5;
    a2 += 12;
  }
  while (v5 != 3);
  v10 = CFArrayCreate(a1, (const void **)v14, 9, MEMORY[0x1E0C9B378]);
  for (j = 0; j != 72; j += 8)
  {
    v12 = *(const void **)((char *)v14 + j);
    if (v12)
      CFRelease(v12);
  }
  return v10;
}

uint64_t FPSupport_CreateDestinationPixelBufferAttributes(int a1, int a2, char *valuePtr, int a4, char a5, int a6, int a7, int a8, int a9, CFDictionaryRef *a10)
{
  int v12;
  char v13;
  char *v14;
  CFAllocatorRef *v17;
  CFIndex v18;
  unint64_t v19;
  const __CFAllocator *v20;
  CFIndex v21;
  uint64_t v22;
  CFArrayRef v23;
  uint64_t i;
  const void *v25;
  CFTypeRef *v26;
  CFDictionaryRef v27;
  uint64_t PixelBufferAttributesWithIOSurfaceSupport;
  uint64_t v29;
  void **v30;
  int v34;
  int v35;
  int v36;
  int valuePtra;
  void *v38[2];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  void *keys[2];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  void *values[2];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  v12 = a6;
  v13 = a5;
  v14 = valuePtr;
  v58 = *MEMORY[0x1E0C80C00];
  v36 = a2;
  valuePtra = a1;
  v34 = a8;
  v35 = a7;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  *(_OWORD *)keys = 0u;
  v40 = 0u;
  v41 = 0u;
  *(_OWORD *)v38 = 0u;
  v39 = 0u;
  v17 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (a4 == 1)
  {
    keys[0] = *(void **)MEMORY[0x1E0CA9040];
    v38[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, valuePtr);
    v18 = 1;
    if (!a1)
      goto LABEL_15;
    goto LABEL_14;
  }
  if (a4 < 2)
  {
    v18 = 0;
    if (!a1)
      goto LABEL_15;
    goto LABEL_14;
  }
  v19 = 0;
  keys[0] = *(void **)MEMORY[0x1E0CA9040];
  v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v56 = 0uLL;
  v57 = 0uLL;
  v54 = 0uLL;
  v55 = 0uLL;
  v52 = 0uLL;
  v53 = 0uLL;
  v50 = 0uLL;
  v51 = 0uLL;
  *(_OWORD *)values = 0uLL;
  v49 = 0uLL;
  v21 = a4;
  v22 = 8 * a4;
  do
  {
    values[v19 / 8] = CFNumberCreate(v20, kCFNumberSInt32Type, v14);
    v19 += 8;
    v14 += 4;
  }
  while (v22 != v19);
  v23 = CFArrayCreate(v20, (const void **)values, v21, MEMORY[0x1E0C9B378]);
  for (i = 0; i != v21; ++i)
  {
    v25 = values[i];
    if (v25)
      CFRelease(v25);
  }
  v38[0] = v23;
  v18 = 1;
  v13 = a5;
  v12 = a6;
  v17 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (a1)
  {
LABEL_14:
    *(_QWORD *)((unint64_t)keys | (8 * v18)) = *MEMORY[0x1E0CA90E0];
    *(_QWORD *)((unint64_t)v38 & 0xFFFFFFFFFFFFFFF7 | (8 * (v18++ & 1))) = CFNumberCreate(*v17, kCFNumberIntType, &valuePtra);
  }
LABEL_15:
  if (a2)
  {
    keys[v18] = (void *)*MEMORY[0x1E0CA8FD8];
    v38[v18++] = CFNumberCreate(*v17, kCFNumberIntType, &v36);
  }
  v26 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  if ((v13 & 1) != 0)
  {
    keys[v18] = (void *)*MEMORY[0x1E0CA9020];
    v38[v18++] = (void *)CFRetain(*v26);
  }
  if (a7 >= 2)
  {
    keys[v18] = (void *)*MEMORY[0x1E0CA9048];
    v38[v18++] = CFNumberCreate(*v17, kCFNumberSInt32Type, &v35);
  }
  if (a8 >= 2)
  {
    keys[v18] = (void *)*MEMORY[0x1E0CA8F68];
    v38[v18++] = CFNumberCreate(*v17, kCFNumberSInt32Type, &v34);
  }
  if ((v13 & 2) != 0)
  {
    keys[v18] = (void *)*MEMORY[0x1E0CA9000];
    v38[v18++] = (void *)*v26;
  }
  v27 = CFDictionaryCreate(*v17, (const void **)keys, (const void **)v38, v18, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v12)
  {
    values[0] = 0;
    PixelBufferAttributesWithIOSurfaceSupport = FigCreatePixelBufferAttributesWithIOSurfaceSupport();
    if ((_DWORD)PixelBufferAttributesWithIOSurfaceSupport)
    {
      v29 = PixelBufferAttributesWithIOSurfaceSupport;
      if (!v18)
        goto LABEL_35;
      goto LABEL_31;
    }
    if (v27)
      CFRelease(v27);
    v27 = (CFDictionaryRef)values[0];
  }
  v29 = 0;
  *a10 = v27;
  v27 = 0;
  if (!v18)
    goto LABEL_35;
LABEL_31:
  v30 = v38;
  do
  {
    if (*v30)
      CFRelease(*v30);
    ++v30;
    --v18;
  }
  while (v18);
LABEL_35:
  if (v27)
    CFRelease(v27);
  return v29;
}

void FPSupport_EnsureCAImageQueue(CFTypeRef *a1, _DWORD *a2, int a3, int a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *Context;
  uint64_t v13;
  uint64_t v14;

  v8 = (void *)MEMORY[0x19403137C]();
  if (*a1)
  {
    if (CAImageQueueGetWidth() != a3 || CAImageQueueGetHeight() != a4)
      CAImageQueueSetSize();
  }
  else
  {
    CFPreferencesGetAppIntegerValue(CFSTR("caiq_capacity"), CFSTR("com.apple.coremedia"), 0);
    v9 = CAImageQueueCreate();
    if (*a1)
      CFRelease(*a1);
    *a1 = (CFTypeRef)v9;
    if (v9)
    {
      v10 = CAImageQueueSetFlags();
      if (a2)
      {
        v11 = (void *)MEMORY[0x19403137C](v10);
        Context = (void *)fpSupport_getContext();
        objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
        if (!pthread_main_np())
          objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
        v13 = *a2;
        if (!(_DWORD)v13)
        {
          v14 = objc_msgSend(Context, "createSlot");
          *a2 = v14;
          if ((_DWORD)v14)
          {
            v13 = v14;
          }
          else if (objc_msgSend(Context, "valid"))
          {
            v13 = *a2;
          }
          else
          {
            Context = (void *)fpSupport_getContext();
            v13 = objc_msgSend(Context, "createSlot");
            *a2 = v13;
          }
        }
        objc_msgSend(Context, "setObject:forSlot:", *a1, v13);
        objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
        objc_msgSend(MEMORY[0x1E0CD28B0], "synchronize");
        objc_autoreleasePoolPop(v11);
      }
    }
  }
  objc_autoreleasePoolPop(v8);
}

uint64_t fpSupport_getContext()
{
  void *v0;
  const void *v1;
  const void *v2;

  v0 = (void *)MEMORY[0x19403137C]();
  if (fpSupport_getContext_onceToken != -1)
    dispatch_once(&fpSupport_getContext_onceToken, &__block_literal_global_142);
  MEMORY[0x19402EEEC](fpSupport_getContext_contextMutex);
  if (fpSupport_getContext_sContext)
  {
    objc_msgSend(MEMORY[0x1E0CD28B0], "synchronize");
    if ((objc_msgSend((id)fpSupport_getContext_sContext, "valid") & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
      if (!pthread_main_np())
        objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
      CFRelease((CFTypeRef)fpSupport_getContext_sContext);
      fpSupport_getContext_sContext = 0;
      objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
    }
    v1 = (const void *)fpSupport_getContext_sContext;
    if (fpSupport_getContext_sContext)
      goto LABEL_14;
  }
  v2 = (const void *)(CARenderServerIsRunning()
                    ? objc_msgSend(MEMORY[0x1E0CD2720], "localContext")
                    : objc_msgSend(MEMORY[0x1E0CD2720], "remoteContext"));
  fpSupport_getContext_sContext = (uint64_t)v2;
  if (v2)
  {
    CFRetain(v2);
    v1 = (const void *)fpSupport_getContext_sContext;
    if (fpSupport_getContext_sContext)
    {
LABEL_14:
      CFRetain(v1);
      CFAutorelease((CFTypeRef)fpSupport_getContext_sContext);
    }
  }
  MEMORY[0x19402EF04](fpSupport_getContext_contextMutex);
  objc_autoreleasePoolPop(v0);
  return fpSupport_getContext_sContext;
}

uint64_t FigVideoRenderPipelineCreateWithLKImageQueue(const __CFAllocator *a1, int a2, const void *a3, uint64_t a4, const void *a5, const __CFDictionary *a6, _QWORD *a7)
{
  const __CFArray *v12;
  int v13;
  uint64_t v14;
  void *values;

  values = 0;
  FigImageQueueCreateForCoreAnimation(0, a5, &values);
  v12 = CFArrayCreate(a1, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
  v14 = FigVideoRenderPipelineCreateWithFigImageQueueArray(a1, a2, a3, 0, v13, v12, 0, a6, a7);
  if (v12)
    CFRelease(v12);
  if (values)
    CFRelease(values);
  return v14;
}

uint64_t FigImageQueueCreateForCoreAnimation(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t DerivedStorage;
  uint64_t v8;
  _DWORD *v9;
  const __CFAllocator *v10;
  CFMutableDictionaryRef Mutable;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  dispatch_queue_t v19;
  uint64_t AdoptedVoucherProcessIDAndUUIDString;
  pid_t v21;
  int CFPreferenceNumberWithDefault;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CMTime v24;
  __int128 v25;
  _BYTE v26[21];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  FigKTraceInit();
  if (a3)
  {
    FigImageQueueGetClassID();
    v5 = CMDerivedObjectCreate();
    if ((_DWORD)v5)
      return v5;
    MEMORY[0x19402F294](&sPIQCACreateRegistrationDictionaryMutexOnce, piqca_createRegistrationDictionaryMutex);
    MEMORY[0x19402F294](&sCAImageQueueSetEDRDeadlineMutexOnce, piqca_loadCAImageQueueSetEDRDeadline);
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v8 = FigOSTransactionCreate();
    *(_QWORD *)(DerivedStorage + 2864) = v8;
    if (!v8)
      return FigSignalErrorAt();
    *(_QWORD *)(DerivedStorage + 8) = FigSimpleMutexCreate();
    v9 = malloc_type_calloc(0x18uLL, 1uLL, 0xFA268657uLL);
    *(_QWORD *)(DerivedStorage + 16) = v9;
    *(_QWORD *)v9 = 0;
    v9[4] = 1;
    *(_QWORD *)(*(_QWORD *)(DerivedStorage + 16) + 8) = FigSimpleMutexCreate();
    *(_QWORD *)(DerivedStorage + 2776) = FigSimpleMutexCreate();
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B3A0]);
    *(_QWORD *)(DerivedStorage + 120) = Mutable;
    if (!Mutable)
      return FigSignalErrorAt();
    v12 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 120), 0, v12);
    *(_QWORD *)DerivedStorage = a2;
    CFRetain(a2);
    *(_BYTE *)(DerivedStorage + 49) = 1;
    *(_WORD *)(DerivedStorage + 137) = 0;
    *(_QWORD *)(DerivedStorage + 212) = 0x100000001;
    *(_DWORD *)(DerivedStorage + 56) = 0;
    CAImageQueueSetFlags();
    *(_BYTE *)(DerivedStorage + 88) = 0;
    *(_QWORD *)(DerivedStorage + 96) = 0x404E000000000000;
    *(_DWORD *)(DerivedStorage + 2880) = 4;
    *(_BYTE *)(DerivedStorage + 2884) = 0;
    CAImageQueueSetEnhancementMode();
    v13 = CAImageQueueSetFlags();
    if (defaultDisableColorMatching_alreadyChecked == 1)
    {
      if (!defaultDisableColorMatching_result)
      {
LABEL_13:
        if (defaultEnableDisplayTracking_alreadyChecked == 1)
        {
          if (!defaultEnableDisplayTracking_result)
          {
LABEL_18:
            FigBytePumpGetFigBaseObject(v13);
            *(_BYTE *)(DerivedStorage + 132) = 1;
            *(_BYTE *)(DerivedStorage + 2920) = 0;
            *(_QWORD *)(DerivedStorage + 2928) = FigDispatchQueueCreateWithPriority();
            if (piqca_getSharedPollingThreadContext_initSharedPollingThreadOnce != -1)
              dispatch_once_f(&piqca_getSharedPollingThreadContext_initSharedPollingThreadOnce, &piqca_getSharedPollingThreadContext_sharedPollingContext, (dispatch_function_t)piqca_initSharedPollingThread);
            v14 = FigCFWeakReferenceHolderCreateWithReferencedObject();
            if (v14)
            {
              v15 = (const void *)v14;
              MEMORY[0x19402EEEC](qword_1EE2A0180);
              CFDictionarySetValue((CFMutableDictionaryRef)qword_1EE2A0188, 0, v15);
              MEMORY[0x19402EF04](qword_1EE2A0180);
              CFRelease(v15);
            }
            else
            {
              FigSignalErrorAt();
            }
            piqca_WakeupSharedPollingThread();
            v16 = FigImageQueueDisplayCountHistory_Create((uint64_t *)(DerivedStorage + 2848));
            if (!(_DWORD)v16)
            {
              FigImageQueueDisplayCountHistory_StartTracingDisplayCount(*(_QWORD *)(DerivedStorage + 2848), 0, "imagequeue");
              v17 = FigSimpleMutexCreate();
              *(_QWORD *)(DerivedStorage + 3048) = v17;
              if (v17)
              {
                v18 = FigSimpleMutexCreate();
                *(_QWORD *)(DerivedStorage + 3024) = v18;
                if (v18)
                {
                  v19 = dispatch_queue_create("com.apple.coremedia.fiq4ca.notificationQueue", 0);
                  *(_QWORD *)(DerivedStorage + 3072) = v19;
                  if (v19)
                  {
                    *(_DWORD *)(DerivedStorage + 2456) = 0;
                    *(_QWORD *)(DerivedStorage + 2896) = 0x41CDCD6500000000;
                    *(_DWORD *)(DerivedStorage + 2888) = 0;
                    *(_QWORD *)(DerivedStorage + 2912) = 0;
                    *(_QWORD *)(DerivedStorage + 2904) = 0;
                    v25 = 0u;
                    memset(v26, 0, sizeof(v26));
                    AdoptedVoucherProcessIDAndUUIDString = FigDebugGetAdoptedVoucherProcessIDAndUUIDString();
                    v21 = AdoptedVoucherProcessIDAndUUIDString;
                    *(_QWORD *)(DerivedStorage + 3008) = CFStringCreateWithFormat(v10, 0, CFSTR("com.apple.coremedia.iq.ca.client%d"), AdoptedVoucherProcessIDAndUUIDString);
                    *(_BYTE *)(DerivedStorage + 3016) = 1;
                    CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
                    CMTimeMake(&v24, CFPreferenceNumberWithDefault, 1000);
                    *(CMTime *)(DerivedStorage + 224) = v24;
                    *(_DWORD *)(DerivedStorage + 248) = FigGetCFPreferenceNumberWithDefault();
                    *(_QWORD *)(DerivedStorage + 2464) = FigSimpleMutexCreate();
                    if (v21 <= 0)
                      v21 = getpid();
                    *(_DWORD *)(DerivedStorage + 2480) = v21;
                    FigServer_CopyProcessName();
                    if (dword_1EE2A0160)
                    {
                      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                      fig_log_call_emit_and_clean_up_after_send_and_compose();
                    }
                    v5 = 0;
                    *a3 = 0;
                    if (!v12)
                      return v5;
LABEL_31:
                    CFRelease(v12);
                    return v5;
                  }
                }
              }
              v16 = FigSignalErrorAt();
            }
            v5 = v16;
            if (!v12)
              return v5;
            goto LABEL_31;
          }
        }
        else
        {
          v13 = FigGetCFPreferenceNumberWithDefault();
          defaultEnableDisplayTracking_result = v13;
          defaultEnableDisplayTracking_alreadyChecked = 1;
          if (!(_BYTE)v13)
            goto LABEL_18;
        }
        v13 = CAImageQueueSetFlags();
        goto LABEL_18;
      }
    }
    else
    {
      v13 = MGGetBoolAnswer();
      defaultDisableColorMatching_result = v13 ^ 1;
      defaultDisableColorMatching_alreadyChecked = 1;
      if (v13 == 1)
        goto LABEL_13;
    }
    v13 = CAImageQueueSetFlags();
    goto LABEL_13;
  }
  return FigSignalErrorAt();
}

uint64_t FigImageQueueGetClassID()
{
  MEMORY[0x19402F294](&FigImageQueueGetClassID_sRegisterFigImageQueueTypeOnce, RegisterFigImageQueueType);
  return sFigImageQueueClassID;
}

uint64_t RegisterFigImageQueueType()
{
  CMBaseGetClassID();
  FigBaseClassRegisterClass();
  fig_note_initialize_category_with_default_work_cf();
  return fig_note_initialize_category_with_default_work_cf();
}

uint64_t VMC2CreateWithQueues(const __CFAllocator *a1, const opaqueCMFormatDescription *a2, const void *a3, const void *a4, const void *a5, const void *a6, uint64_t a7, void *a8, uint64_t a9, __int128 *a10, const void *a11, const void *a12, const __CFDictionary *a13, uint64_t *a14)
{
  const __CFAllocator *v17;
  const CFArrayCallBacks *v18;
  const __CFArray *v19;
  const __CFArray *v20;
  uint64_t v21;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  void *values;

  values = a8;
  v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v18 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  v19 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 1, MEMORY[0x1E0C9B378]);
  v20 = CFArrayCreate(v17, MEMORY[0x1E0C9B0D0], 1, v18);
  v29 = *(_OWORD *)a9;
  v30 = *(_QWORD *)(a9 + 16);
  v27 = *a10;
  v28 = *((_QWORD *)a10 + 2);
  v21 = VMC2CreateWithQueues2(a1, a2, a3, a4, a5, a6, a7, v19, v20, &v29, (uint64_t)&v27, a11, a12, a13, a14);
  CFRelease(v19);
  CFRelease(v20);
  return v21;
}

uint64_t FigSampleBufferProviderCreateForBufferQueue(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  uint64_t v5;
  uint64_t DerivedStorage;
  opaqueCMBufferQueue *v8;
  CMTimeEpoch v9;
  uint64_t v10;
  opaqueCMBufferQueue *v11;
  __int128 v12;
  CMTime time;
  CFTypeRef cf;

  cf = 0;
  if (!a2 || !a3)
    return FigSignalErrorAt();
  FigSampleBufferProviderGetClassID();
  v5 = CMDerivedObjectCreate();
  if ((_DWORD)v5)
    goto LABEL_4;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 8) = a2;
  CFRetain(a2);
  *(_QWORD *)(DerivedStorage + 32) = FigSimpleMutexCreate();
  *(_BYTE *)(DerivedStorage + 40) = 0;
  v8 = *(opaqueCMBufferQueue **)(DerivedStorage + 8);
  v12 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&time.value = *MEMORY[0x1E0CA2E68];
  v9 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  time.epoch = v9;
  v10 = CMBufferQueueInstallTrigger(v8, (CMBufferQueueTriggerCallback)sbp_bq_minOrMaxPTSChanged_orEndOfDataReached, (void *)cf, 8, &time, (CMBufferQueueTriggerToken *)(DerivedStorage + 16));
  if ((_DWORD)v10)
    goto LABEL_15;
  v11 = *(opaqueCMBufferQueue **)(DerivedStorage + 8);
  *(_OWORD *)&time.value = v12;
  time.epoch = v9;
  v10 = CMBufferQueueInstallTrigger(v11, (CMBufferQueueTriggerCallback)sbp_bq_dataBecameReady, (void *)cf, 7, &time, (CMBufferQueueTriggerToken *)(DerivedStorage + 24));
  if ((_DWORD)v10
    || (CMNotificationCenterGetDefaultLocalCenter(), v10 = CMNotificationCenterAddListener(), (_DWORD)v10)
    || (CMNotificationCenterGetDefaultLocalCenter(), v10 = CMNotificationCenterAddListener(), (_DWORD)v10)
    || (CMNotificationCenterGetDefaultLocalCenter(), v10 = CMNotificationCenterAddListener(), (_DWORD)v10))
  {
LABEL_15:
    v5 = v10;
LABEL_4:
    if (cf)
      CFRelease(cf);
    return v5;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  v5 = CMNotificationCenterAddListener();
  if ((_DWORD)v5)
    goto LABEL_4;
  *a3 = cf;
  return v5;
}

uint64_t FigSampleBufferProviderGetClassID()
{
  MEMORY[0x19402F294](&FigSampleBufferProviderGetClassID_sRegisterFigSampleBufferProviderTypeOnce, RegisterFigSampleBufferProviderType);
  return sFigSampleBufferProviderClassID;
}

uint64_t RegisterFigSampleBufferProviderType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigActivitySchedulerCreateForNewThread(uint64_t a1, int a2, void *a3, _QWORD *a4)
{
  const __CFAllocator *v7;
  uint64_t v8;
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CFDictionaryRef v13;
  uint64_t v14;
  void *values;

  values = a3;
  if (!a4)
    return FigSignalErrorAt();
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  FigActivitySchedulerGetClassID();
  v8 = CMDerivedObjectCreate();
  if ((_DWORD)v8)
    return v8;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 48) = v10;
  if (v10
    && (v11 = FigSemaphoreCreate(), (*(_QWORD *)(DerivedStorage + 24) = v11) != 0)
    && (v12 = FigSimpleMutexCreate(), (*(_QWORD *)(DerivedStorage + 16) = v12) != 0))
  {
    if (!a3)
      values = CFSTR("com.apple.coremedia.activityscheduler");
    v13 = CFDictionaryCreate(v7, MEMORY[0x1E0CA52C8], (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *(_DWORD *)(DerivedStorage + 60) = a2;
    v14 = FigThreadCreate();
    if (!(_DWORD)v14)
      *a4 = 0;
    if (v13)
      CFRelease(v13);
  }
  else
  {
    v14 = 4294954510;
    FigSignalErrorAt();
  }
  return v14;
}

uint64_t FigActivitySchedulerGetClassID()
{
  MEMORY[0x19402F294](&FigActivitySchedulerGetClassID_sRegisterFigActivitySchedulerTypeOnce, RegisterFigActivitySchedulerType);
  return sFigActivitySchedulerClassID;
}

uint64_t RegisterFigActivitySchedulerType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t VMC2CreateWithCallbacks(int a1, const opaqueCMFormatDescription *a2, const void *a3, const void *a4, const void *a5, const void *a6, __int128 *a7, uint64_t a8, CFTypeRef cf, uint64_t a10, __int128 *a11, const void *a12, const void *a13, const __CFDictionary *a14, uint64_t *a15)
{
  uint64_t Instance;
  uint64_t v23;
  CFTypeRef v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_QWORD);
  void (*v28)(_QWORD);
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  CFNumberRef v38;
  const void *v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, void (*)(uint64_t), uint64_t);
  uint64_t v42;
  CFTypeRef v43;
  uint64_t v44;
  const void *Value;
  const void *v46;
  const void *v47;
  CFTypeRef v48;
  NSObject *v49;
  int AdoptedVoucherProcessIDAndUUIDString;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const opaqueCMFormatDescription *v52;
  _DWORD valuePtr[32];
  __int128 v54;
  _BYTE v55[21];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (!a6)
    goto LABEL_27;
  if (!a8)
  {
    v26 = FigSignalErrorAt();
    v23 = 0;
    if (!a7)
      goto LABEL_35;
    goto LABEL_33;
  }
  if (!*(_QWORD *)(a8 + 16)
    || !*(_QWORD *)(a8 + 24)
    || !*(_QWORD *)(a8 + 32)
    || !*(_QWORD *)(a8 + 40)
    || !*(_QWORD *)(a8 + 48)
    || !*(_QWORD *)(a8 + 56)
    || !*(_QWORD *)(a8 + 64)
    || !*(_QWORD *)(a8 + 72)
    || !*(_QWORD *)(a8 + 88)
    || !a12
    || !a15
    || (MEMORY[0x19402F294](&sRegisterVMCTypeOnce, RegisterVMC2Type), (Instance = _CFRuntimeCreateInstance()) == 0))
  {
LABEL_27:
    v26 = FigSignalErrorAt();
    v23 = 0;
    goto LABEL_28;
  }
  v23 = Instance;
  v24 = cf;
  if (cf)
    v24 = CFRetain(cf);
  *(_QWORD *)(v23 + 256) = v24;
  vmc2SetVideoFormatDescription(v23, a2);
  *(_QWORD *)(v23 + 48) = a4;
  if (a4)
    CFRetain(a4);
  *(_QWORD *)(v23 + 56) = a5;
  if (a5)
    CFRetain(a5);
  *(_QWORD *)(v23 + 88) = a6;
  CFRetain(a6);
  *(_QWORD *)(v23 + 800) = 0;
  vmc2UpdateDisplayMode(v23);
  CMNotificationCenterGetDefaultLocalCenter();
  v25 = CMNotificationCenterAddListener();
  if ((_DWORD)v25)
    goto LABEL_26;
  CMNotificationCenterGetDefaultLocalCenter();
  v25 = CMNotificationCenterAddListener();
  if ((_DWORD)v25
    || (CMNotificationCenterGetDefaultLocalCenter(), v25 = CMNotificationCenterAddListener(), (_DWORD)v25)
    || (CMNotificationCenterGetDefaultLocalCenter(), v25 = CMNotificationCenterAddListener(), (_DWORD)v25)
    || (CMNotificationCenterGetDefaultLocalCenter(),
        FPSupport_GetDisplayVideoRangeNotificationSingleton(),
        v25 = CMNotificationCenterAddListener(),
        (_DWORD)v25))
  {
LABEL_26:
    v26 = v25;
LABEL_28:
    if (a8)
    {
      if ((_DWORD)v26)
      {
        v27 = *(void (**)(_QWORD))(a8 + 72);
        if (v27)
          v27(*(_QWORD *)(a8 + 8));
      }
    }
    if (!a7)
    {
LABEL_35:
      if (v23)
      {
LABEL_36:
        CFRelease((CFTypeRef)v23);
        return v26;
      }
      return v26;
    }
LABEL_33:
    v28 = (void (*)(_QWORD))*((_QWORD *)a7 + 3);
    if (v28)
      v28(*((_QWORD *)a7 + 1));
    goto LABEL_35;
  }
  if (a7)
  {
    v30 = *a7;
    v31 = a7[1];
    *(_QWORD *)(v23 + 128) = *((_QWORD *)a7 + 4);
    *(_OWORD *)(v23 + 96) = v30;
    *(_OWORD *)(v23 + 112) = v31;
  }
  *(_QWORD *)(v23 + 136) = FigReadWriteLockCreate();
  v32 = *(_OWORD *)(a8 + 16);
  *(_OWORD *)(v23 + 144) = *(_OWORD *)a8;
  *(_OWORD *)(v23 + 160) = v32;
  v33 = *(_OWORD *)(a8 + 32);
  v34 = *(_OWORD *)(a8 + 48);
  v35 = *(_OWORD *)(a8 + 80);
  *(_OWORD *)(v23 + 208) = *(_OWORD *)(a8 + 64);
  *(_OWORD *)(v23 + 224) = v35;
  *(_OWORD *)(v23 + 176) = v33;
  *(_OWORD *)(v23 + 192) = v34;
  *(_WORD *)(v23 + 248) = 256;
  *(_QWORD *)(v23 + 240) = 0;
  v36 = *a11;
  *(_QWORD *)(v23 + 512) = *((_QWORD *)a11 + 2);
  *(_OWORD *)(v23 + 496) = v36;
  v37 = *(_QWORD *)(a10 + 16);
  *(_OWORD *)(v23 + 472) = *(_OWORD *)a10;
  *(_QWORD *)(v23 + 488) = v37;
  *(_QWORD *)(v23 + 264) = a12;
  CFRetain(a12);
  valuePtr[0] = 0;
  v38 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, valuePtr);
  FigActivitySchedulerSetProperty(*(_QWORD *)(v23 + 264), (uint64_t)CFSTR("ClientPID"), (uint64_t)v38);
  CFRelease(v38);
  v39 = (const void *)*MEMORY[0x1E0C9AE40];
  FigActivitySchedulerSetProperty(*(_QWORD *)(v23 + 264), (uint64_t)CFSTR("ThrottleForBackground"), *MEMORY[0x1E0C9AE40]);
  v40 = *(_QWORD *)(v23 + 264);
  v41 = *(uint64_t (**)(uint64_t, void (*)(uint64_t), uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 8);
  if (!v41)
  {
    v26 = 4294954514;
    goto LABEL_36;
  }
  v42 = v41(v40, vmc2DecodeUntilHighWaterMet, v23);
  if ((_DWORD)v42)
    goto LABEL_62;
  v43 = a13;
  *(_BYTE *)(v23 + 272) = 1;
  v44 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)(v23 + 392) = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(v23 + 408) = *(_QWORD *)(v44 + 16);
  if (a13)
    v43 = CFRetain(a13);
  *(_QWORD *)(v23 + 584) = v43;
  *(_WORD *)(v23 + 857) = 1;
  *(_WORD *)(v23 + 861) = 0;
  *(_BYTE *)(v23 + 863) = 1;
  if (a14)
  {
    LOBYTE(valuePtr[0]) = 0;
    Value = CFDictionaryGetValue(a14, CFSTR("SharePixelBufferPool"));
    *(_QWORD *)(v23 + 976) = Value;
    if (Value)
      CFRetain(Value);
    v46 = CFDictionaryGetValue(a14, CFSTR("AllowClientProcessDecode"));
    *(_QWORD *)(v23 + 984) = v46;
    if (v46)
      CFRetain(v46);
    *(_BYTE *)(v23 + 857) = CFDictionaryGetValue(a14, CFSTR("RealTime")) != v39;
    FigCFDictionaryGetBooleanIfPresent();
    *(_BYTE *)(v23 + 858) = valuePtr[0];
    FigCFDictionaryGetBooleanIfPresent();
    *(_BYTE *)(v23 + 859) = 0;
    FigCFDictionaryGetBooleanIfPresent();
    *(_BYTE *)(v23 + 860) = 0;
    FigCFDictionaryGetInt32IfPresent();
    v47 = CFDictionaryGetValue(a14, CFSTR("LoggingIdentifier"));
    *(_QWORD *)(v23 + 848) = v47;
    if (v47)
      CFRetain(v47);
    FigCFDictionaryGetBooleanIfPresent();
  }
  if (a3)
    v48 = CFRetain(a3);
  else
    v48 = 0;
  *(_QWORD *)(v23 + 24) = v48;
  if (*(_QWORD *)(v23 + 32))
  {
    if (!*(_BYTE *)(v23 + 40))
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(v23 + 72));
      v26 = vmc2BuildDecompressionSession(v23);
      MEMORY[0x19402EF04](*(_QWORD *)(v23 + 72));
      if ((_DWORD)v26)
        goto LABEL_36;
    }
  }
  v42 = VTPixelBufferConformerCreateWithAttributes();
  if ((_DWORD)v42
    || (v49 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(v23 + 816)),
        *(_QWORD *)(v23 + 824) = v49,
        dispatch_source_set_timer(v49, 0, 0x3B9ACA00uLL, 0x1DCD6500uLL),
        dispatch_set_context(*(dispatch_object_t *)(v23 + 824), (void *)v23),
        dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v23 + 824), (dispatch_function_t)vmc2UpdateExternalProtectionStatus), *(_QWORD *)(v23 + 1392) = voucher_copy(), v42 = vmc2InvokeOutputCallback_InstallOccupancyChangedCallback(v23), (_DWORD)v42))
  {
LABEL_62:
    v26 = v42;
    goto LABEL_36;
  }
  v54 = 0u;
  memset(v55, 0, sizeof(v55));
  AdoptedVoucherProcessIDAndUUIDString = FigDebugGetAdoptedVoucherProcessIDAndUUIDString();
  *(_DWORD *)(v23 + 1176) = AdoptedVoucherProcessIDAndUUIDString;
  if (AdoptedVoucherProcessIDAndUUIDString <= 0)
    *(_DWORD *)(v23 + 1176) = getpid();
  if (dword_1EE29F468)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v52 = *(const opaqueCMFormatDescription **)(v23 + 32);
  if (v52)
    *(_DWORD *)(v23 + 1180) = CMFormatDescriptionGetMediaSubType(v52);
  v26 = 0;
  *a15 = v23;
  return v26;
}

uint64_t RegisterVMC2Type()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sVMC2ID = result;
  return result;
}

uint64_t vmc2Init(uint64_t a1)
{
  int CFPreferenceNumberWithDefault;
  uint64_t result;
  CMTime v4;

  bzero((void *)(a1 + 16), 0x5C8uLL);
  *(_QWORD *)(a1 + 280) = FigReentrantMutexCreate();
  *(_QWORD *)(a1 + 296) = FigSimpleMutexCreate();
  *(_QWORD *)(a1 + 304) = FigSemaphoreCreate();
  *(_QWORD *)(a1 + 632) = FigSimpleMutexCreate();
  *(_QWORD *)(a1 + 536) = FigSimpleMutexCreate();
  *(_QWORD *)(a1 + 776) = FigSimpleMutexCreate();
  *(_QWORD *)(a1 + 72) = FigSimpleMutexCreate();
  *(_QWORD *)(a1 + 1480) = FigSimpleMutexCreate();
  *(_QWORD *)(a1 + 448) = dispatch_queue_create("com.apple.coremedia.videomediaconverter.inbound", 0);
  *(_QWORD *)(a1 + 464) = dispatch_queue_create("com.apple.coremedia.videomediaconverter.outbound", 0);
  *(_QWORD *)(a1 + 456) = FigDispatchQueueCreateWithPriority();
  *(_QWORD *)(a1 + 816) = dispatch_queue_create("com.apple.coremedia.videomediaconverter.cpec", 0);
  FigDispatchQueueSetPriorityAndClientPID();
  *(_QWORD *)(a1 + 824) = 0;
  *(_BYTE *)(a1 + 832) = 0;
  *(_DWORD *)(a1 + 836) = 1;
  *(_QWORD *)(a1 + 704) = FigSimpleMutexCreate();
  *(_QWORD *)(a1 + 968) = dispatch_queue_create("com.apple.coremedia.videomediaconverter.filter", 0);
  *(_OWORD *)(a1 + 872) = *MEMORY[0x1E0C9D820];
  *(_BYTE *)(a1 + 624) = 1;
  *(_QWORD *)(a1 + 576) = FigSimpleMutexCreate();
  *(_DWORD *)(a1 + 792) = 1;
  *(_QWORD *)(a1 + 1160) = FigSimpleMutexCreate();
  CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  CMTimeMake(&v4, CFPreferenceNumberWithDefault, 1000);
  *(CMTime *)(a1 + 1420) = v4;
  result = FigGetCFPreferenceNumberWithDefault();
  *(_DWORD *)(a1 + 1444) = result;
  return result;
}

uint64_t activityOnThread_setProcessingCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  _QWORD *v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v7 = (_QWORD *)DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 48));
  v7[4] = a3;
  v7[5] = a2;
  MEMORY[0x19402EF04](v7[6]);
  return 0;
}

uint64_t activitySchedulerOnThread(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  while (!*(_BYTE *)(a1 + 57))
  {
    if (*(_BYTE *)(a1 + 56))
    {
      v2 = MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 48));
      if (*(_QWORD *)(a1 + 40))
      {
        v3 = (void *)MEMORY[0x19403137C](v2);
        (*(void (**)(_QWORD))(a1 + 40))(*(_QWORD *)(a1 + 32));
        objc_autoreleasePoolPop(v3);
      }
      MEMORY[0x19402EF04](*(_QWORD *)(a1 + 48));
    }
    FigSemaphoreWaitRelative();
  }
  return 0;
}

uint64_t VMC2Go(uint64_t a1)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  if (*(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  ++*(_DWORD *)(a1 + 524);
  vmc2ResetTroubleMonitorTimers(a1);
  *(_BYTE *)(a1 + 288) = 1;
  FigMemoryBarrier();
  v3 = *(_QWORD *)(a1 + 264);
  v4 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v4)
    v4(v3);
  return 0;
}

uint64_t activityOnThread_triggerScheduling()
{
  _BYTE *DerivedStorage;
  _BYTE *v2;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
    return FigSignalErrorAt();
  v2 = DerivedStorage;
  DerivedStorage[56] = 1;
  FigMemoryBarrier();
  if (*((_QWORD *)v2 + 3))
    FigSemaphoreSignal();
  return 0;
}

uint64_t figVideoRenderPipelineSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  _BYTE *DerivedStorage;
  _BYTE *v7;
  CFTypeID TypeID;
  uint64_t v10;
  CFTypeID v11;
  const __CFArray *v12;
  CFIndex Count;
  CFIndex v14;
  CFIndex i;
  const void *ValueAtIndex;
  float v17;
  void (*v18)(const void *, float);
  CFTypeID v19;
  CFTypeID v20;
  CFTypeID v21;
  uint64_t v22;
  __CFString **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, __CFString *, const void *);
  __CFString **v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, const __CFString *, const void *);
  uint64_t v30;
  CFTypeID v31;
  CFTypeID v32;
  int Value;
  uint64_t v34;
  uint64_t v35;
  CFTypeID v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t);
  CFTypeID v41;
  const void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  CFTypeID v47;
  CFTypeID v48;
  int valuePtr;
  CFArrayRef theArray;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  theArray = 0;
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  if (*DerivedStorage)
    return FigSignalErrorAt();
  if (CFEqual(CFSTR("Timebase"), a2))
  {
    if (!a3 || (TypeID = CMTimebaseGetTypeID(), TypeID == CFGetTypeID(a3)))
    {
      videopipelineSetTimebase(a1, a3);
LABEL_8:
      v10 = 0;
      goto LABEL_143;
    }
    goto LABEL_141;
  }
  if (CFEqual(CFSTR("PrerollRate"), a2))
  {
    if (a3)
    {
      v11 = CFNumberGetTypeID();
      if (v11 == CFGetTypeID(a3))
      {
        valuePtr = 1065353216;
        CFNumberGetValue((CFNumberRef)a3, kCFNumberFloatType, &valuePtr);
        v12 = (const __CFArray *)*((_QWORD *)v7 + 5);
        if (v12)
        {
          Count = CFArrayGetCount(v12);
          if (Count >= 1)
          {
            v14 = Count;
            for (i = 0; i != v14; ++i)
            {
              ValueAtIndex = CFArrayGetValueAtIndex(*((CFArrayRef *)v7 + 5), i);
              v17 = *(float *)&valuePtr;
              v18 = *(void (**)(const void *, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
              if (v18)
                v18(ValueAtIndex, v17);
            }
          }
        }
        figVideoRenderPipelineCopyVideoImageQueueArray(a1, &theArray, 0);
      }
    }
    goto LABEL_141;
  }
  if (CFEqual(CFSTR("PreventDisplaySleepDuringVideoPlayback"), a2))
  {
    if (a3)
    {
      v19 = CFBooleanGetTypeID();
      if (v19 == CFGetTypeID(a3))
      {
        v7[80] = CFBooleanGetValue((CFBooleanRef)a3);
        goto LABEL_32;
      }
    }
LABEL_141:
    v24 = FigSignalErrorAt();
    goto LABEL_142;
  }
  if (CFEqual(CFSTR("VideoEnqueueResetsSystemSleepTimer"), a2))
  {
    if (a3)
    {
      v20 = CFBooleanGetTypeID();
      if (v20 == CFGetTypeID(a3))
        figVideoRenderPipelineCopyVideoImageQueueArray(a1, &theArray, 0);
    }
    goto LABEL_141;
  }
  if (CFEqual(CFSTR("CAImageQueueCaptionsMayAppearHint"), a2))
  {
    if (a3)
    {
      v21 = CFBooleanGetTypeID();
      if (v21 == CFGetTypeID(a3))
        figVideoRenderPipelineCopyVideoImageQueueArray(a1, &theArray, 0);
    }
    goto LABEL_141;
  }
  if (CFEqual(CFSTR("DurationAllowedForCachedVideoFrames"), a2))
  {
LABEL_32:
    FigImageQueueArraySetProperty();
    goto LABEL_8;
  }
  if (CFEqual(CFSTR("ObeyEmptyMediaMarkers"), a2))
  {
    v22 = *((_QWORD *)v7 + 2);
    if (!v22)
      goto LABEL_8;
    v23 = kVideoMediaConverter2Property_ObeyEmptyMediaMarkers;
    goto LABEL_36;
  }
  if (CFEqual(CFSTR("AttachmentCollectorMetadataSourceBuffers"), a2))
  {
    v25 = *((_QWORD *)v7 + 4);
    if (!v25)
      goto LABEL_141;
    v26 = *(uint64_t (**)(uint64_t, __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v26)
    {
      v27 = kFigSampleAttachmentCollectorProperty_MetadataSourceBufferQueues;
LABEL_41:
      v24 = v26(v25, *v27, a3);
      goto LABEL_142;
    }
    goto LABEL_103;
  }
  if (CFEqual(CFSTR("SampleAttachmentCollectionRules"), a2))
  {
    v28 = *((_QWORD *)v7 + 4);
    if (v28)
    {
      v29 = *(uint64_t (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 56);
      if (v29)
        v10 = v29(v28, CFSTR("SampleAttachmentCollectionRules"), a3);
      else
        v10 = 4294954514;
      v30 = *((_QWORD *)v7 + 2);
      if (v30)
        VMC2SetProperty(v30, CFSTR("CollectionRules"), a3);
      goto LABEL_143;
    }
    goto LABEL_141;
  }
  if (CFEqual(CFSTR("RenderEmptyMedia"), a2))
  {
    v22 = *((_QWORD *)v7 + 2);
    if (!v22)
      goto LABEL_8;
    v23 = kVideoMediaConverter2Property_RenderEmptyMedia;
    goto LABEL_36;
  }
  if (CFEqual(CFSTR("ClientPID"), a2))
  {
    if (!a3)
      goto LABEL_8;
    v31 = CFGetTypeID(a3);
    if (v31 != CFNumberGetTypeID())
      goto LABEL_8;
    valuePtr = 0;
    CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr);
    v10 = 0;
    if (valuePtr == *((_DWORD *)v7 + 1))
      goto LABEL_143;
    *((_DWORD *)v7 + 1) = valuePtr;
    videopipelineUpdateVideoPlaybackStateForClient();
    v22 = *((_QWORD *)v7 + 2);
    if (!v22)
      goto LABEL_8;
    v23 = kVideoMediaConverter2Property_ClientPID;
    goto LABEL_36;
  }
  if (CFEqual(CFSTR("ThrottleForBackground"), a2))
  {
    v22 = *((_QWORD *)v7 + 2);
    if (!v22)
      goto LABEL_8;
    v23 = kVideoMediaConverter2Property_ThrottleForBackground;
    goto LABEL_36;
  }
  if (CFEqual(CFSTR("FieldMode"), a2))
  {
    v22 = *((_QWORD *)v7 + 2);
    if (!v22)
      goto LABEL_8;
    v23 = kVideoMediaConverter2Property_FieldMode;
    goto LABEL_36;
  }
  if (CFEqual(CFSTR("AllowVideoQualityOfServiceAdjustments"), a2))
  {
    v22 = *((_QWORD *)v7 + 2);
    if (!v22)
      goto LABEL_8;
    v23 = kVideoMediaConverter2Property_AllowVideoQualityOfServiceAdjustments;
    goto LABEL_36;
  }
  if (CFEqual(CFSTR("VideoDecoderUsage"), a2))
  {
    v22 = *((_QWORD *)v7 + 2);
    if (!v22)
      goto LABEL_8;
    v23 = kVideoMediaConverter2Property_DecoderUsage;
    goto LABEL_36;
  }
  if (CFEqual(CFSTR("VideoDecoderPriority"), a2))
  {
    v22 = *((_QWORD *)v7 + 2);
    if (!v22)
      goto LABEL_8;
    v23 = kVideoMediaConverter2Property_DecoderPriority;
    goto LABEL_36;
  }
  if (CFEqual(CFSTR("VideoDecoderThreadCount"), a2))
  {
    v22 = *((_QWORD *)v7 + 2);
    if (!v22)
      goto LABEL_8;
    v23 = kVideoMediaConverter2Property_DecoderThreadCount;
    goto LABEL_36;
  }
  if (CFEqual(CFSTR("Suspended"), a2))
  {
    if (!a3)
      goto LABEL_141;
    v32 = CFBooleanGetTypeID();
    if (v32 != CFGetTypeID(a3))
      goto LABEL_141;
    Value = CFBooleanGetValue((CFBooleanRef)a3);
    v34 = *((_QWORD *)v7 + 2);
    if (v34)
    {
      v35 = Value ? VMC2Stop(v34) : VMC2Go(v34);
      v10 = v35;
      if ((_DWORD)v35)
        goto LABEL_143;
    }
    v38 = *((_QWORD *)v7 + 4);
    if (!v38)
      goto LABEL_8;
    v39 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    if (Value)
    {
      v40 = *(uint64_t (**)(uint64_t))(v39 + 32);
      if (!v40)
        goto LABEL_103;
    }
    else
    {
      v40 = *(uint64_t (**)(uint64_t))(v39 + 24);
      if (!v40)
        goto LABEL_103;
    }
    v24 = v40(v38);
    goto LABEL_142;
  }
  if (CFEqual(CFSTR("MaxAgeForOutputBufferPool"), a2))
  {
    if (a3)
    {
      v36 = CFNumberGetTypeID();
      if (v36 != CFGetTypeID(a3))
        goto LABEL_141;
    }
    v22 = *((_QWORD *)v7 + 2);
    if (!v22)
      goto LABEL_8;
    v23 = kVideoMediaConverter2Property_MaxAgeForOutputPixelBufferPool;
    goto LABEL_36;
  }
  if (CFEqual(CFSTR("VideoDecoderIsSecondary"), a2))
  {
    v22 = *((_QWORD *)v7 + 2);
    if (!v22)
      goto LABEL_8;
    v23 = kVideoMediaConverter2Property_VideoDecoderIsSecondary;
    goto LABEL_36;
  }
  if (!CFEqual(CFSTR("PropagatePerFrameHDRDisplayMetadata"), a2))
  {
    if (CFEqual(CFSTR("ForceFullPowerDecode"), a2))
    {
      v22 = *((_QWORD *)v7 + 2);
      if (!v22)
        goto LABEL_8;
      v23 = kVideoMediaConverter2Property_ForceFullPowerDecode;
    }
    else if (CFEqual(CFSTR("EnableIOFenceDecode"), a2))
    {
      v22 = *((_QWORD *)v7 + 2);
      if (!v22)
        goto LABEL_8;
      v23 = kVideoMediaConverter2Property_EnableIOFenceDecode;
    }
    else
    {
      if (!CFEqual(CFSTR("EnhancementFilterOptions"), a2))
      {
        if (CFEqual(CFSTR("VideoEnhancementMode"), a2))
        {
          if (a3)
          {
            v41 = CFStringGetTypeID();
            if (v41 != CFGetTypeID(a3))
              goto LABEL_141;
            v42 = (const void *)*((_QWORD *)v7 + 11);
            *((_QWORD *)v7 + 11) = a3;
            CFRetain(a3);
          }
          else
          {
            v42 = (const void *)*((_QWORD *)v7 + 11);
            *((_QWORD *)v7 + 11) = 0;
          }
          if (v42)
            CFRelease(v42);
          goto LABEL_32;
        }
        if (CFEqual(CFSTR("Rotation"), a2))
        {
          v43 = *((_QWORD *)v7 + 16);
          if (!v43)
            goto LABEL_8;
          v24 = FigTransformUtilitySetRotation(v43, (CFNumberRef)a3);
        }
        else if (CFEqual(CFSTR("MinImageBounds"), a2))
        {
          v44 = *((_QWORD *)v7 + 16);
          if (!v44)
            goto LABEL_8;
          v24 = FigTransformUtilitySetMinImageBounds(v44, (CFDictionaryRef)a3);
        }
        else if (CFEqual(CFSTR("MaxImageBounds"), a2))
        {
          v45 = *((_QWORD *)v7 + 16);
          if (!v45)
            goto LABEL_8;
          v24 = FigTransformUtilitySetMaxImageBounds(v45, (CFDictionaryRef)a3);
        }
        else
        {
          if (!CFEqual(a2, CFSTR("NeroVideoGravity")))
          {
            if (CFEqual(CFSTR("DisableColorMatching"), a2))
            {
              if (!a3 || (v47 = CFBooleanGetTypeID(), v47 == CFGetTypeID(a3)))
                figVideoRenderPipelineCopyVideoImageQueueArray(a1, &theArray, 0);
              goto LABEL_141;
            }
            if (CFEqual(CFSTR("FigImageQueueArray"), a2))
            {
              if (!a3 || (v48 = CFArrayGetTypeID(), v48 == CFGetTypeID(a3)))
                figVideoRenderPipelineUpdateImageQueues(a1, (const __CFArray *)a3);
              goto LABEL_141;
            }
            if (CFEqual(CFSTR("ColorPrimaries"), a2))
            {
              v22 = *((_QWORD *)v7 + 2);
              if (!v22)
                goto LABEL_8;
              v23 = kVideoMediaConverter2Property_ColorPrimaries;
            }
            else if (CFEqual(CFSTR("TransferFunction"), a2))
            {
              v22 = *((_QWORD *)v7 + 2);
              if (!v22)
                goto LABEL_8;
              v23 = kVideoMediaConverter2Property_TransferFunction;
            }
            else if (CFEqual(CFSTR("YCbCrMatrix"), a2))
            {
              v22 = *((_QWORD *)v7 + 2);
              if (!v22)
                goto LABEL_8;
              v23 = kVideoMediaConverter2Property_YCbCrMatrix;
            }
            else if (CFEqual(CFSTR("PreserveSyncFrames"), a2))
            {
              v22 = *((_QWORD *)v7 + 2);
              if (!v22)
                goto LABEL_8;
              v23 = kVideoMediaConverter2Property_PreserveSyncFrames;
            }
            else if (CFEqual(CFSTR("PlaybackSessionID"), a2))
            {
              v22 = *((_QWORD *)v7 + 2);
              if (!v22)
                goto LABEL_8;
              v23 = kVideoMediaConverter2Property_PlaybackSessionID;
            }
            else if (CFEqual(CFSTR("HDRCrossTalker"), a2))
            {
              v22 = *((_QWORD *)v7 + 2);
              if (!v22)
                goto LABEL_8;
              v23 = kVideoMediaConverter2Property_HDRCrossTalker;
            }
            else
            {
              if (!CFEqual(CFSTR("PriorImageQueueGauge"), a2))
              {
                v10 = 4294954446;
                goto LABEL_143;
              }
              v22 = *((_QWORD *)v7 + 2);
              if (!v22)
                goto LABEL_8;
              v23 = kVideoMediaConverter2Property_PriorImageQueueGauge;
            }
            goto LABEL_36;
          }
          v46 = *((_QWORD *)v7 + 16);
          if (!v46)
            goto LABEL_8;
          v24 = FigTransformUtilitySetVideoGravity(v46);
        }
LABEL_142:
        v10 = v24;
        goto LABEL_143;
      }
      v22 = *((_QWORD *)v7 + 2);
      if (!v22)
        goto LABEL_8;
      v23 = kVideoMediaConverter2Property_EnhancementFilterOptions;
    }
LABEL_36:
    v24 = VMC2SetProperty(v22, *v23, a3);
    goto LABEL_142;
  }
  v37 = *((_QWORD *)v7 + 2);
  if (!v37 || (v10 = VMC2SetProperty(v37, CFSTR("PropagatePerFrameHDRDisplayMetadata"), a3), !(_DWORD)v10))
  {
    v25 = *((_QWORD *)v7 + 4);
    if (!v25)
      goto LABEL_8;
    v26 = *(uint64_t (**)(uint64_t, __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v26)
    {
      v27 = kFigSampleAttachmentCollectorProperty_PropagatePerFrameHDRDisplayMetadata;
      goto LABEL_41;
    }
LABEL_103:
    v10 = 4294954514;
  }
LABEL_143:
  if (theArray)
    CFRelease(theArray);
  return v10;
}

uint64_t piqca_setProperty(uint64_t a1, const void *a2, const __CFBoolean *a3)
{
  uint64_t DerivedStorage;
  CFTypeID TypeID;
  Boolean Value;
  uint64_t result;
  CFTypeID v10;
  int v11;
  int v12;
  NSObject *v13;
  CFTypeID v14;
  CFTypeID v15;
  int v16;
  CFTypeID v17;
  void *v18;
  CFTypeID v19;
  Boolean v20;
  CFTypeID v21;
  CFTypeID v22;
  CFTypeID v23;
  BOOL v24;
  CFTypeID v25;
  int v26;
  const void *v27;
  const void *v28;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD block[5];
  CMTime v31[5];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(CFSTR("PreventDisplaySleepDuringVideoPlayback"), a2))
  {
    if (a3)
    {
      TypeID = CFBooleanGetTypeID();
      if (TypeID == CFGetTypeID(a3))
      {
        Value = CFBooleanGetValue(a3);
        result = 0;
        *(_BYTE *)(DerivedStorage + 132) = Value;
        return result;
      }
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(CFSTR("EnableImageQueueTiming"), a2))
  {
    if (a3)
    {
      v10 = CFBooleanGetTypeID();
      if (v10 == CFGetTypeID(a3))
      {
        v11 = *(unsigned __int8 *)(DerivedStorage + 2920);
        v12 = CFBooleanGetValue(a3);
        *(_BYTE *)(DerivedStorage + 2920) = v12;
        if (v11 != v12)
        {
          v13 = *(NSObject **)(DerivedStorage + 2928);
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 0x40000000;
          block[2] = __piqca_setProperty_block_invoke;
          block[3] = &__block_descriptor_tmp_41;
          block[4] = a1;
          dispatch_sync(v13, block);
        }
        return 0;
      }
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(CFSTR("Duration"), a2))
  {
    if (a3)
    {
      v14 = CFDictionaryGetTypeID();
      if (v14 == CFGetTypeID(a3))
      {
        CMTimeMakeFromDictionary(v31, a3);
        result = 0;
        *(CMTime *)(DerivedStorage + 2984) = v31[0];
        return result;
      }
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(CFSTR("FigImageQueueProperty_BlendsVideoFrames"), a2))
  {
    if (a3)
    {
      v15 = CFBooleanGetTypeID();
      if (v15 != CFGetTypeID(a3))
        return FigSignalErrorAt();
    }
    v16 = *MEMORY[0x1E0C9AE50] == (_QWORD)a3;
    if (*(unsigned __int8 *)(DerivedStorage + 133) != v16)
    {
      *(_BYTE *)(DerivedStorage + 133) = v16;
LABEL_19:
      CAImageQueueSetFlags();
    }
    return 0;
  }
  if (CFEqual(CFSTR("FigImageQueueProperty_ImageQueueInterpolationCurve"), a2))
  {
    if (!a3 || (v17 = CFGetTypeID(a3), v17 == CFArrayGetTypeID()))
    {
      *(_OWORD *)&v31[0].value = xmmword_1932FB708;
      *(_OWORD *)&v31[0].epoch = unk_1932FB718;
      if (!piqca_setProperty_sFigCAImageQueueSetInterpolationCurve)
      {
        v18 = dlopen("/System/Library/Frameworks/QuartzCore.framework/QuartzCore", 1);
        if (v18)
          piqca_setProperty_sFigCAImageQueueSetInterpolationCurve = dlsym(v18, "CAImageQueueSetInterpolationCurve");
      }
      if (a3)
      {
        FigCFArrayGetDoubleAtIndex();
        FigCFArrayGetDoubleAtIndex();
        FigCFArrayGetDoubleAtIndex();
        FigCFArrayGetDoubleAtIndex();
      }
      if (piqca_setProperty_sFigCAImageQueueSetInterpolationCurve)
        ((void (*)(_QWORD, double, double, double, double))piqca_setProperty_sFigCAImageQueueSetInterpolationCurve)(*(_QWORD *)DerivedStorage, *(double *)&v31[0].value, *(double *)&v31[0].timescale, *(double *)&v31[0].epoch, *(double *)&v31[1].value);
      return 0;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(CFSTR("FigImageQueueProperty_EnqueueResetsSystemSleepTimer"), a2))
  {
    if (a3)
    {
      v19 = CFBooleanGetTypeID();
      if (v19 == CFGetTypeID(a3))
      {
        v20 = CFBooleanGetValue(a3);
        result = 0;
        *(_BYTE *)(DerivedStorage + 134) = v20;
        return result;
      }
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(CFSTR("FigImageQueueProperty_Timebase"), a2))
  {
    if (a3)
    {
      v21 = CMTimebaseGetTypeID();
      if (v21 != CFGetTypeID(a3))
        return FigSignalErrorAt();
    }
    piqca_setTimebase(a1, (uint64_t)a3);
    return 0;
  }
  if (CFEqual(CFSTR("FigImageQueueProperty_CAImageQueueCaptionsMayAppearHint"), a2))
  {
    if (!a3)
      return FigSignalErrorAt();
    v22 = CFBooleanGetTypeID();
    if (v22 != CFGetTypeID(a3))
      return FigSignalErrorAt();
    *(_BYTE *)(DerivedStorage + 136) = CFBooleanGetValue(a3);
    goto LABEL_19;
  }
  if (CFEqual(CFSTR("FigImageQueueProperty_DisableColorMatching"), a2))
  {
    if (a3)
    {
      v23 = CFBooleanGetTypeID();
      if (v23 != CFGetTypeID(a3))
        return FigSignalErrorAt();
      *(_QWORD *)(DerivedStorage + 2872) = a3;
      if (!CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0C9AE50]))
        CFEqual(*(CFTypeRef *)(DerivedStorage + 2872), (CFTypeRef)*MEMORY[0x1E0C9AE40]);
    }
    else
    {
      *(_QWORD *)(DerivedStorage + 2872) = 0;
      if (defaultDisableColorMatching_alreadyChecked != 1)
      {
        defaultDisableColorMatching_result = MGGetBoolAnswer() ^ 1;
        defaultDisableColorMatching_alreadyChecked = 1;
      }
    }
    goto LABEL_19;
  }
  if (CFEqual(CFSTR("VideoEnhancementMode"), a2))
  {
    piqca_setEnhancementMode(DerivedStorage, (const __CFString *)a3);
    return 0;
  }
  if (CFEqual(CFSTR("CAImageQueueAlwaysSync"), a2))
  {
    v24 = *MEMORY[0x1E0C9AE50] == (_QWORD)a3;
    *(_BYTE *)(DerivedStorage + 137) = v24;
    if (!v24)
      return 0;
    goto LABEL_19;
  }
  if (CFEqual(CFSTR("UseLowLatencyModeForImmediateFrames"), a2))
  {
    result = 0;
    *(_BYTE *)(DerivedStorage + 138) = *MEMORY[0x1E0C9AE50] == (_QWORD)a3;
    return result;
  }
  if (CFEqual(CFSTR("ForScrubbingOnly"), a2))
  {
    v24 = *MEMORY[0x1E0C9AE50] == (_QWORD)a3;
    *(_BYTE *)(DerivedStorage + 221) = v24;
    if (v24)
      FigImageQueueDisplayCountHistory_CancelTracingDisplayCount(*(_QWORD *)(DerivedStorage + 2848));
    return 0;
  }
  if (CFEqual(CFSTR("EnablePSEMitigation"), a2))
  {
    if (a3)
    {
      v25 = CFGetTypeID(a3);
      if (v25 == CFBooleanGetTypeID())
      {
        result = 0;
        *(_BYTE *)(DerivedStorage + 3016) = *MEMORY[0x1E0C9AE50] == (_QWORD)a3;
        return result;
      }
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(CFSTR("RendererPreparationInfo"), a2))
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 3048));
    v26 = *(unsigned __int8 *)(DerivedStorage + 3056);
    v27 = (const void *)FigCFDictionaryGetValue();
    FigCFDictionaryGetBooleanIfPresent();
    if (v26)
    {
      *(_BYTE *)(DerivedStorage + 3056) = 0;
      v28 = *(const void **)(DerivedStorage + 3064);
      *(_QWORD *)(DerivedStorage + 3064) = v27;
      if (v27)
        CFRetain(v27);
      if (v28)
        CFRelease(v28);
      if (dword_1EE2A2E78)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 3048));
      piqca_postRendererPreparationCompletedIfPreviouslyRequestedAndRecordNewRequest(a1, 0, 0);
    }
    else
    {
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 3048));
    }
    return 0;
  }
  return 4294954512;
}

uint64_t FigCRABSScheduledIOCreate(const void *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;

  FigScheduledIOGetClassID();
  v5 = CMDerivedObjectCreate();
  if ((_DWORD)v5)
    return v5;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)DerivedStorage = CFRetain(a1);
  *(_QWORD *)(DerivedStorage + 24) = 0;
  *(_QWORD *)(DerivedStorage + 32) = DerivedStorage + 24;
  v7 = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 16) = v7;
  if (v7)
  {
    v8 = 0;
    *a3 = 0;
  }
  else
  {
    v8 = FigSignalErrorAt();
    CFRelease(*(CFTypeRef *)DerivedStorage);
    CFRelease(0);
  }
  return v8;
}

uint64_t figVideoRenderPipelineCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFTypeRef *a4)
{
  _BYTE *DerivedStorage;
  _BYTE *v9;
  const void *v11;
  uint64_t v12;
  const __CFArray *v13;
  const void *ValueAtIndex;
  __CFString **v15;
  const __CFArray *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  __CFString **v20;
  CFTypeRef *v21;
  CFTypeRef *v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  const void *v26;
  CMTime time;
  CMTime v28;
  CFTypeRef cf;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v9 = DerivedStorage;
  if (*DerivedStorage)
    return FigSignalErrorAt();
  if (CFEqual(CFSTR("SourceSampleBufferQueue"), a2))
  {
    *a4 = (CFTypeRef)*((_QWORD *)v9 + 1);
    v11 = (const void *)*((_QWORD *)v9 + 1);
    if (!v11)
      goto LABEL_10;
    goto LABEL_9;
  }
  if (!CFEqual(CFSTR("Timebase"), a2))
  {
    if (CFEqual(CFSTR("FigImageQueueArray"), a2))
      figVideoRenderPipelineCopyVideoImageQueueArray(a1, a4, 0);
    if (CFEqual(CFSTR("PerformanceDictionary"), a2))
      videopipelineCopyPerformanceDictionary(a1);
    if (CFEqual(CFSTR("NextNonJerkyStopTime"), a2))
      videopipelineCopyNextNonJerkyStopTime(a1);
    if (CFEqual(CFSTR("CachedTimeRange"), a2))
    {
      v13 = (const __CFArray *)*((_QWORD *)v9 + 5);
      if (v13 && CFArrayGetCount(v13) == 1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*((CFArrayRef *)v9 + 5), 0);
        v15 = kFigImageQueueProperty_CachedTimeRange;
LABEL_28:
        v17 = FigImageQueueCopyProperty((uint64_t)ValueAtIndex, (uint64_t)*v15, (uint64_t)a3, (uint64_t)a4);
LABEL_30:
        v12 = v17;
        goto LABEL_11;
      }
      goto LABEL_29;
    }
    if (CFEqual(CFSTR("CachedVideoFrames"), a2))
    {
      v16 = (const __CFArray *)*((_QWORD *)v9 + 5);
      if (v16 && CFArrayGetCount(v16) == 1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*((CFArrayRef *)v9 + 5), 0);
        v15 = kFigImageQueueProperty_CachedVideoFrames;
        goto LABEL_28;
      }
LABEL_29:
      v17 = FigSignalErrorAt();
      goto LABEL_30;
    }
    if (CFEqual(CFSTR("EndPresentationTimeForQueuedSamples"), a2))
    {
      memset(&v28, 0, sizeof(v28));
      CMBufferQueueGetEndPresentationTimeStamp(&v28, *((CMBufferQueueRef *)v9 + 1));
      time = v28;
      v18 = CMTimeCopyAsDictionary(&time, a3);
LABEL_33:
      v12 = 0;
      *a4 = v18;
      goto LABEL_11;
    }
    if (CFEqual(CFSTR("CurrentVideoFrameRate"), a2))
      figVideoRenderPipelineCopyVideoImageQueueArray(a1, &cf, 0);
    if (CFEqual(CFSTR("VideoEnqueueResetsSystemSleepTimer"), a2))
      figVideoRenderPipelineCopyVideoImageQueueArray(a1, &cf, 0);
    if (CFEqual(CFSTR("ObeyEmptyMediaMarkers"), a2))
    {
      v19 = *((_QWORD *)v9 + 2);
      if (!v19)
        goto LABEL_10;
      v20 = kVideoMediaConverter2Property_ObeyEmptyMediaMarkers;
      goto LABEL_68;
    }
    if (CFEqual(CFSTR("EndPresentationTimeForDecodedSamples"), a2))
    {
      v19 = *((_QWORD *)v9 + 2);
      if (!v19)
        goto LABEL_10;
      v20 = kVideoMediaConverter2Property_EndPresentationTimeForDecodedSamples;
      goto LABEL_68;
    }
    if (CFEqual(CFSTR("RenderEmptyMedia"), a2))
    {
      v19 = *((_QWORD *)v9 + 2);
      if (!v19)
        goto LABEL_10;
      v20 = kVideoMediaConverter2Property_RenderEmptyMedia;
      goto LABEL_68;
    }
    if (CFEqual(CFSTR("OutputPixelBufferPool"), a2))
    {
      v19 = *((_QWORD *)v9 + 2);
      if (!v19)
        goto LABEL_10;
      v20 = kVideoMediaConverter2Property_OutputPixelBufferPool;
      goto LABEL_68;
    }
    if (CFEqual(CFSTR("FieldMode"), a2))
    {
      v19 = *((_QWORD *)v9 + 2);
      if (!v19)
        goto LABEL_10;
      v20 = kVideoMediaConverter2Property_FieldMode;
      goto LABEL_68;
    }
    if (CFEqual(CFSTR("AllowVideoQualityOfServiceAdjustments"), a2))
    {
      v19 = *((_QWORD *)v9 + 2);
      if (!v19)
        goto LABEL_10;
      v20 = kVideoMediaConverter2Property_AllowVideoQualityOfServiceAdjustments;
      goto LABEL_68;
    }
    if (CFEqual(CFSTR("VideoQualityOfServiceTier"), a2))
    {
      v19 = *((_QWORD *)v9 + 2);
      if (!v19)
        goto LABEL_10;
      v20 = kVideoMediaConverter2Property_QualityOfServiceTier;
      goto LABEL_68;
    }
    if (CFEqual(CFSTR("VideoDecoderUsage"), a2))
    {
      v19 = *((_QWORD *)v9 + 2);
      if (!v19)
        goto LABEL_10;
      v20 = kVideoMediaConverter2Property_DecoderUsage;
      goto LABEL_68;
    }
    if (CFEqual(CFSTR("VideoDecoderPriority"), a2))
    {
      v19 = *((_QWORD *)v9 + 2);
      if (!v19)
        goto LABEL_10;
      v20 = kVideoMediaConverter2Property_DecoderPriority;
      goto LABEL_68;
    }
    if (CFEqual(CFSTR("VideoDecoderThreadCount"), a2))
    {
      v19 = *((_QWORD *)v9 + 2);
      if (!v19)
        goto LABEL_10;
      v20 = kVideoMediaConverter2Property_DecoderThreadCount;
      goto LABEL_68;
    }
    if (CFEqual(CFSTR("SupportsSavingFrames"), a2))
    {
      v21 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      v22 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
      v23 = *((_QWORD *)v9 + 2) == 0;
LABEL_71:
      if (v23)
        v21 = v22;
      v18 = (void *)CFRetain(*v21);
      goto LABEL_33;
    }
    if (CFEqual(CFSTR("ForceFullPowerDecode"), a2))
    {
      v19 = *((_QWORD *)v9 + 2);
      if (!v19)
        goto LABEL_10;
      v20 = kVideoMediaConverter2Property_ForceFullPowerDecode;
    }
    else if (CFEqual(CFSTR("EnableIOFenceDecode"), a2))
    {
      v19 = *((_QWORD *)v9 + 2);
      if (!v19)
        goto LABEL_10;
      v20 = kVideoMediaConverter2Property_EnableIOFenceDecode;
    }
    else if (CFEqual(CFSTR("EnhancementFilterOptions"), a2))
    {
      v19 = *((_QWORD *)v9 + 2);
      if (!v19)
        goto LABEL_10;
      v20 = kVideoMediaConverter2Property_EnhancementFilterOptions;
    }
    else if (CFEqual(CFSTR("ColorPrimaries"), a2))
    {
      v19 = *((_QWORD *)v9 + 2);
      if (!v19)
        goto LABEL_10;
      v20 = kVideoMediaConverter2Property_ColorPrimaries;
    }
    else if (CFEqual(CFSTR("TransferFunction"), a2))
    {
      v19 = *((_QWORD *)v9 + 2);
      if (!v19)
        goto LABEL_10;
      v20 = kVideoMediaConverter2Property_TransferFunction;
    }
    else if (CFEqual(CFSTR("YCbCrMatrix"), a2))
    {
      v19 = *((_QWORD *)v9 + 2);
      if (!v19)
        goto LABEL_10;
      v20 = kVideoMediaConverter2Property_YCbCrMatrix;
    }
    else if (CFEqual(CFSTR("PreserveSyncFrames"), a2))
    {
      v19 = *((_QWORD *)v9 + 2);
      if (!v19)
        goto LABEL_10;
      v20 = kVideoMediaConverter2Property_PreserveSyncFrames;
    }
    else if (CFEqual(CFSTR("PlaybackSessionID"), a2))
    {
      v19 = *((_QWORD *)v9 + 2);
      if (!v19)
        goto LABEL_10;
      v20 = kVideoMediaConverter2Property_PlaybackSessionID;
    }
    else if (CFEqual(CFSTR("PropagatePerFrameHDRDisplayMetadata"), a2))
    {
      v19 = *((_QWORD *)v9 + 2);
      if (!v19)
        goto LABEL_10;
      v20 = kVideoMediaConverter2Property_PropagatePerFrameHDRDisplayMetadata;
    }
    else
    {
      if (!CFEqual(CFSTR("HDRCrossTalker"), a2))
      {
        if (CFEqual(CFSTR("VetoFigReadCacheUsage"), a2))
        {
          v21 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
          v24 = v9[136];
        }
        else
        {
          if (CFEqual(CFSTR("Suspended"), a2))
          {
            v25 = *((_QWORD *)v9 + 2);
            if (v25)
            {
              v28.value = 0;
              v12 = VMC2CopyProperty(v25, CFSTR("IsRunning"), a3, (CFDictionaryRef *)&v28);
              if (!(_DWORD)v12)
              {
                v26 = (const void *)(v28.value == *MEMORY[0x1E0C9AE40] ? *MEMORY[0x1E0C9AE50] : *MEMORY[0x1E0C9AE40]);
                *a4 = CFRetain(v26);
                if (v28.value)
                  CFRelease((CFTypeRef)v28.value);
              }
              goto LABEL_11;
            }
            goto LABEL_10;
          }
          if (!CFEqual(CFSTR("UsingAV1FilmGrainDeferMode"), a2))
          {
            v12 = 4294954446;
            goto LABEL_11;
          }
          v21 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
          v24 = v9[145];
        }
        v22 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
        v23 = v24 == 0;
        goto LABEL_71;
      }
      v19 = *((_QWORD *)v9 + 2);
      if (!v19)
        goto LABEL_10;
      v20 = kVideoMediaConverter2Property_HDRCrossTalker;
    }
LABEL_68:
    v17 = VMC2CopyProperty(v19, *v20, a3, (CFDictionaryRef *)a4);
    goto LABEL_30;
  }
  *a4 = (CFTypeRef)*((_QWORD *)v9 + 15);
  v11 = (const void *)*((_QWORD *)v9 + 15);
  if (v11)
LABEL_9:
    CFRetain(v11);
LABEL_10:
  v12 = 0;
LABEL_11:
  if (cf)
    CFRelease(cf);
  return v12;
}

void videopipelineSetTimebase(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 120))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CFRelease(*(CFTypeRef *)(DerivedStorage + 120));
  }
  *(_QWORD *)(DerivedStorage + 120) = a2;
  if (a2)
  {
    CFRetain(a2);
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
  }
  FigImageQueueArraySetProperty();
  if (!*(_BYTE *)DerivedStorage)
  {
    v4 = *(_QWORD *)(DerivedStorage + 16);
    if (v4)
      VMC2SetTimebase(v4, *(const void **)(DerivedStorage + 120));
  }
  videopipelineUpdateVideoPlaybackStateForClient();
}

uint64_t VMC2SetTimebase(uint64_t a1, const void *a2)
{
  const void *v5;
  uint64_t v6;

  if (!a1 || *(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 72));
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 576));
  v5 = *(const void **)(a1 + 584);
  *(_QWORD *)(a1 + 584) = a2;
  if (a2)
    CFRetain(a2);
  if (v5)
    CFRelease(v5);
  v6 = *(_QWORD *)(a1 + 584);
  if (v6)
  {
    v6 = *(_QWORD *)(a1 + 600);
    if (v6)
      LOBYTE(v6) = *(_BYTE *)(a1 + 624) != 0;
  }
  *(_BYTE *)(a1 + 625) = v6;
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 576));
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 72));
  return 0;
}

uint64_t EditMentorNewWithChildAudioMentor(_QWORD *a1, const void *a2, _QWORD *a3)
{
  return editMentorNewWithChildAudioVideoEditOrCallbacksMentorAndSingleEditSegmentOrTrack(a1, 0, 0, 0, 0, a2, 0, a3);
}

uint64_t VideoMentorNew(const void *a1, const void *a2, const void *a3, const __CFDictionary *a4, _QWORD *a5)
{
  _QWORD *v10;
  _QWORD *v11;
  const void *v12;
  BOOL v13;
  const void *Value;
  uint64_t v15;
  unsigned int (*v16)(uint64_t, uint64_t (*)(), _QWORD *, _QWORD *);
  CFDictionaryRef v17;
  uint64_t v18;
  void *values;

  values = CFSTR("com.apple.coremedia.videomentor");
  if (VideoMentorNew_onceToken != -1)
  {
    dispatch_once_f(&VideoMentorNew_onceToken, 0, (dispatch_function_t)videoMentorRegisterCFTypes);
    if (a1)
      goto LABEL_3;
    return FigSignalErrorAt();
  }
  if (!a1)
    return FigSignalErrorAt();
LABEL_3:
  if (!a2)
    return FigSignalErrorAt();
  if (!a3)
    return FigSignalErrorAt();
  if (!a5)
    return FigSignalErrorAt();
  v10 = malloc_type_calloc(0x3C0uLL, 1uLL, 0x5AFCFAB1uLL);
  if (!v10)
    return FigSignalErrorAt();
  v11 = v10;
  v10[1] = CFRetain(a1);
  v11[2] = CFRetain(a2);
  v11[3] = CFRetain(a3);
  *((_BYTE *)v11 + 41) = 0;
  if (a4)
  {
    v12 = (const void *)*MEMORY[0x1E0C9AE50];
    if (v12 == CFDictionaryGetValue(a4, CFSTR("SpeculativelySaveFrames")))
      *((_BYTE *)v11 + 549) = 1;
    if (_os_feature_enabled_impl())
      v13 = v12 == CFDictionaryGetValue(a4, CFSTR("OptimizeSampleCursorIPCForPower"));
    else
      v13 = 0;
    *((_BYTE *)v11 + 41) = v13;
    Value = CFDictionaryGetValue(a4, CFSTR("SampleBufferCryptor"));
    v11[6] = Value;
    if (Value)
      CFRetain(Value);
  }
  FigCFDictionaryGetInt32IfPresent();
  v11[11] = FigSemaphoreCreate();
  v11[12] = FigSimpleMutexCreate();
  v11[10] = FigSimpleMutexCreate();
  v11[33] = FigSimpleMutexCreate();
  v11[15] = FigSemaphoreCreate();
  *((_DWORD *)v11 + 11) = 0;
  v11[69] = 0;
  *((_DWORD *)v11 + 92) = 1065353216;
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterAddListener();
  v15 = v11[3];
  v16 = *(unsigned int (**)(uint64_t, uint64_t (*)(), _QWORD *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 32);
  if (!v16 || v16(v15, videoMentorLowWaterTrigger, v11, v11 + 4))
  {
    v18 = FigSignalErrorAt();
  }
  else
  {
    *((_BYTE *)v11 + 40) = 1;
    *((_DWORD *)v11 + 136) = -2;
    *((_DWORD *)v11 + 28) = 0;
    v17 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], MEMORY[0x1E0CA52C8], (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v18 = FigThreadCreate();
    if (!(_DWORD)v18)
    {
      *a5 = v11;
      v11 = 0;
    }
    if (v17)
      CFRelease(v17);
  }
  VideoMentorDispose(v11);
  return v18;
}

uint64_t videoMentorLowWaterTrigger()
{
  return FigSemaphoreSignal();
}

uint64_t videoMentorThread(uint64_t a1)
{
  const void *v2;
  const void *v3;
  CMTime *p_presentationTimeStamp;
  CMTime *v6;
  int v7;
  int v8;
  const void *v9;
  __int128 v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  float v16;
  float v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  char v24;
  __int128 v25;
  char v26;
  int v27;
  const void *v28;
  int v29;
  const void *v30;
  uint64_t (*v31)(const void *, CMTime *);
  int CursorPTSRange;
  __int128 v33;
  const void *v34;
  uint64_t (*v35)(const void *, CMTime *);
  const void *v36;
  uint64_t (*v37)(const void *, uint64_t, uint64_t *);
  opaqueCMSampleBuffer *v38;
  const void *v39;
  uint64_t v40;
  void (*v41)(uint64_t);
  const void *v42;
  CFDictionaryRef v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, CFDictionaryRef, _QWORD);
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v48;
  CMTimeValue v49;
  unsigned int (*v50)(uint64_t, CMTimeValue);
  const void *v51;
  uint64_t (*v52)(const void *, CMTime *);
  int NodeForCursor;
  int CursorForPresentationTimeStamp;
  const void *v55;
  unsigned int (*v56)(const void *, const void **);
  int started;
  _BOOL4 v58;
  const void *v59;
  uint64_t (*v60)(const void *, CMSampleTimingInfo *);
  const void *v61;
  uint64_t (*v62)(const void *, CMTimeRange *);
  int v63;
  void (*v64)(_QWORD, CFTypeRef, _QWORD, CMSampleTimingInfo *, CMTime *);
  uint64_t v65;
  unsigned int (*v66)(uint64_t, void *);
  int v67;
  const void *v68;
  const __CFString *v69;
  int v70;
  const __CFString *v71;
  __CFDictionary *v72;
  const void *v73;
  uint64_t v74;
  __int128 v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t (*v82)(uint64_t, uint64_t);
  opaqueCMSampleBuffer *CachedVideoFrameForCursor;
  const void *v84;
  const void *v85;
  const void *v86;
  const void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  CMTimeValue value;
  _BOOL4 v94;
  __int128 v95;
  int v96;
  int v97;
  const void *v98;
  uint64_t (*v99)(const void *, uint64_t, uint64_t *);
  int v100;
  const void *v101;
  const void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t (*v105)(const void *, const void *);
  const __CFString *v106;
  int v107;
  const __CFString *v108;
  __CFDictionary *v109;
  int v110;
  uint64_t (*v111)(const void *, const void *);
  uint64_t **v112;
  const __CFString *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  const __CFString *key;
  const __CFString *v118;
  CFTypeRef v119;
  const __CFAllocator *allocator;
  uint64_t v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  __int128 *v129;
  __int128 *v130;
  CMTimeEpoch v131;
  __int128 v132;
  CFTypeRef v133;
  void *v134;
  CFTypeRef v135;
  CFTypeRef v136;
  CFTypeRef v137;
  CFTypeRef v138;
  CFTypeRef v139;
  CMTime v140;
  CMTime v141;
  __int128 v142;
  CMTimeEpoch v143;
  CFTypeRef v144;
  __int128 v145;
  CMTimeEpoch v146;
  __int128 v147;
  CMTimeEpoch v148;
  __int128 v149;
  CMTimeEpoch v150;
  CFTypeRef cf;
  CMTime v152;
  CMTimeRange time2;
  CMTime rhs;
  CMTime values;
  CMTime v156;
  uint64_t v157;
  char v158;
  unsigned __int8 v159;
  const void *v160;
  const void *v161;
  CMSampleTimingInfo time1;

  cf = 0;
  if (*(_BYTE *)(a1 + 41))
    FigFormatReaderXPCRemoteEnsureEfficientIPCFromCurrentThread(*(unsigned int *)(a1 + 44), &cf);
  if (*(_DWORD *)(a1 + 112) == 5)
    goto LABEL_4;
  v130 = (__int128 *)(a1 + 176);
  v129 = (__int128 *)(a1 + 208);
  v114 = (uint64_t *)(a1 + 744);
  v112 = (uint64_t **)(a1 + 552);
  v121 = a1 + 584;
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  p_presentationTimeStamp = &time1.presentationTimeStamp;
  key = (const __CFString *)*MEMORY[0x1E0CA26E0];
  v116 = *MEMORY[0x1E0CA2760];
  v115 = *MEMORY[0x1E0CA2768];
  v118 = (const __CFString *)*MEMORY[0x1E0CA26C0];
  v119 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
  v113 = (const __CFString *)*MEMORY[0x1E0CA2680];
  v132 = *MEMORY[0x1E0CA2E18];
  v131 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  while (2)
  {
    v6 = p_presentationTimeStamp;
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 96));
    v7 = *(_DWORD *)(a1 + 112);
    v135 = *(CFTypeRef *)(a1 + 128);
    v149 = *(_OWORD *)(a1 + 136);
    v150 = *(_QWORD *)(a1 + 152);
    v8 = *(_DWORD *)(a1 + 160);
    v9 = *(const void **)(a1 + 168);
    v147 = *v130;
    v148 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = v131;
    *v130 = v132;
    v137 = v9;
    v138 = *(CFTypeRef *)(a1 + 200);
    v10 = *v129;
    v146 = *(_QWORD *)(a1 + 224);
    v145 = v10;
    *(_QWORD *)(a1 + 224) = v131;
    *v129 = v132;
    v11 = *(_DWORD *)(a1 + 232);
    v12 = *(_DWORD *)(a1 + 236);
    v14 = *(_DWORD *)(a1 + 240);
    v13 = *(_DWORD *)(a1 + 244);
    v15 = *(unsigned __int8 *)(a1 + 248);
    v16 = *(float *)(a1 + 252);
    v17 = *(float *)(a1 + 256);
    v18 = *(_DWORD *)(a1 + 260);
    v19 = *(unsigned __int8 *)(a1 + 372);
    v20 = *(unsigned __int8 *)(a1 + 373);
    v21 = *(unsigned __int8 *)(a1 + 374);
    v22 = *(_BYTE *)(a1 + 377);
    v23 = *(_BYTE *)(a1 + 378);
    v134 = *(void **)(a1 + 456);
    v133 = *(CFTypeRef *)(a1 + 464);
    v144 = v133;
    v24 = *(_BYTE *)(a1 + 375);
    v25 = *(_OWORD *)(a1 + 428);
    v143 = *(_QWORD *)(a1 + 444);
    v142 = v25;
    v26 = *(_BYTE *)(a1 + 376);
    v139 = *(CFTypeRef *)(a1 + 472);
    v136 = *(CFTypeRef *)(a1 + 480);
    *(_DWORD *)(a1 + 488) = *(_DWORD *)(a1 + 452);
    *(_BYTE *)(a1 + 492) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 200) = 0;
    *(_BYTE *)(a1 + 520) = 0;
    *(_BYTE *)(a1 + 116) = 0;
    *(_DWORD *)(a1 + 484) = 0;
    *(_OWORD *)(a1 + 452) = 0u;
    *(_OWORD *)(a1 + 468) = 0u;
    if (!v7)
    {
      if (*(_BYTE *)(a1 + 117))
      {
        *(_BYTE *)(a1 + 117) = 0;
        FigSemaphoreSignal();
      }
      FigMemoryBarrier();
      MEMORY[0x19402EF04](*(_QWORD *)(a1 + 96));
      p_presentationTimeStamp = v6;
      if (v133)
      {
        CFRelease(v133);
        v144 = 0;
      }
      v28 = v136;
      if (v139)
        audioMentorEnqueueBufferConsumedMarker(a1, v139);
      goto LABEL_220;
    }
    v122 = v8;
    v123 = v15;
    v125 = v19;
    v126 = v14;
    v127 = v21;
    v128 = v13;
    v124 = v20;
    FigMemoryBarrier();
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 96));
    v27 = v7 - 1;
    p_presentationTimeStamp = v6;
    v28 = v136;
    switch(v27)
    {
      case 0:
        v29 = 0;
        v141.epoch = v150;
        v140.epoch = v143;
        ++*(_DWORD *)(a1 + 916);
        *(_BYTE *)(a1 + 492) = *(_DWORD *)(a1 + 488) != 0;
        *(_OWORD *)&v141.value = v149;
        *(_OWORD *)&v140.value = v142;
        v160 = 0;
        v161 = v135;
        v159 = 1;
        v158 = 0;
        v157 = 0;
        *(_DWORD *)(a1 + 496) = 2;
        if (v135)
          goto LABEL_15;
        *(_OWORD *)&time1.duration.value = v149;
        time1.duration.epoch = v150;
        CursorForPresentationTimeStamp = audioMentorCreateCursorForPresentationTimeStamp(a1, v125, (__int128 *)&time1.duration.value, (uint64_t)&v161);
        if (CursorForPresentationTimeStamp)
        {
          CursorPTSRange = CursorForPresentationTimeStamp;
          v38 = 0;
          v29 = 0;
          goto LABEL_193;
        }
        v29 = 1;
        v28 = v136;
LABEL_15:
        if ((v141.flags & 0x1D) != 1)
        {
          v51 = v161;
          v52 = *(uint64_t (**)(const void *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
          if (!v52)
          {
LABEL_190:
            CursorPTSRange = -12782;
LABEL_191:
            FigSignalErrorAt();
            goto LABEL_192;
          }
          CursorPTSRange = v52(v51, &v141);
          if (CursorPTSRange)
            goto LABEL_191;
          v28 = v136;
          if ((v141.flags & 0x1D) != 1)
          {
LABEL_66:
            NodeForCursor = FigSignalErrorAt();
LABEL_67:
            CursorPTSRange = NodeForCursor;
            goto LABEL_192;
          }
        }
        if (v122 == 2)
        {
          *(_OWORD *)&v156.value = v132;
          v156.epoch = v131;
          v30 = v161;
          v31 = *(uint64_t (**)(const void *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
          if (!v31)
            goto LABEL_79;
          CursorPTSRange = v31(v30, &v156);
          if (CursorPTSRange)
            goto LABEL_192;
          time1.duration = v156;
          time2.start = v141;
          v28 = v136;
          if (CMTimeCompare(&time1.duration, &time2.start))
          {
            *(_OWORD *)&values.value = v132;
            values.epoch = v131;
            *(_OWORD *)&rhs.value = v132;
            rhs.epoch = v131;
            v33 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
            *(_OWORD *)&time1.duration.value = *MEMORY[0x1E0CA2E40];
            *(_OWORD *)&time1.duration.epoch = v33;
            *(_OWORD *)&time1.presentationTimeStamp.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
            v34 = v161;
            v35 = *(uint64_t (**)(const void *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
            if (!v35)
              goto LABEL_79;
            CursorPTSRange = v35(v34, &values);
            if (CursorPTSRange)
              goto LABEL_192;
            v36 = v161;
            v37 = *(uint64_t (**)(const void *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 176);
            if (v37)
            {
              CursorPTSRange = v37(v36, 1, &v157);
              if (!CursorPTSRange)
              {
                CursorPTSRange = videoMentorGetCursorPTSRange(v161, &time1);
                if (!CursorPTSRange)
                {
                  *(_OWORD *)&time2.start.value = *(_OWORD *)&time1.duration.value;
                  *(_OWORD *)&time2.start.epoch = *(_OWORD *)&time1.duration.epoch;
                  *(_OWORD *)&time2.duration.timescale = *(_OWORD *)&time1.presentationTimeStamp.timescale;
                  CMTimeRangeGetEnd(&rhs, &time2);
                  time2.start = values;
                  v152 = rhs;
                  v28 = v136;
                  videoMentorThreadForwardPlayback(a1, 0, &time2.start, 0, &v152, 2, v128, 0, 0.0, 0.0, 0, v125, v124, 0, 0, 0, 1, (CFArrayRef *)&v144, v139,
                    0,
                    0,
                    v136);
                  v38 = 0;
                  ++*(_DWORD *)(a1 + 920);
                  goto LABEL_212;
                }
              }
            }
            else
            {
LABEL_79:
              CursorPTSRange = -12782;
            }
LABEL_192:
            v38 = 0;
LABEL_193:
            v87 = v139;
            goto LABEL_194;
          }
        }
        if (*MEMORY[0x1E0CA1FC0] == 1)
          kdebug_trace();
        if (v133)
        {
          if (CFArrayGetCount((CFArrayRef)v133) >= 1
            && (v55 = v161,
                (v56 = *(unsigned int (**)(const void *, const void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 8)) != 0)
            && !v56(v55, &v160))
          {
            CachedVideoFrameForCursor = videoMentorGetCachedVideoFrameForCursor((_QWORD *)a1, v160, (CFArrayRef)v133, (uint64_t)v28);
            v38 = CachedVideoFrameForCursor;
            if (CachedVideoFrameForCursor)
            {
              CFRetain(CachedVideoFrameForCursor);
              v84 = v161;
              v161 = v160;
              if (v160)
                CFRetain(v160);
              if (v84)
                CFRelease(v84);
            }
            if (v160)
            {
              CFRelease(v160);
              v160 = 0;
            }
          }
          else
          {
            v38 = 0;
          }
          CFRelease(v133);
          v144 = 0;
        }
        else
        {
          v38 = 0;
        }
        started = videoMentorDependencyStateStartNewOrder((_QWORD *)a1, v114);
        if (started)
          goto LABEL_83;
        LOBYTE(v152.value) = 0;
        time1.duration = v141;
        time2.start = v141;
        v156 = v141;
        values = v140;
        started = videoMentorDependencyStateCopyCursorForDecodeWalk(a1, (uint64_t)v114, 1, (uint64_t)v136, v128, (uint64_t)&time1, &time2.start, (__int128 *)&v156.value, 0, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], v161, 0, &values.value, &v152, &v158, (char *)&v159, 0,
                    &v160);
        if (started)
          goto LABEL_83;
        v58 = LOBYTE(v152.value) == 0;
        if (v158)
        {
          memset(&time1, 0, 24);
          memset(&time2, 0, 24);
          memset(&v156, 0, sizeof(v156));
          v59 = v161;
          v60 = *(uint64_t (**)(const void *, CMSampleTimingInfo *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 40);
          if (!v60)
          {
            CursorPTSRange = -12782;
            goto LABEL_128;
          }
          CursorPTSRange = v60(v59, &time1);
          if (CursorPTSRange)
          {
LABEL_128:
            FigSignalErrorAt();
            goto LABEL_193;
          }
          if ((time1.duration.flags & 0x1D) != 1)
            goto LABEL_244;
          v61 = v161;
          v62 = *(uint64_t (**)(const void *, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
          if (!v62)
            goto LABEL_91;
          v63 = v62(v61, &time2);
          if (v63)
          {
            CursorPTSRange = v63;
            if (v63 == -12782)
            {
LABEL_91:
              *(_OWORD *)&time2.start.value = *MEMORY[0x1E0CA2E68];
              time2.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
              goto LABEL_92;
            }
            goto LABEL_128;
          }
          if ((time2.start.flags & 0x1D) != 1)
          {
LABEL_244:
            started = FigSignalErrorAt();
LABEL_83:
            CursorPTSRange = started;
            goto LABEL_193;
          }
LABEL_92:
          values = time1.duration;
          rhs = time2.start;
          CMTimeAdd(&v156, &values, &rhs);
          MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 80));
          v64 = *(void (**)(_QWORD, CFTypeRef, _QWORD, CMSampleTimingInfo *, CMTime *))(a1 + 64);
          if (v64)
            v64(*(_QWORD *)(a1 + 72), v136, 0, &time1, &v156);
          MEMORY[0x19402EF04](*(_QWORD *)(a1 + 80));
          values = time1.duration;
          rhs = v156;
          videoMentorEnqueueTimestampIntervalMarker(a1);
LABEL_153:
          CursorPTSRange = 0;
          goto LABEL_154;
        }
        v156 = v141;
        v74 = a1 + 552;
        do
        {
          v74 = *(_QWORD *)v74;
          if (!v74)
          {
            v76 = *v112;
            if (*v112)
            {
              v77 = *(_QWORD *)(a1 + 528);
              if (v77)
              {
                while (1)
                {
                  v78 = v76[1];
                  v79 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
                  v80 = v77 ? *(_QWORD *)(CMBaseObjectGetVTable() + 16) : 0;
                  if (v79 != v80
                    || (v82 = *(uint64_t (**)(uint64_t, uint64_t))(v79 + 32)) == 0
                    || v82(v78, v77) != 1)
                  {
                    v81 = *((_OWORD *)v76 + 2);
                    *(_OWORD *)&time1.duration.value = *((_OWORD *)v76 + 1);
                    *(_OWORD *)&time1.duration.epoch = v81;
                    *(_OWORD *)&time1.presentationTimeStamp.timescale = *((_OWORD *)v76 + 3);
                    CMTimeRangeGetEnd(&v156, (CMTimeRange *)&time1);
                    time1.duration = v141;
                    if (CMTimeCompare(&v156, &time1.duration) > 0)
                      break;
                  }
                  v76 = (uint64_t *)*v76;
                  if (!v76)
                    goto LABEL_148;
                  v77 = *(_QWORD *)(a1 + 528);
                }
              }
              else
              {
LABEL_148:
                videoMentorResetSavedListAndEnqueueMarker(a1);
              }
            }
            v85 = v160;
            if (!v160)
              goto LABEL_153;
            v86 = v161;
            if (!v38)
            {
              v88 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
              v89 = (uint64_t)v136;
              if (v86)
                v90 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
              else
                v90 = 0;
              if (v88 == v90 && (v111 = *(uint64_t (**)(const void *, const void *))(v88 + 32)) != 0)
              {
                v91 = v111(v85, v86);
                if (v91 == 1)
                {
LABEL_242:
                  CursorPTSRange = 0;
LABEL_247:
                  videoMentorEnqueueDrainAfterDecodingMarker(a1);
                  if (v139)
                    goto LABEL_155;
LABEL_248:
                  v87 = v139;
                  goto LABEL_249;
                }
              }
              else
              {
                v91 = 0;
              }
              v92 = a1 + 744;
              while (1)
              {
                rhs.value = 0;
                NodeForCursor = videoMentorDependencyStateGetNodeForCursor((_QWORD *)a1, v92, (uint64_t)v160, v89, 0, &rhs);
                if (NodeForCursor)
                  goto LABEL_67;
                value = rhs.value;
                if (!rhs.value)
                  goto LABEL_66;
                if (*(_DWORD *)(rhs.value + 76) == 2)
                {
                  v94 = 0;
                  if (v91 && *(_BYTE *)(a1 + 549))
                  {
                    v95 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
                    *(_OWORD *)&time1.duration.value = *MEMORY[0x1E0CA2E40];
                    *(_OWORD *)&time1.duration.epoch = v95;
                    *(_OWORD *)&time1.presentationTimeStamp.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
                    if (videoMentorGetCursorPTSRange(v160, &time1))
                    {
                      v94 = 0;
                    }
                    else
                    {
                      *(_OWORD *)&time2.start.value = *(_OWORD *)&time1.duration.value;
                      *(_OWORD *)&time2.start.epoch = *(_OWORD *)&time1.duration.epoch;
                      *(_OWORD *)&time2.duration.timescale = *(_OWORD *)&time1.presentationTimeStamp.timescale;
                      CMTimeRangeGetEnd(&values, &time2);
                      time2.start = v141;
                      v94 = CMTimeCompare(&values, &time2.start) > 0;
                    }
                  }
                  if (v91)
                    v97 = 2;
                  else
                    v97 = 3;
                  NodeForCursor = videoMentorThreadGenerateAndEnqueueFrame(a1, v160, v97, v94, v159, 1, 0, v58, v124, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], v136);
                  if (NodeForCursor)
                    goto LABEL_67;
                  LOBYTE(v58) = 0;
                  v159 = 0;
                  v96 = 1;
                }
                else
                {
                  v96 = 0;
                }
                videoMentorUpdateDecoderState(a1, value, v96);
                if (!v91)
                  goto LABEL_242;
                v98 = v160;
                v99 = *(uint64_t (**)(const void *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 168);
                if (!v99)
                  goto LABEL_190;
                v100 = v99(v98, 1, &v157);
                if (v100)
                {
                  CursorPTSRange = v100;
                  goto LABEL_191;
                }
                v89 = (uint64_t)v136;
                if (v157 != 1)
                {
                  CursorPTSRange = FigSignalErrorAt();
                  goto LABEL_247;
                }
                v102 = v160;
                v101 = v161;
                v103 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
                if (v101)
                  v104 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
                else
                  v104 = 0;
                if (v103 == v104 && (v105 = *(uint64_t (**)(const void *, const void *))(v103 + 32)) != 0)
                  v91 = v105(v102, v101);
                else
                  v91 = 0;
                v92 = a1 + 744;
                if (v91 == 1)
                  goto LABEL_242;
              }
            }
            CursorPTSRange = videoMentorThreadResendCachedSampleBuffer(a1, v161, v38, 3, v159, 0, v124, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], v136);
            if (CursorPTSRange)
              goto LABEL_193;
LABEL_154:
            if (!v139)
              goto LABEL_248;
            goto LABEL_155;
          }
          v75 = *(_OWORD *)(v74 + 32);
          *(_OWORD *)&time1.duration.value = *(_OWORD *)(v74 + 16);
          *(_OWORD *)&time1.duration.epoch = v75;
          *(_OWORD *)&time1.presentationTimeStamp.timescale = *(_OWORD *)(v74 + 48);
          time2.start = v156;
        }
        while (!CMTimeRangeContainsTime((CMTimeRange *)&time1, &time2.start));
        CursorPTSRange = videoMentorThreadGenerateAndEnqueueFrame(a1, *(const void **)(v74 + 8), 3, 2, v159, 1, 0, v58, v124, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], v136);
        if (CursorPTSRange)
          goto LABEL_193;
        v159 = 0;
        if (!v139)
          goto LABEL_248;
LABEL_155:
        v87 = v139;
        if (!CursorPTSRange)
        {
          CursorPTSRange = audioMentorEnqueueBufferConsumedMarker(a1, v139);
          v87 = 0;
        }
LABEL_249:
        ++*(_DWORD *)(a1 + 920);
LABEL_194:
        if (*(_BYTE *)(a1 + 492))
        {
          videoMentorPostCollectorCoherenceConduitNotification(a1);
          *(_BYTE *)(a1 + 492) = 0;
        }
        if (*MEMORY[0x1E0CA1FC0] == 1)
          kdebug_trace();
        if (v144)
        {
          CFRelease(v144);
          v144 = 0;
        }
        if (*(_BYTE *)a1)
        {
          v28 = v136;
        }
        else
        {
          v106 = CFSTR("MentorStoppingDueToCompletion");
          if (CursorPTSRange)
            v106 = CFSTR("MentorStoppingDueToError");
          if (CursorPTSRange == -1)
            v107 = 0;
          else
            v107 = CursorPTSRange;
          if (CursorPTSRange == -1)
            v108 = CFSTR("MentorResettingDueToModeSwitch");
          else
            v108 = v106;
          v28 = v136;
          v109 = FigMentorNotificationPayloadCreate((uint64_t)v108, v136, v107, *(unsigned __int8 *)(a1 + 520), v87, 0);
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterPostNotification();
          if (v109)
            CFRelease(v109);
        }
LABEL_212:
        if (v29 && v161)
        {
          CFRelease(v161);
          v161 = 0;
        }
        if (v160)
        {
          CFRelease(v160);
          v160 = 0;
        }
        if (v38)
        {
          v73 = v38;
          goto LABEL_219;
        }
LABEL_220:
        *(_OWORD *)(a1 + 380) = v147;
        *(_QWORD *)(a1 + 396) = v148;
        *(_OWORD *)(a1 + 404) = v145;
        *(_QWORD *)(a1 + 420) = v146;
        if (v135)
          CFRelease(v135);
        if (v137)
          CFRelease(v137);
        if (v138)
          CFRelease(v138);
        if (v134)
          CFRelease(v134);
        if (v144)
          CFRelease(v144);
        if (v139)
          CFRelease(v139);
        if (v28)
          CFRelease(v28);
        v110 = *(_DWORD *)(a1 + 112);
        if (v110 != 5)
        {
          if (!*(_BYTE *)(a1 + 116))
          {
            do
              FigSemaphoreWaitRelative();
            while (!*(_BYTE *)(a1 + 116));
            v110 = *(_DWORD *)(a1 + 112);
          }
          if (v110 != 5)
            continue;
        }
LABEL_4:
        v2 = *(const void **)(a1 + 528);
        if (v2)
        {
          CFRelease(v2);
          *(_QWORD *)(a1 + 528) = 0;
        }
        v3 = *(const void **)(a1 + 536);
        if (v3)
        {
          CFRelease(v3);
          *(_QWORD *)(a1 + 536) = 0;
        }
        if (cf)
          CFRelease(cf);
        return 0;
      case 1:
        *(_OWORD *)&time1.duration.value = v147;
        time1.duration.epoch = v148;
        *(_OWORD *)&time2.start.value = v145;
        time2.start.epoch = v146;
        videoMentorThreadForwardPlayback(a1, v137, &time1.duration, v138, &time2.start, v126, v128, v123, v16, v17, v18, v125, v124, v127, v22, v23, 0, (CFArrayRef *)&v144, v139,
          v24,
          v26,
          v136);
        goto LABEL_220;
      case 2:
        *(_OWORD *)&time1.duration.value = v147;
        time1.duration.epoch = v148;
        *(_OWORD *)&time2.start.value = v145;
        time2.start.epoch = v146;
        videoMentorThreadReversePlayback(a1, v137, &time1.duration, v138, &time2.start, v11, v12, v126, v128, v123, v125, v124, v127, (CFArrayRef *)&v144, v139, v136);
        goto LABEL_220;
      case 3:
        if (v133)
        {
          CFRelease(v133);
          v144 = 0;
        }
        v156.value = 0;
        *(_DWORD *)(a1 + 496) = v126;
        *(_BYTE *)(a1 + 492) = *(_DWORD *)(a1 + 488) != 0;
        if ((v126 & 0xFFFFFFFD) == 1 && *MEMORY[0x1E0CA1FC0] == 1)
          kdebug_trace();
        *(_DWORD *)(a1 + 524) = 0;
        v39 = *(const void **)(a1 + 536);
        if (v39)
        {
          CFRelease(v39);
          *(_QWORD *)(a1 + 536) = 0;
        }
        *(_OWORD *)(a1 + 560) = v132;
        *(_QWORD *)(a1 + 576) = v131;
        *(_QWORD *)(a1 + 680) = 0;
        videoMentorThrottlingStateStartNewOrder(v121, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], 0);
        if ((v128 - 3) >= 0xFFFFFFFE)
        {
          if (*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72))
          {
            v40 = *(_QWORD *)(a1 + 24);
            v41 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
            if (v41)
              v41(v40);
          }
          v42 = *(const void **)(a1 + 528);
          if (v42)
          {
            CFRelease(v42);
            *(_QWORD *)(a1 + 528) = 0;
          }
          *(_DWORD *)(a1 + 544) = -2;
          ++*(_DWORD *)(a1 + 504);
          values.value = (CMTimeValue)CFNumberCreate(allocator, kCFNumberIntType, (const void *)(a1 + 504));
          v43 = CFDictionaryCreate(allocator, MEMORY[0x1E0CA2748], (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          *(_OWORD *)&time1.duration.value = *MEMORY[0x1E0CA2E68];
          time1.duration.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
          *(_OWORD *)&p_presentationTimeStamp->value = v132;
          p_presentationTimeStamp->epoch = v131;
          *(_OWORD *)&time1.decodeTimeStamp.value = v132;
          time1.decodeTimeStamp.epoch = v131;
          if (v134)
          {
            CMSampleBufferGetOutputPresentationTimeStamp(&time2.start, (CMSampleBufferRef)v134);
            *(_OWORD *)&p_presentationTimeStamp->value = *(_OWORD *)&time2.start.value;
            p_presentationTimeStamp->epoch = time2.start.epoch;
          }
          if (CMSampleBufferCreate(allocator, 0, 1u, 0, 0, 0, 0, 1, &time1, 0, 0, (CMSampleBufferRef *)&v156))
          {
            goto LABEL_100;
          }
          CMSetAttachment((CMAttachmentBearerRef)v156.value, key, (CFTypeRef)values.value, 1u);
          v44 = *(_QWORD *)(a1 + 24);
          v45 = *(void (**)(uint64_t, uint64_t, CFDictionaryRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 64);
          if (v45)
            v45(v44, v116, v43, 0);
          v46 = *(_QWORD *)(a1 + 24);
          v47 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 64);
          if (v47)
            v47(v46, v115, 0, 0);
          if (values.value)
            CFRelease((CFTypeRef)values.value);
          if (v43)
            CFRelease(v43);
          v48 = *(_QWORD *)(a1 + 24);
          v49 = v156.value;
          v50 = *(unsigned int (**)(uint64_t, CMTimeValue))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
          if (!v50 || v50(v48, v49))
            goto LABEL_100;
        }
        if (v134
          && (CMGetAttachment(v134, v118, 0) == v119
           && (CMGetAttachment(v134, v113, 0),
               CMSampleBufferGetOutputPresentationTimeStamp(&time1.duration, (CMSampleBufferRef)v134),
               videoMentorEnqueueTimestampIntervalMarker(a1))
           || (v65 = *(_QWORD *)(a1 + 24),
               (v66 = *(unsigned int (**)(uint64_t, void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8)) == 0)
           || v66(v65, v134)))
        {
LABEL_100:
          v67 = FigSignalErrorAt();
          v68 = v139;
        }
        else
        {
          if (v139)
            v67 = audioMentorEnqueueBufferConsumedMarker(a1, v139);
          else
            v67 = 0;
          v68 = 0;
        }
        if (*(_BYTE *)(a1 + 492))
        {
          videoMentorPostCollectorCoherenceConduitNotification(a1);
          *(_BYTE *)(a1 + 492) = 0;
        }
        if (v127 && (v67 + 1) <= 1)
          videoMentorPostMinAndMaxUpcomingOutputPTS(a1, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18]);
        videoMentorThreadFinishPreroll(a1, 0, v136);
        if (!*(_BYTE *)a1)
        {
          v69 = CFSTR("MentorStoppingDueToCompletion");
          if (v67)
            v69 = CFSTR("MentorStoppingDueToError");
          if (v67 == -1)
            v70 = 0;
          else
            v70 = v67;
          if (v67 == -1)
            v71 = CFSTR("MentorResettingDueToModeSwitch");
          else
            v71 = v69;
          v72 = FigMentorNotificationPayloadCreate((uint64_t)v71, v136, v70, *(unsigned __int8 *)(a1 + 520), v68, 0);
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterPostNotification();
          if (v72)
            CFRelease(v72);
        }
        videoMentorThrottlingStateFree(v121);
        v73 = (const void *)v156.value;
        if (v156.value)
LABEL_219:
          CFRelease(v73);
        goto LABEL_220;
      default:
        goto LABEL_220;
    }
  }
}

void VideoMentorDispose(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;

  if (a1)
  {
    VideoMentorInvalidate(a1);
    if (a1[11])
    {
      FigSemaphoreDestroy();
      a1[11] = 0;
    }
    if (a1[12])
    {
      FigSimpleMutexDestroy();
      a1[12] = 0;
    }
    if (a1[10])
    {
      FigSimpleMutexDestroy();
      a1[10] = 0;
    }
    if (a1[33])
    {
      FigSimpleMutexDestroy();
      a1[33] = 0;
    }
    if (a1[15])
    {
      FigSemaphoreDestroy();
      a1[15] = 0;
    }
    v2 = (const void *)a1[16];
    if (v2)
      CFRelease(v2);
    v3 = (const void *)a1[21];
    if (v3)
      CFRelease(v3);
    v4 = (const void *)a1[25];
    if (v4)
      CFRelease(v4);
    v5 = (const void *)a1[57];
    if (v5)
      CFRelease(v5);
    v6 = (const void *)a1[58];
    if (v6)
      CFRelease(v6);
    v7 = (const void *)a1[59];
    if (v7)
      CFRelease(v7);
    v8 = (const void *)a1[60];
    if (v8)
      CFRelease(v8);
    videoMentorDependencyStateReset((uint64_t)(a1 + 93));
    v9 = (const void *)a1[1];
    if (v9)
      CFRelease(v9);
    v10 = (const void *)a1[2];
    if (v10)
      CFRelease(v10);
    v11 = (const void *)a1[3];
    if (v11)
      CFRelease(v11);
    v12 = (const void *)a1[6];
    if (v12)
      CFRelease(v12);
    free(a1);
  }
}

uint64_t EditMentorNewWithChildVideoMentor(_QWORD *a1, const void *a2, _QWORD *a3)
{
  return editMentorNewWithChildAudioVideoEditOrCallbacksMentorAndSingleEditSegmentOrTrack(0, a1, 0, 0, 0, a2, 0, a3);
}

uint64_t VideoMentorSetTimeRemapCallback(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x19402EEEC](a1[10]);
  a1[7] = a2;
  a1[8] = a3;
  a1[9] = a4;
  MEMORY[0x19402EF04](a1[10]);
  return 0;
}

void vmc2DecodeUntilHighWaterMet(uint64_t a1)
{
  int v2;
  CFTypeRef v3;
  uint64_t v4;
  const void *v5;
  uint64_t (*v6)(_QWORD);
  int v7;
  int v8;
  int v9;
  int WaterLevelState;
  _BOOL4 v11;
  _BOOL4 v12;
  int v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  int v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  opaqueCMSampleBuffer *v19;
  _BOOL4 v20;
  opaqueCMSampleBuffer *v21;
  const __CFArray *SampleAttachmentsArray;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v24;
  CFTypeRef v25;
  CFTypeRef v26;
  _BOOL4 v28;
  int v29;
  int v30;
  int v31;
  char v32;
  const void *v33;
  _DWORD *SourceFrameInfo;
  int v35;
  int CompressedFrameOutputMode;
  _BOOL4 v37;
  BOOL v38;
  _BOOL4 v39;
  const __CFArray *v40;
  const __CFDictionary *v41;
  uint64_t v42;
  CMItemCount NumSamples;
  uint64_t v44;
  int v45;
  CFTypeRef v46;
  OpaqueVTDecompressionSession *v47;
  int v48;
  const void *v49;
  int v50;
  const void *v51;
  int v52;
  VTDecodeFrameFlags v53;
  const void *v54;
  void *v55;
  int v56;
  OpaqueVTDecompressionSession *v57;
  OpaqueVTDecompressionSession *v58;
  __CVBuffer *ImageBuffer;
  CVPixelBufferRef v60;
  CVPixelBufferRef v61;
  const void *TaggedBufferGroup;
  uint64_t v63;
  int v64;
  int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  const __CFArray *v69;
  CVPixelBufferRef v70;
  const __CFArray *v71;
  const CFArrayCallBacks *v72;
  __CFArray *Mutable;
  CFMutableArrayRef v74;
  __CFArray *v75;
  CFIndex Count;
  CFIndex v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  CVPixelBufferRef v81;
  const opaqueCMFormatDescription *FormatDescription;
  OpaqueVTDecompressionSession *v83;
  CFTypeRef v84;
  CFTypeRef v85;
  OpaqueVTDecompressionSession *v86;
  int v87;
  OpaqueCMBlockBuffer *DataBuffer;
  OSStatus v89;
  const void *v90;
  const void *v91;
  const void *v92;
  const void *v93;
  NSObject *v94;
  void (*v95)(CFTypeRef, uint64_t);
  const void *v96;
  uint64_t v97;
  CFTypeRef v98;
  CFTypeRef v99;
  OpaqueVTDecompressionSession *v100;
  void (*v101)(_QWORD, uint64_t, CFTypeRef);
  const void *v102;
  const void *v103;
  const void *v104;
  const void *v105;
  const void *v106;
  const void *v107;
  const void *v108;
  int v109;
  _BOOL4 v110;
  int v111;
  int v112;
  _BOOL4 v113;
  uint64_t v114;
  int v115;
  int v116;
  int v117;
  _OWORD *v118;
  _OWORD *v119;
  _OWORD *v120;
  const __CFString *v121;
  void *v122;
  void *v123;
  void *v124;
  void *key;
  _BOOL4 v126;
  CFTypeRef v127;
  CFTypeRef v128;
  CFTypeRef v129;
  const __CFString *v130;
  const __CFString *v131;
  const __CFString *v132;
  const __CFString *v133;
  const __CFString *v134;
  const __CFString *v135;
  uint64_t v136;
  const void *v137;
  const __CFString *v138;
  const __CFString *v139;
  VTDecodeFrameFlags v140;
  const __CFString *propertyKey;
  int v142;
  const __CFAllocator *allocator;
  uint64_t v144;
  const __CFNumber *propertyValueOut;
  int valuePtr;
  CMTime value;
  void *v148;
  CMTime *v149;
  uint64_t v150;
  CMTime v151;
  uint64_t v152;
  uint64_t context;
  opaqueCMSampleBuffer *v154;
  __CVBuffer *v155;
  CFTypeRef v156;
  CVPixelBufferRef pixelBufferOut;
  CMTime rhs;
  CMTime time2;
  CMTime time1;

  valuePtr = 0;
  propertyValueOut = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 296));
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  if (!*(_BYTE *)(a1 + 288))
    goto LABEL_328;
  v2 = 0;
  propertyKey = (const __CFString *)*MEMORY[0x1E0CED350];
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  key = (void *)*MEMORY[0x1E0CA2620];
  v124 = (void *)*MEMORY[0x1E0CA2628];
  v3 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
  v123 = (void *)*MEMORY[0x1E0CA2600];
  v135 = (const __CFString *)*MEMORY[0x1E0CA2678];
  v121 = (const __CFString *)*MEMORY[0x1E0CA26C0];
  v134 = (const __CFString *)*MEMORY[0x1E0CA2658];
  v133 = (const __CFString *)*MEMORY[0x1E0CA4E50];
  v132 = (const __CFString *)*MEMORY[0x1E0CA4E70];
  v131 = (const __CFString *)*MEMORY[0x1E0CA4E58];
  v122 = (void *)*MEMORY[0x1E0CA4E18];
  v4 = a1 + 392;
  v120 = (_OWORD *)(a1 + 320);
  v118 = (_OWORD *)(a1 + 368);
  v119 = (_OWORD *)(a1 + 344);
  v130 = (const __CFString *)*MEMORY[0x1E0CA26E0];
  v139 = (const __CFString *)*MEMORY[0x1E0CA26C8];
  v136 = *MEMORY[0x1E0CA2778];
  v138 = (const __CFString *)*MEMORY[0x1E0CA4E60];
  v137 = (const void *)*MEMORY[0x1E0C9AE50];
  while (vmc2GetWaterLevelState(a1) != 2)
  {
    v5 = *(const void **)(a1 + 64);
    if (v5)
      VTSessionCopyProperty(v5, propertyKey, allocator, &propertyValueOut);
    if (propertyValueOut)
    {
      CFNumberGetValue(propertyValueOut, kCFNumberSInt32Type, &valuePtr);
      if (propertyValueOut)
      {
        CFRelease(propertyValueOut);
        propertyValueOut = 0;
      }
    }
    else
    {
      valuePtr = 0;
    }
    FigReadWriteLockLockForRead();
    if (*(_BYTE *)(a1 + 249))
    {
      v6 = *(uint64_t (**)(_QWORD))(a1 + 192);
      if (v6)
      {
        v7 = v6(*(_QWORD *)(a1 + 152));
        goto LABEL_17;
      }
    }
    else
    {
      FigSignalErrorAt();
    }
    v7 = 99;
LABEL_17:
    FigReadWriteLockUnlockForRead();
    v8 = valuePtr;
    v9 = *(unsigned __int8 *)(a1 + 592);
    WaterLevelState = vmc2GetWaterLevelState(a1);
    if (v7 <= v8)
    {
      v111 = WaterLevelState == 2 && *(_BYTE *)(a1 + 440) == 0;
      v114 = a1;
      v115 = v9;
      v116 = 0;
      goto LABEL_327;
    }
    if (WaterLevelState)
      v11 = *(_BYTE *)(a1 + 440) != 0;
    else
      v11 = 1;
    v12 = vmc2GetWaterLevelState(a1) != 2 || *(_BYTE *)(a1 + 440) != 0;
    vmc2UpdateTroubleMonitor(a1, v9, v11, !v12, 1);
    v156 = 0;
    pixelBufferOut = 0;
    v154 = 0;
    v155 = 0;
    context = 0;
    if (*(_BYTE *)(a1 + 864))
      v13 = 8;
    else
      v13 = 9;
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 280));
    v14 = *(_QWORD *)(a1 + 88);
    v15 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v15)
      v16 = v15(v14);
    else
      v16 = 0;
    *(_BYTE *)(a1 + 312) = v16 == 0;
    v17 = *(_QWORD *)(a1 + 88);
    v18 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v18)
    {
      v19 = (opaqueCMSampleBuffer *)v18(v17);
      v20 = v19 != 0;
      *(_BYTE *)(a1 + 592) = v20;
      if (v19)
      {
        v21 = v19;
        SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(v19, 0);
        if (SampleAttachmentsArray
          && (ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0)) != 0)
        {
          v24 = ValueAtIndex;
          v25 = CFDictionaryGetValue(ValueAtIndex, key);
          v26 = CFDictionaryGetValue(v24, v124);
          v28 = v25 != v3 || v26 == v3;
          value.value = 0;
          LODWORD(v151.value) = 0;
          CFDictionaryGetValueIfPresent(v24, v123, (const void **)&value);
          LODWORD(time1.value) = 0;
          FigCFDictionaryGetIntIfPresent();
          if (value.value)
            FigCFDictionaryGetIntIfPresent();
          v29 = v151.value;
          v30 = *(_DWORD *)(a1 + 620);
          if (SLODWORD(v151.value) > v30)
          {
            *(_DWORD *)(a1 + 620) = v151.value;
            v30 = v29;
          }
          if (v28)
          {
            v31 = *(_DWORD *)(a1 + 616);
            if (v30 < v31)
              v30 = v31 - 1;
            *(_DWORD *)(a1 + 616) = v30;
            *(_DWORD *)(a1 + 620) = 0;
          }
          v126 = v25 != v3;
          if (v25 != v3 && (LODWORD(time1.value) == 21 || LODWORD(time1.value) == 16))
            *(_BYTE *)(a1 + 1065) = 1;
        }
        else
        {
          v126 = 0;
        }
        if (*(_BYTE *)(a1 + 440))
        {
          CompressedFrameOutputMode = vmcGetCompressedFrameOutputMode(v21);
          if ((CompressedFrameOutputMode & 3) != 1)
            *(_BYTE *)(a1 + 441) = 1;
        }
        else
        {
          CompressedFrameOutputMode = 0;
        }
        v140 = v13;
        if (CMGetAttachment(v21, v135, 0) == v3)
        {
          v38 = CMGetAttachment(v21, v121, 0) == v3;
          v37 = v38;
        }
        else
        {
          v37 = 0;
          v38 = 1;
        }
        v127 = CMGetAttachment(v21, v134, 0);
        v128 = CMGetAttachment(v21, v133, 0);
        v129 = CMGetAttachment(v21, v132, 0);
        v39 = CMGetAttachment(v21, v131, 0) == v3;
        v40 = CMSampleBufferGetSampleAttachmentsArray(v21, 0);
        HIDWORD(v144) = v39;
        if (v40
          && (v41 = (const __CFDictionary *)CFArrayGetValueAtIndex(v40, 0)) != 0
          && CFDictionaryGetValue(v41, v122))
        {
          v42 = a1 + 800;
          do
            v42 = *(_QWORD *)v42;
          while (v42 && !FigCFEqual());
        }
        else
        {
          v42 = 0;
        }
        context = a1;
        v154 = v21;
        dispatch_sync_f(*(dispatch_queue_t *)(a1 + 816), &context, (dispatch_function_t)vmc2UpdateCPECryptor);
        *(_BYTE *)(a1 + 730) = v37;
        if (v37)
          vmc2RecalculateUpcomingImageTimes(a1);
        NumSamples = CMSampleBufferGetNumSamples(v21);
        if (NumSamples < 1)
        {
          v142 = 0;
        }
        else
        {
          CompressedFrameOutputMode = vmcGetCompressedFrameOutputMode(v21);
          memset(&value, 0, sizeof(value));
          CMSampleBufferGetOutputPresentationTimeStamp(&value, v21);
          if ((CompressedFrameOutputMode & 3) == 1)
          {
            v44 = MEMORY[0x1E0CA2E18];
            *(_OWORD *)v4 = *MEMORY[0x1E0CA2E18];
            *(_QWORD *)(v4 + 16) = *(_QWORD *)(v44 + 16);
          }
          else
          {
            *(CMTime *)v4 = value;
            if (*(_QWORD *)(a1 + 64))
            {
              memset(&v151, 0, sizeof(v151));
              CMSampleBufferGetOutputDuration(&v151, v21);
              time1 = value;
              *(_OWORD *)&time2.value = *v120;
              time2.epoch = *(_QWORD *)(a1 + 336);
              if (CMTimeCompare(&time1, &time2) < 0)
              {
                *v120 = *(_OWORD *)&value.value;
                *(_QWORD *)(a1 + 336) = value.epoch;
                v45 = 1;
              }
              else
              {
                v45 = 0;
              }
              if ((value.flags & 1) != 0)
              {
                time1 = value;
                *(_OWORD *)&time2.value = *v119;
                time2.epoch = *(_QWORD *)(a1 + 360);
                if (CMTimeCompare(&time1, &time2) > 0 || (*(_BYTE *)(a1 + 356) & 1) == 0)
                {
                  *v119 = *(_OWORD *)&value.value;
                  *(_QWORD *)(a1 + 360) = value.epoch;
                  v45 = 1;
                }
              }
              if ((value.flags & 1) != 0)
              {
                if ((v151.flags & 1) == 0
                  || (time2 = value, rhs = v151, CMTimeAdd(&time1, &time2, &rhs), value = time1, (time1.flags & 1) != 0))
                {
                  if ((*(_BYTE *)(a1 + 380) & 1) == 0
                    || (time1 = value,
                        *(_OWORD *)&time2.value = *v118,
                        time2.epoch = *(_QWORD *)(a1 + 384),
                        CMTimeCompare(&time1, &time2) >= 1))
                  {
                    *v118 = *(_OWORD *)&value.value;
                    *(_QWORD *)(a1 + 384) = value.epoch;
                  }
                }
              }
              if (v45)
              {
                ++*(_DWORD *)(a1 + 316);
                vmc2RecalculateUpcomingImageTimes(a1);
              }
            }
          }
          *(_BYTE *)(a1 + 312) = 0;
          v142 = 1;
        }
        MEMORY[0x19402EA24](*(_QWORD *)(a1 + 280));
        v46 = CMGetAttachment(v21, v130, 0);
        if (v46)
        {
          v47 = *(OpaqueVTDecompressionSession **)(a1 + 64);
          if (v47)
            VTDecompressionSessionWaitForAsynchronousFrames(v47);
        }
        MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 776));
        v48 = *(_DWORD *)(a1 + 792);
        v49 = *(const void **)(a1 + 784);
        if (v49)
          v50 = 0;
        else
          v50 = *(_DWORD *)(a1 + 792);
        LODWORD(v144) = v50;
        if (v46 && v49)
        {
          if (CFEqual(v46, v49))
          {
            v51 = *(const void **)(a1 + 784);
            if (v51)
            {
              CFRelease(v51);
              *(_QWORD *)(a1 + 784) = 0;
            }
            LODWORD(v144) = v48;
          }
          else
          {
            LODWORD(v144) = 0;
          }
        }
        MEMORY[0x19402EF04](*(_QWORD *)(a1 + 776));
        if (!*(_BYTE *)(a1 + 728))
        {
          v4 = a1 + 392;
          v52 = v142;
          goto LABEL_113;
        }
        v4 = a1 + 392;
        if (v38)
        {
          v52 = v142;
          if (v37)
            v52 = 1;
LABEL_113:
          v142 = v52;
          v53 = v140;
          if (NumSamples < 1)
          {
            SourceFrameInfo = 0;
            goto LABEL_130;
          }
          SourceFrameInfo = vmcCreateSourceFrameInfo(CompressedFrameOutputMode, v21, v144);
          vmcCreateAttachmentsDictionaryForSourceFrameInfo(a1, (uint64_t)SourceFrameInfo, (uint64_t)v21);
          if ((CompressedFrameOutputMode & 7) == 1)
            v53 = v140 | 2;
          MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 576));
          v54 = *(const void **)(a1 + 584);
          if (v54)
            v55 = (void *)CFRetain(v54);
          else
            v55 = 0;
          MEMORY[0x19402EF04](*(_QWORD *)(a1 + 576));
          if ((CompressedFrameOutputMode & 3) != 0 || *(_DWORD *)(a1 + 608) || !v55)
          {
            if (v55)
              goto LABEL_128;
          }
          else
          {
            if (!*(_BYTE *)(a1 + 861)
              && CMTimebaseGetRate((CMTimebaseRef)v55) > 0.9
              && CMTimebaseGetRate((CMTimebaseRef)v55) < 1.1)
            {
              CFRelease(v55);
              v53 |= 4u;
              ++*(_DWORD *)(a1 + 1116);
LABEL_130:
              ImageBuffer = CMSampleBufferGetImageBuffer(v21);
              pixelBufferOut = ImageBuffer;
              if (ImageBuffer)
              {
                CFRetain(ImageBuffer);
                if (!VTPixelBufferConformerCopyConformedPixelBuffer())
                {
                  v60 = pixelBufferOut;
                  pixelBufferOut = v155;
                  v3 = v137;
                  if (v155)
                    CFRetain(v155);
                  if (v60)
                    CFRelease(v60);
                  v32 = 1;
                  if ((v53 & 2) == 0)
                  {
                    vmc2UpdateSessionMinAndMaxOutputPTS(a1);
                    v61 = pixelBufferOut;
                    CMSampleBufferGetOutputPresentationTimeStamp(&value, v21);
                    CMSampleBufferGetOutputDuration(&v151, v21);
                    vmc2OutputFrameInternal(a1, SourceFrameInfo, 0, 0, (uint64_t)v61, 0, &value, (__int128 *)&v151.value, 1);
                  }
                  v33 = 0;
                  SourceFrameInfo = 0;
LABEL_255:
                  v20 = 1;
LABEL_256:
                  v35 = v142;
                  goto LABEL_257;
                }
                v33 = 0;
LABEL_304:
                v32 = 1;
                v20 = 1;
                v3 = v137;
                goto LABEL_256;
              }
              TaggedBufferGroup = (const void *)FigSampleBufferGetTaggedBufferGroup();
              if (TaggedBufferGroup)
              {
                v33 = TaggedBufferGroup;
                CFRetain(TaggedBufferGroup);
                if (VTPixelBufferConformerCopyConformedTaggedBufferGroup())
                  goto LABEL_304;
                CFRelease(v33);
                v3 = v137;
                if ((v53 & 2) == 0)
                {
                  vmc2UpdateSessionMinAndMaxOutputPTS(a1);
                  v63 = (uint64_t)v156;
                  CMSampleBufferGetOutputPresentationTimeStamp(&value, v21);
                  CMSampleBufferGetOutputDuration(&v151, v21);
                  vmc2OutputFrameInternal(a1, SourceFrameInfo, 0, 0, 0, v63, &value, (__int128 *)&v151.value, 1);
                }
                if (v156)
                {
                  CFRelease(v156);
                  v33 = 0;
                  SourceFrameInfo = 0;
                  v156 = 0;
LABEL_254:
                  v32 = 1;
                  goto LABEL_255;
                }
LABEL_156:
                v33 = 0;
                SourceFrameInfo = 0;
                goto LABEL_254;
              }
              if (v42)
              {
                v64 = vmcGetCompressedFrameOutputMode(v21);
                v3 = v137;
                if (!SourceFrameInfo)
                {
                  SourceFrameInfo = vmcCreateSourceFrameInfo(v64, v21, v144);
                  vmcCreateAttachmentsDictionaryForSourceFrameInfo(a1, (uint64_t)SourceFrameInfo, (uint64_t)v21);
                }
                vmc2UpdateSessionMinAndMaxOutputPTS(a1);
                v65 = *(_DWORD *)(v42 + 16);
                v66 = *(_DWORD *)(v42 + 20);
                v67 = *(_QWORD *)(v42 + 24);
                v68 = *(_QWORD *)(v42 + 32);
                value = *(CMTime *)(v42 + 40);
                v151 = *(CMTime *)(v42 + 64);
                vmc2OutputFrameInternal(a1, SourceFrameInfo, v65, v66, v67, v68, &value, (__int128 *)&v151.value, 0);
                goto LABEL_156;
              }
              if (NumSamples < 1)
              {
                v3 = v137;
                v85 = v128;
                v84 = v129;
                goto LABEL_235;
              }
              FormatDescription = CMSampleBufferGetFormatDescription(v21);
              v3 = v137;
              if (*(const opaqueCMFormatDescription **)(a1 + 32) != FormatDescription && FigCFEqual())
                vmc2SetVideoFormatDescription(a1, FormatDescription);
              if (*(_QWORD *)(a1 + 64) && *(const opaqueCMFormatDescription **)(a1 + 32) == FormatDescription)
                goto LABEL_205;
              *(_BYTE *)(a1 + 1065) = 0;
              MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 1160));
              *(_DWORD *)(a1 + 1180) = CMFormatDescriptionGetMediaSubType(FormatDescription);
              MEMORY[0x19402EF04](*(_QWORD *)(a1 + 1160));
              v83 = *(OpaqueVTDecompressionSession **)(a1 + 64);
              if (v83)
              {
                if (VTDecompressionSessionCanAcceptFormatDescription(v83, FormatDescription))
                {
                  vmc2SetVideoFormatDescription(a1, FormatDescription);
                  vmc2BroadcastHDRStatus(a1);
                  goto LABEL_205;
                }
                v86 = *(OpaqueVTDecompressionSession **)(a1 + 64);
                if (v86)
                  VTDecompressionSessionWaitForAsynchronousFrames(v86);
              }
              MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 72));
              vmc2RemoveDecompressionSession(a1);
              *(_BYTE *)(a1 + 1064) = 0;
              vmc2SetVideoFormatDescription(a1, FormatDescription);
              vmc2BroadcastHDRStatus(a1);
              if (!*(_QWORD *)(a1 + 32))
              {
                MEMORY[0x19402EF04](*(_QWORD *)(a1 + 72));
                goto LABEL_205;
              }
              v87 = vmc2BuildDecompressionSession(a1);
              MEMORY[0x19402EF04](*(_QWORD *)(a1 + 72));
              if (!v87)
              {
LABEL_205:
                if (*(_BYTE *)(a1 + 1034))
                  goto LABEL_206;
                if (!*(_BYTE *)(a1 + 1033))
                {
                  if (v126 && !*(_QWORD *)(a1 + 64))
                    goto LABEL_213;
                  goto LABEL_215;
                }
                if (!v126)
                  goto LABEL_215;
LABEL_213:
                if (*(_BYTE *)(a1 + 1065) && !*(_QWORD *)(a1 + 808))
                {
LABEL_215:
                  DataBuffer = CMSampleBufferGetDataBuffer(v21);
                  if (DataBuffer)
                  {
                    if (CMBlockBufferIsRangeContiguous(DataBuffer, 0, 0))
                      ++*(_DWORD *)(a1 + 1148);
                    else
                      ++*(_DWORD *)(a1 + 1152);
                  }
                  v89 = VTDecompressionSessionDecodeFrame(*(VTDecompressionSessionRef *)(a1 + 64), v21, v53, SourceFrameInfo, 0);
                  if (v89)
                  {
                    v85 = v128;
                    v84 = v129;
                    if (v89 == -17690)
                    {
                      v90 = *(const void **)(a1 + 1056);
                      v91 = *(const void **)(a1 + 1048);
                      *(_QWORD *)(a1 + 1056) = v91;
                      if (v91)
                        CFRetain(v91);
                      if (v90)
                        CFRelease(v90);
                      v92 = *(const void **)(a1 + 1040);
                      if (v92)
                      {
                        CFRelease(v92);
                        *(_QWORD *)(a1 + 1040) = 0;
                      }
                      v93 = *(const void **)(a1 + 1048);
                      if (v93)
                      {
                        CFRelease(v93);
                        *(_QWORD *)(a1 + 1048) = 0;
                      }
                      if (vmc2RebuildDecompressionSession(a1))
                      {
                        CMSampleBufferGetOutputPresentationTimeStamp(&value, v21);
                        vmc2PostDecodeError(a1);
                        goto LABEL_156;
                      }
                      SourceFrameInfo = 0;
                    }
                    else
                    {
                      CMSampleBufferGetOutputPresentationTimeStamp(&time1, v21);
                      vmc2PostDecodeError(a1);
                    }
                  }
                  else
                  {
                    SourceFrameInfo = 0;
                    v85 = v128;
                    v84 = v129;
                  }
                  vmc2UpdateSessionMinAndMaxOutputPTS(a1);
LABEL_235:
                  if (*(_QWORD *)(a1 + 64))
                  {
                    if (v127 == v3 || v85 == v3 || v84)
                    {
                      MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 72));
                      VTDecompressionSessionFinishDelayedFrames(*(VTDecompressionSessionRef *)(a1 + 64));
                      if (v85 == v3 || v84)
                        VTDecompressionSessionWaitForAsynchronousFrames(*(VTDecompressionSessionRef *)(a1 + 64));
                      if (v85 == v3)
                        vmc2RemoveDecompressionSession(a1);
                      MEMORY[0x19402EF04](*(_QWORD *)(a1 + 72));
                      goto LABEL_245;
                    }
                  }
                  else
                  {
LABEL_245:
                    if (v84)
                    {
                      v151.value = 0;
                      *(_QWORD *)&v151.timescale = &v151;
                      v151.epoch = 0x2000000000;
                      v152 = 0;
                      v94 = *(NSObject **)(a1 + 968);
                      value.value = MEMORY[0x1E0C809B0];
                      *(_QWORD *)&value.timescale = 0x40000000;
                      value.epoch = (CMTimeEpoch)__vmc2DequeueAndDecodeFrame_block_invoke;
                      v148 = &unk_1E2F7CD58;
                      v149 = &v151;
                      v150 = a1;
                      dispatch_sync(v94, &value);
                      if (*(_QWORD *)(*(_QWORD *)&v151.timescale + 24))
                        VTTemporalFilterSessionCompleteFrames();
                      v95 = *(void (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
                      if (v95)
                        v95(v84, 1);
                      v96 = *(const void **)(*(_QWORD *)&v151.timescale + 24);
                      if (v96)
                        CFRelease(v96);
                      _Block_object_dispose(&v151, 8);
                    }
                  }
LABEL_253:
                  v33 = 0;
                  goto LABEL_254;
                }
LABEL_206:
                if (!vmc2RebuildDecompressionSession(a1))
                  goto LABEL_215;
              }
              CMSampleBufferGetOutputPresentationTimeStamp(&value, v21);
              vmc2PostDecodeError(a1);
              goto LABEL_253;
            }
LABEL_128:
            CFRelease(v55);
          }
          ++*(_DWORD *)(a1 + 1112);
          goto LABEL_130;
        }
        v56 = vmcGetCompressedFrameOutputMode(v21);
        SourceFrameInfo = vmcCreateSourceFrameInfo(v56, v21, v144);
        vmcCreateAttachmentsDictionaryForSourceFrameInfo(a1, (uint64_t)SourceFrameInfo, (uint64_t)v21);
        v57 = *(OpaqueVTDecompressionSession **)(a1 + 64);
        if (v57)
          VTDecompressionSessionWaitForAsynchronousFrames(v57);
        v3 = v137;
        if (*(_BYTE *)(a1 + 729))
        {
          v58 = *(OpaqueVTDecompressionSession **)(a1 + 64);
          if (v58)
          {
            if (VTDecompressionSessionCopyBlackPixelBuffer(v58, &pixelBufferOut))
              goto LABEL_253;
          }
          else if (*(_QWORD *)(a1 + 80))
          {
            VTPixelBufferConformerCopyBlackPixelBuffer();
          }
          ++*(_DWORD *)(a1 + 1128);
        }
        else
        {
          FigCreateNullPixelBuffer(allocator, &pixelBufferOut);
        }
        v69 = *(const __CFArray **)(a1 + 256);
        if (v69 && CFArrayGetCount(v69) >= 1)
        {
          v70 = pixelBufferOut;
          v71 = *(const __CFArray **)(a1 + 256);
          v151.value = 0;
          time1.value = 0;
          v72 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
          Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
          v74 = CFArrayCreateMutable(allocator, 0, v72);
          v75 = v74;
          if (!Mutable || !v74)
            goto LABEL_301;
          if (v71 && (Count = CFArrayGetCount(v71), Count >= 1))
          {
            v77 = Count;
            v78 = 0;
            while (1)
            {
              LODWORD(time2.value) = 0;
              FigCFArrayGetInt32AtIndex();
              value.value = 0;
              *(_QWORD *)&value.timescale = 0;
              value.value = FigTagMakeWithSInt64Value();
              *(_QWORD *)&value.timescale = v79;
              FigTagCollectionCreate();
              if (!time1.value)
                break;
              CFArrayAppendValue(Mutable, (const void *)time1.value);
              CFArrayAppendValue(v75, v70);
              if (time1.value)
              {
                CFRelease((CFTypeRef)time1.value);
                time1.value = 0;
              }
              if (v77 == ++v78)
                goto LABEL_171;
            }
LABEL_301:
            v80 = FigSignalErrorAt();
LABEL_302:
            v33 = 0;
          }
          else
          {
LABEL_171:
            v80 = MEMORY[0x19402F0D8](allocator, Mutable, v75, &v151);
            if (v80)
              goto LABEL_302;
            v33 = (const void *)v151.value;
            v151.value = 0;
          }
          if (time1.value)
            CFRelease((CFTypeRef)time1.value);
          if (Mutable)
            CFRelease(Mutable);
          if (v75)
            CFRelease(v75);
          if (v151.value)
            CFRelease((CFTypeRef)v151.value);
          v3 = v137;
          if (v80)
          {
            v32 = 1;
            v20 = 1;
            v4 = a1 + 392;
            goto LABEL_256;
          }
          CMSampleBufferGetOutputPresentationTimeStamp(&v151, v21);
          value = v151;
          vmc2OutputFrameInternal(a1, SourceFrameInfo, 0, 0, 0, (uint64_t)v33, &value, MEMORY[0x1E0CA2E18], 0);
          v4 = a1 + 392;
          if (v33)
            CFRelease(v33);
        }
        else
        {
          v81 = pixelBufferOut;
          CMSampleBufferGetOutputPresentationTimeStamp(&v151, v21);
          value = v151;
          vmc2OutputFrameInternal(a1, SourceFrameInfo, 0, 0, (uint64_t)v81, 0, &value, MEMORY[0x1E0CA2E18], 0);
        }
        if (pixelBufferOut)
        {
          CFRelease(pixelBufferOut);
          v33 = 0;
          SourceFrameInfo = 0;
          pixelBufferOut = 0;
        }
        else
        {
          v33 = 0;
          SourceFrameInfo = 0;
        }
        v32 = 1;
        v20 = 1;
        v35 = 1;
        goto LABEL_257;
      }
    }
    else
    {
      v20 = 0;
      *(_BYTE *)(a1 + 592) = 0;
    }
    *(_BYTE *)(a1 + 312) = 0;
    if (*MEMORY[0x1E0CA1FC0] == 1)
      kdebug_trace();
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 1160));
    ++*(_DWORD *)(a1 + 1384);
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 1160));
    MEMORY[0x19402EA24](*(_QWORD *)(a1 + 280));
    vmc2CheckForEnd(a1);
    v32 = 0;
    v21 = 0;
    v33 = 0;
    SourceFrameInfo = 0;
    v35 = 0;
    v144 = 0;
LABEL_257:
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 280));
    *(_BYTE *)(a1 + 312) = 0;
    v97 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)v4 = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(v97 + 16);
    MEMORY[0x19402EA24](*(_QWORD *)(a1 + 280));
    if (v35)
      vmc2RecalculateUpcomingImageTimes(a1);
    if (HIDWORD(v144))
    {
      vmc2ClearSavedList(a1);
      if (!v20)
      {
LABEL_261:
        if (!SourceFrameInfo)
          goto LABEL_290;
LABEL_275:
        v102 = (const void *)*((_QWORD *)SourceFrameInfo + 1);
        if (v102)
          CFRelease(v102);
        v103 = (const void *)*((_QWORD *)SourceFrameInfo + 2);
        if (v103)
          CFRelease(v103);
        v104 = (const void *)*((_QWORD *)SourceFrameInfo + 3);
        if (v104)
          CFRelease(v104);
        v105 = (const void *)*((_QWORD *)SourceFrameInfo + 4);
        if (v105)
          CFRelease(v105);
        v106 = (const void *)*((_QWORD *)SourceFrameInfo + 5);
        if (v106)
          CFRelease(v106);
        v107 = (const void *)*((_QWORD *)SourceFrameInfo + 6);
        if (v107)
          CFRelease(v107);
        v108 = (const void *)*((_QWORD *)SourceFrameInfo + 7);
        if (v108)
          CFRelease(v108);
        free(SourceFrameInfo);
        goto LABEL_290;
      }
    }
    else if (!v20)
    {
      goto LABEL_261;
    }
    v98 = CMGetAttachment(v21, v139, 0);
    if (v98)
    {
      v99 = v98;
      v100 = *(OpaqueVTDecompressionSession **)(a1 + 64);
      if (v100)
        VTDecompressionSessionWaitForAsynchronousFrames(v100);
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      if ((_DWORD)v144 == *(_DWORD *)(a1 + 792))
      {
        FigReadWriteLockLockForRead();
        if (*(_BYTE *)(a1 + 249))
        {
          v101 = *(void (**)(_QWORD, uint64_t, CFTypeRef))(a1 + 224);
          if (v101)
            v101(*(_QWORD *)(a1 + 152), v136, v99);
        }
        else
        {
          FigSignalErrorAt();
        }
        FigReadWriteLockUnlockForRead();
      }
    }
    if (CMGetAttachment(v21, v138, 0))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }
    CFRelease(v21);
    if (SourceFrameInfo)
      goto LABEL_275;
LABEL_290:
    if (v155)
      CFRelease(v155);
    if (pixelBufferOut)
      CFRelease(pixelBufferOut);
    if (v33)
      CFRelease(v33);
    if (v156)
      CFRelease(v156);
    if ((v32 & 1) == 0)
    {
      v112 = *(unsigned __int8 *)(a1 + 592);
      if (vmc2GetWaterLevelState(a1))
        v113 = *(_BYTE *)(a1 + 440) != 0;
      else
        v113 = 1;
      v111 = vmc2GetWaterLevelState(a1) == 2 && *(_BYTE *)(a1 + 440) == 0;
      v114 = a1;
      v115 = v112;
      v116 = v113;
      goto LABEL_327;
    }
    ++v2;
    if (!*(_BYTE *)(a1 + 288))
      goto LABEL_328;
  }
  v109 = *(unsigned __int8 *)(a1 + 592);
  if (vmc2GetWaterLevelState(a1))
    v110 = *(_BYTE *)(a1 + 440) != 0;
  else
    v110 = 1;
  v117 = vmc2GetWaterLevelState(a1) == 2 && *(_BYTE *)(a1 + 440) == 0;
  vmc2UpdateTroubleMonitor(a1, v109, v110, v117, 1);
  v115 = *(unsigned __int8 *)(a1 + 592);
  v114 = a1;
  v116 = 0;
  v111 = 1;
LABEL_327:
  vmc2UpdateTroubleMonitor(v114, v115, v116, v111, 1);
LABEL_328:
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 296));
  FigSemaphoreSignal();
  vmc2PostCompletedDecodeForPrerollIfPreviouslyRequestedAndMaybeRecordNewRequest(a1, 0, 0);
}

uint64_t piqca_getSafeDisplayDuration@<X0>(uint64_t a1@<X0>, CMTime *a2@<X8>)
{
  uint64_t DerivedStorage;
  int v5;
  int v6;
  uint64_t result;
  CMTime v8;
  CMTime time;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(_DWORD *)(DerivedStorage + 216);
  v6 = *(_DWORD *)(DerivedStorage + 160);
  time = *(CMTime *)(DerivedStorage + 164);
  v8 = *(CMTime *)(DerivedStorage + 188);
  result = FigImageQueueCalculateSafeDisplayDuration(a1, v5, v6, &time, &v8, (uint64_t)a2);
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    time = *a2;
    CMTimeGetSeconds(&time);
    return kdebug_trace();
  }
  return result;
}

uint64_t FigImageQueueCalculateSafeDisplayDuration@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, CMTime *a4@<X3>, CMTime *a5@<X4>, uint64_t a6@<X8>)
{
  CMTimeEpoch epoch;
  uint64_t v12;
  CMTimeFlags flags;
  uint64_t (*v14)(uint64_t, int *, CMTime *, CMTime *);
  CMTime *v15;
  CMTime *p_time2;
  CMTime *p_rhs;
  uint64_t v18;
  CMTime v19;
  CMTime rhs;
  CMTime time2;
  CMTime v22;
  CMTime time1;
  CMTime v24;
  CMTime v25;
  int v26;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  value = *MEMORY[0x1E0CA2E18];
  timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  *(_OWORD *)&v25.value = *MEMORY[0x1E0CA2E18];
  v25.epoch = epoch;
  *(_OWORD *)&v24.value = *(_OWORD *)&v25.value;
  v24.epoch = epoch;
  if (result)
  {
    v12 = result;
    flags = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
    result = CMBaseObjectGetVTable();
    v14 = *(uint64_t (**)(uint64_t, int *, CMTime *, CMTime *))(*(_QWORD *)(result + 16) + 64);
    if (v14)
    {
      v26 = 0;
      result = v14(v12, &v26, &v25, &v24);
      if (!(_DWORD)result)
      {
        v15 = (CMTime *)MEMORY[0x1E0CA2E68];
        if (v26)
        {
          if (a3 == 2)
          {
            if (a2 < 1)
            {
              time1 = v25;
              time2 = *a5;
              CMTimeMaximum(&rhs, &time1, &time2);
              time2 = v24;
              p_time2 = &time2;
              p_rhs = &rhs;
            }
            else
            {
              time1 = *a4;
              time2 = v24;
              CMTimeMinimum(&v22, &time1, &time2);
              time2 = v25;
              p_time2 = &v22;
              p_rhs = &time2;
            }
          }
          else
          {
            time2 = v24;
            v19 = v25;
            p_time2 = &time2;
            p_rhs = &v19;
          }
          result = (uint64_t)CMTimeSubtract(&time1, p_time2, p_rhs);
          value = time1.value;
          flags = time1.flags;
          timescale = time1.timescale;
          epoch = time1.epoch;
        }
        else
        {
          value = *MEMORY[0x1E0CA2E68];
          flags = *(_DWORD *)(MEMORY[0x1E0CA2E68] + 12);
          timescale = *(_DWORD *)(MEMORY[0x1E0CA2E68] + 8);
          epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
        }
        if ((flags & 0x1D) != 1
          || (time1.value = value,
              time1.timescale = timescale,
              time1.flags = flags,
              time1.epoch = epoch,
              time2 = *v15,
              result = CMTimeCompare(&time1, &time2),
              (result & 0x80000000) != 0))
        {
          value = v15->value;
          flags = v15->flags;
          timescale = v15->timescale;
          epoch = v15->epoch;
        }
      }
    }
    *(_QWORD *)a6 = value;
    *(_DWORD *)(a6 + 8) = timescale;
    *(_DWORD *)(a6 + 12) = flags;
    *(_QWORD *)(a6 + 16) = epoch;
  }
  else
  {
    v18 = MEMORY[0x1E0CA2E68];
    *(_OWORD *)a6 = *MEMORY[0x1E0CA2E68];
    *(_QWORD *)(a6 + 16) = *(_QWORD *)(v18 + 16);
  }
  return result;
}

uint64_t piqca_getOccupancyInfo(uint64_t a1, _DWORD *a2, CMTime *a3, CMTime *a4)
{
  uint64_t DerivedStorage;
  int UnconsumedImageCount;
  CMTime v10;
  CMTime v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v10 = v11;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)(DerivedStorage + 50))
  {
    UnconsumedImageCount = 0;
  }
  else
  {
    UnconsumedImageCount = CAImageQueueGetUnconsumedImageCount();
    CMTimeMakeWithSeconds(&v11, 0.0 + 0.000833333333, 600);
    CMTimeMakeWithSeconds(&v10, 0.0 + 0.000833333333, 600);
  }
  ++*(_DWORD *)(DerivedStorage + 2400);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 8));
  if (a2)
    *a2 = UnconsumedImageCount;
  if (a3)
    *a3 = v11;
  if (a4)
    *a4 = v10;
  return 0;
}

uint64_t piqca_canEnqueueImage()
{
  uint64_t DerivedStorage;
  uint64_t v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  piqca_evictExpiredFramesFromCAImageQueueIfEvictionNotDoneRecently();
  if (*(_BYTE *)(DerivedStorage + 50))
    return 99;
  v2 = *(_QWORD *)(DerivedStorage + 64);
  if (v2)
    return (v2 - 1);
  else
    return 0;
}

void vmc2UpdateTroubleMonitor(uint64_t a1, int a2, int a3, int a4, int a5)
{
  _BYTE *v10;
  _BYTE *v11;

  if (*(_BYTE *)(a1 + 626))
  {
    if (FigSimpleMutexTryLock())
    {
      vmc2UpdateTroubleMonitor2(a1, a2, a3, a4, a5);
      JUMPOUT(0x19402EF04);
    }
    if (*(_QWORD *)(a1 + 456))
    {
      v10 = malloc_type_malloc(0x10uLL, 0x10200405F07FB98uLL);
      if (v10)
      {
        v11 = v10;
        CFRetain((CFTypeRef)a1);
        *(_QWORD *)v11 = a1;
        v11[8] = a5;
        dispatch_async_f(*(dispatch_queue_t *)(a1 + 456), v11, (dispatch_function_t)vmc2WhileHoldingSessionVTMutexUpdateTroubleMonitor);
      }
    }
  }
}

CMBufferRef sbp_bq_getAndRetainNextSampleBufferIfReady()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
    return CMBufferQueueDequeueIfDataReadyAndRetain(*(CMBufferQueueRef *)(DerivedStorage + 8));
  FigSignalErrorAt();
  return 0;
}

uint64_t vmc2CheckForEnd(uint64_t result)
{
  uint64_t v1;

  if (!*(_BYTE *)(result + 520))
  {
    v1 = result;
    result = VMC2IsAtEndOfOutputData(result);
    if ((_DWORD)result)
    {
      if (!*(_BYTE *)(v1 + 312))
      {
        vmc2RecalculateUpcomingImageTimes(v1);
        MEMORY[0x19402EA0C](*(_QWORD *)(v1 + 280));
        *(_BYTE *)(v1 + 520) = 1;
        MEMORY[0x19402EA24](*(_QWORD *)(v1 + 280));
        CMNotificationCenterGetDefaultLocalCenter();
        return CMNotificationCenterPostNotification();
      }
    }
  }
  return result;
}

uint64_t VMC2IsAtEndOfOutputData(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t result;
  const void *v5;
  int valuePtr;
  const __CFNumber *propertyValueOut;

  v2 = *(_QWORD *)(a1 + 88);
  v3 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v3)
    return 0;
  result = v3(v2);
  if (!(_DWORD)result)
    return result;
  v5 = *(const void **)(a1 + 64);
  if (v5
    && (propertyValueOut = 0,
        VTSessionCopyProperty(v5, (CFStringRef)*MEMORY[0x1E0CED350], (CFAllocatorRef)*MEMORY[0x1E0C9AE00], &propertyValueOut), propertyValueOut)&& (valuePtr = 0, CFNumberGetValue(propertyValueOut, kCFNumberIntType, &valuePtr), CFRelease(propertyValueOut), valuePtr > 0))
  {
    return 0;
  }
  else
  {
    return 1;
  }
}

uint64_t sbp_bq_isAtEndOfData()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
    return CMBufferQueueIsAtEndOfData(*(CMBufferQueueRef *)(DerivedStorage + 8));
  FigSignalErrorAt();
  return 1;
}

uint64_t FigPlaybackBossSnapTimeToIFrame(uint64_t a1, OpaqueCMTimebase *a2, CMTime *a3, unsigned int a4, uint64_t a5)
{
  CMTime v6;

  v6 = *a3;
  return FigPlaybackBossSnapTimeToIFrameWithRange(a1, a2, &v6, a4, MEMORY[0x1E0CA2E28], MEMORY[0x1E0CA2E30], a5);
}

uint64_t bossGetTimeOfNextIFrameInDirection(uint64_t a1, CMTime *a2, int a3, int a4, int a5, CMTime *a6, char *a7, BOOL *a8)
{
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t (*v20)(uint64_t, CFTypeRef *);
  CFTypeRef v21;
  uint64_t (*v22)(CFTypeRef, CMTimeRange *, CFTypeRef *, char *, __int16 *);
  CFTypeRef v23;
  uint64_t (*v24)(CFTypeRef, _QWORD, CMTimeRange *);
  char v25;
  int i;
  CFTypeRef v27;
  uint64_t (*v28)(CFTypeRef, char *, __int16 *, _QWORD, _QWORD);
  int v29;
  CFTypeRef v30;
  uint64_t (*v31)(CFTypeRef, CMTimeRange *, _QWORD, _QWORD);
  uint64_t v32;
  CFTypeRef v33;
  uint64_t (*v34)(CFTypeRef, uint64_t, CMTime *);
  char v35;
  char v36;
  BOOL v37;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v39;
  uint64_t (*v40)(CFTypeRef, CMTime *);
  uint64_t v42;
  int v43;
  CMTime v46;
  os_log_type_t type;
  int v48;
  __int16 v49;
  CMTime v50;
  CMTime v51;
  CMTime v52;
  __int16 v53;
  CFTypeRef v54;
  CMTimeRange v55;
  CMTimeRange v56;
  CMTime v57;
  CMTimeRange v58;
  CMTimeRange v59;
  __int16 v60;
  CFTypeRef v61;
  CMTime v62;
  CMTimeRange fromRange;
  CMTimeRange toRange;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v62 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v61 = 0;
  v60 = 0;
  v14 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 48);
  *(_OWORD *)&v58.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 32);
  *(_OWORD *)&v59.start.value = v14;
  v15 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 80);
  *(_OWORD *)&v59.start.epoch = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 64);
  *(_OWORD *)&v59.duration.timescale = v15;
  v16 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 16);
  *(_OWORD *)&v58.start.value = *MEMORY[0x1E0CA2E20];
  *(_OWORD *)&v58.start.epoch = v16;
  v57 = v62;
  *(_OWORD *)&v55.duration.timescale = *(_OWORD *)&v58.duration.timescale;
  *(_OWORD *)&v56.start.value = v14;
  *(_OWORD *)&v56.start.epoch = *(_OWORD *)&v59.start.epoch;
  *(_OWORD *)&v56.duration.timescale = v15;
  *(_OWORD *)&v55.start.value = *(_OWORD *)&v58.start.value;
  *(_OWORD *)&v55.start.epoch = v16;
  v54 = 0;
  v53 = 0;
  v52 = v62;
  v51 = v62;
  if (a3 < 1)
    v17 = -1;
  else
    v17 = 1;
  *(_OWORD *)&fromRange.start.value = *(_OWORD *)&a2->value;
  fromRange.start.epoch = a2->epoch;
  v18 = bossScanForEditSegmentContainingTrackTime(a1, (uint64_t)&fromRange, (_BYTE *)&v60 + 1, &v60, (uint64_t)&v58, v17, (uint64_t)&v57, (unint64_t)&v55);
  if ((_DWORD)v18)
    goto LABEL_64;
  if (HIBYTE(v60) && !(_BYTE)v60)
    goto LABEL_7;
  if (!HIBYTE(v60) || !(_BYTE)v60)
  {
    v62 = *a2;
    goto LABEL_13;
  }
  if ((v58.start.flags & 0x1D) == 1)
  {
    v50 = *a2;
    fromRange = v59;
    toRange = v58;
    CMTimeMapTimeFromRangeToRange(&v62, &v50, &fromRange, &toRange);
LABEL_13:
    v19 = 1;
    goto LABEL_14;
  }
  if (a4 != 1 && !a5 || (v57.flags & 0x1D) != 1)
    goto LABEL_7;
  v19 = 0;
  v62 = v57;
  v58 = v55;
  v59 = v56;
LABEL_14:
  v20 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v20)
    goto LABEL_63;
  v43 = v19;
  v18 = v20(a1, &v61);
  if ((_DWORD)v18)
    goto LABEL_64;
  v21 = v61;
  toRange.start = v62;
  v22 = *(uint64_t (**)(CFTypeRef, CMTimeRange *, CFTypeRef *, char *, __int16 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 8);
  if (!v22)
    goto LABEL_63;
  *(_OWORD *)&fromRange.start.value = *(_OWORD *)&toRange.start.value;
  fromRange.start.epoch = toRange.start.epoch;
  v18 = v22(v21, &fromRange, &v54, (char *)&v53 + 1, &v53);
  if ((_DWORD)v18)
    goto LABEL_64;
  if (a4 == 1)
  {
    fromRange.start.value = 0;
    v23 = v54;
    v24 = *(uint64_t (**)(CFTypeRef, _QWORD, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 176);
    if (!v24)
      goto LABEL_63;
    v18 = v24(v23, a3, &fromRange);
    if ((_DWORD)v18 || fromRange.start.value != a3)
      goto LABEL_64;
    v42 = a3;
    v25 = 0;
  }
  else
  {
    v42 = a3;
    v25 = 1;
  }
  for (i = 10001; ; --i)
  {
    v49 = 0;
    v50.value = 0;
    v27 = v54;
    v28 = *(uint64_t (**)(CFTypeRef, char *, __int16 *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 64);
    if (v28)
    {
      v18 = v28(v27, (char *)&v49 + 1, &v49, 0, 0);
      if (!(_DWORD)v18)
      {
        v29 = v49;
        goto LABEL_37;
      }
    }
    else
    {
      v18 = 4294954514;
    }
    LOBYTE(fromRange.start.value) = 0;
    if (!*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72))
      goto LABEL_64;
    v30 = v54;
    v31 = *(uint64_t (**)(CFTypeRef, CMTimeRange *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 72);
    if (!v31)
      goto LABEL_63;
    v32 = v31(v30, &fromRange, 0, 0);
    if ((_DWORD)v32)
    {
LABEL_56:
      v18 = v32;
      goto LABEL_64;
    }
    v29 = LOBYTE(fromRange.start.value) == 73;
    LOBYTE(v49) = LOBYTE(fromRange.start.value) == 73;
LABEL_37:
    if (HIBYTE(v49) | v29)
      break;
    v33 = v54;
    v34 = *(uint64_t (**)(CFTypeRef, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 176);
    if (!v34)
      goto LABEL_63;
    v32 = v34(v33, v42, &v50);
    if ((_DWORD)v32)
      goto LABEL_56;
    if (v50.value != v42)
      goto LABEL_7;
    if (!i)
    {
      v48 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v18 = 4294954923;
      goto LABEL_64;
    }
    v25 = 0;
  }
  if (v43)
    v35 = v25;
  else
    v35 = 0;
  if (HIBYTE(v53) | v53)
    v36 = 0;
  else
    v36 = v35;
  if (a4 == 2 || !v36)
  {
    v39 = v54;
    v40 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (v40)
    {
      v18 = v40(v39, &v52);
      if (!(_DWORD)v18)
      {
        v37 = v60;
        if ((_BYTE)v60)
        {
          toRange.start = v52;
          fromRange = v58;
          CMTimeClampToRange(&v46, &toRange.start, &fromRange);
          fromRange = v58;
          toRange = v59;
          CMTimeMapTimeFromRangeToRange(&v51, &v46, &fromRange, &toRange);
          if ((v52.flags & 0x1D) == 1)
          {
            fromRange = v58;
            toRange.start = v52;
            v37 = CMTimeRangeContainsTime(&fromRange, &toRange.start) != 0;
          }
          else
          {
            v37 = 0;
          }
        }
        else
        {
          v51 = v52;
        }
        if (a6)
          *a6 = v51;
        goto LABEL_52;
      }
      goto LABEL_64;
    }
LABEL_63:
    v18 = 4294954514;
    goto LABEL_64;
  }
  v37 = 1;
LABEL_52:
  if (a7)
    *a7 = v36;
  if (a8)
  {
    v18 = 0;
    *a8 = v37;
    goto LABEL_64;
  }
LABEL_7:
  v18 = 0;
LABEL_64:
  if (v54)
    CFRelease(v54);
  if (v61)
    CFRelease(v61);
  return v18;
}

uint64_t bossScanForEditSegmentContainingTrackTime(uint64_t a1, uint64_t a2, _BYTE *a3, _BYTE *a4, uint64_t a5, unsigned int a6, uint64_t a7, unint64_t a8)
{
  uint64_t v15;
  uint64_t FigBaseObject;
  void (*v17)(uint64_t, const __CFString *, uint64_t, uint64_t *);
  _BOOL4 v18;
  uint64_t v19;
  void (*v20)(uint64_t, const __CFString *, uint64_t, uint64_t *);
  unsigned int v21;
  uint64_t v22;
  uint64_t EditSegmentContainingTrackTime;
  int v24;
  uint64_t v25;
  CFTypeRef *v26;
  __int128 v29;
  uint64_t v30;
  char v31;
  uint64_t v32[3];

  v32[2] = *MEMORY[0x1E0C80C00];
  v31 = 0;
  v32[0] = 0;
  v32[1] = 0;
  v15 = *MEMORY[0x1E0C9AE00];
  FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  v17 = *(void (**)(uint64_t, const __CFString *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (v17)
  {
    v17(FigBaseObject, CFSTR("SecondaryEditCursorService"), v15, v32);
    v18 = v32[0] != 0;
  }
  else
  {
    v18 = 0;
  }
  v19 = FigTrackReaderGetFigBaseObject(a1);
  v20 = *(void (**)(uint64_t, const __CFString *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (v20)
    v20(v19, CFSTR("EditCursorService"), v15, &v32[v18]);
  if (v18)
    v21 = 2;
  else
    v21 = 1;
  if (v32[v18])
    v22 = v21;
  else
    v22 = v18;
  if (!(_DWORD)v22)
  {
    v25 = 0;
    LOBYTE(v24) = 0;
    if (!a3)
      goto LABEL_19;
    goto LABEL_18;
  }
  v29 = *(_OWORD *)a2;
  v30 = *(_QWORD *)(a2 + 16);
  EditSegmentContainingTrackTime = bossUsingEditCursorServiceArrayFindEditSegmentContainingTrackTime(v32, v22, (uint64_t)&v29, &v31, (_OWORD *)a5);
  if ((_DWORD)EditSegmentContainingTrackTime)
    goto LABEL_29;
  v24 = *(_DWORD *)(a5 + 12) & 0x1D;
  if (v24 == 1)
  {
    v25 = 0;
    if (!a3)
      goto LABEL_19;
LABEL_18:
    *a3 = v24;
    goto LABEL_19;
  }
  if (a7 | a8)
  {
    v29 = *(_OWORD *)a2;
    v30 = *(_QWORD *)(a2 + 16);
    EditSegmentContainingTrackTime = bossUsingEditCursorServiceArrayFindNextNonEmptyTrackTime(v32, v22, &v29, a6, MEMORY[0x1E0CA2E18], a7, (_OWORD *)a8);
LABEL_29:
    v25 = EditSegmentContainingTrackTime;
    goto LABEL_31;
  }
  v25 = 0;
LABEL_31:
  LOBYTE(v24) = 1;
  if (a3)
    goto LABEL_18;
LABEL_19:
  if (a4)
    *a4 = v31;
  if ((_DWORD)v22)
  {
    v26 = (CFTypeRef *)v32;
    do
    {
      if (*v26)
      {
        CFRelease(*v26);
        *v26 = 0;
      }
      ++v26;
      --v22;
    }
    while (v22);
  }
  return v25;
}

uint64_t VideoMentorSetModeToDoNothing(uint64_t a1, CFDictionaryRef theDict, const void *a3)
{
  const void *v6;
  const void *Value;
  _BOOL4 v8;
  int v9;
  const void *v10;
  unsigned int v11;
  BOOL v12;

  if (theDict)
  {
    v6 = (const void *)*MEMORY[0x1E0C9AE50];
    Value = CFDictionaryGetValue(theDict, CFSTR("AbortReading"));
    v8 = v6 == CFDictionaryGetValue(theDict, CFSTR("SynchronouslyAbortReading"));
    v9 = v6 == Value || v8;
  }
  else
  {
    v9 = 0;
    LOBYTE(v8) = 0;
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 96));
  if (!*(_BYTE *)a1)
  {
    v10 = *(const void **)(a1 + 472);
    *(_QWORD *)(a1 + 472) = a3;
    if (a3)
      CFRetain(a3);
    if (v10)
      CFRelease(v10);
    *(_DWORD *)(a1 + 112) = 0;
    *(_BYTE *)(a1 + 116) = 1;
    *(_BYTE *)(a1 + 117) = v9;
    FigMemoryBarrier();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 96));
  FigSemaphoreSignal();
  if (v9)
  {
    v11 = 0;
    do
    {
      if (!*(_BYTE *)(a1 + 116))
        break;
      FigThreadAbort();
      if (*(_BYTE *)(a1 + 116))
        FigSemaphoreWaitRelative();
      v12 = v11++ >= 4;
    }
    while (!v12 || v8);
  }
  return 0;
}

uint64_t VideoMentorSetModeToScrub(uint64_t a1, uint64_t a2, __int128 *a3, CFDictionaryRef theDict, const void *a5, const void *a6, const void *a7)
{
  const void *Value;
  const void *v13;
  int v14;
  unsigned int v15;
  BOOL IsCursorAccuracyExact;
  unsigned int (*v17)(uint64_t, CFTypeRef *);
  const void *v18;
  CFTypeRef v19;
  __int128 v20;
  const void *v21;
  const void *v22;
  const void *v23;
  uint64_t v24;
  __int128 v28;
  uint64_t v29;
  CFTypeRef cf;

  cf = 0;
  if (theDict
    && (Value = CFDictionaryGetValue(theDict, CFSTR("ScrubPolicy"))) != 0
    && (v13 = Value, !CFEqual(Value, CFSTR("FrameAccurate"))))
  {
    if (CFEqual(v13, CFSTR("NearestIFrame")))
      v14 = 1;
    else
      v14 = 2 * (CFEqual(v13, CFSTR("BlendFrames")) != 0);
  }
  else
  {
    v14 = 0;
  }
  v15 = audioMentorGetModeChangePolicy(theDict);
  IsCursorAccuracyExact = videoMentorIsCursorAccuracyExact(theDict);
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetInt32IfPresent();
  v28 = *MEMORY[0x1E0CA2E18];
  v29 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  if (theDict)
    FigCFDictionaryGetCMTimeIfPresent();
  if (a2
    && ((v17 = *(unsigned int (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8)) == 0
     || v17(a2, &cf)))
  {
    v24 = FigSignalErrorAt();
  }
  else
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 96));
    if (!*(_BYTE *)a1)
    {
      v18 = *(const void **)(a1 + 128);
      v19 = cf;
      *(_QWORD *)(a1 + 128) = cf;
      if (v19)
        CFRetain(v19);
      if (v18)
        CFRelease(v18);
      v20 = *a3;
      *(_QWORD *)(a1 + 152) = *((_QWORD *)a3 + 2);
      *(_OWORD *)(a1 + 136) = v20;
      *(_DWORD *)(a1 + 160) = v14;
      *(_DWORD *)(a1 + 244) = v15;
      *(_BYTE *)(a1 + 372) = IsCursorAccuracyExact;
      *(_BYTE *)(a1 + 373) = 1;
      *(_OWORD *)(a1 + 428) = v28;
      *(_QWORD *)(a1 + 444) = v29;
      *(_DWORD *)(a1 + 452) = 0;
      v21 = *(const void **)(a1 + 464);
      *(_QWORD *)(a1 + 464) = a5;
      if (a5)
        CFRetain(a5);
      if (v21)
        CFRelease(v21);
      v22 = *(const void **)(a1 + 472);
      *(_QWORD *)(a1 + 472) = a6;
      if (a6)
        CFRetain(a6);
      if (v22)
        CFRelease(v22);
      v23 = *(const void **)(a1 + 480);
      *(_QWORD *)(a1 + 480) = a7;
      if (a7)
        CFRetain(a7);
      if (v23)
        CFRelease(v23);
      *(_DWORD *)(a1 + 112) = 1;
      *(_BYTE *)(a1 + 116) = 1;
      FigMemoryBarrier();
    }
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 96));
    FigSemaphoreSignal();
    v24 = 0;
  }
  if (cf)
    CFRelease(cf);
  return v24;
}

BOOL videoMentorIsCursorAccuracyExact(const __CFDictionary *a1)
{
  _BOOL8 result;

  result = 0;
  if (a1)
  {
    CFDictionaryGetValue(a1, CFSTR("CursorAccuracy"));
    if (FigCFEqual())
      return 1;
  }
  return result;
}

uint64_t videoMentorSimulateFrame(uint64_t a1, _BYTE *a2, uint64_t a3, _BYTE *a4, _BYTE *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, char *, __int16 *, _QWORD);
  uint64_t v13;
  int v14;
  _BYTE *v15;
  uint64_t (*v16)(uint64_t, char *, __int16 *, _QWORD, BOOL *);
  uint64_t v17;
  uint64_t (*v18)(uint64_t, CMTime *);
  uint64_t (*v19)(uint64_t, uint64_t);
  CMTime v21;
  CMTime time1;
  CMTime v23;
  BOOL v24;
  __int16 v25;
  __int16 v26;

  v26 = 0;
  v25 = 0;
  v24 = 0;
  v10 = *(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  v11 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (v10)
  {
    v12 = *(uint64_t (**)(uint64_t, char *, __int16 *, _QWORD))(v11 + 72);
    if (!v12)
      goto LABEL_34;
    v13 = v12(a1, (char *)&v26 + 1, &v26, 0);
    if ((_DWORD)v13)
      goto LABEL_35;
    v14 = HIBYTE(v26);
    switch(HIBYTE(v26))
    {
      case 'B':
        goto LABEL_21;
      case 'I':
        if ((_BYTE)v26)
          v15 = a2;
        else
          v15 = a5;
        break;
      case 'P':
        v15 = a5;
        if (!*a2)
          goto LABEL_21;
        break;
      default:
        return FigSignalErrorAt();
    }
    *v15 = 1;
LABEL_21:
    v24 = v14 == 66;
    goto LABEL_22;
  }
  v16 = *(uint64_t (**)(uint64_t, char *, __int16 *, _QWORD, BOOL *))(v11 + 64);
  if (!v16)
    goto LABEL_34;
  v13 = v16(a1, (char *)&v25 + 1, &v25, 0, &v24);
  if ((_DWORD)v13)
    goto LABEL_35;
  if (HIBYTE(v25))
  {
    if (*a5)
      goto LABEL_28;
    if (!videoMentorSyncFrameIsOpenGOP(a1))
      goto LABEL_16;
    if ((*(_DWORD *)(a3 + 12) & 0x1D) == 1)
    {
      v17 = MEMORY[0x1E0CA2E18];
      *(_OWORD *)a3 = *MEMORY[0x1E0CA2E18];
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(v17 + 16);
LABEL_16:
      *a5 = 1;
      goto LABEL_28;
    }
    v19 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (!v19)
      goto LABEL_34;
    v13 = v19(a1, a3);
    if ((_DWORD)v13)
      goto LABEL_35;
    if ((*(_DWORD *)(a3 + 12) & 0x1D) != 1)
      return FigSignalErrorAt();
  }
LABEL_22:
  if (!*a5 && (*(_DWORD *)(a3 + 12) & 0x1D) == 1)
  {
    v23 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    v18 = *(uint64_t (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (v18)
    {
      v13 = v18(a1, &v23);
      if (!(_DWORD)v13)
      {
        if ((v23.flags & 0x1D) == 1)
        {
          time1 = v23;
          v21 = *(CMTime *)a3;
          if (CMTimeCompare(&time1, &v21) < 0)
          {
            v13 = 0;
            *a4 = 0;
            return v13;
          }
          goto LABEL_28;
        }
        return FigSignalErrorAt();
      }
LABEL_35:
      FigSignalErrorAt();
      return v13;
    }
LABEL_34:
    v13 = 4294954514;
    goto LABEL_35;
  }
LABEL_28:
  v13 = 0;
  if (!v24)
    *a4 = 1;
  return v13;
}

uint64_t videoMentorThreadGenerateAndEnqueueFrame(uint64_t a1, const void *a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned __int8 a9, uint64_t a10, uint64_t a11, uint64_t a12, const void *a13)
{
  uint64_t v21;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  void *v29;

  v29 = 0;
  if (videoMentorThreadWaitForOutputQueueToDropBelowHighWater(a1, a13))
    return 0xFFFFFFFFLL;
  v27 = *(_OWORD *)a10;
  v28 = *(_QWORD *)(a10 + 16);
  v25 = *(_OWORD *)a11;
  v26 = *(_QWORD *)(a11 + 16);
  v23 = *(_OWORD *)a12;
  v24 = *(_QWORD *)(a12 + 16);
  v21 = videoMentorThreadCreateSampleBuffer(a1, (uint64_t)a2, a3, a9, &v27, &v25, &v23, a7, (uint64_t)a13, (uint64_t)&v29);
  if (!(_DWORD)v21)
  {
    if (a7)
      CMSetAttachment(v29, (CFStringRef)*MEMORY[0x1E0CA26E8], (CFTypeRef)*MEMORY[0x1E0C9AE50], 1u);
    v21 = videoMentorThreadSendSampleBuffer(a1, (CMSampleBufferRef)v29, a2, a3, a4, a5, a6, a8);
    if (!(_DWORD)v21)
      ++*(_DWORD *)(a1 + 524);
  }
  if (v29)
    CFRelease(v29);
  return v21;
}

uint64_t videoMentorThreadWaitForOutputQueueToDropBelowHighWater(uint64_t a1, const void *a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int (*v6)(uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  __CFDictionary *v9;
  _DWORD *v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t);
  __CFDictionary *v13;

  if (*(_BYTE *)(a1 + 116))
    return 0xFFFFFFFFLL;
  if ((*(_DWORD *)(a1 + 496) | 2) == 3)
  {
    v5 = *(_QWORD *)(a1 + 24);
    v6 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (!v6 || !v6(v5))
      videoMentorThreadFinishPreroll(a1, 2, a2);
  }
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v8)
    return 0;
  result = v8(v7);
  if ((_DWORD)result)
  {
    if (!*(_BYTE *)a1)
    {
      v9 = FigMentorNotificationPayloadCreate((uint64_t)CFSTR("MentorPausingDueToHighWaterLevel"), a2, 0, *(unsigned __int8 *)(a1 + 520), 0, 0);
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      if (v9)
        CFRelease(v9);
    }
    v10 = (_DWORD *)MEMORY[0x1E0CA1FC0];
    if (*MEMORY[0x1E0CA1FC0] == 1)
      kdebug_trace();
    while (1)
    {
      FigSemaphoreWaitRelative();
      if (*(_BYTE *)(a1 + 116))
        break;
      v11 = *(_QWORD *)(a1 + 24);
      v12 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (!v12 || !v12(v11))
      {
        if (*v10 == 1)
          kdebug_trace();
        result = 0;
        *(_DWORD *)(a1 + 524) = 0;
        if (!*(_BYTE *)a1)
        {
          v13 = FigMentorNotificationPayloadCreate((uint64_t)CFSTR("MentorResumingAfterHighWaterLevel"), a2, 0, *(unsigned __int8 *)(a1 + 520), 0, 0);
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterPostNotification();
          if (v13)
            CFRelease(v13);
          return 0;
        }
        return result;
      }
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t videoMentorThreadCreateSampleBuffer(uint64_t a1, uint64_t a2, int a3, int a4, __int128 *a5, __int128 *a6, __int128 *a7, char a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t (*)(uint64_t, uint64_t, void *), uint64_t *, uint64_t, uint64_t);
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  _BOOL8 v25;

  if (*(_BYTE *)(a1 + 116))
    return 0xFFFFFFFFLL;
  v18 = a1;
  v13 = a3 == 1;
  if (!a4)
    v13 = 0;
  v24 = *((_QWORD *)a7 + 2);
  v25 = v13;
  if (a4)
    v14 = a3 == 0;
  else
    v14 = 0;
  BYTE1(v25) = v14;
  v19 = *a5;
  v20 = *((_QWORD *)a5 + 2);
  v21 = *a6;
  v22 = *((_QWORD *)a6 + 2);
  v23 = *a7;
  BYTE2(v25) = a8;
  v15 = *(_QWORD *)(a1 + 16);
  v16 = *(unsigned int *)(a1 + 496);
  v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t (*)(uint64_t, uint64_t, void *), uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v17 || v17(v15, a2, 1, 1, 0, 0, v16, 0, videoMentorRemapSBufTiming, &v18, a9, a10))
    return FigSignalErrorAt();
  if (*(_QWORD *)(a1 + 48))
    FigSampleBufferSetDecryptor();
  result = 0;
  ++*(_DWORD *)(a1 + 896);
  return result;
}

uint64_t sgffr_generateSingleSampleBuffer(uint64_t a1, uint64_t a2, int a3, char a4, uint64_t (*a5)(uint64_t, uint64_t, CMSampleBufferRef), uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  uint64_t DerivedStorage;
  int v16;
  uint64_t (*v17)(uint64_t, CFTypeRef *);
  uint64_t PTSAndDTSAndDuration;
  int v19;
  char v20;
  uint64_t v21;
  Boolean v22;
  int v23;
  const __CFDictionary *DescriptionWithPixelFormatType;
  const __CFArray *Value;
  const __CFArray *v27;
  CFTypeID v28;
  const void *ValueAtIndex;
  CFTypeID v30;
  const void *v31;
  CFTypeID v32;
  CFTypeRef v33;
  uint64_t (*v34)(CFTypeRef, unint64_t, CMTimeValue, CFTypeRef *, _QWORD);
  CVImageBufferRef v35;
  __CVBuffer *v36;
  OpaqueCMBlockBuffer *v37;
  size_t v38;
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  size_t v41;
  size_t v42;
  size_t v43;
  unint64_t v44;
  size_t v45;
  size_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  BOOL v51;
  size_t v52;
  uint64_t v53;
  uint64_t v54;
  OpaqueCMBlockBuffer *v55;
  unint64_t v56;
  size_t v57;
  size_t v58;
  char *BaseAddressOfPlane;
  char *v60;
  char *v61;
  char *v62;
  CFTypeRef v63;
  size_t v64;
  uint64_t v65;
  uint64_t (*v66)(CFTypeRef, size_t, uint64_t, OpaqueCMBlockBuffer **, _QWORD);
  __CVBuffer *ImageBuffer;
  __CVBuffer *v68;
  void *BaseAddress;
  void *v70;
  CFTypeRef v71;
  uint64_t (*v72)(CFTypeRef, unint64_t, CMTimeValue, void *, _QWORD);
  uint64_t v73;
  CMBlockBufferRef v74;
  BOOL v75;
  CMItemCount v76;
  OpaqueCMBlockBuffer *v77;
  const size_t *sampleSizeArray;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  opaqueCMSampleBuffer *v82;
  int v83;
  size_t v84;
  size_t v85;
  uint64_t (*v86)(uint64_t, _QWORD *);
  uint64_t v87;
  const void *v88;
  uint64_t v89;
  size_t dataLength;
  size_t v91;
  size_t BytesPerRowOfPlane;
  size_t v93;
  __CVBuffer *pixelBuffer;
  CMTimeValue v95;
  unint64_t v96;
  char v97;
  uint64_t (*v98)(uint64_t, uint64_t, CMSampleBufferRef);
  uint64_t v99;
  size_t v101;
  CMSampleTimingInfo destination;
  CFTypeRef v103;
  unsigned __int8 v104;
  CFTypeRef v105;
  CFTypeRef v106;
  CFTypeRef v107;
  CFTypeRef cf;
  int v109;
  uint64_t v110;
  CMSampleBufferRef v111;
  CMBlockBufferRef v112;
  OpaqueCMBlockBuffer *v113;
  CMBlockBufferRef blockBufferOut;
  size_t v115;
  size_t v116;
  CMSampleTimingInfo sampleTimingArray;
  uint64_t v118;
  CMTimeValue v119;
  int v120[5];

  v120[0] = a3;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v118 = 0;
  v119 = 0;
  memset(&sampleTimingArray, 0, sizeof(sampleTimingArray));
  v115 = 0;
  v116 = 0;
  v113 = 0;
  blockBufferOut = 0;
  v111 = 0;
  v112 = 0;
  v110 = 0;
  v109 = 0;
  v107 = 0;
  cf = 0;
  v105 = 0;
  v106 = 0;
  v104 = 0;
  v103 = 0;
  v16 = *(unsigned __int8 *)(DerivedStorage + 32);
  v17 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 160);
  if (!v17)
  {
    PTSAndDTSAndDuration = 4294954514;
    goto LABEL_17;
  }
  v99 = a7;
  PTSAndDTSAndDuration = v17(a2, &v107);
  if ((_DWORD)PTSAndDTSAndDuration)
  {
LABEL_17:
    FigSignalErrorAt();
    goto LABEL_18;
  }
  v97 = a4;
  v98 = a5;
  if (!*(_BYTE *)(DerivedStorage + 33)
    && *(_BYTE *)(DerivedStorage + 34)
    && CMFormatDescriptionGetMediaType((CMFormatDescriptionRef)v107) == 1986618469
    && (CMFormatDescriptionGetMediaSubType((CMFormatDescriptionRef)v107),
        (DescriptionWithPixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType()) != 0))
  {
    Value = (const __CFArray *)CFDictionaryGetValue(DescriptionWithPixelFormatType, (const void *)*MEMORY[0x1E0CA91B0]);
    if (Value)
    {
      v27 = Value;
      v28 = CFGetTypeID(Value);
      if (v28 == CFArrayGetTypeID() && CFArrayGetCount(v27) == 2)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v27, 0);
        if (ValueAtIndex)
        {
          v30 = CFGetTypeID(ValueAtIndex);
          if (v30 == CFDictionaryGetTypeID())
          {
            v31 = CFArrayGetValueAtIndex(v27, 1);
            if (v31)
            {
              v32 = CFGetTypeID(v31);
              if (v32 == CFDictionaryGetTypeID())
              {
                LODWORD(destination.duration.value) = 0;
                FigCFDictionaryGetInt32IfPresent();
                FigCFDictionaryGetInt32IfPresent();
                v19 = 0;
                v20 = 0;
                goto LABEL_6;
              }
            }
          }
        }
      }
    }
    v19 = 0;
  }
  else
  {
    v19 = 1;
  }
  v20 = 1;
LABEL_6:
  PTSAndDTSAndDuration = sgffr_copyCursorSampleLocationAndDataSource(a1, a2, v19, &v119, &v116, (char *)&v104, &v118, &v115, &cf, &v105, &v106);
  if ((_DWORD)PTSAndDTSAndDuration)
    goto LABEL_18;
  v95 = v119;
  v96 = v116;
  PTSAndDTSAndDuration = sgffr_getPTSAndDTSAndDuration(DerivedStorage, a2, (uint64_t)&sampleTimingArray);
  if ((_DWORD)PTSAndDTSAndDuration)
    goto LABEL_18;
  if (!*(_BYTE *)(DerivedStorage + 33))
  {
    v21 = sgffr_checkByteRangeForByteStream(DerivedStorage, (uint64_t)v105, v95, v96);
    if ((_DWORD)v21)
      goto LABEL_145;
  }
  if (a3 == 3)
    sgffr_checkDataAvailability(a1, (uint64_t)v106, (uint64_t)v105, v95, v96, v120);
  if ((v19 & 1) != 0)
  {
    if (v16)
    {
      PTSAndDTSAndDuration = CMBlockBufferCreateEmpty(*(CFAllocatorRef *)DerivedStorage, 0, 0, &blockBufferOut);
      if ((_DWORD)PTSAndDTSAndDuration)
        goto LABEL_18;
      v22 = 0;
      v23 = v104 != 0;
      goto LABEL_113;
    }
    if (!*(_BYTE *)(DerivedStorage + 33))
    {
      v73 = sgffr_readFromByteStreamCreatingBlockBuffer(DerivedStorage, (uint64_t)v105, v96, v95, &blockBufferOut);
      if (!v104)
      {
        PTSAndDTSAndDuration = v73;
        if ((_DWORD)v73)
          goto LABEL_17;
        v23 = 0;
        goto LABEL_112;
      }
      v101 = 0;
      destination.duration.value = 0;
      v21 = sgffr_refineAndVerifySampleLocation(a2, blockBufferOut, 0, v119, v116, v118, v115, &destination, &v101);
      if ((_DWORD)v21)
        goto LABEL_145;
      v21 = sgffr_createBlockBufferWithBufferReference(*(const __CFAllocator **)DerivedStorage, blockBufferOut, destination.duration.value - v119, v101, &v112);
      if ((_DWORD)v21)
        goto LABEL_145;
      v74 = blockBufferOut;
      blockBufferOut = v112;
      if (v112)
        CFRetain(v112);
      if (v74)
        CFRelease(v74);
      goto LABEL_111;
    }
    v23 = v104;
    if (!v104)
    {
LABEL_112:
      v22 = 1;
LABEL_113:
      v75 = v23 == 0;
      v76 = v23 == 0;
      if (v75)
        v77 = blockBufferOut;
      else
        v77 = 0;
      sampleSizeArray = &v116;
      if (!v75)
        sampleSizeArray = 0;
      PTSAndDTSAndDuration = CMSampleBufferCreate(*(CFAllocatorRef *)DerivedStorage, v77, v22, 0, 0, (CMFormatDescriptionRef)v107, 1, 1, &sampleTimingArray, v76, sampleSizeArray, &v111);
      if ((_DWORD)PTSAndDTSAndDuration)
        goto LABEL_18;
      goto LABEL_119;
    }
    v101 = 0;
    destination.duration.value = 0;
    v63 = v105;
    v64 = v115;
    v65 = v118;
    v66 = *(uint64_t (**)(CFTypeRef, size_t, uint64_t, OpaqueCMBlockBuffer **, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                               + 32);
    if (v66)
    {
      v21 = v66(v63, v64, v65, &v113, 0);
      if ((_DWORD)v21)
        goto LABEL_145;
      v21 = sgffr_refineAndVerifySampleLocation(a2, 0, v113, v119, v116, v118, v115, &destination, &v101);
      if ((_DWORD)v21)
        goto LABEL_145;
LABEL_111:
      v23 = 0;
      v95 = destination.duration.value;
      v119 = destination.duration.value;
      v116 = v101;
      goto LABEL_112;
    }
LABEL_96:
    PTSAndDTSAndDuration = 4294954514;
    goto LABEL_18;
  }
  if (v104)
  {
    v21 = FigSignalErrorAt();
    if ((_DWORD)v21)
      goto LABEL_145;
  }
  if ((v20 & 1) != 0)
  {
    if (v16)
    {
      destination = sampleTimingArray;
      v21 = createSampleBufferForUncompressed(a1, v96, (const opaqueCMFormatDescription *)v107, 0, &destination, &v111, &blockBufferOut);
      if (!(_DWORD)v21)
      {
        v16 = 1;
        goto LABEL_119;
      }
LABEL_145:
      PTSAndDTSAndDuration = v21;
      goto LABEL_18;
    }
    destination = sampleTimingArray;
    v21 = createSampleBufferForUncompressed(a1, v96, (const opaqueCMFormatDescription *)v107, 1u, &destination, &v111, 0);
    if ((_DWORD)v21)
      goto LABEL_145;
    ImageBuffer = CMSampleBufferGetImageBuffer(v111);
    if (ImageBuffer)
    {
      v68 = ImageBuffer;
      v21 = CVPixelBufferLockBaseAddress(ImageBuffer, 0);
      if (!(_DWORD)v21)
      {
        BaseAddress = CVPixelBufferGetBaseAddress(v68);
        if (BaseAddress)
        {
          v70 = BaseAddress;
          v71 = v105;
          v72 = *(uint64_t (**)(CFTypeRef, unint64_t, CMTimeValue, void *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
          if (v72)
          {
            PTSAndDTSAndDuration = v72(v71, v96, v95, v70, 0);
            if (!(_DWORD)PTSAndDTSAndDuration)
            {
              CVPixelBufferUnlockBaseAddress(v68, 0);
              v16 = 0;
              goto LABEL_119;
            }
          }
          else
          {
            PTSAndDTSAndDuration = 4294954514;
          }
          FigSignalErrorAt();
        }
        else
        {
          PTSAndDTSAndDuration = 4294954744;
        }
        CVPixelBufferUnlockBaseAddress(v68, 0);
        goto LABEL_18;
      }
      goto LABEL_145;
    }
LABEL_143:
    PTSAndDTSAndDuration = 4294954744;
    goto LABEL_18;
  }
  v33 = v105;
  v34 = *(uint64_t (**)(CFTypeRef, unint64_t, CMTimeValue, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 32);
  if (!v34)
    goto LABEL_96;
  v21 = v34(v33, v96, v95, &v103, 0);
  if ((_DWORD)v21)
    goto LABEL_145;
  destination = sampleTimingArray;
  v21 = createSampleBufferForUncompressed(a1, v96, (const opaqueCMFormatDescription *)v107, 1u, &destination, &v111, 0);
  if ((_DWORD)v21)
    goto LABEL_145;
  v35 = CMSampleBufferGetImageBuffer(v111);
  if (!v35)
    goto LABEL_143;
  v36 = v35;
  v37 = (OpaqueCMBlockBuffer *)v103;
  v38 = CMBlockBufferGetDataLength((CMBlockBufferRef)v103);
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(v36, 0);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(v36, 0);
  v41 = CVPixelBufferGetHeightOfPlane(v36, 1uLL);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v36, 0);
  pixelBuffer = v36;
  v93 = CVPixelBufferGetBytesPerRowOfPlane(v36, 1uLL);
  if (v38 < 0x10)
    goto LABEL_141;
  v42 = v38;
  *(_OWORD *)&destination.duration.value = 0uLL;
  v21 = CMBlockBufferCopyDataBytes(v37, 0, 0x10uLL, &destination);
  if ((_DWORD)v21)
    goto LABEL_145;
  v43 = bswap32(destination.duration.value);
  if (v43 < 0x10)
    goto LABEL_141;
  v44 = bswap32(HIDWORD(destination.duration.value));
  if (WidthOfPlane > v44)
    goto LABEL_141;
  v45 = v42;
  v46 = bswap32(destination.duration.timescale);
  if (v46 < 0x10 || v45 <= v43 || v45 <= v46)
    goto LABEL_141;
  v47 = !is_mul_ok(HeightOfPlane, v44);
  v48 = (uint64_t)(HeightOfPlane * v44) >> 63;
  v49 = HeightOfPlane * v44 + v43;
  if (__CFADD__(HeightOfPlane * v44, v43))
    LOBYTE(v48) = v48 + 1;
  if (v47
    || ((HeightOfPlane * v44) & 0x8000000000000000) != 0
    || ((v48 ^ (v49 >> 63)) & 1) != 0
    || v49 > v46)
  {
    goto LABEL_141;
  }
  v50 = bswap32(destination.duration.flags);
  v51 = !is_mul_ok(v41, v50);
  v91 = v50;
  v52 = v41 * v50;
  v53 = (uint64_t)(v41 * v50) >> 63;
  v54 = v52 + v46;
  if (__CFADD__(v52, v46))
    LOBYTE(v53) = v53 + 1;
  if (v51
    || (v52 & 0x8000000000000000) != 0
    || ((v53 ^ (v54 >> 63)) & 1) != 0
    || v45 < v54)
  {
LABEL_141:
    v21 = FigSignalErrorAt();
    v16 = 0;
    if ((_DWORD)v21)
      goto LABEL_145;
  }
  else
  {
    v89 = DerivedStorage;
    v55 = v37;
    v56 = v44;
    if (BytesPerRowOfPlane >= v44)
      v57 = v44;
    else
      v57 = BytesPerRowOfPlane;
    v58 = v93;
    if (v93 >= v91)
      v58 = v91;
    dataLength = v58;
    v21 = CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    if ((_DWORD)v21)
      goto LABEL_145;
    BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
    if (HeightOfPlane)
    {
      v60 = BaseAddressOfPlane;
      do
      {
        CMBlockBufferCopyDataBytes(v55, v43, v57, v60);
        v43 += v56;
        v60 += BytesPerRowOfPlane;
        --HeightOfPlane;
      }
      while (HeightOfPlane);
    }
    v61 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
    if (v41)
    {
      v62 = v61;
      do
      {
        CMBlockBufferCopyDataBytes(v55, v46, dataLength, v62);
        v46 += v91;
        v62 += v93;
        --v41;
      }
      while (v41);
    }
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
    v16 = 0;
    DerivedStorage = v89;
  }
LABEL_119:
  if (v98)
  {
    v79 = v98(a6, v99, v111);
    if ((_DWORD)v79)
    {
      PTSAndDTSAndDuration = v79;
      goto LABEL_17;
    }
  }
  if (!v16)
  {
    sgffr_attachMediaSampleAttachmentsToSampleBuffer(DerivedStorage, a2, v111, 0);
    sgffr_setSampleBufferAttachments(DerivedStorage, v111, cf, v95);
    PTSAndDTSAndDuration = 0;
    *a9 = v111;
    v111 = 0;
    goto LABEL_20;
  }
  sgffr_getTimeNeededInNanosecondsAndReadSchedulerFlags(DerivedStorage, v111, v120[0], v97, a2, &v109);
  v80 = malloc_type_calloc(1uLL, 0x40uLL, 0x1020040A1797456uLL);
  if (!v80)
  {
    v21 = FigSignalErrorAt();
    goto LABEL_145;
  }
  v81 = v80;
  v82 = v111;
  *v81 = v111;
  v81[1] = CMSampleBufferGetImageBuffer(v82);
  v83 = v104;
  *((_BYTE *)v81 + 24) = v104;
  v84 = v115;
  v81[4] = v118;
  v81[5] = v84;
  v85 = v116;
  v81[6] = v119;
  v81[7] = v85;
  if (!v83)
    goto LABEL_127;
  v86 = *(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v86)
  {
    v87 = v86(a2, v81 + 2);
    if (!(_DWORD)v87)
    {
LABEL_127:
      if (*v81)
        CFRetain((CFTypeRef)*v81);
      v88 = (const void *)v81[1];
      if (v88)
        CFRetain(v88);
      sgffr_rememberScheduledIOForSampleBuffer(v106, v111);
    }
    PTSAndDTSAndDuration = v87;
  }
  else
  {
    PTSAndDTSAndDuration = 4294954514;
  }
  free(v81);
LABEL_18:
  if (v111)
    CFRelease(v111);
LABEL_20:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (v112)
    CFRelease(v112);
  if (v113)
    CFRelease(v113);
  if (cf)
    CFRelease(cf);
  if (v105)
    CFRelease(v105);
  if (v106)
    CFRelease(v106);
  if (v107)
    CFRelease(v107);
  if (v103)
    CFRelease(v103);
  return PTSAndDTSAndDuration;
}

uint64_t videoMentorRemapSBufTiming(uint64_t a1, uint64_t a2, void *target)
{
  _QWORD *v6;
  const void **v7;
  CFStringRef *v8;
  CFTypeRef v9;
  _OWORD *v10;
  _BOOL4 v11;
  char v12;
  char v13;
  const __CFString *v14;
  CMTime *p_time1;
  CMAttachmentBearerRef v16;
  void (*v17)(_QWORD, uint64_t, void *);
  const __CFString *v19;
  const __CFString *v20;
  CMTime v21;
  CMTime v22;
  CMTime rhs;
  CMTime lhs;
  CMTime time2;
  CMTime time1;
  CMTime v27;
  CMTime v28;
  CMTime v29;

  v6 = *(_QWORD **)a1;
  memset(&v29, 0, sizeof(v29));
  memset(&v28, 0, sizeof(v28));
  memset(&v27, 0, sizeof(v27));
  v7 = (const void **)MEMORY[0x1E0C9AE50];
  v8 = (CFStringRef *)MEMORY[0x1E0CA26E8];
  if (*(_BYTE *)(a1 + 82))
    CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E0CA26E8], (CFTypeRef)*MEMORY[0x1E0C9AE50], 1u);
  if ((*(_DWORD *)(a1 + 68) & 0x1D) == 1)
  {
    time1 = *(CMTime *)(a1 + 56);
    time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    if (CMTimeCompare(&time1, &time2))
    {
      memset(&time1, 0, sizeof(time1));
      CMSampleBufferGetOutputPresentationTimeStamp(&time1, (CMSampleBufferRef)target);
      lhs = time1;
      videoMentorRemapTime(v6, a2, 0, (__int128 *)&lhs.value, (uint64_t)&time2);
      time1 = time2;
      lhs = time2;
      rhs = *(CMTime *)(a1 + 56);
      CMTimeAdd(&time2, &lhs, &rhs);
      time1 = time2;
      lhs = time2;
      videoMentorRemapTime(v6, a2, 1, (__int128 *)&lhs.value, (uint64_t)&time2);
      time1 = time2;
      CMSampleBufferSetOutputPresentationTimeStamp((CMSampleBufferRef)target, &time2);
    }
  }
  if (!*(_BYTE *)(a1 + 81))
  {
    if (!*(_BYTE *)(a1 + 80))
      goto LABEL_25;
    CMSampleBufferGetOutputDuration(&v27, (CMSampleBufferRef)target);
    goto LABEL_23;
  }
  CMSampleBufferGetOutputDuration(&v27, (CMSampleBufferRef)target);
  v9 = *v7;
  if (v9 == CMGetAttachment(target, *v8, 0))
  {
    CMSampleBufferGetOutputPresentationTimeStamp(&v28, (CMSampleBufferRef)target);
    time1 = v28;
    time2 = v27;
    CMTimeSubtract(&v29, &time1, &time2);
  }
  else
  {
    CMSampleBufferGetOutputPresentationTimeStamp(&v29, (CMSampleBufferRef)target);
    time1 = v29;
    time2 = v27;
    CMTimeAdd(&v28, &time1, &time2);
  }
  v10 = (_OWORD *)(a1 + 8);
  if ((*(_DWORD *)(a1 + 20) & 0x1D) == 1
    && (time1 = v29,
        *(_OWORD *)&time2.value = *v10,
        time2.epoch = *(_QWORD *)(a1 + 24),
        CMTimeCompare(&time1, &time2) < 0))
  {
    v12 = 0;
    v11 = 0;
  }
  else
  {
    if ((*(_DWORD *)(a1 + 44) & 0x1D) == 1)
    {
      time1 = *(CMTime *)(a1 + 32);
      time2 = v29;
      v11 = CMTimeCompare(&time1, &time2) < 1;
    }
    else
    {
      v11 = 0;
    }
    v12 = 1;
  }
  if ((*(_DWORD *)(a1 + 44) & 0x1D) == 1
    && (time1 = *(CMTime *)(a1 + 32), time2 = v28, CMTimeCompare(&time1, &time2) < 0))
  {
    v13 = 0;
    if (v11)
    {
LABEL_23:
      v14 = (const __CFString *)*MEMORY[0x1E0CA2728];
      time1 = v27;
      p_time1 = &time1;
      v16 = target;
LABEL_24:
      audioMentorSetAttachmentAsFigTimeDictionary(v16, v14, p_time1);
      goto LABEL_25;
    }
  }
  else
  {
    if ((*(_DWORD *)(a1 + 20) & 0x1D) == 1)
    {
      time1 = v28;
      *(_OWORD *)&time2.value = *v10;
      time2.epoch = *(_QWORD *)(a1 + 24);
      if (CMTimeCompare(&time1, &time2) < 1)
        goto LABEL_23;
    }
    v13 = 1;
    if (v11)
      goto LABEL_23;
  }
  if ((v12 & 1) == 0)
  {
    v19 = (const __CFString *)*MEMORY[0x1E0CA2728];
    *(_OWORD *)&time1.value = *v10;
    time1.epoch = *(_QWORD *)(a1 + 24);
    time2 = v29;
    CMTimeSubtract(&v22, &time1, &time2);
    audioMentorSetAttachmentAsFigTimeDictionary(target, v19, &v22);
  }
  if ((v13 & 1) == 0)
  {
    v20 = (const __CFString *)*MEMORY[0x1E0CA2720];
    time1 = v28;
    time2 = *(CMTime *)(a1 + 32);
    CMTimeSubtract(&v21, &time1, &time2);
    p_time1 = &v21;
    v16 = target;
    v14 = v20;
    goto LABEL_24;
  }
LABEL_25:
  MEMORY[0x19402EEEC](v6[10]);
  v17 = (void (*)(_QWORD, uint64_t, void *))v6[7];
  if (v17)
    v17(v6[9], a2, target);
  MEMORY[0x19402EF04](v6[10]);
  return 0;
}

uint64_t FigCRABSScheduledIORequestRead(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, _QWORD *a10)
{
  uint64_t DerivedStorage;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, _QWORD, uint64_t, _QWORD *);
  uint64_t result;
  void *v20;
  uint64_t v21;
  int v22;
  _QWORD v23[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v23[0] = a2;
  v23[1] = a3;
  v17 = *(_QWORD *)DerivedStorage;
  v18 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 8);
  if (!v18)
    return 4294954514;
  result = v18(v17, 4 * ((a9 & 0xC) != 0), 1, v23);
  if (!(_DWORD)result)
  {
    v20 = malloc_type_calloc(1uLL, 0x50uLL, 0x10A0040CC388DE2uLL);
    if (v20)
    {
      v21 = (uint64_t)v20;
      v22 = FigAtomicIncrement32();
      *(_DWORD *)(v21 + 8) = v22;
      *(_QWORD *)v21 = DerivedStorage;
      *(_QWORD *)(v21 + 24) = a2;
      *(_QWORD *)(v21 + 32) = a3;
      *(_QWORD *)(v21 + 40) = a5;
      *(_QWORD *)(v21 + 48) = a6;
      *(_QWORD *)(v21 + 56) = a7;
      *(_DWORD *)(v21 + 64) = a9;
      *(_QWORD *)(v21 + 72) = a4;
      if (a4)
      {
        CFRetain(a4);
        v22 = *(_DWORD *)(v21 + 8);
      }
      *a10 = v22;
      if ((a9 & 0xC) != 0)
      {
        result = MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
        if (!(_DWORD)result)
        {
          *(_QWORD *)(v21 + 16) = 0;
          **(_QWORD **)(DerivedStorage + 32) = v21;
          *(_QWORD *)(DerivedStorage + 32) = v21 + 16;
          *(_BYTE *)(DerivedStorage + 12) = 1;
          MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
          return 0;
        }
      }
      else
      {
        siocrabsFinishUnlocked(DerivedStorage, 0, 0);
        return siocrabsFinish((uint64_t *)DerivedStorage, v21, 0, 0);
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t siocrabsFinish(uint64_t *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, __int128 *);
  OSStatus DataPointer;
  unsigned int appended;
  uint64_t v12;
  OpaqueCMBlockBuffer *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, CMBlockBufferRef *, size_t *);
  unsigned int v17;
  OpaqueCMBlockBuffer *v18;
  size_t v19;
  size_t v20;
  char *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, size_t, size_t, char *, _QWORD);
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  OpaqueCMBlockBuffer *v30;
  const void *v31;
  void (*v32)(uint64_t, uint64_t, OpaqueCMBlockBuffer *, size_t, uint64_t);
  __int128 v34;
  CMBlockBufferRef targetBBuf;
  char *dataPointerOut;
  size_t lengthAtOffsetOut;
  size_t dataLength;

  lengthAtOffsetOut = 0;
  dataLength = 0;
  targetBBuf = 0;
  dataPointerOut = 0;
  if (a3)
  {
    v34 = *(_OWORD *)(a2 + 24);
    v8 = *a1;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 16);
    if (v9)
    {
      DataPointer = v9(v8, 1, &v34);
LABEL_4:
      appended = DataPointer;
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  v12 = FigCRABSGetByteStream(*a1);
  v13 = *(OpaqueCMBlockBuffer **)(a2 + 72);
  if (!v13 || CMBlockBufferIsEmpty(v13))
  {
    while (1)
    {
      v15 = *(_QWORD *)(a2 + 24);
      v14 = *(_QWORD *)(a2 + 32);
      v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CMBlockBufferRef *, size_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 32);
      if (!v16)
        break;
      v17 = v16(v12, v14, v15, &targetBBuf, &dataLength);
      if (v17 != -12792)
      {
        appended = v17;
        if (!v17)
        {
          v18 = *(OpaqueCMBlockBuffer **)(a2 + 72);
          if (v18)
          {
            appended = CMBlockBufferAppendBufferReference(v18, targetBBuf, 0, dataLength, 0);
            if (targetBBuf)
              CFRelease(targetBBuf);
          }
          else
          {
            appended = 0;
            *(_QWORD *)(a2 + 72) = targetBBuf;
          }
        }
        goto LABEL_25;
      }
    }
LABEL_24:
    appended = -12782;
    goto LABEL_25;
  }
  appended = CMBlockBufferAssureBlockMemory(*(CMBlockBufferRef *)(a2 + 72));
  if (appended)
    goto LABEL_25;
  if (*(_QWORD *)(a2 + 32))
  {
    v19 = 0;
LABEL_16:
    DataPointer = CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)(a2 + 72), v19, &lengthAtOffsetOut, 0, &dataPointerOut);
    if (DataPointer)
      goto LABEL_4;
    if (lengthAtOffsetOut > *(_QWORD *)(a2 + 32) - v19)
      lengthAtOffsetOut = *(_QWORD *)(a2 + 32) - v19;
    while (1)
    {
      v21 = dataPointerOut;
      v20 = lengthAtOffsetOut;
      v22 = *(_QWORD *)(a2 + 24);
      v23 = *(uint64_t (**)(uint64_t, size_t, size_t, char *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 8);
      if (!v23)
        goto LABEL_24;
      v24 = v23(v12, v20, v19 + v22, v21, 0);
      if (v24 != -12792)
      {
        appended = v24;
        if (!v24)
        {
          v19 += lengthAtOffsetOut;
          dataLength = v19;
          if (v19 < *(_QWORD *)(a2 + 32))
            goto LABEL_16;
        }
        goto LABEL_25;
      }
    }
  }
  appended = 0;
LABEL_25:
  if (appended)
    v25 = 1;
  else
    v25 = a3 == 0;
  if (v25)
    v26 = appended;
  else
    v26 = 4294954425;
  v27 = *(_QWORD *)(a2 + 48);
  v28 = *(_QWORD *)(a2 + 56);
  v29 = *(const void **)(a2 + 72);
  if (v29)
  {
    v30 = (OpaqueCMBlockBuffer *)CFRetain(v29);
    v31 = *(const void **)(a2 + 72);
    targetBBuf = v30;
    v32 = *(void (**)(uint64_t, uint64_t, OpaqueCMBlockBuffer *, size_t, uint64_t))(a2 + 40);
    if (v31)
    {
      CFRelease(v31);
      v30 = targetBBuf;
    }
  }
  else
  {
    v30 = 0;
    targetBBuf = 0;
    v32 = *(void (**)(uint64_t, uint64_t, OpaqueCMBlockBuffer *, size_t, uint64_t))(a2 + 40);
  }
  free((void *)a2);
  if (a4 || !(_DWORD)v26)
  {
    v32(v27, v28, v30, dataLength, v26);
    v30 = targetBBuf;
  }
  if (v30)
    CFRelease(v30);
  if (!MEMORY[0x19402EEEC](a1[2]))
  {
    if (!a1[3])
      *((_BYTE *)a1 + 12) = 0;
    MEMORY[0x19402EF04](a1[2]);
  }
  return v26;
}

void sgffr_markSampleBufferReady(int a1, uint64_t a2, OpaqueCMBlockBuffer *a3, int a4, OSStatus status)
{
  __CVBuffer *v8;
  opaqueCMSampleBuffer *v9;
  opaqueCMSampleBuffer *v10;
  OSStatus v11;
  size_t v12;
  uint64_t v13;
  CMBlockBufferRef dataBuffer;

  v9 = *(opaqueCMSampleBuffer **)a2;
  v8 = *(__CVBuffer **)(a2 + 8);
  dataBuffer = 0;
  if (v8)
    CVPixelBufferUnlockBaseAddress(v8, 0);
  if (status == -19283)
  {
    v10 = v9;
    v11 = -16751;
LABEL_16:
    CMSampleBufferSetDataFailed(v10, v11);
    goto LABEL_17;
  }
  if (!status)
  {
    if (v8)
    {
LABEL_6:
      CMSampleBufferSetDataReady(v9);
      goto LABEL_17;
    }
    if (!CMSampleBufferIsValid(v9))
      goto LABEL_17;
    if (!*(_BYTE *)(a2 + 24))
      goto LABEL_6;
    v12 = 0;
    v13 = 0;
    if (CMSampleBufferGetNumSamples(v9) == 1)
    {
      if (sgffr_refineAndVerifySampleLocation(*(_QWORD *)(a2 + 16), a3, 0, *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), &v13, &v12)|| sgffr_createBlockBufferWithBufferReference((const __CFAllocator *)*MEMORY[0x1E0C9AE00], a3, v13 - *(_QWORD *)(a2 + 48), v12, &dataBuffer)|| CMSampleBufferSetDataBuffer(v9, dataBuffer)|| CMSampleBufferSetDataReadyWithNewSize())
      {
        goto LABEL_15;
      }
LABEL_17:
      sgffr_forgetScheduledIOForSampleBuffer(v9);
    }
    if (!FigSignalErrorAt())
      goto LABEL_17;
  }
LABEL_15:
  v10 = v9;
  v11 = status;
  goto LABEL_16;
}

uint64_t videoMentorThreadSendSampleBuffer(uint64_t a1, CMSampleBufferRef sbuf, const void *a3, int a4, int a5, int a6, int a7, int a8)
{
  const __CFArray *SampleAttachmentsArray;
  const __CFArray *v16;
  const __CFDictionary *ValueAtIndex;
  const void **v18;
  CFAllocatorRef *v19;
  const __CFAllocator *v20;
  CFDictionaryRef v21;
  CFDictionaryRef v22;
  _QWORD *v23;
  unsigned int (*v24)(const void *, _QWORD *);
  const __CFAllocator *v25;
  CFDictionaryRef v26;
  uint64_t v27;
  void (*v28)(uint64_t, _QWORD, CFDictionaryRef, _QWORD);
  uint64_t v29;
  void (*v30)(uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v31;
  unsigned int (*v32)(uint64_t, CMSampleBufferRef);
  uint64_t v33;
  uint64_t v34;
  const void *v35;
  BOOL v36;
  int v37;
  void (*v38)(const void *, uint64_t);
  const void *v39;
  void (*v40)(const void *, uint64_t);
  CMTime lhs;
  CMTime rhs;
  CMTime time;
  CMTime v46;
  void *values;

  values = 0;
  SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(sbuf, 0);
  if (SampleAttachmentsArray
    && (v16 = SampleAttachmentsArray, CFArrayGetCount(SampleAttachmentsArray) >= 1)
    && (ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v16, 0)) != 0
    && (const void *)*MEMORY[0x1E0C9AE50] == CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E0CA25D8]))
  {
    if (a5 == 1)
      a5 = 0;
    a4 = 4;
  }
  else
  {
    if ((a4 - 1) < 2)
    {
      v18 = (const void **)MEMORY[0x1E0CA25D8];
      goto LABEL_11;
    }
    if (a4 == 3)
    {
      v18 = (const void **)MEMORY[0x1E0CA25D0];
      goto LABEL_11;
    }
    if (a4 == 5)
    {
      v18 = (const void **)MEMORY[0x1E0CA4E10];
LABEL_11:
      videoMentorSetAttachmentOnSample(sbuf, *v18, (const void *)*MEMORY[0x1E0C9AE50]);
    }
  }
  v19 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if ((a5 - 1) <= 1)
  {
    v46 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    CMSampleBufferGetPresentationTimeStamp(&v46, sbuf);
    v20 = *v19;
    time = v46;
    v21 = CMTimeCopyAsDictionary(&time, v20);
    if (v21)
    {
      v22 = v21;
      if (a5 == 1)
      {
        if (a3)
        {
          v23 = malloc_type_calloc(1uLL, 0x40uLL, 0x1020040038FC326uLL);
          if (!v23)
            goto LABEL_28;
          v24 = *(unsigned int (**)(const void *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
          if (v24 && !v24(a3, v23 + 1) && !videoMentorGetCursorPTSRange(a3, (_OWORD *)v23 + 1))
          {
            videoMentorSetAttachmentOnSample(sbuf, (const void *)*MEMORY[0x1E0CA4E20], v22);
LABEL_28:
            CFRelease(v22);
            if (!a6)
              goto LABEL_29;
            goto LABEL_22;
          }
          videoMentorSavedFrameDestroy(v23);
        }
      }
      else
      {
        videoMentorSetAttachmentOnSample(sbuf, (const void *)*MEMORY[0x1E0CA4E18], v21);
      }
      v23 = 0;
      goto LABEL_28;
    }
  }
  v23 = 0;
  if (!a6)
  {
LABEL_29:
    v26 = 0;
    goto LABEL_30;
  }
LABEL_22:
  ++*(_DWORD *)(a1 + 504);
  v25 = *v19;
  values = CFNumberCreate(*v19, kCFNumberIntType, (const void *)(a1 + 504));
  v26 = CFDictionaryCreate(v25, MEMORY[0x1E0CA2748], (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CMSetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0CA26E0], values, 1u);
  v27 = *(_QWORD *)(a1 + 24);
  v28 = *(void (**)(uint64_t, _QWORD, CFDictionaryRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 64);
  if (v28)
    v28(v27, *MEMORY[0x1E0CA2760], v26, 0);
  v29 = *(_QWORD *)(a1 + 24);
  v30 = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (v30)
    v30(v29, *MEMORY[0x1E0CA2768], 0, 0);
LABEL_30:
  if (*(_BYTE *)(a1 + 492))
  {
    videoMentorPostCollectorCoherenceConduitNotification(a1);
    *(_BYTE *)(a1 + 492) = 0;
  }
  if (a8)
    CMSetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0CA26D8], (CFTypeRef)*MEMORY[0x1E0C9AE50], 1u);
  v31 = *(_QWORD *)(a1 + 24);
  v32 = *(unsigned int (**)(uint64_t, CMSampleBufferRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v32 || v32(v31, sbuf))
  {
    v34 = FigSignalErrorAt();
  }
  else
  {
    *(_BYTE *)(a1 + 520) = 1;
    ++*(_DWORD *)(a1 + 900);
    if (v23)
    {
      *v23 = *(_QWORD *)(a1 + 552);
      *(_QWORD *)(a1 + 552) = v23;
      ++*(_DWORD *)(a1 + 904);
    }
    if (a5 == 2)
      ++*(_DWORD *)(a1 + 908);
    if (a4 != 3)
      goto LABEL_43;
    memset(&v46, 0, sizeof(v46));
    CMSampleBufferGetOutputPresentationTimeStamp(&v46, sbuf);
    memset(&time, 0, sizeof(time));
    CMSampleBufferGetOutputDuration(&rhs, sbuf);
    lhs = v46;
    CMTimeAdd(&time, &lhs, &rhs);
    lhs = v46;
    v33 = videoMentorEnqueueTimestampIntervalMarker(a1);
    if ((_DWORD)v33)
    {
      v34 = v33;
    }
    else
    {
LABEL_43:
      v35 = *(const void **)(a1 + 536);
      if (v35)
      {
        CFRelease(v35);
        *(_QWORD *)(a1 + 536) = 0;
      }
      if (a3)
        v36 = a7 == 0;
      else
        v36 = 1;
      v37 = !v36;
      if (!v36 && (a4 == 3 || !a4))
      {
        v38 = *(void (**)(const void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (v38)
          v38(a3, a1 + 536);
      }
      if ((a5 - 4) <= 0xFFFFFFFD)
      {
        v39 = *(const void **)(a1 + 528);
        if (v39)
        {
          CFRelease(v39);
          *(_QWORD *)(a1 + 528) = 0;
        }
        if (v37)
        {
          v40 = *(void (**)(const void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
          if (v40)
            v40(a3, a1 + 528);
        }
      }
      v34 = 0;
    }
    v23 = 0;
  }
  if (values)
    CFRelease(values);
  if (v26)
    CFRelease(v26);
  videoMentorSavedFrameDestroy(v23);
  return v34;
}

void videoMentorSetAttachmentOnSample(opaqueCMSampleBuffer *a1, const void *a2, const void *a3)
{
  const __CFArray *SampleAttachmentsArray;
  __CFDictionary *ValueAtIndex;

  SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a1, 1u);
  if (SampleAttachmentsArray)
  {
    ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
    if (ValueAtIndex)
      CFDictionarySetValue(ValueAtIndex, a2, a3);
  }
}

_BYTE *sbp_bq_InhibitOutputUntil()
{
  _BYTE *result;

  result = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return (_BYTE *)CMNotificationCenterPostNotification();
  }
  return result;
}

void vmc2InhibitOutputUntil(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  const void *v7;
  const void *Value;

  if (!*(_BYTE *)(a2 + 16))
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(a2 + 776));
    v7 = *(const void **)(a2 + 784);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(a2 + 784) = 0;
    }
    if (a5)
    {
      Value = CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E0CA2748]);
      if (Value)
      {
        ++*(_DWORD *)(a2 + 792);
        *(_QWORD *)(a2 + 784) = Value;
        CFRetain(Value);
      }
    }
    JUMPOUT(0x19402EF04);
  }
}

_BYTE *sbp_bq_ResetOutput()
{
  _BYTE *result;

  result = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return (_BYTE *)CMNotificationCenterPostNotification();
  }
  return result;
}

uint64_t vmc2ResetOutput(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  if (!*(_BYTE *)(a2 + 16))
  {
    vmc2InvokeOutputCallback_FlushOutput(a2);
    ++*(_DWORD *)(a2 + 524);
    MEMORY[0x19402EA0C](*(_QWORD *)(a2 + 280));
    v3 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)(a2 + 368) = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)(a2 + 384) = *(_QWORD *)(v3 + 16);
    MEMORY[0x19402EA24](*(_QWORD *)(a2 + 280));
    return vmc2ResetTroubleMonitorTimers(a2);
  }
  return result;
}

uint64_t piqca_flush(uint64_t a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  ++*(_DWORD *)(DerivedStorage + 24);
  *(_BYTE *)(DerivedStorage + 135) = 0;
  if (*(_BYTE *)(DerivedStorage + 52))
    CAImageQueueFlush();
  *(_BYTE *)(DerivedStorage + 50) = 1;
  piqca_postOccupancyChanged(a1);
  return 0;
}

_BYTE *sbp_bq_dataBecameReady()
{
  _BYTE *result;

  result = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return (_BYTE *)CMNotificationCenterPostNotification();
  }
  return result;
}

void vmc2InputDataBecameReady(uint64_t a1, uint64_t a2)
{
  if (!*(_BYTE *)(a2 + 16))
  {
    *(_BYTE *)(a2 + 592) = 1;
    vmc2TriggerSchedulingIfOutputIsLow(a2);
  }
}

uint64_t vmc2TriggerSchedulingIfOutputIsLow(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  result = vmc2GetWaterLevelState(a1);
  if (!(_DWORD)result || *(_BYTE *)(a1 + 440))
  {
    v3 = *(_QWORD *)(a1 + 264);
    result = CMBaseObjectGetVTable();
    v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 16);
    if (v4)
      return v4(v3);
  }
  return result;
}

void editMentorChildMentorStoppedDueToCompletion(int a1, uint64_t a2, int a3, int a4, CFDictionaryRef theDict)
{
  const void *Value;
  _BOOL4 v8;
  int v9;
  CFTypeRef cf;

  cf = 0;
  v9 = 1;
  if (theDict)
  {
    Value = CFDictionaryGetValue(theDict, CFSTR("Mentor_Order"));
    v8 = CFDictionaryGetValue(theDict, CFSTR("Mentor_SamplesWereGenerated")) == (const void *)*MEMORY[0x1E0C9AE50];
    CFDictionaryGetValue(theDict, CFSTR("Mentor_LastsForever"));
  }
  else
  {
    Value = 0;
    v8 = 0;
  }
  if (editMentorChildOrderRefIsCurrent_RetainParentOrder(a2, Value, &cf, &v9, editMentorSetModeChangePolicyToPreservePreviousOutput))
  {
    *(_BYTE *)(a2 + 296) = (v8 | *(unsigned __int8 *)(a2 + 296)) != 0;
    editMentorAdvanceToNextEdit(a2);
  }
  if (cf)
    CFRelease(cf);
}

void editMentorSetModeChangePolicyToPreservePreviousOutput(uint64_t a1)
{
  __CFDictionary *Mutable;

  Mutable = *(__CFDictionary **)(a1 + 608);
  if (Mutable
    || (Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]), (*(_QWORD *)(a1 + 608) = Mutable) != 0)|| (FigSignalErrorAt(), (Mutable = *(__CFDictionary **)(a1 + 608)) != 0))
  {
    CFDictionarySetValue(Mutable, CFSTR("ModeChangePolicy"), CFSTR("PreservePreviousOutput"));
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 608), CFSTR("SynchronouslyResetOutput"), (const void *)*MEMORY[0x1E0C9AE40]);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 608), CFSTR("CollectorCoherenceToken"));
  }
}

void editMentorStartNewChildOrder(uint64_t a1)
{
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 312));
  editMentorBumpChildOrder(a1);
  JUMPOUT(0x19402EF04);
}

void editMentorPostOrderCompletionNotification(uint64_t a1, const void *a2, int a3)
{
  __CFDictionary *v5;
  const void *v6;
  const void *v7;

  v5 = FigMentorNotificationPayloadCreate((uint64_t)CFSTR("MentorStoppingDueToCompletion"), a2, 0, *(unsigned __int8 *)(a1 + 296), 0, a3);
  if (*(_BYTE *)(a1 + 680))
    editMentorPostSyntheticPrerollCompleteNotification(a1, a2);
  v6 = *(const void **)(a1 + 672);
  if (v6)
  {
    editMentorSetChildMentorModeToDoNothing(a1, 0, v6);
    v7 = *(const void **)(a1 + 672);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(a1 + 672) = 0;
    }
  }
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (v5)
    CFRelease(v5);
}

uint64_t vmc2RecalculateUpcomingImageTimes(uint64_t a1)
{
  uint64_t v2;
  unsigned int (*v3)(uint64_t);
  uint64_t v4;
  unsigned int (*v5)(uint64_t);
  _BOOL4 v6;
  uint64_t v7;
  void (*v8)(uint64_t, CMTime *, CMTime *, CMTime *);
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, CMTime *, CMTime *);
  uint64_t v12;
  CMTime v14;
  CMTime v15;
  CMTime v16;
  CMTime v17;
  CMTime time2;
  CMTime time1;

  v17 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
  v16 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E28];
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 280));
  v2 = *(_QWORD *)(a1 + 88);
  v3 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v3 && v3(v2))
  {
    v4 = *(_QWORD *)(a1 + 88);
    v5 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    v6 = v5 && v5(v4) || *(_BYTE *)(a1 + 730) != 0;
  }
  else
  {
    v6 = 0;
  }
  LOBYTE(v15.value) = 0;
  memset(&time1, 0, sizeof(time1));
  memset(&time2, 0, sizeof(time2));
  v7 = *(_QWORD *)(a1 + 88);
  v8 = *(void (**)(uint64_t, CMTime *, CMTime *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v8 && (v8(v7, &v15, &time1, &time2), LOBYTE(v15.value)) && (time1.flags & 1) != 0)
  {
    v9 = 0;
    v17 = time1;
    v16 = time2;
  }
  else
  {
    v9 = 1;
  }
  if ((*(_DWORD *)(a1 + 332) & 0x1D) == 1)
  {
    time1 = v17;
    time2 = *(CMTime *)(a1 + 320);
    CMTimeMinimum(&v17, &time1, &time2);
    time1 = v16;
    time2 = *(CMTime *)(a1 + 320);
    CMTimeMaximum(&v16, &time1, &time2);
    v9 = 0;
    v6 = 0;
  }
  if ((*(_DWORD *)(a1 + 356) & 0x1D) == 1)
  {
    time2 = v17;
    v15 = *(CMTime *)(a1 + 344);
    CMTimeMinimum(&time1, &time2, &v15);
    v17 = time1;
    time2 = v16;
    v15 = *(CMTime *)(a1 + 344);
    CMTimeMaximum(&time1, &time2, &v15);
    v16 = time1;
    if ((*(_DWORD *)(a1 + 404) & 0x1D) != 1)
    {
      v9 = 0;
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if ((*(_DWORD *)(a1 + 404) & 0x1D) == 1)
  {
LABEL_18:
    time2 = v17;
    v15 = *(CMTime *)(a1 + 392);
    CMTimeMinimum(&time1, &time2, &v15);
    v17 = time1;
    time2 = v16;
    v15 = *(CMTime *)(a1 + 392);
    CMTimeMaximum(&time1, &time2, &v15);
    v9 = 0;
    v16 = time1;
    goto LABEL_19;
  }
  if (!v6)
  {
LABEL_19:
    if ((*(_DWORD *)(a1 + 428) & 0x1D) == 1)
    {
      time2 = v17;
      v15 = *(CMTime *)(a1 + 416);
      CMTimeMinimum(&time1, &time2, &v15);
      v17 = time1;
      time2 = v16;
      v15 = *(CMTime *)(a1 + 416);
      CMTimeMaximum(&time1, &time2, &v15);
      v9 = 0;
      v10 = 0;
      v16 = time1;
    }
    else
    {
      v10 = 0;
    }
    goto LABEL_22;
  }
  if (*(_BYTE *)(a1 + 312))
    goto LABEL_26;
  v10 = 1;
LABEL_22:
  v15 = v17;
  v14 = v16;
  FigReadWriteLockLockForRead();
  if (*(_BYTE *)(a1 + 249))
  {
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, CMTime *, CMTime *))(a1 + 160);
    if (v11)
    {
      v12 = *(_QWORD *)(a1 + 152);
      time1 = v15;
      time2 = v14;
      v11(v12, v9, v10, &time1, &time2);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  FigReadWriteLockUnlockForRead();
  ++*(_DWORD *)(a1 + 524);
LABEL_26:
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 280));
  return vmc2TriggerSchedulingIfOutputIsLow(a1);
}

uint64_t sbp_bq_isEmpty()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
    return CMBufferQueueIsEmpty(*(CMBufferQueueRef *)(DerivedStorage + 8));
  FigSignalErrorAt();
  return 1;
}

uint64_t piqca_setUpcomingImageInfo(uint64_t a1, unsigned int a2, __int128 *a3, __int128 *a4)
{
  uint64_t DerivedStorage;
  __int128 v9;
  __int128 v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 >= 4 || a2 == 2 && ((*((_DWORD *)a3 + 3) & 0x1D) != 1 || (*((_DWORD *)a4 + 3) & 0x1D) != 1))
    return FigSignalErrorAt();
  v9 = *a3;
  *(_QWORD *)(DerivedStorage + 180) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(DerivedStorage + 164) = v9;
  v10 = *a4;
  *(_QWORD *)(DerivedStorage + 204) = *((_QWORD *)a4 + 2);
  *(_OWORD *)(DerivedStorage + 188) = v10;
  *(_DWORD *)(DerivedStorage + 160) = a2;
  piqca_updateReducedPollingTimeRange(a1);
  return 0;
}

void figPlaybackBoss_MentorStopping(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t v7;
  int v8;
  const void *Value;
  const __CFNumber *v10;
  const __CFNumber *v11;
  __CFDictionary *v12;
  CFTypeID v13;
  int v14;
  int v15;
  BOOL v16;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v18;
  int v19;
  _BOOL4 v20;
  NSObject *v21;
  CFIndex v22;
  char v23;
  const void *v24;
  CFAllocatorRef *v25;
  const void *v26;
  uint64_t FigBaseObject;
  unsigned int (*v28)(uint64_t, const __CFString *, const __CFAllocator *, os_log_type_t *);
  CFAllocatorRef *v29;
  const __CFAllocator *v30;
  CFDictionaryRef v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, const __CFString *, CFAllocatorRef, CMTimeRange *);
  int v34;
  const void *v35;
  uint64_t v36;
  unsigned int (*v37)(uint64_t, const __CFString *, CFAllocatorRef, CMTimeRange *);
  const __CFAllocator *v38;
  CFAllocatorRef *v39;
  NSObject *v40;
  unsigned int v41;
  unsigned int v42;
  __CFDictionary *Mutable;
  const void *v44;
  const void *v45;
  NSObject *v46;
  unsigned int v47;
  unsigned int v48;
  CFIndex v49;
  CFTypeRef v50;
  char v51;
  CMTime end;
  CMAttachmentBearerRef target;
  os_log_type_t type[8];
  CMTime start;
  uint64_t v56;
  CMTimeRange valuePtr[2];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v7 = FigCFWeakReferenceHolderCopyReferencedObject();
  v8 = FigCFEqual();
  if (a5)
  {
    Value = CFDictionaryGetValue(a5, CFSTR("Mentor_Order"));
    v10 = (const __CFNumber *)CFDictionaryGetValue(a5, CFSTR("Mentor_OSStatus"));
    v11 = v10;
    if (v10)
      CFRetain(v10);
    a5 = (const __CFDictionary *)CFDictionaryGetValue(a5, CFSTR("Mentor_NotificationThatWasRequestedButDropped"));
    if (!v7)
      goto LABEL_10;
  }
  else
  {
    v11 = 0;
    Value = 0;
    if (!v7)
    {
LABEL_10:
      v12 = 0;
      goto LABEL_11;
    }
  }
  if (*(_BYTE *)(v7 + 16))
    goto LABEL_10;
  MEMORY[0x19402EEEC](*(_QWORD *)(v7 + 576));
  if (*(const void **)(a2 + 200) != Value)
    goto LABEL_9;
  if (a5)
  {
    v13 = CFGetTypeID(a5);
    if (v13 == CFDictionaryGetTypeID())
    {
      if (CFDictionaryGetValue(a5, CFSTR("BossScrubOrder")))
      {
        if (FigCFEqual())
        {
          v14 = *(_DWORD *)(v7 + 776);
          if (v14)
          {
            *(_BYTE *)(v7 + 780) = 0;
            *(_DWORD *)(v7 + 776) = 0;
            MEMORY[0x19402EF04](*(_QWORD *)(v7 + 576));
            v15 = -1;
            LODWORD(valuePtr[0].start.value) = -1;
            if (v11)
            {
              CFNumberGetValue(v11, kCFNumberSInt32Type, valuePtr);
              v15 = valuePtr[0].start.value;
            }
            figPlaybackBossPostSeekDidComplete(v7, v14, v15);
            goto LABEL_10;
          }
        }
        goto LABEL_9;
      }
    }
  }
  if (!*(_BYTE *)(a2 + 212))
  {
LABEL_9:
    MEMORY[0x19402EF04](*(_QWORD *)(v7 + 576));
    goto LABEL_10;
  }
  if (v8)
    v16 = dword_1EE2A2C50 == 0;
  else
    v16 = 1;
  if (!v16)
  {
    LODWORD(end.value) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v18 = *(_DWORD *)(v7 + 424);
  if (v18 == 1886151033)
  {
    v19 = 0;
    v51 = 0;
    v20 = 0;
  }
  else
  {
    if (v18 == 1920298606)
    {
      v19 = *(unsigned __int8 *)(v7 + 428);
      v20 = *(_BYTE *)(v7 + 428) == 0;
    }
    else
    {
      v19 = 0;
      v20 = 0;
    }
    v51 = 1;
  }
  *(_BYTE *)(a2 + 212) = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(v7 + 64));
  if (*(_BYTE *)(v7 + 840))
  {
    LODWORD(end.value) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(uint64_t *)(v7 + 80) < 1)
  {
LABEL_44:
    MEMORY[0x19402EF04](*(_QWORD *)(v7 + 64));
    v23 = 0;
    v24 = *(const void **)(v7 + 416);
    *(_QWORD *)(v7 + 416) = 0;
  }
  else
  {
    v22 = 0;
    while (!*((_BYTE *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v7 + 72), v22) + 212))
    {
      if (*(_QWORD *)(v7 + 80) <= ++v22)
        goto LABEL_44;
    }
    MEMORY[0x19402EF04](*(_QWORD *)(v7 + 64));
    v24 = 0;
    v23 = 1;
  }
  v25 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (v8)
  {
    if (v11)
    {
      *(_BYTE *)(v7 + 548) = 1;
      v26 = *(const void **)(v7 + 552);
      *(_QWORD *)(v7 + 552) = v11;
    }
    else
    {
      LODWORD(valuePtr[0].start.value) = -12373;
      v11 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, valuePtr);
      *(_BYTE *)(v7 + 548) = 1;
      v26 = *(const void **)(v7 + 552);
      *(_QWORD *)(v7 + 552) = v11;
      if (!v11)
        goto LABEL_51;
    }
    CFRetain(v11);
LABEL_51:
    if (v26)
      CFRelease(v26);
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v7 + 576));
  if (v19)
  {
    target = 0;
    *(_QWORD *)type = 0;
    FigBaseObject = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(a2 + 80));
    v28 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, os_log_type_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v28)
    {
      v29 = v25;
      v30 = *v25;
      if (v28(FigBaseObject, CFSTR("SourceSampleBufferQueue"), v30, type))
      {
        v31 = 0;
      }
      else
      {
        start = *(CMTime *)(v7 + 240);
        end = *(CMTime *)(v7 + 264);
        CMTimeRangeFromTimeToTime(valuePtr, &start, &end);
        v31 = CMTimeRangeCopyAsDictionary(valuePtr, v30);
        if (!CMSampleBufferCreate(v30, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)&target))
        {
          CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E0CA4E60], v31, 1u);
          CMBufferQueueEnqueue(*(CMBufferQueueRef *)type, target);
        }
      }
      v25 = v29;
    }
    else
    {
      v31 = 0;
    }
    if (*(_QWORD *)type)
      CFRelease(*(CFTypeRef *)type);
    if (target)
      CFRelease(target);
    if (v31)
      CFRelease(v31);
  }
  if (v20)
  {
    valuePtr[0].start.value = 0;
    v32 = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(a2 + 80));
    v33 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
    if (v33)
    {
      v34 = v33(v32, CFSTR("SourceSampleBufferQueue"), *v25, valuePtr);
      v35 = (const void *)valuePtr[0].start.value;
      if (!v34)
      {
        CMBufferQueueMarkEndOfData((CMBufferQueueRef)valuePtr[0].start.value);
        v35 = (const void *)valuePtr[0].start.value;
      }
      if (v35)
        CFRelease(v35);
    }
  }
  if ((v51 & 1) == 0)
  {
    valuePtr[0].start.value = 0;
    start.value = 0;
    v36 = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(a2 + 80));
    v37 = *(unsigned int (**)(uint64_t, const __CFString *, CFAllocatorRef, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v37)
    {
      v38 = *v25;
      if (!v37(v36, CFSTR("SourceSampleBufferQueue"), *v25, valuePtr)
        && !CMSampleBufferCreateReady(v38, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)&start))
      {
        CMSetAttachment((CMAttachmentBearerRef)start.value, (CFStringRef)*MEMORY[0x1E0CA4E48], (CFTypeRef)*MEMORY[0x1E0C9AE50], 1u);
        CMBufferQueueEnqueue((CMBufferQueueRef)valuePtr[0].start.value, (CMBufferRef)start.value);
      }
    }
    if (valuePtr[0].start.value)
      CFRelease((CFTypeRef)valuePtr[0].start.value);
    if (start.value)
      CFRelease((CFTypeRef)start.value);
  }
  if ((v23 & 1) == 0)
  {
    if (dword_1EE2A2C50)
    {
      v39 = v25;
      LODWORD(end.value) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v40 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v41 = end.value;
      if (os_log_type_enabled(v40, type[0]))
        v42 = v41;
      else
        v42 = v41 & 0xFFFFFFFE;
      if (v42)
      {
        LODWORD(start.value) = 136315650;
        *(CMTimeValue *)((char *)&start.value + 4) = (CMTimeValue)"figPlaybackBoss_MentorStopping";
        LOWORD(start.flags) = 2048;
        *(_QWORD *)((char *)&start.flags + 2) = v7;
        HIWORD(start.epoch) = 2082;
        v56 = v7 + 841;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v25 = v39;
    }
    if (*(_BYTE *)(v7 + 584))
    {
      *(_BYTE *)(v7 + 584) = 0;
      if (*(float *)(v7 + 432) != 0.0)
        bossScheduleReachedEndCallbackUsingRenderPipelineQueueEndPTS(v7);
    }
    if (*(_DWORD *)(v7 + 424) == 1920298606)
      *(_DWORD *)(v7 + 424) = 1768189029;
    if (v24)
    {
      Mutable = CFDictionaryCreateMutable(*v25, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v12 = Mutable;
      if (!Mutable)
        goto LABEL_104;
      CFDictionarySetValue(Mutable, CFSTR("ControlToken"), v24);
    }
    else
    {
      if (!*(_QWORD *)(v7 + 552))
      {
        v12 = 0;
        goto LABEL_104;
      }
      v12 = CFDictionaryCreateMutable(*v25, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!v12)
        goto LABEL_104;
    }
    v44 = *(const void **)(v7 + 552);
    if (v44)
    {
      CFDictionarySetValue(v12, CFSTR("OSStatus"), v44);
      v45 = *(const void **)(v7 + 552);
      if (v45)
      {
        CFRelease(v45);
        *(_QWORD *)(v7 + 552) = 0;
      }
    }
LABEL_104:
    MEMORY[0x19402EEEC](*(_QWORD *)(v7 + 576));
    MEMORY[0x19402EEEC](*(_QWORD *)(v7 + 64));
    if (*(_BYTE *)(v7 + 840))
    {
      LODWORD(end.value) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v46 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v47 = end.value;
      if (os_log_type_enabled(v46, type[0]))
        v48 = v47;
      else
        v48 = v47 & 0xFFFFFFFE;
      if (v48)
      {
        LODWORD(start.value) = 136315394;
        *(CMTimeValue *)((char *)&start.value + 4) = (CMTimeValue)"figPlaybackBoss_MentorStopping";
        LOWORD(start.flags) = 2048;
        *(_QWORD *)((char *)&start.flags + 2) = v7;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (*(uint64_t *)(v7 + 80) < 1)
    {
LABEL_115:
      MEMORY[0x19402EF04](*(_QWORD *)(v7 + 64));
      MEMORY[0x19402EF04](*(_QWORD *)(v7 + 576));
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }
    else
    {
      v49 = 0;
      while (!*((_BYTE *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v7 + 72), v49) + 214))
      {
        if (*(_QWORD *)(v7 + 80) <= ++v49)
          goto LABEL_115;
      }
      MEMORY[0x19402EF04](*(_QWORD *)(v7 + 64));
      *(_BYTE *)(v7 + 560) = 1;
      if (v12)
        v50 = CFRetain(v12);
      else
        v50 = 0;
      *(_QWORD *)(v7 + 568) = v50;
      MEMORY[0x19402EF04](*(_QWORD *)(v7 + 576));
    }
    goto LABEL_120;
  }
  v12 = 0;
LABEL_120:
  if (v24)
    CFRelease(v24);
LABEL_11:
  if (v11)
    CFRelease(v11);
  if (v12)
    CFRelease(v12);
  if (v7)
    CFRelease((CFTypeRef)v7);
}

uint64_t FigCRABS_GetRangeInCache(const void *a1, unint64_t a2, unint64_t *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int64_t v10;
  int *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char v19;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    if ((a2 & 0x8000000000000000) != 0
      || (v7 = DerivedStorage, *(_QWORD *)(DerivedStorage + 56) <= (int64_t)a2))
    {
      result = FigSignalErrorAt();
    }
    else
    {
      result = crabsEnsureInitialized(a1);
      if (!(_DWORD)result)
      {
        result = FigRetainProxyLockMutex();
        if (!(_DWORD)result)
        {
          v9 = *(_QWORD *)(v7 + 96);
          if (v9 == 0x4000)
          {
            v10 = a2 >> 14;
          }
          else if (v9 == 0x10000)
          {
            v10 = a2 >> 16;
          }
          else
          {
            v10 = (uint64_t)a2 / v9;
          }
          if (v10 < *(_QWORD *)(v7 + 88))
          {
            v11 = *(int **)(*(_QWORD *)(v7 + 80) + 8 * v10);
            if (v11)
            {
              v19 = 0;
              if ((*(_BYTE *)(v7 + 504) & 3) == 0)
                crabsEnsureBlockNotPurged((_QWORD *)v7, v11, &v19);
              if (v10 < *(_QWORD *)(v7 + 224))
                *(_BYTE *)(v7 + 128) = 1;
              v12 = v11[1];
              v13 = *(_QWORD *)(v7 + 96);
              v14 = a2 - v13 * *v11;
              v15 = v12 - v14;
              if (v12 <= v14)
              {
                v15 = 0;
              }
              else if (v13 == v12)
              {
                v16 = v10 + 1;
                do
                {
                  if (v16 >= *(_QWORD *)(v7 + 88))
                    break;
                  v17 = *(int **)(*(_QWORD *)(v7 + 80) + 8 * v16);
                  if (!v17)
                    break;
                  if ((*(_BYTE *)(v7 + 504) & 3) == 0)
                  {
                    crabsEnsureBlockNotPurged((_QWORD *)v7, v17, &v19);
                    v12 = *(_QWORD *)(v7 + 96);
                  }
                  v18 = v17[1];
                  v15 += v18;
                  ++v16;
                }
                while (v12 == v18);
              }
              crabsUnlockWithActions(v7);
              result = 0;
              goto LABEL_30;
            }
          }
          crabsUnlockWithActions(v7);
          result = 0;
        }
      }
    }
    v15 = 0;
LABEL_30:
    *a3 = v15;
    return result;
  }
  return FigSignalErrorAt();
}

void crabsEnsureBlockNotPurged(_QWORD *a1, int *a2, _BYTE *a3)
{
  __int16 v5;

  if (a1[28] > *a2 || *a3)
  {
    crabsCleanupBlockIfPurged((uint64_t)a1, a2);
  }
  else
  {
    v5 = *((_WORD *)a2 + 4);
    *((_WORD *)a2 + 4) = v5 | 0x400;
    crabsPurgeCompletionSweep(a1);
    *a3 = 1;
    *((_WORD *)a2 + 4) = a2[2] & 0xFBFF | v5 & 0x400;
  }
}

uint64_t stepDownEntry(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t result;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t destination;

  if (*(_BYTE *)(a1 + 120))
  {
    v2 = *(_DWORD *)(a1 + 112);
    v3 = *(_QWORD *)(a1 + 8);
    v4 = *(int *)(a1 + 88);
    destination = 0;
    CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v3 + 416), 8 * v4, 8uLL, &destination);
    v5 = bswap32(destination);
    *(_DWORD *)(a1 + 112) = v5;
    v6 = *(_DWORD *)(a1 + 88) + 1;
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_DWORD *)(v7 + 408);
    *(_BYTE *)(a1 + 120) = v6 == v8;
    v9 = *(_DWORD *)(v7 + 244);
    if (v9)
    {
      v5 /= v9;
      *(_DWORD *)(a1 + 112) = v5;
    }
    if (v2 != v5)
      return 0;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_DWORD *)(v7 + 408);
    v6 = *(_DWORD *)(a1 + 88) + 1;
  }
  if (v6 == v8)
    return 4294954456;
  v11 = *(unsigned int *)(a1 + 112);
  v12 = *(_DWORD *)(a1 + 116);
  *(_QWORD *)(a1 + 96) += *(_QWORD *)(a1 + 104) * v11;
  *(_DWORD *)(a1 + 116) = v12 + v11;
  *(_DWORD *)(a1 + 88) = v6;
  destination = 0;
  CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v7 + 416), 8 * v6, 8uLL, &destination);
  v13 = bswap32(destination);
  *(_DWORD *)(a1 + 112) = v13;
  v14 = *(_QWORD *)(a1 + 8);
  v15 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (v15)
    LOBYTE(v15) = *(_DWORD *)(a1 + 88) + 1 == *(_DWORD *)(v14 + 408);
  *(_BYTE *)(a1 + 120) = v15;
  v16 = *(int *)(v14 + 244);
  if ((_DWORD)v16)
  {
    *(_DWORD *)(a1 + 112) = v13 / v16;
  }
  else
  {
    v17 = *(int *)(a1 + 88);
    destination = 0;
    CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v14 + 416), 8 * v17, 8uLL, &destination);
    v16 = bswap32(HIDWORD(destination));
  }
  result = 0;
  *(_QWORD *)(a1 + 104) = v16;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a1 + 116);
  return result;
}

uint64_t FigByteRateHistoryReportAverage(uint64_t result, double *a2, double *a3)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v7;
  double v8;

  if (a2)
  {
    v3 = *(_QWORD *)(result + 24);
    v4 = *(_QWORD *)(result + 32);
    v5 = 0.0;
    if (v3 > 499999999 || v4 >= 1000000)
      v5 = (double)v4 * 1000000000.0 / (double)v3;
    *a2 = v5;
  }
  if (a3)
  {
    v7 = *(_QWORD *)(result + 56);
    if (v7)
      v8 = sqrt(*(double *)(result + 48) / (double)v7);
    else
      v8 = 0.0;
    *a3 = v8;
  }
  return result;
}

uint64_t FigPlayabilityMonitorGetPlayableRange(uint64_t a1, uint64_t a2, CMTime *a3)
{
  CMTimeEpoch v6;
  uint64_t updated;
  __int128 v8;
  __int128 v10;
  CMTime rhs;
  CMTime v12;
  CMTime time2;
  CMTime time1;

  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 48));
  CMTimebaseGetTime(&time1, *(CMTimebaseRef *)(a1 + 24));
  v10 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&time2.value = *MEMORY[0x1E0CA2E68];
  v6 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  time2.epoch = v6;
  CMTimeMaximum(&v12, &time1, &time2);
  if (*(_DWORD *)(a1 + 184) == *(_DWORD *)(a1 + 96)
    && !*(_BYTE *)(a1 + 313)
    && (time1 = v12, time2 = *(CMTime *)(a1 + 216), (CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
    && (time1 = v12, time2 = *(CMTime *)(a1 + 240), CMTimeCompare(&time1, &time2) < 1)
    || (updated = fpm_updateCacheAndNotify(a1), !(_DWORD)updated))
  {
    v8 = *(_OWORD *)(a1 + 216);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 232);
    *(_OWORD *)a2 = v8;
    time1 = *(CMTime *)(a1 + 216);
    time2 = *(CMTime *)(a1 + 240);
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      time2 = *(CMTime *)(a1 + 240);
      rhs = *(CMTime *)(a1 + 216);
      CMTimeSubtract(&time1, &time2, &rhs);
      updated = 0;
      *a3 = time1;
    }
    else
    {
      updated = 0;
      *(_OWORD *)&a3->value = v10;
      a3->epoch = v6;
    }
  }
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 48));
  return updated;
}

void vmc2OutputFrame(uint64_t a1, _DWORD *a2, int a3, unsigned int a4, uint64_t a5, CMTime *a6, uint64_t a7)
{
  __int128 v7;
  uint64_t v8;
  CMTime v9;

  v9 = *a6;
  v7 = *(_OWORD *)a7;
  v8 = *(_QWORD *)(a7 + 16);
  vmc2OutputFrameInternal(a1, a2, a3, a4, a5, 0, &v9, &v7, 0);
}

uint64_t piqca_enqueueImage(uint64_t a1, __CVBuffer *a2, const void *a3, __int128 *a4, char a5)
{
  __int128 v6;
  uint64_t v7;

  v6 = *a4;
  v7 = *((_QWORD *)a4 + 2);
  return piqca_enqueueImageWithRotation(a1, a2, a3, (uint64_t *)&v6, 0, a5);
}

uint64_t piqca_postOccupancyChanged(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v4;
  void (*v5)(__int128 *__return_ptr, uint64_t);
  uint64_t (*v6)(uint64_t, __int128 *);
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  result = CMNotificationCenterPostNotification();
  v4 = *(_QWORD *)(DerivedStorage + 3080);
  if (v4)
  {
    v5 = *(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
    if (v5)
    {
      v5(&v7, a1);
    }
    else
    {
      v7 = *MEMORY[0x1E0CA2E18];
      v8 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    }
    result = CMBaseObjectGetVTable();
    v6 = *(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)(result + 16) + 8);
    if (v6)
    {
      v9 = v7;
      v10 = v8;
      return v6(v4, &v9);
    }
  }
  return result;
}

uint64_t vmc2OutputOccupancyChanged(uint64_t result)
{
  uint64_t v1;
  int v2;
  _BOOL4 v3;
  int v4;

  if (!*(_BYTE *)(result + 16))
  {
    v1 = result;
    ++*(_DWORD *)(result + 524);
    v2 = *(unsigned __int8 *)(result + 592);
    if (vmc2GetWaterLevelState(result))
      v3 = *(_BYTE *)(v1 + 440) != 0;
    else
      v3 = 1;
    v4 = vmc2GetWaterLevelState(v1) == 2 && *(_BYTE *)(v1 + 440) == 0;
    vmc2UpdateTroubleMonitor(v1, v2, v3, v4, 0);
    return vmc2TriggerSchedulingIfOutputIsLow(v1);
  }
  return result;
}

uint64_t vmc2FrameDecodeCompleted(uint64_t a1, uint64_t a2)
{
  vmc2UpdateSessionMinAndMaxOutputPTS(a2);
  return vmc2CheckForEnd(a2);
}

uint64_t piqca_setDirection(uint64_t a1, float a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  int v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = DerivedStorage;
  if (a2 >= 0.0)
    v6 = 0;
  else
    v6 = -1;
  if (a2 > 0.0)
    v6 = 1;
  *(_DWORD *)(DerivedStorage + 212) = v6;
  if (v6 && *(_DWORD *)(DerivedStorage + 216) != v6)
  {
    *(_DWORD *)(DerivedStorage + 216) = v6;
    CAImageQueueSetFlags();
    bzero((void *)(v5 + 296), 0x4B0uLL);
  }
  *(_BYTE *)(v5 + 220) = a2 == 1.0;
  piqca_updateReducedPollingTimeRange(a1);
  return 0;
}

uint64_t VideoMentorSetModeToForwardPlayback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, const __CFDictionary *a6, const void *a7, const void *a8, CFTypeRef a9)
{
  unsigned int (*v16)(uint64_t, CFTypeRef *);
  unsigned int (*v17)(uint64_t, CFTypeRef *);
  const void *v18;
  CFTypeRef v19;
  uint64_t v20;
  const void *v21;
  CFTypeRef v22;
  __int128 v23;
  const void *v24;
  const void *v25;
  const void *v26;
  uint64_t v27;
  BOOL IsCursorAccuracyExact;
  unsigned int v30;
  int PolicyFromPrerollPolicy;
  CFTypeRef v33;
  CFTypeRef cf;
  int v35;

  v33 = 0;
  cf = 0;
  PolicyFromPrerollPolicy = audioMentorGetInitialReadPolicyFromPrerollPolicy((uint64_t)a6);
  v30 = audioMentorGetModeChangePolicy(a6);
  IsCursorAccuracyExact = videoMentorIsCursorAccuracyExact(a6);
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  v35 = 0;
  FigCFDictionaryGetInt32IfPresent();
  if (a6)
  {
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetFloat32IfPresent();
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetFloat32IfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
  }
  if (a2
    && ((v16 = *(unsigned int (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8)) == 0
     || v16(a2, &cf))
    || a4
    && ((v17 = *(unsigned int (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8)) == 0
     || v17(a4, &v33)))
  {
    v27 = FigSignalErrorAt();
  }
  else
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 96));
    if (!*(_BYTE *)a1)
    {
      v18 = *(const void **)(a1 + 168);
      v19 = cf;
      *(_QWORD *)(a1 + 168) = cf;
      if (v19)
        CFRetain(v19);
      if (v18)
        CFRelease(v18);
      v20 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)(a1 + 176) = *(_OWORD *)a3;
      v21 = *(const void **)(a1 + 200);
      v22 = v33;
      *(_QWORD *)(a1 + 192) = v20;
      *(_QWORD *)(a1 + 200) = v22;
      if (v22)
        CFRetain(v22);
      if (v21)
        CFRelease(v21);
      v23 = *a5;
      *(_QWORD *)(a1 + 224) = *((_QWORD *)a5 + 2);
      *(_OWORD *)(a1 + 208) = v23;
      *(_DWORD *)(a1 + 240) = PolicyFromPrerollPolicy;
      *(_DWORD *)(a1 + 244) = v30;
      *(_BYTE *)(a1 + 248) = 0;
      *(_DWORD *)(a1 + 260) = 0;
      *(_DWORD *)(a1 + 252) = 0;
      *(_DWORD *)(a1 + 256) = 1065353216;
      *(_BYTE *)(a1 + 372) = IsCursorAccuracyExact;
      *(_BYTE *)(a1 + 373) = 1;
      *(_BYTE *)(a1 + 374) = 0;
      *(_BYTE *)(a1 + 375) = v35;
      *(_BYTE *)(a1 + 376) = 1;
      *(_DWORD *)(a1 + 452) = 0;
      *(_BYTE *)(a1 + 377) = 0;
      *(_BYTE *)(a1 + 378) = 0;
      v24 = *(const void **)(a1 + 464);
      *(_QWORD *)(a1 + 464) = a7;
      if (a7)
        CFRetain(a7);
      if (v24)
        CFRelease(v24);
      v25 = *(const void **)(a1 + 472);
      *(_QWORD *)(a1 + 472) = a8;
      if (a8)
        CFRetain(a8);
      if (v25)
        CFRelease(v25);
      v26 = *(const void **)(a1 + 480);
      *(_QWORD *)(a1 + 480) = a9;
      if (a9)
        CFRetain(a9);
      if (v26)
        CFRelease(v26);
      *(_DWORD *)(a1 + 112) = 2;
      *(_BYTE *)(a1 + 116) = 1;
      FigMemoryBarrier();
    }
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 96));
    FigSemaphoreSignal();
    v27 = 0;
  }
  if (cf)
    CFRelease(cf);
  if (v33)
    CFRelease(v33);
  return v27;
}

uint64_t sbcbq_getPendingSampleBufferCount()
{
  _QWORD *DerivedStorage;
  uint64_t v1;
  uint64_t refcon;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  refcon = 0;
  MEMORY[0x19402EEEC](*DerivedStorage);
  v1 = 15;
  if (!*((_BYTE *)DerivedStorage + 8))
    v1 = 16;
  CMBufferQueueCallForEachBuffer((CMBufferQueueRef)DerivedStorage[v1], (OSStatus (__cdecl *)(CMBufferRef, void *))sbcbq_countNonMarkerOnlySampleBuffers, &refcon);
  MEMORY[0x19402EF04](*DerivedStorage);
  return refcon;
}

uint64_t sbcbq_setAttachmentOnPendingSampleBuffersInPTSRange(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, __int128 *a5)
{
  _QWORD *DerivedStorage;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v13[0] = a2;
  v13[1] = a3;
  v14 = *a4;
  v15 = *((_QWORD *)a4 + 2);
  v16 = *a5;
  v17 = *((_QWORD *)a5 + 2);
  MEMORY[0x19402EEEC](*DerivedStorage);
  v10 = 15;
  if (!*((_BYTE *)DerivedStorage + 8))
    v10 = 16;
  v11 = CMBufferQueueCallForEachBuffer((CMBufferQueueRef)DerivedStorage[v10], (OSStatus (__cdecl *)(CMBufferRef, void *))sbcbq_setAttachmentIfSampleBufferInPTSRange, v13);
  MEMORY[0x19402EF04](*DerivedStorage);
  return v11;
}

void sgffr_appendAttributesToDictionary(void *key, void *value, CFMutableDictionaryRef theDict)
{
  CFDictionarySetValue(theDict, key, value);
}

void videoMentorThreadFinishPreroll(uint64_t a1, uint64_t a2, const void *a3)
{
  __CFDictionary *v4;
  __CFDictionary *v5;

  if ((*(_DWORD *)(a1 + 496) | 2) == 3)
  {
    v4 = FigMentorPrerollCompletePayloadCreate(a3);
    v5 = v4;
    if (*(_BYTE *)a1)
    {
      if (!v4)
        goto LABEL_5;
    }
    else
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      if (!v5)
      {
LABEL_5:
        *(_DWORD *)(a1 + 496) = *(_DWORD *)(a1 + 500);
        if (*MEMORY[0x1E0CA1FC0] == 1)
          kdebug_trace();
        return;
      }
    }
    CFRelease(v5);
    goto LABEL_5;
  }
}

uint64_t FigCRABS_ResolveActiveHints(const void *a1, CMTime *a2)
{
  _QWORD *DerivedStorage;
  OpaqueCMClock *HostTimeClock;
  const void *v6;
  CFTypeRef v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CMTime *v11;
  int *v12;
  uint64_t v13;
  size_t v14;
  Float64 Seconds;
  CMTime cf;
  CMTime time1;
  CMTime v19;
  CMTime rhs;
  CMTime lhs;
  CMTime v22;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  HostTimeClock = CMClockGetHostTimeClock();
  memset(&v22, 0, sizeof(v22));
  v6 = (const void *)DerivedStorage[95];
  if (!v6)
  {
    v7 = 0;
    if (!a1)
      goto LABEL_4;
    goto LABEL_3;
  }
  v7 = CFRetain(v6);
  if (a1)
LABEL_3:
    CFRetain(a1);
LABEL_4:
  v8 = crabsEnsureInitialized(a1);
  if ((_DWORD)v8
    || (CMClockGetTime(&lhs, HostTimeClock),
        rhs = *a2,
        CMTimeAdd(&v22, &lhs, &rhs),
        v8 = FigRetainProxyLockMutex(),
        (_DWORD)v8))
  {
    v10 = v8;
  }
  else if (FigRetainProxyIsInvalidated())
  {
    v10 = 4294954511;
  }
  else
  {
    v9 = DerivedStorage[29];
    if (v9 >= DerivedStorage[11])
    {
      crabsUnlockWithActions((uint64_t)DerivedStorage);
    }
    else
    {
      v10 = crabsDoJump((uint64_t)DerivedStorage, v9);
      DerivedStorage[29] = DerivedStorage[11];
      crabsUnlockWithActions((uint64_t)DerivedStorage);
      if ((_DWORD)v10)
        goto LABEL_24;
    }
    v11 = (CMTime *)MEMORY[0x1E0CA2E68];
    do
    {
      memset(&rhs, 0, sizeof(rhs));
      v10 = FigRetainProxyLockMutex();
      if ((_DWORD)v10)
        break;
      v12 = (int *)DerivedStorage[31];
      if (!v12)
      {
        FigRetainProxyUnlockMutex();
        break;
      }
      v13 = DerivedStorage[12] * *v12;
      FigRetainProxyUnlockMutex();
      if (v13 == -1)
        break;
      CMClockGetTime(&v19, HostTimeClock);
      time1 = v22;
      CMTimeSubtract(&rhs, &time1, &v19);
      time1 = rhs;
      cf = *v11;
      if (CMTimeCompare(&time1, &cf) <= 0)
      {
        v10 = 4294954421;
        break;
      }
      cf.value = 0;
      v14 = DerivedStorage[12];
      time1 = rhs;
      Seconds = CMTimeGetSeconds(&time1);
      v10 = readOrRef(a1, v14, v13, 0, (CMBlockBufferRef *)&cf, 0, (int)(Seconds * 1000.0));
      if (cf.value)
        CFRelease((CFTypeRef)cf.value);
    }
    while (!(_DWORD)v10);
  }
LABEL_24:
  if (a1)
    CFRelease(a1);
  if (v7)
    CFRelease(v7);
  return v10;
}

uint64_t crabsDoJump(uint64_t a1, uint64_t a2)
{
  const void *v4;
  CFTypeRef v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t i;
  int *v10;
  int v11;
  int *v12;
  int *v13;
  char v15;
  int *v16;

  v15 = 0;
  v4 = *(const void **)(a1 + 760);
  if (v4)
    v5 = CFRetain(v4);
  else
    v5 = 0;
  if (*(_QWORD *)(a1 + 88) == a2)
  {
    if (*(_DWORD *)(a1 + 560) == 1 && !*(_QWORD *)(a1 + 568))
    {
      v6 = 4294954511;
      if (crabsCancelRead((_QWORD *)a1, (uint64_t *)(a1 + 512), -12932) == -12785)
        goto LABEL_25;
    }
    *(_BYTE *)(a1 + 129) = 1;
  }
  else
  {
    *(_QWORD *)(a1 + 200) = 0;
    v7 = *(uint64_t **)(a1 + 192);
    *v7 = a2;
    v8 = *(_QWORD *)(a1 + 184);
    if (v8 >= 2)
    {
      for (i = 1; i < v8; ++i)
      {
        v7[i] = *(_QWORD *)(a1 + 88);
        v8 = *(_QWORD *)(a1 + 184);
      }
    }
    *(_QWORD *)(a1 + 208) = a2;
    *(_QWORD *)(a1 + 216) = v8;
    if (*(_QWORD *)(a1 + 224) != a2)
    {
      v16 = 0;
      crabsMoveAnchor(a1, a2);
      if (!crabsSelectNextFill(a1, &v16))
      {
        v10 = v16;
        if (v16)
        {
          if (!crabsEvaluateFirehose(a1, v16, 0, &v15))
          {
            if (v15)
            {
              v11 = crabsMoveFirehose(a1, *(_QWORD *)(a1 + 96) * *v10);
              v6 = 4294954511;
              if (v11 == -12785)
                goto LABEL_25;
            }
          }
        }
      }
    }
  }
  v12 = *(int **)(a1 + 248);
  while (v12)
  {
    while (1)
    {
      v13 = v12;
      v12 = (int *)*((_QWORD *)v12 + 2);
      if (*v13 < a2 && (v13[2] & 0x810) == 0)
        break;
      if (!v12)
        goto LABEL_24;
    }
    crabsUnhint(a1, (uint64_t)v13);
  }
LABEL_24:
  v6 = 0;
  *(_BYTE *)(a1 + 128) = 0;
LABEL_25:
  if (v5)
    CFRelease(v5);
  return v6;
}

void crabsMoveAnchor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t *v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _BOOL4 v18;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  _BOOL4 v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = *(_QWORD *)(a1 + 224);
  if (v4 >= a2)
  {
    if (!*(_BYTE *)(a1 + 130))
      *(_BYTE *)(a1 + 131) = 0;
    if (v4 <= a2)
    {
LABEL_77:
      *(_QWORD *)(a1 + 240) = (int)a2;
      goto LABEL_78;
    }
    v15 = v4 - 1;
    while (1)
    {
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v15);
      if (v16)
      {
        v17 = *(unsigned __int16 *)(v16 + 8);
        v18 = (v17 & 0x200) != 0 ? (v17 >> 8) & 1 : *(_QWORD *)(v16 + 88) != 0;
        if ((v17 & 0x11) == 0 && v18)
          break;
      }
LABEL_50:
      if ((*(_BYTE *)(a1 + 504) & 3) == 0)
      {
        if (*(_BYTE *)(a1 + 133))
        {
          v23 = v15 + *(_QWORD *)(a1 + 472);
          if (v23 < *(_QWORD *)(a1 + 88))
          {
            v24 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v23);
            if (v24)
            {
              if (!*(_QWORD *)(v24 + 80))
              {
                v25 = *(unsigned __int16 *)(v24 + 8);
                v26 = (v25 & 0x200) != 0 ? (v25 >> 8) & 1 : *(_QWORD *)(v24 + 88) != 0;
                v27 = (v25 & 0x11) != 0 || !v26;
                if (!v27 && !crabsChangeBlockVolatility((_QWORD *)a1, (int *)v24, 0, 1))
                  crabsRemovePurgedBacking(a1, (int *)v24, 1);
              }
            }
          }
        }
      }
      if (v15-- <= a2)
        goto LABEL_77;
    }
    v20 = *(_QWORD *)(v16 + 48);
    v21 = *(_QWORD **)(v16 + 56);
    if (v20)
    {
      *(_QWORD *)(v20 + 56) = v21;
      v21 = *(_QWORD **)(v16 + 56);
    }
    else
    {
      if (!v21)
        goto LABEL_48;
      *(_QWORD *)(a1 + 288) = v21;
    }
    *v21 = v20;
    *(_QWORD *)(v16 + 48) = 0;
    *(_QWORD *)(v16 + 56) = 0;
LABEL_48:
    addToAscendingBackedBlockList((_QWORD *)a1, (uint64_t *)(a1 + 264), (int *)v16);
    if ((*(_WORD *)(v16 + 8) & 0x80) != 0)
      crabsMakeBackingNonvolatile((_QWORD *)a1, v16, 1);
    goto LABEL_50;
  }
  v5 = *(int **)(a1 + 264);
  if (v5)
  {
    v6 = (uint64_t *)(a1 + 280);
    do
    {
      if (*v5 >= a2)
        break;
      if ((*(_BYTE *)(a1 + 504) & 3) == 0)
      {
        if (!*((_QWORD *)v5 + 10))
        {
          v13 = *((unsigned __int16 *)v5 + 4);
          v14 = (v13 & 0x200) != 0 ? (v13 >> 8) & 1 : *((_QWORD *)v5 + 11) != 0;
          if ((v13 & 0x11) == 0 && v14 && !crabsChangeBlockVolatility((_QWORD *)a1, v5, 2, 1))
            crabsRemovePurgedBacking(a1, v5, 1);
        }
        if ((v5[2] & 0x80) != 0)
          crabsAdjustGroupBoundariesToRemoval((_QWORD *)a1, v5);
      }
      v7 = *((unsigned __int16 *)v5 + 4);
      if ((v7 & 0x200) != 0)
      {
        if (((v7 >> 8) & 1) != 0)
        {
LABEL_13:
          v9 = *((_QWORD *)v5 + 6);
          v10 = (_QWORD *)*((_QWORD *)v5 + 7);
          v8 = v5 + 12;
          if (v9)
          {
            *(_QWORD *)(v9 + 56) = v10;
            v10 = (_QWORD *)*((_QWORD *)v5 + 7);
            goto LABEL_17;
          }
          if (v10)
          {
            *(_QWORD *)(a1 + 272) = v10;
LABEL_17:
            *v10 = v9;
            *v8 = 0;
            *((_QWORD *)v5 + 7) = 0;
            *((_WORD *)v5 + 4) = v7 & 0xEFFF;
          }
          v11 = *v6;
          *((_QWORD *)v5 + 6) = *v6;
          if (v11)
            v12 = (_QWORD *)(v11 + 56);
          else
            v12 = (_QWORD *)(a1 + 288);
          *v12 = v8;
          *v6 = (uint64_t)v5;
          *((_QWORD *)v5 + 7) = v6;
        }
      }
      else if (*((_QWORD *)v5 + 11))
      {
        goto LABEL_13;
      }
      v5 = *(int **)(a1 + 264);
    }
    while (v5);
  }
  if ((*(_BYTE *)(a1 + 504) & 3) == 0)
  {
    v28 = *(_QWORD *)(a1 + 224);
    if (v28 < a2)
    {
      v29 = *(_QWORD *)(a1 + 472);
      v30 = v29 + v28;
      do
      {
        if (v30 >= *(_QWORD *)(a1 + 88))
          break;
        v31 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v30);
        if (v31 && (*(_WORD *)(v31 + 8) & 0x80) != 0)
        {
          crabsMakeBackingNonvolatile((_QWORD *)a1, v31, 1);
          v29 = *(_QWORD *)(a1 + 472);
        }
        ++v30;
      }
      while (v30 < v29 + a2);
    }
  }
  v32 = *(_QWORD *)(a1 + 240);
  if (v32 < a2 && v32 >= *(_QWORD *)(a1 + 224))
    goto LABEL_77;
LABEL_78:
  *(_QWORD *)(a1 + 224) = a2;
}

uint64_t sbp_bq_getUpcomingPTSInfo(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  CMTimeFlags v10;
  CMTimeEpoch v11;
  char v12;
  opaqueCMBufferQueue *v13;
  int v14;
  CMTimeFlags v15;
  CMTimeEpoch v16;
  CMTimeFlags v17;
  CMTimeValue *v18;
  char v19;
  CMTimeFlags v20;
  CMTimeEpoch v21;
  char *v22;
  CMTimeEpoch v23;
  CMTimeEpoch epoch;
  CMTimeFlags flags;
  CMTimeEpoch v26;
  CMTimeFlags v27;
  char *v28;
  CMTime time2;
  CMTime time1;
  CMTime refcon;
  CMTimeValue v32;
  CMTimeScale v33;
  CMTimeValue v34;
  CMTimeScale v35;
  CMTimeValue v36;
  CMTimeScale v37;
  CMTimeValue value;
  CMTimeScale timescale;
  CMTimeValue v40;
  CMTimeScale v41;
  CMTimeValue v42;
  CMTimeScale v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v42 = *MEMORY[0x1E0CA2E18];
  v43 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  v40 = v42;
  v41 = v43;
  value = v42;
  timescale = v43;
  v36 = v42;
  v37 = v43;
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v9 = DerivedStorage;
  v10 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
  v11 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v28 = a2;
  if (CMBufferQueueIsEmpty(*(CMBufferQueueRef *)(DerivedStorage + 8))
    || (v13 = *(opaqueCMBufferQueue **)(v9 + 8),
        LOBYTE(refcon.value) = 0,
        CMBufferQueueCallForEachBuffer(v13, (OSStatus (__cdecl *)(CMBufferRef, void *))sbp_bq_scanForSampleBufferThatWillBeDisplayed, &refcon), !LOBYTE(refcon.value)))
  {
    v12 = 1;
    flags = v10;
    epoch = v11;
    v27 = v10;
    v26 = v11;
  }
  else
  {
    CMBufferQueueGetMinPresentationTimeStamp(&refcon, *(CMBufferQueueRef *)(v9 + 8));
    value = refcon.value;
    flags = refcon.flags;
    timescale = refcon.timescale;
    epoch = refcon.epoch;
    CMBufferQueueGetMaxPresentationTimeStamp(&refcon, *(CMBufferQueueRef *)(v9 + 8));
    v12 = 0;
    v36 = refcon.value;
    v27 = refcon.flags;
    v37 = refcon.timescale;
    v26 = refcon.epoch;
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(v9 + 32));
  v14 = *(unsigned __int8 *)(v9 + 40);
  v34 = *(_QWORD *)(v9 + 44);
  v15 = *(_DWORD *)(v9 + 56);
  v35 = *(_DWORD *)(v9 + 52);
  v16 = *(_QWORD *)(v9 + 60);
  v32 = *(_QWORD *)(v9 + 68);
  v17 = *(_DWORD *)(v9 + 80);
  v33 = *(_DWORD *)(v9 + 76);
  v23 = *(_QWORD *)(v9 + 84);
  MEMORY[0x19402EF04](*(_QWORD *)(v9 + 32));
  if ((v12 & 1) != 0)
  {
    if (v14)
    {
      v18 = &v34;
      if ((v15 & 1) != 0)
      {
        v10 = v15;
      }
      else
      {
        v18 = &v32;
        v10 = v17;
      }
      if ((v15 & 1) != 0)
        v11 = v16;
      else
        v11 = v23;
      v42 = *v18;
      v43 = *((_DWORD *)v18 + 2);
      if ((v17 & 1) != 0)
      {
        v40 = v32;
        v41 = v33;
        v19 = 1;
        v20 = v17;
        v21 = v23;
      }
      else
      {
        v40 = v34;
        v41 = v35;
        v19 = 1;
        v20 = v15;
        v21 = v16;
      }
    }
    else
    {
      v19 = 0;
      v20 = v10;
      v21 = v11;
    }
  }
  else
  {
    if (v14)
    {
      v20 = v10;
      v21 = v11;
      if ((v15 & 1) != 0)
      {
        time2.epoch = v16;
        time1.value = value;
        time1.timescale = timescale;
        time1.flags = flags;
        time1.epoch = epoch;
        time2.value = v34;
        time2.timescale = v35;
        time2.flags = v15;
        CMTimeMinimum(&refcon, &time1, &time2);
        v42 = refcon.value;
        v10 = refcon.flags;
        v43 = refcon.timescale;
        v11 = refcon.epoch;
        time2.epoch = v16;
        time1.value = v36;
        time1.timescale = v37;
        time1.flags = v27;
        time1.epoch = v26;
        time2.value = v34;
        time2.timescale = v35;
        time2.flags = v15;
        CMTimeMaximum(&refcon, &time1, &time2);
        v40 = refcon.value;
        v20 = refcon.flags;
        v41 = refcon.timescale;
        v21 = refcon.epoch;
      }
      v22 = v28;
      if ((v17 & 1) != 0)
      {
        time1.timescale = timescale;
        time1.flags = flags;
        time1.epoch = epoch;
        time2.value = v32;
        time2.timescale = v33;
        time2.flags = v17;
        time2.epoch = v23;
        time1.value = value;
        CMTimeMinimum(&refcon, &time1, &time2);
        v42 = refcon.value;
        v10 = refcon.flags;
        v43 = refcon.timescale;
        time2.epoch = v23;
        time1.value = v36;
        time1.timescale = v37;
        time1.flags = v27;
        time1.epoch = v26;
        v11 = refcon.epoch;
        time2.value = v32;
        time2.timescale = v33;
        time2.flags = v17;
        CMTimeMaximum(&refcon, &time1, &time2);
        v40 = refcon.value;
        v20 = refcon.flags;
        v41 = refcon.timescale;
        v21 = refcon.epoch;
      }
      v19 = 1;
      goto LABEL_27;
    }
    v42 = value;
    v43 = timescale;
    v40 = v36;
    v19 = 1;
    v41 = v37;
    v10 = flags;
    v11 = epoch;
    v20 = v27;
    v21 = v26;
  }
  v22 = v28;
LABEL_27:
  *v22 = v19;
  *(_QWORD *)a3 = v42;
  *(_DWORD *)(a3 + 8) = v43;
  *(_DWORD *)(a3 + 12) = v10;
  *(_QWORD *)(a3 + 16) = v11;
  *(_QWORD *)a4 = v40;
  *(_DWORD *)(a4 + 8) = v41;
  *(_DWORD *)(a4 + 12) = v20;
  *(_QWORD *)(a4 + 16) = v21;
  return 0;
}

uint64_t FigCRABSScheduledIOFinish(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t DerivedStorage;
  int v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3 == 4)
    v6 = 0;
  else
    v6 = a3;
  return siocrabsFinishUnlocked(DerivedStorage, a2, v6);
}

void videopipelineTimebaseRateChanged()
{
  videopipelineUpdateVideoPlaybackStateForClient();
}

uint64_t piqca_setAsync(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  int v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = DerivedStorage;
  if (a2)
  {
    *(_QWORD *)(DerivedStorage + 72) = 0x400000000;
    *(_BYTE *)(DerivedStorage + 49) = 1;
    CAImageQueueSetFlags();
    FigMemoryBarrier();
    piqca_WakeupSharedPollingThread();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    DerivedStorage = v4;
    v5 = 0;
  }
  else
  {
    *(_QWORD *)(DerivedStorage + 72) = 300;
    v5 = 1;
  }
  piqca_updateEDRDeadline((_QWORD *)DerivedStorage, v5);
  return 0;
}

uint64_t videopipelineSynchronousFrameEnqueued()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

void playerfig_SynchronousFrameEnqueued(uint64_t a1, void *a2)
{
  _BYTE *DerivedStorage;

  if (a2)
  {
    DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
    if (!DerivedStorage || !*DerivedStorage)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      CFRetain(a2);
      dispatch_async_f(MEMORY[0x1E0C80D38], a2, (dispatch_function_t)playerfig_DeferredSynchronousFrameEnqueued);
    }
  }
}

uint64_t sgffr_timebaseNotifierRateOrTimeChanged()
{
  uint64_t DerivedStorage;
  const __CFDictionary *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigReadWriteLockLockForRead();
  v1 = *(const __CFDictionary **)(*(_QWORD *)(DerivedStorage + 48) + 40);
  if (v1)
    CFDictionaryApplyFunction(v1, (CFDictionaryApplierFunction)sgffr_expediteAllClientRequestsForScheduledIO, 0);
  return FigReadWriteLockUnlockForRead();
}

uint64_t FigCRABSScheduledIOExpediteAllClientRequests()
{
  return 0;
}

void FigImageQueueFrameRateIncrementCounter(uint64_t a1)
{
  uint64_t UpTimeNanoseconds;
  uint64_t v3;
  int v4;

  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  MEMORY[0x19402EEEC](*(_QWORD *)a1);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 + 1000000000 >= UpTimeNanoseconds)
  {
    v4 = *(_DWORD *)(a1 + 32) + 1;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v3;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 24) = UpTimeNanoseconds;
    v4 = 1;
  }
  *(_DWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = UpTimeNanoseconds;
  JUMPOUT(0x19402EF04);
}

void piqca_decrementSnapLatchCount(void **a1)
{
  if (!FigAtomicDecrement32())
  {
    FigSimpleMutexDestroy();
    free(*a1);
    *a1 = 0;
  }
}

void videopipelineCopyNextNonJerkyStopTime(uint64_t a1)
{
  CFArrayRef theArray;

  theArray = 0;
  figVideoRenderPipelineCopyVideoImageQueueArray(a1, &theArray, 0);
}

BOOL crabsChangeBlockVolatility(_QWORD *a1, int *a2, int a3, int a4)
{
  _BOOL8 result;
  uint64_t v9;
  int v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  int v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  int v19;

  if (!*((_QWORD *)a2 + 11) || (a2[2] & 0x11) != 0)
    return 0;
  crabsAdjustGroupBoundariesToRemoval(a1, a2);
  if ((a3 & 0xFFFFFFFE) == 2)
  {
    result = crabsMakeVolatile(*((_QWORD *)a2 + 11), a3, a4);
    if (!result)
      return result;
LABEL_32:
    *((_WORD *)a2 + 4) |= 0x80u;
    return 1;
  }
  v9 = *((_QWORD *)a2 + 11);
  if (a3)
  {
    if (a4 == 1)
      v10 = 769;
    else
      v10 = 577;
    v19 = v10;
    v11 = MEMORY[0x194031988](*MEMORY[0x1E0C83DA0], v9, 0, &v19);
    result = 0;
    if (v11)
      v12 = 1;
    else
      v12 = (v19 & 3) == 2;
    if (!v12)
    {
      v13 = *a2;
      if (a1[55] == -1)
      {
        a1[56] = v13;
      }
      else if (a4 != 1)
      {
        a1[56] = v13;
        goto LABEL_32;
      }
      a1[55] = v13;
      goto LABEL_32;
    }
  }
  else
  {
    if (a4 == 1)
      v14 = 1281;
    else
      v14 = 1089;
    v18 = v14;
    v15 = MEMORY[0x194031988](*MEMORY[0x1E0C83DA0], v9, 0, &v18);
    result = 0;
    if (v15)
      v16 = 1;
    else
      v16 = (v18 & 3) == 2;
    if (!v16)
    {
      v17 = *a2;
      if (a1[53] == -1)
      {
        a1[54] = v17;
      }
      else if (a4 != 1)
      {
        a1[54] = v17;
        goto LABEL_32;
      }
      a1[53] = v17;
      goto LABEL_32;
    }
  }
  return result;
}

_QWORD *crabsAdjustGroupBoundariesToRemoval(_QWORD *result, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a2;
  v3 = result + 53;
  v4 = result[53];
  v5 = result[54];
  if (v5 == v2)
  {
    if (v4 < v2)
    {
      do
      {
        if (v2 <= v4)
          break;
        a2 = **(int ***)(*((_QWORD *)a2 + 7) + 8);
        v2 = *a2;
        result[54] = v2;
      }
      while ((a2[2] & 0x80) == 0);
      return result;
    }
LABEL_15:
    *v3 = -1;
    v3[1] = -1;
    return result;
  }
  if (v4 == v2)
  {
    do
    {
      if (v2 >= v5)
        break;
      a2 = (int *)*((_QWORD *)a2 + 6);
      v2 = *a2;
      *v3 = v2;
    }
    while ((a2[2] & 0x80) == 0);
  }
  else
  {
    v3 = result + 55;
    v6 = result[55];
    v7 = result[56];
    if (v7 == v2)
    {
      if (v6 >= v2)
        goto LABEL_15;
      do
      {
        if (v2 <= v6)
          break;
        a2 = **(int ***)(*((_QWORD *)a2 + 7) + 8);
        v2 = *a2;
        result[56] = v2;
      }
      while ((a2[2] & 0x80) == 0);
    }
    else if (v6 == v2)
    {
      do
      {
        if (v2 >= v7)
          break;
        a2 = (int *)*((_QWORD *)a2 + 6);
        v2 = *a2;
        *v3 = v2;
      }
      while ((a2[2] & 0x80) == 0);
    }
  }
  return result;
}

uint64_t bossSwitchMentorsToSideQueues(uint64_t a1, CFIndex a2)
{
  uint64_t result;
  CFIndex v5;
  uint64_t v6;
  void (*v7)(uint64_t);

  result = FigCFRangeGetLimit();
  if (a2 < result)
  {
    v5 = a2;
    do
    {
      v6 = *((_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v5) + 12);
      v7 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
      if (v7)
        v7(v6);
      ++v5;
      result = FigCFRangeGetLimit();
    }
    while (v5 < result);
  }
  return result;
}

uint64_t sbcbq_switchToSideQueue()
{
  _QWORD *DerivedStorage;
  void (*v1)(_QWORD);

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  *((_BYTE *)DerivedStorage + 8) = 0;
  *((_BYTE *)DerivedStorage + 136) = 0;
  MEMORY[0x19402EF04](*DerivedStorage);
  MEMORY[0x19402EEEC](DerivedStorage[11]);
  v1 = (void (*)(_QWORD))DerivedStorage[12];
  if (v1)
    v1(DerivedStorage[13]);
  MEMORY[0x19402EF04](DerivedStorage[11]);
  return 0;
}

void crabsRemovePurgedBacking(uint64_t a1, int *a2, int a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  __int16 v13;

  v6 = a2[1];
  *((_WORD *)a2 + 4) &= ~0x80u;
  crabsAdjustGroupBoundariesToRemoval((_QWORD *)a1, a2);
  CFAllocatorDeallocate(*(CFAllocatorRef *)a1, *((void **)a2 + 11));
  *((_QWORD *)a2 + 11) = 0;
  if (!*((_QWORD *)a2 + 10))
    crabsMarkBlockUnfilled(a1, (uint64_t)a2);
  v7 = *(_QWORD *)(a1 + 96);
  gCRABS_Stats_3 -= v7;
  *(_QWORD *)(a1 + 864) -= v7;
  ++*(_QWORD *)(a1 + 408);
  if ((a2[2] & 0x11) == 0)
  {
    if (a3)
      v8 = a1 + 264;
    else
      v8 = a1 + 280;
    removeFromList(a1, v8, (uint64_t)a2, 0);
  }
  v9 = *a2;
  v10 = *(_QWORD *)(a1 + 224);
  if (v10 <= v9)
  {
    v11 = *(_QWORD *)(a1 + 240);
    if (v11 < v10 || v11 > v9)
      *(_QWORD *)(a1 + 240) = v9;
  }
  if (v6)
  {
    if (*(_BYTE *)(a1 + 128))
      v12 = 1;
    else
      v12 = v10 <= v9;
    if (v12)
      v13 = 2;
    else
      v13 = 1;
    *(_WORD *)(a1 + 176) |= v13;
    *(_BYTE *)(a1 + 128) = 0;
  }
}

uint64_t crabsMarkBlockUnfilled(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t result;

  *(_WORD *)(a2 + 8) &= 0xFFB3u;
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 72));
  v4 = *(_QWORD *)(a1 + 64) - *(int *)(a2 + 4);
  *(_QWORD *)(a1 + 64) = v4;
  v5 = *(_QWORD *)(a1 + 920);
  if (v5)
  {
    v6 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 56);
    if (v6)
      v6(v5, CFSTR("crabsStats"), CFSTR("CachedBytes"), v4, 0);
  }
  result = MEMORY[0x19402EA24](*(_QWORD *)(a1 + 72));
  *(_DWORD *)(a2 + 4) = 0;
  *(_WORD *)(a1 + 130) = 0;
  return result;
}

uint64_t fpm_streamCacheChangedCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __CFData *Owner;
  UInt8 *MutableBytePtr;
  int v8;
  CMTime v10;
  CMTime time2;
  CMTime time1;

  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    Owner = (__CFData *)FigRetainProxyGetOwner();
    MutableBytePtr = CFDataGetMutableBytePtr(Owner);
    MEMORY[0x19402EA0C](*((_QWORD *)MutableBytePtr + 6));
    ++*((_DWORD *)MutableBytePtr + 24);
    if (!a5)
    {
      MutableBytePtr[313] = 1;
      CMTimebaseGetTime(&time1, *((CMTimebaseRef *)MutableBytePtr + 3));
      time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      CMTimeMaximum(&v10, &time1, &time2);
      *((CMTime *)MutableBytePtr + 9) = v10;
    }
    v8 = *((_DWORD *)MutableBytePtr + 28);
    if (v8)
    {
      if (v8 != 3 || !a5 || *((_DWORD *)MutableBytePtr + 26) == 1)
      {
LABEL_11:
        fpm_ensureUpdatePrimed((uint64_t)MutableBytePtr);
LABEL_13:
        MEMORY[0x19402EA24](*((_QWORD *)MutableBytePtr + 6));
        return FigRetainProxyUnlockMutex();
      }
    }
    else if (*((_DWORD *)MutableBytePtr + 26) == 1 || MutableBytePtr[8555] | (a5 == 0))
    {
      goto LABEL_11;
    }
    fpm_updateCacheAndNotify((uint64_t)MutableBytePtr);
    goto LABEL_13;
  }
  return FigRetainProxyUnlockMutex();
}

uint64_t bossReplaceMainQueuesWithSideQueuesAndSwitchMentorsToMainQueues(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFIndex v3;
  uint64_t v4;
  void (*v5)(uint64_t);

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
  if (*(_BYTE *)(a1 + 840))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(uint64_t *)(a1 + 80) >= 1)
  {
    v3 = 0;
    do
    {
      v4 = *((_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v3) + 12);
      v5 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
      if (v5)
        v5(v4);
      ++v3;
    }
    while (v3 < *(_QWORD *)(a1 + 80));
  }
  return MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
}

uint64_t sbcbq_replaceMainQueueWithSideQueueAndSwitchToMainQueue()
{
  _QWORD *DerivedStorage;
  _QWORD *v1;
  const __CFArray *v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex v5;
  CMBufferRef v6;
  CMBufferRef v7;
  void (*v8)(_QWORD);

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  if (*((_BYTE *)DerivedStorage + 136))
    CMBufferQueueReset((CMBufferQueueRef)DerivedStorage[15]);
  MEMORY[0x19402EF04](*DerivedStorage);
  v1 = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*v1);
  if (CFArrayGetCount((CFArrayRef)v1[18]) <= 0)
  {
    MEMORY[0x19402EF04](*v1);
  }
  else
  {
    v2 = (const __CFArray *)v1[18];
    v1[18] = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    MEMORY[0x19402EF04](*v1);
    if (v2)
    {
      Count = CFArrayGetCount(v2);
      if (Count >= 2)
      {
        v4 = 0;
        v5 = Count - 1;
        do
        {
          CFArrayGetValueAtIndex(v2, v4);
          CFArrayGetValueAtIndex(v2, v4 + 1);
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterPostNotification();
          v4 += 2;
        }
        while (v4 < v5);
      }
      CFRelease(v2);
    }
  }
  MEMORY[0x19402EEEC](*DerivedStorage);
  v6 = CMBufferQueueDequeueAndRetain((CMBufferQueueRef)DerivedStorage[16]);
  if (v6)
  {
    v7 = v6;
    do
    {
      CMBufferQueueEnqueue((CMBufferQueueRef)DerivedStorage[15], v7);
      CFRelease(v7);
      v7 = CMBufferQueueDequeueAndRetain((CMBufferQueueRef)DerivedStorage[16]);
    }
    while (v7);
  }
  *((_BYTE *)DerivedStorage + 8) = 1;
  MEMORY[0x19402EF04](*DerivedStorage);
  MEMORY[0x19402EEEC](DerivedStorage[11]);
  v8 = (void (*)(_QWORD))DerivedStorage[12];
  if (v8)
    v8(DerivedStorage[13]);
  MEMORY[0x19402EF04](DerivedStorage[11]);
  return 0;
}

uint64_t crabsMakeBackingNonvolatile(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  int v11;

  v6 = *(_QWORD *)(a2 + 88);
  v11 = 0;
  if (MEMORY[0x194031988](*MEMORY[0x1E0C83DA0], v6, 0, &v11))
    v7 = 1;
  else
    v7 = (v11 & 3) == 2;
  v8 = !v7;
  if (v7)
  {
    crabsRemovePurgedBacking((uint64_t)a1, (int *)a2, a3);
  }
  else
  {
    *(_WORD *)(a2 + 8) &= ~0x80u;
    crabsAdjustGroupBoundariesToRemoval(a1, (int *)a2);
    v9 = a1[12];
    gCRABS_Stats_3 -= v9;
    a1[108] -= v9;
  }
  return v8;
}

uint64_t stepUpEntry(uint64_t a1)
{
  int v1;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t destination;

  v1 = *(_DWORD *)(a1 + 88);
  if (!v1)
    return 4294954456;
  v3 = v1 - 1;
  *(_DWORD *)(a1 + 88) = v3;
  v4 = *(_QWORD *)(a1 + 8);
  destination = 0;
  CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v4 + 416), 8 * v3, 8uLL, &destination);
  v5 = bswap32(destination);
  *(_DWORD *)(a1 + 112) = v5;
  *(_BYTE *)(a1 + 120) = 0;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(int *)(v6 + 244);
  if ((_DWORD)v7)
  {
    v8 = v5 / v7;
    *(_DWORD *)(a1 + 112) = v8;
  }
  else
  {
    v10 = *(int *)(a1 + 88);
    destination = 0;
    CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v6 + 416), 8 * v10, 8uLL, &destination);
    v7 = bswap32(HIDWORD(destination));
    v8 = *(_DWORD *)(a1 + 112);
  }
  result = 0;
  *(_QWORD *)(a1 + 96) -= v7 * v8;
  *(_QWORD *)(a1 + 104) = v7;
  v11 = *(_DWORD *)(a1 + 116);
  *(_DWORD *)(a1 + 116) = v11 - v8;
  *(_DWORD *)(a1 + 80) = v11 - 1;
  return result;
}

_QWORD *VideoMentorInvalidate(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  _QWORD *v5;

  if (!*(_BYTE *)result)
  {
    v1 = result;
    *(_BYTE *)result = 1;
    if (result[13])
    {
      MEMORY[0x19402EEEC](result[12]);
      *((_DWORD *)v1 + 28) = 5;
      *((_BYTE *)v1 + 116) = 1;
      FigMemoryBarrier();
      MEMORY[0x19402EF04](v1[12]);
      FigSemaphoreSignal();
      FigThreadAbortForTeardown();
      FigThreadJoin();
      v1[13] = 0;
    }
    v2 = v1[3];
    if (v2)
    {
      if (*((_BYTE *)v1 + 40))
      {
        v3 = v1[4];
        v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
        if (v4)
          v4(v2, v3);
      }
    }
    if (v1[2])
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
    }
    result = (_QWORD *)v1[69];
    v1[69] = 0;
    if (result)
    {
      do
      {
        v5 = (_QWORD *)*result;
        videoMentorSavedFrameDestroy(result);
        result = v5;
      }
      while (v5);
    }
  }
  return result;
}

void figVideoRenderPipelineFinalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  NSObject *v14;
  const void *v15;
  const void *v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  figVideoRenderPipelineInvalidate(a1);
  v3 = *(const void **)(DerivedStorage + 16);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 40);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 48);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 56);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 56) = 0;
  }
  v7 = *(const void **)(DerivedStorage + 64);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 64) = 0;
  }
  v8 = *(const void **)(DerivedStorage + 8);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  v9 = *(const void **)(DerivedStorage + 24);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v10 = *(const void **)(DerivedStorage + 32);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  v11 = *(const void **)(DerivedStorage + 104);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(DerivedStorage + 104) = 0;
  }
  v12 = *(const void **)(DerivedStorage + 112);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(DerivedStorage + 112) = 0;
  }
  v13 = *(const void **)(DerivedStorage + 88);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(DerivedStorage + 88) = 0;
  }
  if (*(_QWORD *)(DerivedStorage + 72))
  {
    FigSimpleMutexDestroy();
    *(_QWORD *)(DerivedStorage + 72) = 0;
  }
  v14 = *(NSObject **)(DerivedStorage + 192);
  if (v14)
  {
    dispatch_release(v14);
    *(_QWORD *)(DerivedStorage + 192) = 0;
  }
  FigSimpleMutexDestroy();
  v15 = *(const void **)(DerivedStorage + 184);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(DerivedStorage + 184) = 0;
  }
  v16 = *(const void **)(DerivedStorage + 168);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(DerivedStorage + 168) = 0;
  }
  *(_DWORD *)(DerivedStorage + 4) = 0;
  videopipelineUpdateVideoPlaybackStateForClient();
}

uint64_t figVideoRenderPipelineInvalidate(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  CFArrayRef theArray;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  theArray = 0;
  cf = 0;
  if (DerivedStorage)
  {
    v3 = DerivedStorage;
    if (!*(_BYTE *)DerivedStorage)
    {
      *(_BYTE *)DerivedStorage = 1;
      if (*(_QWORD *)(DerivedStorage + 16))
      {
        FigStopForwardingMediaServicesProcessDeathNotification();
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListeners();
        VMC2Invalidate(*(_QWORD *)(v3 + 16));
        v4 = *(_QWORD *)(v3 + 32);
        if (v4)
        {
          v5 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
          if (v5)
            v5(v4);
        }
      }
      figVideoRenderPipelineCopyVideoImageQueueArray(a1, &theArray, &cf);
    }
  }
  return 0;
}

void VMC2Invalidate(uint64_t a1)
{
  const void *v2;
  NSObject *v3;
  void (*v4)(_QWORD, _QWORD);
  uint64_t v5;
  void (*v6)(uint64_t, _QWORD, _QWORD);
  uint64_t FigBaseObject;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  void (*v13)(_QWORD);
  void (*v14)(_QWORD);
  NSObject *v15;
  NSObject *v16;

  if (a1 && !*(_BYTE *)(a1 + 16))
  {
    VMC2Stop(a1);
    VMC2WaitUntilCompletelyStopped(a1);
    *(_BYTE *)(a1 + 16) = 1;
    vmc2FinishAndDestroyImageEnhancementFilter(a1);
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 1480));
    if (*(_QWORD *)(a1 + 1488))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      v2 = *(const void **)(a1 + 1488);
      if (v2)
      {
        CFRelease(v2);
        *(_QWORD *)(a1 + 1488) = 0;
      }
    }
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 1480));
    v3 = *(NSObject **)(a1 + 448);
    if (v3)
    {
      dispatch_sync_f(v3, 0, (dispatch_function_t)vmc2noop);
      dispatch_release(*(dispatch_object_t *)(a1 + 448));
      *(_QWORD *)(a1 + 448) = 0;
    }
    if (*(_QWORD *)(a1 + 72))
    {
      MEMORY[0x19402EEEC]();
      vmc2RemoveDecompressionSession(a1);
      MEMORY[0x19402EF04](*(_QWORD *)(a1 + 72));
    }
    *(_BYTE *)(a1 + 626) = 0;
    if (*(_BYTE *)(a1 + 248))
    {
      FigReadWriteLockLockForRead();
      if (*(_BYTE *)(a1 + 249))
      {
        v4 = *(void (**)(_QWORD, _QWORD))(a1 + 184);
        if (v4)
          v4(*(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 240));
        *(_QWORD *)(a1 + 184) = 0;
        *(_QWORD *)(a1 + 240) = 0;
        *(_BYTE *)(a1 + 248) = 0;
      }
      else
      {
        FigSignalErrorAt();
      }
      FigReadWriteLockUnlockForRead();
    }
    v5 = *(_QWORD *)(a1 + 264);
    if (v5)
    {
      if (!*(_BYTE *)(a1 + 272))
        goto LABEL_22;
      v6 = *(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v6)
        v6(v5, 0, 0);
      *(_BYTE *)(a1 + 272) = 0;
      v5 = *(_QWORD *)(a1 + 264);
      if (v5)
      {
LABEL_22:
        FigBaseObject = FigActivitySchedulerGetFigBaseObject(v5);
        if (FigBaseObject)
        {
          v8 = FigBaseObject;
          v9 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
          if (v9)
            v9(v8);
        }
      }
    }
    if (*(_QWORD *)(a1 + 88))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      v10 = FigSampleBufferProviderGetFigBaseObject(*(_QWORD *)(a1 + 88));
      if (v10)
      {
        v11 = v10;
        v12 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
        if (v12)
          v12(v11);
      }
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FPSupport_GetDisplayVideoRangeNotificationSingleton();
    CMNotificationCenterRemoveListener();
    v13 = *(void (**)(_QWORD))(a1 + 120);
    if (v13)
    {
      v13(*(_QWORD *)(a1 + 104));
      *(_QWORD *)(a1 + 120) = 0;
    }
    FigReadWriteLockLockForWrite();
    v14 = *(void (**)(_QWORD))(a1 + 216);
    if (v14)
    {
      v14(*(_QWORD *)(a1 + 152));
      *(_QWORD *)(a1 + 216) = 0;
    }
    *(_BYTE *)(a1 + 249) = 0;
    FigReadWriteLockUnlockForWrite();
    v15 = *(NSObject **)(a1 + 824);
    if (v15)
    {
      if (!*(_BYTE *)(a1 + 832))
      {
        dispatch_resume(v15);
        v15 = *(NSObject **)(a1 + 824);
      }
      dispatch_source_cancel(v15);
      dispatch_release(*(dispatch_object_t *)(a1 + 824));
      *(_QWORD *)(a1 + 824) = 0;
    }
    v16 = *(NSObject **)(a1 + 816);
    if (v16)
    {
      dispatch_sync_f(v16, 0, (dispatch_function_t)vmc2noop);
      dispatch_release(*(dispatch_object_t *)(a1 + 816));
      *(_QWORD *)(a1 + 816) = 0;
    }
    vmc2ClearSavedList(a1);
  }
}

uint64_t VMC2Stop(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  *(_BYTE *)(a1 + 288) = 0;
  FigMemoryBarrier();
  return 0;
}

uint64_t VMC2WaitUntilCompletelyStopped(uint64_t a1)
{
  OpaqueVTDecompressionSession *v3;

  if (*(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 296));
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 296));
  v3 = *(OpaqueVTDecompressionSession **)(a1 + 64);
  if (v3)
    VTDecompressionSessionWaitForAsynchronousFrames(v3);
  return 0;
}

uint64_t activityOnThread_invalidate()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)DerivedStorage = 1;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
  v2 = *(_QWORD *)(DerivedStorage + 8);
  v1 = *(_QWORD *)(DerivedStorage + 16);
  *(_QWORD *)(DerivedStorage + 8) = 0;
  MEMORY[0x19402EF04](v1);
  if (v2)
  {
    *(_WORD *)(DerivedStorage + 56) = 256;
    FigMemoryBarrier();
    FigSemaphoreSignal();
    FigThreadJoin();
  }
  return 0;
}

uint64_t activityOnThread_finalize(uint64_t a1)
{
  _QWORD *DerivedStorage;
  void (*v3)(uint64_t);
  uint64_t result;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    v3 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
    if (v3)
      v3(a1);
  }
  FigSimpleMutexDestroy();
  DerivedStorage[6] = 0;
  FigSemaphoreDestroy();
  DerivedStorage[3] = 0;
  result = FigSimpleMutexDestroy();
  DerivedStorage[2] = 0;
  return result;
}

uint64_t sbp_bq_invalidate()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  opaqueCMBufferQueueTriggerToken *v2;
  opaqueCMBufferQueueTriggerToken *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
  {
    v1 = DerivedStorage;
    *(_BYTE *)DerivedStorage = 1;
    v2 = *(opaqueCMBufferQueueTriggerToken **)(DerivedStorage + 16);
    if (v2)
    {
      CMBufferQueueRemoveTrigger(*(CMBufferQueueRef *)(DerivedStorage + 8), v2);
      *(_QWORD *)(v1 + 16) = 0;
    }
    v3 = *(opaqueCMBufferQueueTriggerToken **)(v1 + 24);
    if (v3)
    {
      CMBufferQueueRemoveTrigger(*(CMBufferQueueRef *)(v1 + 8), v3);
      *(_QWORD *)(v1 + 24) = 0;
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
  }
  return 0;
}

uint64_t sbp_bq_finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  void (*v3)(uint64_t);
  const void *v4;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    v3 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
    if (v3)
      v3(a1);
  }
  v4 = *(const void **)(DerivedStorage + 8);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  result = *(_QWORD *)(DerivedStorage + 32);
  if (result)
  {
    result = FigSimpleMutexDestroy();
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  return result;
}

void vmc2Finalize(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  NSObject *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v35;
  const void *v36;
  void *v37;
  const void *v38;
  NSObject *v39;

  VMC2Invalidate((uint64_t)a1);
  v2 = a1[57];
  if (v2)
  {
    dispatch_release(v2);
    a1[57] = 0;
  }
  if (a1[9])
  {
    FigSimpleMutexDestroy();
    a1[9] = 0;
  }
  v3 = (const void *)a1[10];
  if (v3)
  {
    CFRelease(v3);
    a1[10] = 0;
  }
  v4 = (const void *)a1[90];
  if (v4)
  {
    CFRelease(v4);
    a1[90] = 0;
  }
  FigSimpleMutexDestroy();
  v5 = (const void *)a1[75];
  if (v5)
  {
    CFRelease(v5);
    a1[75] = 0;
  }
  FigSimpleMutexDestroy();
  a1[79] = 0;
  v6 = (const void *)a1[33];
  if (v6)
  {
    CFRelease(v6);
    a1[33] = 0;
  }
  v7 = (const void *)a1[11];
  if (v7)
  {
    CFRelease(v7);
    a1[11] = 0;
  }
  FigSimpleMutexDestroy();
  a1[35] = 0;
  FigSimpleMutexDestroy();
  a1[37] = 0;
  FigSemaphoreDestroy();
  a1[38] = 0;
  FigSimpleMutexDestroy();
  a1[67] = 0;
  FigReadWriteLockDestroy();
  v8 = (const void *)a1[3];
  if (v8)
  {
    CFRelease(v8);
    a1[3] = 0;
  }
  v9 = (const void *)a1[4];
  if (v9)
  {
    CFRelease(v9);
    a1[4] = 0;
  }
  v10 = (const void *)a1[6];
  if (v10)
  {
    CFRelease(v10);
    a1[6] = 0;
  }
  v11 = (const void *)a1[7];
  if (v11)
  {
    CFRelease(v11);
    a1[7] = 0;
  }
  v12 = (const void *)a1[73];
  if (v12)
  {
    CFRelease(v12);
    a1[73] = 0;
  }
  v13 = (const void *)a1[92];
  if (v13)
  {
    CFRelease(v13);
    a1[92] = 0;
  }
  v14 = (const void *)a1[93];
  if (v14)
  {
    CFRelease(v14);
    a1[93] = 0;
  }
  v15 = (const void *)a1[94];
  if (v15)
  {
    CFRelease(v15);
    a1[94] = 0;
  }
  v16 = (const void *)a1[95];
  if (v16)
  {
    CFRelease(v16);
    a1[95] = 0;
  }
  v17 = (const void *)a1[122];
  if (v17)
  {
    CFRelease(v17);
    a1[122] = 0;
  }
  v18 = (const void *)a1[123];
  if (v18)
  {
    CFRelease(v18);
    a1[123] = 0;
  }
  v19 = (const void *)a1[124];
  if (v19)
  {
    CFRelease(v19);
    a1[124] = 0;
  }
  v20 = (const void *)a1[96];
  if (v20)
  {
    CFRelease(v20);
    a1[96] = 0;
  }
  v21 = (const void *)a1[125];
  if (v21)
  {
    CFRelease(v21);
    a1[125] = 0;
  }
  v22 = (const void *)a1[126];
  if (v22)
  {
    CFRelease(v22);
    a1[126] = 0;
  }
  v23 = (const void *)a1[127];
  if (v23)
  {
    CFRelease(v23);
    a1[127] = 0;
  }
  v24 = (const void *)a1[128];
  if (v24)
  {
    CFRelease(v24);
    a1[128] = 0;
  }
  v25 = (const void *)a1[130];
  if (v25)
  {
    CFRelease(v25);
    a1[130] = 0;
  }
  v26 = (const void *)a1[131];
  if (v26)
  {
    CFRelease(v26);
    a1[131] = 0;
  }
  v27 = (const void *)a1[132];
  if (v27)
  {
    CFRelease(v27);
    a1[132] = 0;
  }
  v28 = (const void *)a1[106];
  if (v28)
  {
    CFRelease(v28);
    a1[106] = 0;
  }
  v29 = (const void *)a1[176];
  if (v29)
  {
    CFRelease(v29);
    a1[176] = 0;
  }
  v30 = a1[121];
  if (v30)
  {
    dispatch_release(v30);
    a1[121] = 0;
  }
  v31 = (const void *)a1[112];
  if (v31)
  {
    CFRelease(v31);
    a1[112] = 0;
  }
  v32 = (const void *)a1[32];
  if (v32)
  {
    CFRelease(v32);
    a1[32] = 0;
  }
  FigSimpleMutexDestroy();
  a1[185] = 0;
  v33 = (const void *)a1[186];
  if (v33)
  {
    CFRelease(v33);
    a1[186] = 0;
  }
  if (a1[72])
  {
    FigSimpleMutexDestroy();
    a1[72] = 0;
  }
  if (dword_1EE29F468)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a1[145])
  {
    FigSimpleMutexDestroy();
    a1[145] = 0;
  }
  if (a1[97])
  {
    FigSimpleMutexDestroy();
    a1[97] = 0;
  }
  v35 = (const void *)a1[98];
  if (v35)
  {
    CFRelease(v35);
    a1[98] = 0;
  }
  v36 = (const void *)a1[101];
  if (v36)
  {
    CFRelease(v36);
    a1[101] = 0;
  }
  v37 = (void *)a1[174];
  if (v37)
  {
    os_release(v37);
    a1[174] = 0;
  }
  v38 = (const void *)a1[134];
  if (v38)
  {
    CFRelease(v38);
    a1[134] = 0;
  }
  v39 = a1[58];
  if (v39)
  {
    dispatch_release(v39);
    a1[58] = 0;
  }
}

void piqca_finalize(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t CMBaseObject;
  uint64_t v4;
  void (*v5)(uint64_t);
  const void *v6;
  _QWORD *v7;
  const void *v8;
  const void *v9;
  NSObject *v10;
  const void *v11;
  const void *v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v14;
  const void *v15;
  NSObject *v16;
  void *v17;
  const void *v18;
  const void *v19;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 2472) = mach_absolute_time();
  piqca_gmstats_dump();
  if (piqca_getSharedPollingThreadContext_initSharedPollingThreadOnce != -1)
    dispatch_once_f(&piqca_getSharedPollingThreadContext_initSharedPollingThreadOnce, &piqca_getSharedPollingThreadContext_sharedPollingContext, (dispatch_function_t)piqca_initSharedPollingThread);
  MEMORY[0x19402EEEC](qword_1EE2A0180);
  if (CFDictionaryGetValue((CFDictionaryRef)qword_1EE2A0188, a1))
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_1EE2A0188, a1);
  MEMORY[0x19402EF04](qword_1EE2A0180);
  if (*(_QWORD *)(DerivedStorage + 3080))
  {
    CMBaseObject = FigImageQueueGaugeGetCMBaseObject();
    if (CMBaseObject)
    {
      v4 = CMBaseObject;
      v5 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v5)
        v5(v4);
    }
    v6 = *(const void **)(DerivedStorage + 3080);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(DerivedStorage + 3080) = 0;
    }
  }
  if (*(_QWORD *)DerivedStorage)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(*(_QWORD *)(DerivedStorage + 16) + 8));
    v7 = *(_QWORD **)(DerivedStorage + 16);
    *v7 = 0;
    MEMORY[0x19402EF04](v7[1]);
    piqca_decrementSnapLatchCount((void **)(DerivedStorage + 16));
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v8 = *(const void **)(DerivedStorage + 3064);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 3064) = 0;
  }
  FigSimpleMutexDestroy();
  v9 = *(const void **)(DerivedStorage + 3040);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(DerivedStorage + 3040) = 0;
  }
  FigSimpleMutexDestroy();
  v10 = *(NSObject **)(DerivedStorage + 3072);
  if (v10)
  {
    dispatch_release(v10);
    *(_QWORD *)(DerivedStorage + 3072) = 0;
  }
  FigImageQueueDisplayCountHistory_FinishTracingDisplayCount(*(_QWORD *)(DerivedStorage + 2848));
  v11 = *(const void **)(DerivedStorage + 2848);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(DerivedStorage + 2848) = 0;
  }
  v12 = *(const void **)(DerivedStorage + 120);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(DerivedStorage + 120) = 0;
  }
  if (*(_QWORD *)(DerivedStorage + 8))
    FigSimpleMutexDestroy();
  if (*(_QWORD *)(DerivedStorage + 2776))
    FigSimpleMutexDestroy();
  if (*(_QWORD *)(DerivedStorage + 2464))
  {
    FigSimpleMutexDestroy();
    *(_QWORD *)(DerivedStorage + 2464) = 0;
  }
  if (dword_1EE2A0160)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v14 = *(const void **)(DerivedStorage + 2488);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(DerivedStorage + 2488) = 0;
  }
  v15 = *(const void **)(DerivedStorage + 2936);
  if (v15)
  {
    FigSyncMomentSourceDestroy(v15);
    *(_QWORD *)(DerivedStorage + 2936) = 0;
  }
  v16 = *(NSObject **)(DerivedStorage + 2928);
  if (v16)
    dispatch_release(v16);
  v17 = *(void **)(DerivedStorage + 2864);
  if (v17)
  {
    os_release(v17);
    *(_QWORD *)(DerivedStorage + 2864) = 0;
  }
  v18 = *(const void **)(DerivedStorage + 3008);
  if (v18)
  {
    CFRelease(v18);
    *(_QWORD *)(DerivedStorage + 3008) = 0;
  }
  v19 = *(const void **)(DerivedStorage + 144);
  if (v19)
  {
    CFRelease(v19);
    *(_QWORD *)(DerivedStorage + 144) = 0;
  }
}

void FigCRABSScheduledIOFinalize()
{
  CFTypeRef *DerivedStorage;
  uint64_t v1;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  v1 = CMBaseObjectGetDerivedStorage();
  siocrabsFinishUnlocked(v1, 0, 1);
  FigSimpleMutexDestroy();
  CFRelease(*DerivedStorage);
}

void FPSupport_DeleteCASlot(uint64_t a1)
{
  void *v2;
  void *Context;

  v2 = (void *)MEMORY[0x19403137C]();
  if ((_DWORD)a1)
  {
    Context = (void *)fpSupport_getContext();
    objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
    if (!pthread_main_np())
      objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
    objc_msgSend(Context, "deleteSlot:", a1);
    objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
  }
  objc_autoreleasePoolPop(v2);
}

uint64_t FigCRABSInvalidate()
{
  uint64_t DerivedStorage;
  const void *v1;
  CFTypeRef v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  NSObject *global_queue;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 760);
  if (v1)
    v2 = CFRetain(v1);
  else
    v2 = 0;
  v3 = FigRetainProxyLockMutex();
  if ((_DWORD)v3)
  {
    v4 = v3;
    if (!v2)
      return v4;
    goto LABEL_12;
  }
  if (*(_BYTE *)(DerivedStorage + 104) == 1)
  {
    *(_BYTE *)(DerivedStorage + 104) = 0;
    FigRetainProxyInvalidate();
    FigMemoryBarrier();
    if (*(_QWORD *)(DerivedStorage + 32))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListeners();
    }
    crabsCancelRead((_QWORD *)DerivedStorage, (uint64_t *)(DerivedStorage + 512), -12932);
    crabsCancelRead((_QWORD *)DerivedStorage, (uint64_t *)(DerivedStorage + 616), -12932);
    crabsWaitForReadCancel(DerivedStorage, DerivedStorage + 512);
    crabsWaitForReadCancel(DerivedStorage, DerivedStorage + 616);
    if ((*(_BYTE *)(DerivedStorage + 504) & 1) != 0)
    {
      crabsCompleteLazySync(DerivedStorage, 1);
      crabsCompleteLazyPagein(DerivedStorage, 1);
    }
    v4 = crabsSyncCache(DerivedStorage);
    v5 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
    *v5 = *(_QWORD *)(DerivedStorage + 8);
    v5[1] = os_retain(*(void **)(DerivedStorage + 936));
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async_f(global_queue, v5, (dispatch_function_t)crabsReleaseDiskCacheProviderAsync);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  else
  {
    v4 = 0;
  }
  crabsRetainProxyUnlockWithActions();
  if (v2)
LABEL_12:
    CFRelease(v2);
  return v4;
}

uint64_t crabsWaitForReadCancel(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(uint64_t *)(a2 + 56) >= 1)
  {
    do
    {
      MEMORY[0x19402D920](*(_QWORD *)(a2 + 40));
      FigRetainProxyLockMutex();
      usleep(0x2710u);
      result = FigRetainProxyUnlockMutex();
    }
    while (*(uint64_t *)(a2 + 56) > 0);
  }
  return result;
}

uint64_t FigCFHTTPCopyIdentifier(uint64_t a1, const __CFDictionary **a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  const __CFAllocator *AllocatorForMedia;
  const __CFDictionary *MutableCopy;
  const __CFDictionary *v7;
  uint64_t result;
  uint64_t v9;

  if (!a2)
    return FigSignalErrorAt();
  FigByteFlumeGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 72) != 1)
    return 4294954513;
  v4 = DerivedStorage;
  if (!*(_QWORD *)(DerivedStorage + 264))
    return FigSignalErrorAt();
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  MutableCopy = CFDictionaryCreateMutableCopy(AllocatorForMedia, 0, *(CFDictionaryRef *)(v4 + 264));
  if (!MutableCopy)
    return FigSignalErrorAt();
  v7 = MutableCopy;
  if (!CFDictionaryContainsKey(MutableCopy, CFSTR("URL")))
    goto LABEL_12;
  if (!CFDictionaryContainsKey(v7, CFSTR("MIME Type")))
  {
    FigCFHTTPIsDataURL(*(const __CFURL **)(v4 + 168));
    FigCFDictionarySetValue();
  }
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)(v4 + 264), CFSTR("Size")))
  {
    result = 0;
    *a2 = v7;
  }
  else
  {
LABEL_12:
    v9 = FigSignalErrorAt();
    CFRelease(v7);
    return v9;
  }
  return result;
}

uint64_t FigShared_CheckIntoDiskCache(const __CFString *cf, const __CFString *a2, const void *a3)
{
  const __CFString *v5;
  uint64_t DirectoryAtPath;
  uint64_t v7;
  uint64_t v8;
  CFTypeRef v10;
  CFTypeRef cfa;

  v5 = cf;
  v10 = 0;
  cfa = cf;
  if (cf)
  {
    CFRetain(cf);
    if ((sDiskCacheIsRemote & 1) != 0)
    {
      DirectoryAtPath = fs_CreateDirectoryAtPath(v5);
      goto LABEL_6;
    }
LABEL_12:
    v8 = FigSharedRemote_CheckIntoDiskCache(v5, (uint64_t)a2, (uint64_t)a3);
    goto LABEL_13;
  }
  if ((sDiskCacheIsRemote & 1) == 0)
    goto LABEL_12;
  DirectoryAtPath = FigDiskCacheRepositoryCopyDefaultParentURLForCurrentTask(&cfa, 0);
LABEL_6:
  v7 = DirectoryAtPath;
  if ((_DWORD)DirectoryAtPath)
    goto LABEL_14;
  if ((sDiskCacheIsRemote & 1) == 0)
  {
    v5 = (const __CFString *)cfa;
    goto LABEL_12;
  }
  MEMORY[0x19402F294](&fmp_EnsureDiskCache_sInitDiskCacheOnce, InitDiskCache);
  v7 = sDiskInitStatus;
  if (!sDiskInitStatus)
  {
    v7 = fs_CopyRepositoryByParent((const __CFString *)cfa, 1, (void **)&v10);
    if (!(_DWORD)v7)
    {
      v8 = FigDiskCacheRepositoryCheckIn((uint64_t)v10, a2, a3);
LABEL_13:
      v7 = v8;
    }
  }
LABEL_14:
  if (cfa)
    CFRelease(cfa);
  if (v10)
    CFRelease(v10);
  return v7;
}

uint64_t FigDiskCacheRepositoryCheckIn(uint64_t a1, const __CFString *a2, const void *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  char v10;
  unsigned int v11;

  if (!a1 || !a2 || !a3)
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
  v6 = FigCFURLCreateDirectory();
  if ((_DWORD)v6)
  {
    v7 = v6;
  }
  else
  {
    if (FigFileForkOpenMainByCFURL())
    {
      v7 = 0;
    }
    else
    {
      fdcr_ReadRepositoryPlist(a1);
      v9 = fdcr_CheckInResource(a1, a2, a3, 0);
      v10 = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 80)) == 0;
      v11 = fdcr_WriteRepositoryPlist(a1, 0, 1, v10);
      if (v9)
        v7 = v9;
      else
        v7 = v11;
      FigFileForkClose();
    }
    if (*(_BYTE *)(a1 + 56))
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 72), (CFDictionaryApplierFunction)markDiskCacheRepositoryPurgeable, 0);
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  return v7;
}

void *FigCRABSFinalize()
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  const void *StatsDictionary;
  uint64_t v27;
  void (*v28)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);
  uint64_t v29;
  void (*v30)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);
  uint64_t v31;
  void (*v32)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);
  uint64_t v33;
  void (*v34)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);
  uint64_t v35;
  void (*v36)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v37;
  void (*v38)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v39;
  void (*v40)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v41;
  void (*v42)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);
  uint64_t v43;
  void (*v44)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);
  const void *v45;
  void *v46;
  uint64_t FigBaseObject;
  uint64_t v48;
  void (*v49)(uint64_t);
  uint64_t v50;
  uint64_t i;
  uint64_t v52;
  _QWORD *v53;
  void *v54;
  void *v55;
  const void *v56;
  const void *v57;
  const void *v58;
  const void *v59;
  const void *v60;
  uint64_t v61;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A29E8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_QWORD *)(DerivedStorage + 760))
  {
    FigCRABSInvalidate();
    v2 = *(_QWORD *)(DerivedStorage + 920);
    if (v2)
    {
      v3 = *(_QWORD *)(DerivedStorage + 840);
      v4 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 56);
      if (v4)
        v4(v2, CFSTR("crabsStats"), CFSTR("CMA"), v3, 0);
    }
    v5 = *(_QWORD *)(DerivedStorage + 920);
    if (v5)
    {
      v6 = *(_QWORD *)(DerivedStorage + 848);
      v7 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 56);
      if (v7)
        v7(v5, CFSTR("crabsStats"), CFSTR("CMU"), v6, 0);
      v8 = *(_QWORD *)(DerivedStorage + 920);
      if (v8)
      {
        v9 = *(_QWORD *)(DerivedStorage + 856);
        v10 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 56);
        if (v10)
          v10(v8, CFSTR("crabsStats"), CFSTR("CMIU"), v9, 0);
        v11 = *(_QWORD *)(DerivedStorage + 920);
        if (v11)
        {
          v12 = *(_QWORD *)(DerivedStorage + 864);
          v13 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 56);
          if (v13)
            v13(v11, CFSTR("crabsStats"), CFSTR("CMV"), v12, 0);
          v14 = *(_QWORD *)(DerivedStorage + 920);
          if (v14)
          {
            v15 = *(_QWORD *)(DerivedStorage + 872);
            v16 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 56);
            if (v16)
              v16(v14, CFSTR("crabsStats"), CFSTR("BBO"), v15, 0);
            v17 = *(_QWORD *)(DerivedStorage + 920);
            if (v17)
            {
              v18 = *(_QWORD *)(DerivedStorage + 880);
              v19 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 56);
              if (v19)
                v19(v17, CFSTR("crabsStats"), CFSTR("DCA"), v18, 0);
              v20 = *(_QWORD *)(DerivedStorage + 920);
              if (v20)
              {
                v21 = *(_QWORD *)(DerivedStorage + 888);
                v22 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                  + 56);
                if (v22)
                  v22(v20, CFSTR("crabsStats"), CFSTR("NCI"), v21, 0);
                v23 = *(_QWORD *)(DerivedStorage + 920);
                if (v23)
                {
                  v24 = *(_QWORD *)(DerivedStorage + 896);
                  v25 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
                  if (v25)
                    v25(v23, CFSTR("crabsStats"), CFSTR("RWC"), v24, 0);
                }
              }
            }
          }
        }
      }
    }
    StatsDictionary = (const void *)FigByteStreamStatsCreateStatsDictionary();
    if (FigCFDictionaryGetInt32IfPresent())
    {
      v27 = *(_QWORD *)(DerivedStorage + 920);
      if (v27)
      {
        v28 = *(void (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 56);
        if (v28)
          v28(v27, CFSTR("crabsStats"), CFSTR("NOR"), 0, 0);
      }
    }
    if (FigCFDictionaryGetInt64IfPresent())
    {
      v29 = *(_QWORD *)(DerivedStorage + 920);
      if (v29)
      {
        v30 = *(void (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 56);
        if (v30)
          v30(v29, CFSTR("crabsStats"), CFSTR("TBR"), 0, 0);
      }
    }
    if (FigCFDictionaryGetInt32IfPresent())
    {
      v31 = *(_QWORD *)(DerivedStorage + 920);
      if (v31)
      {
        v32 = *(void (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 56);
        if (v32)
          v32(v31, CFSTR("crabsStats"), CFSTR("SRS"), 0, 0);
      }
    }
    if (FigCFDictionaryGetInt32IfPresent())
    {
      v33 = *(_QWORD *)(DerivedStorage + 920);
      if (v33)
      {
        v34 = *(void (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 56);
        if (v34)
          v34(v33, CFSTR("crabsStats"), CFSTR("LRS"), 0, 0);
      }
    }
    if (FigCFDictionaryGetDoubleIfPresent())
    {
      v35 = *(_QWORD *)(DerivedStorage + 920);
      if (v35)
      {
        v36 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 56);
        if (v36)
          v36(v35, CFSTR("crabsStats"), CFSTR("TRT"), (uint64_t)(0.0 * 1000.0), 0);
      }
    }
    if (FigCFDictionaryGetDoubleIfPresent())
    {
      v37 = *(_QWORD *)(DerivedStorage + 920);
      if (v37)
      {
        v38 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 56);
        if (v38)
          v38(v37, CFSTR("crabsStats"), CFSTR("SRT"), (uint64_t)(0.0 * 1000.0), 0);
      }
    }
    if (FigCFDictionaryGetDoubleIfPresent())
    {
      v39 = *(_QWORD *)(DerivedStorage + 920);
      if (v39)
      {
        v40 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 56);
        if (v40)
          v40(v39, CFSTR("crabsStats"), CFSTR("LRT"), (uint64_t)(0.0 * 1000.0), 0);
      }
    }
    if (FigCFDictionaryGetInt32IfPresent())
    {
      v41 = *(_QWORD *)(DerivedStorage + 920);
      if (v41)
      {
        v42 = *(void (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 56);
        if (v42)
          v42(v41, CFSTR("crabsStats"), CFSTR("NRTOSL"), 0, 0);
      }
    }
    if (FigCFDictionaryGetInt32IfPresent())
    {
      v43 = *(_QWORD *)(DerivedStorage + 920);
      if (v43)
      {
        v44 = *(void (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 56);
        if (v44)
          v44(v43, CFSTR("crabsStats"), CFSTR("NRTHOSL"), 0, 0);
      }
    }
    if (StatsDictionary)
      CFRelease(StatsDictionary);
    v45 = *(const void **)(DerivedStorage + 920);
    if (v45)
    {
      CFRelease(v45);
      *(_QWORD *)(DerivedStorage + 920) = 0;
    }
    v46 = *(void **)(DerivedStorage + 936);
    if (v46)
    {
      os_release(v46);
      *(_QWORD *)(DerivedStorage + 936) = 0;
    }
    FigBaseObject = FigByteFlumeGetFigBaseObject(*(_QWORD *)(DerivedStorage + 32));
    if (FigBaseObject)
    {
      v48 = FigBaseObject;
      v49 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v49)
        v49(v48);
    }
    FigRetainProxyLockMutex();
    v50 = *(_QWORD *)(DerivedStorage + 88);
    if (v50 >= 1)
    {
      for (i = 0; i < v50; ++i)
      {
        v52 = *(_QWORD *)(DerivedStorage + 80);
        v53 = *(_QWORD **)(v52 + 8 * i);
        if (v53)
        {
          crabsReleaseWorkingBlock((CFAllocatorRef *)DerivedStorage, *(_QWORD *)(v52 + 8 * i));
          v54 = (void *)v53[11];
          if (v54)
            CFAllocatorDeallocate(*(CFAllocatorRef *)DerivedStorage, v54);
          free(v53);
          v50 = *(_QWORD *)(DerivedStorage + 88);
        }
      }
    }
    v55 = *(void **)(DerivedStorage + 456);
    if (v55)
      CFAllocatorDeallocate(*(CFAllocatorRef *)DerivedStorage, v55);
    free(*(void **)(DerivedStorage + 80));
    free(*(void **)(DerivedStorage + 192));
    free(*(void **)(DerivedStorage + 152));
    FigReadWriteLockDestroy();
    v56 = *(const void **)(DerivedStorage + 960);
    if (v56)
      CFRelease(v56);
    if (*(_QWORD *)DerivedStorage)
      CFRelease(*(CFTypeRef *)DerivedStorage);
    v57 = *(const void **)(DerivedStorage + 952);
    if (v57)
      CFRelease(v57);
    v58 = *(const void **)(DerivedStorage + 968);
    if (v58)
      CFRelease(v58);
    FigRetainProxyUnlockMutex();
    v59 = *(const void **)(DerivedStorage + 144);
    if (v59)
      CFRelease(v59);
    v60 = *(const void **)(DerivedStorage + 32);
    if (v60)
      CFRelease(v60);
    v61 = *(_QWORD *)(DerivedStorage + 720);
    if (v61)
      FigAIOClientRelease(v61);
    if (*(_QWORD *)(DerivedStorage + 656))
      FigConditionVariableDestroy();
    if (*(_QWORD *)(DerivedStorage + 552))
      FigConditionVariableDestroy();
    if (*(_QWORD *)(DerivedStorage + 72))
      FigSimpleMutexDestroy();
    if (*(_QWORD *)(DerivedStorage + 384))
      FigSimpleMutexDestroy();
    FigByteStreamStatsTeardownWorker();
    FigRetainProxyRelease();
  }
  return memset((void *)DerivedStorage, 70, 0x3D0uLL);
}

uint64_t FigCFHTTPInvalidate()
{
  _QWORD *DerivedStorage;
  uint64_t v1;
  const void *v2;
  void (*v3)(uint64_t, _QWORD, uint64_t);
  uint64_t v4;
  OpaqueCMMemoryPool *v5;
  int v6;
  BOOL v7;
  int v9;
  const void *v10;
  const void *v11;
  const void *v12;
  void (*v13)(const void *);

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    v1 = (uint64_t)DerivedStorage;
    FigRetainProxyLockMutex();
    if (*(_BYTE *)(v1 + 376))
    {
      FigRetainProxyUnlockMutex();
    }
    else
    {
      FigRetainProxyInvalidate();
      *(_WORD *)(v1 + 376) = 257;
      FigCFHTTPStopAllReads(v1, -12932);
      v2 = *(const void **)(v1 + 88);
      *(_QWORD *)(v1 + 88) = 0;
      v3 = *(void (**)(uint64_t, _QWORD, uint64_t))(v1 + 104);
      v4 = *(_QWORD *)(v1 + 120);
      *(_QWORD *)(v1 + 104) = 0;
      v5 = *(OpaqueCMMemoryPool **)(v1 + 368);
      if (v5)
        CMMemoryPoolInvalidate(v5);
      fbf_CancelReconnect(v1);
      if (*(_QWORD *)(v1 + 456))
      {
        FigHTTPStopAndReleaseTimer((dispatch_object_t *)(v1 + 456));
        *(_QWORD *)(v1 + 456) = 0;
      }
      FigByteFlumeBaseInvalidate(v1);
      v6 = *(_DWORD *)(v1 + 44);
      if (*(_BYTE *)(v1 + 40))
        v7 = v6 == 1;
      else
        v7 = 0;
      v9 = v7 || v6 == 2;
      FigNetworkInterfaceReporterSamplePhysicalStatistics(*(_QWORD *)(v1 + 592), (uint64_t)v2, *(_QWORD *)(v1 + 32), 0x1E301B6D8, v9);
      if (*(_QWORD *)(v1 + 600))
      {
        nw_activity_complete_with_reason();
        v10 = *(const void **)(v1 + 600);
        if (v10)
        {
          CFRelease(v10);
          *(_QWORD *)(v1 + 600) = 0;
        }
      }
      v11 = *(const void **)(v1 + 624);
      if (v11)
      {
        CFRelease(v11);
        *(_QWORD *)(v1 + 624) = 0;
      }
      v12 = *(const void **)(v1 + 640);
      if (v12)
      {
        CFRelease(v12);
        *(_QWORD *)(v1 + 640) = 0;
      }
      *(_BYTE *)(v1 + 377) = 0;
      FigRetainProxyUnlockMutex();
      if (v2)
      {
        v13 = *(void (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
        if (v13)
          v13(v2);
        CFRelease(v2);
      }
      if (v3)
        v3(v4, 0, 4294954364);
    }
  }
  return 0;
}

void QTMovieCacheMemReleaseCallBack(_QWORD *a1)
{
  const void *v2;

  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
  free(a1);
}

uint64_t FigCFHTTPStopAllReads(uint64_t result, int a2)
{
  uint64_t v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v5;

  v3 = result;
  if (dword_1EE2A2D10)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    result = fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v5 = *(_QWORD *)(v3 + 56);
  if (v5)
  {
    while (1)
    {
      if (!*(_DWORD *)(v5 + 120))
        *(_DWORD *)(v5 + 120) = a2;
      if (!*(_BYTE *)(v5 + 125))
      {
        result = FigCFHTTPFinishReadRequest(v3, v5, 1);
        v5 = *(_QWORD *)(v3 + 56);
        if (!v5)
          break;
      }
    }
  }
  return result;
}

void FigCFHTTPFinalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  void **v23;

  FigCFHTTPInvalidate();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 408);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 408) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 400);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 400) = 0;
  }
  v3 = *(const void **)(DerivedStorage + 168);
  if (v3)
  {
    *(_QWORD *)(DerivedStorage + 168) = 0;
    CFRelease(v3);
  }
  v4 = *(const void **)(DerivedStorage + 176);
  if (v4)
  {
    *(_QWORD *)(DerivedStorage + 176) = 0;
    CFRelease(v4);
  }
  v5 = *(const void **)(DerivedStorage + 192);
  if (v5)
  {
    *(_QWORD *)(DerivedStorage + 192) = 0;
    CFRelease(v5);
  }
  v6 = *(const void **)(DerivedStorage + 224);
  if (v6)
  {
    *(_QWORD *)(DerivedStorage + 224) = 0;
    CFRelease(v6);
  }
  v7 = *(const void **)(DerivedStorage + 232);
  if (v7)
  {
    *(_QWORD *)(DerivedStorage + 232) = 0;
    CFRelease(v7);
  }
  v8 = *(const void **)(DerivedStorage + 240);
  if (v8)
  {
    *(_QWORD *)(DerivedStorage + 240) = 0;
    CFRelease(v8);
  }
  v9 = *(const void **)(DerivedStorage + 200);
  if (v9)
  {
    *(_QWORD *)(DerivedStorage + 200) = 0;
    CFRelease(v9);
  }
  v10 = *(const void **)(DerivedStorage + 112);
  if (v10)
  {
    *(_QWORD *)(DerivedStorage + 112) = 0;
    CFRelease(v10);
  }
  v11 = *(const void **)(DerivedStorage + 272);
  if (v11)
  {
    *(_QWORD *)(DerivedStorage + 272) = 0;
    CFRelease(v11);
  }
  v12 = *(const void **)(DerivedStorage + 264);
  if (v12)
  {
    *(_QWORD *)(DerivedStorage + 264) = 0;
    CFRelease(v12);
  }
  v13 = *(const void **)(DerivedStorage + 256);
  if (v13)
  {
    *(_QWORD *)(DerivedStorage + 256) = 0;
    CFRelease(v13);
  }
  v14 = *(const void **)(DerivedStorage + 128);
  if (v14)
  {
    *(_QWORD *)(DerivedStorage + 128) = 0;
    CFRelease(v14);
  }
  v15 = *(const void **)(DerivedStorage + 136);
  if (v15)
  {
    *(_QWORD *)(DerivedStorage + 136) = 0;
    CFRelease(v15);
  }
  FigHTTPSchedulerRelease(*(dispatch_object_t *)(DerivedStorage + 48));
  v16 = *(const void **)(DerivedStorage + 368);
  if (v16)
  {
    *(_QWORD *)(DerivedStorage + 368) = 0;
    CFRelease(v16);
  }
  v17 = *(const void **)(DerivedStorage + 208);
  if (v17)
  {
    *(_QWORD *)(DerivedStorage + 208) = 0;
    CFRelease(v17);
  }
  v18 = *(const void **)(DerivedStorage + 536);
  if (v18)
  {
    *(_QWORD *)(DerivedStorage + 536) = 0;
    CFRelease(v18);
  }
  v19 = *(const void **)(DerivedStorage + 560);
  if (v19)
  {
    *(_QWORD *)(DerivedStorage + 560) = 0;
    CFRelease(v19);
  }
  v20 = *(const void **)(DerivedStorage + 544);
  if (v20)
  {
    *(_QWORD *)(DerivedStorage + 544) = 0;
    CFRelease(v20);
  }
  v21 = *(const void **)(DerivedStorage + 552);
  if (v21)
  {
    *(_QWORD *)(DerivedStorage + 552) = 0;
    CFRelease(v21);
  }
  v22 = *(const void **)(DerivedStorage + 568);
  if (v22)
  {
    *(_QWORD *)(DerivedStorage + 568) = 0;
    CFRelease(v22);
  }
  v23 = *(void ***)(DerivedStorage + 344);
  if (v23)
  {
    FigByteRateHistoryDispose(v23);
    *(_QWORD *)(DerivedStorage + 344) = 0;
  }
  FigNetworkInterfaceReporterDestroy(*(_QWORD **)(DerivedStorage + 592));
  FigByteFlumeBaseDispose(DerivedStorage);
}

uint64_t FigByteRateHistoryDispose(void **a1)
{
  void *v2;

  v2 = *a1;
  if (v2)
    free(v2);
  free(a1);
  return 0;
}

uint64_t playerfig_Invalidate(uint64_t a1)
{
  void *v2;
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void (*v6)(uint64_t, _QWORD);
  const void *v7;
  const __CFAllocator *v8;
  const __CFSet *Copy;
  uint64_t v10;
  uint64_t FigBaseObject;
  uint64_t v12;
  void (*v13)(uint64_t);
  const __CFArray *v14;
  const void *ValueAtIndex;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  const __CFArray *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t);
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t);
  const void *v38;
  const void *v39;
  const void *v40;
  const void *v41;
  const void *v42;
  const void *v43;
  CFTypeRef v44;
  const void *v45;
  const void *v46;
  CFTypeRef v47;
  const void *v48;
  const void *v49;
  const void *v50;
  const void *v51;
  CFTypeRef cf[23];

  cf[22] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x19403137C]();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  if (dword_1EE2A2AC8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(_BYTE *)DerivedStorage)
  {
    FigDeferredTransactionCreate(*MEMORY[0x1E0C9AE00], (uint64_t *)cf);
    v6 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v6)
      v6(a1, 0);
    *(_BYTE *)DerivedStorage = 1;
    playerfig_cleanupOverlappedOutroComponents(a1, 0);
    if (*(_BYTE *)(DerivedStorage + 761))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigGetNotifyingObjectForSelectionCriteriaChanged();
      FigNotificationCenterRemoveWeakListener();
      *(_BYTE *)(DerivedStorage + 761) = 0;
    }
    if (*(_BYTE *)(DerivedStorage + 859))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      JNvfYIDgz();
      FigNotificationCenterRemoveWeakListener();
      *(_BYTE *)(DerivedStorage + 859) = 0;
    }
    if (FPSupport_GetAudioSpatializationPreferencesMonitor())
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FPSupport_GetAudioSpatializationPreferencesMonitor();
      FigNotificationCenterRemoveWeakListener();
    }
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 40));
    v7 = *(const void **)(DerivedStorage + 32);
    if (v7)
    {
      v8 = CFGetAllocator(v7);
      Copy = CFSetCreateCopy(v8, *(CFSetRef *)(DerivedStorage + 32));
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 40));
      if (Copy)
      {
        CFSetApplyFunction(Copy, (CFSetApplierFunction)playerfig_InvalidateItem, 0);
        CFRelease(Copy);
      }
    }
    else
    {
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 40));
    }
    v10 = *(_QWORD *)(DerivedStorage + 560);
    if (v10)
    {
      playerfig_removeAudioRenderPipelineListeners(a1, v10);
      FigBaseObject = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(DerivedStorage + 560));
      if (FigBaseObject)
      {
        v12 = FigBaseObject;
        v13 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
        if (v13)
          v13(v12);
      }
    }
    FPSupport_ReleasePassthroughHelper();
    *(_QWORD *)(DerivedStorage + 912) = 0;
    v14 = *(const __CFArray **)(DerivedStorage + 632);
    if (v14 && CFArrayGetCount(v14) >= 1)
    {
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 632), 0);
        playerfig_removeAudioRenderPipelineListeners(a1, (uint64_t)ValueAtIndex);
        v16 = FigRenderPipelineGetFigBaseObject(ValueAtIndex);
        if (v16)
        {
          v17 = v16;
          v18 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
          if (v18)
            v18(v17);
        }
      }
      while (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 632)) > 0);
    }
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 176));
    v19 = *(const void **)(DerivedStorage + 168);
    if (v19)
    {
      CFRelease(v19);
      *(_QWORD *)(DerivedStorage + 168) = 0;
    }
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 176));
    v20 = *(_QWORD *)(DerivedStorage + 568);
    if (v20)
    {
      v21 = FigRenderPipelineGetFigBaseObject(v20);
      if (v21)
      {
        v22 = v21;
        v23 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
        if (v23)
          v23(v22);
      }
    }
    v24 = *(const __CFArray **)(DerivedStorage + 640);
    if (v24)
    {
      if (CFArrayGetCount(v24) >= 1)
      {
        do
        {
          v25 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 640), 0);
          v26 = FigRenderPipelineGetFigBaseObject(v25);
          if (v26)
          {
            v27 = v26;
            v28 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
            if (v28)
              v28(v27);
          }
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 640), 0);
        }
        while (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 640)) > 0);
      }
      v29 = *(const void **)(DerivedStorage + 640);
      if (v29)
      {
        CFRelease(v29);
        *(_QWORD *)(DerivedStorage + 640) = 0;
      }
    }
    v30 = *(_QWORD *)(DerivedStorage + 576);
    if (v30)
    {
      v31 = FigRenderPipelineGetFigBaseObject(v30);
      if (v31)
      {
        v32 = v31;
        v33 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
        if (v33)
          v33(v32);
      }
      CFRelease(*(CFTypeRef *)(DerivedStorage + 576));
      *(_QWORD *)(DerivedStorage + 576) = 0;
    }
    v34 = *(_QWORD *)(DerivedStorage + 584);
    if (v34)
    {
      v35 = FigRenderPipelineGetFigBaseObject(v34);
      if (v35)
      {
        v36 = v35;
        v37 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
        if (v37)
          v37(v36);
      }
      CFRelease(*(CFTypeRef *)(DerivedStorage + 584));
      *(_QWORD *)(DerivedStorage + 584) = 0;
    }
    v38 = *(const void **)(DerivedStorage + 648);
    if (v38)
    {
      CFRelease(v38);
      *(_QWORD *)(DerivedStorage + 648) = 0;
    }
    v39 = *(const void **)(DerivedStorage + 656);
    if (v39)
    {
      CFRelease(v39);
      *(_QWORD *)(DerivedStorage + 656) = 0;
    }
    v40 = *(const void **)(DerivedStorage + 664);
    if (v40)
    {
      CFRelease(v40);
      *(_QWORD *)(DerivedStorage + 664) = 0;
    }
    v41 = *(const void **)(DerivedStorage + 672);
    if (v41)
    {
      CFRelease(v41);
      *(_QWORD *)(DerivedStorage + 672) = 0;
    }
    v42 = *(const void **)(DerivedStorage + 192);
    if (v42)
    {
      CFRelease(v42);
      *(_QWORD *)(DerivedStorage + 192) = 0;
    }
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 752));
    v43 = *(const void **)(DerivedStorage + 728);
    if (v43)
    {
      v44 = CFRetain(v43);
      v45 = *(const void **)(DerivedStorage + 728);
      if (v45)
      {
        CFRelease(v45);
        *(_QWORD *)(DerivedStorage + 728) = 0;
      }
      if (v44)
        CFRelease(v44);
    }
    v46 = *(const void **)(DerivedStorage + 736);
    if (v46)
    {
      v47 = CFRetain(v46);
      v48 = *(const void **)(DerivedStorage + 736);
      if (v48)
      {
        CFRelease(v48);
        *(_QWORD *)(DerivedStorage + 736) = 0;
      }
      if (v47)
        CFRelease(v47);
    }
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 752));
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 712));
    v49 = *(const void **)(DerivedStorage + 720);
    if (v49)
    {
      CFRelease(v49);
      *(_QWORD *)(DerivedStorage + 720) = 0;
    }
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 712));
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 488));
    v50 = *(const void **)(DerivedStorage + 480);
    if (v50)
    {
      CFRelease(v50);
      *(_QWORD *)(DerivedStorage + 480) = 0;
    }
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 488));
    v51 = *(const void **)(DerivedStorage + 864);
    if (v51)
    {
      CFRelease(v51);
      *(_QWORD *)(DerivedStorage + 864) = 0;
    }
    playerfig_freeTransitionImageQueueAndSlot();
  }
  objc_autoreleasePoolPop(v2);
  return 0;
}

void playerfig_Finalize(uint64_t a1)
{
  _QWORD *DerivedStorage;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  NSObject *v16;
  NSObject *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  playerfig_Invalidate(a1);
  v3 = (const void *)DerivedStorage[105];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[105] = 0;
  }
  v4 = (const void *)DerivedStorage[70];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[70] = 0;
  }
  v5 = (const void *)DerivedStorage[79];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[79] = 0;
  }
  v6 = (const void *)DerivedStorage[71];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[71] = 0;
  }
  v7 = (const void *)DerivedStorage[75];
  if (v7)
  {
    CFRelease(v7);
    DerivedStorage[75] = 0;
  }
  v8 = (const void *)DerivedStorage[76];
  if (v8)
  {
    CFRelease(v8);
    DerivedStorage[76] = 0;
  }
  v9 = (const void *)DerivedStorage[77];
  if (v9)
  {
    CFRelease(v9);
    DerivedStorage[77] = 0;
  }
  v10 = (const void *)DerivedStorage[11];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[11] = 0;
  }
  v11 = (const void *)DerivedStorage[67];
  if (v11)
  {
    CFRelease(v11);
    DerivedStorage[67] = 0;
  }
  v12 = (const void *)DerivedStorage[85];
  if (v12)
  {
    CFRelease(v12);
    DerivedStorage[85] = 0;
  }
  MEMORY[0x19402EEEC](DerivedStorage[5]);
  v13 = (const void *)DerivedStorage[4];
  if (v13)
  {
    CFRelease(v13);
    DerivedStorage[4] = 0;
  }
  MEMORY[0x19402EF04](DerivedStorage[5]);
  FigSimpleMutexDestroy();
  if (DerivedStorage[22])
    FigSimpleMutexDestroy();
  if (DerivedStorage[89])
    FigSimpleMutexDestroy();
  if (DerivedStorage[94])
    FigSimpleMutexDestroy();
  if (DerivedStorage[28])
    FigSimpleMutexDestroy();
  if (DerivedStorage[30])
    FigSimpleMutexDestroy();
  if (DerivedStorage[61])
    FigSimpleMutexDestroy();
  if (DerivedStorage[109])
  {
    MEMORY[0x19402EEEC]();
    v14 = (const void *)DerivedStorage[110];
    if (v14)
    {
      CFRelease(v14);
      DerivedStorage[110] = 0;
    }
    v15 = (const void *)DerivedStorage[111];
    if (v15)
    {
      CFRelease(v15);
      DerivedStorage[111] = 0;
    }
    MEMORY[0x19402EF04](DerivedStorage[109]);
    FigSimpleMutexDestroy();
  }
  FigSimpleMutexDestroy();
  v16 = DerivedStorage[12];
  if (v16)
  {
    dispatch_release(v16);
    DerivedStorage[12] = 0;
  }
  v17 = DerivedStorage[13];
  if (v17)
  {
    dispatch_release(v17);
    DerivedStorage[13] = 0;
  }
  v18 = (const void *)DerivedStorage[2];
  if (v18)
    CFRelease(v18);
  FigSimpleMutexDestroy();
  v19 = (const void *)DerivedStorage[87];
  if (v19)
    CFRelease(v19);
  v20 = (const void *)DerivedStorage[74];
  if (v20)
    CFRelease(v20);
  v21 = (const void *)DerivedStorage[113];
  if (v21)
  {
    CFRelease(v21);
    DerivedStorage[113] = 0;
  }
  FPSupport_releaseClosedCaptions((uint64_t)(DerivedStorage + 37));
}

uint64_t sub_192935448()
{
  _QWORD *v0;
  const void *v1;
  uint64_t result;

  v1 = (const void *)v0[63];
  if (v1)
  {
    CFRelease(v1);
    v0[63] = 0;
  }
  if (v0[62])
  {
    FigSimpleMutexDestroy();
    v0[62] = 0;
  }
  if (v0[19])
    FigSimpleMutexDestroy();
  result = v0[34];
  if (result)
    return FigSimpleMutexDestroy();
  return result;
}

uint64_t FigMediaValidatorCreate(unint64_t a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4, _QWORD *a5)
{
  uint64_t v10;
  void *v11;
  void *v13;

  v13 = 0;
  v10 = FigMediaValidatorCreateInternal(&v13);
  if (!(_DWORD)v10)
  {
    v11 = v13;
    if (v13)
    {
      v10 = FigMediaValidatorValidateAsyncInternal((uint64_t)v13, a1, a2, a3, a4, 0);
      if ((_DWORD)v10)
        free(v11);
      else
        *a5 = v11;
    }
  }
  return v10;
}

uint64_t mv_thread(uint64_t a1)
{
  uint64_t v2;
  int StreamFromURL;
  unsigned int v4;
  CFTypeRef *v5;
  CFTypeRef *v6;
  CFTypeRef *v7;
  uint64_t v8;
  uint64_t v9;
  CFTypeRef v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t CMBaseObject;
  void (*v15)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  void (*v16)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v17;
  uint64_t v18;
  int v19;
  CFURLRef v21;
  CFTypeRef cf;
  BOOL v23;
  CFStringRef URLString;

  URLString = 0;
  *(_QWORD *)(a1 + 200) = MEMORY[0x19402F228]();
  FigSemaphoreSignal();
  if (*(_QWORD *)(a1 + 48))
  {
    v2 = *MEMORY[0x1E0C9AE00];
  }
  else
  {
    FigDiskCacheRepositoryCopyDefaultParentURLForCurrentTask((CFTypeRef *)&URLString, 1);
    v2 = *MEMORY[0x1E0C9AE00];
    if (URLString)
    {
      *(_QWORD *)(a1 + 48) = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], URLString, 0);
      CFRelease(URLString);
    }
  }
  StreamFromURL = 0;
  v4 = 0;
  v5 = (CFTypeRef *)(a1 + 80);
  v6 = (CFTypeRef *)(a1 + 8);
  v7 = (CFTypeRef *)(a1 + 16);
  v8 = *MEMORY[0x1E0CA2098];
  while (1)
  {
    if (*v5)
    {
      CFRelease(*v5);
      *v5 = 0;
    }
    if (*v6)
    {
      CFRelease(*v6);
      *v6 = 0;
    }
    if (*v7)
    {
      CFRelease(*v7);
      *v7 = 0;
    }
    v9 = *(_QWORD *)(a1 + 56);
    if (!v9)
      break;
    *(_QWORD *)(a1 + 80) = v9;
    *(_QWORD *)(a1 + 56) = 0;
    if (StreamFromURL)
      goto LABEL_40;
LABEL_16:
    if (*(_BYTE *)(a1 + 44))
      goto LABEL_45;
    v10 = *v5;
    if (*v5)
    {
      v23 = 0;
      StreamFromURL = IsReferenceMovie((uint64_t)v10, &v23);
      if (!StreamFromURL && v23)
      {
        v21 = 0;
        cf = 0;
        v11 = *(_QWORD *)(a1 + 192);
        *(_QWORD *)(a1 + 192) = v11 + 1;
        if (v11 < 5)
        {
          CMBaseObject = CMByteStreamGetCMBaseObject();
          v15 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
          if (v15)
            v15(CMBaseObject, v8, v2, &cf);
          StreamFromURL = ResolveReferenceMovieWithOptions(*(_QWORD *)(a1 + 80), (const __CFURL *)cf, *(_DWORD *)(a1 + 184), &v21);
          if (cf)
            CFRelease(cf);
          if (StreamFromURL)
          {
            v13 = 1;
            *(_BYTE *)(a1 + 44) = 1;
            *(_DWORD *)(a1 + 40) = StreamFromURL;
          }
          else
          {
            if (*v6)
            {
              CFRelease(*v6);
              *v6 = 0;
            }
            if (*(_QWORD *)a1)
              CFRelease(*(CFTypeRef *)a1);
            StreamFromURL = 0;
            *(_QWORD *)a1 = v21;
            v13 = *(unsigned __int8 *)(a1 + 44);
          }
          goto LABEL_33;
        }
        v12 = FigSignalErrorAt();
        StreamFromURL = 0;
        goto LABEL_32;
      }
      if (!mv_IsStreaming(*(const __CFURL **)a1, *(const __CFURL **)(a1 + 8), *(__CFHTTPMessage **)(a1 + 16)))
      {
        v12 = mv_ValidateFileFromByteStream(a1 + 64, 0);
        StreamFromURL = v12;
LABEL_32:
        v13 = 1;
        *(_BYTE *)(a1 + 44) = 1;
        *(_DWORD *)(a1 + 40) = v12;
        goto LABEL_33;
      }
      v13 = 1;
      *(_BYTE *)(a1 + 107) = 1;
      *(_WORD *)(a1 + 105) = 257;
      *(_BYTE *)(a1 + 44) = 1;
      *(_DWORD *)(a1 + 40) = 0;
    }
    else
    {
      v13 = 0;
      StreamFromURL = 0;
    }
LABEL_33:
    if (v13)
      goto LABEL_45;
  }
  v4 |= FigByteStreamFactoryTranslateReferenceSecurityOptions(*(_DWORD *)(a1 + 184));
  StreamFromURL = FigByteStreamFactoryCreateStreamFromURL(*(const __CFURL **)a1, v4, *(const void **)(a1 + 48), 0, 0, 0, (_QWORD *)(a1 + 80), (_QWORD *)(a1 + 8), (_QWORD *)(a1 + 16), 0);
  if (!StreamFromURL)
    goto LABEL_16;
LABEL_40:
  if (FigMediaValidatorIsNonByteStreamURLStreaming(StreamFromURL, *(const __CFURL **)a1, *(const __CFURL **)(a1 + 8), *(__CFHTTPMessage **)(a1 + 16), 0))
  {
    *(_BYTE *)(a1 + 107) = 1;
    goto LABEL_43;
  }
  if (StreamFromURL == -12662)
  {
LABEL_43:
    StreamFromURL = 0;
    *(_WORD *)(a1 + 105) = 257;
  }
  *(_BYTE *)(a1 + 44) = 1;
  *(_DWORD *)(a1 + 40) = StreamFromURL;
LABEL_45:
  v16 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 24);
  if (v16)
  {
    v17 = (*(_BYTE *)(a1 + 107) != 0) | (2 * (*(_BYTE *)(a1 + 104) != 0));
    v18 = *(unsigned int *)(a1 + 40);
    if (!(_DWORD)v18)
    {
      if (*(_BYTE *)(a1 + 105))
      {
        v18 = 0;
      }
      else
      {
        v18 = 4294954346;
        *(_DWORD *)(a1 + 40) = -12950;
      }
    }
    v16(a1, *(_QWORD *)(a1 + 32), v18, v17, *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96));
  }
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 208));
  *(_QWORD *)(a1 + 200) = 0;
  v19 = *(unsigned __int8 *)(a1 + 224);
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 208));
  if (v19)
    FigMediaValidatorRelease((CFTypeRef *)a1);
  return 0;
}

uint64_t FigSharedRemote_CopyDiskCacheParams(CFStringRef URLString, int64_t *a2, int64_t *a3, int64_t *a4, BOOL *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;

  if (remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce != -1)
    dispatch_once(&remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce, &__block_literal_global_22);
  v12 = remoteXPCPlayerClient_EnsureClientEstablished_err;
  if (!remoteXPCPlayerClient_EnsureClientEstablished_err)
  {
    v12 = 4294949788;
    if (fsr_SandboxRegisterDirectoryURLStringAndRetainSandboxRegistrationForever(URLString) != -17508)
    {
      v13 = FigXPCCreateBasicMessage();
      if ((_DWORD)v13
        || (xpc_dictionary_set_BOOL(0, "IsFigSharedMessage", 1), v13 = FigXPCMessageSetCFString(), (_DWORD)v13)
        || (v13 = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)v13)
        || a6 && (v13 = FigXPCMessageCopyCFURL(), (_DWORD)v13))
      {
        v12 = v13;
      }
      else
      {
        if (a2)
          *a2 = xpc_dictionary_get_int64(0, "UsedFileSize");
        if (a3)
          *a3 = xpc_dictionary_get_int64(0, "TargetSize");
        if (a4)
          *a4 = xpc_dictionary_get_int64(0, "TargetFileSize");
        v12 = 0;
        if (a5)
          *a5 = xpc_dictionary_get_BOOL(0, "AutomaticallyManagesSize");
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v12;
}

uint64_t FigSharedRemote_CheckOutOfDiskCache(CFStringRef URLString, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;

  if (!a2 || !a3 || !a4)
  {
    v8 = FigSignalErrorAt();
    goto LABEL_17;
  }
  if (remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce != -1)
    dispatch_once(&remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce, &__block_literal_global_22);
  v7 = remoteXPCPlayerClient_EnsureClientEstablished_err;
  if (!remoteXPCPlayerClient_EnsureClientEstablished_err)
  {
    v7 = 4294949788;
    if (fsr_SandboxRegisterDirectoryURLStringAndRetainSandboxRegistrationForever(URLString) != -17508)
    {
      v8 = FigXPCCreateBasicMessage();
      if (!(_DWORD)v8)
      {
        xpc_dictionary_set_BOOL(0, "IsFigSharedMessage", 1);
        v8 = FigXPCMessageSetCFString();
        if (!(_DWORD)v8)
        {
          v8 = FigXPCMessageSetCFString();
          if (!(_DWORD)v8)
          {
            v8 = FigXPCRemoteClientSendSyncMessageCreatingReply();
            if (!(_DWORD)v8)
            {
              v8 = FigXPCMessageCopyCFURL();
              if (!(_DWORD)v8)
              {
                v7 = FigXPCMessageCopyCFString();
                if (!(_DWORD)v7)
                {
                  *a3 = 0;
                  *a4 = 0;
                }
                goto LABEL_15;
              }
            }
          }
        }
      }
LABEL_17:
      v7 = v8;
    }
  }
LABEL_15:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v7;
}

uint64_t ResolveReferenceMovieWithOptions(uint64_t a1, const __CFURL *a2, int a3, CFURLRef *a4)
{
  uint64_t result;
  uint64_t v7;

  result = ResolveReferenceMovie(a1, a2, a4);
  if (!(_DWORD)result && a3 && *a4)
  {
    if (FigIsReferenceAllowedBySecurityPolicy())
    {
      return 0;
    }
    else
    {
      v7 = FigSignalErrorAt();
      CFRelease(*a4);
      *a4 = 0;
      return v7;
    }
  }
  return result;
}

uint64_t ResolveReferenceMovie(uint64_t a1, const __CFURL *a2, CFURLRef *a3)
{
  uint64_t BBuf;
  CFAllocatorRef *v6;
  void *v7;
  OpaqueCMBlockBuffer **v8;
  uint64_t v9;
  uint64_t v10;
  const __CFAllocator *v11;
  OpaqueCMBlockBuffer **v12;
  const __CFArray *v13;
  CFIndex Count;
  CFIndex v15;
  CFIndex v16;
  OpaqueCMBlockBuffer *ValueAtIndex;
  uint64_t DataPointer;
  char *v19;
  int v20;
  unsigned int v21;
  OpaqueCMBlockBuffer *v22;
  unsigned int v23;
  uint64_t v24;
  SCDynamicStoreRef v25;
  const __SCDynamicStore *v26;
  const __CFString *NetworkInterface;
  const __CFString *v28;
  const __CFDictionary *v29;
  const __CFDictionary *v30;
  CFTypeID v31;
  const __CFArray *Value;
  CFTypeID v33;
  CFIndex v34;
  const __CFString *v35;
  const __CFString *NetworkInterfaceEntity;
  const __CFString *v37;
  const __CFArray *v38;
  CFIndex v39;
  int HasPrefix;
  int v41;
  uint64_t v42;
  const void *v43;
  BOOL v44;
  OpaqueCMBlockBuffer *v45;
  uint64_t v46;
  signed int v47;
  size_t v48;
  void *v49;
  uint64_t v50;
  const __CFString *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  const __CFAllocator *v55;
  CFURLRef v56;
  const __CFString *v57;
  const __CFString *v58;
  const __CFString *v60;
  const __CFAllocator *v61;
  void *key;
  const __CFURL *v63;
  CFURLRef *v64;
  const __CFDictionary *v65;
  const __CFString *entity;
  CFIndex v67;
  const __CFArray *theArray;
  const __CFString *domain;
  unsigned int v70;
  void *v71[2];
  CFTypeRef cf;
  _OWORD v73[14];
  _BYTE totalLengthOut[9];
  char *dataPointerOut[5];

  dataPointerOut[2] = *(char **)MEMORY[0x1E0C80C00];
  memset(v73, 0, sizeof(v73));
  dataPointerOut[1] = (char *)0x726D72616D6F6F76;
  v71[1] = 0;
  cf = 0;
  v71[0] = 0;
  BBuf = FigAtomStreamInitWithByteStream();
  v6 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if ((_DWORD)BBuf
    || (BBuf = FigAtomStreamPositionViaAtomPath(), (_DWORD)BBuf)
    || (BBuf = FigAtomStreamReadCurrentAtomAndCreateBBuf(), (_DWORD)BBuf)
    || (BBuf = FigAtomStreamInitWithBBuf(), (_DWORD)BBuf)
    || (BBuf = ParseDescriptorAtoms((uint64_t)v73, (uint64_t)"armr", 1, (uint64_t)v71), (_DWORD)BBuf))
  {
    v52 = BBuf;
LABEL_99:
    v51 = 0;
    v49 = 0;
    goto LABEL_82;
  }
  v7 = v71[0];
  if (!v71[0])
  {
    v51 = 0;
    v52 = 0;
    v49 = 0;
    goto LABEL_84;
  }
  v63 = a2;
  v64 = a3;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = *v6;
  domain = (const __CFString *)*MEMORY[0x1E0CE8B30];
  key = (void *)*MEMORY[0x1E0CE8B38];
  entity = (const __CFString *)*MEMORY[0x1E0CE8B78];
  do
  {
    v12 = v8;
    v13 = (const __CFArray *)*((_QWORD *)v7 + 2);
    if (v13)
    {
      Count = CFArrayGetCount(v13);
      if (Count >= 1)
      {
        v15 = Count;
        v16 = 0;
        while (1)
        {
          ValueAtIndex = (OpaqueCMBlockBuffer *)CFArrayGetValueAtIndex(*((CFArrayRef *)v7 + 2), v16);
          *(_WORD *)totalLengthOut = 0;
          dataPointerOut[0] = 0;
          DataPointer = CMBlockBufferGetDataPointer(ValueAtIndex, 0, 0, 0, dataPointerOut);
          if ((_DWORD)DataPointer)
            goto LABEL_80;
          v19 = dataPointerOut[0];
          v20 = bswap32(*((_DWORD *)dataPointerOut[0] + 1));
          if (v20 <= 1836016232)
            break;
          switch(v20)
          {
            case 1836016233:
              MEMORY[0x19402F294](&sMobiGestaltInit, InitMobiGestaltOnce);
              v21 = sMobiGestaltValue;
              if (!sMobiGestaltValue)
                goto LABEL_34;
              goto LABEL_27;
            case 1836281974:
              v21 = 3;
              break;
            case 1903454573:
              v21 = 118489088;
              break;
            default:
              goto LABEL_69;
          }
LABEL_29:
          if (*((_WORD *)v19 + 8) == 256)
          {
            if ((bswap32(*((_DWORD *)v19 + 3)) & v21) != bswap32(*((_DWORD *)v19 + 2)))
              goto LABEL_69;
          }
          else if (*((_WORD *)v19 + 8) || bswap32(*((_DWORD *)v19 + 2)) > v21)
          {
            goto LABEL_69;
          }
LABEL_34:
          if (v15 == ++v16)
            goto LABEL_35;
        }
        switch(v20)
        {
          case 1635148576:
            CelestialGetSupportedAVCProfileAndLevel();
            v21 = (totalLengthOut[1] << 24) | (totalLengthOut[0] << 16);
            if (!v21)
              goto LABEL_34;
            break;
          case 1635148652:
            CelestialGetSupportedAVCProfileAndLevel();
            v21 = totalLengthOut[0];
            if (!totalLengthOut[0])
              goto LABEL_34;
            break;
          case 1635148656:
            CelestialGetSupportedAVCProfileAndLevel();
            v21 = totalLengthOut[1];
            if (!totalLengthOut[1])
              goto LABEL_34;
            break;
          default:
            goto LABEL_69;
        }
LABEL_27:
        v19 = dataPointerOut[0];
        goto LABEL_29;
      }
    }
LABEL_35:
    v22 = (OpaqueCMBlockBuffer *)*((_QWORD *)v7 + 1);
    if (v22)
    {
      dataPointerOut[0] = 0;
      DataPointer = CMBlockBufferGetDataPointer(v22, 0, 0, 0, dataPointerOut);
      if ((_DWORD)DataPointer)
      {
LABEL_80:
        v52 = DataPointer;
        v51 = 0;
        v49 = 0;
        goto LABEL_81;
      }
      v23 = *((_DWORD *)dataPointerOut[0] + 1);
      v24 = v10;
      if (!(_DWORD)v10)
      {
        v25 = SCDynamicStoreCreate(v11, CFSTR("com.apple.celestial"), 0, 0);
        if (v25)
        {
          v26 = v25;
          NetworkInterface = SCDynamicStoreKeyCreateNetworkInterface(v11, domain);
          if (NetworkInterface)
          {
            v28 = NetworkInterface;
            v29 = (const __CFDictionary *)SCDynamicStoreCopyValue(v26, NetworkInterface);
            if (v29)
            {
              v30 = v29;
              v31 = CFGetTypeID(v29);
              v65 = v30;
              if (v31 == CFDictionaryGetTypeID()
                && (Value = (const __CFArray *)CFDictionaryGetValue(v30, key)) != 0
                && (theArray = Value, v33 = CFGetTypeID(Value), v33 == CFArrayGetTypeID())
                && (v67 = CFArrayGetCount(theArray), v67 >= 1))
              {
                v34 = 0;
                v70 = 11200;
                v60 = v28;
                v61 = v11;
                do
                {
                  v35 = (const __CFString *)CFArrayGetValueAtIndex(theArray, v34);
                  if (!CFStringHasPrefix(v35, CFSTR("lo")))
                  {
                    NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(v11, domain, v35, entity);
                    if (NetworkInterfaceEntity)
                    {
                      v37 = NetworkInterfaceEntity;
                      v38 = SCDynamicStoreCopyKeyList(v26, NetworkInterfaceEntity);
                      CFRelease(v37);
                      if (v38)
                      {
                        v39 = CFArrayGetCount(v38);
                        CFRelease(v38);
                        if (v39 >= 1)
                        {
                          HasPrefix = CFStringHasPrefix(v35, CFSTR("en"));
                          v41 = v70;
                          if (HasPrefix)
                            v41 = 150000;
                          v70 = v41;
                        }
                      }
                      v28 = v60;
                      v11 = v61;
                    }
                    else
                    {
                      v11 = v61;
                    }
                  }
                  ++v34;
                }
                while (v67 != v34);
              }
              else
              {
                v70 = 11200;
              }
              CFRelease(v28);
              v43 = v65;
            }
            else
            {
              v70 = 11200;
              v43 = v28;
            }
            CFRelease(v43);
          }
          else
          {
            v70 = 11200;
          }
          CFRelease(v26);
          v24 = v70;
        }
        else
        {
          v24 = 11200;
        }
      }
      v42 = bswap32(v23);
      v10 = v24;
      v44 = v42 >= v9 && v24 >= v42;
      v8 = (OpaqueCMBlockBuffer **)v7;
      if (!v44)
      {
LABEL_69:
        v42 = v9;
        v8 = v12;
      }
    }
    else
    {
      v42 = v9;
      v8 = (OpaqueCMBlockBuffer **)v7;
    }
    v7 = *(void **)v7;
    v9 = v42;
  }
  while (v7);
  if (!v8)
  {
    v51 = 0;
    v49 = 0;
    v52 = 0;
LABEL_81:
    a2 = v63;
    a3 = v64;
    v6 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    goto LABEL_82;
  }
  v45 = v8[3];
  *(_QWORD *)&totalLengthOut[1] = 0;
  dataPointerOut[0] = 0;
  v46 = CMBlockBufferGetDataPointer(v45, 0, 0, (size_t *)&totalLengthOut[1], dataPointerOut);
  a2 = v63;
  a3 = v64;
  if ((_DWORD)v46)
  {
    v52 = v46;
LABEL_107:
    v6 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    goto LABEL_99;
  }
  v47 = bswap32(*((_DWORD *)dataPointerOut[0] + 2));
  if (*(_QWORD *)&totalLengthOut[1] - 12 < (unint64_t)v47)
  {
    v52 = FigSignalErrorAt();
    v49 = 0;
    v51 = 0;
    v6 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    if (!(_DWORD)v52)
      goto LABEL_76;
    goto LABEL_82;
  }
  v48 = v47;
  v49 = malloc_type_calloc(1uLL, v47 + 1, 0x914D6C55uLL);
  v50 = CMBlockBufferCopyDataBytes(v45, 0xCuLL, v48, v49);
  if ((_DWORD)v50)
  {
    v52 = v50;
    if (v49)
      free(v49);
    goto LABEL_107;
  }
  v6 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
LABEL_76:
  v51 = CFStringCreateWithCString(v11, (const char *)v49, 0x600u);
  if (v51)
    v52 = 0;
  else
    v52 = FigSignalErrorAt();
LABEL_82:
  v53 = v71[0];
  if (v71[0])
  {
    do
    {
      v54 = (_QWORD *)*v53;
      DisposeReferenceMovieAlternate(v53);
      v53 = v54;
    }
    while (v54);
  }
LABEL_84:
  if (cf)
    CFRelease(cf);
  if (v49)
  {
    free(v49);
    if ((_DWORD)v52)
    {
LABEL_95:
      if (v51)
        goto LABEL_96;
      return v52;
    }
  }
  else
  {
    v52 = FigSignalErrorAt();
    if ((_DWORD)v52)
      goto LABEL_95;
  }
  if (!a3
    || (v55 = *v6, v56 = CFURLCreateWithString(*v6, v51, a2), (*a3 = v56) != 0)
    || (v57 = CFURLCreateStringByAddingPercentEscapes(v55, v51, 0, 0, 0x8000100u)) == 0
    || (v58 = v57, *a3 = CFURLCreateWithString(v55, v57, a2), CFRelease(v58), *a3))
  {
    v52 = 0;
    goto LABEL_95;
  }
  v52 = FigSignalErrorAt();
  if (v51)
LABEL_96:
    CFRelease(v51);
  return v52;
}

uint64_t FigSharedRemote_CheckIntoDiskCache(CFStringRef URLString, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a2 && a3)
  {
    if (remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce != -1)
      dispatch_once(&remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce, &__block_literal_global_22);
    v4 = remoteXPCPlayerClient_EnsureClientEstablished_err;
    if (!remoteXPCPlayerClient_EnsureClientEstablished_err)
    {
      v4 = 4294949788;
      if (fsr_SandboxRegisterDirectoryURLStringAndRetainSandboxRegistrationForever(URLString) != -17508)
      {
        v5 = FigXPCCreateBasicMessage();
        if ((_DWORD)v5
          || (xpc_dictionary_set_BOOL(0, "IsFigSharedMessage", 1), v5 = FigXPCMessageSetCFString(), (_DWORD)v5)
          || (v5 = FigXPCMessageSetCFString(), (_DWORD)v5)
          || (v5 = FigXPCMessageSetCFURL(), (_DWORD)v5))
        {
          v4 = v5;
        }
        else
        {
          v4 = FigXPCRemoteClientSendSyncMessage();
        }
      }
    }
  }
  else
  {
    v4 = FigSignalErrorAt();
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t mv_IsStreaming(const __CFURL *a1, const __CFURL *a2, __CFHTTPMessage *a3)
{
  if (a2)
    a1 = a2;
  if (!a1)
    return 0;
  if (mv_IsMimeTypeInList(a3, (CFStringRef **)streamingMimeType, 0))
    return 1;
  return mv_IsExtensionInList(a1, a3, (CFStringRef **)streamingExtensions, 0);
}

uint64_t mv_IsMimeTypeInList(__CFHTTPMessage *a1, CFStringRef **a2, _BYTE *a3)
{
  const __CFString *v5;
  const __CFString *v6;
  uint64_t IsStringInCArrayList;

  if (!a1)
    return 0;
  v5 = FigCFHTTPCopyMimeTypeFromHTTPResponse(a1);
  if (!v5)
  {
    if (a3)
      *a3 = 0;
    return 0;
  }
  v6 = v5;
  if (a3)
    *a3 = 1;
  IsStringInCArrayList = mv_IsStringInCArrayList(v5, a2);
  CFRelease(v6);
  return IsStringInCArrayList;
}

uint64_t mv_IsExtensionInList(CFURLRef url, __CFHTTPMessage *a2, CFStringRef **a3, _BYTE *a4)
{
  CFStringRef v8;
  CFStringRef v9;
  int v10;
  uint64_t v11;
  const __CFString *v12;
  const __CFString *v13;
  const __CFArray *ArrayBySeparatingStrings;
  CFIndex Count;
  const __CFString *ValueAtIndex;
  int IsStringInCArrayList;
  int v18;
  CFTypeRef v19;
  CFTypeRef cf;

  if (a4)
  {
    *a4 = 0;
    v8 = CFURLCopyPathExtension(url);
    cf = v8;
    if (v8)
    {
      v9 = v8;
      *a4 = 1;
      goto LABEL_5;
    }
LABEL_7:
    if (CFURLCanBeDecomposed(url))
    {
      v12 = CFURLCopyHostName(url);
      if (v12)
      {
        v13 = v12;
        ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v12, CFSTR("."));
        CFRelease(v13);
        if (ArrayBySeparatingStrings)
        {
          Count = CFArrayGetCount(ArrayBySeparatingStrings);
          if (Count <= 1)
          {
            CFRelease(ArrayBySeparatingStrings);
          }
          else
          {
            ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, Count - 1);
            IsStringInCArrayList = mv_IsStringInCArrayList(ValueAtIndex, a3);
            v18 = IsStringInCArrayList;
            if (a4 && IsStringInCArrayList)
            {
              v11 = 1;
              *a4 = 1;
              v19 = ArrayBySeparatingStrings;
              goto LABEL_21;
            }
            CFRelease(ArrayBySeparatingStrings);
            if (v18)
              return 1;
          }
        }
      }
    }
LABEL_15:
    if (!a2 || FigCFHTTPCopyFilenameFromContentDisposition(a2, 1, (CFStringRef *)&cf))
      return 0;
    if (a4)
      *a4 = 1;
    v11 = mv_IsStringInCArrayList((CFStringRef)cf, a3);
    v19 = cf;
LABEL_21:
    CFRelease(v19);
    return v11;
  }
  v9 = CFURLCopyPathExtension(url);
  cf = v9;
  if (!v9)
    goto LABEL_7;
LABEL_5:
  v10 = mv_IsStringInCArrayList(v9, a3);
  CFRelease(v9);
  if (!v10)
    goto LABEL_15;
  return 1;
}

CFStringRef mv_CreateCFStringFrom4CC(unsigned int a1)
{
  unsigned int v1;
  int v2;
  UInt8 bytes[4];

  v1 = bswap32(a1);
  *(_DWORD *)bytes = v1;
  if ((v1 & 0x80) != 0)
    v2 = __maskrune(v1, 0x40000uLL);
  else
    v2 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v1 + 60) & 0x40000;
  if (!v2)
    return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("0x%02x%02x%02x%02x"), v1, BYTE1(v1), BYTE2(v1), HIBYTE(v1));
  if ((v1 & 0x8000) != 0)
  {
    if (!__maskrune(BYTE1(v1), 0x40000uLL))
      return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("0x%02x%02x%02x%02x"), v1, BYTE1(v1), BYTE2(v1), HIBYTE(v1));
  }
  else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * BYTE1(v1) + 60) & 0x40000) == 0)
  {
    return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("0x%02x%02x%02x%02x"), v1, BYTE1(v1), BYTE2(v1), HIBYTE(v1));
  }
  if ((v1 & 0x800000) != 0)
  {
    if (!__maskrune(BYTE2(v1), 0x40000uLL))
      return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("0x%02x%02x%02x%02x"), v1, BYTE1(v1), BYTE2(v1), HIBYTE(v1));
  }
  else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * BYTE2(v1) + 60) & 0x40000) == 0)
  {
    return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("0x%02x%02x%02x%02x"), v1, BYTE1(v1), BYTE2(v1), HIBYTE(v1));
  }
  if ((v1 & 0x80000000) != 0)
  {
    if (__maskrune(HIBYTE(v1), 0x40000uLL))
      return CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, 4, 0x600u, 0);
  }
  else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * HIBYTE(v1) + 60) & 0x40000) != 0)
  {
    return CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, 4, 0x600u, 0);
  }
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("0x%02x%02x%02x%02x"), v1, BYTE1(v1), BYTE2(v1), HIBYTE(v1));
}

uint64_t mv_GetTrackBoolean(uint64_t a1, uint64_t a2, uint64_t Value)
{
  uint64_t FigBaseObject;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t, CFBooleanRef *);
  uint64_t v7;
  BOOL v8;
  CFBooleanRef BOOLean;

  FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
  if (v6)
  {
    v7 = *MEMORY[0x1E0C9AE00];
    BOOLean = 0;
    if (v6(FigBaseObject, a2, v7, &BOOLean))
      v8 = 1;
    else
      v8 = BOOLean == 0;
    if (!v8)
    {
      Value = CFBooleanGetValue(BOOLean);
      CFRelease(BOOLean);
    }
  }
  return Value;
}

uint64_t mv_IsValueInArrayInDictionary(const __CFDictionary *a1, const void *a2, void *key, Boolean *a4, _BYTE *a5)
{
  const __CFArray *Value;
  const __CFArray *v9;
  CFTypeID v10;
  uint64_t Count;
  CFRange v13;

  if (a4 && a5)
  {
    *a5 = 0;
    *a4 = 0;
    Value = (const __CFArray *)CFDictionaryGetValue(a1, key);
    if (!Value)
      return 0;
    v9 = Value;
    v10 = CFGetTypeID(Value);
    if (v10 == CFArrayGetTypeID())
    {
      *a5 = 1;
      Count = CFArrayGetCount(v9);
      if (Count >= 1)
      {
        v13.length = Count;
        v13.location = 0;
        *a4 = CFArrayContainsValue(v9, v13, a2);
      }
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t mv_GetCodecProperty(const __CFDictionary *a1, const void *a2, void *key, const void *a4, uint64_t a5, const void **a6)
{
  const __CFDictionary *Value;
  const __CFDictionary *v12;
  CFTypeID v13;
  const __CFDictionary *v14;
  const __CFDictionary *v15;
  CFTypeID v16;
  const void *v17;

  if (!a6)
    return FigSignalErrorAt();
  *a6 = 0;
  Value = (const __CFDictionary *)CFDictionaryGetValue(a1, key);
  if (Value)
  {
    v12 = Value;
    v13 = CFGetTypeID(Value);
    if (v13 != CFDictionaryGetTypeID())
      return FigSignalErrorAt();
    v14 = (const __CFDictionary *)CFDictionaryGetValue(v12, a2);
    if (v14)
    {
      v15 = v14;
      v16 = CFGetTypeID(v14);
      if (v16 != CFDictionaryGetTypeID())
        return FigSignalErrorAt();
      v17 = CFDictionaryGetValue(v15, a4);
      *a6 = v17;
      if (v17)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  v17 = *a6;
  if (!*a6)
  {
LABEL_9:
    v17 = CFDictionaryGetValue(a1, a4);
    *a6 = v17;
    if (!v17)
      return 0;
  }
LABEL_10:
  if (CFGetTypeID(v17) == a5)
    return 0;
  *a6 = 0;
  return FigSignalErrorAt();
}

uint64_t FigMediaValidatorCopyByteStream(uint64_t a1, _QWORD *a2)
{
  const void *v2;
  CFTypeRef v4;
  uint64_t result;

  if (!a1)
    return 4294954511;
  if (!*(_BYTE *)(a1 + 44))
    return 4294954513;
  v2 = *(const void **)(a1 + 80);
  if (!v2)
    return 4294954513;
  v4 = CFRetain(v2);
  result = 0;
  *a2 = v4;
  return result;
}

uint64_t FigMediaValidatorCopyResolvedURL(uint64_t a1, _QWORD *a2)
{
  CFTypeRef v3;
  uint64_t result;

  if (!a1)
    return 4294954511;
  if (!*(_BYTE *)(a1 + 44))
    return 4294954513;
  v3 = *(CFTypeRef *)(a1 + 8);
  if (v3 || (v3 = *(CFTypeRef *)a1) != 0)
    v3 = CFRetain(v3);
  result = 0;
  *a2 = v3;
  return result;
}

uint64_t FigRemote_SetSerializedCookies(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v6;
  CFTypeRef v7;
  uint64_t (*v8)(uint64_t, uint64_t, CFTypeRef);
  uint64_t v9;
  uint64_t v10;
  CFTypeRef cf;

  cf = 0;
  if (a2)
  {
    MEMORY[0x19402EA9C](a3, a4, *MEMORY[0x1E0C9AE00], &cf);
    if (!cf)
      return FigSignalErrorAt();
    v6 = CFGetTypeID(cf);
    if (v6 == CFArrayGetTypeID())
    {
      v7 = cf;
      v8 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (!v8)
      {
        v10 = 4294954514;
LABEL_8:
        if (cf)
          CFRelease(cf);
        return v10;
      }
      v9 = v8(a1, a2, v7);
    }
    else
    {
      v9 = FigSignalErrorAt();
    }
    v10 = v9;
    goto LABEL_8;
  }
  return FigSignalErrorAt();
}

uint64_t FigMediaValidatorRelease(CFTypeRef *a1)
{
  uint64_t CMBaseObject;
  uint64_t v3;
  void (*v4)(uint64_t);
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef v8;
  CFTypeRef v9;
  CFTypeRef v10;
  CFTypeRef v11;

  if (!a1)
    return 4294954511;
  if (a1[10])
  {
    CMBaseObject = CMByteStreamGetCMBaseObject();
    if (CMBaseObject)
    {
      v3 = CMBaseObject;
      v4 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v4)
        v4(v3);
    }
  }
  if (!a1[26])
    goto LABEL_11;
  MEMORY[0x19402EA0C]();
  a1[3] = 0;
  if (!a1[25])
  {
    MEMORY[0x19402EA24](a1[26]);
    FigSimpleMutexDestroy();
    a1[26] = 0;
LABEL_11:
    v6 = a1[22];
    if (v6)
    {
      CFRelease(v6);
      a1[22] = 0;
    }
    v7 = a1[10];
    if (v7)
    {
      CFRelease(v7);
      a1[10] = 0;
    }
    if (*a1)
    {
      CFRelease(*a1);
      *a1 = 0;
    }
    v8 = a1[1];
    if (v8)
    {
      CFRelease(v8);
      a1[1] = 0;
    }
    v9 = a1[2];
    if (v9)
    {
      CFRelease(v9);
      a1[2] = 0;
    }
    v10 = a1[6];
    if (v10)
    {
      CFRelease(v10);
      a1[6] = 0;
    }
    v11 = a1[7];
    if (v11)
    {
      CFRelease(v11);
      a1[7] = 0;
    }
    if (a1[27])
      FigSemaphoreDestroy();
    free(a1);
    return 0;
  }
  *((_BYTE *)a1 + 224) = 1;
  FigThreadAbort();
  MEMORY[0x19402EA24](a1[26]);
  return 0;
}

uint64_t fpm_streamPausedCallback()
{
  __CFData *Owner;
  UInt8 *MutableBytePtr;

  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    Owner = (__CFData *)FigRetainProxyGetOwner();
    MutableBytePtr = CFDataGetMutableBytePtr(Owner);
    MEMORY[0x19402EA0C](*((_QWORD *)MutableBytePtr + 6));
    *((_WORD *)MutableBytePtr + 157) = 257;
    fpm_ensureUpdatePrimed((uint64_t)MutableBytePtr);
    MEMORY[0x19402EA24](*((_QWORD *)MutableBytePtr + 6));
  }
  return FigRetainProxyUnlockMutex();
}

void itemfig_BossBecameIdle(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v9;
  const void *v10;
  dispatch_queue_t *v11;
  dispatch_queue_t *v12;
  NSObject *v13;
  const __CFNumber *Value;
  const __CFNumber *v15;
  CFTypeID TypeID;
  int v17;
  __CFDictionary *FailedNotificationPayload;
  __CFError *v19;
  NSObject *v20;
  int valuePtr[32];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2AC8 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(_BYTE *)DerivedStorage)
  {
    v9 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v9)
    {
      v10 = (const void *)v9;
      v11 = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
      if (*(_BYTE *)v11)
        goto LABEL_18;
      if (!a5)
        goto LABEL_9;
      v12 = v11;
      if (CFDictionaryGetValue(a5, CFSTR("ControlToken")) != *(const void **)(DerivedStorage + 512))
      {
        if (dword_1EE2A2AC8 >= 2)
        {
LABEL_9:
          v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
LABEL_17:
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
LABEL_18:
        CFRelease(v10);
        return;
      }
      Value = (const __CFNumber *)CFDictionaryGetValue(a5, CFSTR("OSStatus"));
      if (Value)
      {
        v15 = Value;
        TypeID = CFNumberGetTypeID();
        if (TypeID == CFGetTypeID(v15))
        {
          valuePtr[0] = 0;
          CFNumberGetValue(v15, kCFNumberSInt32Type, valuePtr);
          v17 = valuePtr[0];
          if (valuePtr[0])
          {
            *(_BYTE *)(DerivedStorage + 994) = 1;
            if (v17 == 561606517)
            {
              FailedNotificationPayload = itemfig_createFailedNotificationPayload(0, v15);
            }
            else
            {
              if (v17 != -12551)
                goto LABEL_23;
              FailedNotificationPayload = itemfig_createFailedNotificationPayloadWithContentStream(*(CFTypeRef *)(DerivedStorage + 128), v15);
              v19 = (__CFError *)CFDictionaryGetValue(FailedNotificationPayload, CFSTR("CFError"));
              itemfig_reportingAgentReportError((uint64_t)a2, v19, CFSTR("CoreMediaErrorDomain"), CFSTR("Failed to play to end due to sample out of range"), valuePtr[0]);
            }
            CMNotificationCenterGetDefaultLocalCenter();
            FigDispatchAsyncPostNotification();
            if (FailedNotificationPayload)
              CFRelease(FailedNotificationPayload);
          }
        }
      }
LABEL_23:
      if ((*(_DWORD *)(DerivedStorage + 200) & 0x1D) != 1)
      {
        if (a2)
          CFRetain(a2);
        dispatch_async_f(v12[12], a2, (dispatch_function_t)itemfig_BossBecameIdle_prepareNextItemForTransition_f);
        goto LABEL_18;
      }
      if (dword_1EE2A2AC8)
      {
        v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
        goto LABEL_17;
      }
      goto LABEL_18;
    }
  }
}

void itemfig_ReachedEnd(uint64_t a1, const void *a2)
{
  _BYTE *DerivedStorage;
  _BYTE *v4;
  uint64_t v5;
  const void *v6;
  dispatch_queue_t *v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  dispatch_queue_t *v9;
  _QWORD *v10;
  _QWORD *v11;
  CFTypeRef v12;
  const void *Timebase;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    v4 = DerivedStorage;
    v5 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v5)
    {
      v6 = (const void *)v5;
      v7 = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
      if (!*(_BYTE *)v7)
      {
        if (v4[1312])
        {
          if (dword_1EE2A2AC8 >= 2)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
        else
        {
          v9 = v7;
          v10 = malloc_type_calloc(1uLL, 0x18uLL, 0x20040960023A9uLL);
          if (v10)
          {
            v11 = v10;
            *v10 = CFRetain(v6);
            if (a2)
              v12 = CFRetain(a2);
            else
              v12 = 0;
            v11[1] = v12;
            Timebase = (const void *)FigPlaybackBossGetTimebase(*((_QWORD *)v4 + 44));
            if (Timebase)
              Timebase = CFRetain(Timebase);
            v11[2] = Timebase;
            dispatch_async_f(v9[12], v11, (dispatch_function_t)itemfig_ReachedEnd_ReachedEndGuts_f);
          }
        }
      }
      CFRelease(v6);
    }
  }
}

void itemfig_ReachedEndGuts(const void *a1)
{
  _BYTE *DerivedStorage;
  _BYTE *v3;
  uint64_t v4;
  const void *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  CFIndex Count;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v11;
  CFIndex v12;
  NSObject *v13;
  CFTypeRef cf[25];

  cf[24] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  if (!*DerivedStorage)
  {
    v3 = DerivedStorage;
    v4 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v4)
    {
      v5 = (const void *)v4;
      v6 = (_BYTE *)CMBaseObjectGetDerivedStorage();
      if (*v6)
      {
        CFRelease(v5);
      }
      else
      {
        v7 = v6;
        CFRetain(a1);
        if (!FigDeferredTransactionCreate(*MEMORY[0x1E0C9AE00], (uint64_t *)cf))
        {
          MEMORY[0x19402EA0C](*((_QWORD *)v7 + 62));
          if (*((_QWORD *)v3 + 44))
          {
            itemfig_UpdateLastPlayedOutOrLastPlayedDateIfNecessary((uint64_t)a1);
            v8 = *((unsigned int *)v7 + 194);
            Count = CFArrayGetCount(*((CFArrayRef *)v7 + 63));
            if (FigPlaybackGetEffectiveActionAtEnd(v8, Count) == 1)
            {
              if (dword_1EE2A2AC8)
              {
                os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              playerfig_pauseForInternalReason(v5, 1);
            }
            else
            {
              v11 = *((unsigned int *)v7 + 194);
              v12 = CFArrayGetCount(*((CFArrayRef *)v7 + 63));
              if (FigPlaybackGetEffectiveActionAtEnd(v11, v12))
              {
                if (dword_1EE2A2AC8)
                {
                  v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
              }
              else
              {
                itemfig_advanceToNextItem((uint64_t)a1, cf[0]);
              }
            }
          }
          MEMORY[0x19402EA24](*((_QWORD *)v7 + 62));
        }
        FigDeferredTransactionCommit((uint64_t)cf[0]);
        if (cf[0])
          CFRelease(cf[0]);
        playerfig_updatePlaybackStateAndBossRate(v5, 7, 0);
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        CFRelease(a1);
        CFRelease(v5);
      }
    }
  }
}

uint64_t playerasync_Invalidate(void *a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigAtomicCompareAndSwap32())
  {
    CFRetain(a1);
    dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 56), a1, (dispatch_function_t)playerasync_InvalidateOnQueue);
  }
  return 0;
}

void playerasync_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  NSObject *v5;
  const void *v6;
  const void *v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 5))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    *(_BYTE *)(DerivedStorage + 5) = 0;
  }
  v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 24);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v3 = *(const void **)(DerivedStorage + 32);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  FigSimpleMutexDestroy();
  v4 = *(const void **)(DerivedStorage + 48);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  v5 = *(NSObject **)(DerivedStorage + 56);
  if (v5)
  {
    dispatch_release(v5);
    *(_QWORD *)(DerivedStorage + 56) = 0;
  }
  FigSimpleMutexDestroy();
  FigSimpleMutexDestroy();
  FigSimpleMutexDestroy();
  v6 = *(const void **)(DerivedStorage + 88);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 88) = 0;
  }
  FigConditionVariableDestroy();
  FigSimpleMutexDestroy();
  v7 = *(const void **)(DerivedStorage + 96);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 96) = 0;
  }
}

uint64_t FigSampleBufferProcessorGetClassID()
{
  MEMORY[0x19402F294](&FigSampleBufferProcessorGetClassID_sRegisterFigSampleBufferProcessorTypeOnce, RegisterFigSampleBufferProcessorType);
  return sFigSampleBufferProcessorClassID;
}

uint64_t RegisterFigSampleBufferProcessorType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigSampleBufferProcessorGetTypeID()
{
  MEMORY[0x19402F294](&FigSampleBufferProcessorGetClassID_sRegisterFigSampleBufferProcessorTypeOnce, RegisterFigSampleBufferProcessorType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigMovieFormatWriterCreateWithByteStream(const __CFAllocator *a1, const void *a2, const __CFDictionary *a3, _QWORD *a4)
{
  uint64_t v6;
  CFTypeRef v7;
  uint64_t DerivedStorage;
  uint64_t CMBaseObject;
  unsigned int (*v10)(uint64_t, _QWORD, _QWORD, CFURLRef *);
  int IsFileOnExternalStorageDevice;
  CFURLRef v12;
  CFURLRef v13;
  uint64_t v14;
  CFTypeRef cf;
  CFURLRef relativeURL;

  cf = 0;
  if (a2 && a4)
  {
    v6 = createFigMovieFormatWriterObject(a1, 0, a3, &cf);
    v7 = cf;
    if ((_DWORD)v6)
    {
      v14 = v6;
      if (cf)
        CFRelease(cf);
      return v14;
    }
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    relativeURL = 0;
    CMBaseObject = CMByteStreamGetCMBaseObject();
    v10 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, CFURLRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
    if (v10 && !v10(CMBaseObject, *MEMORY[0x1E0CA2098], *MEMORY[0x1E0C9AE00], &relativeURL))
    {
      v12 = CFURLCopyAbsoluteURL(relativeURL);
      if (v12)
      {
        v13 = v12;
        IsFileOnExternalStorageDevice = FigFileIsFileOnExternalStorageDevice();
        CFRelease(v13);
        goto LABEL_9;
      }
      FigSignalErrorAt();
    }
    IsFileOnExternalStorageDevice = 0;
LABEL_9:
    if (relativeURL)
      CFRelease(relativeURL);
    *(_BYTE *)(DerivedStorage + 17) = IsFileOnExternalStorageDevice != 0;
    v14 = 0;
    *(_QWORD *)(DerivedStorage + 8) = CFRetain(a2);
    *a4 = v7;
    return v14;
  }
  return FigSignalErrorAt();
}

uint64_t FigFormatWriterGetClassID()
{
  MEMORY[0x19402F294](&FigFormatWriterGetClassID_sRegisterFigFormatWriterTypeOnce, RegisterFigFormatWriterType);
  return sFigFormatWriterClassID;
}

uint64_t RegisterFigFormatWriterType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t figMovieWriter_SetProperty(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t *v7;
  uint64_t v8;
  CFTypeID v10;
  uint64_t v11;
  CFTypeID v12;
  __int128 v13;
  CMTimeEpoch v14;
  char v15;
  CFTypeID v16;
  CFTypeID v17;
  CFTypeID v18;
  CFTypeID TypeID;
  CFTypeID v20;
  CMTimeFlags v21;
  CMTimeEpoch v22;
  uint64_t v23;
  CFTypeID v24;
  CFTypeID v25;
  uint64_t FigMatrixFromArray;
  CFTypeID v27;
  CFTypeID v28;
  CFTypeID v29;
  CFTypeID v30;
  CFTypeID v31;
  CFTypeID v32;
  CFTypeID v33;
  CFTypeID v34;
  CFTypeID v35;
  const void *v36;
  CFTypeID v37;
  CFTypeID v38;
  const void *v39;
  const void *v40;
  CFTypeID v41;
  const void *v42;
  CFTypeID v43;
  CFTypeID v44;
  CFTypeID v45;
  CFTypeID v46;
  CFTypeID v47;
  CFTypeID v48;
  CFTypeID v49;
  __int128 v50;
  __int128 v51;
  int v52;
  CMTime time1;
  CFTypeRef cf;
  CMTime time2;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = *(uint64_t **)(DerivedStorage + 728);
  cf = 0;
  if (!a2)
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 335))
    return FigSignalErrorAt();
  if (CFEqual(CFSTR("MovieTimeScale"), a2))
  {
    LODWORD(v50) = 0;
    if (a3)
    {
      v10 = CFGetTypeID(a3);
      if (v10 == CFNumberGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &v50);
        v11 = MovieInformationSetMovieTimeScale((uint64_t)v7, v50);
        if (!(_DWORD)v11)
          *(_DWORD *)(v8 + 20) = v50;
        goto LABEL_179;
      }
    }
    goto LABEL_177;
  }
  if (CFEqual(CFSTR("ByteCountToReserveForHeader"), a2))
  {
    if (a3)
    {
      v12 = CFGetTypeID(a3);
      if (v12 == CFNumberGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, (void *)(v8 + 268));
LABEL_13:
        v11 = 0;
        goto LABEL_179;
      }
    }
    goto LABEL_177;
  }
  if (CFEqual(CFSTR("InterleavingPeriod"), a2))
  {
    if (a3)
    {
      v50 = 0uLL;
      *(_QWORD *)&v51 = 0;
      CMTimeMakeFromDictionary((CMTime *)&v50, (CFDictionaryRef)a3);
      if ((BYTE12(v50) & 0x1D) == 1)
      {
        v11 = 0;
        *(_OWORD *)(v8 + 48) = v50;
        *(_QWORD *)(v8 + 64) = v51;
        goto LABEL_179;
      }
    }
    goto LABEL_177;
  }
  if (CFEqual(CFSTR("InterleavingOverflowThreshold"), a2))
  {
    if (a3)
    {
      v50 = 0uLL;
      *(_QWORD *)&v51 = 0;
      CMTimeMakeFromDictionary((CMTime *)&v50, (CFDictionaryRef)a3);
      if ((BYTE12(v50) & 0x1D) == 1)
      {
        v11 = 0;
        *(_OWORD *)(v8 + 72) = v50;
        *(_QWORD *)(v8 + 88) = v51;
        goto LABEL_179;
      }
    }
    goto LABEL_177;
  }
  if (!CFEqual(CFSTR("MovieFragmentCheckpointInterval"), a2))
  {
    if (CFEqual(CFSTR("InitialMovieFragmentCheckpoint"), a2))
    {
      v50 = 0uLL;
      *(_QWORD *)&v51 = 0;
      CMTimeMakeFromDictionary((CMTime *)&v50, (CFDictionaryRef)a3);
      if ((BYTE12(v50) & 1) == 0
        || (BYTE12(v50) & 0x1D) == 1
        && (time1 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68],
            *(_OWORD *)&time2.value = v50,
            time2.epoch = v51,
            CMTimeCompare(&time1, &time2) < 0))
      {
        v11 = 0;
        *(_OWORD *)(v8 + 120) = v50;
        *(_QWORD *)(v8 + 136) = v51;
        goto LABEL_179;
      }
      goto LABEL_177;
    }
    if (CFEqual(CFSTR("PreferredOutputSegmentInterval"), a2))
    {
      if (*(_BYTE *)(v8 + 384) == 1)
      {
        v50 = 0uLL;
        *(_QWORD *)&v51 = 0;
        CMTimeMakeFromDictionary((CMTime *)&v50, (CFDictionaryRef)a3);
        v15 = BYTE12(v50);
        if ((~HIDWORD(v50) & 0x11) != 0)
        {
          if ((BYTE12(v50) & 0x1D) != 1)
            goto LABEL_177;
          time1 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
          *(_OWORD *)&time2.value = v50;
          time2.epoch = v51;
          if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
            goto LABEL_177;
          v15 = BYTE12(v50);
        }
        *(_OWORD *)(v8 + 196) = v50;
        *(_QWORD *)(v8 + 212) = v51;
        if ((v15 & 0x1D) == 1
          && (time1 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68],
              *(_OWORD *)&time2.value = v50,
              time2.epoch = v51,
              CMTimeCompare(&time1, &time2) < 0))
        {
          v11 = 0;
          *(_BYTE *)(v8 + 168) = 1;
        }
        else
        {
          v11 = 0;
          *(_BYTE *)(v8 + 168) = 0;
        }
        goto LABEL_179;
      }
LABEL_177:
      FigMatrixFromArray = FigSignalErrorAt();
      goto LABEL_178;
    }
    if (CFEqual(CFSTR("InitialSegmentStartTime"), a2))
    {
      if (*(_BYTE *)(v8 + 384) == 1)
      {
        v50 = 0uLL;
        *(_QWORD *)&v51 = 0;
        CMTimeMakeFromDictionary((CMTime *)&v50, (CFDictionaryRef)a3);
        if ((BYTE12(v50) & 0x1D) == 1)
        {
          v11 = 0;
          *(_OWORD *)(v8 + 172) = v50;
          *(_QWORD *)(v8 + 188) = v51;
          goto LABEL_179;
        }
      }
      goto LABEL_177;
    }
    if (CFEqual(CFSTR("NextMovieFragmentSequenceNumber"), a2))
    {
      if (a3)
      {
        v16 = CFGetTypeID(a3);
        if (v16 == CFNumberGetTypeID())
        {
          LODWORD(v50) = 0;
          CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &v50);
          if ((int)v50 > 0)
          {
            v11 = 0;
            *(_DWORD *)(v8 + 376) = v50;
            goto LABEL_179;
          }
        }
      }
      goto LABEL_177;
    }
    if (CFEqual(CFSTR("ProduceCombinableMovieFragments"), a2))
    {
      if (a3)
      {
        v17 = CFGetTypeID(a3);
        if (v17 == CFBooleanGetTypeID())
        {
          v11 = 0;
          *(_BYTE *)(v8 + 533) = CFBooleanGetValue((CFBooleanRef)a3);
          goto LABEL_179;
        }
      }
      goto LABEL_177;
    }
    if (CFEqual(CFSTR("AllowNonSyncSampleAtBeginningOfSegment"), a2))
    {
      if (a3)
      {
        v18 = CFGetTypeID(a3);
        if (v18 == CFBooleanGetTypeID())
        {
          v11 = 0;
          *(_BYTE *)(v8 + 534) = CFBooleanGetValue((CFBooleanRef)a3);
          goto LABEL_179;
        }
      }
      goto LABEL_177;
    }
    if (CFEqual(CFSTR("ConsolidateMovieFragments"), a2))
    {
      if (a3)
      {
        TypeID = CFBooleanGetTypeID();
        if (TypeID == CFGetTypeID(a3))
        {
          v11 = 0;
          *(_BYTE *)(v8 + 531) = CFBooleanGetValue((CFBooleanRef)a3);
          goto LABEL_179;
        }
      }
      goto LABEL_177;
    }
    if (CFEqual(CFSTR("MovieExtendsHeaderFragmentDuration"), a2))
    {
      if (a3)
      {
        v20 = CFGetTypeID(a3);
        if (v20 == CFDictionaryGetTypeID())
        {
          CMTimeMakeFromDictionary((CMTime *)&v50, (CFDictionaryRef)a3);
          time2.value = v50;
          v21 = HIDWORD(v50);
          time2.timescale = DWORD2(v50);
          v22 = v51;
          if ((BYTE12(v50) & 1) == 0
            || (BYTE12(v50) & 0x1D) == 1
            && (v50 = *MEMORY[0x1E0CA2E68],
                *(_QWORD *)&v51 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16),
                time1.value = time2.value,
                time1.timescale = time2.timescale,
                time1.flags = v21,
                time1.epoch = v22,
                CMTimeCompare((CMTime *)&v50, &time1) < 1))
          {
            v11 = 0;
            *(_QWORD *)(v8 + 244) = time2.value;
            v23 = v8 + 244;
            *(_DWORD *)(v23 + 8) = time2.timescale;
            *(_DWORD *)(v23 + 12) = v21;
            *(_QWORD *)(v23 + 16) = v22;
            goto LABEL_179;
          }
        }
      }
      goto LABEL_177;
    }
    if (CFEqual(CFSTR("WriteNoSamplesInMovieHeader"), a2))
    {
      if (a3)
      {
        v24 = CFGetTypeID(a3);
        if (v24 == CFBooleanGetTypeID())
        {
          v11 = 0;
          *(_BYTE *)(v8 + 332) = CFBooleanGetValue((CFBooleanRef)a3);
          goto LABEL_179;
        }
      }
      goto LABEL_177;
    }
    if (CFEqual(CFSTR("WriteBaseMediaDecodeTimeInTrackFragments"), a2))
    {
      if (a3)
      {
        v25 = CFGetTypeID(a3);
        if (v25 == CFBooleanGetTypeID())
        {
          v11 = 0;
          *(_BYTE *)(v8 + 333) = CFBooleanGetValue((CFBooleanRef)a3);
          goto LABEL_179;
        }
      }
      goto LABEL_177;
    }
    if (CFEqual(CFSTR("FileTypeMajorBrand"), a2))
    {
      FigMatrixFromArray = MovieSampleDataWriterSetMajorBrand(*(_QWORD *)(v8 + 744), a3);
      goto LABEL_178;
    }
    if (CFEqual(CFSTR("FileTypeMinorVersion"), a2))
    {
      FigMatrixFromArray = MovieSampleDataWriterSetMinorVersion(*(_QWORD *)(v8 + 744), a3);
      goto LABEL_178;
    }
    if (CFEqual(CFSTR("FileTypeCompatibleBrands"), a2))
    {
      FigMatrixFromArray = MovieSampleDataWriterSetCompatibleBrands(*(_QWORD *)(v8 + 744), a3);
      goto LABEL_178;
    }
    if (CFEqual(CFSTR("EnableWriting"), a2))
    {
      if (a3)
      {
        v27 = CFBooleanGetTypeID();
        if (v27 == CFGetTypeID(a3))
        {
          v11 = 0;
          *(_BYTE *)(v8 + 334) = CFBooleanGetValue((CFBooleanRef)a3);
          goto LABEL_179;
        }
      }
      goto LABEL_177;
    }
    if (CFEqual(CFSTR("EnableExtendedLanguageTag"), a2))
    {
      if (a3)
      {
        v28 = CFBooleanGetTypeID();
        if (v28 == CFGetTypeID(a3))
        {
          v11 = 0;
          *(_BYTE *)(v8 + 328) = CFBooleanGetValue((CFBooleanRef)a3);
          goto LABEL_179;
        }
      }
      goto LABEL_177;
    }
    if (CFEqual(CFSTR("TrackReference"), a2))
    {
      if (a3)
      {
        v29 = CFGetTypeID(a3);
        if (v29 != CFDictionaryGetTypeID())
          goto LABEL_177;
      }
      FigMatrixFromArray = setTrackReferences(v7, (const __CFDictionary *)a3);
      goto LABEL_178;
    }
    if (CFEqual(CFSTR("MovieMatrix"), a2))
    {
      v52 = 0;
      v50 = 0u;
      v51 = 0u;
      if (a3)
      {
        v30 = CFGetTypeID(a3);
        if (v30 == CFArrayGetTypeID())
        {
          FigMatrixFromArray = getFigMatrixFromArray((const __CFArray *)a3, (uint64_t)&v50);
          if (!(_DWORD)FigMatrixFromArray)
            FigMatrixFromArray = MovieInformationSetMovieMatrix((uint64_t)v7, (uint64_t)&v50);
          goto LABEL_178;
        }
      }
      goto LABEL_177;
    }
    if (CFEqual(CFSTR("PreferredRate"), a2))
    {
      LODWORD(v50) = 0;
      if (!a3)
        goto LABEL_177;
      v31 = CFGetTypeID(a3);
      if (v31 != CFNumberGetTypeID())
        goto LABEL_177;
      CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, &v50);
      FigMatrixFromArray = MovieInformationSetPreferredRate((uint64_t)v7, *(float *)&v50);
      goto LABEL_178;
    }
    if (CFEqual(CFSTR("PreferredVolume"), a2))
    {
      LODWORD(v50) = 0;
      if (!a3)
        goto LABEL_177;
      v32 = CFGetTypeID(a3);
      if (v32 != CFNumberGetTypeID())
        goto LABEL_177;
      CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, &v50);
      FigMatrixFromArray = MovieInformationSetPreferredVolume((uint64_t)v7, *(float *)&v50);
      goto LABEL_178;
    }
    if (CFEqual(CFSTR("iTunesGaplessInfo"), a2))
    {
      if (!a3)
      {
        v11 = *(_QWORD *)(v8 + 688);
        *(_QWORD *)(v8 + 688) = 0;
        if (!v11)
          goto LABEL_179;
        goto LABEL_124;
      }
      v33 = CFGetTypeID(a3);
      if (v33 != CFDictionaryGetTypeID())
        goto LABEL_177;
      v11 = *(_QWORD *)(v8 + 688);
      *(_QWORD *)(v8 + 688) = a3;
    }
    else
    {
      if (CFEqual(CFSTR("MetadataToTransfer"), a2))
      {
        if (a3)
        {
          v34 = CFDictionaryGetTypeID();
          if (v34 != CFGetTypeID(a3))
          {
            v35 = CFArrayGetTypeID();
            if (v35 != CFGetTypeID(a3))
              goto LABEL_13;
          }
          v36 = *(const void **)(v8 + 296);
          *(_QWORD *)(v8 + 296) = a3;
          CFRetain(a3);
        }
        else
        {
          v36 = *(const void **)(v8 + 296);
          *(_QWORD *)(v8 + 296) = 0;
        }
        if (v36)
          CFRelease(v36);
        v40 = *(const void **)(v8 + 304);
        if (v40)
        {
          CFRelease(v40);
          v11 = 0;
          *(_QWORD *)(v8 + 304) = 0;
          goto LABEL_179;
        }
        goto LABEL_13;
      }
      if (CFEqual(CFSTR("MetadataToWrite"), a2))
      {
        if (a3)
        {
          v37 = CFDictionaryGetTypeID();
          if (v37 != CFGetTypeID(a3))
          {
            v38 = CFArrayGetTypeID();
            if (v38 != CFGetTypeID(a3))
              goto LABEL_13;
          }
          v39 = *(const void **)(v8 + 304);
          *(_QWORD *)(v8 + 304) = a3;
          CFRetain(a3);
        }
        else
        {
          v39 = *(const void **)(v8 + 304);
          *(_QWORD *)(v8 + 304) = 0;
        }
        if (v39)
          CFRelease(v39);
        v42 = *(const void **)(v8 + 296);
        if (v42)
        {
          CFRelease(v42);
          v11 = 0;
          *(_QWORD *)(v8 + 296) = 0;
          goto LABEL_179;
        }
        goto LABEL_13;
      }
      if (!CFEqual(CFSTR("MetadataWhitelist"), a2))
      {
        if (CFEqual(CFSTR("ClientPID"), a2))
        {
          if (!a3)
            goto LABEL_177;
          v43 = CFNumberGetTypeID();
          if (v43 != CFGetTypeID(a3))
            goto LABEL_177;
          CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, (void *)(v8 + 536));
          if (!*(_QWORD *)(v8 + 552))
            goto LABEL_13;
          FigMatrixFromArray = FigThreadSetProperty();
        }
        else if (CFEqual(CFSTR("ThreadPriority"), a2))
        {
          if (!a3)
            goto LABEL_177;
          v44 = CFGetTypeID(a3);
          if (v44 != CFNumberGetTypeID())
            goto LABEL_177;
          CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, (void *)(v8 + 544));
          FigMatrixFromArray = ffr_updateThreadPriority(a1, *(_DWORD *)(v8 + 544));
        }
        else
        {
          if (CFEqual(CFSTR("JoinWritingThreadToNewWorkgroup"), a2))
          {
            if (a3)
            {
              v45 = CFGetTypeID(a3);
              if (v45 == CFBooleanGetTypeID())
              {
                v11 = 0;
                *(_BYTE *)(v8 + 600) = CFBooleanGetValue((CFBooleanRef)a3);
                goto LABEL_179;
              }
            }
            goto LABEL_177;
          }
          if (CFEqual(CFSTR("WriteInSinglePassUsingPredeterminedSizes"), a2))
          {
            if (a3)
            {
              v46 = CFGetTypeID(a3);
              if (v46 != CFDictionaryGetTypeID())
                goto LABEL_177;
            }
            FigMatrixFromArray = setPredeterminedSizes(v8, (uint64_t)a3);
          }
          else if (CFEqual(CFSTR("WriteInSinglePassUsingMediaDataCheckpointInterval"), a2))
          {
            if (a3)
            {
              v47 = CFGetTypeID(a3);
              if (v47 != CFDictionaryGetTypeID())
                goto LABEL_177;
            }
            FigMatrixFromArray = setMediaDataCheckpointInterval(v8, (uint64_t)a3);
          }
          else
          {
            if (!CFEqual(CFSTR("EncryptionConfig"), a2))
            {
              if (!CFEqual(CFSTR("MaximizePowerEfficiency"), a2))
              {
                v11 = 4294954666;
                goto LABEL_179;
              }
              if (!a3)
                goto LABEL_177;
              v49 = CFGetTypeID(a3);
              if (v49 != CFBooleanGetTypeID())
                goto LABEL_177;
              v11 = 0;
              *(_BYTE *)(v8 + 760) = *MEMORY[0x1E0C9AE50] == (_QWORD)a3;
              goto LABEL_179;
            }
            if (!a3)
              goto LABEL_177;
            v48 = CFGetTypeID(a3);
            if (v48 != EncryptionConfigGetTypeID())
              goto LABEL_177;
            FigMatrixFromArray = MoviePSSHData_CreatePSSHDataEntries(a3, (__CFArray **)&cf);
            if ((_DWORD)FigMatrixFromArray)
              goto LABEL_178;
            if (!cf)
              goto LABEL_177;
            FigMatrixFromArray = MovieInformationSetPSSHDataEntries((uint64_t)v7, cf);
          }
        }
LABEL_178:
        v11 = FigMatrixFromArray;
        goto LABEL_179;
      }
      if (!a3)
      {
        v11 = *(_QWORD *)(v8 + 312);
        *(_QWORD *)(v8 + 312) = 0;
        if (!v11)
          goto LABEL_179;
LABEL_124:
        CFRelease((CFTypeRef)v11);
        goto LABEL_13;
      }
      v41 = CFGetTypeID(a3);
      if (v41 != CFDictionaryGetTypeID())
        goto LABEL_177;
      v11 = *(_QWORD *)(v8 + 312);
      *(_QWORD *)(v8 + 312) = a3;
    }
    CFRetain(a3);
    if (!v11)
      goto LABEL_179;
    goto LABEL_124;
  }
  if (*(_BYTE *)(v8 + 384))
    goto LABEL_177;
  if (!a3)
    goto LABEL_177;
  v50 = 0uLL;
  *(_QWORD *)&v51 = 0;
  CMTimeMakeFromDictionary((CMTime *)&v50, (CFDictionaryRef)a3);
  if ((BYTE12(v50) & 0x1D) != 1)
    goto LABEL_177;
  v13 = v50;
  *(_OWORD *)(v8 + 96) = v50;
  v14 = v51;
  *(_QWORD *)(v8 + 112) = v51;
  *(_OWORD *)&time1.value = v13;
  time1.epoch = v14;
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v11 = 0;
  if (CMTimeCompare(&time1, &time2))
    *(_BYTE *)(v8 + 329) = 1;
  else
    *(_BYTE *)(v8 + 329) = 0;
LABEL_179:
  if (cf)
    CFRelease(cf);
  return v11;
}

uint64_t figMovieWriter_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFMutableArrayRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v10;
  uint64_t BasicMetrics;
  const __CFAllocator *v12;
  CMTime *p_time;
  CFNumberType v14;
  __CFArray *SInt64;
  CMTime *v16;
  uint64_t v17;
  const void **v18;
  int v19;
  uint64_t v20;
  int v21;
  CFTypeRef *v22;
  CFTypeRef *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 *v26;
  const void *v27;
  const void **v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  int v32;
  CMTime time;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  if (!a4)
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 335))
    return FigSignalErrorAt();
  v10 = *(_QWORD *)(DerivedStorage + 728);
  if (CFEqual(CFSTR("MovieTimeScale"), a2))
  {
    LODWORD(v30) = 0;
    BasicMetrics = MovieInformationGetBasicMetrics(v10, 0, 0, &v30, 0);
    if ((_DWORD)BasicMetrics)
      return BasicMetrics;
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    p_time = (CMTime *)&v30;
    goto LABEL_8;
  }
  if (CFEqual(CFSTR("HeaderByteCount"), a2))
  {
    *(_QWORD *)&v30 = 0;
    BasicMetrics = calculateHeaderByteCount(v8, (unint64_t *)&v30);
    if ((_DWORD)BasicMetrics)
      return BasicMetrics;
    LODWORD(time.value) = v30;
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    p_time = &time;
LABEL_8:
    v14 = kCFNumberSInt32Type;
LABEL_9:
    SInt64 = CFNumberCreate(v12, v14, p_time);
LABEL_10:
    *a4 = SInt64;
    return BasicMetrics;
  }
  if (CFEqual(CFSTR("TotalMovieAndMovieFragmentHeaderByteCountWritten"), a2))
  {
    SInt64 = (__CFArray *)FigCFNumberCreateSInt64();
LABEL_17:
    BasicMetrics = 0;
    goto LABEL_10;
  }
  if (CFEqual(CFSTR("MediaDataLocation"), a2))
    return createMediaDataLocation(a3, v8, a4);
  if (CFEqual(CFSTR("EstimatedFileByteCount"), a2))
  {
    *(_QWORD *)&v30 = 0;
    BasicMetrics = estimateResultFileSize(v8, &v30);
    if ((_DWORD)BasicMetrics)
      return BasicMetrics;
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    p_time = (CMTime *)&v30;
    v14 = kCFNumberSInt64Type;
    goto LABEL_9;
  }
  if (CFEqual(CFSTR("LongestMediaDecodeDuration"), a2))
  {
    v30 = 0uLL;
    *(_QWORD *)&v31 = 0;
    getLongestMediaDecodeDuration(v8, (uint64_t)&v30);
    *(_OWORD *)&time.value = v30;
    time.epoch = v31;
    v16 = &time;
LABEL_25:
    SInt64 = CMTimeCopyAsDictionary(v16, a3);
    goto LABEL_17;
  }
  if (CFEqual(CFSTR("ByteCountToReserveForHeader"), a2))
  {
    SInt64 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, (const void *)(v8 + 268));
    goto LABEL_17;
  }
  if (CFEqual(CFSTR("InterleavingPeriod"), a2))
  {
    v30 = *(_OWORD *)(v8 + 48);
    v17 = *(_QWORD *)(v8 + 64);
LABEL_39:
    *(_QWORD *)&v31 = v17;
    v16 = (CMTime *)&v30;
    goto LABEL_25;
  }
  if (CFEqual(CFSTR("InterleavingOverflowThreshold"), a2))
  {
    v30 = *(_OWORD *)(v8 + 72);
    v17 = *(_QWORD *)(v8 + 88);
    goto LABEL_39;
  }
  if (CFEqual(CFSTR("MovieFragmentCheckpointInterval"), a2))
  {
    v30 = *(_OWORD *)(v8 + 96);
    v17 = *(_QWORD *)(v8 + 112);
    goto LABEL_39;
  }
  if (CFEqual(CFSTR("InitialMovieFragmentCheckpoint"), a2))
  {
    v30 = *(_OWORD *)(v8 + 120);
    v17 = *(_QWORD *)(v8 + 136);
    goto LABEL_39;
  }
  if (CFEqual(CFSTR("PreferredOutputSegmentInterval"), a2) || CFEqual(CFSTR("InitialSegmentStartTime"), a2))
  {
    v30 = *(_OWORD *)(v8 + 196);
    v17 = *(_QWORD *)(v8 + 212);
    goto LABEL_39;
  }
  if (CFEqual(CFSTR("ProduceCombinableMovieFragments"), a2))
  {
    v18 = (const void **)MEMORY[0x1E0C9AE50];
    v19 = *(unsigned __int8 *)(v8 + 533);
LABEL_46:
    if (!v19)
      v18 = (const void **)MEMORY[0x1E0C9AE40];
    SInt64 = (__CFArray *)*v18;
LABEL_49:
    SInt64 = (__CFArray *)CFRetain(SInt64);
    goto LABEL_17;
  }
  if (CFEqual(CFSTR("AllowNonSyncSampleAtBeginningOfSegment"), a2))
  {
    v18 = (const void **)MEMORY[0x1E0C9AE50];
    v19 = *(unsigned __int8 *)(v8 + 534);
    goto LABEL_46;
  }
  if (CFEqual(CFSTR("ConsolidateMovieFragments"), a2))
  {
    v18 = (const void **)MEMORY[0x1E0C9AE50];
    v19 = *(unsigned __int8 *)(v8 + 531);
    goto LABEL_46;
  }
  if (CFEqual(CFSTR("MovieExtendsHeaderFragmentDuration"), a2))
  {
    v30 = *(_OWORD *)(v8 + 244);
    v17 = *(_QWORD *)(v8 + 260);
    goto LABEL_39;
  }
  if (CFEqual(CFSTR("WriteNoSamplesInMovieHeader"), a2))
  {
    v18 = (const void **)MEMORY[0x1E0C9AE50];
    v19 = *(unsigned __int8 *)(v8 + 332);
    goto LABEL_46;
  }
  if (CFEqual(CFSTR("WriteBaseMediaDecodeTimeInTrackFragments"), a2))
  {
    v18 = (const void **)MEMORY[0x1E0C9AE50];
    v19 = *(unsigned __int8 *)(v8 + 333);
    goto LABEL_46;
  }
  if (CFEqual(CFSTR("FileTypeMajorBrand"), a2))
    return MovieSampleDataWriterCopyMajorBrand(*(_QWORD *)(v8 + 744), a4);
  if (CFEqual(CFSTR("FileTypeMinorVersion"), a2))
    return MovieSampleDataWriterCopyMinorVersion(*(_QWORD *)(v8 + 744), a4);
  if (CFEqual(CFSTR("FileTypeCompatibleBrands"), a2))
    return MovieSampleDataWriterCopyCompatibleBrands(*(_QWORD *)(v8 + 744), a4);
  if (CFEqual(CFSTR("EnableWriting"), a2))
  {
    v18 = (const void **)MEMORY[0x1E0C9AE50];
    v19 = *(unsigned __int8 *)(v8 + 334);
    goto LABEL_46;
  }
  if (CFEqual(CFSTR("EnableExtendedLanguageTag"), a2))
  {
    v18 = (const void **)MEMORY[0x1E0C9AE50];
    v19 = *(unsigned __int8 *)(v8 + 328);
    goto LABEL_46;
  }
  if (CFEqual(CFSTR("TrackReference"), a2))
    return MovieInformationCreateTrackReferenceDictionary(a3, v10, a4);
  if (CFEqual(CFSTR("MovieMatrix"), a2))
  {
    v32 = 0;
    v30 = 0u;
    v31 = 0u;
    v20 = MovieInformationGetBasicMetrics(v10, 0, 0, 0, (uint64_t)&v30);
    if (!(_DWORD)v20)
      return copyFigMatrixAsArray(a3, (uint64_t)&v30, a4);
    return v20;
  }
  if (CFEqual(CFSTR("MetadataWriter"), a2))
  {
    *(_QWORD *)&v30 = 0;
    v21 = *(_DWORD *)(v8 + 684);
    v22 = (CFTypeRef *)&kFigMetadataFormat_QuickTimeUserData;
    if ((v21 & 1) != 0)
      v22 = (CFTypeRef *)&kFigMetadataFormat_ISOUserData;
    if ((v21 & 4) != 0)
      v23 = (CFTypeRef *)&kFigMetadataFormat_iTunes;
    else
      v23 = v22;
    BasicMetrics = getMetadataSerializer((uint64_t)a3, v8, *v23, &v30);
    if ((_DWORD)BasicMetrics)
      return BasicMetrics;
    SInt64 = (__CFArray *)FigMetadataSerializerGetFigMetadataWriter(v30);
    if (SInt64)
      SInt64 = (__CFArray *)CFRetain(SInt64);
    goto LABEL_10;
  }
  if (CFEqual(CFSTR("MetadataWriters"), a2))
    return createMetadataWritersDictionary(a3, v8, a4);
  if (CFEqual(CFSTR("PreferredRate"), a2))
  {
    LODWORD(v30) = 0;
    v24 = &v30;
    v25 = v10;
    v26 = 0;
LABEL_87:
    BasicMetrics = MovieInformationGetBasicMetrics(v25, v24, v26, 0, 0);
    if ((_DWORD)BasicMetrics)
      return BasicMetrics;
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    p_time = (CMTime *)&v30;
    v14 = kCFNumberFloat32Type;
    goto LABEL_9;
  }
  if (CFEqual(CFSTR("PreferredVolume"), a2))
  {
    LODWORD(v30) = 0;
    v26 = &v30;
    v25 = v10;
    v24 = 0;
    goto LABEL_87;
  }
  if (CFEqual(CFSTR("iTunesGaplessInfo"), a2))
  {
    SInt64 = *(__CFArray **)(v8 + 688);
    if (!SInt64)
      goto LABEL_17;
    goto LABEL_49;
  }
  if (CFEqual(CFSTR("MetadataToTransfer"), a2))
  {
    v27 = *(const void **)(v8 + 296);
    if (v27)
    {
LABEL_94:
      SInt64 = (__CFArray *)CFPropertyListCreateDeepCopy(a3, v27, 0);
      goto LABEL_17;
    }
LABEL_97:
    BasicMetrics = 0;
    *a4 = 0;
    return BasicMetrics;
  }
  if (CFEqual(CFSTR("MetadataToWrite"), a2))
  {
    v27 = *(const void **)(v8 + 304);
    if (v27)
      goto LABEL_94;
    goto LABEL_97;
  }
  if (CFEqual(CFSTR("MetadataWhitelist"), a2))
  {
    SInt64 = *(__CFArray **)(v8 + 312);
    if (!SInt64)
      goto LABEL_17;
    goto LABEL_49;
  }
  if (CFEqual(CFSTR("JoinWritingThreadToNewWorkgroup"), a2))
  {
    v28 = (const void **)MEMORY[0x1E0C9AE50];
    if (!*(_BYTE *)(v8 + 600))
      v28 = (const void **)MEMORY[0x1E0C9AE40];
    SInt64 = (__CFArray *)*v28;
    if (!*v28)
      goto LABEL_17;
    goto LABEL_49;
  }
  if (!CFEqual(CFSTR("PictureCollectionWriter"), a2))
  {
    if (CFEqual(CFSTR("WriteInSinglePassUsingPredeterminedSizes"), a2))
    {
      *(_QWORD *)&v30 = 0;
      v29 = copyPredeterminedSizesAsDictionary(v8, a3, (CFMutableDictionaryRef *)&v30);
    }
    else
    {
      if (!CFEqual(CFSTR("WriteInSinglePassUsingMediaDataCheckpointInterval"), a2))
      {
        if (!CFEqual(CFSTR("MaximizePowerEfficiency"), a2))
          return 4294954666;
        v18 = (const void **)MEMORY[0x1E0C9AE50];
        v19 = *(unsigned __int8 *)(v8 + 760);
        goto LABEL_46;
      }
      *(_QWORD *)&v30 = 0;
      v29 = copyMediaDataCheckpointIntervalAsDictionary(v8, a3, (CFMutableDictionaryRef *)&v30);
    }
    BasicMetrics = v29;
    if (!(_DWORD)v29)
      *a4 = (CFMutableArrayRef)v30;
    return BasicMetrics;
  }
  return FigIFFPictureCollectionWriterCreateWithMovieSampleDataWriter(*(const void **)(v8 + 744), *(const void **)(v8 + 712), 0, a3, (CFTypeRef *)a4);
}

uint64_t getMetadataSerializer(uint64_t a1, uint64_t a2, CFTypeRef cf1, _QWORD *a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t result;

  if (!cf1 || !a4)
    return FigSignalErrorAt();
  if (CFEqual(cf1, CFSTR("com.apple.quicktime.udta")))
  {
    if ((*(_BYTE *)(a2 + 684) & 1) == 0)
    {
      v8 = *(_QWORD *)(a2 + 280);
      if (!v8)
      {
        v9 = (uint64_t *)(a2 + 280);
        result = FigMetadataSerializerCreateForQuickTimeUserData(a1, v9);
        if ((_DWORD)result)
          return result;
LABEL_21:
        v8 = *v9;
        goto LABEL_22;
      }
      goto LABEL_22;
    }
    return 0;
  }
  if (CFEqual(cf1, CFSTR("org.mp4ra")))
  {
    if ((*(_BYTE *)(a2 + 684) & 1) != 0)
    {
      v8 = *(_QWORD *)(a2 + 280);
      if (!v8)
      {
        v9 = (uint64_t *)(a2 + 280);
        result = FigMetadataSerializerCreateForISOUserData(a1, v9);
        if ((_DWORD)result)
          return result;
        goto LABEL_21;
      }
      goto LABEL_22;
    }
    return 0;
  }
  if (!CFEqual(cf1, CFSTR("com.apple.quicktime.mdta")))
  {
    if (CFEqual(cf1, CFSTR("com.apple.itunes")))
    {
      v8 = *(_QWORD *)(a2 + 288);
      if (!v8)
      {
        v9 = (uint64_t *)(a2 + 288);
        result = FigMetadataSerializerCreateForiTunes(a1, v9);
        if ((_DWORD)result)
          return result;
        goto LABEL_21;
      }
      goto LABEL_22;
    }
    return FigSignalErrorAt();
  }
  v8 = *(_QWORD *)(a2 + 272);
  if (!v8)
  {
    v9 = (uint64_t *)(a2 + 272);
    result = FigMetadataSerializerCreateForQuickTimeMetadata(a1, v9);
    if ((_DWORD)result)
      return result;
    goto LABEL_21;
  }
LABEL_22:
  result = 0;
  *a4 = v8;
  return result;
}

uint64_t FigMetadataSerializerCreateForQuickTimeUserData(uint64_t a1, _QWORD *a2)
{
  return FigMetadataSerializerCreateUserDataCommon(a1, 1, a2);
}

uint64_t FigMetadataSerializerGetClassID()
{
  MEMORY[0x19402F294](&FigMetadataSerializerGetClassID_sRegisterFigMetadataSerializerBaseTypeOnce, RegisterFigMetadataSerializerBaseType);
  return sFigMetadataSerializerClassID;
}

uint64_t RegisterFigMetadataSerializerBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigUserDataSerializerSetProperty(uint64_t a1, const void *a2, const __CFNumber *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  CFTypeID v7;
  uint64_t result;
  CFTypeID TypeID;
  int v10;
  int valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  if (!CFEqual(CFSTR("freeAtomSize"), a2))
  {
    if (!CFEqual(CFSTR("minimumSize"), a2))
      return 4294954710;
    if (a3)
    {
      TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(a3))
      {
        v10 = 0;
        if (CFNumberGetValue(a3, kCFNumberSInt32Type, &v10))
        {
          result = 0;
          *(_DWORD *)(v6 + 12) = v10;
          return result;
        }
        return FigSignalErrorAt();
      }
    }
    return FigSignalErrorAt();
  }
  if (!a3)
    return FigSignalErrorAt();
  v7 = CFNumberGetTypeID();
  if (v7 != CFGetTypeID(a3))
    return FigSignalErrorAt();
  valuePtr = 0;
  if (CFNumberGetValue(a3, kCFNumberSInt32Type, &valuePtr))
  {
    result = 0;
    *(_DWORD *)(v6 + 8) = valuePtr;
    return result;
  }
  return FigSignalErrorAt();
}

uint64_t figMovieWriter_AddTrack(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  CFIndex Count;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 *v14;
  __int128 v15;
  CMTimeEpoch v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const __CFAllocator **v20;
  __int128 v21;
  _OWORD *v23;
  const __CFAllocator *v24;
  CFMutableArrayRef Mutable;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  uint64_t v27;
  uint64_t v28;
  opaqueCMBufferQueue *v29;
  const __CFAllocator *v30;
  int v31;
  _OWORD *v32;
  const CMBufferCallbacks *v33;
  __int128 v34;
  CMTime *v35;
  CFTypeRef v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  CMTime time;
  int v43;
  CFTypeRef cf;
  void *ptr;
  void *v46;
  CMBufferQueueTriggerToken v47;
  CMBufferQueueTriggerToken triggerToken;
  CMBufferQueueTriggerToken triggerTokenOut;
  CMBufferQueueRef v50;
  CMBufferQueueRef queueOut;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v50 = 0;
  queueOut = 0;
  triggerToken = 0;
  triggerTokenOut = 0;
  v46 = 0;
  v47 = 0;
  cf = 0;
  ptr = 0;
  v43 = 0;
  if (!a4)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 488));
  v9 = (char *)malloc_type_calloc(1uLL, 0x3B0uLL, 0x10E0040FD3C06F9uLL);
  v10 = (uint64_t)v9;
  if (!v9)
  {
    v19 = FigSignalErrorAt();
    goto LABEL_82;
  }
  v11 = MEMORY[0x1E0CA2E90];
  v12 = *MEMORY[0x1E0CA2E90];
  *(_OWORD *)(v9 + 200) = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 16);
  v13 = *(_OWORD *)(v11 + 48);
  *(_OWORD *)(v9 + 216) = *(_OWORD *)(v11 + 32);
  *((_QWORD *)v9 + 1) = Count;
  *((_QWORD *)v9 + 2) = v7;
  *(_DWORD *)v9 = a2;
  v14 = (__int128 *)MEMORY[0x1E0CA2E68];
  *(_OWORD *)(v9 + 232) = v13;
  v15 = *v14;
  *(_OWORD *)(v9 + 136) = *v14;
  v16 = *((_QWORD *)v14 + 2);
  *((_QWORD *)v9 + 19) = v16;
  *((_OWORD *)v9 + 10) = v15;
  *((_QWORD *)v9 + 22) = v16;
  *((_QWORD *)v9 + 31) = *(_QWORD *)(v11 + 64);
  *(_OWORD *)(v9 + 184) = v12;
  *((_OWORD *)v9 + 16) = v15;
  *((_QWORD *)v9 + 34) = v16;
  v17 = MEMORY[0x1E0CA2E30];
  *(_OWORD *)(v9 + 280) = *MEMORY[0x1E0CA2E30];
  *((_QWORD *)v9 + 37) = *(_QWORD *)(v17 + 16);
  v18 = MEMORY[0x1E0CA2E28];
  *((_OWORD *)v9 + 19) = *MEMORY[0x1E0CA2E28];
  *((_QWORD *)v9 + 40) = *(_QWORD *)(v18 + 16);
  *((_QWORD *)v9 + 42) = 0x800000007FFFFFFFLL;
  v41 = v15;
  *((_OWORD *)v9 + 27) = v15;
  *((_QWORD *)v9 + 56) = v16;
  *((_DWORD *)v9 + 26) = 0;
  v9[352] = 1;
  *((_WORD *)v9 + 16) = 257;
  v9[35] = 1;
  v9[37] = 1;
  v19 = MovieInformationCreateTrack(*(_QWORD *)(v7 + 728), a2, 0, &v43, &cf);
  if ((_DWORD)v19)
  {
LABEL_82:
    v28 = v19;
    Mutable = 0;
    goto LABEL_32;
  }
  v20 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
  v21 = v41;
  if (a2 == 1986618469)
    goto LABEL_24;
  if (a2 <= 1835365472)
  {
    switch(a2)
    {
      case 1635088502:
LABEL_16:
        *(_BYTE *)(v10 + 352) = 0;
        break;
      case 1668047728:
        v19 = MovieTrackSetLayer((uint64_t)cf, -1);
        goto LABEL_23;
      case 1751216244:
        *(_OWORD *)(v10 + 108) = v41;
        *(_QWORD *)(v10 + 124) = v16;
        *(_DWORD *)(v10 + 344) = 1;
        *(_BYTE *)(v10 + 492) = 1;
        v19 = editBuilderCreate(*v20, &v46);
        if (!(_DWORD)v19)
          goto LABEL_25;
        goto LABEL_82;
    }
LABEL_24:
    *(_OWORD *)(v10 + 108) = v21;
    *(_QWORD *)(v10 + 124) = v16;
    *(_DWORD *)(v10 + 344) = 2;
    goto LABEL_25;
  }
  if (a2 <= 1936684397)
  {
    if (a2 != 1835365473 && a2 != 1885954932)
      goto LABEL_24;
    goto LABEL_16;
  }
  if (a2 == 1953325924)
  {
    v19 = MovieTrackSetTimecodeSpecifics((uint64_t)cf, 0);
LABEL_23:
    v21 = v41;
    if (!(_DWORD)v19)
      goto LABEL_24;
    goto LABEL_82;
  }
  if (a2 != 1936684398)
    goto LABEL_24;
  v23 = (_OWORD *)(v10 + 108);
  if (*(_BYTE *)(v7 + 18))
  {
    *v23 = v41;
    *(_QWORD *)(v10 + 124) = v16;
  }
  else
  {
    CMTimeMakeWithSeconds(&time, 2.0, 1);
    *v23 = *(_OWORD *)&time.value;
    *(_QWORD *)(v10 + 124) = time.epoch;
  }
  *(_DWORD *)(v10 + 344) = 1;
  if ((*(_DWORD *)(v7 + 324) - 6) >= 0xFFFFFFFB)
  {
    *(_BYTE *)(v10 + 492) = 1;
    v30 = *v20;
    v19 = editBuilderCreate(*v20, &v46);
    if ((_DWORD)v19)
      goto LABEL_82;
    v31 = *(_DWORD *)(v7 + 324);
    if (v31 == 5)
    {
      v32 = (_OWORD *)(v10 + 508);
      if (*(__CFString **)(v7 + 712) != CFSTR("com.apple.m4a-audio"))
      {
        *(_DWORD *)(v10 + 768) = 5;
        *(_BYTE *)(v10 + 504) = 0;
        *v32 = v41;
        *(_QWORD *)(v10 + 524) = v16;
        goto LABEL_59;
      }
      *(_DWORD *)(v10 + 768) = 2;
      *(_BYTE *)(v10 + 504) = 0;
      *v32 = v41;
      *(_QWORD *)(v10 + 524) = v16;
    }
    else
    {
      *(_DWORD *)(v10 + 768) = v31;
      *(_BYTE *)(v10 + 504) = 0;
      *(_OWORD *)(v10 + 508) = v41;
      *(_QWORD *)(v10 + 524) = v16;
      if (v31 != 2)
      {
LABEL_59:
        if (!*(_BYTE *)(v7 + 384))
          goto LABEL_25;
      }
    }
    v19 = editBoundaryDetectorCreate(v30, &ptr);
    if (!(_DWORD)v19)
      goto LABEL_25;
    goto LABEL_82;
  }
LABEL_25:
  v24 = *v20;
  Mutable = CFArrayCreateMutable(v24, 0, 0);
  if (Mutable)
  {
    CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
    v27 = CMBufferQueueCreate(v24, 0, CallbacksForUnsortedSampleBuffers, &queueOut);
    if (!(_DWORD)v27)
    {
      v27 = CMBufferQueueSetValidationCallback(queueOut, (CMBufferValidationCallback)validateSampleBufferForTrackCallback, (void *)v10);
      if (!(_DWORD)v27)
      {
        *(_OWORD *)&time.value = v41;
        time.epoch = v16;
        v27 = CMBufferQueueInstallTrigger(queueOut, (CMBufferQueueTriggerCallback)wakeupWritingThreadForDataReady, (void *)v10, 7, &time, &triggerTokenOut);
        if (!(_DWORD)v27)
        {
          *(_OWORD *)&time.value = v41;
          time.epoch = v16;
          v27 = CMBufferQueueInstallTrigger(queueOut, (CMBufferQueueTriggerCallback)wakeupWritingThreadForEndOfDataReached, (void *)v10, 8, &time, &triggerToken);
          if (!(_DWORD)v27)
          {
            time = *(CMTime *)(v7 + 72);
            v27 = FigBufferQueueInstallTriggerWithTimeAndIntegerThresholds();
            if (!(_DWORD)v27)
            {
              v33 = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
              v27 = CMBufferQueueCreate(v24, 0, v33, &v50);
              if (!(_DWORD)v27)
              {
                *(_QWORD *)(v10 + 608) = queueOut;
                *(_QWORD *)(v10 + 616) = v50;
                *(_QWORD *)(v10 + 624) = triggerTokenOut;
                *(_QWORD *)(v10 + 632) = triggerToken;
                *(_QWORD *)(v10 + 640) = v47;
                v34 = *(_OWORD *)(v7 + 48);
                *(_QWORD *)(v10 + 664) = *(_QWORD *)(v7 + 64);
                *(_OWORD *)(v10 + 648) = v34;
                *(_OWORD *)&time.value = v41;
                time.epoch = v16;
                if (*(_BYTE *)(v7 + 329))
                {
                  v35 = (CMTime *)(v7 + 96);
                }
                else
                {
                  if (!*(_BYTE *)(v7 + 330))
                  {
LABEL_64:
                    *(CMTime *)(v10 + 672) = time;
                    *(_QWORD *)(v10 + 424) = Mutable;
                    *(_QWORD *)(v10 + 496) = v46;
                    v36 = cf;
                    *(_QWORD *)(v10 + 536) = ptr;
                    *(_QWORD *)(v10 + 736) = v36;
                    *(_DWORD *)(v10 + 732) = v43;
                    v27 = MovieHeaderMakerAddTrack(*(_QWORD *)(v7 + 736), v36, (_QWORD *)(v10 + 744));
                    if (!(_DWORD)v27)
                    {
                      v27 = MovieSampleDataWriterAddTrack(*(_QWORD *)(v7 + 744), a2, (uint64_t)chunkCallback, v10, (_QWORD *)(v10 + 760));
                      if (!(_DWORD)v27)
                      {
                        v27 = MovieSampleDataWriterTrackSetPreferredChunkAlignment(*(_QWORD *)(v7 + 744), *(_QWORD *)(v10 + 760), 512);
                        if (!(_DWORD)v27)
                        {
                          v27 = MediaSampleTimingGeneratorCreate(v24, a2, *(_DWORD *)(v10 + 344), (_QWORD *)(v10 + 752));
                          if (!(_DWORD)v27)
                          {
                            if (!*(_BYTE *)(v7 + 384))
                            {
LABEL_74:
                              CFArrayAppendValue(*(CFMutableArrayRef *)(v7 + 488), (const void *)v10);
                              v38 = *(_QWORD *)(v7 + 496);
                              if (v38)
                              {
                                v39 = *(_QWORD *)(v7 + 496);
                                do
                                {
                                  v40 = v39;
                                  v39 = *(_QWORD *)(v39 + 24);
                                }
                                while (v39);
                                *(_QWORD *)(v40 + 24) = v10;
                              }
                              else
                              {
                                v38 = v10;
                              }
                              v28 = 0;
                              v10 = 0;
                              Mutable = 0;
                              *(_QWORD *)(v7 + 496) = v38;
                              ptr = 0;
                              v46 = 0;
                              v50 = 0;
                              queueOut = 0;
                              triggerToken = 0;
                              triggerTokenOut = 0;
                              v47 = 0;
                              cf = 0;
                              *a4 = v43;
                              goto LABEL_32;
                            }
                            v37 = FigCFEqual();
                            if (a2 == 1986618469 && v37)
                              *(_BYTE *)(v10 + 912) = 1;
                            v27 = setNegativeCompositionOffsetsInISOFilePolicy(v7, v10);
                            if (!(_DWORD)v27)
                            {
                              *(_BYTE *)(v10 + 729) = 1;
                              goto LABEL_74;
                            }
                          }
                        }
                      }
                    }
                    goto LABEL_31;
                  }
                  v35 = (CMTime *)(v7 + 144);
                }
                time = *v35;
                goto LABEL_64;
              }
            }
          }
        }
      }
    }
  }
  else
  {
    v27 = FigSignalErrorAt();
  }
LABEL_31:
  v28 = v27;
LABEL_32:
  FigCEA608DataInspectorRelease((CFAllocatorRef *)ptr);
  editBuilderRelease(v46);
  if (Mutable)
    CFRelease(Mutable);
  v29 = queueOut;
  if (queueOut)
  {
    if (triggerTokenOut)
    {
      CMBufferQueueRemoveTrigger(queueOut, triggerTokenOut);
      v29 = queueOut;
    }
    if (triggerToken)
    {
      CMBufferQueueRemoveTrigger(v29, triggerToken);
      v29 = queueOut;
    }
    if (v47)
      CMBufferQueueRemoveTrigger(v29, v47);
    FigBufferQueueRelease();
  }
  if (v50)
    CFRelease(v50);
  if (cf)
    CFRelease(cf);
  if (v10)
    free((void *)v10);
  return v28;
}

uint64_t figMovieWriter_SetTrackProperty(uint64_t a1, int a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  CFTypeID v12;
  CFTypeID v13;
  __int128 v14;
  CFTypeID TypeID;
  CFTypeID v16;
  int SInt32;
  CFTypeID v18;
  CFTypeID v19;
  CFTypeID v20;
  uint64_t v21;
  uint64_t v22;
  CFTypeID v23;
  CFTypeID v24;
  CFTypeID v25;
  CFTypeID v26;
  CFTypeID v27;
  const void *v28;
  CFTypeID v29;
  const void *v30;
  CFTypeID v31;
  CFTypeID v32;
  Boolean Value;
  CFTypeID v34;
  Boolean v35;
  CFTypeID v36;
  float v37;
  float v38;
  char v39;
  CFTypeID v40;
  float v41;
  float v42;
  char v43;
  char v44;
  CFTypeID v45;
  float v46;
  float v47;
  char v48;
  char v49;
  CFTypeID v50;
  float v51;
  float v52;
  char v53;
  char v54;
  CFTypeID v55;
  CFTypeID v56;
  CFIndex Count;
  CFIndex v58;
  CFIndex v59;
  const void *ValueAtIndex;
  CFTypeID v61;
  CFTypeID v62;
  CFTypeID v63;
  const void *v64;
  CFTypeID v65;
  CFTypeID v66;
  const void *v67;
  CFTypeID v68;
  CFTypeID v69;
  Boolean v70;
  CFTypeID v71;
  Boolean v72;
  CFTypeID v73;
  Boolean v74;
  CFTypeID v75;
  CFTypeID v76;
  CFTypeID v77;
  CMTime v78;
  __int128 valuePtr;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  if (!DerivedStorage || *(_BYTE *)(DerivedStorage + 335))
    return FigSignalErrorAt();
  v83 = 0;
  result = getTrackInfoForTrackID(DerivedStorage, a2, &v83);
  if ((_DWORD)result)
    return result;
  v10 = v83;
  v11 = *(_QWORD *)(v83 + 736);
  if (CFEqual(CFSTR("MediaTimeScale"), a3))
  {
    LODWORD(valuePtr) = 0;
    if (a4)
    {
      v12 = CFGetTypeID(a4);
      if (v12 == CFNumberGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)a4, kCFNumberSInt32Type, &valuePtr);
        result = MediaSampleTimingGeneratorSetMediaTimeScale(*(_QWORD *)(v10 + 752), valuePtr);
        if (!(_DWORD)result)
        {
          result = MovieTrackSetMediaTimeScale(v11, valuePtr);
          if (!(_DWORD)result)
            *(_DWORD *)(v10 + 104) = valuePtr;
        }
        return result;
      }
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(CFSTR("QTLoadSettings"), a3))
  {
    if (!a4)
    {
      result = 0;
      *(_BYTE *)(v10 + 40) = 0;
      return result;
    }
    v13 = CFGetTypeID(a4);
    if (v13 == CFDictionaryGetTypeID())
    {
      v82 = 0;
      v80 = 0u;
      v81 = 0u;
      valuePtr = 0u;
      result = getFigTrackLoadSettingsFromDictionary(a4, (uint64_t)&valuePtr);
      if (!(_DWORD)result)
      {
        v14 = v80;
        *(_OWORD *)(v10 + 44) = valuePtr;
        *(_OWORD *)(v10 + 60) = v14;
        *(_OWORD *)(v10 + 76) = v81;
        *(_QWORD *)(v10 + 92) = v82;
        *(_BYTE *)(v10 + 40) = 1;
      }
      return result;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(CFSTR("MediaDataPrecedence"), a3))
  {
    if (a4)
    {
      TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(a4))
      {
        LODWORD(valuePtr) = 0;
        CFNumberGetValue((CFNumberRef)a4, kCFNumberSInt32Type, &valuePtr);
        if ((valuePtr & 0x80000000) == 0)
        {
          result = 0;
          *(_DWORD *)(v10 + 100) = valuePtr;
          return result;
        }
        return FigSignalErrorAt();
      }
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(CFSTR("InterleavingAdvance"), a3))
  {
    if (a4)
    {
      valuePtr = 0uLL;
      *(_QWORD *)&v80 = 0;
      CMTimeMakeFromDictionary((CMTime *)&valuePtr, (CFDictionaryRef)a4);
      if ((BYTE12(valuePtr) & 0x1D) == 1)
      {
        result = 0;
        *(_OWORD *)(v10 + 108) = valuePtr;
        *(_QWORD *)(v10 + 124) = v80;
        return result;
      }
      return FigSignalErrorAt();
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(CFSTR("InterleavingOrder"), a3))
  {
    if (a4)
    {
      v16 = CFGetTypeID(a4);
      if (v16 == CFNumberGetTypeID())
      {
        SInt32 = FigCFNumberGetSInt32();
        result = 0;
        *(_DWORD *)(v10 + 132) = SInt32;
        return result;
      }
    }
LABEL_83:
    FigSignalErrorAt();
    return 0;
  }
  if (CFEqual(CFSTR("PreferredChunkAlignment"), a3))
  {
    LODWORD(valuePtr) = 0;
    if (a4)
    {
      v18 = CFGetTypeID(a4);
      if (v18 == CFNumberGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)a4, kCFNumberSInt32Type, &valuePtr);
        return MovieSampleDataWriterTrackSetPreferredChunkAlignment(*(_QWORD *)(v8 + 744), *(_QWORD *)(v10 + 760), valuePtr);
      }
    }
    goto LABEL_83;
  }
  if (CFEqual(CFSTR("PreferredChunkSize"), a3))
  {
    LODWORD(valuePtr) = 0;
    if (a4)
    {
      v19 = CFGetTypeID(a4);
      if (v19 == CFNumberGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)a4, kCFNumberSInt32Type, &valuePtr);
        return MovieSampleDataWriterTrackSetPreferredChunkSize(*(_QWORD *)(v8 + 744), *(_QWORD *)(v10 + 760), valuePtr);
      }
    }
    goto LABEL_83;
  }
  if (CFEqual(CFSTR("PreferredChunkDuration"), a3))
  {
    valuePtr = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)&v80 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    if (a4)
    {
      v20 = CFGetTypeID(a4);
      if (v20 == CFDictionaryGetTypeID())
      {
        CMTimeMakeFromDictionary((CMTime *)&valuePtr, (CFDictionaryRef)a4);
        v21 = *(_QWORD *)(v8 + 744);
        v22 = *(_QWORD *)(v10 + 760);
        *(_OWORD *)&v78.value = valuePtr;
        v78.epoch = v80;
        return MovieSampleDataWriterTrackSetPreferredChunkDuration(v21, v22, &v78);
      }
    }
    goto LABEL_83;
  }
  if (CFEqual(CFSTR("AlternateGroupID"), a3))
  {
    LOWORD(valuePtr) = 0;
    if (a4)
    {
      v23 = CFGetTypeID(a4);
      if (v23 == CFNumberGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)a4, kCFNumberSInt16Type, &valuePtr);
        return MovieTrackSetAlternateGroupID(v11, valuePtr);
      }
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(CFSTR("DefaultAlternateGroupID"), a3))
  {
    LOWORD(valuePtr) = 0;
    if (a4)
    {
      v24 = CFGetTypeID(a4);
      if (v24 == CFNumberGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)a4, kCFNumberSInt16Type, &valuePtr);
        return MovieTrackSetDefaultAlternateGroupID(v11, valuePtr);
      }
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(CFSTR("ProvisionalAlternateGroupID"), a3))
  {
    LOWORD(valuePtr) = 0;
    if (a4)
    {
      v25 = CFGetTypeID(a4);
      if (v25 == CFNumberGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)a4, kCFNumberSInt16Type, &valuePtr);
        return MovieTrackSetProvisionalAlternateGroupID(v11, valuePtr);
      }
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(CFSTR("TrackVolume"), a3))
  {
    LODWORD(valuePtr) = 0;
    if (a4)
    {
      v26 = CFGetTypeID(a4);
      if (v26 == CFNumberGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)a4, kCFNumberFloat32Type, &valuePtr);
        return MovieTrackSetVolume(v11, *(float *)&valuePtr);
      }
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(CFSTR("EditList"), a3))
  {
    if (a4)
    {
      v27 = CFGetTypeID(a4);
      if (v27 != CFArrayGetTypeID())
        return FigSignalErrorAt();
      v28 = *(const void **)(v10 + 400);
      *(_QWORD *)(v10 + 400) = a4;
      CFRetain(a4);
    }
    else
    {
      v28 = *(const void **)(v10 + 400);
      *(_QWORD *)(v10 + 400) = 0;
    }
    if (v28)
      CFRelease(v28);
    if (*(_BYTE *)(v8 + 329))
    {
      result = 0;
      *(_BYTE *)(v10 + 353) = 1;
      return result;
    }
    return 0;
  }
  if (CFEqual(CFSTR("LanguageTag"), a3))
  {
    if (a4)
    {
      v29 = CFGetTypeID(a4);
      if (v29 != CFStringGetTypeID())
        return FigSignalErrorAt();
      v30 = *(const void **)(v10 + 408);
      *(_QWORD *)(v10 + 408) = a4;
      goto LABEL_77;
    }
    v30 = *(const void **)(v10 + 408);
    *(_QWORD *)(v10 + 408) = 0;
LABEL_86:
    if (v30)
      CFRelease(v30);
    return 0;
  }
  if (CFEqual(CFSTR("ExtendedLanguageTag"), a3))
  {
    if (!a4)
    {
      v30 = *(const void **)(v10 + 416);
      *(_QWORD *)(v10 + 416) = 0;
      goto LABEL_86;
    }
    v31 = CFGetTypeID(a4);
    if (v31 != CFStringGetTypeID())
      return FigSignalErrorAt();
    v30 = *(const void **)(v10 + 416);
    *(_QWORD *)(v10 + 416) = a4;
    goto LABEL_77;
  }
  if (CFEqual(CFSTR("EnableTrack"), a3))
  {
    if (a4)
    {
      v32 = CFGetTypeID(a4);
      if (v32 == CFBooleanGetTypeID())
      {
        Value = CFBooleanGetValue((CFBooleanRef)a4);
        return MovieTrackSetEnabled(v11, Value);
      }
    }
    goto LABEL_83;
  }
  if (CFEqual(CFSTR("InterleaveTrack"), a3))
  {
    if (a4)
    {
      v34 = CFBooleanGetTypeID();
      if (v34 == CFGetTypeID(a4))
      {
        v35 = CFBooleanGetValue((CFBooleanRef)a4);
        result = 0;
        *(_BYTE *)(v10 + 352) = v35;
        return result;
      }
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(CFSTR("TrackDimensions"), a3))
  {
    if (a4)
    {
      v36 = CFGetTypeID(a4);
      if (v36 != CFDictionaryGetTypeID())
        return FigSignalErrorAt();
      valuePtr = 0uLL;
      result = getDimensionsFromDictionary(a4, &valuePtr);
      if ((_DWORD)result)
        return result;
      v37 = *(double *)&valuePtr;
      v38 = *((double *)&valuePtr + 1);
      result = MovieTrackSetTrackDimensions(v11, v37, v38);
      if ((_DWORD)result)
        return result;
      v39 = 0;
    }
    else
    {
      v39 = 1;
    }
    result = 0;
    *(_BYTE *)(v10 + 32) = v39;
    return result;
  }
  if (CFEqual(CFSTR("CleanApertureDimensions"), a3))
  {
    if (a4)
    {
      v40 = CFGetTypeID(a4);
      if (v40 == CFDictionaryGetTypeID())
      {
        valuePtr = 0uLL;
        result = getDimensionsFromDictionary(a4, &valuePtr);
        if ((_DWORD)result)
          return result;
        v41 = *(double *)&valuePtr;
        v42 = *((double *)&valuePtr + 1);
        result = MovieTrackSetCleanApertureDimensions(v11, v41, v42);
        if ((_DWORD)result)
          return result;
        v43 = 0;
        v44 = 1;
      }
      else
      {
        if (!CFEqual(CFSTR("NoDimensions"), a4))
          return FigSignalErrorAt();
        v43 = 0;
        v44 = 0;
      }
    }
    else
    {
      v44 = 0;
      v43 = 1;
    }
    result = 0;
    *(_BYTE *)(v10 + 33) = v43;
    *(_BYTE *)(v10 + 34) = v44;
    return result;
  }
  if (CFEqual(CFSTR("ProductionApertureDimensions"), a3))
  {
    if (a4)
    {
      v45 = CFGetTypeID(a4);
      if (v45 == CFDictionaryGetTypeID())
      {
        valuePtr = 0uLL;
        result = getDimensionsFromDictionary(a4, &valuePtr);
        if ((_DWORD)result)
          return result;
        v46 = *(double *)&valuePtr;
        v47 = *((double *)&valuePtr + 1);
        result = MovieTrackSetProductionApertureDimensions(v11, v46, v47);
        if ((_DWORD)result)
          return result;
        v48 = 0;
        v49 = 1;
      }
      else
      {
        if (!CFEqual(CFSTR("NoDimensions"), a4))
          return FigSignalErrorAt();
        v48 = 0;
        v49 = 0;
      }
    }
    else
    {
      v49 = 0;
      v48 = 1;
    }
    result = 0;
    *(_BYTE *)(v10 + 35) = v48;
    *(_BYTE *)(v10 + 36) = v49;
    return result;
  }
  if (CFEqual(CFSTR("EncodedPixelsDimensions"), a3))
  {
    if (a4)
    {
      v50 = CFGetTypeID(a4);
      if (v50 == CFDictionaryGetTypeID())
      {
        valuePtr = 0uLL;
        result = getDimensionsFromDictionary(a4, &valuePtr);
        if ((_DWORD)result)
          return result;
        v51 = *(double *)&valuePtr;
        v52 = *((double *)&valuePtr + 1);
        result = MovieTrackSetEncodedPixelsDimensions(v11, v51, v52);
        if ((_DWORD)result)
          return result;
        v53 = 0;
        v54 = 1;
      }
      else
      {
        if (!CFEqual(CFSTR("NoDimensions"), a4))
          return FigSignalErrorAt();
        v53 = 0;
        v54 = 0;
      }
    }
    else
    {
      v54 = 0;
      v53 = 1;
    }
    result = 0;
    *(_BYTE *)(v10 + 37) = v53;
    *(_BYTE *)(v10 + 38) = v54;
    return result;
  }
  if (CFEqual(CFSTR("TrackMatrix"), a3))
  {
    LODWORD(v81) = 0;
    valuePtr = 0u;
    v80 = 0u;
    if (!a4)
      return FigSignalErrorAt();
    v55 = CFGetTypeID(a4);
    if (v55 != CFArrayGetTypeID())
      return FigSignalErrorAt();
    result = getFigMatrixFromArray((const __CFArray *)a4, (uint64_t)&valuePtr);
    if (!(_DWORD)result)
      return MovieTrackSetTrackMatrix(v11, (uint64_t)&valuePtr);
    return result;
  }
  if (CFEqual(CFSTR("FormatDescriptionArray"), a3))
  {
    if (!a4)
    {
      MovieTrackRemoveAllSampleDescriptions(v11);
      return 0;
    }
    v56 = CFGetTypeID(a4);
    if (v56 != CFArrayGetTypeID())
      return FigSignalErrorAt();
    MovieTrackRemoveAllSampleDescriptions(v11);
    Count = CFArrayGetCount((CFArrayRef)a4);
    if (Count < 1)
      return 0;
    v58 = Count;
    v59 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a4, v59);
      result = MovieTrackFindOrAddSampleDescription(*(_QWORD *)(v10 + 736), ValueAtIndex, 0, 0);
      if ((_DWORD)result)
        break;
      if (v58 == ++v59)
      {
        result = setDefaultTrackDimensionsIfNecessary(v10);
        if (!(_DWORD)result)
          return 0;
        return result;
      }
    }
  }
  else
  {
    if (CFEqual(CFSTR("ReplacementFormatDescriptionArray"), a3))
    {
      if (!a4)
        return FigSignalErrorAt();
      v61 = CFGetTypeID(a4);
      if (v61 != CFArrayGetTypeID())
        return FigSignalErrorAt();
      result = MovieTrackReplaceFormatDescriptionArray(v11, (CFArrayRef)a4);
      if (!(_DWORD)result)
        return setDefaultTrackDimensionsIfNecessary(v10);
      return result;
    }
    if (CFEqual(CFSTR("TrackMetadataToTransfer"), a3))
    {
      if (a4)
      {
        v62 = CFDictionaryGetTypeID();
        if (v62 != CFGetTypeID(a4))
        {
          v63 = CFArrayGetTypeID();
          if (v63 != CFGetTypeID(a4))
            return 0;
        }
        v64 = *(const void **)(v10 + 560);
        *(_QWORD *)(v10 + 560) = a4;
        CFRetain(a4);
      }
      else
      {
        v64 = *(const void **)(v10 + 560);
        *(_QWORD *)(v10 + 560) = 0;
      }
      if (v64)
        CFRelease(v64);
      result = *(_QWORD *)(v10 + 568);
      if (result)
      {
        CFRelease((CFTypeRef)result);
        result = 0;
        *(_QWORD *)(v10 + 568) = 0;
      }
    }
    else
    {
      if (!CFEqual(CFSTR("TrackMetadataToWrite"), a3))
      {
        if (CFEqual(CFSTR("TrackMetadataWhitelist"), a3))
        {
          if (!a4)
          {
            v30 = *(const void **)(v10 + 576);
            *(_QWORD *)(v10 + 576) = 0;
            goto LABEL_86;
          }
          v68 = CFDictionaryGetTypeID();
          if (v68 != CFGetTypeID(a4))
            return FigSignalErrorAt();
          v30 = *(const void **)(v10 + 576);
          *(_QWORD *)(v10 + 576) = a4;
        }
        else
        {
          if (CFEqual(CFSTR("ExcludeFromAutoSelection"), a3))
          {
            if (a4)
            {
              v69 = CFGetTypeID(a4);
              if (v69 == CFBooleanGetTypeID())
              {
                v70 = CFBooleanGetValue((CFBooleanRef)a4);
                return MovieTrackSetExcludeFromAutoSelection(v11, v70);
              }
            }
            return FigSignalErrorAt();
          }
          if (CFEqual(CFSTR("WriteCompactSampleSizeIfPossible"), a3))
          {
            if (a4)
            {
              v71 = CFGetTypeID(a4);
              if (v71 == CFBooleanGetTypeID())
              {
                v72 = CFBooleanGetValue((CFBooleanRef)a4);
                result = 0;
                *(_BYTE *)(v10 + 584) = v72;
                return result;
              }
            }
            return FigSignalErrorAt();
          }
          if (CFEqual(CFSTR("WriteQTSoundSampleTableLieIfPossible"), a3))
          {
            if (a4)
            {
              v73 = CFGetTypeID(a4);
              if (v73 == CFBooleanGetTypeID())
              {
                v74 = CFBooleanGetValue((CFBooleanRef)a4);
                result = 0;
                *(_BYTE *)(v10 + 585) = v74;
                return result;
              }
            }
            return FigSignalErrorAt();
          }
          if (CFEqual(CFSTR("Layer"), a3))
          {
            LOWORD(valuePtr) = 0;
            if (a4)
            {
              v75 = CFGetTypeID(a4);
              if (v75 == CFNumberGetTypeID())
              {
                CFNumberGetValue((CFNumberRef)a4, kCFNumberSInt16Type, &valuePtr);
                return MovieTrackSetLayer(v11, valuePtr);
              }
            }
            return FigSignalErrorAt();
          }
          if (!CFEqual(CFSTR("SampleReferenceBaseURL"), a3))
          {
            if (CFEqual(CFSTR("NegativeCompositionOffsetsInISOFilePolicy"), a3))
            {
              if (a4)
              {
                v77 = CFGetTypeID(a4);
                if (v77 == CFStringGetTypeID())
                  return setNegativeCompositionOffsetsInISOFilePolicy(v8, v10);
              }
              return FigSignalErrorAt();
            }
            if (CFEqual(CFSTR("HEVCSyncSampleNALUnitTypes"), a3))
            {
              result = MovieTrackRemoveSampleGroupInfoForGroupingType(*(_QWORD *)(v10 + 736), 1937337955);
              if (a4 && !(_DWORD)result)
                return MovieTrackAppendSyncSampleCombinations(*(void **)(v10 + 736), (const __CFArray *)a4);
            }
            else if (CFEqual(CFSTR("HEVCTemporalLevelInfoCombinations"), a3))
            {
              result = MovieTrackRemoveSampleGroupInfoForGroupingType(*(_QWORD *)(v10 + 736), 1953719148);
              if (a4 && !(_DWORD)result)
                return MovieTrackAppendTemporalLevelCombinations(*(const void **)(v10 + 736), (const __CFArray *)a4);
            }
            else if (CFEqual(CFSTR("SampleGroupDescriptions"), a3))
            {
              result = MovieTrackRemoveAllSampleGroups(*(_QWORD *)(v10 + 736));
              if (a4 && !(_DWORD)result)
                return MovieTrackAppendSampleGroupDescriptions(*(void **)(v10 + 736), (const __CFDictionary *)a4);
            }
            else
            {
              return 4294954666;
            }
            return result;
          }
          if (!a4)
          {
            v30 = *(const void **)(v10 + 456);
            *(_QWORD *)(v10 + 456) = 0;
            goto LABEL_86;
          }
          v76 = CFGetTypeID(a4);
          if (v76 != CFURLGetTypeID())
            return FigSignalErrorAt();
          v30 = *(const void **)(v10 + 456);
          *(_QWORD *)(v10 + 456) = a4;
        }
LABEL_77:
        CFRetain(a4);
        goto LABEL_86;
      }
      if (a4)
      {
        v65 = CFDictionaryGetTypeID();
        if (v65 != CFGetTypeID(a4))
        {
          v66 = CFArrayGetTypeID();
          if (v66 != CFGetTypeID(a4))
            return 0;
        }
        v67 = *(const void **)(v10 + 568);
        *(_QWORD *)(v10 + 568) = a4;
        CFRetain(a4);
      }
      else
      {
        v67 = *(const void **)(v10 + 568);
        *(_QWORD *)(v10 + 568) = 0;
      }
      if (v67)
        CFRelease(v67);
      result = *(_QWORD *)(v10 + 560);
      if (result)
      {
        CFRelease((CFTypeRef)result);
        result = 0;
        *(_QWORD *)(v10 + 560) = 0;
      }
    }
  }
  return result;
}

uint64_t getTrackInfoArrayIndexFromFigTrackID(uint64_t a1, int a2, _QWORD *a3)
{
  const __CFArray *v3;
  CFIndex Count;
  BOOL v7;

  v3 = *(const __CFArray **)(a1 + 40);
  if (!v3)
    return FigSignalErrorAt();
  Count = CFArrayGetCount(v3);
  v7 = Count < a2 || a2 < 1;
  if (v7 || Count == 0)
    return FigSignalErrorAt();
  *a3 = a2 - 1;
  return 0;
}

uint64_t getFigMatrixFromArray(const __CFArray *a1, uint64_t a2)
{
  CFTypeID TypeID;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  char *v9;
  const void *ValueAtIndex;
  CFTypeID v11;
  uint64_t result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;

  v16 = 0;
  v14 = 0u;
  v15 = 0u;
  if (a1)
  {
    TypeID = CFArrayGetTypeID();
    if (TypeID == CFGetTypeID(a1) && CFArrayGetCount(a1) == 9)
    {
      v5 = 0;
      v6 = 0;
      v7 = &v14;
LABEL_5:
      v8 = 0;
      v9 = (char *)v7;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a1, v5 + v8);
        v11 = CFNumberGetTypeID();
        if (v11 != CFGetTypeID(ValueAtIndex))
          break;
        CFNumberGetValue((CFNumberRef)ValueAtIndex, kCFNumberFloat32Type, v9);
        ++v8;
        v9 += 4;
        if (v8 == 3)
        {
          ++v6;
          v5 += 3;
          v7 = (__int128 *)((char *)v7 + 12);
          if (v6 != 3)
            goto LABEL_5;
          result = 0;
          v13 = v15;
          *(_OWORD *)a2 = v14;
          *(_OWORD *)(a2 + 16) = v13;
          *(_DWORD *)(a2 + 32) = v16;
          return result;
        }
      }
    }
  }
  return 4294954516;
}

uint64_t FigAudioCompressionOptionsGetPreset(const void *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  _QWORD *Value;
  uint64_t (*v11)(uint64_t *, uint64_t *, uint64_t *, uint64_t *);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  MEMORY[0x19402F294](&gCreatePresetGetterDictionaryOnce, createPresetGetterDictionaryOnce);
  if (!a2)
    a2 = &v16;
  if (!a3)
    a3 = &v15;
  if (!a4)
    a4 = &v14;
  if (!a5)
    a5 = &v13;
  if (!a1)
    return FigSignalErrorAt();
  if (!gPresetGetterDictionary)
    return FigSignalErrorAt();
  Value = CFDictionaryGetValue((CFDictionaryRef)gPresetGetterDictionary, a1);
  if (!Value)
    return FigSignalErrorAt();
  v11 = (uint64_t (*)(uint64_t *, uint64_t *, uint64_t *, uint64_t *))Value[1];
  if (!v11)
    return FigSignalErrorAt();
  v15 = 0;
  v16 = 0;
  v13 = 0;
  v14 = 0;
  return v11(a2, a3, a4, a5);
}

CFDictionaryRef createPresetGetterDictionaryOnce()
{
  uint64_t v0;
  void ***v1;
  CFDictionaryRef result;
  _OWORD v3[13];
  uint64_t v4;
  void *keys[2];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v0 = 0;
  v19 = *MEMORY[0x1E0C80C00];
  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v6 = 0u;
  v7 = 0u;
  *(_OWORD *)keys = 0u;
  v4 = 0;
  v1 = (void ***)&createPresetGetterDictionaryOnce_presetGetterPairs;
  memset(v3, 0, sizeof(v3));
  do
  {
    keys[v0] = **v1;
    *(_QWORD *)((char *)v3 + v0 * 8) = v1;
    ++v0;
    v1 += 2;
  }
  while (v0 != 27);
  result = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)v3, 27, MEMORY[0x1E0C9B390], 0);
  gPresetGetterDictionary = (uint64_t)result;
  return result;
}

uint64_t getpreset_AAC(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  *a1 = &getpreset_AAC_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  return 0;
}

uint64_t FigMediaProcessorCreateForVideoCompressionWithFormatWriter(CFAllocatorRef allocator, int32_t a2, int32_t a3, CMVideoCodecType a4, const __CFDictionary *a5, const __CFDictionary *a6, const void *a7, void *a8, uint64_t a9, __int128 *a10, const void *a11, unsigned int a12, __int128 *a13, __int128 *a14, const void *a15, int a16, uint64_t *a17)
{
  const __CFArray *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32[3];
  __int128 v33;
  uint64_t v34;
  void *values;

  values = a8;
  if (a8)
  {
    v24 = CFArrayCreate(allocator, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
    if (!v24)
      return FigSignalErrorAt();
  }
  else
  {
    v24 = 0;
  }
  v33 = *(_OWORD *)a9;
  v34 = *(_QWORD *)(a9 + 16);
  v26 = a10[1];
  v32[0] = *a10;
  v32[1] = v26;
  v32[2] = a10[2];
  v30 = *a13;
  v31 = *((_QWORD *)a13 + 2);
  v28 = *a14;
  v29 = *((_QWORD *)a14 + 2);
  v25 = FigMediaProcessorCreateForVideoCompressionCommon(allocator, a2, a3, a4, a5, a6, a7, v24, &v33, v32, a11, a12, 0, (uint64_t)&v30, (uint64_t)&v28, 0, a15, a16, a17);
  if (v24)
    CFRelease(v24);
  return v25;
}

uint64_t FigSampleBufferProcessorCreateWithVTCompressionSession(const __CFAllocator *a1, int32_t a2, int32_t a3, CMVideoCodecType a4, const __CFDictionary *a5, const __CFDictionary *a6, const __CFAllocator *Allocator, int a8, _QWORD *a9)
{
  const __CFAllocator *v16;
  uint64_t v17;
  uint64_t DerivedStorage;
  __CFDictionary *Mutable;
  CFStringRef v20;
  uint64_t v21;
  CFNumberRef v22;
  const __CFDictionary *v24;
  int valuePtr;

  valuePtr = a8;
  if (!a9)
    return FigSignalErrorAt();
  v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  FigSampleBufferProcessorGetClassID();
  v17 = CMDerivedObjectCreate();
  if (!(_DWORD)v17)
  {
    v24 = a6;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!Allocator || v16 == Allocator)
    {
      Mutable = CFDictionaryCreateMutable(v16, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v20 = CFStringCreateWithFormat(v16, 0, CFSTR("SampleBufferProcessor-VideoCompression-%p"), 0);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA4BA0], v20);
      *(_QWORD *)DerivedStorage = CMMemoryPoolCreate(Mutable);
      if (Mutable)
        CFRelease(Mutable);
      if (v20)
        CFRelease(v20);
      Allocator = CMMemoryPoolGetAllocator(*(CMMemoryPoolRef *)DerivedStorage);
    }
    v21 = VTCompressionSessionCreate(a1, a2, a3, a4, a5, v24, Allocator, (VTCompressionOutputCallback)sbp_vtcs_outputFrame, 0, (VTCompressionSessionRef *)(DerivedStorage + 16));
    if ((_DWORD)v21)
    {
      return v21;
    }
    else
    {
      *(_DWORD *)(DerivedStorage + 8) = a2;
      *(_DWORD *)(DerivedStorage + 12) = a3;
      v22 = CFNumberCreate(v16, kCFNumberSInt32Type, &valuePtr);
      VTSessionSetProperty(*(VTSessionRef *)(DerivedStorage + 16), (CFStringRef)*MEMORY[0x1E0CECFE0], v22);
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      *a9 = 0;
      if (v22)
      {
        CFRelease(v22);
        return 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return v17;
}

uint64_t FigSampleBufferConsumerCreateForFormatWriter(const void *a1, uint64_t a2, uint64_t a3, __int128 *a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t DerivedStorage;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, const __CFString *, uint64_t, uint64_t);

  if (!a1 || !a5)
    return FigSignalErrorAt();
  v10 = *MEMORY[0x1E0C9AE00];
  FigSampleBufferConsumerGetClassID();
  v11 = CMDerivedObjectCreate();
  if (!(_DWORD)v11)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_QWORD *)DerivedStorage = a1;
    v14 = *(_QWORD *)(a3 + 16);
    *(_OWORD *)(DerivedStorage + 24) = *(_OWORD *)a3;
    *(_QWORD *)(DerivedStorage + 40) = v14;
    v15 = *a4;
    *(_QWORD *)(DerivedStorage + 64) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(DerivedStorage + 48) = v15;
    CFRetain(a1);
    *(_DWORD *)(DerivedStorage + 8) = a2;
    if ((*(_BYTE *)(DerivedStorage + 36) & 1) != 0 && (*(_BYTE *)(DerivedStorage + 60) & 1) != 0)
    {
      v16 = *(_QWORD *)DerivedStorage;
      v17 = *(void (**)(uint64_t, uint64_t, const __CFString *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 16);
      if (v17)
        v17(v16, a2, CFSTR("SourceSampleBufferQueue"), v10, DerivedStorage + 16);
    }
    v11 = 0;
    *a5 = 0;
  }
  return v11;
}

uint64_t FigMediaProcessorCreate(uint64_t a1, const void *a2, const void *a3, const void *a4, const void *a5, uint64_t *a6)
{
  uint64_t Instance;
  uint64_t v12;
  uint64_t FigBaseObject;
  void (*v14)(uint64_t, const __CFString *, _QWORD);
  uint64_t v15;
  uint64_t (*v16)(uint64_t, _QWORD, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t (*)(uint64_t), uint64_t);
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t (*)(), uint64_t, uint64_t);
  uint64_t v22;

  if (!a2)
    return FigSignalErrorAt();
  if (!a3)
    return FigSignalErrorAt();
  if (!a4)
    return FigSignalErrorAt();
  if (!a5)
    return FigSignalErrorAt();
  if (!a6)
    return FigSignalErrorAt();
  MEMORY[0x19402F294](&sRegisterMediaProcessorTypeOnce, RegisterFigMediaProcessorType);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v12 = Instance;
  *(_QWORD *)(Instance + 24) = a2;
  CFRetain(a2);
  *(_QWORD *)(v12 + 32) = a3;
  CFRetain(a3);
  *(_QWORD *)(v12 + 40) = a4;
  CFRetain(a4);
  *(_QWORD *)(v12 + 64) = a5;
  CFRetain(a5);
  FigBaseObject = FigActivitySchedulerGetFigBaseObject(*(_QWORD *)(v12 + 64));
  v14 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v14)
    v14(FigBaseObject, CFSTR("ThrottleForBackground"), *MEMORY[0x1E0C9AE40]);
  v15 = *(_QWORD *)(v12 + 24);
  v16 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v16)
    goto LABEL_21;
  v17 = v16(v15, mediaprocessor_OutputSampleBuffer, v12);
  if ((_DWORD)v17)
    goto LABEL_25;
  v18 = *(_QWORD *)(v12 + 64);
  v19 = *(uint64_t (**)(uint64_t, uint64_t (*)(uint64_t), uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 8);
  if (!v19)
  {
LABEL_21:
    v22 = 4294954514;
    goto LABEL_22;
  }
  v17 = v19(v18, mediaprocessor_ProcessUntilHighWaterMet, v12);
  if ((_DWORD)v17)
  {
LABEL_25:
    v22 = v17;
    goto LABEL_22;
  }
  *(_BYTE *)(v12 + 72) = 1;
  v20 = *(_QWORD *)(v12 + 40);
  v21 = *(uint64_t (**)(uint64_t, uint64_t (*)(), uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 32);
  if (!v21)
    goto LABEL_21;
  v17 = v21(v20, mediaprocessor_OutputBelowLowWater, v12, v12 + 48);
  if ((_DWORD)v17)
    goto LABEL_25;
  *(_BYTE *)(v12 + 56) = 1;
  CMNotificationCenterGetDefaultLocalCenter();
  v17 = CMNotificationCenterAddListener();
  if ((_DWORD)v17)
    goto LABEL_25;
  CMNotificationCenterGetDefaultLocalCenter();
  v17 = CMNotificationCenterAddListener();
  if ((_DWORD)v17)
    goto LABEL_25;
  CMNotificationCenterGetDefaultLocalCenter();
  v17 = CMNotificationCenterAddListener();
  if ((_DWORD)v17)
    goto LABEL_25;
  CMNotificationCenterGetDefaultLocalCenter();
  v22 = CMNotificationCenterAddListener();
  if ((_DWORD)v22)
  {
LABEL_22:
    CFRelease((CFTypeRef)v12);
    return v22;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  *a6 = v12;
  return v22;
}

uint64_t RegisterFigMediaProcessorType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigMediaProcessorTypeID = result;
  return result;
}

uint64_t mediaprocessor_Init(_OWORD *a1)
{
  uint64_t result;

  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  result = FigReentrantMutexCreate();
  *((_QWORD *)a1 + 10) = result;
  return result;
}

uint64_t sbp_vtcs_setOutputCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 24) = a2;
  *(_QWORD *)(DerivedStorage + 40) = a3;
  return 0;
}

opaqueCMBufferQueue *otfw_installLowWaterTrigger(void *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  opaqueCMBufferQueue *result;
  uint64_t v10;
  CMTime v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = *(opaqueCMBufferQueue **)(DerivedStorage + 16);
  if (result)
  {
    *(_QWORD *)(DerivedStorage + 72) = a2;
    *(_QWORD *)(DerivedStorage + 80) = a3;
    v11 = *(CMTime *)(DerivedStorage + 48);
    result = (opaqueCMBufferQueue *)CMBufferQueueInstallTrigger(result, (CMBufferQueueTriggerCallback)otfw_LowWater, a1, 2, &v11, (CMBufferQueueTriggerToken *)(DerivedStorage + 88));
    v10 = *(_QWORD *)(DerivedStorage + 88);
  }
  else
  {
    v10 = 0;
  }
  *a4 = v10;
  return result;
}

uint64_t FigMediaProcessorGetVTCompressionSession(uint64_t a1)
{
  FigMediaProcessorGetSampleBufferProcessor(a1);
  return FigSampleBufferProcessorGetVTCompressionSession();
}

uint64_t FigMediaProcessorGetSampleBufferProcessor(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 16))
    return *(_QWORD *)(a1 + 24);
  FigSignalErrorAt();
  return 0;
}

uint64_t FigSampleBufferProcessorGetVTCompressionSession()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    if (*(_BYTE *)(result + 39))
      return 0;
    else
      return *(_QWORD *)(result + 16);
  }
  return result;
}

uint64_t FigMediaProcessorCreateForAudioCompressionWithFormatWriter(const __CFAllocator *a1, const opaqueCMFormatDescription *a2, uint64_t a3, size_t a4, AudioChannelLayout *a5, const __CFDictionary *a6, const void *a7, const void *a8, unsigned int a9, uint64_t a10, __int128 *a11, const void *a12, int a13, uint64_t *a14)
{
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  v17 = *(_OWORD *)a10;
  v18 = *(_QWORD *)(a10 + 16);
  v15 = *a11;
  v16 = *((_QWORD *)a11 + 2);
  return FigMediaProcessorCreateForAudioCompressionCommon(a1, a2, a3, a4, a5, a6, a7, a8, a9, 0, &v17, (uint64_t)&v15, a12, a13, a14);
}

uint64_t FigSampleBufferProcessorCreateWithAudioCompression(const __CFAllocator *a1, const opaqueCMFormatDescription *a2, uint64_t a3, size_t a4, AudioChannelLayout *a5, const __CFDictionary *a6, const void *a7, _QWORD *a8)
{
  const __CFAllocator *v15;
  uint64_t v16;
  uint64_t DerivedStorage;
  uint64_t v18;
  uint64_t v19;
  const opaqueCMFormatDescription *v20;
  const AudioStreamBasicDescription *StreamBasicDescription;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  const AudioChannelLayout *ChannelLayout;
  _DWORD *v26;
  void *v27;
  int GDRCountForFormatID;
  CFNumberRef v29;
  uint64_t v30;
  _BOOL4 v32;
  const __CFNumber *v33;
  const __CFNumber *v34;
  CFTypeID TypeID;
  const __CFNumber *v36;
  const __CFNumber *v37;
  CFTypeID v38;
  UInt32 v39;
  int v40;
  int v41;
  int v42;
  _BOOL4 v43;
  _DWORD *v44;
  const void *v45;
  const void **v46;
  const void *v47;
  CFTypeID v48;
  CFTypeID v49;
  const void *v50;
  const void *v51;
  OSType v52;
  BOOL v53;
  AudioConverterRef *v54;
  int v55;
  double *v56;
  double v57;
  unint64_t v58;
  double *v59;
  double v60;
  double v61;
  void *Extension;
  CFTypeID v63;
  uint64_t v64;
  void *v65;
  void *v66;
  UInt32 v67;
  const __CFDictionary *v68;
  size_t v69;
  const AudioChannelLayout *v70;
  OSStatus v71;
  int v72;
  _DWORD *v73;
  size_t v74;
  _DWORD *v75;
  uint64_t v76;
  _DWORD *v77;
  int Int32IfPresent;
  int v79;
  _BOOL4 v80;
  AudioChannelLayout *v81;
  int v82[2];
  CFTypeRef cf;
  UInt32 inPropertyDataSize;
  void *value;
  CMTime v87;
  int v88;
  int v89;
  int v90;
  int inPropertyData;
  size_t sizeOut;
  __int16 valuePtr;
  uint64_t v94;
  uint64_t v95;
  char v96;
  int v97;
  AudioClassDescription inClassDescriptions;
  uint64_t v99;
  UInt32 ioPropertyDataSize;
  Boolean outWritable[2];
  AudioStreamBasicDescription outPropertyData;
  AudioStreamBasicDescription inSourceFormat;
  void *values;
  CFTypeRef v105;

  values = 0;
  v105 = 0;
  *(_WORD *)outWritable = 0;
  v99 = 0;
  v97 = 0;
  v96 = 0;
  v94 = 0;
  v95 = 0;
  valuePtr = 0;
  sizeOut = 0;
  v90 = 75;
  inPropertyData = 0;
  v88 = 3;
  v89 = 3;
  if (!a8)
    return FigSignalErrorAt();
  memset(&inSourceFormat, 0, sizeof(inSourceFormat));
  memset(&outPropertyData, 0, sizeof(outPropertyData));
  ioPropertyDataSize = 0;
  *(_QWORD *)&inClassDescriptions.mType = 0;
  inClassDescriptions.mManufacturer = 0;
  v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  FigSampleBufferProcessorGetClassID();
  v16 = CMDerivedObjectCreate();
  if ((_DWORD)v16)
    goto LABEL_58;
  cf = a7;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v18 = DerivedStorage;
    CMTimeMakeWithSeconds(&v87, 0.5, 1000);
    *(CMTime *)(v18 + 304) = v87;
    v19 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)(v18 + 232) = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)(v18 + 248) = *(_QWORD *)(v19 + 16);
    v20 = (const opaqueCMFormatDescription *)FigFormatDescriptionRetain();
    *(_QWORD *)(v18 + 24) = v20;
    StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(v20);
    if (!StreamBasicDescription)
    {
      v27 = 0;
      v30 = 4294954586;
      goto LABEL_60;
    }
    if (StreamBasicDescription->mFormatID != 1819304813)
      goto LABEL_57;
    v22 = *(_OWORD *)&StreamBasicDescription->mSampleRate;
    v23 = *(_OWORD *)&StreamBasicDescription->mBytesPerPacket;
    *(_QWORD *)&inSourceFormat.mBitsPerChannel = *(_QWORD *)&StreamBasicDescription->mBitsPerChannel;
    *(_OWORD *)&inSourceFormat.mSampleRate = v22;
    *(_OWORD *)&inSourceFormat.mBytesPerPacket = v23;
    v24 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)&outPropertyData.mSampleRate = *(_OWORD *)a3;
    *(_OWORD *)&outPropertyData.mBytesPerPacket = v24;
    *(_QWORD *)&outPropertyData.mBitsPerChannel = *(_QWORD *)(a3 + 32);
    *(_QWORD *)v82 = StreamBasicDescription;
    if (outPropertyData.mFormatID && *(_QWORD *)&outPropertyData.mFormatID != 1819304813)
    {
      if (!outPropertyData.mChannelsPerFrame)
        facPickBestDestinationNumberOfChannels((uint64_t)StreamBasicDescription, &outPropertyData);
      ioPropertyDataSize = 40;
      if (AudioFormatGetProperty(0x666D7469u, 0, 0, &ioPropertyDataSize, &outPropertyData))
        goto LABEL_57;
    }
    else
    {
      *(_BYTE *)(v18 + 17) = 1;
    }
    ChannelLayout = CMAudioFormatDescriptionGetChannelLayout(a2, &sizeOut);
    v26 = *(_DWORD **)v82;
    if (*(_DWORD *)(*(_QWORD *)v82 + 28) != outPropertyData.mChannelsPerFrame)
    {
      FigCFDictionaryGetBooleanIfPresent();
      v26 = *(_DWORD **)v82;
    }
    if (*(_BYTE *)(v18 + 17))
    {
      *(_QWORD *)(v18 + 32) = FigFormatDescriptionRetain();
      v27 = 0;
      *(_BYTE *)(v18 + 164) = FigAudioFormatDescriptionEmploysDependentPackets();
      goto LABEL_13;
    }
    if (outWritable[1])
    {
      v81 = (AudioChannelLayout *)ChannelLayout;
    }
    else
    {
      v39 = v26[7];
      if (v39 == 2 && outPropertyData.mChannelsPerFrame == 1)
      {
        v40 = v26[3];
        if ((v40 & 4) != 0)
        {
          v41 = v26[8];
          if (v41 != 32 && v41 != 16)
            goto LABEL_57;
        }
        if ((v40 & 1) != 0)
        {
          if ((v40 & 0x20) != 0 || v26[8] != 32)
            goto LABEL_57;
        }
        else if ((v40 & 0x20) != 0)
        {
          goto LABEL_57;
        }
        inSourceFormat.mChannelsPerFrame = 1;
        inSourceFormat.mBytesPerFrame >>= 1;
        inSourceFormat.mBytesPerPacket >>= 1;
        sizeOut = a4;
        if ((v40 & 2) != 0 || v26[2] != 1819304813)
          inSourceFormat.mFormatFlags ^= 2u;
        v44 = malloc_type_calloc(1uLL, 0x18uLL, 0x10800404ACF7207uLL);
        *(_QWORD *)(v18 + 176) = v44;
        v81 = a5;
        if (v44)
        {
          *v44 = 1;
          v44[2] = outPropertyData.mChannelsPerFrame;
          v81 = a5;
        }
      }
      else
      {
        v81 = (AudioChannelLayout *)ChannelLayout;
        if (v39 > outPropertyData.mChannelsPerFrame)
          goto LABEL_57;
      }
    }
    v32 = 1;
    if (a5 && !outWritable[1] && v81)
      v32 = (v81->mChannelLayoutTag != -266338299 || a5->mChannelLayoutTag != -266338299)
         && outPropertyData.mFormatID != 1634754915
         && outPropertyData.mFormatID != 1902211171
         && outPropertyData.mFormatID != 1667330147;
    v80 = v32;
    if (!a6)
    {
      Int32IfPresent = 0;
      v79 = 0;
      v42 = 0;
      v43 = 1;
      goto LABEL_84;
    }
    value = 0;
    v33 = (const __CFNumber *)CFDictionaryGetValue(a6, CFSTR("FigAudioCompressionOption_AudioConverterEncodeBitRate"));
    if (v33)
    {
      v34 = v33;
      TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(v34))
        CFNumberGetValue(v34, kCFNumberIntType, &v97);
    }
    FigCFDictionaryGetBooleanIfPresent();
    v36 = (const __CFNumber *)CFDictionaryGetValue(a6, CFSTR("FigAudioCompressionOption_BitRateControlMode"));
    if (v36 && (v37 = v36, v38 = CFNumberGetTypeID(), v38 == CFGetTypeID(v37)))
    {
      CFNumberGetValue(v37, kCFNumberIntType, &v95);
      if ((_DWORD)v95 == 3)
        Int32IfPresent = FigCFDictionaryGetInt32IfPresent();
      else
        Int32IfPresent = 0;
      v79 = 1;
    }
    else
    {
      Int32IfPresent = 0;
      v79 = 0;
    }
    FigCFDictionaryGetInt32IfPresent();
    v45 = CFDictionaryGetValue(a6, CFSTR("kFigAudioCompressionOption_UseHardwareEncoderIfPresent"));
    v46 = (const void **)MEMORY[0x1E0C9AE50];
    if (v45)
    {
      v47 = v45;
      v48 = CFBooleanGetTypeID();
      v49 = CFGetTypeID(v47);
      v50 = *v46;
      if (v48 == v49)
      {
        v43 = v47 == v50;
LABEL_79:
        v51 = CFDictionaryGetValue(a6, CFSTR("FigAudioCompressionOption_TrimSampleBufferDurations"));
        *(_BYTE *)(v18 + 225) = v51 == v50;
        if (v51 == v50)
          *(_QWORD *)(v18 + 264) = CFArrayCreateMutable(v15, 0, MEMORY[0x1E0C9B378]);
        FigCFDictionaryGetInt32IfPresent();
        v42 = FigCFDictionaryGetInt32IfPresent();
        if (CFDictionaryGetValueIfPresent(a6, CFSTR("FigAudioCompressionOption_PreferredOutputBufferDuration"), (const void **)&value))
        {
          CMTimeMakeFromDictionary(&v87, (CFDictionaryRef)value);
          *(CMTime *)(v18 + 304) = v87;
        }
        FigCFDictionaryGetInt32IfPresent();
        FigCFDictionaryGetInt32IfPresent();
        FigCFDictionaryGetInt32IfPresent();
LABEL_84:
        if (findCodecs(outPropertyData.mFormatID, (_DWORD *)&v99 + 1, &v99))
          goto LABEL_57;
        inClassDescriptions.mType = 1634037347;
        inClassDescriptions.mSubType = outPropertyData.mFormatID;
        v52 = HIDWORD(v99);
        if (HIDWORD(v99))
          v53 = !v43;
        else
          v53 = 1;
        if (v53)
          v52 = v99;
        inClassDescriptions.mManufacturer = v52;
        v54 = (AudioConverterRef *)(v18 + 64);
        if (AudioConverterNewSpecific(&inSourceFormat, &outPropertyData, 1u, &inClassDescriptions, (AudioConverterRef *)(v18 + 64)))
        {
          goto LABEL_57;
        }
        if (!inPropertyData)
        {
          v55 = *(_DWORD *)(*(_QWORD *)v82 + 32);
          inPropertyData = v55;
          if ((*(_BYTE *)(*(_QWORD *)v82 + 12) & 1) != 0)
            inPropertyData = -v55;
        }
        AudioConverterSetProperty(*v54, 0x61636264u, 4u, &inPropertyData);
        if (v81)
        {
          if (AudioConverterSetProperty(*v54, 0x69636C20u, sizeOut, v81)
            || !v80 && AudioConverterSetProperty(*v54, 0x6F636C20u, a4, a5))
          {
            goto LABEL_57;
          }
        }
        if (v97 >= 1)
        {
          if (v96)
          {
            LODWORD(v87.value) = 0;
            if (!AudioConverterGetPropertyInfo(*v54, 0x62727472u, (UInt32 *)&v87, 0))
            {
              v56 = (double *)malloc_type_malloc(LODWORD(v87.value), 0x3C1DFA19uLL);
              if (!AudioConverterGetProperty(*v54, 0x62727472u, (UInt32 *)&v87, v56))
              {
                if (LODWORD(v87.value) >= 0x10)
                {
                  v58 = (unint64_t)LODWORD(v87.value) >> 4;
                  v59 = v56 + 1;
                  v57 = (double)v97;
                  do
                  {
                    v60 = *v59;
                    v59 += 2;
                    v61 = v60;
                    if (v60 < (double)v97)
                      v57 = v61;
                    --v58;
                  }
                  while (v58);
                }
                else
                {
                  v57 = (double)v97;
                }
                v97 = (int)v57;
              }
              free(v56);
            }
          }
          if (AudioConverterSetProperty(*v54, 0x62726174u, 4u, &v97))
            goto LABEL_57;
        }
        if (HIDWORD(v95) && AudioConverterSetProperty(*v54, 0x73726361u, 4u, (char *)&v95 + 4)
          || v79
          && (AudioConverterSetProperty(*v54, 0x61636266u, 4u, &v95)
           || Int32IfPresent && AudioConverterSetProperty(*v54, 0x76627271u, 4u, (char *)&v94 + 4)))
        {
          goto LABEL_57;
        }
        Extension = (void *)CMFormatDescriptionGetExtension(*(CMFormatDescriptionRef *)(v18 + 24), (CFStringRef)*MEMORY[0x1E0CA2240]);
        values = Extension;
        if (Extension)
        {
          v63 = CFGetTypeID(Extension);
          if (v63 == CFDictionaryGetTypeID()
            && CFDictionaryGetCount((CFDictionaryRef)values) >= 1
            && !AudioConverterGetPropertyInfo(*v54, 0x69736F65u, &ioPropertyDataSize, outWritable)
            && ioPropertyDataSize
            && outWritable[0]
            && !AudioConverterSetProperty(*v54, 0x69736F65u, 8u, &values))
          {
            values = 0;
          }
        }
        if (v42 && AudioConverterSetProperty(*v54, 0x63647175u, 4u, &v94))
          goto LABEL_57;
        if (!outWritable[1])
        {
LABEL_139:
          ioPropertyDataSize = 40;
          if (!AudioConverterGetProperty(*v54, 0x61636F64u, &ioPropertyDataSize, &outPropertyData))
          {
            ioPropertyDataSize = 0;
            outWritable[0] = 0;
            if (!AudioConverterGetPropertyInfo(*v54, 0x67707072u, &ioPropertyDataSize, outWritable)
              && ioPropertyDataSize == 1
              && outWritable[0])
            {
              LOBYTE(v87.value) = 0;
              ioPropertyDataSize = 1;
              AudioConverterSetProperty(*v54, 0x67707072u, 1u, &v87);
            }
            v67 = 0;
            v27 = 0;
            if (!AudioConverterGetPropertyInfo(*v54, 0x636D6763u, &ioPropertyDataSize, 0) && ioPropertyDataSize)
            {
              v27 = malloc_type_malloc(ioPropertyDataSize, 0x1C04B8F9uLL);
              if (AudioConverterGetProperty(*v54, 0x636D6763u, &ioPropertyDataSize, v27))
                goto LABEL_160;
              v67 = ioPropertyDataSize;
            }
            if (values)
              v68 = CFDictionaryCreate(a1, MEMORY[0x1E0CA2240], (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            else
              v68 = 0;
            if (v80)
              v69 = a4;
            else
              v69 = 0;
            if (v80)
              v70 = a5;
            else
              v70 = 0;
            v71 = CMAudioFormatDescriptionCreate(a1, &outPropertyData, v69, v70, v67, v27, v68, (CMAudioFormatDescriptionRef *)(v18 + 32));
            if (v68)
              CFRelease(v68);
            if (!v71)
            {
              v72 = FigAudioFormatDescriptionEmploysDependentPackets();
              *(_BYTE *)(v18 + 164) = v72;
              *(_QWORD *)(v18 + 168) = 0;
              if (v72)
              {
                if (!AudioConverterGetPropertyInfo(*v54, 0x61737066u, &ioPropertyDataSize, outWritable)
                  && ioPropertyDataSize == 4
                  && outWritable[0])
                {
                  AudioConverterSetProperty(*v54, 0x61737066u, 4u, &v90);
                }
                if (!AudioConverterGetPropertyInfo(*v54, 0x63647263u, &ioPropertyDataSize, outWritable)
                  && ioPropertyDataSize == 4
                  && outWritable[0])
                {
                  AudioConverterSetProperty(*v54, 0x63647263u, 4u, &v89);
                }
                if (!AudioConverterGetPropertyInfo(*v54, 0x63737263u, &ioPropertyDataSize, outWritable)
                  && ioPropertyDataSize == 4
                  && outWritable[0])
                {
                  AudioConverterSetProperty(*v54, 0x63737263u, 4u, &v88);
                }
              }
              if (outPropertyData.mBytesPerPacket
                || (ioPropertyDataSize = 4,
                    !AudioConverterGetProperty(*(AudioConverterRef *)(v18 + 64), 0x70616B62u, &ioPropertyDataSize, (void *)(v18 + 40))))
              {
                ioPropertyDataSize = 8;
                if (AudioConverterGetProperty(*(AudioConverterRef *)(v18 + 64), 0x6877727Au, &ioPropertyDataSize, (void *)(v18 + 72)))
                {
                  *(_QWORD *)(v18 + 72) = 0;
                }
                if ((*(_BYTE *)(*(_QWORD *)v82 + 12) & 0x20) != 0)
                {
                  v74 = 16 * (*(_DWORD *)(*(_QWORD *)v82 + 28) - 1) + 24;
                  *(_QWORD *)(v18 + 112) = v74;
                  v75 = malloc_type_calloc(1uLL, v74, 0xA338E0E6uLL);
                  *(_QWORD *)(v18 + 104) = v75;
                  if (v75)
                  {
                    v76 = *(unsigned int *)(*(_QWORD *)v82 + 28);
                    *v75 = v76;
                    if ((_DWORD)v76)
                    {
                      v77 = v75 + 2;
                      do
                      {
                        *v77 = 1;
                        v77 += 4;
                        --v76;
                      }
                      while (v76);
                    }
                  }
                }
                else
                {
                  *(_QWORD *)(v18 + 112) = 24;
                  v73 = malloc_type_calloc(1uLL, 0x18uLL, 0xB149BB3FuLL);
                  *(_QWORD *)(v18 + 104) = v73;
                  if (v73)
                  {
                    *v73 = 1;
                    v73[2] = *(_DWORD *)(*(_QWORD *)v82 + 28);
                  }
                }
LABEL_13:
                if (*(_BYTE *)(v18 + 164)
                  || (GDRCountForFormatID = getGDRCountForFormatID(*(OpaqueAudioConverter **)(v18 + 64), *(CMAudioFormatDescriptionRef *)(v18 + 32), (char *)(v18 + 224)), valuePtr = GDRCountForFormatID, !GDRCountForFormatID)|| (v29 = CFNumberCreate(v15, kCFNumberSInt16Type, &valuePtr), (*(_QWORD *)(v18 + 216) = v29) != 0))
                {
                  if (*(_BYTE *)(v18 + 225))
                    *(_DWORD *)(v18 + 228) = (int)CMAudioFormatDescriptionGetMostCompatibleFormat(*(CMAudioFormatDescriptionRef *)(v18 + 32))->mASBD.mSampleRate;
                  if (cf)
                  {
                    *(_QWORD *)(v18 + 280) = cf;
                    CFRetain(cf);
                  }
                  v30 = 0;
                  *a8 = v105;
                  v105 = 0;
LABEL_62:
                  if (v27)
                    free(v27);
                  return v30;
                }
              }
            }
LABEL_160:
            v30 = FigSignalErrorAt();
LABEL_60:
            if (v105)
              CFRelease(v105);
            goto LABEL_62;
          }
LABEL_57:
          v16 = FigSignalErrorAt();
LABEL_58:
          v30 = v16;
LABEL_59:
          v27 = 0;
          goto LABEL_60;
        }
        if (inSourceFormat.mChannelsPerFrame <= outPropertyData.mChannelsPerFrame)
        {
          if (inSourceFormat.mChannelsPerFrame != 1)
            goto LABEL_139;
          v66 = malloc_type_calloc(outPropertyData.mChannelsPerFrame, 4uLL, 0x100004052888210uLL);
          v30 = AudioConverterSetProperty(*v54, 0x63686D70u, 4 * outPropertyData.mChannelsPerFrame, v66);
          v65 = v66;
        }
        else
        {
          LODWORD(value) = 1;
          v64 = AudioConverterSetProperty(*v54, 0x646D6978u, 4u, &value);
          if ((_DWORD)v64)
          {
            v30 = v64;
            goto LABEL_189;
          }
          inPropertyDataSize = 0;
          v87.value = 0;
          v16 = facCopyMixMapForInputs(inSourceFormat.mChannelsPerFrame, v81, sizeOut, outPropertyData.mChannelsPerFrame, a5, (char **)&v87, &inPropertyDataSize);
          if ((_DWORD)v16)
            goto LABEL_58;
          v30 = AudioConverterSetProperty(*v54, 0x6D6D6170u, inPropertyDataSize, (const void *)v87.value);
          v65 = (void *)v87.value;
        }
        free(v65);
        if (!(_DWORD)v30)
          goto LABEL_139;
LABEL_189:
        FigSignalErrorAt();
        goto LABEL_59;
      }
    }
    else
    {
      v50 = (const void *)*MEMORY[0x1E0C9AE50];
    }
    v43 = 1;
    goto LABEL_79;
  }
  return FigSignalErrorAt();
}

uint64_t sbp_fac_setOutputCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 48) = a2;
  *(_QWORD *)(DerivedStorage + 56) = a3;
  return 0;
}

uint64_t FigMediaProcessorGo(uint64_t a1)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  if (*(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  *(_BYTE *)(a1 + 73) = 1;
  FigMemoryBarrier();
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v4)
    v4(v3);
  return 0;
}

uint64_t mediaprocessor_ProcessUntilHighWaterMet(uint64_t a1)
{
  const __CFAllocator *v2;
  const CFDictionaryKeyCallBacks *v3;
  const CFDictionaryValueCallBacks *v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t);
  int v7;
  const __CFAllocator *v8;
  CFDictionaryRef v9;
  CFDictionaryRef v10;
  CFTypeRef cf;
  char v13;
  int valuePtr;

  valuePtr = 0;
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 80));
  if (*(_BYTE *)(a1 + 73))
  {
    v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
    v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    do
    {
      v5 = *(_QWORD *)(a1 + 40);
      v6 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v6 && v6(v5))
        break;
      v13 = 0;
      v7 = mediaprocessor_DequeueAndProcessSampleBuffer(a1, &v13);
      valuePtr = v7;
      if (v13)
        break;
      if (v7)
      {
        cf = 0;
        cf = CFNumberCreate(v2, kCFNumberIntType, &valuePtr);
        if (cf)
        {
          v8 = CFGetAllocator((CFTypeRef)a1);
          v9 = CFDictionaryCreate(v8, (const void **)kFigMediaProcessorParameter_Result, &cf, 1, v3, v4);
          if (v9)
          {
            v10 = v9;
            CMNotificationCenterGetDefaultLocalCenter();
            CMNotificationCenterPostNotification();
            CFRelease(v10);
          }
          if (cf)
            CFRelease(cf);
        }
      }
    }
    while (*(_BYTE *)(a1 + 73));
  }
  return MEMORY[0x19402EA24](*(_QWORD *)(a1 + 80));
}

opaqueCMBufferQueue *otfw_isQueueAtOrAboveHighWater()
{
  uint64_t DerivedStorage;
  opaqueCMBufferQueue *result;
  CMTime v2;
  CMTime time1;
  CMTime v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v4, 0, sizeof(v4));
  result = *(opaqueCMBufferQueue **)(DerivedStorage + 16);
  if (result)
  {
    CMBufferQueueGetDuration(&v4, result);
    time1 = v4;
    v2 = *(CMTime *)(DerivedStorage + 24);
    return (opaqueCMBufferQueue *)(CMTimeCompare(&time1, &v2) >= 0);
  }
  return result;
}

uint64_t FigMediaProcessorIsAtEndOfOutputData(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v3)
    return 0;
  result = v3(v2);
  if ((_DWORD)result)
    return *(_BYTE *)(a1 + 89) != 0;
  return result;
}

uint64_t figMovieWriter_BeginSession(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  const void *ValueAtIndex;
  uint64_t result;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 335))
    return FigSignalErrorAt();
  v4 = DerivedStorage;
  Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 488));
  if ((*(_BYTE *)(v4 + 36) & 1) != 0)
    return FigSignalErrorAt();
  v6 = Count;
  if (Count < 1)
  {
LABEL_7:
    result = 0;
    *(_QWORD *)(v4 + 504) = *(_QWORD *)(v4 + 496);
    v10 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)(v4 + 24) = *(_OWORD *)a2;
    *(_QWORD *)(v4 + 40) = v10;
  }
  else
  {
    v7 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v4 + 488), v7);
      v11 = *(_OWORD *)a2;
      v12 = *(_QWORD *)(a2 + 16);
      result = trackBeginSession((uint64_t)ValueAtIndex, &v11, 1);
      if ((_DWORD)result)
        break;
      if (v6 == ++v7)
        goto LABEL_7;
    }
  }
  return result;
}

double getMediaDecodeDuration@<D0>(uint64_t a1@<X0>, CMTime *a2@<X8>)
{
  CFIndex Count;
  uint64_t v5;
  __int128 v6;
  char *ValueAtIndex;
  int32_t v8;
  CMTime v10;
  CMTime v11;
  CMTime rhs;
  CMTime lhs;

  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 424));
  v5 = MEMORY[0x1E0CA2E68];
  v6 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&a2->value = *MEMORY[0x1E0CA2E68];
  a2->epoch = *(_QWORD *)(v5 + 16);
  if (Count)
  {
    ValueAtIndex = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 424), Count - 1);
    lhs = *(CMTime *)(ValueAtIndex + 248);
    rhs = *(CMTime *)(ValueAtIndex + 176);
    CMTimeAdd(a2, &lhs, &rhs);
  }
  if ((*(_BYTE *)(a1 + 480) & 1) != 0)
  {
    rhs = *(CMTime *)(a1 + 136);
    v8 = *(_DWORD *)(a1 + 104);
    if (v8)
    {
      lhs = *(CMTime *)(a1 + 136);
      CMTimeConvertScale(&rhs, &lhs, v8, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    }
    v11 = *a2;
    v10 = rhs;
    CMTimeAdd(&lhs, &v11, &v10);
    *(_QWORD *)&v6 = lhs.value;
    *a2 = lhs;
  }
  return *(double *)&v6;
}

uint64_t mediaprocessor_InputDataBecameReady(uint64_t a1, uint64_t a2)
{
  return mediaprocessor_TriggerSchedulingIfOutputIsLow(a2);
}

uint64_t mediaprocessor_TriggerSchedulingIfOutputIsLow(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t (*v6)(uint64_t);

  v2 = *(_QWORD *)(a1 + 40);
  result = CMBaseObjectGetVTable();
  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 24);
  if (v4)
  {
    result = v4(v2);
    if ((_DWORD)result)
    {
      v5 = *(_QWORD *)(a1 + 64);
      result = CMBaseObjectGetVTable();
      v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 16);
      if (v6)
        return v6(v5);
    }
  }
  return result;
}

BOOL otfw_isQueueBelowLowWater()
{
  uint64_t DerivedStorage;
  opaqueCMBufferQueue *v1;
  CMTime v3;
  CMTime time1;
  CMTime v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v5, 0, sizeof(v5));
  v1 = *(opaqueCMBufferQueue **)(DerivedStorage + 16);
  if (!v1)
    return 1;
  CMBufferQueueGetDuration(&v5, v1);
  time1 = v5;
  v3 = *(CMTime *)(DerivedStorage + 48);
  return CMTimeCompare(&time1, &v3) < 1;
}

uint64_t sbp_vtcs_processSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage;
  __CVBuffer *ImageBuffer;
  uint64_t TaggedBufferGroup;
  const opaqueCMFormatDescription *FormatDescription;
  FourCharCode MediaSubType;
  CFDictionaryRef v8;
  void *v9;
  __CVBuffer *v10;
  CMFormatDescriptionRef v11;
  const opaqueCMFormatDescription *v12;
  uint64_t v13;
  const void *v14;
  const __CFString *v15;
  const __CFString *v16;
  const __CFAllocator *v17;
  const __CFDictionary *Extensions;
  const __CFDictionary *v19;
  const void *Value;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const __CFString *v26;
  const void *v27;
  CFTypeRef v28;
  CFTypeRef v29;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  _OWORD *v32;
  int v33;
  char v34;
  uint64_t v35;
  int v36;
  int v37;
  __CFDictionary *Mutable;
  __CFDictionary *v39;
  OpaqueVTCompressionSession *v40;
  uint64_t v41;
  CFTypeID v43;
  OpaqueCMBlockBuffer *DataBuffer;
  OpaqueCMBlockBuffer *v45;
  const __CFAllocator *v46;
  uint64_t Contiguous;
  const opaqueCMFormatDescription *v48;
  CMVideoDimensions Dimensions;
  FourCharCode v50;
  const __CFNumber *Extension;
  const __CFNumber *v52;
  CFTypeID v53;
  size_t v54;
  const __CFDictionary *pixelBufferAttributes;
  const CFDictionaryKeyCallBacks *v56;
  const CFDictionaryValueCallBacks *v57;
  uint64_t v58;
  const __CFDictionary *v59;
  const __CFDictionary *v60;
  const __CFDictionary *v61;
  const __CFDictionary *v62;
  const __CFString *v63;
  CFPropertyListRef v64;
  const void *v65;
  CFTypeID v66;
  const __CFString *v67;
  CFPropertyListRef v68;
  const void *v69;
  CFTypeID v70;
  const __CFString *v71;
  CFPropertyListRef v72;
  const void *v73;
  CFTypeID v74;
  const __CFString *propertyKey;
  const __CFString *v76;
  uint64_t v77;
  uint64_t v78;
  CMTime v79;
  CMTime duration;
  CMTime v81;
  size_t valuePtr;
  void *values;
  void *keys;
  __int128 propertyValueOut;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  CMTime v89;
  size_t totalLengthOut;
  CMTimeScale timescale;
  _BYTE lhs[32];
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  ImageBuffer = CMSampleBufferGetImageBuffer(a2);
  TaggedBufferGroup = FigSampleBufferGetTaggedBufferGroup();
  memset(&v81, 0, sizeof(v81));
  CMSampleBufferGetPresentationTimeStamp(&v81, a2);
  if (ImageBuffer)
    goto LABEL_7;
  FormatDescription = CMSampleBufferGetFormatDescription(a2);
  MediaSubType = CMFormatDescriptionGetMediaSubType(FormatDescription);
  v8 = CVPixelFormatDescriptionCreateWithPixelFormatType(0, MediaSubType);
  if (!v8
    || (CFRelease(v8),
        *(_QWORD *)&propertyValueOut = 0,
        v89.value = 0,
        totalLengthOut = 0,
        v9 = (void *)*MEMORY[0x1E0CA8FF0],
        values = 0,
        keys = v9,
        !a2))
  {
    ImageBuffer = 0;
    goto LABEL_7;
  }
  v10 = CMSampleBufferGetImageBuffer(a2);
  *(_QWORD *)lhs = v10;
  if (v10)
  {
    ImageBuffer = v10;
    CVBufferRetain(v10);
    goto LABEL_7;
  }
  DataBuffer = CMSampleBufferGetDataBuffer(a2);
  if (!DataBuffer || (v45 = DataBuffer, !CMBlockBufferGetDataLength(DataBuffer)))
  {
    Contiguous = FigSignalErrorAt();
LABEL_113:
    v35 = Contiguous;
    ImageBuffer = 0;
    pixelBufferAttributes = 0;
    goto LABEL_103;
  }
  v46 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Contiguous = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v45, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, 0, (CMBlockBufferRef *)&propertyValueOut);
  if ((_DWORD)Contiguous)
    goto LABEL_113;
  Contiguous = CMBlockBufferGetDataPointer((CMBlockBufferRef)propertyValueOut, 0, 0, &totalLengthOut, (char **)&v89);
  if ((_DWORD)Contiguous)
    goto LABEL_113;
  v48 = CMSampleBufferGetFormatDescription(a2);
  Dimensions = CMVideoFormatDescriptionGetDimensions(v48);
  v50 = CMFormatDescriptionGetMediaSubType(v48);
  Extension = (const __CFNumber *)CMFormatDescriptionGetExtension(v48, (CFStringRef)*MEMORY[0x1E0CA2168]);
  v78 = TaggedBufferGroup;
  if (Extension && (v52 = Extension, v53 = CFGetTypeID(Extension), v53 == CFNumberGetTypeID()))
  {
    valuePtr = 0;
    CFNumberGetValue(v52, kCFNumberCFIndexType, &valuePtr);
    v54 = valuePtr;
    if ((valuePtr & 0x8000000000000000) != 0)
    {
      v35 = FigSignalErrorAt();
      ImageBuffer = 0;
      pixelBufferAttributes = 0;
LABEL_115:
      TaggedBufferGroup = v78;
      goto LABEL_103;
    }
  }
  else if (HIDWORD(*(unint64_t *)&Dimensions))
  {
    v54 = totalLengthOut / (*(uint64_t *)&Dimensions >> 32);
  }
  else
  {
    v54 = 0;
  }
  v56 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v57 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  values = CFDictionaryCreate(v46, 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  pixelBufferAttributes = CFDictionaryCreate(v46, (const void **)&keys, (const void **)&values, 1, v56, v57);
  v58 = CVPixelBufferCreateWithBytes(v46, Dimensions.width, *(uint64_t *)&Dimensions >> 32, v50, (void *)v89.value, v54, (CVPixelBufferReleaseBytesCallback)sbp_vtcs_releaseCMBlockBuffer, (void *)propertyValueOut, pixelBufferAttributes, (CVPixelBufferRef *)lhs);
  if ((_DWORD)v58)
  {
    v35 = v58;
    ImageBuffer = 0;
    goto LABEL_115;
  }
  *(_QWORD *)&propertyValueOut = 0;
  v59 = CMCopyDictionaryOfAttachments(v46, a2, 0);
  TaggedBufferGroup = v78;
  if (v59)
  {
    v60 = v59;
    CVBufferSetAttachments(*(CVBufferRef *)lhs, v59, kCVAttachmentMode_ShouldNotPropagate);
    CFRelease(v60);
  }
  v61 = CMCopyDictionaryOfAttachments(v46, a2, 1u);
  if (v61)
  {
    v62 = v61;
    CVBufferSetAttachments(*(CVBufferRef *)lhs, v61, kCVAttachmentMode_ShouldPropagate);
    CFRelease(v62);
  }
  v63 = (const __CFString *)*MEMORY[0x1E0CA8D68];
  if (sbp_CVBufferAttachmentEmpty(*(__CVBuffer **)lhs, (const __CFString *)*MEMORY[0x1E0CA8D68]))
  {
    v64 = CMFormatDescriptionGetExtension(v48, v63);
    if (v64)
    {
      v65 = v64;
      v66 = CFGetTypeID(v64);
      if (v66 == CFStringGetTypeID())
        CVBufferSetAttachment(*(CVBufferRef *)lhs, v63, v65, kCVAttachmentMode_ShouldPropagate);
    }
  }
  v67 = (const __CFString *)*MEMORY[0x1E0CA8E98];
  if (sbp_CVBufferAttachmentEmpty(*(__CVBuffer **)lhs, (const __CFString *)*MEMORY[0x1E0CA8E98]))
  {
    v68 = CMFormatDescriptionGetExtension(v48, v67);
    if (v68)
    {
      v69 = v68;
      v70 = CFGetTypeID(v68);
      if (v70 == CFStringGetTypeID())
        CVBufferSetAttachment(*(CVBufferRef *)lhs, v67, v69, kCVAttachmentMode_ShouldPropagate);
    }
  }
  v71 = (const __CFString *)*MEMORY[0x1E0CA8EE8];
  if (sbp_CVBufferAttachmentEmpty(*(__CVBuffer **)lhs, (const __CFString *)*MEMORY[0x1E0CA8EE8]))
  {
    v72 = CMFormatDescriptionGetExtension(v48, v71);
    if (v72)
    {
      v73 = v72;
      v74 = CFGetTypeID(v72);
      if (v74 == CFStringGetTypeID())
        CVBufferSetAttachment(*(CVBufferRef *)lhs, v71, v73, kCVAttachmentMode_ShouldPropagate);
    }
  }
  v35 = 0;
  ImageBuffer = *(__CVBuffer **)lhs;
LABEL_103:
  if (values)
    CFRelease(values);
  if (pixelBufferAttributes)
    CFRelease(pixelBufferAttributes);
  if ((_QWORD)propertyValueOut)
    CFRelease((CFTypeRef)propertyValueOut);
  if ((_DWORD)v35)
    return v35;
LABEL_7:
  if (*(_BYTE *)(DerivedStorage + 34))
  {
    if (!*(_BYTE *)(DerivedStorage + 35))
    {
      v11 = CMSampleBufferGetFormatDescription(a2);
      if (v11)
      {
        v12 = v11;
        v77 = TaggedBufferGroup;
        v13 = 0;
        v14 = *(const void **)(DerivedStorage + 16);
        v15 = (const __CFString *)*MEMORY[0x1E0CED290];
        v16 = (const __CFString *)*MEMORY[0x1E0CECF48];
        *(_QWORD *)lhs = *MEMORY[0x1E0CED290];
        *(_QWORD *)&lhs[8] = v16;
        propertyKey = (const __CFString *)*MEMORY[0x1E0CED238];
        v76 = (const __CFString *)*MEMORY[0x1E0CED058];
        *(_QWORD *)&lhs[16] = *MEMORY[0x1E0CED238];
        *(_QWORD *)&lhs[24] = v76;
        v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        while (1)
        {
          *(_QWORD *)&propertyValueOut = 0;
          VTSessionCopyProperty(v14, *(CFStringRef *)&lhs[v13], v17, &propertyValueOut);
          if ((_QWORD)propertyValueOut)
          {
            CFRelease((CFTypeRef)propertyValueOut);
            if ((_QWORD)propertyValueOut)
              break;
          }
          v13 += 8;
          if (v13 == 32)
          {
            Extensions = CMFormatDescriptionGetExtensions(v12);
            if (Extensions)
            {
              v19 = Extensions;
              Value = CFDictionaryGetValue(Extensions, (const void *)*MEMORY[0x1E0CA8EE8]);
              if (Value)
                VTSessionSetProperty(v14, v15, Value);
              v21 = CFDictionaryGetValue(v19, (const void *)*MEMORY[0x1E0CA8D68]);
              if (v21)
                VTSessionSetProperty(v14, v16, v21);
              v22 = CFDictionaryGetValue(v19, (const void *)*MEMORY[0x1E0CA8E98]);
              if (v22)
              {
                v23 = v22;
                VTSessionSetProperty(v14, propertyKey, v22);
                if (CFEqual(v23, (CFTypeRef)*MEMORY[0x1E0CA8ED8]))
                {
                  v24 = CFDictionaryGetValue(v19, (const void *)*MEMORY[0x1E0CA8DF8]);
                  if (v24)
                    VTSessionSetProperty(v14, (CFStringRef)*MEMORY[0x1E0CECFF8], v24);
                }
              }
              v25 = CFDictionaryGetValue(v19, (const void *)*MEMORY[0x1E0CA2210]);
              if (v25)
                VTSessionSetProperty(v14, v76, v25);
            }
            break;
          }
        }
        *(_BYTE *)(DerivedStorage + 35) = 1;
        TaggedBufferGroup = v77;
      }
    }
  }
  if (*(_BYTE *)(DerivedStorage + 36) && !*(_BYTE *)(DerivedStorage + 37) && ImageBuffer)
  {
    v89.value = 0;
    totalLengthOut = 0;
    v26 = (const __CFString *)*MEMORY[0x1E0CECF38];
    VTSessionCopyProperty(*(VTSessionRef *)(DerivedStorage + 16), (CFStringRef)*MEMORY[0x1E0CECF38], (CFAllocatorRef)*MEMORY[0x1E0C9AE00], &totalLengthOut);
    v27 = (const void *)totalLengthOut;
    if (totalLengthOut)
      goto LABEL_73;
    if (!sbp_CVBufferAttachmentEmpty(ImageBuffer, (const __CFString *)*MEMORY[0x1E0CA8D50]))
    {
      CVPixelBufferGetPixelFormatType(ImageBuffer);
      *(_OWORD *)lhs = 0uLL;
      *(int64x2_t *)&lhs[16] = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
      v93 = 0;
      v94 = 0;
      propertyValueOut = 0uLL;
      v86 = *(_OWORD *)&lhs[16];
      v87 = 0;
      v88 = 0;
      VTPixelTransferSessionCreateScalingParameters();
      if (v89.value)
      {
        v43 = CFGetTypeID((CFTypeRef)v89.value);
        if (v43 == CFDictionaryGetTypeID())
          VTSessionSetProperty(*(VTSessionRef *)(DerivedStorage + 16), v26, (CFTypeRef)v89.value);
        v27 = (const void *)v89.value;
        if (v89.value)
LABEL_73:
          CFRelease(v27);
      }
    }
    *(_BYTE *)(DerivedStorage + 37) = 1;
  }
  v28 = CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA26A8], 0);
  v29 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
  if (v28 == (CFTypeRef)*MEMORY[0x1E0C9AE50])
    *(_BYTE *)(DerivedStorage + 32) = 1;
  if (CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA26D0], 0) == v29)
    *(_BYTE *)(DerivedStorage + 33) = 1;
  if (CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA26A0], 0) == v29)
    *(_BYTE *)(DerivedStorage + 38) = 1;
  if (!((unint64_t)ImageBuffer | TaggedBufferGroup))
    return 0;
  totalLengthOut = v81.value;
  timescale = v81.timescale;
  if ((*(_BYTE *)(DerivedStorage + 84) & 1) != 0 && (*(_BYTE *)(DerivedStorage + 60) & 1) != 0)
  {
    flags = v81.flags;
    if ((v81.flags & 1) != 0)
    {
      epoch = v81.epoch;
      v32 = (_OWORD *)(DerivedStorage + 96);
      if ((*(_BYTE *)(DerivedStorage + 108) & 1) == 0)
      {
        propertyValueOut = *(_OWORD *)&v81.value;
        *(_QWORD *)&v86 = v81.epoch;
        sbp_vtcs_calculateNextCumulatedForceSyncSampleInterval(DerivedStorage, (CMTime *)&propertyValueOut, (uint64_t)lhs);
        *v32 = *(_OWORD *)lhs;
        *(_QWORD *)(DerivedStorage + 112) = *(_QWORD *)&lhs[16];
      }
      memset(&v89, 0, sizeof(v89));
      *(_QWORD *)lhs = totalLengthOut;
      *(_QWORD *)&lhs[8] = __PAIR64__(flags, timescale);
      *(_QWORD *)&lhs[16] = epoch;
      propertyValueOut = *(_OWORD *)(DerivedStorage + 48);
      *(_QWORD *)&v86 = *(_QWORD *)(DerivedStorage + 64);
      CMTimeSubtract(&v89, (CMTime *)lhs, (CMTime *)&propertyValueOut);
      *(_OWORD *)lhs = *v32;
      *(_QWORD *)&lhs[16] = *(_QWORD *)(DerivedStorage + 112);
      propertyValueOut = *(_OWORD *)&v89.value;
      *(_QWORD *)&v86 = v89.epoch;
      if (CMTimeCompare((CMTime *)lhs, (CMTime *)&propertyValueOut) <= 0)
      {
        *(_QWORD *)&propertyValueOut = totalLengthOut;
        *((_QWORD *)&propertyValueOut + 1) = __PAIR64__(flags, timescale);
        *(_QWORD *)&v86 = epoch;
        sbp_vtcs_calculateNextCumulatedForceSyncSampleInterval(DerivedStorage, (CMTime *)&propertyValueOut, (uint64_t)lhs);
        *v32 = *(_OWORD *)lhs;
        *(_QWORD *)(DerivedStorage + 112) = *(_QWORD *)&lhs[16];
        goto LABEL_49;
      }
    }
  }
  v33 = *(unsigned __int8 *)(DerivedStorage + 32);
  if (*(_BYTE *)(DerivedStorage + 32))
  {
LABEL_49:
    v34 = 0;
    *(_BYTE *)(DerivedStorage + 32) = 0;
    v33 = 1;
    goto LABEL_50;
  }
  v34 = 1;
LABEL_50:
  v36 = *(unsigned __int8 *)(DerivedStorage + 33);
  if (*(_BYTE *)(DerivedStorage + 33))
    *(_BYTE *)(DerivedStorage + 33) = 0;
  v37 = *(unsigned __int8 *)(DerivedStorage + 38);
  if (*(_BYTE *)(DerivedStorage + 38))
    *(_BYTE *)(DerivedStorage + 38) = 0;
  if ((((v37 | v36) == 0) & ~v33) != 0)
  {
    v39 = 0;
  }
  else
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
      return 4294954510;
    v39 = Mutable;
    if ((v34 & 1) == 0)
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED5B8], v29);
    if (v36)
      CFDictionarySetValue(v39, (const void *)*MEMORY[0x1E0CED628], v29);
    if (v37)
      CFDictionarySetValue(v39, (const void *)*MEMORY[0x1E0CED598], v29);
  }
  v40 = *(OpaqueVTCompressionSession **)(DerivedStorage + 16);
  if (ImageBuffer)
  {
    CMSampleBufferGetDuration(&duration, a2);
    *(CMTime *)lhs = v81;
    v41 = VTCompressionSessionEncodeFrame(v40, ImageBuffer, (CMTime *)lhs, &duration, v39, 0, 0);
  }
  else
  {
    CMSampleBufferGetDuration(&v79, a2);
    *(CMTime *)lhs = v81;
    v41 = VTCompressionSessionEncodeMultiImageFrame(v40, (CMTaggedBufferGroupRef)TaggedBufferGroup, (CMTime *)lhs, &v79, v39, 0, 0);
  }
  v35 = v41;
  if (v39)
    CFRelease(v39);
  return v35;
}

uint64_t sbp_fac_processSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage;
  OpaqueAudioConverter *v4;
  uint64_t v5;
  void (*v6)(_QWORD, _QWORD, opaqueCMSampleBuffer *);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CMSampleBufferGetNumSamples(a2))
    return 0;
  if (*(_DWORD *)(DerivedStorage + 196) == 2)
  {
    v4 = *(OpaqueAudioConverter **)(DerivedStorage + 64);
    if (v4)
      AudioConverterReset(v4);
    *(_DWORD *)(DerivedStorage + 196) = 0;
    *(_QWORD *)(DerivedStorage + 200) = 0;
    v5 = MEMORY[0x1E0CA2E18];
    *(_BYTE *)(DerivedStorage + 208) = 0;
    *(_OWORD *)(DerivedStorage + 232) = *(_OWORD *)v5;
    *(_QWORD *)(DerivedStorage + 248) = *(_QWORD *)(v5 + 16);
    *(_BYTE *)(DerivedStorage + 144) = 0;
  }
  if (*(_BYTE *)(DerivedStorage + 17))
  {
    v6 = *(void (**)(_QWORD, _QWORD, opaqueCMSampleBuffer *))(DerivedStorage + 48);
    if (v6)
      v6(*(_QWORD *)(DerivedStorage + 56), 0, a2);
    return 0;
  }
  return RunConverter(DerivedStorage, (uint64_t)a2);
}

uint64_t RunConverter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const AudioStreamBasicDescription *StreamBasicDescription;
  const AudioStreamBasicDescription *v6;
  double mSampleRate;
  Float64 Seconds;
  unint64_t v9;
  UInt32 v10;
  UInt32 v11;
  CMTime *v12;
  _OWORD *v13;
  CMTime *v14;
  UInt32 mBytesPerPacket;
  UInt32 v16;
  uint64_t DataPointer;
  UInt32 mChannelsPerFrame;
  uint64_t v19;
  CMItemCount v20;
  OpaqueCMBlockBuffer *v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  unsigned int v25;
  unsigned int *v26;
  CMTime *p_time;
  CMItemCount v28;
  unsigned int v29;
  OSStatus v30;
  CMSampleBufferRef v31;
  CMItemCount v32;
  CMTime *sampleSizeArray;
  const __CFArray *SampleAttachmentsArray;
  CFIndex Count;
  CFIndex v36;
  CFIndex v37;
  void *ValueAtIndex;
  const void *v39;
  CFTypeRef *v40;
  CFDictionaryRef v41;
  CFDictionaryRef v42;
  void (*v43)(_QWORD, _QWORD, CMSampleBufferRef);
  BOOL v44;
  void (*v46)(_QWORD, uint64_t, _QWORD);
  CMTimeValue value;
  CMTimeScale timescale;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  CFIndex v51;
  CFIndex v52;
  opaqueCMSampleBuffer *v53;
  CFDictionaryRef v54;
  CFDictionaryRef v55;
  const void *v56;
  void (*v57)(_QWORD, _QWORD, const void *);
  const __CFString *v58;
  const __CFString *key;
  const __CFString *v60;
  const __CFAllocator *allocator;
  _OWORD *v62;
  const __CFAllocator *blockAllocator;
  const __CFString *blockAllocatora;
  char *dataPointerOut;
  CMBlockBufferRef theBuffer;
  AudioBufferList outOutputData;
  UInt32 ioOutputDataPacketSize;
  CMTime ioPropertyDataSize;
  CMTime outPropertyData;
  CMTime rhs;
  CMTime lhs;
  CMSampleBufferRef sbuf;
  CMBlockBufferRef dataBuffer;
  CMTime time1;
  uint64_t v76;
  CMSampleTimingInfo sampleTimingArray;
  CMTime time;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v4 = acquireHardware(a1);
  if ((_DWORD)v4)
    return v4;
  if (!CMAudioFormatDescriptionGetStreamBasicDescription(*(CMAudioFormatDescriptionRef *)(a1 + 24)))
    return 4294954516;
  StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(*(CMAudioFormatDescriptionRef *)(a1 + 32));
  if (!StreamBasicDescription)
    return 4294954516;
  v6 = StreamBasicDescription;
  *(_QWORD *)(a1 + 88) = a2;
  if (StreamBasicDescription->mFramesPerPacket
    && (mSampleRate = StreamBasicDescription->mSampleRate,
        time = *(CMTime *)(a1 + 304),
        Seconds = CMTimeGetSeconds(&time),
        LODWORD(v9) = v6->mFramesPerPacket,
        v10 = (mSampleRate * Seconds / (double)v9),
        (ioOutputDataPacketSize = v10) != 0))
  {
    if (v10 < 0x81 || v6->mFormatID == 1819304813)
      goto LABEL_12;
    v11 = 128;
  }
  else
  {
    v11 = 1;
  }
  ioOutputDataPacketSize = v11;
LABEL_12:
  blockAllocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE10];
  v12 = (CMTime *)(a1 + 232);
  v13 = (_OWORD *)(a1 + 120);
  key = (const __CFString *)*MEMORY[0x1E0CA26B0];
  v58 = (const __CFString *)*MEMORY[0x1E0CA26B8];
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v60 = (const __CFString *)*MEMORY[0x1E0CA2728];
  v14 = (CMTime *)MEMORY[0x1E0CA2E68];
  v62 = (_OWORD *)(a1 + 232);
  while (1)
  {
    memset(&outOutputData, 0, sizeof(outOutputData));
    dataPointerOut = 0;
    theBuffer = 0;
    mBytesPerPacket = *(_DWORD *)(a1 + 40);
    if (!mBytesPerPacket)
      mBytesPerPacket = v6->mBytesPerPacket;
    v16 = ioOutputDataPacketSize * mBytesPerPacket;
    DataPointer = CMBlockBufferCreateWithMemoryBlock(*(CFAllocatorRef *)(a1 + 280), 0, v16, blockAllocator, 0, 0, v16, 1u, &theBuffer);
    if ((_DWORD)DataPointer
      || (DataPointer = CMBlockBufferGetDataPointer(theBuffer, 0, 0, 0, &dataPointerOut), (_DWORD)DataPointer))
    {
      v4 = DataPointer;
      goto LABEL_97;
    }
    mChannelsPerFrame = v6->mChannelsPerFrame;
    outOutputData.mNumberBuffers = 1;
    outOutputData.mBuffers[0].mNumberChannels = mChannelsPerFrame;
    outOutputData.mBuffers[0].mDataByteSize = v16;
    outOutputData.mBuffers[0].mData = dataPointerOut;
    if ((!v6->mBytesPerPacket || !v6->mFramesPerPacket) && ioOutputDataPacketSize > *(_DWORD *)(a1 + 160))
    {
      free(*(void **)(a1 + 152));
      *(_QWORD *)(a1 + 152) = malloc_type_malloc(16 * ioOutputDataPacketSize, 0x1000040451B5BE8uLL);
      *(_DWORD *)(a1 + 160) = ioOutputDataPacketSize;
      if (!*(_BYTE *)(a1 + 164))
        goto LABEL_24;
      free(*(void **)(a1 + 168));
      *(_QWORD *)(a1 + 168) = malloc_type_malloc(16 * ioOutputDataPacketSize, 0x1000040451B5BE8uLL);
    }
    if (!*(_BYTE *)(a1 + 164))
    {
LABEL_24:
      v19 = AudioConverterFillComplexBuffer(*(AudioConverterRef *)(a1 + 64), (AudioConverterComplexInputDataProc)facEncoderInputProc, (void *)a1, &ioOutputDataPacketSize, &outOutputData, *(AudioStreamPacketDescription **)(a1 + 152));
      goto LABEL_25;
    }
    v19 = AudioConverterFillComplexBufferWithPacketDependencyInfo();
LABEL_25:
    v4 = v19;
    if ((_DWORD)v19 && (_DWORD)v19 != 3)
    {
      if (theBuffer)
        CFRelease(theBuffer);
      goto LABEL_97;
    }
    v20 = ioOutputDataPacketSize;
    v21 = theBuffer;
    if (!ioOutputDataPacketSize)
      break;
    v22 = *(_QWORD *)(a1 + 152);
    v23 = *(_QWORD *)(a1 + 168);
    v76 = 0;
    memset(&time1, 0, sizeof(time1));
    sbuf = 0;
    dataBuffer = 0;
    if (!*(_BYTE *)(a1 + 225))
      goto LABEL_40;
    if ((*(_BYTE *)(a1 + 244) & 1) == 0)
    {
      outPropertyData.value = 0;
      LODWORD(ioPropertyDataSize.value) = 8;
      if (AudioConverterGetProperty(*(AudioConverterRef *)(a1 + 64), 0x7072696Du, (UInt32 *)&ioPropertyDataSize, &outPropertyData))
      {
        *(_OWORD *)&v12->value = *(_OWORD *)&v14->value;
        v12->epoch = v14->epoch;
      }
      else
      {
        CMTimeMake(&time, LODWORD(outPropertyData.value), *(_DWORD *)(a1 + 228));
        *v12 = time;
        *(_OWORD *)&lhs.value = *v13;
        lhs.epoch = *(_QWORD *)(a1 + 136);
        rhs = *v12;
        CMTimeSubtract(&time, &lhs, &rhs);
        *v13 = *(_OWORD *)&time.value;
        *(_QWORD *)(a1 + 136) = time.epoch;
        *(_BYTE *)(a1 + 256) = 1;
      }
      if (!*(_BYTE *)(a1 + 225))
        goto LABEL_40;
    }
    if (v12->value)
    {
      time = *v12;
      lhs = *v14;
      v24 = CMTimeCompare(&time, &lhs) > 0;
    }
    else
    {
LABEL_40:
      v24 = 0;
    }
    CMTimeMake(&time, v6->mFramesPerPacket, (int)v6->mSampleRate);
    sampleTimingArray.duration = time;
    *(_OWORD *)&sampleTimingArray.presentationTimeStamp.value = *v13;
    sampleTimingArray.presentationTimeStamp.epoch = *(_QWORD *)(a1 + 136);
    sampleTimingArray.decodeTimeStamp = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    CMTimeMake(&time1, (v6->mFramesPerPacket * v20), (int)v6->mSampleRate);
    *(_OWORD *)&lhs.value = *v13;
    lhs.epoch = *(_QWORD *)(a1 + 136);
    rhs = time1;
    CMTimeAdd(&time, &lhs, &rhs);
    *v13 = *(_OWORD *)&time.value;
    *(_QWORD *)(a1 + 136) = time.epoch;
    if (v22)
    {
      v25 = 0;
      v26 = (unsigned int *)(v22 + 12);
      p_time = &time;
      v28 = v20;
      do
      {
        v29 = *v26;
        v26 += 4;
        p_time->value = v29;
        p_time = (CMTime *)((char *)p_time + 8);
        v25 += v29;
        --v28;
      }
      while (v28);
    }
    else
    {
      v76 = v6->mBytesPerPacket;
      v25 = v76 * v20;
    }
    v30 = CMBlockBufferCreateWithBufferReference(*(CFAllocatorRef *)(a1 + 280), v21, 0, v25, 0, &dataBuffer);
    v31 = 0;
    if (!v30)
    {
      if (v22)
        v32 = v20;
      else
        v32 = 1;
      sampleSizeArray = &time;
      if (!v22)
        sampleSizeArray = (CMTime *)&v76;
      if (CMSampleBufferCreate(*(CFAllocatorRef *)(a1 + 280), dataBuffer, 1u, 0, 0, *(CMFormatDescriptionRef *)(a1 + 32), v20, 1, &sampleTimingArray, v32, (const size_t *)sampleSizeArray, &sbuf))
      {
        if (dataBuffer)
          CFRelease(dataBuffer);
        v31 = 0;
        goto LABEL_83;
      }
      if (!v23 && *(_BYTE *)(a1 + 164))
      {
        FigSignalErrorAt();
        v31 = 0;
        v14 = (CMTime *)MEMORY[0x1E0CA2E68];
      }
      else
      {
        if (v23)
        {
          if (*(_BYTE *)(a1 + 164))
          {
            SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(sbuf, 1u);
            Count = CFArrayGetCount(SampleAttachmentsArray);
            if (Count >= 1)
            {
              v36 = Count;
              v37 = 0;
              while (1)
              {
                ValueAtIndex = (void *)CFArrayGetValueAtIndex(SampleAttachmentsArray, v37);
                lhs.value = 0;
                if (FigAudioStreamPacketDependencyInfoCopyAsSampleDependencyAttributeDictionary()
                  || !FigCFDictionaryGetCount())
                {
                  break;
                }
                CFDictionaryApplyFunction((CFDictionaryRef)lhs.value, (CFDictionaryApplierFunction)appendAttributesToDictionary_0, ValueAtIndex);
                if (lhs.value)
                  CFRelease((CFTypeRef)lhs.value);
                ++v37;
                v23 += 16;
                if (v36 == v37)
                  goto LABEL_67;
              }
              if (lhs.value)
                CFRelease((CFTypeRef)lhs.value);
              v31 = 0;
              v14 = (CMTime *)MEMORY[0x1E0CA2E68];
              goto LABEL_83;
            }
          }
        }
LABEL_67:
        v39 = *(const void **)(a1 + 216);
        v14 = (CMTime *)MEMORY[0x1E0CA2E68];
        if (v39 && *(_BYTE *)(a1 + 225) && !*(_BYTE *)(a1 + 164))
        {
          CMSetAttachment(sbuf, key, v39, 1u);
          if (!*(_BYTE *)(a1 + 256) || (v40 = (CFTypeRef *)MEMORY[0x1E0C9AE50], !*(_BYTE *)(a1 + 224)))
            v40 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
          CMSetAttachment(sbuf, v58, *v40, 1u);
        }
        if (!v24)
          goto LABEL_77;
        memset(&lhs, 0, sizeof(lhs));
        rhs = time1;
        *(_OWORD *)&outPropertyData.value = *v62;
        outPropertyData.epoch = *(_QWORD *)(a1 + 248);
        CMTimeMinimum(&lhs, &rhs, &outPropertyData);
        *(_OWORD *)&outPropertyData.value = *v62;
        outPropertyData.epoch = *(_QWORD *)(a1 + 248);
        ioPropertyDataSize = lhs;
        CMTimeSubtract(&rhs, &outPropertyData, &ioPropertyDataSize);
        *v62 = *(_OWORD *)&rhs.value;
        *(_QWORD *)(a1 + 248) = rhs.epoch;
        rhs = lhs;
        v41 = CMTimeCopyAsDictionary(&rhs, allocator);
        if (v41)
        {
          v42 = v41;
          CMSetAttachment(sbuf, v60, v41, 1u);
          CFRelease(v42);
LABEL_77:
          v31 = sbuf;
          goto LABEL_78;
        }
        FigSignalErrorAt();
        v31 = 0;
      }
LABEL_78:
      if (dataBuffer)
        CFRelease(dataBuffer);
    }
LABEL_83:
    if (*(_DWORD *)(a1 + 196) == 1 && *(_BYTE *)(a1 + 225))
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 264), v31);
      v12 = (CMTime *)(a1 + 232);
    }
    else
    {
      v43 = *(void (**)(_QWORD, _QWORD, CMSampleBufferRef))(a1 + 48);
      v12 = (CMTime *)(a1 + 232);
      if (v43)
        v43(*(_QWORD *)(a1 + 56), 0, v31);
    }
    if (v31)
      CFRelease(v31);
    if (theBuffer)
      CFRelease(theBuffer);
LABEL_92:
    if ((_DWORD)v4 == 3)
      return 0;
  }
  if (theBuffer)
    CFRelease(theBuffer);
  if (*(_DWORD *)(a1 + 196) != 1)
    goto LABEL_92;
  if (*(_BYTE *)(a1 + 225))
  {
    outPropertyData.value = 0;
    LODWORD(ioPropertyDataSize.value) = 8;
    value = *MEMORY[0x1E0CA2E18];
    timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
    flags = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
    epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    v51 = CFArrayGetCount(*(CFArrayRef *)(a1 + 264));
    if (!AudioConverterGetProperty(*(AudioConverterRef *)(a1 + 64), 0x7072696Du, (UInt32 *)&ioPropertyDataSize, &outPropertyData)&& HIDWORD(outPropertyData.value))
    {
      CMTimeMake(&time, HIDWORD(outPropertyData.value), *(_DWORD *)(a1 + 228));
      value = time.value;
      timescale = time.timescale;
      flags = time.flags;
      epoch = time.epoch;
    }
    if ((flags & 1) != 0)
    {
      if (v51 >= 1)
      {
        blockAllocatora = (const __CFString *)*MEMORY[0x1E0CA2720];
        v52 = v51 + 1;
        while (1)
        {
          v53 = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 264), v52 - 2);
          memset(&time, 0, sizeof(time));
          CMSampleBufferGetDuration(&time, v53);
          memset(&sampleTimingArray, 0, 24);
          time1 = time;
          lhs.value = value;
          lhs.timescale = timescale;
          lhs.flags = flags;
          lhs.epoch = epoch;
          CMTimeMinimum(&sampleTimingArray.duration, &time1, &lhs);
          time1 = sampleTimingArray.duration;
          v54 = CMTimeCopyAsDictionary(&time1, allocator);
          if (!v54)
            break;
          v55 = v54;
          CMSetAttachment(v53, blockAllocatora, v54, 1u);
          CFRelease(v55);
          lhs.value = value;
          lhs.timescale = timescale;
          lhs.flags = flags;
          lhs.epoch = epoch;
          rhs = sampleTimingArray.duration;
          CMTimeSubtract(&time1, &lhs, &rhs);
          value = time1.value;
          timescale = time1.timescale;
          flags = time1.flags;
          epoch = time1.epoch;
          if (time1.value > 0 || (lhs = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68], CMTimeCompare(&time1, &lhs) > 0))
          {
            if ((unint64_t)--v52 > 1)
              continue;
          }
          goto LABEL_119;
        }
        FigSignalErrorAt();
      }
    }
    else
    {
LABEL_119:
      if (v51 >= 1)
      {
        do
        {
          v56 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 264), 0);
          v57 = *(void (**)(_QWORD, _QWORD, const void *))(a1 + 48);
          if (v57)
            v57(*(_QWORD *)(a1 + 56), 0, v56);
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 264), 0);
          --v51;
        }
        while (v51);
      }
    }
  }
LABEL_97:
  if ((_DWORD)v4)
    v44 = (_DWORD)v4 == 3;
  else
    v44 = 1;
  if (v44)
    return 0;
  v46 = *(void (**)(_QWORD, uint64_t, _QWORD))(a1 + 48);
  if (v46)
    v46(*(_QWORD *)(a1 + 56), v4, 0);
  return v4;
}

CMItemCount RunConverter_0(uint64_t a1, CMSampleBufferRef sbuf)
{
  CMItemCount result;
  CMItemCount v5;
  CMAudioFormatDescriptionRef *v6;
  const opaqueCMFormatDescription *FormatDescription;
  const AudioFormatListItem *RichestDecodableFormat;
  const AudioFormatListItem *v9;
  AudioConverterRef *v10;
  CMFormatDescriptionRef v11;
  const AudioFormatListItem *v12;
  const AudioFormatListItem *v13;
  const AudioStreamBasicDescription *StreamBasicDescription;
  const AudioStreamBasicDescription *v15;
  const void *v16;
  unsigned int appended;
  uint64_t v18;
  OSStatus (__cdecl *v19)(AudioConverterRef, UInt32 *, AudioBufferList *, AudioStreamPacketDescription **, void *);
  size_t v20;
  size_t v21;
  void *v22;
  uint64_t v23;
  const AudioFormatListItem *v24;
  const AudioStreamBasicDescription *v25;
  uint64_t v26;
  size_t v27;
  OSStatus (__cdecl *v28)(AudioConverterRef, UInt32 *, AudioBufferList *, AudioStreamPacketDescription **, void *);
  uint64_t v29;
  unint64_t v30;
  void *v31;
  unsigned int *v32;
  OSStatus v33;
  const __CFAllocator *v34;
  uint64_t v35;
  OSStatus v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int *v39;
  unsigned int *v40;
  CMBlockBufferRef v41;
  uint64_t v42;
  unsigned int v43;
  _DWORD *ValueAtIndex;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  CMTimeEpoch epoch;
  unsigned int v53;
  size_t v54;
  OSStatus v55;
  size_t *sampleSizeArray;
  CMItemCount v57;
  void (*v58)(_QWORD, _QWORD, CMSampleBufferRef);
  uint64_t v59;
  const __CFAllocator *v60;
  const void *MagicCookie;
  CFMutableArrayRef Mutable;
  OpaqueAudioConverter *v63;
  _QWORD *v64;
  _DWORD *v65;
  _DWORD *v66;
  uint64_t v67;
  _DWORD *v68;
  int v69;
  uint64_t v70;
  size_t v71;
  CMItemCount v72;
  OpaqueCMBlockBuffer *bufferReference;
  _OWORD *v74;
  unsigned int v75;
  __int128 v76;
  unsigned int v77;
  CMItemCount v78;
  CMBlockBufferRef theBuffer;
  UInt32 ioOutputDataPacketSize;
  CMTime rhs;
  CMTime lhs;
  CMTime v83;
  CMTime v84;
  CMSampleTimingInfo inPropertyData;
  CMSampleBufferRef v86;
  CMBlockBufferRef v87;
  size_t v88[3];

  v88[1] = *MEMORY[0x1E0C80C00];
  if (!sbuf)
  {
    if (*(_DWORD *)(a1 + 272) != 1)
      return 0;
    v6 = (CMAudioFormatDescriptionRef *)(a1 + 24);
    if (*(_QWORD *)(a1 + 24))
    {
      v5 = 10;
      goto LABEL_11;
    }
    return FigSignalErrorAt();
  }
  result = CMSampleBufferGetNumSamples(sbuf);
  if (!result)
    return result;
  v5 = result;
  v6 = (CMAudioFormatDescriptionRef *)(a1 + 24);
  if (*(_QWORD *)(a1 + 24))
    goto LABEL_11;
  v84.value = 0;
  FormatDescription = CMSampleBufferGetFormatDescription(sbuf);
  RichestDecodableFormat = CMAudioFormatDescriptionGetRichestDecodableFormat(FormatDescription);
  if (!RichestDecodableFormat)
    return FigSignalErrorAt();
  v9 = RichestDecodableFormat;
  v10 = (AudioConverterRef *)(a1 + 136);
  if (!AudioConverterNew(&RichestDecodableFormat->mASBD, (const AudioStreamBasicDescription *)(a1 + 40), (AudioConverterRef *)(a1 + 136)))
  {
    LODWORD(v83.value) = 0;
    if (!CMAudioFormatDescriptionGetMagicCookie(FormatDescription, (size_t *)&v84)
      || !HIDWORD(v84.value)
      && (MagicCookie = CMAudioFormatDescriptionGetMagicCookie(FormatDescription, (size_t *)&v84),
          !AudioConverterSetProperty(*v10, 0x646D6763u, v84.value, MagicCookie)))
    {
      if (v9->mASBD.mFormatID == 1819304813
        || (LODWORD(v83.value) = 4,
            AudioConverterGetProperty(*(AudioConverterRef *)(a1 + 136), 0x74627566u, (UInt32 *)&v83, (void *)(a1 + 88)),
            LODWORD(v83.value) = 4,
            !AudioConverterGetProperty(*(AudioConverterRef *)(a1 + 136), 0x70616B66u, (UInt32 *)&v83, (void *)(a1 + 92)))
        && (LODWORD(v83.value) = 4,
            !AudioConverterGetProperty(*(AudioConverterRef *)(a1 + 136), 0x70616B62u, (UInt32 *)&v83, (void *)(a1 + 96))))
      {
        Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
        *(_QWORD *)(a1 + 264) = Mutable;
        if (Mutable)
        {
          v63 = *v10;
          if (*v10)
          {
            inPropertyData.duration.value = 0;
            AudioConverterSetProperty(v63, 0x7072696Du, 8u, &inPropertyData);
            v63 = *v10;
          }
          LODWORD(v83.value) = 8;
          v64 = (_QWORD *)(a1 + 144);
          if (AudioConverterGetProperty(v63, 0x6877727Au, (UInt32 *)&v83, (void *)(a1 + 144)) || !*v64)
            *v64 = 0;
          if ((*(_BYTE *)(a1 + 52) & 0x20) != 0)
          {
            v66 = malloc_type_calloc(1uLL, 16 * (*(_DWORD *)(a1 + 68) - 1) + 24, 0x6F5B84CFuLL);
            *(_QWORD *)(a1 + 80) = v66;
            if (v66)
            {
              v67 = *(unsigned int *)(a1 + 68);
              *v66 = v67;
              if ((_DWORD)v67)
              {
                v68 = v66 + 2;
                do
                {
                  *v68 = 1;
                  v68 += 4;
                  --v67;
                }
                while (v67);
              }
              goto LABEL_7;
            }
          }
          else
          {
            v65 = malloc_type_calloc(1uLL, 0x18uLL, 0x10800404ACF7207uLL);
            *(_QWORD *)(a1 + 80) = v65;
            if (v65)
            {
              *v65 = 1;
              v65[2] = *(_DWORD *)(a1 + 68);
              goto LABEL_7;
            }
          }
        }
      }
    }
  }
  if (FigSignalErrorAt())
    return FigSignalErrorAt();
LABEL_7:
  v11 = CMSampleBufferGetFormatDescription(sbuf);
  *v6 = v11;
  CFRetain(v11);
LABEL_11:
  result = acquireHardware_0(a1);
  if ((_DWORD)result)
    return result;
  v12 = CMAudioFormatDescriptionGetRichestDecodableFormat(*v6);
  if (!v12)
    return 4294954516;
  v13 = v12;
  StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(*(CMAudioFormatDescriptionRef *)(a1 + 32));
  if (!StreamBasicDescription)
    return 4294954516;
  v15 = StreamBasicDescription;
  v16 = *(const void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = sbuf;
  if (sbuf)
    CFRetain(sbuf);
  if (v16)
    CFRelease(v16);
  appended = 0;
  v18 = 0;
  v74 = (_OWORD *)(a1 + 192);
  v19 = (OSStatus (__cdecl *)(AudioConverterRef, UInt32 *, AudioBufferList *, AudioStreamPacketDescription **, void *))fadDecoderInputProc;
LABEL_19:
  v20 = v5 - v18;
  v78 = v5;
  while (1)
  {
    if (appended == 3 || v5 <= v18)
      goto LABEL_96;
    theBuffer = 0;
    v21 = (v13->mASBD.mFramesPerPacket * v20 * *(_DWORD *)(a1 + 56));
    ioOutputDataPacketSize = v13->mASBD.mFramesPerPacket * v20;
    if ((v15->mFormatFlags & 0x20) == 0)
    {
      v22 = CFAllocatorAllocate(*(CFAllocatorRef *)(a1 + 296), v21, 0);
      v23 = *(_QWORD *)(a1 + 80);
      *(_QWORD *)(v23 + 16) = v22;
      if (v22)
      {
        *(_DWORD *)(v23 + 12) = v21;
        goto LABEL_31;
      }
      v60 = *(const __CFAllocator **)(a1 + 296);
      v32 = (unsigned int *)v23;
LABEL_95:
      deallocateAndZeroBufferListDataPointers(v32, v60);
      appended = -12786;
      goto LABEL_96;
    }
    v24 = v13;
    v25 = v15;
    v26 = v18;
    v27 = v20;
    v28 = v19;
    if (*(_DWORD *)(a1 + 68))
    {
      v29 = 0;
      v30 = 0;
      while (1)
      {
        v31 = CFAllocatorAllocate(*(CFAllocatorRef *)(a1 + 296), v21, 0);
        v32 = *(unsigned int **)(a1 + 80);
        *(_QWORD *)&v32[v29 + 4] = v31;
        if (!v31)
          break;
        v32[v29 + 3] = v21;
        ++v30;
        v29 += 4;
        if (v30 >= *(unsigned int *)(a1 + 68))
          goto LABEL_29;
      }
      v60 = *(const __CFAllocator **)(a1 + 296);
      goto LABEL_95;
    }
LABEL_29:
    if (appended)
      goto LABEL_96;
    v23 = *(_QWORD *)(a1 + 80);
    v19 = v28;
    v20 = v27;
    v18 = v26;
    v15 = v25;
    v13 = v24;
    v5 = v78;
LABEL_31:
    v33 = AudioConverterFillComplexBuffer(*(AudioConverterRef *)(a1 + 136), v19, (void *)a1, &ioOutputDataPacketSize, (AudioBufferList *)v23, 0);
    appended = v33;
    if (v33 && v33 != 3)
      goto LABEL_124;
    if (ioOutputDataPacketSize)
      break;
    deallocateAndZeroBufferListDataPointers(*(unsigned int **)(a1 + 80), *(CFAllocatorRef *)(a1 + 296));
    if (*(_DWORD *)(a1 + 272) == 1)
      goto LABEL_96;
  }
  v34 = *(const __CFAllocator **)(a1 + 296);
  if ((v15->mFormatFlags & 0x20) != 0)
  {
    v36 = CMBlockBufferCreateEmpty(v34, *(_DWORD *)(a1 + 68), 0, &theBuffer);
    if (v36)
    {
      appended = v36;
LABEL_124:
      v35 = *(_QWORD *)(a1 + 80);
      goto LABEL_125;
    }
    if (*(_DWORD *)(a1 + 68))
    {
      v37 = 0;
      v38 = 0;
      v39 = *(unsigned int **)(a1 + 80);
      while (1)
      {
        appended = CMBlockBufferAppendMemoryBlock(theBuffer, *(void **)&v39[v37 + 4], v21, *(CFAllocatorRef *)(a1 + 296), 0, 0, v15->mBytesPerPacket * ioOutputDataPacketSize, 0);
        v39 = *(unsigned int **)(a1 + 80);
        if (appended)
          break;
        v40 = &v39[v37];
        *((_QWORD *)v40 + 2) = 0;
        v40[3] = 0;
        ++v38;
        v37 += 4;
        if (v38 >= *(unsigned int *)(a1 + 68))
        {
          appended = 0;
          goto LABEL_47;
        }
      }
      deallocateAndZeroBufferListDataPointers(v39, *(CFAllocatorRef *)(a1 + 296));
      CFRelease(theBuffer);
LABEL_47:
      v19 = (OSStatus (__cdecl *)(AudioConverterRef, UInt32 *, AudioBufferList *, AudioStreamPacketDescription **, void *))fadDecoderInputProc;
    }
    else
    {
      appended = 0;
    }
LABEL_48:
    v41 = theBuffer;
    v42 = ioOutputDataPacketSize;
    if (!ioOutputDataPacketSize)
    {
      v42 = 0;
      goto LABEL_83;
    }
    bufferReference = theBuffer;
    v43 = 0;
    v69 = v20;
    v70 = ioOutputDataPacketSize;
    while (1)
    {
      v75 = v42 - v43;
      if (CFArrayGetCount(*(CFArrayRef *)(a1 + 264)) < 1)
      {
        v50 = v42 - v43;
      }
      else
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 264), 0);
        v45 = *(_QWORD *)ValueAtIndex;
        v46 = *(_QWORD *)(a1 + 256);
        v47 = v46 + v43;
        if (*(_QWORD *)ValueAtIndex == v47)
        {
          v48 = ValueAtIndex[2] - v45;
          if (v75 < v48)
          {
            *(_QWORD *)ValueAtIndex = v45 + v75;
            v42 = v70;
            goto LABEL_82;
          }
          free(ValueAtIndex);
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 264), 0);
          v49 = v48;
          v42 = v70;
          goto LABEL_69;
        }
        v51 = v45 - v47;
        v50 = v42 - v43;
        if (v46 + v42 > v45)
          v50 = v51;
      }
      v86 = 0;
      v87 = 0;
      memset(&inPropertyData, 0, sizeof(inPropertyData));
      v84 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
      v76 = *(_OWORD *)&v84.value;
      epoch = v84.epoch;
      CMTimeMake(&inPropertyData.duration, *(unsigned int *)(a1 + 60), (int)*(double *)(a1 + 40));
      *(_OWORD *)&inPropertyData.presentationTimeStamp.value = *v74;
      inPropertyData.presentationTimeStamp.epoch = *(_QWORD *)(a1 + 208);
      *(_OWORD *)&inPropertyData.decodeTimeStamp.value = v76;
      inPropertyData.decodeTimeStamp.epoch = epoch;
      CMTimeMake(&v84, v50, (int)*(double *)(a1 + 40));
      *(_OWORD *)&lhs.value = *v74;
      lhs.epoch = *(_QWORD *)(a1 + 208);
      rhs = v84;
      CMTimeAdd(&v83, &lhs, &rhs);
      *v74 = *(_OWORD *)&v83.value;
      *(_QWORD *)(a1 + 208) = v83.epoch;
      v53 = *(_DWORD *)(a1 + 56);
      v54 = v53 * v43;
      v77 = v50;
      v71 = v53;
      v72 = v50;
      v20 = v53 * v50;
      if ((*(_BYTE *)(a1 + 52) & 0x20) != 0 && *(_DWORD *)(a1 + 68) != 1)
      {
        v83.value = 0;
        if (CMBlockBufferGetDataPointer(bufferReference, 0, (size_t *)&v83, 0, 0)
          || CMBlockBufferCreateEmpty(*(CFAllocatorRef *)(a1 + 296), *(_DWORD *)(a1 + 68), 0, &v87))
        {
          goto LABEL_81;
        }
        if (*(_DWORD *)(a1 + 68))
        {
          v59 = 0;
          while (!CMBlockBufferAppendBufferReference(v87, bufferReference, v54 + v83.value * v59, v20, 0))
          {
            if (++v59 >= (unint64_t)*(unsigned int *)(a1 + 68))
              goto LABEL_77;
          }
          if (v87)
            CFRelease(v87);
LABEL_81:
          v19 = (OSStatus (__cdecl *)(AudioConverterRef, UInt32 *, AudioBufferList *, AudioStreamPacketDescription **, void *))fadDecoderInputProc;
          LODWORD(v20) = v69;
          v42 = v70;
          goto LABEL_82;
        }
LABEL_77:
        sampleSizeArray = 0;
        v57 = 0;
        v19 = (OSStatus (__cdecl *)(AudioConverterRef, UInt32 *, AudioBufferList *, AudioStreamPacketDescription **, void *))fadDecoderInputProc;
        LODWORD(v20) = v69;
        v42 = v70;
      }
      else
      {
        v55 = CMBlockBufferCreateWithBufferReference(*(CFAllocatorRef *)(a1 + 296), bufferReference, v54, v20, 0, &v87);
        v19 = (OSStatus (__cdecl *)(AudioConverterRef, UInt32 *, AudioBufferList *, AudioStreamPacketDescription **, void *))fadDecoderInputProc;
        LODWORD(v20) = v69;
        v42 = v70;
        if (v55)
          goto LABEL_82;
        sampleSizeArray = v88;
        v57 = 1;
      }
      v88[0] = v71;
      if (CMSampleBufferCreate(*(CFAllocatorRef *)(a1 + 296), v87, 1u, 0, 0, *(CMFormatDescriptionRef *)(a1 + 32), v72, 1, &inPropertyData, v57, sampleSizeArray, &v86))
      {
        if (v87)
          CFRelease(v87);
LABEL_82:
        v41 = theBuffer;
LABEL_83:
        *(_QWORD *)(a1 + 256) += v42;
        if (v41)
          CFRelease(v41);
        if (*(_DWORD *)(a1 + 272) == 1)
        {
          v5 = 10;
          v18 = 0;
        }
        else
        {
          v18 += v20;
        }
        goto LABEL_19;
      }
      v58 = *(void (**)(_QWORD, _QWORD, CMSampleBufferRef))(a1 + 120);
      if (v58)
        v58(*(_QWORD *)(a1 + 128), 0, v86);
      if (v87)
        CFRelease(v87);
      if (v86)
        CFRelease(v86);
      v49 = v77;
LABEL_69:
      v43 += v49;
      if (v43 >= v42)
        goto LABEL_82;
    }
  }
  appended = CMBlockBufferCreateWithMemoryBlock(v34, *(void **)(*(_QWORD *)(a1 + 80) + 16), v21, v34, 0, 0, v15->mBytesPerPacket * ioOutputDataPacketSize, 0, &theBuffer);
  v35 = *(_QWORD *)(a1 + 80);
  if (!appended)
  {
    *(_QWORD *)(v35 + 16) = 0;
    *(_DWORD *)(v35 + 12) = 0;
    goto LABEL_48;
  }
LABEL_125:
  deallocateAndZeroBufferListDataPointers((unsigned int *)v35, *(CFAllocatorRef *)(a1 + 296));
LABEL_96:
  if (appended == 3)
    return 0;
  else
    return appended;
}

uint64_t sbp_vtcs_outputFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t (*v8)(_QWORD, uint64_t, uint64_t);

  result = CMBaseObjectGetDerivedStorage();
  v8 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t))(result + 24);
  if (v8)
    return v8(*(_QWORD *)(result + 40), a3, a5);
  return result;
}

void mediaprocessor_OutputSampleBuffer(uint64_t a1, int a2, uint64_t a3)
{
  const __CFAllocator *v5;
  CFDictionaryRef v6;
  CFDictionaryRef v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  CFTypeRef cf;
  int valuePtr;

  valuePtr = a2;
  if (a2)
  {
    cf = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
    if (cf)
    {
      v5 = CFGetAllocator((CFTypeRef)a1);
      v6 = CFDictionaryCreate(v5, (const void **)kFigMediaProcessorParameter_Result, &cf, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v6)
      {
        v7 = v6;
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        CFRelease(v7);
      }
      if (cf)
        CFRelease(cf);
    }
  }
  if (a3)
  {
    v8 = *(_QWORD *)(a1 + 40);
    v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v9)
      v9(v8, a3);
    ++*(_DWORD *)(a1 + 92);
  }
}

uint64_t otfw_sendSampleBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(_QWORD *)DerivedStorage;
  v5 = *(unsigned int *)(DerivedStorage + 8);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v6)
    return v6(v4, v5, a2);
  else
    return 4294954514;
}

uint64_t figMovieWriter_AddSampleBufferToTrack(uint64_t a1, int a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || *(_BYTE *)(DerivedStorage + 335) || !a3)
    return FigSignalErrorAt();
  v7 = 0;
  result = getTrackInfoForTrackID(DerivedStorage, a2, &v7);
  if (!(_DWORD)result)
    return CMBufferQueueEnqueue(*(CMBufferQueueRef *)(v7 + 608), a3);
  return result;
}

CMItemCount validateSampleBufferForTrackCallback(int a1, CMSampleBufferRef sbuf, uint64_t a3)
{
  CMItemCount result;
  const opaqueCMFormatDescription *FormatDescription;
  CVImageBufferRef ImageBuffer;
  CMMediaType MediaType;
  int v9;
  int v12;
  CFTypeID TypeID;
  CFTypeRef v14;
  CMTimeEpoch epoch;
  int32_t v16;
  int32_t v17;
  uint64_t v18;
  __int128 v19;
  CMTime time2;
  CMTime time1;
  unsigned __int8 v22;
  double v23;
  CMTime v24;
  CMTime v25;
  char v26;

  result = CMSampleBufferGetNumSamples(sbuf);
  if (result)
  {
    FormatDescription = CMSampleBufferGetFormatDescription(sbuf);
    ImageBuffer = CMSampleBufferGetImageBuffer(sbuf);
    MediaType = CMFormatDescriptionGetMediaType(FormatDescription);
    v9 = *(_DWORD *)a3;
    if (*(_DWORD *)a3 == 1635088502 || v9 == 1885954932 || v9 == 1986618469)
      v12 = 1986618469;
    else
      v12 = *(_DWORD *)a3;
    if (ImageBuffer)
    {
      TypeID = CVPixelBufferGetTypeID();
      if (TypeID != CFGetTypeID(ImageBuffer))
        return FigSignalErrorAt();
    }
    if (!FormatDescription)
      return FigSignalErrorAt();
    if (v12 != MediaType)
      return FigSignalErrorAt();
    v14 = CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0CA26E8], 0);
    if (v14)
    {
      if (CFEqual(v14, (CFTypeRef)*MEMORY[0x1E0C9AE50]))
        return FigSignalErrorAt();
    }
    if (MediaType != 1936684398)
      return 0;
    v26 = 0;
    v22 = 0;
    result = FigMovieIsNonInterleavedPCMAudioSample(sbuf, &v26);
    if ((_DWORD)result)
      return result;
    if (!v26)
    {
      memset(&v25, 0, sizeof(v25));
      v23 = 0.0;
      memset(&v24, 0, sizeof(v24));
      getTrimDurationsAndSpeedMultiplierFromSbuf(sbuf, &v25, &v24, (char *)&v22, &v23);
      time1 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      v19 = *(_OWORD *)&time1.value;
      epoch = time1.epoch;
      time2 = v25;
      v16 = CMTimeCompare(&time1, &time2);
      *(_OWORD *)&time1.value = v19;
      time1.epoch = epoch;
      time2 = v24;
      v17 = CMTimeCompare(&time1, &time2);
      v18 = *(_QWORD *)(a3 + 16);
      if ((*(_DWORD *)(v18 + 324) - 6) < 0xFFFFFFFB)
      {
        if (v16 || v17 || v23 != 1.0)
          goto LABEL_29;
        return 0;
      }
      if (*(_DWORD *)(a3 + 768) != 2 && !*(_BYTE *)(v18 + 384)
        || !editBoundaryDetectorDetectBoundary(*(_QWORD *)(a3 + 536), v22, v16 != 0, v17 != 0, v23))
      {
        return 0;
      }
    }
LABEL_29:
    result = FigSignalErrorAt();
    if ((_DWORD)result)
      return result;
    return 0;
  }
  return result;
}

uint64_t wakeupWritingThreadForDataReady(uint64_t a1)
{
  uint64_t v1;
  CFIndex Count;
  CFIndex v3;
  int v4;
  CMTime *v5;
  uint64_t v6;
  CFIndex v7;
  CMTimeEpoch v8;
  char *ValueAtIndex;
  _OWORD *v10;
  int32_t v11;
  _OWORD *v12;
  __int128 v13;
  uint64_t v14;
  const __CFAllocator *v15;
  CFDictionaryRef v16;
  CFNumberRef v17;
  __int128 v19;
  CMTime rhs;
  CMTime time2;
  CMTime time1;
  CMTime values;

  v1 = *(_QWORD *)(a1 + 16);
  MEMORY[0x19402EEEC](*(_QWORD *)(v1 + 336));
  if (*(_BYTE *)(v1 + 335))
    return MEMORY[0x19402EF04](*(_QWORD *)(v1 + 336));
  if (!*(_BYTE *)(v1 + 528))
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(v1 + 520));
    if (*(_BYTE *)(v1 + 528))
    {
LABEL_28:
      MEMORY[0x19402EF04](*(_QWORD *)(v1 + 520));
      goto LABEL_29;
    }
    Count = CFArrayGetCount(*(CFArrayRef *)(v1 + 488));
    v3 = Count;
    values = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    v4 = *(unsigned __int8 *)(v1 + 329);
    if (*(_BYTE *)(v1 + 329))
    {
      if ((*(_BYTE *)(v1 + 132) & 1) != 0)
        v5 = (CMTime *)(v1 + 120);
      else
        v5 = (CMTime *)(v1 + 96);
    }
    else
    {
      if (!*(_BYTE *)(v1 + 330))
      {
LABEL_11:
        *(_OWORD *)(v1 + 220) = *(_OWORD *)(v1 + 196);
        *(_QWORD *)(v1 + 236) = *(_QWORD *)(v1 + 212);
        v6 = MEMORY[0x1E0CA2E68];
        if (Count >= 1)
        {
          v7 = 0;
          v19 = *MEMORY[0x1E0CA2E68];
          v8 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
          do
          {
            ValueAtIndex = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 488), v7);
            v10 = ValueAtIndex + 108;
            time1 = *(CMTime *)(ValueAtIndex + 108);
            *(_OWORD *)&time2.value = v19;
            time2.epoch = v8;
            v11 = CMTimeCompare(&time1, &time2);
            v12 = ValueAtIndex + 648;
            if (v11)
            {
              *v12 = *v10;
              *((_QWORD *)ValueAtIndex + 83) = *(_QWORD *)(ValueAtIndex + 124);
            }
            else
            {
              v13 = *(_OWORD *)(v1 + 48);
              *((_QWORD *)ValueAtIndex + 83) = *(_QWORD *)(v1 + 64);
              *v12 = v13;
            }
            time2 = values;
            *(_OWORD *)&rhs.value = *v10;
            rhs.epoch = *(_QWORD *)(ValueAtIndex + 124);
            CMTimeAdd(&time1, &time2, &rhs);
            *((CMTime *)ValueAtIndex + 28) = time1;
            setTrackHeaderDataCompleteFlagIfCumulatedInterleavingDurationReachesCumulatedMovieFragmentDuration((uint64_t)ValueAtIndex);
            ++v7;
          }
          while (v3 != v7);
          v4 = *(unsigned __int8 *)(v1 + 329);
        }
        if (v4)
        {
          LOBYTE(v4) = *(_BYTE *)(v1 + 16);
          if ((_BYTE)v4)
            LOBYTE(v4) = *(_BYTE *)(v1 + 17) != 0;
        }
        *(_BYTE *)(v1 + 331) = v4;
        v14 = sortTrackInfoLikedList(*(_QWORD *)(v1 + 496));
        *(_QWORD *)(v1 + 496) = v14;
        *(_QWORD *)(v1 + 504) = v14;
        if ((*(_BYTE *)(v1 + 36) & 1) == 0)
        {
          *(_OWORD *)(v1 + 24) = *(_OWORD *)v6;
          *(_QWORD *)(v1 + 40) = *(_QWORD *)(v6 + 16);
        }
        values.value = (CMTimeValue)CFSTR("com.apple.coremedia.formatwriter.qtmovie");
        v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v16 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], MEMORY[0x1E0CA52C8], (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        FigThreadCreate();
        if (*(_DWORD *)(v1 + 536))
        {
          v17 = CFNumberCreate(v15, kCFNumberSInt32Type, (const void *)(v1 + 536));
          FigThreadSetProperty();
          CFRelease(v17);
        }
        if (v16)
          CFRelease(v16);
        FigMemoryBarrier();
        *(_BYTE *)(v1 + 528) = 1;
        goto LABEL_28;
      }
      v5 = (CMTime *)(v1 + 144);
    }
    values = *v5;
    goto LABEL_11;
  }
LABEL_29:
  if ((*(_BYTE *)(v1 + 36) & 1) == 0)
    FigSignalErrorAt();
  if (*(_QWORD *)(v1 + 552))
    FigSemaphoreSignal();
  return MEMORY[0x19402EF04](*(_QWORD *)(v1 + 336));
}

uint64_t sortTrackInfoLikedList(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v1 = *(_QWORD *)(result + 24);
    if (v1)
    {
      v2 = *(_QWORD *)(v1 + 24);
      v3 = result;
      if (v2)
      {
        v3 = result;
        do
        {
          v3 = *(_QWORD *)(v3 + 24);
          v4 = *(_QWORD *)(v2 + 24);
          if (!v4)
            break;
          v2 = *(_QWORD *)(v4 + 24);
        }
        while (v2);
        v1 = *(_QWORD *)(v3 + 24);
      }
      *(_QWORD *)(v3 + 24) = 0;
      v5 = ((uint64_t (*)(void))sortTrackInfoLikedList)();
      v6 = sortTrackInfoLikedList(v1);
      return mergeTrackInfoLinkedList(v5, v6);
    }
  }
  return result;
}

uint64_t writingThread(uint64_t a1)
{
  int BlockBufferByteStreamForMovieSampleDataWriter;
  OS_os_workgroup *v3;
  OS_os_workgroup *v4;
  int v5;
  __int128 v6;
  OS_os_workgroup *v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int FirstMediaDataAtomOffset;
  OpaqueCMBlockBuffer *v16;
  int v17;
  const __CFArray *v18;
  CFIndex Count;
  int v20;
  CFIndex v21;
  const void *ValueAtIndex;
  CFIndex v23;
  CFIndex v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  CFIndex v35;
  int v36;
  CMBlockBufferRef theBuffer;
  _OWORD v38[4];
  os_workgroup_join_token_opaque_s token_out;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 329) && *(_BYTE *)(a1 + 330))
    goto LABEL_115;
  if (*(_BYTE *)(a1 + 384) || *(_BYTE *)(a1 + 330))
  {
    BlockBufferByteStreamForMovieSampleDataWriter = createBlockBufferByteStreamForMovieSampleDataWriter(a1);
    if (BlockBufferByteStreamForMovieSampleDataWriter)
    {
LABEL_112:
      v5 = BlockBufferByteStreamForMovieSampleDataWriter;
      goto LABEL_14;
    }
  }
  else
  {
    BlockBufferByteStreamForMovieSampleDataWriter = MovieSampleDataWriterSetDefaultByteStream(*(_QWORD *)(a1 + 744), *(const void **)(a1 + 8));
    if (BlockBufferByteStreamForMovieSampleDataWriter)
      goto LABEL_112;
  }
  BlockBufferByteStreamForMovieSampleDataWriter = MovieSampleDataWriterSetThreadPriorityAndClientPID(*(_QWORD *)(a1 + 744));
  if (BlockBufferByteStreamForMovieSampleDataWriter)
    goto LABEL_112;
  memset(&token_out, 0, sizeof(token_out));
  if (!*(_BYTE *)(a1 + 600))
  {
    v5 = 0;
    goto LABEL_13;
  }
  memset((char *)&v38[2] + 4, 0, 28);
  memset((char *)v38 + 4, 0, 32);
  LODWORD(v38[0]) = 799564724;
  if (os_workgroup_attr_set_flags())
    goto LABEL_115;
  v3 = (OS_os_workgroup *)os_workgroup_create();
  if (!v3)
  {
    __error();
LABEL_115:
    v5 = FigSignalErrorAt();
    goto LABEL_13;
  }
  v4 = v3;
  if (os_workgroup_join(v3, &token_out))
  {
    v5 = FigSignalErrorAt();
    os_release(v4);
  }
  else
  {
    v5 = 0;
    *(_QWORD *)(a1 + 608) = v4;
    *(_QWORD *)(a1 + 648) = *(_QWORD *)&token_out.opaque[28];
    v6 = *(_OWORD *)&token_out.opaque[12];
    *(_OWORD *)(a1 + 616) = *(_OWORD *)&token_out.sig;
    *(_OWORD *)(a1 + 632) = v6;
  }
LABEL_13:
  if (v5)
LABEL_14:
    setWritingThreadErrorAndPostErrorOccurredNotification(a1, v5);
  if (*(_BYTE *)(a1 + 563))
    goto LABEL_16;
  v9 = *MEMORY[0x1E0C9AE00];
  v10 = MEMORY[0x1E0CA2E18];
  do
  {
    if (*(_BYTE *)(a1 + 560))
    {
      v11 = flushAllSampleBufferQueues(a1);
      if (v11)
      {
        v12 = v11;
      }
      else
      {
        v12 = MovieSampleDataWriterFlush(*(uint64_t **)(a1 + 744));
        if (!v12)
        {
LABEL_24:
          *(_BYTE *)(a1 + 560) = 0;
LABEL_101:
          FigSemaphoreSignal();
          goto LABEL_102;
        }
      }
      setWritingThreadErrorAndPostErrorOccurredNotification(a1, v12);
      goto LABEL_24;
    }
    if (*(_BYTE *)(a1 + 562))
    {
      v13 = writeMovieHeader(a1, *(_BYTE *)(a1 + 17) != 0, 0);
      if (v13)
      {
        v17 = v13;
      }
      else
      {
        if (!*(_BYTE *)(a1 + 329) || !*(_BYTE *)(a1 + 531))
          goto LABEL_44;
        v14 = *(_QWORD *)(a1 + 360);
        theBuffer = 0;
        *(_QWORD *)&v38[0] = 0;
        *(_QWORD *)&token_out.sig = 0;
        FirstMediaDataAtomOffset = MovieSampleDataWriterGetFirstMediaDataAtomOffset(*(_QWORD *)(a1 + 744), 0, v38);
        if (FirstMediaDataAtomOffset)
          goto LABEL_109;
        FirstMediaDataAtomOffset = MovieSampleDataWriterCopyURLOfDefaultByteStream(*(_QWORD *)(a1 + 744), v9, &token_out);
        if (FirstMediaDataAtomOffset)
          goto LABEL_109;
        FirstMediaDataAtomOffset = createMovieAtomBBuf(a1, 0, *(const __CFURL **)&token_out.sig, (CFTypeRef *)&theBuffer);
        if (FirstMediaDataAtomOffset
          || (v16 = theBuffer,
              *(_QWORD *)(a1 + 368) = CMBlockBufferGetDataLength(theBuffer),
              (FirstMediaDataAtomOffset = MovieSampleDataWriterAppendHeader(*(_QWORD *)(a1 + 744), v16, (_QWORD *)(a1 + 360))) != 0)|| (MovieSampleDataWriterSynchronizeDefaultByteStream(*(_QWORD *)(a1 + 744), 1, 0), (FirstMediaDataAtomOffset = MovieSampleDataWriterWriteData(*(_QWORD *)(a1 + 744), 1, v14 + 4, (uint64_t)"h")) != 0)|| (*(_BYTE *)(a1 + 352) = 0, (FirstMediaDataAtomOffset = MovieSampleDataWriterPatchFirstMediaDataAtomSize(*(_QWORD *)(a1 + 744), *(_QWORD *)(a1 + 360) - *(_QWORD *)&v38[0])) != 0))
        {
LABEL_109:
          v17 = FirstMediaDataAtomOffset;
        }
        else
        {
          if (*(_BYTE *)(a1 + 17))
            MovieSampleDataWriterSynchronizeDefaultByteStream(*(_QWORD *)(a1 + 744), 1, 0);
          v17 = 0;
          *(_BYTE *)(a1 + 532) = 1;
        }
        if (*(_QWORD *)&token_out.sig)
          CFRelease(*(CFTypeRef *)&token_out.sig);
        if (theBuffer)
          CFRelease(theBuffer);
        if (!v17)
          goto LABEL_44;
      }
      setWritingThreadErrorAndPostErrorOccurredNotification(a1, v17);
LABEL_44:
      *(_BYTE *)(a1 + 562) = 0;
      goto LABEL_101;
    }
    if (*(_BYTE *)(a1 + 561))
    {
      v18 = *(const __CFArray **)(a1 + 488);
      if (v18)
      {
        Count = CFArrayGetCount(v18);
        v20 = flushAllSampleBufferQueues(a1);
        if (!v20)
        {
          if (Count >= 1)
          {
            v21 = 0;
            do
            {
              ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 488), v21);
              v38[0] = *(_OWORD *)(a1 + 656);
              *(_QWORD *)&v38[1] = *(_QWORD *)(a1 + 672);
              v20 = trackEndSession((uint64_t)ValueAtIndex, v38, 2);
              if (v20)
                goto LABEL_106;
            }
            while (Count != ++v21);
          }
LABEL_99:
          *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(v10 + 16);
LABEL_100:
          *(_BYTE *)(a1 + 561) = 0;
          goto LABEL_101;
        }
      }
      else
      {
        v20 = flushAllSampleBufferQueues(a1);
        if (!v20)
          goto LABEL_99;
      }
LABEL_106:
      setWritingThreadErrorAndPostErrorOccurredNotification(a1, v20);
      goto LABEL_100;
    }
    while (1)
    {
      while (1)
      {
        v31 = *(_QWORD *)(a1 + 504);
        if (isReadyToWriteTrackHeaderWithNoSamples(v31))
        {
          v28 = 0;
          v30 = 0;
          v29 = 6;
          goto LABEL_86;
        }
        if (reachedInterleavingPeriod(v31))
        {
          v28 = 0;
          v30 = 0;
          v29 = 1;
          goto LABEL_86;
        }
        if (trackBufferQueueIsSampleAvailable(v31))
        {
          v28 = 0;
          v30 = 0;
          v29 = 2;
          goto LABEL_86;
        }
        if (trackBufferQueueIsAtEndOfData(v31))
          break;
        if (!*(_BYTE *)(v31 + 352) && !*(_DWORD *)(v31 + 100))
        {
          v28 = 0;
          v29 = 5;
          v30 = 1;
          goto LABEL_86;
        }
        v26 = *(_QWORD *)(a1 + 504);
        if (!v26)
          goto LABEL_102;
        while (!CMBufferQueueTestTrigger(*(CMBufferQueueRef *)(v26 + 608), *(CMBufferQueueTriggerToken *)(v26 + 640)))
        {
          if (*(_QWORD *)(v26 + 24))
            v26 = *(_QWORD *)(v26 + 24);
          else
            v26 = *(_QWORD *)(a1 + 496);
          if (v26 == *(_QWORD *)(a1 + 504))
            goto LABEL_102;
        }
        v27 = *(_QWORD *)(a1 + 504);
        if (!*(_DWORD *)(v27 + 100))
        {
          v27 = *(_QWORD *)(v27 + 24) ? *(_QWORD *)(v27 + 24) : *(_QWORD *)(a1 + 496);
          if (v27 == v26)
          {
            if (*(_QWORD *)(v26 + 24))
              v27 = *(_QWORD *)(v26 + 24);
            else
              v27 = *(_QWORD *)(a1 + 496);
          }
        }
        setNextCumulatedInterleavingDuration((CMTime *)v31);
        *(_QWORD *)(a1 + 504) = v26;
        *(_QWORD *)(a1 + 512) = v27;
      }
      v30 = 0;
      v29 = 3;
      v28 = 1;
LABEL_86:
      LOBYTE(v38[0]) = 1;
      LOBYTE(token_out.sig) = 1;
      v32 = handleWritingThreadEvent(v31, v29, (BOOL *)v38, (char *)&token_out);
      if (v32)
        break;
      if (LOBYTE(v38[0]))
      {
        v33 = *(_QWORD *)(a1 + 512);
        if (v33)
        {
          *(_QWORD *)(a1 + 504) = v33;
          *(_QWORD *)(a1 + 512) = 0;
        }
        else
        {
          v34 = *(_QWORD *)(a1 + 496);
          if (*(_QWORD *)(v31 + 24))
            v34 = *(_QWORD *)(v31 + 24);
          *(_QWORD *)(a1 + 504) = v34;
        }
      }
      if (LOBYTE(token_out.sig))
        setNextCumulatedInterleavingDuration((CMTime *)v31);
      if ((v28 | v30) == 1)
      {
        v35 = CFArrayGetCount(*(CFArrayRef *)(a1 + 488));
        if (v35 < 1)
          goto LABEL_102;
        v23 = v35;
        v24 = 0;
        while (1)
        {
          v25 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 488), v24);
          if (!trackBufferQueueIsAtEndOfData((uint64_t)v25)
            && (v25[352] || trackBufferQueueIsSampleAvailable((uint64_t)v25)))
          {
            break;
          }
          if (v23 == ++v24)
            goto LABEL_102;
        }
      }
    }
    setWritingThreadErrorAndPostErrorOccurredNotification(a1, v32);
LABEL_102:
    v36 = MovieSampleDataWriterFlush(*(uint64_t **)(a1 + 744));
    if (v36)
      setWritingThreadErrorAndPostErrorOccurredNotification(a1, v36);
    FigSemaphoreWaitRelative();
  }
  while (!*(_BYTE *)(a1 + 563));
LABEL_16:
  v7 = *(OS_os_workgroup **)(a1 + 608);
  if (v7)
    os_workgroup_leave(v7, (os_workgroup_join_token_t)(a1 + 616));
  return 0;
}

BOOL reachedInterleavingPeriod(uint64_t a1)
{
  CMTime v3;
  CMTime time1;
  CMTime v5;

  memset(&v5, 0, sizeof(v5));
  getMediaDecodeDuration(a1, &v5);
  if ((v5.flags & 1) == 0)
    FigSignalErrorAt();
  if (*(_DWORD *)(a1 + 100))
    return 0;
  time1 = *(CMTime *)(a1 + 648);
  v3 = v5;
  return CMTimeCompare(&time1, &v3) < 1;
}

uint64_t facEncoderInputProc(uint64_t a1, unsigned int *a2, unsigned int *a3, uint64_t a4, uint64_t a5)
{
  const AudioStreamBasicDescription *StreamBasicDescription;
  const AudioStreamBasicDescription *v9;
  const void *v10;
  opaqueCMSampleBuffer *v11;
  uint64_t result;
  _DWORD *v13;
  unsigned int NumSamples;
  unsigned int v15;
  unsigned int *v16;
  unint64_t v17;
  size_t v18;
  size_t *v19;
  unint64_t v20;
  void **v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  AudioFormatFlags mFormatFlags;
  UInt32 mBitsPerChannel;
  __int16 *v28;
  __int16 *v29;
  unsigned int v30;
  int v31;
  __int16 v32;
  __int16 v33;
  __int16 v34;
  float *v35;
  float *v36;
  unsigned int v37;
  float v38;
  float v39;
  unsigned __int16 *v40;
  __int16 *v41;
  unsigned int *v42;
  int *v43;
  unsigned int v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  unsigned int v55;
  _QWORD *v56;
  CMTime v57;

  StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(*(CMAudioFormatDescriptionRef *)(a5 + 24));
  v9 = CMAudioFormatDescriptionGetStreamBasicDescription(*(CMAudioFormatDescriptionRef *)(a5 + 32));
  v10 = *(const void **)(a5 + 96);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a5 + 96) = 0;
  }
  v11 = *(opaqueCMSampleBuffer **)(a5 + 88);
  *(_QWORD *)(a5 + 88) = 0;
  if (!v11)
  {
    *a2 = 0;
    if (*(_DWORD *)(a5 + 196) == 1)
      return 0;
    else
      return 3;
  }
  if (!*(_BYTE *)(a5 + 144))
  {
    CMSampleBufferGetPresentationTimeStamp(&v57, v11);
    *(CMTime *)(a5 + 120) = v57;
    *(_BYTE *)(a5 + 144) = 1;
  }
  if (CMSampleBufferGetAudioBufferListWithRetainedBlockBuffer(v11, 0, *(AudioBufferList **)(a5 + 104), *(_QWORD *)(a5 + 112), (CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, (CMBlockBufferRef *)(a5 + 96)))
  {
    *a2 = 0;
    return FigSignalErrorAt();
  }
  v13 = *(_DWORD **)(a5 + 104);
  NumSamples = CMSampleBufferGetNumSamples(v11);
  v15 = NumSamples;
  v16 = *(unsigned int **)(a5 + 176);
  if (v16)
  {
    if (StreamBasicDescription->mChannelsPerFrame != 2 || v9->mChannelsPerFrame != 1)
    {
LABEL_70:
      v13 = *(_DWORD **)(a5 + 176);
      goto LABEL_71;
    }
    v17 = *v16;
    v18 = NumSamples * (unint64_t)(StreamBasicDescription->mBytesPerPacket >> 1);
    if ((_DWORD)v17 == 1)
    {
      v18 *= v16[2];
      v19 = (size_t *)(a5 + 184);
      if (v18 <= *(_QWORD *)(a5 + 184))
      {
        v17 = 1;
LABEL_31:
        v25 = 3;
        do
        {
          v16[v25] = v18;
          v25 += 4;
          --v17;
        }
        while (v17);
LABEL_33:
        mFormatFlags = StreamBasicDescription->mFormatFlags;
        if ((mFormatFlags & 1) != 0)
        {
          if (v15)
          {
            v35 = (float *)*((_QWORD *)v16 + 2);
            v36 = *(float **)(*(_QWORD *)(a5 + 104) + 16);
            v37 = v15;
            do
            {
              v38 = *v36;
              v39 = v36[1];
              v36 += 2;
              *v35++ = (float)(v39 * 0.707) + (float)(v38 * 0.707);
              --v37;
            }
            while (v37);
          }
        }
        else
        {
          mBitsPerChannel = StreamBasicDescription->mBitsPerChannel;
          if ((mFormatFlags & 2) != 0 || StreamBasicDescription->mFormatID != 1819304813)
          {
            v40 = *(unsigned __int16 **)(*(_QWORD *)(a5 + 104) + 16);
            v41 = (__int16 *)*((_QWORD *)v16 + 2);
            if (mBitsPerChannel == 16)
              StereoMonoDownMix16SwappedEndian(v40, v41, v15);
            else
              StereoMonoDownMix32SwappedEndian((unsigned int *)v40, (unsigned int *)v41, v15);
          }
          else if (mBitsPerChannel == 16)
          {
            if (v15)
            {
              v28 = (__int16 *)*((_QWORD *)v16 + 2);
              v29 = *(__int16 **)(*(_QWORD *)(a5 + 104) + 16);
              v30 = v15;
              do
              {
                v31 = ((2896 * v29[1]) >> 12) + ((2896 * *v29) >> 12);
                if (v31 >= 0x7FFF)
                  v32 = 0x7FFF;
                else
                  v32 = ((2896 * v29[1]) >> 12) + ((2896 * *v29) >> 12);
                if (v31 <= -32768)
                  v33 = 0x8000;
                else
                  v33 = ((2896 * v29[1]) >> 12) + ((2896 * *v29) >> 12);
                if (v31 <= 0)
                  v34 = v33;
                else
                  v34 = v32;
                *v28++ = v34;
                v29 += 2;
                --v30;
              }
              while (v30);
            }
          }
          else if (v15)
          {
            v42 = (unsigned int *)*((_QWORD *)v16 + 2);
            v43 = *(int **)(*(_QWORD *)(a5 + 104) + 16);
            v44 = v15;
            do
            {
              v45 = *v43;
              v46 = v43[1];
              v43 += 2;
              v47 = ((11863283 * v46) >> 24) + ((11863283 * v45) >> 24);
              if (v47 >= 0x7FFFFFFF)
                v48 = 0x7FFFFFFF;
              else
                v48 = v47;
              if (v47 <= (uint64_t)0xFFFFFFFF80000000)
                v49 = 0x80000000;
              else
                v49 = v47;
              if (v47 <= 0)
                v50 = v49;
              else
                v50 = v48;
              *v42++ = v50;
              --v44;
            }
            while (v44);
          }
        }
        goto LABEL_70;
      }
    }
    else
    {
      v19 = (size_t *)(a5 + 184);
      if (v18 <= *(_QWORD *)(a5 + 184))
        goto LABEL_30;
      if (!*v16)
      {
LABEL_29:
        *v19 = v18;
LABEL_30:
        if (!v17)
          goto LABEL_33;
        goto LABEL_31;
      }
    }
    v20 = 0;
    v21 = (void **)(v16 + 4);
    do
    {
      if (*v21)
      {
        free(*v21);
        *v21 = 0;
        v17 = *v16;
      }
      *((_DWORD *)v21 - 1) = 0;
      ++v20;
      v21 += 2;
    }
    while (v20 < v17);
    v16 = *(unsigned int **)(a5 + 176);
    if (*v16)
    {
      v22 = 0;
      v23 = 4;
      while (1)
      {
        v24 = malloc_type_malloc(v18, 0x35D0D8F5uLL);
        v16 = *(unsigned int **)(a5 + 176);
        *(_QWORD *)&v16[v23] = v24;
        if (!v24)
          goto LABEL_33;
        ++v22;
        v17 = *v16;
        v23 += 4;
        if (v22 >= v17)
          goto LABEL_29;
      }
    }
    v17 = 0;
    goto LABEL_29;
  }
LABEL_71:
  v51 = *a3;
  if ((_DWORD)v51)
  {
    v52 = 0;
    v55 = *v13;
    v54 = v13 + 4;
    v53 = v55;
    v56 = a3 + 4;
    do
    {
      if (v52 < v53)
      {
        *(v56 - 1) = *(v54 - 1);
        *v56 = *v54;
      }
      ++v52;
      v54 += 2;
      v56 += 2;
    }
    while (v51 != v52);
  }
  result = 0;
  *a2 = v15;
  *(_QWORD *)(a5 + 200) += v15;
  return result;
}

uint64_t handleWritingThreadEvent(uint64_t a1, int a2, BOOL *a3, char *a4)
{
  uint64_t v7;
  BOOL v9;
  uint64_t started;
  char v11;
  uint64_t v12;
  uint64_t v13;
  CMTimeEpoch v14;
  opaqueCMSampleBuffer *v15;
  opaqueCMSampleBuffer *v16;
  _OWORD *v17;
  int v18;
  const __CFDictionary *v19;
  CMTimeEpoch epoch;
  opaqueCMSampleBuffer *v21;
  const opaqueCMFormatDescription *v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  int v27;
  _OWORD *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  opaqueCMSampleBuffer *v32;
  opaqueCMSampleBuffer *v33;
  const __CFArray *SampleAttachmentsArray;
  int SampleAttachmentSync;
  uint64_t v36;
  opaqueCMSampleBuffer *Head;
  CMFormatDescriptionRef FormatDescription;
  __int128 v40;
  CMTime v41;
  CMSampleBufferRef sbuf;
  opaqueCMSampleBuffer *v43;
  CMTime v44;
  CMTime v45;
  CMTime rhs;
  CMTime lhs;
  CMTime time1;
  CMTime v49;
  CMTime v50;

  v7 = *(_QWORD *)(a1 + 16);
  switch(a2)
  {
    case 1:
      if (!*(_BYTE *)(v7 + 329) && !*(_BYTE *)(v7 + 330) || !*(_BYTE *)(a1 + 601))
        goto LABEL_34;
      v12 = setTrackHeaderDataCompleteFlagAndWriteCheckpointIfPossible(a1);
      if (!(_DWORD)v12)
      {
        *(_BYTE *)(a1 + 601) = 0;
        goto LABEL_34;
      }
      return v12;
    case 2:
      sbuf = 0;
      if (*(_BYTE *)(v7 + 329))
      {
        if (*(_BYTE *)(v7 + 332))
        {
          if (!*(_BYTE *)(v7 + 352) && !*(_BYTE *)(a1 + 600))
          {
            Head = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)(a1 + 608));
            sbuf = Head;
            if (CMSampleBufferGetNumSamples(Head))
            {
              FormatDescription = CMSampleBufferGetFormatDescription(Head);
              started = MovieTrackFindOrAddSampleDescription(*(_QWORD *)(a1 + 736), FormatDescription, 0, 0);
              if ((_DWORD)started)
                return started;
              goto LABEL_74;
            }
          }
        }
      }
      if (!*(_BYTE *)(v7 + 168))
      {
        v50 = *(CMTime *)(v7 + 48);
        started = trackBufferQueueDequeueAndRetain(a1, &v50, &sbuf);
        if ((_DWORD)started)
          return started;
        v21 = sbuf;
        goto LABEL_78;
      }
      v43 = 0;
      v13 = *(_QWORD *)(a1 + 16);
      v40 = *MEMORY[0x1E0CA2E18];
      *(_OWORD *)&v44.value = *MEMORY[0x1E0CA2E18];
      v14 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      v44.epoch = v14;
      if (*(_DWORD *)a1 != 1936684398)
        goto LABEL_60;
      if (*(_QWORD *)(a1 + 776))
        goto LABEL_60;
      v15 = (opaqueCMSampleBuffer *)trackBufferQueueGetHead(a1);
      if (!v15)
        goto LABEL_60;
      v16 = v15;
      if (!CMSampleBufferGetNumSamples(v15))
        goto LABEL_60;
      v17 = (_OWORD *)(a1 + 784);
      v18 = *(unsigned __int8 *)(a1 + 810);
      if (*(_BYTE *)(a1 + 810))
        goto LABEL_49;
      if (*(_BYTE *)(a1 + 808))
      {
        if (*(_BYTE *)(a1 + 809))
          goto LABEL_26;
        goto LABEL_47;
      }
      v22 = CMSampleBufferGetFormatDescription(v16);
      if (v22)
      {
        memset(&v50, 0, sizeof(v50));
        FigGaplessInfoGetDefaultAudioPrimingDuration(v22, &v50);
        if ((v50.flags & 1) != 0)
        {
          v49 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
          time1 = v50;
          v23 = CMTimeCompare(&v49, &time1) >> 31;
        }
        else
        {
          v23 = 0;
        }
        *(_BYTE *)(a1 + 809) = v23;
        *(_BYTE *)(a1 + 808) = 1;
        if (v23)
        {
LABEL_26:
          v19 = (const __CFDictionary *)CMGetAttachment(v16, (CFStringRef)*MEMORY[0x1E0CA2728], 0);
          memset(&v50, 0, sizeof(v50));
          CMSampleBufferGetDuration(&v50, v16);
          memset(&v49, 0, sizeof(v49));
          CMTimeMakeFromDictionary(&v49, v19);
          if ((v49.flags & 1) == 0)
            v49 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
          if ((*(_BYTE *)(a1 + 796) & 1) != 0)
          {
            *(_OWORD *)&lhs.value = *v17;
            lhs.epoch = *(_QWORD *)(a1 + 800);
            rhs = v49;
            CMTimeAdd(&time1, &lhs, &rhs);
            *v17 = *(_OWORD *)&time1.value;
            epoch = time1.epoch;
          }
          else
          {
            *v17 = *(_OWORD *)&v49.value;
            epoch = v49.epoch;
          }
          *(_QWORD *)(a1 + 800) = epoch;
          time1 = v49;
          lhs = v50;
          if ((CMTimeCompare(&time1, &lhs) & 0x80000000) == 0)
          {
            v18 = *(unsigned __int8 *)(a1 + 810);
LABEL_49:
            v25 = *(unsigned __int8 *)(a1 + 809);
            *(_OWORD *)&v45.value = *v17;
            v45.epoch = *(_QWORD *)(a1 + 800);
            goto LABEL_50;
          }
LABEL_48:
          v18 = 1;
          *(_BYTE *)(a1 + 810) = 1;
          goto LABEL_49;
        }
LABEL_47:
        v24 = MEMORY[0x1E0CA2E68];
        *v17 = *MEMORY[0x1E0CA2E68];
        *(_QWORD *)(a1 + 800) = *(_QWORD *)(v24 + 16);
        goto LABEL_48;
      }
      v12 = FigSignalErrorAt();
      v25 = *(unsigned __int8 *)(a1 + 809);
      v18 = *(unsigned __int8 *)(a1 + 810);
      *(_OWORD *)&v45.value = *v17;
      v45.epoch = *(_QWORD *)(a1 + 800);
      if ((_DWORD)v12)
        return v12;
LABEL_50:
      if (v18 == 1)
      {
        v26 = (uint64_t *)(a1 + 776);
        started = AudioSampleBufferSplitterCreate((_QWORD *)(a1 + 776));
        if ((_DWORD)started)
          return started;
        CMSampleBufferGetFormatDescription(v16);
        v27 = FigAudioFormatDescriptionEmploysDependentPackets() ? 2 : 1;
        started = AudioSampleBufferSplitterSetSplitMethod((_DWORD *)*v26, v27);
        if ((_DWORD)started)
          return started;
        v28 = (_OWORD *)(v13 + 172);
        if (v25)
        {
          *(_OWORD *)&v50.value = *v28;
          v50.epoch = *(_QWORD *)(v13 + 188);
          v49 = v45;
          CMTimeSubtract(&v44, &v50, &v49);
        }
        else
        {
          *(_OWORD *)&v44.value = *v28;
          v44.epoch = *(_QWORD *)(v13 + 188);
        }
        v29 = *v26;
        v50 = v44;
        v49 = *(CMTime *)(v13 + 196);
        started = AudioSampleBufferSplitterSetInitialSegmentStartTimeAndSegmentInterval(v29, (__int128 *)&v50.value, &v49);
        if ((_DWORD)started)
          return started;
      }
LABEL_60:
      v30 = *(_QWORD *)(a1 + 16);
      *(_OWORD *)&v50.value = v40;
      v50.epoch = v14;
      *(_OWORD *)&v49.value = v40;
      v49.epoch = v14;
      v31 = *(_DWORD *)(a1 + 344);
      if (v31 == 2)
      {
        v33 = *(opaqueCMSampleBuffer **)(a1 + 328);
        if (!v33)
          goto LABEL_76;
        CMSampleBufferGetOutputPresentationTimeStamp(&v50, v33);
        v32 = *(opaqueCMSampleBuffer **)(a1 + 328);
        goto LABEL_66;
      }
      if (v31 == 1)
      {
        v32 = (opaqueCMSampleBuffer *)trackBufferQueueGetHead(a1);
        if (!CMSampleBufferGetNumSamples(v32))
          goto LABEL_76;
        CMSampleBufferGetOutputPresentationTimeStamp(&v50, v32);
LABEL_66:
        SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(v32, 0);
        SampleAttachmentSync = isFirstSampleAttachmentSync(SampleAttachmentsArray);
        goto LABEL_68;
      }
      SampleAttachmentSync = 0;
LABEL_68:
      v36 = *(_QWORD *)(a1 + 776);
      if (v36)
      {
        started = AudioSampleBufferSplitterGetInitialSegmentStartTimeAndSegmentInterval(v36, (uint64_t)&v49, 0);
        if ((_DWORD)started)
          return started;
      }
      else
      {
        v49 = *(CMTime *)(v30 + 172);
      }
      memset(&time1, 0, sizeof(time1));
      lhs = v50;
      rhs = v49;
      CMTimeSubtract(&time1, &lhs, &rhs);
      lhs = *(CMTime *)(v30 + 220);
      rhs = time1;
      if (CMTimeCompare(&lhs, &rhs) <= 0 && SampleAttachmentSync)
      {
LABEL_74:
        started = setTrackHeaderDataCompleteFlagAndWriteCheckpointIfPossible(a1);
        if ((_DWORD)started)
          return started;
        v9 = 1;
        goto LABEL_82;
      }
LABEL_76:
      v50 = *(CMTime *)(*(_QWORD *)(a1 + 16) + 48);
      started = trackBufferQueueDequeueAndRetain(a1, &v50, &v43);
      if ((_DWORD)started)
        return started;
      v21 = v43;
LABEL_78:
      v12 = addSampleBufferToTrack(a1, v21);
      if (v21)
        CFRelease(v21);
      if (!(_DWORD)v12)
        goto LABEL_81;
      return v12;
    case 3:
    case 4:
      v9 = *(_QWORD *)(a1 + 328) == 0;
      MediaSampleTimingGeneratorGetDefaultLastSampleDuration(*(CMTime **)(a1 + 752), &v41);
      started = flushSampleBufferToTrack(a1, (uint64_t)&v41);
      if (!(_DWORD)started)
      {
        if (a2 == 3)
        {
          if (!*(_BYTE *)(v7 + 329) && !*(_BYTE *)(v7 + 330))
          {
            v11 = *(_BYTE *)(v7 + 168);
            if (!v11)
              goto LABEL_83;
          }
          v12 = setTrackHeaderDataCompleteFlagAndWriteCheckpointIfPossible(a1);
          if ((_DWORD)v12)
            return v12;
        }
LABEL_82:
        v11 = 0;
LABEL_83:
        v12 = 0;
        *a3 = v9;
        *a4 = v11;
        return v12;
      }
      return started;
    case 5:
      if (*(_BYTE *)(v7 + 329) || *(_BYTE *)(v7 + 330))
      {
        if (doesTrackHaveFormatDescriptionAndNonZeroMediaTimeScale(a1))
        {
          v12 = setTrackHeaderDataCompleteFlagAndWriteCheckpointIfPossible(a1);
          if ((_DWORD)v12)
            return v12;
        }
      }
LABEL_34:
      v9 = 1;
      v11 = 1;
      goto LABEL_83;
    case 6:
      v12 = setTrackHeaderDataCompleteFlagAndWriteCheckpointIfPossible(a1);
      if ((_DWORD)v12)
        return v12;
      v11 = 0;
      v9 = 1;
      goto LABEL_83;
    default:
LABEL_81:
      v9 = 0;
      goto LABEL_82;
  }
}

uint64_t addSampleBufferWithSampleMediaTimingToTrack(uint64_t a1, CMSampleBufferRef sbuf, uint64_t a3, CMTime *a4, uint64_t a5, uint64_t a6, int a7, double a8)
{
  void *DataBuffer;
  CVImageBufferRef ImageBuffer;
  const __CFNumber *v17;
  const __CFNumber *v18;
  CFTypeRef v19;
  uint64_t SampleSizeArrayFromSbuf;
  uint64_t v21;
  int v22;
  uint64_t v23;
  const __CFArray *SampleAttachmentsArray;
  const __CFArray *v25;
  uint64_t v26;
  uint64_t *v27;
  CMItemCount v28;
  unint64_t v29;
  CMItemCount v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t LengthOfDefaultByteStream;
  unsigned int NumFormatDescriptions;
  CFDictionaryRef v36;
  uint64_t appended;
  CMTime *v38;
  CMTime *v39;
  uint64_t v40;
  CMTimeValue v41;
  const __CFArray *v42;
  CFIndex Count;
  CFIndex v44;
  CFIndex v45;
  _BYTE *ValueAtIndex;
  const __CFArray *v47;
  CFIndex v48;
  void *v49;
  int v50;
  int value;
  int v52;
  int v53;
  CMTime *v54;
  CFIndex i;
  char *v56;
  CMTimeEpoch epoch;
  int v58;
  int v59;
  CMTime *v60;
  int v61;
  int v62;
  uint64_t v63;
  _BOOL4 v64;
  int32_t v65;
  int v66;
  uint64_t v67;
  __int128 *v68;
  __int128 v69;
  _OWORD *v70;
  CMTimeEpoch v71;
  _OWORD *v72;
  _OWORD *v73;
  CMTimeEpoch v74;
  double v75;
  uint64_t v76;
  int v77;
  uint64_t v79;
  unint64_t *v80;
  const __CFArray *v81;
  CFDictionaryRef v82;
  int v83;
  CMFormatDescriptionRef FormatDescription;
  uint64_t v86;
  __int128 v87;
  CMItemCount NumSamples;
  CMTime v89;
  CMTime v90;
  uint64_t valuePtr;
  CFTypeRef cf;
  void *ptr;
  CMItemCount v94;
  CMTime v95;
  CMTime v96;
  unsigned int v97;
  CMTime v98;
  CMTime v99;
  CMTime v100;
  CMTime time;
  CMTime v102;
  CMTime v103;
  CMTime v104;
  CMTime v105;
  CMTime v106;
  CMTime v107;
  CMTime lhs;
  CMTime rhs;
  CMTime time2;
  CMTime time1;
  size_t v112[102];

  v112[100] = *MEMORY[0x1E0C80C00];
  DataBuffer = CMSampleBufferGetDataBuffer(sbuf);
  ImageBuffer = CMSampleBufferGetImageBuffer(sbuf);
  NumSamples = CMSampleBufferGetNumSamples(sbuf);
  FormatDescription = CMSampleBufferGetFormatDescription(sbuf);
  ptr = 0;
  v94 = 0;
  valuePtr = 0;
  cf = 0;
  v17 = (const __CFNumber *)CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0CA26F0], 0);
  v18 = v17;
  if (v17)
  {
    CFNumberGetValue(v17, kCFNumberSInt64Type, &valuePtr);
    v19 = CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0CA26F8], 0);
    if (DataBuffer)
      goto LABEL_6;
  }
  else
  {
    v19 = 0;
    if (DataBuffer)
      goto LABEL_6;
  }
  DataBuffer = ImageBuffer;
  if (!((unint64_t)ImageBuffer | (unint64_t)v18))
  {
    v22 = 0;
    v21 = 0;
    goto LABEL_145;
  }
LABEL_6:
  SampleSizeArrayFromSbuf = getSampleSizeArrayFromSbuf(sbuf, 100, v112, &v94);
  if ((_DWORD)SampleSizeArrayFromSbuf != -12737)
  {
    v21 = SampleSizeArrayFromSbuf;
    if (!(_DWORD)SampleSizeArrayFromSbuf)
    {
      v22 = 0;
      ptr = v112;
      goto LABEL_9;
    }
LABEL_21:
    v22 = 0;
    goto LABEL_145;
  }
  if ((unint64_t)(v94 - 0x2000000000000000) <= 0xE000000000000000
    || (v49 = CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 8 * v94, 0), (ptr = v49) == 0))
  {
    v21 = FigSignalErrorAt();
    goto LABEL_21;
  }
  v21 = getSampleSizeArrayFromSbuf(sbuf, v94, (size_t *)v49, 0);
  v22 = 1;
  if ((_DWORD)v21)
    goto LABEL_145;
LABEL_9:
  v83 = v22;
  if (!NumSamples || v94 || v18 || *(_DWORD *)a1 != 1936684398)
  {
LABEL_15:
    SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(sbuf, 0);
    v25 = SampleAttachmentsArray;
    if (SampleAttachmentsArray)
    {
      if (CFArrayGetCount(SampleAttachmentsArray) != NumSamples)
      {
        v23 = FigSignalErrorAt();
        if ((_DWORD)v23)
          goto LABEL_18;
      }
    }
    v81 = v25;
    v82 = CMCopyDictionaryOfAttachments((CFAllocatorRef)*MEMORY[0x1E0C9AE00], sbuf, 1u);
    v26 = *(_QWORD *)(a1 + 16);
    if (*(_BYTE *)(v26 + 384) || *(_BYTE *)(v26 + 533))
    {
      setTrackExtendsDefaultValuesIfNeeded(a1);
      goto LABEL_25;
    }
    if (!*(_BYTE *)(a1 + 728))
    {
      if (a3 && v94)
      {
        v50 = *(_DWORD *)a1;
        value = a4->value;
        v52 = *(_DWORD *)ptr;
        v53 = 16842752;
        if (*(int *)a1 <= 1936684397)
        {
          if (v50 == 1635088502 || v50 == 1885954932)
            goto LABEL_151;
          goto LABEL_150;
        }
        if (v50 != 1986618469)
        {
          if (v50 != 1936684398)
          {
LABEL_150:
            v53 = 0;
            goto LABEL_151;
          }
          v53 = (FigAudioFormatDescriptionEmploysDependentPackets() != 0) << 16;
        }
LABEL_151:
        LengthOfDefaultByteStream = MovieTrackSetTrackExtendsDefaultValues(*(_DWORD **)(a1 + 736), 1, value, v52, v53);
        if ((_DWORD)LengthOfDefaultByteStream)
          goto LABEL_155;
        *(_BYTE *)(a1 + 728) = 1;
        goto LABEL_25;
      }
      LengthOfDefaultByteStream = FigSignalErrorAt();
      if ((_DWORD)LengthOfDefaultByteStream)
        goto LABEL_155;
    }
LABEL_25:
    v27 = (uint64_t *)ptr;
    v28 = v94;
    v80 = (unint64_t *)ptr;
    if (v94 == 1)
    {
      v29 = *(_QWORD *)ptr * NumSamples;
    }
    else
    {
      v29 = 0;
      if (v94 >= 1)
      {
        v30 = v94;
        do
        {
          v31 = *v27++;
          v29 += v31;
          --v30;
        }
        while (v30);
      }
    }
    v32 = *(_QWORD *)(a1 + 696);
    if (v32 <= v29)
      v32 = v29;
    *(_QWORD *)(a1 + 696) = v32;
    v33 = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)(v33 + 696) > v29)
      v29 = *(_QWORD *)(v33 + 696);
    *(_QWORD *)(v33 + 696) = v29;
    v79 = valuePtr;
    *(_OWORD *)&v90.value = *(_OWORD *)a5;
    v90.epoch = *(_QWORD *)(a5 + 16);
    *(_OWORD *)&v89.value = *(_OWORD *)a6;
    v89.epoch = *(_QWORD *)(a6 + 16);
    if (*(_BYTE *)(v33 + 529) && !*(_BYTE *)(v33 + 530))
    {
      LengthOfDefaultByteStream = MovieInformationBeginBuildingMovieFragment(*(_QWORD *)(v33 + 728), *(_BYTE *)(v33 + 531), *(_BYTE *)(v33 + 533) == 0);
      if ((_DWORD)LengthOfDefaultByteStream)
        goto LABEL_155;
      *(_BYTE *)(v33 + 530) = 1;
    }
    v97 = 0;
    NumFormatDescriptions = MovieTrackGetNumFormatDescriptions(*(_QWORD *)(a1 + 736));
    LengthOfDefaultByteStream = MovieTrackFindOrAddSampleDescription(*(_QWORD *)(a1 + 736), FormatDescription, v19, &v97);
    if ((_DWORD)LengthOfDefaultByteStream)
    {
LABEL_155:
      v21 = LengthOfDefaultByteStream;
      v36 = v82;
      if (!v82)
        goto LABEL_144;
      goto LABEL_143;
    }
    v86 = v28;
    v36 = v82;
    if (!NumFormatDescriptions)
    {
      appended = setDefaultTrackDimensionsIfNecessary(a1);
      if ((_DWORD)appended)
      {
LABEL_71:
        v21 = appended;
        if (!v36)
          goto LABEL_144;
        goto LABEL_143;
      }
    }
    v38 = (CMTime *)MEMORY[0x1E0CA2E68];
    if (a3 == 1 && NumSamples > 1)
    {
      time1 = *a4;
      time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      if (!CMTimeCompare(&time1, &time2))
        goto LABEL_45;
    }
    else if (a3 < 1)
    {
      goto LABEL_53;
    }
    v39 = a4;
    v40 = a3;
    while (!*(_BYTE *)(a1 + 940))
    {
      time1 = *v39;
      time2 = *v38;
      if (!CMTimeCompare(&time1, &time2))
        *(_BYTE *)(a1 + 940) = 1;
      v39 += 3;
      if (!--v40)
        goto LABEL_53;
    }
LABEL_45:
    appended = FigSignalErrorAt();
    if ((_DWORD)appended)
      goto LABEL_71;
LABEL_53:
    if (!DataBuffer)
    {
      appended = MovieSampleDataWriterTrackAppendSampleReference(*(_QWORD *)(v33 + 744), *(_QWORD *)(a1 + 760), v79, v97, NumSamples, a3, (uint64_t)a4, v86, v80, v81, (uint64_t)v82);
      if ((_DWORD)appended)
        goto LABEL_71;
LABEL_96:
      v96 = v90;
      v95 = v89;
      lhs = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
      v87 = *(_OWORD *)&v38->value;
      *(_OWORD *)&v107.value = *(_OWORD *)&v38->value;
      epoch = v38->epoch;
      v107.epoch = epoch;
      v106 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
      v105 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E28];
      v104 = lhs;
      if (a3 == 1)
      {
        time1 = *a4;
        time2 = a4[2];
        rhs = a4[1];
        memset(&v103, 0, sizeof(v103));
        time = *a4;
        CMTimeMultiply(&v102, &time, NumSamples - 1);
        time = rhs;
        CMTimeAdd(&v103, &time, &v102);
        memset(&time, 0, sizeof(time));
        v100 = a4[1];
        v99 = a4[2];
        CMTimeSubtract(&time, &v100, &v99);
        v99 = time1;
        CMTimeMultiply(&v100, &v99, NumSamples);
        v99 = time2;
        CMTimeAdd(&lhs, &v99, &v100);
        v99 = time1;
        CMTimeMultiply(&v107, &v99, NumSamples);
        v106 = rhs;
        v105 = v103;
        v99 = v103;
        v98 = time1;
        CMTimeAdd(&v104, &v99, &v98);
        v58 = time.value;
        v59 = time.value;
      }
      else if (a3 < 1)
      {
        v59 = 0x80000000;
        v58 = 0x7FFFFFFF;
      }
      else
      {
        v60 = a4 + 1;
        v58 = 0x7FFFFFFF;
        v59 = 0x80000000;
        do
        {
          time1 = v60[-1];
          time2 = v60[1];
          rhs = *v60;
          memset(&v103, 0, sizeof(v103));
          v102 = *v60;
          time = v60[1];
          CMTimeSubtract(&v103, &v102, &time);
          v102 = time2;
          time = time1;
          CMTimeAdd(&lhs, &v102, &time);
          v102 = v107;
          time = time1;
          CMTimeAdd(&v107, &v102, &time);
          v102 = rhs;
          time = v106;
          CMTimeMinimum(&v106, &v102, &time);
          v102 = v105;
          time = rhs;
          if (CMTimeCompare(&v102, &time) < 0)
          {
            v105 = rhs;
            v102 = rhs;
            time = time1;
            CMTimeAdd(&v104, &v102, &time);
          }
          if (v58 >= SLODWORD(v103.value))
            v58 = v103.value;
          if (v59 <= SLODWORD(v103.value))
            v59 = v103.value;
          v60 += 3;
          --a3;
        }
        while (a3);
      }
      *(CMTime *)(a1 + 256) = lhs;
      time2 = *(CMTime *)(a1 + 136);
      rhs = v107;
      CMTimeAdd(&time1, &time2, &rhs);
      *(CMTime *)(a1 + 136) = time1;
      time2 = v106;
      rhs = *(CMTime *)(a1 + 280);
      CMTimeMinimum(&time1, &time2, &rhs);
      *(CMTime *)(a1 + 280) = time1;
      time1 = *(CMTime *)(a1 + 304);
      time2 = v105;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        *(CMTime *)(a1 + 304) = v105;
        *(CMTime *)(a1 + 160) = v104;
      }
      v61 = *(_DWORD *)(a1 + 336);
      if (v58 < v61)
        v61 = v58;
      *(_DWORD *)(a1 + 336) = v61;
      v62 = *(_DWORD *)(a1 + 340);
      if (v59 > v62)
        v62 = v59;
      *(_DWORD *)(a1 + 340) = v62;
      if (*(_BYTE *)(a1 + 492))
      {
        v103 = v106;
        time = v96;
        v99 = v104;
        v98 = v95;
        v63 = *(_QWORD *)(a1 + 496);
        *(_OWORD *)&time1.value = v87;
        time1.epoch = epoch;
        time2 = v96;
        v64 = CMTimeCompare(&time1, &time2) != 0;
        *(_OWORD *)&time1.value = v87;
        time1.epoch = epoch;
        time2 = v95;
        v65 = CMTimeCompare(&time1, &time2);
        v66 = editBoundaryDetectorDetectBoundary(*(_QWORD *)(v63 + 8), a7, v64, v65 != 0, a8);
        if (a7 && !v65 && *(_DWORD *)(*(_QWORD *)(v63 + 8) + 8) == 3)
        {
          v98 = v96;
          *(_OWORD *)&time.value = v87;
          time.epoch = epoch;
        }
        if (!v66 || !editBuilderResetCurrentEditMediaTime(v63))
        {
          v67 = *(_QWORD *)(v63 + 16);
          v68 = (__int128 *)(v67 + 12);
          if ((*(_BYTE *)(v67 + 24) & 1) == 0
            || (time1 = v103,
                v69 = *v68,
                time2.epoch = *(_QWORD *)(v67 + 28),
                *(_OWORD *)&time2.value = v69,
                CMTimeCompare(&time1, &time2) < 0))
          {
            *v68 = *(_OWORD *)&v103.value;
            *(_QWORD *)(v67 + 28) = v103.epoch;
          }
          v70 = (_OWORD *)(v67 + 60);
          if ((*(_BYTE *)(v67 + 72) & 1) != 0)
          {
            *(_OWORD *)&time2.value = *v70;
            time2.epoch = *(_QWORD *)(v67 + 76);
            rhs = time;
            CMTimeAdd(&time1, &time2, &rhs);
            *v70 = *(_OWORD *)&time1.value;
            v71 = time1.epoch;
          }
          else
          {
            *v70 = *(_OWORD *)&time.value;
            v71 = time.epoch;
          }
          *(_QWORD *)(v67 + 76) = v71;
          v72 = (_OWORD *)(v67 + 36);
          if ((*(_BYTE *)(v67 + 48) & 1) == 0
            || (*(_OWORD *)&time1.value = *v72,
                time1.epoch = *(_QWORD *)(v67 + 52),
                time2 = v99,
                CMTimeCompare(&time1, &time2) < 0))
          {
            *v72 = *(_OWORD *)&v99.value;
            *(_QWORD *)(v67 + 52) = v99.epoch;
          }
          v73 = (_OWORD *)(v67 + 84);
          if ((*(_BYTE *)(v67 + 96) & 1) != 0)
          {
            *(_OWORD *)&time2.value = *v73;
            time2.epoch = *(_QWORD *)(v67 + 100);
            rhs = v98;
            CMTimeAdd(&time1, &time2, &rhs);
            *v73 = *(_OWORD *)&time1.value;
            v74 = time1.epoch;
          }
          else
          {
            *v73 = *(_OWORD *)&v98.value;
            v74 = v98.epoch;
          }
          *(_QWORD *)(v67 + 100) = v74;
          v75 = *(double *)(v67 + 112);
          if (v75 == -1.0 || v75 != a8)
            *(double *)(v67 + 112) = a8;
          v76 = *(_QWORD *)(a1 + 16);
          if (*(_BYTE *)(v76 + 329))
          {
            if (*(_BYTE *)(v76 + 352))
            {
              time1 = v96;
              *(_OWORD *)&time2.value = v87;
              time2.epoch = epoch;
              if (CMTimeCompare(&time1, &time2)
                || (time1 = v95, *(_OWORD *)&time2.value = v87, time2.epoch = epoch, CMTimeCompare(&time1, &time2)))
              {
                *(_BYTE *)(a1 + 353) = 1;
              }
            }
          }
        }
      }
      v21 = 0;
      if (!v36)
        goto LABEL_144;
LABEL_143:
      CFRelease(v36);
      goto LABEL_144;
    }
    if (!*(_BYTE *)(v33 + 329) || !*(_BYTE *)(v33 + 530) || !*(_BYTE *)(a1 + 905))
      goto LABEL_95;
    LODWORD(time2.value) = 0;
    time1.value = 0;
    LengthOfDefaultByteStream = MovieSampleDataWriterGetLengthOfDefaultByteStream(*(uint64_t **)(v33 + 744), &time1);
    if ((_DWORD)LengthOfDefaultByteStream)
      goto LABEL_155;
    LengthOfDefaultByteStream = MovieSampleDataWriterTrackGetPreferredChunkAlignment(*(_QWORD *)(v33 + 744), *(_QWORD *)(a1 + 760), &time2);
    if ((_DWORD)LengthOfDefaultByteStream)
      goto LABEL_155;
    v41 = 0xFFFFFFFF80000000;
    if (LODWORD(time2.value) >= 2 && time1.value % SLODWORD(time2.value))
      v41 = SLODWORD(time2.value) - time1.value % SLODWORD(time2.value) - 0x80000000;
    if ((unint64_t)(v41 + time1.value - *(_QWORD *)(a1 + 888)) > 0xFFFFFFFEFFFFFFFFLL)
    {
LABEL_95:
      appended = MovieSampleDataWriterTrackAppendSampleData(*(uint64_t **)(v33 + 744), *(uint64_t **)(a1 + 760), (uint64_t)DataBuffer, v97, NumSamples, a3, (uint64_t)a4, v86, v80, v81, (uint64_t)v36);
      if ((_DWORD)appended)
        goto LABEL_71;
      goto LABEL_96;
    }
    v42 = *(const __CFArray **)(v33 + 488);
    if (v42)
    {
      Count = CFArrayGetCount(v42);
      if (Count >= 1)
      {
        v44 = Count;
        v45 = 0;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v33 + 488), v45);
          LengthOfDefaultByteStream = setTrackHeaderDataCompleteFlagAndWriteCheckpointIfPossible((uint64_t)ValueAtIndex);
          if ((_DWORD)LengthOfDefaultByteStream)
            goto LABEL_155;
          ValueAtIndex[601] = 0;
        }
        while (v44 != ++v45);
      }
    }
    clearAllTracksHeaderDataCompleteFlag(v33);
    v47 = *(const __CFArray **)(v33 + 488);
    if (v47)
      v48 = CFArrayGetCount(v47);
    else
      v48 = 0;
    memset(&time1, 0, sizeof(time1));
    time2 = *(CMTime *)(a1 + 648);
    rhs = *(CMTime *)(a1 + 108);
    CMTimeSubtract(&time1, &time2, &rhs);
    time2 = *v38;
    v36 = v82;
    if (*(_BYTE *)(v33 + 329))
    {
      v54 = (CMTime *)(v33 + 96);
    }
    else
    {
      if (!*(_BYTE *)(v33 + 330))
        goto LABEL_92;
      v54 = (CMTime *)(v33 + 144);
    }
    time2 = *v54;
LABEL_92:
    memset(&rhs, 0, sizeof(rhs));
    lhs = time1;
    v107 = time2;
    CMTimeAdd(&rhs, &lhs, &v107);
    if (v48 >= 1)
    {
      for (i = 0; i != v48; ++i)
      {
        v56 = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v33 + 488), i);
        v107 = rhs;
        v106 = *(CMTime *)(v56 + 108);
        CMTimeAdd(&lhs, &v107, &v106);
        *((CMTime *)v56 + 28) = lhs;
      }
    }
    goto LABEL_95;
  }
  v23 = FigMovieCreateContiguousBBufFromNonContiguousAudioSample(sbuf, (const __CFAllocator *)*MEMORY[0x1E0C9AE00], (CMBlockBufferRef *)&cf, (const __CFAllocator *)*MEMORY[0x1E0C9AE00], &v94, &ptr);
  if (!(_DWORD)v23)
  {
    v83 = 1;
    DataBuffer = (void *)cf;
    goto LABEL_15;
  }
LABEL_18:
  v21 = v23;
LABEL_144:
  v22 = v83;
LABEL_145:
  if (cf)
  {
    v77 = v22;
    CFRelease(cf);
    v22 = v77;
  }
  if (v22)
    CFAllocatorDeallocate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], ptr);
  return v21;
}

double setNextCumulatedInterleavingDuration(CMTime *a1)
{
  CMTimeEpoch epoch;
  CMTime *v3;
  CMTime v5;
  CMTime lhs;
  CMTime v7;

  epoch = a1->epoch;
  v3 = a1 + 27;
  lhs = a1[27];
  v5 = *(CMTime *)(epoch + 48);
  CMTimeAdd(&v7, &lhs, &v5);
  *v3 = v7;
  return setTrackHeaderDataCompleteFlagIfCumulatedInterleavingDurationReachesCumulatedMovieFragmentDuration((uint64_t)a1);
}

_BYTE *sbp_bq_minOrMaxPTSChanged_orEndOfDataReached()
{
  _BYTE *result;

  result = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return (_BYTE *)CMNotificationCenterPostNotification();
  }
  return result;
}

uint64_t sbp_vtcs_finishPendingProcessing()
{
  OpaqueVTCompressionSession *v0;
  CMTime v2;

  v0 = *(OpaqueVTCompressionSession **)(CMBaseObjectGetDerivedStorage() + 16);
  v2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  return VTCompressionSessionCompleteFrames(v0, &v2);
}

uint64_t sbp_fac_finishPendingProcessing()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = DerivedStorage;
  *(_DWORD *)(DerivedStorage + 196) = 1;
  if (*(_BYTE *)(DerivedStorage + 17))
    v2 = 0;
  else
    v2 = RunConverter(DerivedStorage, 0);
  *(_DWORD *)(v1 + 196) = 2;
  *(_BYTE *)(v1 + 208) = 1;
  if (*(_BYTE *)(v1 + 80))
  {
    AudioConverterReleaseHardwareCodec();
    *(_BYTE *)(v1 + 80) = 0;
  }
  return v2;
}

uint64_t figMovieWriter_EndSession(uint64_t a1, __int128 *a2)
{
  uint64_t DerivedStorage;
  __int128 v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 336));
  if (*(_BYTE *)(DerivedStorage + 335) || (*(_BYTE *)(DerivedStorage + 36) & 1) == 0)
  {
    v5 = FigSignalErrorAt();
  }
  else if (*(_QWORD *)(DerivedStorage + 552))
  {
    v4 = *a2;
    *(_QWORD *)(DerivedStorage + 672) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(DerivedStorage + 656) = v4;
    *(_BYTE *)(DerivedStorage + 561) = 1;
    FigSemaphoreSignal();
    FigSemaphoreWaitRelative();
    v5 = *(unsigned int *)(DerivedStorage + 680);
  }
  else
  {
    v5 = 0;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 336));
  return v5;
}

uint64_t figMovieWriter_Flush()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 336));
  if (*(_BYTE *)(DerivedStorage + 335))
  {
    v2 = FigSignalErrorAt();
LABEL_6:
    v1 = v2;
    goto LABEL_8;
  }
  if (!*(_QWORD *)(DerivedStorage + 552)
    || (*(_BYTE *)(DerivedStorage + 560) = 1,
        FigSemaphoreSignal(),
        FigSemaphoreWaitRelative(),
        v1 = *(unsigned int *)(DerivedStorage + 680),
        !(_DWORD)v1))
  {
    if (!*(_BYTE *)(DerivedStorage + 384))
    {
      v1 = 0;
      goto LABEL_8;
    }
    v2 = callFragmentCallback(DerivedStorage);
    goto LABEL_6;
  }
LABEL_8:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 336));
  return v1;
}

CMTime *getSessionMediaDisplayStartTime@<X0>(CMTime *result@<X0>, CMTime *a2@<X8>)
{
  uint64_t v2;
  int32_t timescale;
  CMTime v4;

  v2 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)&a2->value = *MEMORY[0x1E0CA2E68];
  a2->epoch = *(_QWORD *)(v2 + 16);
  if ((~HIDWORD(result[12].value) & 5) != 0)
  {
    a2->epoch = *(_QWORD *)&result[12].timescale;
    *(_OWORD *)&a2->value = *(_OWORD *)&result[11].epoch;
  }
  timescale = result[4].timescale;
  if (timescale)
  {
    v4 = *a2;
    return CMTimeConvertScale(a2, &v4, timescale, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
  }
  return result;
}

uint64_t figMovieWriter_WriteHeader()
{
  uint64_t DerivedStorage;
  uint64_t v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 336));
  if (*(_BYTE *)(DerivedStorage + 335))
  {
    v1 = FigSignalErrorAt();
  }
  else if (*(_QWORD *)(DerivedStorage + 552))
  {
    *(_BYTE *)(DerivedStorage + 562) = 1;
    FigSemaphoreSignal();
    FigSemaphoreWaitRelative();
    v1 = *(unsigned int *)(DerivedStorage + 680);
  }
  else
  {
    v1 = 0;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 336));
  return v1;
}

uint64_t writeMovieHeader(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  OpaqueCMBlockBuffer *v9;
  size_t DataLength;
  size_t v11;
  uint64_t appended;
  char v13;
  size_t v14;
  CMBlockBufferRef theBuffer;

  if (*(_BYTE *)(a1 + 329))
  {
    v6 = *(_QWORD *)(a1 + 360);
    v7 = *(_QWORD *)(a1 + 368);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 360);
    v7 = *(_QWORD *)(a1 + 368);
    if (!*(_BYTE *)(a1 + 384))
    {
      appended = writeMovieAtom(a1, a2, a3);
      if (!(_DWORD)appended)
      {
        if (!*(_BYTE *)(a1 + 352)
          || (appended = MovieSampleDataWriterWriteFreeAtom(*(_QWORD *)(a1 + 744), v6, v7), !(_DWORD)appended))
        {
          *(_BYTE *)(a1 + 352) = 1;
          goto LABEL_24;
        }
      }
      return appended;
    }
  }
  if (*(_BYTE *)(a1 + 352))
  {
    if (!*(_BYTE *)(a1 + 530))
    {
LABEL_24:
      clearAllTracksFirstSampleInfoInFragment(a1);
      return 0;
    }
    theBuffer = 0;
    v8 = createMovieFragmentAtomBBuf(a1, &theBuffer);
    v9 = theBuffer;
    if ((_DWORD)v8)
    {
      appended = v8;
    }
    else
    {
      DataLength = CMBlockBufferGetDataLength(theBuffer);
      if (DataLength)
      {
        v11 = DataLength;
        *(_QWORD *)(a1 + 344) += DataLength;
        appended = MovieSampleDataWriterAppendHeader(*(_QWORD *)(a1 + 744), v9, 0);
        if (!(_DWORD)appended)
        {
          MovieSampleDataWriterSynchronizeDefaultByteStream(*(_QWORD *)(a1 + 744), a2, a3);
          v13 = 0;
          v14 = *(_QWORD *)(a1 + 704);
          if (v14 <= v11)
            v14 = v11;
          *(_QWORD *)(a1 + 704) = v14;
          if (v9)
            goto LABEL_12;
          goto LABEL_13;
        }
      }
      else
      {
        appended = 0;
      }
    }
    v13 = 1;
    if (v9)
LABEL_12:
      CFRelease(v9);
LABEL_13:
    if (!(_DWORD)appended)
    {
      MovieInformationReleaseMovieFragmentSampleTables(*(_QWORD *)(a1 + 728));
      if ((v13 & 1) != 0)
        goto LABEL_24;
      goto LABEL_23;
    }
    return appended;
  }
  appended = writeMovieAtom(a1, a2, a3);
  if (!(_DWORD)appended)
  {
    if (*(_BYTE *)(a1 + 532))
    {
      appended = MovieSampleDataWriterWriteFreeAtom(*(_QWORD *)(a1 + 744), v6, v7);
      if ((_DWORD)appended)
        return appended;
      *(_BYTE *)(a1 + 532) = 0;
    }
    if (!*(_BYTE *)(a1 + 531))
      MovieInformationReleaseMovieHeaderSampleTables(*(_QWORD *)(a1 + 728));
    *(_BYTE *)(a1 + 529) = 1;
    *(_BYTE *)(a1 + 352) = 1;
LABEL_23:
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    goto LABEL_24;
  }
  return appended;
}

uint64_t writeMovieAtom(uint64_t a1, uint64_t a2, int a3)
{
  _BOOL4 v6;
  uint64_t MovieAtomBBuf;
  OpaqueCMBlockBuffer *v8;
  size_t DataLength;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  CMBlockBufferRef theBuffer;
  CFTypeRef cf;
  uint64_t v16;

  theBuffer = 0;
  cf = 0;
  if (*(_BYTE *)(a1 + 329))
    v6 = 1;
  else
    v6 = *(_BYTE *)(a1 + 384) != 0;
  MovieAtomBBuf = MovieSampleDataWriterCopyURLOfDefaultByteStream(*(_QWORD *)(a1 + 744), *MEMORY[0x1E0C9AE00], &cf);
  if ((_DWORD)MovieAtomBBuf)
    goto LABEL_16;
  MovieAtomBBuf = createMovieAtomBBuf(a1, v6, (const __CFURL *)cf, (CFTypeRef *)&theBuffer);
  if ((_DWORD)MovieAtomBBuf)
    goto LABEL_16;
  v8 = theBuffer;
  DataLength = CMBlockBufferGetDataLength(theBuffer);
  *(_QWORD *)(a1 + 368) = DataLength;
  *(_QWORD *)(a1 + 344) += DataLength;
  if (*(_BYTE *)(a1 + 330))
  {
    CMBlockBufferGetDataLength(v8);
    v16 = 0;
    MovieAtomBBuf = CMByteStreamAppendBlockBuffer();
    if ((_DWORD)MovieAtomBBuf)
      goto LABEL_16;
  }
  else
  {
    MovieAtomBBuf = MovieSampleDataWriterAppendHeader(*(_QWORD *)(a1 + 744), v8, (_QWORD *)(a1 + 360));
    if ((_DWORD)MovieAtomBBuf)
      goto LABEL_16;
    MovieSampleDataWriterSynchronizeDefaultByteStream(*(_QWORD *)(a1 + 744), a2, a3);
  }
  v16 = 0;
  if (!*(_BYTE *)(a1 + 448))
    goto LABEL_22;
  MovieAtomBBuf = MovieSampleDataWriterGetLengthOfDefaultByteStream(*(uint64_t **)(a1 + 744), &v16);
  if ((_DWORD)MovieAtomBBuf)
  {
LABEL_16:
    v12 = MovieAtomBBuf;
    goto LABEL_17;
  }
  v10 = *(_QWORD *)(a1 + 464);
  v11 = v10 - v16;
  if (v10 != v16)
  {
    if (v11 < 8)
      MovieAtomBBuf = FigSignalErrorAt();
    else
      MovieAtomBBuf = MovieSampleDataWriterAppendFreeAtom(*(_QWORD *)(a1 + 744), v11);
    goto LABEL_16;
  }
LABEL_22:
  v12 = 0;
LABEL_17:
  if (cf)
    CFRelease(cf);
  if (theBuffer)
    CFRelease(theBuffer);
  return v12;
}

uint64_t createDefaultTrackEditSegmentArray(CFAllocatorRef allocator, uint64_t a2, CFMutableArrayRef *a3)
{
  uint64_t v6;
  __int128 v7;
  CMTimeEpoch v8;
  int v9;
  uint64_t FirstEditBuilder;
  CFIndex Count;
  _BOOL4 IsValid;
  char *EditMediaTimeAtIndex;
  uint64_t v14;
  const __CFArray *Mutable;
  CFMutableArrayRef v16;
  CMTimeValue value;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  CFIndex v21;
  CFMutableArrayRef *v22;
  CFIndex i;
  char *v24;
  int32_t v25;
  uint64_t v26;
  uint64_t v27;
  CFTypeRef v28;
  CMTime *v29;
  uint64_t v30;
  int32_t v31;
  const __CFArray *v33;
  CFIndex v34;
  CFIndex v35;
  const __CFArray *v36;
  CFIndex v37;
  _DWORD *ValueAtIndex;
  int v39;
  int v41;
  int32_t v42;
  int32_t v43;
  uint64_t TrackEditSegmentArrayFromSessionTime;
  const void *v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  CMTimeEpoch v50;
  uint64_t v51;
  __int128 v52;
  int32_t v53;
  int32_t v54;
  int v55;
  int32_t v56;
  uint64_t v57;
  const void *v58;
  uint64_t v59;
  __int128 v60;
  CFMutableArrayRef *v61;
  CMTime v62;
  CMTime rhs;
  CMTime time2;
  CFTypeRef cf;
  CMTime time1;
  __int128 v67;
  _BYTE v68[32];
  __int128 v69;
  CMTimeEpoch v70;
  __int128 v71;
  CMTimeEpoch v72;
  __int128 v73;
  uint64_t v74;
  _OWORD v75[2];
  __int128 v76;
  __int128 v77;
  __int128 v78;
  CMTime v79[2];
  __int128 v80;
  __int128 v81;
  CMTime v82;
  CMTime time;

  v6 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(v6 + 384))
  {
    v7 = *MEMORY[0x1E0CA2E68];
    *(_OWORD *)&time.value = *MEMORY[0x1E0CA2E68];
    v8 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    time.epoch = v8;
    v82.value = 0;
    if (*(_DWORD *)a2 == 1936684398)
    {
      v60 = v7;
      v9 = FigCFEqual();
      v7 = v60;
      if (*(_BYTE *)(a2 + 492))
      {
        if (v9)
        {
          FirstEditBuilder = getFirstEditBuilder(a2);
          Count = CFArrayGetCount(*(CFArrayRef *)(FirstEditBuilder + 24));
          IsValid = editMediaTimeIsValid(*(_QWORD *)(FirstEditBuilder + 16));
          v7 = v60;
          if (Count + IsValid)
          {
            EditMediaTimeAtIndex = (char *)editBuilderGetEditMediaTimeAtIndex(FirstEditBuilder, 0);
            v7 = v60;
            time = *(CMTime *)(EditMediaTimeAtIndex + 60);
          }
        }
      }
    }
    v67 = *(_OWORD *)&time.value;
    *(_OWORD *)&v68[8] = v7;
    *(_QWORD *)v68 = time.epoch;
    *(_QWORD *)&v68[24] = v8;
    v69 = v7;
    v71 = v7;
    v70 = v8;
    v72 = v8;
    v14 = copyFigTimeMappingAsDictionary(allocator, (uint64_t)&v67, (CFDictionaryRef *)&v82);
    if (!(_DWORD)v14)
    {
      Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
      if (Mutable)
      {
        v16 = Mutable;
        value = v82.value;
        appendTrackEditSegmentDictionary(Mutable, (const __CFDictionary *)v82.value);
        v19 = v18;
        if (!(_DWORD)v18)
        {
          if (!value)
            goto LABEL_13;
          goto LABEL_11;
        }
        CFRelease(v16);
        goto LABEL_80;
      }
      v14 = FigSignalErrorAt();
    }
    v19 = v14;
LABEL_80:
    v16 = 0;
    value = v82.value;
    if (v82.value)
    {
LABEL_11:
      v20 = (const void *)value;
LABEL_12:
      CFRelease(v20);
    }
LABEL_13:
    if ((_DWORD)v19)
      return v19;
    goto LABEL_35;
  }
  if (!*(_BYTE *)(a2 + 492))
  {
    v33 = *(const __CFArray **)(v6 + 488);
    if (v33)
      v34 = CFArrayGetCount(v33);
    else
      v34 = 0;
    time2.value = 0;
    v35 = CFArrayGetCount(*(CFArrayRef *)(a2 + 424));
    v82 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    v36 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
    if (v36)
    {
      v61 = a3;
      if (v35 >= 1)
      {
        v37 = 0;
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 424), v37);
          v39 = *(_DWORD *)(a2 + 344);
          v41 = v39 == 2 && ValueAtIndex[37] == 2 && v34 == 1;
          v42 = *(_DWORD *)(a2 + 104);
          v43 = *(_DWORD *)(*(_QWORD *)(a2 + 16) + 20);
          v67 = *(_OWORD *)&v82.value;
          *(_QWORD *)v68 = v82.epoch;
          TrackEditSegmentArrayFromSessionTime = createTrackEditSegmentArrayFromSessionTime(allocator, v41, v39, (CMTime *)&v67, v42, v43, (uint64_t)ValueAtIndex, (const __CFArray **)&time2, (uint64_t)&v82);
          if ((_DWORD)TrackEditSegmentArrayFromSessionTime)
          {
            v19 = TrackEditSegmentArrayFromSessionTime;
            v16 = 0;
            goto LABEL_58;
          }
          v45 = (const void *)time2.value;
          appendTrackEditSegmentArray(v36, (CFArrayRef)time2.value);
          if ((_DWORD)v46)
            break;
          if (v45)
          {
            CFRelease(v45);
            time2.value = 0;
          }
          if (v35 == ++v37)
            goto LABEL_56;
        }
        v19 = v46;
        v16 = 0;
        a3 = v61;
        if (!v45)
        {
LABEL_69:
          if (v36)
          {
            v20 = v36;
            goto LABEL_12;
          }
          goto LABEL_13;
        }
LABEL_68:
        CFRelease(v45);
        goto LABEL_69;
      }
LABEL_56:
      if ((*(_BYTE *)(a2 + 480) & 1) == 0)
      {
        v19 = 0;
        v16 = v36;
        v36 = 0;
LABEL_58:
        a3 = v61;
LABEL_67:
        v45 = (const void *)time2.value;
        if (!time2.value)
          goto LABEL_69;
        goto LABEL_68;
      }
      v70 = *(_QWORD *)(a2 + 248);
      v47 = *(_OWORD *)(a2 + 232);
      *(_OWORD *)&v68[16] = *(_OWORD *)(a2 + 216);
      v69 = v47;
      v48 = *(_OWORD *)(a2 + 200);
      v67 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)v68 = v48;
      v49 = *(_QWORD *)(a2 + 16);
      v50 = *(_QWORD *)(v49 + 40);
      v71 = *(_OWORD *)(v49 + 24);
      v72 = v50;
      v81 = 0u;
      v80 = 0u;
      memset(v79, 0, sizeof(v79));
      v78 = 0u;
      v77 = 0u;
      v76 = 0u;
      v75[1] = 0u;
      v75[0] = 0u;
      v51 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      v73 = *MEMORY[0x1E0CA2E18];
      *(_QWORD *)((char *)&v75[1] + 4) = *(_QWORD *)(a2 + 484);
      *(_OWORD *)((char *)v75 + 4) = *(_OWORD *)(a2 + 468);
      v74 = v51;
      *(_QWORD *)&v77 = v51;
      v76 = v73;
      v52 = *(_OWORD *)(a2 + 432);
      *(_QWORD *)&v81 = *(_QWORD *)(a2 + 448);
      v80 = v52;
      getSessionMediaDisplayStartTime((CMTime *)a2, v79);
      time1 = *(CMTime *)(a2 + 160);
      v53 = *(_DWORD *)(a2 + 104);
      a3 = v61;
      if (v53)
      {
        time = *(CMTime *)(a2 + 160);
        CMTimeConvertScale(&time1, &time, v53, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
        v54 = *(_DWORD *)(a2 + 104);
      }
      else
      {
        v54 = 0;
      }
      v79[1] = time1;
      v55 = *(_DWORD *)(a2 + 344);
      v56 = *(_DWORD *)(*(_QWORD *)(a2 + 16) + 20);
      time = v82;
      v57 = createTrackEditSegmentArrayFromSessionTime(allocator, 0, v55, &time, v54, v56, (uint64_t)&v67, (const __CFArray **)&time2, 0);
      if (!(_DWORD)v57)
      {
        v58 = (const void *)time2.value;
        appendTrackEditSegmentArray(v36, (CFArrayRef)time2.value);
        if (!(_DWORD)v57)
        {
          if (v58)
          {
            CFRelease(v58);
            time2.value = 0;
          }
          v19 = 0;
          v16 = v36;
          v36 = 0;
          goto LABEL_67;
        }
      }
    }
    else
    {
      v57 = FigSignalErrorAt();
    }
    v19 = v57;
    v16 = 0;
    goto LABEL_67;
  }
  cf = 0;
  v21 = CFArrayGetCount(*(CFArrayRef *)(a2 + 424));
  v67 = 0uLL;
  *(_QWORD *)v68 = 0;
  memset(&time, 0, sizeof(time));
  v82 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v16 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
  if (!v16)
  {
    v59 = FigSignalErrorAt();
    if ((_DWORD)v59)
      return v59;
    goto LABEL_35;
  }
  v22 = a3;
  if (v21 >= 1)
  {
    for (i = 0; v21 != i; ++i)
    {
      v24 = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 424), i);
      time1 = *(CMTime *)(v24 + 124);
      time2 = *(CMTime *)(v24 + 3);
      CMTimeMaximum((CMTime *)&v67, &time1, &time2);
      time1 = *(CMTime *)(v24 + 152);
      time2 = *(CMTime *)(v24 + 4);
      CMTimeMinimum(&time, &time1, &time2);
      *(_OWORD *)&time1.value = v67;
      time1.epoch = *(_QWORD *)v68;
      time2 = time;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        if ((v24[36] & 1) != 0)
        {
          *(_OWORD *)&time2.value = v67;
          time2.epoch = *(_QWORD *)v68;
          rhs = *(CMTime *)(v24 + 1);
          CMTimeSubtract(&time1, &time2, &rhs);
          v67 = *(_OWORD *)&time1.value;
          *(_QWORD *)v68 = time1.epoch;
          time2 = time;
          rhs = *(CMTime *)(v24 + 1);
          CMTimeSubtract(&time1, &time2, &rhs);
          time = time1;
        }
        v25 = *(_DWORD *)(*(_QWORD *)(a2 + 16) + 20);
        *(_OWORD *)&time1.value = v67;
        time1.epoch = *(_QWORD *)v68;
        time2 = time;
        *(_OWORD *)&rhs.value = *(_OWORD *)(v24 + 248);
        v26 = *((_QWORD *)v24 + 34);
        rhs.epoch = *((_QWORD *)v24 + 33);
        v62 = v82;
        v27 = editBuilderCreateTimeMappingArray(v26, v25, (uint64_t)&time1, (uint64_t)&time2, &rhs, &v62, allocator, (const __CFArray **)&cf, (uint64_t)&v82);
        v28 = cf;
        if ((_DWORD)v27)
          goto LABEL_71;
        appendTrackEditSegmentArray(v16, (CFArrayRef)cf);
        if ((_DWORD)v27)
          goto LABEL_71;
        if (v28)
        {
          CFRelease(v28);
          cf = 0;
        }
      }
    }
  }
  if ((*(_BYTE *)(a2 + 480) & 1) == 0)
    goto LABEL_34;
  v29 = *(CMTime **)(a2 + 16);
  time2 = *(CMTime *)(a2 + 468);
  rhs = v29[1];
  CMTimeMaximum(&time1, &time2, &rhs);
  v67 = *(_OWORD *)&time1.value;
  *(_QWORD *)v68 = time1.epoch;
  if ((*(_BYTE *)(a2 + 220) & 1) != 0)
  {
    *(_OWORD *)&time2.value = v67;
    time2.epoch = *(_QWORD *)v68;
    rhs = *(CMTime *)(a2 + 208);
    CMTimeSubtract(&time1, &time2, &rhs);
    v67 = *(_OWORD *)&time1.value;
    *(_QWORD *)v68 = time1.epoch;
  }
  time = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v30 = *(_QWORD *)(a2 + 496);
  v31 = *(_DWORD *)(*(_QWORD *)(a2 + 16) + 20);
  *(_OWORD *)&time1.value = v67;
  time1.epoch = *(_QWORD *)v68;
  time2 = *(CMTime *)(a2 + 432);
  rhs = v82;
  v27 = editBuilderCreateTimeMappingArray(v30, v31, (uint64_t)&time1, MEMORY[0x1E0CA2E18], &time2, &rhs, allocator, (const __CFArray **)&cf, 0);
  v28 = cf;
  if (!(_DWORD)v27)
  {
    appendTrackEditSegmentArray(v16, (CFArrayRef)cf);
    if (!(_DWORD)v27)
    {
      if (v28)
        CFRelease(v28);
LABEL_34:
      a3 = v22;
LABEL_35:
      v19 = 0;
      *a3 = v16;
      return v19;
    }
  }
LABEL_71:
  v19 = v27;
  if (v28)
    CFRelease(v28);
  CFRelease(v16);
  return v19;
}

uint64_t createTrackEditSegmentArrayFromSessionTime(const __CFAllocator *a1, int a2, int a3, CMTime *a4, int32_t a5, int32_t a6, uint64_t a7, const __CFArray **a8, uint64_t a9)
{
  uint64_t v14;
  CMTimeEpoch v15;
  CMTimeEpoch v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int v20;
  CMTimeEpoch v21;
  CFMutableArrayRef Mutable;
  const __CFArray *v23;
  CMTimeFlags v24;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  CMTimeEpoch v27;
  __int128 v28;
  uint64_t v29;
  CFTypeRef v30;
  CMTimeEpoch v31;
  uint64_t v32;
  __int128 v33;
  CMTimeFlags v35;
  CMTimeEpoch v36;
  CMTimeEpoch v37;
  CMTimeFlags v38;
  CMTimeEpoch v39;
  CMTimeFlags v40;
  _BOOL4 v41;
  CMTimeEpoch v42;
  CMTimeEpoch v43;
  CMTimeFlags v44;
  CMTimeEpoch v45;
  const __CFArray **v46;
  int v47;
  int v48;
  CMTimeFlags v49;
  int32_t v51[2];
  __int128 v53;
  __int128 v55;
  CMTime time2;
  CMTime time1;
  CMTime v58;
  __int128 v59;
  _BYTE v60[32];
  __int128 v61;
  _BYTE v62[32];
  CFTypeRef cf;
  CMTime v64;
  CMTime v65;
  CMTime v66;
  CMTime rhs;
  CMTimeValue value;
  CMTimeScale timescale;
  CMTimeValue v70;
  CMTimeScale v71;
  CMTimeValue v72;
  CMTimeScale v73;
  CMTimeValue v74;
  CMTimeScale v75;
  CMTimeValue v76;
  CMTimeScale v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v14 = MEMORY[0x1E0CA2E18];
  v76 = *MEMORY[0x1E0CA2E18];
  v77 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  v15 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v74 = v76;
  v75 = v77;
  *(_OWORD *)&v66.value = *MEMORY[0x1E0CA2E68];
  v16 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v66.epoch = v16;
  *(_OWORD *)&v65.value = *(_OWORD *)&v66.value;
  v65.epoch = v16;
  v55 = *(_OWORD *)&v66.value;
  *(_OWORD *)&v64.value = *(_OWORD *)&v66.value;
  v64.epoch = v16;
  v72 = v76;
  v73 = v77;
  v70 = v76;
  v71 = v77;
  cf = 0;
  v17 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 48);
  *(_OWORD *)&v60[16] = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 32);
  v61 = v17;
  v18 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 80);
  *(_OWORD *)v62 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 64);
  *(_OWORD *)&v62[16] = v18;
  v19 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 16);
  v59 = *MEMORY[0x1E0CA2E20];
  *(_OWORD *)v60 = v19;
  v20 = *(_DWORD *)(a7 + 60);
  v53 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)&v58.value = *MEMORY[0x1E0CA2E18];
  v21 = v15;
  v58.epoch = v15;
  Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v23 = Mutable;
    v47 = a3;
    v48 = a2;
    v24 = *(_DWORD *)(v14 + 12);
    time1 = *(CMTime *)(a7 + 124);
    time2 = *(CMTime *)(a7 + 72);
    CMTimeMaximum(&v58, &time1, &time2);
    time2 = *(CMTime *)(a7 + 152);
    rhs = *(CMTime *)(a7 + 96);
    CMTimeMinimum(&time1, &time2, &rhs);
    flags = time1.flags;
    timescale = time1.timescale;
    value = time1.value;
    epoch = time1.epoch;
    time2 = v58;
    if (CMTimeCompare(&time1, &time2) >= 1)
    {
      v49 = v24;
      if ((v20 & 1) != 0)
      {
        v46 = a8;
        time2 = v58;
        rhs = *(CMTime *)(a7 + 48);
        CMTimeSubtract(&time1, &time2, &rhs);
        v77 = time1.timescale;
        v76 = time1.value;
        time2 = time1;
        CMTimeConvertScale(&time1, &time2, a5, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
        v76 = time1.value;
        v24 = time1.flags;
        v77 = time1.timescale;
        v45 = time1.epoch;
        if ((flags & 1) != 0)
        {
          time2.value = value;
          time2.timescale = timescale;
          time2.flags = flags;
          time2.epoch = epoch;
          rhs = *(CMTime *)(a7 + 48);
          CMTimeSubtract(&time1, &time2, &rhs);
          v75 = time1.timescale;
          v74 = time1.value;
          time2 = time1;
          CMTimeConvertScale(&time1, &time2, a5, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
          v74 = time1.value;
          v35 = time1.flags;
          v75 = time1.timescale;
          v36 = time1.epoch;
        }
        else
        {
          v74 = *(_QWORD *)(a7 + 224);
          v35 = *(_DWORD *)(a7 + 236);
          v75 = *(_DWORD *)(a7 + 232);
          v36 = *(_QWORD *)(a7 + 240);
        }
        time1.value = v76;
        time1.timescale = v77;
        time1.flags = v24;
        v37 = v45;
        time1.epoch = v45;
        time2 = *(CMTime *)(a7 + 200);
        v44 = v24;
        if (CMTimeCompare(&time1, &time2) < 0)
        {
          time1.value = v74;
          time1.timescale = v75;
          time1.flags = v35;
          time1.epoch = v36;
          time2 = *(CMTime *)(a7 + 200);
          if (CMTimeCompare(&time1, &time2) < 0)
          {
            rhs.value = v74;
            rhs.timescale = v75;
            v38 = v35;
            v39 = v36;
            v24 = v49;
            v27 = v21;
          }
          else
          {
            rhs.value = *(_QWORD *)(a7 + 200);
            rhs.timescale = *(_DWORD *)(a7 + 208);
            v38 = *(_DWORD *)(a7 + 212);
            v39 = *(_QWORD *)(a7 + 216);
            v72 = rhs.value;
            v73 = rhs.timescale;
            v24 = v38;
            v27 = v39;
          }
          time1.value = rhs.value;
          time1.timescale = rhs.timescale;
          time1.flags = v38;
          time1.epoch = v39;
          time2.value = v76;
          time2.timescale = v77;
          time2.flags = v44;
          time2.epoch = v45;
          CMTimeSubtract(&v66, &time1, &time2);
          time2 = v66;
          CMTimeConvertScale(&time1, &time2, a6, kCMTimeRoundingMethod_QuickTime);
          v66 = time1;
        }
        else
        {
          v72 = v76;
          v73 = v77;
          v27 = v45;
        }
        time1 = *(CMTime *)(a7 + 224);
        time2.value = v74;
        time2.timescale = v75;
        time2.flags = v35;
        time2.epoch = v36;
        if (CMTimeCompare(&time1, &time2) < 0)
        {
          *(_QWORD *)v51 = v36;
          v43 = v27;
          time1 = *(CMTime *)(a7 + 224);
          time2.value = v76;
          v40 = v44;
          time2.timescale = v77;
          time2.flags = v44;
          time2.epoch = v45;
          if (CMTimeCompare(&time1, &time2) < 0)
          {
            rhs.value = v76;
            rhs.timescale = v77;
            v42 = v21;
          }
          else
          {
            v41 = v47 == 2 && *(_DWORD *)(a7 + 148) != 2;
            if (v48 || v41)
            {
              rhs.value = v74;
              rhs.timescale = v75;
              v70 = v74;
              v71 = v75;
              v40 = v35;
              v42 = *(_QWORD *)v51;
              v37 = *(_QWORD *)v51;
              v49 = v35;
            }
            else
            {
              rhs.value = *(_QWORD *)(a7 + 224);
              rhs.timescale = *(_DWORD *)(a7 + 232);
              v40 = *(_DWORD *)(a7 + 236);
              v37 = *(_QWORD *)(a7 + 240);
              v70 = rhs.value;
              v71 = rhs.timescale;
              v49 = v40;
              v42 = v37;
            }
          }
          time1.value = v74;
          time1.timescale = v75;
          time1.flags = v35;
          time1.epoch = *(_QWORD *)v51;
          time2.value = rhs.value;
          time2.timescale = rhs.timescale;
          time2.flags = v40;
          time2.epoch = v37;
          CMTimeSubtract(&v65, &time1, &time2);
          time2 = v65;
          CMTimeConvertScale(&time1, &time2, a6, kCMTimeRoundingMethod_QuickTime);
          v65 = time1;
          v35 = v49;
          v36 = v42;
          v27 = v43;
        }
        else
        {
          v70 = v74;
          v71 = v75;
        }
        a8 = v46;
        v28 = v55;
        if ((v24 & 1) != 0 && (v35 & 1) != 0)
        {
          time1.value = v70;
          time1.timescale = v71;
          time1.flags = v35;
          time1.epoch = v36;
          time2.value = v72;
          time2.timescale = v73;
          time2.flags = v24;
          time2.epoch = v27;
          CMTimeSubtract(&v64, &time1, &time2);
          time2 = v64;
          CMTimeConvertScale(&time1, &time2, a6, kCMTimeRoundingMethod_QuickTime);
          v64 = time1;
          v28 = v55;
        }
LABEL_7:
        *(_OWORD *)&time1.value = v28;
        time1.epoch = v16;
        time2 = v66;
        if (CMTimeCompare(&time1, &time2) < 0)
        {
          v59 = v53;
          *(_QWORD *)v60 = v21;
          *(_OWORD *)&v60[8] = v53;
          *(_QWORD *)&v60[24] = v21;
          v61 = *(_OWORD *)&a4->value;
          *(_QWORD *)v62 = a4->epoch;
          *(CMTime *)&v62[8] = v66;
          v29 = copyFigTimeMappingAsDictionary(a1, (uint64_t)&v59, (CFDictionaryRef *)&cf);
          v30 = cf;
          if ((_DWORD)v29)
            goto LABEL_52;
          appendTrackEditSegmentDictionary(v23, (const __CFDictionary *)cf);
          if ((_DWORD)v29)
            goto LABEL_52;
          if (v30)
          {
            CFRelease(v30);
            cf = 0;
          }
          time2 = *a4;
          rhs = *(CMTime *)&v62[8];
          CMTimeAdd(&time1, &time2, &rhs);
          *a4 = time1;
        }
        *(_OWORD *)&time1.value = v55;
        time1.epoch = v16;
        time2 = v64;
        if (CMTimeCompare(&time1, &time2) < 0)
        {
          time1.value = v72;
          time1.timescale = v73;
          time1.flags = v24;
          time1.epoch = v27;
          time2 = *(CMTime *)(a7 + 248);
          CMTimeAdd((CMTime *)&v59, &time1, &time2);
          *(CMTime *)&v60[8] = v64;
          v61 = *(_OWORD *)&a4->value;
          v31 = a4->epoch;
          *(CMTime *)&v62[8] = v64;
          *(_QWORD *)v62 = v31;
          v29 = copyFigTimeMappingAsDictionary(a1, (uint64_t)&v59, (CFDictionaryRef *)&cf);
          v30 = cf;
          if ((_DWORD)v29)
            goto LABEL_52;
          appendTrackEditSegmentDictionary(v23, (const __CFDictionary *)cf);
          if ((_DWORD)v29)
            goto LABEL_52;
          if (v30)
          {
            CFRelease(v30);
            cf = 0;
          }
          time2 = *a4;
          rhs = *(CMTime *)&v62[8];
          CMTimeAdd(&time1, &time2, &rhs);
          *a4 = time1;
        }
        *(_OWORD *)&time1.value = v55;
        time1.epoch = v16;
        time2 = v65;
        if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
        {
LABEL_25:
          *a8 = v23;
          v32 = 0;
          if (a9)
          {
            v33 = *(_OWORD *)&a4->value;
            *(_QWORD *)(a9 + 16) = a4->epoch;
            *(_OWORD *)a9 = v33;
          }
          return v32;
        }
        v59 = v53;
        *(_QWORD *)v60 = v21;
        *(_OWORD *)&v60[8] = v53;
        *(_QWORD *)&v60[24] = v21;
        v61 = *(_OWORD *)&a4->value;
        *(_QWORD *)v62 = a4->epoch;
        *(CMTime *)&v62[8] = v65;
        v29 = copyFigTimeMappingAsDictionary(a1, (uint64_t)&v59, (CFDictionaryRef *)&cf);
        v30 = cf;
        if (!(_DWORD)v29)
        {
          appendTrackEditSegmentDictionary(v23, (const __CFDictionary *)cf);
          if (!(_DWORD)v29)
          {
            if (v30)
              CFRelease(v30);
            time2 = *a4;
            rhs = *(CMTime *)&v62[8];
            CMTimeAdd(&time1, &time2, &rhs);
            *a4 = time1;
            goto LABEL_25;
          }
        }
LABEL_52:
        v32 = v29;
        if (v30)
          CFRelease(v30);
        CFRelease(v23);
        return v32;
      }
      if ((flags & 1) != 0)
      {
        time2.value = value;
        time2.timescale = timescale;
        time2.flags = flags;
        time2.epoch = epoch;
        rhs = v58;
        CMTimeSubtract(&time1, &time2, &rhs);
        v66 = time1;
        time2 = time1;
        CMTimeConvertScale(&time1, &time2, a6, kCMTimeRoundingMethod_QuickTime);
        v66 = time1;
      }
    }
    v27 = v21;
    v28 = v55;
    goto LABEL_7;
  }
  return FigSignalErrorAt();
}

void appendTrackEditSegmentDictionary(const __CFArray *a1, const __CFDictionary *a2)
{
  CFIndex Count;
  CFIndex v5;
  const __CFDictionary *ValueAtIndex;
  int v7;
  int v8;
  CMTimeEpoch v9;
  const __CFAllocator *v10;
  void *v11;
  __int128 v12;
  void *value;
  CMTime time2;
  CMTime time1;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _QWORD v20[4];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _QWORD v25[4];

  Count = CFArrayGetCount(a1);
  if (!Count)
    goto LABEL_6;
  memset(v25, 0, sizeof(v25));
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  memset(v20, 0, sizeof(v20));
  v18 = 0u;
  v19 = 0u;
  v5 = Count - 1;
  v16 = 0u;
  v17 = 0u;
  ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, Count - 1);
  getFigTimeMappingFromDictionary(ValueAtIndex, &v21);
  if (!v7)
  {
    getFigTimeMappingFromDictionary(a2, &v16);
    if (!v8)
    {
      *(_OWORD *)&time1.value = v21;
      time1.epoch = v22;
      v12 = *MEMORY[0x1E0CA2E18];
      *(_OWORD *)&time2.value = *MEMORY[0x1E0CA2E18];
      v9 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      time2.epoch = v9;
      if (CMTimeCompare(&time1, &time2)
        || (*(_OWORD *)&time1.value = v16,
            time1.epoch = v17,
            *(_OWORD *)&time2.value = v12,
            time2.epoch = v9,
            CMTimeCompare(&time1, &time2)))
      {
LABEL_6:
        if (a2)
          CFArrayAppendValue(a1, a2);
        return;
      }
      value = 0;
      time1 = *(CMTime *)&v25[1];
      time2 = *(CMTime *)&v20[1];
      CMTimeAdd((CMTime *)&v25[1], &time1, &time2);
      v10 = CFGetAllocator(ValueAtIndex);
      if (!copyFigTimeMappingAsDictionary(v10, (uint64_t)&v21, (CFDictionaryRef *)&value))
      {
        v11 = value;
        CFArraySetValueAtIndex(a1, v5, value);
        CFRelease(v11);
      }
    }
  }
}

void appendTrackEditSegmentArray(const __CFArray *a1, CFArrayRef theArray)
{
  CFIndex Count;
  CFIndex v5;
  const __CFDictionary *ValueAtIndex;
  int v7;
  CFRange v8;

  Count = CFArrayGetCount(theArray);
  if (Count)
  {
    v5 = Count;
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, 0);
    appendTrackEditSegmentDictionary(a1, ValueAtIndex);
    if (!v7)
    {
      v8.length = v5 - 1;
      v8.location = 1;
      CFArrayAppendArray(a1, theArray, v8);
    }
  }
}

uint64_t figMatrixToBigEndianMatrixRecord(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  float *v5;
  double v6;

  v2 = 0;
  v3 = result;
  do
  {
    for (i = 0; i != 12; i += 4)
    {
      v5 = (float *)(v3 + i);
      if (i == 8)
        v5 = (float *)(result + 12 * v2 + 8);
      v6 = 65536.0;
      if (i == 8)
        v6 = 1073741820.0;
      *(_DWORD *)(a2 + i) = bswap32((int)(v6 * *v5));
    }
    ++v2;
    a2 += 12;
    v3 += 12;
  }
  while (v2 != 3);
  return result;
}

uint64_t appendEditAtom(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t BasicMetrics;
  const __CFAllocator *v7;
  uint64_t v8;
  uint64_t EditSegmentCount;
  uint64_t v10;
  int v11;
  uint64_t WritableForBlockBuffer;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t appended;
  float v17;
  CMTimeValue value;
  float v19;
  unint64_t v20;
  BOOL v21;
  int v22;
  CMTimeScale v23;
  OpaqueCMBlockBuffer *v24;
  uint64_t v25;
  uint64_t v26;
  const __CFAllocator *v28;
  uint64_t *v29;
  int32_t newTimescale;
  uint64_t v31;
  uint64_t v32;
  int32_t v33;
  int v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  CMTime v40;
  CMTime v41;
  CMTime time2;
  CMTime time;
  CMTime v44;
  __int128 v45;
  _QWORD v46[4];
  __int128 v47;
  _QWORD v48[4];
  CFTypeRef v49;
  CMBlockBufferRef blockBufferOut;

  v39 = 0;
  v37 = 0u;
  v38 = 0u;
  v36 = 0u;
  v35 = 0;
  BasicMetrics = MovieInformationGetBasicMetrics(*(_QWORD *)(a1 + 8), 0, 0, (_DWORD *)&v35 + 1, 0);
  if ((_DWORD)BasicMetrics
    || (BasicMetrics = getTimeValueToAddToCompositionOffsets(a1, (uint64_t)a2, a3, (int *)&v35, 0, 0),
        (_DWORD)BasicMetrics))
  {
    appended = BasicMetrics;
    FigAtomWriterEndAtom();
    return appended;
  }
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v33 = HIDWORD(v35);
  v32 = (int)v35;
  v8 = *a2;
  newTimescale = MovieTrackGetMediaTimeScale(*a2);
  v49 = 0;
  blockBufferOut = 0;
  v29 = a2;
  v34 = a3;
  if (a3)
    EditSegmentCount = MovieTrackGetEditSegmentCount(v8);
  else
    EditSegmentCount = MovieTrackFragmentGetEditSegmentCount(v8);
  v10 = EditSegmentCount;
  v31 = EditSegmentCount - 1;
  v11 = -1;
  v28 = v7;
LABEL_7:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (v49)
    CFRelease(v49);
  WritableForBlockBuffer = CMBlockBufferCreateEmpty(v7, 0, 0, &blockBufferOut);
  if ((_DWORD)WritableForBlockBuffer
    || (WritableForBlockBuffer = CMByteStreamCreateWritableForBlockBuffer(), (_DWORD)WritableForBlockBuffer))
  {
LABEL_66:
    appended = WritableForBlockBuffer;
  }
  else
  {
    if (v10 < 1)
    {
      v13 = 0;
LABEL_48:
      appended = 0;
      v24 = blockBufferOut;
      blockBufferOut = 0;
      goto LABEL_49;
    }
    v13 = 0;
    v14 = 0;
    while (1)
    {
      memset(v48, 0, sizeof(v48));
      v47 = 0u;
      v45 = 0u;
      memset(v46, 0, sizeof(v46));
      v15 = v34
          ? MovieTrackGetEditSegmentWithIndex(v8, v14, &v45)
          : MovieTrackFragmentGetEditSegmentWithIndex(v8, v14, &v45);
      appended = v15;
      if ((_DWORD)v15)
        break;
      v17 = 1.0;
      if ((BYTE12(v45) & 1) != 0)
      {
        *(_OWORD *)&time.value = v45;
        time.epoch = v46[0];
        CMTimeConvertScale(&v44, &time, newTimescale, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
        value = v44.value;
        time = *(CMTime *)&v46[1];
        time2 = *(CMTime *)&v48[1];
        if (CMTimeCompare(&time, &time2))
        {
          v19 = (float)v46[1];
          time = *(CMTime *)&v48[1];
          CMTimeConvertScale(&v41, &time, v46[2], kCMTimeRoundingMethod_RoundHalfAwayFromZero);
          v17 = v19 / (float)v41.value;
        }
      }
      else
      {
        value = -1;
      }
      if (value == -1 && v31 == v14)
        goto LABEL_48;
      time = *(CMTime *)&v48[1];
      CMTimeConvertScale(&v40, &time, v33, kCMTimeRoundingMethod_QuickTime);
      if (v40.value || (unint64_t)(value - 1) <= 0xFFFFFFFFFFFFFFFDLL && *((_BYTE *)v29 + 39))
      {
        time2.timescale = 0;
        time2.value = 0;
        memset(&time, 0, 20);
        v20 = value + v32;
        if (value == -1)
          v20 = -1;
        if (HIDWORD(v40.value))
          v21 = 0;
        else
          v21 = v20 - 0x80000000 >= 0xFFFFFFFF7FFFFFFFLL;
        v22 = !v21;
        if (v11 == -1)
        {
          v11 = v22;
        }
        else if (v11 < v22)
        {
          v11 = v22;
          v7 = v28;
          goto LABEL_7;
        }
        v23 = bswap32(vcvtd_n_s64_f64(v17, 0x10uLL));
        if (v11 == 1)
        {
          time.value = bswap64(v40.value);
          *(_QWORD *)&time.timescale = bswap64(v20);
          LODWORD(time.epoch) = v23;
        }
        else
        {
          time2.value = _byteswap_uint64(__PAIR64__(v40.value, v20));
          time2.timescale = v23;
        }
        WritableForBlockBuffer = CMByteStreamAppend();
        if ((_DWORD)WritableForBlockBuffer)
          goto LABEL_66;
        ++v13;
      }
      if (v10 == ++v14)
        goto LABEL_48;
    }
  }
  v13 = 0;
  v24 = 0;
LABEL_49:
  if (v49)
    CFRelease(v49);
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (!(_DWORD)appended && v13)
  {
    v25 = FigAtomWriterInitWithParent();
    if ((_DWORD)v25 || (v25 = FigAtomWriterBeginAtom(), (_DWORD)v25))
    {
      appended = v25;
    }
    else
    {
      *(_QWORD *)&v47 = 0;
      memset(v46, 0, sizeof(v46));
      v45 = 0u;
      CMBlockBufferGetDataLength(v24);
      v26 = FigAtomWriterInitWithParent();
      if ((_DWORD)v26
        || (v26 = FigAtomWriterBeginAtom(), (_DWORD)v26)
        || (v26 = FigAtomWriterAppendVersionAndFlags(), (_DWORD)v26)
        || (LODWORD(v44.value) = bswap32(v13), v26 = FigAtomWriterAppendData(), (_DWORD)v26))
      {
        appended = v26;
        FigAtomWriterEndAtom();
      }
      else
      {
        appended = FigAtomWriterAppendBlockBufferData();
        FigAtomWriterEndAtom();
        if (!(_DWORD)appended)
          *((_BYTE *)v29 + 41) = 1;
      }
    }
  }
  FigAtomWriterEndAtom();
  if (v24)
    CFRelease(v24);
  return appended;
}

uint64_t FigUserDataSerializerCreateBBuf(const void *a1, CMBlockBufferRef *a2)
{
  const __CFDictionary **DerivedStorage;
  const __CFDictionary **v5;
  const __CFDictionary *v6;
  const __CFAllocator *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t AtomSize;
  unint64_t v14;
  uint64_t appended;
  _OWORD v17[3];
  uint64_t v18;
  CMBlockBufferRef blockBufferOut;
  unint64_t v20;
  _OWORD context[4];
  uint64_t v22;

  blockBufferOut = 0;
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  DerivedStorage = (const __CFDictionary **)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    v10 = FigSignalErrorAt();
LABEL_33:
    appended = v10;
    v11 = 0;
    goto LABEL_23;
  }
  if (!a2)
  {
    v8 = FigSignalErrorAt();
    goto LABEL_35;
  }
  v5 = DerivedStorage;
  v6 = *DerivedStorage;
  if ((!v6 || !CFDictionaryGetCount(v6)) && !*((_DWORD *)v5 + 2) && !*((_DWORD *)v5 + 3))
  {
    v11 = 0;
    appended = 0;
    goto LABEL_23;
  }
  v7 = CFGetAllocator(a1);
  v8 = CMBlockBufferCreateEmpty(v7, 8u, 0, &blockBufferOut);
  if ((_DWORD)v8 || (v8 = FigAtomWriterInitWithBlockBuffer(), (_DWORD)v8))
  {
LABEL_35:
    appended = v8;
    goto LABEL_28;
  }
  v9 = CMBaseObjectGetDerivedStorage();
  v22 = 0;
  memset(context, 0, sizeof(context));
  v10 = FigAtomWriterBeginAtom();
  if ((_DWORD)v10)
    goto LABEL_33;
  v10 = FigAtomWriterInitWithParent();
  if ((_DWORD)v10)
    goto LABEL_33;
  LOBYTE(v22) = *(_BYTE *)(v9 + 16);
  if (*(_QWORD *)v9)
  {
    CFDictionaryApplyFunction(*(CFDictionaryRef *)v9, (CFDictionaryApplierFunction)FigUserDataWriteItemAtom, context);
    v11 = LOBYTE(context[0]);
  }
  else
  {
    v11 = 0;
  }
  v12 = *(unsigned int *)(v9 + 8);
  if (*(_DWORD *)(v9 + 12))
  {
    v20 = 0;
    AtomSize = FigAtomWriterGetAtomSize();
    if ((_DWORD)AtomSize)
    {
      appended = AtomSize;
      goto LABEL_23;
    }
    v14 = *(unsigned int *)(v9 + 12);
    if (v14 > v20 && v14 - v20 > *(unsigned int *)(v9 + 8))
      v12 = v14 - v20;
  }
  appended = FigAtomWriterEndAtom();
  if (!(_DWORD)appended)
  {
    if (v12)
    {
      appended = FigMetadataAppendFreeAtom((uint64_t)v17, v12);
      if (!(_DWORD)appended)
        v11 = 1;
    }
  }
LABEL_23:
  if (a2 && !(_DWORD)appended)
  {
    appended = 0;
    if (v11)
    {
      *a2 = blockBufferOut;
      return appended;
    }
    *a2 = 0;
  }
LABEL_28:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  return appended;
}

uint64_t FigMetadataAppendFreeAtom(uint64_t a1, unint64_t a2)
{
  size_t v2;
  uint64_t appended;
  uint64_t v4;
  CMBlockBufferRef destinationBuffer;

  destinationBuffer = 0;
  v2 = a2 - 8;
  if (a2 < 8)
    return 0;
  appended = FigAtomWriterBeginAtom();
  if (!(_DWORD)appended)
  {
    if (!v2
      || (appended = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v2, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, v2, 1u, &destinationBuffer), !(_DWORD)appended)&& (appended = CMBlockBufferFillDataBytes(0, destinationBuffer, 0, 0), !(_DWORD)appended)&& (appended = FigAtomWriterAppendBlockBufferData(), !(_DWORD)appended))
    {
      appended = FigAtomWriterEndAtom();
    }
  }
  v4 = appended;
  if (destinationBuffer)
    CFRelease(destinationBuffer);
  return v4;
}

void FigMetadataSerializerRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t figMovieWriter_Invalidate()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  int v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v1 = DerivedStorage;
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 336));
    v2 = *(unsigned __int8 *)(v1 + 335);
    *(_BYTE *)(v1 + 335) = 1;
    MEMORY[0x19402EF04](*(_QWORD *)(v1 + 336));
    if (!v2)
    {
      if (*(_QWORD *)(v1 + 552))
      {
        *(_BYTE *)(v1 + 563) = 1;
        FigSemaphoreSignal();
        FigThreadJoin();
        *(_QWORD *)(v1 + 552) = 0;
      }
      MovieSampleDataWriterFlushPendingAsynchronousTasks(*(_QWORD *)(v1 + 744));
    }
  }
  return 0;
}

void FigUserDataSerializerFinalize()
{
  const void **DerivedStorage;
  const void **v1;
  const void *v2;

  DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v1 = DerivedStorage;
    v2 = *DerivedStorage;
    if (v2)
    {
      CFRelease(v2);
      *v1 = 0;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t FigMediaProcessorInvalidate(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  void (*v6)(uint64_t, _QWORD, _QWORD);
  uint64_t FigBaseObject;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t (*v14)(uint64_t);

  if (result)
  {
    v1 = result;
    if (!*(_BYTE *)(result + 16))
    {
      FigMediaProcessorStop(result);
      FigMediaProcessorWaitUntilCompletelyStopped(v1);
      *(_BYTE *)(v1 + 16) = 1;
      v2 = *(_QWORD *)(v1 + 40);
      if (v2 && *(_BYTE *)(v1 + 56))
      {
        v3 = *(_QWORD *)(v1 + 48);
        v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
        if (v4)
          v4(v2, v3);
        *(_QWORD *)(v1 + 48) = 0;
        *(_BYTE *)(v1 + 56) = 0;
      }
      if (*(_QWORD *)(v1 + 32))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterRemoveListener();
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterRemoveListener();
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterRemoveListener();
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterRemoveListener();
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
      }
      v5 = *(_QWORD *)(v1 + 64);
      if (v5)
      {
        if (!*(_BYTE *)(v1 + 72))
          goto LABEL_16;
        v6 = *(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (v6)
          v6(v5, 0, 0);
        *(_BYTE *)(v1 + 72) = 0;
        v5 = *(_QWORD *)(v1 + 64);
        if (v5)
        {
LABEL_16:
          FigBaseObject = FigActivitySchedulerGetFigBaseObject(v5);
          if (FigBaseObject)
          {
            v8 = FigBaseObject;
            v9 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
            if (v9)
              v9(v8);
          }
        }
      }
      if (*(_QWORD *)(v1 + 24))
      {
        v10 = FigSampleBufferProcessorGetFigBaseObject();
        if (v10)
        {
          v11 = v10;
          v12 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
          if (v12)
            v12(v11);
        }
      }
      result = *(_QWORD *)(v1 + 32);
      if (result)
      {
        result = FigSampleBufferProviderGetFigBaseObject(result);
        if (result)
        {
          v13 = result;
          result = CMBaseObjectGetVTable();
          v14 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 24);
          if (v14)
            return v14(v13);
        }
      }
    }
  }
  return result;
}

uint64_t FigMediaProcessorStop(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  *(_BYTE *)(a1 + 73) = 0;
  return 0;
}

uint64_t FigMediaProcessorWaitUntilCompletelyStopped(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 80));
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 80));
  return 0;
}

uint64_t otfw_removeLowWaterTrigger(uint64_t a1, opaqueCMBufferQueueTriggerToken *a2)
{
  _QWORD *DerivedStorage;
  opaqueCMBufferQueue *v4;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v4 = (opaqueCMBufferQueue *)DerivedStorage[2];
  if (v4)
  {
    CMBufferQueueRemoveTrigger(v4, a2);
    DerivedStorage[10] = 0;
    DerivedStorage[11] = 0;
    DerivedStorage[9] = 0;
  }
  return 0;
}

uint64_t facInvalidate()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigAudioCompressorInvalidate(DerivedStorage);
  return 0;
}

void FigAudioCompressorInvalidate(uint64_t a1)
{
  const void *v2;
  void *v3;
  const void *v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  void **v8;
  void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;

  if (a1 && !*(_BYTE *)(a1 + 16))
  {
    if (*(_QWORD *)(a1 + 64))
    {
      if (*(_BYTE *)(a1 + 80))
      {
        AudioConverterReleaseHardwareCodec();
        *(_BYTE *)(a1 + 80) = 0;
      }
      v2 = *(const void **)(a1 + 72);
      if (v2)
      {
        CFRelease(v2);
        *(_QWORD *)(a1 + 72) = 0;
      }
      AudioConverterDispose(*(AudioConverterRef *)(a1 + 64));
      *(_QWORD *)(a1 + 64) = 0;
    }
    v3 = *(void **)(a1 + 104);
    if (v3)
    {
      free(v3);
      *(_QWORD *)(a1 + 104) = 0;
    }
    v4 = *(const void **)(a1 + 96);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(a1 + 96) = 0;
    }
    v5 = *(void ***)(a1 + 176);
    if (v5)
    {
      v6 = *(unsigned int *)v5;
      if ((_DWORD)v6)
      {
        v7 = 0;
        v8 = v5 + 2;
        do
        {
          if (*v8)
          {
            free(*v8);
            *v8 = 0;
            v6 = *(unsigned int *)v5;
          }
          *((_DWORD *)v8 - 1) = 0;
          ++v7;
          v8 += 2;
        }
        while (v7 < v6);
        v5 = *(void ***)(a1 + 176);
      }
      free(v5);
      *(_QWORD *)(a1 + 176) = 0;
    }
    v9 = *(void **)(a1 + 152);
    if (v9)
    {
      free(v9);
      *(_QWORD *)(a1 + 152) = 0;
      *(_DWORD *)(a1 + 160) = 0;
    }
    free(*(void **)(a1 + 168));
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    v10 = *(const void **)(a1 + 24);
    if (v10)
    {
      CFRelease(v10);
      *(_QWORD *)(a1 + 24) = 0;
    }
    v11 = *(const void **)(a1 + 32);
    if (v11)
    {
      CFRelease(v11);
      *(_QWORD *)(a1 + 32) = 0;
    }
    v12 = *(const void **)(a1 + 288);
    if (v12)
    {
      CFRelease(v12);
      *(_QWORD *)(a1 + 288) = 0;
    }
    v13 = *(const void **)(a1 + 296);
    if (v13)
    {
      CFRelease(v13);
      *(_QWORD *)(a1 + 296) = 0;
    }
    v14 = *(const void **)(a1 + 280);
    if (v14)
    {
      CFRelease(v14);
      *(_QWORD *)(a1 + 280) = 0;
    }
    v15 = *(const void **)(a1 + 264);
    if (v15)
    {
      CFRelease(v15);
      *(_QWORD *)(a1 + 264) = 0;
    }
    v16 = *(const void **)(a1 + 216);
    if (v16)
    {
      CFRelease(v16);
      *(_QWORD *)(a1 + 216) = 0;
    }
    *(_BYTE *)(a1 + 16) = 1;
  }
}

void facFinalize()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigAudioCompressorInvalidate(DerivedStorage);
}

void otfw_finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
  v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
    CFRelease(v1);
}

uint64_t mediaprocessor_Finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  uint64_t result;

  FigMediaProcessorInvalidate((uint64_t)a1);
  v2 = (const void *)a1[8];
  if (v2)
  {
    CFRelease(v2);
    a1[8] = 0;
  }
  v3 = (const void *)a1[3];
  if (v3)
  {
    CFRelease(v3);
    a1[3] = 0;
  }
  v4 = (const void *)a1[4];
  if (v4)
  {
    CFRelease(v4);
    a1[4] = 0;
  }
  v5 = (const void *)a1[5];
  if (v5)
  {
    CFRelease(v5);
    a1[5] = 0;
  }
  result = FigSimpleMutexDestroy();
  a1[10] = 0;
  return result;
}

uint64_t sbp_vtcs_invalidate()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(DerivedStorage + 39) = 1;
  *(_QWORD *)(DerivedStorage + 24) = 0;
  VTCompressionSessionInvalidate(*(VTCompressionSessionRef *)(DerivedStorage + 16));
  if (*(_QWORD *)DerivedStorage)
    CMMemoryPoolInvalidate(*(CMMemoryPoolRef *)DerivedStorage);
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  return 0;
}

void sbp_vtcs_finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
}

void figMovieWriter_Finalize()
{
  uint64_t DerivedStorage;
  const __CFArray *v1;
  CFIndex Count;
  CFIndex v3;
  CFIndex i;
  void *ValueAtIndex;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  opaqueCMBufferQueue *v15;
  opaqueCMBufferQueueTriggerToken *v16;
  opaqueCMBufferQueueTriggerToken *v17;
  opaqueCMBufferQueueTriggerToken *v18;
  const void *v19;
  const __CFArray *v20;
  CFIndex v21;
  CFIndex v22;
  CFIndex j;
  void **v24;
  void *v25;
  CFAllocatorRef *v26;
  const void *v27;
  const void *v28;
  void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  const void *v36;
  void *v37;
  const void *v38;
  const void *v39;
  const void *v40;
  const void *v41;
  const void *v42;
  const void *v43;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  figMovieWriter_Invalidate();
  if (DerivedStorage)
  {
    v1 = *(const __CFArray **)(DerivedStorage + 488);
    if (v1)
    {
      Count = CFArrayGetCount(v1);
      if (Count >= 1)
      {
        v3 = Count;
        for (i = 0; i != v3; ++i)
        {
          ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 488), i);
          v6 = (const void *)*((_QWORD *)ValueAtIndex + 50);
          if (v6)
          {
            CFRelease(v6);
            *((_QWORD *)ValueAtIndex + 50) = 0;
          }
          v7 = (const void *)*((_QWORD *)ValueAtIndex + 51);
          if (v7)
          {
            CFRelease(v7);
            *((_QWORD *)ValueAtIndex + 51) = 0;
          }
          v8 = (const void *)*((_QWORD *)ValueAtIndex + 52);
          if (v8)
          {
            CFRelease(v8);
            *((_QWORD *)ValueAtIndex + 52) = 0;
          }
          v9 = (const void *)*((_QWORD *)ValueAtIndex + 68);
          if (v9)
          {
            CFRelease(v9);
            *((_QWORD *)ValueAtIndex + 68) = 0;
          }
          v10 = (const void *)*((_QWORD *)ValueAtIndex + 69);
          if (v10)
          {
            CFRelease(v10);
            *((_QWORD *)ValueAtIndex + 69) = 0;
          }
          v11 = (const void *)*((_QWORD *)ValueAtIndex + 70);
          if (v11)
          {
            CFRelease(v11);
            *((_QWORD *)ValueAtIndex + 70) = 0;
          }
          v12 = (const void *)*((_QWORD *)ValueAtIndex + 71);
          if (v12)
          {
            CFRelease(v12);
            *((_QWORD *)ValueAtIndex + 71) = 0;
          }
          v13 = (const void *)*((_QWORD *)ValueAtIndex + 72);
          if (v13)
          {
            CFRelease(v13);
            *((_QWORD *)ValueAtIndex + 72) = 0;
          }
          v14 = (const void *)*((_QWORD *)ValueAtIndex + 57);
          if (v14)
          {
            CFRelease(v14);
            *((_QWORD *)ValueAtIndex + 57) = 0;
          }
          v15 = (opaqueCMBufferQueue *)*((_QWORD *)ValueAtIndex + 76);
          if (v15)
          {
            v16 = (opaqueCMBufferQueueTriggerToken *)*((_QWORD *)ValueAtIndex + 78);
            if (v16)
            {
              CMBufferQueueRemoveTrigger(v15, v16);
              *((_QWORD *)ValueAtIndex + 78) = 0;
              v15 = (opaqueCMBufferQueue *)*((_QWORD *)ValueAtIndex + 76);
            }
            v17 = (opaqueCMBufferQueueTriggerToken *)*((_QWORD *)ValueAtIndex + 79);
            if (v17)
            {
              CMBufferQueueRemoveTrigger(v15, v17);
              *((_QWORD *)ValueAtIndex + 79) = 0;
              v15 = (opaqueCMBufferQueue *)*((_QWORD *)ValueAtIndex + 76);
            }
            v18 = (opaqueCMBufferQueueTriggerToken *)*((_QWORD *)ValueAtIndex + 80);
            if (v18)
            {
              CMBufferQueueRemoveTrigger(v15, v18);
              *((_QWORD *)ValueAtIndex + 80) = 0;
            }
            FigBufferQueueRelease();
            *((_QWORD *)ValueAtIndex + 76) = 0;
          }
          v19 = (const void *)*((_QWORD *)ValueAtIndex + 77);
          if (v19)
          {
            CFRelease(v19);
            *((_QWORD *)ValueAtIndex + 77) = 0;
          }
          v20 = (const __CFArray *)*((_QWORD *)ValueAtIndex + 53);
          if (v20)
          {
            v21 = CFArrayGetCount(v20);
            if (v21 >= 1)
            {
              v22 = v21;
              for (j = 0; j != v22; ++j)
              {
                v24 = (void **)CFArrayGetValueAtIndex(*((CFArrayRef *)ValueAtIndex + 53), j);
                editBuilderRelease(v24[34]);
                free(v24);
              }
            }
            CFRelease(*((CFTypeRef *)ValueAtIndex + 53));
            *((_QWORD *)ValueAtIndex + 53) = 0;
          }
          v25 = (void *)*((_QWORD *)ValueAtIndex + 62);
          if (v25)
          {
            editBuilderRelease(v25);
            *((_QWORD *)ValueAtIndex + 62) = 0;
          }
          v26 = (CFAllocatorRef *)*((_QWORD *)ValueAtIndex + 67);
          if (v26)
          {
            FigCEA608DataInspectorRelease(v26);
            *((_QWORD *)ValueAtIndex + 67) = 0;
          }
          v27 = (const void *)*((_QWORD *)ValueAtIndex + 41);
          if (v27)
          {
            CFRelease(v27);
            *((_QWORD *)ValueAtIndex + 41) = 0;
          }
          v28 = (const void *)*((_QWORD *)ValueAtIndex + 92);
          if (v28)
          {
            CFRelease(v28);
            *((_QWORD *)ValueAtIndex + 92) = 0;
          }
          MediaSampleTimingGeneratorRelease(*((void **)ValueAtIndex + 94));
          *((_QWORD *)ValueAtIndex + 94) = 0;
          MediaSampleTimingGeneratorDisposeMediaSampleTimingInfoArray(*((void **)ValueAtIndex + 97));
          free(ValueAtIndex);
        }
      }
      CFRelease(*(CFTypeRef *)(DerivedStorage + 488));
      *(_QWORD *)(DerivedStorage + 488) = 0;
    }
    if (*(_QWORD *)(DerivedStorage + 520))
    {
      FigSimpleMutexDestroy();
      *(_QWORD *)(DerivedStorage + 520) = 0;
    }
    if (*(_QWORD *)(DerivedStorage + 568))
    {
      FigSemaphoreDestroy();
      *(_QWORD *)(DerivedStorage + 568) = 0;
    }
    if (*(_QWORD *)(DerivedStorage + 576))
    {
      FigSemaphoreDestroy();
      *(_QWORD *)(DerivedStorage + 576) = 0;
    }
    if (*(_QWORD *)(DerivedStorage + 584))
    {
      FigSemaphoreDestroy();
      *(_QWORD *)(DerivedStorage + 584) = 0;
    }
    if (*(_QWORD *)(DerivedStorage + 592))
    {
      FigSemaphoreDestroy();
      *(_QWORD *)(DerivedStorage + 592) = 0;
    }
    v29 = *(void **)(DerivedStorage + 608);
    if (v29)
    {
      os_release(v29);
      *(_QWORD *)(DerivedStorage + 608) = 0;
    }
    v30 = *(const void **)(DerivedStorage + 688);
    if (v30)
    {
      CFRelease(v30);
      *(_QWORD *)(DerivedStorage + 688) = 0;
    }
    v31 = *(const void **)(DerivedStorage + 272);
    if (v31)
    {
      CFRelease(v31);
      *(_QWORD *)(DerivedStorage + 272) = 0;
    }
    v32 = *(const void **)(DerivedStorage + 280);
    if (v32)
    {
      CFRelease(v32);
      *(_QWORD *)(DerivedStorage + 280) = 0;
    }
    v33 = *(const void **)(DerivedStorage + 288);
    if (v33)
    {
      CFRelease(v33);
      *(_QWORD *)(DerivedStorage + 288) = 0;
    }
    v34 = *(const void **)(DerivedStorage + 296);
    if (v34)
    {
      CFRelease(v34);
      *(_QWORD *)(DerivedStorage + 296) = 0;
    }
    v35 = *(const void **)(DerivedStorage + 304);
    if (v35)
    {
      CFRelease(v35);
      *(_QWORD *)(DerivedStorage + 304) = 0;
    }
    v36 = *(const void **)(DerivedStorage + 312);
    if (v36)
    {
      CFRelease(v36);
      *(_QWORD *)(DerivedStorage + 312) = 0;
    }
    v37 = *(void **)(DerivedStorage + 472);
    if (v37)
    {
      free(v37);
      *(_QWORD *)(DerivedStorage + 472) = 0;
    }
    if (*(_QWORD *)(DerivedStorage + 336))
    {
      FigSimpleMutexDestroy();
      *(_QWORD *)(DerivedStorage + 336) = 0;
    }
    v38 = *(const void **)(DerivedStorage + 440);
    if (v38)
    {
      CFRelease(v38);
      *(_QWORD *)(DerivedStorage + 440) = 0;
    }
    v39 = *(const void **)(DerivedStorage + 712);
    if (v39)
    {
      CFRelease(v39);
      *(_QWORD *)(DerivedStorage + 712) = 0;
    }
    v40 = *(const void **)(DerivedStorage + 720);
    if (v40)
    {
      CFRelease(v40);
      *(_QWORD *)(DerivedStorage + 720) = 0;
    }
    v41 = *(const void **)(DerivedStorage + 728);
    if (v41)
    {
      CFRelease(v41);
      *(_QWORD *)(DerivedStorage + 728) = 0;
    }
    v42 = *(const void **)(DerivedStorage + 744);
    if (v42)
    {
      CFRelease(v42);
      *(_QWORD *)(DerivedStorage + 744) = 0;
    }
    v43 = *(const void **)(DerivedStorage + 8);
    if (v43)
    {
      CFRelease(v43);
      *(_QWORD *)(DerivedStorage + 8) = 0;
    }
    MovieHeaderMakerRelease(*(const __CFAllocator ***)(DerivedStorage + 736));
    *(_QWORD *)(DerivedStorage + 736) = 0;
  }
}

void playerasync_InvalidateItem(const void *a1)
{
  CMBaseObjectGetDerivedStorage();
  if (FigAtomicCompareAndSwap32())
    itemasync_InvalidateInternal(a1);
}

uint64_t FigTTMLDocumentWriterCreateForiTT(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *DerivedStorage;
  CFTypeRef v9;
  CFTypeRef cf;

  v9 = 0;
  cf = 0;
  if (!a2 || !a3)
  {
    v5 = FigSignalErrorAt();
    goto LABEL_8;
  }
  FigTTMLDocumentWriterGetClassID();
  v5 = CMDerivedObjectCreate();
  if ((_DWORD)v5)
  {
LABEL_8:
    v6 = v5;
    goto LABEL_9;
  }
  v6 = FigTTMLDocumentWriterStateCreate(*MEMORY[0x1E0C9AE00], &v9);
  if (!(_DWORD)v6)
  {
    FigTTMLDocumentWriterGetCMBaseObject(cf);
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    *DerivedStorage = CFRetain(a2);
    DerivedStorage[1] = v9;
    *a3 = cf;
    return v6;
  }
  if (v9)
    CFRelease(v9);
LABEL_9:
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t figTTMLDocumentWriterForiTT_Invalidate()
{
  return 0;
}

void figTTMLDocumentWriterForiTT_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  FigTTMLDocumentWriterGetCMBaseObject();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
    CFRelease(v1);
}

CFStringRef figTTMLDocumentWriterForiTT_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("FigTTMLDocumentWriterForiTT[%p]"), a1);
}

uint64_t figTTMLDocumentWriterForiTT_StartElement(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  int v6;
  uint64_t started;
  uint64_t v8;
  __CFDictionary *Mutable;
  __CFDictionary *v10;
  uint64_t value_low;
  uint64_t v12;
  __CFDictionary *v13;
  __CFDictionary *v14;
  uint64_t v15;
  CFMutableDictionaryRef v16;
  __CFDictionary *v17;
  uint64_t v18;
  _QWORD v20[3];
  CMTime context;

  ((void (*)(void))FigTTMLDocumentWriterGetCMBaseObject)();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = DerivedStorage;
  v6 = 0;
  switch((int)a2)
  {
    case 2:
      if (*(_BYTE *)(DerivedStorage + 16))
        goto LABEL_8;
      started = FigTTMLDocumentWriterStartElement(a1, 8);
      if (!(_DWORD)started)
      {
        started = FigTTMLDocumentWriterEndElement(a1);
        if (!(_DWORD)started)
          goto LABEL_8;
      }
      return started;
    case 3:
      FigTTMLDocumentWriterGetCMBaseObject(a1);
      v8 = CMBaseObjectGetDerivedStorage();
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (Mutable)
      {
        v10 = Mutable;
        CFDictionaryAddValue(Mutable, CFSTR("style"), CFSTR("normal"));
        CFDictionaryAddValue(v10, CFSTR("region"), CFSTR("bottom"));
        context.value = 0;
        *(_QWORD *)&context.timescale = FigTTMLDocumentWriterStateGetAttributes(*(_QWORD *)(v8 + 8));
        context.epoch = a1;
        CFDictionaryApplyFunction(v10, (CFDictionaryApplierFunction)writeAttributeIfNotWrittenYet, &context);
        value_low = LODWORD(context.value);
        CFRelease(v10);
        if ((_DWORD)value_low)
          return value_low;
        goto LABEL_8;
      }
      value_low = FigSignalErrorAt();
      if (!(_DWORD)value_low)
      {
LABEL_8:
        v6 = 0;
        goto LABEL_26;
      }
      return value_low;
    case 8:
      FigTTMLDocumentWriterGetCMBaseObject(a1);
      v12 = CMBaseObjectGetDerivedStorage();
      v13 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v13)
      {
        v14 = v13;
        CFDictionaryAddValue(v13, CFSTR("xmlns:xsi"), CFSTR("http://www.w3.org/2001/XMLSchema-instance"));
        CFDictionaryAddValue(v14, CFSTR("xmlns:tt"), CFSTR("http://www.w3.org/ns/ttml"));
        CFDictionaryAddValue(v14, CFSTR("http://www.w3.org/ns/ttml#parameter timeBase"), CFSTR("smpte"));
        v15 = FigCFDictionarySetInt32();
        if ((_DWORD)v15 || (CMTimeMake(&context, 999, 1000), v15 = FigCFDictionarySetCMTime(), (_DWORD)v15))
        {
          value_low = v15;
        }
        else
        {
          CFDictionaryAddValue(v14, CFSTR("http://www.w3.org/ns/ttml#parameter dropMode"), CFSTR("nonDrop"));
          v20[0] = 0;
          v20[1] = FigTTMLDocumentWriterStateGetAttributes(*(_QWORD *)(v12 + 8));
          v20[2] = a1;
          CFDictionaryApplyFunction(v14, (CFDictionaryApplierFunction)writeAttributeIfNotWrittenYet, v20);
          value_low = LODWORD(v20[0]);
        }
        CFRelease(v14);
        if ((_DWORD)value_low)
          return value_low;
      }
      else
      {
        value_low = FigSignalErrorAt();
        if ((_DWORD)value_low)
          return value_low;
      }
      started = FigTTMLDocumentWriterStartElement(*(_QWORD *)v5, a2);
      if ((_DWORD)started)
        return started;
      *(_BYTE *)(v5 + 16) = 1;
      return FigTTMLDocumentWriterStateStartElement(*(_QWORD *)(v5 + 8), a2);
    case 9:
      if (*(_BYTE *)(DerivedStorage + 17))
        goto LABEL_25;
      started = FigTTMLDocumentWriterStartElement(a1, 12);
      if ((_DWORD)started)
        return started;
      v16 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v16)
      {
        v17 = v16;
        v18 = FigTTMLDocumentWriterStartElement(a1, 13);
        if (!(_DWORD)v18)
        {
          CFDictionaryAddValue(v17, CFSTR("http://www.w3.org/XML/1998/namespace id"), CFSTR("normal"));
          CFDictionaryAddValue(v17, CFSTR("http://www.w3.org/ns/ttml#styling fontFamily"), CFSTR("sansSerif"));
          CFDictionaryAddValue(v17, CFSTR("http://www.w3.org/ns/ttml#styling fontWeight"), CFSTR("normal"));
          CFDictionaryAddValue(v17, CFSTR("http://www.w3.org/ns/ttml#styling fontStyle"), CFSTR("normal"));
          CFDictionaryAddValue(v17, CFSTR("http://www.w3.org/ns/ttml#styling color"), CFSTR("white"));
          CFDictionaryAddValue(v17, CFSTR("http://www.w3.org/ns/ttml#styling fontSize"), CFSTR("100%"));
          context.value = 0;
          *(_QWORD *)&context.timescale = 0;
          context.epoch = a1;
          CFDictionaryApplyFunction(v17, (CFDictionaryApplierFunction)writeAttributeIfNotWrittenYet, &context);
          value_low = LODWORD(context.value);
          if (LODWORD(context.value))
            goto LABEL_23;
          v18 = FigTTMLDocumentWriterEndElement(a1);
        }
        value_low = v18;
LABEL_23:
        CFRelease(v17);
        if ((_DWORD)value_low)
          return value_low;
LABEL_24:
        started = FigTTMLDocumentWriterEndElement(a1);
        if ((_DWORD)started)
          return started;
LABEL_25:
        v6 = 1;
LABEL_26:
        started = FigTTMLDocumentWriterStartElement(*(_QWORD *)v5, a2);
        if ((_DWORD)started)
          return started;
        if ((_DWORD)a2 == 12)
        {
          *(_BYTE *)(v5 + 17) = 1;
          if ((v6 & 1) == 0)
            return FigTTMLDocumentWriterStateStartElement(*(_QWORD *)(v5 + 8), a2);
        }
        else if (!v6)
        {
          return FigTTMLDocumentWriterStateStartElement(*(_QWORD *)(v5 + 8), a2);
        }
        *(_BYTE *)(v5 + 18) = 1;
        return FigTTMLDocumentWriterStateStartElement(*(_QWORD *)(v5 + 8), a2);
      }
      value_low = FigSignalErrorAt();
      if (!(_DWORD)value_low)
        goto LABEL_24;
      return value_low;
    default:
      goto LABEL_26;
  }
}

uint64_t figTTMLDocumentWriterForiTT_EndElement(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t started;
  uint64_t v4;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  uint64_t v7;
  const __CFString *v8;
  const __CFString *v9;
  const __CFString *v10;
  const void **v11;
  const void **v12;
  const void **v13;
  uint64_t v14;
  const __CFAllocator *allocator;
  _QWORD context[8];

  context[7] = *MEMORY[0x1E0C80C00];
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigTTMLDocumentWriterStateGetCurrentElementType(*(_QWORD *)(DerivedStorage + 8)) != 8
    || *(_BYTE *)(DerivedStorage + 18))
  {
    goto LABEL_26;
  }
  started = FigTTMLDocumentWriterStartElement(a1, 9);
  if (!(_DWORD)started)
  {
    v4 = 0;
    context[3] = CFSTR("top");
    context[4] = CFSTR("bottom");
    context[5] = CFSTR("right");
    context[6] = CFSTR("left");
    allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    while (1)
    {
      Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!Mutable)
      {
        v14 = FigSignalErrorAt();
        goto LABEL_21;
      }
      v6 = Mutable;
      v7 = FigTTMLDocumentWriterStartElement(a1, 10);
      if ((_DWORD)v7)
        goto LABEL_19;
      if (FigCFEqual())
      {
        v8 = CFSTR("top");
        v9 = CFSTR("0% 0%");
        v10 = CFSTR("100% 15%");
        v11 = (const void **)&kFigTTML_AttributeValue_tts_textAlign_center;
        v12 = (const void **)&kFigTTML_AttributeKey_tts_displayAlign;
        v13 = (const void **)&kFigTTML_AttributeValue_tts_displayAlign_before;
      }
      else if (FigCFEqual())
      {
        v8 = CFSTR("bottom");
        v9 = CFSTR("0% 85%");
        v10 = CFSTR("100% 15%");
        v11 = (const void **)&kFigTTML_AttributeValue_tts_textAlign_center;
        v12 = (const void **)&kFigTTML_AttributeKey_tts_displayAlign;
        v13 = (const void **)&kFigTTML_AttributeValue_tts_displayAlign_after;
      }
      else
      {
        if (FigCFEqual())
        {
          v8 = CFSTR("right");
          v9 = CFSTR("85% 0%");
        }
        else
        {
          if (!FigCFEqual())
            goto LABEL_17;
          v8 = CFSTR("left");
          v9 = CFSTR("15% 0%");
        }
        v10 = CFSTR("15% 100%");
        v11 = (const void **)&kFigTTML_AttributeValue_tts_textAlign_start;
        v12 = (const void **)&kFigTTML_AttributeKey_tts_writingMode;
        v13 = (const void **)&kFigTTML_AttributeValue_tts_writingMode_TopToBottomAndRightToLeft;
      }
      CFDictionaryAddValue(v6, CFSTR("http://www.w3.org/XML/1998/namespace id"), v8);
      CFDictionaryAddValue(v6, CFSTR("http://www.w3.org/ns/ttml#styling origin"), v9);
      CFDictionaryAddValue(v6, CFSTR("http://www.w3.org/ns/ttml#styling extent"), v10);
      CFDictionaryAddValue(v6, CFSTR("http://www.w3.org/ns/ttml#styling textAlign"), *v11);
      CFDictionaryAddValue(v6, *v12, *v13);
LABEL_17:
      context[0] = 0;
      context[1] = 0;
      context[2] = a1;
      CFDictionaryApplyFunction(v6, (CFDictionaryApplierFunction)writeAttributeIfNotWrittenYet, context);
      v14 = LODWORD(context[0]);
      if (!LODWORD(context[0]))
      {
        v7 = FigTTMLDocumentWriterEndElement(a1);
LABEL_19:
        v14 = v7;
      }
      CFRelease(v6);
LABEL_21:
      if ((_DWORD)v14)
        return v14;
      v4 += 8;
      if (v4 == 32)
      {
        started = FigTTMLDocumentWriterEndElement(a1);
        if (!(_DWORD)started)
        {
LABEL_26:
          started = FigTTMLDocumentWriterEndElement(*(_QWORD *)DerivedStorage);
          if (!(_DWORD)started)
            return FigTTMLDocumentWriterStateEndElement(*(_QWORD *)(DerivedStorage + 8));
        }
        return started;
      }
    }
  }
  return started;
}

uint64_t figTTMLDocumentWriterForiTT_AddCaptionData(uint64_t a1, uint64_t a2)
{
  uint64_t *DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return FigTTMLDocumentWriterAddCaptionData(*DerivedStorage, a2);
}

uint64_t figTTMLDocumentWriterForiTT_SetAttribute(uint64_t a1, const __CFString *a2, const __CFString *a3)
{
  uint64_t *DerivedStorage;
  const __CFDictionary *v7;
  const __CFDictionary *Attributes;
  uint64_t (*Value)(uint64_t, const __CFString *);
  uint64_t result;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402F294](&getAttributeValidatorDict_sOnce, initAttributeValidatorDict);
  v7 = (const __CFDictionary *)sAttributeValidatorDict;
  if (FigTTMLDocumentWriterStateGetCurrentElementType(DerivedStorage[1]) == 10)
  {
    Attributes = (const __CFDictionary *)FigTTMLDocumentWriterStateGetAttributes(DerivedStorage[1]);
    CFDictionaryGetValue(Attributes, CFSTR("http://www.w3.org/XML/1998/namespace id"));
    if (FigCFEqual())
    {
      if (FigCFEqual() && FigCFEqual())
        a3 = CFSTR("15% 0%");
    }
  }
  if (!CFDictionaryContainsKey(v7, a2))
  {
    result = CFStringHasPrefix(a2, CFSTR("xmlns:"));
    if (!(_DWORD)result)
      return result;
    goto LABEL_11;
  }
  Value = (uint64_t (*)(uint64_t, const __CFString *))CFDictionaryGetValue(v7, a2);
  if (!Value || (result = Value(a1, a3), (_DWORD)result))
  {
LABEL_11:
    result = FigTTMLDocumentWriterSetAttribute(*DerivedStorage, (uint64_t)a2, (uint64_t)a3);
    if (!(_DWORD)result)
    {
      FigTTMLDocumentWriterStateSetAttribute(DerivedStorage[1], a2, a3);
      return 0;
    }
  }
  return result;
}

uint64_t figTTMLDocumentWriterForiTT_Flush(uint64_t a1)
{
  uint64_t *DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return FigTTMLDocumentWriterFlush(*DerivedStorage);
}

uint64_t writeAttributeIfNotWrittenYet(uint64_t key, uint64_t a2, uint64_t a3)
{
  const void *v5;
  const __CFDictionary *v6;

  if (!*(_DWORD *)a3)
  {
    v5 = (const void *)key;
    v6 = *(const __CFDictionary **)(a3 + 8);
    if (!v6 || (key = CFDictionaryContainsKey(v6, v5), !(_DWORD)key))
    {
      key = FigTTMLDocumentWriterSetAttribute(*(_QWORD *)(a3 + 16), (uint64_t)v5, a2);
      if ((_DWORD)key)
        *(_DWORD *)a3 = key;
    }
  }
  return key;
}

void initAttributeValidatorDict()
{
  __CFDictionary *Mutable;
  __CFDictionary *v1;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
  v1 = Mutable;
  if (Mutable)
  {
    CFDictionaryAddValue(Mutable, CFSTR("begin"), 0);
    CFDictionaryAddValue(v1, CFSTR("dur"), 0);
    CFDictionaryAddValue(v1, CFSTR("end"), 0);
    CFDictionaryAddValue(v1, CFSTR("region"), 0);
    CFDictionaryAddValue(v1, CFSTR("timeContainer"), validateTimeContainer);
    CFDictionaryAddValue(v1, CFSTR("style"), 0);
    CFDictionaryAddValue(v1, CFSTR("use"), prohibited);
    CFDictionaryAddValue(v1, CFSTR("value"), prohibited);
    CFDictionaryAddValue(v1, CFSTR("http://www.w3.org/XML/1998/namespace id"), 0);
    CFDictionaryAddValue(v1, CFSTR("http://www.w3.org/XML/1998/namespace space"), 0);
    CFDictionaryAddValue(v1, CFSTR("http://www.w3.org/XML/1998/namespace lang"), 0);
    CFDictionaryAddValue(v1, CFSTR("http://www.w3.org/XML/1998/namespace base"), 0);
    CFDictionaryAddValue(v1, CFSTR("http://www.w3.org/ns/ttml#parameter clockMode"), prohibited);
    CFDictionaryAddValue(v1, CFSTR("http://www.w3.org/ns/ttml#parameter dropMode"), 0);
    CFDictionaryAddValue(v1, CFSTR("http://www.w3.org/ns/ttml#parameter frameRate"), 0);
    CFDictionaryAddValue(v1, CFSTR("http://www.w3.org/ns/ttml#parameter frameRateMultiplier"), 0);
    CFDictionaryAddValue(v1, CFSTR("http://www.w3.org/ns/ttml#parameter markerMode"), prohibited);
    CFDictionaryAddValue(v1, CFSTR("http://www.w3.org/ns/ttml#parameter pixelAspectRatio"), prohibited);
    CFDictionaryAddValue(v1, CFSTR("http://www.w3.org/ns/ttml#parameter profile"), prohibited);
    CFDictionaryAddValue(v1, CFSTR("http://www.w3.org/ns/ttml#parameter subFrameRate"), prohibited);
    CFDictionaryAddValue(v1, CFSTR("http://www.w3.org/ns/ttml#parameter tickRate"), prohibited);
    CFDictionaryAddValue(v1, CFSTR("http://www.w3.org/ns/ttml#parameter timeBase"), validateTimeBase);
    CFDictionaryAddValue(v1, CFSTR("http://www.w3.org/ns/ttml#parameter cellResolution"), 0);
    CFDictionaryAddValue(v1, CFSTR("http://www.w3.org/ns/ttml/profile/imsc1#parameter aspectRatio"), 0);
    CFDictionaryAddValue(v1, CFSTR("http://www.w3.org/ns/ttml#styling backgroundColor"), validateBackgroundColor);
    CFDictionaryAddValue(v1, CFSTR("http://www.w3.org/ns/ttml#styling color"), 0);
    CFDictionaryAddValue(v1, CFSTR("http://www.w3.org/ns/ttml#styling direction"), validateDirection);
    CFDictionaryAddValue(v1, CFSTR("http://www.w3.org/ns/ttml#styling display"), validateDisplay);
    CFDictionaryAddValue(v1, CFSTR("http://www.w3.org/ns/ttml#styling displayAlign"), 0);
    CFDictionaryAddValue(v1, CFSTR("http://www.w3.org/ns/ttml#styling extent"), 0);
    CFDictionaryAddValue(v1, CFSTR("http://www.w3.org/ns/ttml#styling fontFamily"), 0);
    CFDictionaryAddValue(v1, CFSTR("http://www.w3.org/ns/ttml#styling fontSize"), validateFontSize);
    CFDictionaryAddValue(v1, CFSTR("http://www.w3.org/ns/ttml#styling fontStyle"), validateFontStyle);
    CFDictionaryAddValue(v1, CFSTR("http://www.w3.org/ns/ttml#styling fontWeight"), 0);
    CFDictionaryAddValue(v1, CFSTR("http://www.w3.org/ns/ttml#styling lineHeight"), prohibited);
    CFDictionaryAddValue(v1, CFSTR("http://www.w3.org/ns/ttml#styling opacity"), prohibited);
    CFDictionaryAddValue(v1, CFSTR("http://www.w3.org/ns/ttml#styling origin"), 0);
    CFDictionaryAddValue(v1, CFSTR("http://www.w3.org/ns/ttml#styling overflow"), validateOverflow);
    CFDictionaryAddValue(v1, CFSTR("http://www.w3.org/ns/ttml#styling padding"), prohibited);
    CFDictionaryAddValue(v1, CFSTR("http://www.w3.org/ns/ttml#styling showBackground"), validateShowBackground);
    CFDictionaryAddValue(v1, CFSTR("http://www.w3.org/ns/ttml#styling textAlign"), 0);
    CFDictionaryAddValue(v1, CFSTR("http://www.w3.org/ns/ttml#styling textDecoration"), 0);
    CFDictionaryAddValue(v1, CFSTR("http://www.w3.org/ns/ttml#styling textOutline"), prohibited);
    CFDictionaryAddValue(v1, CFSTR("http://www.w3.org/ns/ttml#styling unicodeBidi"), validateUnicodeBidi);
    CFDictionaryAddValue(v1, CFSTR("http://www.w3.org/ns/ttml#styling visibility"), validateVisibility);
    CFDictionaryAddValue(v1, CFSTR("http://www.w3.org/ns/ttml#styling wrapOption"), 0);
    CFDictionaryAddValue(v1, CFSTR("http://www.w3.org/ns/ttml#styling writingMode"), 0);
    CFDictionaryAddValue(v1, CFSTR("http://www.w3.org/ns/ttml#styling zIndex"), prohibited);
    CFDictionaryAddValue(v1, CFSTR("http://namespace.itunes.apple.com/itt/ttml-extension#ruby kind"), 0);
    CFDictionaryAddValue(v1, CFSTR("http://namespace.itunes.apple.com/itt/ttml-extension#ruby position"), 0);
    CFDictionaryAddValue(v1, CFSTR("http://namespace.itunes.apple.com/itt/ttml-extension#ruby align"), 0);
    CFDictionaryAddValue(v1, CFSTR("http://namespace.itunes.apple.com/itt/ttml-extension#vertical combine"), validateTextCombine);
    CFDictionaryAddValue(v1, CFSTR("http://www.w3.org/ns/ttml/profile/imsc1#styling forcedDisplay"), 0);
    CFDictionaryAddValue(v1, CFSTR("urn:ebu:tt:style linePadding"), prohibited);
    CFDictionaryAddValue(v1, CFSTR("urn:ebu:tt:style multiRowAlign"), prohibited);
  }
  else
  {
    FigSignalErrorAt();
  }
  sAttributeValidatorDict = (uint64_t)v1;
}

uint64_t validateTimeContainer()
{
  return FigCFEqual();
}

uint64_t prohibited()
{
  return 0;
}

uint64_t validateTimeBase()
{
  return FigCFEqual();
}

BOOL validateBackgroundColor()
{
  return FigCFEqual() != 0;
}

uint64_t validateDirection()
{
  return FigCFEqual();
}

uint64_t validateDisplay()
{
  return FigCFEqual();
}

BOOL validateFontSize()
{
  return FigCFEqual() || FigCFEqual() != 0;
}

BOOL validateFontStyle()
{
  return FigCFEqual() || FigCFEqual() != 0;
}

BOOL validateOverflow()
{
  return FigCFEqual() || FigCFEqual() != 0;
}

uint64_t validateShowBackground()
{
  return FigCFEqual();
}

uint64_t validateUnicodeBidi()
{
  return FigCFEqual();
}

uint64_t validateVisibility()
{
  return FigCFEqual();
}

BOOL validateTextCombine()
{
  return FigCFEqual() || FigCFEqual() != 0;
}

uint64_t FigSampleBufferConsumerOPTSAutoOrderCreate(const __CFAllocator *a1, const void *a2, const char *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t DerivedStorage;
  CFTypeRef v10;
  CFAllocatorRef *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const CMBufferCallbacks *CallbacksForSampleBuffersSortedByOutputPTS;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  v8 = 4294954535;
  if (a2)
  {
    if (a4)
    {
      FigSampleBufferConsumerGetClassID();
      v8 = CMDerivedObjectCreate();
      if (!(_DWORD)v8)
      {
        DerivedStorage = CMBaseObjectGetDerivedStorage();
        v10 = CFRetain(a2);
        v11 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
        *(_QWORD *)DerivedStorage = v10;
        if (a3)
          v12 = a3;
        else
          v12 = "-";
        *(_QWORD *)(DerivedStorage + 48) = CFStringCreateWithCString(*v11, v12, 0x8000100u);
        v13 = FigSimpleMutexCreate();
        *(_QWORD *)(DerivedStorage + 16) = v13;
        if (v13)
        {
          v14 = MEMORY[0x1E0CA2E18];
          *(_OWORD *)(DerivedStorage + 24) = *MEMORY[0x1E0CA2E18];
          *(_QWORD *)(DerivedStorage + 40) = *(_QWORD *)(v14 + 16);
          CallbacksForSampleBuffersSortedByOutputPTS = CMBufferQueueGetCallbacksForSampleBuffersSortedByOutputPTS();
          v8 = CMBufferQueueCreate(a1, 0, CallbacksForSampleBuffersSortedByOutputPTS, (CMBufferQueueRef *)(DerivedStorage + 8));
          if (!(_DWORD)v8)
            *a4 = 0;
        }
        else
        {
          return 4294954510;
        }
      }
    }
  }
  return v8;
}

uint64_t sbcAutoOrder_finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v1 = *(const void **)(DerivedStorage + 48);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 8);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  result = FigSimpleMutexDestroy();
  *(_QWORD *)(DerivedStorage + 16) = 0;
  return result;
}

__CFString *sbcAutoOrder_copyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigSampleBufferConsumerOPTSAutoOrder %p>"), a1);
  return Mutable;
}

uint64_t sbcAutoOrder_setProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  v5 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v6)
    return v6(v5, a2, a3);
  else
    return 4294954514;
}

uint64_t sbcAutoOrder_SendSampleBuffer(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage;
  unsigned int v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t updated;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  const __CFAllocator *v13;
  const CMBufferCallbacks *CallbacksForSampleBuffersSortedByOutputPTS;
  uint64_t v15;
  const void *v16;
  CFTypeRef v17;
  CMTime type;
  CMTime lhs;
  CMTime time2;
  _BYTE time1[32];
  CFTypeRef cf;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
  if (!a2)
    goto LABEL_20;
  FigEndpointStreamAudioEngineSbufTracerDebugPrint(a2);
  CMSampleBufferGetOutputPresentationTimeStamp((CMTime *)time1, (CMSampleBufferRef)a2);
  v24 = *(_QWORD *)time1;
  v5 = *(_DWORD *)&time1[12];
  v25 = *(_DWORD *)&time1[8];
  v6 = *(_QWORD *)&time1[16];
  CMSampleBufferGetOutputDuration((CMTime *)time1, (CMSampleBufferRef)a2);
  *(_QWORD *)time1 = v24;
  *(_QWORD *)&time1[8] = __PAIR64__(v5, v25);
  *(_QWORD *)&time1[16] = v6;
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
  if (!CMTimeCompare((CMTime *)time1, &time2))
  {
    if (dword_1EE2A2888)
    {
      LODWORD(lhs.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    sbcAutoOrder_SendAllPendingSampleBuffer();
    goto LABEL_20;
  }
  if (CMGetAttachment(a2, CFSTR("SBUFForAutoOrder"), 0) == (CFTypeRef)*MEMORY[0x1E0C9AE50])
  {
    if ((v5 & 1) == 0
      || (*(_BYTE *)(DerivedStorage + 36) & 1) != 0
      && (*(_QWORD *)time1 = v24,
          *(_QWORD *)&time1[8] = __PAIR64__(v5, v25),
          *(_QWORD *)&time1[16] = v6,
          time2 = *(CMTime *)(DerivedStorage + 24),
          CMTimeCompare((CMTime *)time1, &time2) <= 0))
    {
      updated = sbcAutoOrder_SendSbufAndUpdateLastOPTS(a1, (opaqueCMSampleBuffer *)a2);
LABEL_13:
      v10 = updated;
      goto LABEL_33;
    }
    if (dword_1EE2A2888)
    {
      LODWORD(lhs.value) = 0;
      v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMBufferQueueEnqueue(*(CMBufferQueueRef *)(DerivedStorage + 8), a2);
    CMRemoveAttachment(a2, CFSTR("SBUFForAutoOrder"));
LABEL_20:
    v10 = 0;
    goto LABEL_33;
  }
  if ((v5 & 1) != 0 && (*(_BYTE *)(DerivedStorage + 36) & 1) != 0)
  {
    *(_QWORD *)time1 = v24;
    *(_QWORD *)&time1[8] = __PAIR64__(v5, v25);
    *(_QWORD *)&time1[16] = v6;
    time2 = *(CMTime *)(DerivedStorage + 24);
    if (CMTimeCompare((CMTime *)time1, &time2))
    {
      if (dword_1EE2A2888)
      {
        LODWORD(lhs.value) = 0;
        v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      updated = sbcAutoOrder_SendAllPendingSampleBuffer();
      if ((_DWORD)updated)
        goto LABEL_13;
    }
  }
  updated = sbcAutoOrder_SendSbufAndUpdateLastOPTS(a1, (opaqueCMSampleBuffer *)a2);
  if ((_DWORD)updated)
    goto LABEL_13;
  *(_OWORD *)&type.value = *(_OWORD *)(DerivedStorage + 24);
  type.epoch = *(_QWORD *)(DerivedStorage + 40);
  v12 = CMBaseObjectGetDerivedStorage();
  cf = 0;
  memset(time1, 0, sizeof(time1));
  if (CMBufferQueueIsEmpty(*(CMBufferQueueRef *)(v12 + 8)))
  {
LABEL_30:
    v10 = 0;
    goto LABEL_31;
  }
  *(_QWORD *)time1 = *(_QWORD *)v12;
  CMTimeMake(&time2, 10, 1000);
  lhs = type;
  CMTimeAdd((CMTime *)&time1[8], &lhs, &time2);
  cf = 0;
  v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  CallbacksForSampleBuffersSortedByOutputPTS = CMBufferQueueGetCallbacksForSampleBuffersSortedByOutputPTS();
  v15 = CMBufferQueueCreate(v13, 0, CallbacksForSampleBuffersSortedByOutputPTS, (CMBufferQueueRef *)&cf);
  if (!(_DWORD)v15)
  {
    v15 = CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(v12 + 8), (OSStatus (__cdecl *)(CMBufferRef, void *))sbcAutoOrder_SendStashedBufferIfLesserOrEqualToOPTS, time1);
    if (!(_DWORD)v15)
    {
      v16 = *(const void **)(v12 + 8);
      v17 = cf;
      *(_QWORD *)(v12 + 8) = cf;
      if (v17)
        CFRetain(v17);
      if (v16)
        CFRelease(v16);
      goto LABEL_30;
    }
  }
  v10 = v15;
LABEL_31:
  if (cf)
    CFRelease(cf);
LABEL_33:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
  return v10;
}

uint64_t sbcAutoOrder_IsQueueAtOrAboveHighWater()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v1)
    return v1(v0);
  else
    return 0;
}

uint64_t sbcAutoOrder_IsQueueBelowLowWater()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v1)
    return v1(v0);
  else
    return 0;
}

uint64_t sbcAutoOrder_InstallLowWaterTrigger(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v8)
    return v8(v7, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t sbcAutoOrder_RemoveLowWaterTrigger(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v4)
    return v4(v3, a2);
  else
    return 4294954514;
}

uint64_t sbcAutoOrder_GetPendingSampleBufferCount()
{
  uint64_t DerivedStorage;
  CMItemCount BufferCount;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
  BufferCount = CMBufferQueueGetBufferCount(*(CMBufferQueueRef *)(DerivedStorage + 8));
  v2 = *(_QWORD *)DerivedStorage;
  v3 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v3)
    v4 = v3(v2);
  else
    v4 = 0;
  v5 = v4 + BufferCount;
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
  return v5;
}

uint64_t sbcAutoOrder_PostNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (v8)
    return v8(v7, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t sbcAutoOrder_Flush()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(_QWORD *)DerivedStorage;
  v2 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  if (v2)
    v2(v1);
  sbcAutoOrder_SendAllPendingSampleBuffer();
  CMBufferQueueReset(*(CMBufferQueueRef *)(DerivedStorage + 8));
  v3 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)(DerivedStorage + 24) = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(DerivedStorage + 40) = *(_QWORD *)(v3 + 16);
  return 0;
}

uint64_t sbcAutoOrder_SendAllPendingSampleBuffer()
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t refcon;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CMBufferQueueIsEmpty(*(CMBufferQueueRef *)(DerivedStorage + 8)))
  {
    refcon = *(_QWORD *)DerivedStorage;
    v3 = *MEMORY[0x1E0CA2E30];
    v4 = *(_QWORD *)(MEMORY[0x1E0CA2E30] + 16);
    v5 = 0;
    result = CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(DerivedStorage + 8), (OSStatus (__cdecl *)(CMBufferRef, void *))sbcAutoOrder_SendStashedBufferIfLesserOrEqualToOPTS, &refcon);
    if ((_DWORD)result)
      return result;
    CMBufferQueueReset(*(CMBufferQueueRef *)(DerivedStorage + 8));
  }
  return 0;
}

uint64_t sbcAutoOrder_SendSbufAndUpdateLastOPTS(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  CMTime *DerivedStorage;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  CMTimeFlags v6;
  CMTimeEpoch v7;
  CMTimeValue v8;
  uint64_t (*v9)(CMTimeValue, opaqueCMSampleBuffer *);
  uint64_t v10;
  CMTime v12;
  CMTime lhs;
  CMTime v14;
  CMTimeValue v15;
  CMTimeScale v16;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (CMTime *)CMBaseObjectGetDerivedStorage();
  CMSampleBufferGetOutputPresentationTimeStamp(&v14, a2);
  value = v14.value;
  flags = v14.flags;
  timescale = v14.timescale;
  epoch = v14.epoch;
  CMSampleBufferGetOutputDuration(&v14, a2);
  v15 = v14.value;
  v6 = v14.flags;
  v16 = v14.timescale;
  v7 = v14.epoch;
  v8 = DerivedStorage->value;
  v9 = *(uint64_t (**)(CMTimeValue, opaqueCMSampleBuffer *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v9)
    return 4294954514;
  v10 = v9(v8, a2);
  if (!(_DWORD)v10 && (flags & 1) != 0 && (v6 & 1) != 0)
  {
    v12.epoch = v7;
    lhs.value = value;
    lhs.timescale = timescale;
    lhs.flags = flags;
    lhs.epoch = epoch;
    v12.value = v15;
    v12.timescale = v16;
    v12.flags = v6;
    CMTimeAdd(&v14, &lhs, &v12);
    DerivedStorage[1] = v14;
  }
  return v10;
}

uint64_t sbcAutoOrder_SendStashedBufferIfLesserOrEqualToOPTS(opaqueCMSampleBuffer *a1, uint64_t *a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t result;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, opaqueCMSampleBuffer *);
  os_log_type_t type;
  int v9;
  CMTime time1;
  CMTime v11;
  CMTime time2;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  CMSampleBufferGetOutputPresentationTimeStamp(&v11, a1);
  if ((v11.flags & 1) == 0
    || (*((_BYTE *)a2 + 20) & 1) != 0
    && (CMSampleBufferGetOutputPresentationTimeStamp(&time1, a1),
        time2 = *(CMTime *)(a2 + 1),
        CMTimeCompare(&time1, &time2) <= 0))
  {
    if (dword_1EE2A2888)
    {
      v9 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v6 = *a2;
    v7 = *(uint64_t (**)(uint64_t, opaqueCMSampleBuffer *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v7)
      return v7(v6, a1);
    else
      return 4294954514;
  }
  else
  {
    result = a2[4];
    if (result)
    {
      CMBufferQueueEnqueue((CMBufferQueueRef)result, a1);
      return 0;
    }
  }
  return result;
}

uint64_t FigCDSIntervalCreate(_QWORD *a1)
{
  uint64_t v2;
  uint64_t DerivedStorage;
  uint64_t v4;

  *a1 = 0;
  MEMORY[0x19402F294](&FigCDSIntervalGetClassID_sRegisterFigCDSIntervalBaseTypeOnce, RegisterFigCDSIntervalBaseType);
  v2 = CMDerivedObjectCreate();
  if (!(_DWORD)v2)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(double *)DerivedStorage = FigBytePumpGetFigBaseObject(DerivedStorage);
    *(_QWORD *)(DerivedStorage + 8) = v4;
    *a1 = 0;
  }
  return v2;
}

uint64_t FigCDSParentIntervalCreate(_QWORD *a1)
{
  const __CFAllocator *v2;
  uint64_t v3;
  _QWORD *DerivedStorage;
  CFMutableDictionaryRef Mutable;
  uint64_t v6;

  *a1 = 0;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MEMORY[0x19402F294](&FigCDSParentIntervalGetClassID_sRegisterFigCDSParentIntervalBaseTypeOnce, RegisterFigCDSParentIntervalBaseType);
  v3 = CMDerivedObjectCreate();
  if ((_DWORD)v3)
    return v3;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[1] = 0;
  DerivedStorage[2] = 0;
  DerivedStorage[3] = 0x4018000000000000;
  Mutable = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  DerivedStorage[2] = Mutable;
  if (!Mutable)
    return FigSignalErrorAt();
  FigCDSIntervalCreate(DerivedStorage);
  v6 = 0;
  *a1 = 0;
  return v6;
}

__CFString *FigCDSIntervalCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCDSInterval: <%p>"), a1);
  return Mutable;
}

__CFString *FigCDSInterval_FigCDSIntervalProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCDSInterval <FigCDSIntervalProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCDSInterval_FigCDSIntervalProtocol_GetRange(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)CMBaseObjectGetDerivedStorage();
  return 0;
}

uint64_t FigCDSInterval_FigCDSIntervalProtocol_SetRange(double a1, double a2)
{
  double *DerivedStorage;

  DerivedStorage = (double *)CMBaseObjectGetDerivedStorage();
  *DerivedStorage = a1;
  DerivedStorage[1] = a2;
  return 0;
}

uint64_t RegisterFigCDSIntervalBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFTypeRef FigCDSIntervalBaseCopyFormattingDesc()
{
  return CFRetain(CFSTR("[FigCDSInterval]"));
}

void FigCDSParentIntervalFinalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
  v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
    CFRelease(v1);
}

__CFString *FigCDSParentIntervalCopyDebugDescription()
{
  uint64_t DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCDSParentInterval: <%p>"), DerivedStorage);
  return Mutable;
}

__CFString *FigCDSParentInterval_FigCDSIntervalProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCDSParentInterval <FigCDSIntervalProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCDSParentInterval_FigCDSIntervalProtocol_GetRange(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSIntervalProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v5 = *(_QWORD *)(ProtocolVTable + 16);
    if (v5)
    {
      v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
      if (v6)
        v6(v3, a2);
    }
  }
  return 0;
}

uint64_t FigCDSParentInterval_FigCDSIntervalProtocol_SetRange(double a1, double a2)
{
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  void (*v7)(uint64_t, double, double);

  v4 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSIntervalProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v6 = *(_QWORD *)(ProtocolVTable + 16);
    if (v6)
    {
      v7 = *(void (**)(uint64_t, double, double))(v6 + 16);
      if (v7)
        v7(v4, a1, a2);
    }
  }
  return 0;
}

__CFString *FigCDSParentInterval_FigCDSParentIntervalProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCDSParentInterval <FigCDSParentIntervalProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCDSParentInterval_FigCDSParentIntervalProtocol_AddChildInterval(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  double v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  unsigned int (*v7)(const void *, double *);
  double v8;
  uint64_t v9;
  uint64_t v10;
  const __CFAllocator *v11;
  uint64_t v12;
  const CFArrayCallBacks *v13;
  CFStringRef v14;
  void *Value;
  CFMutableArrayRef Mutable;
  double FigBaseObject;
  double v19;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigBaseObject = FigBytePumpGetFigBaseObject(DerivedStorage);
  v19 = v4;
  FigCDSIntervalProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable
    || (v6 = *(_QWORD *)(ProtocolVTable + 16)) == 0
    || (v7 = *(unsigned int (**)(const void *, double *))(v6 + 8)) == 0
    || v7(a2, &FigBaseObject))
  {
    FigSignalErrorAt();
    return 0;
  }
  v8 = *(double *)(DerivedStorage + 24);
  v9 = (uint64_t)(FigBaseObject / v8);
  v10 = (uint64_t)((FigBaseObject + v19) / v8);
  if (v9 <= v10)
  {
    v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v12 = v10 + 1;
    v13 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    do
    {
      v14 = CFStringCreateWithFormat(v11, 0, CFSTR("%ld"), v9);
      Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 16), v14);
      if (!Value)
      {
        Mutable = CFArrayCreateMutable(v11, 0, v13);
        if (!Mutable)
        {
          FigSignalErrorAt();
          if (v14)
            CFRelease(v14);
          return 0;
        }
        Value = Mutable;
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 16), v14, Mutable);
        CFRelease(Value);
      }
      CFArrayAppendValue((CFMutableArrayRef)Value, a2);
      if (v14)
        CFRelease(v14);
      ++v9;
    }
    while (v12 != v9);
  }
  return 0;
}

uint64_t FigCDSParentInterval_FigCDSParentIntervalProtocol_RemoveChildInterval(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  double v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  unsigned int (*v7)(const void *, double *);
  double v8;
  uint64_t v9;
  uint64_t v10;
  const __CFAllocator *v11;
  uint64_t v12;
  CFStringRef v13;
  const __CFArray *Value;
  const __CFArray *v15;
  CFIndex FirstIndexOfValue;
  double FigBaseObject;
  double v19;
  CFRange v20;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigBaseObject = FigBytePumpGetFigBaseObject(DerivedStorage);
  v19 = v4;
  FigCDSIntervalProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable
    && (v6 = *(_QWORD *)(ProtocolVTable + 16)) != 0
    && (v7 = *(unsigned int (**)(const void *, double *))(v6 + 8)) != 0
    && !v7(a2, &FigBaseObject))
  {
    v8 = *(double *)(DerivedStorage + 24);
    v9 = (uint64_t)(FigBaseObject / v8);
    v10 = (uint64_t)((FigBaseObject + v19) / v8);
    if (v9 <= v10)
    {
      v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v12 = v10 + 1;
      while (1)
      {
        v13 = CFStringCreateWithFormat(v11, 0, CFSTR("%ld"), v9);
        Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 16), v13);
        if (Value)
        {
          v15 = Value;
          v20.length = CFArrayGetCount(Value);
          v20.location = 0;
          FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v15, v20, a2);
          if ((FirstIndexOfValue & 0x8000000000000000) == 0)
            CFArrayRemoveValueAtIndex(v15, FirstIndexOfValue);
          if (!CFArrayGetCount(v15))
            break;
        }
        if (v13)
          goto LABEL_12;
LABEL_13:
        if (v12 == ++v9)
          return 0;
      }
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 16), v13);
      if (!v13)
        goto LABEL_13;
LABEL_12:
      CFRelease(v13);
      goto LABEL_13;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  return 0;
}

uint64_t FigCDSParentInterval_FigCDSParentIntervalProtocol_RemoveAllChildIntervals()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(DerivedStorage + 16));
  return 0;
}

uint64_t FigCDSParentInterval_FigCDSParentIntervalProtocol_GetChildIntervalsAt(double a1, double a2, uint64_t a3, __CFArray **a4)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v8;
  __CFArray *Mutable;
  const __CFArray *v10;
  const __CFArray *v11;
  const __CFArray *v12;
  const __CFArray *v13;
  CFIndex Count;
  double v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  CFStringRef v20;
  const __CFArray *Value;
  const __CFArray *v22;
  CFIndex v23;
  int v24;
  const void *ValueAtIndex;
  CFIndex LastIndexOfValue;
  _QWORD context[5];
  CFRange v29;
  CFRange v30;
  CFRange v31;
  CFRange v32;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (a2 >= 0.0)
  {
    v10 = copySubIntervalsAt(a1);
    if (v10)
    {
      v11 = v10;
      v30.length = CFArrayGetCount(v10);
      v30.location = 0;
      CFArrayAppendArray(Mutable, v11, v30);
      CFRelease(v11);
    }
    v12 = copySubIntervalsAt(a1 + a2);
    if (v12)
    {
      v13 = v12;
      v31.length = CFArrayGetCount(v12);
      v31.location = 0;
      CFArrayAppendArray(Mutable, v13, v31);
      CFRelease(v13);
    }
    Count = CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 16));
    v15 = *(double *)(DerivedStorage + 24);
    v16 = (uint64_t)(a1 / v15);
    v17 = (a1 + a2) / v15;
    v18 = (uint64_t)v17;
    if ((uint64_t)v17 - v16 + 1 >= Count)
    {
      context[1] = (uint64_t)v17;
      context[2] = Mutable;
      context[0] = v16;
      *(double *)&context[3] = a1;
      *(double *)&context[4] = a2;
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(DerivedStorage + 16), (CFDictionaryApplierFunction)cdsi_getIntervalsByRange, context);
    }
    else if (v18 - 1 > v16)
    {
      v19 = v16 + 1;
      do
      {
        v20 = CFStringCreateWithFormat(v8, 0, CFSTR("%ld"), v19);
        Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 16), v20);
        if (Value)
        {
          v22 = Value;
          v32.length = CFArrayGetCount(Value);
          v32.location = 0;
          CFArrayAppendArray(Mutable, v22, v32);
        }
        if (v20)
          CFRelease(v20);
        ++v19;
      }
      while (v18 != v19);
    }
    do
    {
      if (CFArrayGetCount(Mutable) < 1)
        break;
      v23 = 0;
      v24 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(Mutable, v23);
        v29.length = CFArrayGetCount(Mutable);
        v29.location = 0;
        LastIndexOfValue = CFArrayGetLastIndexOfValue(Mutable, v29, ValueAtIndex);
        if (LastIndexOfValue > v23)
        {
          CFArrayRemoveValueAtIndex(Mutable, LastIndexOfValue);
          v24 = 1;
        }
        ++v23;
      }
      while (CFArrayGetCount(Mutable) > v23);
    }
    while (v24);
  }
  *a4 = Mutable;
  return 0;
}

CFMutableArrayRef copySubIntervalsAt(double a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  CFMutableArrayRef Mutable;
  CFStringRef v5;
  const __CFArray *Value;
  const __CFArray *v7;
  _QWORD context[2];
  CFRange v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v5 = CFStringCreateWithFormat(v3, 0, CFSTR("%ld"), (uint64_t)(a1 / *(double *)(DerivedStorage + 24)));
  Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 16), v5);
  if (Value)
  {
    v7 = Value;
    *(double *)context = a1;
    context[1] = Mutable;
    v10.length = CFArrayGetCount(Value);
    v10.location = 0;
    CFArrayApplyFunction(v7, v10, (CFArrayApplierFunction)findAndSaveCoveringIntervalsApplier, context);
  }
  else if (Mutable)
  {
    CFRelease(Mutable);
    Mutable = 0;
  }
  if (v5)
    CFRelease(v5);
  return Mutable;
}

void cdsi_getIntervalsByRange(const __CFString *a1, const __CFArray *a2, uint64_t a3)
{
  SInt32 IntValue;
  __int128 v6;
  uint64_t v7;
  CFRange v8;

  IntValue = CFStringGetIntValue(a1);
  if (*(_QWORD *)a3 <= IntValue && a2 && *(_QWORD *)(a3 + 8) >= IntValue)
  {
    v6 = *(_OWORD *)(a3 + 24);
    v7 = *(_QWORD *)(a3 + 16);
    v8.length = CFArrayGetCount(a2);
    v8.location = 0;
    CFArrayApplyFunction(a2, v8, (CFArrayApplierFunction)findAndSaveOverlappingIntervalsApplier, &v6);
  }
}

void findAndSaveCoveringIntervalsApplier(const void *a1, uint64_t a2)
{
  double v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  unsigned int (*v7)(const void *, double *);
  double FigBaseObject;
  double v9;

  FigBaseObject = FigBytePumpGetFigBaseObject(a1);
  v9 = v4;
  FigCDSIntervalProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable
    && (v6 = *(_QWORD *)(ProtocolVTable + 16)) != 0
    && (v7 = *(unsigned int (**)(const void *, double *))(v6 + 8)) != 0
    && !v7(a1, &FigBaseObject))
  {
    if (FigBaseObject <= *(double *)a2 && *(double *)a2 <= FigBaseObject + v9)
      CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 8), a1);
  }
  else
  {
    FigSignalErrorAt();
  }
}

void findAndSaveOverlappingIntervalsApplier(const void *a1, uint64_t a2)
{
  double v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  unsigned int (*v7)(const void *, double *);
  double v8;
  double v9;
  BOOL v11;
  double v12;
  _BOOL4 v13;
  _BOOL4 v14;
  BOOL v15;
  double FigBaseObject;
  double v17;

  FigBaseObject = FigBytePumpGetFigBaseObject(a1);
  v17 = v4;
  FigCDSIntervalProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable
    && (v6 = *(_QWORD *)(ProtocolVTable + 16)) != 0
    && (v7 = *(unsigned int (**)(const void *, double *))(v6 + 8)) != 0
    && !v7(a1, &FigBaseObject))
  {
    v8 = FigBaseObject + v17;
    v9 = *(double *)a2;
    if (FigBaseObject <= *(double *)a2 && v9 <= v8)
      goto LABEL_21;
    v11 = v9 > v8;
    v12 = v9 + *(double *)(a2 + 8);
    v13 = v9 > FigBaseObject;
    v14 = FigBaseObject > v12;
    if (FigBaseObject > v12)
      v13 = 1;
    if (v12 > v8)
      v14 = 1;
    if (v8 > v12)
      v11 = 1;
    v15 = !v14 || !v13;
    if (v15 || !v11)
LABEL_21:
      CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 16), a1);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t RegisterFigCDSParentIntervalBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFTypeRef FigCDSParentIntervalBaseCopyFormattingDesc()
{
  return CFRetain(CFSTR("[FigCDSParentInterval]"));
}

uint64_t FigStreamPlaylistParserCopySerializedRepresentationForMediaGroupAsXPCObject(uint64_t a1, const __CFDictionary *a2)
{
  const void *v2;
  uint64_t v3;

  v2 = (const void *)FigStreamPlaylistParserCopySerializedRepresentationForMediaGroup(a1, a2);
  v3 = _CFXPCCreateXPCObjectFromCFObject();
  if (v2)
    CFRelease(v2);
  return v3;
}

uint64_t FigStreamPlaylistParserCopySerializedRepresentationForMediaGroup(uint64_t a1, const __CFDictionary *a2)
{
  const __CFAllocator *AllocatorForMedia;
  _QWORD v6[2];

  if (FigCFDictionaryGetCount() < 1)
    return 0;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  v6[0] = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
  if (!v6[0])
  {
    FigSignalErrorAt();
    return 0;
  }
  v6[1] = a1;
  CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)streamPlaylistParser_copySerializedRepresentationForMediaGroupApplier, v6);
  return v6[0];
}

uint64_t FigStreamPlaylistParserCreateMediaGroupFromXPCDictionary(uint64_t a1, _QWORD *a2, __CFDictionary **a3)
{
  const __CFArray *v5;
  const __CFArray *v6;
  uint64_t MediaGroup;

  v5 = (const __CFArray *)_CFXPCCreateCFObjectFromXPCObject();
  if (!v5)
    return FigSignalErrorAt();
  v6 = v5;
  MediaGroup = FigStreamPlaylistParserCreateMediaGroup(v5, a2, a3);
  CFRelease(v6);
  return MediaGroup;
}

uint64_t FigStreamPlaylistParserCreateMediaGroup(const __CFArray *a1, _QWORD *a2, __CFDictionary **a3)
{
  CFIndex Count;
  const __CFAllocator *AllocatorForMedia;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v9;
  CFIndex v10;
  CFIndex v11;
  CFIndex v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v17;
  CFTypeRef v18;
  const void *Value;
  const void *v20;
  const void *v21;
  _QWORD *v23;
  __CFDictionary **v24;

  if (!a1)
    return 0;
  Count = CFArrayGetCount(a1);
  if (!a3 || Count < 1)
    return 0;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v9 = Mutable;
    v10 = CFArrayGetCount(a1);
    if (v10 < 1)
    {
      if (!a2)
      {
LABEL_25:
        *a3 = v9;
        return 0;
      }
      v13 = 0;
    }
    else
    {
      v11 = v10;
      v23 = a2;
      v24 = a3;
      v12 = 0;
      v13 = 0;
      v14 = (const void *)*MEMORY[0x1E0CA50B8];
      v15 = (const void *)*MEMORY[0x1E0CA4FA0];
      do
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v12);
        v17 = ValueAtIndex;
        if (ValueAtIndex)
          v18 = CFRetain(ValueAtIndex);
        else
          v18 = 0;
        Value = CFDictionaryGetValue(v17, v14);
        v20 = Value;
        if (Value)
        {
          CFRetain(Value);
          CFDictionarySetValue(v9, v20, v18);
        }
        if (!v13)
        {
          v21 = CFDictionaryGetValue(v17, v15);
          v13 = v21;
          if (v21)
            CFRetain(v21);
        }
        if (v20)
          CFRelease(v20);
        if (v18)
          CFRelease(v18);
        ++v12;
      }
      while (v11 != v12);
      a2 = v23;
      if (!v23)
      {
        *v24 = v9;
        if (v13)
          CFRelease(v13);
        return 0;
      }
      a3 = v24;
    }
    *a2 = v13;
    goto LABEL_25;
  }
  return FigSignalErrorAt();
}

uint64_t FigStreamPlaylistParserSerializeDateRangeSpecifiers(uint64_t a1, __CFArray **a2)
{
  const __CFArray *DateRangeSpecifiers;

  DateRangeSpecifiers = (const __CFArray *)FigMediaPlaylistGetDateRangeSpecifiers(a1);
  return streamPlaylistParser_serializeTaggedRangeEntries(DateRangeSpecifiers, a2);
}

uint64_t streamPlaylistParser_serializeTaggedRangeEntries(const __CFArray *a1, __CFArray **a2)
{
  const __CFAllocator *AllocatorForMedia;
  CFIndex v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const CFDictionaryKeyCallBacks *v10;
  const CFDictionaryValueCallBacks *v11;
  CFIndex Count;
  const void *ValueAtIndex;
  const __CFAllocator *v14;
  const CFDictionaryKeyCallBacks *v15;
  CFMutableDictionaryRef v16;
  __CFDictionary *v17;
  const void *MetadataDict;
  const void *v19;
  uint64_t v20;
  const void *Identifier;
  const void *TaggedRangeClass;
  const void *TaggedRangeLine;
  const void *TaggedRangeCue;
  const void *StartDate;
  const void *EndDate;
  const void *v27;
  const void *v28;
  const void *Scte35cmd;
  const void *Scte35in;
  const void *Scte35out;
  const void *TagsFirstFoundDateDict;
  const void *DiscoveryTimestamp;
  const void *ModificationTimestamp;
  uint64_t v35;
  uint64_t v36;
  __CFArray **v38;
  int v39[2];
  const void *v40;
  const void *v41;
  const void *v42;
  const void *v43;
  void *v44;
  void *key;
  int v46[2];
  int v47[2];
  const void *v48;
  const void *v49;
  const void *v50;
  const void *v51;
  __CFArray *Mutable;

  if (!a2)
    return 0;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return FigSignalErrorAt();
  v38 = a2;
  v5 = 0;
  v6 = (const void *)*MEMORY[0x1E0CA51B8];
  v50 = (const void *)*MEMORY[0x1E0CA5198];
  v51 = (const void *)*MEMORY[0x1E0CA51A8];
  v48 = (const void *)*MEMORY[0x1E0CA51A0];
  v49 = (const void *)*MEMORY[0x1E0CA51B0];
  *(_QWORD *)v46 = *MEMORY[0x1E0CA4F68];
  *(_QWORD *)v47 = *MEMORY[0x1E0CA5158];
  key = (void *)*MEMORY[0x1E0CA4F70];
  v7 = *MEMORY[0x1E0C9AE50];
  v8 = *MEMORY[0x1E0C9AE40];
  v44 = (void *)*MEMORY[0x1E0CA4F78];
  v42 = (const void *)*MEMORY[0x1E0CA51F8];
  v43 = (const void *)*MEMORY[0x1E0CA51F0];
  v41 = (const void *)*MEMORY[0x1E0CA5200];
  v40 = (const void *)*MEMORY[0x1E0CA51C0];
  *(_QWORD *)v39 = *MEMORY[0x1E0CA4F50];
  v9 = *MEMORY[0x1E0CA5078];
  v10 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  while (1)
  {
    v11 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    if (a1)
      Count = CFArrayGetCount(a1);
    else
      Count = 0;
    if (v5 >= Count)
    {
      v35 = 0;
      *v38 = Mutable;
      return v35;
    }
    ValueAtIndex = CFArrayGetValueAtIndex(a1, v5);
    v14 = (const __CFAllocator *)FigGetAllocatorForMedia();
    v15 = v10;
    v16 = CFDictionaryCreateMutable(v14, 0, v10, v11);
    if (!v16)
      break;
    v17 = v16;
    MetadataDict = (const void *)FigDateRangeSpecifierGetMetadataDict((uint64_t)ValueAtIndex);
    v19 = v6;
    v20 = FigWireDictionarySetCFDictionary(v17, v6, MetadataDict);
    if ((_DWORD)v20)
      goto LABEL_33;
    Identifier = (const void *)FigDateRangeSpecifierGetIdentifier((uint64_t)ValueAtIndex);
    v20 = FigWireDictionarySetCFString(v17, v51, Identifier);
    if ((_DWORD)v20)
      goto LABEL_33;
    TaggedRangeClass = (const void *)FigDateRangeSpecifierGetTaggedRangeClass((uint64_t)ValueAtIndex);
    v20 = FigWireDictionarySetCFString(v17, v50, TaggedRangeClass);
    if ((_DWORD)v20)
      goto LABEL_33;
    TaggedRangeLine = (const void *)FigDateRangeSpecifierGetTaggedRangeLine((uint64_t)ValueAtIndex);
    v20 = FigWireDictionarySetCFString(v17, v49, TaggedRangeLine);
    if ((_DWORD)v20)
      goto LABEL_33;
    TaggedRangeCue = (const void *)FigDateRangeSpecifierGetTaggedRangeCue((uint64_t)ValueAtIndex);
    v20 = FigWireDictionarySetCFString(v17, v48, TaggedRangeCue);
    if ((_DWORD)v20)
      goto LABEL_33;
    StartDate = (const void *)FigDateRangeSpecifierGetStartDate((uint64_t)ValueAtIndex);
    v20 = FigWireDictionarySetCFDate((int)v17, v47[0], StartDate);
    if ((_DWORD)v20)
      goto LABEL_33;
    EndDate = (const void *)FigDateRangeSpecifierGetEndDate((uint64_t)ValueAtIndex);
    v20 = FigWireDictionarySetCFDate((int)v17, v46[0], EndDate);
    if ((_DWORD)v20)
      goto LABEL_33;
    v27 = (const void *)(FigDateRangeSpecifierGetEndOnNext((uint64_t)ValueAtIndex) ? v7 : v8);
    CFDictionarySetValue(v17, key, v27);
    v28 = (const void *)(FigDateRangeSpecifierGetEndOnNextSet((uint64_t)ValueAtIndex) ? v7 : v8);
    CFDictionarySetValue(v17, v44, v28);
    Scte35cmd = (const void *)FigDateRangeSpecifierGetScte35cmd((uint64_t)ValueAtIndex);
    v20 = FigWireDictionarySetCFData(v17, v43, Scte35cmd);
    if ((_DWORD)v20)
      goto LABEL_33;
    Scte35in = (const void *)FigDateRangeSpecifierGetScte35in((uint64_t)ValueAtIndex);
    v20 = FigWireDictionarySetCFData(v17, v42, Scte35in);
    if ((_DWORD)v20)
      goto LABEL_33;
    Scte35out = (const void *)FigDateRangeSpecifierGetScte35out((uint64_t)ValueAtIndex);
    v20 = FigWireDictionarySetCFData(v17, v41, Scte35out);
    if ((_DWORD)v20)
      goto LABEL_33;
    FigDateRangeSpecifierGetDuration((uint64_t)ValueAtIndex);
    FigCFDictionarySetDouble();
    FigDateRangeSpecifierGetPlannedDuration((uint64_t)ValueAtIndex);
    FigCFDictionarySetDouble();
    TagsFirstFoundDateDict = (const void *)FigDateRangeSpecifierGetTagsFirstFoundDateDict((uint64_t)ValueAtIndex);
    v20 = FigWireDictionarySetCFDictionary(v17, v40, TagsFirstFoundDateDict);
    if ((_DWORD)v20
      || (DiscoveryTimestamp = (const void *)FigDateRangeSpecifierGetDiscoveryTimestamp((uint64_t)ValueAtIndex),
          v20 = FigWireDictionarySetCFDate((int)v17, v39[0], DiscoveryTimestamp),
          (_DWORD)v20))
    {
LABEL_33:
      v35 = v20;
LABEL_34:
      CFRelease(v17);
      goto LABEL_35;
    }
    ModificationTimestamp = (const void *)FigDateRangeSpecifierGetModificationTimestamp((uint64_t)ValueAtIndex);
    v35 = FigWireDictionarySetCFDate((int)v17, v9, ModificationTimestamp);
    if ((_DWORD)v35)
      goto LABEL_34;
    CFArrayAppendValue(Mutable, v17);
    CFRelease(v17);
LABEL_29:
    v10 = v15;
    ++v5;
    v6 = v19;
  }
  v19 = v6;
  v36 = FigSignalErrorAt();
  if (!(_DWORD)v36)
  {
    CFArrayAppendValue(Mutable, 0);
    goto LABEL_29;
  }
  v35 = v36;
LABEL_35:
  CFRelease(Mutable);
  return v35;
}

uint64_t streamPlaylistParser_deserializeTaggedRangeEntries(uint64_t a1, const __CFArray *a2)
{
  CFIndex v3;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v5;
  const void *Value;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  uint64_t v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  double v23;
  double v24;
  const void *v25;
  const void *v26;
  const void *MutableCopy;
  uint64_t v28;
  const void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *key;
  CFIndex Count;
  const __CFArray *v48;
  char v49;
  char v50;
  CFTypeRef v51;
  const void *v52;
  CFIndex v53;
  const void *v54;
  CFDateRef v55;
  CFDateRef v56;
  CFDateRef v57;
  CFDateRef v58;
  CFTypeRef v59;
  double v60;

  FigMediaPlaylistSetDateRangeSpecifiers(a1);
  v48 = a2;
  Count = CFArrayGetCount(a2);
  if (!Count)
    return 0;
  v3 = 0;
  v44 = (void *)*MEMORY[0x1E0CA51A8];
  key = (void *)*MEMORY[0x1E0CA51B8];
  v42 = (void *)*MEMORY[0x1E0CA51B0];
  v43 = (void *)*MEMORY[0x1E0CA5198];
  v40 = *MEMORY[0x1E0CA5158];
  v41 = (void *)*MEMORY[0x1E0CA51A0];
  v39 = *MEMORY[0x1E0CA4F68];
  v38 = (void *)*MEMORY[0x1E0CA51F0];
  v36 = (void *)*MEMORY[0x1E0CA5200];
  v37 = (void *)*MEMORY[0x1E0CA51F8];
  v34 = *MEMORY[0x1E0CA4F50];
  v35 = (void *)*MEMORY[0x1E0CA51C0];
  v33 = *MEMORY[0x1E0CA5078];
  while (1)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v48, v3);
    v58 = 0;
    v59 = 0;
    v56 = 0;
    v57 = 0;
    v55 = 0;
    if (!ValueAtIndex)
    {
      v31 = 0;
      MutableCopy = 0;
      v30 = 0;
      v26 = 0;
      v22 = 0;
      v20 = 0;
      v18 = 0;
      goto LABEL_39;
    }
    v5 = ValueAtIndex;
    Value = CFDictionaryGetValue(ValueAtIndex, key);
    v7 = Value;
    if (Value)
      CFRetain(Value);
    v52 = v7;
    v8 = CFDictionaryGetValue(v5, v44);
    v9 = v8;
    if (v8)
      CFRetain(v8);
    v53 = v3;
    v54 = v9;
    v10 = CFDictionaryGetValue(v5, v43);
    v11 = v10;
    if (v10)
      CFRetain(v10);
    v12 = CFDictionaryGetValue(v5, v42);
    v13 = v12;
    if (v12)
      CFRetain(v12);
    v14 = CFDictionaryGetValue(v5, v41);
    v15 = v14;
    if (v14)
      CFRetain(v14);
    v16 = FigWireDictionaryCopyCFDate((uint64_t)v5, v40, &v58);
    if ((_DWORD)v16 || (v16 = FigWireDictionaryCopyCFDate((uint64_t)v5, v39, &v57), (_DWORD)v16))
    {
      v30 = v16;
      v51 = 0;
      v18 = 0;
      v20 = 0;
      v22 = 0;
      v26 = 0;
      MutableCopy = 0;
    }
    else
    {
      LOBYTE(v60) = 0;
      FigCFDictionaryGetBooleanIfPresent();
      v50 = LOBYTE(v60);
      LOBYTE(v60) = 0;
      FigCFDictionaryGetBooleanIfPresent();
      v49 = LOBYTE(v60);
      v17 = CFDictionaryGetValue(v5, v38);
      v18 = v17;
      if (v17)
        CFRetain(v17);
      v19 = CFDictionaryGetValue(v5, v37);
      v20 = v19;
      if (v19)
        CFRetain(v19);
      v21 = CFDictionaryGetValue(v5, v36);
      v22 = v21;
      if (v21)
        CFRetain(v21);
      v60 = 0.0;
      FigCFDictionaryGetDoubleIfPresent();
      v23 = v60;
      v60 = 0.0;
      FigCFDictionaryGetDoubleIfPresent();
      v24 = v60;
      v25 = CFDictionaryGetValue(v5, v35);
      v26 = v25;
      if (v25)
        CFRetain(v25);
      FigGetAllocatorForMedia();
      MutableCopy = (const void *)FigCFDictionaryCreateMutableCopy();
      v28 = FigWireDictionaryCopyCFDate((uint64_t)v5, v34, &v56);
      if (!(_DWORD)v28)
      {
        v28 = FigWireDictionaryCopyCFDate((uint64_t)v5, v33, &v55);
        if (!(_DWORD)v28)
        {
          v29 = v52;
          v30 = FigDateRangeSpecifierCreate(v52, v54, v11, v13, v15, v58, v57, v50, v23, v24, 0.0, 0.0, v49, v18, v20, v22, MutableCopy, 0, 0,
                  v56,
                  v55,
                  (uint64_t *)&v59);
          if ((_DWORD)v30)
          {
            v51 = 0;
          }
          else
          {
            v51 = v59;
            v59 = 0;
          }
          goto LABEL_28;
        }
      }
      v30 = v28;
      v51 = 0;
    }
    v29 = v52;
LABEL_28:
    if (v29)
      CFRelease(v29);
    if (v54)
      CFRelease(v54);
    if (v11)
      CFRelease(v11);
    if (v13)
      CFRelease(v13);
    if (v15)
      CFRelease(v15);
    v3 = v53;
    v31 = (void *)v51;
LABEL_39:
    if (v58)
      CFRelease(v58);
    if (v57)
      CFRelease(v57);
    if (v18)
      CFRelease(v18);
    if (v20)
      CFRelease(v20);
    if (v22)
      CFRelease(v22);
    if (v26)
      CFRelease(v26);
    if (MutableCopy)
      CFRelease(MutableCopy);
    if (v56)
      CFRelease(v56);
    if (v55)
      CFRelease(v55);
    if (v59)
      CFRelease(v59);
    if ((_DWORD)v30)
      break;
    FigMediaPlaylistAddDateRangeSpecifier(a1, v31);
    if (v31)
      CFRelease(v31);
    if (Count == ++v3)
      return 0;
  }
  if (v31)
    CFRelease(v31);
  return v30;
}

uint64_t FigStreamPlaylistParserSerializeMultivariantPlaylist(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const __CFAllocator *AllocatorForMedia;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v5;
  const void *v6;
  const void *PlaylistVariables;
  const __CFArray *Alternates;
  const __CFAllocator *v9;
  const void *v10;
  const void *MediaSelectionArray;
  const __CFDictionary *AudioGroups;
  CFMutableArrayRef v13;
  CFMutableArrayRef v14;
  const __CFDictionary *VideoGroups;
  CFMutableArrayRef v16;
  CFMutableArrayRef v17;
  const __CFDictionary *SubtitleGroups;
  CFMutableArrayRef v19;
  CFMutableArrayRef v20;
  const __CFDictionary *ClosedCaptionGroups;
  CFMutableArrayRef v22;
  CFMutableArrayRef v23;
  const void *v24;
  const void *ContentSteeringServerURL;
  const void *v26;
  const void *ContentSteeringInitPathwayID;
  const void *v28;
  int HasStartTime;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  const void *v36;
  const __CFArray *SessionDataSpecifiers;
  const __CFAllocator *v38;
  CFIndex Count;
  CFIndex v40;
  CFIndex v41;
  const void *v42;
  const void *v43;
  const void *v44;
  const void *ValueAtIndex;
  uint64_t v46;
  const __CFAllocator *v47;
  CFMutableDictionaryRef v48;
  __CFDictionary *v49;
  const void *Identifier;
  uint64_t v51;
  const void *URL;
  const void *v53;
  const void *Language;
  uint64_t v55;
  const __CFArray *ContentKeySpecifiers;
  uint64_t v57;
  uint64_t SerializedAtomDataBlockBufferWithFlagsForCFType;
  uint64_t v60;
  uint64_t v61;
  __CFDictionary *v62;
  const void *v63;
  CFMutableArrayRef theArray;
  CFTypeRef cf;
  void *value;

  cf = 0;
  if (!a2)
    return 0;
  v2 = a2;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v60 = FigSignalErrorAt();
    goto LABEL_56;
  }
  v5 = Mutable;
  v6 = (const void *)*MEMORY[0x1E0CA5080];
  PlaylistVariables = (const void *)FigMultivariantPlaylistGetPlaylistVariables(v2);
  if (!FigWireDictionarySetCFDictionary(v5, v6, PlaylistVariables))
  {
    Alternates = (const __CFArray *)FigMultivariantPlaylistGetAlternates(v2);
    if (Alternates && CFArrayGetCount(Alternates) >= 1)
    {
      v9 = (const __CFAllocator *)FigGetAllocatorForMedia();
      value = CFArrayCreateMutable(v9, 0, MEMORY[0x1E0C9B378]);
      if (value)
      {
        FigMultivariantPlaylistGetAlternates(v2);
        FigCFArrayApplyFunction();
        CFDictionarySetValue(v5, (const void *)*MEMORY[0x1E0CA4F80], value);
        CFRelease(value);
      }
      else if (FigSignalErrorAt())
      {
        goto LABEL_33;
      }
    }
    v10 = (const void *)*MEMORY[0x1E0CA5068];
    MediaSelectionArray = (const void *)FigMultivariantPlaylistGetMediaSelectionArray(v2);
    if (!FigWireDictionarySetCFArray(v5, v10, MediaSelectionArray))
    {
      if (FigMultivariantPlaylistGetAudioGroups(v2))
      {
        AudioGroups = (const __CFDictionary *)FigMultivariantPlaylistGetAudioGroups(v2);
        v13 = streamPlaylistParser_copySerializedRepresentationForMediaGroups(AudioGroups);
        if (v13)
        {
          v14 = v13;
          CFDictionarySetValue(v5, (const void *)*MEMORY[0x1E0CA4ED8], v13);
          CFRelease(v14);
        }
      }
      if (FigMultivariantPlaylistGetVideoGroups(v2))
      {
        VideoGroups = (const __CFDictionary *)FigMultivariantPlaylistGetVideoGroups(v2);
        v16 = streamPlaylistParser_copySerializedRepresentationForMediaGroups(VideoGroups);
        if (v16)
        {
          v17 = v16;
          CFDictionarySetValue(v5, (const void *)*MEMORY[0x1E0CA51E8], v16);
          CFRelease(v17);
        }
      }
      if (FigMultivariantPlaylistGetSubtitleGroups(v2))
      {
        SubtitleGroups = (const __CFDictionary *)FigMultivariantPlaylistGetSubtitleGroups(v2);
        v19 = streamPlaylistParser_copySerializedRepresentationForMediaGroups(SubtitleGroups);
        if (v19)
        {
          v20 = v19;
          CFDictionarySetValue(v5, (const void *)*MEMORY[0x1E0CA5180], v19);
          CFRelease(v20);
        }
      }
      if (FigMultivariantPlaylistGetClosedCaptionGroups(v2))
      {
        ClosedCaptionGroups = (const __CFDictionary *)FigMultivariantPlaylistGetClosedCaptionGroups(v2);
        v22 = streamPlaylistParser_copySerializedRepresentationForMediaGroups(ClosedCaptionGroups);
        if (v22)
        {
          v23 = v22;
          CFDictionarySetValue(v5, (const void *)*MEMORY[0x1E0CA4F00], v22);
          CFRelease(v23);
        }
      }
      v24 = (const void *)*MEMORY[0x1E0CA5178];
      ContentSteeringServerURL = (const void *)FigMultivariantPlaylistGetContentSteeringServerURL(v2);
      if (!FigWireDictionarySetCFURL(v5, v24, ContentSteeringServerURL))
      {
        v26 = (const void *)*MEMORY[0x1E0CA4FF8];
        ContentSteeringInitPathwayID = (const void *)FigMultivariantPlaylistGetContentSteeringInitPathwayID(v2);
        if (!FigWireDictionarySetCFString(v5, v26, ContentSteeringInitPathwayID))
        {
          v28 = (const void *)*MEMORY[0x1E0CA4FD8];
          HasStartTime = FigMultivariantPlaylistHasStartTime(v2);
          v30 = (const void *)*MEMORY[0x1E0C9AE50];
          v31 = (const void *)*MEMORY[0x1E0C9AE40];
          if (HasStartTime)
            v32 = (const void *)*MEMORY[0x1E0C9AE50];
          else
            v32 = (const void *)*MEMORY[0x1E0C9AE40];
          CFDictionarySetValue(v5, v28, v32);
          v33 = (const void *)*MEMORY[0x1E0CA5168];
          if (FigMultivariantPlaylistIsStartTimePrecise(v2))
            v34 = v30;
          else
            v34 = v31;
          CFDictionarySetValue(v5, v33, v34);
          v35 = (const void *)*MEMORY[0x1E0CA5150];
          if (FigMultivariantPlaylistHasIndependentSegments(v2))
            v36 = v30;
          else
            v36 = v31;
          CFDictionarySetValue(v5, v35, v36);
          FigMultivariantPlaylistGetVersion(v2);
          FigCFDictionarySetInt64();
          FigMultivariantPlaylistGetStartTimeValue(v2);
          FigCFDictionarySetDouble();
        }
      }
    }
  }
LABEL_33:
  SessionDataSpecifiers = (const __CFArray *)FigMultivariantPlaylistGetSessionDataSpecifiers(v2);
  v38 = (const __CFAllocator *)FigGetAllocatorForMedia();
  theArray = CFArrayCreateMutable(v38, 0, MEMORY[0x1E0C9B378]);
  if (!theArray)
  {
    v60 = FigSignalErrorAt();
    goto LABEL_62;
  }
  if (!SessionDataSpecifiers || (Count = CFArrayGetCount(SessionDataSpecifiers), Count < 1))
  {
LABEL_48:
    CFDictionarySetValue(v5, (const void *)*MEMORY[0x1E0CA5120], theArray);
    CFRelease(theArray);
    cf = 0;
    goto LABEL_49;
  }
  v40 = Count;
  v61 = v2;
  v62 = v5;
  v41 = 0;
  v63 = (const void *)*MEMORY[0x1E0CA5130];
  v42 = (const void *)*MEMORY[0x1E0CA50D8];
  v43 = (const void *)*MEMORY[0x1E0CA5140];
  v44 = (const void *)*MEMORY[0x1E0CA5138];
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(SessionDataSpecifiers, v41);
    if (!ValueAtIndex)
    {
      v60 = 0;
      goto LABEL_61;
    }
    v46 = (uint64_t)ValueAtIndex;
    v47 = (const __CFAllocator *)FigGetAllocatorForMedia();
    v48 = CFDictionaryCreateMutable(v47, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!v48)
      break;
    v49 = v48;
    Identifier = (const void *)FigSessionDataSpecifierGetIdentifier(v46);
    v51 = FigWireDictionarySetCFString(v49, v63, Identifier);
    if ((_DWORD)v51
      || (URL = (const void *)FigSessionDataSpecifierGetURL(v46),
          v51 = FigWireDictionarySetCFURL(v49, v42, URL),
          (_DWORD)v51)
      || (v53 = (const void *)FigSessionDataSpecifierGetValue(v46),
          v51 = FigWireDictionarySetCFString(v49, v43, v53),
          (_DWORD)v51)
      || (Language = (const void *)FigSessionDataSpecifierGetLanguage(v46),
          v51 = FigWireDictionarySetCFString(v49, v44, Language),
          (_DWORD)v51))
    {
      v60 = v51;
      CFRelease(v49);
      goto LABEL_61;
    }
    FigSessionDataSpecifierGetFormatType(v46);
    FigCFDictionarySetInt64();
    CFArrayAppendValue(theArray, v49);
    CFRelease(v49);
LABEL_44:
    if (v40 == ++v41)
    {
      cf = theArray;
      v5 = v62;
      v2 = v61;
      goto LABEL_48;
    }
  }
  v55 = FigSignalErrorAt();
  if (!(_DWORD)v55)
  {
    CFArrayAppendValue(theArray, 0);
    goto LABEL_44;
  }
  v60 = v55;
LABEL_61:
  v5 = v62;
  v2 = v61;
  CFRelease(theArray);
LABEL_62:
  if (!(_DWORD)v60)
  {
LABEL_49:
    ContentKeySpecifiers = (const __CFArray *)FigMultivariantPlaylistGetContentKeySpecifiers(v2);
    v57 = streamPlaylistParser_serializeContentKeySpecifiers(0, ContentKeySpecifiers, 0, (__CFArray **)&cf);
    if ((_DWORD)v57)
    {
      v60 = v57;
    }
    else
    {
      if (cf)
      {
        CFDictionarySetValue(v5, (const void *)*MEMORY[0x1E0CA4F08], cf);
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
      }
      FigGetAllocatorForMedia();
      SerializedAtomDataBlockBufferWithFlagsForCFType = FigRemote_CreateSerializedAtomDataBlockBufferWithFlagsForCFType();
      if ((_DWORD)SerializedAtomDataBlockBufferWithFlagsForCFType)
        v60 = SerializedAtomDataBlockBufferWithFlagsForCFType;
      else
        v60 = 0;
    }
  }
  CFRelease(v5);
LABEL_56:
  if (cf)
    CFRelease(cf);
  return v60;
}

uint64_t FigStreamPlaylistParserSerializeMediaPlaylist(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const __CFAllocator *AllocatorForMedia;
  __CFDictionary *Mutable;
  const __CFAllocator *v5;
  CFMutableArrayRef v6;
  const __CFAllocator *v7;
  CFMutableArrayRef v8;
  const void *v9;
  const void *DateEntryArray;
  uint64_t SerializedAtomDataBlockBufferWithFlagsForCFType;
  const void *v12;
  int HasEndTag;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  const void *v36;
  uint64_t v37;
  const void *ParseDate;
  const __CFArray *ContentKeySpecifiers;
  const __CFArray *MapSegmentSpecifiers;
  const __CFArray *MediaSegmentSpecifiers;
  const __CFArray *RenditionReportSpecifiers;
  const __CFAllocator *v43;
  CFMutableArrayRef v44;
  void *v45;
  CFIndex v46;
  const void *v47;
  const void *v48;
  CFIndex i;
  const void *v50;
  const void *ValueAtIndex;
  const __CFAllocator *v52;
  CFMutableDictionaryRef v53;
  __CFDictionary *v54;
  const void *URL;
  uint64_t v56;
  const void *v57;
  const void *v58;
  uint64_t v59;
  const __CFArray *DateRangeSpecifiers;
  const void *PreloadHint;
  uint64_t v62;
  const void *PreloadMapHint;
  uint64_t v64;
  uint64_t v66;
  __CFArray *v67;
  __CFDictionary *v68;
  const void *v69;
  const void *v70;
  const void *v71;
  void *value;
  __CFDictionary *v73;

  value = 0;
  if (!a2)
    return 0;
  v2 = a2;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v64 = FigSignalErrorAt();
    v6 = 0;
LABEL_105:
    v8 = 0;
    goto LABEL_89;
  }
  v5 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v6 = CFArrayCreateMutable(v5, 0, MEMORY[0x1E0C9B378]);
  if (!v6)
  {
    v64 = FigSignalErrorAt();
    goto LABEL_105;
  }
  v7 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v8 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E0C9B378]);
  if (!v8)
  {
    SerializedAtomDataBlockBufferWithFlagsForCFType = FigSignalErrorAt();
    goto LABEL_88;
  }
  v9 = (const void *)*MEMORY[0x1E0CA4F30];
  DateEntryArray = (const void *)FigMediaPlaylistGetDateEntryArray(v2);
  SerializedAtomDataBlockBufferWithFlagsForCFType = FigWireDictionarySetCFArray(Mutable, v9, DateEntryArray);
  if ((_DWORD)SerializedAtomDataBlockBufferWithFlagsForCFType)
    goto LABEL_88;
  FigMediaPlaylistGetPlaylistActiveDurationSecs(v2);
  FigCFDictionarySetDouble();
  FigMediaPlaylistGetTargetDuration(v2);
  FigCFDictionarySetInt64();
  FigMediaPlaylistGetPartTargetDuration(v2);
  FigCFDictionarySetDouble();
  FigMediaPlaylistGetHoldBackDuration(v2);
  FigCFDictionarySetDouble();
  FigMediaPlaylistGetPartHoldBackDuration(v2);
  FigCFDictionarySetDouble();
  FigMediaPlaylistGetSkipDeltaBoundary(v2);
  FigCFDictionarySetDouble();
  FigMediaPlaylistGetPlaylistType(v2);
  FigCFDictionarySetInt64();
  v12 = (const void *)*MEMORY[0x1E0CA4FB0];
  HasEndTag = FigMediaPlaylistHasEndTag(v2);
  v14 = (const void *)*MEMORY[0x1E0C9AE50];
  v15 = (const void *)*MEMORY[0x1E0C9AE40];
  v16 = (const void *)(HasEndTag ? *MEMORY[0x1E0C9AE50] : *MEMORY[0x1E0C9AE40]);
  CFDictionarySetValue(Mutable, v12, v16);
  v17 = (const void *)*MEMORY[0x1E0CA4FC0];
  v18 = FigMediaPlaylistHasMediaSequence(v2) ? v14 : v15;
  CFDictionarySetValue(Mutable, v17, v18);
  v19 = (const void *)*MEMORY[0x1E0CA4FC8];
  v20 = FigMediaPlaylistHasOnlyIFrames(v2) ? v14 : v15;
  CFDictionarySetValue(Mutable, v19, v20);
  v21 = (const void *)*MEMORY[0x1E0CA4FD8];
  v22 = FigMediaPlaylistHasStartTime(v2) ? v14 : v15;
  CFDictionarySetValue(Mutable, v21, v22);
  v23 = (const void *)*MEMORY[0x1E0CA5168];
  v24 = FigMediaPlaylistIsStartTimePrecise(v2) ? v14 : v15;
  CFDictionarySetValue(Mutable, v23, v24);
  v25 = (const void *)*MEMORY[0x1E0CA5150];
  v26 = FigMediaPlaylistHasIndependentSegments(v2) ? v14 : v15;
  CFDictionarySetValue(Mutable, v25, v26);
  v27 = (const void *)*MEMORY[0x1E0CA4FB8];
  v28 = FigMediaPlaylistHasIndependentParts(v2) ? v14 : v15;
  CFDictionarySetValue(Mutable, v27, v28);
  v29 = (const void *)*MEMORY[0x1E0CA4FA8];
  v30 = FigMediaPlaylistHasDiscontinuitySequence(v2) ? v14 : v15;
  CFDictionarySetValue(Mutable, v29, v30);
  v31 = (const void *)*MEMORY[0x1E0CA4FD0];
  v32 = FigMediaPlaylistHasPartTag(v2) ? v14 : v15;
  CFDictionarySetValue(Mutable, v31, v32);
  v33 = (const void *)*MEMORY[0x1E0CA5190];
  v34 = FigMediaPlaylistDoesServerSupportsBlockingReload(v2) ? v14 : v15;
  CFDictionarySetValue(Mutable, v33, v34);
  v35 = (const void *)*MEMORY[0x1E0CA4EF8];
  v69 = v15;
  v70 = v14;
  v36 = FigMediaPlaylistCanSkipDATERANGES(v2) ? v14 : v15;
  CFDictionarySetValue(Mutable, v35, v36);
  FigMediaPlaylistGetVersion(v2);
  FigCFDictionarySetInt64();
  FigMediaPlaylistGetStartTimeValue(v2);
  FigCFDictionarySetDouble();
  FigMediaPlaylistGetDateStampCount(v2);
  FigCFDictionarySetInt64();
  FigMediaPlaylistGetAvgSegmentDuration(v2);
  FigCFDictionarySetDouble();
  FigMediaPlaylistGetMaxSegmentDuration(v2);
  FigCFDictionarySetDouble();
  v37 = *MEMORY[0x1E0CA5088];
  ParseDate = (const void *)FigMediaPlaylistGetParseDate(v2);
  SerializedAtomDataBlockBufferWithFlagsForCFType = FigWireDictionarySetCFDate((int)Mutable, v37, ParseDate);
  if ((_DWORD)SerializedAtomDataBlockBufferWithFlagsForCFType)
    goto LABEL_88;
  ContentKeySpecifiers = (const __CFArray *)FigMediaPlaylistGetContentKeySpecifiers(v2);
  SerializedAtomDataBlockBufferWithFlagsForCFType = streamPlaylistParser_serializeContentKeySpecifiers(v2, ContentKeySpecifiers, (uint64_t)v8, (__CFArray **)&value);
  if ((_DWORD)SerializedAtomDataBlockBufferWithFlagsForCFType)
    goto LABEL_88;
  if (value)
  {
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA4F08], value);
    if (value)
    {
      CFRelease(value);
      value = 0;
    }
  }
  MapSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMapSegmentSpecifiers(v2);
  SerializedAtomDataBlockBufferWithFlagsForCFType = streamPlaylistParser_serializeMediaSegmentSpecifiers(v2, MapSegmentSpecifiers, (uint64_t)v6, (__CFArray **)&value);
  if ((_DWORD)SerializedAtomDataBlockBufferWithFlagsForCFType)
    goto LABEL_88;
  if (value)
  {
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA5030], value);
    if (value)
    {
      CFRelease(value);
      value = 0;
    }
  }
  MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v2);
  SerializedAtomDataBlockBufferWithFlagsForCFType = streamPlaylistParser_serializeMediaSegmentSpecifiers(v2, MediaSegmentSpecifiers, (uint64_t)v6, (__CFArray **)&value);
  if ((_DWORD)SerializedAtomDataBlockBufferWithFlagsForCFType)
    goto LABEL_88;
  if (value)
  {
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA5050], value);
    if (value)
    {
      CFRelease(value);
      value = 0;
    }
  }
  RenditionReportSpecifiers = (const __CFArray *)FigMediaPlaylistGetRenditionReportSpecifiers(v2);
  v43 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v44 = CFArrayCreateMutable(v43, 0, MEMORY[0x1E0C9B378]);
  if (!v44)
  {
    SerializedAtomDataBlockBufferWithFlagsForCFType = FigSignalErrorAt();
    if (!(_DWORD)SerializedAtomDataBlockBufferWithFlagsForCFType)
    {
      v45 = value;
      if (value)
      {
LABEL_71:
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA5110], v45);
        if (value)
        {
          CFRelease(value);
          value = 0;
        }
      }
      DateRangeSpecifiers = (const __CFArray *)FigMediaPlaylistGetDateRangeSpecifiers(v2);
      SerializedAtomDataBlockBufferWithFlagsForCFType = streamPlaylistParser_serializeTaggedRangeEntries(DateRangeSpecifiers, (__CFArray **)&value);
      if (!(_DWORD)SerializedAtomDataBlockBufferWithFlagsForCFType)
      {
        if (value)
        {
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA4F28], value);
          if (value)
          {
            CFRelease(value);
            value = 0;
          }
        }
        v73 = 0;
        PreloadHint = (const void *)FigMediaPlaylistGetPreloadHint(v2);
        v62 = streamPlaylistParser_serializeMediaSegmentSpecifier(v2, PreloadHint, (uint64_t)v6, &v73);
        if ((_DWORD)v62)
          goto LABEL_100;
        if (v73)
        {
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA50E8], v73);
          if (v73)
          {
            CFRelease(v73);
            v73 = 0;
          }
        }
        PreloadMapHint = (const void *)FigMediaPlaylistGetPreloadMapHint(v2);
        v62 = streamPlaylistParser_serializeMediaSegmentSpecifier(v2, PreloadMapHint, (uint64_t)v6, &v73);
        if ((_DWORD)v62)
        {
LABEL_100:
          v64 = v62;
          if (v73)
            CFRelease(v73);
          goto LABEL_89;
        }
        if (v73)
        {
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA50F0], v73);
          if (v73)
            CFRelease(v73);
        }
        SerializedAtomDataBlockBufferWithFlagsForCFType = FigWireDictionarySetCFArray(Mutable, (const void *)*MEMORY[0x1E0CA5108], v6);
        if (!(_DWORD)SerializedAtomDataBlockBufferWithFlagsForCFType)
        {
          SerializedAtomDataBlockBufferWithFlagsForCFType = FigWireDictionarySetCFArray(Mutable, (const void *)*MEMORY[0x1E0CA5100], v8);
          if (!(_DWORD)SerializedAtomDataBlockBufferWithFlagsForCFType)
          {
            FigGetAllocatorForMedia();
            SerializedAtomDataBlockBufferWithFlagsForCFType = FigRemote_CreateSerializedAtomDataBlockBufferWithFlagsForCFType();
            if (!(_DWORD)SerializedAtomDataBlockBufferWithFlagsForCFType)
            {
              v64 = 0;
              goto LABEL_90;
            }
          }
        }
      }
    }
LABEL_88:
    v64 = SerializedAtomDataBlockBufferWithFlagsForCFType;
    goto LABEL_89;
  }
  v45 = v44;
  v66 = v2;
  v67 = v8;
  v68 = Mutable;
  v46 = 0;
  v71 = (const void *)*MEMORY[0x1E0CA5118];
  v47 = (const void *)*MEMORY[0x1E0CA4F98];
  v48 = (const void *)*MEMORY[0x1E0CA50F8];
  if (!RenditionReportSpecifiers)
    goto LABEL_55;
LABEL_54:
  for (i = CFArrayGetCount(RenditionReportSpecifiers); ; i = 0)
  {
    if (v46 >= i)
    {
      value = v45;
      Mutable = v68;
      v2 = v66;
      v8 = v67;
      goto LABEL_71;
    }
    v50 = v45;
    ValueAtIndex = CFArrayGetValueAtIndex(RenditionReportSpecifiers, v46);
    v52 = (const __CFAllocator *)FigGetAllocatorForMedia();
    v53 = CFDictionaryCreateMutable(v52, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!v53)
      break;
    v54 = v53;
    URL = (const void *)FigRenditionReportSpecifierGetURL((uint64_t)ValueAtIndex);
    v56 = FigWireDictionarySetCFURL(v54, v71, URL);
    if ((_DWORD)v56)
    {
      v64 = v56;
      CFRelease(v54);
      goto LABEL_99;
    }
    FigRenditionReportSpecifierGetLastMediaSequenceNumber((uint64_t)ValueAtIndex);
    FigCFDictionarySetInt64();
    FigRenditionReportSpecifierGetLastIndependentMediaSequenceNumber((uint64_t)ValueAtIndex);
    FigCFDictionarySetInt64();
    FigRenditionReportSpecifierGetLastPart((uint64_t)ValueAtIndex);
    FigCFDictionarySetInt64();
    FigRenditionReportSpecifierGetLastIndependentPart((uint64_t)ValueAtIndex);
    FigCFDictionarySetInt64();
    if (FigRenditionReportSpecifierIsGapAtLive((uint64_t)ValueAtIndex))
      v57 = v70;
    else
      v57 = v69;
    CFDictionarySetValue(v54, v47, v57);
    if (FigRenditionReportSpecifierIsReadInCurrent((uint64_t)ValueAtIndex))
      v58 = v70;
    else
      v58 = v69;
    CFDictionarySetValue(v54, v48, v58);
    CFArrayAppendValue((CFMutableArrayRef)v45, v54);
    CFRelease(v54);
LABEL_66:
    ++v46;
    if (RenditionReportSpecifiers)
      goto LABEL_54;
LABEL_55:
    ;
  }
  v59 = FigSignalErrorAt();
  if (!(_DWORD)v59)
  {
    CFArrayAppendValue((CFMutableArrayRef)v45, 0);
    goto LABEL_66;
  }
  v64 = v59;
LABEL_99:
  CFRelease(v50);
  Mutable = v68;
  v8 = v67;
LABEL_89:
  if (Mutable)
LABEL_90:
    CFRelease(Mutable);
  if (v8)
    CFRelease(v8);
  if (v6)
    CFRelease(v6);
  if (value)
    CFRelease(value);
  return v64;
}

uint64_t streamPlaylistParser_serializeContentKeySpecifiers(uint64_t a1, const __CFArray *a2, uint64_t a3, __CFArray **a4)
{
  const __CFAllocator *AllocatorForMedia;
  CFIndex v9;
  const void *v10;
  const void *v11;
  CFIndex i;
  const void *ValueAtIndex;
  const void *v14;
  const __CFAllocator *v15;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v17;
  const void *Identifier;
  uint64_t v19;
  const void *SupportedProtocolVersions;
  const void *v21;
  const void *CryptKeyParsedIndex;
  uint64_t v23;
  uint64_t v24;
  const void *v26;
  const void *v27;
  const void *v28;
  __CFArray *theArray;

  if (!a4)
    return 0;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  theArray = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
  if (!theArray)
    return FigSignalErrorAt();
  v9 = 0;
  v27 = (const void *)*MEMORY[0x1E0CA5188];
  v28 = (const void *)*MEMORY[0x1E0CA4F20];
  v10 = (const void *)*MEMORY[0x1E0CA50E0];
  v26 = (const void *)*MEMORY[0x1E0C9AE50];
  v11 = (const void *)*MEMORY[0x1E0C9AE40];
  if (!a2)
    goto LABEL_5;
LABEL_4:
  for (i = CFArrayGetCount(a2); ; i = 0)
  {
    if (v9 >= i)
    {
      v24 = 0;
      *a4 = theArray;
      return v24;
    }
    ValueAtIndex = CFArrayGetValueAtIndex(a2, v9);
    v14 = ValueAtIndex;
    if (a3 && FigContentKeySpecifierGetIsReadInCurrent((uint64_t)ValueAtIndex))
    {
      FigContentKeySpecifierGetCryptKeyParsedIndex((uint64_t)v14);
      FigCFArrayAppendInt64();
    }
    if (!FigContentKeySpecifierGetIsChangedInCurrent((uint64_t)v14))
      goto LABEL_21;
    v15 = (const __CFAllocator *)FigGetAllocatorForMedia();
    Mutable = CFDictionaryCreateMutable(v15, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
      break;
    v17 = Mutable;
    FigContentKeySpecifierGetKeySystem((uint64_t)v14);
    FigCFDictionarySetInt64();
    FigContentKeySpecifierGetEncryptionMethod((uint64_t)v14);
    FigCFDictionarySetInt64();
    Identifier = (const void *)FigContentKeySpecifierGetIdentifier((uint64_t)v14);
    v19 = FigWireDictionarySetCFString(v17, v28, Identifier);
    if ((_DWORD)v19
      || (SupportedProtocolVersions = (const void *)FigContentKeySpecifierGetSupportedProtocolVersions((uint64_t)v14),
          v19 = FigWireDictionarySetCFArray(v17, v27, SupportedProtocolVersions),
          (_DWORD)v19))
    {
      v24 = v19;
      CFRelease(v17);
      goto LABEL_28;
    }
    if (FigContentKeySpecifierGetIsPrefetchKey((uint64_t)v14))
      v21 = v26;
    else
      v21 = v11;
    CFDictionarySetValue(v17, v10, v21);
    FigContentKeySpecifierGetCryptKeyParsedIndex((uint64_t)v14);
    FigCFDictionarySetInt64();
    if (a1)
    {
      if (FigContentKeySpecifierGetCryptKeyParsedIndex((uint64_t)v14))
      {
        CryptKeyParsedIndex = (const void *)FigContentKeySpecifierGetCryptKeyParsedIndex((uint64_t)v14);
        FigMediaPlaylistAddToCryptKeyParsedIndexToEntryMap(a1, CryptKeyParsedIndex, v14);
      }
    }
    CFArrayAppendValue(theArray, v17);
    CFRelease(v17);
LABEL_21:
    ++v9;
    if (a2)
      goto LABEL_4;
LABEL_5:
    ;
  }
  v23 = FigSignalErrorAt();
  if (!(_DWORD)v23)
  {
    CFArrayAppendValue(theArray, 0);
    goto LABEL_21;
  }
  v24 = v23;
LABEL_28:
  CFRelease(theArray);
  return v24;
}

uint64_t streamPlaylistParser_serializeMediaSegmentSpecifiers(uint64_t a1, const __CFArray *a2, uint64_t a3, __CFArray **a4)
{
  const __CFAllocator *AllocatorForMedia;
  __CFArray *Mutable;
  CFIndex v10;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v13;
  uint64_t v14;
  void *value;

  value = 0;
  if (!a4)
    return 0;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v10 = 0;
    if (!a2)
      goto LABEL_5;
LABEL_4:
    for (i = CFArrayGetCount(a2); v10 < i; i = 0)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a2, v10);
      if (FigMediaSegmentSpecifierIsReadInCurrent((uint64_t)ValueAtIndex))
      {
        FigMediaSegmentSpecifierGetMediaParsedIndex((uint64_t)ValueAtIndex);
        FigCFArrayAppendInt64();
      }
      if (FigMediaSegmentSpecifierIsChangedInCurrent((uint64_t)ValueAtIndex))
      {
        v13 = streamPlaylistParser_serializeMediaSegmentSpecifier(a1, ValueAtIndex, a3, (__CFDictionary **)&value);
        if ((_DWORD)v13)
          goto LABEL_23;
        CFArrayAppendValue(Mutable, value);
        if (value)
        {
          CFRelease(value);
          value = 0;
        }
      }
      ++v10;
      if (a2)
        goto LABEL_4;
LABEL_5:
      ;
    }
    v14 = 0;
    *a4 = Mutable;
    Mutable = 0;
  }
  else
  {
    v13 = FigSignalErrorAt();
LABEL_23:
    v14 = v13;
  }
  if (value)
    CFRelease(value);
  if (Mutable)
    CFRelease(Mutable);
  return v14;
}

uint64_t FigWireDictionarySetCFArray(__CFDictionary *a1, const void *a2, CFTypeRef cf)
{
  CFTypeID v6;

  if (!cf)
    return 0;
  v6 = CFGetTypeID(cf);
  if (v6 == CFArrayGetTypeID())
  {
    CFDictionarySetValue(a1, a2, cf);
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t FigStreamPlaylistParserDeserializeMultivariantPlaylist(uint64_t a1, CFTypeRef *a2)
{
  uint64_t AllocatorForMedia;
  uint64_t BlockBufferData;
  CFTypeRef v5;
  const void *Value;
  const void *v7;
  const void *v8;
  const void *v9;
  const __CFArray *Array;
  const __CFArray *v11;
  const __CFArray *v12;
  const __CFArray *v13;
  const __CFArray *v14;
  const __CFArray *v15;
  CFIndex Count;
  CFIndex v17;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v20;
  uint64_t v21;
  uint64_t SelectionGroup;
  uint64_t AudioGroupIDString;
  const __CFDictionary *AudioGroups;
  uint64_t VideoGroupIDString;
  const __CFDictionary *VideoGroups;
  uint64_t SubtitleGroupIDString;
  const __CFDictionary *SubtitleGroups;
  uint64_t ClosedCaptionGroupIDString;
  const __CFDictionary *ClosedCaptionGroups;
  uint64_t v31;
  void *v32;
  const void *v33;
  const void *v34;
  void *v35;
  const void *v36;
  const __CFArray *v37;
  const __CFArray *v38;
  CFTypeRef v39;
  CFIndex v40;
  CFIndex v41;
  CFIndex v42;
  const __CFDictionary *v43;
  uint64_t v44;
  const __CFArray *v45;
  const __CFArray *v46;
  CFIndex v47;
  CFIndex v48;
  CFIndex v49;
  const void *v50;
  const __CFDictionary *v51;
  const __CFDictionary *v52;
  const void *v53;
  const void *v54;
  const void *v55;
  const void *v56;
  const void *v57;
  const void *v58;
  const void *v59;
  const void *v60;
  __CFDictionary *v62;
  CFTypeRef *v63;
  void *v64;
  void *v65;
  void *key;
  int v67[2];
  CFTypeRef v68;
  CFTypeRef v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  __CFDictionary *v75[2];

  v69 = 0;
  if (a2)
  {
    AllocatorForMedia = FigGetAllocatorForMedia();
    BlockBufferData = FigMultivariantPlaylistCreateEmpty(AllocatorForMedia, &v69);
    if ((_DWORD)BlockBufferData
      || (FigGetAllocatorForMedia(), BlockBufferData = FigXPCMessageCreateBlockBufferData(), (_DWORD)BlockBufferData)
      || (FigGetAllocatorForMedia(),
          BlockBufferData = FigRemote_CreateCFTypeFromSerializedAtomDataBlockBuffer(),
          (_DWORD)BlockBufferData))
    {
      v31 = BlockBufferData;
    }
    else
    {
      v5 = v69;
      Value = CFDictionaryGetValue(0, (const void *)*MEMORY[0x1E0CA5080]);
      v7 = Value;
      if (Value)
        CFRetain(Value);
      FigMultivariantPlaylistSetPlaylistVariables((uint64_t)v5, v7);
      v8 = CFDictionaryGetValue(0, (const void *)*MEMORY[0x1E0CA5068]);
      v9 = v8;
      if (v8)
        CFRetain(v8);
      FigMultivariantPlaylistSetMediaSelectionArray((uint64_t)v5, v9);
      v75[0] = 0;
      Array = (const __CFArray *)FigWireDictionaryGetArray(0, (const void *)*MEMORY[0x1E0CA4ED8]);
      streamPlaylistParser_copyDeserializedRepresentationForMediaGroups(Array, v75);
      FigMultivariantPlaylistSetAudioGroups((uint64_t)v5, v75[0]);
      if (v75[0])
      {
        CFRelease(v75[0]);
        v75[0] = 0;
      }
      v11 = (const __CFArray *)FigWireDictionaryGetArray(0, (const void *)*MEMORY[0x1E0CA51E8]);
      streamPlaylistParser_copyDeserializedRepresentationForMediaGroups(v11, v75);
      FigMultivariantPlaylistSetVideoGroups((uint64_t)v5, v75[0]);
      if (v75[0])
      {
        CFRelease(v75[0]);
        v75[0] = 0;
      }
      v12 = (const __CFArray *)FigWireDictionaryGetArray(0, (const void *)*MEMORY[0x1E0CA5180]);
      streamPlaylistParser_copyDeserializedRepresentationForMediaGroups(v12, v75);
      FigMultivariantPlaylistSetSubtitleGroups((uint64_t)v5, v75[0]);
      if (v75[0])
      {
        CFRelease(v75[0]);
        v75[0] = 0;
      }
      *(_QWORD *)v67 = v7;
      v63 = a2;
      v13 = (const __CFArray *)FigWireDictionaryGetArray(0, (const void *)*MEMORY[0x1E0CA4F00]);
      streamPlaylistParser_copyDeserializedRepresentationForMediaGroups(v13, v75);
      FigMultivariantPlaylistSetClosedCaptionGroups((uint64_t)v5, v75[0]);
      if (v75[0])
        CFRelease(v75[0]);
      v14 = (const __CFArray *)FigWireDictionaryGetArray(0, (const void *)*MEMORY[0x1E0CA4F80]);
      if (v14)
      {
        v15 = v14;
        if (CFArrayGetCount(v14) >= 1)
        {
          Count = CFArrayGetCount(v15);
          if (Count >= 1)
          {
            v17 = Count;
            for (i = 0; v17 != i; ++i)
            {
              ValueAtIndex = CFArrayGetValueAtIndex(v15, i);
              if (!ValueAtIndex)
              {
                FigSignalErrorAt();
                break;
              }
              v20 = (uint64_t)ValueAtIndex;
              v74 = 0;
              v75[0] = 0;
              v72 = 0;
              v73 = 0;
              v70 = 0;
              v71 = 0;
              v21 = FigGetAllocatorForMedia();
              SelectionGroup = FigAlternateCreateWithSerializedRepresentation(v21, v20, 0, v75);
              if ((_DWORD)SelectionGroup)
                goto LABEL_38;
              AudioGroupIDString = FigAlternateGetAudioGroupIDString((uint64_t)v75[0]);
              AudioGroups = (const __CFDictionary *)FigMultivariantPlaylistGetAudioGroups((uint64_t)v5);
              SelectionGroup = FigStreamPlaylistGetSelectionGroup(AudioGroupIDString, 1936684398, AudioGroups, &v73);
              if ((_DWORD)SelectionGroup)
                goto LABEL_38;
              VideoGroupIDString = FigAlternateGetVideoGroupIDString((uint64_t)v75[0]);
              VideoGroups = (const __CFDictionary *)FigMultivariantPlaylistGetVideoGroups((uint64_t)v5);
              SelectionGroup = FigStreamPlaylistGetSelectionGroup(VideoGroupIDString, 1986618469, VideoGroups, &v72);
              if ((_DWORD)SelectionGroup
                || (SubtitleGroupIDString = FigAlternateGetSubtitleGroupIDString((uint64_t)v75[0]),
                    SubtitleGroups = (const __CFDictionary *)FigMultivariantPlaylistGetSubtitleGroups((uint64_t)v5),
                    SelectionGroup = FigStreamPlaylistGetSelectionGroup(SubtitleGroupIDString, 1935832172, SubtitleGroups, &v71), (_DWORD)SelectionGroup)|| (ClosedCaptionGroupIDString = FigAlternateGetClosedCaptionGroupIDString((uint64_t)v75[0]), ClosedCaptionGroups = (const __CFDictionary *)FigMultivariantPlaylistGetClosedCaptionGroups((uint64_t)v5), SelectionGroup = FigStreamPlaylistGetSelectionGroup(ClosedCaptionGroupIDString, 1668047728, ClosedCaptionGroups, &v70), (_DWORD)SelectionGroup))
              {
LABEL_38:
                v31 = SelectionGroup;
              }
              else
              {
                v31 = FigAlternateCopy((uint64_t)v75[0], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v73, v72, v71, v70,
                        &v74);
                if (!(_DWORD)v31)
                {
                  v32 = v74;
                  v74 = 0;
                  goto LABEL_29;
                }
              }
              v32 = 0;
LABEL_29:
              if (v75[0])
                CFRelease(v75[0]);
              if (v74)
                CFRelease(v74);
              if ((_DWORD)v31)
              {
                v36 = *(const void **)v67;
                if (!v32)
                  goto LABEL_49;
LABEL_48:
                CFRelease(v32);
                goto LABEL_49;
              }
              FigMultivariantPlaylistAddAlternate((uint64_t)v5, v32);
              if (v32)
                CFRelease(v32);
            }
          }
        }
      }
      v33 = CFDictionaryGetValue(0, (const void *)*MEMORY[0x1E0CA5178]);
      v34 = v33;
      if (v33)
        CFRetain(v33);
      FigMultivariantPlaylistSetContentSteeringServerURL((uint64_t)v5, v34);
      v35 = (void *)CFDictionaryGetValue(0, (const void *)*MEMORY[0x1E0CA4FF8]);
      v32 = v35;
      v36 = *(const void **)v67;
      if (v35)
        CFRetain(v35);
      FigMultivariantPlaylistSetContentSteeringInitPathwayID((uint64_t)v5, v32);
      v75[0] = 0;
      FigCFDictionaryGetInt64IfPresent();
      FigMultivariantPlaylistSetVersion((uint64_t)v5, (int)v75[0]);
      LOBYTE(v75[0]) = 0;
      FigCFDictionaryGetBooleanIfPresent();
      FigMultivariantPlaylistSetHasIndependentSegments((uint64_t)v5, (char)v75[0]);
      LOBYTE(v75[0]) = 0;
      FigCFDictionaryGetBooleanIfPresent();
      FigMultivariantPlaylistSetHasStartTime((uint64_t)v5, (char)v75[0]);
      v75[0] = 0;
      FigCFDictionaryGetDoubleIfPresent();
      FigMultivariantPlaylistSetStartTimeValue((uint64_t)v5, *(double *)v75);
      LOBYTE(v75[0]) = 0;
      FigCFDictionaryGetBooleanIfPresent();
      FigMultivariantPlaylistSetIsStartTimePrecise((uint64_t)v5, (char)v75[0]);
      if (v34)
        CFRelease(v34);
      v31 = 0;
      if (v32)
        goto LABEL_48;
LABEL_49:
      if (v36)
        CFRelease(v36);
      if (v9)
        CFRelease(v9);
      if (!(_DWORD)v31)
      {
        v37 = (const __CFArray *)FigWireDictionaryGetArray(0, (const void *)*MEMORY[0x1E0CA4F08]);
        if (v37 && (v38 = v37, v39 = v69, v75[0] = 0, (v40 = CFArrayGetCount(v37)) != 0))
        {
          v41 = v40;
          v42 = 0;
          while (1)
          {
            v43 = (const __CFDictionary *)CFArrayGetValueAtIndex(v38, v42);
            v44 = streamPlaylistParser_deserializeContentKeySpecifier(0, v43, (CFTypeRef *)v75);
            if ((_DWORD)v44)
              break;
            FigMultivariantPlaylistAddContentKeySpecifier((uint64_t)v39, v75[0]);
            if (v75[0])
            {
              CFRelease(v75[0]);
              v75[0] = 0;
            }
            if (v41 == ++v42)
              goto LABEL_61;
          }
          v31 = v44;
          if (v75[0])
          {
            v62 = v75[0];
LABEL_93:
            CFRelease(v62);
          }
        }
        else
        {
LABEL_61:
          v45 = (const __CFArray *)FigWireDictionaryGetArray(0, (const void *)*MEMORY[0x1E0CA5120]);
          if (!v45 || (v46 = v45, v68 = v69, v74 = 0, (v47 = CFArrayGetCount(v45)) == 0))
          {
LABEL_85:
            v31 = 0;
            *v63 = v69;
            v69 = 0;
            goto LABEL_86;
          }
          v48 = v47;
          v49 = 0;
          key = (void *)*MEMORY[0x1E0CA5130];
          v65 = (void *)*MEMORY[0x1E0CA50D8];
          v64 = (void *)*MEMORY[0x1E0CA5140];
          v50 = (const void *)*MEMORY[0x1E0CA5138];
          while (1)
          {
            v51 = (const __CFDictionary *)CFArrayGetValueAtIndex(v46, v49);
            if (v51)
            {
              v52 = v51;
              v53 = CFDictionaryGetValue(v51, key);
              v54 = v53;
              if (v53)
                CFRetain(v53);
              v55 = CFDictionaryGetValue(v52, v65);
              v56 = v55;
              if (v55)
                CFRetain(v55);
              v57 = CFDictionaryGetValue(v52, v64);
              v58 = v57;
              if (v57)
                CFRetain(v57);
              v59 = CFDictionaryGetValue(v52, v50);
              v60 = v59;
              if (v59)
                CFRetain(v59);
              v75[0] = 0;
              FigCFDictionaryGetInt64IfPresent();
              v31 = FigSessionDataSpecifierCreate(v54, v56, v58, v60, (int)v75[0], (uint64_t *)&v74);
              if (v54)
                CFRelease(v54);
              if (v56)
                CFRelease(v56);
              if (v58)
                CFRelease(v58);
              if (v60)
                CFRelease(v60);
              if ((_DWORD)v31)
                break;
            }
            FigMultivariantPlaylistAddSessionDataSpecifier((uint64_t)v68, v74);
            if (v74)
            {
              CFRelease(v74);
              v74 = 0;
            }
            if (v48 == ++v49)
              goto LABEL_85;
          }
          v62 = (__CFDictionary *)v74;
          if (v74)
            goto LABEL_93;
        }
      }
    }
  }
  else
  {
    v31 = 0;
  }
LABEL_86:
  if (v69)
    CFRelease(v69);
  return v31;
}

const void *FigWireDictionaryGetArray(const __CFDictionary *a1, const void *a2)
{
  const void *Value;
  const void *v3;
  CFTypeID v4;

  Value = CFDictionaryGetValue(a1, a2);
  v3 = Value;
  if (Value)
  {
    v4 = CFGetTypeID(Value);
    if (v4 != CFArrayGetTypeID())
    {
      FigSignalErrorAt();
      return 0;
    }
  }
  return v3;
}

uint64_t FigStreamPlaylistParserDeserializeMediaPlaylist(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v3;
  uint64_t AllocatorForMedia;
  uint64_t BlockBufferData;
  CFTypeRef v6;
  const void *Value;
  const void *v8;
  CFIndex Count;
  CFIndex v10;
  CFIndex v11;
  const __CFDictionary *ValueAtIndex;
  const __CFAllocator *v13;
  CFMutableDictionaryRef MutableCopy;
  CFMutableDictionaryRef v15;
  int v16;
  CFDateRef v17;
  const __CFArray *Array;
  const __CFArray *v19;
  CFTypeRef v20;
  CFIndex v21;
  CFIndex v22;
  CFIndex i;
  const __CFDictionary *v24;
  uint64_t v25;
  CFDateRef v26;
  const __CFArray *v27;
  const __CFArray *v28;
  CFTypeRef v29;
  CFIndex v30;
  CFIndex v31;
  CFIndex j;
  const __CFDictionary *v33;
  const __CFDate *v34;
  const __CFDictionary *MediaParsedIndexToEntryMap;
  const __CFDate *v36;
  uint64_t v37;
  const __CFArray *v38;
  const __CFArray *v39;
  CFTypeRef v40;
  CFIndex v41;
  CFIndex v42;
  CFIndex k;
  const __CFDictionary *v44;
  const __CFDate *v45;
  const __CFDictionary *v46;
  const __CFDate *v47;
  CFIndex v48;
  const __CFDictionary *v49;
  const void *v50;
  const void *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  char v56;
  char v57;
  uint64_t v58;
  CFDateRef v59;
  const __CFArray *v60;
  CFTypeRef v61;
  const __CFDictionary *Dictionary;
  uint64_t v63;
  const __CFDictionary *v64;
  const __CFArray *v65;
  const __CFArray *v66;
  const __CFArray *v67;
  const __CFArray *v68;
  CFTypeRef v69;
  CFIndex v70;
  const __CFDictionary *v71;
  const void *v72;
  CFIndex v73;
  const __CFDictionary *CryptKeyParsedIndexToEntryMap;
  const void *v75;
  CFDateRef v77;
  CFTypeRef *v78;
  void *key;
  CFIndex v80;
  CFTypeRef v81;
  const __CFArray *theArray;
  CFTypeRef v83;
  CFDateRef v84;
  const __CFDate *v85;

  v83 = 0;
  if (!a2)
  {
    v58 = 0;
    goto LABEL_109;
  }
  if (*a2)
  {
    v3 = CFRetain(*a2);
    v83 = v3;
  }
  else
  {
    AllocatorForMedia = FigGetAllocatorForMedia();
    BlockBufferData = FigMediaPlaylistCreateEmpty(AllocatorForMedia, &v83);
    if ((_DWORD)BlockBufferData)
      goto LABEL_120;
    v3 = v83;
  }
  FigStreamPlaylistInitializeIndexValidation((uint64_t)v3);
  FigGetAllocatorForMedia();
  BlockBufferData = FigXPCMessageCreateBlockBufferData();
  if ((_DWORD)BlockBufferData)
    goto LABEL_120;
  FigGetAllocatorForMedia();
  BlockBufferData = FigRemote_CreateCFTypeFromSerializedAtomDataBlockBuffer();
  if ((_DWORD)BlockBufferData)
    goto LABEL_120;
  v6 = v83;
  v84 = 0;
  Value = CFDictionaryGetValue(0, (const void *)*MEMORY[0x1E0CA4F30]);
  v8 = Value;
  if (!Value)
  {
    FigMediaPlaylistSetDateEntryArray((uint64_t)v6, 0);
LABEL_15:
    v85 = 0;
    FigCFDictionaryGetDoubleIfPresent();
    FigMediaPlaylistSetPlaylistActiveDurationSecs((uint64_t)v6, *(double *)&v85);
    v85 = 0;
    FigCFDictionaryGetInt64IfPresent();
    FigMediaPlaylistSetTargetDuration((uint64_t)v6, (int)v85);
    v85 = 0;
    FigCFDictionaryGetDoubleIfPresent();
    FigMediaPlaylistSetPartTargetDuration((uint64_t)v6, *(double *)&v85);
    v85 = 0;
    FigCFDictionaryGetDoubleIfPresent();
    FigMediaPlaylistSetHoldBackDuration((uint64_t)v6, *(double *)&v85);
    v85 = 0;
    FigCFDictionaryGetDoubleIfPresent();
    FigMediaPlaylistSetPartHoldBackDuration((uint64_t)v6, *(double *)&v85);
    v85 = 0;
    FigCFDictionaryGetDoubleIfPresent();
    FigMediaPlaylistSetSkipDeltaBoundary((uint64_t)v6, *(double *)&v85);
    v85 = 0;
    FigCFDictionaryGetInt64IfPresent();
    FigMediaPlaylistSetPlaylistType((uint64_t)v6, (int)v85);
    LOBYTE(v85) = 0;
    FigCFDictionaryGetBooleanIfPresent();
    FigMediaPlaylistSetHasEndTag((uint64_t)v6, (char)v85);
    LOBYTE(v85) = 0;
    FigCFDictionaryGetBooleanIfPresent();
    FigMediaPlaylistSetHasMediaSequence((uint64_t)v6, (char)v85);
    LOBYTE(v85) = 0;
    FigCFDictionaryGetBooleanIfPresent();
    FigMediaPlaylistSetHasOnlyIFrames((uint64_t)v6, (char)v85);
    LOBYTE(v85) = 0;
    FigCFDictionaryGetBooleanIfPresent();
    FigMediaPlaylistSetHasIndependentParts((uint64_t)v6, (char)v85);
    LOBYTE(v85) = 0;
    FigCFDictionaryGetBooleanIfPresent();
    FigMediaPlaylistSetHasDiscontinuitySequence((uint64_t)v6, (char)v85);
    LOBYTE(v85) = 0;
    FigCFDictionaryGetBooleanIfPresent();
    FigMediaPlaylistSetHasPartTag((uint64_t)v6, (char)v85);
    LOBYTE(v85) = 0;
    FigCFDictionaryGetBooleanIfPresent();
    FigMediaPlaylistSetDoesServerSupportsBlockingReload((uint64_t)v6, (char)v85);
    LOBYTE(v85) = 0;
    FigCFDictionaryGetBooleanIfPresent();
    FigMediaPlaylistSetCanSkipDATERANGES((uint64_t)v6, (char)v85);
    v85 = 0;
    FigCFDictionaryGetInt64IfPresent();
    if (v85)
    {
      v85 = 0;
      FigCFDictionaryGetInt64IfPresent();
      FigMediaPlaylistSetVersion((uint64_t)v6, (int)v85);
    }
    LOBYTE(v85) = 0;
    FigCFDictionaryGetBooleanIfPresent();
    if ((_BYTE)v85)
    {
      LOBYTE(v85) = 0;
      FigCFDictionaryGetBooleanIfPresent();
      FigMediaPlaylistSetHasStartTime((uint64_t)v6, (char)v85);
      v85 = 0;
      FigCFDictionaryGetDoubleIfPresent();
      FigMediaPlaylistSetStartTimeValue((uint64_t)v6, *(double *)&v85);
      LOBYTE(v85) = 0;
      FigCFDictionaryGetBooleanIfPresent();
      FigMediaPlaylistSetIsStartTimePrecise((uint64_t)v6, (char)v85);
    }
    v85 = 0;
    FigCFDictionaryGetInt64IfPresent();
    FigMediaPlaylistSetDateStampCount((uint64_t)v6, (uint64_t)v85);
    if (!FigMediaPlaylistHasIndependentSegments((uint64_t)v6))
    {
      LOBYTE(v85) = 0;
      FigCFDictionaryGetBooleanIfPresent();
      FigMediaPlaylistSetHasIndependentSegments((uint64_t)v6, (char)v85);
    }
    v85 = 0;
    FigCFDictionaryGetDoubleIfPresent();
    FigMediaPlaylistSetAvgSegmentDuration((uint64_t)v6, *(double *)&v85);
    v85 = 0;
    FigCFDictionaryGetDoubleIfPresent();
    FigMediaPlaylistSetMaxSegmentDuration((uint64_t)v6, *(double *)&v85);
    v16 = FigWireDictionaryCopyCFDate(0, *MEMORY[0x1E0CA5088], &v84);
    v17 = v84;
    if (!v16)
    {
      FigMediaPlaylistSetParseDate((uint64_t)v6, v84);
      v17 = v84;
    }
    if (v17)
      CFRelease(v17);
    if (!v8)
      goto LABEL_27;
LABEL_26:
    CFRelease(v8);
    goto LABEL_27;
  }
  CFRetain(Value);
  FigMediaPlaylistSetDateEntryArray((uint64_t)v6, 0);
  Count = CFArrayGetCount((CFArrayRef)v8);
  if (Count < 1)
    goto LABEL_15;
  v10 = Count;
  v11 = 0;
  while (1)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v8, v11);
    v13 = (const __CFAllocator *)FigGetAllocatorForMedia();
    MutableCopy = CFDictionaryCreateMutableCopy(v13, 0, ValueAtIndex);
    if (!MutableCopy)
      break;
    v15 = MutableCopy;
    FigMediaPlaylistAddDateEntryArray((uint64_t)v6, MutableCopy);
    CFRelease(v15);
    if (v10 == ++v11)
      goto LABEL_15;
  }
  FigSignalErrorAt();
  if (v8)
    goto LABEL_26;
LABEL_27:
  Array = (const __CFArray *)FigWireDictionaryGetArray(0, (const void *)*MEMORY[0x1E0CA4F08]);
  if (Array)
  {
    v19 = Array;
    v20 = v83;
    v85 = 0;
    v21 = CFArrayGetCount(Array);
    if (v21)
    {
      v22 = v21;
      for (i = 0; i != v22; ++i)
      {
        v24 = (const __CFDictionary *)CFArrayGetValueAtIndex(v19, i);
        v25 = streamPlaylistParser_deserializeContentKeySpecifier((uint64_t)v20, v24, (CFTypeRef *)&v85);
        v26 = v85;
        if ((_DWORD)v25)
        {
LABEL_112:
          v58 = v25;
          goto LABEL_116;
        }
        FigMediaPlaylistAddContentKeySpecifier((uint64_t)v20, v85);
        if (v85)
        {
          CFRelease(v85);
          v85 = 0;
        }
      }
    }
  }
  v78 = a2;
  v27 = (const __CFArray *)FigWireDictionaryGetArray(0, (const void *)*MEMORY[0x1E0CA5030]);
  if (v27)
  {
    v28 = v27;
    v29 = v83;
    v84 = 0;
    v30 = CFArrayGetCount(v27);
    if (v30)
    {
      v31 = v30;
      for (j = 0; v31 != j; ++j)
      {
        v33 = (const __CFDictionary *)CFArrayGetValueAtIndex(v28, j);
        v85 = 0;
        FigCFDictionaryGetInt64IfPresent();
        v34 = v85;
        MediaParsedIndexToEntryMap = (const __CFDictionary *)FigMediaPlaylistGetMediaParsedIndexToEntryMap((uint64_t)v29);
        v36 = (const __CFDate *)CFDictionaryGetValue(MediaParsedIndexToEntryMap, v34);
        v84 = v36;
        if (v36 && (CFRetain(v36), v84))
        {
          v37 = streamPlaylistParser_deserializeMediaFileEntry((uint64_t)v29, v33, (CFTypeRef *)&v84);
          if ((_DWORD)v37)
          {
LABEL_115:
            v58 = v37;
            v26 = v84;
LABEL_116:
            if (v26)
            {
              v77 = v26;
              goto LABEL_118;
            }
            goto LABEL_119;
          }
        }
        else
        {
          v25 = streamPlaylistParser_deserializeMediaFileEntry((uint64_t)v29, v33, (CFTypeRef *)&v84);
          v26 = v84;
          if ((_DWORD)v25)
            goto LABEL_112;
          FigMediaPlaylistAddMapSegmentSpecifier((uint64_t)v29, v84);
        }
        if (v84)
        {
          CFRelease(v84);
          v84 = 0;
        }
      }
    }
  }
  v38 = (const __CFArray *)FigWireDictionaryGetArray(0, (const void *)*MEMORY[0x1E0CA5050]);
  if (v38)
  {
    v39 = v38;
    v40 = v83;
    v84 = 0;
    v41 = CFArrayGetCount(v38);
    if (v41)
    {
      v42 = v41;
      for (k = 0; k != v42; ++k)
      {
        v44 = (const __CFDictionary *)CFArrayGetValueAtIndex(v39, k);
        v85 = 0;
        FigCFDictionaryGetInt64IfPresent();
        v45 = v85;
        v46 = (const __CFDictionary *)FigMediaPlaylistGetMediaParsedIndexToEntryMap((uint64_t)v40);
        v47 = (const __CFDate *)CFDictionaryGetValue(v46, v45);
        v84 = v47;
        if (v47 && (CFRetain(v47), v84))
        {
          v37 = streamPlaylistParser_deserializeMediaFileEntry((uint64_t)v40, v44, (CFTypeRef *)&v84);
          if ((_DWORD)v37)
            goto LABEL_115;
        }
        else
        {
          v25 = streamPlaylistParser_deserializeMediaFileEntry((uint64_t)v40, v44, (CFTypeRef *)&v84);
          v26 = v84;
          if ((_DWORD)v25)
            goto LABEL_112;
          FigMediaPlaylistAddMediaSegmentSpecifier((uint64_t)v40, v84);
        }
        if (v84)
        {
          CFRelease(v84);
          v84 = 0;
        }
      }
    }
  }
  theArray = (const __CFArray *)FigWireDictionaryGetArray(0, (const void *)*MEMORY[0x1E0CA5110]);
  if (theArray)
  {
    v81 = v83;
    FigMediaPlaylistSetRenditionReportSpecifiers((uint64_t)v83, 0);
    v80 = CFArrayGetCount(theArray);
    if (v80)
    {
      v48 = 0;
      key = (void *)*MEMORY[0x1E0CA5118];
      while (1)
      {
        v49 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v48);
        v84 = 0;
        if (!v49)
        {
          FigMediaPlaylistAddRenditionReportSpecifier((uint64_t)v81, 0);
          goto LABEL_72;
        }
        v50 = CFDictionaryGetValue(v49, key);
        v51 = v50;
        if (v50)
          CFRetain(v50);
        v85 = 0;
        FigCFDictionaryGetInt64IfPresent();
        v52 = (uint64_t)v85;
        v85 = 0;
        FigCFDictionaryGetInt64IfPresent();
        v53 = (uint64_t)v85;
        v85 = 0;
        FigCFDictionaryGetInt64IfPresent();
        v54 = (int)v85;
        v85 = 0;
        FigCFDictionaryGetInt64IfPresent();
        v55 = (int)v85;
        LOBYTE(v85) = 0;
        FigCFDictionaryGetBooleanIfPresent();
        v56 = (char)v85;
        LOBYTE(v85) = 0;
        FigCFDictionaryGetBooleanIfPresent();
        v57 = (char)v85;
        v58 = FigRenditionReportSpecifierCreate(v51, v52, v53, v54, v55, 1, v56, (uint64_t *)&v84);
        if ((_DWORD)v58)
          break;
        FigRenditionReportSpecifierSetReadInCurrent((uint64_t)v84, v57);
        v59 = v84;
        v84 = 0;
        if (v51)
          goto LABEL_66;
LABEL_67:
        if (v84)
          CFRelease(v84);
        if ((_DWORD)v58)
        {
          if (v59)
          {
            v77 = v59;
LABEL_118:
            CFRelease(v77);
          }
LABEL_119:
          v66 = 0;
          v68 = 0;
          goto LABEL_105;
        }
        FigMediaPlaylistAddRenditionReportSpecifier((uint64_t)v81, v59);
        if (v59)
          CFRelease(v59);
LABEL_72:
        if (v80 == ++v48)
          goto LABEL_77;
      }
      v59 = 0;
      if (!v51)
        goto LABEL_67;
LABEL_66:
      CFRelease(v51);
      goto LABEL_67;
    }
  }
LABEL_77:
  v60 = (const __CFArray *)FigWireDictionaryGetArray(0, (const void *)*MEMORY[0x1E0CA4F28]);
  if (v60)
  {
    BlockBufferData = streamPlaylistParser_deserializeTaggedRangeEntries((uint64_t)v83, v60);
    if ((_DWORD)BlockBufferData)
    {
LABEL_120:
      v58 = BlockBufferData;
      goto LABEL_119;
    }
  }
  v61 = v83;
  v85 = 0;
  Dictionary = (const __CFDictionary *)FigWireDictionaryGetDictionary(0, (const void *)*MEMORY[0x1E0CA50E8]);
  v63 = streamPlaylistParser_deserializeMediaFileEntry((uint64_t)v61, Dictionary, (CFTypeRef *)&v85);
  if ((_DWORD)v63)
    goto LABEL_121;
  FigMediaPlaylistSetPreloadHint((uint64_t)v61, v85);
  if (v85)
  {
    CFRelease(v85);
    v85 = 0;
  }
  v64 = (const __CFDictionary *)FigWireDictionaryGetDictionary(0, (const void *)*MEMORY[0x1E0CA50F0]);
  v63 = streamPlaylistParser_deserializeMediaFileEntry((uint64_t)v61, v64, (CFTypeRef *)&v85);
  if ((_DWORD)v63)
  {
LABEL_121:
    v58 = v63;
    v77 = v85;
    if (v85)
      goto LABEL_118;
    goto LABEL_119;
  }
  FigMediaPlaylistSetPreloadMapHint((uint64_t)v61, v85);
  if (v85)
    CFRelease(v85);
  v65 = (const __CFArray *)CFDictionaryGetValue(0, (const void *)*MEMORY[0x1E0CA5108]);
  v66 = v65;
  if (v65)
    CFRetain(v65);
  v67 = (const __CFArray *)CFDictionaryGetValue(0, (const void *)*MEMORY[0x1E0CA5100]);
  v68 = v67;
  if (v67)
    CFRetain(v67);
  v69 = v83;
  v84 = 0;
  v85 = 0;
  if (v66 && CFArrayGetCount(v66) >= 1)
  {
    v70 = 0;
    do
    {
      FigCFArrayGetInt64AtIndex();
      if (v85)
      {
        v71 = (const __CFDictionary *)FigMediaPlaylistGetMediaParsedIndexToEntryMap((uint64_t)v69);
        v72 = CFDictionaryGetValue(v71, v85);
        if (v72)
          FigMediaSegmentSpecifierSetIsReadInCurrent((uint64_t)v72, 1);
      }
      ++v70;
    }
    while (CFArrayGetCount(v66) > v70);
  }
  if (v68 && CFArrayGetCount(v68) >= 1)
  {
    v73 = 0;
    do
    {
      FigCFArrayGetInt64AtIndex();
      if (v84)
      {
        CryptKeyParsedIndexToEntryMap = (const __CFDictionary *)FigMediaPlaylistGetCryptKeyParsedIndexToEntryMap((uint64_t)v69);
        v75 = CFDictionaryGetValue(CryptKeyParsedIndexToEntryMap, v84);
        if (v75)
          FigContentKeySpecifierSetIsReadInCurrent((uint64_t)v75, 1);
      }
      ++v73;
    }
    while (CFArrayGetCount(v68) > v73);
  }
  v58 = 0;
  if (!*v78)
  {
    *v78 = v83;
    v83 = 0;
  }
LABEL_105:
  if (v66)
    CFRelease(v66);
  if (v68)
    CFRelease(v68);
LABEL_109:
  if (v83)
    CFRelease(v83);
  return v58;
}

void streamPlaylistParser_copySerializedRepresentationForMediaGroupApplier(const void *a1, const __CFDictionary *a2, uint64_t a3)
{
  const __CFAllocator *AllocatorForMedia;
  __CFDictionary *MutableCopy;
  __CFDictionary *v8;
  CFTypeID v9;

  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  MutableCopy = CFDictionaryCreateMutableCopy(AllocatorForMedia, 0, a2);
  if (MutableCopy)
  {
    v8 = MutableCopy;
    FigWireDictionarySetCFString(MutableCopy, (const void *)*MEMORY[0x1E0CA4FA0], *(CFTypeRef *)(a3 + 8));
    if (a1)
    {
      v9 = CFGetTypeID(a1);
      if (v9 == CFNumberGetTypeID())
        CFDictionarySetValue(v8, (const void *)*MEMORY[0x1E0CA50B8], a1);
      else
        FigSignalErrorAt();
    }
    CFArrayAppendValue(*(CFMutableArrayRef *)a3, v8);
    CFRelease(v8);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t FigWireDictionarySetCFString(__CFDictionary *a1, const void *a2, CFTypeRef cf)
{
  CFTypeID v6;

  if (!cf)
    return 0;
  v6 = CFGetTypeID(cf);
  if (v6 == CFStringGetTypeID())
  {
    CFDictionarySetValue(a1, a2, cf);
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t FigWireDictionarySetCFDictionary(__CFDictionary *a1, const void *a2, CFTypeRef cf)
{
  CFTypeID v6;

  if (!cf)
    return 0;
  v6 = CFGetTypeID(cf);
  if (v6 == CFDictionaryGetTypeID())
  {
    CFDictionarySetValue(a1, a2, cf);
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t FigWireDictionarySetCFDate(int a1, int a2, CFTypeRef cf)
{
  CFTypeID v4;

  if (!cf)
    return 0;
  v4 = CFGetTypeID(cf);
  if (v4 != CFDateGetTypeID())
    return FigSignalErrorAt();
  MEMORY[0x194029D14](cf);
  return FigCFDictionarySetDouble();
}

uint64_t FigWireDictionarySetCFData(__CFDictionary *a1, const void *a2, CFTypeRef cf)
{
  CFTypeID v6;

  if (!cf)
    return 0;
  v6 = CFGetTypeID(cf);
  if (v6 == CFDataGetTypeID())
  {
    CFDictionarySetValue(a1, a2, cf);
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t FigWireDictionaryCopyCFDate(uint64_t a1, uint64_t a2, CFDateRef *a3)
{
  uint64_t result;
  const __CFAllocator *AllocatorForMedia;
  CFDateRef v6;

  if (!a3)
    return 0;
  result = FigCFDictionaryGetDoubleIfPresent();
  if ((_DWORD)result)
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    v6 = CFDateCreate(AllocatorForMedia, 0.0);
    *a3 = v6;
    if (v6)
      return 0;
    else
      return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigWireDictionarySetCFURL(__CFDictionary *a1, const void *a2, CFTypeRef cf)
{
  CFTypeID v6;

  if (!cf)
    return 0;
  v6 = CFGetTypeID(cf);
  if (v6 == CFURLGetTypeID())
  {
    CFDictionarySetValue(a1, a2, cf);
    return 0;
  }
  return FigSignalErrorAt();
}

void streamPlaylistParser_serializeAlternateApplier(__CFArray *a1, CFMutableArrayRef *a2)
{
  CFMutableDictionaryRef v3;
  CFMutableDictionaryRef v4;

  v3 = FigAlternateCopyAsSerializedRepresentation(a1, 0);
  if (v3)
  {
    v4 = v3;
    CFArrayAppendValue(*a2, v3);
    CFRelease(v4);
  }
}

CFMutableArrayRef streamPlaylistParser_copySerializedRepresentationForMediaGroups(const __CFDictionary *a1)
{
  const __CFAllocator *AllocatorForMedia;
  CFMutableArrayRef Mutable;

  if (FigCFDictionaryGetCount() < 1)
    return 0;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
    CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)streamPlaylistParser_copySerializedRepresentationForMediaGroupsApplier, Mutable);
  else
    FigSignalErrorAt();
  return Mutable;
}

void streamPlaylistParser_copySerializedRepresentationForMediaGroupsApplier(uint64_t a1, const __CFDictionary *a2, __CFArray *a3)
{
  const void *v4;
  const void *v5;

  v4 = (const void *)FigStreamPlaylistParserCopySerializedRepresentationForMediaGroup(a1, a2);
  if (v4)
  {
    v5 = v4;
    CFArrayAppendValue(a3, v4);
    CFRelease(v5);
  }
}

uint64_t streamPlaylistParser_serializeMediaSegmentSpecifier(uint64_t a1, const void *a2, uint64_t a3, __CFDictionary **a4)
{
  const __CFAllocator *AllocatorForMedia;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v10;
  const void *v11;
  const void *URLString;
  uint64_t ContentKeySpecifier;
  uint64_t MapSegmentSpecifier;
  const __CFArray *PartialSegments;
  const __CFArray *v16;
  uint64_t v17;
  const void *v18;
  const void *IV;
  uint64_t v20;
  const void *DateStamp;
  const void *v22;
  int IsMarkedIndependent;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *MediaParsedIndex;
  uint64_t v36;
  void *value;

  value = 0;
  if (!a2)
    return 0;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v10 = Mutable;
    if (FigMediaSegmentSpecifierGetURLString((uint64_t)a2))
    {
      v11 = (const void *)*MEMORY[0x1E0CA5090];
      URLString = (const void *)FigMediaSegmentSpecifierGetURLString((uint64_t)a2);
      FigWireDictionarySetCFString(v10, v11, URLString);
    }
    if (FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)a2))
    {
      ContentKeySpecifier = FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)a2);
      FigContentKeySpecifierGetCryptKeyParsedIndex(ContentKeySpecifier);
      FigCFDictionarySetInt64();
    }
    if (FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)a2))
    {
      MapSegmentSpecifier = FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)a2);
      FigMediaSegmentSpecifierGetMediaParsedIndex(MapSegmentSpecifier);
      FigCFDictionarySetInt64();
    }
    PartialSegments = (const __CFArray *)FigMediaSegmentSpecifierGetPartialSegments((uint64_t)a2);
    if (PartialSegments)
    {
      v16 = PartialSegments;
      if (CFArrayGetCount(PartialSegments) >= 1)
      {
        v17 = streamPlaylistParser_serializeMediaSegmentSpecifiers(a1, v16, a3, &value);
        if ((_DWORD)v17)
          goto LABEL_35;
        if (value)
          CFDictionarySetValue(v10, (const void *)*MEMORY[0x1E0CA50B0], value);
      }
    }
    FigMediaSegmentSpecifierGetMediaSequence((uint64_t)a2);
    FigCFDictionarySetInt64();
    FigMediaSegmentSpecifierGetDiscontinuityDomain((uint64_t)a2);
    FigCFDictionarySetInt64();
    FigMediaSegmentSpecifierGetStartOffset((uint64_t)a2);
    FigCFDictionarySetInt64();
    FigMediaSegmentSpecifierGetBytesToRead((uint64_t)a2);
    FigCFDictionarySetInt64();
    FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)a2);
    FigCFDictionarySetDouble();
    FigMediaSegmentSpecifierGetBitRate((uint64_t)a2);
    FigCFDictionarySetDouble();
    v18 = (const void *)*MEMORY[0x1E0CA4FE8];
    IV = (const void *)FigMediaSegmentSpecifierGetIV((uint64_t)a2);
    v17 = FigWireDictionarySetCFData(v10, v18, IV);
    if (!(_DWORD)v17)
    {
      v20 = *MEMORY[0x1E0CA4F38];
      DateStamp = (const void *)FigMediaSegmentSpecifierGetDateStamp((uint64_t)a2);
      v17 = FigWireDictionarySetCFDate((int)v10, v20, DateStamp);
      if (!(_DWORD)v17)
      {
        FigMediaSegmentSpecifierGetImputedDate((uint64_t)a2);
        FigCFDictionarySetDouble();
        FigMediaSegmentSpecifierGetType((uint64_t)a2);
        FigCFDictionarySetInt64();
        v22 = (const void *)*MEMORY[0x1E0CA5040];
        IsMarkedIndependent = FigMediaSegmentSpecifierIsMarkedIndependent((uint64_t)a2);
        v24 = (const void *)*MEMORY[0x1E0C9AE50];
        v25 = (const void *)*MEMORY[0x1E0C9AE40];
        if (IsMarkedIndependent)
          v26 = (const void *)*MEMORY[0x1E0C9AE50];
        else
          v26 = (const void *)*MEMORY[0x1E0C9AE40];
        CFDictionarySetValue(v10, v22, v26);
        v27 = (const void *)*MEMORY[0x1E0CA5000];
        if (FigMediaSegmentSpecifierIsDiscontinuity((uint64_t)a2))
          v28 = v24;
        else
          v28 = v25;
        CFDictionarySetValue(v10, v27, v28);
        v29 = (const void *)*MEMORY[0x1E0CA5038];
        if (FigMediaSegmentSpecifierIsMarkedAsGap((uint64_t)a2))
          v30 = v24;
        else
          v30 = v25;
        CFDictionarySetValue(v10, v29, v30);
        v31 = (const void *)*MEMORY[0x1E0CA4F88];
        if (FigMediaSegmentSpecifierIsFragment((uint64_t)a2))
          v32 = v24;
        else
          v32 = v25;
        CFDictionarySetValue(v10, v31, v32);
        v33 = (const void *)*MEMORY[0x1E0CA4F90];
        if (FigMediaSegmentSpecifierAreFragmentsExpired((uint64_t)a2))
          v34 = v24;
        else
          v34 = v25;
        CFDictionarySetValue(v10, v33, v34);
        FigMediaSegmentSpecifierGetMediaParsedIndex((uint64_t)a2);
        FigCFDictionarySetInt64();
        if (FigMediaSegmentSpecifierGetMediaParsedIndex((uint64_t)a2))
        {
          MediaParsedIndex = (const void *)FigMediaSegmentSpecifierGetMediaParsedIndex((uint64_t)a2);
          FigMediaPlaylistAddToMediaParsedIndexToEntryMap(a1, MediaParsedIndex, a2);
        }
        v36 = 0;
        if (a4)
        {
          *a4 = v10;
          goto LABEL_37;
        }
        goto LABEL_36;
      }
    }
LABEL_35:
    v36 = v17;
LABEL_36:
    CFRelease(v10);
    goto LABEL_37;
  }
  v36 = FigSignalErrorAt();
LABEL_37:
  if (value)
    CFRelease(value);
  return v36;
}

void streamPlaylistParser_copyDeserializedRepresentationForMediaGroups(const __CFArray *a1, __CFDictionary **a2)
{
  CFIndex Count;
  const __CFAllocator *AllocatorForMedia;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v7;
  CFIndex v8;
  CFIndex v9;
  CFIndex i;
  const __CFArray *ValueAtIndex;
  CFTypeRef v12;
  BOOL v13;
  CFTypeRef v14;
  CFTypeRef cf;
  CFTypeRef v16;

  cf = 0;
  v16 = 0;
  if (a1)
  {
    Count = CFArrayGetCount(a1);
    if (a2)
    {
      if (Count >= 1)
      {
        AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
        Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (Mutable)
        {
          v7 = Mutable;
          v8 = CFArrayGetCount(a1);
          if (v8 < 1)
          {
            *a2 = v7;
          }
          else
          {
            v9 = v8;
            for (i = 0; i != v9; ++i)
            {
              ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(a1, i);
              FigStreamPlaylistParserCreateMediaGroup(ValueAtIndex, &cf, (__CFDictionary **)&v16);
              v12 = v16;
              if (v16)
                v13 = cf == 0;
              else
                v13 = 1;
              if (!v13)
              {
                CFDictionarySetValue(v7, cf, v16);
                v12 = v16;
              }
              if (v12)
              {
                CFRelease(v12);
                v16 = 0;
              }
              if (cf)
              {
                CFRelease(cf);
                cf = 0;
              }
            }
            v14 = v16;
            *a2 = v7;
            if (v14)
            {
              CFRelease(v14);
              if (cf)
                CFRelease(cf);
            }
          }
        }
        else
        {
          FigSignalErrorAt();
        }
      }
    }
  }
}

uint64_t streamPlaylistParser_deserializeContentKeySpecifier(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  uint64_t v3;
  const void *Value;
  const void *v7;
  const void *v8;
  const void *v9;
  CFTypeRef cf;
  uint64_t v12;

  v3 = 0;
  cf = 0;
  if (a2 && a3)
  {
    FigCFDictionaryGetInt64IfPresent();
    v12 = 0;
    FigCFDictionaryGetInt64IfPresent();
    Value = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA4F20]);
    v7 = Value;
    if (Value)
      CFRetain(Value);
    v8 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA5188]);
    v9 = v8;
    if (v8)
      CFRetain(v8);
    FigCFDictionaryGetBooleanIfPresent();
    v12 = 0;
    FigCFDictionaryGetInt64IfPresent();
    v3 = FigContentKeySpecifierCreate(0, v7, 0, v9, (uint64_t *)&cf);
    if ((_DWORD)v3)
    {
      if (cf)
        CFRelease(cf);
    }
    else
    {
      FigContentKeySpecifierSetIsReadInCurrent((uint64_t)cf, 1);
      FigContentKeySpecifierSetIsChangedInCurrent((uint64_t)cf, 0);
      FigContentKeySpecifierSetCryptKeyParsedIndex((uint64_t)cf, 0);
      FigContentKeySpecifierSetIsPrefetchKey((uint64_t)cf, 0);
      *a3 = cf;
      cf = 0;
    }
    if (v7)
      CFRelease(v7);
    if (v9)
      CFRelease(v9);
  }
  return v3;
}

uint64_t streamPlaylistParser_deserializeMediaFileEntry(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  uint64_t v3;
  CFTypeRef *v4;
  CFTypeRef v7;
  int v8;
  uint64_t AllocatorForMedia;
  uint64_t Empty;
  const void *Value;
  const void *v12;
  const void *v13;
  const void *v14;
  const __CFDictionary *CryptKeyParsedIndexToEntryMap;
  const void *v16;
  const __CFDictionary *MediaParsedIndexToEntryMap;
  const void *v18;
  const __CFArray *Array;
  const __CFArray *v20;
  CFTypeRef *v21;
  CFTypeRef v22;
  CFIndex Count;
  CFIndex v24;
  CFIndex i;
  const void *ValueAtIndex;
  const void *v27;
  const __CFDictionary *v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  CFTypeRef v32;
  CFTypeRef v33;
  CFTypeRef v34;
  CFTypeRef v35;
  CFTypeRef v36;
  CFTypeRef v37;
  const void *v38;
  const void *v39;
  CFTypeRef v40;
  CFTypeRef v41;
  CFTypeRef v42;
  CFTypeRef v43;
  CFTypeRef v44;
  CFTypeRef v45;
  CFTypeRef v46;
  const void *v47;
  const void *v48;
  CFTypeRef v50;
  const void *v51;
  int v52;
  CFTypeRef v53;
  CFTypeRef v54;
  CFTypeRef cf;
  const void *v56;

  v3 = 0;
  v53 = 0;
  v54 = 0;
  if (a2)
  {
    v4 = a3;
    if (a3)
    {
      v7 = *a3;
      if (*a3)
      {
        v54 = *a3;
        FigMediaSegmentSpecifierSetURLString((uint64_t)v7, 0);
        FigMediaSegmentSpecifierSetIV((uint64_t)v7, 0);
        FigMediaSegmentSpecifierSetDateStamp((uint64_t)v7, 0);
        v8 = 0;
      }
      else
      {
        AllocatorForMedia = FigGetAllocatorForMedia();
        Empty = FigMediaSegmentSpecifierCreateEmpty(AllocatorForMedia, (uint64_t *)&v54);
        v8 = 1;
        if ((_DWORD)Empty)
        {
          v3 = Empty;
          v12 = 0;
          goto LABEL_34;
        }
      }
      Value = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA5090]);
      v12 = Value;
      if (Value)
        CFRetain(Value);
      FigMediaSegmentSpecifierSetURLString((uint64_t)v54, v12);
      v56 = 0;
      FigCFDictionaryGetInt64IfPresent();
      v13 = v56;
      v56 = 0;
      FigCFDictionaryGetInt64IfPresent();
      v14 = v56;
      CryptKeyParsedIndexToEntryMap = (const __CFDictionary *)FigMediaPlaylistGetCryptKeyParsedIndexToEntryMap(a1);
      v16 = CFDictionaryGetValue(CryptKeyParsedIndexToEntryMap, v13);
      if (v16)
        FigMediaSegmentSpecifierSetContentKeySpecifier((uint64_t)v54, v16);
      MediaParsedIndexToEntryMap = (const __CFDictionary *)FigMediaPlaylistGetMediaParsedIndexToEntryMap(a1);
      v18 = CFDictionaryGetValue(MediaParsedIndexToEntryMap, v14);
      if (v18)
        FigMediaSegmentSpecifierSetMapSegmentSpecifier((uint64_t)v54, v18);
      Array = (const __CFArray *)FigWireDictionaryGetArray(a2, (const void *)*MEMORY[0x1E0CA50B0]);
      if (Array)
      {
        v20 = Array;
        v51 = v12;
        v21 = v4;
        v52 = v8;
        v22 = v54;
        cf = 0;
        Count = CFArrayGetCount(Array);
        if (Count)
        {
          v24 = Count;
          for (i = 0; v24 != i; ++i)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v20, i);
            v56 = 0;
            FigCFDictionaryGetInt64IfPresent();
            v27 = v56;
            v28 = (const __CFDictionary *)FigMediaPlaylistGetMediaParsedIndexToEntryMap(a1);
            v29 = CFDictionaryGetValue(v28, v27);
            cf = v29;
            if (v29 && (CFRetain(v29), cf))
            {
              v30 = streamPlaylistParser_deserializeMediaFileEntry(a1, ValueAtIndex, &cf);
              if ((_DWORD)v30)
              {
                v3 = v30;
                v50 = cf;
                goto LABEL_43;
              }
            }
            else
            {
              v31 = streamPlaylistParser_deserializeMediaFileEntry(a1, ValueAtIndex, &cf);
              v50 = cf;
              if ((_DWORD)v31)
              {
                v3 = v31;
LABEL_43:
                v8 = v52;
                v12 = v51;
                if (v50)
                {
                  v48 = v50;
LABEL_33:
                  CFRelease(v48);
                }
                goto LABEL_34;
              }
              FigMediaSegmentSpecifierAddPartialSegment((uint64_t)v22, cf);
            }
            if (cf)
            {
              CFRelease(cf);
              cf = 0;
            }
          }
        }
        v8 = v52;
        v4 = v21;
        v12 = v51;
      }
      v32 = v54;
      v56 = 0;
      FigCFDictionaryGetInt64IfPresent();
      FigMediaSegmentSpecifierSetMediaSequence((uint64_t)v32, (uint64_t)v56);
      v33 = v54;
      v56 = 0;
      FigCFDictionaryGetInt64IfPresent();
      FigMediaSegmentSpecifierSetIsDiscontinuityDomain((uint64_t)v33, (uint64_t)v56);
      v34 = v54;
      v56 = 0;
      FigCFDictionaryGetInt64IfPresent();
      FigMediaSegmentSpecifierSetStartOffset((uint64_t)v34, (uint64_t)v56);
      v35 = v54;
      v56 = 0;
      FigCFDictionaryGetInt64IfPresent();
      FigMediaSegmentSpecifierSetBytesToRead((uint64_t)v35, (uint64_t)v56);
      v36 = v54;
      v56 = 0;
      FigCFDictionaryGetDoubleIfPresent();
      FigMediaSegmentSpecifierSetTimeInSeconds((uint64_t)v36, *(double *)&v56);
      v37 = v54;
      v56 = 0;
      FigCFDictionaryGetDoubleIfPresent();
      FigMediaSegmentSpecifierSetBitRate((uint64_t)v37, *(double *)&v56);
      v38 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA4FE8]);
      v39 = v38;
      if (v38)
        CFRetain(v38);
      FigMediaSegmentSpecifierSetIV((uint64_t)v54, v39);
      v3 = FigWireDictionaryCopyCFDate((uint64_t)a2, *MEMORY[0x1E0CA4F38], (CFDateRef *)&v53);
      if (!(_DWORD)v3)
      {
        FigMediaSegmentSpecifierSetDateStamp((uint64_t)v54, v53);
        v40 = v54;
        v56 = 0;
        FigCFDictionaryGetDoubleIfPresent();
        FigMediaSegmentSpecifierSetImputedDate((uint64_t)v40, *(double *)&v56);
        v41 = v54;
        v56 = 0;
        FigCFDictionaryGetInt64IfPresent();
        FigMediaSegmentSpecifierSetType((uint64_t)v41, (int)v56);
        v42 = v54;
        LOBYTE(v56) = 0;
        FigCFDictionaryGetBooleanIfPresent();
        FigMediaSegmentSpecifierSetIsIndependent((uint64_t)v42, (char)v56);
        v43 = v54;
        LOBYTE(v56) = 0;
        FigCFDictionaryGetBooleanIfPresent();
        FigMediaSegmentSpecifierSetIsDiscontinuity((uint64_t)v43, (char)v56);
        v44 = v54;
        LOBYTE(v56) = 0;
        FigCFDictionaryGetBooleanIfPresent();
        FigMediaSegmentSpecifierSetIsMarkedAsGap((uint64_t)v44, (char)v56);
        v45 = v54;
        LOBYTE(v56) = 0;
        FigCFDictionaryGetBooleanIfPresent();
        FigMediaSegmentSpecifierSetIsFragment((uint64_t)v45, (char)v56);
        v46 = v54;
        LOBYTE(v56) = 0;
        FigCFDictionaryGetBooleanIfPresent();
        FigMediaSegmentSpecifierSetAreFragmentsExpired((uint64_t)v46, (char)v56);
        FigMediaSegmentSpecifierSetIsReadInCurrent((uint64_t)v54, 1);
        v56 = 0;
        FigCFDictionaryGetInt64IfPresent();
        v47 = v56;
        FigMediaSegmentSpecifierSetMediaParsedIndex((uint64_t)v54, (uint64_t)v56);
        if (v47)
          FigMediaPlaylistAddToMediaParsedIndexToEntryMap(a1, v47, v54);
        *v4 = v54;
        v54 = 0;
      }
      if (v39)
      {
        v48 = v39;
        goto LABEL_33;
      }
LABEL_34:
      if (v53)
        CFRelease(v53);
      if (v12)
        CFRelease(v12);
      if (v8 && v54)
        CFRelease(v54);
    }
  }
  return v3;
}

const void *FigWireDictionaryGetDictionary(const __CFDictionary *a1, const void *a2)
{
  const void *Value;
  const void *v3;
  CFTypeID v4;

  Value = CFDictionaryGetValue(a1, a2);
  v3 = Value;
  if (Value)
  {
    v4 = CFGetTypeID(Value);
    if (v4 != CFDictionaryGetTypeID())
    {
      FigSignalErrorAt();
      return 0;
    }
  }
  return v3;
}

uint64_t FigImageQueueGaugeGetClassID()
{
  MEMORY[0x19402F294](&FigImageQueueGaugeGetClassID_sRegisterFigImageQueueGaugeTypeOnce, RegisterFigImageQueueGaugeType);
  return sFigImageQueueGaugeClassID;
}

uint64_t RegisterFigImageQueueGaugeType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigImageQueueGaugeGetTypeID()
{
  MEMORY[0x19402F294](&FigImageQueueGaugeGetClassID_sRegisterFigImageQueueGaugeTypeOnce, RegisterFigImageQueueGaugeType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigImageQueueGaugeCreate(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t DerivedStorage;
  uint64_t v6;

  if (!a3)
    return FigSignalErrorAt();
  MEMORY[0x19402F294](&FigImageQueueGaugeGetClassID_sRegisterFigImageQueueGaugeTypeOnce, RegisterFigImageQueueGaugeType);
  v4 = CMDerivedObjectCreate();
  if (!(_DWORD)v4)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_QWORD *)DerivedStorage = FigSimpleMutexCreate();
    v6 = MEMORY[0x1E0CA2E68];
    *(_OWORD *)(DerivedStorage + 8) = *MEMORY[0x1E0CA2E68];
    *(_QWORD *)(DerivedStorage + 24) = *(_QWORD *)(v6 + 16);
    *a3 = 0;
  }
  return v4;
}

CFStringRef FigImageQueueGaugeCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigImageQueueGauge %p]"), a1);
}

uint64_t imageQueueGauge_Invalidate()
{
  _QWORD *DerivedStorage;
  uint64_t v1;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  v1 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)(DerivedStorage + 1) = *MEMORY[0x1E0CA2E68];
  DerivedStorage[3] = *(_QWORD *)(v1 + 16);
  *((_WORD *)DerivedStorage + 16) = 257;
  MEMORY[0x19402EF04](*DerivedStorage);
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  return 0;
}

uint64_t imageQueueGauge_Finalize()
{
  CMBaseObjectGetDerivedStorage();
  return FigSimpleMutexDestroy();
}

uint64_t imageQueueGauge_SetSafeDisplayDuration(uint64_t a1, CMTime *a2)
{
  _QWORD *DerivedStorage;
  __int128 v4;
  int32_t v5;
  __int128 v6;
  CMTime v8;
  CMTime time1;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  if (*((_BYTE *)DerivedStorage + 33))
    goto LABEL_2;
  v4 = *(_OWORD *)(DerivedStorage + 1);
  time1.epoch = DerivedStorage[3];
  *(_OWORD *)&time1.value = v4;
  v8 = *a2;
  v5 = CMTimeCompare(&time1, &v8);
  v6 = *(_OWORD *)&a2->value;
  DerivedStorage[3] = a2->epoch;
  *(_OWORD *)(DerivedStorage + 1) = v6;
  if (!v5)
  {
LABEL_2:
    MEMORY[0x19402EF04](*DerivedStorage);
  }
  else
  {
    MEMORY[0x19402EF04](*DerivedStorage);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  return 0;
}

void imageQueueGauge_GetSafeDisplayDuration(uint64_t a1@<X8>)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)DerivedStorage);
  *(_OWORD *)a1 = *(_OWORD *)(DerivedStorage + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(DerivedStorage + 24);
  JUMPOUT(0x19402EF04);
}

uint64_t imageQueueGauge_SetEnqueueingComplete(uint64_t a1, int a2)
{
  _QWORD *DerivedStorage;
  int v4;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  if (*((_BYTE *)DerivedStorage + 33)
    || (v4 = *((unsigned __int8 *)DerivedStorage + 32), *((_BYTE *)DerivedStorage + 32) = a2, v4 == a2))
  {
    MEMORY[0x19402EF04](*DerivedStorage);
  }
  else
  {
    MEMORY[0x19402EF04](*DerivedStorage);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  return 0;
}

uint64_t imageQueueGauge_GetEnqueueingComplete()
{
  _QWORD *DerivedStorage;
  uint64_t v1;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  v1 = *((unsigned __int8 *)DerivedStorage + 32);
  MEMORY[0x19402EF04](*DerivedStorage);
  return v1;
}

uint64_t FigCaptionRendererCGOutputCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  if (a1 && a2 && a3 && a6)
  {
    *a6 = 0;
    FigCaptionRendererOutputGetClassID();
    CMDerivedObjectCreate();
  }
  return FigSignalErrorAt();
}

uint64_t FigCaptionRendererCGOutputUpdateCGContext(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
    (*(void (**)(uint64_t, _QWORD))(DerivedStorage + 88))(a2, *(_QWORD *)(DerivedStorage + 72));
  return 0;
}

void FigCaptionRendererCGOutput_Finalize()
{
  const void *v0;

  v0 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v0)
    CFRelease(v0);
}

__CFString *FigCaptionRendererCGOutput_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigCaptionRendererCGOutput %p>"), a1);
  return Mutable;
}

uint64_t transactionBegin()
{
  return 0;
}

uint64_t transactionFlush()
{
  return 0;
}

uint64_t transactionCommit()
{
  return 0;
}

uint64_t setNeedsDisplayInRect()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
    (*(void (**)(_QWORD, _QWORD))(DerivedStorage + 88))(*(_QWORD *)DerivedStorage, *(_QWORD *)(DerivedStorage + 72));
  return 0;
}

double getBounds()
{
  return *(double *)(CMBaseObjectGetDerivedStorage() + 8);
}

uint64_t setBounds(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 8) = a1;
  *(double *)(DerivedStorage + 16) = a2;
  *(double *)(DerivedStorage + 24) = a3;
  *(double *)(DerivedStorage + 32) = a4;
  (*(void (**)(_QWORD, uint64_t, double, double, double, double))(DerivedStorage + 80))(*(_QWORD *)(DerivedStorage + 72), a6, a1, a2, a3, a4);
  return 0;
}

uint64_t setVideoBounds(double a1, double a2, double a3, double a4)
{
  double *DerivedStorage;

  DerivedStorage = (double *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[5] = a1;
  DerivedStorage[6] = a2;
  DerivedStorage[7] = a3;
  DerivedStorage[8] = a4;
  return 0;
}

int clear(void)
{
  double v0;
  double v1;
  double v2;
  double v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGContextRef *DerivedStorage;
  CGContextRef *v9;
  CGRect v11;
  CGRect v12;

  v4 = v3;
  v5 = v2;
  v6 = v1;
  v7 = v0;
  DerivedStorage = (CGContextRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    v9 = DerivedStorage;
    v11.origin.x = v7;
    v11.origin.y = v6;
    v11.size.width = v5;
    v11.size.height = v4;
    if (CGRectEqualToRect(v11, *MEMORY[0x1E0C9D628]))
    {
      CGContextClear();
    }
    else
    {
      v12.origin.x = v7;
      v12.origin.y = v6;
      v12.size.width = v5;
      v12.size.height = v4;
      CGContextClearRect(*v9, v12);
    }
  }
  return 0;
}

double FigCPEOctaviaPKDMovieIDInit(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

void FigCPEOctaviaPKDMovieIDFinalize(uint64_t a1)
{
  NSObject *v2;
  const void *v3;
  _QWORD block[5];

  v2 = *(NSObject **)(a1 + 16);
  if (v2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __FigCPEOctaviaPKDMovieIDFinalize_block_invoke;
    block[3] = &__block_descriptor_tmp_7;
    block[4] = a1;
    dispatch_sync(v2, block);
    dispatch_release(*(dispatch_object_t *)(a1 + 16));
  }
  v3 = *(const void **)(a1 + 88);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 88) = 0;
  }
}

uint64_t FigCPEOctaviaPKDMovieIDCreateCommon(uint64_t a1, unint64_t a2, unint64_t a3, const void *a4, _QWORD *a5)
{
  uint64_t Instance;
  _QWORD *v10;
  dispatch_queue_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v13)(uint64_t, uint64_t, int);
  uint64_t (*v14)(uint64_t);
  CFTypeRef v15;
  CFTypeRef v16;
  uint64_t result;

  if (!(a2 | a3) || !a5)
    return FigSignalErrorAt();
  *a5 = 0;
  if (FigCPEOctaviaPKDMovieIDGetTypeID_once != -1)
    dispatch_once(&FigCPEOctaviaPKDMovieIDGetTypeID_once, &__block_literal_global);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v10 = (_QWORD *)Instance;
    v11 = dispatch_queue_create("com.apple.FigCPEOctaviaPKDMovieID", 0);
    v10[2] = v11;
    if (v11)
    {
      v12 = pduR7VAgOpwwTZi6E;
      if (a3)
        v12 = Qt84D4aopGP;
      v13 = at7Z1NwMd;
      if (!a3)
        v13 = f5dnLMQHpqo6KM9x;
      v10[8] = v12;
      v10[9] = v13;
      v14 = n2qn70S3cN6uyWbw;
      if (a3)
        v14 = mfGhVpprP0qip8G;
      v10[10] = v14;
      if (a3)
      {
        v10[7] = CFRetain((CFTypeRef)a3);
        if (a4)
        {
LABEL_15:
          v15 = CFRetain(a4);
LABEL_21:
          v10[11] = v15;
          NeroTransportRegisterObjectWithFlags();
          result = 0;
          *a5 = v10;
          return result;
        }
      }
      else
      {
        if (a2)
          v16 = CFRetain((CFTypeRef)a2);
        else
          v16 = 0;
        v10[3] = v16;
        if (a4)
          goto LABEL_15;
      }
      v15 = 0;
      goto LABEL_21;
    }
    CFRelease(v10);
  }
  return 4294955145;
}

void FigCFRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t FigCPEOctaviaPKDMovieIDCreate(uint64_t a1, unint64_t a2, const void *a3, _QWORD *a4)
{
  return FigCPEOctaviaPKDMovieIDCreateCommon(a1, a2, 0, a3, a4);
}

uint64_t FigCPEOctaviaPKDMovieIDCreateForMSE(uint64_t a1, unint64_t a2, const void *a3, _QWORD *a4)
{
  return FigCPEOctaviaPKDMovieIDCreateCommon(a1, 0, a2, a3, a4);
}

uint64_t FigCPEOctaviaPKDMovieIDGetValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  uint64_t v4;
  _QWORD v6[8];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  v3 = *(NSObject **)(a1 + 16);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = __FigCPEOctaviaPKDMovieIDGetValue_block_invoke;
  v6[3] = &unk_1E2F77B38;
  v6[4] = &v7;
  v6[5] = a1;
  v6[6] = a2;
  v6[7] = a3;
  dispatch_sync(v3, v6);
  v4 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v4;
}

uint64_t FigCPEOctaviaPKDMovieIDGetSerializationToken(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD block[7];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  if (a2)
  {
    v2 = *(NSObject **)(a1 + 16);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __FigCPEOctaviaPKDMovieIDGetSerializationToken_block_invoke;
    block[3] = &unk_1E2F77B60;
    block[5] = a1;
    block[6] = a2;
    block[4] = &v6;
    dispatch_sync(v2, block);
    v3 = *((unsigned int *)v7 + 6);
  }
  else
  {
    v3 = 4294955146;
    v9 = -12150;
  }
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t RegisterFigPKDOctaviaCPECryptorType()
{
  FigCPECryptorGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigCPEOctaviaPKDCryptorCreate(const void *a1, unint64_t *a2, _QWORD *a3, const __CFDictionary *a4, const void *a5, const void *a6, CFTypeRef *a7)
{
  CFDictionaryRef v7;
  uint64_t v8;
  uint64_t CFNumberFromRemoteObjectRef;
  uint64_t DerivedStorage;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CFTypeRef v21;
  uint64_t v22;
  const void *Value;
  const void *v24;
  CFTypeID v25;
  const void *v26;
  CFTypeRef v27;
  const void *v28;
  const void *v29;
  CFTypeRef *v31;
  void *values;
  uint64_t v33;
  CFTypeRef cf;

  v7 = 0;
  v33 = 0;
  cf = 0;
  values = 0;
  v8 = 4294955146;
  if (!a4 || !a6 || !a1 || !a2 || !a3 || !a7)
    goto LABEL_34;
  MEMORY[0x19402F294](&FigCPEOctaviaPKDCryptorGetClassID_sRegisterFigPKDOctaviaCPECryptorTypeOnce, RegisterFigPKDOctaviaCPECryptorType);
  CFNumberFromRemoteObjectRef = CMDerivedObjectCreate();
  if ((_DWORD)CFNumberFromRemoteObjectRef)
    goto LABEL_43;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage
    || (v18 = DerivedStorage,
        v19 = FigCFWeakReferenceHolderCreateWithReferencedObject(),
        (*(_QWORD *)(v18 + 40) = v19) == 0)
    || (v20 = FigSimpleMutexCreate(), (*(_QWORD *)(v18 + 32) = v20) == 0))
  {
    v7 = 0;
    goto LABEL_42;
  }
  v31 = a7;
  *(_QWORD *)v18 = CFRetain(a1);
  *(_DWORD *)(v18 + 96) = 1;
  *(_QWORD *)(v18 + 104) = CFRetain(CFSTR("com.apple.pkd"));
  *(_QWORD *)(v18 + 112) = CFRetain(a3);
  v21 = a5 ? CFRetain(a5) : 0;
  *(_QWORD *)(v18 + 120) = v21;
  *(_QWORD *)(v18 + 48) = CFRetain(a2);
  CFNumberFromRemoteObjectRef = FigCPEOctaviaPKDMovieIDGetSerializationToken((uint64_t)a2, (uint64_t)&v33);
  if ((_DWORD)CFNumberFromRemoteObjectRef
    || (CFNumberFromRemoteObjectRef = FigTransportCreateCFNumberFromRemoteObjectRef(),
        (_DWORD)CFNumberFromRemoteObjectRef))
  {
LABEL_43:
    v8 = CFNumberFromRemoteObjectRef;
    v7 = 0;
    goto LABEL_34;
  }
  v7 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&kFigCPENeroKey_MovieIDSerializationToken, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v7)
  {
LABEL_42:
    v8 = 4294955145;
    goto LABEL_34;
  }
  v22 = FigPKDCPECryptorCreate(a1, a2[3], 0, a3, (const __CFAllocator *)a5, a4, (CFTypeRef *)(v18 + 16));
  if ((_DWORD)v22)
    goto LABEL_33;
  v22 = FigPKDOctaviaCPECryptorAddListenerOnLocalCryptor();
  if ((_DWORD)v22)
    goto LABEL_33;
  v22 = FigOctaviaCPECryptorCreate(a1, CFSTR("com.apple.pkd"), a3, v7, (uint64_t)a5, a6, (_QWORD *)(v18 + 8));
  if ((_DWORD)v22)
    goto LABEL_33;
  CMNotificationCenterGetDefaultLocalCenter();
  v22 = CMNotificationCenterAddListener();
  if ((_DWORD)v22)
    goto LABEL_33;
  Value = CFDictionaryGetValue(a4, CFSTR("AuditToken"));
  if (Value)
  {
    v24 = Value;
    v25 = CFGetTypeID(Value);
    if (v25 == CFDataGetTypeID())
      *(_QWORD *)(v18 + 64) = CFRetain(v24);
  }
  v26 = CFDictionaryGetValue(a4, CFSTR("CryptKeyAttributes"));
  if (!v26)
  {
    *(_QWORD *)(v18 + 152) = 0;
    goto LABEL_32;
  }
  v27 = CFRetain(v26);
  *(_QWORD *)(v18 + 152) = v27;
  if (!v27)
  {
LABEL_32:
    v22 = FigSignalErrorAt();
LABEL_33:
    v8 = v22;
    goto LABEL_34;
  }
  v28 = CFDictionaryGetValue(a4, CFSTR("iTunesRentalID"));
  if (v28)
    v28 = CFRetain(v28);
  *(_QWORD *)(v18 + 80) = v28;
  v29 = CFDictionaryGetValue(a4, CFSTR("iTunesAccountID"));
  if (v29)
    v29 = CFRetain(v29);
  v8 = 0;
  *(_QWORD *)(v18 + 88) = v29;
  *v31 = cf;
  cf = 0;
LABEL_34:
  if (values)
    CFRelease(values);
  if (v7)
    CFRelease(v7);
  if (cf)
    CFRelease(cf);
  return v8;
}

uint64_t FigPKDOctaviaCPECryptorAddListenerOnLocalCryptor()
{
  uint64_t result;

  CMNotificationCenterGetDefaultLocalCenter();
  LODWORD(result) = FigNotificationCenterAddWeakListener();
  if ((_DWORD)result == -12724)
    return 0;
  else
    return result;
}

uint64_t ExternalProtectionStatusChangedCallback()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t FigCPEOctaviaPKDCryptorCreateForMSE(const void *a1, const void *a2, const void *a3, _QWORD *a4, const __CFDictionary *a5, const void *a6, const void *a7, CFTypeRef *a8)
{
  CFDictionaryRef v8;
  uint64_t v9;
  uint64_t CFNumberFromRemoteObjectRef;
  uint64_t DerivedStorage;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  CFTypeRef v23;
  CFTypeRef v24;
  uint64_t v25;
  const void *Value;
  const void *v27;
  CFTypeID v28;
  const void *v29;
  CFTypeRef v30;
  CFTypeRef *v32;
  const void *v33;
  void *values;
  uint64_t v35;
  CFTypeRef cf;

  v8 = 0;
  v35 = 0;
  cf = 0;
  values = 0;
  v9 = 4294955146;
  if (!a5 || !a7 || !a4 || !a2 || !a1 || !a3 || !a8)
    goto LABEL_34;
  MEMORY[0x19402F294](&FigCPEOctaviaPKDCryptorGetClassID_sRegisterFigPKDOctaviaCPECryptorTypeOnce, RegisterFigPKDOctaviaCPECryptorType);
  CFNumberFromRemoteObjectRef = CMDerivedObjectCreate();
  if ((_DWORD)CFNumberFromRemoteObjectRef)
    goto LABEL_43;
  v33 = a7;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage
    || (v20 = DerivedStorage, v21 = FigSimpleMutexCreate(), (*(_QWORD *)(v20 + 32) = v21) == 0)
    || (v22 = FigCFWeakReferenceHolderCreateWithReferencedObject(), (*(_QWORD *)(v20 + 40) = v22) == 0))
  {
    v8 = 0;
    goto LABEL_42;
  }
  v32 = a8;
  *(_QWORD *)v20 = CFRetain(a1);
  *(_DWORD *)(v20 + 96) = 1;
  v23 = CFSTR("com.apple.pkdmse") ? CFRetain(CFSTR("com.apple.pkdmse")) : 0;
  *(_QWORD *)(v20 + 104) = v23;
  *(_QWORD *)(v20 + 112) = CFRetain(a4);
  v24 = a6 ? CFRetain(a6) : 0;
  *(_QWORD *)(v20 + 120) = v24;
  *(_QWORD *)(v20 + 56) = CFRetain(a3);
  *(_QWORD *)(v20 + 48) = CFRetain(a2);
  CFNumberFromRemoteObjectRef = FigCPEOctaviaPKDMovieIDGetSerializationToken((uint64_t)a2, (uint64_t)&v35);
  if ((_DWORD)CFNumberFromRemoteObjectRef
    || (CFNumberFromRemoteObjectRef = FigTransportCreateCFNumberFromRemoteObjectRef(),
        (_DWORD)CFNumberFromRemoteObjectRef))
  {
LABEL_43:
    v9 = CFNumberFromRemoteObjectRef;
    v8 = 0;
    goto LABEL_34;
  }
  v8 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&kFigCPENeroKey_MovieIDSerializationToken, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v8)
  {
LABEL_42:
    v9 = 4294955145;
    goto LABEL_34;
  }
  v25 = FigPKDMSECPECryptorCreate(a1, a3, a4, (const __CFAllocator *)a6, a5, (CFTypeRef *)(v20 + 16));
  if (!(_DWORD)v25)
  {
    v25 = FigPKDOctaviaCPECryptorAddListenerOnLocalCryptor();
    if (!(_DWORD)v25)
    {
      v25 = FigOctaviaCPECryptorCreate(a1, CFSTR("com.apple.pkdmse"), a4, v8, (uint64_t)a6, v33, (_QWORD *)(v20 + 8));
      if (!(_DWORD)v25)
      {
        CMNotificationCenterGetDefaultLocalCenter();
        v25 = CMNotificationCenterAddListener();
        if (!(_DWORD)v25)
        {
          Value = CFDictionaryGetValue(a5, CFSTR("AuditToken"));
          if (Value)
          {
            v27 = Value;
            v28 = CFGetTypeID(Value);
            if (v28 == CFDataGetTypeID())
              *(_QWORD *)(v20 + 64) = CFRetain(v27);
          }
          v29 = CFDictionaryGetValue(a5, CFSTR("CryptKeyAttributes"));
          if (v29)
          {
            v30 = CFRetain(v29);
            *(_QWORD *)(v20 + 152) = v30;
            if (v30)
            {
              v9 = 0;
              *v32 = cf;
              cf = 0;
              goto LABEL_34;
            }
          }
          else
          {
            *(_QWORD *)(v20 + 152) = 0;
          }
          v25 = FigSignalErrorAt();
        }
      }
    }
  }
  v9 = v25;
LABEL_34:
  if (values)
    CFRelease(values);
  if (v8)
    CFRelease(v8);
  if (cf)
    CFRelease(cf);
  return v9;
}

CFTypeRef FigPKDOctaviaCPECryptorCopyFormattingDesc()
{
  return CFRetain(CFSTR("[FigPKDOctaviaCPECryptor]"));
}

BOOL FigPKDOctaviaCPECryptorEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t FigPKDOctaviaCPECryptorInvalidate(const void *a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 32));
  *(_BYTE *)(DerivedStorage + 24) = 1;
  *(_DWORD *)(DerivedStorage + 96) = 0;
  StopAndReleaseTimer((dispatch_object_t *)(DerivedStorage + 128));
  v3 = *(const void **)(DerivedStorage + 48);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 56);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 56) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 64);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 64) = 0;
  }
  if (*(_QWORD *)(DerivedStorage + 8))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
  }
  if (*(_QWORD *)(DerivedStorage + 16))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  v7 = *(const void **)DerivedStorage;
  v6 = *(const void **)(DerivedStorage + 8);
  *(_QWORD *)DerivedStorage = 0;
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  v8 = *(const void **)(DerivedStorage + 16);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v9 = *(const void **)(DerivedStorage + 80);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(DerivedStorage + 80) = 0;
  }
  v10 = *(const void **)(DerivedStorage + 88);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(DerivedStorage + 88) = 0;
  }
  v11 = *(const void **)(DerivedStorage + 40);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  v12 = *(const void **)(DerivedStorage + 120);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(DerivedStorage + 120) = 0;
  }
  v13 = *(const void **)(DerivedStorage + 112);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(DerivedStorage + 112) = 0;
  }
  v14 = *(const void **)(DerivedStorage + 104);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(DerivedStorage + 104) = 0;
  }
  v15 = *(const void **)(DerivedStorage + 144);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(DerivedStorage + 144) = 0;
  }
  v16 = *(const void **)(DerivedStorage + 152);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(DerivedStorage + 152) = 0;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 32));
  if (v7)
  {
    FigPKDCPEProtectorCryptorWasInvalidated((uint64_t)v7, a1);
    CFRelease(v7);
  }
  return 0;
}

uint64_t FigPKDOctaviaCPECryptorFinalize(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigPKDOctaviaCPECryptorInvalidate(a1);
  result = *(_QWORD *)(DerivedStorage + 32);
  if (result)
  {
    result = FigSimpleMutexDestroy();
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  return result;
}

__CFString *FigPKDOctaviaCPECryptorCopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  BOOL v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 32));
  if (*(_BYTE *)(DerivedStorage + 24))
    v5 = 1;
  else
    v5 = Mutable == 0;
  if (!v5)
    CFStringAppendFormat(Mutable, 0, CFSTR("<FigPKDOctaviaCPECryptor: protectorParent<%@> >"), *(_QWORD *)DerivedStorage);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 32));
  return Mutable;
}

uint64_t FigPKDOctaviaCPECryptorCopyProperty(const void *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  const void *SInt32;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, const void *, uint64_t, uint64_t *);
  uint64_t v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = 4294955146;
  if (a2 && a4)
  {
    v10 = DerivedStorage;
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 32));
    if (*(_BYTE *)(v10 + 24))
    {
      v9 = 4294954511;
LABEL_17:
      MEMORY[0x19402EF04](*(_QWORD *)(v10 + 32));
      return v9;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31A0]))
    {
      v9 = 4294951076;
      goto LABEL_17;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31E8]))
    {
      SInt32 = (const void *)FigCFNumberCreateSInt32();
LABEL_9:
      v9 = 0;
      *a4 = (uint64_t)SInt32;
      goto LABEL_17;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31F0]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3238]))
    {
      v12 = *(_QWORD *)(v10 + 16);
LABEL_13:
      v13 = *(uint64_t (**)(uint64_t, const void *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
      if (!v13)
      {
        v9 = 4294954514;
        goto LABEL_17;
      }
      v14 = v13(v12, a2, a3, a4);
      goto LABEL_15;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3230]))
    {
      v14 = EnsureUUID(a1);
      if (!(_DWORD)v14)
      {
        SInt32 = *(const void **)(v10 + 144);
        if (!SInt32)
          goto LABEL_9;
        goto LABEL_22;
      }
    }
    else
    {
      if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31B8]))
      {
        if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31B0]))
        {
          v12 = *(_QWORD *)(v10 + 8);
          goto LABEL_13;
        }
        SInt32 = *(const void **)(v10 + 152);
        if (!SInt32)
          goto LABEL_9;
LABEL_22:
        SInt32 = CFRetain(SInt32);
        goto LABEL_9;
      }
      v14 = CopyCurrentRequestID(v10, a4);
    }
LABEL_15:
    v9 = v14;
    goto LABEL_17;
  }
  return v9;
}

uint64_t FigPKDOctaviaCPECryptorSetProperty(const void *a1, const void *a2, void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, const void *, void *);
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, const void *, void *);
  uint64_t v15;
  const void *v16;
  CFTypeID v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, const void *, void *);
  uint64_t v20;
  uint64_t (*v21)(uint64_t, const void *, void *);
  CFDictionaryRef v22;
  CFDictionaryRef v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  CFTypeID v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, void *);
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v34;
  const __CFAllocator *v35;
  CFPropertyListRef v36;
  const void *v37;
  CFTypeID v38;
  CFTypeRef v39;
  CFDataRef v40;
  CFTypeID v41;
  uint64_t v42;
  uint64_t v44;
  CFTypeRef v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, uint64_t);
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v49;
  CFMutableDictionaryRef v50;
  const __CFDictionary *v51;
  const void *UInt64;
  uint64_t v53;
  const void *Value;
  const void *v55;
  CFTypeRef v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t (*v59)(uint64_t, CFTypeRef, CFTypeRef *);
  uint64_t v60;
  CFDictionaryRef v61;
  CFDictionaryRef v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t BytesFromCFString;
  UInt8 *v66;
  CFIndex Length;
  uint64_t v68;
  uint64_t (*v69)(uint64_t, _QWORD, CFDataRef);
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t, uint64_t, CFTypeRef);
  uint64_t v73;
  const void *v74;
  _QWORD *v75;
  uint64_t v76;
  void *values;
  uint64_t v78;
  CFTypeRef cf;
  CFTypeRef v80;

  values = a3;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294955146;
  v7 = DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 32));
  if (!*(_BYTE *)(v7 + 24))
  {
    v9 = (const void *)*MEMORY[0x1E0CA3208];
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3208]))
    {
      v10 = *(_QWORD *)(v7 + 16);
      v11 = *(uint64_t (**)(uint64_t, const void *, void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v11)
      {
        v12 = v11(v10, v9, a3);
        if ((_DWORD)v12)
        {
LABEL_10:
          v8 = v12;
          goto LABEL_52;
        }
        v13 = *(_QWORD *)(v7 + 8);
        v14 = *(uint64_t (**)(uint64_t, const void *, void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
        if (v14)
        {
          v15 = v13;
          v16 = v9;
LABEL_9:
          v12 = v14(v15, v16, a3);
          goto LABEL_10;
        }
      }
      goto LABEL_51;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31E0]))
    {
      if (a3)
      {
        v17 = CFGetTypeID(a3);
        if (v17 == CFErrorGetTypeID())
        {
          *(_DWORD *)(v7 + 96) = 1;
          v18 = *(_QWORD *)(v7 + 16);
          v19 = *(uint64_t (**)(uint64_t, const void *, void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
          if (v19)
          {
            v12 = v19(v18, a2, a3);
            if ((_DWORD)v12)
              goto LABEL_10;
            v20 = *(_QWORD *)(v7 + 8);
            v21 = *(uint64_t (**)(uint64_t, const void *, void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
            if (v21)
            {
              v12 = v21(v20, a2, a3);
              if (!(_DWORD)v12)
              {
                v22 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], MEMORY[0x1E0CA3120], (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                if (v22)
                {
                  v23 = v22;
                  dispatch_get_global_queue(0, 0);
                  CMNotificationCenterGetDefaultLocalCenter();
                  FigDispatchAsyncPostNotification();
                  CFRelease(v23);
                  v8 = 0;
                }
                else
                {
                  v8 = 4294955145;
                }
                goto LABEL_52;
              }
              goto LABEL_10;
            }
          }
          goto LABEL_51;
        }
      }
LABEL_104:
      v8 = 4294955136;
      goto LABEL_52;
    }
    v24 = *MEMORY[0x1E0CA31F0];
    if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31F0]))
    {
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3238]))
      {
        if (!a3)
          goto LABEL_104;
        v41 = CFGetTypeID(a3);
        if (v41 != CFBooleanGetTypeID())
          goto LABEL_104;
        *(_BYTE *)(v7 + 72) = CFBooleanGetValue((CFBooleanRef)a3);
        v42 = *(_QWORD *)(v7 + 16);
      }
      else
      {
        v42 = *(_QWORD *)(v7 + 8);
      }
      v14 = *(uint64_t (**)(uint64_t, const void *, void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v14)
      {
        v15 = v42;
        v16 = a2;
        goto LABEL_9;
      }
LABEL_51:
      v8 = 4294954514;
      goto LABEL_52;
    }
    v78 = 0;
    cf = 0;
    v25 = CMBaseObjectGetDerivedStorage();
    if (!*(_QWORD *)(v25 + 48) || !a3 || (v26 = (_QWORD *)v25, v27 = CFGetTypeID(a3), v27 != CFDataGetTypeID()))
    {
      v31 = FigSignalErrorAt();
      goto LABEL_106;
    }
    v28 = *(_QWORD *)(v26[6] + 56);
    v29 = v26[2];
    v30 = *(uint64_t (**)(uint64_t, uint64_t, void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v30)
    {
      v31 = v30(v29, v24, a3);
      if ((_DWORD)v31)
        goto LABEL_106;
      v32 = v26[2];
      v33 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
      if (v33)
      {
        v34 = *MEMORY[0x1E0CA31F8];
        v35 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v31 = v33(v32, *MEMORY[0x1E0CA31F8], *MEMORY[0x1E0C9AE00], &cf);
        if (!(_DWORD)v31)
        {
          v73 = v34;
          v76 = v28;
          if (v28)
          {
            v36 = CFPropertyListCreateWithData(v35, (CFDataRef)a3, 0, 0, 0);
            if (v36)
            {
              v37 = v36;
              v38 = CFGetTypeID(v36);
              if (v38 == CFDictionaryGetTypeID())
                goto LABEL_55;
              v8 = FigSignalErrorAt();
              CFRelease(v37);
            }
            else
            {
              v8 = FigSignalErrorAt();
            }
            v37 = 0;
            v39 = 0;
            v40 = 0;
            if ((_DWORD)v8)
              goto LABEL_34;
          }
          else
          {
            v37 = 0;
          }
LABEL_55:
          v75 = v26;
          v44 = FigCPEOctaviaPKDMovieIDGetValue(v26[6], (uint64_t)v37, (uint64_t)&v78);
          if ((_DWORD)v44)
          {
            v8 = v44;
            v39 = 0;
            goto LABEL_117;
          }
          v45 = cf;
          v46 = CMBaseObjectGetDerivedStorage();
          v80 = 0;
          if (v76)
            v47 = uZOxRFTqHPWsyRz;
          else
            v47 = kNsH5DWSn1J;
          Mutable = CFDictionaryCreateMutable(v35, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (!Mutable)
          {
            v8 = FigSignalErrorAt();
            v39 = 0;
            v62 = 0;
            goto LABEL_85;
          }
          v49 = Mutable;
          v74 = v37;
          v50 = CFDictionaryCreateMutable(v35, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (!v50)
          {
            v8 = FigSignalErrorAt();
            CFRelease(v49);
            v39 = 0;
            v62 = 0;
            v26 = v75;
            goto LABEL_85;
          }
          v51 = v50;
          UInt64 = (const void *)FigCFNumberCreateUInt64();
          if (UInt64)
          {
            CFDictionarySetValue(v49, CFSTR("aMII4QYJ"), UInt64);
            CFDictionarySetValue(v49, CFSTR("igoeg"), v45);
            CFDictionarySetValue(v49, CFSTR("lGxB4ky"), *(const void **)(v46 + 64));
            FigCFDictionarySetInt32();
            v53 = v47((uint64_t)v49, (uint64_t)v51);
            if (!(_DWORD)v53)
            {
              Value = CFDictionaryGetValue(v51, CFSTR("CBQGVxY"));
              if (Value)
                v39 = CFRetain(Value);
              else
                v39 = 0;
              v55 = CFDictionaryGetValue(v51, CFSTR("igoeg"));
              if (v55)
              {
                v56 = CFRetain(v55);
                if (v56)
                {
                  v57 = *(_QWORD *)(v46 + 16);
                  v58 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
                  if (*v58 >= 6uLL && (v59 = (uint64_t (*)(uint64_t, CFTypeRef, CFTypeRef *))v58[21]) != 0)
                  {
                    v60 = v59(v57, v56, &v80);
                    if (!(_DWORD)v60)
                    {
                      v61 = CFDictionaryCreate(v35, MEMORY[0x1E0CA3188], &v80, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                      if (v61)
                      {
                        v62 = v61;
                        dispatch_get_global_queue(0, 0);
                        CMNotificationCenterGetDefaultLocalCenter();
                        FigDispatchAsyncPostNotification();
                        v8 = 0;
                        goto LABEL_80;
                      }
                      v60 = FigSignalErrorAt();
                    }
                    v8 = v60;
                    if (!v39)
                    {
LABEL_77:
                      CFRelease(v49);
                      CFRelease(v51);
                      v39 = 0;
                      v62 = 0;
                      goto LABEL_81;
                    }
                  }
                  else
                  {
                    v8 = 4294954514;
                    if (!v39)
                      goto LABEL_77;
                  }
                  CFRelease(v39);
                  goto LABEL_77;
                }
                v8 = 0;
LABEL_79:
                v62 = 0;
LABEL_80:
                CFRelease(v49);
                CFRelease(v51);
                if (!UInt64)
                {
LABEL_82:
                  v26 = v75;
                  if (v56)
                    CFRelease(v56);
                  v37 = v74;
LABEL_85:
                  if (v80)
                    CFRelease(v80);
                  if (v62)
                    CFRelease(v62);
                  if (!(_DWORD)v8)
                  {
                    if (!v76)
                    {
                      v40 = 0;
LABEL_100:
                      v71 = v26[1];
                      v72 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 56);
                      if (v72)
                      {
                        v70 = v72(v71, v73, v39);
LABEL_102:
                        v8 = v70;
                        goto LABEL_34;
                      }
LABEL_33:
                      v8 = 4294954514;
LABEL_34:
                      if (cf)
                        CFRelease(cf);
                      if (v39)
                        CFRelease(v39);
                      if (v37)
                        CFRelease(v37);
                      if (v40)
                        CFRelease(v40);
                      if (!(_DWORD)v8)
                        *(_BYTE *)(v7 + 72) = 1;
                      goto LABEL_52;
                    }
                    v63 = CMBaseObjectGetDerivedStorage();
                    v64 = EnsureUUID(a1);
                    if (!(_DWORD)v64)
                    {
                      BytesFromCFString = FigCreateBytesFromCFString();
                      if (BytesFromCFString)
                      {
                        v66 = (UInt8 *)BytesFromCFString;
                        Length = CFStringGetLength(*(CFStringRef *)(v63 + 144));
                        v40 = CFDataCreate(v35, v66, Length);
                        if (v40)
                          v8 = 0;
                        else
                          v8 = FigSignalErrorAt();
                        CFAllocatorDeallocate(v35, v66);
                        if ((_DWORD)v8)
                          goto LABEL_34;
                      }
                      else
                      {
                        v8 = FigSignalErrorAt();
                        v40 = 0;
                        if ((_DWORD)v8)
                          goto LABEL_34;
                      }
                      v68 = v26[1];
                      v69 = *(uint64_t (**)(uint64_t, _QWORD, CFDataRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 56);
                      if (!v69)
                        goto LABEL_33;
                      v70 = v69(v68, *MEMORY[0x1E0CA3190], v40);
                      if ((_DWORD)v70)
                        goto LABEL_102;
                      goto LABEL_100;
                    }
                    v8 = v64;
                  }
LABEL_117:
                  v40 = 0;
                  goto LABEL_34;
                }
LABEL_81:
                CFRelease(UInt64);
                goto LABEL_82;
              }
              v8 = 0;
LABEL_74:
              v56 = 0;
              goto LABEL_79;
            }
          }
          else
          {
            v53 = FigSignalErrorAt();
          }
          v8 = v53;
          v39 = 0;
          goto LABEL_74;
        }
LABEL_106:
        v8 = v31;
        v39 = 0;
        v40 = 0;
        v37 = 0;
        goto LABEL_34;
      }
    }
    v39 = 0;
    v40 = 0;
    v37 = 0;
    goto LABEL_33;
  }
  v8 = 4294954511;
LABEL_52:
  MEMORY[0x19402EF04](*(_QWORD *)(v7 + 32));
  return v8;
}

void StopAndReleaseTimer(dispatch_object_t *a1)
{
  NSObject *v2;

  if (a1)
  {
    v2 = *a1;
    if (v2)
    {
      dispatch_source_cancel(v2);
      dispatch_release(*a1);
      *a1 = 0;
    }
  }
}

uint64_t FigPKDOctaviaCPECryptorLocalCryptorUpdatedPersistentKeyCallback()
{
  dispatch_get_global_queue(0, 0);
  CMNotificationCenterGetDefaultLocalCenter();
  return FigDispatchAsyncPostNotification();
}

uint64_t EnsureUUID(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const __CFAllocator *v4;
  CFUUIDRef v5;
  const __CFUUID *v6;
  const __CFAllocator *v7;
  CFStringRef v8;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 144))
    return 0;
  v3 = DerivedStorage;
  v4 = CFGetAllocator(a1);
  v5 = CFUUIDCreate(v4);
  if (v5)
  {
    v6 = v5;
    v7 = CFGetAllocator(a1);
    v8 = CFUUIDCreateString(v7, v6);
    *(_QWORD *)(v3 + 144) = v8;
    if (v8)
      v9 = 0;
    else
      v9 = FigSignalErrorAt();
    CFRelease(v6);
    return v9;
  }
  return FigSignalErrorAt();
}

uint64_t CopyCurrentRequestID(uint64_t a1, uint64_t *a2)
{
  uint64_t SInt64;

  SInt64 = FigCFNumberCreateSInt64();
  *a2 = SInt64;
  if (SInt64)
    return 0;
  else
    return FigSignalErrorAt();
}

uint64_t FigPKDOctaviaCPECryptorGetExternalProtectionMethods(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294955146;
  v4 = DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 32));
  if (*(_BYTE *)(v4 + 24))
  {
    v5 = 4294954511;
  }
  else
  {
    v6 = *(_QWORD *)(v4 + 8);
    v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v7)
      v7(v6, a2);
    v5 = 0;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v4 + 32));
  return v5;
}

uint64_t FigPKDOctaviaCPECryptorGetAggregateExternalProtectionStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
    return 4294955146;
  v6 = DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 32));
  if (*(_BYTE *)(v6 + 24))
  {
    v7 = 4294954511;
  }
  else
  {
    v8 = *(_QWORD *)(v6 + 8);
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v9)
      v9(v8, a2, a3);
    v7 = 0;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v6 + 32));
  return v7;
}

uint64_t FigPKDOctaviaCPECryptorCreateKeyRequest(uint64_t a1, const __CFDictionary *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  const __CFAllocator *v10;
  __CFDictionary *MutableCopy;
  __CFDictionary *v12;
  const void *v13;
  __CFDictionary *v14;
  __CFDictionary *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t (*v18)(uint64_t, __CFDictionary *, uint64_t, _QWORD *);
  const void *Value;
  int v20;
  const void *v21;
  const void *v22;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v24;
  CFMutableDictionaryRef v25;
  const __CFDictionary *v26;
  const void *v27;
  CFTypeRef v28;
  NSObject *global_queue;
  uint64_t v30;
  uint64_t *v31;
  const void *v32;
  int v33;
  __CFDictionary *v35;
  NSObject *group;
  _QWORD v37[7];
  _QWORD block[9];
  int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = 4294955146;
  if (!a2 || !a4)
    return v8;
  v9 = DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 32));
  if (*(_BYTE *)(v9 + 24))
  {
    v8 = 4294954511;
LABEL_5:
    MEMORY[0x19402EF04](*(_QWORD *)(v9 + 32));
    return v8;
  }
  if (!PKDKeyRequestIDsMatch((uint64_t)a2, *(_QWORD *)(v9 + 136)))
  {
    v8 = FigSignalErrorAt();
    goto LABEL_5;
  }
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a2);
  if (!MutableCopy)
  {
LABEL_48:
    v8 = 4294955145;
    goto LABEL_5;
  }
  v12 = MutableCopy;
  v13 = (const void *)*MEMORY[0x1E0CA4D30];
  CFDictionaryRemoveValue(MutableCopy, (const void *)*MEMORY[0x1E0CA4D30]);
  v14 = CFDictionaryCreateMutableCopy(v10, 0, a2);
  if (!v14)
  {
    CFRelease(v12);
    goto LABEL_48;
  }
  v15 = v14;
  CFDictionaryRemoveValue(v14, v13);
  if (*(_BYTE *)(v9 + 72))
  {
    v16 = *(_QWORD *)(v9 + 16);
    v17 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
    if (*v17 >= 4uLL && (v18 = (uint64_t (*)(uint64_t, __CFDictionary *, uint64_t, _QWORD *))v17[11]) != 0)
    {
      v8 = v18(v16, v12, a3, a4);
      Value = 0;
      v20 = 0;
    }
    else
    {
      Value = 0;
      v20 = 0;
      v8 = 4294954514;
    }
    goto LABEL_40;
  }
  group = dispatch_group_create();
  v44 = 0;
  v45 = &v44;
  v46 = 0x2000000000;
  v47 = 0;
  v40 = 0;
  v41 = &v40;
  v42 = 0x2000000000;
  v43 = 0;
  Value = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA4D10]);
  if (!Value)
  {
    v20 = 0;
    goto LABEL_50;
  }
  v35 = v12;
  v21 = *(const void **)(v9 + 80);
  v22 = *(const void **)(v9 + 88);
  v48 = 0;
  Mutable = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v24 = Mutable;
    v25 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v25)
    {
      v26 = v25;
      FigCFDictionarySetInt32();
      if (v21)
        CFDictionarySetValue(v24, CFSTR("lK1"), v21);
      if (v22)
        CFDictionarySetValue(v24, CFSTR("DhpWkh3rnR"), v22);
      CFDictionarySetValue(v24, CFSTR("Y7bdIsnh7"), Value);
      if (nS1Q9ljw9esy9((uint64_t)v24, (uint64_t)v26))
      {
        v20 = 0;
      }
      else
      {
        FigCFDictionaryGetInt64IfPresent();
        v20 = v48;
        v27 = CFDictionaryGetValue(v26, CFSTR("xNJu5eepP"));
        if (v27)
        {
          v28 = CFRetain(v27);
          if (v28)
          {
            Value = v28;
            v8 = 0;
LABEL_26:
            CFRelease(v24);
            CFRelease(v26);
            goto LABEL_27;
          }
        }
      }
      v8 = FigSignalErrorAt();
      Value = 0;
      goto LABEL_26;
    }
    v8 = FigSignalErrorAt();
    CFRelease(v24);
  }
  else
  {
    v8 = FigSignalErrorAt();
  }
  Value = 0;
  v20 = 0;
LABEL_27:
  v12 = v35;
  if ((_DWORD)v8)
  {
LABEL_50:
    v33 = 0;
    goto LABEL_39;
  }
  CFDictionaryAddValue(v15, (const void *)*MEMORY[0x1E0CA4D58], Value);
  global_queue = dispatch_get_global_queue(0, 0);
  v30 = MEMORY[0x1E0C809B0];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __FigPKDOctaviaCPECryptorCreateKeyRequest_block_invoke;
  block[3] = &unk_1E2F77D68;
  block[6] = v9;
  block[7] = v15;
  block[8] = a3;
  block[4] = &v44;
  block[5] = &v40;
  v39 = v20;
  dispatch_group_async(group, global_queue, block);
  v37[0] = v30;
  v37[1] = 0x40000000;
  v37[2] = __FigPKDOctaviaCPECryptorCreateKeyRequest_block_invoke_2;
  v37[3] = &__block_descriptor_tmp_23;
  v37[4] = v9;
  v37[5] = v35;
  v37[6] = a3;
  dispatch_group_async(group, global_queue, v37);
  dispatch_group_wait(group, 0xFFFFFFFFFFFFFFFFLL);
  if (*(_DWORD *)(v9 + 76))
  {
    v31 = v41;
  }
  else
  {
    v31 = v41;
    if (!*((_DWORD *)v45 + 6))
    {
      *a4 = v41[3];
      v31[3] = 0;
    }
  }
  v32 = (const void *)v31[3];
  if (v32)
    CFRelease(v32);
  if (group)
    dispatch_release(group);
  v8 = *((unsigned int *)v45 + 6);
  if (!(_DWORD)v8)
    v8 = *(unsigned int *)(v9 + 76);
  v33 = 1;
LABEL_39:
  _Block_object_dispose(&v40, 8);
  _Block_object_dispose(&v44, 8);
  if (v33)
LABEL_40:
    MEMORY[0x19402EF04](*(_QWORD *)(v9 + 32));
  CFRelease(v12);
  CFRelease(v15);
  if (Value)
    CFRelease(Value);
  if (v20)
    qo0PLbO2vEnVix1GkQeB8LR(v20);
  return v8;
}

uint64_t FigPKDOctaviaCPECryptorSetKeyRequestResponse(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  const __CFDate *Value;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v15)(uint64_t, uint64_t, const __CFDictionary *);
  const __CFAllocator *v16;
  CFAbsoluteTime Current;
  const __CFDate *v18;
  double TimeIntervalSinceDate;
  double v20;
  dispatch_source_t *v21;
  NSObject *global_queue;
  NSObject *v23;
  void *v24;
  NSObject *v25;
  dispatch_time_t v26;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    v9 = 0;
    v10 = 0;
    v11 = 4294955146;
    goto LABEL_8;
  }
  v7 = DerivedStorage;
  if (a3)
  {
    Value = (const __CFDate *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0CA4D70]);
    v9 = CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0CA4D78]) == (const void *)*MEMORY[0x1E0C9AE50];
  }
  else
  {
    Value = 0;
    v9 = 0;
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(v7 + 32));
  v10 = *(_QWORD *)(v7 + 136);
  if (*(_BYTE *)(v7 + 24))
  {
    v11 = 4294954511;
  }
  else
  {
    if (*(_BYTE *)(v7 + 72))
      v13 = *(_QWORD *)(v7 + 16);
    else
      v13 = *(_QWORD *)(v7 + 8);
    v14 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
    if (*v14 >= 4uLL && (v15 = (uint64_t (*)(uint64_t, uint64_t, const __CFDictionary *))v14[12]) != 0)
    {
      v11 = v15(v13, a2, a3);
      if (!Value)
        goto LABEL_7;
    }
    else
    {
      v11 = 4294954514;
      if (!Value)
        goto LABEL_7;
    }
    v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Current = CFAbsoluteTimeGetCurrent();
    v18 = CFDateCreate(v16, Current);
    TimeIntervalSinceDate = CFDateGetTimeIntervalSinceDate(Value, v18);
    if (TimeIntervalSinceDate > 0.0
      && (v20 = TimeIntervalSinceDate,
          v21 = (dispatch_source_t *)(v7 + 128),
          StopAndReleaseTimer((dispatch_object_t *)(v7 + 128)),
          global_queue = dispatch_get_global_queue(0, 0),
          v23 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, global_queue),
          (*(_QWORD *)(v7 + 128) = v23) != 0))
    {
      if (*(_QWORD *)(v7 + 40))
      {
        CFRetain(*(CFTypeRef *)(v7 + 40));
        v23 = *(NSObject **)(v7 + 128);
        v24 = *(void **)(v7 + 40);
      }
      else
      {
        v24 = 0;
      }
      dispatch_set_context(v23, v24);
      v25 = *v21;
      v26 = dispatch_time(0, (uint64_t)(v20 * 1000000000.0));
      dispatch_source_set_timer(v25, v26, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
      dispatch_source_set_event_handler_f(*v21, (dispatch_function_t)RenewalTimerCallback);
      dispatch_source_set_cancel_handler_f(*v21, (dispatch_function_t)FigCFRelease);
      dispatch_resume(*v21);
      v11 = 0;
      if (!v18)
        goto LABEL_7;
    }
    else
    {
      v11 = FigSignalErrorAt();
      if (!v18)
        goto LABEL_7;
    }
    CFRelease(v18);
  }
LABEL_7:
  MEMORY[0x19402EF04](*(_QWORD *)(v7 + 32));
LABEL_8:
  PKDDispatchKeyResponseNotification(a1, v11, v10, v9);
  return v11;
}

uint64_t FigPKDOctaviaCPECryptorGetSerializationToken(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v8)(uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294955146;
  v4 = DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 32));
  if (*(_BYTE *)(v4 + 24))
  {
    v5 = 4294954511;
  }
  else
  {
    v6 = *(_QWORD *)(v4 + 8);
    v7 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
    if (*v7 >= 4uLL && (v8 = (uint64_t (*)(uint64_t, uint64_t))v7[13]) != 0)
      v5 = v8(v6, a2);
    else
      v5 = 4294954514;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v4 + 32));
  return v5;
}

uint64_t FigPKDOctaviaCPECryptorTestAndSetKeyRequestState(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, _QWORD *a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, char *, _QWORD);
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, char *, _QWORD);
  BOOL v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  int v23;
  CFTypeRef v24;
  BOOL v25;
  CFTypeRef cf;
  char v28;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = 0;
  v28 = 0;
  v11 = 4294955136;
  if ((_DWORD)a2 && (_DWORD)a3)
  {
    v12 = DerivedStorage;
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 32));
    if (*(_BYTE *)(v12 + 24))
    {
      v10 = 0;
      v11 = 4294954511;
      goto LABEL_35;
    }
    if (*(_BYTE *)(v12 + 72))
    {
      v13 = *(_QWORD *)(v12 + 16);
      v14 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
      if (*v14 < 6uLL || (v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char *, _QWORD))v14[20]) == 0)
      {
        v10 = 0;
        v11 = 4294954514;
        goto LABEL_35;
      }
      v16 = v15(v13, a2, a3, &v28, 0);
    }
    else
    {
      v17 = *(_QWORD *)(v12 + 8);
      v18 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
      if (*v18 < 6uLL
        || (v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char *, _QWORD))v18[20]) == 0
        || ((v16 = v19(v17, a2, a3, &v28, 0), (_DWORD)v16 != -12036) ? (v20 = (_DWORD)v16 == -12782) : (v20 = 1), v20))
      {
        if (*(_DWORD *)(v12 + 96) == (_DWORD)a2)
        {
          *(_DWORD *)(v12 + 96) = a3;
          v28 = 1;
        }
        if (a3 >= a2)
          goto LABEL_31;
        cf = 0;
        v21 = *(_QWORD *)(v12 + 8);
        v22 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
        if (v22)
        {
          v23 = v22(v21, *MEMORY[0x1E0CA3210], *MEMORY[0x1E0C9AE00], &cf);
          v24 = cf;
          if (v23)
            v25 = 0;
          else
            v25 = cf == (CFTypeRef)*MEMORY[0x1E0C9AE40];
          if (v25)
          {
            v11 = ResetRemoteCryptor();
            v24 = cf;
          }
          else
          {
            v11 = 0;
          }
          if (v24)
            CFRelease(v24);
        }
        else
        {
          v11 = 0;
        }
        goto LABEL_30;
      }
    }
    v11 = v16;
LABEL_30:
    if (!(_DWORD)v11)
    {
LABEL_31:
      if (v28)
      {
        *(_DWORD *)(v12 + 96) = a3;
        if ((_DWORD)a3 == 2)
        {
          *(_QWORD *)(v12 + 136) = PKDGetNewRequestID();
          StopAndReleaseTimer((dispatch_object_t *)(v12 + 128));
        }
      }
      v11 = 0;
      v10 = *(_QWORD *)(v12 + 136);
      goto LABEL_35;
    }
    v10 = 0;
LABEL_35:
    MEMORY[0x19402EF04](*(_QWORD *)(v12 + 32));
  }
  if (a4)
    *a4 = v28;
  if (a5)
    *a5 = v10;
  return v11;
}

void RenewalTimerCallback()
{
  uint64_t v0;
  const void *v1;
  uint64_t DerivedStorage;

  v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    v1 = (const void *)v0;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 32));
    if (!*(_BYTE *)(DerivedStorage + 24))
    {
      StopAndReleaseTimer((dispatch_object_t *)(DerivedStorage + 128));
      dispatch_get_global_queue(0, 0);
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
    }
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 32));
    CFRelease(v1);
  }
}

uint64_t ResetRemoteCryptor()
{
  uint64_t DerivedStorage;
  uint64_t CFNumberFromRemoteObjectRef;
  CFDictionaryRef v2;
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  CFTypeRef cf;
  void *values;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  values = 0;
  v9 = 0;
  cf = 0;
  CFNumberFromRemoteObjectRef = FigCPEOctaviaPKDMovieIDGetSerializationToken(*(_QWORD *)(DerivedStorage + 48), (uint64_t)&v9);
  if ((_DWORD)CFNumberFromRemoteObjectRef
    || (CFNumberFromRemoteObjectRef = FigTransportCreateCFNumberFromRemoteObjectRef(),
        (_DWORD)CFNumberFromRemoteObjectRef))
  {
    v5 = CFNumberFromRemoteObjectRef;
    v2 = 0;
  }
  else
  {
    v2 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&kFigCPENeroKey_MovieIDSerializationToken, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v2)
    {
      v3 = FigOctaviaCPECryptorCreate(*(const void **)DerivedStorage, *(const void **)(DerivedStorage + 104), *(_QWORD **)(DerivedStorage + 112), v2, *(_QWORD *)(DerivedStorage + 120), *(const void **)(*(_QWORD *)(DerivedStorage + 48) + 88), &cf);
      if (!(_DWORD)v3)
      {
        CMNotificationCenterGetDefaultLocalCenter();
        v3 = CMNotificationCenterAddListener();
        if (!(_DWORD)v3)
        {
          if (*(_QWORD *)(DerivedStorage + 8))
          {
            CMNotificationCenterGetDefaultLocalCenter();
            CMNotificationCenterRemoveListener();
            v4 = *(const void **)(DerivedStorage + 8);
            if (v4)
              CFRelease(v4);
          }
          v5 = 0;
          *(_QWORD *)(DerivedStorage + 8) = cf;
          cf = 0;
          goto LABEL_10;
        }
      }
      v5 = v3;
    }
    else
    {
      v5 = 4294955145;
    }
  }
  if (cf)
    CFRelease(cf);
LABEL_10:
  if (values)
    CFRelease(values);
  if (v2)
    CFRelease(v2);
  return v5;
}

uint64_t RegisterFigReportingSessionStatsBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigReportingSessionStatsCreate(_QWORD *a1)
{
  const __CFAllocator *v2;
  uint64_t v3;
  uint64_t DerivedStorage;
  _QWORD *v5;
  CFMutableDictionaryRef Mutable;
  uint64_t v7;

  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a1)
    return 4294955296;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MEMORY[0x19402F294](&FigReportingSessionStatsGetClassID_sRegisterFigReportingSessionStatsOnce, RegisterFigReportingSessionStatsBaseType);
  v3 = CMDerivedObjectCreate();
  if ((_DWORD)v3)
    return v3;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return 4294955295;
  v5 = (_QWORD *)DerivedStorage;
  Mutable = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9B390], 0);
  *v5 = Mutable;
  if (!Mutable)
    return 4294955295;
  v3 = FigReportingStatsCreate(v5 + 2);
  if ((_DWORD)v3)
    return v3;
  v7 = FigReportingStatsCreate(v5 + 1);
  if (!(_DWORD)v7)
    *a1 = 0;
  return v7;
}

CFStringRef FigReportingSessionStatsCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigReportingSessionStats %p]"), a1);
}

void sessionStatsFinalize()
{
  const __CFDictionary **DerivedStorage;
  const __CFDictionary **v1;
  const __CFDictionary *v2;

  DerivedStorage = (const __CFDictionary **)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v1 = DerivedStorage;
    v2 = *DerivedStorage;
    if (v2)
    {
      CFDictionaryApplyFunction(v2, (CFDictionaryApplierFunction)fss_releaseStatDictionaryApplier, 0);
      CFRelease(*v1);
    }
    FigReportingStatsDestroy((uint64_t)v1[2]);
    FigReportingStatsDestroy((uint64_t)v1[1]);
  }
}

__CFString *sessionStatsCopyDebugDescription()
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigReportingSessionStats : "));
  return Mutable;
}

void fss_releaseStatDictionaryApplier(uint64_t a1, uint64_t a2)
{
  if (a2)
    FigReportingStatsDestroy(a2);
}

uint64_t sessionStatsCopyPeriodicStatsValuesForKeys(uint64_t a1, const __CFArray *a2, const __CFArray *a3)
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = 4294955296;
  if (a3 && a2)
  {
    if (DerivedStorage)
    {
      fss_copyAggregatedStats(*(_QWORD *)(DerivedStorage + 16), a2, a3);
      return 0;
    }
  }
  return result;
}

uint64_t sessionStatsCopySessionAggregateStatsValuesForKeys(uint64_t a1, const __CFArray *a2, const __CFArray *a3)
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = 4294955296;
  if (a3 && a2)
  {
    if (DerivedStorage)
    {
      fss_copyAggregatedStats(*(_QWORD *)(DerivedStorage + 8), a2, a3);
      return 0;
    }
  }
  return result;
}

uint64_t sessionStatsCopySessionArraysForKeys(uint64_t a1, const __CFArray *a2, __CFDictionary *a3)
{
  uint64_t DerivedStorage;
  uint64_t result;
  CFIndex v7;
  const __CFString **ValueAtIndex;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = 4294955296;
  if (a3 && a2 && DerivedStorage)
  {
    if (CFArrayGetCount(a2) >= 1)
    {
      v7 = 0;
      do
      {
        ValueAtIndex = (const __CFString **)CFArrayGetValueAtIndex(a2, v7);
        if (ValueAtIndex)
          FigReportingStatsCopyArrayAndSetInDictionary(*(_QWORD *)(DerivedStorage + 8), *ValueAtIndex, a3);
        ++v7;
      }
      while (v7 < CFArrayGetCount(a2));
    }
    return 0;
  }
  return result;
}

uint64_t sessionStatsCopyValuesForKeys(uint64_t a1, const __CFArray *a2, const __CFArray *a3, __CFDictionary *a4)
{
  uint64_t DerivedStorage;
  uint64_t result;
  CFIndex v9;
  const void **ValueAtIndex;
  __CFString **v11;
  const __CFString *v12;
  CFIndex v13;
  CFStringRef *v14;
  _QWORD v15[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = 4294955296;
  if (a4 && a2 && DerivedStorage)
  {
    v15[0] = a2;
    v15[1] = a4;
    CFDictionaryApplyFunction(*(CFDictionaryRef *)DerivedStorage, (CFDictionaryApplierFunction)fss_fetchEventStatsAndSetInDictionary, v15);
    if (a3 && CFArrayGetCount(a2) >= 1)
    {
      v9 = 0;
      while (1)
      {
        ValueAtIndex = (const void **)CFArrayGetValueAtIndex(a2, v9);
        if (ValueAtIndex)
        {
          v11 = (__CFString **)ValueAtIndex;
          if (!CFDictionaryContainsKey(a4, *ValueAtIndex))
          {
            v12 = *v11;
            if (CFArrayGetCount(a3) >= 1)
            {
              v13 = 0;
              while (1)
              {
                v14 = (CFStringRef *)CFArrayGetValueAtIndex(a3, v13);
                if (v14)
                {
                  if (CFStringCompare(*v14, v12, 0) == kCFCompareEqualTo)
                    break;
                }
                if (++v13 >= CFArrayGetCount(a3))
                  goto LABEL_9;
              }
              result = FigReportingStatsCopyAsCFTypeAndSetInDictionary(*(_QWORD *)(DerivedStorage + 8), *v11, a4);
              if ((_DWORD)result)
              {
                if ((_DWORD)result != -12005)
                  break;
              }
            }
          }
        }
LABEL_9:
        if (++v9 >= CFArrayGetCount(a2))
          return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sessionStatsGetAggregatedIntValue(uint64_t a1, int a2, void *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t *v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return 4294955296;
  if (!a2)
  {
    v8 = (uint64_t *)(DerivedStorage + 16);
    return FigReportingStatsGetIntValue(*v8, a3, a4);
  }
  if (a2 != 1)
    return 4294955296;
  v8 = (uint64_t *)(DerivedStorage + 8);
  return FigReportingStatsGetIntValue(*v8, a3, a4);
}

uint64_t sessionStatsGetAggregatedCountValue(uint64_t a1, int a2, void *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t *v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return 4294955296;
  if (!a2)
  {
    v8 = (uint64_t *)(DerivedStorage + 16);
    return FigReportingStatsGetCountValue(*v8, a3, a4);
  }
  if (a2 != 1)
    return 4294955296;
  v8 = (uint64_t *)(DerivedStorage + 8);
  return FigReportingStatsGetCountValue(*v8, a3, a4);
}

uint64_t sessionStatsCopyAggregatedCFTypeValue(uint64_t a1, int a2, void *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t *v9;
  CFTypeRef v10;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  result = 4294955296;
  if (a4 && DerivedStorage)
  {
    if (a2)
    {
      if (a2 != 1)
        return result;
      v9 = (uint64_t *)(DerivedStorage + 8);
    }
    else
    {
      v9 = (uint64_t *)(DerivedStorage + 16);
    }
    result = FigReportingStatsGetCFTypeValue(*v9, a3, &cf);
    if (!(_DWORD)result)
    {
      if (cf)
        v10 = CFRetain(cf);
      else
        v10 = 0;
      result = 0;
      *a4 = v10;
    }
  }
  return result;
}

uint64_t sessionStatsAddToCountValue(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t result;
  int v9[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = 0;
  *(_QWORD *)v9 = 0;
  if (a3)
  {
    if (DerivedStorage)
    {
      result = fss_getOrCreateNewReportingStatsForReportingStatsKey((CFDictionaryRef *)DerivedStorage, a2, v9);
      if (!(_DWORD)result)
      {
        result = FigReportingStatsAddToCountValue(*(uint64_t *)v9, a3, a4);
        if (!(_DWORD)result)
        {
          result = FigReportingStatsAddToCountValue(*(_QWORD *)(DerivedStorage + 16), a3, a4);
          if (!(_DWORD)result)
            return FigReportingStatsAddToCountValue(*(_QWORD *)(DerivedStorage + 8), a3, a4);
        }
      }
    }
  }
  return result;
}

CFDictionaryRef *sessionStatsUpdateSampleValue(uint64_t a1, void *a2, void *a3, unint64_t a4)
{
  CFDictionaryRef *result;
  CFDictionaryRef *v8;
  int v9[2];

  result = (CFDictionaryRef *)CMBaseObjectGetDerivedStorage();
  *(_QWORD *)v9 = 0;
  if (result)
  {
    v8 = result;
    result = (CFDictionaryRef *)fss_getOrCreateNewReportingStatsForReportingStatsKey(result, a2, v9);
    if (!(_DWORD)result)
    {
      result = (CFDictionaryRef *)FigReportingStatsUpdateSampleValue(*(uint64_t *)v9, a3, a4);
      if (!(_DWORD)result)
      {
        result = (CFDictionaryRef *)FigReportingStatsUpdateSampleValue((uint64_t)v8[2], a3, a4);
        if (!(_DWORD)result)
          return (CFDictionaryRef *)FigReportingStatsUpdateSampleValue((uint64_t)v8[1], a3, a4);
      }
    }
  }
  return result;
}

CFDictionaryRef *sessionStatsSetCFTypeValue(uint64_t a1, void *a2, void *a3, const void *a4)
{
  CFDictionaryRef *result;
  uint64_t v8;
  int v9[2];

  *(_QWORD *)v9 = 0;
  result = (CFDictionaryRef *)CMBaseObjectGetDerivedStorage();
  if (result)
  {
    v8 = (uint64_t)result;
    result = (CFDictionaryRef *)fss_getOrCreateNewReportingStatsForReportingStatsKey(result, a2, v9);
    if (!(_DWORD)result)
    {
      result = (CFDictionaryRef *)FigReportingStatsSetCFTypeValue(*(uint64_t *)v9, a3, a4);
      if (!(_DWORD)result)
        return (CFDictionaryRef *)fss_updateAggregatedCFTypeStat(v8, a3, a4);
    }
  }
  return result;
}

CFDictionaryRef *sessionStatsSetIntValue(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  CFDictionaryRef *result;
  CFDictionaryRef *v8;
  int v9[2];

  result = (CFDictionaryRef *)CMBaseObjectGetDerivedStorage();
  *(_QWORD *)v9 = 0;
  if (result)
  {
    v8 = result;
    result = (CFDictionaryRef *)fss_getOrCreateNewReportingStatsForReportingStatsKey(result, a2, v9);
    if (!(_DWORD)result)
    {
      result = (CFDictionaryRef *)FigReportingStatsSetValue(*(uint64_t *)v9, a3, a4);
      if (!(_DWORD)result)
      {
        result = (CFDictionaryRef *)FigReportingStatsSetValue((uint64_t)v8[2], a3, a4);
        if (!(_DWORD)result)
          return (CFDictionaryRef *)FigReportingStatsSetValue((uint64_t)v8[1], a3, a4);
      }
    }
  }
  return result;
}

uint64_t sessionStatsAppendValuesToArrays(uint64_t a1, const __CFArray *a2)
{
  uint64_t DerivedStorage;
  uint64_t result;
  CFIndex v5;
  __CFString **ValueAtIndex;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = 4294955296;
  if (a2 && DerivedStorage)
  {
    if (CFArrayGetCount(a2) >= 1)
    {
      v5 = 0;
      do
      {
        ValueAtIndex = (__CFString **)CFArrayGetValueAtIndex(a2, v5);
        if (ValueAtIndex)
          FigReportingStatsCopyAsCFTypeAndAppendToArray(*(_QWORD *)(DerivedStorage + 8), *ValueAtIndex);
        ++v5;
      }
      while (v5 < CFArrayGetCount(a2));
    }
    return 0;
  }
  return result;
}

uint64_t sessionStatsResetValue(uint64_t a1, const void *a2, void *a3)
{
  uint64_t result;
  const __CFDictionary *v6;
  const void *Value;

  result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    if (a2 && (v6 = *(const __CFDictionary **)result) != 0)
    {
      Value = CFDictionaryGetValue(v6, a2);
      if (Value)
      {
        FigReportingStatsResetValue((uint64_t)Value, a3);
        return 0;
      }
      else
      {
        return 4294955291;
      }
    }
    else
    {
      return 4294955296;
    }
  }
  return result;
}

uint64_t sessionStatsResetArray(uint64_t a1, const __CFString *a2)
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (result)
    return FigReportingStatsResetArray(*(_QWORD *)(result + 8), a2);
  return result;
}

uint64_t sessionStatsGetArrayCount(uint64_t a1, const __CFString *a2, _QWORD *a3)
{
  uint64_t result;
  CFIndex v6;

  result = CMBaseObjectGetDerivedStorage();
  v6 = 0;
  *a3 = 0;
  if (result)
  {
    result = FigReportingStatsGetArrayCount(*(_QWORD *)(result + 8), a2, &v6);
    if (!(_DWORD)result)
      *a3 = v6;
  }
  return result;
}

uint64_t sessionStatsPeriodicStatsResetValue(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return 4294955296;
  FigReportingStatsResetValue(*(_QWORD *)(DerivedStorage + 16), a2);
  return 0;
}

uint64_t sessionStatsPeriodicStatsResetValuesForKeys(uint64_t a1, const __CFArray *a2)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v5;
  CFIndex v6;
  void **ValueAtIndex;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = 4294955296;
  if (a2 && DerivedStorage)
  {
    v5 = *(_QWORD *)(DerivedStorage + 16);
    if (CFArrayGetCount(a2) >= 1)
    {
      v6 = 0;
      do
      {
        ValueAtIndex = (void **)CFArrayGetValueAtIndex(a2, v6);
        if (ValueAtIndex)
          FigReportingStatsResetValue(v5, *ValueAtIndex);
        ++v6;
      }
      while (v6 < CFArrayGetCount(a2));
    }
    return 0;
  }
  return result;
}

uint64_t sessionStatsGetIntValue(uint64_t a1, const void *a2, void *a3, _QWORD *a4)
{
  const __CFDictionary **DerivedStorage;
  uint64_t result;
  const __CFDictionary *v9;
  const void *Value;
  _QWORD context[2];
  uint64_t v12;

  context[1] = a4;
  v12 = 0;
  context[0] = a3;
  DerivedStorage = (const __CFDictionary **)CMBaseObjectGetDerivedStorage();
  result = 0;
  if (a4 && DerivedStorage)
  {
    v9 = *DerivedStorage;
    if (a2)
    {
      if (v9)
      {
        Value = CFDictionaryGetValue(v9, a2);
        if (Value)
          return FigReportingStatsGetIntValue((uint64_t)Value, a3, a4);
        else
          return 4294955291;
      }
      else
      {
        return 4294955296;
      }
    }
    else
    {
      CFDictionaryApplyFunction(v9, (CFDictionaryApplierFunction)fss_getIntValueDictApplier, context);
      return HIDWORD(v12);
    }
  }
  return result;
}

uint64_t sessionStatsGetCFTypeValue(uint64_t a1, const void *a2, void *a3, _QWORD *a4)
{
  const __CFDictionary **DerivedStorage;
  uint64_t result;
  const __CFDictionary *v9;
  const void *Value;
  _QWORD context[2];
  uint64_t v12;

  context[1] = a4;
  v12 = 0;
  context[0] = a3;
  DerivedStorage = (const __CFDictionary **)CMBaseObjectGetDerivedStorage();
  result = 0;
  if (a4 && DerivedStorage)
  {
    v9 = *DerivedStorage;
    if (a2)
    {
      if (v9)
      {
        Value = CFDictionaryGetValue(v9, a2);
        if (Value)
          return FigReportingStatsGetCFTypeValue((uint64_t)Value, a3, a4);
        else
          return 4294955291;
      }
      else
      {
        return 4294955296;
      }
    }
    else
    {
      CFDictionaryApplyFunction(v9, (CFDictionaryApplierFunction)fss_getCFTypeValueDictApplier, context);
      return HIDWORD(v12);
    }
  }
  return result;
}

uint64_t sessionStatsGetCountValue(uint64_t a1, const void *a2, void *a3, _QWORD *a4)
{
  const __CFDictionary **DerivedStorage;
  uint64_t result;
  const __CFDictionary *v9;
  const void *Value;
  _QWORD context[2];
  uint64_t v12;

  context[1] = a4;
  v12 = 0;
  context[0] = a3;
  DerivedStorage = (const __CFDictionary **)CMBaseObjectGetDerivedStorage();
  result = 0;
  if (a4 && DerivedStorage)
  {
    v9 = *DerivedStorage;
    if (a2)
    {
      if (v9)
      {
        Value = CFDictionaryGetValue(v9, a2);
        if (Value)
          return FigReportingStatsGetCountValue((uint64_t)Value, a3, a4);
        else
          return 4294955291;
      }
      else
      {
        return 4294955296;
      }
    }
    else
    {
      CFDictionaryApplyFunction(v9, (CFDictionaryApplierFunction)fss_getCountValueDictApplier, context);
      return HIDWORD(v12);
    }
  }
  return result;
}

uint64_t sessionStatsResetAll(uint64_t a1, const void *a2)
{
  uint64_t result;
  const __CFDictionary *v4;
  const void *Value;

  result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    if (a2 && (v4 = *(const __CFDictionary **)result) != 0)
    {
      Value = CFDictionaryGetValue(v4, a2);
      if (Value)
      {
        FigReportingStatsResetAll((uint64_t)Value);
        return 0;
      }
      else
      {
        return 4294955291;
      }
    }
    else
    {
      return 4294955296;
    }
  }
  return result;
}

uint64_t sessionStatsAggregateStatsResetValue(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return 4294955296;
  FigReportingStatsResetValue(*(_QWORD *)(DerivedStorage + 8), a2);
  return 0;
}

uint64_t sessionStatsCopy(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t result;
  const void *Value;
  const __CFDictionary **v8;
  int v9[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)v9 = 0;
  result = 4294955296;
  if (a3 && DerivedStorage && v5)
  {
    if (!*(_QWORD *)v5)
      return 4294955296;
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)v5, a3);
    if (Value)
    {
      *(_QWORD *)v9 = Value;
    }
    else
    {
      result = fss_getOrCreateNewReportingStatsForReportingStatsKey((CFDictionaryRef *)v5, a3, v9);
      if ((_DWORD)result)
        return result;
    }
    if (*(_QWORD *)DerivedStorage)
      v8 = (const __CFDictionary **)CFDictionaryGetValue(*(CFDictionaryRef *)DerivedStorage, a3);
    else
      v8 = 0;
    FigReportingStatsCopy(*(_QWORD **)v9, v8);
    FigReportingStatsCopy(*(_QWORD **)(v5 + 8), *(const __CFDictionary ***)(DerivedStorage + 8));
    FigReportingStatsCopy(*(_QWORD **)(v5 + 16), *(const __CFDictionary ***)(DerivedStorage + 16));
    return 0;
  }
  return result;
}

uint64_t sessionStatsAppendValueToArray(uint64_t a1, void *a2, void *a3, const void *a4, int a5)
{
  CFDictionaryRef *DerivedStorage;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t CFTypeValue;
  const __CFArray *v14;
  CFIndex Count;
  const __CFAllocator *v16;
  __CFArray *MutableCopy;
  __CFArray *v18;
  uint64_t updated;
  CFArrayRef theArray;
  uint64_t v22;

  theArray = 0;
  v22 = 0;
  DerivedStorage = (CFDictionaryRef *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return 4294955296;
  v10 = (uint64_t)DerivedStorage;
  v11 = fss_getOrCreateNewReportingStatsForReportingStatsKey(DerivedStorage, a2, &v22);
  if ((_DWORD)v11)
    return v11;
  v12 = v22;
  CFTypeValue = FigReportingStatsGetCFTypeValue(v22, a3, &theArray);
  v14 = theArray;
  if (a5 >= 1)
  {
    if (theArray)
      Count = CFArrayGetCount(theArray);
    else
      Count = 0;
    if (Count >= a5)
      return CFTypeValue;
    v14 = theArray;
  }
  v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (v14)
    MutableCopy = CFArrayCreateMutableCopy(v16, 0, v14);
  else
    MutableCopy = CFArrayCreateMutable(v16, 0, MEMORY[0x1E0C9B378]);
  v18 = MutableCopy;
  if (MutableCopy)
  {
    CFArrayAppendValue(MutableCopy, a4);
    updated = FigReportingStatsSetCFTypeValue(v12, a3, v18);
    if (!(_DWORD)updated)
      updated = fss_updateAggregatedCFTypeStat(v10, a3, v18);
    CFTypeValue = updated;
    CFRelease(v18);
  }
  return CFTypeValue;
}

uint64_t sessionStatsFreezeKeys(uint64_t a1, const void *a2, const __CFSet *a3)
{
  uint64_t result;
  const __CFDictionary *v6;
  const void *Value;

  result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    if (a2 && (v6 = *(const __CFDictionary **)result) != 0)
    {
      Value = CFDictionaryGetValue(v6, a2);
      if (Value)
        return FigReportingStatsFreezeKeys((uint64_t)Value, a3);
      else
        return 4294955291;
    }
    else
    {
      return 4294955296;
    }
  }
  return result;
}

double fss_copyAggregatedStats(uint64_t a1, const __CFArray *a2, const __CFArray *a3)
{
  uint64_t v4;
  CFArrayRef v6[2];

  v6[0] = a2;
  v6[1] = a3;
  FigBytePumpGetFigBaseObject(a1);
  fss_fetchEventStatsAndSetInDictionary(v4, a1, v6);
  return FigBytePumpGetFigBaseObject(a1);
}

void fss_fetchEventStatsAndSetInDictionary(uint64_t a1, uint64_t a2, CFArrayRef *a3)
{
  const __CFArray *v3;
  CFIndex v6;
  __CFString **ValueAtIndex;

  v3 = *a3;
  if (*a3 && CFArrayGetCount(*a3) >= 1)
  {
    v6 = 0;
    do
    {
      ValueAtIndex = (__CFString **)CFArrayGetValueAtIndex(v3, v6);
      if (ValueAtIndex)
        FigReportingStatsCopyAsCFTypeAndSetInDictionary(a2, *ValueAtIndex, a3[1]);
      ++v6;
    }
    while (v6 < CFArrayGetCount(v3));
  }
}

uint64_t fss_getOrCreateNewReportingStatsForReportingStatsKey(CFDictionaryRef *a1, void *key, _QWORD *a3)
{
  uint64_t result;
  void *v7;
  void *value;

  value = 0;
  result = 4294955296;
  if (a1 && key)
  {
    if (!*a1)
      return 4294955296;
    v7 = (void *)CFDictionaryGetValue(*a1, key);
    if (v7)
    {
LABEL_5:
      result = 0;
      *a3 = v7;
      return result;
    }
    result = FigReportingStatsCreate(&value);
    if (!(_DWORD)result)
    {
      if (!value)
        return 4294955294;
      CFDictionarySetValue(*a1, key, value);
      v7 = value;
      goto LABEL_5;
    }
  }
  return result;
}

uint64_t fss_updateAggregatedCFTypeStat(uint64_t a1, void *a2, const void *a3)
{
  uint64_t result;

  result = FigReportingStatsSetCFTypeValue(*(_QWORD *)(a1 + 16), a2, a3);
  if (!(_DWORD)result)
    return FigReportingStatsSetCFTypeValue(*(_QWORD *)(a1 + 8), a2, a3);
  return result;
}

void fss_getIntValueDictApplier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int IntValue;

  if (a3 && !*(_BYTE *)(a3 + 16))
  {
    IntValue = FigReportingStatsGetIntValue(a2, *(void **)a3, *(_QWORD **)(a3 + 8));
    *(_DWORD *)(a3 + 20) = IntValue;
    if (!IntValue)
      *(_BYTE *)(a3 + 16) = 1;
  }
}

void fss_getCFTypeValueDictApplier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int CFTypeValue;

  if (a3 && !*(_BYTE *)(a3 + 16))
  {
    CFTypeValue = FigReportingStatsGetCFTypeValue(a2, *(void **)a3, *(_QWORD **)(a3 + 8));
    *(_DWORD *)(a3 + 20) = CFTypeValue;
    if (!CFTypeValue)
      *(_BYTE *)(a3 + 16) = 1;
  }
}

void fss_getCountValueDictApplier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int CountValue;

  if (a3 && !*(_BYTE *)(a3 + 16))
  {
    CountValue = FigReportingStatsGetCountValue(a2, *(void **)a3, *(_QWORD **)(a3 + 8));
    *(_DWORD *)(a3 + 20) = CountValue;
    if (!CountValue)
      *(_BYTE *)(a3 + 16) = 1;
  }
}

uint64_t BVCUtilityGetVectorsFromTransform(double *a1, _DWORD *a2, _DWORD *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  v4 = *a1;
  v3 = a1[1];
  v6 = a1[2];
  v5 = a1[3];
  v8 = a1[4];
  v7 = a1[5];
  v9 = v8 + v6 * 0.0 + *a1 * 0.0;
  v10 = v7 + v5 * 0.0 + v3 * 0.0;
  if (a2)
  {
    v11 = v8 + v4 + v6 * 0.0;
    if (vabdd_f64(v11, v9) > 32767.0)
      return FigSignalErrorAt();
    v12 = v7 + v3 + v5 * 0.0;
    if (vabdd_f64(v12, v10) > 32767.0)
      return FigSignalErrorAt();
    *a2 = vcvtd_n_s64_f64(v11 - v9, 0x10uLL);
    a2[1] = vcvtd_n_s64_f64(v12 - v10, 0x10uLL);
  }
  if (!a3)
    return 0;
  v13 = v8 + v6 + v4 * 0.0;
  if (vabdd_f64(v13, v9) <= 32767.0)
  {
    v14 = v7 + v5 + v3 * 0.0;
    if (vabdd_f64(v14, v10) <= 32767.0)
    {
      *a3 = vcvtd_n_s64_f64(v13 - v9, 0x10uLL);
      a3[1] = vcvtd_n_s64_f64(v14 - v10, 0x10uLL);
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t BVCUtilityCreateEdgeLists(float64x2_t *a1, char **a2, _QWORD *a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  float64x2_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  int v31;
  uint64_t v32;
  char *v33;
  char *v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  double *v40;
  double v41;
  signed int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  double v51;
  void **v52;
  char v53;
  char v54;
  char *v55;
  int v56;
  double v57;
  int v58;
  double v59;
  char *v60;
  char *v61;
  BOOL v62;
  char *v63;
  int v64;
  int v65;
  BOOL v66;
  int v67;
  char *v68;
  signed int v69;
  signed int v70;
  char *v71;
  char *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  int v77;
  signed int v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  int v96;
  signed int v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  char **v112;
  _QWORD *v113;
  void *v116;
  char *v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  uint64_t v122;

  v122 = *MEMORY[0x1E0C80C00];
  v116 = 0;
  v117 = 0;
  v20 = a1[1];
  v118 = *a1;
  v119 = v20;
  v120 = a1[2];
  if (!BVCUtilityIsAffineTransformInvertible(v118.f64))
  {
    v61 = 0;
    v63 = 0;
    v24 = 0;
    if (a2)
      goto LABEL_154;
    goto LABEL_155;
  }
  v112 = a2;
  v113 = a3;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = *a1;
  v26 = a1[1];
  v27 = a1[2];
  v28 = vmulq_n_f64(v26, a5);
  v29 = vaddq_f64(v27, vmlaq_n_f64(v28, *a1, a4));
  v30 = vaddq_f64(v27, vmlaq_n_f64(v28, *a1, a4 + a6));
  v118 = v29;
  v119 = v30;
  v31 = 0x7FFFFFFF;
  v120 = vaddq_f64(v27, vmlaq_n_f64(vmulq_n_f64(v26, a5 + a7), v25, a4 + a6));
  v121 = vsubq_f64(vaddq_f64(v29, v120), v30);
  v32 = 1;
  do
  {
    v33 = v22;
    v22 = (char *)malloc_type_calloc(1uLL, 0x1CuLL, 0x102004076C0B35AuLL);
    if (!v22)
    {
      v116 = v24;
LABEL_108:
      v87 = FigSignalErrorAt();
      v63 = 0;
      v24 = 0;
      goto LABEL_109;
    }
    v34 = v22;
    if (v23)
    {
      *(_QWORD *)(v33 + 20) = v22;
      v34 = v23;
    }
    v23 = v34;
    v35 = v118.f64[v32];
    v36 = v21 + 1;
    LODWORD(v37) = (v21 + 1) & 3;
    v38 = v118.f64[2 * ((v21 + 1) & 3) + 1];
    if (v35 <= v38)
      v39 = v21;
    else
      v39 = v37;
    if (v35 <= v38)
      v37 = v37;
    else
      v37 = v21;
    v40 = &v118.f64[2 * v39];
    v41 = *v40;
    v42 = vcvtd_n_s64_f64(v40[1], 0x10uLL);
    v43 = vcvtd_n_s64_f64(v118.f64[2 * v37 + 1], 0x10uLL);
    *(_DWORD *)v22 = v42;
    *((_DWORD *)v22 + 1) = v43;
    *((_DWORD *)v22 + 2) = vcvtd_n_s64_f64(v41, 0x10uLL);
    v44 = v43 - v42;
    if (v44 >= 0)
      v45 = v44;
    else
      v45 = -v44;
    if (v45 > 0x3F)
      *((_DWORD *)v22 + 3) = (uint64_t)(v41 * -4294967300.0 + v118.f64[2 * v37] * 4294967300.0) / v44;
    else
      v22[16] = 1;
    if (v31 > v42)
    {
      v46 = v37 - 3;
      if (v37 < 3)
        v46 = v37 + 1;
      if (v46 != v39)
      {
        v47 = v39 < 3 ? v39 + 1 : v39 - 3;
        if (v47 == v37)
        {
          v24 = v22;
          v31 = v42;
        }
      }
    }
    v32 += 2;
    ++v21;
  }
  while (v36 != 4);
  v116 = v24;
  *(_QWORD *)(v22 + 20) = v23;
  if (!v24)
    goto LABEL_108;
  v48 = *(_QWORD *)(v24 + 20);
  if (!v48)
    goto LABEL_108;
  v49 = *(_QWORD *)(v48 + 20);
  if (!v49)
    goto LABEL_108;
  v50 = *(char **)(v49 + 20);
  if (!v50 || *(char **)(v50 + 20) != v24)
    goto LABEL_108;
  v117 = *(char **)(v49 + 20);
  *(_QWORD *)(v50 + 20) = v49;
  *(_QWORD *)(*(_QWORD *)(v24 + 20) + 20) = 0;
  *(_QWORD *)(*(_QWORD *)(v50 + 20) + 20) = 0;
  v51 = (a9 + a11) * 65536.0;
  v52 = (void **)&v117;
  v53 = 1;
  do
  {
    v54 = v53;
    if (v50)
    {
      v55 = 0;
      do
      {
        while (1)
        {
          v56 = *((_DWORD *)v50 + 1);
          v57 = (double)*(int *)v50;
          if (a9 * 65536.0 >= v57)
            v57 = a9 * 65536.0;
          v58 = (int)v57;
          *((_DWORD *)v50 + 2) += (unint64_t)(*((int *)v50 + 3) * (uint64_t)((int)v57 - *(_DWORD *)v50)) >> 16;
          v59 = (double)v56;
          if (v51 <= (double)v56)
            v59 = v51;
          *(_DWORD *)v50 = v58;
          *((_DWORD *)v50 + 1) = (int)v59;
          if (v58 >= (int)v59 || v50[16])
            break;
          v55 = v50;
          v50 = *(char **)(v50 + 20);
          if (!v50)
            goto LABEL_48;
        }
        v60 = *(char **)(v50 + 20);
        if (v55)
        {
          *(_QWORD *)(v55 + 20) = v60;
          v60 = *(char **)(v50 + 20);
        }
        else
        {
          *v52 = v60;
        }
        free(v50);
        v50 = v60;
      }
      while (v60);
LABEL_48:
      v24 = (char *)v116;
    }
    v53 = 0;
    v52 = &v116;
    v50 = v24;
  }
  while ((v54 & 1) != 0);
  v61 = v117;
  if (v117)
    v62 = v24 == 0;
  else
    v62 = 1;
  if (v62)
  {
    v24 = 0;
    v63 = 0;
    goto LABEL_153;
  }
  v64 = *((_DWORD *)v117 + 2);
  v65 = *((_DWORD *)v24 + 2);
  v66 = v64 <= v65;
  if (v64 == v65)
    v66 = *((_DWORD *)v117 + 3) <= *((_DWORD *)v24 + 3);
  v67 = !v66;
  v68 = 0;
  if (v67)
    v63 = v117;
  else
    v63 = v24;
  if (!v67)
    v24 = v117;
  v116 = 0;
  v117 = 0;
  v69 = vcvtd_n_s64_f64(a8, 0x10uLL);
  v70 = vcvtd_n_s64_f64(a8 + a10, 0x10uLL);
  v71 = v24;
  while (2)
  {
    v72 = *(char **)(v71 + 20);
    v73 = *((int *)v71 + 3);
    if (!(_DWORD)v73)
    {
      if (*((_DWORD *)v71 + 2) < v69)
        *((_DWORD *)v71 + 2) = v69;
      goto LABEL_86;
    }
    v74 = *((_DWORD *)v71 + 2);
    v75 = ((uint64_t)(v69 - v74) << 16) / v73;
    if ((v75 & 0x80000000) != 0 || (v76 = *((_DWORD *)v71 + 1), v77 = *(_DWORD *)v71 + v75, v77 > v76))
    {
      if (v69 > v74)
      {
        *((_DWORD *)v71 + 2) = v69;
        *((_DWORD *)v71 + 3) = 0;
        v78 = v69;
        goto LABEL_92;
      }
LABEL_86:
      v82 = *((int *)v71 + 3);
      if ((_DWORD)v82)
      {
        v83 = *((_DWORD *)v71 + 2);
        v84 = ((uint64_t)(v70 - v83) << 16) / v82;
        if ((v84 & 0x80000000) == 0)
        {
          v85 = *(_DWORD *)v71 + v84;
          if (v85 <= *((_DWORD *)v71 + 1))
          {
            if ((v82 & 0x80000000) != 0)
            {
              *(_DWORD *)v71 = v85;
              *((_DWORD *)v71 + 2) = v70;
            }
            else
            {
              *((_DWORD *)v71 + 1) = v85;
            }
            goto LABEL_97;
          }
        }
        if (v70 >= v83)
        {
LABEL_97:
          if (v68)
            v86 = v68;
          else
            v86 = v24;
          do
          {
            v68 = v86;
            if (!v86)
              break;
            v86 = *(char **)(v86 + 20);
          }
          while (v86 != v72);
          v71 = v72;
          if (!v72)
            goto LABEL_112;
          continue;
        }
      }
      else
      {
        v78 = *((_DWORD *)v71 + 2);
LABEL_92:
        if (v78 <= v70)
          goto LABEL_97;
      }
      if (v68)
        *(_QWORD *)(v68 + 20) = *(_QWORD *)(v71 + 20);
      else
        v24 = *(char **)(v71 + 20);
      free(v71);
      goto LABEL_97;
    }
    break;
  }
  if ((int)v73 >= 1 && (_DWORD)v75)
  {
    v79 = (char *)malloc_type_calloc(1uLL, 0x1CuLL, 0x102004076C0B35AuLL);
    if (!v79)
      goto LABEL_111;
    *((_DWORD *)v79 + 2) = v69;
    *((_DWORD *)v79 + 3) = 0;
    *(_DWORD *)v79 = *(_DWORD *)v71;
    *((_DWORD *)v79 + 1) = v77;
    *(_DWORD *)v71 = v77;
    *((_DWORD *)v71 + 2) = v69;
    v80 = v79;
    if (v68)
    {
      *(_QWORD *)(v68 + 20) = v79;
      v80 = v24;
    }
    *(_QWORD *)(v79 + 20) = v71;
    v24 = v80;
    goto LABEL_86;
  }
  if ((v73 & 0x80000000) == 0 || v76 == v77)
    goto LABEL_86;
  v81 = (char *)malloc_type_calloc(1uLL, 0x1CuLL, 0x102004076C0B35AuLL);
  if (v81)
  {
    *((_DWORD *)v81 + 2) = v69;
    *((_DWORD *)v81 + 3) = 0;
    *(_DWORD *)v81 = v77;
    *((_DWORD *)v81 + 1) = *((_DWORD *)v71 + 1);
    *((_DWORD *)v71 + 1) = v77;
    *(_QWORD *)(v81 + 20) = *(_QWORD *)(v71 + 20);
    *(_QWORD *)(v71 + 20) = v81;
    goto LABEL_86;
  }
LABEL_111:
  v88 = FigSignalErrorAt();
  if ((_DWORD)v88)
  {
    v87 = v88;
    v23 = 0;
    goto LABEL_109;
  }
LABEL_112:
  if (!v63)
  {
LABEL_152:
    v61 = 0;
    goto LABEL_153;
  }
  v89 = 0;
  v90 = v63;
  while (2)
  {
    v91 = *(char **)(v90 + 20);
    v92 = *((int *)v90 + 3);
    if (!(_DWORD)v92)
    {
      if (*((_DWORD *)v90 + 2) > v70)
        *((_DWORD *)v90 + 2) = v70;
      goto LABEL_131;
    }
    v93 = *((_DWORD *)v90 + 2);
    v94 = ((uint64_t)(v70 - v93) << 16) / v92;
    if ((v94 & 0x80000000) != 0 || (v95 = *((_DWORD *)v90 + 1), v96 = *(_DWORD *)v90 + v94, v96 > v95))
    {
      if (v70 < v93)
      {
        *((_DWORD *)v90 + 2) = v70;
        *((_DWORD *)v90 + 3) = 0;
        v97 = v70;
        goto LABEL_137;
      }
LABEL_131:
      v101 = *((int *)v90 + 3);
      if ((_DWORD)v101)
      {
        v102 = *((_DWORD *)v90 + 2);
        v103 = ((uint64_t)(v69 - v102) << 16) / v101;
        if ((v103 & 0x80000000) == 0)
        {
          v104 = *(_DWORD *)v90 + v103;
          if (v104 <= *((_DWORD *)v90 + 1))
          {
            if ((int)v101 < 1)
            {
              *((_DWORD *)v90 + 1) = v104;
            }
            else
            {
              *(_DWORD *)v90 = v104;
              *((_DWORD *)v90 + 2) = v69;
            }
            goto LABEL_142;
          }
        }
        if (v69 <= v102)
        {
LABEL_142:
          if (v89)
            v105 = v89;
          else
            v105 = v63;
          do
          {
            v89 = v105;
            if (!v105)
              break;
            v105 = *(char **)(v105 + 20);
          }
          while (v105 != v91);
          v90 = v91;
          if (!v91)
            goto LABEL_152;
          continue;
        }
      }
      else
      {
        v97 = *((_DWORD *)v90 + 2);
LABEL_137:
        if (v97 >= v69)
          goto LABEL_142;
      }
      if (v89)
        *(_QWORD *)(v89 + 20) = *(_QWORD *)(v90 + 20);
      else
        v63 = *(char **)(v90 + 20);
      free(v90);
      goto LABEL_142;
    }
    break;
  }
  if ((v92 & 0x80000000) != 0 && (_DWORD)v94)
  {
    v98 = (char *)malloc_type_calloc(1uLL, 0x1CuLL, 0x102004076C0B35AuLL);
    if (!v98)
      goto LABEL_166;
    *((_DWORD *)v98 + 2) = v70;
    *((_DWORD *)v98 + 3) = 0;
    *(_DWORD *)v98 = *(_DWORD *)v90;
    *((_DWORD *)v98 + 1) = v96;
    *(_DWORD *)v90 = v96;
    *((_DWORD *)v90 + 2) = v70;
    v99 = v98;
    if (v89)
    {
      *(_QWORD *)(v89 + 20) = v98;
      v99 = v63;
    }
    *(_QWORD *)(v98 + 20) = v90;
    v63 = v99;
    goto LABEL_131;
  }
  if ((int)v92 < 1 || v95 == v96)
    goto LABEL_131;
  v100 = (char *)malloc_type_calloc(1uLL, 0x1CuLL, 0x102004076C0B35AuLL);
  if (v100)
  {
    *((_DWORD *)v100 + 2) = v70;
    *((_DWORD *)v100 + 3) = 0;
    *(_DWORD *)v100 = v96;
    *((_DWORD *)v100 + 1) = *((_DWORD *)v90 + 1);
    *((_DWORD *)v90 + 1) = v96;
    *(_QWORD *)(v100 + 20) = *(_QWORD *)(v90 + 20);
    *(_QWORD *)(v90 + 20) = v100;
    goto LABEL_131;
  }
LABEL_166:
  v87 = FigSignalErrorAt();
  v23 = 0;
  v61 = 0;
  if ((_DWORD)v87)
  {
LABEL_109:
    v61 = v23;
    goto LABEL_157;
  }
LABEL_153:
  a2 = v112;
  a3 = v113;
  if (v112)
  {
LABEL_154:
    *a2 = v24;
    v24 = 0;
  }
LABEL_155:
  v87 = 0;
  if (a3)
  {
    *a3 = v63;
    v63 = 0;
  }
LABEL_157:
  if (v61)
  {
    do
    {
      v106 = *(char **)(v61 + 20);
      free(v61);
      v61 = v106;
    }
    while (v106);
  }
  v107 = (char *)v116;
  if (v116)
  {
    do
    {
      v108 = *(char **)(v107 + 20);
      free(v107);
      v107 = v108;
    }
    while (v108);
  }
  if (v24)
  {
    do
    {
      v109 = *(char **)(v24 + 20);
      free(v24);
      v24 = v109;
    }
    while (v109);
  }
  if (v63)
  {
    do
    {
      v110 = *(char **)(v63 + 20);
      free(v63);
      v63 = v110;
    }
    while (v110);
  }
  return v87;
}

BOOL BVCUtilityIsAffineTransformInvertible(double *a1)
{
  _BOOL8 result;
  double v3;
  double v4;
  double v5;

  result = 0;
  if (fabs(*a1) != INFINITY)
  {
    result = 0;
    v3 = a1[1];
    if (fabs(v3) != INFINITY)
    {
      result = 0;
      v4 = a1[2];
      if (fabs(v4) != INFINITY)
      {
        result = 0;
        v5 = a1[3];
        if (fabs(v5) != INFINITY)
        {
          result = 0;
          if (fabs(a1[4]) != INFINITY)
          {
            result = 0;
            if (fabs(a1[5]) != INFINITY)
              return fabs(*a1 * v5 - v3 * v4) >= 0.000001;
          }
        }
      }
    }
  }
  return result;
}

uint64_t BVCUtilityDestroyEdgeList(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    do
    {
      v1 = *(_QWORD *)(result + 20);
      free((void *)result);
      result = v1;
    }
    while (v1);
  }
  return result;
}

uint64_t FigMetadataReaderGetTypeID()
{
  MEMORY[0x19402F294](&FigMetadataReaderGetClassID_sRegisterFigMetadataReaderBaseTypeOnce, RegisterFigMetadataReaderBaseType);
  return CMBaseClassGetCFTypeID();
}

CFTypeRef FigMetadataReaderRetain(CFTypeRef cf)
{
  if (cf)
    return CFRetain(cf);
  return cf;
}

void FigMetadataReaderRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

CFStringRef FigMetadataReaderBaseCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigMetadataReader %p]"), a1);
}

void FigEndpointStreamAudioEngineSbufTracerDebugPrint(CMAttachmentBearerRef target)
{
  const __CFDictionary *v2;
  const __CFDictionary *v3;

  if (FigEndpointStreamAudioEngineSbufTracerDebugPrint_sSetupLoggingOnce == -1)
  {
    if (!target)
      return;
  }
  else
  {
    dispatch_once(&FigEndpointStreamAudioEngineSbufTracerDebugPrint_sSetupLoggingOnce, &__block_literal_global_0);
    if (!target)
      return;
  }
  v2 = (const __CFDictionary *)CMGetAttachment(target, CFSTR("SbufTracer"), 0);
  if (v2)
  {
    v3 = v2;
    CFDictionaryGetValue(v2, CFSTR("SbufTracerOption_UniqueID"));
    CFDictionaryGetValue(v3, CFSTR("SbufTracerOption_SourceID"));
  }
}

uint64_t FigEndpointStreamAudioEngineGetClassID()
{
  if (FigEndpointStreamAudioEngineGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&FigEndpointStreamAudioEngineGetClassID_sRegisterOnce, &FigEndpointStreamAudioEngineGetClassID_sClassID, (dispatch_function_t)audioEngine_registerBaseClass);
  return FigEndpointStreamAudioEngineGetClassID_sClassID;
}

uint64_t audioEngine_registerBaseClass()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigEndpointStreamAudioEngineGetTypeID()
{
  if (FigEndpointStreamAudioEngineGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&FigEndpointStreamAudioEngineGetClassID_sRegisterOnce, &FigEndpointStreamAudioEngineGetClassID_sClassID, (dispatch_function_t)audioEngine_registerBaseClass);
  return CMBaseClassGetCFTypeID();
}

CFStringRef audioEngine_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigEndpointStreamAudioEngine %p]"), a1);
}

uint64_t FigTimedMetadataRenderPipelineCreate(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v8;
  _QWORD *DerivedStorage;
  uint64_t v10;
  uint64_t FigBaseObject;
  uint64_t (*v12)(uint64_t, const __CFString *, uint64_t, _QWORD *);
  uint64_t v13;
  __int128 v15;
  uint64_t v16;
  CFTypeRef cf;

  cf = 0;
  if (a2)
  {
    if (a4)
    {
      FigRenderPipelineGetClassID();
      v8 = CMDerivedObjectCreate();
      if ((_DWORD)v8)
        goto LABEL_15;
      DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
      DerivedStorage[4] = a2;
      DerivedStorage[5] = a3;
      v10 = FigReentrantMutexCreate();
      DerivedStorage[1] = v10;
      if (v10)
      {
        v15 = *MEMORY[0x1E0CA2E68];
        v16 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
        v8 = FigSimpleRenderPipelineCreateWithCallback(a1, (uint64_t)tdrp_pipelineCallback, 0, (uint64_t)cf, (uint64_t)&v15, 0, DerivedStorage + 2);
        if (!(_DWORD)v8)
        {
          FigBaseObject = FigRenderPipelineGetFigBaseObject(DerivedStorage[2]);
          v12 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
          if (v12)
          {
            v13 = v12(FigBaseObject, CFSTR("SourceSampleBufferQueue"), a1, DerivedStorage + 3);
            if (!(_DWORD)v13)
            {
              CMNotificationCenterGetDefaultLocalCenter();
              CMNotificationCenterAddListener();
              *a4 = cf;
              return v13;
            }
          }
          else
          {
            v13 = 4294954514;
          }
LABEL_10:
          if (cf)
            CFRelease(cf);
          return v13;
        }
LABEL_15:
        v13 = v8;
        goto LABEL_10;
      }
    }
    v8 = FigSignalErrorAt();
    goto LABEL_15;
  }
  return FigSignalErrorAt();
}

void tdrp_pipelineCallback(const void *a1, opaqueCMSampleBuffer *target)
{
  opaqueCMSampleBuffer *v2;
  const __CFArray *SampleAttachmentsArray;
  const __CFArray *v5;
  const opaqueCMFormatDescription *FormatDescription;
  signed int MediaSubType;
  uint64_t v8;
  const __CFAllocator *v9;
  CFIndex v10;
  uint64_t v11;
  __CFDictionary *v12;
  const __CFArray *v13;
  const __CFArray *v14;
  const __CFDictionary *ValueAtIndex;
  const __CFAllocator *v16;
  const __CFDictionary *KeyWithLocalID;
  unsigned int KeyNamespaceUInt32;
  unsigned int v19;
  const void *v20;
  const void *v21;
  const __CFAllocator *v22;
  CFStringRef v23;
  const __CFAllocator *v24;
  CFDataRef v25;
  const __CFAllocator *v26;
  __CFDictionary *Mutable;
  const void *DataTypeForLocalID;
  const __CFAllocator *v29;
  uint64_t v30;
  void (*v31)(void *, uint64_t);
  const void *v32;
  void *v33;
  uint64_t DerivedStorage;
  uint64_t v35;
  void (*v36)(void *, uint64_t);
  CFDictionaryRef cf;
  void *key;
  size_t totalLengthOut;
  CMTime time;
  CMTime theArray;
  uint64_t v42;
  OSType localKeyID;
  void *value[2];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  void *v51;

  v2 = target;
  if (CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0CA2678], 0))
    return;
  SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(v2, 0);
  LOBYTE(value[0]) = 0;
  if (SampleAttachmentsArray)
  {
    v5 = SampleAttachmentsArray;
    if (CFArrayGetCount(SampleAttachmentsArray) > 0)
    {
      CFArrayGetValueAtIndex(v5, 0);
      FigCFDictionaryGetBooleanIfPresent();
    }
  }
  FormatDescription = CMSampleBufferGetFormatDescription(v2);
  MediaSubType = CMFormatDescriptionGetMediaSubType(FormatDescription);
  if (MediaSubType <= 1768174367)
  {
    if (MediaSubType == 1701671783)
    {
      value[0] = 0;
      theArray.value = 0;
      if (!v2)
        return;
      v13 = CMSampleBufferGetSampleAttachmentsArray(v2, 0);
      if (!v13)
        return;
      v14 = v13;
      if (CFArrayGetCount(v13) < 1)
        return;
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v14, 0);
      if (!ValueAtIndex)
        return;
      if (!CFDictionaryGetValueIfPresent(ValueAtIndex, (const void *)*MEMORY[0x1E0CA4E08], (const void **)value))
        return;
      if (!value[0])
        return;
      CFDictionaryGetValueIfPresent((CFDictionaryRef)value[0], (const void *)*MEMORY[0x1E0CA49D8], (const void **)&theArray);
      if (!theArray.value
        || CFStringCompare((CFStringRef)theArray.value, CFSTR("https://developer.apple.com/streaming/emsg-id3"), 0)
        && CFStringCompare((CFStringRef)theArray.value, CFSTR("https://aomedia.org/emsg/ID3"), 0))
      {
        return;
      }
LABEL_33:
      tdrp_ParseID3(a1, v2);
      return;
    }
    if (MediaSubType != 1768126752)
      return;
    theArray.value = 0;
    value[0] = 0;
    value[1] = 0;
    if (!FigIcyMetadataParseSampleBuffer(v2, (CFTypeRef *)&theArray, (CFTypeRef *)value))
    {
      if (!theArray.value)
        goto LABEL_92;
      if (CFArrayGetCount((CFArrayRef)theArray.value) >= 1 && FigCFDictionaryGetCount() >= 1)
      {
        v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v10 = theArray.value ? CFArrayGetCount((CFArrayRef)theArray.value) : 0;
        value[1] = CFArrayCreateMutable(v9, v10, MEMORY[0x1E0C9B378]);
        FigCFArrayApplyFunction();
        if (value[1])
        {
          if (CFArrayGetCount((CFArrayRef)value[1]) >= 1)
          {
            v33 = value[1];
            DerivedStorage = CMBaseObjectGetDerivedStorage();
            MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
            if (*(_BYTE *)DerivedStorage)
            {
              MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 8));
            }
            else
            {
              v36 = *(void (**)(void *, uint64_t))(DerivedStorage + 32);
              v35 = *(_QWORD *)(DerivedStorage + 40);
              MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 8));
              if (v36)
                v36(v33, v35);
            }
          }
        }
      }
    }
    if (theArray.value)
      CFRelease((CFTypeRef)theArray.value);
LABEL_92:
    if (value[0])
      CFRelease(value[0]);
    v32 = value[1];
    if (!value[1])
      return;
LABEL_95:
    CFRelease(v32);
    return;
  }
  if (MediaSubType == 1768174368)
    goto LABEL_33;
  if (MediaSubType != 1835360888)
  {
    if (MediaSubType != 1886155636)
      return;
    v8 = CMBaseObjectGetDerivedStorage();
    value[0] = 0;
    if (!FigMetadataCreateMetadataItemsFromFigMetadataPropertyListSampleBuffer(v2, value))
    {
      MEMORY[0x19402EA0C](*(_QWORD *)(v8 + 8));
      if (*(_BYTE *)v8)
      {
        MEMORY[0x19402EA24](*(_QWORD *)(v8 + 8));
      }
      else
      {
        v31 = *(void (**)(void *, uint64_t))(v8 + 32);
        v30 = *(_QWORD *)(v8 + 40);
        MEMORY[0x19402EA24](*(_QWORD *)(v8 + 8));
        if (v31)
          v31(value[0], v30);
      }
    }
    v32 = value[0];
    if (!value[0])
      return;
    goto LABEL_95;
  }
  v11 = CMBaseObjectGetDerivedStorage();
  v51 = 0;
  MEMORY[0x19402EA0C](*(_QWORD *)(v11 + 8));
  if (*(_BYTE *)v11)
  {
    FigSignalErrorAt();
    goto LABEL_23;
  }
  if (!v2)
  {
LABEL_68:
    v12 = 0;
    goto LABEL_69;
  }
  v49 = 0u;
  v50 = 0u;
  v48 = 0u;
  v46 = 0u;
  v47 = 0u;
  *(_OWORD *)value = 0u;
  v45 = 0u;
  localKeyID = 0;
  v42 = 0;
  CMSampleBufferGetPresentationTimeStamp(&theArray, v2);
  v16 = CFGetAllocator(a1);
  time = theArray;
  cf = CMTimeCopyAsDictionary(&time, v16);
  if (!cf)
  {
LABEL_23:
    v12 = 0;
    v2 = 0;
LABEL_69:
    v25 = 0;
    goto LABEL_70;
  }
  if (!CMSampleBufferGetDataBuffer(v2) || FigAtomStreamInitWithBBuf())
  {
    CFRelease(cf);
    goto LABEL_23;
  }
  v2 = 0;
  key = (void *)*MEMORY[0x1E0CA2510];
  while (1)
  {
    totalLengthOut = 0;
    time.value = 0;
    if (FigAtomStreamGetCurrentAtomTypeAndDataLength())
      goto LABEL_67;
    KeyWithLocalID = CMMetadataFormatDescriptionGetKeyWithLocalID(FormatDescription, localKeyID);
    if (!KeyWithLocalID)
    {
      v12 = 0;
      v25 = 0;
      goto LABEL_56;
    }
    KeyNamespaceUInt32 = FigMetadataKeyGetKeyNamespaceUInt32();
    if (KeyNamespaceUInt32)
    {
      v19 = KeyNamespaceUInt32;
      v20 = CFDictionaryGetValue(KeyWithLocalID, key);
      if (v20)
        break;
    }
    v12 = 0;
    v25 = 0;
    KeyWithLocalID = 0;
LABEL_56:
    if (v51)
    {
      CFRelease(v51);
      v51 = 0;
    }
    if (v25)
      CFRelease(v25);
    if (KeyWithLocalID)
      CFRelease(KeyWithLocalID);
    if (v12)
      CFRelease(v12);
    if (FigAtomStreamAdvanceToNextAtom())
    {
      if (v2)
        (*(void (**)(opaqueCMSampleBuffer *, _QWORD))(v11 + 32))(v2, *(_QWORD *)(v11 + 40));
      goto LABEL_67;
    }
  }
  v21 = v20;
  if (FigAtomStreamReadCurrentAtomDataAndCreateBBuf()
    || CMBlockBufferGetDataPointer((CMBlockBufferRef)v51, 0, 0, &totalLengthOut, (char **)&time))
  {
    goto LABEL_67;
  }
  v22 = CFGetAllocator(a1);
  v23 = CFStringCreateWithFormat(v22, 0, CFSTR("%c%c%c%c"), HIBYTE(v19), BYTE2(v19), BYTE1(v19), v19);
  if (!v23)
  {
    FigSignalErrorAt();
LABEL_67:
    CFRelease(cf);
    goto LABEL_68;
  }
  KeyWithLocalID = (const __CFDictionary *)v23;
  if (!time.value)
  {
    v12 = 0;
    v25 = 0;
    goto LABEL_97;
  }
  v24 = CFGetAllocator(a1);
  v25 = CFDataCreate(v24, (const UInt8 *)time.value, totalLengthOut);
  if (v25)
  {
    v26 = CFGetAllocator(a1);
    Mutable = CFDictionaryCreateMutable(v26, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v12 = Mutable;
    if (!Mutable)
      goto LABEL_97;
    CFDictionaryAddValue(Mutable, CFSTR("value"), v25);
    CFDictionaryAddValue(v12, CFSTR("keyspace"), KeyWithLocalID);
    CFDictionaryAddValue(v12, CFSTR("key"), v21);
    CFDictionaryAddValue(v12, CFSTR("timestamp"), cf);
    DataTypeForLocalID = (const void *)FigMetadataFormatDescriptionGetDataTypeForLocalID();
    if (DataTypeForLocalID)
    {
      CFDictionaryAddValue(v12, CFSTR("dataType"), DataTypeForLocalID);
      CFDictionaryAddValue(v12, CFSTR("dataTypeNamespace"), CFSTR("com.apple.coremedia"));
    }
    if (!v2)
    {
      v29 = CFGetAllocator(a1);
      v2 = CFArrayCreateMutable(v29, 0, MEMORY[0x1E0C9B378]);
      if (!v2)
        goto LABEL_97;
    }
    CFArrayAppendValue(v2, v12);
    goto LABEL_56;
  }
  v12 = 0;
LABEL_97:
  FigSignalErrorAt();
  CFRelease(cf);
  CFRelease(KeyWithLocalID);
LABEL_70:
  if (v51)
    CFRelease(v51);
  if (v25)
    CFRelease(v25);
  if (v12)
    CFRelease(v12);
  if (v2)
    CFRelease(v2);
  MEMORY[0x19402EA24](*(_QWORD *)(v11 + 8));
}

uint64_t tdrp_resetOutput()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t result;
  uint64_t (*v3)(_QWORD, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)DerivedStorage)
    JUMPOUT(0x19402EA24);
  v1 = *(_QWORD *)(DerivedStorage + 40);
  v3 = *(uint64_t (**)(_QWORD, uint64_t))(DerivedStorage + 32);
  result = MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 8));
  if (v3)
    return v3(0, v1);
  return result;
}

uint64_t FigTimedMetadataRenderPipelineInvalidate()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t FigBaseObject;
  uint64_t v4;
  void (*v5)(uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v1 = DerivedStorage;
    MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
    if (!*(_BYTE *)v1)
    {
      *(_BYTE *)v1 = 1;
      if (*(_QWORD *)(v1 + 24))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterRemoveListener();
        CFRelease(*(CFTypeRef *)(v1 + 24));
        *(_QWORD *)(v1 + 24) = 0;
      }
      v2 = *(_QWORD *)(v1 + 16);
      if (v2)
      {
        FigBaseObject = FigRenderPipelineGetFigBaseObject(v2);
        if (FigBaseObject)
        {
          v4 = FigBaseObject;
          v5 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
          if (v5)
            v5(v4);
        }
        CFRelease(*(CFTypeRef *)(v1 + 16));
        *(_QWORD *)(v1 + 16) = 0;
      }
    }
    MEMORY[0x19402EA24](*(_QWORD *)(v1 + 8));
  }
  return 0;
}

uint64_t FigTimedMetadataRenderPipelineFinalize()
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigTimedMetadataRenderPipelineInvalidate();
  result = *(_QWORD *)(DerivedStorage + 8);
  if (result)
  {
    result = FigSimpleMutexDestroy();
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  return result;
}

__CFString *FigTimedMetadataRenderPipelineCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigTimedMetadataRenderPipeline %p>"), a1);
  return Mutable;
}

uint64_t FigTimedMetadataRenderPipelineCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t FigBaseObject;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || *(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  FigBaseObject = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(DerivedStorage + 16));
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v10)
    return v10(FigBaseObject, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigTimedMetadataRenderPipelineSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t FigBaseObject;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || *(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  FigBaseObject = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(DerivedStorage + 16));
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v8)
    return v8(FigBaseObject, a2, a3);
  else
    return 4294954514;
}

void tdrp_ParseID3(const void *a1, CMSampleBufferRef sbuf)
{
  OpaqueCMBlockBuffer *DataBuffer;
  size_t DataLength;
  unint64_t v6;
  __CFArray *Mutable;
  CFIndex Count;
  const void **v9;
  const void **v10;
  const void **v11;
  uint64_t v12;
  CFTypeID TypeID;
  CFIndex v14;
  const void **v15;
  const void **v16;
  const __CFDictionary **v17;
  const __CFString *v18;
  const __CFDictionary *v19;
  const __CFAllocator *v20;
  void *v21;
  const __CFString *v22;
  const __CFDictionary *v23;
  const __CFAllocator *v24;
  void *v25;
  uint64_t DerivedStorage;
  uint64_t v27;
  void (*v28)(__CFArray *, uint64_t);
  CFIndex v29;
  CMTime v30;
  CMTime v31;
  void *value;
  uint64_t outPropertyData;
  CFDictionaryRef theDict;
  char *dataPointerOut;
  CMBlockBufferRef blockBufferOut;

  blockBufferOut = 0;
  theDict = 0;
  dataPointerOut = 0;
  outPropertyData = 0;
  memset(&v31, 0, sizeof(v31));
  CMSampleBufferGetOutputPresentationTimeStamp(&v31, sbuf);
  DataBuffer = CMSampleBufferGetDataBuffer(sbuf);
  if (!CMBlockBufferCreateContiguous(0, DataBuffer, 0, 0, 0, 0, 0, &blockBufferOut))
  {
    DataLength = CMBlockBufferGetDataLength(blockBufferOut);
    if (DataLength >= 0xB)
    {
      v6 = DataLength;
      if (!CMBlockBufferGetDataPointer(blockBufferOut, 0, 0, 0, &dataPointerOut))
      {
        LODWORD(outPropertyData) = 4;
        if (!AudioFormatGetProperty(0x69643373u, 0xAu, dataPointerOut, (UInt32 *)&outPropertyData, (char *)&outPropertyData + 4)&& v6 >= HIDWORD(outPropertyData))
        {
          LODWORD(outPropertyData) = 8;
          if (!AudioFormatGetProperty(0x69643364u, HIDWORD(outPropertyData), dataPointerOut, (UInt32 *)&outPropertyData, &theDict))
          {
            Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
            Count = CFDictionaryGetCount(theDict);
            v9 = (const void **)malloc_type_calloc(2 * Count, 8uLL, 0xC0040B8AA526DuLL);
            if (v9)
            {
              v10 = v9;
              v11 = &v9[Count];
              CFDictionaryGetKeysAndValues(theDict, v9, v11);
              if (Count >= 1)
              {
                v12 = 0;
                value = 0;
                v29 = Count;
                do
                {
                  TypeID = CFDictionaryGetTypeID();
                  if (TypeID == CFGetTypeID(v11[v12]))
                  {
                    v14 = CFDictionaryGetCount((CFDictionaryRef)v11[v12]);
                    v15 = (const void **)malloc_type_calloc(2 * v14, 8uLL, 0xC0040B8AA526DuLL);
                    if (v15)
                    {
                      v16 = v15;
                      v17 = (const __CFDictionary **)&v15[v14];
                      CFDictionaryGetKeysAndValues((CFDictionaryRef)v11[v12], v16, &v16[v14]);
                      if (v14 >= 1)
                      {
                        do
                        {
                          v18 = (const __CFString *)v10[v12];
                          v19 = *v17;
                          v20 = CFGetAllocator(a1);
                          v30 = v31;
                          if (!tdrp_BuildID3Dictionary(v18, v19, &v30, v20, (__CFDictionary **)&value))
                          {
                            v21 = value;
                            CFArrayAppendValue(Mutable, value);
                            CFRelease(v21);
                          }
                          ++v17;
                          --v14;
                        }
                        while (v14);
                      }
                      free(v16);
                      Count = v29;
                    }
                  }
                  else
                  {
                    v22 = (const __CFString *)v10[v12];
                    v23 = (const __CFDictionary *)v11[v12];
                    v24 = CFGetAllocator(a1);
                    v30 = v31;
                    if (!tdrp_BuildID3Dictionary(v22, v23, &v30, v24, (__CFDictionary **)&value))
                    {
                      v25 = value;
                      CFArrayAppendValue(Mutable, value);
                      CFRelease(v25);
                    }
                  }
                  ++v12;
                }
                while (v12 != Count);
              }
              free(v10);
              if (CFArrayGetCount(Mutable) >= 1)
              {
                DerivedStorage = CMBaseObjectGetDerivedStorage();
                MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
                if (*(_BYTE *)DerivedStorage)
                {
                  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 8));
                }
                else
                {
                  v28 = *(void (**)(__CFArray *, uint64_t))(DerivedStorage + 32);
                  v27 = *(_QWORD *)(DerivedStorage + 40);
                  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 8));
                  if (v28 && CFArrayGetCount(Mutable) >= 1)
                    v28(Mutable, v27);
                }
              }
            }
            if (Mutable)
              CFRelease(Mutable);
          }
        }
      }
    }
  }
  if (theDict)
    CFRelease(theDict);
  if (blockBufferOut)
    CFRelease(blockBufferOut);
}

void tdrp_CopyIcyItem(void *key, CFDictionaryRef *a2)
{
  void *value;

  value = 0;
  if (CFDictionaryGetValueIfPresent(*a2, key, (const void **)&value))
    CFArrayAppendValue(a2[1], value);
}

uint64_t tdrp_BuildID3Dictionary(const __CFString *a1, const __CFDictionary *Value, CMTime *a3, const __CFAllocator *a4, __CFDictionary **a5)
{
  CFTypeID TypeID;
  const __CFDictionary *v11;
  __CFDictionary *Mutable;
  __CFDictionary *v13;
  CFDictionaryRef v14;
  CFDictionaryRef v15;
  const void *v16;
  const void *v17;
  const __CFString *v18;
  const void *v19;
  const void *v20;
  CFTypeID v21;
  const __CFURL *v22;
  const __CFURL *v23;
  CFStringRef v24;
  const __CFDictionary *v25;
  CFComparisonResult v26;
  const __CFString *v28;
  CFTypeID v29;
  const __CFDictionary *v30;
  CMTime v31;

  TypeID = CFDictionaryGetTypeID();
  if (TypeID == CFGetTypeID(Value))
    v11 = Value;
  else
    v11 = 0;
  Mutable = CFDictionaryCreateMutable(a4, 7, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v13 = Mutable;
    CFDictionaryAddValue(Mutable, CFSTR("keyspace"), CFSTR("org.id3"));
    CFDictionaryAddValue(v13, CFSTR("key"), a1);
    v31 = *a3;
    v14 = CMTimeCopyAsDictionary(&v31, a4);
    if (v14)
    {
      v15 = v14;
      CFDictionaryAddValue(v13, CFSTR("timestamp"), v14);
      CFRelease(v15);
      if (v11)
      {
        Value = (const __CFDictionary *)CFDictionaryGetValue(v11, CFSTR("data"));
        if (!Value)
          Value = (const __CFDictionary *)CFDictionaryGetValue(v11, CFSTR("text"));
        v16 = CFDictionaryGetValue(v11, CFSTR("identifier"));
        if (v16)
          CFDictionaryAddValue(v13, CFSTR("info"), v16);
        v17 = CFDictionaryGetValue(v11, CFSTR("language"));
        if (v17)
          CFDictionaryAddValue(v13, CFSTR("languageCode"), v17);
        v18 = (const __CFString *)CFDictionaryGetValue(v11, CFSTR("MIME"));
        if (v18)
        {
          CFDictionaryAddValue(v13, CFSTR("dataType"), v18);
          CFDictionaryAddValue(v13, CFSTR("dataTypeNamespace"), CFSTR("org.iana.media-type"));
        }
        v19 = CFDictionaryGetValue(v11, CFSTR("picturetype"));
        if (v19)
          CFDictionaryAddValue(v13, CFSTR("pictureType"), v19);
        v20 = CFDictionaryGetValue(v11, CFSTR("filename"));
        if (v20)
          CFDictionaryAddValue(v13, CFSTR("name"), v20);
        if (Value)
          goto LABEL_20;
      }
      else
      {
        v18 = 0;
        if (Value)
        {
LABEL_20:
          v21 = CFURLGetTypeID();
          if (v21 == CFGetTypeID(Value) && (v22 = CFURLCopyAbsoluteURL(Value)) != 0)
          {
            v23 = v22;
            v24 = CFURLGetString(v22);
            if (v24)
            {
              Value = (const __CFDictionary *)CFRetain(v24);
              v25 = Value;
            }
            else
            {
              v25 = 0;
            }
            CFRelease(v23);
          }
          else
          {
            v25 = 0;
          }
          v26 = CFStringCompare(a1, CFSTR("GEOB"), 0);
          if (v18)
          {
            if (v26 == kCFCompareEqualTo && CFStringCompare(v18, CFSTR("application/xml"), 1uLL) == kCFCompareEqualTo)
            {
              v28 = (const __CFString *)CFDictionaryGetValue(v13, CFSTR("name"));
              if (v28)
              {
                if (CFStringHasSuffix(v28, CFSTR(".plist")))
                {
                  v29 = CFDataGetTypeID();
                  if (v29 == CFGetTypeID(Value))
                  {
                    v30 = (const __CFDictionary *)CFPropertyListCreateWithData(a4, Value, 0, 0, 0);
                    if (v30)
                    {
                      Value = v30;
                      v25 = v30;
                    }
                  }
                }
              }
            }
          }
          CFDictionaryAddValue(v13, CFSTR("value"), Value);
          *a5 = v13;
          if (v25)
            CFRelease(v25);
          return 0;
        }
      }
      *a5 = v13;
    }
    else
    {
      Value = (const __CFDictionary *)FigSignalErrorAt();
      CFRelease(v13);
    }
    return (uint64_t)Value;
  }
  return FigSignalErrorAt();
}

uint64_t FigDataChannelResourceGetClassID()
{
  MEMORY[0x19402F294](&FigDataChannelResourceGetClassID_sRegisterFigDataChannelResourceTypeOnce, RegisterFigDataChannelResourceType);
  return sFigDataChannelResourceClassID;
}

uint64_t RegisterFigDataChannelResourceType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigDataChannelResourceGetTypeID()
{
  MEMORY[0x19402F294](&FigDataChannelResourceGetClassID_sRegisterFigDataChannelResourceTypeOnce, RegisterFigDataChannelResourceType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigDataChannelResourceCreate(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t Copy;
  _DWORD *DerivedStorage;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a3 || MEMORY[0x19402F03C](a3) <= 0 || !a4)
    return FigSignalErrorAt();
  MEMORY[0x19402F294](&FigDataChannelResourceGetClassID_sRegisterFigDataChannelResourceTypeOnce, RegisterFigDataChannelResourceType);
  Copy = CMDerivedObjectCreate();
  if (!(_DWORD)Copy)
  {
    DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
    DerivedStorage[2] = 0;
    DerivedStorage[6] = 0;
    DerivedStorage[8] = 0;
    CFGetAllocator(0);
    Copy = FigTagCollectionCreateCopy();
    if (!(_DWORD)Copy)
      *a4 = 0;
  }
  return Copy;
}

CFStringRef FigDataChannelResourceCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigDataChannelResource %p]"), a1);
}

BOOL dataChannelResource_equal(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

void dataChannelResource_finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
}

CFStringRef dataChannelResource_copyDebugDesc(uint64_t a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (DerivedStorage)
    return CFStringCreateWithFormat(v3, 0, CFSTR("[DataChannelResource %p]: resourceID: %d"), a1, *(unsigned int *)(DerivedStorage + 8));
  else
    return CFStringCreateWithFormat(v3, 0, CFSTR("[DataChannelResource %p]"), a1);
}

uint64_t dataChannelResource_GetState(uint64_t a1)
{
  os_unfair_lock_s *DerivedStorage;
  os_unfair_lock_s *v2;
  uint64_t os_unfair_lock_opaque;

  if (a1)
  {
    DerivedStorage = (os_unfair_lock_s *)CMBaseObjectGetDerivedStorage();
    v2 = DerivedStorage + 8;
    os_unfair_lock_lock(DerivedStorage + 8);
    os_unfair_lock_opaque = DerivedStorage[6]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v2);
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
  return os_unfair_lock_opaque;
}

uint64_t dataChannelResource_CopyPayload(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  os_unfair_lock_s *v4;
  CFTypeRef v5;

  if (!a1 || !a2)
    return FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = (os_unfair_lock_s *)(DerivedStorage + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 32));
  if (*(_QWORD *)DerivedStorage)
    v5 = CFRetain(*(CFTypeRef *)DerivedStorage);
  else
    v5 = 0;
  os_unfair_lock_unlock(v4);
  *a2 = v5;
  return 0;
}

uint64_t dataChannelResource_CopyTagCollection(const void *a1, uint64_t a2)
{
  if (!a1 || !a2)
    return FigSignalErrorAt();
  CMBaseObjectGetDerivedStorage();
  CFGetAllocator(a1);
  return FigTagCollectionCreateCopy();
}

uint64_t dataChannelResource_ProvidePayload(uint64_t a1, const void *a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DerivedStorage;
  _QWORD *v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;

  if (dword_1EE2A28E8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a1 && a2 && (DerivedStorage = CMBaseObjectGetDerivedStorage(), !*(_QWORD *)DerivedStorage))
  {
    v6 = (_QWORD *)DerivedStorage;
    v7 = (os_unfair_lock_s *)(DerivedStorage + 32);
    os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 32));
    *v6 = CFRetain(a2);
    os_unfair_lock_unlock(v7);
    v8 = dataChannelResource_setResourceStateAndPostNotification(a1, 1u);
  }
  else
  {
    v8 = FigSignalErrorAt();
  }
  v9 = v8;
  if ((_DWORD)v8)
  {
    v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v9;
}

uint64_t dataChannelResource_SetFailedToLoad(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (dword_1EE2A28E8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a1)
    return dataChannelResource_setResourceStateAndPostNotification(a1, 2u);
  else
    return FigSignalErrorAt();
}

uint64_t dataChannelResource_SetCancelled(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (dword_1EE2A28E8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a1)
    return dataChannelResource_setResourceStateAndPostNotification(a1, 3u);
  else
    return FigSignalErrorAt();
}

uint64_t dataChannelResource_SetProcessingState(uint64_t a1, unsigned int a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  os_unfair_lock_s *DerivedStorage;
  os_unfair_lock_s *v6;
  uint32_t os_unfair_lock_opaque;
  NSObject *v8;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v11;

  if (dword_1EE2A28E8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a1)
  {
    DerivedStorage = (os_unfair_lock_s *)CMBaseObjectGetDerivedStorage();
    v6 = DerivedStorage + 8;
    os_unfair_lock_lock(DerivedStorage + 8);
    if (a2 >= 3)
    {
      os_unfair_lock_unlock(v6);
      return 4294948214;
    }
    os_unfair_lock_opaque = DerivedStorage[7]._os_unfair_lock_opaque;
    if (dword_1EE2A28E8)
    {
      v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    DerivedStorage[7]._os_unfair_lock_opaque = a2;
    os_unfair_lock_unlock(v6);
    if (os_unfair_lock_opaque == a2)
      return 0;
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v11 = Mutable;
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      CFRelease(v11);
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t dataChannelResource_GetProcessingState(uint64_t a1)
{
  os_unfair_lock_s *DerivedStorage;
  os_unfair_lock_s *v2;
  uint64_t os_unfair_lock_opaque;

  if (a1)
  {
    DerivedStorage = (os_unfair_lock_s *)CMBaseObjectGetDerivedStorage();
    v2 = DerivedStorage + 8;
    os_unfair_lock_lock(DerivedStorage + 8);
    os_unfair_lock_opaque = DerivedStorage[7]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v2);
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
  return os_unfair_lock_opaque;
}

uint64_t dataChannelResource_setResourceStateAndPostNotification(uint64_t a1, uint32_t a2)
{
  os_unfair_lock_s *DerivedStorage;
  os_unfair_lock_s *v4;
  unsigned int os_unfair_lock_opaque;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v15;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v17;

  DerivedStorage = (os_unfair_lock_s *)CMBaseObjectGetDerivedStorage();
  v4 = DerivedStorage + 8;
  os_unfair_lock_lock(DerivedStorage + 8);
  os_unfair_lock_opaque = DerivedStorage[6]._os_unfair_lock_opaque;
  v6 = a2 - 1;
  if (os_unfair_lock_opaque)
    v7 = -19082;
  else
    v7 = 0;
  v8 = os_unfair_lock_opaque < 2;
  if (os_unfair_lock_opaque >= 2)
    v9 = -19082;
  else
    v9 = 0;
  if (a2 == 3)
  {
    v10 = v9;
  }
  else
  {
    v8 = 0;
    v10 = -19082;
  }
  if (v6 >= 2)
    v11 = v8;
  else
    v11 = os_unfair_lock_opaque == 0;
  if (v6 >= 2)
    v12 = v10;
  else
    v12 = v7;
  if (os_unfair_lock_opaque == a2 && dword_1EE2A28E8 != 0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v12 = v12;
  }
  if (v11)
  {
    if (dword_1EE2A28E8)
    {
      v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    DerivedStorage[6]._os_unfair_lock_opaque = a2;
    os_unfair_lock_unlock(v4);
    if (os_unfair_lock_opaque != a2)
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (Mutable)
      {
        v17 = Mutable;
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        CFRelease(v17);
      }
      else
      {
        return FigSignalErrorAt();
      }
    }
  }
  else
  {
    os_unfair_lock_unlock(v4);
  }
  return v12;
}

uint64_t FigSessionDataSpecifierGetTypeID()
{
  __int128 v1;

  v1 = xmmword_1E2F78400;
  if (sds_getTypeID_once != -1)
    dispatch_once_f(&sds_getTypeID_once, &v1, (dispatch_function_t)spptUtil_registerClass);
  return sds_getTypeID_typeID;
}

uint64_t FigSessionDataSpecifierCreate(const void *a1, const void *a2, const void *a3, const void *a4, int a5, uint64_t *a6)
{
  uint64_t Instance;
  uint64_t v13;
  CFTypeRef v14;
  CFTypeRef v15;
  CFTypeRef v16;
  CFTypeRef v17;

  MEMORY[0x19402F294](&sFigPlaylistSpecifiersRegisterAttachmentOnce, _figAttachmentsRegisterStreamPlaylistSpecifiers);
  if (!a6)
    return FigSignalErrorAt();
  FigGetAllocatorForMedia();
  FigSessionDataSpecifierGetTypeID();
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v13 = Instance;
  if (a1)
    v14 = CFRetain(a1);
  else
    v14 = 0;
  *(_QWORD *)(v13 + 16) = v14;
  if (a2)
    v15 = CFRetain(a2);
  else
    v15 = 0;
  *(_QWORD *)(v13 + 24) = v15;
  if (a3)
    v16 = CFRetain(a3);
  else
    v16 = 0;
  *(_QWORD *)(v13 + 32) = v16;
  if (a4)
    v17 = CFRetain(a4);
  else
    v17 = 0;
  *(_QWORD *)(v13 + 40) = v17;
  *(_DWORD *)(v13 + 48) = a5;
  *a6 = v13;
  return 0;
}

uint64_t FigSessionDataSpecifierGetIdentifier(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t FigSessionDataSpecifierGetURL(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

void FigSessionDataSpecifierSetURL(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  v2 = *(const void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
}

uint64_t FigSessionDataSpecifierGetValue(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t FigSessionDataSpecifierGetLanguage(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t FigSessionDataSpecifierGetFormatType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t FigRenditionReportSpecifierGetTypeID()
{
  __int128 v1;

  v1 = xmmword_1E2F78470;
  if (rrs_getTypeID_once != -1)
    dispatch_once_f(&rrs_getTypeID_once, &v1, (dispatch_function_t)spptUtil_registerClass);
  return rrs_getTypeID_typeID;
}

uint64_t FigRenditionReportSpecifierCreate(const void *a1, uint64_t a2, uint64_t a3, int a4, int a5, char a6, char a7, uint64_t *a8)
{
  uint64_t Instance;
  uint64_t v17;
  CFTypeRef v18;

  MEMORY[0x19402F294](&sFigPlaylistSpecifiersRegisterAttachmentOnce, _figAttachmentsRegisterStreamPlaylistSpecifiers);
  if (!a8)
    return FigSignalErrorAt();
  FigGetAllocatorForMedia();
  FigRenditionReportSpecifierGetTypeID();
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v17 = Instance;
  if (a1)
    v18 = CFRetain(a1);
  else
    v18 = 0;
  *(_QWORD *)(v17 + 16) = v18;
  *(_QWORD *)(v17 + 24) = a2;
  *(_QWORD *)(v17 + 32) = a3;
  *(_DWORD *)(v17 + 40) = a4;
  *(_DWORD *)(v17 + 44) = a5;
  *(_BYTE *)(v17 + 48) = a6;
  *(_BYTE *)(v17 + 49) = a7;
  *a8 = v17;
  return 0;
}

uint64_t FigRenditionReportSpecifierGetURL(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t FigRenditionReportSpecifierGetLastMediaSequenceNumber(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t FigRenditionReportSpecifierGetLastIndependentMediaSequenceNumber(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t FigRenditionReportSpecifierGetLastPart(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t FigRenditionReportSpecifierGetLastIndependentPart(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t FigRenditionReportSpecifierIsReadInCurrent(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

uint64_t FigRenditionReportSpecifierSetReadInCurrent(uint64_t result, char a2)
{
  *(_BYTE *)(result + 48) = a2;
  return result;
}

uint64_t FigRenditionReportSpecifierIsGapAtLive(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 49);
}

uint64_t FigDateRangeSpecifierGetTypeID()
{
  __int128 v1;

  v1 = xmmword_1E2F784E0;
  if (drs_getTypeID_once != -1)
    dispatch_once_f(&drs_getTypeID_once, &v1, (dispatch_function_t)spptUtil_registerClass);
  return drs_getTypeID_typeID;
}

uint64_t FigDateRangeSpecifierCreate(const void *a1, const void *a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7, char a8, double a9, double a10, double a11, double a12, char a13, const void *a14, const void *a15, const void *a16, const void *a17, char a18, const void *a19, const void *a20,const void *a21,uint64_t *a22)
{
  uint64_t Instance;
  uint64_t v34;
  CFTypeRef v35;
  CFTypeRef v36;
  CFTypeRef v37;
  CFTypeRef v38;
  CFTypeRef v39;
  CFTypeRef v40;
  CFTypeRef v41;
  CFTypeRef v42;
  CFTypeRef v43;
  CFTypeRef v44;
  CFTypeRef v45;
  CFTypeRef v46;
  CFTypeRef v47;
  CFTypeRef v48;
  const __CFAllocator *AllocatorForMedia;
  const __CFAllocator *v50;

  MEMORY[0x19402F294](&sFigPlaylistSpecifiersRegisterAttachmentOnce, _figAttachmentsRegisterStreamPlaylistSpecifiers);
  if (!a22)
    return FigSignalErrorAt();
  FigGetAllocatorForMedia();
  FigDateRangeSpecifierGetTypeID();
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v34 = Instance;
  if (a1)
    v35 = CFRetain(a1);
  else
    v35 = 0;
  *(_QWORD *)(v34 + 16) = v35;
  if (a2)
    v36 = CFRetain(a2);
  else
    v36 = 0;
  *(_QWORD *)(v34 + 24) = v36;
  if (a3)
    v37 = CFRetain(a3);
  else
    v37 = 0;
  *(_QWORD *)(v34 + 32) = v37;
  if (a4)
    v38 = CFRetain(a4);
  else
    v38 = 0;
  *(_QWORD *)(v34 + 40) = v38;
  if (a5)
    v39 = CFRetain(a5);
  else
    v39 = 0;
  *(_QWORD *)(v34 + 48) = v39;
  if (a6)
    v40 = CFRetain(a6);
  else
    v40 = 0;
  *(_QWORD *)(v34 + 56) = v40;
  if (a7)
    v41 = CFRetain(a7);
  else
    v41 = 0;
  *(_QWORD *)(v34 + 64) = v41;
  *(_BYTE *)(v34 + 160) = a8;
  *(_BYTE *)(v34 + 161) = a13;
  if (a14)
    v42 = CFRetain(a14);
  else
    v42 = 0;
  *(_QWORD *)(v34 + 72) = v42;
  if (a15)
    v43 = CFRetain(a15);
  else
    v43 = 0;
  *(_QWORD *)(v34 + 80) = v43;
  v44 = a16;
  if (a16)
    v44 = CFRetain(a16);
  *(_QWORD *)(v34 + 88) = v44;
  *(double *)(v34 + 96) = a9;
  *(double *)(v34 + 104) = a10;
  v45 = a17;
  if (a17)
    v45 = CFRetain(a17);
  *(_QWORD *)(v34 + 112) = v45;
  *(_BYTE *)(v34 + 162) = a18;
  *(double *)(v34 + 120) = a11;
  *(double *)(v34 + 128) = a12;
  v46 = a19;
  if (a19)
    v46 = CFRetain(a19);
  *(_QWORD *)(v34 + 136) = v46;
  v47 = a20;
  if (a20)
    v47 = CFRetain(a20);
  *(_QWORD *)(v34 + 144) = v47;
  v48 = a21;
  if (a21)
    v48 = CFRetain(a21);
  *(_QWORD *)(v34 + 152) = v48;
  if (!*(_QWORD *)(v34 + 16))
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    *(_QWORD *)(v34 + 16) = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  }
  if (!*(_QWORD *)(v34 + 112))
  {
    v50 = (const __CFAllocator *)FigGetAllocatorForMedia();
    *(_QWORD *)(v34 + 112) = CFDictionaryCreateMutable(v50, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  }
  *a22 = v34;
  return 0;
}

uint64_t FigDateRangeSpecifierGetMetadataDict(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void FigDateRangeSpecifierSetMetadataDict(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  v2 = *(const void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
}

void FigDateRangeSpecifierSetValueForMetadataDict(uint64_t a1, const void *a2, const void *a3)
{
  CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 16), a2, a3);
}

uint64_t FigDateRangeSpecifierGetIdentifier(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

void FigDateRangeSpecifierSetIdentifier(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  v2 = *(const void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
}

uint64_t FigDateRangeSpecifierGetTaggedRangeClass(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void FigDateRangeSpecifierSetTaggedRangeClass(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  v2 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
}

uint64_t FigDateRangeSpecifierGetTaggedRangeLine(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

void FigDateRangeSpecifierSetTaggedRangeLine(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  v2 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
}

uint64_t FigDateRangeSpecifierGetTaggedRangeCue(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

void FigDateRangeSpecifierSetTaggedRangeCue(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  v2 = *(const void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
}

uint64_t FigDateRangeSpecifierGetStartDate(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

void FigDateRangeSpecifierSetStartDate(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  v2 = *(const void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
}

uint64_t FigDateRangeSpecifierGetEndDate(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void FigDateRangeSpecifierSetEndDate(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  v2 = *(const void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
}

uint64_t FigDateRangeSpecifierGetEndOnNext(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 160);
}

uint64_t FigDateRangeSpecifierSetEndOnNext(uint64_t result, char a2)
{
  *(_BYTE *)(result + 160) = a2;
  return result;
}

uint64_t FigDateRangeSpecifierGetEndOnNextSet(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 161);
}

uint64_t FigDateRangeSpecifierSetEndOnNextSet(uint64_t result, char a2)
{
  *(_BYTE *)(result + 161) = a2;
  return result;
}

uint64_t FigDateRangeSpecifierGetScte35cmd(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

void FigDateRangeSpecifierSetScte35cmd(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  v2 = *(const void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
}

uint64_t FigDateRangeSpecifierGetScte35in(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80);
}

void FigDateRangeSpecifierSetScte35in(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  v2 = *(const void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
}

uint64_t FigDateRangeSpecifierGetScte35out(uint64_t a1)
{
  return *(_QWORD *)(a1 + 88);
}

void FigDateRangeSpecifierSetScte35out(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  v2 = *(const void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
}

double FigDateRangeSpecifierGetDuration(uint64_t a1)
{
  return *(double *)(a1 + 96);
}

uint64_t FigDateRangeSpecifierSetDuration(uint64_t result, double a2)
{
  *(double *)(result + 96) = a2;
  return result;
}

double FigDateRangeSpecifierGetPlannedDuration(uint64_t a1)
{
  return *(double *)(a1 + 104);
}

uint64_t FigDateRangeSpecifierSetPlannedDuration(uint64_t result, double a2)
{
  *(double *)(result + 104) = a2;
  return result;
}

uint64_t FigDateRangeSpecifierGetTagsFirstFoundDateDict(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112);
}

void FigDateRangeSpecifierSetValueForTagsFirstFoundDateDict(uint64_t a1, const void *a2, const void *a3)
{
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 112), a2, a3);
}

uint64_t FigDateRangeSpecifierGetReadInCurrent(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 162);
}

uint64_t FigDateRangeSpecifierSetReadInCurrent(uint64_t result, char a2)
{
  *(_BYTE *)(result + 162) = a2;
  return result;
}

double FigDateRangeSpecifierGetTempDuration(uint64_t a1)
{
  return *(double *)(a1 + 120);
}

uint64_t FigDateRangeSpecifierSetTempDuration(uint64_t result, double a2)
{
  *(double *)(result + 120) = a2;
  return result;
}

double FigDateRangeSpecifierGetTempPlannedDuration(uint64_t a1)
{
  return *(double *)(a1 + 128);
}

uint64_t FigDateRangeSpecifierSetTempPlannedDuration(uint64_t result, double a2)
{
  *(double *)(result + 128) = a2;
  return result;
}

uint64_t FigDateRangeSpecifierGetTempEndDate(uint64_t a1)
{
  return *(_QWORD *)(a1 + 136);
}

void FigDateRangeSpecifierSetTempEndDate(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  v2 = *(const void **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
}

uint64_t FigDateRangeSpecifierGetDiscoveryTimestamp(uint64_t a1)
{
  return *(_QWORD *)(a1 + 144);
}

uint64_t FigDateRangeSpecifierGetModificationTimestamp(uint64_t a1)
{
  return *(_QWORD *)(a1 + 152);
}

void FigDateRangeSpecifierSetModificationTimestamp(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  v2 = *(const void **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
}

uint64_t FigContentKeySpecifierGetTypeID()
{
  __int128 v1;

  v1 = xmmword_1E2F78550;
  if (cks_getTypeID_once != -1)
    dispatch_once_f(&cks_getTypeID_once, &v1, (dispatch_function_t)spptUtil_registerClass);
  return cks_getTypeID_typeID;
}

uint64_t FigContentKeySpecifierCreate(int a1, const void *a2, int a3, const void *a4, uint64_t *a5)
{
  uint64_t Instance;
  uint64_t v11;
  CFTypeRef v12;
  CFTypeRef v13;

  MEMORY[0x19402F294](&sFigPlaylistSpecifiersRegisterAttachmentOnce, _figAttachmentsRegisterStreamPlaylistSpecifiers);
  if (!a5)
    return FigSignalErrorAt();
  FigGetAllocatorForMedia();
  FigContentKeySpecifierGetTypeID();
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v11 = Instance;
  *(_DWORD *)(Instance + 16) = a1;
  if (a2)
    v12 = CFRetain(a2);
  else
    v12 = 0;
  *(_QWORD *)(v11 + 24) = v12;
  *(_DWORD *)(v11 + 32) = a3;
  if (a4)
    v13 = CFRetain(a4);
  else
    v13 = 0;
  *(_QWORD *)(v11 + 40) = v13;
  *a5 = v11;
  return 0;
}

uint64_t FigContentKeySpecifierGetKeySystem(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t FigContentKeySpecifierGetIdentifier(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t FigContentKeySpecifierGetEncryptionMethod(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t FigContentKeySpecifierGetSupportedProtocolVersions(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t FigContentKeySpecifierGetIsPrefetchKey(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

uint64_t FigContentKeySpecifierSetIsPrefetchKey(uint64_t result, char a2)
{
  *(_BYTE *)(result + 48) = a2;
  return result;
}

uint64_t FigContentKeySpecifierGetIsReadInCurrent(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 49);
}

uint64_t FigContentKeySpecifierSetIsReadInCurrent(uint64_t result, char a2)
{
  *(_BYTE *)(result + 49) = a2;
  return result;
}

uint64_t FigContentKeySpecifierGetCryptKeyParsedIndex(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

uint64_t FigContentKeySpecifierSetCryptKeyParsedIndex(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 56) = a2;
  return result;
}

uint64_t FigContentKeySpecifierGetIsChangedInCurrent(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

uint64_t FigContentKeySpecifierSetIsChangedInCurrent(uint64_t result, char a2)
{
  *(_BYTE *)(result + 64) = a2;
  return result;
}

uint64_t FigContentKeySpecifierGetRawKeyFormat(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

void FigContentKeySpecifierSetRawKeyFormat(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  v2 = *(const void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
}

uint64_t FigContentKeySpecifierGetNextKey(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80);
}

uint64_t FigContentKeySpecifierSetNextKey(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 80) = a2;
  return result;
}

uint64_t FigContentKeySpecifierGetPreviousKey(uint64_t a1)
{
  return *(_QWORD *)(a1 + 88);
}

uint64_t FigContentKeySpecifierSetPreviousKey(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 88) = a2;
  return result;
}

uint64_t FigMediaSegmentSpecifierGetTypeID()
{
  __int128 v1;

  v1 = xmmword_1E2F785C0;
  if (mss_getTypeID_once != -1)
    dispatch_once_f(&mss_getTypeID_once, &v1, (dispatch_function_t)spptUtil_registerClass);
  return mss_getTypeID_typeID;
}

uint64_t FigMediaSegmentSpecifierCreate(double a1, double a2, double a3, uint64_t a4, const void *a5, const void *a6, const void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12, const void *a13, int a14, char a15, char a16, char a17, char a18, char a19, char a20,uint64_t a21,char a22,uint64_t *a23)
{
  uint64_t Instance;
  uint64_t v33;
  CFTypeRef v34;
  CFTypeRef v35;
  CFTypeRef v36;
  CFTypeRef v37;
  CFTypeRef v38;

  MEMORY[0x19402F294](&sFigPlaylistSpecifiersRegisterAttachmentOnce, _figAttachmentsRegisterStreamPlaylistSpecifiers);
  if (!a23)
    return FigSignalErrorAt();
  FigMediaSegmentSpecifierGetTypeID();
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v33 = Instance;
  if (a5)
    v34 = CFRetain(a5);
  else
    v34 = 0;
  *(_QWORD *)(v33 + 16) = v34;
  if (a6)
    v35 = CFRetain(a6);
  else
    v35 = 0;
  *(_QWORD *)(v33 + 24) = v35;
  if (a7)
    v36 = CFRetain(a7);
  else
    v36 = 0;
  *(_QWORD *)(v33 + 32) = v36;
  *(_QWORD *)(v33 + 48) = a8;
  *(_QWORD *)(v33 + 64) = a9;
  *(_QWORD *)(v33 + 72) = a10;
  *(_QWORD *)(v33 + 80) = a11;
  *(double *)(v33 + 88) = a1;
  *(double *)(v33 + 96) = a2;
  if (a12)
    v37 = CFRetain(a12);
  else
    v37 = 0;
  *(_QWORD *)(v33 + 104) = v37;
  if (a13)
    v38 = CFRetain(a13);
  else
    v38 = 0;
  *(_QWORD *)(v33 + 112) = v38;
  *(double *)(v33 + 120) = a3;
  *(_DWORD *)(v33 + 160) = a14;
  *(_BYTE *)(v33 + 152) = a15;
  *(_BYTE *)(v33 + 153) = a16;
  *(_BYTE *)(v33 + 154) = a17;
  *(_BYTE *)(v33 + 155) = a18;
  *(_BYTE *)(v33 + 156) = a19;
  *(_BYTE *)(v33 + 157) = a20;
  *(_QWORD *)(v33 + 56) = a21;
  *(_BYTE *)(v33 + 158) = a22;
  *a23 = v33;
  return 0;
}

uint64_t FigMediaSegmentSpecifierCreateEmpty(uint64_t a1, uint64_t *a2)
{
  return FigMediaSegmentSpecifierCreate(0.0, 0.0, 0.0, a1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
           0,
           0,
           0,
           a2);
}

uint64_t FigMediaSegmentSpecifierGetURLString(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void FigMediaSegmentSpecifierSetURLString(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  v2 = *(const void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
}

uint64_t FigMediaSegmentSpecifierGetContentKeySpecifier(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

void FigMediaSegmentSpecifierSetContentKeySpecifier(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  v2 = *(const void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
}

uint64_t FigMediaSegmentSpecifierGetMapSegmentSpecifier(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void FigMediaSegmentSpecifierSetMapSegmentSpecifier(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  v2 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
}

uint64_t FigMediaSegmentSpecifierGetPartialSegments(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t FigMediaSegmentSpecifierAddPartialSegment(uint64_t a1, _QWORD *a2)
{
  const __CFAllocator *AllocatorForMedia;
  CFMutableArrayRef Mutable;
  uint64_t LastValue;

  if (!*(_QWORD *)(a1 + 40))
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(a1 + 40) = Mutable;
    if (!Mutable)
      return FigSignalErrorAt();
  }
  LastValue = FigCFArrayGetLastValue();
  if (LastValue)
  {
    *(_QWORD *)(LastValue + 128) = a2;
    a2[16] = 0;
    a2[17] = LastValue;
  }
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 40), a2);
  return 0;
}

uint64_t FigMediaSegmentSpecifierSetNextSegment(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 128) = a2;
  return result;
}

uint64_t FigMediaSegmentSpecifierSetPreviousSegment(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 136) = a2;
  return result;
}

uint64_t FigMediaSegmentSpecifierRemovePartialSegment(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 128);
  v2 = *(_QWORD *)(a2 + 136);
  if (v2)
    *(_QWORD *)(v2 + 128) = v3;
  if (v3)
    *(_QWORD *)(v3 + 136) = v2;
  FigCFArrayRemoveLastElementOfValue();
  return 0;
}

uint64_t FigMediaSegmentSpecifierGetPreviousSegment(uint64_t a1)
{
  return *(_QWORD *)(a1 + 136);
}

uint64_t FigMediaSegmentSpecifierGetNextSegment(uint64_t a1)
{
  return *(_QWORD *)(a1 + 128);
}

void FigMediaSegmentSpecifierSetPartialSegments(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  v2 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
}

uint64_t FigMediaSegmentSpecifierGetMediaSequence(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t FigMediaSegmentSpecifierSetMediaSequence(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = a2;
  return result;
}

uint64_t FigMediaSegmentSpecifierGetMediaParsedIndex(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

uint64_t FigMediaSegmentSpecifierSetMediaParsedIndex(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 56) = a2;
  return result;
}

uint64_t FigMediaSegmentSpecifierGetDiscontinuityDomain(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t FigMediaSegmentSpecifierSetIsDiscontinuityDomain(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 64) = a2;
  return result;
}

uint64_t FigMediaSegmentSpecifierGetStartOffset(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t FigMediaSegmentSpecifierSetStartOffset(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 72) = a2;
  return result;
}

uint64_t FigMediaSegmentSpecifierGetBytesToRead(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80);
}

uint64_t FigMediaSegmentSpecifierSetBytesToRead(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 80) = a2;
  return result;
}

double FigMediaSegmentSpecifierGetTimeInSeconds(uint64_t a1)
{
  return *(double *)(a1 + 88);
}

uint64_t FigMediaSegmentSpecifierSetTimeInSeconds(uint64_t result, double a2)
{
  *(double *)(result + 88) = a2;
  return result;
}

double FigMediaSegmentSpecifierGetBitRate(uint64_t a1)
{
  return *(double *)(a1 + 96);
}

uint64_t FigMediaSegmentSpecifierSetBitRate(uint64_t result, double a2)
{
  *(double *)(result + 96) = a2;
  return result;
}

uint64_t FigMediaSegmentSpecifierGetIV(uint64_t a1)
{
  return *(_QWORD *)(a1 + 104);
}

void FigMediaSegmentSpecifierSetIV(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  v2 = *(const void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
}

uint64_t FigMediaSegmentSpecifierGetDateStamp(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112);
}

void FigMediaSegmentSpecifierSetDateStamp(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  v2 = *(const void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
}

double FigMediaSegmentSpecifierGetImputedDate(uint64_t a1)
{
  return *(double *)(a1 + 120);
}

uint64_t FigMediaSegmentSpecifierSetImputedDate(uint64_t result, double a2)
{
  *(double *)(result + 120) = a2;
  return result;
}

uint64_t FigMediaSegmentSpecifierGetType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 160);
}

uint64_t FigMediaSegmentSpecifierSetType(uint64_t result, int a2)
{
  *(_DWORD *)(result + 160) = a2;
  return result;
}

uint64_t FigMediaSegmentSpecifierIsMarkedIndependent(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 152);
}

uint64_t FigMediaSegmentSpecifierSetIsIndependent(uint64_t result, char a2)
{
  *(_BYTE *)(result + 152) = a2;
  return result;
}

uint64_t FigMediaSegmentSpecifierIsDiscontinuity(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 153);
}

uint64_t FigMediaSegmentSpecifierSetIsDiscontinuity(uint64_t result, char a2)
{
  *(_BYTE *)(result + 153) = a2;
  return result;
}

uint64_t FigMediaSegmentSpecifierIsReadInCurrent(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 154);
}

uint64_t FigMediaSegmentSpecifierSetIsReadInCurrent(uint64_t result, char a2)
{
  *(_BYTE *)(result + 154) = a2;
  return result;
}

uint64_t FigMediaSegmentSpecifierIsMarkedAsGap(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 155);
}

uint64_t FigMediaSegmentSpecifierSetIsMarkedAsGap(uint64_t result, char a2)
{
  *(_BYTE *)(result + 155) = a2;
  return result;
}

uint64_t FigMediaSegmentSpecifierIsFragment(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 156);
}

uint64_t FigMediaSegmentSpecifierSetIsFragment(uint64_t result, char a2)
{
  *(_BYTE *)(result + 156) = a2;
  return result;
}

uint64_t FigMediaSegmentSpecifierAreFragmentsExpired(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 157);
}

uint64_t FigMediaSegmentSpecifierSetAreFragmentsExpired(uint64_t result, char a2)
{
  *(_BYTE *)(result + 157) = a2;
  return result;
}

uint64_t FigMediaSegmentSpecifierIsChangedInCurrent(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 158);
}

uint64_t FigMediaSegmentSpecifierSetChangedInCurrent(uint64_t result, char a2)
{
  *(_BYTE *)(result + 158) = a2;
  return result;
}

void sds_finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  v2 = (const void *)a1[2];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[3];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[4];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[5];
  if (v5)
    CFRelease(v5);
  v6 = (const void *)a1[7];
  if (v6)
    CFRelease(v6);
}

CFStringRef sds_copyDesc(uint64_t a1)
{
  const __CFAllocator *AllocatorForMedia;

  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("<FigSessionDataSpecifier %p %@-%@-%@-%@-%d>"), a1, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48));
}

uint64_t spptUtil_registerClass(uint64_t a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  **(_QWORD **)(a1 + 8) = result;
  return result;
}

uint64_t _figAttachmentsRegisterStreamPlaylistSpecifiers()
{
  FigSessionDataSpecifierGetTypeID();
  FigRuntimeRegisterAttachmentBearerWithTypeID();
  FigContentKeySpecifierGetTypeID();
  FigRuntimeRegisterAttachmentBearerWithTypeID();
  FigMediaSegmentSpecifierGetTypeID();
  return FigRuntimeRegisterAttachmentBearerWithTypeID();
}

void sds_setAttachment(uint64_t a1, void *a2, void *a3)
{
  spptUtil_createAttachmentDictionaryIfNecessaryAndSetAttachment((__CFDictionary **)(a1 + 56), a2, a3);
}

uint64_t sds_getAttachment()
{
  return FigCFDictionaryGetValue();
}

void sds_removeAttachment(uint64_t a1, const void *a2)
{
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 56), a2);
}

void sds_removeAllAttachments(uint64_t a1)
{
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 56));
}

CFTypeRef sds_copyDictionaryOfAttachments(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 56);
  if (result)
    return CFRetain(result);
  return result;
}

void spptUtil_createAttachmentDictionaryIfNecessaryAndSetAttachment(__CFDictionary **a1, void *key, void *value)
{
  __CFDictionary *Mutable;
  const __CFAllocator *AllocatorForMedia;

  Mutable = *a1;
  if (Mutable
    || (AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
        Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]),
        (*a1 = Mutable) != 0))
  {
    if (value)
      CFDictionarySetValue(Mutable, key, value);
    else
      CFDictionaryRemoveValue(Mutable, key);
  }
  else
  {
    FigSignalErrorAt();
  }
}

void cks_setAttachment(uint64_t a1, void *a2, void *a3)
{
  spptUtil_createAttachmentDictionaryIfNecessaryAndSetAttachment((__CFDictionary **)(a1 + 96), a2, a3);
}

uint64_t cks_getAttachment()
{
  return FigCFDictionaryGetValue();
}

void cks_removeAttachment(uint64_t a1, const void *a2)
{
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 96), a2);
}

void cks_removeAllAttachments(uint64_t a1)
{
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 96));
}

CFTypeRef cks_copyDictionaryOfAttachments(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 96);
  if (result)
    return CFRetain(result);
  return result;
}

void mss_setAttachment(uint64_t a1, void *a2, void *a3)
{
  spptUtil_createAttachmentDictionaryIfNecessaryAndSetAttachment((__CFDictionary **)(a1 + 144), a2, a3);
}

uint64_t mss_getAttachment()
{
  return FigCFDictionaryGetValue();
}

void mss_removeAttachment(uint64_t a1, const void *a2)
{
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 144), a2);
}

void mss_removeAllAttachments(uint64_t a1)
{
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 144));
}

CFTypeRef mss_copyDictionaryOfAttachments(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 144);
  if (result)
    return CFRetain(result);
  return result;
}

void rrs_finalize(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 16);
  if (v1)
    CFRelease(v1);
}

CFStringRef rrs_copyDesc(uint64_t a1)
{
  const __CFAllocator *AllocatorForMedia;

  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("<FigRenditionReportSpecifier %p %@-%lld-%lld-%d-%d-%d-%d>"), a1, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44), *(unsigned __int8 *)(a1 + 48), *(unsigned __int8 *)(a1 + 49));
}

void drs_finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;

  v2 = (const void *)a1[2];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[3];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[4];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[5];
  if (v5)
    CFRelease(v5);
  v6 = (const void *)a1[6];
  if (v6)
    CFRelease(v6);
  v7 = (const void *)a1[7];
  if (v7)
    CFRelease(v7);
  v8 = (const void *)a1[8];
  if (v8)
    CFRelease(v8);
  v9 = (const void *)a1[9];
  if (v9)
    CFRelease(v9);
  v10 = (const void *)a1[10];
  if (v10)
    CFRelease(v10);
  v11 = (const void *)a1[11];
  if (v11)
    CFRelease(v11);
  v12 = (const void *)a1[14];
  if (v12)
    CFRelease(v12);
  v13 = (const void *)a1[17];
  if (v13)
    CFRelease(v13);
  v14 = (const void *)a1[18];
  if (v14)
    CFRelease(v14);
  v15 = (const void *)a1[19];
  if (v15)
    CFRelease(v15);
}

CFStringRef drs_copyDesc(uint64_t a1)
{
  const __CFAllocator *AllocatorForMedia;

  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("<FigDateRangeSpecifier %p %@>"), a1, *(_QWORD *)(a1 + 24));
}

void cks_finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  v2 = (const void *)a1[3];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[5];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[9];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[12];
  if (v5)
    CFRelease(v5);
  a1[10] = 0;
  a1[11] = 0;
}

uint64_t cks_equal(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = FigCFEqual();
  if ((_DWORD)result)
    return *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16) && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
  return result;
}

CFHashCode cks_hash(uint64_t a1)
{
  return CFHash(*(CFTypeRef *)(a1 + 24));
}

CFStringRef cks_copyDesc(uint64_t a1)
{
  const __CFAllocator *AllocatorForMedia;

  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("<FigContentKeySpecifier %p %@>"), a1, *(_QWORD *)(a1 + 24));
}

void mss_finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;

  v2 = (const void *)a1[2];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[3];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[4];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[5];
  if (v5)
    CFRelease(v5);
  v6 = (const void *)a1[13];
  if (v6)
    CFRelease(v6);
  v7 = (const void *)a1[14];
  if (v7)
    CFRelease(v7);
  v8 = (const void *)a1[18];
  if (v8)
    CFRelease(v8);
  a1[16] = 0;
  a1[17] = 0;
}

CFStringRef mss_copyDesc(uint64_t a1)
{
  const __CFAllocator *AllocatorForMedia;

  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("<FigMediaSegmentSpecifier %p %@>"), a1, *(_QWORD *)(a1 + 16));
}

uint64_t FigBufferedAirPlayOutputProxyGetClassID()
{
  if (FigBufferedAirPlayOutputProxyGetClassID_sRegisterFigBufferedAirPlayOutputProxyBaseTypeOnce != -1)
    dispatch_once(&FigBufferedAirPlayOutputProxyGetClassID_sRegisterFigBufferedAirPlayOutputProxyBaseTypeOnce, &__block_literal_global_1);
  return FigBufferedAirPlayOutputProxyGetClassID_sFigBufferedAirPlayOutputProxyClassID;
}

CFStringRef FigBufferedAirPlayOutputProxyBaseCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigBufferedAirPlayOutputProxy %p]"), a1);
}

uint64_t FigBufferedAirPlayOutputProxyGetTypeID()
{
  if (FigBufferedAirPlayOutputProxyGetClassID_sRegisterFigBufferedAirPlayOutputProxyBaseTypeOnce != -1)
    dispatch_once(&FigBufferedAirPlayOutputProxyGetClassID_sRegisterFigBufferedAirPlayOutputProxyBaseTypeOnce, &__block_literal_global_1);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigBufferedAirPlayOutputProxyCreate(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  uint64_t v6;
  uint64_t DerivedStorage;
  dispatch_queue_t v8;
  uint64_t CMBaseObject;
  uint64_t (*v10)(uint64_t, const __CFString *, uint64_t, CFStringRef *);
  uint64_t v11;
  uint64_t (*v12)(uint64_t, const __CFString *, uint64_t, uint64_t);
  uint64_t v13;
  CFStringRef theString;
  CFTypeRef cf;

  theString = 0;
  cf = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a2 || !a3)
  {
    v6 = FigSignalErrorAt();
    goto LABEL_20;
  }
  if (FigBufferedAirPlayOutputProxyGetClassID_sRegisterFigBufferedAirPlayOutputProxyBaseTypeOnce != -1)
    dispatch_once(&FigBufferedAirPlayOutputProxyGetClassID_sRegisterFigBufferedAirPlayOutputProxyBaseTypeOnce, &__block_literal_global_1);
  v6 = CMDerivedObjectCreate();
  if ((_DWORD)v6)
    goto LABEL_20;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 32) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, &FigBufferedAirPlayOutputProxyCreate_perRenderPipelineStateDictCallbacks);
  *(_QWORD *)(DerivedStorage + 24) = CFRetain(a2);
  *(_QWORD *)(DerivedStorage + 64) = FigSimpleMutexCreate();
  v8 = dispatch_queue_create("com.apple.coremedia.bufferedAirPlayOutputProxy.notificationQueue", 0);
  *(_QWORD *)(DerivedStorage + 48) = v8;
  if (!v8)
  {
    v13 = 4294954510;
    goto LABEL_14;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  v6 = FigNotificationCenterAddWeakListeners();
  if ((_DWORD)v6)
    goto LABEL_20;
  CMBaseObject = FigBufferedAirPlayOutputGetCMBaseObject(*(_QWORD *)(DerivedStorage + 24));
  v10 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFStringRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
  if (!v10)
  {
LABEL_13:
    v13 = 4294954514;
    goto LABEL_14;
  }
  v6 = v10(CMBaseObject, CFSTR("LoggingID"), a1, &theString);
  if ((_DWORD)v6)
  {
LABEL_20:
    v13 = v6;
    goto LABEL_14;
  }
  *(_BYTE *)DerivedStorage = 0;
  CFStringGetCString(theString, (char *)DerivedStorage, 20, 0x8000100u);
  v11 = FigBufferedAirPlayOutputGetCMBaseObject(*(_QWORD *)(DerivedStorage + 24));
  v12 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
  if (!v12)
    goto LABEL_13;
  v13 = v12(v11, CFSTR("SourceSampleBufferConsumer"), a1, DerivedStorage + 40);
  if (!(_DWORD)v13)
  {
    ++FigBufferedAirPlayOutputProxyCreate_idNumber;
    *(_QWORD *)(DerivedStorage + 56) = FigCFNumberCreateUInt32();
    *a3 = cf;
    cf = 0;
    goto LABEL_16;
  }
LABEL_14:
  if (cf)
    CFRelease(cf);
LABEL_16:
  if (theString)
    CFRelease(theString);
  return v13;
}

char *fbapop_perRenderPipelineStateDictRetainCallBack(const __CFAllocator *a1, uint64_t a2)
{
  char *v3;
  CFTypeRef v4;
  CFTypeRef v5;
  CFTypeRef v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  const void *v10;
  _BYTE *v11;

  v3 = (char *)CFAllocatorAllocate(a1, 112, 0);
  v4 = *(CFTypeRef *)(a2 + 16);
  if (v4)
    v4 = CFRetain(v4);
  *((_QWORD *)v3 + 2) = v4;
  v5 = *(CFTypeRef *)a2;
  if (*(_QWORD *)a2)
    v5 = CFRetain(v5);
  *(_QWORD *)v3 = v5;
  *((_DWORD *)v3 + 6) = *(_DWORD *)(a2 + 24);
  v6 = *(CFTypeRef *)(a2 + 8);
  if (v6)
    v6 = CFRetain(v6);
  *((_QWORD *)v3 + 1) = v6;
  v3[28] = *(_BYTE *)(a2 + 28);
  *(_WORD *)(v3 + 29) = *(_WORD *)(a2 + 29);
  *((_QWORD *)v3 + 13) = 0;
  *((_OWORD *)v3 + 2) = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 48);
  v8 = *(_OWORD *)(a2 + 64);
  v9 = *(_OWORD *)(a2 + 80);
  v10 = *(const void **)(a2 + 96);
  *((_QWORD *)v3 + 12) = v10;
  *((_OWORD *)v3 + 4) = v8;
  *((_OWORD *)v3 + 5) = v9;
  *((_OWORD *)v3 + 3) = v7;
  if (v10)
    CFRetain(v10);
  if (*(_QWORD *)(a2 + 104))
  {
    v11 = CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, 0);
    *((_QWORD *)v3 + 13) = v11;
    *v11 = **(_BYTE **)(a2 + 104);
  }
  return v3;
}

void fbapop_perRenderPipelineStateDictReleaseCallBack(const __CFAllocator *a1, void *a2)
{
  fbapop_renderPipelineStateRelease((uint64_t)a2);
  CFAllocatorDeallocate(a1, a2);
}

void fbapop_renderPipelineStateRelease(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, const __CFString *, _QWORD);
  const void *v4;
  const void *v5;
  const void *v6;
  void *v7;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      v3 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v3)
        v3(v2, CFSTR("DownstreamConsumer"), 0);
    }
    v4 = *(const void **)(a1 + 16);
    if (v4)
      CFRelease(v4);
    if (*(_QWORD *)a1)
      CFRelease(*(CFTypeRef *)a1);
    v5 = *(const void **)(a1 + 8);
    if (v5)
      CFRelease(v5);
    v6 = *(const void **)(a1 + 96);
    if (v6)
      CFRelease(v6);
    v7 = *(void **)(a1 + 104);
    if (v7)
    {
      CFAllocatorDeallocate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v7);
      *(_QWORD *)(a1 + 104) = 0;
    }
  }
}

uint64_t fbapop_invalidate()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListeners();
  if (dword_1EE2A2908)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return 0;
}

uint64_t fbapop_finalize()
{
  _QWORD *DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  NSObject *v5;
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  fbapop_invalidate();
  v1 = (const void *)DerivedStorage[3];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[3] = 0;
  }
  v2 = (const void *)DerivedStorage[4];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[4] = 0;
  }
  v3 = (const void *)DerivedStorage[5];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[5] = 0;
  }
  v4 = (const void *)DerivedStorage[7];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[7] = 0;
  }
  v5 = DerivedStorage[6];
  if (v5)
  {
    dispatch_release(v5);
    DerivedStorage[6] = 0;
  }
  result = FigSimpleMutexDestroy();
  DerivedStorage[8] = 0;
  if (dword_1EE2A2908)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

__CFString *fbapop_copyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigBufferedAirPlayOutputProxy %p>"), a1);
  return Mutable;
}

uint64_t fbapop_copyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *DerivedStorage;
  const void *SInt64;
  uint64_t v9;
  uint64_t CMBaseObject;
  uint64_t (*v12)(uint64_t, const void *, uint64_t, _QWORD *);

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](DerivedStorage[8]);
  if (CFEqual(a2, CFSTR("NumberOfRegisteredRenderPipelines")))
  {
    FigCFDictionaryGetCount();
    SInt64 = (const void *)FigCFNumberCreateSInt64();
LABEL_6:
    v9 = 0;
    *a4 = SInt64;
    goto LABEL_7;
  }
  if (CFEqual(a2, CFSTR("UniqueID")))
  {
    SInt64 = (const void *)DerivedStorage[7];
    if (!SInt64)
      goto LABEL_6;
LABEL_5:
    SInt64 = CFRetain(SInt64);
    goto LABEL_6;
  }
  if (CFEqual(a2, CFSTR("ConnectedRenderPipelineID")))
  {
    SInt64 = (const void *)fbapop_getConnectedRenderPipelineID();
    if (!SInt64)
      goto LABEL_6;
    goto LABEL_5;
  }
  CMBaseObject = FigBufferedAirPlayOutputGetCMBaseObject(DerivedStorage[3]);
  v12 = *(uint64_t (**)(uint64_t, const void *, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
  if (v12)
    v9 = v12(CMBaseObject, a2, a3, a4);
  else
    v9 = 4294954514;
LABEL_7:
  MEMORY[0x19402EF04](DerivedStorage[8]);
  return v9;
}

uint64_t fbapop_setProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t CMBaseObject;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 64));
  CMBaseObject = FigBufferedAirPlayOutputGetCMBaseObject(*(_QWORD *)(DerivedStorage + 24));
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v7)
    v8 = v7(CMBaseObject, a2, a3);
  else
    v8 = 4294954514;
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 64));
  return v8;
}

uint64_t fbapop_getConnectedRenderPipelineID()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  CMBaseObjectGetDerivedStorage();
  v2 = 0;
  v3 = &v2;
  v4 = 0x2000000000;
  v5 = 0;
  FigCFDictionaryApplyBlock();
  v0 = v3[3];
  _Block_object_dispose(&v2, 8);
  return v0;
}

void __fbapop_getConnectedRenderPipelineID_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef v7;
  CFTypeRef cf;

  cf = 0;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v5 = *(_QWORD *)(a3 + 8);
    v6 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
    if (v6)
    {
      v6(v5, CFSTR("DownstreamConsumer"), *MEMORY[0x1E0C9AE00], &cf);
      v7 = cf;
      if (cf)
      {
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_QWORD *)(a3 + 16);
        CFRelease(v7);
      }
    }
  }
}

uint64_t fbapop_setRenderPipelineState(const void *a1, unsigned int *a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  char *Value;
  CFTypeID TypeID;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeID v13;
  int v14;
  uint64_t v15;
  CFTypeID v16;
  uint64_t SynchronizedToTimebaseRenderPipeline;
  CFTypeID v18;
  uint64_t v19;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  const void *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v25 = 0;
  v26 = &v25;
  v27 = 0x2000000000;
  v28 = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 64));
  if (!fbapop_tokenIsValid((uint64_t)a1, a2))
    goto LABEL_28;
  if (!a2)
  {
LABEL_22:
    v15 = 0;
    goto LABEL_23;
  }
  v9 = CMBaseObjectGetDerivedStorage();
  Value = (char *)CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 32), (const void *)*a2);
  fbapop_getIdStringFromToken((uint64_t)a1, a2);
  if (!Value)
  {
LABEL_28:
    SynchronizedToTimebaseRenderPipeline = FigSignalErrorAt();
LABEL_17:
    v15 = SynchronizedToTimebaseRenderPipeline;
    goto LABEL_23;
  }
  if (CFEqual(CFSTR("RenderPipelineStateAllowsPrebuffering"), a3))
  {
    TypeID = CFBooleanGetTypeID();
    if (TypeID != CFGetTypeID(a4))
      goto LABEL_22;
    FigCFDictionaryApplyBlock();
    if (*((_BYTE *)v26 + 24))
      goto LABEL_22;
    Value[28] = *MEMORY[0x1E0C9AE50] == (_QWORD)a4;
    if (!dword_1EE2A2908)
      goto LABEL_22;
    goto LABEL_8;
  }
  if (!CFEqual(CFSTR("RenderPipelineStateIsTimebaseStarter"), a3))
  {
    if (!CFEqual(CFSTR("RenderPipelineStateEndOfTrackReached"), a3))
    {
      if (!CFEqual(CFSTR("RenderPipelineStateSynchronizeToTimebase"), a3))
        goto LABEL_22;
      v18 = CFBooleanGetTypeID();
      if (v18 != CFGetTypeID(a4))
        goto LABEL_22;
      if (CFBooleanGetValue((CFBooleanRef)a4) == 1)
      {
        v19 = fbapop_setRenderPipelineState_sCurrentSynchronizeToTimebaseOrderIndex++;
        *((_QWORD *)Value + 4) = v19;
      }
      else
      {
        *((_QWORD *)Value + 4) = 0xFFFFFFFLL;
        *((_QWORD *)Value + 5) = 0;
        v21 = MEMORY[0x1E0CA2E18];
        v22 = *MEMORY[0x1E0CA2E18];
        *((_OWORD *)Value + 3) = *MEMORY[0x1E0CA2E18];
        v23 = *(_QWORD *)(v21 + 16);
        *((_QWORD *)Value + 8) = v23;
        *(_OWORD *)(Value + 72) = v22;
        *((_QWORD *)Value + 11) = v23;
        v24 = (const void *)*((_QWORD *)Value + 12);
        if (v24)
        {
          CFRelease(v24);
          *((_QWORD *)Value + 12) = 0;
        }
      }
      if (!dword_1EE2A2908)
        goto LABEL_22;
LABEL_8:
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_22;
    }
    v16 = CFBooleanGetTypeID();
    if (v16 != CFGetTypeID(a4))
      goto LABEL_22;
    Value[30] = *MEMORY[0x1E0C9AE50] == (_QWORD)a4;
    SynchronizedToTimebaseRenderPipeline = fbapop_attempConnectNextSynchronizedToTimebaseRenderPipeline(a1);
    goto LABEL_17;
  }
  v13 = CFBooleanGetTypeID();
  if (v13 != CFGetTypeID(a4))
    goto LABEL_22;
  v14 = CFBooleanGetValue((CFBooleanRef)a4);
  CMBaseObjectGetDerivedStorage();
  if (v14)
    FigCFDictionaryApplyBlock();
  v15 = 0;
  Value[29] = v14;
LABEL_23:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 64));
  _Block_object_dispose(&v25, 8);
  return v15;
}

uint64_t fbapop_setRateAndAnchorTime(const void *a1, unsigned int *a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t DerivedStorage;
  uint64_t v19;
  _QWORD *Value;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  int IsConsumerConnected;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 64));
  if (!fbapop_tokenIsValid((uint64_t)a1, a2))
    goto LABEL_19;
  if (!a2)
  {
LABEL_17:
    v25 = 0;
    goto LABEL_18;
  }
  v19 = CMBaseObjectGetDerivedStorage();
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v19 + 32), (const void *)*a2);
  fbapop_getIdStringFromToken((uint64_t)a1, a2);
  if (Value)
  {
    if (dword_1EE2A2908)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v22 = Value[4];
    if (a9 == 0.0 || (v22 != 0xFFFFFFF ? (v23 = *((_BYTE *)Value + 29) == 0) : (v23 = 1), v23))
    {
      if (v22 != 0xFFFFFFF)
        goto LABEL_17;
      IsConsumerConnected = fbapop_ruleIsConsumerConnected((uint64_t)Value);
      if (a9 <= 0.0 && IsConsumerConnected && !*((_BYTE *)Value + 29))
        goto LABEL_17;
    }
    v30 = *(_OWORD *)a3;
    v31 = *(_QWORD *)(a3 + 16);
    v28 = *a4;
    v29 = *((_QWORD *)a4 + 2);
    v24 = fbapop_callSetRateOnBAO(a1, a2, &v30, (uint64_t)&v28, a5, a6, a7, a8, a9);
  }
  else
  {
LABEL_19:
    v24 = FigSignalErrorAt();
  }
  v25 = v24;
LABEL_18:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 64));
  return v25;
}

uint64_t fbapop_flush(uint64_t a1, unsigned int *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const void *Value;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 64));
  if (!fbapop_tokenIsValid(a1, a2))
    goto LABEL_13;
  if (a2)
  {
    v5 = CMBaseObjectGetDerivedStorage();
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 32), (const void *)*a2);
    fbapop_getIdStringFromToken(a1, a2);
    if (Value)
    {
      if (dword_1EE2A2908)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (fbapop_ruleIsConsumerConnected((uint64_t)Value))
        goto LABEL_7;
      v9 = *(_QWORD *)(DerivedStorage + 24);
      v10 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (!v10)
      {
        v8 = 4294954514;
        goto LABEL_12;
      }
      v11 = v10(v9);
LABEL_10:
      v8 = v11;
      goto LABEL_12;
    }
LABEL_13:
    v11 = FigSignalErrorAt();
    goto LABEL_10;
  }
LABEL_7:
  v8 = 0;
LABEL_12:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 64));
  return v8;
}

uint64_t fbapop_flushWithinTimeRange(uint64_t a1, unsigned int *a2, __int128 *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  const void *Value;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, _OWORD *);
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[8];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 64));
  if (!fbapop_tokenIsValid(a1, a2))
    goto LABEL_13;
  if (a2)
  {
    v7 = CMBaseObjectGetDerivedStorage();
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v7 + 32), (const void *)*a2);
    fbapop_getIdStringFromToken(a1, a2);
    if (Value)
    {
      if (dword_1EE2A2908)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (fbapop_ruleIsConsumerConnected((uint64_t)Value))
        goto LABEL_7;
      v11 = *(_QWORD *)(DerivedStorage + 24);
      v15 = *a3;
      v16 = a3[1];
      v17 = a3[2];
      v12 = *(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (!v12)
      {
        v10 = 4294954514;
        goto LABEL_12;
      }
      v18[0] = v15;
      v18[1] = v16;
      v18[2] = v17;
      v13 = v12(v11, v18);
LABEL_10:
      v10 = v13;
      goto LABEL_12;
    }
LABEL_13:
    v13 = FigSignalErrorAt();
    goto LABEL_10;
  }
LABEL_7:
  v10 = 0;
LABEL_12:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 64));
  return v10;
}

uint64_t fbapop_reset(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  const void *Value;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  const __CFAllocator *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  void *v18;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 64));
  if (!fbapop_tokenIsValid(a1, a2))
    goto LABEL_18;
  if (!a2)
  {
    v15 = 0;
    goto LABEL_15;
  }
  v8 = CMBaseObjectGetDerivedStorage();
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v8 + 32), (const void *)*a2);
  fbapop_getIdStringFromToken(a1, a2);
  if (!Value)
  {
LABEL_18:
    v15 = FigSignalErrorAt();
    goto LABEL_15;
  }
  v10 = CMBaseObjectGetDerivedStorage();
  v11 = CFDictionaryGetValue(*(CFDictionaryRef *)(v10 + 32), (const void *)*a2);
  if (fbapop_ruleIsConsumerConnected((uint64_t)v11))
  {
    if (v11)
    {
      v12 = (void *)v11[13];
      v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      if (v12)
      {
        CFAllocatorDeallocate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v12);
        v11[13] = 0;
      }
    }
    else
    {
      v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    }
    v14 = CFAllocatorAllocate(v13, 1, 0);
    v15 = 0;
    v11[13] = v14;
    *v14 = a4;
  }
  else
  {
    v16 = *(_QWORD *)(DerivedStorage + 24);
    v17 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v17)
    {
      v15 = v17(v16, a4);
      if (!v11)
        goto LABEL_15;
    }
    else
    {
      v15 = 4294954514;
      if (!v11)
        goto LABEL_15;
    }
    v18 = (void *)v11[13];
    if (v18)
    {
      CFAllocatorDeallocate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v18);
      v11[13] = 0;
    }
  }
LABEL_15:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 64));
  return v15;
}

uint64_t fbapop_setConnectionActive(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  const void *Value;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 64));
  if (!fbapop_tokenIsValid(a1, a2))
    goto LABEL_13;
  if (!a2)
  {
    v17 = 0;
    goto LABEL_10;
  }
  v11 = CMBaseObjectGetDerivedStorage();
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v11 + 32), (const void *)*a2);
  fbapop_getIdStringFromToken(a1, a2);
  if (Value)
  {
    if (dword_1EE2A2908)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v14 = *(_QWORD *)(DerivedStorage + 24);
    v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (!v15)
    {
      v17 = 4294954514;
      goto LABEL_10;
    }
    v16 = v15(v14, a3, a4, a5);
  }
  else
  {
LABEL_13:
    v16 = FigSignalErrorAt();
  }
  v17 = v16;
LABEL_10:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 64));
  return v17;
}

uint64_t fbapop_stopForReconfiguration(uint64_t a1, unsigned int *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const void *Value;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 64));
  if (!fbapop_tokenIsValid(a1, a2))
    goto LABEL_13;
  if (!a2)
  {
    v11 = 0;
    goto LABEL_10;
  }
  v5 = CMBaseObjectGetDerivedStorage();
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 32), (const void *)*a2);
  fbapop_getIdStringFromToken(a1, a2);
  if (Value)
  {
    if (dword_1EE2A2908)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v8 = *(_QWORD *)(DerivedStorage + 24);
    v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (!v9)
    {
      v11 = 4294954514;
      goto LABEL_10;
    }
    v10 = v9(v8);
  }
  else
  {
LABEL_13:
    v10 = FigSignalErrorAt();
  }
  v11 = v10;
LABEL_10:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 64));
  return v11;
}

uint64_t fbapop_setEndOfSiriTTSUtteranceMediaTime(uint64_t a1, unsigned int *a2, __int128 *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  const void *Value;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, __int128 *);
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 64));
  if (!fbapop_tokenIsValid(a1, a2))
    goto LABEL_13;
  if (!a2)
  {
    v13 = 0;
    goto LABEL_10;
  }
  v7 = CMBaseObjectGetDerivedStorage();
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v7 + 32), (const void *)*a2);
  fbapop_getIdStringFromToken(a1, a2);
  if (Value)
  {
    if (dword_1EE2A2908)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v10 = *(_QWORD *)(DerivedStorage + 24);
    v15 = *a3;
    v16 = *((_QWORD *)a3 + 2);
    v11 = *(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
    if (!v11)
    {
      v13 = 4294954514;
      goto LABEL_10;
    }
    v17 = v15;
    v18 = v16;
    v12 = v11(v10, &v17);
  }
  else
  {
LABEL_13:
    v12 = FigSignalErrorAt();
  }
  v13 = v12;
LABEL_10:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 64));
  return v13;
}

uint64_t fbapop_applyVolumeFade(uint64_t a1, unsigned int *a2, uint64_t a3, __int128 *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  const void *Value;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, __int128 *);
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 64));
  if (!fbapop_tokenIsValid(a1, a2))
    goto LABEL_13;
  if (!a2)
  {
    v15 = 0;
    goto LABEL_10;
  }
  v9 = CMBaseObjectGetDerivedStorage();
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 32), (const void *)*a2);
  fbapop_getIdStringFromToken(a1, a2);
  if (Value)
  {
    if (dword_1EE2A2908)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v12 = *(_QWORD *)(DerivedStorage + 24);
    v17 = *a4;
    v18 = *((_QWORD *)a4 + 2);
    v13 = *(uint64_t (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
    if (!v13)
    {
      v15 = 4294954514;
      goto LABEL_10;
    }
    v19 = v17;
    v20 = v18;
    v14 = v13(v12, a3, &v19);
  }
  else
  {
LABEL_13:
    v14 = FigSignalErrorAt();
  }
  v15 = v14;
LABEL_10:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 64));
  return v15;
}

uint64_t fbapop_copyTransportFormatDescriptionForSourceContentFormatDescription(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  const void *Value;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 64));
  if (!fbapop_tokenIsValid(a1, a2))
    goto LABEL_13;
  if (!a2)
  {
    v15 = 0;
    goto LABEL_10;
  }
  v9 = CMBaseObjectGetDerivedStorage();
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 32), (const void *)*a2);
  fbapop_getIdStringFromToken(a1, a2);
  if (Value)
  {
    if (dword_1EE2A2908)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v12 = *(_QWORD *)(DerivedStorage + 24);
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
    if (!v13)
    {
      v15 = 4294954514;
      goto LABEL_10;
    }
    v14 = v13(v12, a3, a4);
  }
  else
  {
LABEL_13:
    v14 = FigSignalErrorAt();
  }
  v15 = v14;
LABEL_10:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 64));
  return v15;
}

uint64_t fbapop_doesSupportPassthroughOfFormatDescription(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  const void *Value;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 64));
  if (!fbapop_tokenIsValid(a1, a2))
    goto LABEL_13;
  if (!a2)
  {
    v15 = 0;
    goto LABEL_10;
  }
  v9 = CMBaseObjectGetDerivedStorage();
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 32), (const void *)*a2);
  fbapop_getIdStringFromToken(a1, a2);
  if (Value)
  {
    if (dword_1EE2A2908)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v12 = *(_QWORD *)(DerivedStorage + 24);
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
    if (!v13)
    {
      v15 = 4294954514;
      goto LABEL_10;
    }
    v14 = v13(v12, a3, a4);
  }
  else
  {
LABEL_13:
    v14 = FigSignalErrorAt();
  }
  v15 = v14;
LABEL_10:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 64));
  return v15;
}

uint64_t fbapop_registerRenderPipeline(uint64_t a1, uint64_t a2, const void *a3, const void *a4, unsigned int **a5)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD *IdStringFromToken;
  _QWORD *v19;
  NSObject *v20;
  unsigned int v21;
  unsigned int v22;
  const char *v23;
  uint64_t v24;
  NSObject *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t);
  void *v34;
  uint64_t *v35;
  const void *v36;
  _OWORD value[6];
  __int128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = DerivedStorage;
  if (!a3 || !a2 || !a4)
  {
    v24 = FigSignalErrorAt();
    goto LABEL_23;
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 64));
  v12 = CMBaseObjectGetDerivedStorage();
  v38 = 0u;
  memset(value, 0, sizeof(value));
  if (!a5)
  {
    v24 = FigSignalErrorAt();
    fbapop_renderPipelineStateRelease((uint64_t)value);
    if ((_DWORD)v24)
      goto LABEL_23;
    goto LABEL_11;
  }
  v13 = v12;
  CMBaseObjectGetDerivedStorage();
  v27 = 0;
  v28 = &v27;
  v29 = 0x2000000000;
  v30 = 0;
  v31 = MEMORY[0x1E0C809B0];
  v32 = 0x40000000;
  v33 = __fbapop_findRenderPipelineStateWithID_block_invoke;
  v34 = &unk_1E2F78910;
  v35 = &v27;
  v36 = a4;
  FigCFDictionaryApplyBlock();
  v14 = v28[3];
  _Block_object_dispose(&v27, 8);
  if (!v14)
  {
    v15 = fbapop_createAndSaveRenderPipelineState_tokenNumber++;
    *(_QWORD *)&value[1] = CFRetain(a4);
    *(_QWORD *)&value[0] = FigCFWeakReferenceHolderCreateWithReferencedObject();
    DWORD2(value[1]) = v15;
    *((_QWORD *)&value[0] + 1) = CFRetain(a3);
    value[2] = 0xFFFFFFFuLL;
    value[3] = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)&value[4] = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    *(_OWORD *)((char *)&value[4] + 8) = value[3];
    *((_QWORD *)&value[5] + 1) = *(_QWORD *)&value[4];
    if ((_QWORD)v38)
    {
      CFRelease((CFTypeRef)v38);
      *(_QWORD *)&v38 = 0;
    }
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v13 + 32), (const void *)v15, value);
    v16 = CMBaseObjectGetDerivedStorage();
    *a5 = (unsigned int *)((char *)CFDictionaryGetValue(*(CFDictionaryRef *)(v16 + 32), (const void *)v15) + 24);
    if (dword_1EE2A2908)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    fbapop_renderPipelineStateRelease((uint64_t)value);
LABEL_11:
    IdStringFromToken = fbapop_getIdStringFromToken(a1, *a5);
    if (dword_1EE2A2908)
    {
      v19 = IdStringFromToken;
      LODWORD(v27) = 0;
      v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v21 = v27;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        v22 = v21;
      else
        v22 = v21 & 0xFFFFFFFE;
      if (v22)
      {
        if (a1)
          v23 = (const char *)CMBaseObjectGetDerivedStorage();
        else
          v23 = "";
        LODWORD(value[0]) = 136316162;
        *(_QWORD *)((char *)value + 4) = "fbapop_registerRenderPipeline";
        WORD6(value[0]) = 2048;
        *(_QWORD *)((char *)value + 14) = a1;
        WORD3(value[1]) = 2082;
        *((_QWORD *)&value[1] + 1) = v23;
        LOWORD(value[2]) = 2048;
        *(_QWORD *)((char *)&value[2] + 2) = a2;
        WORD5(value[2]) = 2112;
        *(_QWORD *)((char *)&value[2] + 12) = v19;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v24 = 0;
    goto LABEL_23;
  }
  if (dword_1EE2A2908)
  {
    v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  fbapop_renderPipelineStateRelease((uint64_t)value);
  v24 = 4294947886;
LABEL_23:
  MEMORY[0x19402EF04](*(_QWORD *)(v11 + 64));
  return v24;
}

uint64_t fbapop_deRegisterRenderPipeline(uint64_t a1, unsigned int *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  _QWORD *Value;
  _QWORD *v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v9;
  void (*v10)(uint64_t, const __CFString *, _QWORD);
  uint64_t v11;
  int v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  unsigned int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  void *v27;
  uint64_t *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 64));
  if (!fbapop_tokenIsValid(a1, a2))
  {
    v17 = FigSignalErrorAt();
LABEL_13:
    v13 = v17;
    goto LABEL_15;
  }
  v19 = *a2;
  v5 = CMBaseObjectGetDerivedStorage();
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 32), (const void *)v19);
  if (Value)
  {
    v7 = Value;
    if (dword_1EE2A2908)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v9 = v7[1];
    v10 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v10)
      v10(v9, CFSTR("DownstreamConsumer"), 0);
    v11 = CMBaseObjectGetDerivedStorage();
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v11 + 32), (const void *)v19);
  }
  CMBaseObjectGetDerivedStorage();
  v20 = 0;
  v21 = &v20;
  v22 = 0x2000000000;
  LODWORD(v23) = 0;
  v24 = MEMORY[0x1E0C809B0];
  v25 = 0x40000000;
  v26 = __fbapop_ruleNoConnectedRP_block_invoke;
  v27 = &unk_1E2F78938;
  v28 = &v20;
  FigCFDictionaryApplyBlock();
  v12 = *((_DWORD *)v21 + 6);
  _Block_object_dispose(&v20, 8);
  v13 = 0;
  if (v12 != 1)
  {
    if (dword_1EE2A2908)
    {
      v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v15 = *(_QWORD *)(DerivedStorage + 24);
    v16 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (!v16)
    {
      v13 = 4294954514;
      goto LABEL_15;
    }
    v17 = v16(v15);
    goto LABEL_13;
  }
LABEL_15:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 64));
  return v13;
}

uint64_t fbapop_preparePrebuffering(const void *a1, unsigned int *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  unsigned __int8 *Value;
  int v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  void *v19;
  uint64_t *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 64));
  if (a2)
  {
    v5 = CMBaseObjectGetDerivedStorage();
    Value = (unsigned __int8 *)CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 32), (const void *)*a2);
    fbapop_getIdStringFromToken((uint64_t)a1, a2);
    if (!Value)
    {
      v10 = FigSignalErrorAt();
LABEL_10:
      v9 = v10;
      goto LABEL_11;
    }
    CMBaseObjectGetDerivedStorage();
    v12 = 0;
    v13 = &v12;
    v14 = 0x2000000000;
    LOBYTE(v15) = 1;
    v16 = MEMORY[0x1E0C809B0];
    v17 = 0x40000000;
    v18 = __ruleNoConsumerConnected_and_PipelineAllowsPrebuffering_block_invoke;
    v19 = &unk_1E2F78960;
    v20 = &v12;
    FigCFDictionaryApplyBlock();
    if (*((_BYTE *)v13 + 24))
    {
      v7 = Value[28];
      _Block_object_dispose(&v12, 8);
      if (v7)
      {
        fbapop_renderPipelineHandleDeferResetIfNeeded((uint64_t)a1, (uint64_t)Value);
        if (dword_1EE2A2908)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v10 = fbapop_connectRenderPipelineToBAO(a1, (uint64_t)Value);
        goto LABEL_10;
      }
    }
    else
    {
      _Block_object_dispose(&v12, 8);
    }
  }
  v9 = 0;
LABEL_11:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 64));
  return v9;
}

uint64_t fbapop_prepareForSynchronizeToTimebase(const void *a1, unsigned int *a2, __int128 *a3, __int128 *a4, const void *a5, double a6)
{
  uint64_t DerivedStorage;
  uint64_t v13;
  const void *Value;
  uint64_t v15;
  char *v16;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v18;
  __int128 v19;
  __int128 v20;
  uint64_t SynchronizedToTimebaseRenderPipeline;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  const void *v26;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 64));
  if (!a2)
    goto LABEL_15;
  v13 = CMBaseObjectGetDerivedStorage();
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v13 + 32), (const void *)*a2);
  fbapop_getIdStringFromToken((uint64_t)a1, a2);
  if (!Value)
    goto LABEL_17;
  v15 = CMBaseObjectGetDerivedStorage();
  v16 = (char *)CFDictionaryGetValue(*(CFDictionaryRef *)(v15 + 32), (const void *)*a2);
  if (dword_1EE2A2908)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a5 && v16 && *((_QWORD *)v16 + 4) != 0xFFFFFFFLL)
  {
    fbapop_getConnectedRenderPipelineID();
    if (FigCFEqual())
    {
      if (dword_1EE2A2908)
      {
        v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      *((_QWORD *)v16 + 4) = 0xFFFFFFFLL;
      *((_QWORD *)v16 + 5) = 0;
      v23 = MEMORY[0x1E0CA2E18];
      v24 = *MEMORY[0x1E0CA2E18];
      *((_OWORD *)v16 + 3) = *MEMORY[0x1E0CA2E18];
      v25 = *(_QWORD *)(v23 + 16);
      *((_QWORD *)v16 + 8) = v25;
      *(_OWORD *)(v16 + 72) = v24;
      *((_QWORD *)v16 + 11) = v25;
      v26 = (const void *)*((_QWORD *)v16 + 12);
      if (v26)
      {
        CFRelease(v26);
        v22 = 0;
        *((_QWORD *)v16 + 12) = 0;
        goto LABEL_16;
      }
LABEL_15:
      v22 = 0;
      goto LABEL_16;
    }
    *((double *)v16 + 5) = a6;
    v19 = *a3;
    *((_QWORD *)v16 + 8) = *((_QWORD *)a3 + 2);
    *((_OWORD *)v16 + 3) = v19;
    v20 = *a4;
    *((_QWORD *)v16 + 11) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(v16 + 72) = v20;
    *((_QWORD *)v16 + 12) = CFRetain(a5);
    SynchronizedToTimebaseRenderPipeline = fbapop_attempConnectNextSynchronizedToTimebaseRenderPipeline(a1);
  }
  else
  {
LABEL_17:
    SynchronizedToTimebaseRenderPipeline = FigSignalErrorAt();
  }
  v22 = SynchronizedToTimebaseRenderPipeline;
LABEL_16:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 64));
  return v22;
}

BOOL fbapop_tokenIsValid(uint64_t a1, unsigned int *a2)
{
  uint64_t DerivedStorage;

  CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 32), (const void *)*a2) != 0;
}

_QWORD *fbapop_getIdStringFromToken(uint64_t a1, unsigned int *a2)
{
  uint64_t DerivedStorage;
  _QWORD *result;

  CMBaseObjectGetDerivedStorage();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 32), (const void *)*a2);
  if (result)
    return (_QWORD *)result[2];
  return result;
}

uint64_t __fbapop_setRenderPipelineState_block_invoke(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a3 + 28))
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

uint64_t fbapop_attempConnectNextSynchronizedToTimebaseRenderPipeline(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);
  void *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t);
  void *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  char v28;
  _QWORD v29[4];
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v30 = 0;
  v31 = &v30;
  v32 = 0x2000000000;
  v33 = 0;
  v29[0] = 0;
  v29[1] = v29;
  v29[2] = 0x2000000000;
  v29[3] = 0xFFFFFFFLL;
  v25 = 0;
  v26 = &v25;
  v27 = 0x2000000000;
  v28 = 0;
  v3 = MEMORY[0x1E0C809B0];
  v19 = MEMORY[0x1E0C809B0];
  v20 = 0x40000000;
  v21 = __fbapop_attempConnectNextSynchronizedToTimebaseRenderPipeline_block_invoke;
  v22 = &unk_1E2F788A0;
  v23 = &v25;
  v24 = DerivedStorage;
  FigCFDictionaryApplyBlock();
  if (*((_BYTE *)v26 + 24))
    goto LABEL_4;
  v13 = v3;
  v14 = 0x40000000;
  v15 = __fbapop_attempConnectNextSynchronizedToTimebaseRenderPipeline_block_invoke_2;
  v16 = &unk_1E2F788C8;
  v17 = v29;
  v18 = &v30;
  FigCFDictionaryApplyBlock();
  v4 = v31[3];
  if (!v4)
  {
LABEL_4:
    v7 = 0;
  }
  else
  {
    v5 = *(double *)(v4 + 40);
    v11 = *(_OWORD *)(v4 + 48);
    v12 = *(_QWORD *)(v4 + 64);
    v9 = *(_OWORD *)(v4 + 72);
    v6 = *(_QWORD *)(v4 + 96);
    v10 = *(_QWORD *)(v4 + 88);
    v7 = fbapop_callSetRateOnBAO(a1, (unsigned int *)(v4 + 24), &v11, (uint64_t)&v9, v6, 0, 0, 0, v5);
    fbapop_clearRenderPipelineSynchronizeToTimebaseContext(v31[3]);
  }
  _Block_object_dispose(&v25, 8);
  _Block_object_dispose(v29, 8);
  _Block_object_dispose(&v30, 8);
  return v7;
}

void fbapop_clearRenderPipelineSynchronizeToTimebaseContext(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  const void *v5;

  if (a1)
  {
    *(_QWORD *)(a1 + 32) = 0xFFFFFFFLL;
    *(_QWORD *)(a1 + 40) = 0;
    v2 = MEMORY[0x1E0CA2E18];
    v3 = *MEMORY[0x1E0CA2E18];
    *(_OWORD *)(a1 + 48) = *MEMORY[0x1E0CA2E18];
    v4 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(a1 + 64) = v4;
    *(_OWORD *)(a1 + 72) = v3;
    *(_QWORD *)(a1 + 88) = v4;
    v5 = *(const void **)(a1 + 96);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(a1 + 96) = 0;
    }
  }
}

void __fbapop_setTimebaseStarter_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)(a3 + 29) = 0;
}

uint64_t __fbapop_attempConnectNextSynchronizedToTimebaseRenderPipeline_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  void (*v7)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef cf1;

  cf1 = 0;
  v5 = *(_QWORD *)(a3 + 8);
  result = CMBaseObjectGetVTable();
  v7 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(result + 8) + 48);
  if (v7)
  {
    v7(v5, CFSTR("DownstreamConsumer"), *MEMORY[0x1E0C9AE00], &cf1);
    result = (uint64_t)cf1;
    if (cf1)
    {
      result = CFEqual(cf1, *(CFTypeRef *)(*(_QWORD *)(a1 + 40) + 40));
      if ((_DWORD)result)
      {
        if (!*(_BYTE *)(a3 + 30))
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
      }
    }
  }
  return result;
}

uint64_t __fbapop_attempConnectNextSynchronizedToTimebaseRenderPipeline_block_invoke_2(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  if (*(double *)(a3 + 40) > 0.0 && (*(_BYTE *)(a3 + 60) & 1) != 0)
  {
    v3 = *(_QWORD *)(a3 + 32);
    v4 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
    if (v3 < *(_QWORD *)(v4 + 24))
    {
      *(_QWORD *)(v4 + 24) = v3;
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = a3;
    }
  }
  return result;
}

uint64_t fbapop_callSetRateOnBAO(const void *a1, unsigned int *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t DerivedStorage;
  uint64_t v19;
  uint64_t v20;
  _BYTE *Value;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, __int128 *, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, double);
  uint64_t v27;
  uint64_t v28;
  os_log_type_t type[16];
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 0;
  v19 = DerivedStorage;
  v27 = a5;
  v28 = a6;
  v20 = CMBaseObjectGetDerivedStorage();
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v20 + 32), (const void *)*a2);
  fbapop_getIdStringFromToken((uint64_t)a1, a2);
  if (!Value)
    return FigSignalErrorAt();
  if (dword_1EE2A2908)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (Value[30])
  {
    v23 = 0;
  }
  else
  {
    result = fbapop_connectRenderPipelineToBAO(a1, (uint64_t)Value);
    if ((_DWORD)result)
      return result;
    v23 = 1;
  }
  fbapop_renderPipelineHandleDeferResetIfNeeded((uint64_t)a1, (uint64_t)Value);
  v25 = *(_QWORD *)(v19 + 24);
  v31 = *a3;
  v32 = *((_QWORD *)a3 + 2);
  *(_OWORD *)type = *(_OWORD *)a4;
  v30 = *(_QWORD *)(a4 + 16);
  v26 = *(uint64_t (**)(uint64_t, uint64_t, __int128 *, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v26)
    return 4294954514;
  v35 = v31;
  v36 = v32;
  v33 = *(_OWORD *)type;
  v34 = v30;
  return v26(v25, v23, &v35, &v33, v27, v28, a7, a8, a9);
}

uint64_t fbapop_connectRenderPipelineToBAO(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, const __CFString *, uint64_t);
  uint64_t v12;
  CFTypeRef cf[27];

  cf[26] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (!v6)
  {
LABEL_9:
    v12 = 4294954514;
    goto LABEL_10;
  }
  v7 = v6(v5, CFSTR("DownstreamConsumer"), *MEMORY[0x1E0C9AE00], cf);
  if ((_DWORD)v7)
  {
LABEL_8:
    v12 = v7;
    goto LABEL_10;
  }
  if (!FigCFEqual())
  {
    CMBaseObjectGetDerivedStorage();
    cf[10] = (CFTypeRef)MEMORY[0x1E0C809B0];
    cf[11] = (CFTypeRef)0x40000000;
    cf[12] = __fbapop_disconnectAllRPConsumer_block_invoke;
    cf[13] = &__block_descriptor_tmp_33;
    cf[14] = a1;
    FigCFDictionaryApplyBlock();
    if (dword_1EE2A2908)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v9 = *(_QWORD *)(a2 + 8);
    v10 = *(_QWORD *)(DerivedStorage + 40);
    v11 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 56);
    if (v11)
    {
      v7 = v11(v9, CFSTR("DownstreamConsumer"), v10);
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  v12 = 0;
LABEL_10:
  if (cf[0])
    CFRelease(cf[0]);
  return v12;
}

void fbapop_renderPipelineHandleDeferResetIfNeeded(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  unsigned __int8 *v4;
  uint64_t v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  void *v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(unsigned __int8 **)(a2 + 104);
  if (v4)
  {
    v5 = DerivedStorage;
    if (dword_1EE2A2908)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v4 = *(unsigned __int8 **)(a2 + 104);
    }
    v7 = *(_QWORD *)(v5 + 24);
    v8 = *v4;
    v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v9)
      v9(v7, v8);
    v10 = *(void **)(a2 + 104);
    if (v10)
    {
      CFAllocatorDeallocate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v10);
      *(_QWORD *)(a2 + 104) = 0;
    }
  }
}

uint64_t __fbapop_disconnectAllRPConsumer_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v5;
  uint64_t result;
  uint64_t (*v7)(uint64_t, const __CFString *, _QWORD);

  if (dword_1EE2A2908)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v5 = *(_QWORD *)(a3 + 8);
  result = CMBaseObjectGetVTable();
  v7 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(result + 8) + 56);
  if (v7)
    return v7(v5, CFSTR("DownstreamConsumer"), 0);
  return result;
}

uint64_t fbapop_ruleIsConsumerConnected(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  _BOOL4 v3;
  CFTypeRef cf;

  cf = 0;
  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (v2)
  {
    v3 = v2(v1, CFSTR("DownstreamConsumer"), *MEMORY[0x1E0C9AE00], &cf) == 0;
    if (cf)
    {
      CFRelease(cf);
      LODWORD(v2) = 1;
    }
    else
    {
      LODWORD(v2) = 0;
    }
  }
  else
  {
    v3 = 0;
  }
  return v3 & v2 ^ 1;
}

uint64_t __fbapop_findRenderPipelineStateWithID_block_invoke(uint64_t result, uint64_t a2, uint64_t a3)
{
  const void *v3;
  uint64_t v5;

  v3 = *(const void **)(a3 + 16);
  if (v3)
  {
    v5 = result;
    result = CFEqual(*(CFTypeRef *)(result + 40), v3);
    if ((_DWORD)result)
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 8) + 24) = a3;
  }
  return result;
}

void __fbapop_ruleNoConnectedRP_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef v6;
  CFTypeRef cf;

  cf = 0;
  v4 = *(_QWORD *)(a3 + 8);
  v5 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (v5)
  {
    v5(v4, CFSTR("DownstreamConsumer"), *MEMORY[0x1E0C9AE00], &cf);
    v6 = cf;
    if (cf)
    {
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
      CFRelease(v6);
    }
  }
}

uint64_t fbapop_baoNotificationCallForward(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage;
  uint64_t result;
  CFTypeID v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = CFEqual(a3, CFSTR("GoActive"));
  if ((_DWORD)result)
  {
    if (a5)
    {
      v9 = CFGetTypeID(a5);
      result = CFDictionaryGetTypeID();
      if (v9 == result)
      {
        FigCFDictionaryGetBooleanIfPresent();
        MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 64));
        CMBaseObjectGetDerivedStorage();
        FigCFDictionaryApplyBlock();
        return MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 64));
      }
    }
  }
  else
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return CMNotificationCenterPostNotification();
  }
  return result;
}

void __fbapop_setGoActiveOnConnectedRP_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v6;
  const void *v7;
  int v8;
  uint64_t FigBaseObject;
  void (*v10)(uint64_t, const __CFString *, uint64_t);
  uint64_t v11;
  CFTypeRef cf;

  cf = 0;
  v4 = *(_QWORD *)(a3 + 8);
  v5 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (v5)
  {
    v5(v4, CFSTR("DownstreamConsumer"), *MEMORY[0x1E0C9AE00], &cf);
    if (cf)
    {
      v6 = FigCFWeakReferenceHolderCopyReferencedObject();
      v7 = (const void *)v6;
      if (v6)
      {
        v8 = *(unsigned __int8 *)(a1 + 32);
        FigBaseObject = FigRenderPipelineGetFigBaseObject(v6);
        v10 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
        if (v10)
        {
          if (v8)
            v11 = *MEMORY[0x1E0C9AE50];
          else
            v11 = *MEMORY[0x1E0C9AE40];
          v10(FigBaseObject, CFSTR("GoActive"), v11);
        }
      }
      if (cf)
        CFRelease(cf);
      if (v7)
        CFRelease(v7);
    }
  }
}

uint64_t FigContentKeySessionRemoteCreateSessionForID(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;

  if (!a2 || !a3)
    return FigSignalErrorAt();
  *a3 = 0;
  v3 = fcks_remote_ensureClientEstablished();
  if ((_DWORD)v3)
    return v3;
  FigContentKeySessionGetClassID();
  v4 = CMDerivedObjectCreate();
  if (!(_DWORD)v4)
    return FigSignalErrorAt();
  return v4;
}

uint64_t fcks_remote_ensureClientEstablished()
{
  uint64_t v0;
  _QWORD block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v6 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __fcks_remote_ensureClientEstablished_block_invoke;
  block[3] = &unk_1E2F78A00;
  block[4] = &v3;
  if (fcks_remote_ensureClientEstablished_sFigContentKeySessionRemoteClientSetupOnce != -1)
    dispatch_once(&fcks_remote_ensureClientEstablished_sFigContentKeySessionRemoteClientSetupOnce, block);
  FigXPCRemoteClientKillServerOnTimeout();
  v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t FigContentKeySessionRemoteCreateSession(uint64_t a1, const __CFDictionary *a2, uint64_t a3, NSObject *a4, __int128 *a5, CFTypeRef *a6)
{
  uint64_t v12;
  uint64_t uint64;
  uint64_t v14;
  CFTypeRef v15;
  uint64_t DerivedStorage;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  CFTypeRef v21;
  xpc_object_t xdict;
  uint64_t v23;

  xdict = 0;
  v23 = 0;
  v21 = 0;
  if (!a6)
    goto LABEL_17;
  *a6 = 0;
  v12 = fcks_remote_ensureClientEstablished();
  if ((_DWORD)v12)
    goto LABEL_18;
  v12 = FigXPCCreateBasicMessage();
  if ((_DWORD)v12)
    goto LABEL_18;
  if (a2)
  {
    if (CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA3020]))
    {
      v12 = FigSandboxRegisterURLWithProcessAndCopyRegistration();
      if ((_DWORD)v12)
        goto LABEL_18;
    }
  }
  v12 = FigXPCMessageSetCFDictionary();
  if ((_DWORD)v12)
    goto LABEL_18;
  v12 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v12)
    goto LABEL_18;
  uint64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E0CA36A0]);
  if (!uint64)
  {
LABEL_17:
    v12 = FigSignalErrorAt();
LABEL_18:
    v14 = v12;
    goto LABEL_16;
  }
  v14 = FigContentKeySessionRemoteCreateSessionForID(a1, uint64, &v21);
  v15 = v21;
  if (!(_DWORD)v14)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!a3)
      goto LABEL_15;
    if (!a4)
      goto LABEL_15;
    if (!a5)
      goto LABEL_15;
    dispatch_retain(a4);
    *(_QWORD *)(DerivedStorage + 16) = a4;
    v17 = *a5;
    v18 = a5[1];
    *(_OWORD *)(DerivedStorage + 56) = a5[2];
    *(_OWORD *)(DerivedStorage + 40) = v18;
    *(_OWORD *)(DerivedStorage + 24) = v17;
    v19 = FigCFWeakReferenceHolderCreateWithReferencedObject();
    *(_QWORD *)(DerivedStorage + 72) = v19;
    if (v19)
    {
LABEL_15:
      v14 = 0;
      *(_QWORD *)(DerivedStorage + 80) = 0;
      *a6 = v21;
      v21 = 0;
      goto LABEL_16;
    }
    v14 = FigSignalErrorAt();
    v15 = v21;
  }
  if (v15)
    CFRelease(v15);
LABEL_16:
  FigXPCRelease();
  FigXPCRelease();
  return v14;
}

void __fcks_remote_ensureClientEstablished_block_invoke(uint64_t a1)
{
  __CFDictionary *Mutable;
  __CFDictionary *v3;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v3 = Mutable;
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA54A0], CFSTR("FigContentKeySession_ServerConnectionDied"));
    FigRemote_ShouldConnectToMediaparserdForFileParsing();
    FigRemote_ShouldConnectToMediaplaybackd();
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = FigXPCRemoteClientCreate();
    CFRelease(v3);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = FigSignalErrorAt();
  }
}

uint64_t fcks_remote_deadConnectionCallback()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(result + 1) = 1;
  return result;
}

uint64_t fcks_remote_handleServerMessage()
{
  uint64_t OpCode;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  else
    return 4294951138;
}

void __fcks_remote_handleKeyResponseErrorCallback_block_invoke(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1 + 32))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 48);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 64);
  if (v4)
    CFRelease(v4);
}

void __fcks_remote_handleKeyResponseSuccessfullyProcessedCallback_block_invoke(uint64_t a1)
{
  const void *v2;
  const void *v3;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(a1 + 32))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 48);
  if (v3)
    CFRelease(v3);
}

void __fcks_remote_handlePersistentKeyUpdatedCallback_block_invoke(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(a1 + 32))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 48);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 56);
  if (v4)
    CFRelease(v4);
}

void __fcks_remote_handleSecureStopDidFinalizeRecordCallback_block_invoke(uint64_t a1)
{
  const void *v2;

  (*(void (**)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 40));
  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
}

void __fcks_remote_externalProtectionStateChangedCallback_block_invoke(uint64_t a1)
{
  const void *v2;
  const void *v3;

  (*(void (**)(_QWORD, _QWORD))(a1 + 32))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 48);
  if (v3)
    CFRelease(v3);
}

uint64_t fcks_remote_invalidate(uint64_t a1)
{
  _BYTE *DerivedStorage;
  uint64_t ObjectID;
  uint64_t v4;
  uint64_t v6;

  v6 = 0;
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  ObjectID = fcks_remote_getObjectID(a1, &v6);
  if ((_DWORD)ObjectID || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID))
  {
    v4 = ObjectID;
  }
  else
  {
    v4 = FigXPCRemoteClientSendSyncMessage();
    if (!(_DWORD)v4)
      *DerivedStorage = 1;
  }
  FigXPCRelease();
  return v4;
}

uint64_t fcks_remote_finalize()
{
  uint64_t DerivedStorage;
  NSObject *v1;
  const void *v2;
  const void *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigXPCRemoteClientDisassociateObject();
  if (!*(_BYTE *)(DerivedStorage + 1) && !FigXPCCreateBasicMessage())
    FigXPCRemoteClientSendAsyncMessage();
  FigXPCRelease();
  v1 = *(NSObject **)(DerivedStorage + 16);
  if (v1)
    dispatch_release(v1);
  v2 = *(const void **)(DerivedStorage + 72);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 72) = 0;
  }
  v3 = *(const void **)(DerivedStorage + 80);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 80) = 0;
  }
  return FigXPCRemoteClientKillServerOnTimeout();
}

__CFString *fcks_remote_copyDebugDescription(const void *a1)
{
  _BYTE *DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;
  const char *v6;
  CFAllocatorRef v7;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(a1);
  if (*DerivedStorage)
    v6 = " (invalidated)";
  else
    v6 = "";
  v7 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigContentKeySession_Remote %p retainCount: %ld%s allocator: %p, "), a1, v5, v6, v7);
  CFStringAppendFormat(Mutable, 0, CFSTR(">"));
  return Mutable;
}

uint64_t fcks_remote_copyProperty(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v5;

  v5 = 0;
  if (!a2 || !a4)
    return FigSignalErrorAt();
  *a4 = 0;
  result = fcks_remote_getObjectID(a1, &v5);
  if (!(_DWORD)result)
    return FigXPCSendStdCopyPropertyMessage();
  return result;
}

uint64_t fcks_remote_setProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v4;

  v4 = 0;
  if (!a2 || !a3)
    return FigSignalErrorAt();
  result = fcks_remote_getObjectID(a1, &v4);
  if (!(_DWORD)result)
    return FigXPCSendStdSetPropertyMessage();
  return result;
}

uint64_t fcks_remote_getObjectID(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || *(_BYTE *)DerivedStorage || *(_BYTE *)(DerivedStorage + 1))
    return FigSignalErrorAt();
  *a2 = *(_QWORD *)(DerivedStorage + 8);
  return 0;
}

uint64_t fcks_remote_addChildSession(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectID;
  uint64_t UInt64;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  if (!a2)
    goto LABEL_10;
  ObjectID = fcks_remote_getObjectID(a1, &v10);
  if ((_DWORD)ObjectID)
    goto LABEL_11;
  ObjectID = fcks_remote_getObjectID(a2, &v9);
  if ((_DWORD)ObjectID)
    goto LABEL_11;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_11;
  UInt64 = FigCFNumberCreateUInt64();
  if (!UInt64)
  {
LABEL_10:
    ObjectID = FigSignalErrorAt();
LABEL_11:
    v7 = ObjectID;
    FigXPCRelease();
    return v7;
  }
  v5 = (const void *)UInt64;
  v6 = FigXPCMessageSetCFNumber();
  if (!(_DWORD)v6)
    v6 = FigXPCRemoteClientSendSyncMessage();
  v7 = v6;
  FigXPCRelease();
  CFRelease(v5);
  return v7;
}

uint64_t fcks_remote_copyCryptor(uint64_t a1, const __CFAllocator *a2, const __CFDictionary *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t ObjectID;
  const void *v8;
  __CFDictionary *MutableCopy;
  CFTypeRef v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v14 = 0;
  if (!a3 || !a5)
  {
    ObjectID = FigSignalErrorAt();
LABEL_20:
    v12 = ObjectID;
    goto LABEL_18;
  }
  *a5 = 0;
  ObjectID = fcks_remote_getObjectID(a1, &v14);
  if ((_DWORD)ObjectID)
    goto LABEL_20;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_20;
  v8 = (const void *)*MEMORY[0x1E0CA3050];
  CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0CA3050]);
  FigXPCMessageSetFormatDescription();
  if (CFDictionaryGetValue(a3, v8))
  {
    MutableCopy = CFDictionaryCreateMutableCopy(a2, 0, a3);
    if (MutableCopy)
    {
      v10 = MutableCopy;
      CFDictionaryRemoveValue(MutableCopy, v8);
    }
    else
    {
      v12 = FigSignalErrorAt();
      if ((_DWORD)v12)
        goto LABEL_18;
      v10 = 0;
    }
  }
  else
  {
    v10 = CFRetain(a3);
  }
  v11 = FigXPCMessageSetCFDictionary();
  if ((_DWORD)v11)
    goto LABEL_14;
  v11 = FigXPCMessageSetCFBoolean();
  if ((_DWORD)v11)
    goto LABEL_14;
  v11 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v11)
    goto LABEL_14;
  if (xpc_dictionary_get_uint64(0, "CryptorID"))
  {
    v11 = FigCPECryptorRemoteRetainCopiedCryptor();
LABEL_14:
    v12 = v11;
    if (!v10)
      goto LABEL_18;
    goto LABEL_17;
  }
  v12 = 0;
  if (v10)
LABEL_17:
    CFRelease(v10);
LABEL_18:
  FigXPCRelease();
  FigXPCRelease();
  return v12;
}

uint64_t fcks_remote_setAuthorizationToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectID;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  if (!a2 || !a3)
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_11;
  }
  ObjectID = fcks_remote_getObjectID(a1, &v7);
  if ((_DWORD)ObjectID)
  {
LABEL_11:
    v5 = ObjectID;
    goto LABEL_8;
  }
  v4 = FigXPCCreateBasicMessage();
  if ((_DWORD)v4 || (v4 = FigXPCMessageSetCFString(), (_DWORD)v4) || (v4 = FigXPCMessageSetCFData(), (_DWORD)v4))
    v5 = v4;
  else
    v5 = FigXPCRemoteClientSendSyncMessage();
LABEL_8:
  FigXPCRelease();
  return v5;
}

uint64_t fcsk_remote_externalProtectionStatusForCryptor(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t ObjectID;
  uint64_t v6;
  uint64_t v8;

  v8 = 0;
  if (!a1 || !a2 || !a3 || !a4)
  {
    ObjectID = FigSignalErrorAt();
LABEL_13:
    v6 = ObjectID;
    goto LABEL_11;
  }
  ObjectID = fcks_remote_getObjectID(a1, &v8);
  if ((_DWORD)ObjectID)
    goto LABEL_13;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_13;
  ObjectID = FigCPECryptorRemoteGetID();
  if ((_DWORD)ObjectID)
    goto LABEL_13;
  xpc_dictionary_set_uint64(0, "CryptorID", 0);
  ObjectID = FigXPCMessageSetCFArray();
  if ((_DWORD)ObjectID)
    goto LABEL_13;
  v6 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!(_DWORD)v6)
    *a4 = FigXPCMessageGetUInt32();
LABEL_11:
  FigXPCRelease();
  FigXPCRelease();
  return v6;
}

uint64_t FigPhotoScaleAndRotateSessionTransformForSize()
{
  return CMPhotoScaleAndRotateSessionTransformForSize();
}

uint64_t FigPhotoScaleAndRotateSessionTransformForMaxSideLength()
{
  return CMPhotoScaleAndRotateSessionTransformForMaxSideLength();
}

uint64_t FigCaptionRendererCellStackLayoutRegionCreate(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t DerivedStorage;
  __int128 v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  *a1 = 0;
  *(_QWORD *)&v8 = 0;
  MEMORY[0x19402F294](&FigCaptionRendererCellStackLayoutRegionGetClassID_sRegisterFigCaptionRendererCellStackLayoutRegionBaseTypeOnce, RegisterFigCaptionRendererCellStackLayoutRegionBaseType);
  v2 = CMDerivedObjectCreate();
  if (!(_DWORD)v2)
  {
    v3 = v8;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    FigGeometryDimensionMake();
    FigGeometryDimensionMake();
    FigGeometryPointMake();
    v5 = v8;
    *(_OWORD *)(DerivedStorage + 24) = v9;
    *(_OWORD *)(DerivedStorage + 8) = v5;
    v7 = 0;
    FigCaptionRendererStackLayoutRegionCreate(&v7);
    *(_QWORD *)DerivedStorage = v7;
    *a1 = v3;
  }
  return v2;
}

uint64_t FigCaptionRendererCellStackLayoutRegionSetPosition(uint64_t a1, _OWORD *a2)
{
  uint64_t DerivedStorage;
  __int128 v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = a2[1];
  *(_OWORD *)(DerivedStorage + 8) = *a2;
  *(_OWORD *)(DerivedStorage + 24) = v4;
  return 0;
}

uint64_t FigCaptionRendererCellStackLayoutRegionGetPosition(uint64_t a1, _OWORD *a2)
{
  uint64_t DerivedStorage;
  __int128 v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v4 = *(_OWORD *)(DerivedStorage + 24);
    *a2 = *(_OWORD *)(DerivedStorage + 8);
    a2[1] = v4;
  }
  return 0;
}

uint64_t FigCaptionRendererCellStackLayoutRegionDigestLayoutInfo(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  __int128 v5;
  __int128 v6;
  uint64_t ProtocolVTable;
  uint64_t v8;
  void (*v9)(uint64_t, __int128 *);
  double v10;
  double v11;
  double v12;
  double v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, double, double);
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, double, double);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, double);
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v33 = 0u;
  v34 = 0u;
  v5 = *(_OWORD *)(DerivedStorage + 24);
  v31 = *(_OWORD *)(DerivedStorage + 8);
  v32 = v5;
  FigGeometryMappingConvertPointToPoint();
  v6 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
  v31 = *MEMORY[0x1E0C9D648];
  v32 = v6;
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v8 = *(_QWORD *)(ProtocolVTable + 16);
    if (v8)
    {
      v9 = *(void (**)(uint64_t, __int128 *))(v8 + 72);
      if (v9)
        v9(a1, &v31);
    }
  }
  FCRGetCEA608CellSize(*(_QWORD *)(a2 + 696));
  v11 = v10;
  v13 = v12;
  v14 = v32;
  FigCaptionRendererRegionProtocolGetProtocolID();
  v15 = CMBaseObjectGetProtocolVTable();
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 16);
    if (v16)
    {
      v17 = *(void (**)(uint64_t, double, double))(v16 + 56);
      if (v17)
        v17(a1, 0.0, 0.0);
    }
  }
  v18 = *(double *)&v33;
  v19 = *(double *)&v34;
  FigCaptionRendererRegionProtocolGetProtocolID();
  v20 = CMBaseObjectGetProtocolVTable();
  if (v20)
  {
    v21 = *(_QWORD *)(v20 + 16);
    if (v21)
    {
      v22 = *(void (**)(uint64_t, double, double))(v21 + 72);
      if (v22)
        v22(a1, v18, 95.0 - v19);
    }
  }
  FigCaptionRendererRegionProtocolGetProtocolID();
  v23 = CMBaseObjectGetProtocolVTable();
  if (v23)
  {
    v25 = *(_QWORD *)(v23 + 16);
    if (v25)
    {
      v26 = *(void (**)(uint64_t, uint64_t))(v25 + 24);
      if (v26)
      {
        LODWORD(v24) = vcvtd_n_s64_f64(v11 * 100.0 / *(double *)&v14, 5uLL);
        v26(a1, v24);
      }
    }
  }
  FigCaptionRendererStackLayoutRegionProtocolGetProtocolID();
  v27 = CMBaseObjectGetProtocolVTable();
  if (v27)
  {
    v28 = *(_QWORD *)(v27 + 16);
    if (v28)
    {
      v29 = *(void (**)(uint64_t, double))(v28 + 16);
      if (v29)
        v29(a1, v13 * 100.0 / *((double *)&v14 + 1) / 100.0);
    }
  }
  return 0;
}

void FigCaptionRendererCellStackLayoutRegionFinalize()
{
  CFTypeRef *DerivedStorage;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  CFRelease(*DerivedStorage);
}

__CFString *FigCaptionRendererCellStackLayoutRegionCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererCellStackLayoutRegion: <%p>"), a1);
  return Mutable;
}

__CFString *FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererBaseProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererCellStackLayoutRegion <FigCaptionRendererBaseProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererBaseProtocol_GetClassName(uint64_t a1, _QWORD *a2)
{
  *a2 = "FigCaptionRendererCellStackLayoutRegion";
  return 0;
}

__CFString *FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererCellStackLayoutRegion <FigCaptionRendererNodeProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_SetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_GetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_GetChildren(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 24);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_HasChildNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t ProtocolVTable;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  v5 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v7 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v7)
    return 4294954508;
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  if (v8)
    return v8(v5, a2, a3);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_AddChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 40);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_RemoveChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_RemovelAllChildrenNodes()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 56);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_SetViewport(double a1, double a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t ProtocolVTable;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, double, double, double, double);

  v8 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v10 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v10)
    return 4294954508;
  v11 = *(uint64_t (**)(uint64_t, double, double, double, double))(v10 + 64);
  if (v11)
    return v11(v8, a1, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_GetViewport(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 72);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_SetFCRBounds(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _OWORD *);
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[4];

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v8 = *a2;
  v9 = a2[1];
  v10 = a2[2];
  v11 = a2[3];
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, _OWORD *))(v5 + 80);
  if (!v6)
    return 4294954514;
  v12[0] = v8;
  v12[1] = v9;
  v12[2] = v10;
  v12[3] = v11;
  return v6(v3, v12);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_GetFCRBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 88);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_SetCGBounds(double a1, double a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t ProtocolVTable;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, double, double, double, double);

  v8 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v10 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v10)
    return 4294954508;
  v11 = *(uint64_t (**)(uint64_t, double, double, double, double))(v10 + 96);
  if (v11)
    return v11(v8, a1, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_GetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 104);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_SetCGSize(double a1, double a2)
{
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, double, double);

  v4 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v6 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v6)
    return 4294954508;
  v7 = *(uint64_t (**)(uint64_t, double, double))(v6 + 112);
  if (v7)
    return v7(v4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_GetCGSize(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable
    && (v5 = *(_QWORD *)(ProtocolVTable + 16)) != 0
    && (v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 120)) != 0)
  {
    return v6(v3, a2);
  }
  else
  {
    return 4294954508;
  }
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_SetCGOrigin(double a1, double a2)
{
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, double, double);

  v4 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v6 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v6)
    return 4294954508;
  v7 = *(uint64_t (**)(uint64_t, double, double))(v6 + 128);
  if (v7)
    return v7(v4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_GetCGOrigin(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 136);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_SetPaddings(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t ProtocolVTable;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v15 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v15)
    return 4294954508;
  v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 144);
  if (v16)
    return v16(v13, a2, a3, a4, a5, a6, a7);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_GetInsetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 152);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_PurgeImageCache()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 160);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_SetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 168);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_GetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 176);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_GetImageCacheWidth(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 184);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_GetImageCacheHeight(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 192);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_AllocateImageBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 200);
  if (v10)
    return v10(v7, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_GetImageBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 208);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_SetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 216);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_GetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 224);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_SetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 232);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_GetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 240);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_HasActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 248);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_SetZOrder(double a1)
{
  uint64_t v2;
  uint64_t ProtocolVTable;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, double);

  v2 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v4 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v4)
    return 4294954508;
  v5 = *(uint64_t (**)(uint64_t, double))(v4 + 256);
  if (v5)
    return v5(v2, a1);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_GetZOrder(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 264);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_ResetNodeTree()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 272);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_Draw(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 280);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_Layout(uint64_t a1, uint64_t a2)
{
  uint64_t *DerivedStorage;
  uint64_t v5;
  uint64_t ProtocolVTable;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererCellStackLayoutRegionDigestLayoutInfo(a1, a2);
  v5 = *DerivedStorage;
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v7 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v7)
    return 4294954508;
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 288);
  if (v8)
    return v8(v5, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_ExecActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 296);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_Compose(uint64_t a1, uint64_t a2)
{
  uint64_t *DerivedStorage;
  uint64_t ProtocolVTable;
  uint64_t v6;
  void (*v7)(uint64_t, char *);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, __int16 *);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  __int16 v25;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v25 = 0;
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v6 = *(_QWORD *)(ProtocolVTable + 16);
    if (v6)
    {
      v7 = *(void (**)(uint64_t, char *))(v6 + 248);
      if (v7)
      {
        v7(a1, (char *)&v25 + 1);
        if (HIBYTE(v25))
        {
          FigCaptionRendererNodeProtocolGetProtocolID();
          v8 = CMBaseObjectGetProtocolVTable();
          if (v8)
          {
            v9 = *(_QWORD *)(v8 + 16);
            if (v9)
            {
              v10 = *(void (**)(uint64_t, uint64_t))(v9 + 296);
              if (v10)
                v10(a1, a2);
            }
          }
        }
      }
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  v11 = CMBaseObjectGetProtocolVTable();
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 16);
    if (v12)
    {
      v13 = *(void (**)(uint64_t, __int16 *))(v12 + 240);
      if (v13)
      {
        v13(a1, &v25);
        if ((_BYTE)v25)
        {
          FigCaptionRendererNodeProtocolGetProtocolID();
          v14 = CMBaseObjectGetProtocolVTable();
          if (v14)
          {
            v15 = *(_QWORD *)(v14 + 16);
            if (v15)
            {
              v16 = *(void (**)(uint64_t, uint64_t))(v15 + 288);
              if (v16)
                v16(a1, a2);
            }
          }
        }
      }
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  v17 = CMBaseObjectGetProtocolVTable();
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 16);
    if (v18)
    {
      v19 = *(void (**)(uint64_t, uint64_t))(v18 + 280);
      if (v19)
        v19(a1, a2);
    }
  }
  v20 = *DerivedStorage;
  FigCaptionRendererNodeProtocolGetProtocolID();
  v21 = CMBaseObjectGetProtocolVTable();
  if (!v21)
    return 4294954508;
  v22 = *(_QWORD *)(v21 + 16);
  if (!v22)
    return 4294954508;
  v23 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 304);
  if (v23)
    return v23(v20, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_OnChildUpdateDisplayRequest(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _OWORD *);
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v8 = *a2;
  v9 = a2[1];
  v10 = *((_QWORD *)a2 + 4);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, _OWORD *))(v5 + 312);
  if (!v6)
    return 4294954514;
  v11[0] = v8;
  v11[1] = v9;
  v12 = v10;
  return v6(v3, v11);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_AddAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 320);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_RemoveAllActions()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 328);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_SetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 336);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_GetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 344);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_SelectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, double, double);

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, double, double))(v9 + 352);
  if (v10)
    return v10(v7, a4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_UnselectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, double, double);

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, double, double))(v9 + 360);
  if (v10)
    return v10(v7, a4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_IsSelected(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 368);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_BeginScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 376);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_EndScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 384);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

__CFString *FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererRegionProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererCellStackLayoutRegion <FigCaptionRendererRegionProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererRegionProtocol_SetRegionID(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererRegionProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererRegionProtocol_GetRegionID(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererRegionProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererRegionProtocol_SetWidth(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererRegionProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 24);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererRegionProtocol_GetWidth(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererRegionProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 32);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererRegionProtocol_SetLines(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererRegionProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 40);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererRegionProtocol_GetLines(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererRegionProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererRegionProtocol_SetRegionAnchor(double a1, double a2)
{
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, double, double);

  v4 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererRegionProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v6 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v6)
    return 4294954508;
  v7 = *(uint64_t (**)(uint64_t, double, double))(v6 + 56);
  if (v7)
    return v7(v4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererRegionProtocol_GetRegionAnchor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererRegionProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 64);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererRegionProtocol_SetViewportAnchor(double a1, double a2)
{
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, double, double);

  v4 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererRegionProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v6 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v6)
    return 4294954508;
  v7 = *(uint64_t (**)(uint64_t, double, double))(v6 + 72);
  if (v7)
    return v7(v4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererRegionProtocol_GetViewportAnchor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererRegionProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 80);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

__CFString *FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererStackLayoutRegionProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererCellStackLayoutRegion <FigCaptionRendererStackLayoutRegionProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererStackLayoutRegionProtocol_SetAnimationEnabled(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererStackLayoutRegionProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t RegisterFigCaptionRendererCellStackLayoutRegionBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFTypeRef FigCaptionRendererCellStackLayoutRegionBaseCopyFormattingDesc()
{
  return CFRetain(CFSTR("[FigCaptionRendererCellStackLayoutRegion]"));
}

uint64_t FigCreateClosedCaptionRenderPipeline(const opaqueCMFormatDescription *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, const __CFDictionary *a7, CFTypeRef *a8)
{
  _BOOL4 v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t DerivedStorage;
  CFTypeRef v18;
  uint64_t v19;
  __int128 v20;
  uint64_t FigBaseObject;
  uint64_t (*v23)(uint64_t, const __CFString *, uint64_t, uint64_t);
  uint64_t v24;
  __int128 v28;
  uint64_t v29;
  CFTypeRef cf;

  cf = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a3)
    v13 = a2 != 0;
  else
    v13 = 0;
  if ((a2 != 0) != (a3 != 0) || (a5 ? (v14 = a4 != 0) : (v14 = 0), (a4 != 0) != (a5 != 0)))
  {
LABEL_26:
    v16 = FigSignalErrorAt();
    goto LABEL_17;
  }
  v15 = *MEMORY[0x1E0C9AE00];
  FigRenderPipelineGetClassID();
  v16 = CMDerivedObjectCreate();
  if (!(_DWORD)v16)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_BYTE *)(DerivedStorage + 1) = 1;
    *(_QWORD *)(DerivedStorage + 8) = FigSimpleMutexCreate();
    v16 = FigCEA608CaptionDecoderCreate(v15, a1, (uint64_t)ccrp_closedCaptionCallbackFromClosedCaptionRenderPipeline, (uint64_t)cf, 0, (CFTypeRef *)(DerivedStorage + 16));
    if (!(_DWORD)v16)
    {
      if (a1)
        v18 = CFRetain(a1);
      else
        v18 = 0;
      *(_QWORD *)(DerivedStorage + 32) = v18;
      if (!v13
        || (*(_QWORD *)(DerivedStorage + 40) = a2,
            v19 = FigCFWeakReferenceHolderCreateWithReferencedObject(),
            (*(_QWORD *)(DerivedStorage + 48) = v19) != 0))
      {
        *(_DWORD *)(DerivedStorage + 24) = 1681272888;
        v20 = *a6;
        *(_QWORD *)(DerivedStorage + 96) = *((_QWORD *)a6 + 2);
        *(_OWORD *)(DerivedStorage + 80) = v20;
        v28 = *a6;
        v29 = *((_QWORD *)a6 + 2);
        v16 = FigSimpleRenderPipelineCreateWithCallback(v15, (uint64_t)ccrp_feedClosedCaptionSampleToParserAndRenderIfNecessary, 0, (uint64_t)cf, (uint64_t)&v28, a7, (_QWORD *)(DerivedStorage + 56));
        if ((_DWORD)v16)
          goto LABEL_17;
        FigBaseObject = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(DerivedStorage + 56));
        v23 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
        if (!v23)
        {
          v16 = 4294954514;
          goto LABEL_17;
        }
        v16 = v23(FigBaseObject, CFSTR("SourceSampleBufferQueue"), v15, DerivedStorage + 64);
        if ((_DWORD)v16)
          goto LABEL_17;
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterAddListener();
        if (!v14
          || (*(_QWORD *)(DerivedStorage + 128) = a4,
              v24 = FigCFWeakReferenceHolderCreateWithReferencedObject(),
              (*(_QWORD *)(DerivedStorage + 136) = v24) != 0))
        {
          v16 = 0;
          *a8 = cf;
          return v16;
        }
      }
      goto LABEL_26;
    }
  }
LABEL_17:
  if (cf)
    CFRelease(cf);
  return v16;
}

void ccrp_closedCaptionCallbackFromClosedCaptionRenderPipeline(uint64_t a1, const __CFDictionary *a2, CMTime *a3, const void *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t FigBaseObject;
  uint64_t (*v14)(uint64_t, __CFString *, _QWORD, CFTypeRef *);
  int v15;
  CFTypeRef v16;
  BOOL v17;
  char v18;
  char v19;
  __CFDictionary *MutableCopy;
  void (*v21)(const void *, uint64_t, __CFDictionary *, __int128 *, const void *);
  void (*v22)(const void *, uint64_t, const __CFDictionary *, __int128 *, const void *);
  __int128 v23;
  CMTimeEpoch v24;
  __int128 v25;
  CMTimeEpoch epoch;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 40))
  {
    v9 = DerivedStorage;
    v10 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v10)
    {
      v11 = (const void *)v10;
      cf = 0;
      v12 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 144);
      if (!v12)
        goto LABEL_18;
      FigBaseObject = FigBytePumpGetFigBaseObject(v12);
      v14 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
      if (!v14)
        goto LABEL_18;
      v15 = v14(FigBaseObject, CFSTR("HDRVideoPlaybackActive"), *MEMORY[0x1E0C9AE00], &cf);
      v16 = cf;
      if (v15)
        v17 = 0;
      else
        v17 = *MEMORY[0x1E0C9AE50] == (_QWORD)cf;
      v18 = v17;
      if (cf)
        CFRelease(cf);
      v19 = v18 ^ 1;
      if (!a2)
        v19 = 1;
      if ((v19 & 1) == 0)
      {
        MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
        CFDictionarySetValue(MutableCopy, CFSTR("H"), v16);
        v21 = *(void (**)(const void *, uint64_t, __CFDictionary *, __int128 *, const void *))(v9 + 40);
        v25 = *(_OWORD *)&a3->value;
        epoch = a3->epoch;
        v21(a4, a1, MutableCopy, &v25, v11);
        if (MutableCopy)
          CFRelease(MutableCopy);
      }
      else
      {
LABEL_18:
        v22 = *(void (**)(const void *, uint64_t, const __CFDictionary *, __int128 *, const void *))(v9 + 40);
        v23 = *(_OWORD *)&a3->value;
        v24 = a3->epoch;
        v22(a4, a1, a2, &v23, v11);
      }
      CFRelease(v11);
    }
  }
}

uint64_t ccrp_feedClosedCaptionSampleToParserAndRenderIfNecessary(const void *a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage;
  CFTypeRef v5;
  CFTypeRef v6;
  uint64_t v7;
  void (*v8)(uint64_t, CMTime *);
  void (*v9)(uint64_t, CMTime *);
  unsigned int (*v10)(uint64_t, opaqueCMSampleBuffer *);
  CMTime v11;
  CMTime v12;
  CMTime v13;
  CMTime v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v13, 0, sizeof(v13));
  CMTimebaseGetTime(&v13, *(CMTimebaseRef *)(DerivedStorage + 72));
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v5 = CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA2678], 0);
  v6 = CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA26D8], 0);
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
  v7 = *(_QWORD *)(DerivedStorage + 16);
  if (v7)
  {
    if (v5)
    {
      v12 = v13;
      v8 = *(void (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (v8)
      {
        v14 = v12;
        v8(v7, &v14);
      }
    }
    else
    {
      if (v6)
      {
        v11 = v13;
        v9 = *(void (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
        if (v9)
        {
          v14 = v11;
          v9(v7, &v14);
        }
        v7 = *(_QWORD *)(DerivedStorage + 16);
      }
      v10 = *(unsigned int (**)(uint64_t, opaqueCMSampleBuffer *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 8);
      if (v10 && !v10(v7, a2))
        ccrp_feedCaptionDataToParser();
    }
  }
  return MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 8));
}

uint64_t ccrp_resetOutput(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  void (*v7)(uint64_t, CMTime *);
  CMTime v9;
  CMTime v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 128))
  {
    v4 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v4)
    {
      v5 = (const void *)v4;
      (*(void (**)(uint64_t, uint64_t))(DerivedStorage + 128))(a2, v4);
      CFRelease(v5);
    }
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
  v6 = *(_QWORD *)(DerivedStorage + 16);
  if (v6)
  {
    CMTimebaseGetTime(&v9, *(CMTimebaseRef *)(DerivedStorage + 72));
    v7 = *(void (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v7)
    {
      v10 = v9;
      v7(v6, &v10);
    }
  }
  return MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 8));
}

uint64_t figClosedCaptionRenderPipelineInvalidate()
{
  _BYTE *DerivedStorage;
  CFTypeRef *v1;
  CFTypeRef v2;
  uint64_t FigBaseObject;
  uint64_t v4;
  void (*v5)(uint64_t);
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef v8;
  CFTypeRef v9;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v1 = (CFTypeRef *)DerivedStorage;
    if (!*DerivedStorage)
    {
      *DerivedStorage = 1;
      ccrp_tearDownFeedingSource();
      if (v1[8])
      {
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterRemoveListener();
        CFRelease(v1[8]);
        v1[8] = 0;
      }
      v2 = v1[7];
      if (v2)
      {
        FigBaseObject = FigRenderPipelineGetFigBaseObject(v2);
        if (FigBaseObject)
        {
          v4 = FigBaseObject;
          v5 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
          if (v5)
            v5(v4);
        }
        CFRelease(v1[7]);
        v1[7] = 0;
      }
      MEMORY[0x19402EEEC](v1[1]);
      v6 = v1[1];
      v7 = v1[2];
      v1[2] = 0;
      MEMORY[0x19402EF04](v6);
      if (v7)
        CFRelease(v7);
      v8 = v1[9];
      if (v8)
      {
        CFRelease(v8);
        v1[9] = 0;
      }
      v9 = v1[4];
      if (v9)
      {
        CFRelease(v9);
        v1[4] = 0;
      }
    }
  }
  return 0;
}

void figClosedCaptionRenderPipelineFinalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(DerivedStorage + 1) = 1;
  figClosedCaptionRenderPipelineInvalidate();
  v1 = *(const void **)(DerivedStorage + 48);
  if (v1)
    CFRelease(v1);
  v2 = *(const void **)(DerivedStorage + 136);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(DerivedStorage + 144);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 144) = 0;
  }
  if (*(_QWORD *)(DerivedStorage + 8))
  {
    FigSimpleMutexDestroy();
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  v4 = *(void **)(DerivedStorage + 120);
  if (v4)
  {
    os_release(v4);
    *(_QWORD *)(DerivedStorage + 120) = 0;
  }
}

__CFString *figClosedCaptionRenderPipelineCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigClosedCaptionRenderPipeline %p>"), a1);
  return Mutable;
}

uint64_t figClosedCaptionRenderPipelineCopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  _BYTE *DerivedStorage;
  _BYTE *v8;
  uint64_t result;
  const void *v10;
  CFTypeRef v11;
  uint64_t FigBaseObject;
  uint64_t (*v13)(uint64_t, const void *, uint64_t, _QWORD *);

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  if (*DerivedStorage)
    return FigSignalErrorAt();
  if (CFEqual(CFSTR("HDRCrossTalker"), a2))
  {
    v10 = (const void *)*((_QWORD *)v8 + 18);
    if (v10)
      v11 = CFRetain(v10);
    else
      v11 = 0;
    result = 0;
    *a4 = v11;
  }
  else
  {
    FigBaseObject = FigRenderPipelineGetFigBaseObject(*((_QWORD *)v8 + 7));
    v13 = *(uint64_t (**)(uint64_t, const void *, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
    if (v13)
      return v13(FigBaseObject, a2, a3, a4);
    else
      return 4294954514;
  }
  return result;
}

uint64_t figClosedCaptionRenderPipelineSetProperty(uint64_t a1, const void *a2, __CFString *a3)
{
  const __CFString *v3;
  _BYTE *DerivedStorage;
  _BYTE *v7;
  uint64_t result;
  CFTypeID TypeID;
  uint64_t v10;
  NSObject *v11;
  dispatch_source_t v12;
  void *v13;
  CFTypeID v14;
  int v15;
  uint64_t FigBaseObject;
  uint64_t (*v17)(uint64_t, const void *, const __CFString *);
  CFTypeID v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, const __CFString *, CMTime *, uint64_t);
  const __CFString *v21;
  CFTypeID v22;
  const __CFString *v23;
  const void *v24;
  const void *value;
  CFNumberRef v26;
  CMTime v27;
  CMTime v28;
  uint64_t valuePtr;
  void *values;

  v3 = a3;
  values = a3;
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  if (*DerivedStorage)
    return FigSignalErrorAt();
  if (CFEqual(CFSTR("Timebase"), a2))
  {
    if (v3)
    {
      TypeID = CMTimebaseGetTypeID();
      if (TypeID != CFGetTypeID(v3))
        goto LABEL_22;
    }
    if (*((_QWORD *)v7 + 9))
    {
      ccrp_tearDownFeedingSource();
      CFRelease(*((CFTypeRef *)v7 + 9));
    }
    *((_QWORD *)v7 + 9) = v3;
    if (v3)
    {
      CFRetain(v3);
      v10 = CMBaseObjectGetDerivedStorage();
      v11 = dispatch_queue_create("com.apple.coremedia.ccrenderpipeline", 0);
      *(_QWORD *)(v10 + 104) = v11;
      if (!v11)
        goto LABEL_22;
      v12 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, v11);
      *(_QWORD *)(v10 + 112) = v12;
      if (!v12
        || (v13 = (void *)FigCFWeakReferenceHolderCreateWithReferencedObject(),
            dispatch_set_context(*(dispatch_object_t *)(v10 + 112), v13),
            dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(v10 + 112), (dispatch_function_t)ccrp_cancelFeedingHandler), dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v10 + 112), (dispatch_function_t)ccrp_feedingSourceHandler), *(_QWORD *)(v10 + 120) = voucher_copy(), dispatch_resume(*(dispatch_object_t *)(v10 + 112)), CMTimebaseAddTimerDispatchSource(*(CMTimebaseRef *)(v10 + 72), *(dispatch_source_t *)(v10 + 112))))
      {
LABEL_22:
        FigSignalErrorAt();
      }
    }
    goto LABEL_23;
  }
  if (!CFEqual(CFSTR("CCRPP_ClosedCaptionType"), a2))
  {
    if (CFEqual(a2, CFSTR("CCRPP_TextHighlightArray")))
    {
      if (!v3)
      {
LABEL_32:
        v19 = FigCFWeakReferenceHolderCopyReferencedObject();
        memset(&v28, 0, sizeof(v28));
        CMTimebaseGetTime(&v28, *((CMTimebaseRef *)v7 + 9));
        v20 = (void (*)(uint64_t, uint64_t, const __CFString *, CMTime *, uint64_t))*((_QWORD *)v7 + 5);
        v27 = v28;
        v20(a1, 8, v3, &v27, v19);
        if (!v3)
          return 0;
        v21 = v3;
LABEL_34:
        CFRelease(v21);
        return 0;
      }
      v18 = CFGetTypeID(v3);
      if (v18 == CFArrayGetTypeID())
      {
        v3 = (const __CFString *)CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&kQTClosedCaptionTextHighlightArrayKey, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        goto LABEL_32;
      }
    }
    else
    {
      if (!CFEqual(a2, CFSTR("HDRCrossTalker")))
        goto LABEL_23;
      if (v3)
      {
        v22 = CFGetTypeID(v3);
        if (v22 == FigCrossTalkerGetTypeID())
        {
          v23 = (const __CFString *)*((_QWORD *)v7 + 18);
          *((_QWORD *)v7 + 18) = v3;
          CFRetain(v3);
          if (!v23)
            return 0;
          v21 = v23;
          goto LABEL_34;
        }
      }
    }
    return FigSignalErrorAt();
  }
  if (!v3)
    goto LABEL_23;
  v14 = CFGetTypeID(v3);
  if (v14 != CFStringGetTypeID())
    goto LABEL_23;
  valuePtr = 0;
  if (!FigClosedCaptionGetClosedCaptionTypeAndChannelNumber(v3, (int *)&valuePtr + 1, (SInt32 *)&valuePtr))goto LABEL_23;
  MEMORY[0x19402EEEC](*((_QWORD *)v7 + 1));
  if (*((_DWORD *)v7 + 6) == HIDWORD(valuePtr))
    goto LABEL_51;
  v28.value = 0;
  if (HIDWORD(valuePtr) == 1681272888)
  {
    v15 = FigCEA608CaptionDecoderCreate(*MEMORY[0x1E0C9AE00], *((CMFormatDescriptionRef *)v7 + 4), (uint64_t)ccrp_closedCaptionCallbackFromClosedCaptionRenderPipeline, a1, 0, (CFTypeRef *)&v28);
  }
  else
  {
    if (HIDWORD(valuePtr) != 1681338424)
    {
      v24 = (const void *)*((_QWORD *)v7 + 2);
      *((_QWORD *)v7 + 2) = 0;
LABEL_47:
      if (v24)
        CFRelease(v24);
      *((_DWORD *)v7 + 6) = HIDWORD(valuePtr);
      if (v28.value)
        CFRelease((CFTypeRef)v28.value);
LABEL_51:
      v26 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
      FigCaptionDecoderSetProperty(*((_QWORD *)v7 + 2), 0x1E2FFBDB8, (uint64_t)v26);
      if (v26)
        CFRelease(v26);
      goto LABEL_53;
    }
    v15 = FigCEA708CaptionDecoderCreate(*MEMORY[0x1E0C9AE00], *((CMFormatDescriptionRef *)v7 + 4), (uint64_t)ccrp_closedCaptionCallbackFromClosedCaptionRenderPipeline, a1, 0, &v28);
  }
  if (!v15)
  {
    value = (const void *)v28.value;
    v24 = (const void *)*((_QWORD *)v7 + 2);
    *((_QWORD *)v7 + 2) = v28.value;
    if (value)
      CFRetain(value);
    goto LABEL_47;
  }
  FigSignalErrorAt();
LABEL_53:
  MEMORY[0x19402EF04](*((_QWORD *)v7 + 1));
LABEL_23:
  FigBaseObject = FigRenderPipelineGetFigBaseObject(*((_QWORD *)v7 + 7));
  v17 = *(uint64_t (**)(uint64_t, const void *, const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
  if (!v17)
    return 4294954514;
  LODWORD(result) = v17(FigBaseObject, a2, v3);
  if ((_DWORD)result == -12850)
    return 0;
  else
    return result;
}

void ccrp_tearDownFeedingSource()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  void *v4;
  NSObject *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = DerivedStorage;
  v2 = *(NSObject **)(DerivedStorage + 112);
  if (v2)
  {
    CMTimebaseRemoveTimerDispatchSource(*(CMTimebaseRef *)(DerivedStorage + 72), v2);
    dispatch_source_cancel(*(dispatch_source_t *)(v1 + 112));
    v3 = *(NSObject **)(v1 + 112);
    if (v3)
    {
      dispatch_release(v3);
      *(_QWORD *)(v1 + 112) = 0;
    }
    v4 = *(void **)(v1 + 120);
    if (v4)
    {
      os_release(v4);
      *(_QWORD *)(v1 + 120) = 0;
    }
  }
  v5 = *(NSObject **)(v1 + 104);
  if (v5)
  {
    dispatch_release(v5);
    *(_QWORD *)(v1 + 104) = 0;
  }
}

uint64_t FigCaptionDecoderSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  FigBytePumpGetFigBaseObject(a1);
  v6 = v5;
  result = CMBaseObjectGetVTable();
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(result + 8) + 56);
  if (v8)
    return v8(v6, a2, a3);
  return result;
}

void ccrp_cancelFeedingHandler(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

void ccrp_feedingSourceHandler(void *a1)
{
  uint64_t v1;
  const void *v2;
  uint64_t DerivedStorage;
  void *v4;

  v1 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v1)
  {
    v2 = (const void *)v1;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    os_retain(*(void **)(DerivedStorage + 120));
    voucher_adopt();
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
    if (*(_QWORD *)(DerivedStorage + 16))
      ccrp_feedCaptionDataToParser();
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 8));
    v4 = (void *)voucher_adopt();
    os_release(v4);
    CFRelease(v2);
  }
}

uint64_t ccrp_feedCaptionDataToParser()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v3;
  uint64_t result;
  uint64_t (*v5)(uint64_t, CMTime *, CMTime *);
  OpaqueCMTimebase *v6;
  NSObject *v7;
  CMTime fireTime;
  CMTime v9;
  CMTime v10;
  CMTime v11;
  CMTime rhs;
  CMTime lhs;
  os_log_type_t type;
  int v15;
  CMTime v16;
  CMTime v17;
  CMTime v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = DerivedStorage;
  v17 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v16 = v17;
  if (*(_BYTE *)(DerivedStorage + 1))
  {
    *(_BYTE *)(DerivedStorage + 1) = 0;
    CMFormatDescriptionGetMediaType(*(CMFormatDescriptionRef *)(DerivedStorage + 32));
    CMFormatDescriptionGetMediaSubType(*(CMFormatDescriptionRef *)(v1 + 32));
    if (dword_1EE2A2928)
    {
      v15 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  CMTimebaseGetTime(&lhs, *(CMTimebaseRef *)(v1 + 72));
  rhs = *(CMTime *)(v1 + 80);
  CMTimeAdd(&v17, &lhs, &rhs);
  v3 = *(_QWORD *)(v1 + 16);
  v11 = v17;
  result = CMBaseObjectGetVTable();
  v5 = *(uint64_t (**)(uint64_t, CMTime *, CMTime *))(*(_QWORD *)(result + 16) + 16);
  if (v5)
  {
    v18 = v11;
    result = v5(v3, &v18, &v16);
    if (!(_DWORD)result && (v16.flags & 1) != 0)
    {
      v10 = v16;
      v9 = *(CMTime *)(v1 + 80);
      CMTimeSubtract(&v18, &v10, &v9);
      v16 = v18;
      v6 = *(OpaqueCMTimebase **)(v1 + 72);
      v7 = *(NSObject **)(v1 + 112);
      fireTime = v18;
      result = CMTimebaseSetTimerDispatchSourceNextFireTime(v6, v7, &fireTime, 0);
      if ((_DWORD)result)
        return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t FigCaptionCommandCreatePropertyList(int a1, const __CFDictionary *a2, CFDictionaryRef *a3)
{
  const __CFAllocator *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  CFDictionaryRef v9;
  uint64_t v10;
  void **p_values;
  int valuePtr;
  void *values;
  CFDictionaryRef v15;
  void *keys;
  const __CFString *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  valuePtr = a1;
  v15 = 0;
  keys = CFSTR("command");
  v17 = 0;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  if (!values)
    return FigSignalErrorAt();
  if (a2)
  {
    v17 = CFSTR("data");
    v6 = fcc_CommandDictToPropertyList(a2, &v15);
    if ((_DWORD)v6)
    {
      v7 = v6;
      v8 = 1;
      goto LABEL_11;
    }
    v8 = 2;
  }
  else
  {
    v8 = 1;
  }
  v9 = CFDictionaryCreate(v5, (const void **)&keys, (const void **)&values, v8, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *a3 = v9;
  if (v9)
    v7 = 0;
  else
    v7 = FigSignalErrorAt();
LABEL_11:
  v10 = v8;
  p_values = &values;
  do
  {
    if (*p_values)
      CFRelease(*p_values);
    ++p_values;
    --v10;
  }
  while (v10);
  return v7;
}

uint64_t fcc_CommandDictToPropertyList(const __CFDictionary *a1, CFDictionaryRef *a2)
{
  CFIndex Count;
  const void **v5;
  const void **v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  CFTypeRef *v10;
  _BYTE *v11;
  CFIndex v12;
  uint64_t v13;
  CFDictionaryRef v14;
  unsigned __int8 *v15;
  CFTypeRef *v16;

  Count = CFDictionaryGetCount(a1);
  v5 = (const void **)malloc_type_calloc(8uLL, Count, 0xCB23FBB2uLL);
  v6 = (const void **)malloc_type_calloc(8uLL, Count, 0x306CE7A9uLL);
  v7 = malloc_type_calloc(1uLL, Count, 0xF1C850EBuLL);
  v8 = v7;
  v9 = 0;
  if (v5 && v6 && v7)
  {
    CFDictionaryGetKeysAndValues(a1, v5, v6);
    if (Count >= 1)
    {
      v10 = v6;
      v11 = v8;
      v12 = Count;
      do
      {
        v13 = fcc_CommandItemToPropertyList(v10, v11);
        if ((_DWORD)v13)
          goto LABEL_11;
        ++v11;
        ++v10;
      }
      while (--v12);
    }
    v14 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v5, v6, Count, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *a2 = v14;
    if (!v14)
    {
      v13 = FigSignalErrorAt();
LABEL_11:
      v9 = v13;
      goto LABEL_12;
    }
    v9 = 0;
  }
LABEL_12:
  if (v6 && v8 && Count >= 1)
  {
    v15 = v8;
    v16 = v6;
    do
    {
      if (*v15++)
        CFRelease(*v16);
      ++v16;
      --Count;
    }
    while (Count);
  }
  free(v5);
  free(v6);
  free(v8);
  return v9;
}

uint64_t FigSubtitleSampleCreatePropertyList(const __CFDictionary *a1, int a2, int a3, CFDictionaryRef *a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  CFAllocatorRef *v15;
  const __CFArray *v17;
  CFIndex Count;
  CFAllocatorRef *v19;
  uint64_t v20;
  const __CFAllocator *v21;
  CFMutableArrayRef Mutable;
  __CFArray *v23;
  CFIndex v24;
  const __CFAttributedString *ValueAtIndex;
  uint64_t v26;
  void *v27;
  __CFDictionary *v28;
  CFMutableDictionaryRef MutableCopy;
  unsigned int v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  unsigned int v35;
  CFDictionaryRef v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  CFDictionaryRef *v41;
  void *value;
  void *values[2];
  __int128 v44;
  void *keys[2];
  __int128 v46;
  uint64_t v47;
  CGRect v48;

  v47 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)keys = 0u;
  v46 = 0u;
  *(_OWORD *)values = 0u;
  v44 = 0u;
  v15 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (!a1
    || (v17 = (const __CFArray *)CFDictionaryGetValue(a1, CFSTR("SubtitleContent")),
        CFDictionaryGetValue(a1, CFSTR("SubtitleSerializedCaptionGroup")),
        FigCFDictionaryGetCount() < 1))
  {
    v30 = 0;
    v23 = 0;
    goto LABEL_16;
  }
  if (!v17)
  {
    MutableCopy = CFDictionaryCreateMutableCopy(*v15, 0, a1);
    v23 = 0;
    if (MutableCopy)
      goto LABEL_15;
LABEL_33:
    v26 = FigSignalErrorAt();
    goto LABEL_34;
  }
  v41 = a4;
  Count = CFArrayGetCount(v17);
  v19 = v15;
  v20 = Count;
  v21 = *v19;
  Mutable = CFArrayCreateMutable(*v19, 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return FigSignalErrorAt();
  v23 = Mutable;
  if (v20 >= 1)
  {
    v24 = 0;
    while (1)
    {
      value = 0;
      ValueAtIndex = (const __CFAttributedString *)CFArrayGetValueAtIndex(v17, v24);
      v26 = fcc_CommandAttributedStringToPropertyList(ValueAtIndex, (CFDictionaryRef *)&value);
      if ((_DWORD)v26)
        break;
      v27 = value;
      CFArrayAppendValue(v23, value);
      if (v27)
        CFRelease(v27);
      if (v20 == ++v24)
        goto LABEL_11;
    }
LABEL_34:
    v37 = v26;
    v35 = 0;
    if (!v23)
      goto LABEL_27;
    goto LABEL_26;
  }
LABEL_11:
  v28 = CFDictionaryCreateMutableCopy(v21, 0, a1);
  if (!v28)
    goto LABEL_33;
  MutableCopy = v28;
  CFDictionarySetValue(v28, CFSTR("SubtitleContent"), v23);
  a4 = v41;
  v15 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
LABEL_15:
  keys[0] = CFSTR("subtitleSample");
  values[0] = MutableCopy;
  v30 = 1;
LABEL_16:
  *(_QWORD *)((unint64_t)keys | (8 * v30)) = CFSTR("forcedSubtitle");
  v31 = (const void *)*MEMORY[0x1E0C9AE50];
  v32 = (const void *)*MEMORY[0x1E0C9AE40];
  if (a2)
    v33 = (const void *)*MEMORY[0x1E0C9AE50];
  else
    v33 = (const void *)*MEMORY[0x1E0C9AE40];
  *(_QWORD *)((unint64_t)values & 0xFFFFFFFFFFFFFFF7 | (8 * (v30 & 1))) = CFRetain(v33);
  keys[v30 + 1] = CFSTR("obeySubtitleFormatting");
  if (a3)
    v34 = v31;
  else
    v34 = v32;
  values[v30 + 1] = (void *)CFRetain(v34);
  keys[v30 | 2] = CFSTR("textBox");
  v48.origin.x = a5;
  v48.origin.y = a6;
  v48.size.width = a7;
  v48.size.height = a8;
  values[v30 | 2] = CGRectCreateDictionaryRepresentation(v48);
  v35 = v30 + 3;
  v36 = CFDictionaryCreate(*v15, (const void **)keys, (const void **)values, v30 + 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *a4 = v36;
  if (v36)
  {
    v37 = 0;
    if (!v23)
      goto LABEL_27;
    goto LABEL_26;
  }
  v37 = FigSignalErrorAt();
  if (v23)
LABEL_26:
    CFRelease(v23);
LABEL_27:
  if (v35)
  {
    v38 = v35;
    v39 = values;
    do
    {
      if (*v39)
        CFRelease(*v39);
      ++v39;
      --v38;
    }
    while (v38);
  }
  return v37;
}

uint64_t fcc_CommandAttributedStringToPropertyList(const __CFAttributedString *a1, CFDictionaryRef *a2)
{
  CFIndex Length;
  const __CFAllocator *v5;
  CFMutableArrayRef Mutable;
  CFIndex v7;
  CFDictionaryRef AttributesAndLongestEffectiveRange;
  const __CFDictionary *v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  uint64_t v14;
  void *v15;
  CFDictionaryRef v16;
  uint64_t v17;
  void *value;
  CFRange longestEffectiveRange;
  void *values[3];
  void *keys[4];
  CFRange v23;

  keys[3] = *(void **)MEMORY[0x1E0C80C00];
  Length = CFAttributedStringGetLength(a1);
  values[0] = CFSTR("isCFAttributedString");
  keys[0] = CFSTR("isCFAttributedString");
  keys[1] = CFSTR("string");
  values[1] = (void *)CFAttributedStringGetString(a1);
  keys[2] = CFSTR("attributedTriplets");
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  values[2] = Mutable;
  if (Length >= 1)
  {
    v7 = 0;
    do
    {
      longestEffectiveRange.location = 0;
      longestEffectiveRange.length = 0;
      v23.location = 0;
      v23.length = Length;
      AttributesAndLongestEffectiveRange = CFAttributedStringGetAttributesAndLongestEffectiveRange(a1, v7, v23, &longestEffectiveRange);
      value = AttributesAndLongestEffectiveRange;
      if (AttributesAndLongestEffectiveRange)
      {
        v9 = AttributesAndLongestEffectiveRange;
        v10 = CFNumberCreate(v5, kCFNumberCFIndexType, &longestEffectiveRange);
        if (!v10)
          goto LABEL_12;
        v11 = v10;
        CFArrayAppendValue(Mutable, v10);
        CFRelease(v11);
        v12 = CFNumberCreate(v5, kCFNumberCFIndexType, &longestEffectiveRange.length);
        if (!v12)
          goto LABEL_12;
        v13 = v12;
        CFArrayAppendValue(Mutable, v12);
        CFRelease(v13);
        v14 = fcc_CommandDictToPropertyList(v9, (CFDictionaryRef *)&value);
        if ((_DWORD)v14)
          goto LABEL_13;
        v15 = value;
        CFArrayAppendValue(Mutable, value);
        CFRelease(v15);
      }
      v7 = longestEffectiveRange.length + longestEffectiveRange.location;
    }
    while (longestEffectiveRange.length + longestEffectiveRange.location < Length);
  }
  v16 = CFDictionaryCreate(v5, (const void **)keys, (const void **)values, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *a2 = v16;
  if (v16)
  {
    v17 = 0;
    if (!Mutable)
      return v17;
    goto LABEL_14;
  }
LABEL_12:
  v14 = FigSignalErrorAt();
LABEL_13:
  v17 = v14;
  if (Mutable)
LABEL_14:
    CFRelease(Mutable);
  return v17;
}

const __CFDictionary *FigCaptionCommandCreateFromPropertyList(const void *a1, void *a2, CFDictionaryRef *a3)
{
  CFTypeID TypeID;
  const void *Value;
  const void *v8;
  CFTypeID v9;
  const __CFDictionary *result;
  const __CFDictionary *v11;
  CFTypeID v12;

  if (!a2)
    return (const __CFDictionary *)FigSignalErrorAt();
  if (!a3)
    return (const __CFDictionary *)FigSignalErrorAt();
  *a3 = 0;
  if (!a1)
    return (const __CFDictionary *)FigSignalErrorAt();
  TypeID = CFDictionaryGetTypeID();
  if (TypeID != CFGetTypeID(a1))
    return (const __CFDictionary *)FigSignalErrorAt();
  Value = CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("command"));
  if (!Value)
    return (const __CFDictionary *)FigSignalErrorAt();
  v8 = Value;
  v9 = CFNumberGetTypeID();
  if (v9 != CFGetTypeID(v8))
    return (const __CFDictionary *)FigSignalErrorAt();
  CFNumberGetValue((CFNumberRef)v8, kCFNumberSInt32Type, a2);
  result = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("data"));
  if (result)
  {
    v11 = result;
    v12 = CFDictionaryGetTypeID();
    if (v12 == CFGetTypeID(v11))
      return (const __CFDictionary *)fcc_CommandPropertyListToDict(v11, a3);
    return (const __CFDictionary *)FigSignalErrorAt();
  }
  *a3 = 0;
  return result;
}

uint64_t fcc_CommandPropertyListToDict(const __CFDictionary *a1, CFDictionaryRef *a2)
{
  const void *Value;
  const void *v5;
  const void *v6;
  CFTypeID TypeID;
  const void *v8;
  const void *v9;
  CFTypeID v10;
  const void *v11;
  const void *v12;
  CFTypeID v13;
  const void *v14;
  const void *v15;
  CFTypeID v16;
  CGColorRef v17;
  uint64_t v18;
  const void *v19;
  CFIndex Count;
  const void **v22;
  const void **v23;
  _BYTE *v24;
  _BYTE *v25;
  CFTypeRef *v26;
  _BYTE *v27;
  CFIndex v28;
  uint64_t v29;
  CFDictionaryRef v30;
  unsigned __int8 *v31;
  CFTypeRef *v32;
  CGFloat valuePtr;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];

  v37[1] = *MEMORY[0x1E0C80C00];
  Value = CFDictionaryGetValue(a1, CFSTR("isCGColor"));
  if (!Value || !CFEqual(Value, CFSTR("isCGColor")))
  {
    v19 = CFDictionaryGetValue(a1, CFSTR("isCFAttributedString"));
    if (v19 && CFEqual(v19, CFSTR("isCFAttributedString")))
      return fcc_CommandPropertyListToAttributedString(a1, a2);
    Count = CFDictionaryGetCount(a1);
    v22 = (const void **)malloc_type_calloc(8uLL, Count, 0x6081EDB3uLL);
    v23 = (const void **)malloc_type_calloc(8uLL, Count, 0xA4A47022uLL);
    v24 = malloc_type_calloc(1uLL, Count, 0x33BA1C08uLL);
    v25 = v24;
    v18 = 0;
    if (!v22 || !v23 || !v24)
      goto LABEL_30;
    CFDictionaryGetKeysAndValues(a1, v22, v23);
    if (Count < 1)
    {
LABEL_26:
      v30 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v22, v23, Count, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      *a2 = v30;
      if (v30)
      {
        v18 = 0;
        goto LABEL_30;
      }
      v29 = FigSignalErrorAt();
    }
    else
    {
      v26 = v23;
      v27 = v25;
      v28 = Count;
      while (1)
      {
        v29 = fcc_CommandPropertyListToItem(v26, v27);
        if ((_DWORD)v29)
          break;
        ++v27;
        ++v26;
        if (!--v28)
          goto LABEL_26;
      }
    }
    v18 = v29;
LABEL_30:
    if (v23 && v25 && Count >= 1)
    {
      v31 = v25;
      v32 = v23;
      do
      {
        if (*v31++)
          CFRelease(*v32);
        ++v32;
        --Count;
      }
      while (Count);
    }
    free(v22);
    free(v23);
    free(v25);
    return v18;
  }
  if (!fcc_CommandPropertyListToColor_sColorspace)
    fcc_CommandPropertyListToColor_sColorspace = (uint64_t)CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
  v5 = CFDictionaryGetValue(a1, CFSTR("red"));
  if (!v5)
    return FigSignalErrorAt();
  v6 = v5;
  TypeID = CFNumberGetTypeID();
  if (TypeID != CFGetTypeID(v6))
    return FigSignalErrorAt();
  CFNumberGetValue((CFNumberRef)v6, kCFNumberDoubleType, &valuePtr);
  v8 = CFDictionaryGetValue(a1, CFSTR("green"));
  if (!v8)
    return FigSignalErrorAt();
  v9 = v8;
  v10 = CFNumberGetTypeID();
  if (v10 != CFGetTypeID(v9))
    return FigSignalErrorAt();
  CFNumberGetValue((CFNumberRef)v9, kCFNumberDoubleType, &v35);
  v11 = CFDictionaryGetValue(a1, CFSTR("blue"));
  if (!v11)
    return FigSignalErrorAt();
  v12 = v11;
  v13 = CFNumberGetTypeID();
  if (v13 != CFGetTypeID(v12))
    return FigSignalErrorAt();
  CFNumberGetValue((CFNumberRef)v12, kCFNumberDoubleType, &v36);
  v14 = CFDictionaryGetValue(a1, CFSTR("alpha"));
  if (v14
    && (v15 = v14, v16 = CFNumberGetTypeID(), v16 == CFGetTypeID(v15))
    && (CFNumberGetValue((CFNumberRef)v15, kCFNumberDoubleType, v37),
        v17 = CGColorCreate((CGColorSpaceRef)fcc_CommandPropertyListToColor_sColorspace, &valuePtr),
        (*a2 = v17) != 0))
  {
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigSubtitleSampleCreateFromPropertyList(const void *a1, __CFDictionary **a2, Boolean *a3, Boolean *a4, CGRect *a5)
{
  CFTypeID TypeID;
  const __CFBoolean *v11;
  const __CFBoolean *v12;
  CFTypeID v13;
  const __CFBoolean *v14;
  const __CFBoolean *v15;
  CFTypeID v16;
  const __CFDictionary *v17;
  const __CFDictionary *v18;
  CFTypeID v19;
  const __CFDictionary *v20;
  uint64_t v21;
  const __CFAllocator *v22;
  const __CFDictionary *MutableCopy;
  __CFDictionary *v24;
  const __CFArray *v25;
  const __CFArray *v26;
  CFIndex Count;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v29;
  CFIndex v30;
  const __CFDictionary *ValueAtIndex;
  uint64_t v32;
  void *v33;
  void *value;

  if (!a1)
    return FigSignalErrorAt();
  TypeID = CFDictionaryGetTypeID();
  if (TypeID != CFGetTypeID(a1))
    return FigSignalErrorAt();
  v11 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("forcedSubtitle"));
  if (a3)
  {
    v12 = v11;
    if (v11)
    {
      v13 = CFBooleanGetTypeID();
      if (v13 == CFGetTypeID(v12))
        *a3 = CFBooleanGetValue(v12);
    }
  }
  v14 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("obeySubtitleFormatting"));
  if (a4)
  {
    v15 = v14;
    if (v14)
    {
      v16 = CFBooleanGetTypeID();
      if (v16 == CFGetTypeID(v15))
        *a4 = CFBooleanGetValue(v15);
    }
  }
  v17 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("textBox"));
  if (a5)
  {
    v18 = v17;
    if (v17)
    {
      v19 = CFDictionaryGetTypeID();
      if (v19 == CFGetTypeID(v18))
        CGRectMakeWithDictionaryRepresentation(v18, a5);
    }
  }
  v20 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("subtitleSample"));
  v21 = 0;
  if (!a2 || !v20)
    return v21;
  v22 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v20);
  if (!MutableCopy)
    return FigSignalErrorAt();
  v24 = MutableCopy;
  v25 = (const __CFArray *)CFDictionaryGetValue(MutableCopy, CFSTR("SubtitleContent"));
  if (!v25)
  {
    v29 = 0;
LABEL_27:
    v21 = 0;
    *a2 = v24;
    v24 = 0;
    if (!v29)
      goto LABEL_29;
    goto LABEL_28;
  }
  v26 = v25;
  Count = CFArrayGetCount(v25);
  Mutable = CFArrayCreateMutable(v22, 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    v21 = FigSignalErrorAt();
    goto LABEL_30;
  }
  v29 = Mutable;
  if (Count < 1)
  {
LABEL_24:
    CFDictionarySetValue(v24, CFSTR("SubtitleContent"), v29);
    goto LABEL_27;
  }
  v30 = 0;
  while (1)
  {
    value = 0;
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v26, v30);
    v32 = fcc_CommandPropertyListToAttributedString(ValueAtIndex, (__CFAttributedString **)&value);
    if ((_DWORD)v32)
      break;
    v33 = value;
    CFArrayAppendValue(v29, value);
    CFRelease(v33);
    if (Count == ++v30)
      goto LABEL_24;
  }
  v21 = v32;
LABEL_28:
  CFRelease(v29);
LABEL_29:
  if (v24)
LABEL_30:
    CFRelease(v24);
  return v21;
}

uint64_t fcc_CommandPropertyListToAttributedString(const __CFDictionary *a1, __CFAttributedString **a2)
{
  const __CFString *Value;
  const __CFString *v5;
  CFTypeID TypeID;
  const void *v7;
  const void *v8;
  CFTypeID v9;
  __CFAttributedString *Mutable;
  __CFAttributedString *v11;
  CFIndex Count;
  uint64_t v13;
  CFIndex v14;
  const void *ValueAtIndex;
  const void *v16;
  CFTypeID v17;
  const void *v18;
  const void *v19;
  CFTypeID v20;
  CFTypeID v21;
  uint64_t v22;
  CFTypeRef v23;
  uint64_t v24;
  uint64_t valuePtr;
  CFTypeRef cf;
  CFRange v28;
  CFRange v29;

  Value = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("string"));
  if (!Value)
    return FigSignalErrorAt();
  v5 = Value;
  TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(v5))
    return FigSignalErrorAt();
  v7 = CFDictionaryGetValue(a1, CFSTR("attributedTriplets"));
  if (!v7)
    return FigSignalErrorAt();
  v8 = v7;
  v9 = CFArrayGetTypeID();
  if (v9 != CFGetTypeID(v8))
    return FigSignalErrorAt();
  Mutable = CFAttributedStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (!Mutable)
    return FigSignalErrorAt();
  v11 = Mutable;
  CFAttributedStringBeginEditing(Mutable);
  v28.location = 0;
  v28.length = 0;
  CFAttributedStringReplaceString(v11, v28, v5);
  Count = CFArrayGetCount((CFArrayRef)v8);
  if (Count < 3)
  {
LABEL_16:
    CFAttributedStringEndEditing(v11);
    v24 = 0;
    *a2 = v11;
  }
  else
  {
    v13 = Count / 3;
    v14 = 2;
    while (1)
    {
      valuePtr = 0;
      cf = 0;
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v8, v14 - 2);
      if (!ValueAtIndex)
        break;
      v16 = ValueAtIndex;
      v17 = CFNumberGetTypeID();
      if (v17 != CFGetTypeID(v16))
        break;
      CFNumberGetValue((CFNumberRef)v16, kCFNumberIntType, (char *)&valuePtr + 4);
      v18 = CFArrayGetValueAtIndex((CFArrayRef)v8, v14 - 1);
      if (!v18)
        break;
      v19 = v18;
      v20 = CFNumberGetTypeID();
      if (v20 != CFGetTypeID(v19))
        break;
      CFNumberGetValue((CFNumberRef)v19, kCFNumberIntType, &valuePtr);
      cf = CFArrayGetValueAtIndex((CFArrayRef)v8, v14);
      if (!cf)
        break;
      v21 = CFDictionaryGetTypeID();
      if (v21 != CFGetTypeID(cf))
        break;
      v22 = fcc_CommandPropertyListToDict((const __CFDictionary *)cf, (CFDictionaryRef *)&cf);
      if ((_DWORD)v22)
        goto LABEL_20;
      v29.length = (int)valuePtr;
      v29.location = SHIDWORD(valuePtr);
      v23 = cf;
      CFAttributedStringSetAttributes(v11, v29, (CFDictionaryRef)cf, 0);
      CFRelease(v23);
      v14 += 3;
      if (!--v13)
        goto LABEL_16;
    }
    v22 = FigSignalErrorAt();
LABEL_20:
    v24 = v22;
    CFRelease(v11);
  }
  return v24;
}

uint64_t FigSubtitleSampleInsertInfoForRenderer(__CFDictionary *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, uint64_t a10, int a11)
{
  CGFloat v20;
  CFDictionaryRef DictionaryRepresentation;
  CFDictionaryRef v22;
  const void **v23;
  CGRect v25;

  if (!a1)
    return FigSignalErrorAt();
  if (!a11 || (v20 = a2, CGRectIsNull(*(CGRect *)&a2)))
  {
    v20 = a6;
    a3 = a7;
    a4 = a8;
    a5 = a9;
  }
  v25.origin.x = v20;
  v25.origin.y = a3;
  v25.size.width = a4;
  v25.size.height = a5;
  DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v25);
  if (!DictionaryRepresentation)
    return FigSignalErrorAt();
  v22 = DictionaryRepresentation;
  CFDictionarySetValue(a1, CFSTR("kFigSubtitleRenderer_TextBox"), DictionaryRepresentation);
  v23 = (const void **)MEMORY[0x1E0C9AE40];
  if (a11)
    v23 = (const void **)MEMORY[0x1E0C9AE50];
  CFDictionarySetValue(a1, CFSTR("kFigSubtitleRenderer_ObeySubtitleFormatting"), *v23);
  CFRelease(v22);
  return 0;
}

uint64_t FigSubtitleSampleCreateFromPropertyListAndInsertInfoForRenderer(const void *a1, __CFDictionary **a2, _BYTE *a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  CGSize v13;
  uint64_t v14;
  __CFDictionary *MutableCopy;
  __CFDictionary *v16;
  uint64_t inserted;
  uint64_t v18;
  CGRect v20;
  __int16 v21;
  CFDictionaryRef theDict;

  theDict = 0;
  v21 = 0;
  v13 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
  v20.origin = (CGPoint)*MEMORY[0x1E0C9D628];
  v20.size = v13;
  v14 = FigSubtitleSampleCreateFromPropertyList(a1, &theDict, (Boolean *)&v21 + 1, (Boolean *)&v21, &v20);
  if ((_DWORD)v14)
  {
    v18 = v14;
    v16 = 0;
    goto LABEL_9;
  }
  if (theDict)
  {
    MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theDict);
    v16 = MutableCopy;
    if (MutableCopy)
    {
      inserted = FigSubtitleSampleInsertInfoForRenderer(MutableCopy, v20.origin.x, v20.origin.y, v20.size.width, v20.size.height, a4, a5, a6, a7, 0, v21);
      if (!(_DWORD)inserted)
      {
        if (!a2)
          goto LABEL_7;
        goto LABEL_6;
      }
    }
    else
    {
      inserted = FigSignalErrorAt();
    }
    v18 = inserted;
    goto LABEL_9;
  }
  v16 = 0;
  if (a2)
  {
LABEL_6:
    *a2 = v16;
    v16 = 0;
  }
LABEL_7:
  v18 = 0;
  if (a3)
    *a3 = HIBYTE(v21);
LABEL_9:
  if (theDict)
    CFRelease(theDict);
  if (v16)
    CFRelease(v16);
  return v18;
}

uint64_t fcc_CommandItemToPropertyList(CFTypeRef *a1, _BYTE *a2)
{
  CFTypeID TypeID;
  uint64_t v5;
  uint64_t v6;
  CFTypeID v7;
  const __CFArray *v8;
  CFIndex Count;
  char *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  CFIndex v13;
  unsigned __int8 *v14;
  char *v15;
  uint64_t v16;
  CFArrayRef v17;
  CFTypeID v18;
  CGColor *v19;
  size_t NumberOfComponents;
  const CGFloat *Components;
  const CGFloat *v22;
  uint64_t v23;
  const __CFAllocator *v24;
  CFNumberRef v25;
  CFDictionaryRef v26;
  CFTypeID v27;
  uint64_t i;
  const void *v29;
  CFTypeRef *v30;
  unsigned __int8 *v31;
  void *values;
  __int128 v35;
  __int128 v36;
  void *keys;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  CFRange v41;

  v40 = *MEMORY[0x1E0C80C00];
  TypeID = CFDictionaryGetTypeID();
  if (TypeID == CFGetTypeID(*a1))
  {
    v5 = fcc_CommandDictToPropertyList(*a1, a1);
LABEL_3:
    v6 = v5;
    if (!(_DWORD)v5)
      goto LABEL_40;
    return v6;
  }
  v7 = CFArrayGetTypeID();
  if (v7 == CFGetTypeID(*a1))
  {
    v8 = (const __CFArray *)*a1;
    Count = CFArrayGetCount((CFArrayRef)*a1);
    v10 = (char *)malloc_type_calloc(8uLL, Count, 0xEAD35C01uLL);
    v11 = (unsigned __int8 *)malloc_type_calloc(1uLL, Count, 0xB6AFEE03uLL);
    v12 = v11;
    v6 = 0;
    if (!v10 || !v11)
    {
LABEL_38:
      free(v10);
      free(v12);
      goto LABEL_39;
    }
    v41.location = 0;
    v41.length = Count;
    CFArrayGetValues(v8, v41, (const void **)v10);
    if (Count < 1)
    {
LABEL_12:
      v17 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)v10, Count, MEMORY[0x1E0C9B378]);
      *a1 = v17;
      if (v17)
      {
        v6 = 0;
        goto LABEL_33;
      }
      v16 = FigSignalErrorAt();
    }
    else
    {
      v13 = Count;
      v14 = v12;
      v15 = v10;
      while (1)
      {
        v16 = fcc_CommandItemToPropertyList(v15, v14);
        if ((_DWORD)v16)
          break;
        v15 += 8;
        ++v14;
        if (!--v13)
          goto LABEL_12;
      }
    }
    v6 = v16;
LABEL_33:
    if (Count >= 1)
    {
      v30 = (CFTypeRef *)v10;
      v31 = v12;
      do
      {
        if (*v31++)
          CFRelease(*v30);
        ++v30;
        --Count;
      }
      while (Count);
    }
    goto LABEL_38;
  }
  v18 = CGColorGetTypeID();
  if (v18 != CFGetTypeID(*a1))
  {
    v27 = CFAttributedStringGetTypeID();
    if (v27 != CFGetTypeID(*a1))
      return 0;
    v5 = fcc_CommandAttributedStringToPropertyList(*a1, a1);
    goto LABEL_3;
  }
  v19 = (CGColor *)*a1;
  NumberOfComponents = CGColorGetNumberOfComponents((CGColorRef)*a1);
  Components = CGColorGetComponents(v19);
  v39 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  keys = CFSTR("isCGColor");
  values = CFSTR("isCGColor");
  if (NumberOfComponents == 4)
  {
    v22 = Components;
    v23 = 0;
    *(_QWORD *)&v38 = CFSTR("red");
    *((_QWORD *)&v38 + 1) = CFSTR("green");
    *(_QWORD *)&v39 = CFSTR("blue");
    *((_QWORD *)&v39 + 1) = CFSTR("alpha");
    v24 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    while (1)
    {
      v25 = CFNumberCreate(v24, kCFNumberDoubleType, &v22[v23]);
      *(void **)((char *)&values + v23 * 8 + 8) = v25;
      if (!v25)
        break;
      if (++v23 == 4)
      {
        v26 = CFDictionaryCreate(v24, (const void **)&keys, (const void **)&values, 5, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        *a1 = v26;
        if (!v26)
          break;
        v6 = 0;
        goto LABEL_26;
      }
    }
  }
  v6 = FigSignalErrorAt();
LABEL_26:
  for (i = 8; i != 40; i += 8)
  {
    v29 = *(void **)((char *)&values + i);
    if (v29)
      CFRelease(v29);
  }
LABEL_39:
  if (!(_DWORD)v6)
  {
LABEL_40:
    v6 = 0;
    *a2 = 1;
  }
  return v6;
}

uint64_t fcc_CommandPropertyListToItem(CFTypeRef *a1, _BYTE *a2)
{
  CFTypeID TypeID;
  uint64_t v5;
  CFTypeID v6;
  const __CFArray *v7;
  CFIndex Count;
  const void **v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  CFIndex v12;
  unsigned __int8 *v13;
  const void **v14;
  uint64_t v15;
  CFArrayRef v16;
  CFTypeRef *v17;
  unsigned __int8 *v18;
  CFRange v21;

  TypeID = CFDictionaryGetTypeID();
  if (TypeID == CFGetTypeID(*a1))
  {
    v5 = fcc_CommandPropertyListToDict(*a1, a1);
    if (!(_DWORD)v5)
      goto LABEL_22;
    return v5;
  }
  v6 = CFArrayGetTypeID();
  if (v6 != CFGetTypeID(*a1))
    return 0;
  v7 = (const __CFArray *)*a1;
  Count = CFArrayGetCount((CFArrayRef)*a1);
  v9 = (const void **)malloc_type_calloc(8uLL, Count, 0xCEEDCD4EuLL);
  v10 = (unsigned __int8 *)malloc_type_calloc(1uLL, Count, 0x76BB9806uLL);
  v11 = v10;
  v5 = 0;
  if (v9 && v10)
  {
    v21.location = 0;
    v21.length = Count;
    CFArrayGetValues(v7, v21, v9);
    if (Count < 1)
    {
LABEL_11:
      v16 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v9, Count, MEMORY[0x1E0C9B378]);
      *a1 = v16;
      if (v16)
      {
        v5 = 0;
        goto LABEL_16;
      }
      v15 = FigSignalErrorAt();
    }
    else
    {
      v12 = Count;
      v13 = v11;
      v14 = v9;
      while (1)
      {
        v15 = fcc_CommandPropertyListToItem(v14, v13);
        if ((_DWORD)v15)
          break;
        ++v14;
        ++v13;
        if (!--v12)
          goto LABEL_11;
      }
    }
    v5 = v15;
LABEL_16:
    if (Count >= 1)
    {
      v17 = v9;
      v18 = v11;
      do
      {
        if (*v18++)
          CFRelease(*v17);
        ++v17;
        --Count;
      }
      while (Count);
    }
  }
  free(v9);
  free(v11);
  if (!(_DWORD)v5)
  {
LABEL_22:
    v5 = 0;
    *a2 = 1;
  }
  return v5;
}

uint64_t FigCaptionRendererBasicInputCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  _QWORD *DerivedStorage;
  dispatch_queue_t v11;
  char __str[256];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (!a1 || !a2 || !a3 || !a5)
    return FigSignalErrorAt();
  *a5 = 0;
  FigCaptionRendererInputGetClassID();
  v9 = CMDerivedObjectCreate();
  if (!(_DWORD)v9)
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    DerivedStorage[2] = a1;
    DerivedStorage[3] = a2;
    DerivedStorage[4] = a3;
    DerivedStorage[7] = 0;
    DerivedStorage[5] = 0;
    v9 = FigCaptionSerializerCreate();
    if (!(_DWORD)v9)
    {
      snprintf(__str, 0x100uLL, "com.apple.coremedia.ckmediainput.messagequeue<%p>", 0);
      v11 = dispatch_queue_create(__str, 0);
      *DerivedStorage = v11;
      v9 = 0;
      if (v11)
        *a5 = 0;
    }
  }
  return v9;
}

uint64_t FigCaptionRendererBasicInputAddSample(uint64_t a1, const void *a2)
{
  dispatch_queue_t *DerivedStorage;
  _QWORD v5[2];

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  if (a2)
    CFRetain(a2);
  v5[0] = DerivedStorage;
  v5[1] = a2;
  if (*DerivedStorage)
    dispatch_sync_f(*DerivedStorage, v5, (dispatch_function_t)digestSubtitleSampleDo);
  return 0;
}

uint64_t FigCaptionRendererBasicInputSetLayoutContext(uint64_t a1, uint64_t a2)
{
  _QWORD v4[2];

  v4[0] = CMBaseObjectGetDerivedStorage();
  v4[1] = a2;
  if (*(_QWORD *)v4[0])
    dispatch_sync_f(*(dispatch_queue_t *)v4[0], v4, (dispatch_function_t)setLayoutContextDo);
  return 0;
}

void setLayoutContextDo(uint64_t *a1)
{
  const void *v1;
  uint64_t v2;
  const void *v3;

  v2 = *a1;
  v1 = (const void *)a1[1];
  v3 = *(const void **)(v2 + 56);
  *(_QWORD *)(v2 + 56) = v1;
  if (v1)
    CFRetain(v1);
  if (v3)
    CFRelease(v3);
}

void figFCRBasicInput_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v1 = *(const void **)(DerivedStorage + 56);
  if (v1)
    CFRelease(v1);
  v2 = *(const void **)(DerivedStorage + 40);
  if (v2)
    CFRelease(v2);
}

__CFString *figFCRBasicInput_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigCaptionRendererBasicInput %p>"), a1);
  return Mutable;
}

uint64_t start()
{
  return 0;
}

uint64_t stop()
{
  return 0;
}

void digestSubtitleSampleDo(uint64_t *a1)
{
  uint64_t v1;
  const void *v2;
  __CFString **v3;
  const __CFDictionary *v4;
  const __CFAllocator *v5;
  CFMutableArrayRef Mutable;
  __CFArray *v7;
  const __CFArray *v8;
  const __CFArray *v9;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v11;
  uint64_t SliceCount;
  const __CFDictionary *v13;
  CFMutableDictionaryRef v14;
  const __CFDictionary *v15;
  uint64_t i;
  uint64_t CaptionData;
  uint64_t v18;
  uint64_t v19;
  const __CFDictionary *v20;
  const __CFDictionary *v21;
  int64_t Count;
  size_t v23;
  const void **v24;
  const void **v25;
  uint64_t v26;
  const void *v27;
  CFTypeID v28;
  const void *v29;
  CFTypeID v30;
  const void *v31;
  const __CFDictionary *v32;
  CMTimeValue v33;
  uint64_t ProtocolVTable;
  uint64_t v35;
  void (*v36)(CMTimeValue, const void *);
  CMTimeValue v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(CMTimeValue, _QWORD);
  const __CFNumber *v42;
  CMTimeValue v43;
  uint64_t value_low;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(CMTimeValue, uint64_t);
  CMTimeValue v48;
  double v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(CMTimeValue, double, double);
  CMTimeValue v54;
  double v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(CMTimeValue, double, double);
  uint64_t v60;
  const __CFNumber *v61;
  uint64_t v62;
  const __CFArray *v63;
  const __CFArray *v64;
  CFIndex v65;
  CFIndex v66;
  CFIndex j;
  const __CFAttributedString *v68;
  const __CFAttributedString *v69;
  void *v70;
  void *v71;
  void *key;
  __CFDictionary *v73;
  const void *v74;
  const void *v75;
  int v76;
  void *value;
  CFTypeRef cf;
  char v79;
  CFDictionaryRef theDict;
  CMTime v81;
  CMTime valuePtr;
  CMTime v83;
  CMTime v84;
  CMTime v85;
  CMTime v86;
  CMTime v87;
  CMTime v88;
  __CFAttributedString *v89;

  v1 = *a1;
  v2 = (const void *)a1[1];
  theDict = 0;
  v79 = 0;
  cf = 0;
  if (FigSubtitleSampleCreateFromPropertyListAndInsertInfoForRenderer(v2, &theDict, &v79, *MEMORY[0x1E0C9D628], *(CGFloat *)(MEMORY[0x1E0C9D628] + 8), *(CGFloat *)(MEMORY[0x1E0C9D628] + 16), *(CGFloat *)(MEMORY[0x1E0C9D628] + 24)))goto LABEL_81;
  if (!theDict)
    goto LABEL_80;
  value = 0;
  v3 = kFigPlaybackItemAlternateType_Metadata;
  if (!CFDictionaryGetValueIfPresent(theDict, CFSTR("SubtitleSerializedCaptionGroup"), (const void **)&value))
    goto LABEL_25;
  if (FigCaptionSerializerCreateCaptionGroupFromCFData())
    goto LABEL_81;
  if (!cf)
    goto LABEL_25;
  v4 = theDict;
  v89 = 0;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    goto LABEL_25;
  v7 = Mutable;
  v74 = v2;
  memset(&v88, 0, sizeof(v88));
  CMTimeMake(&v88, 0, 0);
  memset(&v87, 0, sizeof(v87));
  CMTimeMake(&v87, 0, 0);
  v8 = (const __CFArray *)CFDictionaryGetValue(v4, CFSTR("SubtitleTimeRange"));
  if (v8)
  {
    v9 = v8;
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v8, 0);
    v11 = (const __CFDictionary *)CFArrayGetValueAtIndex(v9, 1);
    memset(&v86, 0, sizeof(v86));
    CMTimeMakeFromDictionary(&v86, ValueAtIndex);
    memset(&v85, 0, sizeof(v85));
    CMTimeMakeFromDictionary(&v85, v11);
    v88 = v86;
    v87 = v85;
  }
  SliceCount = FigCaptionGroupGetSliceCount();
  v13 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v13 && (v14 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) != 0)
  {
    v15 = v14;
    v73 = v4;
    if (SliceCount >= 1)
    {
      for (i = 0; i != SliceCount; ++i)
      {
        CaptionData = FigCaptionGroupGetCaptionData();
        if (CaptionData)
        {
          v18 = CaptionData;
          if (v89)
          {
            CFRelease(v89);
            v89 = 0;
          }
          memset(&v86, 0, sizeof(v86));
          FigCaptionGroupGetDurationBeforeSlice();
          memset(&v85, 0, sizeof(v85));
          FigCaptionGroupGetDurationAfterSlice();
          v84 = v88;
          v83 = v87;
          valuePtr = v86;
          v81 = v85;
          FigCaptionDataToMarkupBasedAttributedString(v5, v18, (uint64_t)&v84, &v83, &valuePtr, (uint64_t)&v81, &v89, v13, v15);
          CFArrayAppendValue(v7, v89);
        }
      }
    }
    v3 = kFigPlaybackItemAlternateType_Metadata;
    CFDictionarySetValue(v73, CFSTR("SubtitleContent"), v7);
  }
  else
  {
    v15 = 0;
    v3 = kFigPlaybackItemAlternateType_Metadata;
    if (!v13)
      goto LABEL_20;
  }
  CFRelease(v13);
LABEL_20:
  if (v15)
    CFRelease(v15);
  if (v89)
    CFRelease(v89);
  CFRelease(v7);
  v2 = v74;
LABEL_25:
  v19 = *(_QWORD *)(v1 + 56);
  if (v19)
    FigCaptionRendererLayoutContextSetSubtitleSample(v19, theDict);
  v20 = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("SubtitleContentMetadata"));
  if (v20)
  {
    v21 = (const __CFDictionary *)CFDictionaryGetValue(v20, (const void *)*MEMORY[0x1E0CA2C38]);
    Count = CFDictionaryGetCount(v21);
    if (Count >= 1)
    {
      v23 = Count;
      v75 = v2;
      v24 = (const void **)malloc_type_calloc(Count, 8uLL, 0xC0040B8AA526DuLL);
      v25 = (const void **)malloc_type_calloc(v23, 8uLL, 0xC0040B8AA526DuLL);
      CFDictionaryGetKeysAndValues(v21, v24, v25);
      v26 = 0;
      v71 = (void *)*MEMORY[0x1E0CA2CC0];
      key = (void *)*MEMORY[0x1E0CA2CA8];
      v70 = (void *)*MEMORY[0x1E0CA2CB0];
      do
      {
        v27 = v25[v26];
        if (v27)
        {
          v28 = CFGetTypeID(v27);
          if (v28 == CFDictionaryGetTypeID())
          {
            v29 = v24[v26];
            if (v29)
            {
              v30 = CFGetTypeID(v29);
              if (v30 == CFStringGetTypeID())
              {
                v31 = v24[v26];
                v32 = (const __CFDictionary *)v25[v26];
                v88.value = 0;
                FigCaptionRendererStackLayoutRegionCreate(&v88);
                v87.value = 0;
                LODWORD(valuePtr.value) = 0;
                v86.value = 0;
                v85.value = 0;
                v84.value = 0;
                v83.value = 0;
                v33 = v88.value;
                FigCaptionRendererRegionProtocolGetProtocolID();
                ProtocolVTable = CMBaseObjectGetProtocolVTable();
                if (ProtocolVTable)
                {
                  v35 = *(_QWORD *)(ProtocolVTable + 16);
                  if (v35)
                  {
                    v36 = *(void (**)(CMTimeValue, const void *))(v35 + 8);
                    if (v36)
                      v36(v33, v31);
                  }
                }
                if (FigCFDictionaryGetCGFloatIfPresent())
                {
                  v37 = v88.value;
                  v38 = *(double *)&v87.value;
                  FigCaptionRendererRegionProtocolGetProtocolID();
                  v39 = CMBaseObjectGetProtocolVTable();
                  if (v39)
                  {
                    v40 = *(_QWORD *)(v39 + 16);
                    if (v40)
                    {
                      v41 = *(void (**)(CMTimeValue, _QWORD))(v40 + 24);
                      if (v41)
                        v41(v37, (int)v38);
                    }
                  }
                  v42 = (const __CFNumber *)CFDictionaryGetValue(v32, key);
                  if (v42)
                  {
                    CFNumberGetValue(v42, kCFNumberIntType, &valuePtr);
                    v43 = v88.value;
                    value_low = LODWORD(valuePtr.value);
                    FigCaptionRendererRegionProtocolGetProtocolID();
                    v45 = CMBaseObjectGetProtocolVTable();
                    if (v45)
                    {
                      v46 = *(_QWORD *)(v45 + 16);
                      if (v46)
                      {
                        v47 = *(void (**)(CMTimeValue, uint64_t))(v46 + 40);
                        if (v47)
                          v47(v43, value_low);
                      }
                    }
                    if (CFDictionaryGetValue(v32, v71)
                      && FigCFDictionaryGetCGFloatIfPresent()
                      && FigCFDictionaryGetCGFloatIfPresent())
                    {
                      v48 = v88.value;
                      v49 = *(double *)&v86.value;
                      v50 = *(double *)&v85.value;
                      FigCaptionRendererRegionProtocolGetProtocolID();
                      v51 = CMBaseObjectGetProtocolVTable();
                      if (v51)
                      {
                        v52 = *(_QWORD *)(v51 + 16);
                        if (v52)
                        {
                          v53 = *(void (**)(CMTimeValue, double, double))(v52 + 72);
                          if (v53)
                            v53(v48, v49, 100.0 - v50);
                        }
                      }
                      if (CFDictionaryGetValue(v32, v70)
                        && FigCFDictionaryGetCGFloatIfPresent()
                        && FigCFDictionaryGetCGFloatIfPresent())
                      {
                        v54 = v88.value;
                        v55 = *(double *)&v84.value;
                        v56 = *(double *)&v83.value;
                        FigCaptionRendererRegionProtocolGetProtocolID();
                        v57 = CMBaseObjectGetProtocolVTable();
                        if (v57)
                        {
                          v58 = *(_QWORD *)(v57 + 16);
                          if (v58)
                          {
                            v59 = *(void (**)(CMTimeValue, double, double))(v58 + 56);
                            if (v59)
                              v59(v54, v55, v56);
                          }
                        }
                        v60 = *(_QWORD *)(v1 + 56);
                        if (v60)
                          FigCaptionRendererLayoutContextSetMapping(v60, (const void *)v88.value, v32);
                        (*(void (**)(CMTimeValue, _QWORD))(v1 + 24))(v88.value, *(_QWORD *)(v1 + 32));
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v26;
      }
      while (v23 != v26);
      free(v24);
      free(v25);
      v2 = v75;
      v3 = kFigPlaybackItemAlternateType_Metadata;
    }
  }
  v76 = 0;
  v61 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("SubtitleFormat"));
  CFNumberGetValue(v61, kCFNumberSInt32Type, &v76);
  v62 = 4;
  if (v76 != 1937142900 && v76 != 2004251764 && v76 != 2021028980)
    v62 = 3;
  v63 = (const __CFArray *)CFDictionaryGetValue(theDict, v3[494]);
  if (v63)
  {
    v64 = v63;
    v65 = CFArrayGetCount(v63);
    if (v65)
    {
      v66 = v65;
      if (v65 >= 1)
      {
        for (j = 0; j != v66; ++j)
        {
          v68 = (const __CFAttributedString *)CFArrayGetValueAtIndex(v64, j);
          if (v68)
          {
            v69 = v68;
            if (CFAttributedStringGetLength(v68))
              outputCueAsFigCaptionRendererCaption(v1, v62, v69, theDict);
          }
        }
      }
      goto LABEL_81;
    }
LABEL_80:
    outputCueAsFigCaptionRendererCaption(v1, 5, 0, 0);
  }
LABEL_81:
  if (v2)
    CFRelease(v2);
  if (theDict)
    CFRelease(theDict);
  if (cf)
    CFRelease(cf);
}

void outputCueAsFigCaptionRendererCaption(uint64_t a1, uint64_t a2, const __CFAttributedString *a3, CFDictionaryRef theDict)
{
  const void *Value;
  const void *v9;
  CFTypeRef v10;
  uint64_t ProtocolVTable;
  uint64_t v12;
  void (*v13)(CFTypeRef, uint64_t);
  __CFDictionary *Mutable;
  CFTypeRef v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(CFTypeRef, const void *);
  CFTypeRef v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(CFTypeRef, __CFDictionary *);
  CFTypeRef Attribute;
  const void *v24;
  CFTypeRef v25;
  const void *v26;
  CFTypeRef v27;
  const void *v28;
  CFTypeRef v29;
  const void *v30;
  CFTypeRef v31;
  const void *v32;
  CFTypeRef v33;
  const void *v34;
  CFTypeRef v35;
  CFTypeRef v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(CFTypeRef, const __CFAttributedString *);
  uint64_t v40;
  CFTypeRef cf;
  CFRange effectiveRange;

  cf = 0;
  if (theDict)
  {
    Value = CFDictionaryGetValue(theDict, CFSTR("kFigSubtitleRenderer_TextBox"));
    v9 = CFDictionaryGetValue(theDict, CFSTR("SubtitleExtendedLanguageTag"));
    CFDictionaryGetValue(theDict, CFSTR("kFigSubtitleRenderer_ObeySubtitleFormatting"));
  }
  else
  {
    Value = 0;
    v9 = 0;
  }
  effectiveRange.location = 0;
  effectiveRange.length = 0;
  FigCaptionRendererCaptionCreate(&cf);
  v10 = cf;
  FigCaptionRendererCaptionProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v12 = *(_QWORD *)(ProtocolVTable + 16);
    if (v12)
    {
      v13 = *(void (**)(CFTypeRef, uint64_t))(v12 + 40);
      if (v13)
        v13(v10, a2);
    }
  }
  if ((_DWORD)a2 == 5)
  {
    (*(void (**)(CFTypeRef, _QWORD))(a1 + 16))(cf, *(_QWORD *)(a1 + 32));
LABEL_10:
    Mutable = 0;
    goto LABEL_44;
  }
  if (!a3)
    goto LABEL_10;
  v15 = cf;
  FigCaptionRendererCaptionProtocolGetProtocolID();
  v16 = CMBaseObjectGetProtocolVTable();
  if (v16)
  {
    v17 = *(_QWORD *)(v16 + 16);
    if (v17)
    {
      v18 = *(void (**)(CFTypeRef, const void *))(v17 + 56);
      if (v18)
        v18(v15, v9);
    }
  }
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v19 = cf;
  FigCaptionRendererCaptionProtocolGetProtocolID();
  v20 = CMBaseObjectGetProtocolVTable();
  if (v20)
  {
    v21 = *(_QWORD *)(v20 + 16);
    if (v21)
    {
      v22 = *(void (**)(CFTypeRef, __CFDictionary *))(v21 + 8);
      if (v22)
        v22(v19, Mutable);
    }
  }
  Attribute = CFAttributedStringGetAttribute(a3, 0, (CFStringRef)*MEMORY[0x1E0CA2AB0], &effectiveRange);
  if (Attribute)
    CFDictionarySetValue(Mutable, CFSTR("region"), Attribute);
  if (Value)
    CFDictionarySetValue(Mutable, CFSTR("textbox"), Value);
  if ((_DWORD)a2 == 4)
  {
    v24 = (const void *)*MEMORY[0x1E0CA2B40];
    v25 = CFAttributedStringGetAttribute(a3, 0, (CFStringRef)*MEMORY[0x1E0CA2B40], &effectiveRange);
    if (v25)
      CFDictionarySetValue(Mutable, v24, v25);
    v26 = (const void *)*MEMORY[0x1E0CA2B20];
    v27 = CFAttributedStringGetAttribute(a3, 0, (CFStringRef)*MEMORY[0x1E0CA2B20], &effectiveRange);
    if (v27)
      CFDictionarySetValue(Mutable, v26, v27);
    v28 = (const void *)*MEMORY[0x1E0CA2A88];
    v29 = CFAttributedStringGetAttribute(a3, 0, (CFStringRef)*MEMORY[0x1E0CA2A88], &effectiveRange);
    if (v29)
      CFDictionarySetValue(Mutable, v28, v29);
    v30 = (const void *)*MEMORY[0x1E0CA2A80];
    v31 = CFAttributedStringGetAttribute(a3, 0, (CFStringRef)*MEMORY[0x1E0CA2A80], &effectiveRange);
    if (v31)
      CFDictionarySetValue(Mutable, v30, v31);
    v32 = (const void *)*MEMORY[0x1E0CA29D8];
    v33 = CFAttributedStringGetAttribute(a3, 0, (CFStringRef)*MEMORY[0x1E0CA29D8], &effectiveRange);
    if (v33)
      CFDictionarySetValue(Mutable, v32, v33);
    v34 = (const void *)*MEMORY[0x1E0CA29E0];
    v35 = CFAttributedStringGetAttribute(a3, 0, (CFStringRef)*MEMORY[0x1E0CA29E0], &effectiveRange);
    if (v35)
      CFDictionarySetValue(Mutable, v34, v35);
  }
  v36 = cf;
  FigCaptionRendererCaptionProtocolGetProtocolID();
  v37 = CMBaseObjectGetProtocolVTable();
  if (v37)
  {
    v38 = *(_QWORD *)(v37 + 16);
    if (v38)
    {
      v39 = *(void (**)(CFTypeRef, const __CFAttributedString *))(v38 + 24);
      if (v39)
        v39(v36, a3);
    }
  }
  v40 = *(_QWORD *)(a1 + 56);
  if (v40)
    FigCaptionRendererLayoutContextSetMapping(v40, cf, a3);
  (*(void (**)(CFTypeRef, _QWORD))(a1 + 16))(cf, *(_QWORD *)(a1 + 32));
LABEL_44:
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
}

uint64_t FigPhotoCreateIntegerPixelBufferFromFullPrecisionSource()
{
  return CMPhotoCreateIntegerPixelBufferFromFullPrecisionSource();
}

uint64_t captionRendererDidChangeCaptionsNotification(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend(a2, "updateDisplay:", a4);
}

void __getDisplayScale_block_invoke()
{
  const __CFNumber *v0;
  const __CFNumber *v1;
  CFTypeID v2;

  v0 = (const __CFNumber *)MGCopyAnswer();
  if (v0)
  {
    v1 = v0;
    v2 = CFGetTypeID(v0);
    if (v2 == CFNumberGetTypeID())
      CFNumberGetValue(v1, kCFNumberCGFloatType, &sMaxDisplayScale);
    CFRelease(v1);
  }
}

uint64_t FigIFFPictureCollectionWriterCreateWithMovieSampleDataWriter(const void *a1, const void *a2, const void *a3, const void *a4, CFTypeRef *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t DerivedStorage;
  CFTypeRef v13;
  uint64_t v14;
  char v16;
  CFTypeRef cf;

  cf = 0;
  if (a1)
  {
    if (a2 && a5)
    {
      FigPictureCollectionWriterGetClassID();
      v10 = CMDerivedObjectCreate();
      if ((_DWORD)v10)
      {
        v14 = v10;
        FigSignalErrorAt();
        goto LABEL_17;
      }
      v16 = 0;
      v11 = iffpcwGetWriteFileTypeOptions(a3, 0, &v16);
      if (!(_DWORD)v11)
      {
        DerivedStorage = CMBaseObjectGetDerivedStorage();
        v13 = a4 ? CFRetain(a4) : 0;
        *(_QWORD *)DerivedStorage = v13;
        *(_QWORD *)(DerivedStorage + 8) = CFRetain(a1);
        *(_QWORD *)(DerivedStorage + 16) = CFRetain(a2);
        *(_BYTE *)(DerivedStorage + 40) = v16;
        v11 = IFFItemInformationCreate((uint64_t)a4, (uint64_t *)(DerivedStorage + 24));
        if (!(_DWORD)v11)
        {
          v14 = IFFItemHeaderMakerCreateWithIFFItemInformation((const __CFAllocator *)a4, *(const void **)(DerivedStorage + 24), (_QWORD *)(DerivedStorage + 32));
          if (!(_DWORD)v14)
          {
            *a5 = cf;
            return v14;
          }
LABEL_17:
          if (cf)
            CFRelease(cf);
          return v14;
        }
      }
    }
    else
    {
      v11 = FigSignalErrorAt();
    }
    v14 = v11;
    goto LABEL_17;
  }
  return FigSignalErrorAt();
}

uint64_t iffpcwGetWriteFileTypeOptions(const void *a1, char *a2, char *a3)
{
  CFTypeID v6;
  char v7;
  char v8;
  uint64_t result;
  void *value;

  if (!a1)
    goto LABEL_8;
  v6 = CFGetTypeID(a1);
  if (v6 != CFDictionaryGetTypeID())
    return FigSignalErrorAt();
  value = 0;
  if (!CFDictionaryGetValueIfPresent((CFDictionaryRef)a1, CFSTR("WriteFileType"), (const void **)&value))
    goto LABEL_8;
  if (!FigCFEqual())
  {
    if (!FigCFEqual())
    {
      if (!FigCFEqual())
        return FigSignalErrorAt();
      v7 = 0;
      v8 = 1;
      if (!a2)
        goto LABEL_10;
      goto LABEL_9;
    }
LABEL_8:
    v8 = 0;
    v7 = 1;
    if (!a2)
      goto LABEL_10;
    goto LABEL_9;
  }
  v7 = 0;
  v8 = 0;
  if (a2)
LABEL_9:
    *a2 = v7;
LABEL_10:
  result = 0;
  if (a3)
    *a3 = v8;
  return result;
}

uint64_t FigIFFPictureCollectionWriterCreateWithByteStream(const void *a1, const void *a2, const void *a3, const void *a4, CFTypeRef *a5)
{
  uint64_t v10;
  uint64_t v11;
  CFTypeRef v12;
  char v14;
  CFTypeRef cf;

  cf = 0;
  if (!a1 || !a2 || !a5)
    return FigSignalErrorAt();
  v14 = 0;
  v10 = iffpcwGetWriteFileTypeOptions(a3, &v14, 0);
  if ((_DWORD)v10)
    return v10;
  v11 = MovieSampleDataWriterCreate(a4, a2, 0, 0, v14 != 0, 3u, (uint64_t *)&cf);
  v12 = cf;
  if (!(_DWORD)v11)
  {
    v11 = MovieSampleDataWriterSetDefaultByteStream((uint64_t)cf, a1);
    v12 = cf;
    if (!(_DWORD)v11)
    {
      v11 = FigIFFPictureCollectionWriterCreateWithMovieSampleDataWriter(cf, a2, a3, a4, a5);
      v12 = cf;
    }
  }
  if (v12)
    CFRelease(v12);
  return v11;
}

void iffpcw_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
    CFRelease(v1);
  v2 = *(const void **)(DerivedStorage + 16);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(DerivedStorage + 24);
  if (v3)
    CFRelease(v3);
  IFFItemHeaderMakerRelease(*(const __CFAllocator ***)(DerivedStorage + 32));
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
}

__CFString *iffpcw_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<IFFPictureCollectionWriter %p>"), a1);
  return Mutable;
}

uint64_t iffpcw_CopyProperty(uint64_t a1, uint64_t a2, const __CFAllocator *a3, CFMutableArrayRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t FirstMediaDataAtomOffset;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v12;
  uint64_t appended;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && a4)
  {
    v8 = DerivedStorage;
    if (FigCFEqual())
      return MovieSampleDataWriterCopyMajorBrand(*(_QWORD *)(v8 + 8), a4);
    if (FigCFEqual())
      return MovieSampleDataWriterCopyMinorVersion(*(_QWORD *)(v8 + 8), a4);
    if (FigCFEqual())
      return MovieSampleDataWriterCopyCompatibleBrands(*(_QWORD *)(v8 + 8), a4);
    if (FigCFEqual())
    {
      v15 = 0;
      v16 = 0;
      FirstMediaDataAtomOffset = MovieSampleDataWriterGetFirstMediaDataAtomOffset(*(_QWORD *)(v8 + 8), 1, &v16);
      if (!(_DWORD)FirstMediaDataAtomOffset)
      {
        FirstMediaDataAtomOffset = MovieSampleDataWriterGetLengthOfDefaultByteStream(*(uint64_t **)(v8 + 8), &v15);
        if (!(_DWORD)FirstMediaDataAtomOffset)
        {
          Mutable = CFArrayCreateMutable(a3, 2, MEMORY[0x1E0C9B378]);
          if (Mutable)
          {
            v12 = Mutable;
            appended = FigCFArrayAppendInt64();
            if ((_DWORD)appended)
            {
              v14 = appended;
            }
            else
            {
              v14 = FigCFArrayAppendInt64();
              if (!(_DWORD)v14)
              {
                *a4 = v12;
                return v14;
              }
            }
            CFRelease(v12);
            return v14;
          }
          return FigSignalErrorAt();
        }
      }
      return FirstMediaDataAtomOffset;
    }
    return 4294954512;
  }
  return FigSignalErrorAt();
}

uint64_t iffpcw_SetProperty(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  if (FigCFEqual())
    return MovieSampleDataWriterSetMajorBrand(*(_QWORD *)(v6 + 8), a3);
  if (FigCFEqual())
    return MovieSampleDataWriterSetMinorVersion(*(_QWORD *)(v6 + 8), a3);
  if (FigCFEqual())
    return MovieSampleDataWriterSetCompatibleBrands(*(_QWORD *)(v6 + 8), a3);
  return 4294954512;
}

uint64_t iffpcw_AppendHeader()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t appended;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v1 = IFFItemHeaderMakerCopyGlobalMetadataAtomAsBlockBuffer(*(_QWORD *)(DerivedStorage + 32), *(const __CFAllocator **)DerivedStorage, *(_QWORD *)(DerivedStorage + 16), (CMBlockBufferRef *)&cf);
  if ((_DWORD)v1)
  {
    appended = v1;
  }
  else
  {
    appended = MovieSampleDataWriterAppendHeader(*(_QWORD *)(DerivedStorage + 8), (OpaqueCMBlockBuffer *)cf, 0);
    if (!(_DWORD)appended)
      MovieSampleDataWriterSynchronizeDefaultByteStream(*(_QWORD *)(DerivedStorage + 8), 0, 0);
  }
  if (cf)
    CFRelease(cf);
  return appended;
}

uint64_t iffpcw_WriteHeaderToByteStream()
{
  uint64_t DerivedStorage;
  uint64_t appended;
  size_t DataLength;
  uint64_t v3;
  CMBlockBufferRef v5;
  CFTypeRef cf;
  CMBlockBufferRef blockBufferOut;
  char v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = 0;
  cf = 0;
  blockBufferOut = 0;
  v5 = 0;
  FigCFDictionaryGetBooleanIfPresent();
  appended = MovieSampleDataWriterPatchMediaDataAtomSizeIfNeeded(*(uint64_t **)(DerivedStorage + 8));
  if (!(_DWORD)appended)
  {
    appended = CMBlockBufferCreateEmpty(*(CFAllocatorRef *)DerivedStorage, 0, 0, &blockBufferOut);
    if (!(_DWORD)appended)
    {
      if (!*(_BYTE *)(DerivedStorage + 40)
        || (appended = MovieSampleDataWriterCopyFileTypeAtomAsBlockBuffer(*(const __CFNumber ***)(DerivedStorage + 8), *(const __CFAllocator **)DerivedStorage, (CMBlockBufferRef *)&cf), !(_DWORD)appended)&& (appended = CMBlockBufferAppendBufferReference(blockBufferOut, (CMBlockBufferRef)cf, 0, 0, 0), !(_DWORD)appended))
      {
        appended = IFFItemHeaderMakerCopyGlobalMetadataAtomAsBlockBuffer(*(_QWORD *)(DerivedStorage + 32), *(const __CFAllocator **)DerivedStorage, *(_QWORD *)(DerivedStorage + 16), &v5);
        if (!(_DWORD)appended)
        {
          appended = CMBlockBufferAppendBufferReference(blockBufferOut, v5, 0, 0, 0);
          if (!(_DWORD)appended)
          {
            DataLength = CMBlockBufferGetDataLength(blockBufferOut);
            appended = CMByteStreamWriteBlockBuffer();
            if (!(_DWORD)appended)
            {
              if (DataLength)
                appended = FigSignalErrorAt();
              else
                appended = IFFItemHeaderMakerSetByteCountToAddToItemLocationExtentOffsets(*(_QWORD *)(DerivedStorage + 32), 0);
            }
          }
        }
      }
    }
  }
  v3 = appended;
  if (v5)
    CFRelease(v5);
  if (cf)
    CFRelease(cf);
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  return v3;
}

uint64_t iffpcw_AddPicture(uint64_t a1, int a2, const opaqueCMFormatDescription *a3, const __CFDictionary *a4, _DWORD *a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  int CGSizeIfPresent;
  int Int32IfPresent;
  int v13;
  uint64_t v14;
  const void *v15;
  int Int16IfPresent;
  const __CFArray *Value;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  __int128 v23;
  _DWORD *v24;
  int v25;
  const opaqueCMFormatDescription *v26;
  __int128 v27;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3 && a5)
  {
    v10 = DerivedStorage;
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    v27 = *MEMORY[0x1E0C9D820];
    CGSizeIfPresent = FigCFDictionaryGetCGSizeIfPresent();
    Int32IfPresent = FigCFDictionaryGetInt32IfPresent();
    v13 = FigCFDictionaryGetInt32IfPresent();
    v26 = a3;
    v25 = a2;
    v24 = a5;
    v14 = v10;
    v15 = a4 ? CFDictionaryGetValue(a4, CFSTR("PixelInformation")) : 0;
    Int16IfPresent = FigCFDictionaryGetInt16IfPresent();
    Value = (const __CFArray *)FigCFDictionaryGetValue();
    FigCFDictionaryGetBooleanIfPresent();
    v18 = FigCFDictionaryGetValue();
    v19 = FigCFDictionaryGetValue();
    if ((v18 == 0) == (v19 == 0))
    {
      v20 = v19;
      if (!v18 || !Int16IfPresent)
      {
        if (!FigCFDictionaryGetCFIndexIfPresent())
        {
          v21 = 0;
          goto LABEL_14;
        }
        if (!v18 && !Int16IfPresent)
        {
          v21 = 256;
LABEL_14:
          *((_QWORD *)&v23 + 1) = v18;
          *(_QWORD *)&v23 = v15;
          return IFFInformationAddPicture(*(CFArrayRef **)(v14 + 24), v25, v26, (4 * (CGSizeIfPresent != 0)) | (8 * (Int32IfPresent != 0)) | (16 * (v13 != 0)) | ((Int16IfPresent != 0) << 6) | ((v18 != 0) << 7) | v21 | 2u, 0, Value, 0, 0, *(double *)&v27, *((double *)&v27 + 1), v23, (unint64_t)v20, v24);
        }
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t iffpcw_CopyPictureProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 && a5)
    return 4294954512;
  else
    return FigSignalErrorAt();
}

uint64_t iffpcw_SetPictureProperty(uint64_t a1, int a2, uint64_t a3, const void *a4)
{
  uint64_t DerivedStorage;
  uint64_t result;
  CFTypeID v9;
  int v10[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)v10 = 0;
  if (!a3)
    return FigSignalErrorAt();
  result = IFFInformationGetPictureByID(*(_QWORD *)(DerivedStorage + 24), a2, v10);
  if (!(_DWORD)result)
  {
    if (FigCFEqual())
    {
      if (a4 && (v9 = CFGetTypeID(a4), v9 == CFDictionaryGetTypeID()))
        return (uint64_t)IFFPictureSetStereoMetadataProperties(*(uint64_t *)v10, a4);
      else
        return FigSignalErrorAt();
    }
    else
    {
      return 4294954512;
    }
  }
  return result;
}

uint64_t iffpcw_AddThumbnailToPicture(uint64_t a1, int a2, int a3, const opaqueCMFormatDescription *a4, const __CFDictionary *a5, _DWORD *a6)
{
  uint64_t DerivedStorage;
  uint64_t v12;
  int Int32IfPresent;
  int v14;
  const __CFArray *Value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a4 || !a6)
    return FigSignalErrorAt();
  v12 = DerivedStorage;
  FigCFDictionaryGetBooleanIfPresent();
  Int32IfPresent = FigCFDictionaryGetInt32IfPresent();
  v14 = FigCFDictionaryGetInt32IfPresent();
  if (a5)
    Value = (const __CFArray *)CFDictionaryGetValue(a5, CFSTR("PixelInformation"));
  else
    Value = 0;
  return IFFInformationAddThumbnailToPicture(*(CFArrayRef **)(v12 + 24), a2, a3, a4, (8 * (Int32IfPresent != 0)) | (16 * (v14 != 0)) | 2u, 0, 0, Value, a6);
}

uint64_t iffpcw_AddAuxiliaryImageToPicture(uint64_t a1, int a2, int a3, const opaqueCMFormatDescription *a4, const __CFDictionary *a5, _DWORD *a6)
{
  uint64_t DerivedStorage;
  uint64_t v12;
  const void *Value;
  CFTypeID v14;
  uint64_t CStringPtrAndBufferToFree;
  const __CFData *v16;
  const __CFData *v17;
  CFTypeID v18;
  const UInt8 *BytePtr;
  size_t Length;
  int CGSizeIfPresent;
  int Int16IfPresent;
  const __CFArray *v23;
  int Int32IfPresent;
  int v25;
  const __CFArray *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v30;
  _DWORD *v31;
  int v32;
  int v33;
  __int128 v34;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a4 || !a6)
    goto LABEL_21;
  v12 = DerivedStorage;
  v32 = a2;
  v33 = a3;
  v31 = a6;
  if (!a5)
  {
    v30 = 0;
LABEL_15:
    BytePtr = 0;
    Length = 0;
    goto LABEL_16;
  }
  if (CFDictionaryContainsKey(a5, CFSTR("AuxiliaryImageType")))
  {
    Value = CFDictionaryGetValue(a5, CFSTR("AuxiliaryImageType"));
    if (!Value)
      goto LABEL_21;
    v14 = CFGetTypeID(Value);
    if (v14 != CFStringGetTypeID())
      goto LABEL_21;
    CStringPtrAndBufferToFree = FigCFStringGetCStringPtrAndBufferToFree();
    if (!CStringPtrAndBufferToFree)
      goto LABEL_21;
  }
  else
  {
    CStringPtrAndBufferToFree = 0;
  }
  v30 = (const char *)CStringPtrAndBufferToFree;
  if (!CFDictionaryContainsKey(a5, CFSTR("AuxiliaryImageSubType")))
    goto LABEL_15;
  v16 = (const __CFData *)CFDictionaryGetValue(a5, CFSTR("AuxiliaryImageSubType"));
  if (!v16 || (v17 = v16, v18 = CFGetTypeID(v16), v18 != CFDataGetTypeID()))
  {
LABEL_21:
    v27 = FigSignalErrorAt();
    goto LABEL_20;
  }
  BytePtr = CFDataGetBytePtr(v17);
  Length = CFDataGetLength(v17);
LABEL_16:
  v34 = *MEMORY[0x1E0C9D820];
  CGSizeIfPresent = FigCFDictionaryGetCGSizeIfPresent();
  Int16IfPresent = FigCFDictionaryGetInt16IfPresent();
  v23 = (const __CFArray *)FigCFDictionaryGetValue();
  Int32IfPresent = FigCFDictionaryGetInt32IfPresent();
  v25 = FigCFDictionaryGetInt32IfPresent();
  if (a5)
    v26 = (const __CFArray *)CFDictionaryGetValue(a5, CFSTR("PixelInformation"));
  else
    v26 = 0;
  v27 = IFFInformationAddAuxiliaryImageToPicture(*(CFArrayRef **)(v12 + 24), v32, v33, a4, (4 * (CGSizeIfPresent != 0)) | ((Int16IfPresent != 0) << 6) | (8 * (Int32IfPresent != 0)) | (16 * (v25 != 0)), 0, v23, 0, *(double *)&v34, *((double *)&v34 + 1), 0, v30, BytePtr, Length, v26, v31);
LABEL_20:
  v28 = v27;
  free(0);
  return v28;
}

uint64_t iffpcw_AddSampleBufferToPicture(uint64_t a1, int a2, const __CFDictionary *a3, opaqueCMSampleBuffer *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  CMBlockBufferRef DataBuffer;
  OpaqueCMBlockBuffer *v10;
  _BOOL4 v11;
  _BOOL4 v12;
  const opaqueCMFormatDescription *FormatDescription;
  uint64_t result;
  unint64_t NumSamples;
  unint64_t v16;
  CFDictionaryRef dict;
  void *value;
  CGPoint v19;
  unsigned __int16 v20;
  CGPoint point;
  int v22[2];
  size_t sizeArrayOut[2];
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)v22 = 0;
  if (!a4)
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  DataBuffer = CMSampleBufferGetDataBuffer(a4);
  if (!DataBuffer)
    return FigSignalErrorAt();
  v10 = DataBuffer;
  point = (CGPoint)*MEMORY[0x1E0C9D538];
  v20 = 0;
  v19 = point;
  if (a3)
  {
    value = 0;
    if (CFDictionaryGetValueIfPresent(a3, CFSTR("TileGridPosition"), (const void **)&value))
      v11 = CGPointMakeWithDictionaryRepresentation((CFDictionaryRef)value, &point);
    else
      v11 = 0;
    if (FigCFDictionaryGetInt16IfPresent()
      && (dict = 0, CFDictionaryGetValueIfPresent(a3, CFSTR("OverlayItemOffset"), (const void **)&dict)))
    {
      v12 = CGPointMakeWithDictionaryRepresentation(dict, &v19);
      LODWORD(a3) = v12;
      if (v11 && v12)
        return FigSignalErrorAt();
    }
    else
    {
      LODWORD(a3) = 0;
    }
  }
  else
  {
    v11 = 0;
  }
  FormatDescription = CMSampleBufferGetFormatDescription(a4);
  result = IFFInformationAddAndGetPictureItemFromPicture(*(CFArrayRef **)(v8 + 24), a2, v11, (int)a3, v20, FormatDescription, (uint64_t *)v22, point.x, point.y, v19.x, v19.y);
  if (!(_DWORD)result)
  {
    *(_OWORD *)sizeArrayOut = 0u;
    v24 = 0u;
    NumSamples = CMSampleBufferGetNumSamples(a4);
    if (NumSamples >= 5)
      return FigSignalErrorAt();
    v16 = NumSamples;
    result = CMSampleBufferGetSampleSizeArray(a4, NumSamples, sizeArrayOut, 0);
    if (!(_DWORD)result)
      return iffpcwAppendPictureDataBlockBuffer(v8, *(uint64_t *)v22, v10, v16, sizeArrayOut);
  }
  return result;
}

uint64_t iffpcw_AddExifToPicture(uint64_t a1, int a2, const __CFData *a3, unsigned int a4)
{
  return iffpcw_AddExifToPictureWithIDOut(a1, a2, a3, a4, 0, 0);
}

uint64_t iffpcw_AddXMPToPicture(uint64_t a1, int a2, uint64_t a3)
{
  return iffpcwAddGenericMetadataToPicture(a1, a2, 1, a3, 0, 0, 0, 0, 0);
}

uint64_t iffpcw_AddDebugMetadataToPicture(uint64_t a1, int a2, uint64_t a3)
{
  return iffpcwAddGenericMetadataToPicture(a1, a2, 2, a3, 0, 0, 0, 0, 0);
}

uint64_t iffpcw_AddGroup(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  int v8;
  uint64_t result;
  int v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = 0;
  if (!a2)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  if (FigCFEqual())
  {
    v8 = 1937007986;
    goto LABEL_6;
  }
  if (!FigCFEqual())
    return FigSignalErrorAt();
  v8 = 1634497650;
LABEL_6:
  result = IFFInformationAddGroup(*(_QWORD *)(v7 + 24), v8, &v10);
  if (a4)
  {
    if (!(_DWORD)result)
      *a4 = v10;
  }
  return result;
}

uint64_t iffpcw_AddPictureToGroup(uint64_t a1, int a2, int a3)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return IFFInformationAddPictureToGroup(*(_QWORD *)(DerivedStorage + 24), a2, a3);
}

uint64_t iffpcw_AddCustomMetadataToPicture(uint64_t a1, int a2, uint64_t a3, const __CFString *a4, const __CFString *a5)
{
  return iffpcwAddGenericMetadataToPicture(a1, a2, 3, a3, 0, a4, a5, 0, 0);
}

uint64_t iffpcw_AddExifWithEncodingToPicture(uint64_t a1, int a2, const __CFData *a3, unsigned int a4, uint64_t a5)
{
  return iffpcw_AddExifToPictureWithIDOut(a1, a2, a3, a4, a5, 0);
}

uint64_t iffpcw_AddXMPWithEncodingToPicture(uint64_t a1, int a2, uint64_t a3, const __CFString *a4)
{
  return iffpcwAddGenericMetadataToPicture(a1, a2, 1, a3, 0, 0, 0, a4, 0);
}

uint64_t iffpcw_AddItemReference(uint64_t a1, int a2, const void *a3, int a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  CFTypeID v9;
  CFIndex Count;
  size_t v11;
  uint64_t ItemByID;
  BOOL v13;
  uint64_t i;
  const __CFArray *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t PictureByID;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3 || (v8 = DerivedStorage, v9 = CFGetTypeID(a3), v9 != CFArrayGetTypeID()))
  {
    v17 = 0;
LABEL_33:
    v16 = 4294949526;
    goto LABEL_31;
  }
  Count = CFArrayGetCount((CFArrayRef)a3);
  if (Count < 1)
  {
LABEL_36:
    v16 = 0;
    goto LABEL_21;
  }
  v11 = Count;
  v24 = 0;
  ItemByID = IFFInformationGetItemByID(*(_QWORD *)(v8 + 24), a2, &v24);
  if (!(_DWORD)ItemByID)
  {
    if (a4 > 1684630886)
    {
      if (a4 == 1684630887 || a4 == 1953000802 && *(_DWORD *)(v24 + 64) != 1)
      {
LABEL_19:
        ItemByID = FigSignalErrorAt();
        goto LABEL_20;
      }
    }
    else
    {
      if (a4 != 1635088492)
      {
        if (a4 != 1667527523)
          goto LABEL_23;
        v13 = 0;
        for (i = 0; ; ++i)
        {
          v15 = *(const __CFArray **)(v24 + 520);
          if (v15)
            v15 = (const __CFArray *)CFArrayGetCount(v15);
          if (i >= (uint64_t)v15 || v13)
            break;
          v13 = *(_DWORD *)FigCFArrayGetValueAtIndex() != 1667527523;
        }
        if (!v13)
          goto LABEL_23;
        FigSignalErrorAt();
        goto LABEL_36;
      }
      if (*(_DWORD *)(v24 + 64) != 2)
        goto LABEL_19;
    }
LABEL_23:
    v17 = (uint64_t *)malloc_type_calloc(v11, 8uLL, 0x2004093837F09uLL);
    if (!v17)
    {
      v16 = 4294954450;
      goto LABEL_31;
    }
    v18 = 0;
    while (1)
    {
      v23 = 0;
      v22 = 0;
      if (!FigCFArrayGetInt32AtIndex())
        goto LABEL_33;
      PictureByID = IFFInformationGetPictureByID(*(_QWORD *)(v8 + 24), v22, &v23);
      if ((_DWORD)PictureByID)
        goto LABEL_30;
      v21 = 0;
      PictureByID = IFFInformationGetPictureItem(v23, &v21);
      if ((_DWORD)PictureByID)
        goto LABEL_30;
      v17[v18++] = v21;
      if (v11 == v18)
      {
        PictureByID = IFFInformationAddItemReference(*(_QWORD *)(v8 + 24), v24, a4, v11, v17);
LABEL_30:
        v16 = PictureByID;
        goto LABEL_31;
      }
    }
  }
LABEL_20:
  v16 = ItemByID;
LABEL_21:
  v17 = 0;
LABEL_31:
  free(v17);
  return v16;
}

uint64_t iffpcw_AddGroupProperties(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return IFFInformationAddPropertiesToGroup(*(CFArrayRef **)(DerivedStorage + 24), a2);
}

uint64_t iffpcw_AddGroupToGroup(uint64_t a1, int a2, int a3)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return IFFInformationAddGroupToGroup(*(_QWORD *)(DerivedStorage + 24), a2, a3);
}

uint64_t iffpcw_AddExifToPictureWithIDOut(uint64_t a1, int a2, const __CFData *a3, unsigned int a4, uint64_t a5, _DWORD *a6)
{
  const __CFAllocator *v12;
  uint64_t BlockBufferWithCFDataNoCopy;
  uint64_t v14;
  CMBlockBufferRef destinationBuffer;
  unsigned int sourceBytes;

  sourceBytes = a4;
  v12 = *(const __CFAllocator **)CMBaseObjectGetDerivedStorage();
  destinationBuffer = 0;
  if (a5)
  {
    v14 = FigSignalErrorAt();
  }
  else
  {
    if (a3 && CFDataGetLength(a3) > a4)
    {
      BlockBufferWithCFDataNoCopy = CMBlockBufferCreateWithMemoryBlock(v12, 0, 4uLL, v12, 0, 0, 4uLL, 1u, &destinationBuffer);
      if (!(_DWORD)BlockBufferWithCFDataNoCopy)
      {
        sourceBytes = bswap32(a4);
        BlockBufferWithCFDataNoCopy = CMBlockBufferReplaceDataBytes(&sourceBytes, destinationBuffer, 0, 4uLL);
        if (!(_DWORD)BlockBufferWithCFDataNoCopy)
        {
          BlockBufferWithCFDataNoCopy = FigCreateBlockBufferWithCFDataNoCopy();
          if (!(_DWORD)BlockBufferWithCFDataNoCopy)
          {
            BlockBufferWithCFDataNoCopy = CMBlockBufferAppendBufferReference(destinationBuffer, 0, 0, 0, 0);
            if (!(_DWORD)BlockBufferWithCFDataNoCopy)
              BlockBufferWithCFDataNoCopy = iffpcwAddGenericMetadataToPicture(a1, a2, 0, 0, (unint64_t)destinationBuffer, 0, 0, 0, a6);
          }
        }
      }
    }
    else
    {
      BlockBufferWithCFDataNoCopy = FigSignalErrorAt();
    }
    v14 = BlockBufferWithCFDataNoCopy;
  }
  if (destinationBuffer)
    CFRelease(destinationBuffer);
  return v14;
}

uint64_t iffpcw_AddXMPToPictureWithIDOut(uint64_t a1, int a2, uint64_t a3, const __CFString *a4, _DWORD *a5)
{
  return iffpcwAddGenericMetadataToPicture(a1, a2, 1, a3, 0, 0, 0, a4, a5);
}

uint64_t iffpcw_AddDebugMetadataToPictureWithIDOut(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  return iffpcwAddGenericMetadataToPicture(a1, a2, 2, a3, 0, 0, 0, 0, a4);
}

uint64_t iffpcw_AddCustomMetadataToPictureWithIDOut(uint64_t a1, int a2, uint64_t a3, const __CFString *a4, const __CFString *a5, _DWORD *a6)
{
  return iffpcwAddGenericMetadataToPicture(a1, a2, 3, a3, 0, a4, a5, 0, a6);
}

uint64_t iffpcwAppendPictureDataBlockBuffer(uint64_t a1, uint64_t a2, CMBlockBufferRef theBuffer, unint64_t a4, size_t *a5)
{
  size_t DataLength;
  size_t v11;
  uint64_t result;
  uint64_t v13;
  size_t v14;
  size_t *v15;
  size_t v16;
  size_t *v17;
  size_t *v18;
  size_t v19;
  size_t v20;
  size_t v21;
  size_t v22;
  size_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v27 = 0;
  v25 = 0;
  v26 = 0;
  v23 = 0;
  v24 = 0;
  v22 = 0;
  DataLength = CMBlockBufferGetDataLength(theBuffer);
  v21 = DataLength;
  if (a4 <= 1)
    v11 = 1;
  else
    v11 = a4;
  if (!a4)
    a5 = &v21;
  result = IFFInformationGetItemExtents(a2, &v27, &v26, &v25, &v24, &v23);
  if (!(_DWORD)result)
  {
    v13 = v24;
    if (!v24)
    {
      result = IFFInformationReserveItemExtentTable(*(_QWORD *)(a2 + 24), *(_DWORD *)(a2 + 40), 0, 0, v11, 0, 0);
      if ((_DWORD)result)
        return result;
      result = IFFInformationGetItemExtents(a2, &v27, &v26, &v25, &v24, &v23);
      if ((_DWORD)result)
        return result;
      v13 = v24;
    }
    if (v13 != v11 || v27 || v26)
    {
      return FigSignalErrorAt();
    }
    else if (a4 > 1 || DataLength == *a5)
    {
      result = MovieSampleDataWriterAppendBlockBuffer(*(uint64_t **)(a1 + 8), theBuffer, &v22);
      if (!(_DWORD)result)
      {
        v14 = v22;
        v15 = v23;
        *v23 = v22;
        v16 = *a5;
        v15[1] = *a5;
        if (a4 >= 2)
        {
          v17 = v15 + 3;
          v18 = a5 + 1;
          v19 = v11 - 1;
          do
          {
            v20 = *v18++;
            v14 += v16;
            *(v17 - 1) = v14;
            *v17 = v20;
            v17 += 2;
            v16 = v20;
            --v19;
          }
          while (v19);
        }
        return 0;
      }
    }
    else
    {
      return 4294950145;
    }
  }
  return result;
}

uint64_t iffpcwAddGenericMetadataToPicture(uint64_t a1, int a2, int a3, uint64_t a4, unint64_t a5, const __CFString *a6, const __CFString *a7, const __CFString *a8, _DWORD *a9)
{
  uint64_t DerivedStorage;
  uint64_t v17;
  uint64_t MetadataItemFromPicture;
  OpaqueCMBlockBuffer *v19;
  uint64_t appended;
  uint64_t v21;
  OpaqueCMBlockBuffer *cf;
  int v24[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  *(_QWORD *)v24 = 0;
  if (!(a4 | a5)
    || (v17 = DerivedStorage, a4) && a5
    || a3 == 3
    && (!a6
     || !CFStringHasPrefix(a6, CFSTR("http:"))
     && !CFStringHasPrefix(a6, CFSTR("https:"))
     && !CFStringHasPrefix(a6, CFSTR("urn:"))
     && !CFStringHasPrefix(a6, CFSTR("tag:"))))
  {
    MetadataItemFromPicture = FigSignalErrorAt();
    goto LABEL_27;
  }
  MetadataItemFromPicture = IFFInformationAddAndGetMetadataItemFromPicture(*(_QWORD *)(v17 + 24), a2, a3, a6, a8, v24);
  if ((_DWORD)MetadataItemFromPicture)
    goto LABEL_27;
  if (a7)
  {
    MetadataItemFromPicture = IFFInformationSetItemName(*(uint64_t *)v24, 0, a7);
    if ((_DWORD)MetadataItemFromPicture)
      goto LABEL_27;
  }
  if (a4)
  {
    MetadataItemFromPicture = FigCreateBlockBufferWithCFDataNoCopy();
    if (!(_DWORD)MetadataItemFromPicture)
    {
      v19 = 0;
      goto LABEL_20;
    }
LABEL_27:
    v21 = MetadataItemFromPicture;
    goto LABEL_23;
  }
  if (a5)
    v19 = (OpaqueCMBlockBuffer *)CFRetain((CFTypeRef)a5);
  else
    v19 = 0;
  cf = v19;
LABEL_20:
  appended = iffpcwAppendPictureDataBlockBuffer(v17, *(uint64_t *)v24, v19, 0, 0);
  v21 = appended;
  if (a9 && !(_DWORD)appended)
    *a9 = *(_DWORD *)(*(_QWORD *)v24 + 40);
LABEL_23:
  if (cf)
    CFRelease(cf);
  return v21;
}

uint64_t FigXPCPlaybackCoordinatorServerAssociateCopiedNeighborPlaybackCoordinator(uint64_t a1, const void *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  CFTypeRef v5;
  uint64_t v6;

  v3 = malloc_type_calloc(1uLL, 0x20uLL, 0x10200407DCD39BEuLL);
  v4 = v3;
  if (v3)
  {
    v3[2] = 1;
    v3[3] = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B3A0]);
  }
  else
  {
    v6 = FigSignalErrorAt();
    if ((_DWORD)v6)
    {
LABEL_7:
      disposeServedPlaybackCoordinatorState((uint64_t)v4);
      return v6;
    }
  }
  if (a2)
    v5 = CFRetain(a2);
  else
    v5 = 0;
  *v4 = v5;
  v6 = FigXPCServerAssociateCopiedObjectWithNeighborProcess();
  if ((_DWORD)v6)
    goto LABEL_7;
  return v6;
}

void disposeServedPlaybackCoordinatorState(uint64_t a1)
{
  CFTypeRef v2;
  void (*v3)(CFTypeRef);
  const void *v4;
  const void *v5;

  v2 = *(CFTypeRef *)a1;
  v3 = *(void (**)(CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
  if (v3)
    v3(v2);
  if (*(_QWORD *)a1)
  {
    CFRelease(*(CFTypeRef *)a1);
    *(_QWORD *)a1 = 0;
  }
  v4 = *(const void **)(a1 + 8);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 8) = 0;
  }
  v5 = *(const void **)(a1 + 24);
  if (v5)
    CFRelease(v5);
  free((void *)a1);
}

BOOL FigXPCPlaybackCoordinatorServerHandlesMessagesForObject(const void *a1)
{
  CFTypeID v1;
  _BOOL8 result;

  result = 0;
  if (a1)
  {
    v1 = CFGetTypeID(a1);
    if (v1 == FigPlaybackCoordinatorGetTypeID())
      return 1;
  }
  return result;
}

uint64_t FigXPCPlaybackCoordinatorServerHandleMessage(const void *a1)
{
  CFTypeID v2;
  uint64_t result;

  if (!FigXPCPlaybackCoordinatorServerHandlesMessagesForObject(a1))
    return FigSignalErrorAt();
  if (!a1)
    return FigSignalErrorAt();
  v2 = CFGetTypeID(a1);
  if (v2 != FigPlaybackCoordinatorGetTypeID())
    return FigSignalErrorAt();
  result = FigXPCMessageGetOpCode();
  if (!(_DWORD)result)
    return 4294951138;
  return result;
}

uint64_t serverXPCCoordinator_handleCopyProperty()
{
  uint64_t result;

  result = FigXPCMessageCopyCFString();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t serverXPCCoordinator_handleSetProperty()
{
  uint64_t result;

  result = FigXPCMessageCopyCFString();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t serverXPCCoordinator_handleBeginSuspension(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD);
  __CFDictionary *v9;
  char *v10;

  v7 = FigXPCMessageCopyTimelineCoordinatorSuspension();
  if ((_DWORD)v7)
    return v7;
  v8 = *(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v8)
    return 4294954514;
  v7 = v8(a1, 0);
  if ((_DWORD)v7)
    return v7;
  v10 = *(char **)(a2 + 16);
  v9 = *(__CFDictionary **)(a2 + 24);
  *(_QWORD *)(a2 + 16) = v10 + 1;
  CFDictionarySetValue(v9, v10, 0);
  xpc_dictionary_set_int64(a4, "SuspensionID", (int64_t)v10);
  return 0;
}

uint64_t serverXPCCoordinator_handleEndSuspensionProposingNewTime(uint64_t a1, uint64_t a2, xpc_object_t xdict)
{
  const void *int64;
  const void *Value;
  const void *v7;
  uint64_t (*v8)(uint64_t, const void *, __int128 *);
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v11 = *MEMORY[0x1E0CA2E18];
  v12 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  int64 = (const void *)xpc_dictionary_get_int64(xdict, "SuspensionID");
  FigXPCMessageGetCMTime();
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 24), int64);
  if (!Value)
    return FigSignalErrorAt();
  v7 = Value;
  CFRetain(Value);
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a2 + 24), int64);
  v8 = *(uint64_t (**)(uint64_t, const void *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v8)
  {
    v13 = v11;
    v14 = v12;
    v9 = v8(a1, v7, &v13);
  }
  else
  {
    v9 = 4294954514;
  }
  CFRelease(v7);
  return v9;
}

uint64_t serverXPCCoordinator_handleSetWeakMediumAndCallbacks(uint64_t a1, uint64_t a2, void *a3, xpc_object_t xdict)
{
  uint64_t uint64;
  const void *v8;
  uint64_t Instance;
  _QWORD *v10;
  uint64_t (*v11)(uint64_t, _QWORD *, _OWORD *);
  uint64_t v12;
  _OWORD v14[2];
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);

  uint64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E0CA36A0]);
  v8 = *(const void **)(a2 + 8);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a2 + 8) = 0;
  }
  if (FigPlaybackCoordinatorServerMediumGetTypeID_sRegisterFigPlaybackCoordinatorServerMediumTypeOnce != -1)
    dispatch_once_f(&FigPlaybackCoordinatorServerMediumGetTypeID_sRegisterFigPlaybackCoordinatorServerMediumTypeOnce, 0, (dispatch_function_t)registerFigPlaybackCoordinatorServerMediumType);
  Instance = _CFRuntimeCreateInstance();
  v10 = (_QWORD *)Instance;
  if (Instance)
  {
    *(_QWORD *)(Instance + 32) = 1;
    *(_QWORD *)(Instance + 40) = FigSimpleMutexCreate();
    v10[2] = xpc_retain(a3);
    v10[3] = uint64;
  }
  else
  {
    v12 = FigSignalErrorAt();
    if ((_DWORD)v12)
      return v12;
  }
  v14[0] = xmmword_1E2F79360;
  v14[1] = *(_OWORD *)off_1E2F79370;
  v15 = coordinatorServerMedium_asynchronouslyReloadTimelineState;
  v11 = *(uint64_t (**)(uint64_t, _QWORD *, _OWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v11)
  {
    v12 = v11(a1, v10, v14);
    if (!(_DWORD)v12)
    {
      *(_QWORD *)(a2 + 8) = v10;
      return v12;
    }
  }
  else
  {
    v12 = 4294954514;
  }
  if (v10)
    CFRelease(v10);
  return v12;
}

uint64_t serverXPCCoordinator_handleHandleAssignmentOfUUIDToLocalParticipantByMedium(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, _QWORD);

  v2 = FigXPCMessageCopyCFObject();
  if (!(_DWORD)v2)
  {
    v3 = *(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (!v3)
      return 4294954514;
    return v3(a1, 0);
  }
  return v2;
}

uint64_t serverXPCCoordinator_handleCopyParticipantSnapshotForUUID(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, CFTypeRef, CFTypeRef *);
  uint64_t v4;
  CFTypeRef v6;
  CFTypeRef cf;

  v6 = 0;
  cf = 0;
  v2 = FigXPCMessageCopyCFObject();
  if ((_DWORD)v2)
  {
LABEL_5:
    v4 = v2;
    goto LABEL_7;
  }
  v3 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v3)
  {
    v2 = v3(a1, cf, &v6);
    if (!(_DWORD)v2)
      v2 = FigXPCMessageSetTimelineCoordinatorParticipantSnapshot();
    goto LABEL_5;
  }
  v4 = 4294954514;
LABEL_7:
  if (cf)
    CFRelease(cf);
  if (v6)
    CFRelease(v6);
  return v4;
}

uint64_t serverXPCCoordinator_handleCopyParticipantSnapshots(uint64_t a1)
{
  uint64_t (*v2)(uint64_t, CFTypeRef *);
  uint64_t v3;
  CFTypeRef v4;
  uint64_t v5;
  CFTypeRef cf;

  cf = 0;
  v2 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (!v2)
    return 4294954514;
  v3 = v2(a1, &cf);
  v4 = cf;
  if ((_DWORD)v3)
  {
    v5 = v3;
    if (!cf)
      return v5;
    goto LABEL_4;
  }
  v5 = FigXPCMessageSetTimelineCoordinatorParticipantSnapshots();
  v4 = cf;
  if (cf)
LABEL_4:
    CFRelease(v4);
  return v5;
}

uint64_t serverXPCCoordinator_handleHandleRemovalOfParticipantStateFromMedium(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, _QWORD);

  v2 = FigXPCMessageCopyCFObject();
  if (!(_DWORD)v2)
  {
    v3 = *(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
    if (!v3)
      return 4294954514;
    return v3(a1, 0);
  }
  return v2;
}

uint64_t serverXPCCoordinator_handleGetExpectedTimeAtHostTime(uint64_t a1)
{
  uint64_t result;
  uint64_t (*v3)(uint64_t, __int128 *, __int128 *);
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v6 = *MEMORY[0x1E0CA2E18];
  v7 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v4 = v6;
  v5 = v7;
  result = FigXPCMessageGetCMTime();
  if (!(_DWORD)result)
  {
    v3 = *(uint64_t (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
    if (v3)
    {
      v8 = v6;
      v9 = v7;
      result = v3(a1, &v8, &v4);
      if (!(_DWORD)result)
      {
        v8 = v4;
        v9 = v5;
        return FigXPCMessageSetCMTime();
      }
    }
    else
    {
      return 4294954514;
    }
  }
  return result;
}

uint64_t serverXPCCoordinator_handleHandleUpdatedTimelineStateFromMedium(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, _QWORD);

  v2 = FigXPCMessageCopyCFDictionary();
  if (!(_DWORD)v2)
  {
    v3 = *(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
    if (!v3)
      return 4294954514;
    return v3(a1, 0);
  }
  return v2;
}

uint64_t serverXPCCoordinator_handleHandleReplacementOfAllParticipantStatesFromMedium(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, _QWORD);

  v2 = FigXPCMessageCopyCFArray();
  if (!(_DWORD)v2)
  {
    v3 = *(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
    if (!v3)
      return 4294954514;
    return v3(a1, 0);
  }
  return v2;
}

uint64_t serverXPCCoordinator_handleHandleUpdatedParticipantStateFromMedium(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, _QWORD);

  v2 = FigXPCMessageCopyCFDictionary();
  if (!(_DWORD)v2)
  {
    v3 = *(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 96);
    if (!v3)
      return 4294954514;
    return v3(a1, 0);
  }
  return v2;
}

uint64_t serverXPCCoordinator_handleAsyncReloadCompletion(uint64_t a1, xpc_object_t xdict)
{
  int64_t int64;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void (*v8)(uint64_t);

  int64 = xpc_dictionary_get_int64(xdict, "FetchID");
  if (!int64)
    return FigSignalErrorAt();
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    return FigSignalErrorAt();
  v5 = int64;
  MEMORY[0x19402EEEC](*(_QWORD *)(v4 + 40));
  v6 = *(_QWORD **)(a1 + 8);
  if (v5 == v6[6])
  {
    v7 = v6[7];
    v8 = (void (*)(uint64_t))v6[8];
    v6[6] = 0;
    v6[7] = 0;
    v6[8] = 0;
    MEMORY[0x19402EF04](v6[5]);
    if (v8)
      v8(v7);
  }
  else
  {
    MEMORY[0x19402EF04](v6[5]);
  }
  return 0;
}

uint64_t FigXPCPlaybackCoordinatorServerHandleNoReplyMessage(const void *a1)
{
  CFTypeID v2;
  uint64_t result;

  if (!FigXPCPlaybackCoordinatorServerHandlesMessagesForObject(a1))
    return FigSignalErrorAt();
  if (!a1)
    return FigSignalErrorAt();
  v2 = CFGetTypeID(a1);
  if (v2 != FigPlaybackCoordinatorGetTypeID())
    return FigSignalErrorAt();
  result = FigXPCMessageGetOpCode();
  if (!(_DWORD)result)
    return 4294951138;
  return result;
}

uint64_t FigXPCPlaybackCoordinatorServerStartAsSubserver(uint64_t a1)
{
  _QWORD block[5];

  if (gPlaybackCoordinatorServer || !a1)
    return FigSignalErrorAt();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __FigXPCPlaybackCoordinatorServerStartAsSubserver_block_invoke;
  block[3] = &__block_descriptor_tmp_3;
  block[4] = a1;
  if (FigXPCPlaybackCoordinatorServerStartAsSubserver_onceToken != -1)
    dispatch_once(&FigXPCPlaybackCoordinatorServerStartAsSubserver_onceToken, block);
  return 0;
}

uint64_t coordinatorServerMedium_broadcastTimelineState(uint64_t a1)
{
  if (!FigXPCCreateBasicMessage() && !FigXPCMessageSetCFDictionary())
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), 0);
  return FigXPCRelease();
}

uint64_t coordinatorServerMedium_broadcastParticipantState(uint64_t a1)
{
  if (!FigXPCCreateBasicMessage() && !FigXPCMessageSetCFDictionary())
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), 0);
  return FigXPCRelease();
}

uint64_t coordinatorServerMedium_asynchronouslyReloadTimelineState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v8;
  xpc_object_t message;

  v8 = 0;
  message = 0;
  if (!FigXPCCreateBasicMessage())
  {
    coordinatorServerMedium_cancelOutstandingFetchAndRecordNewCallback((_QWORD *)a1, a3, a4, &v8);
    xpc_dictionary_set_int64(message, "FetchID", v8);
    FigXPCMessageSetCFString();
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), message);
  }
  return FigXPCRelease();
}

uint64_t registerFigPlaybackCoordinatorServerMediumType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigPlaybackCoordinatorServerMediumID = result;
  return result;
}

double FigPlaybackCoordinatorServerMedium_Init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t FigPlaybackCoordinatorServerMedium_Finalize(_QWORD *a1)
{
  coordinatorServerMedium_cancelOutstandingFetchAndRecordNewCallback(a1, 0, 0, 0);
  FigXPCRelease();
  return FigSimpleMutexDestroy();
}

uint64_t coordinatorServerMedium_cancelOutstandingFetchAndRecordNewCallback(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t (*v11)(uint64_t);

  MEMORY[0x19402EEEC](a1[5]);
  if (a1[8])
    v8 = a1[7];
  else
    v8 = 0;
  v11 = (uint64_t (*)(uint64_t))a1[8];
  a1[7] = a2;
  a1[8] = a3;
  v9 = a1[4];
  a1[4] = v9 + 1;
  a1[6] = v9;
  if (a4)
    *a4 = v9;
  result = MEMORY[0x19402EF04](a1[5]);
  if (v11)
    return v11(v8);
  return result;
}

__CFString *FigPlaybackCoordinatorServerMedium_CopyDescription(const void *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigPlaybackCoordinatorServerMedium %p>"), a1);
  return Mutable;
}

void CEA608CustomRenderer::CEA608CustomRenderer(CEA608CustomRenderer *this)
{
  _QWORD *v2;
  const __CFAllocator *v3;
  CFNumberRef v4;
  CFNumberRef v5;
  CFNumberRef v6;
  CFNumberRef v7;
  int v8;
  const CFArrayCallBacks *v9;
  CFMutableArrayRef Mutable;
  int v11;
  int v12;
  int v13;
  int valuePtr;

  CEA608Renderer::CEA608Renderer(this);
  *v2 = &off_1E2F793F8;
  v2[11] = 0;
  v2[12] = 0;
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  *((_QWORD *)this + 13) = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], "c608", 0);
  *((_QWORD *)this + 15) = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *((_QWORD *)this + 14) = CFStringCreateWithCString(v3, "cells", 0);
  *((_QWORD *)this + 16) = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
  if (*((_QWORD *)this + 15))
  {
    v13 = 1;
    valuePtr = 1;
    v11 = 32;
    v12 = 15;
    v4 = CFNumberCreate(v3, kCFNumberSInt32Type, &valuePtr);
    if (v4)
    {
      CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 15), CFSTR("t"), v4);
      CFRelease(v4);
    }
    v5 = CFNumberCreate(v3, kCFNumberSInt32Type, &v13);
    if (v5)
    {
      CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 15), CFSTR("l"), v5);
      CFRelease(v5);
    }
    v6 = CFNumberCreate(v3, kCFNumberSInt32Type, &v12);
    if (v6)
    {
      CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 15), CFSTR("h"), v6);
      CFRelease(v6);
    }
    v7 = CFNumberCreate(v3, kCFNumberSInt32Type, &v11);
    if (v7)
    {
      CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 15), CFSTR("w"), v7);
      CFRelease(v7);
    }
  }
  *((_QWORD *)this + 18) = CFSetCreateMutable(v3, 15, MEMORY[0x1E0C9B3B0]);
  *((_QWORD *)this + 17) = CFArrayCreateMutable(v3, 15, MEMORY[0x1E0C9B378]);
  v8 = 15;
  v9 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  do
  {
    Mutable = CFArrayCreateMutable(v3, 0, v9);
    CFArrayAppendValue(*((CFMutableArrayRef *)this + 17), Mutable);
    if (Mutable)
      CFRelease(Mutable);
    --v8;
  }
  while (v8);
}

void sub_192965C9C(_Unwind_Exception *a1)
{
  CEA608Renderer *v1;

  CEA608Renderer::~CEA608Renderer(v1);
  _Unwind_Resume(a1);
}

void CEA608CustomRenderer::~CEA608CustomRenderer(CEA608CustomRenderer *this)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;

  *(_QWORD *)this = &off_1E2F793F8;
  v2 = (const void *)*((_QWORD *)this + 13);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 15);
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 14);
  if (v4)
    CFRelease(v4);
  v5 = (const void *)*((_QWORD *)this + 16);
  if (v5)
    CFRelease(v5);
  v6 = (const void *)*((_QWORD *)this + 18);
  if (v6)
    CFRelease(v6);
  v7 = (const void *)*((_QWORD *)this + 17);
  if (v7)
    CFRelease(v7);
  v8 = (const void *)*((_QWORD *)this + 12);
  if (v8)
    CFRelease(v8);
  CEA608Renderer::~CEA608Renderer(this);
}

{
  CEA608CustomRenderer::~CEA608CustomRenderer(this);
  JUMPOUT(0x194030638);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t CEA608CustomRenderer::SetProperty(CEA608CustomRenderer *this, CFTypeRef cf1, const __CFBoolean *a3)
{
  const UInt8 *BytePtr;

  if (!CFEqual(cf1, CFSTR("RenderCallback")))
    return TextRendererBase::SetProperty(this, cf1, a3);
  BytePtr = CFDataGetBytePtr(a3);
  if (BytePtr && *(_QWORD *)BytePtr)
  {
    if (*((_QWORD *)BytePtr + 1))
    {
      *((_QWORD *)this + 11) = *(_QWORD *)BytePtr;
      *((_QWORD *)this + 12) = FigCFWeakReferenceHolderCreateWithReferencedObject();
    }
  }
  return 0;
}

uint64_t CEA608CustomRenderer::Render(CEA608CustomRenderer *this, CGContext *a2, const CGRect *a3, const CGRect *a4)
{
  __int128 v5;
  uint64_t v6;

  v5 = *MEMORY[0x1E0CA2E18];
  v6 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  return (*(uint64_t (**)(CEA608CustomRenderer *, CGContext *, __int128 *, const CGRect *, const CGRect *))(*(_QWORD *)this + 216))(this, a2, &v5, a3, a4);
}

void CEA608CustomRenderer::CallRenderCallback(CEA608CustomRenderer *this, uint64_t a2, const __CFDictionary *a3, CMTime *a4)
{
  uint64_t v8;
  const void *v9;
  void (*v10)(uint64_t, const __CFDictionary *, __int128 *, uint64_t);
  __int128 v11;
  CMTimeEpoch epoch;

  if (*((_QWORD *)this + 11))
  {
    v8 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v8)
    {
      v9 = (const void *)v8;
      v10 = (void (*)(uint64_t, const __CFDictionary *, __int128 *, uint64_t))*((_QWORD *)this + 11);
      v11 = *(_OWORD *)&a4->value;
      epoch = a4->epoch;
      v10(a2, a3, &v11, v8);
      CFRelease(v9);
    }
  }
}

uint64_t CEA608CustomRenderer::RenderAtTime(CEA608CustomRenderer *this, CGContext *a2, CMTime *a3, const CGRect *a4, const CGRect *a5)
{
  char v6;
  const __CFAllocator *v8;
  __CFDictionary *Mutable;
  __CFArray *v10;
  __CFArray *v11;
  CFIndex v12;
  __CFDictionary *v13;
  const void *ValueAtIndex;
  __CFDictionary *v15;
  __CFArray *v16;
  __CFArray *v17;
  CFIndex v18;
  __CFDictionary *v19;
  const void *v20;
  __CFDictionary *v21;
  CMTime v23;
  CMTime v24;
  CMTime v25;
  CMTime v26;
  __CFArray *v27;
  __CFArray *v28;

  v6 = *((_BYTE *)this + 8);
  if (v6)
  {
    v27 = 0;
    v28 = 0;
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(Mutable, CFSTR("F"), *((const void **)this + 13));
    CFDictionarySetValue(Mutable, CFSTR("B"), *((const void **)this + 15));
    CFDictionarySetValue(Mutable, CFSTR("U"), *((const void **)this + 14));
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    v26 = *a3;
    CEA608CustomRenderer::CallRenderCallback(this, 0, Mutable, &v26);
    if (Mutable)
      CFRelease(Mutable);
    CEA608CustomRenderer::BuildRowCommandArray(this);
    CEA608CustomRenderer::DetectCaptionElements(this, &v28, &v27);
    v10 = CFArrayCreateMutable(v8, 0, MEMORY[0x1E0C9B378]);
    v11 = v28;
    if (v28 && CFArrayGetCount(v28) >= 1)
    {
      v12 = 0;
      do
      {
        v13 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        ValueAtIndex = CFArrayGetValueAtIndex(v11, v12);
        FigCFDictionarySetInt32();
        CFDictionaryAddValue(v13, CFSTR("R"), ValueAtIndex);
        CFDictionarySetValue(v13, CFSTR("U"), *((const void **)this + 14));
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        CFArrayAppendValue(v10, v13);
        if (v13)
          CFRelease(v13);
        ++v12;
      }
      while (CFArrayGetCount(v11) > v12);
    }
    v15 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(v15, CFSTR("F"), *((const void **)this + 13));
    CFDictionaryAddValue(v15, CFSTR("W"), v10);
    if (v10)
      CFRelease(v10);
    v25 = *a3;
    CEA608CustomRenderer::CallRenderCallback(this, 6, v15, &v25);
    if (v15)
      CFRelease(v15);
    v16 = CFArrayCreateMutable(v8, 0, MEMORY[0x1E0C9B378]);
    v17 = v27;
    if (v27 && CFArrayGetCount(v27) >= 1)
    {
      v18 = 0;
      do
      {
        v19 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v20 = CFArrayGetValueAtIndex(v17, v18);
        FigCFDictionarySetInt32();
        CFDictionaryAddValue(v19, CFSTR("R"), v20);
        CFArrayAppendValue(v16, v19);
        if (v19)
          CFRelease(v19);
        ++v18;
      }
      while (CFArrayGetCount(v17) > v18);
    }
    v21 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(v21, CFSTR("F"), *((const void **)this + 13));
    CFDictionaryAddValue(v21, CFSTR("C"), v16);
    if (v16)
      CFRelease(v16);
    v24 = *a3;
    CEA608CustomRenderer::CallRenderCallback(this, 7, v21, &v24);
    if (v21)
      CFRelease(v21);
    if (v17)
      CFRelease(v17);
    if (v11)
      CFRelease(v11);
    CEA608Renderer::Memory::SetDirty(*((_QWORD *)this + 4), 0);
    v23 = *a3;
    CEA608CustomRenderer::CallRenderCallback(this, 1, 0, &v23);
    v6 = *((_BYTE *)this + 8);
  }
  *((_BYTE *)this + 72) = v6;
  return 0;
}

void CEA608CustomRenderer::BuildRowCommandArray(CEA608CustomRenderer *this)
{
  unsigned __int8 v2;
  const __CFAllocator *v3;
  const void *v4;
  const void *v5;
  __CFString *v6;
  __CFAttributedString *Mutable;
  __CFAttributedString *v8;
  const __CFString *v9;
  const __CFString *v10;
  __CFDictionary *v11;
  char v12;
  char v13;
  const void *v14;
  const void *v15;
  CGColorRef v16;
  CGColor *v17;
  CGColorRef v18;
  CGColor *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  CFIndex Length;
  CFIndex v24;
  const __CFBoolean *AttributeAndLongestEffectiveRange;
  CFMutableDictionaryRef v26;
  __CFDictionary *v27;
  __CFString *v28;
  CFMutableDictionaryRef v29;
  __CFDictionary *v30;
  CFAttributedStringRef v31;
  CFNumberRef v32;
  CFNumberRef v33;
  __CFArray *ValueAtIndex;
  CFNumberRef value;
  const __CFAllocator *allocator;
  __int16 v37;
  CFRange longestEffectiveRange;
  __int128 v39;
  signed __int8 valuePtr;
  CGFloat components[2];
  float64x2_t v42;
  uint64_t v43;
  CFRange v44;
  CFRange v45;
  CFRange v46;

  v43 = *MEMORY[0x1E0C80C00];
  v2 = 1;
  valuePtr = 1;
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v4 = (const void *)*MEMORY[0x1E0C9AE50];
  v5 = (const void *)*MEMORY[0x1E0C9AE40];
  v6 = CFSTR("a");
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  do
  {
    if (CEA608Renderer::MemoryRow::IsDirty(*(CEA608Renderer::MemoryRow **)(*((_QWORD *)this + 4) + 8 * v2 + 8)))
    {
      CEA608CustomRenderer::EraseRow((CFArrayRef *)this, valuePtr);
      if (CEA608Renderer::MemoryRow::IsDisplayable(*(CEA608Renderer::MemoryRow **)(*((_QWORD *)this + 4)
                                                                                  + 8 * valuePtr
                                                                                  + 8)))
      {
        Mutable = CFAttributedStringCreateMutable(v3, 0);
        if (Mutable)
        {
          v8 = Mutable;
          CFAttributedStringBeginEditing(Mutable);
          v9 = CFStringCreateWithCharacters(v3, *(const UniChar **)(*(_QWORD *)(*((_QWORD *)this + 4) + 8 * valuePtr + 8) + 256), 32);
          if (v9)
          {
            v10 = v9;
            v44.location = 0;
            v44.length = 0;
            CFAttributedStringReplaceString(v8, v44, v9);
            CFRelease(v10);
          }
          v11 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          v12 = 1;
          do
          {
            longestEffectiveRange = (CFRange)0;
            v39 = 0u;
            v37 = 0;
            CEA608Renderer::MemoryRow::GetStyleForCell(*(_QWORD *)(*((_QWORD *)this + 4) + 8 * valuePtr + 8), v12, (uint64_t)&longestEffectiveRange, (_BYTE *)&v37 + 1, (BOOL *)&v37);
            v13 = CEA608Renderer::MemoryRow::GetNextStyleChange(*(CEA608Renderer::MemoryRow **)(*((_QWORD *)this + 4) + 8 * valuePtr + 8), v12);
            CFDictionaryRemoveAllValues(v11);
            if (HIBYTE(v37))
              v14 = v4;
            else
              v14 = v5;
            CFDictionarySetValue(v11, CFSTR("d"), v14);
            if ((_BYTE)v37)
              v15 = v4;
            else
              v15 = v5;
            CFDictionarySetValue(v11, v6, v15);
            if (HIBYTE(v37))
            {
              if (longestEffectiveRange.location)
              {
                *(float64x2_t *)components = vcvtq_f64_f32(*(float32x2_t *)longestEffectiveRange.location);
                v42 = vcvtq_f64_f32(*(float32x2_t *)(longestEffectiveRange.location + 8));
                v16 = CGColorCreate(*((CGColorSpaceRef *)this + 16), components);
                if (v16)
                {
                  v17 = v16;
                  CFDictionarySetValue(v11, CFSTR("t"), v16);
                  CGColorRelease(v17);
                }
              }
              if (longestEffectiveRange.length)
              {
                *(float64x2_t *)components = vcvtq_f64_f32(*(float32x2_t *)longestEffectiveRange.length);
                v42 = vcvtq_f64_f32(*(float32x2_t *)(longestEffectiveRange.length + 8));
                v18 = CGColorCreate(*((CGColorSpaceRef *)this + 16), components);
                if (v18)
                {
                  v19 = v18;
                  CFDictionarySetValue(v11, CFSTR("b"), v18);
                  CGColorRelease(v19);
                }
              }
              if (DWORD1(v39) == 1)
                v20 = v4;
              else
                v20 = v5;
              CFDictionarySetValue(v11, CFSTR("i"), v20);
              if ((_DWORD)v39 == 1)
                v21 = v4;
              else
                v21 = v5;
              CFDictionarySetValue(v11, CFSTR("u"), v21);
              if (DWORD2(v39) == 1)
                v22 = v4;
              else
                v22 = v5;
              CFDictionarySetValue(v11, CFSTR("f"), v22);
            }
            v45.location = v12 - 1;
            v45.length = v13 - v12;
            CFAttributedStringSetAttributes(v8, v45, v11, 1u);
            v12 = v13;
          }
          while (v13 < 33);
          CFAttributedStringEndEditing(v8);
          if (v11)
            CFRelease(v11);
          v3 = allocator;
          value = CFNumberCreate(allocator, kCFNumberSInt8Type, &valuePtr);
          if (value)
          {
            Length = CFAttributedStringGetLength(v8);
            v24 = 0;
            do
            {
              longestEffectiveRange.location = 0;
              longestEffectiveRange.length = 0;
              v46.length = Length - v24;
              v46.location = v24;
              AttributeAndLongestEffectiveRange = (const __CFBoolean *)CFAttributedStringGetAttributeAndLongestEffectiveRange(v8, v24, CFSTR("d"), v46, &longestEffectiveRange);
              if (CFBooleanGetValue(AttributeAndLongestEffectiveRange))
              {
                v26 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                if (v26)
                {
                  v27 = v26;
                  v28 = v6;
                  v29 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                  if (v29)
                  {
                    v30 = v29;
                    CFDictionarySetValue(v27, CFSTR("F"), *((const void **)this + 13));
                    CFDictionarySetValue(v27, CFSTR("B"), *((const void **)this + 15));
                    CFDictionarySetValue(v27, CFSTR("U"), *((const void **)this + 14));
                    FigCFDictionarySetInt32();
                    FigCFDictionarySetInt32();
                    v31 = CFAttributedStringCreateWithSubstring(v3, v8, longestEffectiveRange);
                    CFDictionarySetValue(v27, CFSTR("S"), v31);
                    CFRelease(v31);
                    ++longestEffectiveRange.location;
                    v32 = CFNumberCreate(allocator, kCFNumberCFIndexType, &longestEffectiveRange);
                    CFDictionarySetValue(v30, CFSTR("x"), v32);
                    v33 = v32;
                    v3 = allocator;
                    CFRelease(v33);
                    CFDictionarySetValue(v30, CFSTR("y"), value);
                    CFDictionarySetValue(v27, CFSTR("L"), v30);
                    CFRelease(v30);
                    ValueAtIndex = (__CFArray *)CFArrayGetValueAtIndex(*((CFArrayRef *)this + 17), valuePtr - 1);
                    CFArrayAppendValue(ValueAtIndex, v27);
                  }
                  CFRelease(v27);
                  v6 = v28;
                }
              }
              v24 += longestEffectiveRange.length;
            }
            while (v24 < Length);
            CFSetAddValue(*((CFMutableSetRef *)this + 18), value);
            CFRelease(value);
          }
          CFRelease(v8);
        }
      }
    }
    v2 = ++valuePtr;
  }
  while (valuePtr < 16);
}

void CEA608CustomRenderer::DetectCaptionElements(CEA608CustomRenderer *this, const __CFArray **a2, const __CFArray **a3)
{
  uint64_t v3;
  __CFArray **v4;
  __CFArray **v5;
  CFIndex Count;
  const __CFAllocator *v7;
  __CFArray *Mutable;
  CFIndex v9;
  int v10;
  const __CFArray *ValueAtIndex;
  CFIndex v12;
  CFIndex v13;
  CFIndex v14;
  CGRect *v15;
  CEA608CustomRenderer *v16;
  CFIndex v17;
  CFIndex i;
  CFIndex v19;
  CGRect *v20;
  CGRect *v21;
  CFIndex v22;
  CEA608CustomRenderer *v23;
  const CFArrayCallBacks *v24;
  CFIndex v25;
  const CFArrayCallBacks *v26;
  __CFArray *v27;
  CGFloat *v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  CFIndex j;
  __CFArray *v34;
  const __CFArray *v35;
  CFIndex v36;
  CFIndex v37;
  CFIndex k;
  CEA608CustomRenderer *v39;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  __CFArray **v44;
  __CFArray **v45;
  CFIndex v46;
  __CFArray *v47;
  __CFArray *theArray;
  CFDictionaryRef DictionaryRepresentation;
  CFIndex v50;
  uint64_t v51;
  _OWORD v52[960];
  uint64_t v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;

  v3 = MEMORY[0x1E0C80A78](this, a2, a3);
  v44 = v4;
  v45 = v5;
  v53 = *MEMORY[0x1E0C80C00];
  v51 = v3;
  Count = CFArrayGetCount(*(CFArrayRef *)(v3 + 136));
  bzero(v52, 0x3C00uLL);
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
  if (Count >= 1)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v51 + 136), v9);
      v12 = CFArrayGetCount(ValueAtIndex);
      if (v12 >= 1)
      {
        v13 = v12;
        v14 = 0;
        v15 = (CGRect *)&v52[2 * v10];
        do
        {
          v16 = (CEA608CustomRenderer *)CFArrayGetValueAtIndex(ValueAtIndex, v14);
          v54.origin.x = CEA608CustomRenderer::GetCellRectFromCommandData(v16, v16);
          *v15 = v54;
          if (!CGRectIsNull(v54))
            CFArrayAppendValue(Mutable, v15);
          ++v14;
          ++v15;
        }
        while (v13 != v14);
        v10 += v14;
      }
      ++v9;
    }
    while (v9 != Count);
  }
  v17 = CFArrayGetCount(Mutable);
  if (v17 > 1)
  {
    for (i = v17; i > 1; i = CFArrayGetCount(Mutable))
    {
      v19 = 0;
      while (1)
      {
        v20 = (CGRect *)CFArrayGetValueAtIndex(Mutable, v19++);
        if (v19 < i)
          break;
LABEL_17:
        if (v19 >= i - 1)
          goto LABEL_20;
      }
      v21 = v20;
      v22 = v19;
      while (1)
      {
        v23 = (CEA608CustomRenderer *)CFArrayGetValueAtIndex(Mutable, v22);
        if (CEA608CustomRenderer::DoesRectIntersectOrTounchRect(v23, *v21, *(CGRect *)v23))
          break;
        if (++v22 >= i)
          goto LABEL_17;
      }
      *v21 = CGRectUnion(*v21, *(CGRect *)v23);
      CFArrayRemoveValueAtIndex(Mutable, v22);
    }
  }
LABEL_20:
  v24 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  theArray = CFArrayCreateMutable(v7, 0, MEMORY[0x1E0C9B378]);
  v47 = CFArrayCreateMutable(v7, 0, v24);
  v46 = CFArrayGetCount(Mutable);
  if (v46 >= 1)
  {
    v25 = 0;
    v26 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    do
    {
      v27 = CFArrayCreateMutable(v7, 0, v26);
      v50 = v25;
      v28 = (CGFloat *)CFArrayGetValueAtIndex(Mutable, v25);
      v29 = *v28;
      v30 = v28[1];
      v31 = v28[2];
      v32 = v28[3];
      v55.origin.x = *v28;
      v55.origin.y = v30;
      v55.size.width = v31;
      v55.size.height = v32;
      DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v55);
      CFArrayAppendValue(theArray, DictionaryRepresentation);
      v56.origin.x = v29;
      v56.origin.y = v30;
      v56.size.width = v31;
      v56.size.height = v32;
      for (j = (uint64_t)CGRectGetMinY(v56); ; ++j)
      {
        v57.origin.x = v29;
        v57.origin.y = v30;
        v57.size.width = v31;
        v57.size.height = v32;
        if (j >= (uint64_t)CGRectGetMaxY(v57))
          break;
        v34 = CFArrayCreateMutable(v7, 0, v26);
        v35 = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v51 + 136), j);
        v36 = CFArrayGetCount(v35);
        if (v36 >= 1)
        {
          v37 = v36;
          for (k = 0; k != v37; ++k)
          {
            v39 = (CEA608CustomRenderer *)CFArrayGetValueAtIndex(v35, k);
            v58.origin.x = CEA608CustomRenderer::GetCellRectFromCommandData(v39, v39);
            x = v58.origin.x;
            y = v58.origin.y;
            width = v58.size.width;
            height = v58.size.height;
            if (!CGRectIsNull(v58))
            {
              v59.origin.x = v29;
              v59.origin.y = v30;
              v59.size.width = v31;
              v59.size.height = v32;
              v60.origin.x = x;
              v60.origin.y = y;
              v60.size.width = width;
              v60.size.height = height;
              if (CGRectContainsRect(v59, v60))
                CFArrayAppendValue(v34, v39);
            }
          }
        }
        CFArrayAppendValue(v27, v34);
        if (v34)
          CFRelease(v34);
      }
      CFArrayAppendValue(v47, v27);
      if (v27)
        CFRelease(v27);
      if (DictionaryRepresentation)
        CFRelease(DictionaryRepresentation);
      v25 = v50 + 1;
    }
    while (v50 + 1 != v46);
  }
  *v44 = theArray;
  *v45 = v47;
  if (Mutable)
    CFRelease(Mutable);
}

void CEA608CustomRenderer::EraseRow(CFArrayRef *this, unsigned __int8 a2)
{
  CFNumberRef v3;
  __CFArray *ValueAtIndex;
  unsigned __int8 valuePtr;

  valuePtr = a2;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt8Type, &valuePtr);
  if (CFSetContainsValue(this[18], v3))
  {
    ValueAtIndex = (__CFArray *)CFArrayGetValueAtIndex(this[17], valuePtr - 1);
    CFArrayRemoveAllValues(ValueAtIndex);
    CFSetRemoveValue(this[18], v3);
  }
  CFRelease(v3);
}

double CEA608CustomRenderer::GetCellRectFromCommandData(CEA608CustomRenderer *this, CFDictionaryRef theDict)
{
  double v3;
  const __CFAttributedString *Value;

  v3 = *MEMORY[0x1E0C9D628];
  if (CFDictionaryGetValue(theDict, CFSTR("L")))
  {
    if (FigCFDictionaryGetInt32IfPresent())
    {
      if (FigCFDictionaryGetInt32IfPresent())
      {
        Value = (const __CFAttributedString *)CFDictionaryGetValue(theDict, CFSTR("S"));
        if (Value)
        {
          if (CFAttributedStringGetLength(Value))
            return (double)-1;
        }
      }
    }
  }
  return v3;
}

BOOL CEA608CustomRenderer::DoesRectIntersectOrTounchRect(CEA608CustomRenderer *this, CGRect a2, CGRect a3)
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat MinX;
  double v12;
  double MaxX;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  double MinY;
  double MaxY;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat rect;
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;
  CGRect v34;

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  v7 = a2.size.height;
  v8 = a2.size.width;
  v9 = a2.origin.y;
  v10 = a2.origin.x;
  if (CGRectIsNull(a2))
    return 0;
  v26.origin.x = x;
  v26.origin.y = y;
  v26.size.width = width;
  v26.size.height = height;
  if (CGRectIsNull(v26))
    return 0;
  v27.origin.x = v10;
  v27.origin.y = v9;
  v27.size.width = v8;
  v27.size.height = v7;
  MinX = CGRectGetMinX(v27);
  v28.size.height = height;
  v12 = MinX;
  v28.origin.x = x;
  v28.origin.y = y;
  v28.size.width = width;
  rect = v28.size.height;
  if (v12 >= CGRectGetMinX(v28))
  {
    v30.origin.x = x;
    v30.origin.y = y;
    v30.size.width = width;
    v30.size.height = rect;
    MaxX = CGRectGetMaxX(v30);
    v14 = v10;
    v15 = v9;
    v16 = v8;
    v17 = v7;
  }
  else
  {
    v29.origin.x = v10;
    v29.origin.y = v9;
    v29.size.width = v8;
    v29.size.height = v7;
    MaxX = CGRectGetMaxX(v29);
    v14 = x;
    v15 = y;
    v16 = width;
    v17 = rect;
  }
  if (MaxX < CGRectGetMinX(*(CGRect *)&v14))
    return 0;
  v31.origin.x = v10;
  v31.origin.y = v9;
  v31.size.width = v8;
  v31.size.height = v7;
  MinY = CGRectGetMinY(v31);
  v32.origin.x = x;
  v32.origin.y = y;
  v32.size.width = width;
  v32.size.height = rect;
  if (MinY >= CGRectGetMinY(v32))
  {
    v34.origin.x = x;
    v34.origin.y = y;
    v34.size.width = width;
    v34.size.height = rect;
    MaxY = CGRectGetMaxY(v34);
    v20 = v10;
    v21 = v9;
    v22 = v8;
    v23 = v7;
  }
  else
  {
    v33.origin.x = v10;
    v33.origin.y = v9;
    v33.size.width = v8;
    v33.size.height = v7;
    MaxY = CGRectGetMaxY(v33);
    v20 = x;
    v21 = y;
    v22 = width;
    v23 = rect;
  }
  return MaxY >= CGRectGetMinY(*(CGRect *)&v20);
}

uint64_t CEA608Renderer::GetCurrentTime(CEA608Renderer *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t CEA608Renderer::GetTimeScale(CEA608Renderer *this)
{
  return 30000;
}

uint64_t cea708IsThereValidRowData(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;

  v1 = 0;
  v2 = a1 + 74;
  while (2)
  {
    for (i = 0; i != 1008; i += 24)
    {
      if (*(_BYTE *)(v2 + i))
        return 1;
    }
    ++v1;
    v2 += 1010;
    if (v1 != 15)
      continue;
    break;
  }
  return 0;
}

uint64_t FigCEA708CaptionDecoderCreate(int a1, CMFormatDescriptionRef desc, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _BOOL4 v6;
  FourCharCode MediaSubType;
  FourCharCode v10;
  uint64_t v11;
  _DWORD *DerivedStorage;
  uint64_t v13;

  if (a4)
    v6 = a3 != 0;
  else
    v6 = 0;
  if ((a3 != 0) != (a4 != 0))
    return FigSignalErrorAt();
  if (!desc)
    return FigSignalErrorAt();
  if (!a6)
    return FigSignalErrorAt();
  MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
  v10 = MediaSubType;
  if (MediaSubType != 1635017571 && MediaSubType != 1664561208)
    return FigSignalErrorAt();
  FigCaptionDecoderGetClassID();
  v11 = CMDerivedObjectCreate();
  if (!(_DWORD)v11)
  {
    DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
    bzero(DerivedStorage, 0x7516A8uLL);
    *DerivedStorage = v10;
    if (v6
      && (*((_QWORD *)DerivedStorage + 1) = a3,
          v13 = FigCFWeakReferenceHolderCreateWithReferencedObject(),
          (*((_QWORD *)DerivedStorage + 2) = v13) == 0))
    {
      return FigSignalErrorAt();
    }
    else
    {
      DerivedStorage[6] = 0;
      *((_QWORD *)DerivedStorage + 4) = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
      cea708Initialize((uint64_t)DerivedStorage);
      v11 = 0;
      *a6 = 0;
    }
  }
  return v11;
}

void cea708Initialize(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  const void *v8;

  v2 = 0;
  v3 = (char *)(a1 + 120);
  do
  {
    *(_BYTE *)(a1 + 121800 * v2 + 113) = -1;
    v4 = v3;
    v5 = 8;
    do
    {
      bzero(v4, 0x3B78uLL);
      v4 += 15224;
      --v5;
    }
    while (v5);
    ++v2;
    v3 += 121800;
  }
  while (v2 != 63);
  *(_BYTE *)(a1 + 88) = -1;
  *(_QWORD *)(a1 + 96) = 0;
  v6 = *(const void **)(a1 + 104);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 104) = 0;
  }
  v7 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)(a1 + 40) = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(v7 + 16);
  *(_QWORD *)(a1 + 64) = 0;
  v8 = *(const void **)(a1 + 72);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a1 + 72) = 0;
  }
  *(_QWORD *)(a1 + 80) = 0x41F0000000000000;
}

void cea708_Finalize()
{
  _QWORD *DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = (const void *)DerivedStorage[4];
  if (v1)
    CFRelease(v1);
  v2 = (const void *)DerivedStorage[13];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)DerivedStorage[9];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)DerivedStorage[2];
  if (v4)
    CFRelease(v4);
}

__CFString *cea708_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<CEA708CaptionDecoder %p>"), a1);
  return Mutable;
}

uint64_t cea708_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, CFNumberRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  int valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  if (!FigCFEqual())
    return FigSignalErrorAt();
  valuePtr = *(_DWORD *)(v7 + 24) + 1;
  *a4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  return 0;
}

uint64_t cea708_SetProperty(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  CFTypeID v7;
  int valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  if (!FigCFEqual())
    return FigSignalErrorAt();
  valuePtr = 0;
  if (!a3)
    return FigSignalErrorAt();
  v7 = CFGetTypeID(a3);
  if (v7 != CFNumberGetTypeID())
    return FigSignalErrorAt();
  CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr);
  if (*(_DWORD *)(v6 + 24) != valuePtr - 1)
    *(_DWORD *)(v6 + 24) = valuePtr - 1;
  return 0;
}

uint64_t cea708_PushSample(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage;
  uint64_t DataPointer;
  const opaqueCMFormatDescription *FormatDescription;
  FourCharCode MediaSubType;
  FourCharCode v8;
  OpaqueCMBlockBuffer *DataBuffer;
  uint64_t v10;
  char *v11;
  size_t v12;
  const __CFAllocator *v13;
  const CFArrayCallBacks *v14;
  char *v15;
  size_t v16;
  const void *value;
  __CFArray *Mutable;
  size_t v19;
  unsigned int *v20;
  size_t v21;
  unint64_t v22;
  BOOL v23;
  unsigned __int8 *v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  signed __int8 v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  const void *v35;
  __CFArray *v36;
  const __CFAllocator *allocator;
  CMTime v39;
  char *dataPointerOut;
  size_t totalLengthOut;
  CMBlockBufferRef blockBufferOut;
  uint64_t v43;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  totalLengthOut = 0;
  blockBufferOut = 0;
  dataPointerOut = 0;
  DataPointer = cea708_RenderToTime(a1, MEMORY[0x1E0CA2E30], 0);
  if ((_DWORD)DataPointer)
    goto LABEL_68;
  if (!a2)
    goto LABEL_62;
  if (!CMSampleBufferGetNumSamples(a2))
    goto LABEL_62;
  FormatDescription = CMSampleBufferGetFormatDescription(a2);
  if (!FormatDescription)
    goto LABEL_62;
  MediaSubType = CMFormatDescriptionGetMediaSubType(FormatDescription);
  if (*(_DWORD *)DerivedStorage != MediaSubType)
  {
    DataPointer = FigSignalErrorAt();
    goto LABEL_68;
  }
  v8 = MediaSubType;
  DataBuffer = CMSampleBufferGetDataBuffer(a2);
  v10 = (uint64_t)DataBuffer;
  if (!DataBuffer)
    goto LABEL_63;
  if (!CMBlockBufferIsRangeContiguous(DataBuffer, 0, 0))
  {
    DataPointer = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CMBlockBufferRef)v10, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, 0, &blockBufferOut);
    if ((_DWORD)DataPointer)
      goto LABEL_68;
    v10 = (uint64_t)blockBufferOut;
  }
  DataPointer = CMBlockBufferGetDataPointer((CMBlockBufferRef)v10, 0, 0, &totalLengthOut, &dataPointerOut);
  if (!(_DWORD)DataPointer)
  {
    CMSampleBufferGetOutputPresentationTimeStamp(&v39, a2);
    *(CMTime *)(DerivedStorage + 40) = v39;
    if (v8 != 1664561208)
    {
      if (v8 == 1635017571)
      {
        v11 = dataPointerOut;
        v12 = totalLengthOut;
        v39.value = 0;
        if (totalLengthOut >= 8)
        {
          v43 = 0;
          v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          v14 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
          do
          {
            if (*v11 == 71 && v11[1] == 65 && v11[2] == 57 && v11[3] == 52 && v11[4] == 3)
            {
              v15 = v11 + 5;
              v16 = v12 - 5;
              DataPointer = cea708CreateDTVCCDataPacketBBufArray(DerivedStorage, v11 + 5, v12 - 5, (__CFArray **)&v39, &v43);
              if ((_DWORD)DataPointer)
                goto LABEL_68;
              value = (const void *)v39.value;
              if (v39.value)
              {
                Mutable = *(__CFArray **)(DerivedStorage + 72);
                if (!Mutable)
                {
                  Mutable = CFArrayCreateMutable(v13, 0, v14);
                  *(_QWORD *)(DerivedStorage + 72) = Mutable;
                }
                CFArrayAppendValue(Mutable, value);
                CFRelease(value);
                v39.value = 0;
              }
              v11 = &v15[v43];
              v12 = v16 - v43;
            }
            else
            {
              ++v11;
              --v12;
            }
          }
          while (v12 > 7);
        }
      }
      goto LABEL_62;
    }
    v19 = totalLengthOut;
    if (totalLengthOut >= 9)
    {
      v10 = 0;
      v20 = (unsigned int *)dataPointerOut;
      allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      while (1)
      {
        v21 = bswap32(*v20);
        v23 = v19 >= v21;
        v19 -= v21;
        if (!v23)
        {
LABEL_66:
          v10 = 4294950853;
          goto LABEL_63;
        }
        v22 = v21 - 8;
        v23 = v20[1] == 1885627235 && v22 >= 0xC;
        if (v23)
          break;
LABEL_60:
        v20 = (unsigned int *)((char *)v20 + v21);
        if (v19 <= 8)
          goto LABEL_63;
      }
      v24 = (unsigned __int8 *)(v20 + 2);
      while (1)
      {
        if (*v24 != 150)
          goto LABEL_66;
        if (v24[1] != 105)
          goto LABEL_66;
        v25 = v24[2];
        v26 = v22 - v25;
        if (v22 < v25)
          goto LABEL_66;
        v27 = v24[3];
        v28 = v24[4];
        if (*(_DWORD *)(DerivedStorage + 80) != v27 >> 4)
        {
          v29 = v27 >> 4;
          if ((v29 - 1) > 7)
          {
            v10 = 4294950853;
            if ((v24[4] & 0x40) == 0)
              goto LABEL_59;
            goto LABEL_48;
          }
          v10 = 0;
          v30 = dword_1932F6C38[v29 - 1];
          *(_DWORD *)(DerivedStorage + 80) = v29;
          *(_DWORD *)(DerivedStorage + 84) = v30;
        }
        if ((v28 & 0x40) == 0)
          goto LABEL_59;
LABEL_48:
        v39.value = 0;
        v31 = v28 < 0;
        v32 = 12;
        if (!v31)
          v32 = 7;
        v33 = (char *)&v24[v32];
        if (v31)
          v34 = -12;
        else
          v34 = -7;
        DataPointer = cea708CreateDTVCCDataPacketBBufArray(DerivedStorage, v33, v34 + v22, (__CFArray **)&v39, 0);
        if ((_DWORD)DataPointer)
          goto LABEL_68;
        v35 = (const void *)v39.value;
        if (v39.value)
        {
          v36 = *(__CFArray **)(DerivedStorage + 72);
          if (!v36)
          {
            v36 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
            *(_QWORD *)(DerivedStorage + 72) = v36;
          }
          CFArrayAppendValue(v36, v35);
          CFRelease(v35);
        }
        v10 = 0;
LABEL_59:
        v24 += v25;
        v22 = v26;
        if (v26 <= 0xB)
          goto LABEL_60;
      }
    }
LABEL_62:
    v10 = 0;
    goto LABEL_63;
  }
LABEL_68:
  v10 = DataPointer;
LABEL_63:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  return v10;
}

uint64_t cea708_RenderToTime(uint64_t a1, CMTime *a2, CMTime *a3)
{
  char *v3;
  uint64_t DerivedStorage;
  __int128 v6;
  CMTimeEpoch v7;
  const __CFArray *v8;
  uint64_t v9;
  CFIndex v10;
  const __CFArray *ValueAtIndex;
  CFIndex v12;
  CFIndex v13;
  OpaqueCMBlockBuffer *v14;
  uint64_t result;
  char *v16;
  unsigned int v17;
  unsigned __int8 *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 *v23;
  unsigned int v24;
  char *v25;
  _BYTE *v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  char *v30;
  unsigned __int8 v31;
  _WORD *v32;
  unsigned int v33;
  __int16 v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  unsigned __int8 *v42;
  int v43;
  uint64_t v44;
  _BYTE *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  unsigned __int8 v50;
  __int16 v51;
  int v52;
  char *v53;
  uint64_t v54;
  int v55;
  char *v56;
  _WORD *v57;
  unsigned __int8 v58;
  unsigned int v59;
  char *v60;
  unsigned __int8 v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  char v69;
  double v70;
  char *v71;
  int v72;
  __int128 v73;
  uint64_t v74;
  unsigned int v75;
  char v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  unsigned int v87;
  _BYTE *v88;
  uint64_t v89;
  char v90;
  unsigned int v91;
  _BYTE *v92;
  uint64_t v93;
  unsigned int v94;
  BOOL *v95;
  uint64_t v96;
  unsigned int v97;
  char *v98;
  char *v99;
  uint64_t v100;
  unsigned int v101;
  unsigned int v102;
  char *v103;
  unsigned int v104;
  unsigned int v105;
  char *v106;
  int v107;
  unsigned int v108;
  unsigned int v109;
  char *v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  char *v114;
  uint64_t v115;
  __int128 v116;
  CMTimeEpoch v117;
  const void *v118;
  CMTimeEpoch epoch;
  __int128 v120;
  CMTimeEpoch v121;
  __int128 v122;
  CFIndex Count;
  CFIndex v125;
  CMTime *v126;
  CFIndex v127;
  const __CFArray *theArray;
  CFIndex v129;
  uint64_t v130;
  _BYTE *v131;
  unsigned int v132;
  char *v133;
  char *v134;
  uint64_t v135;
  unsigned __int8 *v136;
  unsigned __int8 v137;
  char *v138;
  char *v139;
  CMTime rhs;
  CMTime lhs;
  CMTime time;
  CMTime v143;
  CMTime v144;
  CMTime v145;
  char *dataPointerOut;
  size_t totalLengthOut;
  int v148[3];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)&v145.value = *MEMORY[0x1E0CA2E18];
  v7 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v145.epoch = v7;
  v8 = *(const __CFArray **)(DerivedStorage + 72);
  if (v8)
  {
    v126 = (CMTime *)(DerivedStorage + 40);
    *(_OWORD *)&v144.value = v6;
    v144.epoch = v7;
    v122 = v6;
    *(_OWORD *)&v143.value = v6;
    v121 = v7;
    v143.epoch = v7;
    Count = CFArrayGetCount(v8);
    v9 = Count;
    if ((~a2->flags & 5) != 0)
    {
      lhs = *a2;
      *(_OWORD *)&rhs.value = *(_OWORD *)&v126->value;
      rhs.epoch = *(_QWORD *)(DerivedStorage + 56);
      CMTimeSubtract(&time, &lhs, &rhs);
      v9 = (uint64_t)(CMTimeGetSeconds(&time) * *(float *)(DerivedStorage + 84));
    }
    v10 = *(_QWORD *)(DerivedStorage + 64);
    if (v9 <= v10 + 1)
      v9 = v10 + 1;
    if (v9 >= Count)
      v9 = Count;
    v125 = v9;
    if (v10 < v9)
    {
      v130 = DerivedStorage + 121;
      while (1)
      {
        ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 72), v10);
        theArray = ValueAtIndex;
        v12 = ValueAtIndex ? CFArrayGetCount(ValueAtIndex) : 0;
        CMTimeMakeWithSeconds(&v144, (float)((float)*(uint64_t *)(DerivedStorage + 64) / *(float *)(DerivedStorage + 84)), *(_DWORD *)(DerivedStorage + 48));
        lhs = *v126;
        rhs = v144;
        CMTimeAdd(&v143, &lhs, &rhs);
        if (v12 >= 1)
          break;
LABEL_145:
        v10 = *(_QWORD *)(DerivedStorage + 64) + 1;
        *(_QWORD *)(DerivedStorage + 64) = v10;
        if (v10 >= v125)
          goto LABEL_146;
      }
      v13 = 0;
      v127 = v12;
      while (1)
      {
        v129 = v13;
        v14 = (OpaqueCMBlockBuffer *)CFArrayGetValueAtIndex(theArray, v13);
        dataPointerOut = 0;
        totalLengthOut = 0;
        result = CMBlockBufferGetDataPointer(v14, 0, 0, &totalLengthOut, &dataPointerOut);
        if ((_DWORD)result)
          return result;
        if ((uint64_t)totalLengthOut >= 1)
          break;
LABEL_142:
        if (*(_BYTE *)(DerivedStorage + 121800 * *(int *)(DerivedStorage + 24) + 112))
        {
          lhs = v143;
          cea708Render(DerivedStorage, (__int128 *)&lhs.value);
        }
        v13 = v129 + 1;
        if (v129 + 1 == v127)
          goto LABEL_145;
      }
      v16 = dataPointerOut;
      v134 = &dataPointerOut[totalLengthOut];
      while (1)
      {
        v18 = (unsigned __int8 *)(v16 + 1);
        v17 = *v16;
        v19 = v17 >> 5;
        if (v17 >> 5 == 7)
        {
          v19 = v16[1] & 0x3F;
          v18 = (unsigned __int8 *)(v16 + 2);
        }
        if (!v19)
          goto LABEL_142;
        v20 = v17 & 0x1F;
        if ((v17 & 0x1F) != 0)
          break;
        v115 = 0;
LABEL_141:
        v16 = (char *)&v18[v115];
        if (&v18[v115] >= (unsigned __int8 *)v134)
          goto LABEL_142;
      }
      v21 = 0;
      v22 = v19 - 1;
      v23 = &v18[v20];
      v148[0] = 0;
      v24 = (v19 - 1);
      v25 = (char *)(DerivedStorage + 121800 * (v19 - 1));
      v138 = v25 + 112;
      v139 = v25 + 120;
      v132 = v24;
      v133 = v25;
      v26 = v25 + 113;
      v131 = (_BYTE *)(v130 + 121800 * v24);
      v135 = v20;
      v136 = v18;
      v27 = v20;
      v137 = v22;
      while (!v21)
      {
        v28 = *v18;
        if (v28 > 0x1F)
        {
          if ((v28 & 0x80) != 0 && v28 <= 0x9F)
          {
            v21 = 0;
            switch(*v18)
            {
              case 0x80u:
              case 0x81u:
              case 0x82u:
              case 0x83u:
              case 0x84u:
              case 0x85u:
              case 0x86u:
              case 0x87u:
                if (v27 < 1)
                  goto LABEL_41;
                v21 = *(_BYTE *)(DerivedStorage + 121800 * v132 + 15224 * (v28 & 7) + 120);
                if (v21)
                {
                  v21 = 0;
                  *v26 = v28 & 7;
                }
                goto LABEL_69;
              case 0x88u:
                if (v27 < 2)
                  goto LABEL_41;
                v81 = 0;
                v82 = 0;
                v83 = v18[1];
                v84 = (uint64_t)v139;
                do
                {
                  if (((v83 >> v81) & 1) != 0)
                  {
                    cea708ClearWindow(v84);
                    v82 = 1;
                  }
                  ++v81;
                  v84 += 15224;
                }
                while (v81 != 8);
                goto LABEL_112;
              case 0x89u:
                if (v27 < 2)
                  goto LABEL_41;
                v85 = 0;
                v86 = 0;
                v87 = v18[1];
                v88 = v131;
                do
                {
                  if (((v87 >> v85) & 1) != 0)
                  {
                    v86 = 1;
                    *v88 = 1;
                  }
                  ++v85;
                  v88 += 15224;
                }
                while (v85 != 8);
                v21 = 0;
                *v138 = v86;
                goto LABEL_115;
              case 0x8Au:
                if (v27 < 2)
                  goto LABEL_41;
                v89 = 0;
                v90 = 0;
                v91 = v18[1];
                v92 = v131;
                do
                {
                  if (((v91 >> v89) & 1) != 0)
                  {
                    *v92 = 0;
                    v90 = 1;
                  }
                  ++v89;
                  v92 += 15224;
                }
                while (v89 != 8);
                goto LABEL_104;
              case 0x8Bu:
                if (v27 < 2)
                  goto LABEL_41;
                v93 = 0;
                v90 = 0;
                v94 = v18[1];
                v95 = v131;
                do
                {
                  if (((v94 >> v93) & 1) != 0)
                  {
                    *v95 = !*v95;
                    v90 = 1;
                  }
                  ++v93;
                  v95 += 15224;
                }
                while (v93 != 8);
LABEL_104:
                v21 = 0;
                *v138 = v90;
                goto LABEL_115;
              case 0x8Cu:
                if (v27 < 2)
                  goto LABEL_41;
                v96 = 0;
                v82 = 0;
                v97 = v18[1];
                v98 = v139;
                do
                {
                  if (((v97 >> v96) & 1) != 0)
                  {
                    bzero(v98, 0x3B78uLL);
                    if (v96 == *v26)
                      *v26 = -1;
                    v82 = 1;
                  }
                  ++v96;
                  v98 += 15224;
                }
                while (v96 != 8);
LABEL_112:
                v21 = 0;
                *v138 = v82;
                v148[0] = 1;
                v3 = &jpt_192967B78;
                goto LABEL_69;
              case 0x8Du:
                if (v27 < 2)
                  goto LABEL_41;
                v21 = 0;
LABEL_115:
                v148[0] = 1;
                goto LABEL_69;
              case 0x8Eu:
                if (v27 < 1)
                  goto LABEL_41;
LABEL_49:
                v21 = 0;
                goto LABEL_68;
              case 0x8Fu:
                if (v27 < 1)
                  goto LABEL_41;
                *v26 = -1;
                v99 = v139;
                v100 = 8;
                do
                {
                  bzero(v99, 0x3B78uLL);
                  v99 += 15224;
                  --v100;
                }
                while (v100);
                v21 = 0;
                *v138 = 1;
                v148[0] = 0;
                goto LABEL_69;
              case 0x90u:
                if (v27 < 3 || (char)*v26 == -1)
                  goto LABEL_41;
                v21 = 0;
                v101 = v18[1];
                v102 = v18[2];
                v103 = &v139[15224 * (char)*v26];
                v103[48] = v101 & 3;
                v103[49] = v102 & 7;
                v103[50] = (v101 >> 2) & 3;
                v103[51] = v102 >> 7;
                v103[52] = (v102 & 0x40) != 0;
                v103[53] = (v102 >> 3) & 7;
                v103[54] = v101 >> 4;
                v103[67] = 1;
                goto LABEL_135;
              case 0x91u:
                if (v27 < 4 || (char)*v26 == -1)
                  goto LABEL_41;
                v21 = 0;
                v104 = v18[2];
                v105 = v18[3];
                v106 = &v139[15224 * (char)*v26];
                *(_DWORD *)(v106 + 55) = (v18[1] << 18) & 0x3000000 | ((v18[1] & 3) << 16) | (((v18[1] >> 2) & 3) << 8) | (v18[1] >> 4) & 3;
                *(_DWORD *)(v106 + 59) = (v104 << 18) & 0x3000000 | ((v104 & 3) << 16) | (((v104 >> 2) & 3) << 8) | (v104 >> 4) & 3;
                *(_DWORD *)(v106 + 63) = (((v105 >> 2) & 3) << 8) & 0xFFFCFFFC | ((v105 & 3) << 16) | (v105 >> 4) & 3;
                v106[67] = 1;
                v107 = 3;
                goto LABEL_139;
              case 0x92u:
                if (v27 < 3 || (char)*v26 == -1)
                  goto LABEL_41;
                v21 = 0;
                v108 = v18[1] & 0xF;
                v109 = v18[2] & 0x3F;
                v110 = &v139[15224 * (char)*v26];
                if (v110[7] < v108)
                  LOWORD(v108) = v110[7];
                if (v110[8] < v109)
                  LOWORD(v109) = v110[8];
                *((_WORD *)v110 + 34) = v108 | ((_WORD)v109 << 8);
                v110[70] = 1;
LABEL_135:
                v107 = 2;
                goto LABEL_139;
              case 0x97u:
                if (v27 < 5 || (char)*v26 == -1)
                  goto LABEL_41;
                v21 = 0;
                v111 = v18[2];
                v112 = v18[3];
                v113 = v18[4];
                v114 = &v139[15224 * (char)*v26];
                *((_DWORD *)v114 + 10) = (v18[1] << 18) & 0x3000000 | ((v18[1] & 3) << 16) | (((v18[1] >> 2) & 3) << 8) | (v18[1] >> 4) & 3;
                *((_DWORD *)v114 + 11) = (((v111 >> 2) & 3) << 8) & 0xFFFCFFFC | ((v111 & 3) << 16) | (v111 >> 4) & 3;
                *((_QWORD *)v114 + 4) = ((unint64_t)(v113 >> 4) << 48) | ((unint64_t)((v112 >> 5) & 4 | (v111 >> 6)) << 56) | ((unint64_t)((v113 >> 2) & 3) << 40) | ((unint64_t)(v113 & 3) << 32) | ((unint64_t)((v112 >> 6) & 1) << 24) | ((unint64_t)((v112 >> 2) & 3) << 16) | ((unint64_t)((v112 >> 4) & 3) << 8) | v112 & 3;
                v107 = 4;
LABEL_139:
                v148[0] = v107;
                break;
              case 0x98u:
              case 0x99u:
              case 0x9Au:
              case 0x9Bu:
              case 0x9Cu:
              case 0x9Du:
              case 0x9Eu:
              case 0x9Fu:
                if (v27 >= 7)
                {
                  v61 = v18[1];
                  v62 = v18[2];
                  v63 = v18[3];
                  v64 = v18[4];
                  v65 = v18[6];
                  v66 = v64 >> 4;
                  v67 = v18[5] & 0x3F;
                  v68 = (v65 >> 3) & 7;
                  if ((v64 & 0xF) == 0xF)
                    v69 = 14;
                  else
                    v69 = v64 & 0xF;
                  if (v67 >= 0x29)
                    v67 = 41;
                  v70 = (double)((v67 + 1) >> 1);
                  if (v66 != 1)
                    v70 = 0.0;
                  v71 = &v139[15224 * (v28 & 7)];
                  v72 = *v71;
                  if (v68 || !*v71)
                  {
                    if (v68 <= 1)
                      v68 = 1;
                    v73 = *(_OWORD *)&kPREDEFINED_WINDOW_STYLES[16 * v68 - 16];
                  }
                  else
                  {
                    v73 = *(_OWORD *)&v139[15224 * (v28 & 7) + 32];
                  }
                  *(_OWORD *)&rhs.value = v73;
                  v75 = v65 & 7;
                  if (v75 || !v72)
                  {
                    if (v75 <= 1)
                      v75 = 1;
                    v79 = (char *)&kPREDEFINED_PEN_STYLES + 19 * v75;
                    *(_OWORD *)&lhs.value = *(_OWORD *)(v79 - 19);
                    *(CMTimeFlags *)((char *)&lhs.flags + 3) = *((_DWORD *)v79 - 1);
                    v76 = 1;
                    v77 = v139;
                  }
                  else
                  {
                    v76 = 0;
                    v77 = v139;
                    v78 = &v139[15224 * (v28 & 7)];
                    *(_OWORD *)&lhs.value = *((_OWORD *)v78 + 3);
                    *(CMTimeFlags *)((char *)&lhs.flags + 3) = *(_DWORD *)(v78 + 63);
                  }
                  *v71 = 1;
                  v80 = &v77[15224 * (v28 & 7)];
                  v80[1] = (v61 & 0x20) != 0;
                  v80[2] = v61 & 7;
                  v80[3] = v66;
                  v80[4] = v62 >> 7;
                  v80[5] = v62 & 0x7F;
                  v80[6] = v63;
                  v80[7] = v69;
                  v80[8] = v67;
                  v80[9] = (v61 & 8) != 0;
                  v80[10] = (v61 & 0x10) != 0;
                  *((_OWORD *)v80 + 2) = *(_OWORD *)&rhs.value;
                  *((_OWORD *)v80 + 3) = *(_OWORD *)&lhs.value;
                  *(_DWORD *)(v80 + 63) = *(CMTimeFlags *)((char *)&lhs.flags + 3);
                  v80[67] = v76;
                  v80[70] = 1;
                  *((_DWORD *)v80 + 3) = v67 > 0x1F;
                  *((double *)v80 + 2) = floor((double)v63 / 5.0 + 0.5) - v70;
                  *((double *)v80 + 3) = floor((double)(v62 & 0x7F) / 5.0 + 0.5);
                  *v26 = v28 & 7;
                  v148[0] = 6;
                }
                goto LABEL_41;
              default:
                goto LABEL_69;
            }
            goto LABEL_69;
          }
          v39 = v22;
          v41 = DerivedStorage;
          v42 = v18;
          v43 = v27;
          v40 = 0;
          goto LABEL_40;
        }
        v29 = (char)*v26;
        if (v29 != -1)
        {
          v21 = 0;
          switch(*v18)
          {
            case 8u:
              v30 = &v139[15224 * (char)*v26];
              v33 = *((unsigned __int16 *)v30 + 34);
              v32 = v30 + 68;
              v31 = v33;
              v34 = v33 - 256;
              if (v33 < 0x100)
                goto LABEL_49;
              v35 = 0;
              *v32 = v34;
              v36 = &v139[15224 * (int)v29];
              v36[70] = 1;
              v36 += 72;
              v37 = (uint64_t)&v36[1010 * v34 + 24 * HIBYTE(v34)];
              *(_QWORD *)(v37 + 2) = 0;
              *(_QWORD *)(v37 + 18) = 0;
              *(_QWORD *)(v37 + 10) = 0;
              v38 = &v36[1010 * v31];
              while (!v38[v35 + 2])
              {
                v35 += 24;
                if (v35 == 1008)
                  goto LABEL_64;
              }
              *v38 = 0;
              goto LABEL_64;
            case 0xCu:
              cea708ClearWindow((uint64_t)&v139[15224 * (char)*v26]);
              goto LABEL_64;
            case 0xDu:
              v44 = DerivedStorage;
              v45 = v26;
              v46 = v3;
              v47 = v139;
              v48 = &v139[15224 * (int)v29];
              v51 = *((_WORD *)v48 + 34);
              v49 = v48 + 68;
              v50 = v51;
              LOBYTE(v52) = v51 + 1;
              *(_WORD *)v49 = (v51 + 1);
              v49[2] = 1;
              if (*(v49 - 61) < (v51 + 1))
              {
                v49[2] = 1;
                v52 = v50;
                *(_WORD *)v49 = v50;
                if (v50)
                {
                  v53 = &v133[15224 * (int)v29];
                  v54 = v50;
                  do
                  {
                    memcpy(v53 + 192, v53 + 1202, 0x3F2uLL);
                    v53 += 1010;
                    --v54;
                  }
                  while (v54);
                  v55 = v52;
                  v46 = &jpt_192967B78;
                }
                else
                {
                  v55 = 0;
                }
                v47 = v139;
                bzero(&v139[15224 * (int)v29 + 72 + 1010 * v55], 0x3F2uLL);
              }
              v21 = 0;
              v47[15224 * (int)v29 + 72 + 1010 * v52] = 1;
              *v138 = 1;
              v3 = v46;
              v26 = v45;
              DerivedStorage = v44;
              v22 = v137;
              break;
            case 0xEu:
              v56 = &v139[15224 * (char)*v26];
              v59 = *((unsigned __int16 *)v56 + 34);
              v57 = v56 + 68;
              v58 = v59;
              if (v59 < 0x100)
                goto LABEL_49;
              v60 = &v139[15224 * (char)*v26];
              *v57 = v58;
              v60[70] = 1;
              bzero(&v60[1010 * v58 + 72], 0x3F2uLL);
LABEL_64:
              v21 = 0;
              *v138 = 1;
              break;
            case 0x10u:
              v21 = 1;
              break;
            default:
              break;
          }
LABEL_68:
          v148[0] = 0;
          goto LABEL_69;
        }
LABEL_41:
        v21 = 0;
LABEL_69:
        v74 = v148[0] + 1;
        v18 += v74;
        v27 -= v74;
        if (v18 >= v23)
        {
          v115 = v135;
          v18 = v136;
          goto LABEL_141;
        }
      }
      v39 = v22;
      v40 = v21;
      v41 = DerivedStorage;
      v42 = v18;
      v43 = v27;
LABEL_40:
      cea708ProcessCharacters(v41, v39, v42, v43, v40, v148);
      goto LABEL_41;
    }
LABEL_146:
    if (Count == v10)
    {
      v116 = v122;
      *(_OWORD *)&v126->value = v122;
      v117 = v121;
      v126->epoch = v121;
      *(_QWORD *)(DerivedStorage + 64) = 0;
      v118 = *(const void **)(DerivedStorage + 72);
      if (v118)
      {
        CFRelease(v118);
        v117 = v121;
        v116 = v122;
        *(_QWORD *)(DerivedStorage + 72) = 0;
      }
      *(_QWORD *)(DerivedStorage + 80) = 0x41F0000000000000;
      *(_OWORD *)&v145.value = v116;
      v145.epoch = v117;
    }
    else
    {
      CMTimeMakeWithSeconds(&lhs, (float)((float)v10 / *(float *)(DerivedStorage + 84)), *(_DWORD *)(DerivedStorage + 48));
      epoch = lhs.epoch;
      v144 = lhs;
      v120 = *(_OWORD *)&lhs.value;
      lhs = *v126;
      *(_OWORD *)&rhs.value = v120;
      rhs.epoch = epoch;
      CMTimeAdd(&v145, &lhs, &rhs);
    }
  }
  result = 0;
  if (a3)
    *a3 = v145;
  return result;
}

uint64_t cea708_ResetAtTime(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  __int128 v5;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cea708Initialize(DerivedStorage);
  if (*(_BYTE *)(DerivedStorage + 121800 * *(int *)(DerivedStorage + 24) + 112))
  {
    v5 = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
    cea708Render(DerivedStorage, &v5);
  }
  return 0;
}

uint64_t cea708CreateDTVCCDataPacketBBufArray(uint64_t a1, char *a2, uint64_t a3, __CFArray **a4, _QWORD *a5)
{
  char v5;
  unsigned int v6;
  unint64_t v7;
  const __CFAllocator *v10;
  __CFArray *Mutable;
  unsigned int v12;
  CMBlockBufferRef *v13;
  char *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v18;
  unsigned int v19;
  int v20;
  CMBlockBufferRef v21;
  uint64_t v22;
  uint64_t v23;
  OpaqueCMBlockBuffer *v24;
  uint64_t v25;

  v5 = *a2;
  v6 = *a2 & 0x1F;
  v7 = 3 * (*a2 & 0x1F);
  if (a3 - 2 < v7)
    return 4294950853;
  if (a5)
  {
    *a5 = (v7 + 2);
    v5 = *a2;
  }
  if ((v5 & 0x40) == 0)
    return 0;
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!v6)
  {
LABEL_35:
    v25 = 0;
    *a4 = Mutable;
    return v25;
  }
  v12 = 0;
  v13 = (CMBlockBufferRef *)(a1 + 104);
  v14 = a2 + 4;
  while (1)
  {
    v15 = *(v14 - 2);
    v16 = v15 & 3;
    if (v15 < 0xFC || v16 < 2)
      goto LABEL_34;
    if (v16 == 3)
      break;
    if (!*v13)
    {
      *(_BYTE *)(a1 + 88) = -1;
      goto LABEL_33;
    }
    v22 = CMBlockBufferReplaceDataBytes(v14 - 1, *v13, *(_QWORD *)(a1 + 96), 2uLL);
    if ((_DWORD)v22)
      goto LABEL_37;
    v23 = *(_QWORD *)(a1 + 96) + 2;
LABEL_28:
    *(_QWORD *)(a1 + 96) = v23;
    v24 = *(OpaqueCMBlockBuffer **)(a1 + 104);
    if (!v24 || CMBlockBufferGetDataLength(v24) != *(_QWORD *)(a1 + 96))
      goto LABEL_34;
    CFArrayAppendValue(Mutable, *v13);
    if (*v13)
    {
      CFRelease(*v13);
      *v13 = 0;
    }
LABEL_33:
    *(_QWORD *)(a1 + 96) = 0;
LABEL_34:
    ++v12;
    v14 += 3;
    if (v12 >= v6)
      goto LABEL_35;
  }
  v18 = *(v14 - 1);
  v19 = v18 >> 6;
  v20 = *(unsigned __int8 *)(a1 + 88);
  if (v20 == 255)
  {
    v21 = *v13;
  }
  else
  {
    if (v20 == 3)
      LOBYTE(v20) = -1;
    v21 = *v13;
    if ((char)v20 + 1 != v19)
    {
      *(_BYTE *)(a1 + 88) = -1;
      *(_QWORD *)(a1 + 96) = 0;
      if (!v21)
        goto LABEL_26;
      goto LABEL_25;
    }
  }
  if (v21)
  {
    *(_BYTE *)(a1 + 88) = -1;
    *(_QWORD *)(a1 + 96) = 0;
LABEL_25:
    CFRelease(v21);
    *v13 = 0;
  }
LABEL_26:
  *(_BYTE *)(a1 + 88) = v19;
  v22 = CMBlockBufferCreateWithMemoryBlock(v10, 0, 2 * (v18 & 0x3F) - 1, v10, 0, 0, 2 * (v18 & 0x3F) - 1, 1u, (CMBlockBufferRef *)(a1 + 104));
  if (!(_DWORD)v22)
  {
    v22 = CMBlockBufferReplaceDataBytes(v14, *v13, 0, 1uLL);
    v23 = 1;
    if (!(_DWORD)v22)
      goto LABEL_28;
  }
LABEL_37:
  v25 = v22;
  if (Mutable)
    CFRelease(Mutable);
  return v25;
}

void cea708Render(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  const __CFAllocator *v4;
  const CFArrayCallBacks *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  CGColorSpace *v15;
  __CFArray *v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __CFDictionary *CommandData;
  __CFDictionary *v25;
  uint64_t v26;
  char v27;
  int v28;
  int v29;
  unsigned __int8 *v30;
  int v31;
  int v32;
  int v33;
  int v34;
  CGColorSpace *v35;
  __CFDictionary *v36;
  _BYTE *v37;
  CGColorRef CGColor;
  CGColorRef v39;
  const void *v40;
  __CFDictionary *v41;
  __CFDictionary *v42;
  uint64_t v43;
  const void *v44;
  void (*v45)(uint64_t, __CFDictionary *, __int128 *, uint64_t);
  __CFDictionary *v46;
  uint64_t v47;
  const void *v48;
  void (*v49)(uint64_t, __CFDictionary *, __int128 *, uint64_t);
  uint64_t v50;
  const void *v51;
  void (*v52)(uint64_t, _QWORD, __int128 *, uint64_t);
  int v54;
  const void *v55;
  const void *v56;
  __CFArray *v57;
  __CFArray *Mutable;
  unsigned __int8 *v59;
  uint64_t v60;
  __CFArray *theArray;
  uint64_t v62;
  double *v63;
  double *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  unsigned int v70;
  CFAllocatorRef allocator;
  _QWORD v72[84];
  __int128 v73;
  uint64_t v74;
  _OWORD v75[5];
  int v76;
  uint64_t v77;

  v2 = a1;
  v77 = *MEMORY[0x1E0C80C00];
  v54 = *(_DWORD *)(a1 + 24);
  v3 = a1 + 121800 * v54;
  v66 = v3 + 120;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v5 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 8, MEMORY[0x1E0C9B378]);
  allocator = v4;
  v6 = 0;
  v57 = CFArrayCreateMutable(v4, 8, v5);
  v56 = (const void *)*MEMORY[0x1E0C9AE50];
  v55 = (const void *)*MEMORY[0x1E0C9AE40];
  v7 = v3 + 199;
  v8 = (unsigned __int8 *)(v3 + 194);
  v62 = v2;
  do
  {
    if (*(_BYTE *)(v66 + 15224 * v6 + 1))
    {
      v9 = v66 + 15224 * v6;
      v64 = (double *)(v9 + 16);
      v63 = (double *)(v9 + 24);
      v60 = v7;
      theArray = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
      v10 = 0;
      v11 = 0x7FFFFFFF;
      v12 = 0x80000000;
      v59 = v8;
      v13 = 0x80000000;
      v65 = v6;
      do
      {
        if (*(_BYTE *)(v66 + 15224 * v6 + 1010 * v10 + 72))
        {
          v67 = v13;
          v68 = v11;
          v69 = v12;
          v14 = (int)(*v64 + 1.0);
          v70 = (int)(*v63 + (double)(int)v10 + 1.0);
          v15 = *(CGColorSpace **)(v2 + 32);
          v76 = 0;
          memset(v75, 0, sizeof(v75));
          bzero(&v73, 0x31EuLL);
          bzero(v72, 0x2A0uLL);
          v16 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
          v17 = 0;
          v18 = 0;
          v19 = 0;
          v20 = 0;
          v21 = v7;
          do
          {
            if (*(_BYTE *)(v21 - 5))
            {
              if (!v19)
                v20 = v17;
              if (*(_BYTE *)(v21 - 1))
              {
                v22 = v19;
                if (v18)
                  v72[2 * v18 - 1] = v19 - v72[2 * v18 - 2];
                v23 = (char *)&v73 + 19 * v18;
                *(_OWORD *)v23 = *(_OWORD *)v21;
                *(_DWORD *)(v23 + 15) = *(_DWORD *)(v21 + 15);
                v72[2 * v18++] = v19;
              }
              else
              {
                v22 = v19;
              }
              *((_WORD *)v75 + v22) = *(_WORD *)(v21 - 3);
              ++v19;
            }
            else if (v19)
            {
              v72[2 * v18 - 1] = v19 - v72[2 * v18 - 2];
              CommandData = cea708CreateCommandData(allocator, (const UniChar *)v75, v19, v18, (uint64_t)&v73, (uint64_t)v72, (v20 + v14), v70, v15);
              CFArrayAppendValue(v16, CommandData);
              if (CommandData)
                CFRelease(CommandData);
              v19 = 0;
              v18 = 0;
            }
            ++v17;
            v21 += 24;
          }
          while (v17 != 42);
          if (v19)
          {
            v72[2 * v18 - 1] = v19 - v72[2 * v18 - 2];
            v25 = cea708CreateCommandData(allocator, (const UniChar *)v75, v19, v18, (uint64_t)&v73, (uint64_t)v72, (v20 + v14), v70, v15);
            CFArrayAppendValue(v16, v25);
            if (v25)
              CFRelease(v25);
          }
          v2 = v62;
          v6 = v65;
          v12 = v69;
          v13 = v67;
          if (v16)
          {
            if (CFArrayGetCount(v16))
              CFArrayAppendValue(theArray, v16);
            CFRelease(v16);
          }
          v26 = 0;
          v27 = 0;
          v28 = 0x7FFFFFFF;
          v29 = 0x80000000;
          v30 = v8;
          do
          {
            v32 = *v30;
            v30 += 24;
            v31 = v32;
            if (v28 >= (int)v26)
              v33 = v26;
            else
              v33 = v28;
            if (v29 <= (int)v26)
              v34 = v26;
            else
              v34 = v29;
            if (v31)
            {
              v28 = v33;
              v29 = v34;
              v27 = 1;
            }
            ++v26;
          }
          while (v26 != 42);
          v11 = v68;
          if (v68 < v28)
            v28 = v68;
          if (v67 > v29)
            v29 = v67;
          if (v27)
          {
            v11 = v28;
            v13 = v29;
          }
          if (v12 <= (int)v10)
            v12 = v10;
        }
        ++v10;
        v7 += 1010;
        v8 += 1010;
      }
      while (v10 != 15);
      v8 = v59;
      v7 = v60;
      if (theArray && CFArrayGetCount(theArray))
      {
        v35 = *(CGColorSpace **)(v2 + 32);
        v36 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v37 = (_BYTE *)(v66 + 15224 * v6);
        CGColor = cea708CreateCGColor(v35, v37 + 40);
        v39 = cea708CreateCGColor(v35, v37 + 44);
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        CFDictionaryAddValue(v36, CFSTR("U"), CFSTR("cells"));
        FigCFDictionarySetCGRect();
        CFDictionaryAddValue(v36, CFSTR("C"), CGColor);
        FigCFDictionarySetInt32();
        CFDictionaryAddValue(v36, CFSTR("G"), v39);
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        if (v37[35])
          v40 = v56;
        else
          v40 = v55;
        CFDictionarySetValue(v36, CFSTR("O"), v40);
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        if (v39)
          CFRelease(v39);
        if (CGColor)
          CFRelease(CGColor);
        CFArrayAppendValue(v57, v36);
        if (v36)
          CFRelease(v36);
        v41 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        FigCFDictionarySetInt32();
        CFDictionaryAddValue(v41, CFSTR("R"), theArray);
        CFRelease(theArray);
        CFArrayAppendValue(Mutable, v41);
        v7 = v60;
        if (v41)
          CFRelease(v41);
      }
    }
    ++v6;
    v7 += 15224;
    v8 += 15224;
  }
  while (v6 != 8);
  CFArrayGetCount(v57);
  v42 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(v42, CFSTR("F"), CFSTR("c708"));
  CFDictionaryAddValue(v42, CFSTR("W"), v57);
  if (*(_QWORD *)(v2 + 8))
  {
    v43 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v43)
    {
      v44 = (const void *)v43;
      v45 = *(void (**)(uint64_t, __CFDictionary *, __int128 *, uint64_t))(v2 + 8);
      v73 = *a2;
      v74 = *((_QWORD *)a2 + 2);
      v45(6, v42, &v73, v43);
      CFRelease(v44);
    }
  }
  if (v42)
    CFRelease(v42);
  if (v57)
    CFRelease(v57);
  if (Mutable)
    CFArrayGetCount(Mutable);
  v46 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(v46, CFSTR("F"), CFSTR("c708"));
  CFDictionaryAddValue(v46, CFSTR("C"), Mutable);
  if (*(_QWORD *)(v2 + 8))
  {
    v47 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v47)
    {
      v48 = (const void *)v47;
      v49 = *(void (**)(uint64_t, __CFDictionary *, __int128 *, uint64_t))(v2 + 8);
      v73 = *a2;
      v74 = *((_QWORD *)a2 + 2);
      v49(7, v46, &v73, v47);
      CFRelease(v48);
    }
  }
  if (v46)
    CFRelease(v46);
  if (Mutable)
    CFRelease(Mutable);
  if (*(_QWORD *)(v2 + 8))
  {
    v50 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v50)
    {
      v51 = (const void *)v50;
      v52 = *(void (**)(uint64_t, _QWORD, __int128 *, uint64_t))(v2 + 8);
      v73 = *a2;
      v74 = *((_QWORD *)a2 + 2);
      v52(1, 0, &v73, v50);
      CFRelease(v51);
    }
  }
  *(_BYTE *)(v2 + 121800 * v54 + 112) = 0;
}

uint64_t cea708ProcessCharacters(uint64_t result, unsigned int a2, unsigned __int8 *a3, int a4, int a5, _DWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  __int16 v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  int v22;
  uint64_t v23;

  if (a4 >= 1)
  {
    v6 = *(char *)(result + 121800 * a2 + 113);
    if (v6 != -1)
    {
      v7 = result + 121800 * a2;
      v8 = v7 + 120;
      v9 = v7 + 120 + 15224 * *(char *)(v7 + 113);
      v11 = *(unsigned __int8 *)(v9 + 69);
      v10 = (_BYTE *)(v9 + 69);
      if (v11 <= *(v10 - 61))
      {
        v12 = v8 + 15224 * *(char *)(result + 121800 * a2 + 113);
        v13 = *(unsigned __int16 *)(v12 + 68);
        v14 = v13 >> 8;
        v15 = *(_WORD *)(v12 + 68);
        v16 = *a3;
        *(_BYTE *)(v12 + 1010 * *(_WORD *)(v12 + 68) + 24 * (v13 >> 8) + 74) = 1;
        if (a5)
        {
          v17 = 95;
          switch(v16)
          {
            case ' ':
              v17 = 32;
              break;
            case '!':
              v17 = 160;
              break;
            case '"':
            case '#':
            case '$':
            case '&':
            case '\'':
            case '(':
            case ')':
            case '+':
            case '-':
            case '.':
            case '/':
            case '6':
            case '7':
            case '8':
            case ';':
            case '>':
              break;
            case '%':
              v17 = 8230;
              break;
            case '*':
              v17 = 352;
              break;
            case ',':
              v17 = 338;
              break;
            case '0':
              v17 = 9608;
              break;
            case '1':
              v17 = 8216;
              break;
            case '2':
              v17 = 8217;
              break;
            case '3':
              v17 = 8220;
              break;
            case '4':
              v17 = 8221;
              break;
            case '5':
              v17 = 8226;
              break;
            case '9':
              v17 = 8482;
              break;
            case ':':
              v17 = 353;
              break;
            case '<':
              v17 = 339;
              break;
            case '=':
              v17 = 8480;
              break;
            case '?':
              v17 = 376;
              break;
            default:
              switch(v16)
              {
                case 'v':
                  v17 = 8539;
                  break;
                case 'w':
                  v17 = 8540;
                  break;
                case 'x':
                  v17 = 8541;
                  break;
                case 'y':
                  v17 = 8542;
                  break;
                case 'z':
                  v17 = 9474;
                  break;
                case '{':
                  v17 = 9488;
                  break;
                case '|':
                  v17 = 9492;
                  break;
                case '}':
                  v17 = 9472;
                  break;
                case '~':
                  v17 = 9496;
                  break;
                case '\x7F':
                  v17 = 9484;
                  break;
                default:
                  goto LABEL_10;
              }
              break;
          }
        }
        else if (v16 == 127)
        {
          v17 = 9834;
        }
        else
        {
          v17 = v16;
        }
LABEL_10:
        v18 = (_BYTE *)(v7 + 112);
        v19 = v8 + 15224 * (int)v6;
        result = 24;
        v20 = v19 + 1010 * v15 + 24 * v14;
        *(_WORD *)(v20 + 76) = v17;
        *(_OWORD *)(v20 + 79) = *(_OWORD *)(v19 + 48);
        *(_DWORD *)(v20 + 94) = *(_DWORD *)(v19 + 63);
        v22 = *(unsigned __int8 *)(v19 + 67);
        v21 = (_BYTE *)(v19 + 67);
        if (v22 || *(_BYTE *)(v8 + 15224 * (int)v6 + 70))
          *(_BYTE *)(v8 + 15224 * (int)v6 + 1010 * v15 + 24 * v14 + 78) = 1;
        *v10 = BYTE1(v13) + 1;
        *v21 = 0;
        v23 = v8 + 15224 * (int)v6;
        *(_BYTE *)(v23 + 70) = 0;
        *(_BYTE *)(v23 + 1010 * v13 + 72) = 1;
        *v18 = 1;
        *a6 = 0;
      }
    }
  }
  return result;
}

void cea708ClearWindow(uint64_t a1)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)(a1 + 72);
  v3 = 15;
  do
  {
    bzero(v2, 0x3F2uLL);
    v2 += 1010;
    --v3;
  }
  while (v3);
  *(_WORD *)(a1 + 68) = 0;
  *(_BYTE *)(a1 + 70) = 1;
}

__CFDictionary *cea708CreateCommandData(const __CFAllocator *a1, const UniChar *a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CGColorSpace *a9)
{
  CFIndex v13;
  const __CFString *v14;
  __CFAttributedString *Mutable;
  const void *v16;
  const void *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  CGColorRef CGColor;
  CGColorRef v22;
  CGColorRef v23;
  __CFDictionary *v24;
  const void *v25;
  const void *v26;
  const CFDictionaryKeyCallBacks *v27;
  const CFDictionaryValueCallBacks *v28;
  CFMutableDictionaryRef v29;
  __CFDictionary *v30;
  const __CFAllocator *allocator;
  __CFAttributedString *v33;
  CFRange v34;

  v13 = a3;
  v14 = CFStringCreateWithCharacters(a1, a2, a3);
  allocator = a1;
  Mutable = CFAttributedStringCreateMutable(a1, v13);
  CFAttributedStringBeginEditing(Mutable);
  v33 = Mutable;
  v34.location = 0;
  v34.length = 0;
  CFAttributedStringReplaceString(Mutable, v34, v14);
  if (v14)
    CFRelease(v14);
  if (a4 >= 1)
  {
    v16 = (const void *)*MEMORY[0x1E0C9AE50];
    v17 = (const void *)*MEMORY[0x1E0C9AE40];
    v18 = a4;
    v19 = (unsigned __int8 *)(a5 + 7);
    v20 = a6 + 8;
    do
    {
      CGColor = cea708CreateCGColor(a9, v19);
      v22 = cea708CreateCGColor(a9, v19 + 4);
      v23 = cea708CreateCGColor(a9, v19 + 8);
      v24 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CFDictionarySetValue(v24, CFSTR("t"), CGColor);
      CFDictionarySetValue(v24, CFSTR("b"), v22);
      CFDictionarySetValue(v24, CFSTR("e"), v23);
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      if (*(v19 - 3))
        v25 = v16;
      else
        v25 = v17;
      CFDictionarySetValue(v24, CFSTR("u"), v25);
      if (*(v19 - 4))
        v26 = v16;
      else
        v26 = v17;
      CFDictionarySetValue(v24, CFSTR("i"), v26);
      CFDictionarySetValue(v24, CFSTR("d"), v16);
      CGColorRelease(v23);
      CGColorRelease(v22);
      CGColorRelease(CGColor);
      CFAttributedStringSetAttributes(v33, *(CFRange *)(v20 - 8), v24, 1u);
      if (v24)
        CFRelease(v24);
      v19 += 19;
      v20 += 16;
      --v18;
    }
    while (v18);
  }
  CFAttributedStringEndEditing(v33);
  v27 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v28 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v29 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  v30 = CFDictionaryCreateMutable(allocator, 0, v27, v28);
  CFDictionarySetValue(v30, CFSTR("S"), v33);
  CFDictionarySetValue(v30, CFSTR("L"), v29);
  if (v29)
    CFRelease(v29);
  if (v33)
    CFRelease(v33);
  return v30;
}

CGColorRef cea708CreateCGColor(CGColorSpace *a1, unsigned __int8 *a2)
{
  double v2;
  int v3;
  double v4;
  CGFloat components[5];

  components[4] = *(CGFloat *)MEMORY[0x1E0C80C00];
  v2 = (double)(a2[1] >> 1);
  components[0] = (double)(*a2 >> 1);
  components[1] = v2;
  v3 = a2[3];
  v4 = 1.0;
  if (v3 == 2)
    v4 = 0.5;
  if (v3 == 3)
    v4 = 0.0;
  components[2] = (double)(a2[2] >> 1);
  components[3] = v4;
  return CGColorCreate(a1, components);
}

uint64_t FigReportingModeratorCreateForStreamingAssetDownloader(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t DerivedStorage;
  CFTypeRef v7;

  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a3)
    return 4294949785;
  FigReportingModeratorGetClassID();
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (a2)
      v7 = CFRetain(a2);
    else
      v7 = 0;
    *(_QWORD *)DerivedStorage = v7;
    v5 = 0;
    *(_QWORD *)(DerivedStorage + 8) = FigGetUpTimeNanoseconds();
    *(_BYTE *)(DerivedStorage + 40) = 0;
    *a3 = 0;
  }
  return v5;
}

void downloaderFinalize()
{
  const void **DerivedStorage;
  const void *v1;

  DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v1 = *DerivedStorage;
    if (v1)
      CFRelease(v1);
  }
}

__CFString *downloaderCopyDebugDescription()
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("FigStreamingDownloaderReportingModerator:"));
  return Mutable;
}

uint64_t downloaderModeratorProcessEventAndCopyKeyArray(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t UpTimeNanoseconds;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, __CFString *, __CFString *, unint64_t);
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, __CFString *, __CFString *, unint64_t);
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, __CFString *, __CFString *, unint64_t);
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, __CFString *, __CFString *, unint64_t);
  uint64_t *v21;
  uint64_t v22;
  void (*v23)(uint64_t, __CFString *, __CFString *);
  CFTypeRef v24;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = 4294949785;
  if (a3 && DerivedStorage)
  {
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    v8 = UpTimeNanoseconds;
    switch(a2)
    {
      case 701:
        v18 = *(_QWORD *)DerivedStorage;
        v19 = *(_QWORD *)(DerivedStorage + 24);
        v20 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 88);
        if (v20)
          v20(v18, CFSTR("moderatorStats"), CFSTR("DownloadMediaTime"), (v8 - v19) / 0xF4240uLL);
        break;
      case 704:
        *(_BYTE *)(DerivedStorage + 41) = 1;
        *(_QWORD *)(DerivedStorage + 16) = UpTimeNanoseconds;
        break;
      case 705:
        if (!*(_BYTE *)(DerivedStorage + 40))
        {
          v9 = *(_QWORD *)DerivedStorage;
          v10 = *(_QWORD *)(DerivedStorage + 8);
          v11 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 88);
          if (v11)
            v11(v9, CFSTR("moderatorStats"), CFSTR("DuetScheduleTime"), (v8 - v10) / 0xF4240uLL);
          *(_BYTE *)(DerivedStorage + 40) = 1;
          *(_QWORD *)(DerivedStorage + 24) = v8;
        }
        if (*(_BYTE *)(DerivedStorage + 41))
        {
          v12 = *(_QWORD *)DerivedStorage;
          v13 = *(_QWORD *)(DerivedStorage + 16);
          v14 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 88);
          if (v14)
            v14(v12, CFSTR("moderatorStats"), CFSTR("LastPausedDur"), (v8 - v13) / 0xF4240uLL);
          v15 = *(_QWORD *)DerivedStorage;
          v16 = *(_QWORD *)(DerivedStorage + 16);
          v17 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 64);
          if (v17)
            v17(v15, CFSTR("moderatorStats"), CFSTR("PauseTime"), (v8 - v16) / 0xF4240uLL);
          *(_BYTE *)(DerivedStorage + 41) = 0;
        }
        else
        {
          *(_QWORD *)(DerivedStorage + 32) = v8;
        }
        v22 = *(_QWORD *)DerivedStorage;
        v23 = *(void (**)(uint64_t, __CFString *, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 104);
        if (v23)
          v23(v22, CFSTR("moderatorStats"), CFSTR("PauseForInteractive"));
        v21 = &kFigReportingEventKeysArray_DownloadStartEvent;
LABEL_26:
        MEMORY[0x19402F294](&fsdrm_copyEventKeyArray_sCreateStaticKeyArrayFromEventKeysOnce, fsdrm_createStaticKeyArrayFromEventKeys);
        goto LABEL_27;
      default:
        MEMORY[0x19402F294](&fsdrm_copyEventKeyArray_sCreateStaticKeyArrayFromEventKeysOnce, fsdrm_createStaticKeyArrayFromEventKeys);
        if (a2 != 707)
          goto LABEL_29;
        v21 = &kFigReportingEventKeysArray_DownloadErrorEvent;
LABEL_27:
        if (*v21)
        {
          v24 = CFRetain((CFTypeRef)*v21);
LABEL_30:
          result = 0;
          *a3 = v24;
          return result;
        }
LABEL_29:
        v24 = 0;
        goto LABEL_30;
    }
    v21 = &kFigReportingEventKeysArray_DownloadEndedEvent;
    goto LABEL_26;
  }
  return result;
}

uint64_t downloaderModeratorPostProcessPayloadForEvent(int a1, int a2, CFDictionaryRef theDict)
{
  const __CFAllocator *v4;
  const __CFDictionary *Copy;
  const __CFDictionary *v6;
  const __CFDictionary *v7;
  const __CFDictionary *v8;
  uint64_t v10;
  void *value;

  if (theDict && CFDictionaryGetCount(theDict) >= 1)
  {
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theDict);
    if (Copy)
    {
      v6 = Copy;
      CFDictionaryApplyFunction(Copy, (CFDictionaryApplierFunction)fsdrm_stringifyArrayFunc, theDict);
      CFRelease(v6);
    }
    v10 = 0;
    value = 0;
    v7 = CFDictionaryCreateCopy(v4, theDict);
    if (v7)
    {
      v8 = v7;
      CFDictionaryGetValueIfPresent(v7, CFSTR("TotBytesDown"), (const void **)&value);
      if (value)
      {
        CFNumberGetValue((CFNumberRef)value, kCFNumberSInt64Type, &v10);
        v10 = 1000000 * (v10 / 1000000);
        FigCFDictionarySetInt64();
      }
      CFRelease(v8);
    }
  }
  return 0;
}

CFArrayRef fsdrm_createStaticKeyArrayFromEventKeys()
{
  const __CFAllocator *v0;
  CFArrayRef result;
  _BYTE v2[408];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  memcpy(v2, off_1E2F79628, 0x168uLL);
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)v2, 45, 0);
  kFigReportingEventKeysArray_DownloadStartEvent = (uint64_t)result;
  if (result)
  {
    memcpy(v2, off_1E2F79790, sizeof(v2));
    result = CFArrayCreate(v0, (const void **)v2, 51, 0);
    kFigReportingEventKeysArray_DownloadEndedEvent = (uint64_t)result;
    if (result)
    {
      memcpy(v2, off_1E2F79928, 0x138uLL);
      result = CFArrayCreate(v0, (const void **)v2, 39, 0);
      kFigReportingEventKeysArray_DownloadErrorEvent = (uint64_t)result;
      if (result)
      {
        *(_OWORD *)&v2[160] = xmmword_1E2F79B00;
        *(_OWORD *)&v2[176] = *(_OWORD *)&off_1E2F79B10;
        *(_OWORD *)&v2[192] = xmmword_1E2F79B20;
        *(_QWORD *)&v2[208] = &kFigReportingEventKey_PlaylistHasLosslessAudio;
        *(_OWORD *)&v2[96] = xmmword_1E2F79AC0;
        *(_OWORD *)&v2[112] = *(_OWORD *)&off_1E2F79AD0;
        *(_OWORD *)&v2[128] = xmmword_1E2F79AE0;
        *(_OWORD *)&v2[144] = *(_OWORD *)&off_1E2F79AF0;
        *(_OWORD *)&v2[32] = xmmword_1E2F79A80;
        *(_OWORD *)&v2[48] = *(_OWORD *)&off_1E2F79A90;
        *(_OWORD *)&v2[64] = xmmword_1E2F79AA0;
        *(_OWORD *)&v2[80] = *(_OWORD *)&off_1E2F79AB0;
        *(_OWORD *)v2 = xmmword_1E2F79A60;
        *(_OWORD *)&v2[16] = *(_OWORD *)&off_1E2F79A70;
        result = CFArrayCreate(v0, (const void **)v2, 27, 0);
        kFigReportingEventKeysArray_DownloadPausedEvent = (uint64_t)result;
      }
    }
  }
  return result;
}

void fsdrm_stringifyArrayFunc(const void *a1, const __CFArray *a2, __CFDictionary *a3)
{
  CFTypeID TypeID;
  CFMutableStringRef Mutable;
  __CFString *v8;
  CFIndex v9;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v11;
  CFTypeID v12;
  CFTypeID v13;
  uint64_t valuePtr;

  if (a3)
  {
    TypeID = CFArrayGetTypeID();
    if (TypeID == CFGetTypeID(a2))
    {
      Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
      if (Mutable)
      {
        v8 = Mutable;
        if (CFArrayGetCount(a2) >= 1)
        {
          v9 = 0;
          do
          {
            ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a2, v9);
            if (ValueAtIndex)
            {
              v11 = ValueAtIndex;
              v12 = CFNumberGetTypeID();
              if (v12 == CFGetTypeID(v11))
              {
                valuePtr = 0;
                CFNumberGetValue(v11, kCFNumberSInt64Type, &valuePtr);
                CFStringAppendFormat(v8, 0, CFSTR("%lld"), valuePtr);
              }
              else
              {
                v13 = CFStringGetTypeID();
                if (v13 == CFGetTypeID(v11))
                  CFStringAppendFormat(v8, 0, CFSTR("%@"), v11);
              }
            }
            else
            {
              CFStringAppend(v8, CFSTR("-"));
            }
            if (++v9 < CFArrayGetCount(a2))
              CFStringAppend(v8, CFSTR(","));
          }
          while (v9 < CFArrayGetCount(a2));
        }
        CFDictionarySetValue(a3, a1, v8);
        CFRelease(v8);
      }
    }
  }
}

void CEA608Parser::CEA608Parser(CEA608Parser *this, int a2, int (*a3)(uint64_t, uint64_t *, uint64_t *, __CFData *, __CFData *, void *), void *a4, CEA608Renderer *a5)
{
  uint64_t v6;

  TextParserBase::TextParserBase(this, a2, a3, a4);
  *(_QWORD *)v6 = &off_1E2F79B48;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 72) = 0;
  *(_QWORD *)(v6 + 56) = 0;
  *(_BYTE *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = a5;
  *(_WORD *)(v6 + 96) = 0;
}

void CEA608Parser::~CEA608Parser(CEA608Parser *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E2F79B48;
  v2 = *((_QWORD *)this + 11);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  TextParserBase::~TextParserBase(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E2F79B48;
  v2 = *((_QWORD *)this + 11);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  TextParserBase::~TextParserBase(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E2F79B48;
  v2 = *((_QWORD *)this + 11);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  TextParserBase::~TextParserBase(this);
  JUMPOUT(0x194030638);
}

uint64_t CEA608Parser::NextInterestingTime(CEA608Parser *this, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;

  if (a3)
  {
    v4 = 1173985215403 * *((_DWORD *)this + 12);
    v5 = (int)((v4 >> 45) + ((unint64_t)v4 >> 63));
    if (a4 < 0)
      v5 = -v5;
    *a3 = v5 + a2;
  }
  return 0;
}

uint64_t CEA608Parser::AdvanceToTime(CFDataRef *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  CFIndex Length;
  _BOOL4 v7;
  CFDataRef v8;
  _QWORD *v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  CFDataRef v17;
  UInt8 *MutableBytePtr;
  CFIndex v20;
  uint64_t v21;
  uint64_t v22;
  CFDataRef v23;
  BOOL v24;
  uint64_t v25;
  char *v26;
  BOOL v27;
  uint64_t v28;
  const __CFData *v29;
  uint64_t v30;
  unint64_t v31;
  int64_t v32;
  unsigned int *v33;
  signed int v34;
  CFDataRef v35;
  uint64_t v37;
  uint64_t v38;

  v4 = 30000 * a2;
  v5 = *((int *)this + 12);
  Length = CFDataGetLength(this[3]);
  v7 = Length > 0;
  v9 = this + 4;
  v8 = this[4];
  v10 = (uint64_t)v8 <= a2 && (uint64_t)v8 + (uint64_t)this[5] > a2;
  v11 = 0;
  v12 = v4 / v5;
  if (Length < 1 || v10)
  {
    v13 = 0;
  }
  else
  {
    v37 = 0;
    v38 = 0;
    v11 = ((uint64_t (*)(char *, uint64_t *, uint64_t *, _QWORD, _QWORD, CFDataRef))this[1])((char *)v8 + (_QWORD)this[5], &v38, &v37, 0, 0, this[2]);
    if ((_DWORD)v11)
    {
      v13 = 0;
    }
    else
    {
      v14 = v37;
      if (v37 <= *((_DWORD *)this + 12) / 2)
        v14 = (uint64_t)(*((_DWORD *)this + 12) + (*((int *)this + 12) < 0)) >> 1;
      v15 = v14 + v38;
      v13 = v38 <= a2 && v15 > a2;
      v7 = 1;
    }
  }
  if (!v7 || v10 || v13)
  {
    if ((uint64_t)this[8] >= v12 || (_DWORD)v11 != 0)
      goto LABEL_57;
    while (1)
    {
      MutableBytePtr = CFDataGetMutableBytePtr(this[3]);
      v20 = CFDataGetLength(this[3]);
      v21 = (uint64_t)this[7];
      if (v21 >= v20)
      {
        v11 = 0;
      }
      else
      {
        v11 = 0;
        v22 = (uint64_t)this[8];
        do
        {
          if (v22 >= v12 || (_DWORD)v11)
            break;
          v38 = v21;
          v11 = CEA608Parser::ProcessCodePair((CEA608Parser *)this, MutableBytePtr, &v38, v20, 0);
          v21 = v38;
          v23 = this[7];
          v24 = __OFSUB__(v38, v23);
          v25 = v38 - (_QWORD)v23;
          if (v25 < 0 != v24)
            ++v25;
          v22 = (uint64_t)this[8] + 1001 * (v25 >> 1);
          this[7] = (CFDataRef)v38;
          this[8] = (CFDataRef)v22;
        }
        while (v21 < v20);
      }
      v26 = (char *)a2;
      if (!v7 || ((v26 = (char *)this[5] + *v9, (uint64_t)v26 < a2) ? (v27 = (_DWORD)v11 == 0) : (v27 = 0), v27))
      {
        v28 = ((uint64_t (*)(char *, char *, char *, CFDataRef, _QWORD, CFDataRef))this[1])(v26, (char *)this + 32, (char *)this + 40, this[3], 0, this[2]);
        if ((_DWORD)v28)
        {
          v11 = v28;
          goto LABEL_57;
        }
        v29 = this[3];
        v30 = 30000 * (uint64_t)this[4] / *((int *)this + 12);
        this[7] = 0;
        this[8] = (CFDataRef)v30;
        v31 = CFDataGetLength(v29);
        if (v31 >= 8 && (v32 = v31, v33 = (unsigned int *)CFDataGetMutableBytePtr(this[3]), v33[1] == 1952539747))
        {
          v34 = bswap32(*v33);
          if (v32 < v34)
            v34 = v32;
          if (v32 > v34)
            CFDataSetLength(this[3], v34);
          v11 = 0;
          this[7] = (CFDataRef)8;
        }
        else
        {
          v11 = 0;
        }
      }
      else if (v21 == v20)
      {
        this[8] = (CFDataRef)v12;
      }
      if ((uint64_t)this[8] < v12)
      {
        LOBYTE(v7) = 1;
        if (!(_DWORD)v11)
          continue;
      }
      goto LABEL_57;
    }
  }
  v17 = this[11];
  if (v17)
    (*(void (**)(CFDataRef))(*(_QWORD *)v17 + 208))(v17);
  CFDataSetLength(this[3], 0);
  *v9 = 0;
  this[5] = 0;
  this[7] = 0;
  this[8] = 0;
LABEL_57:
  this[9] = (CFDataRef)v12;
  v35 = this[11];
  if (v35)
    (*(void (**)(CFDataRef, uint64_t))(*(_QWORD *)v35 + 24))(v35, v12);
  return v11;
}

uint64_t CEA608Parser::ProcessCodePair(CEA608Parser *this, const unsigned __int8 *a2, uint64_t *a3, uint64_t a4, int a5)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  unsigned __int8 v13;
  unsigned int v14;

  result = 4294967246;
  if (!a2)
    return result;
  if (!a3)
    return result;
  v8 = a4;
  if (a4 < 1)
    return result;
  v9 = *a3;
  if (*a3 >= a4)
    return result;
  while (1)
  {
    if ((v9 & 1) == 0)
    {
      v12 = *((_QWORD *)this + 11);
      if (v12)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 24))(v12, *((_QWORD *)this + 8));
        v9 = *a3;
      }
    }
    v13 = a2[v9];
    if ((v13 & 0x70) == 0x10)
    {
      if (v9 + 1 < v8)
      {
        *((_BYTE *)this + 80) = 0;
        return CEA608Parser::ProcessControlCode(this, a2, a3, v8);
      }
      return FigSignalErrorAt();
    }
    v14 = v13 & 0x7F;
    if (v14 < 0x20)
      break;
    if (*((_BYTE *)this + 80))
      goto LABEL_16;
    *((_WORD *)this + 48) = 0;
    result = CEA608Parser::ProcessStandardCharacterCode(this, a2, a3, v8);
    if ((_DWORD)result)
      return result;
    v9 = *a3;
    if (*a3 >= v8)
      return 0;
    v8 = v9 + 1;
LABEL_18:
    result = 4294967246;
    if (v8 < 1 || v9 >= v8)
      return result;
  }
  if (a5 != 2 || v14 - 1 > 0xE)
  {
LABEL_16:
    *a3 = v9 + 1;
    if (v9 + 1 >= v8)
      return 0;
    v8 = v9 + 2;
    ++v9;
    goto LABEL_18;
  }
  if (v9 + 1 < v8)
  {
    result = 0;
    *((_BYTE *)this + 80) = 1;
    *a3 = v9 + 2;
    return result;
  }
  return FigSignalErrorAt();
}

uint64_t CEA608Parser::Reset(uint64_t this)
{
  *(_WORD *)(this + 96) = 0;
  return this;
}

uint64_t CEA608Parser::ProcessControlCode(CEA608Parser *this, const unsigned __int8 *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned __int8 v7;
  unsigned int v8;
  int v9;
  int v11;

  v4 = 4294967246;
  if (!a2)
    return v4;
  if (!a3)
    return v4;
  if (a4 < 1)
    return v4;
  v5 = *a3;
  if (*a3 + 1 >= a4)
    return v4;
  v6 = a2[v5];
  v7 = a2[v5 + 1];
  v8 = v7 & 0x7F;
  if (__PAIR64__(*((unsigned __int8 *)this + 97), *((unsigned __int8 *)this + 96)) != __PAIR64__(v8, v6 & 0x7F))
  {
    *((_BYTE *)this + 96) = v6 & 0x7F;
    *((_BYTE *)this + 97) = v8;
    v9 = v6 & 0x77777777;
    if ((v6 & 0x77777777) == 0x11)
    {
      v11 = v7 & 0x70;
      if (v11 == 48)
        return CEA608Parser::ProcessSpecialCharacterCode(this, a2, a3, a4);
      if (v11 == 32)
        return CEA608Parser::ProcessMidRowCode(this, a2, a3, a4);
      if (v8 >= 0x40)
        return CEA608Parser::ProcessPreambleAddressCode(this, a2, a3, a4);
    }
    else
    {
      if (v9 != 16)
      {
        if ((v6 & 0x76 | 8) == 0x1A)
        {
          if ((v7 & 0x60) == 0x20)
            return CEA608Parser::ProcessExtendedCharacterCode(this, a2, a3, a4);
          if (v8 >= 0x40)
            return CEA608Parser::ProcessPreambleAddressCode(this, a2, a3, a4);
          goto LABEL_36;
        }
        if ((v6 & 0x76) == 0x14)
        {
          if ((v7 & 0x70) != 0x20)
          {
            if (v8 >= 0x40)
              return CEA608Parser::ProcessPreambleAddressCode(this, a2, a3, a4);
            goto LABEL_36;
          }
        }
        else
        {
          if (v9 == 22 && v8 >= 0x40)
            return CEA608Parser::ProcessPreambleAddressCode(this, a2, a3, a4);
          if (v9 != 23)
            goto LABEL_36;
          if (v8 - 33 > 2)
          {
            if (v8 - 45 <= 2)
              return CEA608Parser::ProcessMidRowCode(this, a2, a3, a4);
            if (v8 >= 0x40)
              return CEA608Parser::ProcessPreambleAddressCode(this, a2, a3, a4);
            goto LABEL_36;
          }
        }
        return CEA608Parser::ProcessMiscControlCode(this, a2, a3, a4);
      }
      if ((v7 & 0x70) == 0x20)
        return CEA608Parser::ProcessMidRowCode(this, a2, a3, a4);
      if ((v7 & 0x60) == 0x40)
        return CEA608Parser::ProcessPreambleAddressCode(this, a2, a3, a4);
    }
LABEL_36:
    v4 = 0;
    goto LABEL_37;
  }
  v4 = 0;
  *((_WORD *)this + 48) = 0;
LABEL_37:
  *a3 = v5 + 2;
  return v4;
}

uint64_t CEA608Parser::ProcessStandardCharacterCode(CEA608Parser *this, const unsigned __int8 *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;
  unsigned __int8 v7;

  result = 4294967246;
  if (a2)
  {
    if (a3)
    {
      if ((a4 & 0x8000000000000000) == 0)
      {
        v6 = *a3;
        if (*a3 <= a4)
        {
          result = 0;
          if (a4)
          {
            if (v6 != a4)
            {
              v7 = a2[v6];
              *a3 = v6 + 1;
              result = *((_QWORD *)this + 11);
              if (result)
              {
                (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)result + 112))(result, 0, (unsigned __int16)StandardCharacters[(v7 & 0x7F) - 32], 0);
                return 0;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t CEA608Parser::ProcessMidRowCode(CEA608Parser *this, const unsigned __int8 *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  char v12;
  unsigned __int8 v14;
  char *v15;
  int v16;
  BOOL v17;

  result = 4294967246;
  if (!a2)
    return result;
  if (!a3)
    return result;
  if (a4 < 1)
    return result;
  v6 = *a3;
  if (*a3 + 1 >= a4)
    return result;
  v7 = a2[v6];
  v8 = v7 & 0x7F;
  v9 = a2[v6 + 1] & 0x7F;
  *a3 = v6 + 2;
  v10 = v7 & 0x7E;
  if (v8 == 31 || v10 == 24)
    v12 = 2;
  else
    v12 = 1;
  if (v8 == 23 || v10 == 16)
    v14 = 1;
  else
    v14 = v12;
  if ((v7 & 0x77777777) == 0x10 && v9 >= 0x20 && v9 <= 0x2F)
  {
    v15 = (char *)&AttributeCodes1 + 32 * v9 - 1024;
LABEL_21:
    v16 = 1;
    goto LABEL_34;
  }
  if ((v7 & 0x77) == 0x11 && v9 >= 0x20 && v9 <= 0x2F)
  {
    v16 = 0;
    v15 = (char *)(&MidRowCodes + 4 * v9 - 128);
  }
  else
  {
    v16 = 0;
    v17 = v8 == 31 || v8 == 23;
    v15 = (char *)&AttributeCodes1;
    if (v17 && v9 >= 0x2D && v9 <= 0x2F)
    {
      v15 = (char *)&AttributeCodes2 + 32 * v9 - 1440;
      goto LABEL_21;
    }
  }
LABEL_34:
  result = *((_QWORD *)this + 11);
  if (result)
  {
    if (v16)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)result + 120))(result, v14);
      result = *((_QWORD *)this + 11);
    }
    (*(void (**)(uint64_t, _QWORD, char *))(*(_QWORD *)result + 152))(result, v14, v15);
    return 0;
  }
  return result;
}

uint64_t CEA608Parser::ProcessPreambleAddressCode(CEA608Parser *this, const unsigned __int8 *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  _UNKNOWN ***v10;
  int v11;
  unsigned __int8 v12;
  BOOL v13;
  uint64_t v14;

  v4 = 4294967246;
  if (a2)
  {
    if (a3)
    {
      if (a4 >= 1)
      {
        v5 = *a3;
        if (*a3 + 1 < a4)
        {
          v6 = a2[v5];
          v7 = a2[v5 + 1] & 0x7F;
          *a3 = v5 + 2;
          if ((v6 & 0x78) == 0x18)
            v8 = 2;
          else
            v8 = 1;
          v9 = -96;
          if (v7 < 0x60)
            v9 = -64;
          v10 = &(&(&PreambleAddressCodes)[2 * v9])[2 * v7];
          if (v7 <= 0x3F)
            v10 = &PreambleAddressCodes;
          v11 = (v6 & 0x77777777) - 16;
          v12 = 11;
          switch(v11)
          {
            case 0:
              break;
            case 1:
              v13 = v7 >= 0x60;
              v12 = 1;
              goto LABEL_20;
            case 2:
              v13 = v7 >= 0x60;
              v12 = 3;
              goto LABEL_20;
            case 3:
              v13 = v7 >= 0x60;
              v12 = 12;
              goto LABEL_20;
            case 4:
              v13 = v7 >= 0x60;
              v12 = 14;
              goto LABEL_20;
            case 5:
              v13 = v7 >= 0x60;
              v12 = 5;
              goto LABEL_20;
            case 6:
              v13 = v7 >= 0x60;
              v12 = 7;
              goto LABEL_20;
            case 7:
              v13 = v7 >= 0x60;
              v12 = 9;
LABEL_20:
              if (v13)
                ++v12;
              break;
            default:
              v12 = 1;
              break;
          }
          v14 = *((_QWORD *)this + 11);
          if (v14)
            (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v14 + 144))(v14, v8, v12, *v10, *((unsigned __int8 *)v10 + 8));
          return 0;
        }
      }
    }
  }
  return v4;
}

uint64_t CEA608Parser::ProcessSpecialCharacterCode(CEA608Parser *this, const unsigned __int8 *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _BOOL8 v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v4 = 4294967246;
  if (!a2)
    return v4;
  if (!a3)
    return v4;
  if (a4 < 1)
    return v4;
  v5 = *a3;
  if (*a3 + 1 >= a4)
    return v4;
  v6 = a2[v5] & 0x7F;
  v7 = a2[v5 + 1] & 0x7F;
  *a3 = v5 + 2;
  if (v6 == 17 && v7 >= 0x30 && v7 < 0x40)
  {
    v8 = 1;
  }
  else
  {
    v9 = 0;
    v10 = 32;
    v8 = 1;
    if (v6 != 25 || v7 < 0x30 || v7 > 0x3F)
      goto LABEL_14;
    v8 = 2;
  }
  v11 = v7 - 48;
  v10 = SpecialCharacters[v11];
  v9 = v11 == 9;
LABEL_14:
  v12 = *((_QWORD *)this + 11);
  if (v12)
    (*(void (**)(uint64_t, uint64_t, uint64_t, _BOOL8))(*(_QWORD *)v12 + 112))(v12, v8, v10, v9);
  return 0;
}

uint64_t CEA608Parser::ProcessExtendedCharacterCode(CEA608Parser *this, const unsigned __int8 *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;

  result = 4294967246;
  if (a2)
  {
    if (a3)
    {
      if (a4 >= 1)
      {
        v6 = *a3;
        if (*a3 + 1 < a4)
        {
          v7 = a2[v6] & 0x7F;
          v8 = a2[v6 + 1] & 0x7F;
          *a3 = v6 + 2;
          if (v7 == 18 && v8 >= 0x20 && v8 < 0x40)
          {
            v9 = 1;
LABEL_9:
            v10 = (unsigned __int16 *)&ExtendedCharacters1;
LABEL_23:
            v11 = v10[v8 - 32];
LABEL_24:
            result = *((_QWORD *)this + 11);
            if (result)
            {
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 120))(result, v9);
              (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**((_QWORD **)this + 11) + 112))(*((_QWORD *)this + 11), v9, v11, 0);
              return 0;
            }
            return result;
          }
          if (v7 == 19 && v8 >= 0x20 && v8 < 0x40)
          {
            v9 = 1;
          }
          else
          {
            if (v7 == 26 && v8 >= 0x20 && v8 < 0x40)
            {
              v9 = 2;
              goto LABEL_9;
            }
            v11 = 32;
            v9 = 1;
            if (v7 != 27 || v8 < 0x20 || v8 > 0x3F)
              goto LABEL_24;
            v9 = 2;
          }
          v10 = (unsigned __int16 *)&ExtendedCharacters2;
          goto LABEL_23;
        }
      }
    }
  }
  return result;
}

uint64_t CEA608Parser::ProcessMiscControlCode(CEA608Parser *this, const unsigned __int8 *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;
  int v7;
  unsigned __int8 v8;
  int v9;
  BOOL v10;
  char v11;
  BOOL v12;
  unsigned __int8 v13;
  int v14;
  unsigned __int8 v15;
  void (*v16)(void);

  result = 4294967246;
  if (a2)
  {
    if (a3)
    {
      if (a4 >= 1)
      {
        v6 = *a3;
        if (*a3 + 1 < a4)
        {
          v7 = a2[v6];
          v8 = a2[v6 + 1];
          *a3 = v6 + 2;
          v9 = v7 & 0x7E;
          v10 = (v7 & 0x7F) == 0x1F || v9 == 28;
          v11 = v10 ? 2 : 1;
          v12 = (v7 & 0x7F) == 0x17 || v9 == 20;
          v13 = v12 ? 1 : v11;
          result = *((_QWORD *)this + 11);
          if (result)
          {
            v14 = v8 & 0x7F;
            v15 = v14 - 32;
            switch(v14)
            {
              case ' ':
                v16 = *(void (**)(void))(*(_QWORD *)result + 80);
                goto LABEL_39;
              case '!':
                if ((v7 & 0x77777777) == 0x14)
                  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)result + 120))(result, v13);
                goto LABEL_23;
              case '"':
              case '#':
LABEL_23:
                result = 0;
                if (v7 > 150)
                {
                  if (v7 != 159 && v7 != 151)
                    return result;
                }
                else if (v7 != 23 && v7 != 31)
                {
                  return result;
                }
                (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 11) + 160))(*((_QWORD *)this + 11), v13, v15);
LABEL_40:
                result = 0;
                break;
              case '$':
                v16 = *(void (**)(void))(*(_QWORD *)result + 136);
                goto LABEL_39;
              case '%':
              case '&':
              case '\'':
                (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)result + 88))(result, v13, (v14 - 35));
                goto LABEL_40;
              case '(':
                v16 = *(void (**)(void))(*(_QWORD *)result + 168);
                goto LABEL_39;
              case ')':
                v16 = *(void (**)(void))(*(_QWORD *)result + 96);
                goto LABEL_39;
              case '*':
                v16 = *(void (**)(void))(*(_QWORD *)result + 192);
                goto LABEL_39;
              case '+':
                v16 = *(void (**)(void))(*(_QWORD *)result + 200);
                goto LABEL_39;
              case ',':
                v16 = *(void (**)(void))(*(_QWORD *)result + 176);
                goto LABEL_39;
              case '-':
                v16 = *(void (**)(void))(*(_QWORD *)result + 128);
                goto LABEL_39;
              case '.':
                v16 = *(void (**)(void))(*(_QWORD *)result + 184);
                goto LABEL_39;
              case '/':
                v16 = *(void (**)(void))(*(_QWORD *)result + 104);
LABEL_39:
                v16();
                goto LABEL_40;
              default:
                goto LABEL_40;
            }
          }
        }
      }
    }
  }
  return result;
}

CEA608Renderer::MemoryRow *CEA608Renderer::MemoryRow::MemoryRow(CEA608Renderer::MemoryRow *this, unsigned __int16 *a2)
{
  uint64_t v3;
  CEA608Renderer::MemoryRow *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  *((_QWORD *)this + 32) = a2;
  v4 = this;
  do
  {
    v5 = operator new();
    v6 = *((_QWORD *)this + 32);
    *(_QWORD *)(v5 + 24) = v6 + v3;
    if (v6)
      *(_WORD *)(v6 + v3) = 32;
    *(_BYTE *)(v5 + 32) = 0;
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_BYTE *)(v5 + 16) = 0;
    v3 += 2;
    *(_QWORD *)v4 = v5;
    v4 = (CEA608Renderer::MemoryRow *)((char *)v4 + 8);
  }
  while (v3 != 64);
  return this;
}

BOOL CEA608Renderer::MemoryRow::IsDisplayable(CEA608Renderer::MemoryRow *this)
{
  unint64_t v2;
  unint64_t v3;

  if (*(_BYTE *)(*(_QWORD *)this + 16))
    return 1;
  v2 = 0;
  do
  {
    v3 = v2;
    if (v2 == 31)
      break;
    ++v2;
  }
  while (!*(_BYTE *)(*((_QWORD *)this + v3 + 1) + 16));
  return v3 < 0x1F;
}

uint64_t CEA608Renderer::MemoryRow::GetStyleForCell(uint64_t result, unsigned int a2, uint64_t a3, _BYTE *a4, BOOL *a5)
{
  uint64_t v5;
  BOOL v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;

  *(_OWORD *)a3 = DefaultStyle;
  *(_OWORD *)(a3 + 16) = unk_1E2F7A3F0;
  v5 = *(_QWORD *)(result + 8 * a2 - 8);
  *a5 = *(_QWORD *)(v5 + 8) != 0;
  LODWORD(v5) = *(unsigned __int8 *)(v5 + 16);
  *a4 = v5;
  if ((_DWORD)v5)
    v6 = a2 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    v7 = 1;
    do
    {
      v8 = v7 - 1;
      v9 = *(_QWORD *)(result + 8 * v8);
      v10 = *(_OWORD **)v9;
      if (*(_QWORD *)v9)
      {
        v11 = v10[1];
        *(_OWORD *)a3 = *v10;
        *(_OWORD *)(a3 + 16) = v11;
        v9 = *(_QWORD *)(result + 8 * v8);
      }
      v12 = *(_QWORD *)(v9 + 8);
      if (v12)
      {
        if (*(_QWORD *)v12)
          *(_QWORD *)a3 = *(_QWORD *)v12;
        v13 = *(_QWORD *)(v12 + 8);
        if (v13)
          *(_QWORD *)(a3 + 8) = v13;
        v14 = *(_DWORD *)(v12 + 16);
        if (v14)
          *(_DWORD *)(a3 + 16) = v14;
        v15 = *(_DWORD *)(v12 + 20);
        if (v15)
          *(_DWORD *)(a3 + 20) = v15;
        v16 = *(_DWORD *)(v12 + 24);
        if (v16)
          *(_DWORD *)(a3 + 24) = v16;
      }
      ++v7;
    }
    while (a2 >= v7);
  }
  return result;
}

uint64_t CEA608Renderer::MemoryRow::GetNextStyleChange(CEA608Renderer::MemoryRow *this, unsigned int a2)
{
  unsigned __int8 v2;
  uint64_t v4;
  __int128 *v5;
  __int128 v6;
  uint64_t v7;
  float *v8;
  BOOL v9;
  float *v10;
  BOOL v11;
  __int16 v14;
  __int128 v15;
  __int128 v16;

  v2 = a2;
  v15 = 0u;
  v16 = 0u;
  v14 = 0;
  CEA608Renderer::MemoryRow::GetStyleForCell((uint64_t)this, a2, (uint64_t)&v15, (_BYTE *)&v14 + 1, (BOOL *)&v14);
  while (++v2 <= 0x20u)
  {
    v4 = *((_QWORD *)this + v2 - 1);
    v5 = *(__int128 **)v4;
    if (*(_QWORD *)v4)
    {
      v6 = v5[1];
      v15 = *v5;
      v16 = v6;
    }
    v7 = *(_QWORD *)(v4 + 8);
    if (v7)
    {
      v8 = *(float **)v7;
      if (*(_QWORD *)v7)
        v9 = (_QWORD)v15 == 0;
      else
        v9 = 1;
      if (!v9
        && (*v8 != *(float *)v15
         || v8[1] != *(float *)(v15 + 4)
         || v8[2] != *(float *)(v15 + 8)
         || v8[3] != *(float *)(v15 + 12)))
      {
        return v2;
      }
      v10 = *(float **)(v7 + 8);
      v11 = !v10 || *((_QWORD *)&v15 + 1) == 0;
      if (!v11
        && (*v10 != **((float **)&v15 + 1)
         || v10[1] != *(float *)(*((_QWORD *)&v15 + 1) + 4)
         || v10[2] != *(float *)(*((_QWORD *)&v15 + 1) + 8)
         || v10[3] != *(float *)(*((_QWORD *)&v15 + 1) + 12)))
      {
        return v2;
      }
      if (*(_DWORD *)(v7 + 16) || *(_DWORD *)(v7 + 20))
        return v2;
      if (*(_DWORD *)(v7 + 24) || v14 == 0)
        return v2;
    }
    else if ((_BYTE)v14)
    {
      return v2;
    }
    if (HIBYTE(v14) != *(unsigned __int8 *)(v4 + 16))
      return v2;
  }
  return 33;
}

BOOL CEA608Renderer::MemoryRow::IsDirty(CEA608Renderer::MemoryRow *this)
{
  unint64_t v2;
  unint64_t v3;

  if (*(_BYTE *)(*(_QWORD *)this + 32))
    return 1;
  v2 = 0;
  do
  {
    v3 = v2;
    if (v2 == 31)
      break;
    ++v2;
  }
  while (!*(_BYTE *)(*((_QWORD *)this + v3 + 1) + 32));
  return v3 < 0x1F;
}

CEA608Renderer::Memory *CEA608Renderer::Memory::Memory(CEA608Renderer::Memory *this)
{
  uint64_t v2;
  uint64_t i;
  CEA608Renderer::MemoryRow *v4;

  *(_WORD *)this = 271;
  v2 = 0;
  *((_QWORD *)this + 1) = operator new[]();
  for (i = 16; i != 136; i += 8)
  {
    v4 = (CEA608Renderer::MemoryRow *)operator new();
    CEA608Renderer::MemoryRow::MemoryRow(v4, (unsigned __int16 *)(*((_QWORD *)this + 1) + v2));
    *(_QWORD *)((char *)this + i) = v4;
    v2 += 64;
  }
  return this;
}

void sub_19296B0B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194030638](v1, 0x30C408693532ALL);
  _Unwind_Resume(a1);
}

void CEA608Renderer::Memory::~Memory(CEA608Renderer::Memory *this)
{
  uint64_t i;
  uint64_t v3;
  uint64_t j;
  uint64_t v5;
  uint64_t v6;

  for (i = 0; i != 15; ++i)
  {
    v3 = *((_QWORD *)this + i + 2);
    if (v3)
    {
      for (j = 0; j != 256; j += 8)
      {
        v5 = *(_QWORD *)(v3 + j);
        if (v5)
          MEMORY[0x194030638](v5, 0x1070C40BFE75829);
      }
      MEMORY[0x194030638](v3, 0x30C408693532ALL);
    }
  }
  v6 = *((_QWORD *)this + 1);
  if (v6)
    MEMORY[0x19403062C](v6, 0x1000C80BDFB0063);
}

uint64_t CEA608Renderer::Memory::ShiftRows(uint64_t this, int a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  _WORD *v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  _WORD *v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;

  if (a2 >= 0)
    LOBYTE(v2) = a2;
  else
    v2 = -a2;
  if ((char)v2 >= 1)
  {
    LOBYTE(v3) = 0;
    do
    {
      if (a2 < 0)
      {
        v29 = *(_QWORD *)(this + 128);
        if (*(_BYTE *)(*(_QWORD *)v29 + 16))
          goto LABEL_51;
        v30 = 1;
        while (v30 != 32)
        {
          if (*(unsigned __int8 *)(*(_QWORD *)(v29 + 8 * v30++) + 16))
          {
            if ((unint64_t)(v30 - 2) < 0x1F)
              goto LABEL_51;
            break;
          }
        }
        if (*(_BYTE *)(*(_QWORD *)v29 + 32))
        {
LABEL_51:
          v32 = 1;
        }
        else
        {
          v58 = 0;
          v59 = v29 + 8;
          do
          {
            v60 = v58;
            if (v58 == 31)
              break;
            ++v58;
          }
          while (!*(_BYTE *)(*(_QWORD *)(v59 + 8 * v60) + 32));
          v32 = v60 < 0x1F;
        }
        v33 = 0;
        v34 = *(_QWORD *)(this + 16);
        v35 = 1;
        do
        {
          v36 = this + 8 * v33;
          v39 = *(uint64_t **)(v36 + 16);
          v37 = (_QWORD *)(v36 + 16);
          v38 = v39;
          v40 = *v39;
          if (*(_BYTE *)(*v39 + 16))
            goto LABEL_64;
          v41 = 1;
          while (v41 != 32)
          {
            if (*(unsigned __int8 *)(v38[v41++] + 16))
            {
              if ((unint64_t)(v41 - 2) < 0x1F)
                goto LABEL_64;
              break;
            }
          }
          v43 = *(_QWORD *)(this + 8 * v35 + 16);
          if (*(_BYTE *)(*(_QWORD *)v43 + 16))
            goto LABEL_64;
          v44 = 1;
          while (v44 != 32)
          {
            if (*(unsigned __int8 *)(*(_QWORD *)(v43 + 8 * v44++) + 16))
            {
              if ((unint64_t)(v44 - 2) < 0x1F)
                goto LABEL_64;
              break;
            }
          }
          if (*(_BYTE *)(v40 + 32))
          {
LABEL_64:
            v46 = 0;
            v43 = *(_QWORD *)(this + 8 * v35 + 16);
            do
            {
              *(_BYTE *)(*(_QWORD *)(v43 + v46) + 32) = 1;
              v46 += 8;
            }
            while (v46 != 256);
          }
          else
          {
            v47 = 1;
            while (v47 != 32)
            {
              if (*(unsigned __int8 *)(v38[v47++] + 32))
              {
                if ((unint64_t)(v47 - 2) <= 0x1E)
                  goto LABEL_64;
                break;
              }
            }
          }
          *v37 = v43;
          ++v33;
          ++v35;
        }
        while (v33 != 14);
        v49 = 0;
        *(_QWORD *)(this + 128) = v34;
        do
        {
          v50 = *(_QWORD *)(v34 + v49);
          v51 = *(_WORD **)(v50 + 24);
          if (v51)
            *v51 = 32;
          if (*(_BYTE *)(v50 + 16))
            v52 = 1;
          else
            v52 = *(_BYTE *)(v50 + 32) != 0;
          *(_BYTE *)(v50 + 32) = v52;
          *(_QWORD *)v50 = 0;
          *(_QWORD *)(v50 + 8) = 0;
          *(_BYTE *)(v50 + 16) = 0;
          v49 += 8;
        }
        while (v49 != 256);
        if (v32)
        {
          v53 = 0;
          v54 = *(_QWORD *)(this + 128);
          do
          {
            *(_BYTE *)(*(_QWORD *)(v54 + v53) + 32) = 1;
            v53 += 8;
          }
          while (v53 != 256);
        }
      }
      else
      {
        v4 = *(_QWORD *)(this + 16);
        if (*(_BYTE *)(*(_QWORD *)v4 + 16))
          goto LABEL_13;
        v5 = 1;
        while (v5 != 32)
        {
          if (*(unsigned __int8 *)(*(_QWORD *)(v4 + 8 * v5++) + 16))
          {
            if ((unint64_t)(v5 - 2) < 0x1F)
              goto LABEL_13;
            break;
          }
        }
        if (*(_BYTE *)(*(_QWORD *)v4 + 32))
        {
LABEL_13:
          v7 = 1;
        }
        else
        {
          v55 = 0;
          v56 = v4 + 8;
          do
          {
            v57 = v55;
            if (v55 == 31)
              break;
            ++v55;
          }
          while (!*(_BYTE *)(*(_QWORD *)(v56 + 8 * v57) + 32));
          v7 = v57 < 0x1F;
        }
        v8 = *(_QWORD *)(this + 128);
        v9 = 14;
        v10 = 13;
        do
        {
          v11 = this + 8 * v9;
          v14 = *(uint64_t **)(v11 + 16);
          v12 = (_QWORD *)(v11 + 16);
          v13 = v14;
          v15 = *v14;
          if (*(_BYTE *)(*v14 + 16))
            goto LABEL_26;
          v16 = 1;
          while (v16 != 32)
          {
            if (*(unsigned __int8 *)(v13[v16++] + 16))
            {
              if ((unint64_t)(v16 - 2) < 0x1F)
                goto LABEL_26;
              break;
            }
          }
          v18 = *(_QWORD *)(this + 8 * v10 + 16);
          if (*(_BYTE *)(*(_QWORD *)v18 + 16))
            goto LABEL_26;
          v19 = 1;
          while (v19 != 32)
          {
            if (*(unsigned __int8 *)(*(_QWORD *)(v18 + 8 * v19++) + 16))
            {
              if ((unint64_t)(v19 - 2) < 0x1F)
                goto LABEL_26;
              break;
            }
          }
          if (*(_BYTE *)(v15 + 32))
          {
LABEL_26:
            v21 = 0;
            v18 = *(_QWORD *)(this + 8 * v10 + 16);
            do
            {
              *(_BYTE *)(*(_QWORD *)(v18 + v21) + 32) = 1;
              v21 += 8;
            }
            while (v21 != 256);
          }
          else
          {
            v22 = 1;
            while (v22 != 32)
            {
              if (*(unsigned __int8 *)(v13[v22++] + 32))
              {
                if ((unint64_t)(v22 - 2) <= 0x1E)
                  goto LABEL_26;
                break;
              }
            }
          }
          *v12 = v18;
          --v10;
          --v9;
        }
        while (v9);
        *(_QWORD *)(this + 16) = v8;
        do
        {
          v24 = *(_QWORD *)(v8 + v9);
          v25 = *(_WORD **)(v24 + 24);
          if (v25)
            *v25 = 32;
          if (*(_BYTE *)(v24 + 16))
            v26 = 1;
          else
            v26 = *(_BYTE *)(v24 + 32) != 0;
          *(_BYTE *)(v24 + 32) = v26;
          *(_QWORD *)v24 = 0;
          *(_QWORD *)(v24 + 8) = 0;
          *(_BYTE *)(v24 + 16) = 0;
          v9 += 8;
        }
        while (v9 != 256);
        if (v7)
        {
          v27 = 0;
          v28 = *(_QWORD *)(this + 16);
          do
          {
            *(_BYTE *)(*(_QWORD *)(v28 + v27) + 32) = 1;
            v27 += 8;
          }
          while (v27 != 256);
        }
      }
      v3 = (char)(v3 + 1);
    }
    while (v3 < (char)v2);
  }
  return this;
}

uint64_t CEA608Renderer::Memory::Erase(uint64_t this)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _WORD *v5;
  BOOL v6;

  for (i = 0; i != 15; ++i)
  {
    v2 = 0;
    v3 = *(_QWORD *)(this + 8 * i + 16);
    do
    {
      v4 = *(_QWORD *)(v3 + v2);
      v5 = *(_WORD **)(v4 + 24);
      if (v5)
        *v5 = 32;
      if (*(_BYTE *)(v4 + 16))
        v6 = 1;
      else
        v6 = *(_BYTE *)(v4 + 32) != 0;
      *(_BYTE *)(v4 + 32) = v6;
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_BYTE *)(v4 + 16) = 0;
      v2 += 8;
    }
    while (v2 != 256);
  }
  return this;
}

uint64_t CEA608Renderer::Memory::SetDirty(uint64_t this, char a2)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  for (i = 0; i != 15; ++i)
  {
    v3 = 0;
    v4 = *(_QWORD *)(this + 8 * i + 16);
    do
    {
      *(_BYTE *)(*(_QWORD *)(v4 + v3) + 32) = a2;
      v3 += 8;
    }
    while (v3 != 256);
  }
  return this;
}

BOOL CEA608Renderer::Memory::IsDirty(CEA608Renderer::Memory *this)
{
  uint64_t v1;
  BOOL v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = *((_QWORD *)this + 2);
  if (*(_BYTE *)(*(_QWORD *)v1 + 32))
  {
    return 1;
  }
  else
  {
    v4 = 0;
    v2 = 1;
    do
    {
      v5 = 0;
      v6 = v1 + 8;
      do
      {
        v7 = v5;
        if (v5 == 31)
          break;
        ++v5;
      }
      while (!*(_BYTE *)(*(_QWORD *)(v6 + 8 * v7) + 32));
      if (v7 <= 0x1E)
        break;
      v2 = v4 < 0xE;
      if (v4 == 14)
        break;
      v1 = *((_QWORD *)this + ++v4 + 2);
    }
    while (!*(_BYTE *)(*(_QWORD *)v1 + 32));
  }
  return v2;
}

void CEA608Renderer::CEA608Renderer(CEA608Renderer *this)
{
  uint64_t v2;
  CEA608Renderer::Memory *v3;
  CEA608Renderer::Memory *v4;

  TextRendererBase::TextRendererBase(this);
  *(_QWORD *)v2 = off_1E2F7A410;
  *(_WORD *)(v2 + 48) = 0;
  *(_BYTE *)(v2 + 50) = 1;
  *(_DWORD *)(v2 + 52) = 0;
  *(_DWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = -1;
  *(_BYTE *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 80) = -1;
  v3 = (CEA608Renderer::Memory *)operator new();
  CEA608Renderer::Memory::Memory(v3);
  *((_QWORD *)this + 4) = v3;
  v4 = (CEA608Renderer::Memory *)operator new();
  CEA608Renderer::Memory::Memory(v4);
  *((_QWORD *)this + 3) = v4;
  *((_QWORD *)this + 5) = v4;
}

void sub_19296B710(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  MEMORY[0x194030638](v3, 0x1030C4078BDD907);
  FigBytePumpGetFigBaseObject(v1);
  _Unwind_Resume(a1);
}

void CEA608Renderer::~CEA608Renderer(CEA608Renderer *this)
{
  CEA608Renderer::Memory *v2;
  CEA608Renderer::Memory *v3;

  *(_QWORD *)this = off_1E2F7A410;
  v2 = (CEA608Renderer::Memory *)*((_QWORD *)this + 3);
  if (v2)
  {
    CEA608Renderer::Memory::~Memory(v2);
    MEMORY[0x194030638]();
  }
  v3 = (CEA608Renderer::Memory *)*((_QWORD *)this + 4);
  if (v3)
  {
    CEA608Renderer::Memory::~Memory(v3);
    MEMORY[0x194030638]();
  }
  FigBytePumpGetFigBaseObject(this);
}

uint64_t CEA608Renderer::SetCurrentTime(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 16) = a2;
  return this;
}

uint64_t CEA608Renderer::SetTargetDataChannel(uint64_t this, char a2)
{
  *(_BYTE *)(this + 50) = a2;
  return this;
}

uint64_t CEA608Renderer::ResumeCaptionLoading(uint64_t this, int a2)
{
  int v2;

  *(_BYTE *)(this + 49) = a2;
  if (*(unsigned __int8 *)(this + 50) == a2)
  {
    *(_QWORD *)(this + 40) = *(_QWORD *)(this + 24);
    v2 = *(_DWORD *)(this + 56);
    if (*(_DWORD *)(this + 52) != v2)
      *(_DWORD *)(this + 52) = v2;
    *(_DWORD *)(this + 56) = 2;
    *(_BYTE *)(this + 48) = 4;
  }
  return this;
}

unsigned __int8 *CEA608Renderer::RollUpCaptions(unsigned __int8 *this, uint64_t a2, unsigned int a3)
{
  unsigned __int8 *v4;
  int v5;
  unsigned int v7;
  unsigned int v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _WORD *v13;
  BOOL v14;
  int v15;

  this[49] = a2;
  if (this[50] == (_DWORD)a2)
  {
    v4 = this;
    this = (unsigned __int8 *)*((_QWORD *)this + 4);
    *((_QWORD *)v4 + 5) = this;
    v5 = *((_DWORD *)v4 + 14);
    if (v5 == 1 || v5 == 4 && *((_DWORD *)v4 + 13) == 1)
    {
      v7 = *this;
      if (a3 > v7)
      {
        CEA608Renderer::Memory::ShiftRows((uint64_t)this, (char)(a3 - v7));
        this = (unsigned __int8 *)*((_QWORD *)v4 + 5);
        *this = a3;
        v7 = a3;
      }
      v8 = v4[48];
      if (v8 > a3)
      {
        v9 = v7 - a3;
        if ((int)(v7 - v8) < (v7 - a3))
        {
          do
          {
            v10 = 0;
            v11 = *(_QWORD *)&this[8 * v9 + 8];
            do
            {
              v12 = *(_QWORD *)(v11 + v10);
              v13 = *(_WORD **)(v12 + 24);
              if (v13)
                *v13 = 32;
              if (*(_BYTE *)(v12 + 16))
                v14 = 1;
              else
                v14 = *(_BYTE *)(v12 + 32) != 0;
              *(_BYTE *)(v12 + 32) = v14;
              *(_QWORD *)v12 = 0;
              *(_QWORD *)(v12 + 8) = 0;
              *(_BYTE *)(v12 + 16) = 0;
              v10 += 8;
            }
            while (v10 != 256);
            --v9;
            this = (unsigned __int8 *)*((_QWORD *)v4 + 5);
          }
          while (*this - v4[48] < v9);
        }
      }
    }
    else
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)v4 + 176))(v4, a2);
      this = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)v4 + 184))(v4, a2);
      **((_WORD **)v4 + 5) = 271;
      *((_QWORD *)v4 + 8) = -1;
    }
    v15 = *((_DWORD *)v4 + 14);
    if (*((_DWORD *)v4 + 13) != v15)
      *((_DWORD *)v4 + 13) = v15;
    *((_DWORD *)v4 + 14) = 1;
    v4[48] = a3;
  }
  return this;
}

uint64_t CEA608Renderer::ResumeDirectCaptioning(uint64_t this, int a2)
{
  int v2;

  *(_BYTE *)(this + 49) = a2;
  if (*(unsigned __int8 *)(this + 50) == a2)
  {
    *(_QWORD *)(this + 40) = *(_QWORD *)(this + 32);
    v2 = *(_DWORD *)(this + 56);
    if (*(_DWORD *)(this + 52) != v2)
      *(_DWORD *)(this + 52) = v2;
    *(_DWORD *)(this + 56) = 3;
    *(_BYTE *)(this + 48) = 4;
  }
  return this;
}

uint64_t CEA608Renderer::EndOfCaption(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;

  *(_BYTE *)(this + 49) = a2;
  if (*(unsigned __int8 *)(this + 50) == a2)
  {
    v2 = *(_QWORD *)(this + 32);
    for (i = 1; i != 16; ++i)
    {
      v4 = *(_QWORD *)(v2 + 8 * (i - 1) + 16);
      if (*(_BYTE *)(*(_QWORD *)v4 + 16))
        goto LABEL_9;
      v5 = 1;
      while (v5 != 32)
      {
        if (*(unsigned __int8 *)(*(_QWORD *)(v4 + 8 * v5++) + 16))
        {
          if ((unint64_t)(v5 - 2) < 0x1F)
            goto LABEL_9;
          break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)v4 + 32))
      {
LABEL_9:
        v7 = 0;
        v8 = *(_QWORD *)(*(_QWORD *)(this + 24) + 8 * (i - 1) + 16);
        do
        {
          *(_BYTE *)(*(_QWORD *)(v8 + v7) + 32) = 1;
          v7 += 8;
        }
        while (v7 != 256);
      }
      else
      {
        v9 = 1;
        while (v9 != 32)
        {
          if (*(unsigned __int8 *)(*(_QWORD *)(v4 + 8 * v9++) + 32))
          {
            if ((unint64_t)(v9 - 2) <= 0x1E)
              goto LABEL_9;
            break;
          }
        }
      }
    }
    *(_QWORD *)(this + 32) = *(_QWORD *)(this + 24);
    *(_QWORD *)(this + 40) = v2;
    *(_QWORD *)(this + 24) = v2;
    v11 = *(_DWORD *)(this + 56);
    if (*(_DWORD *)(this + 52) != v11)
      *(_DWORD *)(this + 52) = v11;
    *(_DWORD *)(this + 56) = 2;
    *(_BYTE *)(this + 48) = 4;
  }
  return this;
}

uint64_t CEA608Renderer::Character(uint64_t this, int a2, __int16 a3, char a4)
{
  unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;

  if (a2)
    *(_BYTE *)(this + 49) = a2;
  else
    a2 = *(unsigned __int8 *)(this + 49);
  if (a2 == *(unsigned __int8 *)(this + 50) && (*(_DWORD *)(this + 56) | 4) != 4)
  {
    v4 = *(unsigned __int8 **)(this + 40);
    v5 = v4[1];
    v6 = *(_QWORD *)(*(_QWORD *)&v4[8 * *v4 + 8] + 8 * v4[1] - 8);
    **(_WORD **)(v6 + 24) = a3;
    *(_QWORD *)(v6 + 8) = 0;
    *(_BYTE *)(v6 + 16) = a4 ^ 1;
    *(_BYTE *)(v6 + 32) = 1;
    if (v5 <= 0x1F)
      v4[1] = v5 + 1;
  }
  return this;
}

uint64_t CEA608Renderer::Backspace(uint64_t this, int a2)
{
  unsigned __int8 *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;

  *(_BYTE *)(this + 49) = a2;
  if (*(unsigned __int8 *)(this + 50) == a2 && (*(_DWORD *)(this + 56) | 4) != 4)
  {
    v2 = *(unsigned __int8 **)(this + 40);
    v3 = v2[1];
    if (v3 >= 2)
    {
      v4 = *v2 - 1;
      if (v3 == 32)
      {
        v5 = *(_QWORD *)(*(_QWORD *)&v2[8 * v4 + 16] + 248);
        *(_QWORD *)(v5 + 8) = 0;
        **(_WORD **)(v5 + 24) = 32;
        *(_BYTE *)(v5 + 16) = 0;
        *(_BYTE *)(v5 + 32) = 1;
      }
      v6 = v3 - 1;
      v2[1] = v6;
      v7 = *(_QWORD *)(*(_QWORD *)&v2[8 * v4 + 16] + 8 * v6 - 8);
      *(_QWORD *)(v7 + 8) = 0;
      **(_WORD **)(v7 + 24) = 32;
      *(_BYTE *)(v7 + 16) = 0;
      *(_BYTE *)(v7 + 32) = 1;
    }
  }
  return this;
}

uint64_t CEA608Renderer::CarriageReturn(uint64_t this, int a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _WORD *v6;
  BOOL v7;

  *(_BYTE *)(this + 49) = a2;
  if (*(unsigned __int8 *)(this + 50) == a2)
  {
    v2 = (_QWORD *)this;
    if (*(_DWORD *)(this + 56) == 1)
    {
      v3 = 0;
      v4 = *(_QWORD *)(*(_QWORD *)(this + 40)
                     + 8 * (**(_BYTE **)(this + 40) - *(_BYTE *)(this + 48) + 1)
                     + 8);
      do
      {
        v5 = *(_QWORD *)(v4 + v3);
        v6 = *(_WORD **)(v5 + 24);
        if (v6)
          *v6 = 32;
        if (*(_BYTE *)(v5 + 16))
          v7 = 1;
        else
          v7 = *(_BYTE *)(v5 + 32) != 0;
        *(_BYTE *)(v5 + 32) = v7;
        *(_QWORD *)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0;
        *(_BYTE *)(v5 + 16) = 0;
        v3 += 8;
      }
      while (v3 != 256);
      this = CEA608Renderer::Memory::ShiftRows(*(_QWORD *)(this + 40), -1);
      v2[8] = v2[2];
      *(_BYTE *)(v2[5] + 1) = 1;
    }
  }
  return this;
}

uint64_t CEA608Renderer::DeleteToEndOfRow(uint64_t this, int a2)
{
  unsigned __int8 *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _WORD *v8;
  BOOL v9;
  uint64_t v10;

  *(_BYTE *)(this + 49) = a2;
  if (*(unsigned __int8 *)(this + 50) == a2 && (*(_DWORD *)(this + 56) | 4) != 4)
  {
    v2 = *(unsigned __int8 **)(this + 40);
    v3 = v2[1];
    if (v3 < 2)
      goto LABEL_7;
    v4 = *(_QWORD *)&v2[8 * *v2 + 8];
    if (*(_BYTE *)(*(_QWORD *)(v4 + 8 * (v3 - 1) - 8) + 16))
    {
      v5 = *(_QWORD *)(v4 + 8 * v3 - 8);
      **(_WORD **)(v5 + 24) = 32;
      *(_BYTE *)(v5 + 16) = 0;
      *(_BYTE *)(v5 + 32) = 1;
      LOBYTE(v3) = v3 + 1;
    }
    if (v3 <= 0x20u)
    {
LABEL_7:
      v6 = v3 - 1;
      do
      {
        v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 40) + 8 * **(unsigned __int8 **)(this + 40) + 8) + 8 * v6);
        v8 = *(_WORD **)(v7 + 24);
        if (v8)
          *v8 = 32;
        if (*(_BYTE *)(v7 + 16))
          v9 = 1;
        else
          v9 = *(_BYTE *)(v7 + 32) != 0;
        *(_BYTE *)(v7 + 32) = v9;
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
        *(_BYTE *)(v7 + 16) = 0;
        v10 = (v6++ + 2);
      }
      while (v10 != 33);
    }
  }
  return this;
}

unsigned __int8 *CEA608Renderer::PreambleAddressCode(unsigned __int8 *result, int a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  unsigned __int8 *v5;
  int v6;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  result[49] = a2;
  if (result[50] == a2)
  {
    v5 = result;
    v6 = *((_DWORD *)result + 14);
    if (v6 && v6 != 4)
    {
      v10 = a3;
      if (v6 == 1)
      {
        if (result[48] <= a3)
          v10 = a3;
        else
          v10 = result[48];
        result = (unsigned __int8 *)*((_QWORD *)result + 5);
        v11 = v10 - *result;
        if (!v11)
          goto LABEL_13;
        CEA608Renderer::Memory::ShiftRows((uint64_t)result, (char)v11);
      }
      result = (unsigned __int8 *)*((_QWORD *)v5 + 5);
      *result = v10;
LABEL_13:
      result[1] = a5 + 1;
      v12 = v10 - 1;
      if (!a5 || !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)&result[8 * v12 + 16] + 8 * a5 - 8) + 16))
      {
        v13 = *(_QWORD *)(*(_QWORD *)&result[8 * v12 + 16] + 8 * (a5 + 1) - 8);
        *(_QWORD *)v13 = a4;
        *(_BYTE *)(v13 + 32) = 1;
      }
    }
  }
  return result;
}

uint64_t CEA608Renderer::MidRowCode(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(result + 49) = a2;
  if (*(unsigned __int8 *)(result + 50) == a2)
  {
    v3 = result;
    if ((*(_DWORD *)(result + 56) | 4) != 4)
    {
      v5 = *(unsigned __int8 *)(*(_QWORD *)(result + 40) + 1);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 112))(result);
      v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8 * **(unsigned __int8 **)(v3 + 40) + 8) + 8 * v5 - 8);
      *(_QWORD *)(v6 + 8) = a3;
      *(_BYTE *)(v6 + 32) = 1;
    }
  }
  return result;
}

uint64_t CEA608Renderer::TabOffset(uint64_t this, int a2, char a3)
{
  uint64_t v3;
  char v4;

  *(_BYTE *)(this + 49) = a2;
  if (*(unsigned __int8 *)(this + 50) == a2 && (*(_DWORD *)(this + 56) | 4) != 4)
  {
    v3 = *(_QWORD *)(this + 40);
    if (((*(_BYTE *)(v3 + 1) + a3) & 0xE0) != 0)
      v4 = 32;
    else
      v4 = *(_BYTE *)(v3 + 1) + a3;
    *(_BYTE *)(v3 + 1) = v4;
  }
  return this;
}

uint64_t CEA608Renderer::FlashOn(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(this + 49) = a2;
  if (*(unsigned __int8 *)(this + 50) == a2)
  {
    v2 = this;
    v3 = *(unsigned __int8 *)(*(_QWORD *)(this + 40) + 1);
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 112))(this);
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8 * **(unsigned __int8 **)(v2 + 40) + 8) + 8 * v3 - 8);
    *(_QWORD *)(v4 + 8) = &FlashOnStyle;
    *(_BYTE *)(v4 + 32) = 1;
  }
  return this;
}

uint64_t CEA608Renderer::EraseDisplayedMemory(uint64_t this, int a2)
{
  *(_BYTE *)(this + 49) = a2;
  if (*(unsigned __int8 *)(this + 50) == a2)
    return CEA608Renderer::Memory::Erase(*(_QWORD *)(this + 32));
  return this;
}

uint64_t CEA608Renderer::EraseNonDisplayedMemory(uint64_t this, int a2)
{
  *(_BYTE *)(this + 49) = a2;
  if (*(unsigned __int8 *)(this + 50) == a2)
    return CEA608Renderer::Memory::Erase(*(_QWORD *)(this + 24));
  return this;
}

uint64_t CEA608Renderer::TextRestart(CEA608Renderer *this, uint64_t a2)
{
  int v4;

  v4 = *((_DWORD *)this + 14);
  if (*((_DWORD *)this + 13) != v4)
    *((_DWORD *)this + 13) = v4;
  *((_DWORD *)this + 14) = 4;
  *((_BYTE *)this + 49) = a2;
  (*(void (**)(CEA608Renderer *, uint64_t))(*(_QWORD *)this + 176))(this, a2);
  return (*(uint64_t (**)(CEA608Renderer *, uint64_t))(*(_QWORD *)this + 184))(this, a2);
}

uint64_t CEA608Renderer::TextDisplay(uint64_t this, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v6;

  v3 = *(_DWORD *)(this + 52);
  v2 = *(_DWORD *)(this + 56);
  if (v3 != 1 || v2 != 1)
  {
    v6 = this;
    if (v3 != v2)
      *(_DWORD *)(this + 52) = v2;
    *(_DWORD *)(this + 56) = 4;
    *(_BYTE *)(this + 49) = a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)this + 176))(this, a2);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 184))(v6, a2);
  }
  return this;
}

uint64_t CEA608Renderer::InvalidData(CEA608Renderer *this)
{
  uint64_t result;
  int v3;

  (*(void (**)(CEA608Renderer *, _QWORD))(*(_QWORD *)this + 176))(this, *((unsigned __int8 *)this + 49));
  result = (*(uint64_t (**)(CEA608Renderer *, _QWORD))(*(_QWORD *)this + 184))(this, *((unsigned __int8 *)this + 49));
  v3 = *((_DWORD *)this + 14);
  if (*((_DWORD *)this + 13) != v3)
    *((_DWORD *)this + 13) = v3;
  *((_DWORD *)this + 14) = 0;
  return result;
}

BOOL CEA608Renderer::IsDisplayDirty(CEA608Renderer::Memory **this)
{
  if (*((unsigned __int8 *)this + 72) != *((unsigned __int8 *)this + 8))
    return 1;
  if (*((_BYTE *)this + 72))
    return CEA608Renderer::Memory::IsDirty(this[4]);
  return 0;
}

uint64_t FigCEA608DataGeneratorCaptionInfoCreate(int a1, int a2, __int128 *a3, CFAllocatorRef allocator, _QWORD *a5)
{
  _OWORD *v10;
  _OWORD *v11;
  CFTypeRef v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  if (((a1 - 1) < 2 || a1 == 3 && (a2 - 2) < 3)
    && (*((_DWORD *)a3 + 3) & 0x1D) == 1
    && (*((_DWORD *)a3 + 9) & 0x1D) == 1
    && (v10 = CFAllocatorAllocate(allocator, 128, 0)) != 0)
  {
    v11 = v10;
    v10[6] = 0u;
    v10[7] = 0u;
    v10[4] = 0u;
    v10[5] = 0u;
    v10[2] = 0u;
    v10[3] = 0u;
    *v10 = 0u;
    v10[1] = 0u;
    if (allocator)
      v12 = CFRetain(allocator);
    else
      v12 = 0;
    v13 = 0;
    *(_QWORD *)v11 = v12;
    *((_DWORD *)v11 + 2) = a1;
    *((_DWORD *)v11 + 3) = a2;
    v14 = *a3;
    v15 = a3[2];
    v11[2] = a3[1];
    v11[3] = v15;
    v11[1] = v14;
    *a5 = v11;
  }
  else
  {
    v13 = FigSignalErrorAt();
  }
  FigCEA608DataGeneratorCaptionInfoRelease(0);
  return v13;
}

void FigCEA608DataGeneratorCaptionInfoRelease(const __CFAllocator **ptr)
{
  const __CFAllocator *v2;
  const __CFAllocator *v3;

  if (ptr)
  {
    v2 = *ptr;
    v3 = ptr[14];
    if (v3)
      CFRelease(v3);
    CFAllocatorDeallocate(v2, ptr);
    if (v2)
      CFRelease(v2);
  }
}

uint64_t FigCEA608DataGeneratorCreate(uint64_t a1, uint64_t a2, CFAllocatorRef allocator, _QWORD *a4)
{
  CFAllocatorRef v5;
  char *v8;
  char *v9;
  CFTypeRef v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v15;
  uint64_t v16;
  const __CFString *v17;
  uint64_t v18;
  uint64_t v19;
  const UniChar *v20;
  const char *v21;
  CFMutableDictionaryRef v22;
  __CFDictionary *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int16 v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  const __CFString *v39;
  uint64_t Length;
  const __CFString *v41;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  const UniChar *v44;
  const char *v45;
  CFMutableDictionaryRef v46;
  __CFDictionary *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int16 v56;
  uint64_t v57;
  unsigned __int16 v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  const void *v68;
  _QWORD *v70;
  char *v71;
  __CFDictionary *theDict;
  char v73;
  uint64_t v74;
  CFAllocatorRef allocatorb[2];
  const __CFAllocator *allocatora;
  CMTimeRange v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 theString;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  CMTime duration;
  __CFDictionary *v88;
  __CFDictionary *v89;
  __int128 start;
  __int128 start_16;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  _QWORD v102[5];
  CFRange v103;
  CFRange v104;
  CFRange v105;

  v102[2] = *MEMORY[0x1E0C80C00];
  if (!a1 || !a4)
  {
    v64 = FigSignalErrorAt();
    goto LABEL_95;
  }
  v5 = allocator;
  v8 = (char *)CFAllocatorAllocate(allocator, 160, 0);
  v9 = v8;
  if (!v8)
  {
    v64 = FigSignalErrorAt();
    goto LABEL_96;
  }
  *((_OWORD *)v8 + 8) = 0u;
  *((_OWORD *)v8 + 9) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_OWORD *)v8 + 7) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  v70 = a4;
  if (v5)
    v10 = CFRetain(v5);
  else
    v10 = 0;
  *(_QWORD *)v9 = v10;
  v9[9] = 1;
  start = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)allocatorb = start;
  *(_QWORD *)&start_16 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v11 = start_16;
  duration = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
  CMTimeRangeMake(&v77, (CMTime *)&start, &duration);
  v12 = *(_OWORD *)&v77.start.value;
  v13 = *(_OWORD *)&v77.start.epoch;
  *(_OWORD *)(v9 + 44) = *(_OWORD *)&v77.duration.timescale;
  *(_QWORD *)(v9 + 76) = 0;
  *(_OWORD *)(v9 + 28) = v13;
  *(_OWORD *)(v9 + 12) = v12;
  *(_OWORD *)(v9 + 120) = *(_OWORD *)allocatorb;
  *(_OWORD *)(v9 + 60) = kFigCEA608DefaultFrameDuration;
  *((_QWORD *)v9 + 18) = a2;
  *((_QWORD *)v9 + 19) = a1;
  *((_QWORD *)v9 + 17) = v11;
  v88 = 0;
  v89 = 0;
  *(_QWORD *)&start = 0x1E2FD53D8;
  *((_QWORD *)&start + 1) = 0x1E2FD53F8;
  *(_QWORD *)&start_16 = 0x1E2FD5418;
  *((_QWORD *)&start_16 + 1) = 0x1E2FD5438;
  Mutable = CFDictionaryCreateMutable(v5, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  allocatora = v5;
  v71 = v9;
  if (!Mutable)
  {
    v64 = FigSignalErrorAt();
    if ((_DWORD)v64)
      goto LABEL_89;
LABEL_40:
    duration.value = 0x1E2FD5418;
    *(_QWORD *)&duration.timescale = 0x1E2FD5438;
    v102[0] = 0x1E2FD5458;
    v102[1] = 0x1E2FD5478;
    theDict = CFDictionaryCreateMutable(v5, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (theDict)
    {
      v36 = 0;
      v37 = 1;
      while (1)
      {
        v38 = v37;
        v39 = (const __CFString *)*(&duration.value + v36);
        Length = CFStringGetLength(v39);
        v41 = (const __CFString *)v102[v36];
        if (Length != CFStringGetLength(v41))
          break;
        v84 = 0uLL;
        v85 = 0u;
        theString = 0u;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        v78 = 0u;
        memset(&v77, 0, sizeof(v77));
        v101 = 0;
        v99 = 0u;
        v100 = 0u;
        v97 = 0u;
        v98 = 0u;
        v95 = 0u;
        v96 = 0u;
        v93 = 0u;
        v94 = 0u;
        start_16 = 0u;
        v92 = 0u;
        start = 0u;
        *(_QWORD *)&theString = v39;
        *(_QWORD *)&v85 = Length;
        v86 = 0;
        CharactersPtr = CFStringGetCharactersPtr(v39);
        CStringPtr = 0;
        *((_QWORD *)&theString + 1) = CharactersPtr;
        if (!CharactersPtr)
          CStringPtr = CFStringGetCStringPtr(v39, 0x600u);
        *(_QWORD *)&v84 = CStringPtr;
        *((_QWORD *)&v85 + 1) = 0;
        v86 = 0;
        *(_QWORD *)&v98 = v41;
        *((_QWORD *)&v99 + 1) = 0;
        *(_QWORD *)&v100 = Length;
        v44 = CFStringGetCharactersPtr(v41);
        v45 = 0;
        *((_QWORD *)&v98 + 1) = v44;
        if (!v44)
          v45 = CFStringGetCStringPtr(v41, 0x600u);
        *(_QWORD *)&v99 = v45;
        *((_QWORD *)&v100 + 1) = 0;
        v101 = 0;
        v46 = CFDictionaryCreateMutable(allocatora, Length, 0, 0);
        if (!v46)
          break;
        v47 = v46;
        v73 = v38;
        v74 = v36;
        if (Length >= 1)
        {
          v48 = 0;
          v49 = 0;
          v50 = 64;
          do
          {
            if ((unint64_t)v49 >= 4)
              v51 = 4;
            else
              v51 = v49;
            v52 = v51 + v48;
            v53 = v50 - v51;
            v54 = -v51;
            v55 = v85;
            if ((uint64_t)v85 <= v49)
            {
              v56 = 0;
            }
            else if (*((_QWORD *)&theString + 1))
            {
              v56 = *(_WORD *)(*((_QWORD *)&theString + 1) + 2 * (v49 + *((_QWORD *)&v84 + 1)));
            }
            else if ((_QWORD)v84)
            {
              v56 = *(char *)(v84 + *((_QWORD *)&v84 + 1) + v49);
            }
            else
            {
              v59 = *((_QWORD *)&v85 + 1);
              if (v86 <= v49 || *((_QWORD *)&v85 + 1) > v49)
              {
                v61 = v49 + v54 + 64;
                if (v61 >= (uint64_t)v85)
                  v61 = v85;
                *((_QWORD *)&v85 + 1) = v49 + v54;
                v86 = v61;
                if ((uint64_t)v85 >= v53)
                  v55 = v53;
                v104.length = v55 + v52;
                v104.location = v49 + v54 + *((_QWORD *)&v84 + 1);
                CFStringGetCharacters((CFStringRef)theString, v104, (UniChar *)&v77);
                v59 = *((_QWORD *)&v85 + 1);
              }
              v56 = *((_WORD *)&v77.start.value + v49 - v59);
            }
            v57 = v100;
            if ((uint64_t)v100 <= v49)
            {
              v58 = 0;
            }
            else if (*((_QWORD *)&v98 + 1))
            {
              v58 = *(_WORD *)(*((_QWORD *)&v98 + 1) + 2 * (v49 + *((_QWORD *)&v99 + 1)));
            }
            else if ((_QWORD)v99)
            {
              v58 = *(char *)(v99 + *((_QWORD *)&v99 + 1) + v49);
            }
            else
            {
              if (v101 <= v49 || (v62 = *((_QWORD *)&v100 + 1), *((uint64_t *)&v100 + 1) > v49))
              {
                v63 = v49 + v54 + 64;
                if (v63 >= (uint64_t)v100)
                  v63 = v100;
                *((_QWORD *)&v100 + 1) = v49 + v54;
                v101 = v63;
                if ((uint64_t)v100 >= v53)
                  v57 = v53;
                v105.length = v57 + v52;
                v105.location = v49 + v54 + *((_QWORD *)&v99 + 1);
                CFStringGetCharacters((CFStringRef)v98, v105, (UniChar *)&start);
                v62 = *((_QWORD *)&v100 + 1);
              }
              v58 = *((_WORD *)&start + v49 - v62);
            }
            CFDictionaryAddValue(v47, (const void *)v56, (const void *)v58);
            ++v49;
            --v48;
            ++v50;
          }
          while (Length != v49);
        }
        CFDictionaryAddValue(theDict, off_1E2F7A548[v74], v47);
        CFRelease(v47);
        v37 = 0;
        v36 = 1;
        if ((v73 & 1) == 0)
        {
          v89 = theDict;
          v9 = v71;
          goto LABEL_87;
        }
      }
      v64 = FigSignalErrorAt();
      CFRelease(theDict);
      v9 = v71;
      if ((_DWORD)v64)
        goto LABEL_89;
    }
    else
    {
      v64 = FigSignalErrorAt();
      if ((_DWORD)v64)
        goto LABEL_89;
    }
LABEL_87:
    v64 = FigCFCreateCombinedDictionary();
    if (!(_DWORD)v64)
      *((_QWORD *)v9 + 11) = 0;
    goto LABEL_89;
  }
  v15 = Mutable;
  v16 = 0;
  while (1)
  {
    v17 = (const __CFString *)*((_QWORD *)&start + v16);
    if (FigCFEqual())
      v18 = 48;
    else
      v18 = 32;
    v19 = CFStringGetLength(v17);
    v84 = 0u;
    v85 = 0u;
    v86 = 0;
    theString = 0u;
    v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    v80 = 0u;
    v78 = 0u;
    memset(&v77, 0, sizeof(v77));
    *(_QWORD *)&theString = v17;
    *(_QWORD *)&v85 = v19;
    v20 = CFStringGetCharactersPtr(v17);
    v21 = 0;
    *((_QWORD *)&theString + 1) = v20;
    if (!v20)
      v21 = CFStringGetCStringPtr(v17, 0x600u);
    *(_QWORD *)&v84 = v21;
    *((_QWORD *)&v85 + 1) = 0;
    v86 = 0;
    v22 = CFDictionaryCreateMutable(v5, v19, 0, 0);
    if (!v22)
      break;
    v23 = v22;
    if (v19 >= 1)
    {
      v24 = 0;
      v25 = 0;
      v26 = 64;
      do
      {
        if ((unint64_t)v25 >= 4)
          v27 = 4;
        else
          v27 = v25;
        v28 = v85;
        if ((uint64_t)v85 <= v25)
        {
          v29 = 0;
        }
        else if (*((_QWORD *)&theString + 1))
        {
          v29 = *(_WORD *)(*((_QWORD *)&theString + 1) + 2 * (v25 + *((_QWORD *)&v84 + 1)));
        }
        else if ((_QWORD)v84)
        {
          v29 = *(char *)(v84 + *((_QWORD *)&v84 + 1) + v25);
        }
        else
        {
          v30 = *((_QWORD *)&v85 + 1);
          if (v86 <= v25 || *((_QWORD *)&v85 + 1) > v25)
          {
            v32 = v27 + v24;
            v33 = v26 - v27;
            v34 = v25 - v27;
            v35 = v34 + 64;
            if (v34 + 64 >= (uint64_t)v85)
              v35 = v85;
            *((_QWORD *)&v85 + 1) = v34;
            v86 = v35;
            if ((uint64_t)v85 >= v33)
              v28 = v33;
            v103.length = v28 + v32;
            v103.location = *((_QWORD *)&v84 + 1) + v34;
            CFStringGetCharacters((CFStringRef)theString, v103, (UniChar *)&v77);
            v30 = *((_QWORD *)&v85 + 1);
          }
          v29 = *((_WORD *)&v77.start.value + v25 - v30);
        }
        CFDictionaryAddValue(v23, (const void *)v29, (const void *)(v18 + v25++));
        --v24;
        ++v26;
      }
      while (v19 != v25);
    }
    CFDictionaryAddValue(v15, off_1E2F7A528[v16], v23);
    CFRelease(v23);
    ++v16;
    v5 = allocatora;
    if (v16 == 4)
    {
      v88 = v15;
      v9 = v71;
      goto LABEL_40;
    }
  }
  v64 = FigSignalErrorAt();
  CFRelease(v15);
  v9 = v71;
  if (!(_DWORD)v64)
    goto LABEL_40;
LABEL_89:
  v65 = 0;
  v66 = 1;
  do
  {
    v67 = v66;
    v68 = *(&v88 + v65);
    if (v68)
      CFRelease(v68);
    v66 = 0;
    v65 = 1;
  }
  while ((v67 & 1) != 0);
  if (!(_DWORD)v64)
  {
    *v70 = v9;
LABEL_95:
    v9 = 0;
  }
LABEL_96:
  FigCEA608DataGeneratorRelease(v9);
  return v64;
}

void FigCEA608DataGeneratorRelease(void *a1)
{
  const __CFAllocator *v2;
  const void *v3;

  if (a1)
  {
    v2 = *(const __CFAllocator **)a1;
    FigCEA608DataGeneratorCaptionInfoRelease(*((const __CFAllocator ***)a1 + 13));
    FigCEA608DataGeneratorCaptionInfoRelease(*((const __CFAllocator ***)a1 + 14));
    v3 = (const void *)*((_QWORD *)a1 + 11);
    if (v3)
      CFRelease(v3);
    CFAllocatorDeallocate(v2, a1);
    if (v2)
      CFRelease(v2);
  }
}

uint64_t FigCEA608DataGeneratorBeginCaption(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  const __CFAllocator *v4;
  _QWORD *v6;
  int v10;
  __int128 v11;
  uint64_t result;
  _OWORD *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __CFData *Mutable;
  int v19;
  __int16 v20;
  int v21;
  __int128 v22;
  CMTime time1;
  CMTime bytes;
  __int128 v25;
  CMTimeEpoch v26;
  CMTimeRange range;
  CMTime v28;

  v4 = *(const __CFAllocator **)a1;
  v25 = *(_OWORD *)(a1 + 60);
  v26 = *(_QWORD *)(a1 + 76);
  if (!a4)
    return FigSignalErrorAt();
  v6 = (_QWORD *)(a1 + 112);
  if (*(_QWORD *)(a1 + 112))
    return FigSignalErrorAt();
  v10 = *(_DWORD *)(a1 + 96);
  if (v10)
  {
    if (v10 == 2)
      return FigSignalErrorAt();
  }
  else
  {
    v28 = *(CMTime *)(a1 + 60);
    bytes = *(CMTime *)(a1 + 12);
    cea608dgCCDataGetQuantizedTimeByFrameDuration((uint64_t)&v28, &bytes, (uint64_t)&range);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)&range.start.value;
    *(_QWORD *)(a1 + 136) = range.start.epoch;
  }
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v11 = *a2;
    *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 120) = v11;
  }
  if (!a3
    || (FigCEA608DataGeneratorCaptionInfoRelease(*(const __CFAllocator ***)(a1 + 104)),
        *(_OWORD *)&range.start.value = v25,
        range.start.epoch = v26,
        result = cea608dgCaptionInfoCopy((__int128 *)&range.start.value, a3, v4, (_QWORD *)(a1 + 104)),
        !(_DWORD)result))
  {
    v13 = *(_OWORD **)(a1 + 104);
    if (v13)
    {
      v14 = v13[2];
      *(_OWORD *)&range.start.value = v13[1];
      *(_OWORD *)&range.start.epoch = v14;
      *(_OWORD *)&range.duration.timescale = v13[3];
      CMTimeRangeGetEnd(&time1, &range);
      *(_OWORD *)&range.start.value = *(_OWORD *)(a4 + 16);
      range.start.epoch = *(_QWORD *)(a4 + 32);
      if (CMTimeCompare(&time1, &range.start) >= 1)
        return FigSignalErrorAt();
    }
    *(_OWORD *)&range.start.value = v25;
    range.start.epoch = v26;
    result = cea608dgCaptionInfoCopy((__int128 *)&range.start.value, a4, v4, v6);
    if (!(_DWORD)result)
    {
      v16 = *(_QWORD *)(a1 + 104);
      v15 = *(_QWORD *)(a1 + 112);
      v17 = *(unsigned __int8 *)(a1 + 101);
      Mutable = CFDataCreateMutable(*(CFAllocatorRef *)v15, 0);
      *(_QWORD *)(v15 + 112) = Mutable;
      if (Mutable)
      {
        LOWORD(bytes.value) = 0;
        v19 = *(_DWORD *)(v15 + 8);
        switch(v19)
        {
          case 3:
            v21 = *(_DWORD *)(v15 + 12);
            switch(v21)
            {
              case 4:
                v20 = 10004;
                break;
              case 3:
                v20 = 9748;
                break;
              case 2:
                v20 = 9492;
                break;
              default:
LABEL_35:
                LOWORD(range.start.value) = 11540;
LABEL_38:
                CFDataAppendBytes(Mutable, (const UInt8 *)&range, 2);
                goto LABEL_39;
            }
            break;
          case 2:
            if (v16 && *(_DWORD *)(v16 + 8) == 2)
            {
              v22 = *(_OWORD *)(v16 + 80);
              *(_OWORD *)&range.start.value = *(_OWORD *)(v16 + 64);
              *(_OWORD *)&range.start.epoch = v22;
              *(_OWORD *)&range.duration.timescale = *(_OWORD *)(v16 + 96);
              CMTimeRangeGetEnd(&v28, &range);
              *(_OWORD *)&range.start.value = *(_OWORD *)(v15 + 64);
              range.start.epoch = *(_QWORD *)(v15 + 80);
              if (!CMTimeCompare(&v28, &range.start))
              {
LABEL_31:
                v19 = *(_DWORD *)(v15 + 8);
LABEL_32:
                if (v19 == 1)
                {
                  if (v17)
                  {
                    LOWORD(range.start.value) = 11796;
                    Mutable = *(__CFData **)(v15 + 112);
                    goto LABEL_38;
                  }
                }
                else if (v19 == 3)
                {
                  Mutable = *(__CFData **)(v15 + 112);
                  goto LABEL_35;
                }
LABEL_39:
                result = 0;
                *(_DWORD *)(a1 + 96) = 1;
                return result;
              }
              Mutable = *(__CFData **)(v15 + 112);
            }
            v20 = 10516;
            break;
          case 1:
            v20 = kFigCEA608MiscControlCodes;
            break;
          default:
            goto LABEL_32;
        }
        LOWORD(bytes.value) = v20;
        CFDataAppendBytes(Mutable, (const UInt8 *)&bytes, 2);
        goto LABEL_31;
      }
      result = FigSignalErrorAt();
      if (!(_DWORD)result)
        goto LABEL_39;
    }
  }
  return result;
}

__n128 cea608dgCCDataGetQuantizedTimeByFrameDuration@<Q0>(uint64_t a1@<X0>, CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  float v6;
  __n128 result;
  CMTime v8;
  CMTime time;

  if ((a2->flags & 0x1D) == 1)
  {
    time = *a2;
    v6 = CMTimeGetSeconds(&time) * (float)((float)*(int *)(a1 + 8) / (float)*(uint64_t *)a1);
    v8 = *(CMTime *)a1;
    CMTimeMultiply(&time, &v8, llroundf(v6));
    *a2 = time;
  }
  result = *(__n128 *)&a2->value;
  *(_OWORD *)a3 = *(_OWORD *)&a2->value;
  *(_QWORD *)(a3 + 16) = a2->epoch;
  return result;
}

uint64_t cea608dgCaptionInfoCopy(__int128 *a1, uint64_t a2, CFAllocatorRef allocator, _QWORD *a4)
{
  _OWORD *v7;
  _OWORD *v8;
  CFTypeRef v9;
  __int128 v10;
  __int128 v11;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  CMTimeFlags v14;
  CMTimeEpoch v15;
  CMTimeScale v16;
  CMTimeValue v17;
  CMTimeScale v18;
  __int128 v20;
  CMTimeEpoch v21;
  CMTime rhs;
  CMTime duration;
  CMTime v24;
  CMTime v25;
  CMTimeValue v26;
  CMTimeScale v27;
  CMTimeValue value;
  CMTimeScale timescale;
  CMTimeRange range;
  CMTime v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v7 = CFAllocatorAllocate(allocator, 128, 0);
  if (!v7)
    return FigSignalErrorAt();
  v8 = v7;
  v7[6] = 0u;
  v7[7] = 0u;
  v7[4] = 0u;
  v7[5] = 0u;
  v7[2] = 0u;
  v7[3] = 0u;
  *v7 = 0u;
  v7[1] = 0u;
  v9 = *(CFTypeRef *)a2;
  if (*(_QWORD *)a2)
    v9 = CFRetain(v9);
  *(_QWORD *)v8 = v9;
  *((_QWORD *)v8 + 1) = *(_QWORD *)(a2 + 8);
  v10 = *(_OWORD *)(a2 + 16);
  v11 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v11;
  v8[1] = v10;
  v20 = *a1;
  v21 = *((_QWORD *)a1 + 2);
  value = *(_QWORD *)(a2 + 16);
  flags = *(_DWORD *)(a2 + 28);
  timescale = *(_DWORD *)(a2 + 24);
  epoch = *(_QWORD *)(a2 + 32);
  v26 = *(_QWORD *)(a2 + 40);
  v14 = *(_DWORD *)(a2 + 52);
  v27 = *(_DWORD *)(a2 + 48);
  v15 = *(_QWORD *)(a2 + 56);
  if ((flags & 0x1D) == 1 && (v14 & 0x1D) == 1)
  {
    memset(&v31, 0, sizeof(v31));
    *(_OWORD *)&range.start.value = *a1;
    range.start.epoch = *((_QWORD *)a1 + 2);
    v25.value = *(_QWORD *)(a2 + 16);
    v25.timescale = *(_DWORD *)(a2 + 24);
    v25.flags = flags;
    v25.epoch = epoch;
    cea608dgCCDataGetQuantizedTimeByFrameDuration((uint64_t)&range, &v25, (uint64_t)&v31);
    memset(&v25, 0, sizeof(v25));
    range.start.value = value;
    range.start.timescale = timescale;
    range.start.flags = flags;
    range.start.epoch = epoch;
    range.duration.value = v26;
    range.duration.timescale = v27;
    range.duration.flags = v14;
    range.duration.epoch = v15;
    CMTimeRangeGetEnd(&v24, &range);
    *(_OWORD *)&range.start.value = v20;
    range.start.epoch = v21;
    cea608dgCCDataGetQuantizedTimeByFrameDuration((uint64_t)&range, &v24, (uint64_t)&v25);
    range.start = v25;
    rhs = v31;
    CMTimeSubtract(&duration, &range.start, &rhs);
    rhs = v31;
    CMTimeRangeMake(&range, &rhs, &duration);
    value = range.start.value;
    flags = range.start.flags;
    timescale = range.start.timescale;
    epoch = range.start.epoch;
    v26 = range.duration.value;
    v14 = range.duration.flags;
    v27 = range.duration.timescale;
    v15 = range.duration.epoch;
  }
  range.start.value = value;
  v16 = timescale;
  range.start.timescale = timescale;
  v17 = v26;
  v31.value = v26;
  v18 = v27;
  v31.timescale = v27;
  *((_QWORD *)v8 + 8) = value;
  *((_DWORD *)v8 + 18) = v16;
  *((_DWORD *)v8 + 19) = flags;
  *((_QWORD *)v8 + 10) = epoch;
  *((_QWORD *)v8 + 11) = v17;
  *((_DWORD *)v8 + 24) = v18;
  *((_DWORD *)v8 + 25) = v14;
  *((_QWORD *)v8 + 13) = v15;
  *a4 = v8;
  return 0;
}

uint64_t FigCEA608DataGeneratorAddCaptionLine(uint64_t a1, unsigned int a2, unsigned int a3, CFAttributedStringRef aStr)
{
  uint64_t v7;
  __CFData *v8;
  const __CFDictionary *v9;
  const __CFString *String;
  CFIndex Length;
  uint64_t Limit;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  BOOL v19;
  char v20;
  char v23;
  char v24;
  UInt8 v25;
  char v26;
  CFIndex v27;
  unint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  _BOOL4 v31;
  uint64_t v32;
  _BOOL4 v33;
  char v34;
  unsigned int v35;
  int v36;
  char v37;
  __int16 *v38;
  unsigned int v39;
  BOOL v40;
  uint64_t v41;
  _BOOL4 v42;
  BOOL v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  const UInt8 *BytePtr;
  int v50;
  CFIndex location;
  CFRange v52;
  CFIndex v53;
  unsigned int CharacterAtIndex;
  int v55;
  uint64_t v56;
  char v57;
  char v58;
  const __CFDictionary *Value;
  int ValueIfPresent;
  uint64_t result;
  unsigned __int16 v62;
  int v65;
  CFIndex v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  UInt8 v71;
  int v72;
  CFIndex v74;
  const __CFAttributedString *aStra;
  uint64_t v76;
  unint64_t v77;
  __int128 v78;
  CFRange longestEffectiveRange;
  UInt8 bytes[16];
  __int16 v81;
  int v82;
  UInt8 v83[2];
  UInt8 buffer[2];
  char v85;
  char v86;
  UInt8 v87[4];
  UInt8 v88[10];
  CFRange v89;

  if (!a1)
    return FigSignalErrorAt();
  if (a2 - 16 <= 0xFFFFFFF0)
    return FigSignalErrorAt();
  if (a3 - 33 <= 0xFFFFFFDF)
    return FigSignalErrorAt();
  if (!aStr)
    return FigSignalErrorAt();
  if (!CFAttributedStringGetLength(aStr))
    return FigSignalErrorAt();
  v7 = *(_QWORD *)(a1 + 112);
  if (!v7)
    return FigSignalErrorAt();
  v8 = *(__CFData **)(v7 + 112);
  v69 = a1;
  v9 = *(const __CFDictionary **)(a1 + 88);
  String = CFAttributedStringGetString(aStr);
  Length = CFStringGetLength(String);
  longestEffectiveRange.location = 0;
  longestEffectiveRange.length = 0;
  Limit = FigCFRangeGetLimit();
  if (Limit < FigCFRangeGetLimit())
  {
    aStra = aStr;
    v13 = 0;
    v14 = 0;
    LODWORD(v15) = 0;
    v16 = a2 - 1;
    v17 = a2 & 0xFFFFFFFE;
    if ((a2 & 0xFFFFFFFE) == 0xE)
      v18 = 20;
    else
      v18 = 0;
    v19 = v17 == 12;
    if (v17 == 12)
      v20 = 19;
    else
      v20 = v18;
    if ((v19 || a2 >= 0xC) && v16 >= 0xB)
      v23 = a2;
    else
      v23 = a2 - 1;
    v72 = (a3 - 1) & 3;
    if (v16 < 2)
      v24 = 17;
    else
      v24 = 18;
    if (v16 >= 4)
      v24 = 21;
    if (v16 >= 6)
      v24 = 22;
    if (v16 >= 8)
      v24 = 23;
    if (v16 >= 0xA)
      v24 = 16;
    if (v16 >= 0xB)
      v25 = v20;
    else
      v25 = v24;
    v71 = v25;
    v70 = 32 * (v23 & 1);
    v26 = 1;
    v74 = Length;
    while (1)
    {
      v27 = FigCFRangeGetLimit();
      v89.location = 0;
      v89.length = Length;
      CFAttributedStringGetAttributesAndLongestEffectiveRange(aStra, v27, v89, &longestEffectiveRange);
      *(_OWORD *)bytes = xmmword_1932F6F70;
      FigCFDictionaryGetInt32IfPresent();
      if (*(_DWORD *)bytes > 7u
        || (FigCFDictionaryGetInt32IfPresent(), *(_DWORD *)&bytes[4] > 7u)
        || (FigCFDictionaryGetInt32IfPresent(), *(_DWORD *)&bytes[8] > 2u))
      {
        result = FigSignalErrorAt();
        v29 = 0;
        v28 = 0;
        if ((_DWORD)result)
          return result;
      }
      else
      {
        FigCFDictionaryGetBooleanIfPresent();
        FigCFDictionaryGetBooleanIfPresent();
        v28 = *(_QWORD *)bytes;
        v29 = *(_QWORD *)&bytes[8];
      }
      v76 = v29;
      v77 = v28;
      if ((v26 & 1) != 0)
      {
        v30 = (v29 & 0xFF00000000) != 0;
        if (HIDWORD(v28) != 7)
          v30 = 0;
        if ((_DWORD)v29)
          v31 = 0;
        else
          v31 = v30;
        v32 = v29 & 0xFF0000000000;
        v33 = (v29 & 0xFF0000000000) == 0 && v31;
        if (a3 > 4 || (_DWORD)v28 == 7)
        {
          v36 = 0;
          v35 = ((((a3 - 1) >> 1) & 0x7E) + 16) | v33;
        }
        else
        {
          if ((v29 & 0xFF00000000) != 0)
            v34 = 15;
          else
            v34 = 14;
          v35 = v33 | (2 * v28);
          v36 = v28;
          if (!(_DWORD)v28 && v32)
          {
            v36 = 0;
            v37 = 1;
            LOBYTE(v35) = v34;
LABEL_62:
            bytes[0] = v71;
            bytes[1] = v70 | v35 | 0x40;
            CFDataAppendBytes(v8, bytes, 2);
            if (v72)
            {
              *(_WORD *)v87 = kFigCEA608TabOffsetControlCodes[v72 - 1];
              CFDataAppendBytes(v8, v87, 2);
            }
            LODWORD(v78) = v36;
            *(_QWORD *)((char *)&v78 + 4) = 7;
            BYTE12(v78) = v33;
            BYTE13(v78) = v37;
            HIWORD(v78) = 0;
            v13 = *((_QWORD *)&v78 + 1);
            v14 = v78;
            v29 = v76;
            goto LABEL_65;
          }
        }
        if (v35 <= 0x1F)
        {
          v37 = 0;
          goto LABEL_62;
        }
        result = FigSignalErrorAt();
        v29 = v76;
        if ((_DWORD)result)
          return result;
      }
LABEL_65:
      if ((HIDWORD(v14) != HIDWORD(v28) || (_DWORD)v13 != (_DWORD)v29) && ((_DWORD)v13 != 2 || (_DWORD)v29 != 2))
      {
        if ((_DWORD)v29 == 2)
        {
          v38 = kFigCEA608ForegroundAttributeCodes;
          if ((_DWORD)v13 != 2)
            goto LABEL_73;
        }
        v39 = v29 + 2 * HIDWORD(v28);
        if (v39 <= 0xF)
        {
          v38 = &kFigCEA608BackgroundAttributeCodes[v39];
LABEL_73:
          *(_WORD *)bytes = *v38;
          v87[0] = 32;
          CFDataAppendBytes(v8, v87, 1);
          cea608dgCCDataAppendPaddingIfNeeded(v8);
          CFDataAppendBytes(v8, bytes, 2);
          goto LABEL_74;
        }
        result = FigSignalErrorAt();
        if ((_DWORD)result)
          return result;
      }
LABEL_74:
      if ((_DWORD)v14 != (_DWORD)v28 || BYTE4(v13) != BYTE4(v29) || BYTE5(v13) != BYTE5(v29))
      {
        v40 = BYTE4(v29) != BYTE4(v13);
        v41 = v29 & 0xFF0000000000;
        v42 = (v29 & 0xFF0000000000) == 0 && (BYTE5(v13) ^ BYTE5(v29)) != 0;
        if ((v29 & 0xFF0000000000) != 0)
          v40 = 0;
        if ((_DWORD)v14 != (_DWORD)v28 || v40 || v42)
        {
          if (BYTE4(v29))
            v43 = v41 == 0;
          else
            v43 = 0;
          v44 = v43;
          if ((_DWORD)v28 == 7)
          {
            v19 = v44 == 0;
            v45 = 1;
            if (!v19)
              v45 = 2;
            *(_WORD *)bytes = kFigCEA608ForegroundAttributeCodes[v45];
            v87[0] = 32;
            CFDataAppendBytes(v8, v87, 1);
            cea608dgCCDataAppendPaddingIfNeeded(v8);
          }
          else
          {
            v46 = v44 | (2 * v28);
            if (v46 > 0xF)
            {
              result = FigSignalErrorAt();
              if ((_DWORD)result)
                return result;
              goto LABEL_102;
            }
            *(_WORD *)bytes = kFigCEA608MidRowCodes[v46];
          }
          CFDataAppendBytes(v8, bytes, 2);
        }
        if (v41)
        {
          v47 = 15;
          if (!BYTE4(v29))
            v47 = 14;
          *(_WORD *)bytes = kFigCEA608MidRowCodes[v47];
          CFDataAppendBytes(v8, bytes, 2);
        }
      }
LABEL_102:
      if (!(_DWORD)v15)
      {
        v48 = CFDataGetLength(v8);
        BytePtr = CFDataGetBytePtr(v8);
        if (v48 < 2)
        {
LABEL_107:
          v15 = (unint64_t)CFDataGetLength(v8) >> 1;
        }
        else
        {
          v15 = 0;
          while (1)
          {
            v50 = *BytePtr;
            BytePtr += 2;
            if (v50 == 32)
              break;
            if (v48 >> 1 == ++v15)
              goto LABEL_107;
          }
        }
      }
      location = longestEffectiveRange.location;
      *(_WORD *)buffer = 0;
      v52.location = CFDataGetLength(v8) - 2;
      if (v52.location >= 0)
      {
        v52.length = 2;
        CFDataGetBytes(v8, v52, buffer);
      }
      if (location < FigCFRangeGetLimit())
      {
        v53 = location;
        do
        {
          *(_WORD *)v83 = 0;
          v82 = 0;
          v81 = 0;
          CharacterAtIndex = CFStringGetCharacterAtIndex(String, v53);
          if (!cea608dgCharacterMappingGetControlCodeForCharacter(v9, CharacterAtIndex, (char *)v83, &v82, (char *)&v81 + 1, (char *)&v81))
          {
            v83[0] = 127;
            v82 = 1;
          }
          if (HIBYTE(v81) && buffer[0] == v83[0])
          {
            if (buffer[1] == v83[1])
              v55 = 2;
            else
              v55 = 1;
          }
          else
          {
            v55 = 1;
          }
          if ((_BYTE)v81)
          {
            v56 = 0;
            *(_QWORD *)bytes = 0;
            v57 = 1;
            do
            {
              v58 = v57;
              Value = (const __CFDictionary *)CFDictionaryGetValue(v9, off_1E2F7A548[v56]);
              ValueIfPresent = CFDictionaryGetValueIfPresent(Value, (const void *)CharacterAtIndex, (const void **)bytes);
              if (ValueIfPresent == 1)
              {
                v62 = *(_WORD *)bytes;
                goto LABEL_128;
              }
              if (ValueIfPresent)
                break;
              v57 = 0;
              v56 = 1;
            }
            while ((v58 & 1) != 0);
            result = FigSignalErrorAt();
            v62 = 0;
            if ((_DWORD)result)
              return result;
LABEL_128:
            *(_WORD *)v88 = 0;
            *(_DWORD *)v87 = 0;
            v85 = 0;
            if (cea608dgCharacterMappingGetControlCodeForCharacter(v9, v62, (char *)v88, (int *)v87, &v86, &v85) == 1&& *(_DWORD *)v87 == 1&& v85 == 0)
            {
              CFDataAppendBytes(v8, v88, 1);
            }
            else
            {
              result = FigSignalErrorAt();
              if ((_DWORD)result)
                return result;
            }
          }
          v65 = v82;
          if (v82 == 1)
            v66 = 1;
          else
            v66 = 2;
          do
          {
            if (v65 == 2)
              cea608dgCCDataAppendPaddingIfNeeded(v8);
            CFDataAppendBytes(v8, v83, v66);
            --v55;
          }
          while (v55);
          *(_WORD *)buffer = *(_WORD *)v83;
          ++v53;
        }
        while (v53 < FigCFRangeGetLimit());
      }
      cea608dgCCDataAppendPaddingIfNeeded(v8);
      v13 = v76;
      v14 = v77;
      v67 = FigCFRangeGetLimit();
      Length = v74;
      v26 = 0;
      if (v67 >= FigCFRangeGetLimit())
        goto LABEL_158;
    }
  }
  LODWORD(v15) = 0;
LABEL_158:
  v68 = *(_QWORD *)(v69 + 112);
  result = 0;
  if (!*(_DWORD *)(v68 + 120))
    *(_DWORD *)(v68 + 120) = v15;
  return result;
}

uint64_t FigCEA608DataGeneratorEndCaption(uint64_t a1, CMTime *a2, CMTime *a3, uint64_t a4)
{
  uint64_t result;
  __int128 v7;

  if (!a1 || !*(_QWORD *)(a1 + 112))
    return FigSignalErrorAt();
  result = cea608dgStoreCCDataSequentially(a1, a2, a3);
  if (a4)
  {
    if (!(_DWORD)result)
    {
      v7 = *(_OWORD *)(a1 + 120);
      *(_QWORD *)(a4 + 16) = *(_QWORD *)(a1 + 136);
      *(_OWORD *)a4 = v7;
    }
  }
  return result;
}

uint64_t cea608dgStoreCCDataSequentially(uint64_t a1, CMTime *a2, CMTime *a3)
{
  _OWORD *v4;
  CMTimeEpoch v5;
  uint64_t v6;
  CMTimeValue v7;
  CMTimeScale v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  const void *v12;
  const __CFData *v13;
  uint64_t v14;
  CMTimeFlags v15;
  CMTimeEpoch v16;
  CMTimeValue v17;
  CMTimeScale v18;
  CMTimeFlags v19;
  CMTimeEpoch v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  int32_t v25;
  int v26;
  CMTimeValue value;
  CMTimeEpoch v28;
  CMTimeFlags v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t AheadDuration;
  __int128 v35;
  uint64_t v36;
  int v37;
  const void *v38;
  CMTimeEpoch v39;
  const __CFData *v40;
  CMTime *v41;
  CFDataRef v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  _OWORD *v48;
  __int128 v49;
  uint64_t v50;
  CMTimeEpoch v51;
  CMTimeFlags v52;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  const __CFData *v55;
  const __CFData *v56;
  __int128 v57;
  int v58;
  CMTimeFlags v59;
  CMTimeEpoch v60;
  int32_t v61;
  CMTimeFlags v62;
  CMTimeEpoch v63;
  int32_t v64;
  uint64_t ByteLengthFromDuration;
  const __CFData *v66;
  CMTimeEpoch v67;
  __CFData *v68;
  const __CFAllocator *v69;
  CFIndex Length;
  __CFData *Mutable;
  const UInt8 *BytePtr;
  CFIndex v73;
  CMTimeEpoch v74;
  CMTimeEpoch v75;
  CMTimeValue v76;
  CMTimeScale v77;
  const UInt8 *v78;
  int v79;
  __int128 v80;
  uint64_t v81;
  __CFData *v82;
  _BYTE *v83;
  CMTime *v84;
  _BYTE *v85;
  __int128 v86;
  uint64_t v87;
  __CFData *v88;
  __int128 v89;
  CMTime *v90;
  CMTime *v91;
  __int128 v92;
  uint64_t v94;
  CMTimeFlags v95;
  CMTimeFlags v96;
  CMTimeScale v97;
  CMTimeEpoch v98;
  CMTimeValue v99;
  CMTimeEpoch v100;
  CMTimeScale v101;
  CMTimeFlags v104;
  CMTimeEpoch v105;
  CMTimeEpoch v106;
  CMTimeFlags v107;
  CMTime *v108;
  CMTimeValue v109;
  CMTimeEpoch v110;
  CMTimeEpoch v111;
  CMTimeEpoch v112;
  CMTimeFlags v113;
  CMTimeEpoch v114;
  CMTimeScale v115;
  const __CFData *v116;
  const __CFData *v117;
  const __CFData *theData;
  CMTimeFlags v119;
  CMTimeValue v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  const __CFAllocator *allocator;
  CFAllocatorRef allocatora[2];
  CMTimeRange rhs;
  CMTime v127;
  CMTimeRange v128;
  __int128 v129;
  CMTimeEpoch v130;
  CMTime v131;
  CMTime v132;
  uint64_t v133;
  uint64_t v134;
  CMTime v135;
  CMTime lhs;
  CMTime v137;
  CMTime v138;
  CMTime start;
  CMTime v140;
  CMTime v141;
  CMTime v142;
  CMTime v143;
  CMTime v144;
  CMTime v145;
  CMTime v146;
  CMTimeRange v147;
  CMTimeRange v148;
  CMTime v149;
  CMTimeRange time1;
  CMTime v151;
  CMTime time2;
  CMTimeRange range;
  CMTimeValue v154;
  CMTimeScale v155;
  CMTimeValue v156;
  CMTimeScale timescale;
  CMTimeValue v158;
  CMTimeScale v159;
  CMTimeValue v160;
  CMTimeScale v161;
  CMTimeValue v162;
  CMTimeScale v163;
  CMTimeValue v164;
  CMTimeScale v165;
  CMTime duration;
  CMTimeValue v167;
  CMTimeScale v168;
  _BYTE v169[64];
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  CMTimeRange v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;

  v180 = *MEMORY[0x1E0C80C00];
  allocator = *(const __CFAllocator **)a1;
  v129 = *(_OWORD *)(a1 + 60);
  v130 = *(_QWORD *)(a1 + 76);
  v4 = (_OWORD *)MEMORY[0x1E0CA2E18];
  v164 = *MEMORY[0x1E0CA2E18];
  v165 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v6 = MEMORY[0x1E0CA2E40];
  v7 = *MEMORY[0x1E0CA2E40];
  v162 = v7;
  v8 = *(_DWORD *)(MEMORY[0x1E0CA2E40] + 8);
  v163 = v8;
  v160 = v7;
  v161 = v8;
  v9 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
  v122 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  v123 = *MEMORY[0x1E0CA2E40];
  *(_OWORD *)&v128.start.value = *MEMORY[0x1E0CA2E40];
  *(_OWORD *)&v128.start.epoch = v122;
  v121 = v9;
  *(_OWORD *)&v128.duration.timescale = v9;
  v10 = *(_QWORD *)(a1 + 112);
  v108 = (CMTime *)(a1 + 60);
  if (v10)
  {
    *(_OWORD *)&time1.start.value = *(_OWORD *)(a1 + 60);
    time1.start.epoch = *(_QWORD *)(a1 + 76);
    v11 = *(_DWORD *)(v10 + 8);
    *(_OWORD *)v169 = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)&v169[16] = v5;
    if (v11 == 1 && (v12 = *(const void **)(v10 + 112)) != 0)
      v13 = (const __CFData *)CFRetain(v12);
    else
      v13 = 0;
    *(_OWORD *)&range.start.value = *(_OWORD *)&time1.start.value;
    range.start.epoch = time1.start.epoch;
    v14 = cea608dgCCDataGetDuration(v13, &range.start, (CMTime *)v169);
    if ((_DWORD)v14)
    {
      v31 = v14;
      goto LABEL_155;
    }
    v164 = *(_QWORD *)v169;
    v107 = *(_DWORD *)&v169[12];
    v165 = *(_DWORD *)&v169[8];
    v106 = *(_QWORD *)&v169[16];
    if (v11 == 1 && v13)
      *(_BYTE *)(a1 + 101) = 1;
  }
  else
  {
    v13 = 0;
    v107 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
    v106 = v5;
  }
  v116 = v13;
  v15 = *(_DWORD *)(v6 + 12);
  v16 = *(_QWORD *)(v6 + 16);
  v17 = *(_QWORD *)(v6 + 24);
  v18 = *(_DWORD *)(v6 + 32);
  v19 = *(_DWORD *)(v6 + 36);
  v20 = *(_QWORD *)(v6 + 40);
  v21 = *(_QWORD *)(a1 + 104);
  v99 = v17;
  v100 = v16;
  v98 = v20;
  v96 = v19;
  v97 = v18;
  if (!v21)
  {
    value = 0;
    v104 = v15;
    v28 = v16;
    v120 = v17;
    v115 = v18;
    v29 = v19;
    v111 = v20;
    goto LABEL_31;
  }
  v22 = *(_QWORD *)(a1 + 112);
  v23 = *(unsigned __int8 *)(a1 + 8);
  v149.value = 0;
  *(_OWORD *)v169 = v123;
  *(_OWORD *)&v169[16] = v122;
  *(_OWORD *)&v169[32] = v121;
  if (v22)
  {
    v24 = *(_OWORD *)(v21 + 80);
    *(_OWORD *)&range.start.value = *(_OWORD *)(v21 + 64);
    *(_OWORD *)&range.start.epoch = v24;
    *(_OWORD *)&range.duration.timescale = *(_OWORD *)(v21 + 96);
    CMTimeRangeGetEnd(&time1.start, &range);
    *(_OWORD *)&range.start.value = *(_OWORD *)(v22 + 64);
    range.start.epoch = *(_QWORD *)(v22 + 80);
    v25 = CMTimeCompare(&time1.start, &range.start);
    v26 = *(_DWORD *)(v22 + 8);
    if (v26 == 3)
    {
      if (*(_DWORD *)(v21 + 8) != 3)
      {
        *(_OWORD *)&v148.start.value = *v4;
        v148.start.epoch = v5;
        v33 = *(int *)(v22 + 120);
        *(_OWORD *)&range.start.value = v129;
        range.start.epoch = v130;
        AheadDuration = cea608dgGetAheadDuration(&range.start, v33, &v148.start);
        if ((_DWORD)AheadDuration)
        {
          v31 = AheadDuration;
LABEL_172:
          v13 = v116;
          goto LABEL_155;
        }
        memset(&v147, 0, 24);
        *(_OWORD *)&range.start.value = *(_OWORD *)(v22 + 64);
        range.start.epoch = *(_QWORD *)(v22 + 80);
        *(_OWORD *)&rhs.start.value = *(_OWORD *)&v148.start.value;
        rhs.start.epoch = v148.start.epoch;
        CMTimeSubtract(&v147.start, &range.start, &rhs.start);
        v35 = *(_OWORD *)(v21 + 80);
        *(_OWORD *)&range.start.value = *(_OWORD *)(v21 + 64);
        *(_OWORD *)&range.start.epoch = v35;
        *(_OWORD *)&range.duration.timescale = *(_OWORD *)(v21 + 96);
        CMTimeRangeGetEnd(&time2, &range);
        *(_OWORD *)&range.start.value = *(_OWORD *)&v147.start.value;
        range.start.epoch = v147.start.epoch;
        v25 = CMTimeCompare(&range.start, &time2);
      }
      goto LABEL_26;
    }
    if (v26 != 2)
    {
      if (v26 != 1)
        goto LABEL_27;
      if (v23)
        goto LABEL_21;
LABEL_26:
      if (v25)
        goto LABEL_21;
LABEL_27:
      value = 0;
      v32 = 0;
      goto LABEL_28;
    }
    if (!v25 && *(_DWORD *)(v21 + 8) == 2)
      goto LABEL_27;
  }
LABEL_21:
  v30 = *(_OWORD *)(v21 + 80);
  *(_OWORD *)&range.start.value = *(_OWORD *)(v21 + 64);
  *(_OWORD *)&range.start.epoch = v30;
  *(_OWORD *)&range.duration.timescale = *(_OWORD *)(v21 + 96);
  CMTimeRangeGetEnd(&v151, &range);
  *(_OWORD *)&range.start.value = v129;
  range.start.epoch = v130;
  v31 = cea608dgCreateEraseCCData((uint64_t)&range, &v151, allocator, (const __CFData **)&v149, v169);
  value = v149.value;
  if ((_DWORD)v31)
  {
    if (v149.value)
      CFRelease((CFTypeRef)v149.value);
    goto LABEL_172;
  }
  v32 = 1;
LABEL_28:
  v162 = *(_QWORD *)v169;
  v104 = *(_DWORD *)&v169[12];
  v163 = *(_DWORD *)&v169[8];
  v28 = *(_QWORD *)&v169[16];
  v120 = *(_QWORD *)&v169[24];
  v115 = *(_DWORD *)&v169[32];
  v29 = *(_DWORD *)&v169[36];
  v111 = *(_QWORD *)&v169[40];
  if (value && v32)
    *(_BYTE *)(a1 + 100) = 0;
LABEL_31:
  theData = (const __CFData *)value;
  v36 = *(_QWORD *)(a1 + 112);
  v95 = v15;
  if (!v36)
  {
    v39 = v28;
    v117 = 0;
    v119 = v15;
    v114 = v100;
    v101 = v97;
    v113 = v96;
    v109 = v99;
    v110 = v98;
    v13 = v116;
    v41 = v108;
    goto LABEL_50;
  }
  v37 = *(_DWORD *)(v36 + 8);
  *(_OWORD *)v169 = v123;
  *(_OWORD *)&v169[16] = v122;
  *(_OWORD *)&v169[32] = v121;
  if ((v37 - 2) < 2)
  {
    v38 = *(const void **)(v36 + 112);
    v39 = v28;
    if (v38)
      v40 = (const __CFData *)CFRetain(v38);
    else
      v40 = 0;
    *(_OWORD *)&range.start.value = *v4;
    range.start.epoch = v5;
    v44 = *(int *)(v36 + 120);
    *(_OWORD *)&time1.start.value = v129;
    time1.start.epoch = v130;
    v45 = cea608dgGetAheadDuration(&time1.start, v44, &range.start);
    if ((_DWORD)v45)
    {
      v31 = v45;
      v13 = v116;
      goto LABEL_151;
    }
    *(_OWORD *)&time1.start.value = *(_OWORD *)(v36 + 64);
    time1.start.epoch = *(_QWORD *)(v36 + 80);
    *(_OWORD *)&v148.start.value = *(_OWORD *)&range.start.value;
    v148.start.epoch = range.start.epoch;
    CMTimeSubtract((CMTime *)v169, &time1.start, &v148.start);
    goto LABEL_43;
  }
  v39 = v28;
  if (v37 != 1)
  {
    v40 = 0;
LABEL_43:
    v43 = 1;
    v41 = v108;
    goto LABEL_44;
  }
  LOWORD(range.start.value) = 12052;
  v42 = CFDataCreate(allocator, (const UInt8 *)&range, 2);
  v41 = v108;
  if (v42)
  {
    v40 = v42;
    v43 = 0;
    *(_OWORD *)v169 = *(_OWORD *)(v36 + 64);
    *(_QWORD *)&v169[16] = *(_QWORD *)(v36 + 80);
LABEL_44:
    *(_OWORD *)&range.start.value = v129;
    range.start.epoch = v130;
    v46 = cea608dgCCDataGetDuration(v40, &range.start, (CMTime *)&v169[24]);
    v13 = v116;
    if ((_DWORD)v46)
      goto LABEL_169;
    v160 = *(_QWORD *)v169;
    v119 = *(_DWORD *)&v169[12];
    v161 = *(_DWORD *)&v169[8];
    v114 = *(_QWORD *)&v169[16];
    v113 = *(_DWORD *)&v169[36];
    v101 = *(_DWORD *)&v169[32];
    v109 = *(_QWORD *)&v169[24];
    v110 = *(_QWORD *)&v169[40];
    v117 = v40;
    if (v40)
    {
      if ((v43 & 1) != 0)
      {
        *(_BYTE *)(a1 + 100) = 1;
      }
      else
      {
        v47 = *(_BYTE *)(a1 + 100);
        *(_BYTE *)(a1 + 100) = *(_BYTE *)(a1 + 101);
        *(_BYTE *)(a1 + 101) = v47;
      }
    }
    else
    {
      v117 = 0;
    }
LABEL_50:
    v48 = *(_OWORD **)(a1 + 112);
    if (v48)
    {
      v49 = v48[5];
      *(_OWORD *)v169 = v48[4];
      *(_OWORD *)&v169[16] = v49;
      *(_OWORD *)&v169[32] = v48[6];
      CMTimeRangeGetEnd(&v127, (CMTimeRange *)v169);
      *(_OWORD *)v169 = v129;
      *(_QWORD *)&v169[16] = v130;
      v50 = cea608dgCreateEraseCCData((uint64_t)v169, &v127, allocator, 0, &v128);
      if ((_DWORD)v50)
      {
        v31 = v50;
        v40 = v117;
        goto LABEL_151;
      }
    }
    v158 = v164;
    v159 = v165;
    v156 = v162;
    timescale = v163;
    v154 = v160;
    v155 = v161;
    rhs = v128;
    memset(&v149, 0, sizeof(v149));
    CMTimeMakeWithSeconds(&v149, 3.0, *(_DWORD *)(a1 + 68));
    *(_OWORD *)&v148.start.value = v123;
    *(_OWORD *)&v148.start.epoch = v122;
    *(_OWORD *)&v148.duration.timescale = v121;
    *(_OWORD *)&v147.start.value = v123;
    *(_OWORD *)&v147.start.epoch = v122;
    *(_OWORD *)&v147.duration.timescale = v121;
    v179 = 0u;
    v178 = 0u;
    v177 = 0u;
    v176 = 0u;
    memset(&v175, 0, sizeof(v175));
    v174 = 0u;
    v173 = 0u;
    v172 = 0u;
    v171 = 0u;
    v170 = 0u;
    memset(v169, 0, sizeof(v169));
    v167 = v7;
    v168 = v8;
    *(_OWORD *)&v146.value = *MEMORY[0x1E0CA2E68];
    v51 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    v146.epoch = v51;
    *(_OWORD *)&v145.value = *(_OWORD *)&v146.value;
    v145.epoch = v51;
    *(_OWORD *)allocatora = *(_OWORD *)&v146.value;
    *(_OWORD *)&v144.value = *(_OWORD *)&v146.value;
    v144.epoch = v51;
    v52 = v29;
    flags = v104;
    if ((v104 & 1) == 0 || (v52 & 1) == 0 || v111 || (epoch = v39, v112 = 0, v120 < 0))
    {
      *(_OWORD *)&time1.start.value = *(_OWORD *)(a1 + 120);
      time1.start.epoch = *(_QWORD *)(a1 + 136);
      *(_OWORD *)&time2.value = *(_OWORD *)&v146.value;
      time2.epoch = v51;
      CMTimeRangeMake(&range, &time1.start, &time2);
      v156 = range.start.value;
      flags = range.start.flags;
      timescale = range.start.timescale;
      epoch = range.start.epoch;
      v120 = range.duration.value;
      v115 = range.duration.timescale;
      v52 = range.duration.flags;
      v112 = range.duration.epoch;
    }
    if (!*(_BYTE *)(a1 + 9)
      || (range.start.value = v156,
          range.start.timescale = timescale,
          range.start.flags = flags,
          range.start.epoch = epoch,
          *(_OWORD *)&time1.start.value = *(_OWORD *)(a1 + 120),
          time1.start.epoch = *(_QWORD *)(a1 + 136),
          (CMTimeCompare(&range.start, &time1.start) & 0x80000000) == 0))
    {
      memset(&v143, 0, sizeof(v143));
      range.start.value = v156;
      range.start.timescale = timescale;
      range.start.flags = flags;
      range.start.epoch = epoch;
      *(_OWORD *)&time1.start.value = *(_OWORD *)(a1 + 120);
      time1.start.epoch = *(_QWORD *)(a1 + 136);
      CMTimeSubtract(&v143, &range.start, &time1.start);
      v105 = epoch;
      if ((v107 & 1) != 0
        && (range.start.value = v164,
            range.start.timescale = v165,
            range.start.flags = v107,
            range.start.epoch = v106,
            *(_OWORD *)&time1.start.value = *(_OWORD *)allocatora,
            time1.start.epoch = v51,
            CMTimeCompare(&range.start, &time1.start)))
      {
        memset(&time1, 0, 24);
        range.start.value = v156;
        range.start.timescale = timescale;
        range.start.flags = flags;
        range.start.epoch = epoch;
        range.duration.value = v120;
        range.duration.timescale = v115;
        range.duration.flags = v52;
        range.duration.epoch = v112;
        CMTimeRangeGetEnd(&v142, &range);
        range.start.value = v154;
        range.start.timescale = v155;
        range.start.flags = v119;
        range.start.epoch = v114;
        CMTimeSubtract(&time1.start, &range.start, &v142);
        range.start.value = v158;
        range.start.timescale = v159;
        range.start.flags = v107;
        range.start.epoch = v106;
        time2 = v143;
        if (CMTimeCompare(&range.start, &time2) <= 0
          && (*(_OWORD *)&range.start.value = *(_OWORD *)&time1.start.value,
              range.start.epoch = time1.start.epoch,
              time2 = v149,
              CMTimeCompare(&range.start, &time2) <= 0))
        {
          range.start.value = v156;
          range.start.timescale = timescale;
          range.start.flags = flags;
          range.start.epoch = epoch;
          time2.value = v158;
          time2.timescale = v159;
          time2.flags = v107;
          time2.epoch = v106;
          CMTimeSubtract(&v141, &range.start, &time2);
          range.start.value = v158;
          range.start.timescale = v159;
          range.start.flags = v107;
          range.start.epoch = v106;
          CMTimeRangeMake(&v148, &v141, &range.start);
          v58 = 0;
        }
        else
        {
          range.start.value = v158;
          range.start.timescale = v159;
          range.start.flags = v107;
          range.start.epoch = v106;
          time2 = time1.start;
          if (CMTimeCompare(&range.start, &time2) > 0)
          {
            time2 = time1.start;
            memset(&v151, 0, sizeof(v151));
            range.start.value = v154;
            range.start.timescale = v155;
            range.start.flags = v119;
            range.start.epoch = v114;
            start = time1.start;
            CMTimeSubtract(&v151, &range.start, &start);
            start = v151;
            duration = time2;
            CMTimeRangeMake(&range, &start, &duration);
            v147 = range;
            memset(&start, 0, sizeof(start));
            range.start.value = v158;
            range.start.timescale = v159;
            range.start.flags = v107;
            range.start.epoch = v106;
            duration = time2;
            CMTimeSubtract(&start, &range.start, &duration);
            memset(&duration, 0, sizeof(duration));
            range.start.value = v156;
            range.start.timescale = timescale;
            range.start.flags = flags;
            range.start.epoch = epoch;
            v138 = start;
            CMTimeSubtract(&duration, &range.start, &v138);
            v138 = duration;
            v137 = start;
            CMTimeRangeMake(&range, &v138, &v137);
            v148 = range;
            range.start = range.duration;
            v138 = v143;
            CMTimeSubtract(&v146, &range.start, &v138);
            *(_OWORD *)&range.start.value = *(_OWORD *)allocatora;
            range.start.epoch = v51;
            v138 = v146;
            if (CMTimeCompare(&range.start, &v138) < 0)
            {
              v145 = v146;
              if (*(_BYTE *)(a1 + 9))
              {
                v138 = v148.start;
                v137 = v146;
                CMTimeAdd(&range.start, &v138, &v137);
                *(_OWORD *)&v148.start.value = *(_OWORD *)&range.start.value;
                v148.start.epoch = range.start.epoch;
                v138 = v148.duration;
                v137 = v145;
                CMTimeSubtract(&range.start, &v138, &v137);
                v148.duration = range.start;
                v138 = v147.duration;
                v137 = v145;
                CMTimeAdd(&range.start, &v138, &v137);
                v147.duration = range.start;
                v138.value = v154;
                v138.timescale = v155;
                v138.flags = v119;
                v138.epoch = v114;
                v137 = v145;
                CMTimeAdd(&range.start, &v138, &v137);
                v62 = range.start.flags;
                v155 = range.start.timescale;
                v154 = range.start.value;
                v63 = range.start.epoch;
                *(_OWORD *)&range.start.value = *(_OWORD *)&rhs.start.value;
                range.start.epoch = rhs.start.epoch;
                v138.value = v154;
                v138.timescale = v155;
                v119 = v62;
                v138.flags = v62;
                v114 = v63;
                v138.epoch = v63;
                v64 = CMTimeCompare(&range.start, &v138);
                if (v64 >= 1)
                  v56 = v117;
                else
                  v56 = 0;
                if (v64 >= 1)
                  v55 = v116;
                else
                  v55 = 0;
                v57 = *(_OWORD *)allocatora;
                goto LABEL_90;
              }
              v55 = v116;
              v56 = v117;
            }
            else
            {
              v55 = v13;
              v56 = v117;
            }
            v57 = *(_OWORD *)allocatora;
LABEL_90:
            v58 = 0;
            goto LABEL_98;
          }
          range.start.value = v154;
          range.start.timescale = v155;
          range.start.flags = v119;
          range.start.epoch = v114;
          time2.value = v158;
          time2.timescale = v159;
          time2.flags = v107;
          time2.epoch = v106;
          CMTimeSubtract(&v140, &range.start, &time2);
          range.start.value = v158;
          range.start.timescale = v159;
          range.start.flags = v107;
          range.start.epoch = v106;
          CMTimeRangeMake(&v147, &v140, &range.start);
          v58 = 1;
        }
      }
      else
      {
        v58 = 1;
        if ((v119 & 1) != 0)
        {
          v57 = *(_OWORD *)allocatora;
          if ((v113 & 1) == 0 || v110 || v109 < 0)
          {
            v55 = v13;
            v56 = v117;
            goto LABEL_98;
          }
          range.start.value = v156;
          range.start.timescale = timescale;
          range.start.flags = flags;
          range.start.epoch = epoch;
          range.duration.value = v120;
          range.duration.timescale = v115;
          range.duration.flags = v52;
          range.duration.epoch = v112;
          CMTimeRangeGetEnd(&lhs, &range);
          time1.start.value = v154;
          time1.start.timescale = v155;
          time1.start.flags = v119;
          time1.start.epoch = v114;
          CMTimeSubtract(&range.start, &lhs, &time1.start);
          v146 = range.start;
          memset(&time1, 0, 24);
          range.start.value = v154;
          range.start.timescale = v155;
          range.start.flags = v119;
          range.start.epoch = v114;
          range.duration.value = v109;
          range.duration.timescale = v101;
          range.duration.flags = v113;
          range.duration.epoch = 0;
          CMTimeRangeGetEnd(&v135, &range);
          *(_OWORD *)&range.start.value = *(_OWORD *)&rhs.start.value;
          range.start.epoch = rhs.start.epoch;
          CMTimeSubtract(&time1.start, &v135, &range.start);
          *(_OWORD *)&range.start.value = *(_OWORD *)allocatora;
          range.start.epoch = v51;
          time2 = v146;
          if (CMTimeCompare(&range.start, &time2) < 0)
          {
            v145 = v146;
            if (*(_BYTE *)(a1 + 9))
            {
              time2.value = v154;
              time2.timescale = v155;
              time2.flags = v119;
              time2.epoch = v114;
              v151 = v146;
              CMTimeAdd(&range.start, &time2, &v151);
              v59 = range.start.flags;
              v155 = range.start.timescale;
              v154 = range.start.value;
              v60 = range.start.epoch;
              *(_OWORD *)&range.start.value = *(_OWORD *)&rhs.start.value;
              range.start.epoch = rhs.start.epoch;
              time2.value = v154;
              time2.timescale = v155;
              v119 = v59;
              time2.flags = v59;
              v114 = v60;
              time2.epoch = v60;
              v61 = CMTimeCompare(&range.start, &time2);
              if (v61 >= 1)
                v56 = v117;
              else
                v56 = 0;
              if (v61 >= 1)
                v55 = v116;
              else
                v55 = 0;
            }
            else
            {
              v55 = v116;
              v56 = v117;
            }
          }
          else
          {
            v55 = v13;
            v56 = v117;
          }
          *(_OWORD *)&range.start.value = *(_OWORD *)allocatora;
          range.start.epoch = v51;
          time2 = time1.start;
          if (CMTimeCompare(&range.start, &time2) < 0)
            v144 = time1.start;
          v58 = 1;
          goto LABEL_97;
        }
      }
      v55 = v13;
      v56 = v117;
LABEL_97:
      v57 = *(_OWORD *)allocatora;
LABEL_98:
      range.start = v145;
      *(_OWORD *)&time1.start.value = v57;
      time1.start.epoch = v51;
      CMTimeCompare(&range.start, &time1.start);
      v134 = 0;
      range.start = v148.duration;
      *(_OWORD *)&time1.start.value = *(_OWORD *)&v41->value;
      time1.start.epoch = v41->epoch;
      ByteLengthFromDuration = cea608dgCCDataGetByteLengthFromDuration((uint64_t)&range, (uint64_t)&time1, &v134);
      if ((_DWORD)ByteLengthFromDuration
        || (v133 = 0,
            range.start = v147.duration,
            *(_OWORD *)&time1.start.value = *(_OWORD *)&v41->value,
            time1.start.epoch = v41->epoch,
            ByteLengthFromDuration = cea608dgCCDataGetByteLengthFromDuration((uint64_t)&range, (uint64_t)&time1, &v133),
            (_DWORD)ByteLengthFromDuration))
      {
        v31 = ByteLengthFromDuration;
      }
      else
      {
        if (v55)
        {
          *(_QWORD *)v169 = CFDataGetBytePtr(v55);
          *(_QWORD *)&v169[8] = v134;
          *(CMTimeRange *)&v169[16] = v148;
        }
        v66 = theData;
        if (!theData)
        {
          v68 = 0;
          if (!v55)
            goto LABEL_114;
          goto LABEL_113;
        }
        if (!v58)
        {
          v67 = v112;
          v68 = 0;
          goto LABEL_112;
        }
        v67 = v112;
        *(_OWORD *)&range.start.value = *(_OWORD *)allocatora;
        range.start.epoch = v51;
        time1.start = v143;
        if ((CMTimeCompare(&range.start, &time1.start) & 0x80000000) == 0)
        {
          v68 = 0;
          v66 = theData;
          goto LABEL_112;
        }
        v69 = *(const __CFAllocator **)a1;
        duration.value = v156;
        duration.timescale = timescale;
        start = *v41;
        LOWORD(v138.value) = kFigCEA608MiscControlCodes;
        Length = CFDataGetLength(theData);
        *(_OWORD *)&range.start.value = v123;
        *(_OWORD *)&range.start.epoch = v122;
        *(_OWORD *)&range.duration.timescale = v121;
        Mutable = CFDataCreateMutable(v69, Length + 2);
        v68 = Mutable;
        if (Mutable)
        {
          CFDataAppendBytes(Mutable, (const UInt8 *)&v138, 2);
          BytePtr = CFDataGetBytePtr(theData);
          v73 = CFDataGetLength(theData);
          CFDataAppendBytes(v68, BytePtr, v73);
          time1.start.value = duration.value;
          time1.start.timescale = duration.timescale;
          time1.start.flags = flags;
          time1.start.epoch = v105;
          time2 = start;
          CMTimeSubtract(&range.start, &time1.start, &time2);
          time2.value = v120;
          time2.timescale = v115;
          time2.flags = v52;
          time2.epoch = v112;
          v151 = start;
          CMTimeAdd(&time1.start, &time2, &v151);
          *(_OWORD *)&range.duration.value = *(_OWORD *)&time1.start.value;
          v74 = time1.start.epoch;
          v167 = range.start.value;
          flags = range.start.flags;
          v168 = range.start.timescale;
          v75 = range.start.epoch;
          v76 = time1.start.value;
          v77 = time1.start.timescale;
          v52 = time1.start.flags;
LABEL_111:
          v156 = v167;
          v67 = v74;
          v115 = v77;
          timescale = v168;
          v120 = v76;
          v105 = v75;
          v66 = v68;
LABEL_112:
          *(_QWORD *)&v170 = CFDataGetBytePtr(v66);
          *((_QWORD *)&v170 + 1) = CFDataGetLength(v66);
          *(_QWORD *)&v171 = v156;
          *((_QWORD *)&v171 + 1) = __PAIR64__(flags, timescale);
          *(_QWORD *)&v172 = v105;
          *((_QWORD *)&v172 + 1) = v120;
          *(_QWORD *)&v173 = __PAIR64__(v52, v115);
          *((_QWORD *)&v173 + 1) = v67;
          if (!v55)
          {
LABEL_114:
            if (v56)
            {
              *(_QWORD *)&v176 = CFDataGetBytePtr(v56);
              *((_QWORD *)&v176 + 1) = CFDataGetLength(v56);
              *(_QWORD *)&v177 = v154;
              *((_QWORD *)&v177 + 1) = __PAIR64__(v119, v155);
              *(_QWORD *)&v178 = v114;
              *((_QWORD *)&v178 + 1) = v109;
              *(_QWORD *)&v179 = __PAIR64__(v113, v101);
              v79 = 1;
              *((_QWORD *)&v179 + 1) = v110;
            }
            else
            {
              v79 = 0;
            }
            v80 = *(_OWORD *)allocatora;
            v81 = 0;
            v82 = 0;
            *(_OWORD *)&range.start.value = v123;
            *(_OWORD *)&range.start.epoch = v122;
            *(_OWORD *)&range.duration.timescale = v121;
            do
            {
              v83 = &v169[v81];
              if ((v169[v81 + 28] & 1) != 0 && (v83[52] & 1) != 0 && !*(_QWORD *)&v169[v81 + 56])
              {
                v84 = (CMTime *)(v83 + 40);
                if ((*((_QWORD *)v83 + 5) & 0x8000000000000000) == 0)
                {
                  *(_OWORD *)&time1.start.value = *(_OWORD *)&v84->value;
                  time1.start.epoch = *((_QWORD *)v83 + 7);
                  *(_OWORD *)&time2.value = v80;
                  time2.epoch = v51;
                  if (CMTimeCompare(&time1.start, &time2))
                  {
                    time1 = range;
                    CMTimeRangeGetEnd(&v151, &time1);
                    v86 = *((_OWORD *)v83 + 1);
                    v85 = v83 + 16;
                    *(_OWORD *)&time1.start.value = v86;
                    time1.start.epoch = *((_QWORD *)v85 + 2);
                    if (CMTimeCompare(&v151, &time1.start))
                    {
                      if (v82)
                      {
                        time1 = range;
                        cea608dgOutputCCData(a1, v82, &time1);
                        if ((_DWORD)v87)
                          goto LABEL_134;
                        CFRelease(v82);
                      }
                      v88 = CFDataCreateMutable(*(CFAllocatorRef *)a1, 0);
                      if (!v88)
                      {
                        v31 = FigSignalErrorAt();
                        v91 = a2;
                        v90 = a3;
                        goto LABEL_135;
                      }
                      v82 = v88;
                      CFDataAppendBytes(v88, *(const UInt8 **)&v169[v81], *(_QWORD *)&v169[v81 + 8]);
                      v89 = *((_OWORD *)v85 + 1);
                      *(_OWORD *)&range.start.value = *(_OWORD *)v85;
                      *(_OWORD *)&range.start.epoch = v89;
                      *(_OWORD *)&range.duration.timescale = *((_OWORD *)v85 + 2);
                    }
                    else
                    {
                      CFDataAppendBytes(v82, *(const UInt8 **)&v169[v81], *(_QWORD *)&v169[v81 + 8]);
                      time1.start = range.duration;
                      time2 = *v84;
                      CMTimeAdd(&range.duration, &time1.start, &time2);
                    }
                  }
                  v80 = *(_OWORD *)allocatora;
                }
              }
              v81 += 64;
            }
            while (v81 != 256);
            if (v82)
            {
              time1 = range;
              cea608dgOutputCCData(a1, v82, &time1);
LABEL_134:
              v31 = v87;
              v91 = a2;
              v90 = a3;
              CFRelease(v82);
LABEL_135:
              v13 = v116;
              v80 = *(_OWORD *)allocatora;
              if ((_DWORD)v31)
              {
                v79 = 0;
                v40 = v117;
                if (!v68)
                  goto LABEL_147;
                goto LABEL_146;
              }
              if (v91)
                goto LABEL_137;
            }
            else
            {
              v13 = v116;
              v91 = a2;
              v90 = a3;
              if (a2)
LABEL_137:
                *v91 = v145;
            }
            v40 = v117;
            if (v90)
            {
              range.start = v144;
              *(_OWORD *)&time1.start.value = v80;
              time1.start.epoch = v51;
              if (!CMTimeCompare(&range.start, &time1.start))
              {
                memset(&time1, 0, 24);
                range = rhs;
                CMTimeRangeGetEnd(&v132, &range);
                v92 = *(_OWORD *)(a1 + 28);
                *(_OWORD *)&range.start.value = *(_OWORD *)(a1 + 12);
                *(_OWORD *)&range.start.epoch = v92;
                *(_OWORD *)&range.duration.timescale = *(_OWORD *)(a1 + 44);
                CMTimeRangeGetEnd(&v131, &range);
                CMTimeSubtract(&time1.start, &v132, &v131);
                if ((time1.start.flags & 1) != 0)
                {
                  *(_OWORD *)&range.start.value = *(_OWORD *)allocatora;
                  range.start.epoch = v51;
                  time2 = time1.start;
                  if (CMTimeCompare(&range.start, &time2) < 0)
                    CMTimeMake(&v144, -time1.start.value, time1.start.timescale);
                }
              }
              v31 = 0;
              *v90 = v144;
              if (!v68)
              {
LABEL_147:
                if ((_DWORD)v31)
                  goto LABEL_151;
                if (v79)
                  goto LABEL_150;
                goto LABEL_149;
              }
            }
            else
            {
              v31 = 0;
              if (!v68)
                goto LABEL_147;
            }
LABEL_146:
            CFRelease(v68);
            goto LABEL_147;
          }
LABEL_113:
          v78 = CFDataGetBytePtr(v55);
          *(_QWORD *)&v174 = &v78[v134];
          *((_QWORD *)&v174 + 1) = v133;
          v175 = v147;
          goto LABEL_114;
        }
        v31 = FigSignalErrorAt();
        flags = v95;
        v52 = v96;
        v76 = v99;
        v75 = v100;
        v74 = v98;
        v77 = v97;
        if (!(_DWORD)v31)
          goto LABEL_111;
      }
      v13 = v116;
      v40 = v117;
LABEL_151:
      if (v40)
        CFRelease(v40);
      goto LABEL_153;
    }
    v46 = FigSignalErrorAt();
    v40 = v117;
    if (!(_DWORD)v46)
    {
LABEL_149:
      FigCEA608DataGeneratorCaptionInfoRelease(*(const __CFAllocator ***)(a1 + 112));
      *(_QWORD *)(a1 + 112) = 0;
LABEL_150:
      FigCEA608DataGeneratorCaptionInfoRelease(*(const __CFAllocator ***)(a1 + 104));
      v31 = 0;
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 112);
      *(_QWORD *)(a1 + 112) = 0;
      goto LABEL_151;
    }
LABEL_169:
    v31 = v46;
    goto LABEL_151;
  }
  v94 = FigSignalErrorAt();
  v117 = 0;
  v119 = v15;
  v114 = v100;
  v101 = v97;
  v113 = v96;
  v109 = v99;
  v110 = v98;
  v13 = v116;
  if (!(_DWORD)v94)
    goto LABEL_50;
  v31 = v94;
LABEL_153:
  if (theData)
    CFRelease(theData);
LABEL_155:
  if (v13)
    CFRelease(v13);
  return v31;
}

uint64_t FigCEA608DataGeneratorFinish(uint64_t a1)
{
  uint64_t result;

  if (!a1 || *(_QWORD *)(a1 + 112))
    return FigSignalErrorAt();
  if (!*(_QWORD *)(a1 + 104) || (result = cea608dgStoreCCDataSequentially(a1, 0, 0), !(_DWORD)result))
  {
    result = 0;
    *(_DWORD *)(a1 + 96) = 2;
  }
  return result;
}

uint64_t FigCEA608DataGeneratorSetShouldAdjustOverlappedDataTime(uint64_t a1, char a2)
{
  if (!a1 || *(_DWORD *)(a1 + 96))
    return FigSignalErrorAt();
  *(_BYTE *)(a1 + 9) = a2;
  return 0;
}

uint64_t FigCEA608DataGeneratorGetTimeLineRange(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  if (a1 && a2)
  {
    v2 = *(_OWORD *)(a1 + 12);
    v3 = *(_OWORD *)(a1 + 44);
    a2[1] = *(_OWORD *)(a1 + 28);
    a2[2] = v3;
    *a2 = v2;
  }
  else
  {
    FigSignalErrorAt();
  }
  return 0;
}

uint64_t FigCEA608DataGeneratorSetTimeLineRange(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;

  if (!a1 || *(_DWORD *)(a1 + 96))
    return FigSignalErrorAt();
  v2 = *a2;
  v3 = a2[1];
  *(_OWORD *)(a1 + 44) = a2[2];
  *(_OWORD *)(a1 + 28) = v3;
  *(_OWORD *)(a1 + 12) = v2;
  return 0;
}

uint64_t FigCEA608DataGeneratorGetClosedCaptionChannel(uint64_t a1, _DWORD *a2)
{
  if (a1)
    *a2 = 1;
  else
    FigSignalErrorAt();
  return 0;
}

void cea608dgCCDataAppendPaddingIfNeeded(__CFData *a1)
{
  UInt8 bytes;

  if ((CFDataGetLength(a1) & 1) != 0)
  {
    bytes = 0;
    CFDataAppendBytes(a1, &bytes, 1);
  }
}

uint64_t cea608dgCharacterMappingGetControlCodeForCharacter(CFDictionaryRef theDict, unsigned int a2, char *a3, int *a4, char *a5, char *a6)
{
  uint64_t v11;
  unint64_t v12;
  const __CFDictionary *v13;
  uint64_t ValueIfPresent;
  char v15;
  int v16;
  char v17;
  char v18;
  char v19;
  void *value;

  v11 = 0;
  value = 0;
  v12 = a2;
  while (1)
  {
    v13 = (const __CFDictionary *)CFDictionaryGetValue(theDict, off_1E2F7A528[v11]);
    ValueIfPresent = CFDictionaryGetValueIfPresent(v13, (const void *)v12, (const void **)&value);
    if ((_DWORD)ValueIfPresent)
      break;
    if (++v11 == 4)
      goto LABEL_4;
  }
  if (FigCFEqual())
  {
    v15 = 0;
    v17 = 0;
    v18 = 0;
    v16 = 1;
    v19 = (char)value;
  }
  else
  {
    if (FigCFEqual())
    {
      v18 = 0;
      v19 = 17;
      v17 = 1;
    }
    else
    {
      if (FigCFEqual())
      {
        v17 = 0;
        v19 = 18;
      }
      else
      {
        if (!FigCFEqual())
        {
LABEL_4:
          v15 = 0;
          v16 = 0;
          v17 = 0;
          v18 = 0;
          v19 = 0;
          goto LABEL_15;
        }
        v17 = 0;
        v19 = 19;
      }
      v18 = 1;
    }
    v16 = 2;
    v15 = (char)value;
  }
LABEL_15:
  *a3 = v19;
  a3[1] = v15;
  *a4 = v16;
  *a5 = v17;
  *a6 = v18;
  return ValueIfPresent;
}

uint64_t cea608dgCreateEraseCCData(uint64_t a1, CMTime *a2, CFAllocatorRef allocator, const __CFData **a4, _OWORD *a5)
{
  const __CFData *v9;
  const __CFData *v10;
  uint64_t Duration;
  __int128 v12;
  CMTime v14;
  CMTime start;
  CMTimeRange v16;
  CMTime v17;
  UInt8 bytes[2];

  *(_WORD *)bytes = 11284;
  v9 = CFDataCreate(allocator, bytes, 2);
  if (!v9)
    return FigSignalErrorAt();
  v10 = v9;
  v17 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  *(_OWORD *)&v16.start.value = *(_OWORD *)a1;
  v16.start.epoch = *(_QWORD *)(a1 + 16);
  Duration = cea608dgCCDataGetDuration(v9, &v16.start, &v17);
  if ((_DWORD)Duration)
    goto LABEL_7;
  if (a5)
  {
    start = *a2;
    v14 = v17;
    CMTimeRangeMake(&v16, &start, &v14);
    v12 = *(_OWORD *)&v16.start.epoch;
    *a5 = *(_OWORD *)&v16.start.value;
    a5[1] = v12;
    a5[2] = *(_OWORD *)&v16.duration.timescale;
  }
  if (!a4)
  {
LABEL_7:
    CFRelease(v10);
  }
  else
  {
    Duration = 0;
    *a4 = v10;
  }
  return Duration;
}

uint64_t cea608dgCCDataGetDuration(const __CFData *a1, CMTime *a2, CMTime *a3)
{
  unint64_t Length;
  CMTime v7;
  CMTime v8;

  v8 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (!a1)
    goto LABEL_4;
  Length = CFDataGetLength(a1);
  if ((Length & 1) == 0)
  {
    v7 = *a2;
    CMTimeMultiply(&v8, &v7, Length >> 1);
LABEL_4:
    *a3 = v8;
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t cea608dgGetAheadDuration(CMTime *a1, uint64_t a2, CMTime *a3)
{
  CMTime v5;
  CMTime v6;

  if (a2 < 0)
    return FigSignalErrorAt();
  memset(&v6, 0, sizeof(v6));
  v5 = *a1;
  CMTimeMultiply(&v6, &v5, a2);
  *a3 = v6;
  return 0;
}

uint64_t cea608dgCCDataGetByteLengthFromDuration(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;
  CMTime v8;
  CMTime time1;

  if ((*(_BYTE *)(a1 + 12) & 1) != 0
    && (time1 = *(CMTime *)a1, v8 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68], CMTimeCompare(&time1, &v8)))
  {
    if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8) || *(uint64_t *)a1 % *(_QWORD *)a2)
      return FigSignalErrorAt();
    v6 = 2 * (*(_QWORD *)a1 / *(uint64_t *)a2);
  }
  else
  {
    v6 = 0;
  }
  result = 0;
  *a3 = v6;
  return result;
}

double cea608dgOutputCCData(uint64_t a1, CFMutableDataRef theData, _OWORD *a3)
{
  UInt8 *MutableBytePtr;
  CFIndex i;
  unsigned int v8;
  uint32x4_t v9;
  unsigned __int128 v10;
  int32x4_t v11;
  uint64_t v12;
  unsigned int (*v13)(CFMutableDataRef, CMTimeRange *, uint64_t);
  __int128 v14;
  double result;
  __int128 v16;
  CMTime v17;
  CMTimeRange range;

  if (!*(_QWORD *)(a1 + 152))
    goto LABEL_7;
  MutableBytePtr = CFDataGetMutableBytePtr(theData);
  for (i = CFDataGetLength(theData); i; --i)
  {
    v8 = *MutableBytePtr;
    v9 = (uint32x4_t)vdupq_n_s32(v8);
    v10 = *(_OWORD *)&vshlq_u32(v9, (uint32x4_t)xmmword_1932F6F50) & __PAIR128__(0xFFFFFF01FFFFFF01, 0xFFFFFF01FFFFFF01);
    v11 = vaddq_s32((int32x4_t)(*(_OWORD *)&vshlq_u32(v9, (uint32x4_t)xmmword_1932F6F60) & __PAIR128__(0xFFFFFF01FFFFFF01, 0xFFFFFF01FFFFFF01)), (int32x4_t)v10);
    v11.i32[3] = HIDWORD(v10);
    if ((vaddvq_s32(v11) & 1) == 0)
      *MutableBytePtr = v8 | 0x80;
    ++MutableBytePtr;
  }
  v12 = *(_QWORD *)(a1 + 144);
  v13 = *(unsigned int (**)(CFMutableDataRef, CMTimeRange *, uint64_t))(a1 + 152);
  v14 = a3[1];
  *(_OWORD *)&range.start.value = *a3;
  *(_OWORD *)&range.start.epoch = v14;
  *(_OWORD *)&range.duration.timescale = a3[2];
  if (!v13(theData, &range, v12))
  {
LABEL_7:
    v16 = a3[1];
    *(_OWORD *)&range.start.value = *a3;
    *(_OWORD *)&range.start.epoch = v16;
    *(_OWORD *)&range.duration.timescale = a3[2];
    CMTimeRangeGetEnd(&v17, &range);
    result = *(double *)&v17.value;
    *(CMTime *)(a1 + 120) = v17;
  }
  return result;
}

void FigByteRateHistoryClear(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  v2 = *(void **)a1;
  if (v2)
  {
    v3 = *(unsigned int *)(a1 + 8);
    if ((int)v3 >= 1)
      bzero(v2, 16 * v3);
  }
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
}

uint64_t FigByteRateHistoryGetArraySize(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t FigByteRateHistoryGetCurrentSampleDuration(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 16 * *(int *)(a1 + 12));
}

double FigByteRateHistoryReportMovingAverage(uint64_t a1, double *a2)
{
  double result;

  if (a2)
  {
    result = *(double *)(a1 + 40);
    *a2 = result;
  }
  return result;
}

uint64_t ParseReferenceMovieAtom(uint64_t a1, uint64_t a2)
{
  _OWORD v4[7];

  memset(v4, 0, sizeof(v4));
  if (!FigAtomStreamInitWithParent())
    ParseDescriptorAtoms((uint64_t)v4, (uint64_t)"admr", 1, a2);
  return 0;
}

uint64_t ParseDescriptorAtoms(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (**v7)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t (**v9)(uint64_t, uint64_t);
  uint64_t v10;

  v7 = (uint64_t (**)(uint64_t, uint64_t))(a2 + 8);
  while (1)
  {
    result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if ((_DWORD)result)
      return result;
    if (a3 >= 1)
    {
      v9 = v7;
      v10 = a3;
      while (*((_DWORD *)v9 - 2))
      {
        v9 += 2;
        if (!--v10)
          goto LABEL_9;
      }
      result = (*v9)(a1, a4);
      if ((_DWORD)result)
        return result;
    }
LABEL_9:
    LODWORD(result) = FigAtomStreamAdvanceToNextAtom();
    if ((_DWORD)result)
    {
      if ((_DWORD)result == -12890)
        return 0;
      else
        return result;
    }
  }
}

uint64_t ParseReferenceMovieDescriptorAtom(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _OWORD v6[7];

  memset(v6, 0, sizeof(v6));
  v3 = malloc_type_calloc(1uLL, 0x20uLL, 0x20040DC1BFBCFuLL);
  if (v3)
  {
    if (!FigAtomStreamInitWithParent()
      && !ParseDescriptorAtoms((uint64_t)v6, (uint64_t)"frdr", 3, (uint64_t)v3)
      && v3[3])
    {
      v4 = (_QWORD *)a2[1];
      if (v4)
        *v4 = v3;
      else
        *a2 = v3;
      a2[1] = v3;
      v3 = 0;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  DisposeReferenceMovieAlternate(v3);
  return 0;
}

uint64_t ParseReferenceMovieDataRefAtom(uint64_t a1, uint64_t a2)
{
  CMBlockBufferRef *v2;
  uint64_t result;
  char *dataPointerOut;

  v2 = (CMBlockBufferRef *)(a2 + 24);
  if (*(_QWORD *)(a2 + 24))
    return 0;
  dataPointerOut = 0;
  result = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
  if (!(_DWORD)result)
  {
    if (CMBlockBufferGetDataLength(*v2) <= 0xD)
      return FigSignalErrorAt();
    result = CMBlockBufferGetDataPointer(*v2, 0, 0, 0, &dataPointerOut);
    if (!(_DWORD)result)
    {
      if (*((_DWORD *)dataPointerOut + 1) == 543978101)
        return 0;
      result = (uint64_t)*v2;
      if (*v2)
      {
        CFRelease((CFTypeRef)result);
        result = 0;
        *v2 = 0;
      }
    }
  }
  return result;
}

uint64_t ParseReferenceMovieDataRateAtom(uint64_t a1, uint64_t a2)
{
  CMBlockBufferRef *v2;
  uint64_t result;

  v2 = (CMBlockBufferRef *)(a2 + 8);
  if (!*(_QWORD *)(a2 + 8))
  {
    result = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
    if ((_DWORD)result)
      return result;
    if (CMBlockBufferGetDataLength(*v2) != 8)
      return FigSignalErrorAt();
  }
  return 0;
}

uint64_t ParseReferenceMovieVersionCheckAtom(uint64_t a1, uint64_t a2)
{
  uint64_t BBuf;
  __CFArray *Mutable;

  BBuf = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
  if ((_DWORD)BBuf)
    return BBuf;
  if (CMBlockBufferGetDataLength(0) != 18)
    return FigSignalErrorAt();
  Mutable = *(__CFArray **)(a2 + 16);
  if (!Mutable)
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(a2 + 16) = Mutable;
    if (!Mutable)
      return FigSignalErrorAt();
  }
  CFArrayAppendValue(Mutable, 0);
  return 0;
}

void DisposeReferenceMovieAlternate(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  if (a1)
  {
    v2 = (const void *)a1[1];
    if (v2)
      CFRelease(v2);
    v3 = (const void *)a1[3];
    if (v3)
      CFRelease(v3);
    v4 = (const void *)a1[2];
    if (v4)
      CFRelease(v4);
    free(a1);
  }
}

uint64_t InitMobiGestaltOnce()
{
  uint64_t result;
  int v1;

  result = CelestialIsiPad();
  if ((_DWORD)result)
  {
    v1 = 16;
  }
  else
  {
    result = CelestialIsiPhone();
    v1 = 1;
  }
  sMobiGestaltValue = v1;
  return result;
}

uint64_t FigBytePumpGetClassID()
{
  MEMORY[0x19402F294](&FigBytePumpGetClassID_sRegisterFigBytePumpBaseTypeOnce, RegisterFigBytePumpBaseType);
  return sFigBytePumpClassID;
}

uint64_t RegisterFigBytePumpBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigBytePumpGetTypeID()
{
  MEMORY[0x19402F294](&FigBytePumpGetClassID_sRegisterFigBytePumpBaseTypeOnce, RegisterFigBytePumpBaseType);
  return CMBaseClassGetCFTypeID();
}

CFTypeRef FigBytePumpRetain(CFTypeRef cf)
{
  if (cf)
    return CFRetain(cf);
  return cf;
}

void FigBytePumpRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t FigBytePumpIsBytePumpProperty(__CFString *a1)
{
  uint64_t v1;

  v1 = 0;
  while (*(&bytePumpProperties)[v1] != a1)
  {
    if (++v1 == 60)
      return 0;
  }
  return 1;
}

CFStringRef FigBytePumpBaseCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigBytePump %p]"), a1);
}

uint64_t FigNWActivitySubmitMetricsForInitialStartup(uint64_t a1, double a2, double a3, double a4)
{
  xpc_object_t v7;
  void *v8;

  if (!a1)
    return 4294954516;
  v7 = xpc_dictionary_create(0, 0, 0);
  if (!v7)
    return 4294954510;
  v8 = v7;
  xpc_dictionary_set_double(v7, "CMInitialStartup_ItemCreationToLTKU", a3 - a2);
  xpc_dictionary_set_double(v8, "CMInitialStartup_ItemCreationToReadyToPlay", a4 - a2);
  nw_activity_submit_metrics();
  xpc_release(v8);
  return 0;
}

CFDataRef FigNWActivityCreateToken(CFDataRef result)
{
  unsigned __int8 uu[8];
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)uu = 0;
  v2 = 0;
  if (result)
  {
    nw_activity_get_token();
    if (uuid_is_null(uu))
      return 0;
    else
      return CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], uu, 16);
  }
  return result;
}

const __CFData *FigNWActivityCreateFromToken(const __CFData *result)
{
  int is_null;
  UInt8 buffer[8];
  uint64_t v3;
  uint64_t v4;
  CFRange v5;

  v4 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)buffer = 0;
  v3 = 0;
  if (result)
  {
    v5.location = 0;
    v5.length = 16;
    CFDataGetBytes(result, v5, buffer);
    is_null = uuid_is_null(buffer);
    result = 0;
    if (!is_null)
      return (const __CFData *)nw_activity_create_from_token();
  }
  return result;
}

uint64_t FigBytePumpCreateForICY(const __CFAllocator *a1, const void *a2, const void *a3, const __CFDictionary *a4, NSObject *a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  _QWORD *v13;
  const __CFAllocator *v14;
  uint64_t v15;
  uint64_t DerivedStorage;
  uint64_t v17;
  CFAllocatorRef Default;
  NSObject *Local;
  const __CFDictionary *v20;
  const void *Value;
  const __CFData *v22;
  const __CFData *v23;
  const __CFDictionary *v24;
  const void *v25;
  const __CFData *v26;
  const __CFDictionary *v27;
  const void *v28;
  const void *v29;
  CFMutableArrayRef Mutable;
  CFTypeRef v31;
  uint64_t v32;
  uint64_t (*v33)(CFTypeRef, uint64_t, _QWORD, uint64_t);
  uint64_t v34;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v36;

  fig_note_initialize_category_with_default_work_cf();
  v13 = a8;
  fig_note_initialize_category_with_default_work_cf();
  if (a2 && a8)
  {
    FigBytePumpGetClassID();
    v14 = a1;
    v15 = CMDerivedObjectCreate();
    if ((_DWORD)v15)
      return v15;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v17 = FigRetainProxyCreate();
    if ((_DWORD)v17)
    {
      v36 = v17;
      v23 = 0;
      goto LABEL_44;
    }
    Default = a1;
    if (!a1)
      Default = CFAllocatorGetDefault();
    *(_QWORD *)DerivedStorage = CFRetain(Default);
    *(_QWORD *)(DerivedStorage + 72) = FigRetainProxyRetain();
    if (a5)
    {
      Local = a5;
    }
    else
    {
      Local = FigHTTPSchedulerCreateLocal(0);
      *(_QWORD *)(DerivedStorage + 80) = Local;
      if (Local)
      {
LABEL_11:
        if (a3)
        {
          v20 = (const __CFDictionary *)CFRetain(a3);
          *(_QWORD *)(DerivedStorage + 104) = v20;
          if (v20)
          {
            Value = CFDictionaryGetValue(v20, CFSTR("X-Playback-Session-Id"));
            if (Value)
              Value = CFRetain(Value);
            *(_QWORD *)(DerivedStorage + 112) = Value;
          }
          if (a4)
            goto LABEL_17;
        }
        else
        {
          *(_QWORD *)(DerivedStorage + 104) = 0;
          if (a4)
          {
LABEL_17:
            v22 = (const __CFData *)CFDictionaryGetValue(a4, CFSTR("FBPCreateOption_HTTPRequestOptions"));
            v23 = v22;
            if (v22)
            {
              if (CFGetTypeID(v22) && CFDictionaryGetTypeID())
              {
                v24 = (const __CFDictionary *)CFRetain(v23);
                *(_QWORD *)(DerivedStorage + 120) = v24;
                v25 = CFDictionaryGetValue(v24, CFSTR("FHRP_StorageSession"));
                if (v25)
                  v25 = CFRetain(v25);
                *(_QWORD *)(DerivedStorage + 128) = v25;
                v26 = (const __CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 120), CFSTR("FHRP_ClientAuditToken"));
                v23 = FigCFHTTPCopyClientProcessName(v26);
                v27 = (const __CFDictionary *)CFDictionaryGetValue(a4, CFSTR("FBPCreateOption_AlternativeConfigurationOptions"));
              }
              else
              {
                v27 = 0;
                v23 = 0;
              }
            }
            else
            {
              v27 = 0;
            }
            v28 = (const void *)*MEMORY[0x1E0C9AE50];
            *(_BYTE *)(DerivedStorage + 32) = v28 == CFDictionaryGetValue(a4, CFSTR("FBPCreateOption_DisallowCellularAccess"));
            *(_BYTE *)(DerivedStorage + 33) = v28 == CFDictionaryGetValue(a4, CFSTR("FBPCreateOption_DisallowsExpensiveNetworkAccess"));
            *(_BYTE *)(DerivedStorage + 34) = v28 == CFDictionaryGetValue(a4, CFSTR("FBPCreateOption_DisallowsConstrainedNetworkAccess"));
            *(_BYTE *)(DerivedStorage + 304) = CFDictionaryGetValue(a4, CFSTR("FBPCreateOption_DisableNativeHTTPReads")) == v28;
            v29 = CFDictionaryGetValue(a4, CFSTR("FBPCreateOption_CustomURLLoader"));
            if (v29)
              v29 = CFRetain(v29);
            *(_QWORD *)(DerivedStorage + 312) = v29;
LABEL_30:
            if (*(_BYTE *)(DerivedStorage + 304))
            {
              if (!*(_QWORD *)(DerivedStorage + 312)
                || (Mutable = CFArrayCreateMutable(v14, 0, MEMORY[0x1E0C9B378]),
                    (*(_QWORD *)(DerivedStorage + 360) = Mutable) == 0))
              {
                v36 = FigSignalErrorAt();
                if (!(_DWORD)v36)
                {
LABEL_40:
                  if (v23)
                    CFRelease(v23);
                  return v36;
                }
LABEL_44:
                CFRelease(0);
                goto LABEL_40;
              }
            }
            else if (!*(_QWORD *)(DerivedStorage + 136))
            {
              v31 = *(CFTypeRef *)(DerivedStorage + 128);
              if (!v31)
              {
                v31 = FigURLStorageSessionCopyGlobalSession();
                *(_QWORD *)(DerivedStorage + 128) = v31;
                if (!v31)
                {
                  v36 = 4294954655;
                  goto LABEL_44;
                }
              }
              v32 = *(_QWORD *)(DerivedStorage + 80);
              v33 = *(uint64_t (**)(CFTypeRef, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 40);
              if (!v33)
              {
                v36 = 4294954514;
                goto LABEL_44;
              }
              v34 = v33(v31, v32, 0, DerivedStorage + 136);
              if ((_DWORD)v34)
              {
                v36 = v34;
                goto LABEL_44;
              }
            }
            FigRCLCreateConfiguration(v23, CFSTR("kFigRemoteConfigurationLoaderStoreBagType_Pump"), v27, (CFMutableDictionaryRef *)(DerivedStorage + 296));
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            *(_BYTE *)(DerivedStorage + 378) = FigRCLGetNumberWithDefault(*(const __CFDictionary **)(DerivedStorage + 296), CFSTR("enableHTTP3Connection")) != 0;
            *(_QWORD *)(DerivedStorage + 24) = 0;
            v36 = 0;
            *(_QWORD *)(DerivedStorage + 96) = CFRetain(a2);
            *(_QWORD *)(DerivedStorage + 64) = a6;
            *v13 = 0;
            goto LABEL_40;
          }
        }
        v27 = 0;
        v23 = 0;
        goto LABEL_30;
      }
    }
    *(_QWORD *)(DerivedStorage + 80) = FigHTTPSchedulerRetain(Local);
    goto LABEL_11;
  }
  return FigSignalErrorAt();
}

uint64_t FigICYBytePumpInvalidate(const void *a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void **v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigRetainProxyRetain();
  FigRetainProxyLockMutex();
  FigRetainProxyInvalidate();
  if (!*(_BYTE *)(DerivedStorage + 16))
  {
    *(_BYTE *)(DerivedStorage + 16) = 1;
    FigHTTPStopAndReleaseTimer((dispatch_object_t *)(DerivedStorage + 88));
    FigICY_InvalidateHTTP(DerivedStorage);
    v3 = *(const void **)(DerivedStorage + 96);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(DerivedStorage + 96) = 0;
    }
    v4 = *(const void **)(DerivedStorage + 104);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(DerivedStorage + 104) = 0;
    }
    v5 = *(const void **)(DerivedStorage + 112);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(DerivedStorage + 112) = 0;
    }
    v6 = *(const void **)(DerivedStorage + 296);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(DerivedStorage + 296) = 0;
    }
    v7 = *(const void **)(DerivedStorage + 160);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(DerivedStorage + 160) = 0;
    }
    v8 = *(const void ***)(DerivedStorage + 168);
    if (v8)
    {
      PlaylistFileParserDestroy(v8);
      *(_QWORD *)(DerivedStorage + 168) = 0;
    }
    if (*(_BYTE *)(DerivedStorage + 18) && !*(_BYTE *)(DerivedStorage + 17))
    {
      FigBytePumpRetain(a1);
      if (dword_1EE2A2988)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      fbp_SendDataCallback((uint64_t)a1, DerivedStorage, *(_QWORD *)(DerivedStorage + 72), 0, 2, 0, MEMORY[0x1E0CA2E18], 4294954511);
      FigBytePumpRelease(a1);
    }
    *(_QWORD *)(DerivedStorage + 64) = 0;
    *(_BYTE *)(DerivedStorage + 17) = 1;
  }
  FigRetainProxyUnlockMutex();
  FigRetainProxyRelease();
  return 0;
}

void FigICYBytePumpFinalize(const void *a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigICYBytePumpInvalidate(a1);
  FigRetainProxyRelease();
  v3 = *(const void **)(DerivedStorage + 128);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 128) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 136);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 136) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 312);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 312) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 328);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 328) = 0;
  }
  v7 = *(const void **)(DerivedStorage + 360);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 360) = 0;
  }
  v8 = *(const void **)(DerivedStorage + 216);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 216) = 0;
  }
  v9 = *(const void **)(DerivedStorage + 184);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(DerivedStorage + 184) = 0;
  }
  FigRetainProxyRelease();
  *(_QWORD *)(DerivedStorage + 8) = 0;
  FigHTTPSchedulerRelease(*(dispatch_object_t *)(DerivedStorage + 80));
  *(_QWORD *)(DerivedStorage + 80) = 0;
  v10 = *(const void **)(DerivedStorage + 120);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(DerivedStorage + 120) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
}

__CFString *FigICYBytePumpCopyDebugDescription()
{
  uint64_t DerivedStorage;
  __CFString *Mutable;
  const __CFURL *v2;
  const __CFString *v3;
  const __CFString *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppend(Mutable, CFSTR("\tFigICYBytePump :"));
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated())
  {
    CFStringAppend(Mutable, CFSTR("invalidated"));
  }
  else
  {
    v2 = *(const __CFURL **)(DerivedStorage + 96);
    if (v2)
    {
      v3 = (const __CFString *)FigCFHTTPCreateURLString(v2);
      if (v3)
      {
        v4 = v3;
        CFStringAppend(Mutable, v3);
        CFRelease(v4);
      }
    }
  }
  FigRetainProxyUnlockMutex();
  return Mutable;
}

uint64_t FigICYBytePumpCopyProperty(uint64_t a1, __CFString *a2, const __CFAllocator *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  const void *v8;
  uint64_t v9;
  const void **v10;
  const void *v11;
  void (*v12)(const void *, __CFString *, _QWORD);
  CMTime v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated())
    goto LABEL_28;
  if (CFEqual(a2, CFSTR("FBP_CanContinueWithoutGapBitField")))
  {
    LODWORD(v14.value) = 7;
    if (!*(_QWORD *)(DerivedStorage + 208)
      && *(_BYTE *)(DerivedStorage + 19)
      && FigGetUpTimeNanoseconds() - *(_QWORD *)(DerivedStorage + 288) >= 0xDF8475801)
    {
      LODWORD(v14.value) = 0;
    }
    v8 = CFNumberCreate(a3, kCFNumberSInt32Type, &v14);
    goto LABEL_20;
  }
  if (CFEqual(a2, CFSTR("FBP_PlaybackSessionID")))
  {
    v8 = *(const void **)(DerivedStorage + 112);
    if (!v8)
      goto LABEL_13;
    goto LABEL_19;
  }
  if (CFEqual(a2, CFSTR("FBP_SessionConfiguration")))
  {
    v8 = *(const void **)(DerivedStorage + 296);
    if (!v8)
      goto LABEL_13;
LABEL_19:
    v8 = CFRetain(v8);
LABEL_20:
    v9 = 0;
    *a4 = v8;
    goto LABEL_21;
  }
  if (CFEqual(a2, CFSTR("FBP_NetworkCostMonitor")))
  {
    v10 = (const void **)(DerivedStorage + 184);
    v11 = *(const void **)(DerivedStorage + 184);
    if (!v11)
    {
      v9 = FigNetworkCostMonitorCreate((uint64_t)a3, DerivedStorage + 184);
      if ((_DWORD)v9)
        goto LABEL_21;
      v11 = *v10;
      if (!*v10)
      {
        v9 = 0;
        goto LABEL_21;
      }
    }
    v12 = *(void (**)(const void *, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v12)
      v12(v11, CFSTR("FNCM_FullThrottleDutyCycleAllowable"), *MEMORY[0x1E0C9AE40]);
    v8 = *v10;
    if (!*v10)
      goto LABEL_20;
    goto LABEL_19;
  }
  if (CFEqual(a2, CFSTR("FBP_Duration")))
  {
    v14 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E10];
    v8 = CMTimeCopyAsDictionary(&v14, a3);
    goto LABEL_20;
  }
  if (!FigBytePumpIsBytePumpProperty(a2))
  {
LABEL_28:
    v9 = FigSignalErrorAt();
    goto LABEL_21;
  }
LABEL_13:
  v9 = 4294954513;
LABEL_21:
  FigRetainProxyUnlockMutex();
  return v9;
}

uint64_t FigICYBytePumpSetProperty(int a1, CFTypeRef cf1)
{
  if (CFEqual(cf1, CFSTR("FBP_SendToNero")))
    return 0;
  else
    return FigSignalErrorAt();
}

void FigICY_InvalidateHTTP(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  void (*v6)(uint64_t);
  const void *v7;

  if (*(_BYTE *)(a1 + 304))
  {
    v2 = *(_QWORD *)(a1 + 312);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 320);
      v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (v4)
        v4(v2, v3);
      *(_QWORD *)(a1 + 320) = 0;
      CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 360));
      *(_QWORD *)(a1 + 368) = 0;
      *(_BYTE *)(a1 + 376) = 0;
    }
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 144);
    if (v5)
    {
      v6 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v6)
        v6(v5);
      v7 = *(const void **)(a1 + 144);
      if (v7)
      {
        CFRelease(v7);
        *(_QWORD *)(a1 + 144) = 0;
      }
    }
  }
  FigHTTPStopAndReleaseTimer((dispatch_object_t *)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
}

uint64_t fbp_SendDataCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v13;
  void (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, __int128 *, _QWORD, _DWORD, uint64_t, CFErrorRef, _QWORD, _QWORD);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v17;
  uint64_t v19;
  CFErrorRef v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v11 = a5;
  v13 = a3;
  v25 = *MEMORY[0x1E0C80C00];
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, __int128 *, _QWORD, _DWORD, uint64_t, CFErrorRef, _QWORD, _QWORD))(a2 + 64);
  v22 = 0;
  if ((a5 & 2) != 0)
  {
    if (dword_1EE2A2988)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v13 = a3;
    }
    *(_BYTE *)(a2 + 17) = 1;
  }
  if (*(_BYTE *)(a2 + 21))
  {
    v11 = v11 | 1;
    ++*(_QWORD *)(a2 + 24);
    *(_BYTE *)(a2 + 21) = 0;
  }
  if (!v15)
    return 0;
  FigCreateErrorForOSStatus(a8, &v22);
  if (v22)
  {
    v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  FigRetainProxyUnlockAll();
  v19 = *(_QWORD *)(a2 + 24);
  v23 = *a7;
  v24 = *((_QWORD *)a7 + 2);
  v15(a1, v13, a4, v11, 0, 0, a6, &v23, 0, 0, v19, v22, 0, 0);
  FigRetainProxyRelock();
  if (FigRetainProxyIsInvalidated())
    return 4294954413;
  else
    return 0;
}

uint64_t FigICYBytePumpClientHasEnough(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  void (*v5)(uint64_t);
  NSObject *v6;
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated())
  {
    v7 = FigSignalErrorAt();
    goto LABEL_15;
  }
  if (!a2 && !*(_BYTE *)(DerivedStorage + 19))
  {
    if (*(_BYTE *)(DerivedStorage + 304))
    {
      if (!*(_QWORD *)(DerivedStorage + 312) || !*(_QWORD *)(DerivedStorage + 320))
      {
LABEL_12:
        *(_BYTE *)(DerivedStorage + 19) = 1;
        *(_QWORD *)(DerivedStorage + 288) = FigGetUpTimeNanoseconds();
        v6 = *(NSObject **)(DerivedStorage + 48);
        if (v6)
          FigHTTPRescheduleTimer(0.0, *(_QWORD *)(DerivedStorage + 80), v6);
        goto LABEL_14;
      }
    }
    else
    {
      v4 = *(_QWORD *)(DerivedStorage + 144);
      if (!v4)
        goto LABEL_12;
      v5 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v5)
        v5(v4);
    }
    FigHTTPCreateTimer(*(const void **)(DerivedStorage + 8), (uint64_t)fbp_PauseTimer, *(NSObject **)(DerivedStorage + 80), (dispatch_object_t *)(DerivedStorage + 88), 62.0);
    goto LABEL_12;
  }
LABEL_14:
  v7 = 0;
LABEL_15:
  FigRetainProxyUnlockMutex();
  return v7;
}

uint64_t FigICYBytePumpClientNeedsMore(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t HTTPRequest;
  uint64_t UpTimeNanoseconds;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  const void *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  _QWORD block[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated())
  {
    v13 = FigSignalErrorAt();
    goto LABEL_29;
  }
  if (!a2)
  {
    if (*(_BYTE *)(DerivedStorage + 19))
    {
      UpTimeNanoseconds = FigGetUpTimeNanoseconds();
      FigHTTPStopAndReleaseTimer((dispatch_object_t *)(DerivedStorage + 88));
      v7 = *(NSObject **)(DerivedStorage + 48);
      if (v7)
      {
        *(_QWORD *)(DerivedStorage + 40) = UpTimeNanoseconds;
        FigHTTPRescheduleTimer(15.0, *(_QWORD *)(DerivedStorage + 80), v7);
      }
      if (*(_BYTE *)(DerivedStorage + 304))
      {
        if (*(_QWORD *)(DerivedStorage + 368) || *(_QWORD *)(DerivedStorage + 320))
        {
          if (UpTimeNanoseconds - *(_QWORD *)(DerivedStorage + 288) <= 60000000000)
          {
            if (*(_BYTE *)(DerivedStorage + 19))
            {
              v8 = FigRetainProxyRetain();
              v9 = *(NSObject **)(DerivedStorage + 80);
              block[0] = MEMORY[0x1E0C809B0];
              block[1] = 0x40000000;
              block[2] = __FigICY_ResumeHTTP_block_invoke;
              block[3] = &unk_1E2F7AD38;
              block[4] = v8;
              dispatch_async(v9, block);
            }
LABEL_34:
            HTTPRequest = 0;
            goto LABEL_35;
          }
LABEL_19:
          FigICY_InvalidateHTTP(DerivedStorage);
          v10 = *(const void **)(DerivedStorage + 96);
          v11 = a1;
          if (!*(_QWORD *)(DerivedStorage + 208))
          {
            HTTPRequest = FigICY_CreateHTTPRequest(a1, v10, 0);
            *(_BYTE *)(DerivedStorage + 21) = 1;
            goto LABEL_35;
          }
          v12 = 1;
LABEL_25:
          HTTPRequest = FigICY_CreateHTTPRequest(v11, v10, v12);
LABEL_35:
          *(_BYTE *)(DerivedStorage + 19) = 0;
          goto LABEL_36;
        }
      }
      else if (*(_QWORD *)(DerivedStorage + 144))
      {
        if (UpTimeNanoseconds - *(_QWORD *)(DerivedStorage + 288) <= 60000000000)
        {
          v14 = *(_QWORD *)(DerivedStorage + 144);
          if (v14)
          {
            v15 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
            if (v15)
              v15(v14);
          }
          goto LABEL_34;
        }
        goto LABEL_19;
      }
      if (!*(_QWORD *)(DerivedStorage + 208) && *(_BYTE *)(DerivedStorage + 376))
        *(_BYTE *)(DerivedStorage + 21) = 1;
      *(_BYTE *)(DerivedStorage + 376) = 0;
      v10 = *(const void **)(DerivedStorage + 96);
      v11 = a1;
      v12 = 0;
      goto LABEL_25;
    }
    if (*(_BYTE *)(DerivedStorage + 304))
    {
      if (*(_QWORD *)(DerivedStorage + 368) || *(_QWORD *)(DerivedStorage + 320))
        goto LABEL_3;
    }
    else if (*(_QWORD *)(DerivedStorage + 144))
    {
      goto LABEL_3;
    }
    if (*(_QWORD *)(DerivedStorage + 208))
      goto LABEL_3;
    *(_BYTE *)(DerivedStorage + 21) = 1;
    *(_BYTE *)(DerivedStorage + 376) = 0;
    v13 = FigICY_CreateHTTPRequest(a1, *(const void **)(DerivedStorage + 96), 0);
LABEL_29:
    HTTPRequest = v13;
    goto LABEL_36;
  }
LABEL_3:
  HTTPRequest = 0;
LABEL_36:
  FigRetainProxyUnlockMutex();
  return HTTPRequest;
}

uint64_t FigICYBytePumpLikelyToKeepUp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float *a6, _OWORD *a7, _DWORD *a8, BOOL *a9)
{
  uint64_t DerivedStorage;
  double Seconds;
  float v15;
  float v16;
  __int128 v17;
  CMTime v19;
  CMTime start;
  CMTimeRange time;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)&time.start.value = *(_OWORD *)a2;
  time.start.epoch = *(_QWORD *)(a2 + 16);
  Seconds = CMTimeGetSeconds(&time.start);
  v15 = 1.0;
  if (!*(_BYTE *)(DerivedStorage + 17))
  {
    v16 = Seconds / 5.0;
    if (v16 > 1.0)
      v16 = 1.0;
    v15 = fmaxf(v16, 0.0);
  }
  if (a6)
    *a6 = v15;
  if (a7)
  {
    start = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    v19 = start;
    CMTimeRangeMake(&time, &start, &v19);
    v17 = *(_OWORD *)&time.start.epoch;
    *a7 = *(_OWORD *)&time.start.value;
    a7[1] = v17;
    a7[2] = *(_OWORD *)&time.duration.timescale;
  }
  if (a8)
    *a8 = 2 * (v15 == 1.0);
  if (a9)
    *a9 = v15 == 1.0;
  return 0;
}

uint64_t FigICYBytePumpLoadInformation()
{
  return 0;
}

uint64_t FigICYBytePumpOpen(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, _BYTE *a7)
{
  uint64_t DerivedStorage;
  uint64_t HTTPRequest;
  uint64_t v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated())
  {
    HTTPRequest = FigSignalErrorAt();
LABEL_9:
    v12 = HTTPRequest;
    goto LABEL_7;
  }
  if (!*(_BYTE *)(DerivedStorage + 19) && !*(_BYTE *)(DerivedStorage + 18))
  {
    HTTPRequest = FigICY_CreateHTTPRequest(a1, *(const void **)(DerivedStorage + 96), 0);
    if ((_DWORD)HTTPRequest)
      goto LABEL_9;
  }
  *(_BYTE *)(DerivedStorage + 18) = 1;
  *a6 = 0;
  v12 = 0;
  if (a7)
    *a7 = 0;
LABEL_7:
  FigRetainProxyUnlockMutex();
  return v12;
}

uint64_t FigICYBytePumpSetCallback(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated())
  {
    v4 = FigSignalErrorAt();
  }
  else
  {
    *(_QWORD *)(DerivedStorage + 64) = a2;
    *(_QWORD *)(DerivedStorage + 72) = FigRetainProxyRetain();
    FigRetainProxyRelease();
    v4 = 0;
  }
  FigRetainProxyUnlockMutex();
  return v4;
}

uint64_t FigICYBytePumpSetPlayerRate(float a1)
{
  uint64_t v2;

  CMBaseObjectGetDerivedStorage();
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated() || a1 > 1.0 || a1 < 0.0)
    v2 = FigSignalErrorAt();
  else
    v2 = 0;
  FigRetainProxyUnlockMutex();
  return v2;
}

uint64_t fbp_PauseTimer()
{
  uint64_t UpTimeNanoseconds;
  uint64_t DerivedStorage;
  uint64_t v2;

  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    FigRetainProxyGetOwner();
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v2 = UpTimeNanoseconds - *(_QWORD *)(DerivedStorage + 288);
    if (v2 < 0xDF8475801)
      FigHTTPRescheduleTimer((double)v2 / -1000000000.0 + 62.0, *(_QWORD *)(DerivedStorage + 80), *(NSObject **)(DerivedStorage + 88));
    else
      FigICY_InvalidateHTTP(DerivedStorage);
  }
  return FigRetainProxyUnlockMutex();
}

uint64_t FigICY_CreateHTTPRequest(uint64_t a1, const void *a2, int a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const __CFDictionary *v11;
  __CFDictionary *MutableCopy;
  __CFDictionary *v13;
  uint64_t Mutable;
  CFTypeRef v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, const void *, void *, char), uint64_t);
  uint64_t v22;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, _QWORD, const void *, _QWORD, __CFDictionary *, uint64_t, uint64_t, _OWORD *, uint64_t, _QWORD, _QWORD, uint64_t (*)(uint64_t, int, uint64_t, OpaqueCMBlockBuffer *, uint64_t, uint64_t, unsigned int, uint64_t), uint64_t, uint64_t, uint64_t);
  const void *v29;
  const void *v30;
  _OWORD v32[8];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = DerivedStorage;
  v7 = 256;
  if (a3)
  {
    v8 = *(_QWORD *)(DerivedStorage + 200);
    v9 = v8 & ~(v8 >> 63);
    if (v8 <= 0)
      v7 = 256;
    else
      v7 = 264;
  }
  else
  {
    v9 = 0;
  }
  if (*(_BYTE *)(DerivedStorage + 32))
    v7 |= 0x80u;
  if (*(_BYTE *)(DerivedStorage + 33))
    v7 |= 0x800u;
  if (*(_BYTE *)(DerivedStorage + 34))
    v7 |= 0x1000u;
  if (*(_BYTE *)(DerivedStorage + 378))
    v10 = v7 | 0x8000;
  else
    v10 = v7;
  v11 = *(const __CFDictionary **)(DerivedStorage + 104);
  if (v11)
    MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v11);
  else
    MutableCopy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v13 = MutableCopy;
  if (!MutableCopy)
  {
    v22 = 4294954655;
    goto LABEL_47;
  }
  CFDictionaryAddValue(MutableCopy, CFSTR("icy-metadata"), CFSTR("1"));
  if (*(_BYTE *)(v6 + 304))
  {
    *(_WORD *)(v6 + 336) = 0;
    *(_QWORD *)(v6 + 344) = 0;
    *(_QWORD *)(v6 + 352) = 0;
    Mutable = FigCustomURLRequestInfoCreateMutable();
    if ((_DWORD)Mutable || (Mutable = FigCustomURLRequestInfoSetHTTPHeaders(), (_DWORD)Mutable))
    {
      v22 = Mutable;
      goto LABEL_47;
    }
    v15 = FigCFHTTPCreateUserAgent();
    v16 = FigCustomURLRequestInfoSetUserAgent();
    if ((_DWORD)v16
      || v9
      && (*(_BYTE *)(v6 + 336) = 1, *(_QWORD *)(v6 + 344) = v9, v16 = FigCustomURLRequestInfoSetByteRange(), (_DWORD)v16))
    {
      v22 = v16;
      if (v15)
        goto LABEL_46;
      goto LABEL_47;
    }
    v17 = *(const void **)(v6 + 328);
    if (v17)
    {
      CFRelease(v17);
      *(_QWORD *)(v6 + 328) = 0;
    }
    v18 = *(_QWORD *)(v6 + 312);
    v19 = *(_QWORD *)(v6 + 8);
    v20 = *(_QWORD *)(v6 + 80);
    v21 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, const void *, void *, char), uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v21)
    {
      v22 = v21(v18, 0, v19, v20, FigICY_CustomURLLoaderCallbackFn, v6 + 320);
      if (!v9)
        goto LABEL_37;
      goto LABEL_40;
    }
  }
  else
  {
    if (dword_1EE2A2988)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v24 = *(_QWORD *)(v6 + 136);
    v25 = *(_QWORD *)(v6 + 120);
    v26 = *(_QWORD *)v6;
    v27 = *(_QWORD *)(v6 + 8);
    v28 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, const void *, _QWORD, __CFDictionary *, uint64_t, uint64_t, _OWORD *, uint64_t, _QWORD, _QWORD, uint64_t (*)(uint64_t, int, uint64_t, OpaqueCMBlockBuffer *, uint64_t, uint64_t, unsigned int, uint64_t), uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v28)
    {
      memset(v32, 0, 112);
      v22 = v28(v24, v26, 0, a2, 0, v13, v25, v10, v32, v9, 0, 0, FigICY_HTTPPumpFn, v27, v6 + 144, v6 + 152);
      v15 = 0;
      if (!v9)
        goto LABEL_37;
      goto LABEL_40;
    }
    v15 = 0;
  }
  v22 = 4294954514;
  if (!v9)
  {
LABEL_37:
    *(_QWORD *)(v6 + 200) = 0;
    *(_DWORD *)(v6 + 224) = 0;
    *(_QWORD *)(v6 + 248) = 0;
    v29 = *(const void **)(v6 + 216);
    if (v29)
    {
      CFRelease(v29);
      *(_QWORD *)(v6 + 216) = 0;
    }
    *(_QWORD *)(v6 + 232) = 0;
  }
LABEL_40:
  if ((_DWORD)v22)
  {
    if (!v15)
      goto LABEL_47;
LABEL_46:
    CFRelease(v15);
    goto LABEL_47;
  }
  v30 = *(const void **)(v6 + 96);
  if (v30)
    CFRelease(v30);
  *(_QWORD *)(v6 + 96) = CFRetain(a2);
  FigHTTPCreateTimer(*(const void **)(v6 + 8), (uint64_t)fbp_NetworkInactivityTimer, *(NSObject **)(v6 + 80), (dispatch_object_t *)(v6 + 48), 15.0);
  v22 = 0;
  if (v15)
    goto LABEL_46;
LABEL_47:
  if (v13)
    CFRelease(v13);
  return v22;
}

