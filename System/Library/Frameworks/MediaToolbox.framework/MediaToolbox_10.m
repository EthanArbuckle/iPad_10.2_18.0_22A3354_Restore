uint64_t figTTMLParseEscape(UniChar *buffer, int64_t a2, int64_t a3, _QWORD *a4, UniChar *a5)
{
  uint64_t result;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  UniChar v13;
  uint64_t v14;
  int64_t v15;
  int64_t v16;
  int64_t v17;
  int64_t v18;
  CFRange v19;

  v18 = a2;
  result = figTTMLParseCharacter(92, buffer, a2, a3, &v18);
  if (!(_DWORD)result)
  {
    v10 = v18;
    if (v18 >= a3)
    {
      return 4294950724;
    }
    else
    {
      if (v18 < 0 || (v11 = *((_QWORD *)buffer + 20), v11 <= v18))
      {
        v13 = 0;
      }
      else
      {
        v12 = *((_QWORD *)buffer + 17);
        if (v12)
        {
          v13 = *(_WORD *)(v12 + 2 * (*((_QWORD *)buffer + 19) + v18));
        }
        else
        {
          v14 = *((_QWORD *)buffer + 18);
          if (v14)
          {
            v13 = *(char *)(v14 + *((_QWORD *)buffer + 19) + v18);
          }
          else
          {
            if (*((_QWORD *)buffer + 22) <= v18 || (v15 = *((_QWORD *)buffer + 21), v16 = v18, v15 > v18))
            {
              v17 = v18 - 4;
              if ((unint64_t)v18 < 4)
                v17 = 0;
              if (v17 + 64 < v11)
                v11 = v17 + 64;
              *((_QWORD *)buffer + 21) = v17;
              *((_QWORD *)buffer + 22) = v11;
              v19.location = *((_QWORD *)buffer + 19) + v17;
              v19.length = v11 - v17;
              CFStringGetCharacters(*((CFStringRef *)buffer + 16), v19, buffer);
              v15 = *((_QWORD *)buffer + 21);
              v16 = v18;
            }
            v13 = buffer[v10 - v15];
            v10 = v16;
          }
        }
      }
      result = 0;
      *a5 = v13;
      *a4 = v10 + 1;
    }
  }
  return result;
}

uint64_t figTTMLInitTextEmphasisParseMap()
{
  CFMutableDictionaryRef Mutable;
  uint64_t result;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  result = FigCFDictionarySetInt32();
  sTextEmphasisParseMap = (uint64_t)Mutable;
  return result;
}

uint64_t figTTMLInitTextShadowParseMap()
{
  CFMutableDictionaryRef Mutable;
  uint64_t result;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetInt32();
  result = FigCFDictionarySetInt32();
  sTextShadowParseMap = (uint64_t)Mutable;
  return result;
}

void locateAndCombineColorFunctionTokens(const __CFString *a1, uint64_t a2)
{
  CFRange v4;
  const void *v5;

  v4 = CFStringFind(a1, CFSTR(")"), 4uLL);
  if (*(_BYTE *)(a2 + 24))
  {
    if (v4.length)
    {
      *(_BYTE *)(a2 + 24) = 0;
      CFStringAppend(*(CFMutableStringRef *)(a2 + 16), a1);
      CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 8), *(const void **)(a2 + 16));
      v5 = *(const void **)(a2 + 16);
      if (v5)
      {
        CFRelease(v5);
        *(_QWORD *)(a2 + 16) = 0;
      }
    }
    else
    {
      CFStringAppend(*(CFMutableStringRef *)(a2 + 16), a1);
    }
  }
  else if ((CFStringHasPrefix(a1, CFSTR("rgb(")) || CFStringHasPrefix(a1, CFSTR("rgba("))) && !v4.length)
  {
    *(_BYTE *)(a2 + 24) = 1;
    *(_QWORD *)(a2 + 16) = CFStringCreateMutableCopy(*(CFAllocatorRef *)a2, 0, a1);
  }
  else
  {
    CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 8), a1);
  }
}

uint64_t figTTMLInitPositionParseMap()
{
  CFMutableDictionaryRef Mutable;
  uint64_t result;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  result = FigCFDictionarySetInt32();
  sPositionParseMap = (uint64_t)Mutable;
  return result;
}

uint64_t FigTTMLFormatWriterCreateWithByteStream(uint64_t a1, const void *a2, const __CFDictionary *a3, CFTypeRef *a4)
{
  uint64_t v8;
  uint64_t DerivedStorage;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  const void *v15;
  CFTypeRef v16;
  CFTypeRef v17;
  CFTypeRef v18;
  CFTypeRef v19;
  CFTypeRef v20;
  CFTypeRef v21;
  _QWORD *v22;
  uint64_t v23;
  const void *v24;
  CFTypeRef v25;
  CFTypeRef v26;
  CFTypeRef v27;
  CFTypeRef v28;
  CFTypeRef v30;
  CFTypeRef v31;
  CFTypeRef v32;
  CFTypeRef v33;
  CFTypeRef cf;
  CFTypeRef v35;
  CFTypeRef v36;
  CFTypeRef v37;
  CFTypeRef v38;
  CFTypeRef v39;
  CFTypeRef v40;
  CFTypeRef v41;
  CFTypeRef v42;
  const void *v43;
  const void *v44;
  const void *v45;
  const void *v46;
  CFTypeRef v47;

  v30 = 0;
  v31 = 0;
  if (!a2 || !a4)
    goto LABEL_77;
  FigFormatWriterGetClassID();
  v8 = CMDerivedObjectCreate();
  if ((_DWORD)v8)
  {
LABEL_78:
    v13 = v8;
    goto LABEL_79;
  }
  FigFormatWriterGetFigBaseObject(v31);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
LABEL_77:
    v8 = FigSignalErrorAt();
    goto LABEL_78;
  }
  v10 = DerivedStorage;
  if (!a3 || (CFDictionaryGetValue(a3, CFSTR("FileFormat")), FigCFEqual()))
  {
    FigFormatWriterGetFigBaseObject(v31);
    v11 = (_QWORD *)CMBaseObjectGetDerivedStorage();
    v46 = 0;
    v47 = 0;
    v44 = 0;
    v45 = 0;
    v43 = 0;
    v41 = 0;
    v42 = 0;
    v39 = 0;
    v40 = 0;
    v37 = 0;
    v38 = 0;
    v35 = 0;
    v36 = 0;
    v33 = 0;
    cf = 0;
    v32 = 0;
    v12 = FigTTMLSerializerCreateForByteStream(a1, a2, &v32);
    if ((_DWORD)v12)
      goto LABEL_71;
    v12 = FigTTMLSerializerCreateIndenter(a1, v32, &v33);
    if ((_DWORD)v12)
      goto LABEL_71;
    v12 = FigTTMLDocumentWriterCreateForSerializer(a1, v33, &cf);
    if ((_DWORD)v12)
      goto LABEL_71;
    v12 = FigTTMLDocumentWriterCreateLineBreaker(a1, cf, &v35);
    if ((_DWORD)v12)
      goto LABEL_71;
    v12 = FigTTMLDocumentWriterCreateProfileInserter(a1, v35, &v36);
    if ((_DWORD)v12)
      goto LABEL_71;
    v12 = FigTTMLDocumentWriterCreateStyleOptimizer(a1, v36, &v37);
    if ((_DWORD)v12)
      goto LABEL_71;
    v12 = FigTTMLDocumentWriterCreateRegionStyleOptimizer(a1, v37, &v38);
    if ((_DWORD)v12)
      goto LABEL_71;
    v12 = FigTTMLDocumentWriterCreateForiTT(a1, v38, &v39);
    if ((_DWORD)v12
      || (v12 = FigTTMLDocumentWriterCreateRubySpanBuilder(a1, v39, &v40), (_DWORD)v12)
      || (v12 = FigTTMLDocumentWriterCreateStyleSpanBuilder(a1, v40, &v41), (_DWORD)v12)
      || (v12 = FigTTMLDocumentWriterCreateParagraphStyleAttributeInserter(a1, v41, &v42), (_DWORD)v12)
      || (v12 = FigTTMLDocumentWriterCreateRegionAttributeInserter(a1, v42, &v43), (_DWORD)v12)
      || (v12 = FigTTMLDocumentWriterCreateFrameRateParameterInserter(a1, v43, &v44), (_DWORD)v12)
      || (v12 = FigTTMLDocumentWriterCreateRegionBuilder(a1, v44, &v45), (_DWORD)v12)
      || (v12 = FigTTMLDocumentWriterCreateLanguageIdentifierInserter(a1, v45, &v46), (_DWORD)v12))
    {
LABEL_71:
      v13 = v12;
    }
    else
    {
      v13 = FigTTMLCaptionWriterCreateForDocument(a1, v46, &v47);
      if (!(_DWORD)v13)
      {
        *v11 = v47;
        v14 = v45;
        v11[2] = v46;
        v11[3] = v14;
        v15 = v43;
        v11[4] = v44;
        v11[5] = v15;
        v11[6] = v42;
        v16 = v40;
        v11[8] = v41;
        v11[9] = v16;
        v17 = v38;
        v11[10] = v39;
        v19 = v36;
        v18 = v37;
        v11[12] = v17;
        v11[13] = v18;
        v20 = v35;
        v11[14] = v19;
        v11[15] = v20;
        v21 = v33;
        v11[16] = cf;
        v11[17] = v21;
        v11[18] = v32;
        v46 = 0;
        v47 = 0;
        v44 = 0;
        v45 = 0;
        v43 = 0;
        v41 = 0;
        v42 = 0;
        v39 = 0;
        v40 = 0;
        v36 = 0;
        v37 = 0;
        v38 = 0;
        cf = 0;
        v35 = 0;
        v32 = 0;
        v33 = 0;
LABEL_24:
        if (cf)
          CFRelease(cf);
        goto LABEL_26;
      }
    }
    if (v32)
      CFRelease(v32);
    if (v33)
      CFRelease(v33);
    goto LABEL_24;
  }
  CFDictionaryGetValue(a3, CFSTR("FileFormat"));
  if (FigCFEqual())
  {
    FigFormatWriterGetFigBaseObject(v31);
    v22 = (_QWORD *)CMBaseObjectGetDerivedStorage();
    v46 = 0;
    v47 = 0;
    v44 = 0;
    v45 = 0;
    v43 = 0;
    v41 = 0;
    v42 = 0;
    v39 = 0;
    v40 = 0;
    v37 = 0;
    v38 = 0;
    v35 = 0;
    v36 = 0;
    v23 = FigTTMLSerializerCreateForByteStream(a1, a2, &v35);
    if ((_DWORD)v23)
      goto LABEL_76;
    v23 = FigTTMLDocumentWriterCreateForSerializer(a1, v35, &v36);
    if ((_DWORD)v23)
      goto LABEL_76;
    v23 = FigTTMLDocumentWriterCreateLineBreaker(a1, v36, &v37);
    if ((_DWORD)v23)
      goto LABEL_76;
    v23 = FigTTMLDocumentWriterCreateStyleOptimizer(a1, v37, &v38);
    if ((_DWORD)v23)
      goto LABEL_76;
    v23 = FigTTMLDocumentWriterCreateForIMSC(a1, v38, &v39);
    if ((_DWORD)v23
      || (v23 = FigTTMLDocumentWriterCreateStyleSpanBuilder(a1, v39, &v40), (_DWORD)v23)
      || (v23 = FigTTMLDocumentWriterCreateWritingDirectionSpanBuilder(a1, v40, &v41), (_DWORD)v23)
      || (v23 = FigTTMLDocumentWriterCreateParagraphStyleAttributeInserter(a1, v41, &v42), (_DWORD)v23)
      || (v23 = FigTTMLDocumentWriterCreateRegionAttributeInserter(a1, v42, &v43), (_DWORD)v23)
      || (v23 = FigTTMLDocumentWriterCreateRegionBuilder(a1, v43, &v44), (_DWORD)v23)
      || (v23 = FigTTMLDocumentWriterCreateLanguageIdentifierInserter(a1, v44, &v45), (_DWORD)v23)
      || (v23 = FigTTMLDocumentWriterCreateDivBuilder(a1, v45, &v46), (_DWORD)v23))
    {
LABEL_76:
      v13 = v23;
    }
    else
    {
      v13 = FigTTMLCaptionWriterCreateForDocument(a1, v46, &v47);
      if (!(_DWORD)v13)
      {
        *v22 = v47;
        v24 = v45;
        v22[1] = v46;
        v22[2] = v24;
        v22[3] = v44;
        v25 = v42;
        v22[5] = v43;
        v22[6] = v25;
        v26 = v40;
        v22[7] = v41;
        v22[8] = v26;
        v22[11] = v39;
        v22[13] = v38;
        v27 = v36;
        v22[15] = v37;
        v22[16] = v27;
        v22[18] = v35;
        v46 = 0;
        v47 = 0;
        v44 = 0;
        v45 = 0;
        v43 = 0;
        v41 = 0;
        v42 = 0;
        v39 = 0;
        v40 = 0;
        v37 = 0;
        v38 = 0;
        v35 = 0;
        v36 = 0;
        goto LABEL_45;
      }
    }
LABEL_26:
    if (v35)
      CFRelease(v35);
    if (v36)
      CFRelease(v36);
LABEL_45:
    if (v37)
      CFRelease(v37);
    if (v38)
      CFRelease(v38);
    if (v39)
      CFRelease(v39);
    if (v40)
      CFRelease(v40);
    if (v41)
      CFRelease(v41);
    if (v42)
      CFRelease(v42);
    if (v43)
      CFRelease(v43);
    if (v44)
      CFRelease(v44);
    if (v45)
      CFRelease(v45);
    if (v46)
      CFRelease(v46);
    if (v47)
      CFRelease(v47);
    if ((_DWORD)v13)
      goto LABEL_79;
  }
  v13 = FigCaptionTimelineGeneratorCreate(a1, (uint64_t)ffw_ttml_WriteFigCaption, (uint64_t)v31, (uint64_t *)&v30);
  v28 = v30;
  if (!(_DWORD)v13)
  {
    *(_DWORD *)(v10 + 160) = 0;
    *(_QWORD *)(v10 + 152) = v28;
    *a4 = v31;
    return v13;
  }
  if (v30)
    CFRelease(v30);
LABEL_79:
  if (v31)
    CFRelease(v31);
  return v13;
}

uint64_t ffw_ttml_WriteFigCaption(const __CFArray *a1, CMTime *a2, uint64_t a3)
{
  uint64_t *DerivedStorage;
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  const __CFAllocator *v9;
  _OWORD *v10;
  const void *ValueAtIndex;
  void (*v12)(void **__return_ptr, const void *);
  __int128 v13;
  uint64_t CMBaseObject;
  uint64_t (*v15)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  CFDictionaryRef v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  CMTime time2;
  void *values[2];
  __int128 v26;
  __int128 v27;
  CFTypeRef v28;

  FigFormatWriterGetFigBaseObject(a3);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v28 = 0;
  Count = CFArrayGetCount(a1);
  if (!Count)
    return 0;
  v7 = Count;
  v8 = 0;
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v10 = (_OWORD *)MEMORY[0x1E0CA2E40];
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(a1, v8);
    v26 = 0u;
    v27 = 0u;
    *(_OWORD *)values = 0u;
    v12 = *(void (**)(void **__return_ptr, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v12)
    {
      v12(values, ValueAtIndex);
    }
    else
    {
      v13 = v10[1];
      *(_OWORD *)values = *v10;
      v26 = v13;
      v27 = v10[2];
    }
    v21 = *(_OWORD *)values;
    *(_QWORD *)&v22 = v26;
    time2 = *a2;
    if (!CMTimeCompare((CMTime *)&v21, &time2))
    {
      if (v28)
      {
        CFRelease(v28);
        v28 = 0;
      }
      CMBaseObject = FigCaptionGetCMBaseObject(ValueAtIndex);
      v15 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (!v15)
      {
        v18 = 4294954514;
        LODWORD(v21) = -12782;
        goto LABEL_19;
      }
      v16 = v15(CMBaseObject, CFSTR("CaptionData"), v9, &v28);
      if ((_DWORD)v16)
        break;
      v17 = *DerivedStorage;
      v21 = *(_OWORD *)values;
      v22 = v26;
      v23 = v27;
      v16 = FigTTMLCaptionWriterAddCaption(v17, (uint64_t)v28, &v21);
      if ((_DWORD)v16)
        break;
    }
    if (v7 == ++v8)
    {
      v18 = 0;
      goto LABEL_14;
    }
  }
  v18 = v16;
  LODWORD(v21) = v16;
  if ((_DWORD)v16 == -16577)
  {
    LODWORD(v21) = -17540;
    v18 = 4294950719;
  }
LABEL_19:
  values[0] = CFNumberCreate(v9, kCFNumberSInt32Type, &v21);
  if (values[0])
    v20 = CFDictionaryCreate(v9, (const void **)kFigFormatWriterNotificationParameter_OSStatus, (const void **)values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  else
    v20 = 0;
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (v20)
    CFRelease(v20);
  if (values[0])
    CFRelease(values[0]);
LABEL_14:
  if (v28)
    CFRelease(v28);
  return v18;
}

uint64_t ffw_ttml_Invalidate(uint64_t a1)
{
  uint64_t *DerivedStorage;

  FigFormatWriterGetFigBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  FigTTMLCaptionWriterInvalidate(*DerivedStorage);
  FigTTMLDocumentWriterInvalidate(DerivedStorage[1]);
  FigTTMLDocumentWriterInvalidate(DerivedStorage[2]);
  FigTTMLDocumentWriterInvalidate(DerivedStorage[3]);
  FigTTMLDocumentWriterInvalidate(DerivedStorage[4]);
  FigTTMLDocumentWriterInvalidate(DerivedStorage[5]);
  FigTTMLDocumentWriterInvalidate(DerivedStorage[6]);
  FigTTMLDocumentWriterInvalidate(DerivedStorage[7]);
  FigTTMLDocumentWriterInvalidate(DerivedStorage[8]);
  FigTTMLDocumentWriterInvalidate(DerivedStorage[9]);
  FigTTMLDocumentWriterInvalidate(DerivedStorage[10]);
  FigTTMLDocumentWriterInvalidate(DerivedStorage[11]);
  FigTTMLDocumentWriterInvalidate(DerivedStorage[12]);
  FigTTMLDocumentWriterInvalidate(DerivedStorage[13]);
  FigTTMLDocumentWriterInvalidate(DerivedStorage[14]);
  FigTTMLDocumentWriterInvalidate(DerivedStorage[15]);
  FigTTMLDocumentWriterInvalidate(DerivedStorage[16]);
  FigTTMLSerializerInvalidate(DerivedStorage[17]);
  FigTTMLSerializerInvalidate(DerivedStorage[18]);
  return 0;
}

void ffw_ttml_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;

  FigFormatWriterGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
  v2 = *(const void **)(DerivedStorage + 8);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(DerivedStorage + 16);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(DerivedStorage + 24);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(DerivedStorage + 32);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(DerivedStorage + 40);
  if (v6)
    CFRelease(v6);
  v7 = *(const void **)(DerivedStorage + 48);
  if (v7)
    CFRelease(v7);
  v8 = *(const void **)(DerivedStorage + 56);
  if (v8)
    CFRelease(v8);
  v9 = *(const void **)(DerivedStorage + 64);
  if (v9)
    CFRelease(v9);
  v10 = *(const void **)(DerivedStorage + 72);
  if (v10)
    CFRelease(v10);
  v11 = *(const void **)(DerivedStorage + 80);
  if (v11)
    CFRelease(v11);
  v12 = *(const void **)(DerivedStorage + 88);
  if (v12)
    CFRelease(v12);
  v13 = *(const void **)(DerivedStorage + 96);
  if (v13)
    CFRelease(v13);
  v14 = *(const void **)(DerivedStorage + 104);
  if (v14)
    CFRelease(v14);
  v15 = *(const void **)(DerivedStorage + 112);
  if (v15)
    CFRelease(v15);
  v16 = *(const void **)(DerivedStorage + 120);
  if (v16)
    CFRelease(v16);
  v17 = *(const void **)(DerivedStorage + 128);
  if (v17)
    CFRelease(v17);
  v18 = *(const void **)(DerivedStorage + 136);
  if (v18)
    CFRelease(v18);
  v19 = *(const void **)(DerivedStorage + 144);
  if (v19)
    CFRelease(v19);
  v20 = *(const void **)(DerivedStorage + 152);
  if (v20)
    CFRelease(v20);
}

CFStringRef ffw_ttml_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<FigFormatWriter_TTML %p>"), a1);
}

uint64_t ffw_ttml_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 && a4)
    return 4294954666;
  else
    return FigSignalErrorAt();
}

uint64_t ffw_ttml_SetProperty(uint64_t a1, uint64_t a2)
{
  if (a2)
    return 4294954666;
  else
    return FigSignalErrorAt();
}

uint64_t ffw_ttml_AddTrack(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t DerivedStorage;

  FigFormatWriterGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 != 1952807028 || !a4 || *(_DWORD *)(DerivedStorage + 160))
    return FigSignalErrorAt();
  *(_DWORD *)(DerivedStorage + 160) = 1;
  *a4 = 1;
  return 0;
}

uint64_t ffw_ttml_CopyTrackProperty(uint64_t a1, int a2, const void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;

  FigFormatWriterGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
    return FigSignalErrorAt();
  if (!a5)
    return FigSignalErrorAt();
  v10 = DerivedStorage;
  if (*(_DWORD *)(DerivedStorage + 160) != a2)
    return FigSignalErrorAt();
  if (CFEqual(CFSTR("LanguageTag"), a3) || CFEqual(CFSTR("ExtendedLanguageTag"), a3))
    return FigTTMLDocumentWriterCopyProperty(*(_QWORD *)(v10 + 16), (uint64_t)CFSTR("languageIdentifier"), a4, a5);
  return 4294954512;
}

uint64_t ffw_ttml_SetTrackProperty(uint64_t a1, int a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  const __CFString *v10;
  CFTypeID v12;
  CFTypeID v13;

  FigFormatWriterGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 160) == a2 && a3 && a4)
  {
    v8 = DerivedStorage;
    if (CFEqual(CFSTR("LanguageTag"), a3) || CFEqual(CFSTR("ExtendedLanguageTag"), a3))
    {
      v9 = *(_QWORD *)(v8 + 16);
      v10 = CFSTR("languageIdentifier");
      return FigTTMLDocumentWriterSetProperty(v9, (uint64_t)v10, (uint64_t)a4);
    }
    if (CFEqual(CFSTR("CaptionTimeCodeFrameDuration"), a3))
    {
      v12 = CFGetTypeID(a4);
      if (v12 == CFDictionaryGetTypeID())
      {
        v9 = *(_QWORD *)(v8 + 32);
        v10 = CFSTR("timeCodeFrameDuration");
        return FigTTMLDocumentWriterSetProperty(v9, (uint64_t)v10, (uint64_t)a4);
      }
    }
    else
    {
      if (!CFEqual(CFSTR("UseDropFrameTimeCode"), a3))
        return 4294954512;
      v13 = CFGetTypeID(a4);
      if (v13 == CFBooleanGetTypeID())
      {
        v9 = *(_QWORD *)(v8 + 32);
        v10 = CFSTR("useDropFrame");
        return FigTTMLDocumentWriterSetProperty(v9, (uint64_t)v10, (uint64_t)a4);
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t ffw_ttml_AddSampleBufferToTrack(uint64_t a1, int a2, opaqueCMSampleBuffer *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;

  FigFormatWriterGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 160) == a2
    && a3
    && (v6 = DerivedStorage, FigSampleBufferGetCaptionGroup())
    && !*(_BYTE *)(v6 + 164))
  {
    return FigCaptionTimelineGeneratorAddSampleBuffer(*(_QWORD *)(v6 + 152), a3);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t ffw_ttml_Flush(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t result;

  FigFormatWriterGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = FigCaptionTimelineGeneratorFinish(*(_QWORD *)(DerivedStorage + 152));
  if (!(_DWORD)result)
  {
    result = FigTTMLCaptionWriterFinish(*(_QWORD *)DerivedStorage);
    if (!(_DWORD)result)
      *(_BYTE *)(DerivedStorage + 164) = 1;
  }
  return result;
}

uint64_t ffw_ttml_WriteHeader()
{
  return 0;
}

uint64_t ffw_ttml_BeginSession()
{
  return 0;
}

uint64_t ffw_ttml_EndSession()
{
  return 0;
}

uint64_t FigMutableCompositionCreateRemote(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t uint64;
  const void *v8;
  const void *v10;
  xpc_object_t xdict;
  CFTypeRef cf;

  xdict = 0;
  cf = 0;
  v10 = 0;
  if (remoteXPCMutableCompositionClient_EnsureClientEstablished_gMutableCompositionRemoteClientSetupOnce != -1)
    dispatch_once(&remoteXPCMutableCompositionClient_EnsureClientEstablished_gMutableCompositionRemoteClientSetupOnce, &__block_literal_global_67);
  v5 = remoteXPCMutableCompositionClient_EnsureClientEstablished_err;
  if (remoteXPCMutableCompositionClient_EnsureClientEstablished_err)
    goto LABEL_16;
  v6 = remoteXPCMutableComposition_CreateObject(a1, &v10);
  if ((_DWORD)v6
    || (v6 = FigXPCCreateBasicMessage(), (_DWORD)v6)
    || (v6 = FigXPCMessageSetCFDictionary(), (_DWORD)v6)
    || (v6 = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)v6))
  {
    v5 = v6;
LABEL_16:
    v8 = v10;
    goto LABEL_17;
  }
  uint64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E0CA36A0]);
  v8 = v10;
  v5 = remoteXPCMutableComposition_CompleteObjectSetup((uint64_t)v10, uint64);
  if (!(_DWORD)v5)
  {
    *a3 = v8;
    goto LABEL_10;
  }
LABEL_17:
  if (v8)
    CFRelease(v8);
LABEL_10:
  if (cf)
    CFRelease(cf);
  if (xdict)
    CFRelease(xdict);
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t remoteXPCMutableComposition_CreateObject(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;

  FigMutableCompositionGetClassID();
  v3 = CMDerivedObjectCreate();
  if (!(_DWORD)v3)
    *a2 = 0;
  return v3;
}

uint64_t remoteXPCMutableComposition_CompleteObjectSetup(uint64_t a1, uint64_t a2)
{
  _QWORD *DerivedStorage;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  *DerivedStorage = a2;
  DerivedStorage[2] = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]);
  return FigXPCRemoteClientAssociateObject();
}

uint64_t remoteXPCMutableCompositionClient_DeadConnectionCallback()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(result + 9) = 1;
  return result;
}

uint64_t remoteXPCMutableComposition_Invalidate()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  uint64_t v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8))
    goto LABEL_7;
  v1 = DerivedStorage;
  *(_BYTE *)(DerivedStorage + 8) = 1;
  FigXPCRemoteClientDisassociateObject();
  if (!*(_BYTE *)(v1 + 9))
  {
    v2 = FigXPCCreateBasicMessage();
    if ((_DWORD)v2 || (v2 = FigXPCRemoteClientSendSyncMessage(), (_DWORD)v2))
    {
      v4 = v2;
      goto LABEL_8;
    }
  }
  *(_QWORD *)v1 = 0;
  v3 = *(const void **)(v1 + 16);
  if (!v3)
  {
LABEL_7:
    v4 = 0;
  }
  else
  {
    CFRelease(v3);
    v4 = 0;
    *(_QWORD *)(v1 + 16) = 0;
  }
LABEL_8:
  FigXPCRelease();
  return v4;
}

__CFString *remoteXPCMutableComposition_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;
  const char *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(a1);
  if (*(_BYTE *)(DerivedStorage + 9))
    v6 = " SERVER DIED";
  else
    v6 = "";
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigMutableCompositionRemote(XPC) %p retainCount: %ld ObjectID: %016llx%s>"), a1, v5, *(_QWORD *)DerivedStorage, v6);
  return Mutable;
}

uint64_t remoteXPCMutableComposition_CopyProperty(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  ObjectID = remoteXPCMutableComposition_GetObjectID(a1, &v4);
  if (!(_DWORD)ObjectID)
    ObjectID = FigXPCSendStdCopyPropertyMessage();
  v2 = ObjectID;
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t remoteXPCMutableComposition_SetProperty(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  ObjectID = remoteXPCMutableComposition_GetObjectID(a1, &v4);
  if (!(_DWORD)ObjectID)
    ObjectID = FigXPCSendStdSetPropertyMessage();
  v2 = ObjectID;
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t remoteXPCMutableComposition_GetObjectID(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8) || *(_BYTE *)(DerivedStorage + 9))
    return FigSignalErrorAt();
  *a2 = *(_QWORD *)DerivedStorage;
  return 0;
}

uint64_t remoteXPCMutableComposition_CreateMutableCopy(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t ObjectID;
  uint64_t v6;
  uint64_t uint64;
  const void *v8;
  uint64_t v9;
  const void *v11;
  uint64_t v12;
  xpc_object_t xdict;
  uint64_t v14;

  xdict = 0;
  v14 = 0;
  v11 = 0;
  v12 = 0;
  if (!a3)
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_14;
  }
  ObjectID = remoteXPCMutableComposition_GetObjectID(a2, &v12);
  if ((_DWORD)ObjectID)
  {
LABEL_14:
    v9 = ObjectID;
LABEL_8:
    v8 = 0;
    goto LABEL_9;
  }
  v6 = remoteXPCMutableComposition_CreateObject(a1, &v11);
  if (!(_DWORD)v6)
  {
    v6 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v6)
    {
      v6 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)v6)
      {
        uint64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E0CA36A0]);
        v8 = v11;
        v9 = remoteXPCMutableComposition_CompleteObjectSetup((uint64_t)v11, uint64);
        if ((_DWORD)v9)
          goto LABEL_9;
        *a3 = v8;
        goto LABEL_8;
      }
    }
  }
  v9 = v6;
  v8 = v11;
LABEL_9:
  FigXPCRelease();
  FigXPCRelease();
  if (v8)
    CFRelease(v8);
  FigXPCRemoteClientKillServerOnTimeout();
  return v9;
}

uint64_t remoteXPCMutableComposition_CopyFormatReader(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t ObjectID;
  uint64_t uint64;
  uint64_t v9;
  uint64_t v11;
  xpc_object_t v12;
  xpc_object_t xdict;

  v12 = 0;
  xdict = 0;
  v11 = 0;
  if (a4)
  {
    ObjectID = remoteXPCMutableComposition_GetObjectID(a1, &v11);
    if (!(_DWORD)ObjectID)
    {
      ObjectID = FigXPCCreateBasicMessage();
      if (!(_DWORD)ObjectID)
      {
        xpc_dictionary_set_BOOL(xdict, "MakeImmutableSnapshot", a2 != 0);
        if (!a3 || (ObjectID = FigXPCMessageSetCFDictionary(), !(_DWORD)ObjectID))
        {
          ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
          if (!(_DWORD)ObjectID)
          {
            uint64 = xpc_dictionary_get_uint64(v12, "FormatReader");
            if (!uint64)
            {
              v9 = 0;
              goto LABEL_11;
            }
            ObjectID = FigFormatReaderXPCRemoteRetainCopiedPlaybackProcessFormatReader(uint64, a4);
          }
        }
      }
    }
  }
  else
  {
    ObjectID = FigSignalErrorAt();
  }
  v9 = ObjectID;
LABEL_11:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v9;
}

uint64_t remoteXPCMutableComposition_GetTrackCompatibleWithAssetTrack(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t ObjectID;
  uint64_t v7;
  uint64_t v9;
  xpc_object_t v10;
  xpc_object_t xdict;

  v10 = 0;
  xdict = 0;
  v9 = 0;
  if (!a2 || !a4)
  {
    ObjectID = FigSignalErrorAt();
LABEL_10:
    v7 = ObjectID;
    goto LABEL_8;
  }
  ObjectID = remoteXPCMutableComposition_GetObjectID(a1, &v9);
  if ((_DWORD)ObjectID)
    goto LABEL_10;
  CMBaseObjectGetDerivedStorage();
  FigSandboxRegisterURLWithProcessAndCopyRegistration();
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_10;
  xpc_dictionary_set_int64(xdict, "AssetTrackID", a3);
  ObjectID = FigXPCMessageSetCFURL();
  if ((_DWORD)ObjectID)
    goto LABEL_10;
  v7 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!(_DWORD)v7)
    *a4 = xpc_dictionary_get_int64(v10, "TrackID");
LABEL_8:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v7;
}

uint64_t remoteXPCMutableComposition_AddTrack(uint64_t a1, unsigned int a2, uint64_t a3, int a4, _DWORD *a5)
{
  uint64_t ObjectID;
  uint64_t v10;
  uint64_t v12;
  xpc_object_t v13;
  xpc_object_t xdict;

  v13 = 0;
  xdict = 0;
  v12 = 0;
  ObjectID = remoteXPCMutableComposition_GetObjectID(a1, &v12);
  if ((_DWORD)ObjectID
    || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
    || (xpc_dictionary_set_uint64(xdict, "MediaType", a2), xpc_dictionary_set_int64(xdict, "TrackID", a4), a3)
    && (ObjectID = FigXPCMessageSetCFDictionary(), (_DWORD)ObjectID))
  {
    v10 = ObjectID;
  }
  else
  {
    v10 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (a5 && !(_DWORD)v10)
      *a5 = xpc_dictionary_get_int64(v13, "TrackID");
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v10;
}

uint64_t remoteXPCMutableComposition_DeleteTrack(uint64_t a1, int a2)
{
  uint64_t ObjectID;
  uint64_t v4;
  uint64_t v6;
  xpc_object_t xdict;

  v6 = 0;
  xdict = 0;
  ObjectID = remoteXPCMutableComposition_GetObjectID(a1, &v6);
  if ((_DWORD)ObjectID)
  {
    v4 = ObjectID;
  }
  else
  {
    v4 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v4)
    {
      xpc_dictionary_set_int64(xdict, "TrackID", a2);
      v4 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t remoteXPCMutableComposition_SetTrackEditList(uint64_t a1, int a2, size_t a3, uint64_t a4)
{
  size_t v5;
  uint64_t ObjectID;
  uint64_t v8;
  CFDataRef v9;
  const UInt8 *BytePtr;
  size_t Length;
  uint64_t v12;
  CFDataRef theData;
  uint64_t v15;
  xpc_object_t xdict;

  v15 = 0;
  xdict = 0;
  theData = 0;
  if ((a3 & 0x8000000000000000) != 0)
    goto LABEL_14;
  v5 = a3;
  ObjectID = remoteXPCMutableComposition_GetObjectID(a1, &v15);
  if ((_DWORD)ObjectID)
    goto LABEL_15;
  CMBaseObjectGetDerivedStorage();
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_15;
  xpc_dictionary_set_int64(xdict, "TrackID", a2);
  xpc_dictionary_set_int64(xdict, "EditCount", v5);
  if (!v5)
    goto LABEL_10;
  if (!a4)
  {
LABEL_14:
    ObjectID = FigSignalErrorAt();
LABEL_15:
    v8 = ObjectID;
    goto LABEL_13;
  }
  v8 = FigRemote_CreateEditArrayData(v5, a4, (const __CFAllocator *)*MEMORY[0x1E0C9AE00], &theData);
  v9 = theData;
  if ((_DWORD)v8)
    goto LABEL_11;
  BytePtr = CFDataGetBytePtr(theData);
  Length = CFDataGetLength(theData);
  v12 = a4 + 96;
  do
  {
    FigSandboxRegisterURLWithProcessAndCopyRegistration();
    v12 += 108;
    --v5;
  }
  while (v5);
  xpc_dictionary_set_data(xdict, "EditListData", BytePtr, Length);
LABEL_10:
  v8 = FigXPCRemoteClientSendSyncMessage();
  v9 = theData;
LABEL_11:
  if (v9)
    CFRelease(v9);
LABEL_13:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v8;
}

uint64_t remoteXPCMutableComposition_CopyTrackEditList(const void *a1, int a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t ObjectID;
  unsigned int int64;
  const UInt8 *data;
  uint64_t EditArrayFromData;
  uint64_t v14;
  unint64_t v15;
  const __CFAllocator *v16;
  size_t v18;
  uint64_t v19;
  xpc_object_t v20;
  xpc_object_t xdict;

  v20 = 0;
  xdict = 0;
  v18 = 0;
  v19 = 0;
  ObjectID = remoteXPCMutableComposition_GetObjectID((uint64_t)a1, &v19);
  if (!(_DWORD)ObjectID)
  {
    ObjectID = FigXPCCreateBasicMessage();
    if (!(_DWORD)ObjectID)
    {
      xpc_dictionary_set_int64(xdict, "TrackID", a2);
      ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)ObjectID)
      {
        int64 = xpc_dictionary_get_int64(v20, "EditCount");
        data = (const UInt8 *)xpc_dictionary_get_data(v20, "EditListData", &v18);
        if (a3)
          *a3 = int64;
        if (!a5)
        {
          EditArrayFromData = 0;
          goto LABEL_12;
        }
        if (a4 >= int64)
        {
          v14 = int64;
          v15 = v18;
          v16 = CFGetAllocator(a1);
          EditArrayFromData = FigRemote_CreateEditArrayFromData(data, v15, v16, v14, a5);
          bzero((void *)(a5 + 108 * v14), 108 * (a4 - v14));
          goto LABEL_12;
        }
        ObjectID = FigSignalErrorAt();
      }
    }
  }
  EditArrayFromData = ObjectID;
LABEL_12:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return EditArrayFromData;
}

uint64_t remoteXPCMutableComposition_AddFormatReaderForURL(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectID;
  uint64_t v5;
  uint64_t v6;
  uint64_t value;
  uint64_t v9;
  xpc_object_t xdict;

  v9 = 0;
  xdict = 0;
  value = 0;
  if (!a2 || !a3)
  {
    ObjectID = FigSignalErrorAt();
LABEL_11:
    v6 = ObjectID;
    goto LABEL_8;
  }
  ObjectID = remoteXPCMutableComposition_GetObjectID(a1, &v9);
  if ((_DWORD)ObjectID)
    goto LABEL_11;
  CMBaseObjectGetDerivedStorage();
  ObjectID = FigFormatReaderXPCRemoteGetObjectID(a3, &value);
  if ((_DWORD)ObjectID)
    goto LABEL_11;
  v5 = FigXPCCreateBasicMessage();
  if ((_DWORD)v5
    || (xpc_dictionary_set_uint64(xdict, "FormatReader", value),
        FigSandboxRegisterURLWithProcessAndCopyRegistration(),
        v5 = FigXPCMessageSetCFURL(),
        (_DWORD)v5))
  {
    v6 = v5;
  }
  else
  {
    v6 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_8:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteXPCMutableComposition_CopyTrackProperty(uint64_t a1, int a2, const void *a3, uint64_t a4, CFMutableArrayRef *a5)
{
  uint64_t ObjectID;
  uint64_t UnflattenedFormatDescriptionReplacementTable;
  _QWORD v11[2];
  xpc_object_t xdict;

  v11[1] = 0;
  xdict = 0;
  v11[0] = 0;
  if (!a3 || !a5)
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_12;
  }
  *a5 = 0;
  ObjectID = remoteXPCMutableComposition_GetObjectID(a1, v11);
  if ((_DWORD)ObjectID)
    goto LABEL_12;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_12;
  xpc_dictionary_set_int64(xdict, "TrackID", a2);
  ObjectID = FigXPCMessageSetCFString();
  if ((_DWORD)ObjectID)
    goto LABEL_12;
  ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)ObjectID)
    goto LABEL_12;
  if (!CFEqual(a3, CFSTR("MutableCompositionTrack_FormatDescriptionReplacementTable")))
  {
    ObjectID = FigXPCMessageCopyCFObject();
LABEL_12:
    UnflattenedFormatDescriptionReplacementTable = ObjectID;
    goto LABEL_13;
  }
  UnflattenedFormatDescriptionReplacementTable = FigXPCMessageCopyFormatDescriptionArray();
  if (!(_DWORD)UnflattenedFormatDescriptionReplacementTable)
    UnflattenedFormatDescriptionReplacementTable = FigMutableCompositionClientServer_CreateUnflattenedFormatDescriptionReplacementTable(0, a5);
LABEL_13:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return UnflattenedFormatDescriptionReplacementTable;
}

uint64_t remoteXPCMutableComposition_SetTrackProperty(uint64_t a1, int a2, const void *a3, const __CFArray *a4)
{
  uint64_t ObjectID;
  uint64_t v8;
  CFTypeRef cf;
  uint64_t v11;
  xpc_object_t xdict;

  v11 = 0;
  xdict = 0;
  cf = 0;
  if (!a3)
  {
    v8 = FigSignalErrorAt();
    goto LABEL_11;
  }
  ObjectID = remoteXPCMutableComposition_GetObjectID(a1, &v11);
  if (!(_DWORD)ObjectID)
  {
    ObjectID = FigXPCCreateBasicMessage();
    if (!(_DWORD)ObjectID)
    {
      xpc_dictionary_set_int64(xdict, "TrackID", a2);
      ObjectID = FigXPCMessageSetCFString();
      if (!(_DWORD)ObjectID)
      {
        if (CFEqual(a3, CFSTR("MutableCompositionTrack_FormatDescriptionReplacementTable")))
        {
          ObjectID = (uint64_t)FigMutableCompositionClientServer_CreateFlattenedFormatDescriptionReplacementTable(a4, (__CFArray **)&cf);
          if (!(_DWORD)ObjectID)
          {
            ObjectID = FigXPCMessageSetFormatDescriptionArray();
            if (!(_DWORD)ObjectID)
              goto LABEL_8;
          }
        }
        else
        {
          ObjectID = FigXPCMessageSetCFObject();
          if (!(_DWORD)ObjectID)
LABEL_8:
            ObjectID = FigXPCRemoteClientSendSyncMessage();
        }
      }
    }
  }
  v8 = ObjectID;
  if (cf)
    CFRelease(cf);
LABEL_11:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v8;
}

uint64_t remoteXPCMutableComposition_InsertAssetSegmentIntoTrack(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t ObjectID;
  uint64_t v10;
  uint64_t v12;
  xpc_object_t xdict;

  v12 = 0;
  xdict = 0;
  if (!a3
    || *(_QWORD *)(a5 + 16)
    || (*(_DWORD *)(a5 + 12) & 0x1D) != 1
    || *(_QWORD *)(a6 + 16)
    || (*(_DWORD *)(a6 + 12) & 0x1D) != 1
    || *(_QWORD *)(a7 + 16))
  {
    ObjectID = FigSignalErrorAt();
  }
  else
  {
    ObjectID = remoteXPCMutableComposition_GetObjectID(a1, &v12);
    if (!(_DWORD)ObjectID)
    {
      CMBaseObjectGetDerivedStorage();
      ObjectID = FigXPCCreateBasicMessage();
      if (!(_DWORD)ObjectID)
      {
        FigSandboxRegisterURLWithProcessAndCopyRegistration();
        xpc_dictionary_set_int64(xdict, "DestTrackID", a2);
        xpc_dictionary_set_int64(xdict, "AssetTrackID", a4);
        FigXPCMessageSetCMTime();
        FigXPCMessageSetCMTime();
        FigXPCMessageSetCMTime();
        ObjectID = FigXPCMessageSetCFURL();
        if (!(_DWORD)ObjectID)
          ObjectID = FigXPCRemoteClientSendSyncMessage();
      }
    }
  }
  v10 = ObjectID;
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v10;
}

uint64_t remoteXPCMutableComposition_InsertAssetSegment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t ObjectID;
  uint64_t v6;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  if (!a2
    || *(_QWORD *)(a3 + 16)
    || (*(_DWORD *)(a3 + 12) & 0x1D) != 1
    || *(_QWORD *)(a4 + 16)
    || (*(_DWORD *)(a4 + 12) & 0x1D) != 1
    || *(_QWORD *)(a5 + 16))
  {
    ObjectID = FigSignalErrorAt();
  }
  else
  {
    ObjectID = remoteXPCMutableComposition_GetObjectID(a1, v8);
    if (!(_DWORD)ObjectID)
    {
      CMBaseObjectGetDerivedStorage();
      ObjectID = FigXPCCreateBasicMessage();
      if (!(_DWORD)ObjectID)
      {
        FigSandboxRegisterURLWithProcessAndCopyRegistration();
        FigXPCMessageSetCMTime();
        FigXPCMessageSetCMTime();
        FigXPCMessageSetCMTime();
        ObjectID = FigXPCMessageSetCFURL();
        if (!(_DWORD)ObjectID)
          ObjectID = FigXPCRemoteClientSendSyncMessage();
      }
    }
  }
  v6 = ObjectID;
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteXPCMutableComposition_InsertEmptyTrackSegment(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectID;
  uint64_t v6;
  uint64_t v8;
  xpc_object_t xdict;

  v8 = 0;
  xdict = 0;
  if (*(_QWORD *)(a3 + 16)
    || (*(_DWORD *)(a3 + 12) & 0x1D) != 1
    || *(_QWORD *)(a4 + 16)
    || (*(_DWORD *)(a4 + 12) & 0x1D) != 1)
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_10;
  }
  ObjectID = remoteXPCMutableComposition_GetObjectID(a1, &v8);
  if ((_DWORD)ObjectID)
  {
LABEL_10:
    v6 = ObjectID;
    goto LABEL_8;
  }
  v6 = FigXPCCreateBasicMessage();
  if (!(_DWORD)v6)
  {
    xpc_dictionary_set_int64(xdict, "TrackID", a2);
    FigXPCMessageSetCMTime();
    FigXPCMessageSetCMTime();
    v6 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_8:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteXPCMutableComposition_InsertEmptySegment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectID;
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  if (*(_QWORD *)(a2 + 16)
    || (*(_DWORD *)(a2 + 12) & 0x1D) != 1
    || *(_QWORD *)(a3 + 16)
    || (*(_DWORD *)(a3 + 12) & 0x1D) != 1)
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_10;
  }
  ObjectID = remoteXPCMutableComposition_GetObjectID(a1, v6);
  if ((_DWORD)ObjectID)
  {
LABEL_10:
    v4 = ObjectID;
    goto LABEL_8;
  }
  v4 = FigXPCCreateBasicMessage();
  if (!(_DWORD)v4)
  {
    FigXPCMessageSetCMTime();
    FigXPCMessageSetCMTime();
    v4 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_8:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t remoteXPCMutableComposition_DeleteTrackSegment(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectID;
  uint64_t v6;
  uint64_t v8;
  xpc_object_t xdict;

  v8 = 0;
  xdict = 0;
  if (*(_QWORD *)(a3 + 16)
    || (*(_DWORD *)(a3 + 12) & 0x1D) != 1
    || *(_QWORD *)(a4 + 16)
    || (*(_DWORD *)(a4 + 12) & 0x1D) != 1)
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_10;
  }
  ObjectID = remoteXPCMutableComposition_GetObjectID(a1, &v8);
  if ((_DWORD)ObjectID)
  {
LABEL_10:
    v6 = ObjectID;
    goto LABEL_8;
  }
  v6 = FigXPCCreateBasicMessage();
  if (!(_DWORD)v6)
  {
    xpc_dictionary_set_int64(xdict, "TrackID", a2);
    FigXPCMessageSetCMTime();
    FigXPCMessageSetCMTime();
    v6 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_8:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteXPCMutableComposition_DeleteSegment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectID;
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  if (*(_QWORD *)(a2 + 16)
    || (*(_DWORD *)(a2 + 12) & 0x1D) != 1
    || *(_QWORD *)(a3 + 16)
    || (*(_DWORD *)(a3 + 12) & 0x1D) != 1)
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_10;
  }
  ObjectID = remoteXPCMutableComposition_GetObjectID(a1, v6);
  if ((_DWORD)ObjectID)
  {
LABEL_10:
    v4 = ObjectID;
    goto LABEL_8;
  }
  v4 = FigXPCCreateBasicMessage();
  if (!(_DWORD)v4)
  {
    FigXPCMessageSetCMTime();
    FigXPCMessageSetCMTime();
    v4 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_8:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t remoteXPCMutableComposition_ScaleTrackSegment(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t ObjectID;
  uint64_t v7;
  uint64_t v9;
  xpc_object_t xdict;

  v9 = 0;
  xdict = 0;
  if (*(_QWORD *)(a3 + 16)
    || (*(_DWORD *)(a3 + 12) & 0x1D) != 1
    || *(_QWORD *)(a4 + 16)
    || (*(_DWORD *)(a4 + 12) & 0x1D) != 1
    || *(_QWORD *)(a5 + 16)
    || (*(_DWORD *)(a5 + 12) & 0x1D) != 1)
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_12;
  }
  ObjectID = remoteXPCMutableComposition_GetObjectID(a1, &v9);
  if ((_DWORD)ObjectID)
  {
LABEL_12:
    v7 = ObjectID;
    goto LABEL_10;
  }
  v7 = FigXPCCreateBasicMessage();
  if (!(_DWORD)v7)
  {
    xpc_dictionary_set_int64(xdict, "TrackID", a2);
    FigXPCMessageSetCMTime();
    FigXPCMessageSetCMTime();
    FigXPCMessageSetCMTime();
    v7 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_10:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v7;
}

uint64_t remoteXPCMutableComposition_ScaleSegment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectID;
  uint64_t v5;
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  if (*(_QWORD *)(a2 + 16)
    || (*(_DWORD *)(a2 + 12) & 0x1D) != 1
    || *(_QWORD *)(a3 + 16)
    || (*(_DWORD *)(a3 + 12) & 0x1D) != 1
    || *(_QWORD *)(a4 + 16)
    || (*(_DWORD *)(a4 + 12) & 0x1D) != 1)
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_12;
  }
  ObjectID = remoteXPCMutableComposition_GetObjectID(a1, v7);
  if ((_DWORD)ObjectID)
  {
LABEL_12:
    v5 = ObjectID;
    goto LABEL_10;
  }
  v5 = FigXPCCreateBasicMessage();
  if (!(_DWORD)v5)
  {
    FigXPCMessageSetCMTime();
    FigXPCMessageSetCMTime();
    FigXPCMessageSetCMTime();
    v5 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_10:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t remoteXPCMutableComposition_DeferTracksChangedNotifications(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  ObjectID = remoteXPCMutableComposition_GetObjectID(a1, v5);
  if ((_DWORD)ObjectID)
  {
    v3 = ObjectID;
  }
  else
  {
    v2 = FigXPCCreateBasicMessage();
    if ((_DWORD)v2)
      v3 = v2;
    else
      v3 = FigXPCRemoteClientSendSyncMessage();
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t remoteXPCMutableComposition_PostDeferredTracksChangedNotification(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  ObjectID = remoteXPCMutableComposition_GetObjectID(a1, v5);
  if ((_DWORD)ObjectID)
  {
    v3 = ObjectID;
  }
  else
  {
    v2 = FigXPCCreateBasicMessage();
    if ((_DWORD)v2)
      v3 = v2;
    else
      v3 = FigXPCRemoteClientSendSyncMessage();
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t remoteXPCMutableComposition_InsertSegmentArrayIntoTrack(uint64_t a1, int a2, CFArrayRef theArray, uint64_t a4, const __CFArray *a5, const __CFArray *a6, __int128 *a7)
{
  uint64_t Count;
  __CFArray *Mutable;
  uint64_t ObjectID;
  uint64_t DerivedStorage;
  CFIndex v17;
  const void *v18;
  const void *ValueAtIndex;
  CFTypeID v20;
  CFTypeID TypeID;
  const void *v22;
  CFTypeID v23;
  uint64_t v24;
  uint64_t appended;
  uint64_t v26;
  __int128 *v28;
  int v29;
  __int128 v30;
  uint64_t v31;
  void *value;
  uint64_t v33;
  xpc_object_t xdict;

  v33 = 0;
  xdict = 0;
  value = 0;
  if (!theArray || !a4 || !a5 || !a6 || *((_QWORD *)a7 + 2))
  {
    v26 = FigSignalErrorAt();
    goto LABEL_34;
  }
  Count = CFArrayGetCount(theArray);
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B378]);
  if (CFArrayGetCount(theArray) != Count || CFArrayGetCount(a5) != Count || CFArrayGetCount(a6) != Count)
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_29;
  }
  v29 = a2;
  ObjectID = remoteXPCMutableComposition_GetObjectID(a1, &v33);
  if ((_DWORD)ObjectID
    || (v28 = a7,
        DerivedStorage = CMBaseObjectGetDerivedStorage(),
        ObjectID = FigXPCCreateBasicMessage(),
        (_DWORD)ObjectID))
  {
LABEL_29:
    v26 = ObjectID;
    if (Mutable)
      goto LABEL_33;
    goto LABEL_34;
  }
  if (Count < 1)
  {
LABEL_24:
    xpc_dictionary_set_int64(xdict, "DestTrackID", v29);
    v30 = *v28;
    v31 = *((_QWORD *)v28 + 2);
    FigXPCMessageSetCMTime();
    appended = FigXPCMessageSetCFArray();
    if ((_DWORD)appended)
      goto LABEL_32;
    ObjectID = FigXPCMessageSetCFArray();
    if (!(_DWORD)ObjectID)
    {
      ObjectID = FigXPCMessageSetCFArray();
      if (!(_DWORD)ObjectID)
      {
        ObjectID = FigXPCMessageSetCFArray();
        if (!(_DWORD)ObjectID)
          ObjectID = FigXPCRemoteClientSendSyncMessage();
      }
    }
    goto LABEL_29;
  }
  v17 = 0;
  v18 = (const void *)*MEMORY[0x1E0C9B0D0];
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, v17);
    v20 = CFGetTypeID(ValueAtIndex);
    TypeID = CFNullGetTypeID();
    v22 = v18;
    if (v20 == TypeID)
      goto LABEL_18;
    v23 = CFURLGetTypeID();
    if (v23 == CFGetTypeID(ValueAtIndex))
    {
      FigSandboxRegisterURLWithProcessAndCopyRegistration();
      if (value)
        CFSetAddValue(*(CFMutableSetRef *)(DerivedStorage + 16), value);
      v22 = ValueAtIndex;
LABEL_18:
      CFArrayAppendValue(Mutable, v22);
      goto LABEL_23;
    }
    v24 = FigMutableCompositionGetTypeID();
    if (v24 != CFGetTypeID(ValueAtIndex))
      break;
    *(_QWORD *)&v30 = 0;
    if ((_UNKNOWN *)CMBaseObjectGetVTable() != &kFigMutableCompositionRemoteXPC_MutableCompositionVTable)
      break;
    appended = remoteXPCMutableComposition_GetObjectID((uint64_t)ValueAtIndex, &v30);
    if ((_DWORD)appended)
      goto LABEL_32;
    appended = FigCFArrayAppendInt64();
    if ((_DWORD)appended)
      goto LABEL_32;
LABEL_23:
    if (Count == ++v17)
      goto LABEL_24;
  }
  appended = FigSignalErrorAt();
LABEL_32:
  v26 = appended;
  if (Mutable)
LABEL_33:
    CFRelease(Mutable);
LABEL_34:
  FigXPCRelease();
  if (value)
    CFRelease(value);
  FigXPCRemoteClientKillServerOnTimeout();
  return v26;
}

uint64_t remoteXPCMutableComposition_AddAssetForURL(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectID;
  uint64_t v5;
  uint64_t v6;
  uint64_t value;
  uint64_t v9;
  xpc_object_t xdict;

  v9 = 0;
  xdict = 0;
  value = 0;
  if (!a2 || !a3)
  {
    ObjectID = FigSignalErrorAt();
LABEL_11:
    v6 = ObjectID;
    goto LABEL_8;
  }
  ObjectID = remoteXPCMutableComposition_GetObjectID(a1, &v9);
  if ((_DWORD)ObjectID)
    goto LABEL_11;
  CMBaseObjectGetDerivedStorage();
  ObjectID = FigAssetXPCRemoteGetObjectID(a3, &value);
  if ((_DWORD)ObjectID)
    goto LABEL_11;
  v5 = FigXPCCreateBasicMessage();
  if ((_DWORD)v5
    || (xpc_dictionary_set_uint64(xdict, "Asset", value),
        FigSandboxRegisterURLWithProcessAndCopyRegistration(),
        v5 = FigXPCMessageSetCFURL(),
        (_DWORD)v5))
  {
    v6 = v5;
  }
  else
  {
    v6 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_8:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteXPCMutableComposition_InsertMutableCompositionSegmentIntoTrack(uint64_t a1, int a2, const void *a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t ObjectID;
  uint64_t TypeID;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v14 = 0;
  v15 = 0;
  if (!a3
    || *(_QWORD *)(a5 + 16)
    || (*(_DWORD *)(a5 + 12) & 0x1D) != 1
    || *(_QWORD *)(a6 + 16)
    || (*(_DWORD *)(a6 + 12) & 0x1D) != 1
    || *(_QWORD *)(a7 + 16))
  {
    goto LABEL_14;
  }
  ObjectID = remoteXPCMutableComposition_GetObjectID(a1, &v15);
  if ((_DWORD)ObjectID)
  {
LABEL_15:
    v12 = ObjectID;
    goto LABEL_13;
  }
  TypeID = FigMutableCompositionGetTypeID();
  if (TypeID != CFGetTypeID(a3)
    || (_UNKNOWN *)CMBaseObjectGetVTable() != &kFigMutableCompositionRemoteXPC_MutableCompositionVTable)
  {
LABEL_14:
    ObjectID = FigSignalErrorAt();
    goto LABEL_15;
  }
  ObjectID = remoteXPCMutableComposition_GetObjectID((uint64_t)a3, &v14);
  if ((_DWORD)ObjectID)
    goto LABEL_15;
  v12 = FigXPCCreateBasicMessage();
  if (!(_DWORD)v12)
  {
    xpc_dictionary_set_int64(0, "AssetTrackID", a4);
    xpc_dictionary_set_uint64(0, "SourceCompositionID", v14);
    xpc_dictionary_set_int64(0, "DestTrackID", a2);
    FigXPCMessageSetCMTime();
    FigXPCMessageSetCMTime();
    FigXPCMessageSetCMTime();
    v12 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_13:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v12;
}

uint64_t remoteXPCMutableComposition_InsertMutableCompositionSegment(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t ObjectID;
  uint64_t TypeID;
  uint64_t v8;
  uint64_t value;
  uint64_t v11;

  value = 0;
  v11 = 0;
  if (!a2
    || *(_QWORD *)(a3 + 16)
    || (*(_DWORD *)(a3 + 12) & 0x1D) != 1
    || *(_QWORD *)(a4 + 16)
    || (*(_DWORD *)(a4 + 12) & 0x1D) != 1
    || *(_QWORD *)(a5 + 16))
  {
    goto LABEL_14;
  }
  ObjectID = remoteXPCMutableComposition_GetObjectID(a1, &v11);
  if ((_DWORD)ObjectID)
  {
LABEL_15:
    v8 = ObjectID;
    goto LABEL_13;
  }
  TypeID = FigMutableCompositionGetTypeID();
  if (TypeID != CFGetTypeID(a2)
    || (_UNKNOWN *)CMBaseObjectGetVTable() != &kFigMutableCompositionRemoteXPC_MutableCompositionVTable)
  {
LABEL_14:
    ObjectID = FigSignalErrorAt();
    goto LABEL_15;
  }
  ObjectID = remoteXPCMutableComposition_GetObjectID((uint64_t)a2, &value);
  if ((_DWORD)ObjectID)
    goto LABEL_15;
  v8 = FigXPCCreateBasicMessage();
  if (!(_DWORD)v8)
  {
    xpc_dictionary_set_uint64(0, "SourceCompositionID", value);
    FigXPCMessageSetCMTime();
    FigXPCMessageSetCMTime();
    FigXPCMessageSetCMTime();
    v8 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_13:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v8;
}

uint64_t remoteXPCMutableComposition_GetTrackCompatibleWithMutableCompositionTrack(uint64_t a1, const void *a2, int a3, _DWORD *a4)
{
  uint64_t ObjectID;
  uint64_t TypeID;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v11 = 0;
  v12 = 0;
  if (!a2)
    goto LABEL_10;
  ObjectID = remoteXPCMutableComposition_GetObjectID(a1, &v12);
  if ((_DWORD)ObjectID)
  {
LABEL_11:
    v9 = ObjectID;
    goto LABEL_9;
  }
  TypeID = FigMutableCompositionGetTypeID();
  if (TypeID != CFGetTypeID(a2)
    || (_UNKNOWN *)CMBaseObjectGetVTable() != &kFigMutableCompositionRemoteXPC_MutableCompositionVTable)
  {
LABEL_10:
    ObjectID = FigSignalErrorAt();
    goto LABEL_11;
  }
  ObjectID = remoteXPCMutableComposition_GetObjectID((uint64_t)a2, &v11);
  if ((_DWORD)ObjectID)
    goto LABEL_11;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_11;
  xpc_dictionary_set_int64(0, "AssetTrackID", a3);
  xpc_dictionary_set_uint64(0, "SourceCompositionID", v11);
  v9 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!(_DWORD)v9)
    *a4 = xpc_dictionary_get_int64(0, "TrackID");
LABEL_9:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v9;
}

uint64_t remoteXPCMutableComposition_CopyAsset(uint64_t a1, int a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t ObjectID;
  uint64_t uint64;
  uint64_t v8;
  uint64_t v10;
  xpc_object_t v11;
  xpc_object_t xdict;

  v11 = 0;
  xdict = 0;
  v10 = 0;
  if (a4)
  {
    ObjectID = remoteXPCMutableComposition_GetObjectID(a1, &v10);
    if (!(_DWORD)ObjectID)
    {
      ObjectID = FigXPCCreateBasicMessage();
      if (!(_DWORD)ObjectID)
      {
        xpc_dictionary_set_BOOL(xdict, "MakeImmutableSnapshot", a2 != 0);
        ObjectID = FigXPCMessageSetCFDictionary();
        if (!(_DWORD)ObjectID)
        {
          ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
          if (!(_DWORD)ObjectID)
          {
            uint64 = xpc_dictionary_get_uint64(v11, "Asset");
            if (!uint64)
            {
              v8 = 0;
              goto LABEL_10;
            }
            ObjectID = FigAssetXPCRemoteRetainCopiedAsset(uint64, a4);
          }
        }
      }
    }
  }
  else
  {
    ObjectID = FigSignalErrorAt();
  }
  v8 = ObjectID;
LABEL_10:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v8;
}

uint64_t IFFItemHeaderMakerCreateWithIFFItemInformation(const __CFAllocator *a1, const void *a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  CFTypeRef v8;

  if (!a2)
    return FigSignalErrorAt();
  if (!a3)
    return FigSignalErrorAt();
  v6 = CFAllocatorAllocate(a1, 24, 0);
  if (!v6)
    return FigSignalErrorAt();
  v7 = v6;
  *v6 = 0;
  v6[1] = 0;
  v6[2] = 0;
  if (a1)
    v8 = CFRetain(a1);
  else
    v8 = 0;
  *v7 = v8;
  v7[1] = CFRetain(a2);
  *a3 = v7;
  return 0;
}

void IFFItemHeaderMakerRelease(const __CFAllocator **ptr)
{
  const __CFAllocator *v2;
  const __CFAllocator *v3;

  if (ptr)
  {
    v3 = *ptr;
    v2 = ptr[1];
    if (v2)
      CFRelease(v2);
    CFAllocatorDeallocate(v3, ptr);
    if (v3)
      CFRelease(v3);
  }
}

uint64_t IFFItemHeaderMakerSetByteCountToAddToItemLocationExtentOffsets(uint64_t a1, uint64_t a2)
{
  if (!a1)
    return FigSignalErrorAt();
  *(_QWORD *)(a1 + 16) = a2;
  return 0;
}

uint64_t IFFItemHeaderMakerCopyGlobalMetadataAtomAsBlockBuffer(uint64_t a1, const __CFAllocator *a2, uint64_t a3, CMBlockBufferRef *a4)
{
  uint64_t appended;
  CMBlockBufferRef v8;
  uint64_t v9;
  CMBlockBufferRef blockBufferOut;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v15 = 0;
  v13 = 0u;
  v14 = 0u;
  v12 = 0u;
  blockBufferOut = 0;
  if (a1 && FigCFEqual() && a4)
  {
    appended = CMBlockBufferCreateEmpty(a2, 0x20u, 0, &blockBufferOut);
    v8 = blockBufferOut;
    if (!(_DWORD)appended)
    {
      v9 = FigAtomWriterInitWithBlockBuffer();
      if ((_DWORD)v9)
      {
        appended = v9;
        v8 = blockBufferOut;
      }
      else
      {
        appended = appendGlobalMetadataAtom(a1);
        v8 = blockBufferOut;
        if (!(_DWORD)appended)
        {
          *a4 = blockBufferOut;
          return appended;
        }
      }
    }
    if (v8)
      CFRelease(v8);
    return appended;
  }
  return FigSignalErrorAt();
}

uint64_t appendGlobalMetadataAtom(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t PictureCount;
  uint64_t appended;
  uint64_t v5;
  uint64_t ItemHandler;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t ItemAtIndex;
  const __CFArray *ItemCount;
  CFIndex v13;
  unsigned int v14;
  uint64_t v15;
  CFIndex v16;
  size_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  int HasLargeItemReferenceIDs;
  int v22;
  CFIndex v23;
  int8x16_t *v24;
  int8x16_t *v25;
  uint64_t ItemReferencesAtIndex;
  CFIndex v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  int8x16_t *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned __int16 *v36;
  int8x16_t *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t SharedItemPropertyAtIndex;
  const __CFArray *SharedItemPropertyCount;
  const __CFArray *v44;
  CFIndex v45;
  int8x8_t *v46;
  uint64_t ItemPropertyCodecConfiguration;
  _BOOL4 v48;
  _QWORD *v49;
  int IsDisplayModeSwitchInProgress;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  _QWORD *v55;
  unsigned int v56;
  unsigned int v57;
  _QWORD *v58;
  unsigned int v59;
  char v60;
  uint64_t v61;
  uint64_t CFUUIDBytesForItemPropertyType;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char v71;
  CFIndex Length;
  _BOOL4 v73;
  char v74;
  uint64_t v75;
  const char *CStringPtrAndBufferToFree;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  signed int v87;
  _BOOL4 v88;
  _BOOL4 v89;
  _BOOL4 v90;
  _BOOL4 v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  unsigned int v97;
  char v98;
  int32x4_t v99;
  uint64_t v100;
  const __CFArray *v101;
  const __CFArray *v102;
  char v103;
  uint64_t v104;
  CFIndex i;
  uint64_t v106;
  uint64_t v107;
  __int128 *v108;
  __int128 *v109;
  CFIndex v110;
  uint64_t v111;
  uint64_t ItemPropertyByIndex;
  CFIndex ItemPropertyCount;
  uint64_t v114;
  CFIndex v115;
  __int16 v116;
  uint64_t v117;
  uint64_t GroupsList;
  CFIndex Count;
  CFIndex v120;
  CFIndex v121;
  const void *ValueAtIndex;
  const __CFArray *v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  CFIndex v130;
  uint64_t v131;
  const __CFArray *v132;
  const __CFArray *v133;
  CFIndex v134;
  uint64_t ItemExtents;
  uint64_t v136;
  unsigned int v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t AtomDataSize;
  size_t v142;
  _WORD *v143;
  uint64_t v144;
  uint64_t v145;
  _WORD *v146;
  uint64_t v147;
  unsigned __int16 *v148;
  unsigned int v149;
  _OWORD *v150;
  int v151;
  uint64_t v152;
  unint64_t v153;
  int8x16_t v154;
  char *v156;
  _WORD *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  const __CFArray *v164;
  const __CFArray *v165;
  BOOL v166;
  unsigned int v167;
  CFIndex j;
  uint64_t v169;
  int v170;
  int v171;
  __int128 *v173;
  CFIndex v174;
  uint64_t v175;
  uint64_t v176;
  _DWORD *v177;
  const char *v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v183;
  char v184;
  CFIndex v185;
  char v186;
  CFIndex v188;
  char *__s[5];
  __int128 v190;
  uint64_t v191;
  char v192;
  uint64_t v193;
  _OWORD *v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  int8x16_t v198[2];
  _OWORD v199[7];
  char *v200;
  char *v201;
  uint64_t v202;
  int8x16_t v203;
  int8x16_t v204;
  __int128 v205;
  uint64_t v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  uint64_t v210;
  uint64_t v211;

  v211 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  v188 = 0;
  PictureCount = IFFInformationGetPictureCount(v2, 0, &v188);
  if ((_DWORD)PictureCount || (PictureCount = FigAtomWriterBeginAtom(), (_DWORD)PictureCount))
  {
    appended = PictureCount;
    goto LABEL_494;
  }
  appended = FigAtomWriterAppendData();
  if (!(_DWORD)appended && v188 >= 1)
  {
    memset(v199, 0, 24);
    memset(v198, 0, sizeof(v198));
    v5 = *(_QWORD *)(a1 + 8);
    v207 = 0uLL;
    WORD4(v208) = 0;
    *(_QWORD *)&v208 = 0;
    v203.i32[0] = 0;
    ItemHandler = FigAtomWriterInitWithParent();
    if (!(_DWORD)ItemHandler)
    {
      ItemHandler = FigAtomWriterBeginAtom();
      if (!(_DWORD)ItemHandler)
      {
        ItemHandler = IFFInformationGetItemHandler(v5, &v203);
        if (!(_DWORD)ItemHandler)
        {
          LODWORD(v207) = 0;
          DWORD2(v207) = bswap32(v203.u32[0]);
          appended = FigAtomWriterAppendData();
          FigAtomWriterEndAtom();
          if ((_DWORD)appended)
            goto LABEL_494;
          memset(v199, 0, 24);
          memset(v198, 0, sizeof(v198));
          v210 = 0;
          v208 = 0u;
          v209 = 0u;
          v207 = 0u;
          v206 = 0;
          v204 = 0u;
          v205 = 0u;
          v203 = 0u;
          v7 = FigAtomWriterInitWithParent();
          if (!(_DWORD)v7)
          {
            v7 = FigAtomWriterBeginAtom();
            if (!(_DWORD)v7)
            {
              __s[0] = (char *)0x100000000000000;
              v7 = FigAtomWriterInitWithParent();
              if (!(_DWORD)v7)
              {
                v7 = FigAtomWriterBeginAtom();
                if (!(_DWORD)v7)
                {
                  v7 = FigAtomWriterAppendData();
                  if (!(_DWORD)v7)
                  {
                    LODWORD(v190) = 0x1000000;
                    v7 = FigAtomWriterInitWithParent();
                    if (!(_DWORD)v7)
                    {
                      v7 = FigAtomWriterBeginAtom();
                      if (!(_DWORD)v7)
                        v7 = FigAtomWriterAppendData();
                    }
                  }
                }
              }
            }
          }
          appended = v7;
          FigAtomWriterEndAtom();
          FigAtomWriterEndAtom();
          FigAtomWriterEndAtom();
          if ((_DWORD)appended)
            goto LABEL_494;
          memset(v199, 0, 24);
          memset(v198, 0, sizeof(v198));
          v8 = *(_QWORD *)(a1 + 8);
          LOBYTE(__s[0]) = 0;
          v203.i32[0] = 0;
          ItemHandler = IFFInformationGetPrimaryPicture(v8, 0, &v203, __s);
          if (!(_DWORD)ItemHandler)
          {
            if (!LOBYTE(__s[0]))
            {
              FigAtomWriterEndAtom();
              goto LABEL_26;
            }
            ItemHandler = FigAtomWriterInitWithParent();
            if (!(_DWORD)ItemHandler)
            {
              ItemHandler = FigAtomWriterBeginAtom();
              if (!(_DWORD)ItemHandler)
              {
                v9 = bswap32(v203.u32[0]);
                if (HIWORD(v203.i32[0]))
                {
                  LODWORD(v207) = 1;
                  DWORD1(v207) = v9;
                }
                else
                {
                  LODWORD(v207) = 0;
                  WORD2(v207) = HIWORD(v9);
                }
                appended = FigAtomWriterAppendData();
                FigAtomWriterEndAtom();
                if ((_DWORD)appended)
                  goto LABEL_494;
LABEL_26:
                memset(v199, 0, 24);
                memset(v198, 0, sizeof(v198));
                v210 = 0;
                v208 = 0u;
                v209 = 0u;
                v207 = 0u;
                v10 = *(_QWORD *)(a1 + 8);
                ItemAtIndex = FigAtomWriterInitWithParent();
                if ((_DWORD)ItemAtIndex || (ItemAtIndex = FigAtomWriterBeginAtom(), (_DWORD)ItemAtIndex))
                {
LABEL_111:
                  appended = ItemAtIndex;
                }
                else
                {
                  ItemCount = IFFInformationGetItemCount(v10);
                  if ((uint64_t)ItemCount < 1)
                  {
                    v14 = 0;
                  }
                  else
                  {
                    v13 = 0;
                    v14 = 0;
                    do
                    {
                      v203.i64[0] = 0;
                      LODWORD(__s[0]) = 0;
                      LOBYTE(v190) = 0;
                      ItemAtIndex = FigAtomWriterInitWithParent();
                      if ((_DWORD)ItemAtIndex)
                        goto LABEL_111;
                      ItemAtIndex = IFFInformationGetItemAtIndex(v10, v13, &v203, __s, &v190);
                      if ((_DWORD)ItemAtIndex)
                        goto LABEL_111;
                      if ((_BYTE)v190)
                        ++v14;
                      ++v13;
                    }
                    while (ItemCount != (const __CFArray *)v13);
                    if (HIWORD(v14))
                    {
                      v203.i32[0] = 1;
                      v203.i32[1] = bswap32(v14);
                      appended = FigAtomWriterAppendData();
                      if ((_DWORD)appended)
                        goto LABEL_68;
                      goto LABEL_41;
                    }
                  }
                  v203.i32[0] = 0;
                  v203.i16[2] = bswap32(v14) >> 16;
                  v15 = FigAtomWriterAppendData();
                  appended = v15;
                  if ((uint64_t)ItemCount >= 1 && !(_DWORD)v15)
                  {
LABEL_41:
                    v16 = 0;
                    v1 = 1835625829;
                    while (1)
                    {
                      *(_QWORD *)&v190 = 0;
                      LODWORD(v195) = 0;
                      BYTE4(v197) = 0;
                      LOWORD(v191) = 0;
                      LODWORD(v194) = 0;
                      v202 = 0;
                      ItemAtIndex = FigAtomWriterInitWithParent();
                      if ((_DWORD)ItemAtIndex)
                        goto LABEL_111;
                      ItemAtIndex = IFFInformationGetItemAtIndex(v10, v16, &v190, &v195, (_BYTE *)&v197 + 4);
                      if ((_DWORD)ItemAtIndex)
                        goto LABEL_111;
                      if (!BYTE4(v197))
                        goto LABEL_66;
                      ItemAtIndex = FigAtomWriterBeginAtom();
                      if ((_DWORD)ItemAtIndex)
                        goto LABEL_111;
                      ItemAtIndex = IFFInformationGetItemProtectionIndex(v190, &v191);
                      if ((_DWORD)ItemAtIndex)
                        goto LABEL_111;
                      ItemAtIndex = IFFInformationGetItemType(v190, &v194);
                      if ((_DWORD)ItemAtIndex)
                        goto LABEL_111;
                      ItemAtIndex = IFFInformationGetItemName(v190, (const char **)&v202);
                      if ((_DWORD)ItemAtIndex)
                        goto LABEL_111;
                      v17 = strlen((const char *)v202);
                      v18 = IFFInformationIsItemDisplayable(v190) == 0;
                      *(char **)((char *)__s + 5) = 0;
                      __s[0] = 0;
                      *(uint64_t *)((char *)v203.i64 + 7) = 0;
                      v203.i64[0] = 0;
                      if (WORD1(v195))
                      {
                        v203.i64[0] = _byteswap_uint64(__PAIR64__(v18 | 0x3000000u, v195));
                        v203.i16[4] = bswap32((unsigned __int16)v191) >> 16;
                        *(__int32 *)((char *)&v203.i32[2] + 2) = bswap32(v194);
                      }
                      else
                      {
                        LODWORD(__s[0]) = bswap32(v18 | 0x2000000);
                        WORD2(__s[0]) = bswap32(v195) >> 16;
                        HIWORD(__s[0]) = bswap32((unsigned __int16)v191) >> 16;
                        LODWORD(__s[1]) = bswap32(v194);
                        BYTE4(__s[1]) = 0;
                      }
                      ItemAtIndex = FigAtomWriterAppendData();
                      if ((_DWORD)ItemAtIndex)
                        goto LABEL_111;
                      if (v17)
                      {
                        ItemAtIndex = FigAtomWriterAppendData();
                        if ((_DWORD)ItemAtIndex)
                          goto LABEL_111;
                      }
                      if ((_DWORD)v194 == 1970432288)
                      {
                        v201 = 0;
                        ItemAtIndex = IFFInformationGetItemURIType(v190, (const char **)&v201);
                        if ((_DWORD)ItemAtIndex)
                          goto LABEL_111;
                        strlen(v201);
                      }
                      else
                      {
                        if ((_DWORD)v194 != 1835625829)
                          goto LABEL_65;
                        v200 = 0;
                        v201 = 0;
                        ItemAtIndex = IFFInformationGetItemMIMETypeAndEncoding(v190, (const char **)&v201, &v200);
                        if ((_DWORD)ItemAtIndex)
                          goto LABEL_111;
                        strlen(v201);
                        ItemAtIndex = FigAtomWriterAppendData();
                        if ((_DWORD)ItemAtIndex)
                          goto LABEL_111;
                        if (!v200 || strlen(v200) + 1 < 2)
                          goto LABEL_65;
                      }
                      ItemAtIndex = FigAtomWriterAppendData();
                      if ((_DWORD)ItemAtIndex)
                        goto LABEL_111;
LABEL_65:
                      FigAtomWriterEndAtom();
LABEL_66:
                      if (ItemCount == (const __CFArray *)++v16)
                      {
                        appended = 0;
                        break;
                      }
                    }
                  }
                }
LABEL_68:
                FigAtomWriterEndAtom();
                FigAtomWriterEndAtom();
                if ((_DWORD)appended)
                  goto LABEL_494;
                memset(v199, 0, 24);
                memset(v198, 0, sizeof(v198));
                v210 = 0;
                v208 = 0u;
                v209 = 0u;
                v207 = 0u;
                v19 = *(_QWORD *)(a1 + 8);
                LODWORD(v200) = 0;
                if (!IFFInformationHasItemReferences(v19))
                  goto LABEL_110;
                v20 = FigAtomWriterInitWithParent();
                if ((_DWORD)v20
                  || (v20 = FigAtomWriterBeginAtom(), (_DWORD)v20)
                  || (LODWORD(v200) = 0, v20 = FigAtomWriterAppendData(), (_DWORD)v20))
                {
                  appended = v20;
                  v25 = 0;
                  v24 = 0;
                  goto LABEL_114;
                }
                v1 = (uint64_t)IFFInformationGetItemCount(v19);
                HasLargeItemReferenceIDs = IFFInformationHasLargeItemReferenceIDs(v19);
                if (v1 < 1)
                {
LABEL_110:
                  v25 = 0;
                  v24 = 0;
                  appended = 0;
                  goto LABEL_114;
                }
                v22 = HasLargeItemReferenceIDs;
                v23 = 0;
                v24 = 0;
                v25 = 0;
                while (1)
                {
                  __s[0] = 0;
                  LODWORD(v195) = 0;
                  LOBYTE(v191) = 0;
                  ItemReferencesAtIndex = IFFInformationGetItemAtIndex(v19, v23, __s, &v195, &v191);
                  if ((_DWORD)ItemReferencesAtIndex)
                    goto LABEL_113;
                  if ((_BYTE)v191 && (uint64_t)IFFInformationGetItemReferenceCount((uint64_t)__s[0]) >= 1)
                    break;
LABEL_108:
                  if (++v23 == v1)
                  {
                    appended = 0;
                    goto LABEL_114;
                  }
                }
                v27 = 0;
                while (1)
                {
                  LODWORD(v194) = 0;
                  *(_QWORD *)&v190 = 0;
                  v202 = 0;
                  ItemReferencesAtIndex = IFFInformationGetItemReferencesAtIndex((uint64_t)__s[0], v27, &v194, &v190, &v202, 0);
                  if ((_DWORD)ItemReferencesAtIndex)
                    goto LABEL_113;
                  if (WORD1(v190))
                    break;
                  ItemReferencesAtIndex = FigAtomWriterInitWithParent();
                  if ((_DWORD)ItemReferencesAtIndex)
                    goto LABEL_113;
                  ItemReferencesAtIndex = FigAtomWriterBeginAtom();
                  if ((_DWORD)ItemReferencesAtIndex)
                    goto LABEL_113;
                  if (v22)
                  {
                    LODWORD(v201) = bswap32(v195);
                    WORD2(v201) = bswap32((unsigned __int16)v190) >> 16;
                    ItemReferencesAtIndex = FigAtomWriterAppendData();
                    if ((_DWORD)ItemReferencesAtIndex)
                      goto LABEL_113;
                    v28 = v190;
                    if ((uint64_t)v190 < 5)
                    {
                      v25 = &v203;
                      v29 = v190;
                    }
                    else
                    {
                      v25 = (int8x16_t *)malloc_type_malloc(4 * v190, 0x100004052888210uLL);
                      if (!v25)
                        break;
                      v29 = v190;
                    }
                    if (v29 >= 1)
                    {
                      v32 = (unsigned int *)v202;
                      v33 = v25;
                      v34 = v29;
                      do
                      {
                        v35 = *v32++;
                        v33->i32[0] = bswap32(v35);
                        v33 = (int8x16_t *)((char *)v33 + 4);
                        --v34;
                      }
                      while (v34);
                    }
                    ItemReferencesAtIndex = FigAtomWriterAppendData();
                    if ((_DWORD)ItemReferencesAtIndex)
                      goto LABEL_113;
                    if (v28 >= 5)
                    {
                      free(v25);
                      v25 = 0;
                    }
                    goto LABEL_106;
                  }
                  LOWORD(v201) = bswap32((unsigned __int16)v195) >> 16;
                  WORD1(v201) = bswap32((unsigned __int16)v190) >> 16;
                  ItemReferencesAtIndex = FigAtomWriterAppendData();
                  if ((_DWORD)ItemReferencesAtIndex)
                    goto LABEL_113;
                  v30 = v190;
                  if ((uint64_t)v190 < 9)
                  {
                    v24 = &v203;
                    v31 = v190;
                    goto LABEL_100;
                  }
                  v24 = (int8x16_t *)malloc_type_malloc(2 * v190, 0x1000040BDFB0063uLL);
                  if (!v24)
                    break;
                  v31 = v190;
LABEL_100:
                  if (v31 >= 1)
                  {
                    v36 = (unsigned __int16 *)v202;
                    v37 = v24;
                    v38 = v31;
                    do
                    {
                      v39 = *v36;
                      v36 += 2;
                      v37->i16[0] = bswap32(v39) >> 16;
                      v37 = (int8x16_t *)((char *)v37 + 2);
                      --v38;
                    }
                    while (v38);
                  }
                  ItemReferencesAtIndex = FigAtomWriterAppendData();
                  if ((_DWORD)ItemReferencesAtIndex)
                    goto LABEL_113;
                  if (v30 >= 9)
                  {
                    free(v24);
                    v24 = 0;
                  }
LABEL_106:
                  ItemReferencesAtIndex = FigAtomWriterEndAtom();
                  if ((_DWORD)ItemReferencesAtIndex)
                    goto LABEL_113;
                  if (++v27 >= (uint64_t)IFFInformationGetItemReferenceCount((uint64_t)__s[0]))
                    goto LABEL_108;
                }
                ItemReferencesAtIndex = FigSignalErrorAt();
LABEL_113:
                appended = ItemReferencesAtIndex;
LABEL_114:
                FigAtomWriterEndAtom();
                FigAtomWriterEndAtom();
                if (v24 != &v203 && v24)
                  free(v24);
                if (v25 != &v203 && v25)
                  free(v25);
                if ((_DWORD)appended)
                  goto LABEL_494;
                v206 = 0;
                v204 = 0u;
                v205 = 0u;
                v203 = 0u;
                v40 = FigAtomWriterInitWithParent();
                if ((_DWORD)v40 || (v40 = FigAtomWriterBeginAtom(), (_DWORD)v40))
                {
                  appended = v40;
                  goto LABEL_493;
                }
                v210 = 0;
                v208 = 0u;
                v209 = 0u;
                v207 = 0u;
                v41 = *(_QWORD *)(a1 + 8);
                SharedItemPropertyAtIndex = FigAtomWriterInitWithParent();
                if ((_DWORD)SharedItemPropertyAtIndex
                  || (SharedItemPropertyAtIndex = FigAtomWriterBeginAtom(), (_DWORD)SharedItemPropertyAtIndex))
                {
LABEL_360:
                  appended = SharedItemPropertyAtIndex;
                  goto LABEL_402;
                }
                SharedItemPropertyCount = IFFInformationGetSharedItemPropertyCount(v41);
                if ((uint64_t)SharedItemPropertyCount >= 1)
                {
                  v44 = SharedItemPropertyCount;
                  v45 = 0;
                  while (2)
                  {
                    LODWORD(v194) = 0;
                    v195 = 0;
                    SharedItemPropertyAtIndex = IFFInformationGetSharedItemPropertyAtIndex(v41, v45, &v194, &v195);
                    if ((_DWORD)SharedItemPropertyAtIndex)
                      goto LABEL_360;
                    switch((int)v194)
                    {
                      case 1:
                        memset(v199, 0, 24);
                        memset(v198, 0, sizeof(v198));
                        LODWORD(v202) = 0;
                        __s[0] = 0;
                        *(_QWORD *)&v190 = 0;
                        ItemPropertyCodecConfiguration = IFFInformationGetItemPropertyCodecConfiguration(v195, &v202, __s, &v190);
                        if (!(_DWORD)ItemPropertyCodecConfiguration)
                        {
                          ItemPropertyCodecConfiguration = FigAtomWriterInitWithParent();
                          if (!(_DWORD)ItemPropertyCodecConfiguration)
                          {
                            ItemPropertyCodecConfiguration = FigAtomWriterBeginAtom();
                            if (!(_DWORD)ItemPropertyCodecConfiguration)
                              goto LABEL_291;
                          }
                        }
                        goto LABEL_359;
                      case 2:
                        memset(v199, 0, 24);
                        memset(v198, 0, sizeof(v198));
                        LODWORD(__s[1]) = 0;
                        __s[0] = 0;
                        LODWORD(v190) = 0;
                        LODWORD(v202) = 0;
                        ItemPropertyCodecConfiguration = IFFInformationGetItemPropertySpatialExtents(v195, &v190, &v202);
                        if ((_DWORD)ItemPropertyCodecConfiguration)
                          goto LABEL_359;
                        ItemPropertyCodecConfiguration = FigAtomWriterInitWithParent();
                        if ((_DWORD)ItemPropertyCodecConfiguration)
                          goto LABEL_359;
                        ItemPropertyCodecConfiguration = FigAtomWriterBeginAtom();
                        if ((_DWORD)ItemPropertyCodecConfiguration)
                          goto LABEL_359;
                        LODWORD(__s[0]) = 0;
                        HIDWORD(__s[0]) = bswap32(v190);
                        LODWORD(__s[1]) = bswap32(v202);
                        goto LABEL_291;
                      case 3:
                        memset(v199, 0, 24);
                        memset(v198, 0, sizeof(v198));
                        __s[0] = 0;
                        LODWORD(v190) = 0;
                        LODWORD(v202) = 0;
                        ItemPropertyCodecConfiguration = IFFInformationGetItemPropertySpatialExtents(v195, &v190, &v202);
                        if ((_DWORD)ItemPropertyCodecConfiguration)
                          goto LABEL_359;
                        ItemPropertyCodecConfiguration = FigAtomWriterInitWithParent();
                        if ((_DWORD)ItemPropertyCodecConfiguration)
                          goto LABEL_359;
                        ItemPropertyCodecConfiguration = FigAtomWriterBeginAtom();
                        if ((_DWORD)ItemPropertyCodecConfiguration)
                          goto LABEL_359;
                        __s[0] = (char *)_byteswap_uint64(__PAIR64__(v190, v202));
                        goto LABEL_291;
                      case 4:
                        v58 = (_QWORD *)v195;
                        v59 = 1852009592;
                        goto LABEL_188;
                      case 5:
                        v58 = (_QWORD *)v195;
                        v59 = 1886547814;
LABEL_188:
                        SharedItemPropertyAtIndex = appendItemPropertyColorInformationAtom((uint64_t)v58, v59);
                        if ((_DWORD)SharedItemPropertyAtIndex)
                          goto LABEL_360;
                        goto LABEL_295;
                      case 6:
                        memset(v199, 0, 24);
                        memset(v198, 0, sizeof(v198));
                        ItemPropertyCodecConfiguration = FigAtomWriterInitWithParent();
                        if (!(_DWORD)ItemPropertyCodecConfiguration)
                        {
                          ItemPropertyCodecConfiguration = FigAtomWriterBeginAtom();
                          if (!(_DWORD)ItemPropertyCodecConfiguration)
                            goto LABEL_291;
                        }
                        goto LABEL_359;
                      case 7:
                        memset(v199, 0, 24);
                        memset(v198, 0, sizeof(v198));
                        ItemPropertyCodecConfiguration = FigAtomWriterInitWithParent();
                        if (!(_DWORD)ItemPropertyCodecConfiguration)
                        {
                          ItemPropertyCodecConfiguration = FigAtomWriterBeginAtom();
                          if (!(_DWORD)ItemPropertyCodecConfiguration)
                            goto LABEL_291;
                        }
                        goto LABEL_359;
                      case 8:
                        v85 = v195;
                        memset(v199, 0, 24);
                        memset(v198, 0, sizeof(v198));
                        ItemPropertyCodecConfiguration = FigAtomWriterInitWithParent();
                        if (!(_DWORD)ItemPropertyCodecConfiguration)
                        {
                          ItemPropertyCodecConfiguration = FigAtomWriterBeginAtom();
                          if (!(_DWORD)ItemPropertyCodecConfiguration)
                          {
                            v86 = *(unsigned __int8 *)(v85 + 40);
                            LOBYTE(__s[0]) = 0;
                            ItemPropertyCodecConfiguration = IFFItemPropertyGetCCLVDataLength(v86, __s);
                            if (!(_DWORD)ItemPropertyCodecConfiguration)
                              goto LABEL_291;
                          }
                        }
                        goto LABEL_359;
                      case 9:
                        memset(v199, 0, 24);
                        memset(v198, 0, sizeof(v198));
                        ItemPropertyCodecConfiguration = FigAtomWriterInitWithParent();
                        if (!(_DWORD)ItemPropertyCodecConfiguration)
                        {
                          ItemPropertyCodecConfiguration = FigAtomWriterBeginAtom();
                          if (!(_DWORD)ItemPropertyCodecConfiguration)
                            goto LABEL_291;
                        }
                        goto LABEL_359;
                      case 10:
                        memset(v199, 0, 24);
                        memset(v198, 0, sizeof(v198));
                        memset(__s, 0, 32);
                        *(_QWORD *)&v190 = 0;
                        v201 = 0;
                        v202 = 0;
                        v200 = 0;
                        ItemPropertyCodecConfiguration = IFFInformationGetItemPropertyCleanAperture((_QWORD *)v195, &v190, &v202, &v201, &v200);
                        if ((_DWORD)ItemPropertyCodecConfiguration)
                          goto LABEL_359;
                        ItemPropertyCodecConfiguration = FigAtomWriterInitWithParent();
                        if ((_DWORD)ItemPropertyCodecConfiguration)
                          goto LABEL_359;
                        ItemPropertyCodecConfiguration = FigAtomWriterBeginAtom();
                        if ((_DWORD)ItemPropertyCodecConfiguration)
                          goto LABEL_359;
                        v77 = v190;
                        v78 = bswap32(DWORD1(v190));
                        *(_QWORD *)&v190 = __rev32(v190);
                        v79 = bswap32(HIDWORD(v202));
                        v80 = bswap32(v202);
                        v202 = __rev32(v202);
                        v81 = v200;
                        v82 = bswap32(HIDWORD(v201));
                        v83 = bswap32(v201);
                        v84 = bswap32(HIDWORD(v200));
                        v200 = (char *)__rev32((unint64_t)v200);
                        v201 = (char *)__rev32((unint64_t)v201);
                        __s[0] = (char *)__PAIR64__(v78, bswap32(v77));
                        __s[1] = (char *)__PAIR64__(v79, v80);
                        __s[2] = (char *)__PAIR64__(v82, v83);
                        __s[3] = (char *)__PAIR64__(v84, bswap32(v81));
                        goto LABEL_291;
                      case 11:
                        memset(v199, 0, 24);
                        memset(v198, 0, sizeof(v198));
                        LOBYTE(v190) = 0;
                        LODWORD(__s[0]) = 0;
                        ItemPropertyCodecConfiguration = IFFInformationGetItemPropertyRotationDegreesCCW(v195, __s);
                        if ((_DWORD)ItemPropertyCodecConfiguration)
                          goto LABEL_359;
                        v87 = (signed int)__s[0];
                        if (((uint64_t)__s[0] & 0x80000000) != 0)
                          v87 = LODWORD(__s[0]) + 360 * vcvtps_s32_f32((float)SLODWORD(__s[0]) / -360.0);
                        LODWORD(__s[0]) = v87 % 360;
                        if ((unsigned __int16)(((20389 * (unsigned __int16)(v87 % 360) + 728) << 15) | ((unsigned __int16)(20389 * (v87 % 360) + 728) >> 1)) >= 0x2D9u)
                          goto LABEL_304;
                        ItemPropertyCodecConfiguration = FigAtomWriterInitWithParent();
                        if ((_DWORD)ItemPropertyCodecConfiguration)
                          goto LABEL_359;
                        ItemPropertyCodecConfiguration = FigAtomWriterBeginAtom();
                        if ((_DWORD)ItemPropertyCodecConfiguration)
                          goto LABEL_359;
                        v60 = (SLOBYTE(__s[0]) / 90) & 3;
                        goto LABEL_231;
                      case 12:
                        memset(v199, 0, 24);
                        memset(v198, 0, sizeof(v198));
                        LOBYTE(v190) = 0;
                        LODWORD(__s[0]) = 0;
                        ItemPropertyCodecConfiguration = IFFInformationGetItemPropertyRotationDegreesCCW(v195, __s);
                        if ((_DWORD)ItemPropertyCodecConfiguration)
                          goto LABEL_359;
                        if (LODWORD(__s[0]) >= 2)
                          goto LABEL_304;
                        ItemPropertyCodecConfiguration = FigAtomWriterInitWithParent();
                        if ((_DWORD)ItemPropertyCodecConfiguration)
                          goto LABEL_359;
                        ItemPropertyCodecConfiguration = FigAtomWriterBeginAtom();
                        if ((_DWORD)ItemPropertyCodecConfiguration)
                          goto LABEL_359;
                        v60 = (uint64_t)__s[0] & 1;
LABEL_231:
                        LOBYTE(v190) = v60;
                        goto LABEL_291;
                      case 13:
                        memset(v199, 0, 24);
                        memset(v198, 0, sizeof(v198));
                        __s[0] = 0;
                        *(_QWORD *)&v190 = 0;
                        v202 = 0;
                        ItemPropertyCodecConfiguration = IFFInformationGetItemPropertyAuxiliaryType((_QWORD *)v195, __s, &v190, &v202);
                        if ((_DWORD)ItemPropertyCodecConfiguration)
                          goto LABEL_359;
                        if (!__s[0])
                        {
LABEL_304:
                          v52 = FigSignalErrorAt();
                          goto LABEL_292;
                        }
                        ItemPropertyCodecConfiguration = FigAtomWriterInitWithParent();
                        if ((_DWORD)ItemPropertyCodecConfiguration
                          || (ItemPropertyCodecConfiguration = FigAtomWriterBeginAtom(),
                              (_DWORD)ItemPropertyCodecConfiguration)
                          || (LODWORD(v201) = 0,
                              ItemPropertyCodecConfiguration = FigAtomWriterAppendData(),
                              (_DWORD)ItemPropertyCodecConfiguration)
                          || (strlen(__s[0]),
                              ItemPropertyCodecConfiguration = FigAtomWriterAppendData(),
                              (_DWORD)ItemPropertyCodecConfiguration))
                        {
LABEL_359:
                          appended = ItemPropertyCodecConfiguration;
                          goto LABEL_355;
                        }
                        if ((_QWORD)v190 && v202)
                          goto LABEL_291;
                        goto LABEL_285;
                      case 14:
                        memset(v199, 0, 24);
                        memset(v198, 0, sizeof(v198));
                        LOBYTE(v202) = 0;
                        __s[0] = 0;
                        ItemPropertyCodecConfiguration = IFFInformationGetItemPropertyPixelInformation(v195, &v202, __s);
                        if (!(_DWORD)ItemPropertyCodecConfiguration)
                        {
                          ItemPropertyCodecConfiguration = FigAtomWriterInitWithParent();
                          if (!(_DWORD)ItemPropertyCodecConfiguration)
                          {
                            ItemPropertyCodecConfiguration = FigAtomWriterBeginAtom();
                            if (!(_DWORD)ItemPropertyCodecConfiguration)
                            {
                              LODWORD(v190) = 0;
                              ItemPropertyCodecConfiguration = FigAtomWriterAppendData();
                              if (!(_DWORD)ItemPropertyCodecConfiguration)
                              {
                                ItemPropertyCodecConfiguration = FigAtomWriterAppendData();
                                if (!(_DWORD)ItemPropertyCodecConfiguration)
                                  goto LABEL_291;
                              }
                            }
                          }
                        }
                        goto LABEL_359;
                      case 15:
                      case 16:
                        v198[0].i32[0] = bswap32(*(_DWORD *)(v195 + 40));
                        SharedItemPropertyAtIndex = _appendUUIDItemPropertyHelper(v195, (uint64_t)&v207, (uint64_t)v198);
                        if ((_DWORD)SharedItemPropertyAtIndex)
                          goto LABEL_360;
                        goto LABEL_295;
                      case 17:
                        v46 = (int8x8_t *)v195;
                        memset(v199, 0, 24);
                        memset(v198, 0, sizeof(v198));
                        ItemPropertyCodecConfiguration = FigAtomWriterInitWithParent();
                        if ((_DWORD)ItemPropertyCodecConfiguration)
                          goto LABEL_359;
                        __s[0] = 0;
                        __s[1] = 0;
                        ItemPropertyCodecConfiguration = IFFInformationGetCFUUIDBytesForItemPropertyType(v46[1].i32[0], __s);
                        if ((_DWORD)ItemPropertyCodecConfiguration)
                          goto LABEL_359;
                        ItemPropertyCodecConfiguration = FigAtomWriterBeginUUIDAtom();
                        if ((_DWORD)ItemPropertyCodecConfiguration)
                          goto LABEL_359;
                        if (v46[5].i32[0])
                          v48 = 1;
                        else
                          v48 = v46[9].i8[0] != 0;
                        if (v46[5].i32[1])
                          v88 = 1;
                        else
                          v88 = v46[9].i8[0] != 0;
                        if (v46[6].i32[0])
                          v89 = 1;
                        else
                          v89 = v46[9].i8[0] != 0;
                        v90 = v46[6].i32[1] || v46[7].i32[0] || v46[7].i32[1] || v46[9].i8[0] != 0;
                        v91 = v46[8].i8[0] != 0;
                        if (!v46[8].i8[0] && v90)
                          v91 = v46[9].i8[0] != 0;
                        if (v46[8].i32[1])
                        {
                          if (v88)
                            v92 = 2;
                          else
                            v92 = 0;
                          if (v89)
                            v93 = 4;
                          else
                            v93 = 0;
                          if (v90)
                            v94 = 8;
                          else
                            v94 = 0;
                          if (v91)
                            v95 = 16;
                          else
                            v95 = 0;
LABEL_273:
                          v96 = 32;
                          v186 = 1;
                          goto LABEL_274;
                        }
                        v96 = v46[9].u8[0];
                        if (v88)
                          v92 = 2;
                        else
                          v92 = 0;
                        if (v89)
                          v93 = 4;
                        else
                          v93 = 0;
                        if (v90)
                          v94 = 8;
                        else
                          v94 = 0;
                        if (v91)
                          v95 = 16;
                        else
                          v95 = 0;
                        if (v46[9].i8[0])
                          goto LABEL_273;
                        v186 = 0;
LABEL_274:
                        LODWORD(v202) = (v94 | v92 | v48 | v96 | v95 | v93) << 24;
                        v75 = FigAtomWriterAppendData();
                        if ((_DWORD)v75
                          || v48
                          && (LODWORD(__s[0]) = bswap32(v46[5].u32[0]), v75 = FigAtomWriterAppendData(), (_DWORD)v75)
                          || v88
                          && (LODWORD(__s[0]) = bswap32(v46[5].u32[1]), v75 = FigAtomWriterAppendData(), (_DWORD)v75)
                          || v89
                          && (LODWORD(__s[0]) = bswap32(v46[6].u32[0]), v75 = FigAtomWriterAppendData(), (_DWORD)v75))
                        {
LABEL_354:
                          appended = v75;
LABEL_355:
                          FigAtomWriterEndAtom();
                          goto LABEL_402;
                        }
                        if (v90)
                        {
                          WORD2(v190) = 0;
                          LODWORD(v190) = 0;
                          LODWORD(__s[1]) = 0;
                          __s[0] = 0;
                          v1 = (uint64_t)&jpt_192E54E58;
                          v97 = bswap32(v46[6].u32[1]);
                          if (v91)
                          {
                            LODWORD(__s[0]) = v97;
                            *(int8x8_t *)((char *)__s + 4) = vrev32_s8(v46[7]);
                          }
                          else
                          {
                            LOWORD(v190) = HIWORD(v97);
                            WORD1(v190) = bswap32(v46[7].u16[0]) >> 16;
                            WORD2(v190) = bswap32(v46[7].u16[2]) >> 16;
                          }
                          appended = FigAtomWriterAppendData();
                          v98 = v186;
                          if ((_DWORD)appended)
                            v98 = 0;
                          if ((v98 & 1) == 0)
                            goto LABEL_293;
                        }
                        else
                        {
                          v1 = (uint64_t)&jpt_192E54E58;
                          if ((v186 & 1) == 0)
                          {
LABEL_285:
                            FigAtomWriterEndAtom();
                            goto LABEL_295;
                          }
                        }
                        LODWORD(__s[0]) = bswap32(v46[8].u32[1]);
LABEL_291:
                        v52 = FigAtomWriterAppendData();
LABEL_292:
                        appended = v52;
LABEL_293:
                        FigAtomWriterEndAtom();
LABEL_294:
                        if ((_DWORD)appended)
                          goto LABEL_402;
LABEL_295:
                        if ((const __CFArray *)++v45 == v44)
                          break;
                        continue;
                      case 18:
                        v61 = v195;
                        memset(v199, 0, 24);
                        memset(v198, 0, sizeof(v198));
                        CFUUIDBytesForItemPropertyType = FigAtomWriterInitWithParent();
                        if ((_DWORD)CFUUIDBytesForItemPropertyType)
                          goto LABEL_305;
                        v63 = *(unsigned __int8 *)(v61 + 61);
                        if (v63 >= 0x20)
                          goto LABEL_186;
                        v64 = (*(_BYTE *)(v61 + 60) != 0) | (v63 << 8);
                        if (!*(_BYTE *)(v61 + 60))
                          goto LABEL_299;
                        v65 = *(unsigned __int8 *)(v61 + 62);
                        if (v65 >= 0x20)
                        {
LABEL_186:
                          appended = FigSignalErrorAt();
                          goto LABEL_294;
                        }
                        v64 |= v65 << 16;
LABEL_299:
                        LODWORD(__s[0]) = bswap32(v64);
                        v99 = (int32x4_t)vrev32q_s8(*(int8x16_t *)(v61 + 40));
                        *(int32x4_t *)((char *)__s + 4) = vuzp1q_s32(v99, (int32x4_t)vextq_s8((int8x16_t)v99, (int8x16_t)v99, 0xCuLL));
                        HIDWORD(__s[2]) = bswap32(*(_DWORD *)(v61 + 56));
                        v190 = 0uLL;
                        CFUUIDBytesForItemPropertyType = IFFInformationGetCFUUIDBytesForItemPropertyType(*(_DWORD *)(v61 + 8), &v190);
                        if ((_DWORD)CFUUIDBytesForItemPropertyType)
                        {
LABEL_305:
                          appended = CFUUIDBytesForItemPropertyType;
                          goto LABEL_293;
                        }
                        v52 = FigAtomWriterBeginUUIDAtom();
                        if ((_DWORD)v52)
                          goto LABEL_292;
                        goto LABEL_291;
                      case 19:
                        v49 = (_QWORD *)v195;
                        IsDisplayModeSwitchInProgress = FPSupport_IsDisplayModeSwitchInProgress();
                        memset(v199, 0, 24);
                        memset(v198, 0, sizeof(v198));
                        v51 = bswap32(*((_DWORD *)v49 + 10));
                        LODWORD(v190) = v51;
                        if (!IsDisplayModeSwitchInProgress)
                        {
                          v52 = _appendUUIDItemPropertyHelper((uint64_t)v49, (uint64_t)&v207, (uint64_t)&v190);
                          goto LABEL_292;
                        }
                        LODWORD(__s[0]) = 0;
                        HIDWORD(__s[0]) = v51;
                        v52 = FigAtomWriterInitWithParent();
                        if ((_DWORD)v52)
                          goto LABEL_292;
                        v52 = FigAtomWriterBeginAtom();
                        if ((_DWORD)v52)
                          goto LABEL_292;
                        goto LABEL_291;
                      case 20:
                        v66 = v195;
                        memset(v199, 0, 24);
                        memset(v198, 0, sizeof(v198));
                        ItemPropertyCodecConfiguration = FigAtomWriterInitWithParent();
                        if ((_DWORD)ItemPropertyCodecConfiguration)
                          goto LABEL_359;
                        __s[0] = 0;
                        __s[1] = 0;
                        ItemPropertyCodecConfiguration = IFFInformationGetCFUUIDBytesForItemPropertyType(*(_DWORD *)(v66 + 8), __s);
                        if ((_DWORD)ItemPropertyCodecConfiguration)
                          goto LABEL_359;
                        ItemPropertyCodecConfiguration = FigAtomWriterBeginUUIDAtom();
                        if ((_DWORD)ItemPropertyCodecConfiguration)
                          goto LABEL_359;
                        LODWORD(v190) = 0;
                        ItemPropertyCodecConfiguration = FigAtomWriterAppendData();
                        if ((_DWORD)ItemPropertyCodecConfiguration)
                          goto LABEL_359;
                        LOBYTE(v201) = *(_BYTE *)(v66 + 40) - 1;
                        ItemPropertyCodecConfiguration = FigAtomWriterAppendData();
                        if ((_DWORD)ItemPropertyCodecConfiguration)
                          goto LABEL_359;
                        v67 = v1;
                        v68 = 0;
                        v69 = -1;
                        do
                        {
                          LOWORD(v202) = 0;
                          v70 = *(_QWORD *)(v66 + 48) + v68;
                          LOBYTE(v202) = *(_BYTE *)v70;
                          v71 = *(_BYTE *)(v70 + 1);
                          BYTE1(v202) = v71;
                          if (*(_QWORD *)(v70 + 8))
                          {
                            Length = CFStringGetLength(*(CFStringRef *)(v70 + 8));
                            v73 = Length > 0;
                            if (Length <= 0)
                              v74 = 0;
                            else
                              v74 = 0x80;
                            v71 = BYTE1(v202);
                          }
                          else
                          {
                            v73 = 0;
                            v74 = 0;
                          }
                          BYTE1(v202) = v74 | v71;
                          v75 = FigAtomWriterAppendData();
                          if ((_DWORD)v75)
                            goto LABEL_354;
                          if (v73)
                          {
                            __s[0] = 0;
                            CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
                            strlen(CStringPtrAndBufferToFree);
                            appended = FigAtomWriterAppendData();
                            free(__s[0]);
                            if ((_DWORD)appended)
                              goto LABEL_355;
                          }
                          ++v69;
                          v68 += 16;
                        }
                        while (v69 < v201);
                        FigAtomWriterEndAtom();
                        v1 = v67;
                        goto LABEL_295;
                      case 21:
                        memset(v199, 0, 24);
                        memset(v198, 0, sizeof(v198));
                        LOWORD(__s[0]) = bswap32(*(unsigned __int16 *)(v195 + 40)) >> 16;
                        ItemPropertyCodecConfiguration = FigAtomWriterInitWithParent();
                        if (!(_DWORD)ItemPropertyCodecConfiguration)
                        {
                          ItemPropertyCodecConfiguration = FigAtomWriterBeginAtom();
                          if (!(_DWORD)ItemPropertyCodecConfiguration)
                            goto LABEL_291;
                        }
                        goto LABEL_359;
                      case 23:
                        v53 = 0;
                        memset(v199, 0, 24);
                        memset(v198, 0, sizeof(v198));
                        *(_DWORD *)((char *)&__s[1] + 1) = 0;
                        *(char **)((char *)__s + 1) = 0;
                        *(_WORD *)((char *)&v190 + 5) = 0;
                        *(_DWORD *)((char *)&v190 + 1) = 0;
                        v54 = 1;
                        LOBYTE(__s[0]) = 1;
                        v55 = (_QWORD *)(v195 + 40);
                        LOBYTE(v190) = 0;
                        do
                        {
                          v56 = *((_DWORD *)v55 + v53);
                          v57 = bswap32(v56);
                          *(_DWORD *)((char *)__s + 4 * v53 + 1) = v57;
                          *(_WORD *)((char *)&v190 + 2 * v53 + 1) = HIWORD(v57);
                          v54 &= v56 < 0x10000;
                          ++v53;
                        }
                        while (v53 != 3);
                        ItemPropertyCodecConfiguration = FigAtomWriterInitWithParent();
                        if (!(_DWORD)ItemPropertyCodecConfiguration)
                        {
                          ItemPropertyCodecConfiguration = FigAtomWriterBeginAtom();
                          if (!(_DWORD)ItemPropertyCodecConfiguration)
                            goto LABEL_291;
                        }
                        goto LABEL_359;
                      default:
                        appended = FigSignalErrorAt();
                        FigAtomWriterEndAtom();
                        if ((_DWORD)appended)
                          goto LABEL_493;
                        goto LABEL_307;
                    }
                    break;
                  }
                }
                FigAtomWriterEndAtom();
LABEL_307:
                memset(v199, 0, 24);
                memset(v198, 0, sizeof(v198));
                __s[0] = 0;
                v100 = *(_QWORD *)(a1 + 8);
                v101 = IFFInformationGetItemCount(v100);
                if ((uint64_t)v101 < 1)
                {
                  v108 = 0;
                  v109 = 0;
                  appended = 0;
                }
                else
                {
                  v102 = v101;
                  v103 = 0;
                  v104 = 0;
                  for (i = 0; (const __CFArray *)i != v102; ++i)
                  {
                    *(_QWORD *)&v207 = 0;
                    LOBYTE(v202) = 0;
                    LODWORD(v190) = 0;
                    v106 = IFFInformationGetItemAtIndex(v100, i, &v207, &v190, &v202);
                    if ((_DWORD)v106)
                      goto LABEL_321;
                    if ((_BYTE)v202 || *(_BYTE *)(v207 + 17))
                    {
                      if (WORD1(v190))
                        v103 = 1;
                      if (IFFInformationGetItemPropertyCount(v207) > 0)
                        ++v104;
                    }
                  }
                  if (v104 < 1)
                  {
                    v108 = 0;
                    v109 = 0;
                    appended = 0;
                    goto LABEL_368;
                  }
                  v107 = (uint64_t)IFFInformationGetSharedItemPropertyCount(v100);
                  v106 = FigAtomWriterInitWithParent();
                  if (!(_DWORD)v106)
                  {
                    v106 = FigAtomWriterBeginAtom();
                    if (!(_DWORD)v106)
                    {
                      __s[0] = (char *)_byteswap_uint64(__PAIR64__((v107 > 128) | ((v103 != 0) << 24), v104));
                      v106 = FigAtomWriterAppendData();
                      if (!(_DWORD)v106)
                      {
                        v109 = 0;
                        v108 = 0;
                        v110 = 0;
                        v184 = v107 > 128;
                        v111 = 0x10000;
                        if (v107 > 128)
                          v111 = 256;
                        v185 = v111;
                        while (1)
                        {
                          *(_QWORD *)&v190 = 0;
                          LOBYTE(v195) = 0;
                          LODWORD(v200) = 0;
                          ItemPropertyByIndex = IFFInformationGetItemAtIndex(v100, v110, &v190, &v200, &v195);
                          if ((_DWORD)ItemPropertyByIndex)
                            goto LABEL_367;
                          if ((_BYTE)v195 || *(_BYTE *)(v190 + 17))
                          {
                            ItemPropertyCount = IFFInformationGetItemPropertyCount(v190);
                            if (ItemPropertyCount)
                            {
                              v114 = ItemPropertyCount;
                              if (ItemPropertyCount >= v185)
                                goto LABEL_366;
                              if (v103)
                              {
                                LODWORD(v202) = bswap32(v200);
                                BYTE4(v202) = ItemPropertyCount;
                              }
                              else
                              {
                                LOWORD(v202) = bswap32((unsigned __int16)v200) >> 16;
                                BYTE2(v202) = ItemPropertyCount;
                              }
                              ItemPropertyByIndex = FigAtomWriterAppendData();
                              if ((_DWORD)ItemPropertyByIndex)
                                goto LABEL_367;
                              if (v107 <= 128)
                              {
                                if (v114 >= 17)
                                {
                                  v109 = (__int128 *)malloc_type_malloc(v114 << v184, 0xB0834502uLL);
                                  if (v109)
                                    goto LABEL_345;
LABEL_366:
                                  ItemPropertyByIndex = FigSignalErrorAt();
LABEL_367:
                                  appended = ItemPropertyByIndex;
                                  goto LABEL_368;
                                }
                                v109 = &v207;
                              }
                              else
                              {
                                if (v114 >= 9)
                                {
                                  v108 = (__int128 *)malloc_type_malloc(v114 << v184, 0x6668EE7AuLL);
                                  if (!v108)
                                    goto LABEL_366;
LABEL_345:
                                  v115 = 0;
                                  while (1)
                                  {
                                    v201 = 0;
                                    v202 = 0;
                                    LOBYTE(v194) = 0;
                                    ItemPropertyByIndex = IFFInformationGetItemPropertyByIndex(v190, v115, &v202, &v194, &v201);
                                    if ((_DWORD)ItemPropertyByIndex)
                                      goto LABEL_367;
                                    v116 = (_WORD)v201 + 1;
                                    if (v107 <= 128)
                                      *((_BYTE *)v109 + v115) = v116 & 0x7F | ((v194 != 0) << 7);
                                    else
                                      *((_WORD *)v108 + v115) = __rev16(v116 & 0x7FFF | ((v194 != 0) << 15));
                                    if (v114 == ++v115)
                                      goto LABEL_351;
                                  }
                                }
                                v108 = &v207;
                              }
                              if (v114 >= 1)
                                goto LABEL_345;
LABEL_351:
                              ItemPropertyByIndex = FigAtomWriterAppendData();
                              if ((_DWORD)ItemPropertyByIndex)
                                goto LABEL_367;
                            }
                          }
                          if ((const __CFArray *)++v110 == v102)
                          {
                            appended = 0;
                            goto LABEL_368;
                          }
                        }
                      }
                    }
                  }
LABEL_321:
                  appended = v106;
                  v108 = 0;
                  v109 = 0;
                }
LABEL_368:
                FigAtomWriterEndAtom();
                if (v109 != &v207 && v109)
                  free(v109);
                if (v108 != &v207 && v108)
                  free(v108);
                FigAtomWriterEndAtom();
                if ((_DWORD)appended)
                  goto LABEL_494;
                v210 = 0;
                v208 = 0u;
                v209 = 0u;
                v207 = 0u;
                v117 = *(_QWORD *)(a1 + 8);
                __s[0] = 0;
                GroupsList = IFFInformationGetGroupsList(v117, __s);
                if ((_DWORD)GroupsList)
                  goto LABEL_537;
                if (__s[0])
                {
                  Count = CFArrayGetCount((CFArrayRef)__s[0]);
                  if (Count >= 1)
                  {
                    v120 = Count;
                    GroupsList = FigAtomWriterInitWithParent();
                    if (!(_DWORD)GroupsList)
                    {
                      GroupsList = FigAtomWriterBeginAtom();
                      if (!(_DWORD)GroupsList)
                      {
                        v121 = 0;
                        while (1)
                        {
                          ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)__s[0], v121);
                          memset(v199, 0, 24);
                          memset(v198, 0, sizeof(v198));
                          v203.i32[2] = 0;
                          v203.i64[0] = 0;
                          v123 = (const __CFArray *)*((_QWORD *)ValueAtIndex + 6);
                          if (!v123 || (v124 = CFArrayGetCount(v123), (v125 = v124) == 0))
                          {
LABEL_396:
                            FigAtomWriterEndAtom();
                            goto LABEL_397;
                          }
                          v126 = v124;
                          if (*((_DWORD *)ValueAtIndex + 6) != 1937007986)
                            goto LABEL_389;
                          if ((v124 & 0xFFFFFFFE) == 2)
                            break;
LABEL_399:
                          appended = FigSignalErrorAt();
                          FigAtomWriterEndAtom();
                          if ((_DWORD)appended)
                            goto LABEL_493;
LABEL_397:
                          if (++v121 == v120)
                            goto LABEL_403;
                        }
                        if (v124 == 3)
                        {
                          v127 = *((_DWORD *)ValueAtIndex + 8);
                          v128 = FigAtomWriterInitWithParent();
                          if ((_DWORD)v128)
                            goto LABEL_539;
                          v128 = FigAtomWriterBeginUUIDAtom();
                          if ((_DWORD)v128)
                            goto LABEL_539;
LABEL_392:
                          v203.i64[0] = __PAIR64__(bswap32(*((_DWORD *)ValueAtIndex + 4)), bswap32(v127 & 0xFFFFFF));
                          v203.i32[2] = bswap32(v126);
                          v128 = FigAtomWriterAppendData();
                          if ((_DWORD)v128)
                            goto LABEL_539;
                          v130 = 0;
                          while (1)
                          {
                            LODWORD(v190) = bswap32(*((_DWORD *)CFArrayGetValueAtIndex(*((CFArrayRef *)ValueAtIndex + 6), v130)+ 10));
                            v129 = FigAtomWriterAppendData();
                            if ((_DWORD)v129)
                              goto LABEL_401;
                            if (v125 == ++v130)
                              goto LABEL_396;
                          }
                        }
LABEL_389:
                        if (!((unint64_t)v124 >> 31))
                        {
                          v129 = FigAtomWriterInitWithParent();
                          if (!(_DWORD)v129)
                          {
                            v128 = FigAtomWriterBeginAtom();
                            v127 = 0;
                            if (!(_DWORD)v128)
                              goto LABEL_392;
LABEL_539:
                            appended = v128;
LABEL_402:
                            FigAtomWriterEndAtom();
LABEL_493:
                            FigAtomWriterEndAtom();
                            goto LABEL_494;
                          }
LABEL_401:
                          appended = v129;
                          goto LABEL_402;
                        }
                        goto LABEL_399;
                      }
                    }
LABEL_537:
                    appended = GroupsList;
                    goto LABEL_493;
                  }
                }
LABEL_403:
                FigAtomWriterEndAtom();
                v210 = 0;
                v208 = 0u;
                v209 = 0u;
                v207 = 0u;
                v131 = *(_QWORD *)(a1 + 8);
                if (!IFFInformationUsesItemExtentConstructionMethod(v131))
                  goto LABEL_475;
                GroupsList = FigAtomWriterInitWithParent();
                if ((_DWORD)GroupsList)
                  goto LABEL_537;
                GroupsList = FigAtomWriterBeginAtom();
                if ((_DWORD)GroupsList)
                  goto LABEL_537;
                v132 = IFFInformationGetItemCount(v131);
                if ((uint64_t)v132 < 1)
                {
LABEL_475:
                  FigAtomWriterEndAtom();
                  goto LABEL_476;
                }
                v133 = v132;
                v134 = 0;
                while (1)
                {
                  v193 = 0;
                  v194 = 0;
                  v192 = 0;
                  v191 = 0;
                  ItemExtents = IFFInformationGetItemAtIndex(v131, v134, &v194, 0, &v192);
                  if ((_DWORD)ItemExtents)
                  {
LABEL_492:
                    appended = ItemExtents;
                    goto LABEL_493;
                  }
                  if (v192)
                  {
                    ItemExtents = IFFInformationGetItemExtents((uint64_t)v194, (_DWORD *)&v193 + 1, &v191, 0, 0, 0);
                    if ((_DWORD)ItemExtents)
                      goto LABEL_492;
                    if (v191)
                    {
LABEL_533:
                      appended = FigSignalErrorAt();
                      FigAtomWriterEndAtom();
                      if ((_DWORD)appended)
                        goto LABEL_494;
LABEL_476:
                      memset(v199, 0, 24);
                      memset(v198, 0, sizeof(v198));
                      v163 = *(_QWORD *)(a1 + 8);
                      v164 = IFFInformationGetItemCount(v163);
                      if ((uint64_t)v164 < 1)
                      {
                        v173 = 0;
                        appended = 0;
                      }
                      else
                      {
                        v165 = v164;
                        v166 = 0;
                        v167 = 0;
                        for (j = 0; (const __CFArray *)j != v165; ++j)
                        {
                          *(_QWORD *)&v207 = 0;
                          LODWORD(v190) = 0;
                          LOBYTE(v202) = 0;
                          v203.i64[0] = 0;
                          __s[0] = 0;
                          v169 = IFFInformationGetItemAtIndex(v163, j, &v207, &v190, &v202);
                          if ((_DWORD)v169)
                            goto LABEL_497;
                          if ((_BYTE)v202)
                          {
                            v169 = IFFInformationGetItemExtents(v207, 0, &v203, 0, __s, 0);
                            if ((_DWORD)v169)
                              goto LABEL_497;
                            if (v203.i64[0])
                            {
                              v169 = FigSignalErrorAt();
                              goto LABEL_497;
                            }
                            if ((uint64_t)__s[0] >= 1)
                            {
                              ++v167;
                              v166 = (v166 | WORD1(v190)) != 0;
                            }
                          }
                        }
                        if (v167)
                        {
                          v169 = FigAtomWriterInitWithParent();
                          if ((_DWORD)v169)
                            goto LABEL_497;
                          v169 = FigAtomWriterBeginAtom();
                          if ((_DWORD)v169)
                            goto LABEL_497;
                          v170 = IFFInformationUsesItemExtentConstructionMethod(v163);
                          if (v166 || HIWORD(v167))
                          {
                            v171 = 2;
                            LODWORD(v207) = 2;
                            WORD2(v207) = 68;
                            *(_DWORD *)((char *)&v207 + 6) = bswap32(v167);
                            v169 = FigAtomWriterAppendData();
                            if (!(_DWORD)v169)
                              goto LABEL_498;
                          }
                          else
                          {
                            v171 = v170 != 0;
                            LODWORD(v207) = v171;
                            WORD2(v207) = 68;
                            WORD3(v207) = bswap32(v167) >> 16;
                            v169 = FigAtomWriterAppendData();
                            if (!(_DWORD)v169)
                            {
LABEL_498:
                              v174 = 0;
                              while (1)
                              {
                                __s[0] = 0;
                                LOBYTE(v195) = 0;
                                *(_QWORD *)&v190 = 0;
                                LODWORD(v201) = 0;
                                LODWORD(v200) = 0;
                                v202 = 0;
                                v169 = IFFInformationGetItemAtIndex(v163, v174, __s, &v200, &v195);
                                if ((_DWORD)v169)
                                  break;
                                if ((_BYTE)v195)
                                {
                                  v169 = IFFInformationGetItemExtents((uint64_t)__s[0], &v201, 0, 0, &v190, &v202);
                                  if ((_DWORD)v169)
                                    break;
                                  if ((_QWORD)v190)
                                  {
                                    if (v171 == 2)
                                    {
                                      v203.i32[0] = bswap32(v200);
                                      v203.i32[1] = (v201 & 0xF) << 8;
                                      v203.i16[4] = bswap32(v190) >> 16;
                                    }
                                    else if (v171 == 1)
                                    {
                                      v203.i16[0] = bswap32((unsigned __int16)v200) >> 16;
                                      *(__int32 *)((char *)v203.i32 + 2) = (v201 & 0xF) << 8;
                                      v203.i16[3] = bswap32(v190) >> 16;
                                    }
                                    else
                                    {
                                      v203.i32[0] = bswap32((unsigned __int16)v200) >> 16;
                                      v203.i16[2] = bswap32(v190) >> 16;
                                    }
                                    v169 = FigAtomWriterAppendData();
                                    if ((_DWORD)v169)
                                      break;
                                    v175 = v190;
                                    if ((uint64_t)v190 >= 5)
                                    {
                                      v173 = (__int128 *)malloc_type_malloc(8 * v190, 0xB1E45E65uLL);
                                      if (!v173)
                                        goto LABEL_536;
                                      v176 = v190;
                                    }
                                    else
                                    {
                                      v173 = &v207;
                                      v176 = v190;
                                    }
                                    if (v176 >= 1)
                                    {
                                      v177 = (_DWORD *)v173 + 1;
                                      v178 = (const char *)(v202 + 8);
                                      while (1)
                                      {
                                        v179 = (_DWORD)v201 ? 0 : *(_QWORD *)(a1 + 16);
                                        v180 = *((_QWORD *)v178 - 1) + v179;
                                        v181 = *(_QWORD *)v178;
                                        if (HIDWORD(v180) || HIDWORD(*(_QWORD *)v178) != 0)
                                          break;
                                        *(v177 - 1) = bswap32(v180);
                                        *v177 = bswap32(v181);
                                        v177 += 2;
                                        v178 += 16;
                                        if (!--v176)
                                          goto LABEL_524;
                                      }
LABEL_536:
                                      appended = FigSignalErrorAt();
                                      goto LABEL_530;
                                    }
LABEL_524:
                                    v183 = FigAtomWriterAppendData();
                                    appended = v183;
                                    if (v175 < 5 || (_DWORD)v183)
                                    {
                                      if ((_DWORD)v183)
                                        goto LABEL_530;
                                    }
                                    else
                                    {
                                      free(v173);
                                    }
                                  }
                                }
                                if ((const __CFArray *)++v174 == v165)
                                  goto LABEL_529;
                              }
                            }
                          }
LABEL_497:
                          appended = v169;
                          v173 = 0;
                          goto LABEL_530;
                        }
LABEL_529:
                        v173 = 0;
                        appended = 0;
                      }
LABEL_530:
                      FigAtomWriterEndAtom();
                      if (v173 != &v207 && v173)
                        free(v173);
                      goto LABEL_494;
                    }
                    if (HIDWORD(v193) == 1)
                    {
                      ItemExtents = IFFInformationGetItemType((uint64_t)v194, &v193);
                      if ((_DWORD)ItemExtents)
                        goto LABEL_492;
                      switch((_DWORD)v193)
                      {
                        case 0x746D6170:
                          v150 = v194;
                          LODWORD(v195) = 0;
                          *(_QWORD *)&v190 = 0;
                          v201 = 0;
                          v202 = 0;
                          v200 = 0;
                          ItemExtents = IFFInformationGetItemExtents((uint64_t)v194, &v195, &v190, 0, &v202, &v201);
                          if ((_DWORD)ItemExtents)
                            goto LABEL_492;
                          if (v202 < 1 || (_QWORD)v190)
                            goto LABEL_471;
                          ItemExtents = FigAtomWriterGetAtomDataSize();
                          if ((_DWORD)ItemExtents)
                            goto LABEL_492;
                          memset(v199, 0, sizeof(v199));
                          memset(v198, 0, sizeof(v198));
                          ItemExtents = IFFInformationGetItemBodyImageDerivationTonemap(v150, v198);
                          if ((_DWORD)ItemExtents)
                            goto LABEL_492;
                          v151 = v198[0].u8[4];
                          LODWORD(__s[0]) = 0;
                          BYTE4(__s[0]) = 0;
                          BYTE5(__s[0]) = ((v198[0].i8[4] != 0) << 7) | ((v198[0].i8[5] != 0) << 6);
                          *(int8x16_t *)((char *)__s + 6) = vrev32q_s8(*(int8x16_t *)((char *)v198 + 8));
                          ItemExtents = FigAtomWriterAppendData();
                          if ((_DWORD)ItemExtents)
                            goto LABEL_492;
                          v152 = 0;
                          v153 = 0;
                          do
                          {
                            v154 = vrev32q_s8(*(int8x16_t *)((char *)v199 + v152 + 8));
                            v203 = vrev32q_s8(*(int8x16_t *)((char *)&v198[1] + v152 + 8));
                            v204 = v154;
                            *(int8x8_t *)&v205 = vrev32_s8(*(int8x8_t *)((char *)&v199[1] + v152 + 8));
                            ItemExtents = FigAtomWriterAppendData();
                            if ((_DWORD)ItemExtents)
                              goto LABEL_492;
                            v152 += 40;
                            if (!v151)
                              break;
                          }
                          while (v153++ < 2);
                          v156 = v201;
                          *(_QWORD *)v201 = v200;
                          *((_QWORD *)v156 + 1) = v152 + 22;
                          break;
                        case 0x696F766C:
                          v140 = (uint64_t)v194;
                          v197 = 0;
                          v198[0].i64[0] = 0;
                          v196 = 0;
                          __s[0] = 0;
                          *(_QWORD *)&v190 = 0;
                          v202 = 0;
                          v203.i64[0] = 0;
                          v200 = 0;
                          v201 = 0;
                          AtomDataSize = IFFInformationGetItemExtents((uint64_t)v194, &v196, __s, 0, &v190, &v202);
                          if ((_DWORD)AtomDataSize)
                            goto LABEL_535;
                          if ((uint64_t)v190 >= 1 && !__s[0])
                          {
                            AtomDataSize = FigAtomWriterGetAtomDataSize();
                            if ((_DWORD)AtomDataSize
                              || (AtomDataSize = IFFInformationGetItemBodyImageDerivationOverlay(v140, v198, (_DWORD *)&v197 + 1, &v197, &v203), (_DWORD)AtomDataSize))
                            {
LABEL_535:
                              appended = AtomDataSize;
                              free(v200);
                              goto LABEL_493;
                            }
                            if (v198[0].i64[0] && v203.i64[0])
                            {
                              v195 = 0;
                              AtomDataSize = IFFInformationGetItemReferencesOfType(v140, 1684630887, &v195, 0, 0);
                              if ((_DWORD)AtomDataSize)
                                goto LABEL_535;
                              if (HIWORD(v197) || WORD1(v197))
                              {
                                v142 = 8 * v195 + 18;
                                v157 = malloc_type_calloc(1uLL, v142, 0xECC7D923uLL);
                                v200 = (char *)v157;
                                if (v157)
                                {
                                  v158 = 0;
                                  *v157 = 256;
                                  v159 = v198[0].i64[0];
                                  do
                                  {
                                    v157[v158 + 1] = bswap32(*(unsigned __int16 *)(v159 + v158 * 2)) >> 16;
                                    ++v158;
                                  }
                                  while (v158 != 4);
                                  *(_DWORD *)(v157 + 5) = bswap32(HIDWORD(v197));
                                  *(_DWORD *)(v157 + 7) = bswap32(v197);
                                  if (v195 > 0)
                                  {
                                    v160 = 0;
                                    do
                                    {
                                      *(_DWORD *)&v157[2 * v160 + 9] = bswap32(*(_DWORD *)(v203.i64[0] + 4 * v160));
                                      ++v160;
                                    }
                                    while (v160 < 2 * v195);
                                  }
                                  goto LABEL_465;
                                }
                              }
                              else
                              {
                                v142 = 4 * v195 + 14;
                                v143 = malloc_type_calloc(1uLL, v142, 0x1CAF970DuLL);
                                v200 = (char *)v143;
                                if (v143)
                                {
                                  v144 = 0;
                                  *v143 = 0;
                                  v145 = v198[0].i64[0];
                                  do
                                  {
                                    v143[v144 + 1] = bswap32(*(unsigned __int16 *)(v145 + v144 * 2)) >> 16;
                                    ++v144;
                                  }
                                  while (v144 != 4);
                                  v143[5] = bswap32(WORD2(v197)) >> 16;
                                  v143[6] = bswap32((unsigned __int16)v197) >> 16;
                                  if (v195 > 0)
                                  {
                                    v146 = v143 + 7;
                                    v147 = 2 * v195;
                                    v148 = (unsigned __int16 *)v203.i64[0];
                                    if (2 * v195 <= 1)
                                      v147 = 1;
                                    do
                                    {
                                      v149 = *v148;
                                      v148 += 2;
                                      *v146++ = bswap32(v149) >> 16;
                                      --v147;
                                    }
                                    while (v147);
                                  }
LABEL_465:
                                  AtomDataSize = FigAtomWriterAppendData();
                                  if ((_DWORD)AtomDataSize)
                                    goto LABEL_535;
                                  v161 = v202;
                                  *(_QWORD *)v202 = v201;
                                  *(_QWORD *)(v161 + 8) = v142;
                                  free(v200);
                                  break;
                                }
                              }
                            }
                          }
                          appended = FigSignalErrorAt();
                          free(v200);
                          if ((_DWORD)appended)
                            goto LABEL_493;
                          break;
                        case 0x67726964:
                          v136 = (uint64_t)v194;
                          WORD2(v197) = 0;
                          LOWORD(v197) = 0;
                          LODWORD(v201) = 0;
                          LODWORD(v200) = 0;
                          LODWORD(v195) = 0;
                          __s[0] = 0;
                          *(_QWORD *)&v190 = 0;
                          v202 = 0;
                          v203.i64[0] = 0;
                          ItemExtents = IFFInformationGetItemExtents((uint64_t)v194, &v195, &v203, 0, __s, &v190);
                          if ((_DWORD)ItemExtents)
                            goto LABEL_492;
                          if ((uint64_t)__s[0] >= 1 && !v203.i64[0])
                          {
                            ItemExtents = FigAtomWriterGetAtomDataSize();
                            if ((_DWORD)ItemExtents)
                              goto LABEL_492;
                            ItemExtents = IFFInformationGetItemBodyImageDerivationGrid(v136, &v197, (_WORD *)&v197 + 2, &v201, &v200);
                            if ((_DWORD)ItemExtents)
                              goto LABEL_492;
                            if (WORD2(v197)
                              && WORD2(v197) <= 0x100u
                              && ((unsigned __int16)(v197 - 257) >> 8) == 255)
                            {
                              v137 = bswap32(v201);
                              v138 = bswap32(v200);
                              if (v201 >> 16 || v200 >> 16)
                              {
                                v198[0].i16[0] = 256;
                                v198[0].i8[2] = BYTE4(v197) - 1;
                                v198[0].i8[3] = v197 - 1;
                                *(uint64_t *)((char *)v198[0].i64 + 4) = __PAIR64__(v138, v137);
                                ItemExtents = FigAtomWriterAppendData();
                                v139 = 12;
                                if ((_DWORD)ItemExtents)
                                  goto LABEL_492;
                              }
                              else
                              {
                                v198[0].i16[0] = 0;
                                v198[0].i8[2] = BYTE4(v197) - 1;
                                v198[0].i8[3] = v197 - 1;
                                v198[0].i16[2] = HIWORD(v137);
                                v198[0].i16[3] = HIWORD(v138);
                                ItemExtents = FigAtomWriterAppendData();
                                v139 = 8;
                                if ((_DWORD)ItemExtents)
                                  goto LABEL_492;
                              }
                              v162 = v190;
                              *(_QWORD *)v190 = v202;
                              *(_QWORD *)(v162 + 8) = v139;
                              break;
                            }
                          }
LABEL_471:
                          ItemExtents = FigSignalErrorAt();
                          if ((_DWORD)ItemExtents)
                            goto LABEL_492;
                          break;
                        default:
                          goto LABEL_533;
                      }
                    }
                  }
                  if ((const __CFArray *)++v134 == v133)
                    goto LABEL_475;
                }
              }
            }
          }
        }
      }
    }
    appended = ItemHandler;
    goto LABEL_493;
  }
LABEL_494:
  FigAtomWriterEndAtom();
  return appended;
}

uint64_t appendItemPropertyColorInformationAtom(uint64_t a1, unsigned int a2)
{
  uint64_t appended;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v13 = 0;
  v11 = 0u;
  v12 = 0u;
  v10 = 0u;
  v9 = 0;
  appended = FigAtomWriterInitWithParent();
  if ((_DWORD)appended)
    goto LABEL_11;
  appended = FigAtomWriterBeginAtom();
  if ((_DWORD)appended)
    goto LABEL_11;
  v9 = bswap32(a2);
  appended = FigAtomWriterAppendData();
  if ((_DWORD)appended)
    goto LABEL_11;
  if (a2 == 1852009592)
  {
    *(_DWORD *)((char *)&v8 + 3) = 0;
    LODWORD(v8) = 0;
    appended = IFFInformationGetItemPropertyIndexedColor(a1, &v8, (_WORD *)&v8 + 1, (_WORD *)&v8 + 2, (_BYTE *)&v8 + 6);
    if (!(_DWORD)appended)
    {
      LOWORD(v8) = bswap32((unsigned __int16)v8) >> 16;
      WORD1(v8) = bswap32(WORD1(v8)) >> 16;
      WORD2(v8) = bswap32(WORD2(v8)) >> 16;
LABEL_10:
      appended = FigAtomWriterAppendData();
    }
  }
  else
  {
    if (a2 != 1886547814)
    {
      v5 = 0;
      goto LABEL_13;
    }
    v7 = 0;
    v8 = 0;
    appended = IFFInformationGetItemPropertyICCProfileData(a1, &v8, &v7);
    if (!(_DWORD)appended)
      goto LABEL_10;
  }
LABEL_11:
  v5 = appended;
LABEL_13:
  FigAtomWriterEndAtom();
  return v5;
}

uint64_t _appendUUIDItemPropertyHelper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t CFUUIDBytesForItemPropertyType;
  uint64_t v5;
  _OWORD v7[4];
  uint64_t v8;

  v8 = 0;
  memset(&v7[1], 0, 48);
  if (a3)
  {
    CFUUIDBytesForItemPropertyType = FigAtomWriterInitWithParent();
    if (!(_DWORD)CFUUIDBytesForItemPropertyType)
    {
      v7[0] = 0uLL;
      CFUUIDBytesForItemPropertyType = IFFInformationGetCFUUIDBytesForItemPropertyType(*(_DWORD *)(a1 + 8), v7);
      if (!(_DWORD)CFUUIDBytesForItemPropertyType)
      {
        CFUUIDBytesForItemPropertyType = FigAtomWriterBeginUUIDAtom();
        if (!(_DWORD)CFUUIDBytesForItemPropertyType)
          CFUUIDBytesForItemPropertyType = FigAtomWriterAppendData();
      }
    }
  }
  else
  {
    CFUUIDBytesForItemPropertyType = FigSignalErrorAt();
  }
  v5 = CFUUIDBytesForItemPropertyType;
  FigAtomWriterEndAtom();
  return v5;
}

uint64_t FigAssetImageGeneratorCreateFromAsset(uint64_t a1, const void *a2, _QWORD *a3)
{
  return FigAssetImageGeneratorCreateFromAssetWithOptions(a1, a2, 0, a3);
}

uint64_t FigAssetImageGeneratorCreateFromAssetWithOptions(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t DerivedStorage;
  CFTypeRef v9;
  uint64_t v10;
  uint64_t v11;
  int BooleanIfPresent;
  int v13;
  uint64_t CMBaseObject;
  void (*v15)(uint64_t, const __CFString *, uint64_t, uint64_t);
  uint64_t v16;

  if (!a2)
    return 4294954863;
  FigAssetImageGeneratorGetClassID();
  v7 = CMDerivedObjectCreate();
  if ((_DWORD)v7)
    return v7;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_WORD *)DerivedStorage = 0;
  v9 = CFRetain(a2);
  *(_QWORD *)(DerivedStorage + 8) = 0;
  *(_QWORD *)(DerivedStorage + 16) = 0;
  *(_QWORD *)(DerivedStorage + 24) = v9;
  *(_QWORD *)(DerivedStorage + 32) = 0;
  *(_QWORD *)(DerivedStorage + 40) = 0;
  *(_DWORD *)(DerivedStorage + 48) = 0;
  v10 = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 56) = v10;
  if (!v10)
    return FigSignalErrorAt();
  *(_QWORD *)(DerivedStorage + 64) = 0;
  *(_QWORD *)(DerivedStorage + 72) = DerivedStorage + 64;
  v11 = FigSemaphoreCreate();
  *(_QWORD *)(DerivedStorage + 80) = v11;
  if (!v11)
    return FigSignalErrorAt();
  *(_WORD *)(DerivedStorage + 105) = 0;
  *(_QWORD *)(DerivedStorage + 88) = 0;
  *(_BYTE *)(DerivedStorage + 96) = 0;
  BooleanIfPresent = FigCFDictionaryGetBooleanIfPresent();
  v13 = 2;
  if (!BooleanIfPresent)
    v13 = 0;
  *(_DWORD *)(DerivedStorage + 108) = v13;
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  MEMORY[0x19402F294](&sAIGCreateNotificationQueueOnce, aig_createNotificationQueueOnce);
  if (!sAIGNotificationQueue)
    return FigSignalErrorAt();
  FigCFWeakReferenceStore();
  CMBaseObject = FigAssetGetCMBaseObject(a2);
  v15 = *(void (**)(uint64_t, const __CFString *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
  if (v15)
    v15(CMBaseObject, CFSTR("assetProperty_CreationURL"), a1, DerivedStorage + 8);
  v16 = 0;
  *a4 = 0;
  return v16;
}

dispatch_queue_t aig_createNotificationQueueOnce()
{
  dispatch_queue_t result;

  result = dispatch_queue_create("com.apple.coremedia.assetimagegenerator.notifications", 0);
  sAIGNotificationQueue = (uint64_t)result;
  return result;
}

uint64_t aig_Invalidate()
{
  _BYTE *DerivedStorage;
  _QWORD *v1;
  uint64_t *i;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    v1 = DerivedStorage;
    *DerivedStorage = 1;
    FigCFWeakReferenceStore();
    if (v1[7])
    {
      MEMORY[0x19402EEEC]();
      for (i = (uint64_t *)v1[8]; i; i = (uint64_t *)*i)
        *((_BYTE *)i + 8) = 1;
      MEMORY[0x19402EF04](v1[7]);
    }
    if (v1[11])
    {
      FigSemaphoreSignal();
      FigThreadAbort();
      FigThreadJoin();
      v1[11] = 0;
    }
  }
  return 0;
}

void aig_Finalize()
{
  _QWORD *DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  aig_Invalidate();
  if (DerivedStorage[7])
  {
    FigSimpleMutexDestroy();
    DerivedStorage[7] = 0;
  }
  if (DerivedStorage[10])
  {
    FigSemaphoreDestroy();
    DerivedStorage[10] = 0;
  }
  v1 = (const void *)DerivedStorage[15];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[15] = 0;
  }
  v2 = (const void *)DerivedStorage[3];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[3] = 0;
  }
  v3 = (const void *)DerivedStorage[2];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[2] = 0;
  }
  v4 = (const void *)DerivedStorage[4];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[4] = 0;
  }
  v5 = (const void *)DerivedStorage[5];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[5] = 0;
  }
  v6 = (const void *)DerivedStorage[1];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[1] = 0;
  }
}

__CFString *aig_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;
  const __CFURL *v4;
  const __CFString *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigAssetImageGenerator %p url: "), a1);
  v4 = *(const __CFURL **)(DerivedStorage + 8);
  if (v4)
    v5 = CFURLGetString(v4);
  else
    v5 = CFSTR("NULL");
  CFStringAppend(Mutable, v5);
  CFStringAppend(Mutable, CFSTR(">"));
  return Mutable;
}

uint64_t aig_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t result;
  const void *v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = 4294954516;
  if (a2 && a3)
  {
    if (*(_BYTE *)DerivedStorage)
    {
      return FigSignalErrorAt();
    }
    else if (CFEqual(a2, CFSTR("ClientPID")))
    {
      v7 = *(const void **)(DerivedStorage + 120);
      *(_QWORD *)(DerivedStorage + 120) = a3;
      CFRetain(a3);
      if (v7)
        CFRelease(v7);
      return 0;
    }
    else if (CFEqual(a2, CFSTR("AllowAlternateDecoderSelection")))
    {
      result = 0;
      *(_BYTE *)(DerivedStorage + 128) = (const void *)*MEMORY[0x1E0C9AE50] == a3;
    }
    else
    {
      return 4294954512;
    }
  }
  return result;
}

uint64_t aig_CopyCGImageAtTime(const void *a1, uint64_t a2, const void *a3, const void *a4, _QWORD *a5, uint64_t a6)
{
  uint64_t DerivedStorage;
  uint64_t v14;
  const void *v15;
  CFTypeRef v16;
  const void *v17;
  uint64_t CMBaseObject;
  uint64_t (*v19)(uint64_t, const __CFString *, _QWORD, char *);
  uint64_t v20;
  int v21;
  uint64_t ImageAtTimeInternal;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  _OWORD v26[14];
  _QWORD *v27;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v27 = 0;
  memset(v26, 0, sizeof(v26));
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v14 = DerivedStorage;
  v15 = *(const void **)(DerivedStorage + 24);
  if (v15 && (v16 = CFRetain(v15)) != 0)
  {
    v17 = v16;
    CMBaseObject = FigAssetGetCMBaseObject(v16);
    v19 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
    if (v19)
    {
      v20 = v19(CMBaseObject, CFSTR("assetProperty_CPEProtector"), *MEMORY[0x1E0C9AE00], (char *)&v26[1] + 8);
      if (!(_DWORD)v20)
      {
        CFRelease(v17);
        v21 = *(_DWORD *)(v14 + 100) + 1;
        *(_DWORD *)(v14 + 100) = v21;
        v24 = *(_OWORD *)a2;
        v25 = *(_QWORD *)(a2 + 16);
        ImageAtTimeInternal = FAIGCommon_createImageRequest(&v24, a3, a4, v21, &v27);
        if (!(_DWORD)ImageAtTimeInternal)
          ImageAtTimeInternal = aig_createImageAtTimeInternal(v26, a1, 0, (uint64_t)v27, a5, a6);
        v23 = ImageAtTimeInternal;
        goto LABEL_13;
      }
      v23 = v20;
    }
    else
    {
      v23 = 4294954514;
    }
    CFRelease(v17);
  }
  else
  {
    v23 = 4294954859;
  }
LABEL_13:
  aig_cleanupImageRetrievalObjects((CFTypeRef *)v26);
  FAIGCommon_releaseImageRequest(v27);
  return v23;
}

uint64_t aig_RequestCGImageAtTimeAsync(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFDictionaryRef v14;
  __int128 v15;
  uint64_t v16;
  _QWORD *v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v17 = 0;
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v9 = DerivedStorage;
  v10 = *(_DWORD *)(DerivedStorage + 100) + 1;
  *(_DWORD *)(DerivedStorage + 100) = v10;
  v15 = *(_OWORD *)a2;
  v16 = *(_QWORD *)(a2 + 16);
  v11 = FAIGCommon_createImageRequest(&v15, a3, a4, v10, &v17);
  if ((_DWORD)v11)
    return v11;
  MEMORY[0x19402EEEC](*(_QWORD *)(v9 + 56));
  *v17 = 0;
  **(_QWORD **)(v9 + 72) = v17;
  *(_QWORD *)(v9 + 72) = v17;
  if (*(_BYTE *)(v9 + 96))
  {
    MEMORY[0x19402EF04](*(_QWORD *)(v9 + 56));
    return 0;
  }
  else
  {
    v13 = *(_QWORD *)(v9 + 88);
    *(_BYTE *)(v9 + 96) = 1;
    if (v13)
    {
      *(_QWORD *)(v9 + 88) = 0;
      MEMORY[0x19402EF04](*(_QWORD *)(v9 + 56));
      FigThreadJoin();
    }
    else
    {
      MEMORY[0x19402EF04](*(_QWORD *)(v9 + 56));
    }
    *(_QWORD *)&v15 = CFSTR("com.apple.coremedia.player.processimagerequest");
    v14 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], MEMORY[0x1E0CA52C8], (const void **)&v15, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    MEMORY[0x19402EEEC](*(_QWORD *)(v9 + 56));
    v12 = FigThreadCreate();
    MEMORY[0x19402EF04](*(_QWORD *)(v9 + 56));
    if (v14)
      CFRelease(v14);
    if ((_DWORD)v12)
      *(_BYTE *)(v9 + 96) = 0;
  }
  return v12;
}

uint64_t aig_CancelAllCGImageAsyncRequests()
{
  uint64_t DerivedStorage;
  uint64_t v2;
  uint64_t *i;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v2 = DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 56));
  for (i = *(uint64_t **)(v2 + 64); i; i = (uint64_t *)*i)
    *((_BYTE *)i + 8) = 1;
  MEMORY[0x19402EF04](*(_QWORD *)(v2 + 56));
  FigSemaphoreSignal();
  return 0;
}

uint64_t aig_createImageAtTimeInternal(_QWORD *a1, const void *a2, _DWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  CMTimeEpoch v11;
  const __CFDictionary *v12;
  const __CFNumber *v13;
  const __CFNumber *v14;
  CFTypeID v15;
  const __CFNumber *v16;
  const __CFNumber *v17;
  CFTypeID v18;
  const __CFDictionary *v19;
  const __CFDictionary *v20;
  CFTypeID v21;
  const __CFDictionary *v22;
  const __CFDictionary *v23;
  CFTypeID v24;
  _OWORD *v25;
  unsigned int v26;
  uint64_t DerivedStorage;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t Basic;
  int32_t v32;
  char *v33;
  const __CFDictionary *v34;
  uint64_t v35;
  const __CFAllocator *v36;
  uint64_t FigBaseObject;
  uint64_t (*v38)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *);
  uint64_t v39;
  void (*v40)(uint64_t, CMTime *, _QWORD);
  uint64_t value_low;
  uint64_t v42;
  const void *v43;
  const void *v44;
  const void *v45;
  CFTypeRef v46;
  const void *v47;
  CFAllocatorRef v48;
  uint64_t CMBaseObject;
  uint64_t (*v50)(uint64_t, const __CFString *, CFAllocatorRef, CMTime *);
  uint64_t v51;
  CFAllocatorRef v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, const __CFString *, CFAllocatorRef, CMTime *);
  CFAllocatorRef v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, const __CFString *, CFAllocatorRef, CMTime *);
  int v58;
  char v59;
  char v60;
  CFAllocatorRef v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, const __CFString *, CFAllocatorRef, CMTime *);
  CMTimeValue value;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(uint64_t, uint64_t, _QWORD *, _QWORD);
  uint64_t v69;
  CFStringRef v70;
  uint64_t v71;
  unsigned int (*v72)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *);
  uint64_t v73;
  void (*v74)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *);
  int v75;
  BOOL v77;
  const void *v78;
  uint64_t v79;
  uint64_t (*v80)(uint64_t, const __CFAllocator *, uint64_t, _QWORD, CFStringRef, CMTime *);
  uint64_t v81;
  const void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(uint64_t, char *);
  char *v86;
  uint64_t v87;
  uint64_t (*v88)(uint64_t, __n128 (*)(uint64_t, __n128 *, uint64_t, uint64_t), char *);
  _QWORD *v89;
  int v90;
  int v91;
  uint64_t v92;
  const __CFAllocator *v93;
  __CFDictionary *Mutable;
  CMFormatDescriptionRef *v95;
  const __CFArray *v96;
  int v97;
  _BOOL4 v98;
  int v99;
  const void **v100;
  uint64_t DestinationPixelBufferAttributes;
  const void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t (*v105)(uint64_t, const __CFString *, _QWORD);
  CFPropertyListRef Extension;
  CFPropertyListRef v107;
  const void *v108;
  CFTypeID v109;
  CFTypeID v110;
  uint64_t v111;
  uint64_t (*v112)(uint64_t, const __CFString *, CFPropertyListRef);
  uint64_t v113;
  uint64_t (*v114)(uint64_t, const __CFString *, _QWORD);
  uint64_t v115;
  uint64_t (*v116)(uint64_t, const __CFString *, const void *);
  uint64_t v117;
  uint64_t v118;
  uint64_t (*v119)(uint64_t, const __CFString *, uint64_t);
  uint64_t v120;
  uint64_t (*v121)(uint64_t, const __CFString *, const __CFAllocator *, _QWORD *);
  const void *v122;
  uint64_t v123;
  void (*v124)(uint64_t, const __CFString *, const void *);
  uint64_t v125;
  __CFDictionary *MutableCopy;
  const __CFDictionary *v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(uint64_t, const __CFString *, const __CFAllocator *, _QWORD *);
  const __CFAllocator *v131;
  CFDictionaryRef v132;
  uint64_t v133;
  _QWORD *v134;
  const void *v135;
  uint64_t v136;
  const void *v137;
  _QWORD *v139;
  const __CFAllocator *allocator;
  uint64_t v141;
  const __CFArray *v142;
  const __CFAllocator *v143;
  _QWORD *v144;
  __CFDictionary *v145;
  uint64_t v146;
  __int128 v147;
  CMTime v149;
  CMTime v150;
  void *keys;
  char v152;
  CFTypeRef cf;
  CFTypeRef v154;
  CFTypeRef v155;
  int v156[2];
  CMTime v157;
  CMTime v158;
  CMTime v159;
  uint64_t v160;
  int valuePtr;
  void *v162;
  CMTime lhs;
  CMTime v164;
  CMTime values;
  CMTime rhs;
  uint64_t v167;

  v162 = a1;
  CMBaseObjectGetDerivedStorage();
  valuePtr = 0;
  v147 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)&v159.value = *MEMORY[0x1E0CA2E18];
  v11 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v159.epoch = v11;
  v158 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
  v157 = v158;
  v155 = 0;
  *(_QWORD *)v156 = 0;
  cf = 0;
  v154 = 0;
  v152 = 1;
  keys = CFSTR("AIGRequestedNotificationWhenConsumed");
  v160 = 2000000000;
  if (*a1)
    goto LABEL_2;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v28 = CMBaseObjectGetDerivedStorage();
  lhs.value = 0;
  rhs.value = 0;
  values.value = 0;
  v164.value = 0;
  if (*(_BYTE *)v28)
  {
    v29 = 4294954511;
    goto LABEL_210;
  }
  v42 = v28;
  if (*(_BYTE *)(v28 + 1))
  {
    v29 = 0;
    goto LABEL_71;
  }
  v45 = *(const void **)(v28 + 24);
  if (!v45)
  {
    v29 = 4294954863;
    goto LABEL_71;
  }
  v146 = a6;
  v46 = CFRetain(v45);
  if (!v46)
  {
    v29 = 4294954863;
    goto LABEL_71;
  }
  v47 = v46;
  v48 = CFGetAllocator(a2);
  CMBaseObject = FigAssetGetCMBaseObject(v47);
  v50 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
  if (!v50)
    goto LABEL_61;
  v51 = v50(CMBaseObject, CFSTR("assetProperty_FormatReader"), v48, &rhs);
  if ((_DWORD)v51)
    goto LABEL_225;
  if (!rhs.value)
  {
LABEL_224:
    v51 = FigSignalErrorAt();
    goto LABEL_225;
  }
  v52 = CFGetAllocator(a2);
  v53 = FigAssetGetCMBaseObject(v47);
  v54 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
  if (!v54)
    goto LABEL_61;
  v51 = v54(v53, CFSTR("assetProperty_ContentByteStream"), v52, &v164);
  if ((_DWORD)v51)
    goto LABEL_225;
  v55 = CFGetAllocator(a2);
  v56 = FigAssetGetCMBaseObject(v47);
  v57 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
  if (!v57)
    goto LABEL_61;
  v51 = v57(v56, CFSTR("assetProperty_ByteStreamProvider"), v55, &values);
  if ((_DWORD)v51)
  {
LABEL_225:
    v29 = v51;
    goto LABEL_62;
  }
  if (!values.value)
    goto LABEL_224;
  v58 = *(_DWORD *)(v42 + 108);
  if (v58 == 1)
    v59 = 1;
  else
    v59 = 4 * (v58 == 2);
  if (*(_BYTE *)(v42 + 105))
    v59 |= 8u;
  if (*(_BYTE *)(v42 + 106))
    v60 = v59 | 0x10;
  else
    v60 = v59;
  FPSupport_GetDefaultTrackIDForMediaType(rhs.value, 1986618469, v42 + 48, v60);
  *(_BYTE *)(v42 + 104) = 0;
  v61 = CFGetAllocator(a2);
  v62 = FigAssetGetCMBaseObject(v47);
  v63 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
  if (v63)
  {
    v51 = v63(v62, CFSTR("assetProperty_CreationOptionsDictionary"), v61, &lhs);
    if (!(_DWORD)v51)
    {
      if (lhs.value)
        FigCFDictionaryGetBooleanIfPresent();
      if (*(_BYTE *)v42)
      {
        v29 = FigSignalErrorAt();
      }
      else
      {
        v29 = 0;
        *(_QWORD *)(v42 + 16) = rhs.value;
        rhs.value = 0;
        value = v164.value;
        v164.value = 0;
        *(_QWORD *)(v42 + 32) = values.value;
        *(_QWORD *)(v42 + 40) = value;
        values.value = 0;
        *(_BYTE *)(v42 + 1) = 1;
      }
      goto LABEL_62;
    }
    goto LABEL_225;
  }
LABEL_61:
  v29 = 4294954514;
LABEL_62:
  CFRelease(v47);
  if (rhs.value)
    CFRelease((CFTypeRef)rhs.value);
  a6 = v146;
LABEL_71:
  if (v164.value)
    CFRelease((CFTypeRef)v164.value);
  if (values.value)
    CFRelease((CFTypeRef)values.value);
  if (lhs.value)
    CFRelease((CFTypeRef)lhs.value);
  if ((_DWORD)v29)
    goto LABEL_210;
  v66 = *(unsigned int *)(DerivedStorage + 48);
  if ((_DWORD)v66)
  {
    v67 = *(_QWORD *)(DerivedStorage + 16);
    if (v67)
    {
      v68 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 56);
      if (!v68)
        goto LABEL_150;
      v69 = v68(v67, v66, a1, 0);
    }
    else
    {
      v69 = FigSignalErrorAt();
    }
    v29 = v69;
    if ((_DWORD)v69)
      goto LABEL_210;
  }
  else
  {
    v29 = FigSignalErrorAt();
    if ((_DWORD)v29)
      goto LABEL_210;
  }
LABEL_2:
  if ((*(_DWORD *)(a4 + 24) & 0x1D) != 1)
  {
    v29 = 4294954863;
    goto LABEL_210;
  }
  v12 = *(const __CFDictionary **)(a4 + 40);
  if (v12)
  {
    v13 = (const __CFNumber *)CFDictionaryGetValue(v12, CFSTR("TimeFlags"));
    if (v13)
    {
      v14 = v13;
      v15 = CFGetTypeID(v13);
      if (v15 == CFNumberGetTypeID())
        CFNumberGetValue(v14, kCFNumberIntType, &valuePtr);
    }
    v16 = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a4 + 40), CFSTR("TimeoutInterval"));
    if (v16)
    {
      v17 = v16;
      v18 = CFGetTypeID(v16);
      if (v18 == CFNumberGetTypeID())
        CFNumberGetValue(v17, kCFNumberSInt64Type, &v160);
    }
    v19 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a4 + 40), CFSTR("TimeToleranceBefore"));
    if (v19)
    {
      v20 = v19;
      v21 = CFGetTypeID(v19);
      if (v21 == CFDictionaryGetTypeID())
        CMTimeMakeFromDictionary(&v158, v20);
    }
    v22 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a4 + 40), CFSTR("TimeToleranceAfter"));
    if (v22)
    {
      v23 = v22;
      v24 = CFGetTypeID(v22);
      if (v24 == CFDictionaryGetTypeID())
        CMTimeMakeFromDictionary(&v157, v23);
    }
  }
  v25 = (_OWORD *)(a4 + 12);
  if ((valuePtr - 2) > 3)
    v26 = 257;
  else
    v26 = dword_1932FD340[valuePtr - 2];
  v30 = *(_QWORD *)v162;
  *(_OWORD *)&lhs.value = *v25;
  lhs.epoch = *(_QWORD *)(a4 + 28);
  rhs = v158;
  CMTimeSubtract(&v150, &lhs, &rhs);
  *(_OWORD *)&lhs.value = *v25;
  lhs.epoch = *(_QWORD *)(a4 + 28);
  rhs = v157;
  CMTimeAdd(&v149, &lhs, &rhs);
  *(_OWORD *)&lhs.value = *v25;
  lhs.epoch = *(_QWORD *)(a4 + 28);
  Basic = FigPlaybackBossSnapTimeToIFrameWithRange(v30, 0, &lhs, v26, &v150, &v149, (uint64_t)&v159);
  if ((_DWORD)Basic)
    goto LABEL_217;
  if ((v159.flags & 0x1D) != 1)
  {
    v29 = 4294954865;
    goto LABEL_210;
  }
  lhs = *(CMTime *)((char *)v162 + 56);
  rhs = v159;
  v32 = CMTimeCompare(&lhs, &rhs);
  v33 = (char *)v162;
  if (!v32)
  {
    v43 = (const void *)*((_QWORD *)v162 + 10);
    if (v43)
    {
      CFRetain(v43);
      v33 = (char *)v162;
      v44 = (const void *)*((_QWORD *)v162 + 10);
    }
    else
    {
      v44 = 0;
    }
    v154 = v44;
    *((_OWORD *)v33 + 6) = *(_OWORD *)(v33 + 56);
    *((_QWORD *)v33 + 14) = *((_QWORD *)v33 + 9);
    if (a5)
    {
      *a5 = v44;
      v154 = 0;
    }
    v29 = 0;
    if (a6)
    {
      v65 = *((_OWORD *)v33 + 6);
      *(_QWORD *)(a6 + 16) = *((_QWORD *)v33 + 14);
      *(_OWORD *)a6 = v65;
    }
    goto LABEL_210;
  }
  if (!*((_QWORD *)v162 + 2))
  {
    v34 = *(const __CFDictionary **)(a4 + 40);
    rhs.value = 0;
    values.value = 0;
    v35 = *(_QWORD *)v162;
    lhs.value = 0;
    v36 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    FigBaseObject = FigTrackReaderGetFigBaseObject(v35);
    v38 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
    if (!v38)
    {
      v70 = 0;
      v29 = 4294954514;
      goto LABEL_89;
    }
    v39 = v38(FigBaseObject, CFSTR("TrackFormatDescriptionArray"), v36, &lhs);
    if (!(_DWORD)v39)
    {
      if (lhs.value && CFArrayGetCount((CFArrayRef)lhs.value))
      {
        CFArrayGetValueAtIndex((CFArrayRef)lhs.value, 0);
        *((_QWORD *)v33 + 2) = FigFormatDescriptionRetain();
        LODWORD(v164.value) = 0;
        v40 = *(void (**)(uint64_t, CMTime *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (v40)
        {
          v40(v35, &v164, 0);
          value_low = LODWORD(v164.value);
        }
        else
        {
          value_low = 0;
        }
        v70 = FigCPECreateFormatDescriptionIdentifierForTrackIDAndIndex(v36, value_low, 0);
        v29 = 0;
LABEL_89:
        if (lhs.value)
          CFRelease((CFTypeRef)lhs.value);
        if ((_DWORD)v29)
          goto LABEL_118;
        *(_DWORD *)(v33 + 35) = 0;
        *((_DWORD *)v33 + 8) = 0;
        if (!v34)
          goto LABEL_117;
        if (CFDictionaryGetValue(v34, CFSTR("ApplyVideoTrackMatrix")) == (const void *)*MEMORY[0x1E0C9AE50])
        {
          v164.value = 0;
          v73 = FigTrackReaderGetFigBaseObject(*(_QWORD *)v33);
          v74 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
          if (v74)
          {
            v74(v73, CFSTR("TrackMatrix"), v36, &v164);
            if (v164.value)
            {
              FigGetCGAffineTransformFrom3x3MatrixArray((const void *)v164.value, (uint64_t)&lhs);
              *((_DWORD *)v33 + 8) = FigGetRotationAngleAndFlipsFromCGAffineTransform((double *)&lhs.value, v33 + 37, v33 + 38);
              CFRelease((CFTypeRef)v164.value);
              v75 = *((_DWORD *)v33 + 8);
              v77 = v75 == 90 || v75 == 270;
              v33[36] = v77;
            }
          }
        }
        v71 = *((_QWORD *)v33 + 3);
        if (!v71)
          goto LABEL_117;
        v72 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (v72 && !v72(v71, CFSTR("AllowsImageGeneration"), v36, &rhs) && CFBooleanGetValue((CFBooleanRef)rhs.value))
        {
          v78 = (const void *)*((_QWORD *)v33 + 24);
          if (v78)
          {
            CFRelease(v78);
            *((_QWORD *)v33 + 24) = 0;
          }
          v79 = *((_QWORD *)v33 + 3);
          v80 = *(uint64_t (**)(uint64_t, const __CFAllocator *, uint64_t, _QWORD, CFStringRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
          if (v80)
          {
            v81 = v80(v79, v36, 1, 0, v70, &values);
            if ((_DWORD)v81 == -12164)
            {
LABEL_117:
              v29 = 0;
              goto LABEL_118;
            }
            v29 = v81;
            if (!(_DWORD)v81 && values.value)
            {
              *((_QWORD *)v33 + 24) = CFDictionaryCreate(v36, (const void **)kMentorCreationOptionKey_SampleBufferCryptor, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              goto LABEL_117;
            }
            if (!(_DWORD)v81)
              goto LABEL_117;
          }
          else
          {
            v29 = 4294954514;
          }
        }
        else
        {
          v29 = 4294951072;
        }
LABEL_118:
        if (v70)
          CFRelease(v70);
        if (rhs.value)
          CFRelease((CFTypeRef)rhs.value);
        if (values.value)
          CFRelease((CFTypeRef)values.value);
        if ((_DWORD)v29)
          goto LABEL_210;
        v33 = (char *)v162;
        goto LABEL_126;
      }
      v39 = FigSignalErrorAt();
    }
    v29 = v39;
    v70 = 0;
    goto LABEL_89;
  }
LABEL_126:
  if (*((_QWORD *)v33 + 20) && *((_QWORD *)v33 + 21) && *((_QWORD *)v33 + 6))
    goto LABEL_136;
  v82 = *(const void **)(a4 + 48);
  v83 = CMBaseObjectGetDerivedStorage();
  v84 = *(_QWORD *)v33;
  v85 = *(uint64_t (**)(uint64_t, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v85)
    goto LABEL_150;
  Basic = v85(v84, v33 + 160);
  if ((_DWORD)Basic)
    goto LABEL_217;
  Basic = FigSampleGeneratorCreateForFormatReaderUsingByteStreams(v82, *(const void **)(v83 + 16), *(const void **)v33, *(const void **)(v83 + 32), 0, 2, (_QWORD *)v33 + 21);
  if ((_DWORD)Basic)
    goto LABEL_217;
  Basic = FigVisualContextCreateBasic((uint64_t)v82, 0, (CFTypeRef *)v33 + 6);
  if ((_DWORD)Basic)
    goto LABEL_217;
  *((_QWORD *)v33 + 11) = *(_QWORD *)(v83 + 80);
  v86 = v33 + 88;
  v87 = *((_QWORD *)v86 - 5);
  v88 = *(uint64_t (**)(uint64_t, __n128 (*)(uint64_t, __n128 *, uint64_t, uint64_t), char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v88)
  {
LABEL_150:
    v29 = 4294954514;
    goto LABEL_210;
  }
  Basic = v88(v87, FAIGCommon_decodedImageBecameAvailable, v86);
  if ((_DWORD)Basic)
  {
LABEL_217:
    v29 = Basic;
    goto LABEL_210;
  }
  v33 = (char *)v162;
LABEL_136:
  Basic = FAIGCommon_getOutputImagePropertiesForImageRetrieval(*((CMVideoFormatDescriptionRef *)v33 + 2), *(CFDictionaryRef *)(a4 + 40), v33[36], v156, (CFDictionaryRef *)&cf);
  if ((_DWORD)Basic)
    goto LABEL_217;
  FAIGCommon_checkAndUpdateOutputImagePropertiesForImageRetrieval(a3, *(uint64_t *)v156, (CFDictionaryRef *)v162 + 18, cf, &v152);
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  v89 = v162;
  if (*((_QWORD *)v162 + 26) && !v152)
    goto LABEL_206;
  v139 = (char *)v162 + 208;
  v143 = *(const __CFAllocator **)(a4 + 48);
  v141 = *(_QWORD *)(a4 + 40);
  v91 = v156[0];
  v90 = v156[1];
  v167 = 0;
  v92 = CMBaseObjectGetDerivedStorage();
  v93 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  aig_cleanupVideoRenderPipelineAndMentorsForImageRetrieval(v89);
  v95 = (CMFormatDescriptionRef *)(v89 + 2);
  allocator = v93;
  v96 = CFArrayCreate(v93, (const void **)v89 + 2, 1, MEMORY[0x1E0C9B378]);
  v145 = Mutable;
  v142 = v96;
  if (!v96)
    goto LABEL_222;
  if ((int)FigExportSettings_GetMaximumBitsPerComponent(v96) <= 8)
    v97 = 1111970369;
  else
    v97 = 1380411457;
  HIDWORD(v167) = v97;
  v98 = *(_BYTE *)(v92 + 104) == 0;
  if (*(_BYTE *)(v92 + 128))
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CEDC88], (const void *)*MEMORY[0x1E0C9AE50]);
  v99 = *(_DWORD *)(v92 + 108);
  if (v99 == 1)
  {
    v100 = (const void **)MEMORY[0x1E0C9AE50];
  }
  else
  {
    if (v99 != 2)
      goto LABEL_153;
    v100 = (const void **)MEMORY[0x1E0C9AE40];
  }
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CEDCA8], *v100);
LABEL_153:
  if (*(_BYTE *)(v92 + 105))
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CEDC98], (const void *)*MEMORY[0x1E0C9AE50]);
  if (*(_BYTE *)(v92 + 106))
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CEDCC8], (const void *)*MEMORY[0x1E0C9AE50]);
  DestinationPixelBufferAttributes = FPSupport_CreateDestinationPixelBufferAttributes(v91, v90, (char *)&v167 + 4, 1, 0, v98, 0, 0, 0, (CFDictionaryRef *)v89 + 5);
  if ((_DWORD)DestinationPixelBufferAttributes)
    goto LABEL_223;
  v102 = (const void *)v89[2];
  CMTimeMake(&lhs, 1, 30);
  CMTimeMake(&rhs, 1, 30);
  v103 = FAIGCommon_createRenderPipelineOptions(v143, v102, 0, &lhs, &rhs, (CFDictionaryRef *)v89 + 17);
  if ((_DWORD)v103)
    goto LABEL_227;
  v144 = v89 + 19;
  v103 = FigVideoRenderPipelineCreateWithVisualContext(v143, (int)v145, (const void *)v89[5], (const void *)v89[18], 1, v89[6], 0, (const __CFDictionary *)v89[17], v89 + 19);
  if ((_DWORD)v103)
    goto LABEL_227;
  if (*v95)
  {
    CMFormatDescriptionGetExtensions(*v95);
    if (FigCFDictionaryGetInt32IfPresent())
    {
      if ((int)v167 >= 2)
      {
        v104 = FigRenderPipelineGetFigBaseObject(*v144);
        v105 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 56);
        if (!v105)
          goto LABEL_197;
        v103 = v105(v104, CFSTR("FieldMode"), *MEMORY[0x1E0CED400]);
        if ((_DWORD)v103)
        {
LABEL_227:
          v29 = v103;
          goto LABEL_201;
        }
      }
    }
  }
  if (!FAIGCommon_standardDynamicRangeIsPreferred(v141))
    goto LABEL_179;
  if (!*v95)
    goto LABEL_179;
  CMFormatDescriptionGetExtension(*v95, (CFStringRef)*MEMORY[0x1E0CA8E98]);
  if (!FigCFEqual() && !FigCFEqual())
    goto LABEL_179;
  Extension = CMFormatDescriptionGetExtension(*v95, (CFStringRef)*MEMORY[0x1E0CA8D68]);
  v107 = CMFormatDescriptionGetExtension(*v95, (CFStringRef)*MEMORY[0x1E0CA8EE8]);
  if (!Extension
    || (v108 = v107, v109 = CFGetTypeID(Extension), v109 != CFStringGetTypeID())
    || !v108
    || (v110 = CFGetTypeID(v108), v110 != CFStringGetTypeID()))
  {
LABEL_222:
    DestinationPixelBufferAttributes = FigSignalErrorAt();
LABEL_223:
    v29 = DestinationPixelBufferAttributes;
    goto LABEL_201;
  }
  v111 = FigRenderPipelineGetFigBaseObject(*v144);
  v112 = *(uint64_t (**)(uint64_t, const __CFString *, CFPropertyListRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 56);
  if (!v112)
  {
    v29 = 4294954514;
    goto LABEL_201;
  }
  DestinationPixelBufferAttributes = v112(v111, CFSTR("ColorPrimaries"), Extension);
  if ((_DWORD)DestinationPixelBufferAttributes)
    goto LABEL_223;
  v113 = FigRenderPipelineGetFigBaseObject(*v144);
  v114 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v114)
    goto LABEL_197;
  v103 = v114(v113, CFSTR("TransferFunction"), *MEMORY[0x1E0CA8EB0]);
  if ((_DWORD)v103)
    goto LABEL_227;
  v115 = FigRenderPipelineGetFigBaseObject(*v144);
  v116 = *(uint64_t (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 56);
  if (!v116)
    goto LABEL_197;
  v29 = v116(v115, CFSTR("YCbCrMatrix"), v108);
  if ((_DWORD)v29)
    goto LABEL_201;
LABEL_179:
  v117 = *(_QWORD *)(v92 + 120);
  if (!v117)
    goto LABEL_182;
  v118 = FigRenderPipelineGetFigBaseObject(*v144);
  v119 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v119)
  {
LABEL_197:
    v29 = 4294954514;
    goto LABEL_201;
  }
  v103 = v119(v118, CFSTR("ClientPID"), v117);
  if ((_DWORD)v103)
    goto LABEL_227;
LABEL_182:
  v120 = FigRenderPipelineGetFigBaseObject(v89[19]);
  v121 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                + 48);
  if (!v121)
    goto LABEL_197;
  v103 = v121(v120, CFSTR("SourceSampleBufferQueue"), v143, v89 + 23);
  if ((_DWORD)v103)
    goto LABEL_227;
  v122 = (const void *)*MEMORY[0x1E0C9AE50];
  v123 = FigRenderPipelineGetFigBaseObject(*v144);
  v124 = *(void (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
  if (v124)
    v124(v123, CFSTR("ObeyEmptyMediaMarkers"), v122);
  CMNotificationCenterGetDefaultLocalCenter();
  v103 = CMNotificationCenterAddListener();
  if ((_DWORD)v103)
    goto LABEL_227;
  CMNotificationCenterGetDefaultLocalCenter();
  v103 = CMNotificationCenterAddListener();
  if ((_DWORD)v103)
    goto LABEL_227;
  v125 = v89[23];
  CMTimeMake(&values, 3, 30);
  CMTimeMake(&v164, 2, 30);
  v103 = FigSampleBufferConsumerCreateForBufferQueue(v125, (uint64_t)&values, (uint64_t)&v164, v89 + 22);
  if ((_DWORD)v103)
    goto LABEL_227;
  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
  {
    v103 = FigSignalErrorAt();
    goto LABEL_227;
  }
  v127 = MutableCopy;
  CFDictionarySetValue(MutableCopy, CFSTR("OptimizeSampleCursorIPCForPower"), v122);
  v128 = VideoMentorNew((const void *)v89[20], (const void *)v89[21], (const void *)v89[22], v127, v89 + 25);
  if ((_DWORD)v128)
    goto LABEL_221;
  CMNotificationCenterGetDefaultLocalCenter();
  v128 = CMNotificationCenterAddListener();
  if ((_DWORD)v128)
    goto LABEL_221;
  v129 = FigTrackReaderGetFigBaseObject(*v89);
  v130 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
  if (v130)
    v130(v129, CFSTR("EditCursorService"), allocator, v89 + 1);
  v128 = EditMentorNewWithChildVideoMentor((_QWORD *)v89[25], (const void *)v89[1], v139);
  if ((_DWORD)v128)
  {
LABEL_221:
    v29 = v128;
  }
  else
  {
    v29 = 0;
    if (!v89[27])
      v89[27] = CFDictionaryCreate(allocator, (const void **)kMentorKey_ModeChangePolicy, (const void **)kMentorModeChangePolicy_RepurposeOrCancelPreviousOutput, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  }
  CFRelease(v127);
LABEL_201:
  if (v145)
    CFRelease(v145);
  if (v142)
    CFRelease(v142);
  if (!(_DWORD)v29)
  {
LABEL_206:
    v131 = CFGetAllocator(a2);
    v132 = CFDictionaryCreate(v131, (const void **)&keys, (const void **)&v162, 1, MEMORY[0x1E0C9B390], 0);
    if (v132)
    {
      v133 = (uint64_t)v132;
      v134 = v162;
      *((_OWORD *)v162 + 6) = v147;
      v134[14] = v11;
      v135 = (const void *)v134[16];
      v134[16] = v132;
      CFRetain(v132);
      if (v135)
        CFRelease(v135);
      v136 = *((_QWORD *)v162 + 26);
      v137 = (const void *)*((_QWORD *)v162 + 27);
      lhs = v159;
      EditMentorSetModeToScrub(v136, (uint64_t)&lhs, v137, 0, v133, 0);
    }
    Basic = FigSignalErrorAt();
    goto LABEL_217;
  }
LABEL_210:
  if (v154)
    CFRelease(v154);
  if (v155)
    CFRelease(v155);
  return v29;
}

void aig_cleanupImageRetrievalObjects(CFTypeRef *a1)
{
  CFTypeRef v2;
  CFTypeRef v3;
  CFTypeRef v4;
  CFTypeRef v5;
  void (*v6)(CFTypeRef);
  CFTypeRef v7;
  CFTypeRef v8;
  CFTypeRef v9;
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef v12;
  CFTypeRef v13;

  aig_cleanupVideoRenderPipelineAndMentorsForImageRetrieval(a1);
  v2 = a1[21];
  if (v2)
  {
    CFRelease(v2);
    a1[21] = 0;
  }
  v3 = a1[20];
  if (v3)
  {
    CFRelease(v3);
    a1[20] = 0;
  }
  v4 = a1[18];
  if (v4)
  {
    CFRelease(v4);
    a1[18] = 0;
  }
  v5 = a1[6];
  if (v5)
  {
    v6 = *(void (**)(CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
    if (v6)
      v6(v5);
    v7 = a1[6];
    if (v7)
    {
      CFRelease(v7);
      a1[6] = 0;
    }
  }
  if (a1[11])
    a1[11] = 0;
  v8 = a1[16];
  if (v8)
  {
    CFRelease(v8);
    a1[16] = 0;
  }
  v9 = a1[2];
  if (v9)
  {
    CFRelease(v9);
    a1[2] = 0;
  }
  v10 = a1[3];
  if (v10)
  {
    CFRelease(v10);
    a1[3] = 0;
  }
  v11 = a1[24];
  if (v11)
  {
    CFRelease(v11);
    a1[24] = 0;
  }
  if (*a1)
  {
    CFRelease(*a1);
    *a1 = 0;
  }
  v12 = a1[27];
  if (v12)
  {
    CFRelease(v12);
    a1[27] = 0;
  }
  v13 = a1[10];
  if (v13)
  {
    CFRelease(v13);
    a1[10] = 0;
  }
}

void aig_cleanupVideoRenderPipelineAndMentorsForImageRetrieval(_QWORD *a1)
{
  const void *v2;
  _QWORD *v3;
  _QWORD **v4;
  const void *v5;
  const void *v6;
  uint64_t FigBaseObject;
  _QWORD *v8;
  void (*v9)(uint64_t);
  const void *v10;
  const void *v11;
  const void *v12;

  v2 = (const void *)a1[1];
  if (v2)
  {
    CFRelease(v2);
    a1[1] = 0;
  }
  v3 = (_QWORD *)a1[25];
  if (v3)
    VideoMentorInvalidate(v3);
  v4 = (_QWORD **)a1[26];
  if (v4)
    EditMentorDispose(v4);
  if (a1[25])
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    VideoMentorDispose((_QWORD *)a1[25]);
  }
  v5 = (const void *)a1[23];
  if (v5)
  {
    CFRelease(v5);
    a1[23] = 0;
  }
  v6 = (const void *)a1[22];
  if (v6)
  {
    CFRelease(v6);
    a1[22] = 0;
  }
  if (a1[19])
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    FigBaseObject = FigRenderPipelineGetFigBaseObject(a1[19]);
    v8 = *(_QWORD **)(CMBaseObjectGetVTable() + 8);
    if (*v8 >= 2uLL)
    {
      v9 = (void (*)(uint64_t))v8[8];
      if (v9)
        v9(FigBaseObject);
    }
    v10 = (const void *)a1[19];
    if (v10)
    {
      CFRelease(v10);
      a1[19] = 0;
    }
  }
  v11 = (const void *)a1[17];
  if (v11)
  {
    CFRelease(v11);
    a1[17] = 0;
  }
  v12 = (const void *)a1[5];
  if (v12)
  {
    CFRelease(v12);
    a1[5] = 0;
  }
}

uint64_t aig_handleMentorStoppingDueToErrorNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  FAIGCommon_handleRenderPipelineDecodeErrorNotification(a1, a2, a3, a4, a5);
  return FigSemaphoreSignal();
}

uint64_t aig_processImageRequestThread(const void *a1)
{
  uint64_t DerivedStorage;
  const void *v2;
  const __CFAllocator **v3;
  CFTypeRef v4;
  const __CFAllocator *v5;
  const void *v6;
  uint64_t CMBaseObject;
  void (*v8)(uint64_t, const __CFString *, const __CFAllocator *, char *);
  uint64_t v9;
  int v10;
  const __CFDictionary *v11;
  const void *Value;
  const void *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CFIndex v18;
  __CFString **v19;
  __CFString *v20;
  CFDictionaryRef v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  CFTypeRef v25;
  CFTypeRef v26;
  uint64_t v27;
  const void *v28;
  int v29;
  CMTimeEpoch v31;
  __int128 v32;
  CMTime v34;
  __int128 v35;
  CMTimeEpoch v36;
  CFTypeRef cf;
  uint64_t v38;
  _OWORD v39[14];
  CMTime time;
  int valuePtr;
  void *values[3];
  void *keys[5];

  keys[3] = *(void **)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(v39, 0, sizeof(v39));
  cf = 0;
  v38 = -1;
  v32 = *MEMORY[0x1E0CA2E18];
  v35 = *MEMORY[0x1E0CA2E18];
  v31 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v36 = v31;
  v2 = *(const void **)(DerivedStorage + 24);
  v3 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
  if (v2)
  {
    v4 = CFRetain(v2);
    v5 = *v3;
    if (v4)
    {
      v6 = v4;
      CMBaseObject = FigAssetGetCMBaseObject(v4);
      v8 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
      if (v8)
        v8(CMBaseObject, CFSTR("assetProperty_CPEProtector"), v5, (char *)&v39[1] + 8);
      CFRelease(v6);
    }
  }
  else
  {
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  }
  while (1)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 56));
    v9 = *(_QWORD *)(DerivedStorage + 64);
    if (!v9)
      break;
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 56));
    if (*(_BYTE *)(v9 + 8) || *(_BYTE *)DerivedStorage)
    {
      v10 = -12432;
    }
    else
    {
      v29 = aig_createImageAtTimeInternal(v39, a1, &v38, v9, &cf, (uint64_t)&v35);
      if (*(_BYTE *)DerivedStorage)
      {
        v10 = -12785;
      }
      else if (*(_BYTE *)(v9 + 8))
      {
        v10 = -12432;
      }
      else
      {
        v10 = v29;
      }
    }
    v11 = *(const __CFDictionary **)(v9 + 40);
    if (v11)
    {
      Value = CFDictionaryGetValue(v11, CFSTR("RequestID"));
      v13 = Value;
      if (Value)
        CFRetain(Value);
    }
    else
    {
      v13 = 0;
    }
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 56));
    v14 = *(uint64_t **)(DerivedStorage + 64);
    v15 = *v14;
    *(_QWORD *)(DerivedStorage + 64) = *v14;
    if (!v15)
    {
      *(_QWORD *)(DerivedStorage + 72) = DerivedStorage + 64;
      *(_BYTE *)(DerivedStorage + 96) = 0;
    }
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 56));
    FAIGCommon_releaseImageRequest((_QWORD *)v9);
    v16 = (uint64_t)cf;
    *(_OWORD *)&v34.value = v35;
    v34.epoch = v36;
    valuePtr = v10;
    memset(keys, 0, 24);
    memset(values, 0, sizeof(values));
    v17 = CMBaseObjectGetDerivedStorage();
    if (v10)
    {
      keys[0] = CFSTR("Result");
      values[0] = CFNumberCreate(v5, kCFNumberSInt32Type, &valuePtr);
      v18 = 1;
      v19 = kFigAssetImageGeneratorNotification_FailedToGenerateCGImage;
    }
    else
    {
      if (v16)
      {
        keys[0] = CFSTR("CGImage");
        values[0] = (void *)CFRetain((CFTypeRef)v16);
        v16 = 1;
      }
      keys[v16] = CFSTR("FigTime");
      time = v34;
      values[v16] = CMTimeCopyAsDictionary(&time, v5);
      v18 = v16 + 1;
      v19 = kFigAssetImageGeneratorNotification_DidGenerateCGImage;
    }
    v20 = *v19;
    if (v13)
    {
      keys[v18] = CFSTR("RequestID");
      values[v18++] = (void *)CFRetain(v13);
    }
    v21 = CFDictionaryCreate(v5, (const void **)keys, (const void **)values, v18, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v22 = MEMORY[0x19402D578](v17 + 112);
    if (v22)
    {
      v23 = v22;
      v24 = malloc_type_calloc(1uLL, 0x18uLL, 0xE00406B48E91AuLL);
      if (v20)
        v25 = CFRetain(v20);
      else
        v25 = 0;
      v24[1] = v25;
      if (v21)
        v26 = CFRetain(v21);
      else
        v26 = 0;
      v24[2] = v26;
      *v24 = v23;
      dispatch_async_f((dispatch_queue_t)sAIGNotificationQueue, v24, (dispatch_function_t)aig_postNotificationAsynchronously);
    }
    if (v21)
      CFRelease(v21);
    v27 = 0;
    do
    {
      v28 = values[v27];
      if (v28)
      {
        CFRelease(v28);
        values[v27] = 0;
      }
      ++v27;
    }
    while (v18 != v27);
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (v13)
      CFRelease(v13);
    v35 = v32;
    v36 = v31;
    if (!v15)
      goto LABEL_50;
  }
  *(_BYTE *)(DerivedStorage + 96) = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 56));
LABEL_50:
  aig_cleanupImageRetrievalObjects((CFTypeRef *)v39);
  return 0;
}

void aig_postNotificationAsynchronously(uint64_t a1)
{
  const void *v2;
  const void *v3;

  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 16);
  if (v3)
    CFRelease(v3);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  free((void *)a1);
}

uint64_t TrackFragmentBuilderCreate(int a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4, CFAllocatorRef allocator, _QWORD *a6)
{
  _OWORD *v12;
  _OWORD *v13;
  CFTypeRef v14;
  uint64_t v15;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v17;
  uint64_t v18;
  uint64_t v19;
  void *v21;
  uint64_t v22;
  void *context;

  if (!a6)
  {
    v19 = FigSignalErrorAt();
    goto LABEL_17;
  }
  v12 = CFAllocatorAllocate(allocator, 96, 0);
  v13 = v12;
  if (!v12)
  {
    v22 = FigSignalErrorAt();
    goto LABEL_23;
  }
  v12[4] = 0u;
  v12[5] = 0u;
  v12[2] = 0u;
  v12[3] = 0u;
  *v12 = 0u;
  v12[1] = 0u;
  if (allocator)
    v14 = CFRetain(allocator);
  else
    v14 = 0;
  *(_QWORD *)v13 = v14;
  *((_DWORD *)v13 + 2) = a1;
  *((_QWORD *)v13 + 5) = a3;
  *((_QWORD *)v13 + 10) = 0;
  v13[3] = xmmword_1932FD350;
  v13[4] = vdupq_n_s64(0x8000000000000000);
  if (a2)
  {
    context = 0;
    v15 = MovieSampleGroupCollectionCreate(allocator, (uint64_t *)&context);
    if ((_DWORD)v15)
    {
      v19 = v15;
      if (!context)
        goto LABEL_18;
      v21 = context;
      goto LABEL_20;
    }
    CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)trbCreateSampleGroupCollectionWithDescriptionArraysApplierFunction, context);
    *((_QWORD *)v13 + 4) = context;
  }
  if (a4)
  {
    Mutable = CFDictionaryCreateMutable(allocator, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v17 = Mutable;
      v18 = FigCFDictionarySetInt32();
      if (!(_DWORD)v18)
      {
        v18 = FigCFDictionarySetInt32();
        if (!(_DWORD)v18)
        {
          v18 = FigCFDictionarySetInt32();
          if (!(_DWORD)v18)
          {
            v18 = FigCFDictionarySetInt32();
            if (!(_DWORD)v18)
            {
              *((_QWORD *)v13 + 2) = v17;
              goto LABEL_16;
            }
          }
        }
      }
      v19 = v18;
      v21 = v17;
LABEL_20:
      CFRelease(v21);
      goto LABEL_18;
    }
    v22 = FigSignalErrorAt();
    if (!(_DWORD)v22)
      goto LABEL_16;
LABEL_23:
    v19 = v22;
    goto LABEL_18;
  }
LABEL_16:
  v19 = 0;
  *a6 = v13;
LABEL_17:
  v13 = 0;
LABEL_18:
  TrackFragmentBuilderRelease((const __CFAllocator **)v13);
  return v19;
}

void TrackFragmentBuilderRelease(const __CFAllocator **ptr)
{
  const __CFAllocator *v2;
  const __CFAllocator *v3;
  const __CFAllocator *v4;
  const __CFAllocator *v5;
  const __CFAllocator *v6;

  if (ptr)
  {
    v2 = *ptr;
    v3 = ptr[11];
    if (v3)
    {
      tfbTrackFragmentRelease(*ptr, v3);
      ptr[11] = 0;
    }
    v4 = ptr[2];
    if (v4)
      CFRelease(v4);
    v5 = ptr[3];
    if (v5)
      CFRelease(v5);
    v6 = ptr[4];
    if (v6)
      CFRelease(v6);
    CFAllocatorDeallocate(v2, ptr);
    if (v2)
      CFRelease(v2);
  }
}

void TrackFragmentBuilderSampleTableRelease(uint64_t a1)
{
  void *v2;

  if (a1)
  {
    v2 = *(void **)(a1 + 88);
    if (v2)
    {
      tfbTrackFragmentRelease(*(CFAllocatorRef *)a1, v2);
      *(_QWORD *)(a1 + 88) = 0;
    }
  }
}

uint64_t TrackFragmentBuilderGetMinDecodeToDisplay(uint64_t a1, _DWORD *a2)
{
  if (!a1 || !a2)
    return FigSignalErrorAt();
  *a2 = *(_DWORD *)(a1 + 84);
  return 0;
}

uint64_t TrackFragmentBuilderGetMaxDecodeToDisplay(uint64_t a1, _DWORD *a2)
{
  if (!a1 || !a2)
    return FigSignalErrorAt();
  *a2 = *(_DWORD *)(a1 + 80);
  return 0;
}

uint64_t TrackFragmentBuilderGetTrackFragmentHeaderSampleDescriptionIndex(uint64_t a1, _DWORD *a2, _BYTE *a3)
{
  uint64_t v5;
  char Int32IfPresent;

  if (!a1 || !a2 || !a3)
    return FigSignalErrorAt();
  v5 = *(_QWORD *)(a1 + 88);
  if (v5)
  {
    Int32IfPresent = FigCFDictionaryGetInt32IfPresent();
    LODWORD(v5) = 0;
  }
  else
  {
    Int32IfPresent = 0;
  }
  *a2 = v5;
  *a3 = Int32IfPresent;
  return 0;
}

uint64_t TrackFragmentBuilderGetTrackFragmentHeaderDefaultSampleDuration(uint64_t a1, _DWORD *a2, _BYTE *a3)
{
  uint64_t v5;
  char Int32IfPresent;

  if (!a1 || !a2 || !a3)
    return FigSignalErrorAt();
  v5 = *(_QWORD *)(a1 + 88);
  if (v5)
  {
    Int32IfPresent = FigCFDictionaryGetInt32IfPresent();
    LODWORD(v5) = 0;
  }
  else
  {
    Int32IfPresent = 0;
  }
  *a2 = v5;
  *a3 = Int32IfPresent;
  return 0;
}

uint64_t TrackFragmentBuilderGetTrackFragmentHeaderDefaultSampleSize(uint64_t a1, _DWORD *a2, _BYTE *a3)
{
  uint64_t v5;
  char Int32IfPresent;

  if (!a1 || !a2 || !a3)
    return FigSignalErrorAt();
  v5 = *(_QWORD *)(a1 + 88);
  if (v5)
  {
    Int32IfPresent = FigCFDictionaryGetInt32IfPresent();
    LODWORD(v5) = 0;
  }
  else
  {
    Int32IfPresent = 0;
  }
  *a2 = v5;
  *a3 = Int32IfPresent;
  return 0;
}

uint64_t TrackFragmentBuilderGetTrackFragmentHeaderDefaultSampleFlags(uint64_t a1, _DWORD *a2, _BYTE *a3)
{
  uint64_t v5;
  char Int32IfPresent;

  if (!a1 || !a2 || !a3)
    return FigSignalErrorAt();
  v5 = *(_QWORD *)(a1 + 88);
  if (v5)
  {
    Int32IfPresent = FigCFDictionaryGetInt32IfPresent();
    LODWORD(v5) = 0;
  }
  else
  {
    Int32IfPresent = 0;
  }
  *a2 = v5;
  *a3 = Int32IfPresent;
  return 0;
}

uint64_t TrackFragmentBuilderGetSampleAuxInformation(uint64_t a1, _BYTE *a2, _DWORD *a3, _QWORD *a4, _QWORD *a5, _BYTE *a6)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  if (a1)
  {
    v11 = *(_QWORD *)(a1 + 88);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 48);
      if (v12 && CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(v12 + 24)))
      {
        LOBYTE(v11) = *(_BYTE *)v12;
        v13 = *(_DWORD *)(v12 + 4);
        v14 = *(_QWORD *)(v12 + 8);
        v15 = *(_QWORD *)(v12 + 24);
        v16 = *(_BYTE *)(v12 + 41);
LABEL_8:
        *a2 = v11;
        *a3 = v13;
        *a4 = v14;
        *a5 = v15;
        *a6 = v16;
        return 0;
      }
      LOBYTE(v11) = 0;
    }
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    goto LABEL_8;
  }
  return FigSignalErrorAt();
}

uint64_t TrackFragmentBuilderCopySampleGroupDescriptionArrays(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  CFTypeRef v4;

  if (!a1 || !a2)
    return FigSignalErrorAt();
  v3 = *(_QWORD *)(a1 + 88);
  if (v3)
  {
    v4 = *(CFTypeRef *)(v3 + 64);
    if (v4)
      v4 = CFRetain(v4);
  }
  else
  {
    v4 = 0;
  }
  *a2 = v4;
  return 0;
}

uint64_t TrackFragmentBuilderCopySampleGroupArray(uint64_t a1, CFArrayRef *a2)
{
  uint64_t v3;
  uint64_t v4;
  CFArrayRef v5;

  if (!a1 || !a2)
    return FigSignalErrorAt();
  v3 = *(_QWORD *)(a1 + 88);
  if (v3 && (v4 = *(_QWORD *)(v3 + 56)) != 0)
    v5 = MovieSampleGroupCollectionCopySampleGroupArray(*(const __CFAllocator **)a1, v4);
  else
    v5 = 0;
  *a2 = v5;
  return 0;
}

uint64_t TrackFragmentBuilderSetInitialBaseMediaDecodeTimeValue(uint64_t a1, uint64_t a2)
{
  CFNumberRef v3;
  CFNumberRef v4;
  const void *v5;
  uint64_t valuePtr;

  valuePtr = a2;
  if (!a1)
    return FigSignalErrorAt();
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &valuePtr);
  if (!v3)
    return FigSignalErrorAt();
  v4 = v3;
  v5 = *(const void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v3;
  CFRetain(v3);
  if (v5)
    CFRelease(v5);
  CFRelease(v4);
  return 0;
}

uint64_t TrackFragmentBuilderGetTrackFragmentBaseMediaDecodeTimeValue(_QWORD *a1, _QWORD *a2, char *a3)
{
  uint64_t v6;
  const __CFNumber *v7;
  uint64_t v8;
  char v9;
  uint64_t valuePtr;

  if (!a1 || !a2 || !a3)
    return FigSignalErrorAt();
  v6 = a1[11];
  if (v6)
  {
    v7 = (const __CFNumber *)a1[3];
    if (v7)
    {
      valuePtr = 0;
      CFNumberGetValue(v7, kCFNumberSInt64Type, &valuePtr);
      v8 = *(_QWORD *)(v6 + 16) - a1[5] + valuePtr;
    }
    else
    {
      v8 = *(_QWORD *)(v6 + 16);
    }
    v9 = 1;
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  *a2 = v8;
  *a3 = v9;
  return 0;
}

uint64_t TrackFragmentBuilderGetTrackFragmentLowestDisplayStartTimeValue(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  const __CFNumber *v5;
  uint64_t v6;
  uint64_t valuePtr;

  if (!a1 || !a2)
    return FigSignalErrorAt();
  v4 = a1[11];
  if (v4)
  {
    v5 = (const __CFNumber *)a1[3];
    if (v5)
    {
      valuePtr = 0;
      CFNumberGetValue(v5, kCFNumberSInt64Type, &valuePtr);
      v6 = *(_QWORD *)(v4 + 32) - a1[5] + valuePtr;
    }
    else
    {
      v6 = *(_QWORD *)(v4 + 32);
    }
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return 0;
}

uint64_t TrackFragmentBuilderGetTrackFragmentMediaDecodeDuration(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  if (!a1 || !a2)
    return FigSignalErrorAt();
  v2 = *(_QWORD *)(a1 + 88);
  if (v2)
    v2 = *(_QWORD *)(v2 + 24);
  *a2 = v2;
  return 0;
}

uint64_t TrackFragmentBuilderNumTrackRuns(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  const __CFArray *v4;

  if (!a1 || !a2)
    return FigSignalErrorAt();
  v3 = *(_QWORD *)(a1 + 88);
  if (v3)
  {
    v4 = *(const __CFArray **)(v3 + 40);
    if (v4)
      LODWORD(v4) = CFArrayGetCount(v4);
  }
  else
  {
    LODWORD(v4) = 0;
  }
  *a2 = (_DWORD)v4;
  return 0;
}

uint64_t TrackFragmentBuilderNumSamplesAtTrackRunIndex(uint64_t a1, CFIndex a2, _DWORD *a3)
{
  uint64_t result;
  _DWORD *v5;

  v5 = 0;
  if (!a1 || !a3)
    return FigSignalErrorAt();
  result = tfbGetTrackRunAtIndex(a1, a2, (const void **)&v5);
  if (!(_DWORD)result)
    *a3 = *v5;
  return result;
}

uint64_t tfbGetTrackRunAtIndex(uint64_t a1, CFIndex idx, const void **a3)
{
  int v4;
  uint64_t v6;
  const __CFArray *v7;

  v4 = idx;
  v6 = *(_QWORD *)(a1 + 88);
  if (v6)
  {
    v7 = *(const __CFArray **)(v6 + 40);
    if (v7)
      LODWORD(v7) = CFArrayGetCount(v7);
  }
  else
  {
    LODWORD(v7) = 0;
  }
  if (v4 < 0 || (int)v7 <= v4)
    return FigSignalErrorAt();
  *a3 = CFArrayGetValueAtIndex(*(CFArrayRef *)(*(_QWORD *)(a1 + 88) + 40), v4);
  return 0;
}

uint64_t TrackFragmentBuilderGetDataOffsetAtTrackRunIndex(uint64_t a1, CFIndex a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v5;

  v5 = 0;
  if (!a1 || !a3)
    return FigSignalErrorAt();
  result = tfbGetTrackRunAtIndex(a1, a2, (const void **)&v5);
  if (!(_DWORD)result)
    *a3 = v5[1];
  return result;
}

uint64_t TrackFragmentBuilderGetFirstSampleFlagsAtTrackRunIndex(uint64_t a1, CFIndex a2, _DWORD *a3, _BYTE *a4)
{
  uint64_t result;
  _DWORD *v7;
  _DWORD *v8;

  v8 = 0;
  if (!a1 || !a3 || !a4)
    return FigSignalErrorAt();
  result = tfbGetTrackRunAtIndex(a1, a2, (const void **)&v8);
  if (!(_DWORD)result)
  {
    v7 = v8;
    *a3 = v8[5];
    *a4 = *((_BYTE *)v7 + 16);
  }
  return result;
}

uint64_t TrackFragmentBuilderGetSampleDurationArrayBbufAtTrackRunIndex(uint64_t a1, CFIndex a2, _DWORD *a3, _QWORD *a4)
{
  if (!a1 || !a3 || !a4)
    return FigSignalErrorAt();
  tfbGetSampleValueArrayBbufAtTrackRunIndex(a1, a2, CFSTR("SampleDurationKey"), a3, a4);
  return 0;
}

uint64_t tfbGetSampleValueArrayBbufAtTrackRunIndex(uint64_t a1, CFIndex a2, const void *a3, _DWORD *a4, _QWORD *a5)
{
  uint64_t result;
  int v9;
  uint64_t v10;
  CFDictionaryRef *v11;

  v11 = 0;
  result = tfbGetTrackRunAtIndex(a1, a2, (const void **)&v11);
  if (!(_DWORD)result)
  {
    result = (uint64_t)CFDictionaryGetValue(v11[3], a3);
    if (result)
    {
      v9 = *(_DWORD *)(result + 8);
      v10 = *(_QWORD *)(result + 16);
    }
    else
    {
      v9 = 0;
      v10 = 0;
    }
    *a4 = v9;
    *a5 = v10;
  }
  return result;
}

uint64_t TrackFragmentBuilderGetSampleSizeArrayBbufAtTrackRunIndex(uint64_t a1, CFIndex a2, _DWORD *a3, _QWORD *a4)
{
  if (!a1 || !a3 || !a4)
    return FigSignalErrorAt();
  tfbGetSampleValueArrayBbufAtTrackRunIndex(a1, a2, CFSTR("SampleSizeKey"), a3, a4);
  return 0;
}

uint64_t TrackFragmentBuilderGetSampleFlagsArrayBbufAtTrackRunIndex(uint64_t a1, CFIndex a2, _DWORD *a3, _QWORD *a4)
{
  if (!a1 || !a3 || !a4)
    return FigSignalErrorAt();
  tfbGetSampleValueArrayBbufAtTrackRunIndex(a1, a2, CFSTR("SampleFlagsKey"), a3, a4);
  return 0;
}

uint64_t TrackFragmentBuilderGetSampleCompositionTimeOffsetArrayBbufAtTrackRunIndex(uint64_t a1, CFIndex a2, _DWORD *a3, _QWORD *a4)
{
  if (!a1 || !a3 || !a4)
    return FigSignalErrorAt();
  tfbGetSampleValueArrayBbufAtTrackRunIndex(a1, a2, CFSTR("SampleCompositionTimeOffsetKey"), a3, a4);
  return 0;
}

uint64_t TrackFragmentBuilderAppendSampleInformation(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, unint64_t a6, _QWORD *a7, unint64_t a8, uint64_t a9, const __CFArray *a10, uint64_t a11, uint64_t *a12, _QWORD *a13)
{
  const __CFAllocator *v15;
  _QWORD *v17;
  _QWORD *v18;
  CFMutableDictionaryRef Mutable;
  CFMutableArrayRef v20;
  uint64_t AudioRollRecoveryValueFromSampleBufferAttachment;
  _OWORD *v22;
  _QWORD *v23;
  CFMutableDictionaryRef v24;
  unint64_t v25;
  int v26;
  CFIndex v27;
  const __CFDictionary *ValueAtIndex;
  const __CFData *Value;
  const __CFData *v30;
  const __CFAllocator *v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned __int8 *v35;
  CFTypeRef v36;
  CFIndex Length;
  const __CFData *v38;
  uint64_t v39;
  CFIndex v40;
  uint64_t v41;
  CFTypeRef v42;
  uint64_t v43;
  uint64_t CurrentTrackRun;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  BOOL v49;
  int v50;
  CFIndex v51;
  const void *v52;
  unint64_t v53;
  unsigned int v54;
  CFIndex v55;
  const __CFDictionary *v56;
  unint64_t v57;
  unsigned int v58;
  CFIndex v59;
  unint64_t v60;
  unsigned int v61;
  CFIndex v62;
  unint64_t v63;
  unsigned int v64;
  unint64_t v65;
  unsigned int v66;
  unint64_t v67;
  unsigned int v68;
  unint64_t v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t Basic;
  unsigned int v74;
  CFIndex v75;
  const void *v76;
  unint64_t v77;
  unsigned int v78;
  CFIndex v79;
  int SeamUUIDBytesFromSampleAttachmentArray;
  unint64_t v81;
  unsigned int v82;
  unint64_t v83;
  unsigned int v84;
  unint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  void *v109;
  void *key;
  CFIndex Count;
  const __CFAllocator *v112;
  CFDataRef theData;
  uint64_t v115;
  CFTypeRef v116;
  CFUUIDBytes v117;
  int v118;

  if (a1 && a7 && a9)
  {
    if (a2)
    {
      v15 = *(const __CFAllocator **)a1;
      if (!*(_QWORD *)(a1 + 88))
      {
        v17 = CFAllocatorAllocate(*(CFAllocatorRef *)a1, 72, 0);
        v18 = v17;
        if (!v17)
          goto LABEL_170;
        v17[8] = 0;
        *((_OWORD *)v17 + 2) = 0u;
        *((_OWORD *)v17 + 3) = 0u;
        *(_OWORD *)v17 = 0u;
        *((_OWORD *)v17 + 1) = 0u;
        Mutable = CFDictionaryCreateMutable(v15, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v18[1] = Mutable;
        if (!Mutable)
          goto LABEL_170;
        v20 = CFArrayCreateMutable(v15, 0, 0);
        v18[5] = v20;
        if (v20)
        {
          v18[2] = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 40);
          v18[4] = 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
LABEL_170:
          CurrentTrackRun = FigSignalErrorAt();
          tfbTrackFragmentRelease(v15, v18);
          v18 = 0;
          if ((_DWORD)CurrentTrackRun)
            return CurrentTrackRun;
        }
        *(_QWORD *)(a1 + 88) = v18;
        AudioRollRecoveryValueFromSampleBufferAttachment = tfbSetTrackFragmentHeaderDefaultValueIfNeeded(a1, CFSTR("SampleDescriptionIndexKey"), a4);
        if ((_DWORD)AudioRollRecoveryValueFromSampleBufferAttachment)
          return AudioRollRecoveryValueFromSampleBufferAttachment;
        v15 = *(const __CFAllocator **)a1;
      }
      v22 = CFAllocatorAllocate(v15, 32, 0);
      v23 = v22;
      if (v22
        && (*v22 = 0u,
            v22[1] = 0u,
            v24 = CFDictionaryCreateMutable(v15, 4, MEMORY[0x1E0C9B390], 0),
            (v23[3] = v24) != 0))
      {
        v23[1] = a3;
        CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(a1 + 88) + 40), v23);
        tfbTrackRunRelease(v15, 0);
      }
      else
      {
        CurrentTrackRun = FigSignalErrorAt();
        tfbTrackRunRelease(v15, (CFDictionaryRef *)v23);
        if ((_DWORD)CurrentTrackRun)
          return CurrentTrackRun;
      }
    }
    AudioRollRecoveryValueFromSampleBufferAttachment = tfbAddSampleToSampleTable((const __CFAllocator **)a1, a5, a6, (uint64_t)a7, CFSTR("SampleDurationKey"), (uint64_t (*)(unint64_t, uint64_t, uint64_t))tfbGetSampleDurationAtIndexFunc);
    if ((_DWORD)AudioRollRecoveryValueFromSampleBufferAttachment)
      return AudioRollRecoveryValueFromSampleBufferAttachment;
    AudioRollRecoveryValueFromSampleBufferAttachment = tfbAddSampleToSampleTable((const __CFAllocator **)a1, a5, a8, a9, CFSTR("SampleSizeKey"), (uint64_t (*)(unint64_t, uint64_t, uint64_t))tfbGetSampleSizeAtIndexFunc);
    if ((_DWORD)AudioRollRecoveryValueFromSampleBufferAttachment)
      return AudioRollRecoveryValueFromSampleBufferAttachment;
    v25 = a10 ? CFArrayGetCount(a10) : 0;
    AudioRollRecoveryValueFromSampleBufferAttachment = tfbAddSampleToSampleTable((const __CFAllocator **)a1, a5, v25, (uint64_t)a10, CFSTR("SampleFlagsKey"), (uint64_t (*)(unint64_t, uint64_t, uint64_t))tfbGetSampleFlagsAtIndexFunc);
    if ((_DWORD)AudioRollRecoveryValueFromSampleBufferAttachment)
      return AudioRollRecoveryValueFromSampleBufferAttachment;
    v26 = *(_DWORD *)(a1 + 8);
    if (v26 == 1635088502 || v26 == 1986618469 || v26 == 1885954932)
    {
      AudioRollRecoveryValueFromSampleBufferAttachment = tfbAddSampleToSampleTable((const __CFAllocator **)a1, a5, a6, (uint64_t)a7, CFSTR("SampleCompositionTimeOffsetKey"), (uint64_t (*)(unint64_t, uint64_t, uint64_t))tfbGetSampleCompositionTimeOffsetAtIndexFunc);
      if ((_DWORD)AudioRollRecoveryValueFromSampleBufferAttachment)
        return AudioRollRecoveryValueFromSampleBufferAttachment;
    }
    if (a10)
    {
      Count = CFArrayGetCount(a10);
      if (Count >= 1)
      {
        v27 = 0;
        key = (void *)*MEMORY[0x1E0CA25B8];
        v109 = (void *)*MEMORY[0x1E0CA25C0];
        while (1)
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a10, v27);
          Value = (const __CFData *)CFDictionaryGetValue(ValueAtIndex, key);
          v30 = (const __CFData *)CFDictionaryGetValue(ValueAtIndex, v109);
          if (!((unint64_t)Value | (unint64_t)v30))
            goto LABEL_59;
          theData = v30;
          v31 = *(const __CFAllocator **)a1;
          v32 = *(_QWORD *)(a1 + 88);
          v33 = *(unsigned __int8 **)(v32 + 48);
          if (!v33)
            break;
LABEL_34:
          if (*((_DWORD *)v33 + 1) != *(_DWORD *)v32)
            goto LABEL_70;
          v112 = v31;
          if (Value)
          {
            Length = CFDataGetLength(Value);
            CFDataGetBytePtr(Value);
            AudioRollRecoveryValueFromSampleBufferAttachment = CMByteStreamAppend();
            v38 = theData;
            if ((_DWORD)AudioRollRecoveryValueFromSampleBufferAttachment)
              return AudioRollRecoveryValueFromSampleBufferAttachment;
            if (Length)
              goto LABEL_70;
            if (!theData)
              goto LABEL_44;
          }
          else
          {
            LOBYTE(Length) = 0;
            v38 = theData;
            if (!theData)
            {
LABEL_44:
              if (*((_DWORD *)v33 + 1))
              {
                if (v33[40] == (Value != 0) && v33[41] == (v38 != 0))
                {
                  if (*v33 != Length && !*((_QWORD *)v33 + 2))
                  {
                    v40 = v27;
                    v116 = 0;
                    *(_QWORD *)&v117.byte0 = 0;
                    v115 = 0;
                    v41 = tfbCreateBlockBufferByteStream(v112, (CMBlockBufferRef *)&v117, &v116);
                    if ((_DWORD)v41)
                    {
                      CurrentTrackRun = v41;
                      v42 = v116;
                      if (v116)
                        goto LABEL_65;
                      goto LABEL_66;
                    }
                    v42 = v116;
                    if (*((_DWORD *)v33 + 1))
                    {
                      v43 = CMByteStreamAppend();
                      if (!(_DWORD)v43)
                        v43 = FigSignalErrorAt();
                      CurrentTrackRun = v43;
                      if (v42)
LABEL_65:
                        CFRelease(v42);
LABEL_66:
                      if (*(_QWORD *)&v117.byte0)
                        CFRelease(*(CFTypeRef *)&v117.byte0);
                      v27 = v40;
                      if ((_DWORD)CurrentTrackRun)
                        return CurrentTrackRun;
                    }
                    else
                    {
                      *v33 = 0;
                      *((_QWORD *)v33 + 1) = *(_QWORD *)&v117.byte0;
                      *((_QWORD *)v33 + 2) = v42;
                      v27 = v40;
                    }
                  }
LABEL_55:
                  if (!*((_QWORD *)v33 + 2))
                  {
                    ++*((_DWORD *)v33 + 1);
                    goto LABEL_59;
                  }
                  AudioRollRecoveryValueFromSampleBufferAttachment = CMByteStreamAppend();
                  if ((_DWORD)AudioRollRecoveryValueFromSampleBufferAttachment)
                    return AudioRollRecoveryValueFromSampleBufferAttachment;
                }
LABEL_70:
                v39 = FigSignalErrorAt();
                goto LABEL_71;
              }
              v33[40] = Value != 0;
              v33[41] = v38 != 0;
              *v33 = Length;
              goto LABEL_55;
            }
          }
          if ((unint64_t)CFDataGetLength(v38) >= 0x80000)
            goto LABEL_70;
          v39 = CMByteStreamAppend();
          if (!(_DWORD)v39)
            goto LABEL_70;
LABEL_71:
          CurrentTrackRun = v39;
          if ((_DWORD)v39)
            return CurrentTrackRun;
LABEL_59:
          if (++v27 == Count)
            goto LABEL_81;
        }
        v116 = 0;
        *(_QWORD *)&v117.byte0 = 0;
        v34 = tfbCreateBlockBufferByteStream(v31, (CMBlockBufferRef *)&v117, &v116);
        if (!(_DWORD)v34)
        {
          v35 = (unsigned __int8 *)CFAllocatorAllocate(v31, 48, 0);
          if (v35)
          {
            v33 = v35;
            *((_OWORD *)v35 + 1) = 0u;
            *((_OWORD *)v35 + 2) = 0u;
            *(_OWORD *)v35 = 0u;
            v36 = v116;
            *((_QWORD *)v35 + 3) = *(_QWORD *)&v117.byte0;
            *((_QWORD *)v35 + 4) = v36;
LABEL_33:
            *(_QWORD *)(v32 + 48) = v33;
            goto LABEL_34;
          }
          v34 = FigSignalErrorAt();
        }
        CurrentTrackRun = v34;
        if (v116)
          CFRelease(v116);
        if (*(_QWORD *)&v117.byte0)
          CFRelease(*(CFTypeRef *)&v117.byte0);
        if ((_DWORD)CurrentTrackRun)
          return CurrentTrackRun;
        v33 = 0;
        goto LABEL_33;
      }
    }
LABEL_81:
    v45 = *(_DWORD *)(a1 + 8);
    if (v45 > 1936684397)
    {
      v47 = a6;
      v46 = a5;
      if (v45 != 1986618469)
      {
        if (v45 != 1936684398)
          goto LABEL_131;
        *(_WORD *)&v117.byte0 = 0;
        LOBYTE(v116) = 0;
        LOBYTE(v115) = 0;
        if (a11)
        {
          AudioRollRecoveryValueFromSampleBufferAttachment = FigMovieGetAudioRollRecoveryValueFromSampleBufferAttachment(a11, &v117, (BOOL *)&v116, &v115);
          if ((_DWORD)AudioRollRecoveryValueFromSampleBufferAttachment)
            return AudioRollRecoveryValueFromSampleBufferAttachment;
          v48 = *(unsigned __int16 *)&v117.byte0;
          if ((_BYTE)v116)
            v49 = v115 == 0;
          else
            v49 = 1;
          v50 = !v49;
        }
        else
        {
          v50 = 0;
          v48 = 0;
        }
        *(_WORD *)&v117.byte0 = __rev16(v48);
        Basic = MovieSampleGroupTypeSpecMakeBasic(1919904876);
        AudioRollRecoveryValueFromSampleBufferAttachment = tfbAddSampleGroupForGroupType(a1, Basic, v74, 0, a5, v50, 2uLL, &v117);
        if (!(_DWORD)AudioRollRecoveryValueFromSampleBufferAttachment)
        {
          if (a10)
          {
            if (a5 >= 1)
            {
              v75 = 0;
              while (1)
              {
                *(_WORD *)&v117.byte0 = 0;
                LOBYTE(v116) = 0;
                v76 = CFArrayGetValueAtIndex(a10, v75);
                AudioRollRecoveryValueFromSampleBufferAttachment = FigMovieGetAudioIndependentSampleDecoderRefreshCountFromSampleAttachment((uint64_t)v76, &v117, &v116);
                if ((_DWORD)AudioRollRecoveryValueFromSampleBufferAttachment)
                  return AudioRollRecoveryValueFromSampleBufferAttachment;
                *(_WORD *)&v117.byte0 = bswap32(*(unsigned __int16 *)&v117.byte0) >> 16;
                v77 = MovieSampleGroupTypeSpecMakeBasic(1886547820);
                AudioRollRecoveryValueFromSampleBufferAttachment = tfbAddSampleGroupForGroupType(a1, v77, v78, 0, 1u, v116, 2uLL, &v117);
                if ((_DWORD)AudioRollRecoveryValueFromSampleBufferAttachment)
                  return AudioRollRecoveryValueFromSampleBufferAttachment;
                if (a5 == ++v75)
                {
                  v79 = 0;
                  while (1)
                  {
                    *(_QWORD *)&v117.byte0 = 0;
                    *(_QWORD *)&v117.byte8 = 0;
                    SeamUUIDBytesFromSampleAttachmentArray = FigMovieGetSeamUUIDBytesFromSampleAttachmentArray(a10, v79, &v117);
                    v81 = MovieSampleGroupTypeSpecMakeBasic(1936023917);
                    AudioRollRecoveryValueFromSampleBufferAttachment = tfbAddSampleGroupForGroupType(a1, v81, v82, 0, 1u, SeamUUIDBytesFromSampleAttachmentArray, 0x10uLL, &v117);
                    if ((_DWORD)AudioRollRecoveryValueFromSampleBufferAttachment)
                      return AudioRollRecoveryValueFromSampleBufferAttachment;
                    if (a5 == ++v79)
                      goto LABEL_131;
                  }
                }
              }
            }
            goto LABEL_131;
          }
          v83 = MovieSampleGroupTypeSpecMakeBasic(1886547820);
          AudioRollRecoveryValueFromSampleBufferAttachment = tfbAddSampleGroupForGroupType(a1, v83, v84, 0, a5, 0, 0, 0);
          if (!(_DWORD)AudioRollRecoveryValueFromSampleBufferAttachment)
          {
            v70 = 0;
            v72 = 1936023917;
LABEL_130:
            v85 = MovieSampleGroupTypeSpecMakeBasic(v72);
            AudioRollRecoveryValueFromSampleBufferAttachment = tfbAddSampleGroupForGroupType(a1, v85, v86, v70, v46, 0, 0, 0);
            if (!(_DWORD)AudioRollRecoveryValueFromSampleBufferAttachment)
              goto LABEL_131;
          }
        }
        return AudioRollRecoveryValueFromSampleBufferAttachment;
      }
    }
    else
    {
      v47 = a6;
      v46 = a5;
      if (v45 != 1635088502 && v45 != 1885954932)
        goto LABEL_131;
    }
    if (a10)
    {
      if (v46 >= 1)
      {
        v51 = 0;
        while (1)
        {
          v117.byte0 = 0;
          LOBYTE(v116) = 0;
          v52 = CFArrayGetValueAtIndex(a10, v51);
          AudioRollRecoveryValueFromSampleBufferAttachment = FigMovieGetVideoSyncSampleEntryFromSampleAttachment((uint64_t)v52, &v117, (BOOL *)&v116);
          if ((_DWORD)AudioRollRecoveryValueFromSampleBufferAttachment)
            return AudioRollRecoveryValueFromSampleBufferAttachment;
          v53 = MovieSampleGroupTypeSpecMakeBasic(1937337955);
          AudioRollRecoveryValueFromSampleBufferAttachment = tfbAddSampleGroupForGroupType(a1, v53, v54, 0, 1u, v116, 1uLL, &v117);
          if ((_DWORD)AudioRollRecoveryValueFromSampleBufferAttachment)
            return AudioRollRecoveryValueFromSampleBufferAttachment;
          if (v46 == ++v51)
          {
            v55 = 0;
            while (1)
            {
              *(_QWORD *)&v117.byte0 = 0;
              *(_QWORD *)&v117.byte8 = 0;
              v118 = 0;
              LOBYTE(v116) = 0;
              v56 = (const __CFDictionary *)CFArrayGetValueAtIndex(a10, v55);
              AudioRollRecoveryValueFromSampleBufferAttachment = FigMovieGetVideoTemporalLayerEntryFromSampleAttachment(v56, (uint64_t)&v117, (char *)&v116);
              if ((_DWORD)AudioRollRecoveryValueFromSampleBufferAttachment)
                return AudioRollRecoveryValueFromSampleBufferAttachment;
              v57 = MovieSampleGroupTypeSpecMakeBasic(1953719148);
              AudioRollRecoveryValueFromSampleBufferAttachment = tfbAddSampleGroupForGroupType(a1, v57, v58, 1, 1u, v116, 0x14uLL, &v117);
              if ((_DWORD)AudioRollRecoveryValueFromSampleBufferAttachment)
                return AudioRollRecoveryValueFromSampleBufferAttachment;
              if (v46 == ++v55)
              {
                v59 = 0;
                while (1)
                {
                  v117.byte0 = 0;
                  CFArrayGetValueAtIndex(a10, v59);
                  FigCFDictionaryGetBooleanIfPresent();
                  v60 = MovieSampleGroupTypeSpecMakeBasic(1953718643);
                  AudioRollRecoveryValueFromSampleBufferAttachment = tfbAddSampleGroupForGroupType(a1, v60, v61, 1, 1u, v117.byte0, 0, 0);
                  if ((_DWORD)AudioRollRecoveryValueFromSampleBufferAttachment)
                    return AudioRollRecoveryValueFromSampleBufferAttachment;
                  if (v46 == ++v59)
                  {
                    v62 = 0;
                    while (1)
                    {
                      v117.byte0 = 0;
                      CFArrayGetValueAtIndex(a10, v62);
                      FigCFDictionaryGetBooleanIfPresent();
                      v63 = MovieSampleGroupTypeSpecMakeBasic(1937011553);
                      AudioRollRecoveryValueFromSampleBufferAttachment = tfbAddSampleGroupForGroupType(a1, v63, v64, 1, 1u, v117.byte0, 0, 0);
                      if ((_DWORD)AudioRollRecoveryValueFromSampleBufferAttachment)
                        return AudioRollRecoveryValueFromSampleBufferAttachment;
                      if (v46 == ++v62)
                        goto LABEL_131;
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_131:
      v87 = *(_QWORD *)(a1 + 48);
      v88 = v87 + *(_QWORD *)(a1 + 40);
      if (v47 == 1)
      {
        v89 = a7[3] - a7[6];
        v90 = v89 + v88;
        v91 = v89 + v88 + *a7 * (v46 - 1);
        v92 = *a7 * v46;
        v93 = v91 + *a7;
        LODWORD(v94) = v89;
      }
      else if (v47 < 1)
      {
        v92 = 0;
        v90 = 0x7FFFFFFFFFFFFFFFLL;
        v93 = 0x8000000000000000;
        LODWORD(v94) = 0x80000000;
        LODWORD(v89) = 0x7FFFFFFF;
        v91 = 0x8000000000000000;
      }
      else
      {
        v92 = 0;
        v95 = a7 + 3;
        LODWORD(v94) = 0x80000000;
        v91 = 0x8000000000000000;
        v90 = 0x7FFFFFFFFFFFFFFFLL;
        LODWORD(v89) = 0x7FFFFFFF;
        v93 = 0x8000000000000000;
        v96 = v87 + *(_QWORD *)(a1 + 40);
        do
        {
          v97 = *(v95 - 3);
          v98 = *v95 - v95[3];
          v99 = v98 + v96;
          v96 += v97;
          v92 += v97;
          if (v99 < v90)
            v90 = v99;
          v100 = v99 + v97;
          if (v91 < v99)
            v93 = v100;
          if (v91 <= v99)
            v91 = v99;
          if (v98 < (int)v89)
            v89 = *v95 - v95[3];
          if (v98 > (int)v94)
            v94 = *v95 - v95[3];
          v95 += 9;
          --v47;
        }
        while (v47);
      }
      v101 = *(_QWORD *)(a1 + 56);
      if (v90 < v101)
        v101 = v90;
      *(_QWORD *)(a1 + 56) = v101;
      v102 = *(_QWORD *)(a1 + 88);
      v103 = *(_QWORD *)(v102 + 32);
      if (v90 < v103)
        v103 = v90;
      *(_QWORD *)(v102 + 32) = v103;
      if (*(_QWORD *)(a1 + 64) < v91)
      {
        *(_QWORD *)(a1 + 64) = v91;
        *(_QWORD *)(a1 + 72) = v93;
      }
      v104 = *(_DWORD *)(a1 + 84);
      if ((int)v89 < v104)
        v104 = v89;
      if ((int)v94 <= *(_DWORD *)(a1 + 80))
        LODWORD(v94) = *(_DWORD *)(a1 + 80);
      *(_DWORD *)(a1 + 80) = v94;
      *(_DWORD *)(a1 + 84) = v104;
      *(_QWORD *)(a1 + 48) = v92 + v87;
      *(_QWORD *)(v102 + 24) += v92;
      if (a12)
        *a12 = v90;
      if (a13)
        *a13 = v88;
      *(_QWORD *)&v117.byte0 = 0;
      *(_DWORD *)v102 += v46;
      CurrentTrackRun = tfbGetCurrentTrackRun(a1, (const void **)&v117);
      if (!(_DWORD)CurrentTrackRun)
        **(_DWORD **)&v117.byte0 += v46;
      return CurrentTrackRun;
    }
    v65 = MovieSampleGroupTypeSpecMakeBasic(1937337955);
    AudioRollRecoveryValueFromSampleBufferAttachment = tfbAddSampleGroupForGroupType(a1, v65, v66, 0, v46, 0, 0, 0);
    if (!(_DWORD)AudioRollRecoveryValueFromSampleBufferAttachment)
    {
      v67 = MovieSampleGroupTypeSpecMakeBasic(1953719148);
      AudioRollRecoveryValueFromSampleBufferAttachment = tfbAddSampleGroupForGroupType(a1, v67, v68, 1, v46, 0, 0, 0);
      if (!(_DWORD)AudioRollRecoveryValueFromSampleBufferAttachment)
      {
        v69 = MovieSampleGroupTypeSpecMakeBasic(1953718643);
        v70 = 1;
        AudioRollRecoveryValueFromSampleBufferAttachment = tfbAddSampleGroupForGroupType(a1, v69, v71, 1, v46, 0, 0, 0);
        if (!(_DWORD)AudioRollRecoveryValueFromSampleBufferAttachment)
        {
          v72 = 1937011553;
          goto LABEL_130;
        }
      }
    }
    return AudioRollRecoveryValueFromSampleBufferAttachment;
  }
  return FigSignalErrorAt();
}

uint64_t tfbAddSampleToSampleTable(const __CFAllocator **a1, uint64_t a2, unint64_t a3, uint64_t a4, const void *a5, uint64_t (*a6)(unint64_t, uint64_t, uint64_t))
{
  uint64_t CurrentTrackRun;
  const __CFAllocator *v13;
  const __CFArray *v14;
  int v15;
  const __CFAllocator *v16;
  const __CFArray *v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t TrackFragmentGlobalDefaultValue;
  uint64_t v23;
  CFDictionaryRef *v24;
  _DWORD *Value;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  int v33;
  unsigned int v34;
  const void *v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  _OWORD *v39;
  CFTypeRef v40;
  const void *v41;
  const __CFAllocator *allocator;
  const void *v43;
  CFTypeRef cf;
  CFDictionaryRef *v45;
  unsigned int v46;
  _DWORD *v47;

  allocator = *a1;
  cf = 0;
  v45 = 0;
  v43 = 0;
  CurrentTrackRun = tfbGetCurrentTrackRun((uint64_t)a1, (const void **)&v45);
  if ((_DWORD)CurrentTrackRun)
    goto LABEL_42;
  v13 = a1[11];
  if (v13)
  {
    v14 = (const __CFArray *)*((_QWORD *)v13 + 5);
    if (v14)
    {
      if (CFArrayGetCount(v14) == 1 && !*(_DWORD *)v45)
      {
        v15 = a6(a3, a4, 0);
        tfbSetTrackFragmentHeaderDefaultValueIfNeeded((uint64_t)a1, a5, v15);
      }
    }
  }
  if (FigCFEqual())
  {
    v47 = 0;
    v46 = 0;
    CurrentTrackRun = tfbGetCurrentTrackRun((uint64_t)a1, (const void **)&v47);
    if ((_DWORD)CurrentTrackRun)
      goto LABEL_42;
    v16 = a1[11];
    if (v16 && (v17 = (const __CFArray *)*((_QWORD *)v16 + 5)) != 0 && CFArrayGetCount(v17) == 1)
    {
      v18 = v47;
      v19 = *v47;
      if (v19 <= 1 && v19 + a2 >= 2)
      {
        v20 = a6(a3, a4, (1 - v19));
        CurrentTrackRun = tfbGetTrackFragmentGlobalDefaultValue((uint64_t)a1, (uint64_t)CFSTR("SampleFlagsKey"), &v46);
        if (!(_DWORD)CurrentTrackRun)
        {
          v21 = v46;
          if (v46 == v20)
            goto LABEL_22;
          tfbSetTrackFragmentHeaderDefaultValueIfNeeded((uint64_t)a1, CFSTR("SampleFlagsKey"), v20);
LABEL_20:
          *((_BYTE *)v18 + 16) = 1;
          v18[5] = v21;
          goto LABEL_22;
        }
LABEL_42:
        v23 = CurrentTrackRun;
        goto LABEL_46;
      }
    }
    else
    {
      v18 = v47;
      if (*v47)
        goto LABEL_22;
      v21 = a6(a3, a4, 0);
      TrackFragmentGlobalDefaultValue = tfbGetTrackFragmentGlobalDefaultValue((uint64_t)a1, (uint64_t)CFSTR("SampleFlagsKey"), &v46);
      v23 = TrackFragmentGlobalDefaultValue;
      if (!(_DWORD)TrackFragmentGlobalDefaultValue && v46 != v21)
        goto LABEL_20;
      if ((_DWORD)TrackFragmentGlobalDefaultValue)
        goto LABEL_46;
    }
  }
LABEL_22:
  v24 = v45;
  Value = CFDictionaryGetValue(v45[3], a5);
  if (Value)
  {
LABEL_23:
    if (a2 < 1)
    {
LABEL_27:
      v23 = 0;
      Value[2] += a2;
      goto LABEL_46;
    }
    v26 = 0;
    while (1)
    {
      LODWORD(v47) = bswap32(a6(a3, a4, v26));
      CurrentTrackRun = CMByteStreamAppend();
      if ((_DWORD)CurrentTrackRun)
        goto LABEL_42;
      if (a2 == ++v26)
        goto LABEL_27;
    }
  }
  LODWORD(v47) = 0;
  v27 = tfbGetTrackFragmentGlobalDefaultValue((uint64_t)a1, (uint64_t)a5, &v47);
  if ((_DWORD)v27)
    goto LABEL_68;
  if (!FigCFEqual())
  {
    v31 = v47;
    if (a3 > 1 || v31 != a6(a3, a4, 0))
      goto LABEL_50;
LABEL_45:
    v23 = 0;
    goto LABEL_46;
  }
  v28 = *(unsigned int *)v24;
  if (v28 + a2 <= 1)
    v29 = -1;
  else
    v29 = 1 - v28;
  if (v28 >= 2)
    v30 = 0;
  else
    v30 = v29;
  if ((v30 & 0x80000000) != 0)
    goto LABEL_45;
  v31 = v47;
  if (!a3)
  {
    if (a6(0, a4, 0) != v31)
      goto LABEL_50;
    goto LABEL_45;
  }
  if (v30 >= a2)
    goto LABEL_45;
  while (a6(a3, a4, v30) == v31)
  {
    if (a2 == ++v30)
      goto LABEL_45;
  }
LABEL_50:
  v27 = tfbCreateBlockBufferByteStream(allocator, (CMBlockBufferRef *)&cf, &v43);
  if (!(_DWORD)v27)
  {
    if (*(_DWORD *)v24)
    {
      v33 = 0;
      v34 = bswap32(v31);
      v35 = v43;
      while (1)
      {
        v46 = 0;
        v36 = FigCFEqual();
        v37 = v34;
        if (!v33)
        {
          v37 = v34;
          if (v36)
          {
            v37 = v34;
            if (*((_BYTE *)v24 + 16))
              v37 = bswap32(*((_DWORD *)v24 + 5));
          }
        }
        v46 = v37;
        v38 = CMByteStreamAppend();
        if ((_DWORD)v38)
          break;
        if (++v33 >= *(_DWORD *)v24)
          goto LABEL_59;
      }
      v23 = v38;
      if (v35)
        goto LABEL_63;
      goto LABEL_46;
    }
LABEL_59:
    v39 = CFAllocatorAllocate(allocator, 32, 0);
    if (v39)
    {
      Value = v39;
      *v39 = 0u;
      v39[1] = 0u;
      if (a5)
        v40 = CFRetain(a5);
      else
        v40 = 0;
      *(_QWORD *)Value = v40;
      Value[2] = *(_DWORD *)v24;
      v41 = v43;
      *((_QWORD *)Value + 2) = cf;
      *((_QWORD *)Value + 3) = v41;
      CFDictionaryAddValue(v24[3], a5, Value);
      cf = 0;
      if (FigCFEqual())
        *((_BYTE *)v24 + 16) = 0;
      goto LABEL_23;
    }
    v27 = FigSignalErrorAt();
  }
LABEL_68:
  v23 = v27;
  v35 = v43;
  if (v43)
LABEL_63:
    CFRelease(v35);
LABEL_46:
  if (cf)
    CFRelease(cf);
  return v23;
}

uint64_t tfbGetSampleDurationAtIndexFunc(uint64_t a1, uint64_t a2, int a3)
{
  if (!a2)
    goto LABEL_7;
  if (a1 == 1)
    return *(_QWORD *)a2;
  if (a3 < a1)
    return *(_QWORD *)(a2 + 72 * a3);
LABEL_7:
  FigSignalErrorAt();
  return 0;
}

uint64_t tfbGetSampleSizeAtIndexFunc(uint64_t a1, uint64_t a2, int a3)
{
  if (!a2)
    goto LABEL_7;
  if (a1 == 1)
    return *(_QWORD *)a2;
  if (a3 < a1)
    return *(_QWORD *)(a2 + 8 * a3);
LABEL_7:
  FigSignalErrorAt();
  return 0;
}

const void *tfbGetSampleFlagsAtIndexFunc(uint64_t a1, CFArrayRef theArray, int a3)
{
  const void *result;
  __int16 v4;

  if (!theArray)
    return 0;
  if (a3 >= a1)
  {
    FigSignalErrorAt();
    return 0;
  }
  else
  {
    result = CFArrayGetValueAtIndex(theArray, a3);
    if (result)
    {
      v4 = 0;
      FigMovieGetSampleDependencyFlagsFromSampleAttachments((uint64_t)result, (char *)&v4 + 1, &v4, 0);
      return (const void *)((HIBYTE(v4) << 20) | (((_BYTE)v4 != 0) << 16));
    }
  }
  return result;
}

uint64_t tfbGetSampleCompositionTimeOffsetAtIndexFunc(uint64_t a1, uint64_t a2, int a3)
{
  if (!a2)
    goto LABEL_7;
  if (a1 != 1)
  {
    if (a3 < a1)
    {
      a2 += 72 * a3;
      return (*(_DWORD *)(a2 + 24) - *(_DWORD *)(a2 + 48));
    }
LABEL_7:
    FigSignalErrorAt();
    return 0;
  }
  return (*(_DWORD *)(a2 + 24) - *(_DWORD *)(a2 + 48));
}

void tfbTrackFragmentRelease(CFAllocatorRef allocator, void *ptr)
{
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex i;
  CFDictionaryRef *ValueAtIndex;
  _QWORD *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;

  if (ptr)
  {
    v4 = (const __CFArray *)*((_QWORD *)ptr + 5);
    if (v4)
    {
      Count = CFArrayGetCount(v4);
      if (Count >= 1)
      {
        v6 = Count;
        for (i = 0; i != v6; ++i)
        {
          ValueAtIndex = (CFDictionaryRef *)CFArrayGetValueAtIndex(*((CFArrayRef *)ptr + 5), i);
          tfbTrackRunRelease(allocator, ValueAtIndex);
        }
      }
    }
    v9 = (_QWORD *)*((_QWORD *)ptr + 6);
    if (v9)
    {
      v10 = (const void *)v9[1];
      if (v10)
      {
        CFRelease(v10);
        v9 = (_QWORD *)*((_QWORD *)ptr + 6);
      }
      v11 = (const void *)v9[2];
      if (v11)
      {
        CFRelease(v11);
        v9 = (_QWORD *)*((_QWORD *)ptr + 6);
      }
      v12 = (const void *)v9[3];
      if (v12)
      {
        CFRelease(v12);
        v9 = (_QWORD *)*((_QWORD *)ptr + 6);
      }
      v13 = (const void *)v9[4];
      if (v13)
      {
        CFRelease(v13);
        v9 = (_QWORD *)*((_QWORD *)ptr + 6);
      }
      CFAllocatorDeallocate(allocator, v9);
    }
    v14 = (const void *)*((_QWORD *)ptr + 5);
    if (v14)
      CFRelease(v14);
    v15 = (const void *)*((_QWORD *)ptr + 1);
    if (v15)
      CFRelease(v15);
    v16 = (const void *)*((_QWORD *)ptr + 7);
    if (v16)
      CFRelease(v16);
    v17 = (const void *)*((_QWORD *)ptr + 8);
    if (v17)
      CFRelease(v17);
    CFAllocatorDeallocate(allocator, ptr);
  }
}

void trbCreateSampleGroupCollectionWithDescriptionArraysApplierFunction(uint64_t a1, _DWORD *a2, CFTypeRef cf)
{
  const __CFAllocator *v6;
  unint64_t Basic;
  int v8;
  CFTypeRef cfa;

  v6 = CFGetAllocator(cf);
  Basic = MovieSampleGroupTypeSpecMakeBasic(a1);
  cfa = 0;
  if (!MovieSampleGroupCreate(v6, Basic, v8, (uint64_t *)&cfa)
    && !MovieSampleGroupSetDescriptionArray((uint64_t)cfa, a2))
  {
    MovieSampleGroupCollectionAddSampleGroup((uint64_t)cf, (uint64_t)cfa);
  }
  if (cfa)
    CFRelease(cfa);
}

uint64_t tfbSetTrackFragmentHeaderDefaultValueIfNeeded(uint64_t a1, const void *a2, int a3)
{
  uint64_t result;
  int Int32IfPresent;
  BOOL v8;

  if (FigCFEqual())
    return 0;
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(*(_QWORD *)(a1 + 88) + 8), a2);
  Int32IfPresent = FigCFDictionaryGetInt32IfPresent();
  result = 0;
  if (Int32IfPresent)
    v8 = a3 == 0;
  else
    v8 = 0;
  if (!v8)
  {
    if (*(_QWORD *)(a1 + 88))
      return FigCFDictionarySetInt32();
    else
      return FigSignalErrorAt();
  }
  return result;
}

void tfbTrackRunRelease(const __CFAllocator *a1, CFDictionaryRef *a2)
{
  CFIndex Count;
  const void ***v5;
  const void **v6;
  const void *v7;
  const void *v8;
  const void *v9;
  CFDictionaryRef v10;
  _OWORD v11[2];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return;
  Count = CFDictionaryGetCount(a2[3]);
  memset(v11, 0, sizeof(v11));
  if (Count >= 5)
  {
    FigSignalErrorAt();
    CFDictionaryGetKeysAndValues(a2[3], 0, (const void **)v11);
    goto LABEL_5;
  }
  CFDictionaryGetKeysAndValues(a2[3], 0, (const void **)v11);
  if (Count >= 1)
  {
LABEL_5:
    v5 = (const void ***)v11;
    do
    {
      v6 = *v5;
      v7 = **v5;
      if (v7)
        CFRelease(v7);
      v8 = v6[2];
      if (v8)
        CFRelease(v8);
      v9 = v6[3];
      if (v9)
        CFRelease(v9);
      CFAllocatorDeallocate(a1, v6);
      ++v5;
      --Count;
    }
    while (Count);
  }
  v10 = a2[3];
  if (v10)
    CFRelease(v10);
  CFAllocatorDeallocate(a1, a2);
}

uint64_t tfbGetCurrentTrackRun(uint64_t a1, const void **a2)
{
  uint64_t v4;
  const __CFArray *v5;
  CFIndex v6;

  v4 = *(_QWORD *)(a1 + 88);
  if (v4 && (v5 = *(const __CFArray **)(v4 + 40)) != 0)
    v6 = CFArrayGetCount(v5) - 1;
  else
    v6 = 0xFFFFFFFFLL;
  return tfbGetTrackRunAtIndex(a1, v6, a2);
}

uint64_t tfbGetTrackFragmentGlobalDefaultValue(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (!*(_QWORD *)(a1 + 88))
    return FigSignalErrorAt();
  if (!FigCFEqual() && !FigCFDictionaryGetInt32IfPresent())
    FigCFDictionaryGetInt32IfPresent();
  *a3 = 0;
  return 0;
}

uint64_t tfbCreateBlockBufferByteStream(const __CFAllocator *a1, CMBlockBufferRef *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t WritableForBlockBuffer;
  CMBlockBufferRef blockBufferOut;

  blockBufferOut = 0;
  v5 = CMBlockBufferCreateEmpty(a1, 0x10u, 0, &blockBufferOut);
  if ((_DWORD)v5)
  {
    WritableForBlockBuffer = v5;
  }
  else
  {
    WritableForBlockBuffer = CMByteStreamCreateWritableForBlockBuffer();
    if (!(_DWORD)WritableForBlockBuffer)
    {
      *a2 = blockBufferOut;
      *a3 = 0;
      return WritableForBlockBuffer;
    }
  }
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  return WritableForBlockBuffer;
}

uint64_t tfbAddSampleGroupForGroupType(uint64_t a1, unint64_t a2, unsigned int a3, int a4, unsigned int a5, int a6, size_t a7, const void *a8)
{
  uint64_t v13;
  CFTypeRef v15;
  _DWORD *v17;
  CFTypeRef v18;
  const __CFAllocator *v19;
  uint64_t v20;
  uint64_t v21;
  const __CFDictionary *v22;
  const void *Value;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  CFMutableDictionaryRef Mutable;
  uint64_t appended;
  CFTypeRef v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  _DWORD *v36;
  CFTypeRef cf;
  _DWORD *v40;
  void *key;

  v13 = *(_QWORD *)(a1 + 88);
  v15 = *(CFTypeRef *)(v13 + 56);
  if (v15)
    v15 = MovieSampleGroupCollectionLookupAndRetainSampleGroup((uint64_t)v15, a2, a3);
  v17 = 0;
  cf = v15;
  v18 = 0;
  if (a6 && !v15)
  {
    v19 = *(const __CFAllocator **)a1;
    v20 = *(_QWORD *)(a1 + 32);
    if (v20)
      v18 = MovieSampleGroupCollectionLookupAndRetainSampleGroup(v20, a2, a3);
    else
      v18 = 0;
    if (a4)
    {
      v21 = MovieSampleGroupCreateCompactForFragment(v19, a2, a3, (uint64_t)v18, &cf);
      if (!(_DWORD)v21)
      {
LABEL_10:
        v22 = *(const __CFDictionary **)(*(_QWORD *)(a1 + 88) + 64);
        if (v22 && (Value = CFDictionaryGetValue(v22, (const void *)(int)a2)) != 0)
        {
          v40 = CFRetain(Value);
          if (v40)
          {
LABEL_21:
            v17 = v40;
            appended = MovieSampleGroupSetDescriptionArray((uint64_t)cf, v40);
            if ((_DWORD)appended)
              goto LABEL_37;
            v29 = cf;
            v30 = *(_QWORD *)(a1 + 88);
            v33 = *(_QWORD *)(v30 + 56);
            v32 = (uint64_t *)(v30 + 56);
            v31 = v33;
            if (!v33)
            {
              appended = MovieSampleGroupCollectionCreate(*(const __CFAllocator **)a1, v32);
              if ((_DWORD)appended)
                goto LABEL_37;
              v31 = *v32;
            }
            appended = MovieSampleGroupCollectionAddSampleGroup(v31, (uint64_t)v29);
            if ((_DWORD)appended)
              goto LABEL_37;
            if (*(_DWORD *)v13)
            {
              appended = MovieSampleGroupAppendSamplesWithDescriptionIndex((uint64_t)cf, *(_DWORD *)v13, 0);
              if ((_DWORD)appended)
                goto LABEL_37;
            }
            v15 = cf;
            goto LABEL_29;
          }
        }
        else
        {
          v40 = 0;
        }
        v24 = MovieSampleGroupDescriptionArrayCreate(*(const __CFAllocator **)a1, a2, (uint64_t *)&v40);
        if (!(_DWORD)v24)
        {
          v25 = v40;
          v26 = *(_QWORD *)(a1 + 88);
          LODWORD(key) = 0;
          if (*(_QWORD *)(v26 + 64)
            || (Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)a1, 0, 0, MEMORY[0x1E0C9B3A0]),
                (*(_QWORD *)(v26 + 64) = Mutable) != 0))
          {
            v24 = MovieSampleGroupDescriptionArrayCopyInfo((uint64_t)v25, &key, 0, 0, 0, 0);
            if ((_DWORD)v24)
              goto LABEL_48;
            if (!CFDictionaryGetValue(*(CFDictionaryRef *)(v26 + 64), (const void *)(int)key))
            {
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(v26 + 64), (const void *)(int)key, v25);
              goto LABEL_21;
            }
          }
          v24 = FigSignalErrorAt();
          if (!(_DWORD)v24)
            goto LABEL_21;
        }
LABEL_48:
        v35 = v24;
        v36 = v40;
        if (v40)
          goto LABEL_39;
        goto LABEL_40;
      }
    }
    else
    {
      v21 = MovieSampleGroupCreateForFragment(v19, a2, a3, (uint64_t)v18, &cf);
      if (!(_DWORD)v21)
        goto LABEL_10;
    }
    v35 = v21;
    goto LABEL_40;
  }
LABEL_29:
  if (v15)
  {
    v40 = 0;
    if (a6)
    {
      appended = MovieSampleGroupAddDescription((uint64_t)v15, a7, a8, (uint64_t)&v40, 0);
      if ((_DWORD)appended)
        goto LABEL_37;
      v15 = cf;
      v34 = v40;
    }
    else
    {
      v34 = 0;
    }
    appended = MovieSampleGroupAppendSamplesWithDescriptionIndex((uint64_t)v15, a5, (uint64_t)v34);
LABEL_37:
    v35 = appended;
    if (!v17)
      goto LABEL_40;
    goto LABEL_38;
  }
  v35 = 0;
  if (v17)
  {
LABEL_38:
    v36 = v17;
LABEL_39:
    CFRelease(v36);
  }
LABEL_40:
  if (v18)
    CFRelease(v18);
  if (cf)
    CFRelease(cf);
  return v35;
}

uint64_t FigCDSLayoutContextGetTypeID()
{
  MEMORY[0x19402F294](&FigCDSLayoutContextLocalGetTypeID_sRegisterFigCDSLayoutContextOnce, RegisterFigCDSLayoutContextClass);
  return sFigCDSLayoutContextID;
}

uint64_t FigCDSLayoutContextCreate(_QWORD *a1)
{
  const __CFAllocator *v2;
  _QWORD *Instance;
  CFMutableDictionaryRef Mutable;
  uint64_t v6;

  *a1 = 0;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MEMORY[0x19402F294](&FigCDSLayoutContextLocalGetTypeID_sRegisterFigCDSLayoutContextOnce, RegisterFigCDSLayoutContextClass);
  Instance = (_QWORD *)_CFRuntimeCreateInstance();
  Mutable = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  Instance[3] = Mutable;
  if (Mutable)
  {
    *a1 = Instance;
    return 0;
  }
  else
  {
    v6 = FigSignalErrorAt();
    CFRelease(Instance);
    return v6;
  }
}

uint64_t FigCDSLayoutContextSetSubtitleSample(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  if (!a1)
    return FigSignalErrorAt();
  v2 = *(const void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
  return 0;
}

uint64_t FigCDSLayoutContextGetSubtitleSample(uint64_t a1, _QWORD *a2)
{
  if (!a1 || !a2)
    return FigSignalErrorAt();
  *a2 = *(_QWORD *)(a1 + 16);
  return 0;
}

uint64_t FigCDSLayoutContextSetMapping(uint64_t a1, const void *a2, const void *a3)
{
  if (!a1 || !a2 || !a3)
    return FigSignalErrorAt();
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), a2, a3);
  return 0;
}

uint64_t FigCDSLayoutContextGetMapping(uint64_t a1, const void *a2, const void **a3)
{
  if (!a1 || !a2 || !a3)
    return FigSignalErrorAt();
  *a3 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), a2);
  return 0;
}

uint64_t RegisterFigCDSLayoutContextClass()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigCDSLayoutContextID = result;
  return result;
}

uint64_t FigCDSLayoutContextInit(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

void FigCDSLayoutContext_Finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 16);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 24);
  if (v3)
    CFRelease(v3);
}

__CFString *FigCDSLayoutContextCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigCDSLayoutContext %p>"), a1);
  return Mutable;
}

uint64_t FigTTMLStyleCreate(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t DerivedStorage;
  uint64_t v9;

  if (!a4)
    return FigSignalErrorAt();
  FigTTMLNodeGetClassID();
  v7 = CMDerivedObjectCreate();
  if (!(_DWORD)v7)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v9 = FigTTMLInitializeNodeBaseStorage(DerivedStorage, (__int128 *)a3);
    if ((_DWORD)v9)
    {
      return v9;
    }
    else
    {
      v7 = FigTTMLAddCurrentElementAttributesToDictionary(a2, *(__CFDictionary **)(DerivedStorage + 24));
      if (!(_DWORD)v7)
      {
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        v7 = FigTTMLParseNode(a2, (uint64_t (*)(uint64_t, uint64_t *, CFTypeRef *))figTTMLStyle_ConsumeChildNode, (uint64_t *)a3);
        if (!(_DWORD)v7)
          *a4 = 0;
      }
    }
  }
  return v7;
}

uint64_t figTTMLStyle_ConsumeChildNode(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = FigTTMLSkipNode(a1, a2, *(__CFArray **)(DerivedStorage + 128));
  if (a3)
  {
    if (!(_DWORD)result)
      *a3 = 0;
  }
  return result;
}

void figTTMLStyle_Finalize()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigTTMLReleaseNodeBaseStorage(DerivedStorage);
}

CFStringRef figTTMLStyle_CopyDebugDesc()
{
  const void *v0;
  CFStringRef v1;

  CMBaseObjectGetDerivedStorage();
  v0 = (const void *)FigCFCopyCompactDescription();
  v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("style: %@"), v0);
  if (v0)
    CFRelease(v0);
  return v1;
}

uint64_t figTTMLStyle_CopyChildNodeArray(const void *a1, CFMutableArrayRef *a2)
{
  const __CFAllocator *v3;

  if (a2)
  {
    v3 = CFGetAllocator(a1);
    *a2 = CFArrayCreateMutable(v3, 0, MEMORY[0x1E0C9B378]);
  }
  else
  {
    FigSignalErrorAt();
  }
  return 0;
}

uint64_t figTTMLStyle_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2)
    return FigSignalErrorAt();
  *a2 = 13;
  return 0;
}

uint64_t MovieHeaderMakerCreateWithMovieInformation(const __CFAllocator *a1, const void *a2, int a3, _QWORD *a4)
{
  _OWORD *v8;
  _OWORD *v9;
  CFTypeRef v10;
  CFMutableArrayRef Mutable;
  uint64_t result;

  if (!a2 || !a4)
    return FigSignalErrorAt();
  v8 = CFAllocatorAllocate(a1, 144, 0);
  if (!v8)
    return 4294950966;
  v9 = v8;
  v8[7] = 0u;
  v8[8] = 0u;
  v8[5] = 0u;
  v8[6] = 0u;
  v8[3] = 0u;
  v8[4] = 0u;
  v8[1] = 0u;
  v8[2] = 0u;
  *v8 = 0u;
  if (a1)
    v10 = CFRetain(a1);
  else
    v10 = 0;
  *(_QWORD *)v9 = v10;
  *((_QWORD *)v9 + 1) = CFRetain(a2);
  *((_DWORD *)v9 + 4) = a3;
  Mutable = CFArrayCreateMutable(a1, 0, 0);
  result = 0;
  *((_QWORD *)v9 + 11) = Mutable;
  *a4 = v9;
  return result;
}

void MovieHeaderMakerRelease(const __CFAllocator **ptr)
{
  const __CFAllocator *v2;
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  CFIndex i;
  CFTypeRef *ValueAtIndex;
  const __CFAllocator *v8;
  const __CFAllocator *v9;
  const __CFAllocator *v10;
  const __CFAllocator *v11;
  const __CFAllocator *v12;

  if (ptr)
  {
    v2 = *ptr;
    v3 = ptr[11];
    if (v3)
    {
      Count = CFArrayGetCount(v3);
      if (Count >= 1)
      {
        v5 = Count;
        for (i = 0; i != v5; ++i)
        {
          ValueAtIndex = (CFTypeRef *)CFArrayGetValueAtIndex(ptr[11], i);
          releaseTrack_0(v2, ValueAtIndex);
        }
      }
      v8 = ptr[11];
      if (v8)
        CFRelease(v8);
    }
    v9 = ptr[1];
    if (v9)
      CFRelease(v9);
    v10 = ptr[3];
    if (v10)
      CFRelease(v10);
    v11 = ptr[4];
    if (v11)
      CFRelease(v11);
    v12 = ptr[5];
    if (v12)
      CFRelease(v12);
    CFAllocatorDeallocate(v2, ptr);
    if (v2)
      CFRelease(v2);
  }
}

void releaseTrack_0(CFAllocatorRef allocator, CFTypeRef *ptr)
{
  CFTypeRef v4;
  CFTypeRef v5;
  CFTypeRef v6;

  if (*ptr)
    CFRelease(*ptr);
  v4 = ptr[1];
  if (v4)
    CFRelease(v4);
  v5 = ptr[2];
  if (v5)
    CFRelease(v5);
  v6 = ptr[3];
  if (v6)
    CFRelease(v6);
  CFAllocatorDeallocate(allocator, ptr);
}

uint64_t MovieHeaderMakerAddTrack(uint64_t a1, const void *a2, _QWORD *a3)
{
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;

  if (a1 && a2)
  {
    v6 = *(const __CFArray **)(a1 + 88);
    if (v6 && (Count = CFArrayGetCount(v6), Count >= 1))
    {
      v8 = Count;
      v9 = 0;
      while (1)
      {
        CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), v9);
        if (FigCFEqual())
          break;
        if (v8 == ++v9)
          goto LABEL_8;
      }
    }
    else
    {
LABEL_8:
      if ((*(_BYTE *)(a1 + 16) & 2) == 0)
        return addTrack((CFAllocatorRef *)a1, a2, a3);
    }
  }
  return FigSignalErrorAt();
}

uint64_t addTrack(CFAllocatorRef *a1, const void *a2, _QWORD *a3)
{
  _OWORD *v6;
  _WORD *v7;
  CFTypeRef v8;
  uint64_t result;

  v6 = CFAllocatorAllocate(*a1, 88, 0);
  if (!v6)
    return 4294950966;
  v7 = v6;
  *((_QWORD *)v6 + 10) = 0;
  v6[3] = 0u;
  v6[4] = 0u;
  v6[1] = 0u;
  v6[2] = 0u;
  *v6 = 0u;
  if (a2)
    v8 = CFRetain(a2);
  else
    v8 = 0;
  *(_QWORD *)v7 = v8;
  v7[16] = 257;
  *((_BYTE *)v7 + 34) = 1;
  v7[18] = 257;
  *((_DWORD *)v7 + 11) = 0;
  CFArrayAppendValue(a1[11], v7);
  result = 0;
  if (a3)
    *a3 = v7;
  return result;
}

uint64_t MovieHeaderMakerCopyMovieHeaderAsBlockBuffer(uint64_t a1, const __CFAllocator *a2, uint64_t a3, const __CFURL *a4, CMBlockBufferRef *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t TrackReferenceDictionary;
  CFTypeRef v12;
  uint64_t TrackCount;
  uint64_t v14;
  uint64_t v15;
  const void *TrackForTrackIndex;
  const __CFArray *v17;
  CFIndex Count;
  uint64_t PSSHDataEntries;
  uint64_t v20;
  unint64_t v21;
  unsigned int NextTrackID;
  uint64_t TimeInfo;
  double *v24;
  float v25;
  float v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t appended;
  CFIndex v30;
  double v31;
  uint64_t *ValueAtIndex;
  uint64_t v33;
  uint64_t v34;
  uint64_t TrackDurationValue;
  float Volume;
  unsigned int Layer;
  unsigned int DefaultAlternateGroupID;
  int TrackType;
  int v40;
  int v41;
  uint64_t BasicInfo;
  float v43;
  float v44;
  int IsEnabled;
  int v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t *v49;
  __int32 *v50;
  char *v51;
  __int128 *v52;
  __int128 *v53;
  char *v54;
  char *v55;
  char *v56;
  __int128 *v57;
  uint64_t *v58;
  unsigned __int16 v59;
  const __CFAllocator *v60;
  uint64_t v61;
  _BOOL4 v62;
  uint64_t v63;
  int v64;
  int v65;
  _BOOL4 v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  const __CFDictionary *v74;
  int32_t v75;
  CFIndex v76;
  CFIndex v77;
  const void **v78;
  _QWORD *v79;
  uint64_t v80;
  const __CFArray *v81;
  CFIndex v82;
  CFIndex v83;
  CFIndex v84;
  char v85;
  CFIndex v86;
  const __CFNumber *v87;
  const __CFNumber *v88;
  uint64_t Empty;
  CMBlockBufferRef v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int MediaTimeScale;
  unint64_t MediaDurationValue;
  uint64_t MediaTimeInfo;
  unsigned int v96;
  __int128 *v97;
  char *v98;
  CFIndex v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  int MediaType;
  int v105;
  unsigned int v106;
  _BOOL4 v107;
  int v108;
  unsigned int v109;
  uint64_t v110;
  const __CFString *v111;
  CFStringEncoding SystemEncoding;
  unsigned int v113;
  OpaqueCMBlockBuffer *v114;
  uint64_t v115;
  CMBlockBufferRef v116;
  const __CFDictionary *TrackMetadataItemArray;
  uint64_t MetadataSerializerDictionaryWithMetadata;
  const void *v119;
  _BOOL4 v120;
  uint64_t v121;
  int v122;
  CMBlockBufferRef v123;
  const __CFDictionary *MovieMetadataItemArray;
  uint64_t v125;
  uint64_t v126;
  CFTypeRef v127;
  const __CFArray *v128;
  CFIndex v129;
  uint64_t v130;
  uint64_t BasicMetrics;
  uint64_t v132;
  CFIndex i;
  uint64_t *v134;
  _DWORD *v135;
  uint64_t v136;
  CFIndex v137;
  const __CFDictionary *v138;
  size_t DataLength;
  size_t v140;
  unsigned int v141;
  CMBlockBufferRef *v143;
  const __CFString *v144;
  uint64_t v145;
  CFIndex v146;
  CFIndex v147;
  const __CFAllocator *structureAllocator;
  uint64_t v149;
  void **keys;
  uint64_t *v151;
  CMBlockBufferRef blockBufferOut;
  CFTypeRef v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  CFTypeRef cf[2];
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  __int128 valuePtr;
  __int128 v163;
  int v164;
  uint64_t v165;
  int32_t newTimescale[2];
  unint64_t v167;
  float v168;
  int8x16_t theString[2];
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  unsigned int v174;
  CMBlockBufferRef theBuffer[2];
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  _QWORD buffer[6];
  __int128 v180;
  __int128 v181;
  _OWORD v182[11];
  uint64_t v183;

  v9 = a1;
  v183 = *MEMORY[0x1E0C80C00];
  v157 = 0;
  v155 = 0u;
  v156 = 0u;
  v154 = 0u;
  v10 = *(_QWORD *)(a1 + 8);
  blockBufferOut = 0;
  v153 = 0;
  if (!isMovieHeaderMakerSupportedFileType() || !a5)
  {
    appended = FigSignalErrorAt();
    v144 = 0;
    goto LABEL_315;
  }
  v143 = a5;
  if (a4)
  {
    v144 = CFURLCopyPathExtension(a4);
    if (FigGetFileTypeForMovieFamilyExtension(v144))
      FigCFEqual();
  }
  else
  {
    v144 = 0;
  }
  TrackReferenceDictionary = MovieInformationCreateTrackReferenceDictionary(a2, v10, (CFDictionaryRef *)&v153);
  if ((_DWORD)TrackReferenceDictionary)
    goto LABEL_259;
  v12 = v153;
  *(_QWORD *)(v9 + 96) = a4;
  *(_QWORD *)(v9 + 104) = v12;
  *(_QWORD *)(v9 + 112) = a3;
  *(_BYTE *)(v9 + 120) = FigFileTypeIsISOFileType();
  TrackReferenceDictionary = CMBlockBufferCreateEmpty(a2, 0x20u, 0, &blockBufferOut);
  if ((_DWORD)TrackReferenceDictionary)
    goto LABEL_259;
  TrackReferenceDictionary = FigAtomWriterInitWithBlockBuffer();
  if ((_DWORD)TrackReferenceDictionary)
    goto LABEL_259;
  if ((*(_BYTE *)(v9 + 16) & 2) != 0)
  {
    TrackCount = MovieInformationGetTrackCount(v10);
    if (TrackCount >= 1)
    {
      v14 = TrackCount;
      v15 = 0;
      while (1)
      {
        TrackForTrackIndex = (const void *)MovieInformationFindTrackForTrackIndex(v10, v15);
        TrackReferenceDictionary = addTrack((CFAllocatorRef *)v9, TrackForTrackIndex, 0);
        if ((_DWORD)TrackReferenceDictionary)
          break;
        if (v14 == ++v15)
          goto LABEL_15;
      }
LABEL_259:
      appended = TrackReferenceDictionary;
      goto LABEL_315;
    }
  }
LABEL_15:
  v17 = *(const __CFArray **)(v9 + 88);
  if (v17)
    Count = CFArrayGetCount(v17);
  else
    Count = 0;
  PSSHDataEntries = FigAtomWriterBeginAtom();
  if ((_DWORD)PSSHDataEntries)
    goto LABEL_323;
  v178 = 0;
  v176 = 0u;
  v177 = 0u;
  *(_OWORD *)theBuffer = 0u;
  v20 = *(_QWORD *)(v9 + 8);
  *(_QWORD *)newTimescale = 0;
  v167 = 0;
  v168 = 0.0;
  v165 = 0;
  LODWORD(v160) = 0;
  *(_OWORD *)cf = 0u;
  v159 = 0u;
  MovieInformationGetMovieDuration(v20, (uint64_t)&valuePtr);
  v21 = valuePtr;
  NextTrackID = MovieInformationGetNextTrackID(v20);
  v174 = 0;
  v172 = 0u;
  v173 = 0u;
  v170 = 0u;
  v171 = 0u;
  memset(theString, 0, sizeof(theString));
  memset(v182, 0, 32);
  v180 = 0u;
  v181 = 0u;
  memset(buffer, 0, sizeof(buffer));
  TimeInfo = MovieInformationGetTimeInfo(v20, &v167, newTimescale);
  if ((_DWORD)TimeInfo)
    goto LABEL_342;
  v24 = (double *)MEMORY[0x1E0C9ADE8];
  if ((*(_BYTE *)(v9 + 16) & 1) == 0)
    *(_QWORD *)newTimescale = (unint64_t)(CFAbsoluteTimeGetCurrent() + *v24);
  TimeInfo = MovieInformationGetBasicMetrics(v20, &v168, (_DWORD *)&v165 + 1, &v165, (uint64_t)cf);
  if ((_DWORD)TimeInfo
    || (v25 = v168, v26 = *((float *)&v165 + 1), TimeInfo = FigAtomWriterInitWithParent(), (_DWORD)TimeInfo)
    || (TimeInfo = FigAtomWriterBeginAtom(), (_DWORD)TimeInfo))
  {
LABEL_342:
    appended = TimeInfo;
    goto LABEL_336;
  }
  v27 = vcvtd_n_s64_f64(v25, 0x10uLL);
  v28 = vcvtd_n_s64_f64(v26, 8uLL);
  if (HIDWORD(v21) || HIDWORD(v167) || newTimescale[1])
  {
    *(_QWORD *)((char *)buffer + 4) = bswap64(v167);
    *(_QWORD *)((char *)&buffer[1] + 4) = bswap64(*(unint64_t *)newTimescale);
    LODWORD(buffer[0]) = 1;
    HIDWORD(buffer[2]) = bswap32(v165);
    buffer[3] = bswap64(v21);
    LODWORD(buffer[4]) = bswap32(v27);
    HIDWORD(buffer[4]) = bswap32(v28) >> 16;
    buffer[5] = 0;
    figMatrixToBigEndianMatrixRecord((uint64_t)cf, (uint64_t)&v180);
    memset((char *)v182 + 4, 0, 24);
    HIDWORD(v182[1]) = bswap32(NextTrackID);
  }
  else
  {
    theString[0].i32[0] = 0;
    theString[0].i32[1] = bswap32(v167);
    theString[0].i64[1] = _byteswap_uint64(__PAIR64__(newTimescale[0], v165));
    theString[1].i64[0] = _byteswap_uint64(__PAIR64__(v21, v27));
    theString[1].i64[1] = bswap32(v28) >> 16;
    LODWORD(v170) = 0;
    figMatrixToBigEndianMatrixRecord((uint64_t)cf, (uint64_t)&v170 + 4);
    v173 = 0uLL;
    *((_QWORD *)&v172 + 1) = 0;
    v174 = bswap32(NextTrackID);
  }
  appended = FigAtomWriterAppendData();
  FigAtomWriterEndAtom();
  if ((_DWORD)appended)
    goto LABEL_337;
  if (Count >= 1)
  {
    v30 = 0;
    v31 = *v24;
    v145 = v9;
    v146 = Count;
    structureAllocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    do
    {
      ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v9 + 88), v30);
      if (!hasFormatDescriptionAndNonZeroMediaTimeScale(*ValueAtIndex))
        goto LABEL_235;
      v161 = 0;
      v159 = 0u;
      v160 = 0u;
      *(_OWORD *)cf = 0u;
      v33 = FigAtomWriterInitWithParent();
      if ((_DWORD)v33 || (v33 = FigAtomWriterBeginAtom(), (_DWORD)v33))
      {
LABEL_329:
        appended = v33;
        goto LABEL_336;
      }
      v178 = 0;
      v176 = 0u;
      v177 = 0u;
      *(_OWORD *)theBuffer = 0u;
      v34 = *ValueAtIndex;
      *(_QWORD *)newTimescale = 0;
      v167 = 0;
      v168 = 0.0;
      TrackDurationValue = MovieTrackGetTrackDurationValue(v34);
      Volume = MovieTrackGetVolume(v34);
      Layer = MovieTrackGetLayer(v34);
      DefaultAlternateGroupID = MovieTrackGetDefaultAlternateGroupID(v34);
      v165 = 0;
      v164 = 0;
      valuePtr = 0u;
      v163 = 0u;
      LODWORD(v173) = 0;
      v171 = 0u;
      v172 = 0u;
      v170 = 0u;
      memset(theString, 0, sizeof(theString));
      v181 = 0u;
      v182[0] = 0u;
      v180 = 0u;
      memset(buffer, 0, sizeof(buffer));
      v151 = ValueAtIndex;
      if (*(_BYTE *)(v9 + 120))
      {
        TrackType = MovieTrackGetTrackType(*ValueAtIndex);
        if (TrackType == 1635088502)
          v40 = 5;
        else
          v40 = 1;
        if (TrackType == 1885954932)
          v41 = 7;
        else
          v41 = v40;
      }
      else
      {
        v41 = 15;
      }
      BasicInfo = MovieTrackGetBasicInfo(v34, 0, &v168);
      if ((_DWORD)BasicInfo)
        goto LABEL_322;
      BasicInfo = MovieTrackGetTrackTimeInfo(v34, &v167, newTimescale);
      if ((_DWORD)BasicInfo)
        goto LABEL_322;
      if ((*(_BYTE *)(v9 + 16) & 1) == 0)
        *(_QWORD *)newTimescale = (unint64_t)(v31 + CFAbsoluteTimeGetCurrent());
      MovieTrackGetSpatialInformation(v34, (_DWORD *)&v165 + 1, &v165, (uint64_t)&valuePtr);
      v43 = *((float *)&v165 + 1);
      v44 = *(float *)&v165;
      BasicInfo = FigAtomWriterInitWithParent();
      if ((_DWORD)BasicInfo || (BasicInfo = FigAtomWriterBeginAtom(), (_DWORD)BasicInfo))
      {
LABEL_322:
        appended = BasicInfo;
        goto LABEL_335;
      }
      v147 = v30;
      IsEnabled = MovieTrackIsEnabled(v34);
      v46 = v41 & 0xE;
      if (IsEnabled)
        v46 = v41;
      v47 = (TrackDurationValue | *(_QWORD *)newTimescale | v167) >> 32;
      v48 = bswap32(v46 | ((v47 != 0) << 24));
      if (v47)
      {
        *(_QWORD *)((char *)buffer + 4) = bswap64(v167);
        *(_QWORD *)((char *)&buffer[1] + 4) = bswap64(*(unint64_t *)newTimescale);
        v50 = (__int32 *)&buffer[5];
        v49 = (_QWORD *)((char *)&buffer[4] + 4);
        LODWORD(buffer[0]) = v48;
        *(_QWORD *)((char *)&buffer[2] + 4) = bswap32(LODWORD(v168));
        v51 = (char *)&buffer[5] + 6;
        v52 = (__int128 *)((char *)&buffer[5] + 4);
        v54 = (char *)&v180 + 2;
        v53 = &v180;
        *(_QWORD *)((char *)&buffer[3] + 4) = bswap64(TrackDurationValue);
        v56 = (char *)v182 + 8;
        v55 = (char *)&v180 + 4;
        v57 = (_OWORD *)((char *)v182 + 12);
      }
      else
      {
        theString[0].i64[0] = __PAIR64__(bswap32(v167), v48);
        v50 = &theString[1].i32[3];
        v49 = &theString[1].i64[1];
        theString[0].i64[1] = _byteswap_uint64(__PAIR64__(newTimescale[0], LODWORD(v168)));
        v51 = (char *)&v170 + 2;
        v52 = &v170;
        v54 = (char *)&v170 + 6;
        v53 = (__int128 *)((char *)&v170 + 4);
        theString[1].i32[0] = 0;
        theString[1].i32[1] = bswap32(TrackDurationValue);
        v56 = (char *)&v172 + 12;
        v55 = (char *)&v170 + 8;
        v57 = &v173;
      }
      *(_DWORD *)v49 = 0;
      *v50 = 0;
      *(_WORD *)v52 = bswap32(Layer) >> 16;
      *(_WORD *)v51 = bswap32(DefaultAlternateGroupID) >> 16;
      *(_WORD *)v53 = bswap32(vcvtd_n_s64_f64(Volume, 8uLL)) >> 16;
      *(_WORD *)v54 = 0;
      figMatrixToBigEndianMatrixRecord((uint64_t)&valuePtr, (uint64_t)v55);
      *(_DWORD *)v56 = bswap32(vcvtd_n_s64_f64(v43, 0x10uLL));
      *(_DWORD *)v57 = bswap32(vcvtd_n_s64_f64(v44, 0x10uLL));
      appended = FigAtomWriterAppendData();
      FigAtomWriterEndAtom();
      if ((_DWORD)appended)
        goto LABEL_336;
      *(_QWORD *)&v180 = 0;
      memset(buffer, 0, sizeof(buffer));
      v58 = v151;
      v59 = MovieTrackGetDefaultAlternateGroupID(*v151);
      theString[0].i16[0] = 0;
      v60 = structureAllocator;
      if (!MovieTrackGetProvisionalAlternateGroupID(*v151, theString) || theString[0].u16[0] == v59)
      {
        FigAtomWriterEndAtom();
      }
      else
      {
        LOWORD(theBuffer[0]) = __rev16(theString[0].u16[0]);
        v61 = FigAtomWriterInitWithParent();
        if ((_DWORD)v61
          || (v61 = FigAtomWriterBeginAtom(), (_DWORD)v61)
          || (v61 = FigAtomWriterAppendVersionAndFlags(), (_DWORD)v61))
        {
LABEL_324:
          appended = v61;
          goto LABEL_335;
        }
        appended = FigAtomWriterAppendData();
        FigAtomWriterEndAtom();
        if ((_DWORD)appended)
          goto LABEL_336;
      }
      *(_QWORD *)&v180 = 0;
      memset(buffer, 0, sizeof(buffer));
      if (MovieTrackIsExcludedFromAutoSelection(*v151))
      {
        v61 = FigAtomWriterInitWithParent();
        if ((_DWORD)v61)
          goto LABEL_324;
        appended = FigAtomWriterBeginAtom();
        FigAtomWriterEndAtom();
        if ((_DWORD)appended)
          goto LABEL_336;
      }
      else
      {
        FigAtomWriterEndAtom();
      }
      if (!*(_BYTE *)(v9 + 120))
      {
        *(_QWORD *)&v171 = 0;
        v170 = 0u;
        memset(theString, 0, sizeof(theString));
        v62 = *((_BYTE *)v151 + 32) || *((_BYTE *)v151 + 33) || *((_BYTE *)v151 + 34) != 0;
        v63 = *v151;
        MovieTrackGetCleanApertureDimensions(*v151, 0, 0);
        if (v64 || (MovieTrackGetProductionApertureDimensions(v63, 0, 0), v65))
        {
          v66 = 1;
          if (!v62)
            goto LABEL_105;
        }
        else
        {
          MovieTrackGetEncodedPixelsDimensions(v63, 0, 0);
          v66 = v70 != 0;
          if (!v62)
            goto LABEL_105;
        }
        if (!v66)
          goto LABEL_105;
        v67 = FigAtomWriterInitWithParent();
        if ((_DWORD)v67 || (v67 = FigAtomWriterBeginAtom(), (_DWORD)v67))
        {
LABEL_332:
          appended = v67;
          goto LABEL_335;
        }
        if (*((_BYTE *)v151 + 32))
        {
          *(_QWORD *)&v180 = 0;
          memset(buffer, 0, sizeof(buffer));
          LODWORD(valuePtr) = 0;
          LODWORD(v167) = 0;
          MovieTrackGetCleanApertureDimensions(*v151, (float *)&valuePtr, (float *)&v167);
          if (v68)
          {
            theBuffer[0] = (CMBlockBufferRef)vrev32_s8((int8x8_t)vmovn_s64(vcvtq_n_s64_f64(vcvtq_f64_f32((float32x2_t)__PAIR64__(v167, valuePtr)), 0x10uLL)));
            v69 = FigAtomWriterInitWithParent();
            if ((_DWORD)v69
              || (v69 = FigAtomWriterBeginAtom(), (_DWORD)v69)
              || (v69 = FigAtomWriterAppendVersionAndFlags(), (_DWORD)v69))
            {
LABEL_341:
              appended = v69;
              FigAtomWriterEndAtom();
LABEL_335:
              FigAtomWriterEndAtom();
              goto LABEL_336;
            }
            appended = FigAtomWriterAppendData();
            FigAtomWriterEndAtom();
            if ((_DWORD)appended)
              goto LABEL_335;
          }
          else
          {
            FigAtomWriterEndAtom();
          }
        }
        if (*((_BYTE *)v151 + 33))
        {
          *(_QWORD *)&v180 = 0;
          memset(buffer, 0, sizeof(buffer));
          LODWORD(valuePtr) = 0;
          LODWORD(v167) = 0;
          MovieTrackGetProductionApertureDimensions(*v151, (float *)&valuePtr, (float *)&v167);
          if (v71)
          {
            theBuffer[0] = (CMBlockBufferRef)vrev32_s8((int8x8_t)vmovn_s64(vcvtq_n_s64_f64(vcvtq_f64_f32((float32x2_t)__PAIR64__(v167, valuePtr)), 0x10uLL)));
            v69 = FigAtomWriterInitWithParent();
            if ((_DWORD)v69)
              goto LABEL_341;
            v69 = FigAtomWriterBeginAtom();
            if ((_DWORD)v69)
              goto LABEL_341;
            v69 = FigAtomWriterAppendVersionAndFlags();
            if ((_DWORD)v69)
              goto LABEL_341;
            appended = FigAtomWriterAppendData();
            FigAtomWriterEndAtom();
            if ((_DWORD)appended)
              goto LABEL_335;
          }
          else
          {
            FigAtomWriterEndAtom();
          }
        }
        if (!*((_BYTE *)v151 + 34))
        {
LABEL_105:
          FigAtomWriterEndAtom();
          goto LABEL_108;
        }
        *(_QWORD *)&v180 = 0;
        memset(buffer, 0, sizeof(buffer));
        LODWORD(valuePtr) = 0;
        LODWORD(v167) = 0;
        MovieTrackGetEncodedPixelsDimensions(*v151, (float *)&valuePtr, (float *)&v167);
        if (v72)
        {
          theBuffer[0] = (CMBlockBufferRef)vrev32_s8((int8x8_t)vmovn_s64(vcvtq_n_s64_f64(vcvtq_f64_f32((float32x2_t)__PAIR64__(v167, valuePtr)), 0x10uLL)));
          v73 = FigAtomWriterInitWithParent();
          if (!(_DWORD)v73)
          {
            v73 = FigAtomWriterBeginAtom();
            if (!(_DWORD)v73)
            {
              v73 = FigAtomWriterAppendVersionAndFlags();
              if (!(_DWORD)v73)
                v73 = FigAtomWriterAppendData();
            }
          }
          appended = v73;
        }
        else
        {
          appended = 0;
        }
        FigAtomWriterEndAtom();
        FigAtomWriterEndAtom();
        if ((_DWORD)appended)
          goto LABEL_336;
      }
LABEL_108:
      if (*((_BYTE *)v151 + 37))
      {
        if (!FigCFEqual())
        {
          v33 = appendEditAtom(v9, v151, 1);
          if ((_DWORD)v33)
            goto LABEL_329;
        }
      }
      *(_QWORD *)&v171 = 0;
      v170 = 0u;
      memset(theString, 0, sizeof(theString));
      if (!*(_QWORD *)(v9 + 104))
        goto LABEL_148;
      newTimescale[0] = 0;
      v67 = MovieTrackGetBasicInfo(*v151, 0, newTimescale);
      if ((_DWORD)v67)
        goto LABEL_332;
      v74 = *(const __CFDictionary **)(v9 + 104);
      v75 = newTimescale[0];
      *(_QWORD *)&v180 = 0;
      memset(buffer, 0, sizeof(buffer));
      v76 = CFDictionaryGetCount(v74);
      theBuffer[0] = 0;
      v149 = v76;
      v77 = 8 * v76;
      keys = (void **)CFAllocatorAllocate(structureAllocator, 8 * v76, 0);
      if (!keys)
      {
        FigAtomWriterEndAtom();
        appended = 4294950966;
        goto LABEL_335;
      }
      v78 = (const void **)CFAllocatorAllocate(structureAllocator, v77, 0);
      if (v78)
      {
        v79 = v78;
        CFDictionaryGetKeysAndValues(v74, (const void **)keys, v78);
        if (v149 < 1)
        {
          v90 = 0;
          Count = v146;
LABEL_137:
          appended = 0;
          theBuffer[0] = 0;
        }
        else
        {
          v80 = 0;
          while (1)
          {
            v81 = (const __CFArray *)v79[v80];
            if (!GetTrackReferenceOSTypeFromKeyString((const __CFString *)keys[v80])
              || (v82 = CFArrayGetCount(v81), v83 = v82, (v82 & 1) != 0))
            {
              v90 = 0;
              appended = 4294950959;
              goto LABEL_251;
            }
            if (v82 >= 1)
              break;
LABEL_134:
            if (++v80 == v149)
            {
              v90 = theBuffer[0];
              v9 = v145;
              Count = v146;
              v60 = structureAllocator;
              goto LABEL_137;
            }
          }
          v84 = 0;
          v85 = 1;
          do
          {
            while (1)
            {
              v86 = v84 | 1;
              v87 = (const __CFNumber *)CFArrayGetValueAtIndex(v81, v84);
              v84 += 2;
              v88 = (const __CFNumber *)CFArrayGetValueAtIndex(v81, v86);
              LODWORD(valuePtr) = 0;
              LODWORD(v167) = 0;
              CFNumberGetValue(v87, kCFNumberSInt32Type, &valuePtr);
              CFNumberGetValue(v88, kCFNumberSInt32Type, &v167);
              if ((_DWORD)valuePtr != v75)
                break;
              if (!theBuffer[0])
              {
                Empty = CMBlockBufferCreateEmpty(structureAllocator, 0, 0, theBuffer);
                if ((_DWORD)Empty)
                  goto LABEL_250;
                Empty = FigAtomWriterInitWithBlockBuffer();
                if ((_DWORD)Empty)
                  goto LABEL_250;
              }
              if ((v85 & 1) != 0)
              {
                Empty = FigAtomWriterBeginAtom();
                if ((_DWORD)Empty)
                  goto LABEL_250;
              }
              LODWORD(v167) = bswap32(v167);
              Empty = FigAtomWriterAppendData();
              if ((_DWORD)Empty)
                goto LABEL_250;
              v85 = 0;
              if (v84 >= v83)
                goto LABEL_133;
            }
          }
          while (v84 < v83);
          if ((v85 & 1) != 0)
            goto LABEL_134;
LABEL_133:
          Empty = FigAtomWriterEndAtom();
          if (!(_DWORD)Empty)
            goto LABEL_134;
LABEL_250:
          appended = Empty;
          v90 = 0;
LABEL_251:
          v9 = v145;
          Count = v146;
          v60 = structureAllocator;
        }
        CFAllocatorDeallocate(v60, keys);
      }
      else
      {
        v90 = 0;
        appended = 4294950966;
        v79 = keys;
        Count = v146;
      }
      CFAllocatorDeallocate(v60, v79);
      if (theBuffer[0])
        CFRelease(theBuffer[0]);
      FigAtomWriterEndAtom();
      if ((_DWORD)appended)
      {
        FigAtomWriterEndAtom();
        if (!v90)
          goto LABEL_336;
LABEL_339:
        CFRelease(v90);
        goto LABEL_336;
      }
      if (!v90)
      {
        v58 = v151;
LABEL_148:
        FigAtomWriterEndAtom();
        goto LABEL_149;
      }
      CMBlockBufferGetDataLength(v90);
      v91 = FigAtomWriterInitWithParent();
      if ((_DWORD)v91 || (v91 = FigAtomWriterBeginAtom(), (_DWORD)v91))
      {
        appended = v91;
        FigAtomWriterEndAtom();
        goto LABEL_339;
      }
      appended = FigAtomWriterAppendBlockBufferData();
      FigAtomWriterEndAtom();
      CFRelease(v90);
      v58 = v151;
      if ((_DWORD)appended)
        goto LABEL_336;
LABEL_149:
      if (FigCFEqual() || FigCFEqual() || FigCFEqual())
      {
        *(_QWORD *)&v180 = 0;
        memset(buffer, 0, sizeof(buffer));
        theString[0] = 0uLL;
        if (MovieTrackGetLoadSettings(*v58, theString))
        {
          v61 = FigAtomWriterInitWithParent();
          if ((_DWORD)v61)
            goto LABEL_324;
          v61 = FigAtomWriterBeginAtom();
          if ((_DWORD)v61)
            goto LABEL_324;
          theString[0] = vrev32q_s8(theString[0]);
          appended = FigAtomWriterAppendData();
          FigAtomWriterEndAtom();
          if ((_DWORD)appended)
            goto LABEL_336;
        }
        else
        {
          FigAtomWriterEndAtom();
        }
      }
      v178 = 0;
      v176 = 0u;
      v177 = 0u;
      *(_OWORD *)theBuffer = 0u;
      BasicInfo = FigAtomWriterInitWithParent();
      if ((_DWORD)BasicInfo)
        goto LABEL_322;
      BasicInfo = FigAtomWriterBeginAtom();
      if ((_DWORD)BasicInfo)
        goto LABEL_322;
      *(_QWORD *)&v180 = 0;
      memset(buffer, 0, sizeof(buffer));
      v92 = *v58;
      *(_QWORD *)newTimescale = 0;
      v167 = 0;
      MediaTimeScale = MovieTrackGetMediaTimeScale(v92);
      MediaDurationValue = MovieTrackGetMediaDurationValue(v92);
      LOWORD(v168) = 21956;
      valuePtr = 0uLL;
      *(_QWORD *)&v163 = 0;
      LODWORD(v170) = 0;
      memset(theString, 0, sizeof(theString));
      MediaTimeInfo = MovieTrackGetMediaTimeInfo(v92, &v167, newTimescale);
      if ((_DWORD)MediaTimeInfo)
        goto LABEL_325;
      if ((*(_BYTE *)(v9 + 16) & 1) == 0)
        *(_QWORD *)newTimescale = (unint64_t)(v31 + CFAbsoluteTimeGetCurrent());
      MovieTrackGetLanguageInformation(v92, &v168, 0, 0);
      MediaTimeInfo = FigAtomWriterInitWithParent();
      if ((_DWORD)MediaTimeInfo || (MediaTimeInfo = FigAtomWriterBeginAtom(), (_DWORD)MediaTimeInfo))
      {
LABEL_325:
        appended = MediaTimeInfo;
        goto LABEL_334;
      }
      v96 = bswap32(MediaTimeScale);
      if (HIDWORD(MediaDurationValue) || HIDWORD(v167) || newTimescale[1])
      {
        *(uint64_t *)((char *)theString[0].i64 + 4) = bswap64(v167);
        *(uint64_t *)((char *)&theString[0].i64[1] + 4) = bswap64(*(unint64_t *)newTimescale);
        theString[0].i32[0] = 1;
        theString[1].i32[1] = v96;
        v98 = (char *)&v170 + 2;
        v97 = &v170;
        theString[1].i64[1] = bswap64(MediaDurationValue);
      }
      else
      {
        LODWORD(valuePtr) = 0;
        *(_QWORD *)((char *)&valuePtr + 4) = _byteswap_uint64(__PAIR64__(v167, newTimescale[0]));
        HIDWORD(valuePtr) = v96;
        v98 = (char *)&v163 + 6;
        v97 = (__int128 *)((char *)&v163 + 4);
        LODWORD(v163) = bswap32(MediaDurationValue);
      }
      *(_WORD *)v97 = bswap32(LOWORD(v168)) >> 16;
      *(_WORD *)v98 = 0;
      appended = FigAtomWriterAppendData();
      FigAtomWriterEndAtom();
      if ((_DWORD)appended)
        goto LABEL_335;
      *(_QWORD *)&v180 = 0;
      memset(buffer, 0, sizeof(buffer));
      theString[0].i64[0] = 0;
      MovieTrackGetLanguageInformation(*v58, 0, 0, theString);
      if (!theString[0].i64[0])
      {
        appended = 0;
        goto LABEL_182;
      }
      v99 = CFStringGetLength((CFStringRef)theString[0].i64[0]) + 1;
      v100 = (char *)CFAllocatorAllocate(v60, v99, 0);
      if (!v100)
      {
        appended = 4294950966;
LABEL_182:
        FigAtomWriterEndAtom();
        if ((_DWORD)appended)
          goto LABEL_335;
        goto LABEL_183;
      }
      v101 = v100;
      if (CFStringGetCString((CFStringRef)theString[0].i64[0], v100, v99, 0x600u))
      {
        v102 = FigAtomWriterInitWithParent();
        if (!(_DWORD)v102)
        {
          v102 = FigAtomWriterBeginAtom();
          if (!(_DWORD)v102)
          {
            v102 = FigAtomWriterAppendVersionAndFlags();
            if (!(_DWORD)v102)
              v102 = FigAtomWriterAppendData();
          }
        }
        appended = v102;
      }
      else
      {
        appended = 4294950961;
      }
      FigAtomWriterEndAtom();
      CFAllocatorDeallocate(v60, v101);
      if ((_DWORD)appended)
        goto LABEL_335;
LABEL_183:
      *(_QWORD *)&v171 = 0;
      v170 = 0u;
      memset(theString, 0, sizeof(theString));
      v103 = *v58;
      MediaType = MovieTrackGetMediaType(*v58);
      v181 = 0u;
      memset(v182, 0, sizeof(v182));
      v180 = 0u;
      memset(buffer, 0, sizeof(buffer));
      valuePtr = 0uLL;
      WORD4(v163) = 0;
      *(_QWORD *)&v163 = 0;
      v105 = *(unsigned __int8 *)(v9 + 120);
      v106 = MovieTrackGetTrackType(v103);
      v107 = v105 == 0;
      if (v105)
        v108 = 0;
      else
        v108 = 1835560050;
      if (v105)
        v109 = 0;
      else
        v109 = 1634758764;
      v110 = FigAtomWriterInitWithParent();
      if ((_DWORD)v110 || (v110 = FigAtomWriterBeginAtom(), (_DWORD)v110))
      {
LABEL_326:
        appended = v110;
LABEL_334:
        FigAtomWriterEndAtom();
        goto LABEL_335;
      }
      if (MediaType <= 1935832171)
      {
        if (MediaType <= 1751216243)
        {
          if (MediaType == 1635088502)
          {
            v107 = 0;
            v111 = CFSTR("Core Media Auxiliary Picture");
            if (!v105)
              goto LABEL_217;
            goto LABEL_214;
          }
          if (MediaType == 1668047728)
          {
            v111 = CFSTR("Core Media Closed Caption");
            if (!v105)
              goto LABEL_217;
            goto LABEL_214;
          }
        }
        else
        {
          switch(MediaType)
          {
            case 1751216244:
              v111 = CFSTR("Core Media Haptic");
              if (!v105)
                goto LABEL_217;
              goto LABEL_214;
            case 1835365473:
              v111 = CFSTR("Core Media Metadata");
              if (!v105)
                goto LABEL_217;
              goto LABEL_214;
            case 1885954932:
              v107 = 0;
              v111 = CFSTR("Core Media Picture");
              if (!v105)
                goto LABEL_217;
              goto LABEL_214;
          }
        }
      }
      else if (MediaType > 1952807027)
      {
        switch(MediaType)
        {
          case 1952807028:
            v111 = CFSTR("Core Media Text");
            if (!v105)
              goto LABEL_217;
            goto LABEL_214;
          case 1953325924:
            v111 = CFSTR("Core Media Time Code");
            if (!v105)
              goto LABEL_217;
            goto LABEL_214;
          case 1986618469:
            v107 = 0;
            v111 = CFSTR("Core Media Video");
            if (!v105)
              goto LABEL_217;
            goto LABEL_214;
        }
      }
      else
      {
        switch(MediaType)
        {
          case 1935832172:
            v111 = CFSTR("Core Media Subtitle");
            if (!v105)
              goto LABEL_217;
            goto LABEL_214;
          case 1935893870:
            v111 = CFSTR("Core Media Scene");
            if (!v105)
              goto LABEL_217;
            goto LABEL_214;
          case 1936684398:
            v107 = 0;
            v111 = CFSTR("Core Media Audio");
            if (!v105)
              goto LABEL_217;
            goto LABEL_214;
        }
      }
      v111 = CFSTR("Core Media Generic");
      if (!v105)
      {
LABEL_217:
        SystemEncoding = CFStringGetSystemEncoding();
        if (!CFStringGetPascalString(v111, (StringPtr)buffer, 256, SystemEncoding))
        {
LABEL_333:
          appended = 4294950961;
          goto LABEL_334;
        }
        goto LABEL_218;
      }
LABEL_214:
      if (!CFStringGetCString(v111, (char *)buffer, 256, 0x8000100u))
        goto LABEL_333;
      strlen((const char *)buffer);
LABEL_218:
      LODWORD(valuePtr) = 0;
      *(_QWORD *)((char *)&valuePtr + 4) = _byteswap_uint64(__PAIR64__(v108, v106));
      HIDWORD(valuePtr) = bswap32(v109);
      if (v107)
        v113 = 0x1000000;
      else
        v113 = 0;
      *(_QWORD *)&v163 = v113;
      v110 = FigAtomWriterAppendData();
      if ((_DWORD)v110)
        goto LABEL_326;
      appended = FigAtomWriterAppendData();
      FigAtomWriterEndAtom();
      if ((_DWORD)appended)
        goto LABEL_335;
      appended = appendMediaInfoAtom(v9, v151);
      FigAtomWriterEndAtom();
      v30 = v147;
      if ((_DWORD)appended)
        goto LABEL_336;
      v114 = (OpaqueCMBlockBuffer *)v151[2];
      if (v114)
      {
        CMBlockBufferGetDataLength(v114);
        appended = FigAtomWriterAppendBlockBufferData();
      }
      else
      {
        v115 = 0;
        *(_QWORD *)&valuePtr = 0;
        memset(buffer, 0, 24);
        memset(theString, 0, 24);
        theBuffer[0] = (CMBlockBufferRef)CFSTR("com.apple.quicktime.mdta");
        theBuffer[1] = (CMBlockBufferRef)CFSTR("com.apple.quicktime.udta");
        *(_QWORD *)&v176 = CFSTR("org.mp4ra");
        do
        {
          v116 = theBuffer[v115];
          TrackMetadataItemArray = MovieTrackGetTrackMetadataItemArray(*v151, v116);
          if (TrackMetadataItemArray)
          {
            buffer[(int)v114] = v116;
            theString[0].i64[(int)v114] = (uint64_t)TrackMetadataItemArray;
            LODWORD(v114) = (_DWORD)v114 + 1;
          }
          ++v115;
        }
        while (v115 != 3);
        MetadataSerializerDictionaryWithMetadata = createMetadataSerializerDictionaryWithMetadata((int)v114, (uint64_t)buffer, (uint64_t)theString, *(_QWORD *)(v9 + 112), 1, 0, (const __CFDictionary *)v151[1], v60, (const __CFDictionary **)&valuePtr);
        v119 = (const void *)valuePtr;
        if (!(_DWORD)MetadataSerializerDictionaryWithMetadata)
          MetadataSerializerDictionaryWithMetadata = appendMetadataFromMetadataSerializerDictionary((const __CFDictionary *)valuePtr);
        appended = MetadataSerializerDictionaryWithMetadata;
        if (v119)
          CFRelease(v119);
      }
      FigAtomWriterEndAtom();
      if ((_DWORD)appended)
        goto LABEL_337;
LABEL_235:
      ++v30;
    }
    while (v30 != Count);
  }
  if (*(_QWORD *)(v9 + 40))
  {
    CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(v9 + 40));
    appended = FigAtomWriterAppendBlockBufferData();
  }
  else
  {
    cf[0] = 0;
    memset(buffer, 0, 32);
    memset(theString, 0, sizeof(theString));
    v120 = FigCFEqual() && *(_BYTE *)(v9 + 48) == 0;
    v121 = 0;
    v122 = 0;
    theBuffer[0] = (CMBlockBufferRef)CFSTR("com.apple.quicktime.mdta");
    theBuffer[1] = (CMBlockBufferRef)CFSTR("com.apple.quicktime.udta");
    *(_QWORD *)&v176 = CFSTR("org.mp4ra");
    *((_QWORD *)&v176 + 1) = CFSTR("com.apple.itunes");
    do
    {
      v123 = theBuffer[v121];
      MovieMetadataItemArray = MovieInformationGetMovieMetadataItemArray(*(_QWORD *)(v9 + 8), v123);
      if (MovieMetadataItemArray)
      {
        buffer[v122] = v123;
        theString[0].i64[v122++] = (uint64_t)MovieMetadataItemArray;
      }
      ++v121;
    }
    while (v121 != 4);
    if (v120)
      v125 = *(_QWORD *)(v9 + 24);
    else
      v125 = 0;
    v126 = createMetadataSerializerDictionaryWithMetadata(v122, (uint64_t)buffer, (uint64_t)theString, *(_QWORD *)(v9 + 112), 0, v125, *(const __CFDictionary **)(v9 + 32), (CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const __CFDictionary **)cf);
    v127 = cf[0];
    if (!(_DWORD)v126)
      v126 = appendMetadataFromMetadataSerializerDictionary((const __CFDictionary *)cf[0]);
    appended = v126;
    if (v127)
      CFRelease(v127);
  }
  if ((_DWORD)appended)
  {
LABEL_337:
    FigAtomWriterEndAtom();
    goto LABEL_315;
  }
  if (*(_BYTE *)(v9 + 48))
  {
    *(_QWORD *)&v171 = 0;
    v170 = 0u;
    memset(theString, 0, sizeof(theString));
    v128 = *(const __CFArray **)(v9 + 88);
    if (v128)
      v129 = CFArrayGetCount(v128);
    else
      v129 = 0;
    v130 = FigAtomWriterInitWithParent();
    if ((_DWORD)v130 || (v130 = FigAtomWriterBeginAtom(), (_DWORD)v130))
    {
      appended = v130;
      goto LABEL_336;
    }
    if ((*(_BYTE *)(v9 + 64) & 1) != 0)
    {
      *(_QWORD *)&v180 = 0;
      memset(buffer, 0, sizeof(buffer));
      newTimescale[0] = 0;
      v167 = 0;
      DWORD2(valuePtr) = 0;
      *(_QWORD *)&valuePtr = 0;
      BasicMetrics = MovieInformationGetBasicMetrics(*(_QWORD *)(v9 + 8), 0, 0, newTimescale, 0);
      if ((_DWORD)BasicMetrics
        || (*(_OWORD *)cf = *(_OWORD *)(v9 + 52),
            *(_QWORD *)&v159 = *(_QWORD *)(v9 + 68),
            CMTimeConvertScale((CMTime *)theBuffer, (CMTime *)cf, newTimescale[0], kCMTimeRoundingMethod_RoundHalfAwayFromZero), v132 = (uint64_t)theBuffer[0], BasicMetrics = FigAtomWriterInitWithParent(), (_DWORD)BasicMetrics)|| (BasicMetrics = FigAtomWriterBeginAtom(), (_DWORD)BasicMetrics))
      {
LABEL_327:
        appended = BasicMetrics;
        FigAtomWriterEndAtom();
        goto LABEL_336;
      }
      if (v132 < 0x100000000)
      {
        LODWORD(v167) = 0;
        HIDWORD(v167) = bswap32(v132);
      }
      else
      {
        LODWORD(valuePtr) = 1;
        *(_QWORD *)((char *)&valuePtr + 4) = bswap64(v132);
      }
      appended = FigAtomWriterAppendData();
      FigAtomWriterEndAtom();
      if ((_DWORD)appended)
      {
LABEL_336:
        FigAtomWriterEndAtom();
        goto LABEL_337;
      }
    }
    if (v129 >= 1)
    {
      for (i = 0; v129 != i; ++i)
      {
        v134 = (uint64_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v9 + 88), i);
        if (hasFormatDescriptionAndNonZeroMediaTimeScale(*v134))
        {
          *(_QWORD *)&v180 = 0;
          memset(buffer, 0, sizeof(buffer));
          v135 = (_DWORD *)*v134;
          LODWORD(cf[0]) = 0;
          theBuffer[1] = 0;
          theBuffer[0] = 0;
          *(_QWORD *)&v176 = 0;
          LODWORD(valuePtr) = 0;
          LODWORD(v167) = 0;
          newTimescale[0] = 0;
          v168 = 0.0;
          BasicMetrics = MovieTrackGetBasicInfo((uint64_t)v135, 0, cf);
          if ((_DWORD)BasicMetrics)
            goto LABEL_327;
          BasicMetrics = MovieTrackGetTrackExtendsDefaultValues(v135, &valuePtr, &v167, newTimescale, &v168);
          if ((_DWORD)BasicMetrics)
            goto LABEL_327;
          BasicMetrics = FigAtomWriterInitWithParent();
          if ((_DWORD)BasicMetrics)
            goto LABEL_327;
          BasicMetrics = FigAtomWriterBeginAtom();
          if ((_DWORD)BasicMetrics)
            goto LABEL_327;
          LODWORD(theBuffer[0]) = 0;
          HIDWORD(theBuffer[0]) = bswap32(cf[0]);
          theBuffer[1] = (CMBlockBufferRef)_byteswap_uint64(__PAIR64__(valuePtr, v167));
          *(_QWORD *)&v176 = _byteswap_uint64(__PAIR64__(newTimescale[0], LODWORD(v168)));
          appended = FigAtomWriterAppendData();
          FigAtomWriterEndAtom();
          if ((_DWORD)appended)
            goto LABEL_336;
        }
      }
    }
    FigAtomWriterEndAtom();
  }
  *(_QWORD *)&v180 = 0;
  memset(buffer, 0, sizeof(buffer));
  v136 = *(_QWORD *)(v9 + 8);
  theString[0].i64[0] = 0;
  theBuffer[0] = 0;
  cf[0] = 0;
  LODWORD(valuePtr) = 0;
  PSSHDataEntries = MovieInformationGetPSSHDataEntries(v136, theString);
  if ((_DWORD)PSSHDataEntries)
    goto LABEL_323;
  if (!theString[0].i64[0])
  {
LABEL_313:
    FigAtomWriterEndAtom();
    goto LABEL_314;
  }
  PSSHDataEntries = FigAtomWriterInitWithParent();
  if ((_DWORD)PSSHDataEntries)
  {
LABEL_323:
    appended = PSSHDataEntries;
    goto LABEL_337;
  }
  if (CFArrayGetCount((CFArrayRef)theString[0].i64[0]) < 1)
    goto LABEL_313;
  v137 = 0;
  while (1)
  {
    v138 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)theString[0].i64[0], v137);
    if (!CFDictionaryGetValueIfPresent(v138, CFSTR("SystemID"), (const void **)theBuffer)
      || !CFDictionaryGetValueIfPresent(v138, CFSTR("Data"), cf))
    {
      goto LABEL_312;
    }
    DataLength = CMBlockBufferGetDataLength(theBuffer[0]);
    v140 = CMBlockBufferGetDataLength((CMBlockBufferRef)cf[0]);
    if (!DataLength)
      break;
    v141 = v140;
    if (!v140)
      break;
    PSSHDataEntries = FigAtomWriterBeginAtom();
    if ((_DWORD)PSSHDataEntries)
      goto LABEL_323;
    PSSHDataEntries = FigAtomWriterAppendVersionAndFlags();
    if ((_DWORD)PSSHDataEntries)
      goto LABEL_323;
    PSSHDataEntries = FigAtomWriterAppendBlockBufferData();
    if ((_DWORD)PSSHDataEntries)
      goto LABEL_323;
    LODWORD(valuePtr) = bswap32(v141);
    PSSHDataEntries = FigAtomWriterAppendData();
    if ((_DWORD)PSSHDataEntries)
      goto LABEL_323;
    PSSHDataEntries = FigAtomWriterAppendBlockBufferData();
    if ((_DWORD)PSSHDataEntries)
      goto LABEL_323;
    PSSHDataEntries = FigAtomWriterEndAtom();
    if ((_DWORD)PSSHDataEntries)
      goto LABEL_323;
LABEL_312:
    if (++v137 >= CFArrayGetCount((CFArrayRef)theString[0].i64[0]))
      goto LABEL_313;
  }
  appended = FigSignalErrorAt();
  FigAtomWriterEndAtom();
  if (!(_DWORD)appended)
  {
LABEL_314:
    appended = 0;
    *v143 = blockBufferOut;
    blockBufferOut = 0;
  }
LABEL_315:
  *(_QWORD *)(v9 + 96) = 0;
  *(_QWORD *)(v9 + 104) = 0;
  *(_BYTE *)(v9 + 120) = 0;
  *(_QWORD *)(v9 + 112) = 0;
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (v153)
    CFRelease(v153);
  if (v144)
    CFRelease(v144);
  return appended;
}

uint64_t isMovieHeaderMakerSupportedFileType()
{
  uint64_t result;

  if (FigCFEqual())
    return 1;
  if (FigCFEqual())
    return 1;
  if (FigCFEqual())
    return 1;
  if (FigCFEqual())
    return 1;
  if (FigCFEqual())
    return 1;
  if (FigCFEqual())
    return 1;
  result = FigCFEqual();
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t MovieHeaderMakerSetShouldWriteMovieExtendsAtom(uint64_t a1, char a2)
{
  if (!a1)
    return FigSignalErrorAt();
  *(_BYTE *)(a1 + 48) = a2;
  return 0;
}

uint64_t MovieHeaderMakerSetMovieMetadataBlockBuffer(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  if (!a1)
    return FigSignalErrorAt();
  v2 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
  return 0;
}

uint64_t MovieHeaderMakerTrackSetTrackMetadataBlockBuffer(uint64_t a1, uint64_t a2, CFTypeRef cf)
{
  const void *v3;

  if (!a1 || !a2)
    return FigSignalErrorAt();
  v3 = *(const void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = cf;
  if (cf)
    CFRetain(cf);
  if (v3)
    CFRelease(v3);
  return 0;
}

uint64_t MovieHeaderMakerTrackSetShouldWriteCleanApertureDimensionsAtom(uint64_t a1, uint64_t a2, char a3)
{
  if (!a1 || !a2)
    return FigSignalErrorAt();
  *(_BYTE *)(a2 + 32) = a3;
  return 0;
}

uint64_t MovieHeaderMakerTrackSetShouldWriteProductionApertureDimensionsAtom(uint64_t a1, uint64_t a2, char a3)
{
  if (!a1 || !a2)
    return FigSignalErrorAt();
  *(_BYTE *)(a2 + 33) = a3;
  return 0;
}

uint64_t MovieHeaderMakerTrackSetShouldWriteEncodedPixelsDimensionsAtom(uint64_t a1, uint64_t a2, char a3)
{
  if (!a1 || !a2)
    return FigSignalErrorAt();
  *(_BYTE *)(a2 + 34) = a3;
  return 0;
}

uint64_t MovieHeaderMakerTrackSetSampleReferenceBaseURL(uint64_t a1, uint64_t a2, CFTypeRef cf)
{
  const void *v3;

  if (!a1 || !a2)
    return FigSignalErrorAt();
  v3 = *(const void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = cf;
  if (cf)
    CFRetain(cf);
  if (v3)
    CFRelease(v3);
  return 0;
}

uint64_t MovieHeaderMakerTrackSetShouldWriteCompactSampleSizeAtomIfPossible(uint64_t a1, uint64_t a2, char a3)
{
  if (!a1 || !a2)
    return FigSignalErrorAt();
  *(_BYTE *)(a2 + 35) = a3;
  return 0;
}

uint64_t MovieHeaderMakerTrackSetShouldWriteRollSampleGroupAtoms(uint64_t a1, uint64_t a2, char a3)
{
  if (!a1 || !a2)
    return FigSignalErrorAt();
  *(_BYTE *)(a2 + 36) = a3;
  return 0;
}

uint64_t MovieHeaderMakerTrackSetNegativeCompositionOffsetsInISOFilePolicy(uint64_t a1, uint64_t a2, int a3)
{
  if (!a1 || !a2)
    return FigSignalErrorAt();
  *(_DWORD *)(a2 + 44) = a3;
  return 0;
}

uint64_t MovieHeaderMakerTrackGetNegativeCompositionOffsetsInISOFilePolicy(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (!a1 || !a2 || !a3)
    return FigSignalErrorAt();
  *a3 = *(_DWORD *)(a2 + 44);
  return 0;
}

uint64_t MovieHeaderMakerTrackSetShouldWriteSampleAuxiliaryInformationAtoms(uint64_t a1, uint64_t a2, char a3)
{
  if (!a1 || !a2)
    return FigSignalErrorAt();
  *(_BYTE *)(a2 + 40) = a3;
  return 0;
}

uint64_t MovieHeaderMakerAddByteCountToTrackRunDataOffsets(uint64_t a1, uint64_t a2)
{
  if (!a1)
    return FigSignalErrorAt();
  *(_QWORD *)(a1 + 128) = a2;
  return 0;
}

uint64_t MovieHeaderMakerTrackSetShouldWriteEditAtom(uint64_t a1, uint64_t a2, char a3)
{
  if (!a1)
    return FigSignalErrorAt();
  *(_BYTE *)(a2 + 37) = a3;
  return 0;
}

uint64_t MovieHeaderMakerTrackSetShouldWriteEditAtomInTrackFragment(uint64_t a1, uint64_t a2, char a3)
{
  if (!a1 || !a2)
    return FigSignalErrorAt();
  *(_BYTE *)(a2 + 38) = a3;
  return 0;
}

uint64_t MovieHeaderMakerTrackSetShouldAllowWritingZeroTrackDurationInEditListAtom(uint64_t a1, uint64_t a2, char a3)
{
  if (!a1 || !a2)
    return FigSignalErrorAt();
  *(_BYTE *)(a2 + 39) = a3;
  return 0;
}

uint64_t MovieHeaderMakerSetShouldWriteBaseMediaDecodeTimeAtomInTrackFragment(uint64_t a1, char a2)
{
  if (!a1)
    return FigSignalErrorAt();
  *(_BYTE *)(a1 + 136) = a2;
  return 0;
}

uint64_t MovieHeaderMakerSetShouldWriteBaseDataOffsetIsMovieFragmentAtomFlagInTrackFragment(uint64_t a1, char a2)
{
  if (!a1)
    return FigSignalErrorAt();
  *(_BYTE *)(a1 + 137) = a2;
  return 0;
}

uint64_t MovieHeaderMakerAddByteCountToChunkOffsets(uint64_t a1, uint64_t a2)
{
  if (!a1)
    return FigSignalErrorAt();
  *(_QWORD *)(a1 + 80) = a2;
  return 0;
}

uint64_t MovieHeaderMakerTrackDidWriteEditAtom(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  if (!a1 || !a2 || !a3)
    return FigSignalErrorAt();
  *a3 = *(_BYTE *)(a2 + 41);
  return 0;
}

uint64_t MovieHeaderMakerSetMovieExtendsHeaderFragmentDuration(uint64_t a1, CMTime *a2)
{
  uint64_t result;
  __int128 v5;
  CMTime v6;
  CMTime time1;

  if (!a1)
    return FigSignalErrorAt();
  if ((a2->flags & 1) != 0)
  {
    if ((a2->flags & 0x1D) != 1)
      return FigSignalErrorAt();
    time1 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    v6 = *a2;
    if (CMTimeCompare(&time1, &v6) >= 1)
      return FigSignalErrorAt();
  }
  result = 0;
  v5 = *(_OWORD *)&a2->value;
  *(_QWORD *)(a1 + 68) = a2->epoch;
  *(_OWORD *)(a1 + 52) = v5;
  return result;
}

uint64_t MovieHeaderMakerCopyFileTypeMajorBrand(uint64_t a1, uint64_t a2, uint64_t a3, char a4, CFNumberRef *a5)
{
  int v7;
  unsigned __int16 v8;
  int valuePtr;

  if (isMovieHeaderMakerSupportedFileType() && a5)
  {
    if (FigCFEqual())
    {
      if ((a4 & 1) != 0)
        v7 = 1769172789;
      else
        v7 = 1836069938;
    }
    else
    {
      if (FigCFEqual())
      {
        v8 = 22048;
      }
      else
      {
        if (!FigCFEqual())
        {
          if (FigCFEqual())
          {
            v7 = 862416949;
            if ((a4 & 1) != 0)
              v7 = 862416950;
          }
          else if (FigCFEqual())
          {
            v7 = 1835623985;
          }
          else if (FigCFEqual())
          {
            v7 = 1768780148;
          }
          else
          {
            v7 = 1903435808;
          }
          goto LABEL_12;
        }
        v8 = 16672;
      }
      v7 = v8 | 0x4D340000;
    }
LABEL_12:
    valuePtr = v7;
    *a5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t MovieHeaderMakerCopyFileTypeMinorVersion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CFNumberRef *a5)
{
  int v6;
  int valuePtr;

  if (isMovieHeaderMakerSupportedFileType() && a5)
  {
    if (FigCFEqual() || FigCFEqual())
    {
      v6 = 1;
LABEL_6:
      valuePtr = v6;
LABEL_7:
      *a5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
      return 0;
    }
    if (!FigCFEqual())
    {
      if (FigCFEqual())
      {
        v6 = 256;
        goto LABEL_6;
      }
      FigCFEqual();
    }
    valuePtr = 0;
    goto LABEL_7;
  }
  return FigSignalErrorAt();
}

uint64_t MovieHeaderMakerCopyFileTypeCompatibleBrands(const __CFAllocator *a1, uint64_t a2, uint64_t a3, char a4, CFMutableArrayRef *a5)
{
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v9;

  if (isMovieHeaderMakerSupportedFileType())
  {
    if (a5)
    {
      Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
      if (Mutable)
      {
        v9 = Mutable;
        if (FigCFEqual())
        {
          FigCFArrayAppendInt32();
          if ((a4 & 1) != 0)
          {
            FigCFArrayAppendInt32();
            FigCFArrayAppendInt32();
            if (!FigCFEqual())
            {
LABEL_14:
              *a5 = v9;
              return 0;
            }
LABEL_13:
            FigCFArrayAppendInt32();
            goto LABEL_14;
          }
LABEL_6:
          FigCFArrayAppendInt32();
          goto LABEL_13;
        }
        if (FigCFEqual())
        {
          FigCFArrayAppendInt32();
        }
        else if (!FigCFEqual())
        {
          if (FigCFEqual())
          {
            FigCFArrayAppendInt32();
            if ((a4 & 1) != 0)
              goto LABEL_13;
          }
          else if (FigCFEqual() || !FigCFEqual())
          {
            goto LABEL_13;
          }
          goto LABEL_6;
        }
        FigCFArrayAppendInt32();
        FigCFArrayAppendInt32();
        goto LABEL_13;
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t MovieHeaderMakerCopyFileTypeAtomAsBlockBuffer(const __CFAllocator *a1, const __CFNumber *a2, const __CFNumber *a3, CFArrayRef theArray, CMBlockBufferRef *a5)
{
  CFIndex Count;
  uint64_t v11;
  CMBlockBufferRef v12;
  uint64_t DataPointer;
  char *v14;
  CFIndex i;
  const __CFNumber *ValueAtIndex;
  char *dataPointerOut;
  CMBlockBufferRef theBuffer;
  unsigned int v20;
  uint64_t valuePtr;

  valuePtr = 0;
  v20 = 0;
  if (theArray)
    Count = CFArrayGetCount(theArray);
  else
    Count = 0;
  dataPointerOut = 0;
  theBuffer = 0;
  if (a2 && a3 && theArray && a5)
  {
    v11 = CMBlockBufferCreateWithMemoryBlock(a1, 0, 4 * Count + 16, a1, 0, 0, 4 * Count + 16, 1u, &theBuffer);
    v12 = theBuffer;
    if (!(_DWORD)v11)
    {
      DataPointer = CMBlockBufferGetDataPointer(theBuffer, 0, 0, 0, &dataPointerOut);
      if (!(_DWORD)DataPointer)
      {
        *(_DWORD *)dataPointerOut = bswap32(4 * Count + 16);
        v14 = dataPointerOut;
        dataPointerOut += 4;
        *((_DWORD *)v14 + 1) = 1887007846;
        dataPointerOut += 4;
        CFNumberGetValue(a2, kCFNumberSInt32Type, (char *)&valuePtr + 4);
        HIDWORD(valuePtr) = bswap32(HIDWORD(valuePtr));
        *(_DWORD *)dataPointerOut = HIDWORD(valuePtr);
        dataPointerOut += 4;
        CFNumberGetValue(a3, kCFNumberSInt32Type, &valuePtr);
        LODWORD(valuePtr) = bswap32(valuePtr);
        *(_DWORD *)dataPointerOut = valuePtr;
        dataPointerOut += 4;
        if (Count >= 1)
        {
          for (i = 0; i != Count; ++i)
          {
            ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, i);
            CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &v20);
            v20 = bswap32(v20);
            *(_DWORD *)dataPointerOut = v20;
            dataPointerOut += 4;
          }
        }
        v11 = 0;
        *a5 = theBuffer;
        return v11;
      }
      v11 = DataPointer;
      v12 = theBuffer;
    }
    if (v12)
      CFRelease(v12);
    return v11;
  }
  return FigSignalErrorAt();
}

uint64_t MovieHeaderMakerCopyMediaDataAtomHeaderAsBlockBuffer(CFAllocatorRef blockAllocator, int a2, unint64_t a3, CMBlockBufferRef *a4)
{
  size_t v5;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  unint64_t v12;
  CMBlockBufferRef destinationBuffer;
  uint64_t sourceBytes;

  destinationBuffer = 0;
  sourceBytes = 0;
  if (a2)
    v5 = 16;
  else
    v5 = 8;
  if (a4)
  {
    if ((a3 & 0x8000000000000000) == 0)
    {
      v8 = CMBlockBufferCreateWithMemoryBlock(blockAllocator, 0, v5, blockAllocator, 0, 0, v5, 1u, &destinationBuffer);
      if ((_DWORD)v8)
        goto LABEL_21;
      if (!HIDWORD(a3))
      {
        if (a2)
        {
          sourceBytes = 0x6564697708000000;
          v9 = 8;
          v8 = CMBlockBufferReplaceDataBytes(&sourceBytes, destinationBuffer, 0, 8uLL);
          if ((_DWORD)v8)
            goto LABEL_21;
        }
        else
        {
          v9 = 0;
        }
        sourceBytes = bswap32(a3) | 0x7461646D00000000;
        v8 = CMBlockBufferReplaceDataBytes(&sourceBytes, destinationBuffer, v9, 8uLL);
        if (!(_DWORD)v8)
        {
LABEL_18:
          v10 = 0;
          *a4 = destinationBuffer;
          return v10;
        }
        goto LABEL_21;
      }
      if (a2 == 1)
      {
        sourceBytes = 0x7461646D01000000;
        v8 = CMBlockBufferReplaceDataBytes(&sourceBytes, destinationBuffer, 0, 8uLL);
        if (!(_DWORD)v8)
        {
          v12 = bswap64(a3 + 8);
          v10 = CMBlockBufferReplaceDataBytes(&v12, destinationBuffer, 8uLL, 8uLL);
          if ((_DWORD)v10)
            goto LABEL_14;
          goto LABEL_18;
        }
LABEL_21:
        v10 = v8;
LABEL_14:
        if (destinationBuffer)
          CFRelease(destinationBuffer);
        return v10;
      }
    }
    v8 = FigSignalErrorAt();
    goto LABEL_21;
  }
  return FigSignalErrorAt();
}

uint64_t MovieHeaderMakerCopyMovieFragmentHeaderAsBlockBuffer(uint64_t a1, const __CFAllocator *a2, uint64_t a3, int a4, CMBlockBufferRef *a5)
{
  uint64_t v8;
  const __CFArray *v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex v12;
  uint64_t *ValueAtIndex;
  uint64_t v14;
  char v15;
  const __CFArray *v16;
  CFIndex v17;
  uint64_t v18;
  uint64_t appended;
  CFIndex v20;
  _BYTE *v21;
  uint64_t v22;
  _BOOL4 v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t BasicInfo;
  int v28;
  int v29;
  int v30;
  CFIndex v31;
  int v32;
  char v33;
  char v34;
  unint64_t *v35;
  unint64_t v36;
  unsigned int v37;
  OpaqueCMBlockBuffer *v38;
  CMBlockBufferRef v39;
  unsigned int v40;
  OpaqueCMBlockBuffer *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  CFIndex v45;
  uint64_t v46;
  uint64_t DataOffsetAtTrackRunIndex;
  int v48;
  uint64_t SampleDurationArrayBbufAtTrackRunIndex;
  int v50;
  CMBlockBufferRef v51;
  __int16 v52;
  int v53;
  CMBlockBufferRef v54;
  __int16 v55;
  size_t v56;
  unint64_t v57;
  CMBlockBufferRef v58;
  char v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  CMBlockBufferRef v64;
  const __CFAllocator *structureAllocator;
  CMBlockBufferRef *v66;
  CFIndex v67;
  CMBlockBufferRef blockBufferOut;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  __int16 v78;
  int v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  unsigned int destination;
  uint64_t v89;
  CMBlockBufferRef v90;
  CMBlockBufferRef v91;
  CMBlockBufferRef v92;
  CMBlockBufferRef v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  OpaqueCMBlockBuffer *v97;
  CMBlockBufferRef v98[3];

  v72 = 0;
  v70 = 0u;
  v71 = 0u;
  v69 = 0u;
  blockBufferOut = 0;
  *(_DWORD *)(a1 + 124) = a4;
  *(_QWORD *)(a1 + 112) = a3;
  *(_BYTE *)(a1 + 120) = FigFileTypeIsISOFileType();
  v8 = CMBlockBufferCreateEmpty(a2, 0x40u, 0, &blockBufferOut);
  if ((_DWORD)v8 || (v8 = FigAtomWriterInitWithBlockBuffer(), (_DWORD)v8))
  {
    appended = v8;
  }
  else
  {
    v66 = a5;
    v9 = *(const __CFArray **)(a1 + 88);
    if (!v9 || (Count = CFArrayGetCount(v9), Count < 1))
    {
LABEL_201:
      FigAtomWriterEndAtom();
      appended = 0;
      *v66 = blockBufferOut;
      *(_DWORD *)(a1 + 124) = 0;
      *(_QWORD *)(a1 + 112) = 0;
      *(_BYTE *)(a1 + 120) = 0;
      return appended;
    }
    v11 = Count;
    v12 = 0;
    while (1)
    {
      ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), v12);
      LODWORD(v84) = 0;
      v14 = MovieTrackFragmentNumTrackRuns(*ValueAtIndex, &v84);
      if ((_DWORD)v14)
        goto LABEL_209;
      v15 = *((_BYTE *)ValueAtIndex + 37);
      if (v15)
        v15 = *((_BYTE *)ValueAtIndex + 38) != 0;
      if ((_DWORD)v84 || (v15 & 1) != 0)
        break;
      if (v11 == ++v12)
        goto LABEL_201;
    }
    v16 = *(const __CFArray **)(a1 + 88);
    if (v16)
      v17 = CFArrayGetCount(v16);
    else
      v17 = 0;
    v14 = FigAtomWriterBeginAtom();
    if ((_DWORD)v14)
    {
LABEL_209:
      appended = v14;
    }
    else
    {
      v87 = 0;
      v85 = 0u;
      v86 = 0u;
      v84 = 0u;
      LODWORD(v74) = bswap32(*(_DWORD *)(a1 + 124));
      v18 = FigAtomWriterInitWithParent();
      if ((_DWORD)v18
        || (v18 = FigAtomWriterBeginAtom(), (_DWORD)v18)
        || (v18 = FigAtomWriterAppendVersionAndFlags(), (_DWORD)v18))
      {
        appended = v18;
LABEL_205:
        FigAtomWriterEndAtom();
      }
      else
      {
        appended = FigAtomWriterAppendData();
        FigAtomWriterEndAtom();
        if (!(_DWORD)appended)
        {
          if (v17 >= 1)
          {
            v20 = 0;
            structureAllocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            while (1)
            {
              v21 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), v20);
              v22 = (uint64_t)v21;
              v77 = 0;
              v75 = 0u;
              v76 = 0u;
              v74 = 0u;
              v73 = 0;
              v23 = v21[37] && v21[38] && FigCFEqual() == 0;
              v24 = MovieTrackFragmentNumTrackRuns(*(_QWORD *)v22, &v73);
              if ((_DWORD)v24)
              {
LABEL_210:
                appended = v24;
                goto LABEL_205;
              }
              v67 = v20;
              if (v73)
                v25 = 1;
              else
                v25 = v23;
              if (v25 == 1)
              {
                v24 = FigAtomWriterInitWithParent();
                if ((_DWORD)v24)
                  goto LABEL_210;
                v24 = FigAtomWriterBeginAtom();
                if ((_DWORD)v24)
                  goto LABEL_210;
                v87 = 0;
                v85 = 0u;
                v86 = 0u;
                v84 = 0u;
                v26 = *(_QWORD *)v22;
                LODWORD(v97) = 0;
                LODWORD(v93) = 0;
                BYTE4(v96) = 0;
                LODWORD(v92) = 0;
                LODWORD(v91) = 0;
                LODWORD(v90) = 0;
                LODWORD(v89) = 0;
                BasicInfo = MovieTrackGetBasicInfo(v26, 0, &v97);
                if ((_DWORD)BasicInfo)
                  goto LABEL_203;
                v28 = *(unsigned __int8 *)(a1 + 137);
                BasicInfo = MovieTrackFragmentGetTrackFragmentHeaderSampleDescriptionIndex(v26, &v92, (_BYTE *)&v96 + 4);
                if ((_DWORD)BasicInfo)
                  goto LABEL_203;
                v29 = BYTE4(v96);
                BasicInfo = MovieTrackFragmentGetTrackFragmentHeaderDefaultSampleDuration(v26, &v91, (_BYTE *)&v96 + 4);
                if ((_DWORD)BasicInfo)
                  goto LABEL_203;
                v30 = BYTE4(v96);
                BasicInfo = MovieTrackFragmentGetTrackFragmentHeaderDefaultSampleSize(v26, &v90, (_BYTE *)&v96 + 4);
                if ((_DWORD)BasicInfo)
                  goto LABEL_203;
                v31 = v17;
                v32 = BYTE4(v96);
                BasicInfo = MovieTrackFragmentGetTrackFragmentHeaderDefaultSampleFlags(v26, &v89, (_BYTE *)&v96 + 4);
                if ((_DWORD)BasicInfo)
                  goto LABEL_203;
                v33 = v28 == 0;
                if (v29)
                  v33 |= 2u;
                if (v30)
                  v33 |= 8u;
                if (v32)
                  v33 |= 0x10u;
                v34 = BYTE4(v96) ? v33 | 0x20 : v33;
                BasicInfo = FigAtomWriterInitWithParent();
                if ((_DWORD)BasicInfo)
                  goto LABEL_203;
                BasicInfo = FigAtomWriterBeginAtom();
                if ((_DWORD)BasicInfo)
                  goto LABEL_203;
                BasicInfo = FigAtomWriterAppendVersionAndFlags();
                if ((_DWORD)BasicInfo)
                  goto LABEL_203;
                LODWORD(v93) = bswap32(v97);
                BasicInfo = FigAtomWriterAppendData();
                if ((_DWORD)BasicInfo)
                  goto LABEL_203;
                v17 = v31;
                if ((v34 & 1) != 0)
                {
                  LODWORD(v82) = 0;
                  v98[0] = 0;
                  BasicInfo = MovieTrackFragmentNumTrackRuns(v26, &v82);
                  if ((_DWORD)BasicInfo)
                    goto LABEL_203;
                  v35 = (unint64_t *)(v22 + 80);
                  if ((_DWORD)v82)
                  {
                    BasicInfo = MovieTrackFragmentGetDataOffsetAtTrackRunIndex(v26, 0, (_QWORD *)(v22 + 80));
                    if ((_DWORD)BasicInfo)
                      goto LABEL_203;
                    v36 = *v35;
                  }
                  else
                  {
                    v36 = 0;
                    *v35 = 0;
                  }
                  v98[0] = (CMBlockBufferRef)bswap64(v36);
                  BasicInfo = FigAtomWriterAppendData();
                  if ((_DWORD)BasicInfo)
                    goto LABEL_203;
                }
                if ((v34 & 2) != 0
                  && (LODWORD(v98[0]) = bswap32(v92),
                      BasicInfo = FigAtomWriterAppendData(),
                      (_DWORD)BasicInfo)
                  || (v34 & 8) != 0
                  && (LODWORD(v98[0]) = bswap32(v91),
                      BasicInfo = FigAtomWriterAppendData(),
                      (_DWORD)BasicInfo)
                  || (v34 & 0x10) != 0
                  && (LODWORD(v98[0]) = bswap32(v90),
                      BasicInfo = FigAtomWriterAppendData(),
                      (_DWORD)BasicInfo))
                {
LABEL_203:
                  appended = BasicInfo;
LABEL_204:
                  FigAtomWriterEndAtom();
                  goto LABEL_205;
                }
                if ((v34 & 0x20) != 0)
                {
                  LODWORD(v98[0]) = bswap32(v89);
                  appended = FigAtomWriterAppendData();
                  FigAtomWriterEndAtom();
                  if ((_DWORD)appended)
                    goto LABEL_205;
                }
                else
                {
                  FigAtomWriterEndAtom();
                }
                if (v23)
                {
                  appended = appendEditAtom(a1, (uint64_t *)v22, 0);
                  if ((_DWORD)appended || !v73)
                  {
                    FigAtomWriterEndAtom();
                    if ((_DWORD)appended)
                      goto LABEL_206;
                    goto LABEL_197;
                  }
                }
                else if (!v73)
                {
                  goto LABEL_196;
                }
                if (*(_BYTE *)(a1 + 136))
                {
                  v87 = 0;
                  v85 = 0u;
                  v86 = 0u;
                  v84 = 0u;
                  LOBYTE(v93) = 0;
                  v97 = 0;
                  v98[0] = 0;
                  BasicInfo = MovieTrackFragmentGetTrackFragmentBaseMediaDecodeTimeValue(*(_QWORD *)v22, v98, (char *)&v93);
                  if ((_DWORD)BasicInfo)
                    goto LABEL_203;
                  if (v93 != 1)
                  {
                    appended = 4294950954;
                    goto LABEL_204;
                  }
                  BasicInfo = FigAtomWriterInitWithParent();
                  if ((_DWORD)BasicInfo)
                    goto LABEL_203;
                  BasicInfo = FigAtomWriterBeginAtom();
                  if ((_DWORD)BasicInfo)
                    goto LABEL_203;
                  BasicInfo = FigAtomWriterAppendVersionAndFlags();
                  if ((_DWORD)BasicInfo)
                    goto LABEL_203;
                  v97 = (OpaqueCMBlockBuffer *)bswap64((unint64_t)v98[0]);
                  appended = FigAtomWriterAppendData();
                  FigAtomWriterEndAtom();
                  if ((_DWORD)appended)
                    goto LABEL_205;
                }
                if (*(_BYTE *)(v22 + 40))
                {
                  LOBYTE(v90) = 0;
                  LODWORD(v91) = 0;
                  v97 = 0;
                  v93 = 0;
                  LOBYTE(v89) = 0;
                  if (*(_BYTE *)(a1 + 137) == 1)
                  {
                    appended = MovieTrackFragmentGetSampleAuxInformation(*(_QWORD *)v22, &v90, &v91, &v97, &v93, &v89);
                    if (!(_DWORD)appended)
                    {
                      v37 = v91;
                      if ((_DWORD)v91)
                      {
                        v38 = v93;
                        LODWORD(v92) = (_DWORD)v91;
                        v87 = 0;
                        v85 = 0u;
                        v86 = 0u;
                        v84 = 0u;
                        v98[0] = 0;
                        BasicInfo = FigAtomWriterInitWithParent();
                        if ((_DWORD)BasicInfo)
                          goto LABEL_203;
                        BasicInfo = FigAtomWriterBeginAtom();
                        if ((_DWORD)BasicInfo)
                          goto LABEL_203;
                        BasicInfo = FigAtomWriterAppendVersionAndFlags();
                        if ((_DWORD)BasicInfo)
                          goto LABEL_203;
                        LODWORD(v92) = bswap32(v37);
                        BasicInfo = FigAtomWriterAppendData();
                        if ((_DWORD)BasicInfo)
                          goto LABEL_203;
                        CMBlockBufferGetDataLength(v38);
                        BasicInfo = FigAtomWriterAppendBlockBufferData();
                        if ((_DWORD)BasicInfo)
                          goto LABEL_203;
                        BasicInfo = FigAtomWriterGetAtomGlobalDataOffset();
                        if ((_DWORD)BasicInfo)
                          goto LABEL_203;
                        v39 = v98[0];
                        FigAtomWriterEndAtom();
                        v40 = v91;
                        v41 = v97;
                        LOBYTE(v92) = (_BYTE)v90;
                        v87 = 0;
                        v85 = 0u;
                        v86 = 0u;
                        v84 = 0u;
                        BasicInfo = FigAtomWriterInitWithParent();
                        if ((_DWORD)BasicInfo)
                          goto LABEL_203;
                        BasicInfo = FigAtomWriterBeginAtom();
                        if ((_DWORD)BasicInfo)
                          goto LABEL_203;
                        BasicInfo = FigAtomWriterAppendVersionAndFlags();
                        if ((_DWORD)BasicInfo)
                          goto LABEL_203;
                        BasicInfo = FigAtomWriterAppendData();
                        if ((_DWORD)BasicInfo)
                          goto LABEL_203;
                        LODWORD(v98[0]) = bswap32(v40);
                        v42 = FigAtomWriterAppendData();
                        appended = v42;
                        if (v41 && !(_DWORD)v42)
                        {
                          CMBlockBufferGetDataLength(v41);
                          appended = FigAtomWriterAppendBlockBufferData();
                        }
                        FigAtomWriterEndAtom();
                        if ((_DWORD)appended)
                          goto LABEL_205;
                        v43 = (uint64_t)v39 + 4;
                        v87 = 0;
                        v85 = 0u;
                        v86 = 0u;
                        v84 = 0u;
                        LODWORD(v92) = 1;
                        v44 = FigAtomWriterInitWithParent();
                        if (!(_DWORD)v44)
                        {
                          v44 = FigAtomWriterBeginAtom();
                          if (!(_DWORD)v44)
                          {
                            v44 = FigAtomWriterAppendVersionAndFlags();
                            if (!(_DWORD)v44)
                            {
                              LODWORD(v92) = 0x1000000;
                              v44 = FigAtomWriterAppendData();
                              if (!(_DWORD)v44)
                              {
                                if (v43 <= 0xFFFFFFFFLL)
                                  LODWORD(v98[0]) = bswap32(v43);
                                else
                                  v98[0] = (CMBlockBufferRef)bswap64(v43);
                                v44 = FigAtomWriterAppendData();
                              }
                            }
                          }
                        }
                        appended = v44;
                        FigAtomWriterEndAtom();
                      }
                    }
                    if ((_DWORD)appended)
                      goto LABEL_205;
                  }
                  else
                  {
                    appended = FigSignalErrorAt();
                    if ((_DWORD)appended)
                      goto LABEL_205;
                  }
                }
                v24 = appendSampleGroupDescriptionAtoms((_QWORD *)v22, (uint64_t (*)(_QWORD, CFDictionaryRef *))MovieTrackFragmentCopySampleGroupDescriptionArrays);
                if ((_DWORD)v24)
                  goto LABEL_210;
                v24 = appendSampleToGroupAtoms(a1, v22, MovieTrackFragmentCopySampleGroupArray);
                if ((_DWORD)v24)
                  goto LABEL_210;
                if (v73 >= 1)
                {
                  v45 = 0;
                  do
                  {
                    v87 = 0;
                    v85 = 0u;
                    v86 = 0u;
                    v84 = 0u;
                    v46 = *(_QWORD *)v22;
                    v82 = 0;
                    v83 = 0;
                    v81 = 0;
                    v80 = 0;
                    v79 = 0;
                    v78 = 0;
                    DataOffsetAtTrackRunIndex = MovieTrackFragmentNumSamplesAtTrackRunIndex(v46, v45, (_DWORD *)&v83 + 1);
                    if ((_DWORD)DataOffsetAtTrackRunIndex)
                      goto LABEL_119;
                    DataOffsetAtTrackRunIndex = MovieTrackFragmentGetDataOffsetAtTrackRunIndex(v46, v45, &v82);
                    if ((_DWORD)DataOffsetAtTrackRunIndex)
                      goto LABEL_119;
                    DataOffsetAtTrackRunIndex = MovieTrackFragmentGetFirstSampleFlagsAtTrackRunIndex(v46, v45, &v81, &v80);
                    if ((_DWORD)DataOffsetAtTrackRunIndex)
                      goto LABEL_119;
                    DataOffsetAtTrackRunIndex = getTimeValueToAddToCompositionOffsets(a1, v22, 0, &v79, &v78, (_BYTE *)&v78 + 1);
                    if ((_DWORD)DataOffsetAtTrackRunIndex)
                      goto LABEL_119;
                    if (HIBYTE(v78))
                    {
                      DataOffsetAtTrackRunIndex = FigSignalErrorAt();
LABEL_119:
                      appended = DataOffsetAtTrackRunIndex;
                      goto LABEL_120;
                    }
                    v48 = v79;
                    v97 = 0;
                    v98[0] = 0;
                    v95 = 0;
                    v96 = 0;
                    v94 = 0;
                    v92 = 0;
                    v93 = 0;
                    v90 = 0;
                    v91 = 0;
                    SampleDurationArrayBbufAtTrackRunIndex = MovieTrackFragmentNumSamplesAtTrackRunIndex(v46, v45, (_DWORD *)&v96 + 1);
                    if ((_DWORD)SampleDurationArrayBbufAtTrackRunIndex)
                      goto LABEL_191;
                    SampleDurationArrayBbufAtTrackRunIndex = MovieTrackFragmentGetSampleDurationArrayBbufAtTrackRunIndex(v46, v45, &v96, &v93);
                    if ((_DWORD)SampleDurationArrayBbufAtTrackRunIndex)
                      goto LABEL_191;
                    SampleDurationArrayBbufAtTrackRunIndex = MovieTrackFragmentGetSampleSizeArrayBbufAtTrackRunIndex(v46, v45, (_DWORD *)&v95 + 1, &v92);
                    if ((_DWORD)SampleDurationArrayBbufAtTrackRunIndex)
                      goto LABEL_191;
                    SampleDurationArrayBbufAtTrackRunIndex = MovieTrackFragmentGetSampleFlagsArrayBbufAtTrackRunIndex(v46, v45, &v95, &v91);
                    if ((_DWORD)SampleDurationArrayBbufAtTrackRunIndex)
                      goto LABEL_191;
                    SampleDurationArrayBbufAtTrackRunIndex = MovieTrackFragmentGetSampleCompositionTimeOffsetArrayBbufAtTrackRunIndex(v46, v45, &v94, &v90);
                    if ((_DWORD)SampleDurationArrayBbufAtTrackRunIndex)
                      goto LABEL_191;
                    v50 = v96 != 0;
                    v51 = v93;
                    if (!(_DWORD)v96)
                      v51 = 0;
                    v52 = (_WORD)v50 << 8;
                    if ((_DWORD)v96)
                      v53 = 2;
                    else
                      v53 = 1;
                    if (HIDWORD(v95))
                    {
                      v51 = v92;
                      v52 = (((_DWORD)v96 != 0) << 8) | 0x200;
                      v50 = v53;
                    }
                    if ((_DWORD)v95)
                    {
                      v51 = v91;
                      v52 |= 0x400u;
                      ++v50;
                    }
                    if (v94)
                      v54 = v90;
                    else
                      v54 = v51;
                    if (v94)
                      v55 = v52 | 0x800;
                    else
                      v55 = v52;
                    if (v94)
                      ++v50;
                    if (v50)
                    {
                      if (v50 == 1)
                      {
                        if (v54)
                          v54 = (CMBlockBufferRef)CFRetain(v54);
                        v98[0] = v54;
                      }
                      else
                      {
                        SampleDurationArrayBbufAtTrackRunIndex = CMBlockBufferCreateEmpty(structureAllocator, 0x10u, 0, v98);
                        if ((_DWORD)SampleDurationArrayBbufAtTrackRunIndex)
                          goto LABEL_191;
                        SampleDurationArrayBbufAtTrackRunIndex = CMByteStreamCreateWritableForBlockBuffer();
                        if ((_DWORD)SampleDurationArrayBbufAtTrackRunIndex)
                          goto LABEL_191;
                        if (HIDWORD(v96))
                        {
                          v56 = 0;
                          v57 = 0;
                          while (1)
                          {
                            v89 = 0;
                            if ((v55 & 0x100) != 0)
                            {
                              destination = 0;
                              SampleDurationArrayBbufAtTrackRunIndex = CMBlockBufferCopyDataBytes(v93, v56, 4uLL, &destination);
                              if ((_DWORD)SampleDurationArrayBbufAtTrackRunIndex)
                                break;
                              SampleDurationArrayBbufAtTrackRunIndex = CMByteStreamAppend();
                              if ((_DWORD)SampleDurationArrayBbufAtTrackRunIndex)
                                break;
                            }
                            if ((v55 & 0x200) != 0)
                            {
                              destination = 0;
                              SampleDurationArrayBbufAtTrackRunIndex = CMBlockBufferCopyDataBytes(v92, v56, 4uLL, &destination);
                              if ((_DWORD)SampleDurationArrayBbufAtTrackRunIndex)
                                break;
                              SampleDurationArrayBbufAtTrackRunIndex = CMByteStreamAppend();
                              if ((_DWORD)SampleDurationArrayBbufAtTrackRunIndex)
                                break;
                            }
                            if ((v55 & 0x400) != 0)
                            {
                              destination = 0;
                              SampleDurationArrayBbufAtTrackRunIndex = CMBlockBufferCopyDataBytes(v91, v56, 4uLL, &destination);
                              if ((_DWORD)SampleDurationArrayBbufAtTrackRunIndex)
                                break;
                              SampleDurationArrayBbufAtTrackRunIndex = CMByteStreamAppend();
                              if ((_DWORD)SampleDurationArrayBbufAtTrackRunIndex)
                                break;
                            }
                            if ((v55 & 0x800) != 0)
                            {
                              destination = 0;
                              SampleDurationArrayBbufAtTrackRunIndex = CMBlockBufferCopyDataBytes(v90, v56, 4uLL, &destination);
                              if ((_DWORD)SampleDurationArrayBbufAtTrackRunIndex)
                                break;
                              destination = bswap32(bswap32(destination) + v48);
                              SampleDurationArrayBbufAtTrackRunIndex = CMByteStreamAppend();
                              if ((_DWORD)SampleDurationArrayBbufAtTrackRunIndex)
                                break;
                            }
                            ++v57;
                            v56 += 4;
                            if (v57 >= HIDWORD(v96))
                              goto LABEL_165;
                          }
LABEL_191:
                          appended = SampleDurationArrayBbufAtTrackRunIndex;
                          if (v98[0])
                            CFRelease(v98[0]);
                          v55 = 0;
                          v58 = 0;
                          goto LABEL_166;
                        }
                      }
                    }
LABEL_165:
                    appended = 0;
                    v58 = v98[0];
                    v98[0] = 0;
LABEL_166:
                    if (v97)
                      CFRelease(v97);
                    if ((_DWORD)appended)
                      goto LABEL_182;
                    if (v80)
                      v59 = 5;
                    else
                      v59 = 1;
                    if ((v55 & 0x800) == 0)
                      LOBYTE(v78) = 0;
                    v60 = FigAtomWriterInitWithParent();
                    if ((_DWORD)v60)
                      goto LABEL_195;
                    v60 = FigAtomWriterBeginAtom();
                    if ((_DWORD)v60)
                      goto LABEL_195;
                    v61 = v59 | v55;
                    v60 = FigAtomWriterAppendVersionAndFlags();
                    if ((_DWORD)v60)
                      goto LABEL_195;
                    LODWORD(v83) = bswap32(HIDWORD(v83));
                    v60 = FigAtomWriterAppendData();
                    if ((_DWORD)v60)
                      goto LABEL_195;
                    v62 = *(_QWORD *)(a1 + 128) + v82 - *(_QWORD *)(v22 + 80);
                    v82 = v62;
                    if (v62 != (int)v62)
                    {
                      v60 = FigSignalErrorAt();
LABEL_195:
                      appended = v60;
LABEL_182:
                      FigAtomWriterEndAtom();
                      if (!v58)
                        goto LABEL_187;
LABEL_186:
                      CFRelease(v58);
                      goto LABEL_187;
                    }
                    HIDWORD(v81) = bswap32(v62);
                    v60 = FigAtomWriterAppendData();
                    if ((_DWORD)v60)
                      goto LABEL_195;
                    if ((v61 & 4) != 0)
                    {
                      LODWORD(v98[0]) = bswap32(v81);
                      appended = FigAtomWriterAppendData();
                      if ((_DWORD)appended)
                        goto LABEL_182;
                    }
                    if (v58)
                    {
                      CMBlockBufferGetDataLength(v58);
                      appended = FigAtomWriterAppendBlockBufferData();
                      FigAtomWriterEndAtom();
                      goto LABEL_186;
                    }
                    appended = 0;
LABEL_120:
                    FigAtomWriterEndAtom();
LABEL_187:
                    if ((_DWORD)appended)
                      goto LABEL_205;
                    v45 = (v45 + 1);
                  }
                  while ((int)v45 < v73);
                }
              }
LABEL_196:
              FigAtomWriterEndAtom();
LABEL_197:
              v20 = v67 + 1;
              if (v67 + 1 == v17)
                goto LABEL_201;
            }
          }
          goto LABEL_201;
        }
      }
    }
LABEL_206:
    FigAtomWriterEndAtom();
  }
  v64 = blockBufferOut;
  *(_DWORD *)(a1 + 124) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  if (v64)
    CFRelease(v64);
  return appended;
}

const __CFArray *hasFormatDescriptionAndNonZeroMediaTimeScale(uint64_t a1)
{
  const __CFArray *result;

  result = MovieTrackGetNumFormatDescriptions(a1);
  if ((_DWORD)result)
    return (const __CFArray *)(MovieTrackGetMediaTimeScale(a1) != 0);
  return result;
}

uint64_t getTimeValueToAddToCompositionOffsets(uint64_t a1, uint64_t a2, int a3, int *a4, _BYTE *a5, _BYTE *a6)
{
  _QWORD *v10;
  uint64_t v11;
  int v12;
  int MediaType;
  BOOL v16;
  const __CFArray *v17;
  const __CFArray *v18;
  CFIndex Count;
  CFIndex v20;
  CFIndex v21;
  const opaqueCMFormatDescription *ValueAtIndex;
  uint64_t result;
  int32_t MediaTimeScale;
  char v25;
  int v26;
  CMTime time;
  CMTime v28;
  int value;

  v10 = *(_QWORD **)(a1 + 8);
  v11 = *(_QWORD *)a2;
  value = 0;
  LOBYTE(v12) = *(_BYTE *)(a1 + 120);
  if ((_BYTE)v12)
  {
    v12 = *(_DWORD *)(a2 + 44);
    if (v12 != 1)
    {
      if (!v12)
      {
        MediaType = MovieTrackGetMediaType(v11);
        v16 = MediaType == 1635088502 || MediaType == 1986618469 || MediaType == 1885954932;
        if (!v16 || (v17 = MovieTrackCopyFormatDescriptionArray(v11)) == 0)
        {
          LOBYTE(v12) = 1;
          goto LABEL_26;
        }
        v18 = v17;
        Count = CFArrayGetCount(v17);
        if (Count < 1)
        {
LABEL_17:
          CFRelease(v18);
          LOBYTE(v12) = 1;
          goto LABEL_26;
        }
        v20 = Count;
        v21 = 0;
        while (1)
        {
          ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(v18, v21);
          if (CMFormatDescriptionGetMediaSubType(ValueAtIndex) == 1635148593)
            break;
          if (v20 == ++v21)
            goto LABEL_17;
        }
        CFRelease(v18);
      }
      result = getCompositionOffsetToDTDDeltaShift(v10, v11, a3, &value);
      if ((_DWORD)result)
        return result;
      if ((*(_DWORD *)(a2 + 68) & 0x1D) == 1)
      {
        MediaTimeScale = MovieTrackGetMediaTimeScale(v11);
        memset(&v28, 0, sizeof(v28));
        time = *(CMTime *)(a2 + 56);
        CMTimeConvertScale(&v28, &time, MediaTimeScale, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
        if (v28.value < value)
          return FigSignalErrorAt();
        LOBYTE(v12) = 0;
        value = v28.value;
      }
      else
      {
        LOBYTE(v12) = 0;
      }
    }
  }
LABEL_26:
  v25 = *(_BYTE *)(a2 + 48);
  if (v25)
  {
    v26 = value;
    v25 = *(_DWORD *)(a2 + 52) != value;
  }
  else
  {
    *(_BYTE *)(a2 + 48) = 1;
    v26 = value;
    *(_DWORD *)(a2 + 52) = value;
  }
  *a4 = v26;
  if (a5)
    *a5 = v12;
  result = 0;
  if (a6)
    *a6 = v25;
  return result;
}

uint64_t getCompositionOffsetToDTDDeltaShift(_QWORD *a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  int v9;
  int v10;
  int v11;

  v11 = 0;
  result = MovieTrackGetCompositionOffsetRange(a1, a2, &v11, 0);
  if (!(_DWORD)result)
  {
    if (a3)
    {
      v9 = v11;
    }
    else
    {
      v10 = 0;
      result = MovieTrackFragmentGetCompositionOffsetRange((uint64_t)a1, a2, &v10, 0);
      if ((_DWORD)result)
        return result;
      v9 = v11;
      if (v11 >= v10)
        v9 = v10;
    }
    result = 0;
    *a4 = -v9 & (v9 >> 31);
  }
  return result;
}

uint64_t appendMediaInfoAtom(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int MediaType;
  int v6;
  unsigned int v7;
  uint64_t appended;
  int16x4_t v9;
  int16x4_t v10;
  uint64_t v11;
  uint64_t v12;
  CFStringEncoding v13;
  uint64_t v14;
  unsigned int NumDataSources;
  CFAllocatorRef *v16;
  unsigned int v17;
  uint64_t v18;
  CFIndex v19;
  const __CFAllocator *v20;
  uint64_t DataSourceAtIndex;
  int v22;
  CFURLRef v23;
  uint64_t v24;
  const __CFURL *v25;
  const __CFString *v26;
  CFIndex Length;
  int v28;
  CFIndex v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  const __CFArray *v34;
  const __CFArray *v35;
  uint64_t Count;
  __CFArray *Mutable;
  CFIndex v38;
  unsigned int v39;
  const opaqueCMFormatDescription *ValueAtIndex;
  signed int v41;
  FourCharCode MediaSubType;
  int v43;
  FourCharCode v44;
  const __CFString *v45;
  CFStringEncoding v46;
  uint64_t v47;
  int v48;
  const __CFString *v49;
  const __CFString *v50;
  uint64_t Contiguous;
  uint64_t BlockBufferWithCFDataNoCopy;
  CFPropertyListRef Extension;
  CFTypeID v54;
  int v55;
  int SampleOverrides;
  int v57;
  int v58;
  int IsRangeContiguous;
  CMBlockBufferRef v60;
  CMBlockBufferRef v61;
  unsigned int NumSampleDescriptions;
  unsigned int v64;
  CFIndex v65;
  uint64_t v66;
  OpaqueCMBlockBuffer *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t TimeToSampleTable;
  uint64_t TimeValueToAddToCompositionOffsets;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  OpaqueCMBlockBuffer *CompositionOffsetTable;
  int v77;
  uint64_t DataPointer;
  size_t v79;
  unsigned int v80;
  _DWORD *v81;
  CMBlockBufferRef v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t SyncSampleTable;
  OpaqueCMBlockBuffer *v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  unsigned int v94;
  OpaqueCMBlockBuffer *PartialSyncSampleTable;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  OpaqueCMBlockBuffer *SampleDependencyTable;
  unsigned int v100;
  uint64_t v101;
  size_t v102;
  CMBlockBufferRef v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t SampleToChunkTable;
  int SampleToChunkSamplesPerChunk;
  int SampleToChunkSampleDescriptionID;
  int v110;
  BOOL v111;
  uint64_t v112;
  int MinSampleSizeFieldSize;
  unsigned int v114;
  unsigned int CommonSampleSize;
  OpaqueCMBlockBuffer *v116;
  uint64_t v117;
  unsigned int v118;
  OpaqueCMBlockBuffer *ChunkOffsetTable;
  _BOOL4 v120;
  uint64_t TrackCount;
  uint64_t v122;
  size_t v123;
  unint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  void *v128;
  void *v129;
  size_t v130;
  unsigned int v131;
  uint64_t v132;
  CMBlockBufferRef v133;
  size_t v134;
  unsigned int v135;
  uint64_t v136;
  size_t v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  OpaqueCMBlockBuffer *SampleSizeTable;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  size_t v145;
  unsigned int v146;
  uint64_t v147;
  int v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t v152;
  int16x4_t v153;
  int16x4_t v154;
  uint64_t v155;
  uint64_t MustBeShown;
  CFStringEncoding SystemEncoding;
  size_t v158;
  unsigned int v159;
  size_t v160;
  int v161;
  int v162;
  uint64_t v163;
  size_t v164;
  unsigned int v165;
  CMBlockBufferRef v166;
  uint64_t v167;
  uint64_t v168;
  const __CFString *v169;
  const __CFString *v170;
  const __CFString *v171;
  const __CFString *extensionKey;
  const __CFString *v173;
  const __CFString *v174;
  const __CFString *flavor;
  uint64_t v176;
  const __CFString *v177;
  int v178;
  const __CFArray *v179;
  uint64_t v180;
  int allocator;
  const __CFAllocator *allocatora;
  CFTypeRef cf[2];
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  CMBlockBufferRef blockBufferOut[2];
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  __int128 v191;
  _OWORD v192[2];
  uint64_t v193;
  char *dataPointerOut;
  _BYTE relativeURL[24];
  size_t totalLengthOut;
  unsigned __int8 buffer[16];
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  uint64_t v213;

  v213 = *MEMORY[0x1E0C80C00];
  v4 = FigAtomWriterInitWithParent();
  if ((_DWORD)v4 || (v4 = FigAtomWriterBeginAtom(), (_DWORD)v4))
  {
    v11 = v4;
    goto LABEL_314;
  }
  MediaType = MovieTrackGetMediaType(*a2);
  if (MediaType > 1936684397)
  {
    if (MediaType == 1936684398)
    {
      *(_QWORD *)&v200 = 0;
      v198 = 0u;
      v199 = 0u;
      *(_OWORD *)buffer = 0u;
      *(_QWORD *)&v191 = 0;
      appended = FigAtomWriterInitWithParent();
      if ((_DWORD)appended)
        goto LABEL_16;
      appended = FigAtomWriterBeginAtom();
      if ((_DWORD)appended)
        goto LABEL_16;
      *(_QWORD *)&v191 = 0;
      goto LABEL_15;
    }
    v6 = 1986618469;
  }
  else
  {
    if (MediaType == 1635088502)
      goto LABEL_9;
    v6 = 1885954932;
  }
  if (MediaType != v6)
  {
    if (*(_BYTE *)(a1 + 120))
    {
      *(_QWORD *)&v200 = 0;
      v198 = 0u;
      v199 = 0u;
      *(_OWORD *)buffer = 0u;
      appended = FigAtomWriterInitWithParent();
      if (!(_DWORD)appended)
      {
        appended = FigAtomWriterBeginAtom();
        if (!(_DWORD)appended)
          appended = FigAtomWriterAppendVersionAndFlags();
      }
      goto LABEL_16;
    }
    v186 = 0;
    v184 = 0u;
    v185 = 0u;
    *(_OWORD *)cf = 0u;
    v149 = MovieTrackGetMediaType(*a2);
    v150 = FigAtomWriterInitWithParent();
    if ((_DWORD)v150 || (v150 = FigAtomWriterBeginAtom(), (_DWORD)v150))
    {
      v11 = v150;
      goto LABEL_17;
    }
    *(_QWORD *)&v200 = 0;
    v198 = 0u;
    v199 = 0u;
    *(_OWORD *)buffer = 0u;
    v151 = *(_BYTE *)(a1 + 120) == 0;
    v152 = FigAtomWriterInitWithParent();
    if (!(_DWORD)v152)
    {
      v152 = FigAtomWriterBeginAtom();
      if (!(_DWORD)v152)
      {
        v153 = (int16x4_t)vand_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v151), 0x1FuLL)), (int8x8_t)0x8000004000);
        v154 = vuzp1_s16(v153, v153);
        *(int16x4_t *)((char *)&v191 + 4) = vzip1_s16(v154, vdup_lane_s16(v154, 1));
        LODWORD(v191) = 0;
        HIDWORD(v191) = 0;
        v11 = FigAtomWriterAppendData();
        FigAtomWriterEndAtom();
        if ((_DWORD)v11)
          goto LABEL_17;
        if (v149 != 1952807028)
        {
          if (v149 != 1953325924)
          {
            v11 = 0;
            goto LABEL_17;
          }
          v193 = 0;
          memset(v192, 0, sizeof(v192));
          v191 = 0u;
          v190 = 0;
          v188 = 0u;
          v189 = 0u;
          *(_OWORD *)blockBufferOut = 0u;
          v155 = *a2;
          memset(relativeURL, 0, 20);
          v211 = 0u;
          v212 = 0u;
          v209 = 0u;
          v210 = 0u;
          v207 = 0u;
          v208 = 0u;
          v205 = 0u;
          v206 = 0u;
          v203 = 0u;
          v204 = 0u;
          v201 = 0u;
          v202 = 0u;
          v199 = 0u;
          v200 = 0u;
          *(_OWORD *)buffer = 0u;
          v198 = 0u;
          MovieTrackGetTrackType(v155);
          LOBYTE(totalLengthOut) = 0;
          MustBeShown = MovieTrackGetTimecodeMustBeShown(v155, &totalLengthOut);
          if (!(_DWORD)MustBeShown)
          {
            MustBeShown = FigAtomWriterInitWithParent();
            if (!(_DWORD)MustBeShown)
            {
              MustBeShown = FigAtomWriterBeginAtom();
              if (!(_DWORD)MustBeShown)
              {
                MustBeShown = FigAtomWriterInitWithParent();
                if (!(_DWORD)MustBeShown)
                {
                  MustBeShown = FigAtomWriterBeginAtom();
                  if (!(_DWORD)MustBeShown)
                  {
                    MustBeShown = FigAtomWriterAppendVersionAndFlags();
                    if (!(_DWORD)MustBeShown)
                    {
                      *(_DWORD *)relativeURL = 5632;
                      *(_WORD *)&relativeURL[4] = 3072;
                      *(_QWORD *)&relativeURL[6] = 0;
                      *(_DWORD *)&relativeURL[14] = -1;
                      *(_WORD *)&relativeURL[18] = -1;
                      MustBeShown = FigAtomWriterAppendData();
                      if (!(_DWORD)MustBeShown)
                      {
                        SystemEncoding = CFStringGetSystemEncoding();
                        if (!CFStringGetPascalString(CFSTR("Courier"), buffer, 256, SystemEncoding))
                        {
                          v11 = 4294950961;
                          goto LABEL_332;
                        }
                        MustBeShown = FigAtomWriterAppendData();
                      }
                    }
                  }
                }
              }
            }
          }
          v11 = MustBeShown;
LABEL_332:
          FigAtomWriterEndAtom();
LABEL_349:
          FigAtomWriterEndAtom();
          goto LABEL_17;
        }
        *(_QWORD *)&v200 = 0;
        v198 = 0u;
        v199 = 0u;
        *(_OWORD *)buffer = 0u;
        MovieTrackGetTrackType(*a2);
        v191 = 0x3F800000uLL;
        *(_QWORD *)((char *)v192 + 4) = 0;
        *(_QWORD *)((char *)v192 + 12) = 0x3F80000000000000;
        LODWORD(v192[0]) = 1065353216;
        LODWORD(v189) = 0;
        *(_OWORD *)blockBufferOut = 0u;
        v188 = 0u;
        v152 = FigAtomWriterInitWithParent();
        if (!(_DWORD)v152)
        {
          v152 = FigAtomWriterBeginAtom();
          if (!(_DWORD)v152)
          {
            figMatrixToBigEndianMatrixRecord((uint64_t)&v191, (uint64_t)blockBufferOut);
            v152 = FigAtomWriterAppendData();
          }
        }
      }
    }
    v11 = v152;
    goto LABEL_349;
  }
LABEL_9:
  *(_QWORD *)&v200 = 0;
  v198 = 0u;
  v199 = 0u;
  *(_OWORD *)buffer = 0u;
  DWORD2(v191) = 0;
  *(_QWORD *)&v191 = 0;
  v7 = *(_BYTE *)(a1 + 120) == 0;
  appended = FigAtomWriterInitWithParent();
  if ((_DWORD)appended)
    goto LABEL_16;
  appended = FigAtomWriterBeginAtom();
  if ((_DWORD)appended)
    goto LABEL_16;
  v9 = (int16x4_t)vand_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v7), 0x1FuLL)), (int8x8_t)0x8000004000);
  v10 = vuzp1_s16(v9, v9);
  LODWORD(v191) = 0x1000000;
  *(int16x4_t *)((char *)&v191 + 4) = vzip1_s16(v10, vdup_lane_s16(v10, 1));
LABEL_15:
  appended = FigAtomWriterAppendData();
LABEL_16:
  v11 = appended;
LABEL_17:
  FigAtomWriterEndAtom();
  if ((_DWORD)v11)
    goto LABEL_314;
  if (!*(_BYTE *)(a1 + 120))
  {
    v193 = 0;
    memset(v192, 0, sizeof(v192));
    v191 = 0u;
    v211 = 0u;
    v212 = 0u;
    v209 = 0u;
    v210 = 0u;
    v207 = 0u;
    v208 = 0u;
    v205 = 0u;
    v206 = 0u;
    v203 = 0u;
    v204 = 0u;
    v201 = 0u;
    v202 = 0u;
    v199 = 0u;
    v200 = 0u;
    *(_OWORD *)buffer = 0u;
    v198 = 0u;
    blockBufferOut[0] = 0;
    blockBufferOut[1] = 0;
    WORD4(v188) = 0;
    *(_QWORD *)&v188 = 0;
    v12 = FigAtomWriterInitWithParent();
    if ((_DWORD)v12)
      goto LABEL_381;
    v12 = FigAtomWriterBeginAtom();
    if ((_DWORD)v12)
      goto LABEL_381;
    *(_OWORD *)blockBufferOut = xmmword_1932FD380;
    *(_QWORD *)&v188 = 0;
    v12 = FigAtomWriterAppendData();
    if ((_DWORD)v12)
      goto LABEL_381;
    v13 = CFStringGetSystemEncoding();
    if (!CFStringGetPascalString(CFSTR("Core Media Data Handler"), buffer, 256, v13))
    {
      v11 = 4294950961;
      goto LABEL_313;
    }
    v11 = FigAtomWriterAppendData();
    FigAtomWriterEndAtom();
    if ((_DWORD)v11)
      goto LABEL_314;
  }
  v193 = 0;
  memset(v192, 0, sizeof(v192));
  v191 = 0u;
  v12 = FigAtomWriterInitWithParent();
  if ((_DWORD)v12)
    goto LABEL_381;
  v12 = FigAtomWriterBeginAtom();
  if ((_DWORD)v12)
    goto LABEL_381;
  *(_QWORD *)&v200 = 0;
  v198 = 0u;
  v199 = 0u;
  *(_OWORD *)buffer = 0u;
  LODWORD(blockBufferOut[1]) = 0;
  blockBufferOut[0] = 0;
  v14 = *a2;
  cf[0] = 0;
  NumDataSources = MovieTrackGetNumDataSources(v14);
  v16 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  v180 = a1;
  v176 = (uint64_t)a2;
  if (!NumDataSources)
  {
    v11 = 0;
LABEL_59:
    FigAtomWriterEndAtom();
    v25 = 0;
    goto LABEL_60;
  }
  v17 = NumDataSources;
  v18 = FigAtomWriterInitWithParent();
  if ((_DWORD)v18
    || (v18 = FigAtomWriterBeginAtom(), (_DWORD)v18)
    || (v18 = FigAtomWriterAppendVersionAndFlags(), (_DWORD)v18)
    || (*(_DWORD *)relativeURL = bswap32(v17), v18 = FigAtomWriterAppendData(), (_DWORD)v18))
  {
    v11 = v18;
    goto LABEL_59;
  }
  v19 = 0;
  allocator = 0;
  v20 = *v16;
  while (1)
  {
    *(_QWORD *)relativeURL = 0;
    DataSourceAtIndex = MovieTrackGetDataSourceAtIndex(*(_QWORD **)(a1 + 8), v14, v19, 0, relativeURL);
    if ((_DWORD)DataSourceAtIndex)
      goto LABEL_384;
    if (*(_QWORD *)relativeURL && !FigCFEqual())
      break;
    if (*(_BYTE *)(a1 + 120))
      v22 = 543978101;
    else
      v22 = 1936288865;
    LODWORD(blockBufferOut[0]) = 201326592;
    HIDWORD(blockBufferOut[0]) = v22;
    LODWORD(blockBufferOut[1]) = 0x1000000;
    DataSourceAtIndex = FigAtomWriterAppendData();
    if ((_DWORD)DataSourceAtIndex)
      goto LABEL_384;
LABEL_55:
    if (v17 == ++v19)
    {
      FigAtomWriterEndAtom();
      v25 = 0;
      v11 = 0;
      goto LABEL_57;
    }
  }
  if (FigFileTypeDoesSupportExternalSampleReferences() != 1)
  {
    DataSourceAtIndex = FigSignalErrorAt();
LABEL_384:
    v11 = DataSourceAtIndex;
    v25 = 0;
LABEL_385:
    FigAtomWriterEndAtom();
    goto LABEL_57;
  }
  v23 = CFURLCopyAbsoluteURL(*(CFURLRef *)relativeURL);
  if (!a2[3])
  {
LABEL_48:
    v25 = v23;
    goto LABEL_49;
  }
  v24 = FigCFURLCreateRelativeURLWithURLAndBaseURL();
  if ((_DWORD)v24 == -12996)
  {
    if (allocator <= 4)
    {
      CFLog();
      ++allocator;
    }
    goto LABEL_48;
  }
  v11 = v24;
  if ((_DWORD)v24)
  {
    v25 = v23;
    goto LABEL_385;
  }
  v25 = (const __CFURL *)cf[0];
  if (v23)
    CFRelease(v23);
LABEL_49:
  v26 = CFURLGetString(v25);
  Length = CFStringGetLength(v26);
  v28 = Length;
  v29 = Length + 1;
  v30 = (char *)CFAllocatorAllocate(v20, Length + 1, 0);
  if (!v30)
  {
    v11 = 4294950966;
    a2 = (uint64_t *)v176;
    goto LABEL_385;
  }
  v31 = v30;
  if (!CFStringGetCString(v26, v30, v29, 0x8000100u))
  {
    v11 = 4294950961;
    goto LABEL_388;
  }
  LODWORD(blockBufferOut[0]) = bswap32(v28 + 13);
  *(CMBlockBufferRef *)((char *)blockBufferOut + 4) = (CMBlockBufferRef)543978101;
  v32 = FigAtomWriterAppendData();
  if (!(_DWORD)v32)
  {
    v32 = FigAtomWriterAppendData();
    if (!(_DWORD)v32)
    {
      CFAllocatorDeallocate(v20, v31);
      a2 = (uint64_t *)v176;
      a1 = v180;
      if (v25)
        CFRelease(v25);
      goto LABEL_55;
    }
  }
  v11 = v32;
LABEL_388:
  a2 = (uint64_t *)v176;
  FigAtomWriterEndAtom();
  CFAllocatorDeallocate(v20, v31);
LABEL_57:
  v16 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
LABEL_60:
  if (v25)
    CFRelease(v25);
  FigAtomWriterEndAtom();
  if (!(_DWORD)v11)
  {
    v193 = 0;
    memset(v192, 0, sizeof(v192));
    v191 = 0u;
    v12 = FigAtomWriterInitWithParent();
    if (!(_DWORD)v12)
    {
      v12 = FigAtomWriterBeginAtom();
      if (!(_DWORD)v12)
      {
        *(_QWORD *)&v200 = 0;
        v198 = 0u;
        v199 = 0u;
        *(_OWORD *)buffer = 0u;
        v33 = *a2;
        blockBufferOut[0] = 0;
        v34 = MovieTrackCopyFormatDescriptionArray(v33);
        v35 = v34;
        if (v34)
          Count = CFArrayGetCount(v34);
        else
          Count = 0;
        allocatora = *v16;
        Mutable = CFArrayCreateMutable(*v16, Count, MEMORY[0x1E0C9B378]);
        if (Mutable)
        {
          if (Count >= 1)
          {
            v38 = 0;
            v178 = 0;
            v174 = (const __CFString *)*MEMORY[0x1E0CA27D8];
            v177 = (const __CFString *)*MEMORY[0x1E0CA27E0];
            v173 = (const __CFString *)*MEMORY[0x1E0CA23B8];
            v39 = 1;
            v171 = (const __CFString *)*MEMORY[0x1E0CA23C8];
            v170 = (const __CFString *)*MEMORY[0x1E0CA4B38];
            v169 = (const __CFString *)*MEMORY[0x1E0CA23C0];
            flavor = (const __CFString *)*MEMORY[0x1E0CA27F0];
            extensionKey = (const __CFString *)*MEMORY[0x1E0CA2278];
            v179 = v35;
            while (1)
            {
              ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(v35, v38);
              v41 = CMFormatDescriptionGetMediaType(ValueAtIndex);
              MediaSubType = CMFormatDescriptionGetMediaSubType(ValueAtIndex);
              if (v41 <= 1935893869)
                break;
              v43 = *(unsigned __int8 *)(v180 + 120);
              if (v41 <= 1952807027)
              {
                if (v41 != 1935893870)
                {
                  if (v41 == 1936684398)
                  {
                    v48 = FigCFEqual();
                    v49 = v177;
                    if (!v43)
                      v49 = 0;
                    if (v48)
                      v50 = v174;
                    else
                      v50 = v49;
                    Contiguous = CMAudioFormatDescriptionCopyAsBigEndianSoundDescriptionBlockBuffer(allocatora, ValueAtIndex, v50, blockBufferOut);
                    v35 = v179;
                    if ((_DWORD)Contiguous)
                      goto LABEL_395;
                    v55 = CMDoesBigEndianSoundDescriptionRequireLegacyCBRSampleTableLayout(blockBufferOut[0], v50);
                    SampleOverrides = MovieTrackGetSampleOverrides(v33, 0, 0);
                    if (!v55 || SampleOverrides)
                    {
                      if (FigCFEqual())
                      {
                        v57 = MEMORY[0x19402EF1C](blockBufferOut[0], 1);
                        v58 = v178;
                        if (v57)
                          v58 = 1;
                        v178 = v58;
                      }
                    }
                    else
                    {
                      if (blockBufferOut[0])
                      {
                        CFRelease(blockBufferOut[0]);
                        blockBufferOut[0] = 0;
                      }
                      Contiguous = CMAudioFormatDescriptionCopyAsBigEndianSoundDescriptionBlockBuffer(allocatora, ValueAtIndex, flavor, blockBufferOut);
                      if ((_DWORD)Contiguous)
                        goto LABEL_395;
                    }
                    goto LABEL_118;
                  }
LABEL_103:
                  Extension = CMFormatDescriptionGetExtension(ValueAtIndex, extensionKey);
                  if (!Extension)
                  {
                    v11 = 4294950962;
                    v35 = v179;
                    goto LABEL_149;
                  }
                  v54 = CFGetTypeID(Extension);
                  v35 = v179;
                  if (v54 != CFDataGetTypeID())
                  {
                    v11 = 4294950962;
                    goto LABEL_149;
                  }
                  BlockBufferWithCFDataNoCopy = FigCreateBlockBufferWithCFDataNoCopy();
LABEL_106:
                  v11 = BlockBufferWithCFDataNoCopy;
                  if ((_DWORD)BlockBufferWithCFDataNoCopy)
                    goto LABEL_149;
                  goto LABEL_118;
                }
                v47 = CMSceneFormatDescriptionCopyAsBigEndianSceneDescriptionBlockBuffer();
                goto LABEL_99;
              }
              if (v41 == 1952807028)
                goto LABEL_95;
              if (v41 == 1953325924)
              {
                v47 = CMTimeCodeFormatDescriptionCopyAsBigEndianTimeCodeDescriptionBlockBuffer(allocatora, ValueAtIndex, 0, blockBufferOut);
                goto LABEL_99;
              }
              if (v41 != 1986618469)
                goto LABEL_103;
              v44 = MediaSubType;
              v45 = v173;
              if (!FigCFEqual())
              {
                v45 = v171;
                if (!FigCFEqual())
                {
                  v45 = v171;
                  if (!FigCFEqual())
                  {
                    if (v43)
                    {
                      v45 = v170;
                      if (v44 != 1635148595)
                      {
                        v45 = v170;
                        if (v44 != 1685481573)
                        {
                          v45 = v170;
                          if (v44 != 1751479857)
                            v45 = v169;
                        }
                      }
                    }
                    else
                    {
                      v45 = 0;
                    }
                  }
                }
              }
              v46 = CFStringGetSystemEncoding();
              v11 = CMVideoFormatDescriptionCopyAsBigEndianImageDescriptionBlockBuffer(allocatora, ValueAtIndex, v46, v45, blockBufferOut);
LABEL_100:
              v35 = v179;
              if ((_DWORD)v11)
                goto LABEL_149;
LABEL_118:
              IsRangeContiguous = CMBlockBufferIsRangeContiguous(blockBufferOut[0], 0, 0);
              v60 = blockBufferOut[0];
              if (!IsRangeContiguous)
              {
                cf[0] = 0;
                Contiguous = CMBlockBufferCreateContiguous(allocatora, blockBufferOut[0], allocatora, 0, 0, 0, 0, (CMBlockBufferRef *)cf);
                if ((_DWORD)Contiguous)
                  goto LABEL_395;
                v61 = blockBufferOut[0];
                blockBufferOut[0] = (CMBlockBufferRef)cf[0];
                if (cf[0])
                  CFRetain(cf[0]);
                if (v61)
                  CFRelease(v61);
                if (cf[0])
                  CFRelease(cf[0]);
                v60 = blockBufferOut[0];
              }
              CFArrayAppendValue(Mutable, v60);
              if (blockBufferOut[0])
              {
                CFRelease(blockBufferOut[0]);
                blockBufferOut[0] = 0;
              }
              v38 = v39;
              if (Count <= v39++)
                goto LABEL_138;
            }
            if (v41 > 1835365472)
            {
              if (v41 == 1835365473)
              {
                BlockBufferWithCFDataNoCopy = CMMetadataFormatDescriptionCopyAsBigEndianMetadataDescriptionBlockBuffer(allocatora, ValueAtIndex, 0, blockBufferOut);
                goto LABEL_106;
              }
              if (v41 != 1935832172)
                goto LABEL_103;
LABEL_95:
              v47 = CMTextFormatDescriptionCopyAsBigEndianTextDescriptionBlockBuffer(allocatora, ValueAtIndex, 0, blockBufferOut);
            }
            else
            {
              if (v41 == 1668047728)
              {
                BlockBufferWithCFDataNoCopy = CMClosedCaptionFormatDescriptionCopyAsBigEndianClosedCaptionDescriptionBlockBuffer(allocatora, ValueAtIndex, 0, blockBufferOut);
                goto LABEL_106;
              }
              if (v41 != 1751216244)
                goto LABEL_103;
              v47 = CMHapticFormatDescriptionCopyAsBigEndianHapticDescriptionBlockBuffer();
            }
LABEL_99:
            v11 = v47;
            goto LABEL_100;
          }
LABEL_138:
          NumSampleDescriptions = MovieTrackGetNumSampleDescriptions(v33);
          if (!NumSampleDescriptions)
          {
LABEL_148:
            v11 = 0;
            goto LABEL_149;
          }
          v64 = NumSampleDescriptions;
          Contiguous = FigAtomWriterInitWithParent();
          if (!(_DWORD)Contiguous)
          {
            Contiguous = FigAtomWriterBeginAtom();
            if (!(_DWORD)Contiguous)
            {
              Contiguous = FigAtomWriterAppendVersionAndFlags();
              if (!(_DWORD)Contiguous)
              {
                LODWORD(cf[0]) = bswap32(v64);
                Contiguous = FigAtomWriterAppendData();
                if (!(_DWORD)Contiguous)
                {
                  v65 = 0;
                  v66 = v64;
                  while (1)
                  {
                    cf[0] = (CFTypeRef)-1;
                    dataPointerOut = 0;
                    *(_QWORD *)relativeURL = -1;
                    totalLengthOut = 0;
                    Contiguous = MovieTrackGetSampleDescriptionInformationAtIndex(v33, v65, cf, relativeURL);
                    if ((_DWORD)Contiguous)
                      break;
                    v67 = (OpaqueCMBlockBuffer *)CFArrayGetValueAtIndex(Mutable, (CFIndex)cf[0]);
                    *(_WORD *)&relativeURL[20] = bswap32(*(unsigned __int16 *)relativeURL + 1) >> 16;
                    Contiguous = CMBlockBufferReplaceDataBytes(&relativeURL[20], v67, 0xEuLL, 2uLL);
                    if ((_DWORD)Contiguous)
                      break;
                    Contiguous = CMBlockBufferGetDataPointer(v67, 0, 0, &totalLengthOut, &dataPointerOut);
                    if ((_DWORD)Contiguous)
                      break;
                    FigAtomWriterAppendData();
                    if (v66 == ++v65)
                      goto LABEL_148;
                  }
                }
              }
            }
          }
        }
        else
        {
          Contiguous = FigSignalErrorAt();
        }
LABEL_395:
        v11 = Contiguous;
LABEL_149:
        FigAtomWriterEndAtom();
        if (blockBufferOut[0])
          CFRelease(blockBufferOut[0]);
        v68 = v180;
        if (Mutable)
          CFRelease(Mutable);
        if (v35)
          CFRelease(v35);
        if ((_DWORD)v11)
          goto LABEL_313;
        v12 = appendSampleGroupDescriptionAtoms((_QWORD *)v176, (uint64_t (*)(_QWORD, CFDictionaryRef *))MovieTrackCopySampleGroupDescriptionArrays);
        if (!(_DWORD)v12)
        {
          v12 = appendSampleToGroupAtoms(v180, v176, MovieTrackCopySampleGroupArray);
          if (!(_DWORD)v12)
          {
            *(_QWORD *)&v200 = 0;
            v198 = 0u;
            v199 = 0u;
            *(_OWORD *)buffer = 0u;
            v69 = *(_QWORD *)v176;
            v70 = MovieSampleTableNumTimeToSampleEntries(*(_QWORD *)v176);
            TimeToSampleTable = MovieSampleTableGetTimeToSampleTable(v69);
            TimeValueToAddToCompositionOffsets = FigAtomWriterInitWithParent();
            if ((_DWORD)TimeValueToAddToCompositionOffsets)
              goto LABEL_374;
            TimeValueToAddToCompositionOffsets = FigAtomWriterBeginAtom();
            if ((_DWORD)TimeValueToAddToCompositionOffsets)
              goto LABEL_374;
            TimeValueToAddToCompositionOffsets = FigAtomWriterAppendVersionAndFlags();
            if ((_DWORD)TimeValueToAddToCompositionOffsets)
              goto LABEL_374;
            LODWORD(blockBufferOut[0]) = bswap32(v70);
            v11 = FigAtomWriterAppendData();
            if (!(_DWORD)v11 && TimeToSampleTable)
              v11 = FigAtomWriterAppendBlockBufferData();
            FigAtomWriterEndAtom();
            if ((_DWORD)v11)
              goto LABEL_313;
            *(_QWORD *)&v200 = 0;
            v198 = 0u;
            v199 = 0u;
            *(_OWORD *)buffer = 0u;
            v73 = *(_QWORD *)v176;
            v74 = MovieSampleTableNumCompositionOffsetEntries(*(_QWORD *)v176);
            if (v74
              && ((v75 = v74, v74 != 1) || MovieSampleTableGetCompositionOffsetDisplayOffset(v73, 0)))
            {
              LODWORD(totalLengthOut) = 0;
              CompositionOffsetTable = (OpaqueCMBlockBuffer *)MovieSampleTableGetCompositionOffsetTable(v73);
              LOBYTE(dataPointerOut) = 0;
              TimeValueToAddToCompositionOffsets = getTimeValueToAddToCompositionOffsets(v180, v176, 1, (int *)&totalLengthOut, &dataPointerOut, 0);
              if ((_DWORD)TimeValueToAddToCompositionOffsets)
                goto LABEL_374;
              v77 = totalLengthOut;
              if ((_DWORD)totalLengthOut)
              {
                blockBufferOut[0] = 0;
                cf[0] = 0;
                DataPointer = CMBlockBufferCreateWithMemoryBlock(allocatora, 0, 8 * v75, allocatora, 0, 0, 8 * v75, 1u, blockBufferOut);
                if (!(_DWORD)DataPointer)
                {
                  DataPointer = CMBlockBufferGetDataPointer(blockBufferOut[0], 0, 0, 0, (char **)cf);
                  if (!(_DWORD)DataPointer)
                  {
                    v79 = 0;
                    v80 = v75;
                    while (1)
                    {
                      *(_QWORD *)relativeURL = 0;
                      DataPointer = CMBlockBufferCopyDataBytes(CompositionOffsetTable, v79, 8uLL, relativeURL);
                      if ((_DWORD)DataPointer)
                        break;
                      v81 = cf[0];
                      *(_DWORD *)cf[0] = *(_DWORD *)relativeURL;
                      v81[1] = bswap32(bswap32(*(unsigned int *)&relativeURL[4]) + v77);
                      cf[0] = v81 + 2;
                      v79 += 8;
                      if (!--v80)
                      {
                        v82 = blockBufferOut[0];
                        CompositionOffsetTable = blockBufferOut[0];
                        goto LABEL_178;
                      }
                    }
                  }
                }
                goto LABEL_375;
              }
              v82 = 0;
LABEL_178:
              CMBlockBufferGetDataLength(CompositionOffsetTable);
              v83 = FigAtomWriterInitWithParent();
              if (!(_DWORD)v83)
              {
                v83 = FigAtomWriterBeginAtom();
                if (!(_DWORD)v83)
                {
                  v83 = FigAtomWriterAppendVersionAndFlags();
                  if (!(_DWORD)v83)
                  {
                    LODWORD(blockBufferOut[0]) = bswap32(v75);
                    v83 = FigAtomWriterAppendData();
                    if (!(_DWORD)v83)
                      v83 = FigAtomWriterAppendBlockBufferData();
                  }
                }
              }
              v11 = v83;
              FigAtomWriterEndAtom();
              if (v82)
                CFRelease(v82);
              if ((_DWORD)v11)
                goto LABEL_313;
            }
            else
            {
              FigAtomWriterEndAtom();
            }
            if (!*(_BYTE *)(v180 + 120))
            {
              *(_QWORD *)&v200 = 0;
              v198 = 0u;
              v199 = 0u;
              *(_OWORD *)buffer = 0u;
              v84 = *(_QWORD **)(v180 + 8);
              v85 = *(_QWORD *)v176;
              v86 = MovieSampleTableNumCompositionOffsetEntries(*(_QWORD *)v176);
              if (v86 && (v86 != 1 || MovieSampleTableGetCompositionOffsetDisplayOffset(v85, 0)))
              {
                LODWORD(dataPointerOut) = 0;
                *(_QWORD *)&relativeURL[16] = 0;
                *(_OWORD *)blockBufferOut = *MEMORY[0x1E0CA2E18];
                *(_QWORD *)&v188 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
                *(_OWORD *)cf = *(_OWORD *)blockBufferOut;
                *(_QWORD *)&v184 = v188;
                LODWORD(totalLengthOut) = 0;
                TimeValueToAddToCompositionOffsets = MovieTrackGetCompositionOffsetRange(v84, v85, &totalLengthOut, 0);
                if ((_DWORD)TimeValueToAddToCompositionOffsets)
                  goto LABEL_374;
                v87 = totalLengthOut;
                TimeValueToAddToCompositionOffsets = MovieTrackGetCompositionOffsetRange(v84, v85, &dataPointerOut, &relativeURL[20]);
                if ((_DWORD)TimeValueToAddToCompositionOffsets)
                  goto LABEL_374;
                MovieTrackGetDisplayTimeRange(v84, v85, (CMTime *)blockBufferOut, (CMTime *)cf);
                TimeValueToAddToCompositionOffsets = FigAtomWriterInitWithParent();
                if ((_DWORD)TimeValueToAddToCompositionOffsets)
                  goto LABEL_374;
                TimeValueToAddToCompositionOffsets = FigAtomWriterBeginAtom();
                if ((_DWORD)TimeValueToAddToCompositionOffsets)
                  goto LABEL_374;
                TimeValueToAddToCompositionOffsets = FigAtomWriterAppendVersionAndFlags();
                if ((_DWORD)TimeValueToAddToCompositionOffsets)
                  goto LABEL_374;
                *(_QWORD *)relativeURL = _byteswap_uint64(__PAIR64__(-v87 & (v87 >> 31), dataPointerOut));
                *(_QWORD *)&relativeURL[8] = _byteswap_uint64(__PAIR64__(*(unsigned int *)&relativeURL[20], blockBufferOut[0]));
                *(_DWORD *)&relativeURL[16] = bswap32(cf[0]);
                v11 = FigAtomWriterAppendData();
                FigAtomWriterEndAtom();
                if ((_DWORD)v11)
                  goto LABEL_313;
              }
              else
              {
                FigAtomWriterEndAtom();
              }
            }
            *(_QWORD *)&v200 = 0;
            v198 = 0u;
            v199 = 0u;
            *(_OWORD *)buffer = 0u;
            v88 = *(_QWORD *)v176;
            SyncSampleTable = MovieSampleTableGetSyncSampleTable(*(_QWORD *)v176);
            if (SyncSampleTable)
            {
              v90 = (OpaqueCMBlockBuffer *)SyncSampleTable;
              v91 = MovieSampleTableNumSyncSampleEntries(v88);
              CMBlockBufferGetDataLength(v90);
              TimeValueToAddToCompositionOffsets = FigAtomWriterInitWithParent();
              if ((_DWORD)TimeValueToAddToCompositionOffsets)
                goto LABEL_374;
              TimeValueToAddToCompositionOffsets = FigAtomWriterBeginAtom();
              if ((_DWORD)TimeValueToAddToCompositionOffsets)
                goto LABEL_374;
              TimeValueToAddToCompositionOffsets = FigAtomWriterAppendVersionAndFlags();
              if ((_DWORD)TimeValueToAddToCompositionOffsets)
                goto LABEL_374;
              LODWORD(blockBufferOut[0]) = bswap32(v91);
              TimeValueToAddToCompositionOffsets = FigAtomWriterAppendData();
              if ((_DWORD)TimeValueToAddToCompositionOffsets)
                goto LABEL_374;
              v11 = FigAtomWriterAppendBlockBufferData();
              FigAtomWriterEndAtom();
              if ((_DWORD)v11)
                goto LABEL_313;
            }
            else
            {
              FigAtomWriterEndAtom();
            }
            *(_QWORD *)&v200 = 0;
            v198 = 0u;
            v199 = 0u;
            *(_OWORD *)buffer = 0u;
            v92 = *(_QWORD *)v176;
            v93 = MovieSampleTableNumPartialSyncSampleEntries(*(_QWORD *)v176);
            if (v93)
            {
              v94 = v93;
              PartialSyncSampleTable = (OpaqueCMBlockBuffer *)MovieSampleTableGetPartialSyncSampleTable(v92);
              CMBlockBufferGetDataLength(PartialSyncSampleTable);
              TimeValueToAddToCompositionOffsets = FigAtomWriterInitWithParent();
              if ((_DWORD)TimeValueToAddToCompositionOffsets)
                goto LABEL_374;
              TimeValueToAddToCompositionOffsets = FigAtomWriterBeginAtom();
              if ((_DWORD)TimeValueToAddToCompositionOffsets)
                goto LABEL_374;
              TimeValueToAddToCompositionOffsets = FigAtomWriterAppendVersionAndFlags();
              if ((_DWORD)TimeValueToAddToCompositionOffsets)
                goto LABEL_374;
              LODWORD(blockBufferOut[0]) = bswap32(v94);
              TimeValueToAddToCompositionOffsets = FigAtomWriterAppendData();
              if ((_DWORD)TimeValueToAddToCompositionOffsets)
                goto LABEL_374;
              v11 = FigAtomWriterAppendBlockBufferData();
              FigAtomWriterEndAtom();
              if ((_DWORD)v11)
                goto LABEL_313;
            }
            else
            {
              FigAtomWriterEndAtom();
            }
            *(_QWORD *)&v200 = 0;
            v198 = 0u;
            v199 = 0u;
            *(_OWORD *)buffer = 0u;
            v96 = *(_QWORD *)v176;
            v97 = MovieSampleTableNumSampleDependencyEntries(*(_QWORD *)v176);
            if (v97)
            {
              v98 = v97;
              SampleDependencyTable = (OpaqueCMBlockBuffer *)MovieSampleTableGetSampleDependencyTable(v96);
              blockBufferOut[0] = 0;
              cf[0] = 0;
              v100 = v98;
              *(_QWORD *)relativeURL = 0;
              LOBYTE(totalLengthOut) = 0;
              v101 = CMBlockBufferCreateWithMemoryBlock(allocatora, 0, v98, allocatora, 0, 0, v98, 1u, blockBufferOut);
              if (!(_DWORD)v101)
              {
                v101 = CMBlockBufferGetDataPointer(blockBufferOut[0], 0, 0, 0, (char **)relativeURL);
                if (!(_DWORD)v101)
                {
                  v102 = 0;
                  while (1)
                  {
                    v101 = CMBlockBufferAccessDataBytes(SampleDependencyTable, v102, 1uLL, &totalLengthOut, (char **)cf);
                    if ((_DWORD)v101)
                      break;
                    **(_BYTE **)relativeURL = *(_BYTE *)cf[0]++ & 0xBF;
                    ++*(_QWORD *)relativeURL;
                    if (v100 == (_DWORD)++v102)
                    {
                      v103 = blockBufferOut[0];
                      CMBlockBufferGetDataLength(blockBufferOut[0]);
                      v104 = FigAtomWriterInitWithParent();
                      if (!(_DWORD)v104)
                      {
                        v104 = FigAtomWriterBeginAtom();
                        if (!(_DWORD)v104)
                        {
                          v104 = FigAtomWriterAppendVersionAndFlags();
                          if (!(_DWORD)v104)
                            v104 = FigAtomWriterAppendBlockBufferData();
                        }
                      }
                      v11 = v104;
                      FigAtomWriterEndAtom();
                      if (v103)
                        CFRelease(v103);
                      goto LABEL_232;
                    }
                  }
                }
              }
              v11 = v101;
              if (blockBufferOut[0])
                CFRelease(blockBufferOut[0]);
            }
            else
            {
              v11 = 0;
            }
            FigAtomWriterEndAtom();
LABEL_232:
            if ((_DWORD)v11)
              goto LABEL_313;
            *(_QWORD *)&v200 = 0;
            v198 = 0u;
            v199 = 0u;
            *(_OWORD *)buffer = 0u;
            v105 = *(_QWORD *)v176;
            v106 = MovieSampleTableNumSampleToChunkEntries(*(_QWORD *)v176);
            SampleToChunkTable = MovieSampleTableGetSampleToChunkTable(v105);
            if (v106 >= 2)
            {
              SampleToChunkSamplesPerChunk = MovieSampleTableGetSampleToChunkSamplesPerChunk(v105, v106 - 2);
              SampleToChunkSampleDescriptionID = MovieSampleTableGetSampleToChunkSampleDescriptionID(v105, v106 - 2);
              v110 = MovieSampleTableGetSampleToChunkSamplesPerChunk(v105, v106 - 1);
              v111 = SampleToChunkSampleDescriptionID == MovieSampleTableGetSampleToChunkSampleDescriptionID(v105, v106 - 1)&& SampleToChunkSamplesPerChunk == v110;
              v68 = v180;
              if (v111)
                --v106;
            }
            TimeValueToAddToCompositionOffsets = FigAtomWriterInitWithParent();
            if (!(_DWORD)TimeValueToAddToCompositionOffsets)
            {
              TimeValueToAddToCompositionOffsets = FigAtomWriterBeginAtom();
              if (!(_DWORD)TimeValueToAddToCompositionOffsets)
              {
                TimeValueToAddToCompositionOffsets = FigAtomWriterAppendVersionAndFlags();
                if (!(_DWORD)TimeValueToAddToCompositionOffsets)
                {
                  LODWORD(blockBufferOut[0]) = bswap32(v106);
                  v11 = FigAtomWriterAppendData();
                  if (!(_DWORD)v11 && SampleToChunkTable)
                    v11 = FigAtomWriterAppendBlockBufferData();
                  FigAtomWriterEndAtom();
                  if ((_DWORD)v11)
                    goto LABEL_313;
                  v112 = *(_QWORD *)v176;
                  if (*(_BYTE *)(v176 + 35))
                  {
                    if (MovieSampleTableGetCommonSampleSize(*(_QWORD *)v176))
                    {
                      v112 = *(_QWORD *)v176;
                    }
                    else
                    {
                      MinSampleSizeFieldSize = MovieSampleTableGetMinSampleSizeFieldSize(v112);
                      v112 = *(_QWORD *)v176;
                      if (MinSampleSizeFieldSize <= 31)
                      {
                        *(_QWORD *)&v200 = 0;
                        v198 = 0u;
                        v199 = 0u;
                        *(_OWORD *)buffer = 0u;
                        v139 = MovieSampleTableNumSampleSizeEntries(v112);
                        if (!v139)
                        {
                          FigAtomWriterEndAtom();
                          goto LABEL_259;
                        }
                        v140 = v139;
                        SampleSizeTable = (OpaqueCMBlockBuffer *)MovieSampleTableGetSampleSizeTable(v112);
                        v142 = MovieSampleTableGetMinSampleSizeFieldSize(v112);
                        v143 = v142;
                        blockBufferOut[0] = 0;
                        cf[0] = 0;
                        *(_QWORD *)relativeURL = 0;
                        LODWORD(totalLengthOut) = 0;
                        if (v142 == 16 || v142 == 8)
                        {
                          v144 = (v142 >> 3) * v140;
                        }
                        else
                        {
                          if (v142 != 4)
                          {
                            v11 = 4294950958;
                            goto LABEL_376;
                          }
                          v144 = (v140 + 1) >> 1;
                        }
                        DataPointer = CMBlockBufferCreateWithMemoryBlock(allocatora, 0, v144, allocatora, 0, 0, v144, 1u, blockBufferOut);
                        if (!(_DWORD)DataPointer)
                        {
                          DataPointer = CMBlockBufferGetDataPointer(blockBufferOut[0], 0, 0, 0, (char **)cf);
                          if (!(_DWORD)DataPointer)
                          {
                            switch(v143)
                            {
                              case 4u:
                                v160 = 0;
                                v161 = 0;
                                v162 = 0;
                                while (1)
                                {
                                  DataPointer = CMBlockBufferAccessDataBytes(SampleSizeTable, v160, 4uLL, &totalLengthOut, (char **)relativeURL);
                                  if ((_DWORD)DataPointer)
                                    break;
                                  v163 = *(_QWORD *)relativeURL;
                                  v162 |= (*(_BYTE *)(*(_QWORD *)relativeURL + 3) & 0xF) << ((4 * (v161 & 1)) ^ 4);
                                  if (v161 - v140 == -1 || (v161 & 1) != 0)
                                  {
                                    *(_BYTE *)cf[0] = v162;
                                    v162 = 0;
                                    ++cf[0];
                                    v163 = *(_QWORD *)relativeURL;
                                  }
                                  *(_QWORD *)relativeURL = v163 + 4;
                                  v160 += 4;
                                  if (++v161 == v140)
                                    goto LABEL_363;
                                }
                                break;
                              case 8u:
                                v164 = 0;
                                v165 = v140;
                                while (1)
                                {
                                  DataPointer = CMBlockBufferAccessDataBytes(SampleSizeTable, v164, 4uLL, &totalLengthOut, (char **)relativeURL);
                                  if ((_DWORD)DataPointer)
                                    break;
                                  *(_BYTE *)cf[0]++ = *(_BYTE *)(*(_QWORD *)relativeURL + 3);
                                  *(_QWORD *)relativeURL += 4;
                                  v164 += 4;
                                  if (!--v165)
                                    goto LABEL_363;
                                }
                                break;
                              case 0x10u:
                                v158 = 0;
                                v159 = v140;
                                while (1)
                                {
                                  DataPointer = CMBlockBufferAccessDataBytes(SampleSizeTable, v158, 4uLL, &totalLengthOut, (char **)relativeURL);
                                  if ((_DWORD)DataPointer)
                                    break;
                                  *(_WORD *)cf[0] = *(_WORD *)(*(_QWORD *)relativeURL + 2);
                                  cf[0] = (char *)cf[0] + 2;
                                  *(_QWORD *)relativeURL += 4;
                                  v158 += 4;
                                  if (!--v159)
                                    goto LABEL_363;
                                }
                                break;
                              default:
LABEL_363:
                                v166 = blockBufferOut[0];
                                CMBlockBufferGetDataLength(blockBufferOut[0]);
                                LODWORD(dataPointerOut) = v143 << 24;
                                v167 = FigAtomWriterInitWithParent();
                                if ((_DWORD)v167)
                                {
                                  v11 = v167;
                                  v68 = v180;
                                }
                                else
                                {
                                  v168 = FigAtomWriterBeginAtom();
                                  v68 = v180;
                                  if (!(_DWORD)v168)
                                  {
                                    v168 = FigAtomWriterAppendVersionAndFlags();
                                    if (!(_DWORD)v168)
                                    {
                                      v168 = FigAtomWriterAppendData();
                                      if (!(_DWORD)v168)
                                      {
                                        LODWORD(blockBufferOut[0]) = bswap32(v140);
                                        v168 = FigAtomWriterAppendData();
                                        if (!(_DWORD)v168)
                                          v168 = FigAtomWriterAppendBlockBufferData();
                                      }
                                    }
                                  }
                                  v11 = v168;
                                }
                                FigAtomWriterEndAtom();
                                if (v166)
                                  CFRelease(v166);
LABEL_258:
                                if ((_DWORD)v11)
                                {
LABEL_313:
                                  FigAtomWriterEndAtom();
                                  goto LABEL_314;
                                }
LABEL_259:
                                *(_QWORD *)&v200 = 0;
                                v198 = 0u;
                                v199 = 0u;
                                *(_OWORD *)buffer = 0u;
                                v117 = *(_QWORD *)v176;
                                v118 = MovieSampleTableNumChunkTableEntries(*(_QWORD *)v176);
                                ChunkOffsetTable = (OpaqueCMBlockBuffer *)MovieSampleTableGetChunkOffsetTable(v117);
                                v120 = MovieSampleTableHave64BitChunkOffsetTable(v117);
                                if (!*(_QWORD *)(v68 + 80))
                                {
                                  v133 = 0;
                                  goto LABEL_304;
                                }
                                TrackCount = MovieInformationGetTrackCount(v117);
                                v122 = *(_QWORD *)(v68 + 80);
                                blockBufferOut[0] = 0;
                                if (v120)
                                  v123 = 8;
                                else
                                  v123 = 4;
                                cf[0] = 0;
                                *(_QWORD *)relativeURL = 0;
                                totalLengthOut = 0;
                                LODWORD(dataPointerOut) = 0;
                                v124 = v122 + TrackCount;
                                if ((unint64_t)(v122 + TrackCount) <= 0xEE6B2800)
                                  v125 = 4;
                                else
                                  v125 = 8;
                                v126 = 2;
                                if ((unint64_t)(v122 + TrackCount) > 0xEE6B2800)
                                  v126 = 3;
                                v127 = CMBlockBufferCreateWithMemoryBlock(allocatora, 0, (unint64_t)v118 << v126, allocatora, 0, 0, (unint64_t)v118 << v126, 1u, blockBufferOut);
                                if ((_DWORD)v127
                                  || (v127 = CMBlockBufferGetDataPointer(blockBufferOut[0], 0, 0, 0, (char **)cf),
                                      (_DWORD)v127))
                                {
                                  v11 = v127;
                                  v133 = 0;
                                }
                                else
                                {
                                  v128 = CFAllocatorAllocate(allocatora, v123, 0);
                                  if (v128)
                                  {
                                    v129 = v128;
                                    if (v120)
                                    {
                                      if (v124 <= 0xEE6B2800)
                                      {
                                        if (v118)
                                        {
                                          v137 = 0;
                                          v138 = v118;
                                          do
                                          {
                                            v132 = CMBlockBufferAccessDataBytes(ChunkOffsetTable, v137, v123, v129, (char **)relativeURL);
                                            if ((_DWORD)v132)
                                              goto LABEL_380;
                                            __memcpy_chk();
                                            LODWORD(dataPointerOut) = bswap32(bswap64(totalLengthOut) + v122);
                                            *(_DWORD *)cf[0] = (_DWORD)dataPointerOut;
                                            *(_QWORD *)relativeURL += v123;
                                            cf[0] = (char *)cf[0] + v125;
                                            v137 += v123;
                                          }
                                          while (--v138);
                                        }
                                      }
                                      else if (v118)
                                      {
                                        v130 = 0;
                                        v131 = v118;
                                        while (1)
                                        {
                                          v132 = CMBlockBufferAccessDataBytes(ChunkOffsetTable, v130, v123, v129, (char **)relativeURL);
                                          if ((_DWORD)v132)
                                            break;
                                          __memcpy_chk();
                                          totalLengthOut = bswap64(bswap64(totalLengthOut) + v122);
                                          *(_QWORD *)cf[0] = totalLengthOut;
                                          *(_QWORD *)relativeURL += v123;
                                          cf[0] = (char *)cf[0] + v125;
                                          v130 += v123;
                                          if (!--v131)
                                            goto LABEL_299;
                                        }
LABEL_380:
                                        v11 = v132;
                                        v133 = 0;
                                        goto LABEL_300;
                                      }
LABEL_299:
                                      v11 = 0;
                                      v133 = blockBufferOut[0];
                                      blockBufferOut[0] = 0;
LABEL_300:
                                      CFAllocatorDeallocate(allocatora, v129);
                                      goto LABEL_301;
                                    }
                                    if (v124 <= 0xEE6B2800)
                                    {
                                      if (!v118)
                                        goto LABEL_299;
                                      v145 = 0;
                                      v146 = v118;
                                      while (1)
                                      {
                                        v136 = CMBlockBufferAccessDataBytes(ChunkOffsetTable, v145, v123, v129, (char **)relativeURL);
                                        if ((_DWORD)v136)
                                          break;
                                        __memcpy_chk();
                                        LODWORD(dataPointerOut) = bswap32(bswap32(dataPointerOut) + v122);
                                        *(_DWORD *)cf[0] = (_DWORD)dataPointerOut;
                                        *(_QWORD *)relativeURL += v123;
                                        cf[0] = (char *)cf[0] + v125;
                                        v145 += v123;
                                        if (!--v146)
                                          goto LABEL_299;
                                      }
                                    }
                                    else
                                    {
                                      if (!v118)
                                        goto LABEL_299;
                                      v134 = 0;
                                      v135 = v118;
                                      while (1)
                                      {
                                        v136 = CMBlockBufferAccessDataBytes(ChunkOffsetTable, v134, v123, v129, (char **)relativeURL);
                                        if ((_DWORD)v136)
                                          break;
                                        __memcpy_chk();
                                        totalLengthOut = bswap64(v122 + bswap32(dataPointerOut));
                                        *(_QWORD *)cf[0] = totalLengthOut;
                                        *(_QWORD *)relativeURL += v123;
                                        cf[0] = (char *)cf[0] + v125;
                                        v134 += v123;
                                        if (!--v135)
                                          goto LABEL_299;
                                      }
                                    }
                                    v11 = v136;
                                    v133 = 0;
                                    goto LABEL_300;
                                  }
                                  v133 = 0;
                                  v11 = 4294950966;
                                }
LABEL_301:
                                if (blockBufferOut[0])
                                  CFRelease(blockBufferOut[0]);
                                ChunkOffsetTable = v133;
                                if ((_DWORD)v11)
                                  goto LABEL_311;
LABEL_304:
                                v147 = FigAtomWriterInitWithParent();
                                if (!(_DWORD)v147)
                                {
                                  v147 = FigAtomWriterBeginAtom();
                                  if (!(_DWORD)v147)
                                  {
                                    v147 = FigAtomWriterAppendVersionAndFlags();
                                    if (!(_DWORD)v147)
                                    {
                                      LODWORD(blockBufferOut[0]) = bswap32(v118);
                                      v11 = FigAtomWriterAppendData();
                                      if ((_DWORD)v11 || !ChunkOffsetTable)
                                      {
LABEL_311:
                                        FigAtomWriterEndAtom();
                                        if (v133)
                                          CFRelease(v133);
                                        goto LABEL_313;
                                      }
                                      CMBlockBufferGetDataLength(ChunkOffsetTable);
                                      v147 = FigAtomWriterAppendBlockBufferData();
                                    }
                                  }
                                }
                                v11 = v147;
                                goto LABEL_311;
                            }
                          }
                        }
LABEL_375:
                        v11 = DataPointer;
LABEL_376:
                        if (blockBufferOut[0])
                          CFRelease(blockBufferOut[0]);
                        goto LABEL_378;
                      }
                    }
                  }
                  *(_QWORD *)&v200 = 0;
                  v198 = 0u;
                  v199 = 0u;
                  *(_OWORD *)buffer = 0u;
                  v114 = MovieSampleTableNumSampleSizeEntries(v112);
                  CommonSampleSize = MovieSampleTableGetCommonSampleSize(v112);
                  v116 = (OpaqueCMBlockBuffer *)MovieSampleTableGetSampleSizeTable(v112);
                  LODWORD(cf[0]) = bswap32(CommonSampleSize);
                  TimeValueToAddToCompositionOffsets = FigAtomWriterInitWithParent();
                  if (!(_DWORD)TimeValueToAddToCompositionOffsets)
                  {
                    TimeValueToAddToCompositionOffsets = FigAtomWriterBeginAtom();
                    if (!(_DWORD)TimeValueToAddToCompositionOffsets)
                    {
                      TimeValueToAddToCompositionOffsets = FigAtomWriterAppendVersionAndFlags();
                      if (!(_DWORD)TimeValueToAddToCompositionOffsets)
                      {
                        TimeValueToAddToCompositionOffsets = FigAtomWriterAppendData();
                        if (!(_DWORD)TimeValueToAddToCompositionOffsets)
                        {
                          LODWORD(blockBufferOut[0]) = bswap32(v114);
                          v11 = FigAtomWriterAppendData();
                          if (!(_DWORD)v11 && v116)
                          {
                            CMBlockBufferGetDataLength(v116);
                            v11 = FigAtomWriterAppendBlockBufferData();
                          }
                          FigAtomWriterEndAtom();
                          goto LABEL_258;
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_374:
            v11 = TimeValueToAddToCompositionOffsets;
LABEL_378:
            FigAtomWriterEndAtom();
            goto LABEL_313;
          }
        }
      }
    }
LABEL_381:
    v11 = v12;
    goto LABEL_313;
  }
LABEL_314:
  FigAtomWriterEndAtom();
  return v11;
}

uint64_t appendSampleGroupDescriptionAtoms(_QWORD *a1, uint64_t (*a2)(_QWORD, CFDictionaryRef *))
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t Count;
  unint64_t v5;
  size_t v6;
  BOOL v7;
  const void **v8;
  uint64_t v9;
  const void **v10;
  const void **v11;
  const void **v12;
  uint64_t v13;
  const void *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  const __CFArray *v18;
  uint64_t v19;
  CFIndex v20;
  CFMutableDataRef Mutable;
  __CFData *v22;
  const void **v23;
  CFIndex i;
  const __CFData *ValueAtIndex;
  const UInt8 *BytePtr;
  CFIndex Length;
  CFIndex v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t appended;
  uint64_t v34;
  uint64_t v35;
  CFMutableDataRef v36;
  const void **v38;
  unint64_t v39;
  _QWORD *v40;
  const __CFAllocator *allocator;
  CFDictionaryRef theDict;
  unsigned int v43;
  uint64_t v44;
  CFArrayRef theArray;
  unsigned int v46;
  UInt8 bytes[16];
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;

  v2 = a1;
  theDict = 0;
  v3 = a2(*a1, &theDict);
  if ((_DWORD)v3)
  {
    v9 = v3;
LABEL_61:
    v8 = 0;
    goto LABEL_10;
  }
  Count = FigCFDictionaryGetCount();
  if (!Count)
  {
    v9 = 0;
    goto LABEL_61;
  }
  v5 = Count;
  v6 = 8 * Count;
  if (Count >> 61)
    v7 = 1;
  else
    v7 = v6 == 0;
  if (v7)
  {
    v8 = 0;
LABEL_9:
    v9 = FigSignalErrorAt();
LABEL_10:
    v10 = 0;
    goto LABEL_56;
  }
  v11 = (const void **)malloc_type_malloc(8 * Count, 0x5CC9CBA6uLL);
  v8 = v11;
  if (!v11)
    goto LABEL_9;
  v12 = (const void **)malloc_type_malloc(v6, 0x5CC9CBA6uLL);
  if (!v12)
    goto LABEL_9;
  v10 = v12;
  CFDictionaryGetKeysAndValues(theDict, v8, v12);
  v13 = 0;
  v40 = v2;
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v38 = v10;
  v39 = v5;
  do
  {
    v14 = v8[v13];
    if (*((_BYTE *)v2 + 36))
      v15 = 0;
    else
      v15 = (_DWORD)v14 == 1919904876;
    if (v15)
      goto LABEL_46;
    v16 = (uint64_t)v10[v13];
    v44 = 0;
    theArray = 0;
    v43 = 0;
    v17 = MovieSampleGroupDescriptionArrayCopyInfo(v16, 0, &theArray, 0, &v44, &v43);
    if ((_DWORD)v17)
    {
      v9 = v17;
    }
    else
    {
      v18 = theArray;
      if (theArray)
      {
        v19 = v44;
        v20 = CFArrayGetCount(theArray);
        Mutable = CFDataCreateMutable(allocator, 0);
        if (Mutable)
        {
          v22 = Mutable;
          v23 = v8;
          if (v20 >= 1)
          {
            for (i = 0; i != v20; ++i)
            {
              ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(v18, i);
              BytePtr = CFDataGetBytePtr(ValueAtIndex);
              Length = CFDataGetLength(ValueAtIndex);
              v28 = Length;
              if (!v19)
              {
                *(_DWORD *)bytes = bswap32(Length);
                CFDataAppendBytes(v22, bytes, 4);
              }
              CFDataAppendBytes(v22, BytePtr, v28);
            }
          }
          v29 = v44;
          v30 = v43;
          v51 = v14;
          v50 = 0;
          v48 = 0u;
          v49 = 0u;
          *(_OWORD *)bytes = 0u;
          if ((_DWORD)v20)
          {
            v31 = FigAtomWriterInitWithParent();
            if (!(_DWORD)v31)
            {
              v32 = FigAtomWriterBeginAtom();
              v5 = v39;
              if ((_DWORD)v32 || (v32 = FigAtomWriterAppendVersionAndFlags(), (_DWORD)v32))
              {
                v9 = v32;
                v8 = v23;
              }
              else
              {
                v51 = bswap32(v14);
                appended = FigAtomWriterAppendData();
                v8 = v23;
                if (!(_DWORD)appended)
                {
                  v46 = bswap32(v29);
                  v34 = FigAtomWriterAppendData();
                  v2 = v40;
                  if ((_DWORD)v34)
                  {
                    v9 = v34;
                  }
                  else if (!v30 || (v52 = bswap32(v30), v9 = FigAtomWriterAppendData(), !(_DWORD)v9))
                  {
                    v52 = bswap32(v20);
                    v35 = FigAtomWriterAppendData();
                    if (!(_DWORD)v35)
                    {
                      CFDataGetBytePtr(v22);
                      CFDataGetLength(v22);
                      v35 = FigAtomWriterAppendData();
                    }
                    v9 = v35;
                  }
                  goto LABEL_41;
                }
                v9 = appended;
              }
              v2 = v40;
LABEL_41:
              FigAtomWriterEndAtom();
              v10 = v38;
              goto LABEL_42;
            }
            v9 = v31;
          }
          else
          {
            v9 = 0;
          }
          v8 = v23;
          v5 = v39;
          v2 = v40;
          goto LABEL_41;
        }
      }
      else
      {
        v36 = CFDataCreateMutable(allocator, 0);
        if (v36)
        {
          v22 = v36;
          v50 = 0;
          v48 = 0u;
          v49 = 0u;
          *(_OWORD *)bytes = 0u;
          FigAtomWriterEndAtom();
          v9 = 0;
LABEL_42:
          CFRelease(v22);
          goto LABEL_43;
        }
      }
      v9 = FigSignalErrorAt();
      if (!(_DWORD)v9)
      {
        v50 = 0;
        v48 = 0u;
        v49 = 0u;
        *(_OWORD *)bytes = 0u;
        FigAtomWriterEndAtom();
      }
    }
LABEL_43:
    if (theArray)
      CFRelease(theArray);
    if ((_DWORD)v9)
      goto LABEL_56;
LABEL_46:
    ++v13;
  }
  while (v13 != v5);
  v9 = 0;
LABEL_56:
  free(v10);
  free(v8);
  if (theDict)
    CFRelease(theDict);
  return v9;
}

uint64_t appendSampleToGroupAtoms(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, CFArrayRef *))
{
  uint64_t Info;
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  int *ValueAtIndex;
  int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int NumSampleToGroupTableEntries;
  unsigned int v20;
  uint64_t appended;
  OpaqueCMBlockBuffer *SampleToGroupTable;
  uint64_t v23;
  unsigned int v24;
  BOOL v26;
  uint64_t v27;
  int v28;
  CFArrayRef theArray;
  CFTypeRef cf;
  CFTypeRef v31;
  unsigned int v32;
  unsigned int v33;
  CMBlockBufferRef v34;
  CMBlockBufferRef theBuffer;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  theArray = 0;
  Info = a3(*(_QWORD *)a2, &theArray);
  if ((_DWORD)Info)
  {
LABEL_75:
    v15 = Info;
  }
  else
  {
    if (!theArray)
      return 0;
    Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      v7 = Count;
      v8 = 0;
      while (1)
      {
        ValueAtIndex = (int *)CFArrayGetValueAtIndex(theArray, v8);
        v28 = 0;
        v27 = 0;
        v26 = 0;
        Info = MovieSampleGroupGetInfo((uint64_t)ValueAtIndex, (uint64_t)&v27, 0, 0, &v26);
        if ((_DWORD)Info)
          goto LABEL_75;
        if (*(_BYTE *)(a2 + 36) || (_DWORD)v27 != 1919904876)
          break;
LABEL_66:
        if (v7 == ++v8)
          goto LABEL_70;
      }
      v11 = *(unsigned __int8 *)(a1 + 120);
      v12 = v27;
      v13 = v28;
      cf = 0;
      v31 = 0;
      if (v26 && v11)
      {
        v14 = MovieSampleGroupCreateNonCompactCopy((uint64_t)ValueAtIndex, &v31);
        if (!(_DWORD)v14)
        {
          ValueAtIndex = (int *)v31;
          goto LABEL_24;
        }
        goto LABEL_68;
      }
      if (!v26)
      {
LABEL_24:
        v43 = 0;
        v41 = 0u;
        v42 = 0u;
        v40 = 0u;
        NumSampleToGroupTableEntries = MovieSampleGroupGetNumSampleToGroupTableEntries((uint64_t)ValueAtIndex);
        LODWORD(theBuffer) = 0;
        if (!NumSampleToGroupTableEntries)
        {
          v15 = 0;
          goto LABEL_60;
        }
        v20 = NumSampleToGroupTableEntries;
        appended = FigAtomWriterInitWithParent();
        if (!(_DWORD)appended)
        {
          appended = FigAtomWriterBeginAtom();
          if (!(_DWORD)appended)
          {
            appended = FigAtomWriterAppendVersionAndFlags();
            if (!(_DWORD)appended)
            {
              LODWORD(theBuffer) = bswap32(v12);
              appended = FigAtomWriterAppendData();
              if (!(_DWORD)appended)
              {
                if (v13)
                {
                  LODWORD(v36) = bswap32(HIDWORD(v12));
                  v15 = FigAtomWriterAppendData();
                  if ((_DWORD)v15)
                    goto LABEL_60;
                }
                LODWORD(v36) = bswap32(v20);
                appended = FigAtomWriterAppendData();
                if (!(_DWORD)appended)
                {
                  SampleToGroupTable = (OpaqueCMBlockBuffer *)MovieSampleGroupGetSampleToGroupTable((uint64_t)ValueAtIndex);
                  v15 = (uint64_t)SampleToGroupTable;
                  if (!SampleToGroupTable)
                    goto LABEL_60;
                  CMBlockBufferGetDataLength(SampleToGroupTable);
                  appended = FigAtomWriterAppendBlockBufferData();
                }
              }
            }
          }
        }
        v15 = appended;
LABEL_60:
        FigAtomWriterEndAtom();
        goto LABEL_61;
      }
      v14 = MovieSampleGroupCreateOptimizedCopy(ValueAtIndex, &cf);
      if ((_DWORD)v14)
      {
LABEL_68:
        v15 = v14;
LABEL_61:
        if (cf)
          CFRelease(cf);
        if (v31)
          CFRelease(v31);
        if ((_DWORD)v15)
          goto LABEL_71;
        goto LABEL_66;
      }
      v43 = 0;
      v41 = 0u;
      v42 = 0u;
      v40 = 0u;
      v36 = 0;
      v37 = 0;
      v38 = 0;
      v34 = 0;
      theBuffer = 0;
      v33 = 0;
      v15 = MovieSampleGroupCopyCompactAtomComponents((uint64_t)cf, (uint64_t)&v36, &theBuffer, &v34);
      if ((_DWORD)v15 || !HIDWORD(v36))
      {
LABEL_56:
        if (theBuffer)
          CFRelease(theBuffer);
        if (v34)
          CFRelease(v34);
        goto LABEL_60;
      }
      v16 = FigAtomWriterInitWithParent();
      if (!(_DWORD)v16)
      {
        v16 = FigAtomWriterBeginAtom();
        if (!(_DWORD)v16)
        {
          HIDWORD(v18) = HIDWORD(v37);
          LODWORD(v18) = HIDWORD(v37) - 4;
          v17 = v18 >> 2;
          if (v17 <= 7 && ((1 << v17) & 0x8B) != 0)
          {
            if (v11)
            {
              v23 = FigAtomWriterAppendVersionAndFlags();
              if ((_DWORD)v23)
                goto LABEL_69;
              v33 = bswap32(v12);
              v23 = FigAtomWriterAppendData();
              if ((_DWORD)v23)
                goto LABEL_69;
              if (!v13)
                goto LABEL_48;
              v39 = bswap32(HIDWORD(v12));
            }
            else
            {
              v23 = FigAtomWriterAppendVersionAndFlags();
              if ((_DWORD)v23)
                goto LABEL_69;
              v33 = bswap32(v12);
              v23 = FigAtomWriterAppendData();
              if ((_DWORD)v23)
                goto LABEL_69;
              v24 = bswap32(HIDWORD(v12));
              if (!v13)
                v24 = 0;
              v39 = v24;
              v23 = FigAtomWriterAppendData();
              if ((_DWORD)v23)
                goto LABEL_69;
              v32 = bswap32(BYTE4(v37) | (((_BYTE)v38 != 0) << 8));
            }
            v23 = FigAtomWriterAppendData();
            if (!(_DWORD)v23)
            {
LABEL_48:
              v39 = bswap32(v36);
              v16 = FigAtomWriterAppendData();
              if (!(_DWORD)v16)
              {
                if (theBuffer)
                {
                  CMBlockBufferGetDataLength(theBuffer);
                  v15 = FigAtomWriterAppendBlockBufferData();
                  if ((_DWORD)v15)
                    goto LABEL_56;
                }
                if (!v34)
                {
                  v15 = 0;
                  goto LABEL_56;
                }
                CMBlockBufferGetDataLength(v34);
                v16 = FigAtomWriterAppendBlockBufferData();
              }
              goto LABEL_54;
            }
LABEL_69:
            v15 = v23;
            goto LABEL_56;
          }
          v16 = FigSignalErrorAt();
        }
      }
LABEL_54:
      v15 = v16;
      goto LABEL_56;
    }
LABEL_70:
    v15 = 0;
  }
LABEL_71:
  if (theArray)
    CFRelease(theArray);
  return v15;
}

uint64_t createMetadataSerializerDictionaryWithMetadata(int a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, const __CFDictionary *a7, CFAllocatorRef allocator, const __CFDictionary **a9)
{
  __int128 v12;
  const __CFDictionary *Mutable;
  __int128 v14;
  uint64_t v15;
  CFStringRef v16;
  CFNumberRef v17;
  CFDictionaryRef v18;
  uint64_t v19;
  uint64_t FigMetadataWriter;
  uint64_t (*v21)(uint64_t, const __CFString *, const __CFString *, CFStringRef, CFDictionaryRef);
  uint64_t v22;
  void *v23;
  uint64_t v24;
  const void *v25;
  const __CFArray *v26;
  uint64_t v27;
  CFIndex v28;
  const __CFArray *v29;
  const __CFArray *v30;
  CFIndex v31;
  const void *ValueAtIndex;
  const void *v33;
  CFTypeRef v34;
  int v35;
  __CFString **v36;
  int v37;
  const __CFDictionary *v38;
  int v39;
  uint64_t v40;
  _BOOL4 v41;
  int v42;
  CFTypeRef v43;
  CFIndex v44;
  CFIndex v45;
  CFIndex v46;
  BOOL v47;
  char v48;
  const __CFDictionary *v49;
  const void *v50;
  const void *v51;
  const void *v52;
  const void *v53;
  _BOOL4 v54;
  CFTypeID v55;
  const __CFDictionary *v56;
  unsigned int (*v57)(CFTypeRef, const __CFDictionary *, const __CFAllocator *, UInt8 *);
  unsigned int (*v58)(uint64_t, const void *, const void *, const void *, const __CFDictionary *);
  uint64_t v59;
  UInt8 *v60;
  uint64_t v63;
  uint64_t v66;
  __CFDictionary *theDict;
  const __CFArray *v68;
  CFIndex Count;
  CFIndex v70;
  const __CFAllocator *alloc;
  unsigned int v72;
  __CFSet *theSet;
  uint64_t v74;
  char v76;
  CFSetCallBacks callBacks;
  CFTypeRef cf;
  CFTypeRef v79;
  void *value;
  int valuePtr;
  uint64_t v82;
  uint64_t v83;
  void *values[2];
  void *keys[2];
  UInt8 bytes[33];
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  _BYTE v91[19];
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v79 = 0;
  v12 = *(_OWORD *)(MEMORY[0x1E0C9B3B0] + 16);
  *(_OWORD *)&callBacks.version = *MEMORY[0x1E0C9B3B0];
  *(_OWORD *)&callBacks.release = v12;
  *(_OWORD *)&callBacks.equal = *(_OWORD *)(MEMORY[0x1E0C9B3B0] + 32);
  Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable
    || (callBacks.equal = 0,
        alloc = (const __CFAllocator *)*MEMORY[0x1E0C9AE00],
        (theSet = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, &callBacks)) == 0))
  {
    v22 = FigSignalErrorAt();
    v30 = 0;
    goto LABEL_113;
  }
  theDict = Mutable;
  if (!a6)
    goto LABEL_18;
  keys[0] = CFSTR("dataType");
  keys[1] = CFSTR("dataTypeNamespace");
  values[0] = 0;
  values[1] = CFSTR("com.apple.itunes");
  valuePtr = 1;
  value = 0;
  v82 = 0;
  v83 = 0;
  FigCFDictionaryGetInt32IfPresent();
  FigCFDictionaryGetInt32IfPresent();
  FigCFDictionaryGetInt64IfPresent();
  *(_QWORD *)&v14 = 0x3030303030303030;
  *((_QWORD *)&v14 + 1) = 0x3030303030303030;
  *(_OWORD *)&bytes[1] = v14;
  *(_OWORD *)&bytes[17] = v14;
  v87 = v14;
  v88 = v14;
  v89 = v14;
  v90 = v14;
  *(_OWORD *)v91 = v14;
  *(_DWORD *)&v91[15] = 808464432;
  bytes[0] = 32;
  snprintf((char *)&bytes[9], 0x24uLL, " %08X %08X %016llX", HIDWORD(v83), v83, v82);
  v15 = 44;
  do
  {
    bytes[v15] = 32;
    v15 += 9;
  }
  while ((_DWORD)v15 != 116);
  v16 = CFStringCreateWithBytes(alloc, bytes, 116, 0x600u, 0);
  v17 = CFNumberCreate(alloc, kCFNumberSInt32Type, &valuePtr);
  values[0] = v17;
  v18 = CFDictionaryCreate(alloc, (const void **)keys, (const void **)values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v19 = createMetadataSerializerForFormat((uint64_t)CFSTR("com.apple.itunes"), (uint64_t)allocator, &value);
  if ((_DWORD)v19)
  {
    v22 = v19;
LABEL_123:
    if (value)
      CFRelease(value);
    v23 = 0;
    if (!v18)
      goto LABEL_11;
    goto LABEL_10;
  }
  FigMetadataWriter = FigMetadataSerializerGetFigMetadataWriter(value);
  v21 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFString *, CFStringRef, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v21)
  {
    v22 = 4294954514;
    goto LABEL_123;
  }
  v22 = v21(FigMetadataWriter, CFSTR("itlk"), CFSTR("com.apple.iTunes.iTunSMPB"), v16, v18);
  if ((_DWORD)v22)
    goto LABEL_123;
  v23 = value;
  value = 0;
  if (v18)
LABEL_10:
    CFRelease(v18);
LABEL_11:
  if (v17)
    CFRelease(v17);
  Mutable = theDict;
  if (v16)
    CFRelease(v16);
  if ((_DWORD)v22)
  {
    v30 = 0;
    goto LABEL_112;
  }
  CFDictionaryAddValue(theDict, CFSTR("com.apple.itunes"), v23);
  if (v23)
    CFRelease(v23);
LABEL_18:
  if (a1 < 1)
  {
LABEL_111:
    v30 = 0;
    v22 = 0;
    *a9 = Mutable;
    Mutable = 0;
    goto LABEL_112;
  }
  v24 = 0;
  v63 = a1;
  while (1)
  {
    v25 = *(const void **)(a2 + 8 * v24);
    v26 = *(const __CFArray **)(a3 + 8 * v24);
    memset(bytes, 0, 24);
    if (FigCFEqual() || FigCFEqual())
    {
      if (a5)
      {
        v27 = 0;
      }
      else
      {
        *(_QWORD *)bytes = CFSTR("com.apple.itunes");
        v27 = 1;
      }
      v28 = v27 + 1;
      *(_QWORD *)&bytes[8 * v27] = CFSTR("org.mp4ra");
    }
    else
    {
      if (FigCFEqual() || FigCFEqual())
      {
        *(_QWORD *)bytes = CFSTR("org.mp4ra");
LABEL_98:
        v28 = 1;
        goto LABEL_26;
      }
      if (!FigCFEqual())
        goto LABEL_108;
      if (FigCFEqual() || FigCFEqual())
      {
        *(_QWORD *)bytes = v25;
        goto LABEL_98;
      }
      if (!FigCFEqual())
      {
        if (FigCFEqual())
        {
          *(_QWORD *)bytes = CFSTR("com.apple.quicktime.mdta");
          *(_QWORD *)&bytes[8] = CFSTR("com.apple.quicktime.udta");
          v28 = 2;
          goto LABEL_26;
        }
LABEL_108:
        v28 = 0;
        goto LABEL_26;
      }
      if (a5)
      {
        v59 = 0;
      }
      else
      {
        *(_QWORD *)bytes = CFSTR("com.apple.itunes");
        v59 = 1;
      }
      v60 = &bytes[8 * v59];
      v28 = v59 | 2;
      *(_QWORD *)v60 = CFSTR("com.apple.quicktime.mdta");
      *((_QWORD *)v60 + 1) = CFSTR("com.apple.quicktime.udta");
    }
LABEL_26:
    v29 = CFArrayCreate(alloc, (const void **)bytes, v28, MEMORY[0x1E0C9B378]);
    if (v29)
      break;
LABEL_93:
    if (++v24 == v63)
      goto LABEL_111;
  }
  v30 = v29;
  v66 = v24;
  Count = CFArrayGetCount(v29);
  if (Count < 1)
  {
LABEL_92:
    CFRelease(v30);
    v24 = v66;
    goto LABEL_93;
  }
  v31 = 0;
  v68 = v30;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v30, v31);
    if (FigCFEqual())
      break;
    v35 = FigCFEqual();
    v36 = kFigMetadataConverterDestFileFormat_ISO_3GP;
    if (v35 || (v37 = FigCFEqual(), v36 = &kFigMetadataConverterDestFileFormat_ISO_MP4, v37))
    {
      v38 = CFDictionaryCreate(alloc, (const void **)kFigMetadataConverterCreateOption_DestFileFormat, (const void **)v36, 1, 0, 0);
      v39 = FigMetadataCreateConverter(v25, ValueAtIndex, v38, (int)alloc, &v79);
      if (v38)
        CFRelease(v38);
      if (v39)
        goto LABEL_87;
      break;
    }
    if (!FigMetadataCreateConverter(v25, ValueAtIndex, 0, (int)alloc, &v79))
      break;
LABEL_87:
    if (++v31 == Count)
      goto LABEL_92;
  }
  v33 = CFDictionaryGetValue(Mutable, ValueAtIndex);
  cf = v33;
  if (v33)
  {
    v34 = CFRetain(v33);
    cf = v34;
LABEL_40:
    v74 = FigMetadataSerializerGetFigMetadataWriter(v34);
    v41 = !FigCFEqual() && !FigCFEqual() || FigCFEqual() == 0;
    v70 = v31;
    v42 = FigCFEqual();
    v43 = v79;
    if (a7)
    {
      v72 = CFDictionaryContainsKey(a7, CFSTR("comn"));
      if (!v26)
        goto LABEL_83;
LABEL_47:
      v44 = CFArrayGetCount(v26);
      if (v44 >= 1)
      {
        v45 = v44;
        v46 = 0;
        if (v42)
          v47 = 1;
        else
          v47 = !v41;
        v48 = v47;
        v76 = v48;
        do
        {
          v49 = (const __CFDictionary *)CFArrayGetValueAtIndex(v26, v46);
          v50 = CFDictionaryGetValue(v49, CFSTR("keyspace"));
          v51 = CFDictionaryGetValue(v49, CFSTR("key"));
          v52 = CFDictionaryGetValue(v49, CFSTR("value"));
          *(_QWORD *)bytes = 0;
          if (!v51)
            goto LABEL_80;
          if (!v50)
            goto LABEL_80;
          v53 = v52;
          if (!v52)
            goto LABEL_80;
          if (!FigCFEqual() && !FigCFEqual())
            goto LABEL_65;
          if (FigCFEqual())
          {
            if (!FigCFEqual())
              goto LABEL_80;
            v54 = 1;
LABEL_67:
            if (FigCFEqual() | v54)
              goto LABEL_80;
            goto LABEL_68;
          }
          v55 = CFGetTypeID(v51);
          if (v55 == CFNumberGetTypeID())
          {
            LODWORD(keys[0]) = 0;
            CFNumberGetValue((CFNumberRef)v51, kCFNumberSInt32Type, keys);
            v54 = LODWORD(keys[0]) == 1835365473;
          }
          else
          {
LABEL_65:
            v54 = 0;
          }
          if (FigCFEqual())
            goto LABEL_67;
          if (v54)
            goto LABEL_80;
LABEL_68:
          if ((v76 & 1) != 0 || !CFSetContainsValue(theSet, v49))
          {
            v56 = v49;
            if (!v43)
              goto LABEL_74;
            v57 = *(unsigned int (**)(CFTypeRef, const __CFDictionary *, const __CFAllocator *, UInt8 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
            if (v57)
            {
              if (!v57(v43, v49, alloc, bytes))
              {
                v51 = CFDictionaryGetValue(*(CFDictionaryRef *)bytes, CFSTR("key"));
                v50 = CFDictionaryGetValue(*(CFDictionaryRef *)bytes, CFSTR("keyspace"));
                v53 = CFDictionaryGetValue(*(CFDictionaryRef *)bytes, CFSTR("value"));
                v56 = *(const __CFDictionary **)bytes;
LABEL_74:
                if (!a7 || doesWhitelistContainKeyspaceAndKey_0(a7, v72, v50, (const __CFNumber *)v51))
                {
                  v58 = *(unsigned int (**)(uint64_t, const void *, const void *, const void *, const __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
                  if (v58)
                  {
                    if (!v58(v74, v50, v51, v53, v56))
                      CFSetAddValue(theSet, v49);
                  }
                }
              }
            }
          }
LABEL_80:
          if (*(_QWORD *)bytes)
            CFRelease(*(CFTypeRef *)bytes);
          ++v46;
        }
        while (v45 != v46);
      }
    }
    else
    {
      v72 = 0;
      if (v26)
        goto LABEL_47;
    }
LABEL_83:
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    Mutable = theDict;
    v30 = v68;
    v31 = v70;
    if (v79)
    {
      CFRelease(v79);
      v79 = 0;
    }
    goto LABEL_87;
  }
  v40 = createMetadataSerializerForFormat((uint64_t)ValueAtIndex, (uint64_t)alloc, &cf);
  if (!(_DWORD)v40)
  {
    CFDictionaryAddValue(Mutable, ValueAtIndex, cf);
    v34 = cf;
    goto LABEL_40;
  }
  v22 = v40;
LABEL_112:
  CFRelease(theSet);
LABEL_113:
  if (cf)
    CFRelease(cf);
  if (v79)
    CFRelease(v79);
  if (v30)
    CFRelease(v30);
  if (Mutable)
    CFRelease(Mutable);
  return v22;
}

uint64_t appendMetadataFromMetadataSerializerDictionary(const __CFDictionary *a1)
{
  const __CFAllocator *v2;
  CFIndex Count;
  const __CFDictionary *MutableCopy;
  const void *v5;
  const void *v6;
  int v7;
  const void **v8;
  const void *v9;
  void *v10;
  void *v11;
  uint64_t appended;
  uint64_t (*v13)(const void *, CMBlockBufferRef *);
  uint64_t CFDataWithBlockBufferNoCopy;
  size_t DataLength;
  CMBlockBufferRef v16;
  int v17;
  uint64_t FigMetadataWriter;
  CFTypeRef v19;
  uint64_t (*v20)(uint64_t, const __CFString *, const __CFString *, CFTypeRef, _QWORD);
  const __CFString *v21;
  uint64_t v22;
  const void *v23;
  const __CFString *v24;
  const void *v25;
  void *value;
  CMBlockBufferRef blockBufferOut;
  CFTypeRef cf;
  CMBlockBufferRef theBuffer;

  value = 0;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Count = CFDictionaryGetCount(a1);
  MutableCopy = CFDictionaryCreateMutableCopy(v2, Count, a1);
  v5 = CFDictionaryGetValue(MutableCopy, CFSTR("com.apple.itunes"));
  if (!v5)
    goto LABEL_33;
  v6 = v5;
  v7 = FigCFEqual();
  v8 = (const void **)&kFigMetadataFormat_ISOUserData;
  if (v7)
    v8 = (const void **)&kFigMetadataFormat_QuickTimeUserData;
  v9 = *v8;
  v10 = (void *)CFDictionaryGetValue(MutableCopy, *v8);
  value = v10;
  if (v10)
  {
    v11 = (void *)CFRetain(v10);
    value = v11;
  }
  else
  {
    appended = createMetadataSerializerForFormat((uint64_t)v9, (uint64_t)v2, &value);
    if ((_DWORD)appended)
    {
LABEL_40:
      v22 = appended;
      goto LABEL_42;
    }
    CFDictionaryAddValue(MutableCopy, v9, value);
    v11 = value;
  }
  cf = 0;
  theBuffer = 0;
  v13 = *(uint64_t (**)(const void *, CMBlockBufferRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 8);
  if (!v13)
    goto LABEL_26;
  CFDataWithBlockBufferNoCopy = v13(v6, &theBuffer);
  if (!(_DWORD)CFDataWithBlockBufferNoCopy)
  {
    if (!theBuffer)
    {
      v22 = 0;
      goto LABEL_27;
    }
    DataLength = CMBlockBufferGetDataLength(theBuffer);
    if (!CMBlockBufferIsRangeContiguous(theBuffer, 0, DataLength))
    {
      blockBufferOut = 0;
      CFDataWithBlockBufferNoCopy = CMBlockBufferCreateContiguous(v2, theBuffer, v2, 0, 0, DataLength, 0, &blockBufferOut);
      if ((_DWORD)CFDataWithBlockBufferNoCopy)
        goto LABEL_25;
      v16 = theBuffer;
      theBuffer = blockBufferOut;
      if (blockBufferOut)
        CFRetain(blockBufferOut);
      if (v16)
        CFRelease(v16);
      if (blockBufferOut)
        CFRelease(blockBufferOut);
    }
    CFDataWithBlockBufferNoCopy = FigCreateCFDataWithBlockBufferNoCopy();
    if (!(_DWORD)CFDataWithBlockBufferNoCopy)
    {
      v17 = FigCFEqual();
      FigMetadataWriter = FigMetadataSerializerGetFigMetadataWriter(v11);
      v19 = cf;
      v20 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFString *, CFTypeRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v20)
      {
        if (v17)
          v21 = CFSTR("udta");
        else
          v21 = CFSTR("uiso");
        CFDataWithBlockBufferNoCopy = v20(FigMetadataWriter, v21, CFSTR("meta"), v19, 0);
        goto LABEL_25;
      }
LABEL_26:
      v22 = 4294954514;
      goto LABEL_27;
    }
  }
LABEL_25:
  v22 = CFDataWithBlockBufferNoCopy;
LABEL_27:
  if (cf)
    CFRelease(cf);
  if (theBuffer)
    CFRelease(theBuffer);
  if ((_DWORD)v22)
    goto LABEL_42;
  CFDictionaryRemoveValue(MutableCopy, CFSTR("com.apple.itunes"));
LABEL_33:
  if (FigCFEqual())
  {
    v23 = CFDictionaryGetValue(MutableCopy, CFSTR("com.apple.quicktime.mdta"));
    if (v23)
    {
      appended = appendMetadataToAtomWriter((uint64_t)v23);
      if ((_DWORD)appended)
        goto LABEL_40;
    }
    v24 = CFSTR("com.apple.quicktime.udta");
  }
  else
  {
    v24 = CFSTR("org.mp4ra");
  }
  v25 = CFDictionaryGetValue(MutableCopy, v24);
  if (v25)
  {
    appended = appendMetadataToAtomWriter((uint64_t)v25);
    goto LABEL_40;
  }
  v22 = 0;
LABEL_42:
  if (value)
    CFRelease(value);
  if (MutableCopy)
    CFRelease(MutableCopy);
  return v22;
}

uint64_t createMetadataSerializerForFormat(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;

  if (FigCFEqual())
    return FigMetadataSerializerCreateForQuickTimeMetadata(a2, a3);
  if (FigCFEqual())
    return FigMetadataSerializerCreateForQuickTimeUserData(a2, a3);
  if (FigCFEqual())
    return FigMetadataSerializerCreateForISOUserData(a2, a3);
  result = FigCFEqual();
  if ((_DWORD)result)
    return FigMetadataSerializerCreateForiTunes(a2, a3);
  return result;
}

uint64_t doesWhitelistContainKeyspaceAndKey_0(const __CFDictionary *a1, uint64_t a2, const void *a3, const __CFNumber *a4)
{
  const __CFArray *Value;
  const __CFArray *v9;
  CFTypeID v10;
  const __CFAllocator *v11;
  CFStringRef v12;
  const __CFString *CommonKey;
  char cStr[4];
  char v16;
  unsigned int valuePtr;
  CFRange v18;

  Value = (const __CFArray *)CFDictionaryGetValue(a1, a3);
  if (Value)
  {
    v9 = Value;
    if (a4 && (v10 = CFGetTypeID(a4), v10 == CFNumberGetTypeID()))
    {
      v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      valuePtr = 0;
      CFNumberGetValue(a4, kCFNumberSInt32Type, &valuePtr);
      valuePtr = bswap32(valuePtr);
      *(_DWORD *)cStr = valuePtr;
      v16 = 0;
      v12 = CFStringCreateWithCString(v11, cStr, 0);
      a4 = (const __CFNumber *)v12;
    }
    else
    {
      v12 = 0;
    }
    v18.length = CFArrayGetCount(v9);
    v18.location = 0;
    if (CFArrayContainsValue(v9, v18, a4))
    {
      a2 = 1;
      if (!v12)
        return a2;
      goto LABEL_14;
    }
  }
  else
  {
    v12 = 0;
  }
  if ((_DWORD)a2)
  {
    if (!FigCFEqual())
    {
      CommonKey = FigMetadataGetCommonKey(a3, (const __CFString *)a4);
      if (CommonKey)
      {
        a2 = doesWhitelistContainKeyspaceAndKey_0(a1, a2, CFSTR("comn"), CommonKey);
        if (!v12)
          return a2;
        goto LABEL_14;
      }
    }
    a2 = 0;
  }
  if (v12)
LABEL_14:
    CFRelease(v12);
  return a2;
}

uint64_t appendMetadataToAtomWriter(uint64_t a1)
{
  uint64_t (*v2)(uint64_t, CMBlockBufferRef *);
  uint64_t v3;
  CMBlockBufferRef v4;
  uint64_t appended;
  CMBlockBufferRef theBuffer;

  theBuffer = 0;
  v2 = *(uint64_t (**)(uint64_t, CMBlockBufferRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 8);
  if (!v2)
    return 4294954514;
  v3 = v2(a1, &theBuffer);
  v4 = theBuffer;
  if ((_DWORD)v3)
  {
    appended = v3;
    if (!theBuffer)
      return appended;
LABEL_5:
    CFRelease(v4);
    return appended;
  }
  if (!theBuffer)
    return 0;
  CMBlockBufferGetDataLength(theBuffer);
  appended = FigAtomWriterAppendBlockBufferData();
  v4 = theBuffer;
  if (theBuffer)
    goto LABEL_5;
  return appended;
}

uint64_t FigCFAppendStringWithSmartComma(CFTypeRef *a1, const __CFString *a2)
{
  const __CFAllocator *v3;
  CFStringRef v4;

  if (!a2 || !a1)
    return FigSignalErrorAt();
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (*a1)
  {
    v4 = CFStringCreateWithFormat(v3, 0, CFSTR("%@, %@"), *a1, a2);
    CFRelease(*a1);
    *a1 = v4;
  }
  else
  {
    *a1 = CFStringCreateCopy(v3, a2);
  }
  return 0;
}

CFStringRef FigCopyGMLoggingDescriptionForOption(const __CFDictionary *a1)
{
  uint64_t Value;
  const __CFString *v3;
  uint64_t v4;
  const __CFString *v5;
  const __CFArray *v6;
  const __CFArray *v7;
  CFIndex v8;
  const __CFString *ValueAtIndex;
  CFTypeRef v10;
  CFStringRef v11;
  CFTypeRef cf;

  if (!a1)
    return (CFStringRef)CFRetain(CFSTR("NULL"));
  Value = FigCFDictionaryGetValue();
  if (!Value)
    Value = FigCFDictionaryGetValue();
  if (Value)
    v3 = (const __CFString *)Value;
  else
    v3 = CFSTR("unspecified");
  v4 = FigCFDictionaryGetValue();
  if (v4)
    v5 = (const __CFString *)v4;
  else
    v5 = CFSTR("none");
  cf = 0;
  v6 = (const __CFArray *)CFDictionaryGetValue(a1, CFSTR("MediaSelectionOptionsTaggedMediaCharacteristics"));
  if (!v6)
    goto LABEL_15;
  v7 = v6;
  if (CFArrayGetCount(v6) < 1)
    goto LABEL_15;
  v8 = 0;
  do
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v7, v8);
    FigCFAppendStringWithSmartComma(&cf, ValueAtIndex);
    ++v8;
  }
  while (v8 < CFArrayGetCount(v7));
  v10 = cf;
  if (!cf)
  {
LABEL_15:
    v10 = CFRetain(&stru_1E2FD85F8);
    cf = v10;
  }
  v11 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("Option: ID=%@, Language=\"%@\", Characteristics=\"%@\""), v5, v3, v10);
  if (cf)
    CFRelease(cf);
  if (!v11)
    return (CFStringRef)CFRetain(CFSTR("NULL"));
  return v11;
}

uint64_t FigPWDKeyExchangeReceiverCreateForAOCP(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t DerivedStorage;

  if (!a3)
    return FigSignalErrorAt();
  FigPWDKeyExchangeReceiverGetClassID();
  v4 = CMDerivedObjectCreate();
  if (!(_DWORD)v4)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      *(_BYTE *)(DerivedStorage + 24) = 0;
      *(_QWORD *)(DerivedStorage + 32) = 0;
      v4 = 0;
      *(_QWORD *)(DerivedStorage + 16) = FigSimpleMutexCreate();
      *a3 = 0;
    }
    else
    {
      return 4294947746;
    }
  }
  return v4;
}

uint64_t pwdKeyExchangeReceiverAOCP_Finalize()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    v1 = result;
    v2 = *(_QWORD *)(result + 48);
    if (v2)
    {
      N8pdwAfn(v2);
      *(_QWORD *)(v1 + 48) = 0;
    }
    v3 = *(_QWORD *)(v1 + 40);
    if (v3)
    {
      v4 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v4)
        v4(v3);
      *(_QWORD *)(v1 + 40) = 0;
    }
    v5 = *(_QWORD *)(v1 + 56);
    if (v5)
    {
      JE2f6WCx(v5);
      *(_QWORD *)(v1 + 56) = 0;
    }
    *(_QWORD *)(v1 + 32) = 0;
    *(_BYTE *)(v1 + 24) = 0;
    *(_DWORD *)(v1 + 64) = 0;
    return FigSimpleMutexDestroy();
  }
  return result;
}

__CFString *pwdKeyExchangeReceiverAOCP_CopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigPWDKeyExchangeReceiverAOCP %p>"), a1);
  return Mutable;
}

uint64_t pwdKeyExchangeReceiverAOCP_CopyProperty()
{
  return 0;
}

uint64_t pwdKeyExchangeReceiverAOCP_SetProperty()
{
  return 0;
}

uint64_t pwdKeyExchangeReceiverAOCP_ProcessIncomingMessageAndCreateReply(uint64_t a1, const __CFData *a2)
{
  CFPropertyListRef v2;
  const void *v3;
  uint64_t v4;

  if (!a1)
    return FigSignalErrorAt();
  if (!a2)
    return FigSignalErrorAt();
  v2 = CFPropertyListCreateWithData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0, 0, 0);
  if (!v2)
    return FigSignalErrorAt();
  v3 = v2;
  FigCFDictionaryGetInt32IfPresent();
  v4 = FigSignalErrorAt();
  CFRelease(v3);
  return v4;
}

uint64_t pwdKeyExchangeReceiverAOCP_SetCryptorOnSampleBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  CFTypeRef v3;
  uint64_t v4;
  CFTypeRef cf;

  cf = 0;
  if (!a2)
    return FigSignalErrorAt();
  FigPWDKeyExchangeReceiverGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
  if (!*(_QWORD *)(DerivedStorage + 40))
  {
    if (FigPKDCPELimitedCryptorCreateWithExternalProtectionMethods(*(_QWORD *)(DerivedStorage + 48), *(_DWORD *)(DerivedStorage + 64), *MEMORY[0x1E0C9AE00], &cf))
    {
      v4 = FigSignalErrorAt();
      goto LABEL_9;
    }
    if (cf)
      v3 = CFRetain(cf);
    else
      v3 = 0;
    *(_QWORD *)(DerivedStorage + 40) = v3;
  }
  FigSampleBufferSetDecryptor();
  v4 = 0;
LABEL_9:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
  if (cf)
    CFRelease(cf);
  return v4;
}

uint64_t pwdKeyExchangeReceiverAOCP_SetExternalProtectionMethods(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;

  FigPWDKeyExchangeReceiverGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
  *(_DWORD *)(DerivedStorage + 64) = a2;
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
  return 0;
}

uint64_t FigTTMLCGColorCreateWithColorSyntax(const __CFString *a1)
{
  uint64_t v2;
  int v3;
  int v4;

  v4 = 0;
  v3 = 0;
  v2 = 0;
  if (FigTTMLParseColor(a1, (float *)&v4, (float *)&v3, (float *)&v2 + 1, (float *)&v2))
    return 0;
  else
    return FigCreateCGColorSRGB();
}

uint64_t FigTTMLParseLengthSyntax(const __CFString *a1)
{
  uint64_t v1;
  uint64_t v3;

  v1 = *MEMORY[0x1E0CA4AC8];
  v3 = 0;
  if (!FigTTMLParseLength(a1, (float *)&v3 + 1, (int *)&v3))
  {
    switch((int)v3)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        v1 = FigGeometryDimensionMake();
        break;
      default:
        return v1;
    }
  }
  return v1;
}

uint64_t FigTTMLParseFontFamilySyntaxAndCreateFontFamilyNameList(const __CFString *a1)
{
  uint64_t v2;

  v2 = 0;
  FigTTMLParseFontFamilyAndCreateFontFamilyNameList(a1, &v2);
  return v2;
}

uint64_t FigTTMLGetInheritableStyleAttributeNames()
{
  MEMORY[0x19402F294](&FigTTMLGetInheritableStyleAttributeNames_once, figTTML_initInheritableStyleAttributeNames);
  return sInheritableStyleAttributeNames;
}

void figTTML_initInheritableStyleAttributeNames()
{
  __CFArray *Mutable;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  CFArrayAppendValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling color"));
  CFArrayAppendValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling direction"));
  CFArrayAppendValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling fontFamily"));
  CFArrayAppendValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling fontSize"));
  CFArrayAppendValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling fontStyle"));
  CFArrayAppendValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling fontWeight"));
  CFArrayAppendValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling lineHeight"));
  CFArrayAppendValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling shear"));
  CFArrayAppendValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling textAlign"));
  CFArrayAppendValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling textCombine"));
  CFArrayAppendValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling textDecoration"));
  CFArrayAppendValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling textEmphasis"));
  CFArrayAppendValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling textOutline"));
  CFArrayAppendValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling textShadow"));
  CFArrayAppendValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling visibility"));
  CFArrayAppendValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling wrapOption"));
  CFArrayAppendValue(Mutable, CFSTR("http://namespace.itunes.apple.com/itt/ttml-extension#ruby kind"));
  CFArrayAppendValue(Mutable, CFSTR("http://namespace.itunes.apple.com/itt/ttml-extension#ruby internalRubyID"));
  CFArrayAppendValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling ruby"));
  CFArrayAppendValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling internalRubyID"));
  CFArrayAppendValue(Mutable, CFSTR("http://www.w3.org/ns/ttml/profile/imsc1#styling forcedDisplay"));
  CFArrayAppendValue(Mutable, CFSTR("http://www.w3.org/ns/ttml/profile/imsc1#styling fillLineGap"));
  CFArrayAppendValue(Mutable, CFSTR("http://namespace.itunes.apple.com/itt/ttml-extension#vertical combine"));
  CFArrayAppendValue(Mutable, CFSTR("http://namespace.itunes.apple.com/itt/ttml-extension#ruby position"));
  CFArrayAppendValue(Mutable, CFSTR("http://namespace.itunes.apple.com/itt/ttml-extension#ruby align"));
  CFArrayAppendValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling rubyAlign"));
  CFArrayAppendValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling position"));
  sInheritableStyleAttributeNames = (uint64_t)Mutable;
}

uint64_t FigVideoReceiverDataChannelSettingsCopySerializable(const __CFArray *a1, __CFArray **a2)
{
  const __CFAllocator *v4;
  CFMutableArrayRef Mutable;
  __CFArray *v6;
  CFIndex v7;
  CFIndex v8;
  CFIndex v9;
  const __CFDictionary *MutableCopy;
  __CFDictionary *v11;
  const void *Value;
  const void *v13;
  const void *v14;
  const __CFDictionary *v15;
  const __CFDictionary *v16;
  CFIndex Count;
  __CFDictionary *v18;
  __CFDictionary *v19;
  uint64_t v20;
  __CFArray **v22;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v6 = Mutable;
    v22 = a2;
    if (a1 && (v7 = CFArrayGetCount(a1), v7 >= 1))
    {
      v8 = v7;
      v9 = 0;
      while (1)
      {
        CFArrayGetValueAtIndex(a1, v9);
        MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
        if (!MutableCopy)
        {
          v20 = FigSignalErrorAt();
          goto LABEL_16;
        }
        v11 = MutableCopy;
        Value = CFDictionaryGetValue(MutableCopy, CFSTR("ChannelDescription"));
        if (!Value)
          break;
        v13 = (const void *)MEMORY[0x19402EFD0](Value, v4);
        if (!v13)
          break;
        v14 = v13;
        CFDictionarySetValue(v11, CFSTR("ChannelDescriptionDict"), v13);
        CFDictionaryRemoveValue(v11, CFSTR("ChannelDescription"));
        v15 = (const __CFDictionary *)CFDictionaryGetValue(v11, CFSTR("ChannelSpecificSettings"));
        if (v15)
        {
          v16 = v15;
          if (CFDictionaryContainsKey(v15, CFSTR("VideoColorProperties")))
          {
            Count = CFDictionaryGetCount(v16);
            v18 = CFDictionaryCreateMutableCopy(v4, Count, v16);
            if (!v18)
              break;
            v19 = v18;
            CFDictionaryRemoveValue(v18, CFSTR("DestinationPixelBufferAttributes"));
            CFDictionaryRemoveValue(v19, CFSTR("VideoColorProperties"));
            CFDictionaryRemoveValue(v19, CFSTR("AllowWideColor"));
            CFDictionarySetValue(v11, CFSTR("ChannelSpecificSettings"), v19);
            CFRelease(v19);
          }
        }
        CFRelease(v14);
        CFArrayAppendValue(v6, v11);
        CFRelease(v11);
        if (v8 == ++v9)
          goto LABEL_13;
      }
      v20 = FigSignalErrorAt();
      CFRelease(v11);
    }
    else
    {
LABEL_13:
      if (v22)
      {
        v20 = 0;
        *v22 = v6;
        return v20;
      }
      v20 = 0;
    }
LABEL_16:
    CFRelease(v6);
    return v20;
  }
  return FigSignalErrorAt();
}

uint64_t FigVideoReceiverDataChannelSettingsCopyDeserialized(const __CFArray *a1, __CFArray **a2)
{
  uint64_t v4;
  CFMutableArrayRef Mutable;
  __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  const __CFDictionary *MutableCopy;
  __CFDictionary *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  void *value;

  v4 = *MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v6 = Mutable;
    if (a1 && (Count = CFArrayGetCount(a1), Count >= 1))
    {
      v8 = Count;
      v9 = 0;
      while (1)
      {
        CFArrayGetValueAtIndex(a1, v9);
        MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
        if (!MutableCopy)
        {
          v14 = FigSignalErrorAt();
          goto LABEL_16;
        }
        v11 = MutableCopy;
        v12 = CFDictionaryGetValue(MutableCopy, CFSTR("ChannelDescriptionDict"));
        if (!v12)
          break;
        value = 0;
        v13 = MEMORY[0x19402F00C](v12, v4, &value);
        if ((_DWORD)v13)
          goto LABEL_15;
        CFDictionarySetValue(v11, CFSTR("ChannelDescription"), value);
        CFDictionaryRemoveValue(v11, CFSTR("ChannelDescriptionDict"));
        if (value)
          CFRelease(value);
        CFArrayAppendValue(v6, v11);
        CFRelease(v11);
        if (v8 == ++v9)
          goto LABEL_11;
      }
      v13 = FigSignalErrorAt();
LABEL_15:
      v14 = v13;
      CFRelease(v11);
    }
    else
    {
LABEL_11:
      v14 = 0;
      if (a2)
      {
        *a2 = v6;
        return v14;
      }
    }
LABEL_16:
    CFRelease(v6);
    return v14;
  }
  return FigSignalErrorAt();
}

uint64_t FigAudioQueueOfflineMixerInvalidate(uint64_t result)
{
  uint64_t v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  const __CFArray *v6;
  int Count;
  CFIndex v8;
  uint64_t v9;
  const __CFArray *v10;
  CFIndex v11;
  const void *ValueAtIndex;
  CFIndex v13;
  BOOL v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, _QWORD, _QWORD);
  uint64_t v17;
  uint64_t (*v18)(uint64_t);

  if (result)
  {
    v1 = result;
    if (dword_1EE2A3228)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    MEMORY[0x19402EA0C](*(_QWORD *)(v1 + 24));
    if (*(_BYTE *)(v1 + 16))
    {
      return MEMORY[0x19402EA24](*(_QWORD *)(v1 + 24));
    }
    else
    {
      FigAudioQueueOfflineMixerStop(v1);
      FigAudioQueueOfflineMixerWaitUntilCompletelyStopped(v1);
      v3 = *(_QWORD *)(v1 + 32);
      if (v3 && *(_BYTE *)(v1 + 56))
      {
        v4 = *(_QWORD *)(v1 + 48);
        v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
        if (v5)
          v5(v3, v4);
        *(_QWORD *)(v1 + 48) = 0;
        *(_BYTE *)(v1 + 56) = 0;
      }
      v6 = *(const __CFArray **)(v1 + 264);
      if (v6)
      {
        Count = CFArrayGetCount(v6);
        if (Count >= 1)
        {
          v8 = 0;
          v9 = Count;
          do
          {
            CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 264), v8);
            CMNotificationCenterGetDefaultLocalCenter();
            FigNotificationCenterRemoveWeakListeners();
            ++v8;
          }
          while (v9 != v8);
        }
        v10 = *(const __CFArray **)(v1 + 264);
        if (v10)
        {
          v11 = CFArrayGetCount(v10);
          do
          {
            if (v11 < 1)
              break;
            ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 264), 0);
            FigAudioQueueSetProperty((uint64_t)ValueAtIndex, CFSTR("OfflineMixer"), 0);
            v13 = CFArrayGetCount(*(CFArrayRef *)(v1 + 264));
            v14 = v13 < v11;
            v11 = v13;
          }
          while (v14);
        }
      }
      *(_BYTE *)(v1 + 16) = 1;
      result = MEMORY[0x19402EA24](*(_QWORD *)(v1 + 24));
      v15 = *(_QWORD *)(v1 + 64);
      if (v15)
      {
        if (!*(_BYTE *)(v1 + 72))
          goto LABEL_23;
        result = CMBaseObjectGetVTable();
        v16 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(result + 16) + 8);
        if (v16)
          result = v16(v15, 0, 0);
        *(_BYTE *)(v1 + 72) = 0;
        v15 = *(_QWORD *)(v1 + 64);
        if (v15)
        {
LABEL_23:
          result = FigActivitySchedulerGetFigBaseObject(v15);
          if (result)
          {
            v17 = result;
            result = CMBaseObjectGetVTable();
            v18 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 24);
            if (v18)
              return v18(v17);
          }
        }
      }
    }
  }
  return result;
}

uint64_t FigAudioQueueOfflineMixerStop(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v3;

  if (dword_1EE2A3228)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 24));
  if (*(_BYTE *)(a1 + 16))
  {
    v3 = FigSignalErrorAt();
  }
  else
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 80));
    *(_BYTE *)(a1 + 75) = 0;
    *(_BYTE *)(a1 + 290) = 0;
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 80));
    v3 = 0;
  }
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
  return v3;
}

uint64_t FigAudioQueueOfflineMixerWaitUntilCompletelyStopped(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v3;

  if (dword_1EE2A3228)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 24));
  if (*(_BYTE *)(a1 + 16))
  {
    v3 = FigSignalErrorAt();
  }
  else
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 80));
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 80));
    v3 = 0;
  }
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
  return v3;
}

uint64_t FigAudioQueueOfflineMixerGetTypeID()
{
  MEMORY[0x19402F294](&sRegisterAudioQueueOfflineMixerTypeOnce, RegisterFigAudioQueueOfflineMixerType);
  return sFigAudioQueueOfflineMixerTypeID;
}

uint64_t RegisterFigAudioQueueOfflineMixerType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigAudioQueueOfflineMixerTypeID = result;
  return result;
}

uint64_t FigAudioQueueOfflineMixerCreate(const __CFAllocator *a1, __int128 *a2, size_t a3, const AudioChannelLayout *a4, const __CFDictionary *a5, const void *a6, const void *a7, uint64_t *a8)
{
  uint64_t Instance;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v18;
  CFMutableArrayRef v19;
  const __CFNumber *Value;
  int v21;
  const __CFNumber *v22;
  int v23;
  const __CFNumber *v24;
  uint64_t *v25;
  int v26;
  int v27;
  uint64_t Property;
  int v29;
  __int128 v30;
  __int128 v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  _DWORD *v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  _DWORD *v40;
  size_t v41;
  void *v42;
  int v43;
  size_t v44;
  void *v45;
  _OWORD *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  void *v50;
  size_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t (*)(uint64_t), uint64_t);
  CFNumberRef v55;
  uint64_t FigBaseObject;
  void (*v57)(uint64_t, const __CFString *, CFNumberRef);
  uint64_t v58;
  void (*v59)(uint64_t, const __CFString *, _QWORD);
  uint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t);
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v67;
  int v69;
  int v73;
  uint64_t valuePtr;
  CFStringRef theString;
  unsigned int size;
  int size_4;
  CMTime v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  size = 0;
  valuePtr = 0;
  theString = 0;
  v73 = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a2
    || !a6
    || !a7
    || !a8
    || (MEMORY[0x19402F294](&sRegisterAudioQueueOfflineMixerTypeOnce, RegisterFigAudioQueueOfflineMixerType),
        (Instance = _CFRuntimeCreateInstance()) == 0))
  {
    v67 = FigSignalErrorAt();
    v50 = 0;
LABEL_86:
    free(v50);
    return v67;
  }
  v14 = Instance;
  *(_BYTE *)(Instance + 396) = 0;
  v15 = FigReentrantMutexCreate();
  *(_QWORD *)(v14 + 24) = v15;
  if (!v15)
    goto LABEL_88;
  v16 = FigSimpleMutexCreate();
  *(_QWORD *)(v14 + 80) = v16;
  if (!v16
    || (Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]), (*(_QWORD *)(v14 + 264) = Mutable) == 0)
    || (v18 = CFArrayCreateMutable(a1, 0, 0), (*(_QWORD *)(v14 + 272) = v18) == 0)
    || (v19 = CFArrayCreateMutable(a1, 0, 0), (*(_QWORD *)(v14 + 280) = v19) == 0))
  {
LABEL_88:
    Property = FigSignalErrorAt();
LABEL_89:
    v67 = Property;
    v50 = 0;
    goto LABEL_84;
  }
  if (!a5)
  {
    v69 = 0;
    v23 = 0;
    goto LABEL_27;
  }
  Value = (const __CFNumber *)CFDictionaryGetValue(a5, CFSTR("AudioQueueOfflineMixer_MaxPacketsPerRender"));
  if (Value)
    CFNumberGetValue(Value, kCFNumberIntType, (char *)&valuePtr + 4);
  v21 = *((_DWORD *)a2 + 2);
  if (v21 == 1634754915 || v21 == 1902211171 || v21 == 1667330147)
  {
    v22 = (const __CFNumber *)CFDictionaryGetValue(a5, CFSTR("AudioQueueOfflineMixer_DynamicRangeControlConfig"));
    if (v22)
    {
      CFNumberGetValue(v22, kCFNumberIntType, &valuePtr);
      v69 = 1;
    }
    else
    {
      v69 = 0;
    }
    v24 = (const __CFNumber *)CFDictionaryGetValue(a5, CFSTR("AudioQueueOfflineMixerOption_SceneDescriptionPreset"));
    if (v24)
    {
      CFNumberGetValue(v24, kCFNumberIntType, &v73);
      v23 = 1;
      goto LABEL_25;
    }
  }
  else
  {
    v69 = 0;
  }
  v23 = 0;
LABEL_25:
  if (FigCFDictionaryGetValueIfPresent())
    CFStringGetCString(theString, (char *)(v14 + 396), 10, 0x600u);
LABEL_27:
  v25 = a8;
  if (*((_DWORD *)a2 + 2) == 1819304813)
    v26 = (*((unsigned __int8 *)a2 + 12) >> 5) & 1;
  else
    v26 = 0;
  v27 = HIDWORD(valuePtr);
  LODWORD(v78.value) = 0;
  Property = AQOfflineMixerNew();
  if ((_DWORD)Property)
    goto LABEL_89;
  if (v27)
    v29 = v27;
  else
    v29 = 0x2000;
  v30 = *a2;
  v31 = a2[1];
  *(_QWORD *)(v14 + 208) = *((_QWORD *)a2 + 4);
  *(_OWORD *)(v14 + 176) = v30;
  *(_OWORD *)(v14 + 192) = v31;
  v32 = *(_DWORD *)(v14 + 192);
  if (v32 <= 1)
    v32 = 1;
  *(_DWORD *)(v14 + 244) = v32 * v29;
  size_4 = 4;
  Property = AQOfflineMixerGetProperty();
  if ((_DWORD)Property)
    goto LABEL_89;
  v33 = *(_DWORD *)(v14 + 244);
  if (v33 >= LODWORD(v78.value))
  {
    v34 = v33 / LODWORD(v78.value);
  }
  else
  {
    *(_DWORD *)(v14 + 244) = v78.value;
    v34 = 1;
  }
  *(_DWORD *)(v14 + 240) = v34;
  if (v26)
    v35 = *(_DWORD *)(v14 + 204);
  else
    v35 = 1;
  v36 = malloc_type_malloc(16 * (v35 - 1) + 24, 0xC1625842uLL);
  *(_QWORD *)(v14 + 248) = v36;
  *v36 = v35;
  if (v35)
  {
    v37 = 0;
    v38 = 16 * v35;
    do
    {
      if ((v26 & 1) != 0)
        v39 = 1;
      else
        v39 = *(_DWORD *)(v14 + 204);
      v40 = &v36[v37 / 4];
      v40[2] = v39;
      v41 = *(unsigned int *)(v14 + 244);
      v40[3] = v41;
      v42 = malloc_type_malloc(v41, 0x9CABB104uLL);
      v36 = *(_DWORD **)(v14 + 248);
      *(_QWORD *)&v36[v37 / 4 + 4] = v42;
      v37 += 16;
    }
    while (v38 != v37);
  }
  v43 = *(_DWORD *)(v14 + 196);
  if (v43)
    v44 = 72;
  else
    v44 = 72 * *(unsigned int *)(v14 + 240);
  *(_QWORD *)(v14 + 224) = malloc_type_malloc(v44, 0x1000040FF89C88EuLL);
  if (!*(_DWORD *)(v14 + 192))
  {
    *(_QWORD *)(v14 + 232) = malloc_type_malloc(8 * *(unsigned int *)(v14 + 240), 0x100004000313F17uLL);
LABEL_58:
    v45 = malloc_type_malloc(16 * *(unsigned int *)(v14 + 240), 0x1000040451B5BE8uLL);
    goto LABEL_59;
  }
  if ((v26 & 1) == 0)
    *(_QWORD *)(v14 + 232) = malloc_type_malloc(8uLL, 0x100004000313F17uLL);
  if (!v43)
    goto LABEL_58;
  v45 = 0;
LABEL_59:
  *(_QWORD *)(v14 + 216) = v45;
  *(_DWORD *)(v14 + 88) = (int)(*(double *)(v14 + 176) + 0.5);
  size = 8;
  v46 = (_OWORD *)(v14 + 300);
  if (AQOfflineMixerGetProperty() || !size)
  {
    v47 = MEMORY[0x1E0CA2E68];
    v48 = *MEMORY[0x1E0CA2E68];
    *v46 = *MEMORY[0x1E0CA2E68];
    v49 = *(_QWORD *)(v47 + 16);
    *(_QWORD *)(v14 + 316) = v49;
    *(_OWORD *)(v14 + 324) = v48;
    *(_QWORD *)(v14 + 340) = v49;
  }
  else
  {
    CMTimeMake(&v78, 0, *(_DWORD *)(v14 + 88));
    *v46 = *(_OWORD *)&v78.value;
    *(_QWORD *)(v14 + 316) = v78.epoch;
    *(_OWORD *)(v14 + 324) = *v46;
    *(_QWORD *)(v14 + 340) = *(_QWORD *)(v14 + 316);
  }
  if (v69)
  {
    Property = AQOfflineMixerSetProperty();
    if ((_DWORD)Property)
      goto LABEL_89;
  }
  if (v23)
  {
    Property = AQOfflineMixerSetProperty();
    if ((_DWORD)Property)
      goto LABEL_89;
  }
  v50 = 0;
  if (AQOfflineMixerGetPropertySize())
  {
    v51 = 0;
  }
  else
  {
    v51 = 0;
    if (size)
    {
      v50 = malloc_type_calloc(1uLL, size, 0xFB7E54C9uLL);
      v52 = AQOfflineMixerGetProperty();
      if ((_DWORD)v52)
        goto LABEL_91;
      v51 = size;
    }
  }
  v52 = CMAudioFormatDescriptionCreate(a1, (const AudioStreamBasicDescription *)a2, a3, a4, v51, v50, 0, (CMAudioFormatDescriptionRef *)(v14 + 168));
  if ((_DWORD)v52)
    goto LABEL_91;
  *(_QWORD *)(v14 + 64) = a7;
  CFRetain(a7);
  v53 = *(_QWORD *)(v14 + 64);
  v54 = *(uint64_t (**)(uint64_t, uint64_t (*)(uint64_t), uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 8);
  if (v54)
  {
    v52 = v54(v53, aqOfflineMixer_processUntilHighWaterMet, v14);
    if (!(_DWORD)v52)
    {
      *(_BYTE *)(v14 + 72) = 1;
      LODWORD(v78.value) = 0;
      v55 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &v78);
      FigBaseObject = FigActivitySchedulerGetFigBaseObject(*(_QWORD *)(v14 + 64));
      v57 = *(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
      if (v57)
        v57(FigBaseObject, CFSTR("ClientPID"), v55);
      CFRelease(v55);
      v58 = FigActivitySchedulerGetFigBaseObject(*(_QWORD *)(v14 + 64));
      v59 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v59)
        v59(v58, CFSTR("ThrottleForBackground"), *MEMORY[0x1E0C9AE40]);
      *(_QWORD *)(v14 + 32) = a6;
      CFRetain(a6);
      v60 = *(_QWORD *)(v14 + 32);
      v61 = *(uint64_t (**)(uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                 + 32);
      if (v61)
      {
        v52 = v61(v60, aqOfflineMixer_outputBelowLowWater, v14, v14 + 48);
        if (!(_DWORD)v52)
        {
          *(_BYTE *)(v14 + 56) = 1;
          v62 = MEMORY[0x1E0CA2E18];
          v63 = *MEMORY[0x1E0CA2E18];
          *(_OWORD *)(v14 + 140) = *MEMORY[0x1E0CA2E18];
          v64 = *(_QWORD *)(v62 + 16);
          *(_QWORD *)(v14 + 156) = v64;
          *(_DWORD *)(v14 + 296) = -50;
          *(_DWORD *)(v14 + 416) = 0;
          *(_OWORD *)(v14 + 420) = v63;
          *(_QWORD *)(v14 + 436) = v64;
          *(_OWORD *)(v14 + 444) = v63;
          v65 = MEMORY[0x1E0CA2E68];
          *(_QWORD *)(v14 + 460) = v64;
          *(_QWORD *)(v14 + 484) = *(_QWORD *)(v65 + 16);
          *(_OWORD *)(v14 + 468) = *(_OWORD *)v65;
          *(_QWORD *)(v14 + 388) = v64;
          *(_OWORD *)(v14 + 372) = v63;
          *(_OWORD *)(v14 + 348) = v63;
          *(_QWORD *)(v14 + 364) = v64;
          if (dword_1EE2A3228)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v67 = 0;
          *v25 = v14;
          goto LABEL_86;
        }
        goto LABEL_91;
      }
      goto LABEL_83;
    }
LABEL_91:
    v67 = v52;
    goto LABEL_84;
  }
LABEL_83:
  v67 = 4294954514;
LABEL_84:
  free(v50);
  CFRelease((CFTypeRef)v14);
  return v67;
}

uint64_t aqOfflineMixer_processUntilHighWaterMet(uint64_t a1)
{
  CMTime *v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CMTime *v4;
  CMTime *v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t);
  CMTimeEpoch epoch;
  unsigned int *v9;
  uint64_t v10;
  int v11;
  _DWORD *v12;
  CFIndex v13;
  CMItemCount v14;
  opaqueCMSampleBuffer *v15;
  CFDictionaryRef v16;
  int v17;
  int v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  CMTimeEpoch v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  CMTimeEpoch v31;
  uint64_t v32;
  __int128 v33;
  __int128 *v34;
  __int128 v35;
  uint64_t v36;
  size_t v37;
  CMItemCount numSampleSizeEntries;
  _QWORD *v39;
  unsigned int *v40;
  CMItemCount v41;
  unsigned int v42;
  uint64_t v43;
  OSStatus DataPointer;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  OSStatus v48;
  CMTime *v49;
  float v50;
  int v51;
  float v52;
  unsigned int v53;
  NSObject *v54;
  unsigned int value;
  unsigned int v56;
  double v57;
  Float64 Seconds;
  Float64 v59;
  const void *ValueAtIndex;
  const __CFAllocator *v61;
  CMTimeFlags flags;
  CMTimeEpoch v63;
  int32_t v64;
  CMTimeValue v65;
  CMItemCount NumSamples;
  opaqueCMSampleBuffer *v67;
  const __CFAllocator *v68;
  OSStatus v69;
  const __CFAllocator *v70;
  uint64_t v71;
  void (*v72)(uint64_t, opaqueCMSampleBuffer *);
  _BOOL4 v73;
  NSObject *v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t);
  int v79;
  uint64_t v80;
  uint64_t (*v81)(uint64_t);
  int v82;
  int v83;
  int v84;
  double v85;
  Float64 v86;
  Float64 v87;
  int v88;
  uint64_t result;
  const __CFArray *v90;
  const __CFArray *v91;
  CFRange v92;
  const __CFArray *v93;
  int v94;
  const __CFString *key;
  const __CFAllocator *allocator;
  _OWORD *v97;
  _OWORD *v98;
  _OWORD *v99;
  CMTimeValue *v100;
  CMTime *v101;
  char numSampleTimingEntries;
  CMItemCount numSampleTimingEntriesa;
  CMItemCount numSampleTimingEntriesb;
  _OWORD *v105;
  CMTime *v106;
  int v107;
  __int128 v108;
  int v109;
  CMTime v110;
  CMTime rhs;
  CMTime v112;
  CMTime v113;
  CMTime v114;
  CMTime cf;
  CMTime lhs;
  CMTime v117;
  CMItemCount timingArrayEntriesNeededOut;
  CMSampleTimingInfo sampleTimingArray;
  char v120;
  CMTime v121;
  CMTime v122;
  CMTime v123;
  unsigned int v124;
  os_log_type_t v125;
  char *dataPointerOut;
  CMTime type;
  CMTime time2;
  uint64_t v129;
  __int16 v130;
  int v131;
  __int16 v132;
  _BYTE v133[10];
  double v134;
  _BYTE v135[10];
  __int16 v136;
  double v137;
  __int16 v138;
  _BYTE v139[10];
  Float64 v140;
  __int16 v141;
  int v142;
  CMTime theBuffer;
  CMTime time1;
  uint64_t v145;
  CFRange v146;

  v145 = *MEMORY[0x1E0C80C00];
  v2 = (CMTime *)(a1 + 324);
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 80));
  v106 = v2;
  if (dword_1EE2A3228)
  {
    LODWORD(sampleTimingArray.duration.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v4 = (CMTime *)(a1 + 92);
  v101 = v2 + 1;
  v100 = (CMTimeValue *)(a1 + 372);
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v99 = (_OWORD *)(a1 + 444);
  key = (const __CFString *)*MEMORY[0x1E0CA2728];
  v97 = (_OWORD *)(a1 + 420);
  v98 = (_OWORD *)(a1 + 468);
  v5 = (CMTime *)MEMORY[0x1E0CA2E18];
  v105 = (_OWORD *)(a1 + 92);
  while (1)
  {
    if (!*(_BYTE *)(a1 + 75)
      || !*(_BYTE *)(a1 + 289)
      || (v6 = *(_QWORD *)(a1 + 32),
          (v7 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16)) != 0)
      && v7(v6))
    {
      if (!*(_BYTE *)(a1 + 290))
        goto LABEL_130;
    }
    if (*(_BYTE *)(a1 + 74))
      goto LABEL_130;
    v124 = 0;
    v123 = *v5;
    epoch = v123.epoch;
    v122 = v123;
    v108 = *(_OWORD *)&v123.value;
    v121 = v123;
    v120 = 0;
    memset(&sampleTimingArray, 0, sizeof(sampleTimingArray));
    timingArrayEntriesNeededOut = 0;
    v9 = *(unsigned int **)(a1 + 248);
    v10 = *v9;
    if ((_DWORD)v10)
    {
      v11 = *(_DWORD *)(a1 + 244);
      v12 = v9 + 3;
      do
      {
        *v12 = v11;
        v12 += 4;
        --v10;
      }
      while (v10);
    }
    LODWORD(v13) = AQOfflineMixerRender();
    if (!(_DWORD)v13)
    {
      *(_BYTE *)(a1 + 288) = v120;
      v14 = v124;
      if (!v124 || *(_BYTE *)(a1 + 290))
      {
        v15 = 0;
        v16 = 0;
LABEL_17:
        time1 = *v4;
        time2 = *(CMTime *)(a1 + 116);
        if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
          *(_BYTE *)(a1 + 290) = 1;
        if (*(_BYTE *)(a1 + 288) || *(_BYTE *)(a1 + 290))
        {
          if (!*(_BYTE *)(a1 + 291))
          {
            CMNotificationCenterGetDefaultLocalCenter();
            CMNotificationCenterPostNotification();
            *(_BYTE *)(a1 + 291) = 1;
          }
          LODWORD(v13) = 0;
          *(_BYTE *)(a1 + 75) = 0;
        }
        else
        {
          LODWORD(v13) = 0;
        }
        goto LABEL_24;
      }
      theBuffer.value = 0;
      cf.value = 0;
      dataPointerOut = 0;
      if (*(_DWORD *)(a1 + 184) == 1819304813)
        v17 = (*(unsigned __int8 *)(a1 + 188) >> 5) & 1;
      else
        LOBYTE(v17) = 0;
      v18 = *(_DWORD *)(a1 + 196);
      if (v18)
      {
        v19 = v18 * v124;
        v20 = *(_QWORD *)(a1 + 224);
        *(_OWORD *)(v20 + 48) = v108;
        *(_QWORD *)(v20 + 64) = epoch;
        v21 = *(_QWORD *)(a1 + 224);
        v22 = v4->epoch;
        *(_OWORD *)(v21 + 24) = *(_OWORD *)&v4->value;
        *(_QWORD *)(v21 + 40) = v22;
        v23 = *(_QWORD *)(a1 + 224);
        CMTimeMake(&time1, *(unsigned int *)(a1 + 196), *(_DWORD *)(a1 + 88));
        v24 = *(_OWORD *)&time1.value;
        *(_QWORD *)(v23 + 16) = time1.epoch;
        *(_OWORD *)v23 = v24;
        v25 = 1;
      }
      else
      {
        numSampleTimingEntries = v17;
        v26 = 0;
        v19 = 0;
        time1 = *v4;
        v27 = 8;
        v28 = v124;
        do
        {
          v19 += *(unsigned int *)(*(_QWORD *)(a1 + 216) + v27);
          v29 = *(_QWORD *)(a1 + 224) + v26;
          *(_OWORD *)(v29 + 48) = v108;
          *(_QWORD *)(v29 + 64) = epoch;
          v30 = *(_QWORD *)(a1 + 224) + v26;
          v31 = time1.epoch;
          *(_OWORD *)(v30 + 24) = *(_OWORD *)&time1.value;
          *(_QWORD *)(v30 + 40) = v31;
          v32 = *(_QWORD *)(a1 + 224) + v26;
          CMTimeMake(&time2, *(unsigned int *)(*(_QWORD *)(a1 + 216) + v27), *(_DWORD *)(a1 + 88));
          v33 = *(_OWORD *)&time2.value;
          *(_QWORD *)(v32 + 16) = time2.epoch;
          *(_OWORD *)v32 = v33;
          v34 = (__int128 *)(*(_QWORD *)(a1 + 224) + v26);
          time2 = time1;
          v35 = *v34;
          type.epoch = *((_QWORD *)v34 + 2);
          *(_OWORD *)&type.value = v35;
          CMTimeAdd(&time1, &time2, &type);
          v26 += 72;
          v27 += 16;
          --v28;
        }
        while (v28);
        v25 = v14;
        LOBYTE(v17) = numSampleTimingEntries;
      }
      v36 = *(unsigned int *)(a1 + 192);
      numSampleTimingEntriesa = v25;
      if ((_DWORD)v36)
      {
        v37 = (v36 * v14);
        if ((v17 & 1) != 0)
        {
          numSampleSizeEntries = 0;
        }
        else
        {
          **(_QWORD **)(a1 + 232) = v36;
          numSampleSizeEntries = 1;
        }
      }
      else
      {
        v37 = 0;
        v39 = *(_QWORD **)(a1 + 232);
        v40 = (unsigned int *)(*(_QWORD *)(a1 + 216) + 12);
        v41 = v14;
        do
        {
          v42 = *v40;
          v40 += 4;
          v37 += v42;
          *v39++ = v42;
          --v41;
        }
        while (v41);
        numSampleSizeEntries = v14;
      }
      v43 = **(int **)(a1 + 248);
      DataPointer = CMBlockBufferCreateWithMemoryBlock(*(CFAllocatorRef *)(a1 + 40), 0, v37 * v43, *(CFAllocatorRef *)(a1 + 40), 0, 0, v37 * v43, 0, (CMBlockBufferRef *)&theBuffer);
      if (DataPointer
        || (DataPointer = CMBlockBufferAssureBlockMemory((CMBlockBufferRef)theBuffer.value)) != 0
        || (DataPointer = CMBlockBufferGetDataPointer((CMBlockBufferRef)theBuffer.value, 0, 0, 0, &dataPointerOut)) != 0)
      {
        LODWORD(v13) = DataPointer;
        v15 = 0;
        v19 = 0;
        v49 = v106;
        goto LABEL_68;
      }
      if ((int)v43 >= 1)
      {
        v45 = 0;
        v46 = dataPointerOut;
        v47 = 16 * v43;
        do
        {
          memcpy(v46, *(const void **)(*(_QWORD *)(a1 + 248) + v45 + 16), v37);
          v46 = &dataPointerOut[v37];
          dataPointerOut += v37;
          v45 += 16;
        }
        while (v47 != v45);
      }
      v48 = CMSampleBufferCreate(*(CFAllocatorRef *)(a1 + 40), (CMBlockBufferRef)theBuffer.value, 1u, 0, 0, *(CMFormatDescriptionRef *)(a1 + 168), v14, numSampleTimingEntriesa, *(const CMSampleTimingInfo **)(a1 + 224), numSampleSizeEntries, *(const size_t **)(a1 + 232), (CMSampleBufferRef *)&cf);
      v49 = v106;
      if (v48)
      {
        LODWORD(v13) = v48;
        v15 = 0;
        v19 = 0;
        goto LABEL_68;
      }
      v50 = (float)v19 / (float)*(int *)(a1 + 88);
      v51 = *(_DWORD *)(a1 + 408);
      *(_DWORD *)(a1 + 408) = v51 + 1;
      if (v51 >= 10)
      {
        v52 = v50 + *(float *)(a1 + 412);
        *(float *)(a1 + 412) = v52;
        if (v52 < 1.0)
        {
          v53 = 3;
LABEL_60:
          if (v53 <= dword_1EE2A3228)
          {
            LODWORD(type.value) = 0;
            v125 = OS_LOG_TYPE_DEFAULT;
            v54 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            value = type.value;
            if (os_log_type_enabled(v54, v125))
              v56 = value;
            else
              v56 = value & 0xFFFFFFFE;
            if (v56)
            {
              v94 = *(_DWORD *)(a1 + 408);
              numSampleTimingEntriesb = cf.value;
              v57 = v50;
              *(_OWORD *)&time1.value = *v105;
              time1.epoch = *(_QWORD *)(a1 + 108);
              Seconds = CMTimeGetSeconds(&time1);
              *(_OWORD *)&time1.value = *v105;
              time1.epoch = *(_QWORD *)(a1 + 108);
              v59 = CMTimeGetSeconds(&time1);
              LODWORD(time2.value) = 136317442;
              *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"aqOfflineMixer_createSampleBuffer";
              LOWORD(time2.flags) = 2048;
              *(_QWORD *)((char *)&time2.flags + 2) = a1;
              HIWORD(time2.epoch) = 2082;
              v129 = a1 + 396;
              v130 = 1024;
              v131 = v94;
              v132 = 2048;
              *(_QWORD *)v133 = numSampleTimingEntriesb;
              *(_WORD *)&v133[8] = 2048;
              v134 = v57;
              *(_WORD *)v135 = 2048;
              *(Float64 *)&v135[2] = Seconds;
              v136 = 2048;
              v137 = v59 + v57;
              v138 = 1024;
              *(_DWORD *)v139 = v14;
              *(_WORD *)&v139[4] = 1024;
              *(_DWORD *)&v139[6] = v19;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v49 = v106;
          }
          LODWORD(v13) = 0;
          v15 = (opaqueCMSampleBuffer *)cf.value;
          cf.value = 0;
LABEL_68:
          if (theBuffer.value)
            CFRelease((CFTypeRef)theBuffer.value);
          if (cf.value)
            CFRelease((CFTypeRef)cf.value);
          if ((_DWORD)v13)
          {
            v16 = 0;
            goto LABEL_92;
          }
          CMTimeMake(&v123, v19, *(_DWORD *)(a1 + 88));
          *(_OWORD *)&time2.value = *v105;
          time2.epoch = *(_QWORD *)(a1 + 108);
          type = v123;
          CMTimeAdd(&time1, &time2, &type);
          *v105 = *(_OWORD *)&time1.value;
          *(_QWORD *)(a1 + 108) = time1.epoch;
          cf.value = 0;
          if ((*(_BYTE *)(a1 + 384) & 1) == 0)
          {
            if (CFArrayGetCount(*(CFArrayRef *)(a1 + 264)) == 1)
            {
              ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 264), 0);
              v61 = CFGetAllocator(ValueAtIndex);
              if (!FigAudioQueueCopyProperty((uint64_t)ValueAtIndex, CFSTR("DynamicLatency"), v61, &cf))
              {
                CMTimeMakeFromDictionary(&time1, (CFDictionaryRef)cf.value);
                theBuffer.value = time1.value;
                flags = time1.flags;
                theBuffer.timescale = time1.timescale;
                if ((time1.flags & 1) != 0)
                {
                  v63 = time1.epoch;
                  *v100 = theBuffer.value;
                  *(_DWORD *)(a1 + 380) = theBuffer.timescale;
                  *(_DWORD *)(a1 + 384) = flags;
                  v49[2].epoch = v63;
                  if (*(_DWORD *)(a1 + 184) == 1819304813)
                  {
                    v101->value = theBuffer.value;
                    v101->timescale = theBuffer.timescale;
                    *(_DWORD *)(a1 + 360) = flags;
                    v49[1].epoch = v63;
                  }
                  else
                  {
                    time2 = *(CMTime *)(a1 + 300);
                    *(_OWORD *)&type.value = *(_OWORD *)v100;
                    type.epoch = *(_QWORD *)(a1 + 388);
                    CMTimeAdd(&time1, &time2, &type);
                    *v49 = time1;
                  }
                }
              }
            }
            if (cf.value)
              CFRelease((CFTypeRef)cf.value);
          }
          if (*(_DWORD *)(a1 + 184) == 1819304813)
          {
            if ((*(_BYTE *)(a1 + 360) & 1) != 0 && v101->value >= 1)
            {
              theBuffer.value = 0;
              time1 = *v101;
              time2 = v123;
              CMTimeMinimum(&v122, &time1, &time2);
              time2 = *v101;
              type = v122;
              CMTimeSubtract(&time1, &time2, &type);
              *v101 = time1;
              CMSampleBufferGetNumSamples(v15);
              memset(&time1, 0, sizeof(time1));
              CMSampleBufferGetOutputDuration(&time1, v15);
              v64 = (int)*(double *)(a1 + 176);
              time2 = v122;
              CMTimeConvertScale(&v117, &time2, v64, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
              v65 = v117.value;
              NumSamples = CMSampleBufferGetNumSamples(v15);
              v13 = NumSamples - v65;
              if (NumSamples == v65)
              {
                v4 = (CMTime *)(a1 + 92);
LABEL_94:
                v16 = 0;
                goto LABEL_24;
              }
              v70 = CFGetAllocator(v15);
              v146.location = v65;
              v146.length = v13;
              LODWORD(v13) = CMSampleBufferCopySampleBufferForRange(v70, v15, v146, (CMSampleBufferRef *)&theBuffer);
              v4 = (CMTime *)(a1 + 92);
              if ((_DWORD)v13)
                goto LABEL_94;
              v67 = (opaqueCMSampleBuffer *)theBuffer.value;
              if (theBuffer.value)
                CFRetain((CFTypeRef)theBuffer.value);
              if (v15)
                CFRelease(v15);
              if (theBuffer.value)
                CFRelease((CFTypeRef)theBuffer.value);
            }
            else
            {
              v67 = v15;
            }
            if ((*(_BYTE *)(a1 + 384) & 1) != 0)
            {
              memset(&time1, 0, sizeof(time1));
              CMSampleBufferGetOutputPresentationTimeStamp(&time1, v67);
              memset(&time2, 0, sizeof(time2));
              CMSampleBufferGetPresentationTimeStamp(&time2, v67);
              memset(&type, 0, sizeof(type));
              CMTimeMake(&type, *(unsigned int *)(a1 + 196), *(_DWORD *)(a1 + 88));
              CMSampleBufferGetPresentationTimeStamp(&lhs, v67);
              *(_OWORD *)&cf.value = *(_OWORD *)v100;
              cf.epoch = *(_QWORD *)(a1 + 388);
              CMTimeSubtract(&theBuffer, &lhs, &cf);
              sampleTimingArray.presentationTimeStamp = theBuffer;
              *(_OWORD *)&sampleTimingArray.decodeTimeStamp.value = v108;
              sampleTimingArray.decodeTimeStamp.epoch = epoch;
              sampleTimingArray.duration = type;
              theBuffer.value = 0;
              v68 = CFGetAllocator(v67);
              v69 = CMSampleBufferCreateCopyWithNewTiming(v68, v67, 1, &sampleTimingArray, (CMSampleBufferRef *)&theBuffer);
              if (v69)
              {
                LODWORD(v13) = v69;
                v16 = 0;
                v15 = v67;
                goto LABEL_92;
              }
              v15 = (opaqueCMSampleBuffer *)theBuffer.value;
              if (theBuffer.value)
                CFRetain((CFTypeRef)theBuffer.value);
              if (v67)
                CFRelease(v67);
              if (theBuffer.value)
                CFRelease((CFTypeRef)theBuffer.value);
              CMSampleBufferGetOutputSampleTimingInfoArray(v15, 1, &sampleTimingArray, &timingArrayEntriesNeededOut);
            }
            else
            {
              v15 = v67;
            }
            v49 = v106;
          }
          if ((*(_BYTE *)(a1 + 360) & 1) != 0 && v101->value || v49->value < 1)
          {
            v16 = 0;
            goto LABEL_109;
          }
          time1 = *v49;
          time2 = v123;
          CMTimeMinimum(&v121, &time1, &time2);
          time2 = *v49;
          type = v121;
          CMTimeSubtract(&time1, &time2, &type);
          *v49 = time1;
          time1 = v121;
          v16 = CMTimeCopyAsDictionary(&time1, allocator);
          if (v16)
          {
            CMSetAttachment(v15, key, v16, 1u);
LABEL_109:
            v4 = (CMTime *)(a1 + 92);
            v71 = *(_QWORD *)(a1 + 32);
            v72 = *(void (**)(uint64_t, opaqueCMSampleBuffer *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 8);
            if (v72)
              v72(v71, v15);
            ++*(_DWORD *)(a1 + 416);
            CMSampleBufferGetPresentationTimeStamp(&v114, v15);
            if ((v114.flags & 1) != 0)
            {
              CMSampleBufferGetDuration(&v113, v15);
              if ((v113.flags & 1) != 0)
              {
                if ((*(_BYTE *)(a1 + 432) & 1) == 0)
                {
                  CMSampleBufferGetPresentationTimeStamp(&time1, v15);
                  *v97 = *(_OWORD *)&time1.value;
                  *(_QWORD *)(a1 + 436) = time1.epoch;
                }
                CMSampleBufferGetPresentationTimeStamp(&v112, v15);
                CMSampleBufferGetDuration(&rhs, v15);
                CMTimeAdd(&time1, &v112, &rhs);
                *v99 = *(_OWORD *)&time1.value;
                *(_QWORD *)(a1 + 460) = time1.epoch;
                CMSampleBufferGetDuration(&v110, v15);
                *(_OWORD *)&time2.value = *v98;
                time2.epoch = *(_QWORD *)(a1 + 484);
                CMTimeAdd(&time1, &time2, &v110);
                *v98 = *(_OWORD *)&time1.value;
                *(_QWORD *)(a1 + 484) = time1.epoch;
              }
            }
            if ((*(_BYTE *)(a1 + 152) & 1) != 0)
            {
              time1 = *(CMTime *)(a1 + 140);
              *(_OWORD *)&time2.value = *v105;
              time2.epoch = *(_QWORD *)(a1 + 108);
              if (aqOfflineMixer_passedTimelineMilestone(a1, &time1, &time2))
                aqOfflineMixer_postMilestoneNotification(a1);
            }
            goto LABEL_17;
          }
          LODWORD(v13) = FigSignalErrorAt();
LABEL_92:
          v4 = (CMTime *)(a1 + 92);
LABEL_24:
          if (v15)
            CFRelease(v15);
          if (v16)
            CFRelease(v16);
          v5 = (CMTime *)MEMORY[0x1E0CA2E18];
          goto LABEL_29;
        }
        *(float *)(a1 + 412) = v52 + -1.0;
      }
      v53 = 1;
      goto LABEL_60;
    }
LABEL_29:
    if (!v124)
      break;
    if ((_DWORD)v13)
    {
      MEMORY[0x19402EF04](*(_QWORD *)(a1 + 80));
      MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 80));
    }
  }
  if ((_DWORD)v13)
  {
LABEL_130:
    v73 = 0;
    goto LABEL_131;
  }
  v73 = *(_BYTE *)(a1 + 288) == 0;
LABEL_131:
  if (dword_1EE2A3228)
  {
    LODWORD(sampleTimingArray.duration.value) = 0;
    LOBYTE(type.value) = 0;
    v74 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v75 = sampleTimingArray.duration.value;
    if (os_log_type_enabled(v74, type.value))
      v76 = v75;
    else
      v76 = v75 & 0xFFFFFFFE;
    if (v76)
    {
      v107 = *(unsigned __int8 *)(a1 + 75);
      v109 = *(unsigned __int8 *)(a1 + 289);
      v77 = *(_QWORD *)(a1 + 32);
      v78 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v78)
        v79 = v78(v77);
      else
        v79 = 0;
      v80 = *(_QWORD *)(a1 + 32);
      v81 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (v81)
        v82 = v81(v80);
      else
        v82 = 0;
      v83 = *(unsigned __int8 *)(a1 + 290);
      v84 = *(unsigned __int8 *)(a1 + 74);
      *(_OWORD *)&time1.value = *v98;
      time1.epoch = *(_QWORD *)(a1 + 484);
      v85 = CMTimeGetSeconds(&time1);
      *(_OWORD *)&time1.value = *v97;
      time1.epoch = *(_QWORD *)(a1 + 436);
      v86 = CMTimeGetSeconds(&time1);
      *(_OWORD *)&time1.value = *v99;
      time1.epoch = *(_QWORD *)(a1 + 460);
      v87 = CMTimeGetSeconds(&time1);
      v88 = *(_DWORD *)(a1 + 416);
      LODWORD(time2.value) = 136318210;
      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"aqOfflineMixer_processUntilHighWaterMet";
      LOWORD(time2.flags) = 2048;
      *(_QWORD *)((char *)&time2.flags + 2) = a1;
      HIWORD(time2.epoch) = 2082;
      v129 = a1 + 396;
      v130 = 1024;
      v131 = v107;
      v132 = 1024;
      *(_DWORD *)v133 = v109;
      *(_WORD *)&v133[4] = 1024;
      *(_DWORD *)&v133[6] = v79;
      LOWORD(v134) = 1024;
      *(_DWORD *)((char *)&v134 + 2) = v82;
      HIWORD(v134) = 1024;
      *(_DWORD *)v135 = v83;
      *(_WORD *)&v135[4] = 1024;
      *(_DWORD *)&v135[6] = v84;
      v136 = 2048;
      v137 = v85;
      v138 = 2048;
      *(Float64 *)v139 = v86;
      *(_WORD *)&v139[8] = 2048;
      v140 = v87;
      v141 = 1024;
      v142 = v88;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  result = MEMORY[0x19402EF04](*(_QWORD *)(a1 + 80));
  if (v73)
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 24));
    if (*(_BYTE *)(a1 + 16))
      return MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
    v90 = *(const __CFArray **)(a1 + 280);
    if (v90 && CFArrayGetCount(v90))
    {
      return MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
    }
    else
    {
      v91 = *(const __CFArray **)(a1 + 264);
      if (v91)
      {
        v92.length = CFArrayGetCount(v91);
        v93 = *(const __CFArray **)(a1 + 264);
      }
      else
      {
        v93 = 0;
        v92.length = 0;
      }
      v92.location = 0;
      CFArrayAppendArray(*(CFMutableArrayRef *)(a1 + 280), v93, v92);
      MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
      CMNotificationCenterGetDefaultLocalCenter();
      return CMNotificationCenterPostNotification();
    }
  }
  return result;
}

uint64_t aqOfflineMixer_outputBelowLowWater(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v3;

  if (dword_1EE2A3228)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(_BYTE *)(a1 + 16))
    return aqOfflineMixer_triggerSchedulingIfOutputIsLow(a1);
  v3 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  return fig_log_call_emit_and_clean_up_after_send_and_compose();
}

uint64_t FigAudioQueueOfflineMixerSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t FigBaseObject;
  uint64_t (*v7)(uint64_t, __CFString *, const void *);
  __CFString **v8;
  uint64_t v9;
  CFTypeID TypeID;
  const void *v12;
  CFTypeID v13;
  uint64_t v14;
  CFTypeID v15;
  CFTypeID v16;
  CFTypeID v17;
  CFTypeID v18;
  CFTypeID v19;
  CMTime v20;
  CMTime v21;
  CMTime valuePtr;

  if (!a1)
    return FigSignalErrorAt();
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 24));
  if (*(_BYTE *)(a1 + 16))
    goto LABEL_44;
  if (!CFEqual(a2, CFSTR("AudioQueueOfflineMixer_ClientPID")))
  {
    if (CFEqual(a2, CFSTR("AudioQueueOfflineMixer_SampleBufferAllocator")))
    {
      if (!a3)
      {
        v12 = *(const void **)(a1 + 40);
        *(_QWORD *)(a1 + 40) = 0;
LABEL_18:
        if (v12)
          CFRelease(v12);
        goto LABEL_20;
      }
      TypeID = CFAllocatorGetTypeID();
      if (TypeID == CFGetTypeID(a3))
      {
        v12 = *(const void **)(a1 + 40);
        *(_QWORD *)(a1 + 40) = a3;
        CFRetain(a3);
        goto LABEL_18;
      }
    }
    else if (CFEqual(a2, CFSTR("AudioQueueOfflineMixer_ThrottleForBackground")))
    {
      v13 = CFBooleanGetTypeID();
      if (v13 == CFGetTypeID(a3))
      {
        *(_BYTE *)(a1 + 73) = CFBooleanGetValue((CFBooleanRef)a3);
        FigBaseObject = FigActivitySchedulerGetFigBaseObject(*(_QWORD *)(a1 + 64));
        v7 = *(uint64_t (**)(uint64_t, __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
        if (v7)
        {
          v8 = kFigActivitySchedulerProperty_ThrottleForBackground;
          goto LABEL_6;
        }
        goto LABEL_16;
      }
    }
    else if (CFEqual(a2, CFSTR("AudioQueueOfflineMixer_TimelineMilestone")))
    {
      v15 = CFDictionaryGetTypeID();
      if (v15 == CFGetTypeID(a3))
      {
        memset(&valuePtr, 0, sizeof(valuePtr));
        CMTimeMakeFromDictionary(&valuePtr, (CFDictionaryRef)a3);
        if ((*(_BYTE *)(a1 + 152) & 1) == 0 || (valuePtr.flags & 1) == 0)
        {
          *(CMTime *)(a1 + 140) = valuePtr;
          if ((*(_BYTE *)(a1 + 104) & 1) != 0)
          {
            v21 = valuePtr;
            v20 = *(CMTime *)(a1 + 92);
            if (aqOfflineMixer_passedTimelineMilestone(a1, &v21, &v20))
              aqOfflineMixer_postMilestoneNotification(a1);
          }
          goto LABEL_20;
        }
      }
    }
    else
    {
      if (!CFEqual(a2, CFSTR("AudioQueueOfflineMixer_TimelineMilestoneAllowance")))
      {
        if (CFEqual(a2, CFSTR("AudioQueueOfflineMixer_CodecQuality")))
        {
          if (!a3)
            goto LABEL_44;
          v17 = CFNumberGetTypeID();
          if (v17 != CFGetTypeID(a3))
            goto LABEL_44;
        }
        else
        {
          if (!CFEqual(a2, CFSTR("AudioQueueOfflineMixer_BitRateForVBR")))
          {
            if (!CFEqual(a2, CFSTR("AudioQueueOfflineMixer_ThreadPriority")))
            {
              v14 = 4294954512;
              goto LABEL_46;
            }
            if (a3)
            {
              v19 = CFNumberGetTypeID();
              if (v19 == CFGetTypeID(a3))
              {
                v9 = FigActivitySchedulerSetProperty(*(_QWORD *)(a1 + 64), (uint64_t)CFSTR("ThreadPriority"), (uint64_t)a3);
                goto LABEL_45;
              }
            }
            goto LABEL_44;
          }
          if (!a3)
            goto LABEL_44;
          v18 = CFNumberGetTypeID();
          if (v18 != CFGetTypeID(a3))
            goto LABEL_44;
        }
        LODWORD(valuePtr.value) = 0;
        CFNumberGetValue((CFNumberRef)a3, kCFNumberIntType, &valuePtr);
        v9 = AQOfflineMixerSetProperty();
        goto LABEL_45;
      }
      if (a3)
      {
        v16 = CFNumberGetTypeID();
        if (v16 == CFGetTypeID(a3))
        {
          CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, (void *)(a1 + 296));
LABEL_20:
          v14 = 0;
          goto LABEL_46;
        }
      }
    }
LABEL_44:
    v9 = FigSignalErrorAt();
    goto LABEL_45;
  }
  FigBaseObject = FigActivitySchedulerGetFigBaseObject(*(_QWORD *)(a1 + 64));
  v7 = *(uint64_t (**)(uint64_t, __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v7)
  {
    v8 = kFigActivitySchedulerProperty_ClientPID;
LABEL_6:
    v9 = v7(FigBaseObject, *v8, a3);
LABEL_45:
    v14 = v9;
    goto LABEL_46;
  }
LABEL_16:
  v14 = 4294954514;
LABEL_46:
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
  return v14;
}

BOOL aqOfflineMixer_passedTimelineMilestone(uint64_t a1, CMTime *a2, CMTime *a3)
{
  CMTime v5;
  CMTime rhs;
  CMTime lhs;
  CMTime v8;

  memset(&v8, 0, sizeof(v8));
  lhs = *a3;
  rhs = *a2;
  CMTimeSubtract(&v8, &lhs, &rhs);
  memset(&lhs, 0, sizeof(lhs));
  CMTimeMake(&lhs, *(int *)(a1 + 296), 1000);
  rhs = v8;
  v5 = lhs;
  return CMTimeCompare(&rhs, &v5) >= 0;
}

__n128 aqOfflineMixer_postMilestoneNotification(uint64_t a1)
{
  uint64_t MutableCopy;
  _OWORD *v3;
  const void *v4;
  uint64_t v5;
  __n128 result;
  uint64_t v7;

  MutableCopy = FigCFDictionaryCreateMutableCopy();
  v3 = (_OWORD *)(a1 + 140);
  if (MutableCopy)
  {
    v4 = (const void *)MutableCopy;
    FigCFDictionarySetCMTime();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    v5 = MEMORY[0x1E0CA2E18];
    *v3 = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)(a1 + 156) = *(_QWORD *)(v5 + 16);
    CFRelease(v4);
  }
  else
  {
    v7 = MEMORY[0x1E0CA2E18];
    result = *(__n128 *)MEMORY[0x1E0CA2E18];
    *v3 = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)(a1 + 156) = *(_QWORD *)(v7 + 16);
  }
  return result;
}

uint64_t FigAudioQueueOfflineMixerConnectAudioQueue(uint64_t a1, const void *a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v5;

  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 24));
  if (*(_BYTE *)(a1 + 16))
  {
    v5 = FigSignalErrorAt();
  }
  else
  {
    if (dword_1EE2A3228)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v5 = AQOfflineMixerConnectAudioQueue();
    if (!(_DWORD)v5)
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 264), a2);
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 272), a2);
      *(_BYTE *)(a1 + 289) = 0;
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListeners();
    }
  }
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
  return v5;
}

uint64_t FigAudioQueueOfflineMixerDisconnectAudioQueue(uint64_t a1, const void *a2)
{
  const __CFArray *v4;
  CFIndex FirstIndexOfValue;
  CFIndex v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v8;
  uint64_t v9;
  const __CFArray *v10;
  const __CFArray *v11;
  CFIndex v12;
  const __CFArray *v13;
  CFIndex v14;
  CFRange v16;
  CFRange v17;
  CFRange v18;
  CFRange v19;

  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 24));
  if (*(_BYTE *)(a1 + 16)
    || (v4 = *(const __CFArray **)(a1 + 264),
        v16.length = CFArrayGetCount(v4),
        v16.location = 0,
        FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v4, v16, a2),
        FirstIndexOfValue == -1))
  {
    v8 = FigSignalErrorAt();
LABEL_6:
    v9 = v8;
    goto LABEL_15;
  }
  v6 = FirstIndexOfValue;
  if (dword_1EE2A3228)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v8 = AQOfflineMixerDisconnectAudioQueue();
  if ((_DWORD)v8)
    goto LABEL_6;
  CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 264), v6);
  v10 = *(const __CFArray **)(a1 + 264);
  v17.length = CFArrayGetCount(v10);
  v17.location = 0;
  if (!CFArrayContainsValue(v10, v17, a2))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListeners();
  }
  v11 = *(const __CFArray **)(a1 + 272);
  v18.length = CFArrayGetCount(v11);
  v18.location = 0;
  v12 = CFArrayGetFirstIndexOfValue(v11, v18, a2);
  if (v12 != -1)
  {
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 272), v12);
    *(_BYTE *)(a1 + 289) = CFArrayGetCount(*(CFArrayRef *)(a1 + 272)) == 0;
  }
  v13 = *(const __CFArray **)(a1 + 280);
  v19.length = CFArrayGetCount(v13);
  v19.location = 0;
  v14 = CFArrayGetFirstIndexOfValue(v13, v19, a2);
  if (v14 != -1)
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 280), v14);
  v9 = 0;
LABEL_15:
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
  return v9;
}

uint64_t FigAudioQueueOfflineMixerStartRenderingForTimeRange(uint64_t a1, CMTime *a2, CMTime *a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int32_t v7;
  int32_t v8;
  uint64_t v9;
  uint64_t v10;
  CMTime rhs;
  os_log_type_t type;
  CMTime time2;
  CMTime time1;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 24));
  if (*(_BYTE *)(a1 + 16))
    goto LABEL_11;
  if ((a2->flags & 0x1D) != 1)
    goto LABEL_11;
  time1 = *a3;
  time2 = *a2;
  if (CMTimeCompare(&time1, &time2) <= 0)
    goto LABEL_11;
  if (dword_1EE2A3228)
  {
    LODWORD(rhs.value) = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v7 = *(_DWORD *)(a1 + 88);
  time2 = *a2;
  CMTimeConvertScale(&time1, &time2, v7, kCMTimeRoundingMethod_RoundTowardZero);
  *(CMTime *)(a1 + 92) = time1;
  v8 = *(_DWORD *)(a1 + 88);
  time2 = *a3;
  CMTimeConvertScale(&time1, &time2, v8, kCMTimeRoundingMethod_RoundAwayFromZero);
  *(CMTime *)(a1 + 116) = time1;
  *(_BYTE *)(a1 + 290) = 0;
  if (*(uint64_t *)(a1 + 324) >= 1)
  {
    time2 = *(CMTime *)(a1 + 92);
    rhs = *(CMTime *)(a1 + 324);
    CMTimeSubtract(&time1, &time2, &rhs);
    *(CMTime *)(a1 + 92) = time1;
  }
  if ((*(_DWORD *)(a1 + 104) & 0x1D) == 1)
    v9 = FigAudioQueueOfflineMixerGo(a1);
  else
LABEL_11:
    v9 = FigSignalErrorAt();
  v10 = v9;
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
  return v10;
}

uint64_t FigAudioQueueOfflineMixerGo(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  if (dword_1EE2A3228)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 24));
  if (*(_BYTE *)(a1 + 16))
  {
    v5 = FigSignalErrorAt();
  }
  else
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 80));
    *(_BYTE *)(a1 + 75) = 1;
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 80));
    v3 = *(_QWORD *)(a1 + 64);
    v4 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v4)
      v4(v3);
    v5 = 0;
  }
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
  return v5;
}

uint64_t FigAudioQueueOfflineMixerInterruptAndStop(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v3;

  if (!a1)
    return FigSignalErrorAt();
  if (dword_1EE2A3228)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 24));
  if (*(_BYTE *)(a1 + 16))
  {
    v3 = FigSignalErrorAt();
  }
  else
  {
    *(_BYTE *)(a1 + 74) = 1;
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 80));
    *(_BYTE *)(a1 + 75) = 0;
    *(_BYTE *)(a1 + 74) = 0;
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 80));
    v3 = 0;
  }
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
  return v3;
}

uint64_t FigAudioQueueOfflineMixerReset(uint64_t a1, int a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  const __CFArray *v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  __int128 v19;

  if (dword_1EE2A3228)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 24));
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 80));
  if (*(_BYTE *)(a1 + 16))
  {
    v5 = FigSignalErrorAt();
    goto LABEL_17;
  }
  v5 = AQOfflineMixerReset();
  if ((_DWORD)v5)
    goto LABEL_17;
  *(_OWORD *)(a1 + 324) = *(_OWORD *)(a1 + 300);
  *(_QWORD *)(a1 + 340) = *(_QWORD *)(a1 + 316);
  v6 = MEMORY[0x1E0CA2E18];
  v7 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)(a1 + 372) = *MEMORY[0x1E0CA2E18];
  v8 = *(_QWORD *)(v6 + 16);
  *(_QWORD *)(a1 + 388) = v8;
  v19 = v7;
  *(_OWORD *)(a1 + 348) = v7;
  *(_QWORD *)(a1 + 364) = v8;
  v9 = *(const __CFArray **)(a1 + 264);
  if (v9)
  {
    Count = CFArrayGetCount(v9);
    if (Count >= 1)
    {
      v11 = Count;
      for (i = 0; i != v11; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 264), i);
        FigAudioQueueRestoreParameters((uint64_t)ValueAtIndex);
      }
    }
  }
  if (!a2)
    goto LABEL_13;
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  if (!v15)
  {
    v17 = 4294954514;
    goto LABEL_15;
  }
  v5 = v15(v14);
  if ((_DWORD)v5)
  {
LABEL_17:
    v17 = v5;
    goto LABEL_15;
  }
  *(_DWORD *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 420) = v19;
  *(_QWORD *)(a1 + 436) = v8;
  *(_OWORD *)(a1 + 444) = v19;
  *(_QWORD *)(a1 + 460) = v8;
  v16 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)(a1 + 468) = *MEMORY[0x1E0CA2E68];
  *(_QWORD *)(a1 + 484) = *(_QWORD *)(v16 + 16);
LABEL_13:
  v17 = 0;
  *(_BYTE *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 75) = 0;
  *(_WORD *)(a1 + 290) = 0;
  *(_OWORD *)(a1 + 92) = v19;
  *(_QWORD *)(a1 + 108) = v8;
  *(_OWORD *)(a1 + 116) = v19;
  *(_QWORD *)(a1 + 132) = v8;
  *(_OWORD *)(a1 + 140) = v19;
  *(_QWORD *)(a1 + 156) = v8;
  *(_BYTE *)(a1 + 289) = 0;
LABEL_15:
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 80));
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
  return v17;
}

uint64_t aqOfflineMixer_faqDidEnqueueData(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v7;
  const __CFArray *v8;
  uint64_t Count;
  CFRange v10;
  CFIndex FirstIndexOfValue;

  MEMORY[0x19402EA0C](*(_QWORD *)(a2 + 24));
  if (dword_1EE2A3228)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_BYTE *)(a2 + 16))
  {
    v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    v8 = *(const __CFArray **)(a2 + 280);
    if (v8)
    {
      Count = CFArrayGetCount(v8);
      if (a4)
      {
        v10.length = Count;
        if (Count >= 1)
        {
          v10.location = 0;
          FirstIndexOfValue = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(a2 + 280), v10, a4);
          if (FirstIndexOfValue != -1)
            CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a2 + 280), FirstIndexOfValue);
        }
      }
    }
    aqOfflineMixer_triggerSchedulingIfOutputIsLow(a2);
  }
  return MEMORY[0x19402EA24](*(_QWORD *)(a2 + 24));
}

uint64_t aqOfflineMixer_faqDidStart(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v7;
  const __CFArray *v8;
  CFIndex FirstIndexOfValue;
  CFIndex i;
  const __CFArray *v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  CFRange v15;
  CFRange v16;

  MEMORY[0x19402EA0C](*(_QWORD *)(a2 + 24));
  if (dword_1EE2A3228)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_BYTE *)(a2 + 16))
  {
    v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    v8 = *(const __CFArray **)(a2 + 272);
    v15.length = CFArrayGetCount(v8);
    v15.location = 0;
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v8, v15, a4);
    if (FirstIndexOfValue != -1)
    {
      for (i = FirstIndexOfValue; i != -1; i = CFArrayGetFirstIndexOfValue(v11, v16, a4))
      {
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a2 + 272), i);
        v11 = *(const __CFArray **)(a2 + 272);
        v16.length = CFArrayGetCount(v11);
        v16.location = 0;
      }
    }
    *(_BYTE *)(a2 + 289) = CFArrayGetCount(*(CFArrayRef *)(a2 + 272)) == 0;
    if (*(_BYTE *)(a2 + 75))
    {
      if (*(_BYTE *)(a2 + 289))
      {
        v12 = *(_QWORD *)(a2 + 64);
        v13 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (v13)
          v13(v12);
      }
    }
  }
  return MEMORY[0x19402EA24](*(_QWORD *)(a2 + 24));
}

uint64_t aqOfflineMixer_triggerSchedulingIfOutputIsLow(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t (*v6)(uint64_t);

  v2 = *(_QWORD *)(a1 + 32);
  result = CMBaseObjectGetVTable();
  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 24);
  if (v4)
  {
    result = v4(v2);
    if ((_DWORD)result)
    {
      v5 = *(_QWORD *)(a1 + 64);
      result = CMBaseObjectGetVTable();
      v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 16);
      if (v6)
        return v6(v5);
    }
  }
  return result;
}

double aqOfflineMixer_Init(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[29] = 0u;
  a1[30] = 0u;
  a1[27] = 0u;
  a1[28] = 0u;
  a1[25] = 0u;
  a1[26] = 0u;
  a1[23] = 0u;
  a1[24] = 0u;
  a1[21] = 0u;
  a1[22] = 0u;
  a1[19] = 0u;
  a1[20] = 0u;
  a1[17] = 0u;
  a1[18] = 0u;
  a1[15] = 0u;
  a1[16] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

uint64_t aqOfflineMixer_Finalize(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v3;
  _DWORD *v4;
  unint64_t v5;
  uint64_t v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  uint64_t result;

  if (dword_1EE2A3228)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  FigAudioQueueOfflineMixerInvalidate(a1);
  v3 = *(const void **)(a1 + 64);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 64) = 0;
  }
  if (*(_QWORD *)(a1 + 256))
  {
    AQOfflineMixerDispose();
    *(_QWORD *)(a1 + 256) = 0;
  }
  v4 = *(_DWORD **)(a1 + 248);
  if (v4)
  {
    if (*v4)
    {
      v5 = 0;
      v6 = 4;
      do
      {
        free(*(void **)&v4[v6]);
        ++v5;
        v4 = *(_DWORD **)(a1 + 248);
        v6 += 4;
      }
      while (v5 < *v4);
    }
    free(v4);
    *(_QWORD *)(a1 + 248) = 0;
  }
  free(*(void **)(a1 + 216));
  *(_QWORD *)(a1 + 216) = 0;
  free(*(void **)(a1 + 224));
  *(_QWORD *)(a1 + 224) = 0;
  free(*(void **)(a1 + 232));
  *(_QWORD *)(a1 + 232) = 0;
  v7 = *(const void **)(a1 + 168);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 168) = 0;
  }
  v8 = *(const void **)(a1 + 264);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a1 + 264) = 0;
  }
  v9 = *(const void **)(a1 + 272);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 272) = 0;
  }
  v10 = *(const void **)(a1 + 280);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a1 + 280) = 0;
  }
  v11 = *(const void **)(a1 + 40);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(a1 + 40) = 0;
  }
  v12 = *(const void **)(a1 + 32);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(a1 + 32) = 0;
  }
  if (*(_QWORD *)(a1 + 80))
  {
    FigSimpleMutexDestroy();
    *(_QWORD *)(a1 + 80) = 0;
  }
  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    result = FigSimpleMutexDestroy();
    *(_QWORD *)(a1 + 24) = 0;
  }
  return result;
}

CFStringRef aqOfflineMixer_CopyFormattingDesc(uint64_t a1)
{
  const char *v1;

  if (*(_BYTE *)(a1 + 16))
    v1 = " (invalidated)";
  else
    v1 = "";
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigAudioQueueOfflineMixer %p%s]"), a1, v1);
}

__CFString *aqOfflineMixer_CopyDebugDesc(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  CFIndex v4;
  const char *v5;
  CFAllocatorRef v6;
  const char *v7;
  const char *v8;

  v2 = CFGetAllocator((CFTypeRef)a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = CFGetRetainCount((CFTypeRef)a1);
  if (*(_BYTE *)(a1 + 16))
    v5 = " (invalidated)";
  else
    v5 = "";
  v6 = CFGetAllocator((CFTypeRef)a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigAudioQueueOfflineMixer %p retainCount: %d%s allocator: %p, "), a1, v4, v5, v6);
  CFStringAppendFormat(Mutable, 0, CFSTR("sampleBufferConsumer %@, activityScheduler %@"), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 64));
  CFStringAppendFormat(Mutable, 0, CFSTR(", numberOfSampleBuffersOutput %d"), *(unsigned int *)(a1 + 416));
  if (*(_BYTE *)(a1 + 291))
    v7 = " (didSendReachedEndOfOutputData)";
  else
    v7 = "";
  if (*(_BYTE *)(a1 + 292))
    v8 = " (didFinishPendingProcessingAtEndOfInput)";
  else
    v8 = "";
  CFStringAppendFormat(Mutable, 0, CFSTR("%s%s"), v7, v8);
  CFStringAppendFormat(Mutable, 0, CFSTR(">"));
  return Mutable;
}

void FigCoreAnimationRendererInvalidate(uint64_t a1)
{
  void *v2;
  const void *v3;
  uint64_t v4;
  const void *v5;
  const void *v6;
  const __CFArray *v7;
  CFIndex Count;
  CFIndex v9;
  CFIndex i;
  const __CFArray *v11;
  CFIndex v12;
  CFIndex v13;
  CFIndex j;
  const void *v15;
  __CVPixelBufferPool *v16;
  const void *v17;
  const void *v18;
  const void *v19;

  if (a1 && !*(_BYTE *)(a1 + 16))
  {
    v2 = (void *)MEMORY[0x19403137C]();
    *(_BYTE *)(a1 + 16) = 1;
    objc_msgSend(MEMORY[0x1E0CD0958], "setCurrentContext:", *(_QWORD *)(a1 + 104));
    objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
    if (!pthread_main_np())
      objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
    objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
    objc_msgSend(*(id *)(a1 + 96), "setLayer:", 0);
    objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
    v3 = *(const void **)(a1 + 96);
    if (v3)
      CFRelease(v3);
    *(_QWORD *)(a1 + 96) = 0;
    glDeleteTextures(1, (const GLuint *)(a1 + 112));
    if (*(_QWORD *)(a1 + 104))
    {
      v4 = objc_msgSend(MEMORY[0x1E0CD0958], "currentContext");
      v5 = *(const void **)(a1 + 104);
      if ((const void *)v4 == v5)
      {
        objc_msgSend(MEMORY[0x1E0CD0958], "setCurrentContext:", 0);
        v5 = *(const void **)(a1 + 104);
      }
      if (v5)
        CFRelease(v5);
      *(_QWORD *)(a1 + 104) = 0;
    }
    CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 72));
    *(_QWORD *)(a1 + 72) = 0;
    v6 = *(const void **)(a1 + 80);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(a1 + 80) = 0;
    }
    objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
    if (!pthread_main_np())
      objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
    objc_msgSend(MEMORY[0x1E0CD28B0], "setValue:forKey:", *MEMORY[0x1E0C9AE50], *MEMORY[0x1E0CD3160]);
    CFRelease(*(CFTypeRef *)(a1 + 24));
    *(_QWORD *)(a1 + 24) = 0;
    v7 = *(const __CFArray **)(a1 + 48);
    if (v7)
    {
      Count = CFArrayGetCount(v7);
      if (Count >= 1)
      {
        v9 = Count;
        for (i = 0; i != v9; ++i)
          objc_msgSend((id)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), i), "setContents:", 0);
      }
      CFRelease(*(CFTypeRef *)(a1 + 48));
      *(_QWORD *)(a1 + 48) = 0;
    }
    v11 = *(const __CFArray **)(a1 + 56);
    if (v11)
    {
      v12 = CFArrayGetCount(v11);
      if (v12 >= 1)
      {
        v13 = v12;
        for (j = 0; j != v13; ++j)
        {
          CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), j);
          CAImageQueueFlush();
          CAImageQueueCollect();
        }
      }
      CFRelease(*(CFTypeRef *)(a1 + 56));
      *(_QWORD *)(a1 + 56) = 0;
    }
    objc_msgSend(*(id *)(a1 + 88), "setLayer:", 0);
    v15 = *(const void **)(a1 + 88);
    if (v15)
      CFRelease(v15);
    *(_QWORD *)(a1 + 88) = 0;
    objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
    v16 = *(__CVPixelBufferPool **)(a1 + 64);
    if (v16)
    {
      CVPixelBufferPoolRelease(v16);
      *(_QWORD *)(a1 + 64) = 0;
    }
    v17 = *(const void **)(a1 + 120);
    if (v17)
      CFRelease(v17);
    *(_QWORD *)(a1 + 120) = 0;
    v18 = *(const void **)(a1 + 128);
    if (v18)
      CFRelease(v18);
    *(_QWORD *)(a1 + 128) = 0;
    v19 = *(const void **)(a1 + 40);
    if (v19)
      CFRelease(v19);
    *(_QWORD *)(a1 + 40) = 0;
    objc_autoreleasePoolPop(v2);
  }
}

uint64_t RegisterFCARType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFCARID = result;
  return result;
}

uint64_t FigCoreAnimationRendererCreate(const __CFAllocator *a1, const __CFDictionary *a2, uint64_t a3, const __CFArray *a4, const __CFDictionary *a5, uint64_t *a6)
{
  void *v12;
  uint64_t Instance;
  uint64_t v14;
  __CFDictionary *MutableCopy;
  const __CFAllocator *v16;
  CFNumberRef v17;
  const __CFNumber *Value;
  const __CFNumber *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  const void *ValueAtIndex;
  CFTypeID v24;
  uint64_t v25;
  const __CFAllocator *v27;
  CFMutableArrayRef Mutable;
  CFIndex Count;
  CFIndex v30;
  uint64_t v31;
  const void *v32;
  CFMutableArrayRef v33;
  const void **v34;
  const void *v35;
  const void *v36;
  CFTypeID TypeID;
  const void *v38;
  const void *v39;
  CFTypeID v40;
  CGColorSpaceRef *v41;
  __CFDictionary *v42;
  CGColorSpaceRef DeviceRGB;
  const __CFAllocator *v44;
  const void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  CATransform3D v49;
  const __CFDictionary *v50;
  int valuePtr[3];

  valuePtr[0] = 1111970369;
  v12 = (void *)MEMORY[0x19403137C]();
  v50 = 0;
  if (!a6)
  {
    v25 = FigSignalErrorAt();
    goto LABEL_19;
  }
  if (a2)
  {
    if (a3)
    {
      MEMORY[0x19402F294](&sRegisterFCARTypeOnce, RegisterFCARType);
      Instance = _CFRuntimeCreateInstance();
      if (Instance)
      {
        v14 = Instance;
        *(_QWORD *)(Instance + 144) = 0x7FFFFFFFLL;
        *(_QWORD *)(Instance + 176) = 0x7FFFFFFFLL;
        MutableCopy = CFDictionaryCreateMutableCopy(a1, 0, a2);
        if (!MutableCopy)
          goto LABEL_63;
        v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v17 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, valuePtr);
        CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0CA9040], v17);
        CFRelease(v17);
        Value = (const __CFNumber *)CFDictionaryGetValue(MutableCopy, (const void *)*MEMORY[0x1E0CA90E0]);
        if (!Value)
          goto LABEL_63;
        CFNumberGetValue(Value, kCFNumberIntType, (void *)(v14 + 32));
        v19 = (const __CFNumber *)CFDictionaryGetValue(MutableCopy, (const void *)*MEMORY[0x1E0CA8FD8]);
        if (!v19)
          goto LABEL_63;
        CFNumberGetValue(v19, kCFNumberIntType, (void *)(v14 + 36));
        objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
        if (!pthread_main_np())
          objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
        v47 = *MEMORY[0x1E0CD3160];
        v48 = *MEMORY[0x1E0C9AE50];
        objc_msgSend(MEMORY[0x1E0CD28B0], "setValue:forKey:");
        v20 = (void *)CFRetain((CFTypeRef)objc_msgSend(MEMORY[0x1E0CD27A8], "layer"));
        *(_QWORD *)(v14 + 24) = v20;
        objc_msgSend(v20, "addSublayer:", a3);
        objc_msgSend(*(id *)(v14 + 24), "setFrame:", 0.0, 0.0, (double)*(int *)(v14 + 32), (double)*(int *)(v14 + 36));
        v21 = *(void **)(v14 + 24);
        CATransform3DMakeScale(&v49, 1.0, -1.0, 1.0);
        objc_msgSend(v21, "setSublayerTransform:", &v49);
        objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
        v22 = fcar_ensureBufferAttributesCompatibleWithHWProcessing(MutableCopy);
        if ((_DWORD)v22)
          goto LABEL_64;
        if (a4)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(a4, 0);
          if (ValueAtIndex)
          {
            v24 = CFGetTypeID(ValueAtIndex);
            if (v24 == CAImageQueueGetTypeID())
            {
              *(_QWORD *)(v14 + 56) = CFRetain(a4);
            }
            else
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
                *(_QWORD *)(v14 + 48) = CFRetain(a4);
            }
          }
        }
        if (*(_QWORD *)(v14 + 48))
        {
          v27 = CFGetAllocator((CFTypeRef)v14);
          Mutable = CFArrayCreateMutable(v27, 0, MEMORY[0x1E0C9B378]);
          *(_QWORD *)(v14 + 56) = Mutable;
          if (Mutable)
          {
            Count = CFArrayGetCount(*(CFArrayRef *)(v14 + 48));
            objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
            if (!pthread_main_np())
              objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
            objc_msgSend(MEMORY[0x1E0CD28B0], "setValue:forKey:", v48, v47);
            if (Count < 1)
            {
LABEL_31:
              v25 = 0;
            }
            else
            {
              v30 = 0;
              while (1)
              {
                v31 = CAImageQueueCreate();
                if (!v31)
                  break;
                v32 = (const void *)v31;
                CAImageQueueSetFlags();
                objc_msgSend((id)CFArrayGetValueAtIndex(*(CFArrayRef *)(v14 + 48), v30), "setContents:", v32);
                CFArrayAppendValue(*(CFMutableArrayRef *)(v14 + 56), v32);
                CFRelease(v32);
                if (Count == ++v30)
                  goto LABEL_31;
              }
              v25 = FigSignalErrorAt();
            }
            objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
            objc_msgSend(MEMORY[0x1E0CD28B0], "synchronize");
            if ((_DWORD)v25)
              goto LABEL_65;
          }
          else
          {
            v25 = FigSignalErrorAt();
            if ((_DWORD)v25)
              goto LABEL_65;
          }
        }
        if (*(_QWORD *)(v14 + 56) || *(_QWORD *)(v14 + 48))
        {
          v22 = VTPixelTransferSessionCreate(v16, (VTPixelTransferSessionRef *)(v14 + 120));
          if ((_DWORD)v22)
            goto LABEL_64;
          v33 = CFArrayCreateMutable(v16, 0, MEMORY[0x1E0C9B378]);
          *(_QWORD *)(v14 + 128) = v33;
          if (!v33)
          {
LABEL_63:
            v22 = FigSignalErrorAt();
            goto LABEL_64;
          }
        }
        v34 = (const void **)MEMORY[0x1E0CA8CD8];
        if (a5
          && (*(_QWORD *)(v14 + 88) = CFDictionaryGetValue(a5, CFSTR("RenderCAContext")),
              (v35 = CFDictionaryGetValue(a5, CFSTR("DestinationColorAttachments"))) != 0))
        {
          v36 = v35;
          TypeID = CFDictionaryGetTypeID();
          if (TypeID != CFGetTypeID(v36))
            goto LABEL_63;
          v38 = CFDictionaryGetValue((CFDictionaryRef)v36, *v34);
          if (v38)
          {
            v39 = v38;
            v40 = CGColorSpaceGetTypeID();
            if (v40 != CFGetTypeID(v39))
              goto LABEL_63;
            *(_QWORD *)(v14 + 72) = CFRetain(v39);
          }
          v41 = (CGColorSpaceRef *)(v14 + 72);
          if (*(_QWORD *)(v14 + 72))
          {
            v42 = CFDictionaryCreateMutableCopy(v16, 0, (CFDictionaryRef)v36);
            goto LABEL_49;
          }
        }
        else
        {
          v41 = (CGColorSpaceRef *)(v14 + 72);
          if (*(_QWORD *)(v14 + 72))
          {
LABEL_48:
            v42 = CFDictionaryCreateMutable(v16, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
LABEL_49:
            *(_QWORD *)(v14 + 80) = v42;
            if (v42)
            {
              CFDictionarySetValue(v42, *v34, *(const void **)(v14 + 72));
              CFGetAllocator((CFTypeRef)v14);
              v22 = VTCreatePixelBufferPoolAttributesWithName();
              if (!(_DWORD)v22)
              {
                v44 = CFGetAllocator((CFTypeRef)v14);
                if (!CVPixelBufferPoolCreate(v44, v50, *(CFDictionaryRef *)(v14 + 40), (CVPixelBufferPoolRef *)(v14 + 64)))
                {
                  objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
                  if (!pthread_main_np())
                    objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
                  objc_msgSend(MEMORY[0x1E0CD28B0], "setValue:forKey:", v48, v47);
                  v45 = *(const void **)(v14 + 88);
                  if (v45)
                  {
                    CFRetain(v45);
                    v46 = *(void **)(v14 + 88);
                  }
                  else
                  {
                    v46 = (void *)objc_msgSend(MEMORY[0x1E0CD2720], "localContext");
                    if (v46)
                      v46 = (void *)CFRetain(v46);
                    *(_QWORD *)(v14 + 88) = v46;
                  }
                  if (v46)
                  {
                    objc_msgSend(v46, "setColorSpace:", *(_QWORD *)(v14 + 72));
                    objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
                    objc_msgSend(MEMORY[0x1E0CD28B0], "flush");
                    v25 = fcar_setupGLESRenderer(v14);
                    if (!(_DWORD)v25)
                    {
                      *a6 = v14;
                      goto LABEL_66;
                    }
LABEL_65:
                    CFRelease((CFTypeRef)v14);
LABEL_66:
                    if (MutableCopy)
                      CFRelease(MutableCopy);
                    goto LABEL_16;
                  }
                  objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
                }
                goto LABEL_63;
              }
LABEL_64:
              v25 = v22;
              goto LABEL_65;
            }
            goto LABEL_63;
          }
        }
        DeviceRGB = CGColorSpaceCreateDeviceRGB();
        *v41 = DeviceRGB;
        if (!DeviceRGB)
          goto LABEL_63;
        goto LABEL_48;
      }
    }
  }
  v25 = FigSignalErrorAt();
LABEL_16:
  if (v50)
    CFRelease(v50);
LABEL_19:
  objc_autoreleasePoolPop(v12);
  return v25;
}

uint64_t fcar_ensureBufferAttributesCompatibleWithHWProcessing(CFDictionaryRef theDict)
{
  CFMutableDictionaryRef MutableCopy;
  __CFDictionary *v2;
  const void *v3;
  const void *v4;
  uint64_t PixelBufferAttributesWithIOSurfaceSupport;

  MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theDict);
  if (!MutableCopy)
    return FigSignalErrorAt();
  v2 = MutableCopy;
  FigGetAlignmentForIOSurfaceOutput();
  v3 = (const void *)*MEMORY[0x1E0CA9048];
  if (!CFDictionaryGetValue(v2, (const void *)*MEMORY[0x1E0CA9048]))
    fcar_addNumberToDictionary(v2, v3, 0);
  v4 = (const void *)*MEMORY[0x1E0CA8F68];
  if (!CFDictionaryGetValue(v2, (const void *)*MEMORY[0x1E0CA8F68]))
    fcar_addNumberToDictionary(v2, v4, 0);
  PixelBufferAttributesWithIOSurfaceSupport = FigCreatePixelBufferAttributesWithIOSurfaceSupport();
  CFRelease(v2);
  return PixelBufferAttributesWithIOSurfaceSupport;
}

uint64_t fcar_setupGLESRenderer(uint64_t a1)
{
  const void *v2;
  void *v3;
  void *v4;
  GLsizei v5;
  GLsizei v6;
  const void *v7;
  uint64_t v8;
  GLuint framebuffers;
  int v11;

  v2 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CD0958]), "initWithAPI:", 3);
  *(_QWORD *)(a1 + 104) = v2;
  if (v2)
  {
    CFRetain(v2);
    v3 = *(void **)(a1 + 104);
  }
  else
  {
    v3 = 0;
  }
  framebuffers = 0;

  if (*(_QWORD *)(a1 + 104))
  {
    objc_msgSend(MEMORY[0x1E0CD0958], "setCurrentContext:");
    v4 = *(void **)(a1 + 104);
    v11 = 2;
    if (objc_msgSend(v4, "setParameter:to:", 608, &v11))
      FigSignalErrorAt();
    v5 = *(_DWORD *)(a1 + 32);
    v6 = *(_DWORD *)(a1 + 36);
    glGenTextures(1, (GLuint *)(a1 + 112));
    glBindTexture(0xDE1u, *(_DWORD *)(a1 + 112));
    glTexParameteri(0xDE1u, 0x2801u, 9728);
    glTexParameteri(0xDE1u, 0x2800u, 9728);
    glTexParameteri(0xDE1u, 0x2802u, 33071);
    glTexParameteri(0xDE1u, 0x2803u, 33071);
    glGenFramebuffers(1, &framebuffers);
    glBindFramebuffer(0x8D40u, framebuffers);
    glFramebufferTexture2D(0x8D40u, 0x8CE0u, 0xDE1u, *(_DWORD *)(a1 + 112), 0);
    glViewport(0, 0, v5, v6);
    v7 = (const void *)objc_msgSend(MEMORY[0x1E0CD2820], "rendererWithEAGLContext:options:", *(_QWORD *)(a1 + 104), 0);
    *(_QWORD *)(a1 + 96) = v7;
    if (v7)
    {
      CFRetain(v7);
      objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
      if (!pthread_main_np())
        objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
      objc_msgSend(MEMORY[0x1E0CD28B0], "setValue:forKey:", *MEMORY[0x1E0C9AE50], *MEMORY[0x1E0CD3160]);
      objc_msgSend(*(id *)(a1 + 96), "setLayer:", *(_QWORD *)(a1 + 24));
      objc_msgSend(*(id *)(a1 + 96), "setBounds:", 0.0, 0.0, (double)v5, (double)v6);
      objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
      v8 = 0;
    }
    else
    {
      v8 = 4294954973;
    }
  }
  else
  {
    v8 = 4294954974;
  }
  objc_msgSend(MEMORY[0x1E0CD0958], "setCurrentContext:", 0);
  return v8;
}

uint64_t FigCoreAnimationRendererCopyProperty(uint64_t a1, CFTypeRef cf1, uint64_t a3, CFDictionaryRef *a4)
{
  if (*(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  if (!CFEqual(cf1, CFSTR("FCARPerformanceDictionary")))
    return 4294954971;
  fcar_copyPerformanceDictionary(a1, a4);
  return 0;
}

void fcar_copyPerformanceDictionary(uint64_t a1, CFDictionaryRef *a2)
{
  int v4;
  const void *v5;
  const __CFAllocator *v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  void **v11;
  double valuePtr;
  void *values[2];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  void *keys[2];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    *(_OWORD *)keys = 0u;
    v24 = 0u;
    *(_OWORD *)values = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v5 = (const void *)(a1 + 160);
    v4 = *(_DWORD *)(a1 + 160);
    valuePtr = 0.0;
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (v4 < 1)
    {
      v7 = 0;
    }
    else
    {
      valuePtr = (float)((float)*(uint64_t *)(a1 + 152) / (float)((float)v4 * 1000000.0));
      keys[0] = CFSTR("AverageCoreAnimationRendererConversionTime");
      values[0] = CFNumberCreate(v6, kCFNumberDoubleType, &valuePtr);
      valuePtr = (float)((float)*(uint64_t *)(a1 + 136) / 1000000.0);
      keys[1] = CFSTR("MaxCoreAnimationRendererConversionTime");
      values[1] = CFNumberCreate(v6, kCFNumberDoubleType, &valuePtr);
      valuePtr = (float)((float)*(uint64_t *)(a1 + 144) / 1000000.0);
      *(_QWORD *)&v24 = CFSTR("MinCoreAnimationRendererConversionTime");
      *(_QWORD *)&v14 = CFNumberCreate(v6, kCFNumberDoubleType, &valuePtr);
      v7 = 3;
    }
    keys[v7] = CFSTR("NumberOfCoreAnimationRendererConversions");
    values[v7] = CFNumberCreate(v6, kCFNumberIntType, v5);
    v8 = v7 + 1;
    v9 = *(_DWORD *)(a1 + 192);
    if (v9 >= 1)
    {
      valuePtr = (float)((float)*(uint64_t *)(a1 + 184) / (float)((float)v9 * 1000000.0));
      keys[v8] = CFSTR("AverageCoreAnimationRendererRenderingTime");
      values[v8] = CFNumberCreate(v6, kCFNumberDoubleType, &valuePtr);
      valuePtr = (float)((float)*(uint64_t *)(a1 + 168) / 1000000.0);
      keys[v7 + 2] = CFSTR("MaxCoreAnimationRendererRenderingTime");
      values[v7 + 2] = CFNumberCreate(v6, kCFNumberDoubleType, &valuePtr);
      valuePtr = (float)((float)*(uint64_t *)(a1 + 176) / 1000000.0);
      keys[v7 + 3] = CFSTR("MinCoreAnimationRendererRenderingTime");
      values[v7 + 3] = CFNumberCreate(v6, kCFNumberDoubleType, &valuePtr);
      v8 = v7 | 4;
    }
    v10 = v8;
    v11 = values;
    *a2 = CFDictionaryCreate(v6, (const void **)keys, (const void **)values, v8, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    do
    {
      if (*v11)
        CFRelease(*v11);
      ++v11;
      --v10;
    }
    while (v10);
  }
}

uint64_t FigCoreAnimationRendererSetProperty(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  else
    return 4294954971;
}

uint64_t FigCoreAnimationRendererCopyPixelBufferAtTime(uint64_t a1, CMTime *a2, const __CFArray *a3, CVPixelBufferRef *a4, CMTime *a5)
{
  void *v10;
  unint64_t v11;
  const __CFAllocator *v12;
  uint64_t v13;
  __CVBuffer *v14;
  BOOL v15;
  __CFArray *Mutable;
  size_t Width;
  size_t Height;
  CFIndex Count;
  const __CFArray *v20;
  const __CFArray *v21;
  const __CFArray *v23;
  __IOSurface *v24;
  __IOSurface *v25;
  OSType PixelFormat;
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  size_t v29;
  GLuint v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Float64 v37;
  const __CFArray *v38;
  CFIndex v39;
  CFIndex v40;
  CFIndex i;
  const void *v42;
  const __CFNumber *v43;
  const __CFAllocator *v44;
  const __CFArray *v45;
  CFIndex v46;
  CFIndex v47;
  uint64_t v48;
  CFIndex v49;
  __CVBuffer *ValueAtIndex;
  __CVBuffer *v51;
  CFTypeID v52;
  OSType PixelFormatType;
  OSType v54;
  OSType v55;
  IOSurfaceRef IOSurface;
  size_t v57;
  int v58;
  CFIndex v59;
  CFIndex v60;
  CFIndex v61;
  __CVPixelBufferPool *v62;
  const __CFDictionary *PixelBufferAttributes;
  const __CFNumber *Value;
  const __CFNumber *v65;
  const __CFNumber *v66;
  const __CFNumber *v67;
  size_t v68;
  CFTypeID v69;
  uint64_t v70;
  __CFDictionary *v71;
  __CFDictionary *v72;
  const __CFAllocator *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  CFIndex v78;
  CFIndex v79;
  CFIndex v80;
  __IOSurface *v81;
  CFNumberRef v82;
  uint64_t v83;
  int v84;
  OpaqueVTPixelTransferSession *session;
  void *v86;
  void *v87;
  CFIndex v88;
  CFIndex v89;
  const __CFArray *v90;
  void *v91;
  unint64_t v92;
  unint64_t v93;
  CMTime *v94;
  CVPixelBufferRef *v95;
  uint64_t v96;
  uint64_t UpTimeNanoseconds;
  const __CFAllocator *allocator;
  int v99;
  void *key;
  const __CFArray *theArray;
  CMTime *v102;
  const __CFArray *v103;
  CMTime time;
  CVPixelBufferRef pixelBufferOut;
  CVPixelBufferRef v106;
  uint64_t ID;
  int valuePtr;
  CFTypeRef v109;
  const __CFDictionary *v110;
  CFRange v111;

  pixelBufferOut = 0;
  v10 = (void *)MEMORY[0x19403137C]();
  v11 = 0x1E0CD0000uLL;
  if (!a4)
    goto LABEL_12;
  v102 = a2;
  v12 = CFGetAllocator((CFTypeRef)a1);
  v13 = CVPixelBufferPoolCreatePixelBuffer(v12, *(CVPixelBufferPoolRef *)(a1 + 64), &pixelBufferOut);
  v14 = pixelBufferOut;
  if ((_DWORD)v13)
    v15 = 1;
  else
    v15 = pixelBufferOut == 0;
  if (v15)
  {
    Mutable = 0;
    if (pixelBufferOut)
      goto LABEL_14;
    goto LABEL_16;
  }
  CVPixelBufferGetPixelFormatType(pixelBufferOut);
  Width = CVPixelBufferGetWidth(pixelBufferOut);
  Height = CVPixelBufferGetHeight(pixelBufferOut);
  CVBufferSetAttachments(pixelBufferOut, *(CFDictionaryRef *)(a1 + 80), kCVAttachmentMode_ShouldPropagate);
  if (!a3)
  {
    v92 = Height;
    v93 = Width;
    v94 = a5;
    v95 = a4;
    Mutable = 0;
    goto LABEL_22;
  }
  Count = CFArrayGetCount(a3);
  v20 = *(const __CFArray **)(a1 + 56);
  if (!v20 || Count > CFArrayGetCount(v20))
  {
LABEL_12:
    v13 = FigSignalErrorAt();
    Mutable = 0;
    goto LABEL_13;
  }
  v94 = a5;
  v95 = a4;
  v44 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    v13 = 4294954974;
    goto LABEL_13;
  }
  allocator = v44;
  objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
  if (!pthread_main_np())
    objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
  v86 = v10;
  objc_msgSend(MEMORY[0x1E0CD28B0], "setValue:forKey:", *MEMORY[0x1E0C9AE50], *MEMORY[0x1E0CD3160]);
  v45 = *(const __CFArray **)(a1 + 56);
  session = *(OpaqueVTPixelTransferSession **)(a1 + 120);
  theArray = *(const __CFArray **)(a1 + 128);
  v46 = CFArrayGetCount(a3);
  v103 = v45;
  v47 = CFArrayGetCount(v45);
  if (v46 >= v47)
    v48 = v47;
  else
    v48 = v46;
  v96 = v48;
  v92 = Height;
  v93 = Width;
  if (v48 < 1)
  {
    v13 = 0;
    v51 = 0;
    goto LABEL_121;
  }
  v49 = 0;
  key = (void *)*MEMORY[0x1E0CA90E0];
  v91 = (void *)*MEMORY[0x1E0CA8FD8];
  v89 = v46 - 1;
  v90 = a3;
  v87 = (void *)*MEMORY[0x1E0CA9040];
  v88 = v47 - 1;
  while (1)
  {
    ValueAtIndex = (__CVBuffer *)CFArrayGetValueAtIndex(a3, v49);
    if (!ValueAtIndex)
      goto LABEL_109;
    v51 = ValueAtIndex;
    v52 = CFGetTypeID(ValueAtIndex);
    if (v52 != CVPixelBufferGetTypeID())
      goto LABEL_109;
    ID = 0;
    CVPixelBufferGetWidth(v51);
    CVPixelBufferGetHeight(v51);
    PixelFormatType = CVPixelBufferGetPixelFormatType(v51);
    v54 = PixelFormatType;
    if (PixelFormatType == 32
      || PixelFormatType == 1111970369
      || (PixelFormatType & 0xFFFFFFEF) == 0x34323066
      && (v55 = PixelFormatType, IOSurface = CVPixelBufferGetIOSurface(v51), v54 = v55, IOSurface))
    {
      v99 = v54;
      CVPixelBufferRetain(v51);
      goto LABEL_95;
    }
    v99 = 1111970369;
    v106 = 0;
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    time.value = 0;
    v57 = CVPixelBufferGetWidth(v51);
    v58 = CVPixelBufferGetHeight(v51);
    v109 = 0;
    v110 = 0;
    v59 = CFArrayGetCount(theArray);
    if (v59 >= 1)
    {
      v60 = v59;
      v61 = 0;
      v84 = v58;
      while (1)
      {
        valuePtr = 0;
        v62 = (__CVPixelBufferPool *)CFArrayGetValueAtIndex(theArray, v61);
        time.value = (CMTimeValue)v62;
        PixelBufferAttributes = CVPixelBufferPoolGetPixelBufferAttributes(v62);
        valuePtr = 0;
        Value = (const __CFNumber *)CFDictionaryGetValue(PixelBufferAttributes, key);
        if (Value)
        {
          CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
          if (valuePtr == (_DWORD)v57)
          {
            valuePtr = 0;
            v65 = (const __CFNumber *)CFDictionaryGetValue(PixelBufferAttributes, v91);
            if (v65)
            {
              CFNumberGetValue(v65, kCFNumberIntType, &valuePtr);
              if (valuePtr == v58)
              {
                valuePtr = 0;
                v66 = (const __CFNumber *)CFDictionaryGetValue(PixelBufferAttributes, v87);
                if (v66)
                {
                  v67 = v66;
                  v68 = v57;
                  v69 = CFGetTypeID(v66);
                  v15 = v69 == CFNumberGetTypeID();
                  v57 = v68;
                  v58 = v84;
                  if (v15)
                  {
                    CFNumberGetValue(v67, kCFNumberIntType, &valuePtr);
                    if (valuePtr == 1111970369)
                      break;
                  }
                }
              }
            }
          }
        }
        time.value = 0;
        if (v60 == ++v61)
          goto LABEL_73;
      }
      if (v62)
      {
        CVPixelBufferPoolRetain(v62);
        v11 = 0x1E0CD0000;
        v74 = UpTimeNanoseconds;
        v73 = allocator;
LABEL_79:
        v13 = CVPixelBufferPoolCreatePixelBuffer(v73, v62, &v106);
        a3 = v90;
        if (!(_DWORD)v13)
        {
          if (v106)
            v13 = VTPixelTransferSessionTransferImage(session, v51, v106);
          else
            v13 = 0;
        }
        goto LABEL_83;
      }
    }
LABEL_73:
    v70 = VTCreatePixelBufferPoolAttributesWithName();
    if ((_DWORD)v70)
    {
      v13 = v70;
      v11 = 0x1E0CD0000;
      a3 = v90;
      v74 = UpTimeNanoseconds;
    }
    else
    {
      v71 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v71)
      {
        v72 = v71;
        fcar_addNumberToDictionary(v71, v87, 1111970369);
        fcar_addNumberToDictionary(v72, key, v57);
        fcar_addNumberToDictionary(v72, v91, v58);
        v13 = fcar_ensureBufferAttributesCompatibleWithHWProcessing(v72);
        CFRelease(v72);
      }
      else
      {
        v13 = FigSignalErrorAt();
      }
      v11 = 0x1E0CD0000;
      a3 = v90;
      v74 = UpTimeNanoseconds;
      v73 = allocator;
      if (!(_DWORD)v13)
      {
        v13 = CVPixelBufferPoolCreate(allocator, 0, v110, (CVPixelBufferPoolRef *)&time);
        if (!(_DWORD)v13)
        {
          CFArrayAppendValue(theArray, (const void *)time.value);
          v62 = (__CVPixelBufferPool *)time.value;
          goto LABEL_79;
        }
      }
    }
LABEL_83:
    CVPixelBufferPoolRelease((CVPixelBufferPoolRef)time.value);
    if (v110)
      CFRelease(v110);
    if (v109)
      CFRelease(v109);
    if ((_DWORD)v13)
    {
      CVPixelBufferRelease(v106);
      v106 = 0;
    }
    v75 = FigGetUpTimeNanoseconds();
    v76 = (v75 - v74) / 1000;
    ++*(_DWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 152) += v76;
    v77 = *(_QWORD *)(a1 + 144);
    if (v77 >= v76)
      v77 = (v75 - v74) / 1000;
    if (*(_QWORD *)(a1 + 136) > v76)
      v76 = *(_QWORD *)(a1 + 136);
    *(_QWORD *)(a1 + 136) = v76;
    *(_QWORD *)(a1 + 144) = v77;
    if ((_DWORD)v13)
      goto LABEL_120;
    v51 = v106;
LABEL_95:
    v78 = v88;
    if (v49 != v89)
      v78 = v49;
    if (v49 <= v78)
      break;
LABEL_108:
    CVPixelBufferRelease(v51);
    v11 = 0x1E0CD0000;
    a3 = v90;
LABEL_109:
    if (++v49 == v96)
    {
      v13 = 0;
LABEL_120:
      v51 = 0;
      goto LABEL_121;
    }
  }
  v79 = v78 + 1;
  v80 = v49;
  while (1)
  {
    CFArrayGetValueAtIndex(v103, v80);
    CAImageQueueSetSize();
    v81 = CVPixelBufferGetIOSurface(v51);
    if (!v81)
      break;
    ID = IOSurfaceGetID(v81);
LABEL_105:
    CVPixelBufferRetain(v51);
    if ((CAImageQueueInsertImage() & 1) == 0)
      CVPixelBufferRelease(v51);
    if (v79 == ++v80)
      goto LABEL_108;
  }
  if (v99 != 1111970369 && v99 != 32)
    goto LABEL_119;
  CVPixelBufferLockBaseAddress(v51, 0);
  CVPixelBufferGetBaseAddress(v51);
  CVPixelBufferGetBytesPerRow(v51);
  ID = CAImageQueueRegisterBuffer();
  if (ID)
  {
    v82 = CFNumberCreate(allocator, kCFNumberSInt64Type, &ID);
    CFArrayAppendValue(Mutable, v82);
    CFRelease(v82);
    goto LABEL_105;
  }
  CVPixelBufferUnlockBaseAddress(v51, 0);
LABEL_119:
  v13 = 4294954975;
  v11 = 0x1E0CD0000;
  a3 = v90;
LABEL_121:
  CVPixelBufferRelease(v51);
  objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
  objc_msgSend(MEMORY[0x1E0CD28B0], "flush");
  objc_msgSend(MEMORY[0x1E0CD28B0], "synchronize");
  v10 = v86;
  if ((_DWORD)v13)
    goto LABEL_13;
LABEL_22:
  v23 = a3;
  objc_msgSend(*(id *)(v11 + 2392), "setCurrentContext:", *(_QWORD *)(a1 + 104));
  v24 = CVPixelBufferGetIOSurface(pixelBufferOut);
  if (v24
    && (v25 = v24,
        PixelFormat = IOSurfaceGetPixelFormat(v24),
        WidthOfPlane = IOSurfaceGetWidthOfPlane(v25, 0),
        HeightOfPlane = IOSurfaceGetHeightOfPlane(v25, 0),
        PixelFormat == 1111970369))
  {
    v29 = HeightOfPlane;
    glBindTexture(0xDE1u, *(_DWORD *)(a1 + 112));
    BYTE4(v83) = 0;
    LODWORD(v83) = 0;
    if (objc_msgSend(*(id *)(a1 + 104), "texImageIOSurface:target:internalFormat:width:height:format:type:plane:invert:", v25, 3553, 6408, WidthOfPlane, v29, 32993, 33639, v83))
    {
      v30 = *(_DWORD *)(a1 + 112);
      glTexParameteri(0xDE1u, 0x2801u, 9728);
      glTexParameteri(0xDE1u, 0x2800u, 9728);
      glTexParameteri(0xDE1u, 0x2802u, 33071);
      glTexParameteri(0xDE1u, 0x2803u, 33071);
      goto LABEL_27;
    }
    v13 = 4294954973;
LABEL_13:
    v14 = pixelBufferOut;
    if (pixelBufferOut)
    {
LABEL_14:
      CVPixelBufferRelease(v14);
      goto LABEL_15;
    }
  }
  else
  {
    v31 = FigSignalErrorAt();
    v30 = 0;
    if ((_DWORD)v31)
    {
      v13 = v31;
      goto LABEL_13;
    }
LABEL_27:
    glFramebufferTexture2D(0x8D40u, 0x8CE0u, 0xDE1u, v30, 0);
    v32 = FigGetUpTimeNanoseconds();
    glClearColor(0.0, 0.0, 0.0, 0.0);
    glClear(0x4000u);
    v33 = *(void **)(a1 + 96);
    time = *v102;
    objc_msgSend(v33, "beginFrameAtTime:timeStamp:", 0, CMTimeGetSeconds(&time));
    objc_msgSend(*(id *)(a1 + 96), "addUpdateRect:", 0.0, 0.0, (double)v93, (double)v92);
    objc_msgSend(*(id *)(a1 + 96), "render");
    glFlush();
    glFinish();
    v34 = FigGetUpTimeNanoseconds();
    v35 = (v34 - v32) / 1000;
    ++*(_DWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 184) += v35;
    v36 = *(_QWORD *)(a1 + 176);
    if (v36 >= v35)
      v36 = (v34 - v32) / 1000;
    if (*(_QWORD *)(a1 + 168) > v35)
      v35 = *(_QWORD *)(a1 + 168);
    *(_QWORD *)(a1 + 168) = v35;
    *(_QWORD *)(a1 + 176) = v36;
    if (v94)
    {
      objc_msgSend(*(id *)(a1 + 96), "nextFrameTime");
      CMTimeMakeWithSeconds(&time, v37, 1000);
      *v94 = time;
    }
    objc_msgSend(*(id *)(a1 + 96), "endFrame");
    if (v23)
    {
      objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
      if (!pthread_main_np())
        objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
      objc_msgSend(MEMORY[0x1E0CD28B0], "setValue:forKey:", *MEMORY[0x1E0C9AE50], *MEMORY[0x1E0CD3160]);
      v38 = *(const __CFArray **)(a1 + 56);
      if (v38)
      {
        v39 = CFArrayGetCount(v38);
        if (v39 >= 1)
        {
          v40 = v39;
          for (i = 0; i != v40; ++i)
          {
            v42 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), i);
            CAImageQueueFlush();
            CAImageQueueCollect();
            if (Mutable)
            {
              if (i < CFArrayGetCount(Mutable))
              {
                v43 = (const __CFNumber *)CFArrayGetValueAtIndex(Mutable, i);
                if (v43)
                {
                  time.value = 0;
                  CFNumberGetValue(v43, kCFNumberSInt64Type, &time);
                  if (time.value)
                    MEMORY[0x1940295F4](v42);
                }
              }
            }
          }
        }
      }
      objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
      objc_msgSend(MEMORY[0x1E0CD28B0], "synchronize");
    }
    v13 = 0;
    *v95 = pixelBufferOut;
LABEL_15:
    pixelBufferOut = 0;
  }
LABEL_16:
  if (Mutable)
    CFRelease(Mutable);
  objc_msgSend(*(id *)(v11 + 2392), "setCurrentContext:", 0);
  v21 = *(const __CFArray **)(a1 + 128);
  if (v21)
  {
    v111.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 128));
    v111.location = 0;
    CFArrayApplyFunction(v21, v111, (CFArrayApplierFunction)fcar_flushConversionPool, 0);
  }
  CVPixelBufferPoolFlush(*(CVPixelBufferPoolRef *)(a1 + 64), 0);
  objc_autoreleasePoolPop(v10);
  return v13;
}

void fcar_flushConversionPool(__CVPixelBufferPool *a1)
{
  CVPixelBufferPoolFlush(a1, 0);
}

double fcarInit(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 192) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

CFTypeRef fcarCopyFormattingDesc(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 16))
    return CFRetain(CFSTR("[FCAR (invalidated)]"));
  else
    return CFRetain(CFSTR("[FCAR]"));
}

__CFString *fcarCopyDebugDesc(_BYTE *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  CFIndex v4;
  const char *v5;
  CFAllocatorRef v6;
  CFTypeRef cf;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  cf = 0;
  v4 = CFGetRetainCount(a1);
  if (a1[16])
    v5 = " (invalidated)";
  else
    v5 = "";
  v6 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("FCAR %p retainCount: %ld%s allocator: %p\n"), a1, v4, v5, v6);
  fcar_copyPerformanceDictionary((uint64_t)a1, (CFDictionaryRef *)&cf);
  if (cf)
  {
    CFStringAppendFormat(Mutable, 0, CFSTR(", performanceDictionary %@"), cf);
    if (cf)
      CFRelease(cf);
  }
  return Mutable;
}

void fcar_addNumberToDictionary(__CFDictionary *a1, const void *a2, int a3)
{
  CFNumberRef v5;
  CFNumberRef v6;
  int valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (v5)
  {
    v6 = v5;
    CFDictionaryAddValue(a1, a2, v5);
    CFRelease(v6);
  }
}

void fcar_releaseCVPixelBufferCallback(int a1, int a2, CVPixelBufferRef texture)
{
  if (texture)
    CVPixelBufferRelease(texture);
}

uint64_t FigRemote_StartCARenderServerAndReturnPort(_DWORD *a1)
{
  int v2;
  uint64_t result;

  if (!a1)
    return 1;
  FigAtomicIncrement32();
  if ((CARenderServerIsRunning() & 1) != 0 || (MEMORY[0x194029720]() & 1) != 0)
  {
    v2 = MEMORY[0x1940296FC]();
    result = 0;
    *a1 = v2;
  }
  else
  {
    if ((int)FigAtomicDecrement32() <= 0)
      MEMORY[0x194029714]();
    return 1;
  }
  return result;
}

uint64_t FigRemote_CreateLocalCAContext(_QWORD *a1)
{
  void *v2;
  id v3;
  uint64_t v4;

  v2 = (void *)MEMORY[0x19403137C]();
  v3 = (id)objc_msgSend(MEMORY[0x1E0CD2720], "localContext");
  if (v3)
  {
    v4 = 0;
    *a1 = v3;
  }
  else
  {
    v4 = 1;
  }
  objc_autoreleasePoolPop(v2);
  return v4;
}

uint64_t FigRemote_CreateCAImageQueuesAndSlotIDs(int a1, void *a2, __CFArray **a3, __CFArray **a4)
{
  void *v8;
  uint64_t v9;
  const __CFAllocator *v10;
  const CFArrayCallBacks *v11;
  __CFArray *Mutable;
  CFMutableArrayRef v13;
  __CFArray *v14;
  BOOL v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  CFNumberRef v19;
  int valuePtr;

  valuePtr = 0;
  v8 = (void *)MEMORY[0x19403137C]();
  v9 = 1;
  if (a2 && a3 && a4)
  {
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v11 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    v13 = CFArrayCreateMutable(v10, 0, v11);
    v14 = v13;
    if (Mutable)
      v15 = v13 == 0;
    else
      v15 = 1;
    if (!v15)
    {
      objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
      if (!pthread_main_np())
        objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
      objc_msgSend(MEMORY[0x1E0CD28B0], "setValue:forKey:", *MEMORY[0x1E0C9AE50], *MEMORY[0x1E0CD3160]);
      if (a1 < 1)
      {
LABEL_13:
        v9 = 0;
        *a3 = Mutable;
        *a4 = v14;
        Mutable = 0;
        v14 = 0;
      }
      else
      {
        while (1)
        {
          v9 = 1;
          v16 = CAImageQueueCreate();
          if (!v16)
            break;
          v17 = (const void *)v16;
          CAImageQueueSetFlags();
          v18 = objc_msgSend(a2, "createSlot");
          valuePtr = v18;
          objc_msgSend(a2, "setObject:forSlot:", v17, v18);
          CFArrayAppendValue(Mutable, v17);
          CFRelease(v17);
          v19 = CFNumberCreate(v10, kCFNumberSInt32Type, &valuePtr);
          CFArrayAppendValue(v14, v19);
          CFRelease(v19);
          if (!--a1)
            goto LABEL_13;
        }
      }
      objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
      objc_msgSend(MEMORY[0x1E0CD28B0], "flush");
      objc_msgSend(MEMORY[0x1E0CD28B0], "synchronize");
    }
    if (Mutable)
      CFRelease(Mutable);
    if (v14)
      CFRelease(v14);
  }
  objc_autoreleasePoolPop(v8);
  return v9;
}

uint64_t FigRemote_CreateLayerHostForRemoteContext(uint64_t a1, _QWORD *a2)
{
  void *v4;
  id v5;

  if (!a2)
    return 1;
  v4 = (void *)MEMORY[0x19403137C]();
  objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
  if (!pthread_main_np())
    objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
  objc_msgSend(MEMORY[0x1E0CD28B0], "setValue:forKey:", *MEMORY[0x1E0C9AE50], *MEMORY[0x1E0CD3160]);
  v5 = (id)objc_msgSend(MEMORY[0x1E0CD27B0], "layer");
  objc_msgSend(v5, "setContextId:", a1);
  objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
  objc_msgSend(MEMORY[0x1E0CD28B0], "flush");
  objc_msgSend(MEMORY[0x1E0CD28B0], "synchronize");
  *a2 = v5;
  objc_autoreleasePoolPop(v4);
  return 0;
}

uint64_t FigRemote_RemoveReleaseAndClearLayerHost(id *a1)
{
  void *v2;

  if (a1 && *a1)
  {
    v2 = (void *)MEMORY[0x19403137C]();
    objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
    if (!pthread_main_np())
      objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
    objc_msgSend(MEMORY[0x1E0CD28B0], "setValue:forKey:", *MEMORY[0x1E0C9AE50], *MEMORY[0x1E0CD3160]);
    objc_msgSend(*a1, "removeFromSuperlayer");

    *a1 = 0;
    objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
    objc_autoreleasePoolPop(v2);
  }
  return 0;
}

uint64_t FigRemote_RemoveReleaseAndClearCAImageQueuesAndSlotIDs(void *a1, CFTypeRef *a2, CFArrayRef *a3)
{
  void *v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex i;
  const __CFNumber *ValueAtIndex;
  unsigned int valuePtr;

  valuePtr = 0;
  v6 = (void *)MEMORY[0x19403137C]();
  objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
  if (!pthread_main_np())
    objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
  objc_msgSend(MEMORY[0x1E0CD28B0], "setValue:forKey:", *MEMORY[0x1E0C9AE50], *MEMORY[0x1E0CD3160]);
  Count = CFArrayGetCount(*a3);
  if (Count >= 1)
  {
    v8 = Count;
    for (i = 0; i != v8; ++i)
    {
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*a3, i);
      if (ValueAtIndex)
      {
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
        objc_msgSend(a1, "deleteSlot:", valuePtr);
      }
      valuePtr = 0;
    }
  }
  if (*a3)
    CFRelease(*a3);
  *a3 = 0;
  if (*a2)
    CFRelease(*a2);
  *a2 = 0;
  objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
  objc_autoreleasePoolPop(v6);
  return 0;
}

uint64_t FigRemote_ReleaseAndClearLocalCAContextAndShutDownCAServer(id *a1, uint64_t a2)
{
  void *v4;
  _QWORD v6[5];

  v4 = (void *)MEMORY[0x19403137C]();
  if (a1 && *a1)
  {
    objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
    objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __FigRemote_ReleaseAndClearLocalCAContextAndShutDownCAServer_block_invoke;
    v6[3] = &unk_1E2F88548;
    v6[4] = a2;
    objc_msgSend(MEMORY[0x1E0CD28B0], "addCommitHandler:forPhase:", v6, 5);
    objc_msgSend(*a1, "invalidate");

    objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
    *a1 = 0;
  }
  else if ((int)FigAtomicDecrement32() <= 0)
  {
    MEMORY[0x194029714]();
  }
  objc_autoreleasePoolPop(v4);
  return 0;
}

uint64_t FigRemote_CreateRemoteCAContextAndAttachLayer(uint64_t a1, uint64_t a2, _QWORD *a3, _DWORD *a4)
{
  uint64_t result;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  result = 1;
  if ((_DWORD)a1 && a2 && a3 && a4)
  {
    v9 = (void *)MEMORY[0x19403137C](1);
    objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
    if (!pthread_main_np())
      objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
    objc_msgSend(MEMORY[0x1E0CD28B0], "setValue:forKey:", *MEMORY[0x1E0C9AE50], *MEMORY[0x1E0CD3160]);
    v10 = (void *)MEMORY[0x1E0C99D80];
    v11 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a1);
    v12 = objc_msgSend(v10, "dictionaryWithObjectsAndKeys:", v11, *MEMORY[0x1E0CD2A48], 0);
    v13 = (id)objc_msgSend(MEMORY[0x1E0CD2720], "remoteContextWithOptions:", v12);
    objc_msgSend(v13, "setLayer:", a2);
    *a4 = objc_msgSend(v13, "contextId");
    objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
    objc_msgSend(MEMORY[0x1E0CD28B0], "flush");
    objc_msgSend(MEMORY[0x1E0CD28B0], "synchronize");
    *a3 = v13;
    objc_autoreleasePoolPop(v9);
    return 0;
  }
  return result;
}

uint64_t FigRemote_InstallSlotIDsInVideoLayers(const __CFArray *a1, const __CFArray *a2)
{
  void *v4;
  CFIndex Count;
  CFIndex v6;
  uint64_t v7;
  CFIndex i;
  const __CFNumber *ValueAtIndex;
  void *v10;
  void *v11;
  unsigned int valuePtr;

  valuePtr = 0;
  v4 = (void *)MEMORY[0x19403137C]();
  Count = CFArrayGetCount(a1);
  v6 = CFArrayGetCount(a2);
  v7 = 1;
  if (Count && v6 && Count == v6)
  {
    objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
    if (!pthread_main_np())
      objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
    objc_msgSend(MEMORY[0x1E0CD28B0], "setValue:forKey:", *MEMORY[0x1E0C9AE50], *MEMORY[0x1E0CD3160]);
    if (Count >= 1)
    {
      for (i = 0; i != Count; ++i)
      {
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, i);
        v10 = (void *)CFArrayGetValueAtIndex(a2, i);
        if (!v10)
          break;
        if (!ValueAtIndex)
          break;
        v11 = v10;
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
        objc_msgSend(v11, "setContents:", objc_msgSend(MEMORY[0x1E0CD2720], "objectForSlot:", valuePtr));
      }
    }
    objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
    objc_msgSend(MEMORY[0x1E0CD28B0], "flush");
    objc_msgSend(MEMORY[0x1E0CD28B0], "synchronize");
    v7 = 0;
  }
  objc_autoreleasePoolPop(v4);
  return v7;
}

uint64_t FigRemote_RemoveSlotIDsFromVideoLayers(const __CFArray *a1)
{
  void *v2;
  CFIndex Count;
  CFIndex i;

  v2 = (void *)MEMORY[0x19403137C]();
  Count = CFArrayGetCount(a1);
  objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
  if (!pthread_main_np())
    objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
  objc_msgSend(MEMORY[0x1E0CD28B0], "setValue:forKey:", *MEMORY[0x1E0C9AE50], *MEMORY[0x1E0CD3160]);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
      objc_msgSend((id)CFArrayGetValueAtIndex(a1, i), "setContents:", 0);
  }
  objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
  objc_autoreleasePoolPop(v2);
  return 0;
}

uint64_t FigRemote_RemoveReleaseAndClearRemoteCAContext(id *a1, void *a2)
{
  void *v4;

  if (a1 && *a1)
  {
    v4 = (void *)MEMORY[0x19403137C]();
    objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
    if (!pthread_main_np())
      objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
    objc_msgSend(MEMORY[0x1E0CD28B0], "setValue:forKey:", *MEMORY[0x1E0C9AE50], *MEMORY[0x1E0CD3160]);
    objc_msgSend(a2, "removeFromSuperlayer");
    objc_msgSend(*a1, "setLayer:", 0);
    objc_msgSend(*a1, "invalidate");

    *a1 = 0;
    objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
    objc_autoreleasePoolPop(v4);
  }
  return 0;
}

uint64_t FigRemote_DestroyCARenderServerPort(int a1)
{
  if (a1)
    FigMachPortReleaseSendRight_();
  return 0;
}

uint64_t FigRemote_CreatePixelBufferAndPoolAttributesDictionary(const __CFAllocator *a1, void *a2, void *a3, CFDictionaryRef *a4)
{
  unsigned int v5;
  CFDictionaryRef v6;
  CFDictionaryRef v7;
  uint64_t result;
  void *values[2];
  void *keys[3];

  keys[2] = *(void **)MEMORY[0x1E0C80C00];
  if (!a4)
    return FigSignalErrorAt();
  keys[0] = 0;
  keys[1] = 0;
  values[0] = 0;
  values[1] = 0;
  if (a2)
  {
    keys[0] = CFSTR("PixelBufferPoolAtttributes");
    values[0] = a2;
    v5 = 1;
    if (!a3)
      goto LABEL_5;
    goto LABEL_4;
  }
  v5 = 0;
  if (a3)
  {
LABEL_4:
    keys[v5] = CFSTR("PixelBufferAttributes");
    values[v5++] = a3;
  }
LABEL_5:
  v6 = CFDictionaryCreate(a1, (const void **)keys, (const void **)values, v5, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v6)
    return FigSignalErrorAt();
  v7 = v6;
  result = 0;
  *a4 = v7;
  return result;
}

uint64_t FigRemote_CopyPixelBufferAndPoolAttributesFromDictionary(const __CFDictionary *a1, _QWORD *a2, _QWORD *a3)
{
  const void *Value;
  const void *v7;

  if (!a1 || !a2 || !a3)
    return FigSignalErrorAt();
  Value = CFDictionaryGetValue(a1, CFSTR("PixelBufferPoolAtttributes"));
  *a2 = Value;
  if (Value)
    CFRetain(Value);
  v7 = CFDictionaryGetValue(a1, CFSTR("PixelBufferAttributes"));
  *a3 = v7;
  if (v7)
    CFRetain(v7);
  return 0;
}

uint64_t FigFairPlaySharedContextLoad(const void *a1, CFTypeRef cf, const __CFDictionary *a3)
{
  const __CFURL *v6;
  const __CFURL *v7;
  const __CFString *v8;
  uint64_t v9;
  uint64_t DerivedStorage;
  CFTypeRef v11;
  CFTypeRef v12;
  const __CFBoolean *Value;
  const __CFBoolean *v14;
  CFTypeID v15;
  _BOOL4 v16;
  const __CFBoolean *v17;
  const __CFBoolean *v18;
  CFTypeID v19;
  const __CFBoolean *v20;
  const __CFBoolean *v21;
  CFTypeID v22;

  if (gSharedContextPoolInitOnce == -1)
  {
    if (cf)
    {
LABEL_3:
      v6 = (const __CFURL *)CFRetain(cf);
      goto LABEL_6;
    }
  }
  else
  {
    dispatch_once_f(&gSharedContextPoolInitOnce, 0, (dispatch_function_t)InitSharedContextPool);
    if (cf)
      goto LABEL_3;
  }
  v6 = FigFairPlayCopyDefaultKeybagFolderURL();
LABEL_6:
  v7 = v6;
  if (!v6)
    return 4294955146;
  MEMORY[0x19402EEEC](gSharedContextPoolLock);
  v8 = FigFairPlayCopyAbsolutePathFromURL(v7);
  if (!CFDictionaryContainsKey((CFDictionaryRef)gSharedContextPool, v8))
  {
    MEMORY[0x19402F294](&FigFairPlaySharedContextGetClassID_sRegisterFigFairPlaySharedContextTypeOnce, RegisterFigFairPlaySharedContextType);
    v9 = CMDerivedObjectCreate();
    if ((_DWORD)v9)
      goto LABEL_32;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (a1)
      v11 = CFRetain(a1);
    else
      v11 = 0;
    *(_QWORD *)DerivedStorage = v11;
    *(_QWORD *)(DerivedStorage + 8) = FigSimpleMutexCreate();
    *(_QWORD *)(DerivedStorage + 16) = CFSetCreateMutable((CFAllocatorRef)a1, 0, 0);
    if (v8)
      v12 = CFRetain(v8);
    else
      v12 = 0;
    *(_QWORD *)(DerivedStorage + 24) = v12;
    *(_QWORD *)(DerivedStorage + 32) = dispatch_queue_create("FigFPSharedContextFPInitializationQueue", 0);
    if (a3)
    {
      Value = (const __CFBoolean *)CFDictionaryGetValue(a3, CFSTR("InitializeForInspection"));
      v16 = Value && (v14 = Value, v15 = CFGetTypeID(Value), v15 == CFBooleanGetTypeID()) && CFBooleanGetValue(v14) != 0;
      v17 = (const __CFBoolean *)CFDictionaryGetValue(a3, CFSTR("InitializeForAudioPlayback"));
      if (v17)
      {
        v18 = v17;
        v19 = CFGetTypeID(v17);
        if (v19 == CFBooleanGetTypeID())
        {
          if (CFBooleanGetValue(v18))
            v16 = 1;
        }
      }
      v20 = (const __CFBoolean *)CFDictionaryGetValue(a3, CFSTR("InitializeForVideoPlayback"));
      if (v20)
      {
        v21 = v20;
        v22 = CFGetTypeID(v20);
        if (v22 == CFBooleanGetTypeID())
        {
          if (!(CFBooleanGetValue(v21) | v16))
            goto LABEL_31;
          goto LABEL_30;
        }
      }
      if (v16)
LABEL_30:
        dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 32), 0, (dispatch_function_t)FigFairPlaySharedContextLoad_EnsureFairPlayContext);
    }
LABEL_31:
    CFDictionaryAddValue((CFMutableDictionaryRef)gSharedContextPool, v8, 0);
    goto LABEL_32;
  }
  v9 = 0;
LABEL_32:
  if (v8)
    CFRelease(v8);
  MEMORY[0x19402EF04](gSharedContextPoolLock);
  CFRelease(v7);
  return v9;
}

CFMutableDictionaryRef InitSharedContextPool()
{
  CFMutableDictionaryRef result;

  gSharedContextPoolLock = FigSimpleMutexCreate();
  result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  gSharedContextPool = (uint64_t)result;
  return result;
}

void FigFairPlaySharedContextLoad_EnsureFairPlayContext(const void *a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  EnsureFairPlayContext(DerivedStorage);
  if (a1)
    CFRelease(a1);
}

uint64_t FigFairPlaySharedContextUnload(CFTypeRef cf)
{
  const __CFURL *v2;
  const __CFURL *v3;
  const __CFString *v4;
  uint64_t Value;
  uint64_t DerivedStorage;
  CFIndex Count;
  uint64_t (*v9)(uint64_t);

  if (gSharedContextPoolInitOnce == -1)
  {
    if (cf)
    {
LABEL_3:
      v2 = (const __CFURL *)CFRetain(cf);
      goto LABEL_6;
    }
  }
  else
  {
    dispatch_once_f(&gSharedContextPoolInitOnce, 0, (dispatch_function_t)InitSharedContextPool);
    if (cf)
      goto LABEL_3;
  }
  v2 = FigFairPlayCopyDefaultKeybagFolderURL();
LABEL_6:
  v3 = v2;
  if (!v2)
    return 4294955146;
  MEMORY[0x19402EEEC](gSharedContextPoolLock);
  v4 = FigFairPlayCopyAbsolutePathFromURL(v3);
  Value = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)gSharedContextPool, v4);
  if (Value)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
    Count = CFSetGetCount(*(CFSetRef *)(DerivedStorage + 16));
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 8));
    if (Count <= 0)
    {
      v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v9)
      {
        Value = v9(Value);
        if (!(_DWORD)Value)
          CFDictionaryRemoveValue((CFMutableDictionaryRef)gSharedContextPool, v4);
      }
      else
      {
        Value = 4294954514;
      }
    }
    else
    {
      Value = 4294955138;
    }
  }
  if (v4)
    CFRelease(v4);
  MEMORY[0x19402EF04](gSharedContextPoolLock);
  CFRelease(v3);
  return Value;
}

uint64_t FigFairPlaySharedContextCopyForKeybagURLAndClient(const void *a1, const void *a2, const void *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v8;
  const __CFString *v9;
  const void *Value;
  const void *v11;
  uint64_t DerivedStorage;
  CFTypeRef v13;

  v4 = 4294955146;
  if (a2 && a3 && a4)
  {
    v8 = FigFairPlaySharedContextLoad(a1, a2, 0);
    if ((_DWORD)v8)
      return v8;
    MEMORY[0x19402EEEC](gSharedContextPoolLock);
    v9 = FigFairPlayCopyAbsolutePathFromURL((const __CFURL *)a2);
    Value = CFDictionaryGetValue((CFDictionaryRef)gSharedContextPool, v9);
    if (Value)
    {
      v11 = Value;
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
      CFSetAddValue(*(CFMutableSetRef *)(DerivedStorage + 16), a3);
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 8));
      v13 = CFRetain(v11);
      v4 = 0;
      *a4 = v13;
      if (!v9)
      {
LABEL_8:
        MEMORY[0x19402EF04](gSharedContextPoolLock);
        return v4;
      }
    }
    else
    {
      v4 = 4294955138;
      if (!v9)
        goto LABEL_8;
    }
    CFRelease(v9);
    goto LABEL_8;
  }
  return v4;
}

uint64_t FigFairPlaySharedContextEqual(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && v5)
    return CFEqual(*(CFTypeRef *)(DerivedStorage + 24), *(CFTypeRef *)(v5 + 24));
  else
    return a1 == a2;
}

uint64_t FigFairPlaySharedContextInvalidate()
{
  uint64_t result;
  CFTypeRef *v1;
  const __CFSet *v2;
  CFTypeRef v3;

  result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    v1 = (CFTypeRef *)result;
    MEMORY[0x19402EEEC](*(_QWORD *)(result + 8));
    v2 = (const __CFSet *)v1[2];
    if (v2 && !CFSetGetCount(v2))
    {
      v3 = v1[2];
      if (v3)
      {
        CFRelease(v3);
        v1[2] = 0;
      }
      MEMORY[0x19402EF04](v1[1]);
      dispatch_sync_f((dispatch_queue_t)v1[4], v1, (dispatch_function_t)FigFairPlaySharedContextInvalidate_FairPlay);
      if (*v1)
      {
        CFRelease(*v1);
        *v1 = 0;
      }
      result = (uint64_t)v1[3];
      if (result)
      {
        CFRelease((CFTypeRef)result);
        result = 0;
        v1[3] = 0;
      }
    }
    else
    {
      MEMORY[0x19402EF04](v1[1]);
      return 4294955138;
    }
  }
  return result;
}

void FigFairPlaySharedContextFinalize()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigFairPlaySharedContextInvalidate();
  FigSimpleMutexDestroy();
  dispatch_release(*(dispatch_object_t *)(DerivedStorage + 32));
}

__CFString *FigFairPlaySharedContextCopyDebugDescription()
{
  CFAllocatorRef *DerivedStorage;
  CFAllocatorRef *v1;
  __CFString *Mutable;
  __CFString *v3;

  DerivedStorage = (CFAllocatorRef *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return 0;
  v1 = DerivedStorage;
  Mutable = CFStringCreateMutable(*DerivedStorage, 0);
  v3 = Mutable;
  if (Mutable)
    CFStringAppendFormat(Mutable, 0, CFSTR("<FigFPSharedContext: context<0x%x>"), *((unsigned int *)v1 + 11));
  return v3;
}

uint64_t FigFairPlaySharedContextCopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t result;
  void *v8;
  void *v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = 4294955146;
  if (a4 && a2 && DerivedStorage)
  {
    if (CFEqual(a2, CFSTR("3721370B-B25B-4EED-A8C8-F27CAA873C75")))
    {
      dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 32), (void *)DerivedStorage, (dispatch_function_t)EnsureFairPlayContext);
      v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, (const void *)(DerivedStorage + 44));
    }
    else
    {
      if (!CFEqual(a2, CFSTR("ED1C2894-E22E-4BCB-9D7F-BE48EF1B699E")))
        return 4294955144;
      v8 = (void *)CFRetain(*(CFTypeRef *)(DerivedStorage + 24));
    }
    v9 = v8;
    result = 0;
    *a4 = v9;
  }
  return result;
}

uint64_t FigFairPlaySharedContextSetProperty()
{
  return 4294955144;
}

uint64_t FigFairPlaySharedContextInvalidate_FairPlay(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = result;
  if (*(_BYTE *)(result + 40))
  {
    result = *(unsigned int *)(result + 44);
    if ((_DWORD)result)
    {
      v2 = VLxCLgDpiF(result);
      result = FAIRPLAY_CALL_LOG(v2);
      *(_DWORD *)(v1 + 44) = 0;
    }
  }
  *(_BYTE *)(v1 + 41) = 1;
  return result;
}

void EnsureFairPlayContext(uint64_t a1)
{
  uint64_t v2;
  const __CFString *v3;
  const __CFString *v4;
  CFIndex Length;
  uint64_t CStringPtrAndBufferToFree;
  uint64_t v7;
  CFIndex v8;
  UInt8 *v9;
  UInt8 *v10;
  uint64_t v11;
  CFIndex maxBufLen;
  void *v13;
  _QWORD v14[4];
  CFRange v15;
  CFRange v16;

  v14[3] = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 40) || (df35957c4e0(), FAIRPLAY_CALL_LOG(v2) == -42032))
  {
    if (!*(_BYTE *)(a1 + 41))
    {
      memset(v14, 0, 24);
      maxBufLen = 0;
      v13 = 0;
      *(_DWORD *)(a1 + 44) = 0;
      v3 = (const __CFString *)MGCopyAnswer();
      if (v3)
      {
        v4 = v3;
        Length = CFStringGetLength(v3);
        CFStringGetSystemEncoding();
        CStringPtrAndBufferToFree = FigCFStringGetCStringPtrAndBufferToFree();
        zxcm2Qme0x(CStringPtrAndBufferToFree, Length, (uint64_t)v14);
        LODWORD(Length) = FAIRPLAY_CALL_LOG(v7);
        free(v13);
        CFRelease(v4);
        if (!(_DWORD)Length)
        {
          v8 = CFStringGetLength(*(CFStringRef *)(a1 + 24));
          v15.location = 0;
          v15.length = v8;
          if (CFStringGetBytes(*(CFStringRef *)(a1 + 24), v15, 0x8000100u, 0, 0, 0, 0, &maxBufLen) >= 1)
          {
            v9 = (UInt8 *)malloc_type_malloc(maxBufLen + 2, 0xDD04F135uLL);
            if (v9)
            {
              v10 = v9;
              v16.location = 0;
              v16.length = v8;
              CFStringGetBytes(*(CFStringRef *)(a1 + 24), v16, 0x8000100u, 0, 0, v9, maxBufLen, &maxBufLen);
              v10[maxBufLen] = 0;
              v11 = XtCqEf5X(0, (uint64_t)v14, (uint64_t)v10, a1 + 44);
              if (FAIRPLAY_CALL_LOG(v11))
                *(_DWORD *)(a1 + 44) = 0;
              free(v10);
            }
          }
        }
      }
      *(_BYTE *)(a1 + 40) = 1;
    }
  }
}

uint64_t RemoveClient(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = 4294955146;
  if (a1)
  {
    if (a2)
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
      CFSetRemoveValue(*(CFMutableSetRef *)(DerivedStorage + 16), a2);
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 8));
      return 0;
    }
  }
  return result;
}

uint64_t RegisterFigFairPlaySharedContextType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFTypeRef FigFairPlaySharedContextCopyFormattingDesc()
{
  return CFRetain(CFSTR("[FigFPSharedContext]"));
}

uint64_t FigCaptionRendererBaseProtocolGetProtocolID()
{
  MEMORY[0x19402F294](&FigCaptionRendererBaseProtocolGetProtocolID_sRegisterFigCaptionRendererBaseProtocolTypeOnce, RegisterFigCaptionRendererBaseProtocolType);
  return sFigCaptionRendererBaseProtocolID;
}

uint64_t RegisterFigCaptionRendererBaseProtocolType()
{
  return FigBaseProtocolRegisterProtocol();
}

uint64_t FigCDSPaintOnCaptionSetCurrentTime(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  void (*v10)(uint64_t, CMTime *);
  const void *value;
  const void *v12;
  __int128 *v13;
  double Seconds;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, __int128 *);
  __int128 v20;
  Float64 v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t *);
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  double FigBaseObject;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, __int128 *);
  const __CFAttributedString *v35;
  uint64_t Length;
  __int128 v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, __int128 *);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, _QWORD *);
  __int128 v53;
  double v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, CMTime *);
  BOOL v60;
  double v61;
  CFIndex v62;
  CFRange v63;
  CFAttributedStringRef v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, CFAttributedStringRef);
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t);
  __int128 v75;
  __int128 v76;
  _QWORD v77[2];
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  CMTime cf;
  __int128 v82;

  if (a1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v7 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)(DerivedStorage + 8) = *(_OWORD *)a2;
    *(_QWORD *)(DerivedStorage + 24) = v7;
    if (!*(_QWORD *)(DerivedStorage + 64))
    {
      cf.value = 0;
      FigCDSCaptionProtocolGetProtocolID();
      ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable
        && (v9 = *(_QWORD *)(ProtocolVTable + 16)) != 0
        && (v10 = *(void (**)(uint64_t, CMTime *))(v9 + 32)) != 0)
      {
        v10(a1, &cf);
        value = (const void *)cf.value;
        v12 = *(const void **)(DerivedStorage + 64);
        *(_QWORD *)(DerivedStorage + 64) = cf.value;
        if (value)
          CFRetain(value);
      }
      else
      {
        v12 = *(const void **)(DerivedStorage + 64);
        *(_QWORD *)(DerivedStorage + 64) = 0;
      }
      if (v12)
        CFRelease(v12);
    }
    v13 = (__int128 *)(DerivedStorage + 8);
    cf = *(CMTime *)(DerivedStorage + 32);
    Seconds = CMTimeGetSeconds(&cf);
    *(_QWORD *)&v78 = FigBytePumpGetFigBaseObject(v15);
    *((_QWORD *)&v78 + 1) = v16;
    FigCDSIntervalProtocolGetProtocolID();
    v17 = CMBaseObjectGetProtocolVTable();
    if (v17)
    {
      v18 = *(_QWORD *)(v17 + 16);
      if (v18)
      {
        v19 = *(void (**)(uint64_t, __int128 *))(v18 + 8);
        if (v19)
          v19(a1, &v78);
      }
    }
    v20 = *v13;
    cf.epoch = *(_QWORD *)(DerivedStorage + 24);
    *(_OWORD *)&cf.value = v20;
    v21 = CMTimeGetSeconds(&cf);
    if (v21 == *(double *)&v78)
    {
      *(_BYTE *)(DerivedStorage + 56) = 1;
      if (a3)
      {
        v80 = 0;
        FigCDSNodeProtocolGetProtocolID();
        v22 = CMBaseObjectGetProtocolVTable();
        if (v22
          && (v23 = *(_QWORD *)(v22 + 16)) != 0
          && (v24 = *(void (**)(uint64_t, uint64_t *))(v23 + 16)) != 0)
        {
          v24(a1, &v80);
          v25 = v80;
        }
        else
        {
          v25 = 0;
        }
        v45 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
        v78 = *MEMORY[0x1E0C9D628];
        v79 = v45;
        FigCDSNodeProtocolGetProtocolID();
        v46 = CMBaseObjectGetProtocolVTable();
        if (v46)
        {
          v47 = *(_QWORD *)(v46 + 16);
          if (v47)
          {
            v48 = *(uint64_t (**)(uint64_t, __int128 *))(v47 + 104);
            if (v48)
              v46 = v48(v25, &v78);
          }
        }
        v77[0] = FigBytePumpGetFigBaseObject(v46);
        v77[1] = v49;
        FigCDSIntervalProtocolGetProtocolID();
        v50 = CMBaseObjectGetProtocolVTable();
        if (v50)
        {
          v51 = *(_QWORD *)(v50 + 16);
          if (v51)
          {
            v52 = *(void (**)(uint64_t, _QWORD *))(v51 + 8);
            if (v52)
              v52(a1, v77);
          }
        }
        v53 = *v13;
        cf.epoch = *(_QWORD *)(DerivedStorage + 24);
        *(_OWORD *)&cf.value = v53;
        v54 = CMTimeGetSeconds(&cf);
        v55 = *(double *)v77;
        v75 = v78;
        v76 = v79;
        *(_QWORD *)(DerivedStorage + 72) = 0x2100000021;
        v56 = v80;
        FigCDSNodeProtocolGetProtocolID();
        v57 = CMBaseObjectGetProtocolVTable();
        if (v57)
        {
          v58 = *(_QWORD *)(v57 + 16);
          if (v58)
          {
            v59 = *(void (**)(uint64_t, CMTime *))(v58 + 296);
            if (v59)
            {
              LODWORD(cf.value) = 0;
              HIDWORD(cf.value) = (int)((Seconds - (v54 - v55)) * 1000.0);
              *(_OWORD *)&cf.timescale = v75;
              v82 = v76;
              v59(v56, &cf);
            }
          }
        }
        return 0;
      }
    }
    else
    {
      *(_BYTE *)(DerivedStorage + 56) = 0;
    }
    v26 = *(_DWORD *)(DerivedStorage + 72);
    v27 = __OFSUB__(v26, 33);
    v26 -= 33;
    *(_DWORD *)(DerivedStorage + 72) = v26;
    if (!((v26 < 0) ^ v27 | (v26 == 0)))
      return 0;
    *(_DWORD *)(DerivedStorage + 72) = *(_DWORD *)(DerivedStorage + 76);
    v28 = CMBaseObjectGetDerivedStorage();
    FigBaseObject = FigBytePumpGetFigBaseObject(v28);
    v31 = v30;
    *(double *)&v78 = FigBaseObject;
    *((double *)&v78 + 1) = v30;
    FigCDSIntervalProtocolGetProtocolID();
    v32 = CMBaseObjectGetProtocolVTable();
    if (v32)
    {
      v33 = *(_QWORD *)(v32 + 16);
      if (v33)
      {
        v34 = *(void (**)(uint64_t, __int128 *))(v33 + 8);
        if (v34)
        {
          v34(a1, &v78);
          v31 = *((double *)&v78 + 1);
        }
      }
    }
    if (v31 <= 0.0)
    {
      FigSignalErrorAt();
      return 0;
    }
    v35 = *(const __CFAttributedString **)(v28 + 64);
    Length = CFAttributedStringGetLength(v35);
    v37 = *(_OWORD *)(v28 + 8);
    cf.epoch = *(_QWORD *)(v28 + 24);
    *(_OWORD *)&cf.value = v37;
    v38 = CMTimeGetSeconds(&cf);
    cf = *(CMTime *)(v28 + 32);
    v39 = CMTimeGetSeconds(&cf);
    v40 = v38 - *(double *)&v78;
    if (v39 <= 0.0 || Length <= 0)
    {
      v43 = (double)Length;
    }
    else
    {
      v41 = v40 * 1000.0 / 33.0;
      v42 = v41 + v41;
      if (v41 < 0.0)
        v42 = 0.0;
      v43 = (double)Length;
      v44 = v42 / (double)Length;
      if (v44 <= 1.0)
        goto LABEL_50;
    }
    v44 = 1.0;
LABEL_50:
    v60 = (v39 - v40) * 1000.0 < 66.0;
    v61 = 1.0;
    if (!v60)
      v61 = v44;
    LODWORD(v62) = llround(v43 * v61);
    if ((int)v62 <= 1)
      v62 = 1;
    else
      v62 = v62;
    if (Length >= v62)
      v63.length = v62;
    else
      v63.length = Length;
    v63.location = 0;
    v64 = CFAttributedStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v35, v63);
    FigCDSCaptionProtocolGetProtocolID();
    v65 = CMBaseObjectGetProtocolVTable();
    if (v65)
    {
      v66 = *(_QWORD *)(v65 + 16);
      if (v66)
      {
        v67 = *(void (**)(uint64_t, CFAttributedStringRef))(v66 + 24);
        if (v67)
          v67(a1, v64);
      }
    }
    if (v64)
      CFRelease(v64);
    FigCDSNodeProtocolGetProtocolID();
    v68 = CMBaseObjectGetProtocolVTable();
    if (v68)
    {
      v69 = *(_QWORD *)(v68 + 16);
      if (v69)
      {
        v70 = *(void (**)(uint64_t, uint64_t))(v69 + 216);
        if (v70)
          v70(a1, 1);
      }
    }
    FigCDSNodeProtocolGetProtocolID();
    v71 = CMBaseObjectGetProtocolVTable();
    if (v71)
    {
      v72 = *(_QWORD *)(v71 + 16);
      if (v72)
      {
        v73 = *(void (**)(uint64_t, uint64_t))(v72 + 200);
        if (v73)
          v73(a1, 1);
      }
    }
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t FigTTMLFeatureCreate(const __CFAllocator *a1, uint64_t a2, __int128 *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t DerivedStorage;
  const char *v12;
  const __CFString *v13;
  const __CFString *v14;
  uint64_t v15;

  v8 = FigTTMLGetLibXMLAccess();
  if (v8)
  {
    v9 = v8;
    if (a4)
    {
      FigTTMLNodeGetClassID();
      v10 = CMDerivedObjectCreate();
      if (!(_DWORD)v10)
      {
        DerivedStorage = CMBaseObjectGetDerivedStorage();
        v10 = FigTTMLInitializeNodeBaseStorage(DerivedStorage, a3);
        if (!(_DWORD)v10)
        {
          v10 = FigTTMLAddCurrentElementAttributesToDictionary(a2, *(__CFDictionary **)(DerivedStorage + 24));
          if (!(_DWORD)v10)
          {
            v12 = (const char *)(*(uint64_t (**)(uint64_t))(v9 + 104))(a2);
            v13 = CFStringCreateWithCString(a1, v12, 0x8000100u);
            if (!v13)
            {
              v15 = FigSignalErrorAt();
              goto LABEL_10;
            }
            v14 = v13;
            if (CFStringGetLength(v13))
            {
              v15 = FigTTMLSkipNode(a2, (uint64_t *)a3, *(__CFArray **)(DerivedStorage + 128));
              if (!(_DWORD)v15)
              {
                *(_QWORD *)(DerivedStorage + 144) = v14;
                *a4 = 0;
LABEL_10:
                (*(void (**)(const char *))(v9 + 112))(v12);
                return v15;
              }
            }
            else
            {
              v15 = FigSignalErrorAt();
            }
            CFRelease(v14);
            goto LABEL_10;
          }
        }
      }
    }
    else
    {
      v10 = FigSignalErrorAt();
    }
    v15 = v10;
    v12 = 0;
    goto LABEL_10;
  }
  return FigSignalErrorAt();
}

void figTTMLFeature_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 136);
  if (v1)
    CFRelease(v1);
  v2 = *(const void **)(DerivedStorage + 144);
  if (v2)
    CFRelease(v2);
  FigTTMLReleaseNodeBaseStorage(DerivedStorage);
}

CFStringRef figTTMLFeature_CopyDebugDesc()
{
  uint64_t DerivedStorage;
  const void *v1;
  CFStringRef v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = (const void *)FigCFCopyCompactDescription();
  v2 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("feature[%@] : %@(%@)"), v1, *(_QWORD *)(DerivedStorage + 144), *(_QWORD *)(DerivedStorage + 136));
  if (v1)
    CFRelease(v1);
  return v2;
}

uint64_t figTTMLFeature_CopyChildNodeArray(const void *a1, CFMutableArrayRef *a2)
{
  const __CFAllocator *v3;

  if (!a2)
    return FigSignalErrorAt();
  v3 = CFGetAllocator(a1);
  *a2 = CFArrayCreateMutable(v3, 0, MEMORY[0x1E0C9B378]);
  return 0;
}

uint64_t figTTMLFeature_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2)
    return FigSignalErrorAt();
  *a2 = 18;
  return 0;
}

uint64_t FigTTMLBodyCreate(const __CFAllocator *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t DerivedStorage;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v11;
  uint64_t v12;

  if (a4)
  {
    FigTTMLNodeGetClassID();
    v8 = CMDerivedObjectCreate();
    if (!(_DWORD)v8)
    {
      FigBytePumpGetFigBaseObject(0);
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v8 = FigTTMLInitializeNodeBaseStorage(DerivedStorage, (__int128 *)a3);
      if (!(_DWORD)v8)
      {
        v8 = FigTTMLAddCurrentElementAttributesToDictionary(a2, *(__CFDictionary **)(DerivedStorage + 24));
        if (!(_DWORD)v8)
        {
          Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
          *(_QWORD *)(DerivedStorage + 136) = Mutable;
          if (Mutable)
          {
            v11 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
            *(_QWORD *)(DerivedStorage + 144) = v11;
            if (v11)
            {
              *(_QWORD *)a3 = 0;
              *(_QWORD *)(a3 + 8) = 0;
              v12 = FigTTMLParseNode(a2, (uint64_t (*)(uint64_t, uint64_t *, CFTypeRef *))figTTMLBodyConsumeChildNode, (uint64_t *)a3);
              if (!(_DWORD)v12)
                *a4 = 0;
              return v12;
            }
          }
          return FigSignalErrorAt();
        }
      }
    }
    return v8;
  }
  return FigSignalErrorAt();
}

uint64_t figTTMLBodyConsumeChildNode(uint64_t a1, CFTypeRef *a2, void **a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  const __CFAllocator *v9;
  __CFArray *v10;
  CFAllocatorRef v11;
  uint64_t v12;
  CFTypeRef cf;
  CFTypeRef v15;
  void *value;

  FigBytePumpGetFigBaseObject(*a2);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v15 = 0;
  value = 0;
  cf = 0;
  v7 = FigTTMLGetLibXMLAccess();
  if (!v7)
  {
    v12 = FigSignalErrorAt();
    goto LABEL_18;
  }
  if ((*(unsigned int (**)(uint64_t))(v7 + 72))(a1) != 1)
    goto LABEL_13;
  v8 = FigTTMLCopyNamespaceAndLocalNameOfCurrentNode(a1, (const char **)&v15, (CFStringRef *)&cf);
  if ((_DWORD)v8)
    goto LABEL_23;
  if (FigCFEqual() && FigCFEqual())
  {
    v9 = CFGetAllocator(*a2);
    v8 = FigTTMLDivCreate(v9, a1, (uint64_t)a2, &value);
    if (!(_DWORD)v8)
    {
      v10 = *(__CFArray **)(DerivedStorage + 136);
LABEL_12:
      CFArrayAppendValue(v10, value);
      goto LABEL_14;
    }
    goto LABEL_23;
  }
  if (!FigCFEqual() || !FigCFEqual())
  {
LABEL_13:
    v8 = FigTTMLSkipNode(a1, (uint64_t *)a2, *(__CFArray **)(DerivedStorage + 128));
    if (!(_DWORD)v8)
    {
LABEL_14:
      v12 = 0;
      if (a3)
      {
        *a3 = value;
        value = 0;
      }
      goto LABEL_16;
    }
    goto LABEL_23;
  }
  v11 = CFGetAllocator(*a2);
  v8 = FigTTMLSetCreate((uint64_t)v11, a1, (uint64_t)a2, &value);
  if (!(_DWORD)v8)
  {
    v10 = *(__CFArray **)(DerivedStorage + 144);
    goto LABEL_12;
  }
LABEL_23:
  v12 = v8;
LABEL_16:
  if (cf)
    CFRelease(cf);
LABEL_18:
  if (v15)
    CFRelease(v15);
  if (value)
    CFRelease(value);
  return v12;
}

void figTTMLBody_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v2;
  const void *v3;

  FigBytePumpGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v2 = *(const void **)(DerivedStorage + 136);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(DerivedStorage + 144);
  if (v3)
    CFRelease(v3);
  FigTTMLReleaseNodeBaseStorage(DerivedStorage);
}

CFStringRef figTTMLBody_CopyDebugDesc(uint64_t a1)
{
  const void *v1;
  CFStringRef v2;

  FigBytePumpGetFigBaseObject(a1);
  CMBaseObjectGetDerivedStorage();
  v1 = (const void *)FigCFCopyCompactDescription();
  v2 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("body: %@"), v1);
  if (v1)
    CFRelease(v1);
  return v2;
}

uint64_t figTTMLBody_CopyChildNodeArray(uint64_t a1, uint64_t *a2)
{
  FigBytePumpGetFigBaseObject(a1);
  CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  *a2 = FigCFArrayCreateConcatenationOfTwoArrays();
  return 0;
}

uint64_t figTTMLBody_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2)
    return FigSignalErrorAt();
  *a2 = 2;
  return 0;
}

const __CFDictionary *FigCPEFairPlaySupportsFormatDescription(const opaqueCMFormatDescription *a1)
{
  const __CFDictionary *result;
  const __CFDictionary *v2;
  int SchemeFromSinf;
  unsigned int v5;

  v5 = 0;
  result = FigFairPlayCopySinfExtensionsFromFormatDescription(a1);
  if (result)
  {
    v2 = result;
    SchemeFromSinf = FigFairPlayGetSchemeFromSinf(result, &v5);
    CFRelease(v2);
    return (const __CFDictionary *)(!SchemeFromSinf && v5 == 1769239918);
  }
  return result;
}

uint64_t FigCPEFairPlayInitializeWithOptions(const __CFDictionary *a1, const __CFString **a2)
{
  const void *Value;
  uint64_t v5;

  Value = CFDictionaryGetValue(a1, CFSTR("StorageURL"));
  FigBytePumpGetFigBaseObject(Value);
  if (Value)
    CFRetain(Value);
  else
    Value = FigFairPlayCopyDefaultKeybagFolderURL();
  v5 = FigFairPlaySharedContextLoad((const void *)*MEMORY[0x1E0C9AE00], Value, a1);
  if (!(_DWORD)v5)
  {
    *a2 = FigFairPlayCopyAbsolutePathFromURL((const __CFURL *)Value);
    if (!Value)
      return v5;
    goto LABEL_6;
  }
  if (Value)
LABEL_6:
    CFRelease(Value);
  return v5;
}

uint64_t FigCPEFairPlayUninitialize(CFStringRef URLString)
{
  CFURLRef v1;
  uint64_t v2;

  v1 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], URLString, 0);
  v2 = FigFairPlaySharedContextUnload(v1);
  if (v1)
    CFRelease(v1);
  return v2;
}

uint64_t FigCPEFairPlayProtectorCreateForFormatDescriptions(const void *a1, const __CFDictionary *a2, const __CFDictionary *a3, CFTypeRef *a4)
{
  CFTypeRef *v4;
  uint64_t v8;
  uint64_t DerivedStorage;
  uint64_t v10;
  CFTypeRef v11;
  const void *Value;
  const void *v13;
  CFTypeID v14;
  const void *v15;
  uint64_t v16;
  const void *v17;
  CFTypeID v18;
  const void *v19;
  const void *v20;
  CFTypeID v21;
  const void *v22;
  const __CFBoolean *v23;
  const __CFBoolean *v24;
  CFTypeID v25;
  CFMutableDictionaryRef Mutable;
  uint64_t v27;
  const __CFDictionary *v28;
  const __CFArray *v29;
  const __CFArray *v30;
  CFTypeID v31;
  int64_t Count;
  size_t v33;
  const void **v34;
  const void **v35;
  CFIndex v36;
  const void **v37;
  size_t v38;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v40;
  CFTypeID v41;
  const __CFNumber *v42;
  const __CFNumber *v43;
  CFTypeID v44;
  const void *v45;
  const void *v46;
  CFDictionaryRef SinfExtensionsFromSinfData;
  const void *v48;
  const void *v49;
  CFIndex v50;
  size_t v51;
  const void **v52;
  const void **v53;
  uint64_t v54;
  uint64_t v55;
  const void *v56;
  CFDictionaryRef v57;
  int v58;
  uint64_t i;
  const void *v60;
  const void *v61;
  const void *v62;
  uint64_t v63;
  const void **v64;
  const void *v65;
  uint64_t v66;
  const void *v67;
  CFTypeRef v68;
  const __CFDictionary *v69;
  uint64_t v70;
  dispatch_queue_t v71;
  CFMutableDictionaryRef v72;
  uint64_t v74;
  CFTypeRef *v75;
  uint64_t v76;
  const __CFAllocator *allocator;
  CFMutableDictionaryRef context;
  uint64_t v79;
  CFTypeRef cf;
  CFTypeRef valuePtr;
  __int128 v82;

  v79 = 0;
  cf = 0;
  context = 0;
  if (!a4)
    return 4294955146;
  v4 = a4;
  MEMORY[0x19402F294](&FigFairPlayCPEProtectorGetClassID_sRegisterFigFairPlayCPEProtectorTypeOnce, RegisterFigFairPlayCPEProtectorType);
  v8 = CMDerivedObjectCreate();
  if ((_DWORD)v8)
  {
    v16 = v8;
    goto LABEL_119;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    goto LABEL_118;
  v10 = DerivedStorage;
  if (a1)
    v11 = CFRetain(a1);
  else
    v11 = 0;
  *(_QWORD *)v10 = v11;
  *(_QWORD *)&v82 = 0;
  FigBytePumpGetFigBaseObject(v11);
  if (!a3
    || (Value = CFDictionaryGetValue(a3, CFSTR("StorageURL"))) == 0
    || (v13 = Value, v14 = CFGetTypeID(Value), v14 != CFURLGetTypeID())
    || (v15 = CFRetain(v13)) == 0)
  {
    v15 = FigFairPlayCopyDefaultKeybagFolderURL();
  }
  v16 = FigFairPlaySharedContextCopyForKeybagURLAndClient(a1, v15, cf, &v82);
  if (!(_DWORD)v16)
  {
    *(_QWORD *)(v10 + 8) = v82;
    *(_QWORD *)&v82 = 0;
  }
  if (v15)
    CFRelease(v15);
  if ((_QWORD)v82)
    CFRelease((CFTypeRef)v82);
  if ((_DWORD)v16)
    goto LABEL_119;
  if (a3)
  {
    v17 = CFDictionaryGetValue(a3, CFSTR("AE50A074-4909-4EBC-8ADF-C8DDD5F591AA"));
    *(_QWORD *)(v10 + 48) = v17;
    if (v17)
    {
      v18 = CFGetTypeID(v17);
      if (v18 != CFDictionaryGetTypeID())
        goto LABEL_78;
      v19 = *(const void **)(v10 + 48);
      if (v19)
        CFRetain(v19);
    }
    v20 = CFDictionaryGetValue(a3, CFSTR("9692C034-625A-4B20-9D38-D1E9CF40B67F"));
    *(_QWORD *)(v10 + 40) = v20;
    if (v20)
    {
      v21 = CFGetTypeID(v20);
      if (v21 != CFDictionaryGetTypeID())
        goto LABEL_78;
      v22 = *(const void **)(v10 + 40);
      if (v22)
        CFRetain(v22);
    }
    v23 = (const __CFBoolean *)CFDictionaryGetValue(a3, CFSTR("MonitorExternalProtectionState"));
    if (v23)
    {
      v24 = v23;
      v25 = CFGetTypeID(v23);
      if (v25 == CFBooleanGetTypeID())
      {
        *(_BYTE *)(v10 + 73) = CFBooleanGetValue(v24);
        goto LABEL_31;
      }
LABEL_78:
      v16 = 4294955136;
      goto LABEL_119;
    }
  }
LABEL_31:
  if (a2)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    context = Mutable;
    *(_QWORD *)(v10 + 16) = Mutable;
    if (Mutable)
    {
      CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)FormatDescriptionFilter, &context);
      *(_QWORD *)(v10 + 24) = v79;
      if (CFDictionaryGetCount(*(CFDictionaryRef *)(v10 + 16)) < 1)
      {
        v16 = 4294955141;
        goto LABEL_119;
      }
LABEL_37:
      v27 = CMBaseObjectGetDerivedStorage();
      v82 = xmmword_1932FAB00;
      v28 = *(const __CFDictionary **)(v27 + 48);
      if (v28)
      {
        v29 = (const __CFArray *)CFDictionaryGetValue(v28, CFSTR("sinfs"));
        if (!v29)
          goto LABEL_78;
        v30 = v29;
        v31 = CFGetTypeID(v29);
        if (v31 != CFArrayGetTypeID())
          goto LABEL_78;
        Count = CFArrayGetCount(v30);
        if (Count < 1)
          goto LABEL_78;
        v33 = Count;
        v74 = v10;
        v76 = v27;
        v75 = v4;
        v34 = (const void **)malloc_type_calloc(Count, 8uLL, 0xC0040B8AA526DuLL);
        v35 = (const void **)malloc_type_calloc(v33, 8uLL, 0xC0040B8AA526DuLL);
        v36 = 0;
        allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v37 = v34;
        v38 = v33;
        while (1)
        {
          LODWORD(valuePtr) = 0;
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v30, v36);
          if (!ValueAtIndex)
            break;
          v40 = ValueAtIndex;
          v41 = CFGetTypeID(ValueAtIndex);
          if (v41 != CFDictionaryGetTypeID())
            break;
          v42 = (const __CFNumber *)CFDictionaryGetValue(v40, CFSTR("id"));
          if (!v42)
            break;
          v43 = v42;
          v44 = CFGetTypeID(v42);
          if (v44 != CFNumberGetTypeID()
            || !CFNumberGetValue(v43, kCFNumberSInt32Type, &valuePtr)
            || (valuePtr & 0x80000000) != 0)
          {
            break;
          }
          if ((_DWORD)valuePtr)
          {
            *v37 = FigCPECreateFormatDescriptionIdentifierForTrackIDAndIndex(allocator, valuePtr, 0);
          }
          else
          {
            if (CFDictionaryGetCount(*(CFDictionaryRef *)(v76 + 16)) != 1)
              goto LABEL_67;
            CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(v76 + 16), v37, 0);
            if (*v37)
              CFRetain(*v37);
          }
          v45 = CFDictionaryGetValue(v40, CFSTR("sinf"));
          v46 = CFDictionaryGetValue(v40, CFSTR("sinf2"));
          SinfExtensionsFromSinfData = FigFairPlayCreateSinfExtensionsFromSinfData((unint64_t)v45, (unint64_t)v46);
          v35[v36] = SinfExtensionsFromSinfData;
          if (!SinfExtensionsFromSinfData)
          {
            v48 = CFDictionaryGetValue(v40, CFSTR("pinf"));
            v49 = CFDictionaryGetValue(v40, CFSTR("dpInfo"));
            SinfExtensionsFromSinfData = FigFairPlayCreateSinfExtensionsFromPinfData((unint64_t)v48, (unint64_t)v49);
            v35[v36] = SinfExtensionsFromSinfData;
          }
          if (!*v37 || !SinfExtensionsFromSinfData)
          {
LABEL_67:
            v16 = 0;
            v57 = 0;
            goto LABEL_68;
          }
          ++v36;
          ++v37;
          if (!--v38)
          {
            v57 = CFDictionaryCreate(allocator, v34, v35, v33, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            v16 = 0;
LABEL_68:
            v58 = 1;
            goto LABEL_70;
          }
        }
        v58 = 0;
        v57 = 0;
        v16 = 4294955136;
LABEL_70:
        for (i = 0; i != v33; ++i)
        {
          v60 = v34[i];
          if (v60)
            CFRelease(v60);
          v61 = v35[i];
          if (v61)
            CFRelease(v61);
        }
        free(v34);
        free(v35);
        if (!v58)
        {
          v10 = v74;
          v4 = v75;
          if (!v57)
            goto LABEL_112;
          goto LABEL_111;
        }
        v10 = v74;
        v4 = v75;
        v27 = v76;
        if (!v57)
          goto LABEL_78;
      }
      else
      {
        v50 = CFDictionaryGetCount(*(CFDictionaryRef *)(v27 + 16));
        v51 = v50;
        if (v50 <= 0)
        {
          allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          v57 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, v50, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          v53 = 0;
          v52 = 0;
        }
        else
        {
          v52 = (const void **)malloc_type_calloc(v50, 8uLL, 0x80040B8603338uLL);
          v53 = (const void **)malloc_type_calloc(v51, 8uLL, 0x80040B8603338uLL);
          CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(v27 + 16), v52, v53);
          v54 = 0;
          do
          {
            v53[v54] = FigFairPlayCopySinfExtensionsFromFormatDescription((const opaqueCMFormatDescription *)v53[v54]);
            ++v54;
          }
          while (v51 != v54);
          allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          v57 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v52, v53, v51, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          v55 = 0;
          do
          {
            v56 = v53[v55];
            if (v56)
              CFRelease(v56);
            ++v55;
          }
          while (v51 != v55);
        }
        free(v52);
        free(v53);
      }
      if (CFDictionaryGetCount(*(CFDictionaryRef *)(v27 + 16)) < 1)
      {
        BYTE9(v82) = 1;
      }
      else
      {
        *(_QWORD *)&v82 = v57;
        CFDictionaryApplyFunction(*(CFDictionaryRef *)(v27 + 16), (CFDictionaryApplierFunction)SetProtectionInfoValidateEntry, &v82);
        if (!BYTE8(v82))
        {
          v16 = 4294955136;
          if (!v57)
            goto LABEL_112;
          goto LABEL_111;
        }
      }
      v62 = *(const void **)(v27 + 32);
      *(_QWORD *)(v27 + 32) = v57;
      if (v57)
        CFRetain(v57);
      if (v62)
        CFRelease(v62);
      v64 = (const void **)(v27 + 64);
      v63 = *(_QWORD *)(v27 + 64);
      *(_QWORD *)(v27 + 80) = 0;
      if (BYTE9(v82))
      {
        if (v63)
        {
          if ((FigCPEExternalProtectionMonitorGetMethods(v63) & 1) != 0)
            goto LABEL_110;
          v65 = *v64;
        }
        else
        {
          v65 = 0;
        }
        valuePtr = 0;
        v66 = FigCPEExternalProtectionMonitorCreateForMethods(*(const __CFAllocator **)v27, 5u, 0, v65, &valuePtr);
        if ((_DWORD)v66)
          goto LABEL_123;
        v67 = *v64;
        v68 = valuePtr;
        *v64 = valuePtr;
        if (v68)
          CFRetain(v68);
        if (v67)
          CFRelease(v67);
        if (valuePtr)
          CFRelease(valuePtr);
      }
      else
      {
        if (v63)
          goto LABEL_110;
        v66 = FigCPEExternalProtectionMonitorCreateForMethods(*(const __CFAllocator **)v27, 4u, 0, 0, (_QWORD *)(v27 + 64));
        if ((_DWORD)v66)
        {
LABEL_123:
          v16 = v66;
          if (!v57)
            goto LABEL_112;
          goto LABEL_111;
        }
      }
      CMNotificationCenterGetDefaultLocalCenter();
      v66 = FigNotificationCenterAddWeakListener();
      if (!(_DWORD)v66)
      {
        if (!*(_BYTE *)(v27 + 73)
          || (FigCPEExternalProtectionMonitorBeginMonitoring(*(_QWORD *)(v27 + 64)),
              *(_BYTE *)(v27 + 72) = 1,
              CMNotificationCenterGetDefaultLocalCenter(),
              v66 = FigNotificationCenterAddWeakListener(),
              !(_DWORD)v66))
        {
LABEL_110:
          v69 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v27 + 32), *(const void **)(v27 + 24));
          FigFairPlayGetSinfExtensionType(v69, (int *)(v27 + 56));
          v16 = 0;
          if (!v57)
          {
LABEL_112:
            if ((_DWORD)v16)
              goto LABEL_119;
            v70 = FigSimpleMutexCreate();
            *(_QWORD *)(v10 + 96) = v70;
            if (v70)
            {
              v71 = dispatch_queue_create("com.apple.fpcpefp.persistentrepo", 0);
              *(_QWORD *)(v10 + 128) = v71;
              if (v71)
              {
                v72 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                *(_QWORD *)(v10 + 120) = v72;
                if (v72)
                {
                  v16 = 0;
                  *v4 = cf;
                  return v16;
                }
              }
            }
            goto LABEL_118;
          }
LABEL_111:
          CFRelease(v57);
          goto LABEL_112;
        }
      }
      goto LABEL_123;
    }
LABEL_118:
    v16 = 4294955145;
    goto LABEL_119;
  }
  if (*(_BYTE *)(v10 + 73))
  {
    *(_QWORD *)(v10 + 16) = CFDictionaryCreate((CFAllocatorRef)a1, 0, 0, 0, 0, 0);
    goto LABEL_37;
  }
  v16 = 4294955146;
LABEL_119:
  if (cf)
    CFRelease(cf);
  return v16;
}

void FormatDescriptionFilter(const void *a1, const opaqueCMFormatDescription *a2, uint64_t a3)
{
  const __CFDictionary *v6;
  const __CFDictionary *v7;
  unsigned int v8;

  v6 = FigFairPlayCopySinfExtensionsFromFormatDescription(a2);
  if (v6)
  {
    v7 = v6;
    v8 = 0;
    if (!FigFairPlayGetSchemeFromSinf(v6, &v8) && v8 == 1769239918)
    {
      if (!*(_QWORD *)(a3 + 8))
        *(_QWORD *)(a3 + 8) = CFRetain(a1);
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)a3, a1, a2);
    }
    CFRelease(v7);
  }
}

uint64_t FigCPEFairPlayProtectorCreateForFormatReader(const void *a1, uint64_t a2, const __CFDictionary *a3, CFTypeRef *a4)
{
  const __CFAllocator *v8;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v10;
  uint64_t (*v11)(uint64_t, uint64_t *);
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, CFTypeRef *, _QWORD, unsigned int *);
  uint64_t FigBaseObject;
  uint64_t (*v16)(uint64_t, const __CFString *, const __CFAllocator *, CFArrayRef *);
  CFIndex Count;
  CFIndex v18;
  uint64_t i;
  CFStringRef v20;
  const void *ValueAtIndex;
  uint64_t v22;
  CFTypeRef *v24;
  CFArrayRef theArray;
  unsigned int v26;
  CFTypeRef cf;
  uint64_t v28;

  cf = 0;
  v28 = 0;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v10 = Mutable;
  if (!a2)
  {
    v22 = 4294955146;
    if (!Mutable)
      goto LABEL_26;
LABEL_25:
    CFRelease(v10);
    goto LABEL_26;
  }
  v11 = *(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v11)
    goto LABEL_24;
  v24 = a4;
  v12 = v11(a2, &v28);
  if (!(_DWORD)v12)
  {
    if (v28 >= 1)
    {
      v13 = 0;
      while (1)
      {
        v26 = 0;
        theArray = 0;
        v14 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD, unsigned int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 48);
        if (!v14)
          break;
        v12 = v14(a2, v13, &cf, 0, &v26);
        if ((_DWORD)v12)
          goto LABEL_22;
        FigBaseObject = FigTrackReaderGetFigBaseObject(cf);
        v16 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (!v16)
          break;
        v12 = v16(FigBaseObject, CFSTR("TrackFormatDescriptionArray"), v8, &theArray);
        if ((_DWORD)v12)
          goto LABEL_22;
        if (theArray)
        {
          Count = CFArrayGetCount(theArray);
          if (Count >= 1)
          {
            v18 = Count;
            for (i = 0; i != v18; ++i)
            {
              v20 = FigCPECreateFormatDescriptionIdentifierForTrackIDAndIndex(v8, v26, i);
              ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
              CFDictionarySetValue(v10, v20, ValueAtIndex);
              if (v20)
                CFRelease(v20);
            }
          }
          if (theArray)
            CFRelease(theArray);
        }
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        if (++v13 >= v28)
          goto LABEL_21;
      }
LABEL_24:
      v22 = 4294954514;
      if (!v10)
        goto LABEL_26;
      goto LABEL_25;
    }
LABEL_21:
    v12 = FigCPEFairPlayProtectorCreateForFormatDescriptions(a1, v10, a3, v24);
  }
LABEL_22:
  v22 = v12;
  if (v10)
    goto LABEL_25;
LABEL_26:
  if (cf)
    CFRelease(cf);
  return v22;
}

uint64_t FigCPEFairPlayProtectorCreate(const void *a1, CFDictionaryRef theDict, CFTypeRef *a3)
{
  if (!theDict)
    return 4294955146;
  if (CFDictionaryContainsKey(theDict, CFSTR("6519D6C3-E423-4DEA-811B-AA98B31B3180")))
    return FigCPEFairPlayCloudProtectorCreate(a1, theDict, a3);
  return FigCPEFairPlayProtectorCreateForFormatDescriptions(a1, 0, theDict, a3);
}

uint64_t FigCPEFairPlayProtectorCheckInCryptRef(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  _QWORD *v6;
  CFTypeRef v7;
  CFTypeRef v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = malloc_type_malloc(0x18uLL, 0x6004082687C62uLL);
  *v6 = DerivedStorage;
  if (a2)
    v7 = CFRetain(a2);
  else
    v7 = 0;
  v6[1] = v7;
  if (a3)
    v8 = CFRetain(a3);
  else
    v8 = 0;
  v6[2] = v8;
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 128), v6, (dispatch_function_t)CheckInCryptRef);
  return 0;
}

void CheckInCryptRef(const void **a1)
{
  __CFDictionary *v2;
  const void *v3;
  const void *v4;

  v2 = (__CFDictionary *)*((_QWORD *)*a1 + 15);
  if (v2)
    CFDictionarySetValue(v2, a1[1], a1[2]);
  v3 = a1[1];
  if (v3)
    CFRelease(v3);
  v4 = a1[2];
  if (v4)
    CFRelease(v4);
  free(a1);
}

uint64_t FigCPEFairPlayProtectorCheckOutCryptRef(uint64_t a1, uint64_t a2)
{
  _QWORD context[2];
  uint64_t v5;

  context[0] = CMBaseObjectGetDerivedStorage();
  context[1] = a2;
  v5 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(context[0] + 128), context, (dispatch_function_t)CheckOutCryptRef);
  return v5;
}

void CheckOutCryptRef(const void **a1)
{
  const __CFDictionary *v2;
  const void *Value;

  v2 = (const __CFDictionary *)*((_QWORD *)*a1 + 15);
  if (v2)
  {
    Value = CFDictionaryGetValue(v2, a1[1]);
    a1[2] = Value;
    if (Value)
    {
      CFRetain(Value);
      CFDictionaryRemoveValue(*((CFMutableDictionaryRef *)*a1 + 15), a1[1]);
    }
  }
}

BOOL FigFairPlayCPEProtectorEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t FigFairPlayCPEProtectorInvalidate(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  const void *v11;
  uint64_t v12;
  const void *v13;
  const void *v14;
  const void *v15;
  void *v16;
  NSObject *v17;
  const void *v18;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v3 = DerivedStorage;
    v4 = *(const void **)(DerivedStorage + 16);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(v3 + 16) = 0;
    }
    v5 = *(const void **)(v3 + 24);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(v3 + 24) = 0;
    }
    v6 = *(const void **)(v3 + 32);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(v3 + 32) = 0;
    }
    v7 = *(const void **)(v3 + 40);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(v3 + 40) = 0;
    }
    v8 = *(const void **)(v3 + 48);
    if (v8)
    {
      CFRelease(v8);
      *(_QWORD *)(v3 + 48) = 0;
    }
    v9 = *(_QWORD *)(v3 + 8);
    if (v9)
    {
      v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v10)
        v10(v9, a1);
      v11 = *(const void **)(v3 + 8);
      if (v11)
      {
        CFRelease(v11);
        *(_QWORD *)(v3 + 8) = 0;
      }
    }
    if (*(_QWORD *)v3)
    {
      CFRelease(*(CFTypeRef *)v3);
      *(_QWORD *)v3 = 0;
    }
    v12 = *(_QWORD *)(v3 + 64);
    if (v12)
    {
      if (*(_BYTE *)(v3 + 72))
        FigCPEExternalProtectionMonitorEndMonitoring(v12);
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      if (*(_BYTE *)(v3 + 73))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
      }
      v13 = *(const void **)(v3 + 64);
      if (v13)
      {
        CFRelease(v13);
        *(_QWORD *)(v3 + 64) = 0;
      }
    }
    v14 = *(const void **)(v3 + 104);
    if (v14)
    {
      CFRelease(v14);
      *(_QWORD *)(v3 + 104) = 0;
    }
    v15 = *(const void **)(v3 + 112);
    if (v15)
    {
      CFRelease(v15);
      *(_QWORD *)(v3 + 112) = 0;
    }
    if (*(_QWORD *)(v3 + 96))
    {
      FigSimpleMutexDestroy();
      *(_QWORD *)(v3 + 96) = 0;
    }
    v16 = *(void **)(v3 + 88);
    if (v16)
    {
      FigFairPlayAirPlaySessionDestroy(v16);
      *(_QWORD *)(v3 + 88) = 0;
    }
    v17 = *(NSObject **)(v3 + 128);
    if (v17)
      dispatch_sync_f(v17, (void *)v3, (dispatch_function_t)DisposePersistentCryptRefRepository);
    v18 = *(const void **)(v3 + 136);
    if (v18)
    {
      CFRelease(v18);
      *(_QWORD *)(v3 + 136) = 0;
    }
  }
  return 0;
}

void FigFairPlayCPEProtectorFinalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigFairPlayCPEProtectorInvalidate(a1);
  if (DerivedStorage)
  {
    v3 = *(NSObject **)(DerivedStorage + 128);
    if (v3)
    {
      dispatch_sync_f(v3, 0, (dispatch_function_t)NoOp);
      dispatch_release(*(dispatch_object_t *)(DerivedStorage + 128));
    }
  }
}

__CFString *FigFairPlayCPEProtectorCopyDebugDescription()
{
  uint64_t DerivedStorage;
  __CFString *Mutable;
  __CFString *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable(*(CFAllocatorRef *)DerivedStorage, 0);
  v2 = Mutable;
  if (Mutable)
    CFStringAppendFormat(Mutable, 0, CFSTR("<FigFairPlayCPEProtector: sharedContext<%@>"), *(_QWORD *)(DerivedStorage + 8));
  return v2;
}

uint64_t FigFairPlayCPEProtectorCopyProperty(uint64_t a1, const void *a2, uint64_t a3, const __CFString **a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  __CFString **v11;
  const __CFString *v12;
  const void *v13;
  uint64_t v14;
  const __CFString *Value;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  const __CFDictionary *v20;
  const __CFDictionary *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, const void *, uint64_t, const __CFString **);
  CFDictionaryRef theDict;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = 4294955146;
  if (!a2 || !a4)
    return v8;
  v9 = DerivedStorage;
  if (CFEqual(a2, CFSTR("DisplayList")))
    return FigCPEExternalProtectionMonitorCopyProperty(*(_QWORD *)(v9 + 64), CFSTR("DisplayList"), a3, (uint64_t)a4);
  if (CFEqual(a2, CFSTR("ExternalProtectionRequiredForPlayback")))
  {
    if (FigCPEExternalProtectionMonitorGetMethods(*(_QWORD *)(v9 + 64)))
    {
LABEL_7:
      v11 = (__CFString **)MEMORY[0x1E0C9AE50];
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (CFEqual(a2, CFSTR("ApplicationAuthorizationChallengeProvider")))
  {
    v12 = CFSTR("ApplicationAuthorizationChallengeProviderNone");
    goto LABEL_62;
  }
  if (CFEqual(a2, CFSTR("IsRental")))
  {
    v8 = IsRental(v9, 0);
    if ((_DWORD)v8)
      return v8;
    v12 = *(const __CFString **)(v9 + 104);
    if (!v12)
      goto LABEL_63;
    goto LABEL_62;
  }
  if (CFEqual(a2, CFSTR("IsRentalPlaybackStarted")))
  {
    v13 = (const void *)*MEMORY[0x1E0C9AE40];
    v14 = IsRental(v9, 0);
    if ((_DWORD)v14)
    {
      v8 = v14;
    }
    else if (CFBooleanGetValue(*(CFBooleanRef *)(v9 + 104)))
    {
      theDict = 0;
      v8 = CopyRentalInfo(v9, &theDict);
      if (!(_DWORD)v8)
      {
        if (CFDictionaryContainsKey(theDict, CFSTR("RentalPlaybackPeriodStartDate")))
          v13 = (const void *)*MEMORY[0x1E0C9AE50];
        if (theDict)
          CFRelease(theDict);
      }
    }
    else
    {
      v8 = 0;
    }
    if (v13)
      v12 = (const __CFString *)CFRetain(v13);
    else
      v12 = 0;
    goto LABEL_64;
  }
  if (CFEqual(a2, CFSTR("RentalPeriodStartDate"))
    || CFEqual(a2, CFSTR("RentalPeriodEndDate"))
    || CFEqual(a2, CFSTR("RentalPlaybackPeriodStartDate"))
    || CFEqual(a2, CFSTR("RentalPlaybackPeriodEndDate")))
  {
    theDict = 0;
    v8 = CopyRentalInfo(v9, &theDict);
    if (!(_DWORD)v8)
    {
      Value = (const __CFString *)CFDictionaryGetValue(theDict, a2);
      if (Value)
        v8 = 0;
      else
        v8 = 4294955137;
      if (Value)
        Value = (const __CFString *)CFRetain(Value);
      *a4 = Value;
      if (theDict)
        CFRelease(theDict);
    }
    return v8;
  }
  if (CFEqual(a2, CFSTR("ContentKind")))
  {
    v17 = (uint64_t *)(v9 + 80);
    v16 = *(_QWORD *)(v9 + 80);
    if (!v16)
    {
      v20 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 32), *(const void **)(v9 + 24));
      if (FigFairPlayGetMediaKindFromSinf(v20, (uint64_t *)(v9 + 80)))
      {
        *v17 = 0;
        goto LABEL_50;
      }
      v16 = *v17;
    }
    if (v16 <= 15)
    {
      switch(v16)
      {
        case 1:
          v11 = kFigCPEContentKind_Song;
          break;
        case 2:
          v11 = kFigCPEContentKind_Movie;
          break;
        case 4:
          v11 = kFigCPEContentKind_Podcast;
          break;
        case 8:
          v11 = kFigCPEContentKind_AudioBook;
          break;
        default:
          goto LABEL_50;
      }
LABEL_61:
      v12 = *v11;
      if (!*v11)
      {
LABEL_63:
        v8 = 0;
LABEL_64:
        *a4 = v12;
        return v8;
      }
LABEL_62:
      v12 = (const __CFString *)CFRetain(v12);
      goto LABEL_63;
    }
    switch(v16)
    {
      case 16:
        v11 = kFigCPEContentKind_Booklet;
        goto LABEL_61;
      case 32:
        v11 = kFigCPEContentKind_MusicVideo;
        goto LABEL_61;
      case 64:
        v11 = kFigCPEContentKind_TVShow;
        goto LABEL_61;
    }
LABEL_50:
    v11 = kFigCPEContentKind_Unknown;
    goto LABEL_61;
  }
  if (CFEqual(a2, CFSTR("AllowsImageGeneration")))
  {
    v19 = (uint64_t *)(v9 + 80);
    v18 = *(_QWORD *)(v9 + 80);
    if (v18)
      goto LABEL_46;
    v21 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 32), *(const void **)(v9 + 24));
    if (!FigFairPlayGetMediaKindFromSinf(v21, (uint64_t *)(v9 + 80)))
    {
      v18 = *v19;
LABEL_46:
      if (v18 == 32)
        goto LABEL_7;
      goto LABEL_60;
    }
    *v19 = 0;
LABEL_60:
    v11 = (__CFString **)MEMORY[0x1E0C9AE40];
    goto LABEL_61;
  }
  if (CFEqual(a2, CFSTR("IsAirPlayPossible")))
  {
    if (*(_DWORD *)(v9 + 56) == 1)
      goto LABEL_7;
    goto LABEL_60;
  }
  v22 = *(_QWORD *)(v9 + 8);
  v23 = *(uint64_t (**)(uint64_t, const void *, uint64_t, const __CFString **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
  if (!v23)
    return 4294954514;
  return v23(v22, a2, a3, a4);
}

uint64_t FigFairPlayCPEProtectorSetProperty(uint64_t a1, const void *a2, const __CFArray *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  const void *v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294955146;
  v6 = DerivedStorage;
  if (CFEqual(a2, CFSTR("DisplayList")))
    return FigCPEExternalProtectionMonitorSetProperty(*(_QWORD **)(v6 + 64), CFSTR("DisplayList"), a3);
  if (!CFEqual(a2, CFSTR("NeroTransport")))
    return 4294955144;
  v8 = *(const void **)(v6 + 136);
  *(_QWORD *)(v6 + 136) = a3;
  if (a3)
    CFRetain(a3);
  if (v8)
    CFRelease(v8);
  return 0;
}

uint64_t ExternalProtectionStatusChangedCallback_0()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t ExternalProtectionStateChangedCallback()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

void DisposePersistentCryptRefRepository(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 120);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 120) = 0;
  }
}

uint64_t IsRental(uint64_t a1, Boolean *a2)
{
  CFTypeRef v4;
  const __CFDictionary *Value;
  uint64_t IsRentalSinf;
  CFTypeRef *v7;
  uint64_t v8;
  BOOL v10;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 96));
  v4 = *(CFTypeRef *)(a1 + 104);
  if (!v4)
  {
    v10 = 0;
    Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), *(const void **)(a1 + 24));
    IsRentalSinf = FigFairPlayIsRentalSinf(Value, &v10);
    if ((_DWORD)IsRentalSinf)
    {
      v8 = IsRentalSinf;
      goto LABEL_12;
    }
    if (v10)
      v7 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    else
      v7 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    v4 = *v7;
    if (*v7)
      v4 = CFRetain(v4);
    *(_QWORD *)(a1 + 104) = v4;
  }
  v8 = 0;
  if (a2 && v4)
  {
    v8 = 0;
    *a2 = CFBooleanGetValue((CFBooleanRef)v4);
  }
LABEL_12:
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 96));
  return v8;
}

uint64_t CopyRentalInfo(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;
  uint64_t v5;
  CFTypeRef v6;
  const __CFDictionary *Value;
  const __CFData *BestSinfFromSinfExtensions;
  uint64_t FairPlayContext;
  const UInt8 *BytePtr;
  CFIndex Length;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  double v15;
  CFDateRef v16;
  unint64_t v17;
  unint64_t v18;
  CFDateRef v19;
  CFDateRef v20;
  unint64_t v21;
  unint64_t v22;
  CFDateRef v23;
  uint64_t v25;
  uint64_t v26;
  Boolean v27;

  v27 = 0;
  v4 = IsRental(a1, &v27);
  if (v4 | v27)
    v5 = v4;
  else
    v5 = 4294955144;
  if (!(_DWORD)v5)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 96));
    if (!*(_QWORD *)(a1 + 112))
    {
      Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), *(const void **)(a1 + 24));
      BestSinfFromSinfExtensions = (const __CFData *)FigFairPlayGetBestSinfFromSinfExtensions(Value);
      v25 = 0;
      v26 = 0;
      FairPlayContext = GetFairPlayContext((uint64_t *)a1);
      BytePtr = CFDataGetBytePtr(BestSinfFromSinfExtensions);
      Length = CFDataGetLength(BestSinfFromSinfExtensions);
      RbFpir(FairPlayContext, (uint64_t)BytePtr, Length, (uint64_t)&v25);
      v13 = FAIRPLAY_CALL_LOG(v12);
      if ((_DWORD)v13)
      {
        v5 = v13;
LABEL_21:
        MEMORY[0x19402EF04](*(_QWORD *)(a1 + 96));
        return v5;
      }
      *(_QWORD *)(a1 + 112) = CFDictionaryCreateMutable(*(CFAllocatorRef *)a1, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      LODWORD(v14) = v25;
      v15 = *MEMORY[0x1E0C9ADF8];
      v16 = CFDateCreate(*(CFAllocatorRef *)a1, (double)v14 - *MEMORY[0x1E0C9ADF8]);
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 112), CFSTR("RentalPeriodStartDate"), v16);
      if (v16)
        CFRelease(v16);
      LODWORD(v18) = HIDWORD(v25);
      LODWORD(v17) = v25;
      v19 = CFDateCreate(*(CFAllocatorRef *)a1, (double)v17 + (double)v18 - v15);
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 112), CFSTR("RentalPeriodEndDate"), v19);
      if (v19)
        CFRelease(v19);
      if ((_DWORD)v26 != -1)
      {
        v20 = CFDateCreate(*(CFAllocatorRef *)a1, (double)v26 - v15);
        CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 112), CFSTR("RentalPlaybackPeriodStartDate"), v20);
        if (v20)
          CFRelease(v20);
        LODWORD(v22) = HIDWORD(v26);
        LODWORD(v21) = v26;
        v23 = CFDateCreate(*(CFAllocatorRef *)a1, (double)v21 + (double)v22 - v15);
        CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 112), CFSTR("RentalPlaybackPeriodEndDate"), v23);
        if (v23)
          CFRelease(v23);
      }
    }
    if (a2)
    {
      v6 = *(CFTypeRef *)(a1 + 112);
      if (v6)
        v6 = CFRetain(v6);
      v5 = 0;
      *a2 = v6;
    }
    else
    {
      v5 = 0;
    }
    goto LABEL_21;
  }
  return v5;
}

uint64_t GetFairPlayContext(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int (*v3)(uint64_t, __CFString *, uint64_t, CFNumberRef *);
  unsigned int valuePtr;
  CFNumberRef number;

  number = 0;
  valuePtr = 0;
  v2 = *a1;
  v1 = a1[1];
  v3 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (v3)
  {
    if (!v3(v1, CFSTR("3721370B-B25B-4EED-A8C8-F27CAA873C75"), v2, &number))
    {
      CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
      if (number)
        CFRelease(number);
    }
  }
  return valuePtr;
}

uint64_t FigFairPlayCPEProtectorCreateCryptorForFormatDescriptionIdentifier(const void *a1, const void *a2, int a3, const __CFDictionary *a4, const void *a5, CFTypeRef *a6)
{
  uint64_t DerivedStorage;
  uint64_t result;
  __SecTask *v14;
  int IsApplicationAuthorizedWithEntitlement;
  const void *v16;
  const void *Value;
  const void *v18;
  const opaqueCMFormatDescription *v19;
  const void *v20;
  int v21;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = 4294955146;
  if (!a5 || !DerivedStorage)
    return result;
  if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(DerivedStorage + 16), a5))
    return 4294955132;
  v21 = 0;
  v14 = a4 ? (__SecTask *)CFDictionaryGetValue(a4, CFSTR("ClientSecTask")) : 0;
  IsApplicationAuthorizedWithEntitlement = FigFairPlayCPEProtectorIsApplicationAuthorizedWithEntitlement((uint64_t)a1, v14, a3, &v21);
  result = 4294955135;
  if (IsApplicationAuthorizedWithEntitlement || v21 != a3)
    return result;
  if (!a4)
  {
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 32), a5);
    goto LABEL_16;
  }
  v16 = CFDictionaryGetValue(a4, CFSTR("Destination"));
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 32), a5);
  if (!v16 || CFEqual(v16, CFSTR("DestinationLocal")))
  {
LABEL_16:
    v19 = (const opaqueCMFormatDescription *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 16), a5);
    result = FigFairPlayCPECryptorCreate(a1, a2, a3, v19, Value, *(const void **)(DerivedStorage + 40), *(const void **)(DerivedStorage + 64), a6);
    if ((_DWORD)result)
      return result;
    goto LABEL_17;
  }
  if (!CFEqual(v16, CFSTR("DestinationNero")))
    return 4294955136;
  v18 = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 16), a5);
  result = FigFairPlayOctaviaCPECryptorCreate(a1, a2, a3, (uint64_t)v18, Value, *(_QWORD **)(DerivedStorage + 64), *(const void **)(DerivedStorage + 136), a6);
  if (!(_DWORD)result)
  {
LABEL_17:
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 96));
    v20 = *(const void **)(DerivedStorage + 112);
    if (v20)
    {
      CFRelease(v20);
      *(_QWORD *)(DerivedStorage + 112) = 0;
    }
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 96));
    return 0;
  }
  return result;
}

CFIndex FigFairPlayCPEProtectorIsApplicationAuthorizedWithEntitlement(uint64_t a1, __SecTask *a2, int a3, int *a4)
{
  uint64_t DerivedStorage;
  CFIndex Code;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  const __CFDictionary *v12;
  const __CFString *v13;
  const __CFDictionary *Value;
  CFTypeRef v15;
  int v16;
  char v18;
  CFErrorRef error;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  error = 0;
  v18 = 1;
  Code = 4294955146;
  if (!a4)
    goto LABEL_19;
  if (!a2)
    goto LABEL_19;
  v9 = DerivedStorage;
  if (!DerivedStorage)
    goto LABEL_19;
  v11 = (_QWORD *)(DerivedStorage + 80);
  v10 = *(_QWORD *)(DerivedStorage + 80);
  if (v10)
  {
    if ((v10 & 0x1000) != 0)
      goto LABEL_6;
  }
  else
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 32), *(const void **)(DerivedStorage + 24));
    if (FigFairPlayGetMediaKindFromSinf(Value, (uint64_t *)(v9 + 80)))
    {
      *v11 = 0;
    }
    else if ((*v11 & 0x1000) != 0)
    {
LABEL_6:
      v12 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 32), *(const void **)(v9 + 24));
      FigFairPlayIsPreviewEncrypted(v12, (BOOL *)&v18);
      if (v18)
        v13 = CFSTR("com.apple.coremedia.allow-preview-encrypted-tone-playback");
      else
        v13 = CFSTR("com.apple.coremedia.allow-protected-content-playback");
      goto LABEL_13;
    }
  }
  v18 = 0;
  v13 = CFSTR("com.apple.coremedia.allow-protected-content-playback");
LABEL_13:
  v15 = SecTaskCopyValueForEntitlement(a2, v13, &error);
  if (!error)
  {
    Code = 0;
    if (v15 == (CFTypeRef)*MEMORY[0x1E0C9AE50])
      v16 = 3;
    else
      v16 = 0;
    *a4 = v16 & a3;
    if (!v15)
      goto LABEL_19;
    goto LABEL_18;
  }
  Code = CFErrorGetCode(error);
  if (v15)
LABEL_18:
    CFRelease(v15);
LABEL_19:
  if (error)
    CFRelease(error);
  return Code;
}

uint64_t FigFairPlayCPEProtectorIsContentAuthorized(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t result;
  const __CFDictionary *v7;
  const __CFData *LegacySinfFromSinfExtensions;
  const __CFData *v9;
  const __CFData *ExtendedSinfFromSinfExtensions;
  const __CFData *v11;
  uint64_t FairPlayContext;
  uint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = 4294955146;
  if (a3)
  {
    if (DerivedStorage)
    {
      *a3 = 0;
      result = (uint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 32), *(const void **)(DerivedStorage + 24));
      if (result)
      {
        if (*(_DWORD *)(DerivedStorage + 56) == 2)
        {
          *(_BYTE *)(DerivedStorage + 60) = 1;
LABEL_6:
          result = 0;
          *a3 = a2;
          return result;
        }
        v7 = (const __CFDictionary *)result;
        v15 = 0u;
        v16 = 0u;
        LegacySinfFromSinfExtensions = (const __CFData *)FigFairPlayGetLegacySinfFromSinfExtensions((const __CFDictionary *)result);
        if (LegacySinfFromSinfExtensions)
        {
          v9 = LegacySinfFromSinfExtensions;
          *((_QWORD *)&v15 + 1) = CFDataGetBytePtr(LegacySinfFromSinfExtensions);
          LODWORD(v15) = CFDataGetLength(v9);
        }
        ExtendedSinfFromSinfExtensions = (const __CFData *)FigFairPlayGetExtendedSinfFromSinfExtensions(v7);
        if (ExtendedSinfFromSinfExtensions)
        {
          v11 = ExtendedSinfFromSinfExtensions;
          *((_QWORD *)&v16 + 1) = CFDataGetBytePtr(ExtendedSinfFromSinfExtensions);
          LODWORD(v16) = CFDataGetLength(v11);
        }
        FairPlayContext = GetFairPlayContext((uint64_t *)DerivedStorage);
        HN0R(FairPlayContext, (uint64_t)&v15);
        v14 = FAIRPLAY_CALL_LOG(v13);
        if (v14 == -42072)
        {
          result = 0;
          *(_WORD *)(DerivedStorage + 60) = 257;
        }
        else
        {
          *(_BYTE *)(DerivedStorage + 60) = 1;
          if (!v14)
            goto LABEL_6;
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t FigFairPlayCPEProtectorGetAggregateExternalProtectionStatus(uint64_t a1, _DWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t result;
  int Status;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = 4294955146;
  if (a2)
  {
    if (DerivedStorage)
    {
      Status = FigCPEExternalProtectionMonitorGetStatus(*(_QWORD *)(DerivedStorage + 64));
      result = 0;
      *a2 = Status;
    }
  }
  return result;
}

uint64_t FigFairPlayCPEProtectorGetAggregateExternalProtectionState(uint64_t a1, _DWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t result;
  int State;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = 4294955146;
  if (a2 && DerivedStorage)
  {
    if (*(_BYTE *)(DerivedStorage + 73))
    {
      State = FigCPEExternalProtectionMonitorGetState(*(_QWORD *)(DerivedStorage + 64), 7);
      result = 0;
      *a2 = State;
    }
    else
    {
      return 4294955137;
    }
  }
  return result;
}

uint64_t FigFairPlayCPEProtectorBeginAirPlaySessionAsync(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *DerivedStorage;
  uint64_t *v8;
  uint64_t FairPlayContext;
  FigCPEFPAirPlaySession *v10;
  uint64_t v11;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage[11])
  {
    v11 = 4294955138;
    goto LABEL_4;
  }
  v8 = DerivedStorage;
  FairPlayContext = GetFairPlayContext(DerivedStorage);
  v10 = FigFairPlayAirPlaySessionCreateWithProtectionInfo(FairPlayContext, v8[4], a2);
  v8[11] = (uint64_t)v10;
  if (!v10)
  {
    v11 = 4294955145;
    goto LABEL_4;
  }
  v11 = FigFairPlayAirPlaySessionBeginAsync(v10, a3, a4);
  if ((_DWORD)v11)
LABEL_4:
    FigFairPlayCPEProtectorEndAirPlaySession();
  return v11;
}

uint64_t FigFairPlayCPEProtectorEndAirPlaySession()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return 4294955146;
  v1 = DerivedStorage;
  result = *(_QWORD *)(DerivedStorage + 88);
  if (result)
  {
    FigFairPlayAirPlaySessionDestroy((void *)result);
    result = 0;
    *(_QWORD *)(v1 + 88) = 0;
  }
  return result;
}

uint64_t FigFairPlayCPEProtectorCopyPropertyForFormatDescriptionIdentifierAndRights(uint64_t a1, const void *a2, char a3, const void *a4, uint64_t a5, _QWORD *a6)
{
  uint64_t DerivedStorage;
  uint64_t result;
  const __CFDictionary *Value;
  const __CFData *LegacySinfFromSinfExtensions;
  const __CFData *v14;
  const __CFData *ExtendedSinfFromSinfExtensions;
  const __CFData *v16;
  int IsLowValueSinf;
  int v18;
  int v19;
  _QWORD *v20;
  BOOL v21;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = 4294955146;
  if (a2 && DerivedStorage && a4 && a6)
  {
    if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(DerivedStorage + 32), a2))
      return 4294955132;
    if (!CFEqual(a4, (CFTypeRef)*MEMORY[0x1E0CA31A0]))
      return 4294954509;
    Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 32), a2);
    v21 = 0;
    LegacySinfFromSinfExtensions = (const __CFData *)FigFairPlayGetLegacySinfFromSinfExtensions(Value);
    if (LegacySinfFromSinfExtensions)
    {
      v14 = LegacySinfFromSinfExtensions;
      CFDataGetBytePtr(LegacySinfFromSinfExtensions);
      CFDataGetLength(v14);
    }
    ExtendedSinfFromSinfExtensions = (const __CFData *)FigFairPlayGetExtendedSinfFromSinfExtensions(Value);
    if (ExtendedSinfFromSinfExtensions)
    {
      v16 = ExtendedSinfFromSinfExtensions;
      CFDataGetBytePtr(ExtendedSinfFromSinfExtensions);
      CFDataGetLength(v16);
    }
    IsLowValueSinf = FigFairPlayIsLowValueSinf(Value, &v21);
    if (v21)
      v18 = IsLowValueSinf;
    else
      v18 = -42042;
    if (v18 > -42032)
    {
      if (v18)
      {
        v19 = -42031;
LABEL_20:
        if (v18 != v19)
          goto LABEL_23;
      }
    }
    else if (v18 != -42407)
    {
      v19 = -42403;
      goto LABEL_20;
    }
    if ((a3 & 5) != 0)
    {
      v20 = (_QWORD *)MEMORY[0x1E0C9AE50];
LABEL_24:
      result = 0;
      *a6 = *v20;
      return result;
    }
LABEL_23:
    v20 = (_QWORD *)MEMORY[0x1E0C9AE40];
    goto LABEL_24;
  }
  return result;
}

uint64_t RegisterFigFairPlayCPEProtectorType()
{
  FigCPEProtectorGetClassID();
  return FigBaseClassRegisterClass();
}

CFTypeRef FigFairPlayCPEProtectorCopyFormattingDesc()
{
  return CFRetain(CFSTR("[FigFPCPEProtector]"));
}

uint64_t SetProtectionInfoValidateEntry(uint64_t key, const opaqueCMFormatDescription *a2, uint64_t a3)
{
  BOOL *v5;
  int v6;
  const __CFDictionary *v7;

  if (*(_BYTE *)(a3 + 8))
  {
    key = (uint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)a3, (const void *)key);
    *(_BYTE *)(a3 + 8) = key != 0;
    if (key)
    {
      v6 = *(unsigned __int8 *)(a3 + 9);
      v5 = (BOOL *)(a3 + 9);
      if (!v6)
      {
        v7 = (const __CFDictionary *)key;
        key = CMFormatDescriptionGetMediaType(a2);
        if ((_DWORD)key == 1986618469)
          return FigFairPlayIsHDCPRequiredSinf(v7, v5);
      }
    }
  }
  return key;
}

uint64_t figCSSStyleSheetRegisterFigCSSStyleSheet()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigCSSStyleSheetID = result;
  return result;
}

uint64_t FigCSSStyleSheetCreate(uint64_t a1, uint64_t *a2)
{
  uint64_t Instance;

  if (!a2)
    return FigSignalErrorAt();
  MEMORY[0x19402F294](&FigCSSStyleSheetGetTypeID_sRegisterFigCSSStyleSheetOnce, figCSSStyleSheetRegisterFigCSSStyleSheet);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  *a2 = Instance;
  return 0;
}

uint64_t FigCSSStyleSheetCopyRuleList(uint64_t a1, _QWORD *a2)
{
  CFTypeRef v3;

  if (!a1 || !a2)
    return FigSignalErrorAt();
  v3 = *(CFTypeRef *)(a1 + 16);
  if (v3)
    v3 = CFRetain(v3);
  *a2 = v3;
  return 0;
}

uint64_t FigCSSStyleSheetSetRuleList(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  if (!a1 || !cf)
    return FigSignalErrorAt();
  v2 = *(const void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = cf;
  CFRetain(cf);
  if (v2)
    CFRelease(v2);
  return 0;
}

uint64_t figCSSRuleListRegisterFigCSSRuleList()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigCSSRuleListID = result;
  return result;
}

uint64_t FigCSSRuleListCreate(uint64_t a1, uint64_t *a2)
{
  uint64_t Instance;

  if (!a2)
    return FigSignalErrorAt();
  MEMORY[0x19402F294](&FigCSSRuleListGetTypeID_sRegisterFigCSSRuleListOnce, figCSSRuleListRegisterFigCSSRuleList);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  *a2 = Instance;
  return 0;
}

CFIndex FigCSSRuleListGetLength(uint64_t a1)
{
  const __CFArray *v1;

  if (a1)
  {
    v1 = *(const __CFArray **)(a1 + 16);
    if (v1)
      return CFArrayGetCount(v1);
  }
  else
  {
    FigSignalErrorAt();
  }
  return 0;
}

uint64_t FigCSSRuleListCopyRuleAtIndex(uint64_t a1, CFIndex idx, CFTypeRef *a3, _DWORD *a4)
{
  const __CFArray *Count;
  _DWORD *ValueAtIndex;
  _DWORD *v10;

  if (!a1)
    return FigSignalErrorAt();
  Count = *(const __CFArray **)(a1 + 16);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if (idx < 0)
    return FigSignalErrorAt();
  if ((uint64_t)Count <= idx)
    return FigSignalErrorAt();
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), idx);
  if (!ValueAtIndex)
    return FigSignalErrorAt();
  v10 = ValueAtIndex;
  if (a3)
    *a3 = CFRetain(ValueAtIndex);
  if (a4)
    *a4 = v10[4];
  return 0;
}

uint64_t FigCSSRuleListAppendRule(_QWORD *cf, void *value)
{
  __CFArray *Mutable;
  const __CFAllocator *v5;

  if (!cf)
    return FigSignalErrorAt();
  if (!value)
    return FigSignalErrorAt();
  Mutable = (__CFArray *)cf[2];
  if (!Mutable)
  {
    v5 = CFGetAllocator(cf);
    Mutable = CFArrayCreateMutable(v5, 0, MEMORY[0x1E0C9B378]);
    cf[2] = Mutable;
    if (!Mutable)
      return FigSignalErrorAt();
  }
  CFArrayAppendValue(Mutable, value);
  return 0;
}

uint64_t figCSSRuleRegisterFigCSSRule()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigCSSRuleID = result;
  return result;
}

uint64_t FigCSSRuleCreate(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t Instance;

  if (!a3)
    return FigSignalErrorAt();
  MEMORY[0x19402F294](&FigCSSRuleGetTypeID_sRegisterFigCSSRuleOnce, figCSSRuleRegisterFigCSSRule);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  *(_DWORD *)(Instance + 16) = a2;
  *a3 = Instance;
  return 0;
}

uint64_t FigCSSStyleRuleCopySelector(uint64_t a1, _QWORD *a2)
{
  CFTypeRef v3;

  if (!a1 || !a2 || *(_DWORD *)(a1 + 16) != 1)
    return FigSignalErrorAt();
  v3 = *(CFTypeRef *)(a1 + 24);
  if (v3)
    v3 = CFRetain(v3);
  *a2 = v3;
  return 0;
}

uint64_t FigCSSStyleRuleCopyDeclaration(uint64_t a1, _QWORD *a2)
{
  CFTypeRef v3;

  if (!a1 || !a2 || *(_DWORD *)(a1 + 16) != 1)
    return FigSignalErrorAt();
  v3 = *(CFTypeRef *)(a1 + 32);
  if (v3)
    v3 = CFRetain(v3);
  *a2 = v3;
  return 0;
}

uint64_t FigCSSStyleRuleSetSelector(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4;
  const void *v5;

  if (!a1)
    return FigSignalErrorAt();
  if (!cf)
    return FigSignalErrorAt();
  v4 = CFGetTypeID(cf);
  if (v4 != CFStringGetTypeID() || *(_DWORD *)(a1 + 16) != 1)
    return FigSignalErrorAt();
  v5 = *(const void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = cf;
  CFRetain(cf);
  if (v5)
    CFRelease(v5);
  return 0;
}

uint64_t FigCSSStyleRuleSetDeclaration(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4;
  const void *v5;

  if (!a1)
    return FigSignalErrorAt();
  if (!cf)
    return FigSignalErrorAt();
  v4 = CFGetTypeID(cf);
  MEMORY[0x19402F294](&FigCSSStyleDeclarationGetTypeID_sRegisterFigCSSStyleDeclarationOnce, figCSSStyleDeclarationRegisterFigCSSStyleDeclaration);
  if (v4 != sFigCSSStyleDeclarationID || *(_DWORD *)(a1 + 16) != 1)
    return FigSignalErrorAt();
  v5 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = cf;
  CFRetain(cf);
  if (v5)
    CFRelease(v5);
  return 0;
}

uint64_t figCSSStyleDeclarationRegisterFigCSSStyleDeclaration()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigCSSStyleDeclarationID = result;
  return result;
}

uint64_t FigCSSStyleDeclarationCreate(uint64_t a1, uint64_t *a2)
{
  uint64_t Instance;

  if (!a2)
    return FigSignalErrorAt();
  MEMORY[0x19402F294](&FigCSSStyleDeclarationGetTypeID_sRegisterFigCSSStyleDeclarationOnce, figCSSStyleDeclarationRegisterFigCSSStyleDeclaration);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  *a2 = Instance;
  return 0;
}

uint64_t FigCSSStyleDeclarationCopyPropertyNameAtIndex(uint64_t a1, CFIndex idx, _QWORD *a3)
{
  const __CFArray *Count;
  const void *ValueAtIndex;

  if (!a1 || !a3)
    return FigSignalErrorAt();
  Count = *(const __CFArray **)(a1 + 16);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if (idx < 0 || (uint64_t)Count <= idx)
    return FigSignalErrorAt();
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), idx);
  if (ValueAtIndex)
    ValueAtIndex = CFRetain(ValueAtIndex);
  *a3 = ValueAtIndex;
  return 0;
}

uint64_t FigCSSStyleDeclarationCopyPropertyValue(uint64_t a1, const void *a2, _QWORD *a3)
{
  const __CFDictionary *v4;
  const __CFDictionary *Value;
  const void *v6;
  CFTypeRef v7;
  uint64_t result;

  if (!a1 || !a2 || !a3)
    return FigSignalErrorAt();
  v4 = *(const __CFDictionary **)(a1 + 24);
  if (!v4)
    return 4294949478;
  Value = (const __CFDictionary *)CFDictionaryGetValue(v4, a2);
  if (!Value)
    return 4294949477;
  v6 = CFDictionaryGetValue(Value, CFSTR("value"));
  if (!v6)
    return 4294949477;
  v7 = CFRetain(v6);
  result = 0;
  *a3 = v7;
  return result;
}

uint64_t FigCSSStyleDeclarationSetPropertyInfo(CFTypeRef cf, void *key, const void *a3, int a4)
{
  const __CFDictionary *v8;
  const __CFArray *v9;
  CFRange v10;
  CFIndex FirstIndexOfValue;
  const __CFAllocator *v12;
  CFMutableArrayRef Mutable;
  const __CFAllocator *v14;
  CFMutableDictionaryRef v15;
  const __CFAllocator *v16;
  __CFDictionary *v17;
  __CFDictionary *v18;

  if (!cf || !key || !a3)
    return FigSignalErrorAt();
  v8 = (const __CFDictionary *)*((_QWORD *)cf + 3);
  if (v8 && CFDictionaryGetValue(v8, key))
  {
    v9 = (const __CFArray *)*((_QWORD *)cf + 2);
    if (v9)
    {
      v10.length = CFArrayGetCount(v9);
      v9 = (const __CFArray *)*((_QWORD *)cf + 2);
    }
    else
    {
      v10.length = 0;
    }
    v10.location = 0;
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v9, v10, key);
    if (FirstIndexOfValue != -1)
    {
      CFArrayRemoveValueAtIndex(*((CFMutableArrayRef *)cf + 2), FirstIndexOfValue);
      CFDictionaryRemoveValue(*((CFMutableDictionaryRef *)cf + 3), key);
    }
  }
  if (!*((_QWORD *)cf + 2))
  {
    v12 = CFGetAllocator(cf);
    Mutable = CFArrayCreateMutable(v12, 0, MEMORY[0x1E0C9B378]);
    *((_QWORD *)cf + 2) = Mutable;
    if (!Mutable)
      return FigSignalErrorAt();
  }
  if (!*((_QWORD *)cf + 3))
  {
    v14 = CFGetAllocator(cf);
    v15 = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *((_QWORD *)cf + 3) = v15;
    if (!v15)
      return FigSignalErrorAt();
  }
  v16 = CFGetAllocator(cf);
  v17 = CFDictionaryCreateMutable(v16, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v17)
    return FigSignalErrorAt();
  v18 = v17;
  CFDictionarySetValue(v17, CFSTR("value"), a3);
  if (a4)
    CFDictionarySetValue(v18, CFSTR("important"), (const void *)*MEMORY[0x1E0C9AE50]);
  CFArrayAppendValue(*((CFMutableArrayRef *)cf + 2), key);
  CFDictionarySetValue(*((CFMutableDictionaryRef *)cf + 3), key, v18);
  CFRelease(v18);
  return 0;
}

uint64_t figCSSStyleSheet_Init(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

void figCSSStyleSheet_Finalize(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 16);
  if (v1)
    CFRelease(v1);
}

CFStringRef figCSSStyleSheet_CopyFormattingDesc(uint64_t a1)
{
  const void *v2;
  CFStringRef v3;

  v2 = (const void *)FigCFCopyCompactDescription();
  v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<FigCSSStyleSheet [%p]\n %@>"), a1, v2);
  if (v2)
    CFRelease(v2);
  return v3;
}

CFStringRef figCSSStyleSheet_CopyDebugDesc(uint64_t a1)
{
  const void *v2;
  CFStringRef v3;

  v2 = (const void *)FigCFCopyCompactDescription();
  v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigCSSStyleSheet %p] %@"), a1, v2);
  if (v2)
    CFRelease(v2);
  return v3;
}

uint64_t figCSSRuleList_Init(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

void figCSSRuleList_Finalize(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 16);
  if (v1)
    CFRelease(v1);
}

__CFString *figCSSRuleList_CopyFormattingDesc(CFArrayRef *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  CFIndex i;
  const __CFArray *Count;
  const void *v6;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigCSSRuleList [%p]\n"), a1);
  for (i = 0; ; ++i)
  {
    Count = a1[2];
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (i >= (uint64_t)Count)
      break;
    CFArrayGetValueAtIndex(a1[2], i);
    v6 = (const void *)FigCFCopyCompactDescription();
    CFStringAppendFormat(Mutable, 0, CFSTR("    rule[%ld] = %@\n"), i, v6);
    if (v6)
      CFRelease(v6);
  }
  CFStringAppendFormat(Mutable, 0, CFSTR(">"));
  return Mutable;
}

CFStringRef figCSSRuleList_CopyDebugDesc(uint64_t a1)
{
  const void *v2;
  CFStringRef v3;

  v2 = (const void *)FigCFCopyCompactDescription();
  v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigCSSRuleList %p] [%@]"), a1, v2);
  if (v2)
    CFRelease(v2);
  return v3;
}

_QWORD *figCSSRule_Init(_QWORD *result)
{
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  return result;
}

void figCSSRule_Finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 24);
  if (v3)
    CFRelease(v3);
}

__CFString *figCSSRule_CopyFormattingDesc(unsigned int *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  const __CFString *v4;
  const void *v5;
  const void *v6;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  CFGetAllocator(a1);
  v4 = _figCSSObjModel_MapRuleTypeToString(a1[4]);
  v5 = (const void *)FigCFCopyCompactDescription();
  v6 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigCSSRule [%p]\n"), a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("    ruleType = %@ selector = %@\n"), v4, v5);
  CFStringAppendFormat(Mutable, 0, CFSTR("    %@\n"), v6);
  CFStringAppendFormat(Mutable, 0, CFSTR(">"));
  CFRelease(v4);
  if (v5)
    CFRelease(v5);
  if (v6)
    CFRelease(v6);
  return Mutable;
}

CFStringRef figCSSRule_CopyDebugDesc(unsigned int *a1)
{
  const __CFString *v2;
  const void *v3;
  const void *v4;
  CFStringRef v5;

  CFGetAllocator(a1);
  v2 = _figCSSObjModel_MapRuleTypeToString(a1[4]);
  v3 = (const void *)FigCFCopyCompactDescription();
  v4 = (const void *)FigCFCopyCompactDescription();
  v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigCSSRule %p] %@ %@ : %@"), a1, v2, v3, v4);
  CFRelease(v2);
  if (v3)
    CFRelease(v3);
  if (v4)
    CFRelease(v4);
  return v5;
}

const __CFString *_figCSSObjModel_MapRuleTypeToString(unsigned int a1)
{
  if (a1 < 9)
    return off_1E2FA8D18[a1];
  FigSignalErrorAt();
  return CFSTR("Invalid");
}

uint64_t figCSSStyleDeclaration_Init(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

void figCSSStyleDeclaration_Finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 24);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 16);
  if (v3)
    CFRelease(v3);
}

__CFString *figCSSStyleDeclaration_CopyFormattingDesc(CFArrayRef *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  CFIndex v4;
  const void *v5;
  const __CFArray *Count;
  const void *ValueAtIndex;
  const __CFDictionary *Value;
  const __CFDictionary *v9;
  const void *v10;
  const void *v11;
  int v12;
  const __CFString *v13;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigCSSStyleDeclaration [%p] {\n"), a1);
  v4 = 0;
  v5 = (const void *)*MEMORY[0x1E0C9AE50];
  while (1)
  {
    Count = a1[2];
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (v4 >= (uint64_t)Count)
      break;
    ValueAtIndex = CFArrayGetValueAtIndex(a1[2], v4);
    Value = (const __CFDictionary *)CFDictionaryGetValue(a1[3], ValueAtIndex);
    if (!Value)
    {
      v11 = (const void *)FigCFCopyCompactDescription();
LABEL_11:
      v13 = &stru_1E2FD85F8;
      goto LABEL_12;
    }
    v9 = Value;
    CFDictionaryGetValue(Value, CFSTR("value"));
    v10 = CFDictionaryGetValue(v9, CFSTR("important"));
    v11 = (const void *)FigCFCopyCompactDescription();
    if (!v10)
      goto LABEL_11;
    v12 = CFEqual(v10, v5);
    v13 = CFSTR("!important");
    if (!v12)
      v13 = &stru_1E2FD85F8;
LABEL_12:
    CFStringAppendFormat(Mutable, 0, CFSTR("    %@ : %@ %@\n"), ValueAtIndex, v11, v13);
    if (v11)
      CFRelease(v11);
    ++v4;
  }
  CFStringAppendFormat(Mutable, 0, CFSTR("} >"));
  return Mutable;
}

CFStringRef figCSSStyleDeclaration_CopyDebugDesc(uint64_t a1)
{
  const void *v2;
  const void *v3;
  CFStringRef v4;

  v2 = (const void *)FigCFCopyCompactDescription();
  v3 = (const void *)FigCFCopyCompactDescription();
  v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("** [FigCSSStyleDeclaration <%p> names = {%@} properties = {%@} ]"), a1, v2, v3);
  if (v3)
    CFRelease(v3);
  if (v2)
    CFRelease(v2);
  return v4;
}

uint64_t FigCaptionGroupConverterToSampleBufferGetClassID()
{
  MEMORY[0x19402F294](&FigCaptionGroupConverterToSampleBufferGetClassID_sRegisterFigCaptionGroupConverterToSampleBufferTypeOnce, RegisterFigCaptionGroupConverterToSampleBufferType);
  return sFigCaptionGroupConverterToSampleBufferClassID;
}

uint64_t RegisterFigCaptionGroupConverterToSampleBufferType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFStringRef FigCaptionGroupConverterToSampleBufferCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigCaptionGroupConverterToSampleBuffer %p]"), a1);
}

uint64_t FigPWDKeyExchangeSenderCreateForAOCP(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t DerivedStorage;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  if (a4)
  {
    FigPWDKeyExchangeSenderGetClassID();
    v6 = CMDerivedObjectCreate();
    if (!(_DWORD)v6)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (!DerivedStorage)
        return 4294947756;
      v8 = DerivedStorage;
      *(_DWORD *)(DerivedStorage + 24) = 0;
      *(_QWORD *)(DerivedStorage + 32) = 0;
      if (a2)
      {
        v9 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(DerivedStorage + 64) = *(_OWORD *)a2;
        *(_OWORD *)(DerivedStorage + 80) = v9;
        if (*(_QWORD *)(a2 + 8))
        {
          *(_QWORD *)(DerivedStorage + 96) = FigCFWeakReferenceHolderCreateWithReferencedObject();
          *(_QWORD *)(v8 + 104) = FigDispatchQueueCreateWithPriority();
          v10 = FigSimpleMutexCreate();
          *(_QWORD *)(v8 + 16) = v10;
          if (v10)
          {
            v11 = 0;
            *a4 = 0;
            return v11;
          }
          return 4294947756;
        }
      }
      return FigSignalErrorAt();
    }
    return v6;
  }
  return FigSignalErrorAt();
}

uint64_t pwdKeyExchangeSenderAOCP_Finalize()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  NSObject *v7;

  result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    v1 = result;
    v2 = *(_QWORD *)(result + 40);
    if (v2)
    {
      JE2f6WCx(v2);
      *(_QWORD *)(v1 + 40) = 0;
    }
    *(_QWORD *)(v1 + 32) = 0;
    *(_DWORD *)(v1 + 24) = 0;
    v3 = *(const void **)(v1 + 56);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(v1 + 56) = 0;
    }
    v4 = *(const void **)(v1 + 112);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(v1 + 112) = 0;
    }
    v5 = *(const void **)(v1 + 96);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(v1 + 96) = 0;
    }
    v6 = *(const void **)(v1 + 128);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(v1 + 128) = 0;
    }
    v7 = *(NSObject **)(v1 + 104);
    if (v7)
    {
      dispatch_release(v7);
      *(_QWORD *)(v1 + 104) = 0;
    }
    return FigSimpleMutexDestroy();
  }
  return result;
}

__CFString *pwdKeyExchangeSenderAOCP_CopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigPWDKeyExchangeSenderAOCP %p>"), a1);
  return Mutable;
}

uint64_t pwdKeyExchangeSenderAOCP_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t UInt64;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = 4294947752;
  if (a2 && a4)
  {
    v8 = DerivedStorage;
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
    if (CFEqual(a2, CFSTR("PWDEncryptor")))
    {
      if (*(_QWORD *)(v8 + 48))
      {
        UInt64 = FigCFNumberCreateUInt64();
        *a4 = UInt64;
        if (UInt64)
          v7 = 0;
        else
          v7 = 4294947756;
      }
    }
    else
    {
      v7 = 0;
    }
    MEMORY[0x19402EF04](*(_QWORD *)(v8 + 16));
  }
  return v7;
}

uint64_t pwdKeyExchangeSenderAOCP_SetProperty()
{
  return 0;
}

uint64_t pwdKeyExchangeSenderAOCP_Start(uint64_t a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v2;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v4;
  CFMutableDictionaryRef v5;
  const __CFDictionary *v6;
  CFDataRef v7;
  const void *Value;
  __CFDictionary *v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFDataRef Data;
  const void *v13;
  const void *v14;
  NSObject *v15;
  uint64_t v16;
  __CFDictionary *v17;
  _QWORD block[7];
  int valuePtr;
  int v21;
  uint64_t v22;

  v22 = 0;
  v21 = 0;
  if (a1)
  {
    FigPWDKeyExchangeSenderGetCMBaseObject();
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (Qhl17oSYJtCJIxM((uint64_t)mortimer_1024_2048_certificate_bundle, 2624, (uint64_t)&VERSION, 8, (uint64_t)&v22))return FigSignalErrorAt();
    *(_QWORD *)(DerivedStorage + 32) = v22;
    v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
      return FigSignalErrorAt();
    v4 = Mutable;
    v5 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!v5)
    {
      v16 = FigSignalErrorAt();
      v17 = v4;
      goto LABEL_20;
    }
    v6 = v5;
    FigCFDictionarySetInt32();
    v7 = CFDataCreate(v2, mortimer_1024_2048_certificate_bundle, 2624);
    CFDictionarySetValue(v4, CFSTR("Y7bdIsnh7"), v7);
    if (nS1Q9ljw9esy9((uint64_t)v4, (uint64_t)v6))
    {
      v16 = FigSignalErrorAt();
      if (!v7)
        goto LABEL_19;
      goto LABEL_18;
    }
    FigCFDictionaryGetInt32IfPresent();
    Value = CFDictionaryGetValue(v6, CFSTR("xNJu5eepP"));
    *(_DWORD *)(DerivedStorage + 24) = v21;
    v9 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(v9, CFSTR("payload"), Value);
    valuePtr = 1936745330;
    v10 = CFNumberCreate(v2, kCFNumberSInt32Type, &valuePtr);
    if (v10)
    {
      v11 = v10;
      CFDictionarySetValue(v9, CFSTR("opcode"), v10);
      CFRelease(v11);
    }
    Data = CFPropertyListCreateData(v2, v9, kCFPropertyListBinaryFormat_v1_0, 0, 0);
    if (*(_QWORD *)(DerivedStorage + 72))
    {
      v13 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
      if (!v13)
      {
        v16 = FigSignalErrorAt();
        if (!v9)
        {
LABEL_15:
          if (Data)
            CFRelease(Data);
          if (!v7)
            goto LABEL_19;
LABEL_18:
          CFRelease(v7);
LABEL_19:
          CFRelease(v4);
          v17 = v6;
LABEL_20:
          CFRelease(v17);
          return v16;
        }
LABEL_14:
        CFRelease(v9);
        goto LABEL_15;
      }
      v14 = v13;
      CFRetain(v13);
      if (Data)
        CFRetain(Data);
      v15 = *(NSObject **)(DerivedStorage + 104);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __pwdKeyExchangeSenderAOCP_Start_block_invoke;
      block[3] = &__block_descriptor_tmp_88;
      block[4] = DerivedStorage;
      block[5] = v14;
      block[6] = Data;
      dispatch_async(v15, block);
      CFRelease(v14);
    }
    v16 = 0;
    if (!v9)
      goto LABEL_15;
    goto LABEL_14;
  }
  return FigSignalErrorAt();
}

uint64_t pwdKeyExchangeSenderAOCP_Stop()
{
  return 4294947755;
}

uint64_t pwdKeyExchangeSenderAOCP_ProcessIncomingMessage(const void *a1, const __CFData *a2)
{
  const __CFAllocator *v3;
  CFPropertyListRef v4;
  const void *v5;
  const void *v6;
  const void *v7;
  uint64_t DerivedStorage;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v10;
  CFMutableDictionaryRef v11;
  const __CFDictionary *v12;
  CFDataRef v13;
  CFDataRef v14;
  unsigned int v15;
  CFDataRef v16;
  CFDataRef v17;
  CFMutableDictionaryRef v18;
  __CFDictionary *v19;
  __CFDictionary *v20;
  void *v21;
  CFArrayRef v22;
  int v23;
  CFURLRef v24;
  uint64_t *v25;
  __CFDictionary *v26;
  const void *v27;
  const void *v28;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, const __CFAllocator *, _QWORD, CFURLRef, _QWORD, _QWORD, void *, uint64_t, _OWORD *, _QWORD, _QWORD, _QWORD, void (*)(const void *, int, uint64_t, void *, size_t, size_t, char, int), uint64_t, _QWORD *, _QWORD *);
  int v34;
  uint64_t v35;
  uint64_t GlobalNetworkBufferingQueue;
  uint64_t (*v37)(void *, uint64_t, _QWORD, uint64_t *);
  int v38;
  __CFDictionary *v39;
  const void *v41;
  const __CFArray *v42;
  const __CFDictionary *v43;
  const __CFData *v44;
  __CFDictionary *cf;
  const __CFData *v46;
  _QWORD *v47;
  CFErrorRef error;
  int v49;
  uint64_t v50;
  char __s[4];
  void *value;
  void *values;
  _OWORD v54[4];
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  v49 = 0;
  error = 0;
  if (a1 && a2)
  {
    v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v4 = CFPropertyListCreateWithData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0, 0, &error);
    if (!v4)
      return FigSignalErrorAt();
    v5 = v4;
    FigCFDictionaryGetInt32IfPresent();
    if (!v49
      || (v6 = CFDictionaryGetValue((CFDictionaryRef)v5, CFSTR("payload"))) == 0
      || v49 != 1667982195
      || (v7 = v6,
          strcpy(__s, "one"),
          v50 = 0,
          FigPWDKeyExchangeSenderGetCMBaseObject(a1),
          DerivedStorage = CMBaseObjectGetDerivedStorage(),
          (Mutable = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) == 0))
    {
      v35 = FigSignalErrorAt();
LABEL_59:
      CFRelease(v5);
      return v35;
    }
    v10 = Mutable;
    v11 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!v11)
    {
      v35 = FigSignalErrorAt();
      v39 = v10;
      goto LABEL_58;
    }
    v12 = v11;
    FigCFDictionarySetInt32();
    v13 = CFDataCreate(v3, mortimer_1024_2048_certificate_bundle, 2624);
    if (!v13)
    {
      v35 = FigSignalErrorAt();
      goto LABEL_57;
    }
    v14 = v13;
    CFDictionarySetValue(v10, CFSTR("Y7bdIsnh7"), v13);
    FigCFDictionarySetInt32();
    CFDictionarySetValue(v10, CFSTR("yN1lNULD2GD"), v7);
    FigCFDictionarySetInt64();
    v15 = strlen(__s);
    v16 = CFDataCreate(v3, (const UInt8 *)__s, v15);
    if (!v16)
    {
      v35 = FigSignalErrorAt();
      goto LABEL_56;
    }
    v17 = v16;
    CFDictionarySetValue(v10, CFSTR("HJN6grNt"), v16);
    if (pC3lVfLuVJLMz((uint64_t)v10, (uint64_t)v12))
      goto LABEL_64;
    FigCFDictionaryGetInt64IfPresent();
    if (!v50)
      goto LABEL_64;
    *(_QWORD *)(DerivedStorage + 40) = v50;
    if (!CFDictionaryGetValue(v12, CFSTR("yN1lNULD2GD")))
      goto LABEL_64;
    value = 0;
    values = 0;
    FigPWDKeyExchangeSenderGetCMBaseObject(a1);
    v47 = (_QWORD *)CMBaseObjectGetDerivedStorage();
    v18 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v46 = v17;
    if (!v18)
    {
      v34 = FigSignalErrorAt();
      v22 = 0;
      v21 = 0;
      v24 = 0;
      goto LABEL_45;
    }
    v19 = v18;
    v44 = v14;
    v20 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    cf = v19;
    if (v20)
    {
      v21 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      values = v21;
      if (v21)
      {
        FigCFDictionarySetInt();
        FigCFDictionarySetInt();
        CFDictionarySetValue((CFMutableDictionaryRef)v21, CFSTR("uri"), &stru_1E2FD85F8);
        FigCFDictionarySetBase64Data();
        v22 = CFArrayCreate(v3, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
        if (v22)
        {
          CFDictionarySetValue(v20, CFSTR("streaming-keys"), v22);
          CFDictionarySetValue(v19, CFSTR("fairplay-streaming-request"), v20);
          v23 = FigCFDataCreateWithJSONObject();
          if (!v23)
          {
            v24 = CFURLCreateWithString(v3, CFSTR("https://mortimer.apple.com/drm/fppas/Q1.0.0/m"), 0);
            if (v24)
            {
              v42 = v22;
              v43 = v12;
              v25 = v47 + 7;
              if (!v47[7])
              {
                v21 = (void *)FigURLStorageSessionCopyGlobalSession();
                if (!v21)
                  goto LABEL_77;
                GlobalNetworkBufferingQueue = FigThreadGetGlobalNetworkBufferingQueue();
                v37 = *(uint64_t (**)(void *, uint64_t, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 40);
                if (!v37)
                {
                  v21 = 0;
                  v34 = -12782;
                  goto LABEL_39;
                }
                v38 = v37(v21, GlobalNetworkBufferingQueue, 0, v25);
                if (v38)
                {
                  v34 = v38;
                  v21 = 0;
LABEL_39:
                  v22 = v42;
                  v12 = v43;
LABEL_40:
                  CFRelease(cf);
                  if (value)
                    CFRelease(value);
                  if (v20)
                    CFRelease(v20);
                  v14 = v44;
LABEL_45:
                  if (values)
                    CFRelease(values);
                  if (v22)
                    CFRelease(v22);
                  if (v24)
                    CFRelease(v24);
                  if (v21)
                    CFRelease(v21);
                  v17 = v46;
                  if (!v34)
                  {
                    v35 = 0;
LABEL_55:
                    CFRelease(v17);
LABEL_56:
                    CFRelease(v14);
LABEL_57:
                    CFRelease(v10);
                    v39 = v12;
LABEL_58:
                    CFRelease(v39);
                    goto LABEL_59;
                  }
LABEL_64:
                  v35 = FigSignalErrorAt();
                  goto LABEL_55;
                }
              }
              v26 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              v21 = v26;
              if (v26)
              {
                v41 = v5;
                CFDictionarySetValue(v26, CFSTR("FHRP_Payload"), value);
                v27 = (const void *)v47[17];
                if (v27)
                {
                  CFRelease(v27);
                  v47[17] = 0;
                }
                v29 = v47 + 14;
                v28 = (const void *)v47[14];
                if (v28)
                {
                  CFRelease(v28);
                  *v29 = 0;
                }
                v30 = v47[16];
                if (!v30)
                {
                  CFGetAllocator(a1);
                  v31 = FigRetainProxyCreate();
                  if (v31)
                    goto LABEL_31;
                  v30 = v47[16];
                }
                v32 = *v25;
                v33 = *(uint64_t (**)(uint64_t, const __CFAllocator *, _QWORD, CFURLRef, _QWORD, _QWORD, void *, uint64_t, _OWORD *, _QWORD, _QWORD, _QWORD, void (*)(const void *, int, uint64_t, void *, size_t, size_t, char, int), uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
                if (!v33)
                {
                  v34 = -12782;
                  goto LABEL_38;
                }
                memset(v54, 0, sizeof(v54));
                v55 = 0x900000000;
                v56 = 0u;
                v57 = 0u;
                v58 = 0;
                v31 = v33(v32, v3, 0, v24, 0, 0, v21, 1, v54, 0, 0, 0, FigPWDKeyExchangeSenderAOCP_ckcHTTPReadCallback, v30, v29, v47 + 15);
LABEL_31:
                v34 = v31;
LABEL_38:
                v5 = v41;
                goto LABEL_39;
              }
LABEL_77:
              v34 = FigSignalErrorAt();
              goto LABEL_39;
            }
            v34 = FigSignalErrorAt();
LABEL_76:
            v21 = 0;
            goto LABEL_40;
          }
        }
        else
        {
          v23 = FigSignalErrorAt();
        }
        v34 = v23;
        v24 = 0;
        goto LABEL_76;
      }
      v34 = FigSignalErrorAt();
      v24 = 0;
    }
    else
    {
      v34 = FigSignalErrorAt();
      v24 = 0;
      v21 = 0;
    }
    v22 = 0;
    goto LABEL_40;
  }
  return FigSignalErrorAt();
}

void FigPWDKeyExchangeSenderAOCP_ckcHTTPReadCallback(const void *a1, int a2, uint64_t a3, void *a4, size_t a5, size_t a6, char a7, int a8)
{
  const void *Owner;
  CFTypeRef v16;
  int v17;
  uint64_t DerivedStorage;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  void (*v22)(const void *, __CFString *, _QWORD, CFTypeRef *);
  OpaqueCMBlockBuffer *v23;
  OSStatus appended;
  int v25;
  const void *v26;
  CFTypeRef cf;

  cf = 0;
  if (a3)
  {
    FigRetainProxyLockMutex();
    if (FigRetainProxyIsInvalidated())
    {
      v17 = FigSignalErrorAt();
      v16 = 0;
    }
    else
    {
      Owner = (const void *)FigRetainProxyGetOwner();
      if (Owner)
        v16 = CFRetain(Owner);
      else
        v16 = 0;
      v17 = 0;
    }
    FigRetainProxyUnlockMutex();
    if (v17)
      goto LABEL_28;
  }
  else
  {
    v16 = 0;
    if (FigSignalErrorAt())
      goto LABEL_28;
  }
  FigPWDKeyExchangeSenderGetCMBaseObject(v16);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(const void **)(DerivedStorage + 112) != a1 || (v19 = DerivedStorage, *(_DWORD *)(DerivedStorage + 120) != a2))
  {
LABEL_33:
    FigSignalErrorAt();
    goto LABEL_28;
  }
  if (a8)
  {
    v20 = *(_QWORD *)(DerivedStorage + 136);
    v21 = a1;
    if (v20)
    {
      CFRelease(*(CFTypeRef *)(v19 + 136));
      *(_QWORD *)(v19 + 136) = 0;
      v21 = *(const void **)(v19 + 112);
    }
    if (v21)
    {
      CFRelease(v21);
      *(_QWORD *)(v19 + 112) = 0;
    }
    v22 = *(void (**)(const void *, __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
    if (v22)
      v22(a1, CFSTR("FHRP_ErrorReturned"), *MEMORY[0x1E0C9AE00], &cf);
    FigPWDKeyExchangeSenderAOCP_handleResponseData();
    goto LABEL_28;
  }
  if (!a4)
    goto LABEL_24;
  v23 = *(OpaqueCMBlockBuffer **)(DerivedStorage + 136);
  if (!v23)
  {
    *(_QWORD *)(v19 + 136) = CFRetain(a4);
LABEL_24:
    if ((a7 & 2) == 0)
      goto LABEL_28;
    goto LABEL_25;
  }
  appended = CMBlockBufferAppendBufferReference(v23, (CMBlockBufferRef)a4, a5, a6, 0);
  if ((a7 & 2) == 0 || appended)
    goto LABEL_28;
LABEL_25:
  v25 = FigPWDKeyExchangeSenderAOCP_handleResponseData();
  v26 = *(const void **)(v19 + 112);
  if (v26)
  {
    CFRelease(v26);
    *(_QWORD *)(v19 + 112) = 0;
  }
  if (v25)
    goto LABEL_33;
LABEL_28:
  if (v16)
    CFRelease(v16);
  if (cf)
    CFRelease(cf);
}

uint64_t FigPWDKeyExchangeSenderAOCP_handleResponseData()
{
  uint64_t DerivedStorage;
  OpaqueCMBlockBuffer *v1;
  const __CFAllocator *v2;
  uint64_t CFDataWithBlockBufferNoCopy;
  const CFDictionaryKeyCallBacks *v4;
  const CFDictionaryValueCallBacks *v5;
  __CFDictionary *Mutable;
  const __CFDictionary *v7;
  const void *Value;
  const void *v9;
  __CFDictionary *v10;
  CFDataRef Data;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  const void *v15;
  CMBlockBufferRef blockBufferOut;

  blockBufferOut = 0;
  FigPWDKeyExchangeSenderGetCMBaseObject();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(OpaqueCMBlockBuffer **)(DerivedStorage + 136);
  if (!v1)
    goto LABEL_37;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  CFDataWithBlockBufferNoCopy = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, 0, &blockBufferOut);
  if ((_DWORD)CFDataWithBlockBufferNoCopy)
    goto LABEL_38;
  CFDataWithBlockBufferNoCopy = FigCreateCFDataWithBlockBufferNoCopy();
  if ((_DWORD)CFDataWithBlockBufferNoCopy)
    goto LABEL_38;
  CFDataWithBlockBufferNoCopy = FigJSONObjectCreateWithData();
  if ((_DWORD)CFDataWithBlockBufferNoCopy)
    goto LABEL_38;
  if (FigCFDictionaryGetValue() && (FigCFDictionaryGetValue(), FigCFArrayGetFirstValue(), FigCFDictionaryGetValue()))
  {
    CFDataWithBlockBufferNoCopy = FigCreateCFDataFromBase64EncodedString();
    if (!(_DWORD)CFDataWithBlockBufferNoCopy)
    {
      v4 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
      v5 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v7 = CFDictionaryCreateMutable(0, 0, v4, v5);
      if (ZZUDP2EEn9tLDQ()
        || (FigCFDictionarySetInt64(),
            FigCFDictionarySetInt64(),
            CFDictionarySetValue(Mutable, CFSTR("RulIk"), 0),
            gojqbvrX305gQO((uint64_t)Mutable, (uint64_t)v7))
        || (*(_QWORD *)(DerivedStorage + 48) = 0, FigCFDictionaryGetInt64IfPresent() != 1)
        || (Value = CFDictionaryGetValue(v7, CFSTR("RulIk"))) == 0)
      {
        v12 = FigSignalErrorAt();
        Data = 0;
        v10 = 0;
      }
      else
      {
        v9 = Value;
        v10 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        FigCFDictionarySetInt64();
        CFDictionarySetValue(v10, CFSTR("payload"), v9);
        Data = CFPropertyListCreateData(v2, v10, kCFPropertyListBinaryFormat_v1_0, 0, 0);
        v12 = 0;
      }
      goto LABEL_13;
    }
  }
  else
  {
LABEL_37:
    CFDataWithBlockBufferNoCopy = FigSignalErrorAt();
  }
LABEL_38:
  v12 = CFDataWithBlockBufferNoCopy;
  Data = 0;
  v10 = 0;
  Mutable = 0;
  v7 = 0;
LABEL_13:
  if (*(_QWORD *)(DerivedStorage + 80))
  {
    v13 = FigCFWeakReferenceHolderCopyReferencedObject();
    v14 = (const void *)v13;
    if (v13 && !(*(unsigned int (**)(uint64_t, CFDataRef))(DerivedStorage + 80))(v13, Data))
      v12 = 0;
    else
      v12 = FigSignalErrorAt();
  }
  else
  {
    v14 = 0;
  }
  if (Mutable)
    CFRelease(Mutable);
  if (v7)
    CFRelease(v7);
  if (v10)
    CFRelease(v10);
  if (Data)
    CFRelease(Data);
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  v15 = *(const void **)(DerivedStorage + 136);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(DerivedStorage + 136) = 0;
  }
  if (v14)
    CFRelease(v14);
  return v12;
}

uint64_t FigPictureCollectionGetClassID()
{
  if (FigPictureCollectionGetClassID_sRegisterFigPictureCollectionBaseTypeOnce != -1)
    dispatch_once_f(&FigPictureCollectionGetClassID_sRegisterFigPictureCollectionBaseTypeOnce, &FigPictureCollectionGetClassID_sFigPictureCollectionClassID, (dispatch_function_t)FigPictureCollectionGetClassIDCallback);
  return FigPictureCollectionGetClassID_sFigPictureCollectionClassID;
}

uint64_t FigPictureCollectionGetClassIDCallback()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigPictureCollectionGetTypeID()
{
  if (FigPictureCollectionGetClassID_sRegisterFigPictureCollectionBaseTypeOnce != -1)
    dispatch_once_f(&FigPictureCollectionGetClassID_sRegisterFigPictureCollectionBaseTypeOnce, &FigPictureCollectionGetClassID_sFigPictureCollectionClassID, (dispatch_function_t)FigPictureCollectionGetClassIDCallback);
  return CMBaseClassGetCFTypeID();
}

CFStringRef FigPictureCollectionBaseCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigPictureCollection %p]"), a1);
}

uint64_t FigFairPlayCPECryptorCreate(const void *a1, const void *a2, int a3, const opaqueCMFormatDescription *a4, const void *a5, const void *a6, const void *a7, CFTypeRef *a8)
{
  uint64_t v13;
  CFTypeRef *v14;
  uint64_t IsSkipEncrypted;
  uint64_t DerivedStorage;
  uint64_t v17;
  CFTypeRef v18;
  CFTypeRef v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(uint64_t, __CFString *, uint64_t, CFNumberRef *);
  const __CFData *LegacySinfFromSinfExtensions;
  const __CFData *ExtendedSinfFromSinfExtensions;
  const __CFData *DPInfoFromSinfExtensions;
  int Length;
  int v27;
  uint64_t v28;
  const __CFDictionary *v29;
  const __CFNumber *Value;
  const __CFData *v31;
  const __CFData *v32;
  uint64_t v33;
  uint64_t v34;
  CFTypeRef v35;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v38;
  unsigned int v39;
  uint64_t v43;
  CFTypeRef v44;
  _BYTE valuePtr[12];
  __int16 v46;
  int v47;
  CFNumberRef number[2];
  __int128 v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v44 = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  v13 = 4294955146;
  if (!a1)
    goto LABEL_51;
  if (!a3)
    goto LABEL_51;
  if (!a4)
    goto LABEL_51;
  if (!a5)
    goto LABEL_51;
  v14 = a8;
  if (!a8)
    goto LABEL_51;
  FigCPEFairPlayCryptorGetClassID();
  IsSkipEncrypted = CMDerivedObjectCreate();
  if ((_DWORD)IsSkipEncrypted)
    goto LABEL_49;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    v13 = 4294955145;
    goto LABEL_51;
  }
  v17 = DerivedStorage;
  if (a2)
    v18 = CFRetain(a2);
  else
    v18 = 0;
  *(_QWORD *)v17 = v18;
  *(_QWORD *)(v17 + 8) = CFRetain(a1);
  *(_DWORD *)(v17 + 16) = a3;
  *(_QWORD *)(v17 + 24) = CFRetain(a5);
  if (a6)
    v19 = CFRetain(a6);
  else
    v19 = 0;
  *(_QWORD *)(v17 + 32) = v19;
  if ((a3 & 0xD) == 0)
    goto LABEL_40;
  number[0] = 0;
  *(_DWORD *)valuePtr = 0;
  v21 = *(_QWORD *)v17;
  v20 = *(_QWORD *)(v17 + 8);
  v22 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
  if (v22)
  {
    if (!v22(v20, CFSTR("3721370B-B25B-4EED-A8C8-F27CAA873C75"), v21, number))
    {
      CFNumberGetValue(number[0], kCFNumberSInt32Type, valuePtr);
      if (number[0])
        CFRelease(number[0]);
    }
  }
  *(_OWORD *)number = 0u;
  v49 = 0u;
  LegacySinfFromSinfExtensions = (const __CFData *)FigFairPlayGetLegacySinfFromSinfExtensions(*(const __CFDictionary **)(v17 + 24));
  ExtendedSinfFromSinfExtensions = (const __CFData *)FigFairPlayGetExtendedSinfFromSinfExtensions(*(const __CFDictionary **)(v17 + 24));
  DPInfoFromSinfExtensions = (const __CFData *)FigFairPlayGetDPInfoFromSinfExtensions(*(const __CFDictionary **)(v17 + 24));
  if (LegacySinfFromSinfExtensions)
  {
    number[1] = (CFNumberRef)CFDataGetBytePtr(LegacySinfFromSinfExtensions);
    Length = CFDataGetLength(LegacySinfFromSinfExtensions);
  }
  else
  {
    Length = 0;
    number[1] = 0;
  }
  LODWORD(number[0]) = Length;
  if (ExtendedSinfFromSinfExtensions)
  {
    *((_QWORD *)&v49 + 1) = CFDataGetBytePtr(ExtendedSinfFromSinfExtensions);
    v27 = CFDataGetLength(ExtendedSinfFromSinfExtensions);
  }
  else
  {
    v27 = 0;
    *((_QWORD *)&v49 + 1) = 0;
  }
  LODWORD(v49) = v27;
  if ((a3 & 5) == 0)
    goto LABEL_40;
  v28 = FigCPEFairPlayProtectorCheckOutCryptRef((uint64_t)a1, (uint64_t)a5);
  *(_QWORD *)(v17 + 40) = v28;
  if (v28)
    goto LABEL_40;
  CMFormatDescriptionGetMediaType(a4);
  if (*(_QWORD *)(v17 + 40))
    goto LABEL_40;
  *(_QWORD *)valuePtr = 0;
  v29 = *(const __CFDictionary **)(v17 + 32);
  if (!v29)
  {
    if ((unint64_t)LegacySinfFromSinfExtensions | (unint64_t)ExtendedSinfFromSinfExtensions)
    {
      qdrn6();
    }
    else
    {
      if (!DPInfoFromSinfExtensions)
      {
        v13 = 0;
        goto LABEL_37;
      }
      CFDataGetBytePtr(DPInfoFromSinfExtensions);
      CFDataGetLength(DPInfoFromSinfExtensions);
      NOAHabXy();
    }
    v13 = FAIRPLAY_CALL_LOG(v33);
    goto LABEL_37;
  }
  v43 = 0;
  Value = (const __CFNumber *)CFDictionaryGetValue(v29, CFSTR("SessionID"));
  CFNumberGetValue(Value, kCFNumberSInt64Type, &v43);
  v31 = (const __CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(v17 + 32), CFSTR("PlayInfo"));
  if (v31)
  {
    v32 = v31;
    CFDataGetBytePtr(v31);
    CFDataGetLength(v32);
  }
  NQ7ggq70Owbvqj8qbExsJ5Hw();
  v13 = FAIRPLAY_CALL_LOG(v34);
  v14 = a8;
LABEL_37:
  if (*(_QWORD *)valuePtr)
    *(_QWORD *)(v17 + 40) = FigCFKBCryptRefCreate(*MEMORY[0x1E0C9AE00], *(uint64_t *)valuePtr);
  if ((_DWORD)v13)
    goto LABEL_51;
LABEL_40:
  IsSkipEncrypted = FigFairPlayIsSkipEncrypted(*(const __CFDictionary **)(v17 + 24), (BOOL *)(v17 + 49));
  if ((_DWORD)IsSkipEncrypted
    || *(_BYTE *)(v17 + 49)
    && (IsSkipEncrypted = FigFairPlayGetSkipParametersFromSinf(*(const __CFDictionary **)(v17 + 24), (_DWORD *)(v17 + 52)), (_DWORD)IsSkipEncrypted))
  {
LABEL_49:
    v13 = IsSkipEncrypted;
    goto LABEL_51;
  }
  v35 = a7;
  if (a7)
    v35 = CFRetain(a7);
  *(_QWORD *)(v17 + 80) = v35;
  FigCPEExternalProtectionMonitorBeginMonitoring((uint64_t)v35);
  CMNotificationCenterGetDefaultLocalCenter();
  v13 = FigNotificationCenterAddWeakListener();
  if (!(_DWORD)v13)
  {
    *v14 = v44;
    v44 = 0;
    return FigFairPlayMapFairPlayErrorToCPEError(v13);
  }
LABEL_51:
  if (v44)
    CFRelease(v44);
  if (dword_1EE2A3248)
  {
    LODWORD(v43) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v38 = v43;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
      v39 = v38;
    else
      v39 = v38 & 0xFFFFFFFE;
    if (v39)
    {
      *(_DWORD *)valuePtr = 136315394;
      *(_QWORD *)&valuePtr[4] = "FigFairPlayCPECryptorCreate";
      v46 = 1024;
      v47 = v13;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return FigFairPlayMapFairPlayErrorToCPEError(v13);
}

uint64_t ExternalProtectionStatusChangedCallback_1()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t FigFairPlayCPELimitedCryptorCreate(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t DerivedStorage;
  _QWORD *v8;
  CFTypeRef v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a3)
  {
    FigCPEFairPlayCryptorGetClassID();
    v6 = CMDerivedObjectCreate();
    if (!(_DWORD)v6)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (DerivedStorage)
      {
        v8 = (_QWORD *)DerivedStorage;
        if (a2)
          v9 = CFRetain(a2);
        else
          v9 = 0;
        *v8 = v9;
        v6 = 0;
        v8[1] = FigCFKBCryptRefCreate(*MEMORY[0x1E0C9AE00], a1);
        *a3 = 0;
        return FigFairPlayMapFairPlayErrorToCPEError(v6);
      }
      v6 = 4294955145;
    }
  }
  else
  {
    v6 = 4294955146;
  }
  if (dword_1EE2A3248)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return FigFairPlayMapFairPlayErrorToCPEError(v6);
}

uint64_t FigFairPlayCPELimitedCryptorCreateWithExternalProtectionMethods(uint64_t a1, int a2, const void *a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;

  v6 = FigFairPlayCPELimitedCryptorCreate(a1, a3, a4);
  v7 = v6;
  if (a4 && !(_DWORD)v6)
    *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 24) = a2;
  return v7;
}

uint64_t FigFairPlayCPECryptorEqual()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || !v1)
    return (DerivedStorage | v1) == 0;
  result = FigCFEqual();
  if ((_DWORD)result)
  {
    result = FigCFEqual();
    if ((_DWORD)result)
      return FigCFEqual() != 0;
  }
  return result;
}

uint64_t FigFairPlayCPECryptorInvalidate()
{
  const void **DerivedStorage;
  const void **v1;
  const void *v2;
  BOOL v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  int v11;

  DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v1 = DerivedStorage;
    v11 = 0;
    v2 = *DerivedStorage;
    if (v2)
    {
      CFRelease(v2);
      *v1 = 0;
    }
    if (v1[5])
    {
      if (FigFairPlayGetSinfExtensionType((const __CFDictionary *)v1[3], &v11))
        v3 = 0;
      else
        v3 = v11 == 2;
      if (v3)
        FigCPEFairPlayProtectorCheckInCryptRef((uint64_t)v1[1], v1[3], v1[5]);
      v4 = v1[5];
      if (v4)
      {
        CFRelease(v4);
        v1[5] = 0;
      }
    }
    *((_BYTE *)v1 + 48) = 0;
    v5 = v1[3];
    if (v5)
    {
      CFRelease(v5);
      v1[3] = 0;
    }
    v6 = v1[4];
    if (v6)
    {
      CFRelease(v6);
      v1[4] = 0;
    }
    if (v1[10])
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      FigCPEExternalProtectionMonitorEndMonitoring((uint64_t)v1[10]);
      v7 = v1[10];
      if (v7)
      {
        CFRelease(v7);
        v1[10] = 0;
      }
    }
    v8 = v1[11];
    if (v8)
    {
      CFRelease(v8);
      v1[11] = 0;
    }
    v9 = v1[1];
    if (v9)
    {
      CFRelease(v9);
      v1[1] = 0;
    }
  }
  return 0;
}

__CFString *FigFairPlayCPECryptorCopyDebugDescription()
{
  CFAllocatorRef *DerivedStorage;
  CFAllocatorRef *v1;
  __CFString *Mutable;
  __CFString *v3;

  DerivedStorage = (CFAllocatorRef *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return 0;
  v1 = DerivedStorage;
  Mutable = CFStringCreateMutable(*DerivedStorage, 0);
  v3 = Mutable;
  if (Mutable)
    CFStringAppendFormat(Mutable, 0, CFSTR("<FigFPCPECryptor: protectorParent<%@> >"), v1[1]);
  return v3;
}

uint64_t FigFairPlayCPECryptorCopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  int IsLowValueSinf;
  int v10;
  BOOL v11;
  int v12;
  void *v13;
  BOOL v14;
  void **v15;
  uint64_t result;
  void *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, const void *, uint64_t, _QWORD *);
  uint64_t Methods;
  BOOL v21;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return 4294955146;
  v8 = DerivedStorage;
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31A0]))
  {
    v21 = 0;
    IsLowValueSinf = FigFairPlayIsLowValueSinf(*(const __CFDictionary **)(v8 + 24), &v21);
    if (v21)
      v10 = IsLowValueSinf;
    else
      v10 = -42042;
    if (v10 > -42032)
    {
      v11 = v10 == 0;
      v12 = -42031;
    }
    else
    {
      v11 = v10 == -42407;
      v12 = -42403;
    }
    v14 = v11 || v10 == v12;
    if (v14 && (*(_BYTE *)(v8 + 16) & 5) != 0)
      v15 = (void **)MEMORY[0x1E0C9AE50];
    else
      v15 = (void **)MEMORY[0x1E0C9AE40];
    result = 0;
    v17 = *v15;
    goto LABEL_23;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3218]))
  {
    v13 = (void *)CFRetain((CFTypeRef)*MEMORY[0x1E0C9AE50]);
LABEL_22:
    v17 = v13;
    result = 0;
LABEL_23:
    *a4 = v17;
    return result;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31C0]))
  {
    Methods = FigCPEExternalProtectionMonitorGetMethods(*(_QWORD *)(v8 + 80));
    v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &Methods);
    goto LABEL_22;
  }
  v18 = *(_QWORD *)(v8 + 8);
  v19 = *(uint64_t (**)(uint64_t, const void *, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
  if (v19)
    return v19(v18, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigFairPlayCPECryptorSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  unsigned int Methods;
  unsigned int v8;
  CFTypeID v9;
  uint64_t result;
  const void *v11;
  CFTypeRef v12;
  CFTypeRef cf;
  uint64_t valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294955146;
  v6 = DerivedStorage;
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31C0]))
    return 4294955144;
  Methods = FigCPEExternalProtectionMonitorGetMethods(*(_QWORD *)(v6 + 80));
  valuePtr = 0;
  if (!a3)
    return 4294955136;
  v8 = Methods;
  v9 = CFGetTypeID(a3);
  if (v9 != CFNumberGetTypeID())
    return 4294955136;
  CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt64Type, &valuePtr);
  if ((valuePtr & ~(unint64_t)v8) == 0)
    return 0;
  cf = 0;
  result = FigCPEExternalProtectionMonitorCreateForMethods((const __CFAllocator *)*MEMORY[0x1E0C9AE00], valuePtr & ~v8, 0, *(CFTypeRef *)(v6 + 80), &cf);
  if (!(_DWORD)result)
  {
    v11 = *(const void **)(v6 + 80);
    v12 = cf;
    *(_QWORD *)(v6 + 80) = cf;
    if (v12)
      CFRetain(v12);
    if (v11)
      CFRelease(v11);
    if (cf)
      CFRelease(cf);
    return 0;
  }
  return result;
}

uint64_t FigFairPlayCPECryptorGetNativeSession(uint64_t a1, uint64_t *a2)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v5;
  uint64_t AudioQueue;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = 4294955146;
  if (a2 && DerivedStorage)
  {
    v5 = *(_QWORD *)(DerivedStorage + 40);
    if (v5)
      AudioQueue = FigAudioQueueTimingShimGetAudioQueue(v5);
    else
      AudioQueue = 0;
    result = 0;
    *a2 = AudioQueue;
  }
  return result;
}

uint64_t FigFairPlayCPECryptorGetExternalProtectionMethods(uint64_t a1, _DWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t result;
  int Methods;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = 4294955146;
  if (a2)
  {
    if (DerivedStorage)
    {
      Methods = FigCPEExternalProtectionMonitorGetMethods(*(_QWORD *)(DerivedStorage + 80));
      result = 0;
      *a2 = Methods;
    }
  }
  return result;
}

uint64_t FigFairPlayCPECryptorGetAggregateExternalProtectionStatus(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t DerivedStorage;
  int Status;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
    return 4294955146;
  Status = FigCPEExternalProtectionMonitorGetStatus(*(_QWORD *)(DerivedStorage + 80));
  result = 0;
  *a3 = Status;
  return result;
}

uint64_t FigFairPlayCPECryptorDecryptSample(uint64_t a1, OpaqueCMBlockBuffer *a2, const void *a3)
{
  uint64_t DerivedStorage;
  CFTypeRef v6;

  v6 = a3;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return DecryptCommon(DerivedStorage, a2, &v6);
}

uint64_t FigFairPlayCPECryptorScrambleDecryptedSample(uint64_t a1, OpaqueCMBlockBuffer *a2)
{
  uint64_t DerivedStorage;
  size_t DataLength;
  OSStatus DataPointer;
  uint64_t result;
  size_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  BOOL v13;
  size_t v14;
  char v15;
  size_t v16;
  char *dataPointerOut;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  dataPointerOut = 0;
  DataLength = CMBlockBufferGetDataLength(a2);
  DataPointer = CMBlockBufferGetDataPointer(a2, 0, 0, 0, &dataPointerOut);
  result = 4294955146;
  if (DataLength && !DataPointer && dataPointerOut)
  {
    if (!CMBlockBufferIsRangeContiguous(a2, 0, DataLength))
      return 4294955140;
    if (*(_BYTE *)(DerivedStorage + 49))
    {
      v7 = *(unsigned int *)(DerivedStorage + 52);
      if (DataLength <= v7)
        return 0;
      v9 = *(_DWORD *)(DerivedStorage + 56);
      v8 = *(_DWORD *)(DerivedStorage + 60);
    }
    else
    {
      v8 = 0;
      v7 = 0;
      v9 = 512;
    }
    result = 0;
    v10 = v9 + v8;
    if ((_DWORD)v10 && v7 < DataLength)
    {
      do
      {
        v11 = DataLength - v7;
        if (DataLength - v7 >= v9)
          v11 = v9;
        v12 = v11 & 0xFFFFFFF0;
        v13 = __CFADD__(v12, v7);
        v14 = v12 + v7;
        if (v13)
        {
          v15 = FigFairPlayCPECryptorScrambleDecryptedSample_sbCounter;
          v16 = v7;
          do
          {
            dataPointerOut[v16++] = ((v15 ^ 0x4C) * (32 - v15)) ^ &FigFairPlayCPECryptorScrambleDecryptedSample_sbCounter;
            v15 = ++FigFairPlayCPECryptorScrambleDecryptedSample_sbCounter;
          }
          while (v16 > v14);
        }
        v7 += v10;
      }
      while (v7 < DataLength);
      return 0;
    }
  }
  return result;
}

uint64_t FigFairPlayCPECryptorDecryptSampleWithFormat(uint64_t a1, OpaqueCMBlockBuffer *a2, const void *a3)
{
  uint64_t DerivedStorage;
  CFTypeRef v6;

  v6 = a3;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return DecryptCommon(DerivedStorage, a2, &v6);
}

uint64_t FigFairPlayCPECryptorPairForReEncryption(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = 4294955146;
  if (a2 && DerivedStorage)
  {
    if ((*(_DWORD *)(DerivedStorage + 16) & 5) == 1)
    {
      if (a4)
      {
        v8 = CMBaseObjectGetDerivedStorage();
        if (v8)
        {
          if ((*(_DWORD *)(v8 + 16) & 5) == 1)
            return 4294955136;
          else
            return 4294955143;
        }
        else
        {
          return 4294955146;
        }
      }
    }
    else
    {
      return 4294955143;
    }
  }
  return result;
}

uint64_t FigFairPlayCPECryptorIsCompatibleWithFormatDescription(uint64_t a1, const opaqueCMFormatDescription *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  CFDictionaryRef v7;
  const __CFDictionary *v8;
  BOOL v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = 0;
  v10 = 0;
  if (a2)
  {
    if (a1)
    {
      v6 = DerivedStorage;
      if (DerivedStorage)
      {
        v7 = FigFairPlayCopySinfExtensionsFromFormatDescription(a2);
        v8 = v7;
        if (v7 && CFEqual(v7, *(CFTypeRef *)(v6 + 24)))
        {
          v5 = 1;
          goto LABEL_13;
        }
        if (FigFairPlayGetDPInfoFromSinfExtensions(*(const __CFDictionary **)(v6 + 24))
          && !FigFairPlayIsPlaceholder(v8, &v10)
          && v10)
        {
          v5 = 1;
          if (!v8)
            return v5;
          goto LABEL_13;
        }
        v5 = 0;
        if (v8)
LABEL_13:
          CFRelease(v8);
      }
    }
  }
  return v5;
}

uint64_t FigFairPlayCPECryptorGetMaximumRequiredOutputBufferSizeForSampleWithFormat(uint64_t a1, OpaqueCMBlockBuffer *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t result;
  size_t DataLength;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = 4294955146;
  if (a2 && a4)
  {
    if (!*(_BYTE *)(DerivedStorage + 72))
    {
      result = FigFairPlayGetMaximumReEncryptionPaddingByteCount(*(_QWORD *)(DerivedStorage + 24), (_QWORD *)(DerivedStorage + 64));
      if ((_DWORD)result)
        return result;
      *(_BYTE *)(DerivedStorage + 72) = 1;
    }
    DataLength = CMBlockBufferGetDataLength(a2);
    result = 0;
    *a4 = *(_QWORD *)(DerivedStorage + 64) + DataLength;
  }
  return result;
}

uint64_t FigFairPlayCPECryptorReEncryptSample(uint64_t a1, uint64_t a2, OpaqueCMBlockBuffer *a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
    return DecryptCommon(DerivedStorage, a3, a4);
  else
    return 4294955146;
}

uint64_t FigFairPlayCPECryptorReEncryptSampleWithFormat(uint64_t a1, uint64_t a2, OpaqueCMBlockBuffer *a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
    return DecryptCommon(DerivedStorage, a3, a4);
  else
    return 4294955146;
}

uint64_t FigFairPlayCPECryptorCreateProcessedBlockBufferAndSubsampleAuxiliaryData(uint64_t a1, opaqueCMSampleBuffer *a2, CMBlockBufferRef *a3, _QWORD *a4, CFDataRef *a5)
{
  return FigFairPlayCPECryptorCreateProcessedBlockBufferAndSubsampleAuxiliaryDataWithOptions(a1, a2, 0, a3, a4, a5);
}

uint64_t FigFairPlayCPECryptorCreateProcessedBlockBufferAndSubsampleAuxiliaryDataWithOptions(uint64_t a1, opaqueCMSampleBuffer *a2, char a3, CMBlockBufferRef *a4, _QWORD *a5, CFDataRef *a6)
{
  uint64_t DerivedStorage;
  const opaqueCMFormatDescription *FormatDescription;
  const __CFDictionary *Extension;
  const __CFDictionary *v14;
  CFTypeID v15;
  const void *Value;
  CFTypeID v17;
  uint64_t SPSAndPPSCountFromAVCC;
  uint64_t v19;
  const void *v20;
  const __CFAllocator *v21;
  OpaqueCMBlockBuffer *DataBuffer;
  uint64_t Contiguous;
  int v24;
  uint64_t v25;
  uint64_t v26;
  CFDataRef v27;
  char *v29;
  CMBlockBufferRef theBuffer;
  size_t totalLengthOut;
  char *dataPointerOut;
  CMBlockBufferRef blockBufferOut[9];
  __int128 v34;
  __int128 v35;
  _OWORD bytes[24];
  _QWORD v37[4];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  memset(v37, 0, sizeof(v37));
  dataPointerOut = 0;
  blockBufferOut[0] = 0;
  theBuffer = 0;
  totalLengthOut = 0;
  v29 = 0;
  memset(bytes, 0, sizeof(bytes));
  FormatDescription = CMSampleBufferGetFormatDescription(a2);
  if (CMFormatDescriptionGetMediaSubType(FormatDescription) != 1685220713)
    goto LABEL_30;
  if (FigCFEqual())
  {
LABEL_13:
    v21 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    DataBuffer = CMSampleBufferGetDataBuffer(a2);
    Contiguous = CMBlockBufferCreateContiguous(v21, DataBuffer, v21, 0, 0, 0, 0, blockBufferOut);
    if ((_DWORD)Contiguous)
      goto LABEL_31;
    Contiguous = CMBlockBufferGetDataPointer(blockBufferOut[0], 0, 0, &totalLengthOut, &dataPointerOut);
    if ((_DWORD)Contiguous)
      goto LABEL_31;
    Contiguous = CMBlockBufferCreateWithMemoryBlock(v21, 0, totalLengthOut, v21, 0, 0, totalLengthOut, 1u, &theBuffer);
    if ((_DWORD)Contiguous)
      goto LABEL_31;
    Contiguous = CMBlockBufferGetDataPointer(theBuffer, 0, 0, 0, &v29);
    if ((_DWORD)Contiguous)
      goto LABEL_31;
    v37[0] = FigAudioQueueTimingShimGetAudioQueue(*(_QWORD *)(DerivedStorage + 40));
    *(_QWORD *)((char *)&v37[1] + 4) = 0;
    v24 = (a3 & 1) != 0 ? 5 : 1;
    LODWORD(v37[1]) = v24;
    WORD2(v38) = 4;
    *((_QWORD *)&v38 + 1) = dataPointerOut;
    LODWORD(v39) = totalLengthOut;
    *((_QWORD *)&v39 + 1) = v29;
    LODWORD(v40) = totalLengthOut;
    BYTE4(v41) = 0;
    *((_QWORD *)&v41 + 1) = bytes;
    LODWORD(v42) = 16;
    HIDWORD(v43) = 0;
    LGokLiStr((uint64_t)v37);
    Contiguous = FAIRPLAY_CALL_LOG(v25);
    if ((_DWORD)Contiguous)
      goto LABEL_31;
    if ((_DWORD)v40 == (_DWORD)totalLengthOut)
    {
      v26 = DWORD1(v42);
      if (DWORD1(v42) < 0x11)
      {
        *a5 = *(_QWORD *)((char *)&v43 + 4);
        v27 = CFDataCreate(v21, (const UInt8 *)bytes, 24 * v26);
        v19 = 0;
        *a4 = theBuffer;
        theBuffer = 0;
        *a6 = v27;
        goto LABEL_24;
      }
    }
LABEL_30:
    Contiguous = FigSignalErrorAt();
LABEL_31:
    v19 = Contiguous;
    goto LABEL_24;
  }
  CMBaseObjectGetDerivedStorage();
  v34 = 0u;
  v35 = 0u;
  memset(&blockBufferOut[1], 0, 64);
  Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(FormatDescription, (CFStringRef)*MEMORY[0x1E0CA2240]);
  if (!Extension
    || (v14 = Extension, v15 = CFGetTypeID(Extension), v15 != CFDictionaryGetTypeID())
    || (Value = CFDictionaryGetValue(v14, CFSTR("avcC"))) == 0
    || (v17 = CFGetTypeID(Value), v17 != CFDataGetTypeID())
    || (SPSAndPPSCountFromAVCC = FigH264Bridge_GetSPSAndPPSCountFromAVCC(), !(_DWORD)SPSAndPPSCountFromAVCC))
  {
    SPSAndPPSCountFromAVCC = FigSignalErrorAt();
  }
  v19 = SPSAndPPSCountFromAVCC;
  if (!(_DWORD)SPSAndPPSCountFromAVCC)
  {
    v20 = *(const void **)(DerivedStorage + 88);
    *(_QWORD *)(DerivedStorage + 88) = FormatDescription;
    if (FormatDescription)
      CFRetain(FormatDescription);
    if (v20)
      CFRelease(v20);
    goto LABEL_13;
  }
LABEL_24:
  if (blockBufferOut[0])
    CFRelease(blockBufferOut[0]);
  if (theBuffer)
    CFRelease(theBuffer);
  return v19;
}

uint64_t FigFairPlayCPECryptorGetAggregateExternalProtectionStatusIgnoringDisplays(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t DerivedStorage;
  int StatusIgnoringDisplays;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
    return 4294955146;
  StatusIgnoringDisplays = FigCPEExternalProtectionMonitorGetStatusIgnoringDisplays(*(_QWORD *)(DerivedStorage + 80));
  result = 0;
  *a3 = StatusIgnoringDisplays;
  return result;
}

uint64_t FigFairPlayCPECryptorCopySerializedCryptorRecipe(uint64_t a1, CFDataRef *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t *);
  uint64_t result;
  CFDataRef v8;
  uint64_t v9;
  UInt8 bytes[8];
  uint64_t Methods;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = 0;
  if (!DerivedStorage)
  {
    v8 = 0;
LABEL_7:
    result = 0;
    *a2 = v8;
    return result;
  }
  v5 = DerivedStorage;
  v6 = *(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v6)
  {
    result = v6(a1, &v9);
    if ((_DWORD)result)
      return result;
    *(_QWORD *)bytes = v9;
    Methods = FigCPEExternalProtectionMonitorGetMethods(*(_QWORD *)(v5 + 80));
    v12 = 1;
    v8 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, 24);
    if (!v8)
      return 4294955145;
    goto LABEL_7;
  }
  return 4294954514;
}

uint64_t FigFairPlayCPECryptorGetCryptorType(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294955146;
  result = 0;
  *a2 = 1;
  return result;
}

uint64_t DecryptCommon(uint64_t a1, OpaqueCMBlockBuffer *a2, CFTypeRef *a3)
{
  uint64_t v3;
  OpaqueCMBlockBuffer *v7;
  size_t DataLength;
  size_t v9;
  uint64_t DataPointer;
  uint64_t v11;
  CFTypeRef v12;
  char *v14;
  char *dataPointerOut;

  v14 = 0;
  dataPointerOut = 0;
  v3 = 4294955146;
  if (a1 && a2 && a3 && *a3)
  {
    v7 = (OpaqueCMBlockBuffer *)CFRetain(*a3);
    DataLength = CMBlockBufferGetDataLength(a2);
    v9 = CMBlockBufferGetDataLength(v7);
    if (CMBlockBufferIsRangeContiguous(a2, 0, DataLength) && CMBlockBufferIsRangeContiguous(v7, 0, v9))
    {
      if (*(_QWORD *)(a1 + 40))
      {
        DataPointer = CMBlockBufferGetDataPointer(a2, 0, 0, 0, &dataPointerOut);
        if ((_DWORD)DataPointer
          || (DataPointer = CMBlockBufferGetDataPointer(v7, 0, 0, 0, &v14), (_DWORD)DataPointer))
        {
          v3 = DataPointer;
        }
        else
        {
          FigAudioQueueTimingShimGetAudioQueue(*(_QWORD *)(a1 + 40));
          YHrWZQ6wU();
          v3 = FAIRPLAY_CALL_LOG(v11);
          if (!(_DWORD)v3)
          {
            v12 = *a3;
            *a3 = v7;
            if (v7)
              CFRetain(v7);
            if (v12)
              CFRelease(v12);
            v3 = 0;
          }
        }
      }
      else
      {
        v3 = 4294955138;
      }
    }
    else
    {
      v3 = 4294955140;
    }
    if (v7)
      CFRelease(v7);
  }
  return v3;
}

uint64_t FigFairPlayCPELimitedCryptorInvalidate()
{
  const void **DerivedStorage;
  const void **v1;
  const void *v2;
  const void *v3;
  const void *v4;

  DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v1 = DerivedStorage;
    v2 = *DerivedStorage;
    if (v2)
    {
      CFRelease(v2);
      *v1 = 0;
    }
    v3 = v1[1];
    if (v3)
    {
      CFRelease(v3);
      v1[1] = 0;
    }
    v4 = v1[2];
    if (v4)
    {
      CFRelease(v4);
      v1[2] = 0;
    }
  }
  return 0;
}

uint64_t FigFairPlayCPELimitedCryptorGetNativeSession(uint64_t a1, uint64_t *a2)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v5;
  uint64_t AudioQueue;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = 4294955146;
  if (a2 && DerivedStorage)
  {
    v5 = *(_QWORD *)(DerivedStorage + 8);
    if (v5)
      AudioQueue = FigAudioQueueTimingShimGetAudioQueue(v5);
    else
      AudioQueue = 0;
    result = 0;
    *a2 = AudioQueue;
  }
  return result;
}

uint64_t FigFairPlayCPELimitedCryptorGetExternalProtectionMethods(uint64_t a1, _DWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = 4294955146;
  if (a2)
  {
    if (DerivedStorage)
    {
      result = 0;
      *a2 = *(_DWORD *)(DerivedStorage + 24);
    }
  }
  return result;
}

uint64_t FigFairPlayCPELimitedCryptorDecryptSampleWithFormat(uint64_t a1, OpaqueCMBlockBuffer *a2, OpaqueCMBlockBuffer *a3)
{
  uint64_t DerivedStorage;
  uint64_t result;
  size_t DataLength;
  size_t v9;
  size_t v10;
  uint64_t v11;
  char *v12;
  char *dataPointerOut;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v12 = 0;
  dataPointerOut = 0;
  result = 4294955146;
  if (a1 && a2 && a3)
  {
    DataLength = CMBlockBufferGetDataLength(a2);
    v9 = CMBlockBufferGetDataLength(a3);
    if (v9 < DataLength)
    {
      return 4294955136;
    }
    else
    {
      v10 = v9;
      if (CMBlockBufferIsRangeContiguous(a2, 0, DataLength) && CMBlockBufferIsRangeContiguous(a3, 0, v10))
      {
        if (*(_QWORD *)(DerivedStorage + 8))
        {
          result = CMBlockBufferGetDataPointer(a2, 0, 0, 0, &dataPointerOut);
          if (!(_DWORD)result)
          {
            result = CMBlockBufferGetDataPointer(a3, 0, 0, 0, &v12);
            if (!(_DWORD)result)
            {
              FigAudioQueueTimingShimGetAudioQueue(*(_QWORD *)(DerivedStorage + 8));
              YHrWZQ6wU();
              return FAIRPLAY_CALL_LOG(v11);
            }
          }
        }
        else
        {
          return 4294955138;
        }
      }
      else
      {
        return 4294955140;
      }
    }
  }
  return result;
}

uint64_t FigFairPlayCPELimitedCryptorCreateProcessedBlockBufferAndSubsampleAuxiliaryData(uint64_t a1, opaqueCMSampleBuffer *a2, CMBlockBufferRef *a3, _QWORD *a4, CFDataRef *a5)
{
  return FigFairPlayCPELimitedCryptorCreateProcessedBlockBufferAndSubsampleAuxiliaryDataWithOptions(a1, a2, 0, a3, a4, a5);
}

uint64_t FigFairPlayCPELimitedCryptorCreateProcessedBlockBufferAndSubsampleAuxiliaryDataWithOptions(uint64_t a1, opaqueCMSampleBuffer *a2, char a3, CMBlockBufferRef *a4, _QWORD *a5, CFDataRef *a6)
{
  uint64_t DerivedStorage;
  const opaqueCMFormatDescription *FormatDescription;
  const __CFDictionary *Extension;
  const __CFDictionary *v14;
  CFTypeID v15;
  const void *Value;
  CFTypeID v17;
  uint64_t SPSAndPPSCountFromAVCC;
  uint64_t v19;
  const void *v20;
  const __CFAllocator *v21;
  OpaqueCMBlockBuffer *DataBuffer;
  uint64_t Contiguous;
  int v24;
  uint64_t v25;
  uint64_t v26;
  CFDataRef v27;
  char *v29;
  CMBlockBufferRef theBuffer;
  size_t totalLengthOut;
  char *dataPointerOut;
  CMBlockBufferRef blockBufferOut[9];
  __int128 v34;
  __int128 v35;
  _OWORD bytes[24];
  _QWORD v37[4];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  memset(v37, 0, sizeof(v37));
  dataPointerOut = 0;
  blockBufferOut[0] = 0;
  theBuffer = 0;
  totalLengthOut = 0;
  v29 = 0;
  memset(bytes, 0, sizeof(bytes));
  FormatDescription = CMSampleBufferGetFormatDescription(a2);
  if (CMFormatDescriptionGetMediaSubType(FormatDescription) != 1685220713)
    goto LABEL_30;
  if (FigCFEqual())
  {
LABEL_13:
    v21 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    DataBuffer = CMSampleBufferGetDataBuffer(a2);
    Contiguous = CMBlockBufferCreateContiguous(v21, DataBuffer, v21, 0, 0, 0, 0, blockBufferOut);
    if ((_DWORD)Contiguous)
      goto LABEL_31;
    Contiguous = CMBlockBufferGetDataPointer(blockBufferOut[0], 0, 0, &totalLengthOut, &dataPointerOut);
    if ((_DWORD)Contiguous)
      goto LABEL_31;
    Contiguous = CMBlockBufferCreateWithMemoryBlock(v21, 0, totalLengthOut, v21, 0, 0, totalLengthOut, 1u, &theBuffer);
    if ((_DWORD)Contiguous)
      goto LABEL_31;
    Contiguous = CMBlockBufferGetDataPointer(theBuffer, 0, 0, 0, &v29);
    if ((_DWORD)Contiguous)
      goto LABEL_31;
    v37[0] = FigAudioQueueTimingShimGetAudioQueue(*(_QWORD *)(DerivedStorage + 8));
    *(_QWORD *)((char *)&v37[1] + 4) = 0;
    v24 = (a3 & 1) != 0 ? 5 : 1;
    LODWORD(v37[1]) = v24;
    WORD2(v38) = 4;
    *((_QWORD *)&v38 + 1) = dataPointerOut;
    LODWORD(v39) = totalLengthOut;
    *((_QWORD *)&v39 + 1) = v29;
    LODWORD(v40) = totalLengthOut;
    BYTE4(v41) = 0;
    *((_QWORD *)&v41 + 1) = bytes;
    LODWORD(v42) = 16;
    HIDWORD(v43) = 0;
    LGokLiStr((uint64_t)v37);
    Contiguous = FAIRPLAY_CALL_LOG(v25);
    if ((_DWORD)Contiguous)
      goto LABEL_31;
    if ((_DWORD)v40 == (_DWORD)totalLengthOut)
    {
      v26 = DWORD1(v42);
      if (DWORD1(v42) < 0x11)
      {
        *a5 = *(_QWORD *)((char *)&v43 + 4);
        v27 = CFDataCreate(v21, (const UInt8 *)bytes, 24 * v26);
        v19 = 0;
        *a4 = theBuffer;
        theBuffer = 0;
        *a6 = v27;
        goto LABEL_24;
      }
    }
LABEL_30:
    Contiguous = FigSignalErrorAt();
LABEL_31:
    v19 = Contiguous;
    goto LABEL_24;
  }
  CMBaseObjectGetDerivedStorage();
  v34 = 0u;
  v35 = 0u;
  memset(&blockBufferOut[1], 0, 64);
  Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(FormatDescription, (CFStringRef)*MEMORY[0x1E0CA2240]);
  if (!Extension
    || (v14 = Extension, v15 = CFGetTypeID(Extension), v15 != CFDictionaryGetTypeID())
    || (Value = CFDictionaryGetValue(v14, CFSTR("avcC"))) == 0
    || (v17 = CFGetTypeID(Value), v17 != CFDataGetTypeID())
    || (SPSAndPPSCountFromAVCC = FigH264Bridge_GetSPSAndPPSCountFromAVCC(), !(_DWORD)SPSAndPPSCountFromAVCC))
  {
    SPSAndPPSCountFromAVCC = FigSignalErrorAt();
  }
  v19 = SPSAndPPSCountFromAVCC;
  if (!(_DWORD)SPSAndPPSCountFromAVCC)
  {
    v20 = *(const void **)(DerivedStorage + 16);
    *(_QWORD *)(DerivedStorage + 16) = FormatDescription;
    if (FormatDescription)
      CFRetain(FormatDescription);
    if (v20)
      CFRelease(v20);
    goto LABEL_13;
  }
LABEL_24:
  if (blockBufferOut[0])
    CFRelease(blockBufferOut[0]);
  if (theBuffer)
    CFRelease(theBuffer);
  return v19;
}

uint64_t FigFairPlayCPELimitedCryptorIsCompatibleWithSerializedCryptorRecipe(uint64_t a1, const __CFData *a2, BOOL *a3)
{
  uint64_t DerivedStorage;
  const UInt8 *BytePtr;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t *);
  uint64_t result;
  BOOL v13;
  uint64_t v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  BytePtr = CFDataGetBytePtr(a2);
  if (CFDataGetLength(a2) != 24)
    return 4294949724;
  v8 = *(_QWORD *)BytePtr;
  v9 = *((_DWORD *)BytePtr + 2);
  v10 = *((unsigned int *)BytePtr + 4);
  v14 = 0;
  v11 = *(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v11)
    return 4294954514;
  result = v11(a1, &v14);
  if (!(_DWORD)result)
  {
    v13 = v14 == v8 && *(_DWORD *)(DerivedStorage + 24) == v9 && v10 == 1;
    result = 0;
    *a3 = v13;
  }
  return result;
}

uint64_t FigAudioSessionCreateWithCMSessionAndMXSession(uint64_t a1, const void *a2, const void *a3, _QWORD *a4)
{
  uint64_t v7;
  _QWORD *DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  CFStringRef theString;

  if (!_os_feature_enabled_impl())
  {
    if (a2)
    {
      if (a3)
      {
        if (a4)
        {
          MEMORY[0x19402F294](&FigAudioSessionCreateWithCMSessionAndMXSession_sInitOnce, audioSessionMXSession_initOnce);
          if (sAudioSessionMXSession_MXSessionNotificationNameMap)
          {
            if (sAudioSessionMXSession_CMSessionNotificationNameMap && sAudioSessionMXSessionMutexForNameMap)
            {
              FigAudioSessionGetClassID();
              v7 = CMDerivedObjectCreate();
              if ((_DWORD)v7)
                return v7;
              DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
              *DerivedStorage = CFRetain(a2);
              DerivedStorage[1] = CFRetain(a3);
              CMNotificationCenterGetDefaultLocalCenter();
              v9 = FigNotificationCenterAddWeakListener();
              if ((_DWORD)v9)
                return v9;
              CMNotificationCenterGetDefaultLocalCenter();
              v7 = FigNotificationCenterAddWeakListener();
              if ((_DWORD)v7)
                return v7;
              CMBaseObjectGetDerivedStorage();
              theString = 0;
              v10 = 0;
              *a4 = 0;
              return v10;
            }
          }
        }
      }
    }
  }
  return FigSignalErrorAt();
}

CFMutableDictionaryRef audioSessionMXSession_initOnce()
{
  const __CFAllocator *v0;
  const CFDictionaryKeyCallBacks *v1;
  const CFDictionaryValueCallBacks *v2;
  CFMutableDictionaryRef result;

  FigKTraceInit();
  sAudioSessionMXSessionMutexForNameMap = FigSimpleMutexCreate();
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v1 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v2 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  sAudioSessionMXSession_CMSessionNotificationNameMap = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  result = CFDictionaryCreateMutable(v0, 0, v1, v2);
  sAudioSessionMXSession_MXSessionNotificationNameMap = (uint64_t)result;
  return result;
}

void audioSessionMXSession_forwardMXSessionNotification(int a1, int a2, void *key)
{
  const void *Value;
  CFStringRef v5;
  CFStringRef v6;

  if (key)
  {
    if (!FigAudioSessionGetNotificationNameForMXSessionNotificationNameInternal(key))
    {
      MEMORY[0x19402EEEC](sAudioSessionMXSessionMutexForNameMap);
      Value = CFDictionaryGetValue((CFDictionaryRef)sAudioSessionMXSession_MXSessionNotificationNameMap, key);
      MEMORY[0x19402EF04](sAudioSessionMXSessionMutexForNameMap);
      if (!Value)
      {
        v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("FigAudioSessionMXSessionNotification_%@"), key);
        if (!v5)
          return;
        v6 = v5;
        MEMORY[0x19402EEEC](sAudioSessionMXSessionMutexForNameMap);
        CFDictionarySetValue((CFMutableDictionaryRef)sAudioSessionMXSession_MXSessionNotificationNameMap, key, v6);
        MEMORY[0x19402EF04](sAudioSessionMXSessionMutexForNameMap);
        CFRelease(v6);
      }
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
}

void audioSessionMXSession_forwardCMSessionNotification(uint64_t a1, uint64_t a2, const void *a3)
{
  const void *Value;
  CFStringRef v5;
  CFStringRef v6;

  if (a3)
  {
    MEMORY[0x19402EEEC](sAudioSessionMXSessionMutexForNameMap);
    Value = CFDictionaryGetValue((CFDictionaryRef)sAudioSessionMXSession_CMSessionNotificationNameMap, a3);
    MEMORY[0x19402EF04](sAudioSessionMXSessionMutexForNameMap);
    if (!Value)
    {
      v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("FigAudioSessionCMSessionNotification_%@"), a3);
      if (!v5)
        return;
      v6 = v5;
      MEMORY[0x19402EEEC](sAudioSessionMXSessionMutexForNameMap);
      CFDictionarySetValue((CFMutableDictionaryRef)sAudioSessionMXSession_CMSessionNotificationNameMap, a3, v6);
      MEMORY[0x19402EF04](sAudioSessionMXSessionMutexForNameMap);
      CFRelease(v6);
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
}

uint64_t FigAudioSessionCreateWithCMSession(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t result;

  result = MXSessionCreate();
  if (!(_DWORD)result)
    return FigAudioSessionCreateWithCMSessionAndMXSession(a1, a2, 0, a3);
  return result;
}

uint64_t FigAudioSessionCreateUsingPrimaryCMSessionForAuditToken(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  const void *v5;
  const void *v6;
  uint64_t v7;

  if (!AudioSessionGetPrimaryAudioSessionIDForAuditToken())
    return FigSignalErrorAt();
  v5 = (const void *)AudioSessionCopyCMSessionForSessionID();
  if (!v5)
    return FigSignalErrorAt();
  v6 = v5;
  v7 = FigAudioSessionCreateWithCMSession(a1, v5, a3);
  CFRelease(v6);
  return v7;
}

uint64_t FigAudioSessionCreateWithMXSessionSiblingForFigAudioSession(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v9;
  const void *v10;
  const void *v11;
  uint64_t v12;
  CFTypeRef cf;

  cf = 0;
  if (!a2)
    return 4294948075;
  v7 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (v7)
  {
    v8 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(v7 + 16);
    if (v8)
    {
      v9 = v8(a2, CFSTR("FAS_AudioSessionID"), a1, &cf);
      if (!(_DWORD)v9)
      {
        FigCFNumberGetSInt32();
        v10 = (const void *)AudioSessionCopyCMSessionForSessionID();
        if (v10)
        {
          v11 = v10;
          v12 = FigAudioSessionCreateWithCMSession(a1, v10, a4);
          CFRelease(v11);
          goto LABEL_10;
        }
        v9 = FigSignalErrorAt();
      }
      v12 = v9;
    }
    else
    {
      v12 = 4294948071;
    }
  }
  else
  {
    v12 = 4294948075;
  }
LABEL_10:
  if (cf)
    CFRelease(cf);
  return v12;
}

void audioSessionMXSession_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
}

CFStringRef audioSessionMXSession_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<FigAudioSession(MX): %p %s>"), a1, DerivedStorage + 16);
}

uint64_t audioSessionMXSession_CopyResolvedConfigurationForProperty(uint64_t a1, void *a2, uint64_t a3, __CFDictionary **a4)
{
  const void *MXSessionPropertyForResolvedFigAudioSessionPropertyInternal;
  _DWORD *v9;
  uint64_t IsAvailable;
  uint64_t v11;
  uint64_t v13;
  const __CFAllocator *v14;
  uint64_t v15;

  CMBaseObjectGetDerivedStorage();
  MXSessionPropertyForResolvedFigAudioSessionPropertyInternal = FigAudioSessionGetMXSessionPropertyForResolvedFigAudioSessionPropertyInternal(a2);
  v9 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    if (a2)
      CFHash(a2);
    kdebug_trace();
  }
  if (MXSessionPropertyForResolvedFigAudioSessionPropertyInternal
    || FigCFEqual()
    || FigCFEqual())
  {
    IsAvailable = MXSessionCopyProperty();
LABEL_9:
    v11 = IsAvailable;
    goto LABEL_10;
  }
  if (FigCFEqual())
  {
    v13 = a1;
    v14 = (const __CFAllocator *)a3;
    v15 = 1836019574;
LABEL_19:
    IsAvailable = audioSessionMXSession_CopySpatializationCapabilities(v13, v14, v15, a4);
    goto LABEL_9;
  }
  if (FigCFEqual())
  {
    v13 = a1;
    v14 = (const __CFAllocator *)a3;
    v15 = 1936684398;
    goto LABEL_19;
  }
  if (FigCFEqual())
  {
    IsAvailable = audioSessionMXSession_copyNeroInformationDictionary(a1, a3, a4);
    goto LABEL_9;
  }
  if (FigCFEqual())
  {
    IsAvailable = audioSessionMXSession_copyAudioDeviceIsAvailable(a1, (CFTypeRef *)a4);
    goto LABEL_9;
  }
  v11 = 4294948074;
LABEL_10:
  if (*v9 == 1)
  {
    if (a2)
      CFHash(a2);
    kdebug_trace();
  }
  return v11;
}

uint64_t audioSessionMXSession_CopyRequestedConfigurationForProperty(uint64_t a1, void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  const void *MXSessionPropertyForRequestedFigAudioSessionPropertyInternal;
  _DWORD *v8;
  uint64_t v9;
  CFTypeRef v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MXSessionPropertyForRequestedFigAudioSessionPropertyInternal = FigAudioSessionGetMXSessionPropertyForRequestedFigAudioSessionPropertyInternal(a2);
  v8 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    if (a2)
      CFHash(a2);
    kdebug_trace();
  }
  if (MXSessionPropertyForRequestedFigAudioSessionPropertyInternal
    || FigCFEqual()
    || FigCFEqual())
  {
    v9 = MXSessionCopyProperty();
  }
  else if (FigCFEqual())
  {
    v11 = *(CFTypeRef *)(DerivedStorage + 8);
    if (v11)
      v11 = CFRetain(v11);
    v9 = 0;
    *a4 = v11;
  }
  else
  {
    v9 = 4294948074;
  }
  if (*v8 == 1)
  {
    if (a2)
      CFHash(a2);
    kdebug_trace();
  }
  return v9;
}

uint64_t audioSessionMXSession_RequestConfigurationForProperty(uint64_t a1, void *a2)
{
  const void *MXSessionPropertyForRequestedFigAudioSessionPropertyInternal;
  _DWORD *v4;
  uint64_t v5;

  CMBaseObjectGetDerivedStorage();
  MXSessionPropertyForRequestedFigAudioSessionPropertyInternal = FigAudioSessionGetMXSessionPropertyForRequestedFigAudioSessionPropertyInternal(a2);
  v4 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    if (a2)
      CFHash(a2);
    kdebug_trace();
  }
  if (MXSessionPropertyForRequestedFigAudioSessionPropertyInternal)
    v5 = MXSessionSetProperty();
  else
    v5 = 4294948074;
  if (*v4 == 1)
  {
    if (a2)
      CFHash(a2);
    kdebug_trace();
  }
  return v5;
}

uint64_t audioSessionMXSession_CopyCMSessionProperty(uint64_t a1, const void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  CMBaseObjectGetDerivedStorage();
  v3 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    if (a2)
      CFHash(a2);
    kdebug_trace();
  }
  v4 = CMSessionCopyProperty();
  if (*v3 == 1)
  {
    if (a2)
      CFHash(a2);
    kdebug_trace();
  }
  return v4;
}

uint64_t audioSessionMXSession_SetCMSessionProperty(uint64_t a1, const void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  CMBaseObjectGetDerivedStorage();
  v3 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    if (a2)
      CFHash(a2);
    kdebug_trace();
  }
  v4 = CMSessionSetProperty();
  if (*v3 == 1)
  {
    if (a2)
      CFHash(a2);
    kdebug_trace();
  }
  return v4;
}

uint64_t audioSessionMXSession_CopyMXSessionProperty(uint64_t a1, const void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  CMBaseObjectGetDerivedStorage();
  v3 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    if (a2)
      CFHash(a2);
    kdebug_trace();
  }
  v4 = MXSessionCopyProperty();
  if (*v3 == 1)
  {
    if (a2)
      CFHash(a2);
    kdebug_trace();
  }
  return v4;
}

uint64_t audioSessionMXSession_SetMXSessionProperty(uint64_t a1, const void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  CMBaseObjectGetDerivedStorage();
  v3 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    if (a2)
      CFHash(a2);
    kdebug_trace();
  }
  v4 = MXSessionSetProperty();
  if (*v3 == 1)
  {
    if (a2)
      CFHash(a2);
    kdebug_trace();
  }
  return v4;
}

uint64_t audioSessionMXSession_Activate()
{
  _DWORD *v0;
  uint64_t v1;

  CMBaseObjectGetDerivedStorage();
  v0 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  v1 = CMSessionBeginInterruption();
  if (*v0 == 1)
    kdebug_trace();
  return v1;
}

uint64_t audioSessionMXSession_Deactivate()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t v2;

  CMBaseObjectGetDerivedStorage();
  v0 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  if (FigCFDictionaryGetBooleanIfPresent())
    v1 = CMSessionEndInterruption_WithInterruptionNotification();
  else
    v1 = CMSessionEndInterruption();
  v2 = v1;
  if (*v0 == 1)
    kdebug_trace();
  return v2;
}

BOOL audioSessionMXSession_IsRelatedSessionID()
{
  const void *v0;
  _BOOL8 v1;

  CMBaseObjectGetDerivedStorage();
  v0 = (const void *)AudioSessionCopyCMSessionForSessionID();
  v1 = v0
    && !MXSessionCopyProperty()
    && !CMSessionCopyProperty()
    && CFNumberCompare(0, 0, 0) == kCFCompareEqualTo;
  if (v0)
    CFRelease(v0);
  return v1;
}

BOOL audioSessionMXSession_SetMXSessionPropertiesAndCopyErrors(uint64_t a1, const __CFDictionary *a2, CFMutableDictionaryRef *a3)
{
  size_t Count;
  const void **v6;
  _DWORD *v7;
  const void *v8;
  const void *v9;
  _BOOL8 v10;
  const void *v11;
  const void *v12;
  const void *v13;

  CMBaseObjectGetDerivedStorage();
  Count = FigCFDictionaryGetCount();
  v6 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
  CFDictionaryGetKeysAndValues(a2, v6, 0);
  if ((uint64_t)Count < 1)
  {
    v10 = 1;
  }
  else
  {
    v7 = (_DWORD *)MEMORY[0x1E0CA1FC0];
    if (*MEMORY[0x1E0CA1FC0] == 1)
    {
      if (*v6)
        CFHash(*v6);
      if (Count >= 2)
      {
        v8 = v6[1];
        if (v8)
          CFHash(v8);
        if (Count >= 3)
        {
          v9 = v6[2];
          if (v9)
            CFHash(v9);
        }
      }
      kdebug_trace();
    }
    v10 = MXSessionSetProperties() == 0;
    if (*v7 == 1)
    {
      if (Count >= 4)
      {
        v11 = v6[3];
        if (v11)
          CFHash(v11);
        if (Count >= 5)
        {
          v12 = v6[4];
          if (v12)
            CFHash(v12);
          if (Count >= 6)
          {
            v13 = v6[5];
            if (v13)
              CFHash(v13);
          }
        }
      }
      kdebug_trace();
    }
    if (a3)
      *a3 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  }
  free(v6);
  return v10;
}

uint64_t audioSessionMXSession_CopyMXSessionPropertiesAndErrors(uint64_t a1, const __CFArray *a2, uint64_t *a3, _QWORD *a4)
{
  _DWORD *v7;
  CFIndex Count;
  unint64_t v9;
  const void *ValueAtIndex;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;

  CMBaseObjectGetDerivedStorage();
  v7 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (a2)
  {
    Count = CFArrayGetCount(a2);
    v9 = Count;
    if (*v7 != 1)
      goto LABEL_18;
    if (Count >= 1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a2, 0);
      if (ValueAtIndex)
        CFHash(ValueAtIndex);
      if (v9 < 2)
      {
        v9 = 1;
      }
      else
      {
        v11 = CFArrayGetValueAtIndex(a2, 1);
        if (v11)
          CFHash(v11);
        if (v9 < 3)
        {
          v9 = 2;
        }
        else
        {
          v12 = CFArrayGetValueAtIndex(a2, 2);
          if (v12)
            CFHash(v12);
        }
      }
    }
    goto LABEL_17;
  }
  v9 = 0;
  if (*MEMORY[0x1E0CA1FC0] == 1)
LABEL_17:
    kdebug_trace();
LABEL_18:
  *a3 = MXSessionCopyProperties();
  if (*v7 == 1)
  {
    if ((uint64_t)v9 >= 4)
    {
      v13 = CFArrayGetValueAtIndex(a2, 3);
      if (v13)
        CFHash(v13);
      if (v9 >= 5)
      {
        v14 = CFArrayGetValueAtIndex(a2, 4);
        if (v14)
          CFHash(v14);
        if (v9 >= 6)
        {
          v15 = CFArrayGetValueAtIndex(a2, 5);
          if (v15)
            CFHash(v15);
        }
      }
    }
    kdebug_trace();
  }
  if (a4)
    *a4 = 0;
  return 0;
}

uint64_t audioSessionMXSession_CopySpatializationCapabilities(uint64_t a1, const __CFAllocator *a2, uint64_t a3, __CFDictionary **a4)
{
  uint64_t SessionSpatialPreferencesForContentType;
  uint64_t v7;
  _QWORD v9[3];
  int v10;
  CFTypeRef cf;

  cf = 0;
  memset(v9, 0, sizeof(v9));
  v10 = 0;
  CMBaseObjectGetDerivedStorage();
  if (a4)
  {
    SessionSpatialPreferencesForContentType = CMSessionCopyProperty();
    if (!(_DWORD)SessionSpatialPreferencesForContentType)
    {
      FigCFNumberGetSInt32();
      SessionSpatialPreferencesForContentType = AudioGetSessionSpatialPreferencesForContentType();
      if (!(_DWORD)SessionSpatialPreferencesForContentType)
        SessionSpatialPreferencesForContentType = FPSupport_CreateFigSpatializationCapabilitiesFromSpatialAudioPreferences((uint64_t)v9, a2, a4);
    }
  }
  else
  {
    SessionSpatialPreferencesForContentType = FigSignalErrorAt();
  }
  v7 = SessionSpatialPreferencesForContentType;
  if (cf)
    CFRelease(cf);
  return v7;
}

uint64_t audioSessionMXSession_copyNeroInformationDictionary(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  CFTypeRef v7;
  CFTypeRef cf;

  cf = 0;
  CMBaseObjectGetDerivedStorage();
  v7 = 0;
  if (!a3)
    return FigSignalErrorAt();
  v4 = CMSessionCopyProperty();
  if ((_DWORD)v4)
    return v4;
  v5 = 0;
  *a3 = 0;
  return v5;
}

uint64_t audioSessionMXSession_copyAudioDeviceIsAvailable(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  CFTypeRef v4;
  uint64_t (*v5)(CFTypeRef, CFTypeRef, CFTypeRef *);
  uint64_t v6;
  CFTypeRef v7;
  CFTypeRef *v8;
  CFTypeRef cf;
  CFTypeRef v11;
  CFTypeRef v12;
  CFTypeRef v13;
  CFArrayRef theArray;

  CMBaseObjectGetDerivedStorage();
  v13 = 0;
  theArray = 0;
  v11 = 0;
  v12 = 0;
  cf = 0;
  if (!a2)
  {
    v3 = FigSignalErrorAt();
    goto LABEL_28;
  }
  v3 = MXSessionCopyProperty();
  if ((_DWORD)v3)
  {
LABEL_28:
    v6 = v3;
    goto LABEL_18;
  }
  if (FigCFNumberGetSInt32() == 12)
  {
    v3 = MXSessionCopyProperty();
    if (!(_DWORD)v3)
    {
      v4 = v13;
      v5 = *(uint64_t (**)(CFTypeRef, CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                       + 144);
      if (!v5)
      {
        v6 = 4294954514;
        goto LABEL_18;
      }
      v6 = v5(v4, v11, &cf);
      v7 = cf;
      if ((_DWORD)v6)
        goto LABEL_15;
      if (!cf)
        goto LABEL_13;
      goto LABEL_12;
    }
    goto LABEL_28;
  }
  v3 = MXSessionCopyProperty();
  if ((_DWORD)v3)
    goto LABEL_28;
  if (!theArray || CFArrayGetCount(theArray) <= 0)
  {
LABEL_13:
    v8 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    goto LABEL_14;
  }
LABEL_12:
  v8 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
LABEL_14:
  v6 = 0;
  *a2 = CFRetain(*v8);
  v7 = cf;
LABEL_15:
  if (v7)
    CFRelease(v7);
LABEL_18:
  if (v11)
    CFRelease(v11);
  if (v12)
    CFRelease(v12);
  if (v13)
    CFRelease(v13);
  if (theArray)
    CFRelease(theArray);
  return v6;
}

uint64_t FigRCLCreateConfiguration(const void *a1, CFTypeRef cf1, const __CFDictionary *a3, CFMutableDictionaryRef *a4)
{
  dispatch_queue_t *v8;
  unsigned int v9;
  dispatch_queue_t *v10;
  dispatch_queue_t *v11;
  dispatch_queue_t v12;
  const void *v13;
  const void *v14;
  const void *v15;
  uint64_t v16;
  CFMutableDictionaryRef Mutable;
  uint64_t result;
  __CFDictionary *MutableCopy;
  __CFDictionary *v20;
  const void *v21;
  void *value;
  _OWORD context[3];
  uint64_t v24;

  if (figRCLReadStorebagOverrideOnce_onceToken == -1)
  {
    if (!cf1)
      return FigSignalErrorAt();
  }
  else
  {
    dispatch_once(&figRCLReadStorebagOverrideOnce_onceToken, &__block_literal_global_69);
    if (!cf1)
      return FigSignalErrorAt();
  }
  if (!a4)
    return FigSignalErrorAt();
  if (gFigRemoteConfigLoaderInit != -1)
    dispatch_once_f(&gFigRemoteConfigLoaderInit, 0, (dispatch_function_t)rcl_InitializeLoader);
  v8 = (dispatch_queue_t *)gFRCL_Loader;
  if (!gFRCL_Loader)
    return FigSignalErrorAt();
  if (CFEqual(cf1, CFSTR("kFigRemoteConfigurationLoaderStoreBagType_Pump")))
  {
    v9 = 0;
    goto LABEL_13;
  }
  if (CFEqual(cf1, CFSTR("kFigRemoteConfigurationLoaderStoreBagType_CRABS")))
  {
    v9 = 1;
    goto LABEL_13;
  }
  if (!CFEqual(cf1, CFSTR("kFigRemoteConfigurationLoaderStoreBagType_AirPlay")))
    return FigSignalErrorAt();
  v9 = 2;
LABEL_13:
  v24 = 0;
  memset(context, 0, sizeof(context));
  v10 = &v8[3 * v9];
  v12 = v10[5];
  v11 = v10 + 5;
  if (v12 && v8[3 * v9 + 6])
  {
    if (a3)
    {
      v13 = CFDictionaryGetValue(a3, CFSTR("ServiceIdentifier"));
      v14 = CFDictionaryGetValue(a3, CFSTR("configurationGroup"));
    }
    else
    {
      v13 = 0;
      v14 = 0;
    }
    if (v13)
      v15 = v13;
    else
      v15 = a1;
    v24 = 0;
    *(_OWORD *)((char *)&context[1] + 8) = 0u;
    *(_QWORD *)&context[0] = v8;
    *((_QWORD *)&context[0] + 1) = v15;
    *(_QWORD *)&context[1] = v14;
    *((_QWORD *)&context[2] + 1) = v11;
    dispatch_sync_f(*v8, context, (dispatch_function_t)rcl_FigRCLCreateConfiguration_dispatcher);
    if (!*((_QWORD *)&context[1] + 1))
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      *((_QWORD *)&context[1] + 1) = Mutable;
      if (!Mutable)
        return FigSignalErrorAt();
      goto LABEL_38;
    }
    value = 0;
    if (FigCFEqual())
    {
      v16 = 0;
    }
    else if (FigCFEqual())
    {
      v16 = 1;
    }
    else
    {
      if (!FigCFEqual())
      {
LABEL_37:
        Mutable = (CFMutableDictionaryRef)*((_QWORD *)&context[1] + 1);
LABEL_38:
        result = 0;
        *a4 = Mutable;
        return result;
      }
      v16 = 2;
    }
    FigTrialCreate(a1, v16, (uint64_t *)&value);
    if (value)
    {
      MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
      if (MutableCopy)
      {
        v20 = MutableCopy;
        CFDictionarySetValue(MutableCopy, CFSTR("figTrial"), value);
        v21 = (const void *)*((_QWORD *)&context[1] + 1);
        *((_QWORD *)&context[1] + 1) = v20;
        CFRetain(v20);
        if (v21)
          CFRelease(v21);
        CFRelease(v20);
      }
      if (value)
        CFRelease(value);
    }
    goto LABEL_37;
  }
  return 4294954516;
}

void rcl_FigRCLCreateConfiguration_dispatcher(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  NSObject **v4;
  const void *v5;
  CFAbsoluteTime v6;
  __CFArray *Mutable;
  __CFArray *v8;
  const __CFDictionary *v9;
  const __CFDictionary *v10;
  const __CFNumber *Value;
  const __CFNumber *v12;
  CFTypeID v13;
  const __CFDictionary *v14;
  const __CFDictionary *v15;
  CFTypeID v16;
  const __CFNumber *v17;
  CFTypeID v18;
  const void *v19;
  const __CFArray *v20;
  const __CFArray *v21;
  CFTypeID v22;
  signed int v23;
  CFIndex v24;
  double v25;
  double v26;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v28;
  CFTypeID v29;
  const __CFNumber *v30;
  const __CFNumber *v31;
  CFTypeID v32;
  const void *v33;
  CFTypeID v34;
  CFTypeID v35;
  const __CFNumber *v36;
  const __CFNumber *v37;
  CFTypeID v38;
  const __CFNumber *v39;
  const __CFNumber *v40;
  CFTypeID v41;
  double v42;
  char v43;
  NSObject *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  NSObject *v48;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v50;
  unsigned int v51;
  NSObject *v52;
  unsigned int v53;
  unsigned int v54;
  signed int v55;
  const __CFDictionary *v56;
  _QWORD block[5];
  uint64_t valuePtr;
  os_log_type_t v59;
  os_log_type_t type[4];
  double v61;
  unsigned int v62;
  const char *v63;
  __int16 v64;
  signed int v65;
  _QWORD v66[18];

  v66[16] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 33) = 1;
  v2 = *(_QWORD *)(a1 + 40);
  v4 = *(NSObject ***)a1;
  v3 = *(const void **)(a1 + 8);
  v5 = *(const void **)(a1 + 16);
  valuePtr = 0;
  v6 = *(double *)(v2 + 16) + 21600.0;
  *(_BYTE *)(a1 + 33) = v6 < CFAbsoluteTimeGetCurrent();
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v8 = Mutable;
    CFArrayAppendValue(Mutable, CFSTR("storeBagVersion"));
    CFArrayAppendValue(v8, CFSTR("versionConfiguration"));
    CFArrayAppendValue(v8, CFSTR("configurationGroupMap"));
    CFArrayAppendValue(v8, CFSTR("expires"));
    CFArrayAppendValue(v8, CFSTR("OSVersion"));
    v9 = CFPreferencesCopyMultiple(v8, *(CFStringRef *)(v2 + 8), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B250]);
    if (!v9)
    {
      v12 = 0;
      v10 = v8;
      goto LABEL_46;
    }
    v10 = v9;
    Value = (const __CFNumber *)CFDictionaryGetValue(v9, CFSTR("storeBagVersion"));
    v12 = Value;
    if (Value)
    {
      v13 = CFGetTypeID(Value);
      if (v13 != CFNumberGetTypeID())
        goto LABEL_44;
      CFNumberGetValue(v12, kCFNumberCFIndexType, &valuePtr);
      if (valuePtr != 2)
        goto LABEL_44;
      v14 = (const __CFDictionary *)CFDictionaryGetValue(v10, CFSTR("versionConfiguration"));
      if (!v14)
        goto LABEL_44;
      v15 = v14;
      v16 = CFGetTypeID(v14);
      if (v16 != CFDictionaryGetTypeID())
        goto LABEL_44;
      v17 = (const __CFNumber *)CFDictionaryGetValue(v10, CFSTR("configurationGroupMap"));
      v12 = v17;
      if (v17)
      {
        v18 = CFGetTypeID(v17);
        if (v18 == CFDictionaryGetTypeID())
        {
          if (v5)
          {
            v19 = CFDictionaryGetValue(v12, v5);
            if (v19)
              goto LABEL_27;
          }
          if (v3 && (v20 = (const __CFArray *)CFDictionaryGetValue(v15, v3)) != 0
            || (v21 = (const __CFArray *)CFDictionaryGetValue(v15, CFSTR("defaultBundleID"))) != 0
            && (v20 = v21, v22 = CFGetTypeID(v21), v22 == CFArrayGetTypeID()))
          {
            v56 = v10;
            v23 = arc4random_uniform(0x64u);
            if (CFArrayGetCount(v20) >= 1)
            {
              v24 = 0;
              v55 = v23;
              v25 = (double)v23;
              v26 = 0.0;
              do
              {
                ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v20, v24);
                v61 = 0.0;
                if (!ValueAtIndex
                  || (v28 = ValueAtIndex, v29 = CFGetTypeID(ValueAtIndex), v29 != CFDictionaryGetTypeID()))
                {
                  *(_DWORD *)type = 0;
                  v59 = OS_LOG_TYPE_DEFAULT;
                  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  v50 = *(_DWORD *)type;
                  if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, v59))
                    v51 = v50;
                  else
                    v51 = v50 & 0xFFFFFFFE;
                  if (v51)
                  {
                    v62 = 136315138;
                    v63 = "rcl_GetConfigurationGroupNameFromPercentArray";
                    goto LABEL_60;
                  }
LABEL_61:
                  v10 = v56;
                  goto LABEL_43;
                }
                v30 = (const __CFNumber *)CFDictionaryGetValue(v28, CFSTR("percentage"));
                if (!v30 || (v31 = v30, v32 = CFGetTypeID(v30), v32 != CFNumberGetTypeID()))
                {
                  *(_DWORD *)type = 0;
                  v59 = OS_LOG_TYPE_DEFAULT;
                  v52 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  v53 = *(_DWORD *)type;
                  if (os_log_type_enabled(v52, v59))
                    v54 = v53;
                  else
                    v54 = v53 & 0xFFFFFFFE;
                  if (v54)
                  {
                    v62 = 136315138;
                    v63 = "rcl_GetConfigurationGroupNameFromPercentArray";
LABEL_60:
                    _os_log_send_and_compose_impl();
                  }
                  goto LABEL_61;
                }
                CFNumberGetValue(v31, kCFNumberFloat64Type, &v61);
                v26 = v26 + v61;
                v33 = CFDictionaryGetValue(v28, CFSTR("configurationGroup"));
                if (v26 >= v25)
                  break;
                ++v24;
              }
              while (v24 < CFArrayGetCount(v20));
              v23 = v55;
              if (v33)
              {
                v34 = CFGetTypeID(v33);
                if (v34 == CFStringGetTypeID())
                {
                  v19 = CFDictionaryGetValue(v12, v33);
                  v10 = v56;
                  if (!v19)
                    goto LABEL_44;
LABEL_27:
                  v35 = CFGetTypeID(v19);
                  if (v35 == CFDictionaryGetTypeID())
                  {
                    v12 = (const __CFNumber *)CFRetain(v19);
                    v66[0] = 0;
                    v62 = 0;
                    v36 = (const __CFNumber *)CFDictionaryGetValue(v10, CFSTR("expires"));
                    if (!v36)
                      goto LABEL_35;
                    v37 = v36;
                    v38 = CFGetTypeID(v36);
                    if (v38 != CFNumberGetTypeID())
                      goto LABEL_35;
                    CFNumberGetValue(v37, kCFNumberDoubleType, v66);
                    v39 = (const __CFNumber *)CFDictionaryGetValue(v10, CFSTR("OSVersion"));
                    if (v39
                      && (v40 = v39, v41 = CFGetTypeID(v39), v41 == CFNumberGetTypeID())
                      && (CFNumberGetValue(v40, kCFNumberSInt32Type, &v62), gFRCL_OSVersion >= v62)
                      && (v42 = *(double *)v66, v42 > CFAbsoluteTimeGetCurrent()))
                    {
                      v43 = 0;
                    }
                    else
                    {
LABEL_35:
                      v43 = 1;
                    }
                    *(_BYTE *)(a1 + 33) = v43;
                    goto LABEL_45;
                  }
                  goto LABEL_44;
                }
              }
            }
            LODWORD(v61) = 0;
            type[0] = OS_LOG_TYPE_DEFAULT;
            v44 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v45 = LODWORD(v61);
            if (os_log_type_enabled(v44, type[0]))
              v46 = v45;
            else
              v46 = v45 & 0xFFFFFFFE;
            if (v46)
            {
              v62 = 136315394;
              v63 = "rcl_GetConfigurationGroupNameFromPercentArray";
              v64 = 1024;
              v65 = v23;
              _os_log_send_and_compose_impl();
            }
            v10 = v56;
LABEL_43:
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
LABEL_44:
        v12 = 0;
      }
    }
LABEL_45:
    CFRelease(v8);
LABEL_46:
    CFRelease(v10);
    goto LABEL_47;
  }
  v12 = 0;
LABEL_47:
  *(_QWORD *)(a1 + 24) = v12;
  if (*(_BYTE *)(a1 + 33))
  {
    v47 = *(_QWORD *)(a1 + 40);
    v48 = *v4;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __rcl_FigRCLCreateConfiguration_dispatcher_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = v47;
    dispatch_async(v48, block);
  }
}

const void *FigRCLCopyCFType(CFDictionaryRef theDict, __CFString *key)
{
  CFPropertyListRef v4;
  const void *v5;
  uint64_t v6;
  const void *Value;

  if (gStorebagOverrideDefaults)
  {
    v4 = CFPreferencesCopyAppValue(key, CFSTR("com.apple.coremedia"));
  }
  else
  {
    if (!theDict)
      return 0;
    Value = CFDictionaryGetValue(theDict, key);
    if (!Value)
    {
      v5 = 0;
      if (theDict)
        goto LABEL_4;
      return v5;
    }
    v4 = CFRetain(Value);
  }
  v5 = v4;
  if (!theDict)
    return v5;
LABEL_4:
  if (gStorebagOverrideDefaults || !CFDictionaryContainsKey(theDict, CFSTR("figTrial")))
    return v5;
  if (v5)
    CFRelease(v5);
  v6 = FigCFDictionaryGetValue();
  return (const void *)FigTrialCopyCFType(v6, key);
}

uint64_t FigRCLGetNumberWithDefault(const __CFDictionary *a1, __CFString *a2)
{
  const void *v2;
  uint64_t NumberFromCFTypeWithDefault;

  v2 = FigRCLCopyCFType(a1, a2);
  NumberFromCFTypeWithDefault = FigGetNumberFromCFTypeWithDefault();
  if (v2)
    CFRelease(v2);
  return NumberFromCFTypeWithDefault;
}

uint64_t FigRCLGetLongNumberWithDefault(const __CFDictionary *a1, __CFString *a2)
{
  const void *v2;
  uint64_t LongNumberFromCFTypeWithDefault;

  v2 = FigRCLCopyCFType(a1, a2);
  LongNumberFromCFTypeWithDefault = FigGetLongNumberFromCFTypeWithDefault();
  if (v2)
    CFRelease(v2);
  return LongNumberFromCFTypeWithDefault;
}

double FigRCLGetDoubleWithDefault(const __CFDictionary *a1, __CFString *a2)
{
  const void *v2;
  double v3;
  double v4;

  v2 = FigRCLCopyCFType(a1, a2);
  FigGetDoubleFromCFTypeWithDefault();
  v4 = v3;
  if (v2)
    CFRelease(v2);
  return v4;
}

const __CFDictionary *FigRCLCopyConfigurationGroupName(CFDictionaryRef theDict)
{
  const __CFDictionary *v1;
  const __CFString *v2;
  const __CFString *v3;
  const __CFString *v4;
  const void *Value;

  v1 = theDict;
  if (gStorebagOverrideDefaults)
  {
    v2 = CFSTR("overriddenByDefaults");
  }
  else
  {
    if (!theDict)
      return v1;
    Value = CFDictionaryGetValue(theDict, CFSTR("configurationGroup"));
    if (Value)
      v2 = (const __CFString *)CFRetain(Value);
    else
      v2 = 0;
  }
  if (!v1 || gStorebagOverrideDefaults || !CFDictionaryContainsKey(v1, CFSTR("figTrial")))
    return (const __CFDictionary *)v2;
  v3 = (const __CFString *)FigCFDictionaryGetValue();
  v4 = FigTrialCopyExperimentId(v3);
  v1 = (const __CFDictionary *)v4;
  if (v4)
    CFRetain(v4);
  if (v2)
    CFRelease(v2);
  if (v1)
    CFRelease(v1);
  return v1;
}

uint64_t __figRCLReadStorebagOverrideOnce_block_invoke()
{
  return FigDebugSettingGetKeyAsBoolean();
}

void rcl_InitializeLoader()
{
  uint64_t v0;
  uint64_t v1;
  CFTypeRef v2;
  CFTypeRef v3;
  dispatch_object_t v4;
  void (*v5)(CFTypeRef, dispatch_object_t, _QWORD, uint64_t);
  const void *v6;
  const void *v7;
  const __CFString *v8;
  const __CFString *v9;
  const __CFArray *ArrayBySeparatingStrings;
  const __CFArray *v11;
  int v12;
  uint64_t v13;
  CFIndex v14;
  uint64_t v15;
  const __CFString *ValueAtIndex;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;

  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  gFRCL_Loader = (uint64_t)malloc_type_calloc(1uLL, 0x70uLL, 0x10E004040338472uLL);
  if (!gFRCL_Loader)
  {
LABEL_30:
    gFRCL_Loader = 0;
    return;
  }
  v0 = FigDispatchQueueCreateWithPriority();
  v1 = gFRCL_Loader;
  *(_QWORD *)gFRCL_Loader = v0;
  if (!v0)
    goto LABEL_23;
  v2 = FigURLStorageSessionCopyGlobalSession();
  v1 = gFRCL_Loader;
  *(_QWORD *)(gFRCL_Loader + 24) = v2;
  if (!v2)
    goto LABEL_23;
  v3 = v2;
  v4 = *(dispatch_object_t *)v1;
  v5 = *(void (**)(CFTypeRef, dispatch_object_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 40);
  if (v5)
    v5(v3, v4, 0, v1 + 32);
  v1 = gFRCL_Loader;
  if (!*(_QWORD *)(gFRCL_Loader + 32))
  {
LABEL_23:
    v19 = *(const void **)(v1 + 32);
    if (v19)
    {
      CFRelease(v19);
      v1 = gFRCL_Loader;
      *(_QWORD *)(gFRCL_Loader + 32) = 0;
    }
    v20 = *(const void **)(v1 + 24);
    if (v20)
    {
      CFRelease(v20);
      v1 = gFRCL_Loader;
      *(_QWORD *)(gFRCL_Loader + 24) = 0;
    }
    if (*(_QWORD *)v1)
    {
      dispatch_release(*(dispatch_object_t *)v1);
      v1 = gFRCL_Loader;
    }
    rcl_ReleaseConnectionDataList(v1 + 8);
    free((void *)gFRCL_Loader);
    goto LABEL_30;
  }
  *(_QWORD *)(gFRCL_Loader + 8) = 0;
  *(_QWORD *)(v1 + 16) = v1 + 8;
  v6 = (const void *)MGCopyAnswer();
  if (v6)
  {
    v7 = v6;
    gFRCL_IsInternalOS = CFEqual(v6, CFSTR("Internal"));
    CFRelease(v7);
  }
  v8 = (const __CFString *)MGCopyAnswer();
  if (v8)
  {
    v9 = v8;
    ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v8, CFSTR("."));
    if (ArrayBySeparatingStrings)
    {
      v11 = ArrayBySeparatingStrings;
      if (CFArrayGetCount(ArrayBySeparatingStrings) < 1)
      {
        v12 = 0;
      }
      else
      {
        v12 = 0;
        v13 = 24;
        v14 = 1;
        do
        {
          v15 = v13;
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v11, v14 - 1);
          v12 |= CFStringGetIntValue(ValueAtIndex) << v15;
          if (v14 >= CFArrayGetCount(v11))
            break;
          v13 = v15 - 8;
          ++v14;
        }
        while (v15);
      }
      CFRelease(v11);
    }
    else
    {
      v12 = 0;
    }
    gFRCL_OSVersion = v12;
    CFRelease(v9);
  }
  gFRCL_DeviceModelName = CelestialGetModelSpecificName();
  v17 = (const void *)MGCopyAnswer();
  if (v17)
  {
    v18 = v17;
    gFRCL_ProductTypeString = (uint64_t)CFRetain(v17);
    CFRelease(v18);
  }
  rcl_InitializeStoreBagContext((_QWORD *)(gFRCL_Loader + 40), (uint64_t)rcl_InitializeLoader_kFigRemoteConfigurationLoader_PumpStoreBagValues);
  rcl_InitializeStoreBagContext((_QWORD *)(gFRCL_Loader + 64), (uint64_t)rcl_InitializeLoader_kFigRemoteConfigurationLoader_CRABSStoreBagValues);
  rcl_InitializeStoreBagContext((_QWORD *)(gFRCL_Loader + 88), (uint64_t)rcl_InitializeLoader_kFigRemoteConfigurationLoader_AirPlayStoreBagValues);
}

CFTypeRef rcl_InitializeStoreBagContext(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  CFPropertyListRef v6;
  CFTypeRef result;

  v3 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v4 = *(const void **)(a2 + 24);
  v6 = CFPreferencesCopyAppValue(*(CFStringRef *)a2, CFSTR("com.apple.coremedia"));
  if (!v6)
  {
    v6 = (CFPropertyListRef)(gFRCL_IsInternalOS ? v3 : v5);
    if (v6)
      CFRetain(v6);
  }
  *a1 = v6;
  if (v4)
    result = CFRetain(v4);
  else
    result = 0;
  a1[1] = result;
  a1[2] = 0;
  return result;
}

uint64_t *rcl_ReleaseConnectionDataList(uint64_t a1)
{
  uint64_t *result;
  uint64_t v3;
  _QWORD *v4;

  result = *(uint64_t **)a1;
  if (result)
  {
    do
    {
      v3 = *result;
      v4 = (_QWORD *)result[1];
      if (*result)
      {
        *(_QWORD *)(v3 + 8) = v4;
        v4 = (_QWORD *)result[1];
      }
      else
      {
        *(_QWORD *)(a1 + 8) = v4;
      }
      *v4 = v3;
      rcl_ReleaseConnectionData(result);
      result = *(uint64_t **)a1;
    }
    while (*(_QWORD *)a1);
  }
  return result;
}

void rcl_ReleaseConnectionData(_QWORD *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t);
  const void *v4;
  const void *v5;

  if (a1)
  {
    v2 = a1[3];
    if (v2)
    {
      v3 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v3)
        v3(v2);
      v4 = (const void *)a1[3];
      if (v4)
        CFRelease(v4);
    }
    v5 = (const void *)a1[5];
    if (v5)
      CFRelease(v5);
    free(a1);
  }
}

void rcl_HTTPReadCallback(uint64_t a1, int a2, int a3, CMBlockBufferRef targetBBuf, uint64_t a5, uint64_t a6, char a7, int a8)
{
  uint64_t v12;
  uint64_t v13;
  OpaqueCMBlockBuffer *v14;
  OSStatus appended;
  const __CFDictionary *v16;
  CFTypeRef v17;
  uint64_t v18;
  const __CFAllocator *v19;
  const __CFDictionary *v20;
  const __CFString *v21;
  const void *v22;
  const void *v23;
  CFTypeID v24;
  CFDataRef v25;
  CFDataRef v26;
  uint64_t v27;
  __SecKey *v28;
  uint64_t v29;
  const __CFData *v30;
  const void *v31;
  const void *v32;
  CFTypeID v33;
  const __CFData *v34;
  const __CFData *v35;
  const UInt8 *BytePtr;
  CC_LONG Length;
  const uint8_t *v38;
  size_t v39;
  CFPropertyListRef v40;
  const __CFDictionary *v41;
  CFTypeID v42;
  const __CFNumber *v43;
  const __CFNumber *v44;
  const __CFDictionary *v45;
  CFTypeID v46;
  BOOL v47;
  const __CFNumber *v48;
  const __CFNumber *v49;
  CFTypeID v50;
  const __CFDictionary *v51;
  CFTypeID v52;
  CFNumberRef v53;
  CFNumberRef v54;
  const __CFArray *v55;
  const __CFArray *v56;
  CFTypeID v57;
  CFIndex v58;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v60;
  CFTypeID v61;
  const void *v62;
  const __CFArray *v63;
  const __CFArray *v64;
  CFTypeID v65;
  CFTypeID v66;
  CFIndex v67;
  const __CFNumber *v68;
  const __CFNumber *v69;
  CFTypeID v70;
  CFTypeID v71;
  CFTypeID v72;
  CFTypeRef v73;
  CFTypeRef v74;
  __CFDictionary *Mutable;
  __CFDictionary *v76;
  CFMutableDictionaryRef v77;
  CFMutableDictionaryRef v78;
  __int16 v79;
  __CFDictionary *v80;
  uint64_t v81;
  uint64_t *v82;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v84;
  unsigned int v85;
  const __CFNumber *v86;
  const __CFDictionary *v87;
  uint64_t v88;
  const __CFNumber *value;
  const __CFDictionary *theDict;
  const __CFString *applicationID;
  CFTypeRef v92;
  const __CFData *v93;
  CFTypeRef v94;
  __SecKey *cf;
  const void *v96;
  const __CFNumber *v97;
  const __CFData *v98;
  CMBlockBufferRef blockBufferOut;
  int v100;
  int valuePtr;
  unsigned int v102;
  double v103[2];
  unsigned __int8 md[8];
  uint64_t v105;
  uint64_t (*v106)(uint64_t, void *, uint64_t, _BYTE *);
  void *v107;
  uint64_t v108;
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  if (gFigRemoteConfigLoaderInit != -1)
    dispatch_once_f(&gFigRemoteConfigLoaderInit, 0, (dispatch_function_t)rcl_InitializeLoader);
  v12 = gFRCL_Loader;
  blockBufferOut = 0;
  if (!gFRCL_Loader)
    return;
  v13 = gFRCL_Loader + 8;
  do
  {
    v13 = *(_QWORD *)v13;
    if (!v13)
    {
      v16 = 0;
      goto LABEL_97;
    }
  }
  while (*(_QWORD *)(v13 + 24) != a1);
  if (a8)
    goto LABEL_102;
  if (!targetBBuf)
  {
    appended = 0;
    if ((a7 & 2) == 0)
      goto LABEL_14;
    goto LABEL_16;
  }
  v14 = *(OpaqueCMBlockBuffer **)(v13 + 40);
  if (!v14)
  {
    v17 = CFRetain(targetBBuf);
    appended = 0;
    *(_QWORD *)(v13 + 40) = v17;
    if ((a7 & 2) == 0)
      goto LABEL_14;
LABEL_16:
    v18 = *(_QWORD *)(v13 + 16);
    *(_DWORD *)(v13 + 48) = appended;
    if (!appended)
    {
      *(CFAbsoluteTime *)(v18 + 16) = CFAbsoluteTimeGetCurrent();
      v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      if (!CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CMBlockBufferRef *)(v13 + 40), (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, 0, &blockBufferOut)&& !FigCreateCFDataWithBlockBufferNoCopy())
      {
        v20 = (const __CFDictionary *)CFPropertyListCreateWithData(v19, 0, 1uLL, 0, 0);
        v16 = v20;
        if (v20)
        {
          v21 = *(const __CFString **)(v18 + 8);
          v22 = CFDictionaryGetValue(v20, CFSTR("signature"));
          v100 = 0;
          valuePtr = 21600;
          if (!v22
            || (v23 = v22, v24 = CFGetTypeID(v22), v24 != CFStringGetTypeID())
            || (v25 = CFDataCreate(v19, FigRCLPublicKey, 270)) == 0)
          {
            v79 = FigSignalErrorAt();
            goto LABEL_92;
          }
          v26 = v25;
          v103[0] = 0.0;
          v27 = SecKeyCreateFromPublicData();
          if (v27)
          {
            v28 = (__SecKey *)v27;
            applicationID = v21;
            v29 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBase64EncodedString:options:", v23, 1);
            v94 = (CFTypeRef)v29;
            cf = v28;
            if (!v29)
            {
              v92 = 0;
              v93 = 0;
              goto LABEL_120;
            }
            v30 = (const __CFData *)v29;
            v98 = v26;
            v31 = CFDictionaryGetValue(v16, CFSTR("bag"));
            if (v31 && (v32 = v31, v33 = CFGetTypeID(v31), v33 == CFStringGetTypeID()))
            {
              v34 = (const __CFData *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBase64EncodedString:options:", v32, 1);
              if (v34)
              {
                v35 = v34;
                BytePtr = CFDataGetBytePtr(v34);
                Length = CFDataGetLength(v35);
                CC_SHA1(BytePtr, Length, md);
                v38 = CFDataGetBytePtr(v30);
                v39 = CFDataGetLength(v30);
                v93 = v35;
                if (SecKeyRawVerify(v28, 0x8002u, md, 0x14uLL, v38, v39))
                {
                  v92 = 0;
                }
                else
                {
                  v40 = CFPropertyListCreateWithData(v19, v35, 1uLL, 0, 0);
                  v92 = v40;
                  if (v40)
                  {
                    v41 = (const __CFDictionary *)v40;
                    v42 = CFGetTypeID(v40);
                    if (v42 == CFDictionaryGetTypeID())
                    {
                      v43 = (const __CFNumber *)CFDictionaryGetValue(v41, CFSTR("refreshCycle"));
                      if (v43)
                      {
                        v44 = v43;
                        v45 = v41;
                        v46 = CFGetTypeID(v43);
                        v47 = v46 == CFNumberGetTypeID();
                        v41 = v45;
                        if (v47)
                          CFNumberGetValue(v44, kCFNumberIntType, &valuePtr);
                      }
                      v48 = (const __CFNumber *)CFDictionaryGetValue(v41, CFSTR("storeBagVersion"));
                      if (v48)
                      {
                        v49 = v48;
                        v50 = CFGetTypeID(v48);
                        if (v50 == CFNumberGetTypeID())
                        {
                          CFNumberGetValue(v49, kCFNumberSInt32Type, &v100);
                          if (v100 == 2)
                          {
                            v51 = (const __CFDictionary *)CFDictionaryGetValue(v41, CFSTR("configurationGroupMap"));
                            if (v51)
                            {
                              value = v49;
                              theDict = v51;
                              v52 = CFGetTypeID(v51);
                              if (v52 == CFDictionaryGetTypeID())
                              {
                                v103[0] = CFAbsoluteTimeGetCurrent() + (double)valuePtr;
                                v53 = CFNumberCreate(v19, kCFNumberDoubleType, v103);
                                v26 = v98;
                                if (v53)
                                {
                                  v54 = v53;
                                  v87 = v16;
                                  v88 = v12;
                                  v55 = (const __CFArray *)CFDictionaryGetValue(v41, CFSTR("versionBagArray"));
                                  if (!v55)
                                    goto LABEL_70;
                                  v56 = v55;
                                  v57 = CFGetTypeID(v55);
                                  if (v57 != CFArrayGetTypeID() || CFArrayGetCount(v56) < 1)
                                    goto LABEL_70;
                                  v86 = v54;
                                  v96 = 0;
                                  v97 = 0;
                                  v58 = 0;
                                  while (1)
                                  {
                                    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v56, v58);
                                    if (ValueAtIndex)
                                    {
                                      v60 = ValueAtIndex;
                                      v61 = CFGetTypeID(ValueAtIndex);
                                      if (v61 == CFDictionaryGetTypeID())
                                      {
                                        v62 = CFDictionaryGetValue(v60, CFSTR("deviceList"));
                                        v63 = (const __CFArray *)CFDictionaryGetValue(v60, CFSTR("productType"));
                                        if (!gFRCL_ProductTypeString
                                          || (v64 = v63) == 0
                                          || (v65 = CFGetTypeID(v63), v65 != CFArrayGetTypeID())
                                          || CFArrayGetCount(v64) < 1
                                          || (*(_QWORD *)md = MEMORY[0x1E0C809B0],
                                              v105 = 3221225472,
                                              v106 = __rcl_CopyVersionBag_block_invoke,
                                              v107 = &unk_1E2FA93B0,
                                              v108 = gFRCL_ProductTypeString,
                                              -[__CFArray indexOfObjectPassingTest:](v64, "indexOfObjectPassingTest:", md) != 0x7FFFFFFFFFFFFFFFLL))
                                        {
                                          if (!v62)
                                            goto LABEL_60;
                                          v66 = CFGetTypeID(v62);
                                          if (v66 != CFArrayGetTypeID() || CFArrayGetCount((CFArrayRef)v62) < 1)
                                            goto LABEL_60;
                                          if (CFArrayGetCount((CFArrayRef)v62) >= 1)
                                            break;
                                        }
                                      }
                                    }
LABEL_64:
                                    if (++v58 >= CFArrayGetCount(v56))
                                    {
                                      v54 = v86;
                                      if (v96)
                                      {
                                        v71 = CFGetTypeID(v96);
                                        if (v71 == CFDictionaryGetTypeID())
                                        {
                                          if (v97)
                                          {
                                            v72 = CFGetTypeID(v97);
                                            if (v72 == CFNumberGetTypeID())
                                            {
                                              v73 = CFRetain(v96);
                                              v74 = CFRetain(v97);
LABEL_71:
                                              Mutable = CFDictionaryCreateMutable(v19, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                                              v76 = Mutable;
                                              v16 = v87;
                                              v12 = v88;
                                              v26 = v98;
                                              if (Mutable)
                                              {
                                                CFDictionarySetValue(Mutable, CFSTR("expires"), v54);
                                                CFDictionarySetValue(v76, CFSTR("storeBagVersion"), value);
                                                CFDictionarySetValue(v76, CFSTR("OSVersion"), v74);
                                                CFDictionarySetValue(v76, CFSTR("versionConfiguration"), v73);
                                                v77 = CFDictionaryCreateMutable(v19, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                                                if (v77)
                                                {
                                                  CFDictionaryApplyFunction((CFDictionaryRef)v73, (CFDictionaryApplierFunction)rcl_VersionConfigurationDictApplierFunc, v77);
                                                  CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)rcl_ConfigurationGroupMapDictApplierFunc, v77);
                                                  v78 = v77;
                                                }
                                                else
                                                {
                                                  v78 = theDict;
                                                }
                                                CFDictionarySetValue(v76, CFSTR("configurationGroupMap"), v78);
                                                CFPreferencesSetMultiple(v76, 0, applicationID, (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B250]);
                                                v79 = 0;
                                              }
                                              else
                                              {
                                                v79 = FigSignalErrorAt();
                                                v77 = 0;
                                              }
                                              goto LABEL_75;
                                            }
                                          }
                                        }
                                      }
LABEL_70:
                                      v74 = 0;
                                      v73 = 0;
                                      if (!FigSignalErrorAt())
                                        goto LABEL_71;
                                      v79 = FigSignalErrorAt();
                                      v73 = 0;
                                      v74 = 0;
                                      v77 = 0;
                                      v76 = 0;
                                      v16 = v87;
                                      v12 = v88;
                                      v26 = v98;
LABEL_75:
                                      CFRelease(v26);
                                      CFRelease(cf);
                                      if (v94)
                                        CFRelease(v94);
                                      if (v92)
                                        CFRelease(v92);
                                      if (v93)
                                        CFRelease(v93);
                                      if (v54)
                                        CFRelease(v54);
                                      if (v74)
                                        CFRelease(v74);
                                      if (v73)
                                        CFRelease(v73);
                                      if (v77)
                                        CFRelease(v77);
                                      if (v76)
                                      {
                                        v80 = v76;
                                        goto LABEL_91;
                                      }
                                      goto LABEL_92;
                                    }
                                  }
                                  v67 = 0;
                                  while (1)
                                  {
                                    CFArrayGetValueAtIndex((CFArrayRef)v62, v67);
                                    if (FigCFEqual())
                                      break;
                                    if (++v67 >= CFArrayGetCount((CFArrayRef)v62))
                                      goto LABEL_64;
                                  }
LABEL_60:
                                  v68 = (const __CFNumber *)CFDictionaryGetValue(v60, CFSTR("OSVersion"));
                                  v102 = 0;
                                  if (v68)
                                  {
                                    v69 = v68;
                                    v70 = CFGetTypeID(v68);
                                    if (v70 == CFNumberGetTypeID())
                                    {
                                      CFNumberGetValue(v69, kCFNumberSInt32Type, &v102);
                                      if (gFRCL_OSVersion >= v102)
                                      {
                                        v96 = CFDictionaryGetValue(v60, CFSTR("versionConfiguration"));
                                        v97 = v69;
                                      }
                                    }
                                  }
                                  goto LABEL_64;
                                }
LABEL_120:
                                v79 = FigSignalErrorAt();
                                v73 = 0;
                                v74 = 0;
                                v54 = 0;
                                v77 = 0;
                                v76 = 0;
                                goto LABEL_75;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              else
              {
                v92 = 0;
                v93 = 0;
              }
            }
            else
            {
              v92 = 0;
              v93 = 0;
            }
            v26 = v98;
            goto LABEL_120;
          }
          v79 = FigSignalErrorAt();
          v80 = v26;
LABEL_91:
          CFRelease(v80);
LABEL_92:
          if (v79)
          {
            v102 = 0;
            LOBYTE(valuePtr) = 0;
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v84 = v102;
            if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, (os_log_type_t)valuePtr))
              v85 = v84;
            else
              v85 = v84 & 0xFFFFFFFE;
            if (v85)
            {
              LODWORD(v103[0]) = 136315138;
              *(_QWORD *)((char *)v103 + 4) = "rcl_HTTPReadCallback";
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
LABEL_93:
        v81 = *(_QWORD *)v13;
        v82 = *(uint64_t **)(v13 + 8);
        if (*(_QWORD *)v13)
        {
          *(_QWORD *)(v81 + 8) = v82;
          v82 = *(uint64_t **)(v13 + 8);
        }
        else
        {
          *(_QWORD *)(v12 + 16) = v82;
        }
        *v82 = v81;
        goto LABEL_97;
      }
    }
LABEL_102:
    v16 = 0;
    goto LABEL_93;
  }
  appended = CMBlockBufferAppendBufferReference(v14, targetBBuf, 0, 0, 0);
  if ((a7 & 2) != 0)
    goto LABEL_16;
LABEL_14:
  v16 = 0;
  v13 = 0;
LABEL_97:
  rcl_ReleaseConnectionData((_QWORD *)v13);
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (v16)
    CFRelease(v16);
}

void rcl_VersionConfigurationDictApplierFunc(int a1, CFTypeRef cf)
{
  CFTypeID v2;

  if (cf)
  {
    v2 = CFGetTypeID(cf);
    if (v2 == CFArrayGetTypeID())
      FigCFArrayApplyFunction();
  }
}

void rcl_ConfigurationGroupMapDictApplierFunc(const void *a1, const void *a2, void *cf)
{
  CFTypeID v6;

  if (cf)
  {
    v6 = CFGetTypeID(cf);
    if (v6 == CFDictionaryGetTypeID())
      CFDictionaryReplaceValue((CFMutableDictionaryRef)cf, a1, a2);
  }
}

void rcl_ConfigGroupArrayApplierFunc(const void *a1, __CFDictionary *a2)
{
  CFTypeID v4;
  const void *Value;

  if (a1)
  {
    v4 = CFGetTypeID(a1);
    if (v4 == CFDictionaryGetTypeID())
    {
      Value = CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("configurationGroup"));
      if (Value)
        CFDictionarySetValue(a2, Value, Value);
    }
  }
}

uint64_t FigAlternateCreationContextCopyMediaGroupLocatorMapForMediaGroupID(CFMutableDictionaryRef *a1, void *a2, const void *a3, _QWORD *a4)
{
  uint64_t v6;
  const __CFDictionary *v7;
  const void *Value;
  CFDictionaryRef theDict;

  theDict = 0;
  if (!a4)
    return FigSignalErrorAt();
  v6 = fa_ensureSerializationContextAndCopyMediaGroupForCache(a1, a2, &theDict);
  v7 = theDict;
  if (!(_DWORD)v6)
  {
    if (CFDictionaryContainsKey(theDict, a3))
    {
      Value = CFDictionaryGetValue(v7, a3);
      if (Value)
        Value = CFRetain(Value);
    }
    else
    {
      Value = 0;
    }
    *a4 = Value;
  }
  if (v7)
    CFRelease(v7);
  return v6;
}

uint64_t FigAlternateCreationContextSetMediaGroupLocatorMapForMediaGroupID(CFMutableDictionaryRef *a1, void *a2, const void *a3, const void *a4)
{
  uint64_t v6;
  CFMutableDictionaryRef v7;
  CFMutableDictionaryRef theDict;

  theDict = 0;
  v6 = fa_ensureSerializationContextAndCopyMediaGroupForCache(a1, a2, &theDict);
  v7 = theDict;
  if (!(_DWORD)v6)
    CFDictionarySetValue(theDict, a3, a4);
  if (v7)
    CFRelease(v7);
  return v6;
}

uint64_t FigResetDisplaySleepTimer(const __CFString *a1)
{
  const __CFString *v2;
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  if (FigResetDisplaySleepTimer_onceToken != -1)
    dispatch_once(&FigResetDisplaySleepTimer_onceToken, &__block_literal_global_16);
  v2 = CFSTR("com.apple.coremedia");
  if (a1)
    v2 = a1;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __FigResetDisplaySleepTimer_block_invoke_2;
  v5[3] = &unk_1E2F87F08;
  v5[4] = &v6;
  v5[5] = v2;
  dispatch_sync((dispatch_queue_t)FigResetDisplaySleepTimer_sAssertionQueue, v5);
  v3 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t FigCDSLegibleOutputCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  if (a1 && a2 && a3 && a5)
  {
    *a5 = 0;
    FigCDSOutputGetClassID();
    CMDerivedObjectCreate();
  }
  return FigSignalErrorAt();
}

__CFString *FigCDSLegibleOutput_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigCDSLegibleOutput %p>"), a1);
  return Mutable;
}

uint64_t transactionBegin_3()
{
  return 0;
}

uint64_t transactionFlush_3()
{
  return 0;
}

uint64_t transactionCommit_3()
{
  return 0;
}

uint64_t setNeedsDisplayInRect_3()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
    (*(void (**)(_QWORD, _QWORD))(DerivedStorage + 88))(*(_QWORD *)DerivedStorage, *(_QWORD *)(DerivedStorage + 72));
  return 0;
}

double getBounds_3()
{
  return *(double *)(CMBaseObjectGetDerivedStorage() + 8);
}

uint64_t setBounds_3(double a1, double a2, double a3, double a4)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 8) = a1;
  *(double *)(DerivedStorage + 16) = a2;
  *(double *)(DerivedStorage + 24) = a3;
  *(double *)(DerivedStorage + 32) = a4;
  (*(void (**)(_QWORD, double, double, double, double))(DerivedStorage + 80))(*(_QWORD *)(DerivedStorage + 72), a1, a2, a3, a4);
  return 0;
}

uint64_t setVideoBounds_3(double a1, double a2, double a3, double a4)
{
  double *DerivedStorage;

  DerivedStorage = (double *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[5] = a1;
  DerivedStorage[6] = a2;
  DerivedStorage[7] = a3;
  DerivedStorage[8] = a4;
  return 0;
}

int clear_3(void)
{
  return 0;
}

uint64_t figDeferredTransactionClassInitialize()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gFigDeferredTransactionTypeID = result;
  return result;
}

uint64_t FigDeferredTransactionCreate(uint64_t a1, uint64_t *a2)
{
  const __CFAllocator *v3;
  uint64_t Instance;
  uint64_t v5;
  const CFArrayCallBacks *v6;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a2)
    return FigSignalErrorAt();
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (FigDeferredTransactionGetTypeID_oneTimeOnly != -1)
    dispatch_once_f(&FigDeferredTransactionGetTypeID_oneTimeOnly, 0, (dispatch_function_t)figDeferredTransactionClassInitialize);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v5 = Instance;
  v6 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  *(_QWORD *)(Instance + 32) = CFArrayCreateMutable(v3, 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(v5 + 40) = CFArrayCreateMutable(v3, 0, v6);
  *(_BYTE *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *a2 = v5;
  return 0;
}

uint64_t FigDeferredTransactionCommit(uint64_t a1)
{
  const __CFArray *v2;
  uint64_t v3;
  void *v5;
  unsigned int v6;

  if (!a1)
    return 0;
  if (!*(_BYTE *)(a1 + 16))
  {
    v2 = *(const __CFArray **)(a1 + 32);
    if (v2 && CFArrayGetCount(v2) >= 1)
    {
      *(_QWORD *)(a1 + 24) = FigGetUpTimeNanoseconds();
      if (!*(_BYTE *)(a1 + 48))
      {
        v5 = (void *)MEMORY[0x19403137C]();
        LODWORD(v3) = fdt_commitTransactionChanges(a1);
        v6 = fdt_performPostCommitChanges(a1);
        if ((_DWORD)v3)
          v3 = v3;
        else
          v3 = v6;
        objc_autoreleasePoolPop(v5);
        goto LABEL_8;
      }
      CFRetain((CFTypeRef)a1);
      dispatch_async_f(MEMORY[0x1E0C80D38], (void *)a1, (dispatch_function_t)fdt_commitTransactionOnMainQueue);
    }
    v3 = 0;
LABEL_8:
    *(_BYTE *)(a1 + 16) = 1;
    return v3;
  }
  return FigSignalErrorAt();
}

void fdt_commitTransactionOnMainQueue(_QWORD *a1)
{
  void *v2;
  CFStringRef v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  FigDeferredTransactionReleaseTrigger *v5;
  uint64_t v6;
  FigDeferredTransactionReleaseTrigger *v7;
  FigDeferredTransactionReleaseTrigger *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[5];
  _QWORD v12[5];
  os_log_type_t type;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x19403137C]();
  if (a1[3])
  {
    if ((double)(FigGetUpTimeNanoseconds() - a1[3]) / 1000000000.0 > 0.02)
    {
      v3 = CFCopyDescription(a1);
      v14 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      if (v3)
        CFRelease(v3);
    }
  }
  objc_msgSend(MEMORY[0x1E0CD28B0], "begin", v9, v10);
  objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
  fdt_commitTransactionChanges((uint64_t)a1);
  v5 = [FigDeferredTransactionReleaseTrigger alloc];
  v6 = MEMORY[0x1E0C809B0];
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __fdt_commitTransactionOnMainQueue_block_invoke;
  v12[3] = &__block_descriptor_40_e5_v8__0l;
  v12[4] = a1;
  v7 = -[FigDeferredTransactionReleaseTrigger initWithReleaseBlock:](v5, "initWithReleaseBlock:", v12);
  v8 = v7;
  v11[0] = v6;
  v11[1] = 3221225472;
  v11[2] = __fdt_commitTransactionOnMainQueue_block_invoke_2;
  v11[3] = &unk_1E2F88548;
  v11[4] = v7;
  objc_msgSend(MEMORY[0x1E0CD28B0], "addCommitHandler:forPhase:", v11, 5);
  objc_msgSend(MEMORY[0x1E0CD28B0], "commit");

  objc_autoreleasePoolPop(v2);
}

uint64_t fdt_commitTransactionChanges(uint64_t a1)
{
  const __CFArray *v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex v5;
  uint64_t v6;
  const void *ValueAtIndex;
  unsigned int v8;
  unsigned int v9;
  const void *v10;

  v2 = *(const __CFArray **)(a1 + 32);
  if (!v2)
    return 0;
  Count = CFArrayGetCount(v2);
  if (Count < 1)
  {
    v6 = 0;
  }
  else
  {
    v4 = Count;
    v5 = 0;
    LODWORD(v6) = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), v5);
      v8 = fdt_performTransactionChange((uint64_t)ValueAtIndex);
      if ((_DWORD)v6)
        v9 = v6;
      else
        v9 = v8;
      if (v8)
        v6 = v9;
      else
        v6 = v6;
      ++v5;
    }
    while (v4 != v5);
  }
  v10 = *(const void **)(a1 + 32);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a1 + 32) = 0;
  }
  return v6;
}

uint64_t fdt_performPostCommitChanges(uint64_t a1)
{
  const __CFArray *v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex v5;
  uint64_t v6;
  const void *ValueAtIndex;
  unsigned int v8;
  unsigned int v9;

  v2 = *(const __CFArray **)(a1 + 40);
  if (!v2)
    return 0;
  Count = CFArrayGetCount(v2);
  if (Count < 1)
    return 0;
  v4 = Count;
  v5 = 0;
  LODWORD(v6) = 0;
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), v5);
    v8 = fdt_performTransactionChange((uint64_t)ValueAtIndex);
    if ((_DWORD)v6)
      v9 = v6;
    else
      v9 = v8;
    if (v8)
      v6 = v9;
    else
      v6 = v6;
    ++v5;
  }
  while (v4 != v5);
  return v6;
}

uint64_t FigDeferredTransactionAppendChangeWithCallback(const void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  CFTypeRef v12;
  uint64_t v13;
  uint64_t v14;
  CFTypeRef cf;
  void *value;

  cf = 0;
  value = 0;
  v12 = a1;
  if (!a1)
  {
    v13 = FigDeferredTransactionCreate(0, (uint64_t *)&cf);
    if ((_DWORD)v13)
    {
LABEL_6:
      v14 = v13;
      goto LABEL_12;
    }
    v12 = cf;
  }
  if (*((_BYTE *)v12 + 16))
  {
    v13 = FigSignalErrorAt();
    goto LABEL_6;
  }
  v13 = fdr_createChange(a7, a4, a5, &value);
  if ((_DWORD)v13)
    goto LABEL_6;
  CFArrayAppendValue(*((CFMutableArrayRef *)v12 + 4), value);
  if (a2)
    *((_BYTE *)v12 + 48) = 1;
  if (!a1)
  {
    v13 = FigDeferredTransactionCommit((uint64_t)v12);
    goto LABEL_6;
  }
  v14 = 0;
LABEL_12:
  if (cf)
    CFRelease(cf);
  if (value)
    CFRelease(value);
  return v14;
}

uint64_t fdr_createChange(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *Instance;

  if (!a4)
    return FigSignalErrorAt();
  if (FigDeferredTransactionChangeGetTypeID_oneTimeOnly != -1)
    dispatch_once_f(&FigDeferredTransactionChangeGetTypeID_oneTimeOnly, 0, (dispatch_function_t)figDeferredTransactionChangeClassInitialize);
  Instance = (_QWORD *)_CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  Instance[3] = a1;
  Instance[4] = a3;
  Instance[5] = a2;
  *a4 = Instance;
  return 0;
}

uint64_t FigDeferredTransactionAppendPostCommitChangeWithCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  void *value;

  value = 0;
  if (a1)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v7 = FigSignalErrorAt();
    }
    else
    {
      v7 = fdr_createChange(a6, a3, a4, &value);
      if (!(_DWORD)v7)
        CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 40), value);
    }
  }
  else
  {
    v7 = fdr_createChange(a6, a3, a4, &value);
    if (!(_DWORD)v7)
      fdt_performTransactionChange((uint64_t)value);
  }
  if (value)
    CFRelease(value);
  return v7;
}

uint64_t fdt_performTransactionChange(uint64_t a1)
{
  void (*v1)(_QWORD);

  if (!a1)
    return FigSignalErrorAt();
  v1 = *(void (**)(_QWORD))(a1 + 24);
  if (!v1)
    return FigSignalErrorAt();
  v1(*(_QWORD *)(a1 + 40));
  return 0;
}

double figDeferredTransactionInit(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void figDeferredTransactionFinalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
}

CFStringRef figDeferredTransactionCopyFormattedDescription(const void *a1, const __CFDictionary *a2)
{
  const __CFAllocator *v4;

  v4 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, CFSTR("<FigDeferredTransaction %p>"), a1);
}

__CFString *figDeferredTransactionCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;
  __CFString *v3;
  const char *v4;
  const char *v5;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex i;
  const void *ValueAtIndex;
  const __CFString *v11;
  const __CFArray *v12;
  CFIndex v13;
  CFIndex v14;
  CFIndex j;
  const void *v16;
  const __CFString *v17;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v3 = Mutable;
  v4 = "wants";
  if (!*(_BYTE *)(a1 + 48))
    v4 = "doesn't need";
  if (*(_BYTE *)(a1 + 16))
    v5 = "committed";
  else
    v5 = "pending";
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigDeferredTransaction %p, %s CATransaction, is %s"), a1, v4, v5);
  CFStringAppend(v3, CFSTR("\nChanges:\n"));
  v6 = *(const __CFArray **)(a1 + 32);
  if (v6)
  {
    Count = CFArrayGetCount(v6);
    if (Count >= 1)
    {
      v8 = Count;
      for (i = 0; i != v8; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), i);
        v11 = CFCopyDescription(ValueAtIndex);
        CFStringAppend(v3, v11);
        CFStringAppend(v3, CFSTR("\n"));
        if (v11)
          CFRelease(v11);
      }
    }
  }
  CFStringAppend(v3, CFSTR("\nPost commit changes:\n"));
  v12 = *(const __CFArray **)(a1 + 40);
  if (v12)
  {
    v13 = CFArrayGetCount(v12);
    if (v13 >= 1)
    {
      v14 = v13;
      for (j = 0; j != v14; ++j)
      {
        v16 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), j);
        v17 = CFCopyDescription(v16);
        CFStringAppend(v3, v17);
        CFStringAppend(v3, CFSTR("\n"));
        if (v17)
          CFRelease(v17);
      }
    }
  }
  CFStringAppendFormat(v3, 0, CFSTR(">"));
  return v3;
}

void __fdt_commitTransactionOnMainQueue_block_invoke(uint64_t a1)
{
  const void *v2;

  fdt_performPostCommitChanges(*(_QWORD *)(a1 + 32));
  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
}

void __fdt_commitTransactionOnMainQueue_block_invoke_2(uint64_t a1)
{

}

uint64_t figDeferredTransactionChangeClassInitialize()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gFigDeferredTransactionChangeTypeID = result;
  return result;
}

double figDeferredTransactionChangeInit(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

uint64_t figDeferredTransactionChangeFinalize(uint64_t result)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(result + 32);
  if (v1)
    return v1(*(_QWORD *)(result + 40));
  return result;
}

CFStringRef figDeferredTransactionChangeCopyFormattedDescription(const void *a1, const __CFDictionary *a2)
{
  const __CFAllocator *v4;

  v4 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, CFSTR("<FigDeferredTransactionChange %p>"), a1);
}

__CFString *figDeferredTransactionChangeCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigDeferredTransactionChange %p"), a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("\nunknown caller requesting to\n"));
  CFStringAppendFormat(Mutable, 0, CFSTR("\n%p"), *(_QWORD *)(a1 + 24));
  CFStringAppendFormat(Mutable, 0, CFSTR(">"));
  return Mutable;
}

uint64_t FigVTTStyleBlockCreate(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  CFMutableDictionaryRef *DerivedStorage;

  if (!a2)
    return FigSignalErrorAt();
  FigVTTNodeGetClassID();
  v3 = CMDerivedObjectCreate();
  if (!(_DWORD)v3)
  {
    DerivedStorage = (CFMutableDictionaryRef *)CMBaseObjectGetDerivedStorage();
    v3 = FigVTTInitializeNodeBaseStorage(DerivedStorage);
    if (!(_DWORD)v3)
      *a2 = 0;
  }
  return v3;
}

void figVTTStyleBlock_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
    CFRelease(v1);
  FigVTTReleaseNodeBaseStorage(DerivedStorage);
}

CFStringRef figVTTStyleBlock_CopyDebugDesc()
{
  const void *v0;
  CFStringRef v1;

  CMBaseObjectGetDerivedStorage();
  v0 = (const void *)FigCFCopyCompactDescription();
  v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("styleblock: %@"), v0);
  if (v0)
    CFRelease(v0);
  return v1;
}

uint64_t figVTTStyleBlock_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2)
    return FigSignalErrorAt();
  *a2 = 7;
  return 0;
}

uint64_t figVTTStyleBlock_copyChildNodeArray(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  CFTypeRef v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v4 = *(CFTypeRef *)(DerivedStorage + 16);
  if (v4)
    v4 = CFRetain(v4);
  *a2 = v4;
  return 0;
}

uint64_t figVTTStyleBlock_copyNodeDocumentSerialization(const void *a1, __CFString **a2)
{
  const __CFAllocator *v4;
  __CFString *Mutable;
  __CFString *v6;
  uint64_t v7;
  CFIndex i;
  CFIndex Count;
  const void *ValueAtIndex;
  uint64_t v11;
  CFTypeRef cf;
  CFArrayRef theArray;

  cf = 0;
  theArray = 0;
  if (!a2)
  {
    v11 = FigSignalErrorAt();
    v6 = 0;
    goto LABEL_15;
  }
  *a2 = 0;
  v4 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v4, 0);
  v6 = Mutable;
  if (Mutable)
  {
    CFStringAppendFormat(Mutable, 0, CFSTR("%@\n"), CFSTR("STYLE"));
    v7 = FigVTTNodeCopyChildNodeArray((uint64_t)a1, (uint64_t)&theArray);
    if (!(_DWORD)v7)
    {
      for (i = 0; ; ++i)
      {
        Count = (CFIndex)theArray;
        if (theArray)
          Count = CFArrayGetCount(theArray);
        if (i >= Count)
          break;
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        v7 = FigVTTNodeCopyDocumentSerialization((uint64_t)ValueAtIndex, (uint64_t)&cf);
        if ((_DWORD)v7)
          goto LABEL_22;
        CFStringAppendFormat(v6, 0, CFSTR("%@\n"), cf);
      }
      CFStringAppendFormat(v6, 0, CFSTR("\n"));
      v11 = 0;
      *a2 = v6;
      v6 = 0;
      goto LABEL_13;
    }
  }
  else
  {
    v7 = FigSignalErrorAt();
  }
LABEL_22:
  v11 = v7;
LABEL_13:
  if (cf)
    CFRelease(cf);
LABEL_15:
  if (theArray)
    CFRelease(theArray);
  if (v6)
    CFRelease(v6);
  return v11;
}

uint64_t figVTTStyleBlock_setChildNodeArray(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(const void **)(DerivedStorage + 16);
  *(_QWORD *)(DerivedStorage + 16) = a2;
  if (a2)
    CFRetain(a2);
  if (v4)
    CFRelease(v4);
  return 0;
}

uint64_t FigMultivariantPlaylistGetTypeID()
{
  __int128 v1;

  v1 = xmmword_1E2FA9700;
  if (mvp_getTypeID_once != -1)
    dispatch_once_f(&mvp_getTypeID_once, &v1, (dispatch_function_t)spptUtil_registerClass_1);
  return mvp_getTypeID_typeID;
}

uint64_t FigMultivariantPlaylistCreateEmpty(uint64_t a1, _QWORD *a2)
{
  uint64_t Instance;
  _QWORD *v4;
  const __CFAllocator *AllocatorForMedia;
  CFMutableDictionaryRef Mutable;
  const __CFAllocator *v7;
  CFMutableDictionaryRef v8;
  const __CFAllocator *v9;
  CFMutableDictionaryRef v10;
  const __CFAllocator *v11;
  CFMutableDictionaryRef v12;
  const __CFAllocator *v13;
  CFMutableArrayRef v14;
  const __CFAllocator *v15;
  CFMutableArrayRef v16;
  const __CFAllocator *v17;
  CFMutableArrayRef v18;
  const __CFAllocator *v19;
  CFMutableArrayRef v20;
  uint64_t v22;

  if (!a2)
    return FigSignalErrorAt();
  FigMultivariantPlaylistGetTypeID();
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v4 = (_QWORD *)Instance;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4[4] = Mutable;
  if (!Mutable)
    goto LABEL_12;
  v7 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v8 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4[6] = v8;
  if (!v8)
    goto LABEL_12;
  v9 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v10 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4[7] = v10;
  if (!v10)
    goto LABEL_12;
  v11 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v12 = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4[5] = v12;
  if (!v12)
    goto LABEL_12;
  v13 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v14 = CFArrayCreateMutable(v13, 0, MEMORY[0x1E0C9B378]);
  v4[8] = v14;
  if (!v14)
    goto LABEL_12;
  v15 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v16 = CFArrayCreateMutable(v15, 0, MEMORY[0x1E0C9B378]);
  v4[2] = v16;
  if (!v16)
    goto LABEL_12;
  v17 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v18 = CFArrayCreateMutable(v17, 0, MEMORY[0x1E0C9B378]);
  v4[3] = v18;
  if (v18
    && (v19 = (const __CFAllocator *)FigGetAllocatorForMedia(),
        v20 = CFArrayCreateMutable(v19, 0, MEMORY[0x1E0C9B378]),
        (v4[9] = v20) != 0))
  {
    *a2 = v4;
    return 0;
  }
  else
  {
LABEL_12:
    v22 = FigSignalErrorAt();
    CFRelease(v4);
    return v22;
  }
}

uint64_t FigMultivariantPlaylistGetAlternates(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t FigMultivariantPlaylistAddAlternate(uint64_t a1, void *value)
{
  __CFArray *Mutable;
  const __CFAllocator *AllocatorForMedia;

  Mutable = *(__CFArray **)(a1 + 16);
  if (!Mutable)
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(a1 + 16) = Mutable;
    if (!Mutable)
      return FigSignalErrorAt();
  }
  CFArrayAppendValue(Mutable, value);
  return 0;
}

void FigMultivariantPlaylistSetAlternates(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  v2 = *(const void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
}

uint64_t FigMultivariantPlaylistGetMediaSelectionArray(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t FigMultivariantPlaylistAddMediaSelection(uint64_t a1, void *value)
{
  __CFArray *Mutable;
  const __CFAllocator *AllocatorForMedia;

  Mutable = *(__CFArray **)(a1 + 24);
  if (!Mutable)
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(a1 + 24) = Mutable;
    if (!Mutable)
      return FigSignalErrorAt();
  }
  CFArrayAppendValue(Mutable, value);
  return 0;
}

void FigMultivariantPlaylistSetMediaSelectionArray(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  v2 = *(const void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
}

uint64_t FigMultivariantPlaylistGetAudioGroups(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void FigMultivariantPlaylistSetAudioGroups(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  v2 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
}

uint64_t FigMultivariantPlaylistGetMutableAudioGroups(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t FigMultivariantPlaylistGetVideoGroups(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t FigMultivariantPlaylistGetMutableVideoGroups(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

void FigMultivariantPlaylistSetVideoGroups(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  v2 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
}

uint64_t FigMultivariantPlaylistGetSubtitleGroups(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t FigMultivariantPlaylistGetMutableSubtitleGroups(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

void FigMultivariantPlaylistSetSubtitleGroups(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  v2 = *(const void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
}

uint64_t FigMultivariantPlaylistGetClosedCaptionGroups(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

void FigMultivariantPlaylistSetClosedCaptionGroups(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  v2 = *(const void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
}

uint64_t FigMultivariantPlaylistGetMutableClosedCaptionGroups(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

uint64_t FigMultivariantPlaylistGetContentSteeringServerURL(uint64_t a1)
{
  return *(_QWORD *)(a1 + 88);
}

void FigMultivariantPlaylistSetContentSteeringServerURL(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  v2 = *(const void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
}

uint64_t FigMultivariantPlaylistGetContentSteeringInitPathwayID(uint64_t a1)
{
  return *(_QWORD *)(a1 + 96);
}

void FigMultivariantPlaylistSetContentSteeringInitPathwayID(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  v2 = *(const void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
}

uint64_t FigMultivariantPlaylistGetSessionDataSpecifiers(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t FigMultivariantPlaylistAddSessionDataSpecifier(uint64_t a1, void *value)
{
  __CFArray *Mutable;
  const __CFAllocator *AllocatorForMedia;

  Mutable = *(__CFArray **)(a1 + 64);
  if (!Mutable)
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(a1 + 64) = Mutable;
    if (!Mutable)
      return FigSignalErrorAt();
  }
  CFArrayAppendValue(Mutable, value);
  return 0;
}

uint64_t FigMultivariantPlaylistGetContentKeySpecifiers(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t FigMultivariantPlaylistAddContentKeySpecifier(uint64_t a1, const void *a2)
{
  const __CFAllocator *AllocatorForMedia;
  CFMutableArrayRef Mutable;
  uint64_t LastValue;
  uint64_t v7;

  if (!*(_QWORD *)(a1 + 72))
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(a1 + 72) = Mutable;
    if (!Mutable)
      return FigSignalErrorAt();
  }
  LastValue = FigCFArrayGetLastValue();
  if (LastValue)
  {
    v7 = LastValue;
    FigContentKeySpecifierSetNextKey(LastValue, (uint64_t)a2);
    FigContentKeySpecifierSetPreviousKey((uint64_t)a2, v7);
    FigContentKeySpecifierSetNextKey((uint64_t)a2, 0);
  }
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 72), a2);
  return 0;
}

uint64_t FigMultivariantPlaylistGetPlaylistVariables(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80);
}

void FigMultivariantPlaylistSetPlaylistVariables(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  v2 = *(const void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
}

uint64_t FigMultivariantPlaylistGetVersion(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

uint64_t FigMultivariantPlaylistSetVersion(uint64_t result, int a2)
{
  *(_DWORD *)(result + 104) = a2;
  return result;
}

uint64_t FigMultivariantPlaylistHasIndependentSegments(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 108);
}

uint64_t FigMultivariantPlaylistSetHasIndependentSegments(uint64_t result, char a2)
{
  *(_BYTE *)(result + 108) = a2;
  return result;
}

double FigMultivariantPlaylistGetStartTimeValue(uint64_t a1)
{
  return *(double *)(a1 + 112);
}

uint64_t FigMultivariantPlaylistSetStartTimeValue(uint64_t result, double a2)
{
  *(double *)(result + 112) = a2;
  return result;
}

uint64_t FigMultivariantPlaylistHasStartTime(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 120);
}

uint64_t FigMultivariantPlaylistSetHasStartTime(uint64_t result, char a2)
{
  *(_BYTE *)(result + 120) = a2;
  return result;
}

uint64_t FigMultivariantPlaylistIsStartTimePrecise(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 121);
}

uint64_t FigMultivariantPlaylistSetIsStartTimePrecise(uint64_t result, char a2)
{
  *(_BYTE *)(result + 121) = a2;
  return result;
}

uint64_t FigMediaPlaylistGetTypeID()
{
  __int128 v1;

  v1 = xmmword_1E2FA9770;
  if (mp_getTypeID_once != -1)
    dispatch_once_f(&mp_getTypeID_once, &v1, (dispatch_function_t)spptUtil_registerClass_1);
  return mp_getTypeID_typeID;
}

uint64_t FigMediaPlaylistCreateEmpty(uint64_t a1, _QWORD *a2)
{
  uint64_t Instance;
  _QWORD *v4;
  const __CFAllocator *AllocatorForMedia;
  CFMutableArrayRef Mutable;
  const __CFAllocator *v7;
  CFMutableArrayRef v8;
  const __CFAllocator *v9;
  CFMutableArrayRef v10;
  const __CFAllocator *v11;
  CFMutableArrayRef v12;
  const __CFAllocator *v13;
  CFMutableArrayRef v14;
  const __CFAllocator *v15;
  CFMutableArrayRef v16;
  const __CFAllocator *v17;
  const __CFAllocator *v18;
  uint64_t v20;

  if (!a2)
    return FigSignalErrorAt();
  FigMediaPlaylistGetTypeID();
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v4 = (_QWORD *)Instance;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
  v4[2] = Mutable;
  if (!Mutable)
    goto LABEL_12;
  v7 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v8 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E0C9B378]);
  v4[3] = v8;
  if (!v8)
    goto LABEL_12;
  v9 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v10 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E0C9B378]);
  v4[4] = v10;
  if (!v10)
    goto LABEL_12;
  v11 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v12 = CFArrayCreateMutable(v11, 0, MEMORY[0x1E0C9B378]);
  v4[5] = v12;
  if (!v12)
    goto LABEL_12;
  v13 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v14 = CFArrayCreateMutable(v13, 0, MEMORY[0x1E0C9B378]);
  v4[6] = v14;
  if (!v14)
    goto LABEL_12;
  v15 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v16 = CFArrayCreateMutable(v15, 0, MEMORY[0x1E0C9B378]);
  v4[7] = v16;
  if (v16
    && (v17 = (const __CFAllocator *)FigGetAllocatorForMedia(),
        v4[26] = CFDictionaryCreateMutable(v17, 0, &parsedIndexKeyCallbacks, MEMORY[0x1E0C9B3A0]),
        v4[7])
    && (v18 = (const __CFAllocator *)FigGetAllocatorForMedia(),
        v4[27] = CFDictionaryCreateMutable(v18, 0, &parsedIndexKeyCallbacks, MEMORY[0x1E0C9B3A0]),
        v4[7]))
  {
    *a2 = v4;
    return 0;
  }
  else
  {
LABEL_12:
    v20 = FigSignalErrorAt();
    CFRelease(v4);
    return v20;
  }
}

uint64_t FigMediaPlaylistGetRenditionReportSpecifiers(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t FigMediaPlaylistAddRenditionReportSpecifier(uint64_t a1, void *value)
{
  __CFArray *Mutable;
  const __CFAllocator *AllocatorForMedia;

  Mutable = *(__CFArray **)(a1 + 16);
  if (!Mutable)
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(a1 + 16) = Mutable;
    if (!Mutable)
      return FigSignalErrorAt();
  }
  CFArrayAppendValue(Mutable, value);
  return 0;
}

void FigMediaPlaylistSetRenditionReportSpecifiers(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  v2 = *(const void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
}

uint64_t FigMediaPlaylistGetDateRangeSpecifiers(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t FigMediaPlaylistGetMutableDateRangeSpecifiers(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t FigMediaPlaylistAddDateRangeSpecifier(uint64_t a1, void *value)
{
  __CFArray *Mutable;
  const __CFAllocator *AllocatorForMedia;

  Mutable = *(__CFArray **)(a1 + 24);
  if (!Mutable)
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(a1 + 24) = Mutable;
    if (!Mutable)
      return FigSignalErrorAt();
  }
  CFArrayAppendValue(Mutable, value);
  return 0;
}

void FigMediaPlaylistSetDateRangeSpecifiers(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 24);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t FigMediaPlaylistGetContentKeySpecifiers(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t FigMediaPlaylistAddContentKeySpecifier(uint64_t a1, const void *a2)
{
  const __CFAllocator *AllocatorForMedia;
  CFMutableArrayRef Mutable;
  uint64_t LastValue;
  uint64_t v7;

  if (!*(_QWORD *)(a1 + 32))
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(a1 + 32) = Mutable;
    if (!Mutable)
      return FigSignalErrorAt();
  }
  LastValue = FigCFArrayGetLastValue();
  if (LastValue)
  {
    v7 = LastValue;
    FigContentKeySpecifierSetNextKey(LastValue, (uint64_t)a2);
    FigContentKeySpecifierSetPreviousKey((uint64_t)a2, v7);
    FigContentKeySpecifierSetNextKey((uint64_t)a2, 0);
  }
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), a2);
  return 0;
}

uint64_t FigMediaPlaylistGetMediaSegmentSpecifiers(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t FigMediaPlaylistAddMediaSegmentSpecifier(uint64_t a1, const void *a2)
{
  const __CFAllocator *AllocatorForMedia;
  CFMutableArrayRef Mutable;
  uint64_t LastValue;
  uint64_t v7;

  if (!*(_QWORD *)(a1 + 40))
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(a1 + 40) = Mutable;
    if (!Mutable)
      return FigSignalErrorAt();
  }
  LastValue = FigCFArrayGetLastValue();
  if (LastValue)
  {
    v7 = LastValue;
    FigMediaSegmentSpecifierSetNextSegment(LastValue, (uint64_t)a2);
    FigMediaSegmentSpecifierSetPreviousSegment((uint64_t)a2, v7);
    FigMediaSegmentSpecifierSetNextSegment((uint64_t)a2, 0);
  }
  if (FigMediaSegmentSpecifierGetDateStamp((uint64_t)a2))
    ++*(_QWORD *)(a1 + 168);
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 40), a2);
  return 0;
}

uint64_t FigMediaPlaylistSetDateStampCount(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 168) = a2;
  return result;
}

uint64_t FigMediaPlaylistGetDateStampCount(uint64_t a1)
{
  return *(_QWORD *)(a1 + 168);
}

uint64_t FigMediaPlaylistGetMapSegmentSpecifiers(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t FigMediaPlaylistAddMapSegmentSpecifier(uint64_t a1, const void *a2)
{
  const __CFAllocator *AllocatorForMedia;
  CFMutableArrayRef Mutable;
  uint64_t LastValue;
  uint64_t v7;

  if (!*(_QWORD *)(a1 + 48))
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(a1 + 48) = Mutable;
    if (!Mutable)
      return FigSignalErrorAt();
  }
  LastValue = FigCFArrayGetLastValue();
  if (LastValue)
  {
    v7 = LastValue;
    FigMediaSegmentSpecifierSetNextSegment(LastValue, (uint64_t)a2);
    FigMediaSegmentSpecifierSetPreviousSegment((uint64_t)a2, v7);
    FigMediaSegmentSpecifierSetNextSegment((uint64_t)a2, 0);
  }
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 48), a2);
  return 0;
}

uint64_t FigMediaPlaylistGetDateEntryArray(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

uint64_t FigMediaPlaylistAddDateEntryArray(uint64_t a1, void *value)
{
  __CFArray *Mutable;
  const __CFAllocator *AllocatorForMedia;

  Mutable = *(__CFArray **)(a1 + 56);
  if (!Mutable)
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(a1 + 56) = Mutable;
    if (!Mutable)
      return FigSignalErrorAt();
  }
  CFArrayAppendValue(Mutable, value);
  return 0;
}

void FigMediaPlaylistSetDateEntryArray(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  v2 = *(const void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
}

uint64_t FigMediaPlaylistGetParseDate(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void FigMediaPlaylistSetParseDate(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  v2 = *(const void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
}

uint64_t FigMediaPlaylistGetPreloadHint(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

void FigMediaPlaylistSetPreloadHint(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  v2 = *(const void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
}

uint64_t FigMediaPlaylistGetPreloadMapHint(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80);
}

void FigMediaPlaylistSetPreloadMapHint(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  v2 = *(const void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
}

double FigMediaPlaylistGetPlaylistActiveDurationSecs(uint64_t a1)
{
  return *(double *)(a1 + 88);
}

uint64_t FigMediaPlaylistSetPlaylistActiveDurationSecs(uint64_t result, double a2)
{
  *(double *)(result + 88) = a2;
  return result;
}

double FigMediaPlaylistGetPartTargetDuration(uint64_t a1)
{
  return *(double *)(a1 + 96);
}

uint64_t FigMediaPlaylistSetPartTargetDuration(uint64_t result, double a2)
{
  *(double *)(result + 96) = a2;
  return result;
}

double FigMediaPlaylistGetHoldBackDuration(uint64_t a1)
{
  return *(double *)(a1 + 104);
}

uint64_t FigMediaPlaylistSetHoldBackDuration(uint64_t result, double a2)
{
  *(double *)(result + 104) = a2;
  *(_BYTE *)(result + 188) = a2 > 0.0;
  return result;
}

uint64_t FigMediaPlaylistHasHoldBackDuration(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 188);
}

double FigMediaPlaylistGetPartHoldBackDuration(uint64_t a1)
{
  return *(double *)(a1 + 112);
}

uint64_t FigMediaPlaylistSetPartHoldBackDuration(uint64_t result, double a2)
{
  *(double *)(result + 112) = a2;
  *(_BYTE *)(result + 189) = a2 > 0.0;
  return result;
}

uint64_t FigMediaPlaylistHasPartHoldBackDuration(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 189);
}

double FigMediaPlaylistGetSkipDeltaBoundary(uint64_t a1)
{
  return *(double *)(a1 + 120);
}

uint64_t FigMediaPlaylistSetSkipDeltaBoundary(uint64_t result, double a2)
{
  *(double *)(result + 120) = a2;
  *(_BYTE *)(result + 190) = a2 > 0.0;
  return result;
}

uint64_t FigMediaPlaylistHasSkipDeltaBoundary(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 190);
}

double FigMediaPlaylistGetStartTimeValue(uint64_t a1)
{
  return *(double *)(a1 + 128);
}

uint64_t FigMediaPlaylistSetStartTimeValue(uint64_t result, double a2)
{
  *(double *)(result + 128) = a2;
  return result;
}

double FigMediaPlaylistGetAvgSegmentDuration(uint64_t a1)
{
  return *(double *)(a1 + 136);
}

uint64_t FigMediaPlaylistSetAvgSegmentDuration(uint64_t result, double a2)
{
  *(double *)(result + 136) = a2;
  return result;
}

double FigMediaPlaylistGetMaxSegmentDuration(uint64_t a1)
{
  return *(double *)(a1 + 144);
}

uint64_t FigMediaPlaylistSetMaxSegmentDuration(uint64_t result, double a2)
{
  *(double *)(result + 144) = a2;
  return result;
}

uint64_t FigMediaPlaylistGetMediaEntryCount(uint64_t a1)
{
  return *(_QWORD *)(a1 + 152);
}

uint64_t FigMediaPlaylistSetMediaEntryCount(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 152) = a2;
  return result;
}

uint64_t FigMediaPlaylistGetCryptKeyCount(uint64_t a1)
{
  return *(_QWORD *)(a1 + 160);
}

uint64_t FigMediaPlaylistSetCryptKeyCount(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 160) = a2;
  return result;
}

uint64_t FigMediaPlaylistGetTargetDuration(uint64_t a1)
{
  return *(unsigned int *)(a1 + 176);
}

uint64_t FigMediaPlaylistSetTargetDuration(uint64_t result, int a2)
{
  *(_DWORD *)(result + 176) = a2;
  return result;
}

uint64_t FigMediaPlaylistGetVersion(uint64_t a1)
{
  return *(unsigned int *)(a1 + 180);
}

uint64_t FigMediaPlaylistSetVersion(uint64_t result, int a2)
{
  *(_DWORD *)(result + 180) = a2;
  return result;
}

uint64_t FigMediaPlaylistGetPlaylistType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 184);
}

uint64_t FigMediaPlaylistSetPlaylistType(uint64_t result, int a2)
{
  *(_DWORD *)(result + 184) = a2;
  return result;
}

uint64_t FigMediaPlaylistHasEndTag(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 191);
}

uint64_t FigMediaPlaylistSetHasEndTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 191) = a2;
  return result;
}

uint64_t FigMediaPlaylistHasMediaSequence(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 192);
}

uint64_t FigMediaPlaylistSetHasMediaSequence(uint64_t result, char a2)
{
  *(_BYTE *)(result + 192) = a2;
  return result;
}

uint64_t FigMediaPlaylistHasOnlyIFrames(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 193);
}

uint64_t FigMediaPlaylistSetHasOnlyIFrames(uint64_t result, char a2)
{
  *(_BYTE *)(result + 193) = a2;
  return result;
}

uint64_t FigMediaPlaylistHasStartTime(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 194);
}

uint64_t FigMediaPlaylistSetHasStartTime(uint64_t result, char a2)
{
  *(_BYTE *)(result + 194) = a2;
  return result;
}

uint64_t FigMediaPlaylistIsStartTimePrecise(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 195);
}

uint64_t FigMediaPlaylistSetIsStartTimePrecise(uint64_t result, char a2)
{
  *(_BYTE *)(result + 195) = a2;
  return result;
}

uint64_t FigMediaPlaylistHasIndependentSegments(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 196);
}

uint64_t FigMediaPlaylistSetHasIndependentSegments(uint64_t result, char a2)
{
  *(_BYTE *)(result + 196) = a2;
  return result;
}

uint64_t FigMediaPlaylistHasIndependentParts(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 197);
}

uint64_t FigMediaPlaylistSetHasIndependentParts(uint64_t result, char a2)
{
  *(_BYTE *)(result + 197) = a2;
  return result;
}

uint64_t FigMediaPlaylistHasDiscontinuitySequence(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 198);
}

uint64_t FigMediaPlaylistSetHasDiscontinuitySequence(uint64_t result, char a2)
{
  *(_BYTE *)(result + 198) = a2;
  return result;
}

uint64_t FigMediaPlaylistHasPartTag(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 199);
}

uint64_t FigMediaPlaylistSetHasPartTag(uint64_t result, char a2)
{
  *(_BYTE *)(result + 199) = a2;
  return result;
}

uint64_t FigMediaPlaylistDoesServerSupportsBlockingReload(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 200);
}

uint64_t FigMediaPlaylistSetDoesServerSupportsBlockingReload(uint64_t result, char a2)
{
  *(_BYTE *)(result + 200) = a2;
  return result;
}

uint64_t FigMediaPlaylistCanSkipDATERANGES(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 201);
}

uint64_t FigMediaPlaylistSetCanSkipDATERANGES(uint64_t result, char a2)
{
  *(_BYTE *)(result + 201) = a2;
  return result;
}

_BYTE *FigMediaPlaylistRemoveContentKeySpecifier(_BYTE *result, uint64_t a2)
{
  _BYTE *v3;
  __CFDictionary *v4;
  const void *CryptKeyParsedIndex;
  uint64_t PreviousKey;
  uint64_t NextKey;

  if (a2)
  {
    v3 = result;
    FigMediaPlaylistRemoveContentKeySpecifierRemote(result, a2);
    if (*((_QWORD *)v3 + 27) && FigContentKeySpecifierGetCryptKeyParsedIndex(a2))
    {
      v4 = (__CFDictionary *)*((_QWORD *)v3 + 27);
      CryptKeyParsedIndex = (const void *)FigContentKeySpecifierGetCryptKeyParsedIndex(a2);
      CFDictionaryRemoveValue(v4, CryptKeyParsedIndex);
    }
    PreviousKey = FigContentKeySpecifierGetPreviousKey(a2);
    NextKey = FigContentKeySpecifierGetNextKey(a2);
    if (PreviousKey)
      FigContentKeySpecifierSetNextKey(PreviousKey, NextKey);
    if (NextKey)
      FigContentKeySpecifierSetPreviousKey(NextKey, PreviousKey);
    result = (_BYTE *)*((_QWORD *)v3 + 4);
    if (result)
      return (_BYTE *)FigCFArrayRemoveLastElementOfValue();
  }
  return result;
}

uint64_t FigMediaPlaylistRemoveMediaSegmentSpecifier(uint64_t a1, uint64_t a2)
{
  uint64_t PreviousSegment;
  uint64_t NextSegment;
  uint64_t result;

  FigMediaPlaylistRemoveMediaSegmentSpecifierRemote((_BYTE *)a1, a2);
  PreviousSegment = FigMediaSegmentSpecifierGetPreviousSegment(a2);
  NextSegment = FigMediaSegmentSpecifierGetNextSegment(a2);
  if (PreviousSegment)
    FigMediaSegmentSpecifierSetNextSegment(PreviousSegment, NextSegment);
  if (NextSegment)
    FigMediaSegmentSpecifierSetPreviousSegment(NextSegment, PreviousSegment);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return FigCFArrayRemoveLastElementOfValue();
  return result;
}

uint64_t FigMediaPlaylistRemovePartSegmentSpecifier(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  FigMediaPlaylistRemovePartSegmentSpecifierRemote(a1, a2, a3);
  return FigMediaSegmentSpecifierRemovePartialSegment(a2, a3);
}

uint64_t FigMediaPlaylistRemoveMapSegmentSpecifier(uint64_t a1, uint64_t a2)
{
  uint64_t PreviousSegment;
  uint64_t NextSegment;
  uint64_t result;

  FigMediaPlaylistRemoveMapSegmentSpecifierRemote((_BYTE *)a1, a2);
  PreviousSegment = FigMediaSegmentSpecifierGetPreviousSegment(a2);
  NextSegment = FigMediaSegmentSpecifierGetNextSegment(a2);
  if (PreviousSegment)
    FigMediaSegmentSpecifierSetNextSegment(PreviousSegment, NextSegment);
  if (NextSegment)
    FigMediaSegmentSpecifierSetPreviousSegment(NextSegment, PreviousSegment);
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return FigCFArrayRemoveLastElementOfValue();
  return result;
}

uint64_t FigMediaPlaylistGetCryptKeyParsedIndexToEntryMap(uint64_t a1)
{
  return *(_QWORD *)(a1 + 216);
}

void FigMediaPlaylistAddToCryptKeyParsedIndexToEntryMap(uint64_t a1, const void *a2, const void *a3)
{
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 216), a2, a3);
}

uint64_t FigMediaPlaylistGetMediaParsedIndexToEntryMap(uint64_t a1)
{
  return *(_QWORD *)(a1 + 208);
}

void FigMediaPlaylistAddToMediaParsedIndexToEntryMap(uint64_t a1, const void *a2, const void *a3)
{
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 208), a2, a3);
}

uint64_t FigMediaPlaylistGetXPCClientObject(uint64_t a1)
{
  return *(_QWORD *)(a1 + 224);
}

void FigMediaPlaylistSetXPCClientObject(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  v2 = *(const void **)(a1 + 224);
  *(_QWORD *)(a1 + 224) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
}

uint64_t FigMediaPlaylistGetMessagingDelayTime(uint64_t a1)
{
  return *(_QWORD *)(a1 + 232);
}

uint64_t FigMediaPlaylistSetMessagingDelayTime(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 232) = a2;
  return result;
}

void mvp_finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;

  v2 = (const void *)a1[2];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[3];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[8];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[9];
  if (v5)
    CFRelease(v5);
  v6 = (const void *)a1[10];
  if (v6)
    CFRelease(v6);
  v7 = (const void *)a1[4];
  if (v7)
    CFRelease(v7);
  v8 = (const void *)a1[5];
  if (v8)
    CFRelease(v8);
  v9 = (const void *)a1[6];
  if (v9)
    CFRelease(v9);
  v10 = (const void *)a1[7];
  if (v10)
    CFRelease(v10);
  v11 = (const void *)a1[11];
  if (v11)
    CFRelease(v11);
  v12 = (const void *)a1[12];
  if (v12)
    CFRelease(v12);
}

CFStringRef mvp_copyDesc(uint64_t a1)
{
  const __CFAllocator *AllocatorForMedia;

  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("<FigMultivariantPlaylist %p>"), a1);
}

uint64_t spptUtil_registerClass_1(uint64_t a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  **(_QWORD **)(a1 + 8) = result;
  return result;
}

void mp_finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;

  v2 = (const void *)a1[2];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[3];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[4];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[5];
  if (v5)
    CFRelease(v5);
  v6 = (const void *)a1[6];
  if (v6)
    CFRelease(v6);
  v7 = (const void *)a1[9];
  if (v7)
    CFRelease(v7);
  v8 = (const void *)a1[10];
  if (v8)
    CFRelease(v8);
  v9 = (const void *)a1[7];
  if (v9)
    CFRelease(v9);
  v10 = (const void *)a1[8];
  if (v10)
    CFRelease(v10);
  v11 = (const void *)a1[26];
  if (v11)
    CFRelease(v11);
  v12 = (const void *)a1[27];
  if (v12)
    CFRelease(v12);
  v13 = (const void *)a1[28];
  if (v13)
    CFRelease(v13);
}

CFStringRef mp_copyDesc(uint64_t a1)
{
  const __CFAllocator *AllocatorForMedia;

  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("<FigMediaPlaylist %p>"), a1);
}

CFStringRef streamPlaylistParser_parsedIndexKeyCopyDescriptionCallBack(uint64_t a1)
{
  const __CFAllocator *AllocatorForMedia;

  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("%d"), a1);
}

uint64_t FigVirtualDisplaySinkConduitCreate(uint64_t a1, __int128 *a2, const __CFDictionary *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t DerivedStorage;
  const void *Value;
  CFTypeID v10;
  CFTypeID v11;
  const __CFDictionary *v12;
  double *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  NSObject *global_queue;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  CGSize size;

  if (!a4)
    return 4294954516;
  FigVirtualDisplaySinkGetClassID();
  v7 = CMDerivedObjectCreate();
  if (!(_DWORD)v7)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_OWORD *)(DerivedStorage + 88) = xmmword_1932F7320;
    *(_WORD *)(DerivedStorage + 112) = 256;
    *(_QWORD *)(DerivedStorage + 116) = 60;
    if (a3)
    {
      Value = CFDictionaryGetValue(a3, CFSTR("displayInfo"));
      FigCFDictionaryGetInt32IfPresent();
      if (Value && (v10 = CFGetTypeID(Value), v10 == CFDictionaryGetTypeID())
        || (Value = CFDictionaryGetValue(a3, CFSTR("deviceInfo"))) != 0)
      {
        v11 = CFGetTypeID(Value);
        if (v11 == CFDictionaryGetTypeID())
        {
          v12 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)Value, CFSTR("displaySizeInPixels"));
          if (v12)
          {
            v13 = (double *)MEMORY[0x1E0C9D820];
            size = (CGSize)*MEMORY[0x1E0C9D820];
            CGSizeMakeWithDictionaryRepresentation(v12, &size);
            if (size.width != *v13 || size.height != v13[1])
              *(CGSize *)(DerivedStorage + 88) = size;
          }
          v14 = CFDictionaryGetValue((CFDictionaryRef)Value, CFSTR("displayUUID"));
          *(_QWORD *)(DerivedStorage + 64) = v14;
          if (v14)
            CFRetain(v14);
          v15 = CFDictionaryGetValue((CFDictionaryRef)Value, CFSTR("displayName"));
          *(_QWORD *)(DerivedStorage + 72) = v15;
          if (v15)
            CFRetain(v15);
          v16 = CFDictionaryGetValue((CFDictionaryRef)Value, CFSTR("displayEDID"));
          *(_QWORD *)(DerivedStorage + 80) = v16;
          if (v16)
            CFRetain(v16);
          FigCFDictionaryGetBooleanIfPresent();
          FigCFDictionaryGetBooleanIfPresent();
          v17 = CFDictionaryGetValue((CFDictionaryRef)Value, CFSTR("HDRInfo"));
          *(_QWORD *)(DerivedStorage + 104) = v17;
          if (v17)
            CFRetain(v17);
          FigCFDictionaryGetInt32IfPresent();
          FigCFDictionaryGetInt32IfPresent();
        }
      }
      if (!*(_QWORD *)(DerivedStorage + 104))
      {
        v18 = CFDictionaryGetValue(a3, CFSTR("HDRInfo"));
        *(_QWORD *)(DerivedStorage + 104) = v18;
        if (v18)
          CFRetain(v18);
      }
    }
    if (!*(_QWORD *)(DerivedStorage + 64))
      *(_QWORD *)(DerivedStorage + 64) = FVDUtilsCreateDisplayUUID();
    global_queue = dispatch_get_global_queue(0, 0);
    *(_QWORD *)(DerivedStorage + 56) = global_queue;
    dispatch_retain(global_queue);
    if (a2)
    {
      v20 = *a2;
      v21 = a2[1];
      v22 = a2[2];
      *(_QWORD *)(DerivedStorage + 48) = *((_QWORD *)a2 + 6);
      *(_OWORD *)(DerivedStorage + 16) = v21;
      *(_OWORD *)(DerivedStorage + 32) = v22;
      *(_OWORD *)DerivedStorage = v20;
    }
    v7 = 0;
    *a4 = 0;
  }
  return v7;
}

void conduit_finalize()
{
  _QWORD *DerivedStorage;
  _QWORD *v1;
  void (*v2)(_QWORD);
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  NSObject *v7;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = DerivedStorage;
  v2 = (void (*)(_QWORD))DerivedStorage[3];
  if (v2)
    v2(*DerivedStorage);
  v3 = (const void *)v1[8];
  if (v3)
  {
    CFRelease(v3);
    v1[8] = 0;
  }
  v4 = (const void *)v1[9];
  if (v4)
  {
    CFRelease(v4);
    v1[9] = 0;
  }
  v5 = (const void *)v1[10];
  if (v5)
  {
    CFRelease(v5);
    v1[10] = 0;
  }
  v6 = (const void *)v1[13];
  if (v6)
  {
    CFRelease(v6);
    v1[13] = 0;
  }
  v7 = v1[7];
  if (v7)
  {
    dispatch_release(v7);
    v1[7] = 0;
  }
}

uint64_t conduit_copyProperty(int a1, CFTypeRef cf1, uint64_t a3, _QWORD *a4)
{
  CFTypeRef v5;
  uint64_t result;

  if (!CFEqual(cf1, CFSTR("Type")))
    return 4294954512;
  v5 = CFRetain(CFSTR("Conduit"));
  result = 0;
  *a4 = v5;
  return result;
}

uint64_t conduit_setProperty()
{
  return 4294954512;
}

uint64_t conduit_start(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *DerivedStorage;
  _QWORD *v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  NSObject *v8;
  _QWORD v10[5];
  int v11;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v5 = DerivedStorage;
  v6 = (uint64_t (*)(_QWORD))DerivedStorage[1];
  if (!v6)
  {
    v7 = 0;
    if (!a3)
      return v7;
    goto LABEL_3;
  }
  v7 = v6(*DerivedStorage);
  if (a3)
  {
LABEL_3:
    v8 = v5[7];
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 0x40000000;
    v10[2] = __conduit_start_block_invoke;
    v10[3] = &unk_1E2FA9860;
    v10[4] = a3;
    v11 = v7;
    dispatch_async(v8, v10);
  }
  return v7;
}

uint64_t conduit_stop(uint64_t a1, uint64_t a2)
{
  _QWORD *DerivedStorage;
  _QWORD *v4;
  void (*v5)(_QWORD);
  NSObject *v6;
  _QWORD block[5];

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v4 = DerivedStorage;
  v5 = (void (*)(_QWORD))DerivedStorage[2];
  if (v5)
    v5(*DerivedStorage);
  if (a2)
  {
    v6 = v4[7];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __conduit_stop_block_invoke;
    block[3] = &unk_1E2FA9888;
    block[4] = a2;
    dispatch_async(v6, block);
  }
  return 0;
}

uint64_t conduit_pushFrame(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _QWORD *DerivedStorage;
  void (*v22)(_QWORD, uint64_t, uint64_t, double, double, double, double, double, double, double, double);

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v22 = (void (*)(_QWORD, uint64_t, uint64_t, double, double, double, double, double, double, double, double))DerivedStorage[4];
  if (v22)
    v22(*DerivedStorage, a10, a11, a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t conduit_suspend()
{
  return 0;
}

uint64_t conduit_resume()
{
  return 0;
}

uint64_t conduit_getPropertyAsync(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  __CFDictionary *Mutable;
  const __CFDictionary *v8;
  const void *Value;
  uint64_t v10;
  int v11;
  __CFDictionary *v12;
  const void **v13;
  const void *v14;
  const void *v15;
  NSObject *v16;
  _QWORD block[6];
  int v19;
  CFTypeRef cf;
  __CFDictionary *v21;
  __CFDictionary *v22;
  __CFArray *v23;
  __CFArray *v24;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("displayInfo")))
  {
    v23 = 0;
    v24 = 0;
    v21 = 0;
    v22 = 0;
    cf = 0;
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v8 = *(const __CFDictionary **)(DerivedStorage + 104);
    if (v8)
    {
      Value = CFDictionaryGetValue(v8, CFSTR("HDRMode"));
      FigDisplayModes_BuildColorAndTimingModes((int)*(double *)(DerivedStorage + 88), (int)*(double *)(DerivedStorage + 96), *(unsigned __int8 *)(DerivedStorage + 112), *(_DWORD *)(DerivedStorage + 116), 0x64u, 0, 0, 0, &v21);
      FigDisplayModes_BuildColorModesFromHDRMode(Value, *(const __CFDictionary **)(DerivedStorage + 104), 0, 0x64u, &v22);
    }
    else
    {
      FigDisplayModes_BuildColorAndTimingModes((int)*(double *)(DerivedStorage + 88), (int)*(double *)(DerivedStorage + 96), *(unsigned __int8 *)(DerivedStorage + 112), *(_DWORD *)(DerivedStorage + 116), 0x64u, 0, 0, &v22, &v21);
    }
    if (v22 && v21)
    {
      v11 = *(_DWORD *)(DerivedStorage + 120);
      if (v11 >= 1)
      {
        FigDisplayModes_CopyTimingModeAppendingPreferredUIScale(v21, v11, (CFMutableDictionaryRef *)&cf);
        v12 = v21;
        v21 = (__CFDictionary *)cf;
        if (cf)
          CFRetain(cf);
        if (v12)
          CFRelease(v12);
      }
      FigDisplayModes_CreateColorAndTimingModesArraysWithPreferredMode(v22, v21, &v24, &v23);
      if (v24 && v23)
      {
        CFDictionarySetValue(Mutable, CFSTR("colorModes"), v24);
        CFDictionarySetValue(Mutable, CFSTR("timingModes"), v23);
      }
    }
    CFDictionarySetValue(Mutable, CFSTR("displayUUID"), *(const void **)(DerivedStorage + 64));
    v13 = (const void **)MEMORY[0x1E0C9AE50];
    if (!*(_BYTE *)(DerivedStorage + 113))
      v13 = (const void **)MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(Mutable, CFSTR("rotationSupport"), *v13);
    v14 = *(const void **)(DerivedStorage + 72);
    if (v14)
      CFDictionarySetValue(Mutable, CFSTR("displayName"), v14);
    v15 = *(const void **)(DerivedStorage + 80);
    if (v15)
      CFDictionarySetValue(Mutable, CFSTR("displayEDID"), v15);
    if (cf)
      CFRelease(cf);
    if (v22)
      CFRelease(v22);
    if (v21)
      CFRelease(v21);
    if (v24)
      CFRelease(v24);
    if (v23)
      CFRelease(v23);
    v10 = 0;
  }
  else
  {
    Mutable = 0;
    v10 = 4294954512;
  }
  v16 = *(NSObject **)(DerivedStorage + 56);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __conduit_getPropertyAsync_block_invoke;
  block[3] = &unk_1E2FA98B0;
  v19 = v10;
  block[4] = a4;
  block[5] = Mutable;
  dispatch_async(v16, block);
  return v10;
}

uint64_t conduit_perform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *DerivedStorage;
  void (*v6)(_QWORD);
  NSObject *v7;
  _QWORD v9[5];
  int v10;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
  {
    v6 = (void (*)(_QWORD))DerivedStorage[6];
    if (v6)
      v6(*DerivedStorage);
  }
  if (a4)
  {
    v7 = DerivedStorage[7];
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 0x40000000;
    v9[2] = __conduit_perform_block_invoke;
    v9[3] = &unk_1E2FA98D8;
    v9[4] = a4;
    v10 = 0;
    dispatch_async(v7, v9);
  }
  return 0;
}

uint64_t conduit_setDispatchQueue(uint64_t a1, NSObject *global_queue)
{
  uint64_t DerivedStorage;
  NSObject *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!global_queue)
    global_queue = dispatch_get_global_queue(0, 0);
  dispatch_retain(global_queue);
  v4 = *(NSObject **)(DerivedStorage + 56);
  if (v4)
    dispatch_release(v4);
  *(_QWORD *)(DerivedStorage + 56) = global_queue;
  return 0;
}

uint64_t conduit_setEventHandler()
{
  return 0;
}

uint64_t conduit_shouldDropFrame()
{
  _QWORD *DerivedStorage;
  uint64_t (*v1)(_QWORD);

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = (uint64_t (*)(_QWORD))DerivedStorage[5];
  if (v1)
    return v1(*DerivedStorage);
  else
    return 0;
}

uint64_t __conduit_start_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

uint64_t __conduit_stop_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void __conduit_getPropertyAsync_block_invoke(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v2 + 16))(v2, *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
}

uint64_t __conduit_perform_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40), 0);
}

uint64_t FigVirtualFramebufferServerStart()
{
  uint64_t v0;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  _QWORD block[17];

  block[16] = *MEMORY[0x1E0C80C00];
  if (!FigVirtualFramebufferServerLivesInMediaProcess())
    return 0;
  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v6 = 0;
  if (vfbserv_getProcessType_once != -1)
    dispatch_once(&vfbserv_getProcessType_once, &__block_literal_global_30_3);
  if (vfbserv_getProcessType_procType == 1 || vfbserv_getProcessType_procType == 3)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __vfbserv_start_block_invoke;
    block[3] = &unk_1E2FA99A8;
    block[4] = &v3;
    if (vfbserv_start_once != -1)
      dispatch_once(&vfbserv_start_once, block);
    v0 = *((unsigned int *)v4 + 6);
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v0 = 4294954514;
    *((_DWORD *)v4 + 6) = -12782;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t FigVirtualFramebufferServerGetMaxCount()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (!FigVirtualFramebufferServerLivesInMediaProcess())
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
  if (vfbserv_getProcessType_once != -1)
    dispatch_once(&vfbserv_getProcessType_once, &__block_literal_global_30_3);
  if (vfbserv_getProcessType_procType == 3)
    return 1;
  if (vfbserv_getProcessType_procType != 2)
    return vfbserv_getProcessType_procType == 1;
  if (vfblocal_getFramebufMaxCount_once != -1)
    dispatch_once(&vfblocal_getFramebufMaxCount_once, &__block_literal_global_35);
  return vfblocal_getFramebufMaxCount_framebufMaxCount;
}

uint64_t FigVirtualFramebufferServerGetFramebufs(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t RemoteFramebufs;
  NSObject *v7;
  uint64_t v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v10;

  if (!FigVirtualFramebufferServerLivesInMediaProcess())
    goto LABEL_22;
  if (vfbserv_getProcessType_once != -1)
    dispatch_once(&vfbserv_getProcessType_once, &__block_literal_global_30_3);
  if (vfbserv_getProcessType_procType != 3)
  {
    if (vfbserv_getProcessType_procType == 2)
    {
      if (vfblocal_getFramebufMaxCount_once != -1)
        dispatch_once(&vfblocal_getFramebufMaxCount_once, &__block_literal_global_35);
      v8 = vfblocal_getFramebufMaxCount_framebufMaxCount;
      if (vfblocal_getFramebufMaxCount_framebufMaxCount > a2)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        goto LABEL_17;
      }
      RemoteFramebufs = FigVirtualFramebufferGetRemoteFramebufs(a1, vfblocal_getFramebufMaxCount_framebufMaxCount);
      if (RemoteFramebufs)
      {
        v8 = RemoteFramebufs;
        v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
        goto LABEL_17;
      }
      goto LABEL_22;
    }
    if (vfbserv_getProcessType_procType != 1)
      return 0;
  }
  if (a2)
  {
    if (vfbintern_getFramebuf_once != -1)
      dispatch_once(&vfbintern_getFramebuf_once, &__block_literal_global_41);
    v4 = vfbintern_getFramebuf_framebuf;
    *a1 = vfbintern_getFramebuf_framebuf;
    if (!v4)
    {
LABEL_22:
      v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 0;
    }
  }
  v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  v8 = 1;
LABEL_17:
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return v8;
}

uint64_t FigVirtualFramebufferServerSourceScreenCreateIOS(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v5;
  uint64_t DerivedStorage;
  NSObject *v7;
  NSObject *v8;

  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (!FigVirtualFramebufferServerLivesInMediaProcess())
    return 4294954514;
  if (!a3)
    return 4294955226;
  if (vfbserv_getProcessType_once != -1)
    dispatch_once(&vfbserv_getProcessType_once, &__block_literal_global_30_3);
  if (vfbserv_getProcessType_procType != 1 && vfbserv_getProcessType_procType != 3)
  {
    v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954514;
  }
  FigVirtualDisplaySourceGetClassID();
  v5 = CMDerivedObjectCreate();
  if ((_DWORD)v5)
  {
    v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_QWORD *)(DerivedStorage + 8) = FigSimpleMutexCreate();
    *a3 = 0;
  }
  return v5;
}

void __vfbserv_start_block_invoke(uint64_t a1)
{
  CFMutableDictionaryRef Mutable;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetInt32();
  if (vfbintern_getFramebuf_once != -1)
    dispatch_once(&vfbintern_getFramebuf_once, &__block_literal_global_41);
  if (vfblocal_getFramebufs_once != -1)
    dispatch_once(&vfblocal_getFramebufs_once, &__block_literal_global_71);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = FigXPCServerStart();
  if (Mutable)
    CFRelease(Mutable);
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

uint64_t vfbserv_handleClientMessage()
{
  uint64_t OpCode;
  uint64_t v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OpCode = FigXPCMessageGetOpCode();
  if (!(_DWORD)OpCode)
    return 4294955226;
  v1 = OpCode;
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return v1;
}

uint64_t vfbserv_verifyConnection(_xpc_connection_s *a1)
{
  uint64_t HasEntitlement;

  xpc_connection_get_pid(a1);
  HasEntitlement = FigXPCConnectionHasEntitlement();
  FigServer_CopyProcessName();
  return HasEntitlement;
}

void vfbserv_handleDisconnect(_QWORD *a1)
{
  _QWORD *DerivedStorage;
  void *v3;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](DerivedStorage[21]);
  if (DerivedStorage[23] == a1[1])
  {
    DerivedStorage[23] = 0;
    v3 = (void *)DerivedStorage[22];
    if (v3)
    {
      DerivedStorage[22] = 0;
      xpc_release(v3);
    }
  }
  MEMORY[0x19402EF04](DerivedStorage[21]);
  free(a1);
}

uint64_t vfbserv_getAndRetainFramebufFromMessage(int a1, xpc_object_t xdict)
{
  uint64_t v2;
  NSObject *v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v6;

  xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E0CA36A0]);
  v2 = FigXPCServerLookupAndRetainAssociatedObject();
  if ((_DWORD)v2)
  {
    v6 = v2;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return FigSignalErrorAt();
  }
  return v6;
}

uint64_t vfbserv_vsyncCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  _xpc_connection_s *v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD bytes[3];
  xpc_object_t xdict;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  bytes[2] = a3;
  xdict = 0;
  bytes[0] = a1;
  bytes[1] = a2;
  if (DerivedStorage
    && (v7 = DerivedStorage,
        MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 168)),
        v8 = *(_QWORD *)(v7 + 184),
        v9 = (_xpc_connection_s *)FigXPCRetain(),
        MEMORY[0x19402EF04](*(_QWORD *)(v7 + 168)),
        v8)
    && v9
    && !FigXPCCreateBasicMessage())
  {
    xpc_dictionary_set_data(xdict, "OutVSyncData", bytes, 0x18uLL);
    xpc_connection_send_message(v9, xdict);
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  FigXPCRelease();
  return FigXPCRelease();
}

uint64_t vfbserv_hotPlugCallback(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  _xpc_connection_s *v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage
    && (v3 = DerivedStorage,
        MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 168)),
        v4 = *(_QWORD *)(v3 + 184),
        v5 = (_xpc_connection_s *)FigXPCRetain(),
        MEMORY[0x19402EF04](*(_QWORD *)(v3 + 168)),
        v4)
    && v5
    && !FigXPCCreateBasicMessage())
  {
    xpc_dictionary_set_uint64(0, "OutIsActive", a1);
    xpc_connection_send_message(v5, 0);
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  FigXPCRelease();
  return FigXPCRelease();
}

_BYTE *vfbserv_HDCPCallback(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

void __vfblocal_getFramebufs_block_invoke()
{
  uint64_t v0;
  uint64_t v1;
  const __CFAllocator *v2;
  uint64_t v3;
  int v4;
  uint64_t DerivedStorage;
  NSObject *v6;
  NSObject *v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v9;
  NSObject *v10;
  NSObject *v11;
  unsigned int v12;
  unsigned int v13;
  char *v14;
  os_log_type_t v15[8];
  _BYTE handler[24];
  void *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (vfblocal_getFramebufMaxCount_once != -1)
    dispatch_once(&vfblocal_getFramebufMaxCount_once, &__block_literal_global_35);
  v0 = vfblocal_getFramebufMaxCount_framebufMaxCount;
  vfblocal_getFramebufs_framebufs = (uint64_t)malloc_type_calloc(vfblocal_getFramebufMaxCount_framebufMaxCount, 8uLL, 0x2004093837F09uLL);
  v1 = 0;
  if (v0)
  {
    v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    while (1)
    {
      v3 = vfblocal_getFramebufs_framebufs;
      v14 = 0;
      *(_QWORD *)v15 = 0;
      FigVirtualFramebufferGetClassID();
      v4 = CMDerivedObjectCreate();
      if (v4)
        break;
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(_DWORD *)DerivedStorage = 0;
      *(_DWORD *)(DerivedStorage + 4) = v1 + 1;
      *(_QWORD *)(DerivedStorage + 16) = FigSimpleMutexCreate();
      *(_QWORD *)(DerivedStorage + 40) = CFDictionaryCreateMutable(v2, 0, 0, MEMORY[0x1E0C9B3A0]);
      *(_QWORD *)(DerivedStorage + 168) = FigSimpleMutexCreate();
      asprintf(&v14, "VirtualFramebufLocalVSyncQueue.%d", *(_DWORD *)(DerivedStorage + 4));
      *(_DWORD *)(DerivedStorage + 144) = 60;
      v6 = FigDispatchQueueCreateWithPriority();
      *(_QWORD *)(DerivedStorage + 152) = v6;
      v7 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 1uLL, v6);
      *(_QWORD *)(DerivedStorage + 160) = v7;
      *(_QWORD *)handler = MEMORY[0x1E0C809B0];
      *(_QWORD *)&handler[8] = 0x40000000;
      *(_QWORD *)&handler[16] = __vfblocal_create_block_invoke;
      v17 = &__block_descriptor_tmp_20_2;
      v18 = *(_QWORD *)v15;
      dispatch_source_set_event_handler(v7, handler);
      dispatch_source_set_timer(*(dispatch_source_t *)(DerivedStorage + 160), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
      dispatch_resume(*(dispatch_object_t *)(DerivedStorage + 160));
      *(_QWORD *)(v3 + 8 * v1) = *(_QWORD *)v15;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      ++v1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      free(v14);
      if (v0 == v1)
      {
        v1 = v0;
        goto LABEL_8;
      }
    }
    v9 = v4;
    v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v19 = 0;
    v15[0] = OS_LOG_TYPE_DEFAULT;
    v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v12 = v19;
    if (os_log_type_enabled(v11, v15[0]))
      v13 = v12;
    else
      v13 = v12 & 0xFFFFFFFE;
    if (v13)
    {
      *(_DWORD *)handler = 136315650;
      *(_QWORD *)&handler[4] = "vfblocal_getFramebufs_block_invoke";
      *(_WORD *)&handler[12] = 1024;
      *(_DWORD *)&handler[14] = 852;
      *(_WORD *)&handler[18] = 1024;
      *(_DWORD *)&handler[20] = v9;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_8:
  vfblocal_getFramebufs_framebufCount = v1;
}

uintptr_t __vfblocal_create_block_invoke()
{
  uint64_t DerivedStorage;
  uintptr_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = dispatch_source_get_data(*(dispatch_source_t *)(DerivedStorage + 160));
  if ((int)result >= 1)
  {
    v2 = *(_QWORD *)(DerivedStorage + 112) + 1;
    v3 = *(_QWORD *)(DerivedStorage + 120) + *(_QWORD *)(DerivedStorage + 128) * result;
    *(_QWORD *)(DerivedStorage + 112) = v2;
    *(_QWORD *)(DerivedStorage + 120) = v3;
    v4 = *(uint64_t (**)(uint64_t))(DerivedStorage + 96);
    if (v4)
      return v4(v2);
  }
  return result;
}

CFStringRef vfblocal_copyDebugDesc(const void *a1)
{
  unsigned int *DerivedStorage;
  const __CFAllocator *v3;
  uint64_t v4;
  uint64_t v5;
  CFIndex v6;

  DerivedStorage = (unsigned int *)CMBaseObjectGetDerivedStorage();
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v5 = *DerivedStorage;
  v4 = DerivedStorage[1];
  v6 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(v3, 0, CFSTR("<FigVirtualFramebufferLocal %p (%d) state: %d retainCount: %ld objectID: %llu>"), a1, v4, v5, v6, *((_QWORD *)DerivedStorage + 23));
}

uint64_t vfblocal_copyProperty(uint64_t a1, const void *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage;
  int v8;
  int v9;
  CFTypeRef *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t CMBaseObject;
  uint64_t (*v14)(uint64_t, const void *, uint64_t, CFTypeRef *);
  uint64_t v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
  v8 = CFEqual(a2, CFSTR("FramebufIsActive"));
  v9 = *(_DWORD *)DerivedStorage;
  if (v8)
  {
    if (v9 && *(_QWORD *)(DerivedStorage + 8))
      v10 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    else
      v10 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    v11 = 0;
    *a4 = CFRetain(*v10);
  }
  else
  {
    if (v9 && (v12 = *(_QWORD *)(DerivedStorage + 8)) != 0)
    {
      CMBaseObject = FigVirtualDisplayProcessorGetCMBaseObject(v12);
      v14 = *(uint64_t (**)(uint64_t, const void *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
      if (!v14)
      {
        v11 = 4294954514;
        goto LABEL_13;
      }
      v15 = v14(CMBaseObject, a2, a3, a4);
    }
    else
    {
      v15 = FigSignalErrorAt();
    }
    v11 = v15;
  }
LABEL_13:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
  return v11;
}

uint64_t vfblocal_setProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t CMBaseObject;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
  if (!*(_DWORD *)DerivedStorage || (v6 = *(_QWORD *)(DerivedStorage + 8)) == 0)
  {
    v9 = 0;
    goto LABEL_8;
  }
  CMBaseObject = FigVirtualDisplayProcessorGetCMBaseObject(v6);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v8)
  {
    v9 = 4294954514;
LABEL_7:
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_8;
  }
  v9 = v8(CMBaseObject, a2, a3);
  if ((_DWORD)v9)
    goto LABEL_7;
LABEL_8:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
  return v9;
}

uint64_t vfblocal_getSupportedDigitalOutModes(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  const void *v6;
  _QWORD *v7;
  const void *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
  v7 = (_QWORD *)(DerivedStorage + 24);
  v6 = *(const void **)(DerivedStorage + 24);
  if (v6)
  {
    CFRelease(v6);
    *v7 = 0;
  }
  v9 = (_QWORD *)(DerivedStorage + 32);
  v8 = *(const void **)(DerivedStorage + 32);
  if (v8)
  {
    CFRelease(v8);
    *v9 = 0;
  }
  if (!*(_DWORD *)DerivedStorage)
    goto LABEL_9;
  v10 = *(_QWORD *)(DerivedStorage + 8);
  if (!v10)
    goto LABEL_9;
  v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (!v11)
  {
    v13 = 4294954514;
LABEL_12:
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_10;
  }
  v12 = v11(v10, DerivedStorage + 24, DerivedStorage + 32);
  if ((_DWORD)v12)
  {
    v13 = v12;
    goto LABEL_12;
  }
LABEL_9:
  v13 = 0;
  *a2 = *v7;
  *a3 = *v9;
LABEL_10:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
  return v13;
}

uint64_t vfblocal_setDigitalOutMode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
  if (*(_DWORD *)DerivedStorage)
  {
    v6 = *(_QWORD *)(DerivedStorage + 8);
    if (v6)
    {
      *(_DWORD *)(DerivedStorage + 144) = 60;
      v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
      if (v7)
      {
        v8 = v7(v6, a2, a3);
        if (!(_DWORD)v8)
        {
          if (!FigDisplayModes_ExtractVSyncRateFromTimingMode(*(const __CFArray **)(DerivedStorage + 32), a3, &v12))
          {
            v9 = 0;
            *(_DWORD *)(DerivedStorage + 144) = v12;
            goto LABEL_10;
          }
          goto LABEL_6;
        }
        v9 = v8;
      }
      else
      {
        v9 = 4294954514;
      }
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_10;
    }
  }
LABEL_6:
  v9 = 0;
LABEL_10:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
  return v9;
}

uint64_t vfblocal_submitSurface(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, uint64_t a9, int a10, unsigned int a11, uint64_t a12, uint64_t a13, unsigned int a14)
{
  uint64_t DerivedStorage;
  int v27;
  const void *Value;
  const void *v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, const void *, uint64_t, _QWORD, _QWORD, double, double, double, double, double, double, double, double);
  uint64_t v32;
  int v33;
  NSObject *v34;
  uint64_t v35;
  NSObject *v36;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
  v27 = *(_DWORD *)DerivedStorage;
  if (!*(_DWORD *)DerivedStorage || !*(_QWORD *)(DerivedStorage + 8))
    goto LABEL_16;
  if (a10)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v35 = FigSignalErrorAt();
    goto LABEL_17;
  }
  if (a11)
  {
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 40), (const void *)a11);
    if (!Value)
    {
      v35 = 4294955226;
      goto LABEL_17;
    }
    v29 = Value;
    v27 = *(_DWORD *)DerivedStorage;
  }
  else
  {
    v29 = 0;
  }
  if (v27 != 2)
  {
LABEL_16:
    v35 = 0;
    goto LABEL_17;
  }
  v30 = *(_QWORD *)(DerivedStorage + 8);
  v31 = *(uint64_t (**)(uint64_t, const void *, uint64_t, _QWORD, _QWORD, double, double, double, double, double, double, double, double))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
  if (v31)
  {
    v32 = v31(v30, v29, a13, (a14 >> 1) & 7, 0, a1, a2, a3, a4, a5, a6, a7, a8);
    if (!(_DWORD)v32)
    {
      v33 = *(_DWORD *)(DerivedStorage + 92);
      *(_DWORD *)(DerivedStorage + 92) = v33 + 1;
      if (!v33)
      {
        v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      goto LABEL_16;
    }
    v35 = v32;
  }
  else
  {
    v35 = 4294954514;
  }
  v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_17:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
  return v35;
}

uint64_t vfblocal_enableVSyncNotifications(uint64_t a1, uint64_t a2, uint64_t a3)
{
  vfblocal_setVSyncNotifications(a1, a2, a3);
  return 0;
}

uint64_t vfblocal_disableVSyncNotifications(uint64_t a1)
{
  vfblocal_setVSyncNotifications(a1, 0, 0);
  return 0;
}

void vfblocal_enableHotPlugDetectNotifications(uint64_t a1, uint64_t a2, uint64_t a3)
{
  vfblocal_setHotPlugDetectNotifications(a1, a2, a3);
}

uint64_t sub_192E80954()
{
  return 0;
}

void vfblocal_disableHotPlugDetectNotifications(uint64_t a1)
{
  vfblocal_setHotPlugDetectNotifications(a1, 0, 0);
}

uint64_t sub_192E80974()
{
  return 0;
}

uint64_t vfblocal_getHDCPDownstreamState(uint64_t a1, uint64_t a2)
{
  _BOOL4 isRunning;

  isRunning = vfblocal_isRunning();
  hdcp_getHDCPDownstreamState(isRunning, a2);
  return 0;
}

uint64_t vfblocal_enableMirroring(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
  if (!*(_DWORD *)DerivedStorage || (v4 = *(_QWORD *)(DerivedStorage + 8)) == 0)
  {
    v6 = 0;
    goto LABEL_8;
  }
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  if (!v5)
  {
    v6 = 4294954514;
LABEL_7:
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_8;
  }
  v6 = v5(v4, a2);
  if ((_DWORD)v6)
    goto LABEL_7;
LABEL_8:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
  return v6;
}

uint64_t vfblocal_acquireWritebackSurface(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, IOSurfaceID *a7, CFTypeRef *a8)
{
  uint64_t v14;
  uint64_t DerivedStorage;
  uint64_t v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, _QWORD, CFTypeRef *, double, double);
  CFTypeRef *p_cf;
  uint64_t v22;
  __IOSurface *IOSurface;
  IOSurfaceID ID;
  CFTypeRef cf;

  v14 = 3758097112;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v16 = DerivedStorage;
  cf = 0;
  if (a7)
    v17 = a8 == 0;
  else
    v17 = 1;
  v18 = !v17;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
  if (!*(_DWORD *)v16 || (v19 = *(_QWORD *)(v16 + 8)) == 0)
  {
    v22 = FigSignalErrorAt();
LABEL_30:
    v14 = v22;
    goto LABEL_19;
  }
  if (*(_DWORD *)v16 != 2)
    goto LABEL_19;
  v20 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *, double, double))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 88);
  if (!v20)
  {
    v14 = 4294954514;
    goto LABEL_19;
  }
  if (v18)
    p_cf = &cf;
  else
    p_cf = 0;
  v22 = v20(v19, a4, a6 & 1, p_cf, a1, a2);
  if ((_DWORD)v22)
  {
    if ((_DWORD)v22 == -12072)
      goto LABEL_19;
    if ((_DWORD)v22 == -12073)
    {
      v14 = 3758097109;
      goto LABEL_19;
    }
    goto LABEL_30;
  }
  if (a7)
  {
    if (cf)
    {
      IOSurface = CVPixelBufferGetIOSurface((CVPixelBufferRef)cf);
      ID = IOSurfaceGetID(IOSurface);
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v16 + 40), (const void *)ID, cf);
    }
    else
    {
      ID = 0;
    }
    *a7 = ID;
  }
  v14 = 0;
  if (a8)
  {
    *a8 = cf;
    cf = 0;
    goto LABEL_21;
  }
LABEL_19:
  if (cf)
    CFRelease(cf);
LABEL_21:
  MEMORY[0x19402EF04](*(_QWORD *)(v16 + 16));
  return v14;
}

uint64_t vfblocal_relinquishWritebackSurface(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
  if (*(_DWORD *)DerivedStorage && *(_QWORD *)(DerivedStorage + 8))
  {
    if (!a2 || !a3)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v6 = 4294955226;
      goto LABEL_7;
    }
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 40), (const void *)a2);
  }
  v6 = 0;
LABEL_7:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
  return v6;
}

uint64_t vfblocal_HDCPSendRequest(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5)
{
  a4(a5, 1);
  return 0;
}

uint64_t vfblocal_HDCPGetReply(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _BOOL4 isRunning;
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (*a3 <= 0xFuLL)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294955226;
  }
  else
  {
    isRunning = vfblocal_isRunning();
    hdcp_getHDCPDownstreamState(isRunning, a2);
    result = 0;
    *a3 = 16;
  }
  return result;
}

uint64_t vfblocal_setVSyncNotifications(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  NSObject *v6;
  _QWORD block[7];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
  v6 = *(NSObject **)(DerivedStorage + 152);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __vfblocal_setVSyncNotifications_block_invoke;
  block[3] = &__block_descriptor_tmp_22_4;
  block[4] = a2;
  block[5] = DerivedStorage;
  block[6] = a3;
  dispatch_async(v6, block);
  return MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
}

void __vfblocal_setVSyncNotifications_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int64_t v8;
  NSObject *v9;
  dispatch_time_t v10;
  CMTime hostTime;

  v3 = a1[4];
  v2 = a1[5];
  if (v3)
  {
    if (!*(_QWORD *)(v2 + 96))
    {
      *(_QWORD *)(v2 + 96) = v3;
      *(_QWORD *)(a1[5] + 104) = a1[6];
      v4 = a1[5];
      v5 = 0x3B9ACA00uLL / *(int *)(v4 + 144);
      *(_QWORD *)(v4 + 136) = v5;
      CMTimeMake(&hostTime, v5, 1000000000);
      *(_QWORD *)(a1[5] + 128) = CMClockConvertHostTimeToSystemUnits(&hostTime);
      v6 = mach_absolute_time();
      v7 = (_QWORD *)a1[5];
      v8 = v7[17];
      v7[15] = v7[16] + v6;
      v9 = v7[20];
      v10 = dispatch_time(0, v8);
      dispatch_source_set_timer(v9, v10, *(_QWORD *)(a1[5] + 136), 0xF4240uLL);
    }
  }
  else
  {
    *(_QWORD *)(v2 + 96) = 0;
    *(_QWORD *)(a1[5] + 104) = 0;
    dispatch_source_set_timer(*(dispatch_source_t *)(a1[5] + 160), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
  }
}

void vfblocal_setHotPlugDetectNotifications(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *DerivedStorage;
  uint64_t v6;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](DerivedStorage[2]);
  if (a2)
    v6 = a3;
  else
    v6 = 0;
  DerivedStorage[6] = a2;
  DerivedStorage[7] = v6;
  JUMPOUT(0x19402EF04);
}

void hdcp_getHDCPDownstreamState(int a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = 0x1000150434448;
  *(_DWORD *)(a2 + 8) = 0x8000000;
  *(_BYTE *)(a2 + 12) = 0;
  *(_WORD *)(a2 + 14) = 0;
  if (hdcp_getHDCPDownstreamState_tetheredDemoModeOnce == -1)
  {
    if (a1)
      goto LABEL_3;
  }
  else
  {
    dispatch_once(&hdcp_getHDCPDownstreamState_tetheredDemoModeOnce, &__block_literal_global_24_0);
    if (a1)
    {
LABEL_3:
      if (!hdcp_getHDCPDownstreamState_tetheredDemoModeEnabled)
        return;
    }
  }
  *(_DWORD *)(a2 + 8) = 0;
}

BOOL vfblocal_isRunning()
{
  uint64_t DerivedStorage;
  _BOOL8 v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
  v1 = *(_DWORD *)DerivedStorage == 2;
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
  return v1;
}

uint64_t __hdcp_getHDCPDownstreamState_block_invoke()
{
  char v0;
  uint64_t result;
  char v2;

  v0 = MGGetBoolAnswer();
  result = CFPreferencesGetAppBooleanValue(CFSTR("EnableTetheredDisplayPortMode"), (CFStringRef)*MEMORY[0x1E0C9B228], 0);
  if ((_DWORD)result)
    v2 = v0;
  else
    v2 = 0;
  hdcp_getHDCPDownstreamState_tetheredDemoModeEnabled = v2;
  return result;
}

char *__vfbserv_getProcessType_block_invoke()
{
  pid_t v0;
  char *result;
  int v6;
  uint64_t buffer;
  __int128 v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v0 = getpid();
  result = (char *)proc_pidpath(v0, &buffer, 0x400u);
  if ((int)result >= 1)
  {
    v9 = 0;
    if (buffer == 0x6962732F7273752FLL
      && (_QWORD)v8 == 0x73616964656D2F6ELL
      && *(_QWORD *)((char *)&v8 + 7) == 0x64726576726573)
    {
      v6 = 1;
      goto LABEL_21;
    }
    if (buffer == 0x62696C2F7273752FLL
      && (_QWORD)v8 == 0x6361622F63657865
      && *((_QWORD *)&v8 + 1) == 0x646472616F626BLL)
    {
      v6 = 2;
      goto LABEL_21;
    }
    result = strrchr((char *)&buffer, 47);
    if (result)
    {
      result = (char *)strcmp(result + 1, "audiomxd");
      if (!(_DWORD)result)
      {
        v6 = 3;
LABEL_21:
        vfbserv_getProcessType_procType = v6;
      }
    }
  }
  return result;
}

uint64_t __vfblocal_getFramebufMaxCount_block_invoke()
{
  unsigned int CFPreferenceNumberWithDefault;
  uint64_t v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  if (CFPreferenceNumberWithDefault >= 8)
    v1 = 8;
  else
    v1 = CFPreferenceNumberWithDefault;
  vfblocal_getFramebufMaxCount_framebufMaxCount = v1;
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  return fig_log_call_emit_and_clean_up_after_send_and_compose();
}

CFRunLoopSourceRef __vfbintern_getFramebuf_block_invoke()
{
  const __CFAllocator *v0;
  _QWORD *DerivedStorage;
  CFRunLoopSourceRef result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFRunLoopSourceContext context;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  FigVirtualFramebufferGetClassID();
  if (CMDerivedObjectCreate())
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return (CFRunLoopSourceRef)fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    *DerivedStorage = FigSimpleMutexCreate();
    memset(&context, 0, 56);
    context.schedule = (void (__cdecl *)(void *, CFRunLoopRef, CFRunLoopMode))vfbintern_sourceSchedule;
    context.cancel = (void (__cdecl *)(void *, CFRunLoopRef, CFRunLoopMode))vfbintern_sourceCancel;
    context.perform = (void (__cdecl *)(void *))vfbintern_sourcePerform;
    result = CFRunLoopSourceCreate(v0, 0, &context);
    DerivedStorage[2] = result;
    vfbintern_getFramebuf_framebuf = 0;
  }
  return result;
}

uint64_t vfbintern_sourceSchedule(uint64_t a1, uint64_t a2)
{
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  if (DerivedStorage[1])
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage[1] = a2;
  return MEMORY[0x19402EF04](*DerivedStorage);
}

uint64_t vfbintern_sourceCancel(uint64_t a1, uint64_t a2)
{
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  if (DerivedStorage[1] != a2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage[1] = 0;
  DerivedStorage[3] = 0;
  DerivedStorage[4] = 0;
  return MEMORY[0x19402EF04](*DerivedStorage);
}

uint64_t vfbintern_sourcePerform()
{
  _QWORD *DerivedStorage;
  uint64_t v1;
  uint64_t result;
  uint64_t (*v3)(uint64_t, uint64_t);

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  v1 = DerivedStorage[4];
  v3 = (uint64_t (*)(uint64_t, uint64_t))DerivedStorage[3];
  DerivedStorage[3] = 0;
  DerivedStorage[4] = 0;
  result = MEMORY[0x19402EF04](*DerivedStorage);
  if (v3)
    return v3(v1, 1);
  return result;
}

CFStringRef vfbintern_copyDebugDesc(const void *a1)
{
  const __CFAllocator *v2;
  CFIndex v3;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<FigVirtualFramebufferInternal %p retainCount: %ld>"), a1, v3);
}

uint64_t vfbintern_getHDCPDownstreamState(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  if (vfblocal_getFramebufs_once != -1)
    dispatch_once(&vfblocal_getFramebufs_once, &__block_literal_global_71);
  v3 = vfblocal_getFramebufs_framebufCount;
  if (vfblocal_getFramebufs_framebufCount)
  {
    v4 = vfblocal_getFramebufs_framebufs;
    while (!vfblocal_isRunning())
    {
      v4 += 8;
      if (!--v3)
        goto LABEL_7;
    }
    v5 = 1;
  }
  else
  {
LABEL_7:
    v5 = 0;
  }
  hdcp_getHDCPDownstreamState(v5, a2);
  return 0;
}

uint64_t vfbintern_getHDCPRunLoopSource()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
}

uint64_t vfbintern_HDCPSendRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *DerivedStorage;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  DerivedStorage[3] = a4;
  DerivedStorage[4] = a5;
  if (DerivedStorage[1])
  {
    CFRunLoopSourceSignal((CFRunLoopSourceRef)DerivedStorage[2]);
    CFRunLoopWakeUp((CFRunLoopRef)DerivedStorage[1]);
  }
  MEMORY[0x19402EF04](*DerivedStorage);
  return 0;
}

uint64_t vfbintern_HDCPGetReply(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (a2 && a3 && *a3 > 0xFuLL)
  {
    vfbintern_getHDCPDownstreamState(a1, a2);
    result = 0;
    *a3 = 16;
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294955226;
  }
  return result;
}

_QWORD *scr_finalize()
{
  _QWORD *result;
  _QWORD *v1;

  result = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (*result)
  {
    __break(1u);
  }
  else
  {
    v1 = result;
    result = (_QWORD *)result[1];
    if (result)
    {
      result = (_QWORD *)FigSimpleMutexDestroy();
      v1[1] = 0;
    }
  }
  return result;
}

uint64_t scr_copyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  CFTypeRef v5;
  uint64_t result;

  if (!CFEqual(CFSTR("sourceType"), a2))
    return 4294954512;
  v5 = CFRetain(CFSTR("Screen"));
  result = 0;
  *a4 = v5;
  return result;
}

uint64_t scr_setProperty()
{
  return 4294954512;
}

uint64_t scr_plugProcessor(uint64_t a1, const void *a2)
{
  _QWORD *DerivedStorage;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v12;
  int tm_sec;
  unsigned int v14;
  NSObject *v15;
  int v16;
  unsigned int v17;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  tm v19;
  os_log_type_t v20[4];
  int v21;
  const char *v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (vfblocal_getFramebufs_once != -1)
    dispatch_once(&vfblocal_getFramebufs_once, &__block_literal_global_71);
  v4 = (_QWORD *)vfblocal_getFramebufs_framebufs;
  v5 = vfblocal_getFramebufs_framebufCount;
  MEMORY[0x19402EEEC](DerivedStorage[1]);
  if (*DerivedStorage)
  {
    v19.tm_sec = 0;
    v20[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_23:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v10 = 4294955226;
    goto LABEL_12;
  }
  if (v5)
  {
    while (1)
    {
      v6 = CMBaseObjectGetDerivedStorage();
      if (!a2)
        break;
      v7 = v6;
      MEMORY[0x19402EEEC](*(_QWORD *)(v6 + 16));
      if (!*(_DWORD *)v7 && !*(_QWORD *)(v7 + 8))
      {
        *(_QWORD *)(v7 + 8) = CFRetain(a2);
        gettimeofday((timeval *)(v7 + 64), 0);
        MEMORY[0x19402EF04](*(_QWORD *)(v7 + 16));
        v10 = 0;
        *DerivedStorage = *v4;
        goto LABEL_12;
      }
      v8 = CMBaseObjectGetDerivedStorage();
      memset(&v19, 0, sizeof(v19));
      localtime_r((const time_t *)(v8 + 64), &v19);
      strftime((char *)&v21, 0x40uLL, "%F %T", &v19);
      v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      MEMORY[0x19402EF04](*(_QWORD *)(v7 + 16));
      ++v4;
      if (!--v5)
      {
        v10 = 4294955223;
        goto LABEL_12;
      }
    }
    v19.tm_sec = 0;
    v20[0] = OS_LOG_TYPE_DEFAULT;
    v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    tm_sec = v19.tm_sec;
    if (os_log_type_enabled(v12, v20[0]))
      v14 = tm_sec;
    else
      v14 = tm_sec & 0xFFFFFFFE;
    if (v14)
    {
      v21 = 136315394;
      v22 = "vfblocal_plugProcessor";
      v23 = 1024;
      v24 = 903;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v19.tm_sec = 0;
    v20[0] = OS_LOG_TYPE_DEFAULT;
    v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v16 = v19.tm_sec;
    if (os_log_type_enabled(v15, v20[0]))
      v17 = v16;
    else
      v17 = v16 & 0xFFFFFFFE;
    if (v17)
    {
      v21 = 136315394;
      v22 = "scr_plugProcessor";
      v23 = 1024;
      v24 = 2099;
      _os_log_send_and_compose_impl();
    }
    goto LABEL_23;
  }
  v10 = 0;
LABEL_12:
  MEMORY[0x19402EF04](DerivedStorage[1]);
  return v10;
}

uint64_t scr_unplugProcessor(uint64_t a1, const void *a2)
{
  _QWORD *DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](DerivedStorage[1]);
  if (!*DerivedStorage)
    goto LABEL_7;
  v4 = CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_7;
  }
  v5 = v4;
  MEMORY[0x19402EEEC](*(_QWORD *)(v4 + 16));
  if (*(_DWORD *)v5 || *(const void **)(v5 + 8) != a2)
  {
    MEMORY[0x19402EF04](*(_QWORD *)(v5 + 16));
LABEL_7:
    v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v6 = 4294955226;
    goto LABEL_8;
  }
  CFRelease(a2);
  *(_QWORD *)(v5 + 8) = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(v5 + 16));
  v6 = 0;
  *DerivedStorage = 0;
LABEL_8:
  MEMORY[0x19402EF04](DerivedStorage[1]);
  return v6;
}

uint64_t scr_start(uint64_t a1, const __CFDictionary *a2)
{
  _QWORD *DerivedStorage;
  uint64_t v4;
  const __CFString *Value;
  NSObject *v6;
  const __CFString *v7;
  const void *v8;
  NSObject *v9;
  void (*v10)(uint64_t, _QWORD);
  uint64_t v11;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](DerivedStorage[1]);
  if (!*DerivedStorage)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    goto LABEL_19;
  }
  v4 = CMBaseObjectGetDerivedStorage();
  if (a2)
    Value = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("clientName"));
  else
    Value = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(v4 + 16));
  if (*(_DWORD *)v4 || !*(_QWORD *)(v4 + 8))
  {
    MEMORY[0x19402EF04](*(_QWORD *)(v4 + 16));
    v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
LABEL_19:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v11 = 4294955226;
    goto LABEL_20;
  }
  FigCFDictionaryGetBooleanIfPresent();
  *(_DWORD *)v4 = 2;
  if (!FigCFDictionaryGetInt32IfPresent())
    *(_DWORD *)(v4 + 88) = getpid();
  if (Value)
    v7 = Value;
  else
    v7 = CFSTR("media server");
  v8 = *(const void **)(v4 + 80);
  *(_QWORD *)(v4 + 80) = v7;
  CFRetain(v7);
  if (v8)
    CFRelease(v8);
  v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  v10 = *(void (**)(uint64_t, _QWORD))(v4 + 48);
  if (v10)
    v10(1, *(_QWORD *)(v4 + 56));
  MEMORY[0x19402EF04](*(_QWORD *)(v4 + 16));
  v11 = 0;
LABEL_20:
  MEMORY[0x19402EF04](DerivedStorage[1]);
  return v11;
}

uint64_t scr_stop()
{
  _QWORD *DerivedStorage;
  uint64_t v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v3;
  void (*v4)(_QWORD, _QWORD);
  uint64_t v5;
  NSObject *v7;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](DerivedStorage[1]);
  if (*DerivedStorage)
  {
    v1 = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19402EEEC](*(_QWORD *)(v1 + 16));
    if (*(_DWORD *)v1 == 1 || *(_DWORD *)v1 == 2)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v3 = *(const void **)(v1 + 80);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(v1 + 80) = 0;
    }
    *(_QWORD *)(v1 + 88) = 0;
    *(_DWORD *)v1 = 0;
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(v1 + 40));
    v4 = *(void (**)(_QWORD, _QWORD))(v1 + 48);
    if (v4)
      v4(0, *(_QWORD *)(v1 + 56));
    MEMORY[0x19402EF04](*(_QWORD *)(v1 + 16));
    v5 = 0;
  }
  else
  {
    v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v5 = 4294955226;
  }
  MEMORY[0x19402EF04](DerivedStorage[1]);
  return v5;
}

uint64_t scr_suspend()
{
  _QWORD *DerivedStorage;
  uint64_t v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v3;
  NSObject *v5;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](DerivedStorage[1]);
  if (*DerivedStorage)
  {
    v1 = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19402EEEC](*(_QWORD *)(v1 + 16));
    if (*(_DWORD *)v1 == 2)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *(_DWORD *)(v1 + 92) = 0;
    *(_DWORD *)v1 = 1;
    MEMORY[0x19402EF04](*(_QWORD *)(v1 + 16));
    v3 = 0;
  }
  else
  {
    v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v3 = 4294955226;
  }
  MEMORY[0x19402EF04](DerivedStorage[1]);
  return v3;
}

uint64_t scr_resume()
{
  _QWORD *DerivedStorage;
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  void (*v4)(uint64_t, _QWORD);
  uint64_t v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](DerivedStorage[1]);
  if (!*DerivedStorage)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    goto LABEL_9;
  }
  v1 = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(v1 + 16));
  if (*(_DWORD *)v1 != 1)
  {
    MEMORY[0x19402EF04](*(_QWORD *)(v1 + 16));
    v3 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
LABEL_9:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v5 = 4294955226;
    goto LABEL_10;
  }
  *(_DWORD *)v1 = 2;
  v2 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  v4 = *(void (**)(uint64_t, _QWORD))(v1 + 48);
  if (v4)
    v4(1, *(_QWORD *)(v1 + 56));
  MEMORY[0x19402EF04](*(_QWORD *)(v1 + 16));
  v5 = 0;
LABEL_10:
  MEMORY[0x19402EF04](DerivedStorage[1]);
  return v5;
}

uint64_t CreateSampleGeneratorForClosedCaptions(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t result;

  v2 = malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
  if (!v2)
    return 12;
  v3 = v2;
  result = 0;
  a1[6] = CCPushForType;
  a1[7] = CCFlushForType;
  a1[8] = CCResyncForType;
  a1[9] = CCDestroyForType;
  a1[10] = 0;
  a1[11] = v3;
  return result;
}

uint64_t CCPushForType(CMFormatDescriptionRef *formatDescriptionOut, OpaqueCMBlockBuffer *a2, CMTime *a3, CMTime *a4, uint64_t a5, uint64_t a6)
{
  CMFormatDescriptionRef v12;
  CMFormatDescriptionRef *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  size_t sampleSizeArray;
  CFTypeRef cf;
  CMSampleTimingInfo sampleTimingArray;

  memset(&sampleTimingArray, 0, 24);
  cf = 0;
  v13 = formatDescriptionOut + 5;
  v12 = formatDescriptionOut[5];
  v14 = v13[6];
  if (v12)
  {
    if (*v14 == 1635017571)
      goto LABEL_7;
    CFRelease(v12);
    *v13 = 0;
  }
  *v14 = 1635017571;
  v15 = CMFormatDescriptionCreate(formatDescriptionOut[1], 0x636C6370u, 0x61746363u, 0, v13);
  if ((_DWORD)v15)
    return v15;
  v15 = ((uint64_t (*)(CMFormatDescriptionRef *, CMFormatDescriptionRef, CMFormatDescriptionRef))formatDescriptionOut[2])(formatDescriptionOut, formatDescriptionOut[4], formatDescriptionOut[5]);
  if ((_DWORD)v15)
    return v15;
  if (*v13)
  {
LABEL_7:
    sampleTimingArray.decodeTimeStamp = *a4;
    sampleTimingArray.presentationTimeStamp = *a3;
    CMTimeMake(&sampleTimingArray.duration, 1, 90000);
    sampleSizeArray = CMBlockBufferGetDataLength(a2);
    v15 = CMSampleBufferCreate(formatDescriptionOut[1], a2, 1u, 0, 0, formatDescriptionOut[5], 1, 1, &sampleTimingArray, 1, &sampleSizeArray, (CMSampleBufferRef *)&cf);
    if (!(_DWORD)v15)
    {
      v16 = ((uint64_t (*)(CMFormatDescriptionRef *, CMFormatDescriptionRef, CFTypeRef, uint64_t, uint64_t))formatDescriptionOut[3])(formatDescriptionOut, formatDescriptionOut[4], cf, a6, a5);
      if (cf)
        CFRelease(cf);
      return v16;
    }
    return v15;
  }
  return FigSignalErrorAt();
}

uint64_t CCFlushForType()
{
  return 0;
}

void CCDestroyForType(uint64_t a1)
{
  free(*(void **)(a1 + 88));
  *(_QWORD *)(a1 + 88) = 0;
}

uint64_t FigRemoteStreamingAssetDownloaderCreateWithAsset(uint64_t a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t uint64;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  xpc_object_t xdict;
  void *v17;

  xdict = 0;
  v17 = 0;
  v15 = 0;
  v10 = rad_ensureClientEstablished();
  if ((_DWORD)v10
    || (v10 = FigXPCCreateBasicMessage(), (_DWORD)v10)
    || (v10 = rad_fillInCreationDictionary(v17, a2, a3, 0, 0, a4, 0), (_DWORD)v10)
    || (v10 = FigSandboxRegisterURLWithProcessAndCopyRegistration(), (_DWORD)v10)
    || (v10 = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)v10))
  {
    v12 = v10;
  }
  else
  {
    uint64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E0CA36A0]);
    v12 = rad_createInternal(a1, uint64, 0, 0, 0, &v15);
    if (!(_DWORD)v12)
    {
      v13 = v15;
      *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 112) = 0;
      *a5 = v13;
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v12;
}

uint64_t rad_ensureClientEstablished()
{
  uint64_t v0;
  _QWORD block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v6 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __rad_ensureClientEstablished_block_invoke;
  block[3] = &unk_1E2FA9E70;
  block[4] = &v3;
  if (rad_ensureClientEstablished_sFigAssetDownloaderRemoteClientSetupOnce != -1)
    dispatch_once(&rad_ensureClientEstablished_sFigAssetDownloaderRemoteClientSetupOnce, block);
  v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t rad_fillInCreationDictionary(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const __CFDictionary *a6, uint64_t a7)
{
  __CFDictionary *MutableCopy;
  uint64_t ObjectID;
  xpc_object_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t value;

  value = 0;
  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (a2)
  {
    ObjectID = FigAssetXPCRemoteGetObjectID(a2, &value);
    if ((_DWORD)ObjectID)
      goto LABEL_18;
    xpc_dictionary_set_uint64(a1, "AssetToken", value);
  }
  ObjectID = FigXPCMessageSetCFURL();
  if ((_DWORD)ObjectID
    || (ObjectID = FigXPCMessageSetCFArray(), (_DWORD)ObjectID)
    || (ObjectID = FigXPCMessageSetCFArray(), (_DWORD)ObjectID))
  {
LABEL_18:
    v15 = ObjectID;
    FigXPCRelease();
    if (!MutableCopy)
      return v15;
    goto LABEL_16;
  }
  if (a7)
  {
    v13 = FigStreamingAssetDownloadConfigCopySerializedRepresentation(a7);
    if (v13)
      xpc_dictionary_set_value(a1, "DownloadConfig", v13);
  }
  if (CFDictionaryGetValue(a6, CFSTR("AssetDownloaderCreateOption_RetryError")))
  {
    v14 = (const void *)FigCFCopyCFErrorAsPropertyList();
    CFDictionarySetValue(MutableCopy, CFSTR("AssetDownloaderCreateOption_RetryError"), v14);
  }
  else
  {
    v14 = 0;
  }
  v15 = FigXPCMessageSetCFDictionary();
  FigXPCRelease();
  if (v14)
    CFRelease(v14);
  if (MutableCopy)
LABEL_16:
    CFRelease(MutableCopy);
  return v15;
}

uint64_t rad_createInternal(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4, _OWORD *a5, _QWORD *a6)
{
  uint64_t v11;
  uint64_t DerivedStorage;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  FigAssetDownloaderGetClassID();
  v11 = CMDerivedObjectCreate();
  if ((_DWORD)v11)
    return v11;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 8) = a2;
  *(_QWORD *)(DerivedStorage + 112) = 0;
  if (a3)
  {
    if (a4)
    {
      if (a5)
      {
        v13 = DerivedStorage;
        dispatch_retain(a4);
        *(_QWORD *)(v13 + 16) = a4;
        *(_OWORD *)(v13 + 24) = *a5;
        v14 = a5[1];
        v15 = a5[2];
        v16 = a5[3];
        *(_OWORD *)(v13 + 88) = a5[4];
        *(_OWORD *)(v13 + 72) = v16;
        *(_OWORD *)(v13 + 56) = v15;
        *(_OWORD *)(v13 + 40) = v14;
        v17 = FigCFWeakReferenceHolderCreateWithReferencedObject();
        *(_QWORD *)(v13 + 104) = v17;
        if (!v17)
          return FigSignalErrorAt();
      }
    }
  }
  v11 = FigXPCRemoteClientAssociateObject();
  if ((_DWORD)v11)
    return v11;
  v18 = 0;
  *a6 = 0;
  return v18;
}

uint64_t FigRemoteStreamingAssetDownloadOrchestratorCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const __CFDictionary *a6, uint64_t a7, uint64_t a8, NSObject *a9, _OWORD *a10, _QWORD *a11)
{
  uint64_t v19;
  uint64_t uint64;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  xpc_object_t xdict;
  void *v26;

  xdict = 0;
  v26 = 0;
  v24 = 0;
  v19 = rad_ensureClientEstablished();
  if ((_DWORD)v19
    || (v19 = FigXPCCreateBasicMessage(), (_DWORD)v19)
    || (v19 = rad_fillInCreationDictionary(v26, a2, a3, a4, a5, a6, a7), (_DWORD)v19)
    || (v19 = FigSandboxRegisterURLWithProcessAndCopyRegistration(), (_DWORD)v19)
    || (v19 = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)v19))
  {
    v21 = v19;
  }
  else
  {
    uint64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E0CA36A0]);
    v21 = rad_createInternal(a1, uint64, a8, a9, a10, &v24);
    if (!(_DWORD)v21)
    {
      v22 = v24;
      *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 112) = 0;
      *a11 = v22;
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v21;
}

void __rad_ensureClientEstablished_block_invoke(uint64_t a1)
{
  __CFDictionary *Mutable;
  __CFDictionary *v3;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v3 = Mutable;
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA54A0], CFSTR("AssetDownloader_ServerConnectionDied"));
    FigRemote_ShouldConnectToMediaparserdForFileParsing();
    FigRemote_ShouldConnectToMediaplaybackd();
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = FigXPCRemoteClientCreate();
    CFRelease(v3);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = FigSignalErrorAt();
  }
}

uint64_t rad_deadConnectionCallback()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(result + 1) = 1;
  return result;
}

uint64_t rad_handleServerMessage()
{
  uint64_t OpCode;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  else
    return 4294951138;
}

void __rad_downloadSuccessCallback_block_invoke(_QWORD *a1)
{
  const void *v2;
  const void *v3;

  (*(void (**)(_QWORD, _QWORD))(a1[4] + 32))(a1[5], a1[6]);
  v2 = (const void *)a1[5];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[6];
  if (v3)
    CFRelease(v3);
}

void __rad_downloadFailureCallback_block_invoke(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(a1[4] + 40))(a1[5], a1[6], a1[7]);
  v2 = (const void *)a1[5];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[7];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[6];
  if (v4)
    CFRelease(v4);
}

void __rad_loadedTimeRangeChangedCallback_block_invoke(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;

  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a1[4] + 48))(a1[5], a1[6], a1[7], a1[8], a1[9], a1[10]);
  v2 = (const void *)a1[5];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[6];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[7];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[8];
  if (v5)
    CFRelease(v5);
  v6 = (const void *)a1[9];
  if (v6)
    CFRelease(v6);
  v7 = (const void *)a1[10];
  if (v7)
    CFRelease(v7);
}

void __rad_didResolveMediaSelection_block_invoke(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(a1[4] + 56))(a1[5], a1[6], a1[7]);
  v2 = (const void *)a1[5];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[6];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[7];
  if (v4)
    CFRelease(v4);
}

void __rad_didFinishDownloadForMediaSelection_block_invoke(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(a1[4] + 64))(a1[5], a1[6], a1[7]);
  v2 = (const void *)a1[5];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[6];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[7];
  if (v4)
    CFRelease(v4);
}

void __rad_progressUpdateCallback_block_invoke(_QWORD *a1)
{
  const void *v2;
  const void *v3;

  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[4] + 80))(a1[5], a1[6], a1[7], a1[8]);
  v2 = (const void *)a1[5];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[6];
  if (v3)
    CFRelease(v3);
}

void __rad_willDownloadAlternatesCallback_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;
  const void *v5;

  v2 = a1[4];
  if (*(_QWORD *)(v2 + 24) == 2)
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v2 + 88))(a1[5], a1[6], a1[7]);
  v3 = (const void *)a1[5];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[6];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[7];
  if (v5)
    CFRelease(v5);
}

uint64_t rad_invalidate()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  NSObject *v2;
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    goto LABEL_8;
  v1 = DerivedStorage;
  *(_BYTE *)DerivedStorage = 1;
  v2 = *(NSObject **)(DerivedStorage + 16);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(v1 + 104);
  if (v3)
    CFRelease(v3);
  v4 = FigXPCRemoteClientDisassociateObject();
  if ((_DWORD)v4)
  {
    v5 = v4;
    goto LABEL_11;
  }
  if (*(_BYTE *)(v1 + 1))
  {
LABEL_8:
    v5 = 0;
  }
  else
  {
    v6 = FigXPCCreateBasicMessage();
    if ((_DWORD)v6)
      v5 = v6;
    else
      v5 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_11:
  FigXPCRelease();
  return v5;
}

void rad_finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  rad_invalidate();
  v1 = *(const void **)(DerivedStorage + 112);
  if (v1)
    CFRelease(v1);
}

CFStringRef rad_copyDebugDescription(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<FigRemoteAssetDownloader %p>"), a1);
}

uint64_t rad_copyProperty(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  ObjectID = rad_getObjectID(a1, &v4);
  if (!(_DWORD)ObjectID)
    ObjectID = FigXPCSendStdCopyPropertyMessage();
  v2 = ObjectID;
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t rad_setProperty(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  ObjectID = rad_getObjectID(a1, &v4);
  if (!(_DWORD)ObjectID)
    ObjectID = FigXPCSendStdSetPropertyMessage();
  v2 = ObjectID;
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t rad_getObjectID(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage || *(_BYTE *)(DerivedStorage + 1))
    return FigSignalErrorAt();
  *a2 = *(_QWORD *)(DerivedStorage + 8);
  return 0;
}

uint64_t rad_start(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = 0;
  ObjectID = rad_getObjectID(a1, &v5);
  if ((_DWORD)ObjectID)
  {
    v3 = ObjectID;
  }
  else
  {
    v2 = FigXPCCreateBasicMessage();
    if ((_DWORD)v2)
      v3 = v2;
    else
      v3 = FigXPCRemoteClientSendSyncMessage();
  }
  FigXPCRelease();
  return v3;
}

uint64_t rad_pause(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = 0;
  ObjectID = rad_getObjectID(a1, &v5);
  if ((_DWORD)ObjectID)
  {
    v3 = ObjectID;
  }
  else
  {
    v2 = FigXPCCreateBasicMessage();
    if ((_DWORD)v2)
      v3 = v2;
    else
      v3 = FigXPCRemoteClientSendSyncMessage();
  }
  FigXPCRelease();
  return v3;
}

uint64_t rad_stop(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = 0;
  ObjectID = rad_getObjectID(a1, &v5);
  if ((_DWORD)ObjectID)
  {
    v3 = ObjectID;
  }
  else
  {
    v2 = FigXPCCreateBasicMessage();
    if ((_DWORD)v2)
      v3 = v2;
    else
      v3 = FigXPCRemoteClientSendSyncMessage();
  }
  FigXPCRelease();
  return v3;
}

uint64_t rad_loadMetadata(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = 0;
  ObjectID = rad_getObjectID(a1, &v5);
  if ((_DWORD)ObjectID)
  {
    v3 = ObjectID;
  }
  else
  {
    v2 = FigXPCCreateBasicMessage();
    if ((_DWORD)v2)
      v3 = v2;
    else
      v3 = FigXPCRemoteClientSendSyncMessage();
  }
  FigXPCRelease();
  return v3;
}

uint64_t RegisterSchemeInternal(__CFDictionary *a1, const void *a2, __int128 *a3)
{
  _OWORD *v3;
  uint64_t v4;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v3 = 0;
  v4 = 4294955146;
  if (a1 && a2 && a3)
  {
    v3 = malloc_type_calloc(1uLL, 0x40uLL, 0x80040A284212CuLL);
    v8 = a3[3];
    v10 = *a3;
    v9 = a3[1];
    v3[2] = a3[2];
    v3[3] = v8;
    *v3 = v10;
    v3[1] = v9;
    if (!CFDictionaryContainsKey(a1, a2))
    {
      CFDictionaryAddValue(a1, a2, v3);
      return 0;
    }
    v4 = 4294955136;
  }
  free(v3);
  return v4;
}

uint64_t FigCPEIsSupportedFormatDescription(uint64_t a1)
{
  uint64_t v1;
  const __CFDictionary *v2;
  int64_t Count;
  uint64_t v4;
  const void **v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t);

  v1 = a1;
  if (a1)
  {
    if (GetSchemeRegistrationDictionaryLock_initOnce != -1)
      dispatch_once_f(&GetSchemeRegistrationDictionaryLock_initOnce, &GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock, (dispatch_function_t)SchemeRegistrationDictionaryLockInitOnce);
    MEMORY[0x19402EEEC](GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock);
    if (GetSchemeRegistrationDictionary_initOnce != -1)
      dispatch_once_f(&GetSchemeRegistrationDictionary_initOnce, &GetSchemeRegistrationDictionary_schemeRegistrationDictionary, (dispatch_function_t)SchemeRegistrationDictionaryInitOnce);
    v2 = (const __CFDictionary *)GetSchemeRegistrationDictionary_schemeRegistrationDictionary;
    Count = CFDictionaryGetCount((CFDictionaryRef)GetSchemeRegistrationDictionary_schemeRegistrationDictionary);
    v4 = Count;
    if (Count < 1)
    {
      v5 = 0;
    }
    else
    {
      v5 = (const void **)malloc_type_calloc(Count, 8uLL, 0x2004093837F09uLL);
      CFDictionaryGetKeysAndValues(v2, 0, v5);
    }
    if (GetSchemeRegistrationDictionaryLock_initOnce != -1)
      dispatch_once_f(&GetSchemeRegistrationDictionaryLock_initOnce, &GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock, (dispatch_function_t)SchemeRegistrationDictionaryLockInitOnce);
    MEMORY[0x19402EF04](GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock);
    if (v4 < 1)
    {
LABEL_16:
      v1 = 0;
    }
    else
    {
      v6 = 0;
      while (1)
      {
        v7 = *(unsigned int (**)(uint64_t))v5[v6];
        if (v7)
        {
          if (v7(v1))
            break;
        }
        if (v4 == ++v6)
          goto LABEL_16;
      }
      v1 = 1;
    }
  }
  else
  {
    v5 = 0;
  }
  free(v5);
  return v1;
}

uint64_t FigCPEProtectorCreateForScheme(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  _QWORD *Value;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  result = 4294955146;
  if (a2 && a4)
  {
    if (GetSchemeRegistrationDictionaryLock_initOnce != -1)
      dispatch_once_f(&GetSchemeRegistrationDictionaryLock_initOnce, &GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock, (dispatch_function_t)SchemeRegistrationDictionaryLockInitOnce);
    MEMORY[0x19402EEEC](GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock);
    if (GetSchemeRegistrationDictionary_initOnce != -1)
      dispatch_once_f(&GetSchemeRegistrationDictionary_initOnce, &GetSchemeRegistrationDictionary_schemeRegistrationDictionary, (dispatch_function_t)SchemeRegistrationDictionaryInitOnce);
    Value = CFDictionaryGetValue((CFDictionaryRef)GetSchemeRegistrationDictionary_schemeRegistrationDictionary, a2);
    if (GetSchemeRegistrationDictionaryLock_initOnce != -1)
      dispatch_once_f(&GetSchemeRegistrationDictionaryLock_initOnce, &GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock, (dispatch_function_t)SchemeRegistrationDictionaryLockInitOnce);
    MEMORY[0x19402EF04](GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock);
    if (Value && (v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))Value[1]) != 0)
      return v10(a1, a3, a4);
    else
      return 4294955141;
  }
  return result;
}

uint64_t FigCPEProtectorCreateForFormatReader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const void **v4;
  uint64_t v5;
  const __CFDictionary *v10;
  int64_t Count;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t *);
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, CFTypeRef *, _QWORD, _QWORD);
  uint64_t FigBaseObject;
  uint64_t (*v18)(uint64_t, const __CFString *, uint64_t, CFArrayRef *);
  CFIndex v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int (*v22)(const void *);
  const void *ValueAtIndex;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t, uint64_t);
  _BOOL4 v25;
  uint64_t v27;
  uint64_t v28;
  CFIndex v29;
  CFArrayRef theArray;
  CFTypeRef cf;
  uint64_t v32;

  v4 = 0;
  cf = 0;
  v32 = 0;
  v5 = 4294955146;
  if (a2 && a4)
  {
    if (GetSchemeRegistrationDictionaryLock_initOnce != -1)
      dispatch_once_f(&GetSchemeRegistrationDictionaryLock_initOnce, &GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock, (dispatch_function_t)SchemeRegistrationDictionaryLockInitOnce);
    MEMORY[0x19402EEEC](GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock);
    if (GetSchemeRegistrationDictionary_initOnce != -1)
      dispatch_once_f(&GetSchemeRegistrationDictionary_initOnce, &GetSchemeRegistrationDictionary_schemeRegistrationDictionary, (dispatch_function_t)SchemeRegistrationDictionaryInitOnce);
    v10 = (const __CFDictionary *)GetSchemeRegistrationDictionary_schemeRegistrationDictionary;
    Count = CFDictionaryGetCount((CFDictionaryRef)GetSchemeRegistrationDictionary_schemeRegistrationDictionary);
    v12 = Count;
    if (Count < 1)
    {
      v4 = 0;
    }
    else
    {
      v4 = (const void **)malloc_type_calloc(Count, 8uLL, 0x2004093837F09uLL);
      CFDictionaryGetKeysAndValues(v10, 0, v4);
    }
    if (GetSchemeRegistrationDictionaryLock_initOnce != -1)
      dispatch_once_f(&GetSchemeRegistrationDictionaryLock_initOnce, &GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock, (dispatch_function_t)SchemeRegistrationDictionaryLockInitOnce);
    MEMORY[0x19402EF04](GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock);
    v13 = *(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (!v13)
      goto LABEL_47;
    v14 = v13(a2, &v32);
    if ((_DWORD)v14)
    {
LABEL_58:
      v5 = v14;
    }
    else
    {
      if (v32 >= 1)
      {
        v15 = 0;
        v27 = *MEMORY[0x1E0C9AE00];
        while (1)
        {
          theArray = 0;
          v16 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 48);
          if (!v16)
            break;
          v14 = v16(a2, v15, &cf, 0, 0);
          if ((_DWORD)v14)
            goto LABEL_58;
          FigBaseObject = FigTrackReaderGetFigBaseObject(cf);
          v18 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
          if (!v18)
            break;
          v14 = v18(FigBaseObject, CFSTR("TrackFormatDescriptionArray"), v27, &theArray);
          if ((_DWORD)v14)
            goto LABEL_58;
          if (theArray)
          {
            v28 = v15;
            v29 = CFArrayGetCount(theArray);
            if (v29 < 1)
            {
              v20 = 0;
              LODWORD(v22) = 0;
            }
            else
            {
              v19 = 0;
              v20 = 0;
              do
              {
                if (v12 >= 1)
                {
                  v21 = 0;
                  while (1)
                  {
                    v22 = *(unsigned int (**)(const void *))v4[v21];
                    if (v22)
                    {
                      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v19);
                      if (v22(ValueAtIndex))
                      {
                        v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((_QWORD *)v4[v21] + 3);
                        if (!v24)
                        {
                          v5 = 4294955141;
                          goto LABEL_55;
                        }
                        v20 = v24(a1, a2, a3, a4);
                        LODWORD(v22) = v20 == 0;
                      }
                      else
                      {
                        LODWORD(v22) = 0;
                      }
                    }
                    if (++v21 >= v12 || (_DWORD)v22)
                      goto LABEL_34;
                  }
                }
                LODWORD(v22) = 0;
LABEL_34:
                ++v19;
              }
              while (v19 < v29 && !(_DWORD)v22);
            }
            if (theArray)
              CFRelease(theArray);
            v15 = v28;
          }
          else
          {
            v20 = 0;
            LODWORD(v22) = 0;
          }
          if (cf)
          {
            CFRelease(cf);
            cf = 0;
          }
          ++v15;
          v25 = (_DWORD)v22 != 0;
          if (v15 >= v32 || (_DWORD)v22)
            goto LABEL_49;
        }
LABEL_47:
        v5 = 4294954514;
        goto LABEL_55;
      }
      v20 = 0;
      v25 = 0;
LABEL_49:
      if (v20)
        v25 = 1;
      if (v25)
        v5 = v20;
      else
        v5 = 4294955131;
    }
  }
LABEL_55:
  free(v4);
  if (cf)
    CFRelease(cf);
  return v5;
}

CFStringRef FigCPECreateFormatDescriptionIdentifierForTrackIDAndIndex(const __CFAllocator *a1, uint64_t a2, uint64_t a3)
{
  return CFStringCreateWithFormat(a1, 0, CFSTR("TrackID:%u;Index:%u"), a2, a3);
}

uint64_t FigCPEInitializeWithOptions(const void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *Value;
  uint64_t (*v7)(uint64_t, uint64_t);

  if (GetSchemeRegistrationDictionaryLock_initOnce != -1)
    dispatch_once_f(&GetSchemeRegistrationDictionaryLock_initOnce, &GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock, (dispatch_function_t)SchemeRegistrationDictionaryLockInitOnce);
  MEMORY[0x19402EEEC](GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock);
  if (GetSchemeRegistrationDictionary_initOnce != -1)
    dispatch_once_f(&GetSchemeRegistrationDictionary_initOnce, &GetSchemeRegistrationDictionary_schemeRegistrationDictionary, (dispatch_function_t)SchemeRegistrationDictionaryInitOnce);
  Value = CFDictionaryGetValue((CFDictionaryRef)GetSchemeRegistrationDictionary_schemeRegistrationDictionary, a1);
  if (GetSchemeRegistrationDictionaryLock_initOnce != -1)
    dispatch_once_f(&GetSchemeRegistrationDictionaryLock_initOnce, &GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock, (dispatch_function_t)SchemeRegistrationDictionaryLockInitOnce);
  MEMORY[0x19402EF04](GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock);
  if (Value && (v7 = (uint64_t (*)(uint64_t, uint64_t))Value[4]) != 0)
    return v7(a2, a3);
  else
    return 4294955141;
}

uint64_t FigCPEUninitialize(const void *a1, uint64_t a2)
{
  _QWORD *Value;
  uint64_t (*v5)(uint64_t);

  if (GetSchemeRegistrationDictionaryLock_initOnce != -1)
    dispatch_once_f(&GetSchemeRegistrationDictionaryLock_initOnce, &GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock, (dispatch_function_t)SchemeRegistrationDictionaryLockInitOnce);
  MEMORY[0x19402EEEC](GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock);
  if (GetSchemeRegistrationDictionary_initOnce != -1)
    dispatch_once_f(&GetSchemeRegistrationDictionary_initOnce, &GetSchemeRegistrationDictionary_schemeRegistrationDictionary, (dispatch_function_t)SchemeRegistrationDictionaryInitOnce);
  Value = CFDictionaryGetValue((CFDictionaryRef)GetSchemeRegistrationDictionary_schemeRegistrationDictionary, a1);
  if (GetSchemeRegistrationDictionaryLock_initOnce != -1)
    dispatch_once_f(&GetSchemeRegistrationDictionaryLock_initOnce, &GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock, (dispatch_function_t)SchemeRegistrationDictionaryLockInitOnce);
  MEMORY[0x19402EF04](GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock);
  if (Value && (v5 = (uint64_t (*)(uint64_t))Value[5]) != 0)
    return v5(a2);
  else
    return 4294955141;
}

uint64_t FigCPESetSessionRecordStorageURLForAppIdentifierInternal(const void *a1, const void *a2)
{
  uint64_t result;
  const void *Value;
  const __CFString *v6;
  const __CFString *v7;
  const __CFString *v8;
  _BOOL4 v9;
  _BOOL4 v10;

  if (FigCPEGetSessionRecordStorageLocations_once != -1)
    dispatch_once_f(&FigCPEGetSessionRecordStorageLocations_once, &FigCPEGetSessionRecordStorageLocations_database, (dispatch_function_t)InitCPESessionRecordLocations);
  result = 4294955146;
  if (a1 && a2)
  {
    MEMORY[0x19402EEEC](FigCPEGetSessionRecordStorageLocations_database);
    Value = CFDictionaryGetValue((CFDictionaryRef)qword_1EE2A1820, a1);
    if (Value == a2)
    {
LABEL_16:
      MEMORY[0x19402EF04](FigCPEGetSessionRecordStorageLocations_database);
      return 0;
    }
    if (!Value)
    {
LABEL_15:
      CFDictionarySetValue((CFMutableDictionaryRef)qword_1EE2A1820, a1, a2);
      goto LABEL_16;
    }
    v6 = (const __CFString *)FigCFURLCreateCacheKey();
    v7 = (const __CFString *)FigCFURLCreateCacheKey();
    v8 = v7;
    if (v6 && v7)
    {
      v9 = CFStringCompare(v6, v7, 0) == kCFCompareEqualTo;
    }
    else
    {
      v9 = 0;
      v10 = 0;
      if (!v6)
        goto LABEL_12;
    }
    CFRelease(v6);
    v10 = v9;
LABEL_12:
    if (v8)
      CFRelease(v8);
    if (v10)
      goto LABEL_16;
    goto LABEL_15;
  }
  return result;
}

uint64_t FigCPECopySessionRecordStorageURLForAppIdentifier(const void *a1, _QWORD *a2)
{
  uint64_t result;
  const void *Value;
  CFTypeRef v6;

  if (FigCPEGetSessionRecordStorageLocations_once != -1)
    dispatch_once_f(&FigCPEGetSessionRecordStorageLocations_once, &FigCPEGetSessionRecordStorageLocations_database, (dispatch_function_t)InitCPESessionRecordLocations);
  result = 4294955146;
  if (a1 && a2)
  {
    MEMORY[0x19402EEEC](FigCPEGetSessionRecordStorageLocations_database);
    Value = CFDictionaryGetValue((CFDictionaryRef)qword_1EE2A1820, a1);
    if (Value)
      v6 = CFRetain(Value);
    else
      v6 = 0;
    MEMORY[0x19402EF04](FigCPEGetSessionRecordStorageLocations_database);
    result = 0;
    *a2 = v6;
  }
  return result;
}

uint64_t FigCPECopySessionRecordsForAppIdentifierInternal(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const __CFDictionary *v5;
  int64_t Count;
  uint64_t v7;
  const void **v8;
  const void **v9;
  uint64_t (*v10)(uint64_t, uint64_t);

  v2 = 4294955146;
  if (a1 && a2)
  {
    if (GetSchemeRegistrationDictionaryLock_initOnce != -1)
      dispatch_once_f(&GetSchemeRegistrationDictionaryLock_initOnce, &GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock, (dispatch_function_t)SchemeRegistrationDictionaryLockInitOnce);
    MEMORY[0x19402EEEC](GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock);
    if (GetSchemeRegistrationDictionary_initOnce != -1)
      dispatch_once_f(&GetSchemeRegistrationDictionary_initOnce, &GetSchemeRegistrationDictionary_schemeRegistrationDictionary, (dispatch_function_t)SchemeRegistrationDictionaryInitOnce);
    v5 = (const __CFDictionary *)GetSchemeRegistrationDictionary_schemeRegistrationDictionary;
    Count = CFDictionaryGetCount((CFDictionaryRef)GetSchemeRegistrationDictionary_schemeRegistrationDictionary);
    v7 = Count;
    if (Count < 1)
    {
      v8 = 0;
    }
    else
    {
      v8 = (const void **)malloc_type_calloc(Count, 8uLL, 0x2004093837F09uLL);
      CFDictionaryGetKeysAndValues(v5, 0, v8);
    }
    if (GetSchemeRegistrationDictionaryLock_initOnce != -1)
      dispatch_once_f(&GetSchemeRegistrationDictionaryLock_initOnce, &GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock, (dispatch_function_t)SchemeRegistrationDictionaryLockInitOnce);
    MEMORY[0x19402EF04](GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock);
    if (v7 < 1)
    {
      v2 = 0;
    }
    else
    {
      v2 = 0;
      v9 = v8;
      do
      {
        v10 = (uint64_t (*)(uint64_t, uint64_t))*((_QWORD *)*v9 + 6);
        if (v10)
        {
          v2 = v10(a1, a2);
          if (!(_DWORD)v2)
            break;
        }
        ++v9;
        --v7;
      }
      while (v7);
    }
    free(v8);
  }
  return v2;
}

uint64_t FigCPERemoveSessionRecordsForAppIdentifierInternal(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const __CFDictionary *v5;
  int64_t Count;
  uint64_t v7;
  const void **v8;
  const void **v9;
  uint64_t (*v10)(uint64_t, uint64_t);

  v2 = 4294955146;
  if (a1 && a2)
  {
    if (GetSchemeRegistrationDictionaryLock_initOnce != -1)
      dispatch_once_f(&GetSchemeRegistrationDictionaryLock_initOnce, &GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock, (dispatch_function_t)SchemeRegistrationDictionaryLockInitOnce);
    MEMORY[0x19402EEEC](GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock);
    if (GetSchemeRegistrationDictionary_initOnce != -1)
      dispatch_once_f(&GetSchemeRegistrationDictionary_initOnce, &GetSchemeRegistrationDictionary_schemeRegistrationDictionary, (dispatch_function_t)SchemeRegistrationDictionaryInitOnce);
    v5 = (const __CFDictionary *)GetSchemeRegistrationDictionary_schemeRegistrationDictionary;
    Count = CFDictionaryGetCount((CFDictionaryRef)GetSchemeRegistrationDictionary_schemeRegistrationDictionary);
    v7 = Count;
    if (Count < 1)
    {
      v8 = 0;
    }
    else
    {
      v8 = (const void **)malloc_type_calloc(Count, 8uLL, 0x2004093837F09uLL);
      CFDictionaryGetKeysAndValues(v5, 0, v8);
    }
    if (GetSchemeRegistrationDictionaryLock_initOnce != -1)
      dispatch_once_f(&GetSchemeRegistrationDictionaryLock_initOnce, &GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock, (dispatch_function_t)SchemeRegistrationDictionaryLockInitOnce);
    MEMORY[0x19402EF04](GetSchemeRegistrationDictionaryLock_schemeRegistrationDictionaryLock);
    if (v7 < 1)
    {
      v2 = 0;
    }
    else
    {
      v2 = 0;
      v9 = v8;
      do
      {
        v10 = (uint64_t (*)(uint64_t, uint64_t))*((_QWORD *)*v9 + 7);
        if (v10)
        {
          v2 = v10(a1, a2);
          if (!(_DWORD)v2)
            break;
        }
        ++v9;
        --v7;
      }
      while (v7);
    }
    free(v8);
  }
  return v2;
}

uint64_t SchemeRegistrationDictionaryLockInitOnce(uint64_t *a1)
{
  uint64_t result;

  result = FigSimpleMutexCreate();
  *a1 = result;
  return result;
}

uint64_t SchemeRegistrationDictionaryInitOnce(__CFDictionary **a1)
{
  __CFDictionary *Mutable;
  uint64_t result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
  v4 = xmmword_1E2FAA068;
  v5 = *(_OWORD *)&off_1E2FAA078;
  v6 = xmmword_1E2FAA088;
  v7 = unk_1E2FAA098;
  RegisterSchemeInternal(Mutable, CFSTR("FairPlay"), &v4);
  v4 = xmmword_1E2FAA0A8;
  v5 = unk_1E2FAA0B8;
  v6 = xmmword_1E2FAA0C8;
  v7 = unk_1E2FAA0D8;
  RegisterSchemeInternal(Mutable, CFSTR("com.apple.pkd"), &v4);
  v4 = xmmword_1E2FAA0E8;
  v5 = unk_1E2FAA0F8;
  v6 = xmmword_1E2FAA108;
  v7 = unk_1E2FAA118;
  result = RegisterSchemeInternal(Mutable, CFSTR("com.apple.basicAES"), &v4);
  *a1 = Mutable;
  return result;
}

CFMutableDictionaryRef InitCPESessionRecordLocations(uint64_t *a1)
{
  CFMutableDictionaryRef result;

  *a1 = FigSimpleMutexCreate();
  result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  a1[1] = (uint64_t)result;
  return result;
}

const void *FigExportSettingsForExportPreset(void *key)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  const void *v5;
  BOOL v6;
  const __CFAllocator *AllocatorForPermanentAllocations;
  const void *result;
  const __CFAllocator *v9;

  if (!FigExportSettingsForExportPreset_sSettings)
  {
    v2 = *MEMORY[0x1E0C9AE00];
    v3 = (const void *)MEMORY[0x19402DAA0](*MEMORY[0x1E0C9AE00], CFSTR("com.apple.MediaToolbox"), CFSTR("AVAssetExportPresetsBase.plist"));
    v4 = MEMORY[0x19402DAA0](v2, CFSTR("com.apple.MediaToolbox"), CFSTR("AVAssetExportPresets.plist"));
    v5 = (const void *)v4;
    if (v3)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      FigGetAllocatorForPermanentAllocations();
      FigCFCreateCombinedDictionary();
      CFRelease(v3);
LABEL_9:
      CFRelease(v5);
      goto LABEL_10;
    }
    if (v3)
    {
      AllocatorForPermanentAllocations = (const __CFAllocator *)FigGetAllocatorForPermanentAllocations();
      FigExportSettingsForExportPreset_sSettings = (uint64_t)CFDictionaryCreateCopy(AllocatorForPermanentAllocations, (CFDictionaryRef)v3);
      CFRelease(v3);
      if (!v5)
        goto LABEL_10;
      goto LABEL_9;
    }
    if (v4)
    {
      v9 = (const __CFAllocator *)FigGetAllocatorForPermanentAllocations();
      FigExportSettingsForExportPreset_sSettings = (uint64_t)CFDictionaryCreateCopy(v9, (CFDictionaryRef)v5);
      goto LABEL_9;
    }
  }
LABEL_10:
  result = 0;
  if (key)
  {
    if (FigExportSettingsForExportPreset_sSettings)
      return CFDictionaryGetValue((CFDictionaryRef)FigExportSettingsForExportPreset_sSettings, key);
  }
  return result;
}

uint64_t FigAssetExportSettingsUseHEVCHardwareEncoder()
{
  FigCFDictionaryGetInt32IfPresent();
  return 0;
}

double FigExportSettingsCalculateOutputDimensions(double a1, double a2)
{
  int CGFloatIfPresent;
  int v5;
  BOOL v6;
  int FloatIfPresent;
  int v8;
  double v9;
  double v10;
  double v11;
  double v12;

  CGFloatIfPresent = FigCFDictionaryGetCGFloatIfPresent();
  v5 = FigCFDictionaryGetCGFloatIfPresent();
  if (CGFloatIfPresent)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (!v6)
    return 0.0;
  FloatIfPresent = FigCFDictionaryGetFloatIfPresent();
  v8 = FigCFDictionaryGetFloatIfPresent();
  if (FigCFDictionaryGetFloatIfPresent() && a1 * a2 > 0.0)
  {
    v9 = a1 - sqrt(a1 * 0.0 / a2);
    v10 = round((a1 - v9) * 0.25);
    v11 = a2 * v9 / a1;
    a1 = v10 * 4.0;
    a2 = round((a2 - v11) * 0.25) * 4.0;
  }
  if (FloatIfPresent | v8)
  {
    if (FloatIfPresent && a1 >= 1.0 && (v12 = 0.0, a1 > 0.0))
    {
      a2 = round(a2 * 0.0 / a1 * 0.25) * 4.0;
      if (!v8)
        return v12;
    }
    else
    {
      v12 = a1;
      if (!v8)
        return v12;
    }
    if (a2 >= 1.0 && a2 > 0.0)
      return round(v12 * 0.0 / a2 * 0.25) * 4.0;
    return v12;
  }
  return a1;
}

uint64_t FigExportSettingsAverageBitRateForSourceAndExportPreset(uint64_t a1, double a2, double a3, float a4)
{
  double v6;
  double v7;
  double v8;
  double v9;
  const __CFString *v10;
  uint64_t v11;
  const __CFDictionary *Value;
  const __CFArray *v13;
  const __CFArray *v14;
  CFIndex Count;
  CFIndex v16;
  CFIndex v17;
  const void *v18;
  const void *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  const void *ValueAtIndex;
  double v25;
  double v26;
  int v27;
  int v28;
  int v29;
  float v30;
  double v31;
  double v32;
  int v33;
  int v34;
  int v35;
  int v36;
  double v37;
  double v38;
  double v39;
  int v40;
  int v41;
  int v42;
  double v43;
  BOOL v44;
  float v45;
  float v46;
  int Float32IfPresent;
  float v48;
  int v49;
  float v50;

  v6 = FigExportSettingsCalculateOutputDimensions(a2, a3);
  if (!a1)
    return 0;
  v8 = v6;
  v9 = v7;
  if (!figAssetExportSettings_bitRateTableForExportPreset_sBitRateTable)
  {
    figAssetExportSettings_bitRateTableForExportPreset_sBitRateTable = MEMORY[0x19402DAA0](*MEMORY[0x1E0C9AE00], CFSTR("com.apple.MediaToolbox"), CFSTR("AVExportBitRate.plist"));
    if (!figAssetExportSettings_bitRateTableForExportPreset_sBitRateTable)
      goto LABEL_96;
  }
  if (FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual())
  {
    if (FigCFEqual())
    {
      v10 = CFSTR("AVAssetExportBitRateBasicSquare");
      goto LABEL_15;
    }
    v10 = CFSTR("AVAssetExportBitRateBasic");
LABEL_14:
    if (FigCFEqual())
      goto LABEL_15;
LABEL_96:
    FigCFDictionaryGetInt32IfPresent();
    return 0;
  }
  if (FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual())
  {
    v10 = CFSTR("AVAssetExportBitRateHEVCBasic");
    goto LABEL_14;
  }
  if (FigCFEqual() || FigCFEqual())
  {
    v10 = CFSTR("AVAssetExportBitRateMVHEVCSquare");
    goto LABEL_15;
  }
  if (FigCFEqual())
  {
    v10 = CFSTR("AVAssetExportBitRateYouTubeHD");
    goto LABEL_14;
  }
  if (FigCFEqual() || FigCFEqual())
  {
    if (!FigCFEqual())
    {
      v10 = CFSTR("AVAssetExportBitRateMessage");
      goto LABEL_14;
    }
    v10 = CFSTR("AVAssetExportBitRateMessageSquare");
    goto LABEL_15;
  }
  if (FigCFEqual())
  {
    v10 = CFSTR("AVAssetExportBitRateAVCAnimoji");
    goto LABEL_14;
  }
  if (FigCFEqual() || FigCFEqual())
  {
LABEL_83:
    v10 = CFSTR("AVAssetExportBitRateICPL");
    goto LABEL_14;
  }
  if (FigCFEqual() || FigCFEqual())
  {
    if (FigCFEqual())
    {
      v10 = CFSTR("AVAssetExportBitRateICPLSquare");
      goto LABEL_15;
    }
    goto LABEL_83;
  }
  if (FigCFEqual() || FigCFEqual() || FigCFEqual())
    goto LABEL_91;
  if (!FigCFEqual() && !FigCFEqual())
    goto LABEL_96;
  if (!FigCFEqual())
  {
LABEL_91:
    v10 = CFSTR("AVAssetExportBitRateICPLHEVC");
    goto LABEL_14;
  }
  v10 = CFSTR("AVAssetExportBitRateICPLHEVCSquare");
LABEL_15:
  Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)figAssetExportSettings_bitRateTableForExportPreset_sBitRateTable, v10);
  if (!Value)
    goto LABEL_96;
  v13 = (const __CFArray *)CFDictionaryGetValue(Value, CFSTR("BitRateTiers"));
  if (!v13)
    goto LABEL_96;
  v14 = v13;
  Count = CFArrayGetCount(v13);
  if (Count < 1)
    goto LABEL_96;
  v16 = Count;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = (int)v8 + 30;
  if ((int)v8 >= -15)
    v20 = (int)v8 + 15;
  v21 = v20 >> 4;
  v22 = (int)v9 + 30;
  if ((int)v9 >= -15)
    v22 = (int)v9 + 15;
  v23 = v21 * (v22 >> 4);
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v14, v17);
    v25 = exportSettings_tierDimension();
    if (!v19)
      goto LABEL_30;
    v27 = (int)v25 + 30;
    if ((int)v25 >= -15)
      v27 = (int)v25 + 15;
    v28 = v27 >> 4;
    v29 = (int)v26 + 30;
    if ((int)v26 >= -15)
      v29 = (int)v26 + 15;
    if (v23 > v28 * (v29 >> 4))
    {
      ++v17;
    }
    else
    {
LABEL_30:
      if (++v17 >= v16)
        v18 = 0;
      else
        v18 = CFArrayGetValueAtIndex(v14, v17);
      v19 = ValueAtIndex;
    }
  }
  while (v17 != v16);
  if (!v19)
    goto LABEL_96;
  FigCFDictionaryGetFloatIfPresent();
  v30 = 0.0;
  if (v18)
  {
    v31 = exportSettings_tierDimension();
    v33 = (int)v31 + 30;
    if ((int)v31 >= -15)
      v33 = (int)v31 + 15;
    v34 = v33 >> 4;
    v35 = (int)v32 + 30;
    if ((int)v32 >= -15)
      v35 = (int)v32 + 15;
    v36 = v34 * (v35 >> 4);
    FigCFDictionaryGetFloatIfPresent();
    v37 = exportSettings_tierDimension();
    v39 = v38;
    FigCFDictionaryGetFloatIfPresent();
    if (v23 <= v36)
    {
      v40 = (int)v37 + 30;
      if ((int)v37 >= -15)
        v40 = (int)v37 + 15;
      v41 = v40 >> 4;
      v42 = (int)v39 + 30;
      if ((int)v39 >= -15)
        v42 = (int)v39 + 15;
      v30 = (float)((float)(0.0 - 0.0) * (float)((float)(v23 - v41 * (v42 >> 4)) / (float)(v36 - v41 * (v42 >> 4))))
          + 0.0;
    }
  }
  FigCFDictionaryGetFloat32IfPresent();
  FigCFDictionaryGetFloat32IfPresent();
  v43 = (float)(a4 / 0.0);
  if ((float)(a4 / 0.0) >= 0.5)
  {
    v45 = v43 * 0.5 + 0.5;
  }
  else
  {
    v44 = v43 < 0.3;
    v45 = v43 * 3.25 + -0.875;
    if (v44)
      v45 = 0.1;
  }
  v46 = v30 * v45;
  Float32IfPresent = FigCFDictionaryGetFloat32IfPresent();
  v48 = 0.0;
  if (v46 <= 0.0)
    v48 = v46;
  if (Float32IfPresent)
    v46 = v48;
  v49 = FigCFDictionaryGetFloat32IfPresent();
  v50 = 0.0;
  if (v46 >= 0.0)
    v50 = v46;
  if (!v49)
    v50 = v46;
  v11 = (int)v50;
  FigCFDictionaryGetInt32IfPresent();
  return v11;
}

uint64_t FigExportSettingsGetHDRType(const opaqueCMFormatDescription *a1)
{
  signed int MediaSubType;
  int v3;
  int v4;
  CFPropertyListRef Extension;
  const void *v6;
  CFTypeID TypeID;
  unsigned __int16 v9;

  MediaSubType = CMFormatDescriptionGetMediaSubType(a1);
  CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E0CA8D68]);
  CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E0CA8E98]);
  CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E0CA8EE8]);
  v3 = 1;
  if (MediaSubType > 1836415072)
  {
    if (MediaSubType > 1902407031)
    {
      if (MediaSubType > 1902671458)
      {
        if (MediaSubType == 1902671459)
          goto LABEL_26;
        v4 = 1902998904;
      }
      else
      {
        if (MediaSubType == 1902407032)
          goto LABEL_26;
        v4 = 1902667126;
      }
    }
    else if (MediaSubType > 1902405680)
    {
      if (MediaSubType == 1902405681)
        goto LABEL_26;
      v4 = 1902405733;
    }
    else
    {
      if (MediaSubType == 1836415073)
        goto LABEL_26;
      v4 = 1869117027;
    }
  }
  else if (MediaSubType > 1685481572)
  {
    if (MediaSubType > 1751479856)
    {
      if (MediaSubType == 1751479857)
        goto LABEL_26;
      v4 = 1752589105;
    }
    else
    {
      if (MediaSubType == 1685481573)
        goto LABEL_26;
      v4 = 1718908520;
    }
  }
  else if (MediaSubType > 1684895095)
  {
    if (MediaSubType == 1684895096)
      goto LABEL_26;
    v4 = 1685481521;
  }
  else
  {
    if (MediaSubType == 1667524657)
      goto LABEL_26;
    v4 = 1667790435;
  }
  if (MediaSubType != v4)
    v3 = 0;
LABEL_26:
  Extension = CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E0CA2240]);
  if (v3)
  {
    v6 = Extension;
    if (Extension)
    {
      TypeID = CFDictionaryGetTypeID();
      if (TypeID == CFGetTypeID(v6)
        && CFDictionaryGetValue((CFDictionaryRef)v6, CFSTR("dvvC"))
        && FigCFEqual()
        && FigCFEqual()
        && FigCFEqual())
      {
        return 20;
      }
    }
  }
  if ((v3 & 1) == 0)
  {
    if (MediaSubType <= 1634743415)
    {
      if (MediaSubType != 1634742376 && MediaSubType != 1634742888)
      {
        v9 = 13416;
LABEL_43:
        if (MediaSubType != (v9 | 0x61700000))
          goto LABEL_50;
      }
    }
    else if (((MediaSubType - 1634755432) > 0xB || ((1 << (MediaSubType - 104)) & 0x8C1) == 0)
           && ((MediaSubType - 1634759272) > 6 || ((1 << (MediaSubType - 104)) & 0x51) == 0))
    {
      v9 = 13432;
      goto LABEL_43;
    }
  }
  if (CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E0CA2220])
    && CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E0CA21A8])
    && FigCFEqual())
  {
    return 10;
  }
LABEL_50:
  if (FigCFEqual())
    return 17;
  if (FigCFEqual())
    return 9;
  return 0;
}

BOOL FigExportSettingsRequiresHDRMetadata(char a1)
{
  return (a1 & 6) != 0;
}

const __CFArray *FigExportSettingsGetPreferredFormatDescription(const __CFArray *result)
{
  const __CFArray *v1;
  CFIndex v2;
  unsigned int v3;
  CFIndex v4;
  const opaqueCMFormatDescription *ValueAtIndex;
  unsigned int HDRType;

  if (result)
  {
    v1 = result;
    if (CFArrayGetCount(result) < 1)
    {
      v2 = 0;
    }
    else
    {
      v2 = 0;
      v3 = 0;
      v4 = 0;
      do
      {
        ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(v1, v4);
        HDRType = FigExportSettingsGetHDRType(ValueAtIndex);
        if (v3 < HDRType)
          v2 = v4;
        if (v3 <= HDRType)
          v3 = HDRType;
        ++v4;
      }
      while (v4 < CFArrayGetCount(v1));
    }
    return (const __CFArray *)CFArrayGetValueAtIndex(v1, v2);
  }
  return result;
}

CFDictionaryRef FigExportSettings_CopyEffectiveColorPropertyForPresetAndInputOutputFormat(CFDictionaryRef theDict, const __CFArray *a2, const __CFDictionary *a3)
{
  const __CFDictionary *v5;
  void *Value;
  const void *Extension;
  CFDictionaryRef Copy;
  const void *v10;
  const __CFArray *PreferredFormatDescription;
  CFIndex Count;
  CFIndex v13;
  CFIndex v14;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v16;
  CFTypeID v17;
  CFTypeID v18;
  CFTypeID v19;
  BOOL v20;
  const __CFDictionary *v21;
  CFTypeRef cf;
  const __CFAllocator *allocator;
  void *values;
  const void *v25;
  CFDictionaryRef v26;
  void *keys[4];

  v5 = theDict;
  keys[3] = *(void **)MEMORY[0x1E0C80C00];
  if (theDict)
  {
    Value = (void *)CFDictionaryGetValue(theDict, CFSTR("colorPrimaries"));
    Extension = CFDictionaryGetValue(v5, CFSTR("transferFunction"));
    theDict = (CFDictionaryRef)CFDictionaryGetValue(v5, CFSTR("ycbcrMatrix"));
  }
  else
  {
    Extension = 0;
    Value = 0;
  }
  keys[0] = CFSTR("colorPrimaries");
  keys[1] = CFSTR("transferFunction");
  keys[2] = CFSTR("ycbcrMatrix");
  values = 0;
  v25 = 0;
  v26 = 0;
  if (Value && Extension && theDict)
    goto LABEL_7;
  if (v5)
    v5 = (const __CFDictionary *)CFDictionaryGetValue(v5, CFSTR("colorPropertyTiers"));
  if (a3 && CFDictionaryGetCount(a3) >= 1)
  {
    Value = (void *)CFDictionaryGetValue(a3, CFSTR("colorPrimaries"));
    Extension = CFDictionaryGetValue(a3, CFSTR("transferFunction"));
    v10 = CFDictionaryGetValue(a3, CFSTR("ycbcrMatrix"));
  }
  else if (a2 && CFArrayGetCount(a2) >= 1)
  {
    PreferredFormatDescription = FigExportSettingsGetPreferredFormatDescription(a2);
    Value = (void *)CMFormatDescriptionGetExtension(PreferredFormatDescription, (CFStringRef)*MEMORY[0x1E0CA8D68]);
    Extension = CMFormatDescriptionGetExtension(PreferredFormatDescription, (CFStringRef)*MEMORY[0x1E0CA8E98]);
    v10 = CMFormatDescriptionGetExtension(PreferredFormatDescription, (CFStringRef)*MEMORY[0x1E0CA8EE8]);
  }
  else
  {
    Value = 0;
    Extension = 0;
    v10 = 0;
  }
  cf = v10;
  if (v5)
  {
    Count = CFArrayGetCount(v5);
    if (Count >= 1)
    {
      v13 = Count;
      v14 = 0;
      Copy = 0;
      allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      while (1)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v5, v14);
        v16 = ValueAtIndex;
        if (Copy)
        {
          CFDictionaryGetValue(ValueAtIndex, CFSTR("colorPrimaries"));
          CFDictionaryGetValue(v16, CFSTR("transferFunction"));
          CFDictionaryGetValue(v16, CFSTR("ycbcrMatrix"));
          if (FigCFEqual() && FigCFEqual() && FigCFEqual())
          {
            CFRelease(Copy);
            v21 = (const __CFDictionary *)CFRetain(v16);
            Copy = v21;
            if (v21)
              return Copy;
LABEL_31:
            if (!Value)
              return Copy;
            v17 = CFGetTypeID(Value);
            Copy = 0;
            if (v17 != CFStringGetTypeID())
              return Copy;
            if (!Extension)
              return Copy;
            v18 = CFGetTypeID(Extension);
            Copy = 0;
            if (v18 != CFStringGetTypeID() || !cf)
              return Copy;
            v19 = CFGetTypeID(cf);
            v20 = v19 == CFStringGetTypeID();
            theDict = (CFDictionaryRef)cf;
            if (!v20)
              return 0;
LABEL_7:
            values = Value;
            v25 = Extension;
            v26 = theDict;
            return CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)&values, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          }
        }
        else
        {
          Copy = CFDictionaryCreateCopy(allocator, ValueAtIndex);
        }
        if (v13 == ++v14)
          goto LABEL_30;
      }
    }
  }
  Copy = 0;
LABEL_30:
  if (!Copy)
    goto LABEL_31;
  return Copy;
}

uint64_t FigExportSettings_GetMaximumBitsPerComponent(CFArrayRef theArray)
{
  CFIndex v2;
  const __CFAllocator *v3;
  CFIndex i;
  const opaqueCMFormatDescription *ValueAtIndex;
  FourCharCode MediaSubType;
  CFDictionaryRef v7;

  v2 = 0;
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (!theArray)
    goto LABEL_3;
LABEL_2:
  for (i = CFArrayGetCount(theArray); v2 < i; i = 0)
  {
    ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(theArray, v2);
    CMFormatDescriptionGetExtensions(ValueAtIndex);
    if (!FigCFDictionaryGetIntIfPresent())
    {
      MediaSubType = CMFormatDescriptionGetMediaSubType(ValueAtIndex);
      v7 = CVPixelFormatDescriptionCreateWithPixelFormatType(v3, MediaSubType);
      FigCFDictionaryGetIntIfPresent();
      if (v7)
        CFRelease(v7);
    }
    ++v2;
    if (theArray)
      goto LABEL_2;
LABEL_3:
    ;
  }
  return 0;
}

uint64_t FigExportSettings_CopyEncoderIDForProfile(CMVideoCodecType a1, const void *a2, const void **a3)
{
  uint64_t v5;
  CFIndex v6;
  CFMutableDictionaryRef Mutable;
  const void *v8;
  const __CFAllocator *v9;
  const void *v10;
  CFIndex Count;
  const __CFDictionary *ValueAtIndex;
  BOOL v13;
  const void *v14;
  const void *v15;
  CFTypeID v16;
  CFTypeID v17;
  const __CFDictionary *v18;
  const __CFDictionary *v19;
  CFTypeID v20;
  const __CFArray *v21;
  const __CFArray *v22;
  CFTypeID v23;
  const void *v24;
  const void **v26;
  void *v28;
  unsigned int v29;
  void *key;
  CFTypeRef cf;
  CFArrayRef listOfVideoEncodersOut;
  CFRange v33;

  cf = 0;
  listOfVideoEncodersOut = 0;
  v5 = VTCopyVideoEncoderList(0, &listOfVideoEncodersOut);
  if ((_DWORD)v5)
  {
    Mutable = 0;
  }
  else
  {
    v26 = a3;
    v6 = 0;
    Mutable = 0;
    v8 = (const void *)*MEMORY[0x1E0CEDCF8];
    v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v10 = (const void *)*MEMORY[0x1E0CEDD30];
    key = (void *)*MEMORY[0x1E0CED180];
    v28 = (void *)*MEMORY[0x1E0CED9F0];
    while (1)
    {
      Count = (CFIndex)listOfVideoEncodersOut;
      if (listOfVideoEncodersOut)
        Count = CFArrayGetCount(listOfVideoEncodersOut);
      if (v6 >= Count)
        break;
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(listOfVideoEncodersOut, v6);
      if (FigCFDictionaryGetInt32IfPresent())
        v13 = a1 == 0;
      else
        v13 = 0;
      if (v13)
      {
        v14 = CFDictionaryGetValue(ValueAtIndex, v8);
        if (v14)
        {
          v15 = v14;
          v16 = CFGetTypeID(v14);
          if (v16 == CFStringGetTypeID())
          {
            if (Mutable)
              CFRelease(Mutable);
            Mutable = CFDictionaryCreateMutable(v9, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            CFDictionarySetValue(Mutable, v10, v15);
            if (cf)
            {
              CFRelease(cf);
              cf = 0;
            }
            if (!VTCopySupportedPropertyDictionaryForEncoder(1920, 1080, a1, Mutable, 0, (CFDictionaryRef *)&cf))
            {
              if (cf)
              {
                v17 = CFGetTypeID(cf);
                if (v17 == CFDictionaryGetTypeID())
                {
                  v18 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, key);
                  if (v18)
                  {
                    v19 = v18;
                    v29 = v5;
                    v20 = CFGetTypeID(v18);
                    if (v20 == CFDictionaryGetTypeID()
                      && (v21 = (const __CFArray *)CFDictionaryGetValue(v19, v28)) != 0
                      && (v22 = v21, v23 = CFGetTypeID(v21), v23 == CFArrayGetTypeID()))
                    {
                      v33.length = CFArrayGetCount(v22);
                      v33.location = 0;
                      v5 = v29;
                      if (CFArrayContainsValue(v22, v33, a2))
                      {
                        v24 = *v26;
                        *v26 = v15;
                        CFRetain(v15);
                        if (v24)
                          CFRelease(v24);
                        v5 = v29;
                        break;
                      }
                    }
                    else
                    {
                      v5 = v29;
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v6;
    }
  }
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  if (listOfVideoEncodersOut)
    CFRelease(listOfVideoEncodersOut);
  return v5;
}

double exportSettings_tierDimension()
{
  FigCFDictionaryGetCGFloatIfPresent();
  FigCFDictionaryGetCGFloatIfPresent();
  return 0.0;
}

uint64_t FigCPEProtectorGetClassID()
{
  MEMORY[0x19402F294](&FigCPEProtectorGetClassID_sRegisterFigCPEProtectorTypeOnce, RegisterFigCPEProtectorType);
  return sFigCPEProtectorClassID;
}

uint64_t RegisterFigCPEProtectorType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigCPEProtectorGetTypeID()
{
  MEMORY[0x19402F294](&FigCPEProtectorGetClassID_sRegisterFigCPEProtectorTypeOnce, RegisterFigCPEProtectorType);
  return CMBaseClassGetCFTypeID();
}

CFStringRef FigCPEProtectorCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigCPEProtector %p]"), a1);
}

uint64_t FigMetricItemVariantChangeStartEventDeserializeAndCopy(void *a1, uint64_t a2)
{
  uint64_t CMTime;
  xpc_object_t value;
  xpc_object_t v6;
  uint64_t AllocatorForMedia;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  CFTypeRef v12;
  CFTypeRef v13;
  CFTypeRef v14;
  CFTypeRef v15;
  CFTypeRef cf;
  __int128 v17;
  uint64_t v18;

  v17 = *MEMORY[0x1E0CA2E18];
  v18 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v15 = 0;
  cf = 0;
  v13 = 0;
  v14 = 0;
  v12 = 0;
  if (a1 && a2)
  {
    CMTime = FigXPCMessageGetCMTime();
    if (!(_DWORD)CMTime)
    {
      CMTime = FigXPCMessageCopyCFDate();
      if (!(_DWORD)CMTime)
      {
        CMTime = FigXPCMessageCopyCFString();
        if (!(_DWORD)CMTime)
        {
          CMTime = FigXPCMessageCopyCFArray();
          if (!(_DWORD)CMTime)
          {
            value = xpc_dictionary_get_value(a1, "FromVariant");
            CMTime = FigAlternateCreateWithXPCObject(value, 0, &v14);
            if (!(_DWORD)CMTime)
            {
              v6 = xpc_dictionary_get_value(a1, "ToVariant");
              CMTime = FigAlternateCreateWithXPCObject(v6, 0, &v13);
              if (!(_DWORD)CMTime)
              {
                AllocatorForMedia = FigGetAllocatorForMedia();
                v10 = v17;
                v11 = v18;
                CMTime = ((uint64_t (*)(uint64_t, __int128 *, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, uint64_t))FigMetricItemVariantChangeStartEventCreate)(AllocatorForMedia, &v10, cf, v15, v13, v14, v12, a2);
              }
            }
          }
        }
      }
    }
  }
  else
  {
    CMTime = FigSignalErrorAt();
  }
  v8 = CMTime;
  if (cf)
    CFRelease(cf);
  if (v15)
    CFRelease(v15);
  if (v13)
    CFRelease(v13);
  if (v14)
    CFRelease(v14);
  if (v12)
    CFRelease(v12);
  return v8;
}

uint64_t FigMetricItemVariantChangeStartEventCreate(const __CFAllocator *a1, __int128 *a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7, _QWORD *a8)
{
  uint64_t v16;
  uint64_t DerivedStorage;
  uint64_t v18;
  void *v19;
  CFAbsoluteTime Current;
  __int128 v21;
  CFTypeRef v22;
  CFTypeRef v23;
  CFTypeRef v24;
  CFTypeRef v25;

  if (!a8)
    return FigSignalErrorAt();
  FigMetricEventGetClassID();
  v16 = CMDerivedObjectCreate();
  if (!(_DWORD)v16)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v18 = FigSimpleMutexCreate();
    *(_QWORD *)(DerivedStorage + 80) = v18;
    if (v18)
    {
      *(_QWORD *)(DerivedStorage + 8) = 7;
      if (a3)
      {
        v19 = (void *)CFRetain(a3);
      }
      else
      {
        Current = CFAbsoluteTimeGetCurrent();
        v19 = CFDateCreate(a1, Current);
      }
      *(_QWORD *)(DerivedStorage + 16) = v19;
      v21 = *a2;
      *(_QWORD *)(DerivedStorage + 48) = *((_QWORD *)a2 + 2);
      *(_OWORD *)(DerivedStorage + 32) = v21;
      if (a4)
        v22 = CFRetain(a4);
      else
        v22 = 0;
      *(_QWORD *)(DerivedStorage + 24) = v22;
      if (a5)
        v23 = CFRetain(a5);
      else
        v23 = 0;
      *(_QWORD *)(DerivedStorage + 56) = v23;
      if (a6)
        v24 = CFRetain(a6);
      else
        v24 = 0;
      *(_QWORD *)(DerivedStorage + 64) = v24;
      if (a7)
        v25 = CFRetain(a7);
      else
        v25 = 0;
      *(_QWORD *)(DerivedStorage + 72) = v25;
      v16 = FigMetricEventClassInstallEventDeserializeHandler();
      if (!(_DWORD)v16)
        *a8 = 0;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return v16;
}

uint64_t meivcs_finalize()
{
  _QWORD *DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = (const void *)DerivedStorage[7];
  if (v1)
    CFRelease(v1);
  v2 = (const void *)DerivedStorage[8];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)DerivedStorage[2];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)DerivedStorage[3];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)DerivedStorage[9];
  if (v5)
    CFRelease(v5);
  return FigSimpleMutexDestroy();
}

CFStringRef meivcs_copyDebugDesc(uint64_t a1)
{
  const __CFAllocator *AllocatorForMedia;

  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("[FigMetricItemVariantChangeStartEvent %p]"), a1);
}

void meivcs_setImmutable()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 80));
  *(_BYTE *)DerivedStorage = 0;
  JUMPOUT(0x19402EF04);
}

uint64_t meivcs_isMutable()
{
  unsigned __int8 *DerivedStorage;
  uint64_t v1;

  DerivedStorage = (unsigned __int8 *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*((_QWORD *)DerivedStorage + 10));
  v1 = *DerivedStorage;
  MEMORY[0x19402EF04](*((_QWORD *)DerivedStorage + 10));
  return v1;
}

uint64_t meivcs_getMetricEventID()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
}

uint64_t meivcs_getDate()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
}

CFTypeRef meivcs_copySessionID()
{
  uint64_t DerivedStorage;
  const void *v1;
  CFTypeRef v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 80));
  v1 = *(const void **)(DerivedStorage + 24);
  if (v1)
    v2 = CFRetain(v1);
  else
    v2 = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 80));
  return v2;
}

uint64_t meivcs_setSessionID(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 80));
  if (*(_BYTE *)DerivedStorage)
  {
    v4 = *(const void **)(DerivedStorage + 24);
    *(_QWORD *)(DerivedStorage + 24) = a2;
    if (a2)
      CFRetain(a2);
    if (v4)
      CFRelease(v4);
    v5 = 0;
  }
  else
  {
    v5 = FigSignalErrorAt();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 80));
  return v5;
}

void meivcs_getMediaTime(uint64_t a1@<X8>)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 80));
  *(_OWORD *)a1 = *(_OWORD *)(DerivedStorage + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(DerivedStorage + 48);
  JUMPOUT(0x19402EF04);
}

uint64_t meivcs_setMediaTime(uint64_t a1, __int128 *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  __int128 v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 80));
  if (*(_BYTE *)DerivedStorage)
  {
    v4 = 0;
    v5 = *a2;
    *(_QWORD *)(DerivedStorage + 48) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(DerivedStorage + 32) = v5;
  }
  else
  {
    v4 = FigSignalErrorAt();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 80));
  return v4;
}

uint64_t meivcs_serialize(uint64_t a1, void *a2)
{
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  int64_t v10;
  void (*v11)(__int128 *__return_ptr, uint64_t);
  void (*v12)(uint64_t);
  uint64_t (*v13)(uint64_t);
  const void *v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  __int128 v19;
  uint64_t v20;
  xpc_object_t v21;
  xpc_object_t value;

  v21 = 0;
  value = 0;
  if (!a1 || !a2)
  {
    v6 = FigSignalErrorAt();
LABEL_33:
    v17 = v6;
    v14 = 0;
    goto LABEL_29;
  }
  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 80) + 8);
  if (v4)
    v5 = v4(a1);
  else
    v5 = 0;
  v6 = FigAlternateCopyAsXPCObject(v5, &value);
  if ((_DWORD)v6)
    goto LABEL_33;
  v7 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 80) + 16);
  v8 = v7 ? v7(a1) : 0;
  v6 = FigAlternateCopyAsXPCObject(v8, &v21);
  if ((_DWORD)v6)
    goto LABEL_33;
  v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  v10 = v9 ? v9(a1) : -12782;
  xpc_dictionary_set_int64(a2, "EventID", v10);
  v11 = *(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (v11)
  {
    v11(&v19, a1);
  }
  else
  {
    v19 = *MEMORY[0x1E0CA2E18];
    v20 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  }
  v6 = FigXPCMessageSetCMTime();
  if ((_DWORD)v6)
    goto LABEL_33;
  v12 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v12)
    v12(a1);
  v6 = FigXPCMessageSetCFDate();
  if ((_DWORD)v6)
    goto LABEL_33;
  v13 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v13)
    v14 = (const void *)v13(a1);
  else
    v14 = 0;
  v15 = FigXPCMessageSetCFString();
  if ((_DWORD)v15)
  {
    v17 = v15;
  }
  else
  {
    v16 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 80) + 24);
    if (v16)
      v16(a1);
    v17 = FigXPCMessageSetCFArray();
    if (!(_DWORD)v17)
    {
      xpc_dictionary_set_value(a2, "ToVariant", value);
      xpc_dictionary_set_value(a2, "FromVariant", v21);
    }
  }
LABEL_29:
  FigXPCRelease();
  FigXPCRelease();
  if (v14)
    CFRelease(v14);
  return v17;
}

uint64_t meivcs_getToVariant()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 56);
}

uint64_t meivcs_getFromVariant()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 64);
}

uint64_t meivcs_getLoadedTimeRanges()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 72);
}

uint64_t FigManifoldCreateRemoteForMovieFragmentStream(uint64_t a1, OpaqueCMBlockBuffer *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, _QWORD *a7)
{
  return manifoldRemote_manifoldCreateGuts(a1, 0, a2, a3, 0, a4, a5, a6, a7);
}

uint64_t manifoldRemote_manifoldCreateGuts(uint64_t a1, unsigned int a2, OpaqueCMBlockBuffer *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, _QWORD *a9)
{
  uint64_t v16;
  uint64_t ServerPID;
  uint64_t v18;
  uint64_t uint64;
  uint64_t v20;
  const void *v21;
  _QWORD *DerivedStorage;
  CFMutableDictionaryRef Mutable;
  const void *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD block[5];
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;

  v29 = 0;
  v30 = &v29;
  v31 = 0x2000000000;
  v32 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __mr_ensureClientEstablished_block_invoke;
  block[3] = &unk_1E2FAA5D0;
  block[4] = &v29;
  if (mr_ensureClientEstablished_sFigManifoldRemoteClientSetupOnce != -1)
    dispatch_once(&mr_ensureClientEstablished_sFigManifoldRemoteClientSetupOnce, block);
  v16 = *((unsigned int *)v30 + 6);
  _Block_object_dispose(&v29, 8);
  if ((_DWORD)v16)
    goto LABEL_37;
  ServerPID = FigXPCCreateBasicMessage();
  if ((_DWORD)ServerPID)
    goto LABEL_42;
  xpc_dictionary_set_uint64(0, "manifoldType", a2);
  ServerPID = FigXPCRemoteClientCopyMemoryRecipient();
  if ((_DWORD)ServerPID)
    goto LABEL_42;
  ServerPID = FigXPCRemoteClientCopyMemoryOrigin();
  if ((_DWORD)ServerPID)
    goto LABEL_42;
  if (a3 && CMBlockBufferIsEmpty(a3))
    v18 = FigXPCMessageSetCFBoolean();
  else
    v18 = FigXPCMessageSetBlockBufferUsingMemoryOrigin();
  v16 = v18;
  if ((_DWORD)v18)
    goto LABEL_37;
  if (CMGetAttachment(a3, CFSTR("FMFD_BufferDecryptor"), 0))
  {
    ServerPID = FigXPCRemoteClientGetServerPID();
    if ((_DWORD)ServerPID)
      goto LABEL_42;
    ServerPID = FigCPECryptorServerGetIDForCryptorByAssociatingWithClientPID();
    if ((_DWORD)ServerPID)
      goto LABEL_42;
    xpc_dictionary_set_uint64(0, "cryptorObjectID", 0);
  }
  if (a4)
    xpc_dictionary_set_BOOL(0, "installNewTrackCallback", 1);
  if (a6)
    xpc_dictionary_set_BOOL(0, "installAllNewTracksReadyCallback", 1);
  if (a5)
    xpc_dictionary_set_BOOL(0, "installErrorCallback", 1);
  xpc_dictionary_set_uint64(0, "movieManifoldStreamFlags", a8);
  ServerPID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)ServerPID)
    goto LABEL_42;
  uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E0CA36A0]);
  if (!uint64)
  {
    ServerPID = FigSignalErrorAt();
LABEL_42:
    v16 = ServerPID;
LABEL_37:
    v24 = 0;
    goto LABEL_38;
  }
  v20 = uint64;
  block[0] = 0;
  FigManifoldGetClassID();
  v16 = CMDerivedObjectCreate();
  v21 = (const void *)block[0];
  if ((_DWORD)v16)
    goto LABEL_44;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  *DerivedStorage = v20;
  DerivedStorage[9] = 0;
  DerivedStorage[11] = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B3A0]);
  DerivedStorage[2] = Mutable;
  if (!Mutable)
  {
    v16 = FigSignalErrorAt();
    v21 = (const void *)block[0];
LABEL_44:
    if (v21)
      CFRelease(v21);
    v24 = 0;
    if ((_DWORD)v16)
      goto LABEL_38;
    goto LABEL_27;
  }
  v24 = (const void *)block[0];
LABEL_27:
  v25 = FigXPCRemoteClientAssociateObject();
  if (!(_DWORD)v25)
  {
    v26 = (_QWORD *)CMBaseObjectGetDerivedStorage();
    if (a7)
      v26[6] = a7;
    if (a4)
      v26[3] = a4;
    if (a6)
      v26[4] = a6;
    if (a5)
      v26[5] = a5;
    v16 = 0;
    *a9 = v24;
    goto LABEL_37;
  }
  v16 = v25;
LABEL_38:
  if (v24)
    CFRelease(v24);
  FigXPCRelease();
  FigXPCRelease();
  return v16;
}

uint64_t FigManifoldCreateRemoteForMPEG2(uint64_t a1, OpaqueCMBlockBuffer *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  return manifoldRemote_manifoldCreateGuts(a1, 1u, a2, a3, a4, a5, a6, 0, a7);
}

uint64_t FigManifoldCreateRemoteForWebVTT(uint64_t a1, OpaqueCMBlockBuffer *a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  return manifoldRemote_manifoldCreateGuts(a1, 2u, a2, a3, 0, a4, a5, 0, a6);
}

uint64_t FigManifoldCreateRemoteForICY(uint64_t a1, OpaqueCMBlockBuffer *a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  return manifoldRemote_manifoldCreateGuts(a1, 3u, a2, a3, 0, a4, a5, 0, a6);
}

uint64_t __mr_ensureClientEstablished_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = FigXPCRemoteClientCreate();
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t manifoldRemote_deadConnectionCallback()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(result + 8) = 1;
  return result;
}

uint64_t manifoldRemote_invalidate()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 8))
  {
    v1 = FigSignalErrorAt();
  }
  else
  {
    v0 = FigXPCCreateBasicMessage();
    if ((_DWORD)v0)
      v1 = v0;
    else
      v1 = FigXPCRemoteClientSendSyncMessage();
  }
  FigXPCRelease();
  return v1;
}

uint64_t manifoldRemote_finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!FigXPCRemoteClientDisassociateObject()
    && !*(_BYTE *)(DerivedStorage + 8)
    && !FigXPCCreateBasicMessage())
  {
    FigXPCRemoteClientSendAsyncMessage();
  }
  v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 56);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 56) = 0;
  }
  v3 = *(const void **)(DerivedStorage + 64);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 64) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 72);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 72) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 80);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 80) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 88);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 88) = 0;
  }
  v7 = *(const void **)(DerivedStorage + 96);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 96) = 0;
  }
  v8 = *(const void **)(DerivedStorage + 104);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 104) = 0;
  }
  v9 = *(const void **)(DerivedStorage + 112);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(DerivedStorage + 112) = 0;
  }
  v10 = *(const void **)(DerivedStorage + 120);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(DerivedStorage + 120) = 0;
  }
  v11 = *(const void **)(DerivedStorage + 128);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(DerivedStorage + 128) = 0;
  }
  return FigXPCRelease();
}

CFStringRef manifoldRemote_copyDebugDesc(uint64_t a1)
{
  _QWORD *DerivedStorage;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigRemoteManifold %p ObjectID: %016llx]"), a1, *DerivedStorage);
}

uint64_t manifoldRemote_copyProperty(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t BlockBufferData;
  uint64_t uint64;
  uint64_t v8;
  CFTypeRef cf;
  xpc_object_t xdict;
  uint64_t v12;
  CFTypeRef v13;

  v12 = 0;
  v13 = 0;
  cf = 0;
  xdict = 0;
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 8))
  {
    BlockBufferData = FigSignalErrorAt();
    goto LABEL_20;
  }
  if (a4)
  {
    BlockBufferData = FigXPCCreateBasicMessage();
    if ((_DWORD)BlockBufferData)
      goto LABEL_20;
    BlockBufferData = FigXPCMessageSetCFString();
    if ((_DWORD)BlockBufferData)
      goto LABEL_20;
    BlockBufferData = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if ((_DWORD)BlockBufferData)
      goto LABEL_20;
    if (FigCFEqual())
    {
      uint64 = xpc_dictionary_get_uint64(xdict, "formatReader");
      if (uint64)
      {
        BlockBufferData = FigFormatReaderXPCRemoteRetainCopiedFormatReader(uint64, 1, &cf);
        if ((_DWORD)BlockBufferData)
          goto LABEL_20;
        BlockBufferData = FigAssetCreateWithFormatReader(a3, cf, 0, 0, &v13);
        if ((_DWORD)BlockBufferData)
          goto LABEL_20;
      }
LABEL_15:
      v8 = 0;
      *a4 = v13;
      v13 = 0;
      goto LABEL_16;
    }
    if (FigCFEqual())
    {
      BlockBufferData = FigXPCMessageCreateBlockBufferData();
      if (!(_DWORD)BlockBufferData)
        goto LABEL_15;
    }
    else
    {
      BlockBufferData = FigXPCMessageCopyCFObject();
      if (!(_DWORD)BlockBufferData)
        goto LABEL_15;
    }
LABEL_20:
    v8 = BlockBufferData;
    goto LABEL_21;
  }
  v8 = 0;
LABEL_21:
  if (v13)
    CFRelease(v13);
LABEL_16:
  if (cf)
    CFRelease(cf);
  FigXPCRelease();
  FigXPCRelease();
  return v8;
}

uint64_t manifoldRemote_setProperty()
{
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 8))
    return FigSignalErrorAt();
  else
    return FigXPCSendStdSetPropertyMessage();
}

uint64_t manifoldRemote_injectData(const void *a1, int64_t a2, unsigned int a3, void *a4)
{
  uint64_t DerivedStorage;
  uint64_t ServerPID;
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef v12;
  const void *v13;
  const void *v14;
  const void *v15;
  uint64_t (*v16)(CFTypeRef, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v17;
  const void *v18;
  CFTypeRef v19;
  uint64_t (*v20)(CFTypeRef, _QWORD, uint64_t, CFTypeRef *);
  const void *v21;
  CFTypeRef v22;
  uint64_t v23;
  uint64_t v24;
  CFTypeRef v26;
  CFTypeRef cf;
  int v28;
  uint64_t value;
  xpc_object_t v30;
  xpc_object_t xdict;

  v30 = 0;
  xdict = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  value = 0;
  v28 = 0;
  if (a1)
    CFRetain(a1);
  v26 = 0;
  cf = 0;
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    ServerPID = FigSignalErrorAt();
    goto LABEL_48;
  }
  ServerPID = FigXPCCreateBasicMessage();
  if ((_DWORD)ServerPID)
    goto LABEL_48;
  xpc_dictionary_set_int64(xdict, "dataStartReference", a2);
  xpc_dictionary_set_uint64(xdict, "injectFlags", a3);
  v10 = CMGetAttachment(a4, CFSTR("FMFD_BufferDecryptor"), 0);
  v11 = CMGetAttachment(a4, CFSTR("FMFD_BufferAudioDecryptor"), 0);
  if (!v10)
    goto LABEL_37;
  v12 = v11;
  FigBasicAESCPECryptorGetClassID();
  if (!CMBaseObjectIsMemberOfClass())
  {
    ServerPID = FigXPCRemoteClientGetServerPID();
    if (!(_DWORD)ServerPID)
    {
      ServerPID = FigCPECryptorServerGetIDForCryptorByAssociatingWithClientPID();
      if (!(_DWORD)ServerPID)
      {
        xpc_dictionary_set_uint64(xdict, "cryptorObjectID", value);
        if (!v12)
          goto LABEL_37;
        ServerPID = FigXPCRemoteClientGetServerPID();
        if (!(_DWORD)ServerPID)
        {
          ServerPID = FigCPECryptorServerGetIDForCryptorByAssociatingWithClientPID();
          if (!(_DWORD)ServerPID)
          {
            xpc_dictionary_set_uint64(xdict, "audioCryptorObjectID", value);
            goto LABEL_37;
          }
        }
      }
    }
    goto LABEL_48;
  }
  xpc_dictionary_set_BOOL(xdict, "UseAESCryptor", 1);
  if (FigCFEqual())
  {
    xpc_dictionary_set_BOOL(xdict, "UseExistingAESCryptor", 1);
  }
  else
  {
    v13 = *(const void **)(DerivedStorage + 96);
    *(_QWORD *)(DerivedStorage + 96) = v10;
    CFRetain(v10);
    if (v13)
      CFRelease(v13);
    v14 = *(const void **)(DerivedStorage + 104);
    if (v14)
    {
      CFRelease(v14);
      *(_QWORD *)(DerivedStorage + 104) = 0;
    }
    v15 = *(const void **)(DerivedStorage + 112);
    if (v15)
    {
      CFRelease(v15);
      *(_QWORD *)(DerivedStorage + 112) = 0;
    }
  }
  v16 = *(uint64_t (**)(CFTypeRef, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
  if (!v16)
    goto LABEL_49;
  v17 = *MEMORY[0x1E0C9AE00];
  ServerPID = v16(v10, *MEMORY[0x1E0CA31D8], *MEMORY[0x1E0C9AE00], &cf);
  if ((_DWORD)ServerPID)
    goto LABEL_48;
  if (!FigCFEqual())
  {
    ServerPID = FigXPCMessageSetCFData();
    if ((_DWORD)ServerPID)
      goto LABEL_48;
    v18 = *(const void **)(DerivedStorage + 104);
    v19 = cf;
    *(_QWORD *)(DerivedStorage + 104) = cf;
    if (v19)
      CFRetain(v19);
    if (v18)
      CFRelease(v18);
  }
  v20 = *(uint64_t (**)(CFTypeRef, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 48);
  if (!v20)
  {
LABEL_49:
    v24 = 4294954514;
    goto LABEL_50;
  }
  ServerPID = v20(v10, *MEMORY[0x1E0CA31C8], v17, &v26);
  if ((_DWORD)ServerPID)
    goto LABEL_48;
  if (FigCFEqual())
    goto LABEL_37;
  ServerPID = FigXPCMessageSetCFData();
  if ((_DWORD)ServerPID)
  {
LABEL_48:
    v24 = ServerPID;
    goto LABEL_50;
  }
  v21 = *(const void **)(DerivedStorage + 112);
  v22 = v26;
  *(_QWORD *)(DerivedStorage + 112) = v26;
  if (v22)
    CFRetain(v22);
  if (v21)
    CFRelease(v21);
LABEL_37:
  if (CMGetAttachment(a4, CFSTR("FBPAKey_TimedData"), 0))
    xpc_dictionary_set_BOOL(xdict, "timedMetadata", 1);
  if (a4 && CMBlockBufferIsEmpty((CMBlockBufferRef)a4))
    v23 = FigXPCMessageSetCFBoolean();
  else
    v23 = FigXPCMessageSetBlockBufferUsingMemoryOrigin();
  v24 = v23;
  if (!(_DWORD)v23)
  {
    ServerPID = FigMemoryRecipientAppendRecipientStateUpdateToXPCMessage();
    if (!(_DWORD)ServerPID)
    {
      ServerPID = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)ServerPID)
      {
        ServerPID = FigMemoryOriginUpdateRecipientStateFromXPCMessage();
        if (!(_DWORD)ServerPID)
          ServerPID = manifoldRemote_processPendingCallbacks((uint64_t)a1, v30);
      }
    }
    goto LABEL_48;
  }
LABEL_50:
  if (cf)
    CFRelease(cf);
  if (v26)
    CFRelease(v26);
  if (a1)
    CFRelease(a1);
  FigXPCRelease();
  FigXPCRelease();
  return v24;
}

uint64_t manifoldRemote_noteStreamEnd(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 8))
  {
    v2 = FigSignalErrorAt();
  }
  else
  {
    v2 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v2)
    {
      FigXPCMessageSetOSStatus();
      v2 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)v2)
        v2 = manifoldRemote_processPendingCallbacks(a1, 0);
    }
  }
  v3 = v2;
  FigXPCRelease();
  FigXPCRelease();
  return v3;
}

uint64_t manifoldRemote_copyCurrentFormatDescriptionForTrack(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 8))
  {
    v2 = FigSignalErrorAt();
  }
  else
  {
    v2 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v2)
    {
      FigXPCMessageSetInt32();
      v2 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)v2)
      {
        FigGetAllocatorForMedia();
        v2 = FigXPCMessageCopyFormatDescription2();
        if (!(_DWORD)v2)
          v2 = manifoldRemote_processPendingCallbacks(a1, 0);
      }
    }
  }
  v3 = v2;
  FigXPCRelease();
  FigXPCRelease();
  return v3;
}

uint64_t manifoldRemote_installCallbacksForTrack(uint64_t a1, int a2, uint64_t *a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *Instance;
  const void *v15;
  uint64_t v16;
  uint64_t v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    v10 = FigSignalErrorAt();
    goto LABEL_24;
  }
  v9 = DerivedStorage;
  v10 = FigXPCCreateBasicMessage();
  if ((_DWORD)v10)
  {
LABEL_24:
    v17 = v10;
    goto LABEL_22;
  }
  FigXPCMessageSetInt32();
  if (!a3)
  {
    v12 = 0;
    v11 = 0;
LABEL_13:
    v13 = 0;
    goto LABEL_14;
  }
  if (*a3)
  {
    xpc_dictionary_set_BOOL(0, "installFormatDescriptionOrDecryptorChangedCallback", 1);
    v11 = *a3;
  }
  else
  {
    v11 = 0;
  }
  if (a3[1])
  {
    xpc_dictionary_set_BOOL(0, "installPushSampleBufferCallback", 1);
    v12 = a3[1];
  }
  else
  {
    v12 = 0;
  }
  if (!a3[2])
    goto LABEL_13;
  xpc_dictionary_set_BOOL(0, "installTrackEndedCallback", 1);
  v13 = a3[2];
LABEL_14:
  if (FigManifoldRemoteCallbackInfoGetTypeID_once != -1)
    dispatch_once(&FigManifoldRemoteCallbackInfoGetTypeID_once, &__block_literal_global_72);
  Instance = (_QWORD *)_CFRuntimeCreateInstance();
  v15 = Instance;
  if (Instance)
  {
    Instance[2] = v11;
    Instance[3] = v12;
    Instance[4] = v13;
    Instance[5] = a4;
  }
  else
  {
    v17 = FigSignalErrorAt();
    if ((_DWORD)v17)
      goto LABEL_22;
  }
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(v9 + 16), (const void *)a2, v15);
  v16 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!(_DWORD)v16)
    v16 = manifoldRemote_processPendingCallbacks(a1, 0);
  v17 = v16;
  if (v15)
    CFRelease(v15);
LABEL_22:
  FigXPCRelease();
  FigXPCRelease();
  return v17;
}

uint64_t manifoldRemote_flush(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 8))
  {
    v2 = FigSignalErrorAt();
  }
  else
  {
    v2 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v2)
    {
      v2 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)v2)
        v2 = manifoldRemote_processPendingCallbacks(a1, 0);
    }
  }
  v3 = v2;
  FigXPCRelease();
  FigXPCRelease();
  return v3;
}

uint64_t manifoldRemote_copyTrackProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 8) || !a3 || !a5)
  {
    v8 = FigSignalErrorAt();
LABEL_12:
    v10 = v8;
    goto LABEL_10;
  }
  v8 = FigXPCCreateBasicMessage();
  if ((_DWORD)v8)
    goto LABEL_12;
  FigXPCMessageSetInt32();
  v8 = FigXPCMessageSetCFString();
  if ((_DWORD)v8)
    goto LABEL_12;
  v8 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v8)
    goto LABEL_12;
  v9 = FigXPCMessageCopyCFObject();
  if ((_DWORD)v9)
  {
    v10 = v9;
  }
  else
  {
    v10 = manifoldRemote_processPendingCallbacks(a1, 0);
    if (!(_DWORD)v10)
      *a5 = 0;
  }
LABEL_10:
  FigXPCRelease();
  FigXPCRelease();
  return v10;
}

uint64_t manifoldRemote_reannounceUnregisteredTracks(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 8))
  {
    v2 = FigSignalErrorAt();
  }
  else
  {
    v2 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v2)
    {
      v2 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)v2)
        v2 = manifoldRemote_processPendingCallbacks(a1, 0);
    }
  }
  v3 = v2;
  FigXPCRelease();
  FigXPCRelease();
  return v3;
}

uint64_t manifoldRemote_processPendingCallbacks(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  void *v4;
  size_t count;
  size_t v6;
  size_t v7;
  xpc_object_t v8;
  void *v9;
  uint64_t DerivedStorage;
  void (*v11)(uint64_t, _QWORD);
  uint64_t v12;
  uint64_t Int32;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t OSStatus;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, _QWORD, uint64_t, CFTypeRef);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t uint64;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  int64_t int64;
  uint64_t v36;
  CFTypeRef v37;
  CFTypeRef v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  CFTypeRef v46;
  CFTypeRef *v47;
  const void *v48;
  uint64_t (*v49)(uint64_t, uint64_t, _QWORD, CFTypeRef, CFTypeRef);
  uint64_t v50;
  uint64_t (*v51)(uint64_t, const __CFAllocator *, uint64_t, _QWORD, CFTypeRef *);
  CFDataRef v52;
  CFDataRef v53;
  CFTypeRef v54;
  uint64_t (*v55)(CFTypeRef, uint64_t, CFDataRef);
  uint64_t v57;
  const __CFAllocator *v58;
  UInt8 bytes[8];
  CFTypeRef v60;
  CFTypeRef v61;

  value = xpc_dictionary_get_value(xdict, "pendingCallbacks");
  if (!value)
    return 0;
  v4 = value;
  count = xpc_array_get_count(value);
  if (!count)
    return 0;
  v6 = count;
  v7 = 0;
  v58 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v57 = *MEMORY[0x1E0CA31D8];
  while (1)
  {
    v8 = xpc_array_get_value(v4, v7);
    if (!v8)
      return FigSignalErrorAt();
    v9 = v8;
    switch(xpc_dictionary_get_uint64(v8, "callbackType"))
    {
      case 0u:
        DerivedStorage = CMBaseObjectGetDerivedStorage();
        v11 = *(void (**)(uint64_t, _QWORD))(DerivedStorage + 32);
        if (v11)
          v11(a1, *(_QWORD *)(DerivedStorage + 48));
        goto LABEL_52;
      case 1u:
        v12 = CMBaseObjectGetDerivedStorage();
        Int32 = FigXPCMessageGetInt32();
        v14 = FigXPCMessageGetInt32();
        v15 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 24);
        if (v15)
        {
          v16 = v15(a1, *(_QWORD *)(v12 + 48), Int32, v14);
          if ((_DWORD)v16)
            return v16;
        }
        goto LABEL_52;
      case 2u:
        v17 = CMBaseObjectGetDerivedStorage();
        v61 = 0;
        v18 = FigXPCMessageGetInt32();
        OSStatus = FigXPCMessageGetOSStatus();
        v20 = FigXPCMessageCopyCFDictionary();
        if ((_DWORD)v20)
          goto LABEL_14;
        v21 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, CFTypeRef))(v17 + 40);
        if (v21)
        {
          v20 = v21(a1, v18, *(_QWORD *)(v17 + 48), OSStatus, v61);
LABEL_14:
          v22 = v20;
        }
        else
        {
          v22 = 0;
        }
        v38 = v61;
        if (!v61)
          goto LABEL_51;
        goto LABEL_50;
      case 3u:
        v23 = CMBaseObjectGetDerivedStorage();
        v60 = 0;
        v61 = 0;
        *(_QWORD *)bytes = 0;
        v24 = FigXPCMessageGetInt32();
        v25 = CFDictionaryGetValue(*(CFDictionaryRef *)(v23 + 16), (const void *)(int)v24);
        if (!v25)
          goto LABEL_62;
        v26 = v25;
        FigGetAllocatorForMedia();
        v27 = FigXPCMessageCopyFormatDescription2();
        if ((_DWORD)v27)
          goto LABEL_43;
        uint64 = xpc_dictionary_get_uint64(v9, "cryptorObjectID");
        v29 = xpc_dictionary_get_BOOL(v9, "useDummyAESCryptor");
        if (uint64)
        {
          v27 = FigCPECryptorServerCopyCryptorForID();
          if ((_DWORD)v27)
            goto LABEL_43;
        }
        else if (v29)
        {
          v45 = (uint64_t *)(v23 + 128);
          if (!*(_QWORD *)(v23 + 128))
          {
            v27 = FigCPEProtectorCreateForScheme((uint64_t)v58, CFSTR("com.apple.basicAES"), 0, v23 + 128);
            if ((_DWORD)v27)
              goto LABEL_43;
          }
          v48 = *(const void **)(v23 + 120);
          v47 = (CFTypeRef *)(v23 + 120);
          v46 = v48;
          if (v48)
            goto LABEL_39;
          v50 = *v45;
          v51 = *(uint64_t (**)(uint64_t, const __CFAllocator *, uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
          if (!v51)
            goto LABEL_61;
          v27 = v51(v50, v58, 1, 0, v47);
          if ((_DWORD)v27)
            goto LABEL_43;
          v52 = CFDataCreate(v58, bytes, 1);
          *(_QWORD *)bytes = v52;
          if (!v52)
          {
LABEL_62:
            v27 = FigSignalErrorAt();
            goto LABEL_43;
          }
          v53 = v52;
          v54 = *v47;
          v55 = *(uint64_t (**)(CFTypeRef, uint64_t, CFDataRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
          if (!v55)
          {
LABEL_61:
            v22 = 4294954514;
            goto LABEL_45;
          }
          v27 = v55(v54, v57, v53);
          if ((_DWORD)v27)
            goto LABEL_43;
          v46 = *v47;
          if (*v47)
LABEL_39:
            v46 = CFRetain(v46);
          v60 = v46;
        }
        v49 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, CFTypeRef, CFTypeRef))v26[2];
        if (v49)
        {
          v27 = v49(a1, v24, v26[5], v61, v60);
LABEL_43:
          v22 = v27;
          goto LABEL_45;
        }
        v22 = 0;
LABEL_45:
        if (*(_QWORD *)bytes)
          CFRelease(*(CFTypeRef *)bytes);
        if (v61)
          CFRelease(v61);
        v38 = v60;
        if (v60)
LABEL_50:
          CFRelease(v38);
LABEL_51:
        if ((_DWORD)v22)
          return v22;
LABEL_52:
        if (v6 == ++v7)
          return 0;
        break;
      case 4u:
        v30 = CMBaseObjectGetDerivedStorage();
        v61 = 0;
        v31 = FigXPCMessageGetInt32();
        v32 = CFDictionaryGetValue(*(CFDictionaryRef *)(v30 + 16), (const void *)(int)v31);
        if (!v32)
        {
          v22 = FigSignalErrorAt();
          if ((_DWORD)v22)
            return v22;
          goto LABEL_52;
        }
        v33 = v32;
        if (!v32[3])
          goto LABEL_52;
        v34 = xpc_dictionary_get_uint64(v9, "pushSampleFlags");
        int64 = xpc_dictionary_get_int64(v9, "dataStartReference");
        FigGetAllocatorForMedia();
        v36 = FigXPCMessageCopyCMSampleBuffer();
        v37 = v61;
        if ((_DWORD)v36)
        {
          v22 = v36;
        }
        else
        {
          v22 = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, int64_t, CFTypeRef))v33[3])(a1, v31, v33[5], v34, int64, v61);
          v37 = v61;
        }
        if (v37)
        {
          v38 = v37;
          goto LABEL_50;
        }
        goto LABEL_51;
      case 5u:
        v39 = CMBaseObjectGetDerivedStorage();
        v40 = FigXPCMessageGetInt32();
        v41 = CFDictionaryGetValue(*(CFDictionaryRef *)(v39 + 16), (const void *)(int)v40);
        if (v41)
        {
          v42 = v41;
          if (!v41[4])
            goto LABEL_52;
          v43 = FigXPCMessageGetOSStatus();
          v44 = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t))v42[4])(a1, v40, v42[5], v43);
        }
        else
        {
          v44 = FigSignalErrorAt();
        }
        v22 = v44;
        if ((_DWORD)v44)
          return v22;
        goto LABEL_52;
      default:
        return 4294951256;
    }
  }
}

CFStringRef manifoldCallbackInfo_copyDebugDesc(_QWORD *a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigManifoldCallbackInfo %p outputCallbacks %p %p %p refCon %p]"), a1, a1[2], a1[3], a1[4], a1[5]);
}

uint64_t FigTTMLRegionCreate(const __CFAllocator *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t DerivedStorage;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v11;
  uint64_t v12;

  if (a4)
  {
    FigTTMLNodeGetClassID();
    v8 = CMDerivedObjectCreate();
    if (!(_DWORD)v8)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v8 = FigTTMLInitializeNodeBaseStorage(DerivedStorage, (__int128 *)a3);
      if (!(_DWORD)v8)
      {
        v8 = FigTTMLAddCurrentElementAttributesToDictionary(a2, *(__CFDictionary **)(DerivedStorage + 24));
        if (!(_DWORD)v8)
        {
          Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
          *(_QWORD *)(DerivedStorage + 136) = Mutable;
          if (Mutable)
          {
            v11 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
            *(_QWORD *)(DerivedStorage + 144) = v11;
            if (v11)
            {
              *(_QWORD *)a3 = 0;
              *(_QWORD *)(a3 + 8) = 0;
              v12 = FigTTMLParseNode(a2, (uint64_t (*)(uint64_t, uint64_t *, CFTypeRef *))figTTMLRegionConsumeChildNode, (uint64_t *)a3);
              if (!(_DWORD)v12)
                *a4 = 0;
              return v12;
            }
          }
          return FigSignalErrorAt();
        }
      }
    }
    return v8;
  }
  return FigSignalErrorAt();
}

uint64_t figTTMLRegionConsumeChildNode(uint64_t a1, CFTypeRef *a2, void **a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  CFAllocatorRef v9;
  __CFArray *v10;
  CFAllocatorRef v11;
  uint64_t v12;
  CFTypeRef cf;
  CFTypeRef v15;
  void *value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v15 = 0;
  value = 0;
  cf = 0;
  v7 = FigTTMLGetLibXMLAccess();
  if (!v7)
  {
    v12 = FigSignalErrorAt();
    goto LABEL_18;
  }
  if ((*(unsigned int (**)(uint64_t))(v7 + 72))(a1) != 1)
    goto LABEL_13;
  v8 = FigTTMLCopyNamespaceAndLocalNameOfCurrentNode(a1, (const char **)&v15, (CFStringRef *)&cf);
  if ((_DWORD)v8)
    goto LABEL_23;
  if (FigCFEqual() && FigCFEqual())
  {
    v9 = CFGetAllocator(*a2);
    v8 = FigTTMLStyleCreate((uint64_t)v9, a1, (uint64_t)a2, &value);
    if (!(_DWORD)v8)
    {
      v10 = *(__CFArray **)(DerivedStorage + 136);
LABEL_12:
      CFArrayAppendValue(v10, value);
      goto LABEL_14;
    }
    goto LABEL_23;
  }
  if (!FigCFEqual() || !FigCFEqual())
  {
LABEL_13:
    v8 = FigTTMLSkipNode(a1, (uint64_t *)a2, *(__CFArray **)(DerivedStorage + 128));
    if (!(_DWORD)v8)
    {
LABEL_14:
      v12 = 0;
      if (a3)
      {
        *a3 = value;
        value = 0;
      }
      goto LABEL_16;
    }
    goto LABEL_23;
  }
  v11 = CFGetAllocator(*a2);
  v8 = FigTTMLSetCreate((uint64_t)v11, a1, (uint64_t)a2, &value);
  if (!(_DWORD)v8)
  {
    v10 = *(__CFArray **)(DerivedStorage + 144);
    goto LABEL_12;
  }
LABEL_23:
  v12 = v8;
LABEL_16:
  if (cf)
    CFRelease(cf);
LABEL_18:
  if (v15)
    CFRelease(v15);
  if (value)
    CFRelease(value);
  return v12;
}

uint64_t FigTTMLRegionCreateDefault(const __CFAllocator *a1, __int128 *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t DerivedStorage;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v9;
  uint64_t v10;

  if (a3)
  {
    FigTTMLNodeGetClassID();
    v6 = CMDerivedObjectCreate();
    if (!(_DWORD)v6)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v6 = FigTTMLInitializeNodeBaseStorage(DerivedStorage, a2);
      if (!(_DWORD)v6)
      {
        CFDictionaryAddValue(*(CFMutableDictionaryRef *)(DerivedStorage + 24), CFSTR("http://www.w3.org/XML/1998/namespace id"), &stru_1E2FD85F8);
        Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
        *(_QWORD *)(DerivedStorage + 136) = Mutable;
        if (Mutable)
        {
          v9 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
          *(_QWORD *)(DerivedStorage + 144) = v9;
          if (v9)
          {
            v10 = 0;
            *a3 = 0;
            return v10;
          }
        }
        return FigSignalErrorAt();
      }
    }
    return v6;
  }
  return FigSignalErrorAt();
}

uint64_t FigTTMLRegionCopyID(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  CFTypeRef v4;
  uint64_t result;
  void *value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  value = 0;
  if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(DerivedStorage + 24), CFSTR("http://www.w3.org/XML/1998/namespace id"), (const void **)&value))return FigSignalErrorAt();
  if (value)
    v4 = CFRetain(value);
  else
    v4 = 0;
  result = 0;
  *a2 = v4;
  return result;
}

void figTTMLRegion_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigTTMLReleaseNodeBaseStorage(DerivedStorage);
  v1 = *(const void **)(DerivedStorage + 136);
  if (v1)
    CFRelease(v1);
  v2 = *(const void **)(DerivedStorage + 144);
  if (v2)
    CFRelease(v2);
}

CFStringRef figTTMLRegion_CopyDebugDesc()
{
  const void *v0;
  CFStringRef v1;

  CMBaseObjectGetDerivedStorage();
  v0 = (const void *)FigCFCopyCompactDescription();
  v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("region: %@"), v0);
  if (v0)
    CFRelease(v0);
  return v1;
}

uint64_t figTTMLRegion_CopyChildNodeArray(uint64_t a1, uint64_t *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (a2)
    *a2 = FigCFArrayCreateConcatenationOfTwoArrays();
  else
    FigSignalErrorAt();
  return 0;
}

uint64_t figTTMLRegion_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2)
    return FigSignalErrorAt();
  *a2 = 10;
  return 0;
}

uint64_t FigByteFlumeCustomURLCreateWithURL(uint64_t a1, const __CFURL *a2, const void *a3, const void *a4, const void *a5, NSObject *a6, int a7, const void *a8, const void *a9, _QWORD *a10)
{
  uint64_t v17;
  uint64_t DerivedStorage;
  uint64_t v19;
  CFTypeRef v20;
  CFTypeRef v21;
  CFTypeRef v22;
  CFTypeRef v23;
  CFTypeRef v24;
  CFTypeRef v25;
  const __CFDictionary *Value;
  const __CFDictionary *v27;
  const void *v28;
  const __CFData *v29;
  const void *v30;
  uint64_t v31;
  void (*v32)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v33;

  if (a2 && a10)
  {
    FigByteFlumeGetClassID();
    v17 = CMDerivedObjectCreate();
    if ((_DWORD)v17)
      return v17;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v19 = FigByteFlumeBaseInitialize(a1, DerivedStorage);
    if (!(_DWORD)v19)
    {
      v20 = FigCFHTTPCreateURLString(a2);
      *(_QWORD *)(DerivedStorage + 88) = v20;
      if (v20)
      {
        *(_QWORD *)(DerivedStorage + 144) = 0;
        *(_DWORD *)(DerivedStorage + 216) = 0;
        *(_QWORD *)(DerivedStorage + 152) = DerivedStorage + 144;
        *(_QWORD *)(DerivedStorage + 80) = CFRetain(a2);
        if (a5)
          v21 = CFRetain(a5);
        else
          v21 = 0;
        *(_QWORD *)(DerivedStorage + 96) = v21;
        if (a8)
          v22 = CFRetain(a8);
        else
          v22 = 0;
        *(_QWORD *)(DerivedStorage + 48) = v22;
        if (a3)
          v23 = CFRetain(a3);
        else
          v23 = 0;
        *(_QWORD *)(DerivedStorage + 104) = v23;
        if (a4)
          v24 = CFRetain(a4);
        else
          v24 = 0;
        *(_QWORD *)(DerivedStorage + 112) = v24;
        *(_QWORD *)(DerivedStorage + 128) = FigHTTPSchedulerRetain(a6);
        if (a9)
          v25 = CFRetain(a9);
        else
          v25 = 0;
        *(_QWORD *)(DerivedStorage + 240) = v25;
        *(_DWORD *)(DerivedStorage + 136) = a7;
        *(_QWORD *)(DerivedStorage + 120) = 0;
        FigCFDictionaryGetBooleanIfPresent();
        if (a9)
        {
          *(_BYTE *)(DerivedStorage + 201) = CFDictionaryGetValue((CFDictionaryRef)a9, CFSTR("FBFCreateOption_DisableNativeHTTPReads")) == (const void *)*MEMORY[0x1E0C9AE50];
          Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a9, CFSTR("FBFCreateOption_HTTPRequestOptions"));
          v27 = Value;
          if (Value)
          {
            v28 = CFDictionaryGetValue(Value, CFSTR("FHRP_ClientBundleIdentifier"));
            if (v28)
              v28 = CFRetain(v28);
            *(_QWORD *)(DerivedStorage + 208) = v28;
            v29 = (const __CFData *)CFDictionaryGetValue(v27, CFSTR("FHRP_ClientAuditToken"));
            v27 = FigCFHTTPCopyClientProcessName(v29);
          }
          v30 = CFDictionaryGetValue((CFDictionaryRef)a9, CFSTR("FBFCreateOption_AlternativeConfigurationOptions"));
        }
        else
        {
          v30 = 0;
          v27 = 0;
        }
        FigByteFlumeCreateReportingAgent(DerivedStorage, (uint64_t)v30, *(const __CFDictionary **)(DerivedStorage + 96), v27, *(const void **)(DerivedStorage + 208), *(unsigned __int8 *)(DerivedStorage + 290), 0);
        v31 = *(_QWORD *)(DerivedStorage + 32);
        if (v31)
        {
          v32 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 56);
          if (v32)
            v32(v31, CFSTR("byteFlumeStats"), CFSTR("CURL"), 1, 0);
        }
        if (v27)
          CFRelease(v27);
        v33 = 0;
        *a10 = 0;
        return v33;
      }
      v19 = FigSignalErrorAt();
    }
    v33 = v19;
    CFRelease(0);
    return v33;
  }
  return FigSignalErrorAt();
}

uint64_t FigByteFlumeCustomURLInvalidate()
{
  _QWORD *DerivedStorage;
  uint64_t v1;
  const void *v2;
  CFTypeRef v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  void (*v14)(uint64_t, _QWORD, uint64_t);
  void (*v15)(CFTypeRef);

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    v1 = (uint64_t)DerivedStorage;
    FigRetainProxyLockMutex();
    FigRetainProxyInvalidate();
    *(_DWORD *)(v1 + 216) = 3;
    v2 = *(const void **)(v1 + 56);
    if (v2)
      v3 = CFRetain(v2);
    else
      v3 = 0;
    v4 = *(_QWORD *)(v1 + 272);
    if (v4)
    {
      v5 = *(_QWORD *)(v1 + 48);
      v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (v6)
        v6(v5, v4);
    }
    v7 = *(_QWORD **)(v1 + 144);
    if (v7)
    {
      do
      {
        v9 = (_QWORD *)v7[11];
        v8 = (_QWORD *)v7[12];
        if (v9)
        {
          v9[12] = v8;
          v8 = (_QWORD *)v7[12];
        }
        else
        {
          *(_QWORD *)(v1 + 152) = v8;
        }
        *v8 = v9;
        v10 = v7[8];
        v11 = *(_QWORD *)(v1 + 48);
        v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
        if (v12)
          v12(v11, v10);
        fbfcu_ReleaseReadRequest(v7);
        v7 = v9;
      }
      while (v9);
    }
    v14 = *(void (**)(uint64_t, _QWORD, uint64_t))(v1 + 248);
    v13 = *(_QWORD *)(v1 + 256);
    *(_QWORD *)(v1 + 248) = 0;
    FigByteFlumeBaseInvalidate(v1);
    FigRetainProxyUnlockMutex();
    if (v3)
    {
      v15 = *(void (**)(CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v15)
        v15(v3);
      CFRelease(v3);
    }
    if (v14)
      v14(v13, 0, 4294954364);
  }
  return 0;
}

void FigByteFlumeCustomURLFinalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  void **v15;
  const void *v16;
  const void *v17;

  FigByteFlumeCustomURLInvalidate();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 48);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 80);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 80) = 0;
  }
  v3 = *(const void **)(DerivedStorage + 88);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 88) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 104);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 104) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 112);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 112) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 120);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 120) = 0;
  }
  FigHTTPSchedulerRelease(*(dispatch_object_t *)(DerivedStorage + 128));
  v7 = *(const void **)(DerivedStorage + 56);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 56) = 0;
  }
  v8 = *(const void **)(DerivedStorage + 160);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 160) = 0;
  }
  v9 = *(const void **)(DerivedStorage + 168);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(DerivedStorage + 168) = 0;
  }
  v10 = *(const void **)(DerivedStorage + 96);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(DerivedStorage + 96) = 0;
  }
  v11 = *(const void **)(DerivedStorage + 240);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(DerivedStorage + 240) = 0;
  }
  v12 = *(const void **)(DerivedStorage + 184);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(DerivedStorage + 184) = 0;
  }
  v13 = *(const void **)(DerivedStorage + 280);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(DerivedStorage + 280) = 0;
  }
  v14 = *(const void **)(DerivedStorage + 208);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(DerivedStorage + 208) = 0;
  }
  v15 = *(void ***)(DerivedStorage + 224);
  if (v15)
  {
    FigByteRateHistoryDispose(v15);
    *(_QWORD *)(DerivedStorage + 224) = 0;
  }
  v16 = *(const void **)(DerivedStorage + 64);
  if (v16)
    CFRelease(v16);
  v17 = *(const void **)(DerivedStorage + 72);
  if (v17)
    CFRelease(v17);
  FigByteFlumeBaseDispose(DerivedStorage);
}

__CFString *FigByteFlumeCustomURLCopyDebugDescription()
{
  __CFString *Mutable;
  uint64_t DerivedStorage;
  const __CFString *v2;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFStringAppendFormat(Mutable, 0, CFSTR(" FigByteFlumeCustomURL <%p>\n"), DerivedStorage);
  if (FigRetainProxyIsInvalidated())
  {
    v2 = CFSTR(" Invalidated\n");
  }
  else
  {
    CFStringAppend(Mutable, CFSTR(" Original URL      : "));
    v2 = *(const __CFString **)(DerivedStorage + 88);
  }
  CFStringAppend(Mutable, v2);
  return Mutable;
}

uint64_t FigByteFlumeCustomURLCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, const void *, const __CFAllocator *, CFDictionaryRef *);
  const void *v11;
  const __CFDictionary *v12;
  const __CFDictionary *v13;
  uint64_t v14;
  const __CFAllocator *v15;
  CFDictionaryRef v16;
  uint64_t v17;
  const void *v18;
  const void **v19;
  uint64_t v20;
  uint64_t v21;
  double valuePtr;
  void *values[3];
  void *keys[4];

  keys[3] = *(void **)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated())
    return 4294954511;
  v9 = *(_QWORD *)(DerivedStorage + 56);
  if (v9)
  {
    v10 = *(uint64_t (**)(uint64_t, const void *, const __CFAllocator *, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v10)
      return v10(v9, a2, a3, a4);
    else
      return 4294954514;
  }
  if (CFEqual(a2, CFSTR("FBF_URL")))
  {
    v11 = *(const void **)(DerivedStorage + 280);
    if (!v11)
    {
      v11 = *(const void **)(DerivedStorage + 80);
      if (!v11)
        goto LABEL_9;
    }
    goto LABEL_13;
  }
  if (CFEqual(a2, CFSTR("FBF_HTTPResponseHeaders")))
  {
    v11 = *(const void **)(DerivedStorage + 168);
    if (v11)
    {
LABEL_13:
      v13 = (const __CFDictionary *)CFRetain(v11);
LABEL_14:
      v12 = v13;
      goto LABEL_15;
    }
    return 4294954513;
  }
  if (CFEqual(a2, CFSTR("FBF_EntireLength")))
  {
    if (!*(_BYTE *)(DerivedStorage + 200))
      return 4294954357;
    v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, (const void *)(DerivedStorage + 192));
    goto LABEL_14;
  }
  if (!CFEqual(a2, CFSTR("FBF_BandwidthInfo")))
  {
    if (CFEqual(a2, CFSTR("FBF_NoCache")))
    {
      if (!*(_BYTE *)(DerivedStorage + 288))
        return 4294954513;
      v19 = (const void **)MEMORY[0x1E0C9AE50];
    }
    else
    {
      if (CFEqual(a2, CFSTR("FBF_MIMEType")))
      {
        v11 = *(const void **)(DerivedStorage + 184);
        if (v11)
          goto LABEL_13;
        return 4294954513;
      }
      if (CFEqual(a2, CFSTR("FBF_StorageSession")))
        return 4294954513;
      if (!CFEqual(a2, CFSTR("FBF_EntireLengthAvailableOnDemand")))
      {
        if (CFEqual(a2, CFSTR("FBF_ReportingAgent")))
        {
          v11 = *(const void **)(DerivedStorage + 32);
          if (!v11)
          {
LABEL_9:
            v12 = 0;
LABEL_15:
            result = 0;
            *a4 = v12;
            return result;
          }
        }
        else
        {
          if (!CFEqual(a2, CFSTR("FBF_ClientBundleIdentifier")))
            return 4294954512;
          v11 = *(const void **)(DerivedStorage + 208);
          if (!v11)
            goto LABEL_9;
        }
        goto LABEL_13;
      }
      v19 = (const void **)MEMORY[0x1E0C9AE50];
      if (!*(_BYTE *)(DerivedStorage + 289))
        v19 = (const void **)MEMORY[0x1E0C9AE40];
    }
    v11 = *v19;
    goto LABEL_13;
  }
  v21 = 0;
  valuePtr = 0.0;
  v20 = 0;
  keys[0] = CFSTR("FBF_BandwidthSample");
  keys[1] = CFSTR("FBF_BandwidthMovingAverage");
  keys[2] = CFSTR("FBF_BandwidthStandardDeviation");
  v14 = *(_QWORD *)(DerivedStorage + 224);
  if (!v14)
    return 4294954513;
  FigByteRateHistoryReportAverage(v14, &valuePtr, (double *)&v20);
  if (FigByteRateHistoryHasCompleteSample(*(_QWORD *)(DerivedStorage + 224)))
    FigByteRateHistoryReportMovingAverage(*(_QWORD *)(DerivedStorage + 224), (double *)&v21);
  if (valuePtr <= 0.0)
    return 4294954513;
  v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, &valuePtr);
  values[1] = CFNumberCreate(v15, kCFNumberDoubleType, &v21);
  values[2] = CFNumberCreate(v15, kCFNumberDoubleType, &v20);
  v16 = CFDictionaryCreate(a3, (const void **)keys, (const void **)values, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v17 = 0;
  *a4 = v16;
  do
  {
    v18 = values[v17];
    if (v18)
      CFRelease(v18);
    ++v17;
  }
  while (v17 != 3);
  return 0;
}

uint64_t FigByteFlumeCustomURLSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  _QWORD *DerivedStorage;
  const void *v6;
  CFTypeRef v7;
  uint64_t (*v8)(CFTypeRef, const void *, const void *);
  uint64_t v9;
  const void *v10;
  int UInt64;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated())
  {
    v9 = 4294954511;
LABEL_15:
    FigRetainProxyUnlockMutex();
    return v9;
  }
  if (!a2)
  {
    v9 = FigSignalErrorAt();
    goto LABEL_15;
  }
  v6 = (const void *)DerivedStorage[7];
  if (!v6)
  {
    if (CFEqual(a2, CFSTR("FBF_BandwidthSampleCount")))
    {
      v10 = (const void *)DerivedStorage[20];
      DerivedStorage[20] = a3;
      if (a3)
        CFRetain(a3);
      if (v10)
        CFRelease(v10);
      if (DerivedStorage[28])
      {
        UInt64 = FigCFNumberGetUInt64();
        FigByteRateHistoryAllocSampleArray(DerivedStorage[28], UInt64);
      }
    }
    v9 = 0;
    goto LABEL_15;
  }
  v7 = CFRetain(v6);
  FigRetainProxyUnlockMutex();
  if (!v7)
    return 0;
  v8 = *(uint64_t (**)(CFTypeRef, const void *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v8)
    v9 = v8(v7, a2, a3);
  else
    v9 = 4294954514;
  CFRelease(v7);
  return v9;
}

void fbfcu_ReleaseReadRequest(_QWORD *a1)
{
  const void *v2;
  int v3;

  v2 = (const void *)a1[5];
  if (v2)
    CFRelease(v2);
  v3 = *((_DWORD *)a1 + 14) - 1;
  *((_DWORD *)a1 + 14) = v3;
  if (!v3)
    free(a1);
}

uint64_t FigByteFlumeCustomURLRead(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v8;
  _QWORD *DerivedStorage;
  _QWORD *v17;
  _QWORD *v18;
  CFTypeRef v19;
  uint64_t v20;
  _QWORD *v21;

  v8 = 4294954365;
  if (a3 && a5)
  {
    FigByteFlumeGetFigBaseObject(a1);
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    FigRetainProxyLockMutex();
    if (FigRetainProxyIsInvalidated())
    {
      v8 = 4294954511;
    }
    else
    {
      v17 = malloc_type_calloc(1uLL, 0x68uLL, 0x10E0040628CCBB7uLL);
      if (v17)
      {
        v18 = v17;
        *v17 = a2;
        v17[1] = a3;
        v17[2] = 0;
        if (a6)
          v19 = CFRetain(a6);
        else
          v19 = 0;
        v18[5] = v19;
        v18[6] = a7;
        *((_DWORD *)v18 + 14) = 1;
        v18[4] = a5;
        if (!DerivedStorage[18])
          DerivedStorage[29] = FigGetUpTimeNanoseconds();
        v20 = fbfcu_AskForResponse(a1, *v18, v18[1], v18 + 8);
        if ((_DWORD)v20)
        {
          v8 = v20;
          fbfcu_ReleaseReadRequest(v18);
        }
        else
        {
          v18[11] = 0;
          v21 = (_QWORD *)DerivedStorage[19];
          v18[12] = v21;
          *v21 = v18;
          DerivedStorage[19] = v18 + 11;
          v8 = 0;
          if (a8)
            *a8 = v18[8];
        }
      }
      else
      {
        v8 = FigSignalErrorAt();
      }
    }
    FigRetainProxyUnlockMutex();
  }
  return v8;
}

uint64_t FigByteFlumeCustomURLCancel(uint64_t a1, uint64_t a2)
{
  _QWORD *DerivedStorage;
  uint64_t v4;
  CFTypeRef v5;
  uint64_t v6;
  void (*v7)(CFTypeRef, uint64_t);
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  const void *v12;

  FigByteFlumeGetFigBaseObject(a1);
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  FigRetainProxyRetain();
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated())
  {
    v11 = FigSignalErrorAt();
LABEL_22:
    v6 = v11;
    goto LABEL_18;
  }
  v4 = DerivedStorage[18];
  if (!v4)
  {
LABEL_5:
    v5 = 0;
    v6 = 4294954362;
    goto LABEL_6;
  }
  while (*(_QWORD *)(v4 + 64) != a2)
  {
    v4 = *(_QWORD *)(v4 + 88);
    if (!v4)
      goto LABEL_5;
  }
  v9 = DerivedStorage[6];
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v10)
  {
    v5 = 0;
    v4 = 0;
    v6 = 4294954514;
    goto LABEL_6;
  }
  v11 = v10(v9, a2);
  if ((_DWORD)v11)
    goto LABEL_22;
  if (!*(_BYTE *)(v4 + 80))
  {
    fbfcu_FinishRequest((uint64_t)DerivedStorage, v4, 0, 0, 0, 4294954364);
    v6 = 0;
LABEL_18:
    v5 = 0;
    v4 = 0;
    goto LABEL_6;
  }
  v12 = (const void *)DerivedStorage[7];
  if (v12)
    v5 = CFRetain(v12);
  else
    v5 = 0;
  v6 = 0;
  v4 = *(_QWORD *)(v4 + 72);
LABEL_6:
  FigRetainProxyUnlockMutex();
  FigRetainProxyRelease();
  if (v5)
  {
    v7 = *(void (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v7)
      v7(v5, v4);
    CFRelease(v5);
  }
  return v6;
}

uint64_t FigByteFlumeCustomURLCopyIdentifier(uint64_t a1, CFDictionaryRef *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, CFDictionaryRef *);
  uint64_t FigBaseObject;
  uint64_t (*v10)(uint64_t, const __CFString *, _QWORD, void **);
  const __CFAllocator *v11;
  uint64_t v12;
  CFNumberRef v13;
  CFNumberRef v14;
  __CFDictionary *Mutable;
  __CFDictionary *v16;
  const void **v17;
  const __CFDictionary *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  uint64_t v22;
  int valuePtr;
  void *value;

  value = 0;
  if (a1)
  {
    FigByteFlumeGetFigBaseObject(a1);
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      v5 = DerivedStorage;
      v6 = *(_QWORD *)(DerivedStorage + 56);
      if (v6)
      {
        v7 = *(uint64_t (**)(uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
        if (v7)
          return v7(v6, a2);
        return 4294954514;
      }
      valuePtr = 1;
      if (a2)
      {
        *a2 = 0;
        if (*(_DWORD *)(DerivedStorage + 216) != 2)
          return 4294954513;
        if (*(_QWORD *)(DerivedStorage + 88))
        {
          FigBaseObject = FigByteFlumeGetFigBaseObject(a1);
          v10 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
          if (!v10)
          {
            v22 = 4294954514;
            goto LABEL_27;
          }
          v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          v12 = v10(FigBaseObject, CFSTR("FBF_EntireLength"), *MEMORY[0x1E0C9AE00], &value);
          if ((_DWORD)v12)
          {
LABEL_32:
            v22 = v12;
LABEL_27:
            if (value)
              CFRelease(value);
            return v22;
          }
          v13 = CFNumberCreate(v11, kCFNumberSInt32Type, &valuePtr);
          if (v13)
          {
            v14 = v13;
            Mutable = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            if (Mutable)
            {
              v16 = Mutable;
              CFDictionarySetValue(Mutable, CFSTR("Version"), v14);
              CFDictionarySetValue(v16, CFSTR("URL"), *(const void **)(v5 + 88));
              CFDictionarySetValue(v16, CFSTR("Size"), value);
              v17 = (const void **)MEMORY[0x1E0C9AE50];
              if (!*(_BYTE *)(v5 + 288))
                v17 = (const void **)MEMORY[0x1E0C9AE40];
              CFDictionarySetValue(v16, CFSTR("no-cache"), *v17);
              v18 = *(const __CFDictionary **)(v5 + 120);
              if (v18)
              {
                v19 = CFDictionaryGetValue(v18, CFSTR("Last-Modified"));
                if (v19)
                  CFDictionarySetValue(v16, CFSTR("Last-Modified"), v19);
                v20 = CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 120), CFSTR("ETag"));
                if (v20)
                  CFDictionarySetValue(v16, CFSTR("ETag"), v20);
                v21 = CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 120), CFSTR("ETag weak"));
                if (v21)
                  CFDictionarySetValue(v16, CFSTR("ETag weak"), v21);
              }
              *a2 = CFDictionaryCreateCopy(v11, v16);
              CFRelease(v16);
              v22 = 0;
            }
            else
            {
              v22 = FigSignalErrorAt();
            }
            CFRelease(v14);
            goto LABEL_27;
          }
        }
      }
    }
    v12 = FigSignalErrorAt();
    goto LABEL_32;
  }
  return FigSignalErrorAt();
}

const void *FigByteFlumeCustomURLMatchesIdentifier(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, const void *);
  CFTypeID v8;

  if (a1 && (FigByteFlumeGetFigBaseObject(a1), (DerivedStorage = CMBaseObjectGetDerivedStorage()) != 0))
  {
    v4 = DerivedStorage;
    v5 = *(_QWORD *)(DerivedStorage + 56);
    if (v5)
    {
      v6 = *(uint64_t (**)(uint64_t, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (v6)
        return (const void *)v6(v5, a2);
    }
    else if (a2)
    {
      v8 = CFGetTypeID(a2);
      if (v8 == CFDictionaryGetTypeID())
      {
        if (*(_BYTE *)(v4 + 200))
          return FigCFHTTPMatchCacheHeaders((const __CFDictionary *)a2, *(_QWORD *)(v4 + 192), *(const __CFString **)(v4 + 88), *(_DWORD *)(v4 + 136), *(const __CFDictionary **)(v4 + 120));
      }
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  return 0;
}

uint64_t FigByteFlumeCustomURLOpen(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;

  if (!a2)
    return FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated())
  {
    v7 = 4294954511;
  }
  else if (*(_DWORD *)(DerivedStorage + 216) || !*(_QWORD *)(DerivedStorage + 48))
  {
    v7 = FigSignalErrorAt();
  }
  else
  {
    *(_QWORD *)(DerivedStorage + 248) = a2;
    *(_QWORD *)(DerivedStorage + 256) = a3;
    *(_DWORD *)(DerivedStorage + 216) = 1;
    v7 = fbfcu_AskForResponse(a1, 0, 2, (_QWORD *)(DerivedStorage + 272));
    if ((_DWORD)v7)
    {
      *(_QWORD *)(DerivedStorage + 248) = 0;
      *(_QWORD *)(DerivedStorage + 256) = 0;
    }
  }
  FigRetainProxyUnlockMutex();
  return v7;
}

uint64_t fbfcu_AskForResponse(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t *DerivedStorage;
  uint64_t Mutable;
  CFTypeRef v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, CFTypeRef, uint64_t, uint64_t, _QWORD, uint64_t *);
  uint64_t v12;
  uint64_t v14;
  CFTypeRef v15;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v14 = 0;
  v15 = 0;
  Mutable = FigCustomURLRequestInfoCreateMutable();
  if ((_DWORD)Mutable)
    goto LABEL_16;
  Mutable = FigCustomURLRequestInfoSetHTTPHeaders();
  if ((_DWORD)Mutable)
    goto LABEL_16;
  if (FigCustomURLRequestInfoCopyUserAgent())
  {
    if (!DerivedStorage[13])
    {
      v7 = FigCFHTTPCreateUserAgent();
      DerivedStorage[13] = (uint64_t)v7;
      if (!v7)
      {
        Mutable = FigSignalErrorAt();
        goto LABEL_16;
      }
    }
    Mutable = FigCustomURLRequestInfoSetUserAgent();
    if ((_DWORD)Mutable)
      goto LABEL_16;
  }
  Mutable = FigCustomURLRequestInfoSetByteRange();
  if ((_DWORD)Mutable)
  {
LABEL_16:
    v12 = Mutable;
    goto LABEL_12;
  }
  v8 = DerivedStorage[6];
  v9 = *DerivedStorage;
  v10 = DerivedStorage[16];
  v11 = *(uint64_t (**)(uint64_t, CFTypeRef, uint64_t, uint64_t, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 24);
  if (v11)
  {
    v12 = v11(v8, v15, v9, v10, fbfcu_customURLLoaderDataCallback, &v14);
    if (!(_DWORD)v12)
      *a4 = v14;
  }
  else
  {
    v12 = 4294954514;
  }
LABEL_12:
  if (v15)
    CFRelease(v15);
  return v12;
}

uint64_t fbfcu_customURLLoaderDataCallback(uint64_t a1, uint64_t a2, uint64_t a3, OpaqueCMBlockBuffer *a4, char a5, __CFError *a6)
{
  const void *Owner;
  uint64_t DerivedStorage;
  void (*v12)(_QWORD, _QWORD, CFIndex);
  CFIndex Code;
  CFTypeRef v14;
  uint64_t v15;
  int v16;
  int v17;
  const void *v18;
  CFIndex v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  CFIndex v26;
  const __CFDictionary *v27;
  CFHTTPMessageRef Response;
  const void *v29;
  uint64_t v30;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  size_t DataLength;
  uint64_t UpTimeNanoseconds;
  uint64_t v34;
  uint64_t *v35;
  int v36;
  CFStringRef v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, _QWORD, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const __CFString *v45;
  uint64_t v46;
  uint64_t v47;
  const void *v48;
  __CFHTTPMessage *v49;
  int64_t v50;
  const __CFDictionary *Value;
  CFMutableDictionaryRef OptionsFromHTTPRequestOptions;
  CFTypeRef v53;
  CFStringRef v54;
  uint64_t v56;
  size_t v57;
  const __CFAllocator *v58;
  uint64_t Empty;
  uint64_t v60;
  _BOOL4 v61;
  const void *v62;
  uint64_t v63;
  CFStringRef inUTI;
  CFTypeRef v65;
  CFTypeRef cf;
  CFTypeRef v67;
  CFDictionaryRef theDict;
  CFIndex statusCode[18];

  statusCode[16] = *MEMORY[0x1E0C80C00];
  FigRetainProxyRetain();
  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    Owner = (const void *)FigRetainProxyGetOwner();
    FigByteFlumeGetFigBaseObject(Owner);
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFRetain(Owner);
    if (*(_DWORD *)(DerivedStorage + 216) == 3)
    {
LABEL_118:
      CFRelease(Owner);
      goto LABEL_119;
    }
    if (*(_QWORD *)(DerivedStorage + 272) == a2)
    {
      v12 = *(void (**)(_QWORD, _QWORD, CFIndex))(DerivedStorage + 248);
      cf = 0;
      v67 = 0;
      v65 = 0;
      if (a6)
      {
        Code = CFErrorGetCode(a6);
        if ((_DWORD)Code)
        {
LABEL_6:
          v14 = 0;
LABEL_97:
          *(_QWORD *)(DerivedStorage + 248) = 0;
          v12(*(_QWORD *)(DerivedStorage + 256), 0, Code);
LABEL_98:
          if (v14)
            CFRelease(v14);
LABEL_100:
          if (cf)
            CFRelease(cf);
          v53 = v67;
          if (!v67)
            goto LABEL_118;
          goto LABEL_117;
        }
        v24 = FigSignalErrorAt();
        if ((_DWORD)v24)
          goto LABEL_143;
      }
      if (FigCustomURLResponseInfoCopyRedirectLocation())
      {
        if (*(_BYTE *)(DerivedStorage + 176))
        {
          Code = 0;
LABEL_85:
          if (a4)
          {
            v50 = *(_QWORD *)(DerivedStorage + 264) + CMBlockBufferGetDataLength(a4);
            *(_QWORD *)(DerivedStorage + 264) = v50;
            if (v50 >= 3)
            {
              *(_BYTE *)(DerivedStorage + 200) = 0;
              Code = 4294954357;
            }
          }
          if ((a5 & 3) != 0)
          {
            if (!*(_QWORD *)(DerivedStorage + 64))
            {
              Value = *(const __CFDictionary **)(DerivedStorage + 240);
              if (Value)
                Value = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("FBFCreateOption_HTTPRequestOptions"));
              OptionsFromHTTPRequestOptions = FigByteFlumeCreateNetworkPathEvaluatorCreateOptionsFromHTTPRequestOptions((uint64_t)Value);
              FigNetworkPathEvaluatorCreate(*MEMORY[0x1E0C9AE00], *(_QWORD *)(DerivedStorage + 80), OptionsFromHTTPRequestOptions, *(_QWORD *)(DerivedStorage + 128), *(_QWORD *)DerivedStorage, fbfcu_networkMonitorCallback, DerivedStorage + 64);
              if (OptionsFromHTTPRequestOptions)
                CFRelease(OptionsFromHTTPRequestOptions);
            }
            *(_QWORD *)(DerivedStorage + 272) = 0;
            *(_DWORD *)(DerivedStorage + 216) = 2;
            *(_QWORD *)(DerivedStorage + 248) = 0;
            v12(*(_QWORD *)(DerivedStorage + 256), 0, 0);
          }
          v14 = 0;
          goto LABEL_96;
        }
        inUTI = 0;
        statusCode[0] = -1;
        v25 = *(const void **)(DerivedStorage + 168);
        if (v25)
        {
          CFRelease(v25);
          *(_QWORD *)(DerivedStorage + 168) = 0;
        }
        if (FigCustomURLResponseInfoGetHTTPStatusCode() == -17360)
        {
          v26 = 206;
          statusCode[0] = 206;
        }
        else
        {
          v26 = statusCode[0];
        }
        Response = CFHTTPMessageCreateResponse((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v26, 0, (CFStringRef)*MEMORY[0x1E0C930E8]);
        *(_QWORD *)(DerivedStorage + 168) = Response;
        if (Response)
        {
          theDict = 0;
          FigCustomURLResponseInfoCopyHTTPHeaders();
        }
        if (*(_BYTE *)(DerivedStorage + 201))
        {
          v29 = *(const void **)(DerivedStorage + 280);
          if (v29)
          {
            CFRelease(v29);
            *(_QWORD *)(DerivedStorage + 280) = 0;
          }
          v30 = FigCustomURLResponseInfoCopyFinalURL();
          if ((_DWORD)v30)
          {
            Code = v30;
            if ((_DWORD)v30 != -17360)
              goto LABEL_6;
          }
        }
        if (FigCustomURLResponseInfoCopyUniversalTypeIdentifier())
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          statusCode[0] = 0;
          if (FigCustomURLResponseInfoCopyHTTPHeaders())
            goto LABEL_74;
          v48 = CFDictionaryGetValue((CFDictionaryRef)statusCode[0], CFSTR("Content-Type"));
          if (v48)
            v48 = CFRetain(v48);
          *(_QWORD *)(DerivedStorage + 184) = v48;
          v37 = (CFStringRef)statusCode[0];
          if (!statusCode[0])
            goto LABEL_74;
        }
        else
        {
          *(_QWORD *)(DerivedStorage + 184) = UTTypeCopyPreferredTagWithClass(inUTI, (CFStringRef)*MEMORY[0x1E0CA5A90]);
          v37 = inUTI;
          if (!inUTI)
            goto LABEL_74;
        }
        CFRelease(v37);
LABEL_74:
        if (!FigCustomURLResponseInfoGetIsCachingDisabled())
          *(_BYTE *)(DerivedStorage + 288) = 0;
        if (!FigCustomURLResponseInfoGetEntireLengthAvailableOnDemand())
          *(_BYTE *)(DerivedStorage + 289) = 0;
        Code = FigCustomURLResponseInfoGetResourceSize();
        if ((_DWORD)Code == -17360)
        {
          *(_BYTE *)(DerivedStorage + 200) = 0;
          Code = FigSignalErrorAt();
        }
        if ((_DWORD)Code)
          goto LABEL_6;
        *(_QWORD *)(DerivedStorage + 192) = 0;
        *(_BYTE *)(DerivedStorage + 200) = 1;
        v49 = *(__CFHTTPMessage **)(DerivedStorage + 168);
        if (v49)
          Code = FigCFHTTPCreateCacheHeaders(*(const __CFString **)(DerivedStorage + 88), 0, v49, 0, (CFDictionaryRef *)(DerivedStorage + 120));
        else
          Code = 0;
        *(_BYTE *)(DerivedStorage + 176) = 1;
        goto LABEL_85;
      }
      if (*(_BYTE *)(DerivedStorage + 201))
      {
        v14 = 0;
        Code = 4294954361;
        goto LABEL_97;
      }
      if (*(_BYTE *)(DerivedStorage + 176))
        goto LABEL_100;
      *(_BYTE *)(DerivedStorage + 176) = 1;
      *(_DWORD *)(DerivedStorage + 216) = 2;
      v24 = FigByteFlumeCreateWithHTTP(*MEMORY[0x1E0C9AE00], (const __CFURL *)cf, *(const void **)(DerivedStorage + 104), *(const void **)(DerivedStorage + 112), *(const void **)(DerivedStorage + 96), *(NSObject **)(DerivedStorage + 128), *(_DWORD *)(DerivedStorage + 136), *(const __CFDictionary **)(DerivedStorage + 240), (_QWORD *)(DerivedStorage + 56));
      if ((_DWORD)v24)
      {
LABEL_143:
        Code = v24;
        goto LABEL_6;
      }
      if (FigCustomURLResponseInfoCopyRedirectRequestHeaders())
      {
        v14 = 0;
      }
      else
      {
        v38 = fbfcu_copyAllowedHTTPHeaders((const __CFDictionary *)v67, (CFDictionaryRef *)&v65);
        v14 = v65;
        if ((_DWORD)v38)
          goto LABEL_142;
      }
      v38 = FigByteFlumeSetAdditionalOpenRequestHeaders(*(_QWORD *)(DerivedStorage + 56), v14);
      if (!(_DWORD)v38)
      {
        v39 = *(_QWORD *)(DerivedStorage + 56);
        v40 = *(_QWORD *)DerivedStorage;
        v41 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
        if (!v41)
        {
          Code = 4294954514;
          goto LABEL_97;
        }
        Code = v41(v39, fbfcu_OpenCallback, v40);
LABEL_96:
        if (!(_DWORD)Code)
          goto LABEL_98;
        goto LABEL_97;
      }
LABEL_142:
      Code = v38;
      goto LABEL_97;
    }
    v67 = 0;
    theDict = 0;
    v65 = 0;
    cf = 0;
    inUTI = 0;
    v15 = *(_QWORD *)(DerivedStorage + 144);
    if (!v15)
      goto LABEL_112;
    while (*(_QWORD *)(v15 + 64) != a2)
    {
      v15 = *(_QWORD *)(v15 + 88);
      if (!v15)
        goto LABEL_112;
    }
    v16 = a5 & 3;
    v17 = *(unsigned __int8 *)(v15 + 24);
    if (!*(_BYTE *)(v15 + 24))
    {
      FigCustomURLResponseInfoCopyRedirectLocation();
      *(_BYTE *)(v15 + 25) = v65 != 0;
      *(_BYTE *)(v15 + 24) = 1;
    }
    v18 = *(const void **)(DerivedStorage + 24);
    *(_QWORD *)(DerivedStorage + 24) = a6;
    if (a6)
      CFRetain(a6);
    if (v18)
      CFRelease(v18);
    if (a6)
    {
      v19 = CFErrorGetCode(a6);
      FigByteFlumePostHostUnavailableNotification(DerivedStorage);
      v20 = DerivedStorage;
      v21 = v15;
      v22 = 0;
      v23 = v19;
LABEL_19:
      fbfcu_FinishRequest(v20, v21, v22, 0, 0, v23);
      goto LABEL_112;
    }
    if (v65)
    {
      statusCode[0] = 0;
      if (!v17)
      {
        if (*(_QWORD *)(DerivedStorage + 56))
        {
          if (!FigCustomURLResponseInfoCopyHTTPHeaders())
          {
            if (FigCustomURLResponseInfoCopyRedirectRequestHeaders())
            {
              v27 = 0;
LABEL_64:
              v42 = *(_QWORD *)v15;
              v43 = *(_QWORD *)(v15 + 8);
              v44 = *(_QWORD *)(v15 + 48);
              v45 = (const __CFString *)CFRetain(*(CFTypeRef *)(DerivedStorage + 56));
              FigRetainProxyUnlockMutex();
              v46 = FigCFHTTPResetURLAndRead(*(_QWORD *)(DerivedStorage + 56), v65, v27, v42, v43, (uint64_t)fbfcu_ReadCallback, *(const void **)DerivedStorage, v44, statusCode);
              FigRetainProxyLockMutex();
              if (!FigRetainProxyIsInvalidated())
              {
                v47 = *(_QWORD *)(DerivedStorage + 144);
                if (v47)
                {
                  while (v44 != *(_QWORD *)(v47 + 48))
                  {
                    v47 = *(_QWORD *)(v47 + 88);
                    if (!v47)
                      goto LABEL_107;
                  }
                  *(_QWORD *)(v15 + 72) = statusCode[0];
                  if ((_DWORD)v46)
                    fbfcu_FinishRequest(DerivedStorage, v15, 0, 0, 0, v46);
                  else
                    *(_BYTE *)(v15 + 80) = 1;
                }
              }
LABEL_107:
              if (theDict)
                CFRelease(theDict);
              if (v45)
              {
                v54 = v45;
LABEL_111:
                CFRelease(v54);
              }
LABEL_112:
              if (v67)
                CFRelease(v67);
              if (cf)
                CFRelease(cf);
              v53 = v65;
              if (!v65)
                goto LABEL_118;
LABEL_117:
              CFRelease(v53);
              goto LABEL_118;
            }
            if (!fbfcu_copyAllowedHTTPHeaders((const __CFDictionary *)v67, (CFDictionaryRef *)&cf))
            {
              v27 = (const __CFDictionary *)cf;
              goto LABEL_64;
            }
          }
        }
        else
        {
          FigSignalErrorAt();
        }
      }
      v45 = 0;
      goto LABEL_107;
    }
    if (*(_BYTE *)(v15 + 25))
      goto LABEL_112;
    if (!a4)
    {
      if (v16)
      {
        v22 = *(_QWORD *)(v15 + 16);
        v20 = DerivedStorage;
        v21 = v15;
        v23 = 0;
        goto LABEL_19;
      }
      goto LABEL_112;
    }
    DataLength = CMBlockBufferGetDataLength(a4);
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    v35 = (uint64_t *)(DerivedStorage + 224);
    v34 = *(_QWORD *)(DerivedStorage + 224);
    if (!v34)
    {
      if (FigByteRateHistoryCreate((_QWORD *)(DerivedStorage + 224)))
        goto LABEL_128;
      v36 = *(_QWORD *)(DerivedStorage + 160) ? FigCFNumberGetUInt64() : 64;
      if (FigByteRateHistoryAllocSampleArray(*v35, v36))
        goto LABEL_128;
      v34 = *v35;
    }
    statusCode[0] = UpTimeNanoseconds - *(_QWORD *)(DerivedStorage + 232);
    statusCode[1] = DataLength;
    FigByteRateHistoryAddToSample(v34, (uint64_t)statusCode);
    if (FigByteRateHistoryGetCurrentSampleDuration(*(_QWORD *)(DerivedStorage + 224)) >= 100000000)
      FigByteRateHistoryNextSample((uint64_t *)*v35);
    *(_QWORD *)(DerivedStorage + 232) = UpTimeNanoseconds;
LABEL_128:
    FigByteFlumePostHostAvailableNotification(DerivedStorage);
    v57 = *(_QWORD *)(v15 + 8);
    v56 = *(_QWORD *)(v15 + 16);
    if (v56 + DataLength <= v57)
    {
      v60 = 0;
      v61 = v16 != 0;
    }
    else
    {
      v58 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      DataLength = v57 - v56;
      if (v57 == v56)
        Empty = CMBlockBufferCreateEmpty(v58, 0, 0, (CMBlockBufferRef *)&inUTI);
      else
        Empty = CMBlockBufferCreateWithBufferReference(v58, a4, 0, v57 - v56, 0, (CMBlockBufferRef *)&inUTI);
      v60 = Empty;
      v61 = 1;
      a4 = (OpaqueCMBlockBuffer *)inUTI;
    }
    ++*(_DWORD *)(v15 + 56);
    v62 = *(const void **)(v15 + 40);
    if (v62)
      CFRetain(v62);
    if (v61)
    {
      v63 = *(_QWORD *)(v15 + 16);
      *(_QWORD *)(v15 + 16) = v63 + DataLength;
      fbfcu_FinishRequest(DerivedStorage, v15, v63, (uint64_t)a4, 0, v60);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, OpaqueCMBlockBuffer *, _QWORD, _QWORD))(v15 + 32))(*(_QWORD *)(v15 + 40), *(_QWORD *)(v15 + 48), *(_QWORD *)(v15 + 64), *(_QWORD *)(v15 + 16), a4, 0, 0);
      *(_QWORD *)(v15 + 16) += DataLength;
    }
    fbfcu_ReleaseReadRequest((_QWORD *)v15);
    v54 = inUTI;
    if (inUTI)
      goto LABEL_111;
    goto LABEL_112;
  }
LABEL_119:
  FigRetainProxyUnlockMutex();
  return FigRetainProxyRelease();
}

uint64_t fbfcu_copyAllowedHTTPHeaders(const __CFDictionary *a1, CFDictionaryRef *a2)
{
  int ValueIfPresent;
  CFIndex v5;
  CFDictionaryRef v6;
  uint64_t result;
  void *value;
  const void *v9;
  void *keys[3];

  keys[2] = *(void **)MEMORY[0x1E0C80C00];
  keys[0] = 0;
  keys[1] = 0;
  value = 0;
  v9 = 0;
  *a2 = 0;
  if (!CFDictionaryGetValueIfPresent(a1, CFSTR("Client-Daap-Validation"), (const void **)&value))
  {
    if (!CFDictionaryGetValueIfPresent(a1, CFSTR("Client-Daap-Request-Id"), (const void **)&value))
    {
      v6 = 0;
      goto LABEL_8;
    }
    v5 = 0;
    goto LABEL_6;
  }
  keys[0] = CFSTR("Client-Daap-Validation");
  ValueIfPresent = CFDictionaryGetValueIfPresent(a1, CFSTR("Client-Daap-Request-Id"), &v9);
  v5 = 1;
  if (ValueIfPresent)
LABEL_6:
    keys[v5++] = CFSTR("Client-Daap-Request-Id");
  v6 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)&value, v5, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v6)
  {
LABEL_8:
    result = 0;
    *a2 = v6;
    return result;
  }
  return FigSignalErrorAt();
}

uint64_t fbfcu_OpenCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Owner;
  _QWORD *DerivedStorage;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  FigRetainProxyRetain();
  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    Owner = FigRetainProxyGetOwner();
    FigByteFlumeGetFigBaseObject(Owner);
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    DerivedStorage[34] = 0;
    v8 = (void (*)(uint64_t, uint64_t, uint64_t))DerivedStorage[31];
    v7 = DerivedStorage[32];
    DerivedStorage[31] = 0;
    v8(v7, a2, a3);
  }
  FigRetainProxyUnlockMutex();
  return FigRetainProxyRelease();
}

void fbfcu_addHeader(CFStringRef headerField, CFStringRef value, CFHTTPMessageRef message)
{
  CFHTTPMessageSetHeaderFieldValue(message, headerField, value);
}

uint64_t fbfcu_networkMonitorCallback(uint64_t a1, const void *a2)
{
  uint64_t Owner;
  uint64_t DerivedStorage;
  const void *v5;

  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    Owner = FigRetainProxyGetOwner();
    FigByteFlumeGetFigBaseObject(Owner);
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (*(_QWORD *)(DerivedStorage + 24) && FigNetworkPathInformationIsHostReachable((uint64_t)a2, 0))
      FigByteFlumePostHostAvailableNotification(DerivedStorage);
    v5 = *(const void **)(DerivedStorage + 72);
    *(_QWORD *)(DerivedStorage + 72) = a2;
    if (a2)
      CFRetain(a2);
    if (v5)
      CFRelease(v5);
  }
  return FigRetainProxyUnlockMutex();
}

void fbfcu_FinishRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v7;
  _QWORD *v8;

  v7 = *(_QWORD *)(a2 + 88);
  v8 = *(_QWORD **)(a2 + 96);
  if (v7)
  {
    *(_QWORD *)(v7 + 96) = v8;
    v8 = *(_QWORD **)(a2 + 96);
  }
  else
  {
    *(_QWORD *)(a1 + 152) = v8;
  }
  *v8 = v7;
  (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t))(a2 + 32))(*(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 64), a3, a4, a5 | 1u, a6);
  fbfcu_ReleaseReadRequest((_QWORD *)a2);
}

uint64_t fbfcu_ReadCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t Owner;
  uint64_t DerivedStorage;
  uint64_t v15;
  const void *v16;

  FigRetainProxyRetain();
  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    Owner = FigRetainProxyGetOwner();
    FigByteFlumeGetFigBaseObject(Owner);
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v15 = *(_QWORD *)(DerivedStorage + 144);
    if (v15)
    {
      while (*(_QWORD *)(v15 + 72) != a3)
      {
        v15 = *(_QWORD *)(v15 + 88);
        if (!v15)
          goto LABEL_11;
      }
      if (a6 & 1 | a7)
      {
        fbfcu_FinishRequest(DerivedStorage, v15, a4, a5, a6, a7);
      }
      else
      {
        ++*(_DWORD *)(v15 + 56);
        v16 = *(const void **)(v15 + 40);
        if (v16)
        {
          CFRetain(v16);
          v16 = *(const void **)(v15 + 40);
        }
        (*(void (**)(const void *, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD))(v15 + 32))(v16, a2, *(_QWORD *)(v15 + 64), a4, a5, a6, 0);
        fbfcu_ReleaseReadRequest((_QWORD *)v15);
      }
    }
  }
LABEL_11:
  FigRetainProxyUnlockMutex();
  return FigRetainProxyRelease();
}

uint64_t MediaSampleTimingGeneratorCreateMediaSampleTimingInfoArray(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, _QWORD *a7, char *a8)
{
  uint64_t v8;
  char *v9;
  __int128 *v14;
  __int128 v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  CMTimeEpoch v21;
  CMTimeEpoch v22;
  uint64_t SampleTimingAtIndex;
  int32_t v24;
  __int128 v25;
  CMTimeEpoch epoch;
  char *v27;
  CMTimeEpoch v28;
  char v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  CMTimeValue *v39;
  __int128 v40;
  CMTimeEpoch v41;
  char *v42;
  uint64_t v43;
  CMTimeFlags v44;
  CMTimeEpoch v45;
  uint64_t v46;
  int32_t v47;
  int32_t v48;
  CMTimeEpoch v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v54;
  uint64_t v55;
  void *v57;
  uint64_t *v58;
  uint64_t *v60;
  _QWORD *v62;
  CMTime *v64;
  char *v65;
  _OWORD *v66;
  __int128 v67;
  __int128 v68;
  CMTimeEpoch v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  CMTime *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  CMTime v82;
  CMTime v83;
  CMTime v84;
  CMTime multiplier;
  CMTime lhs;
  CMTime rhs;
  CMTime time;
  CMTime time2;
  CMTime time1;
  __int128 v91;
  _BYTE v92[32];
  CMTime v93;
  CMTimeValue v94;
  CMTimeScale v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 20))
  {
    if (a2)
    {
      v8 = a3;
      if (a3)
      {
        v9 = a8;
        v75 = (CMTime *)(a1 + 24);
        if ((*(_BYTE *)(a1 + 36) & 1) == 0)
        {
          v14 = (__int128 *)(a4 + 48);
          if ((*(_DWORD *)(a4 + 60) & 1) == 0)
            v14 = (__int128 *)(a4 + 24);
          v15 = *v14;
          *(_QWORD *)(a1 + 40) = *((_QWORD *)v14 + 2);
          *(_OWORD *)&v75->value = v15;
        }
        if (*(_DWORD *)(a1 + 12) == 1)
        {
          if (a3 <= 0x38E38E38E38E38ELL)
          {
            if (72 * a3)
            {
              v16 = (char *)malloc_type_malloc(72 * a3, 0x5CC9CBA6uLL);
              if (v16)
              {
                v17 = v16;
                v60 = a6;
                v62 = a7;
                v58 = a5;
                v18 = a2;
                if (a2 < 1)
                {
LABEL_19:
                  v29 = 0;
                  v30 = v58;
                  v31 = v60;
                  v32 = v18;
                  v33 = v62;
LABEL_45:
                  v34 = 0;
                  *v9 = v29;
                  *v30 = v32;
                  *v31 = v8;
                  *v33 = v17;
                  *(_BYTE *)(a1 + 16) = 1;
                  return v34;
                }
                v19 = 0;
                v20 = (_OWORD *)(a1 + 48);
                v77 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 48);
                v79 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 32);
                v21 = *(_QWORD *)(MEMORY[0x1E0CA2E90] + 64);
                v73 = *MEMORY[0x1E0CA2E90];
                v76 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 16);
                v71 = *MEMORY[0x1E0CA2E18];
                v22 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
                while (1)
                {
                  *(_OWORD *)&v92[16] = v79;
                  *(_OWORD *)&v93.value = v77;
                  v93.epoch = v21;
                  v91 = v73;
                  *(_OWORD *)v92 = v76;
                  multiplier.value = 0;
                  *(_OWORD *)&time2.value = v71;
                  time2.epoch = v22;
                  if ((*(_BYTE *)(a1 + 60) & 1) == 0)
                  {
                    CMTimeMake(&time, 0, *(_DWORD *)(a1 + 20));
                    *v20 = *(_OWORD *)&time.value;
                    *(_QWORD *)(a1 + 64) = time.epoch;
                  }
                  SampleTimingAtIndex = getSampleTimingAtIndex(v18, v19, v8, (__int128 *)a4, (uint64_t)&v91, &multiplier.value);
                  if ((_DWORD)SampleTimingAtIndex)
                    break;
                  if ((BYTE12(v91) & 1) == 0)
                  {
                    SampleTimingAtIndex = FigSignalErrorAt();
                    break;
                  }
                  v24 = *(_DWORD *)(a1 + 20);
                  *(_OWORD *)&time.value = v91;
                  time.epoch = *(_QWORD *)v92;
                  CMTimeConvertScale(&time2, &time, v24, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
                  *(_OWORD *)&time1.value = *v20;
                  v25 = *(_OWORD *)&time1.value;
                  time1.epoch = *(_QWORD *)(a1 + 64);
                  epoch = time1.epoch;
                  v27 = &v17[72 * v19];
                  v28 = time2.epoch;
                  *(_OWORD *)v27 = *(_OWORD *)&time2.value;
                  *((_QWORD *)v27 + 2) = v28;
                  *(_OWORD *)(v27 + 24) = v25;
                  *((_QWORD *)v27 + 5) = epoch;
                  *((_OWORD *)v27 + 3) = v25;
                  *((_QWORD *)v27 + 8) = epoch;
                  time = time2;
                  CMTimeMultiply(&rhs, &time, multiplier.value);
                  *(_OWORD *)&lhs.value = *v20;
                  lhs.epoch = *(_QWORD *)(a1 + 64);
                  CMTimeAdd(&time, &lhs, &rhs);
                  *v20 = *(_OWORD *)&time.value;
                  *(_QWORD *)(a1 + 64) = time.epoch;
                  v19 += multiplier.value;
                  v18 = a2;
                  if (v19 >= a2)
                    goto LABEL_19;
                }
                v34 = SampleTimingAtIndex;
                free(v17);
                v30 = v58;
                v31 = v60;
                v33 = v62;
                if (!(_DWORD)v34)
                {
                  v29 = 0;
                  v8 = 0;
                  v17 = 0;
                  v32 = a2;
                  goto LABEL_45;
                }
                return v34;
              }
            }
          }
          return 4294950936;
        }
        v34 = 4294950936;
        if ((unint64_t)a2 > 0x38E38E38E38E38ELL || !(72 * a2))
          return v34;
        v35 = *(_QWORD *)(a1 + 104);
        v55 = *(_QWORD *)(a1 + 96);
        v36 = *(char **)(a1 + 112);
        v37 = (char *)malloc_type_malloc(72 * a2, 0x5CC9CBA6uLL);
        if (!v37)
          return 4294950936;
        v38 = 0;
        v39 = (CMTimeValue *)(a1 + 72);
        v65 = v36;
        v54 = v35;
        v64 = (CMTime *)&v36[72 * v35 - 72];
        v66 = (_OWORD *)(a1 + 192);
        v70 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 48);
        v72 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 32);
        v69 = *(_QWORD *)(MEMORY[0x1E0CA2E90] + 64);
        v67 = *MEMORY[0x1E0CA2E90];
        v68 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 16);
        v40 = *MEMORY[0x1E0CA2E18];
        v41 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
        v57 = v37;
        v42 = v37;
        v43 = a2;
        v78 = *MEMORY[0x1E0CA2E18];
        while (1)
        {
          *(_OWORD *)&v92[16] = v72;
          *(_OWORD *)&v93.value = v70;
          v93.epoch = v69;
          v91 = v67;
          *(_OWORD *)v92 = v68;
          *(_OWORD *)&multiplier.value = v40;
          multiplier.epoch = v41;
          *(_OWORD *)&v84.value = v40;
          v84.epoch = v41;
          *(_OWORD *)&v83.value = v40;
          v83.epoch = v41;
          *(_OWORD *)&v82.value = v40;
          v82.epoch = v41;
          v94 = *v39;
          v95 = *(_DWORD *)(a1 + 80);
          v44 = *(_DWORD *)(a1 + 84);
          v45 = *(_QWORD *)(a1 + 88);
          v46 = getSampleTimingAtIndex(v43, v38, a3, (__int128 *)a4, (uint64_t)&v91, 0);
          if ((_DWORD)v46)
          {
LABEL_48:
            v34 = v46;
            free(v57);
            return v34;
          }
          if ((v44 & 1) != 0)
            break;
          CMTimeMake(&multiplier, 0, *(_DWORD *)(a1 + 20));
          v43 = a2;
LABEL_41:
          lhs = multiplier;
          time1 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
          time2 = *(CMTime *)&v92[8];
          time = v93;
          if (CMTimeCompare(&time2, &time))
          {
            memset(&time2, 0, sizeof(time2));
            time = *(CMTime *)&v92[8];
            rhs = *v75;
            CMTimeSubtract(&time2, &time, &rhs);
            time = time2;
            rhs = lhs;
            CMTimeSubtract(&time1, &time, &rhs);
          }
          v48 = *(_DWORD *)(a1 + 20);
          time2 = time1;
          CMTimeConvertScale(&v82, &time2, v48, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
          time1 = multiplier;
          time2 = v82;
          CMTimeAdd(&v84, &time1, &time2);
          v40 = v78;
          *(_OWORD *)v42 = v78;
          *((_QWORD *)v42 + 2) = v41;
          v49 = v84.epoch;
          *(_OWORD *)(v42 + 24) = *(_OWORD *)&v84.value;
          *((_QWORD *)v42 + 5) = v49;
          v50 = *(_OWORD *)&multiplier.value;
          *((_QWORD *)v42 + 8) = multiplier.epoch;
          *((_OWORD *)v42 + 3) = v50;
          v51 = *(_OWORD *)&v93.value;
          *(_OWORD *)(a1 + 152) = *(_OWORD *)&v92[16];
          *(_OWORD *)(a1 + 168) = v51;
          *(_QWORD *)(a1 + 184) = v93.epoch;
          v52 = *(_OWORD *)v92;
          *(_OWORD *)(a1 + 120) = v91;
          *(_OWORD *)(a1 + 136) = v52;
          *(_OWORD *)v39 = *(_OWORD *)&multiplier.value;
          *(_QWORD *)(a1 + 88) = multiplier.epoch;
          ++v38;
          v42 += 72;
          if (v43 == v38)
          {
            *(_QWORD *)(a1 + 96) = v43;
            *(_QWORD *)(a1 + 104) = v43;
            v29 = 1;
            v8 = v54;
            v32 = v55;
            v9 = a8;
            *(_QWORD *)(a1 + 112) = v57;
            v31 = a6;
            v33 = a7;
            v30 = a5;
            v17 = v65;
            goto LABEL_45;
          }
        }
        *(_OWORD *)&time1.value = v78;
        time1.epoch = v41;
        *(_OWORD *)&time2.value = v78;
        time2.epoch = v41;
        *(_OWORD *)&time.value = v78;
        time.epoch = v41;
        rhs = v93;
        lhs = *v75;
        CMTimeSubtract(&time1, &rhs, &lhs);
        rhs.value = v94;
        rhs.timescale = v95;
        rhs.flags = v44;
        rhs.epoch = v45;
        lhs = time1;
        if (CMTimeCompare(&rhs, &lhs) < 0)
        {
          rhs = time1;
          lhs.value = v94;
          lhs.timescale = v95;
          lhs.flags = v44;
          lhs.epoch = v45;
          CMTimeSubtract(&time2, &rhs, &lhs);
          v47 = *(_DWORD *)(a1 + 20);
          rhs = time2;
          CMTimeConvertScale(&time, &rhs, v47, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
          rhs = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
          lhs = time;
          if (!CMTimeCompare(&rhs, &lhs))
          {
            CMTimeMake(&rhs, 1, *(_DWORD *)(a1 + 20));
            time = rhs;
          }
        }
        else
        {
          rhs = *(CMTime *)(a1 + 168);
          lhs = v93;
          if ((CMTimeCompare(&rhs, &lhs) & 0x80000000) == 0)
          {
            v46 = FigSignalErrorAt();
            if ((_DWORD)v46)
              goto LABEL_48;
            if (v38)
              goto LABEL_31;
            goto LABEL_36;
          }
          CMTimeMake(&time, 1, *(_DWORD *)(a1 + 20));
        }
        v83 = time;
        if (v38)
        {
LABEL_31:
          *((CMTime *)v42 - 3) = v83;
          v43 = a2;
LABEL_40:
          time2.value = v94;
          time2.timescale = v95;
          time2.flags = v44;
          time2.epoch = v45;
          time = v83;
          CMTimeAdd(&time1, &time2, &time);
          multiplier = time1;
          *v66 = *(_OWORD *)&v83.value;
          *(_QWORD *)(a1 + 208) = v83.epoch;
          goto LABEL_41;
        }
LABEL_36:
        v43 = a2;
        if (v65)
        {
          *v64 = v83;
        }
        else
        {
          *(_OWORD *)&time1.value = *v66;
          time1.epoch = *(_QWORD *)(a1 + 208);
          time2 = v83;
          if (CMTimeCompare(&time1, &time2))
          {
            *(_OWORD *)&v83.value = *v66;
            v83.epoch = *(_QWORD *)(a1 + 208);
          }
        }
        goto LABEL_40;
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t MediaSampleTimingGeneratorCreateMediaSampleTimingInfoArrayWithDefaultLastSampleDuration(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  unint64_t v8;
  size_t v9;
  char *v12;
  char *v13;
  char *v14;
  __int128 v15;
  CMTime v16;

  v8 = *(_QWORD *)(a1 + 104);
  if (v8)
  {
    v9 = 72 * v8;
    if (v8 > 0x38E38E38E38E38ELL || v9 == 0)
      return FigSignalErrorAt();
    v13 = (char *)malloc_type_malloc(v9, 0x5CC9CBA6uLL);
    if (!v13)
      return FigSignalErrorAt();
    v12 = v13;
    memcpy(v13, *(const void **)(a1 + 112), 72 * *(_QWORD *)(a1 + 104));
    v14 = &v12[72 * *(_QWORD *)(a1 + 104)];
    MediaSampleTimingGeneratorGetDefaultLastSampleDuration((CMTime *)a1, &v16);
    v15 = *(_OWORD *)&v16.value;
    *((_QWORD *)v14 - 7) = v16.epoch;
    *(_OWORD *)(v14 - 72) = v15;
  }
  else
  {
    v12 = 0;
  }
  *a2 = *(_QWORD *)(a1 + 96);
  *a3 = *(_QWORD *)(a1 + 104);
  *a4 = v12;
  return 0;
}

CMTime *MediaSampleTimingGeneratorGetDefaultLastSampleDuration@<X0>(CMTime *result@<X0>, CMTime *a2@<X8>)
{
  uint64_t v3;
  CMTime *v4;
  CMTime *v5;
  CMTimeEpoch epoch;
  int32_t epoch_high;
  CMTime v8;
  CMTime time1;

  v3 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)&a2->value = *MEMORY[0x1E0CA2E18];
  a2->epoch = *(_QWORD *)(v3 + 16);
  if (result->flags == 2)
  {
    v4 = result;
    if ((result[6].flags & 1) != 0)
    {
      if ((result[5].flags & 1) != 0
        && (v5 = result + 5,
            time1 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68],
            v8 = result[5],
            CMTimeCompare(&time1, &v8)))
      {
        *(_OWORD *)&a2->value = *(_OWORD *)&v5->value;
        epoch = v4[5].epoch;
      }
      else if ((v4[8].flags & 1) != 0)
      {
        *(_OWORD *)&a2->value = *(_OWORD *)&v4[8].value;
        epoch = v4[8].epoch;
      }
      else
      {
        memset(&time1, 0, sizeof(time1));
        CMTimeMake(&time1, 1, 15);
        *(_OWORD *)&a2->value = *(_OWORD *)&time1.value;
        epoch = time1.epoch;
      }
      a2->epoch = epoch;
      epoch_high = HIDWORD(v4->epoch);
      *(_OWORD *)&time1.value = *(_OWORD *)&a2->value;
      time1.epoch = epoch;
      return CMTimeConvertScale(a2, &time1, epoch_high, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    }
  }
  return result;
}

uint64_t MediaSampleTimingGeneratorCreateLastMediaSampleTimingInfoArray(uint64_t a1, __int128 *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v10;
  int32_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  CMTime v16;
  CMTime time1;

  v10 = *(_QWORD *)(a1 + 112);
  if (v10 && (*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v11 = *(_DWORD *)(a1 + 20);
    v16 = *(CMTime *)a2;
    CMTimeConvertScale(&time1, &v16, v11, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    *(CMTime *)a2 = time1;
    time1 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    v16 = *(CMTime *)a2;
    if (!CMTimeCompare(&time1, &v16))
    {
      CMTimeMake(&time1, 1, *(_DWORD *)(a1 + 20));
      *(CMTime *)a2 = time1;
    }
    v12 = *(_QWORD *)(a1 + 112) + 72 * *(_QWORD *)(a1 + 104);
    v13 = *a2;
    *(_QWORD *)(v12 - 56) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(v12 - 72) = v13;
    v10 = *(_QWORD *)(a1 + 112);
  }
  *a3 = *(_QWORD *)(a1 + 96);
  *a4 = *(_QWORD *)(a1 + 104);
  *a5 = v10;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v14 = *a2;
  *(_QWORD *)(a1 + 208) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 192) = v14;
  return 0;
}

uint64_t MediaSampleTimingGeneratorCreate(const __CFAllocator *a1, int a2, int a3, _QWORD *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  CFTypeRef v10;
  uint64_t result;

  if ((a3 - 3) < 0xFFFFFFFE)
    return 4294950935;
  v8 = CFAllocatorAllocate(a1, 216, 0);
  if (!v8)
    return 4294950936;
  v9 = v8;
  v8[26] = 0;
  *((_OWORD *)v8 + 11) = 0u;
  *((_OWORD *)v8 + 12) = 0u;
  *((_OWORD *)v8 + 9) = 0u;
  *((_OWORD *)v8 + 10) = 0u;
  *((_OWORD *)v8 + 7) = 0u;
  *((_OWORD *)v8 + 8) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *(_OWORD *)v8 = 0u;
  if (a1)
    v10 = CFRetain(a1);
  else
    v10 = 0;
  result = 0;
  *v9 = v10;
  *((_DWORD *)v9 + 2) = a2;
  *((_DWORD *)v9 + 3) = a3;
  *a4 = v9;
  return result;
}

void MediaSampleTimingGeneratorRelease(void *a1)
{
  const __CFAllocator *v2;

  if (a1)
  {
    v2 = *(const __CFAllocator **)a1;
    free(*((void **)a1 + 14));
    CFAllocatorDeallocate(v2, a1);
    if (v2)
      CFRelease(v2);
  }
}

uint64_t MediaSampleTimingGeneratorSetMediaTimeScale(uint64_t a1, int a2)
{
  if (!a2 || *(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  *(_DWORD *)(a1 + 20) = a2;
  return 0;
}

uint64_t MediaSampleTimingGeneratorGetMediaTimeScale(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void MediaSampleTimingGeneratorReset(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0CA2E18];
  v3 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)(a1 + 24) = *MEMORY[0x1E0CA2E18];
  v4 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 48) = v3;
  *(_QWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 72) = v3;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = v4;
  free(*(void **)(a1 + 112));
  *(_QWORD *)(a1 + 112) = 0;
}

uint64_t getSampleTimingAtIndex(uint64_t a1, uint64_t multiplier, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t *a6)
{
  __int16 v11;
  __int128 *v12;
  CMTimeValue v13;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  CMTimeFlags v16;
  CMTimeEpoch v17;
  uint64_t v18;
  CMTimeValue v19;
  CMTimeValue v20;
  CMTimeValue v22;
  CMTime v23;
  CMTime time;
  CMTime v25;
  __int128 v26;
  uint64_t v27;
  CMTime lhs;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (a3 != 1)
  {
    v12 = (__int128 *)((char *)a4 + 72 * multiplier);
    v26 = *v12;
    v13 = *((_QWORD *)v12 + 3);
    v27 = *((_QWORD *)v12 + 2);
    value = v13;
    flags = *((_DWORD *)v12 + 9);
    timescale = *((_DWORD *)v12 + 8);
    epoch = *((_QWORD *)v12 + 5);
    lhs.value = *((_QWORD *)v12 + 6);
    v16 = *((_DWORD *)v12 + 15);
    lhs.timescale = *((_DWORD *)v12 + 14);
    v17 = *((_QWORD *)v12 + 8);
    v18 = 1;
    if ((v16 & 1) != 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  v25 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  if (multiplier)
  {
    if ((*((_BYTE *)a4 + 12) & 1) == 0)
      return (__int16)FigSignalErrorAt();
    v26 = *a4;
    v27 = *((_QWORD *)a4 + 2);
    time = *(CMTime *)a4;
    CMTimeMultiply(&v25, &time, multiplier);
    lhs = *(CMTime *)((_BYTE *)a4 + 1);
    v23 = v25;
    CMTimeAdd(&time, &lhs, &v23);
    flags = time.flags;
    timescale = time.timescale;
    epoch = time.epoch;
    lhs = *(CMTime *)((_BYTE *)a4 + 2);
    value = time.value;
    v23 = v25;
    CMTimeAdd(&time, &lhs, &v23);
    lhs.value = time.value;
    v16 = time.flags;
    lhs.timescale = time.timescale;
    v17 = time.epoch;
  }
  else
  {
    v22 = *((_QWORD *)a4 + 3);
    v27 = *((_QWORD *)a4 + 2);
    value = v22;
    flags = *((_DWORD *)a4 + 9);
    timescale = *((_DWORD *)a4 + 8);
    epoch = *((_QWORD *)a4 + 5);
    lhs.value = *((_QWORD *)a4 + 6);
    v16 = *((_DWORD *)a4 + 15);
    lhs.timescale = *((_DWORD *)a4 + 14);
    v26 = *a4;
    v17 = *((_QWORD *)a4 + 8);
  }
  v18 = a1 - multiplier;
  if ((v16 & 1) == 0)
  {
LABEL_6:
    lhs.value = value;
    lhs.timescale = timescale;
    v16 = flags;
    v17 = epoch;
  }
LABEL_7:
  *(_OWORD *)a5 = v26;
  v19 = value;
  *(_QWORD *)(a5 + 16) = v27;
  *(_QWORD *)(a5 + 24) = v19;
  *(_DWORD *)(a5 + 32) = timescale;
  *(_DWORD *)(a5 + 36) = flags;
  v20 = lhs.value;
  *(_QWORD *)(a5 + 40) = epoch;
  *(_QWORD *)(a5 + 48) = v20;
  *(_DWORD *)(a5 + 56) = lhs.timescale;
  *(_DWORD *)(a5 + 60) = v16;
  *(_QWORD *)(a5 + 64) = v17;
  v11 = 0;
  if (a6)
    *a6 = v18;
  return v11;
}

void setCuePositionDo(double *a1)
{
  uint64_t v2;
  const __CFAttributedString *v3;
  const __CFDictionary *Attribute;
  const __CFDictionary *v5;
  CFDictionaryRef DictionaryRepresentation;
  CFDictionaryRef v7;
  CFDictionaryRef v8;
  CFDictionaryRef v9;
  CGSize v10;
  CGPoint v11;
  CGRect v12;
  CGRect rect;
  CFRange effectiveRange;
  CFRange v15;
  CFRange v16;
  CGRect v17;
  CGRect v18;

  v2 = *(_QWORD *)a1;
  v3 = *(const __CFAttributedString **)(*(_QWORD *)a1 + 56);
  if (v3)
  {
    effectiveRange.location = 0;
    effectiveRange.length = 0;
    v10 = *(CGSize *)(MEMORY[0x1E0C9D648] + 16);
    v11 = (CGPoint)*MEMORY[0x1E0C9D648];
    rect.origin = (CGPoint)*MEMORY[0x1E0C9D648];
    rect.size = v10;
    Attribute = (const __CFDictionary *)CFAttributedStringGetAttribute(v3, 0, CFSTR("kFigSubtitleRenderer_SuggestLayout"), &effectiveRange);
    if (Attribute)
      CGRectMakeWithDictionaryRepresentation(Attribute, &rect);
    v12.origin = v11;
    v12.size = v10;
    v5 = (const __CFDictionary *)CFAttributedStringGetAttribute(*(CFAttributedStringRef *)(v2 + 56), 0, CFSTR("kFigSubtitleRenderer_SuggestTextLayout"), &effectiveRange);
    if (v5)
      CGRectMakeWithDictionaryRepresentation(v5, &v12);
    v17.size.width = rect.size.width;
    v17.size.height = rect.size.height;
    v17.origin.y = a1[2] - rect.size.height * 0.5;
    rect.origin.x = a1[1] - rect.size.width * 0.5;
    v17.origin.x = rect.origin.x;
    rect.origin.y = v17.origin.y;
    rect = CGRectIntegral(v17);
    v18.size.width = v12.size.width;
    v18.size.height = v12.size.height;
    v18.origin.y = a1[2] - v12.size.height * 0.5;
    v12.origin.x = a1[1] - v12.size.width * 0.5;
    v18.origin.x = v12.origin.x;
    v12.origin.y = v18.origin.y;
    v12 = CGRectIntegral(v18);
    DictionaryRepresentation = CGRectCreateDictionaryRepresentation(rect);
    if (DictionaryRepresentation)
    {
      v7 = DictionaryRepresentation;
      v15.length = CFAttributedStringGetLength(*(CFAttributedStringRef *)(v2 + 56));
      v15.location = 0;
      CFAttributedStringSetAttribute(*(CFMutableAttributedStringRef *)(v2 + 56), v15, CFSTR("kFigSubtitleRenderer_SuggestLayout"), v7);
      CFRelease(v7);
    }
    v8 = CGRectCreateDictionaryRepresentation(v12);
    if (v8)
    {
      v9 = v8;
      v16.length = CFAttributedStringGetLength(*(CFAttributedStringRef *)(v2 + 56));
      v16.location = 0;
      CFAttributedStringSetAttribute(*(CFMutableAttributedStringRef *)(v2 + 56), v16, CFSTR("kFigSubtitleRenderer_SuggestTextLayout"), v9);
      CFRelease(v9);
    }
  }
}

CGFloat getSuggestedBoundsDo(uint64_t *a1)
{
  uint64_t v2;
  _OWORD *v3;
  CGSize v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;
  __CFDictionary *SubtitleSampleFromAttributedString;
  CGFloat result;
  __CFDictionary *v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  const void *AttributedStringFromSubtitleSample;
  const void *v16;
  CGSize v17;
  const __CFAttributedString *v18;
  const __CFDictionary *Attribute;
  uint64_t v20;
  CGSize size;
  CGRect v22;
  CGSize v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  unint64_t v28;
  int v29;
  __int128 v30;
  __int128 v31;
  CFTypeRef cf;
  CFRange effectiveRange;
  CGSize v34;
  CGSize v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  v2 = *a1;
  if (*((_BYTE *)a1 + 8))
  {
    if (*(_QWORD *)(v2 + 56))
    {
      v3 = (_OWORD *)a1[2];
      v4 = *(CGSize *)(v2 + 40);
      effectiveRange = *(CFRange *)(v2 + 24);
      v34 = v4;
      v5 = *MEMORY[0x1E0C9BAA8];
      v6 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
      v35 = v4;
      v36 = v5;
      v7 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
      v37 = v6;
      v38 = v7;
      v8 = objc_msgSend(*(id *)v2, "contentsAreFlipped");
      SubtitleSampleFromAttributedString = FigSubtitleRendererCreateSubtitleSampleFromAttributedString(*(const void **)(v2 + 56));
      if (SubtitleSampleFromAttributedString)
      {
        v11 = SubtitleSampleFromAttributedString;
        cf = 0;
        v12 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
        v30 = *MEMORY[0x1E0C9D648];
        v31 = v12;
        v13 = *(_QWORD *)(v2 + 16);
        v23 = v35;
        v24 = v36;
        v25 = v37;
        v26 = v38;
        v22.origin = (CGPoint)effectiveRange;
        v22.size = v34;
        v27 = 0;
        v28 = 0xBFF0000000000000;
        v29 = v8;
        FigSubtitleRendererLayout(v13, (uint64_t)v11, &v22, (uint64_t)&v30, (uint64_t)&cf);
        CFRelease(v11);
        v14 = v31;
        *v3 = v30;
        v3[1] = v14;
        AttributedStringFromSubtitleSample = FigSubtitleRendererGetAttributedStringFromSubtitleSample((const __CFDictionary *)cf);
        v16 = *(const void **)(v2 + 56);
        *(_QWORD *)(v2 + 56) = AttributedStringFromSubtitleSample;
        if (AttributedStringFromSubtitleSample)
          CFRetain(AttributedStringFromSubtitleSample);
        if (v16)
          CFRelease(v16);
        if (cf)
          CFRelease(cf);
      }
    }
  }
  else
  {
    effectiveRange.location = 0;
    effectiveRange.length = 0;
    v17 = *(CGSize *)(MEMORY[0x1E0C9D648] + 16);
    v22.origin = (CGPoint)*MEMORY[0x1E0C9D648];
    v22.size = v17;
    v18 = *(const __CFAttributedString **)(v2 + 56);
    if (v18)
    {
      Attribute = (const __CFDictionary *)CFAttributedStringGetAttribute(v18, 0, CFSTR("kFigSubtitleRenderer_SuggestLayout"), &effectiveRange);
      if (Attribute)
        CGRectMakeWithDictionaryRepresentation(Attribute, &v22);
    }
    v20 = a1[2];
    result = v22.origin.x;
    size = v22.size;
    *(CGPoint *)v20 = v22.origin;
    *(CGSize *)(v20 + 16) = size;
  }
  return result;
}

const __CFAttributedString *getContentIDDo_0(uint64_t *a1)
{
  uint64_t v2;
  const __CFAttributedString *result;
  CFRange v4;

  v2 = *a1;
  v4.location = 0;
  v4.length = 0;
  result = *(const __CFAttributedString **)(v2 + 56);
  if (result)
    result = (const __CFAttributedString *)CFAttributedStringGetAttribute(result, 0, (CFStringRef)*MEMORY[0x1E0CA2B10], &v4);
  *(_QWORD *)a1[1] = result;
  return result;
}

void setContentDo_0(uint64_t *a1)
{
  const void *v1;
  uint64_t v2;
  const void *v3;

  v2 = *a1;
  v1 = (const void *)a1[1];
  v3 = *(const void **)(v2 + 56);
  *(_QWORD *)(v2 + 56) = v1;
  if (v1)
    CFRetain(v1);
  if (v3)
    CFRelease(v3);
  *(_BYTE *)(v2 + 64) = 1;
}

void setRendererDo_0(uint64_t *a1)
{
  const void *v1;
  uint64_t v2;
  const void *v3;

  v2 = *a1;
  v1 = (const void *)a1[1];
  v3 = *(const void **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = v1;
  if (v1)
    CFRetain(v1);
  if (v3)
    CFRelease(v3);
}

__n128 setViewportDo_0(uint64_t *a1)
{
  __n128 result;
  uint64_t v2;

  result.n128_u64[0] = a1[3];
  if (result.n128_f64[0] >= 0.0)
  {
    result.n128_u64[0] = a1[4];
    if (result.n128_f64[0] >= 0.0)
    {
      v2 = *a1;
      result = *(__n128 *)(a1 + 1);
      *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 3);
      *(__n128 *)(v2 + 24) = result;
    }
  }
  return result;
}

void setDefaultFontSizeDo(_QWORD *a1)
{
  const __CFAttributedString *v1;
  CFNumberRef v2;
  CFNumberRef v3;
  uint64_t valuePtr;
  CFRange v5;

  v1 = *(const __CFAttributedString **)(*a1 + 56);
  if (v1)
  {
    valuePtr = a1[1];
    v2 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberCGFloatType, &valuePtr);
    if (v2)
    {
      v3 = v2;
      v5.length = CFAttributedStringGetLength(v1);
      v5.location = 0;
      CFAttributedStringSetAttribute(v1, v5, (CFStringRef)*MEMORY[0x1E0CA52B0], v3);
      CFRelease(v3);
    }
  }
}

void sub_192E8E088(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t FAIRPLAY_CALL_LOG(uint64_t a1)
{
  if (FAIRPLAY_CALL_LOG_sInitOnce != -1)
    dispatch_once_f(&FAIRPLAY_CALL_LOG_sInitOnce, &FAIRPLAY_CALL_LOG_sLoggingPolicy, (dispatch_function_t)FAIRPLAY_CALL_LOG_INIT_ONCE);
  return a1;
}

void FAIRPLAY_CALL_LOG_INIT_ONCE(BOOL *a1)
{
  const void *v2;

  v2 = (const void *)MGCopyAnswer();
  *a1 = v2 != (const void *)*MEMORY[0x1E0C9AE50];
  a1[1] = 1;
  if (v2)
    CFRelease(v2);
}

uint64_t FigTTMLStylingCreate(const __CFAllocator *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t DerivedStorage;
  CFMutableArrayRef Mutable;
  uint64_t v11;

  if (a4)
  {
    FigTTMLNodeGetClassID();
    v8 = CMDerivedObjectCreate();
    if (!(_DWORD)v8)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v8 = FigTTMLInitializeNodeBaseStorage(DerivedStorage, (__int128 *)a3);
      if (!(_DWORD)v8)
      {
        v8 = FigTTMLAddCurrentElementAttributesToDictionary(a2, *(__CFDictionary **)(DerivedStorage + 24));
        if (!(_DWORD)v8)
        {
          Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
          *(_QWORD *)(DerivedStorage + 136) = Mutable;
          if (Mutable)
          {
            *(_QWORD *)a3 = 0;
            *(_QWORD *)(a3 + 8) = 0;
            v11 = FigTTMLParseNode(a2, (uint64_t (*)(uint64_t, uint64_t *, CFTypeRef *))figTTMLStyling_ConsumeChildNode, (uint64_t *)a3);
            if (!(_DWORD)v11)
              *a4 = 0;
            return v11;
          }
          return FigSignalErrorAt();
        }
      }
    }
    return v8;
  }
  return FigSignalErrorAt();
}

uint64_t figTTMLStyling_ConsumeChildNode(uint64_t a1, CFTypeRef *a2, void **a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  CFAllocatorRef v9;
  uint64_t v10;
  CFTypeRef cf;
  CFTypeRef v13;
  void *value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v13 = 0;
  value = 0;
  cf = 0;
  v7 = FigTTMLGetLibXMLAccess();
  if (!v7)
  {
    v10 = FigSignalErrorAt();
    goto LABEL_13;
  }
  if ((*(unsigned int (**)(uint64_t))(v7 + 72))(a1) != 1)
    goto LABEL_8;
  v8 = FigTTMLCopyNamespaceAndLocalNameOfCurrentNode(a1, (const char **)&v13, (CFStringRef *)&cf);
  if ((_DWORD)v8)
    goto LABEL_18;
  if (FigCFEqual() && FigCFEqual())
  {
    v9 = CFGetAllocator(*a2);
    v8 = FigTTMLStyleCreate((uint64_t)v9, a1, (uint64_t)a2, &value);
    if (!(_DWORD)v8)
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 136), value);
      goto LABEL_9;
    }
  }
  else
  {
LABEL_8:
    v8 = FigTTMLSkipNode(a1, (uint64_t *)a2, *(__CFArray **)(DerivedStorage + 128));
    if (!(_DWORD)v8)
    {
LABEL_9:
      v10 = 0;
      if (a3)
      {
        *a3 = value;
        value = 0;
      }
      goto LABEL_11;
    }
  }
LABEL_18:
  v10 = v8;
LABEL_11:
  if (cf)
    CFRelease(cf);
LABEL_13:
  if (v13)
    CFRelease(v13);
  if (value)
    CFRelease(value);
  return v10;
}

void figTTMLStyling_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 136);
  if (v1)
    CFRelease(v1);
  FigTTMLReleaseNodeBaseStorage(DerivedStorage);
}

CFStringRef figTTMLStyling_CopyDebugDesc()
{
  const void *v0;
  CFStringRef v1;

  CMBaseObjectGetDerivedStorage();
  v0 = (const void *)FigCFCopyCompactDescription();
  v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("styling: %@"), v0);
  if (v0)
    CFRelease(v0);
  return v1;
}

uint64_t figTTMLStyling_CopyChildNodeArray(const void *a1, CFArrayRef *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const __CFAllocator *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v5 = DerivedStorage;
    v6 = CFGetAllocator(a1);
    *a2 = CFArrayCreateCopy(v6, *(CFArrayRef *)(v5 + 136));
  }
  else
  {
    FigSignalErrorAt();
  }
  return 0;
}

uint64_t figTTMLStyling_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2)
    return FigSignalErrorAt();
  *a2 = 12;
  return 0;
}

uint64_t FigCDSActionProtocolGetProtocolID()
{
  MEMORY[0x19402F294](&FigCDSActionProtocolGetProtocolID_sRegisterFigCDSActionProtocolTypeOnce, RegisterFigCDSActionProtocolType);
  return sFigCDSActionProtocolID;
}

uint64_t RegisterFigCDSActionProtocolType()
{
  return FigBaseProtocolRegisterProtocol();
}

uint64_t FigCDSMoveToActionProtocolGetProtocolID()
{
  MEMORY[0x19402F294](&FigCDSMoveToActionProtocolGetProtocolID_sRegisterFigCDSMoveToActionProtocolTypeOnce, RegisterFigCDSMoveToActionProtocolType);
  return sFigCDSMoveToActionProtocolID;
}

uint64_t RegisterFigCDSMoveToActionProtocolType()
{
  return FigBaseProtocolRegisterProtocol();
}

uint64_t FigAlternateNSPredicateFilterCreate(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  id v6;
  uint64_t v7;
  __int128 v9[2];
  CFStringRef (*v10)(uint64_t, void *);

  v6 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  objc_msgSend(v6, "setObject:atIndexedSubscript:", a2, 0);
  v9[0] = xmmword_1E2FAA9D0;
  v9[1] = *(_OWORD *)&off_1E2FAA9E0;
  v10 = clientPredicatesFilter_copyDescAddendum;
  v7 = FigSimpleAlternateFilterCreate(a1, CFSTR("ClientPredicatesFilter"), 872, v9, v6, a3);

  return v7;
}

uint64_t clientPredicatesFilter_filter(uint64_t a1, void *a2)
{
  void *v3;
  FigAlternateObjC *v4;
  uint64_t v5;

  v3 = (void *)objc_msgSend(a2, "objectAtIndexedSubscript:", 0);
  v4 = -[FigAlternateObjC initWithFigAlternate:]([FigAlternateObjC alloc], "initWithFigAlternate:", a1);
  v5 = objc_msgSend(v3, "evaluateWithObject:", v4);

  return v5;
}

uint64_t clientPredicatesFilter_allEqualMinSortingFn()
{
  return 0;
}

CFStringRef clientPredicatesFilter_copyDescAddendum(uint64_t a1, void *a2)
{
  uint64_t v2;

  v2 = objc_msgSend(a2, "objectAtIndexedSubscript:", 0);
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("predicate: %@"), v2);
}

uint64_t FigAlternateMultipleNSPredicateFilterCreate(uint64_t a1, void *a2, _QWORD *a3)
{
  uint64_t inserted;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  CFTypeRef cf;
  CFTypeRef v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v19 = 0;
  inserted = FigAlternateFilterTreeCreate(a1, &v19);
  if (!(_DWORD)inserted)
  {
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v7 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v14, v20, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v15;
      v10 = 0x7FFFFFFF;
LABEL_4:
      v11 = 0;
      while (1)
      {
        if (*(_QWORD *)v15 != v9)
          objc_enumerationMutation(a2);
        inserted = FigAlternateNSPredicateFilterCreate(a1, *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * v11), &cf);
        if ((_DWORD)inserted)
          break;
        inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)v19, cf, v10);
        if ((_DWORD)inserted)
          break;
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        ++v11;
        --v10;
        if (v8 == v11)
        {
          v8 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v14, v20, 16);
          if (v8)
            goto LABEL_4;
          goto LABEL_13;
        }
      }
    }
    else
    {
LABEL_13:
      inserted = FigAlternateFilterTreeCreateFilter(v19, CFSTR("MultipleNSPredicateTreeFilter"), 872, a3);
    }
  }
  v12 = inserted;
  if (cf)
    CFRelease(cf);
  if (v19)
    CFRelease(v19);
  return v12;
}

uint64_t FigAlternateMinimumOrMaximumInKeyPathFilterCreate(uint64_t a1, const void *a2, int a3, _QWORD *a4)
{
  uint64_t (*v4)(uint64_t, uint64_t, void *);
  __int128 v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, void *);
  uint64_t v9;

  v4 = faf_lowestInKeyPathComparatorFn;
  v6 = 0uLL;
  if (!a3)
    v4 = faf_highestInKeyPathComparatorFn;
  v7 = 0;
  v8 = v4;
  v9 = 0;
  return FigSimpleAlternateFilterCreate(a1, CFSTR("MinOrMaxInKeyPathFilter"), 595, &v6, a2, a4);
}

uint64_t faf_lowestInKeyPathComparatorFn(uint64_t a1, uint64_t a2, void *a3)
{
  return -faf_highestInKeyPathComparatorFn(a1, a2, a3);
}

uint64_t faf_highestInKeyPathComparatorFn(uint64_t a1, uint64_t a2, void *a3)
{
  FigAlternateObjC *v5;
  FigAlternateObjC *v6;
  int v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;

  v5 = -[FigAlternateObjC initWithFigAlternate:]([FigAlternateObjC alloc], "initWithFigAlternate:", a1);
  v6 = -[FigAlternateObjC initWithFigAlternate:]([FigAlternateObjC alloc], "initWithFigAlternate:", a2);
  v7 = objc_msgSend(a3, "containsString:", CFSTR("presentationSize"));
  v8 = (void *)-[FigAlternateObjC valueForKeyPath:](v5, "valueForKeyPath:", a3);
  if (v7)
  {
    objc_msgSend(v8, "sizeValue");
    v10 = v9;
    objc_msgSend((id)-[FigAlternateObjC valueForKeyPath:](v6, "valueForKeyPath:", a3), "sizeValue");
  }
  else
  {
    objc_msgSend(v8, "doubleValue");
    v10 = v12;
    objc_msgSend((id)-[FigAlternateObjC valueForKeyPath:](v6, "valueForKeyPath:", a3), "doubleValue");
  }
  return (__PAIR128__(v10 < v11, *(unint64_t *)&v11) - *(unint64_t *)&v10) >> 64;
}

uint64_t FigAlternateMultipleAlternateQualifierFilterCreate(uint64_t a1, void *a2, _QWORD *a3)
{
  uint64_t inserted;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  const void *v13;
  uint64_t (*v14)(uint64_t, uint64_t, void *);
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  CFTypeRef cf;
  CFTypeRef v22;
  __int128 v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, void *);
  uint64_t v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v22 = 0;
  inserted = FigAlternateFilterTreeCreate(a1, &v22);
  if (!(_DWORD)inserted)
  {
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v7 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v17, v27, 16);
    if (!v7)
      goto LABEL_20;
    v8 = v7;
    v9 = 0x7FFFFFFF;
    v10 = *(_QWORD *)v18;
    while (1)
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v18 != v10)
          objc_enumerationMutation(a2);
        v12 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          inserted = FigAlternateNSPredicateFilterCreate(a1, objc_msgSend(v12, "_predicate"), &cf);
          if ((_DWORD)inserted)
            goto LABEL_21;
        }
        else
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v13 = (const void *)objc_msgSend(v12, "_keyPath");
            v23 = 0uLL;
            v24 = 0;
            v14 = faf_lowestInKeyPathComparatorFn;
          }
          else
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_15;
            v13 = (const void *)objc_msgSend(v12, "_keyPath");
            v23 = 0uLL;
            v24 = 0;
            v14 = faf_highestInKeyPathComparatorFn;
          }
          v25 = v14;
          v26 = 0;
          inserted = FigSimpleAlternateFilterCreate(a1, CFSTR("MinOrMaxInKeyPathFilter"), 595, &v23, v13, &cf);
          if ((_DWORD)inserted)
            goto LABEL_21;
        }
LABEL_15:
        inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)v22, cf, v9);
        if ((_DWORD)inserted)
          goto LABEL_21;
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        --v9;
      }
      v8 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v17, v27, 16);
      if (!v8)
      {
LABEL_20:
        inserted = FigAlternateFilterTreeCreateFilter(v22, CFSTR("MultipleAlternateQualifierTreeFilter"), 872, a3);
        break;
      }
    }
  }
LABEL_21:
  v15 = inserted;
  if (cf)
    CFRelease(cf);
  if (v22)
    CFRelease(v22);
  return v15;
}

uint64_t FigAlternateMatchesAnyClientPredicateFilterCreate(uint64_t a1, void *a2, _QWORD *a3)
{
  __CFArray *Mutable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18[2];
  CFStringRef (*v19)();
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v7 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v15;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v15 != v9)
          objc_enumerationMutation(a2);
        v11 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * v10);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_10;
          v11 = (void *)objc_msgSend(v11, "_predicate");
        }
        CFArrayAppendValue(Mutable, v11);
LABEL_10:
        ++v10;
      }
      while (v8 != v10);
      v8 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v8);
  }
  v18[0] = xmmword_1E2FAA9F8;
  v18[1] = *(_OWORD *)&off_1E2FAAA08;
  v19 = finalSelectionMatchesAnyClientPredicate_copyDescAddendum;
  v12 = FigSimpleAlternateFilterCreate(a1, CFSTR("MatchesAnyClientPredicateFilter"), 870, v18, Mutable, a3);
  if (Mutable)
    CFRelease(Mutable);
  return v12;
}

uint64_t finalSelectionMatchesAnyClientPredicate_filter(uint64_t a1, void *a2)
{
  FigAlternateObjC *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = -[FigAlternateObjC initWithFigAlternate:]([FigAlternateObjC alloc], "initWithFigAlternate:", a1);
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v4 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    while (2)
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(a2);
        if ((objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * v7), "evaluateWithObject:", v3) & 1) != 0)
        {
          v8 = 1;
          goto LABEL_11;
        }
        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v5)
        continue;
      break;
    }
  }
  v8 = 0;
LABEL_11:

  return v8;
}

CFStringRef finalSelectionMatchesAnyClientPredicate_copyDescAddendum()
{
  const void *v0;
  CFStringRef v1;

  v0 = (const void *)FigCFCopyCompactDescription();
  v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("predicates: %@"), v0);
  if (v0)
    CFRelease(v0);
  return v1;
}

uint64_t FigCoreTextSubtitleRendererCreate(uint64_t a1, const void **a2)
{
  uint64_t v3;
  uint64_t DerivedStorage;
  NSObject **v5;
  uint64_t v6;
  dispatch_queue_t v7;
  dispatch_queue_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  char __str[256];
  char label[256];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (!a2)
    goto LABEL_19;
  FigSubtitleRendererGetClassID();
  v3 = CMDerivedObjectCreate();
  if (!(_DWORD)v3)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_DWORD *)(DerivedStorage + 28) = 0;
    *(_WORD *)(DerivedStorage + 360) = 256;
    v5 = (NSObject **)(DerivedStorage + 368);
    v3 = FigCaptionRendererSessionCreate(0, 0, (uint64_t)*a2, (uint64_t *)(DerivedStorage + 368));
    if (!(_DWORD)v3)
    {
      if (*v5)
      {
        v6 = (uint64_t)FigCaptionRendererSessionSetCGContextDevice(*v5, 0, 0, 3, 0.0, 0.0, 320.0, 240.0);
        if ((_DWORD)v6)
          goto LABEL_6;
        snprintf(__str, 0x100uLL, "com.apple.coremedia.subtitlerenderer.notificationqueue<%p>", *a2);
        v7 = dispatch_queue_create(__str, 0);
        *(_QWORD *)(DerivedStorage + 16) = v7;
        if (!v7)
          goto LABEL_19;
        snprintf(label, 0x100uLL, "com.apple.coremedia.subtitlerenderer.messagequeue<%p>", *a2);
        v8 = dispatch_queue_create(label, 0);
        *(_QWORD *)(DerivedStorage + 8) = v8;
        if (!v8)
          goto LABEL_19;
        CMNotificationCenterGetDefaultLocalCenter();
        FigGetNotifyingObjectForMediaAccessibilityChanged();
        FigNotificationCenterAddWeakListener();
        clearMediaAccessibilityParams(DerivedStorage + 88);
        *(_BYTE *)DerivedStorage = 1;
        if (*(_QWORD *)(DerivedStorage + 8))
        {
          v9 = (uint64_t *)malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
          if (v9)
          {
            v10 = v9;
            if (*a2)
            {
              CFRetain(*a2);
              v11 = (uint64_t)*a2;
            }
            else
            {
              v11 = 0;
            }
            *v10 = v11;
            dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 8), v10, (dispatch_function_t)mediaAccessibilityDidChangeDoAsync_1);
            return 0;
          }
LABEL_19:
          v6 = FigSignalErrorAt();
          if (!(_DWORD)v6)
            return v6;
          goto LABEL_6;
        }
      }
      return 0;
    }
  }
  v6 = v3;
LABEL_6:
  if (*a2)
  {
    CFRelease(*a2);
    *a2 = 0;
  }
  return v6;
}

uint64_t FigSubtitleRendererUseCoreTextRendererByDefault()
{
  return 0;
}

void mediaAccessibilityDidChange_1(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 8))
  {
    v4 = DerivedStorage;
    v5 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
    if (v5)
    {
      v6 = v5;
      if (a2)
        CFRetain(a2);
      *v6 = a2;
      dispatch_async_f(*(dispatch_queue_t *)(v4 + 8), v6, (dispatch_function_t)mediaAccessibilityDidChangeDoAsync_1);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
}

void clearMediaAccessibilityParams(uint64_t a1)
{
  int64x2_t v2;
  const void *v3;
  const void *v4;
  const void *v5;
  uint64_t v6;
  uint64_t v12;
  const void *v13;

  v2 = vdupq_n_s64(1uLL);
  *(_QWORD *)(a1 + 128) = 1;
  *(int64x2_t *)(a1 + 32) = v2;
  *(int64x2_t *)(a1 + 48) = v2;
  *(int64x2_t *)a1 = v2;
  *(int64x2_t *)(a1 + 16) = v2;
  memset_pattern16((void *)(a1 + 64), &xmmword_1932FA140, 0x40uLL);
  v3 = *(const void **)(a1 + 136);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 136) = 0;
  }
  v4 = *(const void **)(a1 + 144);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 144) = 0;
  }
  v5 = *(const void **)(a1 + 152);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 152) = 0;
  }
  v6 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 160) = _Q0;
  *(_OWORD *)(a1 + 176) = _Q0;
  *(_QWORD *)(a1 + 192) = 0xBFF0000000000000;
  v12 = a1 + 200;
  do
  {
    v13 = *(const void **)(v12 + v6);
    if (v13)
    {
      CFRelease(v13);
      *(_QWORD *)(v12 + v6) = 0;
    }
    v6 += 8;
  }
  while (v6 != 64);
  *(_QWORD *)(a1 + 264) = 0;
}

void mediaAccessibilityDidChangeDoAsync_1(const void **a1)
{
  const void *v2;
  _BYTE *DerivedStorage;
  _BYTE *v4;
  CGColorRef v5;
  CGColorRef v6;
  CGColorRef v7;
  MACaptionAppearanceFontStyle v8;
  MACaptionAppearanceBehavior *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  const void *v14;
  CFTypeRef v15;
  const void *v16;
  CFTypeRef v17;
  const void *v18;
  CFTypeRef v19;
  uint64_t v20;
  __int128 v21;
  _BYTE *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  _QWORD *v26;
  _QWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  CFTypeRef cf[2];
  CFTypeRef v37[2];
  __int128 v38;
  __int128 v39;
  _OWORD v40[4];
  __int128 v41;

  v2 = *a1;
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v41 = 0u;
  v39 = 0u;
  memset(v40, 0, sizeof(v40));
  *(_OWORD *)v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  *(_OWORD *)cf = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v28 = 0u;
  if (*DerivedStorage)
  {
    v4 = DerivedStorage;
    v5 = MACaptionAppearanceCopyForegroundColor(kMACaptionAppearanceDomainUser, (MACaptionAppearanceBehavior *)&v28);
    cf[1] = v5;
    if (v5)
      CGColorGetComponents(v5);
    v6 = MACaptionAppearanceCopyBackgroundColor(kMACaptionAppearanceDomainUser, (MACaptionAppearanceBehavior *)&v28 + 1);
    v37[0] = v6;
    if (v6)
      CGColorGetComponents(v6);
    v7 = MACaptionAppearanceCopyWindowColor(kMACaptionAppearanceDomainUser, (MACaptionAppearanceBehavior *)&v29);
    v37[1] = v7;
    if (v7)
      CGColorGetComponents(v7);
    *(_QWORD *)&v38 = MACaptionAppearanceGetForegroundOpacity(kMACaptionAppearanceDomainUser, (MACaptionAppearanceBehavior *)&v29 + 1);
    *((_QWORD *)&v38 + 1) = MACaptionAppearanceGetBackgroundOpacity(kMACaptionAppearanceDomainUser, (MACaptionAppearanceBehavior *)&v30);
    *(_QWORD *)&v39 = MACaptionAppearanceGetWindowOpacity(kMACaptionAppearanceDomainUser, (MACaptionAppearanceBehavior *)&v30 + 1);
    *((_QWORD *)&v39 + 1) = MACaptionAppearanceGetWindowRoundedCornerRadius(kMACaptionAppearanceDomainUser, (MACaptionAppearanceBehavior *)&v31);
    v8 = kMACaptionAppearanceFontStyleDefault;
    *(_QWORD *)&v40[0] = MACaptionAppearanceGetRelativeCharacterSize(kMACaptionAppearanceDomainUser, (MACaptionAppearanceBehavior *)&v31 + 1);
    v9 = (MACaptionAppearanceBehavior *)&v32;
    do
    {
      *((_QWORD *)v40 + v8 + 1) = MACaptionAppearanceCopyFontDescriptorForStyle(kMACaptionAppearanceDomainUser, v9, v8);
      ++v8;
      ++v9;
    }
    while (v8 != 8);
    *((_QWORD *)&v41 + 1) = MACaptionAppearanceGetTextEdgeStyle(kMACaptionAppearanceDomainUser, (MACaptionAppearanceBehavior *)cf);
    v10 = v29;
    *(_OWORD *)(v4 + 88) = v28;
    v11 = v33;
    *(_OWORD *)(v4 + 152) = v32;
    v12 = v30;
    *(_OWORD *)(v4 + 136) = v31;
    *(_OWORD *)(v4 + 120) = v12;
    *(_OWORD *)(v4 + 104) = v10;
    v13 = v34;
    *(_OWORD *)(v4 + 200) = v35;
    *(_OWORD *)(v4 + 184) = v13;
    *((CFTypeRef *)v4 + 27) = cf[0];
    *(_OWORD *)(v4 + 168) = v11;
    v14 = (const void *)*((_QWORD *)v4 + 28);
    v15 = cf[1];
    *((CFTypeRef *)v4 + 28) = cf[1];
    if (v15)
      CFRetain(v15);
    if (v14)
      CFRelease(v14);
    v16 = (const void *)*((_QWORD *)v4 + 29);
    v17 = v37[0];
    *((CFTypeRef *)v4 + 29) = v37[0];
    if (v17)
      CFRetain(v17);
    if (v16)
      CFRelease(v16);
    v18 = (const void *)*((_QWORD *)v4 + 30);
    v19 = v37[1];
    *((CFTypeRef *)v4 + 30) = v37[1];
    if (v19)
      CFRetain(v19);
    if (v18)
      CFRelease(v18);
    v20 = 0;
    v21 = v39;
    *(_OWORD *)(v4 + 248) = v38;
    *(_OWORD *)(v4 + 264) = v21;
    *((_QWORD *)v4 + 35) = *(_QWORD *)&v40[0];
    v22 = v4 + 288;
    do
    {
      v23 = *(const void **)&v22[v20];
      v24 = *(const void **)((char *)v40 + v20 + 8);
      *(_QWORD *)&v22[v20] = v24;
      if (v24)
        CFRetain(v24);
      if (v23)
        CFRelease(v23);
      v20 += 8;
    }
    while (v20 != 64);
    *((_QWORD *)v4 + 44) = *((_QWORD *)&v41 + 1);
    clearMediaAccessibilityParams((uint64_t)&v28);
    v25 = (const void *)*((_QWORD *)v4 + 5);
    if (v25)
    {
      CFRelease(v25);
      *((_QWORD *)v4 + 5) = 0;
    }
    if (*((_QWORD *)v4 + 2))
    {
      v26 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
      if (!v26)
      {
        FigSignalErrorAt();
        if (!v2)
          goto LABEL_37;
        goto LABEL_36;
      }
      v27 = v26;
      if (v2)
        CFRetain(v2);
      *v27 = v2;
      dispatch_async_f(*((dispatch_queue_t *)v4 + 2), v27, (dispatch_function_t)sendNotificationDoAsync);
    }
  }
  if (v2)
LABEL_36:
    CFRelease(v2);
LABEL_37:
  free(a1);
}

uint64_t FigSubtitleRendererDrawSubtitleAttributedStringDirect(uint64_t a1, CGContext *a2, const void *a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  BOOL v14;
  __CFDictionary *SubtitleSampleFromAttributedString;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  CGAffineTransform transform;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  unint64_t v25;
  int v26;
  CFTypeRef v27;
  _OWORD v28[2];

  v27 = 0;
  if (!a1)
    return FigSignalErrorAt();
  memset(v28, 0, sizeof(v28));
  if (!a2 || CGRectEqualToRect(*(CGRect *)&a4, *MEMORY[0x1E0C9D628]) || (a6 > 1.0 ? (v14 = a7 <= 1.0) : (v14 = 1), v14))
  {
    v18 = FigSignalErrorAt();
    SubtitleSampleFromAttributedString = 0;
  }
  else
  {
    SubtitleSampleFromAttributedString = FigSubtitleRendererCreateSubtitleSampleFromAttributedString(a3);
    if (SubtitleSampleFromAttributedString)
    {
      transform.a = a4;
      transform.b = a5;
      transform.c = a6;
      transform.d = a7;
      transform.tx = a6;
      transform.ty = a7;
      v16 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
      v21 = *MEMORY[0x1E0C9BAA8];
      v22 = v16;
      v23 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
      v24 = 0;
      v25 = 0xBFF0000000000000;
      v26 = 1;
      v17 = (uint64_t)subtitleRendererLayout(a1, (uint64_t)SubtitleSampleFromAttributedString, (__int128 *)&transform, (uint64_t)v28, (uint64_t)&v27);
      if (!(_DWORD)v17)
      {
        transform.b = 0.0;
        transform.c = 0.0;
        transform.a = 1.0;
        *(_OWORD *)&transform.d = xmmword_1932FAA90;
        transform.ty = a7;
        CGContextConcatCTM(a2, &transform);
        *(_QWORD *)&transform.a = a2;
        transform.b = 1.0;
        transform.c = 0.0;
        transform.d = 0.0;
        *(_OWORD *)&transform.tx = xmmword_1932FAA90;
        *(CGFloat *)&v21 = a7;
        v17 = (uint64_t)subtitleRendererDrawSubtitleText(a1, (uint64_t)v27, (__int128 *)&transform);
      }
    }
    else
    {
      v17 = FigSignalErrorAt();
    }
    v18 = v17;
  }
  if (v27)
    CFRelease(v27);
  if (SubtitleSampleFromAttributedString)
    CFRelease(SubtitleSampleFromAttributedString);
  return v18;
}

__CFDictionary *FigSubtitleRendererCreateSubtitleSampleFromAttributedString(const void *a1)
{
  const __CFAllocator *v2;
  __CFDictionary *Mutable;
  __CFArray *v4;
  __CFArray *v5;
  CFNumberRef v6;
  CFNumberRef v7;
  int valuePtr;

  if (a1)
  {
    v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable && (v4 = CFArrayCreateMutable(v2, 0, MEMORY[0x1E0C9B378])) != 0)
    {
      v5 = v4;
      CFArrayAppendValue(v4, a1);
      CFDictionarySetValue(Mutable, CFSTR("SubtitleContent"), v5);
      valuePtr = 2004251764;
      v6 = CFNumberCreate(v2, kCFNumberSInt32Type, &valuePtr);
      if (v6)
      {
        v7 = v6;
        CFDictionarySetValue(Mutable, CFSTR("SubtitleFormat"), v6);
        CFRelease(v7);
      }
      else
      {
        FigSignalErrorAt();
      }
      CFRelease(v5);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
  return Mutable;
}

NSObject *subtitleRendererLayout(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  NSObject *result;
  _QWORD v16[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;

  v27 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v16[0] = a1;
  v16[1] = a2;
  v11 = a3[1];
  v17 = *a3;
  v18 = v11;
  v12 = a3[6];
  v13 = a3[4];
  v22 = a3[5];
  v23 = v12;
  v14 = a3[3];
  v19 = a3[2];
  v20 = v14;
  v21 = v13;
  v24 = a4;
  v25 = a5;
  v26 = &v27;
  result = *(NSObject **)(DerivedStorage + 8);
  if (result)
  {
    dispatch_sync_f(result, v16, (dispatch_function_t)subtitleRendererLayoutDo);
    return v27;
  }
  return result;
}

NSObject *subtitleRendererDrawSubtitleText(uint64_t a1, uint64_t a2, __int128 *a3)
{
  NSObject *result;
  __int128 v7;
  _QWORD context[2];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;

  v14 = 0;
  result = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 8);
  if (result)
  {
    context[0] = a1;
    context[1] = a2;
    v7 = a3[1];
    v9 = *a3;
    v10 = v7;
    v11 = a3[2];
    v12 = *((_QWORD *)a3 + 6);
    v13 = &v14;
    dispatch_sync_f(result, context, (dispatch_function_t)subtitleRendererDrawSubtitleTextDo);
    return v14;
  }
  return result;
}

uint64_t FigSubtitleRendererDrawSubtitleTextDirect(uint64_t a1, CGContext *a2, const __CFString *a3, const __CFDictionary *a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  CFDictionaryRef SubtitleSample;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t DerivedStorage;
  const __CFDictionary *v25;
  CGAffineTransform transform;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int v31;
  unint64_t v32;
  int v33;
  CFTypeRef cf;
  CFTypeRef v35[2];
  __int128 v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;

  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 360))
  {
    cf = 0;
    if (a1)
    {
      *(_OWORD *)v35 = 0u;
      v36 = 0u;
      if (!a2
        || (v37.origin.x = a5,
            v37.origin.y = a6,
            v37.size.width = a7,
            v37.size.height = a8,
            CGRectEqualToRect(v37, *MEMORY[0x1E0C9D628]))
        || a7 <= 1.0
        || a8 <= 1.0)
      {
        v19 = FigSignalErrorAt();
        SubtitleSample = 0;
      }
      else
      {
        SubtitleSample = CreateSubtitleSample(a3, a4);
        if (SubtitleSample)
        {
          transform.a = a5;
          transform.b = a6;
          transform.c = a7;
          transform.d = a8;
          transform.tx = a7;
          transform.ty = a8;
          v17 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
          v28 = *MEMORY[0x1E0C9BAA8];
          v29 = v17;
          v30 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
          v31 = 0;
          v32 = 0xBFF0000000000000;
          v33 = 1;
          v18 = (uint64_t)subtitleRendererLayout(a1, (uint64_t)SubtitleSample, (__int128 *)&transform, (uint64_t)v35, (uint64_t)&cf);
          if (!(_DWORD)v18)
          {
            transform.b = 0.0;
            transform.c = 0.0;
            transform.a = 1.0;
            *(_OWORD *)&transform.d = xmmword_1932FAA90;
            transform.ty = a8;
            CGContextConcatCTM(a2, &transform);
            *(_QWORD *)&transform.a = a2;
            transform.b = 1.0;
            transform.c = 0.0;
            transform.d = 0.0;
            *(_OWORD *)&transform.tx = xmmword_1932FAA90;
            *(CGFloat *)&v28 = a8;
            v18 = (uint64_t)subtitleRendererDrawSubtitleText(a1, (uint64_t)cf, (__int128 *)&transform);
          }
        }
        else
        {
          v18 = FigSignalErrorAt();
        }
        v19 = v18;
      }
      if (cf)
        CFRelease(cf);
      if (SubtitleSample)
        CFRelease(SubtitleSample);
      return v19;
    }
    return FigSignalErrorAt();
  }
  if (!a1)
    return FigSignalErrorAt();
  if (!a2)
    return FigSignalErrorAt();
  v20 = *MEMORY[0x1E0C9D628];
  v21 = *(double *)(MEMORY[0x1E0C9D628] + 8);
  v22 = *(double *)(MEMORY[0x1E0C9D628] + 16);
  v23 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  v38.origin.x = a5;
  v38.origin.y = a6;
  v38.size.width = a7;
  v38.size.height = a8;
  v39.origin.x = *(CGFloat *)MEMORY[0x1E0C9D628];
  v39.origin.y = v21;
  v39.size.width = v22;
  v39.size.height = v23;
  if (CGRectEqualToRect(v38, v39))
    return FigSignalErrorAt();
  if (a7 <= 1.0)
    return FigSignalErrorAt();
  if (a8 <= 1.0)
    return FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigCaptionRendererSessionClear(*(NSObject **)(DerivedStorage + 368), v20, v21, v22, v23);
  FigCaptionRendererSessionSetLayoutContext_Viewport(*(_QWORD *)(DerivedStorage + 368), a5, a6, a7, a8);
  FigCaptionRendererSessionSetLayoutContext_VideoSize(*(NSObject **)(DerivedStorage + 368), a7, a8);
  FigCaptionRendererSessionSetLayoutContext_Gravity(*(NSObject **)(DerivedStorage + 368), 0);
  FigCaptionRendererSessionSetLayoutContext_Overscan(*(NSObject **)(DerivedStorage + 368), 0);
  v25 = CreateSubtitleSample(a3, a4);
  if (!v25)
    return FigSignalErrorAt();
  v35[0] = 0;
  FigSubtitleSampleCreatePropertyList(v25, 1, 1, (CFDictionaryRef *)v35, v20, v21, v22, v23);
  FigCaptionRendererSessionSetCaptionSample(*(NSObject **)(DerivedStorage + 368), (uint64_t)v35[0], 0);
  transform.b = 0.0;
  transform.c = 0.0;
  transform.a = 1.0;
  *(_OWORD *)&transform.d = xmmword_1932FAA90;
  transform.ty = a8;
  CGContextConcatCTM(a2, &transform);
  FigCaptionRendererSessionUpdateCGContext(*(_QWORD *)(DerivedStorage + 368), (uint64_t)a2);
  if (v35[0])
    CFRelease(v35[0]);
  return 0;
}

double FigSubtitleRendererGetWindowRoundedCornerRadius(uint64_t a1)
{
  NSObject *v1;
  _QWORD context[2];
  double v4;

  v4 = 0.0;
  context[0] = a1;
  context[1] = &v4;
  v1 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 8);
  if (!v1)
    return 0.0;
  dispatch_sync_f(v1, context, (dispatch_function_t)subtitleRendererGetWindowRoundedCornerRadiusDo);
  return v4;
}

uint64_t subtitleRendererGetWindowRoundedCornerRadiusDo(uint64_t result)
{
  uint64_t v1;
  double v2;

  if (*(_QWORD *)(result + 8))
  {
    v1 = result;
    result = CMBaseObjectGetDerivedStorage();
    v2 = *(double *)(result + 280) * 4.0;
    if (v2 > 10.0)
      v2 = 10.0;
    **(double **)(v1 + 8) = v2;
  }
  return result;
}

double FigSubtitleRendererGetWindowOpacity(uint64_t a1)
{
  NSObject *v1;
  _QWORD context[2];
  double v4;

  v4 = 0.0;
  context[0] = a1;
  context[1] = &v4;
  v1 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 8);
  if (!v1)
    return 0.0;
  dispatch_sync_f(v1, context, (dispatch_function_t)subtitleRendererGetWindowOpacityDo);
  return v4;
}

double subtitleRendererGetWindowOpacityDo(uint64_t a1)
{
  uint64_t DerivedStorage;
  double result;
  double *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(double **)(a1 + 8);
  if (v4)
  {
    result = *(double *)(DerivedStorage + 264);
    *v4 = result;
  }
  return result;
}

const __CFDictionary *FigSubtitleRendererDetachRegionInfo(const __CFDictionary *result, CFDictionaryRef *a2, BOOL *a3)
{
  const __CFDictionary *v5;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  const __CFString *v9;
  const __CFString *v10;
  const __CFAttributedString *ValueAtIndex;
  const __CFAttributedString *v12;
  __CFDictionary *Value;
  CFMutableDictionaryRef Mutable;
  CFTypeRef Attribute;
  const __CFAllocator *allocator;
  CFRange effectiveRange;

  *a2 = 0;
  if (!result
    || (v5 = result, (result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("SubtitleContent"))) == 0))
  {
    Count = 0;
    goto LABEL_18;
  }
  v6 = result;
  Count = CFArrayGetCount(result);
  result = (const __CFDictionary *)CFDictionaryGetValue(v5, CFSTR("SubtitleContentMetadata"));
  if (!result
    || (allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00],
        result = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, result),
        (*a2 = result) == 0))
  {
LABEL_18:
    if (a3)
      goto LABEL_19;
    return result;
  }
  CFDictionaryRemoveValue(v5, CFSTR("SubtitleContentMetadata"));
  if (Count < 1)
  {
LABEL_15:
    result = 0;
    if (a3)
      goto LABEL_19;
    return result;
  }
  v8 = 0;
  effectiveRange.location = 0;
  effectiveRange.length = 0;
  v9 = (const __CFString *)*MEMORY[0x1E0CA2AB0];
  v10 = (const __CFString *)*MEMORY[0x1E0CA2B10];
  while (1)
  {
    ValueAtIndex = (const __CFAttributedString *)CFArrayGetValueAtIndex(v6, v8);
    if (!ValueAtIndex)
      goto LABEL_14;
    v12 = ValueAtIndex;
    if (!CFAttributedStringGetLength(ValueAtIndex) || !CFAttributedStringGetAttribute(v12, 0, v9, &effectiveRange))
      goto LABEL_14;
    Value = (__CFDictionary *)CFDictionaryGetValue(*a2, CFSTR("kFigSubtitleRenderer_RegionCues"));
    if (!Value)
      break;
LABEL_13:
    Attribute = CFAttributedStringGetAttribute(v12, 0, v10, &effectiveRange);
    CFDictionaryAddValue(Value, Attribute, v12);
    CFArrayRemoveValueAtIndex(v6, v8);
    --Count;
    --v8;
LABEL_14:
    if (++v8 >= Count)
      goto LABEL_15;
  }
  Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    Value = Mutable;
    CFDictionaryAddValue(*a2, CFSTR("kFigSubtitleRenderer_RegionCues"), Mutable);
    CFRelease(Value);
    goto LABEL_13;
  }
  result = (const __CFDictionary *)FigSignalErrorAt();
  if (!a3)
    return result;
LABEL_19:
  *a3 = Count > 0;
  return result;
}

uint64_t FigSubtitleRendererPatchRegionInfo(const __CFDictionary *a1, CFDictionaryRef theDict)
{
  const __CFDictionary *v2;
  const void *v4;
  const __CFDictionary *Value;
  void *v6;
  CFMutableDictionaryRef Mutable;
  size_t Count;
  int64_t v9;
  const void **v10;
  const void **v11;
  const __CFAllocator *v12;
  CFTypeRef *v13;
  CFTypeRef *v14;
  CFTypeID v15;
  CFTypeID v16;
  CFMutableDictionaryRef MutableCopy;
  CFMutableDictionaryRef v18;
  uint64_t v19;
  uint64_t v20;
  const __CFDictionary *v21;
  const __CFDictionary *v22;
  void *v23;
  int64_t v24;
  const void **v25;
  const void **v26;
  uint64_t v27;
  const __CFString *v28;
  void *v29;
  CFMutableDictionaryRef v30;
  int64_t v31;
  int64_t v32;
  const void **v33;
  const void **v34;
  CFAttributedStringRef *v35;
  CFTypeRef Attribute;
  __CFDictionary *v37;
  BOOL v38;
  int64_t v39;
  const void **v40;
  const void **v41;
  const __CFString *v42;
  const __CFString *v43;
  CFAttributedStringRef *v44;
  CFTypeRef v45;
  const __CFDictionary *v46;
  __CFDictionary *v47;
  __CFDictionary *v48;
  CFTypeRef v49;
  const __CFDictionary *v51;
  unsigned int v52;
  const void **v53;
  const __CFAllocator *allocator;
  const void **v55;
  CFDictionaryRef theDicta;
  CFRange effectiveRange;

  v2 = theDict;
  v4 = (const void *)*MEMORY[0x1E0CA2C38];
  Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CA2C38]);
  v6 = (void *)CFDictionaryGetValue(a1, v4);
  if (!v6)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
    {
      v20 = FigSignalErrorAt();
      goto LABEL_55;
    }
    v6 = Mutable;
    CFDictionaryAddValue(a1, v4, Mutable);
    CFRelease(v6);
  }
  Count = FigCFDictionaryGetCount();
  if (!Count)
  {
    v20 = 0;
    goto LABEL_18;
  }
  v9 = Count;
  theDicta = v2;
  v10 = (const void **)malloc_type_calloc(Count, 8uLL, 0xC0040B8AA526DuLL);
  v11 = (const void **)malloc_type_calloc(v9, 8uLL, 0xC0040B8AA526DuLL);
  CFDictionaryGetKeysAndValues(Value, v10, v11);
  if (v9 < 1)
  {
LABEL_14:
    v19 = 0;
    v20 = 0;
    if (v10)
      goto LABEL_15;
    goto LABEL_16;
  }
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v13 = v11;
  v14 = v10;
  while (1)
  {
    if (!*v13)
      goto LABEL_13;
    v15 = CFGetTypeID(*v13);
    if (v15 != CFDictionaryGetTypeID())
      goto LABEL_13;
    if (!*v14)
      goto LABEL_13;
    v16 = CFGetTypeID(*v14);
    if (v16 != CFStringGetTypeID())
      goto LABEL_13;
    MutableCopy = CFDictionaryCreateMutableCopy(v12, 0, (CFDictionaryRef)*v13);
    if (!MutableCopy)
      break;
    v18 = MutableCopy;
    CFDictionaryAddValue((CFMutableDictionaryRef)v6, *v14, MutableCopy);
    CFRelease(v18);
LABEL_13:
    ++v14;
    ++v13;
    if (!--v9)
      goto LABEL_14;
  }
  v19 = FigSignalErrorAt();
LABEL_15:
  free(v10);
  v20 = v19;
LABEL_16:
  v2 = theDicta;
  if (v11)
    free(v11);
LABEL_18:
  v21 = (const __CFDictionary *)CFDictionaryGetValue(v2, CFSTR("kFigSubtitleRenderer_RegionCues"));
  v22 = (const __CFDictionary *)CFDictionaryGetValue(a1, v4);
  v23 = (void *)CFDictionaryGetCount(v22);
  if (!v23)
    goto LABEL_59;
  v24 = (int64_t)v23;
  v52 = v20;
  v25 = (const void **)malloc_type_calloc((size_t)v23, 8uLL, 0xC0040B8AA526DuLL);
  v26 = (const void **)malloc_type_calloc(v24, 8uLL, 0xC0040B8AA526DuLL);
  v51 = v22;
  v53 = v25;
  CFDictionaryGetKeysAndValues(v22, v25, v26);
  if (v24 >= 1)
  {
    v27 = 0;
    allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v28 = (const __CFString *)*MEMORY[0x1E0CA2B10];
    v55 = v26;
    do
    {
      effectiveRange.location = 0;
      effectiveRange.length = 0;
      v29 = (void *)CFDictionaryGetValue((CFDictionaryRef)v26[v27], CFSTR("kFigSubtitleRenderer_RegionCues"));
      if (!v29)
      {
        v30 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (!v30)
        {
          v20 = FigSignalErrorAt();
          v23 = v53;
          goto LABEL_56;
        }
        v29 = v30;
        CFDictionaryAddValue((CFMutableDictionaryRef)v26[v27], CFSTR("kFigSubtitleRenderer_RegionCues"), v30);
        CFRelease(v29);
      }
      v31 = v24;
      v32 = CFDictionaryGetCount((CFDictionaryRef)v29);
      v33 = (const void **)malloc_type_calloc(v32, 8uLL, 0xC0040B8AA526DuLL);
      v34 = (const void **)malloc_type_calloc(v32, 8uLL, 0xC0040B8AA526DuLL);
      CFDictionaryGetKeysAndValues((CFDictionaryRef)v29, v33, v34);
      if (v32 >= 1)
      {
        v35 = (CFAttributedStringRef *)v34;
        do
        {
          Attribute = CFAttributedStringGetAttribute(*v35, 0, v28, &effectiveRange);
          if (v21 && CFDictionaryGetValue(v21, Attribute))
            v37 = v21;
          else
            v37 = (__CFDictionary *)v29;
          CFDictionaryRemoveValue(v37, Attribute);
          ++v35;
          --v32;
        }
        while (v32);
      }
      if (v33)
        free(v33);
      if (v34)
        free(v34);
      ++v27;
      v24 = v31;
      v38 = v27 == v31;
      v26 = v55;
    }
    while (!v38);
  }
  if (v53)
    free(v53);
  v20 = v52;
  if (v26)
    free(v26);
  if (v21)
  {
    effectiveRange.location = 0;
    effectiveRange.length = 0;
    v23 = (void *)CFDictionaryGetCount(v21);
    if (v23)
    {
      v39 = (int64_t)v23;
      v40 = (const void **)malloc_type_calloc((size_t)v23, 8uLL, 0xC0040B8AA526DuLL);
      v41 = (const void **)malloc_type_calloc(v39, 8uLL, 0xC0040B8AA526DuLL);
      CFDictionaryGetKeysAndValues(v21, v40, v41);
      if (v39 >= 1)
      {
        v42 = (const __CFString *)*MEMORY[0x1E0CA2AB0];
        v43 = (const __CFString *)*MEMORY[0x1E0CA2B10];
        v44 = (CFAttributedStringRef *)v41;
        do
        {
          v45 = CFAttributedStringGetAttribute(*v44, 0, v42, &effectiveRange);
          if (v45)
          {
            v46 = (const __CFDictionary *)CFDictionaryGetValue(v51, v45);
            if (v46)
            {
              v47 = (__CFDictionary *)CFDictionaryGetValue(v46, CFSTR("kFigSubtitleRenderer_RegionCues"));
              if (v47)
              {
                v48 = v47;
                v49 = CFAttributedStringGetAttribute(*v44, 0, v43, &effectiveRange);
                if (v49)
                  CFDictionaryAddValue(v48, v49, *v44);
              }
            }
          }
          ++v44;
          --v39;
        }
        while (v39);
      }
      if (v40)
        free(v40);
      if (v41)
        free(v41);
      goto LABEL_55;
    }
LABEL_59:
    v26 = 0;
    goto LABEL_56;
  }
LABEL_55:
  v26 = 0;
  v23 = 0;
LABEL_56:
  free(v23);
  free(v26);
  return v20;
}

const void *FigSubtitleRendererGetAttributedStringFromSubtitleSample(const __CFDictionary *a1)
{
  const __CFArray *Value;

  if (a1)
  {
    Value = (const __CFArray *)CFDictionaryGetValue(a1, CFSTR("SubtitleContent"));
    if (Value)
      return CFArrayGetValueAtIndex(Value, 0);
  }
  FigSignalErrorAt();
  return 0;
}

double FigSubtitleRendererGetRegionDefaultFontSize(double a1, double a2, double a3, double a4)
{
  return a4 * 0.0533 / 1.3;
}

double FigSubtitleRendererGetRegionBounds(const __CFDictionary *a1, double a2, double a3, double a4)
{
  double v7;
  double v8;
  const __CFNumber *Value;
  double v10;
  int valuePtr;
  double v13;

  v7 = *MEMORY[0x1E0C9D648];
  v13 = 0.0;
  valuePtr = 0;
  if (FigCFDictionaryGetCGFloatIfPresent())
  {
    v8 = a4 * v13 / 100.0;
    Value = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0CA2CA8]);
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
      if (CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0CA2CC0]))
      {
        if (FigCFDictionaryGetCGFloatIfPresent()
          && FigCFDictionaryGetCGFloatIfPresent()
          && CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0CA2CB0])
          && FigCFDictionaryGetCGFloatIfPresent()
          && FigCFDictionaryGetCGFloatIfPresent())
        {
          v10 = a2 + a4 * 0.0 / 100.0 - v8 * 0.0 / 100.0;
          if (v10 < a2)
            v10 = a2;
          if (v8 + v10 <= a2 + a4)
            return v10;
          else
            return a2 + a4 - v8;
        }
      }
    }
  }
  return v7;
}

void coreTextSubtitleRenderer_Finalize()
{
  _BYTE *DerivedStorage;
  _BYTE *v1;
  NSObject *v2;
  NSObject *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    v1 = DerivedStorage;
    CMNotificationCenterGetDefaultLocalCenter();
    FigGetNotifyingObjectForMediaAccessibilityChanged();
    FigNotificationCenterRemoveWeakListener();
    *v1 = 0;
    v2 = *((_QWORD *)v1 + 1);
    if (v2)
    {
      dispatch_release(v2);
      *((_QWORD *)v1 + 1) = 0;
    }
    v3 = *((_QWORD *)v1 + 2);
    if (v3)
    {
      dispatch_release(v3);
      *((_QWORD *)v1 + 2) = 0;
    }
    if (!v1[360])
    {
      v4 = (const void *)*((_QWORD *)v1 + 46);
      if (v4)
        CFRelease(v4);
    }
    clearMediaAccessibilityParams((uint64_t)(v1 + 88));
    v5 = (const void *)*((_QWORD *)v1 + 6);
    if (v5)
      CFRelease(v5);
    v6 = (const void *)*((_QWORD *)v1 + 9);
    if (v6)
      CFRelease(v6);
    v7 = (const void *)*((_QWORD *)v1 + 5);
    if (v7)
      CFRelease(v7);
    v8 = (const void *)*((_QWORD *)v1 + 7);
    if (v8)
      CFRelease(v8);
  }
}

__CFString *coreTextSubtitleRenderer_copyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigCoreTextSubtitleRenderer %p>"), a1);
  return Mutable;
}

void sendNotificationDoAsync(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  if (v2)
    CFRelease(v2);
  free(a1);
}

CFDictionaryRef CreateSubtitleSample(CFStringRef str, CFDictionaryRef attributes)
{
  const __CFAllocator *v3;
  CFArrayRef v4;
  CFArrayRef v5;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFDictionaryRef Copy;
  int valuePtr;
  void *values;

  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  values = CFAttributedStringCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], str, attributes);
  if (!values)
  {
    FigSignalErrorAt();
    return 0;
  }
  v4 = CFArrayCreate(v3, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
  if (v4)
  {
    v5 = v4;
    Mutable = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v7 = Mutable;
      if (attributes && CFDictionaryContainsKey(attributes, CFSTR("SubtitleFormat")))
      {
        v8 = 0;
      }
      else
      {
        valuePtr = 2004251764;
        v9 = CFNumberCreate(v3, kCFNumberSInt32Type, &valuePtr);
        if (!v9)
        {
          FigSignalErrorAt();
          Copy = 0;
          goto LABEL_12;
        }
        v8 = v9;
        CFDictionarySetValue(v7, CFSTR("SubtitleFormat"), v9);
      }
      CFDictionarySetValue(v7, CFSTR("SubtitleContent"), v5);
      Copy = CFDictionaryCreateCopy(v3, v7);
      if (Copy)
      {
        if (!v8)
        {
LABEL_12:
          CFRelease(v5);
          CFRelease(v7);
          goto LABEL_13;
        }
      }
      else
      {
        FigSignalErrorAt();
        if (!v8)
          goto LABEL_12;
      }
      CFRelease(v8);
      goto LABEL_12;
    }
    FigSignalErrorAt();
    CFRelease(v5);
  }
  else
  {
    FigSignalErrorAt();
  }
  Copy = 0;
LABEL_13:
  if (values)
    CFRelease(values);
  return Copy;
}

uint64_t subtitleRendererDrawSubtitleTextDo(uint64_t a1)
{
  uint64_t v1;
  const __CFDictionary *v2;
  uint64_t v3;
  CGContext *v4;
  __int128 v5;
  const __CFArray *Value;
  const __CFArray *v7;
  CFIndex v8;
  CGFloat v9;
  CGFloat v10;
  const __CFAttributedString *ValueAtIndex;
  const __CFDictionary *Attribute;
  double width;
  double height;
  const __CFDictionary *v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  uint64_t DerivedStorage;
  const __CFNumber *v21;
  CGColor *v22;
  uint64_t v23;
  double v24;
  CGFloat MinX;
  CGFloat MinY;
  float v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  float v31;
  CGFloat v32;
  CFTypeRef v33;
  const __CFAttributedString *v34;
  double v35;
  double v36;
  const __CFAttributedString *v37;
  const __CFAttributedString *v38;
  const __CFAttributedString *MutableCopy;
  double v40;
  int v41;
  int v42;
  double v43;
  CFIndex Length;
  CFIndex v45;
  const __CTFramesetter *v46;
  const __CTFramesetter *v47;
  double v48;
  CFNumberRef v49;
  unint64_t v50;
  const __CFAttributedString *v51;
  const __CFAttributedString *v52;
  const __CFAttributedString *v53;
  uint64_t result;
  uint64_t v55;
  void *key;
  double v57;
  double v58;
  const __CFArray *v59;
  CFTypeRef v60;
  double v61;
  void *v62;
  const __CFDictionary *theDict;
  const __CFAllocator *alloc;
  CGFloat v65;
  CGFloat v66;
  CGSize v67;
  CGPoint v68;
  CGFloat y;
  CGFloat x;
  CGAffineTransform v71;
  CGRect rect;
  CFRange effectiveRange;
  CGAffineTransform v74;
  double valuePtr;
  double v76[2];
  CFRange v77;
  CFRange v78;
  CGSize v79;
  CGRect v80;
  CGRect v81;
  CGRect v82;
  CGRect v83;
  CGRect v84;
  CGRect v85;
  CGRect v86;
  CGRect v87;
  CGRect v88;

  v1 = a1;
  v3 = *(_QWORD *)a1;
  v2 = *(const __CFDictionary **)(a1 + 8);
  v4 = *(CGContext **)(a1 + 16);
  v5 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)&v74.a = *(_OWORD *)(a1 + 24);
  *(_OWORD *)&v74.c = v5;
  *(_OWORD *)&v74.tx = *(_OWORD *)(a1 + 56);
  if (!*(_BYTE *)CMBaseObjectGetDerivedStorage())
    goto LABEL_64;
  if (!v2 || (Value = (const __CFArray *)CFDictionaryGetValue(v2, CFSTR("SubtitleContent"))) == 0)
  {
    result = FigSignalErrorAt();
    goto LABEL_65;
  }
  v7 = Value;
  if (CFArrayGetCount(Value) < 1)
  {
LABEL_64:
    result = 0;
    goto LABEL_65;
  }
  v55 = v1;
  v8 = 0;
  v10 = *MEMORY[0x1E0C9D628];
  v9 = *(double *)(MEMORY[0x1E0C9D628] + 8);
  v65 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  v66 = *(double *)(MEMORY[0x1E0C9D628] + 16);
  v62 = (void *)*MEMORY[0x1E0CA2968];
  v60 = (CFTypeRef)*MEMORY[0x1E0C9AE40];
  alloc = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v57 = *(double *)(MEMORY[0x1E0C9D820] + 8);
  v67 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
  v68 = (CGPoint)*MEMORY[0x1E0C9D628];
  key = (void *)*MEMORY[0x1E0CA29C0];
  v59 = v7;
  v58 = *MEMORY[0x1E0C9D628];
  v61 = v9;
  do
  {
    effectiveRange.location = 0;
    effectiveRange.length = 0;
    rect.origin = v68;
    rect.size = v67;
    ValueAtIndex = (const __CFAttributedString *)CFArrayGetValueAtIndex(v7, v8);
    Attribute = (const __CFDictionary *)CFAttributedStringGetAttribute(ValueAtIndex, 0, CFSTR("kFigSubtitleRenderer_SuggestTextLayout"), &effectiveRange);
    if (Attribute)
      CGRectMakeWithDictionaryRepresentation(Attribute, &rect);
    v71 = v74;
    v80 = CGRectApplyAffineTransform(rect, &v71);
    y = v80.origin.y;
    x = v80.origin.x;
    width = v80.size.width;
    height = v80.size.height;
    v15 = (const __CFDictionary *)CFAttributedStringGetAttribute(ValueAtIndex, 0, CFSTR("kFigSubtitleRenderer_SuggestLayout"), &effectiveRange);
    if (v15)
      CGRectMakeWithDictionaryRepresentation(v15, &rect);
    v71 = v74;
    v81 = CGRectApplyAffineTransform(rect, &v71);
    v16 = v81.origin.x;
    v17 = v81.origin.y;
    v18 = v81.size.width;
    v19 = v81.size.height;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v71.a = 0.0;
    v71.b = 0.0;
    valuePtr = 0.0;
    v21 = (const __CFNumber *)CFAttributedStringGetAttribute(ValueAtIndex, 0, CFSTR("kFigSubtitleRenderer_FontSizeToUse"), (CFRange *)&v71);
    if (!v21)
      goto LABEL_12;
    CFNumberGetValue(v21, kCFNumberCGFloatType, &valuePtr);
    v82.origin.y = y;
    v82.origin.x = x;
    v82.size.width = width;
    v82.size.height = height;
    v88.origin.x = v10;
    v88.origin.y = v9;
    v88.size.height = v65;
    v88.size.width = v66;
    if (CGRectEqualToRect(v82, v88))
    {
LABEL_12:
      v22 = 0;
      goto LABEL_60;
    }
    theDict = CFAttributedStringGetAttributes(ValueAtIndex, 0, (CFRange *)&v71);
    v22 = copyContentColor_0(*(_QWORD *)(DerivedStorage + 104), *(CGColorRef *)(DerivedStorage + 240), *(_QWORD *)(DerivedStorage + 128), theDict, v62, *(CGFloat *)(DerivedStorage + 264));
    v23 = CMBaseObjectGetDerivedStorage();
    if (*(double *)(v23 + 280) * 4.0 <= 10.0)
      v24 = *(double *)(v23 + 280) * 4.0;
    else
      v24 = 10.0;
    CGContextSaveGState(v4);
    CGContextSetFontRenderingStyle();
    CGContextSetShouldSmoothFonts(v4, 0);
    CGContextSetShouldAntialias(v4, 1);
    CGContextSetInterpolationQuality(v4, kCGInterpolationHigh);
    if (v22)
    {
      CGContextSetFillColorWithColor(v4, v22);
      CGContextBeginPath(v4);
      if (v24 <= 1.0)
      {
        v87.origin.x = v16;
        v87.origin.y = v17;
        v87.size.width = v18;
        v87.size.height = v19;
        CGContextAddRect(v4, v87);
      }
      else
      {
        CGContextSaveGState(v4);
        v83.origin.x = v16;
        v83.origin.y = v17;
        v83.size.width = v18;
        v83.size.height = v19;
        MinX = CGRectGetMinX(v83);
        v84.origin.x = v16;
        v84.origin.y = v17;
        v84.size.width = v18;
        v84.size.height = v19;
        MinY = CGRectGetMinY(v84);
        CGContextTranslateCTM(v4, MinX, MinY);
        CGContextScaleCTM(v4, v24, v24);
        v85.origin.x = v16;
        v85.origin.y = v17;
        v85.size.width = v18;
        v85.size.height = v19;
        *(float *)&MinX = CGRectGetWidth(v85) / v24;
        v86.origin.x = v16;
        v86.origin.y = v17;
        v86.size.width = v18;
        v86.size.height = v19;
        v27 = CGRectGetHeight(v86) / v24;
        v28 = *(float *)&MinX;
        v29 = (float)(v27 * 0.5);
        CGContextMoveToPoint(v4, *(float *)&MinX, v29);
        v30 = v27;
        v31 = *(float *)&MinX * 0.5;
        v10 = v58;
        v32 = v31;
        CGContextAddArcToPoint(v4, v28, v30, v31, v30, 1.0);
        CGContextAddArcToPoint(v4, 0.0, v30, 0.0, v29, 1.0);
        CGContextAddArcToPoint(v4, 0.0, 0.0, v32, 0.0, 1.0);
        CGContextAddArcToPoint(v4, v28, 0.0, v28, v29, 1.0);
        CGContextClosePath(v4);
        CGContextRestoreGState(v4);
      }
      CGContextFillPath(v4);
    }
    v33 = CFAttributedStringGetAttribute(ValueAtIndex, 0, CFSTR("kFigSubtitleRenderer_CommonSetupDone"), (CFRange *)&v71);
    if (v33 && v60 != v33)
    {
      v34 = 0;
      v9 = v61;
      v36 = y;
      v35 = x;
      goto LABEL_24;
    }
    MutableCopy = CFAttributedStringCreateMutableCopy(alloc, 0, ValueAtIndex);
    v9 = v61;
    if (MutableCopy)
    {
      v34 = MutableCopy;
      v40 = height / 3.0;
      v41 = subtitleRendererSetupText(v3, MutableCopy, 0, height / 3.0);
      v42 = 0;
      v43 = v57;
      while (1)
      {
        Length = CFAttributedStringGetLength(v34);
        if (Length >= 1)
        {
          v45 = Length;
          v46 = CTFramesetterCreateWithAttributedString(v34);
          if (!v46)
          {
            v7 = v59;
            goto LABEL_57;
          }
          v47 = v46;
          v77.location = 0;
          v77.length = v45;
          v79.width = width;
          v79.height = 1.79769313e308;
          v43 = ceil(CTFramesetterSuggestFrameSizeWithConstraints(v46, v77, 0, v79, 0).height);
          CFRelease(v47);
        }
        v48 = 1.0;
        if (v43 <= 1.0)
          break;
        if (v43 <= height)
        {
          if (v42 == -1)
            break;
          v42 = 1;
        }
        else
        {
          v42 = -1;
          v48 = -1.0;
        }
        v40 = v40 + v48;
        v41 = subtitleRendererSetupText(v3, v34, 3, v40);
      }
      v76[0] = v40;
      v49 = CFNumberCreate(alloc, kCFNumberCGFloatType, v76);
      v78.length = CFAttributedStringGetLength(v34);
      v78.location = 0;
      CFAttributedStringSetAttribute(v34, v78, CFSTR("kFigSubtitleRenderer_FontSizeToUse"), v49);
      CFRelease(v49);
      ValueAtIndex = v34;
      v7 = v59;
      v36 = y;
      v35 = x;
      if (v41)
        goto LABEL_57;
LABEL_24:
      if (*(_DWORD *)(DerivedStorage + 28))
      {
        v37 = CFAttributedStringCreateMutableCopy(alloc, 0, ValueAtIndex);
        if (!v37)
          goto LABEL_57;
        v38 = v37;
        if (subtitleRendererDrawText(valuePtr, v35, v36, width, height, v3, v37, v4, 2u))
        {
LABEL_55:
          CFRelease(v38);
LABEL_57:
          if (v34)
            CFRelease(v34);
          goto LABEL_59;
        }
      }
      else
      {
        v38 = 0;
      }
      v50 = getEdgeStyle(*(_QWORD *)(DerivedStorage + 216), *(_QWORD *)(DerivedStorage + 352), theDict, key) - 1;
      v51 = CFAttributedStringCreateMutableCopy(alloc, 0, ValueAtIndex);
      v52 = v51;
      if (v50 >= 3)
      {
        if (!v51)
          goto LABEL_54;
        setupHighlight_0(v3, v51);
        if (subtitleRendererSetupText(v3, v52, 2, valuePtr)
          || subtitleRendererDrawText(valuePtr, v35, v36, width, height, v3, v52, v4, 1u))
        {
          v53 = v52;
          goto LABEL_53;
        }
        v53 = v52;
        v52 = CFAttributedStringCreateMutableCopy(alloc, 0, ValueAtIndex);
        if (!v52)
          goto LABEL_53;
      }
      else
      {
        if (!v51)
          goto LABEL_54;
        setupHighlight_0(v3, v51);
        v53 = 0;
      }
      if (!subtitleRendererSetupText(v3, v52, 1, valuePtr))
        subtitleRendererDrawText(valuePtr, v35, v36, width, height, v3, v52, v4, 0);
      CFRelease(v52);
      if (!v53)
      {
LABEL_54:
        v7 = v59;
        if (!v38)
          goto LABEL_57;
        goto LABEL_55;
      }
LABEL_53:
      CFRelease(v53);
      goto LABEL_54;
    }
LABEL_59:
    CGContextRestoreGState(v4);
LABEL_60:
    CGColorRelease(v22);
    ++v8;
  }
  while (CFArrayGetCount(v7) > v8);
  result = 0;
  v1 = v55;
LABEL_65:
  **(_DWORD **)(v1 + 72) = result;
  return result;
}

CGColor *copyContentColor_0(uint64_t a1, CGColorRef color, uint64_t a3, const __CFDictionary *a4, void *key, CGFloat a6)
{
  CGColor *CGColorFromCFArray;
  BOOL v10;
  CGColorRef CopyWithAlpha;
  CGColorRef v13;

  if (a1 || !color)
  {
    v10 = 1;
    if (a4)
    {
      if (key)
      {
        CGColorFromCFArray = createCGColorFromCFArray(a4, key, 0);
        v10 = CGColorFromCFArray == 0;
        if (CGColorFromCFArray)
          goto LABEL_9;
      }
    }
  }
  else
  {
    CGColorFromCFArray = CGColorCreateCopy(color);
    v10 = 1;
    if (CGColorFromCFArray)
      goto LABEL_9;
  }
  CGColorFromCFArray = CGColorCreateCopy(color);
  if (!CGColorFromCFArray)
    return CGColorFromCFArray;
LABEL_9:
  if (!a3)
  {
    if (a6 < 0.0)
      return CGColorFromCFArray;
    goto LABEL_16;
  }
  if (a6 >= 0.0 && v10)
  {
LABEL_16:
    CopyWithAlpha = CGColorCreateCopyWithAlpha(CGColorFromCFArray, a6);
    if (CopyWithAlpha)
    {
      v13 = CopyWithAlpha;
      CGColorRelease(CGColorFromCFArray);
      return v13;
    }
  }
  return CGColorFromCFArray;
}

uint64_t subtitleRendererDrawText(double a1, double a2, double a3, double a4, double a5, uint64_t a6, const __CFAttributedString *a7, CGContext *a8, unsigned int a9)
{
  uint64_t DerivedStorage;
  uint64_t v18;
  double v19;
  double v20;
  const __CFDictionary *Attributes;
  CGColorSpace *v22;
  CGColorSpace *v23;
  CGColor *v24;
  CGColor *CopyWithAlpha;
  CGMutablePathRef Mutable;
  CGPath *v27;
  CTFramesetterRef v28;
  const __CTFramesetter *v29;
  const __CFString *Attribute;
  const __CFDictionary *FrameAttributesDictionary;
  const __CFNumber *v32;
  const __CTFrame *v33;
  const __CFArray *Lines;
  const __CTLine *ValueAtIndex;
  float64x2_t v36;
  uint64_t v37;
  CFIndex v38;
  void *v39;
  const __CTLine *v40;
  double b;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  const __CFArray *GlyphRuns;
  CFIndex v47;
  double v48;
  const __CTRun *v49;
  const __CFDictionary *v50;
  CGPoint TextPosition;
  CGFloat tx;
  CGFloat ty;
  double TypographicBounds;
  double v55;
  double v56;
  CGColorSpace *v57;
  CGColor *CGColorFromCFArray;
  CGColor *v59;
  const CGFloat *Components;
  CGColor *v61;
  char v62;
  const CGFloat *v63;
  CGFloat *v64;
  const __CTFramesetter *v66;
  CGPath *v67;
  const __CFString *theString2;
  const __CFArray *v69;
  const __CFString *v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  double v74;
  double v75;
  CFIndex Count;
  const __CTFrame *frame;
  CGFloat v78;
  CGFloat v79;
  CGFloat v80;
  double v81;
  const __CFString *name;
  double v83;
  CGFloat v84;
  CGFloat descent;
  CGFloat ascent;
  __int128 v87;
  __int128 v88;
  CGPoint origins;
  CGFloat leading;
  CFRange v91;
  CGAffineTransform v92;
  CGAffineTransform effectiveRange;
  uint64_t v94;
  CFRange v95;
  CFRange v96;
  CFRange v97;
  CFRange v98;
  CFRange v99;
  CFRange v100;
  CGSize v101;
  CGSize v102;
  CGRect v103;
  CGRect BoundsWithOptions;
  CGRect v105;
  CGRect v106;
  CGRect v107;
  CGRect v108;

  v94 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a9 == 1)
  {
    CGContextSetLineJoin(a8, kCGLineJoinBevel);
    v18 = CMBaseObjectGetDerivedStorage();
    v19 = 0.0;
    v20 = 0.0;
  }
  else
  {
    v18 = CMBaseObjectGetDerivedStorage();
    if (a1 <= 60.0)
      v20 = a1 * 0.0882352941;
    else
      v20 = a1 * 0.0882352941 / 1.5;
    if (*(_DWORD *)(v18 + 32) != 1)
      v20 = -v20;
    v19 = 0.0;
  }
  effectiveRange.a = 0.0;
  effectiveRange.b = 0.0;
  Attributes = CFAttributedStringGetAttributes(a7, 0, (CFRange *)&effectiveRange);
  switch(getEdgeStyle(*(_QWORD *)(v18 + 216), *(_QWORD *)(v18 + 352), Attributes, (void *)*MEMORY[0x1E0CA29C0]))
  {
    case 1:
    case 4:
      goto LABEL_21;
    case 2:
      if (a1 <= 60.0)
      {
        v19 = a1 * -0.0882352941;
        v20 = a1 * 0.0882352941;
      }
      else
      {
        v19 = a1 * 0.0882352941 / -1.5;
        v20 = a1 * 0.0882352941 / 1.5;
      }
      goto LABEL_17;
    case 3:
      if (a1 <= 60.0)
        v19 = a1 * 0.0882352941;
      else
        v19 = a1 * 0.0882352941 / 1.5;
      v20 = -v19;
      goto LABEL_17;
    default:
LABEL_17:
      *(_OWORD *)&effectiveRange.a = xmmword_1932FE9E8;
      *(_OWORD *)&effectiveRange.c = *(_OWORD *)algn_1932FE9F8;
      v22 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
      if (v22)
      {
        v23 = v22;
        v24 = CGColorCreate(v22, &effectiveRange.a);
        CopyWithAlpha = CGColorCreateCopyWithAlpha(v24, *(CGFloat *)(v18 + 248));
        CGColorRelease(v24);
        CGColorSpaceRelease(v23);
      }
      else
      {
        CopyWithAlpha = 0;
      }
      v101.width = v19;
      v101.height = v20;
      CGContextSetShadowWithColor(a8, v101, 4.0, CopyWithAlpha);
      CGColorRelease(CopyWithAlpha);
LABEL_21:
      Mutable = CGPathCreateMutable();
      if (!Mutable)
        return 4294955204;
      v27 = Mutable;
      v28 = CTFramesetterCreateWithAttributedString(a7);
      if (!v28)
      {
        v37 = 4294955204;
        goto LABEL_81;
      }
      v29 = v28;
      v91.location = 0;
      v91.length = 0;
      Attribute = (const __CFString *)CFAttributedStringGetAttribute(a7, 0, (CFStringRef)*MEMORY[0x1E0CA2B40], &v91);
      FrameAttributesDictionary = createFrameAttributesDictionary(Attribute);
      effectiveRange.a = 0.0;
      v32 = (const __CFNumber *)CFAttributedStringGetAttribute(a7, 0, CFSTR("kFigSubtitleRenderer_CompensationInTextLayout"), &v91);
      if (v32)
        CFNumberGetValue(v32, kCFNumberCGFloatType, &effectiveRange);
      v103.origin.x = a2 + effectiveRange.a;
      v103.origin.y = a3 + effectiveRange.a;
      v103.size.width = a4 - effectiveRange.a * 2.0;
      v103.size.height = a5 - effectiveRange.a * 2.0;
      v74 = a3 + effectiveRange.a;
      v75 = a2 + effectiveRange.a;
      CGPathAddRect(v27, 0, v103);
      v95.length = CFAttributedStringGetLength(a7);
      v95.location = 0;
      v33 = CTFramesetterCreateFrame(v29, v95, v27, FrameAttributesDictionary);
      if (FrameAttributesDictionary)
        CFRelease(FrameAttributesDictionary);
      if (!v33)
      {
        v37 = 4294955204;
        goto LABEL_80;
      }
      if (!*(_DWORD *)(DerivedStorage + 28))
      {
        CTFrameDraw(v33, a8);
        goto LABEL_79;
      }
      Lines = CTFrameGetLines(v33);
      leading = 0.0;
      Count = CFArrayGetCount(Lines);
      if (Count >= 1)
      {
        ValueAtIndex = (const __CTLine *)CFArrayGetValueAtIndex(Lines, Count - 1);
        CTLineGetTypographicBounds(ValueAtIndex, 0, 0, &leading);
      }
      frame = v33;
      v66 = v29;
      v67 = v27;
      if (Attribute)
      {
        CGContextSaveGState(a8);
        *(_OWORD *)&effectiveRange.a = xmmword_1932FE9C0;
        effectiveRange.c = 1.0;
        memset(&effectiveRange.d, 0, 24);
        CGContextConcatCTM(a8, &effectiveRange);
        *(_OWORD *)&v92.a = xmmword_1932FE9C0;
        v92.c = 1.0;
        memset(&v92.d, 0, 24);
        CGAffineTransformInvert(&effectiveRange, &v92);
        v72 = *(float64x2_t *)&effectiveRange.c;
        v73 = *(float64x2_t *)&effectiveRange.a;
        v36 = *(float64x2_t *)&effectiveRange.tx;
      }
      else
      {
        v72 = *(float64x2_t *)(MEMORY[0x1E0C9BAA8] + 16);
        v73 = *(float64x2_t *)MEMORY[0x1E0C9BAA8];
        v36 = *(float64x2_t *)(MEMORY[0x1E0C9BAA8] + 32);
      }
      v71 = v36;
      if (Count < 1)
        goto LABEL_76;
      v38 = 0;
      theString2 = (const __CFString *)*MEMORY[0x1E0CA2DD8];
      name = (const __CFString *)*MEMORY[0x1E0C9DA10];
      v39 = (void *)*MEMORY[0x1E0CA29B8];
      v78 = *(double *)(MEMORY[0x1E0C9D820] + 8);
      v79 = *MEMORY[0x1E0C9D820];
      v69 = Lines;
      v70 = Attribute;
      break;
  }
  do
  {
    v40 = (const __CTLine *)CFArrayGetValueAtIndex(Lines, v38);
    origins.x = 0.0;
    origins.y = 0.0;
    v96.location = v38;
    v96.length = 1;
    CTFrameGetLineOrigins(frame, v96, &origins);
    origins.x = v75 + origins.x;
    if (Attribute && CFStringCompare(Attribute, theString2, 0) == kCFCompareEqualTo)
    {
      effectiveRange.a = 0.0;
      effectiveRange.b = 0.0;
      v97.location = Count + ~v38;
      v97.length = 1;
      CTFrameGetLineOrigins(frame, v97, (CGPoint *)&effectiveRange);
      b = effectiveRange.b;
    }
    else
    {
      b = origins.y;
    }
    origins = (CGPoint)vaddq_f64(v71, vmlaq_n_f64(vmulq_n_f64(v72, v74 + b + leading * -0.5), v73, origins.x));
    CGContextSetTextPosition(a8, origins.x, origins.y);
    if (v38)
    {
      BoundsWithOptions = CTLineGetBoundsWithOptions(v40, 0x10uLL);
    }
    else
    {
      v105 = CTLineGetBoundsWithOptions(v40, 0);
      x = v105.origin.x;
      y = v105.origin.y;
      width = v105.size.width;
      height = v105.size.height;
      v108 = CTLineGetBoundsWithOptions(v40, 8uLL);
      v106.origin.x = x;
      v106.origin.y = y;
      v106.size.width = width;
      v106.size.height = height;
      BoundsWithOptions = CGRectUnion(v106, v108);
    }
    v80 = BoundsWithOptions.size.height;
    v81 = BoundsWithOptions.origin.y;
    GlyphRuns = CTLineGetGlyphRuns(v40);
    memset(&effectiveRange, 0, sizeof(effectiveRange));
    CGContextGetTextMatrix(&effectiveRange, a8);
    if (CFArrayGetCount(GlyphRuns) >= 1)
    {
      v47 = 0;
      v48 = 0.0;
      while (1)
      {
        descent = 0.0;
        ascent = 0.0;
        v84 = 0.0;
        v49 = (const __CTRun *)CFArrayGetValueAtIndex(GlyphRuns, v47);
        v50 = CTRunGetAttributes(v49);
        TextPosition = CGContextGetTextPosition(a8);
        CTRunGetTextMatrix(&v92, v49);
        v87 = *(_OWORD *)&v92.a;
        v88 = *(_OWORD *)&v92.c;
        tx = v92.tx;
        ty = v92.ty;
        v98.location = 0;
        v98.length = 0;
        TypographicBounds = CTRunGetTypographicBounds(v49, v98, &ascent, &descent, &v84);
        v55 = origins.y;
        v83 = origins.x;
        v56 = descent;
        *(_OWORD *)&v92.a = v87;
        *(_OWORD *)&v92.c = v88;
        v92.tx = tx;
        v92.ty = ty;
        CGAffineTransformIsIdentity(&v92);
        if (a9 != 2)
        {
          if (a9 <= 1)
          {
            CGContextSaveGState(a8);
            *(_OWORD *)&v92.a = v87;
            *(_OWORD *)&v92.c = v88;
            v92.tx = tx;
            v92.ty = ty;
            if (CGAffineTransformIsIdentity(&v92))
            {
              CGContextSetTextPosition(a8, TextPosition.x, v55 - v56 + descent);
              v99.location = 0;
              v99.length = 0;
              CTRunDraw(v49, a8, v99);
            }
            else
            {
              *(_OWORD *)&v92.a = v87;
              *(_OWORD *)&v92.c = v88;
              *(CGPoint *)&v92.tx = TextPosition;
              CGContextSetTextMatrix(a8, &v92);
              v100.location = 0;
              v100.length = 0;
              CTRunDraw(v49, a8, v100);
              v92 = effectiveRange;
              CGContextSetTextMatrix(a8, &v92);
            }
            CGContextRestoreGState(a8);
          }
          goto LABEL_72;
        }
        if (v50)
          break;
        v61 = 0;
LABEL_71:
        CGColorRelease(v61);
LABEL_72:
        v48 = v48 + TypographicBounds;
        CGContextSetTextPosition(a8, TextPosition.x, TextPosition.y);
        if (++v47 >= CFArrayGetCount(GlyphRuns))
          goto LABEL_75;
      }
      v57 = CGColorSpaceCreateWithName(name);
      if (CFDictionaryContainsKey(v50, v39))
      {
        CGColorFromCFArray = createCGColorFromCFArray(v50, v39, 0);
        v59 = CGColorFromCFArray;
        if (CGColorFromCFArray)
        {
          if (*(_QWORD *)(DerivedStorage + 96))
          {
            Components = CGColorGetComponents(CGColorFromCFArray);
            *(_OWORD *)&v92.a = *(_OWORD *)Components;
            v92.c = Components[2];
            goto LABEL_64;
          }
          v62 = 0;
LABEL_63:
          v63 = CGColorGetComponents(*(CGColorRef *)(DerivedStorage + 232));
          *(_OWORD *)&v92.a = *(_OWORD *)v63;
          v92.c = v63[2];
          v64 = (CGFloat *)(DerivedStorage + 256);
          if ((v62 & 1) != 0)
          {
LABEL_67:
            v92.d = *v64;
            v61 = CGColorCreate(v57, &v92.a);
            CGColorRelease(v59);
            if (v57)
              CFRelease(v57);
            if (v61)
            {
              CGContextSaveGState(a8);
              v102.height = v78;
              v102.width = v79;
              CGContextSetShadowWithColor(a8, v102, 0.0, 0);
              CGContextSetFillColorWithColor(a8, v61);
              v107.size.height = v80;
              v107.origin.y = v81 + origins.y + leading * 0.5;
              v107.origin.x = v48 + v83;
              v107.size.width = TypographicBounds;
              CGContextFillRect(a8, v107);
              CGContextRestoreGState(a8);
            }
            goto LABEL_71;
          }
LABEL_64:
          if (*(_QWORD *)(DerivedStorage + 120))
            v64 = (CGFloat *)(CGColorGetComponents(v59) + 3);
          else
            v64 = (CGFloat *)(DerivedStorage + 256);
          goto LABEL_67;
        }
      }
      else
      {
        v59 = 0;
      }
      v62 = 1;
      goto LABEL_63;
    }
LABEL_75:
    ++v38;
    Lines = v69;
    Attribute = v70;
  }
  while (v38 != Count);
LABEL_76:
  if (Attribute)
    CGContextRestoreGState(a8);
  v29 = v66;
  v27 = v67;
  v33 = frame;
LABEL_79:
  CFRelease(v33);
  v37 = 0;
LABEL_80:
  CFRelease(v29);
LABEL_81:
  CFRelease(v27);
  return v37;
}

void setupHighlight_0(uint64_t a1, const __CFAttributedString *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  CFIndex Length;
  CFIndex v6;
  CFIndex v7;
  const __CFString *v8;
  void *v9;
  const void *v10;
  CFDictionaryRef Attributes;
  const __CFDictionary *v12;
  CGColorSpace *v13;
  CGColor *CGColorFromCFArray;
  CGColor *v15;
  const CGFloat *v16;
  char v17;
  const CGFloat *v18;
  const CGFloat *v19;
  CGColorRef v20;
  const __CFString *v21;
  const __CFString *attrName;
  CFRange effectiveRange;
  CGFloat components[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_DWORD *)(DerivedStorage + 28))
  {
    v4 = DerivedStorage;
    effectiveRange.location = 0;
    effectiveRange.length = 0;
    Length = CFAttributedStringGetLength(a2);
    if (Length >= 1)
    {
      v6 = Length;
      v7 = 0;
      v8 = (const __CFString *)*MEMORY[0x1E0C9DA10];
      v9 = (void *)*MEMORY[0x1E0CA29B8];
      attrName = (const __CFString *)*MEMORY[0x1E0CA8160];
      v21 = (const __CFString *)*MEMORY[0x1E0CA8600];
      v10 = (const void *)*MEMORY[0x1E0C9AE50];
      while (1)
      {
        Attributes = CFAttributedStringGetAttributes(a2, v7, &effectiveRange);
        if (Attributes)
          break;
LABEL_21:
        v7 = effectiveRange.length + effectiveRange.location;
        if (effectiveRange.length + effectiveRange.location >= v6)
          return;
      }
      v12 = Attributes;
      v13 = CGColorSpaceCreateWithName(v8);
      if (CFDictionaryContainsKey(v12, v9))
      {
        CGColorFromCFArray = createCGColorFromCFArray(v12, v9, 0);
        v15 = CGColorFromCFArray;
        if (CGColorFromCFArray)
        {
          if (*(_QWORD *)(v4 + 96))
          {
            v16 = CGColorGetComponents(CGColorFromCFArray);
            *(_OWORD *)components = *(_OWORD *)v16;
            v25 = *((_QWORD *)v16 + 2);
            goto LABEL_13;
          }
          v17 = 0;
LABEL_12:
          v18 = CGColorGetComponents(*(CGColorRef *)(v4 + 232));
          *(_OWORD *)components = *(_OWORD *)v18;
          v25 = *((_QWORD *)v18 + 2);
          v19 = (const CGFloat *)(v4 + 256);
          if ((v17 & 1) != 0)
          {
LABEL_16:
            v26 = *(_QWORD *)v19;
            v20 = CGColorCreate(v13, components);
            CGColorRelease(v15);
            if (v13)
              CFRelease(v13);
            if (v20)
            {
              CFAttributedStringSetAttribute(a2, effectiveRange, attrName, v20);
              CFAttributedStringSetAttribute(a2, effectiveRange, v21, v10);
            }
            CGColorRelease(v20);
            goto LABEL_21;
          }
LABEL_13:
          if (*(_QWORD *)(v4 + 120))
            v19 = CGColorGetComponents(v15) + 3;
          else
            v19 = (const CGFloat *)(v4 + 256);
          goto LABEL_16;
        }
      }
      else
      {
        v15 = 0;
      }
      v17 = 1;
      goto LABEL_12;
    }
  }
}

uint64_t subtitleRendererSetupText(uint64_t a1, const __CFAttributedString *a2, int a3, CGFloat a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  CFTypeRef v9;
  const __CFNumber *v10;
  CFIndex v11;
  const __CFString *String;
  UniChar *v13;
  const __CFAllocator **v14;
  UniChar *v15;
  const __CFAllocator *v16;
  CFNumberRef v17;
  CFNumberRef v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  CFIndex Length;
  CFIndex v26;
  CFIndex v27;
  const __CFString *v28;
  const __CTFont *v29;
  CFIndex v30;
  CTFontRef CopyWithAttributes;
  CFIndex v32;
  __CFDictionary *Mutable;
  __CFDictionary *v34;
  CTParagraphStyleRef v35;
  CTParagraphStyleRef v36;
  CFIndex v37;
  const __CFString *v38;
  const __CFDictionary *Attributes;
  const __CFDictionary *v40;
  CGColor *CGColorFromCFArray;
  const __CFNumber *v42;
  _BOOL4 v43;
  const __CFNumber *v44;
  const __CFNumber *v45;
  double v46;
  const __CFNumber *v47;
  int a_low;
  int v49;
  CFNumberRef v50;
  _BOOL4 v51;
  const __CFString *v52;
  const __CFString *v53;
  int v54;
  uint64_t v55;
  CFArrayRef v56;
  int v57;
  int v58;
  const __CTFontDescriptor *v59;
  const __CTFontDescriptor *v60;
  const void *v61;
  int v62;
  const void *v63;
  const void *v64;
  const __CFString *v65;
  int v66;
  const void *v67;
  const __CTFont *v68;
  double Size;
  uint64_t v70;
  CGColor *v71;
  const void *v72;
  const __CFString *v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const __CTFontDescriptor *v78;
  const __CFDictionary *v79;
  __CFDictionary *v80;
  const void **v81;
  const __CTFont *v82;
  CTFontSymbolicTraits v83;
  const void *CopyWithSymbolicTraits;
  const __CFNumber *SInt32;
  const __CFNumber *UInt32;
  const __CTFontDescriptor *CopyWithFeature;
  CTFontDescriptorRef v88;
  CTFontDescriptorRef v89;
  double v90;
  double v91;
  double v92;
  double v93;
  const __CFArray *v94;
  const __CFArray *v95;
  CFArrayRef v96;
  const __CTFontDescriptor *v97;
  double Ascent;
  double Descent;
  const __CTFont *v100;
  double v101;
  double v102;
  double Leading;
  CTParagraphStyleRef v104;
  uint64_t v105;
  void *v107;
  const __CFString *attrName;
  void *v109;
  const __CFString *v110;
  const __CFString *v111;
  int v112;
  const __CFString *v113;
  const __CFString *attribute;
  uint64_t v115;
  void *v116;
  const __CFString *v117;
  const __CFString *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *key;
  void *v125;
  const __CFAllocator *allocator;
  CFTypeRef value;
  _BOOL4 v128;
  int v129;
  void *v130;
  uint64_t v131;
  int v132;
  CFIndex range;
  uint64_t v134;
  _BOOL4 v136;
  CGColor *v137;
  int v138;
  double v139;
  double v140;
  char TextAlignment;
  double v142;
  int valuePtr;
  CFRange effectiveRange;
  CFRange v145;
  CGAffineTransform v146;
  int v147;
  uint64_t v148;
  double *v149;
  int v150;
  uint64_t v151;
  double *v152;
  _OWORD v153[2];
  uint64_t v154;
  CFRange v155;
  CFRange v156;
  CFRange v157;
  CFRange v158;
  CFRange v159;
  CFRange v160;
  CFRange v161;
  CFRange v162;

  v154 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3 == 3)
  {
    Length = CFAttributedStringGetLength(a2);
    if (Length >= 1)
    {
      v26 = Length;
      v27 = 0;
      v28 = (const __CFString *)*MEMORY[0x1E0CA8188];
      do
      {
        v146.a = 0.0;
        v146.b = 0.0;
        v29 = (const __CTFont *)CFAttributedStringGetAttribute(a2, v27, v28, (CFRange *)&v146);
        if (v29)
        {
          if (*(_QWORD *)&v146.b <= 1uLL)
            v30 = 1;
          else
            v30 = *(_QWORD *)&v146.b;
          CopyWithAttributes = CTFontCreateCopyWithAttributes(v29, a4, 0, 0);
          v156.location = v27;
          v156.length = v30;
          CFAttributedStringSetAttribute(a2, v156, v28, CopyWithAttributes);
          CFRelease(CopyWithAttributes);
        }
        if (*(_QWORD *)&v146.b)
          v27 += *(_QWORD *)&v146.b;
        else
          ++v27;
      }
      while (v27 < v26);
    }
    return 0;
  }
  if (a3 == 2)
  {
    v146.a = 0.0;
    *(_QWORD *)&v153[0] = 0;
    v32 = CFAttributedStringGetLength(a2);
    calculateStrokeAttributes(a4, a1, &v146, (CFNumberRef *)v153);
    if (*(_QWORD *)&v146.a)
    {
      v157.location = 0;
      v157.length = v32;
      CFAttributedStringSetAttribute(a2, v157, (CFStringRef)*MEMORY[0x1E0CA85C8], *(CFTypeRef *)&v146.a);
    }
    if (*(_QWORD *)&v153[0])
    {
      v158.location = 0;
      v158.length = v32;
      CFAttributedStringSetAttribute(a2, v158, (CFStringRef)*MEMORY[0x1E0CA85D0], *(CFTypeRef *)&v153[0]);
    }
    if (*(_QWORD *)&v146.a)
    {
      CFRelease(*(CFTypeRef *)&v146.a);
      v146.a = 0.0;
    }
    if (*(_QWORD *)&v153[0])
    {
      CFRelease(*(CFTypeRef *)&v153[0]);
      *(_QWORD *)&v153[0] = 0;
    }
    setupRubyAnnotation_0(a1, a2, 2, a4);
    return 0;
  }
  if (a3)
    return 0;
  v8 = DerivedStorage;
  v145.location = 0;
  v145.length = 0;
  range = CFAttributedStringGetLength(a2);
  effectiveRange.location = 0;
  effectiveRange.length = 0;
  v9 = CFAttributedStringGetAttribute(a2, 0, (CFStringRef)*MEMORY[0x1E0CA2B40], &effectiveRange);
  v10 = (const __CFNumber *)CFAttributedStringGetAttribute(a2, 0, CFSTR("kFigSubtitleRenderer_SourceFormat"), &effectiveRange);
  valuePtr = 0;
  CFNumberGetValue(v10, kCFNumberSInt32Type, &valuePtr);
  v11 = CFAttributedStringGetLength(a2);
  String = CFAttributedStringGetString(a2);
  v13 = (UniChar *)malloc_type_calloc(v11, 2uLL, 0x1000040BDFB0063uLL);
  v14 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
  if (v13)
  {
    v15 = v13;
    LODWORD(v146.a) = 1;
    v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v17 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &v146);
    if (v17)
    {
      v18 = v17;
      v155.location = 0;
      v155.length = v11;
      CFStringGetCharacters(String, v155, v15);
      if (v11 < 1)
      {
        v24 = 0;
      }
      else
      {
        v19 = 0;
        v20 = 0;
        v21 = -1;
        do
        {
          v22 = v15[v20];
          if ((vmaxv_u16(vcgt_u16((uint16x4_t)0x51C019C0003000C0, (uint16x4_t)vadd_s16(vdup_n_s16(v22), (int16x4_t)0xB200CC00CE40CFC0))) & 1) != 0|| (unsigned __int16)(v22 + 1792) < 0x200u|| (unsigned __int16)(v22 + 464) < 0x20u|| (unsigned __int16)(v22 + 256) < 0xF0u|| (v22 & 0xFFC0) == 0x3000|| (v22 & 0xFF80) == 0x2E80|| (v22 & 0xFE00) == 0x3200)
          {
            if (v21 < 0)
              v21 = v20;
          }
          else
          {
            if (v21 >= -1)
              v23 = -1;
            else
              v23 = v21;
            if (v21 >= 0)
              v19 = 1;
            v21 = v23;
          }
          ++v20;
        }
        while (v11 != v20);
        if (v21 >= 0)
          v24 = 1;
        else
          v24 = v19;
      }
      CFRelease(v18);
    }
    else
    {
      v24 = 0;
    }
    free(v15);
    v128 = v9 != 0;
    v112 = 1;
    if (v24 && v9)
    {
      v159.location = 0;
      v159.length = range;
      CFAttributedStringSetAttribute(a2, v159, (CFStringRef)*MEMORY[0x1E0CA86C8], (CFTypeRef)*MEMORY[0x1E0C9AE50]);
      Mutable = CFDictionaryCreateMutable(v16, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!Mutable)
        return FigSignalErrorAt();
      v34 = Mutable;
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8170], (const void *)*MEMORY[0x1E0CA8180]);
      v160.location = 0;
      v160.length = range;
      CFAttributedStringSetAttribute(a2, v160, (CFStringRef)*MEMORY[0x1E0CA8178], v34);
      CFRelease(v34);
      v112 = 0;
      v128 = 1;
    }
  }
  else
  {
    v128 = v9 != 0;
    v112 = 1;
  }
  v35 = CTParagraphStyleCreate(0, 0);
  if (v35)
  {
    v36 = v35;
    CTParagraphStyleSetCompositionLanguage();
    v161.location = 0;
    v37 = range;
    v161.length = range;
    v113 = (const __CFString *)*MEMORY[0x1E0CA85A0];
    CFAttributedStringSetAttribute(a2, v161, (CFStringRef)*MEMORY[0x1E0CA85A0], v36);
    CFRelease(v36);
    v134 = *MEMORY[0x1E0CA8308];
    v125 = (void *)*MEMORY[0x1E0CA2A20];
    key = (void *)*MEMORY[0x1E0CA2B30];
    v116 = (void *)*MEMORY[0x1E0CA2A38];
    attrName = (const __CFString *)*MEMORY[0x1E0CA8580];
    v130 = (void *)*MEMORY[0x1E0CA2AD0];
    value = (CFTypeRef)*MEMORY[0x1E0C9AE50];
    v123 = (void *)*MEMORY[0x1E0CA2A50];
    v122 = (void *)*MEMORY[0x1E0CA2978];
    v121 = (void *)*MEMORY[0x1E0CA2B38];
    allocator = *v14;
    v110 = (const __CFString *)*MEMORY[0x1E0CA86C0];
    v120 = (void *)*MEMORY[0x1E0CA2A00];
    v109 = (void *)*MEMORY[0x1E0CA2A28];
    v115 = *MEMORY[0x1E0CA83C0];
    v119 = (void *)*MEMORY[0x1E0CA2A58];
    v111 = (const __CFString *)*MEMORY[0x1E0CA8590];
    v107 = (void *)*MEMORY[0x1E0CA81D8];
    v118 = (const __CFString *)*MEMORY[0x1E0CA8550];
    v117 = (const __CFString *)*MEMORY[0x1E0CA8188];
    attribute = (const __CFString *)*MEMORY[0x1E0CA8380];
    while (1)
    {
      if (v145.length + v145.location >= v37)
      {
        setupRubyAnnotation_0(a1, a2, 0, a4);
        v162.length = CFAttributedStringGetLength(a2);
        v145.location = 0;
        v145.length = v162.length;
        v162.location = 0;
        CFAttributedStringSetAttribute(a2, v162, CFSTR("kFigSubtitleRenderer_CommonSetupDone"), value);
        return 0;
      }
      v153[0] = xmmword_1932FEA08;
      v153[1] = unk_1932FEA18;
      v38 = (const __CFString *)CFRetain(CFSTR("Helvetica"));
      v142 = 0.0;
      Attributes = CFAttributedStringGetAttributes(a2, v145.length + v145.location, &v145);
      if (!Attributes)
      {
        v137 = 0;
        LODWORD(v56) = 0;
        v138 = 0;
        v57 = 0;
        v58 = 0;
        v51 = 0;
        v129 = 0;
        v136 = 0;
        v131 = v134;
        v46 = a4;
        goto LABEL_130;
      }
      v40 = Attributes;
      CGColorFromCFArray = copyContentColor_0(*(_QWORD *)(v8 + 88), *(CGColorRef *)(v8 + 224), *(_QWORD *)(v8 + 112), Attributes, v125, *(CGFloat *)(v8 + 248));
      if (!CGColorFromCFArray)
        CGColorFromCFArray = createCGColorFromCFArray(0, 0, v153);
      if (CFDictionaryContainsKey(v40, key) && (v42 = (const __CFNumber *)CFDictionaryGetValue(v40, key)) != 0)
      {
        CFNumberGetValue(v42, kCFNumberCGFloatType, &v142);
        v43 = v142 >= -100.0;
        if (v142 > 100.0)
          v43 = 0;
        v136 = v43;
      }
      else
      {
        v136 = 0;
      }
      if (v128)
      {
        if (CFDictionaryContainsKey(v40, v116))
        {
          v44 = (const __CFNumber *)CFDictionaryGetValue(v40, v116);
          v45 = v44;
          LODWORD(v146.a) = 0;
          if (!v44 || (CFNumberGetValue(v44, kCFNumberIntType, &v146), LODWORD(v146.a) <= 4))
            CFAttributedStringSetAttribute(a2, v145, attrName, v45);
        }
      }
      v46 = a4;
      if (CFDictionaryContainsKey(v40, v130))
      {
        v47 = (const __CFNumber *)CFDictionaryGetValue(v40, v130);
        a_low = 100;
        LODWORD(v146.a) = 100;
        if (v47)
        {
          CFNumberGetValue(v47, kCFNumberIntType, &v146);
          a_low = LODWORD(v146.a);
        }
        v46 = (double)a_low * a4 / 100.0;
      }
      v49 = value == CFDictionaryGetValue(v40, v123);
      v138 = value == CFDictionaryGetValue(v40, v122);
      if (value == CFDictionaryGetValue(v40, v121))
      {
        LODWORD(v146.a) = 1;
        v50 = CFNumberCreate(allocator, kCFNumberSInt32Type, &v146);
        CFAttributedStringSetAttribute(a2, v145, v110, v50);
        if (v50)
          CFRelease(v50);
      }
      v51 = *(unsigned __int8 *)(v8 + 64) != v49 || *(unsigned __int8 *)(v8 + 65) != v138 || *(_BYTE *)(v8 + 80);
      if (valuePtr != 2021028980 && valuePtr != 2004251764)
        break;
      if (CFDictionaryContainsKey(v40, v120))
      {
        v52 = (const __CFString *)CFDictionaryGetValue(v40, v120);
        if (!v52)
          break;
        v53 = v52;
        CFRetain(v52);
        if (v38)
          CFRelease(v38);
        v54 = 1;
        v38 = v53;
        v55 = v134;
        v129 = 1;
      }
      else
      {
        if (!CFDictionaryContainsKey(v40, v109) || !CFDictionaryGetValue(v40, v109))
          break;
        v146.a = 0.0;
        if (FigTextMarkupMapGenericFontFamilyToMACaptionAppearanceFontStyle()
          && (v59 = *(const __CTFontDescriptor **)(v8 + 8 * *(_QWORD *)&v146.a + 288)) != 0)
        {
          if (v38)
            CFRelease(v38);
          v38 = (const __CFString *)CTFontDescriptorCopyAttribute(v59, attribute);
          v54 = 1;
          v55 = v115;
        }
        else
        {
          v54 = 0;
          v55 = v134;
        }
        v129 = 0;
      }
LABEL_100:
      v137 = CGColorFromCFArray;
      if (*(_QWORD *)(v8 + 152))
      {
        if (v54)
        {
          v131 = v55;
          goto LABEL_113;
        }
        v60 = *(const __CTFontDescriptor **)(v8 + 288);
        if (v38)
          CFRelease(v38);
      }
      else
      {
        if (v38)
          CFRelease(v38);
        v60 = *(const __CTFontDescriptor **)(v8 + 288);
      }
      v38 = (const __CFString *)CTFontDescriptorCopyAttribute(v60, attribute);
      v61 = *(const void **)(v8 + 288);
      if (v61)
      {
        v62 = v49;
        v63 = *(const void **)(v8 + 48);
        if (v63 && v63 == v61)
        {
          v57 = 0;
          v58 = 0;
          v131 = v115;
          goto LABEL_126;
        }
        *(_QWORD *)(v8 + 48) = v61;
        CFRetain(v61);
        v66 = 0;
        v58 = 0;
        v57 = 1;
        v131 = v115;
        if (v63)
          goto LABEL_124;
        goto LABEL_126;
      }
      v131 = v115;
LABEL_113:
      v64 = *(const void **)(v8 + 48);
      if (v64)
      {
        CFRelease(v64);
        *(_QWORD *)(v8 + 48) = 0;
      }
      v65 = *(const __CFString **)(v8 + 56);
      if (!v65)
      {
        v63 = 0;
LABEL_119:
        v62 = v49;
        *(_QWORD *)(v8 + 56) = v38;
        if (v38)
          CFRetain(v38);
        v57 = 0;
        v66 = 1;
        v58 = 1;
        if (!v63)
          goto LABEL_126;
LABEL_124:
        CFRelease(v63);
        v58 = v66;
        goto LABEL_126;
      }
      if (CFStringCompare(v65, v38, 0))
      {
        v63 = *(const void **)(v8 + 56);
        goto LABEL_119;
      }
      v62 = v49;
      v57 = 0;
      v58 = 0;
LABEL_126:
      if (CFDictionaryContainsKey(v40, v119))
      {
        v67 = CFDictionaryGetValue(v40, v119);
        if (v67)
          CFAttributedStringSetAttribute(a2, v145, v111, v67);
      }
      LODWORD(v56) = v62;
LABEL_130:
      v68 = *(const __CTFont **)(v8 + 40);
      if (v68)
      {
        Size = CTFontGetSize(v68);
        v70 = *(_QWORD *)(v8 + 40);
        if (!(v58 | v57 | v51) && v46 == Size)
        {
          v71 = v137;
          if (!v70)
            goto LABEL_208;
          goto LABEL_204;
        }
        if (v70)
        {
          CFRelease(*(CFTypeRef *)(v8 + 40));
          *(_QWORD *)(v8 + 40) = 0;
        }
      }
      v72 = *(const void **)(v8 + 48);
      v73 = *(const __CFString **)(v8 + 72);
      v74 = v142;
      v75 = CMBaseObjectGetDerivedStorage();
      if (!v38)
      {
LABEL_159:
        v82 = 0;
        v71 = v137;
        goto LABEL_203;
      }
      if (!v73)
      {
LABEL_150:
        v77 = 0;
        goto LABEL_152;
      }
      v76 = v75;
      if (CFStringCompare(CFSTR("yue"), v73, 1uLL) == kCFCompareEqualTo
        || CFStringCompare(CFSTR("yue-Hant"), v73, 1uLL) == kCFCompareEqualTo
        || CFStringCompare(CFSTR("cmn-Hant"), v73, 1uLL) == kCFCompareEqualTo
        || CFStringCompare(CFSTR("zh-cmn-Hant"), v73, 1uLL) == kCFCompareEqualTo
        || CFStringCompare(CFSTR("zh-Hant"), v73, 1uLL) == kCFCompareEqualTo)
      {
        v77 = 3;
        goto LABEL_152;
      }
      if (CFStringCompare(CFSTR("cmn-Hans"), v73, 1uLL) == kCFCompareEqualTo
        || CFStringCompare(CFSTR("zh-cmn-Hans"), v73, 1uLL) == kCFCompareEqualTo
        || CFStringCompare(CFSTR("zh-cmn"), v73, 1uLL) == kCFCompareEqualTo
        || CFStringCompare(CFSTR("zh-Hans"), v73, 1uLL) == kCFCompareEqualTo)
      {
        v77 = 2;
        goto LABEL_152;
      }
      if (CFStringCompare(CFSTR("ja"), v73, 1uLL) && CFStringCompare(CFSTR("ja-JP"), v73, 1uLL))
        goto LABEL_150;
      if (v129)
      {
        v77 = 1;
LABEL_152:
        if (v72)
        {
          v78 = (const __CTFontDescriptor *)CFRetain(v72);
          v79 = 0;
          if (v78)
            goto LABEL_163;
          goto LABEL_222;
        }
        v80 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (!v80)
          goto LABEL_159;
        v79 = v80;
        if (v134 == v131)
        {
          v81 = (const void **)MEMORY[0x1E0CA8300];
LABEL_161:
          CFDictionaryAddValue(v80, *v81, v38);
        }
        else if (v115 == v131)
        {
          v81 = (const void **)MEMORY[0x1E0CA8380];
          goto LABEL_161;
        }
        v78 = CTFontDescriptorCreateWithAttributes(v79);
        if (v78)
          goto LABEL_163;
        goto LABEL_222;
      }
      v77 = 1;
      if (*(_QWORD *)(v76 + 152) != 1)
        goto LABEL_152;
      *(_QWORD *)&v146.a = 1;
      v78 = (const __CTFontDescriptor *)MACaptionAppearanceCopyFontDescriptorForLanguage();
      v79 = 0;
      v77 = 1;
      if (v78)
      {
LABEL_163:
        v132 = (int)v56;
        v83 = v56 | (2 * v138);
        CopyWithSymbolicTraits = CTFontDescriptorCreateCopyWithSymbolicTraits(v78, v83, 3u);
        if (!CopyWithSymbolicTraits)
        {
          if (!v132)
            goto LABEL_174;
          SInt32 = (const __CFNumber *)FigCFNumberCreateSInt32();
          UInt32 = (const __CFNumber *)FigCFNumberCreateUInt32();
          CopyWithFeature = CTFontDescriptorCreateCopyWithFeature(v78, SInt32, UInt32);
          CopyWithSymbolicTraits = CopyWithFeature;
          if (!v138)
            goto LABEL_169;
          if (CopyWithFeature)
          {
            v88 = CTFontDescriptorCreateCopyWithSymbolicTraits(CopyWithFeature, v83, 2u);
            if (v88)
            {
              v89 = v88;
              CFRelease(CopyWithSymbolicTraits);
              CopyWithSymbolicTraits = v89;
            }
LABEL_169:
            if (SInt32)
LABEL_170:
              CFRelease(SInt32);
          }
          else
          {
            CopyWithSymbolicTraits = CTFontDescriptorCreateCopyWithSymbolicTraits(v78, v83, 2u);
            if (SInt32)
              goto LABEL_170;
          }
          if (UInt32)
            CFRelease(UInt32);
          if (!CopyWithSymbolicTraits)
LABEL_174:
            CopyWithSymbolicTraits = CFRetain(v78);
        }
        if (v136)
        {
          v90 = v74 * 90.0 / 100.0;
          v91 = 89.0;
          LOBYTE(v56) = v132;
          if (v90 < 89.0)
          {
            v91 = v74 * 90.0 / 100.0;
            if (v90 <= -89.0)
              v91 = -89.0;
          }
          v92 = tan(v91 * 3.14159265 / 180.0);
          if (v112)
            v93 = 0.0;
          else
            v93 = v92;
          v146.a = 1.0;
          if (!v112)
            v92 = 0.0;
          v146.b = v93;
          v146.c = v92;
          v146.d = 1.0;
          v146.tx = 0.0;
          v146.ty = 0.0;
          v82 = CTFontCreateWithFontDescriptor((CTFontDescriptorRef)CopyWithSymbolicTraits, v46, &v146);
          if (!v82)
            v82 = CTFontCreateWithFontDescriptor((CTFontDescriptorRef)CopyWithSymbolicTraits, v46, 0);
          if (!v82)
          {
LABEL_198:
            v71 = v137;
            goto LABEL_199;
          }
        }
        else
        {
          v82 = CTFontCreateWithFontDescriptor((CTFontDescriptorRef)CopyWithSymbolicTraits, v46, 0);
          LOBYTE(v56) = v132;
          if (!v82)
            goto LABEL_198;
        }
        if ((v77 & 2) == 0)
          goto LABEL_198;
        if (!v79)
          goto LABEL_198;
        *(_QWORD *)&v146.a = qword_1E2FAAAB8[v77];
        v94 = CFArrayCreate(allocator, (const void **)&v146, 1, MEMORY[0x1E0C9B378]);
        if (!v94)
          goto LABEL_198;
        v95 = v94;
        v96 = CTFontCopyDefaultCascadeListForLanguages(v82, v94);
        v71 = v137;
        if (v96)
        {
          v56 = v96;
          CFDictionarySetValue(v79, v107, v96);
          CFRelease(v78);
          CFRelease(v82);
          v97 = CTFontDescriptorCreateWithAttributes(v79);
          v78 = v97;
          if (v97)
            v82 = CTFontCreateWithFontDescriptor(v97, v46, 0);
          else
            v82 = 0;
          CFRelease(v56);
          CFRelease(v95);
          LOBYTE(v56) = v132;
          if (!v78)
          {
            if (!CopyWithSymbolicTraits)
            {
LABEL_201:
              if (!v79)
                goto LABEL_203;
LABEL_202:
              CFRelease(v79);
              goto LABEL_203;
            }
LABEL_200:
            CFRelease(CopyWithSymbolicTraits);
            goto LABEL_201;
          }
        }
        else
        {
          CFRelease(v95);
          LOBYTE(v56) = v132;
        }
LABEL_199:
        CFRelease(v78);
        if (!CopyWithSymbolicTraits)
          goto LABEL_201;
        goto LABEL_200;
      }
LABEL_222:
      v82 = 0;
      v71 = v137;
      if (v79)
        goto LABEL_202;
LABEL_203:
      *(_QWORD *)(v8 + 40) = v82;
      *(_BYTE *)(v8 + 80) = 0;
      *(_BYTE *)(v8 + 64) = (_BYTE)v56;
      *(_BYTE *)(v8 + 65) = v138;
      if (!v82)
        goto LABEL_208;
LABEL_204:
      TextAlignment = 0;
      TextAlignment = getTextAlignment(a2);
      Ascent = CTFontGetAscent(*(CTFontRef *)(v8 + 40));
      Descent = CTFontGetDescent(*(CTFontRef *)(v8 + 40));
      v140 = 0.0;
      v100 = *(const __CTFont **)(v8 + 40);
      v101 = CTFontGetAscent(v100);
      v102 = CTFontGetDescent(v100);
      Leading = CTFontGetLeading(v100);
      if (Leading <= (v101 + v102) * 0.2)
        Leading = (v101 + v102) * 0.2;
      v140 = Leading;
      v139 = Ascent + Descent + Leading;
      LODWORD(v146.a) = 0;
      *(_QWORD *)&v146.b = 1;
      *(_QWORD *)&v146.c = &TextAlignment;
      LODWORD(v146.d) = 15;
      *(_QWORD *)&v146.tx = 8;
      *(_QWORD *)&v146.ty = &v140;
      v147 = 14;
      v148 = 8;
      v149 = &v140;
      v150 = 8;
      v151 = 8;
      v152 = &v139;
      v104 = CTParagraphStyleCreate((const CTParagraphStyleSetting *)&v146, 4uLL);
      CFAttributedStringSetAttribute(a2, v145, v118, v71);
      CFAttributedStringSetAttribute(a2, v145, v117, *(CFTypeRef *)(v8 + 40));
      if (!v104)
      {
LABEL_208:
        v105 = 4294955204;
        goto LABEL_209;
      }
      CFAttributedStringSetAttribute(a2, v145, v113, v104);
      CFRelease(v104);
      v105 = 0;
LABEL_209:
      v37 = range;
      CGColorRelease(v71);
      if (v38)
        CFRelease(v38);
      if ((_DWORD)v105)
        return v105;
    }
    v54 = 0;
    v129 = 0;
    v55 = v134;
    goto LABEL_100;
  }
  return 4294955204;
}

uint64_t getTextAlignment(const __CFAttributedString *a1)
{
  const __CFString *Attribute;
  const __CFString *v3;
  unsigned __int8 v4;
  CFRange v6;

  v6.location = 0;
  v6.length = 0;
  Attribute = (const __CFString *)CFAttributedStringGetAttribute(a1, 0, (CFStringRef)*MEMORY[0x1E0CA2958], &v6);
  if (Attribute)
  {
    v3 = Attribute;
    if (CFStringCompare(Attribute, (CFStringRef)*MEMORY[0x1E0CA2948], 0))
    {
      if (CFStringCompare(v3, (CFStringRef)*MEMORY[0x1E0CA2930], 0))
      {
        v4 = 1;
        if (CFStringCompare(v3, (CFStringRef)*MEMORY[0x1E0CA2928], 0))
        {
          if (CFStringCompare(v3, (CFStringRef)*MEMORY[0x1E0CA2940], 0))
            return 2;
          else
            return 1;
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 4;
    }
  }
  else
  {
    return (2 * (CFAttributedStringGetAttribute(a1, 0, (CFStringRef)*MEMORY[0x1E0CA2B40], &v6) == 0));
  }
  return v4;
}

void setupRubyAnnotation_0(uint64_t a1, CFAttributedStringRef aStr, int a3, double a4)
{
  const __CFAttributedString *v5;
  CFIndex Length;
  CFIndex v7;
  CFIndex v8;
  const void *v9;
  const void *v10;
  double v11;
  const __CFAllocator *v12;
  const __CFDictionary *Attributes;
  const __CFDictionary *v14;
  const void *v15;
  const __CFAttributedString *Value;
  const __CFString *String;
  const __CFDictionary *v18;
  const __CFString *v19;
  const __CFString *v20;
  CTRubyAlignment v21;
  const void *v22;
  __CFDictionary *Mutable;
  CTRubyAlignment v24;
  const __CFAttributedString *v25;
  const __CFString *v26;
  CFIndex v27;
  const void *v28;
  CFNumberRef v29;
  const __CFDictionary *Copy;
  CTRubyPosition v31;
  CTRubyAnnotationRef v32;
  const __CFString *v33;
  const __CFString *v34;
  const __CFString *v35;
  const __CFString *v36;
  const __CFString *v37;
  const __CFString *v38;
  void *v40;
  void *v41;
  const __CFString *attrName;
  const __CFString *theString2;
  const void *v44;
  const void *v45;
  void *v46;
  const __CFString *v47;
  void *v48;
  void *v49;
  void *key;
  CFDictionaryRef theDict;
  CFRange v53;
  CFRange effectiveRange;
  CFNumberRef v55;
  const void *v56;
  uint64_t valuePtr;

  v5 = aStr;
  effectiveRange.location = 0;
  effectiveRange.length = 0;
  Length = CFAttributedStringGetLength(aStr);
  if (Length >= 1)
  {
    v7 = Length;
    v8 = 0;
    v9 = (const void *)*MEMORY[0x1E0CA8550];
    v10 = (const void *)*MEMORY[0x1E0CA2AD8];
    key = (void *)*MEMORY[0x1E0CA2AE0];
    theString2 = (const __CFString *)*MEMORY[0x1E0CA2D10];
    v37 = (const __CFString *)*MEMORY[0x1E0CA2D00];
    v38 = (const __CFString *)*MEMORY[0x1E0CA2CE0];
    v35 = (const __CFString *)*MEMORY[0x1E0CA2CF0];
    v36 = (const __CFString *)*MEMORY[0x1E0CA2CE8];
    v33 = (const __CFString *)*MEMORY[0x1E0CA2CD8];
    v34 = (const __CFString *)*MEMORY[0x1E0CA2D08];
    v49 = (void *)*MEMORY[0x1E0CA2AE8];
    attrName = (const __CFString *)*MEMORY[0x1E0CA8168];
    v11 = a4 * 0.5;
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v46 = (void *)*MEMORY[0x1E0CA85B8];
    v45 = (const void *)*MEMORY[0x1E0CA85B0];
    v44 = (const void *)*MEMORY[0x1E0C9AE50];
    v41 = (void *)*MEMORY[0x1E0CA85C8];
    v40 = (void *)*MEMORY[0x1E0CA85D0];
    v48 = (void *)*MEMORY[0x1E0CA2AF0];
    v47 = (const __CFString *)*MEMORY[0x1E0CA85A8];
    while (1)
    {
      Attributes = CFAttributedStringGetAttributes(v5, v8, &effectiveRange);
      if (Attributes)
      {
        v14 = Attributes;
        v15 = CFDictionaryContainsKey(Attributes, v9) ? CFDictionaryGetValue(v14, v9) : 0;
        if (CFDictionaryContainsKey(v14, v10))
          break;
      }
LABEL_44:
      v8 = effectiveRange.length + effectiveRange.location;
      if (effectiveRange.length + effectiveRange.location >= v7)
        return;
    }
    Value = (const __CFAttributedString *)CFDictionaryGetValue(v14, v10);
    String = CFAttributedStringGetString(Value);
    v53.location = 0;
    v53.length = 0;
    v18 = CFAttributedStringGetAttributes(Value, 0, &v53);
    v19 = (const __CFString *)CFDictionaryGetValue(v18, key);
    if (v19)
    {
      v20 = v19;
      if (CFStringCompare(v19, theString2, 0) == kCFCompareEqualTo)
      {
        v21 = kCTRubyAlignmentStart;
        goto LABEL_22;
      }
      if (CFStringCompare(v20, v38, 0))
      {
        if (CFStringCompare(v20, v37, 0))
        {
          if (CFStringCompare(v20, v36, 0))
          {
            if (CFStringCompare(v20, v35, 0))
            {
              if (CFStringCompare(v20, v34, 0))
                v21 = 2 * (CFStringCompare(v20, v33, 0) != kCFCompareEqualTo);
              else
                v21 = kCTRubyAlignmentLineEdge;
            }
            else
            {
              v21 = kCTRubyAlignmentDistributeSpace;
            }
          }
          else
          {
            v21 = kCTRubyAlignmentDistributeLetter;
          }
        }
        else
        {
          v21 = kCTRubyAlignmentEnd;
        }
        goto LABEL_22;
      }
    }
    v21 = kCTRubyAlignmentCenter;
LABEL_22:
    v22 = CFDictionaryGetValue(v18, v49);
    if (v22)
      CFAttributedStringSetAttribute(v5, effectiveRange, attrName, v22);
    v56 = 0;
    valuePtr = 0x3FE0000000000000;
    v55 = 0;
    if (a3 == 2)
      calculateStrokeAttributes(v11, a1, &v56, &v55);
    Mutable = CFDictionaryCreateMutable(v12, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      theDict = v18;
      v24 = v21;
      v25 = v5;
      v26 = String;
      v27 = v7;
      v28 = v10;
      v29 = CFNumberCreate(v12, kCFNumberCGFloatType, &valuePtr);
      CFDictionaryAddValue(Mutable, v46, v29);
      if (v29)
        CFRelease(v29);
      CFDictionaryAddValue(Mutable, v45, v44);
      CFDictionaryAddValue(Mutable, v9, v15);
      if (v56)
        CFDictionaryAddValue(Mutable, v41, v56);
      v10 = v28;
      if (v55)
        CFDictionaryAddValue(Mutable, v40, v55);
      Copy = CFDictionaryCreateCopy(v12, Mutable);
      v7 = v27;
      String = v26;
      v5 = v25;
      v21 = v24;
      v18 = theDict;
    }
    else
    {
      FigSignalErrorAt();
      Copy = 0;
    }
    if (v56)
      CFRelease(v56);
    if (v55)
      CFRelease(v55);
    if (Mutable)
      CFRelease(Mutable);
    CFDictionaryGetValue(v18, v48);
    v31 = FigCFEqual() != 0;
    v32 = CTRubyAnnotationCreateWithAttributes(v21, kCTRubyOverhangNone, v31, String, Copy);
    CFAttributedStringSetAttribute(v5, effectiveRange, v47, v32);
    if (v32)
      CFRelease(v32);
    if (Copy)
      CFRelease(Copy);
    goto LABEL_44;
  }
}

void calculateStrokeAttributes(double a1, uint64_t a2, _QWORD *a3, CFNumberRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  const void *CopyWithAlpha;
  CGColorSpace *DeviceRGB;
  CGColorSpace *v11;
  CGColor *v12;
  double v13;
  double v14;
  const __CFAllocator *v15;
  CFNumberRef v16;
  double v17;
  CGFloat components[2];
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 > 0.0)
  {
    v8 = DerivedStorage;
    components[0] = *(CGFloat *)(DerivedStorage + 152);
    CopyWithAlpha = (const void *)MACaptionAppearanceCopyStrokeColor();
    if (!CopyWithAlpha)
    {
      DeviceRGB = CGColorSpaceCreateDeviceRGB();
      if (DeviceRGB)
      {
        v11 = DeviceRGB;
        *(_OWORD *)components = xmmword_1932FEA28;
        v19 = unk_1932FEA38;
        v12 = CGColorCreate(DeviceRGB, components);
        CopyWithAlpha = CGColorCreateCopyWithAlpha(v12, *(CGFloat *)(v8 + 248));
        CGColorRelease(v12);
        CGColorSpaceRelease(v11);
      }
      else
      {
        CopyWithAlpha = 0;
      }
    }
    MACaptionAppearanceGetStrokeWidth();
    v14 = v13 + v13;
    if (*(_BYTE *)(v8 + 361))
      v14 = v14 * 100.0 / a1;
    components[0] = v14;
    v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v16 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberCGFloatType, components);
    if (v16)
    {
      if (a3)
      {
LABEL_10:
        *a3 = CopyWithAlpha;
LABEL_16:
        if (a4)
        {
          *a4 = v16;
        }
        else if (v16)
        {
          CFRelease(v16);
        }
        return;
      }
    }
    else
    {
      v17 = a1 * 0.147058824;
      if (a1 > 60.0)
        v17 = a1 * 0.147058824 * 0.5;
      components[0] = v17;
      v16 = CFNumberCreate(v15, kCFNumberCGFloatType, components);
      if (a3)
        goto LABEL_10;
    }
    if (CopyWithAlpha)
      CFRelease(CopyWithAlpha);
    goto LABEL_16;
  }
}

void subtitleRendererLayoutDo(double *a1)
{
  double *v1;
  uint64_t v2;
  const __CFDictionary *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double *v9;
  _BYTE *DerivedStorage;
  double *v11;
  double *v12;
  _BYTE *v13;
  const __CFArray *v14;
  const __CFAllocator *v15;
  CFIndex Count;
  CFMutableDictionaryRef MutableCopy;
  const __CFDictionary *v18;
  BOOL v20;
  double v21;
  float64x2_t v22;
  float64x2_t *v23;
  __int128 v24;
  __int128 v25;
  int v26;
  CFDictionaryRef *v27;
  double a;
  double b;
  double c;
  double d;
  const void *v32;
  const void *v33;
  const __CFArray *v34;
  const void *v35;
  int64_t v36;
  __CFArray *Mutable;
  CFIndex v38;
  double v39;
  double v40;
  double v41;
  uint64_t v45;
  const __CFAttributedString *ValueAtIndex;
  const __CFAttributedString *v47;
  float64x2_t *v48;
  const __CFString *Attribute;
  const __CFNumber *v50;
  const __CFNumber *v51;
  __int128 v52;
  const __CFDictionary *v53;
  _QWORD *v54;
  uint64_t v55;
  double *v56;
  double v57;
  char *v58;
  _BYTE *v59;
  const __CFNumber *v60;
  const __CFNumber *v61;
  double location_low;
  _QWORD *v63;
  CFIndex Length;
  CFMutableAttributedStringRef v65;
  CFMutableAttributedStringRef v66;
  double v67;
  double v68;
  const __CFAllocator *v69;
  char *v70;
  CFIndex i;
  const __CFAttributedString *v72;
  char *v73;
  double v74;
  double v75;
  double v76;
  double v77;
  int v78;
  double v79;
  double v80;
  double v81;
  int v82;
  uint64_t v83;
  double v85;
  double v86;
  const __CFNumber *v87;
  double v88;
  double v89;
  double v90;
  CFNumberRef v91;
  double v92;
  CGFloat v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  const __CFString *v101;
  const __CFString *v102;
  CGFloat v103;
  CGFloat v104;
  CFIndex v105;
  CFIndex v106;
  CGPath *v107;
  const CGPath *v108;
  const __CFDictionary *v109;
  const __CTFrame *v110;
  const __CTFrame *v111;
  const __CFArray *v112;
  double v113;
  double v114;
  const __CFArray *v115;
  CFIndex v116;
  CFIndex v117;
  CFIndex v118;
  CGFloat v119;
  CGFloat v120;
  CGFloat v121;
  double v122;
  double v123;
  double v124;
  const __CTLine *v125;
  const __CTLine *v126;
  CGFloat x;
  CGFloat y;
  CGFloat v129;
  CGFloat height;
  double v131;
  double v132;
  double v133;
  double v134;
  const __CFNumber *v135;
  CFIndex v136;
  CGPath *v137;
  const CGPath *v138;
  double width;
  const __CTFrame *v140;
  double v141;
  const __CFArray *Lines;
  const __CFArray *v143;
  CFIndex v144;
  CFIndex v145;
  const __CTLine *v146;
  double v147;
  const __CFNumber *v148;
  CFIndex v149;
  float v150;
  double v151;
  const __CTLine *v152;
  const __CFArray *v153;
  CFIndex v154;
  const __CTLine *v155;
  CFRange StringRange;
  const __CFDictionary *Attributes;
  const void *v158;
  const __CTLine *v159;
  double TypographicBounds;
  double v161;
  double v162;
  CFRange v163;
  CGSize v164;
  uint64_t v165;
  const __CFDictionary *v166;
  uint64_t EdgeStyle;
  double v168;
  CFIndex v169;
  CFNumberRef v170;
  CFNumberRef v171;
  double MaxY;
  CFIndex v173;
  CFNumberRef v174;
  CFNumberRef v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  double v181;
  double v182;
  const __CFString *v183;
  double v184;
  double v185;
  const __CFString *v186;
  const __CFString *v187;
  CFComparisonResult v188;
  double v189;
  double v190;
  CFComparisonResult v191;
  const __CFString *v192;
  int TextAlignment;
  const __CFString *v194;
  double v195;
  double v196;
  double v197;
  double v198;
  double v199;
  double v200;
  double v201;
  double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;
  CFDictionaryRef DictionaryRepresentation;
  const __CFNumber *v211;
  double v212;
  double v213;
  CFDictionaryRef v214;
  CFDictionaryRef v215;
  CGFloat v216;
  double v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  CFMutableArrayRef v221;
  __CFArray *v222;
  CFIndex v223;
  double v224;
  double v225;
  double v226;
  __int128 v227;
  const __CFAttributedString *v228;
  const __CFDictionary *v229;
  _OWORD *v230;
  _OWORD *v231;
  CFMutableArrayRef v232;
  __int128 v234;
  int v235;
  CFIndex v236;
  uint64_t v237;
  CFIndex j;
  CGFloat *v239;
  __CFArray *v240;
  const __CFArray *v241;
  double *v242;
  double *v243;
  CFIndex k;
  double v245;
  double v246;
  double *v247;
  double *v248;
  CFIndex m;
  double v250;
  double v251;
  CFIndex v252;
  CFIndex v253;
  CFIndex v254;
  CFIndex v255;
  double v256;
  char *v257;
  char *v258;
  double v259;
  double v260;
  double v261;
  double v262;
  CFIndex v263;
  CFIndex v264;
  CFIndex v265;
  double v266;
  double *v267;
  double *v268;
  double v269;
  double *v270;
  double *v271;
  double *v272;
  double v273;
  double v274;
  double v275;
  double v276;
  double v277;
  double v278;
  double *v279;
  double *v280;
  double v281;
  double v282;
  double v283;
  double *v284;
  double *v285;
  CGFloat v286;
  CGFloat v287;
  double v288;
  double v289;
  BOOL v290;
  uint64_t v291;
  uint64_t v292;
  double v293;
  double v294;
  BOOL v295;
  uint64_t v296;
  uint64_t v297;
  BOOL v298;
  char *v299;
  CFIndex v300;
  int64_t v301;
  const UInt8 *BytePtr;
  uint64_t v303;
  int v304;
  CFIndex v305;
  const UInt8 *v306;
  const void *v307;
  CFIndex v308;
  const UInt8 *v309;
  CFStringRef v310;
  int v311;
  CFIndex v312;
  uint64_t v313;
  CFIndex v314;
  BOOL v315;
  uint64_t v316;
  uint64_t v317;
  int v318;
  CFIndex v319;
  int v320;
  CFArrayRef *v321;
  CFArrayRef *v322;
  CFIndex v323;
  CFIndex v324;
  CFIndex v325;
  double v326;
  double *v327;
  double v328;
  double v329;
  double v330;
  double v331;
  double v332;
  double v333;
  CGFloat v334;
  CGFloat v335;
  CGFloat v336;
  double MinX;
  double v338;
  double v339;
  CFIndex v340;
  const __CFAttributedString *v341;
  CGRect *v342;
  double *p_x;
  CFDictionaryRef v344;
  double v345;
  double v346;
  double v347;
  double v348;
  const __CFNumber *v349;
  double v350;
  double v351;
  CFDictionaryRef v352;
  CFDictionaryRef v353;
  _QWORD *v354;
  const void *v355;
  double MaxX;
  CGFloat v357;
  double v358;
  double MinY;
  double v360;
  double v361;
  double v362;
  CGFloat v363;
  double v364;
  CGFloat v365;
  CGFloat v366;
  CGFloat v367;
  CGFloat v368;
  double v369;
  double v370;
  CFIndex v371;
  CFIndex v372;
  CFIndex v373;
  CGRect *v374;
  uint64_t v375;
  CFIndex v376;
  double v377;
  double v378;
  float64x2_t v379;
  const __CFAttributedString *v380;
  const __CFDictionary *v381;
  double v382;
  double v383;
  double v384;
  double v385;
  CFIndex v387;
  const __CFAttributedString *v388;
  CFIndex v389;
  const __CFDictionary *v390;
  CFDictionaryRef v391;
  CFDictionaryRef v392;
  const __CFDictionary *v393;
  CFDictionaryRef v394;
  CFDictionaryRef v395;
  CGFloat v396;
  CGFloat v397;
  CFIndex v398;
  const __CFAttributedString *v399;
  CFAttributedStringRef Copy;
  CFArrayRef v401;
  int v402;
  const __CFDictionary *v403;
  __int128 v404;
  double *v405;
  const void *v406;
  void *v407;
  const void *v408;
  __CFDictionary *theDict;
  double *v410;
  const __CTFrame *frame;
  double framea;
  CFDictionaryRef *v413;
  CGFloat v414;
  void *v415;
  uint64_t v416;
  CGFloat v417;
  double v418;
  double v419;
  double v420;
  const __CFString *v421;
  const __CFString *v422;
  const __CFString *v423;
  double v424;
  double v425;
  const __CFAllocator *alloc;
  CFArrayRef theArray;
  float64x2_t v428;
  float64x2_t v429;
  CGFloat v430;
  const __CFString *v431;
  const __CFString *v432;
  double v433;
  CFIndex range;
  CFIndex rangea;
  uint64_t range_8;
  double v437;
  double v438;
  double v439;
  double v440;
  const __CFString *v441;
  const __CFString *v442;
  const __CFString *v443;
  const __CFString *v444;
  const __CFDictionary *frameAttributes;
  _QWORD *v446;
  double cf;
  const __CTFrame *cfa;
  double v449;
  const CGPath *v450;
  const __CFString *v451;
  const __CTFramesetter *framesetter;
  CFIndex v453;
  uint64_t v454;
  int v455;
  const __CFString *v456;
  double v457;
  const __CFString *v458;
  int v459;
  uint64_t v460;
  int theData;
  const __CFData *theDataa;
  const __CFString *v463;
  int v464;
  int v465;
  const __CFString *v466;
  double v467;
  const __CFString *v468;
  CFStringRef v469;
  CFStringRef v470;
  const __CFString *theString2;
  CFStringRef theString2a;
  CFStringRef theString2b;
  double v474;
  float64x2_t v475;
  double v476;
  CFIndex v477;
  __int128 v478;
  BOOL v479;
  double v480;
  uint64_t v481;
  CFStringRef attrName[2];
  double attrNamea;
  int attrNameb;
  CFTypeRef value[2];
  const __CFNumber *valuea;
  double valueb;
  double valuec;
  int v489;
  double v490;
  CFIndex v491;
  double v492;
  __int128 v493;
  __int128 v494;
  char v495;
  double v496;
  CGFloat v497;
  __int128 v498;
  __int128 v499;
  CGAffineTransform v500;
  CGAffineTransform v501;
  CGAffineTransform v502;
  CFRange effectiveRange;
  int valuePtr;
  float64x2_t v505;
  __int128 v506;
  double v507;
  double v508;
  double v509;
  CGAffineTransform rect;
  CGAffineTransform v511;
  CFRange v512;
  int v513;
  CGFloat leading;
  CGFloat descent;
  CGFloat ascent;
  CFRange v517;
  CFRange v518;
  CFRange v519;
  CFRange v520;
  CFRange v521;
  CFRange v522;
  CFRange v523;
  CFRange v524;
  CFRange v525;
  CFRange v526;
  CFRange v527;
  CFRange v528;
  CFRange v529;
  CFRange v530;
  CFRange v531;
  CFRange v532;
  CFRange v533;
  CGSize v534;
  CGRect v535;
  CGRect v536;
  CGRect v537;
  CGRect BoundsWithOptions;
  CGRect v539;
  CGRect v540;
  CGRect v541;
  CGRect v542;
  CGRect v543;
  CGRect v544;
  CGRect v545;
  CGRect v546;
  CGRect v547;
  CGRect v548;
  CGRect v549;
  CGRect v550;
  CGRect v551;
  CGRect v552;
  CGRect v553;
  CGRect v554;
  CGRect v555;
  CGRect v556;
  CGRect v557;
  CGRect v558;
  CGRect v559;
  CGRect v560;
  CGRect v561;
  CGRect v562;
  CGRect v563;
  CGRect v564;
  CGRect v565;
  CGRect v566;
  CGRect v567;
  CGRect v568;
  CGRect v569;
  CGRect v570;
  CGRect v571;
  CGRect v572;
  CGRect v573;
  CGRect v574;
  CGRect v575;
  CGRect v576;
  CGRect v577;
  CGRect v578;
  CGRect v579;
  CGRect v580;

  v1 = a1;
  v2 = *(_QWORD *)a1;
  v3 = (const __CFDictionary *)*((_QWORD *)v1 + 1);
  v5 = v1[2];
  v4 = v1[3];
  v7 = v1[6];
  v6 = v1[7];
  *(_OWORD *)attrName = *((_OWORD *)v1 + 4);
  *(_OWORD *)value = *((_OWORD *)v1 + 2);
  v478 = *((_OWORD *)v1 + 5);
  v506 = *((_OWORD *)v1 + 6);
  v495 = *((_BYTE *)v1 + 112);
  v8 = *(double *)((char *)v1 + 116);
  v489 = *((_DWORD *)v1 + 31);
  v9 = (double *)*((_QWORD *)v1 + 16);
  v413 = (CFDictionaryRef *)*((_QWORD *)v1 + 17);
  v454 = v2;
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  valuePtr = 0;
  effectiveRange.length = 0;
  effectiveRange.location = 0;
  if (!*DerivedStorage)
  {
    v26 = 0;
    goto LABEL_483;
  }
  if (!v9)
  {
    v26 = FigSignalErrorAt();
    v27 = v413;
    if (v26)
      goto LABEL_481;
    goto LABEL_483;
  }
  v11 = v9;
  v12 = (double *)MEMORY[0x1E0C9D648];
  if (!v3)
  {
    v26 = -12090;
    v27 = v413;
    goto LABEL_480;
  }
  v13 = DerivedStorage;
  v410 = v9;
  v14 = (const __CFArray *)CFDictionaryGetValue(v3, CFSTR("SubtitleContent"));
  if (!v14 || !CFArrayGetCount(v14))
  {
    v26 = -12090;
    v27 = v413;
    v11 = v9;
    goto LABEL_480;
  }
  v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Count = CFDictionaryGetCount(v3);
  MutableCopy = CFDictionaryCreateMutableCopy(v15, Count, v3);
  if (!MutableCopy)
  {
    v26 = FigSignalErrorAt();
    goto LABEL_479;
  }
  v18 = MutableCopy;
  v20 = v8 < 1.0 && v8 != 0.0 || v8 == -1.0;
  v21 = fabs(v8);
  if (!v20)
    v21 = 0.9;
  v22 = vmulq_n_f64(*(float64x2_t *)value, v21);
  v424 = v22.f64[1];
  v425 = v4;
  v405 = v1;
  v428 = v22;
  if (v7 == 0.0 || v6 == 0.0)
  {
    v24 = *MEMORY[0x1E0C9BAA8];
    v25 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
    v23 = (float64x2_t *)(MEMORY[0x1E0C9BAA8] + 32);
    v6 = v22.f64[1];
    v7 = v22.f64[0];
  }
  else
  {
    v23 = (float64x2_t *)&v506;
    v25 = v478;
    v24 = *(_OWORD *)attrName;
  }
  v505 = *v23;
  *(_OWORD *)&rect.a = v24;
  *(_OWORD *)&rect.c = v25;
  *(float64x2_t *)&rect.tx = v505;
  v474 = v21;
  CGAffineTransformScale(&v511, &rect, v21, v21);
  a = v511.a;
  b = v511.b;
  c = v511.c;
  d = v511.d;
  v505 = *(float64x2_t *)&v511.tx;
  valuea = (const __CFNumber *)CFDictionaryGetValue(v18, CFSTR("SubtitleFormat"));
  CFNumberGetValue(valuea, kCFNumberSInt32Type, &valuePtr);
  v32 = CFDictionaryGetValue(v18, CFSTR("SubtitleExtendedLanguageTag"));
  if (!FigCFEqual())
  {
    v33 = (const void *)*((_QWORD *)v13 + 9);
    *((_QWORD *)v13 + 9) = v32;
    if (v32)
      CFRetain(v32);
    if (v33)
      CFRelease(v33);
    v13[80] = 1;
  }
  v34 = (const __CFArray *)CFDictionaryGetValue(v18, CFSTR("SubtitleContent"));
  v35 = CFDictionaryGetValue(v18, CFSTR("kFigSubtitleRenderer_ObeySubtitleFormatting"));
  v36 = CFArrayGetCount(v34);
  Mutable = CFArrayCreateMutable(v15, 0, MEMORY[0x1E0C9B378]);
  if (!Mutable || (v446 = malloc_type_calloc(v36, 0x98uLL, 0x1000040C7D30508uLL)) == 0)
  {
    v402 = FigSignalErrorAt();
    v403 = v18;
    goto LABEL_475;
  }
  v414 = v5;
  theDict = v18;
  v456 = (const __CFString *)*MEMORY[0x1E0CA2B40];
  v431 = (const __CFString *)*MEMORY[0x1E0CA2DE0];
  alloc = v15;
  theArray = Mutable;
  v408 = (const void *)*MEMORY[0x1E0C9AE50];
  if (v36 >= 1)
  {
    v38 = 0;
    range_8 = 0;
    v39 = v6 * d;
    v40 = v6 * c + a * v7;
    v41 = v39 + b * v7;
    v468 = (const __CFString *)*MEMORY[0x1E0CA2B20];
    theString2 = (const __CFString *)*MEMORY[0x1E0CA2DD8];
    v466 = (const __CFString *)*MEMORY[0x1E0CA2A88];
    v458 = (const __CFString *)*MEMORY[0x1E0CA2A80];
    v463 = (const __CFString *)*MEMORY[0x1E0CA2B48];
    v479 = v35 == (const void *)*MEMORY[0x1E0C9AE50];
    __asm { FMOV            V1.2D, #0.5 }
    v475 = vmulq_f64(vmulq_n_f64(v428, 1.0 - v474), _Q1);
    v45 = v454;
    while (1)
    {
      ValueAtIndex = (const __CFAttributedString *)CFArrayGetValueAtIndex(v34, v38);
      if (ValueAtIndex)
      {
        v47 = ValueAtIndex;
        if (CFAttributedStringGetLength(ValueAtIndex))
          break;
      }
LABEL_71:
      if (v36 == ++v38)
        goto LABEL_74;
    }
    v518.length = CFAttributedStringGetLength(v47);
    v518.location = 0;
    CFAttributedStringSetAttribute(v47, v518, CFSTR("kFigSubtitleRenderer_SourceFormat"), valuea);
    v48 = (float64x2_t *)&v446[19 * range_8];
    v48[6].f64[0] = a;
    v48[6].f64[1] = b;
    v48[7].f64[0] = c;
    v48[7].f64[1] = d;
    v48[8] = v505;
    v48->f64[0] = v5;
    v48->f64[1] = v425;
    v48[1] = v428;
    v48[2].f64[0] = v40;
    v48[2].f64[1] = v41;
    LODWORD(v48[9].f64[0]) = v489;
    if (valuePtr != 2021028980 && valuePtr != 2004251764)
    {
      v52 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
      *(_OWORD *)&rect.a = *MEMORY[0x1E0C9D628];
      *(_OWORD *)&rect.c = v52;
      v446[19 * range_8 + 11] = 0x3FECCCCCCCCCCCCDLL;
      v53 = (const __CFDictionary *)CFDictionaryGetValue(v18, CFSTR("kFigSubtitleRenderer_TextBox"));
      if (v53)
        CGRectMakeWithDictionaryRepresentation(v53, (CGRect *)&rect);
      v535.origin.x = rect.a;
      v535.origin.y = rect.b;
      v535.size.width = rect.c;
      v535.size.height = rect.d;
      v511.a = a;
      v511.b = b;
      v511.c = c;
      v511.d = d;
      *(float64x2_t *)&v511.tx = v505;
      v536 = CGRectApplyAffineTransform(v535, &v511);
      v54 = v446;
      v55 = range_8;
      v56 = (double *)&v446[19 * range_8];
      v57 = v536.origin.y + v536.size.height * 0.5;
      v56[8] = v40 * 0.5;
      goto LABEL_68;
    }
    v511.a = 50.0;
    rect.a = 100.0;
    LODWORD(v512.location) = 0;
    v517.location = 0xC059000000000000;
    Attribute = (const __CFString *)CFAttributedStringGetAttribute(v47, 0, v456, &effectiveRange);
    v50 = (const __CFNumber *)CFAttributedStringGetAttribute(v47, 0, v468, &effectiveRange);
    if (Attribute)
    {
      if (CFStringCompare(Attribute, theString2, 0) == kCFCompareEqualTo)
      {
        v511.a = 0.0;
        if (!v50)
          goto LABEL_41;
        goto LABEL_40;
      }
      v511.a = 100.0;
    }
    if (!v50)
    {
LABEL_41:
      v51 = (const __CFNumber *)CFAttributedStringGetAttribute(v47, 0, v466, &effectiveRange);
      rect.a = 100.0;
      if (Attribute)
      {
        if (CFStringCompare(Attribute, theString2, 0))
          rect.a = 0.0;
        else
          rect.a = 100.0;
      }
      v58 = (char *)&v446[19 * range_8];
      v58[80] = 0;
      v59 = v58 + 80;
      if (v51)
      {
        CFNumberGetValue(v51, kCFNumberCGFloatType, &rect);
        if (Attribute && CFStringCompare(Attribute, v431, 0) == kCFCompareEqualTo)
          rect.a = 100.0 - rect.a;
      }
      else
      {
        v60 = (const __CFNumber *)CFAttributedStringGetAttribute(v47, 0, v458, &effectiveRange);
        if (v60)
        {
          CFNumberGetValue(v60, kCFNumberIntType, &v512);
          *v59 = 1;
        }
      }
      v61 = (const __CFNumber *)CFAttributedStringGetAttribute(v47, 0, v463, &effectiveRange);
      if (v61)
        CFNumberGetValue(v61, kCFNumberCGFloatType, &v517);
      v55 = range_8;
      *(double *)&v446[19 * range_8 + 11] = *(double *)&v517.location / 100.0;
      if (Attribute)
      {
        Mutable = theArray;
        if (*v59)
          location_low = (double)SLODWORD(v512.location);
        else
          location_low = v40 * (rect.a / 100.0);
        v12 = (double *)MEMORY[0x1E0C9D648];
        v54 = v446;
        v57 = v41 * ((100.0 - v511.a) / 100.0);
        *(double *)&v446[19 * range_8 + 8] = location_low;
      }
      else
      {
        v12 = (double *)MEMORY[0x1E0C9D648];
        if (v51)
          v57 = v41 * ((100.0 - rect.a) / 100.0);
        else
          v57 = (double)SLODWORD(v512.location);
        v54 = v446;
        *(double *)&v446[19 * range_8 + 8] = v40 * (v511.a / 100.0);
        Mutable = theArray;
      }
      v56 = (double *)&v54[19 * range_8];
LABEL_68:
      v56[9] = v57;
      v63 = &v54[19 * v55];
      *((_BYTE *)v63 + 81) = v479;
      *((_BYTE *)v63 + 82) = v495;
      *((_DWORD *)v63 + 21) = valuePtr;
      *((float64x2_t *)v63 + 3) = v475;
      Length = CFAttributedStringGetLength(v47);
      v65 = CFAttributedStringCreateMutableCopy(alloc, Length, v47);
      if (v65)
      {
        v66 = v65;
        CFArrayAppendValue(Mutable, v65);
        CFRelease(v66);
        range_8 = v55 + 1;
      }
      v45 = v454;
      goto LABEL_71;
    }
LABEL_40:
    CFNumberGetValue(v50, kCFNumberCGFloatType, &v511);
    goto LABEL_41;
  }
  range_8 = 0;
  v45 = v454;
LABEL_74:
  v420 = *v12;
  v433 = v12[1];
  v437 = v12[3];
  v438 = v12[2];
  v444 = (const __CFString *)*MEMORY[0x1E0CA52B0];
  v422 = (const __CFString *)*MEMORY[0x1E0CA2970];
  v439 = *(double *)(MEMORY[0x1E0C9D820] + 8);
  v440 = *MEMORY[0x1E0C9D820];
  v407 = (void *)*MEMORY[0x1E0CA8578];
  v406 = (const void *)*MEMORY[0x1E0CA2A50];
  v415 = (void *)*MEMORY[0x1E0CA29C0];
  v443 = (const __CFString *)*MEMORY[0x1E0CA29D8];
  v419 = v5 + v428.f64[0];
  v67 = 1.0;
  v68 = 0.5;
  v432 = (const __CFString *)*MEMORY[0x1E0CA2B88];
  v423 = (const __CFString *)*MEMORY[0x1E0CA2B90];
  v442 = (const __CFString *)*MEMORY[0x1E0CA29E0];
  v451 = (const __CFString *)*MEMORY[0x1E0CA2BA0];
  v421 = (const __CFString *)*MEMORY[0x1E0CA2BB0];
  v441 = (const __CFString *)*MEMORY[0x1E0CA2BA8];
  v467 = 1.0;
  v69 = alloc;
  v70 = (char *)v446;
  do
  {
    while (1)
    {
      v416 = CMBaseObjectGetDerivedStorage();
      v453 = CFArrayGetCount(Mutable);
      if (v453 >= 1)
      {
        for (i = 0; i != v453; ++i)
        {
          v72 = (const __CFAttributedString *)CFArrayGetValueAtIndex(Mutable, i);
          v73 = &v70[152 * i];
          v74 = *((double *)v73 + 2);
          v75 = *((double *)v73 + 3);
          v76 = *((double *)v73 + 4);
          v77 = *((double *)v73 + 5);
          v469 = *((CFStringRef *)v73 + 7);
          theString2a = *((CFStringRef *)v73 + 6);
          valueb = *((double *)v73 + 8);
          v490 = *((double *)v73 + 9);
          v459 = v73[80];
          theData = v73[81];
          v464 = v73[82];
          v78 = *((_DWORD *)v73 + 21);
          v79 = *((double *)v73 + 11);
          v80 = *((double *)v73 + 13);
          v81 = *((double *)v73 + 15);
          v82 = *((_DWORD *)v73 + 36);
          v83 = CMBaseObjectGetDerivedStorage();
          v509 = 0.0;
          v507 = 0.0;
          *(_DWORD *)(v83 + 32) = v82;
          v480 = v75;
          v496 = v76;
          _NF = vabdd_f64(v76, v74) < 0.1;
          v457 = (v75 - v77) * v68;
          if (_NF)
            v85 = (v75 - v77) * v68;
          else
            v85 = 0.0;
          attrNamea = v85;
          if (_NF)
            v86 = 0.0;
          else
            v86 = (v74 - v76) * v68;
          v508 = v77 * 0.15 / 3.0;
          if (v78 != 1954034535)
          {
            v511.b = 0.0;
            v511.a = 0.0;
            v87 = (const __CFNumber *)CFAttributedStringGetAttribute(v72, 0, v444, (CFRange *)&v511);
            if (v87)
            {
              CFNumberGetValue(v87, kCFNumberCGFloatType, &v508);
              v508 = v80 + v81 * v508;
            }
            else
            {
              v135 = (const __CFNumber *)CFAttributedStringGetAttribute(v72, 0, v422, (CFRange *)&v511);
              if (v135)
              {
                rect.a = 0.0;
                CFNumberGetValue(v135, kCFNumberCGFloatType, &rect);
                if (*(_QWORD *)(v83 + 144) == 1)
                {
                  v89 = v77 * rect.a / 100.0;
                  if (v89 > 0.0)
                    goto LABEL_88;
                }
              }
            }
          }
          v88 = *(double *)(v83 + 280);
          v89 = v508;
          if (v88 > 0.0)
            v89 = v88 * v508;
LABEL_88:
          v509 = v467 * v89;
          v90 = attrNamea;
          v67 = 1.0;
          v91 = CFNumberCreate(v69, kCFNumberCGFloatType, &v509);
          v519.length = CFAttributedStringGetLength(v72);
          v519.location = 0;
          CFAttributedStringSetAttribute(v72, v519, CFSTR("kFigSubtitleRenderer_FontSizeToUse"), v91);
          CFRelease(v91);
          v92 = *(double *)(v83 + 280);
          v93 = v509;
          v94 = CMBaseObjectGetDerivedStorage();
          v476 = v86;
          if (!v72)
          {
            v134 = v437;
            v114 = v438;
            v99 = v496;
            goto LABEL_177;
          }
          v95 = v94;
          v96 = -v79;
          if (v79 >= 0.0)
            v96 = v79;
          v97 = v467 * v92;
          if (v92 <= 0.0)
            v97 = 1.0;
          v98 = v96 * v97;
          if (v98 > 1.0)
            v98 = 1.0;
          v507 = 0.0;
          v99 = v496;
          v100 = v496 * v98;
          v512.location = 0;
          v512.length = 0;
          v455 = subtitleRendererSetupText(v45, v72, 0, v93);
          v101 = (const __CFString *)CFAttributedStringGetAttribute(v72, 0, v456, &v512);
          v102 = v101;
          if (v101)
            v103 = v100;
          else
            v103 = v77;
          if (v101)
            v104 = v77;
          else
            v104 = v100;
          v105 = CFAttributedStringGetLength(v72);
          if (v105 < 1)
          {
            v134 = v439;
            v114 = v440;
            v45 = v454;
            v67 = 1.0;
            goto LABEL_173;
          }
          v106 = v105;
          framesetter = CTFramesetterCreateWithAttributedString(v72);
          if (!framesetter)
          {
            v45 = v454;
            v67 = 1.0;
LABEL_176:
            v114 = v99;
            v134 = v77;
            goto LABEL_177;
          }
          frameAttributes = createFrameAttributesDictionary(v102);
          if (!*(_DWORD *)(v95 + 28))
          {
            v136 = CFAttributedStringGetLength(v72);
            v137 = CGPathCreateMutable();
            v45 = v454;
            if (v137)
            {
              v138 = v137;
              width = 0.0;
              v541.origin.x = 0.0;
              v541.origin.y = 0.0;
              v541.size.width = v104;
              v541.size.height = v103;
              CGPathAddRect(v137, 0, v541);
              v521.location = 0;
              v521.length = v136;
              v450 = v138;
              v140 = CTFramesetterCreateFrame(framesetter, v521, v138, frameAttributes);
              v141 = 0.0;
              if (v140)
              {
                cfa = v140;
                Lines = CTFrameGetLines(v140);
                if (Lines)
                {
                  v143 = Lines;
                  v144 = CFArrayGetCount(Lines);
                  if (v144 >= 1)
                  {
                    rangea = v136;
                    descent = 0.0;
                    ascent = 0.0;
                    leading = 0.0;
                    v145 = v144;
                    v146 = (const __CTLine *)CFArrayGetValueAtIndex(v143, 0);
                    CTLineGetTypographicBounds(v146, &ascent, &descent, &leading);
                    v418 = ascent;
                    v147 = leading;
                    framea = descent;
                    v513 = 0;
                    v148 = (const __CFNumber *)CFDictionaryGetValue(frameAttributes, v407);
                    if (!v148 || (CFNumberGetValue(v148, kCFNumberSInt32Type, &v513), !v513))
                    {
                      v149 = 0;
                      v150 = v93 / 5.0;
                      v151 = v150;
                      do
                      {
                        v152 = (const __CTLine *)CFArrayGetValueAtIndex(v143, v149);
                        v153 = v143;
                        v154 = v145;
                        v155 = v152;
                        StringRange = CTLineGetStringRange(v152);
                        v517.location = 0;
                        v517.length = 0;
                        Attributes = CFAttributedStringGetAttributes(v72, StringRange.length + StringRange.location - 1, &v517);
                        v158 = CFDictionaryGetValue(Attributes, v406);
                        v159 = v155;
                        v145 = v154;
                        v143 = v153;
                        TypographicBounds = CTLineGetTypographicBounds(v159, &ascent, &descent, &leading);
                        if (v158 == v408)
                          v161 = v151;
                        else
                          v161 = 0.0;
                        v162 = TypographicBounds + v161;
                        if (width < v162)
                          width = v162;
                        ++v149;
                      }
                      while (v145 != v149);
                    }
                    v141 = v418 + framea + v147;
                    v69 = alloc;
                    v45 = v454;
                    v136 = rangea;
                  }
                }
                CFRelease(cfa);
                Mutable = theArray;
                v70 = (char *)v446;
              }
              CFRelease(v450);
              v163.location = 0;
            }
            else
            {
              v163.location = 0;
              width = 0.0;
              v141 = 0.0;
            }
            v507 = v141;
            v163.length = v136;
            v534.width = v104;
            v534.height = v103;
            v164 = CTFramesetterSuggestFrameSizeWithConstraints(framesetter, v163, 0, v534, 0);
            if (v164.width >= width)
              width = v164.width;
            v165 = CMBaseObjectGetDerivedStorage();
            v517.location = 0;
            v517.length = 0;
            v166 = CFAttributedStringGetAttributes(v72, 0, &v517);
            EdgeStyle = getEdgeStyle(*(_QWORD *)(v165 + 216), *(_QWORD *)(v165 + 352), v166, v415);
            if (EdgeStyle == 4)
            {
              v168 = v141 * 10.0 / 100.0;
              v67 = 1.0;
            }
            else
            {
              v67 = 1.0;
              if (EdgeStyle != 3)
              {
                v168 = 0.0;
                v90 = attrNamea;
                if (EdgeStyle == 2)
                {
                  v168 = v93 * 0.0882352941;
                  if (v93 > 60.0)
                    v168 = v168 / 1.5;
                }
LABEL_163:
                *(double *)&v517.location = v168;
                v169 = CFAttributedStringGetLength(v72);
                v170 = CFNumberCreate(v69, kCFNumberCGFloatType, &v517);
                if (v170)
                {
                  v171 = v170;
                  v522.location = 0;
                  v522.length = v169;
                  CFAttributedStringSetAttribute(v72, v522, CFSTR("kFigSubtitleRenderer_CompensationInTextLayout"), v170);
                  CFRelease(v171);
                }
                v114 = width + *(double *)&v517.location * 2.0;
                v113 = v164.height + *(double *)&v517.location * 2.0;
                v99 = v496;
                v109 = frameAttributes;
                if (!frameAttributes)
                  goto LABEL_172;
                goto LABEL_171;
              }
              v168 = v93 * 0.0882352941;
              if (v93 > 60.0)
                v168 = v93 * 0.0882352941 / 1.5;
            }
            v90 = attrNamea;
            goto LABEL_163;
          }
          v107 = CGPathCreateMutable();
          v45 = v454;
          if (v107)
          {
            v108 = v107;
            v537.origin.x = 0.0;
            v537.origin.y = 0.0;
            v537.size.width = v104;
            v537.size.height = v103;
            CGPathAddRect(v107, 0, v537);
            v520.location = 0;
            v520.length = v106;
            v109 = frameAttributes;
            v110 = CTFramesetterCreateFrame(framesetter, v520, v108, frameAttributes);
            if (v110)
            {
              v111 = v110;
              v112 = CTFrameGetLines(v110);
              v113 = v439;
              v114 = v440;
              v67 = 1.0;
              if (v112)
              {
                v115 = v112;
                v116 = CFArrayGetCount(v112);
                v113 = v439;
                v114 = v440;
                if (v116)
                {
                  v117 = v116;
                  frame = v111;
                  range = v116 - 1;
                  if (v116 < 1)
                  {
                    cf = 0.0;
                    v449 = 0.0;
                    v114 = v440;
                    v123 = 0.0;
                    v122 = 0.0;
                    v121 = 0.0;
                    v120 = 0.0;
                    v119 = 0.0;
                    v417 = 0.0;
                  }
                  else
                  {
                    v118 = 0;
                    v417 = 0.0;
                    v119 = 0.0;
                    v120 = 0.0;
                    v121 = 0.0;
                    v122 = 0.0;
                    v123 = 0.0;
                    cf = 0.0;
                    v449 = 0.0;
                    v124 = v440;
                    do
                    {
                      v125 = (const __CTLine *)CFArrayGetValueAtIndex(v115, v118);
                      if (!v125)
                        goto LABEL_122;
                      v126 = v125;
                      if (v118)
                      {
                        BoundsWithOptions = CTLineGetBoundsWithOptions(v125, 0x10uLL);
                        v114 = BoundsWithOptions.size.width;
                      }
                      else
                      {
                        v539 = CTLineGetBoundsWithOptions(v125, 0);
                        x = v539.origin.x;
                        y = v539.origin.y;
                        v129 = v539.size.width;
                        height = v539.size.height;
                        v580 = CTLineGetBoundsWithOptions(v126, 8uLL);
                        v540.origin.x = x;
                        v540.origin.y = y;
                        v540.size.width = v129;
                        v540.size.height = height;
                        BoundsWithOptions = CGRectUnion(v540, v580);
                        v114 = v131;
                        v121 = BoundsWithOptions.size.height;
                        v120 = v131;
                        v119 = BoundsWithOptions.origin.y;
                        v417 = BoundsWithOptions.origin.x;
                      }
                      if (range == v118)
                        v132 = BoundsWithOptions.size.height;
                      else
                        v132 = v449;
                      v133 = cf;
                      if (range == v118)
                        v133 = v114;
                      cf = v133;
                      v449 = v132;
                      if (range == v118)
                      {
                        v123 = BoundsWithOptions.origin.y;
                        v122 = BoundsWithOptions.origin.x;
                      }
                      if (v124 >= v114)
LABEL_122:
                        v114 = v124;
                      ++v118;
                      v124 = v114;
                    }
                    while (v117 != v118);
                  }
                  v507 = v121;
                  v517.location = 0;
                  v517.length = 0;
                  v111 = frame;
                  v523.location = 0;
                  v523.length = 1;
                  CTFrameGetLineOrigins(frame, v523, (CGPoint *)&v517);
                  CGAffineTransformMakeTranslation(&v511, 0.0, *(CGFloat *)&v517.length);
                  v542.origin.x = v417;
                  v542.origin.y = v119;
                  v542.size.width = v120;
                  v542.size.height = v121;
                  v543 = CGRectApplyAffineTransform(v542, &v511);
                  MaxY = CGRectGetMaxY(v543);
                  v524.location = range;
                  v524.length = 1;
                  CTFrameGetLineOrigins(frame, v524, (CGPoint *)&v517);
                  CGAffineTransformMakeTranslation(&rect, 0.0, *(CGFloat *)&v517.length);
                  v544.origin.x = v122;
                  v544.origin.y = v123;
                  v544.size.width = cf;
                  v544.size.height = v449;
                  v545 = CGRectApplyAffineTransform(v544, &rect);
                  v67 = 1.0;
                  v113 = MaxY - CGRectGetMinY(v545) + 1.0;
                  v90 = attrNamea;
                  v99 = v496;
                  v109 = frameAttributes;
                }
              }
              CFRelease(v111);
              Mutable = theArray;
              v45 = v454;
            }
            else
            {
              v455 = -12092;
              v113 = v439;
              v114 = v440;
              v67 = 1.0;
            }
            CFRelease(v108);
            v70 = (char *)v446;
            if (!v109)
              goto LABEL_172;
          }
          else
          {
            v113 = v439;
            v114 = v440;
            v109 = frameAttributes;
            v70 = (char *)v446;
            v67 = 1.0;
            if (!frameAttributes)
              goto LABEL_172;
          }
LABEL_171:
          CFRelease(v109);
LABEL_172:
          v134 = ceil(v113);
          CFRelease(framesetter);
LABEL_173:
          v173 = CFAttributedStringGetLength(v72);
          v174 = CFNumberCreate(v69, kCFNumberCGFloatType, &v507);
          if (v174)
          {
            v175 = v174;
            v525.location = 0;
            v525.length = v173;
            CFAttributedStringSetAttribute(v72, v525, CFSTR("kFigSubtitleRenderer_SuggestLineHeight"), v174);
            CFRelease(v175);
          }
          if (v455)
            goto LABEL_176;
LABEL_177:
          if (v78 != 1954034535)
          {
            v511.b = 0.0;
            v511.a = 0.0;
            v183 = (const __CFString *)CFAttributedStringGetAttribute(v72, 0, v456, (CFRange *)&v511);
            if (v183)
            {
              if (v459)
              {
                if (valueb <= 0.0)
                  v184 = -(valueb * v507);
                else
                  v184 = v99 - valueb * v507;
                valueb = v184;
              }
              v180 = v134;
              v134 = v114;
            }
            else
            {
              if (v459)
              {
                if (v490 <= 0.0)
                  v185 = -(v490 * v507);
                else
                  v185 = v77 - v490 * v507;
                v490 = v185;
              }
              v180 = v114;
            }
            v186 = (const __CFString *)CFAttributedStringGetAttribute(v72, 0, v443, (CFRange *)&v511);
            v181 = v476;
            if (v186)
            {
              v187 = v186;
              if (CFStringCompare(v186, v432, 0))
              {
                if (CFStringCompare(v187, v423, 0))
                  goto LABEL_195;
                if (v183)
                {
                  v178 = v476 + valueb + v180 * -0.5;
LABEL_203:
                  v179 = v433;
LABEL_210:
                  v192 = (const __CFString *)CFAttributedStringGetAttribute(v72, 0, v442, (CFRange *)&v511);
                  if (!v192)
                  {
                    TextAlignment = getTextAlignment(v72);
                    v194 = v451;
                    if (TextAlignment != 1)
                      v194 = v441;
                    if ((TextAlignment & 3) != 0)
                      v192 = v194;
                    else
                      v192 = v421;
                  }
                  if (CFStringCompare(v192, v451, 0))
                  {
                    if (CFStringCompare(v192, v441, 0))
                    {
                      v182 = *(double *)&v469;
                      v176 = *(double *)&theString2a;
                      if (v183)
                        v179 = v90 + v490 - v134;
                      else
                        v178 = v476 + valueb;
LABEL_226:
                      v177 = v496;
                      goto LABEL_227;
                    }
                    v195 = v476 + valueb + v180 * -0.5;
                    v196 = v90 + v490 + v134 * -0.5;
                  }
                  else
                  {
                    v195 = v476 + valueb - v180;
                    v196 = v90 + v490;
                  }
                  if (v183)
                    v179 = v196;
                  else
                    v178 = v195;
                  v182 = *(double *)&v469;
                  v176 = *(double *)&theString2a;
                  goto LABEL_226;
                }
                v179 = v90 + v490 + v134 * -0.5;
LABEL_209:
                v178 = v420;
                goto LABEL_210;
              }
              if (!v183)
              {
                v179 = v90 + v490;
                goto LABEL_209;
              }
              v191 = CFStringCompare(v183, v431, 0);
              v189 = v476 + valueb;
              v190 = 0.0;
              if (v191)
                v190 = v180;
            }
            else
            {
LABEL_195:
              if (!v183)
              {
                v179 = v90 + v490 - v134;
                goto LABEL_209;
              }
              v188 = CFStringCompare(v183, v431, 0);
              v189 = v476 + valueb;
              v190 = 0.0;
              if (v188 == kCFCompareEqualTo)
                v190 = v180;
            }
            v178 = v189 - v190;
            goto LABEL_203;
          }
          v176 = *(double *)&theString2a;
          v177 = v99;
          v178 = v99 * 0.5 + v476 - v114 * 0.5;
          v179 = v90 + v490 - v134 * 0.5;
          v180 = v114;
          v181 = v476;
          v182 = *(double *)&v469;
LABEL_227:
          if (v178 + v180 <= v177 + v181)
          {
            if (v178 < v181)
              v197 = v181;
            else
              v197 = v178;
          }
          else
          {
            v197 = v177 + v181 - v180;
          }
          v68 = 0.5;
          v198 = v77 + v90;
          if (v179 + v134 <= v77 + v90)
          {
            if (v179 < v90)
              v179 = v90;
          }
          else
          {
            v179 = v198 - v134;
          }
          v199 = v134 * 0.5;
          v200 = v134 * 0.5 + v179;
          if (v78 == 1954034535)
          {
            v201 = v480;
            v202 = v480 - v200;
            if (!theData)
              v202 = v134 * 0.5 + v179;
            v203 = v77 * 0.5;
            v204 = v77 * 0.5 + v90;
            if (v464)
            {
              if (v202 <= v204)
              {
                if (v457 >= v134)
                  v200 = v480 * 0.5 - v203 - v199;
                else
                  v200 = v134 * 0.5;
              }
              else
              {
                v200 = v480 * 0.5 + v203 + v199;
                if (v457 < v134)
                  v200 = v480 - v199;
              }
            }
            else if (v202 <= v204)
            {
              v200 = v90 + v199;
            }
            else
            {
              v200 = v198 - v199;
            }
          }
          else
          {
            v201 = v480;
          }
          v205 = v180 * 0.5 + v197;
          if (*(_DWORD *)(v83 + 32) == 1)
            v200 = v201 - v200;
          v546.origin.x = v176 + v205 - v180 * 0.5;
          v546.origin.y = v182 + v200 - v199;
          v546.size.width = v180;
          v546.size.height = v134;
          v547 = CGRectIntegral(v546);
          v206 = v547.origin.x;
          v207 = v547.origin.y;
          v208 = v547.size.width;
          v209 = v547.size.height;
          DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v547);
          v526.length = CFAttributedStringGetLength(v72);
          v526.location = 0;
          CFAttributedStringSetAttribute(v72, v526, CFSTR("kFigSubtitleRenderer_SuggestTextLayout"), DictionaryRepresentation);
          CFRelease(DictionaryRepresentation);
          if (*(double *)(CMBaseObjectGetDerivedStorage() + 264) > 0.0)
          {
            v511.b = 0.0;
            v511.a = 0.0;
            rect.a = 0.0;
            v211 = (const __CFNumber *)CFAttributedStringGetAttribute(v72, 0, CFSTR("kFigSubtitleRenderer_SuggestLineHeight"), (CFRange *)&v511);
            if (v211)
            {
              CFNumberGetValue(v211, kCFNumberCGFloatType, &rect);
              v212 = rect.a;
            }
            else
            {
              v212 = 0.0;
            }
            v548.origin.y = v207 - v212 / 20.0;
            v548.origin.x = v206 - v212 / 20.0;
            v213 = v212 / 10.0;
            v548.size.height = v209 + v213;
            v548.size.width = v208 + v213;
            v549 = CGRectIntegral(v548);
            v206 = v549.origin.x;
            v207 = v549.origin.y;
            v208 = v549.size.width;
            v209 = v549.size.height;
          }
          v550.origin.x = v206;
          v550.origin.y = v207;
          v550.size.width = v208;
          v550.size.height = v209;
          v214 = CGRectCreateDictionaryRepresentation(v550);
          if (v214)
          {
            v215 = v214;
            v527.length = CFAttributedStringGetLength(v72);
            v527.location = 0;
            CFAttributedStringSetAttribute(v72, v527, CFSTR("kFigSubtitleRenderer_SuggestLayout"), v215);
            CFRelease(v215);
          }
        }
      }
      v12 = (double *)MEMORY[0x1E0C9D648];
      v216 = v414;
      v217 = v425;
      if (*(_DWORD *)(v416 + 24) > 1u)
        goto LABEL_437;
      v218 = CMBaseObjectGetDerivedStorage();
      v219 = CFArrayGetCount(Mutable);
      if (v219 <= 1)
        goto LABEL_437;
      v220 = v219;
      v221 = CFArrayCreateMutable(v69, v219, 0);
      if (v221)
        break;
      v467 = v467 + -0.1;
      if (v467 <= 0.0)
        goto LABEL_437;
    }
    v222 = v221;
    v223 = 0;
    rect.b = 0.0;
    rect.a = 0.0;
    v225 = v425 + v424;
    v224 = v419;
    v226 = -1.0;
    do
    {
      v227 = *((_OWORD *)v12 + 1);
      *(_OWORD *)&v511.a = *(_OWORD *)v12;
      *(_OWORD *)&v511.c = v227;
      v228 = (const __CFAttributedString *)CFArrayGetValueAtIndex(Mutable, v223);
      v229 = (const __CFDictionary *)CFAttributedStringGetAttribute(v228, 0, CFSTR("kFigSubtitleRenderer_SuggestLayout"), (CFRange *)&rect);
      if (v229)
        CGRectMakeWithDictionaryRepresentation(v229, (CGRect *)&v511);
      v230 = malloc_type_calloc(1uLL, 0xC8uLL, 0x1020040DCB5435FuLL);
      if (!v230)
        goto LABEL_358;
      v231 = v230;
      *((_DWORD *)v230 + 48) = 0;
      v232 = CFArrayCreateMutable(v69, 0, 0);
      *((_QWORD *)v231 + 4) = v232;
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)((char *)v231 + 40) = _Q0;
      *(_OWORD *)((char *)v231 + 56) = _Q0;
      if (!v232)
      {
        free(v231);
LABEL_358:
        v311 = 1;
        v70 = (char *)v446;
        v45 = v454;
        goto LABEL_416;
      }
      v234 = *(_OWORD *)&v511.c;
      *v231 = *(_OWORD *)&v511.a;
      v231[1] = v234;
      CFArrayAppendValue(v222, v231);
      ++v223;
    }
    while (v220 != v223);
    v235 = *(_DWORD *)(v218 + 24);
    v481 = v220;
    if (v235 == 1)
    {
      v312 = CFArrayGetCount(v222);
      v313 = (v312 - 1) * v312;
      v70 = (char *)v446;
      v45 = v454;
      if (v313 >= 1)
      {
        v314 = CFArrayGetCount(v222);
        resetOverlaps(v222);
        surveyOverlaps(v222);
        if (v314 >= 1)
        {
          v315 = 0;
          v316 = v313 & ~(v313 >> 63);
          v317 = 1;
          while (1)
          {
            v318 = 0;
            v319 = 0;
            v320 = 0;
            do
            {
              v321 = (CFArrayRef *)CFArrayGetValueAtIndex(v222, v319);
              if (*((int *)v321 + 48) <= 0)
              {
                v322 = v321;
                if (CFArrayGetCount(v321[4]) >= 1)
                {
                  v323 = CFArrayGetCount(v322[4]);
                  if (v323 < 1)
                  {
                    v320 = 0;
                  }
                  else
                  {
                    v324 = v323;
                    v325 = 0;
                    v320 = 0;
                    v326 = *((double *)v322 + 1) + *((double *)v322 + 3) * v68;
                    do
                    {
                      v327 = (double *)CFArrayGetValueAtIndex(v322[4], v325);
                      v328 = v327[1];
                      v329 = v327[3] * v68;
                      v330 = v328 + v329;
                      v331 = v329 + *((double *)v322 + 3) * v68 - vabdd_f64(v326, v328 + v329);
                      if (v331 > 0.0 && !*((_DWORD *)v327 + 48))
                      {
                        if (v330 <= v326)
                          v332 = -v331;
                        else
                          v332 = v331;
                        v327[1] = v328 + v332;
                        v320 = 1;
                        *((_DWORD *)v327 + 48) = 1;
                      }
                      ++v325;
                    }
                    while (v324 != v325);
                  }
                  v315 = 1;
                  v318 = 1;
                }
              }
              ++v319;
            }
            while (v319 != v314);
            if (!v318 || v320)
            {
              v70 = (char *)v446;
              v45 = v454;
              if (!v318 || v317 == v316)
                goto LABEL_388;
            }
            else
            {
              resetNumMoves(v222);
              v70 = (char *)v446;
              v45 = v454;
              if (v317 == v316)
                goto LABEL_388;
            }
            ++v317;
            v314 = CFArrayGetCount(v222);
            resetOverlaps(v222);
            surveyOverlaps(v222);
            if (v314 <= 0)
              goto LABEL_388;
          }
        }
      }
      v315 = 0;
LABEL_388:
      sublayout_unionCFDataRects(v222);
      if (v333 <= v424)
      {
        v220 = v481;
        if (surveyOverlaps(v222))
        {
          v465 = 1;
          v12 = (double *)MEMORY[0x1E0C9D648];
          v69 = alloc;
        }
        else
        {
          v551.origin.x = sublayout_unionCFDataRects(v222);
          v334 = v551.origin.x;
          v335 = v551.origin.y;
          v336 = v551.size.width;
          v497 = v551.size.height;
          MinX = CGRectGetMinX(v551);
          v552.origin.x = v414;
          v552.origin.y = v425;
          v552.size.width = v428.f64[0];
          v552.size.height = v424;
          if (MinX >= CGRectGetMinX(v552))
          {
            v558.origin.x = v414;
            v558.origin.y = v425;
            v558.size.width = v428.f64[0];
            v558.size.height = v424;
            MaxX = CGRectGetMaxX(v558);
            v559.origin.x = v334;
            v559.origin.y = v335;
            v559.size.width = v336;
            v559.size.height = v497;
            v357 = CGRectGetMaxX(v559);
            v339 = 0.0;
            v12 = (double *)MEMORY[0x1E0C9D648];
            v69 = alloc;
            if (MaxX < v357)
            {
              v560.origin.x = v334;
              v560.origin.y = v335;
              v560.size.width = v336;
              v560.size.height = v497;
              v358 = CGRectGetMaxX(v560);
              v561.origin.x = v414;
              v561.origin.y = v425;
              v561.size.width = v428.f64[0];
              v561.size.height = v424;
              v339 = -(v358 - CGRectGetMaxX(v561));
            }
          }
          else
          {
            v553.origin.x = v414;
            v553.origin.y = v425;
            v553.size.width = v428.f64[0];
            v553.size.height = v424;
            v338 = CGRectGetMinX(v553);
            v554.origin.x = v334;
            v554.origin.y = v335;
            v554.size.width = v336;
            v554.size.height = v497;
            v339 = v338 - CGRectGetMinX(v554);
            v12 = (double *)MEMORY[0x1E0C9D648];
            v69 = alloc;
          }
          v562.origin.x = v334;
          v562.origin.y = v335;
          v562.size.width = v336;
          v562.size.height = v497;
          MinY = CGRectGetMinY(v562);
          v563.origin.x = v414;
          v563.origin.y = v425;
          v563.size.width = v428.f64[0];
          v563.size.height = v424;
          if (MinY >= CGRectGetMinY(v563))
          {
            v566.origin.x = v414;
            v566.origin.y = v425;
            v566.size.width = v428.f64[0];
            v566.size.height = v424;
            v362 = CGRectGetMaxY(v566);
            v567.origin.x = v334;
            v567.origin.y = v335;
            v567.size.width = v336;
            v567.size.height = v497;
            v363 = CGRectGetMaxY(v567);
            v361 = 0.0;
            if (v362 < v363)
            {
              v568.origin.x = v334;
              v568.origin.y = v335;
              v568.size.width = v336;
              v568.size.height = v497;
              v364 = CGRectGetMaxY(v568);
              v569.origin.x = v414;
              v569.origin.y = v425;
              v569.size.width = v428.f64[0];
              v569.size.height = v424;
              v361 = -(v364 - CGRectGetMaxY(v569));
            }
          }
          else
          {
            v564.origin.x = v414;
            v564.origin.y = v425;
            v564.size.width = v428.f64[0];
            v564.size.height = v424;
            v360 = CGRectGetMinY(v564);
            v565.origin.x = v334;
            v565.origin.y = v335;
            v565.size.width = v336;
            v565.size.height = v497;
            v361 = v360 - CGRectGetMinY(v565);
          }
          v570.origin.x = v334;
          v570.origin.y = v335;
          v570.size.width = v336;
          v570.size.height = v497;
          v571 = CGRectOffset(v570, v339, v361);
          v365 = v571.origin.x;
          v366 = v571.origin.y;
          v367 = v571.size.width;
          v368 = v571.size.height;
          v492 = CGRectGetMinX(v571);
          v572.origin.x = v334;
          v572.origin.y = v335;
          v572.size.width = v336;
          v572.size.height = v497;
          valuec = CGRectGetMinX(v572);
          v573.origin.x = v365;
          v573.origin.y = v366;
          v573.size.width = v367;
          v573.size.height = v368;
          v369 = CGRectGetMinY(v573);
          v574.origin.x = v334;
          v574.origin.y = v335;
          v574.size.width = v336;
          v574.size.height = v497;
          v370 = CGRectGetMinY(v574);
          v371 = CFArrayGetCount(v222);
          v68 = 0.5;
          if (v371 < 1)
          {
            v465 = 0;
            v216 = v414;
            v217 = v425;
            v45 = v454;
            v67 = 1.0;
          }
          else
          {
            v372 = v371;
            v373 = 0;
            v67 = 1.0;
            do
            {
              v374 = (CGRect *)CFArrayGetValueAtIndex(v222, v373);
              *v374 = CGRectOffset(*v374, v492 - valuec, v369 - v370);
              ++v373;
            }
            while (v372 != v373);
            v465 = 0;
            v216 = v414;
            v217 = v425;
            v70 = (char *)v446;
            v45 = v454;
          }
        }
      }
      else
      {
        v465 = 1;
        v12 = (double *)MEMORY[0x1E0C9D648];
        v69 = alloc;
        v220 = v481;
      }
      goto LABEL_400;
    }
    v70 = (char *)v446;
    v45 = v454;
    if (v235 || (v236 = CFArrayGetCount(v222), (theDataa = CFDataCreateMutable(v69, 0)) == 0))
    {
      v311 = 1;
      goto LABEL_416;
    }
    v460 = (v236 - 1) * v236;
    if (v460 < 1)
    {
      v470 = 0;
LABEL_393:
      v465 = 1;
      goto LABEL_399;
    }
    v470 = 0;
    theString2b = (CFStringRef)v222;
    while (1)
    {
      resetOverlaps(v222);
      v465 = surveyOverlaps(v222);
      if (!v465)
      {
        v465 = 0;
        v470 = (CFStringRef)((char *)v470 + 1);
        goto LABEL_399;
      }
      v237 = CFArrayGetCount(v222);
      if (v237 >= 1)
      {
        for (j = 0; j != v237; ++j)
        {
          v239 = (CGFloat *)CFArrayGetValueAtIndex(v222, j);
          v239[5] = v414;
          v239[6] = v224;
          v239[7] = v225;
          v239[8] = v217;
        }
      }
      v240 = CFArrayCreateMutableCopy(v69, 0, v222);
      if (v240)
      {
        v241 = v240;
        v528.location = 0;
        v528.length = v237;
        CFArraySortValues(v240, v528, (CFComparatorFunction)objComparatorX, 0);
        v242 = (double *)CFArrayGetValueAtIndex(v241, 0);
        v243 = v242;
        v242[5] = v414;
        if (v237 >= 2)
        {
          for (k = 1; k != v237; ++k)
          {
            v242 = (double *)CFArrayGetValueAtIndex(v241, k);
            v245 = v242[2] * v68;
            v246 = v243[2] * v68;
            v243[6] = v246 + *v242 + v245 + v226;
            v242[5] = v246 + *v243 + v67 - v245;
            v243 = v242;
          }
        }
        v242[6] = v224;
        v529.location = 0;
        v529.length = v237;
        CFArraySortValues(v241, v529, (CFComparatorFunction)objComparatorY, 0);
        v247 = (double *)CFArrayGetValueAtIndex(v241, 0);
        v248 = v247;
        v247[8] = v217;
        if (v237 >= 2)
        {
          for (m = 1; m != v237; ++m)
          {
            v247 = (double *)CFArrayGetValueAtIndex(v241, m);
            v250 = v247[3] * v68;
            v251 = v248[3] * v68;
            v248[7] = v251 + v247[1] + v250 + v226;
            v247[8] = v251 + v248[1] + v67 - v250;
            v248 = v247;
          }
        }
        v247[7] = v225;
        CFRelease(v241);
        v70 = (char *)v446;
      }
      v252 = CFArrayGetCount(v222);
      if (v252 < 1)
      {
        v465 = 1;
        v45 = v454;
        goto LABEL_399;
      }
      v253 = v252;
      attrNameb = 0;
      v254 = 0;
      v255 = -1;
      v256 = 0.0;
      v45 = v454;
      v477 = v252;
      do
      {
        v257 = (char *)CFArrayGetValueAtIndex(v222, v254);
        if (!v257)
          goto LABEL_331;
        v258 = v257;
        if (*((int *)v257 + 48) > 0)
        {
          attrNameb = 1;
          goto LABEL_331;
        }
        v491 = v255;
        v260 = *((double *)v257 + 5);
        v259 = *((double *)v257 + 6);
        v261 = *((double *)v257 + 7);
        v262 = *((double *)v257 + 8);
        v263 = CFArrayGetCount(*((CFArrayRef *)v257 + 4));
        if (v263 >= 1)
        {
          v264 = v263;
          v265 = 0;
          v266 = *(double *)v258 + *((double *)v258 + 2) * 0.5;
          v267 = (double *)(v258 + 96);
          v268 = (double *)(v258 + 72);
          v269 = *((double *)v258 + 1) + *((double *)v258 + 3) * 0.5;
          v270 = (double *)(v258 + 128);
          v271 = (double *)(v258 + 152);
          do
          {
            v272 = (double *)CFArrayGetValueAtIndex(*((CFArrayRef *)v258 + 4), v265);
            v273 = v272[3];
            v274 = v272[2] * 0.5;
            v275 = v272[1];
            v276 = *v272 + v274;
            v277 = *((double *)v258 + 3);
            v278 = v274 + *((double *)v258 + 2) * 0.5 - vabdd_f64(v266, v276);
            if (v266 >= v276)
            {
              v279 = (double *)(v258 + 96);
              v280 = (double *)(v258 + 112);
              if (*v267 == 0.0 || (v279 = (double *)(v258 + 96), v280 = (double *)(v258 + 112), v278 < *v267))
LABEL_302:
                *v279 = v278;
            }
            else
            {
              v279 = (double *)(v258 + 72);
              v280 = (double *)(v258 + 88);
              if (*v268 == 0.0)
                goto LABEL_302;
              v279 = (double *)(v258 + 72);
              v280 = (double *)(v258 + 88);
              if (v278 < *v268)
                goto LABEL_302;
            }
            v281 = v273 * 0.5;
            v282 = v275 + v281;
            v283 = v281 + v277 * 0.5 - vabdd_f64(v269, v275 + v281);
            *v280 = v283 + *v280;
            if (v269 >= v282)
            {
              v284 = (double *)(v258 + 128);
              v285 = (double *)(v258 + 136);
              if (*v270 != 0.0)
              {
                v284 = (double *)(v258 + 128);
                v285 = (double *)(v258 + 136);
                if (v283 >= *v270)
                  goto LABEL_310;
              }
            }
            else
            {
              v284 = (double *)(v258 + 152);
              v285 = (double *)(v258 + 160);
              if (*v271 != 0.0)
              {
                v284 = (double *)(v258 + 152);
                v285 = (double *)(v258 + 160);
                if (v283 >= *v271)
                  goto LABEL_310;
              }
            }
            *v284 = v283;
LABEL_310:
            *v285 = v278 + *v285;
            ++v265;
          }
          while (v264 != v265);
        }
        v286 = v259 - v260;
        v287 = v261 - v262;
        *((double *)v258 + 9) = -*((double *)v258 + 9);
        *((double *)v258 + 19) = -*((double *)v258 + 19);
        fcr_validateMove((CGRect *)v258, (uint64_t)(v258 + 72), v260, v262, v286, v287);
        fcr_validateMove((CGRect *)v258, (uint64_t)(v258 + 96), v260, v262, v286, v287);
        fcr_validateMove((CGRect *)v258, (uint64_t)(v258 + 144), v260, v262, v286, v287);
        fcr_validateMove((CGRect *)v258, (uint64_t)(v258 + 120), v260, v262, v286, v287);
        v288 = *((double *)v258 + 11);
        v289 = *((double *)v258 + 14);
        v290 = v288 <= v289;
        if (v288 <= v289)
          v288 = *((double *)v258 + 14);
        v291 = 96;
        if (!v290)
          v291 = 72;
        v292 = *(_QWORD *)&v258[v291];
        v293 = *((double *)v258 + 17);
        v294 = *((double *)v258 + 20);
        v295 = v293 <= v294;
        if (v293 <= v294)
          v293 = *((double *)v258 + 20);
        v296 = 152;
        if (!v295)
          v296 = 128;
        v297 = *(_QWORD *)&v258[v296];
        if (v288 > 0.0 || v293 > 0.0)
        {
          v298 = v288 > 0.0 && *((double *)v258 + 2) < *((double *)v258 + 3);
          v69 = alloc;
          v70 = (char *)v446;
          v45 = v454;
          v225 = v425 + v424;
          v224 = v419;
          v67 = 1.0;
          v68 = 0.5;
          v226 = -1.0;
          v220 = v481;
          v255 = v491;
          v253 = v477;
          if (v298)
          {
            *((_QWORD *)v258 + 21) = v292;
            *((_QWORD *)v258 + 22) = 0;
            *((double *)v258 + 23) = v288;
          }
          else
          {
            *((_QWORD *)v258 + 21) = 0;
            v288 = v293;
            *((_QWORD *)v258 + 22) = v297;
            *((double *)v258 + 23) = v293;
          }
          v222 = (__CFArray *)theString2b;
        }
        else
        {
          *((_QWORD *)v258 + 21) = 0;
          *((_QWORD *)v258 + 22) = 0;
          v288 = 0.0;
          *((_QWORD *)v258 + 23) = 0;
          v69 = alloc;
          v70 = (char *)v446;
          v45 = v454;
          v225 = v425 + v424;
          v224 = v419;
          v67 = 1.0;
          v68 = 0.5;
          v226 = -1.0;
          v222 = (__CFArray *)theString2b;
          v253 = v477;
          v220 = v481;
          v255 = v491;
        }
        if (v256 < v288)
        {
          v255 = v254;
          v256 = v288;
        }
LABEL_331:
        ++v254;
      }
      while (v254 != v253);
      if (v256 > 0.0)
        break;
      v12 = (double *)MEMORY[0x1E0C9D648];
      v217 = v425;
      if (!attrNameb)
        goto LABEL_393;
      resetNumMoves(v222);
      v310 = (CFStringRef)((char *)v470 - 1);
LABEL_355:
      v470 = (CFStringRef)((char *)&v310->isa + 1);
      if ((uint64_t)&v310->isa + 1 >= v460)
        goto LABEL_399;
    }
    v299 = (char *)CFArrayGetValueAtIndex(v222, v255);
    v12 = (double *)MEMORY[0x1E0C9D648];
    v217 = v425;
    if (v299)
    {
      *(float64x2_t *)v299 = vaddq_f64(*(float64x2_t *)(v299 + 168), *(float64x2_t *)v299);
      ++*((_DWORD *)v299 + 48);
    }
    v300 = CFArrayGetCount(v222);
    if (!v300)
      goto LABEL_353;
    v301 = CFDataGetLength(theDataa) / (unint64_t)(200 * v300);
    if (v301 < 1)
    {
LABEL_347:
      if (v300 < 1)
      {
LABEL_353:
        v45 = v454;
        v220 = v481;
      }
      else
      {
        v308 = 0;
        v220 = v481;
        do
        {
          v309 = (const UInt8 *)CFArrayGetValueAtIndex(v222, v308);
          CFDataAppendBytes(theDataa, v309, 200);
          ++v308;
        }
        while (v300 != v308);
        v45 = v454;
      }
      v310 = v470;
      goto LABEL_355;
    }
    BytePtr = CFDataGetBytePtr(theDataa);
    v303 = 0;
    while (1)
    {
      if (v300 < 1)
      {
        v304 = 0;
      }
      else
      {
        v304 = 0;
        v305 = 0;
        v306 = BytePtr;
        do
        {
          v307 = CFArrayGetValueAtIndex(v222, v305);
          if (!memcmp(v306, v307, 0xC8uLL))
            ++v304;
          ++v305;
          v306 += 200;
        }
        while (v300 != v305);
      }
      if (v300 == v304)
        break;
      ++v303;
      BytePtr += 200 * v300;
      v69 = alloc;
      v70 = (char *)v446;
      if (v303 == v301)
        goto LABEL_347;
    }
    v465 = 1;
    v69 = alloc;
    v70 = (char *)v446;
    v45 = v454;
    v220 = v481;
LABEL_399:
    CFRelease(theDataa);
    v315 = (uint64_t)v470 > 1;
LABEL_400:
    if (v315)
    {
      v340 = 0;
      Mutable = theArray;
      do
      {
        v341 = (const __CFAttributedString *)CFArrayGetValueAtIndex(Mutable, v340);
        v342 = (CGRect *)CFArrayGetValueAtIndex(v222, v340);
        if (v341)
        {
          p_x = &v342->origin.x;
          if (v342)
          {
            v344 = CGRectCreateDictionaryRepresentation(*v342);
            v530.length = CFAttributedStringGetLength(v341);
            v530.location = 0;
            CFAttributedStringSetAttribute(v341, v530, CFSTR("kFigSubtitleRenderer_SuggestLayout"), v344);
            CFRelease(v344);
            v345 = *p_x;
            v346 = p_x[1];
            v347 = p_x[2];
            v348 = p_x[3];
            if (*(double *)(CMBaseObjectGetDerivedStorage() + 264) <= 0.0)
            {
              Mutable = theArray;
            }
            else
            {
              v511.b = 0.0;
              v511.a = 0.0;
              v517.location = 0;
              v349 = (const __CFNumber *)CFAttributedStringGetAttribute(v341, 0, CFSTR("kFigSubtitleRenderer_SuggestLineHeight"), (CFRange *)&v511);
              if (v349)
              {
                CFNumberGetValue(v349, kCFNumberCGFloatType, &v517);
                v350 = *(double *)&v517.location;
              }
              else
              {
                v350 = 0.0;
              }
              Mutable = theArray;
              v555.origin.y = v346 + v350 / 20.0;
              v555.origin.x = v345 + v350 / 20.0;
              v351 = v350 / 10.0;
              v555.size.height = v348 - v351;
              v555.size.width = v347 - v351;
              v556 = CGRectIntegral(v555);
              v345 = v556.origin.x;
              v346 = v556.origin.y;
              v347 = v556.size.width;
              v348 = v556.size.height;
            }
            v557.origin.x = v345;
            v557.origin.y = v346;
            v557.size.width = v347;
            v557.size.height = v348;
            v352 = CGRectCreateDictionaryRepresentation(v557);
            v217 = v425;
            if (v352)
            {
              v353 = v352;
              v531.length = CFAttributedStringGetLength(v341);
              v531.location = 0;
              CFAttributedStringSetAttribute(v341, v531, CFSTR("kFigSubtitleRenderer_SuggestTextLayout"), v353);
              CFRelease(v353);
            }
          }
        }
        ++v340;
      }
      while (v220 != v340);
      v70 = (char *)v446;
      v45 = v454;
    }
    else
    {
      Mutable = theArray;
    }
    v311 = v465;
LABEL_416:
    if (CFArrayGetCount(v222) >= 1)
    {
      do
      {
        v354 = CFArrayGetValueAtIndex(v222, 0);
        CFArrayRemoveValueAtIndex(v222, 0);
        if (v354)
        {
          v355 = (const void *)v354[4];
          if (v355)
            CFRelease(v355);
          free(v354);
        }
      }
      while (CFArrayGetCount(v222) > 0);
    }
    CFRelease(v222);
    if (!v311)
      break;
    v467 = v467 + -0.1;
  }
  while (v467 > 0.0);
LABEL_437:
  v375 = range_8;
  if (range_8 < 1)
  {
    v378 = 0.0;
    v377 = 0.0;
    v379.f64[0] = v428.f64[0];
  }
  else
  {
    v376 = 0;
    v377 = 0.0;
    v493 = *((_OWORD *)v12 + 1);
    v498 = *(_OWORD *)v12;
    v378 = 0.0;
    v379 = v428;
    do
    {
      v429 = v379;
      v380 = (const __CFAttributedString *)CFArrayGetValueAtIndex(Mutable, v376);
      *(_OWORD *)&v511.a = v498;
      *(_OWORD *)&v511.c = v493;
      v381 = (const __CFDictionary *)CFAttributedStringGetAttribute(v380, 0, CFSTR("kFigSubtitleRenderer_SuggestLayout"), &effectiveRange);
      if (v381)
        CGRectMakeWithDictionaryRepresentation(v381, (CGRect *)&v511);
      v379 = v429;
      if (v511.a < v429.f64[0])
        v379.f64[0] = v511.a;
      if (v511.a + v511.c > v378)
        v378 = v511.a + v511.c;
      v382 = v424;
      if (v511.b < v424)
        v382 = v511.b;
      v424 = v382;
      if (v511.b + v511.d > v377)
        v377 = v511.b + v511.d;
      ++v376;
      v375 = range_8;
    }
    while (range_8 != v376);
  }
  v383 = v378 - v379.f64[0];
  v384 = v424;
  v385 = v377 - v424;
  *v410 = v379.f64[0];
  v410[1] = v424;
  v410[2] = v383;
  v410[3] = v385;
  if (v216 != *MEMORY[0x1E0C9D538] || v217 != *(double *)(MEMORY[0x1E0C9D538] + 8))
  {
    if (v375 >= 1)
    {
      v387 = 0;
      v494 = *((_OWORD *)v12 + 1);
      v499 = *(_OWORD *)v12;
      do
      {
        v388 = (const __CFAttributedString *)CFArrayGetValueAtIndex(Mutable, v387);
        v389 = CFAttributedStringGetLength(v388);
        *(_OWORD *)&v511.a = v499;
        *(_OWORD *)&v511.c = v494;
        *(_OWORD *)&rect.a = v499;
        *(_OWORD *)&rect.c = v494;
        v390 = (const __CFDictionary *)CFAttributedStringGetAttribute(v388, 0, CFSTR("kFigSubtitleRenderer_SuggestLayout"), &effectiveRange);
        if (v390)
          CGRectMakeWithDictionaryRepresentation(v390, (CGRect *)&v511);
        CGAffineTransformMakeTranslation(&v502, v216, v217);
        v575.origin.x = v511.a;
        v575.origin.y = v511.b;
        v575.size.width = v511.c;
        v575.size.height = v511.d;
        v576 = CGRectApplyAffineTransform(v575, &v502);
        v511.a = v576.origin.x;
        v511.b = v576.origin.y;
        v511.c = v576.size.width;
        v511.d = v576.size.height;
        v391 = CGRectCreateDictionaryRepresentation(v576);
        if (v391)
        {
          v392 = v391;
          v532.location = 0;
          v532.length = v389;
          CFAttributedStringSetAttribute(v388, v532, CFSTR("kFigSubtitleRenderer_SuggestLayout"), v391);
          CFRelease(v392);
        }
        v393 = (const __CFDictionary *)CFAttributedStringGetAttribute(v388, 0, CFSTR("kFigSubtitleRenderer_SuggestTextLayout"), &effectiveRange);
        if (v393)
          CGRectMakeWithDictionaryRepresentation(v393, (CGRect *)&rect);
        CGAffineTransformMakeTranslation(&v501, v216, v217);
        v577.origin.x = rect.a;
        v577.origin.y = rect.b;
        v577.size.width = rect.c;
        v577.size.height = rect.d;
        v578 = CGRectApplyAffineTransform(v577, &v501);
        rect.a = v578.origin.x;
        rect.b = v578.origin.y;
        rect.c = v578.size.width;
        rect.d = v578.size.height;
        v394 = CGRectCreateDictionaryRepresentation(v578);
        if (v394)
        {
          v395 = v394;
          v533.location = 0;
          v533.length = v389;
          CFAttributedStringSetAttribute(v388, v533, CFSTR("kFigSubtitleRenderer_SuggestTextLayout"), v394);
          CFRelease(v395);
        }
        ++v387;
      }
      while (range_8 != v387);
      v379.f64[0] = *v410;
      v384 = v410[1];
      v383 = v410[2];
      v385 = v410[3];
    }
    v430 = v379.f64[0];
    v396 = v217;
    v397 = v384;
    CGAffineTransformMakeTranslation(&v500, v216, v396);
    v579.origin.x = v430;
    v579.origin.y = v397;
    v579.size.width = v383;
    v579.size.height = v385;
    CGRectApplyAffineTransform(v579, &v500);
    v375 = range_8;
  }
  if (v375 >= 1)
  {
    v398 = 0;
    do
    {
      v399 = (const __CFAttributedString *)CFArrayGetValueAtIndex(Mutable, v398);
      Copy = CFAttributedStringCreateCopy(v69, v399);
      CFArraySetValueAtIndex(Mutable, v398, Copy);
      if (Copy)
        CFRelease(Copy);
      ++v398;
    }
    while (range_8 != v398);
  }
  v401 = CFArrayCreateCopy(v69, Mutable);
  CFDictionarySetValue(theDict, CFSTR("SubtitleContent"), v401);
  *v413 = CFDictionaryCreateCopy(v69, theDict);
  free(v70);
  CFRelease(theDict);
  v402 = 0;
  v26 = 0;
  v403 = v401;
  if (v401)
  {
LABEL_475:
    CFRelease(v403);
    v26 = v402;
  }
  if (Mutable)
    CFRelease(Mutable);
  v1 = v405;
LABEL_479:
  v27 = v413;
  v11 = v410;
  if (v26)
  {
LABEL_480:
    v404 = *((_OWORD *)v12 + 1);
    *(_OWORD *)v11 = *(_OWORD *)v12;
    *((_OWORD *)v11 + 1) = v404;
LABEL_481:
    if (v27)
      *v27 = 0;
  }
LABEL_483:
  **((_DWORD **)v1 + 18) = v26;
}

void resetOverlaps(const __CFArray *a1)
{
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  __CFArray **ValueAtIndex;
  __CFArray **v11;
  __CFArray *v12;
  __int128 v13;

  if (a1)
  {
    Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      v3 = Count;
      v4 = 0;
      __asm { FMOV            V0.2D, #-1.0 }
      v13 = _Q0;
      do
      {
        ValueAtIndex = (__CFArray **)CFArrayGetValueAtIndex(a1, v4);
        if (ValueAtIndex)
        {
          v11 = ValueAtIndex;
          v12 = ValueAtIndex[4];
          if (v12)
            CFArrayRemoveAllValues(v12);
          *(_OWORD *)(v11 + 5) = v13;
          *(_OWORD *)(v11 + 7) = v13;
          v11[22] = 0;
          v11[23] = 0;
          v11[21] = 0;
          *(_OWORD *)(v11 + 9) = 0u;
          *(_OWORD *)(v11 + 11) = 0u;
          *(_OWORD *)(v11 + 13) = 0u;
          *(_OWORD *)(v11 + 15) = 0u;
          *(_OWORD *)(v11 + 17) = 0u;
          *(_OWORD *)(v11 + 19) = 0u;
        }
        ++v4;
      }
      while (v3 != v4);
    }
  }
}

uint64_t surveyOverlaps(const __CFArray *a1)
{
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  CFIndex v5;
  unsigned __int8 v6;
  CFIndex v7;
  double *ValueAtIndex;
  double *v9;
  CFIndex v10;
  double *v11;
  double *v12;

  if (a1 && (Count = CFArrayGetCount(a1), v3 = Count - 2, Count >= 2))
  {
    v4 = Count;
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = v5;
      ValueAtIndex = (double *)CFArrayGetValueAtIndex(a1, v5++);
      if (ValueAtIndex && v5 < v4)
      {
        v9 = ValueAtIndex;
        v10 = v5;
        do
        {
          v11 = (double *)CFArrayGetValueAtIndex(a1, v10);
          if (v11)
          {
            v12 = v11;
            if (vabdd_f64(*v9 + v9[2] * 0.5, *v11 + v11[2] * 0.5) < v9[2] * 0.5 + v11[2] * 0.5 + -3.0
              && vabdd_f64(v9[1] + v9[3] * 0.5, v11[1] + v11[3] * 0.5) < v11[3] * 0.5 + v9[3] * 0.5 + -3.0)
            {
              CFArrayAppendValue(*((CFMutableArrayRef *)v9 + 4), v11);
              CFArrayAppendValue(*((CFMutableArrayRef *)v12 + 4), v9);
              v6 = 1;
            }
          }
          ++v10;
        }
        while (v4 != v10);
      }
    }
    while (v7 != v3);
  }
  else
  {
    return 0;
  }
  return v6;
}

uint64_t resetNumMoves(const __CFArray *a1)
{
  uint64_t result;
  uint64_t v3;
  CFIndex i;

  result = CFArrayGetCount(a1);
  if (result >= 1)
  {
    v3 = result;
    for (i = 0; i != v3; ++i)
    {
      result = (uint64_t)CFArrayGetValueAtIndex(a1, i);
      *(_DWORD *)(result + 192) = 0;
    }
  }
  return result;
}

uint64_t objComparatorX(double *a1, double *a2)
{
  double v2;
  double v3;

  v2 = *a1 + a1[2] * 0.5;
  v3 = *a2 + a2[2] * 0.5;
  if (v2 < v3)
    return -1;
  else
    return v2 > v3;
}

uint64_t objComparatorY(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;

  v2 = *(double *)(a1 + 8) + *(double *)(a1 + 24) * 0.5;
  v3 = *(double *)(a2 + 8) + *(double *)(a2 + 24) * 0.5;
  if (v2 < v3)
    return -1;
  else
    return v2 > v3;
}

double sublayout_unionCFDataRects(const __CFArray *a1)
{
  CGFloat y;
  double x;
  CGFloat height;
  CGFloat width;
  CFIndex Count;
  CFIndex v7;
  CFIndex i;
  CGRect v10;
  CGRect v11;
  CGRect v12;

  x = *MEMORY[0x1E0C9D628];
  y = *(double *)(MEMORY[0x1E0C9D628] + 8);
  width = *(double *)(MEMORY[0x1E0C9D628] + 16);
  height = *(double *)(MEMORY[0x1E0C9D628] + 24);
  Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    v7 = Count;
    for (i = 0; i != v7; ++i)
    {
      v12 = *(CGRect *)CFArrayGetValueAtIndex(a1, i);
      v10.origin.x = x;
      v10.origin.y = y;
      v10.size.width = width;
      v10.size.height = height;
      v11 = CGRectUnion(v10, v12);
      x = v11.origin.x;
      y = v11.origin.y;
      width = v11.size.width;
      height = v11.size.height;
    }
  }
  return x;
}

uint64_t FigCaptionRendererAVFLayoutRegionCreate(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t ProtocolVTable;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;

  *a3 = 0;
  if (!a2)
    return 4294950096;
  v18 = 0;
  MEMORY[0x19402F294](&FigCaptionRendererAVFLayoutRegionGetClassID_sRegisterFigCaptionRendererAVFLayoutRegionBaseTypeOnce, RegisterFigCaptionRendererAVFLayoutRegionBaseType);
  result = CMDerivedObjectCreate();
  if (!(_DWORD)result)
  {
    v7 = v18;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_QWORD *)(DerivedStorage + 8) = a2;
    *(_QWORD *)(DerivedStorage + 16) = a1;
    *(_BYTE *)(DerivedStorage + 40) = 1;
    v17 = 0;
    FigCaptionRendererFreeLayoutRegionCreate(a1, a2, &v17);
    v9 = v17;
    *(_QWORD *)DerivedStorage = v17;
    FigCaptionRendererNodeProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      v11 = *(_QWORD *)(ProtocolVTable + 16);
      if (v11)
      {
        v12 = *(void (**)(uint64_t, uint64_t))(v11 + 216);
        if (v12)
          v12(v9, 1);
      }
    }
    v13 = *(_QWORD *)DerivedStorage;
    FigCaptionRendererNodeProtocolGetProtocolID();
    v14 = CMBaseObjectGetProtocolVTable();
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 16);
      if (v15)
      {
        v16 = *(void (**)(uint64_t, uint64_t))(v15 + 232);
        if (v16)
          v16(v13, 1);
      }
    }
    result = 0;
    *a3 = v7;
  }
  return result;
}

uint64_t FigCaptionRendererAVFLayoutRegionSetLayoutContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 24) = a2;
  *(_QWORD *)(DerivedStorage + 32) = a3;
  return 0;
}

void FigCaptionRendererAVFLayoutRegionFinalize()
{
  const void *v0;

  v0 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v0)
    CFRelease(v0);
}

__CFString *FigCaptionRendererAVFLayoutRegionCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererAVFLayoutRegion: <%p>"), a1);
  return Mutable;
}

__CFString *FigCaptionRendererAVFLayoutRegion_FigCaptionRendererBaseProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererAVFLayoutRegion <FigCaptionRendererBaseProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererBaseProtocol_GetClassName(uint64_t a1, _QWORD *a2)
{
  *a2 = "FigCaptionRendererAVFLayoutRegion";
  return 0;
}

__CFString *FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererAVFLayoutRegion <FigCaptionRendererNodeProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_SetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_GetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_GetChildren(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 24);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_HasChildNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t ProtocolVTable;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  v5 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v7 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v7)
    return 4294954508;
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  if (v8)
    return v8(v5, a2, a3);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_AddChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 40);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_RemoveChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_RemovelAllChildrenNodes()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 56);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_SetViewport(double a1, double a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t ProtocolVTable;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, double, double, double, double);

  v8 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v10 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v10)
    return 4294954508;
  v11 = *(uint64_t (**)(uint64_t, double, double, double, double))(v10 + 64);
  if (v11)
    return v11(v8, a1, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_GetViewport(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 72);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_SetFCRBounds(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _OWORD *);
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[4];

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v8 = *a2;
  v9 = a2[1];
  v10 = a2[2];
  v11 = a2[3];
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, _OWORD *))(v5 + 80);
  if (!v6)
    return 4294954514;
  v12[0] = v8;
  v12[1] = v9;
  v12[2] = v10;
  v12[3] = v11;
  return v6(v3, v12);
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_GetFCRBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 88);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_SetCGBounds(double a1, double a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t ProtocolVTable;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, double, double, double, double);

  v8 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v10 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v10)
    return 4294954508;
  v11 = *(uint64_t (**)(uint64_t, double, double, double, double))(v10 + 96);
  if (v11)
    return v11(v8, a1, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_GetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 104);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_SetCGSize(double a1, double a2)
{
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, double, double);

  v4 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v6 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v6)
    return 4294954508;
  v7 = *(uint64_t (**)(uint64_t, double, double))(v6 + 112);
  if (v7)
    return v7(v4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_GetCGSize(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable
    && (v5 = *(_QWORD *)(ProtocolVTable + 16)) != 0
    && (v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 120)) != 0)
  {
    return v6(v3, a2);
  }
  else
  {
    return 4294954508;
  }
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_SetCGOrigin(double a1, double a2)
{
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, double, double);

  v4 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v6 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v6)
    return 4294954508;
  v7 = *(uint64_t (**)(uint64_t, double, double))(v6 + 128);
  if (v7)
    return v7(v4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_GetCGOrigin(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 136);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_SetPaddings(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t ProtocolVTable;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v15 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v15)
    return 4294954508;
  v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 144);
  if (v16)
    return v16(v13, a2, a3, a4, a5, a6, a7);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_GetInsetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 152);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_PurgeImageCache()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 160);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_SetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 168);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_GetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 176);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_GetImageCacheWidth(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 184);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_GetImageCacheHeight(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 192);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_AllocateImageBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 200);
  if (v10)
    return v10(v7, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_GetImageBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 208);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_SetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 216);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_GetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 224);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_SetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 232);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_GetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 240);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_HasActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 248);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_SetZOrder(double a1)
{
  uint64_t v2;
  uint64_t ProtocolVTable;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, double);

  v2 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v4 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v4)
    return 4294954508;
  v5 = *(uint64_t (**)(uint64_t, double))(v4 + 256);
  if (v5)
    return v5(v2, a1);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_GetZOrder(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 264);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_ResetNodeTree()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 272);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_Draw(const void *a1, uint64_t a2)
{
  uint64_t *DerivedStorage;
  CGSize v5;
  uint64_t ProtocolVTable;
  uint64_t v7;
  void (*v8)(const void *, CGRect *);
  const __CFDictionary *v9;
  const void *Value;
  double MidX;
  double MidY;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(const void *, double, double);
  CGSize size;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(const void *, double, double);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  CGRect v25;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(a2 + 296))
  {
    v5 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
    v25.origin = (CGPoint)*MEMORY[0x1E0C9D628];
    v25.size = v5;
    FigCaptionRendererNodeProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      v7 = *(_QWORD *)(ProtocolVTable + 16);
      if (v7)
      {
        v8 = *(void (**)(const void *, CGRect *))(v7 + 104);
        if (v8)
          v8(a1, &v25);
      }
    }
    v9 = *(const __CFDictionary **)(a2 + 296);
    if (v9)
    {
      Value = CFDictionaryGetValue(v9, a1);
      MidX = CGRectGetMidX(v25);
      MidY = CGRectGetMidY(v25);
      FigCaptionRendererOutputNodeProtocolGetProtocolID();
      v13 = CMBaseObjectGetProtocolVTable();
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 16);
        if (v14)
        {
          v15 = *(void (**)(const void *, double, double))(v14 + 72);
          if (v15)
            v15(Value, MidX, MidY);
        }
      }
      size = v25.size;
      FigCaptionRendererOutputNodeProtocolGetProtocolID();
      v17 = CMBaseObjectGetProtocolVTable();
      if (v17)
      {
        v18 = *(_QWORD *)(v17 + 16);
        if (v18)
        {
          v19 = *(void (**)(const void *, double, double))(v18 + 88);
          if (v19)
            v19(Value, size.width, size.height);
        }
      }
    }
  }
  v20 = *DerivedStorage;
  FigCaptionRendererNodeProtocolGetProtocolID();
  v21 = CMBaseObjectGetProtocolVTable();
  if (!v21)
    return 4294954508;
  v22 = *(_QWORD *)(v21 + 16);
  if (!v22)
    return 4294954508;
  v23 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 280);
  if (v23)
    return v23(v20, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_Layout(uint64_t a1, float64x2_t *a2)
{
  uint64_t DerivedStorage;
  const char *ProtocolVTable;
  uint64_t v6;
  void (*v7)(uint64_t, const char **);
  CFIndex Count;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  unint64_t v13;
  double v14;
  double v15;
  const void *ValueAtIndex;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(const void *, const char **);
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(const void *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(const void *, int *);
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(const void *, CFDictionaryRef *);
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(const void *, __int128 *);
  _BOOL4 v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  const __CFDictionary *v42;
  double v43;
  double width;
  double v45;
  double x;
  double y;
  const __CFNumber *Value;
  const __CFNumber *v49;
  const __CFString *v50;
  const __CFString *v51;
  const __CFString *v52;
  const __CFString *v53;
  const __CFString *v54;
  double v55;
  double MidX;
  double MidY;
  CGSize v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(const void *, double, double);
  uint64_t v62;
  uint64_t v63;
  void (*v64)(const void *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  const __CFNumber *v67;
  const __CFNumber *v68;
  const __CFString *v69;
  char v70;
  double v71;
  double v72;
  double v73;
  const void *v74;
  const void *v75;
  double v76;
  double v77;
  double v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(const void *, float *);
  double v83;
  int v84;
  double v85;
  float v86;
  double v87;
  float v88;
  double v89;
  double v90;
  double height;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(const void *, double, double);
  uint64_t v95;
  uint64_t v96;
  void (*v97)(const void *, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t (*v100)(uint64_t, CGRect *);
  uint64_t v101;
  CFIndex v102;
  CFIndex v103;
  __int128 *v104;
  const void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t (*v108)(const void *, const char **);
  CGSize v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(uint64_t, __int128 *);
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  uint64_t v120;
  uint64_t v121;
  void (*v122)(const void *, double, double, double, double);
  uint64_t v123;
  uint64_t v124;
  void (*v125)(const void *, uint64_t);
  uint64_t v126;
  double v128;
  double v129;
  const __CFString *v130;
  const __CFString *v131;
  const __CFString *v132;
  const __CFString *v133;
  CFStringRef v134;
  const __CFString *v135;
  const __CFString *v136;
  const __CFString *v137;
  const __CFString *v138;
  const __CFString *v139;
  const __CFString *theString2;
  void *v141;
  void *v142;
  void *v143;
  void *key;
  CGSize v145;
  const void *v146;
  CGPoint v147;
  double v148;
  const void *v149;
  float v150;
  int v151;
  double v152;
  double valuePtr;
  CGRect rect;
  __int128 v155;
  CGSize v156;
  CFDictionaryRef v157;
  int v158;
  const char *v159;
  const char *v160[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2[22].f64[0] > 0.0 && a2[22].f64[1] > 0.0)
  {
    v160[0] = 0;
    FigCaptionRendererNodeProtocolGetProtocolID();
    ProtocolVTable = (const char *)CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      v6 = *((_QWORD *)ProtocolVTable + 2);
      if (v6 && (v7 = *(void (**)(uint64_t, const char **))(v6 + 24)) != 0)
      {
        v7(a1, v160);
        ProtocolVTable = v160[0];
      }
      else
      {
        ProtocolVTable = 0;
      }
    }
    Count = CFArrayGetCount((CFArrayRef)ProtocolVTable);
    if (Count >= 1)
    {
      v9 = (const void *)*MEMORY[0x1E0CA2B48];
      v10 = (const void *)*MEMORY[0x1E0CA2B20];
      v11 = (const void *)*MEMORY[0x1E0CA2958];
      v12 = (const void *)*MEMORY[0x1E0CA29E0];
      v138 = (const __CFString *)*MEMORY[0x1E0CA2930];
      v135 = (const __CFString *)*MEMORY[0x1E0CA2938];
      v132 = (const __CFString *)*MEMORY[0x1E0CA2940];
      v131 = (const __CFString *)*MEMORY[0x1E0CA2948];
      v130 = (const __CFString *)*MEMORY[0x1E0CA2928];
      theString2 = (const __CFString *)*MEMORY[0x1E0CA2BB0];
      v137 = (const __CFString *)*MEMORY[0x1E0CA2BA8];
      v134 = (CFStringRef)*MEMORY[0x1E0CA2BA0];
      key = (void *)*MEMORY[0x1E0CA2A88];
      v143 = (void *)*MEMORY[0x1E0CA2A80];
      v142 = (void *)*MEMORY[0x1E0CA29D8];
      v13 = Count + 1;
      v139 = (const __CFString *)*MEMORY[0x1E0CA2B98];
      v14 = 1.0;
      v136 = (const __CFString *)*MEMORY[0x1E0CA2B90];
      v133 = (const __CFString *)*MEMORY[0x1E0CA2B88];
      v141 = (void *)*MEMORY[0x1E0CA2B40];
      v15 = 0.5;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v160[0], v13 - 2);
        v159 = 0;
        FigCaptionRendererBaseProtocolGetProtocolID();
        v17 = CMBaseObjectGetProtocolVTable();
        if (!v17
          || (v18 = *(_QWORD *)(v17 + 16)) == 0
          || (v19 = *(unsigned int (**)(const void *, const char **))(v18 + 8)) == 0
          || v19(ValueAtIndex, &v159))
        {
LABEL_138:
          FigSignalErrorAt();
          break;
        }
        v20 = v159;
        if (v159)
        {
          if (strcmp(v159, "FigCaptionRendererCaption"))
          {
            if (!strcmp(v20, "FigCaptionRendererStackLayoutRegion")
              || !strcmp(v20, "FigCaptionRendererCellStackLayoutRegion")
              || !strcmp(v20, "FigCaptionRendererTTMLRegion"))
            {
              FigCaptionRendererNodeProtocolGetProtocolID();
              v21 = CMBaseObjectGetProtocolVTable();
              if (v21)
              {
                v22 = *(_QWORD *)(v21 + 16);
                if (v22)
                {
                  v23 = *(void (**)(const void *, uint64_t))(v22 + 232);
                  if (v23)
                    v23(ValueAtIndex, 1);
                }
              }
            }
            goto LABEL_135;
          }
          v158 = 0;
          FigCaptionRendererCaptionProtocolGetProtocolID();
          v24 = CMBaseObjectGetProtocolVTable();
          if (!v24)
            goto LABEL_138;
          v25 = *(_QWORD *)(v24 + 16);
          if (!v25)
            goto LABEL_138;
          v26 = *(unsigned int (**)(const void *, int *))(v25 + 48);
          if (!v26)
            goto LABEL_138;
          if (v26(ValueAtIndex, &v158))
            goto LABEL_138;
          v157 = 0;
          FigCaptionRendererCaptionProtocolGetProtocolID();
          v27 = CMBaseObjectGetProtocolVTable();
          if (!v27)
            goto LABEL_138;
          v28 = *(_QWORD *)(v27 + 16);
          if (!v28)
            goto LABEL_138;
          v29 = *(unsigned int (**)(const void *, CFDictionaryRef *))(v28 + 16);
          if (!v29)
            goto LABEL_138;
          if (v29(ValueAtIndex, &v157))
            goto LABEL_138;
          v145 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
          v147 = (CGPoint)*MEMORY[0x1E0C9D628];
          v155 = *MEMORY[0x1E0C9D628];
          v156 = v145;
          FigCaptionRendererNodeProtocolGetProtocolID();
          v30 = CMBaseObjectGetProtocolVTable();
          if (!v30)
            goto LABEL_138;
          v31 = *(_QWORD *)(v30 + 16);
          if (!v31)
            goto LABEL_138;
          v32 = *(unsigned int (**)(const void *, __int128 *))(v31 + 104);
          if (!v32 || v32(ValueAtIndex, &v155))
            goto LABEL_138;
          v33 = a2[23].f64[0] == 0.0;
          if (a2[23].f64[1] == 0.0)
            v33 = 1;
          if (v33)
            v34 = a2[22].f64[0];
          else
            v34 = a2[23].f64[0];
          if (v33)
            v35 = a2[22].f64[1];
          else
            v35 = a2[23].f64[1];
          v37 = FCRGetVideoPresentationBounds(v34, v35, a2[21].f64[0], a2[21].f64[1], a2[22].f64[0], a2[22].f64[1]);
          v39 = v38;
          v41 = v40;
          if (v158 == 4)
          {
            v129 = v36;
            valuePtr = 50.0;
            rect.origin.x = 100.0;
            v152 = 100.0;
            v151 = 0;
            v149 = v9;
            Value = (const __CFNumber *)CFDictionaryGetValue(v157, v9);
            if (Value)
            {
              CFNumberGetValue(Value, kCFNumberCGFloatType, &rect);
              if (rect.origin.x < 0.0)
                goto LABEL_138;
            }
            v146 = v10;
            v49 = (const __CFNumber *)CFDictionaryGetValue(v157, v10);
            v50 = (const __CFString *)CFDictionaryGetValue(v157, v11);
            v51 = (const __CFString *)CFDictionaryGetValue(v157, v12);
            v52 = v51;
            if (v49)
            {
              CFNumberGetValue(v49, kCFNumberCGFloatType, &valuePtr);
              if (valuePtr < 0.0)
                goto LABEL_138;
              goto LABEL_53;
            }
            if (!v50)
            {
              if (v51)
                goto LABEL_54;
              goto LABEL_83;
            }
            if (CFStringCompare(v50, v138, 0))
            {
              if (CFStringCompare(v50, v135, 0))
              {
                if (CFStringCompare(v50, v132, 0))
                  goto LABEL_53;
                *(double *)&v65 = 100.0;
              }
              else
              {
                *(double *)&v65 = 50.0;
              }
              valuePtr = *(double *)&v65;
            }
            else
            {
              valuePtr = 0.0;
            }
LABEL_53:
            if (v52)
            {
LABEL_54:
              if (CFStringCompare(v52, theString2, 0) == kCFCompareEqualTo)
              {
                v55 = 0.0;
                goto LABEL_85;
              }
              if (CFStringCompare(v52, v137, 0))
              {
                v53 = v52;
                v54 = v134;
LABEL_57:
                if (CFStringCompare(v53, v54, 0))
                  v55 = 50.0;
                else
                  v55 = 100.0;
                goto LABEL_85;
              }
LABEL_83:
              *(double *)&v66 = 50.0;
LABEL_84:
              v55 = *(double *)&v66;
              goto LABEL_85;
            }
            if (!v50)
              goto LABEL_83;
            v55 = 0.0;
            if (CFStringCompare(v50, v138, 0) == kCFCompareEqualTo)
              goto LABEL_85;
            if (CFStringCompare(v50, v135, 0) == kCFCompareEqualTo)
              goto LABEL_83;
            if (CFStringCompare(v50, v132, 0) == kCFCompareEqualTo)
            {
              *(double *)&v66 = 100.0;
              goto LABEL_84;
            }
            if (CFStringCompare(v50, v131, 0))
            {
              v53 = v50;
              v54 = v130;
              goto LABEL_57;
            }
LABEL_85:
            v67 = (const __CFNumber *)CFDictionaryGetValue(v157, key);
            v68 = (const __CFNumber *)CFDictionaryGetValue(v157, v143);
            v69 = (const __CFString *)CFDictionaryGetValue(v157, v142);
            if (v67)
            {
              CFNumberGetValue(v67, kCFNumberCGFloatType, &v152);
              v10 = v146;
              if (v152 < 0.0)
                goto LABEL_138;
              v70 = 1;
            }
            else
            {
              if (v68)
              {
                CFNumberGetValue(v68, kCFNumberIntType, &v151);
                v70 = 0;
              }
              else
              {
                v70 = 1;
              }
              v10 = v146;
            }
            v71 = 0.0;
            if (v69 && CFStringCompare(v69, v139, 0))
            {
              if (CFStringCompare(v69, v136, 0))
              {
                if (CFStringCompare(v69, v133, 0))
                  v71 = 0.0;
                else
                  v71 = 100.0;
              }
              else
              {
                v71 = 50.0;
              }
            }
            v72 = v55 / 100.0;
            v152 = v152 / 100.0;
            valuePtr = valuePtr / 100.0;
            v73 = v71 / 100.0;
            v74 = CFDictionaryGetValue(v157, v141);
            v75 = v74;
            v150 = 0.0;
            if ((v70 & 1) != 0)
            {
              if (!v74)
              {
                v76 = v41;
                v77 = v37;
                v78 = valuePtr;
                v79 = v129 * (v14 - v152);
                goto LABEL_121;
              }
LABEL_107:
              v83 = v41;
              v84 = FigCFEqual();
              v79 = v129 * (v14 - valuePtr);
              if ((v70 & 1) != 0)
              {
                v9 = v149;
                v77 = v37;
                if (v84)
                {
                  v85 = v83 * v152;
                  goto LABEL_118;
                }
                v87 = v83 * (v14 - v152);
LABEL_125:
                v89 = v39;
                v90 = v87 - v156.width * (v14 - v73);
              }
              else
              {
                v86 = (float)v151;
                if (v151 < 0)
                {
                  v9 = v149;
                  v77 = v37;
                  if (!v84)
                  {
                    v87 = (float)-(float)(v150 * v86);
                    goto LABEL_125;
                  }
                  v85 = v83 + (float)(v150 * v86);
                }
                else
                {
                  v85 = (float)(v150 * v86);
                  v9 = v149;
                  v77 = v37;
                  if (!v84)
                  {
                    v87 = v83 - v85;
                    goto LABEL_125;
                  }
                }
LABEL_118:
                v89 = v39;
                v90 = v85 - v156.width * v73;
              }
            }
            else
            {
              FigCaptionRendererCaptionProtocolGetProtocolID();
              v80 = CMBaseObjectGetProtocolVTable();
              if (v80)
              {
                v81 = *(_QWORD *)(v80 + 16);
                if (v81)
                {
                  v82 = *(void (**)(const void *, float *))(v81 + 104);
                  if (v82)
                    v82(ValueAtIndex, &v150);
                }
              }
              if (v75)
                goto LABEL_107;
              v76 = v41;
              v78 = valuePtr;
              v88 = (float)v151;
              v77 = v37;
              if (v151 < 0)
                v79 = (float)-(float)(v150 * v88);
              else
                v79 = v129 - (float)(v150 * v88);
LABEL_121:
              v9 = v149;
              v89 = v39;
              v90 = v76 * v78 - v156.width * v72;
              v72 = v73;
            }
            height = v156.height;
            FigCaptionRendererNodeProtocolGetProtocolID();
            v92 = CMBaseObjectGetProtocolVTable();
            if (v92)
            {
              v93 = *(_QWORD *)(v92 + 16);
              if (v93)
              {
                v94 = *(void (**)(const void *, double, double))(v93 + 128);
                if (v94)
                  v94(ValueAtIndex, v77 + v90, v89 + v79 - height * (v14 - v72));
              }
            }
            FigCaptionRendererNodeProtocolGetProtocolID();
            v95 = CMBaseObjectGetProtocolVTable();
            if (v95)
            {
              v96 = *(_QWORD *)(v95 + 16);
              if (v96)
              {
                v97 = *(void (**)(const void *, uint64_t))(v96 + 232);
                if (v97)
                  v97(ValueAtIndex, 1);
              }
            }
LABEL_134:
            v15 = 0.5;
            goto LABEL_135;
          }
          if (v158 == 3)
          {
            v128 = v36;
            rect.origin = v147;
            rect.size = v145;
            v42 = (const __CFDictionary *)CFDictionaryGetValue(v157, CFSTR("textbox"));
            if (v42)
              CGRectMakeWithDictionaryRepresentation(v42, &rect);
            v148 = v41;
            v43 = v37;
            if (CGRectIsNull(rect))
            {
              width = v34 * 0.9;
              v45 = v35 * 0.15;
              x = (v34 - v34 * 0.9) * v15;
              y = v35 - v35 * 0.15;
              rect.origin.x = x;
              rect.origin.y = y;
              rect.size.width = v34 * 0.9;
              rect.size.height = v35 * 0.15;
            }
            else
            {
              x = rect.origin.x;
              y = rect.origin.y;
              width = rect.size.width;
              v45 = rect.size.height;
            }
            MidX = CGRectGetMidX(*(CGRect *)&x);
            MidY = CGRectGetMidY(rect);
            v58 = v156;
            FigCaptionRendererNodeProtocolGetProtocolID();
            v59 = CMBaseObjectGetProtocolVTable();
            if (v59)
            {
              v60 = *(_QWORD *)(v59 + 16);
              if (v60)
              {
                v61 = *(void (**)(const void *, double, double))(v60 + 128);
                if (v61)
                  v61(ValueAtIndex, v43 + MidX * (v148 / v34) - v58.width * 0.5, v39 + (v35 - MidY) * (v128 / v35) - v58.height * 0.5);
              }
            }
            FigCaptionRendererNodeProtocolGetProtocolID();
            v62 = CMBaseObjectGetProtocolVTable();
            if (v62)
            {
              v63 = *(_QWORD *)(v62 + 16);
              if (v63)
              {
                v64 = *(void (**)(const void *, uint64_t))(v63 + 232);
                if (v64)
                  v64(ValueAtIndex, 1);
              }
            }
            v14 = 1.0;
            goto LABEL_134;
          }
        }
LABEL_135:
        --v13;
      }
      while (v13 > 1);
    }
  }
  if (*(_BYTE *)(DerivedStorage + 40))
    FigCaptionRendererLayoutDecouple_ApplyDecouplingAndSafeRegion(a1, a2);
  rect.origin.x = 0.0;
  FigCaptionRendererNodeProtocolGetProtocolID();
  v98 = CMBaseObjectGetProtocolVTable();
  if (!v98)
    goto LABEL_167;
  v99 = *(_QWORD *)(v98 + 16);
  if (!v99)
    goto LABEL_167;
  v100 = *(uint64_t (**)(uint64_t, CGRect *))(v99 + 24);
  if (!v100)
  {
LABEL_168:
    v126 = 4294954514;
    goto LABEL_169;
  }
  v101 = v100(a1, &rect);
  if ((_DWORD)v101)
  {
LABEL_172:
    v126 = v101;
    goto LABEL_169;
  }
  v102 = CFArrayGetCount(*(CFArrayRef *)&rect.origin.x);
  if (v102 >= 1)
  {
    v103 = v102 + 1;
    v104 = (__int128 *)MEMORY[0x1E0C9D648];
    while (1)
    {
      v105 = CFArrayGetValueAtIndex(*(CFArrayRef *)&rect.origin.x, v103 - 2);
      v160[0] = 0;
      FigCaptionRendererBaseProtocolGetProtocolID();
      v106 = CMBaseObjectGetProtocolVTable();
      if (!v106)
        break;
      v107 = *(_QWORD *)(v106 + 16);
      if (!v107)
        break;
      v108 = *(uint64_t (**)(const void *, const char **))(v107 + 8);
      if (!v108)
        goto LABEL_168;
      v101 = v108(v105, v160);
      if ((_DWORD)v101)
        goto LABEL_172;
      if (!v160[0] || strcmp(v160[0], "FigCaptionRendererCaption"))
      {
        v109 = (CGSize)v104[1];
        v155 = *v104;
        v156 = v109;
        FigCaptionRendererNodeProtocolGetProtocolID();
        v110 = CMBaseObjectGetProtocolVTable();
        if (v110)
        {
          v111 = *(_QWORD *)(v110 + 16);
          if (v111)
          {
            v112 = *(void (**)(uint64_t, __int128 *))(v111 + 104);
            if (v112)
              v112(a1, &v155);
          }
        }
        v113 = FCRGetOverscanSafeRect(*(double *)&v155, *((double *)&v155 + 1), v156.width, v156.height);
        v115 = v114;
        v117 = v116;
        v119 = v118;
        FigCaptionRendererNodeProtocolGetProtocolID();
        v120 = CMBaseObjectGetProtocolVTable();
        if (v120)
        {
          v121 = *(_QWORD *)(v120 + 16);
          if (v121)
          {
            v122 = *(void (**)(const void *, double, double, double, double))(v121 + 64);
            if (v122)
              v122(v105, v113, v115, v117, v119);
          }
        }
        FigCaptionRendererNodeProtocolGetProtocolID();
        v123 = CMBaseObjectGetProtocolVTable();
        if (v123)
        {
          v124 = *(_QWORD *)(v123 + 16);
          if (v124)
          {
            v125 = *(void (**)(const void *, uint64_t))(v124 + 232);
            if (v125)
              v125(v105, 1);
          }
        }
      }
      if ((unint64_t)--v103 <= 1)
        return 0;
    }
LABEL_167:
    v126 = 4294954508;
LABEL_169:
    FigSignalErrorAt();
    return v126;
  }
  return 0;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_ExecActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 296);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_Compose(uint64_t a1, uint64_t a2)
{
  uint64_t *DerivedStorage;
  uint64_t ProtocolVTable;
  uint64_t v6;
  void (*v7)(uint64_t, char *);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, __int16 *);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  __int16 v25;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v25 = 0;
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v6 = *(_QWORD *)(ProtocolVTable + 16);
    if (v6)
    {
      v7 = *(void (**)(uint64_t, char *))(v6 + 248);
      if (v7)
      {
        v7(a1, (char *)&v25 + 1);
        if (HIBYTE(v25))
        {
          FigCaptionRendererNodeProtocolGetProtocolID();
          v8 = CMBaseObjectGetProtocolVTable();
          if (v8)
          {
            v9 = *(_QWORD *)(v8 + 16);
            if (v9)
            {
              v10 = *(void (**)(uint64_t, uint64_t))(v9 + 296);
              if (v10)
                v10(a1, a2);
            }
          }
        }
      }
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  v11 = CMBaseObjectGetProtocolVTable();
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 16);
    if (v12)
    {
      v13 = *(void (**)(uint64_t, __int16 *))(v12 + 240);
      if (v13)
      {
        v13(a1, &v25);
        if ((_BYTE)v25)
        {
          FigCaptionRendererNodeProtocolGetProtocolID();
          v14 = CMBaseObjectGetProtocolVTable();
          if (v14)
          {
            v15 = *(_QWORD *)(v14 + 16);
            if (v15)
            {
              v16 = *(void (**)(uint64_t, uint64_t))(v15 + 288);
              if (v16)
                v16(a1, a2);
            }
          }
        }
      }
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  v17 = CMBaseObjectGetProtocolVTable();
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 16);
    if (v18)
    {
      v19 = *(void (**)(uint64_t, uint64_t))(v18 + 280);
      if (v19)
        v19(a1, a2);
    }
  }
  v20 = *DerivedStorage;
  FigCaptionRendererNodeProtocolGetProtocolID();
  v21 = CMBaseObjectGetProtocolVTable();
  if (!v21)
    return 4294954508;
  v22 = *(_QWORD *)(v21 + 16);
  if (!v22)
    return 4294954508;
  v23 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 304);
  if (v23)
    return v23(v20, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_OnChildUpdateDisplayRequest(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  void (*v4)(_OWORD *, uint64_t);
  uint64_t v5;
  __int128 v6;
  _OWORD v8[2];
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(void (**)(_OWORD *, uint64_t))(DerivedStorage + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(DerivedStorage + 8);
    v6 = *(_OWORD *)(a2 + 16);
    v8[0] = *(_OWORD *)a2;
    v8[1] = v6;
    v9 = *(_QWORD *)(a2 + 32);
    v4(v8, v5);
  }
  return 0;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_AddAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 320);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_RemoveAllActions()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 328);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_SetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 336);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_GetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 344);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_SelectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, double, double);

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, double, double))(v9 + 352);
  if (v10)
    return v10(v7, a4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_UnselectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, double, double);

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, double, double))(v9 + 360);
  if (v10)
    return v10(v7, a4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_IsSelected(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 368);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_BeginScene(const void *a1, uint64_t a2)
{
  uint64_t *DerivedStorage;
  const __CFDictionary *v5;
  const void *Value;
  uint64_t ProtocolVTable;
  uint64_t v8;
  void (*v9)(const void *);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v5 = *(const __CFDictionary **)(a2 + 296);
    if (v5)
    {
      Value = CFDictionaryGetValue(v5, a1);
      FigCaptionRendererOutputNodeProtocolGetProtocolID();
      ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable)
      {
        v8 = *(_QWORD *)(ProtocolVTable + 16);
        if (v8)
        {
          v9 = *(void (**)(const void *))(v8 + 128);
          if (v9)
            v9(Value);
        }
      }
    }
  }
  v10 = *DerivedStorage;
  FigCaptionRendererNodeProtocolGetProtocolID();
  v11 = CMBaseObjectGetProtocolVTable();
  if (!v11)
    return 4294954508;
  v12 = *(_QWORD *)(v11 + 16);
  if (!v12)
    return 4294954508;
  v13 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 376);
  if (v13)
    return v13(v10, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererAVFLayoutRegion_FigCaptionRendererNodeProtocol_EndScene(const void *a1, uint64_t a2)
{
  uint64_t *DerivedStorage;
  const __CFDictionary *v5;
  const void *Value;
  uint64_t ProtocolVTable;
  uint64_t v8;
  void (*v9)(const void *);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v5 = *(const __CFDictionary **)(a2 + 296);
    if (v5)
    {
      Value = CFDictionaryGetValue(v5, a1);
      FigCaptionRendererOutputNodeProtocolGetProtocolID();
      ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable)
      {
        v8 = *(_QWORD *)(ProtocolVTable + 16);
        if (v8)
        {
          v9 = *(void (**)(const void *))(v8 + 136);
          if (v9)
            v9(Value);
        }
      }
    }
  }
  v10 = *DerivedStorage;
  FigCaptionRendererNodeProtocolGetProtocolID();
  v11 = CMBaseObjectGetProtocolVTable();
  if (!v11)
    return 4294954508;
  v12 = *(_QWORD *)(v11 + 16);
  if (!v12)
    return 4294954508;
  v13 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 384);
  if (v13)
    return v13(v10, a2);
  else
    return 4294954514;
}

uint64_t RegisterFigCaptionRendererAVFLayoutRegionBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFTypeRef FigCaptionRendererAVFLayoutRegionBaseCopyFormattingDesc()
{
  return CFRetain(CFSTR("[FigCaptionRendererAVFLayoutRegion]"));
}

void FigLoadAVFDylib()
{
  if (FigLoadAVFDylib_loadAVFoundationOnce != -1)
    dispatch_once(&FigLoadAVFDylib_loadAVFoundationOnce, &__block_literal_global_129);
}

uint64_t CreatePesPrivateForLPCM(_QWORD *a1)
{
  void (*v2)(_QWORD *);
  _QWORD *v3;
  _QWORD *v4;
  uint64_t result;

  if (a1[6])
  {
    v2 = (void (*)(_QWORD *))a1[107];
    if (v2)
      v2(a1);
    a1[6] = 0;
  }
  v3 = malloc_type_calloc(1uLL, 0x130uLL, 0x10B0040DDD21EB6uLL);
  if (!v3)
    return 12;
  v4 = v3;
  result = 0;
  *v4 = v4 + 37;
  v4[2] = (char *)v4 + 300;
  v4[3] = 4;
  v4[4] = LPCMCheckHeader;
  v4[5] = LPCMCompareHeaders;
  v4[6] = LPCMGetSamplesPerFrame;
  v4[7] = LPCMGetSampleFrequency;
  v4[8] = LPCMGetFrameSize;
  a1[105] = PesLPCMProcessData;
  a1[106] = PesLPCMCleanPrivateData;
  a1[107] = PesLPCMDeletePrivateData;
  a1[6] = v4;
  return result;
}

BOOL LPCMCompareHeaders(OpaqueCMBlockBuffer *a1, _DWORD *a2)
{
  char *v4;
  _BYTE temporaryBlock[4];

  v4 = 0;
  return !CMBlockBufferAccessDataBytes(a1, 0, 4uLL, temporaryBlock, &v4) && *(_DWORD *)v4 == *a2;
}

uint64_t PesLPCMProcessData(uint64_t a1, OpaqueCMBlockBuffer *a2, size_t a3, char *a4, size_t a5, uint64_t a6)
{
  return MPEGAudioProcessData(a1, *(_QWORD **)(a1 + 48), a2, a3, a4, a5, a6);
}

void PesLPCMCleanPrivateData(uint64_t a1)
{
  MPEGAudioCleanPrivateData(*(_QWORD *)(a1 + 48));
}

void PesLPCMDeletePrivateData(uint64_t a1)
{
  MPEGAudioCleanPrivateData(*(_QWORD *)(a1 + 48));
  free(*(void **)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
}

uint64_t FigCreateCaptionRenderPipeline(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const void *a8, __int128 *a9, uint64_t a10, CFTypeRef *a11)
{
  _BOOL4 v16;
  _BOOL4 v17;
  _BOOL4 v18;
  const __CFAllocator *v19;
  uint64_t v20;
  uint64_t DerivedStorage;
  uint64_t v22;
  int v23;
  _QWORD *v24;
  int64_t v25;
  int v26;
  _QWORD *v27;
  int64_t v28;
  dispatch_queue_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  CFTypeRef v33;
  __CFDictionary *Mutable;
  const __CFDictionary *v35;
  uint64_t FigBaseObject;
  uint64_t (*v38)(uint64_t, const __CFString *, const __CFAllocator *, uint64_t);
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  const CMBufferCallbacks *v40;
  _BOOL4 v41;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  CFTypeRef v49;
  char __str[16];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v49 = 0;
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  *(_OWORD *)__str = 0u;
  v51 = 0u;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a3)
    v16 = a2 != 0;
  else
    v16 = 0;
  if ((a2 != 0) != (a3 != 0))
    goto LABEL_45;
  v17 = a5 && a4 != 0;
  if ((a4 != 0) != (a5 != 0))
    goto LABEL_45;
  v18 = a7 && a6 != 0;
  if ((a6 != 0) != (a7 != 0))
    goto LABEL_45;
  v41 = v16;
  v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  FigRenderPipelineGetClassID();
  v20 = CMDerivedObjectCreate();
  if ((_DWORD)v20)
    goto LABEL_36;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(DerivedStorage + 2) = 1;
  *(_BYTE *)(DerivedStorage + 1) = FigSubtitleRendererUseCoreTextRendererByDefault() == 0;
  v22 = FigCaptionSerializerCreate();
  if ((_DWORD)v22)
    goto LABEL_46;
  *(_QWORD *)(DerivedStorage + 256) = 0;
  *(_QWORD *)(DerivedStorage + 264) = v19;
  *(_QWORD *)&v48 = caprp_FigCaptionGroupConverterOutputCallbackTX3G;
  *((_QWORD *)&v48 + 1) = DerivedStorage + 256;
  v23 = _os_feature_enabled_impl();
  v24 = (_QWORD *)(DerivedStorage + 288);
  if (v23)
    v25 = FigTX3GCaptionGroupConverterFromSampleBufferCreateRemote(&v48, (uint64_t)v19, v24);
  else
    v25 = FigTX3GCaptionGroupConverterFromSampleBufferCreate(&v48, (uint64_t)v19, v24);
  v20 = v25;
  if ((_DWORD)v25)
    goto LABEL_36;
  *(_QWORD *)(DerivedStorage + 272) = 0;
  *(_QWORD *)(DerivedStorage + 280) = v19;
  *(_QWORD *)&v47 = caprp_FigCaptionGroupConverterOutputCallbackWebVTT;
  *((_QWORD *)&v47 + 1) = DerivedStorage + 272;
  v26 = _os_feature_enabled_impl();
  v27 = (_QWORD *)(DerivedStorage + 296);
  v28 = v26
      ? FigWebVTTCaptionGroupConverterFromSampleBufferCreateRemote(&v47, (uint64_t)v19, v27)
      : FigWebVTTCaptionGroupConverterFromSampleBufferCreate(&v47, (uint64_t)v19, v27);
  v20 = v28;
  if ((_DWORD)v28)
    goto LABEL_36;
  *(_QWORD *)(DerivedStorage + 16) = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 128) = FigSimpleMutexCreate();
  snprintf(__str, 0x80uLL, "com.apple.coremedia.figcaptionrenderpipeline(%p).callbackqueue", v49);
  v29 = dispatch_queue_create(__str, 0);
  *(_QWORD *)(DerivedStorage + 8) = v29;
  if (!v29)
    goto LABEL_45;
  if (v41)
  {
    *(_QWORD *)(DerivedStorage + 152) = a2;
    v30 = FigCFWeakReferenceHolderCreateWithReferencedObject();
    *(_QWORD *)(DerivedStorage + 160) = v30;
    if (!v30)
      goto LABEL_45;
  }
  if (v17
    && (*(_QWORD *)(DerivedStorage + 168) = a4,
        v31 = FigCFWeakReferenceHolderCreateWithReferencedObject(),
        (*(_QWORD *)(DerivedStorage + 176) = v31) == 0)
    || v18
    && (*(_QWORD *)(DerivedStorage + 200) = a6,
        v32 = FigCFWeakReferenceHolderCreateWithReferencedObject(),
        (*(_QWORD *)(DerivedStorage + 208) = v32) == 0))
  {
LABEL_45:
    v22 = FigSignalErrorAt();
LABEL_46:
    v20 = v22;
    goto LABEL_36;
  }
  v33 = a8;
  if (a8)
    v33 = CFRetain(a8);
  *(_QWORD *)(DerivedStorage + 184) = v33;
  *(_DWORD *)(DerivedStorage + 192) = 0;
  v20 = FigTextSampleBufferSetUpState(DerivedStorage + 40, v19, a1);
  if (!(_DWORD)v20)
  {
    Mutable = CFDictionaryCreateMutable(v19, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v35 = Mutable;
      CFDictionarySetValue(Mutable, CFSTR("AllowCaptionGroupSampleBuffers"), (const void *)*MEMORY[0x1E0C9AE50]);
      v45 = *a9;
      v46 = *((_QWORD *)a9 + 2);
      v20 = FigSimpleRenderPipelineCreateWithCallback((uint64_t)v19, (uint64_t)caprp_sendSubtitleSampleForSampleBuffer, 0, (uint64_t)v49, (uint64_t)&v45, v35, (_QWORD *)(DerivedStorage + 24));
      if (!(_DWORD)v20)
      {
        FigBaseObject = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(DerivedStorage + 24));
        v38 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (v38)
        {
          v20 = v38(FigBaseObject, CFSTR("SourceSampleBufferQueue"), v19, DerivedStorage + 32);
          if (!(_DWORD)v20)
          {
            CMNotificationCenterGetDefaultLocalCenter();
            CMNotificationCenterAddListener();
            CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
            v20 = CMBufferQueueCreate(v19, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(DerivedStorage + 224));
            if (!(_DWORD)v20)
            {
              v40 = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
              v20 = CMBufferQueueCreate(v19, 0, v40, (CMBufferQueueRef *)(DerivedStorage + 240));
              if (!(_DWORD)v20)
              {
                *a11 = v49;
                v49 = 0;
              }
            }
          }
        }
        else
        {
          v20 = 4294954514;
        }
      }
      CFRelease(v35);
    }
    else
    {
      v20 = 4294954510;
    }
  }
LABEL_36:
  if (v49)
    CFRelease(v49);
  return v20;
}

uint64_t caprp_FigCaptionGroupConverterOutputCallbackTX3G(uint64_t a1, uint64_t a2, CFMutableArrayRef *a3)
{
  __CFArray *Mutable;

  if (FigCaptionGroupGetSliceCount() && !FigSampleBufferCreateForCaptionGroup())
  {
    if (*a3)
    {
      CFArrayRemoveAllValues(*a3);
      Mutable = *a3;
LABEL_6:
      CFArrayAppendValue(Mutable, 0);
      return 0;
    }
    Mutable = CFArrayCreateMutable(a3[1], 1, MEMORY[0x1E0C9B378]);
    *a3 = Mutable;
    if (Mutable)
      goto LABEL_6;
  }
  return 0;
}

uint64_t caprp_FigCaptionGroupConverterOutputCallbackWebVTT(uint64_t a1, uint64_t a2, CFMutableArrayRef *a3)
{
  __CFArray *Mutable;

  if (FigCaptionGroupGetSliceCount() && !FigSampleBufferCreateForCaptionGroup())
  {
    if (*a3)
    {
      CFArrayRemoveAllValues(*a3);
      Mutable = *a3;
LABEL_6:
      CFArrayAppendValue(Mutable, 0);
      return 0;
    }
    Mutable = CFArrayCreateMutable(a3[1], 1, MEMORY[0x1E0C9B378]);
    *a3 = Mutable;
    if (Mutable)
      goto LABEL_6;
  }
  return 0;
}

uint64_t caprp_sendSubtitleSampleForSampleBuffer(const void *a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage;
  const opaqueCMFormatDescription *FormatDescription;
  FourCharCode MediaSubType;
  CFTypeRef v8;
  const void *v9;
  CFTypeRef v10;
  const void *v11;
  const void *v12;
  char v13;
  int v14;
  int v15;
  int v16;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v18;
  const void *v19;
  char *v20;
  char *v21;
  CFTypeRef v22;
  uint64_t v23;
  const void *v24;
  char *v25;
  char *v26;
  CFTypeRef v27;
  const void *v28;
  CFTypeRef v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int16 v35;
  CMTime v36;
  CMTime v37;
  CFTypeRef cf;
  int v39;
  CMTime v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
  if (*(_BYTE *)DerivedStorage)
  {
    FigSignalErrorAt();
    goto LABEL_3;
  }
  if (!a2)
    goto LABEL_3;
  FormatDescription = CMSampleBufferGetFormatDescription(a2);
  MediaSubType = CMFormatDescriptionGetMediaSubType(FormatDescription);
  v8 = CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA2678], 0);
  memset(&v37, 0, sizeof(v37));
  CMSampleBufferGetOutputPresentationTimeStamp(&v37, a2);
  memset(&v36, 0, sizeof(v36));
  CMSampleBufferGetOutputDuration(&v36, a2);
  v35 = 0;
  v31 = *MEMORY[0x1E0C9D628];
  v32 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  v33 = *MEMORY[0x1E0C9D628];
  v34 = v32;
  if (MediaSubType)
    *(_DWORD *)(DerivedStorage + 192) = MediaSubType;
  else
    MediaSubType = *(_DWORD *)(DerivedStorage + 192);
  if (CMFormatDescriptionGetMediaType(FormatDescription) == 1668310898)
  {
    if (!v8)
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 128));
      v9 = *(const void **)(DerivedStorage + 120);
      if (v9)
        v10 = CFRetain(v9);
      else
        v10 = 0;
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 128));
      v15 = caprp_createSubtitleSampleForCaptionGroupSampleBuffer((uint64_t)a1, a2, *(const void **)(DerivedStorage + 136), *(void **)(DerivedStorage + 88), &cf);
      goto LABEL_38;
    }
LABEL_41:
    v13 = 1;
    v35 = 256;
    v33 = v31;
    v34 = v32;
    goto LABEL_42;
  }
  if ((CMFormatDescriptionGetMediaType(FormatDescription) == 1935832172
     || CMFormatDescriptionGetMediaType(FormatDescription) == 1937072756)
    && CMFormatDescriptionGetMediaSubType(FormatDescription) == 1937010800)
  {
    if (v8)
      goto LABEL_41;
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 128));
    v11 = *(const void **)(DerivedStorage + 120);
    if (v11)
      v10 = CFRetain(v11);
    else
      v10 = 0;
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 128));
    v15 = caprp_createSubtitleSampleForMPEG4Part30SampleBuffer((uint64_t)a1, a2, *(const void **)(DerivedStorage + 136), *(void **)(DerivedStorage + 88), &cf);
LABEL_38:
    v16 = v15;
    if (v10)
      CFRelease(v10);
    if (v16)
      goto LABEL_3;
    goto LABEL_41;
  }
  if (WebVTTIsFormatDescriptionForWebVTT(FormatDescription))
  {
    if (v8)
      goto LABEL_41;
    if (!*(_QWORD *)(DerivedStorage + 112)
      && WebVTTSampleBufferParserCreate((_QWORD *)(DerivedStorage + 112)))
    {
      goto LABEL_3;
    }
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 128));
    v12 = *(const void **)(DerivedStorage + 120);
    if (v12)
      v10 = CFRetain(v12);
    else
      v10 = 0;
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 128));
    v15 = caprp_createSubtitleSampleForWebVTTSampleBuffer((uint64_t)a1, *(unint64_t **)(DerivedStorage + 112), a2, (const __CFArray *)v10, *(const void **)(DerivedStorage + 136), *(const void **)(DerivedStorage + 88), &cf);
    goto LABEL_38;
  }
  LOBYTE(v39) = 0;
  if (v8)
  {
    v13 = 1;
    v35 = 256;
    v33 = v31;
    v34 = v32;
    v14 = 1;
  }
  else
  {
    if (caprp_createSubtitleSampleForTX3GSampleBuffer((uint64_t)a1, a2, *(const void **)(DerivedStorage + 136), &cf, (BOOL *)&v39, (_BYTE *)&v35 + 1, &v35, &v33))goto LABEL_3;
    v13 = HIBYTE(v35);
    if (!HIBYTE(v35))
    {
      if (*(_BYTE *)(DerivedStorage + 106))
      {
        if ((_BYTE)v39)
        {
          v13 = 1;
          HIBYTE(v35) = 1;
          *(_BYTE *)(DerivedStorage + 106) = 0;
          goto LABEL_42;
        }
        v40 = v37;
        caprp_sendSubtitleSample(a1, MediaSubType, (uint64_t)&v40, 1, 0);
        *(_BYTE *)(DerivedStorage + 106) = 0;
      }
      if (!*(_BYTE *)(DerivedStorage + 144))
        goto LABEL_3;
      v13 = 0;
      goto LABEL_42;
    }
    v14 = v39;
  }
  *(_BYTE *)(DerivedStorage + 106) = v14 == 0;
LABEL_42:
  if (*(_BYTE *)(DerivedStorage + 2))
  {
    *(_BYTE *)(DerivedStorage + 2) = 0;
    CMFormatDescriptionGetMediaType(FormatDescription);
    if (dword_1EE2A3288)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  if (subrp_SampleBufferShouldBeDisplayed(a2))
  {
    if (subrp_isSubTypeFourCCToBeRepresentedNatively(*(const __CFArray **)(DerivedStorage + 184), MediaSubType))
    {
      if (*(_QWORD *)(DerivedStorage + 168))
      {
        v18 = FigCFWeakReferenceHolderCopyReferencedObject();
        if (v18)
        {
          v19 = (const void *)v18;
          v20 = (char *)malloc_type_calloc(1uLL, 0x40uLL, 0x10E00400775FAF6uLL);
          if (v20)
          {
            v21 = v20;
            if (a1)
              v22 = CFRetain(a1);
            else
              v22 = 0;
            *(_QWORD *)v21 = v22;
            *((_QWORD *)v21 + 1) = *(_QWORD *)(DerivedStorage + 168);
            *((_QWORD *)v21 + 2) = CFRetain(v19);
            *((_QWORD *)v21 + 3) = CFRetain(a2);
            *(CMTime *)(v21 + 32) = v37;
            v21[56] = v13;
            dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 8), v21, (dispatch_function_t)caprpNativeCallback);
          }
          else
          {
            FigSignalErrorAt();
          }
          v28 = v19;
LABEL_65:
          CFRelease(v28);
        }
      }
    }
    else if (*(_QWORD *)(DerivedStorage + 152))
    {
      v23 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v23)
      {
        v24 = (const void *)v23;
        v25 = (char *)malloc_type_calloc(1uLL, 0x78uLL, 0x10E0040556ECBE3uLL);
        if (v25)
        {
          v26 = v25;
          if (a1)
            v27 = CFRetain(a1);
          else
            v27 = 0;
          *(_QWORD *)v26 = v27;
          *((_QWORD *)v26 + 1) = *(_QWORD *)(DerivedStorage + 152);
          *((_QWORD *)v26 + 2) = CFRetain(v24);
          v29 = cf;
          if (cf)
            v29 = CFRetain(cf);
          *((_QWORD *)v26 + 3) = v29;
          *(CMTime *)(v26 + 32) = v37;
          v26[80] = v13;
          v26[81] = v35;
          v30 = v34;
          *(_OWORD *)(v26 + 88) = v33;
          *(_OWORD *)(v26 + 104) = v30;
          dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 8), v26, (dispatch_function_t)caprpCommonCallback);
        }
        else
        {
          FigSignalErrorAt();
        }
        v28 = v24;
        goto LABEL_65;
      }
    }
  }
LABEL_3:
  if (cf)
    CFRelease(cf);
  return MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
}

uint64_t caprp_resetOutput(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const void *v6;
  _QWORD *v7;
  _QWORD *v8;
  CFTypeRef v9;
  int v10;
  uint64_t v11;
  CMTime v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
  if (*(_BYTE *)DerivedStorage)
  {
    FigSignalErrorAt();
  }
  else if (*(_QWORD *)(DerivedStorage + 200))
  {
    v5 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v5)
    {
      v6 = (const void *)v5;
      v7 = malloc_type_calloc(1uLL, 0x18uLL, 0xE004023458D36uLL);
      if (v7)
      {
        v8 = v7;
        if (a2)
          v9 = CFRetain(a2);
        else
          v9 = 0;
        v11 = *(_QWORD *)(DerivedStorage + 200);
        *v8 = v9;
        v8[1] = v11;
        v8[2] = CFRetain(v6);
        dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 8), v8, (dispatch_function_t)caprpFlushCallback);
      }
      else
      {
        FigSignalErrorAt();
      }
      CFRelease(v6);
    }
  }
  else
  {
    v10 = *(_DWORD *)(DerivedStorage + 192);
    figSubtitleRenderPipelineGetCurrentTimeFromTimebase(DerivedStorage, &v12);
    caprp_sendSubtitleSample(a2, v10, (uint64_t)&v12, *(_BYTE *)(DerivedStorage + 106), 0);
    *(_BYTE *)(DerivedStorage + 106) = 0;
  }
  return MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
}

uint64_t figCaptionRenderPipelineInvalidate(const void *a1)
{
  figCaptionRenderPipelineInvalidate_Internal(a1, 1);
  return 0;
}

uint64_t figCaptionRenderPipelineFinalize(const void *a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  NSObject *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(DerivedStorage + 2) = 1;
  figCaptionRenderPipelineInvalidate_Internal(a1, 0);
  FigTextSampleBufferTearDownState(DerivedStorage + 40);
  v3 = *(const void **)(DerivedStorage + 288);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(DerivedStorage + 296);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(DerivedStorage + 248);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(DerivedStorage + 160);
  if (v6)
    CFRelease(v6);
  v7 = *(const void **)(DerivedStorage + 176);
  if (v7)
    CFRelease(v7);
  v8 = *(const void **)(DerivedStorage + 208);
  if (v8)
    CFRelease(v8);
  v9 = *(NSObject **)(DerivedStorage + 8);
  if (v9)
    dispatch_release(v9);
  if (*(_QWORD *)(DerivedStorage + 120))
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 128));
    CFRelease(*(CFTypeRef *)(DerivedStorage + 120));
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 128));
  }
  v10 = *(const void **)(DerivedStorage + 136);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(DerivedStorage + 136) = 0;
  }
  v11 = *(const void **)(DerivedStorage + 304);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(DerivedStorage + 304) = 0;
  }
  v12 = *(const void **)(DerivedStorage + 184);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(DerivedStorage + 184) = 0;
  }
  WebVTTSampleBufferParserDestroy(*(_QWORD **)(DerivedStorage + 112));
  if (*(_QWORD *)(DerivedStorage + 128))
  {
    FigSimpleMutexDestroy();
    *(_QWORD *)(DerivedStorage + 128) = 0;
  }
  result = *(_QWORD *)(DerivedStorage + 16);
  if (result)
  {
    result = FigSimpleMutexDestroy();
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  return result;
}

__CFString *figCaptionRenderPipelineCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigCaptionRenderPipeline %p>"), a1);
  return Mutable;
}

uint64_t figCaptionRenderPipelineCopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t *DerivedStorage;
  uint64_t *v8;
  const void *v10;
  uint64_t v11;
  CFTypeRef v12;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  if (CFEqual(a2, CFSTR("CRPP_TextMarkupArray")))
  {
    MEMORY[0x19402EEEC](v8[16]);
    v10 = (const void *)v8[15];
    if (v10)
    {
      v11 = 0;
      *a4 = CFRetain(v10);
    }
    else
    {
      v11 = 4294954513;
    }
    MEMORY[0x19402EF04](v8[16]);
    return v11;
  }
  if (CFEqual(a2, CFSTR("CRPP_ExtendedLanguageTagString")))
  {
    v12 = (CFTypeRef)v8[17];
    if (!v12)
    {
LABEL_10:
      v11 = 0;
      *a4 = v12;
      return v11;
    }
LABEL_9:
    v12 = CFRetain(v12);
    goto LABEL_10;
  }
  if (CFEqual(CFSTR("HDRCrossTalker"), a2))
  {
    v12 = (CFTypeRef)v8[38];
    if (!v12)
      goto LABEL_10;
    goto LABEL_9;
  }
  return FigRenderPipelineCopyProperty(v8[3], (uint64_t)a2, a3, (uint64_t)a4);
}

uint64_t figCaptionRenderPipelineSetProperty(const void *a1, const void *a2, void *a3)
{
  _BYTE *DerivedStorage;
  uint64_t v7;
  CFTypeID TypeID;
  const void *v10;
  CFTypeID v11;
  CFDictionaryRef v12;
  int v13;
  CFTypeID v14;
  const void *v15;
  CFTypeID v16;
  uint64_t v17;
  CMTime v18;
  void *values;

  values = a3;
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v7 = (uint64_t)DerivedStorage;
  if (*DerivedStorage)
    return FigSignalErrorAt();
  if (CFEqual(a2, CFSTR("CRPP_TextMarkupArray")))
  {
    if (!a3 || (TypeID = CFArrayGetTypeID(), TypeID == CFGetTypeID(a3)))
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(v7 + 128));
      v10 = *(const void **)(v7 + 120);
      *(_QWORD *)(v7 + 120) = a3;
      if (a3)
        CFRetain(a3);
      if (v10)
        CFRelease(v10);
      MEMORY[0x19402EF04](*(_QWORD *)(v7 + 128));
      return 0;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(a2, CFSTR("CRPP_TextHighlightArray")))
  {
    if (a3)
    {
      v11 = CFGetTypeID(a3);
      if (v11 != CFArrayGetTypeID())
        return FigSignalErrorAt();
    }
    v12 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&kFigTextAttributeSubtitleTextHighlightArray, (const void **)&values, 1, 0, 0);
    v13 = *(_DWORD *)(v7 + 192);
    figSubtitleRenderPipelineGetCurrentTimeFromTimebase(v7, &v18);
    caprp_sendSubtitleSample(a1, v13, (uint64_t)&v18, 0, (uint64_t)v12);
    return 0;
  }
  if (CFEqual(a2, CFSTR("CRPP_ExtendedLanguageTagString")))
  {
    if (a3)
    {
      v14 = CFStringGetTypeID();
      if (v14 != CFGetTypeID(a3))
        return FigSignalErrorAt();
      v15 = *(const void **)(v7 + 136);
      *(_QWORD *)(v7 + 136) = a3;
LABEL_20:
      CFRetain(a3);
      if (!v15)
        return 0;
      goto LABEL_27;
    }
    v15 = *(const void **)(v7 + 136);
    *(_QWORD *)(v7 + 136) = 0;
    if (!v15)
      return 0;
    goto LABEL_27;
  }
  if (CFEqual(a2, CFSTR("DisplayNonForcedSubtitles")))
  {
    if (a3)
    {
      v16 = CFBooleanGetTypeID();
      if (v16 != CFGetTypeID(a3))
        return FigSignalErrorAt();
    }
    *(_BYTE *)(v7 + 144) = CFBooleanGetValue((CFBooleanRef)a3);
    return 0;
  }
  if (CFEqual(a2, CFSTR("HDRCrossTalker")))
  {
    if (a3)
    {
      v17 = FigCrossTalkerGetTypeID();
      if (v17 != CFGetTypeID(a3))
        return FigSignalErrorAt();
      v15 = *(const void **)(v7 + 304);
      *(_QWORD *)(v7 + 304) = a3;
      goto LABEL_20;
    }
    v15 = *(const void **)(v7 + 304);
    *(_QWORD *)(v7 + 304) = 0;
    if (!v15)
      return 0;
LABEL_27:
    CFRelease(v15);
    return 0;
  }
  return FigRenderPipelineSetProperty_0(*(_QWORD *)(v7 + 24), (uint64_t)a2, (uint64_t)a3);
}

void figCaptionRenderPipelineInvalidate_Internal(const void *a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  int v8;
  char v9;
  uint64_t v10;
  uint64_t FigBaseObject;
  uint64_t v12;
  void (*v13)(uint64_t);
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  CMTime v20;
  CMTime v21;

  if (a1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      v5 = DerivedStorage;
      if (*(_QWORD *)(DerivedStorage + 16))
      {
        MEMORY[0x19402EEEC]();
        if (*(_BYTE *)v5)
          JUMPOUT(0x19402EF04);
        if (a2)
        {
          if (*(_QWORD *)(v5 + 200))
          {
            v6 = FigCFWeakReferenceHolderCopyReferencedObject();
            if (v6)
            {
              v7 = (const void *)v6;
              (*(void (**)(const void *, uint64_t))(v5 + 200))(a1, v6);
              CFRelease(v7);
            }
          }
          else
          {
            memset(&v21, 0, sizeof(v21));
            figSubtitleRenderPipelineGetCurrentTimeFromTimebase(v5, &v21);
            v8 = *(_DWORD *)(v5 + 192);
            v9 = *(_BYTE *)(v5 + 106);
            v20 = v21;
            caprp_sendSubtitleSample(a1, v8, (uint64_t)&v20, v9, 0);
            *(_BYTE *)(v5 + 106) = 0;
          }
        }
        *(_BYTE *)v5 = 1;
        MEMORY[0x19402EF04](*(_QWORD *)(v5 + 16));
        if (*(_QWORD *)(v5 + 32))
        {
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterRemoveListener();
          CFRelease(*(CFTypeRef *)(v5 + 32));
          *(_QWORD *)(v5 + 32) = 0;
        }
        v10 = *(_QWORD *)(v5 + 24);
        if (v10)
        {
          FigBaseObject = FigRenderPipelineGetFigBaseObject(v10);
          if (FigBaseObject)
          {
            v12 = FigBaseObject;
            v13 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
            if (v13)
              v13(v12);
          }
          CFRelease(*(CFTypeRef *)(v5 + 24));
          *(_QWORD *)(v5 + 24) = 0;
        }
        v14 = *(const void **)(v5 + 216);
        if (v14)
        {
          CFRelease(v14);
          *(_QWORD *)(v5 + 216) = 0;
        }
        v15 = *(const void **)(v5 + 224);
        if (v15)
        {
          CFRelease(v15);
          *(_QWORD *)(v5 + 224) = 0;
        }
        v16 = *(const void **)(v5 + 232);
        if (v16)
        {
          CFRelease(v16);
          *(_QWORD *)(v5 + 232) = 0;
        }
        v17 = *(const void **)(v5 + 240);
        if (v17)
        {
          CFRelease(v17);
          *(_QWORD *)(v5 + 240) = 0;
        }
        v18 = *(const void **)(v5 + 272);
        if (v18)
        {
          CFRelease(v18);
          *(_QWORD *)(v5 + 272) = 0;
        }
        v19 = *(const void **)(v5 + 256);
        if (v19)
        {
          CFRelease(v19);
          *(_QWORD *)(v5 + 256) = 0;
        }
      }
    }
  }
}

void caprp_sendSubtitleSample(const void *a1, int a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  const void *v12;
  _QWORD *v13;
  _QWORD *v14;
  CFTypeRef v15;
  uint64_t v16;
  char *v17;
  char *v18;
  CFTypeRef v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  void (__cdecl *v23)(void *);
  void *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (subrp_isSubTypeFourCCToBeRepresentedNatively(*(const __CFArray **)(DerivedStorage + 184), a2))
  {
    if (*(_QWORD *)(DerivedStorage + 168))
    {
      v11 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v11)
      {
        v12 = (const void *)v11;
        v13 = malloc_type_calloc(1uLL, 0x40uLL, 0x10E00400775FAF6uLL);
        if (v13)
        {
          v14 = v13;
          if (a1)
            v15 = CFRetain(a1);
          else
            v15 = 0;
          v20 = *(_QWORD *)(DerivedStorage + 168);
          *v14 = v15;
          v14[1] = v20;
          v14[2] = CFRetain(v12);
          v14[3] = 0;
          v21 = *(_QWORD *)(a3 + 16);
          *((_OWORD *)v14 + 2) = *(_OWORD *)a3;
          v14[6] = v21;
          *((_BYTE *)v14 + 56) = a4;
          v22 = *(NSObject **)(DerivedStorage + 8);
          v23 = (void (__cdecl *)(void *))caprpNativeCallback;
          v24 = v14;
LABEL_17:
          dispatch_async_f(v22, v24, v23);
LABEL_18:
          CFRelease(v12);
          return;
        }
        goto LABEL_19;
      }
    }
  }
  else if (*(_QWORD *)(DerivedStorage + 152))
  {
    v16 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v16)
    {
      v12 = (const void *)v16;
      v17 = (char *)malloc_type_calloc(1uLL, 0x78uLL, 0x10E0040556ECBE3uLL);
      if (v17)
      {
        v18 = v17;
        if (a1)
          v19 = CFRetain(a1);
        else
          v19 = 0;
        v25 = *(_QWORD *)(DerivedStorage + 152);
        *(_QWORD *)v18 = v19;
        *((_QWORD *)v18 + 1) = v25;
        *((_QWORD *)v18 + 2) = CFRetain(v12);
        *((_QWORD *)v18 + 3) = a5;
        v26 = *(_QWORD *)(a3 + 16);
        *((_OWORD *)v18 + 2) = *(_OWORD *)a3;
        v27 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
        *(_OWORD *)(v18 + 88) = *MEMORY[0x1E0C9D628];
        *((_QWORD *)v18 + 6) = v26;
        v18[80] = a4;
        v18[81] = 0;
        *(_OWORD *)(v18 + 104) = v27;
        v22 = *(NSObject **)(DerivedStorage + 8);
        v23 = (void (__cdecl *)(void *))caprpCommonCallback;
        v24 = v18;
        goto LABEL_17;
      }
LABEL_19:
      FigSignalErrorAt();
      goto LABEL_18;
    }
  }
}

void caprpNativeCallback(uint64_t a1)
{
  CFTypeRef v2;
  void (*v3)(CFTypeRef, uint64_t, __int128 *, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  const void *v9;
  __int128 v10;
  uint64_t v11;

  v2 = *(CFTypeRef *)a1;
  v3 = *(void (**)(CFTypeRef, uint64_t, __int128 *, uint64_t, uint64_t))(a1 + 8);
  v5 = *(unsigned __int8 *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v10 = *(_OWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 48);
  v3(v2, v6, &v10, v5, v7);
  v8 = *(const void **)(a1 + 24);
  if (v8)
    CFRelease(v8);
  v9 = *(const void **)(a1 + 16);
  if (v9)
    CFRelease(v9);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  free((void *)a1);
}

void caprpCommonCallback(uint64_t a1)
{
  CFTypeRef v2;
  void (*v3)(CFTypeRef, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, double, double, double, double);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  __int128 v11;
  uint64_t v12;

  v2 = *(CFTypeRef *)a1;
  v3 = *(void (**)(CFTypeRef, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, double, double, double, double))(a1 + 8);
  v5 = *(unsigned __int8 *)(a1 + 80);
  v6 = *(unsigned __int8 *)(a1 + 81);
  v8 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v11 = *(_OWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 48);
  v3(v2, v7, &v11, v5, v6, v8, *(double *)(a1 + 88), *(double *)(a1 + 96), *(double *)(a1 + 104), *(double *)(a1 + 112));
  v9 = *(const void **)(a1 + 24);
  if (v9)
    CFRelease(v9);
  v10 = *(const void **)(a1 + 16);
  if (v10)
    CFRelease(v10);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  free((void *)a1);
}

uint64_t caprp_createSubtitleSampleForCaptionGroupSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2, const void *a3, void *a4, _QWORD *a5)
{
  uint64_t DerivedStorage;
  uint64_t CaptionGroup;
  uint64_t SliceCount;
  const __CFAllocator *v11;
  const __CFDictionary *Mutable;
  const __CFDictionary *v13;
  uint64_t v14;
  uint64_t v15;
  __CFArray *v16;
  uint64_t CaptionData;
  uint64_t v18;
  __CFDictionary *v19;
  CFTypeRef v20;
  uint64_t CFDataFromCaptionGroup;
  CFDictionaryRef v22;
  CFDictionaryRef v23;
  __CFArray *v24;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  __int128 v30;
  uint64_t v31;
  CMTime v32;
  CMTime v33;
  CMTime v34;
  __int128 v35;
  uint64_t v36;
  CMTime time;
  CMTime v38;
  CMTime v39;
  const void *v40;
  __CFAttributedString *v41;

  v40 = 0;
  v41 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!subrp_SampleBufferShouldBeDisplayed(a2))
  {
    v16 = 0;
    Mutable = 0;
    v13 = 0;
    v19 = 0;
    v14 = 0;
    goto LABEL_43;
  }
  v28 = DerivedStorage;
  v27 = a4;
  CaptionGroup = FigSampleBufferGetCaptionGroup();
  if (!CaptionGroup)
  {
    v13 = 0;
    Mutable = 0;
    v16 = 0;
    v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    goto LABEL_18;
  }
  SliceCount = FigCaptionGroupGetSliceCount();
  memset(&v39, 0, sizeof(v39));
  CMSampleBufferGetPresentationTimeStamp(&v39, a2);
  memset(&v38, 0, sizeof(v38));
  CMSampleBufferGetDuration(&v38, a2);
  v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v13 = 0;
    goto LABEL_59;
  }
  v13 = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v13)
  {
LABEL_59:
    v16 = 0;
    v19 = 0;
    goto LABEL_60;
  }
  if (SliceCount < 1)
  {
    v16 = 0;
  }
  else
  {
    v26 = a5;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    do
    {
      CaptionData = FigCaptionGroupGetCaptionData();
      if (CaptionData)
      {
        v18 = CaptionData;
        memset(&time, 0, sizeof(time));
        FigCaptionGroupGetDurationBeforeSlice();
        v35 = 0uLL;
        v36 = 0;
        FigCaptionGroupGetDurationAfterSlice();
        v34 = v39;
        v33 = v38;
        v32 = time;
        v30 = v35;
        v31 = v36;
        v14 = FigCaptionDataToMarkupBasedAttributedString(v11, v18, (uint64_t)&v34, &v33, &v32, (uint64_t)&v30, &v41, Mutable, v13);
        if (!v16)
        {
          v16 = CFArrayCreateMutable(v11, 0, MEMORY[0x1E0C9B378]);
          if (!v16)
            goto LABEL_59;
        }
        CFArrayAppendValue(v16, v41);
        if (v41)
        {
          CFRelease(v41);
          v41 = 0;
        }
      }
      ++v15;
    }
    while (SliceCount != v15);
    if ((_DWORD)v14)
    {
      v19 = 0;
      v20 = 0;
      a5 = v26;
LABEL_42:
      *a5 = v20;
      goto LABEL_43;
    }
    a5 = v26;
  }
LABEL_18:
  v19 = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v19)
  {
LABEL_60:
    v14 = 4294954510;
    goto LABEL_43;
  }
  CFDataFromCaptionGroup = FigCFDictionarySetInt32();
  if (!(_DWORD)CFDataFromCaptionGroup)
  {
    CFDataFromCaptionGroup = FigCFDictionarySetInt32();
    if (!(_DWORD)CFDataFromCaptionGroup)
    {
      memset(&v39, 0, sizeof(v39));
      CMSampleBufferGetOutputPresentationTimeStamp(&v39, a2);
      memset(&v38, 0, sizeof(v38));
      CMSampleBufferGetDuration(&v38, a2);
      time = v39;
      v22 = CMTimeCopyAsDictionary(&time, v11);
      time = v38;
      v23 = CMTimeCopyAsDictionary(&time, v11);
      v24 = CFArrayCreateMutable(v11, 2, MEMORY[0x1E0C9B378]);
      CFArrayAppendValue(v24, v22);
      CFArrayAppendValue(v24, v23);
      CFDictionarySetValue(v19, CFSTR("SubtitleTimeRange"), v24);
      if (v22)
        CFRelease(v22);
      if (v23)
        CFRelease(v23);
      if (v24)
        CFRelease(v24);
      if (a3)
        CFDictionarySetValue(v19, CFSTR("SubtitleExtendedLanguageTag"), a3);
      if (caprp_isSubtitleOverHDRVideo())
        CFDictionarySetValue(v19, CFSTR("SubtitleOverHDRVideo"), (const void *)*MEMORY[0x1E0C9AE50]);
      if (!v16)
        v16 = CFArrayCreateMutable(v11, 0, MEMORY[0x1E0C9B378]);
      CFDictionarySetValue(v19, CFSTR("SubtitleContent"), v16);
      if (!CaptionGroup || !*(_BYTE *)(v28 + 1))
        goto LABEL_37;
      CFDataFromCaptionGroup = FigCaptionSerializerCreateCFDataFromCaptionGroup();
      if (!(_DWORD)CFDataFromCaptionGroup)
      {
        CFDictionarySetValue(v19, CFSTR("SubtitleSerializedCaptionGroup"), v40);
LABEL_37:
        if (v27)
          CFDictionarySetValue(v19, CFSTR("SubtitleContentMetadata"), v27);
        if (Mutable)
          CFDictionarySetValue(v19, CFSTR("SubtitleContentMetadata"), Mutable);
        v20 = CFRetain(v19);
        v14 = 0;
        goto LABEL_42;
      }
    }
  }
  v14 = CFDataFromCaptionGroup;
LABEL_43:
  if (v41)
    CFRelease(v41);
  if (Mutable)
    CFRelease(Mutable);
  if (v13)
    CFRelease(v13);
  if (v16)
    CFRelease(v16);
  if (v19)
    CFRelease(v19);
  if (v40)
    CFRelease(v40);
  return v14;
}

uint64_t caprp_createSubtitleSampleForMPEG4Part30SampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2, const void *a3, void *a4, _QWORD *a5)
{
  const __CFAllocator *v10;
  CFMutableAttributedStringRef Mutable;
  CFMutableAttributedStringRef v12;
  CFStringRef v13;
  uint64_t v14;
  CFTypeRef v15;
  uint64_t (*v16)(CFTypeRef, opaqueCMSampleBuffer *);
  CFTypeRef v17;
  uint64_t (*v18)(CFTypeRef);
  const __CFArray *v19;
  uint64_t v20;
  CFMutableDictionaryRef v21;
  CFTypeRef v22;
  opaqueCMSampleBuffer *ValueAtIndex;
  uint64_t v25;
  CFMutableDictionaryRef MutableCopy;
  CMTime v27;
  CFTypeRef v28;
  CMTime v29;
  CFTypeRef cf[2];
  CFTypeRef v31;

  v28 = 0;
  v29 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  if (!subrp_SampleBufferShouldBeDisplayed(a2))
    return 0;
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFAttributedStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (Mutable)
  {
    v12 = Mutable;
    CMSampleBufferGetPresentationTimeStamp(&v29, a2);
    v27 = v29;
    v13 = CMTimeCopyDescription(v10, &v27);
    cf[1] = v10;
    v31 = 0;
    cf[0] = 0;
    v27.value = (CMTimeValue)caprp_FigCaptionGroupConverterOutputCallbackMPEG4Part30;
    *(_QWORD *)&v27.timescale = cf;
    v14 = FigTTMLCaptionGroupConverterFromSampleBufferCreate(&v27, (uint64_t)v10, &v31);
    if (!(_DWORD)v14)
    {
      v15 = v31;
      v16 = *(uint64_t (**)(CFTypeRef, opaqueCMSampleBuffer *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (!v16)
        goto LABEL_10;
      v14 = v16(v15, a2);
      if ((_DWORD)v14)
        goto LABEL_40;
      v17 = v31;
      v18 = *(uint64_t (**)(CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (!v18)
      {
LABEL_10:
        v19 = 0;
        v20 = 4294954514;
        goto LABEL_11;
      }
      v14 = v18(v17);
      if (!(_DWORD)v14)
      {
        if (!cf[0])
        {
          v20 = 0;
          v19 = 0;
          goto LABEL_14;
        }
        v19 = (const __CFArray *)CFRetain(cf[0]);
        v20 = 0;
LABEL_11:
        if (cf[0])
        {
          CFRelease(cf[0]);
          cf[0] = 0;
        }
LABEL_14:
        if (v31)
          CFRelease(v31);
        if ((_DWORD)v20)
        {
          v21 = 0;
        }
        else
        {
          if (v19)
          {
            if (CFArrayGetCount(v19) >= 1)
            {
              ValueAtIndex = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(v19, 0);
              v25 = caprp_createSubtitleSampleForCaptionGroupSampleBuffer(a1, ValueAtIndex, a3, a4, &v28);
              if ((_DWORD)v25)
              {
                v21 = 0;
                v20 = v25;
                if (!v13)
                {
LABEL_21:
                  CFRelease(v12);
                  if (v21)
                    CFRelease(v21);
                  goto LABEL_23;
                }
LABEL_20:
                CFRelease(v13);
                goto LABEL_21;
              }
            }
          }
          if (v28)
            MutableCopy = CFDictionaryCreateMutableCopy(v10, 0, (CFDictionaryRef)v28);
          else
            MutableCopy = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          v21 = MutableCopy;
          if (MutableCopy)
          {
            v22 = CFRetain(MutableCopy);
LABEL_19:
            *a5 = v22;
            if (!v13)
              goto LABEL_21;
            goto LABEL_20;
          }
        }
        v22 = 0;
        goto LABEL_19;
      }
    }
LABEL_40:
    v20 = v14;
    v19 = 0;
    goto LABEL_11;
  }
  v19 = 0;
  v20 = 4294954510;
LABEL_23:
  if (v28)
    CFRelease(v28);
  if (v19)
    CFRelease(v19);
  return v20;
}

uint64_t caprp_createSubtitleSampleForWebVTTSampleBuffer(uint64_t a1, unint64_t *a2, opaqueCMSampleBuffer *a3, const __CFArray *a4, const void *a5, const void *a6, CFTypeRef *a7)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v13;
  __CFDictionary *Mutable;
  uint64_t v15;
  CFDictionaryRef v16;
  CFDictionaryRef v17;
  __CFArray *v18;
  uint64_t CMBaseObject;
  uint64_t (*v20)(uint64_t, __CFString *, const __CFArray *);
  uint64_t v21;
  uint64_t (*v22)(uint64_t, opaqueCMSampleBuffer *);
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  const void *v25;
  const __CFArray *v26;
  const void *v27;
  uint64_t CFDataFromCaptionGroup;
  __CFArray *v29;
  const void *v30;
  CFTypeRef *v32;
  const __CFArray *v34;
  CMTime time;
  CMTime v36;
  CMTime v37;
  const void *v38;
  __CFArray *v39;

  v38 = 0;
  v39 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!subrp_SampleBufferShouldBeDisplayed(a3))
  {
    Mutable = 0;
    CFDataFromCaptionGroup = 0;
    goto LABEL_41;
  }
  v34 = a4;
  v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    CFDataFromCaptionGroup = 4294954510;
    goto LABEL_39;
  }
  v32 = a7;
  v15 = FigCFDictionarySetInt32();
  if (!(_DWORD)v15)
  {
    memset(&v37, 0, sizeof(v37));
    CMSampleBufferGetOutputPresentationTimeStamp(&v37, a3);
    memset(&v36, 0, sizeof(v36));
    CMSampleBufferGetOutputDuration(&v36, a3);
    time = v37;
    v16 = CMTimeCopyAsDictionary(&time, v13);
    time = v36;
    v17 = CMTimeCopyAsDictionary(&time, v13);
    v18 = CFArrayCreateMutable(v13, 2, MEMORY[0x1E0C9B378]);
    CFArrayAppendValue(v18, v16);
    CFArrayAppendValue(v18, v17);
    CFDictionarySetValue(Mutable, CFSTR("SubtitleTimeRange"), v18);
    if (v16)
      CFRelease(v16);
    if (v17)
      CFRelease(v17);
    if (v18)
      CFRelease(v18);
    if (a5)
      CFDictionarySetValue(Mutable, CFSTR("SubtitleExtendedLanguageTag"), a5);
    if (caprp_isSubtitleOverHDRVideo())
      CFDictionarySetValue(Mutable, CFSTR("SubtitleOverHDRVideo"), (const void *)*MEMORY[0x1E0C9AE50]);
    if (!*(_BYTE *)(DerivedStorage + 1))
    {
      CFDataFromCaptionGroup = WebVTTCreateAttributedStringArrayFromSampleBuffer(a2, a3, v34, &v39);
      v29 = v39;
      v30 = a6;
      if (!v39)
      {
        v29 = CFArrayCreate(v13, 0, 0, MEMORY[0x1E0C9B378]);
        v39 = v29;
      }
      CFDictionarySetValue(Mutable, CFSTR("SubtitleContent"), v29);
      v26 = 0;
      if (!a6)
      {
LABEL_37:
        *v32 = CFRetain(Mutable);
        if (!v26)
          goto LABEL_39;
        goto LABEL_38;
      }
LABEL_36:
      CFDictionarySetValue(Mutable, CFSTR("SubtitleContentMetadata"), v30);
      goto LABEL_37;
    }
    if (!CMSampleBufferGetDataBuffer(a3) || !CMSampleBufferGetNumSamples(a3))
      goto LABEL_46;
    CMBaseObject = FigCaptionGroupConverterFromSampleBufferGetCMBaseObject(*(_QWORD *)(DerivedStorage + 296));
    v20 = *(uint64_t (**)(uint64_t, __CFString *, const __CFArray *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 56);
    if (!v20)
      goto LABEL_32;
    v15 = v20(CMBaseObject, CFSTR("FCGCFS_TextMarkupArray"), v34);
    if (!(_DWORD)v15)
    {
      v21 = *(_QWORD *)(DerivedStorage + 296);
      v22 = *(uint64_t (**)(uint64_t, opaqueCMSampleBuffer *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (!v22)
        goto LABEL_32;
      v15 = v22(v21, a3);
      if (!(_DWORD)v15)
      {
        if (!_os_feature_enabled_impl())
          goto LABEL_24;
        v23 = *(_QWORD *)(DerivedStorage + 296);
        v24 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (v24)
        {
          v15 = v24(v23);
          if (!(_DWORD)v15)
          {
LABEL_24:
            v25 = *(const void **)(DerivedStorage + 272);
            if (v25)
            {
              v26 = (const __CFArray *)CFRetain(v25);
              v27 = *(const void **)(DerivedStorage + 272);
              if (v27)
              {
                CFRelease(v27);
                *(_QWORD *)(DerivedStorage + 272) = 0;
              }
              if (v26)
              {
                if (CFArrayGetCount(v26) >= 1)
                {
                  CFArrayGetValueAtIndex(v26, 0);
                  if (FigSampleBufferGetCaptionGroup())
                  {
                    CFDataFromCaptionGroup = FigCaptionSerializerCreateCFDataFromCaptionGroup();
                    if ((_DWORD)CFDataFromCaptionGroup)
                    {
LABEL_38:
                      CFRelease(v26);
                      goto LABEL_39;
                    }
                    CFDictionarySetValue(Mutable, CFSTR("SubtitleSerializedCaptionGroup"), v38);
LABEL_48:
                    v30 = a6;
                    if (!a6)
                      goto LABEL_37;
                    goto LABEL_36;
                  }
                }
              }
LABEL_47:
              CFDataFromCaptionGroup = 0;
              goto LABEL_48;
            }
LABEL_46:
            v26 = 0;
            goto LABEL_47;
          }
          goto LABEL_52;
        }
LABEL_32:
        CFDataFromCaptionGroup = 4294954514;
        goto LABEL_39;
      }
    }
  }
LABEL_52:
  CFDataFromCaptionGroup = v15;
LABEL_39:
  if (v38)
    CFRelease(v38);
LABEL_41:
  if (v39)
    CFRelease(v39);
  if (Mutable)
    CFRelease(Mutable);
  return CFDataFromCaptionGroup;
}

uint64_t caprp_createSubtitleSampleForTX3GSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2, const void *a3, CFTypeRef *a4, BOOL *a5, _BYTE *a6, _BYTE *a7, _OWORD *a8)
{
  __int128 v14;
  uint64_t DerivedStorage;
  const __CFAllocator *v16;
  __CFDictionary *Mutable;
  uint64_t v18;
  CFDictionaryRef v19;
  CFDictionaryRef v20;
  __CFArray *v21;
  opaqueCMSampleBuffer *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, opaqueCMSampleBuffer *);
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  const void *v27;
  const __CFArray *v28;
  const void *v29;
  uint64_t CFDataFromCaptionGroup;
  __CFArray *v31;
  BOOL v32;
  const __CFString *String;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  _BYTE *v38;
  _BYTE *v39;
  BOOL *v40;
  CMTime time;
  CMTime v43;
  CMTime v44;
  CFTypeRef cf;
  CFAttributedStringRef aStr;
  void *value;
  __int128 v48;
  __int128 v49;
  _WORD v50[5];

  v50[0] = 0;
  v14 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  v48 = *MEMORY[0x1E0C9D628];
  v49 = v14;
  aStr = 0;
  value = 0;
  cf = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v40 = a5;
    v18 = FigCFDictionarySetInt32();
    if ((_DWORD)v18)
      goto LABEL_59;
    v38 = a6;
    v39 = a7;
    memset(&v44, 0, sizeof(v44));
    CMSampleBufferGetOutputPresentationTimeStamp(&v44, a2);
    memset(&v43, 0, sizeof(v43));
    CMSampleBufferGetOutputDuration(&v43, a2);
    time = v44;
    v19 = CMTimeCopyAsDictionary(&time, v16);
    time = v43;
    v20 = CMTimeCopyAsDictionary(&time, v16);
    v21 = CFArrayCreateMutable(v16, 2, MEMORY[0x1E0C9B378]);
    CFArrayAppendValue(v21, v19);
    CFArrayAppendValue(v21, v20);
    CFDictionarySetValue(Mutable, CFSTR("SubtitleTimeRange"), v21);
    if (v19)
      CFRelease(v19);
    if (v20)
      CFRelease(v20);
    if (v21)
      CFRelease(v21);
    if (a3)
      CFDictionarySetValue(Mutable, CFSTR("SubtitleExtendedLanguageTag"), a3);
    if (caprp_isSubtitleOverHDRVideo())
      CFDictionarySetValue(Mutable, CFSTR("SubtitleOverHDRVideo"), (const void *)*MEMORY[0x1E0C9AE50]);
    v18 = FigTextSampleBufferDecryptSample(DerivedStorage + 40, a2, &cf);
    if ((_DWORD)v18)
      goto LABEL_59;
    v22 = cf ? (opaqueCMSampleBuffer *)cf : a2;
    v18 = FigTextSampleBufferCopyAttributedString(DerivedStorage + 40, v16, v22, &aStr, (char *)v50 + 1, v50, (double *)&v48);
    if ((_DWORD)v18)
      goto LABEL_59;
    if (*(_BYTE *)(DerivedStorage + 1))
    {
      if (!CMSampleBufferGetDataBuffer(v22) || !CMSampleBufferGetNumSamples(v22))
        goto LABEL_41;
      v23 = *(_QWORD *)(DerivedStorage + 288);
      v24 = *(uint64_t (**)(uint64_t, opaqueCMSampleBuffer *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (!v24)
        goto LABEL_40;
      v18 = v24(v23, v22);
      if (!(_DWORD)v18)
      {
        if (!_os_feature_enabled_impl())
          goto LABEL_26;
        v25 = *(_QWORD *)(DerivedStorage + 288);
        v26 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (v26)
        {
          v18 = v26(v25);
          if (!(_DWORD)v18)
          {
LABEL_26:
            v27 = *(const void **)(DerivedStorage + 256);
            if (v27)
            {
              v28 = (const __CFArray *)CFRetain(v27);
              v29 = *(const void **)(DerivedStorage + 256);
              if (v29)
              {
                CFRelease(v29);
                *(_QWORD *)(DerivedStorage + 256) = 0;
              }
              if (v28 && CFArrayGetCount(v28) >= 1)
              {
                CFArrayGetValueAtIndex(v28, 0);
                if (FigSampleBufferGetCaptionGroup())
                {
                  CFDataFromCaptionGroup = FigCaptionSerializerCreateCFDataFromCaptionGroup();
                  if ((_DWORD)CFDataFromCaptionGroup)
                  {
                    v35 = CFDataFromCaptionGroup;
                    v31 = 0;
LABEL_47:
                    CFRelease(v28);
                    v34 = v35;
                    goto LABEL_48;
                  }
                  CFDictionarySetValue(Mutable, CFSTR("SubtitleSerializedCaptionGroup"), value);
                }
                v31 = 0;
                v32 = FigCaptionGroupGetSliceCount() == 0;
LABEL_46:
                v35 = 0;
                v34 = 0;
                *a4 = CFRetain(Mutable);
                *v40 = v32;
                *v38 = HIBYTE(v50[0]);
                *v39 = v50[0];
                v36 = v49;
                *a8 = v48;
                a8[1] = v36;
                if (!v28)
                  goto LABEL_48;
                goto LABEL_47;
              }
LABEL_42:
              v31 = 0;
              v32 = 0;
              goto LABEL_46;
            }
LABEL_41:
            v28 = 0;
            goto LABEL_42;
          }
          goto LABEL_59;
        }
LABEL_40:
        v31 = 0;
        v34 = 4294954514;
        goto LABEL_48;
      }
LABEL_59:
      v34 = v18;
      v31 = 0;
      goto LABEL_48;
    }
    v31 = CFArrayCreateMutable(v16, 0, MEMORY[0x1E0C9B378]);
    if (v31)
    {
      if (aStr)
      {
        String = CFAttributedStringGetString(aStr);
        if (CFStringGetLength(String))
        {
          if (aStr)
          {
            CFArrayAppendValue(v31, aStr);
            v32 = aStr == 0;
LABEL_45:
            CFDictionarySetValue(Mutable, CFSTR("SubtitleContent"), v31);
            v28 = 0;
            goto LABEL_46;
          }
        }
        else
        {
          CFRelease(aStr);
          aStr = 0;
        }
      }
      v32 = 1;
      goto LABEL_45;
    }
  }
  else
  {
    v31 = 0;
  }
  v34 = 4294954510;
LABEL_48:
  if (value)
    CFRelease(value);
  if (v31)
    CFRelease(v31);
  if (aStr)
    CFRelease(aStr);
  if (Mutable)
    CFRelease(Mutable);
  if (cf)
    CFRelease(cf);
  return v34;
}

uint64_t caprp_isSubtitleOverHDRVideo()
{
  uint64_t v0;
  uint64_t FigBaseObject;
  unsigned int (*v2)(uint64_t, __CFString *, _QWORD, CFTypeRef *);
  BOOL v3;
  uint64_t v4;
  CFTypeRef cf;

  cf = 0;
  v0 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 304);
  if (!v0)
    return 0;
  FigBaseObject = FigBytePumpGetFigBaseObject(v0);
  v2 = *(unsigned int (**)(uint64_t, __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
  if (!v2)
    return 0;
  if (v2(FigBaseObject, CFSTR("HDRVideoPlaybackActive"), *MEMORY[0x1E0C9AE00], &cf))
    v3 = 0;
  else
    v3 = *MEMORY[0x1E0C9AE50] == (_QWORD)cf;
  v4 = v3;
  if (cf)
    CFRelease(cf);
  return v4;
}

uint64_t caprp_FigCaptionGroupConverterOutputCallbackMPEG4Part30(uint64_t a1, uint64_t a2, CFMutableArrayRef *a3)
{
  CFMutableArrayRef Mutable;
  uint64_t v5;

  if (!*a3)
  {
    Mutable = CFArrayCreateMutable(a3[1], 0, MEMORY[0x1E0C9B378]);
    *a3 = Mutable;
    if (!Mutable)
      return 4294954516;
  }
  if (!FigCaptionGroupGetSliceCount())
    return 0;
  v5 = FigSampleBufferCreateForCaptionGroup();
  if (!(_DWORD)v5)
    CFArrayAppendValue(*a3, 0);
  return v5;
}

void caprpFlushCallback(CFTypeRef *a1)
{
  CFTypeRef v2;

  ((void (*)(CFTypeRef, CFTypeRef))a1[1])(*a1, a1[2]);
  v2 = a1[2];
  if (v2)
    CFRelease(v2);
  if (*a1)
    CFRelease(*a1);
  free(a1);
}

uint64_t CreateSampleGeneratorForLPCM(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t result;

  v2 = malloc_type_calloc(1uLL, 0x50uLL, 0x10200406925D324uLL);
  if (!v2)
    return 12;
  v3 = v2;
  result = 0;
  a1[6] = LPCMPushForType;
  a1[7] = LPCMFlushForType;
  a1[8] = LPCMResyncForType;
  a1[9] = LPCMDestroyForType;
  a1[10] = LPCMReadBitRate;
  a1[11] = v3;
  return result;
}

uint64_t LPCMPushForType(uint64_t a1, CMBlockBufferRef theBuffer, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v11;
  size_t v12;
  uint64_t appended;
  int v14;
  UInt32 v15;
  int v16;
  UInt32 v17;
  CFTypeRef *v18;
  unsigned int v19;
  AudioChannelLayout *v20;
  AudioChannelLayout *v21;
  int v22;
  int v23;
  UInt32 v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, _QWORD, _QWORD);
  size_t v27;
  OpaqueCMBlockBuffer *v28;
  uint64_t Empty;
  uint64_t v30;
  uint64_t v32;
  const void *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  char *returnedPointerOut;
  _BYTE temporaryBlock[7];
  unsigned int v39;
  unint64_t v40;
  AudioStreamBasicDescription asbd;

  v11 = *(_QWORD *)(a1 + 88);
  v40 = 0;
  v39 = 0;
  returnedPointerOut = 0;
  if (*(_DWORD *)a1 == 1886612592)
    v12 = 7;
  else
    v12 = 4;
  if ((a5 & 1) != 0)
  {
    appended = LPCMFlushForType(a1);
    if ((_DWORD)appended)
      goto LABEL_59;
  }
  appended = CMBlockBufferAccessDataBytes(theBuffer, 0, v12, temporaryBlock, &returnedPointerOut);
  if ((_DWORD)appended)
    goto LABEL_59;
  v36 = a6;
  v35 = a5;
  v34 = a3;
  if (*(_DWORD *)a1 == 1886612592)
  {
    appended = PSLPCMGetSampleFrequency((uint64_t)returnedPointerOut, &v39);
    if ((_DWORD)appended)
      goto LABEL_59;
    v14 = PSLPCMGetChannelLayout((uint64_t)returnedPointerOut);
    v15 = PSLPCMGetQuantization((uint64_t)returnedPointerOut);
    appended = PSLPCMGetSamplesPerFrame((uint64_t)returnedPointerOut, &v40);
    if ((_DWORD)appended)
      goto LABEL_59;
    v16 = v40;
    v17 = PSLPCMGetFrameCountOfPacket((uint64_t)returnedPointerOut) * v16;
  }
  else
  {
    v39 = LPCMGetSampleFrequency((uint64_t)returnedPointerOut);
    if (!v39)
    {
      v25 = 0;
      goto LABEL_60;
    }
    v14 = LPCMGetChannelLayout((uint64_t)returnedPointerOut);
    v15 = LPCMGetBitsPerChannelSample((uint64_t)returnedPointerOut);
    v17 = LPCMGetSamplesPerFrame((unsigned __int16 *)returnedPointerOut);
  }
  v18 = (CFTypeRef *)(a1 + 40);
  if (*(_QWORD *)(a1 + 40)
    && *(unsigned __int16 *)(v11 + 16) == (unsigned __int16)v14
    && v17 == *(_DWORD *)(v11 + 4)
    && v39 == *(_DWORD *)v11)
  {
    goto LABEL_52;
  }
  LPCMFlushForType(a1);
  v19 = v39;
  memset(&asbd.mFormatID, 0, 32);
  v20 = (AudioChannelLayout *)malloc_type_calloc(1uLL, 20 * (unsigned __int16)v14 + 12, 0x90B379D8uLL);
  if (!v20)
    return 12;
  v21 = v20;
  if (v14 > 458755)
  {
    if (v14 > 589829)
    {
      if (v14 != 589830)
      {
        if (v14 == 655368 || v14 == 720904)
        {
          v20->mChannelLayoutTag = 0;
          v20->mNumberChannelDescriptions = (unsigned __int16)v14;
          v20->mChannelDescriptions[0].mChannelLabel = 1;
          v20[1].mChannelLayoutTag = 2;
          LODWORD(v20[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
          v20[2].mNumberChannelDescriptions = 5;
          LODWORD(v20[2].mChannelDescriptions[0].mCoordinates[2]) = 33;
          v20[3].mChannelDescriptions[0].mChannelFlags = 34;
          v20[4].mChannelBitmap = 6;
          LODWORD(v20[4].mChannelDescriptions[0].mCoordinates[1]) = 4 * (v14 != 655368);
          goto LABEL_42;
        }
        goto LABEL_40;
      }
LABEL_30:
      v20->mChannelLayoutTag = 0;
      v20->mNumberChannelDescriptions = (unsigned __int16)v14;
      v20->mChannelDescriptions[0].mChannelLabel = 1;
      v20[1].mChannelLayoutTag = 2;
      LODWORD(v20[1].mChannelDescriptions[0].mCoordinates[0]) = 3;
      v20[2].mNumberChannelDescriptions = 5;
      LODWORD(v20[2].mChannelDescriptions[0].mCoordinates[2]) = 6;
      v20[3].mChannelDescriptions[0].mChannelFlags = 4 * (v14 != 524294);
      goto LABEL_42;
    }
    if (v14 != 458756)
    {
      if (v14 == 524294)
        goto LABEL_30;
LABEL_40:
      v22 = 6619138;
      goto LABEL_41;
    }
    v22 = 8650756;
LABEL_41:
    v20->mChannelLayoutTag = v22;
    goto LABEL_42;
  }
  if (v14 > 327683)
  {
    if (v14 != 327684)
    {
      if (v14 != 393220)
        goto LABEL_40;
      v22 = 7536644;
      goto LABEL_41;
    }
  }
  else
  {
    if (v14 == 65538)
    {
      v20->mChannelLayoutTag = 0;
      v20->mNumberChannelDescriptions = (unsigned __int16)v14;
      v20->mChannelDescriptions[0].mChannelLabel = 42;
      v20[1].mChannelLayoutTag = 0;
      goto LABEL_42;
    }
    if (v14 != 262148)
      goto LABEL_40;
  }
  v20->mChannelLayoutTag = 0;
  v20->mNumberChannelDescriptions = (unsigned __int16)v14;
  v20->mChannelDescriptions[0].mChannelLabel = 1;
  v20[1].mChannelLayoutTag = 2;
  if (v14 == 262148)
    v23 = 3;
  else
    v23 = 9;
  LODWORD(v20[1].mChannelDescriptions[0].mCoordinates[0]) = v23;
  v20[2].mNumberChannelDescriptions = 0;
LABEL_42:
  asbd.mSampleRate = (double)v19;
  asbd.mFormatID = 1819304813;
  asbd.mFramesPerPacket = v17;
  asbd.mChannelsPerFrame = (unsigned __int16)v14;
  asbd.mBitsPerChannel = v15;
  if ((v15 & 0xFFFFFFF7) == 0x10)
  {
    asbd.mFormatFlags = 14;
    asbd.mFramesPerPacket = 1;
    v24 = (v15 >> 3) * (unsigned __int16)v14;
  }
  else
  {
    if (v15 != 20)
      goto LABEL_47;
    asbd.mFormatFlags = 22;
    asbd.mFramesPerPacket = 1;
    v24 = 3 * (unsigned __int16)v14;
  }
  asbd.mBytesPerFrame = v24;
  asbd.mBytesPerPacket = v24;
LABEL_47:
  if (*v18)
  {
    CFRelease(*v18);
    *v18 = 0;
  }
  v25 = CMAudioFormatDescriptionCreate(*(CFAllocatorRef *)(a1 + 8), &asbd, 0x20uLL, v21, 0, 0, 0, (CMAudioFormatDescriptionRef *)(a1 + 40));
  free(v21);
  if (!(_DWORD)v25)
  {
    *(_DWORD *)(v11 + 16) = v14;
    *(_DWORD *)v11 = v39;
    *(_DWORD *)(v11 + 4) = v17;
    *(_DWORD *)(v11 + 8) = v15;
    v26 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a1 + 16);
    if (!v26 || (appended = v26(a1, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)), !(_DWORD)appended))
    {
LABEL_52:
      v27 = CMBlockBufferGetDataLength(theBuffer) - v12;
      v28 = *(OpaqueCMBlockBuffer **)(v11 + 24);
      if (!v28)
      {
        Empty = CMBlockBufferCreateEmpty(*(CFAllocatorRef *)(a1 + 8), 1u, 0, (CMBlockBufferRef *)(v11 + 24));
        if ((_DWORD)Empty)
          return Empty;
        *(_DWORD *)(v11 + 32) = v17;
        *(_QWORD *)(v11 + 40) = v27;
        v30 = *(_QWORD *)(v34 + 16);
        *(_OWORD *)(v11 + 48) = *(_OWORD *)v34;
        *(_DWORD *)(v11 + 20) = v35;
        *(_QWORD *)(v11 + 64) = v30;
        *(_QWORD *)(v11 + 72) = v36;
        v28 = *(OpaqueCMBlockBuffer **)(v11 + 24);
      }
      appended = CMBlockBufferAppendBufferReference(v28, theBuffer, v12, v27, 0);
      if (!(_DWORD)appended)
      {
        *(_DWORD *)(v11 + 32) = v17;
        *(_QWORD *)(v11 + 40) = v27;
        return LPCMFlushForType(a1);
      }
    }
LABEL_59:
    v25 = appended;
LABEL_60:
    v32 = *(_QWORD *)(a1 + 88);
    v33 = *(const void **)(v32 + 24);
    if (v33)
      CFRelease(v33);
    *(_QWORD *)(v32 + 24) = 0;
    *(_DWORD *)(v32 + 32) = 0;
    *(_QWORD *)(v32 + 40) = 0;
  }
  return v25;
}

void LPCMResyncForType(uint64_t a1)
{
  uint64_t v1;
  const void *v2;

  v1 = *(_QWORD *)(a1 + 88);
  v2 = *(const void **)(v1 + 24);
  if (v2)
    CFRelease(v2);
  *(_QWORD *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = 0;
}

uint64_t LPCMFlushForType(uint64_t a1)
{
  uint64_t v1;
  OpaqueCMBlockBuffer *v2;
  const __CFAllocator *v4;
  const opaqueCMFormatDescription *v5;
  CMItemCount v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  CMTime presentationTimeStamp;
  CMAttachmentBearerRef target;

  v1 = *(_QWORD *)(a1 + 88);
  v2 = *(OpaqueCMBlockBuffer **)(v1 + 24);
  if (!v2)
    return 0;
  v4 = *(const __CFAllocator **)(a1 + 8);
  v5 = *(const opaqueCMFormatDescription **)(a1 + 40);
  v6 = *(unsigned int *)(v1 + 32);
  presentationTimeStamp = *(CMTime *)(v1 + 48);
  target = 0;
  v7 = CMAudioSampleBufferCreateWithPacketDescriptions(v4, v2, 1u, 0, 0, v5, v6, &presentationTimeStamp, 0, (CMSampleBufferRef *)&target);
  if ((_DWORD)v7)
  {
    v9 = v7;
  }
  else
  {
    v8 = *(unsigned int *)(v1 + 20);
    if ((v8 & 1) != 0)
    {
      CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E0CA2698], (CFTypeRef)*MEMORY[0x1E0C9AE50], 1u);
      v8 = *(unsigned int *)(v1 + 20);
    }
    v9 = (*(uint64_t (**)(uint64_t, _QWORD, CMAttachmentBearerRef, _QWORD, uint64_t))(a1 + 24))(a1, *(_QWORD *)(a1 + 32), target, *(_QWORD *)(v1 + 72), v8);
    if (target)
      CFRelease(target);
  }
  v10 = *(const void **)(v1 + 24);
  if (v10)
    CFRelease(v10);
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 28) = 0;
  *(_QWORD *)(v1 + 20) = 0;
  return v9;
}

void LPCMDestroyForType(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  v1 = *(_QWORD *)(a1 + 88);
  if (v1)
  {
    v3 = *(void **)(a1 + 88);
    if (*(_QWORD *)(v1 + 24))
    {
      CFRelease(*(CFTypeRef *)(v1 + 24));
      v3 = *(void **)(a1 + 88);
    }
    *(_QWORD *)(v1 + 24) = 0;
    *(_DWORD *)(v1 + 32) = 0;
    *(_QWORD *)(v1 + 40) = 0;
    free(v3);
    *(_QWORD *)(a1 + 88) = 0;
  }
}

uint64_t LPCMReadBitRate(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (!*(_QWORD *)(a1 + 40))
    return 4294954323;
  if (!a2)
    return 4294954516;
  result = 0;
  *a2 = *(unsigned int *)(*(_QWORD *)(a1 + 88) + 12);
  return result;
}

uint64_t FigTTMLSpanCreate(const __CFAllocator *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t DerivedStorage;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v11;
  uint64_t v12;

  if (a4)
  {
    FigTTMLNodeGetClassID();
    v8 = CMDerivedObjectCreate();
    if (!(_DWORD)v8)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v8 = FigTTMLInitializeNodeBaseStorage(DerivedStorage, (__int128 *)a3);
      if (!(_DWORD)v8)
      {
        v8 = FigTTMLAddCurrentElementAttributesToDictionary(a2, *(__CFDictionary **)(DerivedStorage + 24));
        if (!(_DWORD)v8)
        {
          Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
          *(_QWORD *)(DerivedStorage + 136) = Mutable;
          if (Mutable)
          {
            v11 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
            *(_QWORD *)(DerivedStorage + 144) = v11;
            if (v11)
            {
              *(_QWORD *)a3 = 0;
              *(_QWORD *)(a3 + 8) = 0;
              v12 = FigTTMLParseNode(a2, (uint64_t (*)(uint64_t, uint64_t *, CFTypeRef *))figTTMLSpan_ConsumeChildNode, (uint64_t *)a3);
              if (!(_DWORD)v12)
                *a4 = 0;
              return v12;
            }
          }
          return FigSignalErrorAt();
        }
      }
    }
    return v8;
  }
  return FigSignalErrorAt();
}

uint64_t figTTMLSpan_ConsumeChildNode(uint64_t a1, CFTypeRef *a2, void **a3)
{
  uint64_t DerivedStorage;
  CFAllocatorRef v7;
  uint64_t v8;
  __CFArray *v9;
  void *v10;
  CFAllocatorRef v11;
  uint64_t v12;
  uint64_t v14;
  CFStringRef theString;
  void *value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  theString = 0;
  value = 0;
  v7 = CFGetAllocator(*a2);
  v8 = FigTTMLParseAndCreateInlineClassNode(v7, a1, a2, &value);
  if ((_DWORD)v8)
    goto LABEL_24;
  if (!value)
  {
    v11 = CFGetAllocator(*a2);
    v8 = FigTTMLParseAndCreateAnimationClassNode((uint64_t)v11, a1, (uint64_t)a2, &value);
    if (!(_DWORD)v8)
    {
      v10 = value;
      if (!value)
      {
        v14 = FigTTMLSkipNode(a1, (uint64_t *)a2, *(__CFArray **)(DerivedStorage + 128));
        v12 = v14;
        if (a3 && !(_DWORD)v14)
          goto LABEL_12;
        goto LABEL_14;
      }
      v9 = *(__CFArray **)(DerivedStorage + 144);
      goto LABEL_10;
    }
LABEL_24:
    v12 = v8;
    goto LABEL_14;
  }
  v8 = FigTTMLNodeCopyNodeValue((uint64_t)value, &theString);
  if ((_DWORD)v8)
    goto LABEL_24;
  if (theString && !CFStringGetLength(theString))
  {
    if (value)
    {
      CFRelease(value);
      value = 0;
    }
    goto LABEL_11;
  }
  v9 = *(__CFArray **)(DerivedStorage + 136);
  v10 = value;
LABEL_10:
  CFArrayAppendValue(v9, v10);
LABEL_11:
  if (a3)
  {
LABEL_12:
    v12 = 0;
    *a3 = value;
    value = 0;
    goto LABEL_16;
  }
  v12 = 0;
LABEL_14:
  if (value)
    CFRelease(value);
LABEL_16:
  if (theString)
    CFRelease(theString);
  return v12;
}

void figTTMLSpan_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 136);
  if (v1)
    CFRelease(v1);
  v2 = *(const void **)(DerivedStorage + 144);
  if (v2)
    CFRelease(v2);
  FigTTMLReleaseNodeBaseStorage(DerivedStorage);
}

CFStringRef figTTMLSpan_CopyDebugDesc()
{
  const void *v0;
  CFStringRef v1;

  CMBaseObjectGetDerivedStorage();
  v0 = (const void *)FigCFCopyCompactDescription();
  v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("span: %@"), v0);
  if (v0)
    CFRelease(v0);
  return v1;
}

uint64_t figTTMLSpan_CopyChildNodeArray(uint64_t a1, uint64_t *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  *a2 = FigCFArrayCreateConcatenationOfTwoArrays();
  return 0;
}

uint64_t figTTMLSpan_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2)
    return FigSignalErrorAt();
  *a2 = 5;
  return 0;
}

uint64_t LPCMCheckHeader(unsigned __int16 *a1)
{
  uint64_t result;
  int v3;
  char v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  _BOOL4 v8;
  _BOOL4 v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v18;
  BOOL v19;
  int v21;

  result = 0;
  v3 = __rev16(*a1);
  v4 = *((_BYTE *)a1 + 2);
  v5 = v4 & 0xF;
  v6 = *((unsigned __int8 *)a1 + 3);
  v7 = v6 >> 6;
  if (v3 <= 4319)
  {
    if (v3 > 1919)
    {
      switch(v3)
      {
        case 1920:
          if (v7 == 1 && v5 == 1)
            return 1;
          result = 0;
          if ((v4 & 0xD0) != 0x10 || v7 != 1)
            return result;
          break;
        case 2880:
          if ((v7 == 1 && (v4 & 0xE0) == 128 || (v6 & 0x80u) != 0) && v5 == 1)
            return 1;
          result = 0;
          if ((v4 & 0xD0) != 0x10 || ((char)v6 & 0x80000000) == 0)
            return result;
          break;
        case 3840:
          v10 = (v4 & 0xE0) == 160;
          if (v7 != 1)
            v10 = 0;
          v11 = v5 == 1 && v10;
          v12 = v5 == 2 && v7 == 1;
          if (!v11 && !v12)
          {
            result = 0;
            if ((v4 & 0xD0) != 0x10 || v7 != 1)
              return result;
            goto LABEL_104;
          }
          return 1;
        default:
          return result;
      }
      if (v5 != 2)
        return result;
      return 1;
    }
    if (v3 == 960)
      return (v4 & 0xD0) == 0x10 && v7 == 1 && v5 == 1;
    if (v3 != 1440)
      return result;
    if ((v4 & 0xD0) == 0x10)
      return (v6 & 0x80u) != 0 && v5 == 1;
    return 0;
  }
  if (v3 > 8639)
  {
    switch(v3)
    {
      case 8640:
        if ((v4 & 0xE0) == 0x80)
          return (v6 & 0x80u) != 0 && v5 == 2;
        break;
      case 11520:
        v21 = v4 & 0xE0;
        if (v21 == 128)
        {
          if ((v6 & 0x80) != 0 && v5 == 3)
            return 1;
        }
        else if (v21 == 160 && (v6 & 0x80) != 0 && v5 == 2)
        {
          return 1;
        }
        result = 0;
        if ((v6 & 0x80) == 0)
          return result;
LABEL_104:
        if (v5 != 3)
          return result;
        return 1;
      case 17280:
        if ((v4 & 0xE0) == 0x80)
          return (v6 & 0x80u) != 0 && v5 == 3;
        break;
      default:
        return result;
    }
    return 0;
  }
  switch(v3)
  {
    case 4320:
      if ((v4 & 0xE0) == 0x80)
        return (v6 & 0x80u) != 0 && v5 == 1;
      return 0;
    case 5760:
      if ((v4 & 0xE0) != 0xA0 || (v6 & 0x80) == 0 || v5 != 1)
      {
        v18 = v7 == 1 && (v4 & 0xE0) == 128;
        v19 = v18 || (v6 & 0x80u) != 0;
        if (!v19 || v5 != 2)
        {
          result = 0;
          if ((v4 & 0xD0) != 0x10 || ((char)v6 & 0x80000000) == 0)
            return result;
          goto LABEL_104;
        }
      }
      return 1;
    case 7680:
      v8 = (v4 & 0xE0) == 160;
      if (v7 != 1)
        v8 = 0;
      if (v5 != 2)
        v8 = 0;
      v9 = v5 == 3 && v7 == 1;
      return v8 | v9;
  }
  return result;
}

uint64_t LPCMGetChannelLayout(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(unsigned __int8 *)(a1 + 2) >> 4) - 1;
  if (v1 > 0xA)
    return 196610;
  else
    return dword_1932FEAB8[v1];
}

uint64_t LPCMGetBitsPerChannelSample(uint64_t a1)
{
  int v1;
  unsigned int v2;

  v1 = *(unsigned __int8 *)(a1 + 3) >> 6;
  if (v1 == 3)
    v2 = 24;
  else
    v2 = 16;
  if (v1 == 2)
    return 20;
  else
    return v2;
}

uint64_t LPCMGetSamplesPerFrame(unsigned __int16 *a1)
{
  unsigned int v2;
  int v3;
  int v4;

  v2 = __rev16(*a1);
  v3 = (unsigned __int16)LPCMGetChannelLayout((uint64_t)a1);
  if (*((char *)a1 + 3) >= 0)
    v4 = 2;
  else
    v4 = 3;
  return v2 / (v4 * v3);
}

uint64_t LPCMGetSampleFrequency(uint64_t a1)
{
  int v1;
  unsigned int v2;

  v1 = *(_BYTE *)(a1 + 2) & 0xF;
  if (v1 == 5)
    v2 = 192000;
  else
    v2 = 48000;
  if (v1 == 4)
    return 96000;
  else
    return v2;
}

uint64_t LPCMGetFrameSize(unsigned __int16 *a1)
{
  return __rev16(*a1) + 4;
}

uint64_t PSLPCMCheckHeader(_BYTE *a1)
{
  uint64_t result;
  uint64_t v3;

  if ((*a1 & 0xF8) == 0xA0)
    return PSLPCMGetBytesPerFrame((uint64_t)a1, &v3);
  result = FigSignalErrorAt();
  if (!(_DWORD)result)
    return PSLPCMGetBytesPerFrame((uint64_t)a1, &v3);
  return result;
}

uint64_t PSLPCMGetBytesPerFrame(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;

  *a2 = 0;
  v8 = 0;
  result = PSLPCMGetSampleFrequency(a1, &v8);
  if (!(_DWORD)result)
  {
    v5 = v8 / 0x258uLL + v8 / 0x258 * (unint64_t)(*(_BYTE *)(a1 + 5) & 7);
    v6 = *(_BYTE *)(a1 + 5) & 0xC0;
    if (v6 == 128)
    {
      result = 0;
      v7 = 3 * v5;
      goto LABEL_7;
    }
    if (v6 == 64)
    {
      return 4294954321;
    }
    else
    {
      if ((*(_BYTE *)(a1 + 5) & 0xC0) == 0)
      {
        result = 0;
        v7 = 2 * v5;
LABEL_7:
        *a2 = v7;
        return result;
      }
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t PSLPCMGetFrameCountOfPacket(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1);
}

uint64_t PSLPCMGetByteOffsetToStartFrameOfPacket(uint64_t a1)
{
  return __rev16(*(unsigned __int16 *)(a1 + 2));
}

uint64_t PSLPCMGetSampleFrequency(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
  if ((*(_BYTE *)(a1 + 5) & 0x30) != 0)
    return FigSignalErrorAt();
  *a2 = 48000;
  return 0;
}

uint64_t PSLPCMGetSamplesPerFrame(uint64_t a1, unint64_t *a2)
{
  uint64_t result;
  unsigned int v4;

  v4 = 0;
  *a2 = 0;
  result = PSLPCMGetSampleFrequency(a1, &v4);
  if (!(_DWORD)result)
    *a2 = v4 / 0x258uLL;
  return result;
}

uint64_t PSLPCMGetChannelLayout(uint64_t a1)
{
  return dword_1932FEAE4[*(_BYTE *)(a1 + 5) & 7];
}

uint64_t PSLPCMGetQuantization(uint64_t a1)
{
  int v1;
  int v2;
  unsigned int v3;

  v1 = *(_BYTE *)(a1 + 5) & 0xC0;
  if ((*(_BYTE *)(a1 + 5) & 0xC0) != 0)
    v2 = 0;
  else
    v2 = 16;
  if (v1 == 64)
    v3 = 20;
  else
    v3 = v2;
  if (v1 == 128)
    return 24;
  else
    return v3;
}

uint64_t FigPlaybackItemSegmentGetType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

__n128 FigPlaybackItemSegmentGetTimeMapping@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;

  v2 = *(_OWORD *)(a1 + 68);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 52);
  *(_OWORD *)(a2 + 48) = v2;
  v3 = *(_OWORD *)(a1 + 100);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 84);
  *(_OWORD *)(a2 + 80) = v3;
  result = *(__n128 *)(a1 + 20);
  v5 = *(_OWORD *)(a1 + 36);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v5;
  return result;
}

uint64_t FigPlaybackItemSegmentGetLoadedTimeRanges(uint64_t a1)
{
  return *(_QWORD *)(a1 + 120);
}

uint64_t FigPlaybackItemSegmentGetStartDate(uint64_t a1)
{
  return *(_QWORD *)(a1 + 128);
}

uint64_t FigPlaybackItemSegmentGetInterstitialEvent(uint64_t a1)
{
  return *(_QWORD *)(a1 + 136);
}

uint64_t FigPlaybackItemSegmentCreate(int a1, __int128 *a2, const void *a3, const void *a4, const void *a5, _QWORD *a6)
{
  uint64_t Instance;
  _QWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  CFTypeRef v18;
  CFTypeRef v19;
  CFTypeRef v20;

  if (!a6 || a1 != 1 && (a1 || a5))
    return FigSignalErrorAt();
  MEMORY[0x19402F294](&FigPlaybackItemSegmentGetTypeID_sFigPlaybackItemSegmentRegisterOnce, FigPlaybackItemSegment_initOnce);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v13 = (_QWORD *)Instance;
  *(_DWORD *)(Instance + 16) = a1;
  v14 = *a2;
  *(_OWORD *)(Instance + 36) = a2[1];
  *(_OWORD *)(Instance + 20) = v14;
  v15 = a2[2];
  v16 = a2[3];
  v17 = a2[4];
  *(_OWORD *)(Instance + 100) = a2[5];
  *(_OWORD *)(Instance + 84) = v17;
  *(_OWORD *)(Instance + 68) = v16;
  *(_OWORD *)(Instance + 52) = v15;
  if (a3)
    v18 = CFRetain(a3);
  else
    v18 = 0;
  v13[15] = v18;
  if (a4)
    v19 = CFRetain(a4);
  else
    v19 = 0;
  v13[16] = v19;
  if (a5)
    v20 = CFRetain(a5);
  else
    v20 = 0;
  v13[17] = v20;
  *a6 = v13;
  return 0;
}

uint64_t FigPlaybackItemSegment_initOnce()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigPlaybackItemSegmentID = result;
  return result;
}

double fpis_init(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

void fpis_finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)a1[15];
  if (v2)
  {
    CFRelease(v2);
    a1[15] = 0;
  }
  v3 = (const void *)a1[16];
  if (v3)
  {
    CFRelease(v3);
    a1[16] = 0;
  }
  v4 = (const void *)a1[17];
  if (v4)
  {
    CFRelease(v4);
    a1[17] = 0;
  }
}

CFStringRef fpfis_copyFormattingDesc(uint64_t a1)
{
  const __CFString *v2;
  const __CFAllocator *v3;
  const __CFString *v4;
  uint64_t v5;
  Float64 Seconds;
  __int128 v7;
  Float64 v8;
  Float64 v9;
  __int128 v10;
  double v11;
  const __CFString *v12;
  CFStringRef v13;
  CMTime v15;
  CMTimeRange time;
  CMTime v17;

  v2 = (const __CFString *)FigCFCopyCompactDescription();
  if (fpfis_copyFormattingDesc_onceToken != -1)
    dispatch_once(&fpfis_copyFormattingDesc_onceToken, &__block_literal_global_74);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (*(_DWORD *)(a1 + 16))
    v4 = CFSTR("I");
  else
    v4 = CFSTR("P");
  v5 = *(_QWORD *)(a1 + 128);
  *(_OWORD *)&time.start.value = *(_OWORD *)(a1 + 20);
  time.start.epoch = *(_QWORD *)(a1 + 36);
  Seconds = CMTimeGetSeconds(&time.start);
  v7 = *(_OWORD *)(a1 + 36);
  *(_OWORD *)&time.start.value = *(_OWORD *)(a1 + 20);
  *(_OWORD *)&time.start.epoch = v7;
  *(_OWORD *)&time.duration.timescale = *(_OWORD *)(a1 + 52);
  CMTimeRangeGetEnd(&v17, &time);
  v8 = CMTimeGetSeconds(&v17);
  *(_OWORD *)&time.start.value = *(_OWORD *)(a1 + 68);
  time.start.epoch = *(_QWORD *)(a1 + 84);
  v9 = CMTimeGetSeconds(&time.start);
  v10 = *(_OWORD *)(a1 + 84);
  *(_OWORD *)&time.start.value = *(_OWORD *)(a1 + 68);
  *(_OWORD *)&time.start.epoch = v10;
  *(_OWORD *)&time.duration.timescale = *(_OWORD *)(a1 + 100);
  CMTimeRangeGetEnd(&v15, &time);
  v11 = CMTimeGetSeconds(&v15);
  if (fpfis_copyFormattingDesc_includeLoadedTimeRange)
    v12 = v2;
  else
    v12 = &stru_1E2FD85F8;
  v13 = CFStringCreateWithFormat(v3, 0, CFSTR("[%@] %@: [%.3f, %.3f] [%.3f, %.3f] %@"), v4, v5, *(_QWORD *)&Seconds, *(_QWORD *)&v8, *(_QWORD *)&v9, *(_QWORD *)&v11, v12);
  if (v2)
    CFRelease(v2);
  return v13;
}

uint64_t __fpfis_copyFormattingDesc_block_invoke()
{
  uint64_t result;

  result = FigGetCFPreferenceBooleanWithDefault();
  fpfis_copyFormattingDesc_includeLoadedTimeRange = result;
  return result;
}

uint64_t FigCaptionRendererNodeCreate(_QWORD *a1)
{
  const __CFAllocator *v2;
  uint64_t v3;
  uint64_t DerivedStorage;
  const CFArrayCallBacks *v5;
  __int128 v6;
  __int128 v7;
  __int128 v13;

  *a1 = 0;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MEMORY[0x19402F294](&FigCaptionRendererNodeGetClassID_sRegisterFigCaptionRendererNodeBaseTypeOnce, RegisterFigCaptionRendererNodeBaseType);
  v3 = CMDerivedObjectCreate();
  if (!(_DWORD)v3)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v5 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    *(_QWORD *)(DerivedStorage + 8) = CFArrayCreateMutable(v2, 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(DerivedStorage + 312) = CFArrayCreateMutable(v2, 0, v5);
    *(_WORD *)(DerivedStorage + 304) = 257;
    *(_OWORD *)(DerivedStorage + 48) = FCRRectNull;
    *(_OWORD *)(DerivedStorage + 64) = *(_OWORD *)&byte_1932FABC0;
    *(_OWORD *)(DerivedStorage + 80) = xmmword_1932FABD0;
    *(_OWORD *)(DerivedStorage + 96) = *(_OWORD *)&byte_1932FABE0;
    v6 = *MEMORY[0x1E0C9D628];
    v7 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
    *(_OWORD *)(DerivedStorage + 112) = *MEMORY[0x1E0C9D628];
    *(_OWORD *)(DerivedStorage + 128) = v7;
    *(_OWORD *)(DerivedStorage + 16) = v6;
    *(_OWORD *)(DerivedStorage + 32) = v7;
    __asm { FMOV            V0.2D, #-1.0 }
    v13 = *MEMORY[0x1E0C9D820];
    *(_OWORD *)(DerivedStorage + 240) = _Q0;
    *(_OWORD *)(DerivedStorage + 256) = v13;
    *(_QWORD *)(DerivedStorage + 272) = 0;
    *(_DWORD *)(DerivedStorage + 280) = 0;
    *(_QWORD *)(DerivedStorage + 288) = 0;
    *(_QWORD *)(DerivedStorage + 296) = 0;
    *a1 = 0;
  }
  return v3;
}

void FigCaptionRendererNodeFinalize()
{
  uint64_t DerivedStorage;
  void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRelease(*(CFTypeRef *)(DerivedStorage + 8));
  CFRelease(*(CFTypeRef *)(DerivedStorage + 312));
  CGImageRelease(*(CGImageRef *)(DerivedStorage + 296));
  v1 = *(void **)(DerivedStorage + 288);
  if (v1)
  {
    free(v1);
    *(_QWORD *)(DerivedStorage + 288) = 0;
  }
}

__CFString *FigCaptionRendererNodeCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererNode: <%p>"), a1);
  return Mutable;
}

__CFString *FigCaptionRendererNode_FigCaptionRendererNodeProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererNode <FigCaptionRendererNodeProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_SetParentNode(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)CMBaseObjectGetDerivedStorage() = a2;
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_GetParentNode(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_GetChildren(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_HasChildNode(uint64_t a1, const void *a2, BOOL *a3)
{
  const __CFArray *v5;
  CFRange v7;

  v5 = *(const __CFArray **)(CMBaseObjectGetDerivedStorage() + 8);
  v7.length = CFArrayGetCount(v5);
  v7.location = 0;
  *a3 = CFArrayGetFirstIndexOfValue(v5, v7, a2) >= 0;
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_AddChildNode(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 8), a2);
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_RemoveChildNode(uint64_t a1, const void *a2)
{
  const __CFArray *v3;
  CFIndex FirstIndexOfValue;
  CFRange v6;

  v3 = *(const __CFArray **)(CMBaseObjectGetDerivedStorage() + 8);
  v6.length = CFArrayGetCount(v3);
  v6.location = 0;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v3, v6, a2);
  CFArrayRemoveValueAtIndex(v3, FirstIndexOfValue);
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_RemovelAllChildrenNodes()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 8));
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_SetViewport(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  uint64_t DerivedStorage;
  CGRect v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10.origin.x = a1;
  v10.origin.y = a2;
  v10.size.width = a3;
  v10.size.height = a4;
  if (!CGRectEqualToRect(*(CGRect *)(DerivedStorage + 16), v10))
  {
    *(CGFloat *)(DerivedStorage + 16) = a1;
    *(CGFloat *)(DerivedStorage + 24) = a2;
    *(CGFloat *)(DerivedStorage + 32) = a3;
    *(CGFloat *)(DerivedStorage + 40) = a4;
    *(_BYTE *)(DerivedStorage + 305) = 1;
  }
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_GetViewport(uint64_t a1, _OWORD *a2)
{
  uint64_t DerivedStorage;
  __int128 v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(_OWORD *)(DerivedStorage + 32);
  *a2 = *(_OWORD *)(DerivedStorage + 16);
  a2[1] = v4;
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_SetFCRBounds(uint64_t a1, __int128 *a2)
{
  _OWORD *DerivedStorage;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  DerivedStorage = (_OWORD *)CMBaseObjectGetDerivedStorage();
  v4 = a2[3];
  v6 = *a2;
  v5 = a2[1];
  DerivedStorage[5] = a2[2];
  DerivedStorage[6] = v4;
  DerivedStorage[3] = v6;
  DerivedStorage[4] = v5;
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_GetFCRBounds(uint64_t a1, _OWORD *a2)
{
  _OWORD *DerivedStorage;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  DerivedStorage = (_OWORD *)CMBaseObjectGetDerivedStorage();
  v4 = DerivedStorage[6];
  v6 = DerivedStorage[3];
  v5 = DerivedStorage[4];
  a2[2] = DerivedStorage[5];
  a2[3] = v4;
  *a2 = v6;
  a2[1] = v5;
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_SetCGBounds(double a1, double a2, double a3, double a4)
{
  uint64_t DerivedStorage;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  const __CFArray *v21;
  CFIndex v22;
  const void *ValueAtIndex;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t ProtocolVTable;
  uint64_t v29;
  void (*v30)(const void *, double, double, double, double);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 112) = a1;
  *(double *)(DerivedStorage + 120) = a2;
  *(double *)(DerivedStorage + 128) = a3;
  *(double *)(DerivedStorage + 136) = a4;
  v9 = 0.0;
  v10 = 0.0;
  if (*(_QWORD *)(DerivedStorage + 184) == 622862368)
  {
    FigGeometryDimensionGetCGFloat();
    v10 = v11 / 100.0 * *(double *)(DerivedStorage + 128);
  }
  if (*(_QWORD *)(DerivedStorage + 200) == 622862368)
  {
    FigGeometryDimensionGetCGFloat();
    v9 = v12 / 100.0 * *(double *)(DerivedStorage + 128);
  }
  v13 = 0.0;
  if (*(_QWORD *)(DerivedStorage + 216) == 622862368)
  {
    FigGeometryDimensionGetCGFloat();
    v13 = v14 / 100.0 * *(double *)(DerivedStorage + 136);
  }
  if (*(_QWORD *)(DerivedStorage + 232) == 622862368)
  {
    FigGeometryDimensionGetCGFloat();
    v16 = v15 / 100.0;
    v17 = *(double *)(DerivedStorage + 136);
    v18 = v16 * v17;
  }
  else
  {
    v17 = *(double *)(DerivedStorage + 136);
    v18 = 0.0;
  }
  v19 = v18 + *(double *)(DerivedStorage + 120);
  v20 = *(double *)(DerivedStorage + 128) - v10 - v9;
  *(double *)(DerivedStorage + 144) = v10 + *(double *)(DerivedStorage + 112);
  *(double *)(DerivedStorage + 152) = v19;
  *(double *)(DerivedStorage + 160) = v20;
  *(double *)(DerivedStorage + 168) = v17 - v13 - v18;
  v21 = *(const __CFArray **)(DerivedStorage + 8);
  if (CFArrayGetCount(v21) >= 1)
  {
    v22 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v21, v22);
      v24 = *(double *)(DerivedStorage + 144);
      v25 = *(double *)(DerivedStorage + 152);
      v26 = *(double *)(DerivedStorage + 160);
      v27 = *(double *)(DerivedStorage + 168);
      FigCaptionRendererNodeProtocolGetProtocolID();
      ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable)
      {
        v29 = *(_QWORD *)(ProtocolVTable + 16);
        if (v29)
        {
          v30 = *(void (**)(const void *, double, double, double, double))(v29 + 64);
          if (v30)
            v30(ValueAtIndex, v24, v25, v26, v27);
        }
      }
      ++v22;
    }
    while (CFArrayGetCount(v21) > v22);
  }
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_GetCGBounds(uint64_t a1, _OWORD *a2)
{
  uint64_t DerivedStorage;
  __int128 v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(_OWORD *)(DerivedStorage + 128);
  *a2 = *(_OWORD *)(DerivedStorage + 112);
  a2[1] = v4;
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_SetCGSize(double a1, double a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 256) = a1;
  *(double *)(DerivedStorage + 264) = a2;
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_GetCGSize(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 256);
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_SetCGOrigin(double a1, double a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 240) = a1;
  *(double *)(DerivedStorage + 248) = a2;
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_GetCGOrigin(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 240);
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_SetPaddings(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *DerivedStorage;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[22] = a2;
  DerivedStorage[23] = a3;
  DerivedStorage[24] = a4;
  DerivedStorage[25] = a5;
  DerivedStorage[26] = a6;
  DerivedStorage[27] = a7;
  DerivedStorage[28] = a9;
  DerivedStorage[29] = a10;
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_GetInsetCGBounds(uint64_t a1, _OWORD *a2)
{
  uint64_t DerivedStorage;
  __int128 v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(_OWORD *)(DerivedStorage + 160);
  *a2 = *(_OWORD *)(DerivedStorage + 144);
  a2[1] = v4;
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_PurgeImageCache()
{
  uint64_t DerivedStorage;
  void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(void **)(DerivedStorage + 288);
  if (v1)
  {
    *(_QWORD *)(DerivedStorage + 288) = 0;
    free(v1);
    *(_QWORD *)(DerivedStorage + 272) = 0;
    *(_DWORD *)(DerivedStorage + 280) = 0;
  }
  CGImageRelease(*(CGImageRef *)(DerivedStorage + 296));
  *(_QWORD *)(DerivedStorage + 296) = 0;
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_SetImageCache(uint64_t a1, CGImage *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CGImageRelease(*(CGImageRef *)(DerivedStorage + 296));
  *(_QWORD *)(DerivedStorage + 296) = CGImageRetain(a2);
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_GetImageCache(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 296);
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_GetImageCacheWidth(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 272);
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_GetImageCacheHeight(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 276);
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_AllocateImageBuffer(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t DerivedStorage;
  unint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  void *v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 <= 0x10000 && a3 <= 0x10000 && a4 < 0x11)
  {
    v8 = a3 * (unint64_t)a2 * a4 * a4;
    if (!(v8 >> 29))
    {
      v9 = DerivedStorage;
      v10 = *(_DWORD *)(DerivedStorage + 276) * *(_DWORD *)(DerivedStorage + 272) * *(_DWORD *)(DerivedStorage + 280);
      v11 = *(void **)(DerivedStorage + 288);
      if (v10 == a3 * a2 * a4)
      {
        bzero(v11, 4 * v8);
        return 0;
      }
      if (v11)
      {
        *(_QWORD *)(v9 + 288) = 0;
        free(v11);
        *(_QWORD *)(v9 + 272) = 0;
        *(_DWORD *)(v9 + 280) = 0;
      }
      if (!v8 || (v12 = malloc_type_calloc(4 * v8, 1uLL, 0xF28EB18CuLL), (*(_QWORD *)(v9 + 288) = v12) != 0))
      {
        *(_DWORD *)(v9 + 272) = a2;
        *(_DWORD *)(v9 + 276) = a3;
        *(_DWORD *)(v9 + 280) = a4;
        return 0;
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_GetImageBuffer(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 288);
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_SetNeedRedraw(uint64_t a1, char a2)
{
  *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 304) = a2;
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_GetNeedRedraw(uint64_t a1, _BYTE *a2)
{
  *a2 = *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 304);
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_SetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  const __CFArray *v4;
  CFIndex v5;
  const void *ValueAtIndex;
  uint64_t ProtocolVTable;
  uint64_t v8;
  void (*v9)(const void *, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(DerivedStorage + 305) = a2;
  v4 = *(const __CFArray **)(DerivedStorage + 8);
  if (CFArrayGetCount(v4) >= 1)
  {
    v5 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v4, v5);
      FigCaptionRendererNodeProtocolGetProtocolID();
      ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable)
      {
        v8 = *(_QWORD *)(ProtocolVTable + 16);
        if (v8)
        {
          v9 = *(void (**)(const void *, uint64_t))(v8 + 232);
          if (v9)
            v9(ValueAtIndex, a2);
        }
      }
      ++v5;
    }
    while (CFArrayGetCount(v4) > v5);
  }
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_GetNeedLayout(uint64_t a1, _BYTE *a2)
{
  *a2 = *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 305);
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_HasActions(uint64_t a1, BOOL *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *a2 = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 312)) > 0;
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_SetZOrder()
{
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_GetZOrder(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_ResetNodeTree(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t ProtocolVTable;
  uint64_t v9;
  void (*v10)(uint64_t);
  const __CFArray *v11;
  CFIndex v12;
  const void *ValueAtIndex;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(const void *);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_WORD *)(DerivedStorage + 304) = 257;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(DerivedStorage + 240) = _Q0;
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v9 = *(_QWORD *)(ProtocolVTable + 16);
    if (v9)
    {
      v10 = *(void (**)(uint64_t))(v9 + 328);
      if (v10)
        v10(a1);
    }
  }
  v11 = *(const __CFArray **)(DerivedStorage + 8);
  if (CFArrayGetCount(v11) >= 1)
  {
    v12 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v11, v12);
      FigCaptionRendererNodeProtocolGetProtocolID();
      v14 = CMBaseObjectGetProtocolVTable();
      if (v14)
      {
        v15 = *(_QWORD *)(v14 + 16);
        if (v15)
        {
          v16 = *(void (**)(const void *))(v15 + 272);
          if (v16)
            v16(ValueAtIndex);
        }
      }
      ++v12;
    }
    while (CFArrayGetCount(v11) > v12);
  }
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_Draw(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  CGSize v6;
  uint64_t ProtocolVTable;
  uint64_t v8;
  void (*v9)(uint64_t, CGRect *);
  uint64_t result;
  CGRect v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294950096;
  v5 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 320) && *(_BYTE *)(a2 + 746))
  {
    CGContextSaveGState(*(CGContextRef *)(a2 + 320));
    v6 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
    v11.origin = (CGPoint)*MEMORY[0x1E0C9D628];
    v11.size = v6;
    FigCaptionRendererNodeProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      v8 = *(_QWORD *)(ProtocolVTable + 16);
      if (v8)
      {
        v9 = *(void (**)(uint64_t, CGRect *))(v8 + 104);
        if (v9)
          v9(a1, &v11);
      }
    }
    CGContextSetRGBStrokeColor(*(CGContextRef *)(a2 + 320), 1.0, 0.0, 1.0, 1.0);
    CGContextSetLineWidth(*(CGContextRef *)(a2 + 320), 3.0);
    CGContextStrokeRect(*(CGContextRef *)(a2 + 320), v11);
    CGContextRestoreGState(*(CGContextRef *)(a2 + 320));
  }
  result = 0;
  *(_BYTE *)(v5 + 304) = 0;
  return result;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_Layout(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294950096;
  v4 = DerivedStorage;
  result = 0;
  *(_BYTE *)(v4 + 305) = 0;
  return result;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_ExecActions(uint64_t a1, uint64_t a2)
{
  if (a2)
    return 0;
  else
    return 4294950096;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_Compose()
{
  uint64_t DerivedStorage;
  const __CFArray *v1;
  CFIndex Count;
  CFIndex v3;
  __CFArray *MutableCopy;
  __CFArray *v5;
  CFRange v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const __CFArray **)(DerivedStorage + 8);
  if (v1)
  {
    Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 8));
    if (Count >= 1)
    {
      v3 = Count;
      MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v1);
      if (MutableCopy)
      {
        v5 = MutableCopy;
        v7.location = 0;
        v7.length = v3;
        CFArraySortValues(MutableCopy, v7, (CFComparatorFunction)nodeComparatorZIndex, 0);
        FigCFArrayApplyFunction();
        CFRelease(v5);
      }
    }
  }
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_OnChildUpdateDisplayRequest(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  void (*v6)(uint64_t, _OWORD *);
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v8 = *a2;
  v9 = a2[1];
  v10 = *((_QWORD *)a2 + 4);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v5 = *(_QWORD *)(ProtocolVTable + 16);
    if (v5)
    {
      v6 = *(void (**)(uint64_t, _OWORD *))(v5 + 312);
      if (v6)
      {
        v11[0] = v8;
        v11[1] = v9;
        v12 = v10;
        v6(v3, v11);
      }
    }
  }
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_AddAction(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 312), a2);
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_RemoveAllActions()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 312));
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_SetActions(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  CFTypeRef v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(const void **)(DerivedStorage + 312);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 312) = 0;
  }
  if (a2)
    v5 = CFRetain(a2);
  else
    v5 = 0;
  *(_QWORD *)(DerivedStorage + 312) = v5;
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_GetActions(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 312);
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_SelectAt(uint64_t a1, BOOL *a2, CGFloat a3, CGFloat a4)
{
  uint64_t DerivedStorage;
  CGSize v9;
  uint64_t ProtocolVTable;
  uint64_t v11;
  void (*v12)(uint64_t, CGRect *);
  const __CFArray *v13;
  BOOL v14;
  _QWORD context[2];
  uint64_t v17;
  CGRect v18;
  CFRange v19;
  CGPoint v20;
  CGPoint v21;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
  v18.origin = (CGPoint)*MEMORY[0x1E0C9D628];
  v18.size = v9;
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v11 = *(_QWORD *)(ProtocolVTable + 16);
    if (v11)
    {
      v12 = *(void (**)(uint64_t, CGRect *))(v11 + 104);
      if (v12)
        v12(a1, &v18);
    }
  }
  v17 = 0;
  *(CGFloat *)context = a3;
  *(CGFloat *)&context[1] = a4;
  v13 = *(const __CFArray **)(DerivedStorage + 8);
  v19.length = CFArrayGetCount(v13);
  v19.location = 0;
  CFArrayApplyFunction(v13, v19, (CFArrayApplierFunction)SelectChildNodes_0, context);
  if ((_BYTE)v17)
  {
    if (!a2)
      return 0;
  }
  else
  {
    v20.x = a3;
    v20.y = a4;
    *(_BYTE *)(DerivedStorage + 320) = CGRectContainsPoint(v18, v20);
    if (!a2)
      return 0;
  }
  if ((_BYTE)v17)
  {
    v14 = 1;
  }
  else
  {
    v21.x = a3;
    v21.y = a4;
    v14 = CGRectContainsPoint(v18, v21);
  }
  *a2 = v14;
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_UnselectAt(uint64_t a1, BOOL *a2, CGFloat a3, CGFloat a4)
{
  uint64_t DerivedStorage;
  CGSize v9;
  uint64_t ProtocolVTable;
  uint64_t v11;
  void (*v12)(uint64_t, CGRect *);
  const __CFArray *v13;
  BOOL v14;
  _QWORD context[2];
  uint64_t v17;
  CGRect v18;
  CFRange v19;
  CGPoint v20;
  CGPoint v21;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
  v18.origin = (CGPoint)*MEMORY[0x1E0C9D628];
  v18.size = v9;
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v11 = *(_QWORD *)(ProtocolVTable + 16);
    if (v11)
    {
      v12 = *(void (**)(uint64_t, CGRect *))(v11 + 104);
      if (v12)
        v12(a1, &v18);
    }
  }
  v17 = 0;
  *(CGFloat *)context = a3;
  *(CGFloat *)&context[1] = a4;
  v13 = *(const __CFArray **)(DerivedStorage + 8);
  v19.length = CFArrayGetCount(v13);
  v19.location = 0;
  CFArrayApplyFunction(v13, v19, (CFArrayApplierFunction)UnselectChildNodes_0, context);
  if (!(_BYTE)v17)
  {
    v20.x = a3;
    v20.y = a4;
    if (CGRectContainsPoint(v18, v20))
      *(_BYTE *)(DerivedStorage + 320) = 0;
  }
  if (a2)
  {
    if ((_BYTE)v17)
    {
      v14 = 1;
    }
    else
    {
      v21.x = a3;
      v21.y = a4;
      v14 = CGRectContainsPoint(v18, v21);
    }
    *a2 = v14;
  }
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_IsSelected(uint64_t a1, _BYTE *a2)
{
  *a2 = *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 320);
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_BeginScene()
{
  return 0;
}

uint64_t FigCaptionRendererNode_FigCaptionRendererNodeProtocol_EndScene()
{
  return 0;
}

uint64_t updateDisplayChildNodes_0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  FigCaptionRendererNodeProtocolGetProtocolID();
  result = CMBaseObjectGetProtocolVTable();
  if (result)
  {
    v5 = *(_QWORD *)(result + 16);
    if (v5)
    {
      v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 304);
      if (v6)
        return v6(a1, a2);
    }
  }
  return result;
}

uint64_t nodeComparatorZIndex(uint64_t a1, uint64_t a2)
{
  uint64_t ProtocolVTable;
  uint64_t v5;
  void (*v6)(uint64_t, double *);
  uint64_t v7;
  double v8;
  uint64_t v9;
  void (*v10)(uint64_t, double *, double);
  double v12;
  double v13;

  v12 = 0.0;
  v13 = 0.0;
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v5 = *(_QWORD *)(ProtocolVTable + 16);
    if (v5)
    {
      v6 = *(void (**)(uint64_t, double *))(v5 + 264);
      if (v6)
        v6(a1, &v13);
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  v7 = CMBaseObjectGetProtocolVTable();
  v8 = 0.0;
  if (v7)
  {
    v9 = *(_QWORD *)(v7 + 16);
    if (v9)
    {
      v10 = *(void (**)(uint64_t, double *, double))(v9 + 264);
      if (v10)
      {
        v10(a2, &v12, 0.0);
        v8 = v12;
      }
    }
  }
  if (v13 < v8)
    return -1;
  else
    return v13 > v8;
}

uint64_t SelectChildNodes_0(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  uint64_t result;
  uint64_t v7;
  char v8;

  v8 = 0;
  v4 = *(double *)a2;
  v5 = *(double *)(a2 + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  result = CMBaseObjectGetProtocolVTable();
  if (result)
  {
    v7 = *(_QWORD *)(result + 16);
    if (v7)
    {
      v7 = *(_QWORD *)(v7 + 352);
      if (v7)
      {
        result = ((uint64_t (*)(uint64_t, char *, double, double))v7)(a1, &v8, v4, v5);
        LOBYTE(v7) = v8 != 0;
      }
    }
  }
  else
  {
    LOBYTE(v7) = 0;
  }
  if (*(_BYTE *)(a2 + 16))
    LOBYTE(v7) = 1;
  *(_BYTE *)(a2 + 16) = v7;
  return result;
}

uint64_t UnselectChildNodes_0(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  uint64_t result;
  uint64_t v7;
  char v8;

  v8 = 0;
  v4 = *(double *)a2;
  v5 = *(double *)(a2 + 8);
  FigCaptionRendererNodeProtocolGetProtocolID();
  result = CMBaseObjectGetProtocolVTable();
  if (result)
  {
    v7 = *(_QWORD *)(result + 16);
    if (v7)
    {
      v7 = *(_QWORD *)(v7 + 360);
      if (v7)
      {
        result = ((uint64_t (*)(uint64_t, char *, double, double))v7)(a1, &v8, v4, v5);
        LOBYTE(v7) = v8 != 0;
      }
    }
  }
  else
  {
    LOBYTE(v7) = 0;
  }
  if (*(_BYTE *)(a2 + 16))
    LOBYTE(v7) = 1;
  *(_BYTE *)(a2 + 16) = v7;
  return result;
}

uint64_t RegisterFigCaptionRendererNodeBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFTypeRef FigCaptionRendererNodeBaseCopyFormattingDesc()
{
  return CFRetain(CFSTR("[FigCaptionRendererNode]"));
}

uint64_t FigHLSSessionDataCopyMetadataEntryRemote()
{
  uint64_t v0;
  uint64_t v1;

  v0 = fsd_ensureClientEstablished();
  if (!(_DWORD)v0)
  {
    v0 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v0)
    {
      v0 = FigXPCMessageSetCFString();
      if (!(_DWORD)v0)
      {
        v0 = FigXPCMessageSetCFObject();
        if (!(_DWORD)v0)
        {
          v0 = FigXPCMessageSetCFString();
          if (!(_DWORD)v0)
          {
            v0 = FigXPCMessageSetCFURL();
            if (!(_DWORD)v0)
            {
              v0 = FigXPCRemoteClientSendSyncMessageCreatingReply();
              if (!(_DWORD)v0)
                v0 = FigXPCMessageCopyCFDictionary();
            }
          }
        }
      }
    }
  }
  v1 = v0;
  FigXPCRelease();
  FigXPCRelease();
  return v1;
}

uint64_t fsd_ensureClientEstablished()
{
  uint64_t v0;
  _QWORD block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v6 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __fsd_ensureClientEstablished_block_invoke;
  block[3] = &unk_1E2FAB400;
  block[4] = &v3;
  if (fsd_ensureClientEstablished_sFigSessionDataRemoteClientSetupOnce != -1)
    dispatch_once(&fsd_ensureClientEstablished_sFigSessionDataRemoteClientSetupOnce, block);
  v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t FigHLSSessionDataCopyChapterMetadataAndCopyErrorLogEntryRemote(double a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = fsd_ensureClientEstablished();
  if ((_DWORD)v2)
    goto LABEL_11;
  v2 = FigXPCCreateBasicMessage();
  if ((_DWORD)v2)
    goto LABEL_11;
  v2 = FigXPCMessageSetCFString();
  if ((_DWORD)v2
    || (v2 = FigXPCMessageSetCFObject(), (_DWORD)v2)
    || (xpc_dictionary_set_double(0, "duration", a1), v2 = FigXPCMessageSetCFURL(), (_DWORD)v2)
    || (v2 = FigXPCMessageSetCFDictionary(), (_DWORD)v2)
    || (v2 = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)v2)
    || (v2 = FigXPCMessageCopyCFArray(), (_DWORD)v2)
    || (v2 = FigXPCMessageCopyCFDictionary(), (_DWORD)v2))
  {
LABEL_11:
    v3 = v2;
  }
  else
  {
    v3 = 0;
  }
  FigXPCRelease();
  FigXPCRelease();
  return v3;
}

void __fsd_ensureClientEstablished_block_invoke(uint64_t a1)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v3;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v3 = Mutable;
    FigCFDictionarySetValue();
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = FigXPCRemoteClientCreate();
    CFRelease(v3);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = -12786;
  }
}

uint64_t FigSubtitleRendererGetClassID()
{
  MEMORY[0x19402F294](&FigSubtitleRendererGetClassID_sRegisterFigSubtitleRendererOnce, RegisterFigSubtitleRendererClass);
  return sFigSubtitleRendererClassID;
}

uint64_t RegisterFigSubtitleRendererClass()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigSubtitleRendererNotificationBarrier(uint64_t a1)
{
  _QWORD *v2;
  uint64_t (*v3)(uint64_t);

  v2 = *(_QWORD **)(CMBaseObjectGetVTable() + 8);
  if (*v2 >= 2uLL && (v3 = (uint64_t (*)(uint64_t))v2[8]) != 0)
    return v3(a1);
  else
    return 4294954514;
}

uint64_t FigSubtitleRendererDrawSubtitleText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t, uint64_t, _OWORD *);
  __int128 v7;
  _OWORD v9[3];
  uint64_t v10;

  v6 = *(uint64_t (**)(uint64_t, uint64_t, _OWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  v7 = *(_OWORD *)(a3 + 16);
  v9[0] = *(_OWORD *)a3;
  v9[1] = v7;
  v9[2] = *(_OWORD *)(a3 + 32);
  v10 = *(_QWORD *)(a3 + 48);
  return v6(a1, a2, v9);
}

uint64_t FigSubtitleRendererLayout(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v10)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t);
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v15[7];

  v10 = *(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 16);
  v11 = a3[5];
  v15[4] = a3[4];
  v15[5] = v11;
  v15[6] = a3[6];
  v12 = a3[1];
  v15[0] = *a3;
  v15[1] = v12;
  v13 = a3[3];
  v15[2] = a3[2];
  v15[3] = v13;
  return v10(a1, a2, v15, a4, a5);
}

CFStringRef FigSubtitleRendererCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigSubtitleRenderer %p]"), a1);
}

uint64_t MediaDataChunkWriterCreate(const __CFAllocator *a1, uint64_t *a2)
{
  _OWORD *v4;
  uint64_t v5;
  CFTypeRef v6;
  CFMutableArrayRef Mutable;
  uint64_t Empty;
  CMMemoryPoolRef v9;
  uint64_t DataBuffer;

  if (!a2)
  {
    DataBuffer = FigSignalErrorAt();
    goto LABEL_11;
  }
  v4 = CFAllocatorAllocate(a1, 80, 0);
  v5 = (uint64_t)v4;
  if (!v4)
  {
    DataBuffer = 4294949686;
    goto LABEL_12;
  }
  v4[3] = 0u;
  v4[4] = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  *v4 = 0u;
  if (a1)
    v6 = CFRetain(a1);
  else
    v6 = 0;
  *(_QWORD *)v5 = v6;
  Mutable = CFArrayCreateMutable(a1, 0, 0);
  *(_QWORD *)(v5 + 8) = Mutable;
  if (!Mutable)
    goto LABEL_13;
  Empty = CMBlockBufferCreateEmpty(a1, 0x40u, 0, (CMBlockBufferRef *)(v5 + 24));
  if ((_DWORD)Empty)
  {
LABEL_14:
    DataBuffer = Empty;
    goto LABEL_12;
  }
  *(_DWORD *)(v5 + 36) = 10;
  v9 = CMMemoryPoolCreate(0);
  *(_QWORD *)(v5 + 40) = v9;
  if (!v9)
  {
LABEL_13:
    Empty = FigSignalErrorAt();
    goto LABEL_14;
  }
  DataBuffer = allocateDataBuffer(v5);
  if (!(_DWORD)DataBuffer)
  {
    *a2 = v5;
LABEL_11:
    v5 = 0;
  }
LABEL_12:
  MediaDataChunkWriterRelease((const __CFAllocator **)v5);
  return DataBuffer;
}

uint64_t allocateDataBuffer(uint64_t a1)
{
  uint64_t result;

  result = FigMemoryPoolCreateBlockBuffer();
  if (!(_DWORD)result)
  {
    result = CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)(a1 + 48), 0, (size_t *)(a1 + 64), 0, (char **)(a1 + 56));
    if (!(_DWORD)result)
      *(_QWORD *)(a1 + 72) = 0;
  }
  return result;
}

void MediaDataChunkWriterRelease(const __CFAllocator **ptr)
{
  const __CFArray *v2;
  const __CFAllocator *v3;
  CFIndex Count;
  CFIndex v5;
  CFIndex i;
  void *ValueAtIndex;
  const __CFAllocator *v8;
  const __CFAllocator *v9;
  const __CFAllocator *v10;
  const __CFAllocator *v11;

  if (ptr)
  {
    v3 = *ptr;
    v2 = ptr[1];
    if (v2)
    {
      Count = CFArrayGetCount(v2);
      if (Count >= 1)
      {
        v5 = Count;
        for (i = 0; i != v5; ++i)
        {
          ValueAtIndex = (void *)CFArrayGetValueAtIndex(ptr[1], i);
          if (ValueAtIndex)
            CFAllocatorDeallocate(v3, ValueAtIndex);
        }
      }
      v8 = ptr[1];
      if (v8)
        CFRelease(v8);
    }
    v9 = ptr[5];
    if (v9)
      CFRelease(v9);
    v10 = ptr[3];
    if (v10)
      CFRelease(v10);
    v11 = ptr[6];
    if (v11)
      CFRelease(v11);
    CFAllocatorDeallocate(v3, ptr);
    if (v3)
      CFRelease(v3);
  }
}

uint64_t MediaDataChunkWriterAddTrack(CFAllocatorRef *a1, int a2, char a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _OWORD *v12;
  _OWORD *v13;
  CMTime v15;

  if (!a1)
    return FigSignalErrorAt();
  if (!a4)
    return FigSignalErrorAt();
  if (!a6)
    return FigSignalErrorAt();
  v12 = CFAllocatorAllocate(*a1, 112, 0);
  if (!v12)
    return FigSignalErrorAt();
  v13 = v12;
  *v12 = 0u;
  v12[1] = 0u;
  v12[5] = 0u;
  v12[6] = 0u;
  v12[3] = 0u;
  v12[4] = 0u;
  v12[2] = 0u;
  *(_DWORD *)v12 = a2;
  *((_QWORD *)v12 + 1) = a4;
  *((_QWORD *)v12 + 2) = a5;
  *((_DWORD *)v12 + 18) = 0x100000;
  CMTimeMake(&v15, 1, 1);
  *(CMTime *)((char *)v13 + 76) = v15;
  *((_DWORD *)v13 + 25) = 0;
  *((_BYTE *)v13 + 104) = a3 & 1;
  CFArrayAppendValue(a1[1], v13);
  *a6 = v13;
  return 0;
}

uint64_t MediaDataChunkWriterTrackAppendSampleData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t *a10, const __CFArray *a11, uint64_t a12)
{
  uint64_t v12;

  if (a1 && a2 && a3 && a4 && a6 > 0 && a7 > 0 && a8 && a9 > 0 && a10)
  {
    v12 = 0;
    while (a10[v12])
    {
      if (a9 == ++v12)
        return appendSampleDataOrSampleReference(a1, a2, a3, a4, 0, a5, a6, a7, a8, a9, a10, a11, a12);
    }
  }
  return FigSignalErrorAt();
}

uint64_t appendSampleDataOrSampleReference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t *a11, const __CFArray *a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t EndOffset;
  int v27;
  CFIndex v28;
  unint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  BOOL v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  CMTime *v47;
  CFIndex v48;
  CMTimeValue v49;
  CMTimeScale AllocateBlock_high;
  CFIndex v51;
  CMTimeValue v52;
  CMTimeScale v53;
  CMTime *v54;
  uint64_t v55;
  CFIndex v56;
  int32_t v57;
  unint64_t v58;
  uint64_t v59;
  CFIndex v60;
  int32_t v61;
  void (__cdecl **p_FreeBlock)(void *, void *, size_t);
  CMTimeValue v63;
  CMTimeScale v64;
  CFIndex v65;
  unint64_t v66;
  CFTypeID v67;
  int v68;
  int v69;
  int v70;
  size_t DataLength;
  unsigned int v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  const __CFAllocator *v76;
  uint64_t v77;
  void *v78;
  char *BaseAddress;
  uint64_t appended;
  int v81;
  int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  CFIndex v86;
  uint64_t v87;
  CFIndex v88;
  __CFArray *Mutable;
  CFIndex v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  CMBlockBufferRef v94;
  uint64_t v95;
  const __CFAllocator *allocator;
  CMTimeScale v98;
  CMTimeValue *v99;
  void *cf;
  CMTimeValue v101;
  uint64_t v102;
  CMTime *v103;
  uint64_t v104;
  size_t offset;
  CMTimeScale v106;
  CMTimeValue v107;
  _QWORD *v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  CMTimeScale v112;
  OpaqueCMBlockBuffer *v113;
  CMTime *v114;
  uint64_t v115;
  int v116;
  CMTimeScale v117;
  uint64_t v118;
  CMTime v119;
  CMTimeValue v120;
  uint64_t v121;
  CMTime v122;
  CMTime lhs;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  OpaqueCMBlockBuffer *v127;
  CMTimeScale v128;
  CMBlockBufferRef v129;
  CMTimeScale v130;
  void (__cdecl *FreeBlock)(void *, void *, size_t);
  int refCon;
  CMBlockBufferCustomBlockSource time1[585];
  CMTime rhs;
  CMBlockBufferRef blockBufferOut;
  CMTimeScale timescale;
  uint64_t v137;
  CFRange v138;

  v13 = MEMORY[0x1E0C80A78]();
  v17 = v16;
  v19 = v18;
  v102 = v20;
  cf = v21;
  v22 = v14;
  v24 = v23;
  v25 = (_QWORD *)v13;
  v137 = *MEMORY[0x1E0C80C00];
  v121 = 0;
  if (v14)
  {
    EndOffset = getEndOffset(v13, v14, &v121);
    if ((_DWORD)EndOffset)
      return EndOffset;
    v15 = v121;
  }
  else
  {
    v121 = v15;
  }
  if (v15 == *(_QWORD *)(v24 + 32) && *(_QWORD *)(v24 + 24) == (int)v102 && !*(_BYTE *)(v24 + 105))
  {
    v27 = 0;
  }
  else
  {
    *(_BYTE *)(v24 + 105) = 0;
    v27 = 1;
  }
  if (v19 < 1)
    return 0;
  v115 = v15;
  v28 = 0;
  offset = 0;
  v29 = a11;
  v114 = (CMTime *)(v24 + 48);
  v103 = (CMTime *)(v24 + 76);
  v99 = (CMTimeValue *)(a9 + 12);
  v101 = *MEMORY[0x1E0CA2E68];
  v98 = *(_DWORD *)(MEMORY[0x1E0CA2E68] + 8);
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v113 = *(OpaqueCMBlockBuffer **)(MEMORY[0x1E0CA2E68] + 12);
  v112 = *(_DWORD *)(MEMORY[0x1E0CA2E68] + 20);
  v104 = v17;
  v118 = v19;
  v110 = v24;
  v111 = v22;
  v108 = v25;
  while (1)
  {
    v129 = v113;
    v130 = v112;
    v127 = v113;
    v128 = v112;
    v116 = v27;
    if (v27)
    {
      if (v22)
      {
        v30 = *(int *)(v24 + 100);
        if (v30 < 2)
        {
          v32 = 0;
        }
        else
        {
          v31 = v30 - v115 % v30;
          if (v115 % v30)
            v32 = v30 - v115 % v30;
          else
            v32 = 0;
          if (v32)
          {
            bzero(time1, 0x4000uLL);
            while (v31 > 0)
            {
              if ((unint64_t)v31 >= 0x4000)
                v33 = 0x4000;
              else
                v33 = v31;
              EndOffset = appendDataViaDataBuffer(v25, v22, v33, (char *)time1);
              v31 -= v33;
              if ((_DWORD)EndOffset)
                return EndOffset;
            }
          }
          v24 = v110;
        }
        v115 += v32;
        v121 = v115;
      }
      v35 = 0;
      *(_QWORD *)(v24 + 24) = (int)v102;
      *(_QWORD *)(v24 + 40) = 0;
      v36 = MEMORY[0x1E0CA2E68];
      *(_OWORD *)&v114->value = *MEMORY[0x1E0CA2E68];
      v114->epoch = *(_QWORD *)(v36 + 16);
      v25[2] = v24;
      v34 = 1;
    }
    else
    {
      v34 = 0;
      v35 = *(_QWORD *)(v24 + 40);
    }
    v37 = *(int *)(v24 + 72);
    v38 = v37 >= v35;
    v39 = v37 - v35;
    if (v38)
      v40 = v39;
    else
      v40 = 0;
    v41 = v19 - v28;
    *(_OWORD *)&time1[0].version = *MEMORY[0x1E0CA2E18];
    *(void (__cdecl **)(void *, void *, size_t))((char *)&time1[0].FreeBlock + 4) = *(void (__cdecl **)(void *, void *, size_t))(MEMORY[0x1E0CA2E18] + 16);
    v109 = v34;
    if (a10 != 1)
    {
      v42 = 0;
      v44 = &v29[v28];
      v45 = *v44;
      v46 = 1;
      do
      {
        v43 = v46;
        v42 += v45;
        if (v28 + v46 >= v19)
          break;
        v45 = v44[v46++];
      }
      while (v45 + v42 < v40);
      goto LABEL_44;
    }
    v42 = *v29;
    if (*v29 <= v40 && v41 != 1)
      break;
    if (v17 == 1)
    {
      v43 = 1;
LABEL_55:
      *(_OWORD *)&lhs.value = *(_OWORD *)a9;
      lhs.epoch = *(_QWORD *)(a9 + 16);
      CMTimeMultiply((CMTime *)time1, &lhs, v43);
      goto LABEL_56;
    }
    *(_OWORD *)&time1[0].version = *MEMORY[0x1E0CA2E68];
    *(void (__cdecl **)(void *, void *, size_t))((char *)&time1[0].FreeBlock + 4) = *(void (__cdecl **)(void *, void *, size_t))(MEMORY[0x1E0CA2E68] + 16);
    v43 = 1;
LABEL_50:
    v47 = (CMTime *)(a9 + 72 * v28);
    v48 = v28;
    do
    {
      *(_OWORD *)&lhs.value = *(_OWORD *)&time1[0].version;
      lhs.epoch = *(CMTimeEpoch *)((char *)&time1[0].FreeBlock + 4);
      rhs = *v47;
      CMTimeAdd((CMTime *)time1, &lhs, &rhs);
      ++v48;
      v47 += 3;
    }
    while (v48 < v43 + v28);
    v19 = v118;
    v24 = v110;
    v22 = v111;
LABEL_56:
    v49 = *(_QWORD *)&time1[0].version;
    AllocateBlock_high = HIDWORD(time1[0].AllocateBlock);
    FreeBlock = time1[0].FreeBlock;
    refCon = (int)time1[0].refCon;
    if (v116 || v40 >= v42)
      goto LABEL_60;
    v27 = 1;
LABEL_151:
    v25 = v108;
    if (v28 >= v19)
      return 0;
  }
  if (v42)
  {
    if (v41 >= (uint64_t)(v40 / v42))
      v43 = v40 / v42;
    else
      v43 = v19 - v28;
    v42 *= v43;
LABEL_44:
    if (v17 == 1)
      goto LABEL_55;
    *(_OWORD *)&time1[0].version = *MEMORY[0x1E0CA2E68];
    *(void (__cdecl **)(void *, void *, size_t))((char *)&time1[0].FreeBlock + 4) = *(void (__cdecl **)(void *, void *, size_t))(MEMORY[0x1E0CA2E68] + 16);
    if (v43 < 1)
      goto LABEL_56;
    goto LABEL_50;
  }
  if (v17 == 1)
  {
    v43 = 0;
    v42 = 0;
    goto LABEL_55;
  }
  v42 = 0;
  v43 = 0;
  *(_OWORD *)&time1[0].version = *MEMORY[0x1E0CA2E68];
  *(void (__cdecl **)(void *, void *, size_t))((char *)&time1[0].FreeBlock + 4) = *(void (__cdecl **)(void *, void *, size_t))(MEMORY[0x1E0CA2E68] + 16);
  v49 = *(_QWORD *)&time1[0].version;
  AllocateBlock_high = HIDWORD(time1[0].AllocateBlock);
  FreeBlock = time1[0].FreeBlock;
  refCon = (int)time1[0].refCon;
LABEL_60:
  v106 = AllocateBlock_high;
  v107 = v49;
  *(_OWORD *)&time1[0].version = *(_OWORD *)&v103->value;
  *(void (__cdecl **)(void *, void *, size_t))((char *)&time1[0].FreeBlock + 4) = (void (__cdecl *)(void *, void *, size_t))v103->epoch;
  lhs = *v114;
  if (CMTimeCompare((CMTime *)time1, &lhs) < 0)
  {
    *(_OWORD *)&v119.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E68] + 8);
    v119.value = v101;
  }
  else
  {
    lhs = *v103;
    rhs = *v114;
    CMTimeSubtract((CMTime *)time1, &lhs, &rhs);
    v119.value = *(_QWORD *)&time1[0].version;
    *(_OWORD *)&v119.timescale = *(_OWORD *)((char *)&time1[0].AllocateBlock + 4);
  }
  if (v17 == 1)
  {
    v51 = v28;
    v52 = *(_QWORD *)a9;
    v53 = *(_DWORD *)(a9 + 8);
    rhs.value = *v99;
    rhs.timescale = *(_DWORD *)(a9 + 20);
    *(_QWORD *)&time1[0].version = v119.value;
    *(_OWORD *)((char *)&time1[0].AllocateBlock + 4) = *(_OWORD *)&v119.timescale;
    lhs.value = v52;
    lhs.timescale = v53;
    *(_QWORD *)&lhs.flags = *v99;
    HIDWORD(lhs.epoch) = *(_DWORD *)(a9 + 20);
    if (CMTimeCompare((CMTime *)time1, &lhs) < 0 || v41 == 1)
    {
      blockBufferOut = (CMBlockBufferRef)rhs.value;
      timescale = rhs.timescale;
      v41 = 1;
    }
    else
    {
      lhs = v119;
      CMTimeConvertScale((CMTime *)time1, &lhs, v53, kCMTimeRoundingMethod_RoundTowardZero);
      if (v41 >= *(_QWORD *)&time1[0].version / v52)
        v41 = *(_QWORD *)&time1[0].version / v52;
      lhs.value = v52;
      lhs.timescale = v53;
      *(_QWORD *)&lhs.flags = rhs.value;
      HIDWORD(lhs.epoch) = rhs.timescale;
      CMTimeMultiply((CMTime *)time1, &lhs, v41);
      v52 = *(_QWORD *)&time1[0].version;
      v53 = HIDWORD(time1[0].AllocateBlock);
      blockBufferOut = (CMBlockBufferRef)time1[0].FreeBlock;
      timescale = (CMTimeScale)time1[0].refCon;
    }
  }
  else
  {
    blockBufferOut = v113;
    timescale = v112;
    v51 = v28;
    v54 = (CMTime *)(a9 + 72 * v28);
    v55 = 1;
    v52 = v101;
    v53 = v98;
    do
    {
      v41 = v55;
      v56 = v28 + v55;
      lhs.value = v52;
      lhs.timescale = v53;
      *(_QWORD *)&lhs.flags = blockBufferOut;
      HIDWORD(lhs.epoch) = timescale;
      rhs = *v54;
      CMTimeAdd((CMTime *)time1, &lhs, &rhs);
      v52 = *(_QWORD *)&time1[0].version;
      v53 = HIDWORD(time1[0].AllocateBlock);
      blockBufferOut = (CMBlockBufferRef)time1[0].FreeBlock;
      timescale = (CMTimeScale)time1[0].refCon;
      if (v56 >= v118)
        break;
      time1[0].FreeBlock = (void (__cdecl *)(void *, void *, size_t))blockBufferOut;
      LODWORD(time1[0].refCon) = timescale;
      lhs = v54[3];
      CMTimeAdd(&v122, (CMTime *)time1, &lhs);
      *(_QWORD *)&time1[0].version = v119.value;
      *(_OWORD *)((char *)&time1[0].AllocateBlock + 4) = *(_OWORD *)&v119.timescale;
      v57 = CMTimeCompare(&v122, (CMTime *)time1);
      v55 = v41 + 1;
      v54 += 3;
    }
    while (v57 < 0);
  }
  if (a10 == 1)
  {
    v17 = v104;
    v58 = *a11 * v41;
    v28 = v51;
    v29 = a11;
  }
  else
  {
    v28 = v51;
    v58 = 0;
    if (v41 < 1)
    {
      v29 = a11;
      v17 = v104;
    }
    else
    {
      v59 = v41 + v51;
      v60 = v51;
      v29 = a11;
      v17 = v104;
      do
        v58 += a11[v60++];
      while (v60 < v59);
    }
  }
  v129 = blockBufferOut;
  v130 = timescale;
  *(_QWORD *)&time1[0].version = v119.value;
  *(_OWORD *)((char *)&time1[0].AllocateBlock + 4) = *(_OWORD *)&v119.timescale;
  lhs.value = v52;
  lhs.timescale = v53;
  *(_QWORD *)&lhs.flags = blockBufferOut;
  HIDWORD(lhs.epoch) = timescale;
  v61 = CMTimeCompare((CMTime *)time1, &lhs);
  if (!v116 && v61 < 0)
  {
    v27 = 1;
    v19 = v118;
    v24 = v110;
    v22 = v111;
    goto LABEL_151;
  }
  p_FreeBlock = &FreeBlock;
  if (v41 < v43)
    p_FreeBlock = (void (__cdecl **)(void *, void *, size_t))&v129;
  v63 = v107;
  if (v41 < v43)
    v63 = v52;
  v120 = v63;
  v64 = v106;
  if (v41 < v43)
    v64 = v53;
  v117 = v64;
  if (v41 >= v43)
    v65 = v43;
  else
    v65 = v41;
  if (v41 >= v43)
    v66 = v42;
  else
    v66 = v58;
  v127 = (OpaqueCMBlockBuffer *)*p_FreeBlock;
  v128 = *((_DWORD *)p_FreeBlock + 2);
  if (!v111)
    goto LABEL_129;
  v67 = CFGetTypeID(cf);
  if (*(_BYTE *)(v110 + 104))
  {
    v68 = 0;
    v69 = 0;
    goto LABEL_99;
  }
  v81 = *(_DWORD *)v110;
  v68 = 1;
  if (*(int *)v110 > 1936684397)
  {
    if (v81 > 1953325923)
    {
      v69 = 1;
      if (v81 != 1953325924)
        goto LABEL_158;
      goto LABEL_99;
    }
    if (v81 != 1936684398)
    {
      v69 = 1;
      v82 = 1952807028;
      goto LABEL_155;
    }
LABEL_159:
    v69 = 1;
    goto LABEL_99;
  }
  if (v81 > 1835365472)
  {
    if (v81 != 1835365473)
    {
      v69 = 1;
      v82 = 1935832172;
LABEL_155:
      if (v81 != v82)
        goto LABEL_158;
      goto LABEL_99;
    }
    goto LABEL_159;
  }
  if (v81 != 1635088502)
  {
    v69 = 1;
    v82 = 1668047728;
    goto LABEL_155;
  }
LABEL_158:
  v68 = 0;
  v69 = 2;
LABEL_99:
  if (CMBlockBufferGetTypeID() != v67)
  {
    if (CVPixelBufferGetTypeID() == v67)
    {
      EndOffset = CVPixelBufferLockBaseAddress((CVPixelBufferRef)cf, 0);
      if ((_DWORD)EndOffset)
        return EndOffset;
      BaseAddress = (char *)CVPixelBufferGetBaseAddress((CVPixelBufferRef)cf);
      if (v68)
      {
        appended = appendDataViaDataBuffer(v108, v111, v66, BaseAddress);
      }
      else
      {
        appended = appendDataBufferBBufReferenceToAggregateBBufAndBeginNewDataBuffer((uint64_t)v108, v111, 0);
        if (!(_DWORD)appended)
        {
          appended = appendAggregateBBufToByteStream((uint64_t)v108, v111);
          if (!(_DWORD)appended)
            appended = CMByteStreamAppend();
        }
      }
      v73 = appended;
      CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)cf, 0);
      goto LABEL_128;
    }
    goto LABEL_129;
  }
  if (!FigIsMemoryPoolBlockBuffer() || !CMBlockBufferIsRangeContiguous((CMBlockBufferRef)cf, 0, 0))
  {
    v74 = v108;
    v83 = v111;
    v84 = v69;
LABEL_126:
    v77 = appendBlockBufferToSampleDataDestination(v74, v83, v84, (CMBlockBufferRef)cf, offset, v66);
LABEL_127:
    v73 = v77;
    goto LABEL_128;
  }
  v70 = v69;
  DataLength = CMBlockBufferGetDataLength((CMBlockBufferRef)cf);
  v125 = 0;
  v126 = 0;
  v124 = 0;
  v72 = *(_DWORD *)(v110 + 100);
  v73 = FigMemoryPoolBlockBufferGetPaddedWriteInfo();
  v74 = v108;
  if ((_DWORD)v73)
    goto LABEL_128;
  if (v72 < 2 || v66 + offset != DataLength)
  {
    v83 = v111;
    v84 = v70;
    goto LABEL_126;
  }
  v75 = v124;
  v76 = (const __CFAllocator *)*v108;
  lhs.value = 0;
  rhs.value = 0;
  v122.value = 0;
  blockBufferOut = 0;
  if (CMBlockBufferIsRangeContiguous((CMBlockBufferRef)cf, 0, 0) != 1)
  {
    v95 = FigSignalErrorAt();
    if (!(_DWORD)v95)
      v95 = appendBlockBufferToSampleDataDestination(v108, v111, v70, 0, offset, v75 + v66);
    v73 = v95;
    goto LABEL_171;
  }
  v77 = FigMemoryPoolBlockBufferGetPaddedWriteInfo();
  if ((_DWORD)v77)
    goto LABEL_127;
  time1[0].version = 0;
  if (cf)
    v78 = (void *)CFRetain(cf);
  else
    v78 = 0;
  time1[0].refCon = v78;
  time1[0].AllocateBlock = 0;
  time1[0].FreeBlock = (void (__cdecl *)(void *, void *, size_t))mdcwMemPoolBBufSourceRelease;
  v93 = CMBlockBufferCreateWithMemoryBlock(v76, (void *)lhs.value, rhs.value, 0, time1, 0, rhs.value, 0, &blockBufferOut);
  v94 = blockBufferOut;
  if (!(_DWORD)v93)
  {
    v73 = appendBlockBufferToSampleDataDestination(v108, v111, v70, blockBufferOut, offset, v75 + v66);
    if (v94)
      CFRelease(v94);
    goto LABEL_128;
  }
  v73 = v93;
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (cf)
    CFRelease(cf);
LABEL_171:
  v29 = a11;
  v17 = v104;
LABEL_128:
  if ((_DWORD)v73)
    return v73;
LABEL_129:
  if (v17 == 1)
    v85 = 1;
  else
    v85 = v65;
  if (v17 == 1)
    v86 = 0;
  else
    v86 = v28;
  if (a10 == 1)
    v87 = 1;
  else
    v87 = v65;
  if (a10 == 1)
    v88 = 0;
  else
    v88 = v28;
  if (a12)
  {
    if (v28 || CFArrayGetCount(a12) != v65)
    {
      Mutable = CFArrayCreateMutable(allocator, 0, 0);
      v138.location = v28;
      v138.length = v65;
      CFArrayAppendArray(Mutable, a12, v138);
    }
    else
    {
      Mutable = (__CFArray *)CFRetain(a12);
    }
  }
  else
  {
    Mutable = 0;
  }
  v90 = a9 + 72 * v86;
  v24 = v110;
  v91 = (*(uint64_t (**)(_QWORD, uint64_t, unint64_t, uint64_t, CFIndex, uint64_t, CFIndex, uint64_t, unint64_t *, __CFArray *, uint64_t, _QWORD))(v110 + 8))(v109, v115, v66, v102, v65, v85, v90, v87, &v29[v88], Mutable, a13, *(_QWORD *)(v110 + 16));
  if (!(_DWORD)v91)
  {
    if (Mutable)
      CFRelease(Mutable);
    v92 = *(_QWORD *)(v110 + 40) + v66;
    *(_QWORD *)(v110 + 32) = v115 + v66;
    *(_QWORD *)(v110 + 40) = v92;
    lhs = *v114;
    rhs.value = v120;
    rhs.timescale = v117;
    *(_QWORD *)&rhs.flags = v127;
    HIDWORD(rhs.epoch) = v128;
    CMTimeAdd((CMTime *)time1, &lhs, &rhs);
    v27 = 0;
    *(_OWORD *)&v114->value = *(_OWORD *)&time1[0].version;
    v114->epoch = *(CMTimeEpoch *)((char *)&time1[0].FreeBlock + 4);
    v115 += v66;
    v121 = v115;
    offset += v66;
    v28 += v65;
    v19 = v118;
    v22 = v111;
    goto LABEL_151;
  }
  v73 = v91;
  if (Mutable)
    CFRelease(Mutable);
  return v73;
}

uint64_t MediaDataChunkWriterTrackAppendSampleReference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t *a9, const __CFArray *a10, uint64_t a11)
{
  uint64_t v11;

  if (a1 && a2 && a5 > 0 && a6 > 0 && a7 && a8 > 0 && a9)
  {
    v11 = 0;
    while (a9[v11])
    {
      if (a8 == ++v11)
        return appendSampleDataOrSampleReference(a1, a2, 0, 0, a3, a4, a5, a6, a7, a8, a9, a10, a11);
    }
  }
  return FigSignalErrorAt();
}

uint64_t MediaDataChunkWriterFlush(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t result;

  if (!a1 || !a2)
    return FigSignalErrorAt();
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 && *(_DWORD *)(v4 + 100) == 0x4000)
  {
    v5 = *(_QWORD *)(a1 + 72);
    v6 = -v5 < 0;
    v7 = -v5 & 0x3FFF;
    v8 = v5 & 0x3FFF;
    if (!v6)
      v8 = -v7;
    if (v8)
      v9 = 0x4000 - v8;
    else
      v9 = 0;
  }
  else
  {
    v9 = 0;
  }
  result = appendDataBufferBBufReferenceToAggregateBBufAndBeginNewDataBuffer(a1, a2, v9);
  if (!(_DWORD)result)
  {
    result = appendAggregateBBufToByteStream(a1, a2);
    if (!(_DWORD)result)
      *(_QWORD *)(a1 + 16) = 0;
  }
  return result;
}

uint64_t appendDataBufferBBufReferenceToAggregateBBufAndBeginNewDataBuffer(uint64_t a1, uint64_t a2, size_t a3)
{
  size_t v3;
  uint64_t v6;
  void *v7;
  size_t v8;
  uint64_t result;
  const void *v10;

  v3 = *(_QWORD *)(a1 + 72);
  if (!v3)
    return 0;
  if (a3)
  {
    v6 = *(_QWORD *)(a1 + 64);
    v7 = (void *)(*(_QWORD *)(a1 + 56) + v3);
    if (v6 - v3 >= a3)
      v8 = a3;
    else
      v8 = v6 - v3;
    bzero(v7, v8);
    v3 = *(_QWORD *)(a1 + 72) + v8;
    *(_QWORD *)(a1 + 72) = v3;
  }
  result = appendBlockBufferReferenceToAggregateBBuf(a1, a2, *(CMBlockBufferRef *)(a1 + 48), 0, v3);
  if (!(_DWORD)result)
  {
    v10 = *(const void **)(a1 + 48);
    if (v10)
    {
      CFRelease(v10);
      *(_QWORD *)(a1 + 48) = 0;
    }
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    return allocateDataBuffer(a1);
  }
  return result;
}

uint64_t appendAggregateBBufToByteStream(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t result;

  v4 = (uint64_t *)(a1 + 24);
  result = CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(a1 + 24));
  if (result)
  {
    result = appendBlockBufferToByteStream(a2, *v4, 0, result);
    if (!(_DWORD)result)
    {
      if (*v4)
      {
        CFRelease((CFTypeRef)*v4);
        *v4 = 0;
      }
      result = CMBlockBufferCreateEmpty(*(CFAllocatorRef *)a1, 0x40u, 0, (CMBlockBufferRef *)v4);
      if (!(_DWORD)result)
        *(_DWORD *)(a1 + 32) = 0;
    }
  }
  return result;
}

uint64_t MediaDataChunkWriterTrackStartNewChunk(uint64_t a1, uint64_t a2)
{
  if (!a1 || !a2)
    return FigSignalErrorAt();
  *(_BYTE *)(a2 + 105) = 1;
  return 0;
}

uint64_t MediaDataChunkWriterGetEntireLength(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  if (a1 && a2 && a3)
    return getEndOffset(a1, a2, a3);
  else
    return FigSignalErrorAt();
}

uint64_t getEndOffset(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t (*v6)(uint64_t, _QWORD, uint64_t *);
  uint64_t result;
  size_t DataLength;
  uint64_t v9;

  v9 = 0;
  v6 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v6)
    return 4294954514;
  result = v6(a2, 0, &v9);
  if (!(_DWORD)result)
  {
    DataLength = CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(a1 + 24));
    result = 0;
    *a3 = *(_QWORD *)(a1 + 72) + v9 + DataLength;
  }
  return result;
}

uint64_t MediaDataChunkWriterTrackSetPreferredChunkSize(uint64_t a1, uint64_t a2, int a3)
{
  if (!a1 || !a2 || a3 < 0)
    return FigSignalErrorAt();
  *(_DWORD *)(a2 + 72) = a3;
  return 0;
}

uint64_t MediaDataChunkWriterTrackGetPreferredChunkSize(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (!a1 || !a2 || !a3)
    return FigSignalErrorAt();
  *a3 = *(_DWORD *)(a2 + 72);
  return 0;
}

uint64_t MediaDataChunkWriterTrackSetPreferredChunkDuration(uint64_t a1, uint64_t a2, CMTime *a3)
{
  uint64_t result;
  __int128 v6;
  CMTime v7;
  CMTime time1;

  if (!a1 || !a2 || (a3->flags & 0x1D) != 1)
    return FigSignalErrorAt();
  time1 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v7 = *a3;
  if (CMTimeCompare(&time1, &v7) >= 1)
    return FigSignalErrorAt();
  result = 0;
  v6 = *(_OWORD *)&a3->value;
  *(_QWORD *)(a2 + 92) = a3->epoch;
  *(_OWORD *)(a2 + 76) = v6;
  return result;
}

uint64_t MediaDataChunkWriterTrackGetPreferredChunkDuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;

  if (!a1 || !a2 || !a3)
    return FigSignalErrorAt();
  v3 = *(_OWORD *)(a2 + 76);
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 92);
  *(_OWORD *)a3 = v3;
  return 0;
}

uint64_t MediaDataChunkWriterTrackSetPreferredChunkAlignment(uint64_t a1, uint64_t a2, int a3)
{
  if (!a1 || !a2 || a3 < 0)
    return FigSignalErrorAt();
  *(_DWORD *)(a2 + 100) = a3;
  return 0;
}

uint64_t MediaDataChunkWriterTrackGetPreferredChunkAlignment(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (!a1 || !a2 || !a3)
    return FigSignalErrorAt();
  *a3 = *(_DWORD *)(a2 + 100);
  return 0;
}

uint64_t appendDataViaDataBuffer(_QWORD *a1, uint64_t a2, unint64_t a3, char *__src)
{
  unint64_t v5;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  size_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t result;

  if (!a3)
    return 0;
  v5 = a3;
  while (1)
  {
    v8 = a1[9];
    v9 = (void *)(a1[7] + v8);
    v10 = a1[8] - v8;
    v11 = v5 >= v10 ? v10 : v5;
    memcpy(v9, __src, v11);
    v12 = a1[8];
    v13 = a1[9] + v11;
    a1[9] = v13;
    if (v13 == v12)
    {
      result = appendDataBufferBBufReferenceToAggregateBBufAndBeginNewDataBuffer((uint64_t)a1, a2, 0);
      if ((_DWORD)result)
        break;
    }
    __src += v11;
    v5 -= v11;
    if (!v5)
      return 0;
  }
  return result;
}

uint64_t appendBlockBufferToSampleDataDestination(_QWORD *a1, uint64_t a2, int a3, CMBlockBufferRef theBuffer, size_t offset, unint64_t a6)
{
  unint64_t v6;
  uint64_t result;
  size_t v12;
  char *v13;
  size_t lengthAtOffsetOut;

  v6 = a6;
  if (a3)
  {
    if (a3 == 2)
    {
      result = appendDataBufferBBufReferenceToAggregateBBufAndBeginNewDataBuffer((uint64_t)a1, a2, 0);
      if (!(_DWORD)result)
        return appendBlockBufferReferenceToAggregateBBuf((uint64_t)a1, a2, theBuffer, offset, v6);
    }
    else if (a3 == 1 && a6)
    {
      while (1)
      {
        v13 = 0;
        lengthAtOffsetOut = 0;
        result = CMBlockBufferGetDataPointer(theBuffer, offset, &lengthAtOffsetOut, 0, &v13);
        if ((_DWORD)result)
          break;
        v12 = v6 >= lengthAtOffsetOut ? lengthAtOffsetOut : v6;
        lengthAtOffsetOut = v12;
        result = appendDataViaDataBuffer(a1, a2, v12, v13);
        if ((_DWORD)result)
          break;
        offset += lengthAtOffsetOut;
        v6 -= lengthAtOffsetOut;
        if (!v6)
          return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    result = appendDataBufferBBufReferenceToAggregateBBufAndBeginNewDataBuffer((uint64_t)a1, a2, 0);
    if (!(_DWORD)result)
    {
      result = appendAggregateBBufToByteStream((uint64_t)a1, a2);
      if (!(_DWORD)result)
        return appendBlockBufferToByteStream(a2, (uint64_t)theBuffer, offset, v6);
    }
  }
  return result;
}

void mdcwMemPoolBBufSourceRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t appendBlockBufferToByteStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v8)(uint64_t, _QWORD, uint64_t *);
  uint64_t result;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v13;

  v13 = 0;
  v8 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v8)
    return 4294954514;
  result = v8(a1, 0, &v13);
  if (!(_DWORD)result)
  {
    v10 = v13;
    v11 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
    if (*v11 < 4uLL)
      return CMByteStreamAppendBlockBuffer();
    v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))v11[7];
    if (!v12)
      return CMByteStreamAppendBlockBuffer();
    result = v12(a1, a2, a3, a4, v10, 0);
    if ((_DWORD)result == -12782)
      return CMByteStreamAppendBlockBuffer();
  }
  return result;
}

uint64_t appendBlockBufferReferenceToAggregateBBuf(uint64_t a1, uint64_t a2, CMBlockBufferRef targetBBuf, size_t offsetToData, size_t dataLength)
{
  uint64_t result;
  int v8;
  int v9;

  result = CMBlockBufferAppendBufferReference(*(CMBlockBufferRef *)(a1 + 24), targetBBuf, offsetToData, dataLength, 0);
  if (!(_DWORD)result)
  {
    v8 = *(_DWORD *)(a1 + 36);
    v9 = *(_DWORD *)(a1 + 32) + 1;
    *(_DWORD *)(a1 + 32) = v9;
    if (v9 == v8)
      return appendAggregateBBufToByteStream(a1, a2);
    else
      return 0;
  }
  return result;
}

uint64_t FigCDSOutputNodeProtocolGetProtocolID()
{
  MEMORY[0x19402F294](&FigCDSOutputNodeProtocolGetProtocolID_sRegisterFigCDSOutputNodeProtocolTypeOnce, RegisterFigCDSOutputNodeProtocolType);
  return sFigCDSOutputNodeProtocolID;
}

uint64_t RegisterFigCDSOutputNodeProtocolType()
{
  return FigBaseProtocolRegisterProtocol();
}

uint64_t FigCaptionRendererTimerStart(uint64_t a1)
{
  dispatch_source_t v2;
  void *v3;

  v2 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(a1 + 64));
  *(_QWORD *)(a1 + 72) = v2;
  if (v2)
  {
    v3 = (void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
    dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(a1 + 72), (dispatch_function_t)fcrTimerOnTimerCanceled);
    dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a1 + 72), (dispatch_function_t)fcrTimerDispatchFunctionCallback);
    dispatch_set_context(*(dispatch_object_t *)(a1 + 72), v3);
    dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 72), 0, 1000000 * *(int *)(a1 + 36), 0);
    dispatch_resume(*(dispatch_object_t *)(a1 + 72));
  }
  *(_BYTE *)(a1 + 33) = 0;
  return 0;
}

void fcrTimerOnTimerCanceled(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

void fcrTimerDispatchFunctionCallback()
{
  uint64_t v0;
  void (**v1)(void);
  uint64_t v2;
  const void *v3;

  v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    v1 = (void (**)(void))v0;
    if (*(_QWORD *)(v0 + 24))
    {
      v2 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v2)
      {
        v3 = (const void *)v2;
        v1[3]();
        CFRelease(v3);
      }
    }
    CFRelease(v1);
  }
}

uint64_t FigCaptionRendererTimerCreate(int a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t Instance;
  uint64_t v9;
  uint64_t v10;
  char __str[256];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  *a4 = 0;
  MEMORY[0x19402F294](&FigCaptionRendererTimerLocalGetTypeID_sRegisterFigCaptionRendererTimerOnce, RegisterFigCaptionRendererTimerClass);
  Instance = _CFRuntimeCreateInstance();
  *(_WORD *)(Instance + 32) = 256;
  *(_DWORD *)(Instance + 36) = a1;
  snprintf(__str, 0x100uLL, "com.apple.coremedia.figfcrtimer.soQueue<%p>", (const void *)Instance);
  *(_QWORD *)(Instance + 64) = dispatch_queue_create(__str, 0);
  if (a2
    && a3
    && (*(_QWORD *)(Instance + 24) = a2,
        v9 = FigCFWeakReferenceHolderCreateWithReferencedObject(),
        (*(_QWORD *)(Instance + 16) = v9) == 0))
  {
    v10 = FigSignalErrorAt();
    CFRelease((CFTypeRef)Instance);
  }
  else
  {
    v10 = 0;
    *a4 = Instance;
  }
  return v10;
}

uint64_t RegisterFigCaptionRendererTimerClass()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigCaptionRendererTimerID = result;
  return result;
}

double FigCaptionRendererTimerInit(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

void FigCaptionRendererTimer_Finalize(uint64_t a1)
{
  const void *v2;
  NSObject *v3;

  v2 = *(const void **)(a1 + 16);
  if (v2)
    CFRelease(v2);
  v3 = *(NSObject **)(a1 + 64);
  if (v3)
  {
    dispatch_release(v3);
    *(_QWORD *)(a1 + 64) = 0;
  }
}

__CFString *FigCaptionRendererTimerCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigCaptionRendererTimer %p>"), a1);
  return Mutable;
}

uint64_t FigSampleGeneratorServerStart()
{
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __FigSampleGeneratorServerStart_block_invoke;
  block[3] = &__block_descriptor_tmp_94;
  block[4] = 0;
  if (FigSampleGeneratorServerStart_sFigSampleGeneratorServerOnce != -1)
    dispatch_once(&FigSampleGeneratorServerStart_sFigSampleGeneratorServerOnce, block);
  return FigSampleGeneratorServerStart_sFigSampleGeneratorServerStartError;
}

uint64_t HandleSampleGeneratorMessage(uint64_t a1, void *a2)
{
  uint64_t OpCode;
  uint64_t v6;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  v6 = 0;
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
  OpCode = FigXPCServerLookupAndRetainAssociatedObject();
  if ((_DWORD)OpCode)
    return OpCode;
  else
    return 4294951138;
}

uint64_t HandleNoReplyFigSampleGeneratorMessage(uint64_t a1, void *a2)
{
  uint64_t OpCode;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
  OpCode = FigXPCServerLookupAndRetainAssociatedObject();
  if ((_DWORD)OpCode)
    return OpCode;
  else
    return 4294951138;
}

double FigServedSampleGeneratorObjectState_Init(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

void FigServedSampleGeneratorObjectState_Finalize(_QWORD *context)
{
  const void *v2;
  void *v3;
  uint64_t v4;
  const __CFDictionary *v5;

  v2 = (const void *)context[2];
  if (v2)
  {
    CFRelease(v2);
    context[2] = 0;
  }
  v3 = (void *)context[3];
  if (v3)
  {
    os_release(v3);
    context[3] = 0;
  }
  v4 = context[4];
  if (v4)
  {
    v5 = *(const __CFDictionary **)(v4 + 16);
    if (v5)
      CFDictionaryApplyFunction(v5, (CFDictionaryApplierFunction)sampleBufferHandler_removeListenersApply, context);
  }
  FigCFWeakReferenceStore();
  FigCFWeakReferenceStore();
  DestroySampleBufferHandler(context[4]);
  context[4] = 0;
}

__CFString *FigServedSampleGeneratorObjectState_CopyDebugDesc(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("FigServedSampleGeneratorObjectState %p"), a1);
  return Mutable;
}

uint64_t sampleBufferHandler_removeListenersApply()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return FigNotificationCenterRemoveWeakListener();
}

void DestroySampleBufferHandler(uint64_t a1)
{
  opaqueCMBufferQueueTriggerToken *v2;
  void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;

  if (a1)
  {
    v2 = *(opaqueCMBufferQueueTriggerToken **)(a1 + 8);
    if (v2)
    {
      CMBufferQueueRemoveTrigger(*(CMBufferQueueRef *)a1, v2);
      *(_QWORD *)(a1 + 8) = 0;
    }
    if (*(_QWORD *)a1)
      CMBufferQueueReset(*(CMBufferQueueRef *)a1);
    v3 = *(void **)(a1 + 40);
    if (v3)
    {
      *(_QWORD *)(a1 + 40) = 0;
      xpc_release(v3);
    }
    v4 = *(const void **)(a1 + 16);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (*(_QWORD *)a1)
    {
      CFRelease(*(CFTypeRef *)a1);
      *(_QWORD *)a1 = 0;
    }
    v5 = *(const void **)(a1 + 48);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(a1 + 48) = 0;
    }
    v6 = *(const void **)(a1 + 56);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(a1 + 56) = 0;
    }
    FigSimpleMutexDestroy();
    *(_QWORD *)(a1 + 24) = 0;
    v7 = *(const void **)(a1 + 64);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(a1 + 64) = 0;
    }
    v8 = *(const void **)(a1 + 72);
    if (v8)
    {
      CFRelease(v8);
      *(_QWORD *)(a1 + 72) = 0;
    }
    v9 = *(const void **)(a1 + 80);
    if (v9)
      CFRelease(v9);
    free((void *)a1);
  }
}

uint64_t sampleBufferGenerator_dataFailedCallback(uint64_t a1, uint64_t a2, uint64_t a3, opaqueCMSampleBuffer *a4)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a2 + 32);
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  return sampleBufferGenerator_sendDataFailedMessage(a4, v5);
}

uint64_t sampleBufferGenerator_sendDataFailedMessage(opaqueCMSampleBuffer *a1, uint64_t a2)
{
  int64_t v5;
  void *value;
  xpc_object_t xdict;
  OSStatus statusOut;

  value = 0;
  xdict = 0;
  if (a1 && a2)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(a2 + 24));
    if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a2 + 16), a1, (const void **)&value))
    {
      v5 = 0;
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt64Type, &v5);
      statusOut = FigXPCCreateBasicMessage();
      if (!statusOut)
      {
        xpc_dictionary_set_int64(xdict, "RequestID", v5);
        CMSampleBufferHasDataFailed(a1, &statusOut);
        xpc_dictionary_set_int64(xdict, "SampleBufferErrorReturn", statusOut);
        xpc_connection_send_message(*(xpc_connection_t *)(a2 + 40), xdict);
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a2 + 16), a1);
      }
    }
    else
    {
      statusOut = FigSignalErrorAt();
    }
    MEMORY[0x19402EF04](*(_QWORD *)(a2 + 24));
  }
  else
  {
    statusOut = FigSignalErrorAt();
  }
  return FigXPCRelease();
}

void sampleBufferGenerator_bufferQueue_dataReadyCallback(uint64_t a1)
{
  _QWORD block[5];

  if (a1)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __sampleBufferGenerator_bufferQueue_dataReadyCallback_block_invoke;
    block[3] = &__block_descriptor_tmp_22_5;
    block[4] = a1;
    dispatch_async((dispatch_queue_t)gFigSampleGeneratorServerCallbackQueue, block);
  }
  else
  {
    FigSignalErrorAt();
  }
}

_QWORD *__sampleBufferGenerator_bufferQueue_dataReadyCallback_block_invoke(_QWORD *result)
{
  uint64_t v1;
  const void *v2;
  _xpc_connection_s *v3;
  int64_t v4;
  int64_t valuePtr;
  void *value;
  xpc_object_t xdict;

  v1 = result[4];
  value = 0;
  if (v1)
  {
    result = CMBufferQueueDequeueIfDataReadyAndRetain(*(CMBufferQueueRef *)v1);
    if (result)
    {
      v2 = result;
      do
      {
        MEMORY[0x19402EEEC](*(_QWORD *)(v1 + 24));
        if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(v1 + 16), v2, (const void **)&value))
        {
          valuePtr = 0;
          CFNumberGetValue((CFNumberRef)value, kCFNumberSInt64Type, &valuePtr);
          v3 = *(_xpc_connection_s **)(v1 + 40);
          v4 = valuePtr;
          xdict = 0;
          if (!FigXPCCreateBasicMessage())
          {
            xpc_dictionary_set_int64(xdict, "RequestID", v4);
            xpc_dictionary_set_int64(xdict, "SampleBufferErrorReturn", 0);
            if (*(_QWORD *)(v1 + 64))
            {
              if (!FigXPCMessageAddDataBufferFromCMSampleBuffer())
                xpc_connection_send_message(v3, xdict);
            }
            else
            {
              FigSignalErrorAt();
            }
          }
          FigXPCRelease();
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v1 + 16), v2);
        }
        MEMORY[0x19402EF04](*(_QWORD *)(v1 + 24));
        CFRelease(v2);
        result = CMBufferQueueDequeueIfDataReadyAndRetain(*(CMBufferQueueRef *)v1);
        v2 = result;
      }
      while (result);
    }
  }
  return result;
}

uint64_t sampleBufferGeneratorServer_createSampleBufferAtCursor(CFTypeRef cf, int a2, uint64_t a3, void *a4, void *a5)
{
  CFTypeRef v9;
  CFTypeID v10;
  CFTypeRef v11;
  CFTypeID v12;
  const void *data;
  uint64_t v14;
  uint64_t v15;
  _QWORD *CallbackParameters;
  uint64_t v17;
  uint64_t SampleBufferGeneratorRequestFromXPCMessage;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(CFTypeRef, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, opaqueCMSampleBuffer **);
  uint64_t v26;
  const __CFArray *v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(CFTypeRef, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, opaqueCMSampleBuffer **);
  uint64_t v35;
  xpc_object_t dictionary;
  size_t length;
  _OWORD v39[4];
  int v40;
  opaqueCMSampleBuffer *v41;

  v9 = cf;
  v41 = 0;
  v40 = 0;
  memset(v39, 0, sizeof(v39));
  if (a2)
  {
    if (!cf)
      goto LABEL_28;
    v10 = CFGetTypeID(cf);
    if (v10 != FigSampleGeneratorBatchGetTypeID())
      goto LABEL_28;
    v11 = 0;
    if (!a3)
      goto LABEL_28;
  }
  else
  {
    if (!cf)
      goto LABEL_28;
    v12 = CFGetTypeID(cf);
    if (v12 != FigSampleGeneratorGetTypeID())
      goto LABEL_28;
    v11 = v9;
    v9 = 0;
    if (!a3)
      goto LABEL_28;
  }
  length = 0;
  data = xpc_dictionary_get_data(a4, "SampleBufferGenerationRequest", &length);
  if (!data || length != 48 || (v14 = *(_QWORD *)(a3 + 32)) == 0)
  {
LABEL_28:
    v35 = FigSignalErrorAt();
    CallbackParameters = 0;
    goto LABEL_25;
  }
  v15 = (uint64_t)data;
  CallbackParameters = sampleBufferGeneratorServer_createCallbackParameters(*(_QWORD *)(a3 + 32), 1, v9);
  if (!CallbackParameters)
    goto LABEL_29;
  v17 = (*(_DWORD *)(a3 + 40) + 1);
  *(_DWORD *)(a3 + 40) = v17;
  SampleBufferGeneratorRequestFromXPCMessage = sampleBufferGeneratorServer_createSampleBufferGeneratorRequestFromXPCMessage(v17 << 32, v15, a3, (uint64_t)v39);
  if (!(_DWORD)SampleBufferGeneratorRequestFromXPCMessage)
  {
    if (a2)
    {
      v19 = v39[0];
      v20 = *(_QWORD *)&v39[1];
      v21 = DWORD2(v39[1]);
      v22 = *(_QWORD *)((char *)&v39[1] + 12);
      v23 = DWORD1(v39[2]);
      v24 = DWORD2(v39[2]);
      v25 = *(uint64_t (**)(CFTypeRef, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, opaqueCMSampleBuffer **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v25)
      {
        v26 = v25(v9, v19, *((_QWORD *)&v19 + 1), v20, v21, v22, v23, v24, 0, 0, 0, &v41);
        goto LABEL_21;
      }
    }
    else
    {
      v27 = *(const __CFArray **)(v14 + 48);
      if (v27 && CFArrayGetCount(v27))
      {
LABEL_29:
        SampleBufferGeneratorRequestFromXPCMessage = FigSignalErrorAt();
        goto LABEL_30;
      }
      v28 = v39[0];
      v29 = *(_QWORD *)&v39[1];
      v30 = DWORD2(v39[1]);
      v31 = *(_QWORD *)((char *)&v39[1] + 12);
      v32 = DWORD1(v39[2]);
      v33 = DWORD2(v39[2]);
      v34 = *(uint64_t (**)(CFTypeRef, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, opaqueCMSampleBuffer **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v34)
      {
        v26 = v34(v11, v28, *((_QWORD *)&v28 + 1), v29, v30, v31, v32, v33, 0, 0, 0, &v41);
LABEL_21:
        v35 = v26;
        if ((_DWORD)v26)
          goto LABEL_25;
        sampleBufferGeneratorServer_requestCallback((uint64_t)CallbackParameters, (uint64_t)v39, 0, v41);
        if (xpc_array_get_count((xpc_object_t)CallbackParameters[2]) == 1)
        {
          dictionary = xpc_array_get_dictionary((xpc_object_t)CallbackParameters[2], 0);
          xpc_dictionary_set_value(a5, "SampleBufferResponse", dictionary);
          v35 = 0;
          goto LABEL_25;
        }
        goto LABEL_29;
      }
    }
    v35 = 4294954514;
    goto LABEL_25;
  }
LABEL_30:
  v35 = SampleBufferGeneratorRequestFromXPCMessage;
LABEL_25:
  if (v41)
    CFRelease(v41);
  sampleBufferGeneratorServer_destroySampleBufferGeneratorRequest((uint64_t)v39);
  sampleBufferGeneratorServer_destroyCallbackParameters(CallbackParameters);
  return v35;
}

_QWORD *sampleBufferGeneratorServer_createCallbackParameters(uint64_t a1, uint64_t a2, const void *a3)
{
  _QWORD *v6;
  xpc_object_t v7;
  CFTypeRef v8;

  v6 = malloc_type_calloc(1uLL, 0x20uLL, 0x10A0040C95B7C1FuLL);
  if (v6 && a1)
  {
    v7 = xpc_array_create(0, 0);
    v6[2] = v7;
    if (v7)
    {
      v6[3] = a1;
      *v6 = a2;
      if (a3)
        v8 = CFRetain(a3);
      else
        v8 = 0;
      v6[1] = v8;
    }
  }
  else if (FigSignalErrorAt())
  {
    sampleBufferGeneratorServer_destroyCallbackParameters(v6);
    return 0;
  }
  return v6;
}

uint64_t sampleBufferGeneratorServer_createSampleBufferGeneratorRequestFromXPCMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  CFNumberRef v10;
  uint64_t v11;
  uint64_t valuePtr;

  valuePtr = a1;
  if (!a2
    || !a4
    || (*(_DWORD *)(a4 + 24) = *(_DWORD *)(a2 + 16),
        *(_OWORD *)(a4 + 8) = *(_OWORD *)a2,
        *(_QWORD *)(a4 + 36) = *(_QWORD *)(a2 + 20),
        v7 = MEMORY[0x19402D578](a3 + 48),
        v8 = MEMORY[0x19402D578](a3 + 56),
        !(v7 | v8)))
  {
    v11 = FigSignalErrorAt();
    if (!(_DWORD)v11)
      return v11;
    goto LABEL_17;
  }
  v9 = (const void *)v8;
  if (FigFormatReaderServerIsObjectIDLocallyServed())
  {
    if (FigXPCFormatReaderServerCopySampleCursorForID(*(_QWORD *)(a2 + 32), (_QWORD *)a4))
      goto LABEL_23;
  }
  else if (FigFormatReaderXPCRemoteCopySampleCursorForObjectIDFromOtherProcess(v7, (uint64_t)v9, *(_QWORD *)(a2 + 32), (_QWORD *)a4))
  {
    goto LABEL_23;
  }
  if (*(_QWORD *)(a2 + 40))
  {
    if (FigFormatReaderServerIsObjectIDLocallyServed())
    {
      if (FigXPCFormatReaderServerCopySampleCursorForID(*(_QWORD *)(a2 + 40), (_QWORD *)(a4 + 28)))
        goto LABEL_23;
    }
    else if (FigFormatReaderXPCRemoteCopySampleCursorForObjectIDFromOtherProcess(v7, (uint64_t)v9, *(_QWORD *)(a2 + 40), (_QWORD *)(a4 + 28)))
    {
      goto LABEL_23;
    }
  }
  *(_QWORD *)(a4 + 52) = 0;
  *(_QWORD *)(a4 + 44) = 0;
  v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &valuePtr);
  *(_QWORD *)(a4 + 60) = v10;
  if (v10)
  {
    v11 = 0;
    if (!v7)
      goto LABEL_14;
    goto LABEL_13;
  }
LABEL_23:
  v11 = FigSignalErrorAt();
  if (v7)
LABEL_13:
    CFRelease((CFTypeRef)v7);
LABEL_14:
  if (v9)
    CFRelease(v9);
  if ((_DWORD)v11)
LABEL_17:
    sampleBufferGeneratorServer_destroySampleBufferGeneratorRequest(a4);
  return v11;
}

uint64_t sampleBufferGeneratorServer_requestCallback(uint64_t result, uint64_t a2, int a3, opaqueCMSampleBuffer *a4)
{
  uint64_t *v4;
  uint64_t v5;
  const __CFNumber *v6;
  int IsReady;
  __CFArray *v10;
  int64_t v11;
  void *v12;
  xpc_object_t v13;
  void *v14;
  int64_t valuePtr;

  if (result)
  {
    v4 = (uint64_t *)result;
    v5 = *(_QWORD *)(result + 24);
    if (v5)
    {
      v6 = *(const __CFNumber **)(a2 + 60);
      if (!v6)
        return FigSignalErrorAt();
      valuePtr = 0;
      CFNumberGetValue(v6, kCFNumberSInt64Type, &valuePtr);
      if (valuePtr < *v4)
      {
        if (!a4)
        {
          IsReady = 1;
          goto LABEL_13;
        }
        IsReady = CMSampleBufferDataIsReady(a4);
        if (IsReady)
          goto LABEL_13;
        MEMORY[0x19402EEEC](*(_QWORD *)(v5 + 24));
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(v5 + 16), a4, v6);
        MEMORY[0x19402EF04](*(_QWORD *)(v5 + 24));
        if (!v4[1])
        {
          v10 = *(__CFArray **)(v5 + 48);
          goto LABEL_12;
        }
        if (FigCFDictionaryGetValueIfPresent())
        {
          v10 = 0;
LABEL_12:
          CFArrayAppendValue(v10, a4);
          IsReady = 0;
LABEL_13:
          v11 = valuePtr;
          v12 = (void *)v4[2];
          v13 = xpc_dictionary_create(0, 0, 0);
          v14 = v13;
          if (v13)
          {
            xpc_dictionary_set_int64(v13, "SampleBufferErrorReturn", a3);
            xpc_dictionary_set_int64(v14, "RequestID", v11);
            xpc_dictionary_set_BOOL(v14, "SampleBufferDataReady", IsReady != 0);
            if (!a4)
              goto LABEL_17;
            if (*(_QWORD *)(v5 + 64))
            {
              if (FigXPCMessageAddCMSampleBuffer())
                return FigXPCRelease();
LABEL_17:
              xpc_array_append_value(v12, v14);
              return FigXPCRelease();
            }
          }
          FigSignalErrorAt();
          return FigXPCRelease();
        }
      }
      return FigSignalErrorAt();
    }
  }
  return result;
}

void sampleBufferGeneratorServer_destroySampleBufferGeneratorRequest(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = *(const void **)a1;
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 28);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 60);
  if (v4)
    CFRelease(v4);
}

void sampleBufferGeneratorServer_destroyCallbackParameters(_QWORD *a1)
{
  const void *v2;
  void *v3;

  if (a1)
  {
    v2 = (const void *)a1[1];
    if (v2)
    {
      CFRelease(v2);
      a1[1] = 0;
    }
    v3 = (void *)a1[2];
    if (v3)
    {
      a1[2] = 0;
      xpc_release(v3);
    }
    free(a1);
  }
}

uint64_t sampleBufferGeneratorServer_enqueuePendingSampleBuffers(CFArrayRef theArray, uint64_t a2)
{
  uint64_t v3;
  CFIndex Count;
  CFIndex v5;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v8;
  uint64_t v10;
  void *value;

  value = 0;
  if (!a2)
    return FigSignalErrorAt();
  if (!theArray)
    return FigSignalErrorAt();
  v3 = *(_QWORD *)(a2 + 32);
  if (!v3)
    return FigSignalErrorAt();
  Count = CFArrayGetCount(theArray);
  if (Count < 1)
    return 0;
  v5 = Count;
  for (i = 0; i != v5; ++i)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    v8 = CMBufferQueueEnqueue(*(CMBufferQueueRef *)v3, ValueAtIndex);
    if ((_DWORD)v8)
    {
      v10 = 0;
      MEMORY[0x19402EEEC](*(_QWORD *)(v3 + 24));
      if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(v3 + 16), ValueAtIndex, (const void **)&value))
      {
        CFNumberGetValue((CFNumberRef)value, kCFNumberSInt64Type, &v10);
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v3 + 16), ValueAtIndex);
      }
      MEMORY[0x19402EF04](*(_QWORD *)(v3 + 24));
    }
  }
  return v8;
}

BOOL sampleBufferGeneratorServer_NotificationFilter()
{
  return FigCFEqual() != 0;
}

uint64_t RegisterFigCFCaptionRendererClass()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigCFCaptionRendererCreate()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x19402F294](&FigCFCaptionRendererGetClassID_sRegisterFigCFCaptionRendererOnce, RegisterFigCFCaptionRendererClass);
  if (CMDerivedObjectCreate())
    return 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return 0;
  v1 = DerivedStorage;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 336) = 0;
  v2 = FigSimpleMutexCreate();
  *(_QWORD *)(v1 + 32) = v2;
  if (!v2)
    return 0;
  *(_BYTE *)(v1 + 344) = 1;
  CMNotificationCenterGetDefaultLocalCenter();
  FigGetNotifyingObjectForMediaAccessibilityChanged();
  FigNotificationCenterAddWeakListener();
  FigCaptionLayoutCopyMAXCaptionSystemSettings(v1 + 80);
  return 0;
}

uint64_t fcfcr_MAXCaptionSettingsChangedNotificationCallBack()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigCaptionLayoutCopyMAXCaptionSystemSettings(DerivedStorage + 80);
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t FigCFCaptionRendererProcessCaptionCommandData(uint64_t a1, int a2, const __CFDictionary *a3)
{
  uint64_t result;
  _QWORD *v6;
  const void *Value;
  const void *v8;
  const __CFDictionary *v9;
  const void *v10;
  char v11;
  const __CFDictionary *ValueAtIndex;

  result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    v6 = (_QWORD *)result;
    switch(a2)
    {
      case 1:
        goto LABEL_21;
      case 6:
        MEMORY[0x19402EEEC](*(_QWORD *)(result + 32));
        FigCFDictionaryGetBooleanIfPresent();
        Value = CFDictionaryGetValue(a3, CFSTR("W"));
        v8 = (const void *)v6[37];
        v6[37] = Value;
        if (Value)
          goto LABEL_4;
        goto LABEL_5;
      case 7:
        MEMORY[0x19402EEEC](*(_QWORD *)(result + 32));
        Value = CFDictionaryGetValue(a3, CFSTR("C"));
        v8 = (const void *)v6[36];
        v6[36] = Value;
        if (!Value)
          goto LABEL_5;
LABEL_4:
        CFRetain(Value);
LABEL_5:
        if (v8)
          CFRelease(v8);
        JUMPOUT(0x19402EF04);
      case 8:
        MEMORY[0x19402EEEC](*(_QWORD *)(result + 32));
        if (a3)
        {
          v9 = (const __CFDictionary *)CFDictionaryGetValue(a3, CFSTR("V"));
          a3 = v9;
          v10 = (const void *)v6[40];
          v6[40] = v9;
          if (v9)
          {
            CFRetain(v9);
            v11 = 0;
            goto LABEL_16;
          }
        }
        else
        {
          v10 = (const void *)v6[40];
          v6[40] = 0;
        }
        v11 = 1;
LABEL_16:
        if (v10)
          CFRelease(v10);
        if ((v11 & 1) == 0)
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a3, 0);
          CFDictionaryGetValue(ValueAtIndex, CFSTR("CMTextHighlightAttributeKey_StringToHighlight"));
        }
        MEMORY[0x19402EF04](v6[4]);
LABEL_21:
        CMNotificationCenterGetDefaultLocalCenter();
        result = CMNotificationCenterPostNotification();
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t FigCFCaptionRendererResetCaptions()
{
  uint64_t result;
  uint64_t v1;
  const void *v2;
  const void *v3;

  result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    v1 = result;
    MEMORY[0x19402EEEC](*(_QWORD *)(result + 32));
    v2 = *(const void **)(v1 + 288);
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)(v1 + 288) = 0;
    }
    v3 = *(const void **)(v1 + 296);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(v1 + 296) = 0;
    }
    FigCaptionLayoutReleaseCaptionElementArray(*(const __CFArray **)(v1 + 304));
    *(_QWORD *)(v1 + 304) = 0;
    JUMPOUT(0x19402EF04);
  }
  return result;
}

uint64_t FigCFCaptionRendererSetFontName(uint64_t a1, const __CFString *a2)
{
  uint64_t result;
  uint64_t v4;
  const void *v5;

  result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    v4 = result;
    MEMORY[0x19402EEEC](*(_QWORD *)(result + 32));
    v5 = *(const void **)(v4 + 24);
    if (v5)
      CFRelease(v5);
    *(_QWORD *)(v4 + 24) = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2);
    JUMPOUT(0x19402EF04);
  }
  return result;
}

uint64_t FigCFCaptionRendererSetStyleOptions(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t result;
  uint64_t v4;
  const void *v5;
  CFDictionaryRef Copy;

  result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    v4 = result;
    MEMORY[0x19402EEEC](*(_QWORD *)(result + 32));
    v5 = *(const void **)(v4 + 336);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(v4 + 336) = 0;
    }
    if (!a2
      || (Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2), (*(_QWORD *)(v4 + 336) = Copy) != 0))
    {
      JUMPOUT(0x19402EF04);
    }
    return FigSignalErrorAt();
  }
  return result;
}

void FigCFCaptionRendererGetCaptionElementRect(uint64_t a1, _OWORD *a2, int a3, int a4, _DWORD *a5, CGRect *a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  __int128 v12;
  __int128 v13;
  _OWORD v14[4];

  v12 = a2[1];
  v14[0] = *a2;
  v14[1] = v12;
  v13 = a2[3];
  v14[2] = a2[2];
  v14[3] = v13;
  FigCFCaptionRendererGetCaptionElementWindowProperties(a7, a8, a9, a10, a11, a12, a1, (double *)v14, a3, a4, a5, a6, 0, 0, 0);
}

void FigCFCaptionRendererGetCaptionElementWindowProperties(double a1, double a2, double a3, double a4, double a5, double a6, uint64_t a7, double *a8, int a9, int a10, _DWORD *a11, CGRect *a12, BOOL *a13, _QWORD *a14, _BYTE *a15)
{
  uint64_t DerivedStorage;
  double v23;
  double v24;
  double v25;
  CFTypeRef v26;
  CFTypeRef v27;
  CFTypeRef v28;
  CFTypeRef v29;
  CFTypeRef v30;
  CFTypeRef v31;
  CFTypeRef v32;
  CFTypeRef v33;
  CFTypeRef v34;
  CFTypeRef v35;
  CFTypeRef v36;
  CFTypeRef v37;
  const void *v38;
  CFTypeRef v39;
  const void *v40;
  const void *v41;
  const void *v42;
  const __CFArray *v43;
  __CFString *v44;
  __CFString *v45;
  const void *v46;
  const void *v47;
  CGFloat a;
  const void *v49;
  CFTypeRef v50;
  double v51;
  double v52;
  double v53;
  double v54;
  int v55;
  char v56;
  double v57;
  double v58;
  double v59;
  double v60;
  const __CFArray *MutableCopy;
  const __CFArray *v62;
  double v63;
  char v64;
  double v65;
  uint64_t Count;
  CFIndex v67;
  char v68;
  double v69;
  CGRect *v70;
  double v71;
  double v72;
  double v73;
  CFIndex v74;
  CGRect *v75;
  double ElementRect;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  CFIndex v83;
  CGRect *v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  const __CFArray *v92;
  double v93;
  double v94;
  CFIndex v95;
  double v96;
  double v97;
  double *ValueAtIndex;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  CFIndex i;
  double v106;
  char v107;
  double v108;
  uint64_t v109;
  CFIndex v110;
  char v111;
  double v112;
  CGRect *v113;
  double v114;
  double v115;
  double v116;
  CFIndex v117;
  CGRect *v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  CFIndex v126;
  double v127;
  CGRect *v128;
  double v129;
  double v130;
  double v131;
  double v132;
  CFIndex v133;
  const __CFArray *v134;
  CFDictionaryRef *v135;
  CFIndex v136;
  int64_t v137;
  double v138;
  double v139;
  double v140;
  __CFDictionary *Mutable;
  const void **v142;
  const void **v143;
  const void **v144;
  const void **v145;
  const void *v146;
  const void *v147;
  uint64_t v148;
  const void *v149;
  CFDictionaryRef v150;
  CFIndex j;
  __n128 v152;
  _QWORD *v153;
  BOOL *v154;
  CGRect *v155;
  __CFArray *v156;
  char v157;
  CFIndex v158;
  uint64_t v159;
  CFIndex k;
  CGRect *v161;
  CGRect *v162;
  double v163;
  double v164;
  double v165;
  const __CFArray *cf;
  uint64_t v167;
  CFAllocatorRef allocatora;
  CFAllocatorRef allocatorb;
  const __CFAllocator *allocatorc;
  double v177;
  double v178;
  CFArrayRef v179;
  const __CFArray *v180;
  const __CFArray *v181;
  CFArrayRef theArray;
  _QWORD v183[3];
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  CFTypeRef v196;
  CGAffineTransform v197;
  CFRange v198;
  CFRange v199;
  CGRect v200;
  CGRect v201;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v23 = *a8;
  v24 = a8[2];
  v25 = a8[4];
  v177 = a8[6];
  v195 = 0;
  v194 = 0u;
  v193 = 0u;
  v192 = 0u;
  v191 = 0u;
  v190 = 0u;
  v189 = 0u;
  v188 = 0u;
  v187 = 0u;
  v186 = 0u;
  v184 = 0u;
  v185 = 0u;
  theArray = 0;
  v26 = *(CFTypeRef *)(DerivedStorage + 80);
  if (v26)
    v26 = CFRetain(v26);
  v183[0] = v26;
  v27 = *(CFTypeRef *)(DerivedStorage + 88);
  if (v27)
    v27 = CFRetain(v27);
  v183[1] = v27;
  v28 = *(CFTypeRef *)(DerivedStorage + 96);
  if (v28)
    v28 = CFRetain(v28);
  v183[2] = v28;
  v29 = *(CFTypeRef *)(DerivedStorage + 104);
  if (v29)
    v29 = CFRetain(v29);
  *(_QWORD *)&v184 = v29;
  v30 = *(CFTypeRef *)(DerivedStorage + 120);
  if (v30)
    v30 = CFRetain(v30);
  *(_QWORD *)&v185 = v30;
  v31 = *(CFTypeRef *)(DerivedStorage + 128);
  if (v31)
    v31 = CFRetain(v31);
  *((_QWORD *)&v185 + 1) = v31;
  v32 = *(CFTypeRef *)(DerivedStorage + 136);
  if (v32)
    v32 = CFRetain(v32);
  *(_QWORD *)&v186 = v32;
  v33 = *(CFTypeRef *)(DerivedStorage + 144);
  if (v33)
    v33 = CFRetain(v33);
  *((_QWORD *)&v186 + 1) = v33;
  v34 = *(CFTypeRef *)(DerivedStorage + 152);
  if (v34)
    v34 = CFRetain(v34);
  *(_QWORD *)&v187 = v34;
  v35 = *(CFTypeRef *)(DerivedStorage + 160);
  if (v35)
    v35 = CFRetain(v35);
  *((_QWORD *)&v187 + 1) = v35;
  v36 = *(CFTypeRef *)(DerivedStorage + 168);
  if (v36)
    v36 = CFRetain(v36);
  *(_QWORD *)&v188 = v36;
  v37 = *(CFTypeRef *)(DerivedStorage + 176);
  if (v37)
    v37 = CFRetain(v37);
  *((_QWORD *)&v188 + 1) = v37;
  *((_QWORD *)&v184 + 1) = *(_QWORD *)(DerivedStorage + 112);
  v190 = *(_OWORD *)(DerivedStorage + 200);
  v189 = *(_OWORD *)(DerivedStorage + 184);
  v191 = *(_OWORD *)(DerivedStorage + 216);
  v192 = *(_OWORD *)(DerivedStorage + 232);
  v193 = *(_OWORD *)(DerivedStorage + 248);
  v194 = *(_OWORD *)(DerivedStorage + 264);
  v195 = *(_QWORD *)(DerivedStorage + 280);
  v196 = 0;
  v197.a = 0.0;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 32));
  v38 = *(const void **)(DerivedStorage + 24);
  if (v38)
    v39 = CFRetain(v38);
  else
    v39 = 0;
  v40 = *(const void **)(DerivedStorage + 288);
  if (v40)
    v181 = (const __CFArray *)CFRetain(v40);
  else
    v181 = 0;
  v41 = *(const void **)(DerivedStorage + 296);
  if (v41)
    v180 = (const __CFArray *)CFRetain(v41);
  else
    v180 = 0;
  v42 = *(const void **)(DerivedStorage + 320);
  if (v42)
    v43 = (const __CFArray *)CFRetain(v42);
  else
    v43 = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 32));
  *(_QWORD *)(DerivedStorage + 328) = 0;
  cf = v43;
  v44 = FigCaptionLayoutCopyEffectiveFontNamePlusInfoAndCreateElementGeometryArrays(v39, a9, v181, v180, *(_QWORD *)DerivedStorage, *(CFTypeRef *)(DerivedStorage + 8), *(const void **)(DerivedStorage + 16), 0, a1, a2, a3, a4, (uint64_t)v183, v43, (uint64_t *)(DerivedStorage + 328), (unsigned __int8 *)(DerivedStorage + 40), (double *)(DerivedStorage + 48), &v197, &v196,
          &theArray,
          (double *)(DerivedStorage + 64),
          (double *)(DerivedStorage + 56));
  v45 = v44;
  v46 = *(const void **)DerivedStorage;
  *(_QWORD *)DerivedStorage = v44;
  if (v44)
    CFRetain(v44);
  if (v46)
    CFRelease(v46);
  v47 = *(const void **)(DerivedStorage + 8);
  a = v197.a;
  *(CGFloat *)(DerivedStorage + 8) = v197.a;
  if (a != 0.0)
    CFRetain(*(CFTypeRef *)&a);
  if (v47)
    CFRelease(v47);
  v49 = *(const void **)(DerivedStorage + 16);
  v50 = v196;
  *(_QWORD *)(DerivedStorage + 16) = v196;
  if (v50)
    CFRetain(v50);
  if (v49)
    CFRelease(v49);
  if (*(_QWORD *)&v197.a)
    CFRelease(*(CFTypeRef *)&v197.a);
  if (v196)
    CFRelease(v196);
  v167 = DerivedStorage;
  if (v45)
    CFRelease(v45);
  if (v39)
    CFRelease(v39);
  if (CFPreferencesGetAppBooleanValue(CFSTR("disable_caption_repositioning"), CFSTR("com.apple.coremedia"), 0))
    goto LABEL_136;
  v51 = *MEMORY[0x1E0C9D648];
  v52 = *(double *)(MEMORY[0x1E0C9D648] + 8);
  v53 = round(a3 + a1 * 2.0);
  v54 = round(a4 + a2 * 2.0);
  if (a5 >= -0.5 && a6 >= -0.5)
    goto LABEL_60;
  v55 = 0;
  if (a3 > 0.0 && a4 > 0.0 && v53 > 0.0 && v54 > 0.0)
  {
    v92 = theArray;
    v93 = v53 / a3;
    v94 = v54 / a4;
    if (v93 == 1.0 && v94 == 1.0)
    {
LABEL_60:
      v55 = 0;
      goto LABEL_61;
    }
    v164 = v25;
    v165 = v23;
    v95 = 0;
    allocatorb = *(CFAllocatorRef *)MEMORY[0x1E0C9D648];
    v96 = v53 * 0.5 + v51;
    v163 = *(double *)(MEMORY[0x1E0C9D648] + 8);
    v97 = v54 * 0.5 + v52;
    if (theArray)
      goto LABEL_93;
LABEL_94:
    for (i = 0; v95 < i; i = CFArrayGetCount(v92))
    {
      ValueAtIndex = (double *)CFArrayGetValueAtIndex(v92, v95);
      v99 = ValueAtIndex[4];
      v100 = ValueAtIndex[5];
      v101 = ValueAtIndex[8] - v99;
      v102 = ValueAtIndex[9] - v100;
      v103 = v96 + (v99 + ValueAtIndex[6] * 0.5 - v96) * v93 - ValueAtIndex[6] * 0.5;
      v104 = v97 + (v100 + ValueAtIndex[7] * 0.5 - v97) * v94 - ValueAtIndex[7] * 0.5;
      ValueAtIndex[4] = v103;
      ValueAtIndex[5] = v104;
      ValueAtIndex[8] = v101 + v103;
      ValueAtIndex[9] = v102 + v104;
      ++v95;
      if (!v92)
        goto LABEL_94;
LABEL_93:
      ;
    }
    v55 = 1;
    v25 = v164;
    v23 = v165;
    v51 = *(double *)&allocatorb;
    v52 = v163;
  }
LABEL_61:
  if (v25 > 0.0 || v177 > 0.0 || v23 > 0.0 || v24 > 0.0)
  {
    v56 = 0;
    if (a9 == 1)
      v57 = v25;
    else
      v57 = v177;
    v58 = v53 - (v23 + v24);
    if (v58 > 0.0)
    {
      v59 = v54 - (v25 + v177);
      if (v59 > 0.0)
      {
        v60 = v52;
        *(double *)&allocatora = v51;
        MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theArray);
        if (MutableCopy)
        {
          v62 = MutableCopy;
          v63 = v57 + v60;
          v196 = 0;
          v197.a = 0.0;
          v64 = fcfcr_sweepBottomUp(MutableCopy, &v197.a, v63);
          v65 = v59 + v63;
          Count = CFArrayGetCount(v62);
          v198.location = 0;
          v198.length = Count;
          CFArraySortValues(v62, v198, (CFComparatorFunction)fcfcr_objComparatorTop, 0);
          if (Count < 1)
          {
            v68 = 0;
          }
          else
          {
            v67 = 0;
            v68 = 0;
            v69 = v59 + v63;
            do
            {
              v70 = (CGRect *)CFArrayGetValueAtIndex(v62, v67);
              fcfcr_getElementRect(v70);
              v73 = v71 + v72 - v65;
              if (v73 > 0.0)
              {
                v70[1].origin.y = v70[1].origin.y - v73;
                v70[2].origin.y = v70[2].origin.y - v73;
                v71 = v71 - v73;
                v68 = 1;
              }
              v69 = fmin(v69, v71);
              ++v67;
            }
            while (Count != v67);
            if ((v68 & (Count > 1)) == 1)
            {
              v178 = v58;
              v74 = 1;
              do
              {
                v75 = (CGRect *)CFArrayGetValueAtIndex(v62, v74);
                ElementRect = fcfcr_getElementRect(v75);
                v78 = v77;
                v80 = v79;
                v82 = v81;
                v83 = 0;
                do
                {
                  v84 = (CGRect *)CFArrayGetValueAtIndex(v62, v83);
                  v85 = fcfcr_getElementRect(v84);
                  v87 = v86;
                  if (fcfcr_isOverlap(ElementRect, v78, v80, v82, v85, v86, v88, v89))
                  {
                    v90 = v82 + v78 - v87;
                    v75[1].origin.y = v75[1].origin.y - v90;
                    v75[2].origin.y = v75[2].origin.y - v90;
                    v78 = v78 - v90;
                    v69 = fmin(v69, v78);
                  }
                  ++v83;
                }
                while (v74 != v83);
                ++v74;
              }
              while (v74 != Count);
              v68 = 1;
              v65 = v69;
              v91 = *(double *)&allocatora;
              v58 = v178;
              goto LABEL_100;
            }
            v65 = v69;
          }
          v91 = *(double *)&allocatora;
LABEL_100:
          v106 = v23 + v91;
          if (v65 < v63)
            fcfcr_sweepBottomUp(v62, &v197.a, (v63 + v65) * 0.5);
          v107 = fcfcr_sweepLeftRight(v62, (double *)&v196, v106);
          v108 = v58 + v106;
          v109 = CFArrayGetCount(v62);
          v199.location = 0;
          v199.length = v109;
          CFArraySortValues(v62, v199, (CFComparatorFunction)fcfcr_objComparatorRight, 0);
          if (v109 < 1)
          {
            v111 = 0;
          }
          else
          {
            v110 = 0;
            v111 = 0;
            v112 = v58 + v106;
            do
            {
              v113 = (CGRect *)CFArrayGetValueAtIndex(v62, v110);
              v114 = fcfcr_getElementRect(v113);
              v116 = v114 + v115 - v108;
              if (v116 > 0.0)
              {
                v113[1].origin.x = v113[1].origin.x - v116;
                v113[2].origin.x = v113[2].origin.x - v116;
                v114 = v114 - v116;
                v111 = 1;
              }
              v112 = fmin(v112, v114);
              ++v110;
            }
            while (v109 != v110);
            if ((v111 & (v109 > 1)) == 1)
            {
              v117 = 1;
              do
              {
                v118 = (CGRect *)CFArrayGetValueAtIndex(v62, v117);
                v119 = fcfcr_getElementRect(v118);
                v121 = v120;
                v123 = v122;
                v125 = v124;
                v126 = 0;
                v127 = v119 + v122;
                do
                {
                  v128 = (CGRect *)CFArrayGetValueAtIndex(v62, v126);
                  v129 = fcfcr_getElementRect(v128);
                  if (fcfcr_isOverlap(v119, v121, v123, v125, v129, v130, v131, v132))
                  {
                    v118[1].origin.x = v118[1].origin.x - (v127 - v129);
                    v118[2].origin.x = v118[2].origin.x - (v127 - v129);
                    v121 = v121 - (v127 - v129);
                    v112 = fmin(v112, v119);
                  }
                  ++v126;
                }
                while (v117 != v126);
                ++v117;
              }
              while (v117 != v109);
              v111 = 1;
            }
            v108 = v112;
          }
          v56 = v68 | v107 | v111 | v64;
          if (v108 < v106)
            fcfcr_sweepLeftRight(v62, (double *)&v196, (v106 + v108) * 0.5);
          CFRelease(v62);
          goto LABEL_120;
        }
        v56 = 0;
      }
    }
LABEL_120:
    v55 |= v56 & 1;
  }
  if (v55)
  {
    v133 = 0;
    v134 = theArray;
    allocatorc = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v179 = theArray;
    if (theArray)
      goto LABEL_133;
LABEL_134:
    for (j = 0; v133 < j; j = CFArrayGetCount(v134))
    {
      v135 = (CFDictionaryRef *)CFArrayGetValueAtIndex(v134, v133);
      v136 = CFDictionaryGetCount(v135[12]);
      if (v136)
      {
        v137 = v136;
        v138 = *((double *)v135 + 8) - FigCaptionLayoutGetBackgroundPathRectFromDictionary(v135[12]);
        v140 = *((double *)v135 + 9) - v139;
        if (v138 != 0.0 || v140 != 0.0)
        {
          memset(&v197, 0, sizeof(v197));
          CGAffineTransformMakeTranslation(&v197, v138, v140);
          Mutable = CFDictionaryCreateMutable(allocatorc, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          v142 = (const void **)malloc_type_calloc(8uLL, v137, 0x20E75177uLL);
          v143 = (const void **)malloc_type_calloc(8uLL, v137, 0xCDEDA0EuLL);
          CFDictionaryGetKeysAndValues(v135[12], v142, v143);
          v144 = v142;
          v145 = v143;
          if (v137 >= 1)
          {
            do
            {
              v147 = *v144++;
              v146 = v147;
              v148 = (uint64_t)*v145++;
              v149 = (const void *)MEMORY[0x19402AB3C](v148, &v197);
              CFDictionaryAddValue(Mutable, v146, v149);
              CGPathRelease((CGPathRef)v149);
              --v137;
            }
            while (v137);
          }
          free(v142);
          free(v143);
          v150 = v135[12];
          if (v150)
            CFRelease(v150);
          v135[12] = Mutable;
          v134 = v179;
        }
      }
      ++v133;
      if (!v134)
        goto LABEL_134;
LABEL_133:
      ;
    }
  }
LABEL_136:
  MEMORY[0x19402EEEC](*(_QWORD *)(v167 + 32));
  FigCaptionLayoutReleaseCaptionElementArray(*(const __CFArray **)(v167 + 304));
  *(_QWORD *)(v167 + 304) = theArray;
  MEMORY[0x19402EF04](*(_QWORD *)(v167 + 32));
  v152 = FigCaptionLayoutClearMAXCaptionSettings((uint64_t)v183);
  if (cf)
    CFRelease(cf);
  v154 = a13;
  v153 = a14;
  v155 = a12;
  if (v181)
    CFRelease(v181);
  if (v180)
    CFRelease(v180);
  MEMORY[0x19402EEEC](*(_QWORD *)(v167 + 32), v152);
  v156 = FigCaptionLayoutCopyCaptionElementArray(*(CFArrayRef *)(v167 + 304));
  v157 = *(_BYTE *)(v167 + 312);
  MEMORY[0x19402EF04](*(_QWORD *)(v167 + 32));
  if (v156)
    v158 = CFArrayGetCount(v156);
  else
    v158 = 0;
  if (v158 >= a10)
    v159 = a10;
  else
    v159 = v158;
  if (v159 >= 1)
  {
    for (k = 0; k != v159; ++k)
    {
      v161 = (CGRect *)CFArrayGetValueAtIndex(v156, k);
      v162 = v161;
      if (v155)
      {
        v200 = CGRectUnion(v161[2], v161[1]);
        v201 = CGRectIntegral(v200);
        *v155++ = CGRectInset(v201, -v162[4].origin.x, -v162[4].origin.x);
      }
      if (v154)
        *v154++ = CGColorGetAlpha(*(CGColorRef *)&v162[3].size.height) > 0.0;
      if (v153)
        *v153++ = *(_QWORD *)&v162[4].origin.y;
    }
  }
  if (a15)
    *a15 = v157;
  *a11 = v158;
  FigCaptionLayoutReleaseCaptionElementArray(v156);
}

void FigCFCaptionRendererDrawCaptionElementInContextForRectOrientation(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, uint64_t a5, unsigned int a6, CGContext *a7, int a8, BOOL *a9)
{
  uint64_t DerivedStorage;
  __CFArray *v14;
  const __CFArray *v15;
  CFIndex Count;
  void *ValueAtIndex;
  CGColor *v18;
  CGColor *v19;
  const __CFDictionary *v20;
  const CGFloat *Components;
  double v22;
  BOOL v23;
  CGColorSpace *v24;
  CGFloat v25;
  CGFloat MaxY;
  CGFloat MaxX;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat MinX;
  CGFloat v33;
  CGPath *Mutable;
  const __CFDictionary *v35;
  int64_t v36;
  const void **v37;
  const void **v38;
  const CGPath **v39;
  CGColor **v40;
  const CGPath *v41;
  CGColor *v42;
  CGColor *v43;
  CGFloat *v44;
  CGFloat v45;
  double v46;
  double v47;
  BOOL v48;
  CFIndex v49;
  const __CFAllocator *v50;
  double v51;
  CGFloat v52;
  double v53;
  double v54;
  double v55;
  double v56;
  int v57;
  CFIndex v58;
  const __CFDictionary *v59;
  const __CFAttributedString *v60;
  const __CFAttributedString *v61;
  CFIndex Length;
  CFIndex v63;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v65;
  unsigned int v66;
  const __CTFont *Attribute;
  double CapHeight;
  double XHeight;
  uint64_t Limit;
  double v71;
  CFIndex v72;
  CFDictionaryRef AttributesAndLongestEffectiveRange;
  const __CFDictionary *v74;
  const __CFAttributedString *v75;
  const __CTLine *v76;
  double LineWidthWithRange;
  const __CFBoolean *v78;
  double v79;
  CGColor *v80;
  const __CFNumber *v81;
  uint64_t v82;
  CFIndex v83;
  CFIndex v84;
  double Size;
  double v86;
  double v87;
  double v88;
  BOOL v89;
  const __CTLine *v90;
  double v91;
  CFNumberRef v92;
  CGPoint TextPosition;
  CGContext *v94;
  __CFAttributedString *MutableCopy;
  const __CTLine *v96;
  double v97;
  double v98;
  double v99;
  double v100;
  uint64_t v101;
  const __CTLine *v102;
  double v103;
  double v104;
  uint64_t v105;
  CGColorSpace *DeviceRGB;
  CGColorRef v107;
  CGColor *v108;
  const __CFArray *v109;
  CGFloat v111;
  CGFloat v112;
  double v113;
  double v114;
  double v115;
  CFIndex v116;
  CGFloat *v117;
  CGFloat v118;
  CFIndex v119;
  BOOL v120;
  CGFloat v121;
  double v122;
  const __CFString *attrName;
  const __CFString *v124;
  const __CFString *v125;
  CGFloat v126;
  CGFloat v127;
  uint64_t v128;
  int v129;
  CFIndex v130;
  const __CFArray *theArray;
  CGFloat v132;
  CFIndex v133;
  CGFloat fonta;
  const __CTFont *font;
  CGFloat colora;
  CGColor *color;
  double v138;
  CGFloat y1;
  const __CFAllocator *allocatora;
  CGAffineTransform value;
  os_log_type_t type;
  unsigned int v146;
  double v147;
  CFRange longestEffectiveRange;
  _BYTE v149[12];
  __int16 v150;
  const __CFAttributedString *v151;
  __int128 valuePtr;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  CFRange v156;
  CFRange v157;
  CFRange v158;
  CGSize v159;
  CGRect v160;
  CGRect v161;
  CGRect v162;
  CGRect v163;
  CGRect v164;
  CGRect v165;
  CGRect v166;
  CGRect v167;
  CGRect v168;
  CGRect v169;
  CGRect v170;
  CGRect v171;
  CGRect v172;

  v155 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 32));
  v14 = FigCaptionLayoutCopyCaptionElementArray(*(CFArrayRef *)(DerivedStorage + 304));
  v128 = DerivedStorage;
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 32));
  v15 = v14;
  if (v14)
  {
    Count = CFArrayGetCount(v14);
    v15 = v14;
    if ((a6 & 0x80000000) != 0)
      goto LABEL_99;
  }
  else
  {
    Count = 0;
    if ((a6 & 0x80000000) != 0)
    {
LABEL_99:
      v48 = 0;
      goto LABEL_102;
    }
  }
  if (Count <= a6)
    goto LABEL_99;
  v109 = v15;
  ValueAtIndex = (void *)CFArrayGetValueAtIndex(v15, a6);
  v115 = *(double *)(DerivedStorage + 72);
  v116 = CFArrayGetCount(*((CFArrayRef *)ValueAtIndex + 14));
  CGContextSaveGState(a7);
  v18 = (CGColor *)*((_QWORD *)ValueAtIndex + 15);
  if (v18)
  {
    v19 = CGColorRetain(v18);
    value.a = 0.0;
    v20 = *(const __CFDictionary **)(DerivedStorage + 336);
    if (v20
      && CFDictionaryGetValueIfPresent(v20, (const void *)*MEMORY[0x1E0CA2968], (const void **)&value)
      && ((Components = CGColorGetComponents(v19),
           v22 = Components[3],
           *(_QWORD *)v149 = 0,
           FigCFArrayGetCGFloatAtIndex(),
           v22 > 0.0)
        ? (v23 = v22 < *(double *)v149)
        : (v23 = 0),
          v23))
    {
      valuePtr = *(_OWORD *)Components;
      v153 = *((_QWORD *)Components + 2);
      v154 = *(_QWORD *)v149;
      DeviceRGB = CGColorSpaceCreateDeviceRGB();
      v24 = DeviceRGB;
      if (DeviceRGB)
      {
        v107 = CGColorCreate(DeviceRGB, (const CGFloat *)&valuePtr);
        if (v107)
        {
          v108 = v107;
          CGColorRelease(v19);
          v19 = v108;
        }
      }
    }
    else
    {
      v24 = 0;
    }
    CGColorSpaceRelease(v24);
    v25 = *((double *)ValueAtIndex + 17);
    v160.origin.x = a1;
    v160.origin.y = a2;
    v160.size.width = a3;
    v160.size.height = a4;
    y1 = CGRectGetMinY(v160);
    v161.origin.x = a1;
    v161.origin.y = a2;
    v161.size.width = a3;
    v161.size.height = a4;
    colora = CGRectGetMinX(v161);
    v162.origin.x = a1;
    v162.origin.y = a2;
    v162.size.width = a3;
    v162.size.height = a4;
    MaxY = CGRectGetMaxY(v162);
    v163.origin.x = a1;
    v163.origin.y = a2;
    v163.size.width = a3;
    v163.size.height = a4;
    MaxX = CGRectGetMaxX(v163);
    v164.origin.x = a1;
    v164.origin.y = a2;
    v164.size.width = a3;
    v164.size.height = a4;
    v165 = CGRectInset(v164, v25, v25);
    x = v165.origin.x;
    v138 = a1;
    y = v165.origin.y;
    width = v165.size.width;
    height = v165.size.height;
    fonta = CGRectGetMinY(v165);
    v166.origin.x = x;
    v166.origin.y = y;
    v166.size.width = width;
    v166.size.height = height;
    MinX = CGRectGetMinX(v166);
    v167.origin.x = x;
    v167.origin.y = y;
    v167.size.width = width;
    v167.size.height = height;
    v132 = CGRectGetMaxY(v167);
    v168.origin.x = x;
    v168.origin.y = y;
    a1 = v138;
    v168.size.width = width;
    v168.size.height = height;
    v33 = CGRectGetMaxX(v168);
    Mutable = CGPathCreateMutable();
    CGPathMoveToPoint(Mutable, 0, MinX, y1);
    CGPathAddLineToPoint(Mutable, 0, v33, y1);
    CGPathAddArcToPoint(Mutable, 0, MaxX, y1, MaxX, fonta, v25);
    CGPathAddLineToPoint(Mutable, 0, MaxX, v132);
    CGPathAddArcToPoint(Mutable, 0, MaxX, MaxY, v33, MaxY, v25);
    CGPathAddLineToPoint(Mutable, 0, MinX, MaxY);
    CGPathAddArcToPoint(Mutable, 0, colora, MaxY, colora, v132, v25);
    CGPathAddLineToPoint(Mutable, 0, colora, fonta);
    CGPathAddArcToPoint(Mutable, 0, colora, y1, MinX, y1, v25);
    CGPathCloseSubpath(Mutable);
    CGContextAddPath(a7, Mutable);
    CGColorRetain(v19);
    CGContextSetFillColorWithColor(a7, v19);
    CGColorRelease(v19);
    CGContextFillPath(a7);
    CGPathRelease(Mutable);
    CGColorRelease(v19);
  }
  v117 = (CGFloat *)ValueAtIndex;
  v35 = (const __CFDictionary *)*((_QWORD *)ValueAtIndex + 12);
  v36 = CFDictionaryGetCount(v35);
  v37 = (const void **)malloc_type_calloc(8uLL, v36, 0x658CB02BuLL);
  v38 = (const void **)malloc_type_calloc(8uLL, v36, 0x35103200uLL);
  CFDictionaryGetKeysAndValues(v35, v37, v38);
  if (v36 >= 1)
  {
    v39 = (const CGPath **)v38;
    v40 = (CGColor **)v37;
    do
    {
      v41 = *v39++;
      CGContextAddPath(a7, v41);
      v42 = *v40++;
      v43 = CGColorRetain(v42);
      CGContextSetFillColorWithColor(a7, v43);
      CGColorRelease(v43);
      CGContextFillPath(a7);
      --v36;
    }
    while (v36);
  }
  free(v37);
  free(v38);
  v44 = v117;
  v169.origin.x = a1;
  v169.origin.y = a2;
  v169.size.width = a3;
  v169.size.height = a4;
  v170 = CGRectInset(v169, v117[16], v117[16]);
  v45 = v170.origin.x;
  v114 = v170.origin.y;
  v111 = v170.size.height;
  v112 = v170.size.width;
  v46 = CGRectGetWidth(v170);
  if (v116 >= 1)
  {
    v47 = v46;
    v48 = 0;
    v49 = 0;
    attrName = (const __CFString *)*MEMORY[0x1E0CA8188];
    v50 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v126 = *(double *)(MEMORY[0x1E0C9D820] + 8);
    v127 = *MEMORY[0x1E0C9D820];
    v125 = (const __CFString *)*MEMORY[0x1E0CA85D0];
    v124 = (const __CFString *)*MEMORY[0x1E0CA85C8];
    v121 = v45;
    v122 = v115;
    v113 = v45;
    allocatora = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v129 = a8;
    while (1)
    {
      theArray = (const __CFArray *)CFArrayGetValueAtIndex(*((CFArrayRef *)v44 + 14), v49);
      if (!v49)
      {
        CFArrayGetValueAtIndex(theArray, 0);
        FigCFDictionaryGetCGFloatIfPresent();
      }
      if (a8 == 1)
      {
        v51 = v114 + (double)v49 * v115 + 0.0;
      }
      else
      {
        v171.origin.x = v45;
        v171.origin.y = v114;
        v171.size.height = v111;
        v171.size.width = v112;
        v51 = v114 + CGRectGetHeight(v171) - (double)(v49 + 1) * v115 - 0.0;
      }
      v119 = v49;
      v120 = v48;
      v52 = v121;
      v53 = v122;
      v54 = v47;
      v172 = CGRectIntegral(*(CGRect *)(&v51 - 1));
      v55 = v172.origin.x;
      v56 = v172.origin.y;
      v118 = v172.size.width;
      v122 = v172.size.height;
      v130 = CFArrayGetCount(theArray);
      v121 = v55;
      v57 = 0;
      if (v130 >= 1)
        break;
LABEL_97:
      v48 = (v120 | v57) != 0;
      v49 = v119 + 1;
      v44 = v117;
      v45 = v113;
      v47 = v118;
      if (v119 + 1 == v116)
        goto LABEL_101;
    }
    v58 = 0;
    while (1)
    {
      v59 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v58);
      v60 = (const __CFAttributedString *)CFDictionaryGetValue(v59, CFSTR("S"));
      longestEffectiveRange.location = 0;
      longestEffectiveRange.length = 0;
      v147 = 0.0;
      if (v60)
      {
        v61 = v60;
        v133 = v58;
        Length = CFAttributedStringGetLength(v60);
        if (Length)
        {
          v63 = Length;
          if (*(_BYTE *)(v128 + 344))
          {
            *(_BYTE *)(v128 + 344) = 0;
            if (dword_1EE2A32A8)
            {
              v146 = 0;
              type = OS_LOG_TYPE_DEFAULT;
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v65 = v146;
              if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
                v66 = v65;
              else
                v66 = v65 & 0xFFFFFFFE;
              if (v66)
              {
                *(_DWORD *)v149 = 136315394;
                *(_QWORD *)&v149[4] = "fcfcr_DrawRowStrings";
                v150 = 2112;
                v151 = v61;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
          }
          Attribute = (const __CTFont *)CFAttributedStringGetAttribute(v61, 0, attrName, 0);
          CapHeight = CTFontGetCapHeight(Attribute);
          font = Attribute;
          XHeight = CTFontGetXHeight(Attribute);
          FigCFDictionaryGetCGFloatIfPresent();
          v55 = v55 + v147;
          Limit = FigCFRangeGetLimit();
          if (Limit < FigCFRangeGetLimit())
          {
            v71 = ((v122 - CapHeight) * 0.5 + (v122 - XHeight) * 0.5) * 0.5;
            while (1)
            {
              v72 = FigCFRangeGetLimit();
              v158.location = 0;
              v158.length = v63;
              AttributesAndLongestEffectiveRange = CFAttributedStringGetAttributesAndLongestEffectiveRange(v61, v72, v158, &longestEffectiveRange);
              if (AttributesAndLongestEffectiveRange)
                break;
LABEL_93:
              v105 = FigCFRangeGetLimit();
              if (v105 >= FigCFRangeGetLimit())
                goto LABEL_94;
            }
            v74 = AttributesAndLongestEffectiveRange;
            v75 = CFAttributedStringCreateWithSubstring(v50, v61, longestEffectiveRange);
            v76 = CTLineCreateWithAttributedString(v75);
            LineWidthWithRange = FigCaptionLayoutGetLineWidthWithRange(v76, 0, longestEffectiveRange.length);
            v78 = (const __CFBoolean *)CFDictionaryGetValue(v74, CFSTR("d"));
            if (v78 && CFBooleanGetValue(v78))
            {
              v79 = v71;
              if (a8 == 1)
              {
                value.b = 0.0;
                value.c = 0.0;
                value.a = 1.0;
                value.d = -1.0;
                value.tx = 0.0;
                value.ty = 0.0;
                CGContextSetTextMatrix(a7, &value);
                v79 = v122 - v71;
              }
              CGContextSetTextPosition(a7, v55, v56 + v79);
              *(_DWORD *)v149 = 0;
              FigCFDictionaryGetInt32IfPresent();
              v80 = (CGColor *)CFDictionaryGetValue(v74, CFSTR("e"));
              v81 = (const __CFNumber *)CFDictionaryGetValue(v74, CFSTR("q"));
              CGColorRetain(v80);
              v82 = *(int *)v149;
              v83 = CFAttributedStringGetLength(v75);
              if ((_DWORD)v82)
              {
                v84 = v83;
                Size = CTFontGetSize(font);
                v86 = Size;
                if (v82 > 2)
                {
                  v91 = Size * 0.147058824;
                  if (v86 > 60.0)
                    v91 = v86 * 0.147058824 * 0.5;
                  *(double *)&valuePtr = v91;
                  if (v81)
                  {
                    CFNumberGetValue(v81, kCFNumberCGFloatType, &valuePtr);
                    *(double *)&valuePtr = (*(double *)&valuePtr + *(double *)&valuePtr) * 100.0 / v86;
                  }
                  v92 = CFNumberCreate(allocatora, kCFNumberCGFloatType, &valuePtr);
                  color = CGColorCreateCopyWithAlpha(v80, 0.4);
                  TextPosition = CGContextGetTextPosition(a7);
                  v94 = a7;
                  MutableCopy = CFAttributedStringCreateMutableCopy(allocatora, 0, v75);
                  CGContextSetFontRenderingStyle();
                  CGContextSetShouldSmoothFonts(v94, 0);
                  CGContextSetShouldAntialias(v94, 1);
                  CGContextSetInterpolationQuality(v94, kCGInterpolationHigh);
                  CGContextSetLineJoin(v94, kCGLineJoinRound);
                  v156.location = 0;
                  v156.length = v84;
                  CFAttributedStringSetAttribute(MutableCopy, v156, v125, v92);
                  v157.location = 0;
                  v157.length = v84;
                  CFAttributedStringSetAttribute(MutableCopy, v157, v124, v80);
                  if ((_DWORD)v82 != 3)
                  {
                    v159.height = v126;
                    v159.width = v127;
                    CGContextSetShadowWithColor(v94, v159, 4.0, color);
                  }
                  v96 = CTLineCreateWithAttributedString(MutableCopy);
                  CTLineDraw(v96, v94);
                  if (v96)
                    CFRelease(v96);
                  if ((_DWORD)v82 != 3)
                  {
                    v97 = v86 * 0.0882352941;
                    if (v86 <= 60.0)
                      v98 = v86 * 0.0882352941;
                    else
                      v98 = v86 * 0.0882352941 / 1.5;
                    v99 = -v98;
                    if (v86 > 60.0)
                      v97 = v86 * 0.0882352941 / 1.5;
                    if (v129 == 1)
                      v100 = v97;
                    else
                      v100 = v99;
                    v101 = 0;
                    CGContextSetShadowWithColor(v94, *(CGSize *)(&v100 - 1), 4.0, color);
                  }
                  CGContextSetTextPosition(v94, TextPosition.x, TextPosition.y);
                  v102 = CTLineCreateWithAttributedString(v75);
                  CTLineDraw(v102, v94);
                  v50 = allocatora;
                  if (v102)
                    CFRelease(v102);
                  if (MutableCopy)
                    CFRelease(MutableCopy);
                  if (color)
                    CFRelease(color);
                  a7 = v94;
                  if (v92)
                    CFRelease(v92);
                  a8 = v129;
                }
                else
                {
                  if (v82 == 2)
                  {
                    v87 = Size * 0.0882352941;
                    if (v86 > 60.0)
                      v87 = v86 * 0.0882352941 / 1.5;
                    v88 = -v87;
                    v50 = allocatora;
                  }
                  else
                  {
                    v88 = v126;
                    v87 = v127;
                    v89 = v82 == 1;
                    v50 = allocatora;
                    if (v89)
                    {
                      if (v86 <= 60.0)
                      {
                        v87 = v86 * -0.0882352941;
                        v88 = v86 * 0.0882352941;
                      }
                      else
                      {
                        v87 = v86 * 0.0882352941 / -1.5;
                        v88 = v86 * 0.0882352941 / 1.5;
                      }
                    }
                  }
                  v103 = 0.0;
                  if (a8 == 1)
                    v103 = v88;
                  v104 = v88 - v103;
                  CGContextSetShadowWithColor(a7, *(CGSize *)&v87, 4.0, v80);
                  v90 = CTLineCreateWithAttributedString(v75);
                  CTLineDraw(v90, a7);
                  if (v90)
LABEL_87:
                    CFRelease(v90);
                }
              }
              else
              {
                v90 = CTLineCreateWithAttributedString(v75);
                CTLineDraw(v90, a7);
                v50 = allocatora;
                if (v90)
                  goto LABEL_87;
              }
              CGColorRelease(v80);
            }
            if (v76)
              CFRelease(v76);
            v55 = v55 + LineWidthWithRange;
            if (v75)
              CFRelease(v75);
            goto LABEL_93;
          }
LABEL_94:
          v57 = 1;
        }
        v58 = v133;
      }
      if (++v58 == v130)
        goto LABEL_97;
    }
  }
  v48 = 0;
LABEL_101:
  CGContextRestoreGState(a7);
  v15 = v109;
LABEL_102:
  if (a9)
    *a9 = v48;
  FigCaptionLayoutReleaseCaptionElementArray(v15);
}

CFStringRef FigCFCaptionRendererCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigCFCaptionRenderer %p]"), a1);
}

void captionRenderer_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  FigGetNotifyingObjectForMediaAccessibilityChanged();
  FigNotificationCenterRemoveWeakListener();
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
    CFRelease(v1);
  v2 = *(const void **)(DerivedStorage + 16);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(DerivedStorage + 24);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(DerivedStorage + 336);
  if (v4)
    CFRelease(v4);
  if (*(_QWORD *)(DerivedStorage + 32))
  {
    FigSimpleMutexDestroy();
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  FigCaptionLayoutClearMAXCaptionSettings(DerivedStorage + 80);
  v5 = *(const void **)(DerivedStorage + 288);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(DerivedStorage + 296);
  if (v6)
    CFRelease(v6);
  FigCaptionLayoutReleaseCaptionElementArray(*(const __CFArray **)(DerivedStorage + 304));
  v7 = *(const void **)(DerivedStorage + 320);
  if (v7)
    CFRelease(v7);
}

uint64_t fcfcr_sweepBottomUp(const __CFArray *a1, double *a2, double a3)
{
  uint64_t Count;
  CFIndex v7;
  char v8;
  CGRect *ValueAtIndex;
  double v10;
  double v11;
  double v12;
  CFIndex v13;
  CGRect *v14;
  double ElementRect;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  CFIndex v22;
  CGRect *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  CFRange v32;

  Count = CFArrayGetCount(a1);
  *a2 = a3;
  v32.location = 0;
  v32.length = Count;
  CFArraySortValues(a1, v32, (CFComparatorFunction)fcfcr_objComparatorBottom, 0);
  if (Count < 1)
  {
    v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    do
    {
      ValueAtIndex = (CGRect *)CFArrayGetValueAtIndex(a1, v7);
      fcfcr_getElementRect(ValueAtIndex);
      v12 = a3 - v10;
      if (a3 - v10 > 0.0)
      {
        ValueAtIndex[1].origin.y = v12 + ValueAtIndex[1].origin.y;
        ValueAtIndex[2].origin.y = v12 + ValueAtIndex[2].origin.y;
        v10 = v10 + v12;
        v8 = 1;
      }
      *a2 = fmax(*a2, v11 + v10);
      ++v7;
    }
    while (Count != v7);
    if ((v8 & (Count > 1)) == 1)
    {
      v13 = 1;
      do
      {
        v14 = (CGRect *)CFArrayGetValueAtIndex(a1, v13);
        ElementRect = fcfcr_getElementRect(v14);
        v17 = v16;
        v19 = v18;
        v21 = v20;
        v22 = 0;
        do
        {
          v23 = (CGRect *)CFArrayGetValueAtIndex(a1, v22);
          v24 = fcfcr_getElementRect(v23);
          v26 = v25;
          v28 = v27;
          if (fcfcr_isOverlap(ElementRect, v17, v19, v21, v24, v25, v29, v27))
          {
            v30 = v26 + v28 - v17;
            v14[1].origin.y = v30 + v14[1].origin.y;
            v14[2].origin.y = v30 + v14[2].origin.y;
            v17 = v17 + v30;
            *a2 = fmax(*a2, v21 + v17);
          }
          ++v22;
        }
        while (v13 != v22);
        ++v13;
      }
      while (v13 != Count);
    }
  }
  return v8 & 1;
}

uint64_t fcfcr_sweepLeftRight(const __CFArray *a1, double *a2, double a3)
{
  uint64_t Count;
  CFIndex v7;
  char v8;
  CGRect *ValueAtIndex;
  double ElementRect;
  double v11;
  double v12;
  CFIndex v13;
  CGRect *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  CFIndex v22;
  CGRect *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  CFRange v31;

  Count = CFArrayGetCount(a1);
  *a2 = a3;
  v31.location = 0;
  v31.length = Count;
  CFArraySortValues(a1, v31, (CFComparatorFunction)fcfcr_objComparatorLeft, 0);
  if (Count < 1)
  {
    v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    do
    {
      ValueAtIndex = (CGRect *)CFArrayGetValueAtIndex(a1, v7);
      ElementRect = fcfcr_getElementRect(ValueAtIndex);
      v12 = a3 - ElementRect;
      if (a3 - ElementRect > 0.0)
      {
        ValueAtIndex[1].origin.x = v12 + ValueAtIndex[1].origin.x;
        ValueAtIndex[2].origin.x = v12 + ValueAtIndex[2].origin.x;
        ElementRect = ElementRect + v12;
        v8 = 1;
      }
      *a2 = fmax(*a2, v11 + ElementRect);
      ++v7;
    }
    while (Count != v7);
    if ((v8 & (Count > 1)) == 1)
    {
      v13 = 1;
      do
      {
        v14 = (CGRect *)CFArrayGetValueAtIndex(a1, v13);
        v15 = fcfcr_getElementRect(v14);
        v17 = v16;
        v19 = v18;
        v21 = v20;
        v22 = 0;
        do
        {
          v23 = (CGRect *)CFArrayGetValueAtIndex(a1, v22);
          v24 = fcfcr_getElementRect(v23);
          v26 = v25;
          if (fcfcr_isOverlap(v15, v17, v19, v21, v24, v27, v25, v28))
          {
            v29 = v24 + v26 - v15;
            v14[1].origin.x = v29 + v14[1].origin.x;
            v14[2].origin.x = v29 + v14[2].origin.x;
            v15 = v15 + v29;
            *a2 = fmax(*a2, v19 + v15);
          }
          ++v22;
        }
        while (v13 != v22);
        ++v13;
      }
      while (v13 != Count);
    }
  }
  return v8 & 1;
}

uint64_t fcfcr_objComparatorBottom(CGRect *a1, CGRect *a2)
{
  double v3;
  double v4;
  double v5;

  fcfcr_getElementRect(a1);
  v4 = v3;
  fcfcr_getElementRect(a2);
  if (v4 < v5)
    return -1;
  else
    return v4 > v5;
}

double fcfcr_getElementRect(CGRect *a1)
{
  double result;
  CGRect v3;
  CGRect v4;

  v3 = CGRectUnion(a1[2], a1[1]);
  v4 = CGRectIntegral(v3);
  *(_QWORD *)&result = (unint64_t)CGRectInset(v4, -a1[4].origin.x, -a1[4].origin.x);
  return result;
}

BOOL fcfcr_isOverlap(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  return vabdd_f64(a1 + a3 * 0.5, a5 + a7 * 0.5) < a3 * 0.5 + a7 * 0.5 + -3.0
      && vabdd_f64(a2 + a4 * 0.5, a6 + a8 * 0.5) < a4 * 0.5 + a8 * 0.5 + -3.0;
}

uint64_t fcfcr_objComparatorTop(CGRect *a1, CGRect *a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;

  fcfcr_getElementRect(a1);
  v4 = v3;
  v6 = v5;
  fcfcr_getElementRect(a2);
  v9 = v7 + v8;
  if (v4 + v6 > v9)
    return -1;
  else
    return v4 + v6 < v9;
}

uint64_t fcfcr_objComparatorLeft(CGRect *a1, CGRect *a2)
{
  double ElementRect;
  double v4;

  ElementRect = fcfcr_getElementRect(a1);
  v4 = fcfcr_getElementRect(a2);
  if (ElementRect < v4)
    return -1;
  else
    return ElementRect > v4;
}

uint64_t fcfcr_objComparatorRight(CGRect *a1, CGRect *a2)
{
  double ElementRect;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;

  ElementRect = fcfcr_getElementRect(a1);
  v5 = v4;
  v6 = fcfcr_getElementRect(a2);
  v8 = v6 + v7;
  if (ElementRect + v5 > v8)
    return -1;
  else
    return ElementRect + v5 < v8;
}

uint64_t FigSteeringParserStartServer()
{
  uint64_t v0;
  _QWORD block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v6 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __FigSteeringParserStartServer_block_invoke;
  block[3] = &unk_1E2FAB728;
  block[4] = &v3;
  if (FigSteeringParserStartServer_sFigSteeringParserServerSetupOnce != -1)
    dispatch_once(&FigSteeringParserStartServer_sFigSteeringParserServerSetupOnce, block);
  v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t FigSteeringManifest_replyingMessageHandler()
{
  uint64_t OpCode;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  else
    return 4294951138;
}

void FPSupport_InvalidateMetadataStorage(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  if (a1)
  {
    v2 = (const void *)a1[6];
    if (v2)
    {
      CFRelease(v2);
      a1[6] = 0;
    }
    v3 = (const void *)a1[2];
    if (v3)
    {
      CFRelease(v3);
      a1[2] = 0;
    }
    v4 = (const void *)a1[5];
    if (v4)
    {
      CFRelease(v4);
      a1[5] = 0;
    }
    a1[3] = 0;
    a1[4] = 0;
  }
}

uint64_t FigMetadataStorageCreate(_QWORD *a1)
{
  const __CFAllocator *v2;
  uint64_t Instance;
  _QWORD *v4;
  CFDictionaryRef v5;
  CFArrayRef v6;
  CFArrayRef v7;
  uint64_t v8;

  if (!a1)
    return FigSignalErrorAt();
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (FigMetadataStorageGetTypeID_onceToken != -1)
    dispatch_once_f(&FigMetadataStorageGetTypeID_onceToken, 0, (dispatch_function_t)registerFigMetadataStorage);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v4 = (_QWORD *)Instance;
  v5 = CFDictionaryCreate(v2, 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v6 = CFArrayCreate(v2, 0, 0, 0);
  v7 = v6;
  if (v5)
  {
    if (v6)
    {
      v4[2] = CFRetain(v5);
      v8 = 0;
      v4[6] = CFRetain(v7);
    }
    else
    {
      v8 = FigSignalErrorAt();
    }
    CFRelease(v5);
    if (!v7)
      goto LABEL_10;
  }
  else
  {
    v8 = FigSignalErrorAt();
    if (!v7)
      goto LABEL_10;
  }
  CFRelease(v7);
LABEL_10:
  if ((_DWORD)v8)
    CFRelease(v4);
  else
    *a1 = v4;
  return v8;
}

uint64_t FPSupport_SetMetadataOutputCallbacks(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (result)
  {
    v3 = result;
    *(_QWORD *)(result + 24) = a2;
    *(_QWORD *)(result + 32) = a3;
    result = FigCFWeakReferenceHolderCreateWithReferencedObject();
    *(_QWORD *)(v3 + 40) = result;
  }
  return result;
}

uint64_t FPSupport_UpdateMetadataOutputs(_QWORD *a1, CFDictionaryRef theDict)
{
  CFIndex Count;
  const __CFAllocator *v5;
  CFMutableArrayRef Mutable;
  const void **v7;
  const void **v8;
  const void **v9;
  uint64_t v10;
  const CFDictionaryValueCallBacks *v11;
  const void *v12;
  const __CFDictionary *v13;
  const void *Value;
  uint64_t Instance;
  _QWORD *v16;
  CFTypeRef v17;
  CFTypeRef v18;
  CFTypeRef v19;
  uint64_t v20;
  uint64_t v21;
  const __CFArray *v22;
  CFIndex v23;
  CFIndex v24;
  CFIndex i;
  _QWORD *ValueAtIndex;
  const void *v27;
  const void *v28;
  const void **v30;
  void **keys;

  if (!a1)
    return FigSignalErrorAt();
  Count = CFDictionaryGetCount(theDict);
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    if (Count < 1)
    {
      keys = 0;
      v7 = 0;
LABEL_25:
      v22 = (const __CFArray *)CFRetain(Mutable);
      v21 = 0;
    }
    else
    {
      v7 = 0;
      if ((unint64_t)Count >> 61
        || !(8 * Count)
        || (v8 = (const void **)malloc_type_malloc(8 * Count, 0x5CC9CBA6uLL),
            v9 = (const void **)malloc_type_malloc(8 * Count, 0x5CC9CBA6uLL),
            v7 = v9,
            (keys = (void **)v8) == 0))
      {
        v21 = FigSignalErrorAt();
        v22 = 0;
        free(0);
        goto LABEL_27;
      }
      if (v9)
      {
        v30 = v9;
        CFDictionaryGetKeysAndValues(theDict, v8, v9);
        v10 = 0;
        v11 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
        while (1)
        {
          v12 = keys[v10];
          v13 = (const __CFDictionary *)v30[v10];
          FigCFDictionaryGetDoubleIfPresent();
          Value = CFDictionaryGetValue(v13, CFSTR("MetadatadataOutputKey_MetadataIdentifiersToOutput"));
          if (FigMetadataOutputStorageGetTypeID_onceToken != -1)
            dispatch_once_f(&FigMetadataOutputStorageGetTypeID_onceToken, 0, (dispatch_function_t)registerFigMetadataOutputStorage);
          Instance = _CFRuntimeCreateInstance();
          if (Instance)
          {
            v16 = (_QWORD *)Instance;
            *(_QWORD *)(Instance + 16) = FigCFWeakReferenceHolderCreateWithReferencedObject();
            if (v12)
              v17 = CFRetain(v12);
            else
              v17 = 0;
            v16[4] = v17;
            v16[5] = 0;
            v16[7] = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], v11);
            if (Value)
              v18 = CFRetain(Value);
            else
              v18 = 0;
            v16[6] = v18;
            v16[8] = CFDictionaryCreateMutable(v5, 0, 0, v11);
            v19 = CFRetain(v16);
            CFRelease(v16);
          }
          else
          {
            v20 = FigSignalErrorAt();
            if ((_DWORD)v20)
            {
              v21 = v20;
              v22 = 0;
              v7 = v30;
              goto LABEL_26;
            }
            v19 = 0;
          }
          CFArrayAppendValue(Mutable, v19);
          CFRelease(v19);
          if (Count == ++v10)
          {
            v7 = v30;
            goto LABEL_25;
          }
        }
      }
      v21 = FigSignalErrorAt();
      v22 = 0;
    }
LABEL_26:
    free(keys);
  }
  else
  {
    v21 = FigSignalErrorAt();
    v22 = 0;
    v7 = 0;
    free(0);
  }
LABEL_27:
  free(v7);
  if (Mutable)
    CFRelease(Mutable);
  if ((_DWORD)v21)
    goto LABEL_41;
  if (v22)
  {
    v23 = CFArrayGetCount(v22);
    if (v23 >= 1)
    {
      v24 = v23;
      for (i = 0; i != v24; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v22, i);
        ValueAtIndex[3] = CFRetain(a1);
      }
    }
    v27 = (const void *)a1[6];
    a1[6] = v22;
    CFRetain(v22);
    if (!v27)
      goto LABEL_36;
  }
  else
  {
    v27 = (const void *)a1[6];
    a1[6] = 0;
    if (!v27)
      goto LABEL_36;
  }
  CFRelease(v27);
LABEL_36:
  v28 = (const void *)a1[2];
  a1[2] = theDict;
  if (theDict)
    CFRetain(theDict);
  if (v28)
    CFRelease(v28);
  v21 = 0;
LABEL_41:
  if (v22)
    CFRelease(v22);
  return v21;
}

uint64_t FPSupport_CreateAndAddMetadataOutputRenderPipelinesForTrackWithID(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v5;
  CFTypeRef v6;
  CFTypeRef v7;
  uint64_t v9;
  CFTypeRef cf;

  v9 = a2;
  cf = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v5 = fpsupport_forEachMetadataOutput(a1, (uint64_t)fpsupport_addRenderPipelineToMetadataOutputApplierFn, (uint64_t)&v9);
  v6 = cf;
  if (a3 && !(_DWORD)v5)
  {
    if (cf)
    {
      v7 = CFRetain(cf);
      v6 = cf;
    }
    else
    {
      v7 = 0;
    }
    *a3 = v7;
  }
  if (v6)
    CFRelease(v6);
  return v5;
}

uint64_t fpsupport_forEachMetadataOutput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const __CFArray *v3;
  _QWORD context[2];
  uint64_t v6;
  CFRange v7;

  if (!a1)
    return FigSignalErrorAt();
  context[0] = a2;
  context[1] = a3;
  v3 = *(const __CFArray **)(a1 + 48);
  if (!v3)
    return 0;
  v6 = 0;
  v7.length = CFArrayGetCount(v3);
  v7.location = 0;
  CFArrayApplyFunction(v3, v7, (CFArrayApplierFunction)fpsupport_forEachMetadataOutputApplierFn, context);
  return v6;
}

uint64_t fpsupport_addRenderPipelineToMetadataOutputApplierFn(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __CFDictionary *Mutable;
  __CFDictionary *v6;
  uint64_t v7;
  uint64_t FigBaseObject;
  uint64_t (*v9)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v10;
  void *v11;
  CMTime v13;
  CFTypeRef cf;
  void *key;

  v4 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v6 = Mutable;
  cf = 0;
  key = 0;
  if (!Mutable)
  {
    v10 = FigSignalErrorAt();
    v11 = 0;
    goto LABEL_10;
  }
  CFDictionarySetValue(Mutable, CFSTR("MetadataOutput"), *(const void **)(a1 + 16));
  FigCFDictionarySetInt32();
  CMTimeMakeWithSeconds(&v13, *(Float64 *)(a1 + 40), 1000000000);
  v7 = FigSimpleRenderPipelineCreateWithCallback(v4, (uint64_t)fpsupport_simpleRenderPipelineCallback, 0, (uint64_t)v6, (uint64_t)&v13, 0, &key);
  if ((_DWORD)v7)
    goto LABEL_18;
  FigBaseObject = FigRenderPipelineGetFigBaseObject(key);
  v9 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (!v9)
  {
    v11 = 0;
    v10 = 4294954514;
    goto LABEL_8;
  }
  v7 = v9(FigBaseObject, CFSTR("SourceSampleBufferQueue"), v4, &cf);
  if ((_DWORD)v7)
  {
LABEL_18:
    v10 = v7;
  }
  else
  {
    CMNotificationCenterGetDefaultLocalCenter();
    v10 = FigNotificationCenterAddWeakListener();
    if (!(_DWORD)v10)
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 56), key, v6);
      v11 = key;
      goto LABEL_8;
    }
  }
  v11 = 0;
LABEL_8:
  if (cf)
    CFRelease(cf);
LABEL_10:
  if (key)
    CFRelease(key);
  if (v6)
    CFRelease(v6);
  if (!(_DWORD)v10)
    CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 8), v11);
  return v10;
}

uint64_t FPSupport_ForgetAboutMetadataOutputRenderPipeline(uint64_t a1, uint64_t a2)
{
  return fpsupport_forEachMetadataOutput(a1, (uint64_t)fpsupport_forgetAboutRenderPipelineFromMetadataOutputApplierFn, a2);
}

uint64_t fpsupport_forgetAboutRenderPipelineFromMetadataOutputApplierFn(uint64_t a1, const void *a2)
{
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 56), a2))
  {
    fpsupport_unregisterOutputFromRenderPipelineCallbacks(a1, (uint64_t)a2);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 56), a2);
  }
  return 0;
}

__CFDictionary *FPSupport_CreateMetadataOutputDataCallbackPayload(const void *a1, const void *a2)
{
  __CFDictionary *Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, CFSTR("MetadataOutputKey"), a2);
  CFDictionarySetValue(Mutable, CFSTR("SampleBuffers"), a1);
  FigCFDictionarySetInt32();
  return Mutable;
}

CFDictionaryRef FPSupport_CreateMedadataOutputFlushCallbackPayload(void *a1)
{
  void *values;

  values = a1;
  return CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)kFigPlaybackItemParameter_MetadataOutputKey, (const void **)&values, 1, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
}

uint64_t registerFigMetadataStorage()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigMetadataStorageID = result;
  return result;
}

double fpsupport_figMetadataStorageInit(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void fpsupport_figMetadataStorageFinalize(_QWORD *a1)
{
  if (a1)
    FPSupport_InvalidateMetadataStorage(a1);
}

uint64_t registerFigMetadataOutputStorage()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigMetadataOutputStorageID = result;
  return result;
}

double fpsupport_FigMetadataOutputStorageInit(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void fpsupport_FigMetadataOutputStorageFinalize(CFDictionaryRef *context)
{
  CFDictionaryRef v2;
  CFDictionaryRef v3;
  CFDictionaryRef v4;
  CFDictionaryRef v5;
  CFDictionaryRef v6;
  CFDictionaryRef v7;

  CFDictionaryApplyFunction(context[7], (CFDictionaryApplierFunction)fpsupport_destroyMetadataRenderPipelineCallbackContextApplierFn, context);
  v2 = context[3];
  if (v2)
  {
    CFRelease(v2);
    context[3] = 0;
  }
  v3 = context[4];
  if (v3)
  {
    CFRelease(v3);
    context[4] = 0;
  }
  v4 = context[6];
  if (v4)
  {
    CFRelease(v4);
    context[6] = 0;
  }
  v5 = context[7];
  if (v5)
  {
    CFRelease(v5);
    context[7] = 0;
  }
  v6 = context[2];
  if (v6)
  {
    CFRelease(v6);
    context[2] = 0;
  }
  v7 = context[8];
  if (v7)
  {
    CFRelease(v7);
    context[8] = 0;
  }
}

uint64_t fpsupport_destroyMetadataRenderPipelineCallbackContextApplierFn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);

  fpsupport_unregisterOutputFromRenderPipelineCallbacks(a3, a1);
  result = FigRenderPipelineGetFigBaseObject(a1);
  if (result)
  {
    v5 = result;
    result = CMBaseObjectGetVTable();
    v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 24);
    if (v6)
      return v6(v5);
  }
  return result;
}

void fpsupport_unregisterOutputFromRenderPipelineCallbacks(uint64_t a1, uint64_t a2)
{
  uint64_t FigBaseObject;
  unsigned int (*v3)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef cf;

  cf = 0;
  FigBaseObject = FigRenderPipelineGetFigBaseObject(a2);
  v3 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
  if (v3 && !v3(FigBaseObject, CFSTR("SourceSampleBufferQueue"), *MEMORY[0x1E0C9AE00], &cf))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  if (cf)
    CFRelease(cf);
}

void fpsupport_bufferQueueResetOutputCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  void (*v6)(uint64_t, uint64_t);
  BOOL v7;

  v3 = *(_QWORD *)(a2 + 24);
  v2 = *(_QWORD *)(a2 + 32);
  v4 = FigCFWeakReferenceHolderCopyReferencedObject();
  v5 = (const void *)v4;
  v6 = *(void (**)(uint64_t, uint64_t))(v3 + 32);
  if (v6)
    v7 = v4 == 0;
  else
    v7 = 1;
  if (v7)
  {
    if (!v4)
      return;
  }
  else
  {
    v6(v2, v4);
  }
  CFRelease(v5);
}

uint64_t fpsupport_forEachMetadataOutputApplierFn(uint64_t result, uint64_t a2)
{
  if (!*(_DWORD *)(a2 + 16))
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD))a2)(result, *(_QWORD *)(a2 + 8));
    *(_DWORD *)(a2 + 16) = result;
  }
  return result;
}

void fpsupport_simpleRenderPipelineCallback(const __CFDictionary *a1, void *a2)
{
  const void *Value;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t Instance;
  int v10;
  CFTypeRef v11;
  uint64_t (*v12)(CFTypeRef, _QWORD, uint64_t);
  int v13;
  uint64_t v14;
  void (*v15)(uint64_t, void *);
  CFTypeRef cf;

  Value = CFDictionaryGetValue(a1, CFSTR("MetadataOutput"));
  FigCFDictionaryGetInt32IfPresent();
  if (Value)
  {
    v4 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v4)
    {
      v5 = v4;
      if (!*(_QWORD *)(v4 + 48))
        goto LABEL_23;
      v6 = CFDictionaryGetValue(*(CFDictionaryRef *)(v4 + 64), 0);
      if (v6)
      {
        v7 = v6;
        CFRetain(v6);
        goto LABEL_20;
      }
      cf = 0;
      v8 = *MEMORY[0x1E0C9AE00];
      if (FigMetadataFilterStorageGetTypeID_onceToken != -1)
        dispatch_once_f(&FigMetadataFilterStorageGetTypeID_onceToken, 0, (dispatch_function_t)registerFigMetadataFilterStorage);
      Instance = _CFRuntimeCreateInstance();
      if (Instance)
      {
        v10 = FigSampleBufferProcessorCreateForTemporalMetadataFilter(v8, *(const void **)(v5 + 48), &cf);
        if (!v10)
        {
          *(_QWORD *)(Instance + 24) = FigCFWeakReferenceHolderCreateWithReferencedObject();
          *(_DWORD *)(Instance + 16) = 0;
          *(_QWORD *)(Instance + 32) = CFRetain(cf);
          v11 = cf;
          v12 = *(uint64_t (**)(CFTypeRef, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
          if (!v12)
          {
            v7 = 0;
            v13 = -12782;
            goto LABEL_14;
          }
          v13 = v12(v11, fpsupport_temporalMetadataFilterOutputCallback, Instance);
          if (!v13)
          {
            v7 = (_QWORD *)Instance;
            Instance = 0;
            goto LABEL_14;
          }
LABEL_28:
          v7 = 0;
LABEL_14:
          if (cf)
            CFRelease(cf);
          if (Instance)
            CFRelease((CFTypeRef)Instance);
          if (v13)
          {
            if (!v7)
              goto LABEL_24;
            goto LABEL_22;
          }
          CFDictionaryAddValue(*(CFMutableDictionaryRef *)(v5 + 64), 0, v7);
          if (v7)
          {
LABEL_20:
            v14 = v7[4];
            v15 = *(void (**)(uint64_t, void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
            if (v15)
              v15(v14, a2);
LABEL_22:
            CFRelease(v7);
LABEL_24:
            CFRelease((CFTypeRef)v5);
            return;
          }
LABEL_23:
          FigMetadataOutputReactToNewBufferFromTemporalMetadataFilter(v5, a2, 0);
          goto LABEL_24;
        }
      }
      else
      {
        v10 = FigSignalErrorAt();
      }
      v13 = v10;
      goto LABEL_28;
    }
  }
}

void fpsupport_temporalMetadataFilterOutputCallback(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  const void *v6;

  v5 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v5)
  {
    v6 = (const void *)v5;
    FigMetadataOutputReactToNewBufferFromTemporalMetadataFilter(v5, a3, *(unsigned int *)(a1 + 16));
    CFRelease(v6);
  }
}

void FigMetadataOutputReactToNewBufferFromTemporalMetadataFilter(uint64_t a1, void *target, uint64_t a3)
{
  CFArrayRef v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  void (*v10)(uint64_t, uint64_t, CFArrayRef, uint64_t);
  BOOL v11;
  void *values;

  values = target;
  if (target && !CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0CA2678], 0))
  {
    v5 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 1, MEMORY[0x1E0C9B378]);
    v7 = *(_QWORD *)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 32);
    v8 = FigCFWeakReferenceHolderCopyReferencedObject();
    v9 = (const void *)v8;
    v10 = *(void (**)(uint64_t, uint64_t, CFArrayRef, uint64_t))(v7 + 24);
    if (v10)
      v11 = v8 == 0;
    else
      v11 = 1;
    if (v11)
    {
      if (!v8)
      {
        if (!v5)
          return;
        goto LABEL_10;
      }
    }
    else
    {
      v10(v6, a3, v5, v8);
    }
    CFRelease(v9);
    if (!v5)
      return;
LABEL_10:
    CFRelease(v5);
  }
}

uint64_t registerFigMetadataFilterStorage()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigMetadataFilterStorageID = result;
  return result;
}

_QWORD *fpsupport_FigMetadataFilterStorageInit(_QWORD *result)
{
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  return result;
}

void fpsupport_FigMetadataFilterStorageFinalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 24);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 32);
  if (v3)
    CFRelease(v3);
}

uint64_t FigEndpointStreamAudioEngineStartServer()
{
  CFMutableDictionaryRef Mutable;
  uint64_t v1;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetInt32();
  v1 = FigXPCServerStart();
  if (Mutable)
    CFRelease(Mutable);
  return v1;
}

uint64_t HandleAudioEngineRemoteMessage(uint64_t a1, void *a2)
{
  uint64_t OpCode;
  uint64_t v4;
  uint64_t v6;
  uint64_t value[2];

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
  value[0] = 0;
  v4 = FigXPCServerLookupAndRetainAssociatedObject();
  if (!(_DWORD)v4)
    v4 = FigSignalErrorAt();
  v6 = v4;
  if (!(_DWORD)v4)
    return 4294951815;
  return v6;
}

void figEndpointStreamAudioEngine_ServerDisassociateAudioEngineCallback(const void *a1)
{
  uint64_t v2;
  const void *v3;
  void (*v4)(const void *, _QWORD, _QWORD, _QWORD);

  v2 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v2)
  {
    v3 = (const void *)v2;
    v4 = *(void (**)(const void *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v4)
      v4(v3, 0, 0, 0);
    CFRelease(v3);
  }
  if (a1)
    CFRelease(a1);
}

uint64_t CreateCompletionCallbackParametersFromMessageAndConnection(void *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t uint64;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  uint64 = xpc_dictionary_get_uint64(a1, "CompletionID");
  if (!uint64)
  {
    v8 = 0;
    goto LABEL_5;
  }
  v6 = uint64;
  v7 = malloc_type_calloc(1uLL, 0x18uLL, 0x10200403ED2C137uLL);
  if (v7)
  {
    v8 = v7;
    *v7 = v6;
    v7[1] = xpc_dictionary_get_uint64(a1, (const char *)*MEMORY[0x1E0CA36A0]);
    v8[2] = FigXPCRetain();
LABEL_5:
    *a3 = v8;
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t SimpleCompletionCallback(uint64_t a1, int a2, uint64_t a3)
{
  if (a3 && !FigXPCCreateBasicMessage())
  {
    xpc_dictionary_set_uint64(0, "CompletionID", *(_QWORD *)a3);
    xpc_dictionary_set_int64(0, "CompletionStatus", a2);
    xpc_connection_send_message(*(xpc_connection_t *)(a3 + 16), 0);
  }
  DestroyCompletionCallbackParameters((void *)a3);
  return FigXPCRelease();
}

void DestroyCompletionCallbackParameters(void *a1)
{
  if (a1)
  {
    FigXPCRelease();
    free(a1);
  }
}

void *__serverXPCAudioEngine_getAPAudioSourceSharedMemoryReaderCreate_block_invoke()
{
  void *result;

  result = dlopen("/System/Library/PrivateFrameworks/AirPlaySender.framework/AirPlaySender", 4);
  if (result)
  {
    result = dlsym(result, "APAudioSourceSharedMemoryReaderCreate");
    serverXPCAudioEngine_getAPAudioSourceSharedMemoryReaderCreate_sAudioSourceSMReaderCreate = result;
  }
  return result;
}

uint64_t SetRateAndAnchorTimeCallback(double a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a7 && !FigXPCCreateBasicMessage())
  {
    xpc_dictionary_set_uint64(0, "CompletionID", *(_QWORD *)a7);
    xpc_dictionary_set_int64(0, "CompletionStatus", a3);
    xpc_dictionary_set_double(0, "Rate", a1);
    FigXPCMessageSetCMTime();
    FigXPCMessageSetCMTime();
    FigXPCMessageSetCFDictionary();
    xpc_connection_send_message(*(xpc_connection_t *)(a7 + 16), 0);
  }
  DestroyCompletionCallbackParameters((void *)a7);
  return FigXPCRelease();
}

uint64_t FigSampleBufferConsumerInputForBufferedAirPlayOutputCreate(const __CFAllocator *a1, const void *a2, const char *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  const char *v14;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  v8 = 4294954535;
  if (a2)
  {
    if (a4)
    {
      FigSampleBufferConsumerGetClassID();
      v8 = CMDerivedObjectCreate();
      if (!(_DWORD)v8)
      {
        DerivedStorage = CMBaseObjectGetDerivedStorage();
        v10 = FigReentrantMutexCreate();
        *(_QWORD *)DerivedStorage = v10;
        if (v10)
        {
          *(_QWORD *)(DerivedStorage + 8) = CFRetain(a2);
          *(_QWORD *)(DerivedStorage + 16) = FigDispatchQueueCreateWithPriority();
          v11 = MEMORY[0x1E0CA2E18];
          v12 = *MEMORY[0x1E0CA2E18];
          *(_OWORD *)(DerivedStorage + 24) = *MEMORY[0x1E0CA2E18];
          v13 = *(_QWORD *)(v11 + 16);
          *(_QWORD *)(DerivedStorage + 40) = v13;
          *(_QWORD *)(DerivedStorage + 48) = 0;
          *(_OWORD *)(DerivedStorage + 56) = v12;
          *(_QWORD *)(DerivedStorage + 72) = v13;
          *(_QWORD *)(DerivedStorage + 80) = 0;
          if (a3)
            v14 = a3;
          else
            v14 = "-";
          v8 = 0;
          *(_QWORD *)(DerivedStorage + 88) = CFStringCreateWithCString(a1, v14, 0x8000100u);
          *a4 = 0;
        }
        else
        {
          return 4294954536;
        }
      }
    }
  }
  return v8;
}

uint64_t sbcbao_finalize()
{
  _QWORD *DerivedStorage;
  const void *v1;
  NSObject *v2;
  const void *v3;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  sbcbao_dropLastSbufTracer();
  MEMORY[0x19402EA24](*DerivedStorage);
  v1 = (const void *)DerivedStorage[1];
  if (v1)
    CFRelease(v1);
  v2 = DerivedStorage[2];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)DerivedStorage[11];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[11] = 0;
  }
  return FigSimpleMutexDestroy();
}

__CFString *sbcbao_copyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigSampleBufferConsumerInputForBufferedAirPlayOutput %p>"), a1);
  return Mutable;
}

uint64_t sbcbao_setProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  v5 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v6)
    return v6(v5, a2, a3);
  else
    return 4294954514;
}

void sbcbao_dropLastSbufTracer()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  __CFString *MutableCopy;
  const void *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 48))
  {
    v1 = DerivedStorage;
    MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, *(CFStringRef *)(DerivedStorage + 88));
    CFStringAppendCString(MutableCopy, "-DROPPING", 0x8000100u);
    FigEndpointStreamAudioEngineSbufTracerDebugPrint(*(CMAttachmentBearerRef *)(v1 + 48));
    v3 = *(const void **)(v1 + 48);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(v1 + 48) = 0;
    }
    if (MutableCopy)
      CFRelease(MutableCopy);
  }
}

uint64_t sbcbao_SendSampleBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  CMItemCount NumSamples;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  _OWORD *v8;
  unint64_t v9;
  _OWORD *v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v12;
  _QWORD *v13;
  CFTypeRef v14;
  CMItemCount v15;
  const __CFDictionary *v16;
  const __CFDictionary *v17;
  CFIndex Count;
  BOOL v19;
  const void *v20;
  CFTypeRef v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  CMTime v25;
  os_log_type_t type;
  CMTime rhs;
  CMTime v28;
  CMTime time2;
  CMTime time1;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v28 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (a2)
  {
    v4 = DerivedStorage;
    CMSampleBufferGetPresentationTimeStamp(&time1, (CMSampleBufferRef)a2);
    CMSampleBufferGetDuration(&time1, (CMSampleBufferRef)a2);
    CMSampleBufferGetOutputDuration(&v28, (CMSampleBufferRef)a2);
    NumSamples = CMSampleBufferGetNumSamples((CMSampleBufferRef)a2);
    CMSampleBufferGetOutputPresentationTimeStamp(&time1, (CMSampleBufferRef)a2);
    value = time1.value;
    flags = time1.flags;
    timescale = time1.timescale;
    epoch = time1.epoch;
    FigEndpointStreamAudioEngineSbufTracerDebugPrint((CMAttachmentBearerRef)a2);
    v8 = (_OWORD *)(v4 + 56);
    if ((*(_BYTE *)(v4 + 68) & 1) == 0
      || (time1.value = value,
          time1.timescale = timescale,
          time1.flags = flags,
          time1.epoch = epoch,
          *(_OWORD *)&time2.value = *v8,
          time2.epoch = *(_QWORD *)(v4 + 72),
          (CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
      || (v9 = *(_QWORD *)(v4 + 80), v9 <= 0x31))
    {
      CMTimeMake(&rhs, 400, 1000);
      time2.value = value;
      time2.timescale = timescale;
      time2.flags = flags;
      time2.epoch = epoch;
      CMTimeAdd(&time1, &time2, &rhs);
      *v8 = *(_OWORD *)&time1.value;
      *(_QWORD *)(v4 + 72) = time1.epoch;
      v9 = *(_QWORD *)(v4 + 80);
    }
    *(_QWORD *)(v4 + 80) = v9 + 1;
    if ((flags & 1) != 0 && NumSamples >= 1)
    {
      v10 = (_OWORD *)(v4 + 24);
      if ((*(_BYTE *)(v4 + 36) & 1) != 0)
      {
        *(_OWORD *)&time1.value = *v10;
        time1.epoch = *(_QWORD *)(v4 + 40);
        time2.value = value;
        time2.timescale = timescale;
        time2.flags = flags;
        time2.epoch = epoch;
        if (CMTimeCompare(&time1, &time2))
        {
          if (dword_1EE2A32C8)
          {
            LODWORD(v25.value) = 0;
            type = OS_LOG_TYPE_DEFAULT;
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v12 = MEMORY[0x1E0CA2E18];
          *v10 = *MEMORY[0x1E0CA2E18];
          *(_QWORD *)(v4 + 40) = *(_QWORD *)(v12 + 16);
        }
      }
      if ((*(_BYTE *)(v4 + 36) & 1) == 0)
      {
        *(_QWORD *)v10 = value;
        *(_DWORD *)(v4 + 32) = timescale;
        *(_DWORD *)(v4 + 36) = flags;
        *(_QWORD *)(v4 + 40) = epoch;
      }
      *(_OWORD *)&time2.value = *v10;
      time2.epoch = *(_QWORD *)(v4 + 40);
      v25 = v28;
      CMTimeAdd(&time1, &time2, &v25);
      *v10 = *(_OWORD *)&time1.value;
      *(_QWORD *)(v4 + 40) = time1.epoch;
    }
  }
  v13 = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*v13);
  if (!a2)
  {
    MEMORY[0x19402EA24](*v13);
    return a2;
  }
  v14 = CMGetAttachment((CMAttachmentBearerRef)a2, CFSTR("SbufTracer"), 0);
  v15 = CMSampleBufferGetNumSamples((CMSampleBufferRef)a2);
  v16 = CMCopyDictionaryOfAttachments((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CMAttachmentBearerRef)a2, 1u);
  v17 = v16;
  if (v16 && ((Count = CFDictionaryGetCount(v16), v14) ? (v19 = Count == 1) : (v19 = 0), v19))
  {
    sbcbao_dropLastSbufTracer();
    if (!v15)
    {
      v13[6] = CFRetain((CFTypeRef)a2);
      MEMORY[0x19402EA24](*v13);
      a2 = 0;
LABEL_31:
      CFRelease(v17);
      return a2;
    }
  }
  else
  {
    if (v14)
      sbcbao_dropLastSbufTracer();
    v20 = (const void *)v13[6];
    if (v20)
    {
      v21 = CMGetAttachment(v20, CFSTR("SbufTracer"), 0);
      CMSetAttachment((CMAttachmentBearerRef)a2, CFSTR("SbufTracer"), v21, 0);
      sbcbao_dropLastSbufTracer();
    }
  }
  FigEndpointStreamAudioEngineSbufTracerDebugPrint((CMAttachmentBearerRef)a2);
  v22 = v13[1];
  v23 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v23)
    a2 = v23(v22, a2);
  else
    a2 = 4294954514;
  MEMORY[0x19402EA24](*v13);
  if (v17)
    goto LABEL_31;
  return a2;
}

uint64_t sbcbao_IsQueueAtOrAboveHighWater()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  v0 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  v1 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v1)
    return v1(v0);
  else
    return 0;
}

uint64_t sbcbao_IsQueueBelowLowWater()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  v0 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  v1 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v1)
    return v1(v0);
  else
    return 0;
}

uint64_t sbcbao_InstallLowWaterTrigger(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  v7 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v8)
    return v8(v7, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t sbcbao_RemoveLowWaterTrigger(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v4)
    return v4(v3, a2);
  else
    return 4294954514;
}

uint64_t sbcbao_GetPendingSampleBufferCount()
{
  _QWORD *DerivedStorage;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = DerivedStorage[1];
  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v2)
    v3 = v2(v1);
  else
    v3 = 0;
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (DerivedStorage[6])
    ++v3;
  MEMORY[0x19402EA24](*DerivedStorage);
  return v3;
}

uint64_t sbcbao_PostNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  v7 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (v8)
    return v8(v7, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t sbcbao_Flush()
{
  _QWORD *DerivedStorage;
  uint64_t v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = MEMORY[0x1E0CA2E18];
  v2 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)(DerivedStorage + 3) = *MEMORY[0x1E0CA2E18];
  v3 = *(_QWORD *)(v1 + 16);
  DerivedStorage[5] = v3;
  *(_OWORD *)(DerivedStorage + 7) = v2;
  DerivedStorage[9] = v3;
  DerivedStorage[10] = 0;
  MEMORY[0x19402EA0C](*DerivedStorage);
  sbcbao_dropLastSbufTracer();
  MEMORY[0x19402EA24](*DerivedStorage);
  v4 = DerivedStorage[1];
  v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  if (v5)
    return v5(v4);
  else
    return 4294954514;
}

void FigVirtualDisplayScreenRecordingPostState()
{
  CFIndex Count;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD block[4];
  BOOL v3;
  os_log_type_t type;
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (screenRecordingMonitorGetCurrent_once != -1)
    dispatch_once(&screenRecordingMonitorGetCurrent_once, &__block_literal_global_77);
  if (screenRecordingMonitorGetCurrent_monitor_3)
  {
    MEMORY[0x19402EEEC](screenRecordingMonitorGetCurrent_monitor_1);
    Count = CFSetGetCount((CFSetRef)screenRecordingMonitorGetCurrent_monitor_0);
    v5 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __FigVirtualDisplayScreenRecordingPostState_block_invoke;
    block[3] = &__block_descriptor_tmp_97;
    v3 = Count > 0;
    dispatch_async((dispatch_queue_t)screenRecordingMonitorGetCurrent_monitor_2, block);
    MEMORY[0x19402EF04](screenRecordingMonitorGetCurrent_monitor_1);
  }
}

uint64_t FigVirtualDisplaySessionCreateWithComponents(uint64_t a1, const void *a2, const void *a3, const void *a4, CFDictionaryRef theDict, CFTypeRef *a6)
{
  const __CFString *Value;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v14;
  uint64_t DerivedStorage;
  CFStringRef LogPrefix;
  uint64_t CMBaseObject;
  void (*v18)(uint64_t, const __CFString *, CFStringRef);
  uint64_t v19;
  void (*v20)(uint64_t, const __CFString *, CFStringRef);
  uint64_t v21;
  void (*v22)(uint64_t, const __CFString *, CFStringRef);
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  int v26;
  const void *v27;
  uint64_t v28;
  NSObject *v30;
  NSObject *v31;
  CFTypeRef v32;
  CFTypeRef v33;
  CFTypeRef cf[25];

  cf[23] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v33 = 0;
  cf[0] = 0;
  v32 = 0;
  if (theDict)
    Value = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("logPrefix"));
  else
    Value = 0;
  if (checkFigVirtualDisplaySessionTrace_once != -1)
    dispatch_once(&checkFigVirtualDisplaySessionTrace_once, &__block_literal_global_35_0);
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (!a6 || !a3 || !a4)
  {
    v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v28 = 4294955226;
    goto LABEL_30;
  }
  if (a2)
  {
    cf[0] = CFRetain(a2);
    goto LABEL_12;
  }
  v14 = FigVirtualDisplaySourceScreenCreate(a1, (uint64_t)theDict, cf);
  if (!(_DWORD)v14)
  {
LABEL_12:
    FigVirtualDisplaySessionGetClassID();
    v14 = CMDerivedObjectCreate();
    if (!(_DWORD)v14)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(_QWORD *)DerivedStorage = 0;
      *(_QWORD *)(DerivedStorage + 64) = FigOSTransactionCreate();
      *(_QWORD *)(DerivedStorage + 8) = dispatch_queue_create("com.apple.coremedia.vdsession.stateq", 0);
      *(_QWORD *)(DerivedStorage + 16) = dispatch_queue_create("com.apple.coremedia.vdsession.notifq", 0);
      *(_QWORD *)(DerivedStorage + 24) = dispatch_queue_create("com.apple.coremedia.vdsession.sinkq", 0);
      *(_QWORD *)(DerivedStorage + 32) = dispatch_semaphore_create(0);
      *(_QWORD *)(DerivedStorage + 40) = CFRetain(cf[0]);
      *(_QWORD *)(DerivedStorage + 48) = CFRetain(a3);
      *(_QWORD *)(DerivedStorage + 56) = CFRetain(a4);
      LogPrefix = FVDUtilsCreateLogPrefix(Value, (unint64_t)v33);
      *(_QWORD *)(DerivedStorage + 80) = LogPrefix;
      CMBaseObject = FigVirtualDisplaySourceGetCMBaseObject(*(_QWORD *)(DerivedStorage + 40));
      v18 = *(void (**)(uint64_t, const __CFString *, CFStringRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
      if (v18)
        v18(CMBaseObject, CFSTR("LogPrefix"), LogPrefix);
      v19 = FigVirtualDisplayProcessorGetCMBaseObject(*(_QWORD *)(DerivedStorage + 48));
      v20 = *(void (**)(uint64_t, const __CFString *, CFStringRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
      if (v20)
        v20(v19, CFSTR("LogPrefix"), LogPrefix);
      v21 = FigVirtualDisplaySinkGetCMBaseObject(*(_QWORD *)(DerivedStorage + 56));
      v22 = *(void (**)(uint64_t, const __CFString *, CFStringRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
      if (v22)
        v22(v21, CFSTR("LogPrefix"), LogPrefix);
      v23 = *MEMORY[0x1E0C9AE00];
      v24 = FigVirtualDisplaySourceGetCMBaseObject(*(_QWORD *)(DerivedStorage + 40));
      v25 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
      if (v25)
        v25(v24, CFSTR("sourceType"), v23, &v32);
      v26 = FigCFEqual();
      *(_BYTE *)(DerivedStorage + 109) = v26;
      if (v26)
      {
        *(_BYTE *)(DerivedStorage + 111) = 1;
        FigCFDictionaryGetBooleanIfPresent();
        FigCFDictionaryGetBooleanIfPresent();
      }
      if (theDict)
      {
        v27 = CFDictionaryGetValue(theDict, CFSTR("clientName"));
        *(_QWORD *)(DerivedStorage + 72) = v27;
        if (v27)
        {
          CFRetain(v27);
          if (*(_QWORD *)(DerivedStorage + 72))
            goto LABEL_29;
        }
      }
      else
      {
        *(_QWORD *)(DerivedStorage + 72) = 0;
      }
      FigCopyBacktrace();
LABEL_29:
      v28 = 0;
      *a6 = v33;
      v33 = 0;
      goto LABEL_30;
    }
  }
  v28 = v14;
  v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_30:
  if (cf[0])
    CFRelease(cf[0]);
  if (v32)
    CFRelease(v32);
  if (v33)
    CFRelease(v33);
  return v28;
}

uint64_t FigVirtualDisplaySessionCreateWithConfiguration(const __CFAllocator *a1, CFDictionaryRef theDict, CFTypeRef *a3)
{
  const __CFString *v6;
  const __CFString *v7;
  CFTypeID v8;
  CFTypeID v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t CMBaseObject;
  void (*v15)(uint64_t, const __CFString *, void *);
  void *v16;
  uint64_t v17;
  void (*v18)(uint64_t, const __CFString *, void *);
  uint64_t v19;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v25;
  CFTypeRef v26;
  CFTypeRef cf;
  void *value[17];

  value[16] = *(void **)MEMORY[0x1E0C80C00];
  v26 = 0;
  cf = 0;
  v25 = 0;
  if (theDict)
    CFDictionaryGetValue(theDict, CFSTR("logPrefix"));
  if (checkFigVirtualDisplaySessionTrace_once != -1)
    dispatch_once(&checkFigVirtualDisplaySessionTrace_once, &__block_literal_global_35_0);
  if (!theDict)
  {
    v7 = 0;
LABEL_10:
    v6 = CFSTR("Screen");
    goto LABEL_11;
  }
  v6 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("sourceType"));
  v7 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("sinkType"));
  if (!v6)
    goto LABEL_10;
  v8 = CFGetTypeID(v6);
  if (v8 != CFStringGetTypeID())
    goto LABEL_10;
LABEL_11:
  if (!v7 || (v9 = CFGetTypeID(v7), v9 != CFStringGetTypeID()))
    v7 = CFSTR("FileWriter");
  if (CFStringCompare(v6, CFSTR("Screen"), 1uLL))
  {
    if (CFStringCompare(v6, CFSTR("Movie"), 1uLL))
      v10 = FigSignalErrorAt();
    else
      v10 = FigVirtualDisplaySourceMovieCreate(a1, 0, theDict, &cf);
    v11 = v10;
    if ((_DWORD)v10)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      goto LABEL_46;
    }
  }
  else
  {
    cf = 0;
  }
  if (CFStringCompare(v7, CFSTR("FileWriter"), 1uLL))
  {
    if (CFStringCompare(v7, CFSTR("Conduit"), 1uLL))
      v12 = FigSignalErrorAt();
    else
      v12 = FigVirtualDisplaySinkConduitCreate((uint64_t)a1, 0, theDict, &v26);
  }
  else
  {
    v12 = FigVirtualDisplaySinkFileWriterCreate((uint64_t)a1, &v26);
  }
  v11 = v12;
  if ((_DWORD)v12)
  {
    v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
  }
  else
  {
    if (theDict)
    {
      value[0] = 0;
      if (CFDictionaryGetValueIfPresent(theDict, CFSTR("Destination"), (const void **)value))
      {
        v13 = value[0];
        CMBaseObject = FigVirtualDisplaySinkGetCMBaseObject(v26);
        v15 = *(void (**)(uint64_t, const __CFString *, void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 56);
        if (v15)
          v15(CMBaseObject, CFSTR("Destination"), v13);
      }
      if (CFDictionaryGetValueIfPresent(theDict, CFSTR("deviceInfo"), (const void **)value))
      {
        v16 = value[0];
        v17 = FigVirtualDisplaySinkGetCMBaseObject(v26);
        v18 = *(void (**)(uint64_t, const __CFString *, void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 56);
        if (v18)
          v18(v17, CFSTR("deviceInfo"), v16);
      }
    }
    v19 = FigVirtualDisplayProcessorCreate((uint64_t)a1, (uint64_t)theDict, &v25);
    if ((_DWORD)v19)
    {
      v11 = v19;
      v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
    }
    else
    {
      v11 = FigVirtualDisplaySessionCreateWithComponents((uint64_t)a1, cf, v25, v26, theDict, a3);
      if (!(_DWORD)v11)
        goto LABEL_35;
      v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
    }
  }
LABEL_46:
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_35:
  if (cf)
    CFRelease(cf);
  if (v26)
    CFRelease(v26);
  if (v25)
    CFRelease(v25);
  return v11;
}

CFTypeRef FigVirtualDisplaySessionActivateWithSourceAndSink(const void *a1, const void *a2, CFDictionaryRef theDict)
{
  const void *Value;
  CFTypeRef v7;
  CFTypeID v8;
  uint64_t v9;
  CFTypeRef v10;
  unsigned int (*v11)(CFTypeRef, CFDictionaryRef, _QWORD);
  NSObject *v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v14;
  NSObject *v16;
  CFTypeRef v17;
  CFTypeRef cf[23];

  cf[22] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v17 = 0;
  cf[0] = 0;
  if (theDict)
    CFDictionaryGetValue(theDict, CFSTR("logPrefix"));
  if (checkFigVirtualDisplaySessionTrace_once == -1)
  {
    if (!a2)
      goto LABEL_16;
  }
  else
  {
    dispatch_once(&checkFigVirtualDisplaySessionTrace_once, &__block_literal_global_35_0);
    if (!a2)
      goto LABEL_16;
  }
  if (theDict)
  {
    Value = CFDictionaryGetValue(theDict, CFSTR("CustomProcessor"));
    cf[0] = Value;
    if (Value)
    {
      v7 = Value;
      CFRetain(Value);
      v8 = CFGetTypeID(v7);
      if (v8 == FigVirtualDisplayProcessorGetTypeID())
      {
        v9 = *MEMORY[0x1E0C9AE00];
        goto LABEL_11;
      }
LABEL_16:
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      goto LABEL_18;
    }
  }
  v9 = *MEMORY[0x1E0C9AE00];
  if (FigVirtualDisplayProcessorCreate(*MEMORY[0x1E0C9AE00], (uint64_t)theDict, cf))
  {
    v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    goto LABEL_18;
  }
  v7 = cf[0];
LABEL_11:
  if (FigVirtualDisplaySessionCreateWithComponents(v9, a1, v7, a2, theDict, &v17))
  {
    v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    goto LABEL_18;
  }
  v10 = v17;
  v11 = *(unsigned int (**)(CFTypeRef, CFDictionaryRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 8);
  if (!v11 || v11(v10, theDict, 0))
  {
    v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
LABEL_18:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (cf[0])
    CFRelease(cf[0]);
  return v17;
}

uint64_t FigVirtualDisplaySessionDeactivate(const void *a1)
{
  CFTypeID v2;
  void (*v3)(const void *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  CMBaseObjectGetDerivedStorage();
  if (a1 && (v2 = CFGetTypeID(a1), v2 == FigVirtualDisplaySessionGetTypeID()))
  {
    v3 = *(void (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v3)
      v3(a1);
    CFRelease(a1);
    return 0;
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294955226;
  }
}

CFTypeRef FigVirtualDisplaySessionActivate(CFDictionaryRef theDict)
{
  CFTypeRef v2;
  unsigned int (*v3)(CFTypeRef, CFDictionaryRef, _QWORD);
  NSObject *v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v7[23];

  v7[22] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v7[0] = 0;
  if (theDict)
    CFDictionaryGetValue(theDict, CFSTR("logPrefix"));
  if (checkFigVirtualDisplaySessionTrace_once != -1)
    dispatch_once(&checkFigVirtualDisplaySessionTrace_once, &__block_literal_global_35_0);
  if (FigVirtualDisplaySessionCreateWithConfiguration((const __CFAllocator *)*MEMORY[0x1E0C9AE00], theDict, v7))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    goto LABEL_10;
  }
  v2 = v7[0];
  v3 = *(unsigned int (**)(CFTypeRef, CFDictionaryRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 8);
  if (!v3 || v3(v2, theDict, 0))
  {
    v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
LABEL_10:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v7[0];
}

uint64_t __screenRecordingMonitorGetCurrent_block_invoke()
{
  uint64_t result;

  FVDUtilsSessionServerEnabled();
  result = FigGetCFPreferenceNumberWithDefault();
  screenRecordingMonitorGetCurrent_monitor_3 = (_DWORD)result != 0;
  if ((_DWORD)result)
  {
    screenRecordingMonitorGetCurrent_monitor_0 = (uint64_t)CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
    screenRecordingMonitorGetCurrent_monitor_1 = FigSimpleMutexCreate();
    result = (uint64_t)dispatch_queue_create("com.apple.coremedia.vdsessionscreenrecordingmon.notifq", 0);
    screenRecordingMonitorGetCurrent_monitor_2 = result;
  }
  return result;
}

void fvds_finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  void *v13;
  const void *v14;
  __CFString *Mutable;
  NSObject *v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (*(_DWORD *)DerivedStorage)
  {
    Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    fvds_appendSessionStartInfo(a1, Mutable);
    v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    FigBytePumpRelease(Mutable);
    __break(1u);
  }
  else
  {
    v4 = *(NSObject **)(DerivedStorage + 8);
    if (v4)
      dispatch_release(v4);
    v5 = *(NSObject **)(DerivedStorage + 16);
    if (v5)
      dispatch_release(v5);
    v6 = *(NSObject **)(DerivedStorage + 24);
    if (v6)
      dispatch_release(v6);
    v7 = *(NSObject **)(DerivedStorage + 32);
    if (v7)
      dispatch_release(v7);
    v8 = *(const void **)(DerivedStorage + 40);
    if (v8)
      CFRelease(v8);
    v9 = *(const void **)(DerivedStorage + 48);
    if (v9)
      CFRelease(v9);
    v10 = *(const void **)(DerivedStorage + 56);
    if (v10)
      CFRelease(v10);
    v11 = *(const void **)(DerivedStorage + 72);
    if (v11)
      CFRelease(v11);
    v12 = *(const void **)(DerivedStorage + 88);
    if (v12)
      CFRelease(v12);
    v13 = *(void **)(DerivedStorage + 64);
    if (v13)
    {
      os_release(v13);
      *(_QWORD *)(DerivedStorage + 64) = 0;
    }
    v14 = *(const void **)(DerivedStorage + 80);
    if (v14)
    {
      CFRelease(v14);
      *(_QWORD *)(DerivedStorage + 80) = 0;
    }
  }
}

CFStringRef fvds_copyDebugDesc(const void *a1)
{
  _QWORD *DerivedStorage;
  uint64_t v3;
  uint64_t CMBaseObject;
  void (*v5)(uint64_t, const __CFString *, uint64_t, const __CFString **);
  uint64_t v6;
  void (*v7)(uint64_t, const __CFString *, uint64_t, const __CFString **);
  uint64_t v8;
  void (*v9)(uint64_t, const __CFString *, uint64_t, const __CFString **);
  const __CFAllocator *v10;
  uint64_t v11;
  CFIndex v12;
  const __CFString *v13;
  const __CFString *v14;
  const __CFString *v15;
  CFStringRef v16;
  const __CFString *v18;
  const __CFString *v19;
  const __CFString *v20;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v19 = 0;
  v20 = 0;
  v18 = 0;
  v3 = *MEMORY[0x1E0C9AE00];
  CMBaseObject = FigVirtualDisplaySourceGetCMBaseObject(DerivedStorage[5]);
  v5 = *(void (**)(uint64_t, const __CFString *, uint64_t, const __CFString **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
  if (v5)
    v5(CMBaseObject, CFSTR("sourceType"), v3, &v20);
  v6 = FigVirtualDisplayProcessorGetCMBaseObject(DerivedStorage[6]);
  v7 = *(void (**)(uint64_t, const __CFString *, uint64_t, const __CFString **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
  if (v7)
    v7(v6, CFSTR("processorType"), v3, &v19);
  v8 = FigVirtualDisplaySinkGetCMBaseObject(DerivedStorage[7]);
  v9 = *(void (**)(uint64_t, const __CFString *, uint64_t, const __CFString **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
  if (v9)
    v9(v8, CFSTR("Type"), v3, &v18);
  v10 = CFGetAllocator(a1);
  v11 = *(unsigned int *)DerivedStorage;
  v12 = CFGetRetainCount(a1);
  v13 = v20;
  if (!v20)
    v13 = CFSTR("source");
  v15 = v18;
  v14 = v19;
  if (!v19)
    v14 = CFSTR("processor");
  if (!v18)
    v15 = CFSTR("sink");
  v16 = CFStringCreateWithFormat(v10, 0, CFSTR("<FigVirtualDisplaySession %p state: %d retainCount: %ld> { %@ (%p) -> %@ (%p) -> %@ (%p) }"), a1, v11, v12, v13, DerivedStorage[5], v14, DerivedStorage[6], v15, DerivedStorage[7]);
  if (v20)
    CFRelease(v20);
  if (v19)
    CFRelease(v19);
  if (v18)
    CFRelease(v18);
  return v16;
}

uint64_t fvds_copyProperty(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t CMBaseObject;
  uint64_t (*v9)(uint64_t, const __CFString *, uint64_t, uint64_t);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("IsIdle")))
  {
    CMBaseObject = FigVirtualDisplayProcessorGetCMBaseObject(*(_QWORD *)(DerivedStorage + 48));
    v9 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
    if (v9)
      return v9(CMBaseObject, CFSTR("IsIdle"), a3, a4);
    else
      return 4294954514;
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954512;
  }
}

uint64_t fvds_setProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  CFTypeID v7;
  NSObject *v8;
  NSObject *v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD block[7];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("ScreenRecording")))
  {
    if (a3 && (v7 = CFGetTypeID(a3), v7 == CFBooleanGetTypeID()))
    {
      v8 = *(NSObject **)(DerivedStorage + 8);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __fvds_setProperty_block_invoke;
      block[3] = &__block_descriptor_tmp_53_0;
      block[4] = DerivedStorage;
      block[5] = a3;
      block[6] = a1;
      dispatch_sync(v8, block);
      return 0;
    }
    else
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 4294954516;
    }
  }
  else
  {
    v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954512;
  }
}

void fvds_appendSessionStartInfo(uint64_t a1, __CFString *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const void *v6;
  CFAllocatorRef *v7;
  void *v8;
  CFTypeRef v9;
  const __CFArray *v10;
  CFIndex Count;
  CFIndex v12;
  CFIndex v13;
  const void *ValueAtIndex;
  char *v15;
  const char *v16;
  CFStringRef StringWithAbsoluteTime;
  Dl_info v18;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = CMBaseObjectGetDerivedStorage();
  v6 = *(const void **)(v5 + 72);
  v7 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (v6)
  {
    v8 = (void *)CFRetain(v6);
    goto LABEL_3;
  }
  v10 = *(const __CFArray **)(v5 + 88);
  if (v10)
  {
    Count = CFArrayGetCount(v10);
    if (Count >= 1)
    {
      v12 = Count;
      v13 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 88), v13);
        memset(&v18, 0, sizeof(v18));
        dladdr(ValueAtIndex, &v18);
        if (v18.dli_fname)
        {
          v15 = strrchr((char *)v18.dli_fname, 47);
          if (v15)
          {
            v16 = v15 + 1;
            if (strcmp(v15 + 1, "MediaToolbox"))
              break;
          }
        }
        if (v12 == ++v13)
          goto LABEL_12;
      }
      v8 = (void *)CFStringCreateWithCString(*v7, v16, 0x8000100u);
LABEL_3:
      v9 = v8;
      if (v8)
        goto LABEL_13;
    }
  }
LABEL_12:
  v9 = CFRetain(CFSTR("???"));
LABEL_13:
  if (fvds_appendSessionStartInfo_once != -1)
    dispatch_once(&fvds_appendSessionStartInfo_once, &__block_literal_global_37_0);
  StringWithAbsoluteTime = CFDateFormatterCreateStringWithAbsoluteTime(*v7, (CFDateFormatterRef)fvds_appendSessionStartInfo_dateFormatter, *(CFAbsoluteTime *)(DerivedStorage + 96));
  if (CFStringGetLength(a2) >= 1)
    CFStringAppendFormat(a2, 0, CFSTR(" "));
  CFStringAppendFormat(a2, 0, CFSTR("{ session %p started at %@ by %@ }"), a1, StringWithAbsoluteTime, v9);
  if (v9)
    CFRelease(v9);
  if (StringWithAbsoluteTime)
    CFRelease(StringWithAbsoluteTime);
}

CFDateFormatterRef __fvds_appendSessionStartInfo_block_invoke()
{
  CFDateFormatterRef result;

  result = CFDateFormatterCreateISO8601Formatter((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0xFF3uLL);
  fvds_appendSessionStartInfo_dateFormatter = (uint64_t)result;
  return result;
}

void __fvds_setProperty_block_invoke(uint64_t a1)
{
  int Value;
  const void *v3;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 109))
  {
    Value = CFBooleanGetValue(*(CFBooleanRef *)(a1 + 40));
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 110) = Value;
    v3 = *(const void **)(a1 + 48);
    if (Value)
      recordingSessionRegister(v3);
    else
      recordingSessionUnregister(v3);
  }
}

void recordingSessionRegister(const void *a1)
{
  uint64_t DerivedStorage;
  CFIndex Count;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (screenRecordingMonitorGetCurrent_once != -1)
    dispatch_once(&screenRecordingMonitorGetCurrent_once, &__block_literal_global_77);
  if (screenRecordingMonitorGetCurrent_monitor_3)
  {
    if (*(_BYTE *)(DerivedStorage + 109) && *(_BYTE *)(DerivedStorage + 110))
    {
      if (*(_DWORD *)DerivedStorage == 2)
      {
        MEMORY[0x19402EEEC](screenRecordingMonitorGetCurrent_monitor_1);
        Count = CFSetGetCount((CFSetRef)screenRecordingMonitorGetCurrent_monitor_0);
        CFSetAddValue((CFMutableSetRef)screenRecordingMonitorGetCurrent_monitor_0, a1);
        if (!Count)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          dispatch_async((dispatch_queue_t)screenRecordingMonitorGetCurrent_monitor_2, &__block_literal_global_55_0);
        }
        MEMORY[0x19402EF04](screenRecordingMonitorGetCurrent_monitor_1);
      }
    }
    else
    {
      v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
}

void recordingSessionUnregister(const void *a1)
{
  uint64_t DerivedStorage;
  CFIndex Count;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (screenRecordingMonitorGetCurrent_once != -1)
    dispatch_once(&screenRecordingMonitorGetCurrent_once, &__block_literal_global_77);
  if (screenRecordingMonitorGetCurrent_monitor_3)
  {
    if (*(_BYTE *)(DerivedStorage + 109))
    {
      MEMORY[0x19402EEEC](screenRecordingMonitorGetCurrent_monitor_1);
      Count = CFSetGetCount((CFSetRef)screenRecordingMonitorGetCurrent_monitor_0);
      CFSetRemoveValue((CFMutableSetRef)screenRecordingMonitorGetCurrent_monitor_0, a1);
      if (Count >= 1 && !CFSetGetCount((CFSetRef)screenRecordingMonitorGetCurrent_monitor_0))
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        dispatch_async((dispatch_queue_t)screenRecordingMonitorGetCurrent_monitor_2, &__block_literal_global_57_0);
      }
      MEMORY[0x19402EF04](screenRecordingMonitorGetCurrent_monitor_1);
    }
    else
    {
      v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
}

uint64_t __recordingSessionRegister_block_invoke()
{
  return FigOutputMonitorSetVirtualDisplayIsProbablyBeingRecorded(1uLL);
}

uint64_t __recordingSessionUnregister_block_invoke()
{
  return FigOutputMonitorSetVirtualDisplayIsProbablyBeingRecorded(0);
}

uint64_t sessionStart(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v8;
  NSObject *v10;
  _QWORD block[8];
  os_log_type_t type;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v13 = 0;
  type = OS_LOG_TYPE_DEFAULT;
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (*(_DWORD *)DerivedStorage)
  {
    v13 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (!a2)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (a2)
LABEL_3:
    CFRetain(a2);
LABEL_4:
  v8 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __sessionStart_block_invoke;
  block[3] = &unk_1E2FABD08;
  block[4] = a3;
  block[5] = a1;
  block[6] = a2;
  block[7] = DerivedStorage;
  dispatch_async(v8, block);
  return 0;
}

uint64_t sessionStop(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v4;
  _QWORD block[5];
  os_log_type_t type;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = 0;
  type = OS_LOG_TYPE_DEFAULT;
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  v4 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __sessionStop_block_invoke;
  block[3] = &__block_descriptor_tmp_70_1;
  block[4] = a1;
  dispatch_sync(v4, block);
  return 0;
}

uint64_t sessionSuspend(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v4;
  NSObject *v6;
  _QWORD block[5];
  os_log_type_t type;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = 0;
  type = OS_LOG_TYPE_DEFAULT;
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (*(_DWORD *)DerivedStorage != 2)
  {
    v9 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v4 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __sessionSuspend_block_invoke;
  block[3] = &__block_descriptor_tmp_71_0;
  block[4] = a1;
  dispatch_sync(v4, block);
  return 0;
}

uint64_t sessionResume(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v4;
  uint64_t v5;
  NSObject *v7;
  _QWORD block[6];
  os_log_type_t type;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v11 = 0;
  v12 = &v11;
  v13 = 0x2000000000;
  v14 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = 0;
  type = OS_LOG_TYPE_DEFAULT;
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (*(_DWORD *)DerivedStorage != 1)
  {
    v10 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v4 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __sessionResume_block_invoke;
  block[3] = &unk_1E2FABE18;
  block[4] = &v11;
  block[5] = a1;
  dispatch_sync(v4, block);
  v5 = *((unsigned int *)v12 + 6);
  _Block_object_dispose(&v11, 8);
  return v5;
}

uint64_t sessionGetStartStatus()
{
  uint64_t DerivedStorage;
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(NSObject **)(DerivedStorage + 8);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = __sessionGetStartStatus_block_invoke;
  v4[3] = &unk_1E2FABE40;
  v4[4] = &v5;
  v4[5] = DerivedStorage;
  dispatch_sync(v1, v4);
  v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sessionCopyComponents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  NSObject *v8;
  _QWORD v10[8];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = *(NSObject **)(DerivedStorage + 8);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = __sessionCopyComponents_block_invoke;
  v10[3] = &__block_descriptor_tmp_74_0;
  v10[4] = a2;
  v10[5] = DerivedStorage;
  v10[6] = a3;
  v10[7] = a4;
  dispatch_sync(v8, v10);
  return 0;
}

void __sessionStart_block_invoke(_QWORD *a1)
{
  const void *v2;
  const __CFDictionary *v3;
  uint64_t DerivedStorage;
  const __CFString *v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v7;
  unsigned int v8;
  const __CFString *v9;
  int v10;
  const void *Value;
  const void *v12;
  uint64_t v13;
  const __CFString *v14;
  __CFString *Mutable;
  NSObject *v16;
  unsigned int v17;
  unsigned int v18;
  const __CFString *v19;
  NSObject *v20;
  unsigned int v21;
  unsigned int v22;
  NSObject *v23;
  unsigned int v24;
  unsigned int v25;
  const __CFString *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  int v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  char *v38;
  uint64_t CMBaseObject;
  void (*v40)(uint64_t, const __CFString *, _QWORD);
  uint64_t v41;
  void (*v42)(uint64_t, const __CFDictionary *, _BYTE *);
  uint64_t v43;
  uint64_t (*v44)(uint64_t, const __CFDictionary *);
  int v45;
  int v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, const __CFDictionary *);
  int v49;
  int v50;
  int v51;
  NSObject *v52;
  unsigned int v53;
  unsigned int v54;
  const __CFString *v55;
  int v56;
  NSObject *v57;
  unsigned int v58;
  unsigned int v59;
  const __CFString *v60;
  NSObject *v61;
  unsigned int v62;
  unsigned int v63;
  const __CFString *v64;
  NSObject *v65;
  uint64_t *v66;
  int v67;
  NSObject *v68;
  int v69;
  const void *v70;
  uint64_t v71;
  NSObject *v72;
  _QWORD block[5];
  int v74;
  os_log_type_t v75;
  os_log_type_t type[4];
  char v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  int v81;
  unsigned int v82;
  _BYTE v83[24];
  __int128 v84;
  uint64_t v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v2 = (const void *)a1[5];
  v3 = (const __CFDictionary *)a1[6];
  v78 = 0;
  v79 = &v78;
  v80 = 0x2000000000;
  v81 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v77 = 0;
  v5 = *(const __CFString **)(DerivedStorage + 80);
  if (*(_DWORD *)DerivedStorage)
  {
    v82 = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v7 = v82;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
      v8 = v7;
    else
      v8 = v7 & 0xFFFFFFFE;
    if (v8)
    {
      v9 = &stru_1E2FD85F8;
      v10 = *(_DWORD *)DerivedStorage;
      if (v5)
        v9 = v5;
      *(_DWORD *)v83 = 138412802;
      *(_QWORD *)&v83[4] = v9;
      *(_WORD *)&v83[12] = 2080;
      *(_QWORD *)&v83[14] = "fvds_start";
      *(_WORD *)&v83[22] = 1024;
      LODWORD(v84) = v10;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    *((_DWORD *)v79 + 6) = -12070;
    goto LABEL_104;
  }
  *(CFAbsoluteTime *)(DerivedStorage + 96) = CFAbsoluteTimeGetCurrent();
  if (v3)
  {
    Value = CFDictionaryGetValue(v3, CFSTR("clientName"));
    if (Value)
    {
      v12 = *(const void **)(DerivedStorage + 72);
      *(_QWORD *)(DerivedStorage + 72) = Value;
      CFRetain(Value);
      if (v12)
        CFRelease(v12);
    }
  }
  if (*(_BYTE *)(DerivedStorage + 109))
  {
    v13 = CMBaseObjectGetDerivedStorage();
    if (screenSessionManagerGetCurrent_once != -1)
      dispatch_once(&screenSessionManagerGetCurrent_once, &__block_literal_global_63);
    if (screenSessionManagerGetCurrent_manager_3 && *(_BYTE *)(v13 + 109))
    {
      v14 = *(const __CFString **)(v13 + 80);
      MEMORY[0x19402EEEC](screenSessionManagerGetCurrent_manager_2);
      if (screenSessionManagerGetCurrent_manager_0)
      {
        Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
        fvds_appendSessionStartInfo(screenSessionManagerGetCurrent_manager_0, Mutable);
        v82 = 0;
        v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v17 = v82;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          v18 = v17;
        else
          v18 = v17 & 0xFFFFFFFE;
        if (!v18)
          goto LABEL_36;
        v19 = &stru_1E2FD85F8;
        if (v14)
          v19 = v14;
LABEL_25:
        *(_DWORD *)v83 = 138412802;
        *(_QWORD *)&v83[4] = v19;
        *(_WORD *)&v83[12] = 2080;
        *(_QWORD *)&v83[14] = "screenSessionRegister";
        *(_WORD *)&v83[22] = 2114;
        *(_QWORD *)&v84 = Mutable;
        _os_log_send_and_compose_impl();
LABEL_36:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        MEMORY[0x19402EF04](screenSessionManagerGetCurrent_manager_2);
        if (Mutable)
          CFRelease(Mutable);
        *((_DWORD *)v79 + 6) = -12073;
        v82 = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v24 = v82;
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          v25 = v24;
        else
          v25 = v24 & 0xFFFFFFFE;
        if (v25)
        {
          v26 = &stru_1E2FD85F8;
          *(_DWORD *)v83 = 138413058;
          if (v5)
            v26 = v5;
          *(_QWORD *)&v83[4] = v26;
          *(_WORD *)&v83[12] = 2080;
          *(_QWORD *)&v83[14] = "fvds_start";
          *(_WORD *)&v83[22] = 1024;
          LODWORD(v84) = 702;
          WORD2(v84) = 1024;
          *(_DWORD *)((char *)&v84 + 6) = -12073;
          _os_log_send_and_compose_impl();
        }
        goto LABEL_103;
      }
      if (*(_BYTE *)(v13 + 111))
      {
        if (CFSetGetCount((CFSetRef)screenSessionManagerGetCurrent_manager_1) >= 1)
        {
          Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
          CFSetApplyFunction((CFSetRef)screenSessionManagerGetCurrent_manager_1, (CFSetApplierFunction)fvds_appendSessionStartInfo, Mutable);
          v82 = 0;
          v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v21 = v82;
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            v22 = v21;
          else
            v22 = v21 & 0xFFFFFFFE;
          if (!v22)
            goto LABEL_36;
          v19 = &stru_1E2FD85F8;
          if (v14)
            v19 = v14;
          goto LABEL_25;
        }
        screenSessionManagerGetCurrent_manager_0 = (uint64_t)v2;
      }
      else
      {
        CFSetAddValue((CFMutableSetRef)screenSessionManagerGetCurrent_manager_1, v2);
      }
      MEMORY[0x19402EF04](screenSessionManagerGetCurrent_manager_2);
    }
    *((_DWORD *)v79 + 6) = 0;
  }
  if (*(_DWORD *)(DerivedStorage + 4))
  {
    v82 = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v61 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v62 = v82;
    if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
      v63 = v62;
    else
      v63 = v62 & 0xFFFFFFFE;
    if (v63)
    {
      v64 = &stru_1E2FD85F8;
      if (v5)
        v64 = v5;
      *(_DWORD *)v83 = 138412802;
      *(_QWORD *)&v83[4] = v64;
      *(_WORD *)&v83[12] = 2080;
      *(_QWORD *)&v83[14] = "fvds_start";
      *(_WORD *)&v83[22] = 1024;
      LODWORD(v84) = 705;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v27 = *(_QWORD *)(DerivedStorage + 40);
  v28 = *(_QWORD *)(DerivedStorage + 48);
  v29 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v29)
  {
    v51 = -12782;
    *((_DWORD *)v79 + 6) = -12782;
LABEL_74:
    v82 = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v52 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v53 = v82;
    if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      v54 = v53;
    else
      v54 = v53 & 0xFFFFFFFE;
    if (!v54)
      goto LABEL_103;
    v55 = &stru_1E2FD85F8;
    *(_DWORD *)v83 = 138413058;
    if (v5)
      v55 = v5;
    *(_QWORD *)&v83[4] = v55;
    *(_WORD *)&v83[12] = 2080;
    *(_QWORD *)&v83[14] = "fvds_start";
    *(_WORD *)&v83[22] = 1024;
    LODWORD(v84) = 709;
    WORD2(v84) = 1024;
    *(_DWORD *)((char *)&v84 + 6) = v51;
LABEL_89:
    _os_log_send_and_compose_impl();
LABEL_103:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_104;
  }
  v30 = v29(v27, v28);
  *((_DWORD *)v79 + 6) = v30;
  if (v30)
  {
    v51 = v30;
    goto LABEL_74;
  }
  *(_DWORD *)(DerivedStorage + 4) = 1;
  v31 = *(_QWORD *)(DerivedStorage + 48);
  v32 = *(_QWORD *)(DerivedStorage + 56);
  v33 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v33)
  {
    v56 = -12782;
    *((_DWORD *)v79 + 6) = -12782;
LABEL_82:
    v82 = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v57 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v58 = v82;
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
      v59 = v58;
    else
      v59 = v58 & 0xFFFFFFFE;
    if (!v59)
      goto LABEL_103;
    v60 = &stru_1E2FD85F8;
    *(_DWORD *)v83 = 138413058;
    if (v5)
      v60 = v5;
    *(_QWORD *)&v83[4] = v60;
    *(_WORD *)&v83[12] = 2080;
    *(_QWORD *)&v83[14] = "fvds_start";
    *(_WORD *)&v83[22] = 1024;
    LODWORD(v84) = 713;
    WORD2(v84) = 1024;
    *(_DWORD *)((char *)&v84 + 6) = v56;
    goto LABEL_89;
  }
  v34 = v33(v31, v32);
  *((_DWORD *)v79 + 6) = v34;
  if (v34)
  {
    v56 = v34;
    goto LABEL_82;
  }
  v35 = *(_QWORD *)(DerivedStorage + 56);
  v36 = *(_QWORD *)(DerivedStorage + 24);
  v37 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (v37)
    v37(v35, v36);
  v38 = getenv("WIRELESSDISPLAY_DISABLE_ENCRYPTION");
  if (v38)
  {
    if (!strcmp(v38, "1"))
    {
      CMBaseObject = FigVirtualDisplaySinkGetCMBaseObject(*(_QWORD *)(DerivedStorage + 56));
      v40 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v40)
        v40(CMBaseObject, CFSTR("useEncryption"), *MEMORY[0x1E0C9AE40]);
    }
  }
  *(_DWORD *)(DerivedStorage + 4) = 2;
  v41 = *(_QWORD *)(DerivedStorage + 56);
  *(_QWORD *)v83 = MEMORY[0x1E0C809B0];
  *(_QWORD *)&v83[8] = 0x40000000;
  *(_QWORD *)&v83[16] = __fvds_start_block_invoke;
  *(_QWORD *)&v84 = &unk_1E2FABD30;
  *((_QWORD *)&v84 + 1) = &v78;
  v85 = DerivedStorage;
  v42 = *(void (**)(uint64_t, const __CFDictionary *, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v42)
    v42(v41, v3, v83);
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(DerivedStorage + 32), 0xFFFFFFFFFFFFFFFFLL);
  if (*((_DWORD *)v79 + 6))
    goto LABEL_102;
  *(_DWORD *)(DerivedStorage + 4) = 3;
  v43 = *(_QWORD *)(DerivedStorage + 48);
  v44 = *(uint64_t (**)(uint64_t, const __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v44)
  {
    *((_DWORD *)v79 + 6) = -12782;
LABEL_102:
    *(_DWORD *)type = 0;
    v75 = OS_LOG_TYPE_DEFAULT;
    v65 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT);
    goto LABEL_103;
  }
  v45 = v44(v43, v3);
  *((_DWORD *)v79 + 6) = v45;
  if (v45)
    goto LABEL_102;
  *(_DWORD *)(DerivedStorage + 4) = 4;
  CMNotificationCenterGetDefaultLocalCenter();
  v46 = FigNotificationCenterAddWeakListener();
  *((_DWORD *)v79 + 6) = v46;
  if (v46)
    goto LABEL_102;
  *(_BYTE *)(DerivedStorage + 108) = 1;
  v47 = *(_QWORD *)(DerivedStorage + 40);
  v48 = *(uint64_t (**)(uint64_t, const __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v48)
  {
    *((_DWORD *)v79 + 6) = -12782;
    goto LABEL_102;
  }
  v49 = v48(v47, v3);
  *((_DWORD *)v79 + 6) = v49;
  if (v49)
    goto LABEL_102;
  *(_DWORD *)(DerivedStorage + 4) = 5;
  FigCFDictionaryGetBooleanIfPresent();
  if (v77)
    v50 = 1;
  else
    v50 = 2;
  *(_DWORD *)DerivedStorage = v50;
  if (*(_BYTE *)(DerivedStorage + 110))
    recordingSessionRegister(v2);
LABEL_104:
  v66 = v79;
  v67 = *((_DWORD *)v79 + 6);
  if (v67)
  {
    *(_DWORD *)type = 0;
    v75 = OS_LOG_TYPE_DEFAULT;
    v68 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    fvds_stop(v2);
    v66 = v79;
    v67 = *((_DWORD *)v79 + 6);
  }
  *(_DWORD *)(DerivedStorage + 104) = v67;
  v69 = *((_DWORD *)v66 + 6);
  _Block_object_dispose(&v78, 8);
  v70 = (const void *)a1[6];
  if (v70)
    CFRelease(v70);
  v71 = a1[4];
  if (v71)
  {
    v72 = *(NSObject **)(a1[7] + 16);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __sessionStart_block_invoke_2;
    block[3] = &unk_1E2FABCE0;
    block[4] = v71;
    v74 = v69;
    dispatch_async(v72, block);
  }
}

uint64_t __sessionStart_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

intptr_t __fvds_start_block_invoke(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v2 + 32));
}

void fvds_handleSourceFatalError(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v5;
  _QWORD block[5];
  os_log_type_t type;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = 0;
  type = OS_LOG_TYPE_DEFAULT;
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  CFRetain(a2);
  v5 = *(NSObject **)(DerivedStorage + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __fvds_handleSourceFatalError_block_invoke;
  block[3] = &__block_descriptor_tmp_68_2;
  block[4] = a2;
  dispatch_async(v5, block);
}

void fvds_stop(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  void (*v8)(uint64_t, _QWORD *);
  uint64_t v9;
  void (*v10)(uint64_t, _QWORD);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  _QWORD v17[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 108))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    *(_BYTE *)(DerivedStorage + 108) = 0;
  }
  switch(*(_DWORD *)(DerivedStorage + 4))
  {
    case 1:
      goto LABEL_15;
    case 2:
      goto LABEL_11;
    case 3:
      goto LABEL_8;
    case 4:
      goto LABEL_6;
    case 5:
      v3 = *(_QWORD *)(DerivedStorage + 40);
      v4 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (v4)
        v4(v3);
LABEL_6:
      v5 = *(_QWORD *)(DerivedStorage + 48);
      v6 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (v6)
        v6(v5);
LABEL_8:
      v7 = *(_QWORD *)(DerivedStorage + 56);
      v17[0] = MEMORY[0x1E0C809B0];
      v17[1] = 0x40000000;
      v17[2] = __fvds_stop_block_invoke;
      v17[3] = &__block_descriptor_tmp_69_0;
      v17[4] = DerivedStorage;
      v8 = *(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v8)
        v8(v7, v17);
      dispatch_semaphore_wait(*(dispatch_semaphore_t *)(DerivedStorage + 32), 0xFFFFFFFFFFFFFFFFLL);
LABEL_11:
      v9 = *(_QWORD *)(DerivedStorage + 56);
      v10 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
      if (v10)
        v10(v9, 0);
      v11 = *(_QWORD *)(DerivedStorage + 48);
      v12 = *(_QWORD *)(DerivedStorage + 56);
      v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v13)
        v13(v11, v12);
LABEL_15:
      v14 = *(_QWORD *)(DerivedStorage + 40);
      v15 = *(_QWORD *)(DerivedStorage + 48);
      v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v16)
        v16(v14, v15);
      break;
    default:
      break;
  }
  *(_QWORD *)DerivedStorage = 0;
  if (*(_BYTE *)(DerivedStorage + 109))
  {
    if (screenSessionManagerGetCurrent_once != -1)
      dispatch_once(&screenSessionManagerGetCurrent_once, &__block_literal_global_63);
    if (screenSessionManagerGetCurrent_manager_3)
    {
      MEMORY[0x19402EEEC](screenSessionManagerGetCurrent_manager_2);
      if ((const void *)screenSessionManagerGetCurrent_manager_0 == a1)
        screenSessionManagerGetCurrent_manager_0 = 0;
      CFSetRemoveValue((CFMutableSetRef)screenSessionManagerGetCurrent_manager_1, a1);
      MEMORY[0x19402EF04](screenSessionManagerGetCurrent_manager_2);
    }
  }
  if (*(_BYTE *)(DerivedStorage + 110))
    recordingSessionUnregister(a1);
}

uint64_t __screenSessionManagerGetCurrent_block_invoke()
{
  uint64_t result;

  screenSessionManagerGetCurrent_manager_3 = FVDUtilsSessionServerEnabled();
  result = FigGetCFPreferenceNumberWithDefault();
  screenSessionManagerGetCurrent_manager_3 = (_DWORD)result != 0;
  if ((_DWORD)result)
  {
    screenSessionManagerGetCurrent_manager_2 = FigSimpleMutexCreate();
    result = (uint64_t)CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
    screenSessionManagerGetCurrent_manager_1 = result;
  }
  return result;
}

void __fvds_handleSourceFatalError_block_invoke(uint64_t a1)
{
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

intptr_t __fvds_stop_block_invoke(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 32) + 32));
}

void __sessionStop_block_invoke(uint64_t a1)
{
  fvds_stop(*(const void **)(a1 + 32));
}

void __sessionSuspend_block_invoke(uint64_t a1)
{
  const void *v1;
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  void (*v9)(uint64_t);

  v1 = *(const void **)(a1 + 32);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)DerivedStorage == 2)
  {
    v3 = DerivedStorage;
    v4 = *(_QWORD *)(DerivedStorage + 40);
    v5 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (v5)
      v5(v4);
    v6 = *(_QWORD *)(v3 + 48);
    v7 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (v7)
      v7(v6);
    v8 = *(_QWORD *)(v3 + 56);
    v9 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v9)
      v9(v8);
    *(_DWORD *)v3 = 1;
    if (*(_BYTE *)(v3 + 110))
      recordingSessionUnregister(v1);
  }
}

void __sessionResume_block_invoke(uint64_t a1)
{
  const void *v2;
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  int v7;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  BOOL v14;
  NSObject *v15;
  int v16;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v2 = *(const void **)(a1 + 40);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = DerivedStorage;
  if (*(_DWORD *)DerivedStorage == 1)
  {
    v5 = *(_QWORD *)(DerivedStorage + 56);
    v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (v6)
    {
      v7 = v6(v5);
      if (v7 != -12782 && v7 != 0)
        goto LABEL_19;
    }
    v9 = *(_QWORD *)(v4 + 48);
    v10 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (v10)
    {
      v7 = v10(v9);
      if (v7 != -12782 && v7 != 0)
        goto LABEL_19;
    }
    v12 = *(_QWORD *)(v4 + 40);
    v13 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (!v13 || ((v7 = v13(v12), v7 != -12782) ? (v14 = v7 == 0) : (v14 = 1), v14))
    {
      *(_DWORD *)v4 = 2;
      if (*(_BYTE *)(v4 + 110))
        recordingSessionRegister(v2);
      v16 = 0;
    }
    else
    {
LABEL_19:
      v16 = v7;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v16 = -12070;
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v16;
}

uint64_t __sessionGetStartStatus_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(result + 40) + 104);
  return result;
}

_QWORD *__sessionCopyComponents_block_invoke(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  v1 = result;
  v2 = (_QWORD *)result[4];
  if (v2)
  {
    result = *(_QWORD **)(result[5] + 40);
    if (result)
    {
      result = CFRetain(result);
      v2 = (_QWORD *)v1[4];
    }
    *v2 = result;
  }
  v3 = (_QWORD *)v1[6];
  if (v3)
  {
    result = *(_QWORD **)(v1[5] + 48);
    if (result)
    {
      result = CFRetain(result);
      v3 = (_QWORD *)v1[6];
    }
    *v3 = result;
  }
  v4 = (_QWORD *)v1[7];
  if (v4)
  {
    result = *(_QWORD **)(v1[5] + 56);
    if (result)
    {
      result = CFRetain(result);
      v4 = (_QWORD *)v1[7];
    }
    *v4 = result;
  }
  return result;
}

uint64_t FigTTMLDocumentWriterCreateRegionBuilder(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *DerivedStorage;

  if (!a2 || !a3)
    return FigSignalErrorAt();
  FigTTMLDocumentWriterGetClassID();
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    FigTTMLDocumentWriterGetCMBaseObject(0);
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    *DerivedStorage = CFRetain(a2);
    *a3 = 0;
  }
  return v5;
}

uint64_t figTTMLDocumentWriterRegionBuilder_Invalidate()
{
  return 0;
}

void figTTMLDocumentWriterRegionBuilder_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v2;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
  v2 = *(const void **)(DerivedStorage + 8);
  if (v2)
    CFRelease(v2);
}

CFStringRef figTTMLDocumentWriterRegionBuilder_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("figTTMLDocumentWriterRegionBuilder[%p]"), a1);
}

uint64_t figTTMLDocumentWriterRegionBuilder_StartElement(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef cf;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v4 = FigTTMLDocumentWriterElementCreate(*MEMORY[0x1E0C9AE00], a2, *(_QWORD *)(DerivedStorage + 16), (uint64_t *)&cf);
  if ((_DWORD)v4)
  {
    v7 = cf;
    if (!cf)
      return v4;
    goto LABEL_9;
  }
  v5 = *(_QWORD *)(DerivedStorage + 16);
  if (v5)
  {
    FigTTMLDocumentWriterElementAddChildElement(v5, cf);
  }
  else
  {
    if (cf)
      v6 = CFRetain(cf);
    else
      v6 = 0;
    *(_QWORD *)(DerivedStorage + 8) = v6;
  }
  v7 = cf;
  *(_QWORD *)(DerivedStorage + 16) = cf;
  if (v7)
LABEL_9:
    CFRelease(v7);
  return v4;
}

uint64_t figTTMLDocumentWriterRegionBuilder_EndElement(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFDictionary *Mutable;
  __int128 v7;
  uint64_t timescale;
  uint64_t v9;
  uint64_t CMBaseObject;
  uint64_t (*v11)(uint64_t, _QWORD, uint64_t, const __CFArray **);
  uint64_t v12;
  const __CFArray *v13;
  unint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, _QWORD, uint64_t, unint64_t *);
  uint64_t v17;
  void (*v18)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  CMTime context;
  CFTypeRef cf;
  unint64_t v29;
  const __CFArray *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  CFRange v34;

  v33 = *MEMORY[0x1E0C80C00];
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(_QWORD *)(DerivedStorage + 16);
  if (v3 != *(_QWORD *)(DerivedStorage + 8))
  {
LABEL_36:
    timescale = 0;
    *(_QWORD *)(DerivedStorage + 16) = FigTTMLDocumentWriterElementGetParentElement(v3);
    return timescale;
  }
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  v4 = CMBaseObjectGetDerivedStorage();
  v5 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v23 = (uint64_t)Mutable;
  v7 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  v24 = *MEMORY[0x1E0CA2E40];
  v25 = v7;
  v26 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
  FigTTMLDocumentWriterElementWalkTree(*(CFArrayRef **)(v4 + 8), (uint64_t (*)(CFArrayRef *, uint64_t))updateContextTimeRange, 0, (uint64_t (*)(CFArrayRef *, uint64_t))addExplicitCaptionRegionToDictionary, (uint64_t)&v23);
  if (!FigCFDictionaryGetCount()
    || (v32 = 9,
        v30 = 0,
        v31 = 0x800000007,
        FigTTMLDocumentWriterElementInsertBeforeIfNotExist(*(CFArrayRef **)(v4 + 8), (uint64_t)&v31, 3, &v30),
        !v30))
  {
    timescale = 0;
    if (!Mutable)
      goto LABEL_8;
    goto LABEL_7;
  }
  *(_OWORD *)&context.value = (unint64_t)v30;
  CFDictionaryApplyFunction(Mutable, (CFDictionaryApplierFunction)addRegionElement, &context);
  timescale = context.timescale;
  if (Mutable)
LABEL_7:
    CFRelease(Mutable);
LABEL_8:
  if ((_DWORD)timescale)
    return timescale;
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  v9 = CMBaseObjectGetDerivedStorage();
  v30 = 0;
  v31 = 0;
  v29 = 0;
  cf = 0;
  FigTTMLDocumentWriterElementWalkTree(*(CFArrayRef **)(v9 + 8), 0, 0, (uint64_t (*)(CFArrayRef *, uint64_t))copyRootContainerRegion, (uint64_t)&v31);
  if (!v31)
  {
    timescale = 0;
    goto LABEL_24;
  }
  CMBaseObject = FigCaptionRegionGetCMBaseObject();
  v11 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, const __CFArray **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (v11)
  {
    v12 = v11(CMBaseObject, *MEMORY[0x1E0CA3498], v5, &v30);
    if ((_DWORD)v12)
    {
LABEL_23:
      timescale = v12;
      goto LABEL_24;
    }
    v13 = v30;
    v14 = *(_QWORD *)(v9 + 8);
    v23 = v31;
    v24 = v14;
    v34.length = CFArrayGetCount(v30);
    v34.location = 0;
    CFArrayApplyFunction(v13, v34, (CFArrayApplierFunction)mapAndAddRootContainerRegionAttribute, &v23);
    timescale = DWORD2(v24);
    if (!DWORD2(v24))
    {
      v15 = FigCaptionRegionGetCMBaseObject();
      v16 = *(void (**)(uint64_t, _QWORD, uint64_t, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
      if (v16)
        v16(v15, *MEMORY[0x1E0CA34B0], v5, &v29);
      v17 = FigCaptionRegionGetCMBaseObject();
      v18 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
      if (v18)
      {
        v18(v17, *MEMORY[0x1E0CA3428], v5, &cf);
        v19 = (unint64_t)cf;
      }
      else
      {
        v19 = 0;
      }
      if (!(v29 | v19))
      {
        timescale = 0;
        goto LABEL_29;
      }
      if (v29 && v19)
      {
        v20 = *(_QWORD *)(v9 + 8);
        context = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
        v12 = FigTTMLDocumentWriterMapWidthAndHeightPropertiesToExtentAttributeAndSet((const void *)v29, (const void *)v19, &context, v20);
      }
      else
      {
        v12 = FigSignalErrorAt();
      }
      goto LABEL_23;
    }
  }
  else
  {
    timescale = 4294954514;
  }
LABEL_24:
  if (v29)
    CFRelease((CFTypeRef)v29);
  if (cf)
    CFRelease(cf);
LABEL_29:
  if (v30)
    CFRelease(v30);
  if (v31)
    CFRelease((CFTypeRef)v31);
  if (!(_DWORD)timescale)
  {
    v21 = FigTTMLDocumentWriterElementWriteTree(*(CFArrayRef **)(DerivedStorage + 8), *(_QWORD *)DerivedStorage);
    if ((_DWORD)v21)
      return v21;
    v3 = *(_QWORD *)(DerivedStorage + 16);
    goto LABEL_36;
  }
  return timescale;
}

uint64_t figTTMLDocumentWriterRegionBuilder_AddCaptionData(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigTTMLDocumentWriterElementAddChildElement(*(_QWORD *)(DerivedStorage + 16), a2);
  return 0;
}

uint64_t figTTMLDocumentWriterRegionBuilder_SetAttribute(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigTTMLDocumentWriterElementSetAttribute(*(_QWORD *)(DerivedStorage + 16), a2, a3);
  return 0;
}

uint64_t figTTMLDocumentWriterRegionBuilder_Flush(uint64_t a1)
{
  uint64_t *DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage[2])
    return 4294950721;
  else
    return FigTTMLDocumentWriterFlush(*DerivedStorage);
}

uint64_t updateContextTimeRange(uint64_t a1, uint64_t a2)
{
  const void *Attribute;
  const void *v5;
  const void *v6;
  CFTypeID v7;
  CFTypeID v9;
  __int128 v10;
  CMTime v12;
  CMTime start;
  CMTimeRange v14;
  CMTime v15;
  CMTime v16;

  Attribute = FigTTMLDocumentWriterElementGetAttribute(a1, CFSTR("begin"));
  v5 = FigTTMLDocumentWriterElementGetAttribute(a1, CFSTR("end"));
  if (Attribute)
  {
    v6 = v5;
    v7 = CFGetTypeID(Attribute);
    if (v7 == CFDictionaryGetTypeID() && v6 != 0)
    {
      v9 = CFGetTypeID(v6);
      if (v9 == CFDictionaryGetTypeID())
      {
        memset(&v16, 0, sizeof(v16));
        CMTimeMakeFromDictionary(&v16, (CFDictionaryRef)Attribute);
        memset(&v15, 0, sizeof(v15));
        CMTimeMakeFromDictionary(&v15, (CFDictionaryRef)v6);
        if ((v16.flags & 0x1D) == 1 && (v15.flags & 0x1D) == 1)
        {
          memset(&v14, 0, sizeof(v14));
          start = v16;
          v12 = v15;
          CMTimeRangeFromTimeToTime(&v14, &start, &v12);
          v10 = *(_OWORD *)&v14.start.epoch;
          *(_OWORD *)(a2 + 8) = *(_OWORD *)&v14.start.value;
          *(_OWORD *)(a2 + 24) = v10;
          *(_OWORD *)(a2 + 40) = *(_OWORD *)&v14.duration.timescale;
        }
      }
    }
  }
  return 0;
}

uint64_t addExplicitCaptionRegionToDictionary(uint64_t a1, uint64_t a2)
{
  uint64_t CMBaseObject;
  void (*v4)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, __int128 *);
  const void *Value;
  CFTypeRef v16;
  __int128 v17;
  __int128 v19[3];
  CFTypeRef cf;
  CFTypeRef v21;
  CFTypeRef v22;
  CFTypeRef v23;

  v22 = 0;
  v23 = 0;
  cf = 0;
  v21 = 0;
  CMBaseObject = FigCaptionDataGetCMBaseObject();
  v4 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v4)
  {
    v5 = *MEMORY[0x1E0C9AE00];
    v4(CMBaseObject, *MEMORY[0x1E0CA3340], *MEMORY[0x1E0C9AE00], &v23);
    if (v23)
    {
      v6 = *MEMORY[0x1E0CA3418];
      v7 = *MEMORY[0x1E0CA3438];
      v8 = *MEMORY[0x1E0CA3400];
      while (1)
      {
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        v9 = FigCaptionRegionGetCMBaseObject();
        v10 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
        if (v10)
          v10(v9, v6, v5, &cf);
        if (FigCFEqual())
        {
          if (v22)
          {
            CFRelease(v22);
            v22 = 0;
          }
          v11 = FigCaptionRegionGetCMBaseObject();
          v12 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
          if (v12)
            v12(v11, v7, v5, &v22);
          if (v22)
            break;
        }
        *(_QWORD *)&v19[0] = 0;
        v13 = FigCaptionRegionGetCMBaseObject();
        v14 = *(void (**)(uint64_t, uint64_t, uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
        if (v14)
          v14(v13, v8, v5, v19);
        if (v23)
          CFRelease(v23);
        v23 = *(CFTypeRef *)&v19[0];
        if (!*(_QWORD *)&v19[0])
          goto LABEL_28;
      }
      if (v23)
      {
        Value = CFDictionaryGetValue(*(CFDictionaryRef *)a2, v22);
        if (Value)
        {
          v16 = CFRetain(Value);
          v21 = v16;
          if (v16)
          {
LABEL_27:
            v17 = *(_OWORD *)(a2 + 24);
            v19[0] = *(_OWORD *)(a2 + 8);
            v19[1] = v17;
            v19[2] = *(_OWORD *)(a2 + 40);
            FigTTMLDocumentWriterRegionTimelineAddRegionSlice((uint64_t)v16, v19, (uint64_t)v23);
            goto LABEL_28;
          }
        }
        else
        {
          v21 = 0;
        }
        if (FigTTMLDocumentWriterRegionTimelineCreate(&v21))
          goto LABEL_28;
        CFDictionarySetValue(*(CFMutableDictionaryRef *)a2, v22, v21);
        v16 = v21;
        goto LABEL_27;
      }
    }
  }
LABEL_28:
  if (cf)
    CFRelease(cf);
  if (v21)
    CFRelease(v21);
  if (v22)
    CFRelease(v22);
  if (v23)
    CFRelease(v23);
  return 0;
}

void addRegionElement(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  const __CFAllocator *v5;
  int v6;
  CFTypeRef v7;
  int v8;
  uint64_t v9;
  const void *v10;
  int v11;
  CFDictionaryRef v12;
  CFDictionaryRef v13;
  CMTimeRange v14;
  CMTime time;
  CFTypeRef cf;
  CMTimeRange v17;
  __int128 v18;

  cf = 0;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v6 = FigTTMLDocumentWriterElementCreate(*MEMORY[0x1E0C9AE00], 10, *(_QWORD *)a3, (uint64_t *)&cf);
  if (v6
    || (MEMORY[0x19402F294](&initRegionPropertyToAttributeMapOnce, initRegionPropertyToAttributeMap),
        (v6 = FigTTMLDocumentWriterRegionTimelineWriteAttributesAndSetElements((uint64_t)a2, (uint64_t)cf, sExplicitRegionPropertyToAttributeMap)) != 0))
  {
    v11 = v6;
LABEL_30:
    *(_DWORD *)(a3 + 8) = v11;
    goto LABEL_24;
  }
  v7 = cf;
  v18 = 0uLL;
  v8 = FigTTMLDocumentWriterRegionTimelineCopyProperty((uint64_t)a2, (CFTypeRef)*MEMORY[0x1E0CA34B0], (_QWORD *)&v18 + 1);
  if (v8
    || (v8 = FigTTMLDocumentWriterRegionTimelineCopyProperty((uint64_t)a2, (CFTypeRef)*MEMORY[0x1E0CA3428], &v18)) != 0)
  {
    v11 = v8;
    goto LABEL_12;
  }
  FigGeometryDimensionMake();
  v9 = FigGeometryDimensionCopyAsDictionary();
  v10 = (const void *)v9;
  if (v18 == 0)
  {
    v11 = 0;
    if (!v9)
      goto LABEL_12;
    goto LABEL_11;
  }
  if (*((_QWORD *)&v18 + 1))
  {
    if ((_QWORD)v18)
      goto LABEL_8;
  }
  else
  {
    FigCaptionDynamicStyleCreate();
    if ((_QWORD)v18)
      goto LABEL_8;
  }
  FigCaptionDynamicStyleCreate();
LABEL_8:
  memset(&v17, 0, sizeof(v17));
  FigTTMLDocumentWriterRegionTimelineGetTimeRange(a2, &v17);
  *(_OWORD *)&v14.start.value = *(_OWORD *)&v17.start.value;
  v14.start.epoch = v17.start.epoch;
  v11 = FigTTMLDocumentWriterMapWidthAndHeightPropertiesToExtentAttributeAndSet(*((const void **)&v18 + 1), (const void *)v18, &v14.start, (uint64_t)v7);
  if (v10)
LABEL_11:
    CFRelease(v10);
LABEL_12:
  if ((_QWORD)v18)
    CFRelease((CFTypeRef)v18);
  if (*((_QWORD *)&v18 + 1))
    CFRelease(*((CFTypeRef *)&v18 + 1));
  if (v11)
    goto LABEL_30;
  if (FigTTMLDocumentWriterRegionTimelineIsAnimated((uint64_t)a2))
  {
    memset(&v17, 0, sizeof(v17));
    FigTTMLDocumentWriterRegionTimelineGetTimeRange(a2, &v17);
    *(_OWORD *)&v14.start.value = *(_OWORD *)&v17.start.value;
    v14.start.epoch = v17.start.epoch;
    v12 = CMTimeCopyAsDictionary(&v14.start, v5);
    v14 = v17;
    CMTimeRangeGetEnd(&time, &v14);
    v13 = CMTimeCopyAsDictionary(&time, v5);
    FigTTMLDocumentWriterElementSetAttribute((uint64_t)cf, CFSTR("begin"), v12);
    FigTTMLDocumentWriterElementSetAttribute((uint64_t)cf, CFSTR("end"), v13);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  FigTTMLDocumentWriterElementAddChildElement(*(_QWORD *)a3, cf);
  if (v13)
    CFRelease(v13);
  if (v12)
    CFRelease(v12);
LABEL_24:
  if (cf)
    CFRelease(cf);
}

void initRegionPropertyToAttributeMap()
{
  const __CFAllocator *v0;
  const CFDictionaryKeyCallBacks *v1;
  __CFDictionary *Mutable;
  __CFDictionary *v3;

  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v1 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA3438], FigTTMLDocumentWriterMapPropertyToAttribute_Identifier);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA3490], FigTTMLDocumentWriterMapPropertyToAttribute_Position);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA33F8], FigTTMLDocumentWriterMapPropertyToAttribute_ClipOverflow);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA34A0], FigTTMLDocumentWriterMapPropertyToAttribute_ShowBackground);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA3480], FigTTMLDocumentWriterMapPropertyToAttribute_Opacity);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA3420], FigTTMLDocumentWriterMapPropertyToAttribute_ForcedDisplay);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA33E8], FigTTMLDocumentWriterMapPropertyToAttribute_BackgroundColor);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA34B8], FigTTMLDocumentWriterMapPropertyToAttribute_WritingMode);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA3408], FigTTMLDocumentWriterMapPropertyToAttribute_DisplayAlign);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA3430], FigTTMLDocumentWriterMapPropertyToAttribute_Hidden);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA3470], FigTTMLDocumentWriterMapPropertyToAttribute_Invisible);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA3488], FigTTMLDocumentWriterMapPropertyToAttribute_Padding);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA34C0], FigTTMLDocumentWriterMapPropertyToAttribute_ZIndex);
  sExplicitRegionPropertyToAttributeMap = (uint64_t)Mutable;
  v3 = CFDictionaryCreateMutable(v0, 0, v1, 0);
  CFDictionarySetValue(v3, (const void *)*MEMORY[0x1E0CA3410], FigTTMLDocumentWriterMapPropertyToAttribute_DisplayAspectRatio);
  CFDictionarySetValue(v3, (const void *)*MEMORY[0x1E0CA33D0], FigTTMLDocumentWriterMapPropertyToAttribute_ActiveArea);
  CFDictionarySetValue(v3, (const void *)*MEMORY[0x1E0CA33F0], FigTTMLDocumentWriterMapPropertyToAttribute_CellResolution);
  sRootContainerRegionPropertyToAttributeMap = (uint64_t)v3;
}

uint64_t copyRootContainerRegion(uint64_t a1, uint64_t a2)
{
  uint64_t CMBaseObject;
  void (*v4)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, const void **);
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  CFTypeRef v12;
  const void *v14;
  CFTypeRef v15;
  CFTypeRef cf;

  v15 = 0;
  cf = 0;
  CMBaseObject = FigCaptionDataGetCMBaseObject();
  v4 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v4 || (v5 = *MEMORY[0x1E0C9AE00], v4(CMBaseObject, *MEMORY[0x1E0CA3340], *MEMORY[0x1E0C9AE00], &v15), !v15))
  {
LABEL_15:
    v12 = 0;
    if (!a2)
      goto LABEL_17;
    goto LABEL_16;
  }
  v6 = *MEMORY[0x1E0CA3400];
  v7 = *MEMORY[0x1E0CA3418];
  while (1)
  {
    v14 = 0;
    v8 = FigCaptionRegionGetCMBaseObject();
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
    if (v9)
      v9(v8, v6, v5, &v14);
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    v10 = FigCaptionRegionGetCMBaseObject();
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v11)
      v11(v10, v7, v5, &cf);
    if (!v14 && !FigCFEqual())
      break;
    if (v15)
      CFRelease(v15);
    v15 = v14;
    if (!v14)
      goto LABEL_15;
  }
  v12 = v15;
  v15 = 0;
  if (a2)
  {
LABEL_16:
    *(_QWORD *)a2 = v12;
    a2 = 2;
    v12 = 0;
  }
LABEL_17:
  if (cf)
    CFRelease(cf);
  if (v12)
    CFRelease(v12);
  return a2;
}

void mapAndAddRootContainerRegionAttribute(const void *a1, uint64_t a2)
{
  uint64_t CMBaseObject;
  uint64_t (*v5)(uint64_t, const void *, _QWORD, CFTypeRef *);
  const __CFAllocator *v6;
  int v7;
  CFTypeRef v8;
  BOOL v9;
  uint64_t (*Value)(CFTypeRef, const __CFDictionary *);
  uint64_t (*v11)(CFTypeRef, const __CFDictionary *);
  const __CFDictionary *Mutable;
  CFTypeRef cf;

  cf = 0;
  if (!*(_DWORD *)(a2 + 16))
  {
    CMBaseObject = FigCaptionRegionGetCMBaseObject();
    v5 = *(uint64_t (**)(uint64_t, const void *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
    if (v5)
    {
      v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v7 = v5(CMBaseObject, a1, *MEMORY[0x1E0C9AE00], &cf);
      v8 = cf;
      if (v7)
        v9 = 1;
      else
        v9 = cf == 0;
      if (v9)
      {
        if (!v7)
        {
LABEL_15:
          if (v8)
            CFRelease(v8);
          return;
        }
        Mutable = 0;
      }
      else
      {
        MEMORY[0x19402F294](&initRegionPropertyToAttributeMapOnce, initRegionPropertyToAttributeMap);
        Value = (uint64_t (*)(CFTypeRef, const __CFDictionary *))CFDictionaryGetValue((CFDictionaryRef)sRootContainerRegionPropertyToAttributeMap, a1);
        if (!Value)
          goto LABEL_14;
        v11 = Value;
        Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v7 = v11(cf, Mutable);
        if (!v7)
        {
          CFDictionaryApplyFunction(Mutable, (CFDictionaryApplierFunction)setAttributeToElement, *(void **)(a2 + 8));
          if (!Mutable)
            goto LABEL_14;
          goto LABEL_13;
        }
      }
    }
    else
    {
      Mutable = 0;
      v7 = -12782;
    }
    *(_DWORD *)(a2 + 16) = v7;
    if (Mutable)
LABEL_13:
      CFRelease(Mutable);
LABEL_14:
    v8 = cf;
    goto LABEL_15;
  }
}

void setAttributeToElement(const void *a1, const void *a2, uint64_t a3)
{
  FigTTMLDocumentWriterElementSetAttribute(a3, a1, a2);
}

uint64_t CreatePropertyStore(const void *a1, const void *a2, const void *a3, const void *a4, const void *a5, NSObject *a6, NSObject *a7, uint64_t a8, const void *a9, _QWORD *a10)
{
  const __CFAllocator *v17;
  uint64_t Instance;
  _QWORD *v19;
  const __CFArray *v20;
  CFIndex Count;
  CFMutableDictionaryRef Mutable;
  CFMutableArrayRef v23;
  uint64_t v24;
  uint64_t v26;

  v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (AssetPropertyStoreGetTypeID_sRegisterAssetPropertyStoreTypeOnce != -1)
    dispatch_once_f(&AssetPropertyStoreGetTypeID_sRegisterAssetPropertyStoreTypeOnce, &AssetPropertyStoreGetTypeID_sAssetPropertyStoreID, (dispatch_function_t)RegisterAssetPropertyStoreType);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v19 = (_QWORD *)Instance;
  v20 = (const __CFArray *)CFRetain(a1);
  v19[7] = v20;
  Count = CFArrayGetCount(v20);
  Mutable = CFDictionaryCreateMutable(v17, Count, MEMORY[0x1E0C9B390], 0);
  v19[8] = Mutable;
  if (Mutable
    && (v23 = CFArrayCreateMutable(v17, 0, 0), (v19[10] = v23) != 0)
    && (v24 = FigDispatchQueueCreateWithPriority(), (v19[2] = v24) != 0))
  {
    v19[13] = a8;
    v19[14] = CFRetain(a9);
    v19[11] = a6;
    dispatch_retain(a6);
    v19[12] = a7;
    dispatch_retain(a7);
    v19[3] = CFRetain(a2);
    v19[4] = CFRetain(a3);
    v19[5] = CFRetain(a4);
    v19[6] = CFRetain(a5);
    *a10 = v19;
    return 0;
  }
  else
  {
    v26 = FigSignalErrorAt();
    CFRelease(v19);
    return v26;
  }
}

uint64_t InitializeProperty(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  _QWORD v6[2];
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v10 = a5;
  v11 = 0;
  v6[0] = a1;
  v6[1] = a2;
  v7 = a3;
  v8 = a4;
  v9 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), v6, (dispatch_function_t)PerformInitializeProperty);
  return v11;
}

const void *PerformInitializeProperty(uint64_t a1)
{
  const void *result;
  int v3;
  _QWORD *v4;
  CFTypeRef v5;
  _QWORD *v6;

  v6 = 0;
  result = (const void *)AccessPropertyInfo(*(const __CFArray ***)a1, *(const void **)(a1 + 8), (const void **)&v6);
  v3 = (int)result;
  if (!(_DWORD)result)
  {
    v4 = v6;
    *v6 = *(_QWORD *)(a1 + 16);
    v5 = *(CFTypeRef *)(a1 + 24);
    if (v5)
    {
      v5 = CFRetain(v5);
      v4 = v6;
    }
    v4[1] = v5;
    result = *(const void **)(a1 + 32);
    if (result)
    {
      result = CFRetain(result);
      v4 = v6;
    }
    v4[2] = result;
  }
  *(_DWORD *)(a1 + 40) = v3;
  return result;
}

uint64_t QueryProperty(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, _QWORD *a5, _QWORD *a6)
{
  CFTypeRef v10;
  CFTypeRef v11;
  uint64_t v12;
  _QWORD v14[2];
  CFTypeRef cf[2];
  CFTypeRef v16[4];

  memset(v16, 0, sizeof(v16));
  v14[0] = a1;
  v14[1] = a2;
  *(_OWORD *)cf = 0u;
  LOBYTE(v16[1]) = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), v14, (dispatch_function_t)PerformQueryProperty);
  if (a3)
    *a3 = cf[0];
  if (a4)
    *a4 = HIDWORD(cf[0]);
  if (a5)
  {
    v10 = cf[1];
    if (cf[1])
      v10 = CFRetain(cf[1]);
    *a5 = v10;
  }
  if (a6)
  {
    v11 = v16[0];
    if (v16[0])
      v11 = CFRetain(v16[0]);
    *a6 = v11;
  }
  v12 = HIDWORD(v16[1]);
  TearDownFetchPropertyContext(v14);
  return v12;
}

const void *PerformQueryProperty(uint64_t a1)
{
  const void *result;
  int v3;
  _DWORD *v4;
  CFTypeRef v5;
  _DWORD *v6;

  v6 = 0;
  result = (const void *)AccessPropertyInfo(*(const __CFArray ***)a1, *(const void **)(a1 + 8), (const void **)&v6);
  v3 = (int)result;
  if (!(_DWORD)result)
  {
    v4 = v6;
    *(_DWORD *)(a1 + 20) = v6[1];
    v5 = (CFTypeRef)*((_QWORD *)v4 + 1);
    if (v5)
    {
      v5 = CFRetain(v5);
      v4 = v6;
    }
    *(_QWORD *)(a1 + 24) = v5;
    *(_DWORD *)(a1 + 16) = *v4;
    result = (const void *)*((_QWORD *)v4 + 2);
    if (result)
    {
      result = CFRetain(result);
      v4 = v6;
    }
    *(_QWORD *)(a1 + 32) = result;
    *(_BYTE *)(a1 + 40) = *((_BYTE *)v4 + 32);
  }
  *(_DWORD *)(a1 + 44) = v3;
  return result;
}

void TearDownFetchPropertyContext(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  NSObject *v4;

  v2 = (const void *)a1[3];
  if (v2)
  {
    CFRelease(v2);
    a1[3] = 0;
  }
  v3 = (const void *)a1[4];
  if (v3)
  {
    CFRelease(v3);
    a1[4] = 0;
  }
  v4 = a1[6];
  if (v4)
  {
    dispatch_release(v4);
    a1[6] = 0;
  }
}

uint64_t PropertyStoreSetComplainForSyncQueries(uint64_t result, char a2)
{
  *(_BYTE *)(result + 136) = a2;
  return result;
}

uint64_t PropertyStoreGetComplainForSyncQueries(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 136);
}

uint64_t ObtainPropertySync(uint64_t a1, uint64_t a2, _QWORD *a3, CFStringRef *a4)
{
  uint64_t v8;
  int v9;
  CFTypeRef v10;
  _QWORD context[2];
  __int128 v13;
  CFTypeRef cf[2];
  dispatch_group_t group[2];

  *(_OWORD *)cf = 0u;
  context[0] = a1;
  context[1] = a2;
  group[0] = 0;
  v13 = 0u;
  LOBYTE(cf[1]) = 0;
  group[1] = (dispatch_group_t)1;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), context, (dispatch_function_t)PerformObtainProperty);
  v8 = HIDWORD(cf[1]);
  if (!HIDWORD(cf[1]))
  {
    v9 = v13;
    if ((_DWORD)v13 == 1)
    {
      if (a4 && *(_BYTE *)(a1 + 136))
        *a4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("Main thread blocked by synchronous property query on not-yet-loaded property (%@) for HTTP(S) asset. This could have been a problem if this asset were being read from a slow network."), a2);
      dispatch_group_wait(group[0], 0xFFFFFFFFFFFFFFFFLL);
      dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), context, (dispatch_function_t)PerformQueryProperty);
      if (HIDWORD(cf[1]))
      {
        v8 = 0;
        goto LABEL_12;
      }
      v9 = v13;
    }
    v8 = DWORD1(v13);
    if (v9 == 2)
    {
      v10 = cf[0];
      if (cf[0])
        v10 = CFRetain(cf[0]);
      *a3 = v10;
    }
  }
LABEL_12:
  TearDownFetchPropertyContext(context);
  return v8;
}

uint64_t PerformObtainProperty(uint64_t a1)
{
  uint64_t result;
  _DWORD *v3;
  const void *v4;
  const __CFArray **v5;
  const __CFArray *Value;
  NSObject *v7;
  _QWORD *v8;
  _BYTE *v9;
  NSObject *v10;
  CFTypeRef v11;
  const void *v12;
  CFTypeRef v13;
  _BYTE *v14;
  uint64_t v15[3];
  uint64_t v16;
  uint64_t v17;

  v14 = 0;
  result = AccessPropertyInfo(*(const __CFArray ***)a1, *(const void **)(a1 + 8), (const void **)&v14);
  if ((_DWORD)result)
    goto LABEL_20;
  v3 = v14;
  if (v14[32])
  {
    if (*(_DWORD *)(a1 + 56) == 1)
    {
      result = 4294951201;
      goto LABEL_20;
    }
    if (*(_DWORD *)v14)
      goto LABEL_11;
    v5 = *(const __CFArray ***)a1;
    v4 = *(const void **)(a1 + 8);
    v15[2] = 0;
    v16 = 0;
    v17 = 0;
    Value = (const __CFArray *)CFDictionaryGetValue(v5[15], v4);
    if (CFArrayGetCount(Value))
    {
      *v3 = 1;
      v16 = 0;
      v15[0] = (uint64_t)v5;
      v15[1] = (uint64_t)Value;
      PerformMultiplePropertyRequest(v15);
      goto LABEL_11;
    }
    v3 = v14;
  }
  else if (*(_DWORD *)v14)
  {
    goto LABEL_11;
  }
  *v3 = 1;
  v7 = dispatch_group_create();
  *((_QWORD *)v14 + 3) = v7;
  dispatch_group_enter(v7);
  v8 = malloc_type_calloc(1uLL, 0x38uLL, 0x10E0040CC7F86E7uLL);
  *v8 = CFRetain(*(CFTypeRef *)a1);
  v8[1] = CFRetain(*(CFTypeRef *)(a1 + 8));
  v8[5] = CFRetain(*(CFTypeRef *)(*(_QWORD *)a1 + 112));
  *((_BYTE *)v8 + 48) = v14[32];
  dispatch_group_async_f(*(dispatch_group_t *)(*(_QWORD *)a1 + 96), *(dispatch_queue_t *)(*(_QWORD *)a1 + 88), v8, *(dispatch_function_t *)(*(_QWORD *)a1 + 104));
LABEL_11:
  v9 = v14;
  if (*(_DWORD *)v14 == 1 && *(_DWORD *)(a1 + 56) == 1)
  {
    v10 = *((_QWORD *)v14 + 3);
    *(_QWORD *)(a1 + 48) = v10;
    dispatch_retain(v10);
    v9 = v14;
  }
  *(_DWORD *)(a1 + 20) = *((_DWORD *)v9 + 1);
  v11 = (CFTypeRef)*((_QWORD *)v9 + 1);
  if (v11)
  {
    v11 = CFRetain(v11);
    v9 = v14;
  }
  *(_QWORD *)(a1 + 24) = v11;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)v9;
  v12 = (const void *)*((_QWORD *)v9 + 2);
  if (v12)
  {
    v13 = CFRetain(v12);
    v9 = v14;
  }
  else
  {
    v13 = 0;
  }
  result = 0;
  *(_QWORD *)(a1 + 32) = v13;
  *(_BYTE *)(a1 + 40) = v9[32];
LABEL_20:
  *(_DWORD *)(a1 + 44) = result;
  return result;
}

uint64_t RequestPropertyAsync(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4;
  _QWORD v6[2];
  __int128 v7;
  _BYTE v8[20];
  uint64_t v9;
  int v10;

  memset(v8, 0, sizeof(v8));
  v10 = 0;
  v6[0] = a1;
  v6[1] = a2;
  v7 = 0u;
  v8[8] = 0;
  v9 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), v6, (dispatch_function_t)PerformObtainProperty);
  v4 = *(unsigned int *)&v8[12];
  if (!*(_DWORD *)&v8[12])
    *a3 = v7;
  TearDownFetchPropertyContext(v6);
  return v4;
}

uint64_t NewPropertyStoreBatchID()
{
  return FigAtomicIncrement32();
}

uint64_t RequestPropertiesAsync(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4)
{
  uint64_t result;
  _QWORD context[2];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a4;
  v9 = 0;
  context[1] = a2;
  v7 = 0;
  context[0] = a1;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), context, (dispatch_function_t)PerformMultiplePropertyRequest);
  result = v9;
  if (a3)
  {
    if (!(_DWORD)v9)
      *a3 = v7;
  }
  return result;
}

void PerformMultiplePropertyRequest(uint64_t *a1)
{
  uint64_t Count;
  CFMutableSetRef Mutable;
  int v4;
  CFIndex v5;
  char v6;
  const void *ValueAtIndex;
  uint64_t v8;
  _DWORD *v9;
  const void *v10;
  _QWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  Count = CFArrayGetCount((CFArrayRef)a1[1]);
  if (a1[3])
  {
    Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B3B0]);
    if (!Mutable)
    {
      v4 = FigSignalErrorAt();
      goto LABEL_21;
    }
  }
  else
  {
    Mutable = 0;
  }
  if (Count < 1)
  {
    v6 = 1;
    if (Mutable)
    {
LABEL_15:
      if (a1[3] && CFSetGetCount(Mutable))
      {
        *(_DWORD *)a1[3] = FigAtomicIncrement32();
        v9 = malloc_type_calloc(1uLL, 0x10uLL, 0x1020040D5A9D86FuLL);
        if (!v9)
        {
          v4 = FigSignalErrorAt();
          goto LABEL_20;
        }
        v10 = v9;
        *v9 = *(_DWORD *)a1[3];
        *((_QWORD *)v9 + 1) = CFRetain(Mutable);
        CFArrayAppendValue(*(CFMutableArrayRef *)(*a1 + 80), v10);
      }
    }
LABEL_19:
    v4 = 0;
    *((_BYTE *)a1 + 16) = v6;
    if (!Mutable)
      goto LABEL_21;
LABEL_20:
    CFRelease(Mutable);
    goto LABEL_21;
  }
  v5 = 0;
  v6 = 1;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a1[1], v5);
    v8 = *a1;
    v18 = 0;
    v15 = 0;
    v11[0] = v8;
    v11[1] = ValueAtIndex;
    v13 = 0;
    v14 = 0;
    v12 = 0;
    v16 = 0;
    v17 = 0;
    PerformObtainProperty(v11);
    v4 = v16;
    if ((_DWORD)v16)
      break;
    if ((v12 & 0xFFFFFFFE) != 2)
    {
      v6 = 0;
      if (Mutable)
      {
        CFSetAddValue(Mutable, ValueAtIndex);
        v6 = 0;
      }
    }
    TearDownFetchPropertyContext(v11);
    if (Count == ++v5)
    {
      if (Mutable)
        goto LABEL_15;
      goto LABEL_19;
    }
  }
  TearDownFetchPropertyContext(v11);
  if (Mutable)
    goto LABEL_20;
LABEL_21:
  *((_DWORD *)a1 + 8) = v4;
}

void NotifyCompletedBatch(uint64_t a1, int a2)
{
  const __CFAllocator *v2;
  CFDictionaryRef v3;
  CFTypeRef cf;
  int valuePtr;

  valuePtr = a2;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  cf = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  v3 = CFDictionaryCreate(v2, (const void **)kFigAssetPayloadKey_BatchID, &cf, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (v3)
    CFRelease(v3);
  if (cf)
    CFRelease(cf);
}

void ReviseProperty(dispatch_queue_t *a1, const void *a2, const void *a3)
{
  _QWORD *v6;
  _QWORD *v7;

  v6 = malloc_type_calloc(1uLL, 0x28uLL, 0x10E0040D8CEB3B9uLL);
  if (v6)
  {
    v7 = v6;
    *v6 = CFRetain(a1);
    v7[1] = a2;
    if (a2)
      CFRetain(a2);
    v7[4] = a3;
    if (a3)
      CFRetain(a3);
    dispatch_async_f(a1[2], v7, (dispatch_function_t)PerformReviseProperty);
  }
}

void PerformReviseProperty(uint64_t a1)
{
  CFTypeRef *v2;
  const void *v3;
  const void *v4;
  CFDictionaryRef v5;
  const void *v6;
  _QWORD *v7;

  v7 = 0;
  v2 = (CFTypeRef *)(a1 + 8);
  if (!AccessPropertyInfo(*(const __CFArray ***)a1, *(const void **)(a1 + 8), (const void **)&v7)
    && *(_DWORD *)v7 == 2)
  {
    v3 = (const void *)v7[2];
    v4 = *(const void **)(a1 + 32);
    v7[2] = v4;
    if (v4)
      CFRetain(v4);
    if (v3)
      CFRelease(v3);
    v5 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)kFigAssetPayloadKey_Property, (const void **)(a1 + 8), 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    CFRelease(v5);
  }
  if (*v2)
    CFRelease(*v2);
  v6 = *(const void **)(a1 + 32);
  if (v6)
    CFRelease(v6);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  free((void *)a1);
}

void ReportCompletedPropertyJob(void *context)
{
  dispatch_async_f(*(dispatch_queue_t *)(*(_QWORD *)context + 16), context, (dispatch_function_t)PerformJobCompletion);
}

void PerformJobCompletion(void *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  if (!*((_BYTE *)a1 + 49))
    StoreProperty(*(const __CFArray ***)a1, *((void **)a1 + 1), *((_DWORD *)a1 + 4), *((const void **)a1 + 4), *((const void **)a1 + 3));
  v2 = (const void *)*((_QWORD *)a1 + 1);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)a1 + 3);
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)a1 + 4);
  if (v4)
    CFRelease(v4);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v5 = (const void *)*((_QWORD *)a1 + 5);
  if (v5)
    CFRelease(v5);
  free(a1);
}

void StoreByProduct(dispatch_queue_t *a1, const void *a2, int a3, const void *a4, const void *a5)
{
  _QWORD *v10;
  _QWORD *v11;

  v10 = malloc_type_calloc(1uLL, 0x28uLL, 0x10E0040D8CEB3B9uLL);
  if (v10)
  {
    v11 = v10;
    *v10 = CFRetain(a1);
    v11[1] = a2;
    if (a2)
      CFRetain(a2);
    if (a3)
    {
      v11[3] = a4;
      if (a4)
        CFRetain(a4);
    }
    *((_DWORD *)v11 + 4) = a3;
    v11[4] = a5;
    if (a5)
      CFRetain(a5);
    dispatch_async_f(a1[2], v11, (dispatch_function_t)PerformStoreByProduct);
  }
}

void PerformStoreByProduct(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  StoreProperty(*(const __CFArray ***)a1, *(void **)(a1 + 8), *(_DWORD *)(a1 + 16), *(const void **)(a1 + 24), *(const void **)(a1 + 32));
  v2 = *(const void **)(a1 + 24);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 8);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 32);
  if (v4)
    CFRelease(v4);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  free((void *)a1);
}

uint64_t DefineMacroProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[3];
  uint64_t v5;

  v4[0] = a1;
  v4[1] = a2;
  v4[2] = a3;
  v5 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), v4, (dispatch_function_t)PerformDefineMacroProperty);
  return v5;
}

void PerformDefineMacroProperty(const void **a1)
{
  const __CFDictionary *v2;
  int v3;
  int v4;
  __CFDictionary *Mutable;
  const __CFArray **v6;
  void *v7;
  const __CFArray *v8;
  uint64_t Count;
  __CFSet *v10;
  CFIndex v11;
  const __CFAllocator *v12;
  const CFSetCallBacks *v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  __CFArray *v17;
  CFTypeRef v18;
  int v19;
  int v20;
  _BYTE *v21;
  _BYTE *v22;
  const __CFArray **v23;
  void *value[2];
  CFTypeRef cf[2];
  __int128 v26;
  uint64_t v27;

  v2 = (const __CFDictionary *)*((_QWORD *)*a1 + 15);
  if (v2)
  {
    if (CFDictionaryContainsKey(v2, a1[1]))
    {
LABEL_3:
      v3 = FigSignalErrorAt();
LABEL_4:
      v4 = v3;
      goto LABEL_36;
    }
    Mutable = (__CFDictionary *)*((_QWORD *)*a1 + 15);
  }
  else
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *((_QWORD *)*a1 + 15) = Mutable;
  }
  CFDictionarySetValue(Mutable, a1[1], a1[2]);
  v6 = (const __CFArray **)*a1;
  v7 = (void *)a1[1];
  v8 = (const __CFArray *)a1[2];
  v27 = 0;
  v26 = 0u;
  *(_OWORD *)cf = 0u;
  *(_OWORD *)value = 0u;
  v22 = 0;
  Count = CFArrayGetCount(v8);
  v23 = v6;
  if (Count < 1)
  {
    v3 = AccessPropertyInfo(v6, v7, (const void **)&v22);
    if (!v3)
    {
LABEL_23:
      if (Count)
        StoreProperty(v6, v7, 0, 0, 0);
      v10 = 0;
      goto LABEL_26;
    }
    goto LABEL_4;
  }
  v10 = 0;
  v11 = 0;
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v13 = (const CFSetCallBacks *)MEMORY[0x1E0C9B3B0];
  do
  {
    value[0] = (void *)CFArrayGetValueAtIndex(v8, v11);
    PerformQueryProperty((uint64_t)&v23);
    v4 = DWORD1(v26);
    if (DWORD1(v26))
      goto LABEL_41;
    if (LODWORD(value[1]) != 2)
    {
      if (LODWORD(value[1]) != 3)
      {
        if (!v10)
        {
          v10 = CFSetCreateMutable(v12, Count, v13);
          if (!v10)
            goto LABEL_3;
        }
        CFSetAddValue(v10, value[0]);
        goto LABEL_15;
      }
      v19 = HIDWORD(value[1]);
      if (cf[0])
      {
        v18 = CFRetain(cf[0]);
        if (!v10)
        {
LABEL_30:
          TearDownFetchPropertyContext(&v23);
          v20 = AccessPropertyInfo(v6, v7, (const void **)&v22);
          if (!v20)
          {
            StoreProperty(v6, v7, v19, v18, 0);
            v10 = 0;
            goto LABEL_32;
          }
          v4 = v20;
          goto LABEL_34;
        }
      }
      else
      {
        v18 = 0;
        if (!v10)
          goto LABEL_30;
      }
      CFRelease(v10);
      goto LABEL_30;
    }
LABEL_15:
    TearDownFetchPropertyContext(&v23);
    ++v11;
  }
  while (Count != v11);
  v14 = AccessPropertyInfo(v6, v7, (const void **)&v22);
  if (v14)
  {
    v4 = v14;
LABEL_41:
    v18 = 0;
    if (v10)
      goto LABEL_33;
  }
  else
  {
    if (!v10)
      goto LABEL_23;
    v15 = malloc_type_calloc(1uLL, 0x10uLL, 0x600405C6656D0uLL);
    if (!v15)
    {
      v4 = FigSignalErrorAt();
      v18 = 0;
      goto LABEL_33;
    }
    v16 = v15;
    *v15 = CFRetain(v7);
    v16[1] = CFRetain(v10);
    v17 = v6[16];
    if (!v17)
    {
      v17 = CFArrayCreateMutable(v12, 0, 0);
      v6[16] = v17;
    }
    CFArrayAppendValue(v17, v16);
LABEL_26:
    v18 = 0;
LABEL_32:
    v4 = 0;
    v21 = v22;
    v22[32] = 1;
    *((_QWORD *)v21 + 2) = 0;
    if (v10)
LABEL_33:
      CFRelease(v10);
  }
LABEL_34:
  if (v18)
    CFRelease(v18);
LABEL_36:
  *((_DWORD *)a1 + 6) = v4;
}

uint64_t CreateValidationStore(const void *a1, NSObject *a2, NSObject *a3, uint64_t a4, const void *a5, _QWORD *a6)
{
  const __CFAllocator *v12;
  uint64_t Instance;
  _QWORD *v14;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v16;
  dispatch_queue_t v17;
  CFTypeRef v18;
  uint64_t v20;

  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (AssetValidationStoreGetTypeID_sRegisterAssetValidationStoreTypeOnce != -1)
    dispatch_once_f(&AssetValidationStoreGetTypeID_sRegisterAssetValidationStoreTypeOnce, &AssetValidationStoreGetTypeID_sAssetValidationStoreID, (dispatch_function_t)RegisterAssetValidationStoreType);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v14 = (_QWORD *)Instance;
  Mutable = CFDictionaryCreateMutable(v12, 0, MEMORY[0x1E0C9B390], 0);
  v14[4] = Mutable;
  if (Mutable
    && (v16 = CFDictionaryCreateMutable(v12, 0, MEMORY[0x1E0C9B390], 0), (v14[5] = v16) != 0)
    && (v17 = dispatch_queue_create("AssetValidationStoreQueue", 0), (v14[2] = v17) != 0))
  {
    v14[8] = a4;
    v14[9] = CFRetain(a5);
    v14[6] = a2;
    dispatch_retain(a2);
    v14[7] = a3;
    dispatch_retain(a3);
    if (a1)
      v18 = CFRetain(a1);
    else
      v18 = 0;
    v14[3] = v18;
    *a6 = v14;
    return 0;
  }
  else
  {
    v20 = FigSignalErrorAt();
    CFRelease(v14);
    return v20;
  }
}

uint64_t RequestValidationAsync(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _DWORD *a5)
{
  uint64_t result;
  _QWORD context[3];
  uint64_t v9;
  uint64_t v10;

  context[0] = a1;
  context[1] = a2;
  v9 = 0;
  v10 = 0;
  context[2] = a3;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), context, (dispatch_function_t)PerformRequestValidation);
  result = HIDWORD(v10);
  if (!HIDWORD(v10))
  {
    *a4 = v9;
    if (a5)
      *a5 = v10;
  }
  return result;
}

void PerformRequestValidation(uint64_t a1)
{
  int v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  CFTypeRef v6;
  CFTypeRef v7;
  _QWORD *v8;

  v8 = 0;
  v2 = AccessValidationInfo(*(_QWORD *)a1, *(CFTypeRef *)(a1 + 8), *(const void **)(a1 + 16), (const void **)&v8);
  if (!v2)
  {
    v3 = v8;
    v4 = *v8;
    if (!*v8)
    {
      *v8 = 1;
      v5 = malloc_type_calloc(1uLL, 0x28uLL, 0x10E004058B5FA3BuLL);
      *v5 = CFRetain(*(CFTypeRef *)a1);
      v6 = *(CFTypeRef *)(a1 + 8);
      if (v6)
        v6 = CFRetain(v6);
      v5[1] = v6;
      v7 = *(CFTypeRef *)(a1 + 16);
      if (v7)
        v7 = CFRetain(v7);
      v5[2] = v7;
      v5[4] = CFRetain(*(CFTypeRef *)(*(_QWORD *)a1 + 72));
      dispatch_group_async_f(*(dispatch_group_t *)(*(_QWORD *)a1 + 56), *(dispatch_queue_t *)(*(_QWORD *)a1 + 48), v5, *(dispatch_function_t *)(*(_QWORD *)a1 + 64));
      v3 = v8;
      v4 = *v8;
    }
    *(_DWORD *)(a1 + 32) = *((_DWORD *)v3 + 2);
    *(_QWORD *)(a1 + 24) = v4;
  }
  *(_DWORD *)(a1 + 36) = v2;
}

void ReportCompletedValidationJob(void *context)
{
  dispatch_async_f(*(dispatch_queue_t *)(*(_QWORD *)context + 16), context, (dispatch_function_t)PerformValidationJobCompletion);
}

void PerformValidationJobCompletion(uint64_t a1)
{
  int v2;
  uint64_t *v3;
  CFIndex v4;
  uint64_t v5;
  const __CFAllocator *v6;
  CFNumberRef v7;
  uint64_t v8;
  CFDictionaryRef v9;
  const void *v10;
  const void *v11;
  const void *v12;
  uint64_t *v13;
  void *values;
  CFNumberRef v15;
  uint64_t v16;
  void *keys;
  const __CFString *v18;
  const __CFString *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v13 = 0;
  values = 0;
  keys = 0;
  v18 = 0;
  v19 = 0;
  v15 = 0;
  v16 = 0;
  if (!AccessValidationInfo(*(_QWORD *)a1, *(CFTypeRef *)(a1 + 8), *(const void **)(a1 + 16), (const void **)&v13))
  {
    v2 = *(_DWORD *)(a1 + 24);
    v3 = v13;
    v4 = 2;
    if (v2)
      v5 = 3;
    else
      v5 = 2;
    *v13 = v5;
    *((_DWORD *)v3 + 2) = v2;
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, v3 + 1);
    keys = CFSTR("assetPayload_ValidationCriteria");
    v18 = CFSTR("assetPayload_Result");
    v8 = *(_QWORD *)(a1 + 16);
    values = *(void **)(a1 + 8);
    v15 = v7;
    if (v8)
    {
      v19 = CFSTR("assetPayload_CustomPlist");
      v16 = v8;
      v4 = 3;
    }
    v9 = CFDictionaryCreate(v6, (const void **)&keys, (const void **)&values, v4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    CFRelease(v9);
    CFRelease(v7);
  }
  v10 = *(const void **)(a1 + 8);
  if (v10)
    CFRelease(v10);
  v11 = *(const void **)(a1 + 16);
  if (v11)
    CFRelease(v11);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v12 = *(const void **)(a1 + 32);
  if (v12)
    CFRelease(v12);
  free((void *)a1);
}

uint64_t RegisterAssetPropertyStoreType(uint64_t *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

double AssetPropertyStore_Init(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

void AssetPropertyStore_Finalize(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  const __CFDictionary *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const __CFArray *v14;
  CFIndex Count;
  CFIndex v16;
  CFIndex i;
  void *ValueAtIndex;
  void *v19;
  const void *v20;
  const void *v21;
  const __CFArray *v22;
  CFIndex v23;
  CFIndex v24;
  CFIndex j;
  CFTypeRef *v26;
  CFTypeRef *v27;
  CFTypeRef v28;
  const void *v29;

  v2 = *(NSObject **)(a1 + 88);
  if (v2)
  {
    dispatch_release(v2);
    *(_QWORD *)(a1 + 88) = 0;
  }
  v3 = *(NSObject **)(a1 + 96);
  if (v3)
  {
    dispatch_release(v3);
    *(_QWORD *)(a1 + 96) = 0;
  }
  v4 = *(NSObject **)(a1 + 16);
  if (v4)
  {
    dispatch_release(v4);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v5 = *(const __CFDictionary **)(a1 + 64);
  if (v5)
  {
    CFDictionaryApplyFunction(v5, (CFDictionaryApplierFunction)PerPropertyInfoDisposalApplierFunction, 0);
    v6 = *(const void **)(a1 + 64);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(a1 + 64) = 0;
    }
  }
  v7 = *(const void **)(a1 + 120);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 120) = 0;
  }
  v8 = *(const void **)(a1 + 56);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a1 + 56) = 0;
  }
  v9 = *(const void **)(a1 + 24);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v10 = *(const void **)(a1 + 32);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v11 = *(const void **)(a1 + 40);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(a1 + 40) = 0;
  }
  v12 = *(const void **)(a1 + 48);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(a1 + 48) = 0;
  }
  v13 = *(const void **)(a1 + 112);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(a1 + 112) = 0;
  }
  v14 = *(const __CFArray **)(a1 + 80);
  if (v14)
  {
    Count = CFArrayGetCount(v14);
    if (Count >= 1)
    {
      v16 = Count;
      for (i = 0; i != v16; ++i)
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), i);
        if (ValueAtIndex)
        {
          v19 = ValueAtIndex;
          v20 = (const void *)*((_QWORD *)ValueAtIndex + 1);
          if (v20)
            CFRelease(v20);
          free(v19);
        }
      }
    }
    v21 = *(const void **)(a1 + 80);
    if (v21)
    {
      CFRelease(v21);
      *(_QWORD *)(a1 + 80) = 0;
    }
  }
  v22 = *(const __CFArray **)(a1 + 128);
  if (v22)
  {
    v23 = CFArrayGetCount(v22);
    if (v23 >= 1)
    {
      v24 = v23;
      for (j = 0; j != v24; ++j)
      {
        v26 = (CFTypeRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 128), j);
        if (v26)
        {
          v27 = v26;
          v28 = v26[1];
          if (v28)
          {
            CFRelease(v28);
            v27[1] = 0;
          }
          if (*v27)
            CFRelease(*v27);
          free(v27);
        }
      }
    }
    v29 = *(const void **)(a1 + 128);
    if (v29)
    {
      CFRelease(v29);
      *(_QWORD *)(a1 + 128) = 0;
    }
  }
}

__CFString *AssetPropertyStore_CopyDebugDesc(_QWORD *a1)
{
  __CFString *Mutable;
  CFIndex v3;

  Mutable = CFStringCreateMutable(0, 0);
  v3 = CFGetRetainCount(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<AssetPropertyStore %p> RC %d WRC %p WG %p WQ %p"), a1, v3, a1[14], a1[12], a1[11]);
  return Mutable;
}

void PerPropertyInfoDisposalApplierFunction(int a1, _QWORD *a2)
{
  const void *v3;
  const void *v4;

  if (a2)
  {
    v3 = (const void *)a2[1];
    if (v3)
    {
      CFRelease(v3);
      a2[1] = 0;
    }
    v4 = (const void *)a2[2];
    if (v4)
      CFRelease(v4);
    free(a2);
  }
}

uint64_t AccessPropertyInfo(const __CFArray **a1, const void *a2, const void **a3)
{
  uint64_t result;
  const __CFArray *v7;
  void *v8;
  const void *v9;
  const __CFDictionary *v10;
  CFRange v11;

  if (CFDictionaryGetValueIfPresent(a1[8], a2, a3))
    return 0;
  v7 = a1[7];
  v11.length = CFArrayGetCount(v7);
  v11.location = 0;
  if (CFArrayContainsValue(v7, v11, a2) || (v10 = a1[15]) != 0 && CFDictionaryContainsKey(v10, a2))
  {
    v8 = malloc_type_calloc(1uLL, 0x28uLL, 0x10E00406F9AF8A3uLL);
    if (v8)
    {
      v9 = v8;
      CFDictionarySetValue(a1[8], a2, v8);
      result = 0;
      *a3 = v9;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  else
  {
    *a3 = 0;
    return 4294955124;
  }
  return result;
}

void StoreProperty(const __CFArray **a1, void *a2, int a3, const void *a4, const void *a5)
{
  char *v10;
  const void *v11;
  const __CFAllocator *v12;
  CFNumberRef v13;
  CFIndex v14;
  CFDictionaryRef v15;
  NSObject *v16;
  CFIndex Count;
  CFIndex v18;
  CFIndex i;
  CFSetRef *ValueAtIndex;
  int v21;
  CFSetRef v22;
  const __CFArray *v23;
  char *v24;
  CFIndex v25;
  CFIndex v26;
  CFIndex v27;
  __CFArray *Mutable;
  const CFArrayCallBacks *v29;
  void *v30;
  __CFSet *v31;
  const void *v32;
  CFIndex v33;
  CFIndex v34;
  CFIndex j;
  const void *v36;
  char *v37;
  void *values;
  CFNumberRef v39;
  const void *v40;
  void *keys;
  const __CFString *v42;
  const __CFString *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v37 = 0;
  values = 0;
  keys = 0;
  v42 = 0;
  v43 = 0;
  v39 = 0;
  v40 = 0;
  if (!AccessPropertyInfo(a1, a2, (const void **)&v37))
  {
    v10 = v37;
    if (*(_DWORD *)v37 <= 1u)
    {
      *((_DWORD *)v37 + 1) = a3;
      if (a3)
      {
        *(_DWORD *)v10 = 3;
        v11 = (const void *)*((_QWORD *)v10 + 1);
        *((_QWORD *)v10 + 1) = a4;
        if (a4)
          CFRetain(a4);
        if (v11)
          CFRelease(v11);
        v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, v37 + 4);
        keys = CFSTR("assetPayload_Property");
        v42 = CFSTR("assetPayload_Result");
        values = a2;
        v39 = v13;
        if (a4)
        {
          v43 = CFSTR("assetPayload_CFError");
          v40 = a4;
          v14 = 3;
        }
        else
        {
          v14 = 2;
        }
        v15 = CFDictionaryCreate(v12, (const void **)&keys, (const void **)&values, v14, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        CFRelease(v15);
      }
      else
      {
        *(_DWORD *)v10 = 2;
        *((_QWORD *)v10 + 2) = a5;
        if (a5)
          CFRetain(a5);
        keys = CFSTR("assetPayload_Property");
        values = a2;
        v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v13 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
      }
      CFRelease(v13);
      v16 = *((_QWORD *)v37 + 3);
      if (v16)
      {
        dispatch_group_leave(v16);
        dispatch_release(*((dispatch_object_t *)v37 + 3));
        *((_QWORD *)v37 + 3) = 0;
      }
      Count = CFArrayGetCount(a1[10]);
      if (Count >= 1)
      {
        v18 = Count;
        for (i = 0; i < v18; ++i)
        {
          ValueAtIndex = (CFSetRef *)CFArrayGetValueAtIndex(a1[10], i);
          if (CFSetContainsValue(ValueAtIndex[1], a2))
          {
            CFSetRemoveValue(ValueAtIndex[1], a2);
            if (!CFSetGetCount(ValueAtIndex[1]))
            {
              v21 = *(_DWORD *)ValueAtIndex;
              CFArrayRemoveValueAtIndex(a1[10], i);
              v22 = ValueAtIndex[1];
              if (v22)
                CFRelease(v22);
              --v18;
              --i;
              free(ValueAtIndex);
              NotifyCompletedBatch((uint64_t)a1, v21);
            }
          }
        }
      }
      v23 = a1[16];
      if (v23)
      {
        v24 = v37;
        v25 = CFArrayGetCount(v23);
        if (v25 >= 1)
        {
          v26 = v25;
          v27 = 0;
          Mutable = 0;
          v29 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
          do
          {
            v30 = (void *)CFArrayGetValueAtIndex(a1[16], v27);
            if (CFSetContainsValue(*((CFSetRef *)v30 + 1), a2))
            {
              v31 = (__CFSet *)*((_QWORD *)v30 + 1);
              if (*(_DWORD *)v24 == 2)
                CFSetRemoveValue(v31, a2);
              else
                CFSetRemoveAllValues(v31);
              if (!CFSetGetCount(*((CFSetRef *)v30 + 1)))
              {
                if (!Mutable)
                  Mutable = CFArrayCreateMutable(v12, 0, v29);
                CFArrayAppendValue(Mutable, *(const void **)v30);
                CFArrayRemoveValueAtIndex(a1[16], v27);
                v32 = (const void *)*((_QWORD *)v30 + 1);
                if (v32)
                {
                  CFRelease(v32);
                  *((_QWORD *)v30 + 1) = 0;
                }
                if (*(_QWORD *)v30)
                  CFRelease(*(CFTypeRef *)v30);
                --v26;
                --v27;
                free(v30);
              }
            }
            ++v27;
          }
          while (v27 < v26);
          if (Mutable)
          {
            v33 = CFArrayGetCount(Mutable);
            if (v33)
            {
              v34 = v33;
              if (v33 >= 1)
              {
                for (j = 0; j != v34; ++j)
                {
                  v36 = CFArrayGetValueAtIndex(Mutable, j);
                  StoreProperty(a1, v36, *((unsigned int *)v24 + 1), *((_QWORD *)v24 + 1), 0);
                }
              }
              CFRelease(Mutable);
            }
          }
        }
      }
    }
  }
}

uint64_t RegisterAssetValidationStoreType(uint64_t *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

double AssetValidationStore_Init(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

void AssetValidationStore_Finalize(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  const __CFDictionary *v5;
  const void *v6;
  const __CFDictionary *v7;
  const void *v8;
  const void *v9;
  const void *v10;

  v2 = a1[6];
  if (v2)
  {
    dispatch_release(v2);
    a1[6] = 0;
  }
  v3 = a1[7];
  if (v3)
  {
    dispatch_release(v3);
    a1[7] = 0;
  }
  v4 = a1[2];
  if (v4)
  {
    dispatch_release(v4);
    a1[2] = 0;
  }
  v5 = (const __CFDictionary *)a1[4];
  if (v5)
  {
    CFDictionaryApplyFunction(v5, (CFDictionaryApplierFunction)PerValidationInfoDisposalApplierFunction, 0);
    v6 = (const void *)a1[4];
    if (v6)
    {
      CFRelease(v6);
      a1[4] = 0;
    }
  }
  v7 = (const __CFDictionary *)a1[5];
  if (v7)
  {
    CFDictionaryApplyFunction(v7, (CFDictionaryApplierFunction)PerValidationInfoDisposalApplierFunction, 0);
    v8 = (const void *)a1[5];
    if (v8)
    {
      CFRelease(v8);
      a1[5] = 0;
    }
  }
  v9 = (const void *)a1[3];
  if (v9)
  {
    CFRelease(v9);
    a1[3] = 0;
  }
  v10 = (const void *)a1[9];
  if (v10)
  {
    CFRelease(v10);
    a1[9] = 0;
  }
}

__CFString *AssetValidationStore_CopyDebugDesc(_QWORD *a1)
{
  __CFString *Mutable;
  CFIndex v3;

  Mutable = CFStringCreateMutable(0, 0);
  v3 = CFGetRetainCount(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<AssetValidationStore %p> RC %d WRC %p WG %p WQ %p"), a1, v3, a1[9], a1[7], a1[6]);
  return Mutable;
}

void PerValidationInfoDisposalApplierFunction(int a1, void *a2)
{
  if (a2)
    free(a2);
}

uint64_t AccessValidationInfo(uint64_t a1, CFTypeRef cf1, const void *a3, const void **a4)
{
  void *v8;
  const void *v9;
  void *v10;
  const void *v11;

  if (CFEqual(cf1, CFSTR("validationCriteria_Custom")))
  {
    if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 40), a3, a4))
      return 0;
    v8 = malloc_type_calloc(1uLL, 0x10uLL, 0x1000040D9A13B51uLL);
    if (v8)
    {
      v9 = v8;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), a3, v8);
      *a4 = v9;
      return 0;
    }
  }
  else
  {
    if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 32), cf1, a4))
      return 0;
    v10 = malloc_type_calloc(1uLL, 0x10uLL, 0x1000040D9A13B51uLL);
    if (v10)
    {
      v11 = v10;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), cf1, v10);
      *a4 = v11;
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigSampleBufferProcessorRestoreBufferedAirPlayStates(uint64_t a1, __int128 *a2, CMTime *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  CMTimeEpoch epoch;
  __int128 v9;
  uint64_t v10;
  const void *v11;
  const void *v12;
  const void *v13;
  CMTime v15;
  CMTime lhs;
  CMTime v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return 4294954511;
  if ((a3->flags & 0x1D) != 1)
    return 4294954516;
  v6 = DerivedStorage;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v9 = *a2;
    *(_QWORD *)(DerivedStorage + 84) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(DerivedStorage + 68) = v9;
    lhs = *a3;
    v15 = *(CMTime *)a2;
    CMTimeSubtract(&v17, &lhs, &v15);
    *(CMTime *)(v6 + 44) = v17;
  }
  else
  {
    v7 = MEMORY[0x1E0CA2E68];
    *(_OWORD *)(DerivedStorage + 44) = *MEMORY[0x1E0CA2E68];
    *(_QWORD *)(DerivedStorage + 60) = *(_QWORD *)(v7 + 16);
    epoch = a3->epoch;
    *(_OWORD *)(DerivedStorage + 68) = *(_OWORD *)&a3->value;
    *(_QWORD *)(DerivedStorage + 84) = epoch;
  }
  *(_BYTE *)(v6 + 40) = 1;
  *(_BYTE *)(v6 + 92) = 1;
  *(_BYTE *)(v6 + 120) = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(v6 + 168));
  v10 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)(v6 + 176) = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(v6 + 192) = *(_QWORD *)(v10 + 16);
  MEMORY[0x19402EF04](*(_QWORD *)(v6 + 168));
  v11 = *(const void **)(v6 + 136);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(v6 + 136) = 0;
  }
  v12 = *(const void **)(v6 + 128);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(v6 + 128) = 0;
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(v6 + 152));
  v13 = *(const void **)(v6 + 144);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(v6 + 144) = 0;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v6 + 152));
  return 0;
}

uint64_t FigSampleBufferProcessorForBufferedAirPlayCreate(const void *a1, const void *a2, const __CFDictionary *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t DerivedStorage;
  dispatch_queue_t v10;
  CFTypeRef v11;
  CFTypeRef v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  void *v23;
  __int128 v24;
  void *value;
  uint64_t v26;

  value = 0;
  v26 = 0;
  if (!a4)
    return FigSignalErrorAt();
  FigSampleBufferProcessorGetClassID();
  v8 = CMDerivedObjectCreate();
  if ((_DWORD)v8)
    return v8;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = dispatch_queue_create("com.apple.coremedia.FigSampleBufferProcessor_BufferedAirPlay.notificationqueue", 0);
  *(_QWORD *)(DerivedStorage + 344) = v10;
  if (!v10)
    return 4294954510;
  v11 = a2 ? CFRetain(a2) : 0;
  *(_QWORD *)(DerivedStorage + 24) = v11;
  v13 = a1 ? CFRetain(a1) : 0;
  *(_QWORD *)(DerivedStorage + 32) = v13;
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  v14 = FigNotificationCenterAddWeakListener();
  v15 = (__int128 *)MEMORY[0x1E0CA2E68];
  *(_BYTE *)(DerivedStorage + 40) = 1;
  v16 = *v15;
  *(_OWORD *)(DerivedStorage + 68) = *v15;
  v17 = *((_QWORD *)v15 + 2);
  *(_QWORD *)(DerivedStorage + 84) = v17;
  *(_OWORD *)(DerivedStorage + 44) = v16;
  *(_QWORD *)(DerivedStorage + 60) = v17;
  *(_BYTE *)(DerivedStorage + 120) = 0;
  *(_OWORD *)(DerivedStorage + 96) = v16;
  *(_QWORD *)(DerivedStorage + 112) = v17;
  *(_QWORD *)(DerivedStorage + 216) = v17;
  v24 = v16;
  *(_OWORD *)(DerivedStorage + 200) = v16;
  v18 = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 152) = v18;
  if (!v18)
    return 4294954510;
  v19 = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 168) = v19;
  if (!v19)
    return 4294954510;
  v20 = MEMORY[0x1E0CA2E18];
  v21 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)(DerivedStorage + 224) = *MEMORY[0x1E0CA2E18];
  v22 = *(_QWORD *)(v20 + 16);
  *(_QWORD *)(DerivedStorage + 240) = v22;
  *(_OWORD *)(DerivedStorage + 248) = v21;
  *(_QWORD *)(DerivedStorage + 264) = v22;
  *(_OWORD *)(DerivedStorage + 272) = v21;
  *(_QWORD *)(DerivedStorage + 288) = v22;
  *(_OWORD *)(DerivedStorage + 296) = v21;
  *(_QWORD *)(DerivedStorage + 312) = v22;
  *(_OWORD *)(DerivedStorage + 320) = v24;
  *(_QWORD *)(DerivedStorage + 336) = v17;
  *(_QWORD *)(DerivedStorage + 352) = 0;
  if (a3 && CFDictionaryGetValueIfPresent(a3, CFSTR("LoggingID"), (const void **)&value))
  {
    v23 = value;
    if (value)
      v23 = (void *)CFRetain(value);
    *(_QWORD *)(DerivedStorage + 352) = v23;
  }
  *a4 = v26;
  return v14;
}

_BYTE *fbarp_inhibitOutputUntil(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  _BYTE *result;
  _BYTE *v7;
  const void *Value;
  const void *v9;

  result = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (a5)
  {
    v7 = result;
    if (!*result)
    {
      Value = CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E0CA2748]);
      MEMORY[0x19402EEEC](*((_QWORD *)v7 + 19));
      v9 = (const void *)*((_QWORD *)v7 + 18);
      *((_QWORD *)v7 + 18) = Value;
      if (Value)
        CFRetain(Value);
      if (v9)
        CFRelease(v9);
      JUMPOUT(0x19402EF04);
    }
  }
  return result;
}

_BYTE *fbarp_resetOutput(uint64_t a1, const void *a2)
{
  _BYTE *result;
  _BYTE *v4;
  uint64_t v5;

  result = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    v4 = result;
    fbarp_postNotificationSync(a2, (uint64_t)CFSTR("ResetOutput"));
    MEMORY[0x19402EEEC](*((_QWORD *)v4 + 21));
    v5 = MEMORY[0x1E0CA2E68];
    *(_OWORD *)(v4 + 200) = *MEMORY[0x1E0CA2E68];
    *((_QWORD *)v4 + 27) = *(_QWORD *)(v5 + 16);
    JUMPOUT(0x19402EF04);
  }
  return result;
}

uint64_t FigSampleBufferProcessorForBufferedAirPlayCopyPerformanceDictionary(uint64_t a1, __CFDictionary **a2)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v4;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  CFDictionaryRef v7;
  CFDictionaryRef v8;
  CFDictionaryRef v9;
  CFDictionaryRef v10;
  CFDictionaryRef v11;
  CFDictionaryRef v12;
  CFDictionaryRef v13;
  CFDictionaryRef v14;
  CFDictionaryRef v15;
  CFDictionaryRef v16;
  uint64_t v17;
  CMTime v19;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 168));
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v6 = Mutable;
    v19 = *(CMTime *)(DerivedStorage + 224);
    v7 = CMTimeCopyAsDictionary(&v19, v4);
    if (!v7)
      goto LABEL_11;
    v8 = v7;
    CFDictionarySetValue(v6, CFSTR("FirstMediaSamplePts"), v7);
    CFRelease(v8);
    v19 = *(CMTime *)(DerivedStorage + 248);
    v9 = CMTimeCopyAsDictionary(&v19, v4);
    if (!v9)
      goto LABEL_11;
    v10 = v9;
    CFDictionarySetValue(v6, CFSTR("LastMediaSamplePts"), v9);
    CFRelease(v10);
    v19 = *(CMTime *)(DerivedStorage + 272);
    v11 = CMTimeCopyAsDictionary(&v19, v4);
    if (!v11)
      goto LABEL_11;
    v12 = v11;
    CFDictionarySetValue(v6, CFSTR("FirstContinuousSamplePts"), v11);
    CFRelease(v12);
    v19 = *(CMTime *)(DerivedStorage + 296);
    v13 = CMTimeCopyAsDictionary(&v19, v4);
    if (!v13
      || (v14 = v13,
          CFDictionarySetValue(v6, CFSTR("LastContinuousSamplePts"), v13),
          CFRelease(v14),
          v19 = *(CMTime *)(DerivedStorage + 320),
          (v15 = CMTimeCopyAsDictionary(&v19, v4)) == 0))
    {
LABEL_11:
      v17 = FigSignalErrorAt();
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 168));
      CFRelease(v6);
      return v17;
    }
    v16 = v15;
    CFDictionarySetValue(v6, CFSTR("DurationProcessed"), v15);
    CFRelease(v16);
    v17 = 0;
    if (a2)
      *a2 = v6;
  }
  else
  {
    v17 = FigSignalErrorAt();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 168));
  return v17;
}

uint64_t fbarpInvalidate()
{
  _BYTE *DerivedStorage;
  _BYTE *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  uint64_t v8;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v1 = DerivedStorage;
    if (!*DerivedStorage)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      if (*((_QWORD *)v1 + 19))
        MEMORY[0x19402EEEC]();
      v2 = (const void *)*((_QWORD *)v1 + 18);
      if (v2)
      {
        CFRelease(v2);
        *((_QWORD *)v1 + 18) = 0;
      }
      if (*((_QWORD *)v1 + 19))
        MEMORY[0x19402EF04]();
      v3 = (const void *)*((_QWORD *)v1 + 3);
      if (v3)
      {
        CFRelease(v3);
        *((_QWORD *)v1 + 3) = 0;
      }
      v4 = (const void *)*((_QWORD *)v1 + 4);
      if (v4)
      {
        CFRelease(v4);
        *((_QWORD *)v1 + 4) = 0;
      }
      v5 = (const void *)*((_QWORD *)v1 + 16);
      if (v5)
      {
        CFRelease(v5);
        *((_QWORD *)v1 + 16) = 0;
      }
      v6 = (const void *)*((_QWORD *)v1 + 17);
      if (v6)
      {
        CFRelease(v6);
        *((_QWORD *)v1 + 17) = 0;
      }
      v7 = (const void *)*((_QWORD *)v1 + 44);
      if (v7)
      {
        CFRelease(v7);
        *((_QWORD *)v1 + 44) = 0;
      }
      v1[160] = 0;
      *((_QWORD *)v1 + 1) = 0;
      *((_QWORD *)v1 + 2) = 0;
      MEMORY[0x19402EEEC](*((_QWORD *)v1 + 21));
      v8 = MEMORY[0x1E0CA2E18];
      *((_OWORD *)v1 + 11) = *MEMORY[0x1E0CA2E18];
      *((_QWORD *)v1 + 24) = *(_QWORD *)(v8 + 16);
      MEMORY[0x19402EF04](*((_QWORD *)v1 + 21));
      *v1 = 1;
    }
  }
  return 0;
}

void fbarpFinalize()
{
  uint64_t DerivedStorage;
  NSObject *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  fbarpInvalidate();
  if (*(_QWORD *)(DerivedStorage + 152))
  {
    FigSimpleMutexDestroy();
    *(_QWORD *)(DerivedStorage + 152) = 0;
  }
  FigSimpleMutexDestroy();
  v1 = *(NSObject **)(DerivedStorage + 344);
  if (v1)
  {
    dispatch_sync(v1, &__block_literal_global_78);
    dispatch_release(*(dispatch_object_t *)(DerivedStorage + 344));
    *(_QWORD *)(DerivedStorage + 344) = 0;
  }
}

__CFString *fbarpCopyDebugDesc(uint64_t a1)
{
  _BYTE *DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;
  const char *v6;
  CFAllocatorRef v7;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(DerivedStorage);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(DerivedStorage);
  if (*DerivedStorage)
    v6 = " (invalidated)";
  else
    v6 = "";
  v7 = CFGetAllocator(DerivedStorage);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigSampleBufferProcessor_BufferedAirPlay %p> retainCount: %d%s allocator: %p\n"), a1, v5, v6, v7);
  return Mutable;
}

uint64_t fbarpCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t result;
  const __CFDictionary *v9;
  const __CFDictionary *v10;
  const void *v11;
  CMTimeEpoch v12;
  CMTime v13;
  CMTime lhs;
  CMTime v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v15 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  result = 4294954516;
  if (a2 && a4)
  {
    if (*(_BYTE *)DerivedStorage)
      return FigSignalErrorAt();
    if (CFEqual(a2, CFSTR("CurrentOutputTime")))
    {
      lhs = *(CMTime *)(DerivedStorage + 68);
      v13 = *(CMTime *)(DerivedStorage + 44);
      CMTimeAdd(&v15, &lhs, &v13);
      lhs = v15;
      v9 = CMTimeCopyAsDictionary(&lhs, a3);
    }
    else
    {
      if (!CFEqual(a2, CFSTR("TransitionIDContext")))
      {
        if (CFEqual(a2, CFSTR("Last\x10InputSbufPresentationEndTime")))
        {
          MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 168));
          *(_OWORD *)&lhs.value = *(_OWORD *)(DerivedStorage + 176);
          v12 = *(_QWORD *)(DerivedStorage + 192);
        }
        else
        {
          if (!CFEqual(a2, CFSTR("ProcessedSingleSessionAudioDuration")))
            return 4294954512;
          MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 168));
          *(_OWORD *)&lhs.value = *(_OWORD *)(DerivedStorage + 200);
          v12 = *(_QWORD *)(DerivedStorage + 216);
        }
        lhs.epoch = v12;
        *a4 = CMTimeCopyAsDictionary(&lhs, a3);
        MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 168));
        return 0;
      }
      v11 = *(const void **)(DerivedStorage + 136);
      if (!v11)
      {
        v10 = 0;
        goto LABEL_7;
      }
      v9 = (const __CFDictionary *)CFRetain(v11);
    }
    v10 = v9;
LABEL_7:
    result = 0;
    *a4 = v10;
  }
  return result;
}

uint64_t fbarp_setOutputCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 8) = a2;
  *(_QWORD *)(DerivedStorage + 16) = a3;
  return 0;
}

uint64_t fbarp_processSampleBuffer(const void *a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage;
  __int128 v5;
  CMTimeEpoch v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Copy;
  uint64_t v10;
  const __CFDictionary *v11;
  opaqueCMSampleBuffer *v12;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  CMTimeFlags v15;
  CMTimeEpoch v16;
  uint64_t v17;
  CFTypeRef v18;
  const void *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  CFDictionaryRef v23;
  CFDictionaryRef v24;
  CFTypeRef v25;
  const void *MutableCopy;
  __CFDictionary *v27;
  _OWORD *v28;
  const void *v29;
  const void *v30;
  uint64_t v31;
  CFDictionaryRef v32;
  const __CFAllocator *v33;
  uint64_t v34;
  unsigned int v35;
  int32_t v36;
  uint64_t v37;
  __CFDictionary *v38;
  __CFDictionary *UInt32;
  __CFDictionary *v40;
  uint64_t v41;
  CMTimeFlags v42;
  CMTimeEpoch v43;
  CMTimeFlags v44;
  CMTimeEpoch v45;
  void (*v46)(_QWORD, _QWORD, opaqueCMSampleBuffer *);
  CFTypeRef v47;
  const void *v48;
  CMTimeEpoch v50;
  CMTimeEpoch v51;
  __int128 v52;
  CMTime v53;
  CMTime v54;
  CMTime time;
  CMTime v56;
  CMTime v57;
  CMTime time1;
  CMTime rhs;
  CMTime lhs;
  CMTime sampleBufferOut;
  CMTimeValue value;
  CMTimeScale timescale;
  CMTimeValue v64;
  CMTimeScale v65;
  CMTime v66;
  CMTime time2;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v64 = *MEMORY[0x1E0CA2E18];
  v65 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  v5 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)&v56.value = *MEMORY[0x1E0CA2E18];
  v6 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v56.epoch = v6;
  value = v64;
  timescale = v65;
  if (a2)
  {
    v7 = DerivedStorage;
    v52 = v5;
    v8 = CMBaseObjectGetDerivedStorage();
    sampleBufferOut.value = 0;
    Copy = CMSampleBufferCreateCopy(*(CFAllocatorRef *)(v8 + 24), a2, (CMSampleBufferRef *)&sampleBufferOut);
    if (sampleBufferOut.value)
    {
      v10 = Copy;
      v11 = CMCopyDictionaryOfAttachments(*(CFAllocatorRef *)(v8 + 24), a2, 0);
      if (v11)
        CMSetAttachments((CMAttachmentBearerRef)sampleBufferOut.value, v11, 0);
      if (sampleBufferOut.value)
      {
        v12 = (opaqueCMSampleBuffer *)CFRetain((CFTypeRef)sampleBufferOut.value);
        if (!v11)
        {
LABEL_10:
          if (sampleBufferOut.value)
            CFRelease((CFTypeRef)sampleBufferOut.value);
          if (!v12)
            return FigSignalErrorAt();
          v51 = v6;
          CMSampleBufferGetOutputDuration(&sampleBufferOut, v12);
          value = sampleBufferOut.value;
          flags = sampleBufferOut.flags;
          timescale = sampleBufferOut.timescale;
          epoch = sampleBufferOut.epoch;
          CMSampleBufferGetOutputPresentationTimeStamp(&sampleBufferOut, v12);
          v64 = sampleBufferOut.value;
          v15 = sampleBufferOut.flags;
          v65 = sampleBufferOut.timescale;
          v16 = sampleBufferOut.epoch;
          if ((sampleBufferOut.flags & 1) != 0)
          {
            MEMORY[0x19402EEEC](*(_QWORD *)(v7 + 168));
            lhs.value = v64;
            lhs.timescale = v65;
            lhs.flags = v15;
            lhs.epoch = v16;
            rhs.value = value;
            rhs.timescale = timescale;
            rhs.flags = flags;
            rhs.epoch = epoch;
            CMTimeAdd(&sampleBufferOut, &lhs, &rhs);
            *(CMTime *)(v7 + 176) = sampleBufferOut;
            MEMORY[0x19402EF04](*(_QWORD *)(v7 + 168));
          }
          v50 = epoch;
          v17 = CMBaseObjectGetDerivedStorage();
          MEMORY[0x19402EEEC](*(_QWORD *)(v17 + 152));
          if (*(_QWORD *)(v17 + 144))
          {
            v18 = CMGetAttachment(v12, (CFStringRef)*MEMORY[0x1E0CA26E0], 0);
            if (!FigCFEqual())
            {
              MEMORY[0x19402EF04](*(_QWORD *)(v17 + 152));
              goto LABEL_29;
            }
            v19 = *(const void **)(v17 + 144);
            if (v19)
            {
              CFRelease(v19);
              *(_QWORD *)(v17 + 144) = 0;
            }
            v20 = MEMORY[0x1E0CA2E68];
            v21 = *MEMORY[0x1E0CA2E68];
            *(_OWORD *)(v17 + 44) = *MEMORY[0x1E0CA2E68];
            v22 = *(_QWORD *)(v20 + 16);
            *(_QWORD *)(v17 + 60) = v22;
            *(_OWORD *)(v17 + 68) = v21;
            *(_QWORD *)(v17 + 84) = v22;
          }
          else
          {
            v18 = 0;
          }
          MEMORY[0x19402EF04](*(_QWORD *)(v17 + 152));
          if (CMGetAttachment(v12, (CFStringRef)*MEMORY[0x1E0CA4E88], 0) && !*(_BYTE *)(v7 + 160))
          {
            fbarp_postNotificationSync(a1, (uint64_t)CFSTR("IsGapTrack"));
            *(_BYTE *)(v7 + 160) = 1;
            if ((v15 & 1) == 0)
              goto LABEL_24;
          }
          else if ((v15 & 1) == 0)
          {
LABEL_24:
            if (v18)
            {
              v23 = 0;
              *(_BYTE *)(v7 + 40) = 1;
              goto LABEL_26;
            }
            v47 = CMGetAttachment(v12, (CFStringRef)*MEMORY[0x1E0CA2718], 0);
            if (v47)
            {
              *(_BYTE *)(v7 + 120) = 1;
              *(_QWORD *)(v7 + 128) = v47;
              CFRetain(v47);
              sampleBufferOut = *(CMTime *)(v7 + 44);
              lhs = *(CMTime *)(v7 + 68);
              CMTimeAdd(&time, &sampleBufferOut, &lhs);
              v23 = CMTimeCopyAsDictionary(&time, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
              CMSetAttachment(v12, CFSTR("TransitionIDOutputPresentationTimeStamp"), v23, 0);
              if (!(_DWORD)v10)
                goto LABEL_49;
              goto LABEL_83;
            }
            if (CMGetAttachment(v12, (CFStringRef)*MEMORY[0x1E0CA2658], 0))
            {
              v23 = 0;
              *(_BYTE *)(v7 + 92) = 1;
              if (!(_DWORD)v10)
                goto LABEL_49;
              goto LABEL_83;
            }
            if (CMGetAttachment(v12, (CFStringRef)*MEMORY[0x1E0CA4E50], 0))
            {
              v23 = 0;
LABEL_26:
              *(_BYTE *)(v7 + 92) = 0;
              if (!(_DWORD)v10)
                goto LABEL_49;
LABEL_83:
              v32 = 0;
LABEL_84:
              CFRelease(v12);
              if (v23)
                CFRelease(v23);
              if (!v32)
                return v10;
              v24 = v32;
              goto LABEL_88;
            }
            CMGetAttachment(v12, (CFStringRef)*MEMORY[0x1E0CA26D8], 0);
            goto LABEL_82;
          }
          v25 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
          CMSetAttachment(v12, CFSTR("BufferedAirPlayIsOriginalContent"), (CFTypeRef)*MEMORY[0x1E0C9AE50], 0);
          if (v18 || *(_BYTE *)(v7 + 40))
          {
            MutableCopy = (const void *)FigCFDictionaryCreateMutableCopy();
            sampleBufferOut.value = v64;
            sampleBufferOut.timescale = v65;
            sampleBufferOut.flags = v15;
            sampleBufferOut.epoch = v16;
            FigCFDictionarySetCMTime();
            *(_BYTE *)(v7 + 40) = 0;
            fbarp_postNotification(a1, (uint64_t)CFSTR("ResumeOutputSbufFound"), MutableCopy);
            if (MutableCopy)
              CFRelease(MutableCopy);
          }
          if (*(_BYTE *)(v7 + 120))
          {
            v27 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
            v28 = (_OWORD *)(v7 + 68);
            sampleBufferOut.value = v64;
            sampleBufferOut.timescale = v65;
            sampleBufferOut.flags = v15;
            sampleBufferOut.epoch = v16;
            lhs = *(CMTime *)(v7 + 68);
            if (CMTimeCompare(&sampleBufferOut, &lhs))
            {
              lhs = *(CMTime *)(v7 + 44);
              *(_OWORD *)&rhs.value = *v28;
              rhs.epoch = *(_QWORD *)(v7 + 84);
              CMTimeAdd(&sampleBufferOut, &lhs, &rhs);
              *(CMTime *)(v7 + 44) = sampleBufferOut;
            }
            CFDictionarySetValue(v27, CFSTR("TransitionID"), *(const void **)(v7 + 128));
            *(_OWORD *)&sampleBufferOut.value = *v28;
            sampleBufferOut.epoch = *(_QWORD *)(v7 + 84);
            FigCFDictionarySetCMTime();
            sampleBufferOut.value = v64;
            sampleBufferOut.timescale = v65;
            sampleBufferOut.flags = v15;
            sampleBufferOut.epoch = v16;
            FigCFDictionarySetCMTime();
            sampleBufferOut.value = v64;
            sampleBufferOut.timescale = v65;
            sampleBufferOut.flags = v15;
            sampleBufferOut.epoch = v16;
            lhs = *(CMTime *)(v7 + 44);
            CMTimeAdd(&v54, &sampleBufferOut, &lhs);
            FigCFDictionarySetCMTime();
            v29 = *(const void **)(v7 + 136);
            *(_QWORD *)(v7 + 136) = v27;
            if (v27)
              CFRetain(v27);
            if (v29)
              CFRelease(v29);
            CMNotificationCenterGetDefaultLocalCenter();
            CMNotificationCenterPostNotification();
            if (v27)
              CFRelease(v27);
            v30 = *(const void **)(v7 + 128);
            if (v30)
            {
              CFRelease(v30);
              *(_QWORD *)(v7 + 128) = 0;
            }
            *(_BYTE *)(v7 + 120) = 0;
            *(_BYTE *)(v7 + 92) = 0;
          }
          sampleBufferOut.value = v64;
          sampleBufferOut.timescale = v65;
          sampleBufferOut.flags = v15;
          sampleBufferOut.epoch = v16;
          lhs = *(CMTime *)(v7 + 44);
          CMTimeAdd(&v56, &sampleBufferOut, &lhs);
          sampleBufferOut = v56;
          v31 = CMSampleBufferSetOutputPresentationTimeStamp(v12, &sampleBufferOut);
          if (!(_DWORD)v31)
          {
            v23 = 0;
            if (CMGetAttachment(v12, (CFStringRef)*MEMORY[0x1E0CA2688], 0) != v25)
              goto LABEL_49;
            v48 = (const void *)FigCFDictionaryCreateMutableCopy();
            memset(&sampleBufferOut, 0, sizeof(sampleBufferOut));
            lhs = v56;
            rhs.value = value;
            rhs.timescale = timescale;
            rhs.flags = flags;
            rhs.epoch = v50;
            CMTimeAdd(&sampleBufferOut, &lhs, &rhs);
            if (v48)
            {
              lhs = sampleBufferOut;
              FigCFDictionarySetCMTime();
              fbarp_postNotification(a1, (uint64_t)CFSTR("EndOfSiriTTSUtteranceFound"), v48);
              CFRelease(v48);
              v10 = 0;
            }
            else
            {
              v10 = FigSignalErrorAt();
            }
LABEL_82:
            v23 = 0;
            if ((_DWORD)v10)
              goto LABEL_83;
LABEL_49:
            if (*(_BYTE *)(v7 + 92))
            {
              v32 = 0;
            }
            else
            {
              CMSampleBufferGetOutputDuration(&sampleBufferOut, v12);
              v32 = 0;
              value = sampleBufferOut.value;
              timescale = sampleBufferOut.timescale;
              if ((v15 & 1) != 0 && (sampleBufferOut.flags & 1) != 0)
              {
                lhs.value = v64;
                lhs.timescale = v65;
                lhs.flags = v15;
                lhs.epoch = v16;
                rhs.value = value;
                rhs.timescale = timescale;
                rhs.flags = sampleBufferOut.flags;
                rhs.epoch = sampleBufferOut.epoch;
                CMTimeAdd(&sampleBufferOut, &lhs, &rhs);
                *(CMTime *)(v7 + 68) = sampleBufferOut;
                v33 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
                sampleBufferOut.value = v64;
                sampleBufferOut.timescale = v65;
                sampleBufferOut.flags = v15;
                sampleBufferOut.epoch = v16;
                v32 = CMTimeCopyAsDictionary(&sampleBufferOut, v33);
                CMSetAttachment(v12, CFSTR("MediaPresentationTimeStamp"), v32, 0);
              }
            }
            v34 = CMBaseObjectGetDerivedStorage();
            memset(&sampleBufferOut, 0, sizeof(sampleBufferOut));
            lhs = *(CMTime *)(v34 + 68);
            rhs = *(CMTime *)(v34 + 44);
            CMTimeAdd(&sampleBufferOut, &lhs, &rhs);
            memset(&lhs, 0, sizeof(lhs));
            CMTimeMake(&rhs, 5, 1);
            time1 = *(CMTime *)(v34 + 44);
            CMTimeAdd(&lhs, &time1, &rhs);
            if (fbarp_printProcessSampleBufferDebugInfoAndAttachTracer_onceToken != -1)
              dispatch_once(&fbarp_printProcessSampleBufferDebugInfoAndAttachTracer_onceToken, &__block_literal_global_53_0);
            if ((*(_BYTE *)(v34 + 236) & 1) != 0)
            {
              time1 = sampleBufferOut;
              time2 = lhs;
              v35 = CMTimeCompare(&time1, &time2) >> 31;
            }
            else
            {
              LOBYTE(v35) = 1;
            }
            time1 = *(CMTime *)(v34 + 96);
            time2 = sampleBufferOut;
            v36 = CMTimeCompare(&time1, &time2);
            CMSampleBufferGetOutputPresentationTimeStamp(&time1, v12);
            if (v36 < 0
              || (v35 & 1) != 0
              || (time1.flags & 1) == 0
              || fbarp_printProcessSampleBufferDebugInfoAndAttachTracer_sTraceAllSbuf)
            {
              random();
              v37 = FigCFDictionaryCreateMutableCopy();
              if (v37)
              {
                v38 = (__CFDictionary *)v37;
                UInt32 = (__CFDictionary *)FigCFNumberCreateUInt32();
                if (UInt32)
                {
                  v40 = UInt32;
                  CFDictionarySetValue(v38, CFSTR("SbufTracerOption_UniqueID"), UInt32);
                  CFDictionarySetValue(v38, CFSTR("SbufTracerOption_SourceID"), *(const void **)(v34 + 352));
                  CMSetAttachment(v12, CFSTR("SbufTracer"), v38, 0);
                  CMTimeMake(&v66, 200, 1000);
                  v57 = sampleBufferOut;
                  CMTimeAdd(&time2, &v57, &v66);
                  *(CMTime *)(v34 + 96) = time2;
                  CFRelease(v38);
                  v38 = v40;
                }
                CFRelease(v38);
              }
            }
            v41 = CMBaseObjectGetDerivedStorage();
            *(_OWORD *)&sampleBufferOut.value = v52;
            sampleBufferOut.epoch = v51;
            CMSampleBufferGetPresentationTimeStamp(&lhs, v12);
            time2.value = lhs.value;
            v42 = lhs.flags;
            time2.timescale = lhs.timescale;
            v43 = lhs.epoch;
            CMSampleBufferGetDuration(&lhs, v12);
            v66.value = lhs.value;
            v44 = lhs.flags;
            v66.timescale = lhs.timescale;
            v45 = lhs.epoch;
            lhs = *(CMTime *)(v41 + 44);
            rhs.value = time2.value;
            rhs.timescale = time2.timescale;
            rhs.flags = v42;
            rhs.epoch = v43;
            CMTimeAdd(&sampleBufferOut, &lhs, &rhs);
            if ((v42 & 1) != 0 && (v44 & 1) != 0)
            {
              MEMORY[0x19402EEEC](*(_QWORD *)(v41 + 168));
              if ((*(_BYTE *)(v41 + 236) & 1) == 0)
              {
                *(_QWORD *)(v41 + 224) = time2.value;
                *(_DWORD *)(v41 + 232) = time2.timescale;
                *(_DWORD *)(v41 + 236) = v42;
                *(_QWORD *)(v41 + 240) = v43;
              }
              rhs.value = time2.value;
              rhs.timescale = time2.timescale;
              rhs.flags = v42;
              rhs.epoch = v43;
              time1.value = v66.value;
              time1.timescale = v66.timescale;
              time1.flags = v44;
              time1.epoch = v45;
              CMTimeAdd(&lhs, &rhs, &time1);
              *(CMTime *)(v41 + 248) = lhs;
              if ((*(_BYTE *)(v41 + 284) & 1) == 0)
                *(CMTime *)(v41 + 272) = sampleBufferOut;
              rhs = sampleBufferOut;
              time1.value = v66.value;
              time1.timescale = v66.timescale;
              time1.flags = v44;
              time1.epoch = v45;
              CMTimeAdd(&lhs, &rhs, &time1);
              *(CMTime *)(v41 + 296) = lhs;
              rhs = *(CMTime *)(v41 + 320);
              time1.value = v66.value;
              time1.timescale = v66.timescale;
              time1.flags = v44;
              time1.epoch = v45;
              CMTimeAdd(&lhs, &rhs, &time1);
              *(CMTime *)(v41 + 320) = lhs;
              MEMORY[0x19402EF04](*(_QWORD *)(v41 + 168));
            }
            v46 = *(void (**)(_QWORD, _QWORD, opaqueCMSampleBuffer *))(v7 + 8);
            if (v46)
              v46(*(_QWORD *)(v7 + 16), 0, v12);
            MEMORY[0x19402EEEC](*(_QWORD *)(v7 + 168));
            CMSampleBufferGetOutputDuration(&v53, v12);
            lhs = *(CMTime *)(v7 + 200);
            CMTimeAdd(&sampleBufferOut, &lhs, &v53);
            *(CMTime *)(v7 + 200) = sampleBufferOut;
            MEMORY[0x19402EF04](*(_QWORD *)(v7 + 168));
            v10 = 0;
            goto LABEL_84;
          }
          v10 = v31;
LABEL_29:
          v24 = v12;
LABEL_88:
          CFRelease(v24);
          return v10;
        }
      }
      else
      {
        v12 = 0;
        if (!v11)
          goto LABEL_10;
      }
      CFRelease(v11);
      goto LABEL_10;
    }
    v10 = FigSignalErrorAt();
    v12 = 0;
    goto LABEL_10;
  }
  return FigSignalErrorAt();
}

uint64_t fbarp_finishPendingProcessing()
{
  return 0;
}

void fbarp_postNotificationSync(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  NSObject *v5;
  _QWORD block[7];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  v5 = *(NSObject **)(DerivedStorage + 344);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __fbarp_postNotificationSync_block_invoke;
  block[3] = &__block_descriptor_tmp_49;
  block[4] = a2;
  block[5] = a1;
  block[6] = 0;
  dispatch_sync(v5, block);
}

void fbarp_postNotification(const void *a1, uint64_t a2, const void *a3)
{
  uint64_t DerivedStorage;
  NSObject *v7;
  _QWORD block[7];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3)
    CFRetain(a3);
  CFRetain(a1);
  v7 = *(NSObject **)(DerivedStorage + 344);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __fbarp_postNotification_block_invoke;
  block[3] = &__block_descriptor_tmp_51_0;
  block[4] = a2;
  block[5] = a1;
  block[6] = a3;
  dispatch_async(v7, block);
}

void __fbarp_postNotificationSync_block_invoke(uint64_t a1)
{
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  fbarp_releaseAsync(*(_QWORD *)(a1 + 40));
}

void fbarp_releaseAsync(uint64_t a1)
{
  NSObject *global_queue;
  _QWORD block[5];

  global_queue = dispatch_get_global_queue(0, 0);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __fbarp_releaseAsync_block_invoke;
  block[3] = &__block_descriptor_tmp_50;
  block[4] = a1;
  dispatch_async(global_queue, block);
}

void __fbarp_releaseAsync_block_invoke(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void __fbarp_postNotification_block_invoke(uint64_t a1)
{
  const void *v2;

  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  v2 = *(const void **)(a1 + 48);
  if (v2)
    CFRelease(v2);
  fbarp_releaseAsync(*(_QWORD *)(a1 + 40));
}

uint64_t __fbarp_printProcessSampleBufferDebugInfoAndAttachTracer_block_invoke()
{
  uint64_t result;

  result = FigGetCFPreferenceNumberWithDefault();
  fbarp_printProcessSampleBufferDebugInfoAndAttachTracer_sTraceAllSbuf = result;
  return result;
}

uint64_t FigCaptionRendererActionCreate(_QWORD *a1)
{
  uint64_t v2;

  *a1 = 0;
  MEMORY[0x19402F294](&FigCaptionRendererActionGetClassID_sRegisterFigCaptionRendererActionBaseTypeOnce, RegisterFigCaptionRendererActionBaseType);
  v2 = CMDerivedObjectCreate();
  if (!(_DWORD)v2)
  {
    *(_DWORD *)CMBaseObjectGetDerivedStorage() = 0;
    *a1 = 0;
  }
  return v2;
}

uint64_t FigCaptionRendererMoveToActionCreate(_QWORD *a1)
{
  uint64_t v2;
  uint64_t DerivedStorage;
  uint64_t v4;

  *a1 = 0;
  MEMORY[0x19402F294](&FigCaptionRendererMoveToActionGetClassID_sRegisterFigCaptionRendererMoveToActionBaseTypeOnce, RegisterFigCaptionRendererMoveToActionBaseType);
  v2 = CMDerivedObjectCreate();
  if ((_DWORD)v2)
    return v2;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)(DerivedStorage + 8) = *MEMORY[0x1E0C9D538];
  v4 = FigCaptionRendererActionCreate((_QWORD *)DerivedStorage);
  if ((_DWORD)v4)
    FigSignalErrorAt();
  else
    *a1 = 0;
  return v4;
}

__CFString *FigCaptionRendererActionCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererAction: <%p>"), a1);
  return Mutable;
}

__CFString *FigCaptionRendererAction_FigCaptionRendererActionProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererAction <FigCaptionRendererActionProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCaptionRendererAction_FigCaptionRendererActionProtocol_GetDuration(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)CMBaseObjectGetDerivedStorage();
  return 0;
}

uint64_t FigCaptionRendererAction_FigCaptionRendererActionProtocol_SetDuration(uint64_t a1, int a2)
{
  *(_DWORD *)CMBaseObjectGetDerivedStorage() = a2;
  return 0;
}

uint64_t RegisterFigCaptionRendererActionBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFTypeRef FigCaptionRendererActionBaseCopyFormattingDesc()
{
  return CFRetain(CFSTR("[FigCaptionRendererAction]"));
}

void FigCaptionRendererMoveToActionFinalize()
{
  const void *v0;

  v0 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v0)
    CFRelease(v0);
}

__CFString *FigCaptionRendererMoveToActionCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererMoveToAction: <%p>"), a1);
  return Mutable;
}

__CFString *FigCaptionRendererMoveToAction_FigCaptionRendererBaseProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererMoveToAction <FigCaptionRendererBaseProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCaptionRendererMoveToAction_FigCaptionRendererBaseProtocol_GetClassName(uint64_t a1, _QWORD *a2)
{
  *a2 = "FigCaptionRendererMoveToAction";
  return 0;
}

__CFString *FigCaptionRendererMoveToAction_FigCaptionRendererActionProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererMoveToAction <FigCaptionRendererActionProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCaptionRendererMoveToAction_FigCaptionRendererActionProtocol_GetDuration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererActionProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererMoveToAction_FigCaptionRendererActionProtocol_SetDuration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererActionProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

__CFString *FigCaptionRendererMoveToAction_FigCaptionRendererMoveToActionProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererMoveToAction <FigCaptionRendererMoveToActionProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCaptionRendererMoveToAction_FigCaptionRendererMoveToActionProtocol_GetTargetPosition(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  return 0;
}

uint64_t FigCaptionRendererMoveToAction_FigCaptionRendererMoveToActionProtocol_SetTargetPosition(double a1, double a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 8) = a1;
  *(double *)(DerivedStorage + 16) = a2;
  return 0;
}

uint64_t RegisterFigCaptionRendererMoveToActionBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFTypeRef FigCaptionRendererMoveToActionBaseCopyFormattingDesc()
{
  return CFRetain(CFSTR("[FigCaptionRendererMoveToAction]"));
}

uint64_t FigCaptionClientGetTypeID()
{
  MEMORY[0x19402F294](&sRegisterFigCaptionClientTypeOnce, RegisterFigCaptionClientType);
  return sFigCaptionClientID;
}

uint64_t RegisterFigCaptionClientType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigCaptionClientID = result;
  return result;
}

uint64_t FigCaptionClientCreate(uint64_t a1, uint64_t *a2)
{
  uint64_t Instance;
  uint64_t v4;
  uint64_t result;

  if (!a2)
    return FigSignalErrorAt();
  MEMORY[0x19402F294](&sRegisterFigCaptionClientTypeOnce, RegisterFigCaptionClientType);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v4 = Instance;
    result = FigCaptionRendererSessionCreate(0, 0, 0, (uint64_t *)(Instance + 16));
    if (!(_DWORD)result)
      *a2 = v4;
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
  return result;
}

NSObject *FigCaptionClientSetCGContextDevice(NSObject *result, double a2, double a3, double a4, double a5, uint64_t a6, int a7, int a8)
{
  if (result)
    return FigCaptionRendererSessionSetCGContextDevice(result[2].isa, 0, a7, a8, a2, a3, a4, a5);
  return result;
}

NSObject *FigCaptionClientSetMasterClock(NSObject *result)
{
  NSObject *isa;
  CMClockRef HostTimeClock;

  if (result)
  {
    isa = result[2].isa;
    HostTimeClock = CMClockGetHostTimeClock();
    return FigCaptionRendererSessionSetMasterClock(isa, (uint64_t)HostTimeClock);
  }
  return result;
}

uint64_t FigCaptionClientSynchronizeDefaults(uint64_t result)
{
  if (result)
    return FigCaptionRendererSessionSynchronizeDefaults(*(dispatch_queue_t **)(result + 16));
  return result;
}

uint64_t FigCaptionClientSetBounds(uint64_t result)
{
  if (result)
    return FigCaptionRendererSessionSetBounds(*(_QWORD *)(result + 16));
  return result;
}

NSObject *FigCaptionClientSetCaptionCacheRange(NSObject *result, uint64_t a2, uint64_t a3)
{
  if (result)
    return FigCaptionRendererSessionSetCaptionCacheRange(result[2].isa, a2, a3);
  return result;
}

NSObject *FigCaptionClientStart(NSObject *result)
{
  if (result)
    return FigCaptionRendererSessionStart(result[2].isa);
  return result;
}

uint64_t FigCaptionClientStop(uint64_t result)
{
  if (result)
    return FigCaptionRendererSessionStop(*(_QWORD *)(result + 16));
  return result;
}

NSObject *FigCaptionClientSetTime(NSObject *result, uint64_t a2)
{
  NSObject *isa;
  __int128 v3;
  uint64_t v4;

  if (result)
  {
    isa = result[2].isa;
    v3 = *(_OWORD *)a2;
    v4 = *(_QWORD *)(a2 + 16);
    return FigCaptionRendererSessionSetTime(isa, &v3);
  }
  return result;
}

uint64_t FigCaptionClientUpdateCGContext(uint64_t result, uint64_t a2)
{
  if (result)
    return FigCaptionRendererSessionUpdateCGContext(*(_QWORD *)(result + 16), a2);
  return result;
}

NSObject *FigCaptionClientSetCaptionArray(NSObject *result, uint64_t a2)
{
  if (result)
    return FigCaptionRendererSessionSetCaptionArray(result[2].isa, a2);
  return result;
}

uint64_t FigCaptionClientSetDefaultTextStyle(uint64_t a1, const void *a2)
{
  if (a1)
    FigCaptionRendererSessionSetDefaultTextStyle(*(dispatch_queue_t **)(a1 + 16), a2);
  return 0;
}

uint64_t fcc_Init(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

void fcc_Finalize(uint64_t a1)
{
  const void *v2;

  if (a1)
    FigCaptionRendererSessionStop(*(_QWORD *)(a1 + 16));
  v2 = *(const void **)(a1 + 16);
  if (v2)
    CFRelease(v2);
}

CFStringRef fcc_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigCaptionClient %p]"), a1);
}

CFStringRef fcc_CopyDebugDesc(uint64_t a1)
{
  return CFCopyDescription(*(CFTypeRef *)(a1 + 16));
}

uint64_t FVDUtilsCanMirrorDisplayWithID(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  double v5;
  double v6;
  BOOL v7;
  uint64_t v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (FVDUtilsCanMirrorDisplayWithID_once != -1)
    dispatch_once(&FVDUtilsCanMirrorDisplayWithID_once, &__block_literal_global_79);
  if (a1 < 2)
    return 1;
  v2 = (void *)MEMORY[0x19403137C]();
  v3 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CD28E0], "serverIfRunning"), "displayWithDisplayId:", a1);
  if (!v3
    || (v4 = v3, !FVDUtilsCanMirrorDisplayWithID_allowFVDSource) && objc_msgSend(v3, "displayType") == 2
    || ((objc_msgSend(v4, "bounds"), v6 == *MEMORY[0x1E0C9D820])
      ? (v7 = v5 == *(double *)(MEMORY[0x1E0C9D820] + 8))
      : (v7 = 0),
        v7 || objc_msgSend(v4, "cloneMaster")))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v8 = 0;
  }
  else
  {
    v8 = 1;
  }
  objc_autoreleasePoolPop(v2);
  return v8;
}

uint64_t FVDUtilsH264EncoderSupports444()
{
  if (FVDUtilsH264EncoderSupports444_once != -1)
    dispatch_once(&FVDUtilsH264EncoderSupports444_once, &__block_literal_global_4_0);
  return FVDUtilsH264EncoderSupports444_result;
}

uint64_t FVDUtilsH264DecoderSupports444()
{
  if (FVDUtilsH264DecoderSupports444_once != -1)
    dispatch_once(&FVDUtilsH264DecoderSupports444_once, &__block_literal_global_10_2);
  return FVDUtilsH264DecoderSupports444_result;
}

uint64_t FVDUtilsH264EncoderSupports1080p60()
{
  return 1;
}

uint64_t FVDUtilsH264EncoderSupportsBGRA()
{
  return 0;
}

uint64_t FVDUtilsH264EncoderSupportsScaling()
{
  return 0;
}

uint64_t FVDUtilsH264EncoderSupports4K30()
{
  if (FVDUtilsH264EncoderSupports4K30_once != -1)
    dispatch_once(&FVDUtilsH264EncoderSupports4K30_once, &__block_literal_global_12_0);
  return FVDUtilsH264EncoderSupports4K30_result;
}

uint64_t FVDUtilsHEVCEncoderSupports4K60()
{
  if (FVDUtilsHEVCEncoderSupports4K60_once != -1)
    dispatch_once(&FVDUtilsHEVCEncoderSupports4K60_once, &__block_literal_global_14_0);
  return FVDUtilsHEVCEncoderSupports4K60_result;
}

uint64_t FVDUtilsHEVCEncoderSupports42010()
{
  if (FVDUtilsHEVCEncoderSupports4K60_once != -1)
    dispatch_once(&FVDUtilsHEVCEncoderSupports4K60_once, &__block_literal_global_14_0);
  return FVDUtilsHEVCEncoderSupports4K60_result;
}

uint64_t FVDUtilsHEVCEncoderSupports44410()
{
  if (FVDUtilsHEVCEncoderSupports4K60_once != -1)
    dispatch_once(&FVDUtilsHEVCEncoderSupports4K60_once, &__block_literal_global_14_0);
  return FVDUtilsHEVCEncoderSupports4K60_result;
}

uint64_t FVDUtilsHEVCDecodeSupported()
{
  if (FVDUtilsHEVCDecodeSupported_once != -1)
    dispatch_once(&FVDUtilsHEVCDecodeSupported_once, &__block_literal_global_16_0);
  return FVDUtilsHEVCDecodeSupported_result;
}

uint64_t FVDUtilsAGXPixelFormatsSupported()
{
  if (FVDUtilsAGXPixelFormatsSupported_once != -1)
    dispatch_once(&FVDUtilsAGXPixelFormatsSupported_once, &__block_literal_global_18_1);
  return FVDUtilsAGXPixelFormatsSupported_result;
}

uint64_t FVDUtilsMainDisplaySupportsExtendedColor()
{
  if (FVDUtilsMainDisplaySupportsExtendedColor_once != -1)
    dispatch_once(&FVDUtilsMainDisplaySupportsExtendedColor_once, &__block_literal_global_19);
  return FVDUtilsMainDisplaySupportsExtendedColor_result;
}

uint64_t FVDUtilsEncoderCodecSupported(int a1)
{
  __CFDictionary *Mutable;
  BOOL v3;
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  uint64_t v7;
  CFArrayRef listOfVideoEncodersOut;

  listOfVideoEncodersOut = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CEDCE8], (const void *)*MEMORY[0x1E0C9AE50]);
  if (VTCopyVideoEncoderList(Mutable, &listOfVideoEncodersOut))
    v3 = 1;
  else
    v3 = listOfVideoEncodersOut == 0;
  if (v3 || (Count = CFArrayGetCount(listOfVideoEncodersOut), Count < 1))
  {
LABEL_9:
    v7 = 0;
    if (!Mutable)
      goto LABEL_11;
    goto LABEL_10;
  }
  v5 = Count;
  v6 = 0;
  while (1)
  {
    CFArrayGetValueAtIndex(listOfVideoEncodersOut, v6);
    FigCFDictionaryGetInt32IfPresent();
    if (!a1)
      break;
    if (v5 == ++v6)
      goto LABEL_9;
  }
  v7 = 1;
  if (Mutable)
LABEL_10:
    CFRelease(Mutable);
LABEL_11:
  if (listOfVideoEncodersOut)
    CFRelease(listOfVideoEncodersOut);
  return v7;
}

uint64_t FVDUtilsEncryptedEncodeSupported()
{
  if (FVDUtilsEncryptedEncodeSupported_once != -1)
    dispatch_once(&FVDUtilsEncryptedEncodeSupported_once, &__block_literal_global_22_1);
  return FVDUtilsEncryptedEncodeSupported_result;
}

uint64_t FVDUtilsEncryptedDecodeSupported()
{
  if (FVDUtilsEncryptedDecodeSupported_once != -1)
    dispatch_once(&FVDUtilsEncryptedDecodeSupported_once, &__block_literal_global_23_3);
  return FVDUtilsEncryptedDecodeSupported_result;
}

CFStringRef FVDUtilsCreateDisplayUUID()
{
  _OWORD v1[4];
  uuid_t out;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  memset(out, 0, sizeof(out));
  memset(v1, 0, sizeof(v1));
  uuid_generate_random(out);
  uuid_unparse(out, (char *)v1);
  return CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)v1, 0x8000100u);
}

uint64_t FVDUtilsLoadVCPEncoder()
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (FVDUtilsLoadVCPEncoder_once != -1)
    dispatch_once(&FVDUtilsLoadVCPEncoder_once, &__block_literal_global_24_1);
  result = FVDUtilsLoadVCPEncoder_success;
  if (!FVDUtilsLoadVCPEncoder_success)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return FVDUtilsLoadVCPEncoder_success;
  }
  return result;
}

CFStringRef FVDUtilsCreateLogPrefix(const __CFString *a1, unint64_t a2)
{
  const __CFString *v3;
  const char *v4;

  if (!a1)
  {
    v4 = "";
    goto LABEL_7;
  }
  v3 = a1;
  v4 = "";
  if (CFStringGetLength(a1) < 1)
  {
LABEL_7:
    v3 = &stru_1E2FD85F8;
    return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%s%@ [%04x]"), v4, v3, (unsigned __int16)(bswap64(0x8A970BE7488FDA55 * (a2 ^ (a2 >> 4))) ^ (-9643 * (a2 ^ (a2 >> 4)))));
  }
  if (CFStringGetCharacterAtIndex(v3, 0) != 32)
    v4 = " ";
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%s%@ [%04x]"), v4, v3, (unsigned __int16)(bswap64(0x8A970BE7488FDA55 * (a2 ^ (a2 >> 4))) ^ (-9643 * (a2 ^ (a2 >> 4)))));
}

uint64_t FVDUtilsSessionServerEnabled()
{
  if (FVDUtilsSessionServerEnabled_once != -1)
    dispatch_once(&FVDUtilsSessionServerEnabled_once, &__block_literal_global_33);
  return FVDUtilsSessionServerEnabled_result;
}

uint64_t FVDUtilsStartXPCServers()
{
  FigVirtualFramebufferServerStart();
  return FigVirtualDisplaySessionServerStart();
}

uint64_t FVDUtilsGetTempDirectory()
{
  if (FVDUtilsGetTempDirectory_once != -1)
    dispatch_once(&FVDUtilsGetTempDirectory_once, &__block_literal_global_38);
  return FVDUtilsGetTempDirectory_tmpDir;
}

uint64_t __isAppleVirtualDevice_block_invoke()
{
  uint64_t result;

  result = MGGetBoolAnswer();
  isAppleVirtualDevice_result = result;
  return result;
}

uint64_t FigAssetWatchdogMonitorCommonQueues()
{
  if (PerformURLAssetOneTimeInitialization_static_init != -1)
    dispatch_once_f(&PerformURLAssetOneTimeInitialization_static_init, 0, (dispatch_function_t)InitializeURLAsset);
  FigWatchdogMonitorDispatchQueue();
  return FigWatchdogMonitorDispatchQueue();
}

uint64_t URLAssetCreateAssetTrack(uint64_t a1, const void *a2, const void *a3, const void *a4, const char *a5, NSObject *a6, char a7, char a8, const __CFDictionary *a9, char a10, char a11, _QWORD *a12)
{
  int IsItOKToLogURLs;
  BOOL v20;
  char v21;
  uint64_t v22;
  const char *v23;
  _QWORD *DerivedStorage;
  uint64_t v25;
  uint64_t Instance;
  uint64_t v27;
  CFTypeRef v28;
  NSObject *v29;
  const void *AllPropertyKeys;
  uint64_t PropertyStore;
  uint64_t v32;
  char v34;

  IsItOKToLogURLs = FigIsItOKToLogURLs();
  if (a11)
    v20 = 1;
  else
    v20 = IsItOKToLogURLs == 0;
  v21 = !v20;
  if (!a2 || !a3 || !a12)
    return FigSignalErrorAt();
  v34 = v21;
  FigAssetTrackGetClassID();
  v22 = CMDerivedObjectCreate();
  if ((_DWORD)v22)
    return v22;
  v23 = a5;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v25 = CMBaseObjectGetDerivedStorage();
  CFGetAllocator(0);
  if (InternalURLTrackGetTypeID_sRegisterInternalURLTrackTypeOnce != -1)
    dispatch_once_f(&InternalURLTrackGetTypeID_sRegisterInternalURLTrackTypeOnce, &InternalURLTrackGetTypeID_sInternalURLTrackID, (dispatch_function_t)RegisterInternalURLTrackType);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v27 = Instance;
    *(_QWORD *)(Instance + 16) = CFRetain(a2);
    *(_QWORD *)(v27 + 24) = CFRetain(a3);
    if (a4)
      v28 = CFRetain(a4);
    else
      v28 = 0;
    *(_QWORD *)(v27 + 32) = v28;
    *(_QWORD *)(v27 + 48) = a6;
    dispatch_retain(a6);
    *(_BYTE *)(v27 + 64) = a7;
    *(_BYTE *)(v27 + 65) = a8;
    strncpy((char *)(v27 + 80), v23, 0xAuLL);
    *(_BYTE *)(v27 + 90) = v34;
    v29 = dispatch_group_create();
    *(_QWORD *)(v25 + 24) = v29;
    *(_QWORD *)(v27 + 56) = v29;
    dispatch_retain(v29);
    AllPropertyKeys = (const void *)FigAssetTrackGetAllPropertyKeys();
    PropertyStore = CreatePropertyStore(AllPropertyKeys, CFSTR("assetTrackNotice_PropertyFailedToLoad"), CFSTR("assetTrackNotice_PropertyLoaded"), CFSTR("assetTrackNotice_PropertyRevised"), CFSTR("assetTrackNotice_BatchPropertyLoadComplete"), a6, *(NSObject **)(v25 + 24), (uint64_t)URLAssetTrackPropertyWorkFunction, (const void *)v27, (_QWORD *)(v25 + 8));
    if ((_DWORD)PropertyStore)
      goto LABEL_26;
    FigCFWeakReferenceStore();
    if (a9)
      CFDictionaryApplyFunction(a9, (CFDictionaryApplierFunction)TrackMacroPropertyDefinitionApplierFunction, *(void **)(v25 + 8));
    PropertyStore = CreateValidationStore(CFSTR("assetTrackNotice_ValidationComplete"), a6, *(NSObject **)(v25 + 24), (uint64_t)URLAssetTrackValidationWorkFunction, (const void *)v27, (_QWORD *)(v25 + 16));
    if ((_DWORD)PropertyStore)
    {
LABEL_26:
      v32 = PropertyStore;
      CFRelease((CFTypeRef)v27);
      return v32;
    }
    *(_BYTE *)(v25 + 32) = a10;
    *DerivedStorage = v27;
    goto LABEL_22;
  }
  v22 = FigSignalErrorAt();
  if ((_DWORD)v22)
    return v22;
LABEL_22:
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  v32 = 0;
  *a12 = 0;
  return v32;
}

uint64_t URLAssetTrackForwardNotificationFromStore()
{
  return FigDispatchAsyncPostNotification();
}

uint64_t URLAssetTrackSetComplainForSyncQueries(uint64_t a1, char a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return PropertyStoreSetComplainForSyncQueries(*(_QWORD *)(DerivedStorage + 8), a2);
}

uint64_t FigAssetCreateWithURL(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, _QWORD *a5)
{
  int IsItOKToLogURLs;
  char v11;
  uint64_t InternalURLAsset;
  const __CFData *DataValue;
  const void *v14;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t *DerivedStorage;
  const void *SInt64;
  uint64_t v18;

  IsItOKToLogURLs = FigIsItOKToLogURLs();
  v11 = (a3 & 0x200) == 0 && IsItOKToLogURLs != 0;
  if (PerformURLAssetOneTimeInitialization_static_init != -1)
  {
    dispatch_once_f(&PerformURLAssetOneTimeInitialization_static_init, 0, (dispatch_function_t)InitializeURLAsset);
    if (a2)
      goto LABEL_9;
LABEL_25:
    InternalURLAsset = FigSignalErrorAt();
    goto LABEL_26;
  }
  if (!a2)
    goto LABEL_25;
LABEL_9:
  if (!a5 || (a3 & 0xFFFFFFFFFFFFFCC2) != 0)
    goto LABEL_25;
  FigAssetGetClassID();
  InternalURLAsset = CMDerivedObjectCreate();
  if ((_DWORD)InternalURLAsset)
    goto LABEL_26;
  if (!a4
    || (DataValue = (const __CFData *)FigCFDictionaryGetDataValue()) == 0
    || (v14 = FigCFHTTPCopyClientProcessName(DataValue)) == 0)
  {
    v14 = CFRetain(CFSTR("[]"));
  }
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (v14)
    CFRelease(v14);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  InternalURLAsset = CreateInternalURLAsset(0, a2, 0, 0, a3, a4, v11, DerivedStorage);
  if ((_DWORD)InternalURLAsset)
  {
LABEL_26:
    v18 = InternalURLAsset;
    if (!a5)
      return v18;
    goto LABEL_22;
  }
  FigGetUpTimeNanoseconds();
  SInt64 = (const void *)FigCFNumberCreateSInt64();
  InitializeProperty(DerivedStorage[1], (uint64_t)CFSTR("assetProperty_CreationTime"), 2, 0, (uint64_t)SInt64);
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  if (SInt64)
    CFRelease(SInt64);
  v18 = 0;
LABEL_22:
  *a5 = 0;
  return v18;
}

uint64_t CreateInternalURLAsset(const void *a1, uint64_t a2, const void *a3, const void *a4, uint64_t a5, const void *a6, char a7, uint64_t *a8)
{
  uint64_t DerivedStorage;
  uint64_t Instance;
  uint64_t v17;
  const __CFDictionary *v18;
  _QWORD *v19;
  const char *v20;
  const __CFString *Value;
  const __CFString *v22;
  const void *v23;
  const void *v24;
  CFTypeID v25;
  NSObject *v26;
  const __CFAllocator *v27;
  const __CFUUID *v28;
  const __CFUUID *v29;
  const void **v30;
  const __CFDictionary *DictionaryValue;
  const void *AllPropertyKeys;
  uint64_t *v33;
  uint64_t PropertyStore;
  CFNumberRef v35;
  const void *v36;
  const void *StringValue;
  int v38;
  CFTypeRef v39;
  uint64_t CMBaseObject;
  void (*v41)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  BOOL v42;
  const void *v43;
  uint64_t *v44;
  CFTypeRef v45;
  uint64_t v46;
  CFTypeRef v48;
  CFTypeRef cf;
  CFTypeRef cfa;
  uint64_t *v51;
  CFTypeRef v52;
  CMTime v53;
  char v54;
  int v55;
  uint64_t valuePtr;
  CFTypeRef v57;
  char __str[16];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  valuePtr = a5;
  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  *(_OWORD *)__str = 0u;
  v59 = 0u;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  getpid();
  v55 = 0;
  v54 = 0;
  FigCFDictionaryGetBooleanIfPresent();
  v52 = a4;
  if (!a4)
    FigMediaparserdUtilities_EnsureProcessLaunched();
  FigCFDictionaryGetInt32IfPresent();
  CFGetAllocator(a1);
  if (InternalURLAssetGetTypeID_sRegisterInternalURLAssetTypeOnce != -1)
    dispatch_once_f(&InternalURLAssetGetTypeID_sRegisterInternalURLAssetTypeOnce, &InternalURLAssetGetTypeID_sInternalURLAssetID, (dispatch_function_t)RegisterInternalURLAssetType);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v17 = Instance;
  v51 = a8;
  *(_QWORD *)(Instance + 80) = valuePtr;
  if (a6)
  {
    v18 = (const __CFDictionary *)CFRetain(a6);
    *(_QWORD *)(v17 + 88) = v18;
    v19 = (_QWORD *)(v17 + 88);
    *(_BYTE *)(v17 + 610) = a7;
    v20 = (const char *)(v17 + 584);
    *(_BYTE *)(v17 + 584) = 0;
    if (v18)
    {
      Value = (const __CFString *)CFDictionaryGetValue(v18, CFSTR("assetOption_LoggingIdentifier"));
      if (Value)
      {
        v22 = Value;
        cf = a6;
        v23 = a1;
        v24 = a3;
        v25 = CFGetTypeID(Value);
        if (v25 == CFStringGetTypeID())
          CFStringGetCString(v22, (char *)(v17 + 584), 10, 0x600u);
        a3 = v24;
        a1 = v23;
        a6 = cf;
      }
    }
  }
  else
  {
    *(_QWORD *)(Instance + 88) = 0;
    v19 = (_QWORD *)(Instance + 88);
    *(_BYTE *)(Instance + 610) = a7;
    v20 = (const char *)(Instance + 584);
    *(_BYTE *)(Instance + 584) = 0;
  }
  *(_QWORD *)(v17 + 536) = FigOSTransactionCreate();
  snprintf(__str, 0x100uLL, "URLAssetWorkQueue.%s", v20);
  *(_QWORD *)(v17 + 96) = FigDispatchQueueCreateWithPriority();
  FigThreadMakeDispatchQueueAbortable();
  v26 = dispatch_group_create();
  *(_QWORD *)(DerivedStorage + 24) = v26;
  *(_QWORD *)(v17 + 104) = v26;
  dispatch_retain(v26);
  snprintf(__str, 0x100uLL, "URLAssetMiscQueue.%s", v20);
  *(_QWORD *)(v17 + 472) = FigDispatchQueueCreateWithPriority();
  v27 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v28 = CFUUIDCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  if (v28)
  {
    v29 = v28;
    *(_QWORD *)(v17 + 336) = CFUUIDCreateString(v27, v28);
    CFRelease(v29);
  }
  cfa = a3;
  *(_QWORD *)(v17 + 136) = FigSimpleMutexCreate();
  v30 = (const void **)MEMORY[0x1E0C9AE50];
  if (*(_QWORD *)(v17 + 88))
  {
    DictionaryValue = (const __CFDictionary *)FigCFDictionaryGetDictionaryValue();
    if (!DictionaryValue || (CMTimeMakeFromDictionary(&v53, DictionaryValue), (v53.flags & 0x1D) != 1))
      *(_BYTE *)(v17 + 216) = CFDictionaryGetValue(*(CFDictionaryRef *)(v17 + 88), CFSTR("assetOption_MakeReadAheadAssertionWhenCreatingByteStream")) == *v30;
  }
  AllPropertyKeys = (const void *)FigAssetGetAllPropertyKeys();
  v33 = (uint64_t *)(DerivedStorage + 8);
  PropertyStore = CreatePropertyStore(AllPropertyKeys, CFSTR("assetNotice_PropertyFailedToLoad"), CFSTR("assetNotice_PropertyLoaded"), CFSTR("assetNotice_PropertyRevised"), CFSTR("assetNotice_BatchPropertyLoadComplete"), *(NSObject **)(v17 + 96), *(NSObject **)(DerivedStorage + 24), (uint64_t)URLAssetPropertyWorkFunction, (const void *)v17, (_QWORD *)(DerivedStorage + 8));
  if ((_DWORD)PropertyStore)
    goto LABEL_59;
  FigCFWeakReferenceStore();
  PropertyStore = CreateTrackMacroPropertyState((uint64_t)a1, *v33, (uint64_t)URLAssetCopyStoreForTrack, (_QWORD *)(v17 + 600));
  if ((_DWORD)PropertyStore)
    goto LABEL_59;
  InitializeProperty(*v33, (uint64_t)CFSTR("assetProperty_CreationOptionsDictionary"), 2, 0, (uint64_t)a6);
  v35 = CFNumberCreate(v27, kCFNumberSInt64Type, &valuePtr);
  InitializeProperty(*v33, (uint64_t)CFSTR("assetProperty_CreationFlags"), 2, 0, (uint64_t)v35);
  if (v35)
    CFRelease(v35);
  InitializeProperty(*v33, (uint64_t)CFSTR("assetProperty_CreationURL"), 2, 0, a2);
  InitializeProperty(*v33, (uint64_t)CFSTR("assetProperty_InstanceUUID"), 2, 0, *(_QWORD *)(v17 + 336));
  if (!v52)
  {
    if (*v19)
    {
      StringValue = (const void *)FigCFDictionaryGetStringValue();
      if (StringValue)
        InternalURLAssetSetDeclaredAssetType(*v33, v17, StringValue);
    }
  }
  if (!FigCFDictionaryGetBooleanIfPresent())
    *(_BYTE *)(v17 + 609) = 0;
  InternalURLAssetSetStorageSession(*(dispatch_queue_t **)(DerivedStorage + 8), v17);
  PropertyStore = CreateValidationStore(CFSTR("assetNotice_ValidationComplete"), *(NSObject **)(v17 + 96), *(NSObject **)(v17 + 104), (uint64_t)URLAssetValidationWorkFunction, (const void *)v17, (_QWORD *)(DerivedStorage + 16));
  if ((_DWORD)PropertyStore)
    goto LABEL_59;
  if (a2)
  {
    *(_DWORD *)(v17 + 64) = 1431456810;
    v36 = (const void *)a2;
LABEL_34:
    *(_QWORD *)(v17 + 72) = CFRetain(v36);
    goto LABEL_35;
  }
  v36 = cfa;
  if (cfa)
  {
    *(_DWORD *)(v17 + 64) = 708989738;
    goto LABEL_34;
  }
  *(_DWORD *)(v17 + 64) = 709251626;
  if (v52)
    v48 = CFRetain(v52);
  else
    v48 = 0;
  *(_QWORD *)(v17 + 72) = v48;
  InitializeProperty(*v33, (uint64_t)CFSTR("assetProperty_FormatReader"), 2, 0, (uint64_t)v52);
LABEL_35:
  v57 = 0;
  v38 = *(_DWORD *)(v17 + 64);
  if (v38 == 708989738)
  {
    CMBaseObject = CMByteStreamGetCMBaseObject();
    v41 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
    if (!v41 || (v41(CMBaseObject, *MEMORY[0x1E0CA2098], v27, &v57), (v39 = v57) == 0))
    {
LABEL_45:
      v42 = 0;
      goto LABEL_46;
    }
  }
  else
  {
    if (v38 != 1431456810)
      goto LABEL_45;
    v39 = *(CFTypeRef *)(v17 + 72);
    if (v39)
      v39 = CFRetain(v39);
    v57 = v39;
    if (!v39)
      goto LABEL_45;
  }
  v42 = FigCFHTTPIsHTTPBasedURL((const __CFURL *)v39);
  if (v57)
    CFRelease(v57);
LABEL_46:
  *(_BYTE *)(v17 + 608) = v42;
  PropertyStore = InternalURLAssetCreateByteStreamProvider(v17);
  if ((_DWORD)PropertyStore)
  {
LABEL_59:
    v46 = PropertyStore;
    CFRelease((CFTypeRef)v17);
    return v46;
  }
  InitializeProperty(*v33, (uint64_t)CFSTR("assetProperty_ByteStreamProvider"), 2, 0, *(_QWORD *)(v17 + 480));
  *(_QWORD *)(v17 + 56) = FigSimpleMutexCreate();
  InitializeProperty(*v33, (uint64_t)CFSTR("assetProperty_DownloadToken"), 2, 0, *MEMORY[0x1E0C9AE50]);
  FigCFWeakReferenceInit();
  FigDispatchOnceInitWithinObject();
  if (*(_QWORD *)(v17 + 88))
  {
    v43 = CFDictionaryGetValue((CFDictionaryRef)a6, CFSTR("assetOption_CustomURLLoader"));
    v44 = v51;
    if (v43)
      v45 = CFRetain(v43);
    else
      v45 = 0;
    *(_QWORD *)(v17 + 488) = v45;
  }
  else
  {
    v45 = *(CFTypeRef *)(v17 + 488);
    v44 = v51;
  }
  InitializeProperty(*v33, (uint64_t)CFSTR("assetProperty_CustomURLLoader"), 2, 0, (uint64_t)v45);
  InitializeProperty(*v33, (uint64_t)CFSTR("assetProperty_DownloadToDestinationResult"), 2, 0, 0);
  v46 = 0;
  *v44 = v17;
  return v46;
}

uint64_t URLAssetForwardNotificationFromStore()
{
  return FigDispatchAsyncPostNotification();
}

uint64_t FigAssetCreateWithByteStream(uint64_t a1, const void *a2, uint64_t a3, const void *a4, _QWORD *a5)
{
  int IsItOKToLogURLs;
  char v11;
  uint64_t InternalURLAsset;
  uint64_t *DerivedStorage;

  IsItOKToLogURLs = FigIsItOKToLogURLs();
  v11 = (a3 & 0x200) == 0 && IsItOKToLogURLs != 0;
  if (PerformURLAssetOneTimeInitialization_static_init == -1)
  {
    if (a2)
      goto LABEL_9;
LABEL_17:
    InternalURLAsset = FigSignalErrorAt();
    if (!a5)
      return InternalURLAsset;
    goto LABEL_14;
  }
  dispatch_once_f(&PerformURLAssetOneTimeInitialization_static_init, 0, (dispatch_function_t)InitializeURLAsset);
  if (!a2)
    goto LABEL_17;
LABEL_9:
  if (a5)
  {
    if ((a3 & 0xFFFFFFFFFFFFFCC2) != 0)
    {
      InternalURLAsset = FigSignalErrorAt();
    }
    else
    {
      FigAssetGetClassID();
      InternalURLAsset = CMDerivedObjectCreate();
      if (!(_DWORD)InternalURLAsset)
      {
        DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
        InternalURLAsset = CreateInternalURLAsset(0, 0, a2, 0, a3, a4, v11, DerivedStorage);
        if (!(_DWORD)InternalURLAsset)
        {
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterAddWeakListener();
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterAddWeakListener();
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterAddWeakListener();
        }
      }
    }
LABEL_14:
    *a5 = 0;
    return InternalURLAsset;
  }
  return FigSignalErrorAt();
}

uint64_t FigAssetCreateWithBlockBuffer(const __CFAllocator *a1, CMBlockBufferRef theBuffer, int a3, const __CFString *a4, uint64_t a5, const void *a6, CFTypeRef *a7)
{
  const __CFString *v8;
  uint64_t v13;
  CFTypeID v14;
  uint64_t CMBaseObject;
  uint64_t (*v16)(uint64_t, _QWORD, const __CFString *);
  _QWORD *v17;
  CFTypeID v18;
  uint64_t v19;
  const __CFString *v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, _QWORD, const __CFString *);
  uint64_t v23;
  CFTypeID v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, _QWORD, const __CFString *);
  uint64_t v27;
  CFTypeRef v29;

  v29 = 0;
  if (!theBuffer)
  {
    v23 = FigSignalErrorAt();
    v20 = 0;
    v8 = 0;
    goto LABEL_34;
  }
  if (a3 == -1)
    goto LABEL_28;
  v8 = a4;
  if (!a4)
    goto LABEL_46;
  if (!a7 || !CMBlockBufferGetDataLength(theBuffer))
    goto LABEL_28;
  v13 = CMByteStreamCreateForBlockBuffer();
  if ((_DWORD)v13)
  {
LABEL_29:
    v23 = v13;
    v8 = 0;
LABEL_30:
    v20 = 0;
    goto LABEL_34;
  }
  if (a3 == 2)
  {
    v18 = CFGetTypeID(v8);
    if (v18 == CFStringGetTypeID())
    {
      CMBaseObject = CMByteStreamGetCMBaseObject();
      v16 = *(uint64_t (**)(uint64_t, _QWORD, const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
      if (v16)
      {
        v17 = (_QWORD *)MEMORY[0x1E0CA2F78];
LABEL_16:
        v13 = v16(CMBaseObject, *v17, v8);
        if (!(_DWORD)v13)
        {
          v19 = FigAtomicIncrement32();
          v20 = CFStringCreateWithFormat(a1, 0, CFSTR("DataAsset_%d"), v19);
          if (!v20)
          {
            v23 = FigSignalErrorAt();
            v8 = 0;
            goto LABEL_34;
          }
          v8 = (const __CFString *)CFURLCreateWithFileSystemPath(a1, v20, kCFURLPOSIXPathStyle, 0);
          if (v8)
          {
            v21 = CMByteStreamGetCMBaseObject();
            v22 = *(uint64_t (**)(uint64_t, _QWORD, const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 56);
            if (v22)
            {
              v23 = v22(v21, *MEMORY[0x1E0CA2098], v8);
              if ((_DWORD)v23)
                goto LABEL_34;
              goto LABEL_26;
            }
LABEL_33:
            v23 = 4294954514;
            goto LABEL_34;
          }
          v27 = FigSignalErrorAt();
LABEL_45:
          v23 = v27;
          goto LABEL_34;
        }
        goto LABEL_29;
      }
      goto LABEL_31;
    }
    goto LABEL_28;
  }
  if (a3 != 1)
  {
    if (!a3)
    {
      v14 = CFGetTypeID(v8);
      if (v14 == CFStringGetTypeID())
      {
        CMBaseObject = CMByteStreamGetCMBaseObject();
        v16 = *(uint64_t (**)(uint64_t, _QWORD, const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
        if (v16)
        {
          v17 = (_QWORD *)MEMORY[0x1E0CA2FC8];
          goto LABEL_16;
        }
LABEL_31:
        v8 = 0;
        goto LABEL_32;
      }
    }
    goto LABEL_28;
  }
  v24 = CFGetTypeID(v8);
  if (v24 != CFStringGetTypeID())
  {
LABEL_28:
    v13 = FigSignalErrorAt();
    goto LABEL_29;
  }
  v8 = (const __CFString *)CFURLCreateWithFileSystemPath(a1, v8, kCFURLPOSIXPathStyle, 0);
  if (!v8)
  {
LABEL_46:
    v23 = FigSignalErrorAt();
    goto LABEL_30;
  }
  v25 = CMByteStreamGetCMBaseObject();
  v26 = *(uint64_t (**)(uint64_t, _QWORD, const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v26)
  {
LABEL_32:
    v20 = 0;
    goto LABEL_33;
  }
  v27 = v26(v25, *MEMORY[0x1E0CA2098], v8);
  v20 = 0;
  if ((_DWORD)v27)
    goto LABEL_45;
LABEL_26:
  v23 = FigAssetCreateWithByteStream((uint64_t)a1, 0, a5, a6, &v29);
  if (!(_DWORD)v23)
  {
    *a7 = v29;
    v29 = 0;
  }
LABEL_34:
  if (v29)
    CFRelease(v29);
  if (v8)
    CFRelease(v8);
  if (v20)
    CFRelease(v20);
  return v23;
}

uint64_t FigAssetCreateWithFormatReader(uint64_t a1, const void *a2, uint64_t a3, const void *a4, _QWORD *a5)
{
  int IsItOKToLogURLs;
  char v11;
  uint64_t InternalURLAsset;
  uint64_t *DerivedStorage;
  uint64_t FigBaseObject;
  void (*v15)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v16;
  CFTypeRef v17;
  CFTypeRef cf;
  CFTypeRef v20;

  cf = 0;
  v20 = 0;
  IsItOKToLogURLs = FigIsItOKToLogURLs();
  v11 = (a3 & 0x200) == 0 && IsItOKToLogURLs != 0;
  if (PerformURLAssetOneTimeInitialization_static_init != -1)
  {
    dispatch_once_f(&PerformURLAssetOneTimeInitialization_static_init, 0, (dispatch_function_t)InitializeURLAsset);
    if (a2)
      goto LABEL_9;
LABEL_23:
    InternalURLAsset = FigSignalErrorAt();
    goto LABEL_24;
  }
  if (!a2)
    goto LABEL_23;
LABEL_9:
  if (!a5 || (a3 & 0xFFFFFFFFFFFFFCC2) != 0)
    goto LABEL_23;
  FigAssetGetClassID();
  InternalURLAsset = CMDerivedObjectCreate();
  if ((_DWORD)InternalURLAsset
    || (DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage(),
        InternalURLAsset = CreateInternalURLAsset(v20, 0, 0, a2, a3, a4, v11, DerivedStorage),
        (_DWORD)InternalURLAsset))
  {
LABEL_24:
    v16 = InternalURLAsset;
    v17 = v20;
    if (!a5)
      return v16;
    goto LABEL_20;
  }
  FigBaseObject = FigFormatReaderGetFigBaseObject(a2);
  v15 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
  if (v15)
  {
    v15(FigBaseObject, CFSTR("CanMutate"), *MEMORY[0x1E0C9AE00], &cf);
    v15 = (void (*)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))cf;
  }
  if (v15 == (void (*)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))*MEMORY[0x1E0C9AE50])
    *(_BYTE *)(*DerivedStorage + 456) = 1;
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  if (cf)
    CFRelease(cf);
  v16 = 0;
  v17 = v20;
LABEL_20:
  *a5 = v17;
  return v16;
}

uint64_t FigAssetCreateWithMovieProxyData(const __CFAllocator *a1, CFDataRef theData, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t MutableCopy;
  __CFDictionary *v10;
  const void *StringValue;
  const __CFString *v12;
  uint64_t BlockBufferWithCFDataNoCopy;
  CFURLRef v14;
  CFURLRef v15;
  uint64_t CMBaseObject;
  uint64_t (*v17)(uint64_t, _QWORD, CFURLRef);
  uint64_t v18;
  uint64_t v19;
  const __CFString *v20;

  if (PerformURLAssetOneTimeInitialization_static_init != -1)
  {
    dispatch_once_f(&PerformURLAssetOneTimeInitialization_static_init, 0, (dispatch_function_t)InitializeURLAsset);
    if (theData)
      goto LABEL_3;
    return FigSignalErrorAt();
  }
  if (!theData)
    return FigSignalErrorAt();
LABEL_3:
  if (!CFDataGetLength(theData))
    return FigSignalErrorAt();
  if (!a5)
    return FigSignalErrorAt();
  MutableCopy = FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
    return FigSignalErrorAt();
  v10 = (__CFDictionary *)MutableCopy;
  StringValue = (const void *)FigCFDictionaryGetStringValue();
  if (StringValue)
    v12 = (const __CFString *)CFRetain(StringValue);
  else
    v12 = 0;
  CFDictionarySetValue(v10, CFSTR("assetOption_IsMovieProxy"), (const void *)*MEMORY[0x1E0C9AE50]);
  BlockBufferWithCFDataNoCopy = FigCreateBlockBufferWithCFDataNoCopy();
  if ((_DWORD)BlockBufferWithCFDataNoCopy
    || (BlockBufferWithCFDataNoCopy = CMByteStreamCreateForBlockBuffer(), (_DWORD)BlockBufferWithCFDataNoCopy))
  {
    v19 = BlockBufferWithCFDataNoCopy;
    if (!v12)
      goto LABEL_21;
  }
  else
  {
    if (!v12)
    {
      v12 = CFStringCreateWithFormat(a1, 0, CFSTR("MovieProxy_%p-%p.mov"), theData, 0);
      if (!v12)
      {
        v19 = FigSignalErrorAt();
        goto LABEL_21;
      }
    }
    v14 = CFURLCreateWithFileSystemPath(a1, v12, kCFURLPOSIXPathStyle, 0);
    if (v14)
    {
      v15 = v14;
      CMBaseObject = CMByteStreamGetCMBaseObject();
      v17 = *(uint64_t (**)(uint64_t, _QWORD, CFURLRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v17)
      {
        v18 = v17(CMBaseObject, *MEMORY[0x1E0CA2098], v15);
        if (!(_DWORD)v18)
          v18 = FigAssetCreateWithByteStream((uint64_t)a1, 0, a3, v10, a5);
        v19 = v18;
      }
      else
      {
        v19 = 4294954514;
      }
      CFRelease(v12);
      v20 = (const __CFString *)v15;
      goto LABEL_20;
    }
    v19 = FigSignalErrorAt();
  }
  v20 = v12;
LABEL_20:
  CFRelease(v20);
LABEL_21:
  CFRelease(v10);
  return v19;
}

uint64_t FigAssetCreatePListFromOptionsDict(void *a1, _QWORD *a2)
{
  _QWORD *v2;
  void *MutableCopy;
  uint64_t URLValue;
  uint64_t v5;
  const __CFDictionary *DictionaryValue;
  uint64_t v7;
  BOOL v8;
  uint64_t v10;
  const __CFAllocator *v11;
  CFMutableDictionaryRef v12;
  CFMutableDictionaryRef v13;
  uint64_t v14;

  v2 = a2;
  if (!a2)
  {
    v14 = FigSignalErrorAt();
    MutableCopy = 0;
    goto LABEL_25;
  }
  MutableCopy = a1;
  if (a1)
  {
    URLValue = FigCFDictionaryGetURLValue();
    v5 = FigCFDictionaryGetURLValue();
    DictionaryValue = (const __CFDictionary *)FigCFDictionaryGetDictionaryValue();
    v7 = FigCFDictionaryGetURLValue();
    if (URLValue)
      v8 = 0;
    else
      v8 = v5 == 0;
    if (v8 && v7 == 0)
    {
      MutableCopy = (void *)CFRetain(MutableCopy);
    }
    else
    {
      v10 = v7;
      v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, (CFDictionaryRef)MutableCopy);
      if (!MutableCopy)
      {
        v14 = FigSignalErrorAt();
        goto LABEL_24;
      }
      if (URLValue)
        FigReplaceURLWithString();
      if (v5)
        FigReplaceURLWithString();
      if (v10)
      {
        v12 = CFDictionaryCreateMutableCopy(v11, 0, DictionaryValue);
        if (!v12)
        {
          v14 = FigSignalErrorAt();
          if (!(_DWORD)v14)
            goto LABEL_24;
          CFRelease(MutableCopy);
          goto LABEL_20;
        }
        v13 = v12;
        FigReplaceURLWithString();
        CFDictionarySetValue((CFMutableDictionaryRef)MutableCopy, CFSTR("assetOption_ContentProtectionOptions"), v13);
        CFRelease(v13);
      }
      if (!CFDictionaryGetCount((CFDictionaryRef)MutableCopy))
      {
        CFRelease(MutableCopy);
        v14 = 0;
LABEL_20:
        MutableCopy = 0;
LABEL_24:
        v2 = a2;
        goto LABEL_25;
      }
    }
    v14 = 0;
    goto LABEL_24;
  }
  v14 = 0;
LABEL_25:
  *v2 = MutableCopy;
  return v14;
}

uint64_t FigAssetCreateOptionsDictFromPList(const void *a1, __CFDictionary **a2)
{
  CFTypeID v4;
  uint64_t StringValue;
  uint64_t v6;
  const __CFDictionary *DictionaryValue;
  uint64_t v8;
  uint64_t v9;
  __CFDictionary *MutableCopy;
  const __CFAllocator *v11;
  CFMutableDictionaryRef v12;
  CFMutableDictionaryRef v13;
  uint64_t v14;

  if (!a1 || (v4 = CFGetTypeID(a1), v4 != CFDictionaryGetTypeID()) || !a2)
  {
    v14 = FigSignalErrorAt();
    goto LABEL_19;
  }
  StringValue = FigCFDictionaryGetStringValue();
  v6 = FigCFDictionaryGetStringValue();
  DictionaryValue = (const __CFDictionary *)FigCFDictionaryGetDictionaryValue();
  v8 = FigCFDictionaryGetStringValue();
  v9 = v8;
  if (StringValue || v6 || v8)
  {
    v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, (CFDictionaryRef)a1);
    if (!MutableCopy)
    {
      v14 = FigSignalErrorAt();
      goto LABEL_17;
    }
    if (StringValue)
      FigReplaceStringWithURL();
    if (v6)
      FigReplaceStringWithURL();
    if (!v9)
      goto LABEL_16;
    v12 = CFDictionaryCreateMutableCopy(v11, 0, DictionaryValue);
    if (v12)
    {
      v13 = v12;
      FigReplaceStringWithURL();
      CFDictionarySetValue(MutableCopy, CFSTR("assetOption_ContentProtectionOptions"), v13);
      CFRelease(v13);
      goto LABEL_16;
    }
    v14 = FigSignalErrorAt();
    if (!(_DWORD)v14)
      goto LABEL_17;
    CFRelease(MutableCopy);
LABEL_19:
    MutableCopy = 0;
    goto LABEL_17;
  }
  MutableCopy = (__CFDictionary *)CFRetain(a1);
LABEL_16:
  v14 = 0;
LABEL_17:
  *a2 = MutableCopy;
  return v14;
}

uint64_t InitializeURLAsset()
{
  uint64_t result;

  gCommonAssetNotificationQueue = FigDispatchQueueCreateWithPriority();
  result = FigDispatchQueueCreateWithPriority();
  gCommonAssetTrackNotificationQueue = result;
  return result;
}

void URLAssetTrackFinalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  NSObject *v3;
  NSObject *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 16);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v3 = *(NSObject **)(DerivedStorage + 24);
  if (v3)
  {
    dispatch_group_wait(v3, 0xFFFFFFFFFFFFFFFFLL);
    v4 = *(NSObject **)(DerivedStorage + 24);
    if (v4)
    {
      dispatch_release(v4);
      *(_QWORD *)(DerivedStorage + 24) = 0;
    }
  }
}

__CFString *URLAssetTrackCopyDebugDescription(const void *a1)
{
  CFTypeRef *DerivedStorage;
  __CFString *Mutable;
  CFStringRef v4;
  CFStringRef v5;
  CFStringRef v6;
  CFIndex v7;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v4 = CFCopyDescription(*DerivedStorage);
  v5 = CFCopyDescription(DerivedStorage[1]);
  v6 = CFCopyDescription(DerivedStorage[2]);
  v7 = CFGetRetainCount(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigURLAssetTrack %p> RC %d {%@} {%@} {%@}"), a1, v7, v4, v5, v6);
  if (v4)
    CFRelease(v4);
  if (v5)
    CFRelease(v5);
  if (v6)
    CFRelease(v6);
  return Mutable;
}

uint64_t URLAssetTrackCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return URLAssetTrackCopyPropertyAndBlockageWarning(a1, a2, a3, a4, 0);
}

uint64_t URLAssetTrackCopyPropertyAndBlockageWarning(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, CFStringRef *a5)
{
  uint64_t DerivedStorage;
  CFStringRef *v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || !a4)
    return FigSignalErrorAt();
  *a4 = 0;
  if (*(_BYTE *)(DerivedStorage + 32))
    v9 = a5;
  else
    v9 = 0;
  return ObtainPropertySync(*(_QWORD *)(DerivedStorage + 8), a2, a4, v9);
}

uint64_t URLAssetTrackGetStatusOfValueForProperty(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, _QWORD *a5)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || !a3)
    return FigSignalErrorAt();
  *a3 = 0;
  return QueryProperty(*(_QWORD *)(DerivedStorage + 8), a2, a3, a4, a5, 0);
}

uint64_t URLAssetTrackLoadValuesAsyncForProperties(uint64_t a1, const __CFArray *a2, _BYTE *a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && (v8 = DerivedStorage, CFArrayGetCount(a2)))
    return RequestPropertiesAsync(*(_QWORD *)(v8 + 8), (uint64_t)a2, a3, a4);
  else
    return FigSignalErrorAt();
}

uint64_t URLAssetTrackLoadValueAsyncForProperty(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t DerivedStorage;
  uint64_t result;
  BOOL v7;
  int v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = 0;
  if (a2)
  {
    result = RequestPropertyAsync(*(_QWORD *)(DerivedStorage + 8), a2, &v8);
    if (!(_DWORD)result)
    {
      v7 = (v8 & 0xFFFFFFFE) == 2;
      if (!a3)
        return result;
      goto LABEL_4;
    }
  }
  else
  {
    result = FigSignalErrorAt();
  }
  v7 = 0;
  if (!a3)
    return result;
LABEL_4:
  *a3 = v7;
  return result;
}

uint64_t URLAssetTrackGetTrackInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  v5 = *(_QWORD *)(*(_QWORD *)CMBaseObjectGetDerivedStorage() + 24);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v6)
    return v6(v5, a2, a3);
  else
    return 4294954514;
}

uint64_t URLAssetTrackValidateAsync(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4, _DWORD *a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || !a4)
    return FigSignalErrorAt();
  v10 = DerivedStorage;
  if (!CFEqual(a2, CFSTR("validationCriteria_Custom")))
  {
    if (!CFEqual(a2, CFSTR("validationCriteria_CameraRoll"))
      && !CFEqual(a2, CFSTR("validationCriteria_MediaPlayback"))
      && !CFEqual(a2, CFSTR("validationCriteria_MediaDecoding")))
    {
      return FigSignalErrorAt();
    }
    return RequestValidationAsync(*(_QWORD *)(v10 + 16), (uint64_t)a2, a3, a4, a5);
  }
  if (a3)
    return RequestValidationAsync(*(_QWORD *)(v10 + 16), (uint64_t)a2, a3, a4, a5);
  return FigSignalErrorAt();
}

uint64_t TrackMacroPropertyDefinitionApplierFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return DefineMacroProperty(a3, a1, a2);
}

uint64_t RegisterInternalURLTrackType(uint64_t *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

double InternalURLTrack_Init(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

void InternalURLTrack_Finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  NSObject *v5;
  NSObject *v6;

  InternalURLAssetTrackStopMonitoringChanges(a1);
  objc_destroyWeak((id *)(a1 + 40));
  v2 = *(const void **)(a1 + 24);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v3 = *(const void **)(a1 + 16);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v4 = *(const void **)(a1 + 32);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v5 = *(NSObject **)(a1 + 48);
  if (v5)
    dispatch_release(v5);
  v6 = *(NSObject **)(a1 + 56);
  if (v6)
  {
    dispatch_release(v6);
    *(_QWORD *)(a1 + 56) = 0;
  }
}

__CFString *InternalURLTrack_CopyDebugDesc(uint64_t a1)
{
  __CFString *Mutable;
  uint64_t v3;
  void (*v4)(uint64_t, char *, uint64_t *);
  CFIndex v5;
  uint64_t CMBaseObject;
  void (*v7)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFStringRef v8;
  CFStringRef v9;
  const __CFString *v10;
  CFTypeRef v12;
  uint64_t v13;

  Mutable = CFStringCreateMutable(0, 0);
  v13 = 1061109567;
  v12 = 0;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(void (**)(uint64_t, char *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v4)
    v4(v3, (char *)&v13 + 4, &v13);
  v5 = CFGetRetainCount((CFTypeRef)a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<InternalURLTrack %p %s> RC %d TrackID %d '%c%c%c%c'"), a1, a1 + 80, v5, HIDWORD(v13), BYTE3(v13), BYTE2(v13), BYTE1(v13), v13);
  if (*(_QWORD *)(a1 + 32))
  {
    CMBaseObject = CMByteStreamGetCMBaseObject();
    v7 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v7)
    {
      v7(CMBaseObject, *MEMORY[0x1E0CA2098], *MEMORY[0x1E0C9AE00], &v12);
      if (v12)
      {
        v8 = CFCopyDescription(v12);
        if (v8)
        {
          v9 = v8;
          if (*(_BYTE *)(a1 + 90))
            v10 = v8;
          else
            v10 = CFSTR("<redacted>");
          CFStringAppendFormat(Mutable, 0, CFSTR(" AssetURL: %@"), v10);
          CFRelease(v9);
        }
        CFRelease(v12);
      }
    }
  }
  return Mutable;
}

void URLAssetFinalize()
{
  uint64_t *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v2;
  const void *v3;
  NSObject *v4;
  NSObject *v5;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  if (*DerivedStorage)
  {
    InternalURLAssetShutdownWorkQueue(*DerivedStorage);
    InternalURLAssetCleanupChangeMonitoring(*DerivedStorage);
    InternalURLAssetCleanupIncrementalFragmentProcessing((dispatch_queue_t *)*DerivedStorage);
    InternalURLAssetCleanupStreamingProcessing(*DerivedStorage);
    InternalURLAssetCleanupPostPurchaseProcessing(*DerivedStorage);
    if (*DerivedStorage)
    {
      CFRelease((CFTypeRef)*DerivedStorage);
      *DerivedStorage = 0;
    }
  }
  v2 = (const void *)DerivedStorage[1];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[1] = 0;
  }
  v3 = (const void *)DerivedStorage[2];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[2] = 0;
  }
  v4 = DerivedStorage[3];
  if (v4)
  {
    dispatch_group_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
    v5 = DerivedStorage[3];
    if (v5)
    {
      dispatch_release(v5);
      DerivedStorage[3] = 0;
    }
  }
}

__CFString *URLAssetCopyDebugDescription(const void *a1)
{
  CFTypeRef *DerivedStorage;
  __CFString *Mutable;
  CFStringRef v4;
  CFStringRef v5;
  CFStringRef v6;
  uint64_t v7;
  const char *v8;
  CFIndex v9;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v4 = CFCopyDescription(*DerivedStorage);
  v5 = CFCopyDescription(DerivedStorage[1]);
  v6 = CFCopyDescription(DerivedStorage[2]);
  if (a1 && (v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage()) != 0)
    v8 = (const char *)(v7 + 584);
  else
    v8 = "";
  v9 = CFGetRetainCount(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigURLAsset %p %s> RC %d {%@} {%@} {%@}"), a1, v8, v9, v4, v5, v6);
  if (v4)
    CFRelease(v4);
  if (v5)
    CFRelease(v5);
  if (v6)
    CFRelease(v6);
  return Mutable;
}

uint64_t URLAssetCopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  return URLAssetCopyPropertyAndBlockageWarning(a1, a2, a3, a4, 0);
}

uint64_t URLAssetSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  dispatch_queue_t *v7;
  CFTypeID v8;
  uint64_t v9;
  CFTypeID v10;
  uint64_t valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v6 = DerivedStorage;
    if (CFEqual(a2, CFSTR("assetProperty_MakeReadAheadAssertionWhenCreatingByteStream")))
    {
      if (a3)
      {
        v7 = *(dispatch_queue_t **)v6;
        v8 = CFGetTypeID(a3);
        if (v8 == CFBooleanGetTypeID())
        {
          MEMORY[0x19402EEEC](v7[17]);
          if (v7[20])
          {
            v9 = 4294955126;
          }
          else
          {
            v9 = 0;
            *((_BYTE *)v7 + 216) = *MEMORY[0x1E0C9AE50] == (_QWORD)a3;
          }
          MEMORY[0x19402EF04](v7[17]);
          return v9;
        }
      }
    }
    else
    {
      if (CFEqual(a2, CFSTR("assetProperty_IncrementalFragmentParseInterval")))
      {
        if (a3)
        {
          v10 = CFGetTypeID(a3);
          if (v10 == CFNumberGetTypeID())
          {
            valuePtr = 0;
            CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt64Type, &valuePtr);
            InternalURLAssetSetIncrementalFragmentParsingInterval(*(dispatch_queue_t **)v6, valuePtr);
          }
        }
        return 0;
      }
      if (CFEqual(a2, CFSTR("assetProperty_ShouldPrefetchCryptKeys")))
        return InternalURLAssetSetShouldPrefetchCryptKeys(*(const void **)(v6 + 8), *(dispatch_queue_t **)v6, (uint64_t)a3);
    }
  }
  return FigSignalErrorAt();
}

uint64_t URLAssetCopyPropertyAndBlockageWarning(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4, CFStringRef *a5)
{
  uint64_t DerivedStorage;
  uint64_t *v9;
  const void *v10;
  const __CFAllocator *v11;
  _QWORD *v12;
  void *v13;
  const void **v14;
  void *v15;
  uint64_t result;
  CFStringRef *v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || !a4)
    return FigSignalErrorAt();
  v9 = (uint64_t *)DerivedStorage;
  *a4 = 0;
  if (CFEqual(a2, CFSTR("assetProperty_CreationURL")))
  {
    if (*(_DWORD *)(*v9 + 64) == 1431456810)
    {
      v10 = *(const void **)(*v9 + 72);
      if (!v10)
        goto LABEL_28;
      goto LABEL_18;
    }
    return 0;
  }
  if (CFEqual(a2, CFSTR("assetProperty_CreationFlags")))
  {
    v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v12 = (_QWORD *)(*v9 + 80);
    goto LABEL_9;
  }
  if (CFEqual(a2, CFSTR("assetProperty_CreationOptionsDictionary")))
  {
    v10 = *(const void **)(*v9 + 88);
    if (!v10)
      goto LABEL_28;
    goto LABEL_18;
  }
  if (CFEqual(a2, CFSTR("assetProperty_MakeReadAheadAssertionWhenCreatingByteStream")))
  {
    if (*(_BYTE *)(*v9 + 216))
      v14 = (const void **)MEMORY[0x1E0C9AE50];
    else
      v14 = (const void **)MEMORY[0x1E0C9AE40];
    v10 = *v14;
    if (!*v14)
      goto LABEL_28;
    goto LABEL_18;
  }
  if (CFEqual(a2, CFSTR("assetProperty_OriginalReadAheadAssertion")))
    return CopyOutReadAheadAssertion(*v9, a4);
  if (CFEqual(a2, CFSTR("assetProperty_DownloadToken")))
  {
    InternalURLAssetEnsureDownloadTokenEstablished(*v9);
    v12 = (_QWORD *)(*v9 + 24);
    if (!*v12)
      return 0;
    v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
LABEL_9:
    v13 = CFNumberCreate(v11, kCFNumberSInt64Type, v12);
LABEL_19:
    v15 = v13;
LABEL_29:
    result = 0;
    *a4 = v15;
    return result;
  }
  if (CFEqual(a2, CFSTR("assetProperty_InstanceUUID")))
  {
    v10 = *(const void **)(*v9 + 336);
    if (!v10)
    {
LABEL_28:
      v15 = 0;
      goto LABEL_29;
    }
    goto LABEL_18;
  }
  if (CFEqual(a2, CFSTR("assetProperty_DefaultContentKeySession")))
  {
    result = InternalURLAssetEnsureContentKeySessionCreated((_QWORD *)*v9);
    if (!(_DWORD)result)
    {
      v10 = *(const void **)(*v9 + 512);
LABEL_18:
      v13 = (void *)CFRetain(v10);
      goto LABEL_19;
    }
  }
  else if (CFEqual(a2, CFSTR("assetProperty_ContentKeyBoss")))
  {
    result = InternalURLAssetEnsureContentKeyBoss((_QWORD *)*v9);
    if (!(_DWORD)result)
    {
      v10 = *(const void **)(*v9 + 520);
      goto LABEL_18;
    }
  }
  else if (CFEqual(a2, CFSTR("assetProperty_CustomURLLoader")))
  {
    result = InternalURLAssetEnsureCustomURLLoaderCreated((dispatch_once_t *)*v9);
    if (!(_DWORD)result)
    {
      v10 = *(const void **)(*v9 + 488);
      goto LABEL_18;
    }
  }
  else
  {
    if (*(_BYTE *)(*v9 + 608))
      v17 = a5;
    else
      v17 = 0;
    return ObtainPropertySync(v9[1], (uint64_t)a2, a4, v17);
  }
  return result;
}

uint64_t CopyOutReadAheadAssertion(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 136));
  v4 = *(_QWORD *)(a1 + 224);
  if (v4)
  {
    FigAssertionSetProperty(v4, CFSTR("Assertion_HolderName"), CFSTR("Client-of-FigAsset"));
    v5 = 0;
    *a2 = *(_QWORD *)(a1 + 224);
    *(_QWORD *)(a1 + 224) = 0;
    *(_BYTE *)(a1 + 217) = 1;
  }
  else
  {
    *a2 = 0;
    if (*(_BYTE *)(a1 + 217))
      v5 = 4294955126;
    else
      v5 = 0;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 136));
  return v5;
}

uint64_t URLAssetGetStatusOfValueForProperty(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, _QWORD *a5)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || !a3)
    return FigSignalErrorAt();
  *a3 = 0;
  return QueryProperty(*(_QWORD *)(DerivedStorage + 8), a2, a3, a4, a5, 0);
}

uint64_t URLAssetLoadValuesAsyncForProperties(uint64_t a1, const __CFArray *a2, _BYTE *a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && (v8 = DerivedStorage, CFArrayGetCount(a2)))
    return RequestPropertiesAsync(*(_QWORD *)(v8 + 8), (uint64_t)a2, a3, a4);
  else
    return FigSignalErrorAt();
}

uint64_t URLAssetLoadValueAsyncForProperty(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t DerivedStorage;
  uint64_t result;
  int v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = 0;
  if (!a2)
    return FigSignalErrorAt();
  result = RequestPropertyAsync(*(_QWORD *)(DerivedStorage + 8), a2, &v7);
  if (a3)
  {
    if (!(_DWORD)result)
      *a3 = (v7 & 0xFFFFFFFE) == 2;
  }
  return result;
}

uint64_t URLAssetValidateAsync(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4, _DWORD *a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || !a4)
    return FigSignalErrorAt();
  v10 = DerivedStorage;
  if (!CFEqual(a2, CFSTR("validationCriteria_Custom")))
  {
    if (!CFEqual(a2, CFSTR("validationCriteria_CameraRoll"))
      && !CFEqual(a2, CFSTR("validationCriteria_MediaPlayback"))
      && !CFEqual(a2, CFSTR("validationCriteria_PhotosTranscodingService")))
    {
      return FigSignalErrorAt();
    }
    return RequestValidationAsync(*(_QWORD *)(v10 + 16), (uint64_t)a2, a3, a4, a5);
  }
  if (a3)
    return RequestValidationAsync(*(_QWORD *)(v10 + 16), (uint64_t)a2, a3, a4, a5);
  return FigSignalErrorAt();
}

uint64_t URLAssetCopyTrackByID(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t CMBaseObject;
  unsigned int (*v6)(uint64_t, const __CFString *, _QWORD, CFArrayRef *);
  CFIndex Count;
  CFIndex v9;
  CFIndex i;
  const void *ValueAtIndex;
  const void *v12;
  CFTypeID v13;
  unsigned int (*v14)(const void *, int *, _QWORD);
  uint64_t v16;
  CFTypeRef v17;
  int v19;
  CFArrayRef theArray;

  theArray = 0;
  if (a2)
  {
    if (!a3)
    {
      v16 = FigSignalErrorAt();
      goto LABEL_20;
    }
    CMBaseObject = FigAssetGetCMBaseObject(a1);
    v6 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
    if (v6)
    {
      if (!v6(CMBaseObject, CFSTR("assetProperty_Tracks"), *MEMORY[0x1E0C9AE00], &theArray) && theArray != 0)
      {
        v19 = 0;
        Count = CFArrayGetCount(theArray);
        if (Count >= 1)
        {
          v9 = Count;
          for (i = 0; v9 != i; ++i)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
            if (!ValueAtIndex)
              break;
            v12 = ValueAtIndex;
            v13 = CFGetTypeID(ValueAtIndex);
            if (v13 != FigAssetTrackGetTypeID())
              break;
            v14 = *(unsigned int (**)(const void *, int *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 32);
            if (v14)
            {
              if (!v14(v12, &v19, 0) && v19 == a2)
              {
                v17 = CFRetain(v12);
                if (!v17)
                  break;
                v16 = 0;
                if (a3)
                  goto LABEL_19;
                goto LABEL_20;
              }
            }
          }
        }
      }
    }
  }
  v16 = FigSignalErrorAt();
  v17 = 0;
  if (a3)
LABEL_19:
    *a3 = v17;
LABEL_20:
  if (theArray)
    CFRelease(theArray);
  return v16;
}

uint64_t URLAssetCopyTracksWithMediaType(uint64_t a1, int a2, __CFArray **a3)
{
  uint64_t CMBaseObject;
  uint64_t (*v6)(uint64_t, const __CFString *, _QWORD, CFArrayRef *);
  const __CFAllocator *v7;
  unsigned int v8;
  BOOL v9;
  CFIndex Count;
  uint64_t v11;
  __CFArray *Mutable;
  CFIndex v13;
  const void *ValueAtIndex;
  const void *v15;
  CFTypeID v16;
  uint64_t (*v17)(const void *, _QWORD, int *);
  BOOL v18;
  uint64_t v19;
  int v21;
  CFArrayRef theArray;

  theArray = 0;
  if (!a3)
    return FigSignalErrorAt();
  CMBaseObject = FigAssetGetCMBaseObject(a1);
  v6 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (!v6)
  {
    Mutable = 0;
    v8 = -12782;
    goto LABEL_29;
  }
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v8 = v6(CMBaseObject, CFSTR("assetProperty_Tracks"), *MEMORY[0x1E0C9AE00], &theArray);
  if (v8)
    v9 = 1;
  else
    v9 = theArray == 0;
  if (v9)
    goto LABEL_28;
  v21 = 0;
  Count = CFArrayGetCount(theArray);
  if (!Count)
  {
    v8 = 0;
LABEL_28:
    Mutable = 0;
    goto LABEL_29;
  }
  v11 = Count;
  Mutable = CFArrayCreateMutable(v7, Count, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
LABEL_35:
    v19 = FigSignalErrorAt();
    goto LABEL_32;
  }
  if (v11 >= 1)
  {
    v13 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v13);
      if (!ValueAtIndex)
        goto LABEL_35;
      v15 = ValueAtIndex;
      v16 = CFGetTypeID(ValueAtIndex);
      if (v16 != FigAssetTrackGetTypeID())
        goto LABEL_35;
      v17 = *(uint64_t (**)(const void *, _QWORD, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (v17)
      {
        v8 = v17(v15, 0, &v21);
        if (v8)
          v18 = 0;
        else
          v18 = v21 == a2;
        if (v18)
        {
          CFArrayAppendValue(Mutable, v15);
          v8 = 0;
        }
      }
      else
      {
        v8 = -12782;
      }
      if (v11 == ++v13)
        goto LABEL_26;
    }
  }
  v8 = 0;
LABEL_26:
  if (!CFArrayGetCount(Mutable))
  {
    CFRelease(Mutable);
    goto LABEL_28;
  }
LABEL_29:
  if (Mutable)
    v19 = v8;
  else
    v19 = 4294955122;
LABEL_32:
  *a3 = Mutable;
  if (theArray)
    CFRelease(theArray);
  return v19;
}

uint64_t URLAssetCopyChapterData(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, _QWORD *a5)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a4 && a5 && *(_DWORD *)(*(_QWORD *)DerivedStorage + 64) != 709251626)
    return InternalURLAssetCopyChapterData(*(const void **)(DerivedStorage + 8), *(dispatch_queue_t **)DerivedStorage, a2, a3, a4, a5);
  else
    return FigSignalErrorAt();
}

uint64_t URLAssetFetchChapterDataAsync(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a4 || *(_DWORD *)(*(_QWORD *)DerivedStorage + 64) == 709251626)
    return FigSignalErrorAt();
  else
    return InternalURLAssetFetchChapterDataAsync(*(const void **)(DerivedStorage + 8), *(dispatch_queue_t **)DerivedStorage, a2, a3, a4);
}

uint64_t URLAssetTransferBytePumpAsync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return InternalURLAssetTransferBytePumpAsync(*(const void **)(DerivedStorage + 8), *(dispatch_queue_t **)DerivedStorage, a2, a3);
}

uint64_t URLAssetLoadValuesAsyncForTrackProperties(uint64_t a1, CFTypeRef a2, const __CFArray *a3, _BYTE *a4, _DWORD *a5)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v15)(uint64_t, const __CFString *, int *, unsigned int *, _QWORD);
  uint64_t CMBaseObject;
  uint64_t (*v17)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  unsigned int v18;
  int v19;
  char v20;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v20 = 0;
  if (!a3)
    goto LABEL_23;
  v11 = DerivedStorage;
  if (!CFArrayGetCount(a3))
    goto LABEL_23;
  if (a2)
  {
    if (CFArrayGetCount((CFArrayRef)a2))
    {
      cf = a2;
      CFRetain(a2);
      goto LABEL_6;
    }
    goto LABEL_23;
  }
  v18 = 0;
  v19 = 0;
  v15 = *(void (**)(uint64_t, const __CFString *, int *, unsigned int *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 8);
  if (!v15)
  {
    a2 = 0;
    goto LABEL_6;
  }
  v15(a1, CFSTR("assetProperty_Tracks"), &v19, &v18, 0);
  if (v19 == 2)
  {
    CMBaseObject = FigAssetGetCMBaseObject(a1);
    v17 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
    if (v17)
    {
      v12 = v17(CMBaseObject, CFSTR("assetProperty_Tracks"), *MEMORY[0x1E0C9AE00], &cf);
      if ((_DWORD)v12)
        goto LABEL_7;
      a2 = cf;
      if (cf)
      {
LABEL_6:
        v12 = (uint64_t)InternalURLAssetLoadValuesAsyncForTrackProperties(*(const void **)(v11 + 8), *(dispatch_queue_t **)v11, (const __CFArray *)a2, a3, &v20, a5);
LABEL_7:
        v13 = v12;
        goto LABEL_8;
      }
LABEL_23:
      v12 = FigSignalErrorAt();
      goto LABEL_7;
    }
    v13 = 4294954514;
  }
  else
  {
    a2 = 0;
    if (v19 != 3)
      goto LABEL_6;
    v13 = v18;
  }
LABEL_8:
  if (a4)
    *a4 = v20;
  if (cf)
    CFRelease(cf);
  return v13;
}

uint64_t URLAssetDefineMacroProperty(uint64_t a1, uint64_t a2, const __CFArray *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && a3 && (v6 = DerivedStorage, CFArrayGetCount(a3)))
    return DefineMacroProperty(*(_QWORD *)(v6 + 8), a2, (uint64_t)a3);
  else
    return FigSignalErrorAt();
}

uint64_t URLAssetDefineTrackMacroProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && a3 && (v6 = DerivedStorage, CFArrayGetCount((CFArrayRef)a3)))
    return DefineTrackMacroProperty(*(_QWORD *)(*(_QWORD *)v6 + 600), a2, a3);
  else
    return FigSignalErrorAt();
}

uint64_t URLAssetDefineCrossTrackMacroProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && a3 && (v6 = (uint64_t *)DerivedStorage, CFArrayGetCount((CFArrayRef)a3)))
    return DefineCrossTrackMacroProperty(*(_QWORD *)(*v6 + 600), v6[1], a2, a3);
  else
    return FigSignalErrorAt();
}

CFTypeRef URLAssetCopyStoreForTrack()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return CFRetain(*(CFTypeRef *)(DerivedStorage + 8));
}

uint64_t RegisterInternalURLAssetType(uint64_t *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

void InternalURLAsset_Init(uint64_t a1)
{
  bzero((void *)(a1 + 16), 0x258uLL);
}

void *InternalURLAsset_Finalize(uint64_t a1)
{
  const void *v2;
  NSObject *v3;
  NSObject *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  uint64_t v32;
  const void *v33;
  NSObject *v34;
  NSObject *v35;
  NSObject *v36;
  void *v37;
  void *result;

  objc_destroyWeak((id *)(a1 + 464));
  v2 = *(const void **)(a1 + 600);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 600) = 0;
  }
  v3 = *(NSObject **)(a1 + 472);
  if (v3)
  {
    dispatch_release(v3);
    *(_QWORD *)(a1 + 472) = 0;
  }
  if (*(_QWORD *)(a1 + 136))
  {
    FigSimpleMutexDestroy();
    *(_QWORD *)(a1 + 136) = 0;
  }
  if (*(_QWORD *)(a1 + 424))
  {
    FigSimpleMutexDestroy();
    *(_QWORD *)(a1 + 424) = 0;
  }
  v4 = *(NSObject **)(a1 + 368);
  if (v4)
  {
    dispatch_release(v4);
    *(_QWORD *)(a1 + 368) = 0;
  }
  if (*(_QWORD *)(a1 + 240))
    FigStopForwardingMediaServicesProcessDeathNotification();
  v5 = *(const void **)(a1 + 488);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 488) = 0;
  }
  v6 = *(const void **)(a1 + 528);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 528) = 0;
  }
  v7 = *(const void **)(a1 + 72);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 72) = 0;
  }
  v8 = *(const void **)(a1 + 88);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a1 + 88) = 0;
  }
  v9 = *(const void **)(a1 + 176);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 176) = 0;
  }
  v10 = *(const void **)(a1 + 184);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a1 + 184) = 0;
  }
  v11 = *(const void **)(a1 + 160);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(a1 + 160) = 0;
  }
  v12 = *(const void **)(a1 + 152);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(a1 + 152) = 0;
  }
  v13 = *(const void **)(a1 + 240);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(a1 + 240) = 0;
  }
  v14 = *(const void **)(a1 + 248);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(a1 + 248) = 0;
  }
  v15 = *(const void **)(a1 + 272);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(a1 + 272) = 0;
  }
  v16 = *(const void **)(a1 + 344);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(a1 + 344) = 0;
  }
  v17 = *(const void **)(a1 + 360);
  if (v17)
  {
    CFRelease(v17);
    *(_QWORD *)(a1 + 360) = 0;
  }
  v18 = *(const void **)(a1 + 120);
  if (v18)
  {
    CFRelease(v18);
    *(_QWORD *)(a1 + 120) = 0;
  }
  v19 = *(const void **)(a1 + 328);
  if (v19)
  {
    CFRelease(v19);
    *(_QWORD *)(a1 + 328) = 0;
  }
  v20 = *(const void **)(a1 + 336);
  if (v20)
  {
    CFRelease(v20);
    *(_QWORD *)(a1 + 336) = 0;
  }
  v21 = *(const void **)(a1 + 224);
  if (v21)
  {
    CFRelease(v21);
    *(_QWORD *)(a1 + 224) = 0;
  }
  v22 = *(const void **)(a1 + 208);
  if (v22)
  {
    CFRelease(v22);
    *(_QWORD *)(a1 + 208) = 0;
  }
  v23 = *(const void **)(a1 + 432);
  if (v23)
  {
    CFRelease(v23);
    *(_QWORD *)(a1 + 432) = 0;
  }
  v24 = *(const void **)(a1 + 384);
  if (v24)
  {
    CFRelease(v24);
    *(_QWORD *)(a1 + 384) = 0;
  }
  v25 = *(const void **)(a1 + 400);
  if (v25)
  {
    CFRelease(v25);
    *(_QWORD *)(a1 + 400) = 0;
  }
  v26 = *(const void **)(a1 + 408);
  if (v26)
  {
    CFRelease(v26);
    *(_QWORD *)(a1 + 408) = 0;
  }
  v27 = *(const void **)(a1 + 416);
  if (v27)
  {
    CFRelease(v27);
    *(_QWORD *)(a1 + 416) = 0;
  }
  v28 = *(const void **)(a1 + 480);
  if (v28)
  {
    CFRelease(v28);
    *(_QWORD *)(a1 + 480) = 0;
  }
  v29 = *(const void **)(a1 + 512);
  if (v29)
  {
    CFRelease(v29);
    *(_QWORD *)(a1 + 512) = 0;
  }
  v30 = *(const void **)(a1 + 520);
  if (v30)
  {
    CFRelease(v30);
    *(_QWORD *)(a1 + 520) = 0;
  }
  objc_destroyWeak((id *)(a1 + 48));
  v31 = *(const void **)(a1 + 504);
  if (v31)
  {
    CFRelease(v31);
    *(_QWORD *)(a1 + 504) = 0;
  }
  FigSimpleMutexDestroy();
  v32 = *(_QWORD *)(a1 + 24);
  if (v32)
  {
    FigAssetDownloadCoordinatorUnregisterAssetWithDownloadTokenForAllDownloaders(v32);
    FigAssetTableRemoveAsset();
  }
  v33 = *(const void **)(a1 + 576);
  if (v33)
  {
    CFRelease(v33);
    *(_QWORD *)(a1 + 576) = 0;
  }
  v34 = *(NSObject **)(a1 + 280);
  if (v34)
    dispatch_release(v34);
  v35 = *(NSObject **)(a1 + 104);
  if (v35)
  {
    dispatch_release(v35);
    *(_QWORD *)(a1 + 104) = 0;
  }
  v36 = *(NSObject **)(a1 + 96);
  if (v36)
  {
    dispatch_release(v36);
    *(_QWORD *)(a1 + 96) = 0;
  }
  v37 = *(void **)(a1 + 536);
  if (v37)
  {
    os_release(v37);
    *(_QWORD *)(a1 + 536) = 0;
  }
  result = *(void **)(a1 + 40);
  if (result)
    return (void *)FigAssetDownloadCoordinatorRelinquishAccessToURL(result);
  return result;
}

__CFString *InternalURLAsset_CopyDebugDesc(uint64_t a1)
{
  __CFString *Mutable;
  CFStringRef v3;
  CFIndex v4;
  int v5;
  const char *v6;
  const char *v7;
  const __CFString *v8;
  const void *v9;

  Mutable = CFStringCreateMutable(0, 0);
  v3 = CFCopyDescription(*(CFTypeRef *)(a1 + 72));
  v4 = CFGetRetainCount((CFTypeRef)a1);
  v5 = *(_DWORD *)(a1 + 64);
  v6 = "FormatReader";
  if (v5 == 708989738)
    v6 = "ByteStream";
  if (v5 == 1431456810)
    v7 = "URL";
  else
    v7 = v6;
  if (*(_BYTE *)(a1 + 610))
    v8 = v3;
  else
    v8 = CFSTR("<redacted>");
  CFStringAppendFormat(Mutable, 0, CFSTR("<InternalURLAssetRef %p %s> RC %d Created with %s {%@}"), a1, a1 + 584, v4, v7, v8);
  if (v3)
    CFRelease(v3);
  CFStringAppendFormat(Mutable, 0, CFSTR(" createFlags = 0x%0llx"), *(_QWORD *)(a1 + 80));
  if (*(_QWORD *)(a1 + 88))
  {
    v9 = (const void *)FigCFCopyCompactDescription();
    CFStringAppendFormat(Mutable, 0, CFSTR("\noptionsDict = {%@}"), v9);
    if (v9)
      CFRelease(v9);
  }
  return Mutable;
}

uint64_t FigAssetGetAllPropertyKeys()
{
  if (FigAssetGetAllPropertyKeys_static_init != -1)
    dispatch_once_f(&FigAssetGetAllPropertyKeys_static_init, 0, (dispatch_function_t)InitializeAssetPropertyKeys);
  return gAllAssetProperties;
}

CFArrayRef InitializeAssetPropertyKeys()
{
  CFArrayRef result;
  const void *v1[76];

  v1[75] = *(const void **)MEMORY[0x1E0C80C00];
  memcpy(v1, off_1E2FAD350, 0x258uLL);
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1, 75, MEMORY[0x1E0C9B378]);
  gAllAssetProperties = (uint64_t)result;
  return result;
}

uint64_t FigAssetTrackGetAllPropertyKeys()
{
  if (FigAssetTrackGetAllPropertyKeys_static_init != -1)
    dispatch_once_f(&FigAssetTrackGetAllPropertyKeys_static_init, 0, (dispatch_function_t)InitializeAssetTrackPropertyKeys);
  return gAllAssetTrackProperties;
}

CFArrayRef InitializeAssetTrackPropertyKeys()
{
  CFArrayRef result;
  const void *v1[56];

  v1[55] = *(const void **)MEMORY[0x1E0C80C00];
  v1[0] = CFSTR("FormatDescriptionArray");
  v1[1] = CFSTR("IsEnabled");
  v1[2] = CFSTR("IsSelfContained");
  v1[3] = CFSTR("TotalSampleDataLength");
  v1[4] = CFSTR("TimeRange");
  v1[5] = CFSTR("MediaPresentationTimeRange");
  v1[6] = CFSTR("MediaDecodeTimeRange");
  v1[7] = CFSTR("NaturalTimeScale");
  v1[8] = CFSTR("EstimatedDataRate");
  v1[9] = CFSTR("PeakDataRate");
  v1[10] = CFSTR("UneditedSampleCount");
  v1[11] = CFSTR("HasRollInformation");
  v1[12] = CFSTR("LanguageCode");
  v1[13] = CFSTR("MediaCharacteristicArray");
  v1[14] = CFSTR("ExtendedLanguageTag");
  v1[15] = CFSTR("NaturalSize");
  v1[16] = CFSTR("TrackDimensions");
  v1[17] = CFSTR("CleanApertureDimensions");
  v1[18] = CFSTR("ProductionApertureDimensions");
  v1[19] = CFSTR("EncodedPixelsDimensions");
  v1[20] = CFSTR("PreferredTransform");
  v1[21] = CFSTR("NominalFrameRate");
  v1[22] = CFSTR("NonDroppableFrameRate");
  v1[23] = CFSTR("CommonMetadata");
  v1[24] = CFSTR("AvailableMetadataFormats");
  v1[25] = CFSTR("IsExcludedFromAutoselection");
  v1[26] = CFSTR("Volume");
  v1[27] = CFSTR("LoudnessInfo");
  v1[28] = CFSTR("Layer");
  v1[29] = CFSTR("MinSampleDuration");
  v1[30] = CFSTR("AlternateGroupID");
  v1[31] = CFSTR("DefaultAlternateGroupID");
  v1[32] = CFSTR("ProvisionalAlternateGroupID");
  v1[33] = CFSTR("LoadSettings");
  v1[34] = CFSTR("SampleGroupDescriptions");
  v1[35] = CFSTR("HEVCTemporalLevelInfoCombinations");
  v1[36] = CFSTR("HEVCSyncSampleNALUnitTypes");
  v1[37] = CFSTR("assetTrackProperty_QuickTimeUserData");
  v1[38] = CFSTR("assetTrackProperty_ISOUserData");
  v1[39] = CFSTR("assetTrackProperty_QuickTimeMetadata");
  v1[40] = CFSTR("assetTrackProperty_FormatSpecificMetadata");
  v1[41] = CFSTR("assetTrackProperty_FormatSpecificMetadataFormat");
  v1[42] = CFSTR("assetTrackProperty_EditSegmentData");
  v1[43] = CFSTR("assetTrackProperty_PresentationSegmentData");
  v1[44] = CFSTR("assetTrackProperty_EditsExcludeAudioPrimingAndRemainderDuration");
  v1[45] = CFSTR("assetTrackProperty_GaplessSourceTimeRange");
  v1[46] = CFSTR("assetTrackProperty_TrackReferences");
  v1[47] = CFSTR("assetTrackProperty_ProtectedStatus");
  v1[48] = CFSTR("assetTrackProperty_UsesAudibleDRM");
  v1[49] = CFSTR("assetTrackProperty_AudibleContentIsAuthorized");
  v1[50] = CFSTR("assetTrackProperty_CameraRollValidation");
  v1[51] = CFSTR("assetTrackProperty_MediaPlaybackValidation");
  v1[52] = CFSTR("assetTrackProperty_MediaDecodingValidation");
  v1[53] = CFSTR("assetTrackProperty_ContainsWideColor");
  v1[54] = CFSTR("assetTrackProperty_LatentBaseDecodeTimeStampOfFirstTrackFragment");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1, 55, MEMORY[0x1E0C9B378]);
  gAllAssetTrackProperties = (uint64_t)result;
  return result;
}

uint64_t FigAssetGetClassID()
{
  MEMORY[0x19402F294](&FigAssetGetClassID_sRegisterFigAssetBaseTypeOnce, RegisterFigAssetBaseType);
  return sFigAssetClassID;
}

uint64_t RegisterFigAssetBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigAssetGetTypeID()
{
  MEMORY[0x19402F294](&FigAssetGetClassID_sRegisterFigAssetBaseTypeOnce, RegisterFigAssetBaseType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigAssetTrackGetClassID()
{
  MEMORY[0x19402F294](&FigAssetTrackGetClassID_sRegisterFigAssetTrackBaseTypeOnce, RegisterFigAssetTrackBaseType);
  return sFigAssetTrackClassID;
}

uint64_t RegisterFigAssetTrackBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigAssetTrackGetTypeID()
{
  MEMORY[0x19402F294](&FigAssetTrackGetClassID_sRegisterFigAssetTrackBaseTypeOnce, RegisterFigAssetTrackBaseType);
  return CMBaseClassGetCFTypeID();
}

uint64_t CreateTrackMacroPropertyState(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t Instance;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  if (TrackMacroPropertyStateGetTypeID_sRegisterTrackMacroPropertyStateTypeOnce != -1)
    dispatch_once_f(&TrackMacroPropertyStateGetTypeID_sRegisterTrackMacroPropertyStateTypeOnce, &TrackMacroPropertyStateGetTypeID_sTrackMacroPropertyStateID, (dispatch_function_t)RegisterTrackMacroPropertyStateType);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v7 = (_QWORD *)Instance;
  v8 = FigReentrantMutexCreate();
  v7[2] = v8;
  if (v8 && (v9 = FigCFWeakReferenceHolderCreateWithReferencedObject(), (v7[3] = v9) != 0))
  {
    FigCFWeakReferenceStore();
    v7[8] = a3;
    *a4 = v7;
    return 0;
  }
  else
  {
    v11 = FigSignalErrorAt();
    CFRelease(v7);
    return v11;
  }
}

void DisconnectCrossTrackMacroProperties(uint64_t a1, CFArrayRef theArray)
{
  _QWORD v4[2];

  if (theArray && *(_QWORD *)(a1 + 40))
  {
    if (CFArrayGetCount(theArray))
    {
      v4[0] = a1;
      v4[1] = theArray;
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 40), (CFDictionaryApplierFunction)CrossTrackDisconnectApplierFunction, v4);
    }
  }
}

uint64_t CrossTrackDisconnectApplierFunction(void *key, uint64_t a2, CFArrayRef *a3)
{
  uint64_t result;
  __CFSet *v5;
  uint64_t v6;
  CFIndex i;
  const void *ValueAtIndex;

  result = (uint64_t)CFDictionaryGetValue(*((CFDictionaryRef *)*a3 + 5), key);
  if (result)
  {
    v5 = (__CFSet *)result;
    result = CFSetGetCount((CFSetRef)result);
    if (result)
    {
      result = CFArrayGetCount(a3[1]);
      if (result >= 1)
      {
        v6 = result;
        for (i = 0; i != v6; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(a3[1], i);
          CFSetRemoveValue(v5, ValueAtIndex);
          CMNotificationCenterGetDefaultLocalCenter();
          result = FigNotificationCenterRemoveWeakListeners();
        }
      }
    }
  }
  return result;
}

void ConnectCrossTrackMacroProperties(uint64_t a1, CFArrayRef theArray)
{
  const __CFDictionary *MutableCopy;
  _QWORD v5[2];

  if (theArray && *(_QWORD *)(a1 + 40))
  {
    if (CFArrayGetCount(theArray))
    {
      v5[0] = a1;
      v5[1] = theArray;
      MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, *(CFDictionaryRef *)(a1 + 40));
      CFDictionaryApplyFunction(MutableCopy, (CFDictionaryApplierFunction)CrossTrackConnectApplierFunction, v5);
      CFRelease(MutableCopy);
    }
  }
}

void CrossTrackConnectApplierFunction(const void *a1, uint64_t a2, CFArrayRef *a3)
{
  CFIndex Count;
  void *Value;
  CFIndex i;
  const void *ValueAtIndex;
  CFIndex v9;
  const void *v10;
  void (*v11)(const void *, const void *, char *, uint64_t *, CFTypeRef *);
  dispatch_queue_t *v12;
  dispatch_queue_t *v13;
  int v14;
  CFTypeRef v15;
  CFTypeRef cf;
  uint64_t v17;

  Count = CFArrayGetCount(a3[1]);
  Value = (void *)CFDictionaryGetValue(*((CFDictionaryRef *)*a3 + 5), a1);
  if (!Value)
  {
    Value = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]);
    CFDictionarySetValue(*((CFMutableDictionaryRef *)*a3 + 5), a1, Value);
    CFRelease(Value);
  }
  if (Count < 1)
  {
LABEL_16:
    v14 = 0;
    v15 = 0;
    goto LABEL_17;
  }
  for (i = 0; i != Count; ++i)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(a3[1], i);
    CFSetAddValue((CFMutableSetRef)Value, ValueAtIndex);
  }
  v9 = 0;
  while (1)
  {
    cf = 0;
    v17 = 0;
    v10 = CFArrayGetValueAtIndex(a3[1], v9);
    v11 = *(void (**)(const void *, const void *, char *, uint64_t *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 8);
    if (v11)
      v11(v10, a1, (char *)&v17 + 4, &v17, &cf);
    if ((HIDWORD(v17) & 0xFFFFFFFE) != 2)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListeners();
      goto LABEL_13;
    }
    CFSetRemoveValue((CFMutableSetRef)Value, v10);
    if (HIDWORD(v17) == 3)
      break;
LABEL_13:
    if (cf)
      CFRelease(cf);
    if (Count == ++v9)
      goto LABEL_16;
  }
  v14 = v17;
  v15 = cf;
  cf = 0;
  CFSetApplyFunction((CFSetRef)Value, (CFSetApplierFunction)RemoveCrossTrackListenersFromTracksInSet, *a3);
  CFSetRemoveAllValues((CFMutableSetRef)Value);
LABEL_17:
  if (!CFSetGetCount((CFSetRef)Value))
  {
    v12 = (dispatch_queue_t *)MEMORY[0x19402D578]((char *)*a3 + 56);
    if (v12)
    {
      v13 = v12;
      StoreByProduct(v12, a1, v14, v15, 0);
      CFRelease(v13);
    }
  }
  if (v15)
    CFRelease(v15);
}

uint64_t DefineTrackMacroProperty(uint64_t a1, const void *a2, const void *a3)
{
  const __CFDictionary *Mutable;
  const __CFArray *v7;
  CFIndex Count;
  CFIndex v9;
  CFIndex v10;
  const void *ValueAtIndex;
  const void *v12;
  uint64_t v13;

  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
  Mutable = *(const __CFDictionary **)(a1 + 32);
  if ((Mutable
     || (Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]), (*(_QWORD *)(a1 + 32) = Mutable) != 0))&& !CFDictionaryContainsKey(Mutable, a2))
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), a2, a3);
    v7 = *(const __CFArray **)(a1 + 48);
    if (v7 && (Count = CFArrayGetCount(v7), Count >= 1))
    {
      v9 = Count;
      v10 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), v10);
        v12 = (const void *)(*(uint64_t (**)(const void *))(a1 + 64))(ValueAtIndex);
        v13 = DefineMacroProperty((uint64_t)v12, (uint64_t)a2, (uint64_t)a3);
        CFRelease(v12);
        if ((_DWORD)v13)
          break;
        if (v9 == ++v10)
          goto LABEL_9;
      }
    }
    else
    {
LABEL_9:
      v13 = 0;
    }
  }
  else
  {
    v13 = FigSignalErrorAt();
  }
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
  return v13;
}

uint64_t DefineCrossTrackMacroProperty(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
  const __CFDictionary *Mutable;
  CFAllocatorRef *v9;
  const __CFDictionary *v10;
  uint64_t v11;
  const __CFAllocator *v12;
  CFMutableSetRef v13;
  CFArrayRef v14;
  uint64_t v15;
  const __CFArray *v16;

  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
  Mutable = *(const __CFDictionary **)(a1 + 40);
  v9 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (!Mutable
    && (Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]), (*(_QWORD *)(a1 + 40) = Mutable) == 0)|| CFDictionaryContainsKey(Mutable, a3)|| (v10 = *(const __CFDictionary **)(a1 + 32)) != 0 && CFDictionaryContainsKey(v10, a3))
  {
    v11 = FigSignalErrorAt();
    goto LABEL_16;
  }
  v11 = DefineTrackMacroProperty(a1, a3, a4);
  if ((_DWORD)v11)
  {
LABEL_16:
    v15 = v11;
    goto LABEL_14;
  }
  v12 = *v9;
  v13 = CFSetCreateMutable(*v9, 0, MEMORY[0x1E0C9B3B0]);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), a3, v13);
  v14 = CFArrayCreate(v12, 0, 0, MEMORY[0x1E0C9B378]);
  v15 = DefineMacroProperty(a2, (uint64_t)a3, (uint64_t)v14);
  if (!(_DWORD)v15)
  {
    v16 = *(const __CFArray **)(a1 + 48);
    if (v16)
      ConnectCrossTrackMacroProperties(a1, v16);
  }
  if (v13)
    CFRelease(v13);
  if (v14)
    CFRelease(v14);
LABEL_14:
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
  return v15;
}

void SetTrackMacroPropertyStateTracks(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v4;

  if (cf)
    v4 = CFRetain(cf);
  else
    v4 = 0;
  *(_QWORD *)(a1 + 48) = v4;
  ConnectCrossTrackMacroProperties(a1, (CFArrayRef)cf);
}

void ReviseTrackMacroPropertyStateTracks(uint64_t a1, CFTypeRef cf, CFArrayRef theArray, CFArrayRef a4)
{
  const __CFArray *v6;
  const void *v9;
  const void *v10;

  v6 = *(const __CFArray **)(a1 + 48);
  if (cf)
  {
    if (v6)
    {
      if (a4 && CFArrayGetCount(a4))
        DisconnectCrossTrackMacroProperties(a1, a4);
      if (theArray && CFArrayGetCount(theArray))
        ConnectCrossTrackMacroProperties(a1, theArray);
      v9 = *(const void **)(a1 + 48);
      *(_QWORD *)(a1 + 48) = cf;
      CFRetain(cf);
      if (v9)
        CFRelease(v9);
    }
    else
    {
      *(_QWORD *)(a1 + 48) = CFRetain(cf);
      ConnectCrossTrackMacroProperties(a1, (CFArrayRef)cf);
    }
  }
  else
  {
    DisconnectCrossTrackMacroProperties(a1, v6);
    v10 = *(const void **)(a1 + 48);
    if (v10)
    {
      CFRelease(v10);
      *(_QWORD *)(a1 + 48) = 0;
    }
  }
}

void LockTrackMacroPropertyState()
{
  JUMPOUT(0x19402EA0CLL);
}

void UnlockTrackMacroPropertyState()
{
  JUMPOUT(0x19402EA24);
}

uint64_t GetTrackMacroPropertyDefinitions(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

CFStringRef AssetCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigAsset %p]"), a1);
}

CFStringRef AssetTrackCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigAssetTrack %p]"), a1);
}

uint64_t RegisterTrackMacroPropertyStateType(uint64_t *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

double trackMacroPropertyState_Init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void trackMacroPropertyState_Finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  if (*(_QWORD *)(a1 + 16) && *(_QWORD *)(a1 + 48))
  {
    MEMORY[0x19402EA0C]();
    DisconnectCrossTrackMacroProperties(a1, *(CFArrayRef *)(a1 + 48));
    MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
  }
  FigSimpleMutexDestroy();
  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 32);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 48);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(a1 + 24);
  if (v5)
    CFRelease(v5);
  objc_destroyWeak((id *)(a1 + 56));
}

__CFString *trackMacroPropertyState_CopyDebugDesc(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("TrackMacroPropertyState %p"), a1);
  return Mutable;
}

void CrossTrackMacroPropertyNotificationCallback(uint64_t a1, uint64_t a2, const void *a3, const void *a4, const __CFDictionary *a5)
{
  uint64_t v9;
  void *v10;
  const void *v11;
  const void *v12;
  __CFSet *v13;
  dispatch_queue_t *v14;
  dispatch_queue_t *v15;
  void *value;

  v9 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v9)
  {
    v10 = (void *)v9;
    v11 = CFDictionaryGetValue(a5, CFSTR("assetPayload_Property"));
    value = 0;
    MEMORY[0x19402EA0C](*(_QWORD *)(a2 + 16));
    if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a2 + 40), v11, (const void **)&value)
      && CFSetGetCount((CFSetRef)value))
    {
      if (CFEqual(a3, CFSTR("assetTrackNotice_PropertyFailedToLoad")))
      {
        FigCFDictionaryGetIntIfPresent();
        v12 = CFDictionaryGetValue(a5, CFSTR("assetPayload_CFError"));
        v13 = (__CFSet *)value;
        CFSetApplyFunction((CFSetRef)value, (CFSetApplierFunction)RemoveCrossTrackListenersFromTracksInSet, (void *)a2);
        CFSetRemoveAllValues(v13);
      }
      else
      {
        CFSetRemoveValue((CFMutableSetRef)value, a4);
        v12 = 0;
      }
      if (!CFSetGetCount((CFSetRef)value))
      {
        v14 = (dispatch_queue_t *)MEMORY[0x19402D578](a2 + 56);
        if (v14)
        {
          v15 = v14;
          StoreByProduct(v14, v11, 0, v12, 0);
          CFRelease(v15);
        }
      }
    }
    MEMORY[0x19402EA24](*(_QWORD *)(a2 + 16));
    if (GetAssetDeferredReleaseQueue_createQueueOnce != -1)
      dispatch_once_f(&GetAssetDeferredReleaseQueue_createQueueOnce, 0, (dispatch_function_t)CreateAssetDeferredReleaseQueue);
    dispatch_async_f((dispatch_queue_t)gCommonAssetDeferredReleaseQueue, v10, (dispatch_function_t)DeferredReleaseCFType);
  }
}

uint64_t RemoveCrossTrackListenersFromTracksInSet()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return FigNotificationCenterRemoveWeakListeners();
}

uint64_t CreateAssetDeferredReleaseQueue()
{
  uint64_t result;

  result = FigDispatchQueueCreateWithPriority();
  gCommonAssetDeferredReleaseQueue = result;
  return result;
}

uint64_t FigAssetDownloadStorageManagementSetContentTypeForAssetAtURL(const __CFURL *a1, const void *a2, const void *a3)
{
  void *v6;
  CFTypeID v7;
  CFTypeID v8;
  CFTypeID v9;
  __CFString *URLString;
  void *v11;
  void *v12;
  uint64_t v13;

  v6 = (void *)MEMORY[0x19403137C]();
  if (figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded != -1)
    dispatch_once(&figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded, &__block_literal_global_80);
  if (sCacheManagementAssetClass)
  {
    if (a1
      && (v7 = CFGetTypeID(a1), v7 == CFURLGetTypeID())
      && a2
      && (v8 = CFGetTypeID(a2), v8 == CFStringGetTypeID())
      && a3
      && (v9 = CFGetTypeID(a3), v9 == CFStringGetTypeID())
      && FigFileDoesFileExist())
    {
      URLString = (__CFString *)figStorageManagementCreateURLString(a1);
      if (URLString)
      {
        v11 = (void *)objc_msgSend((id)sCacheManagementAssetClass, "assetFromFile:withIdentifier:", URLString, a2);
        if (!v11)
        {
          v13 = FigSignalErrorAt();
          goto LABEL_15;
        }
        v12 = v11;
        objc_msgSend(v11, "setContentType:", a3);
        objc_msgSend(v12, "commit");
      }
      else
      {
        FigSignalErrorAt();
      }
      v13 = 0;
    }
    else
    {
      v13 = FigSignalErrorAt();
      URLString = 0;
    }
  }
  else
  {
    URLString = 0;
    v13 = 4294949823;
  }
LABEL_15:

  objc_autoreleasePoolPop(v6);
  return v13;
}

CFStringRef figStorageManagementCreateURLString(const __CFURL *a1)
{
  const __CFURL *v1;
  const __CFURL *v2;
  CFStringRef v3;

  if (!a1)
    return 0;
  v1 = CFURLCopyAbsoluteURL(a1);
  if (!v1)
  {
    FigSignalErrorAt();
    return 0;
  }
  v2 = v1;
  v3 = CFURLCopyFileSystemPath(v1, kCFURLPOSIXPathStyle);
  if (!v3)
    FigSignalErrorAt();
  CFRelease(v2);
  return v3;
}

uint64_t FigAssetDownloadStorageManagementSetDownloadStartDateForAssetAtURL(const __CFURL *a1, const void *a2, uint64_t a3)
{
  void *v6;
  CFTypeID v7;
  CFTypeID v8;
  __CFString *URLString;
  void *v10;
  void *v11;
  uint64_t v12;

  v6 = (void *)MEMORY[0x19403137C]();
  if (figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded != -1)
    dispatch_once(&figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded, &__block_literal_global_80);
  if (sCacheManagementAssetClass)
  {
    if (a1
      && (v7 = CFGetTypeID(a1), v7 == CFURLGetTypeID())
      && a2
      && (v8 = CFGetTypeID(a2), v8 == CFStringGetTypeID())
      && FigFileDoesFileExist())
    {
      URLString = (__CFString *)figStorageManagementCreateURLString(a1);
      if (URLString)
      {
        v10 = (void *)objc_msgSend((id)sCacheManagementAssetClass, "assetFromFile:withIdentifier:", URLString, a2);
        if (!v10)
        {
          v12 = FigSignalErrorAt();
          goto LABEL_13;
        }
        v11 = v10;
        objc_msgSend(v10, "setDownloadStartDate:", a3);
        objc_msgSend(v11, "commit");
      }
      else
      {
        FigSignalErrorAt();
      }
      v12 = 0;
    }
    else
    {
      v12 = FigSignalErrorAt();
      URLString = 0;
    }
  }
  else
  {
    URLString = 0;
    v12 = 4294949823;
  }
LABEL_13:

  objc_autoreleasePoolPop(v6);
  return v12;
}

uint64_t FigAssetDownloadStorageManagementCopyDownloadStartDateForAssetAtURL(const void *a1, const void *a2, _QWORD *a3)
{
  void *v6;
  CFTypeID v7;
  CFTypeID v8;
  CFStringRef URLString;
  CFTypeRef v10;
  void *v11;
  CFTypeRef v12;
  uint64_t v13;

  v6 = (void *)MEMORY[0x19403137C]();
  if (figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded != -1)
    dispatch_once(&figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded, &__block_literal_global_80);
  if (sCacheManagementAssetClass)
  {
    if (!a1)
      goto LABEL_19;
    v7 = CFGetTypeID(a1);
    if (v7 != CFURLGetTypeID())
      goto LABEL_19;
    if (!a2)
      goto LABEL_19;
    v8 = CFGetTypeID(a2);
    if (v8 != CFStringGetTypeID() || !FigFileDoesFileExist())
      goto LABEL_19;
    URLString = figStorageManagementCreateURLString((const __CFURL *)a1);
    v10 = (id)CFMakeCollectable(URLString);
    if (!v10)
    {
      FigSignalErrorAt();
      v13 = 0;
      goto LABEL_14;
    }
    v11 = (void *)objc_msgSend((id)sCacheManagementAssetClass, "assetFromFile:withIdentifier:", v10, a2);
    if (!v11)
    {
LABEL_19:
      v13 = FigSignalErrorAt();
      goto LABEL_14;
    }
    v12 = (CFTypeRef)objc_msgSend(v11, "downloadStartDate");
    if (v12)
      v12 = CFRetain(v12);
    v13 = 0;
    *a3 = v12;
  }
  else
  {
    v13 = 4294949823;
  }
LABEL_14:
  objc_autoreleasePoolPop(v6);
  return v13;
}

uint64_t FigAssetDownloadStorageManagementSetDownloadCompletionDateForAssetAtURL(const __CFURL *a1, const void *a2, uint64_t a3)
{
  void *v6;
  CFTypeID v7;
  CFTypeID v8;
  __CFString *URLString;
  void *v10;
  void *v11;
  uint64_t v12;

  v6 = (void *)MEMORY[0x19403137C]();
  if (figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded != -1)
    dispatch_once(&figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded, &__block_literal_global_80);
  if (sCacheManagementAssetClass)
  {
    if (a1
      && (v7 = CFGetTypeID(a1), v7 == CFURLGetTypeID())
      && a2
      && (v8 = CFGetTypeID(a2), v8 == CFStringGetTypeID())
      && FigFileDoesFileExist())
    {
      URLString = (__CFString *)figStorageManagementCreateURLString(a1);
      if (URLString)
      {
        v10 = (void *)objc_msgSend((id)sCacheManagementAssetClass, "assetFromFile:withIdentifier:", URLString, a2);
        if (!v10)
        {
          v12 = FigSignalErrorAt();
          goto LABEL_13;
        }
        v11 = v10;
        objc_msgSend(v10, "setDownloadCompletionDate:", a3);
        objc_msgSend(v11, "commit");
      }
      else
      {
        FigSignalErrorAt();
      }
      v12 = 0;
    }
    else
    {
      v12 = FigSignalErrorAt();
      URLString = 0;
    }
  }
  else
  {
    URLString = 0;
    v12 = 4294949823;
  }
LABEL_13:

  objc_autoreleasePoolPop(v6);
  return v12;
}

uint64_t FigAssetDownloadStorageManagementCopyDownloadCompletionDateForAssetAtURL(const void *a1, const void *a2, _QWORD *a3)
{
  void *v6;
  CFTypeID v7;
  CFTypeID v8;
  CFStringRef URLString;
  CFTypeRef v10;
  void *v11;
  CFTypeRef v12;
  uint64_t v13;

  v6 = (void *)MEMORY[0x19403137C]();
  if (figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded != -1)
    dispatch_once(&figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded, &__block_literal_global_80);
  if (sCacheManagementAssetClass)
  {
    if (!a1)
      goto LABEL_16;
    v7 = CFGetTypeID(a1);
    if (v7 != CFURLGetTypeID())
      goto LABEL_16;
    if (!a2)
      goto LABEL_16;
    v8 = CFGetTypeID(a2);
    if (v8 != CFStringGetTypeID() || !a3 || !FigFileDoesFileExist())
      goto LABEL_16;
    URLString = figStorageManagementCreateURLString((const __CFURL *)a1);
    v10 = (id)CFMakeCollectable(URLString);
    if (!v10)
    {
      FigSignalErrorAt();
      v13 = 0;
      goto LABEL_15;
    }
    v11 = (void *)objc_msgSend((id)sCacheManagementAssetClass, "assetFromFile:withIdentifier:", v10, a2);
    if (v11)
    {
      v12 = (CFTypeRef)objc_msgSend(v11, "downloadCompletionDate");
      if (v12)
        v12 = CFRetain(v12);
      v13 = 0;
      *a3 = v12;
    }
    else
    {
LABEL_16:
      v13 = FigSignalErrorAt();
    }
  }
  else
  {
    v13 = 4294949823;
  }
LABEL_15:
  objc_autoreleasePoolPop(v6);
  return v13;
}

uint64_t FigAssetDownloadStorageManagementCopyLastPlayedOutDateForAssetAtURL(const void *a1, const void *a2, _QWORD *a3)
{
  void *v6;
  CFTypeID v7;
  CFTypeID v8;
  CFStringRef URLString;
  CFTypeRef v10;
  void *v11;
  CFTypeRef v12;
  uint64_t v13;

  v6 = (void *)MEMORY[0x19403137C]();
  if (figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded != -1)
    dispatch_once(&figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded, &__block_literal_global_80);
  if (sCacheManagementAssetClass)
  {
    if (!a1)
      goto LABEL_19;
    v7 = CFGetTypeID(a1);
    if (v7 != CFURLGetTypeID())
      goto LABEL_19;
    if (!a2)
      goto LABEL_19;
    v8 = CFGetTypeID(a2);
    if (v8 != CFStringGetTypeID() || !FigFileDoesFileExist())
      goto LABEL_19;
    URLString = figStorageManagementCreateURLString((const __CFURL *)a1);
    v10 = (id)CFMakeCollectable(URLString);
    if (!v10)
    {
      FigSignalErrorAt();
      v13 = 0;
      goto LABEL_14;
    }
    v11 = (void *)objc_msgSend((id)sCacheManagementAssetClass, "assetFromFile:withIdentifier:", v10, a2);
    if (!v11)
    {
LABEL_19:
      v13 = FigSignalErrorAt();
      goto LABEL_14;
    }
    v12 = (CFTypeRef)objc_msgSend(v11, "consumedDate");
    if (v12)
      v12 = CFRetain(v12);
    v13 = 0;
    *a3 = v12;
  }
  else
  {
    v13 = 4294949823;
  }
LABEL_14:
  objc_autoreleasePoolPop(v6);
  return v13;
}

uint64_t FigAssetDownloadStorageManagementSetLastPlayedDateForAssetAtURL(const __CFURL *a1, const void *a2, uint64_t a3, int a4)
{
  void *v8;
  CFTypeID v9;
  CFTypeID v10;
  __CFString *URLString;
  void *v12;
  void *v13;
  uint64_t v14;

  v8 = (void *)MEMORY[0x19403137C]();
  if (figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded != -1)
    dispatch_once(&figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded, &__block_literal_global_80);
  if (sCacheManagementAssetClass)
  {
    if (a1
      && (v9 = CFGetTypeID(a1), v9 == CFURLGetTypeID())
      && a2
      && (v10 = CFGetTypeID(a2), v10 == CFStringGetTypeID())
      && FigFileDoesFileExist())
    {
      URLString = (__CFString *)figStorageManagementCreateURLString(a1);
      if (URLString)
      {
        v12 = (void *)objc_msgSend((id)sCacheManagementAssetClass, "assetFromFile:withIdentifier:", URLString, a2);
        if (!v12)
        {
          v14 = FigSignalErrorAt();
          goto LABEL_15;
        }
        v13 = v12;
        objc_msgSend(v12, "setLastViewedDate:", a3);
        if (a4)
          objc_msgSend(v13, "setConsumedDate:", a3);
        objc_msgSend(v13, "commit");
      }
      else
      {
        FigSignalErrorAt();
      }
      v14 = 0;
    }
    else
    {
      v14 = FigSignalErrorAt();
      URLString = 0;
    }
  }
  else
  {
    URLString = 0;
    v14 = 4294949823;
  }
LABEL_15:

  objc_autoreleasePoolPop(v8);
  return v14;
}

uint64_t FigAssetDownloadStorageManagementCopyLastPlayedDateForAssetAtURL(const void *a1, const void *a2, _QWORD *a3)
{
  void *v6;
  CFTypeID v7;
  CFTypeID v8;
  CFStringRef URLString;
  CFTypeRef v10;
  void *v11;
  CFTypeRef v12;
  uint64_t v13;

  v6 = (void *)MEMORY[0x19403137C]();
  if (figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded != -1)
    dispatch_once(&figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded, &__block_literal_global_80);
  if (sCacheManagementAssetClass)
  {
    if (!a1)
      goto LABEL_19;
    v7 = CFGetTypeID(a1);
    if (v7 != CFURLGetTypeID())
      goto LABEL_19;
    if (!a2)
      goto LABEL_19;
    v8 = CFGetTypeID(a2);
    if (v8 != CFStringGetTypeID() || !FigFileDoesFileExist())
      goto LABEL_19;
    URLString = figStorageManagementCreateURLString((const __CFURL *)a1);
    v10 = (id)CFMakeCollectable(URLString);
    if (!v10)
    {
      FigSignalErrorAt();
      v13 = 0;
      goto LABEL_14;
    }
    v11 = (void *)objc_msgSend((id)sCacheManagementAssetClass, "assetFromFile:withIdentifier:", v10, a2);
    if (!v11)
    {
LABEL_19:
      v13 = FigSignalErrorAt();
      goto LABEL_14;
    }
    v12 = (CFTypeRef)objc_msgSend(v11, "lastViewedDate");
    if (v12)
      v12 = CFRetain(v12);
    v13 = 0;
    *a3 = v12;
  }
  else
  {
    v13 = 4294949823;
  }
LABEL_14:
  objc_autoreleasePoolPop(v6);
  return v13;
}

uint64_t FigAssetDownloadStorageManagementSetExpirationDateForAssetAtURL(const __CFURL *a1, const void *a2, uint64_t a3)
{
  void *v6;
  CFTypeID v7;
  CFTypeID v8;
  __CFString *URLString;
  void *v10;
  void *v11;
  uint64_t v12;

  v6 = (void *)MEMORY[0x19403137C]();
  if (figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded != -1)
    dispatch_once(&figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded, &__block_literal_global_80);
  if (sCacheManagementAssetClass)
  {
    if (a1
      && (v7 = CFGetTypeID(a1), v7 == CFURLGetTypeID())
      && a2
      && (v8 = CFGetTypeID(a2), v8 == CFStringGetTypeID())
      && FigFileDoesFileExist())
    {
      URLString = (__CFString *)figStorageManagementCreateURLString(a1);
      if (URLString)
      {
        v10 = (void *)objc_msgSend((id)sCacheManagementAssetClass, "assetFromFile:withIdentifier:", URLString, a2);
        if (!v10)
        {
          v12 = FigSignalErrorAt();
          goto LABEL_13;
        }
        v11 = v10;
        objc_msgSend(v10, "setExpirationDate:", a3);
        objc_msgSend(v11, "commit");
      }
      else
      {
        FigSignalErrorAt();
      }
      v12 = 0;
    }
    else
    {
      v12 = FigSignalErrorAt();
      URLString = 0;
    }
  }
  else
  {
    URLString = 0;
    v12 = 4294949823;
  }
LABEL_13:

  objc_autoreleasePoolPop(v6);
  return v12;
}

uint64_t FigAssetDownloadStorageManagementCopyExpirationDateForAssetAtURL(const void *a1, const void *a2, _QWORD *a3)
{
  void *v6;
  CFTypeID v7;
  CFTypeID v8;
  CFStringRef URLString;
  CFTypeRef v10;
  void *v11;
  CFTypeRef v12;
  uint64_t v13;

  v6 = (void *)MEMORY[0x19403137C]();
  if (figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded != -1)
    dispatch_once(&figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded, &__block_literal_global_80);
  if (sCacheManagementAssetClass)
  {
    if (!a1)
      goto LABEL_19;
    v7 = CFGetTypeID(a1);
    if (v7 != CFURLGetTypeID())
      goto LABEL_19;
    if (!a2)
      goto LABEL_19;
    v8 = CFGetTypeID(a2);
    if (v8 != CFStringGetTypeID() || !FigFileDoesFileExist())
      goto LABEL_19;
    URLString = figStorageManagementCreateURLString((const __CFURL *)a1);
    v10 = (id)CFMakeCollectable(URLString);
    if (!v10)
    {
      FigSignalErrorAt();
      v13 = 0;
      goto LABEL_14;
    }
    v11 = (void *)objc_msgSend((id)sCacheManagementAssetClass, "assetFromFile:withIdentifier:", v10, a2);
    if (!v11)
    {
LABEL_19:
      v13 = FigSignalErrorAt();
      goto LABEL_14;
    }
    v12 = (CFTypeRef)objc_msgSend(v11, "expirationDate");
    if (v12)
      v12 = CFRetain(v12);
    v13 = 0;
    *a3 = v12;
  }
  else
  {
    v13 = 4294949823;
  }
LABEL_14:
  objc_autoreleasePoolPop(v6);
  return v13;
}

uint64_t FigAssetDownloadStorageManagementSetPriorityForAssetAtURL(const void *a1, const void *a2, int a3)
{
  void *v6;
  CFTypeID v7;
  CFTypeID v8;
  __CFString *URLString;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  v6 = (void *)MEMORY[0x19403137C]();
  if (figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded != -1)
    dispatch_once(&figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded, &__block_literal_global_80);
  if (!sCacheManagementAssetClass)
  {
    URLString = 0;
    v13 = 4294949823;
    goto LABEL_18;
  }
  if (!a1
    || (v7 = CFGetTypeID(a1), v7 != CFURLGetTypeID())
    || !a2
    || (v8 = CFGetTypeID(a2), v8 != CFStringGetTypeID())
    || !FigFileDoesFileExist())
  {
    v13 = FigSignalErrorAt();
    URLString = 0;
    goto LABEL_18;
  }
  URLString = (__CFString *)figStorageManagementCreateURLString((const __CFURL *)a1);
  if (!URLString)
  {
    FigSignalErrorAt();
    goto LABEL_16;
  }
  v10 = (void *)objc_msgSend((id)sCacheManagementAssetClass, "assetFromFile:withIdentifier:", URLString, a2);
  if (!v10)
    goto LABEL_17;
  v11 = v10;
  if (a3 == 1)
  {
    v12 = 3;
    goto LABEL_15;
  }
  if (a3)
  {
LABEL_17:
    v13 = FigSignalErrorAt();
    goto LABEL_18;
  }
  v12 = 1;
LABEL_15:
  objc_msgSend(v10, "setPriority:", v12);
  objc_msgSend(v11, "commit");
LABEL_16:
  v13 = 0;
LABEL_18:

  objc_autoreleasePoolPop(v6);
  return v13;
}

uint64_t FigAssetDownloadStorageManagementCopyPriorityForAssetAtURL(const void *a1, const void *a2, _DWORD *a3)
{
  void *v6;
  CFTypeID v7;
  CFTypeID v8;
  CFStringRef URLString;
  CFTypeRef v10;
  void *v11;
  uint64_t v12;

  v6 = (void *)MEMORY[0x19403137C]();
  if (figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded != -1)
    dispatch_once(&figStorageManagerEnsureCacheDeleteIsLoaded_sCacheDeleteLoaded, &__block_literal_global_80);
  if (sCacheManagementAssetClass)
  {
    if (!a1)
      goto LABEL_17;
    v7 = CFGetTypeID(a1);
    if (v7 != CFURLGetTypeID())
      goto LABEL_17;
    if (!a2)
      goto LABEL_17;
    v8 = CFGetTypeID(a2);
    if (v8 != CFStringGetTypeID() || !FigFileDoesFileExist())
      goto LABEL_17;
    URLString = figStorageManagementCreateURLString((const __CFURL *)a1);
    v10 = (id)CFMakeCollectable(URLString);
    if (!v10)
    {
      FigSignalErrorAt();
      v12 = 0;
      goto LABEL_12;
    }
    v11 = (void *)objc_msgSend((id)sCacheManagementAssetClass, "assetFromFile:withIdentifier:", v10, a2);
    if (!v11)
    {
LABEL_17:
      v12 = FigSignalErrorAt();
      goto LABEL_12;
    }
    v12 = 0;
    *a3 = objc_msgSend(v11, "priority") == 3;
  }
  else
  {
    v12 = 4294949823;
  }
LABEL_12:
  objc_autoreleasePoolPop(v6);
  return v12;
}

void FigAssetDownloadStorageManagementExcludeURLFromBackup(const __CFURL *a1)
{
  CFErrorRef error;

  error = 0;
  CFURLSetResourcePropertyForKey(a1, (CFStringRef)*MEMORY[0x1E0C9B4E8], (CFTypeRef)*MEMORY[0x1E0C9AE50], &error);
  if (error)
    CFRelease(error);
}

uint64_t FigSetImageDataForAssetAtURL(const __CFURL *a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  size_t Length;

  if (!a1 || !theData)
    return FigSignalErrorAt();
  BytePtr = CFDataGetBytePtr(theData);
  Length = CFDataGetLength(theData);
  return figSetExtendedAttributeData(a1, "com.apple.coremedia.asset.image", BytePtr, Length);
}

uint64_t figSetExtendedAttributeData(const __CFURL *a1, const char *a2, const void *a3, size_t a4)
{
  const __CFURL *v8;
  const __CFURL *v9;
  const __CFString *v10;
  const __CFString *v11;
  int v12;
  uint64_t v13;
  uint64_t v15;
  char buffer[1024];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return FigSignalErrorAt();
  if (!FigCFURLIsLocalResource())
    return FigSignalErrorAt();
  if (!a2)
    return FigSignalErrorAt();
  if (!a3)
    return FigSignalErrorAt();
  v8 = CFURLCopyAbsoluteURL(a1);
  if (!v8)
    return FigSignalErrorAt();
  v9 = v8;
  v10 = CFURLCopyFileSystemPath(v8, kCFURLPOSIXPathStyle);
  if (v10)
  {
    v11 = v10;
    if (CFStringGetCString(v10, buffer, 1024, 0x8000100u))
    {
      v12 = setxattr(buffer, a2, a3, a4, 0, 0);
      v13 = 0;
      if (v12)
        v13 = *__error();
    }
    else
    {
      v13 = FigSignalErrorAt();
    }
    CFRelease(v9);
    CFRelease(v11);
    return v13;
  }
  else
  {
    v15 = FigSignalErrorAt();
    CFRelease(v9);
    return v15;
  }
}

uint64_t FigSetNameForAssetAtURL(const __CFURL *a1, uint64_t a2)
{
  const char *CStringPtrAndBufferToFree;
  const char *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a1 && a2 && (CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree()) != 0)
  {
    v4 = CStringPtrAndBufferToFree;
    v5 = strlen(CStringPtrAndBufferToFree);
    v6 = figSetExtendedAttributeData(a1, "com.apple.coremedia.asset.name", v4, v5 + 1);
  }
  else
  {
    v6 = FigSignalErrorAt();
  }
  v7 = v6;
  free(0);
  return v7;
}

CFDataRef MTCopyImageDataForAssetAtURL(const __CFURL *a1)
{
  int ExtendedAttributeData;
  UInt8 *v2;
  const __CFAllocator *v3;
  CFIndex v4;
  const __CFAllocator *GlobalCFAllocatorFigMalloc;
  CFDataRef v6;
  ssize_t v8;
  UInt8 *v9;

  v8 = 0;
  v9 = 0;
  ExtendedAttributeData = figGetExtendedAttributeData(a1, "com.apple.coremedia.asset.image", &v9, &v8);
  v2 = v9;
  if (ExtendedAttributeData)
  {
    v6 = 0;
  }
  else
  {
    v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v4 = v8;
    GlobalCFAllocatorFigMalloc = (const __CFAllocator *)FigGetGlobalCFAllocatorFigMalloc();
    v6 = CFDataCreateWithBytesNoCopy(v3, v2, v4, GlobalCFAllocatorFigMalloc);
    if (v6)
    {
      v2 = 0;
      v9 = 0;
    }
    else
    {
      v2 = v9;
    }
  }
  free(v2);
  return v6;
}

uint64_t figGetExtendedAttributeData(const __CFURL *a1, const char *a2, _QWORD *a3, ssize_t *a4)
{
  const __CFURL *v8;
  const __CFURL *v9;
  const __CFString *v10;
  const __CFString *v11;
  ssize_t v12;
  size_t v13;
  void *v14;
  ssize_t v15;
  uint64_t v16;
  int *v18;
  char buffer[1024];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a1 || !FigCFURLIsLocalResource() || !a3 || !a4 || (v8 = CFURLCopyAbsoluteURL(a1)) == 0)
  {
    v16 = FigSignalErrorAt();
LABEL_15:
    v14 = 0;
    goto LABEL_13;
  }
  v9 = v8;
  v10 = CFURLCopyFileSystemPath(v8, kCFURLPOSIXPathStyle);
  if (!v10)
  {
    v16 = FigSignalErrorAt();
    CFRelease(v9);
    goto LABEL_15;
  }
  v11 = v10;
  if (!CFStringGetCString(v10, buffer, 1024, 0x8000100u))
  {
    v14 = 0;
    v16 = 4294954516;
    goto LABEL_12;
  }
  v12 = getxattr(buffer, a2, 0, 0, 0, 0);
  if (v12 <= 0)
  {
    v18 = __error();
    v14 = 0;
LABEL_21:
    v16 = *v18;
    goto LABEL_12;
  }
  v13 = v12;
  v14 = malloc_type_calloc(1uLL, v12, 0xBA71CC5DuLL);
  if (!v14)
  {
    v16 = 4294954510;
    goto LABEL_12;
  }
  v15 = getxattr(buffer, a2, v14, v13, 0, 0);
  if (v15 <= 0)
  {
    v18 = __error();
    goto LABEL_21;
  }
  v16 = 0;
  *a3 = v14;
  *a4 = v15;
  v14 = 0;
LABEL_12:
  CFRelease(v9);
  CFRelease(v11);
LABEL_13:
  free(v14);
  return v16;
}

CFStringRef MTCopyNameForAssetAtURL(const __CFURL *a1)
{
  int ExtendedAttributeData;
  UInt8 *v2;
  const __CFAllocator *v3;
  CFIndex v4;
  const __CFAllocator *GlobalCFAllocatorFigMalloc;
  CFStringRef v6;
  ssize_t v8;
  UInt8 *v9;

  v8 = 0;
  v9 = 0;
  ExtendedAttributeData = figGetExtendedAttributeData(a1, "com.apple.coremedia.asset.name", &v9, &v8);
  v2 = v9;
  if (ExtendedAttributeData)
  {
    v6 = 0;
  }
  else
  {
    v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v4 = v8;
    GlobalCFAllocatorFigMalloc = (const __CFAllocator *)FigGetGlobalCFAllocatorFigMalloc();
    v6 = CFStringCreateWithBytesNoCopy(v3, v2, v4, 0x8000100u, 0, GlobalCFAllocatorFigMalloc);
    if (v6)
    {
      v2 = 0;
      v9 = 0;
    }
    else
    {
      v2 = v9;
    }
  }
  free(v2);
  return v6;
}

void *__figStorageManagerEnsureCacheDeleteIsLoaded_block_invoke()
{
  void *result;

  result = dlopen("/System/Library/PrivateFrameworks/CacheDelete.framework/CacheDelete", 1);
  if (result)
  {
    result = dlsym(result, "OBJC_CLASS_$_CacheManagementAsset");
    sCacheManagementAssetClass = (uint64_t)result;
  }
  return result;
}

uint64_t FigValeriaGetClassID()
{
  if (FigValeriaGetClassID_sRegisterFigValeriaTypeOnce != -1)
    dispatch_once(&FigValeriaGetClassID_sRegisterFigValeriaTypeOnce, &__block_literal_global_81);
  return FigValeriaGetClassID_sFigValeriaClassID;
}

CFStringRef val_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<FigValeria %p>"), a1);
}

uint64_t FigValeriaGetTypeID()
{
  if (FigValeriaGetClassID_sRegisterFigValeriaTypeOnce != -1)
    dispatch_once(&FigValeriaGetClassID_sRegisterFigValeriaTypeOnce, &__block_literal_global_81);
  return CMBaseClassGetCFTypeID();
}

void InternalURLAssetCleanupPostPurchaseProcessing(uint64_t a1)
{
  uint64_t v2;
  uint64_t CMBaseObject;
  _QWORD *v4;
  void (*v5)(uint64_t);

  if (!*(_BYTE *)(a1 + 192) && *(_BYTE *)(a1 + 193))
  {
    v2 = *(_QWORD *)(a1 + 296);
    CMNotificationCenterGetDefaultLocalCenter();
    if (v2)
    {
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMBaseObject = CMByteStreamGetCMBaseObject();
      v4 = *(_QWORD **)(CMBaseObjectGetVTable() + 8);
      if (*v4 >= 2uLL)
      {
        v5 = (void (*)(uint64_t))v4[8];
        if (v5)
          v5(CMBaseObject);
      }
      FigThreadAbortQueueForTeardown();
      dispatch_group_wait(*(dispatch_group_t *)(a1 + 296), 0xFFFFFFFFFFFFFFFFLL);
      dispatch_release(*(dispatch_object_t *)(a1 + 296));
      *(_QWORD *)(a1 + 296) = 0;
      dispatch_release(*(dispatch_object_t *)(a1 + 304));
      *(_QWORD *)(a1 + 304) = 0;
    }
    else
    {
      FigNotificationCenterRemoveWeakListener();
    }
  }
}

void URLAssetDoneDownloadingCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  URLAssetDoneDownloadingGuts(a2, a4, a5);
}

void URLAssetReadErrorCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  CFTypeID TypeID;
  void *Value;
  const __CFNumber *v9;
  CFTypeID v10;
  CFDictionaryRef v11;
  int Code;
  CFTypeID v13;
  void *values;
  int valuePtr;
  CFNumberRef number;

  valuePtr = 0;
  values = 0;
  if (!*(_BYTE *)(a2 + 112) && *(_QWORD *)(a2 + 160) == a4)
  {
    if (a5 && (TypeID = CFDictionaryGetTypeID(), TypeID == CFGetTypeID(a5)))
    {
      Value = (void *)CFDictionaryGetValue(a5, CFSTR("CRABS_ReadCFError"));
      values = Value;
    }
    else
    {
      Value = 0;
    }
    v9 = (const __CFNumber *)CFDictionaryGetValue(a5, CFSTR("CRABS_ReadErrorCode"));
    number = v9;
    if (Value && (v10 = CFErrorGetTypeID(), v10 == CFGetTypeID(Value)))
    {
      v11 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)kFigAssetPayloadKey_CFError, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      Code = CFErrorGetCode((CFErrorRef)values);
      valuePtr = Code;
    }
    else if (v9)
    {
      v13 = CFNumberGetTypeID();
      if (v13 == CFGetTypeID(v9))
      {
        v11 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)kFigAssetPayloadKey_Result, (const void **)&number, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        CFNumberGetValue(number, kCFNumberIntType, &valuePtr);
        Code = valuePtr;
      }
      else
      {
        Code = 0;
        v11 = 0;
      }
    }
    else
    {
      Code = 0;
      v11 = 0;
    }
    ReviseDownloadToDestinationResultProperty(a2, Code);
    CFRetain((CFTypeRef)a2);
    CMNotificationCenterGetDefaultLocalCenter();
    FigDeferNotificationToDispatchQueue();
    if (v11)
      CFRelease(v11);
  }
}

void URLAssetDoneBufferingCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CMBaseObject;
  unsigned int (*v6)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v7;
  unsigned int (*v8)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFTypeRef v9;
  CFTypeRef cf;

  v9 = 0;
  cf = 0;
  if (!*(_BYTE *)(a2 + 112) && *(_QWORD *)(a2 + 160) == a4)
  {
    CMBaseObject = CMByteStreamGetCMBaseObject();
    v6 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
    if (v6)
    {
      if (!v6(CMBaseObject, *MEMORY[0x1E0CA2070], 0, &v9))
      {
        v7 = CMByteStreamGetCMBaseObject();
        v8 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
        if (v8)
        {
          if (!v8(v7, *MEMORY[0x1E0CA2068], 0, &cf) && !*(_BYTE *)(a2 + 194) && CFEqual(cf, v9))
          {
            ReviseDownloadToDestinationResultProperty(a2, 0);
            CFRetain((CFTypeRef)a2);
            CMNotificationCenterGetDefaultLocalCenter();
            FigDeferNotificationToDispatchQueue();
          }
        }
      }
    }
  }
  if (cf)
    CFRelease(cf);
  if (v9)
    CFRelease(v9);
}

uint64_t InternalURLAssetEnsureCustomURLLoaderCreated(dispatch_once_t *context)
{
  dispatch_once_t *v2;
  dispatch_once_t v3;

  v3 = context[2];
  v2 = context + 2;
  if (v3 != -1)
    dispatch_once_f(v2, context, (dispatch_function_t)CreateCustomURLLoaderOnceFunc);
  return *((unsigned int *)context + 124);
}

uint64_t CreateCustomURLLoaderOnceFunc(uint64_t a1)
{
  uint64_t result;

  if (*(_QWORD *)(a1 + 488))
    result = 0;
  else
    result = FigCustomURLLoaderCreate();
  *(_DWORD *)(a1 + 496) = result;
  return result;
}

uint64_t InternalURLAssetSetStorageSession(dispatch_queue_t *a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 88) && FigCFDictionaryGetArrayValue())
    return EnsureStorageSessionCreated(a1, a2);
  else
    return 0;
}

uint64_t EnsureStorageSessionCreated(dispatch_queue_t *a1, uint64_t a2)
{
  uint64_t v3;
  const __CFDictionary *Mutable;

  if (*(_BYTE *)(a2 + 288))
    return *(unsigned int *)(a2 + 292);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    if (*(_QWORD *)(a2 + 88))
    {
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
    }
    FigCFDictionarySetValue();
    goto LABEL_7;
  }
  v3 = FigSignalErrorAt();
  if (!(_DWORD)v3)
  {
LABEL_7:
    v3 = FigURLStorageSessionCreate(Mutable, (uint64_t *)(a2 + 528));
    *(_DWORD *)(a2 + 292) = v3;
  }
  *(_BYTE *)(a2 + 288) = 1;
  StoreByProduct(a1, CFSTR("assetProperty_StorageSession"), v3, 0, *(const void **)(a2 + 528));
  if (Mutable)
    CFRelease(Mutable);
  return v3;
}

void InternalURLAssetSetIncrementalFragmentParsingInterval(dispatch_queue_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  v4 = malloc_type_malloc(0x10uLL, 0x1020040EDED9539uLL);
  if (v4)
  {
    v5 = v4;
    *v4 = CFRetain(a1);
    v5[1] = a2;
    dispatch_group_async_f(a1[13], a1[12], v5, (dispatch_function_t)PerformSetIncrementalFragmentParsingInterval);
  }
}

void PerformSetIncrementalFragmentParsingInterval(uint64_t a1)
{
  uint64_t v2;
  CFTypeRef v3;
  unint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  dispatch_time_t v8;

  v3 = *(CFTypeRef *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = v2 & ~(v2 >> 63);
  *((_QWORD *)v3 + 69) = v4;
  if (*((_BYTE *)v3 + 544))
  {
    v5 = *((_QWORD *)v3 + 70);
    if (v5)
    {
      if (v2 < 1)
      {
        v8 = -1;
        v6 = 0;
        v7 = 0;
      }
      else
      {
        v6 = 1000000 * v4;
        v7 = 1000000 * (v4 / 0x64);
        v8 = 0;
      }
      dispatch_source_set_timer(v5, v8, v6, v7);
    }
  }
  CFRelease(*(CFTypeRef *)a1);
  free((void *)a1);
}

uint64_t InternalURLAssetShutdownWorkQueue(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 96);
  if (result)
  {
    *(_BYTE *)(a1 + 112) = 1;
    return FigThreadAbortQueueForTeardown();
  }
  return result;
}

void InternalURLAssetCleanupChangeMonitoring(uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 456))
  {
    if (*(_BYTE *)(a1 + 457))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
    }
    if (*(_BYTE *)(a1 + 458))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
    }
    if (*(_BYTE *)(a1 + 459))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
    }
    if (*(_BYTE *)(a1 + 460))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
    }
    if (*(_QWORD *)(a1 + 448))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      v2 = *(const void **)(a1 + 448);
      if (v2)
      {
        CFRelease(v2);
        *(_QWORD *)(a1 + 448) = 0;
      }
    }
  }
}

void DurationPropertyNotificationCallback(int a1, dispatch_queue_t *cf)
{
  CFRetain(cf);
  dispatch_group_async_f(cf[13], cf[12], cf, (dispatch_function_t)ReviseDurationProperty);
}

void CouldContainFragmentsPropertyNotificationCallback(int a1, dispatch_queue_t *cf)
{
  CFRetain(cf);
  dispatch_group_async_f(cf[13], cf[12], cf, (dispatch_function_t)ReviseCouldContainFragmentsProperty);
}

void ContainsFragmentsPropertyNotificationCallback(int a1, dispatch_queue_t *cf)
{
  CFRetain(cf);
  dispatch_group_async_f(cf[13], cf[12], cf, (dispatch_function_t)ReviseContainsFragmentsProperty);
}

void TracksArrayPropertyNotificationCallback(int a1, dispatch_queue_t *cf)
{
  CFRetain(cf);
  dispatch_group_async_f(cf[13], cf[12], cf, (dispatch_function_t)ReviseTracksArrayProperty);
}

void AssetMutationMonitoringNotificationCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t v7;
  const void *v8;
  CFTypeRef v9;
  NSObject *v10;
  NSObject *v11;
  _QWORD v12[8];

  if (a5 && *(_QWORD *)(a2 + 448))
  {
    v7 = MEMORY[0x19402D578](a2 + 464);
    if (v7)
    {
      v8 = (const void *)v7;
      v9 = CFRetain(*(CFTypeRef *)(a2 + 448));
      CFRetain(a5);
      CFRetain((CFTypeRef)a2);
      CFRetain(v8);
      v11 = *(NSObject **)(a2 + 96);
      v10 = *(NSObject **)(a2 + 104);
      v12[0] = MEMORY[0x1E0C809B0];
      v12[1] = 0x40000000;
      v12[2] = __AssetMutationMonitoringNotificationCallback_block_invoke;
      v12[3] = &__block_descriptor_tmp_100;
      v12[4] = a5;
      v12[5] = a2;
      v12[6] = v8;
      v12[7] = v9;
      dispatch_group_async(v10, v11, v12);
      CFRelease(v8);
    }
  }
}

void InternalURLAssetCleanupIncrementalFragmentProcessing(dispatch_queue_t *a1)
{
  CFRetain(a1);
  dispatch_group_async_f(a1[13], a1[12], a1, (dispatch_function_t)TearDownIncrementalFragmentParsingTimer);
}

void TearDownIncrementalFragmentParsingTimer(CFTypeRef cf)
{
  NSObject *v2;
  void *v3;

  v2 = *((_QWORD *)cf + 70);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)cf + 70));
    *((_QWORD *)cf + 70) = 0;
    *((_BYTE *)cf + 544) = 0;
    v3 = (void *)*((_QWORD *)cf + 71);
    if (v3)
    {
      os_release(v3);
      *((_QWORD *)cf + 71) = 0;
    }
  }
  CFRelease(cf);
}

uint64_t InternalURLAssetEnsureDownloadTokenEstablished(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 56));
  if (*(_BYTE *)(a1 + 32))
  {
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 56));
    return 0;
  }
  v2 = MEMORY[0x19402D578](a1 + 48);
  if (v2)
  {
    v3 = (const void *)v2;
    FigAssetTableAddAsset();
    *(_BYTE *)(a1 + 32) = 1;
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 56));
    CFRelease(v3);
    return 0;
  }
  return 4294954511;
}

uint64_t InternalURLAssetCreateByteStreamProvider(uint64_t a1)
{
  uint64_t v2;
  int v3;
  const void *BaseByteStreamProvider;

  v2 = *(_QWORD *)(a1 + 80);
  if ((v2 & 0x38) != 0)
    v3 = 30;
  else
    v3 = 2;
  if ((v3 & (v2 >> 1)) != 0 && *(_DWORD *)(a1 + 64) == 1431456810)
  {
    FigGetBaseByteStreamProvider();
    return FigByteStreamProviderCreateForBaseURLWithSecurityOptions();
  }
  else
  {
    BaseByteStreamProvider = (const void *)FigGetBaseByteStreamProvider();
    *(_QWORD *)(a1 + 480) = BaseByteStreamProvider;
    if (BaseByteStreamProvider)
      CFRetain(BaseByteStreamProvider);
    return 0;
  }
}

uint64_t InternalURLAssetEnsureContentKeySessionCreated(_QWORD *a1)
{
  uint64_t v2;
  uint64_t DataValue;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, _QWORD, uint64_t);

  MEMORY[0x19402EEEC](a1[7]);
  if (!a1[64]
    && (FigContentKeySessionCreate(*MEMORY[0x1E0C9AE00], a1 + 64)
     || a1[11]
     && (DataValue = FigCFDictionaryGetDataValue()) != 0
     && ((v5 = DataValue,
          v6 = a1[64],
          (v7 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56)) == 0)
      || v7(v6, *MEMORY[0x1E0CA3088], v5))))
  {
    v2 = FigSignalErrorAt();
  }
  else
  {
    v2 = 0;
  }
  MEMORY[0x19402EF04](a1[7]);
  return v2;
}

uint64_t InternalURLAssetEnsureContentKeyBoss(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v5;
  const void **v6;

  MEMORY[0x19402EEEC](a1[7]);
  if (a1[65])
  {
    v2 = 0;
  }
  else
  {
    v3 = *MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v5 = Mutable;
      FigCFDictionarySetValueFromKeyInDict();
      v6 = (const void **)MEMORY[0x1E0C9AE50];
      if ((a1[10] & 0x200) == 0)
        v6 = (const void **)MEMORY[0x1E0C9AE40];
      CFDictionarySetValue(v5, CFSTR("kCKBCO_DoNotLogURLs"), *v6);
      v2 = FigContentKeyCompoundBossCreate(v3, v5, a1 + 65);
      CFRelease(v5);
    }
    else
    {
      v2 = FigSignalErrorAt();
    }
  }
  MEMORY[0x19402EF04](a1[7]);
  return v2;
}

uint64_t InternalURLAssetTransferBytePumpAsync(const void *a1, dispatch_queue_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;

  v8 = malloc_type_calloc(1uLL, 0x38uLL, 0x10A0040CEEF0025uLL);
  if (!v8)
    return FigSignalErrorAt();
  v9 = v8;
  v8[2] = CFRetain(a2);
  v9[3] = CFRetain(a1);
  v9[5] = a3;
  v9[6] = a4;
  dispatch_group_async_f(a2[13], a2[12], v9, (dispatch_function_t)PerformTransferBytePumpAsync);
  return 0;
}

void PerformTransferBytePumpAsync(char *a1)
{
  uint64_t v2;
  dispatch_queue_t *v3;
  int v4;
  int Options;
  const __CFAllocator *v6;
  int v7;
  CFTypeRef v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef v17;
  uint64_t v18;
  void (*v19)(CFTypeRef, uint64_t, __CFString *);
  CFTypeRef v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, __CFString *, uint64_t);
  CFTypeRef v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, __CFString *, _QWORD);
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, __CFString *, _QWORD, CFTypeRef *);
  int v35;
  uint64_t *v36;
  uint64_t v37;
  void (*v38)(uint64_t, __CFString *, _QWORD);
  uint64_t v39;
  CFTypeRef v40;
  void (*v41)(uint64_t, CFTypeRef, __CFString *);
  CFTypeRef v42;
  CFTypeRef cf;
  CFTypeRef v44;

  v2 = *((_QWORD *)a1 + 2);
  v3 = (dispatch_queue_t *)*((_QWORD *)a1 + 3);
  v44 = 0;
  if (*(_BYTE *)(v2 + 112))
  {
    *(_DWORD *)a1 = -12785;
    goto LABEL_35;
  }
  v4 = EnsureBytePump(v3, v2);
  *(_DWORD *)a1 = v4;
  if (v4)
    goto LABEL_29;
  if (*(_DWORD *)(v2 + 380) == 1)
  {
    cf = 0;
    Options = CreateBytePumpCreateOptions(v3, v2, 0, (__CFDictionary **)&v44);
    *(_DWORD *)a1 = Options;
    if (Options)
      goto LABEL_25;
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v7 = FigCFHTTPCreateCommonHTTPHeadersFromAssetCreationOptions((const __CFAllocator *)*MEMORY[0x1E0C9AE00], *(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 336), (__CFDictionary **)&cf);
    *(_DWORD *)a1 = v7;
    if (v7)
      goto LABEL_25;
    *(_DWORD *)a1 = FigBytePumpCreateForICY(v6, *(const void **)(v2 + 176), cf, (const __CFDictionary *)v44, 0, 0, 0, (_QWORD *)a1 + 4);
    v8 = cf;
    if (!cf)
      goto LABEL_25;
LABEL_21:
    CFRelease(v8);
    goto LABEL_25;
  }
  if (*(_BYTE *)(v2 + 376))
  {
    cf = 0;
    v9 = CreateBytePumpCreateOptions(v3, v2, 0, (__CFDictionary **)&v44);
    *(_DWORD *)a1 = v9;
    if (!v9)
    {
      v10 = *MEMORY[0x1E0C9AE00];
      v11 = FigCFHTTPCreateCommonHTTPHeadersFromAssetCreationOptions((const __CFAllocator *)*MEMORY[0x1E0C9AE00], *(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 336), (__CFDictionary **)&cf);
      *(_DWORD *)a1 = v11;
      if (!v11)
      {
        v12 = (uint64_t *)(a1 + 32);
        *(_DWORD *)a1 = CreateSegmentBytePump(v3, v2, cf, (const __CFDictionary *)v44, (CFTypeRef *)a1 + 4);
        if (cf)
          CFRelease(cf);
        v13 = *v12;
        if (*v12)
        {
          v42 = 0;
          FigBytePumpGetFigBaseObject(v13);
          v15 = v14;
          v16 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
          if (v16)
            v16(v15, CFSTR("FBP_ReportingAgent"), v10, &v42);
          v17 = v42;
          if (v42)
          {
            v18 = *(_QWORD *)(v2 + 416);
            if (v18)
            {
              v19 = *(void (**)(CFTypeRef, uint64_t, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 24);
              if (v19)
                v19(v17, v18, CFSTR("startupStats"));
            }
          }
          v8 = v42;
          if (v42)
            goto LABEL_21;
        }
      }
    }
  }
  else
  {
    v20 = *(CFTypeRef *)(v2 + 384);
    if (v20)
      v20 = CFRetain(v20);
    *((_QWORD *)a1 + 4) = v20;
  }
LABEL_25:
  v21 = *(_QWORD *)(v2 + 408);
  if (v21)
  {
    FigBytePumpGetFigBaseObject(*((_QWORD *)a1 + 4));
    v23 = v22;
    v24 = *(void (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v24)
      v24(v23, CFSTR("FBP_PlaylistCache"), v21);
  }
  if (*(_DWORD *)a1)
  {
LABEL_29:
    v25 = *(CFTypeRef *)(v2 + 400);
    if (v25)
      v25 = CFRetain(v25);
    *((_QWORD *)a1 + 1) = v25;
  }
  if (!*(_BYTE *)(v2 + 376))
  {
    cf = 0;
    v31 = *(_QWORD *)(v2 + 384);
    if (v31)
    {
      FigBytePumpGetFigBaseObject(v31);
      v33 = v32;
      v34 = *(void (**)(uint64_t, __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
      if (v34)
        v34(v33, CFSTR("FBP_ReportingAgent"), *MEMORY[0x1E0C9AE00], &cf);
      if (FigIsItOKToLogURLs())
        v35 = (*(unsigned __int8 *)(v2 + 81) >> 1) & 1;
      else
        LOBYTE(v35) = 0;
      v36 = (uint64_t *)(v2 + 416);
      if (!FigReportingAgentCreate(0, 0, 0, 0, 0, 1, 0, v35, (_QWORD *)(v2 + 416)))
      {
        v37 = *v36;
        v38 = *(void (**)(uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
        if (v38)
          v38(v37, CFSTR("IssueEndEvents"), *MEMORY[0x1E0C9AE40]);
        v39 = *v36;
        v40 = cf;
        if (!v39 || !cf)
          goto LABEL_56;
        v41 = *(void (**)(uint64_t, CFTypeRef, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
        if (v41)
          v41(v39, v40, CFSTR("startupStats"));
      }
      v40 = cf;
LABEL_56:
      if (v40)
        CFRelease(v40);
    }
  }
  *(_BYTE *)(v2 + 376) = 1;
  if (v44)
    CFRelease(v44);
LABEL_35:
  v26 = *((_QWORD *)a1 + 4);
  if (v26)
  {
    FigBytePumpGetFigBaseObject(v26);
    v28 = v27;
    v29 = *(void (**)(uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v29)
      v29(v28, CFSTR("FBP_SegmentCache"), 0);
  }
  v30 = *(void **)(v2 + 40);
  if (v30 && !FigAssetDownloadCoordinatorRelinquishAccessToURL(v30))
    *(_QWORD *)(v2 + 40) = 0;
  dispatch_async_f(*(dispatch_queue_t *)(v2 + 472), a1, (dispatch_function_t)PerformCompleteTransferBytePump);
}

void InternalURLAssetCleanupStreamingProcessing(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);

  if (*(_QWORD *)(a1 + 384))
  {
    RemoveBytePumpListenersAndDoBarrier(a1);
    FigBytePumpGetFigBaseObject(*(_QWORD *)(a1 + 384));
    if (v2)
    {
      v3 = v2;
      v4 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v4)
        v4(v3);
    }
  }
}

uint64_t RemoveBytePumpListenersAndDoBarrier(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void (*v5)(uint64_t);

  if (*(_BYTE *)(result + 377))
  {
    v1 = result;
    if (*(_QWORD *)(result + 384))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      FigBytePumpGetFigBaseObject(*(_QWORD *)(v1 + 384));
      v3 = v2;
      v4 = *(_QWORD **)(CMBaseObjectGetVTable() + 8);
      if (*v4 >= 2uLL)
      {
        v5 = (void (*)(uint64_t))v4[8];
        if (v5)
          v5(v3);
      }
      result = FigStopForwardingMediaServicesProcessDeathNotification();
      *(_BYTE *)(v1 + 377) = 0;
    }
  }
  return result;
}

void URLAssetPropertyWorkFunction(void *a1)
{
  uint64_t v2;
  dispatch_queue_t *v3;
  _DWORD *v4;
  const void *v5;
  int v6;
  CFTypeRef v8;
  int v9;
  CFTypeRef v10;
  int v11;
  int v12;
  char __dst[8];

  v2 = *((_QWORD *)a1 + 5);
  if (*(_BYTE *)(v2 + 112))
  {
    v9 = -12785;
    *((_DWORD *)a1 + 4) = -12785;
    goto LABEL_33;
  }
  v3 = *(dispatch_queue_t **)a1;
  v4 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    strncpy(__dst, (const char *)(v2 + 584), 8uLL);
    v5 = (const void *)*((_QWORD *)a1 + 1);
    if (v5)
      CFHash(v5);
    kdebug_trace();
  }
  if (*((_BYTE *)a1 + 48))
  {
    *(_QWORD *)__dst = 0;
    LockTrackMacroPropertyState();
  }
  if (CFEqual(*((CFTypeRef *)a1 + 1), CFSTR("assetProperty_ResolvedURL")))
  {
    if (!*(_BYTE *)(v2 + 168))
    {
      v6 = *(_DWORD *)(v2 + 64);
      if (v6 == 1431456810 || v6 == 708989738)
        EnsureContentStreamCreated(v3, v2);
      *(_BYTE *)(v2 + 168) = 1;
    }
    v8 = *(CFTypeRef *)(v2 + 184);
    if (v8 || (v8 = *(CFTypeRef *)(v2 + 176)) != 0)
      v8 = CFRetain(v8);
    *((_QWORD *)a1 + 3) = v8;
    v9 = *(_DWORD *)(v2 + 172);
    goto LABEL_29;
  }
  if (CFEqual(*((CFTypeRef *)a1 + 1), CFSTR("assetProperty_AssetType")))
  {
    v9 = EnsureAssetTypeEstablished(v3, v2);
    if (v9)
    {
LABEL_29:
      *((_DWORD *)a1 + 4) = v9;
      goto LABEL_30;
    }
    v10 = *(CFTypeRef *)(v2 + 120);
    if (!v10)
    {
LABEL_25:
      *((_QWORD *)a1 + 3) = v10;
      goto LABEL_29;
    }
LABEL_24:
    v10 = CFRetain(v10);
    goto LABEL_25;
  }
  if (CFEqual(*((CFTypeRef *)a1 + 1), CFSTR("assetProperty_ContentByteStream")))
  {
    v9 = EnsureContentStreamCreated(v3, v2);
    v10 = *(CFTypeRef *)(v2 + 160);
    if (!v10)
      goto LABEL_25;
    goto LABEL_24;
  }
  if (!CFEqual(*((CFTypeRef *)a1 + 1), CFSTR("assetProperty_StorageSession")))
  {
    v12 = EnsureAssetTypeEstablished(v3, v2);
    *((_DWORD *)a1 + 4) = v12;
    if (!v12)
    {
      v11 = (*(uint64_t (**)(dispatch_queue_t *, uint64_t, _QWORD, uint64_t))(v2 + 128))(v3, v2, *((_QWORD *)a1 + 1), (uint64_t)a1 + 24);
      goto LABEL_39;
    }
    v9 = v12;
LABEL_33:
    *((_QWORD *)a1 + 4) = AssetCopyLoadError(v2, v9);
    goto LABEL_34;
  }
  v11 = ProduceStorageSessionProperty(v3, v2, (_QWORD *)a1 + 3);
LABEL_39:
  v9 = v11;
  *((_DWORD *)a1 + 4) = v11;
LABEL_30:
  if (*v4 == 1)
  {
    kdebug_trace();
    v9 = *((_DWORD *)a1 + 4);
  }
  if (v9)
    goto LABEL_33;
LABEL_34:
  ReportCompletedPropertyJob(a1);
}

uint64_t ProduceStorageSessionProperty(dispatch_queue_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  CFTypeRef v6;

  v5 = EnsureStorageSessionCreated(a1, a2);
  v6 = *(CFTypeRef *)(a2 + 528);
  if (v6)
    v6 = CFRetain(v6);
  *a3 = v6;
  return v5;
}

uint64_t EnsureAssetTypeEstablished(dispatch_queue_t *a1, uint64_t a2)
{
  unsigned int *v4;
  __CFString **v5;
  int v6;
  CFTypeRef v7;
  const void *v8;
  uint64_t (*v9)(dispatch_queue_t *, uint64_t, const void *, CFDictionaryRef *);
  unsigned int *v10;
  int v12;
  const __CFString *Error;

  if (*(_BYTE *)(a2 + 112))
  {
    v12 = -12785;
  }
  else
  {
    if (*(_BYTE *)(a2 + 113))
    {
      v4 = (unsigned int *)(a2 + 116);
      return *v4;
    }
    if (*(_DWORD *)(a2 + 64) == 709251626)
    {
      v5 = kFigAssetType_FormatReader;
      goto LABEL_10;
    }
    v6 = EnsureContentStreamCreated(a1, a2);
    if (!v6)
    {
      if (*(_BYTE *)(a2 + 192))
      {
        v7 = CFRetain(CFSTR("com.apple.coremedia.assettype.streaming"));
        v8 = v7;
        v9 = ProduceStreamingAssetProperty;
LABEL_11:
        *(_QWORD *)(a2 + 120) = v7;
        *(_QWORD *)(a2 + 128) = v9;
        *(_DWORD *)(a2 + 116) = 0;
        v10 = (unsigned int *)(a2 + 116);
        *((_BYTE *)v10 - 3) = 1;
        StoreByProduct(a1, CFSTR("assetProperty_AssetType"), 0, 0, v8);
        v4 = v10;
        return *v4;
      }
      v5 = kFigAssetType_File;
LABEL_10:
      v7 = CFRetain(*v5);
      v8 = v7;
      v9 = ProduceFormatReaderAssetProperty;
      goto LABEL_11;
    }
    v12 = v6;
  }
  *(_BYTE *)(a2 + 113) = 1;
  *(_DWORD *)(a2 + 116) = v12;
  v4 = (unsigned int *)(a2 + 116);
  Error = AssetCopyLoadError(a2, v12);
  StoreByProduct(a1, CFSTR("assetProperty_AssetType"), *(_DWORD *)(a2 + 116), Error, *(const void **)(a2 + 120));
  if (Error)
    CFRelease(Error);
  return *v4;
}

const __CFString *AssetCopyLoadError(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, __CFString *, _QWORD, CFTypeRef *);
  const __CFString *CFErrorFromFigErrorLog;
  uint64_t CMBaseObject;
  void (*v9)(uint64_t, _QWORD, _QWORD, uint64_t *);
  const void *v10;
  CFTypeRef cf;
  uint64_t v13;

  v13 = 0;
  if (!*(_BYTE *)(a1 + 192))
  {
    if (*(_QWORD *)(a1 + 160))
    {
      CMBaseObject = CMByteStreamGetCMBaseObject();
      v9 = *(void (**)(uint64_t, _QWORD, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v9)
      {
        v9(CMBaseObject, *MEMORY[0x1E0CA2F70], 0, &v13);
        return (const __CFString *)v13;
      }
    }
    else
    {
      v10 = *(const void **)(a1 + 152);
      if (v10)
        return (const __CFString *)CFRetain(v10);
    }
    return 0;
  }
  v2 = *(_QWORD *)(a1 + 384);
  if (!v2)
    return 0;
  cf = 0;
  FigBytePumpGetFigBaseObject(v2);
  v5 = v4;
  v6 = *(void (**)(uint64_t, __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
  if (!v6)
    return 0;
  v6(v5, CFSTR("FBP_ErrorLog"), *MEMORY[0x1E0C9AE00], &cf);
  if (!cf)
    return 0;
  CFErrorFromFigErrorLog = FigCreateCFErrorFromFigErrorLog((const __CFString *)cf, a2);
  CFRelease(cf);
  return CFErrorFromFigErrorLog;
}

uint64_t InternalURLAssetSetShouldPrefetchCryptKeys(const void *a1, dispatch_queue_t *a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = malloc_type_calloc(1uLL, 0x18uLL, 0x1020040A95220FAuLL);
  *v6 = CFRetain(a2);
  v6[1] = CFRetain(a1);
  *((_BYTE *)v6 + 16) = *MEMORY[0x1E0C9AE50] == a3;
  dispatch_group_async_f(a2[13], a2[12], v6, (dispatch_function_t)PerformSetShouldPrefetchCryptKeys);
  return 0;
}

void PerformSetShouldPrefetchCryptKeys(uint64_t a1)
{
  uint64_t v2;
  dispatch_queue_t *v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, __CFString *, _QWORD);

  v2 = *(_QWORD *)a1;
  v3 = *(dispatch_queue_t **)(a1 + 8);
  v4 = *(unsigned __int8 *)(a1 + 16);
  if (!EnsureAssetTypeEstablished(v3, *(_QWORD *)a1))
  {
    v5 = !*(_BYTE *)(v2 + 192) || v4 == 0;
    if (!v5 && *(unsigned __int8 *)(v2 + 379) != v4 && !EnsureBytePump(v3, v2) && *(_QWORD *)(v2 + 384))
    {
      if (_os_feature_enabled_impl())
      {
        if (!EnsureStreamingAssetPropertyLoaderCreated(v3, v2))
          FigStreamingAssetLoaderRequestSessionKeys(*(_QWORD **)(v2 + 504));
      }
      else
      {
        FigBytePumpGetFigBaseObject(*(_QWORD *)(v2 + 384));
        v7 = v6;
        v8 = *(void (**)(uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
        if (v8)
          v8(v7, CFSTR("FBP_PrefetchKeys"), *MEMORY[0x1E0C9AE50]);
      }
    }
  }
  *(_BYTE *)(v2 + 379) = v4;
  CFRelease(*(CFTypeRef *)a1);
  CFRelease(*(CFTypeRef *)(a1 + 8));
  free((void *)a1);
}

void URLAssetTrackPropertyWorkFunction(uint64_t a1)
{
  uint64_t v2;
  _DWORD *v3;
  const void *v4;
  int v5;
  uint64_t CMBaseObject;
  void (*v7)(uint64_t, _QWORD, _QWORD, uint64_t);
  char __dst[8];

  v2 = *(_QWORD *)(a1 + 40);
  v3 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    strncpy(__dst, (const char *)(v2 + 80), 8uLL);
    v4 = *(const void **)(a1 + 8);
    if (v4)
      CFHash(v4);
    kdebug_trace();
  }
  v5 = ProduceAssetTrackProperty(v2, *(CFTypeRef *)(a1 + 8), (_QWORD *)(a1 + 24));
  if (*v3 == 1)
    kdebug_trace();
  *(_DWORD *)(a1 + 16) = v5;
  if (v5)
  {
    if (*(_QWORD *)(v2 + 32))
    {
      CMBaseObject = CMByteStreamGetCMBaseObject();
      v7 = *(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v7)
        v7(CMBaseObject, *MEMORY[0x1E0CA2F70], *MEMORY[0x1E0C9AE00], a1 + 32);
    }
  }
  ReportCompletedPropertyJob((void *)a1);
}

uint64_t ProduceAssetTrackProperty(uint64_t a1, CFTypeRef cf1, _QWORD *a3)
{
  uint64_t FigBaseObject;
  uint64_t (*v7)(uint64_t, __CFString *, _QWORD, __CFArray **);
  __CFString **v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, const __CFString *, _QWORD, __CFArray **);
  __CFArray *v12;
  uint64_t v14;
  const void *Value;
  uint64_t v17;
  __CFString **v18;
  const __CFString *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  __CFString **v24;
  __CFArray *v25;

  v25 = 0;
  if (CFEqual(cf1, CFSTR("FormatDescriptionArray")))
  {
    FigBaseObject = FigTrackReaderGetFigBaseObject(*(_QWORD *)(a1 + 24));
    v7 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD, __CFArray **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
    if (v7)
    {
      v8 = kFigTrackProperty_FormatDescriptionArray;
LABEL_7:
      v9 = v7(FigBaseObject, *v8, *MEMORY[0x1E0C9AE00], &v25);
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (CFEqual(cf1, CFSTR("IsEnabled")))
  {
    FigBaseObject = FigTrackReaderGetFigBaseObject(*(_QWORD *)(a1 + 24));
    v7 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD, __CFArray **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
    if (v7)
    {
      v8 = kFigTrackProperty_Enabled;
      goto LABEL_7;
    }
    goto LABEL_16;
  }
  if (!CFEqual(cf1, CFSTR("IsSelfContained")))
  {
    if (CFEqual(cf1, CFSTR("TotalSampleDataLength")))
    {
      FigBaseObject = FigTrackReaderGetFigBaseObject(*(_QWORD *)(a1 + 24));
      v7 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD, __CFArray **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
      if (v7)
      {
        v8 = kFigTrackProperty_UneditedNumDataBytes;
        goto LABEL_7;
      }
LABEL_16:
      v9 = -12782;
      goto LABEL_17;
    }
    if (CFEqual(cf1, CFSTR("TimeRange")))
    {
      v9 = ProduceTimeRangeAssetTrackProperty(a1, &v25);
      goto LABEL_17;
    }
    if (CFEqual(cf1, CFSTR("MediaPresentationTimeRange")))
    {
      v9 = ProduceMediaPresentationTimeRangeAssetTrackProperty(a1, &v25);
      goto LABEL_17;
    }
    if (CFEqual(cf1, CFSTR("MediaDecodeTimeRange")))
    {
      v9 = ProduceMediaDecodeTimeRangeAssetTrackProperty(a1, &v25);
      goto LABEL_17;
    }
    if (CFEqual(cf1, CFSTR("NaturalTimeScale")))
    {
      v17 = *(_QWORD *)(a1 + 24);
      v18 = kFigTrackProperty_Timescale;
LABEL_52:
      v19 = *v18;
      v20 = *MEMORY[0x1E0C9AE00];
LABEL_53:
      v9 = FigTrackReaderCopyProperty(v17, (uint64_t)v19, v20, (uint64_t)&v25);
      goto LABEL_17;
    }
    if (CFEqual(cf1, CFSTR("EstimatedDataRate")))
    {
      v17 = *(_QWORD *)(a1 + 24);
      v18 = kFigTrackProperty_EstimatedDataRate;
      goto LABEL_52;
    }
    if (CFEqual(cf1, CFSTR("PeakDataRate")))
    {
      v17 = *(_QWORD *)(a1 + 24);
      v18 = kFigTrackProperty_PeakDataRate;
      goto LABEL_52;
    }
    if (CFEqual(cf1, CFSTR("UneditedSampleCount")))
    {
      v17 = *(_QWORD *)(a1 + 24);
      v18 = kFigTrackProperty_UneditedSampleCount;
      goto LABEL_52;
    }
    if (CFEqual(cf1, CFSTR("HasRollInformation")))
    {
      v17 = *(_QWORD *)(a1 + 24);
      v18 = kFigTrackProperty_HasRollInformation;
      goto LABEL_52;
    }
    if (CFEqual(cf1, CFSTR("LanguageCode")))
    {
      v17 = *(_QWORD *)(a1 + 24);
      v18 = kFigTrackProperty_LanguageCode;
      goto LABEL_52;
    }
    if (CFEqual(cf1, CFSTR("MediaCharacteristicArray")))
    {
      v9 = FigMediaCharacteristicsCopyMediaCharacteristicsForTrackReader(*MEMORY[0x1E0C9AE00], *(_QWORD *)(a1 + 24), &v25);
      goto LABEL_17;
    }
    if (CFEqual(cf1, CFSTR("ExtendedLanguageTag")))
    {
      v17 = *(_QWORD *)(a1 + 24);
      v18 = kFigTrackProperty_ExtendedLanguageTagString;
      goto LABEL_52;
    }
    if (CFEqual(cf1, CFSTR("NaturalSize")))
    {
      v21 = *MEMORY[0x1E0C9AE00];
      if (FigTrackReaderCopyProperty(*(_QWORD *)(a1 + 24), (uint64_t)CFSTR("CleanApertureDimensions"), *MEMORY[0x1E0C9AE00], (uint64_t)&v25)|| !v25)
      {
        v17 = *(_QWORD *)(a1 + 24);
        v19 = CFSTR("TrackDimensions");
        v20 = v21;
        goto LABEL_53;
      }
      goto LABEL_61;
    }
    if (CFEqual(cf1, CFSTR("TrackDimensions")))
    {
      v17 = *(_QWORD *)(a1 + 24);
      v18 = kFigTrackProperty_Dimensions;
      goto LABEL_52;
    }
    if (CFEqual(cf1, CFSTR("CleanApertureDimensions")))
    {
      v17 = *(_QWORD *)(a1 + 24);
      v18 = kFigTrackProperty_CleanApertureDimensions;
      goto LABEL_52;
    }
    if (CFEqual(cf1, CFSTR("ProductionApertureDimensions")))
    {
      v17 = *(_QWORD *)(a1 + 24);
      v18 = kFigTrackProperty_ProductionApertureDimensions;
      goto LABEL_52;
    }
    if (CFEqual(cf1, CFSTR("EncodedPixelsDimensions")))
    {
      v17 = *(_QWORD *)(a1 + 24);
      v18 = kFigTrackProperty_EncodedPixelsDimensions;
      goto LABEL_52;
    }
    if (CFEqual(cf1, CFSTR("PreferredTransform")))
    {
      v17 = *(_QWORD *)(a1 + 24);
      v18 = kFigTrackProperty_Matrix;
      goto LABEL_52;
    }
    if (CFEqual(cf1, CFSTR("NominalFrameRate")))
    {
      v17 = *(_QWORD *)(a1 + 24);
      v18 = kFigTrackProperty_NominalFrameRate;
      goto LABEL_52;
    }
    if (CFEqual(cf1, CFSTR("NonDroppableFrameRate")))
    {
      v9 = ProduceAssetTrackNonDroppableFrameRateProperty(a1, &v25);
      goto LABEL_17;
    }
    if (CFEqual(cf1, CFSTR("assetTrackProperty_QuickTimeMetadata")))
    {
      v9 = FigMetadataCopyTrackQuickTimeMetadata(*(_QWORD *)(a1 + 24), *MEMORY[0x1E0C9AE00], &v25);
      goto LABEL_17;
    }
    if (CFEqual(cf1, CFSTR("assetTrackProperty_QuickTimeUserData")))
    {
      v9 = FigMetadataCopyTrackQuickTimeUserdata(*(_QWORD *)(a1 + 24), *MEMORY[0x1E0C9AE00], &v25);
      goto LABEL_17;
    }
    if (CFEqual(cf1, CFSTR("assetTrackProperty_ISOUserData")))
    {
      v9 = FigMetadataCopyTrackISOUserdata(*(_QWORD *)(a1 + 24), *MEMORY[0x1E0C9AE00], &v25);
      goto LABEL_17;
    }
    if (CFEqual(cf1, CFSTR("CommonMetadata")))
    {
      v9 = FigMetadataCopyTrackCommonMetadata(*(_QWORD *)(a1 + 24), (const __CFAllocator *)*MEMORY[0x1E0C9AE00], &v25);
      goto LABEL_17;
    }
    if (CFEqual(cf1, CFSTR("assetTrackProperty_FormatSpecificMetadata")))
    {
      v9 = ProduceFormatSpecificMetadataAssetTrackProperty(*(_QWORD *)(a1 + 24), &v25);
      goto LABEL_17;
    }
    if (CFEqual(cf1, CFSTR("assetTrackProperty_FormatSpecificMetadataFormat")))
    {
      v9 = ProduceFormatSpecificMetadataFormatAssetTrackProperty(*(_QWORD *)(a1 + 24), (uint64_t)&v25);
      goto LABEL_17;
    }
    if (CFEqual(cf1, CFSTR("AvailableMetadataFormats")))
    {
      v9 = ProduceAvailableMetadataFormatsAssetTrackProperty(*(_QWORD *)(a1 + 24), &v25);
      goto LABEL_17;
    }
    if (CFEqual(cf1, CFSTR("IsExcludedFromAutoselection")))
    {
      v17 = *(_QWORD *)(a1 + 24);
      v18 = kFigTrackProperty_ExcludeFromAutoSelection;
      goto LABEL_52;
    }
    if (CFEqual(cf1, CFSTR("Volume")))
    {
      v17 = *(_QWORD *)(a1 + 24);
      v18 = kFigTrackProperty_Volume;
      goto LABEL_52;
    }
    if (CFEqual(cf1, CFSTR("Layer")))
    {
      v17 = *(_QWORD *)(a1 + 24);
      v18 = kFigTrackProperty_Layer;
      goto LABEL_52;
    }
    if (CFEqual(cf1, CFSTR("assetTrackProperty_EditSegmentData")))
    {
      v22 = a1;
      v23 = 0;
    }
    else
    {
      if (!CFEqual(cf1, CFSTR("assetTrackProperty_PresentationSegmentData")))
      {
        if (CFEqual(cf1, CFSTR("assetTrackProperty_EditsExcludeAudioPrimingAndRemainderDuration")))
        {
          v17 = *(_QWORD *)(a1 + 24);
          v18 = kFigTrackProperty_EditsExcludeAudioPrimingAndRemainderDuration;
          goto LABEL_52;
        }
        if (CFEqual(cf1, CFSTR("assetTrackProperty_GaplessSourceTimeRange")))
        {
          ProduceGaplessSourceTimeRangeAssetTrackProperty(a1, &v25);
          goto LABEL_61;
        }
        if (CFEqual(cf1, CFSTR("assetTrackProperty_TrackReferences")))
        {
          v9 = ProduceTrackReferencesTrackProperty(a1, &v25);
          goto LABEL_17;
        }
        if (CFEqual(cf1, CFSTR("LoudnessInfo")))
        {
          v9 = ProduceLoudnessInfoTrackProperty(a1, &v25);
          goto LABEL_17;
        }
        if (CFEqual(cf1, CFSTR("assetTrackProperty_ProtectedStatus")))
        {
          v9 = ProduceProtectedStatusTrackProperty(a1, (CFTypeRef *)&v25);
          goto LABEL_17;
        }
        if (CFEqual(cf1, CFSTR("assetTrackProperty_UsesAudibleDRM")))
        {
          ProduceUsesAudibleDRMTrackProperty(a1, &v25);
          goto LABEL_61;
        }
        if (CFEqual(cf1, CFSTR("assetTrackProperty_AudibleContentIsAuthorized")))
        {
          ProduceAudibleContentIsAuthorizedTrackProperty(a1, &v25);
          goto LABEL_61;
        }
        if (CFEqual(cf1, CFSTR("MinSampleDuration")))
        {
          ProduceMinSampleDurationTrackProperty(a1, &v25);
          goto LABEL_61;
        }
        if (CFEqual(cf1, CFSTR("AlternateGroupID")))
        {
          v24 = kFigTrackProperty_AlternateGroupID;
        }
        else
        {
          if (!CFEqual(cf1, CFSTR("DefaultAlternateGroupID")))
          {
            if (CFEqual(cf1, CFSTR("ProvisionalAlternateGroupID")))
            {
              v17 = *(_QWORD *)(a1 + 24);
              v18 = kFigTrackProperty_ProvisionalAlternateGroupID;
              goto LABEL_52;
            }
            if (CFEqual(cf1, CFSTR("LoadSettings")))
            {
              v17 = *(_QWORD *)(a1 + 24);
              v18 = kFigTrackProperty_QTLoadSettings;
              goto LABEL_52;
            }
            if (CFEqual(cf1, CFSTR("SampleGroupDescriptions")))
            {
              v17 = *(_QWORD *)(a1 + 24);
              v18 = kFigTrackProperty_SampleGroupDescriptions;
              goto LABEL_52;
            }
            if (CFEqual(cf1, CFSTR("HEVCTemporalLevelInfoCombinations")))
            {
              v17 = *(_QWORD *)(a1 + 24);
              v18 = kFigTrackProperty_HEVCTemporalLevelInfoCombinations;
              goto LABEL_52;
            }
            if (CFEqual(cf1, CFSTR("HEVCSyncSampleNALUnitTypes")))
            {
              v17 = *(_QWORD *)(a1 + 24);
              v18 = kFigTrackProperty_HEVCSyncSampleNALUnitTypes;
              goto LABEL_52;
            }
            if (CFEqual(cf1, CFSTR("assetTrackProperty_CameraRollValidation")))
            {
              ProduceAssetTrackCameraRollValidationProperty(a1, &v25);
            }
            else if (CFEqual(cf1, CFSTR("assetTrackProperty_MediaPlaybackValidation")))
            {
              ProduceAssetTrack_MediaPlaybackValidationProperty(a1, &v25);
            }
            else
            {
              if (!CFEqual(cf1, CFSTR("assetTrackProperty_MediaDecodingValidation")))
              {
                if (CFEqual(cf1, CFSTR("assetTrackProperty_ContainsWideColor")))
                {
                  v9 = ProduceAssetTrack_ContainsWideColor(a1, (CFTypeRef *)&v25);
                }
                else if (CFEqual(cf1, CFSTR("assetTrackProperty_LatentBaseDecodeTimeStampOfFirstTrackFragment")))
                {
                  v9 = ProduceAssetTrackLatentBaseDecodeTimeStampOfFirstTrackFragment(a1, &v25);
                }
                else
                {
                  v9 = -12182;
                }
                goto LABEL_17;
              }
              ProduceAssetTrack_MediaDecodingValidationProperty(a1, &v25);
            }
LABEL_61:
            v9 = 0;
            goto LABEL_17;
          }
          v24 = kFigTrackProperty_DefaultAlternateGroupID;
        }
        ProduceAlternateGroupIDTrackPropertyByKey(a1, (uint64_t)*v24, &v25);
        goto LABEL_61;
      }
      v22 = a1;
      v23 = 1;
    }
    v9 = ProduceSegmentDataAssetTrackProperty(v22, v23, &v25);
    goto LABEL_17;
  }
  v10 = FigTrackReaderGetFigBaseObject(*(_QWORD *)(a1 + 24));
  v11 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, __CFArray **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (!v11 || (v9 = v11(v10, CFSTR("TrackIsSelfContained"), *MEMORY[0x1E0C9AE00], &v25), !v25))
  {
    if (*MEMORY[0x1E0C9AE50])
      v12 = (__CFArray *)CFRetain((CFTypeRef)*MEMORY[0x1E0C9AE50]);
    else
      v12 = 0;
    v9 = 0;
    v25 = v12;
  }
LABEL_17:
  if (v9 >> 1 == 2147477256 || v9 == -12787)
    v14 = 0;
  else
    v14 = v9;
  *a3 = v25;
  if (!(_DWORD)v14 && *(_BYTE *)(a1 + 65))
  {
    if (!*(_QWORD *)(a1 + 72))
    {
      if (sBuildPropertyDependencyDictionaryOnce != -1)
        dispatch_once_f(&sBuildPropertyDependencyDictionaryOnce, 0, (dispatch_function_t)BuildPropertyDependencyDictionary);
      *(_QWORD *)(a1 + 72) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
    }
    Value = CFDictionaryGetValue((CFDictionaryRef)sAssetTrackPropertyDependencies, cf1);
    if (Value)
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 72), cf1, Value);
  }
  return v14;
}

void InternalURLAssetTrackStopMonitoringChanges(uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 65))
  {
    if (*(_BYTE *)(a1 + 66))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      *(_BYTE *)(a1 + 66) = 0;
    }
    if (*(_QWORD *)(a1 + 72))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      v2 = *(const void **)(a1 + 72);
      if (v2)
      {
        CFRelease(v2);
        *(_QWORD *)(a1 + 72) = 0;
      }
    }
  }
}

void SegmentDataAssetTrackPropertiesNotificationCallback(int a1, dispatch_queue_t *cf)
{
  CFRetain(cf);
  dispatch_async_f(cf[6], cf, (dispatch_function_t)ReviseSegmentDataAssetTrackProperties);
}

void AssetTrackMutationMonitoringNotificationCallback(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t v7;
  const void *v8;
  NSObject *v9;
  NSObject *v10;
  _QWORD block[7];

  if (a5)
  {
    v7 = MEMORY[0x19402D578](a2 + 5);
    if (v7)
    {
      v8 = (const void *)v7;
      CFRetain(a5);
      CFRetain(a2);
      CFRetain(v8);
      v10 = a2[6];
      v9 = a2[7];
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __AssetTrackMutationMonitoringNotificationCallback_block_invoke;
      block[3] = &__block_descriptor_tmp_12_2;
      block[4] = a5;
      block[5] = a2;
      block[6] = v8;
      dispatch_group_async(v9, v10, block);
      CFRelease(v8);
    }
  }
}

void URLAssetValidationWorkFunction(uint64_t a1)
{
  uint64_t v2;
  dispatch_queue_t *v3;
  dispatch_queue_t *v4;
  BOOL v5;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (dispatch_queue_t *)MEMORY[0x19402D578](v2 + 464);
  v4 = v3;
  if (*(_BYTE *)(v2 + 112))
    v5 = 1;
  else
    v5 = v3 == 0;
  if (!v5)
  {
    *(_DWORD *)(a1 + 24) = ProduceAssetValidationResult(v3, v2, *(const void **)(a1 + 8), *(const void **)(a1 + 16));
    ReportCompletedValidationJob((void *)a1);
LABEL_6:
    CFRelease(v4);
    return;
  }
  *(_DWORD *)(a1 + 24) = -12785;
  ReportCompletedValidationJob((void *)a1);
  if (v4)
    goto LABEL_6;
}

uint64_t ProduceAssetValidationResult(dispatch_queue_t *a1, uint64_t a2, const void *a3, const void *a4)
{
  uint64_t v8;
  uint64_t v9;
  CFTypeRef v11;
  const __CFString *v12;
  uint64_t v13;
  CFTypeRef cf;

  cf = 0;
  if (*(_BYTE *)(a2 + 112))
    return 4294954511;
  v8 = EnsureAssetTypeEstablished();
  if ((_DWORD)v8)
    return v8;
  if (*(_BYTE *)(a2 + 192))
  {
    if (CFEqual(a3, CFSTR("validationCriteria_CameraRoll")))
      return 4294951204;
    else
      return 0;
  }
  if (CFEqual(a3, CFSTR("validationCriteria_Custom")))
  {
    if (a4)
      v11 = CFRetain(a4);
    else
      v11 = 0;
    cf = v11;
LABEL_22:
    if (!v11)
      return 0;
    v13 = EnsureFormatReaderCreated(a1, a2);
    v11 = cf;
    if (!(_DWORD)v13)
    {
      v9 = FigMediaValidatorValidateByteStream(*(_QWORD *)(a2 + 160), *(const void **)(a2 + 240), (const __CFDictionary *)cf);
      v11 = cf;
      if (!cf)
        return v9;
LABEL_25:
      CFRelease(v11);
      return v9;
    }
LABEL_30:
    v9 = v13;
    if (!v11)
      return v9;
    goto LABEL_25;
  }
  if (CFEqual(a3, CFSTR("validationCriteria_CameraRoll")))
  {
    v12 = CFSTR("CameraRollValidator.plist");
    goto LABEL_21;
  }
  if (CFEqual(a3, CFSTR("validationCriteria_MediaPlayback")))
  {
    v12 = CFSTR("MediaValidator.plist");
    goto LABEL_21;
  }
  if (CFEqual(a3, CFSTR("validationCriteria_AirPlayVideo")))
  {
    v12 = CFSTR("AirPlayVideoMediaValidator.plist");
    goto LABEL_21;
  }
  if (CFEqual(a3, CFSTR("validationCriteria_PhotosTranscodingService")))
  {
    v12 = CFSTR("CloudTranscodeValidator.plist");
LABEL_21:
    v13 = FigMediaValidatorCreateMediaValidatorPropertyList((uint64_t)v12, &cf);
    v11 = cf;
    if ((_DWORD)v13)
      goto LABEL_30;
    goto LABEL_22;
  }
  return FigSignalErrorAt();
}

void URLAssetTrackValidationWorkFunction(uint64_t a1)
{
  *(_DWORD *)(a1 + 24) = ProduceAssetTrackValidationResult(*(_QWORD *)(a1 + 32), *(CFTypeRef *)(a1 + 8), *(const void **)(a1 + 16));
  ReportCompletedValidationJob((void *)a1);
}

uint64_t ProduceAssetTrackValidationResult(uint64_t a1, CFTypeRef cf1, const void *a3)
{
  CFTypeRef v6;
  const __CFString *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  CFTypeRef cf;

  cf = 0;
  if (CFEqual(cf1, CFSTR("validationCriteria_Custom")))
  {
    if (!a3)
      return 0;
    v6 = CFRetain(a3);
    cf = v6;
    if (!v6)
      return 0;
LABEL_13:
    v9 = FigMediaValidatorValidateIndividualTrack(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), (const __CFDictionary *)v6);
    goto LABEL_16;
  }
  if (CFEqual(cf1, CFSTR("validationCriteria_CameraRoll")))
  {
    v7 = CFSTR("CameraRollValidator.plist");
  }
  else if (CFEqual(cf1, CFSTR("validationCriteria_MediaPlayback")))
  {
    v7 = CFSTR("MediaValidator.plist");
  }
  else
  {
    if (CFEqual(cf1, CFSTR("validationCriteria_MediaDecoding")))
    {
      v8 = 0;
      v7 = CFSTR("MediaValidator.plist");
      goto LABEL_10;
    }
    if (!CFEqual(cf1, CFSTR("validationCriteria_PhotosTranscodingService")))
    {
      v9 = FigSignalErrorAt();
      goto LABEL_16;
    }
    v7 = CFSTR("CloudTranscodeValidator.plist");
  }
  v8 = 1;
LABEL_10:
  v9 = FigMediaValidatorCreateMediaValidatorPropertyList((uint64_t)v7, &cf);
  if ((_DWORD)v9)
    goto LABEL_16;
  v6 = cf;
  if (!cf)
    return 0;
  if ((v8 & 1) != 0)
    goto LABEL_13;
  v9 = FigMediaValidatorValidateIndividualTrackForDecoding(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), (const __CFDictionary *)cf);
LABEL_16:
  v10 = v9;
  if (cf)
    CFRelease(cf);
  return v10;
}

uint64_t InternalURLAssetCopyChapterData(const void *a1, dispatch_queue_t *a2, unsigned int a3, unsigned int a4, unsigned int a5, _QWORD *a6)
{
  unsigned int *v12;
  uint64_t v13;

  v12 = (unsigned int *)malloc_type_calloc(1uLL, 0x30uLL, 0x106004070AE3097uLL);
  if (v12)
  {
    *((_QWORD *)v12 + 1) = CFRetain(a2);
    *((_QWORD *)v12 + 2) = CFRetain(a1);
    v12[6] = a3;
    v12[7] = a4;
    v12[8] = a5;
    dispatch_sync_f(a2[12], v12, (dispatch_function_t)PerformCopyChapterData);
    CFRelease(*((CFTypeRef *)v12 + 1));
    CFRelease(*((CFTypeRef *)v12 + 2));
    *a6 = *((_QWORD *)v12 + 5);
    v13 = *v12;
  }
  else
  {
    v13 = FigSignalErrorAt();
  }
  free(v12);
  return v13;
}

void PerformCopyChapterData(uint64_t a1)
{
  uint64_t v2;
  dispatch_queue_t *v3;
  int v4;
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v7;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  int v10;
  const __CFNumber *v11;
  const __CFArray *v12;
  const __CFArray *v13;
  const __CFAllocator *v14;
  __CFArray *Mutable;
  CFIndex v16;
  const CFDictionaryValueCallBacks *v17;
  const __CFDictionary *v18;
  const __CFDictionary *v19;
  int v20;
  CFDictionaryRef v21;
  CFDictionaryRef v22;
  CFMutableDictionaryRef v23;
  __CFDictionary *v24;
  const void *v25;
  const void *v26;
  int v27;
  unsigned int valuePtr;
  void *values;

  values = 0;
  valuePtr = 0;
  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    goto LABEL_43;
  v3 = *(dispatch_queue_t **)(a1 + 16);
  if (!v3
    || (*(_DWORD *)(a1 + 24) & 0x80000000) != 0
    || (*(_DWORD *)(a1 + 28) & 0x80000000) != 0
    || *(int *)(a1 + 32) <= 0)
  {
    goto LABEL_43;
  }
  if (!*(_BYTE *)(v2 + 112))
  {
    v4 = EnsureChapterGroupInfoCreated(v3, v2);
    if (v4)
    {
LABEL_44:
      v27 = v4;
      goto LABEL_35;
    }
    v5 = *(const __CFArray **)(v2 + 328);
    if (!v5)
    {
      Mutable = 0;
      v27 = -12175;
LABEL_34:
      *(_QWORD *)(a1 + 40) = Mutable;
LABEL_35:
      Mutable = 0;
      goto LABEL_36;
    }
    Count = CFArrayGetCount(v5);
    v7 = *(int *)(a1 + 24);
    if (Count > v7)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 328), v7);
      Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("chapterGroupKey_Type"));
      v10 = CFEqual(Value, CFSTR("artwork"));
      v11 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("chapterGroupKey_TrackID"));
      CFNumberGetValue(v11, kCFNumberSInt32Type, &valuePtr);
      v12 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, CFSTR("chapterGroupKey_PerChapterInfo"));
      if (!v12)
      {
        Mutable = 0;
LABEL_33:
        v27 = 0;
        goto LABEL_34;
      }
      v13 = v12;
      if (CFArrayGetCount(v12) >= *(int *)(a1 + 32) + (uint64_t)*(int *)(a1 + 28))
      {
        v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
        if (*(int *)(a1 + 32) >= 1)
        {
          v16 = *(int *)(a1 + 28);
          v17 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
          while (1)
          {
            v18 = (const __CFDictionary *)CFArrayGetValueAtIndex(v13, v16);
            if (*(_BYTE *)(v2 + 112))
              goto LABEL_46;
            v19 = v18;
            if (v10)
            {
              v20 = FCSupport_CopyChapterImageData(*(_QWORD *)(v2 + 240), *(_QWORD *)(v2 + 480), valuePtr, v18, (CFDataRef *)&values, 0);
              if (v20)
                goto LABEL_42;
              v21 = CFDictionaryCreate(v14, (const void **)&kFigChapterArtworkDataKey_ImageData, (const void **)&values, 1, MEMORY[0x1E0C9B390], v17);
              if (!v21)
              {
LABEL_41:
                v20 = FigSignalErrorAt();
LABEL_42:
                v27 = v20;
                goto LABEL_36;
              }
              v22 = v21;
              CFArrayAppendValue(Mutable, v21);
              CFRelease(v22);
              if (values)
              {
                CFRelease(values);
                values = 0;
              }
            }
            else
            {
              if (!FCSupport_HasChapterDetails(v18))
              {
                v20 = FCSupport_PopulateChapterTitleDetail(*(_QWORD *)(v2 + 240), valuePtr, *(_QWORD *)(v2 + 480), v19);
                if (v20)
                  goto LABEL_42;
              }
              v23 = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E0C9B390], v17);
              if (!v23)
                goto LABEL_41;
              v24 = v23;
              v25 = CFDictionaryGetValue(v19, CFSTR("ChapterName"));
              if (v25 || (v25 = CFDictionaryGetValue(v19, CFSTR("ChapterHREFText"))) != 0)
                CFDictionaryAddValue(v24, CFSTR("ChapterTitleText"), v25);
              v26 = CFDictionaryGetValue(v19, CFSTR("ChapterHREFURL"));
              if (v26)
                CFDictionaryAddValue(v24, CFSTR("ChapterTitleHREF"), v26);
              CFArrayAppendValue(Mutable, v24);
              CFRelease(v24);
            }
            if (++v16 >= *(int *)(a1 + 32) + (uint64_t)*(int *)(a1 + 28))
              goto LABEL_33;
          }
        }
        goto LABEL_33;
      }
    }
LABEL_43:
    v4 = FigSignalErrorAt();
    goto LABEL_44;
  }
  Mutable = 0;
LABEL_46:
  v27 = -12785;
LABEL_36:
  if (values)
    CFRelease(values);
  if (Mutable)
    CFRelease(Mutable);
  *(_DWORD *)a1 = v27;
}

uint64_t InternalURLAssetFetchChapterDataAsync(const void *a1, dispatch_queue_t *a2, int a3, int a4, int a5)
{
  _QWORD *v10;
  _QWORD *v11;

  v10 = malloc_type_calloc(1uLL, 0x30uLL, 0x106004070AE3097uLL);
  if (!v10)
    return FigSignalErrorAt();
  v11 = v10;
  v10[1] = CFRetain(a2);
  v11[2] = CFRetain(a1);
  *((_DWORD *)v11 + 6) = a3;
  *((_DWORD *)v11 + 7) = a4;
  *((_DWORD *)v11 + 8) = a5;
  dispatch_group_async_f(a2[13], a2[12], v11, (dispatch_function_t)PerformFetchChapterData);
  return 0;
}

void PerformFetchChapterData(_QWORD *a1)
{
  PerformCopyChapterData((uint64_t)a1);
  dispatch_async_f(*(dispatch_queue_t *)(a1[1] + 472), a1, (dispatch_function_t)PerformCompleteChapterJob);
}

const __CFArray *InternalURLAssetLoadValuesAsyncForTrackProperties(const void *a1, dispatch_queue_t *a2, const __CFArray *a3, const __CFArray *a4, _BYTE *a5, _DWORD *a6)
{
  void *v12;
  const __CFAllocator *v13;
  int v14;
  uint64_t v15;
  char v16;
  NSObject *v17;

  v12 = malloc_type_calloc(1uLL, 0x40uLL, 0x1060040E9991D62uLL);
  if (v12)
  {
    *(_QWORD *)v12 = CFRetain(a2);
    *((_QWORD *)v12 + 1) = CFRetain(a1);
    v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    *((_QWORD *)v12 + 3) = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a4);
    if (a6)
    {
      v14 = NewPropertyStoreBatchID();
      *((_DWORD *)v12 + 9) = v14;
      *a6 = v14;
      *((_BYTE *)v12 + 33) = 1;
    }
    if (!a3)
    {
      *((_BYTE *)v12 + 34) = 1;
      dispatch_async_f(a2[12], v12, (dispatch_function_t)PerformMultiTrackBatchLoad);
      goto LABEL_9;
    }
    *((_QWORD *)v12 + 2) = CFArrayCreateCopy(v13, a3);
    v15 = RequestMultiTrackBatches((uint64_t)v12);
    if (!(_DWORD)v15)
    {
      v16 = *((_BYTE *)v12 + 32);
      if (*((_BYTE *)v12 + 33))
      {
        v17 = *((_QWORD *)v12 + 5);
        dispatch_retain(v17);
        dispatch_group_enter(v17);
        dispatch_group_notify_f(v17, a2[59], v12, (dispatch_function_t)FinalizeMultiTrackBatchLoadJob);
        dispatch_group_leave(v17);
        dispatch_release(v17);
      }
      else
      {
        FinalizeMultiTrackBatchLoadJob((uint64_t)v12);
      }
      a3 = 0;
      if (!a5)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  else
  {
    v15 = FigSignalErrorAt();
  }
  a3 = (const __CFArray *)v15;
LABEL_9:
  v16 = 0;
  if (a5)
LABEL_13:
    *a5 = v16;
LABEL_14:
  if ((_DWORD)a3)
    FinalizeMultiTrackBatchLoadJob((uint64_t)v12);
  return a3;
}

void PerformMultiTrackBatchLoad(uint64_t *a1)
{
  uint64_t v2;
  dispatch_queue_t *v3;
  const void *v4;
  NSObject *v5;

  v2 = *a1;
  v3 = (dispatch_queue_t *)a1[1];
  if (!EnsureAssetTypeEstablished(v3, *a1)
    && !*(_BYTE *)(v2 + 192)
    && !EnsureTracksArrayCreated(v3, v2))
  {
    v4 = *(const void **)(v2 + 272);
    if (v4)
    {
      a1[2] = (uint64_t)v4;
      CFRetain(v4);
      if (!RequestMultiTrackBatches((uint64_t)a1) && *((_BYTE *)a1 + 33))
      {
        v5 = a1[5];
        dispatch_retain(v5);
        dispatch_group_enter(v5);
        dispatch_group_notify_f(v5, *(dispatch_queue_t *)(v2 + 472), a1, (dispatch_function_t)FinalizeMultiTrackBatchLoadJob);
        dispatch_group_leave(v5);
        dispatch_release(v5);
        return;
      }
    }
    else if (!FigSignalErrorAt())
    {
      return;
    }
  }
  FinalizeMultiTrackBatchLoadJob((uint64_t)a1);
}

uint64_t RequestMultiTrackBatches(uint64_t a1)
{
  int64_t Count;
  CFIndex v3;
  void *v4;
  CFMutableDictionaryRef Mutable;
  uint64_t v6;
  CFIndex i;
  const void *v8;
  uint64_t v9;
  CFIndex j;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(const void *, uint64_t, unsigned __int8 *, uint64_t);
  int v15;
  int v16;
  BOOL v17;
  char v18;
  CFIndex v19;
  const void *ValueAtIndex;
  uint64_t v21;
  void (*v22)(const void *, uint64_t, unsigned __int8 *, _QWORD);
  BOOL v23;
  char v24;
  unsigned __int8 v26;

  v26 = 0;
  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 16));
  v3 = Count;
  *(_BYTE *)(a1 + 32) = 1;
  if (!*(_BYTE *)(a1 + 33))
  {
    if (Count >= 1)
    {
      v19 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v19);
        v26 = 0;
        v21 = *(_QWORD *)(a1 + 24);
        v22 = *(void (**)(const void *, uint64_t, unsigned __int8 *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 16);
        if (v22)
          v22(ValueAtIndex, v21, &v26, 0);
        if (*(_BYTE *)(a1 + 32))
          v23 = v26 == 0;
        else
          v23 = 1;
        v24 = !v23;
        *(_BYTE *)(a1 + 32) = v24;
        ++v19;
      }
      while (v3 != v19);
    }
    return 0;
  }
  v4 = malloc_type_calloc(Count, 4uLL, 0x100004052888210uLL);
  *(_QWORD *)(a1 + 48) = v4;
  if (v4)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3, MEMORY[0x1E0C9B390], 0);
    *(_QWORD *)(a1 + 56) = Mutable;
    if (Mutable)
    {
      *(_QWORD *)(a1 + 40) = dispatch_group_create();
      if (v3 >= 1)
      {
        v6 = 0;
        for (i = 0; i != v3; ++i)
        {
          v8 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), i);
          CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 56), v8, (const void *)(*(_QWORD *)(a1 + 48) + v6));
          v6 += 4;
        }
        v9 = 0;
        for (j = 0; j != v3; ++j)
        {
          v11 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), j);
          v26 = 0;
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterAddListener();
          dispatch_group_enter(*(dispatch_group_t *)(a1 + 40));
          v12 = *(_QWORD *)(a1 + 24);
          v13 = *(_QWORD *)(a1 + 48);
          v14 = *(uint64_t (**)(const void *, uint64_t, unsigned __int8 *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 16);
          if (v14)
            v15 = v14(v11, v12, &v26, v13 + v9);
          else
            v15 = -12782;
          v16 = v26;
          if (*(_BYTE *)(a1 + 32))
            v17 = v26 == 0;
          else
            v17 = 1;
          v18 = !v17;
          *(_BYTE *)(a1 + 32) = v18;
          if (v16 || v15)
            dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
          v9 += 4;
        }
      }
      return 0;
    }
  }
  return FigSignalErrorAt();
}

void FinalizeMultiTrackBatchLoadJob(uint64_t a1)
{
  const __CFArray *v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t CMBaseObject;
  _QWORD *v8;
  void (*v9)(uint64_t);
  NSObject *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 33))
    {
      if (*(_BYTE *)(a1 + 34) || !*(_BYTE *)(a1 + 32))
        NotifyCompletedBatch(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 36));
      v2 = *(const __CFArray **)(a1 + 16);
      if (v2)
      {
        Count = CFArrayGetCount(v2);
        if (Count >= 1)
        {
          v4 = Count;
          for (i = 0; i != v4; ++i)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), i);
            CMNotificationCenterGetDefaultLocalCenter();
            CMNotificationCenterRemoveListener();
            CMBaseObject = FigAssetTrackGetCMBaseObject(ValueAtIndex);
            v8 = *(_QWORD **)(CMBaseObjectGetVTable() + 8);
            if (*v8 >= 2uLL)
            {
              v9 = (void (*)(uint64_t))v8[8];
              if (v9)
                v9(CMBaseObject);
            }
          }
        }
      }
    }
    v10 = *(NSObject **)(a1 + 40);
    if (v10)
      dispatch_release(v10);
    v11 = *(const void **)(a1 + 16);
    if (v11)
      CFRelease(v11);
    v12 = *(const void **)(a1 + 24);
    if (v12)
      CFRelease(v12);
    v13 = *(const void **)(a1 + 56);
    if (v13)
      CFRelease(v13);
    free(*(void **)(a1 + 48));
    if (*(_QWORD *)a1)
      CFRelease(*(CFTypeRef *)a1);
    v14 = *(const void **)(a1 + 8);
    if (v14)
      CFRelease(v14);
    free((void *)a1);
  }
}

uint64_t InternalURLAssetSetDeclaredAssetType(uint64_t a1, uint64_t a2, CFTypeRef cf1)
{
  const __CFString *v6;
  uint64_t (*v7)(dispatch_queue_t *, uint64_t, const void *, CFDictionaryRef *);
  CFTypeRef v8;

  v6 = CFSTR("com.apple.coremedia.assettype.streaming");
  if (CFEqual(cf1, CFSTR("com.apple.coremedia.assettype.streaming")))
  {
    *(_BYTE *)(a2 + 192) = 1;
    v7 = ProduceStreamingAssetProperty;
LABEL_5:
    v8 = CFRetain(v6);
    *(_QWORD *)(a2 + 120) = v8;
    *(_QWORD *)(a2 + 128) = v7;
    *(_BYTE *)(a2 + 113) = 1;
    *(_DWORD *)(a2 + 116) = 0;
    InitializeProperty(a1, (uint64_t)CFSTR("assetProperty_AssetType"), 2, 0, (uint64_t)v8);
    return 0;
  }
  v6 = CFSTR("com.apple.coremedia.assettype.file");
  if (CFEqual(cf1, CFSTR("com.apple.coremedia.assettype.file")))
  {
    v7 = ProduceFormatReaderAssetProperty;
    goto LABEL_5;
  }
  return FigSignalErrorAt();
}

uint64_t ProduceStreamingAssetProperty(dispatch_queue_t *a1, uint64_t a2, const void *a3, CFDictionaryRef *a4)
{
  uint64_t v8;
  const __CFAllocator *v9;
  CMTime *v10;
  CFDictionaryRef v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  CFDictionaryRef *v19;
  int v20;
  const __CFDictionary *DictionaryRepresentation;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, CMTime *, CMTime *, _QWORD, int *, _QWORD, _QWORD);
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  int v29;
  uint64_t v30;
  const __CFAllocator *v31;
  CFIndex v32;
  _QWORD *v33;
  uint64_t v34;
  const __CFAllocator *AllocatorForMedia;
  const __CFAllocator *v36;
  CMTime *p_time;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, __CFString *, _QWORD, CFDictionaryRef *);
  unsigned int v42;
  const void *Value;
  __CFString **v45;
  __CFString *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, __CFString *, _QWORD, CFDictionaryRef *);
  CFDictionaryRef *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  CMTime v58;
  CMTime v59;
  CFDictionaryRef theDict;
  int v61;
  uint64_t v62;
  CMTime v63;
  CMTime time;

  theDict = 0;
  if (!_os_feature_enabled_impl())
  {
    v12 = CFEqual(a3, CFSTR("MediaSelectionArray"));
    v13 = CFEqual(a3, CFSTR("Duration"));
    v55 = CFEqual(a3, CFSTR("assetProperty_HLSAlternates"));
    v57 = CFEqual(a3, CFSTR("Chapters"));
    v54 = CFEqual(a3, CFSTR("LocalizedMSODisplayNames"));
    v56 = CFEqual(a3, CFSTR("assetProperty_HLSMetadata"));
    v51 = CFEqual(a3, CFSTR("assetProperty_HLSSessionKeys"));
    v52 = CFEqual(a3, CFSTR("assetProperty_AvailableMetadataFormats"));
    v53 = CFEqual(a3, CFSTR("assetProperty_OriginalNetworkContentURL"));
    v14 = CFEqual(a3, CFSTR("assetProperty_ProtectedStatus"));
    v15 = CFEqual(a3, CFSTR("assetProperty_MaximumVideoResolution"));
    v16 = CFEqual(a3, CFSTR("assetProperty_AvailableVideoDynamicRanges"));
    v17 = CFEqual(a3, CFSTR("assetProperty_NominalVideoFrameRate"));
    v18 = CFEqual(a3, CFSTR("MinimumTimeOffsetFromLive"));
    v19 = a4;
    v20 = v18;
    v50 = v19;
    *v19 = 0;
    if (!v12 && !v13 && !v57 && !v54 && !v56 && !v52 && !v53 && !v14 && !v15 && !v16 && !v17 && !v18 && !v55 && !v51)
    {
      if (!CFEqual(a3, CFSTR("assetProperty_CompatibleWithAirPlayVideo")))
      {
        v26 = 0;
        *v50 = 0;
        goto LABEL_69;
      }
      DictionaryRepresentation = (const __CFDictionary *)CFRetain((CFTypeRef)*MEMORY[0x1E0C9AE50]);
      goto LABEL_68;
    }
    v22 = v13;
    v23 = EnsureBytePump(a1, a2);
    if ((_DWORD)v23)
    {
LABEL_85:
      v26 = v23;
      goto LABEL_69;
    }
    if (v13 || v55 || v57 || v56 || v14 || v20)
    {
      v62 = 0;
      if (*(_DWORD *)(a2 + 380) == 2)
      {
        v61 = 0;
        *(_DWORD *)(a2 + 380) = 3;
        v24 = *(_QWORD *)(a2 + 384);
        v25 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, CMTime *, CMTime *, _QWORD, int *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
        if (!v25)
        {
          v26 = 4294954514;
          goto LABEL_69;
        }
        time = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
        v63 = time;
        v26 = v25(v24, 0, 0, 0, 0, 1, &time, &v63, 0, &v61, 0, 0);
        if ((_DWORD)v26)
          goto LABEL_69;
        v27 = FigThreadRegisterAbortAction();
        v26 = v27;
        if (!(_DWORD)v27 || (_DWORD)v27 == -17561)
          dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a2 + 368), 0xFFFFFFFFFFFFFFFFLL);
        FigThreadUnregisterAbortAction();
        RemoveBytePumpListenersAndDoBarrier(a2);
        v28 = *(NSObject **)(a2 + 368);
        if (v28)
        {
          dispatch_release(v28);
          *(_QWORD *)(a2 + 368) = 0;
        }
        if ((_DWORD)v26)
          goto LABEL_69;
      }
    }
    v29 = *(_DWORD *)(a2 + 380);
    if (v29 != 1)
    {
      if (v29 == 5)
      {
        v26 = *(unsigned int *)(a2 + 392);
        goto LABEL_69;
      }
      v38 = *(_QWORD *)(a2 + 384);
      if (!v38)
      {
        v26 = 4294954513;
        goto LABEL_69;
      }
      if (v12)
      {
        FigBytePumpGetFigBaseObject(v38);
        v40 = v39;
        v41 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
        if (v41)
        {
          v42 = v41(v40, CFSTR("FBP_AlternateInfo"), *MEMORY[0x1E0C9AE00], &theDict);
          if (!v42 && theDict)
          {
            Value = CFDictionaryGetValue(theDict, CFSTR("FBPAIK_MediaSelectionArray"));
            if (!*v50)
            {
              if (Value)
                Value = CFRetain(Value);
              v26 = 0;
              *v50 = (CFDictionaryRef)Value;
              goto LABEL_69;
            }
            goto LABEL_51;
          }
          goto LABEL_106;
        }
        goto LABEL_105;
      }
      if (v55)
      {
        v23 = StreamingAssetCopyHLSAlternates(v38, v50);
        goto LABEL_85;
      }
      if (v15)
      {
        v23 = StreamingAssetCopyMaximumVideoResolution(v38, v50);
        goto LABEL_85;
      }
      if (v16)
      {
        v23 = StreamingAssetCopyAvailableVideoDynamicRanges(v38, v50);
        goto LABEL_85;
      }
      if (v17)
      {
        v23 = StreamingAssetCopyNominalVideoFrameRate(v38, (uint64_t)v50);
        goto LABEL_85;
      }
      if (v53)
      {
        v23 = EnsureStreamingNetworkURL(a1, a2);
        goto LABEL_85;
      }
      if (v22)
      {
        v45 = kFigBytePumpProperty_Duration;
      }
      else if (v57)
      {
        v45 = kFigBytePumpSyncProperty_Chapters;
      }
      else if (v54)
      {
        v45 = kFigBytePumpSyncProperty_LocalizedMediaSelectionOptionDisplayNames;
      }
      else if (v56)
      {
        v45 = kFigBytePumpSyncProperty_Metadata;
      }
      else if (v52)
      {
        v45 = kFigBytePumpSyncProperty_AvailableMetadataFormats;
      }
      else if (v14)
      {
        v45 = kFigBytePumpProperty_HasEncryptedContent;
      }
      else
      {
        if (!v20)
        {
          if (v51)
          {
            v23 = StreamingAssetCopySessionKeys(v38, v50);
            goto LABEL_85;
          }
LABEL_51:
          v26 = 0;
          goto LABEL_69;
        }
        v45 = kFigBytePumpProperty_PrebufferReservation;
      }
      v46 = *v45;
      if (*v45)
      {
        FigBytePumpGetFigBaseObject(v38);
        v48 = v47;
        v49 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
        if (v49)
        {
          v42 = v49(v48, v46, *MEMORY[0x1E0C9AE00], v50);
          goto LABEL_106;
        }
LABEL_105:
        v42 = -12782;
LABEL_106:
        if (v42 >> 1 == 2147477256)
          v26 = 0;
        else
          v26 = v42;
        goto LABEL_69;
      }
      goto LABEL_51;
    }
    if (v22)
    {
      v36 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      time = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E10];
      p_time = &time;
    }
    else
    {
      if (v15)
      {
        DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(*MEMORY[0x1E0C9D820]);
        goto LABEL_68;
      }
      if (!v20)
        goto LABEL_51;
      CMTimeMake(&v58, 5, 1);
      v36 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      p_time = &v58;
    }
    DictionaryRepresentation = CMTimeCopyAsDictionary(p_time, v36);
LABEL_68:
    v26 = 0;
    *v50 = DictionaryRepresentation;
    goto LABEL_69;
  }
  v8 = EnsureStreamingAssetPropertyLoaderCreated(a1, a2);
  if ((_DWORD)v8)
    return v8;
  if (*(_DWORD *)(a2 + 380) == 1)
  {
    if (CFEqual(a3, CFSTR("Duration")))
    {
      v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      time = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E10];
      v10 = &time;
LABEL_6:
      v11 = CMTimeCopyAsDictionary(v10, v9);
LABEL_48:
      *a4 = v11;
      goto LABEL_49;
    }
    if (CFEqual(a3, CFSTR("assetProperty_MaximumVideoResolution")))
    {
      v11 = CGSizeCreateDictionaryRepresentation(*MEMORY[0x1E0C9D820]);
      goto LABEL_48;
    }
    if (CFEqual(a3, CFSTR("MinimumTimeOffsetFromLive")))
    {
      CMTimeMake(&v59, 5, 1);
      v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v10 = &v59;
      goto LABEL_6;
    }
LABEL_49:
    if (!*(_QWORD *)(a2 + 408))
    {
      v33 = (_QWORD *)(a2 + 408);
      v34 = *(_QWORD *)(a2 + 504);
      AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      FigStreamingAssetLoaderCopyProperty(v34, (uint64_t)CFSTR("SAP_PlaylistCache"), AllocatorForMedia, v33);
    }
    goto LABEL_51;
  }
  v30 = *(_QWORD *)(a2 + 504);
  v31 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v32 = FigStreamingAssetLoaderCopyProperty(v30, (uint64_t)a3, v31, a4);
  if ((_DWORD)v32 == -12783)
    goto LABEL_49;
  v26 = v32;
  if (!(_DWORD)v32)
    goto LABEL_49;
LABEL_69:
  if (theDict)
    CFRelease(theDict);
  return v26;
}

uint64_t ProduceFormatReaderAssetProperty(dispatch_queue_t *a1, uint64_t a2, CFTypeRef cf1, __CFArray **a4)
{
  unsigned int v8;
  void *v9;
  unsigned int IsSelfContainedProperty;
  uint64_t v12;
  const void *Value;
  __CFString **v15;

  if (CFEqual(cf1, CFSTR("assetProperty_Tracks")))
  {
    v8 = EnsureTracksArrayCreated(a1, a2);
    if (!v8 && *(_BYTE *)(a2 + 456))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      *(_BYTE *)(a2 + 460) = 1;
    }
    v9 = *(void **)(a2 + 272);
    if (v9)
      v9 = (void *)CFRetain(v9);
    goto LABEL_15;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_FormatReader")))
  {
    IsSelfContainedProperty = EnsureFormatReaderCreated(a1, a2);
    if (!IsSelfContainedProperty)
    {
      v9 = *(void **)(a2 + 240);
      if (!v9)
      {
LABEL_11:
        v8 = 0;
LABEL_15:
        *a4 = (__CFArray *)v9;
        goto LABEL_16;
      }
LABEL_10:
      v9 = (void *)CFRetain(v9);
      goto LABEL_11;
    }
    goto LABEL_70;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_MatchingContainerLabelType")))
  {
    v8 = EnsureFormatReaderCreated(a1, a2);
    if (v8)
      goto LABEL_16;
    v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, (const void *)(a2 + 256));
    goto LABEL_15;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_MatchingContainerLabel")))
  {
    IsSelfContainedProperty = EnsureFormatReaderCreated(a1, a2);
    if (!IsSelfContainedProperty)
    {
      v9 = *(void **)(a2 + 248);
      if (!v9)
        goto LABEL_11;
      goto LABEL_10;
    }
    goto LABEL_70;
  }
  if (CFEqual(cf1, CFSTR("Duration")))
  {
    IsSelfContainedProperty = ProduceDurationProperty(a1, a2, a4);
LABEL_70:
    v8 = IsSelfContainedProperty;
    goto LABEL_16;
  }
  if (CFEqual(cf1, CFSTR("Lyrics")))
  {
    IsSelfContainedProperty = ProduceLyricsProperty(a1, a2, (uint64_t)a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, CFSTR("PreferredRate")))
  {
    IsSelfContainedProperty = ProducePreferredRateProperty(a1, a2, (uint64_t)a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, CFSTR("PreferredVolume")))
  {
    IsSelfContainedProperty = ProducePreferredVolumeProperty(a1, a2, (uint64_t)a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, CFSTR("PreferredTransform")))
  {
    IsSelfContainedProperty = ProducePreferredTransformProperty(a1, a2, (uint64_t)a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_TrackReferences")))
  {
    IsSelfContainedProperty = ProduceTrackReferencesProperty(a1, a2, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_AlternateTrackGroups")))
  {
    IsSelfContainedProperty = ProduceAlternateTrackGroupsProperty(a1, a2, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_ProvidesPreciseDurationAndTiming")))
  {
    IsSelfContainedProperty = ProducePreciseDurationAndTimingProperty(a1, a2, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_AvailableMetadataFormats")))
  {
    IsSelfContainedProperty = ProduceAvailableMetadataFormatsProperty(a1, a2, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_FormatSpecificMetadataFormat")))
  {
    IsSelfContainedProperty = ProduceFormatSpecificMetadataFormatProperty(a1, a2, (uint64_t)a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_CommonMetadata")))
  {
    IsSelfContainedProperty = ProduceCommonMetadataProperty(a1, a2, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_QuickTimeUserData")))
  {
    v15 = kFigFormatReaderProperty_QuickTimeUserDataReader;
LABEL_69:
    IsSelfContainedProperty = ProduceMetadataPropertyFromMetadataReader(a1, a2, (uint64_t)*v15, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_ISOUserData")))
  {
    v15 = kFigFormatReaderProperty_ISOUserDataReader;
    goto LABEL_69;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_QuickTimeMetadata")))
  {
    v15 = kFigFormatReaderProperty_QuickTimeMetadataReader;
    goto LABEL_69;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_iTunesMetadata")))
  {
    v15 = kFigFormatReaderProperty_iTunesMetadataReader;
    goto LABEL_69;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_ID3Metadata")))
  {
    v15 = kFigFormatReaderProperty_ID3MetadataReader;
    goto LABEL_69;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_ID3MetadataBC")))
  {
    v15 = kFigFormatReaderProperty_ID3MetadataReaderWithBackwardCompatibility;
    goto LABEL_69;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_HLSMetadata"))
    || CFEqual(cf1, CFSTR("assetProperty_HLSAlternates"))
    || CFEqual(cf1, CFSTR("assetProperty_HLSSessionKeys"))
    || CFEqual(cf1, CFSTR("assetProperty_AVCHDMetadata")))
  {
    goto LABEL_75;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_FormatSpecificMetadata")))
  {
    v15 = kFigFormatReaderProperty_FormatSpecificMetadataReader;
    goto LABEL_69;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_ChapterGroupInfo")))
  {
    IsSelfContainedProperty = ProduceChapterGroupInfoProperty(a1, a2, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, CFSTR("CreationDate")))
  {
    IsSelfContainedProperty = ProduceCreationDateProperty(a1, a2, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_InitialSamples")))
  {
    IsSelfContainedProperty = ProduceInitialSamplesProperty(a1, a2, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_CPEProtector")))
  {
    IsSelfContainedProperty = ProduceCPEProtectorProperty(a1, a2, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_ProtectedStatus")))
  {
    IsSelfContainedProperty = ProduceProtectedStatusProperty(a1, a2, (CFTypeRef *)a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_SHA1Digest")))
  {
    IsSelfContainedProperty = ProduceSHA1DigestProperty(a1, a2, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, CFSTR("MediaSelectionArray")))
  {
    IsSelfContainedProperty = ProduceMediaSelectionArrayProperty(a1, a2, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, CFSTR("iTunesGaplessInfo")))
  {
    IsSelfContainedProperty = ProduceiTunesGaplessInfoProperty(a1, a2, (uint64_t)a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, CFSTR("iTunesSoundCheckVolumeNormalization")))
  {
    IsSelfContainedProperty = ProduceiTunesSoundCheckVolumeNormalizationProperty(a1, a2, (uint64_t)a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_CouldContainFragments")))
  {
    IsSelfContainedProperty = ProduceCouldContainFragmentsProperty(a1, a2, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_ContainsFragments")))
  {
    IsSelfContainedProperty = ProduceContainsFragmentsProperty(a1, a2, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_MovieExtendsDuration")))
  {
    IsSelfContainedProperty = ProduceMovieExtendsDurationProperty(a1, a2, (uint64_t)a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_CameraRollValidation")))
  {
    ProduceAssetCameraRollValidationProperty(a1, a2, a4);
LABEL_108:
    v8 = 0;
    goto LABEL_16;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_MediaPlaybackValidation")))
  {
    ProduceAssetMediaPlaybackValidationProperty(a1, a2, a4);
    goto LABEL_108;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_CompatibleWithPhotosTranscodingService")))
  {
    ProduceAssetCompatibleWithPhotosTranscodingServiceProperty(a1, a2, a4);
    goto LABEL_108;
  }
  if (CFEqual(cf1, CFSTR("Chapters")))
  {
    IsSelfContainedProperty = ProduceChaptersProperty(a1, a2, (uint64_t)a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, CFSTR("LocalizedMSODisplayNames")))
  {
    IsSelfContainedProperty = ProduceLocalizedMediaSelectionOptionDisplayNamesProperty(a1, a2, (uint64_t)a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_MovieProxy")))
  {
    IsSelfContainedProperty = ProduceMovieProxyProperty(a1, a2, (CFTypeRef *)a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, CFSTR("AssetIsSelfContained")))
  {
    IsSelfContainedProperty = ProduceAssetIsSelfContainedProperty(a1, a2, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, CFSTR("NaturalTimeScale")))
  {
    IsSelfContainedProperty = ProduceAssetNaturalTimeScaleProperty(a1, a2, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_CompatibleWithAirPlayVideo")))
  {
    ProduceAssetCompatibleWithAirPlayVideoProperty(a1, a2, a4);
    goto LABEL_108;
  }
  if (CFEqual(cf1, CFSTR("AssetAnalysisMessages")))
  {
    IsSelfContainedProperty = ProduceAssetAnalysisMessagesProperty(a1, a2, (uint64_t)a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, CFSTR("IsAssetAnalysisActive")))
  {
    IsSelfContainedProperty = ProduceIsAssetAnalysisActiveProperty(a1, a2, (uint64_t)a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_MaximumVideoResolution")))
  {
    IsSelfContainedProperty = ProduceMaximumVideoResolutionProperty(a1, a2, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_AvailableVideoDynamicRanges")))
  {
    IsSelfContainedProperty = ProduceAvailableVideoDynamicRangesProperty(a1, a2, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_NominalVideoFrameRate")))
  {
    IsSelfContainedProperty = ProduceNominalVideoFrameRateProperty(a1, a2, (uint64_t (**)(uint64_t, uint64_t *))a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_moovAtomSize")))
  {
    IsSelfContainedProperty = ProducemoovAtomSizeProperty(a1, a2, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_OriginalNetworkContentURL")))
    goto LABEL_75;
  if (CFEqual(cf1, CFSTR("assetProperty_FirstFragmentSequenceNumber")))
  {
    IsSelfContainedProperty = ProduceFirstFragmentSequenceNumberProperty(a1, a2, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_FragmentCount")))
  {
    IsSelfContainedProperty = ProduceFragmentCountProperty(a1, a2, a4);
    goto LABEL_70;
  }
  if (CFEqual(cf1, CFSTR("MinimumTimeOffsetFromLive")))
  {
LABEL_75:
    v8 = 0;
    *a4 = 0;
    goto LABEL_16;
  }
  v8 = -12172;
LABEL_16:
  if (v8 >> 1 == 2147477256 || v8 == -12787)
    v12 = 0;
  else
    v12 = v8;
  if (!(_DWORD)v12 && *(_BYTE *)(a2 + 456))
  {
    if (!*(_QWORD *)(a2 + 448))
    {
      if (sBuildPropertyDependencyDictionaryOnce != -1)
        dispatch_once_f(&sBuildPropertyDependencyDictionaryOnce, 0, (dispatch_function_t)BuildPropertyDependencyDictionary);
      *(_QWORD *)(a2 + 448) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
    }
    Value = CFDictionaryGetValue((CFDictionaryRef)sAssetPropertyDependencies, cf1);
    if (Value)
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a2 + 448), cf1, Value);
  }
  return v12;
}

void URLAssetDoneDownloadingGuts(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t CMBaseObject;
  uint64_t (*v6)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  int v9;
  CFTypeID TypeID;
  const void *Value;
  const void *v12;
  CFTypeID v13;
  const __CFAllocator *v14;
  CFDictionaryRef v15;
  uint64_t v16;
  void (*v17)(uint64_t, _QWORD, _QWORD);
  CFTypeRef v18;
  CFTypeRef v19;
  CFTypeRef cf;
  int valuePtr;

  valuePtr = 0;
  v19 = 0;
  cf = 0;
  if (!*(_BYTE *)(a1 + 112) && *(_QWORD *)(a1 + 160) == a2 && FigAtomicCompareAndSwap32())
  {
    CMBaseObject = CMByteStreamGetCMBaseObject();
    v6 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (!v6)
      goto LABEL_11;
    valuePtr = v6(CMBaseObject, *MEMORY[0x1E0CA2070], 0, &v19);
    if (valuePtr)
      goto LABEL_12;
    v7 = CMByteStreamGetCMBaseObject();
    v8 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (!v8)
    {
LABEL_11:
      valuePtr = -12782;
      goto LABEL_12;
    }
    valuePtr = v8(v7, *MEMORY[0x1E0CA2068], 0, &cf);
    if (valuePtr)
      goto LABEL_12;
    if (CFEqual(cf, v19))
    {
      v18 = 0;
      GetContentProtectionOptions(a1, (const __CFDictionary **)&v18, 0, 0);
      if (v18)
      {
        CFRetain((CFTypeRef)a1);
        dispatch_group_async_f(*(dispatch_group_t *)(a1 + 296), *(dispatch_queue_t *)(a1 + 304), (void *)a1, (dispatch_function_t)PerformMD5Check);
      }
      else
      {
        v16 = CMByteStreamGetCMBaseObject();
        v17 = *(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
        if (v17)
          v17(v16, *MEMORY[0x1E0CA2F68], *MEMORY[0x1E0C9AE50]);
        ReviseDownloadToDestinationResultProperty(a1, 0);
        CFRetain((CFTypeRef)a1);
        CMNotificationCenterGetDefaultLocalCenter();
        FigDeferNotificationToDispatchQueue();
      }
    }
    else
    {
      v9 = -16091;
      valuePtr = -16091;
      if (a3)
      {
        TypeID = CFDictionaryGetTypeID();
        if (TypeID != CFGetTypeID(a3))
          goto LABEL_23;
        Value = CFDictionaryGetValue((CFDictionaryRef)a3, CFSTR("CRABS_StatusCode"));
        if (!Value)
          goto LABEL_23;
        v12 = Value;
        v13 = CFNumberGetTypeID();
        if (v13 != CFGetTypeID(v12))
          goto LABEL_23;
        LODWORD(v18) = 0;
        CFNumberGetValue((CFNumberRef)v12, kCFNumberIntType, &v18);
        v9 = (int)v18;
        if ((_DWORD)v18 == -12542)
          goto LABEL_12;
        if ((_DWORD)v18)
          valuePtr = (int)v18;
        else
LABEL_23:
          v9 = -16091;
      }
      ReviseDownloadToDestinationResultProperty(a1, v9);
      v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v18 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
      v15 = CFDictionaryCreate(v14, (const void **)kFigAssetPayloadKey_Result, &v18, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CFRetain((CFTypeRef)a1);
      CMNotificationCenterGetDefaultLocalCenter();
      FigDeferNotificationToDispatchQueue();
      if (v15)
        CFRelease(v15);
      if (v18)
        CFRelease(v18);
    }
  }
LABEL_12:
  if (cf)
    CFRelease(cf);
  if (v19)
    CFRelease(v19);
}

const __CFDictionary *GetContentProtectionOptions(uint64_t a1, const __CFDictionary **a2, const __CFDictionary **a3, const __CFDictionary **a4)
{
  const __CFDictionary *result;
  const __CFDictionary *v8;

  if (a2)
    *a2 = 0;
  if (a3)
    *a3 = 0;
  if (a4)
    *a4 = 0;
  result = *(const __CFDictionary **)(a1 + 88);
  if (result)
  {
    result = (const __CFDictionary *)FigCFDictionaryGetDictionaryValue();
    if (result)
    {
      v8 = result;
      if (a2)
      {
        result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("assetOption_PurchaseBundle"));
        *a2 = result;
      }
      if (a3)
      {
        result = (const __CFDictionary *)CFDictionaryGetValue(v8, CFSTR("assetOption_AuthorizationInfo"));
        *a3 = result;
      }
      if (a4)
      {
        result = (const __CFDictionary *)CFDictionaryGetValue(v8, CFSTR("assetOption_ProtectedContentSupportStorageURL"));
        *a4 = result;
      }
    }
  }
  return result;
}

void ReviseDownloadToDestinationResultProperty(uint64_t a1, int a2)
{
  CFNumberRef v3;
  dispatch_queue_t *v4;
  dispatch_queue_t *v5;
  int valuePtr;

  valuePtr = a2;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
  v4 = (dispatch_queue_t *)MEMORY[0x19402D578](a1 + 464);
  v5 = v4;
  if (v4)
    ReviseProperty(v4, CFSTR("assetProperty_DownloadToDestinationResult"), v3);
  if (v3)
    CFRelease(v3);
  if (v5)
    CFRelease(v5);
}

void PostDeferredPostPurchaseNotification(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  CMNotificationCenterPostNotification();
  CFRelease(a4);
}

void PerformMD5Check(uint64_t cf)
{
  const void *Value;
  int v3;
  const __CFAllocator *v4;
  CFDictionaryRef v5;
  uint64_t CMBaseObject;
  void (*v7)(uint64_t, _QWORD, _QWORD);
  void *values;
  uint64_t v9;
  CFDictionaryRef theDict;
  const __CFDictionary *v11;
  int valuePtr;

  valuePtr = 0;
  theDict = 0;
  v11 = 0;
  v9 = 0;
  if (!*(_BYTE *)(cf + 112) && !*(_BYTE *)(cf + 195))
  {
    GetContentProtectionOptions(cf, &v11, 0, 0);
    valuePtr = SetupBytestreamFactoryParameters((char *)cf, &v9);
    if (!valuePtr)
    {
      if (theDict)
        Value = CFDictionaryGetValue(theDict, CFSTR("factoryOption_DownloadDestinationURL"));
      else
        Value = 0;
      v3 = EncryptedFileMD5Check(v11, *(_QWORD *)(cf + 160), (uint64_t)Value, 0);
      valuePtr = v3;
      *(_BYTE *)(cf + 195) = 1;
      ReviseDownloadToDestinationResultProperty(cf, v3);
      if (v3)
      {
        v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
        v5 = CFDictionaryCreate(v4, (const void **)kFigAssetPayloadKey_Result, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        CFRetain((CFTypeRef)cf);
        CMNotificationCenterGetDefaultLocalCenter();
        FigDeferNotificationToDispatchQueue();
        if (v5)
          CFRelease(v5);
        if (values)
          CFRelease(values);
      }
      else
      {
        CMBaseObject = CMByteStreamGetCMBaseObject();
        v7 = *(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
        if (v7)
          v7(CMBaseObject, *MEMORY[0x1E0CA2F68], *MEMORY[0x1E0C9AE50]);
        CFRetain((CFTypeRef)cf);
        CMNotificationCenterGetDefaultLocalCenter();
        FigDeferNotificationToDispatchQueue();
      }
    }
    if (theDict)
    {
      CFRelease(theDict);
      theDict = 0;
    }
  }
  CFRelease((CFTypeRef)cf);
}

uint64_t SetupBytestreamFactoryParameters(char *context, _QWORD *a2)
{
  dispatch_once_t *v4;
  uint64_t v5;
  uint64_t v6;
  const __CFAllocator *v7;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v9;
  uint64_t v10;
  const __CFDictionary *v11;
  void *v12;
  const void *URLValue;
  const void *v14;
  const void *v15;
  __CFString **v16;
  const __CFData *v17;
  const void *v18;
  const void *BooleanValue;
  const void *NumberValue;
  const __CFData *v21;
  const void *DictionaryValue;
  const void *v23;
  void *v24;
  void *v25;
  void *v26;
  const void *v27;
  const void *v28;
  uint64_t HTTPRequestOptions;
  uint64_t v30;
  int v31;
  uint64_t v32;
  CFTypeRef v34;
  void *value;
  CFTypeRef cf;

  value = 0;
  cf = 0;
  v34 = 0;
  *a2 = 0;
  a2[1] = 0;
  v5 = *((_QWORD *)context + 2);
  v4 = (dispatch_once_t *)(context + 16);
  if (v5 != -1)
    dispatch_once_f(v4, context, (dispatch_function_t)CreateCustomURLLoaderOnceFunc);
  v6 = *((unsigned int *)context + 124);
  if (!(_DWORD)v6)
  {
    v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
    {
      v6 = FigSignalErrorAt();
      goto LABEL_71;
    }
    v9 = Mutable;
    v10 = *((_QWORD *)context + 10);
    if ((v10 & 1) != 0)
      *(_DWORD *)a2 |= 2u;
    if ((v10 & 0x200) != 0)
      *(_DWORD *)a2 |= 0x1000u;
    v11 = (const __CFDictionary *)*((_QWORD *)context + 11);
    if (!v11)
    {
      v17 = 0;
      goto LABEL_51;
    }
    if (CFDictionaryGetValue(v11, CFSTR("assetOption_PrepareForIncrementalFragments")))
      *(_DWORD *)a2 |= 0x800u;
    v12 = (void *)*MEMORY[0x1E0C9AE50];
    if (v12 == CFDictionaryGetValue(*((CFDictionaryRef *)context + 11), CFSTR("assetOption_UseAWDL")))
      CFDictionarySetValue(v9, CFSTR("factoryOption_UseAWDL"), v12);
    URLValue = (const void *)FigCFDictionaryGetURLValue();
    if (URLValue)
      CFDictionarySetValue(v9, CFSTR("factoryOption_DownloadDestinationURL"), URLValue);
    FigCFDictionaryGetURLValue();
    FigCFDictionaryGetBooleanIfPresent();
    if (CFDictionaryGetValueIfPresent(*((CFDictionaryRef *)context + 11), CFSTR("assetOption_NetworkCacheUsePathAsKey"), (const void **)&value)&& value == v12)
    {
      *(_DWORD *)a2 |= 8u;
    }
    if (CFDictionaryGetValueIfPresent(*((CFDictionaryRef *)context + 11), CFSTR("assetOption_NetworkCacheUseURLWithoutQueryStringAsKey"), (const void **)&value)&& value == v12)
    {
      *(_DWORD *)a2 |= 0x20u;
    }
    v14 = CFDictionaryGetValue(*((CFDictionaryRef *)context + 11), CFSTR("assetOption_NetworkCacheBacking"));
    if (v14)
    {
      v15 = v14;
      if (CFEqual(v14, CFSTR("assetOption_DiskBacking")))
      {
        v16 = kFigByteStreamFactoryBackingOption_Disk;
LABEL_30:
        CFDictionarySetValue(v9, CFSTR("factoryOption_Backing"), *v16);
        goto LABEL_31;
      }
      if (CFEqual(v15, CFSTR("assetOption_NonPurgeableMemoryBacking")))
      {
        v18 = CFDictionaryGetValue(*((CFDictionaryRef *)context + 11), CFSTR("assetOption_NetworkCacheNonPurgeableMemoryLimit"));
        if (v18)
          CFDictionarySetValue(v9, CFSTR("factoryOption_NonPurgeableMemoryLimit"), v18);
        v16 = &kFigByteStreamFactoryBackingOption_NonPurgeableMemory;
        goto LABEL_30;
      }
    }
LABEL_31:
    BooleanValue = (const void *)FigCFDictionaryGetBooleanValue();
    if (BooleanValue)
      CFDictionarySetValue(v9, CFSTR("factoryOption_NoPersistentCache"), BooleanValue);
    NumberValue = (const void *)FigCFDictionaryGetNumberValue();
    if (NumberValue)
      CFDictionarySetValue(v9, CFSTR("factoryOption_MaxSizeAllowedForCellularAccess"), NumberValue);
    v21 = (const __CFData *)CFDictionaryGetValue(*((CFDictionaryRef *)context + 11), CFSTR("assetOption_ParentNetworkActivityToken"));
    v17 = FigNWActivityCreateFromToken(v21);
    if (v17)
      CFDictionarySetValue(v9, CFSTR("factoryOption_ParentNetworkActivity"), v17);
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    DictionaryValue = (const void *)FigCFDictionaryGetDictionaryValue();
    if (DictionaryValue)
      CFDictionarySetValue(v9, CFSTR("factoryOption_AlternativeConfigurationOptions"), DictionaryValue);
    v23 = (const void *)FigCFDictionaryGetDictionaryValue();
    if (v23)
      CFDictionarySetValue(v9, CFSTR("factoryOption_ByteRangeInFile"), v23);
    v24 = (void *)FigCFDictionaryGetBooleanValue();
    value = v24;
    if (v24 && v24 == v12)
      *(_DWORD *)a2 |= 0x400u;
    v25 = (void *)FigCFDictionaryGetBooleanValue();
    value = v25;
    if (v25)
      CFDictionarySetValue(v9, CFSTR("factoryOption_DisableNetworkLargeDownload"), v25);
    v26 = (void *)FigCFDictionaryGetBooleanValue();
    value = v26;
    if (v26)
      CFDictionarySetValue(v9, CFSTR("factoryOption_DisableNetworkProbeRequest"), v26);
    v27 = (const void *)FigCFDictionaryGetBooleanValue();
    if (v27)
      CFDictionarySetValue(v9, CFSTR("factoryOption_RequiresCustomURLLoading"), v27);
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
LABEL_51:
    if (*((_QWORD *)context + 72))
      FigCFDictionarySetValue();
    v28 = (const void *)*((_QWORD *)context + 61);
    if (v28)
      CFDictionarySetValue(v9, CFSTR("factoryOption_CustomURLLoader"), v28);
    HTTPRequestOptions = CreateHTTPRequestOptions((uint64_t)context, (CFMutableDictionaryRef *)&v34);
    if ((_DWORD)HTTPRequestOptions)
    {
      v6 = HTTPRequestOptions;
    }
    else
    {
      if (v34)
        CFDictionarySetValue(v9, CFSTR("factoryOption_HTTPRequestOptions"), v34);
      v30 = *((_QWORD *)context + 10);
      if ((v30 & 0x38) != 0)
        v31 = 30;
      else
        v31 = 2;
      *(_DWORD *)a2 |= FigByteStreamFactoryTranslateReferenceSecurityOptions(v31 & (v30 >> 1));
      v32 = FigCFHTTPCreateCommonHTTPHeadersFromAssetCreationOptions(v7, *((_QWORD *)context + 11), *((_QWORD *)context + 42), (__CFDictionary **)&cf);
      v6 = v32;
      if ((_DWORD)v32 || !cf)
      {
        if ((_DWORD)v32)
          goto LABEL_69;
      }
      else
      {
        CFDictionarySetValue(v9, CFSTR("factoryOption_HTTPHeaders"), cf);
      }
      if (CFDictionaryGetCount(v9) >= 1)
      {
        v6 = 0;
        a2[1] = v9;
        if (!v17)
          goto LABEL_71;
LABEL_70:
        CFRelease(v17);
        goto LABEL_71;
      }
      v6 = 0;
    }
LABEL_69:
    CFRelease(v9);
    if (!v17)
      goto LABEL_71;
    goto LABEL_70;
  }
LABEL_71:
  if (cf)
    CFRelease(cf);
  if (v34)
    CFRelease(v34);
  return v6;
}

uint64_t CreateHTTPRequestOptions(uint64_t a1, CFMutableDictionaryRef *a2)
{
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  CFIndex Count;
  CFMutableDictionaryRef v8;
  CFMutableDictionaryRef theDict;

  theDict = 0;
  v4 = FigCFHTTPCreateHTTPRequestOptionsFromAssetCreationOptions((const __CFAllocator *)*MEMORY[0x1E0C9AE00], *(_QWORD *)(a1 + 88), &theDict);
  if ((_DWORD)v4)
  {
    v5 = v4;
  }
  else
  {
    if (*(_QWORD *)(a1 + 16) != -1)
      dispatch_once_f((dispatch_once_t *)(a1 + 16), (void *)a1, (dispatch_function_t)CreateCustomURLLoaderOnceFunc);
    v5 = *(unsigned int *)(a1 + 496);
    if (!(_DWORD)v5)
    {
      FigCFDictionarySetValue();
      v6 = *(const void **)(a1 + 528);
      if (v6)
        CFDictionarySetValue(theDict, CFSTR("FHRP_StorageSession"), v6);
      Count = CFDictionaryGetCount(theDict);
      v8 = theDict;
      if (!Count && theDict)
      {
        CFRelease(theDict);
        v8 = 0;
      }
      v5 = 0;
      *a2 = v8;
      return v5;
    }
  }
  if (theDict)
    CFRelease(theDict);
  return v5;
}

void AssessMonitoredAssetPropertyChange(const void *a1, CFArrayRef theArray, uint64_t a3)
{
  CFIndex Count;
  CFIndex v7;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v10;
  dispatch_queue_t *v11;
  uint64_t v12;
  const void *v13;

  Count = CFArrayGetCount(theArray);
  if (Count >= 1)
  {
    v7 = Count;
    for (i = 0; v7 != i; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      if (*(_BYTE *)(*(_QWORD *)(a3 + 8) + 112))
        break;
      if (CFDictionaryContainsKey(*(CFDictionaryRef *)a3, ValueAtIndex))
      {
        v12 = a3 + 8;
        v10 = *(_QWORD *)(a3 + 8);
        v11 = *(dispatch_queue_t **)(v12 + 8);
        if (FigCFEqual())
        {
          v13 = *(const void **)(v10 + 328);
          if (v13)
          {
            CFRelease(v13);
            *(_QWORD *)(v10 + 328) = 0;
          }
          *(_BYTE *)(v10 + 316) = 0;
        }
        if (!ProduceFormatReaderAssetProperty((int)v11, v10, a1))
          ReviseProperty(v11, a1, 0);
        return;
      }
    }
  }
}

void ReviseDurationProperty(char *a1)
{
  uint64_t v2;
  dispatch_queue_t *v3;
  const void *v4;
  const void *v5;

  v2 = MEMORY[0x19402D578](a1 + 464);
  v5 = 0;
  if (v2)
  {
    v3 = (dispatch_queue_t *)v2;
    if (!ObtainDurationPropertyValue((uint64_t)a1, &v5))
    {
      v4 = v5;
      ReviseProperty(v3, CFSTR("Duration"), v5);
      if (v4)
        CFRelease(v4);
    }
    CFRelease(v3);
  }
  CFRelease(a1);
}

uint64_t ObtainDurationPropertyValue(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t FigBaseObject;
  void (*v6)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, const __CFString *, uint64_t, uint64_t *);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, __CFString *, uint64_t, uint64_t *);
  __CFString **v13;
  uint64_t v15;
  CFTypeRef cf;

  v15 = 0;
  cf = 0;
  v4 = *MEMORY[0x1E0C9AE00];
  FigBaseObject = FigFormatReaderGetFigBaseObject(*(_QWORD *)(a1 + 240));
  v6 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
  if (v6)
  {
    v6(FigBaseObject, CFSTR("SampleCursorTimeAccuracyIsExact"), v4, &cf);
    v6 = (void (*)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))cf;
  }
  if (v6 == (void (*)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))*MEMORY[0x1E0C9AE50])
  {
    v9 = 0;
  }
  else
  {
    v7 = FigFormatReaderGetFigBaseObject(*(_QWORD *)(a1 + 240));
    v8 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
    if (v8)
      v9 = v8(v7, CFSTR("EstimatedDuration"), v4, &v15);
    else
      v9 = 4294954514;
  }
  if (!v15)
  {
    v10 = *(_QWORD *)(a1 + 240);
    if ((*(_BYTE *)(a1 + 81) & 1) != 0)
    {
      v11 = FigFormatReaderGetFigBaseObject(v10);
      v12 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
      if (v12)
      {
        v13 = kFigFormatReaderProperty_NominalDuration;
        goto LABEL_14;
      }
    }
    else
    {
      v11 = FigFormatReaderGetFigBaseObject(v10);
      v12 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
      if (v12)
      {
        v13 = kFigFormatReaderProperty_Duration;
LABEL_14:
        v9 = v12(v11, *v13, v4, &v15);
        goto LABEL_16;
      }
    }
    v9 = 4294954514;
  }
LABEL_16:
  if (cf)
    CFRelease(cf);
  *a2 = v15;
  return v9;
}

void ReviseTracksArrayProperty(char *a1)
{
  if (MEMORY[0x19402D578](a1 + 464))
    LockTrackMacroPropertyState();
  free(0);
  CFRelease(a1);
}

uint64_t EnsureTrackWorkQueueCreated(uint64_t a1)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 280))
    return 0;
  v2 = FigDispatchQueueCreateWithPriority();
  *(_QWORD *)(a1 + 280) = v2;
  if (v2)
    return 0;
  else
    return FigSignalErrorAt();
}

void ReviseCouldContainFragmentsProperty(char *a1)
{
  uint64_t v2;
  dispatch_queue_t *v3;
  const void *v4;
  const void *v5;

  v2 = MEMORY[0x19402D578](a1 + 464);
  v5 = 0;
  if (v2)
  {
    v3 = (dispatch_queue_t *)v2;
    ObtainCouldContainFragmentsPropertyValue((uint64_t)a1, &v5);
    v4 = v5;
    ReviseProperty(v3, CFSTR("assetProperty_CouldContainFragments"), v5);
    if (v4)
      CFRelease(v4);
    CFRelease(v3);
  }
  CFRelease(a1);
}

CFTypeRef ObtainCouldContainFragmentsPropertyValue(uint64_t a1, _QWORD *a2)
{
  uint64_t FigBaseObject;
  void (*v4)(uint64_t, const __CFString *, _QWORD, const void **);
  CFTypeRef result;
  const void *v6;

  v6 = 0;
  FigBaseObject = FigFormatReaderGetFigBaseObject(*(_QWORD *)(a1 + 240));
  v4 = *(void (**)(uint64_t, const __CFString *, _QWORD, const void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
  if (!v4 || (v4(FigBaseObject, CFSTR("CouldContainFragments"), *MEMORY[0x1E0C9AE00], &v6), (result = v6) == 0))
    result = CFRetain((CFTypeRef)*MEMORY[0x1E0C9AE40]);
  *a2 = result;
  return result;
}

void ReviseContainsFragmentsProperty(char *a1)
{
  uint64_t v2;
  dispatch_queue_t *v3;
  const void *v4;
  const void *v5;

  v2 = MEMORY[0x19402D578](a1 + 464);
  v5 = 0;
  if (v2)
  {
    v3 = (dispatch_queue_t *)v2;
    ObtainContainsFragmentsPropertyValue((uint64_t)a1, &v5);
    v4 = v5;
    ReviseProperty(v3, CFSTR("assetProperty_ContainsFragments"), v5);
    if (v4)
      CFRelease(v4);
    CFRelease(v3);
  }
  CFRelease(a1);
}

CFTypeRef ObtainContainsFragmentsPropertyValue(uint64_t a1, _QWORD *a2)
{
  uint64_t FigBaseObject;
  void (*v4)(uint64_t, const __CFString *, _QWORD, const void **);
  CFTypeRef result;
  const void *v6;

  v6 = 0;
  FigBaseObject = FigFormatReaderGetFigBaseObject(*(_QWORD *)(a1 + 240));
  v4 = *(void (**)(uint64_t, const __CFString *, _QWORD, const void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
  if (!v4 || (v4(FigBaseObject, CFSTR("ContainsFragments"), *MEMORY[0x1E0C9AE00], &v6), (result = v6) == 0))
    result = CFRetain((CFTypeRef)*MEMORY[0x1E0C9AE40]);
  *a2 = result;
  return result;
}

uint64_t EnsureBytePump(dispatch_queue_t *a1, uint64_t a2)
{
  uint64_t Options;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, __CFString *, _QWORD);
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, __CFString *, _QWORD);
  void *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t);
  const void *v22;
  NSObject *v23;
  CFTypeRef cf;
  CFTypeRef v26;

  cf = 0;
  v26 = 0;
  Options = EnsureContentStreamCreated(a1, a2);
  if ((_DWORD)Options)
    goto LABEL_48;
  if (!*(_BYTE *)(a2 + 192))
  {
    v5 = FigSignalErrorAt();
    if (!(_DWORD)v5)
      goto LABEL_32;
    goto LABEL_26;
  }
  Options = EnsureStorageSessionCreated(a1, a2);
  if ((_DWORD)Options)
    goto LABEL_48;
  if (*(_DWORD *)(a2 + 380))
  {
    v5 = 0;
    goto LABEL_32;
  }
  *(_QWORD *)(a2 + 368) = dispatch_semaphore_create(0);
  *(_QWORD *)(a2 + 424) = FigReentrantMutexCreate();
  Options = CreateBytePumpCreateOptions(a1, a2, 1, (__CFDictionary **)&cf);
  if ((_DWORD)Options)
    goto LABEL_48;
  Options = FigCFHTTPCreateCommonHTTPHeadersFromAssetCreationOptions((const __CFAllocator *)*MEMORY[0x1E0C9AE00], *(_QWORD *)(a2 + 88), *(_QWORD *)(a2 + 336), (__CFDictionary **)&v26);
  if ((_DWORD)Options)
    goto LABEL_48;
  v6 = (_QWORD *)(a2 + 384);
  Options = CreateSegmentBytePump(a1, a2, v26, (const __CFDictionary *)cf, (CFTypeRef *)(a2 + 384));
  if ((_DWORD)Options)
    goto LABEL_48;
  CMNotificationCenterGetDefaultLocalCenter();
  Options = FigNotificationCenterAddWeakListener();
  if ((_DWORD)Options)
    goto LABEL_48;
  CMNotificationCenterGetDefaultLocalCenter();
  Options = FigNotificationCenterAddWeakListener();
  if ((_DWORD)Options)
    goto LABEL_48;
  CMNotificationCenterGetDefaultLocalCenter();
  Options = FigNotificationCenterAddWeakListener();
  if ((_DWORD)Options)
    goto LABEL_48;
  Options = FigStartForwardingMediaServicesProcessDeathNotification();
  if ((_DWORD)Options)
    goto LABEL_48;
  *(_BYTE *)(a2 + 377) = 1;
  if (*(_BYTE *)(a2 + 379))
  {
    FigBytePumpGetFigBaseObject(*v6);
    v8 = v7;
    v9 = *(void (**)(uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v9)
      v9(v8, CFSTR("FBP_PrefetchKeys"), *MEMORY[0x1E0C9AE50]);
  }
  v10 = *v6;
  v11 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (!v11)
  {
    v5 = 4294954514;
    goto LABEL_26;
  }
  Options = v11(v10);
  if ((_DWORD)Options)
  {
LABEL_48:
    v5 = Options;
LABEL_26:
    *(_DWORD *)(a2 + 392) = v5;
    *(_DWORD *)(a2 + 380) = 5;
    v13 = *(_QWORD *)(a2 + 384);
    if (v13)
    {
      FigBytePumpGetFigBaseObject(v13);
      v15 = v14;
      v16 = *(void (**)(uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v16)
        v16(v15, CFSTR("FBP_SegmentCache"), 0);
    }
    v17 = *(void **)(a2 + 40);
    if (v17 && !FigAssetDownloadCoordinatorRelinquishAccessToURL(v17))
      *(_QWORD *)(a2 + 40) = 0;
    goto LABEL_32;
  }
  v12 = FigThreadRegisterAbortAction();
  v5 = v12;
  if (!(_DWORD)v12 || (_DWORD)v12 == -17561)
    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a2 + 368), 0xFFFFFFFFFFFFFFFFLL);
  FigThreadUnregisterAbortAction();
  if (*(_DWORD *)(a2 + 380) == 5)
    v5 = *(unsigned int *)(a2 + 392);
  if ((_DWORD)v5)
    goto LABEL_26;
LABEL_32:
  if (*(_BYTE *)(a2 + 378))
  {
    RemoveBytePumpListenersAndDoBarrier(a2);
    v18 = *(_DWORD *)(a2 + 380);
    if (v18 == 1)
    {
      FigBytePumpGetFigBaseObject(*(_QWORD *)(a2 + 384));
      if (v19)
      {
        v20 = v19;
        v21 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
        if (v21)
          v21(v20);
      }
      v22 = *(const void **)(a2 + 384);
      if (v22)
      {
        CFRelease(v22);
        *(_QWORD *)(a2 + 384) = 0;
      }
      v18 = *(_DWORD *)(a2 + 380);
    }
    if (v18 == 4)
    {
      v23 = *(NSObject **)(a2 + 368);
      if (v23)
      {
        dispatch_release(v23);
        *(_QWORD *)(a2 + 368) = 0;
      }
    }
  }
  if (cf)
    CFRelease(cf);
  if (v26)
    CFRelease(v26);
  return v5;
}

uint64_t CreateBytePumpCreateOptions(dispatch_queue_t *a1, uint64_t a2, int a3, __CFDictionary **a4)
{
  const __CFAllocator *v8;
  __CFDictionary *Mutable;
  __CFDictionary *v10;
  const void *BooleanValue;
  const void *DictionaryValue;
  const __CFArray *ArrayValue;
  const __CFArray *v14;
  uint64_t SanitizedOutOfBandAlternateTracksArray;
  const __CFDictionary *v16;
  const __CFDictionary *v17;
  const void *v18;
  const void *v19;
  const __CFData *v20;
  const __CFData *v21;
  uint64_t v22;
  const void *v23;
  uint64_t v24;
  CFTypeRef v25;
  _BOOL4 v26;
  const void *v27;
  const void *URLValue;
  const void *v29;
  const void *v30;
  const __CFURL *v31;
  uint64_t HTTPRequestOptions;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v40;
  void *v41;
  CFTypeRef v43;
  CFTypeRef cf;
  __int16 v45;
  CFTypeRef v46;
  CFTypeRef cf2;
  void *value;
  CFTypeRef v49;

  value = 0;
  v49 = 0;
  v46 = 0;
  cf2 = 0;
  v45 = 0;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v40 = FigSignalErrorAt();
    v31 = 0;
    v10 = 0;
    goto LABEL_81;
  }
  v10 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v10)
  {
    v40 = FigSignalErrorAt();
    v31 = 0;
    goto LABEL_81;
  }
  if (!*(_QWORD *)(a2 + 88))
  {
    v27 = 0;
    v26 = 0;
    v21 = 0;
    goto LABEL_43;
  }
  cf = 0;
  BooleanValue = (const void *)FigCFDictionaryGetBooleanValue();
  if (BooleanValue)
    CFDictionarySetValue(Mutable, CFSTR("FBPCreateOption_InheritURIQueryComponentFromReferencingURI"), BooleanValue);
  DictionaryValue = (const void *)FigCFDictionaryGetDictionaryValue();
  if (DictionaryValue)
    CFDictionarySetValue(Mutable, CFSTR("FBPCreateOption_AlternativeConfigurationOptions"), DictionaryValue);
  ArrayValue = (const __CFArray *)FigCFDictionaryGetArrayValue();
  if (ArrayValue)
  {
    v14 = ArrayValue;
    if (CFArrayGetCount(ArrayValue) >= 1)
    {
      SanitizedOutOfBandAlternateTracksArray = CreateSanitizedOutOfBandAlternateTracksArray(v14, (__CFArray **)&value);
      if ((_DWORD)SanitizedOutOfBandAlternateTracksArray)
      {
        v40 = SanitizedOutOfBandAlternateTracksArray;
        v21 = 0;
        goto LABEL_106;
      }
      CFDictionarySetValue(Mutable, CFSTR("FBPCreateOption_OutOfBandAlternateTracks"), value);
    }
  }
  v16 = (const __CFDictionary *)FigCFDictionaryGetDictionaryValue();
  if (v16)
  {
    v17 = v16;
    v18 = CFDictionaryGetValue(v16, CFSTR("assetOption_iTunesStoreContentRentalID"));
    if (v18)
      CFDictionarySetValue(Mutable, CFSTR("FBPCreateOption_iTunesRentalID"), v18);
    v19 = CFDictionaryGetValue(v17, CFSTR("assetOption_iTunesStoreContentDSID"));
    if (v19)
      CFDictionarySetValue(Mutable, CFSTR("FBPCreateOption_iTunesAccountID"), v19);
  }
  if (FigCFDictionaryGetInt64IfPresent())
    CFDictionarySetValue(Mutable, CFSTR("FBPCreateOption_DisallowCellularAccess"), (const void *)*MEMORY[0x1E0C9AE50]);
  v20 = (const __CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 88), CFSTR("assetOption_ParentNetworkActivityToken"));
  v21 = FigNWActivityCreateFromToken(v20);
  if (v21)
    CFDictionarySetValue(Mutable, CFSTR("FBPCreateOption_ParentNetworkActivity"), v21);
  FigCFDictionarySetValueFromKeyInDict();
  FigCFDictionarySetValueFromKeyInDict();
  FigCFDictionarySetValueFromKeyInDict();
  FigCFDictionarySetValueFromKeyInDict();
  FigCFDictionarySetValueFromKeyInDict();
  v22 = InternalURLAssetEnsureDownloadTokenEstablished(a2);
  if ((_DWORD)v22
    || (v22 = FigAssetDownloadCoordinatorCopyDestinationURLForDownloadToken(*(_QWORD *)(a2 + 24), &cf2), (_DWORD)v22))
  {
LABEL_105:
    v40 = v22;
LABEL_106:
    v31 = 0;
    goto LABEL_79;
  }
  v23 = CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 88), CFSTR("assetOption_DownloadDestinationURL"));
  v24 = (uint64_t)v23;
  v25 = cf2;
  if (!v23 || !cf2)
    goto LABEL_27;
  if (!CFEqual(v23, cf2))
  {
    v22 = FigSignalErrorAt();
    goto LABEL_105;
  }
  v25 = cf2;
LABEL_27:
  if (v25)
    v24 = (uint64_t)v25;
  if (a3 && v24)
    FigAssetDownloadCoordinatorRequestImmediateAccessToURL(v24, &v45, (_QWORD *)(a2 + 40));
  v26 = (_BYTE)v45 != 0;
  if ((_BYTE)v45)
    v27 = (const void *)v24;
  else
    v27 = 0;
  URLValue = (const void *)FigCFDictionaryGetURLValue();
  FigCFDictionaryGetBooleanIfPresent();
  if (HIBYTE(v45) && URLValue)
  {
    CFDictionarySetValue(v10, CFSTR("FSC_DiskCacheRepositoryURL"), URLValue);
    v29 = CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 88), CFSTR("assetOption_NetworkCacheUsePathAsKey"));
    v30 = (const void *)*MEMORY[0x1E0C9AE50];
    if (v29 == (const void *)*MEMORY[0x1E0C9AE50])
      CFDictionarySetValue(v10, CFSTR("FSC_UseURLPathAsCacheKey"), v29);
    if (CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 88), CFSTR("assetOption_NetworkCacheUseURLWithoutQueryStringAsKey")) == v30)CFDictionarySetValue(v10, CFSTR("FSC_UseURLWithoutQueryStringAsCacheKey"), v30);
    v26 = 1;
  }
LABEL_43:
  if (FigCFURLIsLocalResource() && !v27)
  {
    v27 = *(const void **)(a2 + 176);
    v26 = 1;
  }
  if (v27)
    CFDictionarySetValue(v10, CFSTR("FSC_DownloadDestinationURL"), v27);
  if (v26)
    CFDictionarySetValue(v10, CFSTR("FSC_Backing"), CFSTR("FSC_DiskBacking"));
  v22 = EnsureStreamingNetworkURL(a1, a2);
  if ((_DWORD)v22)
    goto LABEL_105;
  v31 = CFURLCopyAbsoluteURL(*(CFURLRef *)(a2 + 432));
  if (v31)
  {
    if (CFDictionaryGetCount(v10) >= 1 && !FigStreamingCacheCreate(v8, v31, v10, (uint64_t *)&v46))
      CFDictionarySetValue(Mutable, CFSTR("FBPCreateOption_StreamingCache"), v46);
    HTTPRequestOptions = CreateHTTPRequestOptions(a2, (CFMutableDictionaryRef *)&v49);
    if (!(_DWORD)HTTPRequestOptions)
    {
      if (v49)
        CFDictionarySetValue(Mutable, CFSTR("FBPCreateOption_HTTPRequestOptions"), v49);
      v33 = *(_QWORD *)(a2 + 384);
      if (v33)
      {
        v43 = 0;
        cf = 0;
        FigBytePumpGetFigBaseObject(v33);
        v35 = v34;
        v36 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (v36 && !v36(v35, CFSTR("FPB_CPECryptorsForSessionCryptKeys"), v8, &cf))
          CFDictionarySetValue(Mutable, CFSTR("FBPCreateOption_CPECryptors"), cf);
        if (cf)
          CFRelease(cf);
        FigBytePumpGetFigBaseObject(*(_QWORD *)(a2 + 384));
        v38 = v37;
        v39 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (v39 && !v39(v38, CFSTR("FBP_SessionConfiguration"), v8, &v43))
          CFDictionarySetValue(Mutable, CFSTR("FBPCreateOption_StoreBagSessionConfiguration"), v43);
        if (v43)
          CFRelease(v43);
      }
      HTTPRequestOptions = InternalURLAssetEnsureContentKeySessionCreated((_QWORD *)a2);
      if (!(_DWORD)HTTPRequestOptions)
      {
        CFDictionarySetValue(Mutable, CFSTR("FBPCreateOption_DefaultContentKeySession"), *(const void **)(a2 + 512));
        HTTPRequestOptions = InternalURLAssetEnsureContentKeyBoss((_QWORD *)a2);
        if (!(_DWORD)HTTPRequestOptions)
        {
          CFDictionarySetValue(Mutable, CFSTR("FBPCreateOption_ContentKeyBoss"), *(const void **)(a2 + 520));
          if ((*(_BYTE *)(a2 + 81) & 2) != 0)
            CFDictionarySetValue(Mutable, CFSTR("FBPCreateOption_DoNotLogURLs"), (const void *)*MEMORY[0x1E0C9AE50]);
          if (*(_QWORD *)(a2 + 16) != -1)
            dispatch_once_f((dispatch_once_t *)(a2 + 16), (void *)a2, (dispatch_function_t)CreateCustomURLLoaderOnceFunc);
          v40 = *(unsigned int *)(a2 + 496);
          if (!(_DWORD)v40)
          {
            CFDictionarySetValue(Mutable, CFSTR("FBPCreateOption_CustomURLLoader"), *(const void **)(a2 + 488));
            if (!CFDictionaryGetCount(Mutable))
            {
              CFRelease(Mutable);
              Mutable = 0;
            }
            v40 = 0;
            *a4 = Mutable;
            Mutable = 0;
          }
          goto LABEL_79;
        }
      }
    }
  }
  else
  {
    HTTPRequestOptions = FigSignalErrorAt();
  }
  v40 = HTTPRequestOptions;
LABEL_79:
  if (v21)
    CFRelease(v21);
LABEL_81:
  if (cf2)
    CFRelease(cf2);
  if (Mutable)
    CFRelease(Mutable);
  if (value)
    CFRelease(value);
  if (v49)
    CFRelease(v49);
  if (v31)
    CFRelease(v31);
  if (v10)
    CFRelease(v10);
  if (v46)
    CFRelease(v46);
  if ((_DWORD)v40)
  {
    v41 = *(void **)(a2 + 40);
    if (v41)
    {
      if (!FigAssetDownloadCoordinatorRelinquishAccessToURL(v41))
        *(_QWORD *)(a2 + 40) = 0;
    }
  }
  return v40;
}

uint64_t CreateSegmentBytePump(dispatch_queue_t *a1, uint64_t a2, const void *a3, const __CFDictionary *a4, CFTypeRef *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, __CFString *, _QWORD);
  CFTypeRef cf;
  char v16;

  v16 = 0;
  cf = 0;
  if (!a5)
    return 0;
  v9 = EnsureStreamingNetworkURL(a1, a2);
  if ((_DWORD)v9)
    return v9;
  v10 = FigBytePumpCreateForHTTPChunk((const void *)*MEMORY[0x1E0C9AE00], *(const __CFURL **)(a2 + 432), a3, a4, 0, (uint64_t)BytePumpCallback, 0, &cf);
  if (!(_DWORD)v10)
  {
    if (cf)
    {
      FigCFDictionaryGetBooleanIfPresent();
      if (v16)
      {
        FigBytePumpGetFigBaseObject(cf);
        v12 = v11;
        v13 = *(void (**)(uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
        if (v13)
          v13(v12, CFSTR("FBP_CoalesceByteRangeMediaSegmentRequests"), *MEMORY[0x1E0C9AE50]);
      }
      v10 = 0;
      *a5 = cf;
      return v10;
    }
    return 0;
  }
  if (cf)
    CFRelease(cf);
  return v10;
}

void PerformCompleteTransferBytePump(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(a1 + 40))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 8));
  FigStopForwardingMediaServicesProcessDeathNotification();
  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 32);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 16);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(a1 + 24);
  if (v5)
    CFRelease(v5);
  free((void *)a1);
}

uint64_t EnsureContentStreamCreated(dispatch_queue_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  const __CFDictionary *v6;
  const __CFString *Value;
  const __CFString *v8;
  CFTypeID v9;
  int v10;
  int IsShoutcastAudio;
  uint64_t CMBaseObject;
  void (*v13)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  const void *v14;
  const __CFString *v15;
  const __CFString *v16;
  CFTypeID v17;
  int v18;
  int v19;
  uint64_t v20;
  const __CFDictionary *v21;
  uint64_t StringValue;
  CFTypeRef v23;
  CFTypeRef *v24;
  uint64_t v25;
  CFTypeRef v26;
  const __CFDictionary *v27;
  uint64_t v28;
  int v29;
  const __CFDictionary *v30;
  const void *v31;
  uint64_t v32;
  const __CFAllocator *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, const __CFAllocator *, __CFSet **);
  int v38;
  CFTypeRef v39;
  const __CFURL *v40;
  CFTypeRef *v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int (*v44)(uint64_t, const __CFString *, _QWORD, const void **);
  CFMutableDictionaryRef v45;
  CFTypeRef v46;
  uint64_t v47;
  unsigned int (*v48)(uint64_t, uint64_t, const __CFAllocator *, CFMutableDictionaryRef *);
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t);
  int v52;
  CFTypeRef v53;
  uint64_t v54;
  unsigned int (*v55)(CFTypeRef, uint64_t, _QWORD, __CFSet **, _QWORD);
  CFTypeRef v56;
  CFTypeRef v57;
  int v58;
  __CFSet *v59;
  CFTypeRef v60;
  CFTypeRef v61;
  CFTypeRef v62;
  const void *v63;
  int v64;
  CFTypeRef v65;
  const void **v67;
  const void *v68;
  __CFSet *v69;
  uint64_t v70;
  const void **v71;
  const void *v72;
  unsigned int v73;
  CFTypeRef v74;
  CFTypeRef cf[2];
  CFTypeRef v76[2];
  CFTypeRef v77[2];
  uint64_t v78;
  uint64_t v79;
  CFDictionaryRef theDict;
  CFTypeRef v81;
  CFMutableDictionaryRef v82;
  __int16 v83;
  CFTypeRef v84;
  __CFHTTPMessage *v85;
  const __CFURL *v86;
  CFURLRef v87;
  CFTypeRef v88;
  __CFSet *v89[2];

  v81 = 0;
  v79 = 0;
  theDict = 0;
  v78 = 0;
  *(_OWORD *)v76 = 0u;
  *(_OWORD *)v77 = 0u;
  *(_OWORD *)cf = 0u;
  v74 = 0;
  if (*(_BYTE *)(a2 + 112))
  {
    v4 = 4294954511;
    goto LABEL_193;
  }
  if (*(_BYTE *)(a2 + 144))
    return *(unsigned int *)(a2 + 148);
  v5 = *(_DWORD *)(a2 + 64);
  if (v5 == 708989738)
  {
    cf[0] = CFRetain(*(CFTypeRef *)(a2 + 72));
    CMBaseObject = CMByteStreamGetCMBaseObject();
    v13 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v13)
      v13(CMBaseObject, *MEMORY[0x1E0CA2098], *MEMORY[0x1E0C9AE00], &v76[1]);
    v14 = 0;
    goto LABEL_50;
  }
  if (v5 != 1431456810)
  {
    v4 = 0;
    cf[0] = 0;
    goto LABEL_193;
  }
  v76[1] = CFRetain(*(CFTypeRef *)(a2 + 72));
  v6 = *(const __CFDictionary **)(a2 + 88);
  if (v6)
  {
    Value = (const __CFString *)CFDictionaryGetValue(v6, CFSTR("assetOption_OutOfBandMIMEType"));
    if (Value)
    {
      v8 = Value;
      v9 = CFGetTypeID(Value);
      if (v9 == CFStringGetTypeID())
      {
        v89[0] = 0;
        FigCopySetOfStreamingSupportedMIMETypes((const __CFAllocator *)*MEMORY[0x1E0C9AE00], v89);
        if (v89[0])
        {
          v10 = CFSetContainsValue(v89[0], v8);
          if (v10)
            IsShoutcastAudio = FigMediaValidatorMIMETypeIsShoutcastAudio(v8);
          else
            IsShoutcastAudio = 0;
          if (v89[0])
            CFRelease(v89[0]);
          v19 = 0;
          if (!v10 || IsShoutcastAudio)
            goto LABEL_24;
          goto LABEL_22;
        }
LABEL_23:
        v19 = 0;
        IsShoutcastAudio = 0;
        goto LABEL_24;
      }
    }
    v15 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 88), CFSTR("assetOption_OutOfBandFileType"));
    if (v15)
    {
      v16 = v15;
      v17 = CFGetTypeID(v15);
      if (v17 == CFStringGetTypeID())
      {
        v89[0] = 0;
        FigCopySetOfStreamingSupportedUTIs((const __CFAllocator *)*MEMORY[0x1E0C9AE00], v89);
        if (v89[0])
        {
          v18 = CFSetContainsValue(v89[0], v16);
          if (v18)
            v19 = FigMediaValidatorUTIIsShoutcastAudio(v16);
          else
            v19 = 0;
          if (v89[0])
            CFRelease(v89[0]);
          IsShoutcastAudio = 0;
          if (!v18 || v19)
          {
LABEL_24:
            v20 = SetupBytestreamFactoryParameters((char *)a2, &v79);
            if (!(_DWORD)v20)
            {
              if (theDict && CFDictionaryGetCount(theDict) >= 1)
              {
                v21 = theDict;
                v14 = CFDictionaryGetValue(theDict, CFSTR("factoryOption_DownloadDestinationURL"));
              }
              else
              {
                v14 = 0;
                v21 = 0;
              }
              StringValue = FigCFDictionaryGetStringValue();
              v23 = *(CFTypeRef *)(a2 + 72);
              if (!StringValue)
              {
                if (v23)
                  v23 = CFRetain(v23);
                v74 = v23;
                goto LABEL_35;
              }
              v20 = FigCFHTTPCreateURLWithQueryParam((const __CFURL *)v23, CFSTR("_HLS_primary_id="), StringValue, &v74);
              if (!(_DWORD)v20)
              {
                v23 = v74;
LABEL_35:
                if (*(_BYTE *)(a2 + 216))
                  v24 = &v77[1];
                else
                  v24 = 0;
                v25 = FigByteStreamFactoryCreateStreamFromURLWithOptions((const __CFURL *)v23, v79, v21, cf, &cf[1], v76, v24, &v81);
                v4 = v25;
                if (!(_DWORD)v25 || v14)
                  goto LABEL_49;
                LOBYTE(v89[0]) = 0;
                if (IsShoutcastAudio | v19)
                  goto LABEL_43;
                if (!FigMediaValidatorIsNonByteStreamURLStreaming(v25, *(const __CFURL **)(a2 + 72), (const __CFURL *)cf[1], (__CFHTTPMessage *)v76[0], v89))
                {
LABEL_45:
                  if (cf[1])
                  {
                    CFRelease(cf[1]);
                    cf[1] = 0;
                  }
                  if (v76[0])
                  {
                    CFRelease(v76[0]);
                    v76[0] = 0;
                  }
LABEL_49:
                  if ((_DWORD)v4)
                    goto LABEL_193;
                  goto LABEL_50;
                }
                if (LOBYTE(v89[0]))
LABEL_43:
                  *(_DWORD *)(a2 + 380) = 1;
                v4 = 0;
                LOBYTE(v78) = 1;
                goto LABEL_45;
              }
            }
            v4 = v20;
            goto LABEL_193;
          }
          goto LABEL_22;
        }
        goto LABEL_23;
      }
    }
  }
  if (!FigMediaValidatorIsNonRefMovieURLStreaming(*(_QWORD *)(a2 + 72), 0, 0))
    goto LABEL_23;
LABEL_22:
  v14 = 0;
  LOBYTE(v78) = 1;
LABEL_50:
  if ((_BYTE)v78)
    goto LABEL_170;
  if (*(_BYTE *)(a2 + 216))
  {
    v26 = v77[1];
    if (v77[1]
      || (CMByteStreamCopyProperty((uint64_t)cf[0], (uint64_t)CFSTR("CRABS_ReadAheadAssertion"), 0, (uint64_t)&v77[1]),
          (v26 = v77[1]) != 0))
    {
      FigAssertionSetProperty((uint64_t)v26, CFSTR("Assertion_HolderName"), CFSTR("FigAsset"));
    }
  }
  v27 = *(const __CFDictionary **)(a2 + 88);
  if (v27
    && CFDictionaryGetValue(v27, CFSTR("assetOption_InhibitReferenceMovieResolution")) == (const void *)*MEMORY[0x1E0C9AE50])
  {
    goto LABEL_157;
  }
  if (v81)
  {
    CFRelease(v81);
    v81 = 0;
  }
  v88 = 0;
  v89[0] = 0;
  v86 = 0;
  v87 = 0;
  v84 = 0;
  v85 = 0;
  if (!cf[0])
  {
    v4 = FigSignalErrorAt();
    goto LABEL_139;
  }
  v28 = *(_QWORD *)(a2 + 80);
  if ((v28 & 0x38) != 0)
    v29 = 30;
  else
    v29 = 2;
  v73 = v29 & (v28 >> 1);
  v72 = v14;
  if (theDict)
  {
    if (CFDictionaryGetCount(theDict) <= 0)
      v30 = 0;
    else
      v30 = theDict;
  }
  else
  {
    v30 = 0;
  }
  v31 = 0;
  v32 = *MEMORY[0x1E0CA2098];
  v33 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v71 = (const void **)(a2 + 528);
  v34 = 5;
  v70 = *MEMORY[0x1E0CA2FB8];
  while (1)
  {
    v83 = 0;
    IsReferenceMovie((uint64_t)cf[0], (BOOL *)&v83);
    if (!(_BYTE)v83)
    {
LABEL_134:
      v4 = 0;
      goto LABEL_138;
    }
    v35 = CMByteStreamGetCMBaseObject();
    v36 = *(unsigned int (**)(uint64_t, uint64_t, const __CFAllocator *, __CFSet **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
    if (!v36)
      goto LABEL_136;
    if (v36(v35, v32, v33, v89) || v89[0] == 0)
      goto LABEL_136;
    v38 = ResolveReferenceMovieWithOptions((uint64_t)cf[0], v89[0], v73, &v87);
    v39 = v76[1];
    v76[1] = v87;
    if (v87)
      CFRetain(v87);
    if (v39)
      CFRelease(v39);
    if (!v38 && !v87)
      v38 = FigSignalErrorAt();
    LODWORD(v77[0]) = v38;
    if (v38)
    {
LABEL_136:
      v4 = FigSignalErrorAt();
      goto LABEL_138;
    }
    if (FigMediaValidatorIsNonRefMovieURLStreaming(v76[1], 0, 0))
      break;
    if (v30)
      v31 = CFDictionaryGetValue(v30, CFSTR("factoryOption_DownloadDestinationURL"));
    if (!*(_BYTE *)(a2 + 288))
    {
      CMByteStreamGetCMBaseObject();
      FigCRABSGetClassID();
      if (CMBaseObjectIsMemberOfClass())
      {
        v43 = CMByteStreamGetCMBaseObject();
        v44 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                + 48);
        if (v44)
        {
          if (!v44(v43, CFSTR("CRABS_StorageSession"), 0, v71) && *v71)
          {
            v82 = 0;
            *(_DWORD *)(a2 + 292) = 0;
            *(_BYTE *)(a2 + 288) = 1;
            if (!theDict)
              theDict = CFDictionaryCreateMutable(v33, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            CreateHTTPRequestOptions(a2, &v82);
            v45 = v82;
            CFDictionarySetValue(theDict, CFSTR("factoryOption_HTTPRequestOptions"), v82);
            if (v45)
              CFRelease(v45);
            v30 = theDict;
            StoreByProduct(a1, CFSTR("assetProperty_StorageSession"), 0, 0, *v71);
          }
        }
      }
    }
    if (!*(_BYTE *)(a2 + 216))
    {
      v40 = v87;
      v42 = v79;
LABEL_101:
      v41 = 0;
      goto LABEL_103;
    }
    if (v77[1])
    {
      CFRelease(v77[1]);
      v77[1] = 0;
      v40 = v87;
      v41 = &v77[1];
      v42 = v79;
      if (*(_BYTE *)(a2 + 216))
        goto LABEL_103;
      goto LABEL_101;
    }
    v40 = v87;
    v42 = v79;
    v41 = &v77[1];
LABEL_103:
    v4 = FigByteStreamFactoryCreateStreamFromURLWithOptions(v40, v42, v30, &v88, &v86, &v85, v41, &v84);
    if (v77[1])
      FigAssertionSetProperty((uint64_t)v77[1], CFSTR("Assertion_HolderName"), CFSTR("FigAsset"));
    if ((_DWORD)v4)
    {
      if (v31 || !FigMediaValidatorIsNonByteStreamURLStreaming(v4, v87, v86, v85, (_BYTE *)&v83 + 1))
      {
        FigSignalErrorAt();
        goto LABEL_138;
      }
      if (HIBYTE(v83))
        *(_DWORD *)(a2 + 380) = 1;
      LOBYTE(v78) = 1;
    }
    else if (!*(_QWORD *)(a2 + 576))
    {
      v82 = 0;
      v47 = CMByteStreamGetCMBaseObject();
      v48 = *(unsigned int (**)(uint64_t, uint64_t, const __CFAllocator *, CFMutableDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v48)
      {
        if (!v48(v47, v70, v33, &v82))
          *(_QWORD *)(a2 + 576) = v82;
      }
    }
    if (!(_BYTE)v78 && !v88)
      goto LABEL_136;
    if (cf[0])
    {
      CFRelease(cf[0]);
      cf[0] = 0;
    }
    if (cf[1])
    {
      CFRelease(cf[1]);
      cf[1] = 0;
    }
    if (v76[0])
      CFRelease(v76[0]);
    v46 = v88;
    v88 = 0;
    cf[0] = v46;
    cf[1] = v86;
    v76[0] = v85;
    v85 = 0;
    v86 = 0;
    LOBYTE(v83) = 0;
    if (v87)
    {
      CFRelease(v87);
      v87 = 0;
    }
    if (v89[0])
    {
      CFRelease(v89[0]);
      v89[0] = 0;
    }
    if (v86)
    {
      CFRelease(v86);
      v86 = 0;
    }
    if (v85)
    {
      CFRelease(v85);
      v85 = 0;
    }
    if (!(_BYTE)v78)
    {
      if (--v34)
        continue;
    }
    goto LABEL_134;
  }
  v4 = 0;
  LOBYTE(v78) = 1;
LABEL_138:
  v14 = v72;
LABEL_139:
  if (v88)
  {
    v49 = CMByteStreamGetCMBaseObject();
    if (v49)
    {
      v50 = v49;
      v51 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v51)
        v51(v50);
    }
    CFRelease(v88);
  }
  if ((_DWORD)v4)
  {
    v81 = v84;
  }
  else if (v84)
  {
    CFRelease(v84);
  }
  if (v87)
    CFRelease(v87);
  if (v89[0])
    CFRelease(v89[0]);
  if (v86)
    CFRelease(v86);
  if (v85)
    CFRelease(v85);
  if (!(_DWORD)v4)
  {
LABEL_157:
    v52 = v78;
    if (!(_BYTE)v78 && cf[0])
    {
      if (FigCFHTTPIsDataURL((const __CFURL *)v76[1]))
      {
        v89[0] = 0;
        v53 = cf[0];
        v54 = FigStreamPlaylistParserMinBytesRequiredToVerifyM3UPlaylist();
        v55 = *(unsigned int (**)(CFTypeRef, uint64_t, _QWORD, __CFSet **, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 32);
        if (v55 && !v55(v53, v54, 0, v89, 0))
          LOBYTE(v78) = FigStreamingPlaylistVerifyM3UPlaylist(v89[0], 0);
        if (v89[0])
          CFRelease(v89[0]);
      }
      v52 = v78;
    }
    if (v52)
      goto LABEL_170;
    if (FigMediaValidatorIsNonRefMovieURLStreaming(v76[1], cf[1], v76[0]))
    {
      LOBYTE(v78) = 1;
      goto LABEL_170;
    }
    if ((_BYTE)v78)
    {
LABEL_170:
      if (cf[0])
      {
        CFRelease(cf[0]);
        cf[0] = 0;
      }
      if (v77[1])
      {
        CFRelease(v77[1]);
        v4 = 0;
        v77[1] = 0;
        goto LABEL_193;
      }
    }
    else
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(a2 + 136));
      v56 = cf[0];
      if (cf[0])
        v56 = CFRetain(cf[0]);
      *(_QWORD *)(a2 + 160) = v56;
      v57 = v77[1];
      if (v77[1])
      {
        v57 = CFRetain(v77[1]);
        v56 = *(CFTypeRef *)(a2 + 160);
      }
      *(_QWORD *)(a2 + 224) = v57;
      if (v56)
      {
        CMByteStreamGetCMBaseObject();
        FigCRABSGetClassID();
        if (CMBaseObjectIsMemberOfClass())
        {
          v89[0] = 0;
          *(_BYTE *)(a2 + 193) = 1;
          PropertyStoreSetComplainForSyncQueries((uint64_t)a1, 1);
          v58 = CMByteStreamCopyProperty(*(_QWORD *)(a2 + 160), (uint64_t)CFSTR("CRABS_CacheIsVolatile"), 0, (uint64_t)v89);
          v59 = v89[0];
          if (!v58)
            *(_BYTE *)(a2 + 194) = v89[0] == (__CFSet *)*MEMORY[0x1E0C9AE50];
          if (v59)
            CFRelease(v59);
        }
      }
      MEMORY[0x19402EF04](*(_QWORD *)(a2 + 136));
      if (!*(_BYTE *)(a2 + 288))
      {
        if (*(_BYTE *)(a2 + 193))
        {
          v67 = (const void **)(a2 + 528);
          if (!CMByteStreamCopyProperty(*(_QWORD *)(a2 + 160), (uint64_t)CFSTR("CRABS_StorageSession"), 0, a2 + 528))
          {
            v68 = *v67;
            if (*v67)
            {
              *(_DWORD *)(a2 + 292) = 0;
              *(_BYTE *)(a2 + 288) = 1;
              StoreByProduct(a1, CFSTR("assetProperty_StorageSession"), 0, 0, v68);
            }
          }
        }
      }
      if (!(_BYTE)v78 && *(_BYTE *)(a2 + 193))
      {
        if (v14)
        {
          v89[0] = 0;
          *(_QWORD *)(a2 + 304) = dispatch_queue_create("URLAssetPostPurchaseQueue", 0);
          FigThreadMakeDispatchQueueAbortable();
          *(_QWORD *)(a2 + 296) = dispatch_group_create();
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterAddWeakListener();
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterAddWeakListener();
          if (!CMByteStreamCopyProperty(*(_QWORD *)(a2 + 160), *MEMORY[0x1E0CA2078], 0, (uint64_t)v89))
          {
            v69 = v89[0];
            if (v89[0] == (__CFSet *)*MEMORY[0x1E0C9AE50])
            {
              CFRetain((CFTypeRef)a2);
              dispatch_group_async_f(*(dispatch_group_t *)(a2 + 104), *(dispatch_queue_t *)(a2 + 96), (void *)a2, (dispatch_function_t)URLAssetDoneDownloadingDispatchFunc);
              v69 = v89[0];
            }
            if (v69)
              CFRelease(v69);
          }
        }
        else
        {
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterAddWeakListener();
        }
      }
    }
    v4 = 0;
  }
LABEL_193:
  *(_BYTE *)(a2 + 192) = v78;
  v60 = v76[1];
  if (v76[1])
    v60 = CFRetain(v76[1]);
  *(_QWORD *)(a2 + 176) = v60;
  v61 = cf[1];
  if (cf[1])
    v61 = CFRetain(cf[1]);
  *(_QWORD *)(a2 + 184) = v61;
  *(_DWORD *)(a2 + 172) = v77[0];
  *(_BYTE *)(a2 + 168) = 1;
  *(_BYTE *)(a2 + 144) = 1;
  *(_DWORD *)(a2 + 148) = v4;
  if ((_DWORD)v4)
  {
    v62 = v81;
    if (v81)
      v62 = CFRetain(v81);
    *(_QWORD *)(a2 + 152) = v62;
  }
  if (theDict)
  {
    CFRelease(theDict);
    theDict = 0;
  }
  if (cf[0])
    CFRelease(cf[0]);
  if (v77[1])
    CFRelease(v77[1]);
  if (cf[1])
    CFRelease(cf[1]);
  if (v76[0])
    CFRelease(v76[0]);
  if (v76[1])
    CFRelease(v76[1]);
  v63 = *(const void **)(a2 + 184);
  if (!v63)
    v63 = *(const void **)(a2 + 176);
  StoreByProduct(a1, CFSTR("assetProperty_ResolvedURL"), *(_DWORD *)(a2 + 172), 0, v63);
  v64 = *(_DWORD *)(a2 + 148);
  v65 = v81;
  if (!v64 && v81)
  {
    CFRelease(v81);
    v65 = 0;
    v81 = 0;
    v64 = *(_DWORD *)(a2 + 148);
  }
  StoreByProduct(a1, CFSTR("assetProperty_ContentByteStream"), v64, v65, *(const void **)(a2 + 160));
  if (v81)
    CFRelease(v81);
  if (v74)
    CFRelease(v74);
  return v4;
}

uint64_t BytePumpNotificationHandler(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, const __CFDictionary *a5)
{
  int v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, __int128 *, __int128 *, _QWORD, int *, _QWORD, _QWORD);
  int Code;
  int v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, __CFString *, _QWORD, uint64_t);
  __CFError *Value;
  __CFError *v17;
  const void *v18;
  int v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  MEMORY[0x19402EA0C](*(_QWORD *)(a2 + 424));
  if (*(_DWORD *)(a2 + 380) == 5 || *(_BYTE *)(a2 + 378))
    return MEMORY[0x19402EA24](*(_QWORD *)(a2 + 424));
  if (CFEqual(a3, CFSTR("FBPAL_AlternateListChanged")))
  {
    v8 = *(_DWORD *)(a2 + 380);
    if (!v8)
    {
      *(_DWORD *)(a2 + 380) = 2;
      if (!*(_QWORD *)(a2 + 408))
      {
        FigBytePumpGetFigBaseObject(*(_QWORD *)(a2 + 384));
        v14 = v13;
        v15 = *(void (**)(uint64_t, __CFString *, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
        if (v15)
          v15(v14, CFSTR("FBP_PlaylistCache"), *MEMORY[0x1E0C9AE00], a2 + 408);
      }
      goto LABEL_30;
    }
    if (v8 != 3 || *(_BYTE *)(a2 + 376))
      return MEMORY[0x19402EA24](*(_QWORD *)(a2 + 424));
    v20 = 0;
    v9 = *(_QWORD *)(a2 + 384);
    v10 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, __int128 *, __int128 *, _QWORD, int *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v10)
    {
      v23 = *MEMORY[0x1E0CA2E18];
      v24 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      v21 = v23;
      v22 = v24;
      Code = v10(v9, 0, 0, 0, 0, 1, &v23, &v21, 0, &v20, 0, 0);
    }
    else
    {
      Code = -12782;
    }
    v17 = 0;
  }
  else
  {
    if (CFEqual(a3, CFSTR("FBP_DurationChanged")))
    {
      v12 = 4;
LABEL_29:
      *(_DWORD *)(a2 + 380) = v12;
      *(_BYTE *)(a2 + 378) = 1;
LABEL_30:
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a2 + 368));
      return MEMORY[0x19402EA24](*(_QWORD *)(a2 + 424));
    }
    if (!CFEqual(a3, CFSTR("FBP_FatalErrorOccurred")))
      return MEMORY[0x19402EA24](*(_QWORD *)(a2 + 424));
    if (!a5 || (Value = (__CFError *)CFDictionaryGetValue(a5, CFSTR("FBPFEN_Error"))) == 0)
    {
      *(_DWORD *)(a2 + 392) = -12645;
      v18 = *(const void **)(a2 + 400);
      *(_QWORD *)(a2 + 400) = 0;
LABEL_25:
      if (v18)
        CFRelease(v18);
      v12 = 5;
      goto LABEL_29;
    }
    v17 = Value;
    Code = CFErrorGetCode(Value);
  }
  if (Code == -12646)
  {
    v12 = 1;
    goto LABEL_29;
  }
  if (Code)
  {
    *(_DWORD *)(a2 + 392) = Code;
    v18 = *(const void **)(a2 + 400);
    *(_QWORD *)(a2 + 400) = v17;
    if (v17)
      CFRetain(v17);
    goto LABEL_25;
  }
  return MEMORY[0x19402EA24](*(_QWORD *)(a2 + 424));
}

void BytePumpAbortAction(uint64_t a1)
{
  uint64_t ErrorForOSStatus;
  uint64_t v3;
  const __CFDictionary *v4;
  void *values;

  values = 0;
  ErrorForOSStatus = FigCreateErrorForOSStatus(4294954511, (CFErrorRef *)&values);
  if (values)
  {
    v4 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&kFigBytePumpFatalErrorNotificationValue_Error, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    ErrorForOSStatus = (uint64_t)values;
    if (values)
      CFRelease(values);
  }
  else
  {
    v4 = 0;
  }
  BytePumpNotificationHandler(ErrorForOSStatus, a1, CFSTR("FBP_FatalErrorOccurred"), v3, v4);
  if (v4)
    CFRelease(v4);
}

void URLAssetDoneDownloadingDispatchFunc(uint64_t *a1)
{
  URLAssetDoneDownloadingGuts((uint64_t)a1, a1[20], 0);
  CFRelease(a1);
}

uint64_t CreateSanitizedOutOfBandAlternateTracksArray(const __CFArray *a1, __CFArray **a2)
{
  CFIndex v4;
  const void *v5;
  const void *v6;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  const __CFArray *v9;
  uint64_t MutableCopy;
  __CFDictionary *v11;
  const void *CFStringForOSTypeValue;
  const void *v13;
  CFIndex v14;
  int v15;
  int v16;
  const void *v17;
  uint64_t v18;
  __CFArray **v20;
  CFIndex Count;
  __CFArray *theArray;
  CFRange v23;
  CFRange v24;

  theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!theArray)
  {
    v18 = FigSignalErrorAt();
    goto LABEL_20;
  }
  Count = CFArrayGetCount(a1);
  if (Count < 1)
  {
    v18 = 0;
  }
  else
  {
    v20 = a2;
    v4 = 0;
    v5 = (const void *)*MEMORY[0x1E0C9AE50];
    v6 = (const void *)*MEMORY[0x1E0C9AE40];
    while (1)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v4);
      Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("MediaSelectionOptionsMediaType"));
      v9 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, CFSTR("MediaSelectionOptionsTaggedMediaCharacteristics"));
      MutableCopy = FigCFDictionaryCreateMutableCopy();
      if (!MutableCopy)
        break;
      v11 = (__CFDictionary *)MutableCopy;
      if (!Value)
      {
        CFStringForOSTypeValue = (const void *)FigGetCFStringForOSTypeValue();
        CFDictionarySetValue(v11, CFSTR("MediaSelectionOptionsMediaType"), CFStringForOSTypeValue);
      }
      ++v4;
      FigCFDictionarySetInt32();
      v13 = v5;
      if (v9)
      {
        v14 = CFArrayGetCount(v9);
        v23.location = 0;
        v23.length = v14;
        v15 = CFArrayContainsValue(v9, v23, CFSTR("public.auxiliary-content"));
        v24.location = 0;
        v24.length = v14;
        v16 = CFArrayContainsValue(v9, v24, CFSTR("public.subtitles.forced-only"));
        if (v15)
          v17 = v5;
        else
          v17 = v6;
        CFDictionarySetValue(v11, CFSTR("MediaSelectionOptionsIsAuxiliaryContent"), v17);
        if (v16)
          v13 = v6;
        else
          v13 = v5;
      }
      CFDictionarySetValue(v11, CFSTR("MediaSelectionOptionsDisplaysNonForcedSubtitles"), v13);
      CFArrayAppendValue(theArray, v11);
      CFRelease(v11);
      if (Count == v4)
      {
        v18 = 0;
        a2 = v20;
        goto LABEL_17;
      }
    }
    v18 = FigSignalErrorAt();
    a2 = v20;
    if ((_DWORD)v18)
    {
      CFRelease(theArray);
LABEL_20:
      theArray = 0;
    }
  }
LABEL_17:
  *a2 = theArray;
  return v18;
}

uint64_t EnsureStreamingNetworkURL(dispatch_queue_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  const __CFAllocator *v6;
  uint64_t FigBaseObject;
  uint64_t (*v8)(uint64_t, const __CFString *, const __CFAllocator *, CFStringRef *);
  CFURLRef v9;
  CFTypeRef v10;
  CFStringRef URLString;
  CFTypeRef cf;

  URLString = 0;
  cf = 0;
  if (*(_BYTE *)(a2 + 440))
    return *(unsigned int *)(a2 + 444);
  v5 = EnsureContentStreamCreated(a1, a2);
  if ((_DWORD)v5)
    goto LABEL_23;
  if (!FigCFURLIsLocalResource())
  {
    v10 = *(CFTypeRef *)(a2 + 176);
    if (!v10)
    {
      v9 = 0;
      goto LABEL_15;
    }
    v10 = CFRetain(v10);
    v9 = (CFURLRef)v10;
    if (!v10)
    {
LABEL_15:
      v3 = 0;
      *(_QWORD *)(a2 + 432) = v10;
      goto LABEL_16;
    }
LABEL_12:
    v10 = CFRetain(v9);
    goto LABEL_15;
  }
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v5 = FigHLSPersistentStoreCreateAtURL((const void *)*MEMORY[0x1E0C9AE00], *(_QWORD *)(a2 + 176), 0, 0, &cf);
  if ((_DWORD)v5)
    goto LABEL_23;
  FigBaseObject = FigHLSPersistentStoreGetFigBaseObject(cf);
  v8 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFStringRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v8)
  {
    v9 = 0;
    v3 = 4294954514;
    goto LABEL_16;
  }
  v5 = v8(FigBaseObject, CFSTR("MasterPlaylistNetworkURL"), v6, &URLString);
  if ((_DWORD)v5)
  {
LABEL_23:
    v3 = v5;
    v9 = 0;
    goto LABEL_16;
  }
  v9 = CFURLCreateWithString(v6, URLString, 0);
  if (v9)
    goto LABEL_12;
  v3 = FigSignalErrorAt();
LABEL_16:
  *(_BYTE *)(a2 + 440) = 1;
  *(_DWORD *)(a2 + 444) = v3;
  StoreByProduct(a1, CFSTR("assetProperty_OriginalNetworkContentURL"), v3, 0, *(const void **)(a2 + 432));
  if (v9)
    CFRelease(v9);
  if (URLString)
    CFRelease(URLString);
  if (cf)
    CFRelease(cf);
  return v3;
}

uint64_t EnsureTracksArrayCreated(dispatch_queue_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, CFIndex *);
  BOOL v7;
  CFMutableArrayRef Mutable;
  uint64_t v9;
  const __CFString *Error;
  CFIndex capacity;

  capacity = 0;
  if (*(_BYTE *)(a2 + 112))
  {
    *(_QWORD *)(a2 + 272) = 0;
    *(_BYTE *)(a2 + 260) = 1;
    v3 = 4294954511;
    goto LABEL_18;
  }
  if (*(_BYTE *)(a2 + 260))
    return *(unsigned int *)(a2 + 264);
  v4 = EnsureFormatReaderCreated(a1, a2);
  if (!(_DWORD)v4)
  {
    v5 = *(_QWORD *)(a2 + 240);
    v6 = *(uint64_t (**)(uint64_t, CFIndex *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (!v6)
    {
      Mutable = 0;
      v3 = 4294954514;
      goto LABEL_15;
    }
    v4 = v6(v5, &capacity);
    if ((_DWORD)v4)
      v7 = 1;
    else
      v7 = capacity == 0;
    if (!v7)
    {
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], capacity, MEMORY[0x1E0C9B378]);
      if (Mutable)
      {
        v9 = EnsureTrackWorkQueueCreated(a2);
        if (!(_DWORD)v9)
          LockTrackMacroPropertyState();
      }
      else
      {
        v9 = FigSignalErrorAt();
      }
      v3 = v9;
      goto LABEL_15;
    }
  }
  v3 = v4;
  Mutable = 0;
LABEL_15:
  if (!Mutable || !(_DWORD)v3)
  {
    *(_QWORD *)(a2 + 272) = Mutable;
    *(_BYTE *)(a2 + 260) = 1;
    *(_DWORD *)(a2 + 264) = v3;
    if (!(_DWORD)v3)
    {
      StoreByProduct(a1, CFSTR("assetProperty_Tracks"), 0, 0, Mutable);
      return v3;
    }
    goto LABEL_20;
  }
  CFRelease(Mutable);
  *(_QWORD *)(a2 + 272) = 0;
  *(_BYTE *)(a2 + 260) = 1;
LABEL_18:
  *(_DWORD *)(a2 + 264) = v3;
LABEL_20:
  Error = AssetCopyLoadError(a2, v3);
  StoreByProduct(a1, CFSTR("assetProperty_Tracks"), *(_DWORD *)(a2 + 264), Error, *(const void **)(a2 + 272));
  if (Error)
    CFRelease(Error);
  return v3;
}

uint64_t EnsureFormatReaderCreated(dispatch_queue_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t BooleanIfPresent;
  CFTypeRef v6;
  __CFDictionary *Mutable;
  __CFDictionary *v8;
  uint64_t v9;
  const void **v10;
  const void *BooleanValue;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const __CFNumber *NumberValue;
  _QWORD *v23;
  __CFDictionary *DictionaryValue;
  const void *v25;
  const void *v26;
  __CFDictionary *MutableCopy;
  const void *v28;
  const void *v29;
  CFTypeID v30;
  const void *v31;
  const void *v32;
  CFTypeID v33;
  const void *v34;
  const void *v35;
  CFTypeID v36;
  uint64_t v37;
  CFTypeRef v38;
  _QWORD *v39;
  uint64_t (*v40)(uint64_t, CFTypeRef, CFDataRef *);
  uint64_t v41;
  uint64_t (*v42)(uint64_t, const __CFString *, CFDataRef *);
  const void *UInt32;
  int v44;
  int v45;
  const void *v46;
  const __CFAllocator *AllocatorForMedia;
  _QWORD *v48;
  CFTypeRef *v49;
  _DWORD *v50;
  uint64_t v51;
  uint64_t started;
  uint64_t v53;
  unsigned int (*v54)(uint64_t, const __CFString *, _QWORD, CFDictionaryRef *);
  const __CFNumber *v55;
  const __CFNumber *v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  uint64_t v59;
  void (*v60)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  BOOL v61;
  NSObject *v62;
  uint64_t v63;
  uint64_t FigBaseObject;
  void (*v65)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const void *v66;
  const __CFString *Error;
  int v68;
  dispatch_queue_t *v70;
  uint64_t v71;
  void *value;
  CFDataRef theData;
  CFTypeRef v74;
  unsigned __int8 v75;
  __int16 v76;
  const void *valuePtr;
  const void *v78;
  CFDictionaryRef theDict;
  CFTypeRef cf[3];

  cf[2] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v76 = 0;
  v75 = 0;
  v74 = 0;
  if (*(_BYTE *)(a2 + 112))
  {
    v4 = 4294954511;
LABEL_147:
    *(_BYTE *)(a2 + 232) = 1;
    *(_DWORD *)(a2 + 236) = v4;
    goto LABEL_138;
  }
  if (*(_BYTE *)(a2 + 232))
    return *(unsigned int *)(a2 + 236);
  if (*(_QWORD *)(a2 + 88))
    FigCFDictionaryGetBooleanIfPresent();
  BooleanIfPresent = FigCFDictionaryGetBooleanIfPresent();
  if (FigAssetAllowsSandboxedParsingOptIn(BooleanIfPresent))
    FigCFDictionaryGetBooleanIfPresent();
  if (*(_DWORD *)(a2 + 64) == 709251626)
  {
    v6 = *(CFTypeRef *)(a2 + 72);
    if (v6)
      v6 = CFRetain(v6);
    Mutable = 0;
    v8 = 0;
    *(_QWORD *)(a2 + 240) = v6;
LABEL_122:
    if (HIBYTE(v76))
    {
      cf[0] = 0;
      FigBaseObject = FigFormatReaderGetFigBaseObject(*(_QWORD *)(a2 + 240));
      v65 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
      if (v65)
        v65(FigBaseObject, CFSTR("Identifier"), *MEMORY[0x1E0C9AE00], cf);
      if (FigCFEqual())
      {
        v4 = 0;
      }
      else
      {
        FigStopForwardingMediaServicesProcessDeathNotification();
        v66 = *(const void **)(a2 + 240);
        if (v66)
        {
          CFRelease(v66);
          *(_QWORD *)(a2 + 240) = 0;
        }
        v4 = FigSignalErrorAt();
      }
      if (cf[0])
        CFRelease(cf[0]);
    }
    else
    {
      v4 = 0;
    }
    goto LABEL_133;
  }
  v9 = EnsureContentStreamCreated(a1, a2);
  if ((_DWORD)v9)
  {
    v4 = v9;
    goto LABEL_147;
  }
  if (*(_BYTE *)(a2 + 192))
  {
    v4 = FigSignalErrorAt();
    goto LABEL_137;
  }
  v10 = (const void **)MEMORY[0x1E0C9AE50];
  if (!*(_QWORD *)(a2 + 88))
  {
    Mutable = 0;
    DictionaryValue = 0;
    v8 = 0;
    goto LABEL_74;
  }
  v70 = a1;
  BooleanValue = (const void *)FigCFDictionaryGetBooleanValue();
  v12 = (const void *)FigCFDictionaryGetBooleanValue();
  v13 = (const void *)FigCFDictionaryGetBooleanValue();
  v14 = CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 88), CFSTR("assetOption_IsMovieProxy"));
  v15 = *v10;
  if (v14 == *v10)
    v16 = v14;
  else
    v16 = 0;
  v17 = CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 88), CFSTR("assetOption_SupportAliasDataReferences"));
  if (v17 == v15)
    v18 = v17;
  else
    v18 = 0;
  v19 = (const void *)FigCFDictionaryGetBooleanValue();
  v20 = (const void *)FigCFDictionaryGetBooleanValue();
  v71 = FigCFDictionaryGetBooleanValue();
  value = (void *)FigCFDictionaryGetBooleanValue();
  v21 = CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 88), CFSTR("assetOption_PrepareForIncrementalFragments"));
  *(_BYTE *)(a2 + 544) = v21 == v15;
  if (v21 == v15)
  {
    NumberValue = (const __CFNumber *)FigCFDictionaryGetNumberValue();
    v23 = (_QWORD *)(a2 + 552);
    if (!NumberValue
      || (CFNumberGetValue(NumberValue, kCFNumberSInt64Type, (void *)(a2 + 552)), (*v23 & 0x8000000000000000) != 0))
    {
      *v23 = 0;
    }
  }
  DictionaryValue = (__CFDictionary *)FigCFDictionaryGetDictionaryValue();
  if (BooleanValue || v12 || v13 || v16 || v18 || v19 || v20)
  {
    MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
    DictionaryValue = MutableCopy;
    if (BooleanValue)
      CFDictionarySetValue(MutableCopy, CFSTR("Instantiation_PreferPreciseDurationAndTiming"), BooleanValue);
    if (v12)
      CFDictionarySetValue(DictionaryValue, CFSTR("ReadEntireMoovAtom"), v12);
    if (v13)
      CFDictionarySetValue(DictionaryValue, CFSTR("Instantiation_PrepareForCopying"), v13);
    if (v16)
      CFDictionarySetValue(DictionaryValue, CFSTR("Instantiation_MovieProxy"), v16);
    if (v18)
      CFDictionarySetValue(DictionaryValue, CFSTR("QTMovie_SupportAliasRecords"), v18);
    if (v19)
      CFDictionarySetValue(DictionaryValue, CFSTR("Instantiation_EnableAssetAnalysis"), v19);
    a1 = v70;
    v26 = (const void *)v71;
    v10 = (const void **)MEMORY[0x1E0C9AE50];
    v25 = value;
    goto LABEL_51;
  }
  v26 = (const void *)v71;
  v25 = value;
  if (*(_BYTE *)(a2 + 544) || v71 || value)
  {
    DictionaryValue = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
    a1 = v70;
    v10 = (const void **)MEMORY[0x1E0C9AE50];
LABEL_51:
    if (*(_BYTE *)(a2 + 544))
      CFDictionarySetValue(DictionaryValue, CFSTR("Instantiation_AllowIncrementalFragmentParsing"), v15);
    if (v20)
      CFDictionarySetValue(DictionaryValue, CFSTR("Instantiation_SkipReadingMP3MetadataDuringFormatReaderCreation"), v20);
    if (v26)
      CFDictionarySetValue(DictionaryValue, CFSTR("Instantiation_ProhibitProFormatReaders"), v26);
    if (v25)
      CFDictionarySetValue(DictionaryValue, CFSTR("Instantiation_DoNotUseAudioFileAllowList"), v25);
    v8 = DictionaryValue;
    goto LABEL_60;
  }
  v8 = 0;
  a1 = v70;
  v10 = (const void **)MEMORY[0x1E0C9AE50];
LABEL_60:
  v28 = CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 88), CFSTR("assetOption_OutOfBandMIMEType"));
  if (v28 && (v29 = v28, v30 = CFGetTypeID(v28), v30 == CFStringGetTypeID()))
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(Mutable, CFSTR("Selection_OutOfBandMIMEType"), v29);
  }
  else
  {
    Mutable = 0;
  }
  v31 = CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 88), CFSTR("assetOption_OutOfBandFileType"));
  if (v31)
  {
    v32 = v31;
    v33 = CFGetTypeID(v31);
    if (v33 == CFStringGetTypeID())
    {
      if (!Mutable)
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CFDictionarySetValue(Mutable, CFSTR("Selection_OutOfBandFileType"), v32);
    }
  }
  v34 = CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 88), CFSTR("assetOption_AllowableTypes"));
  if (v34)
  {
    v35 = v34;
    v36 = CFGetTypeID(v34);
    if (v36 == CFArrayGetTypeID())
    {
      if (!Mutable)
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CFDictionarySetValue(Mutable, CFSTR("Selection_AllowableTypes"), v35);
    }
  }
LABEL_74:
  theData = 0;
  if (PKDIsContentKeyBossEnabled() && *(_QWORD *)(a2 + 520))
  {
    cf[0] = 0;
    v4 = FigContentKeySpecifierCreate(3, CFSTR("AudibleGroupID"), 0, 0, (uint64_t *)cf);
    if (!(_DWORD)v4)
    {
      v37 = *(_QWORD *)(a2 + 520);
      v38 = cf[0];
      v39 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
      v40 = (uint64_t (*)(uint64_t, CFTypeRef, CFDataRef *))v39[13];
      if (v40 && *v39 >= 2uLL)
        v4 = v40(v37, v38, &theData);
      else
        v4 = 4294954514;
    }
    if (cf[0])
      CFRelease(cf[0]);
  }
  else
  {
    v41 = *(_QWORD *)(a2 + 512);
    if (v41)
    {
      v42 = *(uint64_t (**)(uint64_t, const __CFString *, CFDataRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 80);
      if (!v42)
      {
        v4 = 4294954514;
        goto LABEL_133;
      }
      v4 = v42(v41, CFSTR("AudibleGroupID"), &theData);
    }
    else
    {
      v4 = 0;
    }
  }
  if ((_DWORD)v4 || !theData)
  {
    if ((_DWORD)v4)
      goto LABEL_133;
  }
  else
  {
    if ((unint64_t)CFDataGetLength(theData) >= 4)
    {
      CFDataGetBytePtr(theData);
      UInt32 = (const void *)FigCFNumberCreateUInt32();
      if (!v8)
      {
        DictionaryValue = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
        v8 = DictionaryValue;
      }
      CFDictionarySetValue(v8, CFSTR("Instantiation_AudibleGroupID"), UInt32);
      if (UInt32)
        CFRelease(UInt32);
    }
    CFRelease(theData);
  }
  v44 = FigAssetUsesRemoteFormatReader() | v75;
  v45 = v76;
  v46 = *(const void **)(a2 + 160);
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  v48 = (_QWORD *)(a2 + 240);
  v49 = (CFTypeRef *)(a2 + 248);
  v50 = (_DWORD *)(a2 + 256);
  if (!v44 || v45)
  {
    started = FigFormatReaderCreateForStreamReturningResults((uint64_t)v46, Mutable, AllocatorForMedia, (uint64_t)DictionaryValue, (CFTypeRef *)(a2 + 240), v49, v50, &v74);
  }
  else
  {
    v51 = FigFormatReaderRemoteCreateForStreamReturningResults(v46, (uint64_t)Mutable, (uint64_t)AllocatorForMedia, (uint64_t)DictionaryValue, (_QWORD *)(a2 + 240), v49, v50, &v74);
    if ((_DWORD)v51)
    {
      v4 = v51;
      goto LABEL_133;
    }
    started = FigStartForwardingMediaServicesProcessDeathNotification();
  }
  v4 = started;
  if (!(_DWORD)started)
  {
    if (*(_BYTE *)(a2 + 193))
    {
      theDict = 0;
      v53 = FigFormatReaderGetFigBaseObject(*v48);
      v54 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 48);
      if (v54)
      {
        if (!v54(v53, CFSTR("ImportantResourceLocation"), *MEMORY[0x1E0C9AE00], &theDict) && theDict)
        {
          valuePtr = 0;
          v78 = 0;
          v55 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("LocationSize"));
          if (v55)
            CFNumberGetValue(v55, kCFNumberSInt64Type, &valuePtr);
          v56 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("LocationOffset"));
          if (v56)
          {
            CFNumberGetValue(v56, kCFNumberSInt64Type, &v78);
            if (valuePtr)
            {
              cf[0] = v78;
              cf[1] = valuePtr;
              v57 = *(_QWORD *)(a2 + 160);
              v58 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 24)
                                                                                  + 8);
              if (v58)
                v58(v57, 1, 1, cf);
            }
          }
          CFRelease(theDict);
        }
      }
    }
    if (*(_BYTE *)(a2 + 544))
    {
      cf[0] = 0;
      v59 = FigFormatReaderGetFigBaseObject(*v48);
      v60 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
      if (v60)
      {
        v60(v59, CFSTR("CouldContainFragments"), *MEMORY[0x1E0C9AE00], cf);
        v60 = (void (*)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))cf[0];
      }
      v61 = v60 == *v10;
      *(_BYTE *)(a2 + 544) = v61;
      if (v61)
      {
        v62 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(a2 + 96));
        *(_QWORD *)(a2 + 560) = v62;
        if (v62)
        {
          dispatch_source_set_timer(v62, 0xFFFFFFFFFFFFFFFFLL, 0, 0);
          dispatch_set_context(*(dispatch_object_t *)(a2 + 560), (void *)a2);
          dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a2 + 560), (dispatch_function_t)IncrementalFragmentParsingTimerFunction);
          *(_QWORD *)(a2 + 568) = voucher_copy();
          dispatch_resume(*(dispatch_object_t *)(a2 + 560));
          v63 = *(_QWORD *)(a2 + 552);
          if (v63)
            dispatch_source_set_timer(*(dispatch_source_t *)(a2 + 560), 0, 1000000 * v63, 1000000 * (v63 / 100));
        }
        *(_BYTE *)(a2 + 456) = 1;
      }
    }
    goto LABEL_122;
  }
LABEL_133:
  if (Mutable)
    CFRelease(Mutable);
  if (v8)
    CFRelease(v8);
LABEL_137:
  *(_BYTE *)(a2 + 232) = 1;
  *(_DWORD *)(a2 + 236) = v4;
  if ((_DWORD)v4)
  {
LABEL_138:
    Error = AssetCopyLoadError(a2, v4);
    v68 = *(_DWORD *)(a2 + 236);
    goto LABEL_140;
  }
  v68 = 0;
  Error = 0;
LABEL_140:
  StoreByProduct(a1, CFSTR("assetProperty_FormatReader"), v68, Error, *(const void **)(a2 + 240));
  if (v74)
  {
    StoreByProduct(a1, CFSTR("AssetAnalysisMessages"), 0, 0, v74);
    if (v74)
      CFRelease(v74);
  }
  if (Error)
    CFRelease(Error);
  return v4;
}

void IncrementalFragmentParsingTimerFunction(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, _QWORD, int *);
  int v5;

  if (a1)
  {
    os_retain(*(void **)(a1 + 568));
    voucher_adopt();
    if (*(_BYTE *)(a1 + 112)
      || !*(_BYTE *)(a1 + 544)
      || (v3 = *(_QWORD *)(a1 + 240)) != 0
      && ((v5 = 0,
           (v4 = *(unsigned int (**)(uint64_t, _QWORD, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40)) == 0)
       || v4(v3, 0, &v5)
       || (v5 & 4) != 0))
    {
      dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 560), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
      *(_BYTE *)(a1 + 544) = 0;
    }
    v2 = (void *)voucher_adopt();
    os_release(v2);
  }
}

uint64_t EnsureStreamingAssetPropertyLoaderCreated(dispatch_queue_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t HTTPRequestOptions;
  uint64_t AllocatorForMedia;
  CFTypeRef v8;
  CFTypeRef cf;

  v8 = 0;
  cf = 0;
  if (*(_QWORD *)(a2 + 504))
  {
    v2 = 0;
    goto LABEL_13;
  }
  HTTPRequestOptions = EnsureStorageSessionCreated(a1, a2);
  if ((_DWORD)HTTPRequestOptions)
    goto LABEL_12;
  HTTPRequestOptions = CreateHTTPRequestOptions(a2, (CFMutableDictionaryRef *)&cf);
  if ((_DWORD)HTTPRequestOptions)
    goto LABEL_12;
  if (*(_QWORD *)(a2 + 16) != -1)
    dispatch_once_f((dispatch_once_t *)(a2 + 16), (void *)a2, (dispatch_function_t)CreateCustomURLLoaderOnceFunc);
  v2 = *(unsigned int *)(a2 + 496);
  if (!(_DWORD)v2)
  {
    HTTPRequestOptions = FigCFHTTPCreateCommonHTTPHeadersFromAssetCreationOptions((const __CFAllocator *)*MEMORY[0x1E0C9AE00], *(_QWORD *)(a2 + 88), *(_QWORD *)(a2 + 336), (__CFDictionary **)&v8);
    if (!(_DWORD)HTTPRequestOptions)
    {
      HTTPRequestOptions = InternalURLAssetEnsureContentKeyBoss((_QWORD *)a2);
      if (!(_DWORD)HTTPRequestOptions)
      {
        HTTPRequestOptions = EnsureStreamingNetworkURL(a1, a2);
        if (!(_DWORD)HTTPRequestOptions)
        {
          AllocatorForMedia = FigGetAllocatorForMedia();
          HTTPRequestOptions = FigStreamingAssetPropertyLoaderCreate(AllocatorForMedia, *(const void **)(a2 + 432), *(const void **)(a2 + 528), cf, v8, *(const void **)(a2 + 488), *(const void **)(a2 + 520), *(const void **)(a2 + 408), (_QWORD *)(a2 + 504));
        }
      }
    }
LABEL_12:
    v2 = HTTPRequestOptions;
  }
LABEL_13:
  if (cf)
    CFRelease(cf);
  if (v8)
    CFRelease(v8);
  return v2;
}

uint64_t ProduceTimeRangeAssetTrackProperty(uint64_t a1, CFDictionaryRef *a2)
{
  CMTimeEpoch v3;
  uint64_t TrackDuration;
  const __CFAllocator *v5;
  __int128 v7;
  CMTimeRange start;
  CMTime duration;
  CMTimeRange v10;
  CMTime v11;

  v7 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&v11.value = *MEMORY[0x1E0CA2E68];
  v3 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v11.epoch = v3;
  TrackDuration = FigGaplessInfoGetTrackDuration(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 64) == 0, &v11);
  if (!(_DWORD)TrackDuration)
  {
    memset(&v10, 0, sizeof(v10));
    *(_OWORD *)&start.start.value = v7;
    start.start.epoch = v3;
    duration = v11;
    CMTimeRangeMake(&v10, &start.start, &duration);
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    start = v10;
    *a2 = CMTimeRangeCopyAsDictionary(&start, v5);
  }
  return TrackDuration;
}

uint64_t ProduceMediaPresentationTimeRangeAssetTrackProperty(uint64_t a1, CFDictionaryRef *a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, CFTypeRef *);
  uint64_t v5;
  CFTypeRef v6;
  uint64_t (*v7)(CFTypeRef, CMTime *, CFTypeRef *, _QWORD, _QWORD);
  CFTypeRef v8;
  uint64_t (*v9)(CFTypeRef, CMTime *);
  CFTypeRef v10;
  uint64_t (*v11)(CFTypeRef, CMTime *, CFTypeRef *, _QWORD, _QWORD);
  CFTypeRef v12;
  uint64_t (*v13)(CFTypeRef, CMTime *);
  CFTypeRef v14;
  uint64_t (*v15)(CFTypeRef, CMTime *);
  uint64_t v16;
  CMTimeRange v18;
  CMTime rhs;
  CMTime lhs;
  CMTime v21;
  CMTime v22;
  CMTime v23;
  CFTypeRef v24;
  CFTypeRef v25;
  CFTypeRef v26;
  CMTime start;

  v25 = 0;
  v26 = 0;
  v24 = 0;
  memset(&v23, 0, sizeof(v23));
  memset(&v22, 0, sizeof(v22));
  memset(&v21, 0, sizeof(v21));
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v4)
    goto LABEL_16;
  v5 = v4(v3, &v26);
  if ((_DWORD)v5)
    goto LABEL_24;
  v6 = v26;
  v7 = *(uint64_t (**)(CFTypeRef, CMTime *, CFTypeRef *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 8);
  if (!v7)
  {
LABEL_16:
    v16 = 4294954514;
    goto LABEL_17;
  }
  start = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E28];
  v5 = v7(v6, &start, &v25, 0, 0);
  if ((_DWORD)v5)
  {
LABEL_24:
    v16 = v5;
    goto LABEL_17;
  }
  v8 = v25;
  v9 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v9)
    goto LABEL_16;
  v5 = v9(v8, &v23);
  if ((_DWORD)v5)
    goto LABEL_24;
  v10 = v26;
  v11 = *(uint64_t (**)(CFTypeRef, CMTime *, CFTypeRef *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 8);
  if (!v11)
    goto LABEL_16;
  start = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
  v5 = v11(v10, &start, &v24, 0, 0);
  if ((_DWORD)v5)
    goto LABEL_24;
  v12 = v24;
  v13 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v13)
    goto LABEL_16;
  v5 = v13(v12, &v22);
  if ((_DWORD)v5)
    goto LABEL_24;
  v14 = v24;
  v15 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (!v15)
    goto LABEL_16;
  v5 = v15(v14, &v21);
  if ((_DWORD)v5)
    goto LABEL_24;
  if ((v21.flags & 0x1D) == 1)
  {
    lhs = v22;
    rhs = v21;
    CMTimeAdd(&start, &lhs, &rhs);
    v22 = start;
  }
  start = v23;
  lhs = v22;
  CMTimeRangeFromTimeToTime(&v18, &start, &lhs);
  v16 = 0;
  *a2 = CMTimeRangeCopyAsDictionary(&v18, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
LABEL_17:
  if (v25)
    CFRelease(v25);
  if (v24)
    CFRelease(v24);
  if (v26)
    CFRelease(v26);
  return v16;
}

uint64_t ProduceMediaDecodeTimeRangeAssetTrackProperty(uint64_t a1, CFDictionaryRef *a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, CFTypeRef *);
  uint64_t v5;
  CFTypeRef v6;
  uint64_t (*v7)(CFTypeRef, CFTypeRef *);
  CFTypeRef v8;
  uint64_t (*v9)(CFTypeRef, CMTime *);
  CFTypeRef v10;
  uint64_t (*v11)(CFTypeRef, CFTypeRef *);
  CFTypeRef v12;
  uint64_t (*v13)(CFTypeRef, CMTime *);
  CFTypeRef v14;
  uint64_t (*v15)(CFTypeRef, CMTime *);
  uint64_t v16;
  CMTimeRange v18;
  CMTime rhs;
  CMTime lhs;
  CMTime start;
  CMTime v22;
  CMTime v23;
  CMTime v24;
  CFTypeRef v25;
  CFTypeRef v26;
  CFTypeRef v27;

  v26 = 0;
  v27 = 0;
  v25 = 0;
  memset(&v24, 0, sizeof(v24));
  memset(&v23, 0, sizeof(v23));
  memset(&v22, 0, sizeof(v22));
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v4)
    goto LABEL_16;
  v5 = v4(v3, &v27);
  if ((_DWORD)v5)
    goto LABEL_24;
  v6 = v27;
  v7 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v7)
  {
LABEL_16:
    v16 = 4294954514;
    goto LABEL_17;
  }
  v5 = v7(v6, &v26);
  if ((_DWORD)v5)
  {
LABEL_24:
    v16 = v5;
    goto LABEL_17;
  }
  v8 = v26;
  v9 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (!v9)
    goto LABEL_16;
  v5 = v9(v8, &v24);
  if ((_DWORD)v5)
    goto LABEL_24;
  v10 = v27;
  v11 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v11)
    goto LABEL_16;
  v5 = v11(v10, &v25);
  if ((_DWORD)v5)
    goto LABEL_24;
  v12 = v25;
  v13 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (!v13)
    goto LABEL_16;
  v5 = v13(v12, &v23);
  if ((_DWORD)v5)
    goto LABEL_24;
  v14 = v25;
  v15 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (!v15)
    goto LABEL_16;
  v5 = v15(v14, &v22);
  if ((_DWORD)v5)
    goto LABEL_24;
  if ((v22.flags & 0x1D) == 1)
  {
    lhs = v23;
    rhs = v22;
    CMTimeAdd(&start, &lhs, &rhs);
    v23 = start;
  }
  start = v24;
  lhs = v23;
  CMTimeRangeFromTimeToTime(&v18, &start, &lhs);
  v16 = 0;
  *a2 = CMTimeRangeCopyAsDictionary(&v18, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
LABEL_17:
  if (v26)
    CFRelease(v26);
  if (v25)
    CFRelease(v25);
  if (v27)
    CFRelease(v27);
  return v16;
}

uint64_t ProduceAssetTrackNonDroppableFrameRateProperty(uint64_t a1, CFNumberRef *a2)
{
  uint64_t v4;
  const __CFAllocator *v5;
  uint64_t FigBaseObject;
  void (*v7)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *);
  int v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, CFTypeRef *);
  uint64_t v11;
  CFTypeRef v12;
  uint64_t (*v13)(CFTypeRef, CFTypeRef *);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CFTypeRef v18;
  uint64_t (*v19)(CFTypeRef, _QWORD, _QWORD, _QWORD, unsigned __int8 *);
  int v20;
  CFTypeRef v21;
  uint64_t (*v22)(CFTypeRef, CMTime *);
  CFTypeRef v23;
  uint64_t (*v24)(CFTypeRef, uint64_t, uint64_t *);
  int32_t v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  CMTime v30;
  CMTime lhs;
  uint64_t v32;
  unsigned __int8 v33;
  CMTime cf;
  float valuePtr;
  CMTime v36;
  CFTypeRef v37;
  CFTypeRef v38;
  CMTime v39;

  v39 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v37 = 0;
  v38 = 0;
  memset(&v36, 0, sizeof(v36));
  CMTimeMake(&v36, 2, 1);
  valuePtr = 0.0;
  if (!a2)
    goto LABEL_34;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4 || !*(_QWORD *)(a1 + 24))
    goto LABEL_34;
  cf.value = 0;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  FigBaseObject = FigFormatReaderGetFigBaseObject(v4);
  v7 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
  if (v7)
    v7(FigBaseObject, CFSTR("Identifier"), v5, &cf);
  v8 = FigCFEqual();
  if (cf.value)
    CFRelease((CFTypeRef)cf.value);
  if (!v8)
  {
LABEL_34:
    v11 = FigSignalErrorAt();
    goto LABEL_35;
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v10)
    goto LABEL_28;
  v11 = v10(v9, &v38);
  if ((_DWORD)v11)
    goto LABEL_35;
  v12 = v38;
  v13 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v13)
  {
LABEL_28:
    v28 = 4294954514;
    goto LABEL_29;
  }
  v11 = v13(v12, &v37);
  if (!(_DWORD)v11)
  {
    v14 = 0;
    v15 = 1;
    while (1)
    {
      v16 = v14;
      v17 = v15;
      memset(&cf, 0, sizeof(cf));
      v33 = 0;
      v32 = 0;
      v18 = v37;
      v19 = *(uint64_t (**)(CFTypeRef, _QWORD, _QWORD, _QWORD, unsigned __int8 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 64);
      if (!v19)
        goto LABEL_28;
      v11 = v19(v18, 0, 0, 0, &v33);
      if ((_DWORD)v11)
        break;
      v20 = v33;
      if (v33)
        ++v14;
      v21 = v37;
      v22 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
      if (!v22)
        goto LABEL_28;
      v11 = v22(v21, &cf);
      if ((_DWORD)v11)
        break;
      lhs = v39;
      v30 = cf;
      CMTimeAdd(&v39, &lhs, &v30);
      v23 = v37;
      v24 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
      if (!v24)
        goto LABEL_28;
      v11 = v24(v23, 1, &v32);
      if ((_DWORD)v11)
        break;
      if (v32 == 1)
      {
        cf = v39;
        lhs = v36;
        v25 = CMTimeCompare(&cf, &lhs);
        v15 = v17 + 1;
        if (v25 < 0)
          continue;
      }
      if (v20)
        v26 = v16 + 1;
      else
        v26 = v16;
      cf = v39;
      v27 = (double)(v17 - v26) / CMTimeGetSeconds(&cf);
      valuePtr = v27;
      v28 = 0;
      *a2 = CFNumberCreate(v5, kCFNumberFloat32Type, &valuePtr);
      goto LABEL_29;
    }
  }
LABEL_35:
  v28 = v11;
LABEL_29:
  if (v38)
    CFRelease(v38);
  if (v37)
    CFRelease(v37);
  return v28;
}

uint64_t ProduceFormatSpecificMetadataAssetTrackProperty(uint64_t a1, __CFArray **a2)
{
  uint64_t FigBaseObject;
  void (*v4)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const __CFAllocator *v5;
  uint64_t v6;
  CFTypeRef cf;

  cf = 0;
  FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  v4 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (!v4)
    return 0;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v4(FigBaseObject, CFSTR("FormatSpecificMetadataReader"), *MEMORY[0x1E0C9AE00], &cf);
  if (!cf)
    return 0;
  v6 = FigMetadataCopyAllMetadataItems(v5, (uint64_t)cf, a2);
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t ProduceFormatSpecificMetadataFormatAssetTrackProperty(uint64_t a1, uint64_t a2)
{
  uint64_t FigBaseObject;
  void (*v4)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, const __CFString *, uint64_t, uint64_t);
  uint64_t v8;
  CFTypeRef cf;

  cf = 0;
  FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  v4 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (!v4)
    return 0;
  v5 = *MEMORY[0x1E0C9AE00];
  v4(FigBaseObject, CFSTR("FormatSpecificMetadataReader"), *MEMORY[0x1E0C9AE00], &cf);
  if (!cf)
    return 0;
  v6 = FigMetadataReaderGetFigBaseObject();
  v7 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (v7)
    v8 = v7(v6, CFSTR("format"), v5, a2);
  else
    v8 = 4294954514;
  if (cf)
    CFRelease(cf);
  return v8;
}

CFIndex ProduceAvailableMetadataFormatsAssetTrackProperty(uint64_t a1, __CFArray **a2)
{
  uint64_t FigBaseObject;
  uint64_t (*v4)(uint64_t, const __CFString *, _QWORD, CFArrayRef *);
  const __CFAllocator *v5;
  uint64_t v6;
  CFIndex Count;
  __CFArray *Mutable;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, const __CFString *, const __CFAllocator *, void **);
  void *value;
  CFArrayRef theArray;

  theArray = 0;
  FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  v4 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (v4)
  {
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v6 = v4(FigBaseObject, CFSTR("MetadataReaders"), *MEMORY[0x1E0C9AE00], &theArray);
    if ((_DWORD)v6)
    {
      Count = v6;
    }
    else
    {
      if (!theArray)
      {
        Mutable = 0;
        Count = 0;
        goto LABEL_18;
      }
      Count = CFArrayGetCount(theArray);
      if (Count)
      {
        Mutable = CFArrayCreateMutable(v5, 0, MEMORY[0x1E0C9B378]);
        if (Count >= 1)
        {
          for (i = 0; i != Count; ++i)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
            value = 0;
            v11 = FigMetadataReaderGetFigBaseObject(ValueAtIndex);
            v12 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
            if (v12 && !v12(v11, CFSTR("format"), v5, &value))
            {
              CFArrayAppendValue(Mutable, value);
              CFRelease(value);
            }
          }
        }
        Count = 0;
        if (CFArrayGetCount(Mutable) || !Mutable)
          goto LABEL_16;
        CFRelease(Mutable);
        Count = 0;
      }
    }
    Mutable = 0;
  }
  else
  {
    Mutable = 0;
    Count = 4294954514;
  }
LABEL_16:
  if (theArray)
    CFRelease(theArray);
LABEL_18:
  *a2 = Mutable;
  return Count;
}

uint64_t ProduceSegmentDataAssetTrackProperty(uint64_t a1, int a2, __CFData **a3)
{
  if (*(_BYTE *)(a1 + 65))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    *(_BYTE *)(a1 + 66) = 1;
  }
  return FigTrackReaderCreateSegmentData(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2, a3);
}

CFDictionaryRef ProduceGaplessSourceTimeRangeAssetTrackProperty(uint64_t a1, CFDictionaryRef *a2)
{
  __int128 v3;
  const __CFAllocator *v4;
  CFDictionaryRef result;
  CMTimeRange v6;
  CMTimeRange v7;

  v3 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  *(_OWORD *)&v7.start.value = *MEMORY[0x1E0CA2E40];
  *(_OWORD *)&v7.start.epoch = v3;
  *(_OWORD *)&v7.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
  FigGaplessInfoGetTrackGaplessSourceTimeRange(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), &v7);
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v6 = v7;
  result = CMTimeRangeCopyAsDictionary(&v6, v4);
  *a2 = result;
  return result;
}

uint64_t ProduceTrackReferencesTrackProperty(uint64_t a1, _QWORD *a2)
{
  uint64_t FigBaseObject;
  uint64_t (*v5)(uint64_t, const __CFString *, _QWORD, CFDictionaryRef *);
  const __CFAllocator *v6;
  uint64_t v7;
  CFDictionaryRef v8;
  BOOL v9;
  uint64_t v10;
  void (*v11)(uint64_t, int *, _QWORD);
  uint64_t v12;
  int valuePtr;
  CFNumberRef context;
  uint64_t v16;
  CFDictionaryRef theDict;

  v16 = 0;
  theDict = 0;
  context = 0;
  FigBaseObject = FigFormatReaderGetFigBaseObject(*(_QWORD *)(a1 + 16));
  v5 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
  if (!v5)
  {
    v12 = 0;
    v7 = 4294954514;
    goto LABEL_13;
  }
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v7 = v5(FigBaseObject, CFSTR("TrackReferenceDictionary"), *MEMORY[0x1E0C9AE00], &theDict);
  v8 = theDict;
  if ((_DWORD)v7)
    v9 = 1;
  else
    v9 = theDict == 0;
  if (v9)
  {
    v12 = 0;
    if (!theDict)
      goto LABEL_13;
LABEL_12:
    CFRelease(v8);
    goto LABEL_13;
  }
  valuePtr = 0;
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(void (**)(uint64_t, int *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v11)
    v11(v10, &valuePtr, 0);
  context = CFNumberCreate(v6, kCFNumberSInt32Type, &valuePtr);
  CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)SpecificTrackReferenceApplierFunction, &context);
  CFRelease(context);
  v12 = v16;
  v8 = theDict;
  if (theDict)
    goto LABEL_12;
LABEL_13:
  *a2 = v12;
  return v7;
}

uint64_t ProduceLoudnessInfoTrackProperty(uint64_t a1, CFDictionaryRef *a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t, _QWORD, int *);
  uint64_t v6;
  uint64_t v7;
  uint64_t FigBaseObject;
  void (*v9)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *);
  uint64_t v10;
  void (*v11)(uint64_t, const __CFString *, uint64_t, void **);
  uint64_t v12;
  void (*v13)(uint64_t, const __CFString *, uint64_t, CFNumberRef *);
  uint64_t v14;
  uint64_t MutableCopy;
  __CFDictionary *v16;
  __CFString **v17;
  CFNumberRef number;
  void *value;
  CFDictionaryRef theDict;
  int v22;
  int valuePtr;

  v22 = 0;
  value = 0;
  theDict = 0;
  number = 0;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(uint64_t (**)(uint64_t, _QWORD, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v5)
  {
    v14 = 4294954514;
    goto LABEL_34;
  }
  v6 = v5(v4, 0, &v22);
  if ((_DWORD)v6)
    goto LABEL_42;
  if (v22 != 1936684398)
  {
    v14 = 0;
    *a2 = 0;
    goto LABEL_34;
  }
  v7 = *MEMORY[0x1E0C9AE00];
  FigBaseObject = FigTrackReaderGetFigBaseObject(*(_QWORD *)(a1 + 24));
  v9 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
  if (v9)
    v9(FigBaseObject, CFSTR("LoudnessInfo"), v7, &theDict);
  if (!theDict || !CFDictionaryGetValue(theDict, CFSTR("sound check info")))
  {
    v10 = FigFormatReaderGetFigBaseObject(*(_QWORD *)(a1 + 16));
    v11 = *(void (**)(uint64_t, const __CFString *, uint64_t, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
    if (v11)
      v11(v10, CFSTR("SoundCheckInfo"), v7, &value);
  }
  v12 = FigFormatReaderGetFigBaseObject(*(_QWORD *)(a1 + 16));
  v13 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (v13)
    v13(v12, CFSTR("iTunesStoreItemKind"), v7, &number);
  if (FigCFDictionaryGetCount() <= 0 && !number)
  {
    v14 = 0;
    *a2 = theDict;
    theDict = 0;
    goto LABEL_34;
  }
  MutableCopy = FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
  {
    v6 = FigSignalErrorAt();
LABEL_42:
    v14 = v6;
    goto LABEL_34;
  }
  v16 = (__CFDictionary *)MutableCopy;
  if (FigCFDictionaryGetCount() >= 1)
    CFDictionarySetValue(v16, CFSTR("sound check info"), value);
  if (number)
  {
    valuePtr = 0;
    CFNumberGetValue(number, kCFNumberIntType, &valuePtr);
    v17 = kFigMediaKind_MusicValue;
    switch(valuePtr)
    {
      case 1:
        goto LABEL_31;
      case 2:
        v17 = kFigMediaKind_AudiobookValue;
        goto LABEL_31;
      case 3:
      case 4:
      case 5:
      case 7:
        break;
      case 6:
        v17 = kFigMediaKind_MusicVideoValue;
        goto LABEL_31;
      case 8:
        v17 = kFigMediaKind_PodcastValue;
        goto LABEL_31;
      case 9:
        v17 = kFigMediaKind_MovieValue;
LABEL_31:
        if (*v17)
          CFDictionarySetValue(v16, CFSTR("media kind"), *v17);
        break;
      default:
        switch(kFigMediaKind_MusicValue)
        {
          case 0x18u:
            v17 = kFigMediaKind_iTunesUValue;
            goto LABEL_31;
          case 0x1Du:
            v17 = kFigMediaKind_TVShowValue;
            goto LABEL_31;
          case 0x1Eu:
            v17 = kFigMediaKind_AudioAdValue;
            goto LABEL_31;
          case 0x1Fu:
            v17 = &kFigMediaKind_VideoAdValue;
            goto LABEL_31;
          default:
            goto LABEL_33;
        }
    }
  }
LABEL_33:
  v14 = 0;
  *a2 = v16;
LABEL_34:
  if (value)
    CFRelease(value);
  if (number)
    CFRelease(number);
  if (theDict)
    CFRelease(theDict);
  return v14;
}

uint64_t ProduceProtectedStatusTrackProperty(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v4;
  uint64_t FigBaseObject;
  uint64_t (*v6)(uint64_t, const __CFString *, uint64_t, CFArrayRef *);
  CFTypeRef *v7;
  uint64_t v8;
  BOOL v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex v12;
  BOOL v13;
  const opaqueCMFormatDescription *ValueAtIndex;
  FourCharCode MediaSubType;
  int v16;
  uint64_t v17;
  unsigned int (*v18)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  BOOL v19;
  CFTypeRef *v20;
  CFTypeRef v22;
  CFArrayRef theArray;

  theArray = 0;
  v4 = *MEMORY[0x1E0C9AE00];
  FigBaseObject = FigTrackReaderGetFigBaseObject(*(_QWORD *)(a1 + 24));
  v6 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  v7 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  if (!v6)
  {
    v8 = 4294954514;
    goto LABEL_17;
  }
  v8 = v6(FigBaseObject, CFSTR("TrackFormatDescriptionArray"), v4, &theArray);
  if ((_DWORD)v8)
    v9 = 1;
  else
    v9 = theArray == 0;
  if (v9)
    goto LABEL_17;
  Count = CFArrayGetCount(theArray);
  if (Count < 1)
  {
    v8 = 0;
LABEL_17:
    v22 = 0;
    v17 = FigTrackReaderGetFigBaseObject(*(_QWORD *)(a1 + 24));
    v18 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
    if (v18)
    {
      if (v18(v17, CFSTR("IndicatesContentProtection"), v4, &v22))
        v19 = 0;
      else
        v19 = v22 == *v7;
      v16 = v19;
    }
    else
    {
      v16 = 0;
    }
    goto LABEL_25;
  }
  v11 = Count;
  v12 = 0;
  v13 = 1;
  while (1)
  {
    ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(theArray, v12);
    if (FigCPEIsSupportedFormatDescription((uint64_t)ValueAtIndex))
    {
      v8 = 0;
      v16 = 1;
      goto LABEL_25;
    }
    MediaSubType = CMFormatDescriptionGetMediaSubType(ValueAtIndex);
    if (FigCodecTypeIsProtected(MediaSubType))
      break;
    v13 = ++v12 < v11;
    if (v11 == v12)
    {
      v16 = 0;
      goto LABEL_16;
    }
  }
  v16 = 1;
LABEL_16:
  v8 = 0;
  if (!v13)
    goto LABEL_17;
LABEL_25:
  if (theArray)
    CFRelease(theArray);
  v20 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
  if (v16)
    v20 = v7;
  *a2 = CFRetain(*v20);
  return v8;
}

CFTypeRef ProduceUsesAudibleDRMTrackProperty(uint64_t a1, _QWORD *a2)
{
  uint64_t FigBaseObject;
  uint64_t (*v4)(uint64_t, const __CFString *, _QWORD, const void **);
  int v5;
  CFTypeRef result;
  BOOL v7;
  const void *v8;

  v8 = 0;
  FigBaseObject = FigTrackReaderGetFigBaseObject(*(_QWORD *)(a1 + 24));
  v4 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, const void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (!v4
    || ((v5 = v4(FigBaseObject, CFSTR("UsesAudibleDRM"), *MEMORY[0x1E0C9AE00], &v8), result = v8, !v5)
      ? (v7 = v8 == 0)
      : (v7 = 1),
        v7))
  {
    result = CFRetain((CFTypeRef)*MEMORY[0x1E0C9AE40]);
  }
  *a2 = result;
  return result;
}

CFTypeRef ProduceAudibleContentIsAuthorizedTrackProperty(uint64_t a1, _QWORD *a2)
{
  uint64_t FigBaseObject;
  uint64_t (*v4)(uint64_t, const __CFString *, _QWORD, const void **);
  int v5;
  CFTypeRef result;
  BOOL v7;
  const void *v8;

  v8 = 0;
  FigBaseObject = FigTrackReaderGetFigBaseObject(*(_QWORD *)(a1 + 24));
  v4 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, const void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (!v4
    || ((v5 = v4(FigBaseObject, CFSTR("AudibleContentIsAuthorized"), *MEMORY[0x1E0C9AE00], &v8), result = v8, !v5)
      ? (v7 = v8 == 0)
      : (v7 = 1),
        v7))
  {
    result = CFRetain((CFTypeRef)*MEMORY[0x1E0C9AE40]);
  }
  *a2 = result;
  return result;
}

CFDictionaryRef ProduceMinSampleDurationTrackProperty(uint64_t a1, CFDictionaryRef *a2)
{
  const __CFAllocator *v3;
  uint64_t FigBaseObject;
  uint64_t (*v5)(uint64_t, const __CFString *, const __CFAllocator *, CFDictionaryRef *);
  CFDictionaryRef result;
  CMTime v7;

  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  FigBaseObject = FigTrackReaderGetFigBaseObject(*(_QWORD *)(a1 + 24));
  v5 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v5 || (result = (CFDictionaryRef)v5(FigBaseObject, CFSTR("MinSampleDuration"), v3, a2), (_DWORD)result) || !*a2)
  {
    v7 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    result = CMTimeCopyAsDictionary(&v7, v3);
    *a2 = result;
  }
  return result;
}

CFNumberRef ProduceAlternateGroupIDTrackPropertyByKey(uint64_t a1, uint64_t a2, CFNumberRef *a3)
{
  const __CFAllocator *v5;
  uint64_t FigBaseObject;
  uint64_t (*v7)(uint64_t, uint64_t, const __CFAllocator *, CFNumberRef *);
  CFNumberRef result;
  __int16 valuePtr;

  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  FigBaseObject = FigTrackReaderGetFigBaseObject(*(_QWORD *)(a1 + 24));
  v7 = *(uint64_t (**)(uint64_t, uint64_t, const __CFAllocator *, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
  if (!v7 || (result = (CFNumberRef)v7(FigBaseObject, a2, v5, a3), (_DWORD)result) || !*a3)
  {
    valuePtr = 0;
    result = CFNumberCreate(v5, kCFNumberSInt16Type, &valuePtr);
    *a3 = result;
  }
  return result;
}

CFNumberRef ProduceAssetTrackCameraRollValidationProperty(uint64_t a1, CFNumberRef *a2)
{
  CFNumberRef result;
  int valuePtr;

  valuePtr = ProduceAssetTrackValidationResult(a1, CFSTR("validationCriteria_CameraRoll"), 0);
  result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  *a2 = result;
  return result;
}

CFNumberRef ProduceAssetTrack_MediaPlaybackValidationProperty(uint64_t a1, CFNumberRef *a2)
{
  CFNumberRef result;
  int valuePtr;

  valuePtr = ProduceAssetTrackValidationResult(a1, CFSTR("validationCriteria_MediaPlayback"), 0);
  result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  *a2 = result;
  return result;
}

CFNumberRef ProduceAssetTrack_MediaDecodingValidationProperty(uint64_t a1, CFNumberRef *a2)
{
  CFNumberRef result;
  int valuePtr;

  valuePtr = ProduceAssetTrackValidationResult(a1, CFSTR("validationCriteria_MediaDecoding"), 0);
  result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  *a2 = result;
  return result;
}

uint64_t ProduceAssetTrack_ContainsWideColor(uint64_t a1, CFTypeRef *a2)
{
  const void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD, int *);
  uint64_t v7;
  uint64_t FigBaseObject;
  uint64_t (*v9)(uint64_t, const __CFString *, _QWORD, CFArrayRef *);
  CFIndex Count;
  CFIndex v11;
  CFIndex v12;
  uint64_t v13;
  int v15;
  CFArrayRef theArray;

  v4 = (const void *)*MEMORY[0x1E0C9AE40];
  theArray = 0;
  v15 = 0;
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(uint64_t (**)(uint64_t, _QWORD, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v6)
    goto LABEL_12;
  v7 = v6(v5, 0, &v15);
  if (!(_DWORD)v7)
  {
    if (v15 != 1986618469)
    {
LABEL_11:
      v13 = 0;
      goto LABEL_13;
    }
    FigBaseObject = FigTrackReaderGetFigBaseObject(*(_QWORD *)(a1 + 24));
    v9 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
    if (v9)
    {
      v7 = v9(FigBaseObject, CFSTR("TrackFormatDescriptionArray"), *MEMORY[0x1E0C9AE00], &theArray);
      if (!(_DWORD)v7)
      {
        if (!theArray)
        {
          v13 = 0;
          goto LABEL_16;
        }
        Count = CFArrayGetCount(theArray);
        if (Count >= 1)
        {
          v11 = Count;
          v12 = 0;
          while (1)
          {
            CFArrayGetValueAtIndex(theArray, v12);
            if (FigVideoFormatDescriptionContainsWideColor())
              break;
            if (v11 == ++v12)
              goto LABEL_11;
          }
          v13 = 0;
          v4 = (const void *)*MEMORY[0x1E0C9AE50];
          goto LABEL_13;
        }
        goto LABEL_11;
      }
      goto LABEL_18;
    }
LABEL_12:
    v13 = 4294954514;
    goto LABEL_13;
  }
LABEL_18:
  v13 = v7;
LABEL_13:
  if (theArray)
    CFRelease(theArray);
LABEL_16:
  *a2 = CFRetain(v4);
  return v13;
}

uint64_t ProduceAssetTrackLatentBaseDecodeTimeStampOfFirstTrackFragment(uint64_t a1, _QWORD *a2)
{
  uint64_t FigBaseObject;
  uint64_t (*v4)(uint64_t, const __CFString *, _QWORD, _QWORD);
  uint64_t result;
  uint64_t (*v6)(uint64_t, const __CFString *, _QWORD, _QWORD);

  v6 = 0;
  FigBaseObject = FigTrackReaderGetFigBaseObject(*(_QWORD *)(a1 + 24));
  v4 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
  if (v4)
  {
    result = v4(FigBaseObject, CFSTR("LatentBaseDecodeTimeStampOfFirstTrackFragment"), *MEMORY[0x1E0C9AE00], &v6);
    v4 = v6;
  }
  else
  {
    result = 4294954514;
  }
  *a2 = v4;
  return result;
}

void SpecificTrackReferenceApplierFunction(const void *a1, CFArrayRef theArray, uint64_t a3)
{
  int64_t v6;
  __CFArray *Mutable;
  CFIndex v8;
  const __CFAllocator *v9;
  const CFArrayCallBacks *v10;
  const void *ValueAtIndex;
  const void *v12;
  __CFDictionary *v13;

  v6 = CFArrayGetCount(theArray) & 0xFFFFFFFFFFFFFFFELL;
  if (v6 >= 1)
  {
    Mutable = 0;
    v8 = 0;
    v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v10 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v8);
      if (CFEqual(*(CFTypeRef *)a3, ValueAtIndex))
      {
        if (!Mutable)
          Mutable = CFArrayCreateMutable(v9, 0, v10);
        v12 = CFArrayGetValueAtIndex(theArray, v8 + 1);
        CFArrayAppendValue(Mutable, v12);
      }
      v8 += 2;
    }
    while (v8 < v6);
    if (Mutable)
    {
      v13 = *(__CFDictionary **)(a3 + 8);
      if (!v13)
      {
        v13 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        *(_QWORD *)(a3 + 8) = v13;
      }
      CFDictionaryAddValue(v13, a1, Mutable);
      CFRelease(Mutable);
    }
  }
}

uint64_t FigCodecTypeIsProtected(int a1)
{
  uint64_t result;
  unsigned __int16 v3;
  unsigned __int16 v4;
  unsigned __int16 v5;
  int v6;
  unsigned __int16 v7;
  unsigned int v8;

  result = 1;
  if (a1 <= 1902207794)
  {
    if (a1 <= 1685220712)
    {
      if (a1 <= 1667524656)
      {
        if (a1 <= 1667326823)
        {
          if (a1 == 1633771875 || a1 == 1667312947)
            return result;
          v4 = 24931;
        }
        else if (a1 > 1667330146)
        {
          if (a1 == 1667330147)
            return result;
          v4 = 30307;
        }
        else
        {
          if (a1 == 1667326824)
            return result;
          v4 = 25456;
        }
        v6 = v4 | 0x63610000;
        goto LABEL_81;
      }
      if (a1 <= 1667656802)
      {
        if (a1 != 1667524657 && a1 != 1667574579)
        {
          v6 = 1667575091;
          goto LABEL_81;
        }
        return result;
      }
      if (a1 > 1668047202)
      {
        if (a1 == 1668047203)
          return result;
        v6 = 1668641633;
      }
      else
      {
        if (a1 == 1667656803)
          return result;
        v6 = 1667790435;
      }
LABEL_81:
      if (a1 == v6)
        return result;
      return 0;
    }
    if (a1 <= 1885430578)
    {
      if (a1 <= 1701733237)
      {
        if (a1 != 1685220713 && a1 != 1700886115)
        {
          v6 = 1701733217;
          goto LABEL_81;
        }
        return result;
      }
      if (a1 > 1882599479)
      {
        if (a1 == 1882599480)
          return result;
        v6 = 1885430115;
      }
      else
      {
        if (a1 == 1701733238)
          return result;
        v6 = 1869117027;
      }
      goto LABEL_81;
    }
    if (a1 <= 1885547314)
    {
      v8 = a1 - 1885430579;
      if (v8 > 0x3D || ((1 << v8) & 0x2020000000000001) == 0)
        return 0;
      return result;
    }
    if (a1 <= 1886745440)
    {
      if (a1 == 1885547315)
        return result;
      v6 = 1885692723;
      goto LABEL_81;
    }
    if (a1 == 1886745441)
      return result;
    v5 = 24931;
LABEL_78:
    v6 = v5 | 0x71610000;
    goto LABEL_81;
  }
  if (a1 <= 1902667125)
  {
    if (a1 > 1902324530)
    {
      if (a1 <= 1902405732)
      {
        if (a1 == 1902324531 || a1 == 1902403958)
          return result;
        v7 = 26673;
      }
      else
      {
        if (a1 > 1902469938)
        {
          if (a1 == 1902469939)
            return result;
          v6 = 1902537827;
          goto LABEL_81;
        }
        if (a1 == 1902405733)
          return result;
        v7 = 28024;
      }
      v6 = v7 | 0x71640000;
      goto LABEL_81;
    }
    if ((a1 - 1902207795) <= 0x3D && ((1 << (a1 - 51)) & 0x2020000000000001) != 0
      || (a1 - 1902212657) <= 0x34 && ((1 << (a1 - 49)) & 0x14000000000001) != 0)
    {
      return result;
    }
    v5 = 28771;
    goto LABEL_78;
  }
  if (a1 <= 2053202738)
  {
    if (a1 <= 1902998903)
    {
      if (a1 != 1902667126 && a1 != 1902671459)
      {
        v6 = 1902928227;
        goto LABEL_81;
      }
      return result;
    }
    if (a1 > 1903587384)
    {
      if (a1 == 1903587385)
        return result;
      v3 = 24931;
      goto LABEL_71;
    }
    if (a1 == 1902998904)
      return result;
    v6 = 1903522657;
    goto LABEL_81;
  }
  if (a1 > 2053319474)
  {
    if (a1 > 2053923170)
    {
      if (a1 == 2053923171)
        return result;
      v6 = 2054517601;
    }
    else
    {
      if (a1 == 2053319475)
        return result;
      v6 = 2053464883;
    }
    goto LABEL_81;
  }
  if ((a1 - 2053202739) > 0x3D || ((1 << (a1 - 51)) & 0x2020000000000001) == 0)
  {
    v3 = 30307;
LABEL_71:
    v6 = v3 | 0x7A610000;
    goto LABEL_81;
  }
  return result;
}

void BuildPropertyDependencyDictionary()
{
  const __CFAllocator *v0;
  const CFArrayCallBacks *v1;
  CFArrayRef v2;
  CFArrayRef v3;
  CFArrayRef v4;
  CFArrayRef v5;
  CFArrayRef v6;
  CFArrayRef v7;
  CFArrayRef v8;
  CFArrayRef v9;
  CFArrayRef v10;
  CFArrayRef v11;
  CFArrayRef v12;
  CFArrayRef v13;
  CFArrayRef v14;
  CFArrayRef v15;
  CFArrayRef v16;
  CFArrayRef v17;
  CFArrayRef v18;
  CFArrayRef v19;
  CFArrayRef v20;
  CFArrayRef v21;
  CFArrayRef v22;
  CFArrayRef v23;
  CFArrayRef v24;
  CFArrayRef v25;
  CFArrayRef v26;
  CFArrayRef v27;
  CFArrayRef v28;
  CFArrayRef v29;
  CFArrayRef v30;
  CFArrayRef v31;
  CFArrayRef v32;
  CFArrayRef v33;
  CFArrayRef v34;
  CFArrayRef v35;
  CFArrayRef v36;
  CFArrayRef v37;
  CFArrayRef v38;
  CFArrayRef v39;
  CFArrayRef v40;
  CFArrayRef v41;
  CFArrayRef v42;
  CFArrayRef v43;
  CFArrayRef v44;
  CFArrayRef v45;
  CFArrayRef v46;
  CFArrayRef v47;
  CFArrayRef v48;
  CFArrayRef v49;
  CFArrayRef v50;
  CFArrayRef v51;
  CFArrayRef v52;
  CFArrayRef v53;
  CFArrayRef v54;
  CFArrayRef v55;
  CFArrayRef v56;
  CFArrayRef v57;
  CFArrayRef v58;
  CFArrayRef v59;
  CFArrayRef v60;
  CFArrayRef v61;
  CFArrayRef v62;
  CFArrayRef v63;
  void *values;
  const __CFString *v65;
  const __CFString *v66;
  const __CFString *v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  sAssetPropertyDependencies = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  values = CFSTR("PreferredRate");
  v1 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  v2 = CFArrayCreate(v0, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetPropertyDependencies, CFSTR("PreferredRate"), v2);
  CFRelease(v2);
  values = CFSTR("PreferredVolume");
  v3 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetPropertyDependencies, CFSTR("PreferredVolume"), v3);
  CFRelease(v3);
  values = CFSTR("MovieMatrix");
  v4 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetPropertyDependencies, CFSTR("PreferredTransform"), v4);
  CFRelease(v4);
  values = CFSTR("TrackReferenceDictionary");
  v5 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetPropertyDependencies, CFSTR("assetProperty_TrackReferences"), v5);
  CFRelease(v5);
  values = CFSTR("AlternateGroupArray");
  v6 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetPropertyDependencies, CFSTR("assetProperty_AlternateTrackGroups"), v6);
  CFRelease(v6);
  values = CFSTR("MetadataReaders");
  v65 = CFSTR("AlternateGroupArray");
  v7 = CFArrayCreate(v0, (const void **)&values, 2, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetPropertyDependencies, CFSTR("assetProperty_AvailableMetadataFormats"), v7);
  CFRelease(v7);
  values = CFSTR("QuickTimeMetadataReader");
  v65 = CFSTR("iTunesMetadataReader");
  v66 = CFSTR("QuickTimeUserDataReader");
  v67 = CFSTR("ISOUserDataReader");
  v8 = CFArrayCreate(v0, (const void **)&values, 4, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetPropertyDependencies, CFSTR("assetProperty_CommonMetadata"), v8);
  CFRelease(v8);
  values = CFSTR("QuickTimeUserDataReader");
  v9 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetPropertyDependencies, CFSTR("assetProperty_QuickTimeUserData"), v9);
  CFRelease(v9);
  values = CFSTR("iTunesMetadataReader");
  v10 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetPropertyDependencies, CFSTR("assetProperty_iTunesMetadata"), v10);
  CFRelease(v10);
  values = CFSTR("QuickTimeMetadataReader");
  v11 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetPropertyDependencies, CFSTR("assetProperty_QuickTimeMetadata"), v11);
  CFRelease(v11);
  values = CFSTR("ISOUserDataReader");
  v12 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetPropertyDependencies, CFSTR("assetProperty_ISOUserData"), v12);
  CFRelease(v12);
  values = CFSTR("FormatSpecificMetadataReader");
  v13 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetPropertyDependencies, CFSTR("assetProperty_FormatSpecificMetadata"), v13);
  CFRelease(v13);
  values = CFSTR("FormatDescriptionsChanged");
  v14 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetPropertyDependencies, CFSTR("assetProperty_ProtectedStatus"), v14);
  CFRelease(v14);
  values = CFSTR("AlternateGroupArray");
  v65 = CFSTR("TrackReferenceDictionary");
  v15 = CFArrayCreate(v0, (const void **)&values, 2, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetPropertyDependencies, CFSTR("MediaSelectionArray"), v15);
  CFRelease(v15);
  values = CFSTR("FormatDescriptionsChanged");
  v65 = CFSTR("EnabledTracksChanged");
  v16 = CFArrayCreate(v0, (const void **)&values, 2, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetPropertyDependencies, CFSTR("assetProperty_MediaPlaybackValidation"), v16);
  CFRelease(v16);
  values = CFSTR("FormatDescriptionsChanged");
  v65 = CFSTR("EnabledTracksChanged");
  v17 = CFArrayCreate(v0, (const void **)&values, 2, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetPropertyDependencies, CFSTR("assetProperty_CameraRollValidation"), v17);
  CFRelease(v17);
  values = CFSTR("ContainsChapters");
  v18 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetPropertyDependencies, CFSTR("assetProperty_ChapterGroupInfo"), v18);
  CFRelease(v18);
  values = CFSTR("FragmentCount");
  v19 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetPropertyDependencies, CFSTR("assetProperty_FragmentCount"), v19);
  CFRelease(v19);
  sAssetTrackPropertyDependencies = (uint64_t)CFDictionaryCreateMutable(v0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  values = CFSTR("TrackFormatDescriptionArray");
  v20 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("FormatDescriptionArray"), v20);
  CFRelease(v20);
  values = CFSTR("TrackEnabled");
  v21 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("IsEnabled"), v21);
  CFRelease(v21);
  values = CFSTR("TrackIsSelfContained");
  v22 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("IsSelfContained"), v22);
  CFRelease(v22);
  values = CFSTR("UneditedNumDataBytes");
  v23 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("TotalSampleDataLength"), v23);
  CFRelease(v23);
  values = CFSTR("UneditedTrackDuration");
  v65 = CFSTR("EditCursorService");
  v24 = CFArrayCreate(v0, (const void **)&values, 2, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("TimeRange"), v24);
  CFRelease(v24);
  values = CFSTR("UneditedSampleCount");
  v25 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("MediaPresentationTimeRange"), v25);
  CFRelease(v25);
  values = CFSTR("UneditedSampleCount");
  v26 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("MediaDecodeTimeRange"), v26);
  CFRelease(v26);
  values = CFSTR("EstimatedDataRate");
  v27 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("EstimatedDataRate"), v27);
  CFRelease(v27);
  values = CFSTR("PeakDataRate");
  v28 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("PeakDataRate"), v28);
  CFRelease(v28);
  values = CFSTR("UneditedSampleCount");
  v29 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("UneditedSampleCount"), v29);
  CFRelease(v29);
  values = CFSTR("HasRollInformation");
  v30 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("HasRollInformation"), v30);
  CFRelease(v30);
  values = CFSTR("TrackLanguageCode");
  v31 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("LanguageCode"), v31);
  CFRelease(v31);
  values = CFSTR("QuickTimeUserDataReader");
  v65 = CFSTR("ISOUserDataReader");
  v66 = CFSTR("TrackExcludeFromAutoSelection");
  v32 = CFArrayCreate(v0, (const void **)&values, 3, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("MediaCharacteristicArray"), v32);
  CFRelease(v32);
  values = CFSTR("ExtendedLanguageTagString");
  v33 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("ExtendedLanguageTag"), v33);
  CFRelease(v33);
  values = CFSTR("CleanApertureDimensions");
  v65 = CFSTR("TrackDimensions");
  v34 = CFArrayCreate(v0, (const void **)&values, 2, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("NaturalSize"), v34);
  CFRelease(v34);
  values = CFSTR("TrackDimensions");
  v35 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("TrackDimensions"), v35);
  CFRelease(v35);
  values = CFSTR("CleanApertureDimensions");
  v36 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("CleanApertureDimensions"), v36);
  CFRelease(v36);
  values = CFSTR("ProductionApertureDimensions");
  v37 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("ProductionApertureDimensions"), v37);
  CFRelease(v37);
  values = CFSTR("EncodedPixelsDimensions");
  v38 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("EncodedPixelsDimensions"), v38);
  CFRelease(v38);
  values = CFSTR("TrackMatrix");
  v39 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("PreferredTransform"), v39);
  CFRelease(v39);
  values = CFSTR("NominalFrameRate");
  v40 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("NominalFrameRate"), v40);
  CFRelease(v40);
  values = CFSTR("QuickTimeMetadataReader");
  v41 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("assetTrackProperty_QuickTimeMetadata"), v41);
  CFRelease(v41);
  values = CFSTR("QuickTimeUserDataReader");
  v42 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("assetTrackProperty_QuickTimeUserData"), v42);
  CFRelease(v42);
  values = CFSTR("ISOUserDataReader");
  v43 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("assetTrackProperty_ISOUserData"), v43);
  CFRelease(v43);
  values = CFSTR("QuickTimeMetadataReader");
  v65 = CFSTR("QuickTimeUserDataReader");
  v66 = CFSTR("ISOUserDataReader");
  v67 = CFSTR("FormatSpecificMetadataReader");
  v44 = CFArrayCreate(v0, (const void **)&values, 4, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("CommonMetadata"), v44);
  CFRelease(v44);
  values = CFSTR("FormatSpecificMetadataReader");
  v45 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("assetTrackProperty_FormatSpecificMetadata"), v45);
  CFRelease(v45);
  values = CFSTR("FormatSpecificMetadataReader");
  v46 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("assetTrackProperty_FormatSpecificMetadataFormat"), v46);
  CFRelease(v46);
  values = CFSTR("MetadataReaders");
  v47 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("AvailableMetadataFormats"), v47);
  CFRelease(v47);
  values = CFSTR("TrackExcludeFromAutoSelection");
  v48 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("IsExcludedFromAutoselection"), v48);
  CFRelease(v48);
  values = CFSTR("Volume");
  v49 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("Volume"), v49);
  CFRelease(v49);
  values = CFSTR("TrackLayer");
  v50 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("Layer"), v50);
  CFRelease(v50);
  values = CFSTR("TrackReferencesChanged");
  v51 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("assetTrackProperty_TrackReferences"), v51);
  CFRelease(v51);
  values = CFSTR("TrackFormatDescriptionArray");
  v52 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("assetTrackProperty_ProtectedStatus"), v52);
  CFRelease(v52);
  values = CFSTR("MinSampleDuration");
  v53 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("MinSampleDuration"), v53);
  CFRelease(v53);
  values = CFSTR("AlternateGroupID");
  v54 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("AlternateGroupID"), v54);
  CFRelease(v54);
  values = CFSTR("DefaultAlternateGroupID");
  v55 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("DefaultAlternateGroupID"), v55);
  CFRelease(v55);
  values = CFSTR("ProvisionalAlternateGroupID");
  v56 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("ProvisionalAlternateGroupID"), v56);
  CFRelease(v56);
  values = CFSTR("TrackQTLoadSettings");
  v57 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("LoadSettings"), v57);
  CFRelease(v57);
  values = CFSTR("SampleGroupDescriptions");
  v58 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("SampleGroupDescriptions"), v58);
  CFRelease(v58);
  values = CFSTR("HEVCTemporalLevelInfoCombinations");
  v59 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("HEVCTemporalLevelInfoCombinations"), v59);
  CFRelease(v59);
  values = CFSTR("HEVCSyncSampleNALUnitTypes");
  v60 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("HEVCSyncSampleNALUnitTypes"), v60);
  CFRelease(v60);
  values = CFSTR("TrackFormatDescriptionArray");
  v61 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("assetTrackProperty_CameraRollValidation"), v61);
  CFRelease(v61);
  values = CFSTR("TrackFormatDescriptionArray");
  v62 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("assetTrackProperty_MediaPlaybackValidation"), v62);
  CFRelease(v62);
  values = CFSTR("TrackFormatDescriptionArray");
  v63 = CFArrayCreate(v0, (const void **)&values, 1, v1);
  CFDictionarySetValue((CFMutableDictionaryRef)sAssetTrackPropertyDependencies, CFSTR("assetTrackProperty_MediaDecodingValidation"), v63);
  CFRelease(v63);
}

void ReviseSegmentDataAssetTrackProperties(uint64_t *a1)
{
  uint64_t v2;
  dispatch_queue_t *v3;
  CFTypeRef cf;

  v2 = MEMORY[0x19402D578](a1 + 5);
  if (v2)
  {
    v3 = (dispatch_queue_t *)v2;
    cf = 0;
    if (!FigTrackReaderCreateSegmentData(a1[2], a1[3], 0, (__CFData **)&cf))
    {
      ReviseProperty(v3, CFSTR("assetTrackProperty_EditSegmentData"), cf);
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
    }
    if (!FigTrackReaderCreateSegmentData(a1[2], a1[3], 1, (__CFData **)&cf))
    {
      ReviseProperty(v3, CFSTR("assetTrackProperty_PresentationSegmentData"), cf);
      if (cf)
        CFRelease(cf);
    }
    CFRelease(v3);
  }
  CFRelease(a1);
}

void AssessMonitoredAssetTrackPropertyChange(const void *a1, CFArrayRef theArray, uint64_t a3)
{
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  const void *ValueAtIndex;
  dispatch_queue_t *v10;

  Count = CFArrayGetCount(theArray);
  if (Count >= 1)
  {
    v7 = Count;
    v8 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v8);
      if (CFDictionaryContainsKey(*(CFDictionaryRef *)a3, ValueAtIndex))
        break;
      if (v7 == ++v8)
        return;
    }
    v10 = *(dispatch_queue_t **)(a3 + 16);
    if (!ProduceAssetTrackProperty(*(_QWORD *)(a3 + 8), a1))
      ReviseProperty(v10, a1, 0);
  }
}

uint64_t EnsureChapterGroupInfoCreated(dispatch_queue_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  CFMutableArrayRef Mutable;
  __CFArray *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const __CFString *Error;
  int v13;
  uint64_t v15;
  void *v16;

  v15 = 0;
  v16 = 0;
  if (*(_BYTE *)(a2 + 112))
  {
    v11 = 0;
    v4 = 4294954511;
    goto LABEL_21;
  }
  if (*(_BYTE *)(a2 + 316))
    return *(unsigned int *)(a2 + 320);
  v5 = EnsureFormatReaderCreated(a1, a2);
  if ((_DWORD)v5)
    goto LABEL_30;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    v5 = FigSignalErrorAt();
LABEL_30:
    v4 = v5;
    v11 = 0;
    goto LABEL_21;
  }
  v7 = Mutable;
  if (!FCSupport_GetListOfChapterTitleTrackIDs(*(_QWORD *)(a2 + 240), &v15, (int **)&v16, 0))
  {
    if (v15 >= 1)
    {
      v8 = 0;
      do
      {
        v9 = AddChapterTrackInfoToArray(a2, *((unsigned int *)v16 + v8), CFSTR("title"), v7);
        if ((_DWORD)v9)
          goto LABEL_27;
      }
      while (++v8 < v15);
    }
    free(v16);
    v15 = 0;
    v16 = 0;
  }
  if (!FCSupport_GetListOfChapterImageTrackIDs(*(_QWORD *)(a2 + 240), &v15, (int **)&v16, 0))
  {
    if (v15 >= 1)
    {
      v10 = 0;
      while (1)
      {
        v9 = AddChapterTrackInfoToArray(a2, *((unsigned int *)v16 + v10), CFSTR("artwork"), v7);
        if ((_DWORD)v9)
          break;
        if (++v10 >= v15)
          goto LABEL_17;
      }
LABEL_27:
      v4 = v9;
      free(v16);
      CFRelease(v7);
      *(_BYTE *)(a2 + 316) = 1;
      *(_DWORD *)(a2 + 320) = v4;
      goto LABEL_22;
    }
LABEL_17:
    free(v16);
    v16 = 0;
  }
  if (!CFArrayGetCount(v7))
  {
    CFRelease(v7);
    v7 = 0;
  }
  v4 = 0;
  *(_QWORD *)(a2 + 328) = v7;
  v11 = v16;
LABEL_21:
  free(v11);
  *(_BYTE *)(a2 + 316) = 1;
  *(_DWORD *)(a2 + 320) = v4;
  if ((_DWORD)v4)
  {
LABEL_22:
    Error = AssetCopyLoadError(a2, v4);
    v13 = *(_DWORD *)(a2 + 320);
    goto LABEL_24;
  }
  v13 = 0;
  Error = 0;
LABEL_24:
  StoreByProduct(a1, CFSTR("assetProperty_ChapterGroupInfo"), v13, Error, *(const void **)(a2 + 328));
  if (Error)
    CFRelease(Error);
  return v4;
}

uint64_t AddChapterTrackInfoToArray(uint64_t a1, uint64_t a2, const void *a3, __CFArray *a4)
{
  const __CFAllocator *v8;
  __CFDictionary *Mutable;
  __CFDictionary *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t v13;
  uint64_t FigBaseObject;
  uint64_t (*v15)(uint64_t, const __CFString *, const __CFAllocator *, void **);
  uint64_t v16;
  void (*v17)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  CFNumberRef v18;
  uint64_t MutableChapterTitleTimesArrayForTrack;
  uint64_t v20;
  int valuePtr;
  CFTypeRef v23;
  CFTypeRef v24;
  void *value;
  CFTypeRef cf;

  value = 0;
  cf = 0;
  v23 = 0;
  v24 = 0;
  valuePtr = a2;
  if ((int)a2 <= 0 || !a3 || !a4)
  {
    v20 = FigSignalErrorAt();
    v18 = 0;
    v10 = 0;
    goto LABEL_24;
  }
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v10 = Mutable;
  if (!Mutable)
  {
    v13 = FigSignalErrorAt();
    goto LABEL_39;
  }
  CFDictionarySetValue(Mutable, CFSTR("chapterGroupKey_Type"), a3);
  v11 = *(_QWORD *)(a1 + 240);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 56);
  if (!v12)
    goto LABEL_16;
  v13 = v12(v11, a2, &cf, 0);
  if ((_DWORD)v13)
  {
LABEL_39:
    v20 = v13;
    v18 = 0;
    goto LABEL_24;
  }
  FigBaseObject = FigTrackReaderGetFigBaseObject(cf);
  v15 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
  if (!v15)
  {
LABEL_16:
    v18 = 0;
    v20 = 4294954514;
    goto LABEL_24;
  }
  v13 = v15(FigBaseObject, CFSTR("TrackLanguageCode"), v8, &value);
  if ((_DWORD)v13)
    goto LABEL_39;
  CFDictionarySetValue(v10, CFSTR("chapterGroupKey_Language"), value);
  v16 = FigTrackReaderGetFigBaseObject(cf);
  v17 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
  if (v17)
  {
    v17(v16, CFSTR("ExtendedLanguageTagString"), v8, &v24);
    if (v24)
      CFDictionarySetValue(v10, CFSTR("chapterGroupKey_ExtendedLanguage"), v24);
  }
  v18 = CFNumberCreate(v8, kCFNumberSInt32Type, &valuePtr);
  if (v18)
    CFDictionarySetValue(v10, CFSTR("chapterGroupKey_TrackID"), v18);
  if (CFEqual(a3, CFSTR("title")))
  {
    MutableChapterTitleTimesArrayForTrack = FCSupport_CreateMutableChapterTitleTimesArrayForTrack(*(_QWORD *)(a1 + 240), a2, 0, (const __CFArray **)&v23);
  }
  else if (CFEqual(a3, CFSTR("artwork")))
  {
    MutableChapterTitleTimesArrayForTrack = FCSupport_CreateMutableChapterImageTimesArrayForTrack(*(_QWORD *)(a1 + 240), a2, (const __CFArray **)&v23);
  }
  else
  {
    MutableChapterTitleTimesArrayForTrack = FigSignalErrorAt();
  }
  v20 = MutableChapterTitleTimesArrayForTrack;
  if (!(_DWORD)MutableChapterTitleTimesArrayForTrack)
  {
    if (v23)
      CFDictionarySetValue(v10, CFSTR("chapterGroupKey_PerChapterInfo"), v23);
    CFArrayAppendValue(a4, v10);
    v20 = 0;
  }
LABEL_24:
  if (cf)
    CFRelease(cf);
  if (v18)
    CFRelease(v18);
  if (v24)
    CFRelease(v24);
  if (value)
    CFRelease(value);
  if (v23)
    CFRelease(v23);
  if (v10)
    CFRelease(v10);
  return v20;
}

void PerformCompleteChapterJob(CFTypeRef *a1)
{
  const __CFAllocator *v2;
  CFTypeRef v3;
  CFDictionaryRef v4;
  CFTypeRef v5;
  void *values;
  CFTypeRef cf;
  CFTypeRef v8;
  CFTypeRef v9;
  void *keys[3];
  const __CFString *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  v11 = 0;
  keys[0] = CFSTR("assetPayload_ChapterGroupIndex");
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, a1 + 3);
  keys[1] = CFSTR("assetPayload_ChapterIndex");
  cf = CFNumberCreate(v2, kCFNumberSInt32Type, (char *)a1 + 28);
  keys[2] = CFSTR("assetPayload_ChapterCount");
  v8 = CFNumberCreate(v2, kCFNumberSInt32Type, a1 + 4);
  if (*(_DWORD *)a1)
  {
    v11 = CFSTR("assetPayload_Result");
    v3 = CFNumberCreate(v2, kCFNumberSInt32Type, a1);
  }
  else
  {
    v11 = CFSTR("assetPayload_ChapterData");
    v3 = a1[5];
    if (v3)
      v3 = CFRetain(v3);
  }
  v9 = v3;
  v4 = CFDictionaryCreate(v2, (const void **)keys, (const void **)&values, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (v4)
    CFRelease(v4);
  if (values)
    CFRelease(values);
  if (cf)
    CFRelease(cf);
  if (v8)
    CFRelease(v8);
  if (v9)
    CFRelease(v9);
  v5 = a1[5];
  if (v5)
    CFRelease(v5);
  CFRelease(a1[1]);
  CFRelease(a1[2]);
  free(a1);
}

void MultiTrackBatchNotificationCallback(int a1, uint64_t a2, int a3, const void *a4, CFDictionaryRef theDict)
{
  const __CFNumber *Value;
  _DWORD *v8;
  int valuePtr;

  valuePtr = 0;
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("assetPayload_BatchID"));
  CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
  v8 = CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 56), a4);
  if (v8)
  {
    if (*v8 == valuePtr)
      dispatch_group_leave(*(dispatch_group_t *)(a2 + 40));
  }
}

uint64_t StreamingAssetCopyHLSAlternates(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, __CFString *, _QWORD, CFDictionaryRef *);
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  const void *Value;
  uint64_t v10;
  CFTypeRef v11;
  uint64_t (*v12)(CFTypeRef, const void *, CFTypeRef *);
  uint64_t v13;
  CFTypeRef v15;
  CFTypeRef cf;
  CFDictionaryRef theDict;
  CFTypeRef v18;

  theDict = 0;
  v18 = 0;
  cf = 0;
  FigBytePumpGetFigBaseObject(a1);
  v4 = v3;
  v5 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (!v5)
  {
    v7 = -12782;
LABEL_12:
    if (v7 >> 1 == 2147477256)
      v13 = 0;
    else
      v13 = v7;
    goto LABEL_15;
  }
  v6 = *MEMORY[0x1E0C9AE00];
  v7 = v5(v4, CFSTR("FBP_AlternateInfo"), *MEMORY[0x1E0C9AE00], &theDict);
  if (v7)
    v8 = 1;
  else
    v8 = theDict == 0;
  if (v8)
    goto LABEL_12;
  Value = CFDictionaryGetValue(theDict, CFSTR("FBPAIK_FigAlternateArray"));
  v10 = FigAlternateContinuousFramesOnlyFilterCreate(v6, &cf);
  if ((_DWORD)v10)
    goto LABEL_26;
  v11 = cf;
  v12 = *(uint64_t (**)(CFTypeRef, const void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v12)
  {
    v13 = 4294954514;
    goto LABEL_15;
  }
  v10 = v12(v11, Value, &v18);
  if ((_DWORD)v10)
  {
LABEL_26:
    v13 = v10;
  }
  else if (*a2)
  {
    v13 = 0;
  }
  else
  {
    v15 = v18;
    if (v18)
      v15 = CFRetain(v18);
    v13 = 0;
    *a2 = v15;
  }
LABEL_15:
  if (theDict)
    CFRelease(theDict);
  if (cf)
    CFRelease(cf);
  if (v18)
    CFRelease(v18);
  return v13;
}

uint64_t StreamingAssetCopyMaximumVideoResolution(uint64_t a1, CFDictionaryRef *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int (*v5)(uint64_t, __CFString *, _QWORD, CFDictionaryRef *);
  const __CFArray *Value;
  const __CFArray *v7;
  CFIndex Count;
  int v9;
  CGFloat v10;
  CGFloat v11;
  unint64_t v12;
  double v13;
  const void *ValueAtIndex;
  double Resolution;
  double v16;
  uint64_t v17;
  CFDictionaryRef theDict;
  CGSize v20;

  theDict = 0;
  FigBytePumpGetFigBaseObject(a1);
  v4 = v3;
  v5 = *(unsigned int (**)(uint64_t, __CFString *, _QWORD, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
  if (v5 && !v5(v4, CFSTR("FBP_AlternateInfo"), *MEMORY[0x1E0C9AE00], &theDict) && theDict)
  {
    Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("FBPAIK_FigAlternateArray"));
    if (!Value)
      goto LABEL_12;
    v7 = Value;
    Count = CFArrayGetCount(Value);
    if (Count < 1)
      goto LABEL_12;
    v9 = 0;
    v10 = *MEMORY[0x1E0C9D820];
    v11 = *(double *)(MEMORY[0x1E0C9D820] + 8);
    v12 = Count + 1;
    v13 = 0.0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v7, v12 - 2);
      Resolution = FigAlternateGetResolution((uint64_t)ValueAtIndex);
      if (Resolution * v16 > v13)
      {
        v9 = 1;
        v13 = Resolution * v16;
        v10 = Resolution;
        v11 = v16;
      }
      --v12;
    }
    while (v12 > 1);
    if (v9)
    {
      v20.width = v10;
      v20.height = v11;
      v17 = 0;
      *a2 = CGSizeCreateDictionaryRepresentation(v20);
    }
    else
    {
LABEL_12:
      v17 = 4294954513;
    }
  }
  else
  {
    v17 = FigSignalErrorAt();
  }
  if (theDict)
    CFRelease(theDict);
  return v17;
}

uint64_t StreamingAssetCopyAvailableVideoDynamicRanges(uint64_t a1, CFMutableArrayRef *a2)
{
  uint64_t v4;
  CFMutableArrayRef Mutable;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, __CFString *, uint64_t, CFDictionaryRef *);
  uint64_t v9;
  const __CFArray *Value;
  uint64_t v11;
  CFIndex Count;
  unint64_t v13;
  const void *ValueAtIndex;
  int VideoQualityIndex;
  CFDictionaryRef v16;
  CFDictionaryRef theDict;

  theDict = 0;
  if (a2)
  {
    if (a1)
    {
      v4 = *MEMORY[0x1E0C9AE00];
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      if (!Mutable)
      {
        v11 = FigSignalErrorAt();
        goto LABEL_15;
      }
      FigBytePumpGetFigBaseObject(a1);
      v7 = v6;
      v8 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
      if (v8)
      {
        v9 = v8(v7, CFSTR("FBP_AlternateInfo"), v4, &theDict);
        if (!(_DWORD)v9)
        {
          if (!theDict)
          {
            v11 = 0;
            *a2 = Mutable;
            return v11;
          }
          Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("FBPAIK_FigAlternateArray"));
          v11 = (uint64_t)Value;
          if (Value)
          {
            Count = CFArrayGetCount(Value);
            if (Count >= 1)
            {
              v13 = Count + 1;
              do
              {
                ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v11, v13 - 2);
                VideoQualityIndex = FigAlternateGetVideoQualityIndex((uint64_t)ValueAtIndex);
                FigAlternateStreamVideoQualityIndexToCMVideoDynamicRange(VideoQualityIndex);
                FigCFArrayAppendInt32();
                --v13;
              }
              while (v13 > 1);
            }
            v11 = 0;
          }
LABEL_15:
          v16 = theDict;
          *a2 = Mutable;
          if (v16)
            CFRelease(v16);
          return v11;
        }
        v11 = v9;
      }
      else
      {
        v11 = 4294954514;
      }
      CFRelease(Mutable);
    }
    else
    {
      v11 = FigSignalErrorAt();
    }
    Mutable = 0;
    goto LABEL_15;
  }
  return FigSignalErrorAt();
}

uint64_t StreamingAssetCopyNominalVideoFrameRate(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, __CFString *, _QWORD, uint64_t);

  if (!a2 || !a1)
    return FigSignalErrorAt();
  FigBytePumpGetFigBaseObject(a1);
  v4 = v3;
  v5 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v5)
    return v5(v4, CFSTR("FBP_NominalVideoFramerate"), *MEMORY[0x1E0C9AE00], a2);
  else
    return 4294954514;
}

uint64_t StreamingAssetCopySessionKeys(uint64_t a1, CFArrayRef *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, __CFString *, _QWORD, CFArrayRef *);
  unsigned int v6;
  CFArrayRef v7;
  CFIndex Count;
  uint64_t v9;
  CFArrayRef theArray;

  theArray = 0;
  FigBytePumpGetFigBaseObject(a1);
  v4 = v3;
  v5 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
  if (v5)
  {
    v6 = v5(v4, CFSTR("FBP_SessionKeys"), *MEMORY[0x1E0C9AE00], &theArray);
    v7 = theArray;
    if (theArray)
    {
      Count = CFArrayGetCount(theArray);
      v7 = theArray;
      if (!Count)
      {
        if (theArray)
        {
          CFRelease(theArray);
          v7 = 0;
        }
      }
    }
  }
  else
  {
    v7 = 0;
    v6 = -12782;
  }
  if (v6 >> 1 == 2147477256)
    v9 = 0;
  else
    v9 = v6;
  *a2 = v7;
  return v9;
}

uint64_t ProduceDurationProperty(dispatch_queue_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;

  result = EnsureFormatReaderCreated(a1, a2);
  if (!(_DWORD)result)
  {
    if (*(_BYTE *)(a2 + 456))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      *(_BYTE *)(a2 + 457) = 1;
    }
    return ObtainDurationPropertyValue(a2, a3);
  }
  return result;
}

uint64_t ProduceLyricsProperty(dispatch_queue_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t FigBaseObject;
  void (*v7)(uint64_t, const __CFString *, _QWORD, uint64_t);

  v5 = EnsureFormatReaderCreated(a1, a2);
  if (!(_DWORD)v5)
  {
    FigBaseObject = FigFormatReaderGetFigBaseObject(*(_QWORD *)(a2 + 240));
    v7 = *(void (**)(uint64_t, const __CFString *, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
    if (v7)
      v7(FigBaseObject, CFSTR("Lyrics"), *MEMORY[0x1E0C9AE00], a3);
  }
  return v5;
}

uint64_t ProducePreferredRateProperty(dispatch_queue_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t FigBaseObject;
  uint64_t (*v7)(uint64_t, const __CFString *, _QWORD, uint64_t);

  result = EnsureFormatReaderCreated(a1, a2);
  if (!(_DWORD)result)
  {
    FigBaseObject = FigFormatReaderGetFigBaseObject(*(_QWORD *)(a2 + 240));
    v7 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
    if (v7)
      return v7(FigBaseObject, CFSTR("PreferredRate"), *MEMORY[0x1E0C9AE00], a3);
    else
      return 4294954514;
  }
  return result;
}

uint64_t ProducePreferredVolumeProperty(dispatch_queue_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t FigBaseObject;
  uint64_t (*v7)(uint64_t, const __CFString *, _QWORD, uint64_t);

  result = EnsureFormatReaderCreated(a1, a2);
  if (!(_DWORD)result)
  {
    FigBaseObject = FigFormatReaderGetFigBaseObject(*(_QWORD *)(a2 + 240));
    v7 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
    if (v7)
      return v7(FigBaseObject, CFSTR("PreferredVolume"), *MEMORY[0x1E0C9AE00], a3);
    else
      return 4294954514;
  }
  return result;
}

uint64_t ProducePreferredTransformProperty(dispatch_queue_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t FigBaseObject;
  uint64_t (*v7)(uint64_t, const __CFString *, _QWORD, uint64_t);

  result = EnsureFormatReaderCreated(a1, a2);
  if (!(_DWORD)result)
  {
    FigBaseObject = FigFormatReaderGetFigBaseObject(*(_QWORD *)(a2 + 240));
    v7 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
    if (v7)
      return v7(FigBaseObject, CFSTR("MovieMatrix"), *MEMORY[0x1E0C9AE00], a3);
    else
      return 4294954514;
  }
  return result;
}

uint64_t ProduceTrackReferencesProperty(dispatch_queue_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t FigBaseObject;
  uint64_t (*v7)(uint64_t, const __CFString *, _QWORD, _QWORD);
  uint64_t (*v8)(uint64_t, const __CFString *, _QWORD, _QWORD);

  v8 = 0;
  result = EnsureFormatReaderCreated(a1, a2);
  if ((_DWORD)result)
  {
    v7 = 0;
  }
  else
  {
    FigBaseObject = FigFormatReaderGetFigBaseObject(*(_QWORD *)(a2 + 240));
    v7 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
    if (v7)
    {
      result = v7(FigBaseObject, CFSTR("TrackReferenceDictionary"), *MEMORY[0x1E0C9AE00], &v8);
      v7 = v8;
    }
    else
    {
      result = 4294954514;
    }
  }
  *a3 = v7;
  return result;
}

uint64_t ProduceAlternateTrackGroupsProperty(dispatch_queue_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t FigBaseObject;
  uint64_t (*v7)(uint64_t, const __CFString *, _QWORD, _QWORD);
  uint64_t (*v8)(uint64_t, const __CFString *, _QWORD, _QWORD);

  v8 = 0;
  result = EnsureFormatReaderCreated(a1, a2);
  if ((_DWORD)result)
  {
    v7 = 0;
  }
  else
  {
    FigBaseObject = FigFormatReaderGetFigBaseObject(*(_QWORD *)(a2 + 240));
    v7 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
    if (v7)
    {
      result = v7(FigBaseObject, CFSTR("AlternateGroupArray"), *MEMORY[0x1E0C9AE00], &v8);
      v7 = v8;
    }
    else
    {
      result = 4294954514;
    }
  }
  *a3 = v7;
  return result;
}

uint64_t ProducePreciseDurationAndTimingProperty(dispatch_queue_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t FigBaseObject;
  uint64_t (*v7)(uint64_t, const __CFString *, _QWORD, const void **);
  BOOL v8;
  uint64_t (*v9)(uint64_t, const __CFString *, _QWORD, const void **);

  v9 = 0;
  result = EnsureFormatReaderCreated(a1, a2);
  if ((_DWORD)result)
  {
    v7 = 0;
  }
  else
  {
    FigBaseObject = FigFormatReaderGetFigBaseObject(*(_QWORD *)(a2 + 240));
    v7 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, const void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
    if (v7)
    {
      result = v7(FigBaseObject, CFSTR("SampleCursorTimeAccuracyIsExact"), *MEMORY[0x1E0C9AE00], (const void **)&v9);
      v7 = v9;
      if ((_DWORD)result)
        v8 = 0;
      else
        v8 = v9 == 0;
      if (v8)
      {
        v7 = (uint64_t (*)(uint64_t, const __CFString *, _QWORD, const void **))CFRetain((CFTypeRef)*MEMORY[0x1E0C9AE40]);
        result = 0;
      }
    }
    else
    {
      result = 4294954514;
    }
  }
  *a3 = v7;
  return result;
}

uint64_t ProduceAvailableMetadataFormatsProperty(dispatch_queue_t *a1, uint64_t a2, __CFArray **a3)
{
  uint64_t v5;
  uint64_t FigBaseObject;
  void (*v7)(uint64_t, const __CFString *, _QWORD, CFArrayRef *);
  const __CFAllocator *v8;
  CFIndex Count;
  uint64_t v10;
  __CFArray *Mutable;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v14;
  unsigned int (*v15)(uint64_t, const __CFString *, const __CFAllocator *, void **);
  void *value;
  CFArrayRef theArray;

  theArray = 0;
  v5 = EnsureFormatReaderCreated(a1, a2);
  if ((_DWORD)v5
    || (FigBaseObject = FigFormatReaderGetFigBaseObject(*(_QWORD *)(a2 + 240)),
        (v7 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48)) == 0)
    || (v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00],
        v7(FigBaseObject, CFSTR("MetadataReaders"), *MEMORY[0x1E0C9AE00], &theArray),
        !theArray))
  {
    Mutable = 0;
    goto LABEL_18;
  }
  Count = CFArrayGetCount(theArray);
  if (Count)
  {
    v10 = Count;
    Mutable = CFArrayCreateMutable(v8, 0, MEMORY[0x1E0C9B378]);
    if (v10 >= 1)
    {
      for (i = 0; i != v10; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
        value = 0;
        v14 = FigMetadataReaderGetFigBaseObject(ValueAtIndex);
        v15 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (v15 && !v15(v14, CFSTR("format"), v8, &value))
        {
          CFArrayAppendValue(Mutable, value);
          CFRelease(value);
        }
      }
    }
    if (CFArrayGetCount(Mutable) || !Mutable)
      goto LABEL_15;
    CFRelease(Mutable);
  }
  Mutable = 0;
LABEL_15:
  if (theArray)
    CFRelease(theArray);
LABEL_18:
  *a3 = Mutable;
  return v5;
}

uint64_t ProduceFormatSpecificMetadataFormatProperty(dispatch_queue_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t FigBaseObject;
  void (*v7)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, const __CFString *, uint64_t, uint64_t);
  uint64_t v11;
  CFTypeRef cf;

  cf = 0;
  v5 = EnsureFormatReaderCreated(a1, a2);
  if ((_DWORD)v5)
    return v5;
  FigBaseObject = FigFormatReaderGetFigBaseObject(*(_QWORD *)(a2 + 240));
  v7 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (!v7)
    return 0;
  v8 = *MEMORY[0x1E0C9AE00];
  v7(FigBaseObject, CFSTR("FormatSpecificMetadataReader"), *MEMORY[0x1E0C9AE00], &cf);
  if (!cf)
    return 0;
  v9 = FigMetadataReaderGetFigBaseObject(cf);
  v10 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
  if (v10)
    v11 = v10(v9, CFSTR("format"), v8, a3);
  else
    v11 = 4294954514;
  if (cf)
    CFRelease(cf);
  return v11;
}

uint64_t ProduceCommonMetadataProperty(dispatch_queue_t *a1, uint64_t a2, __CFArray **a3)
{
  uint64_t result;

  result = EnsureFormatReaderCreated(a1, a2);
  if (!(_DWORD)result)
    return FigMetadataCopyMovieCommonMetadata(*(_QWORD *)(a2 + 240), (const __CFAllocator *)*MEMORY[0x1E0C9AE00], a3);
  return result;
}

uint64_t ProduceMetadataPropertyFromMetadataReader(dispatch_queue_t *a1, uint64_t a2, uint64_t a3, __CFArray **a4)
{
  uint64_t v7;
  uint64_t FigBaseObject;
  void (*v9)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  const __CFAllocator *v10;
  __CFArray *Mutable;
  uint64_t v12;
  uint64_t v13;
  CFTypeRef cf;

  cf = 0;
  v7 = EnsureFormatReaderCreated(a1, a2);
  if ((_DWORD)v7)
    return v7;
  FigBaseObject = FigFormatReaderGetFigBaseObject(*(_QWORD *)(a2 + 240));
  v9 = *(void (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v9)
    return 0;
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v9(FigBaseObject, a3, *MEMORY[0x1E0C9AE00], &cf);
  if (!cf)
    return 0;
  Mutable = CFArrayCreateMutable(v10, 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    if (sBuildMetadataFiltersOnce != -1)
      dispatch_once_f(&sBuildMetadataFiltersOnce, 0, (dispatch_function_t)BuildMetadataFilterDictionaries);
    CFArrayAppendValue(Mutable, (const void *)sUserDataiTunesMetadataFilter);
    CFArrayAppendValue(Mutable, (const void *)sISOUserDataiTunesMetadataFilter);
    if (FigCFEqual() && !*(_BYTE *)(a2 + 609))
      CFArrayAppendValue(Mutable, (const void *)sQuickTimeAIMEDataFilter);
    v12 = FigMetadataCopyMetadataItemsIf(v10, (uint64_t)cf, (unsigned int (*)(CFDictionaryRef, uint64_t))IsNotOnFilterOutKeyList, (uint64_t)Mutable, a4);
  }
  else
  {
    v12 = FigSignalErrorAt();
  }
  v13 = v12;
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  return v13;
}

uint64_t ProduceChapterGroupInfoProperty(dispatch_queue_t *a1, uint64_t a2, CFArrayRef *a3)
{
  uint64_t v5;
  const __CFArray *v6;
  CFArrayRef Copy;

  v5 = EnsureChapterGroupInfoCreated(a1, a2);
  if (!(_DWORD)v5)
  {
    v6 = *(const __CFArray **)(a2 + 328);
    if (v6)
      Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v6);
    else
      Copy = 0;
    *a3 = Copy;
  }
  return v5;
}

uint64_t ProduceCreationDateProperty(dispatch_queue_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t FigBaseObject;
  uint64_t (*v7)(uint64_t, const __CFString *, _QWORD, _QWORD);
  uint64_t (*v8)(uint64_t, const __CFString *, _QWORD, _QWORD);

  v8 = 0;
  result = EnsureFormatReaderCreated(a1, a2);
  if ((_DWORD)result)
  {
    v7 = 0;
  }
  else
  {
    FigBaseObject = FigFormatReaderGetFigBaseObject(*(_QWORD *)(a2 + 240));
    v7 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
    if (v7)
    {
      result = v7(FigBaseObject, CFSTR("CreationDate"), *MEMORY[0x1E0C9AE00], &v8);
      v7 = v8;
    }
    else
    {
      result = 4294954514;
    }
  }
  *a3 = v7;
  return result;
}

uint64_t ProduceInitialSamplesProperty(dispatch_queue_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t *);
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  const __CFDictionary *DictionaryValue;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, CFTypeRef *, _QWORD, _QWORD);
  unsigned int v17;
  CFTypeRef v18;
  uint64_t (*v19)(CFTypeRef, CFTypeRef *);
  uint64_t FigBaseObject;
  void (*v21)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef v22;
  uint64_t (*v23)(CFTypeRef, CMTimeRange *, CFTypeRef *);
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  CFTypeRef v27;
  uint64_t (*v28)(CFTypeRef, CMTimeRange *);
  uint64_t v29;
  void (*v30)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef v31;
  uint64_t (*v32)(CFTypeRef, CMTimeRange *, CFTypeRef *);
  unsigned int v33;
  unsigned int v34;
  CFTypeRef v35;
  uint64_t (*v36)(CFTypeRef, CMTimeRange *);
  CFTypeRef v37;
  uint64_t (*v38)(CFTypeRef, CMTimeRange *, uint64_t, CFTypeRef *, _QWORD, _QWORD);
  unsigned int v39;
  BOOL v40;
  CFTypeRef *v41;
  CFTypeRef v42;
  _QWORD *v44;
  uint64_t v45;
  CMTime v46;
  CMTimeRange toRange;
  CMTime time;
  CFTypeRef cf;
  CFTypeRef v50;
  CFTypeRef v51;
  CMTimeRange v52[2];
  CFTypeRef v53;
  CFTypeRef v54;
  CFTypeRef v55;
  CFTypeRef v56;
  CMTime start;
  CMTimeValue value;
  CMTimeScale timescale;
  CMTimeRange fromRange;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v45 = 0;
  v5 = MEMORY[0x1E0CA2E68];
  value = *MEMORY[0x1E0CA2E68];
  timescale = *(_DWORD *)(MEMORY[0x1E0CA2E68] + 8);
  v6 = EnsureFormatReaderCreated(a1, a2);
  if ((_DWORD)v6)
    goto LABEL_70;
  v7 = *(_QWORD *)(a2 + 240);
  v8 = *(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v8)
  {
    v41 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    v12 = 4294954514;
    goto LABEL_67;
  }
  v6 = v8(v7, &v45);
  if ((_DWORD)v6)
  {
LABEL_70:
    v12 = v6;
LABEL_64:
    v41 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    goto LABEL_67;
  }
  flags = *(_DWORD *)(v5 + 12);
  epoch = *(_QWORD *)(v5 + 16);
  if (*(_QWORD *)(a2 + 88))
  {
    DictionaryValue = (const __CFDictionary *)FigCFDictionaryGetDictionaryValue();
    if (DictionaryValue)
    {
      CMTimeMakeFromDictionary(&v52[0].start, DictionaryValue);
      fromRange.start.value = v52[0].start.value;
      fromRange.start.timescale = v52[0].start.timescale;
      if ((v52[0].start.flags & 0x1D) == 1)
      {
        epoch = v52[0].start.epoch;
        value = fromRange.start.value;
        timescale = fromRange.start.timescale;
        flags = v52[0].start.flags;
      }
    }
  }
  if (v45 < 1)
    goto LABEL_65;
  v44 = a3;
  LODWORD(v12) = 0;
  v13 = 0;
  v14 = *MEMORY[0x1E0C9AE00];
  do
  {
    v56 = 0;
    start.value = value;
    start.timescale = timescale;
    start.flags = flags;
    start.epoch = epoch;
    v54 = 0;
    v55 = 0;
    v53 = 0;
    memset(v52, 0, sizeof(v52));
    v50 = 0;
    v51 = 0;
    cf = 0;
    v15 = *(_QWORD *)(a2 + 240);
    v16 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 48);
    if (!v16)
    {
LABEL_39:
      v25 = -12782;
      goto LABEL_40;
    }
    v17 = v16(v15, v13, &v56, 0, 0);
    if (v17)
      goto LABEL_62;
    v18 = v56;
    v19 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (!v19)
      goto LABEL_39;
    v17 = v19(v18, &v55);
    if (v17)
    {
LABEL_62:
      v25 = v17;
      goto LABEL_40;
    }
    FigBaseObject = FigTrackReaderGetFigBaseObject(v56);
    v21 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
    if (v21)
      v21(FigBaseObject, CFSTR("SecondaryEditCursorService"), v14, &v54);
    v22 = v54;
    if (v54)
    {
      v23 = *(uint64_t (**)(CFTypeRef, CMTimeRange *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 8);
      if (!v23)
        goto LABEL_39;
      fromRange.start = start;
      v24 = v23(v22, &fromRange, &v53);
      if (v24 == -12521)
        goto LABEL_35;
      v25 = v24;
      if (v24)
        goto LABEL_40;
      v26 = WalkEditCursorToNonEmptyEdit((uint64_t)v53);
      if (v26 == -12520)
        goto LABEL_35;
      v25 = v26;
      if (v26)
        goto LABEL_40;
      v27 = v53;
      v28 = *(uint64_t (**)(CFTypeRef, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (!v28)
        goto LABEL_39;
      v17 = v28(v27, v52);
      if (v17)
        goto LABEL_62;
      time = start;
      fromRange = v52[1];
      toRange = v52[0];
      CMTimeMapTimeFromRangeToRange(&start, &time, &fromRange, &toRange);
      time = start;
      fromRange = v52[0];
      CMTimeClampToRange(&toRange.start, &time, &fromRange);
      start = toRange.start;
    }
    v29 = FigTrackReaderGetFigBaseObject(v56);
    v30 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
    if (v30)
    {
      v30(v29, CFSTR("EditCursorService"), v14, &v51);
      v31 = v51;
      if (v51)
      {
        toRange.start = start;
        v32 = *(uint64_t (**)(CFTypeRef, CMTimeRange *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 8);
        if (!v32)
          goto LABEL_39;
        *(_OWORD *)&fromRange.start.value = *(_OWORD *)&toRange.start.value;
        fromRange.start.epoch = toRange.start.epoch;
        v33 = v32(v31, &fromRange, &v50);
        if (v33 != -12521)
        {
          v25 = v33;
          if (v33)
            goto LABEL_40;
          v34 = WalkEditCursorToNonEmptyEdit((uint64_t)v50);
          if (v34 != -12520)
          {
            v25 = v34;
            if (v34)
              goto LABEL_40;
            v35 = v50;
            v36 = *(uint64_t (**)(CFTypeRef, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
            if (!v36)
              goto LABEL_39;
            v17 = v36(v35, v52);
            if (v17)
              goto LABEL_62;
            v46 = start;
            fromRange = v52[1];
            toRange = v52[0];
            CMTimeMapTimeFromRangeToRange(&time, &v46, &fromRange, &toRange);
            start = time;
            fromRange = v52[0];
            CMTimeClampToRange(&toRange.start, &time, &fromRange);
            start = toRange.start;
          }
        }
      }
    }
LABEL_35:
    v37 = v55;
    toRange.start = start;
    v38 = *(uint64_t (**)(CFTypeRef, CMTimeRange *, uint64_t, CFTypeRef *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (!v38)
      goto LABEL_39;
    *(_OWORD *)&fromRange.start.value = *(_OWORD *)&toRange.start.value;
    fromRange.start.epoch = toRange.start.epoch;
    v39 = v38(v37, &fromRange, 1, &cf, 0, 0);
    if (v39 == -12842)
      v25 = 0;
    else
      v25 = v39;
LABEL_40:
    if (v56)
      CFRelease(v56);
    if (cf)
      CFRelease(cf);
    if (v55)
      CFRelease(v55);
    if (v50)
      CFRelease(v50);
    if (v51)
      CFRelease(v51);
    if (v53)
      CFRelease(v53);
    if (v54)
      CFRelease(v54);
    if (v25)
      v40 = (_DWORD)v12 == 0;
    else
      v40 = 0;
    if (v40)
      v12 = v25;
    else
      v12 = v12;
    ++v13;
  }
  while (v13 < v45);
  a3 = v44;
  if ((_DWORD)v12)
    goto LABEL_64;
LABEL_65:
  v12 = 0;
  v41 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
LABEL_67:
  v42 = *v41;
  if (*v41)
    v42 = CFRetain(v42);
  *a3 = v42;
  return v12;
}

uint64_t ProduceCPEProtectorProperty(dispatch_queue_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  const __CFDictionary *v6;
  const __CFDictionary *v7;
  BOOL v8;
  CFIndex v10;
  uint64_t v11;
  CFDictionaryRef v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  CFTypeRef v16;
  const __CFDictionary *v18;
  const __CFDictionary *v19;
  const __CFDictionary *v20;
  void *values[3];
  void *keys[4];

  keys[3] = *(void **)MEMORY[0x1E0C80C00];
  v19 = 0;
  v20 = 0;
  v18 = 0;
  v5 = EnsureFormatReaderCreated(a1, a2);
  if ((_DWORD)v5)
  {
    v15 = v5;
    v12 = 0;
    goto LABEL_23;
  }
  GetContentProtectionOptions(a2, &v20, &v19, &v18);
  v6 = v19;
  v7 = v20;
  if (v18)
    v8 = 0;
  else
    v8 = v20 == 0;
  if (!v8 || v19 != 0)
  {
    memset(keys, 0, 24);
    memset(values, 0, sizeof(values));
    if (v18)
    {
      keys[0] = CFSTR("StorageURL");
      values[0] = v18;
      v10 = 1;
      if (!v20)
      {
LABEL_12:
        if (v6)
        {
          keys[v10] = CFSTR("9692C034-625A-4B20-9D38-D1E9CF40B67F");
          values[v10++] = v6;
        }
        v11 = *MEMORY[0x1E0C9AE00];
        v12 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)values, v10, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        goto LABEL_16;
      }
    }
    else
    {
      v10 = 0;
      if (!v20)
        goto LABEL_12;
    }
    keys[v10] = CFSTR("AE50A074-4909-4EBC-8ADF-C8DDD5F591AA");
    values[v10++] = v7;
    goto LABEL_12;
  }
  v12 = 0;
  v11 = *MEMORY[0x1E0C9AE00];
LABEL_16:
  v13 = FigCPEProtectorCreateForFormatReader(v11, *(_QWORD *)(a2 + 240), (uint64_t)v12, a2 + 344);
  if ((_DWORD)v13)
    v14 = (_DWORD)v13 == -12165;
  else
    v14 = 1;
  if (v14)
  {
    v15 = 0;
    if (*(_QWORD *)(a2 + 344))
      *(_WORD *)(a2 + 352) = 257;
  }
  else
  {
    v15 = v13;
  }
LABEL_23:
  v16 = *(CFTypeRef *)(a2 + 344);
  if (v16)
    v16 = CFRetain(v16);
  *a3 = v16;
  if (v12)
    CFRelease(v12);
  return v15;
}

uint64_t ProduceProtectedStatusProperty(dispatch_queue_t *a1, uint64_t a2, CFTypeRef *a3)
{
  CFTypeRef *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t *);
  CFTypeRef *v10;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, CFTypeRef *, _QWORD, _QWORD);
  uint64_t FigBaseObject;
  uint64_t (*v19)(uint64_t, const __CFString *, uint64_t, CFArrayRef *);
  BOOL v20;
  CFIndex Count;
  CFIndex v22;
  CFIndex i;
  const opaqueCMFormatDescription *ValueAtIndex;
  FourCharCode MediaSubType;
  CFArrayRef theArray;
  CFTypeRef cf;
  uint64_t v28;

  v5 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  if (*(_BYTE *)(a2 + 352))
  {
    v6 = 0;
  }
  else
  {
    v28 = 0;
    v7 = EnsureFormatReaderCreated(a1, a2);
    if ((_DWORD)v7)
    {
      v6 = v7;
    }
    else
    {
      v8 = *(_QWORD *)(a2 + 240);
      v9 = *(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v9)
      {
        v6 = v9(v8, &v28);
        if (!(_DWORD)v6)
        {
          if (!*(_BYTE *)(a2 + 353))
          {
            v14 = 0;
            v15 = *MEMORY[0x1E0C9AE00];
            while (v14 < v28)
            {
              theArray = 0;
              cf = 0;
              v16 = *(_QWORD *)(a2 + 240);
              v17 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 48);
              if (v17)
              {
                v6 = v17(v16, v14, &cf, 0, 0);
                if (!(_DWORD)v6)
                {
                  FigBaseObject = FigTrackReaderGetFigBaseObject(cf);
                  v19 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                  if (v19)
                  {
                    v6 = v19(FigBaseObject, CFSTR("TrackFormatDescriptionArray"), v15, &theArray);
                    if ((_DWORD)v6)
                      v20 = 1;
                    else
                      v20 = theArray == 0;
                    if (!v20)
                    {
                      Count = CFArrayGetCount(theArray);
                      if (Count >= 1)
                      {
                        v22 = Count;
                        for (i = 0; i != v22; ++i)
                        {
                          ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(theArray, i);
                          if (FigCPEIsSupportedFormatDescription((uint64_t)ValueAtIndex))
                            *(_BYTE *)(a2 + 353) = 1;
                          MediaSubType = CMFormatDescriptionGetMediaSubType(ValueAtIndex);
                          if (FigCodecTypeIsProtected(MediaSubType))
                            *(_BYTE *)(a2 + 353) = 1;
                        }
                      }
                      v6 = 0;
                    }
                  }
                  else
                  {
                    v6 = 4294954514;
                  }
                  if (cf)
                    CFRelease(cf);
                }
              }
              else
              {
                v6 = 4294954514;
              }
              if (theArray)
                CFRelease(theArray);
              if (!(_DWORD)v6)
              {
                ++v14;
                if (!*(_BYTE *)(a2 + 353))
                  continue;
              }
              goto LABEL_9;
            }
          }
          v6 = 0;
        }
      }
      else
      {
        v6 = 4294954514;
      }
LABEL_9:
      if (!*(_BYTE *)(a2 + 353))
      {
        cf = 0;
        v12 = FigFormatReaderGetFigBaseObject(*(_QWORD *)(a2 + 240));
        v13 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
        if (v13)
        {
          if (!v13(v12, CFSTR("IndicatesContentProtection"), *MEMORY[0x1E0C9AE00], &cf) && cf == *v5)
            *(_BYTE *)(a2 + 353) = 1;
        }
      }
      *(_BYTE *)(a2 + 352) = 1;
    }
  }
  if (*(_BYTE *)(a2 + 353))
    v10 = v5;
  else
    v10 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
  *a3 = CFRetain(*v10);
  return v6;
}

uint64_t ProduceSHA1DigestProperty(dispatch_queue_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  const __CFString *Error;
  int v9;
  CFTypeRef v10;

  if (*(_BYTE *)(a2 + 112))
  {
    v6 = 4294954511;
LABEL_17:
    *(_BYTE *)(a2 + 196) = 1;
    *(_DWORD *)(a2 + 200) = v6;
    goto LABEL_7;
  }
  if (*(_BYTE *)(a2 + 196))
  {
    v6 = *(unsigned int *)(a2 + 200);
    goto LABEL_12;
  }
  v7 = EnsureContentStreamCreated(a1, a2);
  if ((_DWORD)v7)
  {
    v6 = v7;
    goto LABEL_17;
  }
  if (*(_QWORD *)(a2 + 160))
  {
    v6 = FigByteStreamCopySHA1Digest();
    *(_QWORD *)(a2 + 208) = 0;
    *(_BYTE *)(a2 + 196) = 1;
    *(_DWORD *)(a2 + 200) = v6;
    if ((_DWORD)v6)
    {
LABEL_7:
      Error = AssetCopyLoadError(a2, v6);
      v9 = *(_DWORD *)(a2 + 200);
      goto LABEL_10;
    }
    v9 = 0;
    Error = 0;
  }
  else
  {
    v9 = 0;
    v6 = 0;
    Error = 0;
    *(_BYTE *)(a2 + 196) = 1;
    *(_DWORD *)(a2 + 200) = 0;
  }
LABEL_10:
  StoreByProduct(a1, CFSTR("assetProperty_SHA1Digest"), v9, Error, *(const void **)(a2 + 208));
  if (Error)
    CFRelease(Error);
LABEL_12:
  v10 = *(CFTypeRef *)(a2 + 208);
  if (v10)
    v10 = CFRetain(v10);
  *a3 = v10;
  return v6;
}

uint64_t ProduceMediaSelectionArrayProperty(dispatch_queue_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  const __CFArray *ArrayValue;
  uint64_t SanitizedOutOfBandAlternateTracksArray;
  CFTypeRef v8;
  uint64_t v9;
  uint64_t v11;
  CFTypeRef cf;

  v11 = 0;
  cf = 0;
  v5 = EnsureFormatReaderCreated(a1, a2);
  if ((_DWORD)v5)
  {
    v9 = v5;
    goto LABEL_10;
  }
  if (!*(_QWORD *)(a2 + 88) || (ArrayValue = (const __CFArray *)FigCFDictionaryGetArrayValue()) == 0)
  {
    v8 = 0;
    goto LABEL_7;
  }
  SanitizedOutOfBandAlternateTracksArray = CreateSanitizedOutOfBandAlternateTracksArray(ArrayValue, (__CFArray **)&cf);
  v8 = cf;
  if (!(_DWORD)SanitizedOutOfBandAlternateTracksArray)
LABEL_7:
    SanitizedOutOfBandAlternateTracksArray = FigCreateMediaSelectionArrayFromFormatReaderProperties(*(_QWORD *)(a2 + 240), 1, (uint64_t)v8, &v11);
  v9 = SanitizedOutOfBandAlternateTracksArray;
  if (v8)
    CFRelease(v8);
LABEL_10:
  *a3 = v11;
  return v9;
}

uint64_t ProduceiTunesGaplessInfoProperty(dispatch_queue_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t FigBaseObject;
  void (*v7)(uint64_t, const __CFString *, _QWORD, uint64_t);

  v5 = EnsureFormatReaderCreated(a1, a2);
  if (!(_DWORD)v5)
  {
    FigBaseObject = FigFormatReaderGetFigBaseObject(*(_QWORD *)(a2 + 240));
    v7 = *(void (**)(uint64_t, const __CFString *, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
    if (v7)
      v7(FigBaseObject, CFSTR("iTunesGaplessInfo"), *MEMORY[0x1E0C9AE00], a3);
  }
  return v5;
}

uint64_t ProduceiTunesSoundCheckVolumeNormalizationProperty(dispatch_queue_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t FigBaseObject;
  void (*v7)(uint64_t, const __CFString *, _QWORD, uint64_t);

  v5 = EnsureFormatReaderCreated(a1, a2);
  if (!(_DWORD)v5)
  {
    FigBaseObject = FigFormatReaderGetFigBaseObject(*(_QWORD *)(a2 + 240));
    v7 = *(void (**)(uint64_t, const __CFString *, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
    if (v7)
      v7(FigBaseObject, CFSTR("iTunesSoundCheckVolumeNormalization"), *MEMORY[0x1E0C9AE00], a3);
  }
  return v5;
}

uint64_t ProduceCouldContainFragmentsProperty(dispatch_queue_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;

  v5 = EnsureFormatReaderCreated(a1, a2);
  if (!(_DWORD)v5)
  {
    if (*(_BYTE *)(a2 + 456))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      *(_BYTE *)(a2 + 458) = 1;
    }
    ObtainCouldContainFragmentsPropertyValue(a2, a3);
  }
  return v5;
}

uint64_t ProduceContainsFragmentsProperty(dispatch_queue_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;

  v5 = EnsureFormatReaderCreated(a1, a2);
  if (!(_DWORD)v5)
  {
    if (*(_BYTE *)(a2 + 456))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      *(_BYTE *)(a2 + 459) = 1;
    }
    ObtainContainsFragmentsPropertyValue(a2, a3);
  }
  return v5;
}

uint64_t ProduceMovieExtendsDurationProperty(dispatch_queue_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t FigBaseObject;
  void (*v7)(uint64_t, const __CFString *, _QWORD, uint64_t);

  v5 = EnsureFormatReaderCreated(a1, a2);
  if (!(_DWORD)v5)
  {
    FigBaseObject = FigFormatReaderGetFigBaseObject(*(_QWORD *)(a2 + 240));
    v7 = *(void (**)(uint64_t, const __CFString *, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
    if (v7)
      v7(FigBaseObject, CFSTR("MovieExtendsDuration"), *MEMORY[0x1E0C9AE00], a3);
  }
  return v5;
}

CFNumberRef ProduceAssetCameraRollValidationProperty(dispatch_queue_t *a1, uint64_t a2, CFNumberRef *a3)
{
  CFNumberRef result;
  int valuePtr;

  valuePtr = ProduceAssetValidationResult(a1, a2, CFSTR("validationCriteria_CameraRoll"), 0);
  result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  *a3 = result;
  return result;
}

CFNumberRef ProduceAssetMediaPlaybackValidationProperty(dispatch_queue_t *a1, uint64_t a2, CFNumberRef *a3)
{
  CFNumberRef result;
  int valuePtr;

  valuePtr = ProduceAssetValidationResult(a1, a2, CFSTR("validationCriteria_MediaPlayback"), 0);
  result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  *a3 = result;
  return result;
}

CFTypeRef ProduceAssetCompatibleWithPhotosTranscodingServiceProperty(dispatch_queue_t *a1, uint64_t a2, _QWORD *a3)
{
  const void *v6;
  const void *v7;
  _BOOL4 v8;
  const void *v9;
  CFTypeRef result;
  const void *v11;

  v11 = 0;
  ProduceAssetIsSelfContainedProperty(a1, a2, &v11);
  v6 = v11;
  v7 = (const void *)*MEMORY[0x1E0C9AE50];
  if (FigCFEqual() == 1)
  {
    v8 = ProduceAssetValidationResult(a1, a2, CFSTR("validationCriteria_PhotosTranscodingService"), 0) != 0;
    if (!v6)
      goto LABEL_4;
    goto LABEL_3;
  }
  v8 = 1;
  if (v6)
LABEL_3:
    CFRelease(v6);
LABEL_4:
  if (v8)
    v9 = (const void *)*MEMORY[0x1E0C9AE40];
  else
    v9 = v7;
  result = CFRetain(v9);
  *a3 = result;
  return result;
}

uint64_t ProduceChaptersProperty(dispatch_queue_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t FigBaseObject;
  void (*v7)(uint64_t, const __CFString *, _QWORD, uint64_t);

  v5 = EnsureFormatReaderCreated(a1, a2);
  if (!(_DWORD)v5)
  {
    FigBaseObject = FigFormatReaderGetFigBaseObject(*(_QWORD *)(a2 + 240));
    v7 = *(void (**)(uint64_t, const __CFString *, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
    if (v7)
      v7(FigBaseObject, CFSTR("Chapters"), *MEMORY[0x1E0C9AE00], a3);
  }
  return v5;
}

uint64_t ProduceLocalizedMediaSelectionOptionDisplayNamesProperty(dispatch_queue_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t FigBaseObject;
  void (*v7)(uint64_t, const __CFString *, _QWORD, uint64_t);

  v5 = EnsureFormatReaderCreated(a1, a2);
  if (!(_DWORD)v5)
  {
    FigBaseObject = FigFormatReaderGetFigBaseObject(*(_QWORD *)(a2 + 240));
    v7 = *(void (**)(uint64_t, const __CFString *, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
    if (v7)
      v7(FigBaseObject, CFSTR("LocalizedMSODisplayNames"), *MEMORY[0x1E0C9AE00], a3);
  }
  return v5;
}

uint64_t ProduceMovieProxyProperty(dispatch_queue_t *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v5;
  const __CFAllocator *v6;
  uint64_t FigBaseObject;
  void (*v8)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v9;
  uint64_t v10;
  CFTypeRef cf;

  cf = 0;
  v5 = EnsureFormatReaderCreated(a1, a2);
  if ((_DWORD)v5)
    return v5;
  if (!*(_QWORD *)(a2 + 160))
    goto LABEL_7;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  FigBaseObject = FigFormatReaderGetFigBaseObject(*(_QWORD *)(a2 + 240));
  v8 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
  if (v8)
    v8(FigBaseObject, CFSTR("Identifier"), v6, &cf);
  if (FigCFEqual())
    v9 = MovieProxyDataCreateForByteStream(v6, *(_QWORD *)(a2 + 160), a3);
  else
LABEL_7:
    v9 = FigSignalErrorAt();
  v10 = v9;
  if (cf)
    CFRelease(cf);
  return v10;
}

uint64_t ProduceAssetIsSelfContainedProperty(dispatch_queue_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t FigBaseObject;
  void (*v7)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef v8;
  CFTypeRef v9;
  CFTypeRef cf;

  cf = 0;
  v5 = EnsureFormatReaderCreated(a1, a2);
  if (!(_DWORD)v5)
  {
    FigBaseObject = FigFormatReaderGetFigBaseObject(*(_QWORD *)(a2 + 240));
    v7 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
    if (v7)
    {
      v7(FigBaseObject, CFSTR("IsSelfContained"), *MEMORY[0x1E0C9AE00], &cf);
      v8 = cf;
    }
    else
    {
      v8 = 0;
    }
    v9 = (CFTypeRef)*MEMORY[0x1E0C9AE40];
    if (v8 != (CFTypeRef)*MEMORY[0x1E0C9AE40])
      v9 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
    if (v9)
    {
      v9 = CFRetain(v9);
      v8 = cf;
    }
    *a3 = v9;
    if (v8)
      CFRelease(v8);
  }
  return v5;
}

uint64_t ProduceAssetNaturalTimeScaleProperty(dispatch_queue_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t FigBaseObject;
  void (*v7)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef v8;
  CFTypeRef v9;
  CFTypeRef cf;

  cf = 0;
  v5 = EnsureFormatReaderCreated(a1, a2);
  if (!(_DWORD)v5)
  {
    FigBaseObject = FigFormatReaderGetFigBaseObject(*(_QWORD *)(a2 + 240));
    v7 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
    if (v7 && (v7(FigBaseObject, CFSTR("Timescale"), *MEMORY[0x1E0C9AE00], &cf), cf))
    {
      v8 = CFRetain(cf);
      v9 = cf;
      *a3 = v8;
      if (v9)
        CFRelease(v9);
    }
    else
    {
      *a3 = 0;
    }
  }
  return v5;
}

CFTypeRef ProduceAssetCompatibleWithAirPlayVideoProperty(dispatch_queue_t *a1, uint64_t a2, _QWORD *a3)
{
  const void *v6;
  const void *v7;
  int v8;
  const void **v9;
  CFTypeRef result;
  const void *v11;

  if (*(_DWORD *)(a2 + 64) != 1431456810)
  {
    v9 = (const void **)MEMORY[0x1E0C9AE40];
    goto LABEL_8;
  }
  v11 = 0;
  ProduceAssetIsSelfContainedProperty(a1, a2, &v11);
  v6 = v11;
  v7 = (const void *)*MEMORY[0x1E0C9AE40];
  v8 = FigCFEqual();
  if (v6)
    CFRelease(v6);
  if (!v8 && !ProduceAssetValidationResult(a1, a2, CFSTR("validationCriteria_AirPlayVideo"), 0))
  {
    v9 = (const void **)MEMORY[0x1E0C9AE50];
LABEL_8:
    v7 = *v9;
  }
  result = CFRetain(v7);
  *a3 = result;
  return result;
}

uint64_t ProduceAssetAnalysisMessagesProperty(dispatch_queue_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t FigBaseObject;
  void (*v7)(uint64_t, const __CFString *, _QWORD, uint64_t);

  v5 = EnsureFormatReaderCreated(a1, a2);
  if (!(_DWORD)v5)
  {
    FigBaseObject = FigFormatReaderGetFigBaseObject(*(_QWORD *)(a2 + 240));
    v7 = *(void (**)(uint64_t, const __CFString *, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
    if (v7)
      v7(FigBaseObject, CFSTR("AssetAnalysisMessages"), *MEMORY[0x1E0C9AE00], a3);
  }
  return v5;
}

uint64_t ProduceIsAssetAnalysisActiveProperty(dispatch_queue_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t FigBaseObject;
  void (*v7)(uint64_t, const __CFString *, _QWORD, uint64_t);

  v5 = EnsureFormatReaderCreated(a1, a2);
  if (!(_DWORD)v5)
  {
    FigBaseObject = FigFormatReaderGetFigBaseObject(*(_QWORD *)(a2 + 240));
    v7 = *(void (**)(uint64_t, const __CFString *, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
    if (v7)
      v7(FigBaseObject, CFSTR("IsAssetAnalysisActive"), *MEMORY[0x1E0C9AE00], a3);
  }
  return v5;
}

uint64_t ProduceMaximumVideoResolutionProperty(dispatch_queue_t *a1, uint64_t a2, CFDictionaryRef *a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t *);
  int v8;
  CFDictionaryRef v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  CGSize *v13;
  uint64_t v14;
  unsigned int (*v15)(uint64_t, uint64_t, CFTypeRef *, _QWORD, _QWORD);
  uint64_t FigBaseObject;
  unsigned int (*v17)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *);
  uint64_t v18;
  unsigned int (*v19)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *);
  double v20;
  CFDictionaryRef v21;
  CGSize v22;
  CFDictionaryRef dict;
  CFTypeRef cf;
  uint64_t v25;

  v25 = 0;
  result = EnsureFormatReaderCreated(a1, a2);
  if (!(_DWORD)result)
  {
    v6 = *(_QWORD *)(a2 + 240);
    v7 = *(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v7)
    {
      result = v7(v6, &v25);
      if ((_DWORD)result)
        return result;
      if (v25 >= 1)
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        v11 = *MEMORY[0x1E0C9AE00];
        v12 = 0.0;
        v13 = (CGSize *)MEMORY[0x1E0C9D820];
        do
        {
          cf = 0;
          v14 = *(_QWORD *)(a2 + 240);
          v15 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 48);
          if (v15 && !v15(v14, v10, &cf, 0, 0))
          {
            dict = 0;
            v22 = *v13;
            FigBaseObject = FigTrackReaderGetFigBaseObject(cf);
            v17 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
            if (v17 && !v17(FigBaseObject, CFSTR("CleanApertureDimensions"), v11, &dict)
              || (v18 = FigTrackReaderGetFigBaseObject(cf),
                  (v19 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48)) != 0)
              && !v19(v18, CFSTR("TrackDimensions"), v11, &dict))
            {
              if (CGSizeMakeWithDictionaryRepresentation(dict, &v22))
              {
                v20 = v22.width * v22.height;
                if (v22.width * v22.height > v12)
                {
                  v21 = dict;
                  if (dict)
                    CFRetain(dict);
                  if (v9)
                    CFRelease(v9);
                  v8 = 1;
                  v9 = v21;
                  v12 = v20;
                }
              }
            }
            if (dict)
              CFRelease(dict);
          }
          if (cf)
            CFRelease(cf);
          ++v10;
        }
        while (v10 < v25);
        if (v8)
        {
          result = 0;
          *a3 = v9;
          return result;
        }
        if (v9)
          CFRelease(v9);
      }
      return 4294954513;
    }
    else
    {
      return 4294954514;
    }
  }
  return result;
}

uint64_t ProduceAvailableVideoDynamicRangesProperty(dispatch_queue_t *a1, uint64_t a2, CFMutableArrayRef *a3)
{
  uint64_t v6;
  CFMutableArrayRef Mutable;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t *);
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t FigBaseObject;
  unsigned int (*v15)(uint64_t, const __CFString *, uint64_t, CFArrayRef *);
  CFIndex Count;
  unint64_t v17;
  uint64_t v18;
  CFArrayRef theArray;
  CFTypeRef cf;
  uint64_t v22;

  v22 = 0;
  if (a3)
  {
    if (!a2)
    {
      v18 = FigSignalErrorAt();
      goto LABEL_28;
    }
    v6 = *MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (!Mutable)
    {
      v18 = FigSignalErrorAt();
      goto LABEL_29;
    }
    v8 = EnsureFormatReaderCreated(a1, a2);
    if (!(_DWORD)v8)
    {
      v9 = *(_QWORD *)(a2 + 240);
      v10 = *(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (!v10)
      {
        v18 = 4294954514;
LABEL_27:
        CFRelease(Mutable);
LABEL_28:
        Mutable = 0;
LABEL_29:
        *a3 = Mutable;
        return v18;
      }
      v8 = v10(v9, &v22);
      if (!(_DWORD)v8)
      {
        if (v22 >= 1)
        {
          v11 = 0;
          while (1)
          {
            theArray = 0;
            cf = 0;
            v12 = *(_QWORD *)(a2 + 240);
            v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 64);
            if (!v13)
              goto LABEL_20;
            if (v13(v12, v11, 1986618469, &cf, 0))
              goto LABEL_20;
            if (!cf)
              goto LABEL_20;
            FigBaseObject = FigTrackReaderGetFigBaseObject(cf);
            v15 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
            if (!v15 || v15(FigBaseObject, CFSTR("TrackFormatDescriptionArray"), v6, &theArray))
              goto LABEL_20;
            if (theArray)
              break;
LABEL_22:
            if (cf)
              CFRelease(cf);
            if (++v11 >= v22)
              goto LABEL_25;
          }
          Count = CFArrayGetCount(theArray);
          if (Count >= 1)
          {
            v17 = Count + 1;
            do
            {
              if (CFArrayGetValueAtIndex(theArray, v17 - 2))
              {
                CMVideoFormatDescriptionGetVideoDynamicRange();
                FigCFArrayAppendInt32();
              }
              --v17;
            }
            while (v17 > 1);
          }
LABEL_20:
          if (theArray)
            CFRelease(theArray);
          goto LABEL_22;
        }
LABEL_25:
        v18 = 0;
        goto LABEL_29;
      }
    }
    v18 = v8;
    goto LABEL_27;
  }
  return FigSignalErrorAt();
}

uint64_t ProduceNominalVideoFrameRateProperty(dispatch_queue_t *a1, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t *))
{
  uint64_t result;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t *);
  const __CFAllocator *v8;
  uint64_t v9;
  CFTypeRef v10;
  float v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t FigBaseObject;
  unsigned int (*v15)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  CFTypeRef v16;
  uint64_t v17;
  unsigned int (*v18)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  float v19;
  float v20;
  CFNumberRef v21;
  float valuePtr;
  CFTypeRef cf;
  CFTypeRef v24;
  float v25;
  uint64_t v26;

  v26 = 0;
  v25 = 0.0;
  if (a3)
  {
    if (a2)
    {
      result = EnsureFormatReaderCreated(a1, a2);
      if ((_DWORD)result)
        goto LABEL_46;
      v6 = *(_QWORD *)(a2 + 240);
      v7 = *(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (!v7)
      {
        result = 4294954514;
        goto LABEL_43;
      }
      result = v7(v6, &v26);
      if ((_DWORD)result)
      {
LABEL_46:
        v7 = 0;
        goto LABEL_43;
      }
      v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      if (v26 >= 1)
      {
        v9 = 0;
        v10 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
        v11 = 0.0;
        while (1)
        {
          cf = 0;
          v24 = 0;
          v12 = *(_QWORD *)(a2 + 240);
          v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 64);
          if (!v13)
            goto LABEL_33;
          if (v13(v12, v9, 1986618469, &v24, 0))
            goto LABEL_33;
          if (!v24)
            goto LABEL_33;
          FigBaseObject = FigTrackReaderGetFigBaseObject(v24);
          v15 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
          if (!v15 || v15(FigBaseObject, CFSTR("TrackEnabled"), v8, &cf))
            goto LABEL_33;
          v16 = cf;
          if (cf)
          {
            CFRelease(cf);
            cf = 0;
          }
          if (v10 != v16)
            goto LABEL_33;
          valuePtr = 0.0;
          v17 = FigTrackReaderGetFigBaseObject(v24);
          v18 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
          if (!v18)
            goto LABEL_31;
          if (v18(v17, CFSTR("NominalFrameRate"), v8, &cf))
            goto LABEL_31;
          CFNumberGetValue((CFNumberRef)cf, kCFNumberFloatType, &valuePtr);
          v19 = valuePtr;
          if (valuePtr == 0.0)
            goto LABEL_31;
          if (v11 != 0.0)
            break;
          v25 = valuePtr;
          v20 = valuePtr;
LABEL_32:
          v11 = v20;
LABEL_33:
          if (cf)
            CFRelease(cf);
          if (v24)
            CFRelease(v24);
          if (++v9 >= v26)
            goto LABEL_40;
        }
        if (vabds_f32(v11, valuePtr) > 0.01)
        {
          if (v11 <= valuePtr)
            v20 = valuePtr;
          else
            v20 = v11;
          if (v11 < valuePtr)
            v19 = v11;
          if (fabsf(v20 + (float)(v19 * -2.0)) >= 0.01
            && fabsf(v20 + (float)(v19 * -3.0)) >= 0.01
            && fabsf(v20 + (float)(v19 * -4.0)) >= 0.01)
          {
            v25 = 0.0;
            v20 = 0.0;
            v9 = v26;
          }
          else
          {
            v25 = v20;
          }
          goto LABEL_32;
        }
LABEL_31:
        v20 = v11;
        goto LABEL_32;
      }
LABEL_40:
      v21 = CFNumberCreate(v8, kCFNumberFloatType, &v25);
      if (v21)
      {
        v7 = (uint64_t (*)(uint64_t, uint64_t *))v21;
        result = 0;
LABEL_43:
        *a3 = v7;
        return result;
      }
    }
    result = FigSignalErrorAt();
    goto LABEL_46;
  }
  return FigSignalErrorAt();
}

uint64_t ProducemoovAtomSizeProperty(dispatch_queue_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t FigBaseObject;
  void (*v7)(uint64_t, const __CFString *, _QWORD, CFDictionaryRef *);
  const void *Value;
  CFDictionaryRef theDict;

  theDict = 0;
  v5 = EnsureFormatReaderCreated(a1, a2);
  if (!(_DWORD)v5)
  {
    FigBaseObject = FigFormatReaderGetFigBaseObject(*(_QWORD *)(a2 + 240));
    v7 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
    if (v7 && (v7(FigBaseObject, CFSTR("ImportantResourceLocation"), *MEMORY[0x1E0C9AE00], &theDict), theDict))
    {
      Value = CFDictionaryGetValue(theDict, CFSTR("LocationSize"));
      if (Value)
        Value = CFRetain(Value);
      *a3 = Value;
      CFRelease(theDict);
    }
    else
    {
      *a3 = 0;
    }
  }
  return v5;
}

uint64_t ProduceFirstFragmentSequenceNumberProperty(dispatch_queue_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t FigBaseObject;
  void (*v7)(uint64_t, const __CFString *, _QWORD, _QWORD);
  void (*v9)(uint64_t, const __CFString *, _QWORD, _QWORD);

  v9 = 0;
  v5 = EnsureFormatReaderCreated(a1, a2);
  if (!(_DWORD)v5)
  {
    FigBaseObject = FigFormatReaderGetFigBaseObject(*(_QWORD *)(a2 + 240));
    v7 = *(void (**)(uint64_t, const __CFString *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
    if (v7)
    {
      v7(FigBaseObject, CFSTR("FirstFragmentSequenceNumber"), *MEMORY[0x1E0C9AE00], &v9);
      v7 = v9;
    }
    *a3 = v7;
  }
  return v5;
}

uint64_t ProduceFragmentCountProperty(dispatch_queue_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t FigBaseObject;
  void (*v7)(uint64_t, const __CFString *, _QWORD, _QWORD);
  void (*v9)(uint64_t, const __CFString *, _QWORD, _QWORD);

  v9 = 0;
  v5 = EnsureFormatReaderCreated(a1, a2);
  if (!(_DWORD)v5)
  {
    FigBaseObject = FigFormatReaderGetFigBaseObject(*(_QWORD *)(a2 + 240));
    v7 = *(void (**)(uint64_t, const __CFString *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
    if (v7)
    {
      v7(FigBaseObject, CFSTR("FragmentCount"), *MEMORY[0x1E0C9AE00], &v9);
      v7 = v9;
    }
    *a3 = v7;
  }
  return v5;
}

void BuildMetadataFilterDictionaries()
{
  const __CFAllocator *v0;
  const void *SInt32;
  const CFDictionaryKeyCallBacks *v2;
  const CFDictionaryValueCallBacks *v3;
  void *values;
  const __CFString *v5;
  const void *v6;
  void *keys[2];
  const __CFString *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)keys = xmmword_1E2FAD730;
  v8 = CFSTR("key_ostype");
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  SInt32 = (const void *)FigCFNumberCreateSInt32();
  values = CFSTR("udta");
  v5 = CFSTR("meta");
  v6 = SInt32;
  v2 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v3 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  sUserDataiTunesMetadataFilter = (uint64_t)CFDictionaryCreate(v0, (const void **)keys, (const void **)&values, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  values = CFSTR("uiso");
  v5 = CFSTR("meta");
  v6 = SInt32;
  sISOUserDataiTunesMetadataFilter = (uint64_t)CFDictionaryCreate(v0, (const void **)keys, (const void **)&values, 3, v2, v3);
  values = CFSTR("mdta");
  v5 = CFSTR("com.apple.quicktime.aime-data");
  sQuickTimeAIMEDataFilter = (uint64_t)CFDictionaryCreate(v0, (const void **)keys, (const void **)&values, 2, v2, v3);
  if (SInt32)
    CFRelease(SInt32);
}

uint64_t IsNotOnFilterOutKeyList(const __CFDictionary *a1, const __CFArray *a2)
{
  const void *Value;
  const void *v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  const __CFDictionary *ValueAtIndex;
  CFTypeID v10;
  const __CFDictionary *v11;
  const __CFString *v12;

  CFDictionaryGetValue(a1, CFSTR("keyspace"));
  Value = CFDictionaryGetValue(a1, CFSTR("key"));
  if (!a2)
    return 1;
  v5 = Value;
  Count = CFArrayGetCount(a2);
  if (Count < 1)
    return 1;
  v7 = Count;
  v8 = 0;
  while (1)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, v8);
    CFDictionaryGetValue(ValueAtIndex, CFSTR("keyspace"));
    if (FigCFEqual())
    {
      if (v5 && (v10 = CFGetTypeID(v5), v10 == CFNumberGetTypeID()))
      {
        v11 = ValueAtIndex;
        v12 = CFSTR("key_ostype");
      }
      else
      {
        v11 = ValueAtIndex;
        v12 = CFSTR("key_string");
      }
      CFDictionaryGetValue(v11, v12);
      if (FigCFEqual())
        break;
    }
    if (v7 == ++v8)
      return 1;
  }
  return 0;
}

uint64_t WalkEditCursorToNonEmptyEdit(uint64_t a1)
{
  uint64_t (*v2)(uint64_t, _OWORD *);
  uint64_t result;
  uint64_t (*v4)(uint64_t, uint64_t);
  _OWORD v5[6];

  memset(v5, 0, sizeof(v5));
  while (1)
  {
    v2 = *(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (!v2)
      return 4294954514;
    result = v2(a1, v5);
    if ((_DWORD)result)
      return result;
    if ((BYTE12(v5[0]) & 1) != 0)
      break;
    v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (!v4)
      return 4294954514;
    result = v4(a1, 1);
    if ((_DWORD)result)
      return result;
  }
  return 0;
}

uint64_t FigSampleBufferAudioRendererCreateRemoteWithOptions(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *DerivedStorage;
  CFMutableDictionaryRef v7;
  dispatch_queue_t v8;
  uint64_t v9;
  CFTypeRef v10;
  uint64_t v11;
  uint64_t uint64;
  CFTypeRef v14;
  CFDictionaryValueCallBacks valueCallBacks;
  CFTypeRef cf;
  char __str[8];
  uint64_t v18;
  void (*v19)(uint64_t);
  void *v20;
  CFDictionaryValueCallBacks *p_valueCallBacks;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    v4 = 4294950916;
    goto LABEL_13;
  }
  valueCallBacks.version = 0;
  valueCallBacks.retain = (CFDictionaryRetainCallBack)&valueCallBacks;
  valueCallBacks.release = (CFDictionaryReleaseCallBack)0x2000000000;
  LODWORD(valueCallBacks.copyDescription) = 0;
  *(_QWORD *)__str = MEMORY[0x1E0C809B0];
  v18 = 0x40000000;
  v19 = __audioRendererRemote_ensureClientEstablished_block_invoke;
  v20 = &unk_1E2FAD798;
  p_valueCallBacks = &valueCallBacks;
  if (gSBARRemoteClientSetupOnce != -1)
    dispatch_once(&gSBARRemoteClientSetupOnce, __str);
  v4 = *((unsigned int *)valueCallBacks.retain + 6);
  _Block_object_dispose(&valueCallBacks, 8);
  if (!(_DWORD)v4)
  {
    cf = 0;
    memset(&valueCallBacks, 0, sizeof(valueCallBacks));
    FigSampleBufferAudioRendererGetClassID();
    v5 = CMDerivedObjectCreate();
    if ((_DWORD)v5)
    {
      v4 = v5;
    }
    else
    {
      DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
      DerivedStorage[4] = 1;
      valueCallBacks.version = 0;
      valueCallBacks.retain = (CFDictionaryRetainCallBack)audioRendererRemote_cloneCompletionCallbackEntry;
      valueCallBacks.release = (CFDictionaryReleaseCallBack)audioRendererRemote_freeCompletionCallbackEntry;
      valueCallBacks.copyDescription = 0;
      valueCallBacks.equal = 0;
      v7 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, &valueCallBacks);
      DerivedStorage[3] = v7;
      if (v7)
      {
        snprintf(__str, 0x80uLL, "com.apple.coremedia.audiorendererremote.completioncallbacks[%p]", cf);
        v8 = dispatch_queue_create(__str, 0);
        DerivedStorage[2] = v8;
        if (v8)
        {
          v9 = FigSimpleMutexCreate();
          DerivedStorage[5] = v9;
          if (v9)
          {
            v10 = cf;
            v11 = FigXPCCreateBasicMessage();
            if ((_DWORD)v11 || (v11 = FigXPCMessageSetCFDictionary(), (_DWORD)v11))
            {
              v4 = v11;
            }
            else
            {
              v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
              if (!(_DWORD)v4)
              {
                uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E0CA36A0]);
                *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8) = uint64;
                FigXPCRemoteClientAssociateObject();
                *a3 = v10;
                goto LABEL_13;
              }
            }
            if (!v10)
              goto LABEL_13;
            v14 = v10;
LABEL_21:
            CFRelease(v14);
            goto LABEL_13;
          }
        }
      }
      v4 = 4294950914;
    }
    v14 = cf;
    if (!cf)
      goto LABEL_13;
    goto LABEL_21;
  }
LABEL_13:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t audioRendererRemote_getObjectID(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage || *(_BYTE *)(DerivedStorage + 1))
    return FigSignalErrorAt();
  *a2 = *(_QWORD *)(DerivedStorage + 8);
  return 0;
}

uint64_t FigSampleBufferAudioRendererCreateRemoteWithOptionsAndRetry(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unsigned int v6;
  uint64_t result;
  uint64_t v10;

  v10 = 0;
  if (!a3)
    return FigSignalErrorAt();
  v6 = 0;
  do
    result = FigSampleBufferAudioRendererCreateRemoteWithOptions(a1, a2, &v10);
  while (((_DWORD)result == -16155 || (_DWORD)result == -16384) && v6++ < 4);
  if (!(_DWORD)result)
    *a3 = v10;
  return result;
}

void __audioRendererRemote_ensureClientEstablished_block_invoke(uint64_t a1)
{
  __CFDictionary *Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA54A0], CFSTR("ServerConnectionDied"));
  FigRemote_ShouldConnectToMediaparserdForFileParsing();
  FigRemote_ShouldConnectToMediaplaybackd();
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = FigXPCRemoteClientCreate();
  if (Mutable)
    CFRelease(Mutable);
}

_BYTE *audioRendererRemote_deadConnectionCallback()
{
  _BYTE *result;

  result = (_BYTE *)CMBaseObjectGetDerivedStorage();
  *result = 1;
  return result;
}

uint64_t audioRendererRemote_notificationFilter()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
    *(_BYTE *)(DerivedStorage + 1) = 1;
  return 0;
}

uint64_t audioRendererRemote_handleClientMessage()
{
  uint64_t OpCode;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  else
    return 4294951138;
}

void __audioRendererRemote_handleCompletionCallback_block_invoke(uint64_t a1)
{
  const __CFDictionary *v2;
  _QWORD *Value;
  uint64_t v4;
  __int128 v5;
  const void *v6;

  v2 = *(const __CFDictionary **)(*(_QWORD *)(a1 + 40) + 24);
  if (v2)
  {
    Value = CFDictionaryGetValue(v2, *(const void **)(a1 + 48));
    if (Value)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v5 = *(_OWORD *)Value;
      *(_QWORD *)(v4 + 40) = Value[2];
      *(_OWORD *)(v4 + 24) = v5;
      v6 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      if (v6)
        CFRetain(v6);
    }
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(*(_QWORD *)(a1 + 40) + 24), *(const void **)(a1 + 48));
  }
}

_QWORD *audioRendererRemote_cloneCompletionCallbackEntry(const __CFAllocator *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = CFAllocatorAllocate(a1, 24, 0);
  v4 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v3 = *(_OWORD *)a2;
  v3[2] = v4;
  if (*v3)
    CFRetain((CFTypeRef)*v3);
  return v3;
}

void audioRendererRemote_freeCompletionCallbackEntry(CFAllocatorRef allocator, CFTypeRef *ptr)
{
  if (*ptr)
    CFRelease(*ptr);
  CFAllocatorDeallocate(allocator, ptr);
}

uint64_t audioRendererRemote_Finalize()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  const void *v2;
  const void *v3;
  NSObject *v4;
  const void *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(_QWORD *)(DerivedStorage + 8);
  FigSimpleMutexDestroy();
  v2 = *(const void **)(DerivedStorage + 56);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 56) = 0;
  }
  v3 = *(const void **)(DerivedStorage + 64);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 64) = 0;
  }
  v4 = *(NSObject **)(DerivedStorage + 16);
  if (v4)
  {
    dispatch_release(v4);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 24);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  if (v1)
  {
    FigXPCRemoteClientDisassociateObject();
    if (!*(_BYTE *)DerivedStorage && !FigXPCCreateBasicMessage())
      FigXPCRemoteClientSendSyncMessage();
  }
  FigXPCRelease();
  return FigXPCRemoteClientKillServerOnTimeout();
}

__CFString *audioRendererRemote_CopyDebugDesc(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;
  CFAllocatorRef v6;
  const char *v7;
  const char *v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(a1);
  v6 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigSampleBufferAudioRendererRemote=%p retainCount=%d allocator=%p"), a1, v5, v6);
  CFStringAppendFormat(Mutable, 0, CFSTR(" objectID=%lld"), *(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)DerivedStorage)
    v7 = "yes";
  else
    v7 = "no";
  CFStringAppendFormat(Mutable, 0, CFSTR(" serverDied=%s"), v7);
  if (*(_BYTE *)(DerivedStorage + 1))
    v8 = "yes";
  else
    v8 = "no";
  CFStringAppendFormat(Mutable, 0, CFSTR(" dependencyLost=%s"), v8);
  CFStringAppendFormat(Mutable, 0, CFSTR(">"));
  return Mutable;
}

uint64_t audioRendererRemote_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t ObjectID;
  uint64_t v6;
  uint64_t v8;

  v8 = 0;
  ObjectID = audioRendererRemote_getObjectID(a1, &v8);
  if (!(_DWORD)ObjectID)
    ObjectID = FigXPCSendStdCopyPropertyMessage();
  v6 = ObjectID;
  if (a4)
    *a4 = 0;
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t audioRendererRemote_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectID;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  xpc_object_t xdict;
  uint64_t value;
  uint64_t v12;

  v9 = 0;
  if (FigCFEqual())
  {
    value = 0;
    v12 = 0;
    xdict = 0;
    ObjectID = audioRendererRemote_getObjectID(a1, &v12);
    if ((_DWORD)ObjectID || a3 && (ObjectID = MTAudioProcessingTapXPCRemoteGetObjectID(a3, &value), (_DWORD)ObjectID))
    {
      v6 = ObjectID;
    }
    else
    {
      v6 = FigXPCCreateBasicMessage();
      if (!(_DWORD)v6)
      {
        xpc_dictionary_set_uint64(xdict, "audioProcessingTapID", value);
        v6 = FigXPCRemoteClientSendSyncMessage();
      }
    }
    FigXPCRelease();
    FigXPCRemoteClientKillServerOnTimeout();
  }
  else
  {
    v7 = audioRendererRemote_getObjectID(a1, &v9);
    if (!(_DWORD)v7)
      v7 = FigXPCSendStdSetPropertyMessage();
    v6 = v7;
  }
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

BOOL audioRendererRemote_QueueIsAboveHighWaterLevel(uint64_t a1)
{
  _BOOL8 v2;
  uint64_t v4;

  CMBaseObjectGetDerivedStorage();
  v4 = 0;
  v2 = audioRendererRemote_getObjectID(a1, &v4)
    || FigXPCCreateBasicMessage()
    || FigXPCRemoteClientSendSyncMessageCreatingReply()
    || xpc_dictionary_get_BOOL(0, "isAboveHighWaterResponse");
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

const void *audioRendererRemote_EnqueueSampleBuffer(uint64_t a1)
{
  _QWORD *DerivedStorage;
  uint64_t ObjectID;
  CFTypeRef v4;
  CFTypeRef v5;
  uint64_t SerializedAtomDataForSampleBuffer;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  CFTypeRef cf;
  CFTypeRef v13;
  uint64_t v14;
  uint64_t v15;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v15 = 0;
  v13 = 0;
  cf = 0;
  ObjectID = audioRendererRemote_getObjectID(a1, &v15);
  if (!(_DWORD)ObjectID)
  {
    ObjectID = FigXPCCreateBasicMessage();
    if (!(_DWORD)ObjectID)
    {
      MEMORY[0x19402EEEC](DerivedStorage[5]);
      v4 = (CFTypeRef)DerivedStorage[7];
      v14 = DerivedStorage[6];
      if (v4)
        v4 = CFRetain(v4);
      v13 = v4;
      v5 = (CFTypeRef)DerivedStorage[8];
      if (v5)
        v5 = CFRetain(v5);
      cf = v5;
      SerializedAtomDataForSampleBuffer = FigRemote_CreateSerializedAtomDataForSampleBuffer();
      if ((_DWORD)SerializedAtomDataForSampleBuffer
        || (SerializedAtomDataForSampleBuffer = FigXPCMessageSetAndConsumeVMData(),
            (_DWORD)SerializedAtomDataForSampleBuffer))
      {
        v7 = (const void *)SerializedAtomDataForSampleBuffer;
      }
      else
      {
        v7 = (const void *)FigXPCRemoteClientSendSyncMessage();
        if (!(_DWORD)v7)
        {
          v10 = (const void *)DerivedStorage[7];
          DerivedStorage[6] = (v14 + *MEMORY[0x1E0C85AD8] - 1) & -*MEMORY[0x1E0C85AD8];
          DerivedStorage[7] = v13;
          if (v13)
            CFRetain(v13);
          if (v10)
            CFRelease(v10);
          v7 = (const void *)DerivedStorage[8];
          DerivedStorage[8] = cf;
          if (cf)
            CFRetain(cf);
          if (v7)
          {
            CFRelease(v7);
            v7 = 0;
          }
          goto LABEL_22;
        }
      }
      DerivedStorage[6] = 0;
      v8 = (const void *)DerivedStorage[7];
      if (v8)
      {
        CFRelease(v8);
        DerivedStorage[7] = 0;
      }
      v9 = (const void *)DerivedStorage[8];
      if (v9)
      {
        CFRelease(v9);
        DerivedStorage[8] = 0;
      }
LABEL_22:
      MEMORY[0x19402EF04](DerivedStorage[5]);
      goto LABEL_23;
    }
  }
  v7 = (const void *)ObjectID;
LABEL_23:
  FigXPCRelease();
  if (v13)
    CFRelease(v13);
  if (cf)
    CFRelease(cf);
  FigXPCRemoteClientKillServerOnTimeout();
  return v7;
}

uint64_t audioRendererRemote_Flush(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  CMBaseObjectGetDerivedStorage();
  v6 = 0;
  ObjectID = audioRendererRemote_getObjectID(a1, &v6);
  if ((_DWORD)ObjectID)
  {
    v4 = ObjectID;
  }
  else
  {
    v3 = FigXPCCreateBasicMessage();
    if ((_DWORD)v3)
      v4 = v3;
    else
      v4 = FigXPCRemoteClientSendSyncMessage();
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t audioRendererRemote_FlushFromMediaTime(const void *a1, __int128 *a2, void (*a3)(_QWORD, _QWORD), uint64_t a4)
{
  uint64_t ObjectID;
  uint64_t v9;
  uint64_t DerivedStorage;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v19;
  _QWORD v20[10];
  __int128 block;
  void (*v22)(_QWORD *);
  void *v23;
  uint64_t *v24;
  const void *v25;
  uint64_t v26;
  const void *v27;
  void (*v28)(_QWORD, _QWORD);
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  CMBaseObjectGetDerivedStorage();
  v19 = 0;
  ObjectID = audioRendererRemote_getObjectID((uint64_t)a1, &v19);
  if ((_DWORD)ObjectID)
  {
    v16 = ObjectID;
  }
  else
  {
    v9 = FigXPCCreateBasicMessage();
    if ((_DWORD)v9
      || (block = *a2,
          v22 = (void (*)(_QWORD *))*((_QWORD *)a2 + 2),
          v9 = FigXPCMessageSetCMTime(),
          (_DWORD)v9))
    {
      v16 = v9;
    }
    else
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v11 = DerivedStorage;
      v34 = 0;
      v35 = &v34;
      v36 = 0x2000000000;
      v37 = 0;
      v30 = 0;
      v31 = &v30;
      v32 = 0x2000000000;
      v33 = 0;
      v12 = MEMORY[0x1E0C809B0];
      if (a3)
      {
        v13 = *(NSObject **)(DerivedStorage + 16);
        *(_QWORD *)&block = MEMORY[0x1E0C809B0];
        *((_QWORD *)&block + 1) = 0x40000000;
        v22 = __audioRendererRemote_sendMessageSynchronouslyExpectingCompletionCallback_block_invoke;
        v23 = &unk_1E2FAD8A8;
        v24 = &v34;
        v25 = a1;
        v26 = v11;
        v27 = a1;
        v28 = a3;
        v29 = a4;
        dispatch_sync(v13, &block);
        xpc_dictionary_set_uint64(0, "completionID", v35[3]);
        v14 = a4;
      }
      else
      {
        a1 = 0;
        v14 = 0;
      }
      v15 = FigXPCRemoteClientSendSyncMessage();
      v16 = v15;
      if (a3 && (_DWORD)v15)
      {
        v17 = *(NSObject **)(v11 + 16);
        v20[0] = v12;
        v20[1] = 0x40000000;
        v20[2] = __audioRendererRemote_sendMessageSynchronouslyExpectingCompletionCallback_block_invoke_2;
        v20[3] = &unk_1E2FAD8D0;
        v20[6] = v11;
        v20[7] = a1;
        v20[8] = a3;
        v20[9] = v14;
        v20[4] = &v34;
        v20[5] = &v30;
        dispatch_sync(v17, v20);
      }
      if (*((_BYTE *)v31 + 24))
      {
        if (a3)
          a3(v16, a4);
        if (a1)
          CFRelease(a1);
      }
      FigXPCRemoteClientKillServerOnTimeout();
      _Block_object_dispose(&v30, 8);
      _Block_object_dispose(&v34, 8);
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v16;
}

void __audioRendererRemote_sendMessageSynchronouslyExpectingCompletionCallback_block_invoke(_QWORD *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  __CFDictionary *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(_QWORD *)(DerivedStorage + 32);
  v4 = 1;
  if ((unint64_t)(v3 + 1) > 1)
    v4 = v3 + 1;
  *(_QWORD *)(DerivedStorage + 32) = v4;
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v3;
  v5 = *(__CFDictionary **)(a1[6] + 24);
  if (v5)
    CFDictionarySetValue(v5, *(const void **)(*(_QWORD *)(a1[4] + 8) + 24), a1 + 7);
}

void __audioRendererRemote_sendMessageSynchronouslyExpectingCompletionCallback_block_invoke_2(_QWORD *a1)
{
  const __CFDictionary *v2;
  const void *v3;

  v2 = *(const __CFDictionary **)(a1[6] + 24);
  if (v2)
  {
    if (CFDictionaryGetValueIfPresent(v2, *(const void **)(*(_QWORD *)(a1[4] + 8) + 24), 0))
    {
      v3 = (const void *)a1[7];
      if (v3)
        CFRetain(v3);
      *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 1;
    }
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1[6] + 24), *(const void **)(*(_QWORD *)(a1[4] + 8) + 24));
  }
}

uint64_t FigVideoQueueCreateLocal(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  dispatch_source_t v10;
  NSObject *v11;
  dispatch_time_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const __CFAllocator *v16;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v18;
  int AdoptedVoucherProcessIDAndUUIDString;
  uint64_t v20;
  const __CFUUID *v21;
  NSObject *v22;
  uint64_t v23;
  CMTime v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  FPSupport_CheckPlayerPerformanceTrace();
  FigVideoQueueGetClassID();
  v3 = CMDerivedObjectCreate();
  if ((_DWORD)v3)
    return v3;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A32E8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v6 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  *(_QWORD *)(DerivedStorage + 8) = v6;
  if (!v6)
    return FigSignalErrorAt();
  v7 = FigReentrantMutexCreate();
  *(_QWORD *)(DerivedStorage + 408) = v7;
  if (!v7)
    return FigSignalErrorAt();
  CMTimeMake(&v25, 1, 1);
  *(CMTime *)(DerivedStorage + 416) = v25;
  CMTimeMake(&v25, 2, 1);
  *(CMTime *)(DerivedStorage + 440) = v25;
  *(_DWORD *)(DerivedStorage + 464) = 0;
  *(_QWORD *)(DerivedStorage + 488) = 0;
  *(_QWORD *)(DerivedStorage + 496) = 0;
  *(_QWORD *)(DerivedStorage + 504) = 6000000000;
  *(_BYTE *)(DerivedStorage + 401) = 0;
  *(_QWORD *)(DerivedStorage + 520) = dispatch_queue_create("com.apple.coremedia.videoqueue.notification", 0);
  *(_QWORD *)(DerivedStorage + 528) = dispatch_queue_create("com.apple.coremedia.videoqueue.cryptor", 0);
  v8 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  if (!v8)
    return FigSignalErrorAt();
  v9 = (void *)v8;
  v10 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(DerivedStorage + 520));
  *(_QWORD *)(DerivedStorage + 512) = v10;
  if (!v10)
    return FigSignalErrorAt();
  v11 = v10;
  v12 = dispatch_time(0, *(_QWORD *)(DerivedStorage + 504));
  dispatch_source_set_timer(v11, v12, *(_QWORD *)(DerivedStorage + 504), 0);
  dispatch_set_context(*(dispatch_object_t *)(DerivedStorage + 512), v9);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(DerivedStorage + 512), (dispatch_function_t)FigVideoQueueGMStats);
  dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(DerivedStorage + 512), (dispatch_function_t)vq_handleGMStatsTimerCancellation);
  dispatch_activate(*(dispatch_object_t *)(DerivedStorage + 512));
  *(_BYTE *)(DerivedStorage + 239) = 1;
  v13 = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 240) = v13;
  if (!v13)
    return FigSignalErrorAt();
  v14 = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 616) = v14;
  if (!v14)
    return FigSignalErrorAt();
  *(_BYTE *)(DerivedStorage + 629) = 1;
  v15 = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 304) = v15;
  if (!v15)
    return FigSignalErrorAt();
  v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(DerivedStorage + 296) = Mutable;
  if (!Mutable)
    return FigSignalErrorAt();
  *(_BYTE *)(DerivedStorage + 312) = 0;
  v18 = CFArrayCreateMutable(v16, 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(DerivedStorage + 320) = v18;
  if (!v18)
    return FigSignalErrorAt();
  AdoptedVoucherProcessIDAndUUIDString = FigDebugGetAdoptedVoucherProcessIDAndUUIDString();
  if (AdoptedVoucherProcessIDAndUUIDString <= 0)
    AdoptedVoucherProcessIDAndUUIDString = getpid();
  *(_DWORD *)(DerivedStorage + 624) = AdoptedVoucherProcessIDAndUUIDString;
  v20 = FigDispatchQueueCreateWithPriority();
  *(_QWORD *)(DerivedStorage + 576) = v20;
  if (!v20)
    return FigSignalErrorAt();
  *(_BYTE *)(DerivedStorage + 584) = 1;
  *(_QWORD *)(DerivedStorage + 600) = 0;
  v21 = CFUUIDCreate(v16);
  *(_QWORD *)(DerivedStorage + 560) = CFUUIDCreateString(v16, v21);
  if (v21)
    CFRelease(v21);
  if (dword_1EE2A32E8)
  {
    v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v23 = 0;
  *a2 = 0;
  return v23;
}

void FigVideoQueueGMStats()
{
  uint64_t v0;
  const void *v1;
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  os_log_type_t type;
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    v1 = (const void *)v0;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (dword_1EE2A32E8)
    {
      v5 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *(_QWORD *)(DerivedStorage + 488) = 0;
    *(_QWORD *)(DerivedStorage + 496) = 0;
    CFRelease(v1);
  }
}

void vq_handleGMStatsTimerCancellation(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t vq_Invalidate(const void *a1)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  opaqueCMBufferQueueTriggerToken *v4;
  opaqueCMBufferQueueTriggerToken *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  _QWORD *v9;
  const void *DefaultLocalCenter;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t FigBaseObject;
  uint64_t v15;
  void (*v16)(uint64_t);
  opaqueCMBufferQueue *v17;
  CFIndex i;
  const __CFArray *Count;
  const void *ValueAtIndex;
  void (*v21)(const void *);
  CFIndex j;
  const __CFArray *v23;
  CFArrayRef *v24;
  CFIndex v25;
  const __CFArray *v26;
  const __CFAllocator *v27;
  CFIndex v28;
  CFIndex k;
  const void *v30;
  CFTypeRef v31;
  void (*v32)(const void *, CFTypeRef);
  const void *v33;
  const void *v34;
  const void *v35;
  const void *v36;
  const void *v37;
  const void *v38;
  CFTypeRef block[17];

  block[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigAtomicCompareAndSwap32())
  {
    if (dword_1EE2A32E8)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v4 = *(opaqueCMBufferQueueTriggerToken **)(DerivedStorage + 480);
    if (v4)
    {
      CMBufferQueueRemoveTrigger(*(CMBufferQueueRef *)(DerivedStorage + 368), v4);
      *(_QWORD *)(DerivedStorage + 480) = 0;
    }
    v5 = *(opaqueCMBufferQueueTriggerToken **)(DerivedStorage + 472);
    if (v5)
    {
      CMBufferQueueRemoveTrigger(*(CMBufferQueueRef *)(DerivedStorage + 368), v5);
      *(_QWORD *)(DerivedStorage + 472) = 0;
    }
    v6 = *(NSObject **)(DerivedStorage + 512);
    if (v6)
    {
      dispatch_source_cancel(v6);
      v7 = *(NSObject **)(DerivedStorage + 512);
      if (v7)
      {
        dispatch_release(v7);
        *(_QWORD *)(DerivedStorage + 512) = 0;
      }
    }
    v8 = *(NSObject **)(DerivedStorage + 520);
    if (v8 && v8 != dispatch_get_current_queue())
      dispatch_sync(v8, &__block_literal_global_82);
    v9 = (_QWORD *)CMBaseObjectGetDerivedStorage();
    DefaultLocalCenter = (const void *)CMNotificationCenterGetDefaultLocalCenter();
    if (v9[45])
    {
      FigNotificationCenterRemoveWeakListener();
      FigNotificationCenterRemoveWeakListener();
      FigNotificationCenterRemoveWeakListener();
      FigNotificationCenterRemoveWeakListener();
      FigNotificationCenterRemoveWeakListener();
      FigNotificationCenterRemoveWeakListener();
    }
    v11 = v9[66];
    block[0] = (CFTypeRef)MEMORY[0x1E0C809B0];
    block[1] = (CFTypeRef)3221225472;
    block[2] = __vq_removeListeners_block_invoke;
    block[3] = &__block_descriptor_56_e5_v8__0l;
    block[4] = v9;
    block[5] = DefaultLocalCenter;
    block[6] = a1;
    dispatch_sync(v11, block);
    FigStopForwardingMediaServicesProcessDeathNotification();
    vq_removeTimebaseListeners();
    v12 = *(NSObject **)(DerivedStorage + 528);
    if (v12 && v12 != dispatch_get_current_queue())
      dispatch_sync(v12, &__block_literal_global_9_1);
    v13 = *(_QWORD *)(DerivedStorage + 360);
    if (v13)
    {
      FigBaseObject = FigRenderPipelineGetFigBaseObject(v13);
      if (FigBaseObject)
      {
        v15 = FigBaseObject;
        v16 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
        if (v16)
          v16(v15);
      }
    }
    v17 = *(opaqueCMBufferQueue **)(DerivedStorage + 368);
    if (v17)
      CMBufferQueueReset(v17);
    if (*(_QWORD *)(DerivedStorage + 48))
      CAImageQueueFlush();
    for (i = 0; ; ++i)
    {
      Count = *(const __CFArray **)(DerivedStorage + 280);
      if (Count)
        Count = (const __CFArray *)CFArrayGetCount(Count);
      if (i >= (uint64_t)Count)
        break;
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 280), i);
      v21 = *(void (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v21)
        v21(ValueAtIndex);
    }
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 304));
    for (j = 0; ; ++j)
    {
      v23 = *(const __CFArray **)(DerivedStorage + 296);
      if (v23)
        v23 = (const __CFArray *)CFArrayGetCount(v23);
      if (j >= (uint64_t)v23)
        break;
      v24 = (CFArrayRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 296), j);
      if (CFArrayGetCount(v24[3]) >= 1)
      {
        v25 = 0;
        do
        {
          block[0] = 0;
          VideoTargetInfoCopyCAImageQueueAtIndex((uint64_t)v24, v25, (uint64_t)block);
          if (block[0])
          {
            CAImageQueueFlush();
            CFRelease(block[0]);
          }
          ++v25;
        }
        while (v25 < CFArrayGetCount(v24[3]));
      }
    }
    block[0] = 0;
    v26 = *(const __CFArray **)(CMBaseObjectGetDerivedStorage() + 288);
    v27 = CFGetAllocator(a1);
    if (!FigDataChannelConfigurationCreate(v27, 0, (uint64_t *)block))
    {
      v28 = 0;
      if (!v26)
        goto LABEL_47;
LABEL_46:
      for (k = CFArrayGetCount(v26); v28 < k; k = 0)
      {
        v30 = CFArrayGetValueAtIndex(v26, v28);
        v31 = block[0];
        v32 = *(void (**)(const void *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
        if (v32)
          v32(v30, v31);
        ++v28;
        if (v26)
          goto LABEL_46;
LABEL_47:
        ;
      }
    }
    if (block[0])
      CFRelease(block[0]);
    FigCFArrayRemoveAllValues();
    FigCFArrayRemoveAllValues();
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 304));
    v33 = *(const void **)(DerivedStorage + 256);
    if (v33)
    {
      FigSyncMomentSourceDestroy(v33);
      *(_QWORD *)(DerivedStorage + 256) = 0;
    }
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 240));
    v34 = *(const void **)(DerivedStorage + 248);
    if (v34)
    {
      CFRelease(v34);
      *(_QWORD *)(DerivedStorage + 248) = 0;
    }
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 240));
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 616));
    v35 = *(const void **)(DerivedStorage + 608);
    if (v35)
    {
      CFRelease(v35);
      *(_QWORD *)(DerivedStorage + 608) = 0;
    }
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 616));
    v36 = *(const void **)(DerivedStorage + 640);
    if (v36)
    {
      CFRelease(v36);
      *(_QWORD *)(DerivedStorage + 640) = 0;
    }
    v37 = *(const void **)(DerivedStorage + 648);
    if (v37)
    {
      CFRelease(v37);
      *(_QWORD *)(DerivedStorage + 648) = 0;
    }
    v38 = *(const void **)(DerivedStorage + 560);
    if (v38)
    {
      CFRelease(v38);
      *(_QWORD *)(DerivedStorage + 560) = 0;
    }
  }
  return 0;
}

void vq_Finalize(const void *a1)
{
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  const void *v7;
  const void *v8;
  NSObject *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  NSObject *v24;
  const void *v25;
  CFTypeRef cf[17];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  vq_Invalidate(a1);
  cf[0] = 0;
  v4 = CMBaseObjectGetDerivedStorage();
  if (!FigDeferredTransactionCreate(*MEMORY[0x1E0C9AE00], (uint64_t *)cf))
  {
    FPSupport_AppendDeferredTransactionChangeToRelease(cf[0], *(_QWORD *)(v4 + 40), (uint64_t)"vq_removeVideoLayer");
    *(_QWORD *)(v4 + 40) = 0;
    FPSupport_AppendDeferredTransactionChangeToClearContentsAndRemoveFromSuperLayer(cf[0], *(void **)(v4 + 24), (uint64_t)"vq_removeVideoLayer");

    *(_QWORD *)(v4 + 24) = 0;
    FPSupport_AppendDeferredTransactionChangeToClearContentsAndRemoveFromSuperLayer(cf[0], *(void **)(v4 + 16), (uint64_t)"vq_removeVideoLayer");

    *(_QWORD *)(v4 + 16) = 0;
    FPSupport_AppendDeferredTransactionChangeToRelease(cf[0], *(_QWORD *)(v4 + 64), (uint64_t)"vq_removeVideoLayer");
    *(_QWORD *)(v4 + 64) = 0;
    FPSupport_AppendDeferredTransactionChangeToRelease(cf[0], *(_QWORD *)(v4 + 48), (uint64_t)"vq_removeVideoLayer");
    *(_QWORD *)(v4 + 48) = 0;
    v5 = FigOSTransactionCreate();
    FPSupport_AppendDeferredTransactionChangeToReleaseOSTransaction((uint64_t)cf[0], v5, (uint64_t)"vq_removeVideoLayer");
    FigDeferredTransactionCommit((uint64_t)cf[0]);
  }
  if (cf[0])
    CFRelease(cf[0]);
  FigSimpleMutexDestroy();
  DerivedStorage[51] = 0;
  if (DerivedStorage[30])
  {
    FigSimpleMutexDestroy();
    DerivedStorage[30] = 0;
  }
  if (DerivedStorage[77])
  {
    FigSimpleMutexDestroy();
    DerivedStorage[77] = 0;
  }
  v6 = DerivedStorage[65];
  if (v6)
  {
    dispatch_release(v6);
    DerivedStorage[65] = 0;
  }
  v7 = (const void *)DerivedStorage[47];
  if (v7)
  {
    CFRelease(v7);
    DerivedStorage[47] = 0;
  }
  v8 = (const void *)DerivedStorage[79];
  if (v8)
  {
    CFRelease(v8);
    DerivedStorage[79] = 0;
  }
  v9 = DerivedStorage[66];
  if (v9)
  {
    dispatch_release(v9);
    DerivedStorage[66] = 0;
  }
  v10 = (const void *)DerivedStorage[43];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[43] = 0;
  }
  v11 = (const void *)DerivedStorage[44];
  if (v11)
  {
    CFRelease(v11);
    DerivedStorage[44] = 0;
  }
  v12 = (const void *)DerivedStorage[45];
  if (v12)
  {
    CFRelease(v12);
    DerivedStorage[45] = 0;
  }
  v13 = (const void *)DerivedStorage[46];
  if (v13)
  {
    CFRelease(v13);
    DerivedStorage[46] = 0;
  }
  v14 = (const void *)DerivedStorage[49];
  if (v14)
  {
    CFRelease(v14);
    DerivedStorage[49] = 0;
  }
  v15 = (const void *)DerivedStorage[69];
  if (v15)
  {
    CFRelease(v15);
    DerivedStorage[69] = 0;
  }
  v16 = (const void *)DerivedStorage[1];
  if (v16)
  {
    CFRelease(v16);
    DerivedStorage[1] = 0;
  }
  v17 = (const void *)DerivedStorage[7];
  if (v17)
  {
    CFRelease(v17);
    DerivedStorage[7] = 0;
  }
  v18 = (const void *)DerivedStorage[33];
  if (v18)
  {
    CFRelease(v18);
    DerivedStorage[33] = 0;
  }
  v19 = (const void *)DerivedStorage[34];
  if (v19)
  {
    CFRelease(v19);
    DerivedStorage[34] = 0;
  }
  v20 = (const void *)DerivedStorage[35];
  if (v20)
  {
    CFRelease(v20);
    DerivedStorage[35] = 0;
  }
  v21 = (const void *)DerivedStorage[36];
  if (v21)
  {
    CFRelease(v21);
    DerivedStorage[36] = 0;
  }
  v22 = (const void *)DerivedStorage[37];
  if (v22)
  {
    CFRelease(v22);
    DerivedStorage[37] = 0;
  }
  FigSimpleMutexDestroy();
  DerivedStorage[38] = 0;
  v23 = (const void *)DerivedStorage[40];
  if (v23)
  {
    CFRelease(v23);
    DerivedStorage[40] = 0;
  }
  v24 = DerivedStorage[72];
  if (v24)
  {
    dispatch_release(v24);
    DerivedStorage[72] = 0;
  }
  v25 = (const void *)DerivedStorage[74];
  if (v25)
  {
    CFRelease(v25);
    DerivedStorage[74] = 0;
  }
}

__CFString *vq_CopyDebugDesc(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;
  const char *v6;
  CFAllocatorRef v7;
  CFIndex i;
  const __CFArray *Count;
  const void *ValueAtIndex;
  _QWORD *v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(a1);
  if (*(_DWORD *)DerivedStorage)
    v6 = " (invalidated)";
  else
    v6 = "";
  v7 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigVideoQueue %p retainCount: %ld%s allocator: %p, "), a1, v5, v6, v7);
  CFStringAppendFormat(Mutable, 0, CFSTR("videoRenderPipeline %@\n"), *(_QWORD *)(DerivedStorage + 360));
  CFStringAppendFormat(Mutable, 0, CFSTR("Layer Image Queue %@, CAImageQueue %@\n"), *(_QWORD *)(DerivedStorage + 56), *(_QWORD *)(DerivedStorage + 48));
  CFStringAppendFormat(Mutable, 0, CFSTR("VisualContextArray %@, ImageQueueArray %@\n"), *(_QWORD *)(DerivedStorage + 264), *(_QWORD *)(DerivedStorage + 280));
  for (i = 0; ; ++i)
  {
    Count = *(const __CFArray **)(DerivedStorage + 288);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (i >= (uint64_t)Count)
      break;
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 288), i);
    v11 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 296), i);
    CFStringAppendFormat(Mutable, 0, CFSTR("VideoTarget %@, ImageQueues %@\n"), ValueAtIndex, v11[3]);
  }
  CFStringAppendFormat(Mutable, 0, CFSTR(">"));
  return Mutable;
}

uint64_t vq_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CVPixelBufferRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  void *v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *v12;
  int v13;
  CFTypeRef *v14;
  uint64_t v16;
  int v17;
  CFTypeRef v18;
  __CVBuffer *v19;
  NSObject *v20;
  CFTypeRef *v21;
  CFTypeRef *v22;
  CFTypeRef *v23;
  uint64_t v24;
  CFTypeRef *v25;
  uint64_t *v26;
  int v27;
  _BOOL4 isImageQueueBeingServiced;
  CFTypeRef *v29;
  char Flags;
  CFTypeRef *v31;
  CFTypeRef *v32;
  _QWORD block[8];
  os_log_type_t type;
  int v35;
  int valuePtr;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  CFTypeRef cf[17];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v37 = 0;
  v38 = &v37;
  v39 = 0x2020000000;
  v40 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_DWORD *)DerivedStorage)
  {
    if (CFEqual(a2, CFSTR("VideoQueue_CAContextID")))
    {
      if (*(_QWORD *)(DerivedStorage + 64))
      {
        v10 = (void *)MEMORY[0x19403137C]();
        valuePtr = objc_msgSend(*(id *)(DerivedStorage + 64), "contextId");
        objc_autoreleasePoolPop(v10);
        *a4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
        if (dword_1EE2A32E8)
        {
          v35 = 0;
          type = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        goto LABEL_24;
      }
      goto LABEL_10;
    }
    if (CFEqual(a2, CFSTR("VisualContextArray")))
    {
      v12 = *(void **)(DerivedStorage + 264);
      if (v12)
        goto LABEL_22;
    }
    else if (CFEqual(a2, CFSTR("VisualContextArrayOptions")))
    {
      v12 = *(void **)(DerivedStorage + 272);
      if (v12)
        goto LABEL_22;
    }
    else
    {
      if (!CFEqual(a2, CFSTR("VideoTargetArray")))
      {
        if (CFEqual(a2, CFSTR("ShouldWaitForVideoTarget")))
        {
          v14 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
          if (!*(_BYTE *)(DerivedStorage + 312))
            v14 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
          v12 = (void *)*v14;
          if (!*v14)
            goto LABEL_23;
          goto LABEL_22;
        }
        if (CFEqual(a2, CFSTR("CurrentDisplayedVideoFrameRate")))
        {
          v16 = *(_QWORD *)(DerivedStorage + 360);
          if (v16)
          {
            v13 = FigRenderPipelineCopyProperty(v16, (uint64_t)CFSTR("CurrentVideoFrameRate"), (uint64_t)a3, (uint64_t)a4);
            goto LABEL_11;
          }
        }
        else
        {
          if (!CFEqual(a2, CFSTR("PerformanceDictionary")))
          {
            if (CFEqual(a2, CFSTR("VideoQueue_ControlTimebase")))
            {
              v12 = *(void **)(DerivedStorage + 552);
              if (!v12)
                goto LABEL_23;
              goto LABEL_22;
            }
            if (CFEqual(a2, CFSTR("VideoQueue_SupportsRotation")))
            {
              v12 = (void *)CFRetain((CFTypeRef)*MEMORY[0x1E0C9AE50]);
              goto LABEL_23;
            }
            if (CFEqual(a2, CFSTR("ExternalProtectionStatus")))
            {
              v20 = *(NSObject **)(DerivedStorage + 528);
              block[0] = MEMORY[0x1E0C809B0];
              block[1] = 3221225472;
              block[2] = __vq_CopyProperty_block_invoke;
              block[3] = &unk_1E2F991F0;
              block[4] = &v37;
              block[5] = DerivedStorage;
              block[6] = a4;
              block[7] = a3;
              dispatch_sync(v20, block);
              goto LABEL_24;
            }
            if (CFEqual(a2, CFSTR("ForceFullPowerDecode")))
            {
              v21 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
              if (!*(_BYTE *)(DerivedStorage + 400))
                v21 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
              v12 = (void *)*v21;
              if (!*v21)
                goto LABEL_23;
              goto LABEL_22;
            }
            if (CFEqual(a2, CFSTR("PreventsCapture")))
            {
              v22 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
              if (!*(_BYTE *)(DerivedStorage + 337))
                v22 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
              v12 = (void *)*v22;
              if (!*v22)
                goto LABEL_23;
              goto LABEL_22;
            }
            if (CFEqual(a2, CFSTR("ToneMapToStandardDynamicRange")))
            {
              v23 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
              if (!*(_BYTE *)(DerivedStorage + 236))
                v23 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
              v12 = (void *)*v23;
              if (!*v23)
                goto LABEL_23;
              goto LABEL_22;
            }
            if (CFEqual(a2, CFSTR("CurrentlyDisplayedCVPixelBuffer")))
            {
              v24 = *(_QWORD *)(DerivedStorage + 48);
              if (v24)
              {
                v13 = FigVideoQueue_CopyCurrentlyDisplayedPixelBufferFromCAImageQueue(v24, a3, a4);
                goto LABEL_11;
              }
              *a4 = 0;
              v26 = v38;
              v27 = -12080;
            }
            else
            {
              if (CFEqual(a2, CFSTR("DisallowVideoLayerDisplayCompositing")))
              {
                v25 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
                if (!*(_BYTE *)(DerivedStorage + 238))
                  v25 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
                v12 = (void *)*v25;
                if (!*v25)
                  goto LABEL_23;
                goto LABEL_22;
              }
              if (CFEqual(a2, CFSTR("IsImageQueueBeingServiced")))
              {
                isImageQueueBeingServiced = vq_isImageQueueBeingServiced();
                v29 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
                if (!isImageQueueBeingServiced)
                  v29 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
                v12 = (void *)*v29;
                if (!*v29)
                  goto LABEL_23;
                goto LABEL_22;
              }
              if (CFEqual(a2, CFSTR("IsImageQueueAsync")))
              {
                if (!*(_QWORD *)(DerivedStorage + 48))
                  goto LABEL_24;
                Flags = CAImageQueueGetFlags();
                v31 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
                if ((Flags & 1) == 0)
                  v31 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
                v12 = (void *)*v31;
                if (!*v31)
                  goto LABEL_23;
                goto LABEL_22;
              }
              if (CFEqual(a2, CFSTR("CompensateForDisplayLatency")))
              {
                v32 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
                if (*(_BYTE *)(DerivedStorage + 239))
                  v32 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
                v12 = (void *)CFRetain(*v32);
                goto LABEL_23;
              }
              v26 = v38;
              v27 = -12082;
            }
            *((_DWORD *)v26 + 6) = v27;
            goto LABEL_24;
          }
          if (*(_QWORD *)(DerivedStorage + 360))
          {
            cf[0] = 0;
            v17 = vq_copyPerformanceDictionary(a1, (uint64_t)a3, cf);
            *((_DWORD *)v38 + 6) = v17;
            v18 = cf[0];
            if (!v17)
            {
              if (cf[0])
                v19 = (__CVBuffer *)CFRetain(cf[0]);
              else
                v19 = 0;
              *a4 = v19;
            }
            if (v18)
              CFRelease(v18);
            goto LABEL_24;
          }
        }
LABEL_10:
        v13 = FigSignalErrorAt();
LABEL_11:
        *((_DWORD *)v38 + 6) = v13;
LABEL_24:
        v9 = *((unsigned int *)v38 + 6);
        goto LABEL_25;
      }
      v12 = *(void **)(DerivedStorage + 288);
      if (v12)
LABEL_22:
        v12 = (void *)CFRetain(v12);
    }
LABEL_23:
    *a4 = (CVPixelBufferRef)v12;
    goto LABEL_24;
  }
  v9 = FigSignalErrorAt();
LABEL_25:
  _Block_object_dispose(&v37, 8);
  return v9;
}

void sub_192ECD620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t vq_SetProperty(const void *a1, const void *a2, void *a3)
{
  _DWORD *DerivedStorage;
  _DWORD *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  const void *v35;
  uint64_t v36;
  double MidX;
  CGFloat v38;
  CFTypeID v39;
  const void *v40;
  uint64_t v41;
  CFTypeID v42;
  CFTypeID TypeID;
  const void *v44;
  CFTypeID v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t *v49;
  CFTypeID v50;
  int Value;
  CFTypeID v52;
  CFTypeID v53;
  CFTypeID v54;
  const void *v55;
  uint64_t v56;
  CFTypeID v57;
  CFTypeID v58;
  const __CFArray *v59;
  CFIndex Count;
  const void *v61;
  CFTypeID v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  const __CFArray *v68;
  CFIndex v69;
  uint64_t v70;
  uint64_t v71;
  const __CFArray *v72;
  CFTypeID v73;
  int v74;
  NSObject *v75;
  int v76;
  char v77;
  uint64_t v78;
  _QWORD block[6];
  os_log_type_t type;
  int v81;
  CGRect rect;
  uint64_t v83;
  CGRect v84;
  CGRect v85;
  CGRect v86;

  v83 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  if (CFEqual(a2, CFSTR("VideoQueue_DisplayLayer")))
  {
    if (!*((_QWORD *)v8 + 3))
      vq_setupVideoLayer();
    *((_BYTE *)v8 + 338) = 0;
    v9 = CMBaseObjectGetDerivedStorage();
    v10 = (void *)MEMORY[0x19403137C]();
    objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
    if (!pthread_main_np())
      objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
    objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
    v11 = *(void **)(v9 + 24);
    if (v11)
      objc_msgSend(v11, "removeFromSuperlayer");
    v12 = *(void **)(v9 + 40);
    if (v12)
    {

      *(_QWORD *)(v9 + 40) = 0;
    }
    if (a3)
    {
      *(_QWORD *)(v9 + 40) = a3;
      v13 = a3;
      objc_msgSend(*(id *)(v9 + 40), "setMasksToBounds:", 1);
      objc_msgSend(*(id *)(v9 + 40), "addSublayer:", *(_QWORD *)(v9 + 24));
    }
    objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
    objc_autoreleasePoolPop(v10);
    if (dword_1EE2A32E8)
    {
      v81 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    vq_setSynchronizedLayers();
    goto LABEL_24;
  }
  if (CFEqual(a2, CFSTR("VideoQueue_DisplayBounds")))
  {
    memset(&rect, 0, sizeof(rect));
    if (CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)a3, &rect))
    {
      x = rect.origin.x;
      y = rect.origin.y;
      width = rect.size.width;
      height = rect.size.height;
      v19 = CMBaseObjectGetDerivedStorage();
      v84.origin.x = x;
      v84.origin.y = y;
      v84.size.width = width;
      v84.size.height = height;
      if (!CGRectEqualToRect(v84, *(CGRect *)(v19 + 200)))
      {
        v20 = (void *)MEMORY[0x19403137C]();
        *(CGFloat *)(v19 + 200) = x;
        *(CGFloat *)(v19 + 208) = y;
        *(CGFloat *)(v19 + 216) = width;
        *(CGFloat *)(v19 + 224) = height;
        objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
        if (!pthread_main_np())
          objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
        objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
        v21 = *(void **)(v19 + 40);
        v22 = *(void **)(v19 + 24);
        if (v21)
        {
          objc_msgSend(v21, "bounds");
          v24 = v23;
          v26 = v25;
          v28 = v27;
          v30 = v29;
        }
        else
        {
          v24 = *(double *)(v19 + 200);
          v26 = *(double *)(v19 + 208);
          v28 = *(double *)(v19 + 216);
          v30 = *(double *)(v19 + 224);
        }
        v85.origin.x = v24;
        v85.origin.y = v26;
        v85.size.width = v28;
        v85.size.height = v30;
        MidX = CGRectGetMidX(v85);
        v86.origin.x = v24;
        v86.origin.y = v26;
        v86.size.width = v28;
        v86.size.height = v30;
        objc_msgSend(v22, "setPosition:", MidX, CGRectGetMidY(v86));
        objc_msgSend(*(id *)(v19 + 24), "setBounds:", *(double *)(v19 + 200), *(double *)(v19 + 208), *(double *)(v19 + 216), *(double *)(v19 + 224));
        objc_msgSend(*(id *)(v19 + 24), "setMasksToBounds:", 1);
        objc_msgSend(*(id *)(v19 + 16), "setBounds:", *(double *)(v19 + 200), *(double *)(v19 + 208), *(double *)(v19 + 216), *(double *)(v19 + 224));
        objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
        objc_autoreleasePoolPop(v20);
      }
      goto LABEL_24;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(a2, CFSTR("VideoQueue_MakeCAContextForRemoteHost")))
  {
    if (!*((_QWORD *)v8 + 3))
      vq_setupVideoLayer();
    *((_BYTE *)v8 + 338) = 0;
    v32 = CMBaseObjectGetDerivedStorage();
    v33 = (void *)MEMORY[0x19403137C]();
    if (!*(_QWORD *)(v32 + 64))
    {
      v34 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", CFSTR("FigVideoQueue_CAContext"), *MEMORY[0x1E0CD2A20], *MEMORY[0x1E0C9AE50], *MEMORY[0x1E0CD2A40], 0);
      v35 = (const void *)objc_msgSend(MEMORY[0x1E0CD28E0], "contextWithOptions:", v34);
      *(_QWORD *)(v32 + 64) = v35;
      if (!v35)
      {
        *(double *)&v31 = COERCE_DOUBLE(FigSignalErrorAt());
LABEL_35:
        objc_autoreleasePoolPop(v33);
        return v31;
      }
      CFRetain(v35);
    }
    objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
    if (!pthread_main_np())
      objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
    objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
    objc_msgSend(*(id *)(v32 + 64), "setLayer:", *(_QWORD *)(v32 + 24));
    objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
    *(double *)&v31 = 0.0;
    goto LABEL_35;
  }
  if (CFEqual(a2, CFSTR("ClientPID")))
  {
    v31 = *((uint64_t *)v8 + 80);
    *((_QWORD *)v8 + 80) = a3;
    if (!a3)
      goto LABEL_46;
    goto LABEL_45;
  }
  if (CFEqual(a2, CFSTR("ClientBundleIdentifier")))
  {
    v31 = *((uint64_t *)v8 + 81);
    *((_QWORD *)v8 + 81) = a3;
    if (!a3)
    {
LABEL_46:
      if (*(double *)&v31 == 0.0)
        return v31;
      v38 = *(double *)&v31;
      goto LABEL_48;
    }
LABEL_45:
    CFRetain(a3);
    goto LABEL_46;
  }
  if (CFEqual(a2, CFSTR("VideoQueue_EnablePerFrameStats")))
  {
    if (a3)
    {
      CFGetTypeID(a3);
      CFBooleanGetTypeID();
    }
    goto LABEL_24;
  }
  if (CFEqual(a2, CFSTR("PreventsCapture")))
  {
    if (a3)
    {
      v39 = CFGetTypeID(a3);
      if (v39 == CFBooleanGetTypeID())
      {
        *((_BYTE *)v8 + 337) = CFBooleanGetValue((CFBooleanRef)a3);
        *((_BYTE *)v8 + 338) = 0;
        vq_updateImageQueueProtection();
        goto LABEL_24;
      }
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(a2, CFSTR("VideoQueue_DecoderUsage")))
  {
    v40 = (const void *)*((_QWORD *)v8 + 49);
    *((_QWORD *)v8 + 49) = a3;
    if (a3)
      CFRetain(a3);
    if (v40)
      CFRelease(v40);
    v41 = *((_QWORD *)v8 + 45);
    if (v41)
      FigRenderPipelineSetProperty_0(v41, (uint64_t)CFSTR("VideoDecoderUsage"), *((_QWORD *)v8 + 49));
    goto LABEL_24;
  }
  if (CFEqual(a2, CFSTR("VideoQueue_ControlTimebase")))
  {
    if (!*((_BYTE *)v8 + 544))
    {
      if (a3)
      {
        TypeID = CMTimebaseGetTypeID();
        if (TypeID != CFGetTypeID(a3))
          return FigSignalErrorAt();
        vq_removeTimebaseListeners();
        v44 = (const void *)*((_QWORD *)v8 + 69);
        *((_QWORD *)v8 + 69) = a3;
        CFRetain(a3);
      }
      else
      {
        vq_removeTimebaseListeners();
        v44 = (const void *)*((_QWORD *)v8 + 69);
        *((_QWORD *)v8 + 69) = 0;
      }
      if (v44)
        CFRelease(v44);
      if (dword_1EE2A32E8)
      {
        v81 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        v47 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      vq_addTimebaseListeners();
      vq_updateForCurrentTimebaseRate(a1);
      goto LABEL_24;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(a2, CFSTR("ForceFullPowerDecode")))
  {
    if (a3)
    {
      v42 = CFGetTypeID(a3);
      if (v42 == CFBooleanGetTypeID())
      {
        *(double *)&v31 = 0.0;
        *((_BYTE *)v8 + 400) = CFBooleanGetValue((CFBooleanRef)a3);
      }
      else
      {
        *(double *)&v31 = COERCE_DOUBLE(FigSignalErrorAt());
      }
    }
    else
    {
      *(double *)&v31 = 0.0;
      *((_BYTE *)v8 + 400) = 0;
    }
    v48 = *((_QWORD *)v8 + 45);
    if (v48)
    {
      v49 = (uint64_t *)MEMORY[0x1E0C9AE50];
      if (!*((_BYTE *)v8 + 400))
        v49 = (uint64_t *)MEMORY[0x1E0C9AE40];
      FigRenderPipelineSetProperty_0(v48, (uint64_t)CFSTR("ForceFullPowerDecode"), *v49);
    }
    return v31;
  }
  if (!CFEqual(a2, CFSTR("PreventDisplaySleepDuringVideoPlayback")))
  {
    if (CFEqual(a2, CFSTR("PreventAutomaticBackgroundingDuringVideoPlayback")))
    {
      if (a3)
      {
        v50 = CFGetTypeID(a3);
        if (v50 == CFBooleanGetTypeID())
        {
          Value = CFBooleanGetValue((CFBooleanRef)a3);
          if (*((unsigned __int8 *)v8 + 584) != Value)
          {
            *((_BYTE *)v8 + 584) = Value;
            vq_updateVideoPlaybackAssertion(a1);
          }
          goto LABEL_24;
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a2, CFSTR("UpcomingOutputPTSRangeChanged")))
    {
      if (!a3)
        return FigSignalErrorAt();
      v52 = CFGetTypeID(a3);
      if (v52 != CFDictionaryGetTypeID())
        return FigSignalErrorAt();
      if (*((_QWORD *)v8 + 46))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        return CMNotificationCenterPostNotification();
      }
      MEMORY[0x19402EEEC](*((_QWORD *)v8 + 77));
      v55 = (const void *)*((_QWORD *)v8 + 76);
      *((_QWORD *)v8 + 76) = a3;
      CFRetain(a3);
      if (v55)
        CFRelease(v55);
      v56 = *((_QWORD *)v8 + 77);
LABEL_114:
      MEMORY[0x19402EF04](v56);
      goto LABEL_24;
    }
    if (CFEqual(a2, CFSTR("InhibitCATransactionCommitTime")))
    {
      if (!a3)
      {
        *(double *)&v31 = 0.0;
        *((_BYTE *)v8 + 237) = 0;
        return v31;
      }
      v53 = CFGetTypeID(a3);
      if (v53 == CFBooleanGetTypeID())
      {
        *(double *)&v31 = 0.0;
        *((_BYTE *)v8 + 237) = CFBooleanGetValue((CFBooleanRef)a3);
        return v31;
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a2, CFSTR("VisualContextArray")))
    {
      if (!*((_BYTE *)v8 + 544))
      {
        if (!a3)
        {
          v31 = *((uint64_t *)v8 + 33);
          *((_QWORD *)v8 + 33) = 0;
          goto LABEL_46;
        }
        v54 = CFArrayGetTypeID();
        if (v54 == CFGetTypeID(a3))
        {
          v31 = *((uint64_t *)v8 + 33);
          *((_QWORD *)v8 + 33) = a3;
          goto LABEL_45;
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a2, CFSTR("VisualContextArrayOptions")))
    {
      if (!*((_BYTE *)v8 + 544))
      {
        if (!a3)
        {
          v31 = *((uint64_t *)v8 + 34);
          *((_QWORD *)v8 + 34) = 0;
          goto LABEL_46;
        }
        v57 = CFArrayGetTypeID();
        if (v57 == CFGetTypeID(a3))
        {
          v31 = *((uint64_t *)v8 + 34);
          *((_QWORD *)v8 + 34) = a3;
          goto LABEL_45;
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a2, CFSTR("VideoTargetArray")))
    {
      if (*((_BYTE *)v8 + 544))
        return FigSignalErrorAt();
      if (a3)
      {
        v58 = CFArrayGetTypeID();
        if (v58 != CFGetTypeID(a3))
          return FigSignalErrorAt();
      }
      MEMORY[0x19402EEEC](*((_QWORD *)v8 + 38));
      v59 = (const __CFArray *)*((_QWORD *)v8 + 36);
      if (v59)
      {
        Count = CFArrayGetCount(v59);
        v61 = (const void *)*((_QWORD *)v8 + 36);
      }
      else
      {
        v61 = 0;
        Count = 0;
      }
      *((_QWORD *)v8 + 36) = a3;
      if (a3)
        CFRetain(a3);
      if (v61)
        CFRelease(v61);
      *((_BYTE *)v8 + 338) = 0;
      v68 = (const __CFArray *)*((_QWORD *)v8 + 36);
      if (v68)
        v69 = CFArrayGetCount(v68);
      else
        v69 = 0;
      CFArrayRemoveAllValues(*((CFMutableArrayRef *)v8 + 37));
      v70 = 0;
      v71 = *MEMORY[0x1E0C9AE00];
      while (1)
      {
        v72 = (const __CFArray *)*((_QWORD *)v8 + 36);
        if (v72)
          v72 = (const __CFArray *)CFArrayGetCount(v72);
        if (v70 >= (uint64_t)v72)
          break;
        rect.origin.x = 0.0;
        VideoTargetInfoCreate(v71, &rect);
        CFArrayAppendValue(*((CFMutableArrayRef *)v8 + 37), *(const void **)&rect.origin.x);
        CFRelease(*(CFTypeRef *)&rect.origin.x);
        ++v70;
      }
      MEMORY[0x19402EF04](*((_QWORD *)v8 + 38));
      if (v69 == Count)
        goto LABEL_24;
      v65 = (uint64_t)a1;
      v66 = 2;
      v64 = 0;
      v67 = v69;
    }
    else
    {
      if (!CFEqual(a2, CFSTR("ShouldWaitForVideoTarget")))
      {
        if (CFEqual(a2, CFSTR("AllowAlternateVideoDecoderSelection")))
        {
          *(double *)&v31 = 0.0;
          *((_BYTE *)v8 + 628) = (void *)*MEMORY[0x1E0C9AE50] == a3;
          return v31;
        }
        if (CFEqual(a2, CFSTR("ToneMapToStandardDynamicRange")))
        {
          if (a3)
          {
            v73 = CFGetTypeID(a3);
            if (v73 == CFBooleanGetTypeID())
            {
              v74 = CFBooleanGetValue((CFBooleanRef)a3);
              *((_BYTE *)v8 + 236) = v74;
              objc_msgSend(*((id *)v8 + 2), "setToneMapToStandardDynamicRange:", v74 != 0);
              goto LABEL_24;
            }
          }
          return FigSignalErrorAt();
        }
        if (CFEqual(a2, CFSTR("EnableFlushCAToRemoveImage")))
        {
          *(double *)&v31 = 0.0;
          *((_BYTE *)v8 + 629) = (void *)*MEMORY[0x1E0C9AE40] != a3;
          return v31;
        }
        if (CFEqual(a2, CFSTR("DisplayList")))
        {
          v75 = *((_QWORD *)v8 + 66);
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 3221225472;
          block[2] = __vq_SetProperty_block_invoke;
          block[3] = &__block_descriptor_48_e5_v8__0l;
          block[4] = v8;
          block[5] = a3;
          dispatch_sync(v75, block);
          goto LABEL_24;
        }
        if (CFEqual(a2, CFSTR("DisallowVideoLayerDisplayCompositing")))
        {
          v76 = *MEMORY[0x1E0C9AE50] == (_QWORD)a3;
          if (*((unsigned __int8 *)v8 + 238) == v76)
            goto LABEL_24;
          *((_BYTE *)v8 + 238) = v76;
          if (!*((_QWORD *)v8 + 2))
            goto LABEL_24;
          rect.origin.x = 0.0;
          v36 = FigDeferredTransactionCreate(*MEMORY[0x1E0C9AE00], (uint64_t *)&rect);
          if ((_DWORD)v36)
            return v36;
          FBLSupportAppendDeferredTransactionChangeToSetAllowsDisplayCompositing(*(const void **)&rect.origin.x, *((const void **)v8 + 2), *((_BYTE *)v8 + 238) == 0, (uint64_t)"vq_SetProperty");
          FigDeferredTransactionCommit(*(uint64_t *)&rect.origin.x);
          v38 = rect.origin.x;
          if (!*(_QWORD *)&rect.origin.x)
          {
LABEL_24:
            *(double *)&v31 = 0.0;
            return v31;
          }
LABEL_48:
          CFRelease(*(CFTypeRef *)&v38);
          goto LABEL_24;
        }
        if (!CFEqual(a2, CFSTR("CompensateForDisplayLatency")))
          return 4294955214;
        v77 = *MEMORY[0x1E0C9AE40] != (_QWORD)a3;
        *((_BYTE *)v8 + 239) = v77;
        MEMORY[0x19402EEEC](*((_QWORD *)v8 + 30));
        v78 = *((_QWORD *)v8 + 31);
        if (v78)
          FigLayerSynchronizerSetCompensateForDisplayLatency(v78, v77);
        v56 = *((_QWORD *)v8 + 30);
        goto LABEL_114;
      }
      if (!a3)
        return FigSignalErrorAt();
      v62 = CFGetTypeID(a3);
      if (v62 != CFBooleanGetTypeID())
        return FigSignalErrorAt();
      v63 = CFBooleanGetValue((CFBooleanRef)a3);
      if (*((unsigned __int8 *)v8 + 312) == v63)
        goto LABEL_24;
      v64 = v63;
      v65 = (uint64_t)a1;
      v66 = 1;
      v67 = 0;
    }
    vq_handleWaitForVideoTargetConditionChange(v65, v66, v64, v67);
    goto LABEL_24;
  }
  if (!a3)
    return FigSignalErrorAt();
  v45 = CFGetTypeID(a3);
  if (v45 != CFBooleanGetTypeID())
    return FigSignalErrorAt();
  *((_BYTE *)v8 + 401) = 1;
  *((_BYTE *)v8 + 402) = CFBooleanGetValue((CFBooleanRef)a3);
  v46 = *((_QWORD *)v8 + 45);
  if (!v46)
    goto LABEL_24;
  return FigRenderPipelineSetProperty_0(v46, (uint64_t)CFSTR("PreventDisplaySleepDuringVideoPlayback"), (uint64_t)a3);
}

uint64_t vq_removeTimebaseListeners()
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = CMNotificationCenterGetDefaultLocalCenter();
  if (*(_QWORD *)(DerivedStorage + 552))
    return FigNotificationCenterRemoveWeakListener();
  return result;
}

uint64_t VideoTargetInfoCopyCAImageQueueAtIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t FigBaseObject;
  uint64_t (*v6)(uint64_t, const __CFString *, _QWORD, uint64_t);

  result = FigCFArrayGetValueAtIndex();
  if (result)
  {
    FigBaseObject = FigImageQueueGetFigBaseObject(result);
    result = CMBaseObjectGetVTable();
    v6 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, uint64_t))(*(_QWORD *)(result + 8) + 48);
    if (v6)
      return v6(FigBaseObject, CFSTR("CAImageQueue"), *MEMORY[0x1E0C9AE00], a3);
  }
  return result;
}

_DWORD *vq_ImageReleased()
{
  _DWORD *result;

  result = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return (_DWORD *)CMNotificationCenterPostNotification();
  }
  return result;
}

_DWORD *vq_DecodeError()
{
  _DWORD *result;

  result = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return (_DWORD *)CMNotificationCenterPostNotification();
  }
  return result;
}

_DWORD *vq_sBufConsumed()
{
  _DWORD *result;

  result = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (!*result)
    return (_DWORD *)FigCFDictionaryGetBooleanIfPresent();
  return result;
}

_DWORD *vq_completedDecodeForPreroll()
{
  _DWORD *result;

  result = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return (_DWORD *)CMNotificationCenterPostNotification();
  }
  return result;
}

_DWORD *vq_lostDecoderState()
{
  _DWORD *result;

  result = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return (_DWORD *)CMNotificationCenterPostNotification();
  }
  return result;
}

_DWORD *vq_firstVideoFrameEnqueued()
{
  _DWORD *result;

  result = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return (_DWORD *)CMNotificationCenterPostNotification();
  }
  return result;
}

uint64_t __vq_removeListeners_block_invoke(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v4)(uint64_t);

  if (*(_QWORD *)(*(_QWORD *)(result + 32) + 376))
  {
    v1 = result;
    FigNotificationCenterRemoveWeakListener();
    FigNotificationCenterRemoveWeakListener();
    v2 = *(_QWORD *)(*(_QWORD *)(v1 + 32) + 376);
    result = CMBaseObjectGetVTable();
    v3 = *(_QWORD **)(result + 8);
    if (*v3 >= 2uLL)
    {
      v4 = (uint64_t (*)(uint64_t))v3[8];
      if (v4)
        return v4(v2);
    }
  }
  return result;
}

_DWORD *vq_ExternalProtectionStatusChanged()
{
  _DWORD *result;

  result = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return (_DWORD *)CMNotificationCenterPostNotification();
  }
  return result;
}

void vq_ReadyToDecryptChanged()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  unsigned int (*v3)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t FigBaseObject;
  void (*v5)(uint64_t, const __CFString *, _QWORD);
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_DWORD *)DerivedStorage)
  {
    v1 = DerivedStorage;
    v2 = *(_QWORD *)(DerivedStorage + 376);
    if (v2)
    {
      cf = 0;
      v3 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
      if (!v3 || v3(v2, *MEMORY[0x1E0CA3218], *MEMORY[0x1E0C9AE00], &cf))
        goto LABEL_16;
      v6 = cf;
      v7 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
      if (cf)
        CFRelease(cf);
      if (v6 == v7)
      {
LABEL_16:
        if (*(_BYTE *)(v1 + 545))
        {
          FigBaseObject = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(v1 + 360));
          v5 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
          if (v5)
            v5(FigBaseObject, CFSTR("Suspended"), *MEMORY[0x1E0C9AE40]);
          *(_BYTE *)(v1 + 545) = 0;
        }
      }
    }
  }
}

void vq_timebaseEffectiveRateChanged(uint64_t a1, const void *a2)
{
  vq_updateForCurrentTimebaseRate(a2);
}

void vq_updateForCurrentTimebaseRate(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  float Rate;
  _BOOL8 v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFAllocatorRef v8;
  int v9;
  CFTypeRef v10;
  uint64_t v11;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v13;
  uint64_t v14;
  void (*v15)(uint64_t, _BOOL8);
  uint64_t v16;
  void (*v17)(uint64_t, float);
  CFIndex i;
  const __CFArray *Count;
  const void *ValueAtIndex;
  void (*v21)(const void *, _BOOL8);
  void (*v22)(const void *, float);
  CFIndex j;
  const __CFArray *v24;
  CFArrayRef *v25;
  CFIndex v26;
  CFTypeRef v27;
  void (*v28)(CFTypeRef, _BOOL8);
  void (*v29)(CFTypeRef, float);
  CFTypeRef cf[17];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_DWORD *)DerivedStorage)
  {
    v3 = DerivedStorage;
    Rate = CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 552));
    v6 = Rate != 0.0 || *(_QWORD *)(v3 + 552) == 0;
    if (dword_1EE2A32E8)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (Rate == 0.0)
    {
      if (FPSupport_IsPlayerPerformanceTraceEnabled() && *(_QWORD *)(v3 + 360))
      {
        cf[0] = 0;
        v8 = CFGetAllocator(a1);
        v9 = vq_copyPerformanceDictionary((uint64_t)a1, (uint64_t)v8, cf);
        v10 = cf[0];
        if (!v9)
          FPSupport_TracePlayerPerformanceDictionary((uint64_t)"VideoQueue", (void *)cf[0]);
        if (v10)
          CFRelease(v10);
      }
      v11 = CMBaseObjectGetDerivedStorage();
      if (*(double *)(v11 + 568) > 0.0)
      {
        if (*(_QWORD *)(v11 + 560))
        {
          Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (Mutable)
          {
            v13 = Mutable;
            CFAbsoluteTimeGetCurrent();
            FigCFDictionarySetValue();
            FigCFDictionarySetInt32();
            FigCFDictionarySetValue();
            FigPlaybackLogPowerEvent();
            CFRelease(v13);
          }
        }
      }
    }
    v14 = *(_QWORD *)(v3 + 56);
    if (v14)
    {
      v15 = *(void (**)(uint64_t, _BOOL8))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
      if (v15)
        v15(v14, v6);
      v16 = *(_QWORD *)(v3 + 56);
      v17 = *(void (**)(uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
      if (v17)
        v17(v16, Rate);
    }
    else if (*(_QWORD *)(v3 + 48))
    {
      CAImageQueueSetFlags();
    }
    for (i = 0; ; ++i)
    {
      Count = *(const __CFArray **)(v3 + 280);
      if (Count)
        Count = (const __CFArray *)CFArrayGetCount(Count);
      if (i >= (uint64_t)Count)
        break;
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 280), i);
      v21 = *(void (**)(const void *, _BOOL8))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
      if (v21)
        v21(ValueAtIndex, v6);
      v22 = *(void (**)(const void *, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
      if (v22)
        v22(ValueAtIndex, Rate);
    }
    MEMORY[0x19402EEEC](*(_QWORD *)(v3 + 304));
    for (j = 0; ; ++j)
    {
      v24 = *(const __CFArray **)(v3 + 296);
      if (v24)
        v24 = (const __CFArray *)CFArrayGetCount(v24);
      if (j >= (uint64_t)v24)
        break;
      v25 = (CFArrayRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 296), j);
      if (CFArrayGetCount(v25[3]) >= 1)
      {
        v26 = 0;
        do
        {
          cf[0] = 0;
          VideoTargetInfoCopyFigImageQueueAtIndex((uint64_t)v25, v26, cf);
          v27 = cf[0];
          v28 = *(void (**)(CFTypeRef, _BOOL8))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
          if (v28)
            v28(v27, v6);
          v29 = *(void (**)(CFTypeRef, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
          if (v29)
            v29(v27, Rate);
          if (v27)
            CFRelease(v27);
          ++v26;
        }
        while (v26 < CFArrayGetCount(v25[3]));
      }
    }
    MEMORY[0x19402EF04](*(_QWORD *)(v3 + 304));
    vq_updateVideoPlaybackAssertion(a1);
  }
}

uint64_t vq_copyPerformanceDictionary(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t FigBaseObject;
  uint64_t (*v7)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v8;
  CFTypeRef v9;
  const void *MutableCopy;
  uint64_t v11;
  CFTypeRef cf;

  cf = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigBaseObject = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(DerivedStorage + 360));
  v7 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (!v7)
    return 4294954514;
  v8 = v7(FigBaseObject, CFSTR("PerformanceDictionary"), a2, &cf);
  v9 = cf;
  if ((_DWORD)v8)
  {
    MutableCopy = 0;
    if (!cf)
      goto LABEL_5;
    goto LABEL_4;
  }
  MutableCopy = (const void *)FigCFDictionaryCreateMutableCopy();
  v9 = cf;
  if (cf)
LABEL_4:
    CFRelease(v9);
LABEL_5:
  if (!MutableCopy)
  {
    if ((_DWORD)v8)
      return v8;
LABEL_12:
    v8 = 0;
    *a3 = MutableCopy;
    return v8;
  }
  v11 = FigCFDictionarySetInt64();
  if (!(_DWORD)v11)
    goto LABEL_12;
  v8 = v11;
  CFRelease(MutableCopy);
  return v8;
}

const void *VideoTargetInfoCopyFigImageQueueAtIndex(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  const void *result;

  result = (const void *)FigCFArrayGetValueAtIndex();
  if (result)
    result = CFRetain(result);
  *a3 = result;
  return result;
}

void vq_updateVideoPlaybackAssertion(const void *a1)
{
  _DWORD *DerivedStorage;
  _DWORD *v3;
  NSObject *v4;
  _QWORD v5[6];

  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    FigSignalErrorAt();
  }
  else
  {
    v3 = DerivedStorage;
    if (a1)
      CFRetain(a1);
    v4 = *((_QWORD *)v3 + 72);
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = __vq_updateVideoPlaybackAssertion_block_invoke;
    v5[3] = &__block_descriptor_48_e5_v8__0l;
    v5[4] = v3;
    v5[5] = a1;
    dispatch_async(v4, v5);
  }
}

void __vq_updateVideoPlaybackAssertion_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  const void *v4;
  const void *v5;
  float Rate;
  int SInt32;
  uint64_t UpTimeNanoseconds;
  uint64_t *v9;
  uint64_t v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v2 = (void *)MEMORY[0x19403137C]();
  v3 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v3 + 584)
    || *(_DWORD *)v3
    || (Rate = CMTimebaseGetRate(*(CMTimebaseRef *)(v3 + 552)), v3 = *(_QWORD *)(a1 + 32), Rate == 0.0))
  {
    v4 = *(const void **)(v3 + 592);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 592) = 0;
    }
  }
  else if (!*(_QWORD *)(v3 + 592))
  {
    SInt32 = FigCFNumberGetSInt32();
    if (!SInt32)
      SInt32 = getpid();
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    v9 = *(uint64_t **)(a1 + 32);
    if ((unint64_t)(UpTimeNanoseconds - v9[75]) >= 0x3B9ACA01)
    {
      v10 = UpTimeNanoseconds;
      FigSFBSKeepForegroundAssertionCreate(*MEMORY[0x1E0C9AE00], v9[81], SInt32, v9 + 74);
      if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 592))
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 600) = v10;
      }
    }
  }
  v5 = *(const void **)(a1 + 40);
  if (v5)
    CFRelease(v5);
  objc_autoreleasePoolPop(v2);
}

uint64_t FigVideoQueue_CopyCurrentlyDisplayedPixelBufferFromCAImageQueue(uint64_t a1, const __CFAllocator *a2, CVPixelBufferRef *a3)
{
  uint64_t v5;
  __IOSurface *v6;
  uint64_t v7;
  CVPixelBufferRef pixelBufferOut;

  pixelBufferOut = 0;
  if (!a3)
  {
    FigSignalErrorAt();
    return 0;
  }
  *a3 = 0;
  v5 = CAImageQueueCopyDisplayedIOSurface();
  if (!v5)
    return 0;
  v6 = (__IOSurface *)v5;
  if (IOSurfaceGetProtectionOptions())
  {
    v7 = 0;
  }
  else
  {
    v7 = CVPixelBufferCreateWithIOSurface(a2, v6, 0, &pixelBufferOut);
    if ((_DWORD)v7)
    {
      if (pixelBufferOut)
        CFRelease(pixelBufferOut);
    }
    else
    {
      *a3 = pixelBufferOut;
      pixelBufferOut = 0;
    }
  }
  CFRelease(v6);
  return v7;
}

BOOL vq_isImageQueueBeingServiced()
{
  CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 64))
    return 1;
  CAImageQueueGetLastUpdateHostTime();
  mach_absolute_time();
  return (unint64_t)FigHostTimeToNanoseconds() < 0x2540BE401;
}

void vq_setupVideoLayer()
{
  uint64_t DerivedStorage;
  void *v1;
  id v2;
  id v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = (void *)MEMORY[0x19403137C]();
  objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
  if (!pthread_main_np())
    objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
  objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
  *(_QWORD *)(DerivedStorage + 48) = CAImageQueueCreate();
  CAImageQueueSetFlags();
  CAImageQueueSetFlags();
  CAImageQueueSetFlags();
  v2 = objc_alloc_init(MEMORY[0x1E0CD27A8]);
  *(_QWORD *)(DerivedStorage + 16) = v2;
  objc_msgSend(v2, "setName:", CFSTR("internal-videolayer"));
  objc_msgSend(*(id *)(DerivedStorage + 16), "setContents:", *(_QWORD *)(DerivedStorage + 48));
  objc_msgSend(*(id *)(DerivedStorage + 16), "setContentsGravity:", *MEMORY[0x1E0CD2F90]);
  objc_msgSend(*(id *)(DerivedStorage + 16), "setEdgeAntialiasingMask:", 0);
  objc_msgSend(*(id *)(DerivedStorage + 16), "setAllowsDisplayCompositing:", *(_BYTE *)(DerivedStorage + 238) == 0);
  v3 = objc_alloc_init(MEMORY[0x1E0CD27A8]);
  *(_QWORD *)(DerivedStorage + 24) = v3;
  objc_msgSend(v3, "setName:", CFSTR("internal-maskinglayer"));
  objc_msgSend(*(id *)(DerivedStorage + 24), "setFillMode:", *MEMORY[0x1E0CD2B58]);
  objc_msgSend(*(id *)(DerivedStorage + 24), "addSublayer:", *(_QWORD *)(DerivedStorage + 16));
  objc_msgSend(*(id *)(DerivedStorage + 16), "setAnchorPoint:", 0.0, 0.0);
  objc_msgSend(*(id *)(DerivedStorage + 16), "setPosition:", 0.0, 0.0);
  objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
  objc_autoreleasePoolPop(v1);
}

uint64_t vq_updateImageQueueProtection()
{
  uint64_t result;
  uint64_t v1;
  CFIndex i;
  const __CFArray *Count;
  CFArrayRef *ValueAtIndex;
  CFIndex v5;
  CFTypeRef cf;

  result = CMBaseObjectGetDerivedStorage();
  v1 = result;
  if (*(_QWORD *)(result + 376) && !*(_BYTE *)(result + 336))
  {
    *(_BYTE *)(result + 336) = 1;
    *(_BYTE *)(result + 338) = 0;
  }
  if (!*(_BYTE *)(result + 338))
  {
    if (*(_QWORD *)(result + 48))
      CAImageQueueSetFlags();
    MEMORY[0x19402EEEC](*(_QWORD *)(v1 + 304));
    for (i = 0; ; ++i)
    {
      Count = *(const __CFArray **)(v1 + 296);
      if (Count)
        Count = (const __CFArray *)CFArrayGetCount(Count);
      if (i >= (uint64_t)Count)
        break;
      ValueAtIndex = (CFArrayRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 296), i);
      if (CFArrayGetCount(ValueAtIndex[3]) >= 1)
      {
        v5 = 0;
        do
        {
          cf = 0;
          VideoTargetInfoCopyCAImageQueueAtIndex((uint64_t)ValueAtIndex, v5, (uint64_t)&cf);
          if (cf)
          {
            CAImageQueueSetFlags();
            CFRelease(cf);
          }
          ++v5;
        }
        while (v5 < CFArrayGetCount(ValueAtIndex[3]));
      }
    }
    return MEMORY[0x19402EF04](*(_QWORD *)(v1 + 304));
  }
  return result;
}

uint64_t vq_addTimebaseListeners()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(result + 552))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterAddWeakListener();
  }
  return result;
}

void VideoTargetInfoCreate(uint64_t a1, _QWORD *a2)
{
  uint64_t Instance;
  _QWORD *v4;
  const __CFAllocator *v5;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v7;

  if (!a2)
    goto LABEL_9;
  if (videoTargetInfo_getTypeID_sRegisterVideoTargetInfoTypeOnce != -1)
    dispatch_once(&videoTargetInfo_getTypeID_sRegisterVideoTargetInfoTypeOnce, &__block_literal_global_37_1);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v4 = (_QWORD *)Instance;
    *(_BYTE *)(Instance + 16) = 0;
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    v4[3] = Mutable;
    if (Mutable && (v7 = CFArrayCreateMutable(v5, 0, MEMORY[0x1E0C9B378]), (v4[4] = v7) != 0))
    {
      *a2 = v4;
    }
    else
    {
      FigSignalErrorAt();
      CFRelease(v4);
    }
  }
  else
  {
LABEL_9:
    FigSignalErrorAt();
  }
}

uint64_t vq_handleWaitForVideoTargetConditionChange(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v10;
  NSObject *v11;
  _QWORD *v12;
  const __CFArray *v13;
  NSObject *v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = DerivedStorage;
  if (a2 == 1)
  {
    *(_BYTE *)(DerivedStorage + 312) = a3;
    if (dword_1EE2A32E8)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      a3 = *(unsigned __int8 *)(v8 + 312);
    }
    v12 = (_QWORD *)(v8 + 408);
    MEMORY[0x19402EA0C](*(_QWORD *)(v8 + 408));
    if (!a3)
    {
LABEL_9:
      v13 = *(const __CFArray **)(v8 + 320);
      if (v13 && CFArrayGetCount(v13) >= 1)
      {
        if (dword_1EE2A32E8)
        {
          v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        FigCFArrayApplyBlock();
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v8 + 320));
      }
    }
  }
  else
  {
    v10 = *(_QWORD *)(DerivedStorage + 328);
    if (dword_1EE2A32E8)
    {
      v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *(_QWORD *)(v8 + 328) = a4;
    v12 = (_QWORD *)(v8 + 408);
    MEMORY[0x19402EA0C](*(_QWORD *)(v8 + 408));
    if (!v10)
      goto LABEL_9;
  }
  return MEMORY[0x19402EA24](*v12);
}

uint64_t vq_setSynchronizedLayers()
{
  uint64_t DerivedStorage;
  const __CFArray *v1;
  uint64_t v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 240));
  if (*(_QWORD *)(DerivedStorage + 248))
  {
    v1 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)(DerivedStorage + 24), 1, MEMORY[0x1E0C9B378]);
    v2 = FigLayerSynchronizerSetLayerArray(*(_QWORD *)(DerivedStorage + 248), v1);
    if (v1)
      CFRelease(v1);
  }
  else
  {
    v2 = 0;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 240));
  return v2;
}

uint64_t __videoTargetInfo_getTypeID_block_invoke()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  videoTargetInfo_getTypeID_sVideoTargetInfoTypeID = result;
  return result;
}

_QWORD *videoTargetInfo_init(_QWORD *result)
{
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  return result;
}

void videoTargetInfo_finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 24) = 0;
  }
}

CFStringRef videoTargetInfo_copyDebugDesc(uint64_t a1)
{
  const __CFAllocator *v2;
  CFIndex v3;
  int v4;
  const __CFArray *Count;
  const char *v6;

  v2 = CFGetAllocator((CFTypeRef)a1);
  v3 = CFGetRetainCount((CFTypeRef)a1);
  v4 = *(unsigned __int8 *)(a1 + 16);
  Count = *(const __CFArray **)(a1 + 24);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  v6 = "YES";
  if (!v4)
    v6 = " NO";
  return CFStringCreateWithFormat(v2, 0, CFSTR("<VideoTargetInfo %p retainCount: %ld> Stereo: %s %d FIQs"), a1, v3, v6, Count);
}

uint64_t __vq_handleWaitForVideoTargetConditionChange_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t (*v5)(uint64_t, uint64_t, _QWORD, double, double, double, double, double, double, double, double);

  v3 = *(_QWORD *)(a1 + 32);
  result = CMBaseObjectGetVTable();
  v5 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, double, double, double, double, double, double, double, double))(*(_QWORD *)(result + 16) + 16);
  if (v5)
    return v5(v3, a2, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
  return result;
}

uint64_t vq_Start()
{
  return 0;
}

uint64_t vq_EnqueueFrame(void *a1, void *a2, int a3, CGFloat a4, CGFloat a5, CGFloat a6, double a7, CGFloat a8, double a9, double a10, double a11)
{
  uint64_t DerivedStorage;
  uint64_t v24;
  uint64_t v25;
  CFTypeRef v26;
  CFArrayRef SampleAttachmentsArray;
  const __CFArray *v28;
  CFTypeID v29;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v31;
  CFTypeID v32;
  uint64_t v33;
  uint64_t Decryptor;
  NSObject *v35;
  const void *v36;
  int v37;
  opaqueCMBufferQueue *v38;
  __CFArray *v39;
  NSObject *v40;
  unsigned int v41;
  unsigned int v42;
  const char *v43;
  uint64_t MutableCopy;
  uint64_t v45;
  CMSampleBufferRef v46;
  uint64_t v47;
  CMTagValue v48;
  CMTagValue v49;
  OpaqueCMTaggedBufferGroup *TaggedBufferGroup;
  OpaqueCMTaggedBufferGroup *v51;
  CMItemCount Count;
  CFIndex v53;
  uint64_t v54;
  CMTagValue v55;
  CMTagValue v56;
  uint64_t v57;
  const OpaqueCMTagCollection *TagCollectionAtIndex;
  const void *CVPixelBufferAtIndex;
  int v60;
  CMTag v61;
  uint64_t v62;
  uint64_t v63;
  const void *v64;
  uint64_t v65;
  CMTaggedBufferGroupRef v66;
  __CVBuffer *v67;
  __CVBuffer *v68;
  CGSize DisplaySize;
  CGFloat width;
  CGFloat height;
  CGSize EncodedSize;
  CMVideoDimensions Dimensions;
  unint64_t v74;
  const opaqueCMFormatDescription *v75;
  CGSize PresentationDimensions;
  const __CFArray *v77;
  const __CFArray *v78;
  const OpaqueCMTagCollection *v79;
  CMFormatDescriptionRef v80;
  const opaqueCMFormatDescription *v81;
  int64_t v82;
  int MVHEVCVideoLayerIDs;
  int64_t v84;
  uint64_t Seconds;
  uint64_t v86;
  uint64_t v87;
  double v88;
  char v89;
  int v90;
  char v91;
  CFArrayRef v92;
  int v93;
  unsigned int v94;
  FourCharCode MediaSubType;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v97;
  unsigned int v98;
  const char *v99;
  BOOL v100;
  NSObject *v101;
  unsigned int v102;
  unsigned int v103;
  const char *v104;
  const __CFArray *v105;
  const __CFArray *v106;
  CFIndex v107;
  const void *v108;
  void (*v109)(const void *, const __CFAllocator *, unsigned __int128 *);
  CFIndex v110;
  BOOL v111;
  const void *v112;
  CFIndex CountOfDataChannels;
  CFIndex v114;
  const OpaqueCMTagCollection *DataChannelByIndex;
  const OpaqueCMTagCollection *v116;
  CFIndex v117;
  CFIndex v118;
  char v119;
  const OpaqueCMTagCollection *v120;
  int v121;
  NSObject *v122;
  unsigned int v123;
  unsigned int v124;
  const char *v125;
  const char *v126;
  __CFDictionary *v127;
  const __CFDictionary *v128;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  CFIndex v131;
  CFTypeRef *v132;
  uint64_t v133;
  uint64_t FigBaseObject;
  uint64_t (*v135)(uint64_t, const __CFString *, uint64_t);
  CFMutableDictionaryRef v136;
  const __CFArray *v137;
  CFIndex v138;
  const __CFArray *v139;
  CFIndex v140;
  CFIndex v141;
  const void *v142;
  const CFDictionaryValueCallBacks *v143;
  const void *v144;
  CFTypeRef v145;
  uint64_t v146;
  uint64_t (*v147)(CFTypeRef, const void *, uint64_t);
  const void *v148;
  uint64_t v149;
  const void *v150;
  uint64_t v151;
  CMTagValue v152;
  CMTagValue v153;
  uint64_t v154;
  uint64_t *v155;
  CFIndex v156;
  CFIndex v157;
  int v158;
  int v159;
  uint64_t v160;
  CMTagValue v161;
  CMTagValue v162;
  uint64_t v163;
  const OpaqueCMTagCollection *v164;
  CMTag v165;
  CMTag v166;
  BOOL v167;
  const __CFArray *v168;
  CFIndex v169;
  CFIndex v170;
  const void *v171;
  CFMutableArrayRef *v172;
  uint64_t FigImageQueueAndTagsForVideoTargetAndAppendToArraysAndTargetInfo;
  uint64_t v174;
  uint64_t (*v175)(uint64_t, const __CFString *, uint64_t);
  uint64_t v176;
  void (*v177)(uint64_t, const __CFString *, CMTaggedBufferGroupFormatDescriptionRef);
  CFIndex i;
  const __CFArray *v179;
  const void *v180;
  CFArrayRef *v181;
  CFIndex v182;
  const void *v183;
  OpaqueCMTagCollection *v184;
  CFTypeRef v185;
  CFTypeRef v186;
  uint64_t (*v187)(const void *, CFTypeRef);
  const void *v188;
  void *v189;
  const void *v190;
  uint64_t v191;
  uint64_t (*v192)(uint64_t, const __CFString *, _QWORD, uint64_t);
  uint64_t v193;
  void (*v194)(uint64_t, const __CFString *, CMTaggedBufferGroupFormatDescriptionRef);
  uint64_t v195;
  uint64_t VTable;
  const opaqueCMFormatDescription *v197;
  void (*v198)(uint64_t, const __CFString *, _QWORD);
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  void (*v202)(uint64_t, const __CFString *, uint64_t);
  int v203;
  uint64_t v204;
  void (*v205)(uint64_t, const __CFString *, CMTaggedBufferGroupFormatDescriptionRef);
  CMTaggedBufferGroupFormatDescriptionRef v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  void (*v210)(uint64_t, const __CFString *, CMTaggedBufferGroupFormatDescriptionRef);
  CMTaggedBufferGroupFormatDescriptionRef v211;
  opaqueCMBufferQueue *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t (*v215)(uint64_t, const __CFString *, uint64_t);
  uint64_t v216;
  uint64_t v217;
  void (*v218)(uint64_t, const __CFString *, uint64_t);
  NSObject *v219;
  unsigned int v220;
  unsigned int v221;
  CMTagValue v222;
  uint64_t v223;
  uint64_t v224;
  CMTagValue v225;
  uint64_t v226;
  CMTagValue v227;
  CMTag v228;
  uint64_t v229;
  CMTagValue v230;
  int64_t v231;
  const __CFDictionary *v232;
  int64_t v233;
  CMTagValue v234;
  uint64_t v235;
  int v236;
  CMTagValue v237;
  CFIndex v238;
  uint64_t v239;
  __CFDictionary *v240;
  CFMutableDictionaryRef v241;
  int64_t v242;
  double v243;
  double v244;
  double v245;
  double v246;
  __CFArray *v247;
  CFMutableArrayRef v248;
  CMTaggedBufferGroupFormatDescriptionRef formatDescription;
  const opaqueCMFormatDescription *formatDescriptiona;
  int v251;
  CMTagValue v252;
  BOOL v253;
  CMTag v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  CMTagValue idx;
  __CFArray *idxa;
  CFIndex idxb;
  CFMutableArrayRef v261;
  __CFArray *v262;
  CFIndex v263;
  opaqueCMSampleBuffer *sbuf;
  void *refcon;
  uint64_t v266;
  CFAllocatorRef allocator;
  const __CFAllocator *allocatora;
  __CFArray *Mutable;
  const __CFArray *v270;
  const __CFAllocator *theArray;
  __CFArray *theArraya;
  CMTime time;
  CMTime time2;
  CMTime time1;
  CMSampleBufferRef sBufOut;
  int64_t v277;
  int64_t v278;
  unsigned int v279;
  CFTypeRef v280;
  CFTypeRef v281;
  CMMutableTagCollectionRef newMutableCollectionCopyOut;
  CFTypeRef v283;
  CFTypeRef cf;
  void *value;
  CFDictionaryRef theDict;
  CMTime v287;
  void *values;
  int64_t v289;
  int64_t v290;
  CMTime sbufPTS;
  char v292;
  CMTime sbufDuration;
  os_log_type_t type[8];
  CMTimeScale timescale;
  _BYTE v296[64];
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  unsigned __int128 block;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  uint64_t v313;
  CMTag v314;
  CMTag v315;
  CMTag v316;
  CMTag v317;
  CMTag v318;
  CMTag v319;
  CGRect v320;
  CGRect v321;
  CGRect v322;
  CGRect v323;
  CGRect v324;
  CGRect v325;
  CGRect v326;
  CGRect v327;

  v313 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  sBufOut = 0;
  if (*(_DWORD *)DerivedStorage)
    return FigSignalErrorAt();
  v24 = DerivedStorage;
  v251 = a3;
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 408));
  v25 = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(v25 + 312) && !*(_QWORD *)(v25 + 328) && !*(_QWORD *)(v25 + 360))
  {
    CFArrayAppendValue(*(CFMutableArrayRef *)(v24 + 320), a2);
LABEL_88:
    MEMORY[0x19402EA24](*(_QWORD *)(v24 + 408));
    MutableCopy = 0;
    goto LABEL_446;
  }
  *(_BYTE *)(v24 + 544) = 1;
  v26 = CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA2678], 0);
  formatDescription = (CMTaggedBufferGroupFormatDescriptionRef)*MEMORY[0x1E0C9AE50];
  if (v26 == (CFTypeRef)*MEMORY[0x1E0C9AE50])
  {
    v38 = *(opaqueCMBufferQueue **)(v24 + 368);
    if (v38)
      CMBufferQueueEnqueue(v38, a2);
    goto LABEL_88;
  }
  v246 = a7;
  v243 = a9;
  v244 = a10;
  v245 = a11;
  sbuf = (opaqueCMSampleBuffer *)a2;
  SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray((CMSampleBufferRef)a2, 0);
  if (!SampleAttachmentsArray
    || (v28 = SampleAttachmentsArray, v29 = CFGetTypeID(SampleAttachmentsArray), v29 != CFArrayGetTypeID())
    || CFArrayGetCount(v28) < 1
    || (ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v28, 0)) == 0
    || (v31 = ValueAtIndex, v32 = CFGetTypeID(ValueAtIndex), v32 != CFDictionaryGetTypeID())
    || CFDictionaryGetValue(v31, (const void *)*MEMORY[0x1E0CA25D8]) != formatDescription)
  {
    ++*(_QWORD *)(v24 + 536);
  }
  refcon = a1;
  v266 = v24;
  if (*(_QWORD *)(v24 + 360))
  {
LABEL_15:
    v33 = CMBaseObjectGetDerivedStorage();
    *(_QWORD *)v296 = 0;
    *(_QWORD *)&v296[8] = v296;
    *(_QWORD *)&v296[16] = 0x2020000000;
    *(_QWORD *)&v296[24] = 0;
    Decryptor = FigSampleBufferGetDecryptor();
    sbufPTS.value = 0;
    *(_QWORD *)&sbufPTS.timescale = &sbufPTS;
    sbufPTS.epoch = 0x2020000000;
    v292 = 1;
    v35 = *(NSObject **)(v33 + 528);
    *(_QWORD *)&block = MEMORY[0x1E0C809B0];
    *((_QWORD *)&block + 1) = 3221225472;
    *(_QWORD *)&v304 = __vq_UpdateCryptorFromSampleBuffer_block_invoke;
    *((_QWORD *)&v304 + 1) = &unk_1E2FADA78;
    *(_QWORD *)&v306 = v33;
    *((_QWORD *)&v306 + 1) = Decryptor;
    *(_QWORD *)&v307 = refcon;
    *(_QWORD *)&v305 = v296;
    *((_QWORD *)&v305 + 1) = &sbufPTS;
    dispatch_sync(v35, &block);
    v36 = *(const void **)(*(_QWORD *)&v296[8] + 24);
    if (v36)
      CFRelease(v36);
    v37 = *(unsigned __int8 *)(*(_QWORD *)&sbufPTS.timescale + 24);
    _Block_object_dispose(&sbufPTS, 8);
    _Block_object_dispose(v296, 8);
    if (v37)
    {
      if (!*(_BYTE *)(v266 + 545))
        goto LABEL_37;
    }
    else if (!*(_BYTE *)(v266 + 545))
    {
      FigRenderPipelineSetProperty_0(*(_QWORD *)(v266 + 360), (uint64_t)CFSTR("Suspended"), (uint64_t)formatDescription);
      *(_BYTE *)(v266 + 545) = 1;
    }
    ++*(_QWORD *)(v266 + 496);
    CMBufferQueueGetDuration(&time1, *(CMBufferQueueRef *)(v266 + 368));
    CMTimeMake(&time2, 11, 1);
    if (CMTimeCompare(&time1, &time2) >= 1)
    {
      MutableCopy = FigSignalErrorAt();
      if ((_DWORD)MutableCopy)
        goto LABEL_439;
    }
LABEL_37:
    v45 = v266;
    v46 = sbuf;
    if (*(_BYTE *)(v266 + 672))
    {
      v290 = -1;
      v289 = -1;
      vq_tagCollectionGetLayerIDsIfPresent(sbuf, &v290, &v289);
      v45 = v266;
      if (v290 != *(_QWORD *)(v266 + 656) || (v46 = sbuf, v289 != *(_QWORD *)(v266 + 664)))
      {
        v287.value = 0;
        *(_QWORD *)type = 0;
        v47 = FigTagMakeWithSInt64Value();
        idx = v48;
        v261 = (CFMutableArrayRef)v47;
        v256 = FigTagMakeWithSInt64Value();
        v252 = v49;
        block = 0uLL;
        *(_QWORD *)&v304 = 0;
        CMSampleBufferGetPresentationTimeStamp((CMTime *)&block, sbuf);
        memset(v296, 0, 24);
        CMSampleBufferGetDuration((CMTime *)v296, sbuf);
        formatDescriptiona = CMSampleBufferGetFormatDescription(sbuf);
        TaggedBufferGroup = CMSampleBufferGetTaggedBufferGroup(sbuf);
        v51 = TaggedBufferGroup;
        if (TaggedBufferGroup && (Count = CMTaggedBufferGroupGetCount(TaggedBufferGroup), Count > 1))
        {
          allocatora = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          theArraya = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
          Mutable = CFArrayCreateMutable(allocatora, 0, MEMORY[0x1E0C9B378]);
          if (theArraya && Mutable)
          {
            v53 = 0;
            v54 = *MEMORY[0x1E0CA2838];
            v55 = *(_QWORD *)(MEMORY[0x1E0CA2838] + 8);
            v57 = *MEMORY[0x1E0CA2848];
            v56 = *(_QWORD *)(MEMORY[0x1E0CA2848] + 8);
            while (1)
            {
              TagCollectionAtIndex = CMTaggedBufferGroupGetTagCollectionAtIndex(v51, v53);
              if (!TagCollectionAtIndex)
                break;
              CVPixelBufferAtIndex = (const void *)FigTaggedBufferGroupGetCVPixelBufferAtIndex();
              if (!CVPixelBufferAtIndex)
                break;
              *(_QWORD *)&v314.category = v54;
              v314.value = v55;
              v60 = CMTagCollectionContainsTag(TagCollectionAtIndex, v314);
              *(_QWORD *)&v315.category = v57;
              v315.value = v56;
              if (v60 | CMTagCollectionContainsTag(TagCollectionAtIndex, v315))
              {
                MutableCopy = CMTagCollectionCreateMutableCopy(TagCollectionAtIndex, allocatora, (CMMutableTagCollectionRef *)type);
                if ((_DWORD)MutableCopy)
                  goto LABEL_62;
                CMTagCollectionRemoveAllTagsOfCategory(*(CMMutableTagCollectionRef *)type, kCMTagCategory_VideoLayerID);
                if (v60)
                  *(_QWORD *)&v61.category = v261;
                else
                  *(_QWORD *)&v61.category = v256;
                if (v60)
                  v61.value = idx;
                else
                  v61.value = v252;
                CMTagCollectionAddTag(*(CMMutableTagCollectionRef *)type, v61);
                CFArrayAppendValue(theArraya, *(const void **)type);
                if (*(_QWORD *)type)
                {
                  CFRelease(*(CFTypeRef *)type);
                  *(_QWORD *)type = 0;
                }
              }
              else
              {
                CFArrayAppendValue(theArraya, TagCollectionAtIndex);
              }
              CFArrayAppendValue(Mutable, CVPixelBufferAtIndex);
              if (Count == ++v53)
              {
                MutableCopy = MEMORY[0x19402F0D8](allocatora, theArraya, Mutable, &v287);
                if ((_DWORD)MutableCopy)
                  goto LABEL_62;
                *(_OWORD *)&sbufPTS.value = block;
                sbufPTS.epoch = v304;
                sbufDuration = *(CMTime *)v296;
                v62 = CMSampleBufferCreateForTaggedBufferGroup(allocatora, (CMTaggedBufferGroupRef)v287.value, &sbufPTS, &sbufDuration, formatDescriptiona, &sBufOut);
                goto LABEL_61;
              }
            }
          }
          v62 = FigSignalErrorAt();
LABEL_61:
          MutableCopy = v62;
LABEL_62:
          if (theArraya)
            CFRelease(theArraya);
          if (Mutable)
            CFRelease(Mutable);
        }
        else
        {
          MutableCopy = FigSignalErrorAt();
        }
        if (v287.value)
          CFRelease((CFTypeRef)v287.value);
        if (*(_QWORD *)type)
          CFRelease(*(CFTypeRef *)type);
        if ((_DWORD)MutableCopy)
          goto LABEL_439;
        v46 = sBufOut;
        v45 = v266;
      }
    }
    MutableCopy = CMBufferQueueEnqueue(*(CMBufferQueueRef *)(v45 + 368), v46);
    if ((_DWORD)MutableCopy)
      goto LABEL_439;
    ++*(_QWORD *)(v266 + 488);
    if (CMSampleBufferGetImageBuffer(sbuf) || vq_containsStereoVideoTaggedBufferGroup(sbuf, 0, 0))
    {
      v63 = v266;
      if (!*(_DWORD *)(v266 + 464))
        *(_DWORD *)(v266 + 464) = 1;
    }
    else
    {
      v63 = v266;
      if (*(_DWORD *)(v266 + 464) == 1)
        *(_DWORD *)(v266 + 464) = 0;
    }
    MEMORY[0x19402EEEC](*(_QWORD *)(v63 + 616));
    if (*(_QWORD *)(v266 + 608))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      MutableCopy = CMNotificationCenterPostNotification();
      v64 = *(const void **)(v266 + 608);
      if (v64)
      {
        CFRelease(v64);
        v65 = v266;
        *(_QWORD *)(v266 + 608) = 0;
        goto LABEL_82;
      }
    }
    else
    {
      MutableCopy = 0;
    }
    v65 = v266;
LABEL_82:
    MEMORY[0x19402EF04](*(_QWORD *)(v65 + 616));
    if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 64))
    {
      v66 = CMSampleBufferGetTaggedBufferGroup(sbuf);
      if (v66)
      {
        v67 = (__CVBuffer *)MEMORY[0x19402F0F0](v66, *MEMORY[0x1E0CA2838], *(_QWORD *)(MEMORY[0x1E0CA2838] + 8), 0);
        v68 = v67;
        if (v67)
        {
          DisplaySize = CVImageBufferGetDisplaySize(v67);
          width = DisplaySize.width;
          height = DisplaySize.height;
          EncodedSize = CVImageBufferGetEncodedSize(v68);
          Dimensions.width = (int)EncodedSize.width;
          LODWORD(v74) = (int)EncodedSize.height;
        }
        else
        {
          Dimensions.width = 0;
          LODWORD(v74) = 0;
          height = 0.0;
          width = 0.0;
        }
      }
      else
      {
        v75 = CMSampleBufferGetFormatDescription(sbuf);
        Dimensions = CMVideoFormatDescriptionGetDimensions(v75);
        PresentationDimensions = CMVideoFormatDescriptionGetPresentationDimensions(v75, 1u, 1u);
        width = PresentationDimensions.width;
        height = PresentationDimensions.height;
        v74 = HIDWORD(*(unint64_t *)&Dimensions);
      }
      CMSampleBufferGetOutputPresentationTimeStamp(&time, sbuf);
      Seconds = CMTimeGetSeconds(&time);
      *(_QWORD *)&block = 0;
      v86 = CMBaseObjectGetDerivedStorage();
      v87 = v86;
      v88 = (double)Dimensions.width;
      if (*(_DWORD *)(v86 + 232) != v251)
        goto LABEL_458;
      v320.origin.x = a4;
      v320.origin.y = a5;
      v320.size.width = a6;
      v320.size.height = v246;
      if (!CGRectEqualToRect(v320, *(CGRect *)(v86 + 136)))
        goto LABEL_458;
      v321.origin.x = a8;
      v321.origin.y = v243;
      v321.size.width = v244;
      v321.size.height = v245;
      if (!CGRectEqualToRect(v321, *(CGRect *)(v87 + 168)))
        goto LABEL_458;
      v322.origin.x = 0.0;
      v322.origin.y = 0.0;
      v322.size.width = (double)Dimensions.width;
      v322.size.height = (double)(int)v74;
      if (!CGRectEqualToRect(v322, *(CGRect *)(v87 + 72))
        || (v323.origin.x = 0.0,
            v323.origin.y = 0.0,
            v323.size.width = width,
            v323.size.height = height,
            !CGRectEqualToRect(v323, *(CGRect *)(v87 + 104)))
        || *(_BYTE *)(v87 + 32))
      {
LABEL_458:
        if (!FigDeferredTransactionCreate(*MEMORY[0x1E0C9AE00], (uint64_t *)&block))
        {
          v89 = *(_BYTE *)(v87 + 32);
          v90 = v251;
          if (*(_DWORD *)(v87 + 232) == v251)
          {
            v324.origin.x = a4;
            v324.origin.y = a5;
            v324.size.width = a6;
            v324.size.height = v246;
            if (!CGRectEqualToRect(v324, *(CGRect *)(v87 + 136)))
              goto LABEL_117;
            v325.origin.x = a8;
            v325.origin.y = v243;
            v325.size.width = v244;
            v325.size.height = v245;
            if (!CGRectEqualToRect(v325, *(CGRect *)(v87 + 168)))
              goto LABEL_117;
            v326.origin.x = 0.0;
            v326.origin.y = 0.0;
            v326.size.width = v88;
            v326.size.height = (double)(int)v74;
            if (CGRectEqualToRect(v326, *(CGRect *)(v87 + 72)))
            {
              v327.origin.x = 0.0;
              v327.origin.y = 0.0;
              v327.size.width = width;
              v327.size.height = height;
              v91 = !CGRectEqualToRect(v327, *(CGRect *)(v87 + 104));
            }
            else
            {
LABEL_117:
              v91 = 1;
            }
            v90 = v251;
          }
          else
          {
            v91 = 1;
          }
          if (!FPSupport_AppendDeferredTransactionChangeForUpdatingLayerTransform((const void *)block, *(void **)(v87 + 24), *(void **)(v87 + 16), v90, v89, v91, *(_BYTE *)(v87 + 237), (uint64_t)"vq_updateLayerTransform", a4, a5, a6, v246, a8, v243, v244, v245, 0, 0, *(uint64_t *)&v88,
                                COERCE__INT64((double)(int)v74),
                                0,
                                0,
                                *(uint64_t *)&width,
                                *(uint64_t *)&height,
                                Seconds))
          {
            FigDeferredTransactionCommit(block);
            *(CGFloat *)(v87 + 136) = a4;
            *(CGFloat *)(v87 + 144) = a5;
            *(CGFloat *)(v87 + 152) = a6;
            *(double *)(v87 + 160) = v246;
            *(CGFloat *)(v87 + 168) = a8;
            *(double *)(v87 + 176) = v243;
            *(double *)(v87 + 184) = v244;
            *(double *)(v87 + 192) = v245;
            *(_DWORD *)(v87 + 232) = v251;
            *(_QWORD *)(v87 + 72) = 0;
            *(_QWORD *)(v87 + 80) = 0;
            *(double *)(v87 + 88) = v88;
            *(double *)(v87 + 96) = (double)(int)v74;
            *(_QWORD *)(v87 + 104) = 0;
            *(_QWORD *)(v87 + 112) = 0;
            *(CGFloat *)(v87 + 120) = width;
            *(CGFloat *)(v87 + 128) = height;
            *(_BYTE *)(v87 + 32) = 0;
          }
        }
      }
      if ((_QWORD)block)
        CFRelease((CFTypeRef)block);
    }
    vq_updateImageQueueProtection();
    MEMORY[0x19402EA24](*(_QWORD *)(v266 + 408));
    if ((_DWORD)MutableCopy)
      goto LABEL_440;
    goto LABEL_446;
  }
  v224 = *(_QWORD *)(v24 + 640);
  allocator = (CFAllocatorRef)CMBaseObjectGetDerivedStorage();
  values = 0;
  memset(&sbufDuration, 0, sizeof(sbufDuration));
  CMTimeMake(&sbufDuration, 3, 30);
  memset(&v287, 0, sizeof(v287));
  CMTimeMake(&v287, 5, 30);
  theDict = 0;
  value = 0;
  cf = 0;
  newMutableCollectionCopyOut = 0;
  v283 = 0;
  v280 = 0;
  v281 = 0;
  v279 = 0;
  v277 = -1;
  v278 = -1;
  MEMORY[0x19402EEEC](*((_QWORD *)allocator + 38));
  if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 64))
  {
    v77 = (const __CFArray *)*((_QWORD *)allocator + 33);
    if (!v77 || CFArrayGetCount(v77) <= 0)
    {
      v78 = (const __CFArray *)*((_QWORD *)allocator + 36);
      if (!v78 || CFArrayGetCount(v78) <= 0)
      {
        MutableCopy = FigSignalErrorAt();
        v79 = 0;
        v232 = 0;
        v39 = 0;
LABEL_136:
        v247 = 0;
        idxa = 0;
        v262 = 0;
        v240 = 0;
        v270 = 0;
        goto LABEL_374;
      }
    }
  }
  theArray = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v39 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!CMSampleBufferGetTaggedBufferGroup(sbuf))
  {
    v80 = CMSampleBufferGetFormatDescription(sbuf);
    v81 = v80;
    values = v80;
    v82 = -1;
    if (!v80)
    {
      v257 = 0;
      v92 = 0;
      v233 = -1;
      v242 = -1;
      goto LABEL_186;
    }
    sbufPTS.value = 0;
    *(_QWORD *)type = 0;
    v290 = -1;
    v289 = -1;
    FPSupport_CreateTagCollectionFromVideoFormatDescriptionExtensionsWithDefaults(v80, &sbufPTS);
    if (CMTagCollectionCreateMutableCopy((CMTagCollectionRef)sbufPTS.value, theArray, (CMMutableTagCollectionRef *)type))
    {
      v233 = -1;
      v242 = -1;
LABEL_155:
      if (sbufPTS.value)
        CFRelease((CFTypeRef)sbufPTS.value);
      if (*(_QWORD *)type)
        CFRelease(*(CFTypeRef *)type);
      if (dword_1EE2A32E8)
      {
        LODWORD(sbufPTS.value) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v97 = sbufPTS.value;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0]))
          v98 = v97;
        else
          v98 = v97 & 0xFFFFFFFE;
        if (v98)
        {
          v99 = "YES";
          *(_QWORD *)&v296[4] = "vq_createVideoRenderPipeline";
          *(_DWORD *)v296 = 136316162;
          *(_WORD *)&v296[12] = 2048;
          if (!v279)
            v99 = "NO";
          *(_QWORD *)&v296[14] = refcon;
          *(_WORD *)&v296[22] = 2048;
          *(_QWORD *)&v296[24] = sbuf;
          *(_WORD *)&v296[32] = 2082;
          *(_QWORD *)&v296[34] = v99;
          *(_WORD *)&v296[42] = 2112;
          *(_QWORD *)&v296[44] = v39;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v257 = 0;
        v100 = v279 == 4 || v279 == 1;
        if (!v100 || !dword_1EE2A32E8)
          goto LABEL_182;
        LODWORD(sbufPTS.value) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v101 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v102 = sbufPTS.value;
        if (os_log_type_enabled(v101, type[0]))
          v103 = v102;
        else
          v103 = v102 & 0xFFFFFFFE;
        if (v103)
        {
          *(_QWORD *)&v296[4] = "vq_createVideoRenderPipeline";
          v104 = "TestIPB";
          *(_DWORD *)v296 = 136316674;
          *(_WORD *)&v296[12] = 2048;
          if (v279 == 1)
            v104 = "MV-HEVC";
          *(_QWORD *)&v296[14] = refcon;
          *(_WORD *)&v296[22] = 2048;
          *(_QWORD *)&v296[24] = sbuf;
          *(_WORD *)&v296[32] = 2082;
          *(_QWORD *)&v296[34] = v104;
          *(_WORD *)&v296[42] = 2048;
          *(_QWORD *)&v296[44] = v233;
          *(_WORD *)&v296[52] = 2048;
          *(_QWORD *)&v296[54] = v82;
          *(_WORD *)&v296[62] = 2048;
          *(_QWORD *)&v297 = v242;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v257 = 0;
      goto LABEL_182;
    }
    CMTagCollectionAddTag(*(CMMutableTagCollectionRef *)type, *MEMORY[0x1E0CA2800]);
    MVHEVCVideoLayerIDs = FigVideoFormatDescriptionGetMVHEVCVideoLayerIDs();
    if (MVHEVCVideoLayerIDs)
    {
      if (CMTagCollectionContainsTag(*(CMTagCollectionRef *)type, *MEMORY[0x1E0CA2840]))
      {
        CMTagCollectionRemoveAllTagsOfCategory(*(CMMutableTagCollectionRef *)type, kCMTagCategory_StereoView);
        CMTagCollectionAddTag(*(CMMutableTagCollectionRef *)type, *MEMORY[0x1E0CA2830]);
      }
      v242 = -1;
      if (v290 == -1 || v289 == -1)
      {
LABEL_140:
        if (CMTagCollectionContainsTag(*(CMTagCollectionRef *)type, *MEMORY[0x1E0CA2830]))
        {
          if (MVHEVCVideoLayerIDs)
          {
            if (VTIsStereoMVHEVCDecodeSupported())
            {
              v94 = 1;
LABEL_154:
              CFArrayAppendValue(v39, *(const void **)type);
              v279 = v94;
              v233 = v290;
              v82 = v289;
              v277 = v289;
              v278 = v290;
              goto LABEL_155;
            }
          }
          else
          {
            MediaSubType = CMFormatDescriptionGetMediaSubType(v81);
            block = *MEMORY[0x1E0CA2808];
            *(_QWORD *)v296 = 0;
            CMTagCollectionGetTagsWithCategory(*(CMTagCollectionRef *)type, kCMTagCategory_PackingType, (CMTag *)&block, 1, (CMItemCount *)v296);
            if (*(_QWORD *)v296 == 1
              && (CMTagEqualToTag((CMTag)block, *MEMORY[0x1E0CA2818])
               || CMTagEqualToTag((CMTag)block, *MEMORY[0x1E0CA2810])))
            {
              v290 = -1;
              v242 = -1;
              v289 = -1;
              v94 = 2;
              goto LABEL_154;
            }
            if (MediaSubType == 1768972832)
            {
              v242 = 0;
              v290 = 0;
              v289 = 1;
              v94 = 4;
              goto LABEL_154;
            }
          }
          CMTagCollectionRemoveAllTagsOfCategory(*(CMMutableTagCollectionRef *)type, kCMTagCategory_StereoView);
          CMTagCollectionAddTag(*(CMMutableTagCollectionRef *)type, *MEMORY[0x1E0CA2840]);
          v94 = 0;
          v290 = -1;
          v242 = -1;
          v289 = -1;
          goto LABEL_154;
        }
        v94 = 0;
        goto LABEL_154;
      }
      CMFormatDescriptionGetExtension(v81, (CFStringRef)*MEMORY[0x1E0CA21F8]);
      if (FigCFEqual())
      {
        v84 = v290;
      }
      else
      {
        v93 = FigCFEqual();
        v84 = v289;
        if (!v93)
          v84 = 0;
      }
    }
    else
    {
      v84 = -1;
    }
    v242 = v84;
    goto LABEL_140;
  }
  if (vq_containsStereoVideoTaggedBufferGroup(sbuf, v39, (int *)&v279))
  {
    if (dword_1EE2A32E8)
    {
      LODWORD(sbufPTS.value) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v40 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v41 = sbufPTS.value;
      if (os_log_type_enabled(v40, type[0]))
        v42 = v41;
      else
        v42 = v41 & 0xFFFFFFFE;
      if (v42)
      {
        v43 = "monoscopic";
        *(_QWORD *)&v296[4] = "vq_createVideoRenderPipeline";
        *(_DWORD *)v296 = 136316162;
        *(_WORD *)&v296[12] = 2048;
        if (v279 == 3)
          v43 = "separate stereo";
        *(_QWORD *)&v296[14] = refcon;
        *(_WORD *)&v296[22] = 2048;
        *(_QWORD *)&v296[24] = sbuf;
        *(_WORD *)&v296[32] = 2082;
        *(_QWORD *)&v296[34] = v43;
        *(_WORD *)&v296[42] = 2112;
        *(_QWORD *)&v296[44] = v39;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v279 == 3)
    {
      v277 = 1;
      v278 = 0;
      if (!vq_tagCollectionGetLayerIDsIfPresent(sbuf, &v278, &v277))
      {
LABEL_135:
        MutableCopy = FigSignalErrorAt();
        v79 = 0;
        v232 = 0;
        goto LABEL_136;
      }
      v233 = v278;
      values = CMSampleBufferGetFormatDescription(sbuf);
      v257 = 1;
      *((_BYTE *)allocator + 672) = 1;
      *((_QWORD *)allocator + 82) = v233;
      v82 = v277;
      *((_QWORD *)allocator + 83) = v277;
      v242 = v233;
      goto LABEL_182;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  v257 = 0;
  v82 = -1;
  v233 = -1;
  v242 = -1;
LABEL_182:
  if (values)
  {
    v92 = CFArrayCreate(theArray, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
    if (!v92)
      goto LABEL_135;
  }
  else
  {
    v92 = 0;
  }
LABEL_186:
  v270 = v92;
  v231 = v82;
  if (v279)
  {
    v105 = (const __CFArray *)*((_QWORD *)allocator + 36);
    if (v105)
    {
      if (CFArrayGetCount(v105) >= 1)
      {
        v248 = (CFMutableArrayRef)CMBaseObjectGetDerivedStorage();
        v106 = (const __CFArray *)*((_QWORD *)v248 + 36);
        if (v106)
        {
          v238 = CFArrayGetCount(v106);
          if (v238 >= 1)
          {
            v236 = 0;
            v107 = 0;
            do
            {
              idxb = v107;
              v108 = CFArrayGetValueAtIndex(*((CFArrayRef *)v248 + 36), v107);
              v241 = (CFMutableDictionaryRef)CFArrayGetValueAtIndex(*((CFArrayRef *)v248 + 37), idxb);
              *(_QWORD *)&block = 0;
              v109 = *(void (**)(const void *, const __CFAllocator *, unsigned __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
              if (v109)
                v109(v108, theArray, &block);
              if ((_QWORD)block)
              {
                v263 = CFArrayGetCount((CFArrayRef)block);
                if (v263 >= 1)
                {
                  v110 = 0;
                  v111 = 1;
                  do
                  {
                    v253 = v111;
                    v112 = CFArrayGetValueAtIndex((CFArrayRef)block, v110);
                    CountOfDataChannels = FigDataChannelGroupGetCountOfDataChannels((uint64_t)v112);
                    if (CountOfDataChannels >= 1)
                    {
                      v114 = 0;
                      while (1)
                      {
                        DataChannelByIndex = (const OpaqueCMTagCollection *)FigDataChannelGroupGetDataChannelByIndex((uint64_t)v112, v114);
                        if (!v39)
                          break;
                        v116 = DataChannelByIndex;
                        v117 = CFArrayGetCount(v39);
                        if (v117 < 1)
                          break;
                        v118 = 0;
                        v119 = 1;
                        do
                        {
                          while (1)
                          {
                            v120 = (const OpaqueCMTagCollection *)CFArrayGetValueAtIndex(v39, v118);
                            if (!CMTagCollectionContainsTagsOfCollection(v120, v116))
                              break;
                            if ((v119 & 1) == 0)
                              goto LABEL_212;
                            v119 = 0;
                            v100 = v117 - 1 == v118++;
                            if (v100)
                              goto LABEL_210;
                          }
                          ++v118;
                        }
                        while (v117 != v118);
                        if ((v119 & 1) != 0)
                          break;
LABEL_210:
                        if (++v114 == CountOfDataChannels)
                        {
                          *((_BYTE *)v241 + 16) = 1;
                          v121 = v236;
                          if (v253)
                            v121 = 1;
                          v236 = v121;
                          goto LABEL_217;
                        }
                      }
                    }
LABEL_212:
                    v111 = ++v110 < v263;
                  }
                  while (v110 != v263);
                }
              }
              *((_BYTE *)v241 + 16) = 0;
LABEL_217:
              v107 = idxb + 1;
            }
            while (idxb + 1 != v238);
            if ((_BYTE)v236 && v279 <= 4 && ((1 << v279) & 0x1A) != 0)
            {
              if (dword_1EE2A32E8)
              {
                LODWORD(sbufPTS.value) = 0;
                type[0] = OS_LOG_TYPE_DEFAULT;
                v122 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                v123 = sbufPTS.value;
                if (os_log_type_enabled(v122, type[0]))
                  v124 = v123;
                else
                  v124 = v123 & 0xFFFFFFFE;
                if (v124)
                {
                  v125 = "Separate Stereo Video";
                  if (v279 == 4)
                    v125 = "Stereo TestIPB";
                  *(_QWORD *)&v296[4] = "vq_createVideoRenderPipeline";
                  *(_DWORD *)v296 = 136315650;
                  if (v279 == 1)
                    v126 = "Stereo MV-HEVC";
                  else
                    v126 = v125;
                  *(_WORD *)&v296[12] = 2048;
                  *(_QWORD *)&v296[14] = refcon;
                  *(_WORD *)&v296[22] = 2082;
                  *(_QWORD *)&v296[24] = v126;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              v257 = 1;
            }
          }
        }
      }
    }
  }
  block = *(_OWORD *)"ARGB";
  *(_DWORD *)v296 = 0;
  LODWORD(sbufPTS.value) = 0;
  FigGetAlignmentForIOSurfaceOutput();
  MutableCopy = FPSupport_CreateDestinationPixelBufferAttributes(0, 0, (char *)&block, 0, 2, 1, *(int *)v296, sbufPTS.value, 0, &theDict);
  if ((_DWORD)MutableCopy)
    goto LABEL_453;
  if (!theDict || (v127 = CFDictionaryCreateMutableCopy(theArray, 0, theDict), (v128 = v127) == 0))
  {
    MutableCopy = FigSignalErrorAt();
    if (!(_DWORD)MutableCopy)
      goto LABEL_241;
LABEL_453:
    v79 = 0;
    v232 = 0;
    v247 = 0;
    idxa = 0;
    v262 = 0;
    v240 = 0;
    goto LABEL_374;
  }
  CFDictionarySetValue(v127, (const void *)*MEMORY[0x1E0CA8FE8], formatDescription);
  if (theDict)
    CFRelease(theDict);
  theDict = v128;
LABEL_241:
  *(_QWORD *)type = v287.value;
  flags = v287.flags;
  timescale = v287.timescale;
  epoch = v287.epoch;
  v311 = 0u;
  v312 = 0u;
  v309 = 0u;
  v310 = 0u;
  v307 = 0u;
  v308 = 0u;
  v305 = 0u;
  v306 = 0u;
  block = 0u;
  v304 = 0u;
  v301 = 0u;
  v302 = 0u;
  v299 = 0u;
  v300 = 0u;
  v297 = 0u;
  v298 = 0u;
  memset(v296, 0, sizeof(v296));
  if ((sbufDuration.flags & 0x1D) != 1)
  {
    if ((v287.flags & 0x1D) != 1)
    {
      v232 = CFDictionaryCreate(theArray, (const void **)&block, (const void **)v296, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      goto LABEL_253;
    }
    LODWORD(v131) = 0;
    goto LABEL_246;
  }
  *(_QWORD *)&block = CFSTR("PreparedQueueLowWaterLevel");
  sbufPTS = sbufDuration;
  *(_QWORD *)v296 = CMTimeCopyAsDictionary(&sbufPTS, theArray);
  v131 = 1;
  if ((flags & 0x1D) == 1)
  {
LABEL_246:
    *(_QWORD *)((unint64_t)&block | (8 * v131)) = CFSTR("PreparedQueueHighWaterLevel");
    sbufPTS.value = *(_QWORD *)type;
    sbufPTS.timescale = timescale;
    sbufPTS.flags = flags;
    sbufPTS.epoch = epoch;
    *(_QWORD *)((unint64_t)v296 | (8 * v131)) = CMTimeCopyAsDictionary(&sbufPTS, theArray);
    v131 = (v131 + 1);
  }
  v232 = CFDictionaryCreate(theArray, (const void **)&block, (const void **)v296, v131, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v132 = (CFTypeRef *)v296;
  do
  {
    if (*v132)
      CFRelease(*v132);
    ++v132;
    --v131;
  }
  while (v131);
LABEL_253:
  v240 = CFDictionaryCreateMutable(theArray, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (*((_BYTE *)allocator + 628))
    CFDictionarySetValue(v240, (const void *)*MEMORY[0x1E0CEDC88], formatDescription);
  v262 = CFArrayCreateMutable(theArray, 0, MEMORY[0x1E0C9B378]);
  idxa = CFArrayCreateMutable(theArray, 0, MEMORY[0x1E0C9B378]);
  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 64))
  {
    MutableCopy = FigImageQueueCreateForCoreAnimation(0, *((const void **)allocator + 6), &value);
    if ((_DWORD)MutableCopy)
      goto LABEL_454;
    v133 = *((_QWORD *)allocator + 69);
    if (v133)
    {
      FigBaseObject = FigImageQueueGetFigBaseObject(value);
      v135 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
      if (!v135)
      {
        v79 = 0;
        v247 = 0;
        goto LABEL_373;
      }
      MutableCopy = v135(FigBaseObject, CFSTR("FigImageQueueProperty_Timebase"), v133);
      if ((_DWORD)MutableCopy)
      {
LABEL_454:
        v79 = 0;
        v247 = 0;
        goto LABEL_374;
      }
    }
    CFArrayAppendValue(v262, value);
    if (v257)
    {
      v136 = CFDictionaryCreateMutable(theArray, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      FigCFDictionarySetInt32();
      CFArrayAppendValue(idxa, v136);
      if (v136)
        CFRelease(v136);
    }
    else
    {
      CFArrayAppendValue(idxa, (const void *)*MEMORY[0x1E0C9B0D0]);
    }
  }
  if (*((_QWORD *)allocator + 33))
  {
    v247 = CFArrayCreateMutable(theArray, 0, MEMORY[0x1E0C9B378]);
    v137 = (const __CFArray *)*((_QWORD *)allocator + 33);
    if (v137)
      v138 = CFArrayGetCount(v137);
    else
      v138 = 0;
    v139 = (const __CFArray *)*((_QWORD *)allocator + 34);
    if (v139)
      v140 = CFArrayGetCount(v139);
    else
      v140 = 0;
    if (v138 >= 1)
    {
      v141 = 0;
      v142 = (const void *)*MEMORY[0x1E0C9B0D0];
      v143 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
      do
      {
        v144 = CFArrayGetValueAtIndex(*((CFArrayRef *)allocator + 33), v141);
        MutableCopy = FigImageQueueCreateForCoreVideo(0, &cf);
        if ((_DWORD)MutableCopy)
          goto LABEL_450;
        v145 = cf;
        v146 = *((_QWORD *)allocator + 69);
        v147 = *(uint64_t (**)(CFTypeRef, const void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 8);
        if (!v147)
          goto LABEL_362;
        MutableCopy = v147(v145, v144, v146);
        if ((_DWORD)MutableCopy)
          goto LABEL_450;
        CFArrayAppendValue(v247, cf);
        CFArrayAppendValue(v262, cf);
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        v148 = v142;
        if (v141 < v140)
          v148 = CFArrayGetValueAtIndex(*((CFArrayRef *)allocator + 34), v141);
        if (v257)
        {
          if (v142 == v148)
            v149 = (uint64_t)CFDictionaryCreateMutable(theArray, 0, MEMORY[0x1E0C9B390], v143);
          else
            v149 = FigCFDictionaryCreateMutableCopy();
          v150 = (const void *)v149;
          FigCFDictionarySetInt32();
          CFArrayAppendValue(idxa, v150);
          if (v150)
            CFRelease(v150);
        }
        else
        {
          CFArrayAppendValue(idxa, v148);
        }
      }
      while (v138 != ++v141);
    }
  }
  else
  {
    v247 = 0;
  }
  if (!*((_QWORD *)allocator + 36))
  {
LABEL_332:
    MutableCopy = FigVideoRenderPipelineCreateWithFigImageQueueArray(theArray, (int)v240, theDict, 0, 1, v262, idxa, v232, &v280);
    if ((_DWORD)MutableCopy)
      goto LABEL_450;
    if (v224)
    {
      v174 = FigRenderPipelineGetFigBaseObject(v280);
      v175 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
      if (!v175)
      {
LABEL_362:
        v79 = 0;
LABEL_373:
        MutableCopy = 4294954514;
        goto LABEL_374;
      }
      MutableCopy = v175(v174, CFSTR("ClientPID"), v224);
      if ((_DWORD)MutableCopy)
        goto LABEL_450;
    }
    v176 = FigRenderPipelineGetFigBaseObject(v280);
    v177 = *(void (**)(uint64_t, const __CFString *, CMTaggedBufferGroupFormatDescriptionRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v177)
      v177(v176, CFSTR("VideoEnqueueResetsSystemSleepTimer"), formatDescription);
    for (i = 0; ; ++i)
    {
      v179 = (const __CFArray *)*((_QWORD *)allocator + 36);
      if (v179)
        v179 = (const __CFArray *)CFArrayGetCount(v179);
      if (i >= (uint64_t)v179)
      {
        v188 = (const void *)*((_QWORD *)allocator + 7);
        v189 = value;
        *((_QWORD *)allocator + 7) = value;
        if (v189)
          CFRetain(v189);
        if (v188)
          CFRelease(v188);
        v190 = (const void *)*((_QWORD *)allocator + 35);
        *((_QWORD *)allocator + 35) = v247;
        if (v247)
          CFRetain(v247);
        if (v190)
          CFRelease(v190);
        v79 = 0;
        MutableCopy = 0;
        *(_QWORD *)(v266 + 360) = v280;
        v280 = 0;
        goto LABEL_374;
      }
      v180 = CFArrayGetValueAtIndex(*((CFArrayRef *)allocator + 36), i);
      v181 = (CFArrayRef *)CFArrayGetValueAtIndex(*((CFArrayRef *)allocator + 37), i);
      MutableCopy = FigDataChannelConfigurationCreate(theArray, 0, (uint64_t *)&v281);
      if ((_DWORD)MutableCopy)
        goto LABEL_450;
      if (CFArrayGetCount(v181[3]) >= 1)
        break;
LABEL_357:
      v186 = v281;
      v187 = *(uint64_t (**)(const void *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
      if (!v187)
        goto LABEL_362;
      MutableCopy = v187(v180, v186);
      if ((_DWORD)MutableCopy)
        goto LABEL_450;
      if (v281)
      {
        CFRelease(v281);
        v281 = 0;
      }
    }
    v182 = 0;
    while (1)
    {
      VideoTargetInfoCopyFigImageQueueAtIndex((uint64_t)v181, v182, &v283);
      v183 = (const void *)FigCFArrayGetValueAtIndex();
      v79 = v183 ? (const OpaqueCMTagCollection *)CFRetain(v183) : 0;
      MutableCopy = CMTagCollectionCreateMutableCopy(v79, theArray, &newMutableCollectionCopyOut);
      if ((_DWORD)MutableCopy)
        goto LABEL_374;
      v184 = newMutableCollectionCopyOut;
      v316 = CMTagMakeWithSInt64Value(kCMTagCategory_ChannelID, ++v182);
      CMTagCollectionAddTag(v184, v316);
      v185 = v283;
      MutableCopy = FigDataChannelConfigurationAddFigImageQueue((uint64_t)v281, v283, (uint64_t)newMutableCollectionCopyOut, 0, v270);
      if ((_DWORD)MutableCopy)
        goto LABEL_374;
      if (newMutableCollectionCopyOut)
      {
        CFRelease(newMutableCollectionCopyOut);
        newMutableCollectionCopyOut = 0;
      }
      if (v185)
      {
        CFRelease(v185);
        v283 = 0;
      }
      if (v79)
        CFRelease(v79);
      if (v182 >= CFArrayGetCount(v181[3]))
        goto LABEL_357;
    }
  }
  v151 = *MEMORY[0x1E0CA2828];
  v152 = *(_QWORD *)(MEMORY[0x1E0CA2828] + 8);
  v154 = *MEMORY[0x1E0CA2808];
  v153 = *(_QWORD *)(MEMORY[0x1E0CA2808] + 8);
  v155 = (uint64_t *)MEMORY[0x1E0CA27F8];
  *(_QWORD *)v296 = 0;
  v254 = (CMTag)*MEMORY[0x1E0CA27F8];
  block = *MEMORY[0x1E0CA27F8];
  v237 = v152;
  v239 = v151;
  v234 = v153;
  v235 = v154;
  if (!v39 || (v156 = CFArrayGetCount(v39), v156 < 1))
  {
LABEL_318:
    v168 = (const __CFArray *)*((_QWORD *)allocator + 36);
    if (v168)
    {
      v169 = CFArrayGetCount(v168);
      if (v169 >= 1)
      {
        v170 = 0;
        v227 = *(_QWORD *)(MEMORY[0x1E0CA2838] + 8);
        v229 = *MEMORY[0x1E0CA2838];
        v225 = *(_QWORD *)(MEMORY[0x1E0CA2848] + 8);
        v226 = *MEMORY[0x1E0CA2848];
        v255 = *MEMORY[0x1E0CA2840];
        v230 = *(_QWORD *)(MEMORY[0x1E0CA2840] + 8);
        v222 = *(_QWORD *)(MEMORY[0x1E0CA2830] + 8);
        v223 = *MEMORY[0x1E0CA2830];
        while (1)
        {
          v171 = CFArrayGetValueAtIndex(*((CFArrayRef *)allocator + 36), v170);
          v172 = (CFMutableArrayRef *)CFArrayGetValueAtIndex(*((CFArrayRef *)allocator + 37), v170);
          CFArrayRemoveAllValues(v172[3]);
          CFArrayRemoveAllValues(v172[4]);
          if (v257)
          {
            if (*((_BYTE *)v172 + 16))
            {
              MutableCopy = vq_createFigImageQueueAndTagsForVideoTargetAndAppendToArraysAndTargetInfo((uint64_t)refcon, (uint64_t)v171, v229, v227, v233, v262, idxa, (uint64_t)v172, v151, v152, v154, v153);
              if ((_DWORD)MutableCopy)
                goto LABEL_450;
              FigImageQueueAndTagsForVideoTargetAndAppendToArraysAndTargetInfo = vq_createFigImageQueueAndTagsForVideoTargetAndAppendToArraysAndTargetInfo((uint64_t)refcon, (uint64_t)v171, v226, v225, v231, v262, idxa, (uint64_t)v172, v151, v152, v154, v153);
            }
            else
            {
              FigImageQueueAndTagsForVideoTargetAndAppendToArraysAndTargetInfo = vq_createFigImageQueueAndTagsForVideoTargetAndAppendToArraysAndTargetInfo((uint64_t)refcon, (uint64_t)v171, v255, v230, v242, v262, idxa, (uint64_t)v172, v239, v237, v235, v234);
            }
          }
          else
          {
            FigImageQueueAndTagsForVideoTargetAndAppendToArraysAndTargetInfo = v279 == 2 && *((_BYTE *)v172 + 16)
                                                                             ? vq_createFigImageQueueAndTagsForVideoTargetAndAppendToArraysAndTargetInfo((uint64_t)refcon, (uint64_t)v171, v223, v222, -1, v262, idxa, (uint64_t)v172, v151, v152, v154, v153): vq_createFigImageQueueAndTagsForVideoTargetAndAppendToArraysAndTargetInfo((uint64_t)refcon, (uint64_t)v171, v255, v230, -1, v262,
                                                                                 idxa,
                                                                                 (uint64_t)v172,
                                                                                 v239,
                                                                                 v237,
                                                                                 v235,
                                                                                 v234);
          }
          MutableCopy = FigImageQueueAndTagsForVideoTargetAndAppendToArraysAndTargetInfo;
          if ((_DWORD)FigImageQueueAndTagsForVideoTargetAndAppendToArraysAndTargetInfo)
            goto LABEL_450;
          if (v169 == ++v170)
            goto LABEL_332;
        }
      }
    }
    goto LABEL_332;
  }
  v157 = 0;
  v158 = 0;
  v159 = 0;
  v160 = *v155;
  v161 = v155[1];
  *(_QWORD *)&v228.category = v160;
  v228.value = v161;
  v162 = v161;
  v163 = v160;
  while (1)
  {
    v164 = (const OpaqueCMTagCollection *)CFArrayGetValueAtIndex(v39, v157);
    *(_QWORD *)v296 = 0;
    block = (unsigned __int128)v254;
    CMTagCollectionGetTagsWithCategory(v164, kCMTagCategory_ProjectionType, (CMTag *)&block, 1, (CMItemCount *)v296);
    if (*(_QWORD *)v296 == 1)
    {
      *(_QWORD *)&v317.category = v160;
      v317.value = v161;
      if (!CMTagEqualToTag((CMTag)block, v317))
      {
        *(_QWORD *)&v165.category = block;
        if (v159)
        {
          v165.value = *((_QWORD *)&block + 1);
          *(_QWORD *)&v318.category = v163;
          v318.value = v162;
          if (!CMTagEqualToTag(v165, v318))
            goto LABEL_449;
          v159 = 1;
        }
        else
        {
          v159 = 1;
          v162 = *((_QWORD *)&block + 1);
          v163 = block;
        }
      }
    }
    *(_QWORD *)v296 = 0;
    block = (unsigned __int128)v254;
    CMTagCollectionGetTagsWithCategory(v164, kCMTagCategory_PackingType, (CMTag *)&block, 1, (CMItemCount *)v296);
    if (*(_QWORD *)v296 == 1)
    {
      *(_QWORD *)&v319.category = v160;
      v319.value = v161;
      if (!CMTagEqualToTag((CMTag)block, v319))
        break;
    }
LABEL_305:
    if (v156 == ++v157)
    {
      if (v159)
        v151 = v163;
      else
        v151 = v239;
      if (v159)
        v152 = v162;
      else
        v152 = v237;
      v167 = v158 == 0;
      if (v158)
        v154 = *(_QWORD *)&v228.category;
      else
        v154 = v235;
      if (v167)
        v153 = v234;
      else
        v153 = v228.value;
      goto LABEL_318;
    }
  }
  *(_QWORD *)&v166.category = block;
  if (!v158)
  {
    v158 = 1;
    v228 = (CMTag)block;
    goto LABEL_305;
  }
  v166.value = *((_QWORD *)&block + 1);
  if (CMTagEqualToTag(v166, v228))
  {
    v158 = 1;
    goto LABEL_305;
  }
LABEL_449:
  MutableCopy = FigSignalErrorAt();
  v153 = v234;
  v154 = v235;
  v152 = v237;
  v151 = v239;
  if (!(_DWORD)MutableCopy)
    goto LABEL_318;
LABEL_450:
  v79 = 0;
LABEL_374:
  if (value)
    CFRelease(value);
  if (cf)
    CFRelease(cf);
  if (v247)
    CFRelease(v247);
  if (v283)
    CFRelease(v283);
  if (v79)
    CFRelease(v79);
  if (newMutableCollectionCopyOut)
    CFRelease(newMutableCollectionCopyOut);
  if (v281)
    CFRelease(v281);
  MEMORY[0x19402EF04](*((_QWORD *)allocator + 38));
  if (v262)
    CFRelease(v262);
  if (idxa)
    CFRelease(idxa);
  if (v280)
    CFRelease(v280);
  if (v232)
    CFRelease(v232);
  if (v240)
    CFRelease(v240);
  if (theDict)
    CFRelease(theDict);
  if (v39)
    CFRelease(v39);
  if (v270)
    CFRelease(v270);
  if ((_DWORD)MutableCopy)
    goto LABEL_439;
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  MutableCopy = FigStartForwardingMediaServicesProcessDeathNotification();
  if ((_DWORD)MutableCopy)
    goto LABEL_439;
  vq_updateForCurrentTimebaseRate(refcon);
  v191 = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(v266 + 360));
  v192 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
  if (!v192)
    goto LABEL_438;
  MutableCopy = v192(v191, CFSTR("SourceSampleBufferQueue"), *MEMORY[0x1E0C9AE00], v266 + 368);
  if ((_DWORD)MutableCopy)
    goto LABEL_439;
  v193 = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(v266 + 360));
  v194 = *(void (**)(uint64_t, const __CFString *, CMTaggedBufferGroupFormatDescriptionRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v194)
    v194(v193, CFSTR("ObeyEmptyMediaMarkers"), formatDescription);
  v195 = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(v266 + 360));
  VTable = CMBaseObjectGetVTable();
  v197 = (const opaqueCMFormatDescription *)*MEMORY[0x1E0C9AE40];
  v198 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(VTable + 8) + 56);
  if (v198)
    v198(v195, CFSTR("RenderEmptyMedia"), *MEMORY[0x1E0C9AE40]);
  v199 = v266;
  v200 = *(_QWORD *)(v266 + 392);
  if (v200)
  {
    v201 = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(v266 + 360));
    v202 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    v199 = v266;
    if (v202)
    {
      v202(v201, CFSTR("VideoDecoderUsage"), v200);
      v199 = v266;
    }
  }
  v203 = *(unsigned __int8 *)(v199 + 400);
  v204 = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(v199 + 360));
  v205 = *(void (**)(uint64_t, const __CFString *, CMTaggedBufferGroupFormatDescriptionRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v205)
  {
    if (v203)
      v206 = formatDescription;
    else
      v206 = v197;
    v205(v204, CFSTR("ForceFullPowerDecode"), v206);
  }
  v207 = v266;
  if (*(_BYTE *)(v266 + 401))
  {
    v208 = *(unsigned __int8 *)(v266 + 402);
    v209 = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(v266 + 360));
    v210 = *(void (**)(uint64_t, const __CFString *, CMTaggedBufferGroupFormatDescriptionRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    v207 = v266;
    if (v210)
    {
      if (v208)
        v211 = formatDescription;
      else
        v211 = v197;
      v210(v209, CFSTR("PreventDisplaySleepDuringVideoPlayback"), v211);
      v207 = v266;
    }
  }
  v212 = *(opaqueCMBufferQueue **)(v207 + 368);
  block = *(_OWORD *)(v207 + 416);
  *(_QWORD *)&v304 = *(_QWORD *)(v207 + 432);
  MutableCopy = CMBufferQueueInstallTrigger(v212, (CMBufferQueueTriggerCallback)vq_sourceSampleBufferQueue_reachedLowWater, refcon, 2, (CMTime *)&block, (CMBufferQueueTriggerToken *)(v207 + 480));
  if ((_DWORD)MutableCopy)
    goto LABEL_439;
  MutableCopy = CMBufferQueueInstallTriggerWithIntegerThreshold(*(CMBufferQueueRef *)(v266 + 368), (CMBufferQueueTriggerCallback)vq_sourceSampleBufferQueue_becameEmpty, refcon, 10, 1, (CMBufferQueueTriggerToken *)(v266 + 472));
  if ((_DWORD)MutableCopy)
    goto LABEL_439;
  if (!*(_QWORD *)(v266 + 552))
  {
LABEL_436:
    v216 = *(_QWORD *)(v266 + 560);
    v217 = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(v266 + 360));
    v218 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v218)
      v218(v217, CFSTR("PlaybackSessionID"), v216);
    goto LABEL_15;
  }
  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 64))
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(v266 + 240));
    MutableCopy = FigLayerSynchronizerCreate((_QWORD *)(v266 + 248));
    if ((_DWORD)MutableCopy)
    {
      MEMORY[0x19402EF04](*(_QWORD *)(v266 + 240));
      goto LABEL_439;
    }
    FigLayerSynchronizerSetCompensateForDisplayLatency(*(_QWORD *)(v266 + 248), *(_BYTE *)(v266 + 239));
    MEMORY[0x19402EF04](*(_QWORD *)(v266 + 240));
    MutableCopy = vq_setSynchronizedLayers();
    if ((_DWORD)MutableCopy)
      goto LABEL_439;
    CFRetain(*(CFTypeRef *)(v266 + 8));
    MutableCopy = FigSyncMomentSourceCreateWithDispatchQueueAndDestructor((uint64_t)vq_synchronizeLayerToMoment, *(_QWORD *)(v266 + 8), (void (*)(uint64_t))vq_ReleaseWeakReferenceToSelf, *(const void **)(v266 + 552), *(NSObject **)(v266 + 520), (uint64_t *)(v266 + 256));
    if ((_DWORD)MutableCopy)
      goto LABEL_439;
  }
  v213 = *(_QWORD *)(v266 + 552);
  v214 = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(v266 + 360));
  v215 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v215)
  {
LABEL_438:
    MutableCopy = 4294954514;
    goto LABEL_439;
  }
  MutableCopy = v215(v214, CFSTR("Timebase"), v213);
  if (!(_DWORD)MutableCopy)
    goto LABEL_436;
LABEL_439:
  MEMORY[0x19402EA24](*(_QWORD *)(v266 + 408));
LABEL_440:
  LODWORD(sbufPTS.value) = 0;
  LOBYTE(sbufDuration.value) = 0;
  v219 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  v220 = sbufPTS.value;
  if (os_log_type_enabled(v219, sbufDuration.value))
    v221 = v220;
  else
    v221 = v220 & 0xFFFFFFFE;
  if (v221)
  {
    *(_DWORD *)v296 = 136315906;
    *(_QWORD *)&v296[4] = "vq_EnqueueFrame";
    *(_WORD *)&v296[12] = 2048;
    *(_QWORD *)&v296[14] = refcon;
    *(_WORD *)&v296[22] = 2048;
    *(_QWORD *)&v296[24] = sbuf;
    *(_WORD *)&v296[32] = 1024;
    *(_DWORD *)&v296[34] = MutableCopy;
    _os_log_send_and_compose_impl();
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_446:
  if (sBufOut)
    CFRelease(sBufOut);
  return MutableCopy;
}

void sub_192ED2A00(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x250], 8);
  _Block_object_dispose(&STACK[0x2A0], 8);
  _Unwind_Resume(a1);
}

uint64_t vq_EnqueueH264Frame(uint64_t a1, int a2, int a3, const __CFData *a4, OpaqueCMBlockBuffer *a5, uint64_t a6, uint64_t a7, double a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15)
{
  return vq_EnqueueH264FrameWithTimingInfoBaggage(a1, a2, a3, a4, a5, a6, a7, 0, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t vq_EnqueueH264FrameWithTimingInfoBaggage(uint64_t a1, int a2, int a3, const __CFData *a4, OpaqueCMBlockBuffer *a5, uint64_t a6, uint64_t a7, const void *a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16)
{
  uint64_t DerivedStorage;
  CMVideoFormatDescriptionRef *v34;
  const opaqueCMFormatDescription *v35;
  uint64_t v36;
  const __CFDictionary *Extension;
  const __CFArray *Value;
  const __CFAllocator *v39;
  CMAttachmentBearerRef v40;
  uint64_t (*v41)(uint64_t, CMAttachmentBearerRef, uint64_t, double, double, double, double, double, double, double, double);
  uint64_t v42;
  CFTypeID TypeID;
  CFTypeID v44;
  CMAttachmentBearerRef target;
  size_t sampleSizeArray;
  CMSampleTimingInfo sampleTimingArray;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&sampleTimingArray, 0, sizeof(sampleTimingArray));
  target = 0;
  sampleSizeArray = 0;
  if (*(_DWORD *)DerivedStorage)
    return FigSignalErrorAt();
  *(_BYTE *)(DerivedStorage + 544) = 1;
  v34 = (CMVideoFormatDescriptionRef *)(DerivedStorage + 344);
  v35 = *(const opaqueCMFormatDescription **)(DerivedStorage + 344);
  if (!v35)
  {
LABEL_17:
    if (!a4)
      goto LABEL_7;
    goto LABEL_18;
  }
  if (CMVideoFormatDescriptionGetDimensions(v35).width != a2
    || CMVideoFormatDescriptionGetDimensions(*v34).height != a3)
  {
    goto LABEL_34;
  }
  if (!a4)
  {
LABEL_7:
    v36 = FigSignalErrorAt();
    goto LABEL_25;
  }
  if (*v34)
  {
    Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(*v34, (CFStringRef)*MEMORY[0x1E0CA2240]);
    if (Extension)
    {
      TypeID = CFDictionaryGetTypeID();
      if (TypeID == CFGetTypeID(Extension))
      {
        Value = (const __CFArray *)CFDictionaryGetValue(Extension, CFSTR("avcC"));
        if (Value)
        {
          v44 = CFArrayGetTypeID();
          if (v44 == CFGetTypeID(Value))
            CFArrayGetValueAtIndex(Value, 0);
        }
      }
    }
  }
  if (!FigCFEqual())
  {
LABEL_34:
    if (*v34)
    {
      CFRelease(*v34);
      *v34 = 0;
    }
    goto LABEL_17;
  }
LABEL_18:
  if (*v34)
  {
    v39 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  }
  else
  {
    CFDataGetLength(a4);
    CFDataGetBytePtr(a4);
    v39 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v42 = FigVideoFormatDescriptionCreateWithSampleDescriptionExtensionAtom();
    if ((_DWORD)v42)
      goto LABEL_29;
  }
  *(_OWORD *)&sampleTimingArray.duration.value = *MEMORY[0x1E0CA2E18];
  sampleTimingArray.duration.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  sampleTimingArray.decodeTimeStamp = sampleTimingArray.duration;
  CMClockMakeHostTimeFromSystemUnits(&sampleTimingArray.presentationTimeStamp, a6);
  sampleSizeArray = CMBlockBufferGetDataLength(a5);
  v36 = CMSampleBufferCreate(v39, a5, 1u, 0, 0, *v34, 1, 1, &sampleTimingArray, 1, &sampleSizeArray, (CMSampleBufferRef *)&target);
  if (!(_DWORD)v36)
  {
    if (a8)
      CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E0CA2640], a8, 1u);
    v40 = target;
    v41 = *(uint64_t (**)(uint64_t, CMAttachmentBearerRef, uint64_t, double, double, double, double, double, double, double, double))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (!v41)
    {
      v42 = 4294954514;
      goto LABEL_29;
    }
    v36 = v41(a1, v40, a7, a9, a10, a11, a12, a13, a14, a15, a16);
  }
LABEL_25:
  v42 = v36;
LABEL_29:
  if (target)
    CFRelease(target);
  return v42;
}

uint64_t vq_Flush(uint64_t a1, char a2)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  const __CFArray *v7;
  const __CFAllocator *v8;
  CFDictionaryRef v9;
  uint64_t v10;
  __CFDictionary *Mutable;
  uint64_t v12;
  CFIndex i;
  const __CFArray *Count;
  CFArrayRef *ValueAtIndex;
  CFIndex v16;
  uint64_t v17;
  CMAttachmentBearerRef target;
  void *values;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  target = 0;
  values = 0;
  if (*(_DWORD *)DerivedStorage)
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 408));
  v7 = *(const __CFArray **)(v6 + 320);
  if (v7 && CFArrayGetCount(v7) >= 1)
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v6 + 320));
  if (*(_QWORD *)(v6 + 368))
  {
    ++*(_DWORD *)(v6 + 384);
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, (const void *)(v6 + 384));
    v9 = CFDictionaryCreate(v8, MEMORY[0x1E0CA2748], (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v10 = CMSampleBufferCreate(v8, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)&target);
    if ((_DWORD)v10)
    {
      v17 = v10;
    }
    else
    {
      CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E0CA26E0], values, 1u);
      if ((a2 & 2) != 0)
      {
        Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        CFDictionaryAddValue(Mutable, CFSTR("videoQueueFlushSBuf"), (const void *)*MEMORY[0x1E0C9AE50]);
        CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E0CA26C8], Mutable, 1u);
        if (Mutable)
          CFRelease(Mutable);
      }
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      CMBufferQueueEnqueue(*(CMBufferQueueRef *)(v6 + 368), target);
      if ((a2 & 1) != 0)
      {
        if (*(_QWORD *)(v6 + 24) && !*(_BYTE *)(v6 + 32))
        {
          cf = 0;
          v12 = CMBaseObjectGetDerivedStorage();
          if (!FigDeferredTransactionCreate((uint64_t)v8, (uint64_t *)&cf))
          {
            FPSupport_AppendDeferredTransactionChangeForHidingLayer(cf, *(void **)(v12 + 24), (uint64_t)"vq_hideMaskingLayer");
            FigDeferredTransactionCommit((uint64_t)cf);
            *(_BYTE *)(v12 + 32) = 1;
          }
          if (cf)
            CFRelease(cf);
        }
        if (*(_QWORD *)(v6 + 48) && *(_BYTE *)(v6 + 629))
          CAImageQueueFlush();
        MEMORY[0x19402EEEC](*(_QWORD *)(v6 + 304));
        for (i = 0; ; ++i)
        {
          Count = *(const __CFArray **)(v6 + 296);
          if (Count)
            Count = (const __CFArray *)CFArrayGetCount(Count);
          if (i >= (uint64_t)Count)
            break;
          ValueAtIndex = (CFArrayRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v6 + 296), i);
          if (CFArrayGetCount(ValueAtIndex[3]) >= 1)
          {
            v16 = 0;
            do
            {
              cf = 0;
              VideoTargetInfoCopyCAImageQueueAtIndex((uint64_t)ValueAtIndex, v16, (uint64_t)&cf);
              if (cf)
              {
                CAImageQueueFlush();
                CFRelease(cf);
              }
              ++v16;
            }
            while (v16 < CFArrayGetCount(ValueAtIndex[3]));
          }
        }
        MEMORY[0x19402EF04](*(_QWORD *)(v6 + 304));
      }
      v17 = 0;
    }
  }
  else
  {
    if ((a2 & 2) != 0)
      vq_safelyPostNotification(a1, CFSTR("FlushComplete"), 0);
    v17 = 0;
    v9 = 0;
  }
  MEMORY[0x19402EA24](*(_QWORD *)(v6 + 408));
  if (values)
    CFRelease(values);
  if (v9)
    CFRelease(v9);
  if (target)
    CFRelease(target);
  return v17;
}

BOOL vq_IsAboveHighWaterLevel()
{
  uint64_t DerivedStorage;
  opaqueCMBufferQueue *v1;
  int v2;
  uint64_t v3;
  CMTime v5;
  CMTime time1;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(opaqueCMBufferQueue **)(DerivedStorage + 368);
  if (v1)
  {
    v2 = *(_DWORD *)(DerivedStorage + 464);
    if (v2 == 1)
    {
      if (CMBufferQueueGetBufferCount(v1) > 0)
        return 1;
    }
    else if (!v2)
    {
      CMBufferQueueGetDuration(&time1, v1);
      value = time1.value;
      timescale = time1.timescale;
      if ((time1.flags & 1) != 0)
      {
        time1.value = value;
        time1.timescale = timescale;
        v5 = *(CMTime *)(DerivedStorage + 440);
        if (CMTimeCompare(&time1, &v5) > 0)
          return 1;
      }
    }
  }
  v3 = CMBaseObjectGetDerivedStorage();
  return *(_BYTE *)(v3 + 312) && !*(_QWORD *)(v3 + 328) && !*(_QWORD *)(v3 + 360);
}

uint64_t vq_EnqueueFrameWithFormatDescriptionAndTimingInfoBaggage(uint64_t a1, uint64_t a2, OpaqueCMBlockBuffer *a3, uint64_t a4, uint64_t a5, const void *a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, double a14)
{
  uint64_t DerivedStorage;
  uint64_t v30;
  CFAllocatorRef *v31;
  uint64_t FormatDescriptionFromSerializedAtomDataBlockBuffer;
  const void *v33;
  CMAttachmentBearerRef v34;
  uint64_t (*v35)(uint64_t, CMAttachmentBearerRef, uint64_t, double, double, double, double, double, double, double, double);
  uint64_t v36;
  CMAttachmentBearerRef target;
  size_t sampleSizeArray;
  CMSampleTimingInfo sampleTimingArray;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&sampleTimingArray, 0, sizeof(sampleTimingArray));
  target = 0;
  sampleSizeArray = 0;
  if (*(_DWORD *)DerivedStorage)
    return FigSignalErrorAt();
  if (!a3)
    goto LABEL_16;
  v30 = DerivedStorage;
  *(_BYTE *)(DerivedStorage + 544) = 1;
  v31 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (a2)
  {
    FormatDescriptionFromSerializedAtomDataBlockBuffer = FigRemote_CreateFormatDescriptionFromSerializedAtomDataBlockBuffer();
    if (!(_DWORD)FormatDescriptionFromSerializedAtomDataBlockBuffer)
    {
      v33 = *(const void **)(v30 + 352);
      if (v33)
        CFRelease(v33);
      *(_QWORD *)(v30 + 352) = 0;
      goto LABEL_16;
    }
  }
  else
  {
    if (!*(_QWORD *)(DerivedStorage + 352))
    {
LABEL_16:
      FormatDescriptionFromSerializedAtomDataBlockBuffer = FigSignalErrorAt();
      goto LABEL_14;
    }
    *(_OWORD *)&sampleTimingArray.duration.value = *MEMORY[0x1E0CA2E18];
    sampleTimingArray.duration.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    sampleTimingArray.decodeTimeStamp = sampleTimingArray.duration;
    CMClockMakeHostTimeFromSystemUnits(&sampleTimingArray.presentationTimeStamp, a4);
    sampleSizeArray = CMBlockBufferGetDataLength(a3);
    FormatDescriptionFromSerializedAtomDataBlockBuffer = CMSampleBufferCreate(*v31, a3, 1u, 0, 0, *(CMFormatDescriptionRef *)(v30 + 352), 1, 1, &sampleTimingArray, 1, &sampleSizeArray, (CMSampleBufferRef *)&target);
    if (!(_DWORD)FormatDescriptionFromSerializedAtomDataBlockBuffer)
    {
      if (a6)
        CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E0CA2640], a6, 1u);
      v34 = target;
      v35 = *(uint64_t (**)(uint64_t, CMAttachmentBearerRef, uint64_t, double, double, double, double, double, double, double, double))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (!v35)
      {
        v36 = 4294954514;
        goto LABEL_18;
      }
      FormatDescriptionFromSerializedAtomDataBlockBuffer = v35(a1, v34, a5, a7, a8, a9, a10, a11, a12, a13, a14);
    }
  }
LABEL_14:
  v36 = FormatDescriptionFromSerializedAtomDataBlockBuffer;
LABEL_18:
  if (target)
    CFRelease(target);
  return v36;
}

uint64_t vq_RequestDecodeForPreroll(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t, void *);
  CFDictionaryRef v7;
  void *values;

  values = a2;
  v4 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 360);
  if (v4)
  {
    v5 = *(uint64_t (**)(uint64_t, void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
    if (v5)
      return v5(v4, a2);
    else
      return 4294954514;
  }
  else
  {
    if (a2)
    {
      v7 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)kFigVideoQueueNotificationParameter_RequestID, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      vq_safelyPostNotification(a1, CFSTR("CompletedDecodeForPreroll"), v7);
      if (v7)
        CFRelease(v7);
    }
    else
    {
      vq_safelyPostNotification(a1, CFSTR("CompletedDecodeForPreroll"), 0);
    }
    return 0;
  }
}

void vq_sourceSampleBufferQueue_reachedLowWater(uint64_t a1)
{
  _DWORD *DerivedStorage;

  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage && !DerivedStorage[116])
    vq_safelyPostNotification(a1, CFSTR("VideoQueueNowBelowLowWaterLevel"), 0);
}

void vq_sourceSampleBufferQueue_becameEmpty(uint64_t a1)
{
  vq_safelyPostNotification(a1, CFSTR("VideoQueueNowBelowLowWaterLevel"), 0);
}

void vq_synchronizeLayerToMoment(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;

  v3 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3)
  {
    v4 = (const void *)v3;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!*(_DWORD *)DerivedStorage)
    {
      v6 = DerivedStorage;
      MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 240));
      v7 = *(_QWORD *)(v6 + 248);
      if (v7)
        FigLayerSynchronizerSynchronizeToMoment(v7, a2, 0);
      MEMORY[0x19402EF04](*(_QWORD *)(v6 + 240));
    }
    CFRelease(v4);
  }
}

BOOL vq_tagCollectionGetLayerIDsIfPresent(opaqueCMSampleBuffer *a1, int64_t *a2, int64_t *a3)
{
  OpaqueCMTaggedBufferGroup *TaggedBufferGroup;
  OpaqueCMTaggedBufferGroup *v6;
  CMItemCount Count;
  CMItemCount v8;
  CFIndex v9;
  int v10;
  int v11;
  uint64_t v12;
  CMTagValue v13;
  CMTagValue v14;
  uint64_t v15;
  const OpaqueCMTagCollection *TagCollectionAtIndex;
  BOOL v17;
  int64_t *v19;
  int64_t *v20;
  int64_t SInt64Value;
  int64_t v22;
  uint64_t v23;
  CMTag v24;
  CMItemCount numberOfTagsCopied;
  CMTag tagBuffer;
  CMTag v27;
  CMTag v28;

  TaggedBufferGroup = CMSampleBufferGetTaggedBufferGroup(a1);
  if (TaggedBufferGroup && (v6 = TaggedBufferGroup, Count = CMTaggedBufferGroupGetCount(TaggedBufferGroup), Count >= 1))
  {
    v8 = Count;
    v19 = a2;
    v20 = a3;
    v9 = 0;
    v22 = 0;
    v23 = 0;
    v10 = 0;
    v11 = 0;
    SInt64Value = 0;
    v12 = *MEMORY[0x1E0CA2838];
    v13 = *(_QWORD *)(MEMORY[0x1E0CA2838] + 8);
    v24 = (CMTag)*MEMORY[0x1E0CA27F8];
    v15 = *MEMORY[0x1E0CA2848];
    v14 = *(_QWORD *)(MEMORY[0x1E0CA2848] + 8);
    do
    {
      TagCollectionAtIndex = CMTaggedBufferGroupGetTagCollectionAtIndex(v6, v9);
      tagBuffer = v24;
      numberOfTagsCopied = 0;
      *(_QWORD *)&v27.category = v12;
      v27.value = v13;
      if (CMTagCollectionContainsTag(TagCollectionAtIndex, v27))
      {
        v11 = 1;
        if (!CMTagCollectionGetTagsWithCategory(TagCollectionAtIndex, kCMTagCategory_VideoLayerID, &tagBuffer, 1, &numberOfTagsCopied)&& numberOfTagsCopied == 1)
        {
          SInt64Value = CMTagGetSInt64Value(tagBuffer);
          v11 = 1;
          HIDWORD(v23) = 1;
        }
      }
      *(_QWORD *)&v28.category = v15;
      v28.value = v14;
      if (CMTagCollectionContainsTag(TagCollectionAtIndex, v28))
      {
        v10 = 1;
        if (!CMTagCollectionGetTagsWithCategory(TagCollectionAtIndex, kCMTagCategory_VideoLayerID, &tagBuffer, 1, &numberOfTagsCopied)&& numberOfTagsCopied == 1)
        {
          v22 = CMTagGetSInt64Value(tagBuffer);
          v10 = 1;
          LODWORD(v23) = 1;
        }
      }
      ++v9;
    }
    while (v8 != v9);
    if (HIDWORD(v23) && (_DWORD)v23)
    {
      *v19 = SInt64Value;
      *v20 = v22;
    }
  }
  else
  {
    v11 = 0;
    v10 = 0;
  }
  if (v11)
    v17 = v10 == 0;
  else
    v17 = 1;
  return !v17;
}

OpaqueCMTaggedBufferGroup *vq_containsStereoVideoTaggedBufferGroup(opaqueCMSampleBuffer *a1, __CFArray *a2, int *a3)
{
  OpaqueCMTaggedBufferGroup *result;
  OpaqueCMTaggedBufferGroup *v6;
  CMItemCount Count;
  CMItemCount v8;
  CFIndex v9;
  int v10;
  uint64_t v11;
  CMTagValue v12;
  uint64_t v13;
  CMTagValue v14;
  CMTagCollectionRef TagCollectionAtIndex;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  int v20;
  int *v21;
  CMTagValue v22;
  uint64_t v23;
  uint64_t v24;
  CMTag v25;
  CMTag v26;
  CMTag v27;
  CMTag v28;

  result = CMSampleBufferGetTaggedBufferGroup(a1);
  if (!result)
    return result;
  v6 = result;
  Count = CMTaggedBufferGroupGetCount(result);
  if (Count < 1)
  {
    result = 0;
    v10 = 0;
    if (!a3)
      return result;
    goto LABEL_28;
  }
  v8 = Count;
  v21 = a3;
  v9 = 0;
  v24 = 0;
  v10 = 0;
  v11 = *MEMORY[0x1E0CA2800];
  v12 = *(_QWORD *)(MEMORY[0x1E0CA2800] + 8);
  v13 = *MEMORY[0x1E0CA2838];
  v14 = *(_QWORD *)(MEMORY[0x1E0CA2838] + 8);
  v22 = *(_QWORD *)(MEMORY[0x1E0CA2848] + 8);
  v23 = *MEMORY[0x1E0CA2848];
  do
  {
    TagCollectionAtIndex = CMTaggedBufferGroupGetTagCollectionAtIndex(v6, v9);
    *(_QWORD *)&v25.category = v11;
    v25.value = v12;
    if (CMTagCollectionContainsTag(TagCollectionAtIndex, v25))
    {
      if (a2)
        CFArrayAppendValue(a2, TagCollectionAtIndex);
      *(_QWORD *)&v26.category = v13;
      v26.value = v14;
      if (CMTagCollectionContainsTag(TagCollectionAtIndex, v26))
      {
        ++v10;
        LODWORD(v24) = 1;
      }
      else
      {
        v27.value = v22;
        *(_QWORD *)&v27.category = v23;
        v16 = CMTagCollectionContainsTag(TagCollectionAtIndex, v27);
        if (v16)
          ++v10;
        v17 = HIDWORD(v24);
        if (v16)
          v17 = 1;
        HIDWORD(v24) = v17;
      }
    }
    ++v9;
  }
  while (v8 != v9);
  if ((_DWORD)v24)
    v18 = HIDWORD(v24) == 0;
  else
    v18 = 1;
  v19 = v18;
  result = (OpaqueCMTaggedBufferGroup *)(v19 ^ 1u);
  if (v18 || !a2)
  {
    a3 = v21;
    if (!v21)
      return result;
    goto LABEL_28;
  }
  if (!FigTagCollectionCreateMutable())
  {
    *(_QWORD *)&v28.category = v11;
    v28.value = v12;
    CMTagCollectionAddTag(0, v28);
    CMTagCollectionAddTag(0, *MEMORY[0x1E0CA2830]);
    FPSupport_AddDefaultVideoTagsToChannelDescriptionForMissingCategories();
    CFArrayAppendValue(a2, 0);
  }
  a3 = v21;
  result = (OpaqueCMTaggedBufferGroup *)1;
  if (v21)
  {
LABEL_28:
    if ((result & (v10 == 2)) != 0)
      v20 = 3;
    else
      v20 = 0;
    *a3 = v20;
  }
  return result;
}

uint64_t vq_createFigImageQueueAndTagsForVideoTargetAndAppendToArraysAndTargetInfo(uint64_t a1, uint64_t a2, uint64_t a3, CMTagValue a4, int64_t a5, __CFArray *a6, __CFArray *a7, uint64_t a8, uint64_t a9, CMTagValue a10, uint64_t a11, CMTagValue a12)
{
  uint64_t DerivedStorage;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, _QWORD, void **);
  uint64_t v22;
  uint64_t v23;
  uint64_t FigBaseObject;
  uint64_t (*v25)(uint64_t, const __CFString *, uint64_t);
  const __CFAllocator *v26;
  CFMutableDictionaryRef Mutable;
  uint64_t v28;
  OpaqueCMTagCollection *v29;
  CMMutableTagCollectionRef v30;
  CMMutableTagCollectionRef tagCollection;
  void *value;
  CMTag v34;
  CMTag v35;
  CMTag v36;
  CMTag v37;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  tagCollection = 0;
  value = 0;
  if (!a2 || !a6 || !a7 || !a8)
  {
    v22 = FigSignalErrorAt();
    goto LABEL_26;
  }
  v20 = DerivedStorage;
  v21 = *(uint64_t (**)(uint64_t, _QWORD, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v21)
    goto LABEL_12;
  v22 = v21(a2, 0, &value);
  if ((_DWORD)v22)
    goto LABEL_26;
  v23 = *(_QWORD *)(v20 + 552);
  if (v23)
  {
    FigBaseObject = FigImageQueueGetFigBaseObject(value);
    v25 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 56);
    if (v25)
    {
      v22 = v25(FigBaseObject, CFSTR("FigImageQueueProperty_Timebase"), v23);
      if (!(_DWORD)v22)
        goto LABEL_10;
LABEL_26:
      v28 = v22;
      goto LABEL_20;
    }
LABEL_12:
    v28 = 4294954514;
    goto LABEL_20;
  }
LABEL_10:
  CFArrayAppendValue(a6, value);
  if (a5 < 0)
  {
    CFArrayAppendValue(a7, (const void *)*MEMORY[0x1E0C9B0D0]);
    Mutable = 0;
    v26 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  }
  else
  {
    v26 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    FigCFDictionarySetInt32();
    CFArrayAppendValue(a7, Mutable);
  }
  v28 = CMTagCollectionCreateMutable(v26, 0, &tagCollection);
  if (!(_DWORD)v28)
  {
    CMTagCollectionAddTag(tagCollection, *MEMORY[0x1E0CA2800]);
    *(_QWORD *)&v34.category = a3;
    v34.value = a4;
    CMTagCollectionAddTag(tagCollection, v34);
    if ((a5 & 0x8000000000000000) == 0)
    {
      v29 = tagCollection;
      v35 = CMTagMakeWithSInt64Value(kCMTagCategory_VideoLayerID, a5);
      CMTagCollectionAddTag(v29, v35);
    }
    *(_QWORD *)&v36.category = a9;
    v36.value = a10;
    CMTagCollectionAddTag(tagCollection, v36);
    *(_QWORD *)&v37.category = a11;
    v37.value = a12;
    CMTagCollectionAddTag(tagCollection, v37);
    FPSupport_AddDefaultVideoTagsToChannelDescriptionForMissingCategories();
    v30 = tagCollection;
    CFArrayAppendValue(*(CFMutableArrayRef *)(a8 + 24), value);
    CFArrayAppendValue(*(CFMutableArrayRef *)(a8 + 32), v30);
  }
  if (Mutable)
    CFRelease(Mutable);
LABEL_20:
  if (value)
    CFRelease(value);
  if (tagCollection)
    CFRelease(tagCollection);
  return v28;
}

void vq_safelyPostNotification(uint64_t a1, const void *a2, const void *a3)
{
  _DWORD *DerivedStorage;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  _QWORD v10[8];

  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    v6 = DerivedStorage;
    v7 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v7)
    {
      v8 = v7;
      if (a2)
        CFRetain(a2);
      if (a3)
        CFRetain(a3);
      v9 = *((_QWORD *)v6 + 65);
      v10[0] = MEMORY[0x1E0C809B0];
      v10[1] = 3221225472;
      v10[2] = __vq_safelyPostNotification_block_invoke;
      v10[3] = &__block_descriptor_64_e5_v8__0l;
      v10[4] = v6;
      v10[5] = a2;
      v10[6] = v8;
      v10[7] = a3;
      dispatch_async(v9, v10);
    }
  }
}

void __vq_safelyPostNotification_block_invoke(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  if (!**(_DWORD **)(a1 + 32))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  v2 = *(const void **)(a1 + 48);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 56);
  if (v4)
    CFRelease(v4);
}

uint64_t FigVTTDocumentWriterGetClassID()
{
  MEMORY[0x19402F294](&FigVTTDocumentWriterGetClassID_sRegisterFigVTTDocumentWriterBaseTypeOnce, figVTTDocumentWriter_RegisterFigVTTDocumentWriterBaseType);
  return sFigVTTDocumentWriterClassID;
}

uint64_t figVTTDocumentWriter_RegisterFigVTTDocumentWriterBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigVTTDocumentWriterGetTypeID()
{
  MEMORY[0x19402F294](&FigVTTDocumentWriterGetClassID_sRegisterFigVTTDocumentWriterBaseTypeOnce, figVTTDocumentWriter_RegisterFigVTTDocumentWriterBaseType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigVTTDocumentWriterSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v6)
    return v6(a1, a2, a3);
  else
    return 4294954514;
}

uint64_t FigVTTDocumentWriterCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v8)
    return v8(a1, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigVTTDocumentWriterInvalidate(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);

  if (!a1)
    return 4294954516;
  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
  if (v2)
    return v2(a1);
  else
    return 4294954514;
}

uint64_t FigVTTDocumentWriterCreateAndAddNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v8)
    return v8(a1, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigVTTDocumentWriterFlush(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);

  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v2)
    return v2(a1);
  else
    return 4294954514;
}

CFStringRef figVTTDocumentWriter_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigVTTDocumentWriter %p]"), a1);
}

double FigGlobalNetworkBandwidthTrackerGetAggregateBandwidth()
{
  return 0.0;
}

uint64_t FigVideoQueueGetClassID()
{
  MEMORY[0x19402F294](&FigVideoQueueGetClassID_sRegisterFigVideoQueueTypeOnce, RegisterFigVideoQueueType);
  return sFigVideoQueueClassID;
}

uint64_t RegisterFigVideoQueueType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigVideoQueueGetTypeID()
{
  MEMORY[0x19402F294](&FigVideoQueueGetClassID_sRegisterFigVideoQueueTypeOnce, RegisterFigVideoQueueType);
  return CMBaseClassGetCFTypeID();
}

CFStringRef FigVideoQueueCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigVideoQueue %p]"), a1);
}

void FigStreamingRestrictionsGetLatestRestrictions(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  if (sr_SetupOnce_sFigStreamingRestrictionsSetupOnce != -1)
    dispatch_once(&sr_SetupOnce_sFigStreamingRestrictionsSetupOnce, &__block_literal_global_83);
  MEMORY[0x19402EEEC](sCurrentStreamingRestrictionsMutex);
  if (a1)
    *a1 = sCurrentStreamingRestrictions;
  if (a2)
    *a2 = HIDWORD(sCurrentStreamingRestrictions);
  if (a3)
    *a3 = dword_1EE2A1C10;
  JUMPOUT(0x19402EF04);
}

void sr_checkTokenLevelAndHandleIfNecessary()
{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;
  const __CFDictionary *Mutable;
  __CFNotificationCenter *LocalCenter;
  const void *context;
  uint64_t state64;

  context = 0;
  state64 = 0;
  if (sStreamingRestrictionsNotifyListenerToken != -1)
  {
    notify_get_state(sStreamingRestrictionsNotifyListenerToken, &state64);
    v0 = state64;
    v1 = state64 / 0xA;
    state64 /= 0xAuLL;
    if (sCurrentRestrictorLevel != v0 / 0xA)
    {
      sCurrentRestrictorLevel = v1;
      if (sStreamingRestrictionsPolicy)
      {
        CFDictionaryApplyFunction((CFDictionaryRef)sStreamingRestrictionsPolicy, (CFDictionaryApplierFunction)sr_findPolicyForLevel, &context);
        if (!context)
          return;
        CFDictionaryGetValue((CFDictionaryRef)sStreamingRestrictionsPolicy, context);
        FigCFDictionaryGetInt32IfPresent();
        FigCFDictionaryGetInt32IfPresent();
        FigCFDictionaryGetInt32IfPresent();
        MEMORY[0x19402EEEC](sCurrentStreamingRestrictionsMutex);
        if (sCurrentStreamingRestrictions)
          v2 = 0;
        else
          v2 = dword_1EE2A1C10 == 0;
        if (v2)
        {
          MEMORY[0x19402EF04](sCurrentStreamingRestrictionsMutex);
        }
        else
        {
          sCurrentStreamingRestrictions = 0;
          dword_1EE2A1C10 = 0;
          MEMORY[0x19402EF04](sCurrentStreamingRestrictionsMutex);
          Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          LocalCenter = CFNotificationCenterGetLocalCenter();
          CFNotificationCenterPostNotification(LocalCenter, CFSTR("StreamingRestrictions_RestrictionsChanged"), 0, Mutable, 1u);
          if (Mutable)
            CFRelease(Mutable);
        }
      }
    }
    if (context)
      CFRelease(context);
  }
}

void sr_findPolicyForLevel(const __CFString *a1, uint64_t a2, CFStringRef *a3)
{
  SInt32 IntValue;
  SInt32 v6;
  CFStringRef v8;

  IntValue = CFStringGetIntValue(a1);
  if (*a3)
    v6 = CFStringGetIntValue(*a3);
  else
    v6 = -1;
  if (sCurrentRestrictorLevel >= (unint64_t)IntValue && v6 < IntValue)
  {
    v8 = *a3;
    *a3 = a1;
    if (a1)
      CFRetain(a1);
    if (v8)
      CFRelease(v8);
  }
}

uint64_t CreateServedAIGState(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  v2 = malloc_type_calloc(1uLL, 0x38uLL, 0x10200409C399896uLL);
  if (!v2 || (v3 = FigDispatchQueueCreateWithPriority(), result = 0, (v2[5] = v3) == 0))
    result = FigSignalErrorAt();
  *a1 = v2;
  return result;
}

uint64_t aigXPCServer_setAudioSessionBehaviour(uint64_t a1, _OWORD *a2)
{
  uint64_t UsingPrimaryAVAudioSessionSiblingForAuditToken;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, _QWORD, const __CFString *);
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, _QWORD);
  uint64_t v12;
  __int128 v13;
  const void *SInt32;
  uint64_t FigBaseObject;
  uint64_t (*v16)(uint64_t, const __CFString *, const void *);
  uint64_t v17;
  _OWORD v19[2];
  CFTypeRef cf;

  cf = 0;
  if (in_audio_mx_server_process())
  {
    UsingPrimaryAVAudioSessionSiblingForAuditToken = CMSessionCreate();
    if (!(_DWORD)UsingPrimaryAVAudioSessionSiblingForAuditToken)
    {
      v5 = (uint64_t *)(a1 + 16);
      UsingPrimaryAVAudioSessionSiblingForAuditToken = FigAudioSessionCreateWithCMSession(*MEMORY[0x1E0C9AE00], cf, (_QWORD *)(a1 + 16));
      if (!(_DWORD)UsingPrimaryAVAudioSessionSiblingForAuditToken)
      {
        v6 = *v5;
        if (*v5)
        {
          v7 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
          if (v7)
          {
            v8 = *(void (**)(uint64_t, _QWORD, const __CFString *))(v7 + 56);
            if (v8)
              v8(v6, *MEMORY[0x1E0D495D8], CFSTR("FigAssetImageGeneratorServer"));
          }
          v9 = *v5;
          if (*v5)
          {
            v10 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
            if (v10)
            {
              v11 = *(void (**)(uint64_t, _QWORD, _QWORD))(v10 + 56);
              if (v11)
                v11(v9, *MEMORY[0x1E0D494F8], *MEMORY[0x1E0D48EB0]);
            }
          }
        }
LABEL_13:
        if (!*(_DWORD *)(a1 + 24))
        {
LABEL_18:
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterAddWeakListener();
          FigStartForwardingMediaServicesProcessDeathNotification();
          v17 = 0;
          goto LABEL_19;
        }
        SInt32 = (const void *)FigCFNumberCreateSInt32();
        FigBaseObject = FigAssetImageGeneratorGetFigBaseObject(*(_QWORD *)(a1 + 8));
        v16 = *(uint64_t (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 56);
        if (v16)
        {
          v17 = v16(FigBaseObject, CFSTR("ClientPID"), SInt32);
          if (!SInt32)
            goto LABEL_17;
        }
        else
        {
          v17 = 4294954514;
          if (!SInt32)
          {
LABEL_17:
            if ((_DWORD)v17)
              goto LABEL_19;
            goto LABEL_18;
          }
        }
        CFRelease(SInt32);
        goto LABEL_17;
      }
    }
  }
  else
  {
    v12 = *MEMORY[0x1E0C9AE00];
    v13 = a2[1];
    v19[0] = *a2;
    v19[1] = v13;
    UsingPrimaryAVAudioSessionSiblingForAuditToken = FigAudioSessionCreateUsingPrimaryAVAudioSessionSiblingForAuditToken(v12, v19, CFSTR("FigAssetImageGenerator"), (_QWORD *)(a1 + 16));
    if (!(_DWORD)UsingPrimaryAVAudioSessionSiblingForAuditToken)
      goto LABEL_13;
  }
  v17 = UsingPrimaryAVAudioSessionSiblingForAuditToken;
LABEL_19:
  if (cf)
    CFRelease(cf);
  return v17;
}

void DisposeServedAIGState(CFTypeRef *a1)
{
  CFTypeRef v2;
  uint64_t FigBaseObject;
  uint64_t v4;
  void (*v5)(uint64_t);
  CFTypeRef v6;
  CFTypeRef v7;
  NSObject *v8;
  CFTypeRef v9;
  void *v10;

  if (a1)
  {
    v2 = a1[1];
    if (v2)
    {
      FigBaseObject = FigAssetImageGeneratorGetFigBaseObject(v2);
      if (FigBaseObject)
      {
        v4 = FigBaseObject;
        v5 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
        if (v5)
          v5(v4);
      }
    }
    if (a1[2])
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      FigStopForwardingMediaServicesProcessDeathNotification();
      v6 = a1[2];
      if (v6)
      {
        CFRelease(v6);
        a1[2] = 0;
      }
    }
    v7 = a1[1];
    if (v7)
    {
      CFRelease(v7);
      a1[1] = 0;
    }
    v8 = a1[5];
    if (v8)
    {
      dispatch_release(v8);
      a1[5] = 0;
      v9 = a1[1];
      if (v9)
        CFRelease(v9);
    }
    if (*a1)
    {
      CFRelease(*a1);
      *a1 = 0;
    }
    v10 = (void *)a1[6];
    if (v10)
      os_release(v10);
    free(a1);
  }
}

uint64_t serverXPCAIG_NotificationFilter(int a1, int a2, CFTypeRef cf1, const __CFDictionary *a4, uint64_t a5, void *a6)
{
  uint64_t result;
  CGImage *Value;

  result = CFEqual(cf1, CFSTR("AIGDidGenerateCGImage"));
  if ((_DWORD)result)
  {
    Value = (CGImage *)CFDictionaryGetValue(a4, CFSTR("CGImage"));
    if (!Value || serverXPCAIG_AddCGImageToMessage(Value, a6))
    {
      return 1;
    }
    else
    {
      if (FigCFDictionaryGetCMTimeIfPresent())
        FigXPCMessageSetCMTime();
      if (FigCFDictionaryGetInt64IfPresent())
        xpc_dictionary_set_int64(a6, "RequestID", 0);
      return 2;
    }
  }
  return result;
}

uint64_t FigAssetImageGeneratorServerStart()
{
  if (FigServer_IsMediaparserd())
    return FigSignalErrorAt();
  FigServer_IsMediaplaybackd();
  return FigXPCServerStart();
}

uint64_t HandleAssetImageGeneratorMessage(uint64_t a1, void *a2, void *a3)
{
  int OpCode;
  int ClientPIDFromAuditToken;
  int v7;
  int v8;
  const __CFAllocator *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  CFTypeRef v13;
  SecTaskRef v14;
  uint64_t FigBaseObject;
  void (*v16)(uint64_t, const __CFString *, _QWORD);
  int v17;
  uint64_t v18;
  int v19;
  CFTypeID v20;
  NSObject *v21;
  uint64_t v22;
  _QWORD v24[8];
  int v25;
  uint64_t v26;
  CFTypeRef cf;
  int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  audit_token_t token;
  const void *v34;
  audit_token_t v35;
  uint64_t v36;
  uint64_t v37;
  CFTypeRef v38;
  const void *v39;

  v29 = 0;
  v30 = &v29;
  v31 = 0x2000000000;
  v32 = 0;
  v28 = 0;
  v26 = 0;
  cf = 0;
  OpCode = FigXPCMessageGetOpCode();
  *((_DWORD *)v30 + 6) = OpCode;
  if (OpCode)
    goto LABEL_32;
  if (v28 == 1668441441)
  {
    v38 = 0;
    v39 = 0;
    v36 = 0;
    v37 = 0;
    memset(&v35, 0, sizeof(v35));
    v34 = 0;
    xpc_connection_get_audit_token();
    token = v35;
    ClientPIDFromAuditToken = FigServer_GetClientPIDFromAuditToken();
    xpc_dictionary_get_uint64(a2, "Asset");
    v7 = FigXPCMessageCopyCFDictionary();
    if (v7 || (v7 = FigXPCAssetServerCopyAssetForID()) != 0)
    {
      v17 = v7;
      v11 = 0;
    }
    else
    {
      v8 = CreateServedAIGState(&v37);
      if (v8)
      {
        v17 = v8;
        v14 = 0;
        v11 = v37;
LABEL_18:
        DisposeServedAIGState((CFTypeRef *)v11);
        if (v34)
          CFRelease(v34);
        if (v39)
          CFRelease(v39);
        if (v38)
          CFRelease(v38);
        if (v14)
          CFRelease(v14);
        *((_DWORD *)v30 + 6) = v17;
        goto LABEL_32;
      }
      v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v10 = FigSurrogateAssetImageGeneratorCreateFromAsset(*MEMORY[0x1E0C9AE00], v39, v34, &v38);
      v11 = v37;
      if (!v10)
      {
        v10 = FigSandboxAssertionCreateForPID();
        if (!v10)
        {
          v12 = FigOSTransactionCreate();
          *(_QWORD *)(v11 + 48) = v12;
          if (v12)
          {
            v13 = v38;
            *(_QWORD *)(v11 + 8) = v38;
            if (v13)
              CFRetain(v13);
            *(_DWORD *)(v11 + 24) = ClientPIDFromAuditToken;
            token = v35;
            v10 = aigXPCServer_setAudioSessionBehaviour(v11, &token);
            if (!v10)
            {
              token = v35;
              v14 = SecTaskCreateWithAuditToken(v9, &token);
              if (v14)
              {
                if (VTIsSecTaskEntitledForVP9Decode())
                {
                  FigBaseObject = FigAssetImageGeneratorGetFigBaseObject(v38);
                  v16 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 56);
                  if (v16)
                    v16(FigBaseObject, CFSTR("AllowAlternateDecoderSelection"), *MEMORY[0x1E0C9AE50]);
                }
              }
              v17 = FigXPCServerAssociateObjectWithConnection();
              if (!v17)
              {
                v18 = v36;
                *(_QWORD *)(v11 + 32) = v36;
                xpc_dictionary_set_uint64(a3, (const char *)*MEMORY[0x1E0CA36A0], v18);
                v11 = 0;
              }
              goto LABEL_18;
            }
          }
          else
          {
            v10 = FigSignalErrorAt();
          }
        }
      }
      v17 = v10;
    }
    v14 = 0;
    goto LABEL_18;
  }
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
  v19 = FigXPCServerLookupAndRetainAssociatedObject();
  *((_DWORD *)v30 + 6) = v19;
  if (!v19)
  {
    if (cf
      && (v20 = CFGetTypeID(cf), v20 == FigAssetImageGeneratorGetTypeID())
      && (v21 = *(NSObject **)(v26 + 40)) != 0)
    {
      v24[0] = MEMORY[0x1E0C809B0];
      v24[1] = 0x40000000;
      v24[2] = __HandleAssetImageGeneratorMessage_block_invoke;
      v24[3] = &unk_1E2FADDC0;
      v25 = v28;
      v24[4] = &v29;
      v24[5] = cf;
      v24[6] = a2;
      v24[7] = a3;
      dispatch_sync(v21, v24);
    }
    else
    {
      *((_DWORD *)v30 + 6) = FigSignalErrorAt();
    }
  }
LABEL_32:
  if (cf)
    CFRelease(cf);
  v22 = *((unsigned int *)v30 + 6);
  _Block_object_dispose(&v29, 8);
  return v22;
}

uint64_t HandleAssetImageGeneratorNoReplyMessage(uint64_t a1, void *a2)
{
  uint64_t result;

  result = FigXPCMessageGetOpCode();
  if (!(_DWORD)result)
  {
    xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
    result = FigXPCServerLookupAndRetainAssociatedObject();
    if (!(_DWORD)result)
      return FigSignalErrorAt();
  }
  return result;
}

void aigXPCServer_interruptionNotificationCallback(uint64_t a1, uint64_t a2)
{
  uint64_t FigBaseObject;
  uint64_t v3;
  void (*v4)(uint64_t);

  if (a2)
  {
    FigBaseObject = FigAssetImageGeneratorGetFigBaseObject(a2);
    if (FigBaseObject)
    {
      v3 = FigBaseObject;
      v4 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v4)
        v4(v3);
    }
  }
}

uint64_t serverXPCAIG_AddCGImageToMessage(CGImage *a1, void *a2)
{
  uint64_t v3;
  __IOSurface *Property;
  xpc_object_t XPCObject;
  void *v6;
  uint64_t v7;
  uint64_t v9;
  vm_address_t v10;
  int v11;
  vm_address_t v12;

  v12 = 0;
  v11 = 0;
  v9 = 0;
  v10 = 0;
  v3 = FigRemote_CreateSerializedDataForCGImage(a1, &v12, &v11, (vm_size_t)&v9, &v10, (_DWORD *)&v9 + 1);
  if ((_DWORD)v3)
    goto LABEL_13;
  if ((_DWORD)v9)
    FigMachPortReleaseSendRight_();
  Property = (__IOSurface *)CGImageGetProperty();
  if (Property)
  {
    XPCObject = IOSurfaceCreateXPCObject(Property);
    if (!XPCObject)
    {
      v3 = FigSignalErrorAt();
      goto LABEL_13;
    }
    v6 = XPCObject;
    xpc_dictionary_set_value(a2, "IOSurface", XPCObject);
    xpc_release(v6);
  }
  if (v12)
  {
    if (v11)
    {
      v3 = FigXPCMessageSetAndConsumeVMData();
      if ((_DWORD)v3)
        goto LABEL_13;
    }
  }
  v7 = 0;
  if (v10 && HIDWORD(v9))
  {
    v3 = FigXPCMessageSetAndConsumeVMData();
LABEL_13:
    v7 = v3;
  }
  FigXPCRelease();
  return v7;
}

uint64_t FigVideoQueueRemoteCallbackServer_NotificationIsPending()
{
  uint64_t v0;
  const void *v1;
  uint64_t DerivedStorage;
  uint64_t v3;
  const __CFAllocator *v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  CFStringRef v9;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  CFTypeRef cf;
  char cStr[512];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v14 = 1;
  v0 = weakReferenceTable_CopyPointerFromKey();
  if (v0)
  {
    v1 = (const void *)v0;
    v13 = 0;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      v3 = DerivedStorage;
      if (*(_DWORD *)(DerivedStorage + 20))
      {
        v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v5 = (unsigned int *)MEMORY[0x1E0C83DA0];
        do
        {
          v12 = 0;
          v11 = 0;
          v14 = 0;
          if (!FigVideoQueueRemoteClient_GetNextPendingNotification(*(_DWORD *)(v3 + 20), &v14, &v13, cStr, &v12, &v11))
          {
            v6 = v12;
            v7 = v11;
            v8 = (_BYTE *)CMBaseObjectGetDerivedStorage();
            cf = 0;
            if (!*v8)
            {
              v9 = CFStringCreateWithCString(v4, cStr, 0);
              if (v9 && (!v6 || !(_DWORD)v7 || !MEMORY[0x19402EA9C](v6, v7, v4, &cf)))
              {
                CMNotificationCenterGetDefaultLocalCenter();
                CMNotificationCenterPostNotification();
              }
              if (cf)
                CFRelease(cf);
              if (v9)
                CFRelease(v9);
            }
            MEMORY[0x19403197C](*v5, v12, v11);
          }
        }
        while (v14);
      }
    }
    CFRelease(v1);
  }
  return 0;
}

uint64_t weakReferenceTable_CopyPointerFromKey()
{
  MEMORY[0x19402F294](&gWeakReferenceTable_RemoteVideoQueueClientThreadOnce, weakReferenceTable_OneTimeInitialization);
  if (gWeakReferenceTable_RemoteVideoQueueClient)
    return FigCFWeakReferenceTableCopyValue();
  FigSignalErrorAt();
  return 0;
}

uint64_t FigVideoQueueCreateRemote(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t DerivedStorage;
  uint64_t Key;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  dispatch_queue_t v9;
  dispatch_queue_t v10;
  dispatch_queue_t v11;
  void *v12;
  __CFBundle *MainBundle;
  CFStringRef Identifier;
  CFStringRef v15;
  uint64_t CMBaseObject;
  void (*v17)(uint64_t, const __CFString *, CFStringRef);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _OWORD __str[5];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  MEMORY[0x19402F294](&videoQueueRemote_oneTimeInitialization_sInitRemoteVideoQueueOnlyOnce, videoQueueRemote_oneTimeInitializationWork);
  if (!gVideoQueueRemoteClient)
    goto LABEL_21;
  FigVideoQueueGetClassID();
  v3 = CMDerivedObjectCreate();
  if ((_DWORD)v3)
  {
    v6 = v3;
    goto LABEL_18;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 88) = 0;
  *(_QWORD *)(DerivedStorage + 208) = 0;
  MEMORY[0x19402F294](&gWeakReferenceTable_RemoteVideoQueueClientThreadOnce, weakReferenceTable_OneTimeInitialization);
  if (gWeakReferenceTable_RemoteVideoQueueClient)
    Key = FigCFWeakReferenceTableAddValueAndGetKey();
  else
    Key = FigSignalErrorAt();
  v6 = Key;
  if ((_DWORD)Key)
    goto LABEL_18;
  v7 = FigRPCCreateServerConnectionForObject();
  if ((_DWORD)v7 || (v7 = FigRPCGetServerConnectionInfo(), (_DWORD)v7))
  {
LABEL_25:
    v6 = v7;
    goto LABEL_18;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterAddListener();
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterAddListener();
  *(_BYTE *)(DerivedStorage + 96) = 1;
  v8 = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 152) = v8;
  if (!v8)
  {
    v7 = FigSignalErrorAt();
    goto LABEL_25;
  }
  memset(__str, 0, sizeof(__str));
  snprintf((char *)__str, 0x50uLL, "com.apple.coremedia.vqr.timebasesync.%p", 0);
  v9 = dispatch_queue_create((const char *)__str, 0);
  *(_QWORD *)(DerivedStorage + 200) = v9;
  if (!v9
    || (v10 = dispatch_queue_create("com.apple.coremedia.vqr.visualContextSyncQueue", 0),
        (*(_QWORD *)(DerivedStorage + 104) = v10) == 0)
    || (v11 = dispatch_queue_create("com.apple.coremedia.vqr.videoTargetSyncQueue", 0),
        (*(_QWORD *)(DerivedStorage + 120) = v11) == 0))
  {
LABEL_21:
    v6 = 4294955215;
    goto LABEL_18;
  }
  v12 = (void *)MEMORY[0x19403137C]();
  *(_QWORD *)(DerivedStorage + 216) = -[FigDisplayMirroringChangeObserver initWithCallback:context:]([FigDisplayMirroringChangeObserver alloc], "initWithCallback:context:", videoQueueRemote_handleDisplayMirroringChanged, 0);
  objc_autoreleasePoolPop(v12);
  MainBundle = CFBundleGetMainBundle();
  Identifier = CFBundleGetIdentifier(MainBundle);
  if (Identifier)
  {
    v15 = Identifier;
    CMBaseObject = FigVideoQueueGetCMBaseObject(0);
    v17 = *(void (**)(uint64_t, const __CFString *, CFStringRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
    if (v17)
      v17(CMBaseObject, CFSTR("ClientBundleIdentifier"), v15);
  }
  if (dword_1EE2A3308)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v6 = 0;
  *a2 = 0;
LABEL_18:
  if (!FigRemote_ShouldConnectToMediaplaybackd())
    FigRPCKillServerOnTimeout();
  return v6;
}

uint64_t videoQueueRemote_HandleDeadServerConnection()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(DerivedStorage + 16) = 1;
  *(_DWORD *)(DerivedStorage + 20) = 0;
  return CMNotificationCenterPostNotification();
}

uint64_t videoQueueRemote_handleDisplayMirroringChanged(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t CMBaseObject;
  uint64_t (*v4)(uint64_t, const __CFString *, uint64_t);

  if (a2)
  {
    v2 = result;
    CMBaseObject = FigVideoQueueGetCMBaseObject(a2);
    result = CMBaseObjectGetVTable();
    v4 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(result + 8) + 56);
    if (v4)
      return v4(CMBaseObject, CFSTR("DisplayList"), v2);
  }
  return result;
}

uint64_t weakReferenceTable_OneTimeInitialization()
{
  return FigCFWeakReferenceTableCreate();
}

uint64_t videoQueueRemote_oneTimeInitializationWork()
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  FigRemote_ShouldConnectToMediaparserdForFileParsing();
  FigRemote_ShouldConnectToMediaplaybackd();
  return FigRPCCreateRemoteClient();
}

uint64_t videoQueueRemote_Invalidate(uint64_t a1)
{
  _BYTE *DerivedStorage;
  uint64_t v3;
  _BYTE *v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  const void *v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  const void *v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[5];
  _QWORD block[5];
  os_log_type_t type;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
    return 0;
  v4 = DerivedStorage;
  if (dword_1EE2A3308)
  {
    v25 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *v4 = 1;
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterRemoveListener();
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterRemoveListener();
  FigVideoQueueRemoteClient_Destroy(*((_DWORD *)v4 + 5));
  if (!FigRemote_ShouldConnectToMediaplaybackd())
    FigRPCKillServerOnTimeout();
  v3 = FigRPCDisposeServerConnection();
  if ((_DWORD)v3)
    FigSignalErrorAt();
  v7 = (_QWORD *)*((_QWORD *)v4 + 21);
  if (v7)
  {
    FigSyncMomentSourceSetTimebase(v7, 0);
    FigSyncMomentSourceDestroy(*((CFTypeRef *)v4 + 21));
    *((_QWORD *)v4 + 21) = 0;
  }
  v8 = *((_QWORD *)v4 + 19);
  if (v8)
  {
    MEMORY[0x19402EEEC](v8, v6);
    v9 = (const void *)*((_QWORD *)v4 + 20);
    if (v9)
    {
      CFRelease(v9);
      *((_QWORD *)v4 + 20) = 0;
    }
    MEMORY[0x19402EF04](*((_QWORD *)v4 + 19));
  }
  v10 = (const void *)*((_QWORD *)v4 + 24);
  if (v10)
  {
    FigSyncMomentSourceDestroy(v10);
    *((_QWORD *)v4 + 24) = 0;
  }
  v11 = *((_QWORD *)v4 + 25);
  if (v11)
  {
    dispatch_release(v11);
    *((_QWORD *)v4 + 25) = 0;
  }
  v12 = (void *)*((_QWORD *)v4 + 27);
  if (v12)
  {
    objc_msgSend(v12, "removeObserversOnCADisplays");

    *((_QWORD *)v4 + 27) = 0;
  }
  v13 = (void *)MEMORY[0x19403137C](v12, v6);
  videoQueueRemote_removeHostLayer(a1, 0);
  if (*((_QWORD *)v4 + 4))
  {
    objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
    objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
    v14 = (const void *)*((_QWORD *)v4 + 4);
    if (v14)
    {
      CFRelease(v14);
      *((_QWORD *)v4 + 4) = 0;
    }
    objc_msgSend(MEMORY[0x1E0CD28B0], "commit", v20, v21);
  }
  objc_autoreleasePoolPop(v13);
  v15 = *((_QWORD *)v4 + 13);
  v16 = MEMORY[0x1E0C809B0];
  if (v15)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __videoQueueRemote_Invalidate_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = v4;
    dispatch_sync(v15, block);
  }
  v17 = *((_QWORD *)v4 + 15);
  if (v17)
  {
    v22[0] = v16;
    v22[1] = 3221225472;
    v22[2] = __videoQueueRemote_Invalidate_block_invoke_2;
    v22[3] = &__block_descriptor_40_e5_v8__0l;
    v22[4] = v4;
    dispatch_sync(v17, v22);
  }
  v18 = (const void *)*((_QWORD *)v4 + 10);
  if (v18)
  {
    CFRelease(v18);
    *((_QWORD *)v4 + 10) = 0;
  }
  return v3;
}

void videoQueueRemote_Finalize(uint64_t a1)
{
  _QWORD *DerivedStorage;
  NSObject *v3;
  const void *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  videoQueueRemote_Invalidate(a1);
  v3 = DerivedStorage[22];
  if (v3)
  {
    dispatch_release(v3);
    DerivedStorage[22] = 0;
  }
  if (DerivedStorage[19])
  {
    FigSimpleMutexDestroy();
    DerivedStorage[19] = 0;
  }
  v4 = (const void *)DerivedStorage[18];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[18] = 0;
  }
  v5 = DerivedStorage[13];
  if (v5)
  {
    dispatch_release(v5);
    DerivedStorage[13] = 0;
  }
  v6 = DerivedStorage[15];
  if (v6)
  {
    dispatch_release(v6);
    DerivedStorage[15] = 0;
  }
  if (DerivedStorage[26])
  {
    MEMORY[0x19402F294](&gWeakReferenceTable_RemoteVideoQueueClientThreadOnce, weakReferenceTable_OneTimeInitialization);
    if (gWeakReferenceTable_RemoteVideoQueueClient)
    {
      FigCFWeakReferenceTableRemoveValue();
      DerivedStorage[26] = 0;
    }
    else
    {
      FigSignalErrorAt();
    }
  }
  if (dword_1EE2A3308)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

__CFString *videoQueueRemote_CopyDebugDesc(const void *a1)
{
  _BYTE *DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;
  const char *v6;
  CFAllocatorRef v7;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(a1);
  if (*DerivedStorage)
    v6 = " (invalidated)";
  else
    v6 = "";
  v7 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigVideoQueueRemote %p retainCount: %ld%s allocator: %p>"), a1, v5, v6, v7);
  return Mutable;
}

uint64_t videoQueueRemote_CopyProperty(uint64_t a1, const __CFString *a2, uint64_t a3, CFTypeRef *a4)
{
  _BYTE *DerivedStorage;
  _BYTE *v8;
  const void *v9;
  uint64_t PixelBufferFromSerializedAtomData;
  NSObject *v12;
  _QWORD *v13;
  unsigned int v14;
  const void **v15;
  const char *CStringPtr;
  CFTypeRef cf;
  unsigned int v18;
  uint64_t v19;
  _QWORD block[6];
  _QWORD v21[6];
  unsigned int v22;
  char buffer[512];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v22 = 0;
  if (DerivedStorage[16])
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  if (*DerivedStorage || !a2 || !a4)
    return FigSignalErrorAt();
  if (!CFEqual(a2, CFSTR("VideoQueue_ControlTimebase")))
  {
    if (CFEqual(a2, CFSTR("VisualContextArray")))
    {
      v12 = *((_QWORD *)v8 + 13);
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = __videoQueueRemote_CopyProperty_block_invoke;
      v21[3] = &__block_descriptor_48_e5_v8__0l;
      v21[4] = a4;
      v21[5] = v8;
      v13 = v21;
    }
    else
    {
      if (!CFEqual(a2, CFSTR("VideoTargetArray")))
      {
        if (CFEqual(a2, CFSTR("CurrentlyDisplayedCVPixelBuffer")))
        {
          v19 = 0;
          *(_QWORD *)buffer = 0;
          v18 = 0;
          cf = 0;
          v14 = FigVideoQueueRemoteClient_CopyCurrentlyDisplayedCVPixelBuffer(*((_DWORD *)v8 + 5), (_DWORD *)&v19 + 1, buffer, &v19, &v18);
          if (v14)
            PixelBufferFromSerializedAtomData = v14;
          else
            PixelBufferFromSerializedAtomData = v18;
          if (!(_DWORD)PixelBufferFromSerializedAtomData)
          {
            if ((_DWORD)v19)
            {
              PixelBufferFromSerializedAtomData = FigRemote_CreatePixelBufferFromSerializedAtomData();
              if (!(_DWORD)PixelBufferFromSerializedAtomData)
              {
                LODWORD(v19) = 0;
                *a4 = cf;
                cf = 0;
              }
            }
          }
          if (HIDWORD(v19))
            FigMachPortReleaseSendRight_();
          if ((_DWORD)v19)
            MEMORY[0x19403197C](*MEMORY[0x1E0C83DA0], *(_QWORD *)buffer);
          goto LABEL_14;
        }
        if (!CFEqual(a2, CFSTR("CompensateForDisplayLatency")))
        {
          CStringPtr = CFStringGetCStringPtr(a2, 0);
          if (!CStringPtr)
          {
            CStringPtr = buffer;
            CFStringGetCString(a2, buffer, 512, 0);
          }
          cf = 0;
          PixelBufferFromSerializedAtomData = FigVideoQueueRemoteClient_GetProperty(*((_DWORD *)v8 + 5), CStringPtr, &cf, &v22);
          if (!(_DWORD)PixelBufferFromSerializedAtomData)
          {
            PixelBufferFromSerializedAtomData = MEMORY[0x19402EA9C](cf, v22, a3, a4);
            MEMORY[0x19403197C](*MEMORY[0x1E0C83DA0], cf, v22);
          }
          goto LABEL_14;
        }
        v15 = (const void **)MEMORY[0x1E0C9AE40];
        if (v8[96])
          v15 = (const void **)MEMORY[0x1E0C9AE50];
        v9 = *v15;
        goto LABEL_7;
      }
      v12 = *((_QWORD *)v8 + 15);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __videoQueueRemote_CopyProperty_block_invoke_2;
      block[3] = &__block_descriptor_48_e5_v8__0l;
      block[4] = a4;
      block[5] = v8;
      v13 = block;
    }
    dispatch_sync(v12, v13);
    PixelBufferFromSerializedAtomData = 0;
    goto LABEL_14;
  }
  v9 = (const void *)*((_QWORD *)v8 + 18);
LABEL_7:
  PixelBufferFromSerializedAtomData = 0;
  *a4 = CFRetain(v9);
LABEL_14:
  if (!FigRemote_ShouldConnectToMediaplaybackd())
    FigRPCKillServerOnTimeout();
  return PixelBufferFromSerializedAtomData;
}

uint64_t videoQueueRemote_SetProperty(const void *a1, const __CFString *a2, const __CFDictionary *a3)
{
  _BYTE *DerivedStorage;
  _BYTE *v7;
  void *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  CFTypeRef v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t CMBaseObject;
  uint64_t (*v25)(uint64_t, const __CFString *, _QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, const __CFString *, _QWORD, CFNumberRef *);
  uint64_t updated;
  CFNumberRef v30;
  void *v31;
  void *v32;
  const void *v33;
  NSObject *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  const void *v39;
  const char *CStringPtr;
  uint64_t v41;
  mach_port_t v42;
  const UInt8 *BytePtr;
  unsigned int Length;
  CFTypeID TypeID;
  const void *v46;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  char v48;
  uint64_t v49;
  CFTypeRef v50;
  CFTypeRef v51;
  CFDataRef theData;
  CFTypeRef cf;
  os_log_type_t type;
  unsigned int v55;
  int valuePtr;
  CFNumberRef number;
  int v58;
  const char *v59;
  __int16 v60;
  const void *v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  char buffer[8];
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v51 = 0;
  theData = 0;
  v50 = 0;
  if (DerivedStorage[16])
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  if (*DerivedStorage || !a2)
    return FigSignalErrorAt();
  if (!CFEqual(CFSTR("VideoQueue_DisplayLayer"), a2))
  {
    if (CFEqual(CFSTR("DisplayLayerVisibility"), a2))
    {
      v9 = (void *)MEMORY[0x19403137C]();
      v16 = CMBaseObjectGetDerivedStorage();
      *(_QWORD *)buffer = 0;
      if (*(_QWORD *)(v16 + 32))
      {
        v17 = v16;
        v18 = *(void **)(v16 + 216);
        if ((const __CFDictionary *)*MEMORY[0x1E0C9AE50] == a3)
        {
          if (v18)
          {
            updated = FigDeferredTransactionCreate(*MEMORY[0x1E0C9AE00], (uint64_t *)buffer);
            v39 = *(const void **)buffer;
            if (!(_DWORD)updated)
            {
              FPSupport_AppendDeferredTransactionChangeToTargetMirroringObserverAtDisplayOfCALayer(*(const void **)buffer, *(void **)(v17 + 216), *(void **)(v17 + 32), (uint64_t)"videoQueueRemote_setClientVideoLayerVisibility");
              FigDeferredTransactionCommit(*(uint64_t *)buffer);
              v39 = *(const void **)buffer;
            }
            goto LABEL_46;
          }
        }
        else if (v18)
        {
          objc_msgSend(v18, "setBaseDisplayList:", MEMORY[0x1E0C9AA60]);
        }
      }
      goto LABEL_57;
    }
    if (CFEqual(a2, CFSTR("VideoQueue_DisplayBounds")))
    {
      CGRectMakeWithDictionaryRepresentation(a3, (CGRect *)(v7 + 48));
      objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
      objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
      vq_updateHostLayerAffineTransform();
      objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
LABEL_50:
      CStringPtr = CFStringGetCStringPtr(a2, 0);
      if (!CStringPtr)
      {
        CStringPtr = buffer;
        CFStringGetCString(a2, buffer, 512, 0);
      }
      v41 = MEMORY[0x19402EA30](a3, *MEMORY[0x1E0C9AE00], &theData);
      if (!(_DWORD)v41)
      {
        v42 = *((_DWORD *)v7 + 5);
        BytePtr = CFDataGetBytePtr(theData);
        Length = CFDataGetLength(theData);
        v41 = FigVideoQueueRemoteClient_SetProperty(v42, CStringPtr, (uint64_t)BytePtr, Length);
      }
      goto LABEL_71;
    }
    if (!CFEqual(a2, CFSTR("VideoQueue_ControlTimebase")))
    {
      if (CFEqual(a2, CFSTR("VisualContextArray")))
      {
        updated = videoQueueRemote_updateVisualContextArrayAndCopyIDArray(a1, a3, (CFMutableArrayRef *)&v51);
        if ((_DWORD)updated)
          goto LABEL_59;
        a2 = CFSTR("VisualContextIDArray");
        a3 = (const __CFDictionary *)v51;
      }
      else if (CFEqual(a2, CFSTR("VideoTargetArray")))
      {
        updated = videoQueueRemote_updateVideoTargetArrayAndCopyIDArray(a1, a3, (CFMutableArrayRef *)&v50);
        if ((_DWORD)updated)
          goto LABEL_59;
        a2 = CFSTR("VideoTargetIDArray");
        a3 = (const __CFDictionary *)v50;
      }
      else if (CFEqual(a2, CFSTR("CompensateForDisplayLatency")))
      {
        v48 = *MEMORY[0x1E0C9AE40] != (_QWORD)a3;
        v7[96] = v48;
        MEMORY[0x19402EEEC](*((_QWORD *)v7 + 19));
        v49 = *((_QWORD *)v7 + 20);
        if (v49)
          FigLayerSynchronizerSetCompensateForDisplayLatency(v49, v48);
        MEMORY[0x19402EF04](*((_QWORD *)v7 + 19));
      }
      goto LABEL_50;
    }
    if (v7[136])
    {
LABEL_70:
      v41 = FigSignalErrorAt();
LABEL_71:
      updated = v41;
      goto LABEL_59;
    }
    if (a3)
    {
      TypeID = CMTimebaseGetTypeID();
      if (TypeID != CFGetTypeID(a3))
        goto LABEL_70;
      v46 = (const void *)*((_QWORD *)v7 + 18);
      *((_QWORD *)v7 + 18) = a3;
      CFRetain(a3);
    }
    else
    {
      v46 = (const void *)*((_QWORD *)v7 + 18);
      *((_QWORD *)v7 + 18) = 0;
    }
    if (v46)
      CFRelease(v46);
    videoQueueRemote_rebuildTimebaseSync((uint64_t)a1, a3);
    if (dword_1EE2A3308)
    {
      LODWORD(number) = 0;
      LOBYTE(cf) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    updated = 0;
    goto LABEL_59;
  }
  v9 = (void *)MEMORY[0x19403137C]();
  v10 = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (*(const __CFDictionary **)(v10 + 32) != a3)
  {
    v11 = (uint64_t *)v10;
    v12 = FigDeferredTransactionCreate(*MEMORY[0x1E0C9AE00], (uint64_t *)&cf);
    if ((_DWORD)v12)
    {
      updated = v12;
LABEL_45:
      v39 = cf;
LABEL_46:
      if (v39)
        CFRelease(v39);
      goto LABEL_58;
    }
    v13 = (void *)v11[4];
    if (v13)
    {
      FPSupport_AppendDeferredTransactionChangeToClearContentsAndRemoveFromSuperLayer(cf, v13, (uint64_t)"videoQueueRemote_setClientVideoLayer");
      FPSupport_AppendDeferredTransactionChangeToRelease(cf, v11[4], (uint64_t)"videoQueueRemote_setClientVideoLayer");
      v11[4] = 0;
    }
    if (a3)
    {
      v14 = (uint64_t)CFRetain(a3);
      v11[4] = (uint64_t)a3;
      v15 = (void *)v11[27];
      if (v15)
        v14 = FPSupport_AppendDeferredTransactionChangeToTargetMirroringObserverAtDisplayOfCALayer(cf, v15, a3, (uint64_t)"videoQueueRemote_setClientVideoLayer");
    }
    else
    {
      v11[4] = 0;
      MEMORY[0x19402EEEC](v11[19]);
      v19 = (const void *)v11[20];
      if (v19)
      {
        CFRelease(v19);
        v11[20] = 0;
      }
      v14 = MEMORY[0x19402EF04](v11[19]);
    }
    v20 = cf;
    v21 = (void *)MEMORY[0x19403137C](v14);
    number = 0;
    valuePtr = 0;
    v22 = CMBaseObjectGetDerivedStorage();
    if (*(_QWORD *)(v22 + 32))
    {
      v23 = v22;
      CMBaseObject = FigVideoQueueGetCMBaseObject(a1);
      v25 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
      if (!v25)
        goto LABEL_38;
      v26 = v25(CMBaseObject, CFSTR("VideoQueue_MakeCAContextForRemoteHost"), *MEMORY[0x1E0C9AE50]);
      if ((_DWORD)v26)
      {
        updated = v26;
        goto LABEL_41;
      }
      v27 = FigVideoQueueGetCMBaseObject(a1);
      v28 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
      if (!v28)
      {
LABEL_38:
        updated = 4294954514;
LABEL_41:
        v30 = number;
LABEL_42:
        if (v30)
          CFRelease(v30);
        objc_autoreleasePoolPop(v21);
        FigDeferredTransactionCommit((uint64_t)cf);
        goto LABEL_45;
      }
      updated = v28(v27, CFSTR("VideoQueue_CAContextID"), 0, &number);
      v30 = number;
      if ((_DWORD)updated || !number)
        goto LABEL_42;
      if (!CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr))
      {
        updated = 4294955216;
        goto LABEL_41;
      }
      v31 = *(void **)(v23 + 40);
      if (!v31)
      {
        objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
        objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
        v32 = (void *)objc_msgSend(MEMORY[0x1E0CD27B0], "layer");
        *(_QWORD *)(v23 + 40) = v32;
        objc_msgSend(v32, "setInheritsSecurity:", 1);
        objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
        v33 = *(const void **)(v23 + 40);
        if (!v33)
        {
          updated = 4294955215;
          goto LABEL_41;
        }
        CFRetain(v33);
        v31 = *(void **)(v23 + 40);
      }
      FPSupport_AppendDeferredTransactionChangeToConfigureFigVideoQueueHostLayerAndPostNotification(v20, v31, *(void **)(v23 + 32), valuePtr, a1, CFSTR("VideoQueue_CAContextIDDidChange"), (uint64_t)"videoQueueRemote_updateHostLayer");
      FPSupport_AppendDeferredTransactionChangeToResizeClientVideoLayerWithinHostLayer(v20, *(void **)(v23 + 40), *(void **)(v23 + 32), (uint64_t)"videoQueueRemote_updateHostLayer", *(double *)(v23 + 48), *(double *)(v23 + 56), *(double *)(v23 + 64), *(double *)(v23 + 72));
      if (dword_1EE2A3308)
      {
        v55 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v35 = v55;
        if (os_log_type_enabled(v34, type))
          v36 = v35;
        else
          v36 = v35 & 0xFFFFFFFE;
        if (v36)
        {
          v37 = *(_QWORD *)(v23 + 32);
          v38 = objc_msgSend(*(id *)(v23 + 40), "description");
          v58 = 136316162;
          v59 = "videoQueueRemote_updateHostLayer";
          v60 = 2048;
          v61 = a1;
          v62 = 2112;
          v63 = v37;
          v64 = 2112;
          v65 = v38;
          v66 = 1024;
          LODWORD(v67) = valuePtr;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else
    {
      videoQueueRemote_removeHostLayer((uint64_t)a1, v20);
    }
    updated = 0;
    goto LABEL_41;
  }
LABEL_57:
  updated = 0;
LABEL_58:
  objc_autoreleasePoolPop(v9);
LABEL_59:
  if (!FigRemote_ShouldConnectToMediaplaybackd())
    FigRPCKillServerOnTimeout();
  if (theData)
    CFRelease(theData);
  if (v51)
    CFRelease(v51);
  if (v50)
    CFRelease(v50);
  return updated;
}

void videoQueueRemote_removeHostLayer(uint64_t a1, CFTypeRef a2)
{
  uint64_t DerivedStorage;
  void *v4;
  uint64_t v5;
  int v6;
  const void *v7;
  CFTypeRef cf;

  cf = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(void **)(DerivedStorage + 40);
  if (v4)
  {
    v5 = DerivedStorage;
    if (!a2)
    {
      v6 = FigDeferredTransactionCreate(*MEMORY[0x1E0C9AE00], (uint64_t *)&cf);
      a2 = cf;
      if (v6)
        goto LABEL_9;
      v4 = *(void **)(v5 + 40);
    }
    FPSupport_AppendDeferredTransactionChangeToClearContentsAndRemoveFromSuperLayer(a2, v4, (uint64_t)"videoQueueRemote_removeHostLayer");
    v7 = *(const void **)(v5 + 40);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(v5 + 40) = 0;
    }
    if (cf)
    {
      FigDeferredTransactionCommit((uint64_t)cf);
      a2 = cf;
LABEL_9:
      if (a2)
        CFRelease(a2);
    }
  }
}

uint64_t vq_updateHostLayerAffineTransform()
{
  uint64_t result;
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  void *v8;
  CGAffineTransform v9;
  CGAffineTransform v10;
  CGAffineTransform v11;

  result = CMBaseObjectGetDerivedStorage();
  if (*(double *)(result + 64) > 0.0)
  {
    v1 = result;
    if (*(double *)(result + 72) > 0.0)
    {
      objc_msgSend(*(id *)(result + 32), "bounds");
      v3 = v2;
      v5 = v4;
      memset(&v11, 0, sizeof(v11));
      v6 = *(double *)(v1 + 64);
      v7 = *(double *)(v1 + 72);
      CGAffineTransformMakeScale(&v11, v2 / v6, v4 / v7);
      v9 = v11;
      CGAffineTransformTranslate(&v10, &v9, (v3 - v6) * 0.5, (v5 - v7) * 0.5);
      *(_OWORD *)&v11.c = *(_OWORD *)&v10.c;
      *(_OWORD *)&v11.tx = *(_OWORD *)&v10.tx;
      v8 = *(void **)(v1 + 40);
      *(_OWORD *)&v11.a = *(_OWORD *)&v10.a;
      return objc_msgSend(v8, "setAffineTransform:", &v10);
    }
  }
  return result;
}

void videoQueueRemote_rebuildTimebaseSync(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  int v9;
  const void *v10;
  NSObject *v11;
  _QWORD v12[7];
  _QWORD block[6];
  const void *v14;

  v14 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(NSObject **)(DerivedStorage + 200);
  v5 = MEMORY[0x1E0C809B0];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __videoQueueRemote_rebuildTimebaseSync_block_invoke;
  block[3] = &__block_descriptor_48_e5_v8__0l;
  block[4] = DerivedStorage;
  block[5] = a2;
  dispatch_sync(v4, block);
  if (!a2)
  {
    v10 = 0;
    v8 = 0;
LABEL_7:
    v11 = *(NSObject **)(DerivedStorage + 200);
    v12[0] = v5;
    v12[1] = 3221225472;
    v12[2] = __videoQueueRemote_rebuildTimebaseSync_block_invoke_2;
    v12[3] = &__block_descriptor_56_e5_v8__0l;
    v12[4] = DerivedStorage;
    v12[5] = v10;
    v12[6] = v8;
    dispatch_sync(v11, v12);
    v10 = v14;
    goto LABEL_8;
  }
  v6 = CMBaseObjectGetDerivedStorage();
  v7 = malloc_type_calloc(1uLL, 0x10uLL, 0x10000409B4BCFF8uLL);
  v8 = (uint64_t)v7;
  if (v7)
  {
    *(_QWORD *)v7 = *(_QWORD *)(v6 + 208);
    v7[8] = 1;
  }
  else if (FigSignalErrorAt())
  {
    return;
  }
  v9 = FigSyncMomentSourceCreateWithDispatchQueueAndDestructor2((uint64_t)videoQueueRemote_syncServerTimebaseToMoment, v8, (void (*)(uint64_t))videoQueueRemote_destroyTimebaseSyncState, a2, *(NSObject **)(DerivedStorage + 200), (uint64_t *)&v14);
  v10 = v14;
  if (!v9)
    goto LABEL_7;
LABEL_8:
  if (v10)
    CFRelease(v10);
}

uint64_t videoQueueRemote_updateVisualContextArrayAndCopyIDArray(const void *a1, const void *a2, CFMutableArrayRef *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  CFTypeID v8;
  uint64_t Count;
  CFIndex v10;
  const void *ValueAtIndex;
  CFTypeID v12;
  const __CFAllocator *v13;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v15;
  CFIndex v16;
  const void *v17;
  uint64_t ObjectID;
  NSObject *v19;
  uint64_t v20;
  _QWORD block[6];
  uint64_t v23;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  v8 = CFGetTypeID(a2);
  if (v8 != CFArrayGetTypeID())
    return FigSignalErrorAt();
  Count = CFArrayGetCount((CFArrayRef)a2);
  if (Count >= 1)
  {
    v10 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, v10);
      if (!ValueAtIndex)
        break;
      v12 = CFGetTypeID(ValueAtIndex);
      if (v12 != FigVisualContextGetTypeID())
        break;
      if (Count == ++v10)
        goto LABEL_8;
    }
    return FigSignalErrorAt();
  }
LABEL_8:
  v13 = CFGetAllocator(a1);
  Mutable = CFArrayCreateMutable(v13, Count, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return FigSignalErrorAt();
  v15 = Mutable;
  if (Count < 1)
  {
LABEL_14:
    v19 = *(NSObject **)(v7 + 104);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __videoQueueRemote_updateVisualContextArrayAndCopyIDArray_block_invoke;
    block[3] = &__block_descriptor_48_e5_v8__0l;
    block[4] = v7;
    block[5] = a2;
    dispatch_sync(v19, block);
    v20 = 0;
    *a3 = v15;
  }
  else
  {
    v16 = 0;
    while (1)
    {
      v17 = CFArrayGetValueAtIndex((CFArrayRef)a2, v16);
      v23 = 0;
      ObjectID = FigVisualContextXPCRemoteGetObjectID(v17, &v23);
      if ((_DWORD)ObjectID)
        break;
      ObjectID = FigCFArrayAppendInt64();
      if ((_DWORD)ObjectID)
        break;
      if (Count == ++v16)
        goto LABEL_14;
    }
    v20 = ObjectID;
    CFRelease(v15);
  }
  return v20;
}

uint64_t videoQueueRemote_updateVideoTargetArrayAndCopyIDArray(const void *a1, const void *a2, CFMutableArrayRef *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  CFTypeID v8;
  uint64_t Count;
  CFIndex v10;
  const void *ValueAtIndex;
  CFTypeID v12;
  const __CFAllocator *v13;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v15;
  CFIndex v16;
  const void *v17;
  uint64_t ObjectID;
  NSObject *v19;
  uint64_t v20;
  _QWORD block[6];
  uint64_t v23;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  v8 = CFGetTypeID(a2);
  if (v8 != CFArrayGetTypeID())
    return FigSignalErrorAt();
  Count = CFArrayGetCount((CFArrayRef)a2);
  if (Count >= 1)
  {
    v10 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, v10);
      if (!ValueAtIndex)
        break;
      v12 = CFGetTypeID(ValueAtIndex);
      if (v12 != FigVideoTargetGetTypeID())
        break;
      if (Count == ++v10)
        goto LABEL_8;
    }
    return FigSignalErrorAt();
  }
LABEL_8:
  v13 = CFGetAllocator(a1);
  Mutable = CFArrayCreateMutable(v13, Count, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return FigSignalErrorAt();
  v15 = Mutable;
  if (Count < 1)
  {
LABEL_14:
    v19 = *(NSObject **)(v7 + 120);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __videoQueueRemote_updateVideoTargetArrayAndCopyIDArray_block_invoke;
    block[3] = &__block_descriptor_48_e5_v8__0l;
    block[4] = v7;
    block[5] = a2;
    dispatch_sync(v19, block);
    v20 = 0;
    *a3 = v15;
  }
  else
  {
    v16 = 0;
    while (1)
    {
      v17 = CFArrayGetValueAtIndex((CFArrayRef)a2, v16);
      v23 = 0;
      ObjectID = FigVideoTargetXPCRemoteGetObjectID((uint64_t)v17, &v23);
      if ((_DWORD)ObjectID)
        break;
      ObjectID = FigCFArrayAppendInt64();
      if ((_DWORD)ObjectID)
        break;
      if (Count == ++v16)
        goto LABEL_14;
    }
    v20 = ObjectID;
    CFRelease(v15);
  }
  return v20;
}

void __videoQueueRemote_rebuildTimebaseSync_block_invoke(uint64_t a1)
{
  const void *v1;
  uint64_t v2;
  const void *v3;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(const void **)(a1 + 40);
  v3 = *(const void **)(v2 + 184);
  *(_QWORD *)(v2 + 184) = v1;
  if (v1)
    CFRetain(v1);
  if (v3)
    CFRelease(v3);
}

void videoQueueRemote_syncServerTimebaseToMoment(uint64_t a1, uint64_t a2)
{
  const void *v4;
  uint64_t DerivedStorage;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  mach_port_t v10;
  unsigned int v11;
  int v12;
  __int128 v13[2];
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v12 = 0;
  v4 = (const void *)weakReferenceTable_CopyPointerFromKey();
  if (v4)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v6 = DerivedStorage;
    if (!*(_BYTE *)(DerivedStorage + 16) && !*(_BYTE *)DerivedStorage)
    {
      if (*(_BYTE *)(a1 + 8))
      {
        *(_DWORD *)(a2 + 4) |= 4u;
        *(_BYTE *)(a1 + 8) = 0;
      }
      if (*(_DWORD *)a2 == 120)
      {
        v7 = *(_DWORD *)(a2 + 4);
        v8 = *(_QWORD *)(a2 + 8);
        v9 = *(_QWORD *)(a2 + 64);
        v10 = *(_DWORD *)(DerivedStorage + 20);
        v11 = *(_QWORD *)(v6 + 184) != 0;
        LODWORD(v13[0]) = 120;
        DWORD1(v13[0]) = v7;
        *((_QWORD *)&v13[0] + 1) = v8;
        v13[1] = *(_OWORD *)(a2 + 16);
        v14 = *(_QWORD *)(a2 + 32);
        v15 = *(_OWORD *)(a2 + 40);
        v16 = *(_QWORD *)(a2 + 56);
        v17 = v9;
        v18 = *(_OWORD *)(a2 + 72);
        v19 = *(_QWORD *)(a2 + 88);
        v21 = *(_QWORD *)(a2 + 112);
        v20 = *(_OWORD *)(a2 + 96);
        FigVideoQueueRemoteClient_SyncTimebaseToMoment(v10, v11, v13, &v12);
      }
    }
  }
  if (!FigRemote_ShouldConnectToMediaplaybackd())
    FigRPCKillServerOnTimeout();
  if (v4)
    CFRelease(v4);
}

void __videoQueueRemote_rebuildTimebaseSync_block_invoke_2(_QWORD *a1)
{
  const void *v2;
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;

  v3 = a1[4];
  v2 = (const void *)a1[5];
  v4 = *(const void **)(v3 + 192);
  *(_QWORD *)(v3 + 192) = v2;
  if (v2)
    CFRetain(v2);
  if (v4)
    CFRelease(v4);
  v5 = a1[6];
  if (v5)
  {
    if (!*(_QWORD *)(a1[4] + 184))
    {
      v14 = 0;
      v13 = 0u;
      v12 = 0u;
      v11 = 0u;
      v10 = 0u;
      v9 = 0u;
      v8 = 0u;
      v7 = 0u;
      v6 = 120;
      videoQueueRemote_syncServerTimebaseToMoment(v5, (uint64_t)&v6);
    }
  }
}

void __videoQueueRemote_updateVisualContextArrayAndCopyIDArray_block_invoke(uint64_t a1)
{
  const void *v1;
  uint64_t v2;
  const void *v3;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(const void **)(a1 + 40);
  v3 = *(const void **)(v2 + 112);
  *(_QWORD *)(v2 + 112) = v1;
  if (v1)
    CFRetain(v1);
  if (v3)
    CFRelease(v3);
}

void __videoQueueRemote_updateVideoTargetArrayAndCopyIDArray_block_invoke(uint64_t a1)
{
  const void *v1;
  uint64_t v2;
  const void *v3;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(const void **)(a1 + 40);
  v3 = *(const void **)(v2 + 128);
  *(_QWORD *)(v2 + 128) = v1;
  if (v1)
    CFRetain(v1);
  if (v3)
    CFRelease(v3);
}

uint64_t videoQueueRemote_Start(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 16) || *(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v5 = FigVideoQueueRemoteClient_Start(*(_DWORD *)(DerivedStorage + 20), a2);
  if (!FigRemote_ShouldConnectToMediaplaybackd())
    FigRPCKillServerOnTimeout();
  return v5;
}

uint64_t videoQueueRemote_EnqueueFrame(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, uint64_t a9, uint64_t a10, int a11)
{
  uint64_t DerivedStorage;
  uint64_t v21;
  uint64_t SerializedAtomDataForSampleBufferWithOptions;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  NSObject *v28;
  unsigned int v29;

  v29 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 16))
    return FigSignalErrorAt();
  v21 = DerivedStorage;
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  if (!*(_BYTE *)(DerivedStorage + 136))
  {
    *(_BYTE *)(DerivedStorage + 136) = 1;
    if (*(_QWORD *)(DerivedStorage + 144))
    {
      if (*(_QWORD *)(DerivedStorage + 32) && *(_QWORD *)(DerivedStorage + 40))
      {
        MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 152));
        v25 = FigLayerSynchronizerCreate((_QWORD *)(v21 + 160));
        if ((_DWORD)v25)
        {
          v24 = v25;
          MEMORY[0x19402EF04](*(_QWORD *)(v21 + 152));
          goto LABEL_15;
        }
        FigLayerSynchronizerSetCompensateForDisplayLatency(*(_QWORD *)(v21 + 160), *(_BYTE *)(v21 + 96));
        MEMORY[0x19402EF04](*(_QWORD *)(v21 + 152));
        v27 = videoQueueRemote_SetSynchronizedLayers();
        if ((_DWORD)v27)
          goto LABEL_21;
        v28 = dispatch_queue_create("com.apple.coremedia.vqr.timer", 0);
        *(_QWORD *)(v21 + 176) = v28;
        if (!v28)
        {
          v24 = 4294955215;
          goto LABEL_15;
        }
        v27 = FigSyncMomentSourceCreateWithDispatchQueue((uint64_t)videoQueueRemote_SynchronizeLayerToMoment, *(_QWORD *)(v21 + 208), *(const void **)(v21 + 144), v28, (uint64_t *)(v21 + 168));
        if ((_DWORD)v27)
        {
LABEL_21:
          v24 = v27;
          goto LABEL_15;
        }
      }
    }
  }
  SerializedAtomDataForSampleBufferWithOptions = FigRemote_CreateSerializedAtomDataForSampleBufferWithOptions();
  if ((_DWORD)SerializedAtomDataForSampleBufferWithOptions)
  {
    v24 = SerializedAtomDataForSampleBufferWithOptions;
    *(_QWORD *)(v21 + 88) = 0;
  }
  else
  {
    *(_QWORD *)(v21 + 88) = (*MEMORY[0x1E0C85AD8] - 1) & -*MEMORY[0x1E0C85AD8];
    v26 = FigVideoQueueRemoteClient_EnqueueVideoSampleBuffer(*(_DWORD *)(v21 + 20), 0, 0, 0, a11, (int *)&v29, a1, a2, a3, a4, a5, a6, a7, a8);
    if (v26)
      v24 = v26;
    else
      v24 = v29;
  }
LABEL_15:
  FigMachPortReleaseSendRight_();
  if (!FigRemote_ShouldConnectToMediaplaybackd())
    FigRPCKillServerOnTimeout();
  return v24;
}

uint64_t videoQueueRemote_EnqueueH264Frame(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, uint64_t a9, int a10, int a11, const UInt8 *BytePtr, OpaqueCMBlockBuffer *a13, uint64_t a14, int a15)
{
  _BYTE *DerivedStorage;
  _BYTE *v30;
  int Length;
  size_t DataLength;
  vm_size_t v34;
  uint64_t DataPointer;
  unsigned int v36;
  uint64_t v37;
  char *dataPointerOut;
  unsigned int v39;

  v39 = 0;
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  dataPointerOut = 0;
  if (DerivedStorage[16])
    return FigSignalErrorAt();
  v30 = DerivedStorage;
  if (*DerivedStorage)
    return FigSignalErrorAt();
  if (BytePtr)
  {
    Length = CFDataGetLength((CFDataRef)BytePtr);
    BytePtr = CFDataGetBytePtr((CFDataRef)BytePtr);
    if (a13)
      goto LABEL_6;
LABEL_11:
    v34 = 0;
    goto LABEL_14;
  }
  Length = 0;
  if (!a13)
    goto LABEL_11;
LABEL_6:
  DataLength = CMBlockBufferGetDataLength(a13);
  if (DataLength)
  {
    v34 = DataLength;
    if (CMBlockBufferIsRangeContiguous(a13, 0, DataLength))
    {
      DataPointer = CMBlockBufferGetDataPointer(a13, 0, 0, 0, &dataPointerOut);
      if (!(_DWORD)DataPointer)
      {
        LODWORD(a13) = 0;
        goto LABEL_14;
      }
      goto LABEL_24;
    }
    DataPointer = vm_allocate(*MEMORY[0x1E0C83DA0], (vm_address_t *)&dataPointerOut, v34, 1560281089);
    if ((_DWORD)DataPointer)
    {
LABEL_24:
      v37 = DataPointer;
      goto LABEL_20;
    }
    CMBlockBufferCopyDataBytes(a13, 0, v34, dataPointerOut);
    LODWORD(a13) = 1;
LABEL_14:
    v36 = FigVideoQueueRemoteClient_EnqueueH264Frame(*((_DWORD *)v30 + 5), a10, a11, (uint64_t)BytePtr, Length, (uint64_t)dataPointerOut, v34, a14, a1, a2, a3, a4, a5, a6, a7, a8, a15, (int *)&v39);
    if (v36)
      v37 = v36;
    else
      v37 = v39;
    if ((_DWORD)a13 && v34)
      MEMORY[0x19403197C](*MEMORY[0x1E0C83DA0], dataPointerOut, v34);
    goto LABEL_20;
  }
  v37 = 4294955216;
LABEL_20:
  if (!FigRemote_ShouldConnectToMediaplaybackd())
    FigRPCKillServerOnTimeout();
  return v37;
}

uint64_t videoQueueRemote_EnqueueH264FrameWithTimingInfoBaggage(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, uint64_t a9, int a10, int a11, const __CFData *a12, OpaqueCMBlockBuffer *a13, uint64_t a14, int a15, uint64_t a16)
{
  _BYTE *DerivedStorage;
  _BYTE *v32;
  const UInt8 *BytePtr;
  size_t DataLength;
  vm_size_t v36;
  uint64_t DataPointer;
  uint64_t v38;
  const UInt8 *v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  int Length;
  CFDataRef theData;
  char *dataPointerOut;
  unsigned int v47;

  v47 = 0;
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  theData = 0;
  dataPointerOut = 0;
  if (DerivedStorage[16])
    return FigSignalErrorAt();
  v32 = DerivedStorage;
  if (*DerivedStorage)
    return FigSignalErrorAt();
  if (a12)
  {
    Length = CFDataGetLength(a12);
    BytePtr = CFDataGetBytePtr(a12);
    if (a13)
      goto LABEL_6;
LABEL_12:
    v36 = 0;
    if (a16)
      goto LABEL_13;
    goto LABEL_17;
  }
  BytePtr = 0;
  Length = 0;
  if (!a13)
    goto LABEL_12;
LABEL_6:
  DataLength = CMBlockBufferGetDataLength(a13);
  if (DataLength)
  {
    v36 = DataLength;
    if (CMBlockBufferIsRangeContiguous(a13, 0, DataLength))
    {
      DataPointer = CMBlockBufferGetDataPointer(a13, 0, 0, 0, &dataPointerOut);
      if (!(_DWORD)DataPointer)
      {
        LOBYTE(a13) = 0;
        if (!a16)
          goto LABEL_17;
LABEL_13:
        v38 = MEMORY[0x19402EA30](a16, *MEMORY[0x1E0C9AE00], &theData);
        if ((_DWORD)v38)
        {
          v42 = v38;
LABEL_21:
          v43 = a13 ^ 1;
          if (!v36)
            v43 = 1;
          if ((v43 & 1) == 0)
            MEMORY[0x19403197C](*MEMORY[0x1E0C83DA0], dataPointerOut, v36);
          goto LABEL_25;
        }
        v39 = CFDataGetBytePtr(theData);
        v40 = CFDataGetLength(theData);
LABEL_18:
        v41 = FigVideoQueueRemoteClient_EnqueueH264FrameWithTimingInfoBaggage(*((_DWORD *)v32 + 5), a10, a11, (uint64_t)BytePtr, Length, (uint64_t)dataPointerOut, v36, a14, a1, a2, a3, a4, a5, a6, a7, a8, a15, (uint64_t)v39, v40,
                (int *)&v47);
        if (v41)
          v42 = v41;
        else
          v42 = v47;
        goto LABEL_21;
      }
      goto LABEL_32;
    }
    DataPointer = vm_allocate(*MEMORY[0x1E0C83DA0], (vm_address_t *)&dataPointerOut, v36, 1560281089);
    if ((_DWORD)DataPointer)
    {
LABEL_32:
      v42 = DataPointer;
      goto LABEL_25;
    }
    CMBlockBufferCopyDataBytes(a13, 0, v36, dataPointerOut);
    LOBYTE(a13) = 1;
    if (a16)
      goto LABEL_13;
LABEL_17:
    v39 = 0;
    v40 = 0;
    goto LABEL_18;
  }
  v42 = 4294955216;
LABEL_25:
  if (theData)
    CFRelease(theData);
  if (!FigRemote_ShouldConnectToMediaplaybackd())
    FigRPCKillServerOnTimeout();
  return v42;
}

uint64_t videoQueueRemote_Flush(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 16) || *(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v5 = FigVideoQueueRemoteClient_Flush(*(_DWORD *)(DerivedStorage + 20), a2);
  if (!FigRemote_ShouldConnectToMediaplaybackd())
    FigRPCKillServerOnTimeout();
  return v5;
}

uint64_t videoQueueRemote_IsAboveHighWaterLevel()
{
  uint64_t DerivedStorage;
  uint64_t result;
  int IsAboveHighWaterLevel;
  BOOL v3;
  int v4;

  v4 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 16) || *(_BYTE *)DerivedStorage)
  {
    LOBYTE(result) = FigSignalErrorAt();
  }
  else
  {
    IsAboveHighWaterLevel = FigVideoQueueRemoteClient_IsAboveHighWaterLevel(*(_DWORD *)(DerivedStorage + 20), &v4);
    if (!FigRemote_ShouldConnectToMediaplaybackd())
      FigRPCKillServerOnTimeout();
    if (IsAboveHighWaterLevel)
      v3 = 1;
    else
      v3 = v4 == 0;
    LOBYTE(result) = !v3;
  }
  return result;
}

uint64_t videoQueueRemote_EnqueueFrameWithFormatDescriptionAndTimingInfoBaggage(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, uint64_t a9, OpaqueCMBlockBuffer *a10, OpaqueCMBlockBuffer *a11, uint64_t a12, int a13, const UInt8 *BytePtr)
{
  _BYTE *DerivedStorage;
  _BYTE *v28;
  size_t v30;
  int v31;
  uint64_t DataPointer;
  size_t DataLength;
  vm_size_t v34;
  uint64_t v35;
  int Length;
  uint64_t v37;
  unsigned int v38;
  char v39;
  CFDataRef theData;
  vm_address_t address;
  char *dataPointerOut;
  unsigned int v43;

  v43 = 0;
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  address = 0;
  dataPointerOut = 0;
  theData = 0;
  if (DerivedStorage[16])
    return FigSignalErrorAt();
  v28 = DerivedStorage;
  if (*DerivedStorage)
    return FigSignalErrorAt();
  if (!a10)
  {
    v31 = 0;
    if (a11)
    {
LABEL_9:
      DataLength = CMBlockBufferGetDataLength(a11);
      if (DataLength)
      {
        v34 = DataLength;
        if (CMBlockBufferIsRangeContiguous(a11, 0, DataLength))
        {
          DataPointer = CMBlockBufferGetDataPointer(a11, 0, 0, 0, (char **)&address);
          if (!(_DWORD)DataPointer)
          {
            LOBYTE(a11) = 0;
            if (!BytePtr)
              goto LABEL_22;
LABEL_16:
            v35 = MEMORY[0x19402EA30](BytePtr, *MEMORY[0x1E0C9AE00], &theData);
            if ((_DWORD)v35)
            {
              v37 = v35;
LABEL_26:
              v39 = a11 ^ 1;
              if (!v34)
                v39 = 1;
              if ((v39 & 1) == 0)
                MEMORY[0x19403197C](*MEMORY[0x1E0C83DA0], address, v34);
              goto LABEL_30;
            }
            BytePtr = CFDataGetBytePtr(theData);
            Length = CFDataGetLength(theData);
LABEL_23:
            v38 = FigVideoQueueRemoteClient_EnqueueFrameWithFormatDescriptionAndTimingInfoBaggage(*((_DWORD *)v28 + 5), (uint64_t)dataPointerOut, v31, address, v34, a12, a13, (uint64_t)BytePtr, a1, a2, a3, a4, a5, a6, a7, a8, Length, (int *)&v43);
            if (v38)
              v37 = v38;
            else
              v37 = v43;
            goto LABEL_26;
          }
          goto LABEL_19;
        }
        DataPointer = vm_allocate(*MEMORY[0x1E0C83DA0], &address, v34, 1560281089);
        if (!(_DWORD)DataPointer)
        {
          CMBlockBufferCopyDataBytes(a11, 0, v34, (void *)address);
          LOBYTE(a11) = 1;
          if (BytePtr)
            goto LABEL_16;
          goto LABEL_22;
        }
        goto LABEL_19;
      }
LABEL_35:
      v37 = 4294955216;
      goto LABEL_30;
    }
LABEL_15:
    v34 = 0;
    if (BytePtr)
      goto LABEL_16;
LABEL_22:
    Length = 0;
    goto LABEL_23;
  }
  v30 = CMBlockBufferGetDataLength(a10);
  if (!v30)
    goto LABEL_35;
  v31 = v30;
  if (!CMBlockBufferIsRangeContiguous(a10, 0, v30))
  {
    DataPointer = FigSignalErrorAt();
    goto LABEL_19;
  }
  DataPointer = CMBlockBufferGetDataPointer(a10, 0, 0, 0, &dataPointerOut);
  if (!(_DWORD)DataPointer)
  {
    if (a11)
      goto LABEL_9;
    goto LABEL_15;
  }
LABEL_19:
  v37 = DataPointer;
LABEL_30:
  if (theData)
    CFRelease(theData);
  if (!FigRemote_ShouldConnectToMediaplaybackd())
    FigRPCKillServerOnTimeout();
  return v37;
}

uint64_t videoQueueRemote_RequestDecodeForPreroll(uint64_t a1, uint64_t a2)
{
  _BYTE *DerivedStorage;
  _BYTE *v4;
  uint64_t v6;
  mach_port_t v7;
  const UInt8 *BytePtr;
  int Length;
  unsigned int v10;
  uint64_t v11;
  CFDataRef theData;
  unsigned int v13;

  v13 = 0;
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  theData = 0;
  if (DerivedStorage[16])
    return FigSignalErrorAt();
  v4 = DerivedStorage;
  if (*DerivedStorage)
    return FigSignalErrorAt();
  v6 = MEMORY[0x19402EA30](a2, *MEMORY[0x1E0C9AE00], &theData);
  if ((_DWORD)v6)
  {
    v11 = v6;
  }
  else
  {
    v7 = *((_DWORD *)v4 + 5);
    BytePtr = CFDataGetBytePtr(theData);
    Length = CFDataGetLength(theData);
    v10 = FigVideoQueueRemoteClient_RequestDecodeForPreroll(v7, (uint64_t)BytePtr, Length, (int *)&v13);
    if (v10)
      v11 = v10;
    else
      v11 = v13;
  }
  if (theData)
    CFRelease(theData);
  return v11;
}

uint64_t videoQueueRemote_SetSynchronizedLayers()
{
  uint64_t DerivedStorage;
  const __CFArray *v1;
  uint64_t v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 152));
  if (*(_QWORD *)(DerivedStorage + 160))
  {
    v1 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)(DerivedStorage + 40), 1, MEMORY[0x1E0C9B378]);
    v2 = FigLayerSynchronizerSetLayerArray(*(_QWORD *)(DerivedStorage + 160), v1);
    if (v1)
      CFRelease(v1);
  }
  else
  {
    v2 = 0;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 152));
  return v2;
}

void videoQueueRemote_SynchronizeLayerToMoment(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  uint64_t DerivedStorage;
  uint64_t v6;
  const void *v7;
  CFTypeRef v8;

  v3 = weakReferenceTable_CopyPointerFromKey();
  if (v3)
  {
    v4 = (const void *)v3;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!*(_BYTE *)DerivedStorage)
    {
      v6 = DerivedStorage;
      MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 152));
      v7 = *(const void **)(v6 + 160);
      if (v7)
      {
        v8 = CFRetain(v7);
        MEMORY[0x19402EF04](*(_QWORD *)(v6 + 152));
        if (v8)
        {
          FigLayerSynchronizerSynchronizeToMoment((uint64_t)v8, a2, 0);
          CFRelease(v8);
        }
      }
      else
      {
        MEMORY[0x19402EF04](*(_QWORD *)(v6 + 152));
      }
    }
    CFRelease(v4);
  }
}

uint64_t ASSET_CLIENT_SYNCHRONOUSLY_COPYING_A_PROPERTY()
{
  return FigXPCRemoteClientSendSyncMessageWithNoTimeoutCreatingReply();
}

uint64_t FigAssetRemoteCreateWithURL(const __CFAllocator *a1, const void *a2, uint64_t a3, const __CFDictionary *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v13 = 0;
  if (a2 && a5)
  {
    if (remoteXPCAssetClient_EnsureClientEstablished_gAssetRemoteClientSetupOnce != -1)
      dispatch_once(&remoteXPCAssetClient_EnsureClientEstablished_gAssetRemoteClientSetupOnce, &__block_literal_global_84);
    v10 = remoteXPCAssetClient_EnsureClientEstablished_err;
    if (!remoteXPCAssetClient_EnsureClientEstablished_err)
    {
      v10 = remoteXPCAsset_CreateInternal(a1, a2, 0, 0, 0, -1, 0, a3, a4, &v13);
      if (!(_DWORD)v10)
      {
        v11 = v13;
        remoteXPCAsset_SetCachedAssetPropertyValue(v13, (uint64_t)CFSTR("assetProperty_CreationURL"), (uint64_t)a2);
        *a5 = v11;
      }
    }
  }
  else
  {
    v10 = FigSignalErrorAt();
  }
  FigXPCRemoteClientKillServerOnTimeout();
  return v10;
}

uint64_t remoteXPCAsset_CreateInternal(const __CFAllocator *a1, const void *a2, uint64_t a3, const __CFData *a4, OpaqueCMBlockBuffer *a5, int a6, uint64_t a7, uint64_t a8, const __CFDictionary *a9, _QWORD *a10)
{
  uint64_t DataPointer;
  CFTypeID v16;
  const __CFDictionary *v17;
  uint64_t URLValue;
  uint64_t v19;
  uint64_t v20;
  const void *DataValue;
  CFTypeRef v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __CFDictionary *v26;
  const __CFString *v27;
  const __CFString *v28;
  CFTypeID v29;
  const void *v30;
  const void *v31;
  __CFDictionary *MutableCopy;
  uint64_t v33;
  uint64_t v34;
  const __CFString *v35;
  const __CFString *v36;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v38;
  unsigned int v39;
  int *v40;
  char *v41;
  int v42;
  uint64_t uint64;
  CFTypeRef v44;
  CFNumberRef v45;
  CFTypeRef v46;
  uint64_t ObjectID;
  void *v48;
  void *v49;
  const UInt8 *BytePtr;
  size_t Length;
  uint64_t DerivedStorage;
  CFTypeRef v54;
  CFTypeRef v55;
  CFTypeRef v56;
  CFTypeRef v57;
  char v58;
  CMBlockBufferRef blockBufferOut;
  xpc_object_t v60;
  xpc_object_t xdict;
  CFTypeRef cf;
  uint64_t value;
  os_log_type_t type;
  unsigned int v65;
  _BYTE theData[12];
  __int16 v67;
  const void *v68;
  __int16 v69;
  char *v70;
  char *dataPointerOut[16];
  size_t totalLengthOut[131];

  totalLengthOut[128] = *MEMORY[0x1E0C80C00];
  cf = 0;
  value = a8;
  v60 = 0;
  xdict = 0;
  blockBufferOut = 0;
  v58 = 0;
  v56 = 0;
  v57 = 0;
  v54 = 0;
  v55 = 0;
  DataPointer = remoteXPCAsset_CreateAssetObject(a1, &cf);
  if ((_DWORD)DataPointer)
    goto LABEL_120;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v16 = CFGetTypeID(a2);
    if (v16 == CFURLGetTypeID())
    {
      DataPointer = FigXPCCreateBasicMessage();
      if ((_DWORD)DataPointer)
        goto LABEL_120;
      DataPointer = FigXPCMessageSetCFURL();
      if ((_DWORD)DataPointer)
        goto LABEL_120;
LABEL_26:
      v17 = a9;
      if (a9)
      {
        URLValue = FigCFDictionaryGetURLValue();
        v19 = FigCFDictionaryGetURLValue();
        FigCFDictionaryGetDictionaryValue();
        v20 = FigCFDictionaryGetURLValue();
        FigCFDictionaryGetBooleanIfPresent();
        DataValue = (const void *)FigCFDictionaryGetDataValue();
        if (DataValue)
          v22 = CFRetain(DataValue);
        else
          v22 = 0;
        FigCFDictionaryGetBooleanIfPresent();
        v27 = (const __CFString *)CFDictionaryGetValue(a9, CFSTR("assetOption_LoggingIdentifier"));
        if (v27)
        {
          v28 = v27;
          v29 = CFGetTypeID(v27);
          if (v29 == CFStringGetTypeID())
            CFStringGetCString(v28, (char *)(DerivedStorage + 56), 10, 0x600u);
        }
        v30 = CFDictionaryGetValue(a9, CFSTR("assetOption_CustomURLLoader"));
        if (!v30)
        {
          v24 = 0;
          v26 = 0;
          if (v22)
            goto LABEL_48;
LABEL_45:
          v22 = (CFTypeRef)MEMORY[0x1940305CC]();
          if (!v22)
            goto LABEL_48;
          if (v26)
            goto LABEL_47;
          goto LABEL_31;
        }
        v31 = v30;
        totalLengthOut[0] = 0;
        MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
        if (!MutableCopy)
        {
          v24 = 0;
          goto LABEL_100;
        }
        v26 = MutableCopy;
        CFDictionaryRemoveValue(MutableCopy, CFSTR("assetOption_CustomURLLoader"));
        v24 = MEMORY[0x19402DADC](v31, totalLengthOut);
        if (!(_DWORD)v24 && totalLengthOut[0])
          xpc_dictionary_set_uint64(xdict, "CustomURLLoader", totalLengthOut[0]);
        if (!v22)
          goto LABEL_45;
      }
      else
      {
        v23 = MEMORY[0x1940305CC]();
        v20 = 0;
        if (v23)
        {
          v22 = (CFTypeRef)v23;
          v24 = 0;
          v19 = 0;
          URLValue = 0;
LABEL_31:
          v25 = FigCFDictionaryCreateMutableCopy();
          if (!v25)
          {
LABEL_101:
            CFRelease(v22);
            goto LABEL_102;
          }
          v26 = (__CFDictionary *)v25;
LABEL_47:
          CFDictionarySetValue(v26, CFSTR("assetOption_ApplicationTransportSecurityContext"), v22);
          goto LABEL_48;
        }
        v19 = 0;
        URLValue = 0;
        v26 = 0;
        v22 = 0;
      }
LABEL_48:
      if (v26)
        v17 = v26;
      v33 = FigXPCMessageSetCFDictionary();
      if ((_DWORD)v33)
      {
LABEL_115:
        v24 = v33;
        if (v26)
LABEL_99:
          CFRelease(v26);
LABEL_100:
        if (!v22)
          goto LABEL_102;
        goto LABEL_101;
      }
      xpc_dictionary_set_uint64(xdict, "AssetCreationFlags", value);
      if (!a2)
      {
LABEL_69:
        if (v19)
          remoteXPCAsset_sandboxRegisterURLdAddToXPCMessageAndCopyRegistration(0, v19, 0, (uint64_t)xdict, 0x1932B9655, &v56);
        if (URLValue)
        {
          remoteXPCAsset_sandboxRegisterURLdAddToXPCMessageAndCopyRegistration(1, URLValue, 0, (uint64_t)xdict, 0x1932B9682, &v55);
        }
        else if (!v58)
        {
          totalLengthOut[0] = 0;
          v34 = FigDiskCacheRepositoryCopyDefaultTmpDirURL((CFTypeRef *)totalLengthOut);
          if (!(_DWORD)v34)
          {
            FigSandboxRegisterDirectoryURLWithProcess();
            v34 = totalLengthOut[0];
            if (totalLengthOut[0])
              CFRelease((CFTypeRef)totalLengthOut[0]);
          }
        }
        if (v20)
          remoteXPCAsset_sandboxRegisterURLdAddToXPCMessageAndCopyRegistration(1, v20, 0, (uint64_t)xdict, 0x1932B96A8, &v54);
        if (FigAssetAllowsSandboxedParsingOptIn(v34))
          FigCFDictionaryGetBooleanIfPresent();
        v33 = FigXPCRemoteClientSendSyncMessageCreatingReply();
        if (!(_DWORD)v33)
        {
          uint64 = xpc_dictionary_get_uint64(v60, (const char *)*MEMORY[0x1E0CA36A0]);
          v44 = cf;
          v33 = remoteXPCAsset_CompleteAssetObjectSetup((uint64_t)cf, uint64);
          if (!(_DWORD)v33)
          {
            v45 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &value);
            remoteXPCAsset_SetCachedAssetPropertyValue((uint64_t)v44, (uint64_t)CFSTR("assetProperty_CreationOptionsDictionary"), (uint64_t)v17);
            v46 = cf;
            remoteXPCAsset_SetCachedAssetPropertyValue((uint64_t)cf, (uint64_t)CFSTR("assetProperty_CreationFlags"), (uint64_t)v45);
            if (v45)
              CFRelease(v45);
            v24 = 0;
            if (!a2)
            {
LABEL_98:
              remoteXPCAsset_storeSandboxRegistration(v46, v57);
              remoteXPCAsset_storeSandboxRegistration(v46, v56);
              remoteXPCAsset_storeSandboxRegistration(v46, v55);
              remoteXPCAsset_storeSandboxRegistration(v46, v54);
              *a10 = v46;
              cf = 0;
              if (!v26)
                goto LABEL_100;
              goto LABEL_99;
            }
            totalLengthOut[0] = 0;
            dataPointerOut[0] = 0;
            *(_QWORD *)theData = 0;
            if (!v17 || !CFDictionaryContainsKey(v17, CFSTR("assetOption_AdditionalHTTPCookies")))
            {
              ObjectID = FigRemote_SerializeCookiesForURL((const __CFURL *)a2, (uint64_t)theData);
              if ((_DWORD)ObjectID)
              {
LABEL_117:
                v24 = ObjectID;
LABEL_95:
                FigXPCRelease();
                if (*(_QWORD *)theData)
                  CFRelease(*(CFTypeRef *)theData);
                v46 = cf;
                goto LABEL_98;
              }
              if (*(_QWORD *)theData)
              {
                ObjectID = remoteXPCAsset_GetObjectID((uint64_t)v46, dataPointerOut);
                if (!(_DWORD)ObjectID)
                {
                  v24 = FigXPCCreateBasicMessage();
                  v48 = (void *)totalLengthOut[0];
                  if (!(_DWORD)v24)
                  {
                    FigXPCMessageSetCFURL();
                    v49 = (void *)totalLengthOut[0];
                    BytePtr = CFDataGetBytePtr(*(CFDataRef *)theData);
                    Length = CFDataGetLength(*(CFDataRef *)theData);
                    xpc_dictionary_set_data(v49, "CookieData", BytePtr, Length);
                    v24 = FigXPCRemoteClientSendSyncMessage();
                    v48 = (void *)totalLengthOut[0];
                  }
                  if (v48)
                  {
                    totalLengthOut[0] = 0;
                    xpc_release(v48);
                  }
                  goto LABEL_95;
                }
                goto LABEL_117;
              }
            }
            v24 = 0;
            goto LABEL_95;
          }
        }
        goto LABEL_115;
      }
      bzero(totalLengthOut, 0x400uLL);
      if (!FigCFURLIsLocalResource()
        || !CFURLGetFileSystemRepresentation((CFURLRef)a2, 1u, (UInt8 *)totalLengthOut, 1024)
        || (v35 = CFURLCopyPathExtension((CFURLRef)a2)) == 0)
      {
        v42 = 0;
LABEL_68:
        remoteXPCAsset_sandboxRegisterURLdAddToXPCMessageAndCopyRegistration(0, (uint64_t)a2, v42 == 0, (uint64_t)xdict, 0x1932B9635, &v57);
        goto LABEL_69;
      }
      v36 = v35;
      if (CFStringCompare(v35, CFSTR("movpkg"), 1uLL) == kCFCompareEqualTo)
      {
        if (!access((const char *)totalLengthOut, 2))
        {
          v42 = 1;
LABEL_67:
          CFRelease(v36);
          goto LABEL_68;
        }
        v65 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v38 = v65;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
          v39 = v38;
        else
          v39 = v38 & 0xFFFFFFFE;
        if (v39)
        {
          v40 = __error();
          v41 = strerror(*v40);
          *(_DWORD *)theData = 136315651;
          *(_QWORD *)&theData[4] = "remoteXPCAsset_shouldGrantWriteAccessToURL";
          v67 = 2113;
          v68 = a2;
          v69 = 2080;
          v70 = v41;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v42 = 0;
      goto LABEL_67;
    }
    goto LABEL_119;
  }
  if (a3)
  {
    totalLengthOut[0] = 0;
    DataPointer = FigFormatReaderXPCRemoteGetObjectID(a3, totalLengthOut);
    if ((_DWORD)DataPointer)
      goto LABEL_120;
    DataPointer = FigXPCCreateBasicMessage();
    if ((_DWORD)DataPointer)
      goto LABEL_120;
    xpc_dictionary_set_uint64(xdict, "FormatReader", totalLengthOut[0]);
    goto LABEL_26;
  }
  if (a4)
  {
    if (CFDataGetLength(a4))
    {
      DataPointer = FigXPCCreateBasicMessage();
      if ((_DWORD)DataPointer)
        goto LABEL_120;
      DataPointer = FigXPCMessageSetCFData();
      if ((_DWORD)DataPointer)
        goto LABEL_120;
      goto LABEL_26;
    }
    goto LABEL_119;
  }
  if (a5)
  {
    totalLengthOut[0] = 0;
    dataPointerOut[0] = 0;
    if (!CMBlockBufferGetDataLength(a5))
    {
LABEL_119:
      DataPointer = FigSignalErrorAt();
      goto LABEL_120;
    }
    DataPointer = FigXPCCreateBasicMessage();
    if (!(_DWORD)DataPointer)
    {
      if (CMBlockBufferIsRangeContiguous(a5, 0, 0))
      {
        blockBufferOut = a5;
        CFRetain(a5);
LABEL_24:
        DataPointer = CMBlockBufferGetDataPointer(blockBufferOut, 0, 0, totalLengthOut, dataPointerOut);
        if ((_DWORD)DataPointer)
          goto LABEL_120;
        xpc_dictionary_set_data(xdict, "BlockBufferData", dataPointerOut[0], totalLengthOut[0]);
        xpc_dictionary_set_int64(xdict, "FormatIdentifierType", a6);
        DataPointer = FigXPCMessageSetCFObject();
        if ((_DWORD)DataPointer)
          goto LABEL_120;
        goto LABEL_26;
      }
      DataPointer = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a5, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, 0, &blockBufferOut);
      if (!(_DWORD)DataPointer)
        goto LABEL_24;
    }
  }
  else
  {
    DataPointer = FigSignalErrorAt();
    if (!(_DWORD)DataPointer)
      goto LABEL_26;
  }
LABEL_120:
  v24 = DataPointer;
LABEL_102:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (cf)
    CFRelease(cf);
  FigXPCRelease();
  FigXPCRelease();
  if (v57)
    CFRelease(v57);
  if (v56)
    CFRelease(v56);
  if (v55)
    CFRelease(v55);
  if (v54)
    CFRelease(v54);
  return v24;
}

void remoteXPCAsset_SetCachedAssetPropertyValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  NSObject *v6;
  _QWORD block[7];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __remoteXPCAsset_SetCachedAssetPropertyValue_block_invoke;
  block[3] = &__block_descriptor_tmp_21_1;
  block[4] = DerivedStorage;
  block[5] = a2;
  block[6] = a3;
  dispatch_sync(v6, block);
}

uint64_t FigAssetRemoteCreateWithURLAndRetry(const __CFAllocator *a1, const void *a2, uint64_t a3, const __CFDictionary *a4, _QWORD *a5)
{
  int v10;
  uint64_t result;
  uint64_t v12;

  v12 = 0;
  if (!a5)
    return FigSignalErrorAt();
  v10 = 5;
  while (1)
  {
    result = FigAssetRemoteCreateWithURL(a1, a2, a3, a4, &v12);
    if ((int)result > -12179)
      break;
    if ((_DWORD)result != -16155 && (_DWORD)result != -16153)
      return result;
LABEL_9:
    if (!--v10)
      return result;
  }
  if ((_DWORD)result)
  {
    if ((_DWORD)result != -12178)
      return result;
    goto LABEL_9;
  }
  *a5 = v12;
  return result;
}

uint64_t FigAssetRemoteCreateWithFormatReader(const __CFAllocator *a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4, _QWORD *a5)
{
  uint64_t v10;
  const void *v11;
  const void *v13;

  v13 = 0;
  if (!a2 || !a5)
  {
    v10 = FigSignalErrorAt();
    goto LABEL_8;
  }
  if (remoteXPCAssetClient_EnsureClientEstablished_gAssetRemoteClientSetupOnce != -1)
    dispatch_once(&remoteXPCAssetClient_EnsureClientEstablished_gAssetRemoteClientSetupOnce, &__block_literal_global_84);
  v10 = remoteXPCAssetClient_EnsureClientEstablished_err;
  if (remoteXPCAssetClient_EnsureClientEstablished_err)
    goto LABEL_8;
  v10 = remoteXPCAsset_CreateInternal(a1, 0, a2, 0, 0, -1, 0, a3, a4, &v13);
  v11 = v13;
  if (!(_DWORD)v10)
  {
    remoteXPCAsset_SetCachedAssetPropertyValue((uint64_t)v13, (uint64_t)CFSTR("assetProperty_FormatReader"), a2);
    *a5 = v11;
LABEL_8:
    FigXPCRemoteClientKillServerOnTimeout();
    return v10;
  }
  FigXPCRemoteClientKillServerOnTimeout();
  if (v11)
    CFRelease(v11);
  return v10;
}

uint64_t FigAssetRemoteCreateWithMovieProxyData(const __CFAllocator *a1, const __CFData *a2, uint64_t a3, const __CFDictionary *a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t Internal;

  if (!a2 || !a5)
  {
    Internal = FigSignalErrorAt();
    goto LABEL_7;
  }
  if (remoteXPCAssetClient_EnsureClientEstablished_gAssetRemoteClientSetupOnce != -1)
    dispatch_once(&remoteXPCAssetClient_EnsureClientEstablished_gAssetRemoteClientSetupOnce, &__block_literal_global_84);
  v10 = remoteXPCAssetClient_EnsureClientEstablished_err;
  if (!remoteXPCAssetClient_EnsureClientEstablished_err)
  {
    Internal = remoteXPCAsset_CreateInternal(a1, 0, 0, a2, 0, -1, 0, a3, a4, a5);
LABEL_7:
    v10 = Internal;
  }
  FigXPCRemoteClientKillServerOnTimeout();
  return v10;
}

uint64_t FigAssetRemoteCreateWithBlockBuffer(const __CFAllocator *a1, CMBlockBufferRef theBuffer, int a3, uint64_t a4, uint64_t a5, const __CFDictionary *a6, _QWORD *a7)
{
  uint64_t v14;
  uint64_t Internal;

  if (!theBuffer || a3 == -1 || !a4 || !a7 || !CMBlockBufferGetDataLength(theBuffer))
  {
    Internal = FigSignalErrorAt();
    goto LABEL_10;
  }
  if (remoteXPCAssetClient_EnsureClientEstablished_gAssetRemoteClientSetupOnce != -1)
    dispatch_once(&remoteXPCAssetClient_EnsureClientEstablished_gAssetRemoteClientSetupOnce, &__block_literal_global_84);
  v14 = remoteXPCAssetClient_EnsureClientEstablished_err;
  if (!remoteXPCAssetClient_EnsureClientEstablished_err)
  {
    Internal = remoteXPCAsset_CreateInternal(a1, 0, 0, 0, theBuffer, a3, a4, a5, a6, a7);
LABEL_10:
    v14 = Internal;
  }
  FigXPCRemoteClientKillServerOnTimeout();
  return v14;
}

uint64_t FigAssetRemoteCreateForServerObject(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v8 = 0;
  v6 = 0;
  v7 = 0;
  if (remoteXPCAssetClient_EnsureClientEstablished_gAssetRemoteClientSetupOnce != -1)
    dispatch_once(&remoteXPCAssetClient_EnsureClientEstablished_gAssetRemoteClientSetupOnce, &__block_literal_global_84);
  result = remoteXPCAssetClient_EnsureClientEstablished_err;
  if (!remoteXPCAssetClient_EnsureClientEstablished_err)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, int *, uint64_t *, uint64_t *))(a2 + 16))(a2, 0, 0, &v8, &v7, &v6);
    if (!(_DWORD)result)
      return FigAssetXPCRemoteCreateWithObjectID(v7, a3);
  }
  return result;
}

uint64_t FigAssetXPCRemoteCreateWithObjectID(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  if (!a1 || !a2)
    return FigSignalErrorAt();
  if (remoteXPCAssetClient_EnsureClientEstablished_gAssetRemoteClientSetupOnce != -1)
    dispatch_once(&remoteXPCAssetClient_EnsureClientEstablished_gAssetRemoteClientSetupOnce, &__block_literal_global_84);
  result = remoteXPCAssetClient_EnsureClientEstablished_err;
  if (!remoteXPCAssetClient_EnsureClientEstablished_err)
  {
    result = remoteXPCAsset_CreateAssetObject((const __CFAllocator *)*MEMORY[0x1E0C9AE00], a2);
    if (!(_DWORD)result)
      return remoteXPCAsset_CompleteAssetObjectSetup(*a2, a1);
  }
  return result;
}

uint64_t FigAssetRemoteCopyAssetWithDownloadToken(const __CFAllocator *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t uint64;
  const void *v9;
  const void *v11;
  xpc_object_t v12;
  xpc_object_t xdict;

  v12 = 0;
  xdict = 0;
  v11 = 0;
  if (!a3)
  {
    v6 = FigSignalErrorAt();
    goto LABEL_10;
  }
  if (remoteXPCAssetClient_EnsureClientEstablished_gAssetRemoteClientSetupOnce != -1)
    dispatch_once(&remoteXPCAssetClient_EnsureClientEstablished_gAssetRemoteClientSetupOnce, &__block_literal_global_84);
  v6 = remoteXPCAssetClient_EnsureClientEstablished_err;
  if (remoteXPCAssetClient_EnsureClientEstablished_err)
    goto LABEL_12;
  v7 = FigXPCCreateBasicMessage();
  if ((_DWORD)v7
    || (xpc_dictionary_set_uint64(xdict, "DownloadToken", a2),
        v7 = remoteXPCAsset_CreateAssetObject(a1, &v11),
        (_DWORD)v7)
    || (v7 = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)v7))
  {
    v6 = v7;
LABEL_12:
    v9 = v11;
    goto LABEL_13;
  }
  uint64 = xpc_dictionary_get_uint64(v12, (const char *)*MEMORY[0x1E0CA36A0]);
  v9 = v11;
  v6 = remoteXPCAsset_CompleteAssetObjectSetup((uint64_t)v11, uint64);
  if (!(_DWORD)v6)
  {
    *a3 = v9;
    goto LABEL_10;
  }
LABEL_13:
  if (v9)
    CFRelease(v9);
LABEL_10:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteXPCAsset_CreateAssetObject(const __CFAllocator *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t DerivedStorage;

  FigAssetGetClassID();
  v4 = CMDerivedObjectCreate();
  if (!(_DWORD)v4)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    FigRemotePropertyCacheSetup(a1, (dispatch_queue_t *)(DerivedStorage + 8), "remoteFigAsset_cache");
    *(_BYTE *)(DerivedStorage + 56) = 0;
  }
  *a2 = 0;
  return v4;
}

uint64_t remoteXPCAsset_CompleteAssetObjectSetup(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)CMBaseObjectGetDerivedStorage() = a2;
  result = FigXPCRemoteClientAssociateObject();
  if (!(_DWORD)result)
    return FigStartMonitoringMediaServicesProcessDeath();
  return result;
}

uint64_t FigAssetXPCRemoteRetainCopiedAsset(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v4;
  CFTypeRef v5;
  uint64_t v6;
  CFTypeRef cf;

  cf = 0;
  if (a1 && a2)
  {
    if (remoteXPCAssetClient_EnsureClientEstablished_gAssetRemoteClientSetupOnce != -1)
      dispatch_once(&remoteXPCAssetClient_EnsureClientEstablished_gAssetRemoteClientSetupOnce, &__block_literal_global_84);
    v4 = remoteXPCAssetClient_EnsureClientEstablished_err;
    if (remoteXPCAssetClient_EnsureClientEstablished_err)
      return v4;
    v4 = FigXPCRemoteClientRetainCopiedObject();
    v5 = cf;
    if (!(_DWORD)v4)
    {
      v6 = FigAssetXPCRemoteCreateWithObjectID(a1, (uint64_t *)&cf);
      if (!(_DWORD)v6)
      {
        v4 = 0;
        *a2 = cf;
        return v4;
      }
      v4 = v6;
      v5 = cf;
    }
    if (v5)
      CFRelease(v5);
    return v4;
  }
  return FigSignalErrorAt();
}

uint64_t FigAssetXPCRemoteGetObjectID(uint64_t a1, _QWORD *a2)
{
  if (a1 && a2)
    return remoteXPCAsset_GetObjectID(a1, a2);
  else
    return FigSignalErrorAt();
}

uint64_t remoteXPCAsset_GetObjectID(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 40) || *(_BYTE *)(DerivedStorage + 66))
    return FigSignalErrorAt();
  *a2 = *(_QWORD *)DerivedStorage;
  return 0;
}

uint64_t remoteXPCAssetClient_DeadConnectionCallback(const void *a1)
{
  CFTypeID v2;
  uint64_t result;
  _BYTE *v4;
  CFTypeID v5;

  v2 = CFGetTypeID(a1);
  if (v2 == FigAssetGetTypeID())
  {
    result = CMBaseObjectGetDerivedStorage();
    v4 = (_BYTE *)(result + 40);
  }
  else
  {
    v5 = CFGetTypeID(a1);
    result = FigAssetTrackGetTypeID();
    if (v5 != result)
      return result;
    result = CMBaseObjectGetDerivedStorage();
    v4 = (_BYTE *)(result + 48);
  }
  *v4 = 1;
  return result;
}

uint64_t remoteXPCAssetClient_NotificationFilter(const void *a1, const void *a2, void *a3, CFDictionaryRef theDict, __CFDictionary **a5)
{
  uint64_t v5;
  uint64_t v11;
  const void *v12;
  __CFDictionary *MutableCopy;
  __CFDictionary *v14;
  const void *Value;
  const void *v16;
  CFTypeID v17;
  xpc_object_t v18;
  int AssetPropertyValueFromXPCDictionary;
  uint64_t DerivedStorage;
  NSObject *v21;
  const void *v23;
  const void *v24;
  uint64_t v25;
  _QWORD v26[8];
  int v27;
  CFTypeRef cf;

  v5 = 0;
  if (!a2 || !theDict)
    return v5;
  if (CFDictionaryGetValue(theDict, CFSTR("CFErrorAsDictionary")))
  {
    v11 = FigCFErrorCreateFromPropertyList();
    if (!v11)
    {
      FigSignalErrorAt();
      return 0;
    }
    v12 = (const void *)v11;
    MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theDict);
    if (!MutableCopy)
    {
      FigSignalErrorAt();
      v5 = 0;
      goto LABEL_19;
    }
    v14 = MutableCopy;
    CFDictionaryRemoveValue(MutableCopy, CFSTR("CFErrorAsDictionary"));
    CFDictionarySetValue(v14, CFSTR("assetPayload_CFError"), v12);
    v5 = 4;
  }
  else
  {
    v5 = 0;
    v14 = 0;
    v12 = 0;
  }
  if (CFEqual(a2, CFSTR("assetNotice_PropertyLoaded")) || CFEqual(a2, CFSTR("assetNotice_PropertyRevised")))
  {
    Value = CFDictionaryGetValue(theDict, CFSTR("assetPayload_Property"));
    if (!Value)
      goto LABEL_18;
    v16 = Value;
    cf = 0;
    if (a1)
    {
      v17 = CFGetTypeID(a1);
      if (v17 != FigAssetGetTypeID())
        goto LABEL_16;
    }
    v18 = xpc_dictionary_get_value(a3, "LoadedValue");
    if (v18)
    {
      AssetPropertyValueFromXPCDictionary = remoteXPCAsset_DeserializeAndCreateAssetPropertyValueFromXPCDictionary((uint64_t)a1, v18, v16, (uint64_t *)&cf);
      if (!a1)
        goto LABEL_16;
    }
    else
    {
      AssetPropertyValueFromXPCDictionary = 0;
      if (!a1)
      {
LABEL_16:
        if (cf)
          CFRelease(cf);
        goto LABEL_18;
      }
    }
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v21 = *(NSObject **)(DerivedStorage + 8);
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 0x40000000;
    v26[2] = __remoteXPCAssetClient_HandleCachedPropertyLoaded_block_invoke;
    v26[3] = &__block_descriptor_tmp_8_8;
    v26[4] = DerivedStorage;
    v26[5] = v16;
    v27 = AssetPropertyValueFromXPCDictionary;
    v26[6] = v18;
    v26[7] = cf;
    dispatch_sync(v21, v26);
    goto LABEL_16;
  }
  if (CFEqual(a2, CFSTR("assetNotice_PropertyFailedToLoad")))
  {
    if (CFDictionaryGetValue(theDict, CFSTR("assetPayload_Property")))
    {
      LODWORD(cf) = 0;
      FigCFDictionaryGetInt32IfPresent();
      if (a1)
      {
        CFGetTypeID(a1);
        FigAssetGetTypeID();
      }
    }
  }
  else if (CFEqual(a2, CFSTR("assetTrackNotice_PropertyLoaded"))
         || CFEqual(a2, CFSTR("assetTrackNotice_PropertyRevised")))
  {
    v23 = CFDictionaryGetValue(theDict, CFSTR("assetPayload_Property"));
    if (v23)
      remoteXPCAssetTrackClient_HandleCachedPropertyLoaded(a1, v23, a3);
  }
  else if (CFEqual(a2, CFSTR("assetTrackNotice_PropertyFailedToLoad")))
  {
    v24 = CFDictionaryGetValue(theDict, CFSTR("assetPayload_Property"));
    if (v24)
    {
      v25 = (uint64_t)v24;
      LODWORD(v26[0]) = 0;
      FigCFDictionaryGetInt32IfPresent();
      remoteXPCAssetTrackClient_HandleCachedPropertyFailedToLoad(a1, v25, 0, (uint64_t)v12);
    }
  }
  else if (a1 && CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4B88]))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
LABEL_18:
  *a5 = v14;
  if (v12)
LABEL_19:
    CFRelease(v12);
  return v5;
}

void remoteXPCAssetClient_ObjectPurgedCallback(const void *a1)
{
  CFTypeID v2;
  CFTypeID v3;
  CFMutableDictionaryRef Mutable;

  v2 = CFGetTypeID(a1);
  if (v2 == FigAssetGetTypeID())
  {
    *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 66) = 1;
  }
  else
  {
    v3 = CFGetTypeID(a1);
    if (v3 != FigAssetTrackGetTypeID())
      return;
    *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 49) = 1;
  }
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetInt64();
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (Mutable)
    CFRelease(Mutable);
}

void remoteXPCAssetTrackClient_HandleCachedPropertyLoaded(const void *a1, const void *a2, void *a3)
{
  CFTypeID v5;
  uint64_t DerivedStorage;
  xpc_object_t value;
  xpc_object_t v8;
  CFTypeRef v9;
  NSObject *v10;
  _QWORD v11[8];
  int v12;
  CFTypeRef v13;

  if (a1)
  {
    v5 = CFGetTypeID(a1);
    if (v5 == FigAssetTrackGetTypeID())
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v13 = 0;
      value = xpc_dictionary_get_value(a3, "LoadedValue");
      v8 = value;
      if (value)
      {
        LODWORD(value) = remoteXPCAssetTrack_DeserializeAndCreateAssetTrackPropertyValueFromXPCDictionary((int)value, a2, &v13);
        v9 = v13;
      }
      else
      {
        v9 = 0;
      }
      v10 = *(NSObject **)(DerivedStorage + 16);
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 0x40000000;
      v11[2] = __remoteXPCAssetTrackClient_HandleCachedPropertyLoaded_block_invoke;
      v11[3] = &__block_descriptor_tmp_17_2;
      v11[4] = DerivedStorage;
      v11[5] = a2;
      v12 = (int)value;
      v11[6] = v8;
      v11[7] = v9;
      dispatch_sync(v10, v11);
      if (v13)
        CFRelease(v13);
    }
  }
}

void remoteXPCAssetTrackClient_HandleCachedPropertyFailedToLoad(const void *a1, uint64_t a2, int a3, uint64_t a4)
{
  CFTypeID v7;
  uint64_t TypeID;
  uint64_t DerivedStorage;
  NSObject *v10;
  _QWORD v11[7];
  int v12;

  if (a1)
  {
    v7 = CFGetTypeID(a1);
    TypeID = FigAssetTrackGetTypeID();
    if (a3)
    {
      if (v7 == TypeID)
      {
        DerivedStorage = CMBaseObjectGetDerivedStorage();
        v10 = *(NSObject **)(DerivedStorage + 16);
        v11[0] = MEMORY[0x1E0C809B0];
        v11[1] = 0x40000000;
        v11[2] = __remoteXPCAssetTrackClient_HandleCachedPropertyFailedToLoad_block_invoke;
        v11[3] = &__block_descriptor_tmp_18_4;
        v11[4] = DerivedStorage;
        v11[5] = a2;
        v12 = a3;
        v11[6] = a4;
        dispatch_sync(v10, v11);
      }
    }
  }
}

uint64_t remoteXPCAsset_DeserializeAndCreateAssetPropertyValueFromXPCDictionary(uint64_t a1, void *a2, CFTypeRef cf1, uint64_t *a4)
{
  uint64_t DerivedStorage;
  uint64_t uint64;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  CFTypeRef cf;

  if (CFEqual(cf1, CFSTR("assetProperty_FormatReader")))
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    cf = 0;
    uint64 = xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
    if (uint64)
    {
      v10 = FigFormatReaderXPCRemoteRetainCopiedPlaybackProcessFormatReader(uint64, &cf);
      if (!(_DWORD)v10)
      {
LABEL_4:
        v11 = 0;
        *a4 = (uint64_t)cf;
        return v11;
      }
      v11 = v10;
    }
    else
    {
      v14 = xpc_dictionary_get_uint64(a2, "MediaParserFormatReaderObjectID");
      if (!v14)
        goto LABEL_4;
      v15 = a1 ? *(unsigned __int8 *)(DerivedStorage + 41) : 1;
      v11 = FigFormatReaderXPCRemoteRetainCopiedFormatReader(v14, v15, &cf);
      if (!(_DWORD)v11)
        goto LABEL_4;
    }
    v12 = cf;
LABEL_17:
    if (v12)
      CFRelease(v12);
    return v11;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_CPEProtector")))
  {
    cf = 0;
    v12 = (const void *)xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
    if (!v12)
      goto LABEL_23;
    v13 = FigCPEProtectorXPCRemoteRetainCopiedCPEProtector((uint64_t)v12, &cf);
LABEL_22:
    v11 = v13;
    v12 = cf;
    if ((_DWORD)v11)
      goto LABEL_17;
LABEL_23:
    v11 = 0;
    *a4 = (uint64_t)v12;
    return v11;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_CustomURLLoader")))
  {
    cf = 0;
    v12 = (const void *)xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
    if (!v12)
      goto LABEL_23;
    v13 = FigCustomURLLoaderRemoteCreateWithObjectID();
    goto LABEL_22;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_ContentKeyBoss")))
  {
    cf = 0;
    v12 = (const void *)xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
    if (!v12)
      goto LABEL_23;
    v13 = FigContentKeyBossCreateRemoteWithObjectID(*MEMORY[0x1E0C9AE00], (uint64_t)v12, &cf);
    goto LABEL_22;
  }
  if (CFEqual(cf1, CFSTR("assetProperty_DefaultContentKeySession")))
    return remoteXPCAsset_DeserializeAndCreateDefaultContentKeySessionFromXPCDictionary(a2, a4);
  if (CFEqual(cf1, CFSTR("assetProperty_HLSSessionKeys")))
    return remoteXPCAsset_DeserializeAndCreateHLSSessionKeysFromXPCDictionary(a2, (__CFArray **)a4);
  if (CFEqual(cf1, CFSTR("assetProperty_Tracks")))
    return remoteXPCAsset_DeserializeAndCreateTracksArrayFromXPCDictionary(a2, (__CFArray **)a4);
  if (CFEqual(cf1, CFSTR("assetProperty_HLSAlternates")))
    return remoteXPCAsset_DeserializeAndCreateHLSAlternatesFromXPCDictionary(a2, (__CFArray **)a4);
  if (CFEqual(cf1, CFSTR("assetProperty_CommonMetadata"))
    || CFEqual(cf1, CFSTR("assetProperty_QuickTimeMetadata"))
    || CFEqual(cf1, CFSTR("assetProperty_QuickTimeUserData"))
    || CFEqual(cf1, CFSTR("assetProperty_ISOUserData"))
    || CFEqual(cf1, CFSTR("assetProperty_ID3Metadata"))
    || CFEqual(cf1, CFSTR("assetProperty_iTunesMetadata"))
    || CFEqual(cf1, CFSTR("assetProperty_HLSMetadata"))
    || CFEqual(cf1, CFSTR("assetProperty_ID3MetadataBC")))
  {
    return remoteXPCAsset_ConvertMetadataBinaryPListDataToArray();
  }
  return FigXPCMessageCopyCFObject();
}

uint64_t remoteXPCAsset_DeserializeAndCreateDefaultContentKeySessionFromXPCDictionary(void *a1, uint64_t *a2)
{
  uint64_t uint64;
  uint64_t v4;
  CFTypeRef cf;

  cf = 0;
  uint64 = xpc_dictionary_get_uint64(a1, (const char *)*MEMORY[0x1E0CA36A0]);
  if (uint64
    && (v4 = FigContentKeySessionRemoteCreateSessionForID(*MEMORY[0x1E0C9AE00], uint64, &cf),
        uint64 = (uint64_t)cf,
        (_DWORD)v4))
  {
    if (cf)
      CFRelease(cf);
  }
  else
  {
    v4 = 0;
    *a2 = uint64;
  }
  return v4;
}

uint64_t remoteXPCAsset_DeserializeAndCreateHLSSessionKeysFromXPCDictionary(void *a1, __CFArray **a2)
{
  xpc_object_t value;

  value = xpc_dictionary_get_value(a1, (const char *)*MEMORY[0x1E0CA36C8]);
  if (value)
    return FigContentKeyBossClientServerXPC_DeserializeAndCopyKeySpecifiers(value, a2);
  else
    return FigSignalErrorAt();
}

uint64_t remoteXPCAsset_DeserializeAndCreateTracksArrayFromXPCDictionary(void *a1, __CFArray **a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  BOOL v6;
  void *v7;
  int count;
  size_t v9;
  const __CFAllocator *v10;
  CFMutableArrayRef Mutable;
  __CFArray *v12;
  size_t v13;
  uint64_t v14;
  uint64_t uint64;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  CFTypeRef v19;
  uint64_t DerivedStorage;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __CFArray **v25;
  void *v26;
  CFTypeRef value;
  CFTypeRef cf;

  v4 = xpc_dictionary_get_value(a1, "TrackIDsAndTypes");
  v5 = xpc_dictionary_get_value(a1, "TrackObjectIDs");
  if (v4)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
    goto LABEL_20;
  v7 = v5;
  count = xpc_array_get_count(v4);
  v9 = xpc_array_get_count(v7);
  if (v9 != count)
    return FigSignalErrorAt();
  if (!count)
  {
LABEL_20:
    v12 = 0;
    goto LABEL_21;
  }
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v9, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return FigSignalErrorAt();
  v12 = Mutable;
  if (count < 1)
  {
LABEL_21:
    v18 = 0;
    goto LABEL_22;
  }
  v25 = a2;
  v26 = v7;
  v13 = 0;
  v14 = count;
  while (1)
  {
    uint64 = xpc_array_get_uint64(v7, v13);
    v16 = xpc_array_get_uint64(v4, v13);
    if (uint64)
      break;
    v23 = FigSignalErrorAt();
    if ((_DWORD)v23)
    {
      v18 = v23;
      a2 = v25;
      goto LABEL_25;
    }
    CFArrayAppendValue(v12, 0);
LABEL_16:
    if (v14 == ++v13)
    {
      v18 = 0;
      a2 = v25;
      goto LABEL_22;
    }
  }
  v17 = v16;
  v18 = FigXPCRemoteClientRetainCopiedObject();
  v19 = 0;
  if ((_DWORD)v18)
    goto LABEL_23;
  cf = 0;
  FigAssetTrackGetClassID();
  v18 = CMDerivedObjectCreate();
  v19 = cf;
  if ((_DWORD)v18)
    goto LABEL_23;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigRemotePropertyCacheSetup(v10, (dispatch_queue_t *)(DerivedStorage + 16), "remoteFigAssetTrack_cache");
  value = cf;
  v21 = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(v21 + 8) = HIDWORD(v17);
  *(_DWORD *)(v21 + 12) = v17;
  v7 = v26;
  *(_QWORD *)v21 = uint64;
  v22 = FigXPCRemoteClientAssociateObject();
  if (!(_DWORD)v22)
  {
    CFArrayAppendValue(v12, value);
    if (value)
      CFRelease(value);
    goto LABEL_16;
  }
  v18 = v22;
  v19 = value;
LABEL_23:
  a2 = v25;
  if (v19)
    CFRelease(v19);
LABEL_25:
  CFRelease(v12);
  v12 = 0;
LABEL_22:
  *a2 = v12;
  return v18;
}

uint64_t remoteXPCAsset_DeserializeAndCreateHLSAlternatesFromXPCDictionary(void *a1, __CFArray **a2)
{
  xpc_object_t value;

  value = xpc_dictionary_get_value(a1, (const char *)*MEMORY[0x1E0CA36C8]);
  if (value)
    return FigAlternateCreateArrayOfAlternatesFromXPCObject(value, a2);
  else
    return FigSignalErrorAt();
}

uint64_t remoteXPCAsset_ConvertMetadataBinaryPListDataToArray()
{
  uint64_t v0;

  v0 = FigXPCMessageCopyCFData();
  if ((_DWORD)v0)
    return v0;
  else
    return 0;
}

uint64_t remoteXPCAssetTrack_GetObjectID(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 48) || *(_BYTE *)(DerivedStorage + 49))
    return FigSignalErrorAt();
  *a2 = *(_QWORD *)DerivedStorage;
  return 0;
}

CFMutableDictionaryRef FigRemotePropertyCacheSetup(const __CFAllocator *a1, dispatch_queue_t *a2, char *label)
{
  const CFDictionaryKeyCallBacks *v5;
  const CFDictionaryValueCallBacks *v6;
  CFMutableDictionaryRef result;

  *a2 = dispatch_queue_create(label, 0);
  v5 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v6 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  a2[1] = (dispatch_queue_t)CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  a2[2] = (dispatch_queue_t)CFDictionaryCreateMutable(a1, 0, v5, v6);
  result = CFDictionaryCreateMutable(a1, 0, v5, v6);
  a2[3] = (dispatch_queue_t)result;
  return result;
}

uint64_t remoteXPCAssetTrack_Finalize()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigXPCRemoteClientDisassociateObject();
  if (!*(_BYTE *)(DerivedStorage + 48) && !*(_BYTE *)(DerivedStorage + 49) && !FigXPCCreateBasicMessage())
    FigXPCRemoteClientSendAsyncMessage();
  FigRemotePropertyCacheTeardown(DerivedStorage + 16);
  FigXPCRelease();
  return FigXPCRemoteClientKillServerOnTimeout();
}

__CFString *remoteXPCAssetTrack_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;
  const char *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(a1);
  if (*(_BYTE *)(DerivedStorage + 48))
    v6 = " SERVER DIED";
  else
    v6 = "";
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigAssetTrackRemote(XPC) %p retainCount: %ld ObjectID %016llx TrackID %d MediaType '%c%c%c%c'%s>"), a1, v5, *(_QWORD *)DerivedStorage, *(unsigned int *)(DerivedStorage + 8), HIBYTE(*(_DWORD *)(DerivedStorage + 12)), BYTE2(*(_DWORD *)(DerivedStorage + 12)), BYTE1(*(_DWORD *)(DerivedStorage + 12)), *(_DWORD *)(DerivedStorage + 12), v6);
  return Mutable;
}

uint64_t remoteXPCAssetTrack_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage;
  NSObject *v8;
  uint64_t v9;
  int v10;
  uint64_t ObjectID;
  CFTypeRef v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  CFTypeRef cf;
  uint64_t v18;
  int v19[2];
  xpc_object_t xdict;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char v24;
  uint64_t block;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  CFTypeRef v31;
  CFTypeRef *p_cf;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v19 = 0;
  xdict = 0;
  cf = 0;
  v18 = 0;
  if (a2 && a4)
  {
    *a4 = 0;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v21 = 0;
    v22 = &v21;
    v23 = 0x2000000000;
    v24 = 0;
    v8 = *(NSObject **)(DerivedStorage + 16);
    v9 = MEMORY[0x1E0C809B0];
    block = MEMORY[0x1E0C809B0];
    v26 = 0x40000000;
    v27 = __remoteXPCAssetTrack_CopyCachedAssetTrackPropertyValue_block_invoke;
    v28 = &unk_1E2FAE030;
    v31 = a2;
    p_cf = &cf;
    v29 = &v21;
    v30 = DerivedStorage;
    dispatch_sync(v8, &block);
    v10 = *((unsigned __int8 *)v22 + 24);
    _Block_object_dispose(&v21, 8);
    if (v10)
    {
LABEL_13:
      v15 = 0;
      *a4 = cf;
      cf = 0;
      goto LABEL_14;
    }
    ObjectID = remoteXPCAssetTrack_GetObjectID(a1, &v18);
    if (!(_DWORD)ObjectID)
    {
      ObjectID = FigXPCCreateBasicMessage();
      if (!(_DWORD)ObjectID)
      {
        ObjectID = FigXPCMessageSetCFString();
        if (!(_DWORD)ObjectID)
        {
          if (pthread_main_np())
            xpc_dictionary_set_BOOL(xdict, "RequestBlockageWarning", 1);
          ObjectID = ASSETTRACK_CLIENT_SYNCHRONOUSLY_COPYING_A_PROPERTY();
          if (!(_DWORD)ObjectID)
          {
            ObjectID = remoteXPCAssetTrack_DeserializeAndCreateAssetTrackPropertyValueFromXPCDictionary(v19[0], a2, &cf);
            if (!(_DWORD)ObjectID)
            {
              ObjectID = FigXPCMessageCopyCFString();
              if (!(_DWORD)ObjectID)
              {
                v12 = cf;
                v13 = CMBaseObjectGetDerivedStorage();
                v14 = *(NSObject **)(v13 + 16);
                block = v9;
                v26 = 0x40000000;
                v27 = __remoteXPCAssetTrack_SetCachedAssetTrackPropertyValue_block_invoke;
                v28 = &__block_descriptor_tmp_15_1;
                v29 = (uint64_t *)v13;
                v30 = (uint64_t)a2;
                v31 = v12;
                dispatch_sync(v14, &block);
                goto LABEL_13;
              }
            }
          }
        }
      }
    }
  }
  else
  {
    ObjectID = FigSignalErrorAt();
  }
  v15 = ObjectID;
LABEL_14:
  FigXPCRelease();
  FigXPCRelease();
  if (cf)
    CFRelease(cf);
  FigXPCRemoteClientKillServerOnTimeout();
  return v15;
}

