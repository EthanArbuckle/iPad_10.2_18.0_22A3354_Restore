uint64_t fvcp_vc_source_CopyConformedImage(uint64_t a1, BOOL *a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  __CVBuffer *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  CFTypeRef v13;
  CFTypeRef v14;
  uint64_t v15;
  CFTypeRef cf;

  cf = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = *(__CVBuffer **)(DerivedStorage + 88);
  v8 = *(_QWORD *)(DerivedStorage + 96);
  v9 = v8 == 0;
  if (!v7)
  {
    v15 = 0;
    *a3 = 0;
    goto LABEL_15;
  }
  v10 = DerivedStorage;
  if (!v8)
  {
    v11 = fvcp_source_convertAndCopyConformedImage(a1, v7, (CVPixelBufferRef *)&cf);
    if ((_DWORD)v11)
    {
      v15 = v11;
      goto LABEL_15;
    }
    v12 = *(const void **)(v10 + 96);
    v13 = cf;
    *(_QWORD *)(v10 + 96) = cf;
    if (v13)
      CFRetain(v13);
    if (v12)
      CFRelease(v12);
  }
  if (a3)
  {
    v14 = *(CFTypeRef *)(v10 + 96);
    if (v14)
      v14 = CFRetain(v14);
    *a3 = v14;
  }
  v15 = 0;
  if (a2)
    *a2 = v9;
LABEL_15:
  if (cf)
    CFRelease(cf);
  return v15;
}

uint64_t fvcp_vc_source_HasNoMoreSamples()
{
  CMBaseObjectGetDerivedStorage();
  return FigAtomicCompareAndSwap32();
}

uint64_t fvcp_vc_source_getEarliestSequentialSampleTimeAfterTime(uint64_t a1, __int128 *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v7;
  void (*v8)(uint64_t, _QWORD, __int128 *, __int128 *, char *);
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;

  v14 = 0;
  v12 = *MEMORY[0x1E0CA2E18];
  v13 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v7 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 216);
  v10 = *a2;
  v11 = *((_QWORD *)a2 + 2);
  v8 = *(void (**)(uint64_t, _QWORD, __int128 *, __int128 *, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 64);
  if (v8)
  {
    v15 = v10;
    v16 = v11;
    v8(v7, 0, &v15, &v12, &v14);
  }
  if (a3)
  {
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  if (a4)
    *a4 = v14;
  return 0;
}

uint64_t fvcp_vc_source_CopyConformedTimedImages(uint64_t a1, int a2, char *a3, CFArrayRef *a4)
{
  uint64_t DerivedStorage;
  const __CFArray *v9;
  CFIndex Count;
  uint64_t v11;
  CFArrayRef v12;
  CFMutableArrayRef Mutable;
  uint64_t i;
  uint64_t ValueAtIndex;
  uint64_t v16;
  const void *v17;
  CFTypeRef v18;
  __CVBuffer *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  void *values;
  CFTypeRef cf;
  CFTypeRef v29;
  char v30;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v30 = 0;
  cf = 0;
  v29 = 0;
  values = 0;
  if (!FigVCPSourceRequiresWindowedSampling(a1, a2))
  {
    v11 = fvcp_vc_source_CopyConformedImage(a1, (BOOL *)&v30, &v29);
    if ((_DWORD)v11
      || (v25 = *(_OWORD *)(DerivedStorage + 304),
          v26 = *(_QWORD *)(DerivedStorage + 320),
          v11 = FigVCPTimedSampleCreateWithPixelBuffer((uint64_t)&v25, v29, (uint64_t *)&values),
          (_DWORD)v11))
    {
      v21 = v11;
      goto LABEL_36;
    }
    v12 = CFArrayCreate(0, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
    if (!a3)
      goto LABEL_31;
    goto LABEL_30;
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 232));
  v9 = *(const __CFArray **)(DerivedStorage + 336);
  if (v9)
    Count = CFArrayGetCount(v9);
  else
    Count = 0;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    v21 = FigSignalErrorAt();
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 328));
    goto LABEL_36;
  }
  v12 = Mutable;
  v30 = *(_BYTE *)(DerivedStorage + 416);
  if (Count >= 1)
  {
    for (i = 0; Count != i; ++i)
    {
      ValueAtIndex = FigCFArrayGetValueAtIndex();
      if (ValueAtIndex)
      {
        v16 = ValueAtIndex;
        v25 = *(_OWORD *)(ValueAtIndex + 16);
        v26 = *(_QWORD *)(ValueAtIndex + 32);
        if (!*(_BYTE *)(ValueAtIndex + 40))
        {
          v30 = 1;
          v19 = *(__CVBuffer **)(ValueAtIndex + 48);
          if (v19)
          {
            v20 = fvcp_source_convertAndCopyConformedImage(a1, v19, (CVPixelBufferRef *)&cf);
            if ((_DWORD)v20)
              goto LABEL_43;
            FigVCPTimedImagePairSetConformed(v16, cf);
            if (cf)
            {
              CFRelease(cf);
              cf = 0;
            }
          }
          else
          {
            FigVCPTimedImagePairSetConformed(ValueAtIndex, 0);
          }
        }
        v17 = *(const void **)(v16 + 56);
        if (v17)
        {
          v18 = CFRetain(v17);
          goto LABEL_23;
        }
      }
      else
      {
        v25 = *MEMORY[0x1E0CA2E18];
        v26 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
        v30 = 1;
        FigVCPTimedImagePairSetConformed(0, 0);
      }
      v18 = 0;
LABEL_23:
      cf = v18;
      v23 = v25;
      v24 = v26;
      v20 = FigVCPTimedSampleCreateWithPixelBuffer((uint64_t)&v23, v18, (uint64_t *)&values);
      if ((_DWORD)v20)
      {
LABEL_43:
        v21 = v20;
        MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 328));
        CFRelease(v12);
        goto LABEL_36;
      }
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      CFArrayAppendValue(v12, values);
      if (values)
      {
        CFRelease(values);
        values = 0;
      }
    }
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 232));
  if (a3)
LABEL_30:
    *a3 = v30;
LABEL_31:
  if (a4)
  {
    v21 = 0;
    *a4 = v12;
  }
  else
  {
    if (v12)
      CFRelease(v12);
    v21 = 0;
  }
LABEL_36:
  if (v29)
    CFRelease(v29);
  if (cf)
    CFRelease(cf);
  if (values)
    CFRelease(values);
  return v21;
}

uint64_t fvcp_timeIsEarlierOrEqualInPlayback(uint64_t a1, uint64_t a2, unsigned int a3)
{
  CMTimeFlags v3;
  CMTimeEpoch v4;
  CMTimeFlags v5;
  CMTimeEpoch v6;
  uint64_t v7;
  CMTimeFlags v8;
  CMTimeEpoch v9;
  CMTimeFlags v10;
  CMTimeEpoch v11;
  CMTime v13;
  CMTime lhs;
  CMTime time;
  CMTime time1;
  CMTimeValue v17;
  CMTimeScale v18;
  CMTimeValue v19;
  CMTimeScale v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (a3 > 1)
  {
    v19 = *(_QWORD *)a1;
    v8 = *(_DWORD *)(a1 + 12);
    v20 = *(_DWORD *)(a1 + 8);
    v9 = *(_QWORD *)(a1 + 16);
    v17 = *(_QWORD *)a2;
    v10 = *(_DWORD *)(a2 + 12);
    v18 = *(_DWORD *)(a2 + 8);
    v11 = *(_QWORD *)(a2 + 16);
    if ((v8 & 0x1F) != 3 && (v10 & 0x1F) != 3)
      goto LABEL_9;
    memset(&time1, 0, sizeof(time1));
    lhs.value = *(_QWORD *)a1;
    lhs.timescale = *(_DWORD *)(a1 + 8);
    lhs.flags = v8;
    lhs.epoch = v9;
    v13.value = *(_QWORD *)a2;
    v13.timescale = *(_DWORD *)(a2 + 8);
    v13.flags = v10;
    v13.epoch = v11;
    CMTimeSubtract(&time, &lhs, &v13);
    CMTimeAbsoluteValue(&time1, &time);
    CMTimeMake(&lhs, 1, 1000000000);
    v13 = time1;
    if (CMTimeCompare(&v13, &lhs) < 1)
    {
      return 1;
    }
    else
    {
LABEL_9:
      time1.value = v19;
      time1.timescale = v20;
      time1.flags = v8;
      time1.epoch = v9;
      v13.value = v17;
      v13.timescale = v18;
      v13.flags = v10;
      v13.epoch = v11;
      return CMTimeCompare(&time1, &v13) >= 0;
    }
  }
  else
  {
    v19 = *(_QWORD *)a1;
    v3 = *(_DWORD *)(a1 + 12);
    v20 = *(_DWORD *)(a1 + 8);
    v4 = *(_QWORD *)(a1 + 16);
    v17 = *(_QWORD *)a2;
    v5 = *(_DWORD *)(a2 + 12);
    v18 = *(_DWORD *)(a2 + 8);
    v6 = *(_QWORD *)(a2 + 16);
    if ((v3 & 0x1F) != 3 && (v5 & 0x1F) != 3)
      goto LABEL_5;
    memset(&time1, 0, sizeof(time1));
    lhs.value = *(_QWORD *)a1;
    lhs.timescale = *(_DWORD *)(a1 + 8);
    lhs.flags = v3;
    lhs.epoch = v4;
    v13.value = *(_QWORD *)a2;
    v13.timescale = *(_DWORD *)(a2 + 8);
    v13.flags = v5;
    v13.epoch = v6;
    CMTimeSubtract(&time, &lhs, &v13);
    CMTimeAbsoluteValue(&time1, &time);
    v7 = 1;
    CMTimeMake(&lhs, 1, 1000000000);
    v13 = time1;
    if (CMTimeCompare(&v13, &lhs) >= 1)
    {
LABEL_5:
      time1.value = v19;
      time1.timescale = v20;
      time1.flags = v3;
      time1.epoch = v4;
      v13.value = v17;
      v13.timescale = v18;
      v13.flags = v5;
      v13.epoch = v6;
      return CMTimeCompare(&time1, &v13) < 1;
    }
  }
  return v7;
}

uint64_t figVCPTimedImagePair_register()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigVCPTimedImagePairClassID = result;
  return result;
}

double figVCPTimedImagePair_Init(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

void figVCPTimedImagePair_Finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 48);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 56);
  if (v3)
    CFRelease(v3);
}

CFStringRef figVCPTimedImagePair_CopyDebugDesc(uint64_t a1)
{
  const __CFAllocator *v2;
  uint64_t v3;
  uint64_t v4;
  double Seconds;
  const char *v6;
  CMTime time;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  time = *(CMTime *)(a1 + 16);
  Seconds = CMTimeGetSeconds(&time);
  if (*(_BYTE *)(a1 + 40))
    v6 = "conformed";
  else
    v6 = "not conformed";
  return CFStringCreateWithFormat(v2, 0, CFSTR("<%p, %p @ %1.3f %s>"), v3, v4, *(_QWORD *)&Seconds, v6);
}

uint64_t fvcp_source_convertAndCopyConformedImage(uint64_t a1, __CVBuffer *a2, CVPixelBufferRef *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  CFTypeRef v8;
  int Width;
  int Height;
  float v11;
  signed int v12;
  signed int v13;
  void *v14;
  const __CFAllocator *v15;
  const void *MutableCopy;
  uint64_t PixelBufferAttributesWithIOSurfaceSupport;
  __CFDictionary *Mutable;
  CFMutableArrayRef v19;
  __CVBuffer *v20;
  signed int v21;
  const __CFDictionary *v22;
  const __CFDictionary *v23;
  int UInt64;
  int v25;
  int v26;
  unsigned int VideoDynamicRange;
  OSType PixelFormatType;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  OpaqueVTPixelTransferSession *v35;
  _QWORD *v36;
  VTPixelTransferSessionRef v37;
  int v38;
  uint64_t v39;
  const void *v40;
  const __CFDictionary *DescriptionWithPixelFormatType;
  uint64_t v42;
  __CVBuffer *v43;
  CVPixelBufferRef *v45;
  OSType pixelFormat;
  int v47;
  VTPixelTransferSessionRef pixelTransferSessionOut;
  CFTypeRef cf;
  CVPixelBufferRef pixelBufferOut;
  char v51;
  uint64_t v52;
  CFTypeRef v53;
  CFTypeRef v54;
  CFTypeRef v55;
  CMVideoFormatDescriptionRef formatDescriptionOut;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  pixelBufferOut = 0;
  pixelTransferSessionOut = 0;
  v47 = 0;
  if (!a3)
  {
    v34 = FigSignalErrorAt();
    goto LABEL_92;
  }
  v7 = DerivedStorage;
  fvcp_source_copyPreprocessParametersAndPixelTransferSession(a1, &cf, &pixelTransferSessionOut, &v47);
  v8 = cf;
  if (!cf)
    goto LABEL_79;
  if (*((float *)cf + 4) == 1.0 && (!*((_QWORD *)cf + 3) || CVPixelBufferIsCompatibleWithAttributes()))
  {
    v25 = *((_DWORD *)v8 + 16);
    if (!v25)
      goto LABEL_79;
    formatDescriptionOut = 0;
    if (CMVideoFormatDescriptionCreateForImageBuffer((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, &formatDescriptionOut))
      goto LABEL_79;
    v26 = FigVideoFormatDescriptionContainsWideColor();
    VideoDynamicRange = CMVideoFormatDescriptionGetVideoDynamicRange();
    if (formatDescriptionOut)
      CFRelease(formatDescriptionOut);
    if (v25 == 2 && VideoDynamicRange < 2)
      goto LABEL_79;
    if (v25 == 1 && !v26)
      goto LABEL_79;
    PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
    v29 = CMBaseObjectGetDerivedStorage();
    v30 = v29;
    if (PixelFormatType == *(_DWORD *)(v29 + 108))
    {
      v31 = *(unsigned __int8 *)(v29 + 112);
    }
    else
    {
      DescriptionWithPixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
      v31 = CFDictionaryGetValue(DescriptionWithPixelFormatType, (const void *)*MEMORY[0x1E0CA9188]) == (const void *)*MEMORY[0x1E0C9AE50];
      *(_DWORD *)(v30 + 108) = PixelFormatType;
      *(_BYTE *)(v30 + 112) = v31;
    }
    v42 = v31 ? *((_QWORD *)v8 + 4) : 0;
    if (fvcp_doesPixelBufferHaveRequestedColorParameters(a2, v42, *((_QWORD *)v8 + 6), *((_QWORD *)v8 + 5)))
    {
LABEL_79:
      if (a2)
        v43 = (__CVBuffer *)CFRetain(a2);
      else
        v43 = 0;
      pixelBufferOut = v43;
      goto LABEL_83;
    }
  }
  pixelFormat = CVPixelBufferGetPixelFormatType(a2);
  Width = CVPixelBufferGetWidth(a2);
  Height = CVPixelBufferGetHeight(a2);
  v11 = *((float *)cf + 4);
  v12 = ((int)(float)((float)((float)Width * v11) + 1.0) + ((int)(float)((float)((float)Width * v11) + 1.0) < 0)) & 0xFFFFFFFE;
  v13 = ((int)(float)((float)((float)Height * v11) + 1.0) + ((int)(float)((float)((float)Height * v11) + 1.0) < 0)) & 0xFFFFFFFE;
  v14 = *(void **)(v7 + 56);
  if (v14)
  {
    if (*(_DWORD *)(v7 + 80) == pixelFormat
      && *(_QWORD *)(v7 + 64) == v12
      && *(_QWORD *)(v7 + 72) == v13
      && *(_DWORD *)(v7 + 116) == v47)
    {
      v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      goto LABEL_57;
    }
    CFRelease(v14);
    *(_QWORD *)(v7 + 56) = 0;
  }
  v55 = 0;
  formatDescriptionOut = 0;
  v54 = 0;
  v53 = 0;
  CMBaseObjectGetDerivedStorage();
  v52 = 0;
  v51 = 0;
  fvcp_source_copyPreprocessParametersAndPixelTransferSession(a1, &formatDescriptionOut, 0, 0);
  v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MutableCopy = (const void *)FigCFDictionaryCreateMutableCopy();
  v45 = a3;
  if (!MutableCopy)
  {
    PixelBufferAttributesWithIOSurfaceSupport = FigSignalErrorAt();
LABEL_94:
    v33 = PixelBufferAttributesWithIOSurfaceSupport;
    v19 = 0;
    Mutable = 0;
    goto LABEL_43;
  }
  FigGetAlignmentForIOSurfaceOutput();
  if (HIDWORD(v52))
    FigCFDictionarySetInt();
  if ((_DWORD)v52)
    FigCFDictionarySetInt();
  PixelBufferAttributesWithIOSurfaceSupport = FigCreatePixelBufferAttributesWithIOSurfaceSupport();
  if ((_DWORD)PixelBufferAttributesWithIOSurfaceSupport)
    goto LABEL_94;
  Mutable = CFDictionaryCreateMutable(v15, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v33 = FigSignalErrorAt();
    v19 = 0;
    goto LABEL_43;
  }
  v19 = CFArrayCreateMutable(v15, 0, MEMORY[0x1E0C9B378]);
  if (!v19)
  {
    v33 = FigSignalErrorAt();
    goto LABEL_43;
  }
  if (FigCFEqual() || FigCFEqual())
  {
    v20 = a2;
    v21 = v12;
    if (pixelFormat == 1380410945)
      goto LABEL_25;
    v22 = CVPixelFormatDescriptionCreateWithPixelFormatType(v15, pixelFormat);
    if (v22)
    {
      v23 = v22;
      if (!CFDictionaryGetValue(v22, (const void *)*MEMORY[0x1E0CA90F0]))
      {
        CFRelease(v23);
        goto LABEL_39;
      }
      UInt64 = FigCFNumberGetUInt64();
      CFRelease(v23);
      if (UInt64 >= 9)
LABEL_25:
        FigCFArrayAppendInt32();
    }
LABEL_39:
    FigCFArrayAppendInt32();
    FigCFArrayAppendInt32();
    v12 = v21;
    a2 = v20;
  }
  FigCFArrayAppendInt32();
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA9040], v19);
  v32 = VTCreatePixelBufferPoolAttributesWithName();
  if ((_DWORD)v32)
  {
    v33 = v32;
  }
  else
  {
    v33 = VTBuildPixelBufferPools2();
    if ((_DWORD)v33)
    {
      if (v53)
        CFRelease(v53);
    }
    else
    {
      *(_QWORD *)(v7 + 56) = v53;
      v53 = 0;
    }
  }
LABEL_43:
  if (v54)
    CFRelease(v54);
  if (Mutable)
    CFRelease(Mutable);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (v55)
    CFRelease(v55);
  if (formatDescriptionOut)
    CFRelease(formatDescriptionOut);
  if (v19)
    CFRelease(v19);
  if (!(_DWORD)v33)
  {
    *(_QWORD *)(v7 + 64) = v12;
    *(_QWORD *)(v7 + 72) = v13;
    *(_DWORD *)(v7 + 80) = pixelFormat;
    *(_DWORD *)(v7 + 116) = v47;
    v14 = *(void **)(v7 + 56);
    a3 = v45;
LABEL_57:
    v34 = CVPixelBufferPoolCreatePixelBuffer(v15, (CVPixelBufferPoolRef)v14, &pixelBufferOut);
    if (!(_DWORD)v34)
    {
      CVBufferPropagateAttachments(a2, pixelBufferOut);
      v35 = pixelTransferSessionOut;
      if (pixelTransferSessionOut)
        goto LABEL_72;
      v34 = VTPixelTransferSessionCreate(v15, &pixelTransferSessionOut);
      if (!(_DWORD)v34)
      {
        v36 = cf;
        if (*((_QWORD *)cf + 5))
        {
          VTPixelTransferSessionSetProperty();
          v36 = cf;
        }
        if (v36[4])
        {
          VTPixelTransferSessionSetProperty();
          v36 = cf;
        }
        if (v36[6])
          VTPixelTransferSessionSetProperty();
        v37 = pixelTransferSessionOut;
        v38 = v47;
        v39 = CMBaseObjectGetDerivedStorage();
        MEMORY[0x19402EEEC](*(_QWORD *)(v39 + 24));
        if (*(_DWORD *)(v39 + 48) == v38)
        {
          v40 = *(const void **)(v39 + 40);
          *(_QWORD *)(v39 + 40) = v37;
          if (v37)
            CFRetain(v37);
          if (v40)
            CFRelease(v40);
        }
        MEMORY[0x19402EF04](*(_QWORD *)(v39 + 24));
        v35 = pixelTransferSessionOut;
LABEL_72:
        v34 = VTPixelTransferSessionTransferImage(v35, a2, pixelBufferOut);
        if (!(_DWORD)v34)
        {
LABEL_83:
          CVPixelBufferPoolFlush(*(CVPixelBufferPoolRef *)(v7 + 56), 0);
          v33 = 0;
          *a3 = pixelBufferOut;
          pixelBufferOut = 0;
          goto LABEL_84;
        }
      }
    }
LABEL_92:
    v33 = v34;
  }
LABEL_84:
  if (pixelTransferSessionOut)
    CFRelease(pixelTransferSessionOut);
  if (cf)
    CFRelease(cf);
  if (pixelBufferOut)
    CFRelease(pixelBufferOut);
  return v33;
}

void fvcp_source_copyPreprocessParametersAndPixelTransferSession(uint64_t a1, _QWORD *a2, _QWORD *a3, _DWORD *a4)
{
  uint64_t DerivedStorage;
  const void *v8;
  CFTypeRef v9;
  const void *v10;
  CFTypeRef v11;
  int v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 24));
  v8 = *(const void **)(DerivedStorage + 32);
  if (v8)
    v9 = CFRetain(v8);
  else
    v9 = 0;
  v10 = *(const void **)(DerivedStorage + 40);
  if (v10)
    v11 = CFRetain(v10);
  else
    v11 = 0;
  v12 = *(_DWORD *)(DerivedStorage + 48);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 24));
  if (a2)
  {
    *a2 = v9;
    v9 = 0;
  }
  if (a3)
  {
    *a3 = v11;
    v11 = 0;
  }
  if (a4)
    *a4 = v12;
  if (v9)
    CFRelease(v9);
  if (v11)
    CFRelease(v11);
}

BOOL fvcp_doesPixelBufferHaveRequestedColorParameters(__CVBuffer *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CGColorSpace *v8;
  CFTypeRef v9;
  CFTypeRef v10;
  CFTypeRef v11;
  _BOOL8 v12;

  v8 = (CGColorSpace *)CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8CD8], 0);
  CGColorSpaceGetName(v8);
  CVPixelBufferGetWidth(a1);
  CVPixelBufferGetHeight(a1);
  VTGetDefaultColorAttributesWithHints();
  if (a2)
  {
    v9 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8EE8], 0);
    if (!v9)
      v9 = 0;
    if (!FigCFEqual())
    {
      v10 = 0;
      goto LABEL_15;
    }
  }
  else
  {
    v9 = 0;
  }
  if (a3)
  {
    v10 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8E98], 0);
    if (!v10)
      v10 = 0;
    if (FigCFEqual())
      goto LABEL_12;
LABEL_15:
    v12 = 0;
    v11 = 0;
    goto LABEL_18;
  }
  v10 = 0;
LABEL_12:
  if (a4)
  {
    v11 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8D68], 0);
    if (!v11)
      v11 = 0;
    v12 = FigCFEqual() != 0;
  }
  else
  {
    v11 = 0;
    v12 = 1;
  }
LABEL_18:
  if (v8)
    CFRelease(v8);
  if (v9)
    CFRelease(v9);
  if (v10)
    CFRelease(v10);
  if (v11)
    CFRelease(v11);
  return v12;
}

void FigVCPTimedImagePairSetConformed(uint64_t a1, CFTypeRef cf)
{
  const void *v3;
  const void *v4;

  if (a1)
  {
    v3 = *(const void **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = cf;
    if (cf)
      CFRetain(cf);
    if (v3)
      CFRelease(v3);
    *(_BYTE *)(a1 + 40) = 1;
    v4 = *(const void **)(a1 + 48);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(a1 + 48) = 0;
    }
  }
}

uint64_t fvcp_ca_source_Invalidate()
{
  return 0;
}

void fvcp_ca_source_Finalize(uint64_t a1)
{
  _QWORD *DerivedStorage;
  const void *v3;
  const void *v4;
  const void *v5;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  FigVCPSourceInvalidate(a1);
  v3 = (const void *)DerivedStorage[32];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)DerivedStorage[33];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)DerivedStorage[34];
  if (v5)
    CFRelease(v5);
  fvcp_source_finalize();
}

CFStringRef fvcp_ca_source_CopyDebugDesc(uint64_t a1)
{
  const __CFAllocator *v2;
  unsigned int *DerivedStorage;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  DerivedStorage = (unsigned int *)CMBaseObjectGetDerivedStorage();
  return CFStringCreateWithFormat(v2, 0, CFSTR("[FigVCPCoreAnimationSource(%p)] trackID=%d"), a1, *DerivedStorage);
}

uint64_t fvcp_ca_source_StartOver()
{
  CMBaseObjectGetDerivedStorage();
  FigAtomicCompareAndSwap32();
  return 0;
}

uint64_t fvcp_ca_source_GetVisualContext()
{
  return 0;
}

uint64_t fvcp_ca_source_CheckImageAvailability(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5, _BYTE *a6)
{
  if ((*(_DWORD *)(a4 + 12) & 0x1D) != 1)
    return FigSignalErrorAt();
  if (a5)
    *a5 = 1;
  if (a6)
    *a6 = 1;
  return 0;
}

uint64_t fvcp_ca_source_SetCurrentTime(const void *a1, uint64_t a2, __int128 *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  CMTimeValue value;
  const __CFAllocator *v9;
  __CFDictionary *MutableCopy;
  __CFDictionary *Mutable;
  __CFDictionary *v12;
  const void *v13;
  char v14;
  int v15;
  const void *v16;
  const void **v17;
  CGColorSpaceRef v18;
  const __CFDictionary *v19;
  const __CFAllocator *v20;
  uint64_t v21;
  CFTypeRef v22;
  uint64_t UpTimeNanoseconds;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  const void *v29;
  CFTypeRef v30;
  const void *v31;
  uint64_t v33;
  CMTime v34;
  CFTypeRef v35;
  CMTime v36;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v35 = 0;
  if ((*((_DWORD *)a3 + 3) & 0x1D) != 1)
  {
    v21 = FigSignalErrorAt();
    goto LABEL_40;
  }
  *(_OWORD *)&v34.value = *a3;
  v34.epoch = *((_QWORD *)a3 + 2);
  v6 = CMBaseObjectGetDerivedStorage();
  if (!FigAtomicCompareAndSwapPtr())
    goto LABEL_33;
  v36.value = 0;
  cf = 0;
  v7 = CMBaseObjectGetDerivedStorage();
  fvcp_source_copyPreprocessParametersAndPixelTransferSession((uint64_t)a1, &v36, 0, 0);
  v33 = v7;
  value = v36.value;
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  Mutable = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v12 = Mutable;
  v13 = *(const void **)(value + 32);
  if (v13)
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA8EE8], v13);
  if (*(_QWORD *)(value + 48))
    CFDictionarySetValue(v12, (const void *)*MEMORY[0x1E0CA8E98], *(const void **)(value + 48));
  if (FigCFEqual() || FigCFEqual())
  {
    v14 = 0;
    v15 = 1;
  }
  else
  {
    v15 = 0;
    v14 = 1;
  }
  v16 = *(const void **)(value + 40);
  v17 = (const void **)MEMORY[0x1E0CA8D68];
  if (v16)
    CFDictionarySetValue(v12, (const void *)*MEMORY[0x1E0CA8D68], v16);
  if ((v14 & 1) == 0)
  {
    CFDictionarySetValue(v12, (const void *)*MEMORY[0x1E0CA8EE8], (const void *)*MEMORY[0x1E0CA8F18]);
    CFDictionarySetValue(v12, (const void *)*MEMORY[0x1E0CA8E98], (const void *)*MEMORY[0x1E0CA8EB0]);
    CFDictionarySetValue(v12, *v17, (const void *)*MEMORY[0x1E0CA8D88]);
    v18 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D9D0]);
    CFDictionarySetValue(v12, (const void *)*MEMORY[0x1E0CA8CD8], v18);
    if (v18)
      CFRelease(v18);
  }
  if (((CFDictionaryGetCount(v12) != 3) & ~v15) == 0)
    CFDictionarySetValue(MutableCopy, CFSTR("DestinationColorAttachments"), v12);
  if (v12)
    CFRelease(v12);
  CMBaseObjectGetDerivedStorage();
  v19 = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (v19)
  {
    FigCFDictionarySetInt();
    FigCFDictionarySetInt();
    FigCFDictionarySetInt();
  }
  v20 = CFGetAllocator(a1);
  v21 = FigCoreAnimationRendererCreate(v20, v19, *(_QWORD *)(v33 + 256), 0, MutableCopy, (uint64_t *)&cf);
  v22 = cf;
  if ((_DWORD)v21)
  {
    if (cf)
    {
      CFRelease(cf);
      v22 = 0;
    }
  }
  else
  {
    cf = 0;
  }
  if (v19)
    CFRelease(v19);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (v36.value)
    CFRelease((CFTypeRef)v36.value);
  if ((_DWORD)v21)
  {
LABEL_52:
    if (v22)
      CFRelease(v22);
    goto LABEL_38;
  }
  if (!FigAtomicCompareAndSwapPtr())
  {
    v21 = FigSignalErrorAt();
    goto LABEL_52;
  }
LABEL_33:
  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  v24 = *(_QWORD *)(v6 + 272);
  v36 = v34;
  v21 = FigCoreAnimationRendererCopyPixelBufferAtTime(v24, &v36, 0, (CVPixelBufferRef *)&v35, 0);
  v25 = FigGetUpTimeNanoseconds();
  v26 = (v25 - UpTimeNanoseconds) / 1000;
  ++*(_DWORD *)(v6 + 304);
  *(_QWORD *)(v6 + 296) += v26;
  v27 = *(_QWORD *)(v6 + 288);
  if (v27 >= v26)
    v27 = (v25 - UpTimeNanoseconds) / 1000;
  if (*(_QWORD *)(v6 + 280) > v26)
    v26 = *(_QWORD *)(v6 + 280);
  *(_QWORD *)(v6 + 280) = v26;
  *(_QWORD *)(v6 + 288) = v27;
LABEL_38:
  if (!(_DWORD)v21)
  {
    v28 = *a3;
    *(_QWORD *)(DerivedStorage + 232) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(DerivedStorage + 216) = v28;
  }
LABEL_40:
  v29 = *(const void **)(DerivedStorage + 88);
  v30 = v35;
  *(_QWORD *)(DerivedStorage + 88) = v35;
  if (v30)
    CFRetain(v30);
  if (v29)
    CFRelease(v29);
  v31 = *(const void **)(DerivedStorage + 96);
  if (v31)
  {
    CFRelease(v31);
    *(_QWORD *)(DerivedStorage + 96) = 0;
  }
  if (v35)
    CFRelease(v35);
  return v21;
}

uint64_t fvcp_ca_source_CopyConformedImage(uint64_t a1, _BYTE *a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  CVPixelBufferRef *v8;
  uint64_t v9;
  const void *v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = CMBaseObjectGetDerivedStorage();
  v8 = (CVPixelBufferRef *)(DerivedStorage + 96);
  v9 = fvcp_source_convertAndCopyConformedImage(a1, *(__CVBuffer **)(v7 + 88), v8);
  if (!(_DWORD)v9)
  {
    if (a2)
      *a2 = 1;
    if (a3)
    {
      v10 = *v8;
      if (*v8)
        v10 = CFRetain(v10);
      *a3 = v10;
    }
  }
  return v9;
}

uint64_t fvcp_ca_source_HasNoMoreImages()
{
  return 1;
}

uint64_t fvcp_ca_source_throttleForBackground()
{
  uint64_t *v0;
  uint64_t result;

  v0 = (uint64_t *)(CMBaseObjectGetDerivedStorage() + 272);
  result = FigAtomicCompareAndSwapPtr();
  if (!(_DWORD)result)
    return FigCoreAnimationRendererSetProperty(*v0);
  return result;
}

uint64_t fvcp_ca_source_copyPerformanceDictionary(uint64_t a1, CFMutableDictionaryRef *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(_QWORD *)(DerivedStorage + 272);
  FigMemoryBarrier();
  *a2 = fvcp_createCoreAnimationPerformanceDictionary(DerivedStorage + 280, v4);
  return 0;
}

uint64_t fvcp_bq_source_Invalidate()
{
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  return 0;
}

void fvcp_bq_source_Finalize(uint64_t a1)
{
  _QWORD *DerivedStorage;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  FigVCPSourceInvalidate(a1);
  v3 = (const void *)DerivedStorage[27];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)DerivedStorage[45];
  if (v4)
    CFRelease(v4);
  FigSimpleMutexDestroy();
  v5 = (const void *)DerivedStorage[30];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[30] = 0;
  }
  v6 = (const void *)DerivedStorage[32];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[32] = 0;
  }
  FigSimpleMutexDestroy();
  fvcp_source_finalize();
}

CFStringRef fvcp_bq_source_CopyDebugDesc(uint64_t a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  unsigned int *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v4 = (unsigned int *)CMBaseObjectGetDerivedStorage();
  return CFStringCreateWithFormat(v3, 0, CFSTR("[FigVCPBufferQueueSource(%p)] trackID=%d BQ=%p"), a1, *v4, *(_QWORD *)(DerivedStorage + 216));
}

uint64_t fvcp_bq_source_StartOver()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigAtomicCompareAndSwap32();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 232));
  v1 = *(const void **)(DerivedStorage + 240);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 240) = 0;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 232));
  *(_BYTE *)(DerivedStorage + 264) = 0;
  CMBaseObjectGetDerivedStorage();
  FigAtomicCompareAndSwap32();
  return 0;
}

uint64_t fvcp_bq_source_CheckSampleAvailability(uint64_t a1, unsigned int a2, int a3, uint64_t a4, BOOL *a5, _BYTE *a6)
{
  int v11;
  uint64_t v12;
  CMTimeFlags v13;
  CMTimeEpoch v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  CMTime *v20;
  CMTimeFlags v21;
  CMTimeEpoch v22;
  uint64_t v23;
  opaqueCMBufferQueue *v24;
  CMTimeEpoch v25;
  const void *v26;
  int v27;
  CMTimeFlags v28;
  CMTimeEpoch v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  const __CFArray *v33;
  CFIndex Count;
  const __CFString *v35;
  uint64_t v36;
  CMTimeEpoch v37;
  opaqueCMSampleBuffer *ValueAtIndex;
  CMTimeFlags v39;
  CMTimeEpoch v40;
  CMTimeFlags v41;
  CMTimeEpoch v42;
  opaqueCMSampleBuffer *v43;
  CMTimeFlags v44;
  CMTimeEpoch v45;
  opaqueCMSampleBuffer *v46;
  CMTimeFlags v47;
  int v48;
  opaqueCMSampleBuffer *v49;
  opaqueCMSampleBuffer *v50;
  int v51;
  CMTimeValue *v52;
  BOOL v53;
  opaqueCMSampleBuffer *v54;
  CMTimeFlags v55;
  CMTimeEpoch v56;
  int v57;
  opaqueCMSampleBuffer *Head;
  opaqueCMSampleBuffer *v59;
  uint64_t v60;
  CMTimeFlags v61;
  CMTimeEpoch v62;
  CMTimeFlags v63;
  CMTimeEpoch v64;
  const __CFArray *v65;
  CFIndex v66;
  CFIndex v67;
  const void *v68;
  const void *v69;
  BOOL v70;
  int v71;
  CMBufferRef v72;
  __CFArray *v73;
  CMTimeFlags v74;
  CMTimeEpoch v75;
  CMTimeFlags v76;
  CMTimeEpoch v77;
  CMTimeFlags v78;
  CMTimeEpoch v79;
  uint64_t v80;
  CMBufferRef v81;
  CFIndex v82;
  const __CFArray *v84;
  opaqueCMSampleBuffer *v85;
  CMTimeFlags v86;
  CMTimeEpoch v87;
  opaqueCMSampleBuffer *v88;
  CMTimeFlags v89;
  CMTimeEpoch v90;
  opaqueCMSampleBuffer *v91;
  CMTimeFlags v92;
  CMTimeEpoch v93;
  CMTimeFlags v94;
  CMTimeEpoch v95;
  CMBufferRef v96;
  CMTimeEpoch v97;
  CMTimeFlags v98;
  const __CFString *v99;
  uint64_t v101;
  CMTimeEpoch v102;
  CMTimeFlags v103;
  CMTimeEpoch v104;
  CMTimeFlags v105;
  const __CFString *key;
  _BYTE *v107;
  _BYTE *v108;
  BOOL *v109;
  uint64_t DerivedStorage;
  CFTypeRef v111;
  int v112;
  CMTimeEpoch v113;
  opaqueCMBufferQueue *queue;
  CMTimeEpoch v115;
  __int128 time1;
  _OWORD time1_16[2];
  __int128 v118;
  _OWORD v119[2];
  CMTime v120;
  CMTime v121;
  CMTime v122;
  CMTime v123;
  CMTime time2;
  CMTime v125;
  CMTime rhs;
  CMTime lhs;
  CMTimeValue v128;
  CMTimeScale v129;
  CMTimeValue v130;
  CMTimeScale v131;
  CMTimeValue v132;
  CMTimeScale v133;
  CMTimeValue v134;
  CMTimeScale v135;
  CMTimeValue v136;
  CMTimeScale v137;
  CMTime v138;
  CMTime v139;
  CMTimeValue v140;
  CMTimeScale v141;
  CMTimeValue v142;
  CMTimeScale v143;
  CMTimeValue v144;
  CMTimeScale v145;
  CMTimeValue v146;
  CMTimeScale v147;
  uint64_t v148;

  v148 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 296));
  v11 = FigVCPSourceRequiresWindowedSampling(a1, a2);
  v12 = MEMORY[0x1E0CA2E18];
  v109 = a5;
  if (v11)
  {
    v128 = *(_QWORD *)a4;
    v13 = *(_DWORD *)(a4 + 12);
    v129 = *(_DWORD *)(a4 + 8);
    v14 = *(_QWORD *)(a4 + 16);
    v15 = CMBaseObjectGetDerivedStorage();
    v16 = v15;
    queue = *(opaqueCMBufferQueue **)(v15 + 216);
    v142 = *(_QWORD *)v12;
    v143 = *(_DWORD *)(v12 + 8);
    v140 = v142;
    v141 = v143;
    v17 = *(_OWORD *)(v15 + 168);
    time1_16[1] = *(_OWORD *)(v15 + 152);
    v118 = v17;
    v18 = *(_OWORD *)(v15 + 200);
    v119[0] = *(_OWORD *)(v15 + 184);
    v119[1] = v18;
    v19 = *(_OWORD *)(v15 + 136);
    time1 = *(_OWORD *)(v15 + 120);
    time1_16[0] = v19;
    if (a2)
    {
      v139 = *(CMTime *)(v15 + 120);
      v20 = (CMTime *)((char *)time1_16 + 8);
    }
    else
    {
      *(_OWORD *)&v139.value = v118;
      v139.epoch = *(_QWORD *)&v119[0];
      v20 = (CMTime *)((char *)v119 + 8);
    }
    v138 = *v20;
    lhs.value = v128;
    lhs.timescale = v129;
    lhs.flags = v13;
    lhs.epoch = v14;
    rhs = v139;
    CMTimeSubtract((CMTime *)&time1, &lhs, &rhs);
    v134 = time1;
    v28 = HIDWORD(time1);
    v135 = DWORD2(time1);
    v115 = *(_QWORD *)&time1_16[0];
    lhs.value = v128;
    lhs.timescale = v129;
    v98 = v13;
    lhs.flags = v13;
    lhs.epoch = v14;
    rhs = v138;
    CMTimeAdd((CMTime *)&time1, &lhs, &rhs);
    v136 = time1;
    v29 = HIDWORD(time1);
    v137 = DWORD2(time1);
    v113 = *(_QWORD *)&time1_16[0];
    MEMORY[0x19402EEEC](*(_QWORD *)(v16 + 232));
    v30 = CMBaseObjectGetDerivedStorage();
    v31 = *(_DWORD *)(v30 + 248);
    if (v31)
    {
      if (v31 == -1)
      {
        if (a2 == -1)
          goto LABEL_18;
        goto LABEL_17;
      }
      if (a2 != 1 || v31 != 1)
LABEL_17:
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v30 + 256));
    }
LABEL_18:
    v101 = v16;
    v97 = v14;
    v107 = a6;
    v132 = v134;
    v133 = v135;
    v130 = v136;
    v131 = v137;
    v32 = CMBaseObjectGetDerivedStorage();
    v33 = *(const __CFArray **)(v32 + 256);
    if (v33)
    {
      Count = CFArrayGetCount(v33);
      if (Count >= 1)
      {
        v35 = (const __CFString *)*MEMORY[0x1E0CA26E8];
        v36 = Count + 1;
        while (1)
        {
          v37 = v29;
          ValueAtIndex = (opaqueCMSampleBuffer *)FigCFArrayGetValueAtIndex();
          if (CMGetAttachment(ValueAtIndex, v35, 0))
          {
            CMSampleBufferGetOutputPresentationTimeStamp((CMTime *)&time1, ValueAtIndex);
            v144 = time1;
            v39 = HIDWORD(time1);
            v145 = DWORD2(time1);
            v40 = *(_QWORD *)&time1_16[0];
            CMSampleBufferGetOutputDuration(&v123, ValueAtIndex);
            lhs.value = v144;
            lhs.timescale = v145;
            lhs.flags = v39;
            lhs.epoch = v40;
            CMTimeSubtract((CMTime *)&time1, &lhs, &v123);
            v146 = time1;
            v147 = DWORD2(time1);
          }
          else
          {
            CMSampleBufferGetOutputPresentationTimeStamp((CMTime *)&time1, ValueAtIndex);
            v146 = time1;
            v41 = HIDWORD(time1);
            v147 = DWORD2(time1);
            v42 = *(_QWORD *)&time1_16[0];
            CMSampleBufferGetOutputDuration(&v122, ValueAtIndex);
            lhs.value = v146;
            lhs.timescale = v147;
            lhs.flags = v41;
            lhs.epoch = v42;
            CMTimeAdd((CMTime *)&time1, &lhs, &v122);
            v144 = time1;
            v39 = HIDWORD(time1);
            v145 = DWORD2(time1);
            v40 = *(_QWORD *)&time1_16[0];
          }
          if ((v39 & 0x1F) != 3 && (v28 & 0x1F) != 3)
            goto LABEL_27;
          time1 = 0uLL;
          *(_QWORD *)&time1_16[0] = 0;
          rhs.value = v144;
          rhs.timescale = v145;
          rhs.flags = v39;
          rhs.epoch = v40;
          v125.value = v132;
          v125.timescale = v133;
          v125.flags = v28;
          v125.epoch = v115;
          CMTimeSubtract(&lhs, &rhs, &v125);
          CMTimeAbsoluteValue((CMTime *)&time1, &lhs);
          CMTimeMake(&time2, 1, 1000000000);
          *(_OWORD *)&rhs.value = time1;
          rhs.epoch = *(_QWORD *)&time1_16[0];
          if (CMTimeCompare(&rhs, &time2) > 0)
          {
LABEL_27:
            *(_QWORD *)&time1 = v144;
            *((_QWORD *)&time1 + 1) = __PAIR64__(v39, v145);
            *(_QWORD *)&time1_16[0] = v40;
            rhs.value = v132;
            rhs.timescale = v133;
            rhs.flags = v28;
            rhs.epoch = v115;
            if (CMTimeCompare((CMTime *)&time1, &rhs) > 0)
              break;
          }
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v32 + 256), 0);
          --v36;
          v29 = v37;
          if (v36 <= 1)
            goto LABEL_90;
        }
        while (1)
        {
          v43 = (opaqueCMSampleBuffer *)FigCFArrayGetValueAtIndex();
          if (CMGetAttachment(v43, v35, 0))
          {
            CMSampleBufferGetOutputPresentationTimeStamp((CMTime *)&time1, v43);
            v144 = time1;
            v44 = HIDWORD(time1);
            v145 = DWORD2(time1);
            v29 = *(_QWORD *)&time1_16[0];
            CMSampleBufferGetOutputDuration(&v121, v43);
            lhs.value = v144;
            lhs.timescale = v145;
            lhs.flags = v44;
            lhs.epoch = v29;
            CMTimeSubtract((CMTime *)&time1, &lhs, &v121);
            v146 = time1;
            LODWORD(v29) = HIDWORD(time1);
            v147 = DWORD2(time1);
            v45 = *(_QWORD *)&time1_16[0];
          }
          else
          {
            CMSampleBufferGetOutputPresentationTimeStamp((CMTime *)&time1, v43);
            v146 = time1;
            LODWORD(v29) = HIDWORD(time1);
            v147 = DWORD2(time1);
            v45 = *(_QWORD *)&time1_16[0];
            CMSampleBufferGetOutputDuration(&v120, v43);
            lhs.value = v146;
            lhs.timescale = v147;
            lhs.flags = v29;
            lhs.epoch = v45;
            CMTimeAdd((CMTime *)&time1, &lhs, &v120);
            v144 = time1;
            v145 = DWORD2(time1);
          }
          if ((v29 & 0x1F) == 3 || (v37 & 0x1F) == 3)
          {
            time1 = 0uLL;
            *(_QWORD *)&time1_16[0] = 0;
            rhs.value = v146;
            rhs.timescale = v147;
            rhs.flags = v29;
            rhs.epoch = v45;
            v125.value = v130;
            v125.timescale = v131;
            v125.flags = v37;
            v125.epoch = v113;
            CMTimeSubtract(&lhs, &rhs, &v125);
            CMTimeAbsoluteValue((CMTime *)&time1, &lhs);
            CMTimeMake(&time2, 1, 1000000000);
            *(_OWORD *)&rhs.value = time1;
            rhs.epoch = *(_QWORD *)&time1_16[0];
            if (CMTimeCompare(&rhs, &time2) <= 0)
              break;
          }
          *(_QWORD *)&time1 = v146;
          *((_QWORD *)&time1 + 1) = __PAIR64__(v29, v147);
          *(_QWORD *)&time1_16[0] = v45;
          rhs.value = v130;
          rhs.timescale = v131;
          LODWORD(v29) = v37;
          rhs.flags = v37;
          rhs.epoch = v113;
          if (CMTimeCompare((CMTime *)&time1, &rhs) >= 1)
          {
            CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v32 + 256), v36 - 2);
            if ((unint64_t)--v36 > 1)
              continue;
          }
          goto LABEL_90;
        }
        LODWORD(v29) = v37;
      }
    }
LABEL_90:
    Head = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(queue);
    if (Head)
    {
      v59 = Head;
      v60 = MEMORY[0x1E0CA2E28];
      v105 = *(_DWORD *)(MEMORY[0x1E0CA2E28] + 12);
      v104 = *(_QWORD *)(MEMORY[0x1E0CA2E28] + 16);
      v103 = *(_DWORD *)(MEMORY[0x1E0CA2E30] + 12);
      v102 = *(_QWORD *)(MEMORY[0x1E0CA2E30] + 16);
      key = (const __CFString *)*MEMORY[0x1E0CA2678];
      v111 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
      v99 = (const __CFString *)*MEMORY[0x1E0CA26C0];
      v112 = v28 & 0x1F;
      do
      {
        if (!CMSampleBufferDataIsReady(v59))
          break;
        if (a2 > 1)
        {
          CMSampleBufferGetOutputPresentationTimeStamp((CMTime *)&time1, v59);
          v140 = time1;
          v63 = HIDWORD(time1);
          v141 = DWORD2(time1);
          v64 = *(_QWORD *)&time1_16[0];
          CMSampleBufferGetOutputDuration(&v122, v59);
          lhs.value = v140;
          lhs.timescale = v141;
          lhs.flags = v63;
          lhs.epoch = v64;
          CMTimeSubtract((CMTime *)&time1, &lhs, &v122);
          v142 = time1;
          v61 = HIDWORD(time1);
          v143 = DWORD2(time1);
          v62 = *(_QWORD *)&time1_16[0];
          if (fvcp_isNonPermanentEmptyMediaMarker(v59))
          {
            v142 = *(_QWORD *)v60;
            v143 = *(_DWORD *)(v60 + 8);
            v62 = v104;
            v61 = v105;
            goto LABEL_101;
          }
        }
        else
        {
          CMSampleBufferGetOutputPresentationTimeStamp((CMTime *)&time1, v59);
          v142 = time1;
          v61 = HIDWORD(time1);
          v143 = DWORD2(time1);
          v62 = *(_QWORD *)&time1_16[0];
          CMSampleBufferGetOutputDuration(&v123, v59);
          lhs.value = v142;
          lhs.timescale = v143;
          lhs.flags = v61;
          lhs.epoch = v62;
          CMTimeAdd((CMTime *)&time1, &lhs, &v123);
          v140 = time1;
          v63 = HIDWORD(time1);
          v141 = DWORD2(time1);
          v64 = *(_QWORD *)&time1_16[0];
          if (fvcp_isNonPermanentEmptyMediaMarker(v59))
          {
            v140 = *MEMORY[0x1E0CA2E30];
            v141 = *(_DWORD *)(MEMORY[0x1E0CA2E30] + 8);
            v64 = v102;
            v63 = v103;
            goto LABEL_101;
          }
        }
        if (CMGetAttachment(v59, key, 0) == v111 && CMGetAttachment(v59, v99, 0) == v111)
        {
          *(_DWORD *)(v101 + 228) = 1;
          v81 = CMBufferQueueDequeueAndRetain(queue);
          if (v81)
            CFRelease(v81);
          break;
        }
        if (!CMSampleBufferGetNumSamples(v59))
          goto LABEL_139;
LABEL_101:
        v65 = *(const __CFArray **)(v101 + 256);
        if (!v65)
          goto LABEL_113;
        v66 = CFArrayGetCount(v65);
        v67 = v66 - 1;
        if (v66 < 1)
          goto LABEL_113;
        if (a2 > 1)
        {
          v69 = (const void *)FigCFArrayGetValueAtIndex();
          if (!v69)
            goto LABEL_113;
          if (!fvcp_isNonPermanentEmptyMediaMarker(v69))
            goto LABEL_113;
          *(_QWORD *)&time1 = v140;
          *((_QWORD *)&time1 + 1) = __PAIR64__(v63, v141);
          *(_QWORD *)&time1_16[0] = v64;
          lhs.value = v136;
          lhs.timescale = v137;
          lhs.flags = v29;
          lhs.epoch = v113;
          if (CMTimeCompare((CMTime *)&time1, &lhs) < 1)
            goto LABEL_113;
          v67 = 0;
        }
        else
        {
          v68 = (const void *)FigCFArrayGetValueAtIndex();
          if (!v68)
            goto LABEL_113;
          if (!fvcp_isNonPermanentEmptyMediaMarker(v68))
            goto LABEL_113;
          *(_QWORD *)&time1 = v142;
          *((_QWORD *)&time1 + 1) = __PAIR64__(v61, v143);
          *(_QWORD *)&time1_16[0] = v62;
          lhs.value = v134;
          lhs.timescale = v135;
          lhs.flags = v28;
          lhs.epoch = v115;
          if (CMTimeCompare((CMTime *)&time1, &lhs) >= 1)
            goto LABEL_113;
        }
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v101 + 256), v67);
LABEL_113:
        v70 = (v61 & 0x1F) == 3 || (v29 & 0x1F) == 3;
        v71 = v70;
        if (v70)
        {
          time1 = 0uLL;
          *(_QWORD *)&time1_16[0] = 0;
          rhs.value = v142;
          rhs.timescale = v143;
          rhs.flags = v61;
          rhs.epoch = v62;
          v125.value = v136;
          v125.timescale = v137;
          v125.flags = v29;
          v125.epoch = v113;
          CMTimeSubtract(&lhs, &rhs, &v125);
          CMTimeAbsoluteValue((CMTime *)&time1, &lhs);
          CMTimeMake(&time2, 1, 1000000000);
          *(_OWORD *)&rhs.value = time1;
          rhs.epoch = *(_QWORD *)&time1_16[0];
          if (CMTimeCompare(&rhs, &time2) <= 0)
            goto LABEL_220;
        }
        *(_QWORD *)&time1 = v142;
        *((_QWORD *)&time1 + 1) = __PAIR64__(v61, v143);
        *(_QWORD *)&time1_16[0] = v62;
        rhs.value = v136;
        rhs.timescale = v137;
        rhs.flags = v29;
        rhs.epoch = v113;
        if (CMTimeCompare((CMTime *)&time1, &rhs) <= 0)
        {
LABEL_220:
          if ((v63 & 0x1F) != 3 && v112 != 3)
            goto LABEL_221;
          time1 = 0uLL;
          *(_QWORD *)&time1_16[0] = 0;
          rhs.value = v140;
          rhs.timescale = v141;
          rhs.flags = v63;
          rhs.epoch = v64;
          v125.value = v134;
          v125.timescale = v135;
          v125.flags = v28;
          v125.epoch = v115;
          CMTimeSubtract(&lhs, &rhs, &v125);
          CMTimeAbsoluteValue((CMTime *)&time1, &lhs);
          CMTimeMake(&time2, 1, 1000000000);
          *(_OWORD *)&rhs.value = time1;
          rhs.epoch = *(_QWORD *)&time1_16[0];
          if (CMTimeCompare(&rhs, &time2) > 0)
          {
LABEL_221:
            *(_QWORD *)&time1 = v140;
            *((_QWORD *)&time1 + 1) = __PAIR64__(v63, v141);
            *(_QWORD *)&time1_16[0] = v64;
            rhs.value = v134;
            rhs.timescale = v135;
            rhs.flags = v28;
            rhs.epoch = v115;
            if (CMTimeCompare((CMTime *)&time1, &rhs) >= 1)
            {
              v72 = CMBufferQueueDequeueAndRetain(queue);
              v73 = *(__CFArray **)(v101 + 256);
              if (a2 > 1)
                CFArrayInsertValueAtIndex(v73, 0, v72);
              else
                CFArrayAppendValue(v73, v72);
              if (!v72)
                goto LABEL_141;
LABEL_140:
              CFRelease(v72);
              goto LABEL_141;
            }
          }
        }
        if (a2 > 1)
        {
          if (a2 != -1)
            break;
          if (v71)
          {
            time1 = 0uLL;
            *(_QWORD *)&time1_16[0] = 0;
            rhs.value = v142;
            rhs.timescale = v143;
            rhs.flags = v61;
            rhs.epoch = v62;
            v125.value = v136;
            v125.timescale = v137;
            v125.flags = v29;
            v125.epoch = v113;
            CMTimeSubtract(&lhs, &rhs, &v125);
            CMTimeAbsoluteValue((CMTime *)&time1, &lhs);
            CMTimeMake(&time2, 1, 1000000000);
            *(_OWORD *)&rhs.value = time1;
            rhs.epoch = *(_QWORD *)&time1_16[0];
            if (CMTimeCompare(&rhs, &time2) <= 0)
              break;
          }
          *(_QWORD *)&time1 = v142;
          *((_QWORD *)&time1 + 1) = __PAIR64__(v61, v143);
          *(_QWORD *)&time1_16[0] = v62;
          rhs.value = v136;
          rhs.timescale = v137;
          rhs.flags = v29;
          rhs.epoch = v113;
          if (CMTimeCompare((CMTime *)&time1, &rhs) < 1)
            break;
        }
        else
        {
          if ((v63 & 0x1F) == 3 || v112 == 3)
          {
            time1 = 0uLL;
            *(_QWORD *)&time1_16[0] = 0;
            rhs.value = v140;
            rhs.timescale = v141;
            rhs.flags = v63;
            rhs.epoch = v64;
            v125.value = v134;
            v125.timescale = v135;
            v125.flags = v28;
            v125.epoch = v115;
            CMTimeSubtract(&lhs, &rhs, &v125);
            CMTimeAbsoluteValue((CMTime *)&time1, &lhs);
            CMTimeMake(&time2, 1, 1000000000);
            *(_OWORD *)&rhs.value = time1;
            rhs.epoch = *(_QWORD *)&time1_16[0];
            if (CMTimeCompare(&rhs, &time2) <= 0)
              break;
          }
          *(_QWORD *)&time1 = v140;
          *((_QWORD *)&time1 + 1) = __PAIR64__(v63, v141);
          *(_QWORD *)&time1_16[0] = v64;
          rhs.value = v134;
          rhs.timescale = v135;
          rhs.flags = v28;
          rhs.epoch = v115;
          if ((CMTimeCompare((CMTime *)&time1, &rhs) & 0x80000000) == 0)
            break;
        }
LABEL_139:
        v72 = CMBufferQueueDequeueAndRetain(queue);
        if (v72)
          goto LABEL_140;
LABEL_141:
        v59 = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(queue);
      }
      while (v59);
    }
    v82 = CFArrayGetCount(*(CFArrayRef *)(v101 + 256));
    if (v82 >= 1)
      *(_DWORD *)(v101 + 224) = 1;
    *(_DWORD *)(v101 + 248) = a2;
    a6 = v107;
    a5 = v109;
    if (CMBufferQueueIsAtEndOfData(queue))
      *(_DWORD *)(v101 + 228) = 1;
    if (FigAtomicCompareAndSwap32())
      goto LABEL_177;
    v53 = 1;
    if (FigAtomicCompareAndSwap32())
    {
      LODWORD(v54) = 1;
      goto LABEL_180;
    }
    if (v82 >= 1)
    {
      v84 = *(const __CFArray **)(v101 + 256);
      if (a2 <= 1)
      {
        v85 = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(v84, v82 - 1);
        CMSampleBufferGetOutputPresentationTimeStamp(&time2, v85);
        CMSampleBufferGetOutputDuration(&v121, v85);
        CMTimeAdd((CMTime *)&time1, &time2, &v121);
        v140 = time1;
        v86 = HIDWORD(time1);
        v141 = DWORD2(time1);
        v87 = *(_QWORD *)&time1_16[0];
        v80 = DerivedStorage;
        if ((BYTE12(time1) & 0x1F) != 3 && (v29 & 0x1F) != 3)
          goto LABEL_193;
        time1 = 0uLL;
        *(_QWORD *)&time1_16[0] = 0;
        rhs.value = v140;
        rhs.timescale = v141;
        rhs.flags = v86;
        rhs.epoch = v87;
        v125.value = v136;
        v125.timescale = v137;
        v125.flags = v29;
        v125.epoch = v113;
        CMTimeSubtract(&lhs, &rhs, &v125);
        CMTimeAbsoluteValue((CMTime *)&time1, &lhs);
        CMTimeMake(&rhs, 1, 1000000000);
        *(_OWORD *)&v125.value = time1;
        v125.epoch = *(_QWORD *)&time1_16[0];
        if (CMTimeCompare(&v125, &rhs) >= 1)
        {
LABEL_193:
          *(_QWORD *)&time1 = v140;
          *((_QWORD *)&time1 + 1) = __PAIR64__(v86, v141);
          *(_QWORD *)&time1_16[0] = v87;
          v125.value = v136;
          v125.timescale = v137;
          v125.flags = v29;
          v125.epoch = v113;
          LODWORD(v54) = CMTimeCompare((CMTime *)&time1, &v125) > 0;
          goto LABEL_181;
        }
        goto LABEL_201;
      }
      v91 = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(v84, 0);
      CMSampleBufferGetOutputPresentationTimeStamp(&time2, v91);
      CMSampleBufferGetDuration(&v121, v91);
      CMTimeSubtract((CMTime *)&time1, &time2, &v121);
      v142 = time1;
      v92 = HIDWORD(time1);
      v143 = DWORD2(time1);
      v93 = *(_QWORD *)&time1_16[0];
      v80 = DerivedStorage;
      if ((BYTE12(time1) & 0x1F) != 3 && (v28 & 0x1F) != 3)
        goto LABEL_205;
      time1 = 0uLL;
      *(_QWORD *)&time1_16[0] = 0;
      rhs.value = v142;
      rhs.timescale = v143;
      rhs.flags = v92;
      rhs.epoch = v93;
      v125.value = v134;
      v125.timescale = v135;
      v125.flags = v28;
      v125.epoch = v115;
      CMTimeSubtract(&lhs, &rhs, &v125);
      CMTimeAbsoluteValue((CMTime *)&time1, &lhs);
      LODWORD(v54) = 1;
      CMTimeMake(&rhs, 1, 1000000000);
      *(_OWORD *)&v125.value = time1;
      v125.epoch = *(_QWORD *)&time1_16[0];
      if (CMTimeCompare(&v125, &rhs) >= 1)
      {
LABEL_205:
        *(_QWORD *)&time1 = v142;
        *((_QWORD *)&time1 + 1) = __PAIR64__(v92, v143);
        *(_QWORD *)&time1_16[0] = v93;
        v125.value = v134;
        v125.timescale = v135;
        v125.flags = v28;
        v125.epoch = v115;
        LODWORD(v54) = CMTimeCompare((CMTime *)&time1, &v125) < 1;
      }
LABEL_181:
      MEMORY[0x19402EF04](*(_QWORD *)(v101 + 232));
      if ((_DWORD)v54)
        goto LABEL_183;
      goto LABEL_182;
    }
    v88 = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(queue);
    v54 = v88;
    if (!v88)
    {
      v53 = 0;
      goto LABEL_180;
    }
    CMSampleBufferGetOutputPresentationTimeStamp((CMTime *)&time1, v88);
    v142 = time1;
    v89 = HIDWORD(time1);
    v143 = DWORD2(time1);
    v90 = *(_QWORD *)&time1_16[0];
    CMSampleBufferGetOutputDuration(&v121, v54);
    lhs.value = v142;
    lhs.timescale = v143;
    lhs.flags = v89;
    lhs.epoch = v90;
    CMTimeAdd((CMTime *)&time1, &lhs, &v121);
    v140 = time1;
    v141 = DWORD2(time1);
    if (a2 > 1)
    {
      if (a2 == -1)
      {
        v94 = HIDWORD(time1);
        v95 = *(_QWORD *)&time1_16[0];
        v80 = DerivedStorage;
        if ((v98 & 0x1F) == 3 || (BYTE12(time1) & 0x1F) == 3)
        {
          time1 = 0uLL;
          *(_QWORD *)&time1_16[0] = 0;
          rhs.value = v128;
          rhs.timescale = v129;
          rhs.flags = v98;
          rhs.epoch = v97;
          v125.value = v140;
          v125.timescale = v141;
          v125.flags = v94;
          v125.epoch = v95;
          CMTimeSubtract(&lhs, &rhs, &v125);
          CMTimeAbsoluteValue((CMTime *)&time1, &lhs);
          CMTimeMake(&time2, 1, 1000000000);
          *(_OWORD *)&rhs.value = time1;
          rhs.epoch = *(_QWORD *)&time1_16[0];
          if (CMTimeCompare(&rhs, &time2) <= 0)
            goto LABEL_200;
        }
        *(_QWORD *)&time1 = v128;
        *((_QWORD *)&time1 + 1) = __PAIR64__(v98, v129);
        *(_QWORD *)&time1_16[0] = v97;
        rhs.value = v140;
        rhs.timescale = v141;
        rhs.flags = v94;
        rhs.epoch = v95;
        if (CMTimeCompare((CMTime *)&time1, &rhs) < 1)
          goto LABEL_200;
        goto LABEL_212;
      }
    }
    else
    {
      if ((v98 & 0x1F) != 3 && (v89 & 0x1F) != 3)
        goto LABEL_199;
      time1 = 0uLL;
      *(_QWORD *)&time1_16[0] = 0;
      rhs.value = v128;
      rhs.timescale = v129;
      rhs.flags = v98;
      rhs.epoch = v97;
      v125.value = v142;
      v125.timescale = v143;
      v125.flags = v89;
      v125.epoch = v90;
      CMTimeSubtract(&lhs, &rhs, &v125);
      CMTimeAbsoluteValue((CMTime *)&time1, &lhs);
      CMTimeMake(&time2, 1, 1000000000);
      *(_OWORD *)&rhs.value = time1;
      rhs.epoch = *(_QWORD *)&time1_16[0];
      if (CMTimeCompare(&rhs, &time2) > 0)
      {
LABEL_199:
        *(_QWORD *)&time1 = v128;
        *((_QWORD *)&time1 + 1) = __PAIR64__(v98, v129);
        *(_QWORD *)&time1_16[0] = v97;
        rhs.value = v142;
        rhs.timescale = v143;
        rhs.flags = v89;
        rhs.epoch = v90;
        v80 = DerivedStorage;
        if ((CMTimeCompare((CMTime *)&time1, &rhs) & 0x80000000) == 0)
        {
LABEL_200:
          v53 = 0;
LABEL_201:
          LODWORD(v54) = 0;
          goto LABEL_181;
        }
LABEL_212:
        if (a3)
        {
          v96 = CMBufferQueueDequeueAndRetain(queue);
          CFArraySetValueAtIndex(*(CFMutableArrayRef *)(v101 + 256), 0, v96);
          if (v96)
            CFRelease(v96);
        }
        else
        {
          v53 = 0;
        }
        LODWORD(v54) = 1;
        goto LABEL_181;
      }
    }
LABEL_177:
    v53 = 0;
    LODWORD(v54) = 0;
LABEL_180:
    v80 = DerivedStorage;
    goto LABEL_181;
  }
  v146 = *(_QWORD *)a4;
  v21 = *(_DWORD *)(a4 + 12);
  v147 = *(_DWORD *)(a4 + 8);
  v22 = *(_QWORD *)(a4 + 16);
  v23 = CMBaseObjectGetDerivedStorage();
  v24 = *(opaqueCMBufferQueue **)(v23 + 216);
  *(_OWORD *)&v123.value = *(_OWORD *)v12;
  v25 = *(_QWORD *)(v12 + 16);
  v123.epoch = v25;
  v139.value = *(_QWORD *)v12;
  v139.timescale = *(_DWORD *)(v12 + 8);
  if (FigAtomicCompareAndSwap32())
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(v23 + 232));
    v26 = *(const void **)(v23 + 240);
    if (!v26)
      goto LABEL_42;
    v27 = *(_DWORD *)(v23 + 248);
    if (v27)
    {
      if (v27 == -1)
      {
        if (a2 != -1)
          goto LABEL_42;
      }
      else if (a2 != 1 || v27 != 1)
      {
        goto LABEL_42;
      }
    }
    v46 = (opaqueCMSampleBuffer *)CFRetain(v26);
    if (v46)
    {
LABEL_43:
      v108 = a6;
      if (CMSampleBufferIsValid(v46) == 1)
      {
        if (a2 == -1)
        {
          CMSampleBufferGetOutputPresentationTimeStamp(&v123, v46);
          CMSampleBufferGetOutputDuration(&v122, v46);
          lhs = v123;
          CMTimeSubtract((CMTime *)&time1, &lhs, &v122);
          v139.value = time1;
          v47 = HIDWORD(time1);
          v139.timescale = DWORD2(time1);
          v25 = *(_QWORD *)&time1_16[0];
        }
        else
        {
          CMSampleBufferGetOutputPresentationTimeStamp((CMTime *)&time1, v46);
          *(_OWORD *)&v123.value = time1;
          v123.epoch = *(_QWORD *)&time1_16[0];
          CMSampleBufferGetOutputDuration(&v122, v46);
          lhs = v123;
          CMTimeAdd((CMTime *)&time1, &lhs, &v122);
          v139.value = time1;
          v47 = HIDWORD(time1);
          v139.timescale = DWORD2(time1);
          v25 = *(_QWORD *)&time1_16[0];
          time1 = *(_OWORD *)(v23 + 268);
          *(_QWORD *)&time1_16[0] = *(_QWORD *)(v23 + 284);
          *(_BYTE *)(v23 + 264) = fvcp_bq_source_isLastSample(v46, (CMTime *)&time1);
        }
      }
      else
      {
        v47 = *(_DWORD *)(v12 + 12);
      }
      v48 = v21 & 0x1F;
      while (1)
      {
        if (CMSampleBufferGetNumSamples(v46) && CMSampleBufferIsValid(v46))
        {
          if (a2 > 1)
          {
            if (a2 != -1)
              goto LABEL_71;
            if (v48 == 3 || (v47 & 0x1F) == 3)
            {
              time1 = 0uLL;
              *(_QWORD *)&time1_16[0] = 0;
              rhs.value = v146;
              rhs.timescale = v147;
              rhs.flags = v21;
              rhs.epoch = v22;
              v125.value = v139.value;
              v125.timescale = v139.timescale;
              v125.flags = v47;
              v125.epoch = v25;
              CMTimeSubtract(&lhs, &rhs, &v125);
              CMTimeAbsoluteValue((CMTime *)&time1, &lhs);
              CMTimeMake(&time2, 1, 1000000000);
              *(_OWORD *)&rhs.value = time1;
              rhs.epoch = *(_QWORD *)&time1_16[0];
              if (CMTimeCompare(&rhs, &time2) <= 0)
                goto LABEL_71;
            }
            *(_QWORD *)&time1 = v146;
            *((_QWORD *)&time1 + 1) = __PAIR64__(v21, v147);
            *(_QWORD *)&time1_16[0] = v22;
            rhs.value = v139.value;
            rhs.timescale = v139.timescale;
            rhs.flags = v47;
            rhs.epoch = v25;
            if ((CMTimeCompare((CMTime *)&time1, &rhs) & 0x80000000) == 0)
              goto LABEL_71;
          }
          else
          {
            if ((v47 & 0x1F) != 3 && v48 != 3)
              goto LABEL_222;
            time1 = 0uLL;
            *(_QWORD *)&time1_16[0] = 0;
            rhs.value = v139.value;
            rhs.timescale = v139.timescale;
            rhs.flags = v47;
            rhs.epoch = v25;
            v125.value = v146;
            v125.timescale = v147;
            v125.flags = v21;
            v125.epoch = v22;
            CMTimeSubtract(&lhs, &rhs, &v125);
            CMTimeAbsoluteValue((CMTime *)&time1, &lhs);
            CMTimeMake(&time2, 1, 1000000000);
            *(_OWORD *)&rhs.value = time1;
            rhs.epoch = *(_QWORD *)&time1_16[0];
            if (CMTimeCompare(&rhs, &time2) > 0)
            {
LABEL_222:
              *(_QWORD *)&time1 = v139.value;
              *((_QWORD *)&time1 + 1) = __PAIR64__(v47, v139.timescale);
              *(_QWORD *)&time1_16[0] = v25;
              rhs.value = v146;
              rhs.timescale = v147;
              rhs.flags = v21;
              rhs.epoch = v22;
              if (CMTimeCompare((CMTime *)&time1, &rhs) > 0)
                goto LABEL_71;
            }
            if (*(_BYTE *)(v23 + 264))
            {
LABEL_71:
              v50 = *(opaqueCMSampleBuffer **)(v23 + 240);
              if (v46 != v50)
              {
                *(_QWORD *)(v23 + 240) = v46;
                CFRetain(v46);
                v51 = 1;
                if (!v50)
                  goto LABEL_76;
                goto LABEL_73;
              }
              v51 = 1;
              goto LABEL_76;
            }
          }
        }
        if (v46 == *(opaqueCMSampleBuffer **)(v23 + 240))
        {
          CFRelease(v46);
          *(_QWORD *)(v23 + 240) = 0;
        }
        CFRelease(v46);
        v49 = (opaqueCMSampleBuffer *)CMBufferQueueDequeueAndRetain(v24);
        if (!v49)
          break;
        v46 = v49;
        CMSampleBufferGetOutputPresentationTimeStamp((CMTime *)&time1, v49);
        *(_OWORD *)&v123.value = time1;
        v123.epoch = *(_QWORD *)&time1_16[0];
        if (a2 == -1)
        {
          CMSampleBufferGetOutputDuration(&v121, v46);
          lhs = v123;
          CMTimeSubtract((CMTime *)&time1, &lhs, &v121);
          v139.value = time1;
          v47 = HIDWORD(time1);
          v139.timescale = DWORD2(time1);
          v25 = *(_QWORD *)&time1_16[0];
        }
        else
        {
          CMSampleBufferGetOutputDuration(&v120, v46);
          lhs = v123;
          CMTimeAdd((CMTime *)&time1, &lhs, &v120);
          v139.value = time1;
          v47 = HIDWORD(time1);
          v139.timescale = DWORD2(time1);
          v25 = *(_QWORD *)&time1_16[0];
          time1 = *(_OWORD *)(v23 + 268);
          *(_QWORD *)&time1_16[0] = *(_QWORD *)(v23 + 284);
          *(_BYTE *)(v23 + 264) = fvcp_bq_source_isLastSample(v46, (CMTime *)&time1);
        }
      }
      v50 = *(opaqueCMSampleBuffer **)(v23 + 240);
      if (v50)
      {
        v51 = 0;
        v46 = 0;
        *(_QWORD *)(v23 + 240) = 0;
LABEL_73:
        CFRelease(v50);
        goto LABEL_76;
      }
      v46 = 0;
      v51 = 0;
LABEL_76:
      *(_DWORD *)(v23 + 248) = a2;
      *(_DWORD *)(v23 + 224) = v51;
      *(_DWORD *)(v23 + 228) = CMBufferQueueIsAtEndOfData(v24);
      v52 = (CMTimeValue *)(v23 + 304);
      if ((a2 & 0x80000000) != 0)
      {
        *v52 = v139.value;
        *(_DWORD *)(v23 + 312) = v139.timescale;
        *(_DWORD *)(v23 + 316) = v47;
        *(_QWORD *)(v23 + 320) = v25;
        *(CMTime *)(v23 + 328) = v123;
      }
      else
      {
        *(_OWORD *)v52 = *(_OWORD *)&v123.value;
        *(_QWORD *)(v23 + 320) = v123.epoch;
        *(_QWORD *)(v23 + 328) = v139.value;
        *(_DWORD *)(v23 + 336) = v139.timescale;
        *(_DWORD *)(v23 + 340) = v47;
        *(_QWORD *)(v23 + 344) = v25;
      }
      a6 = v108;
LABEL_80:
      v53 = 0;
      LODWORD(v54) = 0;
      if (FigAtomicCompareAndSwap32()
        || (v53 = 1, LODWORD(v54) = 1, FigAtomicCompareAndSwap32()))
      {
LABEL_163:
        if (!v46)
        {
LABEL_165:
          MEMORY[0x19402EF04](*(_QWORD *)(v23 + 232));
          a5 = v109;
          goto LABEL_166;
        }
LABEL_164:
        CFRelease(v46);
        goto LABEL_165;
      }
      if (a2 == -1)
      {
        v138.value = *(_QWORD *)(v23 + 328);
        v138.timescale = *(_DWORD *)(v23 + 336);
        v74 = *(_DWORD *)(v23 + 340);
        v75 = *(_QWORD *)(v23 + 344);
        v57 = v21 & 0x1F;
        if ((v74 & 0x1F) == 3 || v57 == 3)
        {
          time1 = 0uLL;
          *(_QWORD *)&time1_16[0] = 0;
          rhs.value = *(_QWORD *)(v23 + 328);
          rhs.timescale = *(_DWORD *)(v23 + 336);
          rhs.flags = v74;
          rhs.epoch = v75;
          v125.value = v146;
          v125.timescale = v147;
          v125.flags = v21;
          v125.epoch = v22;
          CMTimeSubtract(&lhs, &rhs, &v125);
          CMTimeAbsoluteValue((CMTime *)&time1, &lhs);
          CMTimeMake(&time2, 1, 1000000000);
          *(_OWORD *)&rhs.value = time1;
          rhs.epoch = *(_QWORD *)&time1_16[0];
          if (CMTimeCompare(&rhs, &time2) <= 0)
            goto LABEL_152;
        }
        *(_QWORD *)&time1 = v138.value;
        *((_QWORD *)&time1 + 1) = __PAIR64__(v74, v138.timescale);
        *(_QWORD *)&time1_16[0] = v75;
        rhs.value = v146;
        rhs.timescale = v147;
        rhs.flags = v21;
        rhs.epoch = v22;
        if ((CMTimeCompare((CMTime *)&time1, &rhs) & 0x80000000) == 0)
          goto LABEL_152;
      }
      else
      {
        if (a2 != 1)
        {
          v57 = v21 & 0x1F;
          goto LABEL_152;
        }
        v138.value = *(_QWORD *)(v23 + 304);
        v138.timescale = *(_DWORD *)(v23 + 312);
        v55 = *(_DWORD *)(v23 + 316);
        v56 = *(_QWORD *)(v23 + 320);
        v57 = v21 & 0x1F;
        if ((v55 & 0x1F) == 3 || v57 == 3)
        {
          time1 = 0uLL;
          *(_QWORD *)&time1_16[0] = 0;
          rhs.value = *(_QWORD *)(v23 + 304);
          rhs.timescale = *(_DWORD *)(v23 + 312);
          rhs.flags = v55;
          rhs.epoch = v56;
          v125.value = v146;
          v125.timescale = v147;
          v125.flags = v21;
          v125.epoch = v22;
          CMTimeSubtract(&lhs, &rhs, &v125);
          CMTimeAbsoluteValue((CMTime *)&time1, &lhs);
          CMTimeMake(&time2, 1, 1000000000);
          *(_OWORD *)&rhs.value = time1;
          rhs.epoch = *(_QWORD *)&time1_16[0];
          if (CMTimeCompare(&rhs, &time2) <= 0)
            goto LABEL_152;
        }
        *(_QWORD *)&time1 = v138.value;
        *((_QWORD *)&time1 + 1) = __PAIR64__(v55, v138.timescale);
        *(_QWORD *)&time1_16[0] = v56;
        rhs.value = v146;
        rhs.timescale = v147;
        rhs.flags = v21;
        rhs.epoch = v22;
        if (CMTimeCompare((CMTime *)&time1, &rhs) <= 0)
        {
LABEL_152:
          v138.value = *(_QWORD *)(v23 + 304);
          v138.timescale = *(_DWORD *)(v23 + 312);
          v76 = *(_DWORD *)(v23 + 316);
          v77 = *(_QWORD *)(v23 + 320);
          if (v57 != 3 && (*(_DWORD *)(v23 + 316) & 0x1F) != 3)
            goto LABEL_224;
          time1 = 0uLL;
          *(_QWORD *)&time1_16[0] = 0;
          rhs.value = v146;
          rhs.timescale = v147;
          rhs.flags = v21;
          rhs.epoch = v22;
          v125.value = *(_QWORD *)(v23 + 304);
          v125.timescale = *(_DWORD *)(v23 + 312);
          v125.flags = v76;
          v125.epoch = v77;
          CMTimeSubtract(&lhs, &rhs, &v125);
          CMTimeAbsoluteValue((CMTime *)&time1, &lhs);
          CMTimeMake(&time2, 1, 1000000000);
          *(_OWORD *)&rhs.value = time1;
          rhs.epoch = *(_QWORD *)&time1_16[0];
          if (CMTimeCompare(&rhs, &time2) > 0)
          {
LABEL_224:
            *(_QWORD *)&time1 = v146;
            *((_QWORD *)&time1 + 1) = __PAIR64__(v21, v147);
            *(_QWORD *)&time1_16[0] = v22;
            rhs.value = v138.value;
            rhs.timescale = v138.timescale;
            rhs.flags = v76;
            rhs.epoch = v77;
            if (CMTimeCompare((CMTime *)&time1, &rhs) < 0)
              goto LABEL_168;
          }
          v138.value = *(_QWORD *)(v23 + 328);
          v138.timescale = *(_DWORD *)(v23 + 336);
          v78 = *(_DWORD *)(v23 + 340);
          v79 = *(_QWORD *)(v23 + 344);
          if (v57 == 3 || (*(_DWORD *)(v23 + 340) & 0x1F) == 3)
          {
            time1 = 0uLL;
            *(_QWORD *)&time1_16[0] = 0;
            rhs.value = v146;
            rhs.timescale = v147;
            rhs.flags = v21;
            rhs.epoch = v22;
            v125.value = *(_QWORD *)(v23 + 328);
            v125.timescale = *(_DWORD *)(v23 + 336);
            v125.flags = v78;
            v125.epoch = v79;
            CMTimeSubtract(&lhs, &rhs, &v125);
            CMTimeAbsoluteValue((CMTime *)&time1, &lhs);
            CMTimeMake(&time2, 1, 1000000000);
            *(_OWORD *)&rhs.value = time1;
            rhs.epoch = *(_QWORD *)&time1_16[0];
            if (CMTimeCompare(&rhs, &time2) <= 0)
              goto LABEL_223;
          }
          *(_QWORD *)&time1 = v146;
          *((_QWORD *)&time1 + 1) = __PAIR64__(v21, v147);
          *(_QWORD *)&time1_16[0] = v22;
          rhs.value = v138.value;
          rhs.timescale = v138.timescale;
          rhs.flags = v78;
          rhs.epoch = v79;
          if ((CMTimeCompare((CMTime *)&time1, &rhs) & 0x80000000) == 0)
          {
LABEL_223:
            if (!*(_BYTE *)(v23 + 264))
            {
LABEL_168:
              LODWORD(v54) = 0;
              v53 = 1;
              if (!v46)
                goto LABEL_165;
              goto LABEL_164;
            }
          }
          v53 = 1;
          goto LABEL_162;
        }
      }
      v53 = a3 != 0;
LABEL_162:
      LODWORD(v54) = 1;
      goto LABEL_163;
    }
LABEL_42:
    v46 = (opaqueCMSampleBuffer *)CMBufferQueueDequeueAndRetain(v24);
    if (!v46)
      goto LABEL_80;
    goto LABEL_43;
  }
  v53 = 0;
  LODWORD(v54) = 0;
LABEL_166:
  v80 = DerivedStorage;
  if ((_DWORD)v54)
    goto LABEL_183;
LABEL_182:
  FigVCPSourceHoldTriggerUntilAvailabilityChanges();
LABEL_183:
  MEMORY[0x19402EF04](*(_QWORD *)(v80 + 296));
  if (a5)
    *a5 = v53;
  if (a6)
    *a6 = (_BYTE)v54;
  return 0;
}

uint64_t fvcp_bq_source_SetCurrentTime()
{
  return 0;
}

uint64_t fvcp_bq_source_CopySampleBuffer(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  CFTypeRef v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v4 = DerivedStorage;
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 232));
    v5 = *(CFTypeRef *)(v4 + 240);
    if (v5)
      v5 = CFRetain(v5);
    *a2 = v5;
    MEMORY[0x19402EF04](*(_QWORD *)(v4 + 232));
  }
  return 0;
}

uint64_t fvcp_bq_source_HasNoMoreSamples()
{
  CMBaseObjectGetDerivedStorage();
  return FigAtomicCompareAndSwap32();
}

uint64_t fvcp_bq_source_CopyTimedSampleBuffers(uint64_t a1, int a2, CFArrayRef *a3)
{
  uint64_t DerivedStorage;
  const __CFArray *v7;
  uint64_t Count;
  uint64_t v9;
  __CFArray *Mutable;
  CFIndex v11;
  opaqueCMSampleBuffer *ValueAtIndex;
  uint64_t v13;
  uint64_t v14;
  CFArrayRef v15;
  uint64_t v16;
  CMTime v18;
  CMTime v19;
  CMTime v20;
  void *values;
  opaqueCMSampleBuffer *v22;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  values = 0;
  v22 = 0;
  if (FigVCPSourceRequiresWindowedSampling(a1, a2))
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 232));
    v7 = *(const __CFArray **)(DerivedStorage + 256);
    if (v7)
    {
      Count = CFArrayGetCount(v7);
      if (Count >= 1)
      {
        v9 = Count;
        Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B378]);
        if (Mutable)
        {
          v11 = 0;
          while (1)
          {
            ValueAtIndex = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 256), v11);
            if (fvcp_isNonPermanentEmptyMediaMarker(ValueAtIndex))
            {
              CMSampleBufferGetOutputPresentationTimeStamp(&v19, ValueAtIndex);
              v13 = FigVCPTimedSampleCreateWithNULL((uint64_t)&v19, (uint64_t *)&values);
            }
            else
            {
              CMSampleBufferGetOutputPresentationTimeStamp(&v20, ValueAtIndex);
              v13 = FigVCPTimedSampleCreateWithSampleBuffer((uint64_t)&v20, ValueAtIndex, (uint64_t *)&values);
            }
            v14 = v13;
            if ((_DWORD)v13)
              break;
            CFArrayAppendValue(Mutable, values);
            if (values)
            {
              CFRelease(values);
              values = 0;
            }
            if (v9 == ++v11)
              goto LABEL_15;
          }
        }
        else
        {
          v14 = FigSignalErrorAt();
        }
        MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 232));
        goto LABEL_22;
      }
    }
    Mutable = 0;
LABEL_15:
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 232));
    v15 = Mutable;
  }
  else
  {
    fvcp_bq_source_CopySampleBuffer(a1, &v22);
    if (v22)
    {
      CMSampleBufferGetOutputPresentationTimeStamp(&v18, v22);
      v16 = FigVCPTimedSampleCreateWithSampleBuffer((uint64_t)&v18, v22, (uint64_t *)&values);
      if ((_DWORD)v16)
      {
        v14 = v16;
        Mutable = 0;
        goto LABEL_22;
      }
      v15 = CFArrayCreate(0, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
    }
    else
    {
      v15 = 0;
    }
  }
  Mutable = 0;
  v14 = 0;
  if (!a3)
    goto LABEL_23;
  *a3 = v15;
LABEL_22:
  v15 = 0;
LABEL_23:
  if (v22)
    CFRelease(v22);
  if (values)
    CFRelease(values);
  if (v15)
    CFRelease(v15);
  if (Mutable)
    CFRelease(Mutable);
  return v14;
}

BOOL fvcp_isNonPermanentEmptyMediaMarker(const void *a1)
{
  CFTypeRef v2;

  v2 = CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA2678], 0);
  return v2 == (CFTypeRef)*MEMORY[0x1E0C9AE50] && CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA26C0], 0) != v2;
}

BOOL fvcp_bq_source_isLastSample(opaqueCMSampleBuffer *a1, CMTime *a2)
{
  CMTime v5;
  CMTime lhs;
  CMTime v7;
  CMTime v8;
  CMTime v9;

  memset(&v9, 0, sizeof(v9));
  CMSampleBufferGetOutputPresentationTimeStamp(&v9, a1);
  memset(&v8, 0, sizeof(v8));
  CMSampleBufferGetOutputDuration(&v8, a1);
  memset(&v7, 0, sizeof(v7));
  lhs = v9;
  v5 = v8;
  CMTimeAdd(&v7, &lhs, &v5);
  lhs = v7;
  v5 = *a2;
  return CMTimeCompare(&lhs, &v5) == 0;
}

double fvcp_pendingFrame_Init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 224) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void fvcp_pendingFrame_Finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  v2 = (const void *)a1[3];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[20];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[21];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[24];
  if (v5)
    CFRelease(v5);
  FigVCPPendingFrameReleaseAndClearSourceFrames((uint64_t)a1);
}

double fvcp_timing_Init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 208) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void fvcp_timing_Finalize(uint64_t a1)
{
  const void *v2;

  FigVCPTimingInvalidate(a1);
  FigSimpleMutexDestroy();
  FigSimpleMutexDestroy();
  v2 = *(const void **)(a1 + 72);
  if (v2)
    CFRelease(v2);
}

void fvcp_timing_timebaseTimeJumpedOrRateChanged(uint64_t a1, uint64_t a2)
{
  MEMORY[0x19402EEEC](*(_QWORD *)(a2 + 80));
  *(_BYTE *)(a2 + 168) = 1;
  JUMPOUT(0x19402EF04);
}

double fvcp_output_Init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 96) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t fvcp_output_Finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  FigVCPOutputInvalidate((uint64_t)a1);
  v2 = (const void *)a1[11];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[9];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[8];
  if (v4)
  {
    CFRelease(v4);
    a1[8] = 0;
  }
  v5 = (const void *)a1[7];
  if (v5)
  {
    CFRelease(v5);
    a1[7] = 0;
  }
  FigSimpleMutexDestroy();
  return FigSimpleMutexDestroy();
}

CFStringRef fvcp_output_CopyFormattingDesc(uint64_t a1, CFDictionaryRef formatOptions)
{
  const __CFAllocator *v4;
  const __CFArray *Count;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Count = *(const __CFArray **)(a1 + 72);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  return CFStringCreateWithFormat(v4, formatOptions, CFSTR("[FigVCPOutput(%p)] %ld outputs"), a1, Count);
}

__CFString *fvcp_output_CopyDebugDesc(uint64_t a1)
{
  __CFString *Mutable;
  char *v3;
  __int128 v4;
  Float64 Seconds;
  Float64 v6;
  const __CFArray *v7;
  CFIndex Count;
  CFIndex v9;
  CFIndex i;
  const void *ValueAtIndex;
  CMTime v13;
  CMTime time;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v3 = (char *)fvcp_output_copyOutputDurationWaterLevel(a1);
  v4 = *((_OWORD *)v3 + 1);
  time.epoch = *((_QWORD *)v3 + 4);
  *(_OWORD *)&time.value = v4;
  Seconds = CMTimeGetSeconds(&time);
  v13 = *(CMTime *)(v3 + 40);
  v6 = CMTimeGetSeconds(&v13);
  CFStringAppendFormat(Mutable, 0, CFSTR("[FigVCPOutput(%p)] high water = %1.3f seconds / low water = %1.3f seconds\n"), a1, *(_QWORD *)&Seconds, *(_QWORD *)&v6);
  v7 = *(const __CFArray **)(a1 + 72);
  if (!v7)
    goto LABEL_6;
  Count = CFArrayGetCount(v7);
  if (Count < 1)
    goto LABEL_6;
  v9 = Count;
  for (i = 0; i != v9; ++i)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), i);
    CFStringAppendFormat(Mutable, 0, CFSTR("  %@"), ValueAtIndex);
  }
  if (v3)
LABEL_6:
    CFRelease(v3);
  return Mutable;
}

double fvcp_sourceArray_Init(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void fvcp_sourceArray_Finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
}

__CFString *fvcp_sourceArray_CopyFormattingDesc(uint64_t a1, const __CFDictionary *a2)
{
  __CFString *Mutable;
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex i;
  const void *ValueAtIndex;
  unsigned int *DerivedStorage;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, a2, CFSTR("[FigVCPSourceArray(%p)] "), a1);
  v5 = *(const __CFArray **)(a1 + 32);
  if (v5)
  {
    Count = CFArrayGetCount(v5);
    if (Count >= 1)
    {
      v7 = Count;
      for (i = 0; i != v7; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), i);
        DerivedStorage = (unsigned int *)CMBaseObjectGetDerivedStorage();
        CFStringAppendFormat(Mutable, a2, CFSTR("(%d,%p) "), *DerivedStorage, ValueAtIndex);
      }
    }
  }
  return Mutable;
}

__CFString *fvcp_sourceArray_CopyDebugDesc(uint64_t a1)
{
  __CFString *Mutable;
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  CFIndex i;
  const void *ValueAtIndex;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("[FigVCPSourceArray(%p)]\n"), a1);
  v3 = *(const __CFArray **)(a1 + 32);
  if (v3)
  {
    Count = CFArrayGetCount(v3);
    if (Count >= 1)
    {
      v5 = Count;
      for (i = 0; i != v5; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), i);
        CFStringAppendFormat(Mutable, 0, CFSTR("  %@\n"), ValueAtIndex);
      }
    }
  }
  return Mutable;
}

double fvcp_coreAnimationPostProcessor_Init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 80) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void fvcp_coreAnimationPostProcessor_Finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  FigSimpleMutexDestroy();
  v2 = (const void *)a1[3];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[4];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[5];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[6];
  if (v5)
    CFRelease(v5);
}

double fvcp_outputDurationWaterLevel_Init(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

double fvcp_instructionGetter_Init(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t fvcp_instructionGetter_Finalize(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 56);
  if (v1)
    CFRelease(v1);
  return FigSimpleMutexDestroy();
}

CFStringRef fvcp_instructionGetter_CopyFormattingDesc(_QWORD *a1, const __CFDictionary *a2)
{
  const void *v4;
  CFTypeRef v5;
  CFStringRef v6;

  MEMORY[0x19402EEEC](a1[6]);
  v4 = (const void *)a1[7];
  if (v4)
    v5 = CFRetain(v4);
  else
    v5 = 0;
  MEMORY[0x19402EF04](a1[6]);
  v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, CFSTR("[FigVCPInstructionSource(%p)] currentInstruction %@, callback %p(refcon %p)"), a1, v5, a1[3], a1[4]);
  if (v5)
    CFRelease(v5);
  return v6;
}

double fvcp_outputConformer_Init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 144) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void fvcp_outputConformer_Finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;

  FigSimpleMutexDestroy();
  v2 = (const void *)a1[5];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[6];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[7];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[8];
  if (v5)
    CFRelease(v5);
  v6 = (const void *)a1[9];
  if (v6)
    CFRelease(v6);
  v7 = (const void *)a1[10];
  if (v7)
    CFRelease(v7);
  v8 = (const void *)a1[11];
  if (v8)
    CFRelease(v8);
  v9 = (const void *)a1[12];
  if (v9)
    CFRelease(v9);
}

CFStringRef fvcp_outputConformer_CopyFormattingDesc(uint64_t a1, const __CFDictionary *a2, uint64_t a3)
{
  const __CFAllocator *v5;
  CFStringRef v6;
  CFTypeRef cf;

  cf = 0;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  FigVCPOutputConformerCopyProperty(a1, CFSTR("VideoCompositionProcessor_DestinationPixelBufferDesiredAttributes"), a3, &cf);
  v6 = CFStringCreateWithFormat(v5, a2, CFSTR("[FigVCPOutputConformer(%p)] destinationPixelBufferDesiredAttributes %@, destinationPixelBufferPool %p, pixelTransferSession %p"), a1, cf, *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96));
  if (cf)
    CFRelease(cf);
  return v6;
}

void fvcp_outputConformer_initCopyPropertyDispatchDictionary()
{
  __CFDictionary *Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
  CFDictionaryAddValue(Mutable, CFSTR("VideoCompositionProcessor_DestinationPixelBufferDesiredAttributes"), fvcp_outputConformer_copyDestinationPixelBufferDesiredAttributes);
  CFDictionaryAddValue(Mutable, CFSTR("VideoCompositionProcessor_DestinationPixelTransferProperties"), fvcp_outputConformer_copyDestinationPixelTransferProperties);
  CFDictionaryAddValue(Mutable, CFSTR("VideoCompositionProcessor_DestinationPixelBufferDesiredYCbCrMatrix"), fvcp_outputConformer_copyDestinationYCbCrMatrix);
  CFDictionaryAddValue(Mutable, CFSTR("VideoCompositionProcessor_DestinationPixelBufferDesiredColorPrimaries"), fvcp_outputConformer_copyDestinationColorPrimaries);
  CFDictionaryAddValue(Mutable, CFSTR("VideoCompositionProcessor_DestinationPixelBufferDesiredTransferFunction"), fvcp_outputConformer_copyDestinationTransferFunction);
  CFDictionaryAddValue(Mutable, CFSTR("VideoCompositionProcessor_PixelBufferPoolSharingID"), fvcp_outputConformer_copyPixelBufferPoolSharingID);
  fvcp_outputConformer_copyPropertyDispatchDictionary = (uint64_t)Mutable;
}

CFTypeRef fvcp_outputConformer_copyDestinationPixelBufferDesiredAttributes(uint64_t a1)
{
  const void *v2;
  CFTypeRef v3;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 24));
  v2 = *(const void **)(a1 + 40);
  if (v2)
    v3 = CFRetain(v2);
  else
    v3 = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 24));
  return v3;
}

CFTypeRef fvcp_outputConformer_copyDestinationPixelTransferProperties(uint64_t a1)
{
  const void *v2;
  CFTypeRef v3;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 24));
  v2 = *(const void **)(a1 + 48);
  if (v2)
    v3 = CFRetain(v2);
  else
    v3 = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 24));
  return v3;
}

CFTypeRef fvcp_outputConformer_copyDestinationYCbCrMatrix(uint64_t a1)
{
  const void *v2;
  CFTypeRef v3;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 24));
  v2 = *(const void **)(a1 + 56);
  if (v2)
    v3 = CFRetain(v2);
  else
    v3 = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 24));
  return v3;
}

CFTypeRef fvcp_outputConformer_copyDestinationColorPrimaries(uint64_t a1)
{
  const void *v2;
  CFTypeRef v3;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 24));
  v2 = *(const void **)(a1 + 64);
  if (v2)
    v3 = CFRetain(v2);
  else
    v3 = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 24));
  return v3;
}

CFTypeRef fvcp_outputConformer_copyDestinationTransferFunction(uint64_t a1)
{
  const void *v2;
  CFTypeRef v3;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 24));
  v2 = *(const void **)(a1 + 72);
  if (v2)
    v3 = CFRetain(v2);
  else
    v3 = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 24));
  return v3;
}

CFTypeRef fvcp_outputConformer_copyPixelBufferPoolSharingID(uint64_t a1)
{
  const void *v2;
  CFTypeRef v3;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 24));
  v2 = *(const void **)(a1 + 80);
  if (v2)
    v3 = CFRetain(v2);
  else
    v3 = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 24));
  return v3;
}

void fvcp_outputConformer_initSetPropertyDispatchDictionary()
{
  __CFDictionary *Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
  CFDictionaryAddValue(Mutable, CFSTR("VideoCompositionProcessor_DestinationPixelBufferDesiredAttributes"), fvcp_outputConformer_setDestinationPixelBufferDesiredAttributes);
  CFDictionaryAddValue(Mutable, CFSTR("VideoCompositionProcessor_DestinationPixelTransferProperties"), fvcp_outputConformer_setDestinationPixelTransferProperties);
  CFDictionaryAddValue(Mutable, CFSTR("VideoCompositionProcessor_DestinationPixelBufferDesiredYCbCrMatrix"), fvcp_outputConformer_setDestinationPixelBufferDesiredYCbCrMatrix);
  CFDictionaryAddValue(Mutable, CFSTR("VideoCompositionProcessor_DestinationPixelBufferDesiredColorPrimaries"), fvcp_outputConformer_setDestinationPixelBufferDesiredColorPrimaries);
  CFDictionaryAddValue(Mutable, CFSTR("VideoCompositionProcessor_DestinationPixelBufferDesiredTransferFunction"), fvcp_outputConformer_setDestinationPixelBufferDesiredTransferFunction);
  CFDictionaryAddValue(Mutable, CFSTR("VideoCompositionProcessor_PixelBufferPoolSharingID"), fvcp_outputConformer_setPixelBufferPoolSharingID);
  fvcp_outputConformer_setPropertyDispatchDictionary = (uint64_t)Mutable;
}

uint64_t fvcp_outputConformer_setDestinationPixelBufferDesiredAttributes(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4;
  const void *v5;
  const void *v6;
  const void *v7;

  if (cf)
  {
    v4 = CFGetTypeID(cf);
    if (v4 != CFDictionaryGetTypeID())
      return FigSignalErrorAt();
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 24));
  v5 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = cf;
  if (cf)
    CFRetain(cf);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 88);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 88) = 0;
  }
  v7 = *(const void **)(a1 + 96);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 96) = 0;
  }
  ++*(_DWORD *)(a1 + 32);
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 24));
  return 0;
}

uint64_t fvcp_outputConformer_setDestinationPixelTransferProperties(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4;
  const void *v5;
  const void *v6;
  const void *v7;

  if (cf)
  {
    v4 = CFGetTypeID(cf);
    if (v4 != CFDictionaryGetTypeID())
      return FigSignalErrorAt();
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 24));
  v5 = *(const void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = cf;
  if (cf)
    CFRetain(cf);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 88);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 88) = 0;
  }
  v7 = *(const void **)(a1 + 96);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 96) = 0;
  }
  ++*(_DWORD *)(a1 + 32);
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 24));
  return 0;
}

uint64_t fvcp_outputConformer_setDestinationPixelBufferDesiredYCbCrMatrix(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4;
  const void *v5;
  const void *v6;
  const void *v7;

  if (cf)
  {
    v4 = CFGetTypeID(cf);
    if (v4 != CFStringGetTypeID())
      return FigSignalErrorAt();
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 24));
  v5 = *(const void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = cf;
  if (cf)
    CFRetain(cf);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 88);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 88) = 0;
  }
  v7 = *(const void **)(a1 + 96);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 96) = 0;
  }
  ++*(_DWORD *)(a1 + 32);
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 24));
  return 0;
}

uint64_t fvcp_outputConformer_setDestinationPixelBufferDesiredColorPrimaries(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4;
  const void *v5;
  const void *v6;
  const void *v7;

  if (cf)
  {
    v4 = CFGetTypeID(cf);
    if (v4 != CFStringGetTypeID())
      return FigSignalErrorAt();
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 24));
  v5 = *(const void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = cf;
  if (cf)
    CFRetain(cf);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 88);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 88) = 0;
  }
  v7 = *(const void **)(a1 + 96);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 96) = 0;
  }
  ++*(_DWORD *)(a1 + 32);
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 24));
  return 0;
}

uint64_t fvcp_outputConformer_setDestinationPixelBufferDesiredTransferFunction(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4;
  const void *v5;
  const void *v6;
  const void *v7;

  if (cf)
  {
    v4 = CFGetTypeID(cf);
    if (v4 != CFStringGetTypeID())
      return FigSignalErrorAt();
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 24));
  v5 = *(const void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = cf;
  if (cf)
    CFRetain(cf);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 88);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 88) = 0;
  }
  v7 = *(const void **)(a1 + 96);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 96) = 0;
  }
  ++*(_DWORD *)(a1 + 32);
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 24));
  return 0;
}

uint64_t fvcp_outputConformer_setPixelBufferPoolSharingID(uint64_t a1, const void *a2)
{
  const void *v4;
  const void *v5;
  const void *v6;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 24));
  v4 = *(const void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = a2;
  if (a2)
    CFRetain(a2);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(a1 + 88);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 88) = 0;
  }
  v6 = *(const void **)(a1 + 96);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 96) = 0;
  }
  ++*(_DWORD *)(a1 + 32);
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 24));
  return 0;
}

double fvcp_compositorHost_Init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 128) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void fvcp_compositorHost_Finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  FigVCPCompositorHostInvalidate(a1);
  FigSimpleMutexDestroy();
  dispatch_release(*(dispatch_object_t *)(a1 + 64));
  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 56);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 88);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(a1 + 104);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 120);
  if (v6)
    CFRelease(v6);
}

CFStringRef fvcp_compositorHost_CopyFormattingDesc(uint64_t a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, CFSTR("[FigVCPCompositorHost(%p)] videoCompositor=%p"), a1, *(_QWORD *)(a1 + 40));
}

CFTypeRef fvcp_compositorHost_copyPendingFrameFromArray(uint64_t a1, int a2)
{
  _DWORD *PendingFrameFromArray;
  CFTypeRef v5;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 48));
  PendingFrameFromArray = fvcp_compositorHost_getPendingFrameFromArray(a1, a2, 0);
  if (PendingFrameFromArray)
    v5 = CFRetain(PendingFrameFromArray);
  else
    v5 = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 48));
  return v5;
}

_DWORD *fvcp_compositorHost_getPendingFrameFromArray(uint64_t a1, int a2, CFIndex *a3)
{
  int v6;
  BOOL v7;
  CFIndex v8;
  uint64_t v9;
  _DWORD *result;

  v6 = FigAtomicAdd32();
  if (*(_QWORD *)(a1 + 56))
    v7 = v6 < 1;
  else
    v7 = 1;
  if (v7)
    return 0;
  v8 = 0;
  v9 = v6;
  while (1)
  {
    result = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), v8);
    if (result[4] == a2)
      break;
    if (v9 == ++v8)
      return 0;
  }
  if (a3)
    *a3 = v8;
  return result;
}

void fvcp_compositorHost_initProcessorToCompositorPropertyKeyMapping()
{
  __CFDictionary *Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, CFSTR("VideoCompositionProcessor_RenderScale"), CFSTR("RenderScale"));
  CFDictionarySetValue(Mutable, CFSTR("VideoCompositionProcessor_ClientPID"), CFSTR("ClientPID"));
  CFDictionarySetValue(Mutable, CFSTR("VideoCompositionProcessor_ThrottleForBackground"), CFSTR("ThrottleForBackground"));
  CFDictionarySetValue(Mutable, CFSTR("VideoCompositionProcessor_SourcePixelBufferAttributes"), CFSTR("SourcePixelBufferAttributes"));
  CFDictionarySetValue(Mutable, CFSTR("VideoCompositionProcessor_DestinationPixelBufferDesiredAttributes"), CFSTR("DestinationPixelBufferDesiredAttributes"));
  CFDictionarySetValue(Mutable, CFSTR("VideoCompositionProcessor_CompositionYCbCrMatrix"), CFSTR("DestinationPixelBufferDesiredYCbCrMatrix"));
  CFDictionarySetValue(Mutable, CFSTR("VideoCompositionProcessor_CompositionColorPrimaries"), CFSTR("DestinationPixelBufferDesiredColorPrimaries"));
  CFDictionarySetValue(Mutable, CFSTR("VideoCompositionProcessor_CompositionTransferFunction"), CFSTR("DestinationPixelBufferDesiredTransferFunction"));
  CFDictionarySetValue(Mutable, CFSTR("VideoCompositionProcessor_PixelBufferPoolSharingID"), CFSTR("PixelBufferPoolSharingID"));
  CFDictionarySetValue(Mutable, CFSTR("VideoCompositionProcessorProperty_LoopTimeRange"), CFSTR("LoopTimeRange"));
  CFDictionarySetValue(Mutable, CFSTR("SourceColorConformanceCapabilityLevel"), CFSTR("SourceColorConformanceCapabilityLevel"));
  fvcp_compositorHost_processorToCompositorPropertyKeyMapping = (uint64_t)Mutable;
}

void fvcp_addEntriesToDictionaryAux(void *key, void *value, CFMutableDictionaryRef theDict)
{
  CFDictionarySetValue(theDict, key, value);
}

uint64_t FigMetricItemPlaybackEndEventDeserializeAndCopy(uint64_t a1, uint64_t a2)
{
  uint64_t CMTime;
  uint64_t AllocatorForMedia;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  CFTypeRef v9;
  CFTypeRef cf;
  __int128 v11;
  uint64_t v12;

  v11 = *MEMORY[0x1E0CA2E18];
  v12 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v9 = 0;
  cf = 0;
  if (a1 && a2)
  {
    CMTime = FigXPCMessageGetCMTime();
    if (!(_DWORD)CMTime)
    {
      CMTime = FigXPCMessageCopyCFDate();
      if (!(_DWORD)CMTime)
      {
        CMTime = FigXPCMessageCopyCFString();
        if (!(_DWORD)CMTime)
        {
          AllocatorForMedia = FigGetAllocatorForMedia();
          v7 = v11;
          v8 = v12;
          CMTime = FigMetricItemPlaybackEndEventCreate(AllocatorForMedia, &v7, cf, v9, a2);
        }
      }
    }
  }
  else
  {
    CMTime = FigSignalErrorAt();
  }
  v5 = CMTime;
  if (cf)
    CFRelease(cf);
  if (v9)
    CFRelease(v9);
  return v5;
}

uint64_t FigMetricItemPlaybackEndEventCreate(const __CFAllocator *a1, __int128 *a2, const void *a3, const void *a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t DerivedStorage;
  uint64_t v12;
  void *v13;
  CFAbsoluteTime Current;
  __int128 v15;
  CFTypeRef v16;

  if (!a5)
    return FigSignalErrorAt();
  FigMetricEventGetClassID();
  v10 = CMDerivedObjectCreate();
  if (!(_DWORD)v10)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v12 = FigSimpleMutexCreate();
    *(_QWORD *)(DerivedStorage + 56) = v12;
    if (v12)
    {
      *(_BYTE *)DerivedStorage = 1;
      *(_QWORD *)(DerivedStorage + 8) = 13;
      if (a3)
      {
        v13 = (void *)CFRetain(a3);
      }
      else
      {
        Current = CFAbsoluteTimeGetCurrent();
        v13 = CFDateCreate(a1, Current);
      }
      *(_QWORD *)(DerivedStorage + 16) = v13;
      v15 = *a2;
      *(_QWORD *)(DerivedStorage + 48) = *((_QWORD *)a2 + 2);
      *(_OWORD *)(DerivedStorage + 32) = v15;
      if (a4)
        v16 = CFRetain(a4);
      else
        v16 = 0;
      *(_QWORD *)(DerivedStorage + 24) = v16;
      v10 = FigMetricEventClassInstallEventDeserializeHandler();
      if (!(_DWORD)v10)
        *a5 = 0;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return v10;
}

uint64_t mepe_finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
    CFRelease(v1);
  v2 = *(const void **)(DerivedStorage + 24);
  if (v2)
    CFRelease(v2);
  return FigSimpleMutexDestroy();
}

CFStringRef mepe_copyDebugDesc(uint64_t a1)
{
  const __CFAllocator *AllocatorForMedia;

  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("[FigMetricItemPlaybackEndEvent %p]"), a1);
}

void mepe_setImmutable()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 56));
  *(_BYTE *)DerivedStorage = 0;
  JUMPOUT(0x19402EF04);
}

uint64_t mepe_isMutable()
{
  unsigned __int8 *DerivedStorage;
  uint64_t v1;

  DerivedStorage = (unsigned __int8 *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*((_QWORD *)DerivedStorage + 7));
  v1 = *DerivedStorage;
  MEMORY[0x19402EF04](*((_QWORD *)DerivedStorage + 7));
  return v1;
}

uint64_t mepe_getMetricEventID()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
}

uint64_t mepe_getDate()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
}

CFTypeRef mepe_copySessionID()
{
  uint64_t DerivedStorage;
  const void *v1;
  CFTypeRef v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 56));
  v1 = *(const void **)(DerivedStorage + 24);
  if (v1)
    v2 = CFRetain(v1);
  else
    v2 = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 56));
  return v2;
}

uint64_t mepe_setSessionID(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 56));
  if (*(_BYTE *)DerivedStorage)
  {
    v4 = *(const void **)(DerivedStorage + 24);
    *(_QWORD *)(DerivedStorage + 24) = a2;
    if (a2)
      CFRetain(a2);
    if (v4)
      CFRelease(v4);
    v5 = 0;
  }
  else
  {
    v5 = FigSignalErrorAt();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 56));
  return v5;
}

void mepe_getMediaTime(uint64_t a1@<X8>)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 56));
  *(_OWORD *)a1 = *(_OWORD *)(DerivedStorage + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(DerivedStorage + 48);
  JUMPOUT(0x19402EF04);
}

uint64_t mepe_setMediaTime(uint64_t a1, __int128 *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  __int128 v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 56));
  if (*(_BYTE *)DerivedStorage)
  {
    v4 = 0;
    v5 = *a2;
    *(_QWORD *)(DerivedStorage + 48) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(DerivedStorage + 32) = v5;
  }
  else
  {
    v4 = FigSignalErrorAt();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 56));
  return v4;
}

uint64_t mepe_serialize(uint64_t a1, void *a2)
{
  uint64_t (*v4)(uint64_t);
  int64_t v5;
  void (*v6)(__int128 *__return_ptr, uint64_t);
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t (*v9)(uint64_t);
  const void *v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;

  if (a1 && a2)
  {
    v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v4)
      v5 = v4(a1);
    else
      v5 = -12782;
    xpc_dictionary_set_int64(a2, "EventID", v5);
    v6 = *(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
    if (v6)
    {
      v6(&v13, a1);
    }
    else
    {
      v13 = *MEMORY[0x1E0CA2E18];
      v14 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    }
    v7 = FigXPCMessageSetCMTime();
    if (!(_DWORD)v7)
    {
      v8 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (v8)
        v8(a1);
      v7 = FigXPCMessageSetCFDate();
      if (!(_DWORD)v7)
      {
        v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
        if (v9)
        {
          v10 = (const void *)v9(a1);
          v11 = FigXPCMessageSetCFString();
          if (v10)
            CFRelease(v10);
          return v11;
        }
        return FigXPCMessageSetCFString();
      }
    }
    return v7;
  }
  return FigSignalErrorAt();
}

void FigHTTPRequestCommonMandatoryRequestStart()
{
  _QWORD block[5];
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  char v4;

  v1 = 0;
  v2 = &v1;
  v3 = 0x2020000000;
  v4 = 0;
  MEMORY[0x19402F294](&gHTTPRequestTrackMandatoryInit, figHTTPRequestTrackMandatoryRunOnce);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __FigHTTPRequestCommonMandatoryRequestStart_block_invoke;
  block[3] = &unk_1E2F91F58;
  block[4] = &v1;
  dispatch_sync((dispatch_queue_t)gMandatoryLevelQueue, block);
  if (*((_BYTE *)v2 + 24))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  _Block_object_dispose(&v1, 8);
}

void sub_192F83FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void figHTTPRequestTrackMandatoryRunOnce()
{
  NSObject *v0;
  dispatch_time_t v1;

  gMandatoryLevelQueue = (uint64_t)dispatch_queue_create("com.apple.coremedia.networkmandatoryactivity", 0);
  v0 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, (dispatch_queue_t)gMandatoryLevelQueue);
  gMandatoryActivityIdleTimer = (uint64_t)v0;
  v1 = dispatch_time(0, 0x7FFFFFFFFFFFFFFFLL);
  dispatch_source_set_timer(v0, v1, 0xFFFFFFFFFFFFFFFFLL, 0);
  dispatch_source_set_event_handler_f((dispatch_source_t)gMandatoryActivityIdleTimer, (dispatch_function_t)figHTTPRequestMandatoryIdleTimer);
  dispatch_resume((dispatch_object_t)gMandatoryActivityIdleTimer);
}

void FigHTTPRequestCommonMandatoryRequestFinish()
{
  MEMORY[0x19402F294](&gHTTPRequestTrackMandatoryInit, figHTTPRequestTrackMandatoryRunOnce);
  dispatch_async((dispatch_queue_t)gMandatoryLevelQueue, &__block_literal_global_103);
}

uint64_t FigHTTPRequestPerformingMandatoryActivity()
{
  uint64_t v0;
  _QWORD block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  char v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v6 = 0;
  MEMORY[0x19402F294](&gHTTPRequestTrackMandatoryInit, figHTTPRequestTrackMandatoryRunOnce);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __FigHTTPRequestPerformingMandatoryActivity_block_invoke;
  block[3] = &unk_1E2F91F58;
  block[4] = &v3;
  dispatch_sync((dispatch_queue_t)gMandatoryLevelQueue, block);
  v0 = *((unsigned __int8 *)v4 + 24);
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_192F84248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigHTTPRequestGetClassID()
{
  if (FigHTTPRequestGetClassID_sFigHTTPGetClassIDOnce != -1)
    dispatch_once_f(&FigHTTPRequestGetClassID_sFigHTTPGetClassIDOnce, &FigHTTPRequestGetClassID_sFigHTTPRequestClassID, (dispatch_function_t)FigHTTPRequestGetClassIDDispatchOnce);
  return FigHTTPRequestGetClassID_sFigHTTPRequestClassID;
}

uint64_t FigHTTPRequestGetClassIDDispatchOnce(uint64_t *a1)
{
  uint64_t result;

  result = FigHTTPRequestNSURLSessionGetClassID();
  *a1 = result;
  return result;
}

uint64_t FigHTTPRequestCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const __CFDictionary *a7, unsigned int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  CFTypeID TypeID;
  const void *Value;
  const void *v19;
  void (*v20)(const void *, uint64_t, _QWORD, CFTypeRef *);
  CFTypeRef v21;
  uint64_t (*v22)(CFTypeRef, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const __CFDictionary *, _QWORD, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  CFTypeRef cf;
  _OWORD v32[8];

  cf = 0;
  if (!a7)
    return 4294954516;
  TypeID = CFDictionaryGetTypeID();
  if (TypeID == CFGetTypeID(a7))
  {
    Value = CFDictionaryGetValue(a7, CFSTR("FHRP_StorageSession"));
    if (Value)
    {
      v19 = Value;
      v20 = *(void (**)(const void *, uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 40);
      if (!v20)
        return 4294954510;
      v20(v19, a6, 0, &cf);
      v21 = cf;
      if (!cf)
        return 4294954510;
      v22 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const __CFDictionary *, _QWORD, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v22)
      {
        memset(v32, 0, 112);
        v23 = v22(v21, a1, a2, a3, a4, a5, a7, a8, v32, a9, a10, a11, a12, a13, a14, a15);
      }
      else
      {
        v23 = 4294954514;
      }
      if (cf)
        CFRelease(cf);
      return v23;
    }
    return 4294954516;
  }
  return FigSignalErrorAt();
}

uint64_t figHTTPRequestMandatoryIdleTimer()
{
  uint64_t result;

  if (!gActiveMandatoryConnectionCount && gMandatoryConnectionCountAtIdle == gMandatoryConnectionCount)
  {
    gMandatoryConnectionCountAtIdle = 0;
    CMNotificationCenterGetDefaultLocalCenter();
    return CMNotificationCenterPostNotification();
  }
  return result;
}

uint64_t FigReportingModeratorGetClassID()
{
  MEMORY[0x19402F294](&FigReportingModeratorGetClassID_sRegisterFigReportingModeratorOnce, RegisterFigReportingModeratorBaseType);
  return sFigReportingModeratorClassID;
}

uint64_t RegisterFigReportingModeratorBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFStringRef FigReportingModeratorCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigReportingModerator %p]"), a1);
}

uint64_t FigTTMLSerializerCreateForByteStream(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = FigTTMLGetLibXMLAccess();
  if (!a2)
    goto LABEL_8;
  if (!a3)
  {
    v6 = FigSignalErrorAt();
    goto LABEL_10;
  }
  FigTTMLSerializerGetClassID();
  v6 = CMDerivedObjectCreate();
  if ((_DWORD)v6)
  {
LABEL_10:
    v10 = v6;
    a2 = 0;
    goto LABEL_7;
  }
  FigBytePumpGetFigBaseObject(0);
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  *DerivedStorage = CFRetain(a2);
  v8 = (*(uint64_t (**)(uint64_t (*)(uint64_t), uint64_t (*)(), _QWORD, _QWORD))(v5 + 136))(figTTMLSerializerForByteStream_WriteToByteStream, figTTMLSerializerForByteStream_CloseByteStream, 0, 0);
  a2 = (const void *)v8;
  if (!v8 || (v9 = (*(uint64_t (**)(uint64_t))(v5 + 144))(v8)) == 0)
  {
LABEL_8:
    v10 = FigSignalErrorAt();
    goto LABEL_7;
  }
  a2 = 0;
  v10 = 0;
  DerivedStorage[1] = v9;
  *a3 = 0;
LABEL_7:
  (*(void (**)(const void *))(v5 + 152))(a2);
  (*(void (**)(_QWORD))(v5 + 160))(0);
  return v10;
}

uint64_t figTTMLSerializerForByteStream_WriteToByteStream(uint64_t a1)
{
  FigBytePumpGetFigBaseObject(a1);
  CMBaseObjectGetDerivedStorage();
  if (CMByteStreamAppend())
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t figTTMLSerializerForByteStream_CloseByteStream()
{
  return 0;
}

uint64_t figTTMLSerializerForByteStream_Invalidate(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v2;
  uint64_t CMBaseObject;
  uint64_t v4;
  void (*v5)(uint64_t);

  FigBytePumpGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v2 = FigTTMLGetLibXMLAccess();
  if (FigAtomicCompareAndSwap32())
  {
    (*(void (**)(_QWORD))(v2 + 176))(*(_QWORD *)(DerivedStorage + 8));
    (*(void (**)(_QWORD))(v2 + 160))(*(_QWORD *)(DerivedStorage + 8));
    CMBaseObject = CMByteStreamGetCMBaseObject();
    if (CMBaseObject)
    {
      v4 = CMBaseObject;
      v5 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v5)
        v5(v4);
    }
  }
  return 0;
}

void figTTMLSerializerForByteStream_Finalize(uint64_t a1)
{
  CFTypeRef *DerivedStorage;
  uint64_t v3;
  CFTypeRef *v4;

  FigBytePumpGetFigBaseObject(a1);
  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  figTTMLSerializerForByteStream_Invalidate(a1);
  if (*DerivedStorage)
    CFRelease(*DerivedStorage);
  v3 = 0;
  v4 = DerivedStorage + 3;
  do
  {
    free((void *)v4[v3]);
    v3 += 2;
  }
  while (v3 != 32);
}

CFStringRef figTTMLSerializerForByteStream_CopyDebugDesc(uint64_t a1)
{
  _QWORD *DerivedStorage;

  FigBytePumpGetFigBaseObject(a1);
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("FigTTMLSerializerForByteStream: %@"), *DerivedStorage);
}

uint64_t figTTMLSerializerForByteStream_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t *v8;
  uint64_t v9;

  if (!a1 || !a2 || !a4)
    return FigSignalErrorAt();
  FigBytePumpGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("UseSingleQuote")))
  {
    result = 0;
    v8 = (uint64_t *)MEMORY[0x1E0C9AE50];
    if (!*(_BYTE *)(DerivedStorage + 16))
      v8 = (uint64_t *)MEMORY[0x1E0C9AE40];
    v9 = *v8;
  }
  else
  {
    v9 = 0;
    result = 4294954512;
  }
  *a4 = v9;
  return result;
}

uint64_t figTTMLSerializerForByteStream_SetProperty(uint64_t a1, CFTypeRef cf1, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  CFTypeID v7;
  int Value;
  uint64_t v9;
  uint64_t result;

  if (cf1 && a3)
  {
    if (!CFEqual(cf1, CFSTR("UseSingleQuote")))
      return 4294954512;
    FigBytePumpGetFigBaseObject(a1);
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v6 = FigTTMLGetLibXMLAccess();
    v7 = CFGetTypeID(a3);
    if (v7 == CFBooleanGetTypeID())
    {
      Value = CFBooleanGetValue((CFBooleanRef)a3);
      v9 = Value ? 39 : 34;
      if ((*(unsigned int (**)(_QWORD, uint64_t))(v6 + 224))(*(_QWORD *)(DerivedStorage + 8), v9) != -1)
      {
        result = 0;
        *(_BYTE *)(DerivedStorage + 16) = Value;
        return result;
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t figTTMLSerializerForByteStream_StartElement(uint64_t a1, const __CFString *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, const char *);
  uint64_t v7;
  const char *XMLStringFromCFString;

  FigBytePumpGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = FigTTMLGetLibXMLAccess();
  if (CFEqual(a2, CFSTR("tt"))
    && (*(unsigned int (**)(_QWORD, const char *, _QWORD, _QWORD))(v5 + 168))(*(_QWORD *)(DerivedStorage + 8), "1.0", 0, 0) == -1)
  {
    return FigSignalErrorAt();
  }
  v6 = *(unsigned int (**)(uint64_t, const char *))(v5 + 192);
  v7 = *(_QWORD *)(DerivedStorage + 8);
  XMLStringFromCFString = getXMLStringFromCFString(a1, a2);
  if (v6(v7, XMLStringFromCFString) == -1)
    return FigSignalErrorAt();
  else
    return 0;
}

uint64_t figTTMLSerializerForByteStream_SetAttribute(uint64_t a1, const __CFString *a2, const __CFString *a3)
{
  uint64_t DerivedStorage;
  unsigned int (*v7)(uint64_t, const char *, const char *);
  uint64_t v8;
  const char *XMLStringFromCFString;
  const char *v10;

  FigBytePumpGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = *(unsigned int (**)(uint64_t, const char *, const char *))(FigTTMLGetLibXMLAccess() + 232);
  v8 = *(_QWORD *)(DerivedStorage + 8);
  XMLStringFromCFString = getXMLStringFromCFString(a1, a2);
  v10 = getXMLStringFromCFString(a1, a3);
  if (v7(v8, XMLStringFromCFString, v10) == -1)
    return FigSignalErrorAt();
  else
    return 0;
}

uint64_t figTTMLSerializerForByteStream_EndElement(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v2;

  FigBytePumpGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v2 = FigTTMLGetLibXMLAccess();
  if ((*(unsigned int (**)(_QWORD))(v2 + 200))(*(_QWORD *)(DerivedStorage + 8)) == -1)
    return FigSignalErrorAt();
  else
    return 0;
}

uint64_t figTTMLSerializerForByteStream_AddText(uint64_t a1, const __CFString *a2)
{
  uint64_t DerivedStorage;
  unsigned int (*v5)(uint64_t, const char *);
  uint64_t v6;
  const char *XMLStringFromCFString;

  FigBytePumpGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(unsigned int (**)(uint64_t, const char *))(FigTTMLGetLibXMLAccess() + 208);
  v6 = *(_QWORD *)(DerivedStorage + 8);
  XMLStringFromCFString = getXMLStringFromCFString(a1, a2);
  if (v5(v6, XMLStringFromCFString) == -1)
    return FigSignalErrorAt();
  else
    return 0;
}

uint64_t figTTMLSerializerForByteStream_Flush(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v2;

  FigBytePumpGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v2 = FigTTMLGetLibXMLAccess();
  if ((*(unsigned int (**)(_QWORD))(v2 + 216))(*(_QWORD *)(DerivedStorage + 8)) == -1)
    return FigSignalErrorAt();
  else
    return 0;
}

const char *getXMLStringFromCFString(uint64_t a1, const __CFString *a2)
{
  uint64_t DerivedStorage;
  int v5;
  uint64_t v6;
  CFIndex Length;
  int64_t v8;
  uint64_t v9;
  char **v10;
  CFIndex *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t *v14;
  int64_t v15;
  void *v16;
  int64_t v17;
  char *v18;
  CFIndex v20;

  FigBytePumpGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(_DWORD *)(DerivedStorage + 20);
  *(_DWORD *)(DerivedStorage + 20) = v5 + 1;
  v6 = v5 & 0xF;
  Length = CFStringGetLength(a2);
  v8 = Length + 1;
  v9 = DerivedStorage + 16 * v6;
  v10 = (char **)(v9 + 24);
  v11 = (CFIndex *)(v9 + 32);
  v12 = 16 * Length;
  v20 = Length;
  while (1)
  {
    FigBytePumpGetFigBaseObject(a1);
    v13 = CMBaseObjectGetDerivedStorage() + 16 * v6;
    v15 = *(_QWORD *)(v13 + 32);
    v14 = (int64_t *)(v13 + 32);
    if (v15 < v8)
    {
      v16 = malloc_type_malloc(v8, 0x416D0F9uLL);
      if (v16)
      {
        v17 = (int64_t)v16;
        free((void *)*(v14 - 1));
        *(v14 - 1) = v17;
        Length = v20;
        *v14 = v8;
      }
      else
      {
        FigSignalErrorAt();
      }
    }
    if (CFStringGetCString(a2, *v10, *v11, 0x8000100u))
      break;
    v8 += Length;
    if (v8 > v12)
    {
      v18 = 0;
      goto LABEL_10;
    }
  }
  v18 = *v10;
LABEL_10:
  if (v18)
    return v18;
  else
    return "";
}

uint64_t FigCPECryptorCreateCryptorFromSerializedRecipe(const void *a1, CFDataRef theData, _QWORD *a3)
{
  const UInt8 *BytePtr;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t result;
  uint64_t v11;

  v11 = 0;
  BytePtr = CFDataGetBytePtr(theData);
  if (CFDataGetLength(theData) != 24)
    return 4294949724;
  v7 = *(_QWORD *)BytePtr;
  v8 = *((_DWORD *)BytePtr + 2);
  v9 = *((_DWORD *)BytePtr + 4);
  switch(v9)
  {
    case 3:
      result = FigPKDMSECPELimitedCryptorCreateWithExternalProtectionMethods(v7, v8, (uint64_t)a1, &v11);
      if ((_DWORD)result)
        return result;
      break;
    case 2:
      result = FigPKDCPELimitedCryptorCreateWithExternalProtectionMethods(v7, v8, (uint64_t)a1, &v11);
      if ((_DWORD)result)
        return result;
      break;
    case 1:
      result = FigFairPlayCPELimitedCryptorCreateWithExternalProtectionMethods(v7, v8, a1, &v11);
      if ((_DWORD)result)
        return result;
      break;
    default:
      result = 4294949726;
      break;
  }
  *a3 = v11;
  return result;
}

uint64_t FigMediaProcessorCreateForCaptionConversionWithFormatWriter(uint64_t a1, int a2, int a3, const void *a4, const void *a5, uint64_t a6, __int128 *a7, uint64_t a8, int a9, uint64_t *a10)
{
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  CFTypeRef v23;
  CFTypeRef v24;
  CFTypeRef cf;
  const void *v26;

  v26 = 0;
  v24 = 0;
  cf = 0;
  v23 = 0;
  if (a4 && a5)
  {
    v16 = FigSampleBufferProcessorCreateForCaptionConverter(a1, a2, a3, 0, &v26);
    if (!(_DWORD)v16)
    {
      v16 = FigSampleBufferProviderCreateForBufferQueue(a1, a4, &cf);
      if (!(_DWORD)v16)
      {
        v21 = *a7;
        v22 = *((_QWORD *)a7 + 2);
        v19 = *(_OWORD *)a8;
        v20 = *(_QWORD *)(a8 + 16);
        v16 = FigSampleBufferConsumerCreateForFormatWriter(a5, a6, (uint64_t)&v21, &v19, &v24);
        if (!(_DWORD)v16)
        {
          v16 = FigActivitySchedulerCreateForNewThread(a1, a9, CFSTR("com.apple.coremedia.mediaprocessor.captionconversion"), &v23);
          if (!(_DWORD)v16)
            v16 = FigMediaProcessorCreate(a1, v26, cf, v24, v23, a10);
        }
      }
    }
  }
  else
  {
    v16 = FigSignalErrorAt();
  }
  v17 = v16;
  if (cf)
    CFRelease(cf);
  if (v23)
    CFRelease(v23);
  if (v26)
    CFRelease(v26);
  if (v24)
    CFRelease(v24);
  return v17;
}

uint64_t FigMediaProcessorCreateForCaptionConversionWithBufferQueue(uint64_t a1, int a2, int a3, const void *a4, uint64_t a5, uint64_t a6, __int128 *a7, __int128 *a8, int a9, uint64_t *a10)
{
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  CFTypeRef cf;
  CFTypeRef v23;
  CFTypeRef v24;
  const void *v25;

  v24 = 0;
  v25 = 0;
  cf = 0;
  v23 = 0;
  if (a4 && a5)
  {
    v15 = FigSampleBufferProcessorCreateForCaptionConverter(a1, a2, a3, 0, &v25);
    if (!(_DWORD)v15)
    {
      v15 = FigSampleBufferProviderCreateForBufferQueue(a1, a4, &v24);
      if (!(_DWORD)v15)
      {
        v20 = *a7;
        v21 = *((_QWORD *)a7 + 2);
        v18 = *a8;
        v19 = *((_QWORD *)a8 + 2);
        v15 = FigSampleBufferConsumerCreateForBufferQueue(a5, (uint64_t)&v20, (uint64_t)&v18, &v23);
        if (!(_DWORD)v15)
        {
          v15 = FigActivitySchedulerCreateForNewThread(a1, a9, CFSTR("com.apple.coremedia.mediaprocessor.captionconversion"), &cf);
          if (!(_DWORD)v15)
            v15 = FigMediaProcessorCreate(a1, v25, v24, v23, cf, a10);
        }
      }
    }
  }
  else
  {
    v15 = FigSignalErrorAt();
  }
  v16 = v15;
  if (v24)
    CFRelease(v24);
  if (cf)
    CFRelease(cf);
  if (v25)
    CFRelease(v25);
  if (v23)
    CFRelease(v23);
  return v16;
}

uint64_t AudioSampleBufferSplitterCreate(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t result;

  if (!a1)
    return FigSignalErrorAt();
  v2 = malloc_type_calloc(1uLL, 0x58uLL, 0x1000040CF7A7506uLL);
  if (!v2)
    return 4294951316;
  v3 = v2;
  result = 0;
  *a1 = v3;
  return result;
}

uint64_t AudioSampleBufferSplitterSetSplitMethod(_DWORD *a1, int a2)
{
  if (!a1)
    return FigSignalErrorAt();
  *a1 = a2;
  return 0;
}

uint64_t AudioSampleBufferSplitterSetMaxNumberOfSplitSampleBuffers(uint64_t a1, uint64_t a2)
{
  if (!a1 || a2 < 0)
    return FigSignalErrorAt();
  *(_QWORD *)(a1 + 80) = a2;
  return 0;
}

uint64_t AudioSampleBufferSplitterSetInitialSegmentStartTimeAndSegmentInterval(uint64_t a1, __int128 *a2, CMTime *a3)
{
  uint64_t result;
  __int128 v7;
  __int128 v8;
  CMTime v9;
  CMTime time1;

  if (!a1 || (*((_DWORD *)a2 + 3) & 0x1D) != 1)
    return FigSignalErrorAt();
  if ((a3->flags & 0x1D) != 1)
    return FigSignalErrorAt();
  time1 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v9 = *a3;
  if ((CMTimeCompare(&time1, &v9) & 0x80000000) == 0)
    return FigSignalErrorAt();
  result = 0;
  v7 = *a2;
  *(_QWORD *)(a1 + 20) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 4) = v7;
  v8 = *(_OWORD *)&a3->value;
  *(_QWORD *)(a1 + 44) = a3->epoch;
  *(_OWORD *)(a1 + 28) = v8;
  return result;
}

uint64_t AudioSampleBufferSplitterGetInitialSegmentStartTimeAndSegmentInterval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;

  if (!a1)
    return FigSignalErrorAt();
  if (a2)
  {
    v3 = *(_OWORD *)(a1 + 4);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 20);
    *(_OWORD *)a2 = v3;
  }
  if (a3)
  {
    v4 = *(_OWORD *)(a1 + 28);
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 44);
    *(_OWORD *)a3 = v4;
  }
  return 0;
}

uint64_t AudioSampleBufferSplitterCreateSplitSampleBufferArray(uint64_t a1, CMSampleBufferRef sbuf, int *a3, __CFArray **a4)
{
  __CFArray **v5;
  const opaqueCMFormatDescription *FormatDescription;
  int v9;
  CMItemCount NumSamples;
  uint64_t OutputSampleTimingInfoArray;
  size_t v12;
  malloc_type_id_t v13;
  __CFArray **v14;
  CMItemCount v15;
  const __CFArray *SampleAttachmentsArray;
  const __CFArray *v17;
  CFIndex Count;
  CMItemCount v19;
  const opaqueCMFormatDescription *v20;
  const AudioFormatListItem *RichestDecodableFormat;
  CMSampleTimingInfo *v22;
  const __CFAllocator *v23;
  __CFArray *v24;
  __CFArray *v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  __CFArray *v29;
  CFIndex v30;
  CFIndex i;
  const __CFAllocator *v32;
  uint64_t v33;
  CFIndex v34;
  const __CFAllocator *v35;
  CMSampleTimingInfo *v36;
  uint64_t v37;
  const __CFAllocator *v38;
  uint64_t v39;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v41;
  CFIndex v42;
  _OWORD *v43;
  CMTime *v44;
  int32_t v45;
  CMTimeValue v46;
  CMTimeValue v47;
  CMTimeFlags flags;
  CMTimeEpoch v49;
  CMTimeScale v50;
  CMTimeEpoch v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  CMTimeEpoch epoch;
  CFIndex v56;
  CMSampleTimingInfo *v57;
  __int128 v58;
  CFIndex v59;
  CMTimeValue v60;
  CMSampleTimingInfo *v61;
  __int128 v62;
  CFIndex v63;
  __int128 v64;
  const __CFAllocator *v65;
  uint64_t v66;
  uint64_t v67;
  CMSampleTimingInfo *v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  CMSampleTimingInfo *v75;
  int v76;
  __int128 v77;
  __int128 v78;
  __CFArray **v79;
  __int128 v80;
  CMSampleTimingInfo *v81;
  CFStringRef v82;
  CFStringRef v83;
  __int128 v84;
  CFRange v85;
  __int128 v86;
  CFStringRef v87;
  CFStringRef v88;
  __int128 v89;
  CFStringRef v90;
  CMItemCount v91;
  __int128 v92;
  CMSampleTimingInfo *v93;
  uint64_t v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  CFIndex v99;
  uint64_t v100;
  int *v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __CFArray *theArray;
  CMTimeValue value;
  CMTimeEpoch v108;
  __int128 v109;
  CMSampleTimingInfo *v110;
  CMSampleBufferRef cf;
  CMTime duration;
  CMTime v113;
  CMTime v114;
  CMTime v115;
  CMSampleBufferRef sampleBufferOut;
  CMTime v117;
  CMTime time2;
  CMTime time1;
  CMSampleTimingInfo lhs;
  CMTime rhs;
  CMTimeValue v122;
  CMTimeScale timescale;
  uint64_t v124;
  CFRange v125;
  CFRange v126;
  CFRange v127;
  CFRange v128;
  CFRange v129;

  v124 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return FigSignalErrorAt();
  if (!sbuf)
    return FigSignalErrorAt();
  v5 = a4;
  if (!a4)
    return FigSignalErrorAt();
  FormatDescription = CMSampleBufferGetFormatDescription(sbuf);
  if (CMFormatDescriptionGetMediaType(FormatDescription) != 1936684398)
    return FigSignalErrorAt();
  v9 = *(_DWORD *)a1;
  cf = sbuf;
  if (*(_DWORD *)a1 != 3)
  {
    if (v9 != 2)
    {
      if (v9 != 1)
      {
        v27 = FigSignalErrorAt();
        goto LABEL_121;
      }
      if ((*(_BYTE *)(a1 + 16) & 1) != 0 && (*(_BYTE *)(a1 + 40) & 1) != 0)
      {
        if ((*(_BYTE *)(a1 + 64) & 1) == 0)
        {
          memset(&lhs, 0, 24);
          CMSampleBufferGetOutputPresentationTimeStamp(&lhs.duration, sbuf);
          time1 = lhs.duration;
          asbs_calculateNextCumulatedSegmentInterval(a1, &time1, (uint64_t)&rhs);
          *(CMTime *)(a1 + 52) = rhs;
        }
        v102 = a1;
        NumSamples = CMSampleBufferGetNumSamples(sbuf);
        memset(&time2, 0, sizeof(time2));
        CMSampleBufferGetOutputPresentationTimeStamp(&time2, sbuf);
        memset(&v117, 0, sizeof(v117));
        CMSampleBufferGetOutputDuration(&v117, sbuf);
        sampleBufferOut = 0;
        lhs.duration.value = 0;
        OutputSampleTimingInfoArray = CMSampleBufferGetOutputSampleTimingInfoArray(sbuf, 0, 0, &lhs.duration.value);
        if ((_DWORD)OutputSampleTimingInfoArray)
        {
          v27 = OutputSampleTimingInfoArray;
          v36 = 0;
          goto LABEL_209;
        }
        if (lhs.duration.value)
        {
          if (lhs.duration.value > 0x38E38E38E38E38EuLL)
            goto LABEL_71;
          v12 = 72 * lhs.duration.value;
          if (!(72 * lhs.duration.value))
            goto LABEL_71;
          v13 = 1556728742;
        }
        else
        {
          v12 = 0;
          v13 = 1270757447;
        }
        v36 = (CMSampleTimingInfo *)malloc_type_malloc(v12, v13);
        if (v36)
        {
          v37 = CMSampleBufferGetOutputSampleTimingInfoArray(sbuf, lhs.duration.value, v36, 0);
          if (!(_DWORD)v37)
          {
            value = lhs.duration.value;
LABEL_73:
            Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
            v41 = Mutable;
            if (!Mutable)
            {
              v27 = FigSignalErrorAt();
              goto LABEL_115;
            }
            v101 = a3;
            if (NumSamples < 1)
            {
LABEL_113:
              v27 = 0;
              *v5 = v41;
              v41 = 0;
              goto LABEL_114;
            }
            v42 = 0;
            v43 = (_OWORD *)(v102 + 52);
            v109 = *MEMORY[0x1E0CA2E18];
            v108 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
            v44 = (CMTime *)MEMORY[0x1E0CA2E68];
            theArray = Mutable;
            while (1)
            {
              memset(&v115, 0, sizeof(v115));
              lhs.duration = time2;
              rhs = *(CMTime *)(v102 + 4);
              CMTimeSubtract(&v115, &lhs.duration, &rhs);
              memset(&v114, 0, sizeof(v114));
              lhs.duration = v115;
              rhs = v117;
              CMTimeAdd(&v114, &lhs.duration, &rhs);
              *(_OWORD *)&v113.value = v109;
              v113.epoch = v108;
              *(_OWORD *)&lhs.duration.value = *v43;
              lhs.duration.epoch = *(_QWORD *)(v102 + 68);
              rhs = v114;
              v45 = CMTimeCompare(&lhs.duration, &rhs);
              if (v45 <= 0)
              {
                *(_OWORD *)&lhs.duration.value = *v43;
                lhs.duration.epoch = *(_QWORD *)(v102 + 68);
                rhs = v115;
                CMTimeSubtract(&v113, &lhs.duration, &rhs);
              }
              else
              {
                v113 = v117;
              }
              duration = v113;
              v46 = value;
              if (value == 1)
                break;
              v54 = *(_OWORD *)&v44->value;
              *(_OWORD *)&lhs.duration.value = *(_OWORD *)&v44->value;
              epoch = v44->epoch;
              lhs.duration.epoch = epoch;
              if (value <= v42)
              {
                v56 = 0;
                v59 = v42;
                v44 = (CMTime *)MEMORY[0x1E0CA2E68];
                goto LABEL_93;
              }
              v105 = v54;
              v56 = 0;
              v57 = &v36[v42];
              while (1)
              {
                rhs = lhs.duration;
                time1 = duration;
                if ((CMTimeCompare(&rhs, &time1) & 0x80000000) == 0)
                  break;
                rhs = lhs.duration;
                v58 = *(_OWORD *)&v57->duration.value;
                time1.epoch = v57->duration.epoch;
                *(_OWORD *)&time1.value = v58;
                CMTimeAdd(&lhs.duration, &rhs, &time1);
                ++v56;
                ++v57;
                if (value - v42 == v56)
                {
                  v56 = value - v42;
                  break;
                }
              }
              v59 = v56 + v42;
              v44 = (CMTime *)MEMORY[0x1E0CA2E68];
              v54 = v105;
              if (v56 + v42 < NumSamples)
              {
                v46 = value;
LABEL_93:
                *(_OWORD *)&time1.value = v54;
                time1.epoch = epoch;
                v60 = v46 - v59;
                if (v46 > v59)
                {
                  v61 = &v36[v59];
                  do
                  {
                    lhs.duration = time1;
                    v62 = *(_OWORD *)&v61->duration.value;
                    rhs.epoch = v61->duration.epoch;
                    *(_OWORD *)&rhs.value = v62;
                    CMTimeAdd(&time1, &lhs.duration, &rhs);
                    ++v61;
                    --v60;
                  }
                  while (v60);
                  v44 = (CMTime *)MEMORY[0x1E0CA2E68];
                }
LABEL_103:
                *(_OWORD *)&lhs.duration.value = *(_OWORD *)&v44->value;
                lhs.duration.epoch = v44->epoch;
                rhs = time1;
                if (!CMTimeCompare(&lhs.duration, &rhs))
                  v56 = NumSamples - v42;
              }
LABEL_105:
              if (v56 <= 0)
              {
                v66 = FigSignalErrorAt();
LABEL_217:
                v27 = v66;
                v41 = theArray;
LABEL_114:
                a3 = v101;
LABEL_115:
                if (sampleBufferOut)
                  CFRelease(sampleBufferOut);
                if (v41)
                  CFRelease(v41);
                free(v36);
LABEL_120:
                if (!(_DWORD)v27)
                {
LABEL_121:
                  v26 = 0;
                  if (a3)
                    goto LABEL_122;
                }
                return v27;
              }
              v65 = CFGetAllocator(cf);
              v128.location = v42;
              v128.length = v56;
              v66 = CMSampleBufferCopySampleBufferForRange(v65, cf, v128, &sampleBufferOut);
              if ((_DWORD)v66)
                goto LABEL_217;
              lhs.duration = time2;
              v67 = CMSampleBufferSetOutputPresentationTimeStamp(sampleBufferOut, &lhs.duration);
              v41 = theArray;
              if ((_DWORD)v67)
              {
                v27 = v67;
                goto LABEL_114;
              }
              CFArrayAppendValue(theArray, sampleBufferOut);
              memset(&lhs, 0, 24);
              CMSampleBufferGetOutputDuration(&lhs.duration, sampleBufferOut);
              time1 = time2;
              duration = lhs.duration;
              CMTimeAdd(&rhs, &time1, &duration);
              time2 = rhs;
              time1 = v117;
              duration = lhs.duration;
              CMTimeSubtract(&rhs, &time1, &duration);
              v117 = rhs;
              if (sampleBufferOut)
              {
                CFRelease(sampleBufferOut);
                sampleBufferOut = 0;
              }
              if (v45 <= 0)
              {
                time1 = time2;
                asbs_calculateNextCumulatedSegmentInterval(v102, &time1, (uint64_t)&rhs);
                *v43 = *(_OWORD *)&rhs.value;
                *(_QWORD *)(v102 + 68) = rhs.epoch;
              }
              v42 += v56;
              if (v42 >= NumSamples)
                goto LABEL_113;
            }
            v47 = v36->duration.value;
            flags = v36->duration.flags;
            timescale = v36->duration.timescale;
            v122 = v47;
            v49 = v36->duration.epoch;
            *(_OWORD *)&lhs.duration.value = v109;
            lhs.duration.epoch = v108;
            if ((flags & 0x1D) != 1)
              goto LABEL_91;
            v50 = v36->duration.timescale;
            rhs.value = v36->duration.value;
            rhs.timescale = v50;
            rhs.flags = flags;
            rhs.epoch = v49;
            v104 = *MEMORY[0x1E0CA2E68];
            *(_OWORD *)&time1.value = *MEMORY[0x1E0CA2E68];
            v51 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
            time1.epoch = v51;
            if (CMTimeCompare(&rhs, &time1))
            {
              rhs = duration;
              time1.value = v122;
              time1.timescale = timescale;
              time1.flags = flags;
              time1.epoch = v49;
              v52 = CMTimeDivide();
              if ((lhs.duration.flags & 0x1D) == 1)
              {
                *(_OWORD *)&rhs.value = v104;
                rhs.epoch = v51;
                time1 = lhs.duration;
                v53 = CMTimeCompare(&rhs, &time1) >> 31;
              }
              else
              {
                v53 = 0;
              }
              v44 = (CMTime *)MEMORY[0x1E0CA2E68];
              v63 = v53 + v52;
              if (NumSamples - v42 >= v63)
                v56 = v63;
              else
                v56 = NumSamples - v42;
            }
            else
            {
LABEL_91:
              v56 = NumSamples - v42;
              v44 = (CMTime *)MEMORY[0x1E0CA2E68];
            }
            if (NumSamples <= v56 + v42)
              goto LABEL_105;
            time1 = *v44;
            v64 = *(_OWORD *)&v36->duration.value;
            lhs.duration.epoch = v36->duration.epoch;
            *(_OWORD *)&lhs.duration.value = v64;
            CMTimeMultiply(&time1, &lhs.duration, NumSamples - (v56 + v42));
            goto LABEL_103;
          }
          v27 = v37;
LABEL_209:
          free(v36);
          v36 = 0;
          v41 = 0;
          goto LABEL_115;
        }
LABEL_71:
        v39 = FigSignalErrorAt();
        v36 = 0;
        if ((_DWORD)v39)
        {
          v27 = v39;
          v41 = 0;
          goto LABEL_115;
        }
        value = 0;
        goto LABEL_73;
      }
      return FigSignalErrorAt();
    }
    v14 = v5;
    v15 = CMSampleBufferGetNumSamples(sbuf);
    SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(sbuf, 0);
    v17 = SampleAttachmentsArray;
    if (SampleAttachmentsArray)
      Count = CFArrayGetCount(SampleAttachmentsArray);
    else
      Count = 0;
    lhs.duration.value = 0;
    v29 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (v29)
    {
      if (Count)
      {
        if (v15 < 2)
        {
          v30 = 0;
        }
        else
        {
          v30 = 0;
          for (i = 1; i != v15; ++i)
          {
            LOBYTE(rhs.value) = 0;
            if (i < Count)
            {
              CFArrayGetValueAtIndex(v17, i);
              FigCFDictionaryGetBooleanIfPresent();
              if (LOBYTE(rhs.value))
                continue;
            }
            v32 = CFGetAllocator(cf);
            v125.length = i - v30;
            v125.location = v30;
            v33 = CMSampleBufferCopySampleBufferForRange(v32, cf, v125, (CMSampleBufferRef *)&lhs);
            if ((_DWORD)v33)
              goto LABEL_204;
            CFArrayAppendValue(v29, (const void *)lhs.duration.value);
            v30 = i;
            if (lhs.duration.value)
            {
              CFRelease((CFTypeRef)lhs.duration.value);
              lhs.duration.value = 0;
              v30 = i;
            }
          }
        }
        v38 = CFGetAllocator(cf);
        v127.length = v15 - v30;
        v127.location = v30;
        v33 = CMSampleBufferCopySampleBufferForRange(v38, cf, v127, (CMSampleBufferRef *)&lhs);
        if (!(_DWORD)v33)
        {
          CFArrayAppendValue(v29, (const void *)lhs.duration.value);
          if (lhs.duration.value)
          {
            CFRelease((CFTypeRef)lhs.duration.value);
            lhs.duration.value = 0;
          }
          goto LABEL_66;
        }
      }
      else
      {
        if (v15 < 1)
        {
LABEL_66:
          v27 = 0;
          *v14 = v29;
          v29 = 0;
LABEL_67:
          if (lhs.duration.value)
            CFRelease((CFTypeRef)lhs.duration.value);
          if (v29)
            CFRelease(v29);
          goto LABEL_120;
        }
        v34 = 0;
        while (1)
        {
          v35 = CFGetAllocator(sbuf);
          v126.location = v34;
          v126.length = 1;
          v33 = CMSampleBufferCopySampleBufferForRange(v35, sbuf, v126, (CMSampleBufferRef *)&lhs);
          if ((_DWORD)v33)
            break;
          CFArrayAppendValue(v29, (const void *)lhs.duration.value);
          if (lhs.duration.value)
          {
            CFRelease((CFTypeRef)lhs.duration.value);
            lhs.duration.value = 0;
          }
          if (v15 == ++v34)
            goto LABEL_66;
        }
      }
    }
    else
    {
      v33 = FigSignalErrorAt();
    }
LABEL_204:
    v27 = v33;
    goto LABEL_67;
  }
  v19 = CMSampleBufferGetNumSamples(sbuf);
  v117.value = 0;
  v20 = CMSampleBufferGetFormatDescription(sbuf);
  RichestDecodableFormat = CMAudioFormatDescriptionGetRichestDecodableFormat(v20);
  v22 = (CMSampleTimingInfo *)RichestDecodableFormat;
  memset(&rhs, 0, sizeof(rhs));
  if (!RichestDecodableFormat)
  {
    v27 = FigSignalErrorAt();
    v26 = 0;
    v28 = 0;
    goto LABEL_31;
  }
  CMTimeMake(&rhs, RichestDecodableFormat->mASBD.mFramesPerPacket, (int)RichestDecodableFormat->mASBD.mSampleRate);
  v23 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v24 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v25 = v24;
  if (!v24)
    goto LABEL_205;
  if (v22->duration.timescale != 1819304813 && HIDWORD(v22->duration.epoch))
  {
    if (v19 == 1)
    {
      memset(&lhs, 0, sizeof(lhs));
      if (!CMSampleBufferGetSampleTimingInfoArray(sbuf, 1, &lhs, 0))
      {
        if ((lhs.duration.flags & 0x1D) == 1)
        {
          time1 = lhs.duration;
          time2 = rhs;
          v26 = CMTimeCompare(&time1, &time2) > 0;
        }
        else
        {
          v26 = 0;
        }
        CFArrayAppendValue(v25, sbuf);
        goto LABEL_29;
      }
LABEL_205:
      v27 = FigSignalErrorAt();
      v26 = 0;
      v28 = 0;
      v22 = 0;
      goto LABEL_32;
    }
    v22 = (CMSampleTimingInfo *)malloc_type_calloc(v19, 0x48uLL, 0x1000040FF89C88EuLL);
    time2.value = 0;
    if (CMSampleBufferGetSampleTimingInfoArray(sbuf, v19, v22, &time2.value) || time2.value != 1 && time2.value != v19)
    {
      v27 = FigSignalErrorAt();
      v28 = 0;
      goto LABEL_214;
    }
    if (time2.value != 1)
    {
      v103 = a1;
      v28 = malloc_type_calloc(v19, 8uLL, 0x100004000313F17uLL);
      if (v19 < 1)
      {
        v26 = 0;
        if ((*(_QWORD *)(a1 + 80) & 0x8000000000000000) != 0)
          goto LABEL_181;
      }
      else
      {
        v69 = v22;
        v70 = 0;
        v71 = 0;
        v26 = 0;
        v110 = v69;
        while ((v69->duration.flags & 0x1D) == 1)
        {
          v72 = *(_OWORD *)&v69->duration.value;
          lhs.duration.epoch = v69->duration.epoch;
          *(_OWORD *)&lhs.duration.value = v72;
          time1 = rhs;
          if (CMTimeCompare(&lhs.duration, &time1) >= 1)
          {
            v89 = *(_OWORD *)&v69->duration.value;
            lhs.duration.epoch = v69->duration.epoch;
            *(_OWORD *)&lhs.duration.value = v89;
            v90 = CMTimeCopyDescription(v23, &lhs.duration);
            lhs.duration = rhs;
            v88 = CMTimeCopyDescription(v23, &lhs.duration);
            v26 |= 1u;
            if (v90)
              CFRelease(v90);
            if (v88)
LABEL_159:
              CFRelease(v88);
            v76 = 1;
            goto LABEL_171;
          }
          v73 = *(_OWORD *)&v69->duration.value;
          lhs.duration.epoch = v69->duration.epoch;
          *(_OWORD *)&lhs.duration.value = v73;
          time1 = rhs;
          if (CMTimeCompare(&lhs.duration, &time1) < 0)
          {
            v28[v71] = v70;
            if (v71 >= 1)
            {
              *(_OWORD *)&lhs.duration.value = *(_OWORD *)&v69->duration.value;
              lhs.duration.epoch = v69->duration.epoch;
              time1 = rhs;
              if (asbs_SampleDurationIsCuriouslyShortOfItsExpectedDuration(&lhs.duration, (uint64_t)&time1))
              {
                v74 = v28[v71 - 1];
                if (v70 - v74 <= 3)
                {
                  v75 = &v110[v74];
                  *(_OWORD *)&lhs.duration.value = *(_OWORD *)&v75->duration.value;
                  lhs.duration.epoch = v75->duration.epoch;
                  time1 = rhs;
                  if (asbs_SampleDurationIsCuriouslyShortOfItsExpectedDuration(&lhs.duration, (uint64_t)&time1))
                    v26 |= 2u;
                }
              }
            }
            ++v71;
          }
          ++v70;
          ++v69;
          if (v19 == v70)
          {
            v76 = 0;
            goto LABEL_171;
          }
        }
        v86 = *(_OWORD *)&v69->duration.value;
        lhs.duration.epoch = v69->duration.epoch;
        *(_OWORD *)&lhs.duration.value = v86;
        v87 = CMTimeCopyDescription(v23, &lhs.duration);
        if (v87)
        {
          v88 = v87;
          goto LABEL_159;
        }
        v76 = 1;
LABEL_171:
        v94 = *(_QWORD *)(v103 + 80);
        if (v71 > v94 && v94 != 0)
          v76 = 1;
        v22 = v110;
        if (v71 == 1)
        {
          if (*v28 == v19 - 1 || v76)
            goto LABEL_181;
          goto LABEL_183;
        }
        if (v76)
        {
LABEL_181:
          CFArrayAppendValue(v25, cf);
          goto LABEL_30;
        }
        if (v71 > 0)
        {
LABEL_183:
          v96 = 0;
          v85.location = 0;
          while (1)
          {
            v85.length = v28[v96] - v85.location + 1;
            v97 = CMSampleBufferCopySampleBufferForRange(v23, cf, v85, (CMSampleBufferRef *)&v117);
            if ((_DWORD)v97)
              break;
            CFArrayAppendValue(v25, (const void *)v117.value);
            if (v117.value)
            {
              CFRelease((CFTypeRef)v117.value);
              v117.value = 0;
            }
            v85.location = v28[v96++] + 1;
            if (v71 == v96)
            {
              v22 = v110;
              goto LABEL_189;
            }
          }
          v27 = v97;
          v22 = v110;
          goto LABEL_214;
        }
      }
      v85.location = 0;
LABEL_189:
      if (v19 <= v85.location)
        goto LABEL_30;
      v85.length = v19 - v85.location;
      v98 = CMSampleBufferCopySampleBufferForRange(v23, cf, v85, (CMSampleBufferRef *)&v117);
      if (!(_DWORD)v98)
      {
        CFArrayAppendValue(v25, (const void *)v117.value);
        if (v117.value)
        {
          CFRelease((CFTypeRef)v117.value);
          v117.value = 0;
        }
        goto LABEL_30;
      }
      v27 = v98;
LABEL_214:
      v26 = 0;
      goto LABEL_32;
    }
    if ((v22->duration.flags & 0x1D) == 1)
    {
      v77 = *(_OWORD *)&v22->duration.value;
      lhs.duration.epoch = v22->duration.epoch;
      *(_OWORD *)&lhs.duration.value = v77;
      time1 = rhs;
      if (CMTimeCompare(&lhs.duration, &time1) < 0)
      {
        v91 = *(_QWORD *)(a1 + 80);
        if (!v91 || v19 <= v91)
        {
          if (v19 < 2)
          {
            v26 = 0;
            v28 = 0;
            goto LABEL_30;
          }
          v92 = *(_OWORD *)&v22->duration.value;
          lhs.duration.epoch = v22->duration.epoch;
          *(_OWORD *)&lhs.duration.value = v92;
          time1 = rhs;
          if (CMTimeCompare(&lhs.duration, &time1) < 0)
          {
            *(_OWORD *)&lhs.duration.value = *(_OWORD *)&v22->duration.value;
            v93 = v22;
            lhs.duration.epoch = v22->duration.epoch;
            time1 = rhs;
            v26 = 2 * asbs_SampleDurationIsCuriouslyShortOfItsExpectedDuration(&lhs.duration, (uint64_t)&time1);
          }
          else
          {
            v93 = v22;
            v26 = 0;
          }
          v99 = 0;
          while (1)
          {
            v129.location = v99;
            v129.length = 1;
            v100 = CMSampleBufferCopySampleBufferForRange(v23, sbuf, v129, (CMSampleBufferRef *)&v117);
            if ((_DWORD)v100)
              break;
            CFArrayAppendValue(v25, (const void *)v117.value);
            if (v117.value)
            {
              CFRelease((CFTypeRef)v117.value);
              v117.value = 0;
            }
            if (v19 == ++v99)
            {
              v28 = 0;
              v22 = v93;
              goto LABEL_30;
            }
          }
          v27 = v100;
          v28 = 0;
          v22 = v93;
          goto LABEL_214;
        }
      }
      else
      {
        v78 = *(_OWORD *)&v22->duration.value;
        lhs.duration.epoch = v22->duration.epoch;
        *(_OWORD *)&lhs.duration.value = v78;
        time1 = rhs;
        if (CMTimeCompare(&lhs.duration, &time1) >= 1)
        {
          v79 = v5;
          v80 = *(_OWORD *)&v22->duration.value;
          v81 = v22;
          lhs.duration.epoch = v22->duration.epoch;
          *(_OWORD *)&lhs.duration.value = v80;
          v82 = CMTimeCopyDescription(v23, &lhs.duration);
          lhs.duration = rhs;
          v83 = CMTimeCopyDescription(v23, &lhs.duration);
          if (v82)
            CFRelease(v82);
          v26 = 1;
          v5 = v79;
          if (!v83)
            goto LABEL_164;
          goto LABEL_151;
        }
      }
      v81 = v22;
      v26 = 0;
      goto LABEL_164;
    }
    v84 = *(_OWORD *)&v22->duration.value;
    v81 = v22;
    lhs.duration.epoch = v22->duration.epoch;
    *(_OWORD *)&lhs.duration.value = v84;
    v83 = CMTimeCopyDescription(v23, &lhs.duration);
    v26 = 0;
    if (!v83)
    {
LABEL_164:
      CFArrayAppendValue(v25, sbuf);
      v28 = 0;
      v22 = v81;
      goto LABEL_30;
    }
LABEL_151:
    CFRelease(v83);
    goto LABEL_164;
  }
  CFArrayAppendValue(v24, sbuf);
  v26 = 0;
LABEL_29:
  v28 = 0;
  v22 = 0;
LABEL_30:
  v27 = 0;
  *v5 = v25;
LABEL_31:
  v25 = 0;
LABEL_32:
  if (v117.value)
    CFRelease((CFTypeRef)v117.value);
  if (v25)
    CFRelease(v25);
  free(v22);
  free(v28);
  if (!(_DWORD)v27 && a3)
LABEL_122:
    *a3 = v26;
  return v27;
}

CMTime *asbs_calculateNextCumulatedSegmentInterval@<X0>(uint64_t a1@<X0>, CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  int32_t v5;
  CMTime v7;
  CMTime lhs;
  CMTime v9;

  memset(&v9, 0, sizeof(v9));
  lhs = *a2;
  v7 = *(CMTime *)(a1 + 4);
  CMTimeSubtract(&v9, &lhs, &v7);
  lhs = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v7 = v9;
  if (CMTimeCompare(&lhs, &v7) < 0)
  {
    lhs = v9;
    v7 = *(CMTime *)(a1 + 28);
    v5 = CMTimeDivide() + 1;
  }
  else
  {
    v5 = 1;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  lhs = *(CMTime *)(a1 + 28);
  return CMTimeMultiply((CMTime *)a3, &lhs, v5);
}

BOOL asbs_SampleDurationIsCuriouslyShortOfItsExpectedDuration(CMTime *a1, uint64_t a2)
{
  int32_t v3;
  CMTime time;
  CMTime v6;

  memset(&v6, 0, sizeof(v6));
  v3 = *(_DWORD *)(a2 + 8);
  time = *a1;
  CMTimeConvertScale(&v6, &time, v3, kCMTimeRoundingMethod_RoundTowardZero);
  memset(&time, 0, sizeof(time));
  return !CMTimeDivide() && (time.flags & 0x1D) == 1 && (double)time.value / (double)*(uint64_t *)a2 >= 0.96;
}

uint64_t FigBufferedAirPlayOutputProxyCreateFactory(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t CMBaseObject;
  uint64_t (*v7)(uint64_t, const __CFString *, uint64_t, void **);
  uint64_t v8;
  const void *Value;
  CFTypeRef v10;
  const void *v11;
  const void *v12;
  CFTypeRef v13;
  uint64_t v14;
  _QWORD block[5];
  void *key;
  CFTypeRef cf;

  key = 0;
  cf = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __FigBufferedAirPlayOutputProxyCreateFactory_block_invoke;
  block[3] = &__block_descriptor_tmp_118;
  block[4] = a1;
  if (FigBufferedAirPlayOutputProxyCreateFactory_once != -1)
    dispatch_once(&FigBufferedAirPlayOutputProxyCreateFactory_once, block);
  if (!gBaoProxyDictionary || !gMutex)
  {
    v8 = FigSignalErrorAt();
LABEL_26:
    v14 = v8;
    a2 = 0;
    goto LABEL_18;
  }
  if (a2)
  {
    MEMORY[0x19402EEEC]();
    CMBaseObject = FigBufferedAirPlayOutputGetCMBaseObject(a2);
    v7 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
    if (!v7)
    {
      a2 = 0;
      v14 = 4294954514;
      goto LABEL_18;
    }
    v8 = v7(CMBaseObject, CFSTR("UniqueID"), a1, &key);
    if (!(_DWORD)v8)
    {
      Value = (const void *)FigCFDictionaryGetValue();
      if (Value)
      {
        v10 = CFRetain(Value);
        if (v10)
        {
          v11 = v10;
          v12 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
          cf = v12;
          CFRelease(v11);
          if (v12)
          {
            a2 = 0;
            goto LABEL_14;
          }
        }
      }
      v8 = FigBufferedAirPlayOutputProxyCreate(a1, a2, &cf);
      if (!(_DWORD)v8)
      {
        a2 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
        CFDictionarySetValue((CFMutableDictionaryRef)gBaoProxyDictionary, key, a2);
        v12 = cf;
        if (!cf)
        {
          v13 = 0;
          goto LABEL_17;
        }
LABEL_14:
        v13 = CFRetain(v12);
LABEL_17:
        v14 = 0;
        *a3 = v13;
        goto LABEL_18;
      }
    }
    goto LABEL_26;
  }
  v14 = FigSignalErrorAt();
LABEL_18:
  MEMORY[0x19402EF04](gMutex);
  if (key)
    CFRelease(key);
  if (cf)
    CFRelease(cf);
  if (a2)
    CFRelease(a2);
  return v14;
}

uint64_t FigStaticMetadataSupplierGetClassID()
{
  MEMORY[0x19402F294](&FigStaticMetadataSupplierGetClassID_sRegisterFigStaticMetadataSupplierTypeOnce, RegisterFigStaticMetadataSupplierType);
  return sFigStaticMetadataSupplierID;
}

uint64_t RegisterFigStaticMetadataSupplierType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigStaticMetadataSupplierGetTypeID()
{
  MEMORY[0x19402F294](&FigStaticMetadataSupplierGetClassID_sRegisterFigStaticMetadataSupplierTypeOnce, RegisterFigStaticMetadataSupplierType);
  return CMBaseClassGetCFTypeID();
}

CFStringRef FigStaticMetadataSupplierCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigStaticMetadataSupplier <%p>]"), a1);
}

uint64_t FigStartMonitoringNetworkActivity()
{
  return objc_msgSend(+[CMNetworkActivityMonitor sharedActivityMonitor](CMNetworkActivityMonitor, "sharedActivityMonitor"), "beginMonitoring");
}

uint64_t FigVirtualDisplaySinkGetClassID()
{
  MEMORY[0x19402F294](&FigVirtualDisplaySinkGetClassID_sRegisterFigVirtualDisplaySinkTypeOnce, RegisterFigVirtualDisplaySinkType);
  return sFigVirtualDisplaySinkClassID;
}

uint64_t RegisterFigVirtualDisplaySinkType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigVirtualDisplaySinkGetTypeID()
{
  MEMORY[0x19402F294](&FigVirtualDisplaySinkGetClassID_sRegisterFigVirtualDisplaySinkTypeOnce, RegisterFigVirtualDisplaySinkType);
  return CMBaseClassGetCFTypeID();
}

CFStringRef FigVirtualDisplaySinkCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigVirtualDisplaySink %p]"), a1);
}

uint64_t FigVirtualDisplaySinkFileWriterCreate(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t DerivedStorage;
  uint64_t v5;
  __int128 v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  FigVirtualDisplaySinkGetClassID();
  v3 = CMDerivedObjectCreate();
  if ((_DWORD)v3)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v5 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)(DerivedStorage + 28) = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)(DerivedStorage + 44) = *(_QWORD *)(v5 + 16);
    v6 = *MEMORY[0x1E0C9D820];
    *(_OWORD *)(DerivedStorage + 80) = *MEMORY[0x1E0C9D820];
    *(_OWORD *)(DerivedStorage + 96) = v6;
    *(_QWORD *)(DerivedStorage + 112) = FVDUtilsCreateDisplayUUID();
    *a2 = 0;
  }
  return v3;
}

uint64_t fileWriterSink_Invalidate()
{
  _BYTE *DerivedStorage;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
    *DerivedStorage = 1;
  return 0;
}

void fileWriterSink_Finalize()
{
  _QWORD *DerivedStorage;
  _BYTE *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  NSObject *v5;
  const void *v6;
  const void *v7;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*v1)
    *v1 = 1;
  v2 = (const void *)DerivedStorage[7];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[7] = 0;
  }
  v3 = (const void *)DerivedStorage[2];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[2] = 0;
  }
  v4 = (const void *)DerivedStorage[14];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[14] = 0;
  }
  v5 = DerivedStorage[8];
  if (v5)
  {
    dispatch_release(v5);
    DerivedStorage[8] = 0;
  }
  v6 = (const void *)DerivedStorage[9];
  if (v6)
  {
    _Block_release(v6);
    DerivedStorage[9] = 0;
  }
  v7 = (const void *)DerivedStorage[1];
  if (v7)
  {
    CFRelease(v7);
    DerivedStorage[1] = 0;
  }
}

__CFString *fileWriterSink_CopyDebugDesc(const void *a1)
{
  _BYTE *DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;
  const char *v6;
  CFAllocatorRef v7;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(a1);
  if (*DerivedStorage)
    v6 = " (invalidated)";
  else
    v6 = "";
  v7 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigVirtualDisplaySink %p retainCount: %ld%s allocator: %p, "), a1, v5, v6, v7);
  CFStringAppendFormat(Mutable, 0, CFSTR(">"));
  return Mutable;
}

uint64_t fileWriterSink_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  CFTypeRef v7;

  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  if (!CFEqual(CFSTR("Type"), a2))
    return 4294954512;
  v7 = CFRetain(CFSTR("FileWriter"));
  result = 0;
  *a4 = v7;
  return result;
}

uint64_t fileWriterSink_SetProperty(unint64_t a1, const void *a2, const __CFString *a3)
{
  _BYTE *DerivedStorage;
  uint64_t result;
  _BYTE *v8;
  CFTypeID v9;
  const void *v10;
  CFTypeID v11;
  const __CFDictionary *Value;
  double *v13;
  CFTypeID v15;
  CFStringRef LogPrefix;
  CGSize v17;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  if (CFEqual(CFSTR("Destination"), a2))
  {
    if (!a3)
      return 4294954516;
    v9 = CFGetTypeID(a3);
    if (v9 != CFStringGetTypeID())
      return 4294954516;
    v10 = (const void *)*((_QWORD *)v8 + 7);
    *((_QWORD *)v8 + 7) = a3;
    CFRetain(a3);
    if (v10)
      CFRelease(v10);
    return 0;
  }
  if (CFEqual(CFSTR("deviceInfo"), a2))
  {
    if (a3)
    {
      v11 = CFGetTypeID(a3);
      if (v11 == CFDictionaryGetTypeID())
      {
        Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a3, CFSTR("displaySizeInPixels"));
        if (Value)
        {
          v13 = (double *)MEMORY[0x1E0C9D820];
          v17 = (CGSize)*MEMORY[0x1E0C9D820];
          CGSizeMakeWithDictionaryRepresentation(Value, &v17);
          if (v17.width != *v13 || v17.height != v13[1])
            *((CGSize *)v8 + 5) = v17;
        }
        FigCFDictionaryGetCGSizeIfPresent();
      }
    }
    return 0;
  }
  if (CFEqual(CFSTR("LogPrefix"), a2))
  {
    if (a3)
    {
      v15 = CFGetTypeID(a3);
      if (v15 == CFStringGetTypeID() && !*((_QWORD *)v8 + 1))
      {
        LogPrefix = FVDUtilsCreateLogPrefix(a3, a1);
        result = 0;
        *((_QWORD *)v8 + 1) = LogPrefix;
        return result;
      }
    }
    return 0;
  }
  if (CFEqual(CFSTR("fps"), a2)
    || CFEqual(CFSTR("fpsInfo"), a2)
    || CFEqual(CFSTR("timestamps"), a2)
    || CFEqual(CFSTR("timestampInfo"), a2)
    || CFEqual(CFSTR("useEncryption"), a2)
    || CFEqual(CFSTR("submitSurfaceTimestamp"), a2))
  {
    return 0;
  }
  if (CFEqual(CFSTR("extraInfo"), a2))
    return 0;
  else
    return 4294954512;
}

uint64_t fileWriterSink_Start(uint64_t a1, const __CFDictionary *a2, const void *a3)
{
  uint64_t DerivedStorage;
  double v6;
  const __CFAllocator *v7;
  __CFDictionary *Mutable;
  const __CFDictionary *v9;
  int HasPrefix;
  const __CFString *v11;
  const __CFURL *v12;
  const __CFURL *v13;
  uint64_t v14;
  CFRunLoopRef Current;
  uint64_t *v16;
  uint64_t v17;
  CFDictionaryRef v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, const __CFString *, CFDictionaryRef);
  dev_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  const void *Value;
  uint64_t v26;
  NSObject *v27;
  unsigned int v28;
  unsigned int v29;
  const __CFString *v30;
  dev_t v31;
  NSObject *v32;
  unsigned int v33;
  unsigned int v34;
  const __CFString *v35;
  void *v36;
  NSObject *v37;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v40;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  NSObject *v44;
  const __CFDictionary *v45;
  const void *v46;
  const __CFString *v47;
  _QWORD block[5];
  int v49;
  CMTime time;
  double v51;
  os_log_type_t v52;
  int v53;
  os_log_type_t type[4];
  unsigned int v55;
  stat v56;
  UInt8 buffer[1024];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v51 = 0.0;
  v47 = *(const __CFString **)(DerivedStorage + 8);
  FigCFDictionaryGetDoubleIfPresent();
  FigVirtualDisplayPrefsGetDoubleWithDefault(CFSTR("file_mirroring_moof_interval"));
  v51 = v6;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v55 = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v26 = 4294954510;
    if (a3)
      goto LABEL_40;
    return v26;
  }
  v9 = Mutable;
  CFDictionaryAddValue(Mutable, CFSTR("AssetWriter_RealTime"), (const void *)*MEMORY[0x1E0C9AE50]);
  HasPrefix = CFStringHasPrefix(*(CFStringRef *)(DerivedStorage + 56), CFSTR("file://"));
  v11 = *(const __CFString **)(DerivedStorage + 56);
  if (HasPrefix)
    v12 = CFURLCreateWithString(v7, v11, 0);
  else
    v12 = CFURLCreateWithFileSystemPath(v7, v11, kCFURLPOSIXPathStyle, 0);
  v13 = v12;
  if (v12)
  {
    memset(&v56, 0, sizeof(v56));
    if (!CFURLGetFileSystemRepresentation(v12, 1u, buffer, 1024))
    {
      v53 = 0;
      v52 = OS_LOG_TYPE_DEFAULT;
      v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v26 = 4294954516;
LABEL_51:
      v55 = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v44 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT);
      goto LABEL_37;
    }
    if (!stat((const char *)buffer, &v56))
    {
      if (removefile((const char *)buffer, 0, 0))
      {
        v53 = 0;
        v52 = OS_LOG_TYPE_DEFAULT;
        v43 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v26 = *__error();
        if ((_DWORD)v26)
          goto LABEL_51;
      }
    }
    v14 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)(DerivedStorage + 28) = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)(DerivedStorage + 44) = *(_QWORD *)(v14 + 16);
    Current = CFRunLoopGetCurrent();
    v16 = (uint64_t *)(DerivedStorage + 16);
    v17 = FigAssetWriterCreateWithURL(v7, v13, (uint64_t)Current, v9, 0, (_QWORD *)(DerivedStorage + 16));
    if ((_DWORD)v17)
    {
      v26 = v17;
      v55 = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v42 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
      goto LABEL_37;
    }
    if (v51 <= 0.49)
      goto LABEL_15;
    CMTimeMakeWithSeconds(&time, v51, 1000);
    v18 = CMTimeCopyAsDictionary(&time, v7);
    v19 = *v16;
    v20 = *(uint64_t (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 56);
    if (v20)
    {
      v21 = v20(v19, CFSTR("MovieFragmentCheckpointInterval"), v18);
      if (!v21)
      {
        if (v18)
LABEL_14:
          CFRelease(v18);
LABEL_15:
        v22 = *v16;
        v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (v23)
        {
          v24 = v23(v22, 1986618469, DerivedStorage + 24);
          if (!(_DWORD)v24)
          {
            *(_DWORD *)(DerivedStorage + 128) = 60;
            FigCFDictionaryGetInt32IfPresent();
            if (a2)
            {
              Value = CFDictionaryGetValue(a2, CFSTR("HDRInfo"));
              *(_QWORD *)(DerivedStorage + 120) = Value;
              if (Value)
                CFRetain(Value);
            }
            v26 = 0;
            goto LABEL_38;
          }
          v26 = v24;
        }
        else
        {
          v26 = 4294954514;
        }
        v55 = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v28 = v55;
        if (os_log_type_enabled(v27, type[0]))
          v29 = v28;
        else
          v29 = v28 & 0xFFFFFFFE;
        if (v29)
        {
          v30 = &stru_1E2FD85F8;
          v56.st_dev = 138413058;
          if (v47)
            v30 = v47;
          *(_QWORD *)&v56.st_mode = v30;
          WORD2(v56.st_ino) = 2080;
          *(__darwin_ino64_t *)((char *)&v56.st_ino + 6) = (__darwin_ino64_t)"fileWriterSink_Start";
          HIWORD(v56.st_gid) = 1024;
          v56.st_rdev = 540;
          *((_WORD *)&v56.st_rdev + 2) = 1024;
          *(dev_t *)((char *)&v56.st_rdev + 6) = v26;
          _os_log_send_and_compose_impl();
        }
LABEL_37:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_38:
        CFRelease(v13);
        goto LABEL_39;
      }
      v31 = v21;
      v45 = v9;
      v46 = a3;
    }
    else
    {
      v45 = v9;
      v46 = a3;
      v31 = -12782;
    }
    v55 = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v33 = v55;
    if (os_log_type_enabled(v32, type[0]))
      v34 = v33;
    else
      v34 = v33 & 0xFFFFFFFE;
    if (v34)
    {
      v35 = &stru_1E2FD85F8;
      v56.st_dev = 138413058;
      if (v47)
        v35 = v47;
      *(_QWORD *)&v56.st_mode = v35;
      WORD2(v56.st_ino) = 2080;
      *(__darwin_ino64_t *)((char *)&v56.st_ino + 6) = (__darwin_ino64_t)"fileWriterSink_Start";
      HIWORD(v56.st_gid) = 1024;
      v56.st_rdev = 532;
      *((_WORD *)&v56.st_rdev + 2) = 1024;
      *(dev_t *)((char *)&v56.st_rdev + 6) = v31;
      _os_log_send_and_compose_impl();
    }
    v9 = v45;
    a3 = v46;
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (!v18)
      goto LABEL_15;
    goto LABEL_14;
  }
  v55 = 0;
  type[0] = OS_LOG_TYPE_DEFAULT;
  v40 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  v26 = 4294954510;
LABEL_39:
  CFRelease(v9);
  if (a3)
  {
LABEL_40:
    v36 = _Block_copy(a3);
    v37 = *(NSObject **)(DerivedStorage + 64);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __fileWriterSink_Start_block_invoke;
    block[3] = &unk_1E2FB3E20;
    block[4] = v36;
    v49 = v26;
    dispatch_async(v37, block);
  }
  return v26;
}

uint64_t fileWriterSink_Stop(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  NSObject *v11;
  const void *v12;
  const void *v13;
  void *v14;
  NSObject *v15;
  _QWORD block[5];
  os_log_type_t type;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = (_QWORD *)DerivedStorage;
  v5 = *(_QWORD *)(DerivedStorage + 16);
  if (!v5)
    goto LABEL_12;
  v6 = *(unsigned int *)(DerivedStorage + 24);
  v7 = *(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
  if (!v7 || v7(v5, v6))
  {
    v19 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v9 = v4[2];
  v10 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
  if (v10)
  {
    v5 = v10(v9);
    if (!(_DWORD)v5)
      goto LABEL_10;
  }
  else
  {
    v5 = 4294954514;
  }
  v19 = 0;
  type = OS_LOG_TYPE_DEFAULT;
  v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_10:
  v12 = (const void *)v4[2];
  if (v12)
  {
    CFRelease(v12);
    v4[2] = 0;
  }
LABEL_12:
  v13 = (const void *)v4[15];
  if (v13)
  {
    CFRelease(v13);
    v4[15] = 0;
  }
  if (a2)
  {
    v14 = _Block_copy(a2);
    v15 = v4[8];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __fileWriterSink_Stop_block_invoke;
    block[3] = &unk_1E2FB3E48;
    block[4] = v14;
    dispatch_async(v15, block);
  }
  return v5;
}

uint64_t fileWriterSink_PushFrame(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  const __CFString *v7;
  CMTimeEpoch epoch;
  uint64_t v9;
  const __CFAllocator *v10;
  const CFDictionaryKeyCallBacks *v11;
  const CFDictionaryValueCallBacks *v12;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v14;
  CFMutableDictionaryRef v15;
  CFArrayRef v16;
  const char *v17;
  void *v18;
  const __CFTimeZone *v19;
  double Current;
  double v21;
  double v22;
  uint64_t SecondsFromGMT;
  CFStringRef v24;
  CFStringRef v25;
  CFArrayRef v26;
  uint64_t FigBaseObject;
  unsigned int (*v28)(uint64_t, const __CFString *, CFArrayRef);
  NSObject *v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, CMTime *);
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, opaqueCMSampleBuffer *);
  uint64_t v35;
  NSObject *v36;
  unsigned int v37;
  unsigned int v38;
  const __CFString *v39;
  NSObject *v40;
  unsigned int v41;
  unsigned int v42;
  const __CFString *v43;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v45;
  opaqueCMSampleBuffer *v46;
  uint64_t v47;
  const __CFString *v48;
  __CFDictionary *theDict;
  CFLocaleRef value;
  CFTypeRef v51;
  CMTime v52;
  CFMutableDictionaryRef v53;
  CMTime v54;
  int v55;
  __int16 v56;
  int v57;
  CMTime time;
  void *values[5];

  values[3] = *(void **)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v5 = DerivedStorage;
  v7 = *(const __CFString **)(DerivedStorage + 8);
  v6 = *(_QWORD *)(DerivedStorage + 16);
  if (!v6)
  {
    LODWORD(values[0]) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954516;
  }
  if ((*(_BYTE *)(DerivedStorage + 40) & 1) == 0)
  {
    CMSampleBufferGetPresentationTimeStamp(&time, a2);
    *(_OWORD *)(v5 + 28) = *(_OWORD *)&time.value;
    epoch = time.epoch;
    *(_QWORD *)(v5 + 44) = time.epoch;
    v9 = *(_QWORD *)(v5 + 16);
    *(_OWORD *)&v52.value = *(_OWORD *)(v5 + 28);
    v52.epoch = epoch;
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v11 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
    v12 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v14 = CFDictionaryCreateMutable(v10, 0, v11, v12);
    v15 = CFDictionaryCreateMutable(v10, 0, v11, v12);
    values[0] = Mutable;
    values[1] = v14;
    theDict = v14;
    values[2] = v15;
    v16 = CFArrayCreate(v10, (const void **)values, 3, MEMORY[0x1E0C9B378]);
    v17 = getprogname();
    v48 = v7;
    v46 = a2;
    if (v17)
      v18 = (void *)CFStringCreateWithCString(v10, v17, 0x8000100u);
    else
      v18 = (void *)CFRetain(CFSTR("???"));
    v51 = v18;
    value = CFLocaleCopyCurrent();
    v19 = CFTimeZoneCopySystem();
    Current = CFAbsoluteTimeGetCurrent();
    v21 = Current + (double)FigGetUpTimeNanoseconds() / -1000000000.0;
    time = v52;
    v22 = v21 + CMTimeGetSeconds(&time);
    v47 = v9;
    if (v19)
    {
      SecondsFromGMT = (int)CFTimeZoneGetSecondsFromGMT(v19, Current);
      v45 = MEMORY[0x19402A4AC](v19);
      v24 = CFStringCreateWithFormat(v10, 0, CFSTR("%f %d %@"), *(_QWORD *)&v22, SecondsFromGMT, v45);
    }
    else
    {
      v24 = CFStringCreateWithFormat(v10, 0, CFSTR("%f"), *(_QWORD *)&v22);
    }
    v25 = v24;
    v53 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v26 = CFArrayCreate(v10, (const void **)&v53, 1, MEMORY[0x1E0C9B378]);
    CFDictionarySetValue(Mutable, CFSTR("keyspace"), CFSTR("mdta"));
    CFDictionarySetValue(Mutable, CFSTR("key"), CFSTR("com.apple.quicktime.information"));
    CFDictionarySetValue(Mutable, CFSTR("value"), CFSTR("Created by FVDFileWriter"));
    CFDictionarySetValue(Mutable, CFSTR("locale"), value);
    CFDictionarySetValue(theDict, CFSTR("keyspace"), CFSTR("mdta"));
    CFDictionarySetValue(theDict, CFSTR("key"), CFSTR("com.apple.quicktime.software"));
    CFDictionarySetValue(theDict, CFSTR("value"), v51);
    CFDictionarySetValue(theDict, CFSTR("locale"), value);
    CFDictionarySetValue(v15, CFSTR("keyspace"), CFSTR("mdta"));
    CFDictionarySetValue(v15, CFSTR("key"), CFSTR("com.apple.quicktime.comment"));
    CFDictionarySetValue(v15, CFSTR("value"), v25);
    CFDictionarySetValue(v15, CFSTR("locale"), value);
    CFDictionarySetValue(v53, CFSTR("items"), v16);
    CFDictionarySetValue(v53, CFSTR("format"), CFSTR("com.apple.quicktime.mdta"));
    FigBaseObject = FigAssetWriterGetFigBaseObject(v47);
    v28 = *(unsigned int (**)(uint64_t, const __CFString *, CFArrayRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 56);
    if (!v28 || v28(FigBaseObject, CFSTR("AssetWriter_Metadata"), v26))
    {
      v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v19)
      CFRelease(v19);
    CFRelease(Mutable);
    CFRelease(theDict);
    CFRelease(v15);
    CFRelease(v16);
    CFRelease(v51);
    CFRelease(v25);
    CFRelease(value);
    CFRelease(v53);
    CFRelease(v26);
    v30 = *(_QWORD *)(v5 + 16);
    v54 = *(CMTime *)(v5 + 28);
    v31 = *(uint64_t (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
    if (v31)
    {
      time = v54;
      v32 = v31(v30, &time);
      v7 = v48;
      if (!(_DWORD)v32)
      {
        v6 = *(_QWORD *)(v5 + 16);
        a2 = v46;
        goto LABEL_19;
      }
      v35 = v32;
    }
    else
    {
      v35 = 4294954514;
      v7 = v48;
    }
    LODWORD(values[0]) = 0;
    v40 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v41 = values[0];
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      v42 = v41;
    else
      v42 = v41 & 0xFFFFFFFE;
    if (!v42)
      goto LABEL_39;
    v43 = &stru_1E2FD85F8;
    LODWORD(v54.value) = 138413058;
    if (v7)
      v43 = v7;
    *(CMTimeValue *)((char *)&v54.value + 4) = (CMTimeValue)v43;
    LOWORD(v54.flags) = 2080;
    *(_QWORD *)((char *)&v54.flags + 2) = "fileWriterSink_PushFrame";
    HIWORD(v54.epoch) = 1024;
    v55 = 622;
    v56 = 1024;
    v57 = v35;
    goto LABEL_38;
  }
LABEL_19:
  v33 = *(unsigned int *)(v5 + 24);
  v34 = *(uint64_t (**)(uint64_t, uint64_t, opaqueCMSampleBuffer *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 80);
  if (!v34)
  {
    v35 = 4294954514;
LABEL_23:
    LODWORD(values[0]) = 0;
    v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v37 = values[0];
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      v38 = v37;
    else
      v38 = v37 & 0xFFFFFFFE;
    if (!v38)
      goto LABEL_39;
    v39 = &stru_1E2FD85F8;
    LODWORD(v54.value) = 138413058;
    if (v7)
      v39 = v7;
    *(CMTimeValue *)((char *)&v54.value + 4) = (CMTimeValue)v39;
    LOWORD(v54.flags) = 2080;
    *(_QWORD *)((char *)&v54.flags + 2) = "fileWriterSink_PushFrame";
    HIWORD(v54.epoch) = 1024;
    v55 = 629;
    v56 = 1024;
    v57 = v35;
LABEL_38:
    _os_log_send_and_compose_impl();
LABEL_39:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return v35;
  }
  v35 = v34(v6, v33, a2);
  if ((_DWORD)v35)
    goto LABEL_23;
  return v35;
}

uint64_t fileWriterSink_Suspend()
{
  CMBaseObjectGetDerivedStorage();
  return 0;
}

uint64_t fileWriterSink_Resume()
{
  CMBaseObjectGetDerivedStorage();
  return 0;
}

uint64_t fileWriterSink_GetPropertyAsync(uint64_t a1, const void *a2, uint64_t a3, const void *a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  double v8;
  double v9;
  _BOOL4 v10;
  _BOOL4 v11;
  double v12;
  double v13;
  CFMutableDictionaryRef v14;
  __CFDictionary *Mutable;
  CFDictionaryRef DictionaryRepresentation;
  CFDictionaryRef v17;
  const void *v18;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  int BooleanWithDefault;
  const __CFDictionary *v24;
  const void *v25;
  const void **v26;
  const void *v27;
  NSObject *v28;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD block[6];
  int v31;
  os_log_type_t v32;
  int v33;
  CFTypeRef v34;
  CFTypeRef cf;
  os_log_type_t type[8];
  void *value[23];
  CGSize v38;

  value[22] = *(void **)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = DerivedStorage;
  v9 = *MEMORY[0x1E0C9D820];
  v8 = *(double *)(MEMORY[0x1E0C9D820] + 8);
  v10 = *MEMORY[0x1E0C9D820] == *(double *)(DerivedStorage + 80);
  v11 = v8 == *(double *)(DerivedStorage + 88);
  if (v10 && v11)
    v12 = 720.0;
  else
    v12 = *(double *)(DerivedStorage + 88);
  if (v10 && v11)
    v13 = 1280.0;
  else
    v13 = *(double *)(DerivedStorage + 80);
  if (fileWriterSink_getPreferredVirtualDisplaySize_sCheckPrefsOnce != -1)
    dispatch_once(&fileWriterSink_getPreferredVirtualDisplaySize_sCheckPrefsOnce, &__block_literal_global_105);
  if (v9 != *(double *)&fileWriterSink_getPreferredVirtualDisplaySize_prefScreenSize_0
    || v8 != *(double *)&fileWriterSink_getPreferredVirtualDisplaySize_prefScreenSize_1)
  {
    v12 = *(double *)&fileWriterSink_getPreferredVirtualDisplaySize_prefScreenSize_1;
    v13 = *(double *)&fileWriterSink_getPreferredVirtualDisplaySize_prefScreenSize_0;
  }
  if (!CFEqual(a2, CFSTR("deviceInfo")))
  {
    if (!CFEqual(a2, CFSTR("displayInfo")))
    {
      Mutable = 0;
      v19 = 4294954512;
      goto LABEL_17;
    }
    *(_QWORD *)type = 0;
    value[0] = 0;
    v34 = 0;
    cf = 0;
    BooleanWithDefault = FigVirtualDisplayPrefsGetBooleanWithDefault(CFSTR("file_mirroring_supports_rotation"), 0);
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v24 = *(const __CFDictionary **)(v7 + 120);
      if (v24)
      {
        v25 = CFDictionaryGetValue(v24, CFSTR("HDRMode"));
        FigDisplayModes_BuildColorAndTimingModes((int)v13, (int)v12, 0, *(_DWORD *)(v7 + 128), 0x64u, 0, 0, 0, (__CFDictionary **)&v34);
        FigDisplayModes_BuildColorModesFromHDRMode(v25, *(const __CFDictionary **)(v7 + 120), 0, 0x64u, (__CFDictionary **)&cf);
      }
      else
      {
        FigDisplayModes_BuildColorAndTimingModes((int)v13, (int)v12, 0, *(_DWORD *)(v7 + 128), 0x64u, 0, 0, (__CFDictionary **)&cf, (__CFDictionary **)&v34);
      }
      if (cf)
      {
        if (v34)
        {
          FigDisplayModes_CreateColorAndTimingModesArraysWithPreferredMode(cf, v34, (__CFArray **)value, (__CFArray **)type);
          if (value[0])
          {
            if (*(_QWORD *)type)
            {
              CFDictionarySetValue(Mutable, CFSTR("colorModes"), value[0]);
              CFDictionarySetValue(Mutable, CFSTR("timingModes"), *(const void **)type);
            }
          }
        }
      }
      v26 = (const void **)MEMORY[0x1E0C9AE40];
      if (BooleanWithDefault)
        v26 = (const void **)MEMORY[0x1E0C9AE50];
      CFDictionarySetValue(Mutable, CFSTR("rotationSupport"), *v26);
      v27 = *(const void **)(v7 + 112);
      if (v27)
        CFDictionarySetValue(Mutable, CFSTR("displayUUID"), v27);
      if (v9 != *(double *)(v7 + 96) || v8 != *(double *)(v7 + 104))
        FigCFDictionarySetCGSize();
      if (cf)
        CFRelease(cf);
      if (v34)
        CFRelease(v34);
      if (value[0])
        CFRelease(value[0]);
      v18 = *(const void **)type;
      if (!*(_QWORD *)type)
        goto LABEL_16;
      goto LABEL_15;
    }
    v33 = 0;
    v32 = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_45:
    v19 = 4294954510;
    goto LABEL_17;
  }
  v14 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v14
    || (Mutable = v14,
        v38.width = v13,
        v38.height = v12,
        (DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v38)) == 0))
  {
    LODWORD(value[0]) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    Mutable = 0;
    goto LABEL_45;
  }
  v17 = DictionaryRepresentation;
  CFDictionarySetValue(Mutable, CFSTR("displaySizeInPixels"), DictionaryRepresentation);
  CFDictionarySetValue(Mutable, CFSTR("overscanned"), (const void *)*MEMORY[0x1E0C9AE40]);
  v18 = v17;
LABEL_15:
  CFRelease(v18);
LABEL_16:
  v19 = 0;
LABEL_17:
  v20 = _Block_copy(a4);
  v21 = *(NSObject **)(v7 + 64);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __fileWriterSink_GetPropertyAsync_block_invoke;
  block[3] = &unk_1E2FB3E70;
  v31 = v19;
  block[4] = v20;
  block[5] = Mutable;
  dispatch_async(v21, block);
  return v19;
}

uint64_t fileWriterSink_Perform()
{
  CMBaseObjectGetDerivedStorage();
  return 0;
}

uint64_t fileWriterSink_SetDispatchQueue(uint64_t a1, NSObject *a2)
{
  uint64_t DerivedStorage;
  NSObject *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    a2 = MEMORY[0x1E0C80D38];
  dispatch_retain(a2);
  v4 = *(NSObject **)(DerivedStorage + 64);
  if (v4)
    dispatch_release(v4);
  *(_QWORD *)(DerivedStorage + 64) = a2;
  return 0;
}

uint64_t fileWriterSink_SetEventHandler(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  void *v4;
  const void *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = _Block_copy(a2);
  v5 = *(const void **)(DerivedStorage + 72);
  if (v5)
    _Block_release(v5);
  *(_QWORD *)(DerivedStorage + 72) = v4;
  return 0;
}

uint64_t fileWriterSink_ShouldDropFrame()
{
  return 0;
}

void __fileWriterSink_getPreferredVirtualDisplaySize_block_invoke()
{
  const __CFArray *v0;
  const __CFArray *v1;
  CFTypeID v2;
  double IntValue;
  double v4;
  const __CFString *ValueAtIndex;
  const __CFString *v6;
  CFTypeID v7;
  const __CFString *v8;
  const __CFString *v9;
  CFTypeID v10;
  uint64_t v11;
  uint64_t v12;

  v0 = (const __CFArray *)FigVirtualDisplayPrefsCopyValue(CFSTR("file_mirroring_resolution"));
  if (v0)
  {
    v1 = v0;
    v2 = CFGetTypeID(v0);
    IntValue = 0.0;
    if (v2 == CFArrayGetTypeID())
    {
      v4 = 0.0;
      if (CFArrayGetCount(v1) >= 2)
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v1, 0);
        if (ValueAtIndex)
        {
          v6 = ValueAtIndex;
          v7 = CFGetTypeID(ValueAtIndex);
          if (v7 == CFStringGetTypeID())
            IntValue = (double)CFStringGetIntValue(v6);
        }
        v8 = (const __CFString *)CFArrayGetValueAtIndex(v1, 1);
        if (v8)
        {
          v9 = v8;
          v10 = CFGetTypeID(v8);
          if (v10 == CFStringGetTypeID())
            v4 = (double)CFStringGetIntValue(v9);
        }
      }
    }
    else
    {
      v4 = 0.0;
    }
    CFRelease(v1);
    if (IntValue > 0.0 && v4 > 0.0)
    {
      if (IntValue <= v4)
        *(double *)&v11 = v4;
      else
        *(double *)&v11 = IntValue;
      fileWriterSink_getPreferredVirtualDisplaySize_prefScreenSize_0 = v11;
      if (IntValue >= v4)
        *(double *)&v12 = v4;
      else
        *(double *)&v12 = IntValue;
      fileWriterSink_getPreferredVirtualDisplaySize_prefScreenSize_1 = v12;
    }
  }
}

uint64_t WebVTTGetSamplePTS(uint64_t a1, CMTime *a2)
{
  CMTime v4;

  if (!a1)
    return FigSignalErrorAt();
  CMTimeMakeWithSeconds(&v4, *(double *)(a1 + 32) + dbl_1933010F0[*(double *)(a1 + 32) < 0.0], 90000);
  *a2 = v4;
  return 0;
}

BOOL WebVTTBufferLooksLikeWebVTTFile(char *__s1, unint64_t a2)
{
  char *v3;
  unsigned int v4;

  if (a2 < 3)
    return 0;
  v3 = __s1;
  if (*__s1 == 239 && __s1[1] == 187 && __s1[2] == 191)
  {
    v3 = __s1 + 3;
    a2 -= 3;
  }
  if (a2 < 7 || strncmp(v3, "WEBVTT", 6uLL))
    return 0;
  v4 = v3[6];
  if ((v4 & 0x80000000) == 0)
    return (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v4 + 60) & 0x4000) != 0;
  return __maskrune(v4, 0x4000uLL) != 0;
}

uint64_t FigWebVTTReadTime(unsigned __int8 **a1, unint64_t *a2, double *a3, int a4, char *a5)
{
  unint64_t v5;
  uint64_t v9;
  unsigned __int8 *v10;
  double v11;
  double v12;
  unint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  double v19;
  unsigned __int8 *v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  double v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  char v33;
  char *v34;
  char *v35;
  int v36;
  int v38;

  v5 = *a2;
  if (*a2 <= 4)
    return FigSignalErrorAt();
  v9 = 0;
  v10 = *a1;
  *a3 = 0.0;
  v11 = 0.0;
  while (((char)v10[v9] - 48) <= 9)
  {
    v12 = v11 * 10.0;
    *a3 = v12;
    v11 = v12 + (double)((char)v10[v9] - 48);
    *a3 = v11;
    if (v5 == ++v9)
      return FigSignalErrorAt();
  }
  v14 = v5 - v9 - 3;
  if (v5 - v9 < 3 || v10[v9] != 58)
    return FigSignalErrorAt();
  v15 = (char)v10[v9 + 1];
  v38 = a4;
  if ((v15 & 0x80000000) != 0)
  {
    v16 = __maskrune(v15, 0x400uLL);
    a4 = v38;
    if (!v16)
      return FigSignalErrorAt();
  }
  else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v15 + 60) & 0x400) == 0)
  {
    return FigSignalErrorAt();
  }
  v17 = (char)v10[v9 + 2];
  if ((v17 & 0x80000000) != 0)
  {
    v18 = __maskrune(v17, 0x400uLL);
    a4 = v38;
    if (!v18)
      return FigSignalErrorAt();
  }
  else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v17 + 60) & 0x400) == 0)
  {
    return FigSignalErrorAt();
  }
  v19 = *a3 * 60.0;
  *a3 = v19;
  *a3 = v19 + (double)((char)v10[v9 + 2] + 10 * (char)v10[v9 + 1] - 528);
  v20 = &v10[v9 + 3];
  if (v5 - 3 != v9)
  {
    if (*v20 == 58)
    {
      if (v14 < 3)
        return FigSignalErrorAt();
      v21 = (char)v10[v9 + 4];
      if ((v21 & 0x80000000) != 0)
      {
        v22 = __maskrune(v21, 0x400uLL);
        a4 = v38;
        if (!v22)
          return FigSignalErrorAt();
      }
      else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v21 + 60) & 0x400) == 0)
      {
        return FigSignalErrorAt();
      }
      v23 = (char)v10[v9 + 5];
      if ((v23 & 0x80000000) != 0)
      {
        v24 = __maskrune(v23, 0x400uLL);
        a4 = v38;
        if (!v24)
          return FigSignalErrorAt();
      }
      else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v23 + 60) & 0x400) == 0)
      {
        return FigSignalErrorAt();
      }
      v25 = *a3 * 60.0;
      *a3 = v25;
      *a3 = v25 + (double)((char)v10[v9 + 5] + 10 * (char)v10[v9 + 4] - 528);
      v20 = &v10[v9 + 6];
      v14 = v5 - v9 - 6;
    }
    else if (v9 != 2)
    {
      return FigSignalErrorAt();
    }
    if (v14 < 4 || *v20 != 46)
    {
LABEL_45:
      if (a4 && v14)
      {
        v32 = (char)*v20;
        if ((v32 & 0x80000000) != 0)
        {
          if (!__maskrune(v32, 0x4000uLL))
            return FigSignalErrorAt();
        }
        else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v32 + 60) & 0x4000) == 0)
        {
          return FigSignalErrorAt();
        }
      }
      else if (!v14)
      {
        v33 = 0;
        v34 = a5;
LABEL_61:
        if (v34)
          *v34 = v33;
        goto LABEL_63;
      }
      v33 = 0;
      v35 = (char *)&v20[v14];
      v34 = a5;
      while (1)
      {
        v36 = *v20;
        if (v36 != 32 && v36 != 9)
          goto LABEL_61;
        ++v20;
        v33 = 1;
        if (!--v14)
        {
          v20 = (unsigned __int8 *)v35;
          goto LABEL_61;
        }
      }
    }
    v26 = (char)v20[1];
    if ((v26 & 0x80000000) != 0)
    {
      v27 = __maskrune(v26, 0x400uLL);
      a4 = v38;
      if (!v27)
        return FigSignalErrorAt();
    }
    else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v26 + 60) & 0x400) == 0)
    {
      return FigSignalErrorAt();
    }
    v28 = (char)v20[2];
    if ((v28 & 0x80000000) != 0)
    {
      v29 = __maskrune(v28, 0x400uLL);
      a4 = v38;
      if (!v29)
        return FigSignalErrorAt();
    }
    else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v28 + 60) & 0x400) == 0)
    {
      return FigSignalErrorAt();
    }
    v30 = (char)v20[3];
    if ((v30 & 0x80000000) == 0)
    {
      if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v30 + 60) & 0x400) == 0)
        return FigSignalErrorAt();
      goto LABEL_44;
    }
    v31 = __maskrune(v30, 0x400uLL);
    a4 = v38;
    if (v31)
    {
LABEL_44:
      *a3 = *a3 + (double)(10 * (char)v20[2] + 100 * (char)v20[1] + (char)v20[3] - 5328) / 1000.0;
      v20 += 4;
      v14 -= 4;
      goto LABEL_45;
    }
    return FigSignalErrorAt();
  }
  v14 = 0;
LABEL_63:
  *a1 = v20;
  *a2 = v14;
  return 0;
}

uint64_t webVTTDumpSample(uint64_t result)
{
  uint64_t **i;
  char *dataPointerOut;

  for (i = *(uint64_t ***)(result + 16); i; i = (uint64_t **)*i)
  {
    dataPointerOut = 0;
    result = CMBlockBufferGetDataPointer((CMBlockBufferRef)i[2], (size_t)i[9], 0, 0, &dataPointerOut);
  }
  return result;
}

uint64_t WebVTTParserParseBlockBuffer(uint64_t a1, CMBlockBufferRef theBuffer)
{
  size_t DataLength;
  uint64_t DataPointer;
  OpaqueCMBlockBuffer *v6;
  CMBlockBufferRef *v7;
  uint64_t v8;
  int v9;
  int v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  int v20;
  size_t v21;
  size_t v22;
  char destination;
  char *dataPointerOut;

  dataPointerOut = 0;
  DataLength = CMBlockBufferGetDataLength(theBuffer);
  DataPointer = CMBlockBufferGetDataPointer(theBuffer, 0, 0, 0, &dataPointerOut);
  if ((_DWORD)DataPointer)
    return DataPointer;
  v7 = (CMBlockBufferRef *)(a1 + 40);
  v6 = *(OpaqueCMBlockBuffer **)(a1 + 40);
  if (v6)
  {
    if (DataLength)
    {
      v8 = 0;
      while (1)
      {
        v9 = dataPointerOut[v8];
        if (v9 == 10 || v9 == 13)
          break;
        if (DataLength == ++v8)
          return CMBlockBufferAppendBufferReference(*(CMBlockBufferRef *)(a1 + 40), theBuffer, 0, DataLength, 0);
      }
      if (DataLength != v8)
      {
        v11 = dataPointerOut[v8];
        if (v11 == 10)
          goto LABEL_17;
        if (v11 == 13)
        {
          if (DataLength - v8 >= 2 && dataPointerOut[v8 + 1] == 10)
          {
            v12 = 2;
            goto LABEL_19;
          }
LABEL_17:
          if (!v8)
          {
            destination = 0;
            v15 = CMBlockBufferGetDataLength(v6);
            DataPointer = CMBlockBufferCopyDataBytes(v6, v15 - 1, 1uLL, &destination);
            if ((_DWORD)DataPointer)
              return DataPointer;
            v13 = 1;
            if (destination == 13)
              v12 = 2;
            else
              v12 = 1;
            v6 = *v7;
            goto LABEL_28;
          }
          v12 = 1;
LABEL_19:
          v13 = v12 + v8;
LABEL_28:
          DataPointer = CMBlockBufferAppendBufferReference(v6, theBuffer, 0, v13, 0);
          if (!(_DWORD)DataPointer)
          {
            DataPointer = webVTTProcessLineBB(a1, v12);
            if (!(_DWORD)DataPointer)
            {
              dataPointerOut += v13;
              DataLength -= v13;
              goto LABEL_31;
            }
          }
          return DataPointer;
        }
        DataLength = v8;
      }
    }
    return CMBlockBufferAppendBufferReference(*(CMBlockBufferRef *)(a1 + 40), theBuffer, 0, DataLength, 0);
  }
LABEL_31:
  if (!DataLength)
    return 0;
  v16 = dataPointerOut;
  while (2)
  {
    v17 = 0;
    while (1)
    {
      v18 = v16[v17];
      if (v18 == 10 || v18 == 13)
        break;
      if (DataLength == ++v17)
        goto LABEL_50;
    }
    if (DataLength == v17)
      goto LABEL_50;
    v20 = v16[v17];
    if (v20 == 10)
    {
LABEL_46:
      v21 = 1;
      goto LABEL_47;
    }
    if (v20 != 13)
    {
LABEL_50:
      DataPointer = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, DataLength, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, DataLength, 1u, (CMBlockBufferRef *)(a1 + 40));
      if ((_DWORD)DataPointer)
        return DataPointer;
      v14 = CMBlockBufferReplaceDataBytes(dataPointerOut, *v7, 0, DataLength);
      if ((_DWORD)v14 && *v7)
      {
        CFRelease(*v7);
        *v7 = 0;
      }
      return v14;
    }
    if (DataLength - v17 < 2 || v16[v17 + 1] != 10)
      goto LABEL_46;
    v21 = 2;
LABEL_47:
    v22 = v21 + v17;
    v14 = webVTTProcessLine((_QWORD *)a1, v16, v21 + v17, v21);
    if (!(_DWORD)v14)
    {
      v16 = &dataPointerOut[v22];
      dataPointerOut += v22;
      DataLength = DataLength - v21 - v17;
      if (DataLength)
        continue;
    }
    return v14;
  }
}

uint64_t webVTTProcessLineBB(uint64_t a1, size_t a2)
{
  OpaqueCMBlockBuffer *v3;
  int IsRangeContiguous;
  OpaqueCMBlockBuffer *v6;
  uint64_t v7;
  const void *v8;
  uint64_t DataPointer;
  char *v10;
  size_t DataLength;
  const void *v12;
  char *v14;
  CMBlockBufferRef blockBufferOut;

  v3 = *(OpaqueCMBlockBuffer **)(a1 + 40);
  if (!v3)
    return 0;
  v14 = 0;
  blockBufferOut = 0;
  IsRangeContiguous = CMBlockBufferIsRangeContiguous(v3, 0, 0);
  v6 = *(OpaqueCMBlockBuffer **)(a1 + 40);
  if (!IsRangeContiguous)
  {
    v7 = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v6, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, 0, &blockBufferOut);
    if ((_DWORD)v7)
      return v7;
    v8 = *(const void **)(a1 + 40);
    if (v8)
      CFRelease(v8);
    v6 = blockBufferOut;
    *(_QWORD *)(a1 + 40) = blockBufferOut;
  }
  DataPointer = CMBlockBufferGetDataPointer(v6, 0, 0, 0, &v14);
  if (!(_DWORD)DataPointer)
  {
    v10 = v14;
    DataLength = CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(a1 + 40));
    DataPointer = webVTTProcessLine((_QWORD *)a1, v10, DataLength, a2);
  }
  v12 = *(const void **)(a1 + 40);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(a1 + 40) = 0;
  }
  return DataPointer;
}

uint64_t webVTTProcessLine(_QWORD *a1, void *a2, size_t a3, size_t a4)
{
  int v8;
  uint64_t v9;
  OpaqueCMBlockBuffer *v11;
  size_t DataLength;
  void *v13;
  void *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  OpaqueCMBlockBuffer *v18;
  size_t v19;
  size_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *i;
  int v28;
  char *v30;
  unsigned int v31;
  int v32;
  const void *v33;
  uint64_t v34;
  char v35;

  v8 = *((_DWORD *)a1 + 12);
  if (!v8)
  {
    if (WebVTTBufferLooksLikeWebVTTFile((char *)a2, a3))
    {
      *((_DWORD *)a1 + 12) = 1;
      return webVTTAddToHeaderGather((CMBlockBufferRef *)a1, a2, a3);
    }
    if (!*((_BYTE *)a1 + 122))
      return 0;
    v8 = 3;
    *((_DWORD *)a1 + 12) = 3;
  }
  if (v8 == 1)
  {
    if (a3 > a4)
      return webVTTAddToGather((CMBlockBufferRef *)a1, a2, a3);
    v11 = (OpaqueCMBlockBuffer *)a1[7];
    if (v11)
    {
      DataLength = CMBlockBufferGetDataLength((CMBlockBufferRef)a1[7]);
      v13 = malloc_type_malloc(DataLength, 0x38E2F8B8uLL);
      if (v13)
      {
        v14 = v13;
        v15 = CMBlockBufferCopyDataBytes(v11, 0, DataLength, v13);
        if ((_DWORD)v15)
        {
          v9 = v15;
          free(v14);
          return v9;
        }
        v16 = strnstr((const char *)v14, "-->", DataLength);
        free(v14);
        if (v16)
        {
          *((_DWORD *)a1 + 12) = 3;
          return webVTTProcessLine(a1, a2, a3, a4);
        }
      }
      else
      {
        v9 = FigSignalErrorAt();
        if ((_DWORD)v9)
          return v9;
      }
    }
    v17 = webVTTAddToGather((CMBlockBufferRef *)a1, a2, a3);
    if (!(_DWORD)v17)
    {
      v18 = (OpaqueCMBlockBuffer *)a1[7];
      if (v18)
      {
        if (a1[1] && (v19 = CMBlockBufferGetDataLength(v18)) != 0)
        {
          v20 = v19;
          v21 = (char *)malloc_type_malloc(v19 + 1, 0x4CD4F9EAuLL);
          if (v21)
          {
            v22 = v21;
            v23 = CMBlockBufferCopyDataBytes((CMBlockBufferRef)a1[7], 0, v20, v21);
            if ((_DWORD)v23 || (v23 = webVTTAddToHeaderGather((CMBlockBufferRef *)a1, v22, v20), (_DWORD)v23))
            {
LABEL_56:
              v9 = v23;
            }
            else if (*((_BYTE *)a1 + 24))
            {
              v9 = 0;
            }
            else
            {
              v35 = 0;
              v34 = 0;
              v22[v20] = 0;
              v24 = v22;
              v25 = MEMORY[0x1E0C80978];
              do
              {
                if (!*v24)
                  break;
                v26 = strpbrk(v24, "\n\r");
                i = v26;
                if (v26)
                {
                  *v26 = 0;
                  for (i = v26 + 1; ; ++i)
                  {
                    v28 = *i;
                    if (v28 != 13 && v28 != 10)
                      break;
                  }
                }
                v30 = v24 - 1;
                do
                {
                  v31 = v30[1];
                  if ((v31 & 0x80000000) != 0)
                    v32 = __maskrune(v31, 0x4000uLL);
                  else
                    v32 = *(_DWORD *)(v25 + 4 * v31 + 60) & 0x4000;
                  ++v30;
                }
                while (v32);
                v23 = ((uint64_t (*)(_QWORD, char *, char *, uint64_t *))a1[1])(*a1, v30, &v35, &v34);
                if ((_DWORD)v23)
                  goto LABEL_56;
                if (v35)
                  a1[13] = v34;
                v24 = i;
              }
              while (i);
              v9 = 0;
              *((_BYTE *)a1 + 24) = 1;
            }
            free(v22);
          }
          else
          {
            v9 = FigSignalErrorAt();
          }
        }
        else
        {
          v9 = 0;
        }
        v33 = (const void *)a1[7];
        if (v33)
        {
          CFRelease(v33);
          a1[7] = 0;
        }
        return v9;
      }
      return 0;
    }
    return v17;
  }
  if (v8 != 3 || a3 <= a4 && !a1[7])
    return 0;
  v9 = webVTTAddToGather((CMBlockBufferRef *)a1, a2, a3);
  if (a3 > a4 || !a1[7])
    return v9;
  return webVTTProcessCue((uint64_t)a1);
}

uint64_t WebVTTParserFlush(uint64_t a1, int a2, char a3)
{
  uint64_t result;
  uint64_t v7;

  result = webVTTProcessLineBB(a1, 0);
  if (!(_DWORD)result)
  {
    if (*(_QWORD *)(a1 + 56) && (*(_DWORD *)(a1 + 48) | 2) == 3)
      result = webVTTProcessCue(a1);
    else
      result = 0;
  }
  *(_DWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 122) = a3;
  if (*(uint64_t *)(a1 + 112) < 1 || (*(_QWORD *)(a1 + 112) = 0, a2))
  {
    v7 = **(_QWORD **)(*(_QWORD *)(a1 + 80) + 8);
    if (v7)
      return webVTTEmitSamples((_QWORD *)a1, *(double *)(v7 + 40) + 0.00001);
  }
  return result;
}

uint64_t webVTTProcessCue(uint64_t a1)
{
  OpaqueCMBlockBuffer *v2;
  uint64_t DataPointer;
  char *v4;
  size_t v5;
  size_t v6;
  int v7;
  BOOL v8;
  char *v9;
  size_t v10;
  char *v11;
  char *v12;
  _DWORD *v13;
  _DWORD *v14;
  int v15;
  size_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  char *v24;
  size_t v25;
  int v26;
  char *v28;
  size_t v29;
  char *v30;
  size_t v31;
  char v32;
  int v33;
  size_t v35;
  char *v36;
  int v37;
  double v40;
  double v41;
  double v42;
  size_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  int v47;
  const void *v49;
  int v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  int v55;
  uint64_t v57;
  char *v58;
  size_t v59;
  int v60;
  int v62;
  char *v63;
  double v64;
  char v65;
  uint64_t v66;
  char *v67;
  char *v68;
  int v69;
  uint64_t v70;
  void *v71;
  double v72;
  double v73;
  char v74;
  double v75;
  size_t totalLengthOut;
  char *dataPointerOut;
  CMBlockBufferRef blockBufferOut;

  dataPointerOut = 0;
  blockBufferOut = 0;
  totalLengthOut = 0;
  v74 = 0;
  if (CMBlockBufferIsRangeContiguous(*(CMBlockBufferRef *)(a1 + 56), 0, 0))
  {
    v2 = (OpaqueCMBlockBuffer *)CFRetain(*(CFTypeRef *)(a1 + 56));
    blockBufferOut = v2;
  }
  else
  {
    DataPointer = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CMBlockBufferRef *)(a1 + 56), (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, 0, &blockBufferOut);
    if ((_DWORD)DataPointer)
    {
LABEL_131:
      v22 = DataPointer;
      goto LABEL_73;
    }
    v2 = blockBufferOut;
  }
  DataPointer = CMBlockBufferGetDataPointer(v2, 0, 0, &totalLengthOut, &dataPointerOut);
  if ((_DWORD)DataPointer)
    goto LABEL_131;
  v5 = totalLengthOut;
  v4 = dataPointerOut;
  if (totalLengthOut)
  {
    v6 = 0;
    while (1)
    {
      v7 = dataPointerOut[v6];
      v8 = v7 == 10 || v7 == 13;
      if (v8)
        break;
      if (totalLengthOut == ++v6)
        goto LABEL_13;
    }
    v10 = totalLengthOut;
    v9 = dataPointerOut;
    v5 = v6;
  }
  else
  {
LABEL_13:
    if (!matchStringInBufferWithSpace("NOTE", dataPointerOut, totalLengthOut, 1, 0))
    {
LABEL_26:
      FigSignalErrorAt();
      v22 = 0;
      goto LABEL_73;
    }
    v10 = totalLengthOut;
    v9 = dataPointerOut;
  }
  v11 = strnstr(v9, "-->", v10);
  if (!v11)
  {
    v22 = 0;
    if (matchStringInBufferWithSpace("NOTE", dataPointerOut, totalLengthOut, 1, 0))
      goto LABEL_73;
    goto LABEL_26;
  }
  v12 = v11;
  v13 = malloc_type_calloc(1uLL, 0x70uLL, 0x10A004090FB26ECuLL);
  if (!v13)
  {
    DataPointer = FigSignalErrorAt();
    goto LABEL_131;
  }
  v14 = v13;
  v75 = 0.0;
  v73 = 0.0;
  *((_QWORD *)v13 + 2) = CFRetain(blockBufferOut);
  v15 = *(_DWORD *)(a1 + 132) + 1;
  *(_DWORD *)(a1 + 132) = v15;
  v14[26] = v15;
  v16 = totalLengthOut;
  v17 = dataPointerOut;
  if (v5 >= v12 - dataPointerOut)
  {
    v23 = totalLengthOut;
    goto LABEL_28;
  }
  *((_QWORD *)v14 + 5) = 0;
  *((_QWORD *)v14 + 6) = v5;
  v18 = &v17[v5];
  v19 = v16 - v5;
  totalLengthOut = v16 - v5;
  dataPointerOut = v18;
  if (v16 == v5)
    goto LABEL_48;
  v20 = *v18;
  if (v20 == 10)
  {
LABEL_49:
    v21 = 1;
    goto LABEL_50;
  }
  if (v20 != 13)
  {
LABEL_48:
    v21 = 0;
    goto LABEL_50;
  }
  if (v19 < 2 || v18[1] != 10)
    goto LABEL_49;
  v21 = 2;
LABEL_50:
  v17 = &v18[v21];
  v23 = v19 - v21;
  totalLengthOut = v23;
  dataPointerOut = v17;
  if (!v23)
    goto LABEL_69;
  v35 = v21 + v5 - v16;
  v36 = v17;
  while (1)
  {
    v37 = *v36;
    if (v37 == 10 || v37 == 13)
      break;
    ++v36;
    if (__CFADD__(v35++, 1))
      goto LABEL_69;
  }
LABEL_28:
  if (v23)
  {
    v24 = v17 + 1;
    v25 = v23 - 1;
    do
    {
      v26 = *(v24 - 1);
      if (v26 != 32 && v26 != 9)
        break;
      totalLengthOut = v25;
      dataPointerOut = v24++;
      --v25;
    }
    while (v25 != -1);
  }
  if (FigWebVTTReadTime((unsigned __int8 **)&dataPointerOut, &totalLengthOut, &v73, 1, &v74))
    goto LABEL_70;
  if (!v74)
    goto LABEL_69;
  if (!matchStringInBufferWithSpace("-->", dataPointerOut, totalLengthOut, 1, 0))
    goto LABEL_69;
  v28 = dataPointerOut;
  v29 = totalLengthOut;
  v8 = totalLengthOut == 3;
  totalLengthOut -= 3;
  dataPointerOut += 3;
  if (v8)
    goto LABEL_69;
  v30 = v28 + 4;
  v31 = v29 - 4;
  v32 = 1;
  while (1)
  {
    v33 = *(v30 - 1);
    if (v33 != 32 && v33 != 9)
      break;
    v32 = 0;
    totalLengthOut = v31;
    dataPointerOut = v30++;
    if (--v31 == -1)
      goto LABEL_60;
  }
  if ((v32 & 1) != 0)
    goto LABEL_69;
LABEL_60:
  if (FigWebVTTReadTime((unsigned __int8 **)&dataPointerOut, &totalLengthOut, &v75, 1, 0))
  {
LABEL_70:
    v22 = 0;
LABEL_71:
    if (!v14)
      goto LABEL_73;
LABEL_72:
    webVTTFreeCue(v14);
    goto LABEL_73;
  }
  if (v75 <= *((double *)v14 + 3))
  {
    v22 = FigSignalErrorAt();
    goto LABEL_72;
  }
  v40 = *(double *)(a1 + 104);
  v41 = v40 + v73;
  v73 = v41;
  v75 = v75 + v40;
  v42 = v75;
  *((double *)v14 + 3) = v41;
  *((double *)v14 + 4) = v42;
  v43 = totalLengthOut;
  if (!totalLengthOut)
  {
LABEL_69:
    FigSignalErrorAt();
    goto LABEL_70;
  }
  v44 = 0;
  v45 = dataPointerOut;
  v46 = dataPointerOut;
  while (1)
  {
    v47 = dataPointerOut[v44];
    if (v47 == 10 || v47 == 13)
      break;
    if (totalLengthOut == ++v44)
      goto LABEL_69;
  }
  if (v44)
  {
    *((_QWORD *)v14 + 7) = dataPointerOut - v4;
    *((_QWORD *)v14 + 8) = v44;
    v46 = &v45[v44];
    v43 -= v44;
    totalLengthOut = v43;
    dataPointerOut = &v45[v44];
  }
  if (!v43)
    goto LABEL_86;
  v51 = *v46;
  if (v51 != 10)
  {
    if (v51 == 13)
    {
      if (v43 >= 2 && v46[1] == 10)
      {
        v52 = 2;
        goto LABEL_88;
      }
      goto LABEL_87;
    }
LABEL_86:
    v52 = 0;
    goto LABEL_88;
  }
LABEL_87:
  v52 = 1;
LABEL_88:
  v53 = &v46[v52];
  totalLengthOut = v43 - v52;
  dataPointerOut = v53;
  if (v43 == v52)
  {
LABEL_97:
    *((_QWORD *)v14 + 9) = v53 - v4;
    goto LABEL_69;
  }
  v54 = ~v52;
  while (1)
  {
    v55 = v45[v52 + v44];
    if (v55 != 32 && v55 != 9)
      break;
    totalLengthOut = v43 + v54;
    dataPointerOut = &v45[v44 + 1 + v52++];
    --v54;
    if (v43 == v52)
    {
      v53 = &v45[v44 + v52];
      goto LABEL_97;
    }
  }
  v57 = 0;
  *((_QWORD *)v14 + 9) = v45 - v4 + v44 + v52;
  v58 = &v45[v43];
  while (1)
  {
    v59 = v43 - v52 + v57;
    v60 = v58[v57 - 1 + v44];
    if (v60 != 13 && v60 != 10)
      break;
    totalLengthOut = v59 - 1;
    if (--v57 + v43 == v52)
      goto LABEL_69;
  }
  if (*(_BYTE *)(a1 + 96) && *(double *)(a1 + 88) > v41)
    goto LABEL_69;
  *(_BYTE *)(a1 + 96) = 1;
  *(double *)(a1 + 88) = v41;
  *((_QWORD *)v14 + 10) = v59;
  do
  {
    v71 = 0;
    v72 = 0.0;
    v63 = dataPointerOut + 1;
    v62 = *dataPointerOut;
    totalLengthOut = --v59;
    ++dataPointerOut;
    if (v62 == 60)
    {
      if (v59 < 6)
      {
        v66 = 0;
        v67 = 0;
        v65 = 1;
      }
      else
      {
        if ((*v63 - 48) > 9
          || FigWebVTTReadTime((unsigned __int8 **)&dataPointerOut, &totalLengthOut, &v72, 0, 0)
          || (v64 = *(double *)(a1 + 104) + v72, v72 = v64, v41 >= v64)
          || v64 >= *((double *)v14 + 4))
        {
          v66 = 0;
          v67 = 0;
          v65 = 1;
        }
        else
        {
          v65 = 0;
          v66 = v63 - v4;
          v67 = (char *)(dataPointerOut - v63);
        }
        v59 = totalLengthOut;
      }
      if (!v59)
        goto LABEL_69;
      --v59;
      v68 = dataPointerOut + 1;
      while (1)
      {
        v69 = *(v68 - 1);
        totalLengthOut = v59;
        dataPointerOut = v68;
        if (v69 == 62)
          break;
        --v59;
        ++v68;
        if (v59 == -1)
          goto LABEL_69;
      }
      if ((v65 & 1) == 0)
      {
        v70 = (uint64_t)webVTTDuplicateCue((__int128 *)v14, &v71);
        if ((_DWORD)v70
          || (*((double *)v14 + 4) = v72, v70 = webVTTAddCueToSampleQueue((_QWORD *)a1, (uint64_t)v14), (_DWORD)v70))
        {
          v22 = v70;
          if (v71)
            webVTTFreeCue(v71);
          goto LABEL_71;
        }
        v14 = v71;
        v41 = v72;
        *((double *)v71 + 3) = v72;
        *((_QWORD *)v14 + 11) = v66;
        *((_QWORD *)v14 + 12) = v67;
        v59 = totalLengthOut;
      }
    }
  }
  while (v59);
  v22 = webVTTAddCueToSampleQueue((_QWORD *)a1, (uint64_t)v14);
  if ((_DWORD)v22)
    goto LABEL_71;
  webVTTEmitSamples((_QWORD *)a1, v73);
LABEL_73:
  v49 = *(const void **)(a1 + 56);
  if (v49)
  {
    CFRelease(v49);
    *(_QWORD *)(a1 + 56) = 0;
  }
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  return v22;
}

uint64_t webVTTEmitSamples(_QWORD *a1, double a2)
{
  double *v2;
  double *v5;
  double v6;
  double v7;
  double v8;
  uint64_t (*v9)(_QWORD, double *);
  uint64_t v10;
  double v11;
  double *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  v2 = (double *)a1[9];
  if (!v2)
    return 0;
  v5 = v2 + 5;
  v6 = v2[5];
  v7 = 0.0;
  if (v6 > a2)
  {
LABEL_19:
    v16 = v6 <= a2 && v7 < a2;
    if (!v16 || v2[4] < a2)
      return 0;
  }
  else
  {
    v8 = v2[5];
    while (1)
    {
      v9 = (uint64_t (*)(_QWORD, double *))a1[2];
      v7 = v8;
      if (v9)
      {
        if (!*((_BYTE *)a1 + 121) && *((_BYTE *)a1 + 120) && v2[4] > 0.0)
        {
          v13 = malloc_type_calloc(1uLL, 0x30uLL, 0x10A0040D182BB51uLL);
          if (!v13)
            return 4294954510;
          v14 = v13;
          v13[2] = 0;
          v13[3] = v13 + 2;
          v13[4] = 0;
          v13[5] = *((_QWORD *)v2 + 4);
          v15 = ((uint64_t (*)(_QWORD, _QWORD *))a1[2])(*a1, v13);
          webVTTFreeSample(v14);
          if ((_DWORD)v15)
            return v15;
          v9 = (uint64_t (*)(_QWORD, double *))a1[2];
        }
        *((_BYTE *)a1 + 121) = 1;
        v10 = v9(*a1, v2);
        if ((_DWORD)v10)
          return v10;
        v7 = *v5;
      }
      v11 = *v2;
      v12 = (double *)*((_QWORD *)v2 + 1);
      if (*(_QWORD *)v2)
      {
        *(_QWORD *)(*(_QWORD *)&v11 + 8) = v12;
        v12 = (double *)*((_QWORD *)v2 + 1);
      }
      else
      {
        a1[10] = v12;
      }
      *v12 = v11;
      webVTTFreeSample(v2);
      v2 = (double *)a1[9];
      if (!v2)
        break;
      v5 = v2 + 5;
      v8 = v2[5];
      if (v8 > a2)
        goto LABEL_19;
    }
    if (v7 >= a2)
      return 0;
  }
  if (!a1[2])
    return 0;
  v17 = malloc_type_calloc(1uLL, 0x30uLL, 0x10A0040D182BB51uLL);
  if (v17)
  {
    v18 = v17;
    v17[2] = 0;
    v17[3] = v17 + 2;
    *((double *)v17 + 4) = v7;
    *((double *)v17 + 5) = a2;
    *((_BYTE *)a1 + 121) = 1;
    v19 = ((uint64_t (*)(_QWORD, void *))a1[2])(*a1, v17);
    webVTTFreeSample(v18);
    return v19;
  }
  return 4294954510;
}

uint64_t WebVTTParserDestroy(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;

  v2 = (const void *)a1[5];
  if (v2)
  {
    CFRelease(v2);
    a1[5] = 0;
  }
  v3 = (const void *)a1[7];
  if (v3)
  {
    CFRelease(v3);
    a1[7] = 0;
  }
  v4 = (const void *)a1[4];
  if (v4)
  {
    CFRelease(v4);
    a1[4] = 0;
  }
  v5 = (const void *)a1[8];
  if (v5)
  {
    CFRelease(v5);
    a1[8] = 0;
  }
  v6 = (const void *)a1[17];
  if (v6)
  {
    CFRelease(v6);
    a1[17] = 0;
  }
  while (1)
  {
    v9 = (uint64_t *)a1[9];
    if (!v9)
      break;
    v7 = *v9;
    v8 = (_QWORD *)v9[1];
    if (*v9)
    {
      *(_QWORD *)(v7 + 8) = v8;
      v8 = (_QWORD *)v9[1];
    }
    else
    {
      a1[10] = v8;
    }
    *v8 = v7;
    webVTTFreeSample(v9);
  }
  free(a1);
  return 0;
}

void webVTTFreeSample(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;

  if (a1)
  {
    while (1)
    {
      v2 = (uint64_t *)a1[2];
      if (!v2)
        break;
      v3 = *v2;
      v4 = (_QWORD *)v2[1];
      if (*v2)
      {
        *(_QWORD *)(v3 + 8) = v4;
        v4 = (_QWORD *)v2[1];
      }
      else
      {
        a1[3] = v4;
      }
      *v4 = v3;
      webVTTFreeCue(v2);
    }
    free(a1);
  }
}

uint64_t WebVTTParserSetSampleBufferMediaType(uint64_t a1, int a2)
{
  if (a2 != 1935832172 && a2 != 1952807028)
    return FigSignalErrorAt();
  *(_DWORD *)(a1 + 124) = a2;
  return 0;
}

uint64_t WebVTTParserSetSourceLabel(uint64_t a1, const char *a2, int a3, const char *a4)
{
  const void *v8;
  char *v9;
  const __CFString *v10;
  const __CFUUID *v11;
  uint64_t v12;
  const __CFAllocator *v13;
  uint64_t v14;
  size_t v15;
  const __CFString *v16;
  CFIndex v17;
  size_t v18;
  uint64_t v19;
  size_t v20;
  uint64_t DataPointer;
  OpaqueCMBlockBuffer *v22;
  size_t v23;
  const void *v24;
  size_t lengthAtOffsetOut;
  size_t totalLengthOut;
  char *dataPointerOut;
  CMBlockBufferRef theBuffer;
  CMBlockBufferRef blockBufferOut;

  theBuffer = 0;
  blockBufferOut = 0;
  if (!a2 && !a3 && !a4)
  {
    v8 = *(const void **)(a1 + 136);
    if (v8)
    {
      CFRelease(v8);
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      *(_QWORD *)(a1 + 136) = 0;
    }
    else
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
    }
    goto LABEL_31;
  }
  totalLengthOut = 0;
  dataPointerOut = 0;
  lengthAtOffsetOut = 0;
  v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v14 = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, &blockBufferOut);
  if ((_DWORD)v14
    || a2 && (v15 = strlen(a2), v14 = webVTTAppendTextToBlockBuffer(a2, v15, blockBufferOut), (_DWORD)v14))
  {
    v12 = v14;
    v11 = 0;
LABEL_41:
    v10 = 0;
LABEL_43:
    v9 = 0;
    goto LABEL_29;
  }
  if (!a3)
  {
    v11 = 0;
    v10 = 0;
    v9 = 0;
    goto LABEL_18;
  }
  v11 = CFUUIDCreate(v13);
  if (!v11)
  {
    v12 = FigSignalErrorAt();
    goto LABEL_41;
  }
  v16 = CFUUIDCreateString(v13, v11);
  v10 = v16;
  if (!v16)
  {
    v12 = FigSignalErrorAt();
    goto LABEL_43;
  }
  v17 = CFStringGetLength(v16) + 1;
  v9 = (char *)malloc_type_calloc(1uLL, v17, 0x2AF43363uLL);
  if (!v9 || !CFStringGetCString(v10, v9, v17, 0x600u))
  {
LABEL_44:
    DataPointer = FigSignalErrorAt();
    goto LABEL_45;
  }
  v18 = strlen(v9);
  v19 = webVTTAppendTextToBlockBuffer(v9, v18, blockBufferOut);
  if ((_DWORD)v19)
  {
    v12 = v19;
    goto LABEL_31;
  }
LABEL_18:
  if (a4)
  {
    v20 = strlen(a4);
    DataPointer = webVTTAppendTextToBlockBuffer(a4, v20, blockBufferOut);
    if ((_DWORD)DataPointer)
      goto LABEL_45;
  }
  if (CMBlockBufferIsRangeContiguous(blockBufferOut, 0, 0))
  {
    v22 = (OpaqueCMBlockBuffer *)CFRetain(blockBufferOut);
    theBuffer = v22;
  }
  else
  {
    DataPointer = CMBlockBufferCreateContiguous(v13, blockBufferOut, v13, 0, 0, 0, 0, &theBuffer);
    if ((_DWORD)DataPointer)
      goto LABEL_45;
    v22 = theBuffer;
  }
  DataPointer = CMBlockBufferGetDataPointer(v22, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut);
  if (!(_DWORD)DataPointer)
  {
    v23 = totalLengthOut;
    if (totalLengthOut <= lengthAtOffsetOut)
    {
      v24 = *(const void **)(a1 + 136);
      if (v24)
      {
        CFRelease(v24);
        *(_QWORD *)(a1 + 136) = 0;
        v23 = totalLengthOut;
      }
      v12 = 0;
      *(_QWORD *)(a1 + 136) = CFDataCreate(v13, (const UInt8 *)dataPointerOut, v23);
      goto LABEL_29;
    }
    goto LABEL_44;
  }
LABEL_45:
  v12 = DataPointer;
LABEL_29:
  if (theBuffer)
    CFRelease(theBuffer);
LABEL_31:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (v11)
    CFRelease(v11);
  if (v10)
    CFRelease(v10);
  free(v9);
  return v12;
}

uint64_t webVTTAppendTextToBlockBuffer(const void *a1, size_t a2, CMBlockBufferRef theBuffer)
{
  size_t DataLength;
  __int16 appended;

  DataLength = CMBlockBufferGetDataLength(theBuffer);
  appended = CMBlockBufferAppendMemoryBlock(theBuffer, 0, a2, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, a2, 1u);
  if (!appended)
    return (__int16)CMBlockBufferReplaceDataBytes(a1, theBuffer, DataLength, a2);
  return appended;
}

uint64_t WebVTTParserCopyFormatDescription(uint64_t a1, _QWORD *a2)
{
  CFTypeRef v3;

  v3 = *(CFTypeRef *)(a1 + 32);
  if (v3)
    v3 = CFRetain(v3);
  *a2 = v3;
  return 0;
}

uint64_t WebVTTParserCreate(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  _QWORD *v10;

  v10 = malloc_type_calloc(1uLL, 0x90uLL, 0x10E00407F763D59uLL);
  if (!v10)
    return FigSignalErrorAt();
  v10[9] = 0;
  v10[10] = v10 + 9;
  *((_BYTE *)v10 + 120) = a4;
  *v10 = a1;
  v10[1] = a2;
  v10[2] = a3;
  *((_DWORD *)v10 + 12) = 0;
  *(_QWORD *)((char *)v10 + 124) = 0x777674747362746CLL;
  *a5 = v10;
  return 0;
}

uint64_t WebVTTCreateSampleBufferFromSample(uint64_t a1, uint64_t a2, CMTime *a3, CMSampleBufferRef *a4)
{
  CMTime *v6;
  CMFormatDescriptionRef *v8;
  const __CFAllocator *v9;
  const __CFDictionary *v10;
  OpaqueCMBlockBuffer *v11;
  OpaqueCMBlockBuffer *v12;
  CFIndex v13;
  uint64_t DataPointer;
  char *v15;
  char *v16;
  uint64_t v17;
  unsigned int v18;
  CMTimeValue value;
  const void *v20;
  CFDataRef v21;
  CMSampleBufferRef *v22;
  char *v23;
  char *v24;
  OpaqueCMBlockBuffer *v25;
  uint64_t v26;
  void **v27;
  uint64_t appended;
  uint64_t *v29;
  size_t v30;
  OpaqueCMBlockBuffer *v31;
  uint64_t Contiguous;
  double v33;
  double v34;
  double v35;
  double v36;
  CMTime rhs;
  CMBlockBufferRef theBuffer;
  size_t sampleSizeArray;
  CMSampleTimingInfo sampleTimingArray;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  CMBlockBufferRef sourceBuffer;
  size_t lengthAtOffsetOut;
  char *dataPointerOut;
  CMBlockBufferRef blockBufferOut;
  CMTime totalLengthOut[2];
  uint64_t v52;
  void *values[2];
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  void *keys[2];
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  char *v61;
  CMBlockBufferRef v62[4];

  v62[1] = *(CMBlockBufferRef *)MEMORY[0x1E0C80C00];
  sourceBuffer = 0;
  v46 = 0;
  v44 = 0u;
  v45 = 0u;
  v43 = 0u;
  memset(&sampleTimingArray, 0, sizeof(sampleTimingArray));
  theBuffer = 0;
  sampleSizeArray = 0;
  if (!a1 || !a2)
  {
    v26 = FigSignalErrorAt();
    v10 = 0;
    goto LABEL_94;
  }
  v6 = a3;
  v8 = (CMFormatDescriptionRef *)(a1 + 32);
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (*(_QWORD *)(a1 + 32))
  {
    v10 = 0;
LABEL_46:
    appended = CMBlockBufferCreateEmpty(v9, 6u, 0, &sourceBuffer);
    if ((_DWORD)appended)
      goto LABEL_93;
    appended = FigAtomWriterInitWithBlockBuffer();
    if ((_DWORD)appended)
      goto LABEL_93;
    v29 = *(uint64_t **)(a2 + 16);
    if (!v29)
    {
      appended = FigAtomWriterBeginAtom();
      if (!(_DWORD)appended)
      {
        appended = FigAtomWriterEndAtom();
        if (!(_DWORD)appended)
        {
LABEL_85:
          v33 = *(double *)(a2 + 32);
          if (v33 >= 0.0)
            v34 = 0.0005;
          else
            v34 = -0.0005;
          CMTimeMakeWithSeconds(&rhs, v33 + v34, 1000);
          totalLengthOut[0] = *v6;
          CMTimeAdd(&sampleTimingArray.presentationTimeStamp, totalLengthOut, &rhs);
          sampleTimingArray.decodeTimeStamp = sampleTimingArray.presentationTimeStamp;
          v35 = *(double *)(a2 + 40) - *(double *)(a2 + 32);
          if (v35 >= 0.0)
            v36 = 0.0005;
          else
            v36 = -0.0005;
          CMTimeMakeWithSeconds(totalLengthOut, v35 + v36, 1000);
          sampleTimingArray.duration = totalLengthOut[0];
          appended = CMBlockBufferCreateContiguous(v9, sourceBuffer, v9, 0, 0, 0, 3u, &theBuffer);
          if (!(_DWORD)appended)
          {
            sampleSizeArray = CMBlockBufferGetDataLength(theBuffer);
            appended = CMSampleBufferCreate(v9, theBuffer, 1u, 0, 0, *v8, 1, 1, &sampleTimingArray, 1, &sampleSizeArray, a4);
          }
        }
      }
      goto LABEL_93;
    }
    while (1)
    {
      v60 = 0;
      v58 = 0u;
      v59 = 0u;
      *(_OWORD *)keys = 0u;
      v56 = 0;
      v54 = 0u;
      v55 = 0u;
      *(_OWORD *)values = 0u;
      LODWORD(blockBufferOut) = 0;
      appended = FigAtomWriterBeginAtom();
      if ((_DWORD)appended)
        goto LABEL_93;
      appended = FigAtomWriterInitWithParent();
      if ((_DWORD)appended)
        goto LABEL_93;
      appended = FigAtomWriterBeginAtom();
      if ((_DWORD)appended)
        goto LABEL_93;
      LODWORD(blockBufferOut) = bswap32(*((_DWORD *)v29 + 26));
      appended = FigAtomWriterAppendData();
      if ((_DWORD)appended)
        goto LABEL_93;
      appended = FigAtomWriterEndAtom();
      if ((_DWORD)appended)
        goto LABEL_93;
      if (v29[6])
      {
        v52 = 0;
        memset(totalLengthOut, 0, sizeof(totalLengthOut));
        appended = FigAtomWriterInitWithParent();
        if ((_DWORD)appended)
          goto LABEL_93;
        appended = FigAtomWriterBeginAtom();
        if ((_DWORD)appended)
          goto LABEL_93;
        appended = FigAtomWriterAppendBlockBufferData();
        if ((_DWORD)appended)
          goto LABEL_93;
        appended = FigAtomWriterEndAtom();
        if ((_DWORD)appended)
          goto LABEL_93;
      }
      if (v29[11])
      {
        v52 = 0;
        memset(totalLengthOut, 0, sizeof(totalLengthOut));
        appended = FigAtomWriterInitWithParent();
        if ((_DWORD)appended)
          goto LABEL_93;
        appended = FigAtomWriterBeginAtom();
        if ((_DWORD)appended)
          goto LABEL_93;
        appended = FigAtomWriterAppendBlockBufferData();
        if ((_DWORD)appended)
          goto LABEL_93;
        appended = FigAtomWriterEndAtom();
        if ((_DWORD)appended)
          goto LABEL_93;
      }
      v30 = v29[8];
      if (v30)
        break;
LABEL_76:
      appended = FigAtomWriterInitWithParent();
      if ((_DWORD)appended)
        goto LABEL_93;
      appended = FigAtomWriterBeginAtom();
      if ((_DWORD)appended)
        goto LABEL_93;
      appended = FigAtomWriterAppendBlockBufferData();
      if ((_DWORD)appended)
        goto LABEL_93;
      appended = FigAtomWriterEndAtom();
      if ((_DWORD)appended)
        goto LABEL_93;
      appended = FigAtomWriterEndAtom();
      if ((_DWORD)appended)
        goto LABEL_93;
      v29 = (uint64_t *)*v29;
      if (!v29)
        goto LABEL_85;
    }
    v61 = 0;
    v62[0] = 0;
    v52 = 0;
    memset(totalLengthOut, 0, sizeof(totalLengthOut));
    v31 = (OpaqueCMBlockBuffer *)v29[2];
    if (!CMBlockBufferIsRangeContiguous(v31, v29[7], v30))
    {
      Contiguous = CMBlockBufferCreateContiguous(v9, v31, v9, 0, 0, 0, 0, v62);
      if ((_DWORD)Contiguous)
        goto LABEL_73;
      v31 = v62[0];
    }
    Contiguous = CMBlockBufferGetDataPointer(v31, v29[7], 0, 0, &v61);
    if (!(_DWORD)Contiguous)
    {
      Contiguous = FigAtomWriterInitWithParent();
      if (!(_DWORD)Contiguous)
      {
        Contiguous = FigAtomWriterBeginAtom();
        if (!(_DWORD)Contiguous)
        {
          Contiguous = FigAtomWriterAppendBlockBufferData();
          if (!(_DWORD)Contiguous)
            Contiguous = FigAtomWriterEndAtom();
        }
      }
    }
LABEL_73:
    v26 = Contiguous;
    if (v62[0])
      CFRelease(v62[0]);
    if ((_DWORD)v26)
      goto LABEL_94;
    goto LABEL_76;
  }
  v61 = 0;
  v62[0] = 0;
  keys[0] = 0;
  keys[1] = 0;
  *(_QWORD *)&v58 = 0;
  values[0] = 0;
  values[1] = 0;
  *(_QWORD *)&v54 = 0;
  blockBufferOut = 0;
  v11 = *(OpaqueCMBlockBuffer **)(a1 + 64);
  if (!v11)
  {
    v13 = 0;
    goto LABEL_25;
  }
  totalLengthOut[0].value = 0;
  lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  if (CMBlockBufferIsRangeContiguous(v11, 0, 0))
  {
    v12 = (OpaqueCMBlockBuffer *)CFRetain(*(CFTypeRef *)(a1 + 64));
    blockBufferOut = v12;
  }
  else
  {
    DataPointer = CMBlockBufferCreateContiguous(v9, *(CMBlockBufferRef *)(a1 + 64), v9, 0, 0, 0, 0, &blockBufferOut);
    if ((_DWORD)DataPointer)
    {
LABEL_104:
      v26 = DataPointer;
      v22 = a4;
LABEL_108:
      v10 = 0;
      v24 = 0;
      v13 = 0;
      goto LABEL_34;
    }
    v12 = blockBufferOut;
  }
  DataPointer = CMBlockBufferGetDataPointer(v12, 0, &lengthAtOffsetOut, (size_t *)totalLengthOut, &dataPointerOut);
  if ((_DWORD)DataPointer)
    goto LABEL_104;
  if (totalLengthOut[0].value > lengthAtOffsetOut)
  {
    v22 = a4;
    v26 = FigSignalErrorAt();
    goto LABEL_108;
  }
  v15 = dataPointerOut;
  if (!totalLengthOut[0].value)
  {
    value = 0;
    goto LABEL_24;
  }
  v16 = &dataPointerOut[totalLengthOut[0].value - 1];
  v17 = MEMORY[0x1E0C80978];
  while (1)
  {
    v18 = *v16;
    if ((v18 & 0x80000000) != 0)
      break;
    if ((*(_DWORD *)(v17 + 4 * v18 + 60) & 0x4000) == 0)
      goto LABEL_22;
LABEL_19:
    *v16-- = 0;
    if (!--totalLengthOut[0].value)
    {
      value = 0;
      goto LABEL_23;
    }
  }
  if (__maskrune(v18, 0x4000uLL))
    goto LABEL_19;
LABEL_22:
  value = totalLengthOut[0].value;
LABEL_23:
  v15 = dataPointerOut;
LABEL_24:
  keys[0] = CFSTR("vttC");
  values[0] = CFDataCreate(v9, (const UInt8 *)v15, value);
  v13 = 1;
LABEL_25:
  v20 = *(const void **)(a1 + 136);
  if (v20)
  {
    keys[v13] = CFSTR("vlab");
    values[v13++] = (void *)CFRetain(v20);
  }
  if (*(_DWORD *)(a1 + 128) != 2021028980)
  {
    v22 = a4;
    if (v13)
      goto LABEL_31;
    v10 = 0;
    v26 = 0;
    goto LABEL_102;
  }
  strcpy((char *)totalLengthOut, "wvtt");
  BYTE5(totalLengthOut[0].value) = 2;
  qmemcpy((char *)&totalLengthOut[0].value + 6, "webv2013-11-0000isom2013-04-0000", 32);
  keys[v13] = CFSTR("xnfo");
  v21 = CFDataCreate(v9, (const UInt8 *)totalLengthOut, 38);
  values[v13] = v21;
  v22 = a4;
  if (!v21)
  {
    v26 = FigSignalErrorAt();
    v10 = 0;
LABEL_102:
    v24 = 0;
    goto LABEL_34;
  }
  ++v13;
LABEL_31:
  v23 = (char *)CFDictionaryCreate(v9, (const void **)keys, (const void **)values, v13, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
  v24 = v23;
  if (v23)
  {
    v25 = (OpaqueCMBlockBuffer *)*MEMORY[0x1E0CA2240];
    v61 = v23;
    v62[0] = v25;
    v10 = CFDictionaryCreate(v9, (const void **)v62, (const void **)&v61, 1, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
    if (v10)
      v26 = 0;
    else
      v26 = FigSignalErrorAt();
  }
  else
  {
    v26 = FigSignalErrorAt();
    v10 = 0;
  }
LABEL_34:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (v24)
    CFRelease(v24);
  if (v13)
  {
    v27 = values;
    do
    {
      if (*v27)
        CFRelease(*v27);
      ++v27;
      --v13;
    }
    while (v13);
  }
  if (!(_DWORD)v26)
  {
    appended = CMFormatDescriptionCreate(v9, *(_DWORD *)(a1 + 124), *(_DWORD *)(a1 + 128), v10, v8);
    if (!(_DWORD)appended)
    {
      a4 = v22;
      v6 = a3;
      goto LABEL_46;
    }
LABEL_93:
    v26 = appended;
  }
LABEL_94:
  if (sourceBuffer)
    CFRelease(sourceBuffer);
  if (theBuffer)
    CFRelease(theBuffer);
  if (v10)
    CFRelease(v10);
  return v26;
}

uint64_t WebVTTCreateAttributedStringArrayFromSampleBuffer(unint64_t *a1, CMSampleBufferRef sbuf, const __CFArray *a3, __CFArray **a4)
{
  const __CFAllocator **v8;
  const opaqueCMFormatDescription *FormatDescription;
  const opaqueCMFormatDescription *v10;
  FourCharCode MediaSubType;
  const void *v12;
  const __CFDictionary *Extension;
  const __CFDictionary *v14;
  CFTypeID v15;
  CFTypeID v16;
  CFIndex Count;
  CFIndex v18;
  CFIndex v19;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v21;
  CFTypeID v22;
  CFTypeID v24;
  const void *v25;
  const __CFDictionary *v26;
  const __CFDictionary *v27;
  CFTypeID v28;
  const __CFData *v29;
  const __CFData *v30;
  CFTypeID v31;
  const __CFAllocator *v32;
  int v33;
  void *v34;
  CFTypeID v35;
  CFTypeID TypeID;
  CFTypeRef v37;
  const __CFArray *v38;
  CFIndex v39;
  CFIndex v40;
  CFIndex v41;
  const void *v42;
  const __CFDictionary *v43;
  const __CFString *v44;
  uint64_t v45;
  const __CFAllocator *v46;
  __CFArray *Mutable;
  uint64_t v48;
  uint64_t AtomWithType;
  void *v50;
  void *v51;
  CFMutableStringRef MutableCopy;
  __CFString *v53;
  double v54;
  uint64_t DataPointer;
  void *v56;
  char *v57;
  char *v58;
  _BOOL4 matched;
  int v60;
  BOOL v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  size_t v65;
  _BOOL4 v66;
  void *v67;
  _BOOL4 v68;
  _BOOL4 v69;
  _BOOL4 v70;
  CFAllocatorRef v71;
  _BOOL4 v72;
  int v73;
  BOOL v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  CFNumberRef v83;
  CFNumberRef v84;
  void *v85;
  size_t v86;
  _BOOL4 v87;
  void *v88;
  _BOOL4 v89;
  _BOOL4 v90;
  _BOOL4 v91;
  void *v92;
  _BOOL4 v93;
  int v94;
  BOOL v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  unint64_t v101;
  uint64_t v102;
  _BOOL4 v103;
  int v104;
  BOOL v105;
  uint64_t v106;
  unsigned __int8 *v107;
  uint64_t v108;
  uint64_t v109;
  CFNumberRef v110;
  CFNumberRef v111;
  size_t v112;
  _BOOL4 v113;
  _BOOL4 v114;
  _BOOL4 v115;
  _BOOL4 v116;
  _BOOL4 v117;
  _BOOL4 v118;
  _BOOL4 v119;
  int v120;
  BOOL v121;
  uint64_t v122;
  const char *v123;
  uint64_t v124;
  size_t v125;
  _BOOL4 v126;
  _BOOL4 v127;
  _BOOL4 v128;
  _BOOL4 v129;
  _BOOL4 v130;
  _BOOL4 v131;
  CFNumberRef v132;
  CFNumberRef v133;
  __CFString *v134;
  const __CFString *v135;
  __CFString *v136;
  uint64_t BBuf;
  const __CFString *v138;
  const __CFString *v139;
  uint64_t v140;
  __CFString *v141;
  __CFString *v142;
  const void *v143;
  const void *v144;
  CFIndex v145;
  CFIndex v146;
  CFIndex v147;
  const void *v148;
  const __CFDictionary *v149;
  const __CFString *v150;
  __CFArray **v152;
  __CFArray *v153;
  void *v154;
  const __CFAllocator *alloc;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  void *v163;
  void *v164;
  const __CFAllocator *v165;
  void *v166;
  void *v167;
  void *key;
  void *v169;
  void *v170;
  void *v171;
  void *v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  CFAllocatorRef allocator;
  CFAllocatorRef allocatora;
  void *v178;
  CFPropertyListRef plist;
  char v180;
  uint64_t v181;
  CFTypeRef cf;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  OpaqueCMBlockBuffer *v190;
  OpaqueCMBlockBuffer *v191;
  OpaqueCMBlockBuffer *v192;
  OpaqueCMBlockBuffer *v193;
  CFPropertyListFormat format;
  CFErrorRef error;
  void *v196;
  void *v197;
  void *v198;
  int valuePtr;
  size_t totalLengthOut;
  void *value;
  char *dataPointerOut[2];

  v192 = 0;
  v193 = 0;
  v190 = 0;
  v191 = 0;
  v188 = 0u;
  v189 = 0u;
  v186 = 0u;
  v187 = 0u;
  v184 = 0u;
  v185 = 0u;
  v183 = 0u;
  v181 = 0;
  cf = 0;
  v180 = 0;
  plist = 0;
  dataPointerOut[0] = 0;
  v8 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
  if (!sbuf)
    goto LABEL_59;
  FormatDescription = CMSampleBufferGetFormatDescription(sbuf);
  if (!FormatDescription)
    goto LABEL_55;
  v10 = FormatDescription;
  MediaSubType = CMFormatDescriptionGetMediaSubType(FormatDescription);
  if (MediaSubType != 1937142900 && MediaSubType != 2021028980 && MediaSubType != 2004251764)
    goto LABEL_55;
  if (v10 == (const opaqueCMFormatDescription *)a1[4])
    goto LABEL_55;
  v12 = (const void *)a1[3];
  if (v12)
  {
    CFRelease(v12);
    a1[3] = 0;
  }
  a1[4] = (unint64_t)v10;
  Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(v10, CFSTR("InlineResources"));
  if (Extension)
  {
    v14 = Extension;
    v15 = CFGetTypeID(Extension);
    if (v15 == CFDictionaryGetTypeID())
    {
      value = 0;
      if (CFDictionaryGetValueIfPresent(v14, CFSTR("InlineResourcesArray"), (const void **)&value))
      {
        if (value)
        {
          v16 = CFGetTypeID(value);
          if (v16 == CFArrayGetTypeID())
          {
            if (value)
            {
              Count = CFArrayGetCount((CFArrayRef)value);
              if (Count >= 1)
              {
                v18 = Count;
                v19 = 0;
                allocator = *v8;
                do
                {
                  ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)value, v19);
                  if (ValueAtIndex)
                  {
                    v21 = ValueAtIndex;
                    v22 = CFGetTypeID(ValueAtIndex);
                    if (v22 == CFDictionaryGetTypeID())
                    {
                      totalLengthOut = 0;
                      valuePtr = 0;
                      v197 = 0;
                      v198 = 0;
                      v196 = 0;
                      if (CFDictionaryGetValueIfPresent(v21, CFSTR("resource_role"), (const void **)&totalLengthOut)
                        && totalLengthOut != 0)
                      {
                        v24 = CFGetTypeID((CFTypeRef)totalLengthOut);
                        if (v24 == CFNumberGetTypeID())
                        {
                          CFNumberGetValue((CFNumberRef)totalLengthOut, kCFNumberSInt32Type, &valuePtr);
                          if (valuePtr == 1937013100
                            && CFDictionaryGetValueIfPresent(v21, CFSTR("resource_mimetype"), (const void **)&v198)
                            && (CFStringCompare((CFStringRef)v198, CFSTR("text/xml"), 1uLL) == kCFCompareEqualTo
                             || CFStringCompare((CFStringRef)v198, CFSTR("application/json"), 1uLL) == kCFCompareEqualTo)
                            && CFDictionaryGetValueIfPresent(v21, CFSTR("resource_mimetype_URI"), (const void **)&v197)
                            && CFEqual(v197, CFSTR("com.apple.coremedia.style-property-list"))
                            && CFDictionaryGetValueIfPresent(v21, CFSTR("resource_payload"), (const void **)&v196))
                          {
                            format = 0;
                            error = 0;
                            if (CFStringCompare((CFStringRef)v198, CFSTR("application/json"), 1uLL))
                            {
                              plist = CFPropertyListCreateWithData(allocator, (CFDataRef)v196, 0, &format, &error);
                            }
                            else if (FigJSONObjectCreateWithData())
                            {
                              plist = 0;
                            }
                          }
                        }
                      }
                    }
                  }
                  ++v19;
                }
                while (v18 != v19);
              }
            }
          }
        }
      }
      v25 = plist;
      if (plist)
        goto LABEL_261;
    }
  }
  v26 = (const __CFDictionary *)CMFormatDescriptionGetExtension(v10, (CFStringRef)*MEMORY[0x1E0CA2240]);
  if (v26)
  {
    v27 = v26;
    v28 = CFGetTypeID(v26);
    if (v28 == CFDictionaryGetTypeID())
    {
      v29 = (const __CFData *)CFDictionaryGetValue(v27, CFSTR("vttC"));
      if (v29)
      {
        v30 = v29;
        v31 = CFGetTypeID(v29);
        if (v31 == CFDataGetTypeID())
        {
          v32 = *v8;
          if (createCSSDataFromWebVTTConfiguration(v30, *v8, (CFIndex *)dataPointerOut))
          {
LABEL_55:
            if (plist)
              CFRelease(plist);
            goto LABEL_57;
          }
          if (dataPointerOut[0])
          {
            value = 0;
            v33 = FigConvertCSSStyleSheetDataToTextMarkup(v32, (const __CFData *)dataPointerOut[0], (__CFArray **)&value, 0);
            v34 = value;
            if (!v33)
            {
              if (value)
              {
                v35 = CFGetTypeID(value);
                TypeID = CFArrayGetTypeID();
                v34 = value;
                if (v35 == TypeID)
                {
                  if (value)
                  {
                    v37 = CFRetain(value);
                    v34 = value;
                  }
                  else
                  {
                    v37 = 0;
                  }
                  plist = v37;
                }
              }
            }
            if (v34)
              CFRelease(v34);
          }
        }
      }
    }
  }
  v25 = plist;
  if (plist)
  {
LABEL_261:
    if (CFPropertyListIsValid(v25, kCFPropertyListXMLFormat_v1_0))
      a1[3] = (unint64_t)CFRetain(plist);
    goto LABEL_55;
  }
LABEL_57:
  if (dataPointerOut[0])
    CFRelease(dataPointerOut[0]);
LABEL_59:
  v38 = (const __CFArray *)a1[3];
  if (v38)
  {
    webVTTStyleQueueFree((uint64_t)a1);
    v39 = CFArrayGetCount(v38);
    if (v39 >= 1)
    {
      v40 = v39;
      v41 = 0;
      v42 = (const void *)*MEMORY[0x1E0CA2C30];
      do
      {
        v43 = (const __CFDictionary *)CFArrayGetValueAtIndex(v38, v41);
        v44 = (const __CFString *)CFDictionaryGetValue(v43, v42);
        if (v44)
        {
          v45 = webVTTAddStyle((uint64_t)a1, v44, v43);
          if ((_DWORD)v45)
            goto LABEL_230;
        }
      }
      while (v40 != ++v41);
    }
    v45 = webVTTAddGenericStylesToStyleList(a1);
    if ((_DWORD)v45)
      goto LABEL_230;
  }
  else if ((const __CFArray *)a1[2] != a3)
  {
    webVTTStyleQueueFree((uint64_t)a1);
    v144 = (const void *)a1[2];
    if (v144)
    {
      CFRelease(v144);
      a1[2] = 0;
    }
    if (a3)
    {
      v145 = CFArrayGetCount(a3);
      if (v145 >= 1)
      {
        v146 = v145;
        v147 = 0;
        v148 = (const void *)*MEMORY[0x1E0CA2C30];
        while (1)
        {
          v149 = (const __CFDictionary *)CFArrayGetValueAtIndex(a3, v147);
          v150 = (const __CFString *)CFDictionaryGetValue(v149, v148);
          if (v150)
          {
            v45 = webVTTAddStyle((uint64_t)a1, v150, v149);
            if ((_DWORD)v45)
              break;
          }
          if (v146 == ++v147)
            goto LABEL_227;
        }
LABEL_230:
        AtomWithType = v45;
        v53 = 0;
        MutableCopy = 0;
LABEL_217:
        Mutable = 0;
        goto LABEL_234;
      }
LABEL_227:
      v45 = webVTTAddGenericStylesToStyleList(a1);
      if ((_DWORD)v45)
        goto LABEL_230;
      a1[2] = (unint64_t)CFRetain(a3);
    }
  }
  *a4 = 0;
  v46 = *v8;
  Mutable = CFArrayCreateMutable(v46, 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    AtomWithType = FigSignalErrorAt();
    MutableCopy = 0;
    v53 = 0;
    goto LABEL_255;
  }
  CMSampleBufferGetDataBuffer(sbuf);
  v48 = FigAtomStreamInitWithBBuf();
  if ((_DWORD)v48)
  {
    AtomWithType = v48;
LABEL_233:
    v53 = 0;
    MutableCopy = 0;
    goto LABEL_234;
  }
  AtomWithType = FigAtomStreamPositionAtFirstAtomWithType();
  v169 = (void *)*MEMORY[0x1E0CA2B10];
  v161 = (void *)*MEMORY[0x1E0CA2AB0];
  v165 = (const __CFAllocator *)*MEMORY[0x1E0CA2958];
  v166 = (void *)*MEMORY[0x1E0CA2948];
  v158 = (void *)*MEMORY[0x1E0CA2930];
  v159 = (void *)*MEMORY[0x1E0CA2928];
  v157 = (void *)*MEMORY[0x1E0CA2940];
  v164 = (void *)*MEMORY[0x1E0CA2B48];
  v167 = (void *)*MEMORY[0x1E0CA29E0];
  key = (void *)*MEMORY[0x1E0CA2B20];
  v162 = (void *)*MEMORY[0x1E0CA2938];
  v163 = (void *)*MEMORY[0x1E0CA2BA8];
  v160 = (void *)*MEMORY[0x1E0CA2BA0];
  v174 = *MEMORY[0x1E0CA2A80];
  v175 = *MEMORY[0x1E0CA2A88];
  v172 = (void *)*MEMORY[0x1E0CA29D8];
  v173 = (void *)*MEMORY[0x1E0CA2B98];
  v170 = (void *)*MEMORY[0x1E0CA2BB0];
  v171 = (void *)*MEMORY[0x1E0CA2B90];
  v50 = (void *)*MEMORY[0x1E0CA2B88];
  allocatora = (CFAllocatorRef)*MEMORY[0x1E0CA2B40];
  v178 = (void *)*MEMORY[0x1E0CA2DE0];
  v51 = (void *)*MEMORY[0x1E0CA2DD8];
  if ((_DWORD)AtomWithType)
  {
LABEL_213:
    if ((_DWORD)AtomWithType == -12890)
    {
      v53 = 0;
      MutableCopy = 0;
      goto LABEL_215;
    }
    goto LABEL_233;
  }
LABEL_69:
  LODWORD(v197) = 0;
  AtomWithType = FigAtomStreamInitWithParent();
  MutableCopy = 0;
  v53 = 0;
  if ((_DWORD)AtomWithType)
    goto LABEL_255;
  v54 = -1.0;
  while (1)
  {
    do
    {
      if ((_DWORD)AtomWithType)
      {
        if ((_DWORD)AtomWithType != -12890)
          goto LABEL_255;
        if (v192)
        {
          value = 0;
          dataPointerOut[0] = 0;
          totalLengthOut = 0;
          DataPointer = CMBlockBufferGetDataPointer(v192, 0, 0, (size_t *)&value, dataPointerOut);
          if ((_DWORD)DataPointer)
            goto LABEL_254;
          AtomWithType = webVTTParseCueAndCreateAttributedString(a1, dataPointerOut[0], (size_t)value, (const __CFDictionary *)cf, MutableCopy, v53, 0, (__CFAttributedString **)&totalLengthOut, v54);
          CFRelease(v192);
          v192 = 0;
          v143 = (const void *)totalLengthOut;
          if (totalLengthOut)
          {
            CFArrayAppendValue(Mutable, (const void *)totalLengthOut);
            CFRelease(v143);
          }
          if ((_DWORD)AtomWithType)
            goto LABEL_234;
        }
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        if (MutableCopy)
          CFRelease(MutableCopy);
        if (v53)
          CFRelease(v53);
        AtomWithType = FigAtomStreamAdvanceToNextAtomWithType();
        if ((_DWORD)AtomWithType)
          goto LABEL_213;
        goto LABEL_69;
      }
      AtomWithType = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    }
    while ((_DWORD)AtomWithType);
    if ((_DWORD)v197 == 1937011815)
      break;
    if ((_DWORD)v197 == 1668573549 && v54 < 0.0)
    {
      value = 0;
      dataPointerOut[0] = 0;
      totalLengthOut = 0;
      DataPointer = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
      if ((_DWORD)DataPointer)
        goto LABEL_254;
      DataPointer = CMBlockBufferGetDataPointer(v191, 0, (size_t *)&value, 0, dataPointerOut);
      if ((_DWORD)DataPointer)
        goto LABEL_254;
      if (!FigWebVTTReadTime((unsigned __int8 **)dataPointerOut, (unint64_t *)&value, (double *)&totalLengthOut, 0, 0))v54 = *(double *)&totalLengthOut;
      CFRelease(v191);
      v191 = 0;
    }
    else if ((_DWORD)v197 == 1987275108)
    {
      LODWORD(dataPointerOut[0]) = 0;
      DataPointer = FigAtomStreamReadCurrentAtomData();
      if ((_DWORD)DataPointer)
        goto LABEL_254;
      v140 = bswap32(dataPointerOut[0]);
      LODWORD(dataPointerOut[0]) = v140;
      v141 = (__CFString *)CFStringCreateWithFormat(v46, 0, CFSTR("%u"), v140);
      if (!v141)
      {
LABEL_253:
        DataPointer = FigSignalErrorAt();
LABEL_254:
        AtomWithType = DataPointer;
        goto LABEL_255;
      }
      v142 = v141;
      AtomWithType = webVTTAddToCueSettingsDictionary((__CFDictionary **)&cf, v169, v141);
      CFRelease(v142);
      if ((_DWORD)AtomWithType)
        goto LABEL_234;
    }
    else if ((_DWORD)v197 == 1768187246)
    {
      if (!MutableCopy)
      {
        value = 0;
        dataPointerOut[0] = 0;
        BBuf = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
        if ((_DWORD)BBuf
          || (BBuf = CMBlockBufferGetDataPointer(v190, 0, 0, (size_t *)&value, dataPointerOut), (_DWORD)BBuf))
        {
          AtomWithType = BBuf;
          MutableCopy = 0;
          goto LABEL_255;
        }
        MutableCopy = CFStringCreateMutableCopy(v46, 0, CFSTR("::cue("));
        if (!MutableCopy)
          goto LABEL_253;
        v138 = CFStringCreateWithBytes(v46, (const UInt8 *)dataPointerOut[0], (CFIndex)value, 0x8000100u, 0);
        if (!v138)
          goto LABEL_253;
        v139 = v138;
        CFStringAppend(MutableCopy, v138);
        CFRelease(v139);
        CFStringAppend(MutableCopy, CFSTR(")"));
        CFRelease(v190);
        v190 = 0;
      }
    }
    else if ((_DWORD)v197 == 1885436268 && !v192)
    {
      DataPointer = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
      if ((_DWORD)DataPointer)
        goto LABEL_254;
    }
LABEL_183:
    AtomWithType = FigAtomStreamAdvanceToNextAtom();
  }
  value = 0;
  dataPointerOut[0] = 0;
  totalLengthOut = 0;
  DataPointer = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
  if ((_DWORD)DataPointer)
    goto LABEL_254;
  v154 = v50;
  alloc = v46;
  DataPointer = CMBlockBufferGetDataPointer(v193, 0, 0, &totalLengthOut, dataPointerOut);
  if ((_DWORD)DataPointer)
    goto LABEL_254;
  v153 = Mutable;
  v198 = 0;
  if (!webVTTFindNextCueSetting((uint64_t)dataPointerOut[0], totalLengthOut, 0, (unint64_t *)&v198, &value))
  {
LABEL_182:
    CFRelease(v193);
    v193 = 0;
    Mutable = v153;
    v50 = v154;
    v46 = alloc;
    goto LABEL_183;
  }
  AtomWithType = 0;
  v152 = a4;
  v156 = v51;
  while (1)
  {
    v56 = v198;
    v57 = (char *)value;
    if ((unint64_t)value < 3)
      goto LABEL_147;
    v58 = &dataPointerOut[0][(unint64_t)v198];
    matched = matchStringInBufferWithSpace("vertical:", &dataPointerOut[0][(unint64_t)v198], (size_t)value, 0, 0);
    v60 = *v58;
    if (matched || v60 == 68 && v58[1] == 58)
    {
      v61 = v60 == 68;
      v62 = 2;
      if (!v61)
        v62 = 9;
      v63 = &v58[v62];
      v64 = -2;
      if (!v61)
        v64 = -9;
      v65 = (size_t)&v57[v64];
      v66 = matchStringInBufferWithSpace("rl", v63, (size_t)&v57[v64], 0, 1);
      v67 = v178;
      if (v66
        || (v68 = matchStringInBufferWithSpace("vertical", v63, v65, 0, 1), v67 = v178, v68)
        || (v69 = matchStringInBufferWithSpace("lr", v63, v65, 0, 1), v67 = v51, v69)
        || (v70 = matchStringInBufferWithSpace("vertical-lr", v63, v65, 0, 1), v67 = v51, v70))
      {
        v71 = allocatora;
LABEL_89:
        AtomWithType = webVTTAddToCueSettingsDictionary((__CFDictionary **)&cf, v71, v67);
      }
LABEL_90:
      if ((_DWORD)AtomWithType)
        goto LABEL_252;
      goto LABEL_147;
    }
    v72 = matchStringInBufferWithSpace("line:", v58, (size_t)v57, 0, 0);
    v73 = *v58;
    if (v72 || v73 == 76 && v58[1] == 58)
    {
      v74 = v73 == 76;
      v75 = 2;
      if (!v74)
        v75 = 5;
      v76 = &v58[v75];
      v77 = -2;
      if (!v74)
        v77 = -5;
      v78 = (uint64_t)&v57[v77];
      v79 = memchr(v76, 44, (size_t)&v57[v77]);
      v80 = (unint64_t)v79;
      if (v79)
        v81 = v79 - v76;
      else
        v81 = v78;
      v82 = webVTTReadFloatingPointNumberOrPercent((unsigned __int8 *)v76, v81, &v180, (double *)&v181);
      if ((_DWORD)v82)
      {
LABEL_125:
        AtomWithType = v82;
        goto LABEL_126;
      }
      v83 = CFNumberCreate(alloc, kCFNumberDoubleType, &v181);
      if (v83)
      {
        v84 = v83;
        v85 = (void *)(v180 ? v175 : v174);
        AtomWithType = webVTTAddToCueSettingsDictionary((__CFDictionary **)&cf, v85, v83);
        CFRelease(v84);
        if ((_DWORD)AtomWithType)
        {
LABEL_251:
          a4 = v152;
          goto LABEL_252;
        }
      }
      a4 = v152;
      if (!v80)
        goto LABEL_174;
      v86 = (size_t)&v76[v78 + ~v80];
      v87 = matchStringInBufferWithSpace("start", (const char *)(v80 + 1), v86, 0, 0);
      v88 = v173;
      if (!v87)
      {
        v89 = matchStringInBufferWithSpace("middle", (const char *)(v80 + 1), v86, 0, 0);
        v88 = v171;
        if (!v89)
        {
          v90 = matchStringInBufferWithSpace("center", (const char *)(v80 + 1), v86, 0, 0);
          v88 = v171;
          if (!v90)
          {
            v91 = matchStringInBufferWithSpace("end", (const char *)(v80 + 1), v86, 0, 0);
            v88 = v154;
            if (!v91)
              goto LABEL_174;
          }
        }
      }
      v92 = v172;
      goto LABEL_146;
    }
    v93 = matchStringInBufferWithSpace("position:", v58, (size_t)v57, 0, 0);
    v94 = *v58;
    if (!v93 && (v94 != 84 || v58[1] != 58))
      break;
    v95 = v94 == 84;
    v96 = 2;
    if (!v95)
      v96 = 9;
    v97 = &v58[v96];
    v98 = -2;
    if (!v95)
      v98 = -9;
    v99 = (uint64_t)&v57[v98];
    v100 = memchr(v97, 44, (size_t)&v57[v98]);
    v101 = (unint64_t)v100;
    if (v100)
      v102 = v100 - v97;
    else
      v102 = v99;
    v82 = webVTTReadFloatingPointNumberOrPercent((unsigned __int8 *)v97, v102, &v180, (double *)&v181);
    if ((_DWORD)v82)
      goto LABEL_125;
    v110 = CFNumberCreate(alloc, kCFNumberDoubleType, &v181);
    if (v110)
    {
      v111 = v110;
      AtomWithType = webVTTAddToCueSettingsDictionary((__CFDictionary **)&cf, key, v110);
      CFRelease(v111);
      if ((_DWORD)AtomWithType)
        goto LABEL_251;
    }
    a4 = v152;
    if (!v101)
      goto LABEL_174;
    v112 = (size_t)&v97[v99 + ~v101];
    v113 = matchStringInBufferWithSpace("start", (const char *)(v101 + 1), v112, 0, 0);
    v88 = v170;
    if (!v113)
    {
      v114 = matchStringInBufferWithSpace("line-left", (const char *)(v101 + 1), v112, 0, 0);
      v88 = v170;
      if (!v114)
      {
        v115 = matchStringInBufferWithSpace("middle", (const char *)(v101 + 1), v112, 0, 0);
        v88 = v163;
        if (!v115)
        {
          v116 = matchStringInBufferWithSpace("center", (const char *)(v101 + 1), v112, 0, 0);
          v88 = v163;
          if (!v116)
          {
            v117 = matchStringInBufferWithSpace("end", (const char *)(v101 + 1), v112, 0, 0);
            v88 = v160;
            if (!v117)
            {
              v118 = matchStringInBufferWithSpace("line-right", (const char *)(v101 + 1), v112, 0, 0);
              v88 = v160;
              if (!v118)
              {
                matchStringInBufferWithSpace("auto", (const char *)(v101 + 1), v112, 0, 0);
LABEL_174:
                AtomWithType = 0;
LABEL_126:
                v51 = v156;
                goto LABEL_147;
              }
            }
          }
        }
      }
    }
    v92 = v167;
LABEL_146:
    AtomWithType = webVTTAddToCueSettingsDictionary((__CFDictionary **)&cf, v92, v88);
    v51 = v156;
    if ((_DWORD)AtomWithType)
      goto LABEL_252;
LABEL_147:
    v198 = &v57[(_QWORD)v56];
    if (!webVTTFindNextCueSetting((uint64_t)dataPointerOut[0], totalLengthOut, (unint64_t)&v57[(_QWORD)v56], (unint64_t *)&v198, &value))goto LABEL_182;
  }
  v103 = matchStringInBufferWithSpace("size:", v58, (size_t)v57, 0, 0);
  v104 = *v58;
  if (v103 || v104 == 83 && v58[1] == 58)
  {
    v105 = v104 == 83;
    v106 = 2;
    if (!v105)
      v106 = 5;
    v107 = (unsigned __int8 *)&v58[v106];
    v108 = -2;
    if (!v105)
      v108 = -5;
    v109 = webVTTReadFloatingPointNumberOrPercent(v107, (uint64_t)&v57[v108], &v180, (double *)&v181);
    if ((_DWORD)v109)
    {
      AtomWithType = v109;
      goto LABEL_147;
    }
    v132 = CFNumberCreate(alloc, kCFNumberDoubleType, &v181);
    if (!v132)
      goto LABEL_172;
    v133 = v132;
    AtomWithType = webVTTAddToCueSettingsDictionary((__CFDictionary **)&cf, v164, v132);
    CFRelease(v133);
    goto LABEL_90;
  }
  v119 = matchStringInBufferWithSpace("align:", v58, (size_t)v57, 0, 0);
  v120 = *v58;
  if (v119 || v120 == 65 && v58[1] == 58)
  {
    v121 = v120 == 65;
    v122 = 6;
    if (v121)
      v122 = 2;
    v123 = &v58[v122];
    v124 = -6;
    if (v121)
      v124 = -2;
    v125 = (size_t)&v57[v124];
    v126 = matchStringInBufferWithSpace("start", v123, (size_t)&v57[v124], 0, 1);
    v67 = v166;
    if (v126)
      goto LABEL_162;
    v127 = matchStringInBufferWithSpace("middle", v123, v125, 0, 1);
    v67 = v162;
    if (v127)
      goto LABEL_162;
    v128 = matchStringInBufferWithSpace("center", v123, v125, 0, 1);
    v67 = v162;
    if (v128
      || (v129 = matchStringInBufferWithSpace("end", v123, v125, 0, 1), v67 = v159, v129)
      || (v130 = matchStringInBufferWithSpace("left", v123, v125, 0, 1), v67 = v158, v130)
      || (v131 = matchStringInBufferWithSpace("right", v123, v125, 0, 1), v67 = v157, v131))
    {
LABEL_162:
      v71 = v165;
      goto LABEL_89;
    }
    goto LABEL_90;
  }
  if (!matchStringInBufferWithSpace("region:", v58, (size_t)v57, 0, 0))
    goto LABEL_147;
  v134 = (__CFString *)CFStringCreateWithBytes(alloc, (const UInt8 *)v58 + 7, (CFIndex)(v57 - 7), 0x8000100u, 0);
  if (v134)
  {
    v135 = v134;
    AtomWithType = webVTTAddToCueSettingsDictionary((__CFDictionary **)&cf, v161, v134);
    CFRelease(v135);
    if ((_DWORD)AtomWithType)
      goto LABEL_252;
    v136 = CFStringCreateMutableCopy(alloc, 0, CFSTR("::cue-region("));
    v53 = v136;
    if (v136)
    {
      CFStringAppend(v136, CFSTR("#"));
      CFStringAppend(v53, v135);
      CFStringAppend(v53, CFSTR(")"));
LABEL_172:
      AtomWithType = 0;
      goto LABEL_147;
    }
  }
  AtomWithType = FigSignalErrorAt();
LABEL_252:
  Mutable = v153;
LABEL_255:
  if (!(_DWORD)AtomWithType)
  {
LABEL_215:
    if (CFArrayGetCount(Mutable) >= 1)
    {
      AtomWithType = 0;
      *a4 = Mutable;
      goto LABEL_217;
    }
    AtomWithType = 0;
  }
LABEL_234:
  if (v190)
    CFRelease(v190);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (v53)
    CFRelease(v53);
  if (Mutable)
    CFRelease(Mutable);
  if (cf)
    CFRelease(cf);
  if (v193)
    CFRelease(v193);
  if (v191)
    CFRelease(v191);
  if (v192)
    CFRelease(v192);
  return AtomWithType;
}

void webVTTStyleQueueFree(uint64_t a1)
{
  uint64_t *i;
  uint64_t v3;
  const void *v4;

  for (i = *(uint64_t **)a1; *(_QWORD *)a1; i = *(uint64_t **)a1)
  {
    v3 = *i;
    *(_QWORD *)a1 = *i;
    if (!v3)
      *(_QWORD *)(a1 + 8) = a1;
    webVTTSelectorClean((uint64_t)(i + 1));
    v4 = (const void *)i[5];
    if (v4)
      CFRelease(v4);
    free(i);
  }
}

uint64_t webVTTAddStyle(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFTypeRef *v6;
  CFTypeRef *v7;
  const void *v8;
  uint64_t v9;
  const __CFArray *v10;
  uint64_t v11;

  v6 = (CFTypeRef *)malloc_type_calloc(1uLL, 0x38uLL, 0x1060040BA70D472uLL);
  if (v6)
  {
    v7 = v6;
    v8 = (const void *)*MEMORY[0x1E0CA2DB0];
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA2DB0]))
    {
      v7[1] = CFRetain(v8);
      v7[2] = CFRetain(v8);
    }
    else
    {
      v9 = webVTTCreateSelectorFromString(a2, 0, v7 + 1);
      if ((_DWORD)v9)
      {
        v11 = v9;
        free(v7);
        return v11;
      }
    }
    if (v7[4])
      *((_DWORD *)v7 + 12) = 1000;
    v10 = (const __CFArray *)v7[3];
    if (v10)
      *((_DWORD *)v7 + 12) += CFArrayGetCount(v10) + 10;
    if (v7[2])
      ++*((_DWORD *)v7 + 12);
    v11 = 0;
    v7[5] = CFRetain(a3);
    *v7 = 0;
    **(_QWORD **)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 8) = v7;
    return v11;
  }
  return FigSignalErrorAt();
}

uint64_t webVTTAddGenericStylesToStyleList(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const __CFAllocator *v5;
  const CFDictionaryKeyCallBacks *v6;
  const CFDictionaryValueCallBacks *v7;
  _QWORD *v8;
  CFDictionaryRef v9;
  CFDictionaryRef v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  CFNumberRef v21;
  CFNumberRef v22;
  CFNumberRef v23;
  CFNumberRef v24;
  CFArrayRef v25;
  CFDictionaryRef v26;
  CFDictionaryRef v27;
  uint64_t v28;
  CFTypeRef cf;
  double v31;
  double v32;
  double v33;
  double valuePtr;
  _QWORD v35[48];
  _QWORD v36[2];
  uint64_t v37;
  const __CFString *v38;
  uint64_t v39;
  uint64_t v40;
  const __CFString *v41;
  uint64_t v42;
  uint64_t v43;
  void *values[6];

  v2 = 0;
  values[4] = *(void **)MEMORY[0x1E0C80C00];
  v3 = *MEMORY[0x1E0CA2978];
  v36[0] = CFSTR("b");
  v36[1] = v3;
  v37 = *MEMORY[0x1E0C9AE50];
  v38 = CFSTR("i");
  v39 = *MEMORY[0x1E0CA2A50];
  v40 = v37;
  v4 = *MEMORY[0x1E0CA2B38];
  v41 = CFSTR("u");
  v42 = v4;
  v43 = v37;
  cf = 0;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v6 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v7 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  while (1)
  {
    v8 = (_QWORD *)*a1;
    if (!*a1)
      break;
    while (v8[4] || v8[3] || !FigCFEqual())
    {
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_7;
    }
LABEL_9:
    if (++v2 == 3)
    {
      v12 = 0;
      v13 = *MEMORY[0x1E0CA2A20];
      v35[0] = CFSTR(".white");
      v35[1] = v13;
      v14 = 0xFF00FF00FF00FFLL;
      v35[2] = 0xFF00FF00FF00FFLL;
      v35[3] = CFSTR(".lime");
      v35[4] = v13;
      v15 = 0xFF000000FF0000;
      v35[5] = 0xFF000000FF0000;
      v35[6] = CFSTR(".cyan");
      v35[7] = v13;
      v16 = 0xFF00FF00FF0000;
      v35[8] = 0xFF00FF00FF0000;
      v35[9] = CFSTR(".red");
      v35[10] = v13;
      v17 = 0xFF0000000000FFLL;
      v35[11] = 0xFF0000000000FFLL;
      v35[12] = CFSTR(".yellow");
      v35[13] = v13;
      v35[14] = 0xFF000000FF00FFLL;
      v35[15] = CFSTR(".magenta");
      v35[16] = v13;
      v35[17] = 0xFF00FF000000FFLL;
      v35[18] = CFSTR(".blue");
      v35[19] = v13;
      v35[20] = 0xFF00FF00000000;
      v35[21] = CFSTR(".black");
      v35[22] = v13;
      v35[23] = 0xFF000000000000;
      v18 = *MEMORY[0x1E0CA29B8];
      v35[24] = CFSTR(".bg_white");
      v35[25] = v18;
      v35[26] = 0xFF00FF00FF00FFLL;
      v35[27] = CFSTR(".bg_lime");
      v35[28] = v18;
      v35[29] = 0xFF000000FF0000;
      v35[30] = CFSTR(".bg_cyan");
      v35[31] = v18;
      v35[32] = 0xFF00FF00FF0000;
      v35[33] = CFSTR(".bg_red");
      v35[34] = v18;
      v35[35] = 0xFF0000000000FFLL;
      v35[36] = CFSTR(".bg_yellow");
      v35[37] = v18;
      v35[38] = 0xFF000000FF00FFLL;
      v35[39] = CFSTR(".bg_magenta");
      v35[40] = v18;
      v35[41] = 0xFF00FF000000FFLL;
      v35[42] = CFSTR(".bg_blue");
      v35[43] = v18;
      v35[44] = 0xFF00FF00000000;
      v35[45] = CFSTR(".bg_black");
      v35[46] = v18;
      v35[47] = 0xFF000000000000;
      while (1)
      {
        v19 = (_QWORD *)*a1;
        if (*a1)
        {
          while (v19[4] || v19[2] || !FigCFEqual())
          {
            v19 = (_QWORD *)*v19;
            if (!v19)
              goto LABEL_16;
          }
        }
        else
        {
LABEL_16:
          v20 = &v35[3 * v12];
          LOWORD(v14) = *((_WORD *)v20 + 11);
          LOWORD(v15) = *((_WORD *)v20 + 8);
          LOWORD(v16) = *((_WORD *)v20 + 9);
          LOWORD(v17) = *((_WORD *)v20 + 10);
          v33 = (double)v15 / 255.0;
          valuePtr = (double)v14 / 255.0;
          v31 = (double)v17 / 255.0;
          v32 = (double)v16 / 255.0;
          v21 = CFNumberCreate(v5, kCFNumberCGFloatType, &valuePtr);
          v22 = CFNumberCreate(v5, kCFNumberCGFloatType, &v33);
          v23 = CFNumberCreate(v5, kCFNumberCGFloatType, &v32);
          v24 = CFNumberCreate(v5, kCFNumberCGFloatType, &v31);
          values[0] = v21;
          values[1] = v22;
          values[2] = v23;
          values[3] = v24;
          v25 = CFArrayCreate(v5, (const void **)values, 4, MEMORY[0x1E0C9B378]);
          CFRelease(v21);
          CFRelease(v22);
          CFRelease(v23);
          CFRelease(v24);
          cf = v25;
          if (!v25
            || (v26 = CFDictionaryCreate(v5, (const void **)&v35[3 * v12 + 1], &cf, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) == 0)
          {
            v11 = FigSignalErrorAt();
            goto LABEL_24;
          }
          v27 = v26;
          v28 = webVTTAddStyle((uint64_t)a1, (const __CFString *)*v20, v26);
          if ((_DWORD)v28)
          {
            v11 = v28;
LABEL_25:
            if (cf)
              CFRelease(cf);
            if (v27)
              CFRelease(v27);
            return v11;
          }
          if (cf)
          {
            CFRelease(cf);
            cf = 0;
          }
          CFRelease(v27);
        }
        if (++v12 == 16)
        {
          v11 = 0;
LABEL_24:
          v27 = 0;
          goto LABEL_25;
        }
      }
    }
  }
LABEL_7:
  v9 = CFDictionaryCreate(v5, (const void **)&v36[3 * v2 + 1], (const void **)&v36[3 * v2 + 2], 1, v6, v7);
  if (!v9)
    return FigSignalErrorAt();
  v10 = v9;
  v11 = webVTTAddStyle((uint64_t)a1, (const __CFString *)v36[3 * v2], v9);
  CFRelease(v10);
  if (!(_DWORD)v11)
    goto LABEL_9;
  return v11;
}

uint64_t webVTTFindNextCueSetting(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4, _QWORD *a5)
{
  int v6;
  uint64_t v8;
  unint64_t v9;
  int v10;

  if (a2 - 1 <= a3 || a2 == a3)
    return 0;
  while (1)
  {
    v6 = *(unsigned __int8 *)(a1 + a3);
    if (v6 != 32 && v6 != 9)
      break;
    if (a2 == ++a3)
      return 0;
  }
  v8 = 0;
  v9 = a1 + a2;
  while (1)
  {
    v10 = *(unsigned __int8 *)(a1 + v8 + a3);
    if (v10 == 9 || v10 == 32)
      break;
    if (a2 - a3 == ++v8)
      goto LABEL_17;
  }
  v9 = a1 + a3 + v8;
LABEL_17:
  if (a1 + a3 >= v9)
    return 0;
  *a4 = a3;
  *a5 = v9 - a1 - a3;
  return 1;
}

BOOL matchStringInBufferWithSpace(const char *a1, const char *a2, size_t a3, int a4, int a5)
{
  size_t v10;
  _BOOL8 result;
  size_t v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;

  v10 = strlen(a1);
  if (v10 > a3)
    return 0;
  v12 = v10;
  if (a4)
    v13 = strncmp(a1, a2, v10);
  else
    v13 = strncasecmp(a1, a2, v10);
  v14 = v13;
  result = v13 == 0;
  if (v12 < a3 && a5 && !v14)
  {
    v15 = a2[v12];
    if ((v15 & 0x80000000) != 0)
      v16 = __maskrune(v15, 0x4000uLL);
    else
      v16 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v15 + 60) & 0x4000;
    return v16 != 0;
  }
  return result;
}

uint64_t webVTTAddToCueSettingsDictionary(__CFDictionary **a1, void *key, void *value)
{
  __CFDictionary *Mutable;

  Mutable = *a1;
  if (Mutable)
    goto LABEL_4;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    *a1 = Mutable;
LABEL_4:
    CFDictionaryAddValue(Mutable, key, value);
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t webVTTReadFloatingPointNumberOrPercent(unsigned __int8 *a1, uint64_t a2, _BYTE *a3, double *a4)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  unsigned int v13;
  int v15;
  BOOL v16;
  int v17;
  double v18;

  *a4 = 0.0;
  v4 = *a1;
  v5 = v4 == 45;
  if (v4 == 45)
    v6 = -1;
  else
    v6 = 1;
  v7 = a2 - v5;
  if (a2 == v5)
  {
    v10 = 0;
LABEL_28:
    v18 = (double)(v10 * v6);
    goto LABEL_29;
  }
  v8 = 0;
  v9 = 0;
  v10 = 0;
  if (v4 == 45)
    v11 = a1 + 1;
  else
    v11 = a1;
  v12 = 1;
  while (1)
  {
    v13 = (char)*v11 - 48;
    if (v13 <= 9 && v9 == 0)
    {
      v9 = 0;
      v10 = v13 + 10 * v10;
      goto LABEL_18;
    }
    v15 = *v11;
    if (v15 != 46)
      break;
    v9 = 1;
LABEL_18:
    ++v11;
    if (!--v7)
    {
      v16 = 0;
      goto LABEL_20;
    }
  }
  if (v13 <= 9)
  {
    v8 = v13 + 10 * v8;
    v12 *= 10;
    goto LABEL_18;
  }
  if (v15 != 37)
    return FigSignalErrorAt();
  v16 = v7 != 1;
  LODWORD(v7) = 1;
LABEL_20:
  v17 = v4 == 45 ? v7 : 0;
  if (v16 || v17)
    return FigSignalErrorAt();
  if (!v9)
    goto LABEL_28;
  v18 = ((double)v8 / (double)v12 + (double)v10) * (double)v6;
LABEL_29:
  *a4 = v18;
  *a3 = v7;
  return 0;
}

uint64_t webVTTParseCueAndCreateAttributedString(unint64_t *a1, char *a2, size_t a3, const __CFDictionary *a4, const void *a5, const void *a6, const void *a7, __CFAttributedString **a8, double a9)
{
  size_t v14;
  char *v17;
  CFMutableStringRef Mutable;
  uint64_t active;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  char *v25;
  char v26;
  char v27;
  CFIndex Length;
  char *v29;
  _BYTE *v30;
  size_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  const __CFArray *MutableCopy;
  CFIndex Count;
  BOOL v37;
  const void *ValueAtIndex;
  const void *v39;
  CFStringRef v40;
  const UInt8 *v41;
  unsigned int v42;
  const __CFAllocator *v43;
  const __CFAllocator *v44;
  CFIndex v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 v48;
  const char *v49;
  int v50;
  int v51;
  unsigned __int8 v52;
  const __CFString *v53;
  CFStringRef v54;
  const __CFString *v55;
  __CFString *v56;
  __CFString *v57;
  char *v58;
  char v59;
  _BOOL4 matched;
  CFIndex v61;
  unsigned int v62;
  const UInt8 *v63;
  unsigned int v64;
  int v65;
  const __CFArray *v66;
  int64_t v67;
  size_t v68;
  char *v69;
  _BYTE *v70;
  _BYTE *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const __CFArray *v80;
  CFMutableArrayRef v81;
  CFMutableArrayRef v82;
  double v83;
  int v84;
  const __CFAttributedString *Copy;
  const UInt8 *v86;
  CFIndex v87;
  unsigned int v88;
  int v89;
  uint64_t v90;
  BOOL v91;
  BOOL v92;
  CFIndex v93;
  uint64_t v94;
  const UInt8 *v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  int v99;
  const UInt8 *v100;
  CFIndex v101;
  const UInt8 *v102;
  unsigned int v103;
  int v104;
  BOOL v105;
  CFStringRef v106;
  CFStringRef v107;
  CFStringRef v108;
  __CFString *v109;
  __CFString *v110;
  CFNumberRef v111;
  CFAttributedStringRef v112;
  const __CFAttributedString *v113;
  _QWORD *v114;
  _QWORD *v115;
  CFTypeRef v116;
  _QWORD *v117;
  unint64_t v118;
  BOOL v119;
  size_t v120;
  const __CFAllocator *v121;
  const __CFString *v122;
  __CFAttributedString *v123;
  __CFAttributedString *v124;
  void *v125;
  CFStringRef v126;
  const __CFDictionary *v127;
  const void *v128;
  uint64_t **v129;
  CFRange v130;
  uint64_t *v131;
  const void *v132;
  const __CFArray *v133;
  CFMutableDictionaryRef v134;
  CFIndex v135;
  uint64_t v136;
  const __CFString *v137;
  uint64_t v138;
  unint64_t i;
  const __CFArray *v140;
  CFIndex v141;
  CFIndex v142;
  CFIndex v143;
  CFIndex v144;
  const void *v145;
  unint64_t *v146;
  _QWORD *v147;
  unint64_t *v148;
  unint64_t **v149;
  unint64_t v150;
  _QWORD *j;
  CFMutableStringRef v152;
  uint64_t v153;
  _QWORD *v154;
  const void *v155;
  const void *v156;
  uint64_t v157;
  _QWORD *v158;
  const void *v159;
  const void *v160;
  uint64_t *v161;
  _QWORD *v162;
  __CFAttributedString **v164;
  char *v165;
  CFMutableAttributedStringRef v166;
  __CFAttributedString *v167;
  const __CFString *attrName;
  CFStringRef attrNamea;
  CFTypeRef cf;
  CFTypeRef cfa;
  CFMutableStringRef theString;
  CFTypeRef cf1;
  CFTypeRef cf1a;
  CFDictionaryRef replacementa;
  BOOL v177;
  const __CFAllocator *allocator;
  unint64_t *v179;
  void *v180;
  void **v181;
  size_t valuePtr;
  CFAttributedStringRef aStr;
  double v184;
  _QWORD *v185;
  unint64_t *v186;
  __int128 v187;
  __int128 v188;
  CFRange v189;
  CFRange v190;
  CFRange v191;
  CFRange v192;
  CFRange v193;
  CFRange v194;

  v14 = a3;
  v180 = 0;
  v181 = &v180;
  v17 = (char *)malloc_type_malloc(a3 + 1, 0xFC0B79F8uLL);
  if (!v17
    || (allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00],
        (Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0)) == 0))
  {
    v20 = FigSignalErrorAt();
    theString = 0;
    goto LABEL_322;
  }
  v179 = a1;
  v164 = a8;
  theString = Mutable;
  if (a7)
  {
    active = webVTTAddActiveAttribute((uint64_t)&v180, (const void *)*MEMORY[0x1E0CA29F8], a7, 0);
    if ((_DWORD)active)
    {
LABEL_320:
      v20 = active;
      free(v17);
      v152 = theString;
      goto LABEL_300;
    }
  }
  else
  {
    active = webVTTPushTag((uint64_t)&v180, (const void *)*MEMORY[0x1E0CA2DB0], 0);
    if ((_DWORD)active)
      goto LABEL_320;
    active = webVTTPushTag((uint64_t)&v180, CFSTR("::cue"), 0);
    if ((_DWORD)active)
      goto LABEL_320;
    if (a5)
    {
      active = webVTTPushTag((uint64_t)&v180, a5, 0);
      if ((_DWORD)active)
        goto LABEL_320;
    }
    if (a6)
    {
      active = webVTTPushTag((uint64_t)&v180, CFSTR("::cue-region"), 0);
      if ((_DWORD)active)
        goto LABEL_320;
      active = webVTTPushTag((uint64_t)&v180, a6, 0);
      if ((_DWORD)active)
        goto LABEL_320;
    }
  }
  if (a9 >= 0.0)
    v20 = webVTTPushTag((uint64_t)&v180, CFSTR(":past"), 0);
  else
    v20 = 0;
  v165 = v17;
  if (!v14)
  {
    v122 = theString;
    v121 = allocator;
    goto LABEL_235;
  }
  v177 = 0;
  v21 = 0;
  cf1 = (CFTypeRef)*MEMORY[0x1E0CA29F8];
  attrName = (const __CFString *)*MEMORY[0x1E0CA2B00];
  cf = (CFTypeRef)*MEMORY[0x1E0CA2AD8];
  while (1)
  {
    v22 = *a2;
    if (v22 == 38)
    {
      if (matchStringInBufferWithSpace("&amp;", a2, v14, 0, 0))
      {
        v17[v21++] = 38;
        goto LABEL_25;
      }
      if (matchStringInBufferWithSpace("&lt;", a2, v14, 0, 0))
      {
        v27 = 60;
      }
      else
      {
        if (!matchStringInBufferWithSpace("&gt;", a2, v14, 0, 0))
        {
          if (matchStringInBufferWithSpace("&lrm;", a2, v14, 0, 0))
          {
            v58 = &v17[v21];
            *(_WORD *)&v17[v21] = -32542;
            v59 = -114;
          }
          else
          {
            if (!matchStringInBufferWithSpace("&rlm;", a2, v14, 0, 0))
            {
              if (matchStringInBufferWithSpace("&nbsp;", a2, v14, 0, 0))
              {
                *(_WORD *)&v17[v21] = -24382;
                v21 += 2;
                v25 = a2 + 6;
                v14 -= 6;
                goto LABEL_106;
              }
LABEL_38:
              v25 = a2 + 1;
              --v14;
              goto LABEL_106;
            }
            v58 = &v17[v21];
            *(_WORD *)&v17[v21] = -32542;
            v59 = -113;
          }
          v58[2] = v59;
          v21 += 3;
LABEL_25:
          v25 = a2 + 5;
          v14 -= 5;
          goto LABEL_106;
        }
        v27 = 62;
      }
      v17[v21++] = v27;
      v25 = a2 + 4;
      v14 -= 4;
      goto LABEL_106;
    }
    if (v22 != 60)
    {
      v26 = *a2;
      if ((char)v22 < 0)
      {
        if (!__maskrune((char)v22, 0x4000uLL))
          goto LABEL_37;
      }
      else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * (char)v22 + 60) & 0x4000) == 0)
      {
        goto LABEL_37;
      }
      if (v22 == 13 || v22 == 10)
      {
        if (v21 && v17[v21 - 1] == 10)
          goto LABEL_38;
        v26 = 10;
        goto LABEL_37;
      }
      if (!v21)
      {
        if (v177)
          goto LABEL_38;
        v21 = 0;
        goto LABEL_37;
      }
      v46 = v17[v21 - 1];
      if ((v17[v21 - 1] & 0x80000000) == 0)
      {
        if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v46 + 60) & 0x4000) == 0)
          goto LABEL_37;
LABEL_97:
        if ((_DWORD)v46 != 10 && (_DWORD)v46 != 13)
          goto LABEL_38;
        goto LABEL_37;
      }
      if (__maskrune(v17[v21 - 1], 0x4000uLL))
        goto LABEL_97;
LABEL_37:
      v177 = 0;
      v17[v21++] = v26;
      goto LABEL_38;
    }
    if (v21)
    {
      v23 = v17[v21 - 1];
      if (v17[v21 - 1] < 0)
        v24 = __maskrune(v23, 0x4000uLL);
      else
        v24 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v23 + 60) & 0x4000;
      v177 = v24 != 0;
      v17[v21] = 0;
      CFStringAppendCString(theString, v17, 0x8000100u);
    }
    Length = CFStringGetLength(theString);
    v185 = 0;
    v29 = a2 + 1;
    *(_QWORD *)&v187 = a2 + 1;
    v30 = memchr(a2 + 1, 62, v14 - 1);
    if (!v30)
    {
      v14 = 0;
      goto LABEL_201;
    }
    v31 = v30 - v29;
    v185 = (_QWORD *)(v30 - v29);
    v14 = v14 - 1 + ~(v30 - v29);
    v25 = v30 + 1;
    v32 = *v29;
    if ((v32 - 48) < 0xA)
    {
      v184 = -1.0;
      v20 = FigWebVTTReadTime((unsigned __int8 **)&v187, (unint64_t *)&v185, &v184, 0, 0);
      if ((_DWORD)v20)
        goto LABEL_104;
      if (v184 == a9)
      {
        if (webVTTFindStyle((uint64_t)&v180, CFSTR(":past")))
        {
          v33 = webVTTFindActiveAttribute((uint64_t)&v180, cf1);
          if (v33)
          {
            v34 = v33;
            MutableCopy = CFArrayCreateMutableCopy(allocator, 0, *(CFArrayRef *)(v33 + 40));
            Count = CFArrayGetCount(MutableCopy);
            while (1)
            {
              v37 = Count-- < 1;
              if (v37)
                break;
              ValueAtIndex = CFArrayGetValueAtIndex(MutableCopy, Count);
              if (CFEqual(CFSTR(":past"), ValueAtIndex))
              {
                CFArrayRemoveValueAtIndex(MutableCopy, Count);
                break;
              }
            }
            if (*(_QWORD *)(v34 + 24) == Length)
            {
              v39 = *(const void **)(v34 + 40);
              if (v39)
                CFRelease(v39);
              v20 = 0;
              *(_QWORD *)(v34 + 40) = CFRetain(MutableCopy);
            }
            else
            {
              v20 = webVTTAddActiveAttribute((uint64_t)&v180, cf1, MutableCopy, Length);
            }
            *(_QWORD *)(v34 + 24) = Length;
LABEL_102:
            v66 = MutableCopy;
            goto LABEL_103;
          }
        }
      }
      else if (v184 > a9 && !webVTTFindStyle((uint64_t)&v180, CFSTR(":future")))
      {
        v47 = webVTTPushTag((uint64_t)&v180, CFSTR(":future"), Length);
        goto LABEL_125;
      }
      v20 = 0;
      goto LABEL_104;
    }
    if ((v32 - 98) > 0x14)
      goto LABEL_72;
    if (((1 << (v32 - 98)) & 0x180083) != 0)
    {
      v40 = CFStringCreateWithBytes(allocator, (const UInt8 *)a2 + 1, v31, 0x8000100u, 0);
      if (!v40)
        goto LABEL_224;
      MutableCopy = (const __CFArray *)v40;
      v20 = webVTTPushTag((uint64_t)&v180, v40, Length);
      v41 = (const UInt8 *)v187;
      v42 = *(char *)v187 - 98;
      if (v42 <= 0x14)
      {
        if (((1 << v42) & 0x180081) != 0)
        {
          v43 = allocator;
          v44 = allocator;
          v45 = 1;
        }
        else
        {
          if (*(_BYTE *)v187 != 99)
            goto LABEL_102;
          v41 = (const UInt8 *)(v187 + 1);
          v45 = (CFIndex)v185 - 1;
          v43 = allocator;
          v44 = allocator;
        }
        v54 = CFStringCreateWithBytes(v44, v41, v45, 0x8000100u, 0);
        if (v54)
        {
          v55 = v54;
          v56 = CFStringCreateMutableCopy(v43, 0, CFSTR("::cue("));
          if (!v56)
          {
            v20 = FigSignalErrorAt();
            CFRelease(MutableCopy);
            CFRelease(v55);
            v17 = v165;
            goto LABEL_104;
          }
          v57 = v56;
          CFStringAppend(v56, v55);
          CFRelease(v55);
          CFStringAppend(v57, CFSTR(")"));
          v20 = webVTTPushTag((uint64_t)&v180, v57, Length);
          CFRelease(v57);
          v17 = v165;
        }
        else
        {
          v20 = FigSignalErrorAt();
        }
      }
      goto LABEL_102;
    }
    if (v32 != 108)
      break;
    if (!matchStringInBufferWithSpace("lang", a2 + 1, v31, 0, 0))
      goto LABEL_200;
    matched = matchStringInBufferWithSpace("lang", a2 + 1, v31, 0, 0);
    v61 = v31 - 4;
    if (v31 < 4 || !matched)
      goto LABEL_200;
    v64 = a2[5];
    v63 = (const UInt8 *)(a2 + 5);
    v62 = v64;
    if ((v64 & 0x80000000) != 0)
    {
      v65 = __maskrune(v62, 0x4000uLL);
      if (v31 == 4)
        goto LABEL_200;
    }
    else
    {
      v65 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v62 + 60) & 0x4000;
      if (v31 == 4)
        goto LABEL_200;
    }
    if (!v65)
      goto LABEL_200;
    do
    {
      v86 = v63;
      v87 = v61;
      v88 = *(char *)v63;
      if ((v88 & 0x80000000) != 0)
        v89 = __maskrune(v88, 0x4000uLL);
      else
        v89 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v88 + 60) & 0x4000;
      v90 = v89 != 0;
      if (v89)
        ++v63;
      v61 -= v90;
      if (v89)
        v91 = v87 == v90;
      else
        v91 = 1;
    }
    while (!v91);
    if (v89)
      v92 = 1;
    else
      v92 = v87 == v90;
    if (v92)
      goto LABEL_179;
    v93 = 0;
    if (v89)
      v94 = -1;
    else
      v94 = 0;
    if (v89)
      v95 = v86 + 1;
    else
      v95 = v86;
    v96 = -v87 - v94;
    v166 = (CFMutableAttributedStringRef)Length;
    while (1)
    {
      v97 = (char)v95[v93];
      if ((v97 & 0x80000000) != 0)
        break;
      if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v97 + 60) & 0x4000) != 0)
        goto LABEL_180;
LABEL_173:
      ++v93;
      if (!(v96 + v93))
      {
        v93 = v61;
        v17 = v165;
        goto LABEL_194;
      }
    }
    v98 = v96;
    v99 = __maskrune(v97, 0x4000uLL);
    v96 = v98;
    Length = (CFIndex)v166;
    if (!v99)
      goto LABEL_173;
LABEL_180:
    if (v89)
      v100 = v86 + 1;
    else
      v100 = v86;
    v101 = v87 - (v89 != 0) - v93;
    v102 = &v100[v93];
    v17 = v165;
    do
    {
      v103 = *(char *)v102;
      if ((v103 & 0x80000000) != 0)
        v104 = __maskrune(v103, 0x4000uLL);
      else
        v104 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v103 + 60) & 0x4000;
      if (v104)
        ++v102;
      v101 -= v104 != 0;
      if (v104)
        v105 = v101 == 0;
      else
        v105 = 1;
    }
    while (!v105);
LABEL_194:
    if (v93)
    {
      v106 = CFStringCreateWithBytes(allocator, v63, v93, 0x8000100u, 0);
      if (!v106)
        goto LABEL_224;
      v107 = v106;
      v108 = CFStringCreateWithFormat(allocator, 0, CFSTR(":lang(%@)"), v106);
      if (v108)
      {
        MutableCopy = (const __CFArray *)v108;
        webVTTPushTag((uint64_t)&v180, v108, Length);
        v109 = CFStringCreateMutableCopy(allocator, 0, CFSTR("::cue("));
        if (v109)
        {
          v110 = v109;
          CFStringAppend(v109, (CFStringRef)MutableCopy);
          CFStringAppend(v110, CFSTR(")"));
          v20 = webVTTPushTag((uint64_t)&v180, v110, Length);
          CFRelease(v110);
        }
        else
        {
          v20 = FigSignalErrorAt();
        }
        CFRelease(v107);
        goto LABEL_102;
      }
      v20 = FigSignalErrorAt();
      v66 = (const __CFArray *)v107;
LABEL_103:
      CFRelease(v66);
      goto LABEL_104;
    }
LABEL_200:
    a2 = v25;
LABEL_201:
    v20 = 0;
    v21 = 0;
    v25 = a2;
LABEL_106:
    a2 = v25;
    if (!v14)
    {
      v121 = allocator;
      if (v21)
      {
        v17[v21] = 0;
        v122 = theString;
        CFStringAppendCString(theString, v17, 0x8000100u);
      }
      else
      {
        v122 = theString;
      }
LABEL_235:
      attrNamea = (CFStringRef)CFStringGetLength(v122);
      if (attrNamea)
      {
        v123 = CFAttributedStringCreateMutable(v121, 0);
        v124 = v123;
        if (v123)
        {
          CFAttributedStringBeginEditing(v123);
          v190.location = 0;
          v190.length = 0;
          CFAttributedStringReplaceString(v124, v190, theString);
          if (a4)
          {
            v191.location = 0;
            v191.length = (CFIndex)attrNamea;
            CFAttributedStringSetAttributes(v124, v191, a4, 1u);
          }
          v125 = v180;
          if (v180)
          {
            cfa = (CFTypeRef)*MEMORY[0x1E0CA29F8];
            v167 = v124;
            while (2)
            {
              v126 = (CFStringRef)*((_QWORD *)v125 + 3);
              if (!v126)
              {
                v126 = attrNamea;
                *((_QWORD *)v125 + 3) = attrNamea;
              }
              v127 = (const __CFDictionary *)*((_QWORD *)v125 + 2);
              v128 = (const void *)((char *)v126 - (char *)v127);
              if ((char *)v126 - (char *)v127 < 1)
                goto LABEL_287;
              v129 = (uint64_t **)*((_QWORD *)v125 + 6);
              if (v129)
              {
                do
                {
                  v130.location = (CFIndex)v129[2];
                  v130.length = (CFIndex)v129[3] - v130.location;
                  if (v130.length >= 1)
                  {
                    v131 = v129[5];
                    if (v131)
                      CFAttributedStringSetAttribute(v124, v130, (CFStringRef)v129[4], v131);
                  }
                  v129 = (uint64_t **)*v129;
                }
                while (v129);
              }
              else
              {
                v132 = (const void *)*((_QWORD *)v125 + 5);
                if (v132)
                {
                  v192.location = *((_QWORD *)v125 + 2);
                  v192.length = (char *)v126 - (char *)v127;
                  CFAttributedStringSetAttribute(v124, v192, *((CFStringRef *)v125 + 4), v132);
                }
              }
              if (!CFEqual(*((CFTypeRef *)v125 + 4), cfa))
                goto LABEL_287;
              cf1a = v128;
              replacementa = v127;
              v133 = (const __CFArray *)*((_QWORD *)v125 + 5);
              v187 = 0u;
              v188 = 0u;
              v185 = 0;
              v186 = (unint64_t *)&v185;
              v134 = CFDictionaryCreateMutable(v121, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              if (v134)
              {
                v135 = CFArrayGetCount(v133);
                if (v135 < 1)
                {
LABEL_284:
                  v20 = 0;
                }
                else
                {
                  v136 = v135;
                  while (1)
                  {
                    v137 = (const __CFString *)CFArrayGetValueAtIndex(v133, v136 - 1);
                    v138 = webVTTCreateSelectorFromString(v137, 1, (CFTypeRef *)&v187);
                    if ((_DWORD)v138)
                      break;
                    for (i = *v179; i; i = *(_QWORD *)i)
                    {
                      if (*(_QWORD *)(i + 16) && !FigCFEqual()
                        || *(_QWORD *)(i + 32) && !FigCFEqual())
                      {
                        continue;
                      }
                      v140 = *(const __CFArray **)(i + 24);
                      if (v140)
                      {
                        if (!(_QWORD)v188)
                          continue;
                        v141 = CFArrayGetCount(v140);
                        v142 = CFArrayGetCount((CFArrayRef)v188);
                        if (v141 > v142)
                          continue;
                        if (v141 >= 1)
                        {
                          v143 = v142;
                          v144 = 0;
                          while (1)
                          {
                            v145 = CFArrayGetValueAtIndex(*(CFArrayRef *)(i + 24), v144);
                            v193.location = 0;
                            v193.length = v143;
                            if (!CFArrayContainsValue((CFArrayRef)v188, v193, v145))
                              break;
                            if (v141 == ++v144)
                              goto LABEL_269;
                          }
                          continue;
                        }
                      }
LABEL_269:
                      v146 = (unint64_t *)malloc_type_malloc(0x18uLL, 0xA0040A8488062uLL);
                      if (v146)
                      {
                        v146[2] = i;
                        v147 = v185;
                        if (v185)
                        {
                          while (*(_DWORD *)(i + 48) <= *(_DWORD *)(v147[2] + 48))
                          {
                            v147 = (_QWORD *)*v147;
                            if (!v147)
                              goto LABEL_273;
                          }
                          v149 = (unint64_t **)(v147 + 1);
                          v150 = v147[1];
                          *v146 = (unint64_t)v147;
                          v146[1] = v150;
                          v148 = (unint64_t *)v147[1];
                        }
                        else
                        {
LABEL_273:
                          v148 = v186;
                          *v146 = 0;
                          v146[1] = (unint64_t)v148;
                          v149 = &v186;
                        }
                        *v148 = (unint64_t)v146;
                        *v149 = v146;
                      }
                      else
                      {
                        v20 = FigSignalErrorAt();
                        if ((_DWORD)v20)
                          goto LABEL_285;
                      }
                    }
                    for (j = v185; j; j = (_QWORD *)*j)
                      CFDictionaryApplyFunction(*(CFDictionaryRef *)(j[2] + 40), (CFDictionaryApplierFunction)webVTTApplyStyleDictionaryValue, v134);
                    webVTTCleanStyleMatchQueue(&v185);
                    webVTTSelectorClean((uint64_t)&v187);
                    v37 = v136-- <= 1;
                    if (v37)
                      goto LABEL_284;
                  }
LABEL_290:
                  v20 = v138;
                }
LABEL_285:
                webVTTSelectorClean((uint64_t)&v187);
                webVTTCleanStyleMatchQueue(&v185);
                if ((_DWORD)v20)
                {
                  v124 = v167;
                  if (v134)
                    CFRelease(v134);
                  v17 = v165;
                  if (!v167)
                    goto LABEL_299;
LABEL_298:
                  CFRelease(v124);
                  goto LABEL_299;
                }
                v124 = v167;
                v194.length = (CFIndex)cf1a;
                v194.location = (CFIndex)replacementa;
                CFAttributedStringSetAttributes(v167, v194, v134, 0);
                CFRelease(v134);
                v121 = allocator;
LABEL_287:
                v125 = *(void **)v125;
                if (!v125)
                  goto LABEL_291;
                continue;
              }
              break;
            }
            v138 = FigSignalErrorAt();
            goto LABEL_290;
          }
LABEL_291:
          v17 = v165;
          *v164 = v124;
        }
        else
        {
          v20 = FigSignalErrorAt();
        }
LABEL_292:
        if (!(_DWORD)v20 || !v124)
          goto LABEL_299;
        goto LABEL_298;
      }
LABEL_322:
      v124 = 0;
      goto LABEL_292;
    }
  }
  if (v32 != 114)
  {
LABEL_72:
    if (v32 != 47)
      goto LABEL_200;
    if (v31 < 2)
      goto LABEL_200;
    v50 = a2[2];
    v49 = a2 + 2;
    v48 = v50;
    v51 = v50 - 98;
    if ((v50 - 98) > 0x14)
      goto LABEL_200;
    if (((1 << v51) & 0x180083) != 0)
    {
      webVTTPopTag((uint64_t)&v180, v48, CFSTR("::cue("), Length);
      v52 = *v49;
      v53 = 0;
    }
    else
    {
      if (v51 != 10)
      {
        if (v51 == 16 && matchStringInBufferWithSpace("ruby", v49, v31 - 1, 0, 0))
        {
          v72 = webVTTFindActiveAttribute((uint64_t)&v180, cf);
          if (v72)
          {
            *(_QWORD *)(v72 + 24) = Length;
            v73 = *(_QWORD **)(v72 + 48);
            if (v73)
            {
              v74 = (_QWORD *)(v72 + 16);
              do
              {
                v73[2] = *v74;
                v74 = v73 + 3;
                v73 = (_QWORD *)*v73;
              }
              while (v73);
            }
          }
        }
        goto LABEL_200;
      }
      if (!matchStringInBufferWithSpace("lang", v49, v31 - 1, 0, 0))
        goto LABEL_200;
      webVTTPopTag((uint64_t)&v180, *v49, CFSTR("::cue("), Length);
      v52 = *v49;
      v53 = CFSTR(":lang");
    }
    v47 = webVTTPopTag((uint64_t)&v180, v52, v53, Length);
    goto LABEL_125;
  }
  if (matchStringInBufferWithSpace("ruby", a2 + 1, v31, 0, 0))
  {
    v47 = webVTTAddActiveAttribute((uint64_t)&v180, cf, 0, Length);
    goto LABEL_125;
  }
  if (!matchStringInBufferWithSpace("rt", a2 + 1, v31, 0, 0))
    goto LABEL_200;
  if (v14 < 4)
  {
    v67 = 0;
    goto LABEL_137;
  }
  v67 = 0;
  v68 = v14;
  v69 = v25;
  while (2)
  {
    if (*v69 != 60)
    {
      ++v69;
      --v68;
LABEL_122:
      if (v68 <= 3)
        goto LABEL_137;
      continue;
    }
    break;
  }
  v70 = memchr(v69, 62, v68);
  if (!v70)
  {
    v75 = (char *)(v69 - v25);
    v67 = v14 - (v69 - v25);
    goto LABEL_221;
  }
  v71 = v70;
  v67 = v70 - v69;
  if (v69[1] != 47 || !matchStringInBufferWithSpace("rt", v69 + 2, v67 - 2, 0, 0))
  {
    if (matchStringInBufferWithSpace("ruby", v69 + 1, v67 - 1, 0, 0)
      || matchStringInBufferWithSpace("rt", v69 + 1, v67 - 1, 0, 0))
    {
      v14 = 0;
LABEL_179:
      a2 = v25;
      v17 = v165;
      goto LABEL_201;
    }
    v69 += v67 + 1;
    v68 -= v67 + 1;
    v17 = v165;
    goto LABEL_122;
  }
  if (*v71)
    v75 = (char *)(v69 - v25);
  else
    v75 = (char *)v14;
LABEL_221:
  v17 = v165;
  if (!v75)
LABEL_137:
    v75 = (char *)v14;
  v76 = webVTTFindActiveAttribute((uint64_t)&v180, cf);
  if (!v76)
    goto LABEL_200;
  v77 = v76;
  aStr = 0;
  v184 = 0.0;
  v78 = webVTTFindActiveAttribute((uint64_t)&v180, cf1);
  v79 = WebVTTSampleBufferParserCreate(&v184);
  if ((_DWORD)v79
    || ((v80 = (const __CFArray *)v179[3]) != 0 || (v80 = (const __CFArray *)v179[2]) != 0)
    && (v79 = webVTTSampleBufferParserSetStyleQueueFromTextMarkup(*(_QWORD **)&v184, v80), (_DWORD)v79))
  {
LABEL_324:
    v20 = v79;
    v17 = v165;
    goto LABEL_299;
  }
  v81 = CFArrayCreateMutableCopy(allocator, 0, *(CFArrayRef *)(v78 + 40));
  if (v81)
  {
    v82 = v81;
    v83 = v184;
    v84 = webVTTParseCueAndCreateAttributedString(*(_QWORD *)&v184, v25, v75, a4, 0, 0, v81, &aStr, a9);
    CFRelease(v82);
    if (v84)
    {
      Copy = aStr;
    }
    else
    {
      valuePtr = v14;
      v111 = CFNumberCreate(allocator, kCFNumberLongType, &valuePtr);
      v112 = aStr;
      v113 = CFAttributedStringCreateMutableCopy(allocator, 0, aStr);
      if (v112)
        CFRelease(v112);
      v189.length = CFAttributedStringGetLength(v113);
      v189.location = 0;
      CFAttributedStringSetAttribute(v113, v189, attrName, v111);
      if (v111)
        CFRelease(v111);
      Copy = CFAttributedStringCreateCopy(allocator, v113);
      aStr = Copy;
      if (v113)
        CFRelease(v113);
      *(_QWORD *)(v77 + 40) = Copy;
    }
  }
  else
  {
    FigSignalErrorAt();
    Copy = 0;
    v83 = v184;
  }
  WebVTTSampleBufferParserDestroy(*(_QWORD **)&v83);
  v114 = malloc_type_calloc(1uLL, 0x30uLL, 0x10E0040ADB29C33uLL);
  if (!v114)
  {
    v79 = FigSignalErrorAt();
    v17 = v165;
    if (!(_DWORD)v79)
      goto LABEL_214;
    goto LABEL_324;
  }
  v115 = v114;
  v114[3] = Length;
  v114[4] = CFRetain(cf);
  v17 = v165;
  if (Copy)
    v116 = CFRetain(Copy);
  else
    v116 = 0;
  v115[5] = v116;
  *v115 = 0;
  v117 = *(_QWORD **)(v77 + 56);
  v115[1] = v117;
  *v117 = v115;
  *(_QWORD *)(v77 + 56) = v115;
LABEL_214:
  v118 = (unint64_t)&v75[v67 + 1];
  v25 += v118;
  v119 = v14 >= v118;
  v120 = v14 - v118;
  if (v120 != 0 && v119)
  {
    a2 = v25;
    v14 = v120;
    goto LABEL_201;
  }
LABEL_224:
  v47 = FigSignalErrorAt();
LABEL_125:
  v20 = v47;
LABEL_104:
  if (!(_DWORD)v20)
  {
    v21 = 0;
    goto LABEL_106;
  }
LABEL_299:
  free(v17);
  v152 = theString;
  if (theString)
LABEL_300:
    CFRelease(v152);
  while (1)
  {
    v162 = v180;
    if (!v180)
      break;
    v153 = *(_QWORD *)v180;
    v154 = (_QWORD *)*((_QWORD *)v180 + 1);
    if (*(_QWORD *)v180)
    {
      *(_QWORD *)(v153 + 8) = v154;
      v154 = (_QWORD *)v162[1];
    }
    else
    {
      v181 = (void **)*((_QWORD *)v180 + 1);
    }
    *v154 = v153;
    v155 = (const void *)v162[4];
    if (v155)
      CFRelease(v155);
    v156 = (const void *)v162[5];
    if (v156)
      CFRelease(v156);
    while (1)
    {
      v161 = (uint64_t *)v162[6];
      if (!v161)
        break;
      v157 = *v161;
      v158 = (_QWORD *)v161[1];
      if (*v161)
      {
        *(_QWORD *)(v157 + 8) = v158;
        v158 = (_QWORD *)v161[1];
      }
      else
      {
        v162[7] = v158;
      }
      *v158 = v157;
      v159 = (const void *)v161[4];
      if (v159)
        CFRelease(v159);
      v160 = (const void *)v161[5];
      if (v160)
        CFRelease(v160);
      free(v161);
    }
    free(v162);
  }
  return v20;
}

uint64_t WebVTTCreateMetadataDictionaryFromFormatDescripton(const opaqueCMFormatDescription *a1, int a2, CFDictionaryRef *a3)
{
  CMMediaType MediaType;
  FourCharCode MediaSubType;
  const __CFDictionary *Extensions;
  const __CFDictionary *v9;
  const __CFData *v10;
  const __CFData *v11;
  char *BytePtr;
  CFIndex Length;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  const char *v23;
  CFIndex v24;
  const __CFDictionary *v25;
  int v26;
  uint64_t v27;
  CFIndex v28;
  CFIndex v29;
  int v30;
  unint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  size_t v36;
  CFIndex v37;
  const char *v38;
  CFStringRef v39;
  CFStringRef v40;
  unint64_t v41;
  char *v42;
  unsigned int v43;
  const void *v44;
  const void *v45;
  uint64_t v46;
  __CFDictionary *v47;
  void *v48;
  CFMutableDictionaryRef Mutable;
  const void *v50;
  const __CFAllocator *v51;
  CFNumberType v52;
  CFNumberRef v53;
  CFDictionaryRef v54;
  __CFDictionary *v55;
  const void *v56;
  CFDictionaryRef v57;
  void *value;
  void *v59;
  const void *v60;
  const void *v61;
  const void *v62;
  void *key;
  int v64;
  void *v65;
  const __CFAllocator *alloc;
  void *v67;
  CFDictionaryRef theDict;
  unint64_t v69;
  size_t v70;
  CFDictionaryRef valuePtr;
  char v72;

  if (!a3)
    return FigSignalErrorAt();
  MediaType = CMFormatDescriptionGetMediaType(a1);
  MediaSubType = CMFormatDescriptionGetMediaSubType(a1);
  if (MediaType != 1935832172 && MediaType != 1952807028)
    return FigSignalErrorAt();
  if (MediaSubType != 1937142900 && MediaSubType != 2004251764 && MediaSubType != 2021028980)
    return FigSignalErrorAt();
  Extensions = CMFormatDescriptionGetExtensions(a1);
  if (!Extensions)
    return 0;
  v9 = (const __CFDictionary *)CFDictionaryGetValue(Extensions, (const void *)*MEMORY[0x1E0CA2240]);
  if (!v9)
    return 0;
  v10 = (const __CFData *)CFDictionaryGetValue(v9, CFSTR("vttC"));
  if (!v10)
    return 0;
  v11 = v10;
  theDict = 0;
  BytePtr = (char *)CFDataGetBytePtr(v10);
  Length = CFDataGetLength(v11);
  if (Length)
  {
    v14 = Length;
    while (1)
    {
      v15 = 0;
      while (1)
      {
        v16 = BytePtr[v15];
        if (v16 == 10 || v16 == 13)
          break;
        if (v14 == ++v15)
          goto LABEL_31;
      }
      if (v14 == v15)
        break;
      v18 = BytePtr[v15];
      if (v18 == 10)
        goto LABEL_25;
      if (v18 != 13)
        break;
      if (v14 - v15 < 2 || BytePtr[v15 + 1] != 10)
LABEL_25:
        v19 = 1;
      else
        v19 = 2;
      v20 = webVTTProcessHeaderLineForMetadata(a2, &theDict, BytePtr, v19 + v15, v19);
      if ((_DWORD)v20)
        goto LABEL_130;
      BytePtr += v19 + v15;
      v14 = v14 - v19 - v15;
      if (!v14)
        goto LABEL_32;
    }
LABEL_31:
    v20 = webVTTProcessHeaderLineForMetadata(a2, &theDict, BytePtr, v14, 0);
    if ((_DWORD)v20)
    {
LABEL_130:
      v22 = v20;
      goto LABEL_123;
    }
  }
LABEL_32:
  v64 = a2;
  v23 = (const char *)CFDataGetBytePtr(v11);
  v24 = CFDataGetLength(v11);
  v25 = 0;
  v26 = 0;
  v22 = 0;
  v67 = (void *)*MEMORY[0x1E0CA2CA0];
  v65 = (void *)*MEMORY[0x1E0CA2C38];
  alloc = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  key = (void *)*MEMORY[0x1E0CA2CB8];
  v61 = (const void *)*MEMORY[0x1E0CA2CC8];
  v62 = (const void *)*MEMORY[0x1E0CA2CA8];
  v60 = (const void *)*MEMORY[0x1E0CA2CB0];
  value = (void *)*MEMORY[0x1E0CA2CD0];
  v59 = (void *)*MEMORY[0x1E0CA2CC0];
  v27 = MEMORY[0x1E0C80978];
  do
  {
    v28 = v24;
    v29 = 0;
    if (v24)
    {
      while (1)
      {
        v30 = v23[v29];
        if (v30 == 10 || v30 == 13)
          break;
        if (v24 == ++v29)
        {
          v32 = 0;
          v29 = v24;
          goto LABEL_49;
        }
      }
      v33 = v23[v29];
      if (v33 == 10)
        goto LABEL_46;
      if (v33 == 13)
      {
        if ((unint64_t)(v24 - v29) >= 2 && v23[v29 + 1] == 10)
          v32 = 2;
        else
LABEL_46:
          v32 = 1;
        v34 = v32 + v29;
        goto LABEL_50;
      }
      v32 = 0;
LABEL_49:
      v34 = v24;
    }
    else
    {
      v32 = 0;
      v34 = 0;
    }
LABEL_50:
    if (v26 == 2)
    {
      if (v34 == v32)
      {
        if (v25)
        {
          v44 = CFDictionaryGetValue(v25, v67);
          if (v44)
          {
            v45 = v44;
            v46 = webVTTInitMetadataDictionaryIfNecessary(v64, &theDict);
            v47 = theDict;
            if (!theDict)
              goto LABEL_129;
            v22 = v46;
            v48 = (void *)CFDictionaryGetValue(theDict, v65);
            if (!v48)
            {
              Mutable = CFDictionaryCreateMutable(alloc, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              if (!Mutable)
              {
LABEL_129:
                v22 = FigSignalErrorAt();
                goto LABEL_122;
              }
              v48 = Mutable;
              CFDictionaryAddValue(v47, v65, Mutable);
              CFRelease(v48);
            }
            CFDictionaryAddValue((CFMutableDictionaryRef)v48, v45, v25);
            v27 = MEMORY[0x1E0C80978];
          }
          CFRelease(v25);
          v25 = 0;
        }
LABEL_86:
        v26 = 1;
        goto LABEL_113;
      }
      if (v34 <= v32)
        v35 = 0;
      else
        v35 = v32;
      v69 = 0;
      v70 = 0;
      if (!webVTTFindNextCueSetting((uint64_t)v23, v34 - v35, 0, &v69, &v70))
      {
        v22 = 0;
LABEL_112:
        v26 = 2;
        goto LABEL_113;
      }
      v36 = v70;
      v37 = v70 - 3;
      if (v70 < 3)
        goto LABEL_64;
      v38 = &v23[v69];
      if (matchStringInBufferWithSpace("id:", &v23[v69], v70, 0, 0))
      {
        v39 = CFStringCreateWithBytes(alloc, (const UInt8 *)v38 + 3, v37, 0x8000100u, 0);
        if (v39)
        {
          v40 = v39;
          if (!CFDictionaryGetValue(v25, key))
            CFDictionaryAddValue(v25, v67, v40);
          CFRelease(v40);
LABEL_64:
          v22 = 0;
          v26 = 2;
          v27 = MEMORY[0x1E0C80978];
          goto LABEL_113;
        }
        v22 = FigSignalErrorAt();
        goto LABEL_110;
      }
      v72 = 0;
      v50 = v62;
      if (matchStringInBufferWithSpace("width:", v38, v36, 0, 0))
      {
        valuePtr = 0;
        v22 = webVTTReadFloatingPointNumberOrPercent((unsigned __int8 *)v38 + 6, v36 - 6, &v72, (double *)&valuePtr);
        v50 = v61;
        v27 = MEMORY[0x1E0C80978];
        if ((_DWORD)v22 || !v72)
          goto LABEL_111;
        v51 = alloc;
        v52 = kCFNumberDoubleType;
        goto LABEL_96;
      }
      if (matchStringInBufferWithSpace("lines:", v38, v36, 0, 0))
      {
        LODWORD(valuePtr) = 0;
        v22 = webVTTReadNumberOrPercent((unsigned __int8 *)v38 + 6, v36 - 6, &v72, (int *)&valuePtr);
        v27 = MEMORY[0x1E0C80978];
        if ((_DWORD)v22 || v72)
          goto LABEL_111;
        v51 = alloc;
        v52 = kCFNumberIntType;
LABEL_96:
        v53 = CFNumberCreate(v51, v52, &valuePtr);
        if (v53)
        {
          if (CFDictionaryGetValue(v25, v50))
            v22 = 0;
          else
            CFDictionaryAddValue(v25, v50, v53);
          CFRelease(v53);
        }
        else
        {
          v22 = FigSignalErrorAt();
        }
LABEL_111:
        if ((_DWORD)v22)
          break;
        goto LABEL_112;
      }
      if (matchStringInBufferWithSpace("regionanchor:", v38, v36, 0, 0))
      {
        valuePtr = 0;
        v22 = webVTTReadPercentageXandY((void *)(v38 + 13), v36 - 13, &valuePtr);
        if ((_DWORD)v22)
        {
LABEL_110:
          v27 = MEMORY[0x1E0C80978];
          goto LABEL_111;
        }
        if (CFDictionaryGetValue(v25, v60))
          goto LABEL_64;
        v54 = valuePtr;
        v55 = v25;
        v56 = v60;
      }
      else
      {
        if (!matchStringInBufferWithSpace("viewportanchor:", v38, v36, 0, 0))
        {
          if (matchStringInBufferWithSpace("scroll:", v38, v36, 0, 0)
            && !CFDictionaryGetValue(v25, key)
            && matchStringInBufferWithSpace("up", v38 + 7, v36 - 7, 0, 0))
          {
            CFDictionaryAddValue(v25, key, value);
          }
          goto LABEL_64;
        }
        valuePtr = 0;
        v22 = webVTTReadPercentageXandY((void *)(v38 + 15), v36 - 15, &valuePtr);
        if ((_DWORD)v22)
          goto LABEL_110;
        if (CFDictionaryGetValue(v25, v59))
          goto LABEL_64;
        v54 = valuePtr;
        v55 = v25;
        v56 = v59;
      }
      CFDictionaryAddValue(v55, v56, v54);
      CFRelease(valuePtr);
      goto LABEL_110;
    }
    if (v26 != 1)
    {
      v26 = v34 == v32;
      goto LABEL_113;
    }
    if (v34 != v32 && v34 >= 6)
    {
      if (strncmp(v23, "REGION", 6uLL))
        goto LABEL_86;
      v41 = v34 - 6;
      if (v41)
      {
        v42 = (char *)(v23 + 6);
        do
        {
          v43 = *v42;
          if ((v43 & 0x80000000) != 0)
          {
            if (!__maskrune(v43, 0x4000uLL))
              goto LABEL_86;
          }
          else if ((*(_DWORD *)(v27 + 4 * v43 + 60) & 0x4000) == 0)
          {
            goto LABEL_86;
          }
          ++v42;
          --v41;
        }
        while (v41);
      }
      if (v25)
        CFRelease(v25);
      v25 = CFDictionaryCreateMutable(alloc, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      goto LABEL_112;
    }
LABEL_113:
    v23 += v32 + v29;
    v24 = v28 - (v32 + v29);
  }
  while (v28);
  if (!v25)
    goto LABEL_123;
LABEL_122:
  CFRelease(v25);
LABEL_123:
  v57 = theDict;
  if ((_DWORD)v22)
  {
    if (theDict)
    {
      CFRelease(theDict);
      v57 = 0;
    }
  }
  *a3 = v57;
  return v22;
}

void WebVTTSampleBufferParserDestroy(_QWORD *a1)
{
  const void *v2;
  const void *v3;

  if (a1)
  {
    v2 = (const void *)a1[2];
    if (v2)
      CFRelease(v2);
    webVTTStyleQueueFree((uint64_t)a1);
    v3 = (const void *)a1[3];
    if (v3)
      CFRelease(v3);
    free(a1);
  }
}

const opaqueCMFormatDescription *WebVTTIsFormatDescriptionForWebVTT(const opaqueCMFormatDescription *result)
{
  FourCharCode MediaSubType;

  if (result)
  {
    MediaSubType = CMFormatDescriptionGetMediaSubType(result);
    return (const opaqueCMFormatDescription *)(MediaSubType == 1937142900
                                            || MediaSubType == 2021028980
                                            || MediaSubType == 2004251764);
  }
  return result;
}

uint64_t WebVTTSampleBufferParserCreate(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = malloc_type_calloc(1uLL, 0x28uLL, 0xE00403FBB9EB1uLL);
  v3 = v2;
  if (!v2)
  {
    v4 = 4294954510;
    goto LABEL_6;
  }
  *v2 = 0;
  v2[1] = v2;
  v4 = webVTTAddGenericStylesToStyleList(v2);
  if ((_DWORD)v4)
  {
LABEL_6:
    WebVTTSampleBufferParserDestroy(v3);
    return v4;
  }
  *a1 = v3;
  return v4;
}

uint64_t webVTTAddToHeaderGather(CMBlockBufferRef *blockBufferOut, const void *a2, size_t a3)
{
  OpaqueCMBlockBuffer *v5;
  CMBlockBufferRef *v6;
  uint64_t result;

  if (!a3)
    return 0;
  v6 = blockBufferOut + 8;
  v5 = blockBufferOut[8];
  if (!v5)
  {
    result = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, v6);
    if ((_DWORD)result)
      return result;
    v5 = *v6;
  }
  return webVTTAppendTextToBlockBuffer(a2, a3, v5);
}

uint64_t webVTTAddToGather(CMBlockBufferRef *blockBufferOut, const void *a2, size_t a3)
{
  OpaqueCMBlockBuffer *v5;
  CMBlockBufferRef *v6;
  uint64_t result;

  if (!a3)
    return 0;
  v6 = blockBufferOut + 7;
  v5 = blockBufferOut[7];
  if (!v5)
  {
    result = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, v6);
    if ((_DWORD)result)
      return result;
    v5 = *v6;
  }
  return webVTTAppendTextToBlockBuffer(a2, a3, v5);
}

const void *webVTTDuplicateCue(__int128 *a1, _QWORD *a2)
{
  _OWORD *v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  const void *result;

  v4 = malloc_type_malloc(0x70uLL, 0x10A004090FB26ECuLL);
  v5 = v4;
  if (v4)
  {
    v6 = a1[2];
    v7 = *a1;
    v4[1] = a1[1];
    v4[2] = v6;
    *v4 = v7;
    v8 = a1[3];
    v9 = a1[4];
    v10 = a1[6];
    v4[5] = a1[5];
    v4[6] = v10;
    v4[3] = v8;
    v4[4] = v9;
    result = (const void *)*((_QWORD *)v4 + 2);
    if (result)
    {
      CFRetain(result);
      result = 0;
    }
  }
  else
  {
    result = (const void *)FigSignalErrorAt();
  }
  *a2 = v5;
  return result;
}

uint64_t webVTTAddCueToSampleQueue(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  double v15;
  uint64_t **v16;
  size_t v17;
  uint64_t *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  double *v25;
  double **v26;
  _QWORD *v27;
  uint64_t v29;
  _QWORD *v30;

  v30 = 0;
  v4 = a1[9];
  ++a1[14];
  v5 = a2 != 0;
  v6 = a2;
  if (!a2 || !v4)
    goto LABEL_32;
  v6 = a2;
  while (1)
  {
    v7 = *(double *)(v4 + 32);
    v8 = *(double *)(v6 + 24);
    if (v7 > v8)
    {
      v10 = FigSignalErrorAt();
      goto LABEL_51;
    }
    v9 = *(double *)(v4 + 40);
    if (v9 <= v8)
      goto LABEL_30;
    if (v7 < v8)
    {
      v10 = webVTTDuplicateSample(v4, &v30);
      if ((_DWORD)v10)
        goto LABEL_51;
      v11 = *(_QWORD *)v4;
      v12 = v30;
      *v30 = *(_QWORD *)v4;
      if (v11)
        v13 = (_QWORD *)(v11 + 8);
      else
        v13 = a1 + 10;
      *v13 = v12;
      *(_QWORD *)v4 = v12;
      v12[1] = v4;
      v14 = *(_QWORD *)(v6 + 24);
      *(_QWORD *)(v4 + 40) = v14;
      v12[4] = v14;
      goto LABEL_30;
    }
    v15 = *(double *)(v6 + 32);
    if (v9 == v15)
    {
      v16 = *(uint64_t ***)(v4 + 16);
      if (v16)
        break;
    }
LABEL_25:
    if (v15 <= v9)
    {
      if (v15 >= v9)
      {
LABEL_44:
        if (!*(_QWORD *)(v4 + 16))
        {
          *(_QWORD *)(v4 + 32) = *(_QWORD *)(v6 + 24);
          *(double *)(v4 + 40) = v15;
        }
        v21 = 0;
        *(_QWORD *)v6 = 0;
        v27 = *(_QWORD **)(v4 + 24);
        *(_QWORD *)(v6 + 8) = v27;
        *v27 = v6;
        *(_QWORD *)(v4 + 24) = v6;
        return v21;
      }
      v10 = webVTTDuplicateSample(v4, &v30);
      if (!(_DWORD)v10)
      {
        v24 = *(_QWORD *)v4;
        v25 = (double *)v30;
        *v30 = *(_QWORD *)v4;
        if (v24)
          v26 = (double **)(v24 + 8);
        else
          v26 = (double **)(a1 + 10);
        *v26 = v25;
        *(_QWORD *)v4 = v25;
        *((_QWORD *)v25 + 1) = v4;
        v15 = *(double *)(v6 + 32);
        *(double *)(v4 + 40) = v15;
        v25[4] = v15;
        goto LABEL_44;
      }
LABEL_51:
      v21 = v10;
LABEL_36:
      if (v6 != a2)
        webVTTFreeCue((_QWORD *)v6);
      return v21;
    }
    v29 = 0;
    if (!*(_QWORD *)(v4 + 16))
    {
      *(_QWORD *)(v4 + 32) = *(_QWORD *)(v6 + 24);
      *(double *)(v4 + 40) = v15;
    }
    *(_QWORD *)v6 = 0;
    v19 = *(_QWORD **)(v4 + 24);
    *(_QWORD *)(v6 + 8) = v19;
    *v19 = v6;
    *(_QWORD *)(v4 + 24) = v6;
    v10 = (uint64_t)webVTTDuplicateCue((__int128 *)v6, &v29);
    if ((_DWORD)v10)
      goto LABEL_51;
    v6 = v29;
    *(_QWORD *)(v29 + 24) = *(_QWORD *)(v4 + 40);
LABEL_30:
    v4 = *(_QWORD *)v4;
    if (!v4)
    {
      v5 = 1;
LABEL_32:
      if (!v5)
        return 0;
      v20 = malloc_type_calloc(1uLL, 0x30uLL, 0x10A0040D182BB51uLL);
      v30 = v20;
      if (v20)
      {
        v21 = 0;
        *((_OWORD *)v20 + 2) = *(_OWORD *)(v6 + 24);
        *(_QWORD *)v6 = 0;
        *(_QWORD *)(v6 + 8) = v20 + 2;
        v20[2] = v6;
        v20[3] = v6;
        v22 = v30;
        *v30 = 0;
        v23 = (_QWORD *)a1[10];
        v22[1] = v23;
        *v23 = v22;
        a1[10] = v22;
        return v21;
      }
      v21 = 4294954510;
      goto LABEL_36;
    }
  }
  while (1)
  {
    if (v16[10] == *(uint64_t **)(v6 + 80))
    {
      v17 = (size_t)v16[8];
      if (v17 == *(_QWORD *)(v6 + 64))
      {
        v18 = v16[6];
        if (v18 == *(uint64_t **)(v6 + 48))
        {
          if (!v18)
            goto LABEL_20;
          if (compareCueBB((OpaqueCMBlockBuffer *)v16[2], (size_t)v16[5], *(OpaqueCMBlockBuffer **)(v6 + 16), *(_QWORD *)(v6 + 40), (size_t)v16[6]))
          {
            break;
          }
        }
      }
    }
LABEL_23:
    v16 = (uint64_t **)*v16;
    if (!v16)
    {
      v15 = *(double *)(v6 + 32);
      v9 = *(double *)(v4 + 40);
      goto LABEL_25;
    }
  }
  v17 = (size_t)v16[8];
LABEL_20:
  if (v17
    && !compareCueBB((OpaqueCMBlockBuffer *)v16[2], (size_t)v16[7], *(OpaqueCMBlockBuffer **)(v6 + 16), *(_QWORD *)(v6 + 56), v17)|| !compareCueBB((OpaqueCMBlockBuffer *)v16[2], (size_t)v16[9], *(OpaqueCMBlockBuffer **)(v6 + 16), *(_QWORD *)(v6 + 72), *(_QWORD *)(v6 + 80)))
  {
    goto LABEL_23;
  }
  webVTTFreeCue((_QWORD *)v6);
  return 0;
}

void webVTTFreeCue(_QWORD *a1)
{
  const void *v2;

  v2 = (const void *)a1[2];
  if (v2)
    CFRelease(v2);
  free(a1);
}

uint64_t webVTTDuplicateSample(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  __int128 *v6;
  const void *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;

  v4 = malloc_type_calloc(1uLL, 0x30uLL, 0x10A0040D182BB51uLL);
  v5 = v4;
  if (!v4)
  {
    v10 = 4294954510;
LABEL_7:
    webVTTFreeSample(v5);
    v5 = 0;
    goto LABEL_8;
  }
  v4[2] = 0;
  v4[3] = v4 + 2;
  *((_OWORD *)v4 + 2) = *(_OWORD *)(a1 + 32);
  v6 = *(__int128 **)(a1 + 16);
  if (v6)
  {
    while (1)
    {
      v12 = 0;
      v7 = webVTTDuplicateCue(v6, &v12);
      if ((_DWORD)v7)
        break;
      v8 = v12;
      v9 = (_QWORD *)v5[3];
      *v12 = 0;
      v8[1] = v9;
      *v9 = v8;
      v5[3] = v8;
      v6 = *(__int128 **)v6;
      if (!v6)
        goto LABEL_5;
    }
    v10 = (uint64_t)v7;
    goto LABEL_7;
  }
LABEL_5:
  v10 = 0;
LABEL_8:
  *a2 = v5;
  return v10;
}

BOOL compareCueBB(OpaqueCMBlockBuffer *a1, size_t a2, OpaqueCMBlockBuffer *a3, size_t a4, size_t a5)
{
  _BOOL8 result;
  OSStatus DataPointer;
  OSStatus v10;
  char *v11;
  char *dataPointerOut;
  size_t lengthAtOffsetOut;

  if (a1 == a3 && a2 == a4)
    return 1;
  dataPointerOut = 0;
  lengthAtOffsetOut = 0;
  v11 = 0;
  DataPointer = CMBlockBufferGetDataPointer(a1, a2, &lengthAtOffsetOut, 0, &dataPointerOut);
  result = 0;
  if (!DataPointer && lengthAtOffsetOut >= a5)
  {
    v10 = CMBlockBufferGetDataPointer(a3, a4, &lengthAtOffsetOut, 0, &v11);
    result = 0;
    if (!v10 && lengthAtOffsetOut >= a5)
      return memcmp(dataPointerOut, v11, a5) == 0;
  }
  return result;
}

uint64_t createCSSDataFromWebVTTConfiguration(const __CFData *a1, const __CFAllocator *a2, CFIndex *a3)
{
  const UInt8 *BytePtr;
  CFIndex Length;
  size_t v8;
  char v9;
  uint64_t v10;
  size_t v11;
  int v12;
  uint64_t v14;
  size_t v15;
  int v16;
  OpaqueCMBlockBuffer *v17;
  uint64_t v18;
  size_t v19;
  char *v20;
  unsigned int v21;
  size_t DataLength;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  CFIndex *v27;
  CMBlockBufferRef blockBufferOut;

  BytePtr = CFDataGetBytePtr(a1);
  Length = CFDataGetLength(a1);
  blockBufferOut = 0;
  if (!Length)
  {
    v23 = 0;
    goto LABEL_46;
  }
  v8 = Length;
  v27 = a3;
  v9 = 0;
  v10 = MEMORY[0x1E0C80978];
  do
  {
    v11 = 0;
    while (1)
    {
      v12 = BytePtr[v11];
      if (v12 == 10 || v12 == 13)
        break;
      if (v8 == ++v11)
        goto LABEL_11;
    }
    if (v8 == v11)
    {
LABEL_11:
      v14 = 0;
      v11 = v8;
LABEL_12:
      v15 = v8;
      goto LABEL_20;
    }
    v16 = BytePtr[v11];
    if (v16 == 10)
      goto LABEL_18;
    if (v16 != 13)
    {
      v14 = 0;
      goto LABEL_12;
    }
    if (v8 - v11 < 2 || BytePtr[v11 + 1] != 10)
LABEL_18:
      v14 = 1;
    else
      v14 = 2;
    v15 = v14 + v11;
LABEL_20:
    if (v15 == v14)
      v9 = 0;
    if (v9)
    {
      v17 = blockBufferOut;
      if (!blockBufferOut)
      {
        v18 = CMBlockBufferCreateEmpty(a2, 0, 0, &blockBufferOut);
        if ((_DWORD)v18)
          goto LABEL_50;
        v17 = blockBufferOut;
      }
      v18 = webVTTAppendTextToBlockBuffer(BytePtr, v15, v17);
      if ((_DWORD)v18)
      {
LABEL_50:
        v25 = v18;
        v23 = 0;
        goto LABEL_47;
      }
    }
    if (v15 >= 5 && !strncmp((const char *)BytePtr, "STYLE", 5uLL))
    {
      v19 = v15 - 5;
      if (v19)
      {
        v20 = (char *)(BytePtr + 5);
        do
        {
          v21 = *v20;
          if ((v21 & 0x80000000) != 0)
          {
            if (!__maskrune(v21, 0x4000uLL))
              goto LABEL_37;
          }
          else if ((*(_DWORD *)(v10 + 4 * v21 + 60) & 0x4000) == 0)
          {
            goto LABEL_37;
          }
          ++v20;
          --v19;
        }
        while (v19);
      }
      v9 = 1;
    }
LABEL_37:
    BytePtr += v14 + v11;
    v8 -= v14 + v11;
  }
  while (v8);
  Length = (CFIndex)blockBufferOut;
  if (!blockBufferOut)
  {
    v23 = 0;
    a3 = v27;
    goto LABEL_46;
  }
  DataLength = CMBlockBufferGetDataLength(blockBufferOut);
  v23 = malloc_type_malloc(DataLength, 0xB6360EADuLL);
  if (v23)
  {
    v24 = CMBlockBufferCopyDataBytes(blockBufferOut, 0, DataLength, v23);
    a3 = v27;
    if (!(_DWORD)v24)
    {
      Length = (CFIndex)CFDataCreate(a2, (const UInt8 *)v23, DataLength);
LABEL_46:
      v25 = 0;
      *a3 = Length;
      goto LABEL_47;
    }
  }
  else
  {
    v24 = FigSignalErrorAt();
  }
  v25 = v24;
LABEL_47:
  free(v23);
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  return v25;
}

void webVTTSelectorClean(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  if (a1)
  {
    v2 = *(const void **)a1;
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)a1 = 0;
    }
    v3 = *(const void **)(a1 + 8);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(a1 + 8) = 0;
    }
    v4 = *(const void **)(a1 + 16);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(a1 + 16) = 0;
    }
    v5 = *(const void **)(a1 + 24);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(a1 + 24) = 0;
    }
  }
}

uint64_t webVTTCreateSelectorFromString(const __CFString *a1, int a2, CFTypeRef *a3)
{
  CFIndex Length;
  CFIndex v7;
  char *v8;
  char v9;
  uint64_t v10;
  const char *v11;
  int v12;
  _BOOL4 v13;
  unsigned int v14;
  unsigned int v15;
  size_t i;
  unsigned int v17;
  size_t v18;
  CFStringRef v19;
  char *v20;
  char *v21;
  const __CFAllocator *v22;
  CFStringRef v23;
  CFMutableArrayRef Mutable;
  __CFArray *v25;
  char *v26;
  char *v27;
  CFIndex v28;
  CFStringRef v29;
  CFStringRef v30;
  size_t v31;
  CFStringRef v32;
  uint64_t v33;
  CFStringRef v34;

  Length = CFStringGetLength(a1);
  v7 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  v8 = (char *)malloc_type_malloc(v7, 0x122BFB41uLL);
  if (!v8 || !CFStringGetCString(a1, v8, v7, 0x8000100u))
    goto LABEL_55;
  *a3 = CFRetain(a1);
  v9 = *v8;
  if (*v8)
  {
    v10 = MEMORY[0x1E0C80978];
    v11 = v8;
    do
    {
      if (a2)
      {
        if (v9 < 0)
          v12 = __maskrune(v9, 0x4000uLL);
        else
          v12 = *(_DWORD *)(v10 + 4 * v9 + 60) & 0x4000;
        v13 = v12 == 0;
      }
      else
      {
        v13 = v9 != 91;
      }
      v11 += v13;
      v9 = *v11;
    }
    while (*v11 && v13);
    if (*v11)
    {
      if (a2)
      {
        *v11 = 0;
        while (1)
        {
          v15 = *++v11;
          v14 = v15;
          if ((v15 & 0x80000000) != 0)
          {
            if (!__maskrune(v14, 0x4000uLL))
            {
LABEL_20:
              for (i = strlen(v11) - 1; ; --i)
              {
                v17 = v11[i];
                if ((v17 & 0x80000000) != 0)
                {
                  if (!__maskrune(v17, 0x4000uLL))
                    goto LABEL_29;
                }
                else if ((*(_DWORD *)(v10 + 4 * v17 + 60) & 0x4000) == 0)
                {
                  goto LABEL_29;
                }
                v11[i] = 0;
              }
            }
          }
          else if ((*(_DWORD *)(v10 + 4 * v14 + 60) & 0x4000) == 0)
          {
            goto LABEL_20;
          }
        }
      }
      v18 = strlen(v11);
      v19 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)v11, v18, 0x8000100u, 0);
      a3[3] = v19;
      if (!v19)
        goto LABEL_55;
      *v11 = 0;
    }
  }
  v11 = 0;
LABEL_29:
  v20 = strchr(v8, 46);
  if (!v20)
  {
    if (!*v8
      || (v31 = strlen(v8),
          v32 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)v8, v31, 0x8000100u, 0),
          (a3[1] = v32) != 0))
    {
      v25 = 0;
LABEL_43:
      v33 = 0;
      if (a2 && v11)
      {
        if (FigCFEqual())
        {
          v34 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[voice=\"%s\"]"), v11);
          a3[3] = v34;
          if (!v34)
            goto LABEL_53;
        }
        v33 = 0;
      }
      if (!v25)
        goto LABEL_50;
      goto LABEL_49;
    }
LABEL_55:
    v33 = FigSignalErrorAt();
    goto LABEL_50;
  }
  v21 = v20;
  v22 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (v20 != v8)
  {
    v23 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)v8, v20 - v8, 0x8000100u, 0);
    a3[1] = v23;
    if (!v23)
      goto LABEL_55;
  }
  Mutable = CFArrayCreateMutable(v22, 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    goto LABEL_55;
  v25 = Mutable;
  while (1)
  {
    v26 = strchr(v21 + 1, 46);
    v27 = v26;
    v28 = v26 ? v26 - v21 : strlen(v21);
    v29 = CFStringCreateWithBytes(v22, (const UInt8 *)v21, v28, 0x8000100u, 0);
    if (!v29)
      break;
    v30 = v29;
    CFArrayAppendValue(v25, v29);
    CFRelease(v30);
    v21 = v27;
    if (!v27)
    {
      a3[2] = CFRetain(v25);
      goto LABEL_43;
    }
  }
LABEL_53:
  v33 = FigSignalErrorAt();
  if (v25)
LABEL_49:
    CFRelease(v25);
LABEL_50:
  free(v8);
  if ((_DWORD)v33)
    webVTTSelectorClean((uint64_t)a3);
  return v33;
}

uint64_t webVTTPushTag(uint64_t a1, const void *a2, uint64_t a3)
{
  const void *v6;
  uint64_t active;
  __CFArray *MutableCopy;
  __CFArray *v10;
  uint64_t v11;

  v6 = (const void *)*MEMORY[0x1E0CA29F8];
  active = webVTTFindActiveAttribute(a1, (CFTypeRef)*MEMORY[0x1E0CA29F8]);
  if (active)
  {
    if (*(_QWORD *)(active + 16) == a3)
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(active + 40), a2);
      return 0;
    }
    *(_QWORD *)(active + 24) = a3;
    MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, *(CFArrayRef *)(active + 40));
  }
  else
  {
    MutableCopy = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  }
  v10 = MutableCopy;
  if (!MutableCopy)
    return FigSignalErrorAt();
  CFArrayAppendValue(MutableCopy, a2);
  v11 = webVTTAddActiveAttribute(a1, v6, v10, a3);
  CFRelease(v10);
  return v11;
}

uint64_t webVTTAddActiveAttribute(uint64_t a1, const void *a2, const void *a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  CFTypeRef v10;
  _QWORD *v11;

  v8 = malloc_type_calloc(1uLL, 0x40uLL, 0x10E0040CC652593uLL);
  if (!v8)
    return FigSignalErrorAt();
  v9 = v8;
  v8[2] = a4;
  v8[4] = CFRetain(a2);
  if (a3)
    v10 = CFRetain(a3);
  else
    v10 = 0;
  v9[5] = v10;
  v11 = *(_QWORD **)(a1 + 8);
  *v9 = 0;
  v9[1] = v11;
  *v11 = v9;
  *(_QWORD *)(a1 + 8) = v9;
  v9[6] = 0;
  v9[7] = v9 + 6;
  return 0;
}

uint64_t webVTTFindActiveAttribute(uint64_t a1, CFTypeRef cf1)
{
  uint64_t i;

  for (i = **(_QWORD **)(*(_QWORD *)(a1 + 8) + 8); i; i = **(_QWORD **)(*(_QWORD *)(i + 8) + 8))
  {
    if (CFEqual(cf1, *(CFTypeRef *)(i + 32)) && !*(_QWORD *)(i + 24))
      break;
  }
  return i;
}

uint64_t webVTTPopTag(uint64_t a1, unsigned __int8 a2, const __CFString *a3, uint64_t a4)
{
  const void *v8;
  uint64_t active;
  uint64_t v10;
  const __CFArray *MutableCopy;
  CFIndex Count;
  CFIndex v13;
  const __CFString *ValueAtIndex;
  const __CFString *v15;
  CFRange v16;
  const void *v18;
  uint64_t v19;
  uint64_t v21;
  UInt8 buffer;
  CFRange v23;

  v8 = (const void *)*MEMORY[0x1E0CA29F8];
  active = webVTTFindActiveAttribute(a1, (CFTypeRef)*MEMORY[0x1E0CA29F8]);
  if (!active)
    return 0;
  v10 = active;
  v21 = a1;
  MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, *(CFArrayRef *)(active + 40));
  Count = CFArrayGetCount(MutableCopy);
  if (Count >= 1)
  {
    v13 = Count + 1;
    while (1)
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(MutableCopy, v13 - 2);
      v15 = ValueAtIndex;
      buffer = 0;
      if (a3)
      {
        v16 = CFStringFind(ValueAtIndex, a3, 0);
        if (!v16.location && CFStringGetLength(a3) == v16.length)
          break;
      }
      v23.location = 0;
      v23.length = 1;
      if (CFStringGetBytes(v15, v23, 0x8000100u, 0, 0, &buffer, 1, 0) == 1 && buffer == a2)
        break;
      if ((unint64_t)--v13 <= 1)
        goto LABEL_14;
    }
    CFArrayRemoveValueAtIndex(MutableCopy, v13 - 2);
  }
LABEL_14:
  if (*(_QWORD *)(v10 + 24) == a4)
  {
    v18 = *(const void **)(v10 + 40);
    if (v18)
      CFRelease(v18);
    v19 = 0;
    *(_QWORD *)(v10 + 40) = CFRetain(MutableCopy);
  }
  else
  {
    v19 = webVTTAddActiveAttribute(v21, v8, MutableCopy, a4);
  }
  *(_QWORD *)(v10 + 24) = a4;
  CFRelease(MutableCopy);
  return v19;
}

uint64_t webVTTSampleBufferParserSetStyleQueueFromTextMarkup(_QWORD *a1, const __CFArray *a2)
{
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  const void *v7;
  const __CFDictionary *ValueAtIndex;
  const __CFString *Value;
  uint64_t result;

  webVTTStyleQueueFree((uint64_t)a1);
  Count = CFArrayGetCount(a2);
  if (Count < 1)
    return webVTTAddGenericStylesToStyleList(a1);
  v5 = Count;
  v6 = 0;
  v7 = (const void *)*MEMORY[0x1E0CA2C30];
  while (1)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, v6);
    Value = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, v7);
    if (Value)
    {
      result = webVTTAddStyle((uint64_t)a1, Value, ValueAtIndex);
      if ((_DWORD)result)
        break;
    }
    if (v5 == ++v6)
      return webVTTAddGenericStylesToStyleList(a1);
  }
  return result;
}

uint64_t webVTTFindStyle(uint64_t a1, const void *a2)
{
  uint64_t result;
  uint64_t v4;
  CFIndex Count;
  const void *ValueAtIndex;

  result = webVTTFindActiveAttribute(a1, (CFTypeRef)*MEMORY[0x1E0CA29F8]);
  if (result)
  {
    v4 = result;
    Count = CFArrayGetCount(*(CFArrayRef *)(result + 40));
    while (Count-- >= 1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v4 + 40), Count);
      if (CFEqual(a2, ValueAtIndex))
        return 1;
    }
    return 0;
  }
  return result;
}

void webVTTApplyStyleDictionaryValue(const void *a1, const void *a2, __CFDictionary *a3)
{
  int v6;

  v6 = CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA2C30]);
  if (a1 && !v6 && !CFDictionaryContainsKey(a3, a1))
    CFDictionaryAddValue(a3, a1, a2);
}

_QWORD *webVTTCleanStyleMatchQueue(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;

  if (result)
  {
    v1 = result;
    while (1)
    {
      result = (_QWORD *)*v1;
      if (!*v1)
        break;
      v2 = *result;
      v3 = (_QWORD *)result[1];
      if (*result)
      {
        *(_QWORD *)(v2 + 8) = v3;
        v3 = (_QWORD *)result[1];
      }
      else
      {
        v1[1] = v3;
      }
      *v3 = v2;
      free(result);
    }
  }
  return result;
}

uint64_t webVTTProcessHeaderLineForMetadata(int a1, CFMutableDictionaryRef *a2, char *__big, unint64_t a4, unint64_t a5)
{
  size_t v5;
  uint64_t v9;
  char *v11;
  char *v12;
  char *v13;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  CFStringRef v21;
  CFStringRef v22;
  BOOL v23;
  CFNumberRef v24;
  CFNumberRef v25;
  __CFDictionary *v26;
  const void *v27;
  CFNumberRef v28;
  CFDictionaryRef v29;
  CFDictionaryRef v30;
  __CFDictionary *v31;
  const void *v32;
  const void *Value;
  const void *v34;
  const void *v35;
  __CFDictionary *v36;
  CFMutableDictionaryRef v37;
  const void *v38;
  const void *v39;
  void *v40;
  const void *v41;
  void *v42;
  const void *v43;
  void *key;
  int v45;
  const __CFAllocator *alloc;
  CFDictionaryRef valuePtr;
  char v48;
  unint64_t v49;
  size_t v50;

  v5 = a4 - a5;
  if (a4 <= a5)
    return 0;
  if (strnstr(__big, "-->", a4 - a5))
    return 0;
  v11 = (char *)memchr(__big, 58, v5);
  if (!v11)
    return 0;
  v12 = v11;
  v9 = 0;
  if (v11 == __big)
    return v9;
  v13 = (char *)(&__big[v5] - v11);
  if ((unint64_t)v13 < 2)
    return v9;
  if (!matchStringInBufferWithSpace("Region:", __big, v11 - __big + 1, 1, 0))
    return 0;
  alloc = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return FigSignalErrorAt();
  v15 = Mutable;
  v16 = (uint64_t)(v13 - 1);
  v17 = (uint64_t)(v12 + 1);
  v50 = 0;
  v49 = 0;
  if (!webVTTFindNextCueSetting((uint64_t)(v12 + 1), (uint64_t)(v13 - 1), 0, &v49, &v50))
  {
LABEL_50:
    v9 = 0;
    goto LABEL_51;
  }
  v45 = 0;
  v9 = 0;
  key = (void *)*MEMORY[0x1E0CA2CA0];
  v43 = (const void *)*MEMORY[0x1E0CA2CC8];
  v42 = (void *)*MEMORY[0x1E0CA2CA8];
  v41 = (const void *)*MEMORY[0x1E0CA2CB0];
  v40 = (void *)*MEMORY[0x1E0CA2CC0];
  v38 = (const void *)*MEMORY[0x1E0CA2CD0];
  v39 = (const void *)*MEMORY[0x1E0CA2CB8];
  do
  {
    v48 = 0;
    v18 = v49;
    v19 = v50;
    if (v50 < 3)
      goto LABEL_30;
    v20 = v17 + v49;
    if (matchStringInBufferWithSpace("id=", (const char *)(v17 + v49), v50, 0, 0))
    {
      v21 = CFStringCreateWithBytes(alloc, (const UInt8 *)(v20 + 3), v19 - 3, 0x8000100u, 0);
      if (!v21)
        goto LABEL_52;
      v22 = v21;
      CFDictionaryAddValue(v15, key, v21);
      CFRelease(v22);
      v45 = 1;
    }
    else if (matchStringInBufferWithSpace("width=", (const char *)(v17 + v18), v19, 0, 0))
    {
      valuePtr = 0;
      v9 = webVTTReadFloatingPointNumberOrPercent((unsigned __int8 *)(v20 + 6), v19 - 6, &v48, (double *)&valuePtr);
      if ((_DWORD)v9)
        v23 = 1;
      else
        v23 = v48 == 0;
      if (!v23)
      {
        v24 = CFNumberCreate(alloc, kCFNumberDoubleType, &valuePtr);
        if (!v24)
          goto LABEL_52;
        v25 = v24;
        v26 = v15;
        v27 = v43;
        goto LABEL_28;
      }
    }
    else if (matchStringInBufferWithSpace("lines=", (const char *)(v17 + v18), v19, 0, 0))
    {
      LODWORD(valuePtr) = 0;
      v9 = webVTTReadNumberOrPercent((unsigned __int8 *)(v20 + 6), v19 - 6, &v48, (int *)&valuePtr);
      if (!(_DWORD)v9 && !v48)
      {
        v28 = CFNumberCreate(alloc, kCFNumberIntType, &valuePtr);
        if (!v28)
        {
LABEL_52:
          v9 = FigSignalErrorAt();
          if (!(_DWORD)v9)
            goto LABEL_44;
          goto LABEL_51;
        }
        v25 = v28;
        v26 = v15;
        v27 = v42;
LABEL_28:
        CFDictionaryAddValue(v26, v27, v25);
        v29 = v25;
LABEL_29:
        CFRelease(v29);
      }
    }
    else if (matchStringInBufferWithSpace("regionanchor=", (const char *)(v17 + v18), v19, 0, 0))
    {
      valuePtr = 0;
      v9 = webVTTReadPercentageXandY((void *)(v20 + 13), v19 - 13, &valuePtr);
      if (!(_DWORD)v9)
      {
        v30 = valuePtr;
        v31 = v15;
        v32 = v41;
LABEL_38:
        CFDictionaryAddValue(v31, v32, v30);
        v29 = valuePtr;
        goto LABEL_29;
      }
    }
    else if (matchStringInBufferWithSpace("viewportanchor=", (const char *)(v17 + v18), v19, 0, 0))
    {
      valuePtr = 0;
      v9 = webVTTReadPercentageXandY((void *)(v20 + 15), v19 - 15, &valuePtr);
      if (!(_DWORD)v9)
      {
        v30 = valuePtr;
        v31 = v15;
        v32 = v40;
        goto LABEL_38;
      }
    }
    else if (matchStringInBufferWithSpace("scroll=", (const char *)(v17 + v18), v19, 0, 0)
           && matchStringInBufferWithSpace("up", (const char *)(v20 + 7), v19 - 7, 0, 0))
    {
      CFDictionaryAddValue(v15, v39, v38);
    }
LABEL_30:
    v49 = v19 + v18;
  }
  while (webVTTFindNextCueSetting(v17, v16, v19 + v18, &v49, &v50));
  if (v45 && !(_DWORD)v9)
  {
LABEL_44:
    Value = CFDictionaryGetValue(v15, key);
    if (!Value)
      goto LABEL_50;
    v34 = Value;
    v9 = webVTTInitMetadataDictionaryIfNecessary(a1, a2);
    if (*a2)
    {
      v35 = (const void *)*MEMORY[0x1E0CA2C38];
      v36 = (__CFDictionary *)CFDictionaryGetValue(*a2, (const void *)*MEMORY[0x1E0CA2C38]);
      if (v36)
      {
LABEL_49:
        CFDictionaryAddValue(v36, v34, v15);
        goto LABEL_51;
      }
      v37 = CFDictionaryCreateMutable(alloc, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v37)
      {
        v36 = v37;
        CFDictionaryAddValue(*a2, v35, v37);
        goto LABEL_49;
      }
    }
    v9 = FigSignalErrorAt();
  }
LABEL_51:
  CFRelease(v15);
  return v9;
}

uint64_t webVTTInitMetadataDictionaryIfNecessary(int a1, CFMutableDictionaryRef *a2)
{
  const __CFAllocator *v4;
  const __CFUUID *v5;
  const __CFUUID *v6;
  CFStringRef v7;
  CFStringRef v8;
  uint64_t v10;

  if (*a2)
    return 0;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  *a2 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!a1)
    return 0;
  v5 = CFUUIDCreate(v4);
  if (!v5)
    return FigSignalErrorAt();
  v6 = v5;
  v7 = CFUUIDCreateString(v4, v5);
  if (v7)
  {
    v8 = v7;
    CFDictionaryAddValue(*a2, (const void *)*MEMORY[0x1E0CA2C40], v7);
    CFRelease(v6);
    CFRelease(v8);
    return 0;
  }
  v10 = FigSignalErrorAt();
  CFRelease(v6);
  return v10;
}

uint64_t webVTTReadNumberOrPercent(unsigned __int8 *a1, uint64_t a2, _BYTE *a3, int *a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _BYTE *v8;
  int v9;
  BOOL v10;
  int v11;
  int v12;

  v4 = *a1;
  v5 = v4 == 45;
  v6 = a2 - v5;
  if (a2 == v5)
  {
    v7 = 0;
LABEL_9:
    v10 = 0;
  }
  else
  {
    v7 = 0;
    if (v4 == 45)
      v8 = a1 + 1;
    else
      v8 = a1;
    while (1)
    {
      v9 = (char)*v8;
      if ((v9 - 48) > 9)
        break;
      v7 = v9 - 48 + 10 * v7;
      ++v8;
      if (!--v6)
        goto LABEL_9;
    }
    if (*v8 != 37)
      return FigSignalErrorAt();
    v10 = v6 != 1;
    LODWORD(v6) = 1;
  }
  if (v4 == 45)
    v11 = v6;
  else
    v11 = 0;
  if (v10 || v11)
    return FigSignalErrorAt();
  if (v4 == 45)
    v12 = -v7;
  else
    v12 = v7;
  *a4 = v12;
  *a3 = v6;
  return 0;
}

uint64_t webVTTReadPercentageXandY(void *a1, size_t __n, CFDictionaryRef *a3)
{
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const __CFAllocator *v11;
  CFDictionaryRef v12;
  uint64_t v13;
  char v15;
  uint64_t v16;
  uint64_t valuePtr;
  void *values;
  CFTypeRef cf;
  void *keys;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  keys = 0;
  v21 = 0;
  values = 0;
  cf = 0;
  v6 = memchr(a1, 44, __n);
  if (!v6)
    goto LABEL_10;
  v7 = v6;
  v16 = 0;
  valuePtr = 0;
  v15 = 0;
  v8 = webVTTReadFloatingPointNumberOrPercent((unsigned __int8 *)a1, v6 - (_BYTE *)a1, &v15, (double *)&valuePtr);
  if ((_DWORD)v8)
    goto LABEL_11;
  if (!v15)
    goto LABEL_10;
  v9 = (_BYTE *)a1 + __n - v7;
  if (v9 < 2)
    goto LABEL_10;
  v8 = webVTTReadFloatingPointNumberOrPercent(v7 + 1, v9 - 1, &v15, (double *)&v16);
  if ((_DWORD)v8)
  {
LABEL_11:
    v13 = v8;
    v12 = 0;
    goto LABEL_12;
  }
  if (!v15)
  {
LABEL_10:
    v8 = FigSignalErrorAt();
    goto LABEL_11;
  }
  v10 = *MEMORY[0x1E0CA2C90];
  keys = (void *)*MEMORY[0x1E0CA2C88];
  v21 = v10;
  v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, &valuePtr);
  cf = CFNumberCreate(v11, kCFNumberDoubleType, &v16);
  v12 = CFDictionaryCreate(v11, (const void **)&keys, (const void **)&values, 2, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
  if (values)
    CFRelease(values);
  v13 = 0;
LABEL_12:
  if (cf)
    CFRelease(cf);
  if (a3)
    *a3 = v12;
  return v13;
}

uint64_t FigCreateOctaviaClosedCaptionsRenderPipeline(const opaqueCMFormatDescription *a1, const __CFDictionary *a2, const void *a3, CFTypeRef *a4)
{
  return octtextrp_CreateRenderPipelineCommon(1668047728, a1, a2, a3, a4);
}

uint64_t octtextrp_CreateRenderPipelineCommon(int a1, const opaqueCMFormatDescription *a2, const __CFDictionary *a3, const void *a4, CFTypeRef *a5)
{
  uint64_t v10;
  uint64_t DerivedStorage;
  char CFPreferenceNumberWithDefault;
  uint64_t v13;
  uint64_t v14;
  uint64_t FigBaseObject;
  void (*v16)(uint64_t, const __CFString *, _QWORD);
  dispatch_queue_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v21;
  uint64_t v22;
  CFTypeRef cf;

  cf = 0;
  if (a4)
  {
    FigRenderPipelineGetClassID();
    v10 = CMDerivedObjectCreate();
    if (!(_DWORD)v10)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(_QWORD *)(DerivedStorage + 120) = CFRetain(a4);
      *(_BYTE *)(DerivedStorage + 27) = 0;
      CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
      *(_BYTE *)(DerivedStorage + 27) = CFPreferenceNumberWithDefault;
      *(_DWORD *)(DerivedStorage + 4) = a1;
      if (a1 == 1668047728)
      {
        v21 = *MEMORY[0x1E0CA2E68];
        v22 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
        v13 = FigCreateClosedCaptionRenderPipeline(a2, (uint64_t)octtextrp_closedCaptionsRenderCallback, (uint64_t)cf, 0, 0, &v21, a3, (CFTypeRef *)(DerivedStorage + 8));
      }
      else
      {
        v21 = *MEMORY[0x1E0CA2E68];
        v22 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
        if (CFPreferenceNumberWithDefault)
          v14 = FigCreateSubtitleRenderPipeline((uint64_t)a2, (uint64_t)octtextrp_subtitleRenderCallback, (uint64_t)cf, 0, 0, 0, 0, 0, &v21, (uint64_t)a3, (CFTypeRef *)(DerivedStorage + 8));
        else
          v14 = FigCreateCaptionRenderPipeline((uint64_t)a2, (uint64_t)octtextrp_captionRenderCallback, (uint64_t)cf, 0, 0, 0, 0, 0, &v21, (uint64_t)a3, (CFTypeRef *)(DerivedStorage + 8));
        v13 = v14;
        FigBaseObject = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(DerivedStorage + 8));
        v16 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 56);
        if (v16)
          v16(FigBaseObject, CFSTR("DisplayNonForcedSubtitles"), *MEMORY[0x1E0C9AE50]);
      }
      if ((_DWORD)v13)
        goto LABEL_17;
      v17 = dispatch_queue_create("com.apple.coremedia.octtextrp_serialize", 0);
      *(_QWORD *)(DerivedStorage + 16) = v17;
      if (v17)
      {
        v13 = 0;
        v18 = *MEMORY[0x1E0C9D820];
        *(_OWORD *)(DerivedStorage + 40) = *MEMORY[0x1E0C9D820];
        *(_OWORD *)(DerivedStorage + 56) = v18;
        v19 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
        *(_OWORD *)(DerivedStorage + 72) = *MEMORY[0x1E0C9D628];
        *(_OWORD *)(DerivedStorage + 88) = v19;
        *a5 = cf;
        return v13;
      }
      v10 = FigSignalErrorAt();
    }
    v13 = v10;
LABEL_17:
    if (cf)
      CFRelease(cf);
    return v13;
  }
  return FigSignalErrorAt();
}

uint64_t FigCreateOctaviaSubtitleRenderPipeline(const opaqueCMFormatDescription *a1, const __CFDictionary *a2, const void *a3, CFTypeRef *a4)
{
  return octtextrp_CreateRenderPipelineCommon(1935832172, a1, a2, a3, a4);
}

void octtextrp_closedCaptionsRenderCallback(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  NSObject *v9;
  _QWORD block[6];
  int v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
  {
    FigSignalErrorAt();
  }
  else
  {
    v9 = *(NSObject **)(DerivedStorage + 16);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __octtextrp_closedCaptionsRenderCallback_block_invoke;
    block[3] = &__block_descriptor_tmp_12_5;
    v11 = a2;
    block[4] = a5;
    block[5] = a3;
    dispatch_sync(v9, block);
  }
}

void octtextrp_subtitleRenderCallback(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9, uint64_t a10)
{
  uint64_t DerivedStorage;
  NSObject *v19;
  _QWORD block[10];
  char v21;
  char v22;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
  {
    v19 = *(NSObject **)(DerivedStorage + 16);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __octtextrp_subtitleRenderCallback_block_invoke;
    block[3] = &__block_descriptor_tmp_13_1;
    block[4] = a10;
    block[5] = a6;
    v21 = a8;
    v22 = a9;
    *(double *)&block[6] = a1;
    *(double *)&block[7] = a2;
    *(double *)&block[8] = a3;
    *(double *)&block[9] = a4;
    dispatch_sync(v19, block);
  }
}

void octtextrp_captionRenderCallback(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9, uint64_t a10)
{
  uint64_t DerivedStorage;
  NSObject *v19;
  _QWORD block[10];
  char v21;
  char v22;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
  {
    v19 = *(NSObject **)(DerivedStorage + 16);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __octtextrp_captionRenderCallback_block_invoke;
    block[3] = &__block_descriptor_tmp_14_6;
    block[4] = a10;
    block[5] = a6;
    v21 = a8;
    v22 = a9;
    *(double *)&block[6] = a1;
    *(double *)&block[7] = a2;
    *(double *)&block[8] = a3;
    *(double *)&block[9] = a4;
    dispatch_sync(v19, block);
  }
}

uint64_t figOctaviaTextRenderPipelineInvalidate()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t FigBaseObject;
  uint64_t v4;
  void (*v5)(uint64_t);
  const void *v6;
  NSObject *v7;
  const void *v8;
  const void *v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v1 = DerivedStorage;
    if (!*(_BYTE *)DerivedStorage)
    {
      *(_BYTE *)DerivedStorage = 1;
      v2 = *(_QWORD *)(DerivedStorage + 8);
      if (v2)
      {
        FigBaseObject = FigRenderPipelineGetFigBaseObject(v2);
        if (FigBaseObject)
        {
          v4 = FigBaseObject;
          v5 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
          if (v5)
            v5(v4);
        }
        v6 = *(const void **)(v1 + 8);
        if (v6)
        {
          CFRelease(v6);
          *(_QWORD *)(v1 + 8) = 0;
        }
      }
      v7 = *(NSObject **)(v1 + 16);
      if (v7)
      {
        dispatch_sync(v7, &__block_literal_global_106);
        dispatch_release(*(dispatch_object_t *)(v1 + 16));
        *(_QWORD *)(v1 + 16) = 0;
      }
      octtextrp_clearOutTextImage(*(_QWORD *)(v1 + 120), *(_DWORD *)(v1 + 4) == 1668047728);
      v8 = *(const void **)(v1 + 32);
      if (v8)
      {
        CFRelease(v8);
        *(_QWORD *)(v1 + 32) = 0;
      }
      free(*(void **)(v1 + 104));
      *(_QWORD *)(v1 + 104) = 0;
      *(_DWORD *)(v1 + 112) = 0;
      v9 = *(const void **)(v1 + 120);
      if (v9)
      {
        CFRelease(v9);
        *(_QWORD *)(v1 + 120) = 0;
      }
    }
  }
  return 0;
}

__CFString *figOctaviaTextRenderPipelineCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigOctaviaTextRenderPipeline %p>"), a1);
  return Mutable;
}

uint64_t figOctaviaTextRenderPipelineCopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  _BYTE *DerivedStorage;
  _BYTE *v8;
  uint64_t result;
  CFTypeRef *v10;
  int v11;
  CFTypeRef v12;
  uint64_t FigBaseObject;
  uint64_t (*v14)(uint64_t, const void *, uint64_t, _QWORD *);

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  if (*DerivedStorage || !a4)
    return FigSignalErrorAt();
  if (!CFEqual(a2, CFSTR("DisplayClosedCaptions")))
  {
    if (!CFEqual(a2, CFSTR("DisplayNonForcedSubtitles")))
    {
      FigBaseObject = FigRenderPipelineGetFigBaseObject(*((_QWORD *)v8 + 1));
      v14 = *(uint64_t (**)(uint64_t, const void *, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
      if (v14)
        return v14(FigBaseObject, a2, a3, a4);
      else
        return 4294954514;
    }
    if (*((_DWORD *)v8 + 1) == 1935832172)
    {
      v10 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      v11 = v8[25];
      goto LABEL_11;
    }
    return 4294954446;
  }
  if (*((_DWORD *)v8 + 1) != 1668047728)
    return 4294954446;
  v10 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  v11 = v8[24];
LABEL_11:
  if (!v11)
    v10 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
  v12 = CFRetain(*v10);
  result = 0;
  *a4 = v12;
  return result;
}

uint64_t figOctaviaTextRenderPipelineSetProperty(uint64_t a1, const void *a2, const __CFBoolean *a3)
{
  _BYTE *DerivedStorage;
  _BYTE *v7;
  uint64_t v8;
  CFTypeID TypeID;
  int Value;
  NSObject *v11;
  _QWORD *v12;
  CFTypeID v13;
  int v14;
  NSObject *v15;
  uint64_t *v16;
  int v17;
  CFTypeID v18;
  CFTypeID v19;
  CFTypeID v20;
  int v22;
  _QWORD v23[6];
  CGRect v24;
  CGRect size;
  _QWORD v26[6];
  CGPoint v27;
  _QWORD v28[6];
  CGPoint origin;
  _QWORD block[6];
  char v31;
  _QWORD v32[6];
  char v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;

  v34 = 0;
  v35 = &v34;
  v36 = 0x2000000000;
  v37 = 0;
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v7 = DerivedStorage;
    if (!*DerivedStorage)
    {
      if (CFEqual(a2, CFSTR("DisplayClosedCaptions")))
      {
        if (*((_DWORD *)v7 + 1) == 1668047728)
        {
          if (a3)
          {
            TypeID = CFBooleanGetTypeID();
            if (TypeID == CFGetTypeID(a3))
            {
              Value = CFBooleanGetValue(a3);
              if (v7[24] != Value)
              {
                v11 = *((_QWORD *)v7 + 2);
                v32[0] = MEMORY[0x1E0C809B0];
                v32[1] = 0x40000000;
                v32[2] = __figOctaviaTextRenderPipelineSetProperty_block_invoke;
                v32[3] = &__block_descriptor_tmp_7_7;
                v33 = Value;
                v32[4] = v7;
                v32[5] = a1;
                v12 = v32;
LABEL_16:
                v15 = v11;
LABEL_17:
                dispatch_sync(v15, v12);
                goto LABEL_40;
              }
              goto LABEL_40;
            }
          }
          goto LABEL_38;
        }
      }
      else
      {
        if (!CFEqual(a2, CFSTR("DisplayNonForcedSubtitles")))
        {
          if (CFEqual(a2, CFSTR("ScreenSize")))
          {
            if (a3)
            {
              v18 = CFDictionaryGetTypeID();
              if (v18 == CFGetTypeID(a3))
              {
                size.origin.x = 0.0;
                size.origin.y = 0.0;
                if (CGSizeMakeWithDictionaryRepresentation(a3, (CGSize *)&size)
                  && (size.origin.x != *((double *)v7 + 5) || size.origin.y != *((double *)v7 + 6)))
                {
                  v15 = *((_QWORD *)v7 + 2);
                  v28[0] = MEMORY[0x1E0C809B0];
                  v28[1] = 0x40000000;
                  v28[2] = __figOctaviaTextRenderPipelineSetProperty_block_invoke_3;
                  v28[3] = &unk_1E2FB3FD0;
                  origin = size.origin;
                  v28[4] = &v34;
                  v28[5] = v7;
                  v12 = v28;
                  goto LABEL_17;
                }
              }
            }
          }
          else if (CFEqual(a2, CFSTR("OriginalVideoSize")))
          {
            if (a3)
            {
              v19 = CFDictionaryGetTypeID();
              if (v19 == CFGetTypeID(a3))
              {
                size.origin.x = 0.0;
                size.origin.y = 0.0;
                if (CGSizeMakeWithDictionaryRepresentation(a3, (CGSize *)&size)
                  && (size.origin.x != *((double *)v7 + 7) || size.origin.y != *((double *)v7 + 8)))
                {
                  v15 = *((_QWORD *)v7 + 2);
                  v26[0] = MEMORY[0x1E0C809B0];
                  v26[1] = 0x40000000;
                  v26[2] = __figOctaviaTextRenderPipelineSetProperty_block_invoke_4;
                  v26[3] = &unk_1E2FB3FF8;
                  v27 = size.origin;
                  v26[4] = &v34;
                  v26[5] = v7;
                  v12 = v26;
                  goto LABEL_17;
                }
              }
            }
          }
          else
          {
            if (!CFEqual(a2, CFSTR("VideoDisplayRect")))
            {
              v22 = FigRenderPipelineSetProperty_0(*((_QWORD *)v7 + 1), (uint64_t)a2, (uint64_t)a3);
              *((_DWORD *)v35 + 6) = v22;
              goto LABEL_40;
            }
            if (a3)
            {
              v20 = CFDictionaryGetTypeID();
              if (v20 == CFGetTypeID(a3))
              {
                memset(&size, 0, sizeof(size));
                if (CGRectMakeWithDictionaryRepresentation(a3, &size) && !CGRectEqualToRect(size, *(CGRect *)(v7 + 72)))
                {
                  v15 = *((_QWORD *)v7 + 2);
                  v23[0] = MEMORY[0x1E0C809B0];
                  v23[1] = 0x40000000;
                  v23[2] = __figOctaviaTextRenderPipelineSetProperty_block_invoke_5;
                  v23[3] = &unk_1E2FB4020;
                  v24 = size;
                  v23[4] = &v34;
                  v23[5] = v7;
                  v12 = v23;
                  goto LABEL_17;
                }
              }
            }
          }
LABEL_38:
          v16 = v35;
          v17 = -12852;
          goto LABEL_39;
        }
        if (*((_DWORD *)v7 + 1) == 1935832172)
        {
          if (a3)
          {
            v13 = CFBooleanGetTypeID();
            if (v13 == CFGetTypeID(a3))
            {
              v14 = CFBooleanGetValue(a3);
              if (v7[25] != v14)
              {
                v11 = *((_QWORD *)v7 + 2);
                block[0] = MEMORY[0x1E0C809B0];
                block[1] = 0x40000000;
                block[2] = __figOctaviaTextRenderPipelineSetProperty_block_invoke_2;
                block[3] = &__block_descriptor_tmp_8_10;
                v31 = v14;
                block[4] = v7;
                block[5] = a1;
                v12 = block;
                goto LABEL_16;
              }
LABEL_40:
              v8 = *((unsigned int *)v35 + 6);
              goto LABEL_41;
            }
          }
          goto LABEL_38;
        }
      }
      v16 = v35;
      v17 = -12850;
LABEL_39:
      *((_DWORD *)v16 + 6) = v17;
      goto LABEL_40;
    }
  }
  v8 = FigSignalErrorAt();
LABEL_41:
  _Block_object_dispose(&v34, 8);
  return v8;
}

void octtextrp_clearOutTextImage(uint64_t a1, int a2)
{
  CMBlockBufferRef destinationBuffer;
  int sourceBytes;
  uint64_t v4;
  uint64_t v5;
  int v6;

  destinationBuffer = 0;
  sourceBytes = a2;
  v5 = 0;
  v4 = 0;
  v6 = 0;
  if (!CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0x18uLL, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0x18uLL, 1u, &destinationBuffer)&& !CMBlockBufferReplaceDataBytes(&sourceBytes, destinationBuffer, 0, 0x18uLL))
  {
    FigTransportGetRemoteRootObject();
    NeroTransportSendAsyncMessage();
  }
  if (destinationBuffer)
    CFRelease(destinationBuffer);
}

void __figOctaviaTextRenderPipelineSetProperty_block_invoke(uint64_t a1)
{
  int v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 48);
  v2 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v2 + 24) = v1;
  if (v1 == 1)
    octtextrp_sendTextImage(*(_QWORD *)(a1 + 40), 1, 0);
  else
    octtextrp_clearOutTextImage(*(_QWORD *)(v2 + 120), 1);
}

uint64_t octtextrp_sendTextImage(uint64_t a1, int a2, int a3)
{
  CGSize v5;
  uint64_t DerivedStorage;
  uint64_t DataPointer;
  uint64_t v8;
  uint64_t v9;
  uint64_t VTable;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  size_t v14;
  int Width;
  int Height;
  int BytesPerRow;
  size_t MaxCompressionSizeFor32BPP;
  void *v19;
  unint64_t v20;
  void *v21;
  char *BaseAddress;
  unint64_t v24;
  char *dataPointerOut;
  CMBlockBufferRef destinationBuffer;
  size_t sourceBytes[3];
  CGRect v28;
  CVPixelBufferRef v29;
  char v30;

  v30 = 0;
  v29 = 0;
  v5 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
  v28.origin = (CGPoint)*MEMORY[0x1E0C9D628];
  v28.size = v5;
  memset(sourceBytes, 0, sizeof(sourceBytes));
  dataPointerOut = 0;
  destinationBuffer = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    goto LABEL_2;
  v8 = DerivedStorage;
  v9 = *(_QWORD *)(DerivedStorage + 32);
  if (!v9)
  {
    v11 = 4294954444;
    goto LABEL_28;
  }
  if (a3)
  {
    VTable = CMBaseObjectGetVTable();
    v11 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)(VTable + 16) + 40))(v9, &v30);
    if ((_DWORD)v11)
      v12 = 1;
    else
      v12 = v30 == 0;
    if (v12)
      goto LABEL_28;
    v9 = *(_QWORD *)(v8 + 32);
  }
  v13 = CMBaseObjectGetVTable();
  DataPointer = (*(uint64_t (**)(uint64_t, _QWORD, CVPixelBufferRef *, CGRect *))(*(_QWORD *)(v13 + 16) + 48))(v9, 0, &v29, &v28);
  if ((_DWORD)DataPointer)
    goto LABEL_27;
  LODWORD(sourceBytes[0]) = a2;
  if (CGRectIsEmpty(v28))
  {
    memset((char *)sourceBytes + 4, 0, 20);
    v14 = 24;
    goto LABEL_21;
  }
  Width = CVPixelBufferGetWidth(v29);
  HIDWORD(sourceBytes[0]) = Width;
  Height = CVPixelBufferGetHeight(v29);
  LODWORD(sourceBytes[1]) = Height;
  BytesPerRow = CVPixelBufferGetBytesPerRow(v29);
  HIDWORD(sourceBytes[1]) = BytesPerRow;
  LODWORD(sourceBytes[2]) = 1852994665;
  MaxCompressionSizeFor32BPP = NeroTextImageCodec_GetMaxCompressionSizeFor32BPP(Width, Height);
  v19 = *(void **)(v8 + 104);
  if (v19)
  {
    v20 = *(int *)(v8 + 112);
    if (MaxCompressionSizeFor32BPP <= v20)
    {
LABEL_19:
      v24 = v20;
      CVPixelBufferLockBaseAddress(v29, 0);
      BaseAddress = (char *)CVPixelBufferGetBaseAddress(v29);
      v11 = NeroTextImageCodec_Compress32BPPImage(BaseAddress, Width, Height, BytesPerRow, *(_BYTE **)(v8 + 104), &v24);
      CVPixelBufferUnlockBaseAddress(v29, 0);
      if ((_DWORD)v11)
        goto LABEL_28;
      HIDWORD(sourceBytes[2]) = v24;
      v14 = (int)v24 + 24;
LABEL_21:
      DataPointer = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v14, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, v14, 1u, &destinationBuffer);
      if ((_DWORD)DataPointer)
        goto LABEL_27;
      DataPointer = CMBlockBufferReplaceDataBytes(sourceBytes, destinationBuffer, 0, 0x18uLL);
      if ((_DWORD)DataPointer)
        goto LABEL_27;
      if (SHIDWORD(sourceBytes[2]) >= 1)
      {
        DataPointer = CMBlockBufferGetDataPointer(destinationBuffer, 0x18uLL, 0, 0, &dataPointerOut);
        if ((_DWORD)DataPointer)
          goto LABEL_27;
        memcpy(dataPointerOut, *(const void **)(v8 + 104), SHIDWORD(sourceBytes[2]));
      }
      FigTransportGetRemoteRootObject();
      DataPointer = NeroTransportSendAsyncMessage();
      goto LABEL_27;
    }
    free(v19);
    *(_QWORD *)(v8 + 104) = 0;
    *(_DWORD *)(v8 + 112) = 0;
  }
  v21 = malloc_type_calloc(1uLL, MaxCompressionSizeFor32BPP, 0xBCCB2734uLL);
  *(_QWORD *)(v8 + 104) = v21;
  if (v21)
  {
    *(_DWORD *)(v8 + 112) = MaxCompressionSizeFor32BPP;
    v20 = (int)MaxCompressionSizeFor32BPP;
    goto LABEL_19;
  }
LABEL_2:
  DataPointer = FigSignalErrorAt();
LABEL_27:
  v11 = DataPointer;
LABEL_28:
  CVPixelBufferRelease(v29);
  if (destinationBuffer)
    CFRelease(destinationBuffer);
  return v11;
}

void __figOctaviaTextRenderPipelineSetProperty_block_invoke_2(uint64_t a1)
{
  int v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 48);
  v2 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v2 + 25) = v1;
  if (v1 == 1)
  {
    octtextrp_sendTextImage(*(_QWORD *)(a1 + 40), 0, 0);
  }
  else if (!*(_BYTE *)(v2 + 26))
  {
    octtextrp_clearOutTextImage(*(_QWORD *)(v2 + 120), 0);
  }
}

uint64_t __figOctaviaTextRenderPipelineSetProperty_block_invoke_3(uint64_t result)
{
  double *v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  uint64_t VTable;

  *(_OWORD *)(*(_QWORD *)(result + 40) + 40) = *(_OWORD *)(result + 48);
  v1 = *(double **)(result + 40);
  v2 = *((_QWORD *)v1 + 4);
  if (v2)
  {
    v3 = result;
    v4 = v1[5];
    v5 = v1[6];
    VTable = CMBaseObjectGetVTable();
    result = (*(uint64_t (**)(uint64_t, double, double))(*(_QWORD *)(VTable + 16) + 8))(v2, v4, v5);
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t __figOctaviaTextRenderPipelineSetProperty_block_invoke_4(uint64_t result)
{
  double *v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t VTable;

  *(_OWORD *)(*(_QWORD *)(result + 40) + 56) = *(_OWORD *)(result + 48);
  v1 = *(double **)(result + 40);
  v2 = *((_QWORD *)v1 + 4);
  if (v2)
  {
    v3 = result;
    v4 = v1[7];
    v5 = v1[8];
    v6 = v1[9];
    v7 = v1[10];
    v8 = v1[11];
    v9 = v1[12];
    VTable = CMBaseObjectGetVTable();
    result = (*(uint64_t (**)(uint64_t, double, double, double, double, double, double))(*(_QWORD *)(VTable + 16)
                                                                                                + 16))(v2, v4, v5, v6, v7, v8, v9);
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t __figOctaviaTextRenderPipelineSetProperty_block_invoke_5(uint64_t result)
{
  uint64_t v1;
  __int128 v2;
  double *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t VTable;

  v1 = *(_QWORD *)(result + 40);
  v2 = *(_OWORD *)(result + 48);
  *(_OWORD *)(v1 + 88) = *(_OWORD *)(result + 64);
  *(_OWORD *)(v1 + 72) = v2;
  v3 = *(double **)(result + 40);
  v4 = *((_QWORD *)v3 + 4);
  if (v4)
  {
    v5 = result;
    v6 = v3[7];
    v7 = v3[8];
    v8 = v3[9];
    v9 = v3[10];
    v10 = v3[11];
    v11 = v3[12];
    VTable = CMBaseObjectGetVTable();
    result = (*(uint64_t (**)(uint64_t, double, double, double, double, double, double))(*(_QWORD *)(VTable + 16)
                                                                                                + 16))(v4, v6, v7, v8, v9, v10, v11);
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t __octtextrp_closedCaptionsRenderCallback_block_invoke(uint64_t a1)
{
  int v1;
  uint64_t v2;
  const __CFDictionary *v3;
  uint64_t DerivedStorage;
  CFTypeRef v5;
  CFTypeRef *v6;
  CFTypeRef v7;
  double v8;
  double v9;
  uint64_t VTable;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t result;

  v1 = *(_DWORD *)(a1 + 48);
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(const __CFDictionary **)(a1 + 40);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = (CFTypeRef *)(DerivedStorage + 32);
  v5 = *(CFTypeRef *)(DerivedStorage + 32);
  if (!v5)
  {
    if (FigClosedCaptionsTextRasterizerCreate(*MEMORY[0x1E0C9AE00], v6))
      return FigSignalErrorAt();
    v7 = *v6;
    if (!*v6)
      return FigSignalErrorAt();
    v8 = *(double *)(DerivedStorage + 40);
    v9 = *(double *)(DerivedStorage + 48);
    VTable = CMBaseObjectGetVTable();
    if ((*(unsigned int (**)(CFTypeRef, double, double))(*(_QWORD *)(VTable + 16) + 8))(v7, v8, v9))
      return FigSignalErrorAt();
    v11 = *(_QWORD *)(DerivedStorage + 32);
    v12 = *(double *)(DerivedStorage + 56);
    v13 = *(double *)(DerivedStorage + 64);
    v14 = *(double *)(DerivedStorage + 72);
    v15 = *(double *)(DerivedStorage + 80);
    v16 = *(double *)(DerivedStorage + 88);
    v17 = *(double *)(DerivedStorage + 96);
    v18 = CMBaseObjectGetVTable();
    if ((*(unsigned int (**)(uint64_t, double, double, double, double, double, double))(*(_QWORD *)(v18 + 16)
                                                                                                 + 16))(v11, v12, v13, v14, v15, v16, v17))
    {
      return FigSignalErrorAt();
    }
    v5 = *v6;
  }
  result = FigClosedCaptionsTextRasterizerSetCommand((uint64_t)v5, v1, v3);
  if ((_DWORD)result)
    return FigSignalErrorAt();
  if (*(_BYTE *)(DerivedStorage + 24))
  {
    result = octtextrp_sendTextImage(v2, 1, 1);
    if ((_DWORD)result)
      return FigSignalErrorAt();
  }
  return result;
}

void __octtextrp_subtitleRenderCallback_block_invoke(uint64_t a1)
{
  octtextrp_rasterizeAndDisplaySubtitle(*(_QWORD *)(a1 + 32), *(const __CFDictionary **)(a1 + 40), *(unsigned __int8 *)(a1 + 80), *(unsigned __int8 *)(a1 + 81), *(CGFloat *)(a1 + 48), *(CGFloat *)(a1 + 56), *(CGFloat *)(a1 + 64), *(CGFloat *)(a1 + 72));
}

void octtextrp_rasterizeAndDisplaySubtitle(uint64_t a1, const __CFDictionary *a2, uint64_t a3, int a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  uint64_t DerivedStorage;
  CFTypeRef *v17;
  CFTypeRef v18;
  double v19;
  double v20;
  uint64_t VTable;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  double v32;
  double v33;
  __CFDictionary *MutableCopy;
  const __CFDictionary *v35;
  int v36;
  CFTypeRef v37;
  uint64_t v38;
  double v39;
  double v40;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v17 = (CFTypeRef *)(DerivedStorage + 32);
  if (!*(_QWORD *)(DerivedStorage + 32))
  {
    if (FigSubtitleTextRasterizerCreate(*MEMORY[0x1E0C9AE00], v17))
      goto LABEL_24;
    v18 = *v17;
    if (!*v17)
      goto LABEL_24;
    v19 = *(double *)(DerivedStorage + 40);
    v20 = *(double *)(DerivedStorage + 48);
    VTable = CMBaseObjectGetVTable();
    if ((*(unsigned int (**)(CFTypeRef, double, double))(*(_QWORD *)(VTable + 16) + 8))(v18, v19, v20))
      goto LABEL_24;
    v22 = *(_QWORD *)(DerivedStorage + 32);
    v23 = *(double *)(DerivedStorage + 56);
    v24 = *(double *)(DerivedStorage + 64);
    v25 = *(double *)(DerivedStorage + 72);
    v26 = *(double *)(DerivedStorage + 80);
    v39 = a5;
    v40 = a6;
    v27 = a8;
    v28 = a7;
    v29 = *(double *)(DerivedStorage + 88);
    v30 = *(double *)(DerivedStorage + 96);
    v31 = CMBaseObjectGetVTable();
    v32 = v29;
    a8 = v27;
    v33 = v30;
    a7 = v28;
    a5 = v39;
    a6 = v40;
    if ((*(unsigned int (**)(uint64_t, double, double, double, double, double, double))(*(_QWORD *)(v31 + 16)
                                                                                                 + 16))(v22, v23, v24, v25, v26, v32, v33))
    {
      goto LABEL_24;
    }
  }
  if (!a2)
  {
    if (*(_BYTE *)(DerivedStorage + 26))
    {
      *(_BYTE *)(DerivedStorage + 26) = 0;
      v36 = 1;
    }
    else
    {
      v36 = 0;
    }
    v37 = *v17;
    v38 = CMBaseObjectGetVTable();
    if (!(*(unsigned int (**)(CFTypeRef))(*(_QWORD *)(v38 + 16) + 32))(v37))
    {
      v35 = 0;
      if (!v36)
        goto LABEL_17;
      goto LABEL_18;
    }
LABEL_24:
    FigSignalErrorAt();
    return;
  }
  *(_BYTE *)(DerivedStorage + 26) = a3;
  MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a2);
  if (!MutableCopy)
    goto LABEL_24;
  v35 = MutableCopy;
  if (FigSubtitleSampleInsertInfoForRenderer(MutableCopy, a5, a6, a7, a8, 0.0, 0.0, *(CGFloat *)(DerivedStorage + 40), *(double *)(DerivedStorage + 48) * 0.15, a3, a4)|| FigSubtitleTextRasterizerSetSubtitleSample((uint64_t)*v17, v35))
  {
    FigSignalErrorAt();
    goto LABEL_20;
  }
  if (!(_DWORD)a3)
  {
LABEL_17:
    if (!*(_BYTE *)(DerivedStorage + 25))
      goto LABEL_19;
  }
LABEL_18:
  if (octtextrp_sendTextImage(a1, 0, 1))
  {
    FigSignalErrorAt();
    if (v35)
      goto LABEL_20;
    return;
  }
LABEL_19:
  if (v35)
LABEL_20:
    CFRelease(v35);
}

void __octtextrp_captionRenderCallback_block_invoke(uint64_t a1)
{
  octtextrp_rasterizeAndDisplaySubtitle(*(_QWORD *)(a1 + 32), *(const __CFDictionary **)(a1 + 40), *(unsigned __int8 *)(a1 + 80), *(unsigned __int8 *)(a1 + 81), *(CGFloat *)(a1 + 48), *(CGFloat *)(a1 + 56), *(CGFloat *)(a1 + 64), *(CGFloat *)(a1 + 72));
}

uint64_t CreateServedMutableMovieState(_QWORD *a1)
{
  void *v2;
  uint64_t result;

  v2 = malloc_type_calloc(1uLL, 0x18uLL, 0x20040960023A9uLL);
  if (v2)
    result = 0;
  else
    result = FigSignalErrorAt();
  *a1 = v2;
  return result;
}

void DisposeServedMutableMovieState(const void **a1)
{
  const void *v2;
  const void *v3;
  void *v4;

  if (a1)
  {
    v2 = *a1;
    if (v2)
    {
      CFRelease(v2);
      *a1 = 0;
    }
    v3 = a1[1];
    if (v3)
    {
      CFRelease(v3);
      a1[1] = 0;
    }
    v4 = (void *)a1[2];
    if (v4)
      os_release(v4);
    free(a1);
  }
}

uint64_t FigMutableMovieServerStart()
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v1;
  uint64_t v2;

  if (!FigServer_IsMediaparserd())
    FigServer_IsMediaplaybackd();
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return FigSignalErrorAt();
  v1 = Mutable;
  FigCFDictionarySetInt32();
  v2 = FigXPCServerStart();
  CFRelease(v1);
  return v2;
}

uint64_t HandleMutableMovieMessage(uint64_t a1, void *a2)
{
  uint64_t OpCode;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
  OpCode = FigXPCServerLookupAndRetainAssociatedObject();
  if ((_DWORD)OpCode)
    return OpCode;
  else
    return 4294951138;
}

uint64_t HandleMutableMovieCopyPropertyMessage()
{
  uint64_t result;

  result = FigXPCMessageCopyCFString();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t HandleMutableMovieSetPropertyMessage()
{
  uint64_t result;

  result = FigXPCMessageCopyCFString();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t HandleMutableMovieCopyFormatReaderMessage(_xpc_connection_s *a1, uint64_t a2, xpc_object_t xdict, void *a4)
{
  _BOOL8 v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, _BOOL8, CFTypeRef, CFTypeRef *);
  uint64_t v10;
  CFTypeRef v12;
  CFTypeRef cf;

  v12 = 0;
  cf = 0;
  v7 = xpc_dictionary_get_BOOL(xdict, "MakeImmutableSnapshot");
  v8 = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)v8)
    goto LABEL_14;
  v9 = *(uint64_t (**)(uint64_t, _BOOL8, CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 8);
  if (!v9)
  {
    v10 = 4294954514;
    goto LABEL_9;
  }
  v8 = v9(a2, v7, cf, &v12);
  if ((_DWORD)v8
    || v12 && (v8 = FigXPCFormatReaderServerAssociateCopiedNeighborFormatReader(a1, (uint64_t)v12), (_DWORD)v8))
  {
LABEL_14:
    v10 = v8;
  }
  else
  {
    xpc_dictionary_set_uint64(a4, "FormatReader", 0);
    v10 = 0;
  }
LABEL_9:
  if (cf)
    CFRelease(cf);
  if (v12)
    CFRelease(v12);
  return v10;
}

uint64_t HandleMutableMovieWriteHeaderMessage()
{
  uint64_t OpCode;
  CFTypeRef cf;
  __int128 v4;
  __int128 v5;
  CFTypeRef v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v9 = 1752524863;
  v7 = 0;
  v8 = 0;
  v6 = 0;
  v4 = 0u;
  v5 = 0u;
  cf = 0;
  xpc_connection_get_audit_token();
  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  OpCode = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)OpCode)
    return OpCode;
  OpCode = FigXPCMessageCopyCFString();
  if ((_DWORD)OpCode)
    return OpCode;
  else
    return 0;
}

uint64_t HandleMutableMovieCopyHeaderDataMessage(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, CFTypeRef, CFTypeRef, _QWORD, CFTypeRef *);
  uint64_t v4;
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef cf;

  v7 = 0;
  cf = 0;
  v6 = 0;
  v2 = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)v2 || (v2 = FigXPCMessageCopyCFString(), (_DWORD)v2))
  {
LABEL_6:
    v4 = v2;
    goto LABEL_8;
  }
  v3 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 24);
  if (v3)
  {
    v2 = v3(a1, v7, cf, *MEMORY[0x1E0C9AE00], &v6);
    if (!(_DWORD)v2)
      v2 = FigXPCMessageSetCFData();
    goto LABEL_6;
  }
  v4 = 4294954514;
LABEL_8:
  if (cf)
    CFRelease(cf);
  if (v7)
    CFRelease(v7);
  if (v6)
    CFRelease(v6);
  return v4;
}

uint64_t HandleMutableMovieAddTrackMessage(uint64_t a1, xpc_object_t xdict, void *a3)
{
  int64_t int64;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, int64_t, _QWORD, _QWORD, int64_t *);
  uint64_t v9;
  int64_t value;

  LODWORD(value) = 0;
  int64 = xpc_dictionary_get_int64(xdict, "MediaType");
  if (xpc_dictionary_get_uint64(xdict, "TrackReader"))
  {
    v7 = FigXPCFormatReaderServerCopyFormatReaderForID();
    if ((_DWORD)v7)
      return v7;
  }
  v7 = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)v7)
    return v7;
  v8 = *(uint64_t (**)(uint64_t, int64_t, _QWORD, _QWORD, int64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 32);
  if (!v8)
    return 4294954514;
  v9 = v8(a1, int64, 0, 0, &value);
  if (!(_DWORD)v9)
    xpc_dictionary_set_int64(a3, "TrackID", (int)value);
  return v9;
}

uint64_t HandleMutableMovieCopyTrackPropertyMessage(int a1, xpc_object_t xdict)
{
  uint64_t result;

  xpc_dictionary_get_int64(xdict, "TrackID");
  result = FigXPCMessageCopyCFString();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t HandleMutableMovieSetTrackPropertyMessage(int a1, xpc_object_t xdict)
{
  uint64_t result;

  xpc_dictionary_get_int64(xdict, "TrackID");
  result = FigXPCMessageCopyCFString();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t HandleMutableMovieAppendSampleBufferMessage(uint64_t a1, void *a2)
{
  uint64_t ByteStreamFromMessageAndAddForMediaDataStorageURL;
  int64_t int64;
  xpc_object_t value;
  IOSurfaceRef v7;
  uint64_t BlockBufferData;
  uint64_t (*v9)(uint64_t, int64_t, CFTypeRef, CFTypeRef, __int128 *, __int128 *);
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  CFTypeRef cf;
  CFTypeRef v17;
  CFTypeRef v18;
  CFTypeRef v19;

  v18 = 0;
  v19 = 0;
  v17 = 0;
  v15 = 0;
  cf = 0;
  v14 = 0uLL;
  v12 = 0uLL;
  v13 = 0;
  ByteStreamFromMessageAndAddForMediaDataStorageURL = mutableMovieServer_CreateByteStreamFromMessageAndAddForMediaDataStorageURL(a1, a2);
  if ((_DWORD)ByteStreamFromMessageAndAddForMediaDataStorageURL
    || (int64 = xpc_dictionary_get_int64(a2, "TrackID"),
        ByteStreamFromMessageAndAddForMediaDataStorageURL = FigXPCMessageCopyCFDictionary(),
        (_DWORD)ByteStreamFromMessageAndAddForMediaDataStorageURL)
    || (ByteStreamFromMessageAndAddForMediaDataStorageURL = FigXPCMessageCopyFormatDescription(),
        (_DWORD)ByteStreamFromMessageAndAddForMediaDataStorageURL))
  {
    v10 = ByteStreamFromMessageAndAddForMediaDataStorageURL;
    v7 = 0;
  }
  else
  {
    value = xpc_dictionary_get_value(a2, "IOSurface");
    if (value)
      v7 = IOSurfaceLookupFromXPCObject(value);
    else
      v7 = 0;
    BlockBufferData = FigXPCMessageCreateBlockBufferData();
    if ((_DWORD)BlockBufferData
      || (BlockBufferData = FigRemote_CreateSampleBufferFromSerializedAtomBlockBufferAndSurface(),
          (_DWORD)BlockBufferData))
    {
      v10 = BlockBufferData;
    }
    else
    {
      v9 = *(uint64_t (**)(uint64_t, int64_t, CFTypeRef, CFTypeRef, __int128 *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
      if (v9)
      {
        v10 = v9(a1, int64, cf, v17, &v14, &v12);
        if (!(_DWORD)v10)
        {
          FigXPCMessageSetCMTime();
          FigXPCMessageSetCMTime();
        }
      }
      else
      {
        v10 = 4294954514;
      }
    }
  }
  if (v19)
    CFRelease(v19);
  if (v7)
    CFRelease(v7);
  if (cf)
    CFRelease(cf);
  if (v17)
    CFRelease(v17);
  if (v18)
    CFRelease(v18);
  return v10;
}

uint64_t HandleMutableMovieAppendMediaDataMessage(uint64_t a1, void *a2, void *a3)
{
  uint64_t ByteStreamFromMessageAndAddForMediaDataStorageURL;
  int64_t int64;
  int64_t v8;
  int64_t v9;
  uint64_t BlockBufferData;
  uint64_t (*v11)(uint64_t, int64_t, CFTypeRef, int64_t, int64_t, CFTypeRef, int64_t *);
  uint64_t v12;
  int64_t value;
  CFTypeRef cf;
  CFTypeRef v16;

  cf = 0;
  v16 = 0;
  value = 0;
  ByteStreamFromMessageAndAddForMediaDataStorageURL = mutableMovieServer_CreateByteStreamFromMessageAndAddForMediaDataStorageURL(a1, a2);
  if ((_DWORD)ByteStreamFromMessageAndAddForMediaDataStorageURL)
  {
    v12 = ByteStreamFromMessageAndAddForMediaDataStorageURL;
  }
  else
  {
    int64 = xpc_dictionary_get_int64(a2, "TrackID");
    v8 = xpc_dictionary_get_int64(a2, "DataOffset");
    v9 = xpc_dictionary_get_int64(a2, "DataLength");
    BlockBufferData = FigXPCMessageCreateBlockBufferData();
    if ((_DWORD)BlockBufferData || (BlockBufferData = FigXPCMessageCopyCFDictionary(), (_DWORD)BlockBufferData))
    {
      v12 = BlockBufferData;
    }
    else
    {
      v11 = *(uint64_t (**)(uint64_t, int64_t, CFTypeRef, int64_t, int64_t, CFTypeRef, int64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
      if (v11)
      {
        v12 = v11(a1, int64, cf, v8, v9, v16, &value);
        if (!(_DWORD)v12)
          xpc_dictionary_set_int64(a3, "DataOffset", value);
      }
      else
      {
        v12 = 4294954514;
      }
    }
    if (cf)
      CFRelease(cf);
  }
  if (v16)
    CFRelease(v16);
  return v12;
}

uint64_t HandleMutableMovieCanTrackAcceptFormatDescriptionMessage(uint64_t a1, xpc_object_t xdict, void *a3)
{
  int64_t int64;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, int64_t, _QWORD);
  BOOL v8;

  int64 = xpc_dictionary_get_int64(xdict, "TrackID");
  v6 = FigXPCMessageCopyFormatDescription();
  if (!(_DWORD)v6)
  {
    v7 = *(unsigned int (**)(uint64_t, int64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 96);
    if (v7)
      v8 = v7(a1, int64, 0) != 0;
    else
      v8 = 0;
    xpc_dictionary_set_BOOL(a3, "CanTrackAcceptFormatDescription", v8);
  }
  return v6;
}

uint64_t HandleMutableMovieGetTrackCompatibleWithTrackReaderMessage(uint64_t a1, xpc_object_t xdict, void *a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD, _DWORD *);
  uint64_t v7;
  _DWORD value[3];

  memset(value, 0, sizeof(value));
  xpc_dictionary_get_uint64(xdict, "TrackReader");
  v5 = FigXPCFormatReaderServerCopyFormatReaderForID();
  if ((_DWORD)v5)
  {
    v7 = v5;
  }
  else
  {
    v6 = *(uint64_t (**)(uint64_t, _QWORD, _DWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
    if (v6)
    {
      v7 = v6(a1, *(_QWORD *)&value[1], value);
      if (!(_DWORD)v7)
        xpc_dictionary_set_int64(a3, "TrackID", value[0]);
    }
    else
    {
      v7 = 4294954514;
    }
  }
  if (*(_QWORD *)&value[1])
    CFRelease(*(CFTypeRef *)&value[1]);
  return v7;
}

uint64_t HandleMutableMovieInsertMediaIntoTrackMessage(uint64_t a1, void *a2)
{
  int64_t int64;
  uint64_t (*v5)(uint64_t, int64_t, _OWORD *, _OWORD *);
  _OWORD v7[3];
  _OWORD v8[3];

  FigXPCMessageGetCMTimeRange();
  FigXPCMessageGetCMTimeRange();
  int64 = xpc_dictionary_get_int64(a2, "TrackID");
  v5 = *(uint64_t (**)(uint64_t, int64_t, _OWORD *, _OWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 112);
  if (!v5)
    return 4294954514;
  memset(v8, 0, sizeof(v8));
  memset(v7, 0, sizeof(v7));
  return v5(a1, int64, v8, v7);
}

uint64_t HandleMutableMovieInsertEmptySegmentMessage(uint64_t a1)
{
  uint64_t (*v2)(uint64_t, _OWORD *);
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v7[3];

  v4 = *MEMORY[0x1E0CA2E50];
  v5 = *(_OWORD *)(MEMORY[0x1E0CA2E50] + 16);
  v6 = *(_OWORD *)(MEMORY[0x1E0CA2E50] + 32);
  FigXPCMessageGetCMTimeRange();
  v2 = *(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 128);
  if (!v2)
    return 4294954514;
  v7[0] = v4;
  v7[1] = v5;
  v7[2] = v6;
  return v2(a1, v7);
}

uint64_t HandleMutableMovieInsertEmptyTrackSegmentMessage(uint64_t a1, void *a2)
{
  int64_t int64;
  uint64_t (*v5)(uint64_t, int64_t, _OWORD *);
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[3];

  v7 = *MEMORY[0x1E0CA2E50];
  v8 = *(_OWORD *)(MEMORY[0x1E0CA2E50] + 16);
  v9 = *(_OWORD *)(MEMORY[0x1E0CA2E50] + 32);
  FigXPCMessageGetCMTimeRange();
  int64 = xpc_dictionary_get_int64(a2, "TrackID");
  v5 = *(uint64_t (**)(uint64_t, int64_t, _OWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
  if (!v5)
    return 4294954514;
  v10[0] = v7;
  v10[1] = v8;
  v10[2] = v9;
  return v5(a1, int64, v10);
}

uint64_t HandleMutableMovieDeleteSegmentMessage(uint64_t a1)
{
  uint64_t (*v2)(uint64_t, _OWORD *);
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v7[3];

  v4 = *MEMORY[0x1E0CA2E50];
  v5 = *(_OWORD *)(MEMORY[0x1E0CA2E50] + 16);
  v6 = *(_OWORD *)(MEMORY[0x1E0CA2E50] + 32);
  FigXPCMessageGetCMTimeRange();
  v2 = *(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 144);
  if (!v2)
    return 4294954514;
  v7[0] = v4;
  v7[1] = v5;
  v7[2] = v6;
  return v2(a1, v7);
}

uint64_t HandleMutableMovieDeleteTrackSegmentMessage(uint64_t a1, void *a2)
{
  int64_t int64;
  uint64_t (*v5)(uint64_t, int64_t, _OWORD *);
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[3];

  v7 = *MEMORY[0x1E0CA2E50];
  v8 = *(_OWORD *)(MEMORY[0x1E0CA2E50] + 16);
  v9 = *(_OWORD *)(MEMORY[0x1E0CA2E50] + 32);
  FigXPCMessageGetCMTimeRange();
  int64 = xpc_dictionary_get_int64(a2, "TrackID");
  v5 = *(uint64_t (**)(uint64_t, int64_t, _OWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 136);
  if (!v5)
    return 4294954514;
  v10[0] = v7;
  v10[1] = v8;
  v10[2] = v9;
  return v5(a1, int64, v10);
}

uint64_t HandleMutableMovieScaleSegmentMessage(uint64_t a1)
{
  uint64_t (*v2)(uint64_t, _OWORD *, __int128 *);
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _OWORD v11[3];

  v6 = *MEMORY[0x1E0CA2E50];
  v7 = *(_OWORD *)(MEMORY[0x1E0CA2E50] + 16);
  v8 = *(_OWORD *)(MEMORY[0x1E0CA2E50] + 32);
  v4 = *MEMORY[0x1E0CA2E68];
  v5 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  FigXPCMessageGetCMTimeRange();
  FigXPCMessageGetCMTime();
  v2 = *(uint64_t (**)(uint64_t, _OWORD *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 160);
  if (!v2)
    return 4294954514;
  v11[0] = v6;
  v11[1] = v7;
  v11[2] = v8;
  v9 = v4;
  v10 = v5;
  return v2(a1, v11, &v9);
}

uint64_t HandleMutableMovieScaleTrackSegmentMessage(uint64_t a1, void *a2)
{
  int64_t int64;
  uint64_t (*v5)(uint64_t, int64_t, _OWORD *, __int128 *);
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _OWORD v14[3];

  v9 = *MEMORY[0x1E0CA2E50];
  v10 = *(_OWORD *)(MEMORY[0x1E0CA2E50] + 16);
  v11 = *(_OWORD *)(MEMORY[0x1E0CA2E50] + 32);
  v7 = *MEMORY[0x1E0CA2E68];
  v8 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  FigXPCMessageGetCMTimeRange();
  FigXPCMessageGetCMTime();
  int64 = xpc_dictionary_get_int64(a2, "TrackID");
  v5 = *(uint64_t (**)(uint64_t, int64_t, _OWORD *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 152);
  if (!v5)
    return 4294954514;
  v14[0] = v9;
  v14[1] = v10;
  v14[2] = v11;
  v12 = v7;
  v13 = v8;
  return v5(a1, int64, v14, &v12);
}

uint64_t HandleMutableMovieInsertSegmentFromFormatReaderMessage(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  void *v5;
  size_t count;
  size_t v7;
  size_t v8;
  uint64_t uint64;
  uint64_t ByteStreamFromObjectIDAndAddForMediaDataStorageURL;
  uint64_t v11;
  uint64_t v12;
  CFTypeRef v13;
  uint64_t (*v14)(uint64_t, CFTypeRef, _OWORD *, __int128 *, uint64_t);
  uint64_t v15;
  CFTypeRef v17;
  __int128 v18;
  uint64_t v19;
  _OWORD v20[3];

  v17 = 0;
  value = xpc_dictionary_get_value(xdict, "ByteStreamArray");
  if (value)
  {
    v5 = value;
    count = xpc_array_get_count(value);
    if (count)
    {
      v7 = count;
      v8 = 0;
      do
      {
        uint64 = xpc_array_get_uint64(v5, v8);
        if (uint64)
        {
          ByteStreamFromObjectIDAndAddForMediaDataStorageURL = mutableMovieServer_CreateByteStreamFromObjectIDAndAddForMediaDataStorageURL(a1, uint64);
          if ((_DWORD)ByteStreamFromObjectIDAndAddForMediaDataStorageURL)
            goto LABEL_12;
        }
      }
      while (v7 != ++v8);
    }
  }
  v11 = xpc_dictionary_get_uint64(xdict, "FormatReader");
  if (FigServer_IsMediaparserd() && !FigFormatReaderServerIsObjectIDLocallyServed())
  {
    ByteStreamFromObjectIDAndAddForMediaDataStorageURL = FigFormatReaderXPCRemoteCopyFormatReaderForObjectIDFromMediaserverd(v11, &v17);
    if ((_DWORD)ByteStreamFromObjectIDAndAddForMediaDataStorageURL)
      goto LABEL_12;
  }
  else
  {
    ByteStreamFromObjectIDAndAddForMediaDataStorageURL = FigXPCFormatReaderServerCopyFormatReaderForID();
    if ((_DWORD)ByteStreamFromObjectIDAndAddForMediaDataStorageURL)
    {
LABEL_12:
      v15 = ByteStreamFromObjectIDAndAddForMediaDataStorageURL;
      goto LABEL_14;
    }
  }
  FigXPCMessageGetCMTimeRange();
  FigXPCMessageGetCMTime();
  v12 = xpc_dictionary_get_uint64(xdict, "Flags");
  v13 = v17;
  v14 = *(uint64_t (**)(uint64_t, CFTypeRef, _OWORD *, __int128 *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 176);
  if (v14)
  {
    memset(v20, 0, sizeof(v20));
    v18 = 0uLL;
    v19 = 0;
    ByteStreamFromObjectIDAndAddForMediaDataStorageURL = v14(a1, v13, v20, &v18, v12);
    goto LABEL_12;
  }
  v15 = 4294954514;
LABEL_14:
  if (v17)
    CFRelease(v17);
  return v15;
}

uint64_t HandleMutableMovieInsertSegmentFromTrackReaderMessage(uint64_t a1, void *a2)
{
  uint64_t ByteStreamFromMessageAndAddForMediaDataStorageURL;
  uint64_t uint64;
  int64_t int64;
  uint64_t v7;
  CFTypeRef v8;
  uint64_t (*v9)(uint64_t, int64_t, CFTypeRef, _QWORD, _OWORD *, __int128 *, uint64_t);
  uint64_t v10;
  CFTypeRef v12;
  __int128 v13;
  uint64_t v14;
  _OWORD v15[3];

  v12 = 0;
  ByteStreamFromMessageAndAddForMediaDataStorageURL = mutableMovieServer_CreateByteStreamFromMessageAndAddForMediaDataStorageURL(a1, a2);
  if ((_DWORD)ByteStreamFromMessageAndAddForMediaDataStorageURL)
    goto LABEL_10;
  uint64 = xpc_dictionary_get_uint64(a2, "FormatReader");
  if (FigServer_IsMediaparserd() && !FigFormatReaderServerIsObjectIDLocallyServed())
  {
    ByteStreamFromMessageAndAddForMediaDataStorageURL = FigFormatReaderXPCRemoteCopyFormatReaderForObjectIDFromMediaserverd(uint64, &v12);
    if ((_DWORD)ByteStreamFromMessageAndAddForMediaDataStorageURL)
    {
LABEL_10:
      v10 = ByteStreamFromMessageAndAddForMediaDataStorageURL;
      goto LABEL_12;
    }
  }
  else
  {
    ByteStreamFromMessageAndAddForMediaDataStorageURL = FigXPCFormatReaderServerCopyFormatReaderForID();
    if ((_DWORD)ByteStreamFromMessageAndAddForMediaDataStorageURL)
      goto LABEL_10;
  }
  xpc_dictionary_get_uint64(a2, "TrackReader");
  ByteStreamFromMessageAndAddForMediaDataStorageURL = FigXPCFormatReaderServerCopyFormatReaderForID();
  if ((_DWORD)ByteStreamFromMessageAndAddForMediaDataStorageURL)
    goto LABEL_10;
  int64 = xpc_dictionary_get_int64(a2, "TrackID");
  FigXPCMessageGetCMTimeRange();
  FigXPCMessageGetCMTime();
  v7 = xpc_dictionary_get_uint64(a2, "Flags");
  v8 = v12;
  v9 = *(uint64_t (**)(uint64_t, int64_t, CFTypeRef, _QWORD, _OWORD *, __int128 *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
  if (v9)
  {
    memset(v15, 0, sizeof(v15));
    v13 = 0uLL;
    v14 = 0;
    ByteStreamFromMessageAndAddForMediaDataStorageURL = v9(a1, int64, v8, 0, v15, &v13, v7);
    goto LABEL_10;
  }
  v10 = 4294954514;
LABEL_12:
  if (v12)
    CFRelease(v12);
  return v10;
}

uint64_t HandleMutableMovieAddTrackReferenceToTrackMessage(uint64_t a1, xpc_object_t xdict)
{
  int64_t int64;
  int64_t v5;
  int64_t v6;
  uint64_t (*v7)(uint64_t, int64_t, int64_t, int64_t);

  int64 = xpc_dictionary_get_int64(xdict, "FromTrackID");
  v5 = xpc_dictionary_get_int64(xdict, "ToTrackID");
  v6 = xpc_dictionary_get_int64(xdict, "TrackReferenceType");
  v7 = *(uint64_t (**)(uint64_t, int64_t, int64_t, int64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 184);
  if (v7)
    return v7(a1, v6, int64, v5);
  else
    return 4294954514;
}

uint64_t HandleMutableMovieDeleteTrackReferenceToTrackMessage(uint64_t a1, xpc_object_t xdict)
{
  int64_t int64;
  int64_t v5;
  int64_t v6;
  uint64_t (*v7)(uint64_t, int64_t, int64_t, int64_t);

  int64 = xpc_dictionary_get_int64(xdict, "FromTrackID");
  v5 = xpc_dictionary_get_int64(xdict, "ToTrackID");
  v6 = xpc_dictionary_get_int64(xdict, "TrackReferenceType");
  v7 = *(uint64_t (**)(uint64_t, int64_t, int64_t, int64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 192);
  if (v7)
    return v7(a1, v6, int64, v5);
  else
    return 4294954514;
}

uint64_t mutableMovieServer_SandboxRegistrationRetrieveFromMessageAndAssociateToURL()
{
  FigXPCMessageCopySandboxRegistration();
  return 0;
}

uint64_t mutableMovieServer_CreateByteStreamFromMessageAndAddForMediaDataStorageURL(uint64_t a1, xpc_object_t xdict)
{
  uint64_t result;

  result = xpc_dictionary_get_uint64(xdict, "ByteStream");
  if (result)
    return mutableMovieServer_CreateByteStreamFromObjectIDAndAddForMediaDataStorageURL(a1, result);
  return result;
}

uint64_t mutableMovieServer_CreateByteStreamFromObjectIDAndAddForMediaDataStorageURL(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CFTypeRef v4;
  uint64_t (*v5)(uint64_t, CFTypeRef);
  uint64_t v6;
  CFTypeRef cf;

  cf = 0;
  v3 = FigByteStreamRemoteCreateWithPlaybackProcessObjectID(a2, &cf);
  if ((_DWORD)v3)
    goto LABEL_4;
  v4 = cf;
  v5 = *(uint64_t (**)(uint64_t, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 216);
  if (v5)
  {
    v3 = v5(a1, v4);
LABEL_4:
    v6 = v3;
    goto LABEL_6;
  }
  v6 = 4294954514;
LABEL_6:
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t fnl_handleNotification(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend(a2, "_dispatchNotification:value:", a3, a5);
}

unint64_t NeroTextImageCodec_GetMaxCompressionSizeFor32BPP(int a1, int a2)
{
  return (((4 * a1 + 7) & 0xFFFFFFFFFFFFFFF8)
        + ((unint64_t)(((((unint64_t)(4 * a1 + 7) >> 3) + 126) * (unsigned __int128)0x4081020408102041uLL) >> 64) >> 5)
        + 2)
       * a2;
}

uint64_t NeroTextImageCodec_Compress32BPPImage(char *__src, __int16 a2, int a3, uint64_t a4, _BYTE *a5, unint64_t *a6)
{
  char *v6;
  _BYTE *v8;
  unint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;

  if (!__src)
    return FigSignalErrorAt();
  v6 = __src;
  if ((__src & 7) != 0)
    return FigSignalErrorAt();
  if ((a4 & 7) != 0)
    return FigSignalErrorAt();
  v8 = a5;
  if (!a5)
    return FigSignalErrorAt();
  if (!a6)
    return FigSignalErrorAt();
  v10 = *a6;
  if (!*a6 || !a3)
    return FigSignalErrorAt();
  v11 = 0;
  v12 = a3 + 1;
  v13 = a2;
  while (1)
  {
    v18 = 0;
    result = ntic_compressLine32BPP_Vec(v6, v13, v8, v10, &v18);
    if ((_DWORD)result)
      break;
    v15 = v18;
    if (v10 == v18)
      return FigSignalErrorAt();
    v16 = v18 + v11;
    v17 = &v8[v18];
    *v17 = -1;
    v8 = v17 + 1;
    v6 += a4;
    v11 += v15 + 1;
    v10 += ~v15;
    if (--v12 <= 1)
    {
      if (v10 > 1)
      {
        result = 0;
        *(_WORD *)v8 = 0;
        *a6 = v16 + 3;
        return result;
      }
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t ntic_compressLine32BPP_Vec(char *__src, int a2, _BYTE *a3, uint64_t a4, _QWORD *a5)
{
  unsigned __int16 v5;
  _BYTE *v6;
  uint64_t v8;
  unint64_t v9;
  int v10;
  _QWORD *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  size_t v18;
  int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  int v23;
  _BYTE *v24;
  size_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v29;
  size_t v30;
  char *v31;

  if (a4 <= 0)
    return FigSignalErrorAt();
  v5 = a2;
  *a3 = 1;
  v6 = a3 + 1;
  if (a2 < 2)
  {
    v24 = a3 + 1;
LABEL_43:
    v26 = a5;
    if (a5)
    {
      v27 = v24 - a3;
      goto LABEL_45;
    }
    return 0;
  }
  v8 = 0;
  v9 = (unint64_t)&a3[a4];
  v10 = v5 >> 1;
  while (1)
  {
    v11 = v6 + 1;
    if ((unsigned __int16)v10 >= 0x7Fu)
      v12 = 127;
    else
      v12 = (unsigned __int16)v10;
    if (v12 < 2)
    {
      if ((unsigned __int16)v10 == 1)
        break;
      v16 = __src + 8;
      v13 = 1;
      goto LABEL_18;
    }
    v13 = 0;
    v15 = __src + 16;
    v14 = *(_QWORD *)__src;
    while (1)
    {
      v8 = v14;
      v16 = v15;
      v14 = *((_QWORD *)v15 - 1);
      if (v14 == v8)
        break;
      ++v13;
      v15 += 8;
      if (v12 - 1 == v13)
      {
        v13 = v12;
        break;
      }
    }
    if (v13 == (unsigned __int16)v10)
      break;
    if (v13 != 127)
    {
      if ((int)v13 < 1)
      {
LABEL_24:
        if ((__int16)v10 >= 128)
          v19 = 128;
        else
          v19 = (__int16)v10;
        v20 = v19 - 3;
        if (v19 < 3)
        {
          v23 = -2;
        }
        else
        {
          v21 = -v19;
          v22 = (uint64_t)&v16[8 * v20 + 8];
          v23 = -2;
          while (*(_QWORD *)v16 == v8)
          {
            v16 += 8;
            if (--v23 <= v21)
            {
              v16 = (char *)v22;
              v23 = v21;
              break;
            }
          }
        }
        *v6 = v23;
        *v11 = v8;
        v24 = v11 + 1;
        v10 += v23;
        goto LABEL_34;
      }
LABEL_18:
      *v6 = v13;
      v17 = 8 * v13;
      if (v17 >= v9 - (unint64_t)v11)
        v18 = v9 - (_QWORD)v11;
      else
        v18 = 8 * v13;
      memcpy(v11, __src, v18);
      if (v17 > v9 - (unint64_t)v11 && (unint64_t)&v11[v13] > v9)
        return FigSignalErrorAt();
      v6 = (char *)v11 + v18;
      v10 -= v13;
      v11 = (_QWORD *)((char *)v11 + v18 + 1);
      goto LABEL_24;
    }
    *v6 = 127;
    if (v9 - (unint64_t)v11 >= 0x3F8)
      v25 = 1016;
    else
      v25 = v9 - (_QWORD)v11;
    memcpy(v6 + 1, __src, v25);
    if (v9 - (unint64_t)v11 <= 0x3F7 && (unint64_t)(v6 + 1017) > v9)
      return FigSignalErrorAt();
    v24 = (char *)v11 + v25;
    v10 -= 127;
LABEL_34:
    v6 = v24;
    __src = v16;
    if ((__int16)v10 <= 0)
      goto LABEL_43;
  }
  *v6 = v10;
  v29 = 8 * (unsigned __int16)v10;
  if (v29 >= v9 - (unint64_t)v11)
    v30 = v9 - (_QWORD)v11;
  else
    v30 = 8 * (unsigned __int16)v10;
  memcpy(v6 + 1, __src, v30);
  v31 = (char *)v11 + v30;
  if (v29 <= v9 - (unint64_t)v11 || (unint64_t)&v31[8 * (unsigned __int16)v10] <= v9)
  {
    v26 = a5;
    if (a5)
    {
      v27 = v31 - a3;
LABEL_45:
      *v26 = v27;
    }
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t NeroTextImageCodec_Decompress32BPPImage(char *__src, uint64_t a2, uint64_t a3, int a4, char *a5, uint64_t a6, uint64_t a7)
{
  char *v7;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  char *v11;
  char *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  char *v21;
  uint64_t __pattern8;

  if (__src)
  {
    v7 = a5;
    if (a5)
    {
      if ((a5 & 7) == 0 && (a6 & 7) == 0 && (a7 & 7) == 0)
      {
        v9 = (unsigned __int8 *)__src;
        v10 = (unsigned __int8 *)&__src[a2];
        v11 = &a5[a7];
LABEL_7:
        if (!*v9)
          return 0;
        v12 = &v7[a6];
        while (v9 < v10)
        {
          v13 = v9 + 1;
          if (!*v9)
          {
            ++v9;
LABEL_41:
            v7 = v12;
            if (--a4)
              goto LABEL_7;
            return 0;
          }
          if (v13 >= v10)
            return FigSignalErrorAt();
          v7 = &v7[8 * *v9 - 8];
          while (1)
          {
            v9 = v13 + 1;
            v14 = *v13;
            if (!*v13)
              break;
            if ((char)v14 < 1)
            {
              __pattern8 = 0;
              if ((_DWORD)v14 == 255)
                goto LABEL_41;
              if (v13 + 8 >= v10)
                return FigSignalErrorAt();
              __pattern8 = *(_QWORD *)v9;
              v18 = 8 * (v14 ^ 0xFF) + 8;
              v19 = v11 - v7;
              if (v18 < v11 - v7)
                v19 = 8 * (v14 ^ 0xFF) + 8;
              v20 = v19 >= v12 - v7 ? v12 - v7 : v19;
              memset_pattern8(v7, &__pattern8, v20);
              v7 += v20;
              if (v20 != v18)
              {
                v21 = &v7[8 * v18];
                if (v21 > v11 || v21 > v12)
                  return FigSignalErrorAt();
              }
              v13 += 9;
            }
            else
            {
              v15 = v10 - v9;
              if (8 * v14 < (unint64_t)(v10 - v9))
                v15 = 8 * v14;
              if (v15 >= v11 - v7)
                v15 = v11 - v7;
              if (v15 >= v12 - v7)
                v16 = v12 - v7;
              else
                v16 = v15;
              memcpy(v7, v13 + 1, v16);
              v13 = &v9[v16];
              v7 += v16;
              if (v16 != 8 * v14)
              {
                if (&v13[8 * v14] > v10)
                  return FigSignalErrorAt();
                v17 = &v7[64 * v14];
                if (v17 > v11 || v17 > v12)
                  return FigSignalErrorAt();
              }
            }
            if (v13 >= v10)
              return FigSignalErrorAt();
          }
        }
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t NeroTextImageCodec_DecompressAndCompositeTwo32BGRAImages(char *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char *v9;
  uint64_t v10;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;

  v21 = 0;
  if (!a1)
    return FigSignalErrorAt();
  v9 = a3;
  if (!a3)
    return FigSignalErrorAt();
  v10 = a7;
  if (!a7 || (a7 & 7) != 0 || (a8 & 7) != 0 || (a9 & 7) != 0)
    return FigSignalErrorAt();
  v12 = a1;
  v13 = (unint64_t)&a1[a2];
  v14 = (unint64_t)&a3[a4];
  v15 = a7 + a9;
  v16 = a6 - 1;
  do
  {
    v17 = v16;
    v20 = 0;
    result = ntic_decodeLineRLEto32BGRA(v12, v13, v10, v15, v10 + a8, 0, &v20, (_BYTE *)&v21 + 1);
    if ((_DWORD)result)
      break;
    v19 = v20;
    v20 = 0;
    result = ntic_decodeLineRLEto32BGRA(v9, v14, v10, v15, v10 + a8, 1, &v20, &v21);
    if ((_DWORD)result)
      break;
    if (HIBYTE(v21) != 0 && (_BYTE)v21 != 0)
      break;
    v10 += a8;
    v12 += v19;
    v9 += v20;
    v16 = v17 - 1;
  }
  while (v17);
  return result;
}

uint64_t ntic_decodeLineRLEto32BGRA(char *a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, int a6, _QWORD *a7, _BYTE *a8)
{
  _QWORD *v8;
  char *v9;
  char *v11;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  size_t v19;
  size_t v20;
  size_t i;
  uint64_t v22;
  unint64_t v23;
  size_t v24;
  size_t v25;
  char *v26;
  char *v27;
  size_t j;
  uint64_t v29;
  uint64_t result;
  uint64_t __pattern8;

  v8 = a7;
  v9 = a1;
  if (!*a1)
  {
    result = 0;
    *a8 = 1;
    goto LABEL_53;
  }
  if ((unint64_t)a1 >= a2)
  {
    result = FigSignalErrorAt();
LABEL_53:
    v17 = v9;
    if (v8)
      goto LABEL_50;
    return result;
  }
  v11 = a1 + 1;
  if ((unint64_t)(a1 + 1) >= a2)
  {
LABEL_55:
    result = FigSignalErrorAt();
    v17 = v11;
    goto LABEL_49;
  }
  v14 = a4;
  v15 = (char *)(a3 + 8 * *a1 - 8);
  while (1)
  {
    v17 = v11 + 1;
    v16 = *v11;
    if (!*v11)
    {
LABEL_48:
      result = 0;
      goto LABEL_49;
    }
    if ((char)v16 < 1)
      break;
    v18 = 8 * v16;
    v19 = a2 - (_QWORD)v17;
    if (v18 < a2 - (unint64_t)v17)
      v19 = v18;
    if (v19 >= v14 - (unint64_t)v15)
      v19 = v14 - (_QWORD)v15;
    if (v19 >= a5 - (unint64_t)v15)
      v20 = a5 - (_QWORD)v15;
    else
      v20 = v19;
    if (a6 == 1)
    {
      if (v20)
      {
        for (i = 0; i < v20; i += 4)
          *(_DWORD *)&v15[i] = ntic_blendTwoBGRAPixels(*(unsigned int *)&v15[i], *(unsigned int *)&v17[i]);
      }
    }
    else
    {
      memcpy(v15, v11 + 1, v20);
    }
    v11 = &v17[v20];
    v15 += v20;
    if (v20 != v18)
    {
      if ((unint64_t)&v11[v18] > a2)
        goto LABEL_55;
      v27 = &v15[8 * v18];
      if ((unint64_t)v27 > v14 || (unint64_t)v27 > a5)
        goto LABEL_55;
    }
LABEL_39:
    if ((unint64_t)v11 >= a2)
      goto LABEL_55;
  }
  __pattern8 = 0;
  if ((_DWORD)v16 == 255)
    goto LABEL_48;
  if ((unint64_t)(v11 + 8) >= a2)
    goto LABEL_60;
  v22 = *(_QWORD *)v17;
  __pattern8 = *(_QWORD *)v17;
  v23 = 8 * (v16 ^ 0xFF) + 8;
  v24 = v14 - (_QWORD)v15;
  if (v23 < v14 - (unint64_t)v15)
    v24 = v23;
  if (v24 >= a5 - (unint64_t)v15)
    v25 = a5 - (_QWORD)v15;
  else
    v25 = v24;
  if (!a6)
    goto LABEL_29;
  if ((v22 & 0xFF000000FF000000) != 0)
  {
    if ((v22 & 0xFF000000FF000000) == 0xFF000000FF000000)
    {
LABEL_29:
      memset_pattern8(v15, &__pattern8, v25);
      goto LABEL_30;
    }
    if (v25)
    {
      for (j = 0; j < v25; j += 4)
      {
        if ((j & 4) != 0)
          v29 = v22;
        else
          v29 = HIDWORD(v22);
        *(_DWORD *)&v15[j] = ntic_blendTwoBGRAPixels(*(unsigned int *)&v15[j], v29);
      }
    }
  }
LABEL_30:
  v11 += 9;
  v15 += v25;
  if (v25 == v23 || (v26 = &v15[8 * v23], (unint64_t)v26 <= a4) && (unint64_t)v26 <= a5)
  {
    v14 = a4;
    goto LABEL_39;
  }
  v17 = v11;
LABEL_60:
  result = FigSignalErrorAt();
LABEL_49:
  v9 = a1;
  v8 = a7;
  if (a7)
LABEL_50:
    *v8 = v17 - v9;
  return result;
}

unint64_t ntic_blendTwoBGRAPixels(uint64_t a1, uint64_t a2)
{
  unsigned int v2;

  if (BYTE3(a1))
  {
    v2 = BYTE3(a2);
    if (BYTE3(a2) != 255)
    {
      if (v2)
        return ((((unint64_t)((v2 ^ 0xFF) * (a1 & 0xFF00FF)) >> 8) & 0xFF00FF) + (a2 & 0xFF00FF)) | ((((v2 ^ 0xFF) * ((a1 >> 8) & 0xFF00FF)) & 0xFF00FF00) + (a2 & 0xFF00FF00));
      else
        return a1;
    }
  }
  return a2;
}

uint64_t FigClosedCaptionsTextRasterizerCreate(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  uint64_t DerivedStorage;
  __int128 v5;
  uint64_t v6;
  dispatch_queue_t v7;
  uint64_t v8;
  uint64_t v9;
  char __str[256];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    FigTextRasterizerGetClassID();
    v3 = CMDerivedObjectCreate();
    if ((_DWORD)v3)
    {
      v9 = v3;
    }
    else
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(_QWORD *)DerivedStorage = 0;
      *(_OWORD *)(DerivedStorage + 8) = *MEMORY[0x1E0C9D820];
      v5 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
      *(_OWORD *)(DerivedStorage + 32) = *MEMORY[0x1E0C9D628];
      *(_OWORD *)(DerivedStorage + 48) = v5;
      *(_QWORD *)(DerivedStorage + 24) = 0;
      *(_BYTE *)(DerivedStorage + 400) = 1;
      *(_DWORD *)(DerivedStorage + 72) = 0;
      v6 = FigCFCaptionRendererCreate();
      *(_QWORD *)(DerivedStorage + 64) = v6;
      if (v6
        && (snprintf(__str, 0x100uLL, "com.apple.coremedia.FigClosedCaptionsTextRasterizer.messagequeue<%p>", *a2),
            v7 = dispatch_queue_create(__str, 0),
            (*(_QWORD *)(DerivedStorage + 408) = v7) != 0))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        v8 = FigNotificationCenterAddWeakListener();
      }
      else
      {
        v8 = FigSignalErrorAt();
      }
      v9 = v8;
      if (!(_DWORD)v8)
        return v9;
    }
    if (*a2)
    {
      CFRelease(*a2);
      *a2 = 0;
    }
    return v9;
  }
  return FigSignalErrorAt();
}

void captionRendererDidChangeCaptionsNotification_0(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  NSObject *v4;
  uint64_t context;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v4 = *(NSObject **)(DerivedStorage + 408);
    if (v4)
    {
      context = a2;
      dispatch_sync_f(v4, &context, (dispatch_function_t)captionRendererDidChangeCaptionsNotificationDo);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t FigClosedCaptionsTextRasterizerSetCommand(uint64_t a1, int a2, const __CFDictionary *a3)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || !*(_QWORD *)(DerivedStorage + 24))
    return FigSignalErrorAt();
  FigCFCaptionRendererProcessCaptionCommandData(*(_QWORD *)(DerivedStorage + 64), a2, a3);
  return 0;
}

void ccRasterizerFinalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 64))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    v1 = *(const void **)(DerivedStorage + 64);
    if (v1)
    {
      CFRelease(v1);
      *(_QWORD *)(DerivedStorage + 64) = 0;
    }
  }
  dispatch_release(*(dispatch_object_t *)(DerivedStorage + 408));
  CGContextRelease(*(CGContextRef *)(DerivedStorage + 24));
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
}

__CFString *ccRasterizerCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigClosedCaptionsTextRasterizer %p>"), a1);
  return Mutable;
}

uint64_t ccRasterizerSetRenderSize(double a1, double a2)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v8;
  const void *v9;
  double v10;
  size_t v12;
  CGColorSpace *v13;
  CGContextRef v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  if (a1 < 1.0 || a2 < 1.0)
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  if (*(double *)(DerivedStorage + 8) != a1 || *(double *)(DerivedStorage + 16) != a2)
  {
    *(double *)(DerivedStorage + 8) = a1;
    *(double *)(DerivedStorage + 16) = a2;
    v8 = CMBaseObjectGetDerivedStorage();
    v9 = *(const void **)(v8 + 24);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(v8 + 24) = 0;
    }
    v10 = *(double *)(v8 + 8);
    if (v10 == *MEMORY[0x1E0C9D820] && *(double *)(v8 + 16) == *(double *)(MEMORY[0x1E0C9D820] + 8))
    {
      v13 = 0;
    }
    else
    {
      v12 = vcvtd_n_u64_f64(v10, 2uLL);
      v13 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
      v14 = CGBitmapContextCreate(0, (unint64_t)*(double *)(v8 + 8), (unint64_t)*(double *)(v8 + 16), 8uLL, v12, v13, 0x2002u);
      *(_QWORD *)(v8 + 24) = v14;
      if (!v14)
        FigSignalErrorAt();
    }
    CGColorSpaceRelease(v13);
    ccras_setupElementRects();
    *(_BYTE *)(v6 + 400) = 1;
  }
  return 0;
}

uint64_t ccRasterizerSetVideoSizeAndDisplayRect(double a1, double a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  uint64_t DerivedStorage;
  CGRect *v11;
  CGRect v13;
  CGRect v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v11 = (CGRect *)DerivedStorage;
  v13.origin.x = a3;
  v13.origin.y = a4;
  v13.size.width = a5;
  v13.size.height = a6;
  if (CGRectIsEmpty(v13))
    return FigSignalErrorAt();
  v14.origin.x = a3;
  v14.origin.y = a4;
  v14.size.width = a5;
  v14.size.height = a6;
  if (!CGRectEqualToRect(v11[1], v14))
  {
    v11[1].origin.x = a3;
    v11[1].origin.y = a4;
    v11[1].size.width = a5;
    v11[1].size.height = a6;
    ccras_setupElementRects();
    ccras_clearBitmapContext();
  }
  return 0;
}

uint64_t ccRasterizerSetFontName(uint64_t a1, const __CFString *a2)
{
  const void **DerivedStorage;
  const void **v4;
  const void *v5;

  DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || !a2)
    return FigSignalErrorAt();
  v4 = DerivedStorage;
  v5 = *DerivedStorage;
  *DerivedStorage = a2;
  CFRetain(a2);
  if (v5)
    CFRelease(v5);
  FigCFCaptionRendererSetFontName((uint64_t)v4[8], a2);
  return 0;
}

uint64_t ccRasterizerReset()
{
  uint64_t DerivedStorage;
  uint64_t v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v1 = DerivedStorage;
  FigCFCaptionRendererResetCaptions();
  *(_DWORD *)(v1 + 72) = 0;
  ccras_clearBitmapContext();
  return 0;
}

uint64_t ccRasterizerImageHasChangedSinceLastCopy(uint64_t a1, _BYTE *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
    *a2 = *(_BYTE *)(DerivedStorage + 400);
  return 0;
}

uint64_t ccRasterizerCopyImageBuffer(uint64_t a1, uint64_t a2, CVPixelBufferRef *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  CGContext *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  if (!a3)
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  v9 = *(CGContext **)(DerivedStorage + 24);
  if (!v9)
    return FigSignalErrorAt();
  result = FigTextRasterizerCreatePixelBufferFromBitmapContext(v9, 0x42475241u, a2, a3);
  if (!(_DWORD)result)
  {
    if (a4)
    {
      v11 = *MEMORY[0x1E0C9D628];
      v12 = *(_QWORD *)(MEMORY[0x1E0C9D628] + 8);
      v13 = *(_QWORD *)(MEMORY[0x1E0C9D628] + 16);
      v14 = *(_QWORD *)(MEMORY[0x1E0C9D628] + 24);
      if (*(int *)(v8 + 72) >= 1)
      {
        v15 = 0;
        v16 = v8 + 104;
        do
        {
          *(CGRect *)&v11 = CGRectUnion(*(CGRect *)&v11, *(CGRect *)(v16 - 24));
          ++v15;
          v16 += 32;
        }
        while (v15 < *(int *)(v8 + 72));
      }
      *a4 = v11;
      a4[1] = v12;
      a4[2] = v13;
      a4[3] = v14;
    }
    result = 0;
    *(_BYTE *)(v8 + 400) = 0;
  }
  return result;
}

__n128 ccras_setupElementRects()
{
  uint64_t DerivedStorage;
  double *v1;
  double *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  CGRect *v15;
  CGSize size;
  _OWORD v17[4];
  int v18;
  CGRect v19[10];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v18 = 0;
  v1 = (double *)(DerivedStorage + 48);
  v2 = (double *)(DerivedStorage + 56);
  if (CGRectIsNull(*(CGRect *)(DerivedStorage + 32)))
  {
    v1 = (double *)(DerivedStorage + 8);
    v2 = (double *)(DerivedStorage + 16);
    v3 = 0.0;
    v4 = 0.0;
  }
  else
  {
    v4 = *(double *)(DerivedStorage + 32);
    v3 = *(double *)(DerivedStorage + 40);
  }
  v5 = *v2;
  v6 = *v1;
  v7 = *(_QWORD *)(DerivedStorage + 64);
  v8 = *(_OWORD *)(MEMORY[0x1E0CA4AD8] + 16);
  v17[0] = *MEMORY[0x1E0CA4AD8];
  v17[1] = v8;
  v9 = *(_OWORD *)(MEMORY[0x1E0CA4AD8] + 48);
  v17[2] = *(_OWORD *)(MEMORY[0x1E0CA4AD8] + 32);
  v17[3] = v9;
  FigCFCaptionRendererGetCaptionElementRect(v7, v17, 0, 10, &v18, v19, v4, v3, v6, v5, v4, v3);
  v11 = v18;
  if (v18 >= 10)
    v12 = 10;
  else
    v12 = v18;
  *(_DWORD *)(DerivedStorage + 72) = v12;
  if (v11 >= 1)
  {
    v13 = 0;
    v14 = DerivedStorage + 80;
    v15 = v19;
    do
    {
      result = (__n128)v15->origin;
      size = v15->size;
      ++v15;
      *(__n128 *)v14 = result;
      *(CGSize *)(v14 + 16) = size;
      v14 += 32;
      ++v13;
    }
    while (v13 < v12);
  }
  return result;
}

void ccras_clearBitmapContext()
{
  uint64_t DerivedStorage;
  CGRect v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1.origin.x = *(CGFloat *)MEMORY[0x1E0C9D538];
  v1.origin.y = *(CGFloat *)(MEMORY[0x1E0C9D538] + 8);
  v1.size.width = *(CGFloat *)(DerivedStorage + 8);
  v1.size.height = *(CGFloat *)(DerivedStorage + 16);
  CGContextClearRect(*(CGContextRef *)(DerivedStorage + 24), v1);
  *(_BYTE *)(DerivedStorage + 400) = 1;
}

void captionRendererDidChangeCaptionsNotificationDo()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  CGFloat *v3;
  BOOL v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = 0;
  if (DerivedStorage)
  {
    v1 = DerivedStorage;
    ccras_setupElementRects();
    ccras_clearBitmapContext();
    if (*(int *)(v1 + 72) >= 1)
    {
      v2 = 0;
      v3 = (CGFloat *)(v1 + 104);
      do
      {
        FigCFCaptionRendererDrawCaptionElementInContextForRectOrientation(*(v3 - 3), *(v3 - 2), *(v3 - 1), *v3, *(_QWORD *)(v1 + 64), v2++, *(CGContext **)(v1 + 24), 0, &v4);
        v3 += 4;
      }
      while (v2 < *(int *)(v1 + 72));
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t FigFairplayPSSHAtomParserParseAndCreateRecordRemote(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  xpc_object_t value;
  void *v9;
  size_t count;
  size_t v11;
  size_t v12;
  xpc_object_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _OWORD *data;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v21;
  size_t length[5];
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;

  v23 = 0;
  v24 = &v23;
  v25 = 0x2000000000;
  v26 = 0;
  length[0] = MEMORY[0x1E0C809B0];
  length[1] = 0x40000000;
  length[2] = (size_t)__ffpap_ensureClientEstablished_block_invoke;
  length[3] = (size_t)&unk_1E2FB4290;
  length[4] = (size_t)&v23;
  if (ffpap_ensureClientEstablished_sFigFairplayPSSHAtomRemoteClientSetupOnce != -1)
    dispatch_once(&ffpap_ensureClientEstablished_sFigFairplayPSSHAtomRemoteClientSetupOnce, length);
  v4 = *((unsigned int *)v24 + 6);
  _Block_object_dispose(&v23, 8);
  if ((_DWORD)v4)
    goto LABEL_18;
  v5 = FigXPCCreateBasicMessage();
  if ((_DWORD)v5
    || (v5 = FigXPCMessageSetCFData(), (_DWORD)v5)
    || (v5 = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)v5))
  {
    v4 = v5;
LABEL_18:
    v7 = 0;
    goto LABEL_19;
  }
  v6 = malloc_type_calloc(1uLL, 0x18uLL, 0x10A0040FC6C5850uLL);
  v7 = v6;
  if (!v6)
  {
    FigSignalErrorAt();
    v4 = 0;
    goto LABEL_19;
  }
  v21 = a3;
  v6[1] = 0;
  v6[2] = v6 + 1;
  length[0] = 0;
  *(_DWORD *)v6 = FigXPCMessageGetUInt32();
  value = xpc_dictionary_get_value(0, "records");
  if (!value || (v9 = value, (count = xpc_array_get_count(value)) == 0))
  {
LABEL_16:
    v19 = v21;
LABEL_17:
    v4 = 0;
    *v19 = v7;
    goto LABEL_18;
  }
  v11 = count;
  v12 = 0;
  while (1)
  {
    v13 = xpc_array_get_value(v9, v12);
    v14 = malloc_type_calloc(1uLL, 0x30uLL, 0x10E0040A95F30ABuLL);
    if (!v14)
      break;
    v15 = v14;
    v16 = FigXPCMessageCopyCFData();
    if ((_DWORD)v16)
      goto LABEL_21;
    v16 = FigXPCMessageCopyCFArray();
    if ((_DWORD)v16)
      goto LABEL_21;
    data = xpc_dictionary_get_data(v13, "keyID", length);
    if (length[0] != 16)
      break;
    *(_OWORD *)v15 = *data;
    v15[4] = 0;
    v18 = (_QWORD *)v7[2];
    v15[5] = v18;
    *v18 = v15;
    v7[2] = v15 + 4;
    if (v11 == ++v12)
      goto LABEL_16;
  }
  v19 = v21;
  v16 = FigSignalErrorAt();
  if (!(_DWORD)v16)
    goto LABEL_17;
LABEL_21:
  v4 = v16;
LABEL_19:
  free(v7);
  FigXPCRelease();
  FigXPCRelease();
  return v4;
}

void __ffpap_ensureClientEstablished_block_invoke(uint64_t a1)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v3;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v3 = Mutable;
    FigCFDictionarySetValue();
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = FigXPCRemoteClientCreate();
    CFRelease(v3);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = -12786;
  }
}

uint64_t FigSubtitleTextRasterizerCreate(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v4;
  uint64_t DerivedStorage;
  _OWORD *v6;
  __int128 v7;
  int v8;
  uint64_t v9;
  CFTypeRef v10;
  uint64_t v11;
  NSObject **v12;
  uint64_t v13;

  if (a2)
  {
    FigTextRasterizerGetClassID();
    v4 = CMDerivedObjectCreate();
    if (!(_DWORD)v4)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v6 = (_OWORD *)MEMORY[0x1E0C9D820];
      *(_QWORD *)DerivedStorage = 0;
      *(_OWORD *)(DerivedStorage + 8) = *v6;
      *(_QWORD *)(DerivedStorage + 72) = 0;
      v7 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
      *(_OWORD *)(DerivedStorage + 80) = *MEMORY[0x1E0C9D628];
      *(_OWORD *)(DerivedStorage + 96) = v7;
      *(_BYTE *)(DerivedStorage + 128) = 1;
      v8 = FigSubtitleRendererUseCoreTextRendererByDefault();
      *(_BYTE *)(DerivedStorage + 129) = v8;
      if (v8)
      {
        v9 = FigCoreTextSubtitleRendererCreate(a1, (const void **)(DerivedStorage + 120));
        goto LABEL_9;
      }
      v10 = *a2;
      v11 = CMBaseObjectGetDerivedStorage();
      v12 = (NSObject **)(v11 + 136);
      v4 = FigCaptionRendererSessionCreate(0, 0, (uint64_t)v10, (uint64_t *)(v11 + 136));
      if (!(_DWORD)v4)
      {
        if (!*v12)
          return 0;
        v4 = (uint64_t)FigCaptionRendererSessionSetCGContextDevice(*v12, 0, 1, 1, 0.0, 0.0, 320.0, 240.0);
        if (!(_DWORD)v4)
        {
          *(_QWORD *)(v11 + 144) = 0;
          v9 = FigCaptionSerializerCreate();
LABEL_9:
          v13 = v9;
          if ((_DWORD)v9)
            goto LABEL_10;
          return v13;
        }
      }
    }
    v13 = v4;
LABEL_10:
    if (*a2)
    {
      CFRelease(*a2);
      *a2 = 0;
    }
    return v13;
  }
  return FigSignalErrorAt();
}

uint64_t FigSubtitleTextRasterizerSetSubtitleSample(uint64_t a1, const __CFDictionary *a2)
{
  CGFloat *v3;
  __int128 v4;
  uint64_t DerivedStorage;
  uint64_t v6;
  CGContext *v7;
  double v8;
  double v9;
  uint64_t CaptionGroupFromCFData;
  const __CFAllocator *v11;
  const __CFDictionary *MutableCopy;
  CFTypeRef v13;
  const __CFNumber *v14;
  const __CFArray *v15;
  const __CFArray *v16;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v18;
  uint64_t SliceCount;
  const __CFDictionary *Mutable;
  CFMutableDictionaryRef v21;
  const __CFDictionary *v22;
  uint64_t v23;
  uint64_t CaptionData;
  uint64_t v25;
  const __CFDictionary *v26;
  const __CFDictionary *v27;
  const __CFDictionary *v28;
  const __CFDictionary *v29;
  CFTypeRef v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  const void *v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  double v42;
  int v43;
  uint64_t v44;
  int v45;
  double v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  const void *Float32;
  const void *v65;
  const void *v66;
  const void *v67;
  CFRange v68;
  __CFAttributedString *v69;
  const __CFString *v70;
  const void *v71;
  const __CFDictionary *v72;
  uint64_t v73;
  const __CFArray *v74;
  double v75;
  double v76;
  double v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  CFDictionaryRef v81;
  __int128 v82;
  CGFloat v83;
  double v84;
  double v85;
  double v86;
  CFTypeRef v88;
  CFTypeRef v89;
  const __CFDictionary *v90;
  const void *v91;
  const void *v92;
  const __CFString *v93;
  CFStringRef v94;
  const __CFString *v95;
  const __CFString *v96;
  const void *v97;
  const void *v98;
  const __CFString *v99;
  const __CFString *v100;
  uint64_t v101;
  const __CFDictionary *v102;
  const __CFDictionary *v103;
  const __CFAllocator *v104;
  const __CFDictionary *v105;
  const __CFString *attrName;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *key;
  unsigned int v116;
  __CFArray *theArray;
  int v118;
  int v119;
  int v120;
  int v121;
  const __CFAttributedString *aStr;
  CMTime v123;
  _BYTE v124[32];
  uint64_t v125;
  uint64_t v126;
  double v127;
  __int128 v128;
  char v129;
  __int16 v130;
  char v131;
  uint64_t v132;
  int v133;
  void *value;
  CFTypeRef cf;
  CFDictionaryRef theDict;
  _OWORD v137[2];
  __int16 v138;
  char v139;
  __int128 v140;
  CMTime v141;
  CMTime v142;
  CMTime v143;
  CFRange effectiveRange;
  CMTimeEpoch epoch;
  CMTime v146;
  CMTime v147;
  CMTime v148;
  int valuePtr;
  __CFAttributedString *v150;
  CGRect v151;

  v140 = 0uLL;
  v138 = 0;
  v3 = (CGFloat *)MEMORY[0x1E0C9D628];
  v139 = 0;
  v4 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  v137[0] = *MEMORY[0x1E0C9D628];
  v137[1] = v4;
  theDict = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (!DerivedStorage || !a2 || (v6 = DerivedStorage, (v7 = *(CGContext **)(DerivedStorage + 72)) == 0))
  {
    CaptionGroupFromCFData = FigSignalErrorAt();
    goto LABEL_104;
  }
  v9 = *(double *)(v6 + 8);
  v8 = *(double *)(v6 + 16);
  v151.origin.x = 0.0;
  v151.origin.y = 0.0;
  v151.size.width = v9;
  v151.size.height = v8;
  CGContextClearRect(v7, v151);
  *(_BYTE *)(v6 + 128) = 1;
  value = 0;
  if (!CFDictionaryGetValueIfPresent(a2, CFSTR("SubtitleSerializedCaptionGroup"), (const void **)&value))
  {
    v72 = a2;
LABEL_86:
    v74 = (const __CFArray *)CFDictionaryGetValue(v72, CFSTR("SubtitleContent"));
    if (v74 && CFArrayGetCount(v74) >= 1)
    {
      if (*(_BYTE *)(v6 + 129))
      {
        v140 = *(_OWORD *)(v6 + 24);
        v75 = *(double *)(v6 + 64);
        v76 = *(double *)(v6 + 32);
        v77 = *(double *)(v6 + 56) / *(double *)(v6 + 24);
        v78 = *(_QWORD *)(v6 + 120);
        v79 = *(_OWORD *)(v6 + 40);
        v123.value = 0;
        *(_QWORD *)&v123.timescale = 0;
        *(double *)&v123.epoch = v9;
        *(double *)v124 = v8;
        *(_OWORD *)&v124[8] = v140;
        *(double *)&v124[24] = v77;
        v125 = 0;
        v126 = 0;
        v127 = v75 / v76;
        v128 = v79;
        v129 = 0;
        v130 = v138;
        v131 = v139;
        v132 = 0x3FF0000000000000;
        v133 = 0;
        FigSubtitleRendererLayout(v78, (uint64_t)a2, &v123, (uint64_t)v137, (uint64_t)&theDict);
        v80 = *(_QWORD *)(v6 + 120);
        if (theDict)
          v81 = theDict;
        else
          v81 = a2;
        v123.value = *(_QWORD *)(v6 + 72);
        v82 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
        *(_OWORD *)&v123.timescale = *MEMORY[0x1E0C9BAA8];
        *(_OWORD *)v124 = v82;
        *(_OWORD *)&v124[16] = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
        CaptionGroupFromCFData = FigSubtitleRendererDrawSubtitleText(v80, (uint64_t)v81, (uint64_t)&v123);
        if ((_DWORD)CaptionGroupFromCFData)
          goto LABEL_104;
      }
      else
      {
        v83 = *v3;
        v84 = v3[1];
        v85 = v3[2];
        v86 = v3[3];
        FigCaptionRendererSessionClear(*(NSObject **)(v6 + 136), *v3, v84, v85, v86);
        FigCaptionRendererSessionSetLayoutContext_Viewport(*(_QWORD *)(v6 + 136), 0.0, 0.0, v9, v8);
        FigCaptionRendererSessionSetLayoutContext_VideoSize(*(NSObject **)(v6 + 136), *(double *)(v6 + 24), *(double *)(v6 + 32));
        FigCaptionRendererSessionSetLayoutContext_Gravity(*(NSObject **)(v6 + 136), 0);
        FigCaptionRendererSessionSetLayoutContext_Overscan(*(NSObject **)(v6 + 136), 0);
        v123.value = 0;
        FigSubtitleSampleCreatePropertyList(a2, 1, 1, (CFDictionaryRef *)&v123, v83, v84, v85, v86);
        FigCaptionRendererSessionSetCaptionSample(*(NSObject **)(v6 + 136), v123.value, 0);
        FigCaptionRendererSessionUpdateCGContext(*(_QWORD *)(v6 + 136), *(_QWORD *)(v6 + 72));
        if (v123.value)
          CFRelease((CFTypeRef)v123.value);
      }
      v73 = 0;
      *(_BYTE *)(v6 + 112) = 1;
      goto LABEL_98;
    }
LABEL_94:
    v73 = 0;
    *(_BYTE *)(v6 + 112) = 0;
    goto LABEL_98;
  }
  CaptionGroupFromCFData = FigCaptionSerializerCreateCaptionGroupFromCFData();
  if ((_DWORD)CaptionGroupFromCFData)
  {
LABEL_104:
    v73 = CaptionGroupFromCFData;
    goto LABEL_98;
  }
  if (!cf)
    goto LABEL_94;
  v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a2);
  theDict = MutableCopy;
  v13 = cf;
  v150 = 0;
  theArray = CFArrayCreateMutable(v11, 0, MEMORY[0x1E0C9B378]);
  if (!theArray)
  {
    v73 = 4294954510;
    goto LABEL_98;
  }
  valuePtr = 0;
  v14 = (const __CFNumber *)CFDictionaryGetValue(MutableCopy, CFSTR("SubtitleFormat"));
  CFNumberGetValue(v14, kCFNumberSInt32Type, &valuePtr);
  if (!v13)
  {
    v22 = 0;
    Mutable = 0;
    v73 = 0;
    goto LABEL_78;
  }
  memset(&v123, 0, sizeof(v123));
  CMTimeMake(&v123, 0, 0);
  memset(&v148, 0, sizeof(v148));
  CMTimeMake(&v148, 0, 0);
  v15 = (const __CFArray *)CFDictionaryGetValue(MutableCopy, CFSTR("SubtitleTimeRange"));
  if (v15)
  {
    v16 = v15;
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v15, 0);
    v18 = (const __CFDictionary *)CFArrayGetValueAtIndex(v16, 1);
    memset(&v147, 0, sizeof(v147));
    CMTimeMakeFromDictionary(&v147, ValueAtIndex);
    memset(&v146, 0, sizeof(v146));
    CMTimeMakeFromDictionary(&v146, v18);
    v123 = v147;
    v148 = v146;
  }
  SliceCount = FigCaptionGroupGetSliceCount();
  Mutable = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v21 = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v21)
    {
      v22 = v21;
      v90 = a2;
      if (SliceCount >= 1)
      {
        v23 = 0;
        v116 = 0;
        key = (void *)*MEMORY[0x1E0CA2C38];
        v114 = (void *)*MEMORY[0x1E0CA3468];
        v113 = (void *)*MEMORY[0x1E0CA2C98];
        v112 = (void *)*MEMORY[0x1E0CA29A8];
        v111 = (void *)*MEMORY[0x1E0CA2990];
        v110 = (void *)*MEMORY[0x1E0CA2998];
        v109 = (void *)*MEMORY[0x1E0CA29A0];
        v108 = (void *)*MEMORY[0x1E0CA2980];
        v107 = (void *)*MEMORY[0x1E0CA2988];
        attrName = (const __CFString *)*MEMORY[0x1E0CA2B40];
        v100 = (const __CFString *)*MEMORY[0x1E0CA2B48];
        v99 = (const __CFString *)*MEMORY[0x1E0CA2B20];
        v96 = (const __CFString *)*MEMORY[0x1E0CA29E0];
        v89 = (CFTypeRef)*MEMORY[0x1E0CA2BA0];
        v92 = (const void *)*MEMORY[0x1E0CA2BA8];
        v98 = (const void *)*MEMORY[0x1E0CA2BB0];
        v94 = (CFStringRef)*MEMORY[0x1E0CA2A80];
        v93 = (const __CFString *)*MEMORY[0x1E0CA2A88];
        v95 = (const __CFString *)*MEMORY[0x1E0CA29D8];
        v88 = (CFTypeRef)*MEMORY[0x1E0CA2B88];
        v91 = (const void *)*MEMORY[0x1E0CA2B90];
        v97 = (const void *)*MEMORY[0x1E0CA2B98];
        v104 = v11;
        v105 = MutableCopy;
        v102 = v21;
        v103 = Mutable;
        v101 = SliceCount;
        while (1)
        {
          CaptionData = FigCaptionGroupGetCaptionData();
          if (CaptionData)
            break;
LABEL_72:
          if (SliceCount == ++v23)
            goto LABEL_77;
        }
        v25 = CaptionData;
        if (v150)
        {
          CFRelease(v150);
          v150 = 0;
        }
        memset(&v147, 0, sizeof(v147));
        FigCaptionGroupGetDurationBeforeSlice();
        memset(&v146, 0, sizeof(v146));
        FigCaptionGroupGetDurationAfterSlice();
        effectiveRange = *(CFRange *)&v123.value;
        epoch = v123.epoch;
        v143 = v148;
        v142 = v147;
        v141 = v146;
        v116 = FigCaptionDataToMarkupBasedAttributedString(v11, v25, (uint64_t)&effectiveRange, &v143, &v142, (uint64_t)&v141, &v150, Mutable, v22);
        if (valuePtr != 1937142900 && valuePtr != 2021028980 && valuePtr != 2004251764
          || (aStr = v150, (v26 = (const __CFDictionary *)CFDictionaryGetValue(Mutable, key)) == 0)
          || (v27 = (const __CFDictionary *)CFDictionaryGetValue(v26, v114)) == 0
          || (v28 = (const __CFDictionary *)CFDictionaryGetValue(v27, v113)) == 0)
        {
LABEL_71:
          CFArrayAppendValue(theArray, v150);
          goto LABEL_72;
        }
        v29 = v28;
        v30 = v13;
        v31 = CFDictionaryGetValue(v28, v112);
        v32 = CFDictionaryGetValue(v29, v111);
        v33 = CFDictionaryGetValue(v29, v110);
        v34 = CFDictionaryGetValue(v29, v109);
        v35 = CFDictionaryGetValue(v29, v108);
        v36 = CFDictionaryGetValue(v29, v107);
        FigGeometryDimensionMake();
        v38 = v37;
        FigGeometryDimensionMake();
        v118 = v39;
        *(double *)&v40 = COERCE_DOUBLE(FigGeometryDimensionMake());
        v119 = v41;
        v42 = *(double *)&v40;
        FigGeometryDimensionMake();
        v120 = v43;
        *(double *)&v44 = COERCE_DOUBLE(FigGeometryDimensionMake());
        v121 = v45;
        v46 = *(double *)&v44;
        effectiveRange.length = 0;
        effectiveRange.location = 0;
        if (CFAttributedStringGetAttribute(aStr, 0, attrName, &effectiveRange))
        {
          if (v32)
          {
            FigTextMarkupDimensionMakeFromSimplifiedDictionary();
            v38 = v47;
          }
          v13 = v30;
          if (v33)
          {
            FigTextMarkupDimensionMakeFromSimplifiedDictionary();
            v120 = v48;
          }
          v22 = v102;
          Mutable = v103;
          if (v34)
          {
            FigTextMarkupDimensionMakeFromSimplifiedDictionary();
            v118 = v49;
          }
          SliceCount = v101;
          if (v35)
          {
            *(double *)&v50 = COERCE_DOUBLE(FigTextMarkupDimensionMakeFromSimplifiedDictionary());
            v121 = v51;
            v46 = *(double *)&v50;
          }
          v11 = v104;
          if (v36)
          {
            *(double *)&v52 = COERCE_DOUBLE(FigTextMarkupDimensionMakeFromSimplifiedDictionary());
            v119 = v53;
            v42 = *(double *)&v52;
          }
          MutableCopy = v105;
          if (FigCFEqual())
          {
            FigGeometryDimensionMakeMirrored();
            v120 = v54;
            *(double *)&v55 = COERCE_DOUBLE(FigGeometryDimensionMakeMirrored());
            v121 = v56;
            v46 = *(double *)&v55;
          }
        }
        else
        {
          if (v31)
          {
            FigTextMarkupDimensionMakeFromSimplifiedDictionary();
            v38 = v57;
          }
          Mutable = v103;
          if (v33)
          {
            FigTextMarkupDimensionMakeFromSimplifiedDictionary();
            v118 = v58;
          }
          v13 = v30;
          if (v34)
          {
            FigTextMarkupDimensionMakeFromSimplifiedDictionary();
            v120 = v59;
          }
          SliceCount = v101;
          v22 = v102;
          if (v35)
          {
            *(double *)&v60 = COERCE_DOUBLE(FigTextMarkupDimensionMakeFromSimplifiedDictionary());
            v119 = v61;
            v42 = *(double *)&v60;
          }
          v11 = v104;
          if (v36)
          {
            *(double *)&v62 = COERCE_DOUBLE(FigTextMarkupDimensionMakeFromSimplifiedDictionary());
            v121 = v63;
            v46 = *(double *)&v62;
          }
          MutableCopy = v105;
        }
        if (v38 == 622862368)
        {
          Float32 = (const void *)FigCFNumberCreateFloat32();
          CFAttributedStringSetAttribute(aStr, effectiveRange, v100, Float32);
          if (Float32)
            CFRelease(Float32);
        }
        if (v118 == 622862368)
        {
          v65 = (const void *)FigCFNumberCreateFloat32();
          CFAttributedStringSetAttribute(aStr, effectiveRange, v99, v65);
          if (v65)
            CFRelease(v65);
        }
        if (v119 == 622862368)
        {
          v66 = v98;
          if (v42 == 0.0 || (v66 = v92, v42 == 50.0) || (v66 = v89, v42 == 100.0))
            CFAttributedStringSetAttribute(aStr, effectiveRange, v96, v66);
        }
        if (v120 == 1818848869)
        {
          v67 = (const void *)FigCFNumberCreateFloat32();
          v68 = effectiveRange;
          v69 = aStr;
          v70 = v94;
        }
        else
        {
          if (v120 != 622862368)
          {
LABEL_66:
            if (v121 == 622862368)
            {
              v71 = v97;
              if (v46 == 0.0 || (v71 = v91, v46 == 50.0) || (v71 = v88, v46 == 100.0))
                CFAttributedStringSetAttribute(aStr, effectiveRange, v95, v71);
            }
            goto LABEL_71;
          }
          v67 = (const void *)FigCFNumberCreateFloat32();
          v68 = effectiveRange;
          v69 = aStr;
          v70 = v93;
        }
        CFAttributedStringSetAttribute(v69, v68, v70, v67);
        if (v67)
          CFRelease(v67);
        goto LABEL_66;
      }
      v116 = 0;
LABEL_77:
      a2 = v90;
      v3 = (CGFloat *)MEMORY[0x1E0C9D628];
      v73 = v116;
LABEL_78:
      CFDictionarySetValue(MutableCopy, CFSTR("SubtitleContent"), theArray);
      if (!Mutable)
        goto LABEL_80;
      goto LABEL_79;
    }
  }
  v22 = 0;
  v73 = 4294954510;
  v3 = (CGFloat *)MEMORY[0x1E0C9D628];
  if (Mutable)
LABEL_79:
    CFRelease(Mutable);
LABEL_80:
  if (v22)
    CFRelease(v22);
  if (v150)
    CFRelease(v150);
  CFRelease(theArray);
  if (!(_DWORD)v73)
  {
    v72 = theDict;
    goto LABEL_86;
  }
LABEL_98:
  if (theDict)
    CFRelease(theDict);
  if (cf)
    CFRelease(cf);
  return v73;
}

void subtitleRasterizerFinalize()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  const void *v2;
  const void *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 129))
  {
    v2 = *(const void **)(DerivedStorage + 120);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v2 = *(const void **)(CMBaseObjectGetDerivedStorage() + 136);
  if (v2)
LABEL_3:
    CFRelease(v2);
LABEL_4:
  CGContextRelease(*(CGContextRef *)(v1 + 72));
  if (*(_QWORD *)v1)
    CFRelease(*(CFTypeRef *)v1);
  v3 = *(const void **)(v1 + 144);
  if (v3)
    CFRelease(v3);
}

__CFString *subtitleRasterizerCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigSubtitleTextRasterizer %p>"), a1);
  return Mutable;
}

uint64_t subtitleRasterizerSetRenderSize(double a1, double a2)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v8;
  const void *v9;
  double v10;
  CGColorSpace *v12;
  CGContextRef v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  if (a1 < 1.0 || a2 < 1.0)
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  if (*(double *)(DerivedStorage + 8) != a1 || *(double *)(DerivedStorage + 16) != a2)
  {
    *(double *)(DerivedStorage + 8) = a1;
    *(double *)(DerivedStorage + 16) = a2;
    v8 = CMBaseObjectGetDerivedStorage();
    v9 = *(const void **)(v8 + 72);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(v8 + 72) = 0;
    }
    v10 = *(double *)(v8 + 8);
    if (v10 == *MEMORY[0x1E0C9D820] && *(double *)(v8 + 16) == *(double *)(MEMORY[0x1E0C9D820] + 8))
    {
      v12 = 0;
    }
    else
    {
      v12 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
      if (v12
        && (v13 = CGBitmapContextCreate(0, (unint64_t)*(double *)(v8 + 8), (unint64_t)*(double *)(v8 + 16), 8uLL, vcvtd_n_u64_f64(v10, 2uLL), v12, 0x2002u), (*(_QWORD *)(v8 + 72) = v13) != 0))
      {
        *(_QWORD *)(v8 + 80) = 0;
        *(_QWORD *)(v8 + 88) = 0;
        *(_OWORD *)(v8 + 96) = *(_OWORD *)(v8 + 8);
        *(_BYTE *)(v8 + 112) = 0;
      }
      else
      {
        FigSignalErrorAt();
      }
    }
    CGColorSpaceRelease(v12);
    *(_BYTE *)(v6 + 128) = 1;
  }
  return 0;
}

uint64_t subtitleRasterizerSetVideoSizeAndDisplayRect(double a1, double a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  uint64_t DerivedStorage;
  double *v14;
  uint64_t result;
  CGRect v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  if (a1 < 1.0 || a2 < 1.0)
    return FigSignalErrorAt();
  v14 = (double *)DerivedStorage;
  v16.origin.x = a3;
  v16.origin.y = a4;
  v16.size.width = a5;
  v16.size.height = a6;
  result = CGRectIsEmpty(v16);
  if ((_DWORD)result)
    return FigSignalErrorAt();
  v14[3] = a1;
  v14[4] = a2;
  v14[5] = a3;
  v14[6] = a4;
  v14[7] = a5;
  v14[8] = a6;
  return result;
}

uint64_t subtitleRasterizerSetFontName(uint64_t a1, const void *a2)
{
  const void **DerivedStorage;
  const void *v4;

  DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || !a2)
    return FigSignalErrorAt();
  v4 = *DerivedStorage;
  *DerivedStorage = a2;
  CFRetain(a2);
  if (v4)
    CFRelease(v4);
  return 0;
}

uint64_t subtitleRasterizerReset()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  CGRect v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v1 = DerivedStorage;
  v3.origin.x = *(CGFloat *)MEMORY[0x1E0C9D538];
  v3.origin.y = *(CGFloat *)(MEMORY[0x1E0C9D538] + 8);
  v3.size.width = *(CGFloat *)(DerivedStorage + 8);
  v3.size.height = *(CGFloat *)(DerivedStorage + 16);
  CGContextClearRect(*(CGContextRef *)(DerivedStorage + 72), v3);
  *(_BYTE *)(v1 + 112) = 0;
  *(_BYTE *)(v1 + 128) = 1;
  return 0;
}

uint64_t subtitleRasterizerImageHasChangedSinceLastCopy(uint64_t a1, _BYTE *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
    *a2 = *(_BYTE *)(DerivedStorage + 128);
  return 0;
}

uint64_t subtitleRasterizerCopyImageBuffer(uint64_t a1, uint64_t a2, CVPixelBufferRef *a3, _OWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  CGContext *v9;
  uint64_t result;
  _OWORD *v11;
  __int128 v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  if (!a3)
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  v9 = *(CGContext **)(DerivedStorage + 72);
  if (!v9)
    return FigSignalErrorAt();
  result = FigTextRasterizerCreatePixelBufferFromBitmapContext(v9, 0x42475241u, a2, a3);
  if (!(_DWORD)result)
  {
    if (a4)
    {
      if (*(_BYTE *)(v8 + 112))
        v11 = (_OWORD *)(v8 + 80);
      else
        v11 = (_OWORD *)MEMORY[0x1E0C9D628];
      v12 = v11[1];
      *a4 = *v11;
      a4[1] = v12;
    }
    result = 0;
    *(_BYTE *)(v8 + 128) = 0;
  }
  return result;
}

uint64_t EMSGParseEventMessageAtomAndCreateEMSGInformation(uint64_t a1, uint64_t a2)
{
  uint64_t CurrentAtomTypeAndDataLength;
  uint64_t v5;
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef cf;
  uint64_t v9;
  size_t lengthAtOffsetOut;
  char *dataPointerOut;
  CMBlockBufferRef theBuffer;
  int v13;
  char v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v17 = 0u;
  v16 = 0;
  v15 = 0;
  v14 = 0;
  v13 = 0;
  dataPointerOut = 0;
  theBuffer = 0;
  v9 = 0;
  lengthAtOffsetOut = 0;
  v7 = 0;
  cf = 0;
  v5 = 0;
  v6 = 0;
  if (!a1 || !a2)
    return FigSignalErrorAt();
  CurrentAtomTypeAndDataLength = FigAtomStreamInitWithBBuf();
  if ((_DWORD)CurrentAtomTypeAndDataLength)
    return CurrentAtomTypeAndDataLength;
  CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if ((_DWORD)CurrentAtomTypeAndDataLength)
    return CurrentAtomTypeAndDataLength;
  CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomVersionAndFlags();
  if ((_DWORD)CurrentAtomTypeAndDataLength)
    return CurrentAtomTypeAndDataLength;
  if (v14 == 1)
    return FigSignalErrorAt();
  return 4294949423;
}

uint64_t createCFStringWithNullTerminatedCStringAndAdvanceBuffer(const char **a1, size_t *a2, CFStringRef *a3, _QWORD *a4)
{
  uint64_t result;
  const char *v9;
  size_t v10;
  unint64_t v11;
  CFStringRef v12;
  CFStringRef v13;

  if (!a3)
    return 4294949425;
  *a3 = 0;
  if (!a4)
    return 4294949425;
  *a4 = 0;
  if (!a1)
    return 4294949425;
  result = 4294949425;
  if (a2)
  {
    v9 = *a1;
    if (*a1)
    {
      v10 = *a2;
      if (*a2)
      {
        v11 = strnlen(*a1, *a2);
        if (v11 >= v10)
        {
          return 4294949424;
        }
        else
        {
          v12 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)v9, v11, 0x8000100u, 1u);
          if (v12)
          {
            v13 = v12;
            result = 0;
            *a3 = v13;
            *a4 = v11 + 1;
            *a1 = &v9[v11 + 1];
            *a2 = v10 - (v11 + 1);
          }
          else
          {
            return 4294949426;
          }
        }
      }
    }
  }
  return result;
}

uint64_t EMSGInformationCreate(uint64_t a1, uint64_t *a2)
{
  uint64_t Instance;

  if (sRegisterEMSGInformationTypeOnce != -1)
    dispatch_once_f(&sRegisterEMSGInformationTypeOnce, 0, (dispatch_function_t)RegisterEMSGInformationType);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  *a2 = Instance;
  return 0;
}

uint64_t RegisterEMSGInformationType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sEMSGInformationID = result;
  return result;
}

void emsgInformationFinalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)a1[5];
  if (v2)
  {
    CFRelease(v2);
    a1[5] = 0;
  }
  v3 = (const void *)a1[6];
  if (v3)
  {
    CFRelease(v3);
    a1[6] = 0;
  }
  v4 = (const void *)a1[7];
  if (v4)
  {
    CFRelease(v4);
    a1[7] = 0;
  }
}

__CFString *emsgInformationCopyDebugDesc(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;

  v2 = CFGetAllocator((CFTypeRef)a1);
  Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<EMSGInformationRef %p> timescale: %d presentationTime: %lld eventDuration: %lld identifier: %d schemeIDURI: %@ value: %@"), a1, *(unsigned int *)(a1 + 16), *(_QWORD *)(a1 + 20), *(_QWORD *)(a1 + 28), *(unsigned int *)(a1 + 36), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  return Mutable;
}

uint64_t FigTextRasterizerGetClassID()
{
  MEMORY[0x19402F294](&FigTextRasterizerGetClassID_sRegisterFigTextRasterizerOnce, RegisterFigTextRasterizerClass);
  return sFigTextRasterizerClassID;
}

uint64_t RegisterFigTextRasterizerClass()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigTextRasterizerGetTypeID()
{
  MEMORY[0x19402F294](&FigTextRasterizerGetClassID_sRegisterFigTextRasterizerOnce, RegisterFigTextRasterizerClass);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigTextRasterizerCreatePixelBufferFromBitmapContext(CGContext *a1, OSType a2, uint64_t a3, CVPixelBufferRef *a4)
{
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  const __CFAllocator *v10;
  void *Data;
  uint64_t result;

  if (!a1)
    return FigSignalErrorAt();
  Width = CGBitmapContextGetWidth(a1);
  Height = CGBitmapContextGetHeight(a1);
  BytesPerRow = CGBitmapContextGetBytesPerRow(a1);
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Data = CGBitmapContextGetData(a1);
  result = CVPixelBufferCreateWithBytes(v10, Width, Height, a2, Data, BytesPerRow, 0, 0, 0, a4);
  if ((_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

CFStringRef FigTextRasterizerCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigTextRasterizer %p]"), a1);
}

uint64_t FigOctaviaVideoRenderPipelineCreate(uint64_t a1, uint64_t a2, const void *a3, _QWORD *a4)
{
  uint64_t BBufFromPointer;
  uint64_t DerivedStorage;
  uint64_t v8;
  dispatch_queue_t v9;
  size_t DataLength;
  OpaqueCMMemoryPool *v11;
  CFAllocatorRef Allocator;

  if (!a4 || !a3)
    return FigSignalErrorAt();
  FigRenderPipelineGetClassID();
  BBufFromPointer = CMDerivedObjectCreate();
  if (!(_DWORD)BBufFromPointer)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_DWORD *)(DerivedStorage + 4) = 1986618469;
    v8 = FigDispatchQueueCreateWithPriority();
    *(_QWORD *)(DerivedStorage + 16) = v8;
    if (!v8)
      return 4294954443;
    *(_QWORD *)(DerivedStorage + 176) = CFRetain(a3);
    BBufFromPointer = NeroTransportRegisterObject();
    if ((_DWORD)BBufFromPointer)
      return BBufFromPointer;
    v9 = dispatch_queue_create("octavia.videoRP.notifications", 0);
    *(_QWORD *)(DerivedStorage + 24) = v9;
    if (!v9)
      return 4294954443;
    BBufFromPointer = FigTransportCreateBBufFromPointer();
    if ((_DWORD)BBufFromPointer)
      return BBufFromPointer;
    FigCFDictionaryGetBooleanIfPresent();
    BBufFromPointer = FigRemote_CreateSerializedAtomDataBlockBufferForCFType();
    if ((_DWORD)BBufFromPointer)
      return BBufFromPointer;
    DataLength = CMBlockBufferGetDataLength(0);
    BBufFromPointer = CMBlockBufferAppendBufferReference(0, 0, 0, DataLength, 0);
    if ((_DWORD)BBufFromPointer)
      return BBufFromPointer;
    FigTransportGetRemoteRootObject();
    BBufFromPointer = NeroTransportSendSyncMessageCreatingReply();
    if ((_DWORD)BBufFromPointer)
      return BBufFromPointer;
    *(_DWORD *)(DerivedStorage + 64) = 8;
    *(_QWORD *)(DerivedStorage + 96) = 0;
    v11 = CMMemoryPoolCreate(0);
    *(_QWORD *)(DerivedStorage + 136) = v11;
    if (!v11)
      return 4294954443;
    Allocator = CMMemoryPoolGetAllocator(v11);
    *(_QWORD *)(DerivedStorage + 144) = Allocator;
    if (Allocator)
      CFRetain(Allocator);
    BBufFromPointer = CMBlockBufferCopyDataBytes(0, 0, 8uLL, (void *)(DerivedStorage + 8));
    if (!(_DWORD)BBufFromPointer)
    {
      BBufFromPointer = octrp_createSourceQueueAndInstallTriggers(0);
      if (!(_DWORD)BBufFromPointer)
      {
        CMNotificationCenterGetDefaultLocalCenter();
        BBufFromPointer = CMNotificationCenterAddListener();
        if (!(_DWORD)BBufFromPointer)
        {
          CMNotificationCenterGetDefaultLocalCenter();
          BBufFromPointer = CMNotificationCenterAddListener();
          if (!(_DWORD)BBufFromPointer)
          {
            octaviapipelineRegisterPowerLogEvent(0, 0);
            *(_BYTE *)(DerivedStorage + 184) = FigGetCFPreferenceNumberWithDefault() != 0;
            *a4 = 0;
          }
        }
      }
    }
  }
  return BBufFromPointer;
}

uint64_t octrp_createSourceQueueAndInstallTriggers(void *a1)
{
  CMBufferQueueRef *DerivedStorage;
  const __CFAllocator *v3;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  uint64_t result;
  opaqueCMBufferQueue *v6;
  CMTimeEpoch v7;
  opaqueCMBufferQueue *v8;
  __int128 v9;
  CMTime time;

  DerivedStorage = (CMBufferQueueRef *)CMBaseObjectGetDerivedStorage();
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
  result = CMBufferQueueCreate(v3, 0, CallbacksForUnsortedSampleBuffers, DerivedStorage + 4);
  if (!(_DWORD)result)
  {
    v6 = DerivedStorage[4];
    v9 = *MEMORY[0x1E0CA2E18];
    *(_OWORD *)&time.value = *MEMORY[0x1E0CA2E18];
    v7 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    time.epoch = v7;
    result = CMBufferQueueInstallTrigger(v6, (CMBufferQueueTriggerCallback)octrp_sourceQueueDataBecameReady, a1, 7, &time, DerivedStorage + 5);
    if (!(_DWORD)result)
    {
      result = CMBufferQueueInstallTriggerWithIntegerThreshold(DerivedStorage[4], (CMBufferQueueTriggerCallback)octrp_sourceQueueBuffersBecameAvailable, a1, 11, 0, DerivedStorage + 6);
      if (!(_DWORD)result)
      {
        v8 = DerivedStorage[4];
        *(_OWORD *)&time.value = v9;
        time.epoch = v7;
        return CMBufferQueueInstallTrigger(v8, (CMBufferQueueTriggerCallback)octrp_sourceQueueWasReset, a1, 9, &time, DerivedStorage + 7);
      }
    }
  }
  return result;
}

void octrp_inhibitOutputUntil(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage;
  const void *Value;
  const void *v8;
  NSObject *v9;
  _QWORD block[6];
  CFTypeRef v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = 0;
  if (!a5)
    goto LABEL_5;
  Value = CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E0CA2748]);
  if (Value)
  {
    v8 = Value;
    CFRetain(Value);
    v9 = *(NSObject **)(DerivedStorage + 16);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __octrp_inhibitOutputUntil_block_invoke;
    block[3] = &__block_descriptor_tmp_18_6;
    block[4] = DerivedStorage;
    block[5] = v8;
    dispatch_sync(v9, block);
  }
  if (!FigRemote_CreateSerializedAtomDataBlockBufferForCFType())
LABEL_5:
    NeroTransportSendAsyncMessage();
  if (v11)
    CFRelease(v11);
}

uint64_t octrp_resetOutputQueue()
{
  CMBaseObjectGetDerivedStorage();
  return NeroTransportSendAsyncMessage();
}

void octaviapipelineRegisterPowerLogEvent(uint64_t a1, int a2)
{
  __CFDictionary *Mutable;
  uint64_t DerivedStorage;
  const __CFString *v5;
  OpaqueCMTimebase *v6;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  switch(a2)
  {
    case 0:
      v5 = CFSTR("created");
      goto LABEL_11;
    case 2:
      v6 = *(OpaqueCMTimebase **)(DerivedStorage + 120);
      if (v6)
      {
        if (CMTimebaseGetRate(v6) == 0.0)
          v5 = CFSTR("paused");
        else
          v5 = CFSTR("playing");
        FigCFDictionarySetFloat32();
        goto LABEL_11;
      }
      break;
    case 1:
      v5 = CFSTR("finalized");
LABEL_11:
      CFDictionarySetValue(Mutable, CFSTR("State"), v5);
      break;
  }
  FigPowerLogRegisterEvent();
  CFRelease(Mutable);
}

uint64_t FigOctaviaVideoRenderPipelineCreateWithFigImageQueueArray(const __CFAllocator *a1, const __CFDictionary *a2, CFArrayRef theArray, const __CFArray *a4, int a5, const void *a6, const void *a7, int a8, const void *a9, CFTypeRef *a10)
{
  uint64_t v18;
  uint64_t DerivedStorage;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t FigBaseObject;
  uint64_t (*v26)(uint64_t, const __CFString *, const __CFAllocator *, uint64_t);
  CFTypeRef cf;

  cf = 0;
  if (a10)
  {
    if (theArray && CFArrayGetCount(theArray) >= 1 && a9)
    {
      v18 = FigOctaviaVideoRenderPipelineCreate((uint64_t)a1, (uint64_t)a2, a9, &cf);
      if (!(_DWORD)v18)
      {
        DerivedStorage = CMBaseObjectGetDerivedStorage();
        v20 = a8;
        v21 = DerivedStorage;
        v22 = (_QWORD *)(DerivedStorage + 152);
        v18 = FigVideoRenderPipelineCreateWithFigImageQueueArray(a1, a5, a6, a7, v20, theArray, a4, a2, (_QWORD *)(DerivedStorage + 152));
        if (!(_DWORD)v18)
        {
          v24 = v21;
          FigBaseObject = FigRenderPipelineGetFigBaseObject(*v22);
          v26 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
          if (v26)
          {
            v18 = v26(FigBaseObject, CFSTR("SourceSampleBufferQueue"), a1, v24 + 160);
            if (!(_DWORD)v18)
            {
              *a10 = cf;
              return v18;
            }
          }
          else
          {
            v18 = 4294954514;
          }
        }
      }
    }
    else
    {
      v18 = FigSignalErrorAt();
    }
    if (cf)
      CFRelease(cf);
    return v18;
  }
  return FigSignalErrorAt();
}

uint64_t octrp_Invalidate(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  const void *v6;
  uint64_t v7;
  uint64_t FigBaseObject;
  void (*v9)(uint64_t, const __CFString *, _QWORD);
  uint64_t v10;
  _QWORD *v11;
  void (*v12)(uint64_t);
  const void *v13;
  opaqueCMBufferQueueTriggerToken *v14;
  opaqueCMBufferQueueTriggerToken *v15;
  opaqueCMBufferQueueTriggerToken *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  NSObject *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  _QWORD v27[6];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
  {
    v3 = DerivedStorage;
    *(_BYTE *)DerivedStorage = 1;
    v4 = *(NSObject **)(DerivedStorage + 16);
    v27[0] = MEMORY[0x1E0C809B0];
    v27[1] = 0x40000000;
    v27[2] = __octrp_Invalidate_block_invoke;
    v27[3] = &__block_descriptor_tmp_7_8;
    v27[4] = v3;
    v27[5] = a1;
    dispatch_sync(v4, v27);
    v5 = *(NSObject **)(v3 + 24);
    if (v5)
    {
      dispatch_sync(v5, &__block_literal_global_107);
      dispatch_release(*(dispatch_object_t *)(v3 + 24));
    }
    v6 = *(const void **)(v3 + 160);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(v3 + 160) = 0;
    }
    v7 = *(_QWORD *)(v3 + 152);
    if (v7)
    {
      FigBaseObject = FigRenderPipelineGetFigBaseObject(v7);
      v9 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v9)
        v9(FigBaseObject, CFSTR("Timebase"), 0);
      v10 = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(v3 + 152));
      v11 = *(_QWORD **)(CMBaseObjectGetVTable() + 8);
      if (*v11 >= 2uLL)
      {
        v12 = (void (*)(uint64_t))v11[8];
        if (v12)
          v12(v10);
      }
      v13 = *(const void **)(v3 + 152);
      if (v13)
      {
        CFRelease(v13);
        *(_QWORD *)(v3 + 152) = 0;
      }
    }
    if (*(_QWORD *)(v3 + 8))
      NeroTransportSendAsyncMessage();
    v14 = *(opaqueCMBufferQueueTriggerToken **)(v3 + 40);
    if (v14)
      CMBufferQueueRemoveTrigger(*(CMBufferQueueRef *)(v3 + 32), v14);
    v15 = *(opaqueCMBufferQueueTriggerToken **)(v3 + 48);
    if (v15)
      CMBufferQueueRemoveTrigger(*(CMBufferQueueRef *)(v3 + 32), v15);
    v16 = *(opaqueCMBufferQueueTriggerToken **)(v3 + 56);
    if (v16)
      CMBufferQueueRemoveTrigger(*(CMBufferQueueRef *)(v3 + 32), v16);
    if (*(_QWORD *)(v3 + 32))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      v17 = *(const void **)(v3 + 32);
      if (v17)
      {
        CFRelease(v17);
        *(_QWORD *)(v3 + 32) = 0;
      }
    }
    v18 = *(const void **)(v3 + 80);
    if (v18)
    {
      CFRelease(v18);
      *(_QWORD *)(v3 + 80) = 0;
    }
    v19 = *(const void **)(v3 + 88);
    if (v19)
    {
      CFRelease(v19);
      *(_QWORD *)(v3 + 88) = 0;
    }
    v20 = *(const void **)(v3 + 104);
    if (v20)
    {
      CFRelease(v20);
      *(_QWORD *)(v3 + 104) = 0;
    }
    v21 = *(const void **)(v3 + 128);
    if (v21)
    {
      FigSyncMomentSourceDestroy(v21);
      *(_QWORD *)(v3 + 128) = 0;
    }
    octrp_setTimebase(a1, 0, 0);
    v22 = *(NSObject **)(v3 + 16);
    if (v22)
    {
      dispatch_release(v22);
      *(_QWORD *)(v3 + 16) = 0;
    }
    v23 = *(const void **)(v3 + 144);
    if (v23)
    {
      CFRelease(v23);
      *(_QWORD *)(v3 + 144) = 0;
    }
    v24 = *(const void **)(v3 + 136);
    if (v24)
    {
      CFRelease(v24);
      *(_QWORD *)(v3 + 136) = 0;
    }
    v25 = *(const void **)(v3 + 176);
    if (v25)
    {
      CFRelease(v25);
      *(_QWORD *)(v3 + 176) = 0;
    }
  }
  return 0;
}

void octrp_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  octrp_Invalidate(a1);
  v3 = *(const void **)(DerivedStorage + 72);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 72) = 0;
  }
  octaviapipelineRegisterPowerLogEvent(a1, 1);
}

__CFString *octvrp_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigOctaviaVideoRenderPipeline %p>"), a1);
  return Mutable;
}

uint64_t octvrp_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, _QWORD *a4)
{
  _BYTE *DerivedStorage;
  _BYTE *v8;
  const void *v9;
  void *v10;
  void *v11;
  uint64_t result;
  const void **v13;
  CMTime v14;
  CMTime v15;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
    return 4294954444;
  v8 = DerivedStorage;
  if (CFEqual(a2, CFSTR("SourceSampleBufferQueue")))
  {
    v9 = (const void *)*((_QWORD *)v8 + 4);
    if (!v9)
      goto LABEL_12;
  }
  else if (CFEqual(a2, CFSTR("Timebase")))
  {
    v9 = (const void *)*((_QWORD *)v8 + 15);
    if (!v9)
    {
LABEL_12:
      v11 = 0;
      goto LABEL_13;
    }
  }
  else if (CFEqual(a2, CFSTR("PreferredClock")))
  {
    result = octrp_ensurePreferredClock();
    if ((_DWORD)result)
      return result;
    v9 = (const void *)*((_QWORD *)v8 + 13);
    if (!v9)
      goto LABEL_12;
  }
  else
  {
    if (CFEqual(a2, CFSTR("EndPresentationTimeForQueuedSamples")))
    {
      memset(&v15, 0, sizeof(v15));
      CMBufferQueueGetEndPresentationTimeStamp(&v15, *((CMBufferQueueRef *)v8 + 4));
      v14 = v15;
      v10 = CMTimeCopyAsDictionary(&v14, a3);
      goto LABEL_8;
    }
    if (CFEqual(a2, CFSTR("CurrentVideoFrameRate"))
      || CFEqual(a2, CFSTR("VideoEnqueueResetsSystemSleepTimer"))
      || CFEqual(a2, CFSTR("ObeyEmptyMediaMarkers"))
      || CFEqual(a2, CFSTR("RenderEmptyMedia"))
      || CFEqual(a2, CFSTR("FieldMode"))
      || CFEqual(a2, CFSTR("VideoDecoderUsage"))
      || CFEqual(a2, CFSTR("PerformanceDictionary")))
    {
      return octrp_copyNeroProperty();
    }
    if (!CFEqual(a2, CFSTR("IsTimebaseStarter")))
      return 4294954446;
    v13 = (const void **)MEMORY[0x1E0C9AE50];
    if (!v8[113])
      v13 = (const void **)MEMORY[0x1E0C9AE40];
    v9 = *v13;
  }
  v10 = (void *)CFRetain(v9);
LABEL_8:
  v11 = v10;
LABEL_13:
  result = 0;
  *a4 = v11;
  return result;
}

uint64_t octvrp_SetProperty(uint64_t a1, const void *a2, void *a3)
{
  _BYTE *DerivedStorage;
  _BYTE *v7;
  CFTypeID v8;
  uint64_t v9;
  CFTypeID TypeID;
  uint64_t v11;
  uint64_t v12;
  uint64_t FigBaseObject;
  void (*v14)(uint64_t, const void *, void *);
  CFTypeID v16;
  CFTypeID v17;
  int v18;
  int v19;
  int valuePtr;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
    return 4294954444;
  v7 = DerivedStorage;
  if (!CFEqual(a2, CFSTR("Timebase")))
  {
    if (CFEqual(a2, CFSTR("PrerollRate")))
    {
      if (!a3)
        goto LABEL_9;
      TypeID = CFNumberGetTypeID();
      if (TypeID != CFGetTypeID(a3))
        goto LABEL_9;
    }
    else if (!CFEqual(a2, CFSTR("ObeyEmptyMediaMarkers"))
           && !CFEqual(a2, CFSTR("RenderEmptyMedia"))
           && !CFEqual(a2, CFSTR("FieldMode"))
           && !CFEqual(a2, CFSTR("VideoDecoderUsage"))
           && !CFEqual(a2, CFSTR("Rotation"))
           && !CFEqual(a2, CFSTR("NeroVideoGravity")))
    {
      if (!CFEqual(a2, CFSTR("IsTimebaseStarter")))
      {
        if (CFEqual(CFSTR("ClientPID"), a2))
        {
          if (a3)
          {
            v17 = CFGetTypeID(a3);
            if (v17 == CFNumberGetTypeID())
            {
              valuePtr = 0;
              CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr);
              v18 = valuePtr;
              v19 = *((_DWORD *)v7 + 42);
              if (valuePtr != v19)
              {
                if (v19)
                {
                  octaviapipelineRegisterPowerLogEvent(a1, 1);
                  v18 = valuePtr;
                }
                *((_DWORD *)v7 + 42) = v18;
                if (v18)
                  octaviapipelineRegisterPowerLogEvent(a1, 0);
              }
            }
          }
          v11 = 0;
        }
        else
        {
          v11 = 4294954446;
        }
        goto LABEL_18;
      }
      if (!a3)
        goto LABEL_9;
      v16 = CFBooleanGetTypeID();
      if (v16 != CFGetTypeID(a3))
        goto LABEL_9;
      v7[113] = *MEMORY[0x1E0C9AE50] == (_QWORD)a3;
    }
    v9 = octrp_setNeroProperty();
    goto LABEL_17;
  }
  if (a3)
  {
    v8 = CMTimebaseGetTypeID();
    if (v8 != CFGetTypeID(a3))
    {
LABEL_9:
      v9 = FigSignalErrorAt();
      goto LABEL_17;
    }
  }
  v9 = octrp_setTimebase(a1, (OpaqueCMTimebase *)a3, 1);
LABEL_17:
  v11 = v9;
LABEL_18:
  v12 = *((_QWORD *)v7 + 19);
  if (v12)
  {
    FigBaseObject = FigRenderPipelineGetFigBaseObject(v12);
    v14 = *(void (**)(uint64_t, const void *, void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v14)
      v14(FigBaseObject, a2, a3);
  }
  return v11;
}

uint64_t octrp_setTimebase(uint64_t a1, OpaqueCMTimebase *a2, int a3)
{
  uint64_t DerivedStorage;
  OpaqueCMTimebase *v7;
  uint64_t v8;
  CMClockRef v9;
  CMClockRef v10;
  int IsOctaviaClock;
  uint64_t v12;
  uint64_t BBufFromPointer;
  _QWORD *v14;
  const void *v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = *(OpaqueCMTimebase **)(DerivedStorage + 120);
  if (v7 == a2)
    return 0;
  v8 = DerivedStorage;
  if (!a2)
  {
    IsOctaviaClock = 0;
    v10 = 0;
    goto LABEL_12;
  }
  v9 = CMTimebaseCopySourceClock(a2);
  v10 = v9;
  if (*(_BYTE *)(v8 + 113) && v9 != *(CMClockRef *)(v8 + 104))
  {
    BBufFromPointer = FigSignalErrorAt();
LABEL_29:
    v12 = BBufFromPointer;
    goto LABEL_30;
  }
  if (v9)
    IsOctaviaClock = FigClockIsOctaviaClock();
  else
    IsOctaviaClock = 0;
  BBufFromPointer = FigTransportCreateBBufFromPointer();
  if ((_DWORD)BBufFromPointer)
    goto LABEL_29;
  v7 = *(OpaqueCMTimebase **)(v8 + 120);
LABEL_12:
  if (v7)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    if (*(_BYTE *)(v8 + 113))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      CMTimebaseNotificationBarrier(*(CMTimebaseRef *)(v8 + 120));
    }
    v14 = *(_QWORD **)(v8 + 128);
    if (v14)
      FigSyncMomentSourceSetTimebase(v14, 0);
    v15 = *(const void **)(v8 + 120);
    if (v15)
      CFRelease(v15);
  }
  *(_QWORD *)(v8 + 120) = a2;
  if (a2)
  {
    CFRetain(a2);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterAddListener();
    if (*(_BYTE *)(v8 + 113))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterAddListener();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterAddListener();
    if (!IsOctaviaClock)
    {
      BBufFromPointer = octrp_ensurePreferredClock();
      if ((_DWORD)BBufFromPointer)
        goto LABEL_29;
    }
  }
  if (a3)
  {
    BBufFromPointer = NeroTransportSendAsyncMessage();
    if ((_DWORD)BBufFromPointer)
      goto LABEL_29;
  }
  if (*(_QWORD *)(v8 + 120))
  {
    BBufFromPointer = octrp_handleTimebaseTimeJumped();
    if (!(_DWORD)BBufFromPointer)
      BBufFromPointer = octrp_updateSyncMomentSourceOnTimebase(a1);
    goto LABEL_29;
  }
  v12 = 0;
LABEL_30:
  if (v10)
    CFRelease(v10);
  return v12;
}

void octrp_timebaseRateChanged(uint64_t a1, uint64_t a2)
{
  octaviapipelineRegisterPowerLogEvent(a2, 2);
}

uint64_t octrp_timebaseMasterDidChange(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  CMBaseObjectGetDerivedStorage();
  result = NeroTransportSendAsyncMessage();
  if (!(_DWORD)result)
    return octrp_updateSyncMomentSourceOnTimebase(a2);
  return result;
}

uint64_t octrp_timebaseTimeJumped()
{
  return octrp_handleTimebaseTimeJumped();
}

uint64_t octrp_ensurePreferredClock()
{
  uint64_t DerivedStorage;
  uint64_t ConsumingNeroClock;
  uint64_t v3;
  CMBlockBufferRef theSourceBuffer;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = 0;
  theSourceBuffer = 0;
  if (*(_QWORD *)(DerivedStorage + 104))
  {
    ConsumingNeroClock = 0;
  }
  else
  {
    ConsumingNeroClock = NeroTransportSendSyncMessageCreatingReply();
    if (!(_DWORD)ConsumingNeroClock)
    {
      ConsumingNeroClock = CMBlockBufferCopyDataBytes(theSourceBuffer, 0, 8uLL, &v3);
      if (!(_DWORD)ConsumingNeroClock)
      {
        ConsumingNeroClock = FigOctaviaClockCreateConsumingNeroClock(*MEMORY[0x1E0C9AE00], v3, *(const void **)(DerivedStorage + 176), (_QWORD *)(DerivedStorage + 104));
        if (!(_DWORD)ConsumingNeroClock)
          v3 = 0;
      }
    }
  }
  if (theSourceBuffer)
    CFRelease(theSourceBuffer);
  if (v3)
    NeroTransportSendAsyncMessage();
  return ConsumingNeroClock;
}

uint64_t octrp_handleTimebaseTimeJumped()
{
  uint64_t DerivedStorage;
  CMClockOrTimebaseRef v1;
  uint64_t RelativeRateAndAnchorTime;
  uint64_t v3;
  CMBlockBufferRef v4;
  CMTime outRelativeToClockOrTimebaseAnchorTime;
  CMTime outOfClockOrTimebaseAnchorTime;
  Float64 outRelativeRate;
  CMBlockBufferRef blockBufferOut;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  outRelativeRate = 0.0;
  blockBufferOut = 0;
  memset(&outOfClockOrTimebaseAnchorTime, 0, sizeof(outOfClockOrTimebaseAnchorTime));
  memset(&outRelativeToClockOrTimebaseAnchorTime, 0, sizeof(outRelativeToClockOrTimebaseAnchorTime));
  v1 = CMTimebaseCopySource(*(CMTimebaseRef *)(DerivedStorage + 120));
  RelativeRateAndAnchorTime = CMSyncGetRelativeRateAndAnchorTime(*(CMClockOrTimebaseRef *)(DerivedStorage + 120), v1, &outRelativeRate, &outOfClockOrTimebaseAnchorTime, &outRelativeToClockOrTimebaseAnchorTime);
  if (!(_DWORD)RelativeRateAndAnchorTime)
  {
    v3 = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0x38uLL, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0x38uLL, 1u, &blockBufferOut);
    v4 = blockBufferOut;
    if ((_DWORD)v3
      || (v3 = CMBlockBufferReplaceDataBytes(&outRelativeRate, blockBufferOut, 0, 8uLL),
          v4 = blockBufferOut,
          (_DWORD)v3)
      || (v3 = CMBlockBufferReplaceDataBytes(&outOfClockOrTimebaseAnchorTime, blockBufferOut, 8uLL, 0x18uLL),
          v4 = blockBufferOut,
          (_DWORD)v3)
      || (v3 = CMBlockBufferReplaceDataBytes(&outRelativeToClockOrTimebaseAnchorTime, blockBufferOut, 0x20uLL, 0x18uLL),
          v4 = blockBufferOut,
          (_DWORD)v3))
    {
      RelativeRateAndAnchorTime = v3;
      if (!v4)
        goto LABEL_8;
      goto LABEL_7;
    }
    RelativeRateAndAnchorTime = NeroTransportSendAsyncMessage();
    v4 = blockBufferOut;
    if (blockBufferOut)
LABEL_7:
      CFRelease(v4);
  }
LABEL_8:
  if (v1)
    CFRelease(v1);
  return RelativeRateAndAnchorTime;
}

uint64_t octrp_updateSyncMomentSourceOnTimebase(uint64_t a1)
{
  uint64_t DerivedStorage;
  OpaqueCMTimebase *v3;
  CMClockRef v4;
  CMClockRef v5;
  int IsOctaviaClock;
  BOOL v7;
  _QWORD *v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(OpaqueCMTimebase **)(DerivedStorage + 120);
  if (!v3)
    return 0;
  v4 = CMTimebaseCopySourceClock(v3);
  if (v4)
  {
    v5 = v4;
    IsOctaviaClock = FigClockIsOctaviaClock();
    CFRelease(v5);
    v7 = IsOctaviaClock != 0;
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_QWORD **)(DerivedStorage + 128);
  if (*(_BYTE *)(DerivedStorage + 113) || v7)
  {
    if (v8)
      FigSyncMomentSourceSetTimebase(v8, 0);
    return 0;
  }
  if (v8)
    return FigSyncMomentSourceSetTimebase(v8, *(const void **)(DerivedStorage + 120));
  else
    return FigSyncMomentSourceCreateWithDispatchQueue((uint64_t)octrp_timebaseSyncUpdateCallback, a1, *(const void **)(DerivedStorage + 120), *(NSObject **)(DerivedStorage + 24), (uint64_t *)(DerivedStorage + 128));
}

void octrp_timebaseSyncUpdateCallback(uint64_t a1, const void *a2)
{
  _BYTE *DerivedStorage;
  CMBlockBufferRef destinationBuffer;

  destinationBuffer = 0;
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && a2 && !*DerivedStorage)
  {
    if (!CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0x48uLL, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0x48uLL, 1u, &destinationBuffer)&& !CMBlockBufferReplaceDataBytes(a2, destinationBuffer, 0, 0x48uLL))
    {
      NeroTransportSendAsyncMessage();
    }
    if (destinationBuffer)
      CFRelease(destinationBuffer);
  }
}

uint64_t octrp_copyNeroProperty()
{
  uint64_t SerializedAtomDataBlockBufferForCFType;

  CMBaseObjectGetDerivedStorage();
  SerializedAtomDataBlockBufferForCFType = FigRemote_CreateSerializedAtomDataBlockBufferForCFType();
  if (!(_DWORD)SerializedAtomDataBlockBufferForCFType)
  {
    SerializedAtomDataBlockBufferForCFType = NeroTransportSendSyncMessageCreatingReply();
    if (!(_DWORD)SerializedAtomDataBlockBufferForCFType)
      return FigRemote_CreateCFTypeFromSerializedAtomDataBlockBuffer();
  }
  return SerializedAtomDataBlockBufferForCFType;
}

uint64_t octrp_setNeroProperty()
{
  uint64_t SerializedAtomDataBlockBufferForKeyValuePair;

  CMBaseObjectGetDerivedStorage();
  SerializedAtomDataBlockBufferForKeyValuePair = FigRemote_CreateSerializedAtomDataBlockBufferForKeyValuePair();
  if (!(_DWORD)SerializedAtomDataBlockBufferForKeyValuePair)
    return NeroTransportSendAsyncMessage();
  return SerializedAtomDataBlockBufferForKeyValuePair;
}

uint64_t octrp_SetRateAndAnchorTime(float a1, float a2, uint64_t a3, __int128 *a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  CMBlockBufferRef blockBufferOut;
  float v16;
  float sourceBytes;

  v16 = a2;
  sourceBytes = a1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  blockBufferOut = 0;
  v8 = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0x20uLL, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0x20uLL, 1u, &blockBufferOut);
  if (!(_DWORD)v8)
  {
    v8 = CMBlockBufferReplaceDataBytes(&sourceBytes, blockBufferOut, 0, 4uLL);
    if (!(_DWORD)v8)
    {
      v8 = CMBlockBufferReplaceDataBytes(&v16, blockBufferOut, 4uLL, 4uLL);
      if (!(_DWORD)v8)
      {
        v8 = CMBlockBufferReplaceDataBytes(a4, blockBufferOut, 8uLL, 0x18uLL);
        if (!(_DWORD)v8)
        {
          v8 = NeroTransportSendAsyncMessage();
          if (!(_DWORD)v8)
          {
            v9 = *(_QWORD *)(DerivedStorage + 152);
            if (v9)
            {
              v13 = *a4;
              v14 = *((_QWORD *)a4 + 2);
              v11 = *(_OWORD *)a5;
              v12 = *(_QWORD *)(a5 + 16);
              FigRenderPipelineSetRateAndAnchorTime(v9, &v13, &v11, sourceBytes, v16);
            }
            v8 = 0;
          }
        }
      }
    }
  }
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  return v8;
}

uint64_t octvrp_PretendOutputIsLow()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = NeroTransportSendAsyncMessage();
  if (!(_DWORD)v1)
  {
    v2 = *(_QWORD *)(DerivedStorage + 152);
    if (v2)
    {
      v3 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
      if (v3)
        v3(v2);
    }
  }
  return v1;
}

uint64_t FigRenderPipelineSetRateAndAnchorTime(uint64_t a1, __int128 *a2, __int128 *a3, float a4, float a5)
{
  uint64_t result;
  uint64_t (*v11)(uint64_t, __int128 *, __int128 *, float, float);
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  result = CMBaseObjectGetVTable();
  v11 = *(uint64_t (**)(uint64_t, __int128 *, __int128 *, float, float))(*(_QWORD *)(result + 16) + 8);
  if (v11)
  {
    v14 = *a2;
    v15 = *((_QWORD *)a2 + 2);
    v12 = *a3;
    v13 = *((_QWORD *)a3 + 2);
    return v11(a1, &v14, &v12, a4, a5);
  }
  return result;
}

void octrp_sendSampleBuffersToNeroIfNeeded()
{
  uint64_t DerivedStorage;
  int *v1;
  uint64_t v2;
  const __CFString *v3;
  const __CFString *v4;
  CMBufferRef v5;
  const void *v6;
  const void *v7;
  const __CFDictionary *v8;
  OpaqueCMClock *HostTimeClock;
  CMClockRef v10;
  const void *v11;
  opaqueCMBufferQueue *v12;
  CMTime v13;
  CMTime v14;
  CMTime v15;
  CMBlockBufferRef theBuffer;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  theBuffer = 0;
  v1 = (int *)(DerivedStorage + 64);
  if (*(int *)(DerivedStorage + 64) >= 1)
  {
    v2 = DerivedStorage;
    v3 = (const __CFString *)*MEMORY[0x1E0CA26E0];
    v4 = (const __CFString *)*MEMORY[0x1E0CA2640];
    while (1)
    {
      v5 = CMBufferQueueDequeueIfDataReadyAndRetain(*(CMBufferQueueRef *)(v2 + 32));
      if (!v5)
      {
LABEL_25:
        if (theBuffer)
          CFRelease(theBuffer);
        return;
      }
      v6 = v5;
      if (*(_QWORD *)(v2 + 72))
      {
        CMGetAttachment(v5, v3, 0);
        if (!FigCFEqual())
        {
          CFRelease(v6);
          goto LABEL_22;
        }
        v7 = *(const void **)(v2 + 72);
        if (v7)
        {
          CFRelease(v7);
          *(_QWORD *)(v2 + 72) = 0;
        }
      }
      if (*(_BYTE *)(v2 + 184))
      {
        v8 = (const __CFDictionary *)CMGetAttachment(v6, v4, 0);
        if (v8)
        {
          if (CFDictionaryGetValue(v8, CFSTR("timestamps")))
          {
            memset(&v15, 0, sizeof(v15));
            HostTimeClock = CMClockGetHostTimeClock();
            CMClockGetTime(&v15, HostTimeClock);
            memset(&v14, 0, sizeof(v14));
            v10 = CMClockGetHostTimeClock();
            v11 = *(const void **)(v2 + 104);
            v13 = v15;
            CMSyncConvertTime(&v14, &v13, v10, v11);
            v13 = v14;
            CMClockConvertHostTimeToSystemUnits(&v13);
            FigHostTimeToNanoseconds();
            FigCFArrayAppendInt64();
          }
        }
      }
      if (!FigRemote_CreateSerializedAtomDataBlockBufferWithFlagsForSampleBuffer()
        || (CMRemoveAttachment(v6, CFSTR("PostNotificationWhenConsumed")),
            !FigRemote_CreateSerializedAtomDataBlockBufferWithFlagsForSampleBuffer()))
      {
        if (CMBlockBufferGetDataLength(theBuffer) > *(_QWORD *)(v2 + 96))
          *(_QWORD *)(v2 + 96) = CMBlockBufferGetDataLength(theBuffer);
        if (NeroTransportSendAsyncMessage())
        {
          CFRelease(v6);
          goto LABEL_25;
        }
        FigAtomicDecrement32();
        v12 = *(opaqueCMBufferQueue **)(v2 + 160);
        if (v12)
          CMBufferQueueEnqueue(v12, v6);
      }
      CFRelease(v6);
      if (theBuffer)
      {
        CFRelease(theBuffer);
        theBuffer = 0;
      }
LABEL_22:
      if (*v1 <= 0)
        goto LABEL_25;
    }
  }
}

void octrp_reflectNeroNotification(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  NSObject *v7;
  _QWORD block[8];
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = 0;
  if (!a3 || !FigRemote_CreateCFTypeFromSerializedAtomDataBlockBuffer())
  {
    if (a2)
      CFRetain(a2);
    v7 = *(NSObject **)(DerivedStorage + 24);
    if (v7)
    {
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __octrp_reflectNeroNotification_block_invoke;
      block[3] = &__block_descriptor_tmp_15_3;
      block[4] = DerivedStorage;
      block[5] = a2;
      block[6] = a1;
      block[7] = v9;
      dispatch_async(v7, block);
    }
    else if (a2)
    {
      CFRelease(a2);
    }
  }
}

void __octrp_reflectNeroNotification_block_invoke(uint64_t a1)
{
  const void *v2;
  const void *v3;

  if (!**(_BYTE **)(a1 + 32))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  v2 = *(const void **)(a1 + 56);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
}

void octrp_sourceQueueDataBecameReady(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[5];

  v2 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __octrp_sourceQueueDataBecameReady_block_invoke;
  block[3] = &__block_descriptor_tmp_16_2;
  block[4] = a1;
  dispatch_async(v2, block);
}

void octrp_sourceQueueBuffersBecameAvailable(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[5];

  v2 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __octrp_sourceQueueBuffersBecameAvailable_block_invoke;
  block[3] = &__block_descriptor_tmp_17_3;
  block[4] = a1;
  dispatch_async(v2, block);
}

opaqueCMBufferQueue *octrp_sourceQueueWasReset()
{
  uint64_t DerivedStorage;
  opaqueCMBufferQueue *result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  NeroTransportSendAsyncMessage();
  *(_DWORD *)(DerivedStorage + 64) = 8;
  result = *(opaqueCMBufferQueue **)(DerivedStorage + 160);
  if (result)
    return (opaqueCMBufferQueue *)CMBufferQueueReset(result);
  return result;
}

void __octrp_sourceQueueDataBecameReady_block_invoke()
{
  octrp_sendSampleBuffersToNeroIfNeeded();
}

void __octrp_sourceQueueBuffersBecameAvailable_block_invoke()
{
  octrp_sendSampleBuffersToNeroIfNeeded();
}

void __octrp_inhibitOutputUntil_block_invoke(uint64_t a1)
{
  const void *v2;
  uint64_t v3;
  const void *v4;

  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(const void **)(a1 + 40);
  v4 = *(const void **)(v3 + 72);
  *(_QWORD *)(v3 + 72) = v2;
  if (v2)
    CFRetain(v2);
  if (v4)
    CFRelease(v4);
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

unint64_t IFFrat32FromCGFloat(double a1)
{
  double v1;
  double v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;

  v1 = ceil(a1);
  v2 = floor(a1);
  if (a1 >= 0.0)
    v1 = v2;
  v3 = (int)v1;
  if (a1 - (double)(int)v1 == 0.0)
  {
    v5 = 1;
  }
  else
  {
    v4 = v3 ^ (v3 >> 31);
    if (v4 >= 0x100)
    {
      if (v4 >= 0x10000)
      {
        if (HIBYTE(v4))
          v5 = 1;
        else
          v5 = 128;
      }
      else
      {
        v5 = 0x8000;
      }
    }
    else
    {
      v5 = 0x800000;
    }
    v6 = (double)(int)v5 * a1;
    v7 = ceil(v6);
    v8 = floor(v6);
    if (v6 >= 0.0)
      v9 = v8;
    else
      v9 = v7;
    v3 = (int)v9;
  }
  return v3 | (unint64_t)(v5 << 32);
}

uint64_t IFFItemPropertyGetUnrotatedCLAP(int a1, int8x16_t *a2, int8x16_t *a3)
{
  uint64_t v3;
  int8x16_t *v4;
  uint64_t v5;
  __int32 v6;
  int8x16_t v7;

  if (a1 != 270)
  {
    if (a1 == 180)
    {
      v6 = a2[1].i32[2];
      if (v6 == 0x80000000)
        return FigSignalErrorAt();
      v4 = a2 + 1;
      LODWORD(v3) = a2[1].i32[0];
      if ((_DWORD)v3 == 0x80000000)
        return FigSignalErrorAt();
      a2[1].i32[2] = -v6;
      goto LABEL_11;
    }
    if (a1 != 90)
    {
LABEL_12:
      v7 = a2[1];
      *a3 = *a2;
      a3[1] = v7;
      return 0;
    }
  }
  *a2 = vextq_s8(*a2, *a2, 8uLL);
  v3 = a2[1].i64[1];
  v4 = a2 + 1;
  v5 = a2[1].i64[0];
  a2[1].i64[1] = v5;
  a2[1].i64[0] = v3;
  if (a1 == 90)
  {
    if ((_DWORD)v3 == 0x80000000)
      return FigSignalErrorAt();
    goto LABEL_11;
  }
  LODWORD(v3) = v5;
  v4 = (int8x16_t *)((char *)a2 + 24);
  if ((_DWORD)v5 != 0x80000000)
  {
LABEL_11:
    v4->i32[0] = -(int)v3;
    goto LABEL_12;
  }
  return FigSignalErrorAt();
}

uint64_t IFFItemPropertyGetUnmirroredCLAP(int a1, uint64_t a2, _OWORD *a3)
{
  _DWORD *v3;
  int v4;
  __int128 v5;

  if (a1)
  {
    if (a1 != 1)
    {
LABEL_7:
      v5 = *(_OWORD *)(a2 + 16);
      *a3 = *(_OWORD *)a2;
      a3[1] = v5;
      return 0;
    }
    v3 = (_DWORD *)(a2 + 16);
    v4 = *(_DWORD *)(a2 + 16);
  }
  else
  {
    v3 = (_DWORD *)(a2 + 24);
    v4 = *(_DWORD *)(a2 + 24);
  }
  if (v4 != 0x80000000)
  {
    *v3 = -v4;
    goto LABEL_7;
  }
  return FigSignalErrorAt();
}

uint64_t IFFItemPropertyGetOrderedTransformPropertiesForItem(uint64_t a1, _DWORD *a2, _OWORD *a3, unsigned int *a4, int *a5)
{
  int *v5;
  _OWORD *v8;
  int v10;
  int v11;
  _OWORD *v12;
  __int128 v13;
  int v14;
  unsigned int *v15;
  unsigned int v16;
  int *v17;
  int v18;
  CFIndex v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int *v23;
  int *v24;
  char *v25;
  int v26;
  uint64_t result;
  int v28;
  int v29;
  __int128 v30;
  int v32;
  int v33;
  _DWORD *v34;
  int v35;
  unsigned int v36;
  int8x16_t v37;
  __int128 v38;
  _BYTE v39[32];
  uint64_t v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v5 = *(int **)(a1 + 80);
  if (!v5)
    return FigSignalErrorAt();
  v8 = a3;
  v10 = *v5;
  v11 = v5[1];
  v12 = *(_OWORD **)(a1 + 152);
  if (v12)
  {
    v13 = v12[1];
    *(_OWORD *)v39 = *v12;
    *(_OWORD *)&v39[16] = v13;
    v14 = 1;
  }
  else
  {
    v14 = 0;
    *(_DWORD *)v39 = v10;
    *(_DWORD *)&v39[4] = 1;
    *(_DWORD *)&v39[8] = v11;
    *(_OWORD *)&v39[12] = xmmword_1932FA140;
    *(_DWORD *)&v39[28] = 1;
  }
  v15 = *(unsigned int **)(a1 + 160);
  if (v15)
  {
    v16 = *v15;
    ++v14;
  }
  else
  {
    v16 = 0;
  }
  v17 = *(int **)(a1 + 168);
  if (v17)
  {
    v18 = *v17;
    ++v14;
  }
  else
  {
    v18 = -1;
  }
  if (v14 < 2)
    goto LABEL_50;
  v35 = v18;
  v36 = v16;
  v32 = v11;
  v33 = v10;
  v34 = a2;
  v41 = 0;
  v40 = 0;
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 56)) < 1)
  {
    v23 = a4;
    v24 = a5;
    if (*(_QWORD *)(a1 + 152))
      goto LABEL_29;
LABEL_39:
    if ((_DWORD)v40 != 11)
    {
      v18 = v35;
      v16 = v36;
      a5 = v24;
      a2 = v34;
      v11 = v32;
      v10 = v33;
      if (v35 == -1)
      {
        a4 = v23;
      }
      else
      {
        a4 = v23;
        if (v36 == 270 || v36 == 90)
        {
          if (v36 < 0xB4)
            v29 = 180;
          else
            v29 = -180;
          v16 = v29 + v36;
        }
      }
      goto LABEL_49;
    }
    goto LABEL_47;
  }
  v19 = 0;
  v20 = 0;
  v21 = 0;
  do
  {
    v22 = *(_DWORD *)(*(_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), v19) + 8);
    if ((v22 - 11) >= 2)
    {
      if (v22 != 10)
        goto LABEL_19;
      v20 = v21;
    }
    if (v21 >= v14)
      return FigSignalErrorAt();
    *((_DWORD *)&v40 + v21++) = v22;
LABEL_19:
    ++v19;
  }
  while (v19 < CFArrayGetCount(*(CFArrayRef *)(a1 + 56)));
  v23 = a4;
  v24 = a5;
  if (!*(_QWORD *)(a1 + 152))
    goto LABEL_39;
  if (v20 >= 1)
  {
    do
    {
      v25 = (char *)&v40 + 4 * v20;
      v26 = *((_DWORD *)v25 - 1);
      if (v26 == 11)
      {
        v37 = *(int8x16_t *)v39;
        v38 = *(_OWORD *)&v39[16];
        result = IFFItemPropertyGetUnrotatedCLAP(v36, &v37, (int8x16_t *)v39);
        if ((_DWORD)result)
          return result;
      }
      else
      {
        v37 = *(int8x16_t *)v39;
        v38 = *(_OWORD *)&v39[16];
        result = IFFItemPropertyGetUnmirroredCLAP(v35, (uint64_t)&v37, v39);
        if ((_DWORD)result)
          return result;
      }
      *((_DWORD *)&v40 + v20--) = v26;
      *((_DWORD *)v25 - 1) = 10;
    }
    while ((unint64_t)(v20 + 1) > 1);
  }
LABEL_29:
  if (v14 < 3)
  {
LABEL_47:
    a5 = v24;
    a4 = v23;
    v8 = a3;
    a2 = v34;
    v11 = v32;
    v10 = v33;
    goto LABEL_60;
  }
  a5 = v24;
  a2 = v34;
  v11 = v32;
  v10 = v33;
  if (HIDWORD(v40) != 12)
  {
    a4 = v23;
    v8 = a3;
LABEL_60:
    v18 = v35;
    v16 = v36;
    if (!a2)
      goto LABEL_52;
LABEL_51:
    *a2 = v10;
    a2[1] = v11;
    goto LABEL_52;
  }
  v18 = v35;
  v16 = v36;
  a4 = v23;
  if (v35 == -1)
  {
LABEL_49:
    v8 = a3;
    goto LABEL_50;
  }
  v8 = a3;
  if (v36 != 270 && v36 != 90)
  {
LABEL_50:
    if (!a2)
      goto LABEL_52;
    goto LABEL_51;
  }
  if (v36 < 0xB4)
    v28 = 180;
  else
    v28 = -180;
  v16 = v28 + v36;
  if (v34)
    goto LABEL_51;
LABEL_52:
  if (v8)
  {
    v30 = *(_OWORD *)&v39[16];
    *v8 = *(_OWORD *)v39;
    v8[1] = v30;
  }
  if (a4)
    *a4 = v16;
  result = 0;
  if (a5)
    *a5 = v18;
  return result;
}

uint64_t IFFItemPropertyApplyPropertiesToDimensions(uint64_t a1, _QWORD *a2, int a3, int *a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unint64_t v8;

  v4 = HIDWORD(*a2);
  v5 = (int)*a2 / (int)v4;
  if ((int)*a2 % (int)v4)
    return FigSignalErrorAt();
  v6 = a2[1];
  v7 = (int)v6 / SHIDWORD(v6);
  if ((int)v6 % SHIDWORD(v6) || v5 < 1 || v7 <= 0 || v5 > a1 || v7 > HIDWORD(a1))
    return FigSignalErrorAt();
  HIDWORD(v8) = -1527099483 * a3 + 47721856;
  LODWORD(v8) = HIDWORD(v8);
  if ((v8 >> 2) <= 0x16C16C0)
  {
    *a4 = v5;
    a4[1] = v7;
  }
  else
  {
    *a4 = v7;
    a4[1] = v5;
  }
  return 0;
}

double IFFItemPropertyMergeCLAPs(uint64_t a1, __int128 *a2, _OWORD *a3)
{
  double result;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v9 = 0uLL;
  v8 = *a2;
  if (!sumOfIFFRat32(*(_QWORD *)(a1 + 16), *((_QWORD *)a2 + 2), &v9)
    && !sumOfIFFRat32(*(_QWORD *)(a1 + 24), *((_QWORD *)a2 + 3), (_DWORD *)&v9 + 2))
  {
    result = *(double *)&v8;
    v7 = v9;
    *a3 = v8;
    a3[1] = v7;
  }
  return result;
}

uint64_t sumOfIFFRat32(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (HIDWORD(a1) == HIDWORD(a2))
  {
    v3 = a1 >> 32;
    v4 = (int)a1 + (uint64_t)(int)a2;
  }
  else
  {
    v5 = (int)a1 * (uint64_t)SHIDWORD(a2) + (int)a2 * (uint64_t)SHIDWORD(a1);
    v6 = SHIDWORD(a2) * (uint64_t)SHIDWORD(a1);
    if (v5 >= 0)
      v7 = (int)a1 * (uint64_t)SHIDWORD(a2) + (int)a2 * (uint64_t)SHIDWORD(a1);
    else
      v7 = -v5;
    if (v6)
    {
      if (v6 >= 0)
        v8 = SHIDWORD(a2) * (uint64_t)SHIDWORD(a1);
      else
        v8 = -v6;
      do
      {
        v9 = v8;
        v8 = v7 % v8;
        v7 = v9;
      }
      while (v8);
    }
    else
    {
      v9 = v7;
    }
    v4 = v5 / v9;
    v3 = v6 / v9;
  }
  if (v3 != (int)v3 || (unint64_t)(v4 - 0x80000000) <= 0xFFFFFFFEFFFFFFFFLL)
    return FigSignalErrorAt();
  *a3 = v4;
  a3[1] = v3;
  return 0;
}

uint64_t IFFItemPropertyGetCCLVDataLength(unsigned int a1, _BYTE *a2)
{
  uint64_t result;

  if ((a1 & 0x3C) == 0)
    return 4294954516;
  if (!a2)
    return 0;
  result = 0;
  *a2 = ((((int)(a1 << 26) >> 31) & 0x18) + ((a1 >> 1) & 4) + ((a1 >> 2) & 4) + (a1 & 4)) | 1;
  return result;
}

uint64_t IFFInformationSetTracksDetected(uint64_t a1, CFTypeRef cf)
{
  const void *v4;
  CFTypeRef v5;

  v4 = *(const void **)(a1 + 168);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 168) = 0;
  }
  if (cf)
    v5 = CFRetain(cf);
  else
    v5 = 0;
  *(_QWORD *)(a1 + 168) = v5;
  return 0;
}

uint64_t IFFInformationCopyTracksDetected(uint64_t a1, _QWORD *a2)
{
  CFTypeRef v3;

  if (a2)
  {
    v3 = *(CFTypeRef *)(a1 + 168);
    if (v3)
      v3 = CFRetain(v3);
    *a2 = v3;
  }
  return 0;
}

uint64_t IFFInformationSetBrands(_QWORD *a1, CFTypeRef cf, const void *a3, const void *a4)
{
  CFTypeRef v7;
  CFTypeRef v8;
  CFTypeRef v9;

  if (a1[18] || a1[19] || a1[20])
    return FigSignalErrorAt();
  if (cf)
    v7 = CFRetain(cf);
  else
    v7 = 0;
  a1[18] = v7;
  if (a3)
    v8 = CFRetain(a3);
  else
    v8 = 0;
  a1[19] = v8;
  if (a4)
    v9 = CFRetain(a4);
  else
    v9 = 0;
  a1[20] = v9;
  return 0;
}

uint64_t IFFInformationCopyMajorBrand(uint64_t a1, _QWORD *a2)
{
  CFTypeRef v3;

  if (a2)
  {
    v3 = *(CFTypeRef *)(a1 + 144);
    if (v3)
      v3 = CFRetain(v3);
    *a2 = v3;
  }
  return 0;
}

uint64_t IFFInformationCopyMajorBrandsMinorVersion(uint64_t a1, _QWORD *a2)
{
  CFTypeRef v3;

  if (a2)
  {
    v3 = *(CFTypeRef *)(a1 + 152);
    if (v3)
      v3 = CFRetain(v3);
    *a2 = v3;
  }
  return 0;
}

uint64_t IFFInformationCopyCompatibleBrands(uint64_t a1, CFArrayRef *a2)
{
  CFArrayRef Copy;

  Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFArrayRef *)(a1 + 160));
  if (!Copy)
    return FigSignalErrorAt();
  if (a2)
    *a2 = Copy;
  else
    CFRelease(Copy);
  return 0;
}

uint64_t IFFInformationSetItemHandler(uint64_t a1, int a2)
{
  *(_BYTE *)(a1 + 176) &= a2 == 1885954932;
  *(_DWORD *)(a1 + 28) = a2;
  return 0;
}

uint64_t IFFInformationGetItemHandler(uint64_t a1, _DWORD *a2)
{
  if (a2)
    *a2 = *(_DWORD *)(a1 + 28);
  return 0;
}

uint64_t IFFInformationSetPrimaryItemID(uint64_t a1, int a2)
{
  *(_BYTE *)(a1 + 64) = 1;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 68) = a2;
  *(_DWORD *)(a1 + 72) = -1;
  return 0;
}

uint64_t IFFInformationCopyPrimaryItemIndex(uint64_t a1, CFNumberRef *a2)
{
  uint64_t result;
  _DWORD *v5;
  const __CFArray *v6;
  CFIndex FirstIndexOfValue;
  CFNumberRef v8;
  CFNumberRef v9;
  CFRange v10;

  if (!a2)
    return 4294949526;
  result = resolvePicturesIfNeeded(a1);
  if (!(_DWORD)result)
  {
    v5 = (_DWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 72) == -1
      && ((v6 = *(const __CFArray **)(a1 + 136),
           v10.length = CFArrayGetCount(v6),
           v10.location = 0,
           FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v6, v10, *(const void **)(a1 + 80)),
           FirstIndexOfValue == -1)
        ? (LODWORD(FirstIndexOfValue) = *v5)
        : (*v5 = FirstIndexOfValue),
          (_DWORD)FirstIndexOfValue == -1))
    {
      return 4294954448;
    }
    else if (*(_BYTE *)(a1 + 64) && *(_QWORD *)(a1 + 80))
    {
      v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberCFIndexType, (const void *)(a1 + 72));
      if (v8)
      {
        v9 = v8;
        result = 0;
        *a2 = v9;
      }
      else
      {
        return 4294954510;
      }
    }
    else
    {
      return 4294954513;
    }
  }
  return result;
}

uint64_t resolvePicturesIfNeeded(uint64_t a1)
{
  const __CFAllocator *v2;
  CFMutableArrayRef Mutable;
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  _BOOL4 v8;
  const void *ValueAtIndex;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  int v14;
  BOOL v15;
  BOOL v16;
  const __CFArray *v17;
  CFIndex v18;
  int v19;
  int v22;
  CFIndex i;
  int v24;
  _DWORD *v25;
  CFIndex v26;
  int *v27;
  int *v28;
  const __CFArray *v29;
  int v30;
  BOOL v31;
  int v32;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  unsigned int *v37;
  BOOL v38;
  unsigned int v39;
  unsigned int v40;
  BOOL v41;
  int v42;
  BOOL v44;
  __CFArray *v45;
  CFMutableArrayRef v46;
  CFMutableArrayRef v47;
  int v48;
  uint64_t j;
  _DWORD *v50;
  _DWORD *v51;
  __CFArray *v52;
  CFIndex v53;
  const __CFArray *v54;
  CFIndex v55;
  int v56;
  CFIndex v57;
  const void *v58;
  uint64_t v59;
  const __CFArray *v60;
  CFIndex v61;
  CFIndex v62;
  CFMutableArrayRef v63;
  CFIndex k;
  _DWORD *v65;
  uint64_t v66;
  const __CFArray *v67;
  CFIndex v68;
  unsigned int *v69;
  CFIndex v70;
  char v71;
  unint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  unint64_t v75;
  const __CFArray *v76;
  CFIndex v77;
  CFIndex v78;
  CFIndex v79;
  _QWORD *v80;
  unint64_t v81;
  const __CFArray *v82;
  CFIndex v83;
  CFIndex v84;
  CFMutableArrayRef v85;
  CFIndex m;
  _DWORD *v87;
  const __CFArray *v88;
  CFIndex v89;
  CFIndex v90;
  __CFArray *v91;
  const __CFArray *v92;
  CFIndex v93;
  CFIndex v94;
  __CFArray *v95;
  const __CFArray *v96;
  CFIndex v97;
  CFIndex v98;
  __CFArray *v99;
  const __CFArray *v100;
  CFIndex v101;
  CFIndex v102;
  __CFArray *v103;
  const __CFArray *v104;
  CFIndex v105;
  CFIndex v106;
  __CFArray *v107;
  uint64_t MutableCopy;
  const __CFArray *v109;
  CFIndex v110;
  uint64_t v111;
  int v112;
  const __CFArray **v113;
  CFArrayRef *v114;
  const __CFArray *v115;
  CFIndex v116;
  CFIndex v117;
  CFIndex v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  CFIndex v122;
  _QWORD *v123;
  int v124;
  CFIndex n;
  const __CFArray *v126;
  _DWORD *v127;
  _DWORD *v128;
  CFIndex v129;
  char v130;
  int v131;
  const __CFArray *v132;
  _BYTE *v133;
  int v134;
  _BYTE *v135;
  CFIndex ii;
  const __CFArray *v137;
  _BYTE *v138;
  _BYTE *v139;
  CFIndex jj;
  const __CFArray *v141;
  _DWORD *v142;
  _DWORD *v143;
  uint64_t v144;
  uint64_t v145;
  CFIndex kk;
  const __CFArray *v147;
  _QWORD *v148;
  CFIndex v149;
  BOOL v150;
  _QWORD *v152;
  CFIndex mm;
  const __CFArray *v154;
  _DWORD *v155;
  _DWORD *v156;
  int v157;
  CFIndex nn;
  const __CFArray *v159;
  _DWORD *v160;
  uint64_t v161;
  CFIndex v163;
  CFIndex v164;
  const __CFAllocator *v165;
  CFIndex v166;
  __CFArray *theArray;
  CFIndex v168;
  _BOOL4 v169;
  BOOL v170;
  CFIndex v171;
  uint64_t v172;
  void *value;
  CFArrayRef v174;
  uint64_t v175;
  CFRange v176;
  CFRange v177;
  CFRange v178;
  CFRange v179;
  CFRange v180;

  v174 = 0;
  if (*(_BYTE *)(a1 + 24))
    return 0;
  *(_DWORD *)(a1 + 72) = -1;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
  if (theArray)
  {
    if (!*(_QWORD *)(a1 + 136))
    {
      Mutable = CFArrayCreateMutable(v2, 0, 0);
      *(_QWORD *)(a1 + 136) = Mutable;
      if (!Mutable)
      {
LABEL_327:
        v59 = FigSignalErrorAt();
LABEL_328:
        v121 = v59;
        goto LABEL_324;
      }
    }
    v4 = *(const __CFArray **)(a1 + 96);
    if (v4)
    {
      Count = CFArrayGetCount(v4);
      if (Count >= 1)
      {
        v6 = Count;
        v7 = 0;
        LOBYTE(v8) = 0;
        v165 = v2;
        v163 = Count;
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 96), v7);
          if (!*((_BYTE *)ValueAtIndex + 16))
            goto LABEL_136;
          v10 = (uint64_t)ValueAtIndex;
          v11 = *((_QWORD *)ValueAtIndex + 29);
          if (v11
            && _propertyIsEssential((uint64_t)ValueAtIndex, v11)
            && *(_DWORD *)(v10 + 44) != 1635135537
            || (v12 = *(_QWORD *)(v10 + 240)) != 0
            && _propertyIsEssential(v10, v12)
            && (*(_DWORD *)(v10 + 44) != 1635135537 || **(unsigned __int8 **)(v10 + 240) >= 0x20u))
          {
            *(_BYTE *)(v10 + 16) = 0;
            goto LABEL_136;
          }
          if (IFFItemIsPicture(v10))
          {
            v13 = *(unsigned int **)(v10 + 80);
            v16 = !v13
               || ((v14 = *(_DWORD *)(v10 + 44), v14 != 1768912492) ? (v15 = v14 == 1735551332) : (v15 = 1), !v15)
               || v13[1] * (unint64_t)*v13 < 0x7A12001;
            *(_BYTE *)(a1 + 176) &= v16;
          }
          v17 = *(const __CFArray **)(v10 + 520);
          v18 = v17 ? CFArrayGetCount(v17) : 0;
          v19 = *(_DWORD *)(v10 + 44);
          if (v19 > 1768912491)
          {
            if (v19 != 1953325424 && v19 != 1768912492)
              break;
          }
          else if (v19 != 1735551332 && v19 != 1768187246)
          {
            break;
          }
          if (v18 < 1)
          {
            v24 = 0;
            v25 = (_DWORD *)(v10 + 512);
            *(_DWORD *)(v10 + 512) = 0;
            goto LABEL_125;
          }
          v22 = 0;
          for (i = 0; i != v18; ++i)
          {
            if (*(_DWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v10 + 520), i) == 1684630887)
            {
              if (v22 >= 1)
              {
                *(_DWORD *)(v10 + 512) = -1;
                *(_BYTE *)(v10 + 16) = 0;
                v2 = v165;
                goto LABEL_136;
              }
              ++v22;
            }
          }
          v41 = v22 <= 1;
          v2 = v165;
          if (v41)
            break;
LABEL_136:
          if (++v7 == v6)
            goto LABEL_140;
        }
        *(_DWORD *)(v10 + 512) = 0;
        if (v18 < 1)
        {
          v24 = 0;
          goto LABEL_124;
        }
        v164 = v7;
        v8 = v8 || *(_WORD *)(v10 + 42) != 0;
        v26 = 0;
LABEL_56:
        v171 = v18;
        v27 = (int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v10 + 520), v26);
        v28 = v27;
        v29 = *(const __CFArray **)(a1 + 96);
        v30 = *v27;
        if (*v27 > 1684630886)
        {
          v31 = v30 == 1684630887;
          v32 = 1953000802;
        }
        else
        {
          v31 = v30 == 1635088492;
          v32 = 1667527523;
        }
        if (!v31 && v30 != v32)
        {
          v169 = v8;
          v48 = FigSignalErrorAt();
LABEL_105:
          if (v48)
            goto LABEL_106;
          v8 = v169;
          v2 = v165;
LABEL_100:
          if (*v28 == 1684630887)
            *(_DWORD *)(v10 + 512) += v28[2];
          v18 = v171;
          goto LABEL_103;
        }
        if (*((uint64_t *)v27 + 1) < 1)
          goto LABEL_100;
        v34 = 0;
        v169 = v8;
        while (1)
        {
          v35 = IFFItemGetWithID(v29, *(_DWORD *)(*((_QWORD *)v28 + 2) + 4 * v34));
          if (!v35)
          {
            v48 = FigSignalErrorAt();
            if (!v34)
              goto LABEL_105;
            goto LABEL_113;
          }
          v36 = (uint64_t)v35;
          if (!*((_BYTE *)v35 + 16))
          {
            v48 = -12780;
            if (!v34)
              goto LABEL_105;
            goto LABEL_113;
          }
          v8 = v8 || *((_WORD *)v35 + 21) != 0;
          *(_QWORD *)(*((_QWORD *)v28 + 3) + 8 * v34) = v35;
          if (IFFItemIsPicture(v10))
          {
            if (IFFItemIsPicture(v36))
              break;
          }
LABEL_92:
          v44 = *(_DWORD *)(v10 + 44) != 1768187246 || *(_DWORD *)(v36 + 44) != 1768187246;
          *(_BYTE *)(a1 + 176) &= v44;
          v45 = *(__CFArray **)(v36 + 528);
          if (!v45)
          {
            v46 = CFArrayCreateMutable(v2, 0, 0);
            *(_QWORD *)(v36 + 528) = v46;
            if (!v46 || (v47 = CFArrayCreateMutable(v2, 0, 0), (*(_QWORD *)(v36 + 536) = v47) == 0))
            {
              v48 = -12846;
              if (!v34)
                goto LABEL_105;
LABEL_113:
              if (!v48)
                goto LABEL_105;
              for (j = 0; j != v34; ++j)
              {
                v50 = IFFItemGetWithID(v29, *(_DWORD *)(*((_QWORD *)v28 + 2) + 4 * j));
                if (v50)
                {
                  v51 = v50;
                  v52 = (__CFArray *)*((_QWORD *)v50 + 66);
                  if (v52)
                  {
                    v53 = CFArrayGetCount(*((CFArrayRef *)v50 + 66));
                    CFArrayRemoveValueAtIndex(v52, v53 - 1);
                    v54 = (const __CFArray *)*((_QWORD *)v51 + 67);
                    v55 = CFArrayGetCount(v54);
                    CFArrayRemoveValueAtIndex(v54, v55 - 1);
                  }
                }
              }
LABEL_106:
              IFFItemReferenceFree((void **)v28);
              CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v10 + 520), v26--);
              v18 = v171 - 1;
              v2 = v165;
              v8 = v169;
LABEL_103:
              if (++v26 >= v18)
              {
                if (v18)
                  v24 = 0;
                else
                  v24 = FigSignalErrorAt();
                v6 = v163;
                v7 = v164;
LABEL_124:
                v25 = (_DWORD *)(v10 + 512);
LABEL_125:
                v56 = *(_DWORD *)(v10 + 44);
                if (v56 > 1768912491)
                {
                  if (v56 == 1953325424 || v56 == 1768912492)
                    goto LABEL_131;
LABEL_132:
                  if (!v24)
LABEL_135:
                    CFArrayAppendValue(theArray, (const void *)v10);
                }
                else
                {
                  if (v56 != 1735551332 && v56 != 1768187246)
                    goto LABEL_132;
LABEL_131:
                  if (*v25)
                    goto LABEL_132;
                  *v25 = -1;
                  if (!FigSignalErrorAt())
                    goto LABEL_135;
                }
                goto LABEL_136;
              }
              goto LABEL_56;
            }
            v45 = *(__CFArray **)(v36 + 528);
          }
          CFArrayAppendValue(v45, (const void *)v10);
          CFArrayAppendValue(*(CFMutableArrayRef *)(v36 + 536), (const void *)*v28);
          if (++v34 >= *((_QWORD *)v28 + 1))
            goto LABEL_100;
        }
        v37 = *(unsigned int **)(v36 + 80);
        if (*v28)
        {
          v38 = 1;
          if (*v28 != 1684630887 || !v37)
            goto LABEL_91;
          if (*(_DWORD *)(v10 + 44) == 1735551332)
          {
            v39 = *v37;
            v40 = v37[1];
            v41 = v39 > 0x3F && v40 > 0x3F;
            v38 = v41;
            goto LABEL_91;
          }
        }
        else if (v37)
        {
          v42 = *(_DWORD *)(v36 + 44);
          if (v42 == 1768912492 || v42 == 1735551332)
          {
            v38 = v37[1] * (unint64_t)*v37 < 0x7A12001;
LABEL_91:
            *(_BYTE *)(a1 + 176) &= v38;
            goto LABEL_92;
          }
        }
        v38 = 1;
        goto LABEL_91;
      }
    }
    LOBYTE(v8) = 0;
LABEL_140:
    v166 = CFArrayGetCount(theArray);
    if (v166 >= 1)
    {
      v57 = 0;
      v170 = v8;
      do
      {
        v58 = CFArrayGetValueAtIndex(theArray, v57);
        v175 = 0;
        if (!IFFItemIsPicture((uint64_t)v58))
          goto LABEL_217;
        v59 = IFFInformationReservePictureFromItemIfNeeded((uint64_t)v58, 0, &v175);
        if ((_DWORD)v59)
          goto LABEL_328;
        v59 = IFFItemInboundReferencesOfType((uint64_t)v58, 1953000802, (unsigned __int8 (*)(_BYTE *))IFFItemIsPicture, &v174);
        if ((_DWORD)v59)
          goto LABEL_328;
        v172 = (uint64_t)v58;
        v168 = v57;
        v60 = v174;
        v61 = CFArrayGetCount(v174);
        if (v61 >= 1)
        {
          v62 = v61;
          v63 = CFArrayCreateMutable(v2, 0, 0);
          *(_QWORD *)(v175 + 24) = v63;
          if (!v63)
            goto LABEL_327;
          for (k = 0; k != v62; ++k)
          {
            value = 0;
            v65 = CFArrayGetValueAtIndex(v60, k);
            if (sanityCheckImageItem((uint64_t)v65))
            {
              v65[16] = 1;
              v59 = IFFInformationReservePictureFromItemIfNeeded((uint64_t)v65, 0, &value);
              if ((_DWORD)v59)
                goto LABEL_328;
              CFArrayAppendValue(*(CFMutableArrayRef *)(v175 + 24), value);
            }
          }
          v66 = v175;
          v67 = *(const __CFArray **)(v175 + 24);
          if (v67)
            v68 = CFArrayGetCount(v67);
          else
            v68 = 0;
          v69 = *(unsigned int **)(*(_QWORD *)(v66 + 8) + 80);
          if (!v69)
          {
            *(_BYTE *)(a1 + 176) = 0;
            if (!v60)
              goto LABEL_174;
LABEL_173:
            CFRelease(v60);
            v174 = 0;
            goto LABEL_174;
          }
          if (v68 >= 1)
          {
            v70 = 0;
            v71 = 0;
            v72 = v69[1] * (unint64_t)*v69;
            do
            {
              v73 = *(unsigned int **)(*((_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v66 + 24), v70) + 1) + 80);
              if (v73)
              {
                v74 = *v73;
                LODWORD(v73) = v73[1];
              }
              else
              {
                v74 = 0;
              }
              v75 = v73 * (unint64_t)v74;
              if (!v75)
                goto LABEL_171;
              if (v72 / v75 >= 0xC9)
              {
                v76 = *(const __CFArray **)(v66 + 24);
                if (!v76 || (v77 = CFArrayGetCount(v76), v77 < 1))
                {
LABEL_170:
                  v71 = 0;
                  goto LABEL_171;
                }
                v78 = v77;
                v79 = 0;
                while (1)
                {
                  v80 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v66 + 24), v79);
                  v81 = *(unsigned int *)(*(_QWORD *)(v80[1] + 80) + 4)
                      * (unint64_t)**(unsigned int **)(v80[1] + 80);
                  if (v81 > v75 && v81 / v75 < 0xC9)
                    break;
                  if (v78 == ++v79)
                    goto LABEL_170;
                }
              }
              v71 = 1;
LABEL_171:
              *(_BYTE *)(a1 + 176) &= v71;
              ++v70;
            }
            while (v70 != v68);
          }
        }
        if (v60)
          goto LABEL_173;
LABEL_174:
        v59 = IFFItemInboundReferencesOfType(v172, 1635088492, (unsigned __int8 (*)(_BYTE *))IFFItemIsPicture, &v174);
        if ((_DWORD)v59)
          goto LABEL_328;
        v82 = v174;
        v83 = CFArrayGetCount(v174);
        LOBYTE(v8) = v170;
        if (v83 >= 1)
        {
          v84 = v83;
          v85 = CFArrayCreateMutable(v2, 0, 0);
          *(_QWORD *)(v175 + 32) = v85;
          if (!v85)
            goto LABEL_327;
          for (m = 0; m != v84; ++m)
          {
            value = 0;
            v87 = CFArrayGetValueAtIndex(v82, m);
            if (sanityCheckImageItem((uint64_t)v87))
            {
              v87[16] = 2;
              v59 = IFFInformationReservePictureFromItemIfNeeded((uint64_t)v87, 0, &value);
              if ((_DWORD)v59)
                goto LABEL_328;
              CFArrayAppendValue(*(CFMutableArrayRef *)(v175 + 32), value);
            }
          }
        }
        if (v82)
        {
          CFRelease(v82);
          v174 = 0;
        }
        v59 = IFFItemInboundReferencesOfType(v172, 1667527523, (unsigned __int8 (*)(_BYTE *))IFFItemIsExifPayload, &v174);
        if ((_DWORD)v59)
          goto LABEL_328;
        v88 = v174;
        v89 = CFArrayGetCount(v174);
        if (v89 >= 1)
        {
          v90 = v89;
          v91 = CFArrayCreateMutable(v2, 0, 0);
          *(_QWORD *)(v175 + 48) = v91;
          if (!v91)
            goto LABEL_327;
          v176.location = 0;
          v176.length = v90;
          CFArrayAppendArray(v91, v88, v176);
        }
        if (v88)
        {
          CFRelease(v88);
          v174 = 0;
        }
        v59 = IFFItemInboundReferencesOfType(v172, 1667527523, (unsigned __int8 (*)(_BYTE *))IFFItemIsXMPPayload, &v174);
        if ((_DWORD)v59)
          goto LABEL_328;
        v92 = v174;
        v93 = CFArrayGetCount(v174);
        if (v93 >= 1)
        {
          v94 = v93;
          v95 = CFArrayCreateMutable(v2, 0, 0);
          *(_QWORD *)(v175 + 56) = v95;
          if (!v95)
            goto LABEL_327;
          v177.location = 0;
          v177.length = v94;
          CFArrayAppendArray(v95, v92, v177);
        }
        if (v92)
        {
          CFRelease(v92);
          v174 = 0;
        }
        v59 = IFFItemInboundReferencesOfType(v172, 1667527523, (unsigned __int8 (*)(_BYTE *))IFFItemIsDebugMetadataPayload, &v174);
        if ((_DWORD)v59)
          goto LABEL_328;
        v96 = v174;
        v97 = CFArrayGetCount(v174);
        if (v97 >= 1)
        {
          v98 = v97;
          v99 = CFArrayCreateMutable(v2, 0, 0);
          *(_QWORD *)(v175 + 64) = v99;
          if (!v99)
            goto LABEL_327;
          v178.location = 0;
          v178.length = v98;
          CFArrayAppendArray(v99, v96, v178);
        }
        if (v96)
        {
          CFRelease(v96);
          v174 = 0;
        }
        v59 = IFFItemInboundReferencesOfType(v172, 1667527523, (unsigned __int8 (*)(_BYTE *))IFFItemIsCustomMetadataPayload, &v174);
        if ((_DWORD)v59)
          goto LABEL_328;
        v100 = v174;
        v101 = CFArrayGetCount(v174);
        if (v101 >= 1)
        {
          v102 = v101;
          v103 = CFArrayCreateMutable(v2, 0, 0);
          *(_QWORD *)(v175 + 72) = v103;
          if (!v103)
            goto LABEL_327;
          v179.location = 0;
          v179.length = v102;
          CFArrayAppendArray(v103, v100, v179);
        }
        if (v100)
        {
          CFRelease(v100);
          v174 = 0;
        }
        v59 = IFFItemInboundReferencesOfType(v172, 1684630887, (unsigned __int8 (*)(_BYTE *))IFFItemIsPicture, &v174);
        if ((_DWORD)v59)
          goto LABEL_328;
        v104 = v174;
        v105 = CFArrayGetCount(v174);
        if (v105 >= 1)
        {
          v106 = v105;
          v107 = CFArrayCreateMutable(v2, 0, 0);
          *(_QWORD *)(v175 + 40) = v107;
          if (!v107)
            goto LABEL_327;
          v180.location = 0;
          v180.length = v106;
          CFArrayAppendArray(v107, v104, v180);
        }
        if (v104)
        {
          CFRelease(v104);
          v174 = 0;
        }
        v57 = v168;
        if (*(_BYTE *)(a1 + 64) && *(_DWORD *)(a1 + 68) == *(_DWORD *)(*(_QWORD *)(v175 + 8) + 40))
          *(_QWORD *)(a1 + 80) = v175;
LABEL_217:
        ++v57;
      }
      while (v57 != v166);
    }
    *(_BYTE *)(a1 + 121) = v8;
    MutableCopy = FigCFArrayCreateMutableCopy();
    if (MutableCopy)
    {
      v109 = (const __CFArray *)MutableCopy;
      while (2)
      {
        v110 = CFArrayGetCount(v109);
        if (v110 >= 1)
        {
          v111 = v110;
          v112 = 0;
          do
          {
            v113 = (const __CFArray **)CFArrayGetValueAtIndex(v109, v111 - 1);
            if (!v113)
              goto LABEL_239;
            v114 = v113;
            if (!v113[2])
            {
              v115 = v113[5];
              if (v115)
              {
                v116 = CFArrayGetCount(v115);
                if (v116 >= 1)
                {
                  v117 = v116;
                  v118 = 0;
                  while (1)
                  {
                    v119 = CFArrayGetValueAtIndex(v114[5], v118);
                    if (!v119)
                      break;
                    v120 = v119[4];
                    if (!v120)
                      break;
                    --*(_QWORD *)(v120 + 16);
                    if (v117 == ++v118)
                    {
                      v112 = 1;
                      goto LABEL_234;
                    }
                  }
LABEL_239:
                  v121 = 4294954450;
                  goto LABEL_240;
                }
              }
LABEL_234:
              CFArrayRemoveValueAtIndex(v109, v111 - 1);
            }
            v41 = v111-- <= 1;
          }
          while (!v41);
          if (v112)
            continue;
        }
        break;
      }
      CFArrayGetCount(v109);
      v121 = 0;
LABEL_240:
      CFRelease(v109);
      if ((_DWORD)v121)
        goto LABEL_324;
    }
    else
    {
      v121 = FigSignalErrorAt();
      if ((_DWORD)v121)
      {
LABEL_324:
        CFRelease(theArray);
        if (v174)
          CFRelease(v174);
        return v121;
      }
    }
    if (*(uint64_t *)(a1 + 128) >= 1)
    {
      v122 = 0;
      do
      {
        if (*(_QWORD *)(a1 + 80))
          break;
        v123 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 136), v122);
        if (!v123[2])
        {
          *(_QWORD *)(a1 + 80) = v123;
          *(_DWORD *)(a1 + 68) = *(_DWORD *)(v123[1] + 40);
          *(_BYTE *)(a1 + 64) = 1;
        }
        ++v122;
      }
      while (v122 < *(_QWORD *)(a1 + 128));
    }
    v124 = 0;
    for (n = 0; ; ++n)
    {
      v126 = *(const __CFArray **)(a1 + 112);
      if (v126)
        v126 = (const __CFArray *)CFArrayGetCount(v126);
      if (n >= (uint64_t)v126)
        break;
      v127 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 112), n);
      if (v127[6] == 1634497650)
      {
        v128 = v127;
        v129 = 0;
        v130 = 1;
        v131 = 1;
        while (1)
        {
          v132 = (const __CFArray *)*((_QWORD *)v128 + 6);
          if (v132)
            v132 = (const __CFArray *)CFArrayGetCount(v132);
          if (v129 >= (uint64_t)v132)
            break;
          v133 = CFArrayGetValueAtIndex(*((CFArrayRef *)v128 + 6), v129);
          v134 = v133[17];
          if (!v133[16] || (v135 = v133, !IFFItemIsPicture((uint64_t)v133)) || !v135[48])
          {
            v130 = 0;
            if (!v134)
            {
              v131 = 0;
              break;
            }
          }
          v131 &= v134;
          ++v129;
        }
        v124 |= v131;
        *((_BYTE *)v128 + 29) = v131;
        *((_BYTE *)v128 + 28) = v130;
      }
    }
    for (ii = 0; ; ++ii)
    {
      v137 = *(const __CFArray **)(a1 + 112);
      if (v137)
        v137 = (const __CFArray *)CFArrayGetCount(v137);
      if (ii >= (uint64_t)v137)
        break;
      v138 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 112), ii);
      if (!v138[28])
      {
        v139 = v138;
        if (!v138[29])
        {
          for (jj = 0; ; ++jj)
          {
            v141 = (const __CFArray *)*((_QWORD *)v139 + 6);
            if (v141)
              v141 = (const __CFArray *)CFArrayGetCount(v141);
            if (jj >= (uint64_t)v141)
              break;
            v142 = CFArrayGetValueAtIndex(*((CFArrayRef *)v139 + 6), jj);
            v143 = v142;
            if (*((_BYTE *)v142 + 17))
            {
              v175 = 0;
              if (IFFInformationGetGroupByID(a1, v142[10], &v175) || !*(_BYTE *)(v175 + 28))
                goto LABEL_282;
            }
            else if (!*((_BYTE *)v142 + 16) || !IFFItemIsPicture((uint64_t)v142) || !*((_BYTE *)v143 + 48))
            {
LABEL_282:
              v139[28] = 0;
              goto LABEL_283;
            }
          }
          v139[28] = 1;
          if (*((_DWORD *)v139 + 6) == 1937007986 && !*(_QWORD *)(*((_QWORD *)v139 + 5) + 216))
          {
            v144 = FigCFArrayGetValueAtIndex();
            if (v144)
            {
              v145 = v144;
              if (*(_QWORD *)(v144 + 216))
              {
                for (kk = 0; ; ++kk)
                {
                  v147 = *(const __CFArray **)(v145 + 544);
                  if (v147)
                    v147 = (const __CFArray *)CFArrayGetCount(v147);
                  if (kk >= (uint64_t)v147)
                    break;
                  v148 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v145 + 544), kk);
                  v149 = v148[6];
                  if (v149)
                    v149 = CFArrayGetCount((CFArrayRef)v149);
                  if (*((_BYTE *)v148 + 28))
                    v150 = *((_DWORD *)v148 + 6) == 1937007986;
                  else
                    v150 = 0;
                  if (v150 && (v149 & 0xFFFFFFFFFFFFFFFELL) == 2)
                  {
                    v152 = CFArrayGetValueAtIndex((CFArrayRef)v148[6], 0);
                    if (v152[27] == *((_QWORD *)CFArrayGetValueAtIndex((CFArrayRef)v148[6], 1) + 27))
                    {
                      *(_QWORD *)(*((_QWORD *)v139 + 5) + 216) = *(_QWORD *)(v145 + 216);
                      break;
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_283:
      ;
    }
    if (v124)
    {
      for (mm = 0; ; ++mm)
      {
        v154 = *(const __CFArray **)(a1 + 112);
        if (v154)
          v154 = (const __CFArray *)CFArrayGetCount(v154);
        if (mm >= (uint64_t)v154)
          break;
        v155 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 112), mm);
        if (*((_BYTE *)v155 + 29))
        {
          v156 = v155;
          if (v155[6] == 1634497650)
          {
            v157 = 0;
            for (nn = 0; ; ++nn)
            {
              v159 = (const __CFArray *)*((_QWORD *)v156 + 6);
              if (v159)
                v159 = (const __CFArray *)CFArrayGetCount(v159);
              if (nn >= (uint64_t)v159)
                break;
              v160 = CFArrayGetValueAtIndex(*((CFArrayRef *)v156 + 6), nn);
              v175 = 0;
              if (IFFInformationGetGroupByID(a1, v160[10], &v175))
              {
                *((_BYTE *)v156 + 28) = 0;
                break;
              }
              v161 = v175;
              if (*(_BYTE *)(v175 + 28))
              {
                *(_BYTE *)(v175 + 28) = v157 == 0;
                *(_BYTE *)(v161 + 30) = v157 != 0;
                v157 = 1;
              }
            }
            *((_BYTE *)v156 + 30) = 1;
          }
        }
      }
    }
    v121 = 0;
    *(_BYTE *)(a1 + 24) = 1;
    goto LABEL_324;
  }
  return FigSignalErrorAt();
}

uint64_t IFFInformationCopySourceIsMIAF(uint64_t a1, _QWORD *a2)
{
  uint64_t SInt32;
  const void *v5;
  CFTypeRef *v6;
  uint64_t v7;
  uint64_t v8;
  CFTypeRef v9;
  uint64_t v10;

  if (!a2)
    return 4294954516;
  SInt32 = FigCFNumberCreateSInt32();
  if (!SInt32)
    return 4294954450;
  v5 = (const void *)SInt32;
  if (FigCFArrayContainsValue())
  {
LABEL_4:
    v6 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
LABEL_11:
    v9 = *v6;
    if (*v6)
      v9 = CFRetain(v9);
    v10 = 0;
    *a2 = v9;
    goto LABEL_14;
  }
  CFRelease(v5);
  v7 = FigCFNumberCreateSInt32();
  if (!v7)
    return 4294954450;
  v5 = (const void *)v7;
  if (!FigCFArrayContainsValue())
  {
LABEL_10:
    v6 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    goto LABEL_11;
  }
  v8 = resolvePicturesIfNeeded(a1);
  if (!(_DWORD)v8)
  {
    if (*(_BYTE *)(a1 + 176) && *(_BYTE *)(a1 + 64))
      goto LABEL_4;
    goto LABEL_10;
  }
  v10 = v8;
LABEL_14:
  CFRelease(v5);
  return v10;
}

uint64_t IFFInformationCopySourceSpecifiesOrientation(uint64_t a1, _QWORD *a2)
{
  CFIndex v4;
  CFIndex v5;
  const __CFArray *v6;
  CFIndex v7;
  _DWORD *ValueAtIndex;
  CFTypeRef *v9;
  CFTypeRef v10;
  uint64_t result;

  if (!a2)
    return 4294954516;
  v4 = 0;
  while (1)
  {
    v5 = v4;
    v6 = *(const __CFArray **)(a1 + 104);
    v7 = v6 ? CFArrayGetCount(v6) : 0;
    if (v5 >= v7)
      break;
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 104), v5);
    v4 = v5 + 1;
    if ((ValueAtIndex[2] - 13) >= 0xFFFFFFFE)
    {
      if (v5 < v7)
      {
        v9 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
        goto LABEL_11;
      }
      break;
    }
  }
  v9 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
LABEL_11:
  if (*v9)
    v10 = CFRetain(*v9);
  else
    v10 = 0;
  result = 0;
  *a2 = v10;
  return result;
}

uint64_t IFFInformationAddItemWithType(uint64_t a1, int a2, int a3, _QWORD *a4, _BYTE *a5)
{
  int v10;
  const __CFArray *Mutable;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v16;

  if (a5)
    v10 = *a5;
  else
    v10 = 0;
  Mutable = *(const __CFArray **)(a1 + 96);
  if (Mutable)
    goto LABEL_8;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(a1 + 96) = Mutable;
  if (Mutable)
  {
    v10 = 1;
    if (a5)
    {
      *a5 = 1;
      Mutable = *(const __CFArray **)(a1 + 96);
    }
LABEL_8:
    v12 = IFFItemGetWithID(Mutable, a3);
    v16 = v12;
    if (v12)
    {
      if (v12[11] || *((_BYTE *)v12 + 17))
        return FigSignalErrorAt();
    }
    else
    {
      v13 = IFFItemGetOrCreateWithID(a1, a3, v10, &v16);
      if ((_DWORD)v13)
        return v13;
      v12 = v16;
    }
    v12[11] = a2;
    *((_BYTE *)v12 + 16) = 1;
    v14 = 0;
    if (a4)
      *a4 = v12;
    return v14;
  }
  return FigSignalErrorAt();
}

_DWORD *IFFItemGetWithID(const __CFArray *a1, int a2)
{
  CFIndex Count;
  CFIndex v5;
  _DWORD *result;
  _DWORD v7[138];
  uint64_t v8;
  CFRange v9;

  v8 = *MEMORY[0x1E0C80C00];
  bzero(v7, 0x228uLL);
  v7[10] = a2;
  Count = CFArrayGetCount(a1);
  v9.location = 0;
  v9.length = Count;
  v5 = CFArrayBSearchValues(a1, v9, v7, (CFComparatorFunction)IFFItemComparator, 0);
  result = 0;
  if (v5 < Count)
  {
    result = CFArrayGetValueAtIndex(a1, v5);
    if (result[10] != a2)
      return 0;
  }
  return result;
}

uint64_t IFFItemGetOrCreateWithID(uint64_t a1, int a2, int a3, _QWORD *a4)
{
  const __CFArray *v8;
  uint64_t Count;
  CFIndex v10;
  uint64_t v11;
  _QWORD *v12;
  const __CFAllocator *v13;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v15;
  CFIndex v16;
  uint64_t v17;
  uint64_t v19;
  CFRange v20;

  v19 = 0;
  v8 = *(const __CFArray **)(a1 + 96);
  Count = CFArrayGetCount(v8);
  v10 = Count;
  if (!a3)
  {
    Count = (uint64_t)IFFItemGetWithID(v8, a2);
    v12 = (_QWORD *)Count;
    v19 = Count;
    if (Count)
      goto LABEL_7;
  }
  v11 = IFFItemCreate(Count, &v19);
  v12 = (_QWORD *)v19;
  if ((_DWORD)v11)
  {
    v17 = v11;
    if (!v19)
      return v17;
LABEL_11:
    CFRelease(v12);
    return v17;
  }
  v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  *(_DWORD *)(v19 + 40) = a2;
  v12[3] = a1;
  Mutable = CFArrayCreateMutable(v13, 0, 0);
  v12[7] = Mutable;
  if (!Mutable || (v15 = CFArrayCreateMutable(v13, 0, 0), (v12[65] = v15) == 0))
  {
    v17 = FigSignalErrorAt();
    goto LABEL_11;
  }
  v20.location = 0;
  v20.length = v10;
  v16 = CFArrayBSearchValues(v8, v20, v12, (CFComparatorFunction)IFFItemComparator, 0);
  CFArrayInsertValueAtIndex(v8, v16, v12);
  CFRelease(v12);
LABEL_7:
  v17 = 0;
  *a4 = v12;
  return v17;
}

uint64_t IFFInformationReserveItemWithType(uint64_t a1, int a2, int *a3, _QWORD *a4)
{
  CFMutableArrayRef Mutable;
  int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  if (!*(_QWORD *)(a1 + 96))
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(a1 + 96) = Mutable;
    if (!Mutable)
      return FigSignalErrorAt();
  }
  v12 = 0;
  v9 = *(_DWORD *)(a1 + 88) + 1;
  *(_DWORD *)(a1 + 88) = v9;
  result = IFFItemGetOrCreateWithID(a1, v9, 1, &v12);
  if (!(_DWORD)result)
  {
    v11 = v12;
    *(_DWORD *)(v12 + 44) = a2;
    *(_BYTE *)(v11 + 16) = 1;
    if (a3)
      *a3 = v9;
    result = 0;
    if (a4)
      *a4 = v11;
  }
  return result;
}

const __CFArray *IFFInformationGetItemCount(uint64_t a1)
{
  const __CFArray *result;

  result = *(const __CFArray **)(a1 + 96);
  if (result)
    return (const __CFArray *)CFArrayGetCount(result);
  return result;
}

uint64_t IFFInformationGetItemAtIndex(uint64_t a1, CFIndex idx, _QWORD *a3, _DWORD *a4, _BYTE *a5)
{
  const __CFArray *Count;
  _BYTE *ValueAtIndex;

  if (idx < 0)
    return FigSignalErrorAt();
  Count = *(const __CFArray **)(a1 + 96);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count <= idx || !a3 && !a4 && !a5)
    return FigSignalErrorAt();
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 96), idx);
  if (a3)
    *a3 = ValueAtIndex;
  if (a5)
    *a5 = ValueAtIndex[16];
  if (a4)
    *a4 = *((_DWORD *)ValueAtIndex + 10);
  return 0;
}

uint64_t IFFInformationGetItemProtectionIndex(uint64_t a1, _WORD *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t IFFInformationGetItemType(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(a1 + 44);
  return 0;
}

uint64_t IFFInformationGetItemMIMETypeAndEncoding(uint64_t a1, const char **a2, _QWORD *a3)
{
  const char *v3;
  uint64_t v4;

  if (*(_DWORD *)(a1 + 44) != 1835625829)
    return 4294949526;
  if (!*(_BYTE *)(a1 + 464))
    return 4294954513;
  if (a2)
  {
    v3 = *(const char **)(a1 + 472);
    if (!v3)
      v3 = "";
    *a2 = v3;
  }
  v4 = 0;
  if (a3)
    *a3 = *(_QWORD *)(a1 + 480);
  return v4;
}

uint64_t IFFInformationSetItemMIMETypeAndEncoding(uint64_t a1, char *__s, const char *a3)
{
  uint64_t result;
  size_t v7;
  size_t v8;
  void *v9;
  void *v10;
  void *v11;
  size_t v12;
  size_t v13;
  void *v14;
  void *v15;
  void *v16;

  result = 4294949526;
  if (__s && *(_DWORD *)(a1 + 44) == 1835625829)
  {
    v7 = strlen(__s);
    v8 = v7 + 1;
    if (v7 + 1 < 2)
    {
      v11 = *(void **)(a1 + 472);
      if (v11)
      {
        *(_QWORD *)(a1 + 472) = 0;
        free(v11);
      }
    }
    else
    {
      v9 = malloc_type_malloc(v7 + 1, 0xBAF48E5DuLL);
      if (!v9)
        return FigSignalErrorAt();
      v10 = v9;
      free(*(void **)(a1 + 472));
      *(_QWORD *)(a1 + 472) = v10;
      memcpy(v10, __s, v8);
    }
    if (!a3 || (v12 = strlen(a3), v13 = v12 + 1, v12 + 1 < 2))
    {
      v16 = *(void **)(a1 + 480);
      if (v16)
      {
        *(_QWORD *)(a1 + 480) = 0;
        free(v16);
      }
      goto LABEL_14;
    }
    v14 = malloc_type_malloc(v12 + 1, 0x2BF33120uLL);
    if (v14)
    {
      v15 = v14;
      free(*(void **)(a1 + 480));
      *(_QWORD *)(a1 + 480) = v15;
      memcpy(v15, a3, v13);
LABEL_14:
      result = 0;
      *(_BYTE *)(a1 + 464) = 1;
      return result;
    }
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t IFFInformationGetItemURIType(uint64_t a1, const char **a2)
{
  uint64_t result;
  const char *v4;

  if (*(_DWORD *)(a1 + 44) != 1970432288)
    return 4294949526;
  if (!*(_BYTE *)(a1 + 488))
    return 4294954513;
  result = 0;
  if (a2)
  {
    v4 = *(const char **)(a1 + 496);
    if (!v4)
      v4 = "";
    *a2 = v4;
  }
  return result;
}

uint64_t IFFInformationSetItemURIType(uint64_t a1, char *__s, CFStringRef theString)
{
  size_t Length;
  size_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t result;

  if (*(_DWORD *)(a1 + 44) != 1970432288 || (__s != 0) != (theString == 0))
    return 4294949526;
  if (__s)
    Length = strlen(__s);
  else
    Length = CFStringGetLength(theString);
  v7 = Length + 1;
  if (Length + 1 < 2)
  {
    v10 = *(void **)(a1 + 496);
    if (v10)
    {
      *(_QWORD *)(a1 + 496) = 0;
      free(v10);
    }
    goto LABEL_13;
  }
  v8 = malloc_type_malloc(Length + 1, 0xFF467DBDuLL);
  if (v8)
  {
    v9 = v8;
    free(*(void **)(a1 + 496));
    *(_QWORD *)(a1 + 496) = v9;
    if (__s)
    {
      memcpy(v9, __s, v7);
LABEL_13:
      result = 0;
      *(_BYTE *)(a1 + 488) = 1;
      return result;
    }
    if (CFStringGetCString(theString, (char *)v9, v7, 0x8000100u))
      goto LABEL_13;
  }
  return FigSignalErrorAt();
}

uint64_t IFFInformationGetItemName(uint64_t a1, const char **a2)
{
  const char *v2;

  if (a2)
  {
    v2 = *(const char **)(a1 + 504);
    if (!v2)
      v2 = "";
    *a2 = v2;
  }
  return 0;
}

uint64_t IFFInformationSetItemName(uint64_t a1, char *__s, CFStringRef theString)
{
  size_t Length;
  size_t v7;
  void *v8;
  void *v9;
  uint64_t result;

  if ((__s != 0) != (theString == 0))
    return 4294949526;
  if (__s)
    Length = strlen(__s);
  else
    Length = CFStringGetLength(theString);
  v7 = Length + 1;
  if (Length + 1 >= 2)
  {
    v8 = malloc_type_malloc(Length + 1, 0x62EEB434uLL);
    if (v8)
    {
      v9 = v8;
      free(*(void **)(a1 + 504));
      *(_QWORD *)(a1 + 504) = v9;
      if (__s)
      {
        memcpy(v9, __s, v7);
        return 0;
      }
      if (CFStringGetCString(theString, (char *)v9, v7, 0x8000100u))
        return 0;
    }
    return FigSignalErrorAt();
  }
  result = *(_QWORD *)(a1 + 504);
  if (!result)
    return result;
  *(_QWORD *)(a1 + 504) = 0;
  free((void *)result);
  return 0;
}

uint64_t IFFInformationHasItemReferences(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 120);
}

uint64_t IFFInformationHasLargeItemReferenceIDs(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 121);
}

const __CFArray *IFFInformationGetItemReferenceCount(uint64_t a1)
{
  const __CFArray *result;

  result = *(const __CFArray **)(a1 + 520);
  if (result)
    return (const __CFArray *)CFArrayGetCount(result);
  return result;
}

uint64_t IFFInformationGetItemReferencesAtIndex(uint64_t a1, CFIndex idx, _DWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  const __CFArray *v12;
  _QWORD *ValueAtIndex;

  v12 = *(const __CFArray **)(a1 + 520);
  if (v12)
  {
    CFArrayGetCount(v12);
    v12 = *(const __CFArray **)(a1 + 520);
  }
  ValueAtIndex = CFArrayGetValueAtIndex(v12, idx);
  if (a3)
    *a3 = *(_DWORD *)ValueAtIndex;
  if (a4)
    *a4 = ValueAtIndex[1];
  if (a5)
    *a5 = ValueAtIndex[2];
  if (a6)
    *a6 = ValueAtIndex[3];
  return 0;
}

uint64_t IFFInformationGetItemReferencesOfType(uint64_t a1, int a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v12;
  CFIndex v13;
  _QWORD *ValueAtIndex;
  uint64_t v15;

  v6 = *(const __CFArray **)(a1 + 520);
  if (!v6)
    return 4294954512;
  Count = CFArrayGetCount(v6);
  if (!Count)
    return 4294954512;
  v12 = Count;
  v13 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 520), v13);
    if (*(_DWORD *)ValueAtIndex == a2)
      break;
    if (v12 == ++v13)
      return 4294954512;
  }
  if (a3)
    *a3 = ValueAtIndex[1];
  if (a4)
    *a4 = ValueAtIndex[2];
  v15 = 0;
  if (a5)
    *a5 = ValueAtIndex[3];
  return v15;
}

uint64_t IFFInformationAddItemReference(uint64_t a1, uint64_t a2, int a3, int64_t a4, uint64_t *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v12;
  int v13;
  const __CFArray *Count;
  uint64_t ValueAtIndex;
  uint64_t v16;
  _DWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char *v29;
  _DWORD *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  int v36;
  char v37;

  v5 = 0;
  v6 = 4294949526;
  if (a4 >= 1)
  {
    v7 = a5;
    if (a5)
    {
      v12 = 0;
      v13 = *(unsigned __int8 *)(a1 + 121);
      while (1)
      {
        Count = *(const __CFArray **)(a2 + 520);
        if (Count)
          Count = (const __CFArray *)CFArrayGetCount(Count);
        if (v12 >= (uint64_t)Count)
          break;
        ValueAtIndex = FigCFArrayGetValueAtIndex();
        ++v12;
        if (*(_DWORD *)ValueAtIndex == a3)
        {
          v16 = ValueAtIndex;
          v17 = malloc_type_calloc(*(_QWORD *)(ValueAtIndex + 8) + a4, 4uLL, 0x100004052888210uLL);
          if (v17)
          {
            v18 = (char *)malloc_type_calloc(*(_QWORD *)(v16 + 8) + a4, 8uLL, 0x2004093837F09uLL);
            v19 = v18;
            if (v18)
            {
              memcpy(v18, *(const void **)(v16 + 24), 8 * *(_QWORD *)(v16 + 8));
              v20 = *(_QWORD *)(v16 + 8);
              v21 = 8 * v20;
              v22 = a4;
              do
              {
                v23 = *v7++;
                *(_QWORD *)&v19[v21] = v23;
                v21 += 8;
                --v22;
              }
              while (v22);
              qsort(v19, v20 + a4, 8uLL, (int (__cdecl *)(const void *, const void *))_sortExistingItems);
              v24 = *(_BYTE *)(a1 + 121);
              v25 = *(_QWORD *)(v16 + 8) + a4;
              if (v25 < 1)
              {
LABEL_20:
                v6 = 0;
                *(_BYTE *)(a1 + 121) = v24;
                v30 = *(_DWORD **)(v16 + 16);
                v29 = *(char **)(v16 + 24);
                *(_QWORD *)(v16 + 16) = v17;
                *(_QWORD *)(v16 + 24) = v19;
                *(_QWORD *)(v16 + 8) = v25;
                v17 = v30;
                v19 = v29;
              }
              else
              {
                v26 = 0;
                while (1)
                {
                  v27 = *(_QWORD *)&v19[8 * v26];
                  v28 = *(_DWORD *)(v27 + 40);
                  v17[v26] = v28;
                  if (v26)
                  {
                    if (v28 == v17[v26 - 1])
                      break;
                  }
                  if (v24)
                    v24 = 1;
                  else
                    v24 = *(_WORD *)(v27 + 42) != 0;
                  if (v25 == ++v26)
                    goto LABEL_20;
                }
                v6 = FigSignalErrorAt();
              }
              goto LABEL_21;
            }
          }
          else
          {
            v19 = 0;
          }
          v6 = 4294954450;
LABEL_21:
          free(v19);
          free(v17);
          v5 = 0;
          goto LABEL_28;
        }
      }
      v5 = malloc_type_calloc(1uLL, 0x20uLL, 0x1090040157183C6uLL);
      if (v5
        && (v31 = malloc_type_calloc(a4, 4uLL, 0x100004052888210uLL), (v5[2] = v31) != 0)
        && (v32 = malloc_type_calloc(a4, 8uLL, 0x2004093837F09uLL), (v5[3] = v32) != 0))
      {
        v33 = 0;
        *(_DWORD *)v5 = a3;
        v5[1] = a4;
        v34 = v13 != 0;
        do
        {
          v35 = v7[v33];
          v36 = *(_DWORD *)(v35 + 40);
          *(_QWORD *)(v5[3] + 8 * v33) = v35;
          *(_DWORD *)(v5[2] + 4 * v33) = v36;
          v34 |= (v36 & 0xFFFF0000) != 0;
          ++v33;
        }
        while (a4 != v33);
        v37 = v34 & 1;
        CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 520), v5);
        v5 = 0;
        v6 = 0;
        *(_BYTE *)(a1 + 120) = 1;
        *(_BYTE *)(a1 + 121) = v37;
      }
      else
      {
        v6 = FigSignalErrorAt();
      }
    }
  }
LABEL_28:
  IFFItemReferenceFree((void **)v5);
  return v6;
}

void IFFItemReferenceFree(void **a1)
{
  if (a1)
  {
    free(a1[2]);
    free(a1[3]);
    free(a1);
  }
}

const __CFArray *IFFInformationGetSharedItemPropertyCount(uint64_t a1)
{
  const __CFArray *result;

  result = *(const __CFArray **)(a1 + 104);
  if (result)
    return (const __CFArray *)CFArrayGetCount(result);
  return result;
}

uint64_t IFFInformationReserveSharedItemProperty(CFArrayRef *cf, int a2, CFArrayRef ***a3, CFIndex *a4)
{
  const __CFAllocator *v8;
  CFMutableArrayRef Mutable;
  CFArrayRef **v10;
  CFArrayRef **v11;
  CFIndex Count;

  if (!cf[13])
  {
    v8 = CFGetAllocator(cf);
    Mutable = CFArrayCreateMutable(v8, 0, 0);
    cf[13] = Mutable;
    if (!Mutable)
      return FigSignalErrorAt();
  }
  v10 = (CFArrayRef **)malloc_type_calloc(1uLL, 0x50uLL, 0x10B2040490ED450uLL);
  if (!v10)
    return FigSignalErrorAt();
  v11 = v10;
  Count = CFArrayGetCount(cf[13]);
  CFArrayAppendValue(cf[13], v11);
  *v11 = cf;
  *((_DWORD *)v11 + 2) = a2;
  v11[2] = (CFArrayRef *)Count;
  if (a3)
    *a3 = v11;
  if (a4)
    *a4 = Count;
  return 0;
}

uint64_t IFFInformationSetItemDisplayable(uint64_t a1, char a2)
{
  *(_BYTE *)(a1 + 48) = a2;
  return 0;
}

uint64_t IFFInformationIsItemDisplayable(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

uint64_t IFFInformationSetItemPropertySpatialExtents(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 40) = a2;
  *(_DWORD *)(a1 + 44) = a3;
  return 0;
}

uint64_t IFFInformationSetItemPropertyRotationDegreesCCW(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 40) = a2;
  return 0;
}

uint64_t IFFInformationSetItemPropertyCleanAperture(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  a1[5] = a2;
  a1[6] = a3;
  a1[7] = a4;
  a1[8] = a5;
  return 0;
}

uint64_t IFFInformationSetItemPropertyPixelInformation(uint64_t a1, size_t count, const void *a3)
{
  size_t v5;
  void *v6;
  void *v7;

  *(_BYTE *)(a1 + 40) = count;
  v5 = count;
  v6 = malloc_type_calloc(count, 1uLL, 0x100004077774924uLL);
  if (!v6)
    return FigSignalErrorAt();
  v7 = v6;
  free(*(void **)(a1 + 24));
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 48) = v7;
  memcpy(v7, a3, v5);
  return 0;
}

uint64_t IFFInformationSetItemPropertyLayerSelector(uint64_t a1, __int16 a2)
{
  *(_WORD *)(a1 + 40) = a2;
  return 0;
}

uint64_t IFFInformationSetItemPropertyAVIFOperatingPointSelector(uint64_t a1, char a2)
{
  *(_BYTE *)(a1 + 40) = a2;
  return 0;
}

uint64_t IFFInformationSetItemPropertyAVIFLayerSizes(_DWORD *a1, int a2, int a3, int a4)
{
  a1[10] = a2;
  a1[11] = a3;
  a1[12] = a4;
  return 0;
}

uint64_t IFFInformationSetItemPropertyExtrinsics(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, char a8, int a9, char a10)
{
  *(_DWORD *)(a1 + 40) = a2;
  *(_DWORD *)(a1 + 44) = a3;
  *(_DWORD *)(a1 + 48) = a4;
  *(_DWORD *)(a1 + 52) = a5;
  *(_DWORD *)(a1 + 56) = a6;
  *(_DWORD *)(a1 + 60) = a7;
  *(_BYTE *)(a1 + 64) = a8;
  *(_DWORD *)(a1 + 68) = a9;
  *(_BYTE *)(a1 + 72) = a10;
  return 0;
}

uint64_t IFFInformationSetItemPropertyIntrinsics(uint64_t a1, char a2, char a3, char a4, int a5, int a6, int a7, int a8, int a9)
{
  *(_BYTE *)(a1 + 60) = a2;
  *(_BYTE *)(a1 + 61) = a3;
  *(_BYTE *)(a1 + 62) = a4;
  *(_DWORD *)(a1 + 40) = a5;
  *(_DWORD *)(a1 + 44) = a6;
  *(_DWORD *)(a1 + 48) = a7;
  *(_DWORD *)(a1 + 52) = a8;
  *(_DWORD *)(a1 + 56) = a9;
  return 0;
}

uint64_t IFFInformationSetItemPropertyStereoAggressors(uint64_t a1, int64_t count, char *a3, char *a4, _QWORD *a5)
{
  void *v10;
  __CFArray *v11;
  void *v12;
  uint64_t v13;
  char v14;
  char v15;
  const void *v16;
  __CFArray *MutableCopy;

  v10 = *(void **)(a1 + 24);
  if (v10)
  {
    *(_QWORD *)(a1 + 24) = 0;
    free(v10);
  }
  v11 = *(__CFArray **)(a1 + 32);
  if (v11)
    CFArrayRemoveAllValues(v11);
  *(_BYTE *)(a1 + 40) = count;
  v12 = malloc_type_calloc(count, 0x10uLL, 0x1060040CEBD4D21uLL);
  *(_QWORD *)(a1 + 24) = v12;
  *(_QWORD *)(a1 + 48) = v12;
  if (!v12)
    return 4294954450;
  if (count >= 1)
  {
    v13 = 0;
    do
    {
      v14 = *a3++;
      *(_BYTE *)(*(_QWORD *)(a1 + 48) + v13) = v14;
      v15 = *a4++;
      *(_BYTE *)(*(_QWORD *)(a1 + 48) + v13 + 1) = v15;
      *(_QWORD *)(*(_QWORD *)(a1 + 48) + v13 + 8) = *a5;
      v16 = (const void *)*a5;
      if (*a5)
      {
        MutableCopy = *(__CFArray **)(a1 + 32);
        if (!MutableCopy)
        {
          MutableCopy = (__CFArray *)FigCFArrayCreateMutableCopy();
          *(_QWORD *)(a1 + 32) = MutableCopy;
          if (!MutableCopy)
            return 4294954450;
          v16 = (const void *)*a5;
        }
        CFArrayAppendValue(MutableCopy, v16);
      }
      ++a5;
      v13 += 16;
      --count;
    }
    while (count);
  }
  return 0;
}

uint64_t IFFInformationAssignSharedItemPropertyByIndex(uint64_t a1, CFIndex a2, int a3, int a4)
{
  const __CFArray *v4;
  _DWORD *ValueAtIndex;
  CFMutableArrayRef Mutable;
  uint64_t result;
  _BYTE *v12;
  uint64_t v13;
  __CFArray *v14;
  uint64_t v15;

  v4 = *(const __CFArray **)(a1 + 104);
  if (!v4)
    return FigSignalErrorAt();
  if (a2 < 0)
    return FigSignalErrorAt();
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 104)) <= a2)
    return FigSignalErrorAt();
  ValueAtIndex = CFArrayGetValueAtIndex(v4, a2);
  if (!*(_QWORD *)(a1 + 96))
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(a1 + 96) = Mutable;
    if (!Mutable)
      return FigSignalErrorAt();
  }
  v15 = 0;
  result = IFFItemGetOrCreateWithID(a1, a4, 0, &v15);
  if ((_DWORD)result)
    return result;
  v12 = malloc_type_calloc(1uLL, 0x10uLL, 0x10200405F07FB98uLL);
  if (!v12)
    return FigSignalErrorAt();
  *(_QWORD *)v12 = ValueAtIndex;
  v12[8] = a3;
  v13 = v15;
  CFArrayAppendValue(*(CFMutableArrayRef *)(v15 + 56), v12);
  switch(ValueAtIndex[2])
  {
    case 0:
      if (!a3)
        goto LABEL_33;
      result = 0;
      *(_BYTE *)(v13 + 16) = 0;
      break;
    case 1:
      result = 0;
      *(_QWORD *)(v13 + 72) = ValueAtIndex + 10;
      break;
    case 2:
      result = 0;
      *(_QWORD *)(v13 + 80) = ValueAtIndex + 10;
      break;
    case 3:
      result = 0;
      *(_QWORD *)(v13 + 88) = ValueAtIndex + 10;
      break;
    case 4:
      result = 0;
      *(_QWORD *)(v13 + 112) = ValueAtIndex + 10;
      break;
    case 5:
      result = 0;
      *(_QWORD *)(v13 + 104) = ValueAtIndex + 10;
      break;
    case 6:
      result = 0;
      *(_QWORD *)(v13 + 120) = ValueAtIndex + 10;
      break;
    case 7:
      result = 0;
      *(_QWORD *)(v13 + 128) = ValueAtIndex + 10;
      break;
    case 8:
      result = 0;
      *(_QWORD *)(v13 + 136) = ValueAtIndex + 10;
      break;
    case 9:
      result = 0;
      *(_QWORD *)(v13 + 144) = ValueAtIndex + 10;
      break;
    case 0xA:
      result = 0;
      *(_QWORD *)(v13 + 152) = ValueAtIndex + 10;
      break;
    case 0xB:
      result = 0;
      *(_QWORD *)(v13 + 160) = ValueAtIndex + 10;
      break;
    case 0xC:
      result = 0;
      *(_QWORD *)(v13 + 168) = ValueAtIndex + 10;
      break;
    case 0xD:
      result = 0;
      *(_QWORD *)(v13 + 176) = ValueAtIndex + 10;
      break;
    case 0xE:
      result = 0;
      *(_QWORD *)(v13 + 96) = ValueAtIndex + 10;
      break;
    case 0xF:
      result = 0;
      *(_QWORD *)(v13 + 184) = ValueAtIndex + 10;
      break;
    case 0x10:
      result = 0;
      *(_QWORD *)(v13 + 192) = ValueAtIndex + 10;
      break;
    case 0x11:
      result = 0;
      *(_QWORD *)(v13 + 200) = ValueAtIndex + 10;
      break;
    case 0x12:
      result = 0;
      *(_QWORD *)(v13 + 208) = ValueAtIndex + 10;
      break;
    case 0x13:
      result = 0;
      *(_QWORD *)(v13 + 216) = ValueAtIndex + 10;
      break;
    case 0x14:
      v14 = *(__CFArray **)(v13 + 224);
      if (v14 || (v14 = CFArrayCreateMutable(0, 0, 0), (*(_QWORD *)(v13 + 224) = v14) != 0))
      {
        CFArrayAppendValue(v14, ValueAtIndex + 10);
        goto LABEL_33;
      }
      result = 4294954450;
      break;
    case 0x15:
      result = 0;
      *(_QWORD *)(v13 + 232) = ValueAtIndex + 10;
      break;
    case 0x16:
      result = 0;
      *(_QWORD *)(v13 + 240) = ValueAtIndex + 10;
      break;
    case 0x17:
      result = 0;
      *(_QWORD *)(v13 + 248) = ValueAtIndex + 10;
      break;
    default:
LABEL_33:
      result = 0;
      break;
  }
  return result;
}

CFIndex IFFInformationGetItemPropertyCount(uint64_t a1)
{
  return CFArrayGetCount(*(CFArrayRef *)(a1 + 56));
}

uint64_t IFFInformationGetItemPropertyByIndex(uint64_t a1, CFIndex a2, _QWORD *a3, _BYTE *a4, _QWORD *a5)
{
  _BYTE *ValueAtIndex;

  if (a2 < 0 || CFArrayGetCount(*(CFArrayRef *)(a1 + 56)) <= a2)
    return FigSignalErrorAt();
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), a2);
  if (a3)
    *a3 = *(_QWORD *)ValueAtIndex;
  if (a4)
    *a4 = ValueAtIndex[8];
  if (a5)
    *a5 = *(_QWORD *)(*(_QWORD *)ValueAtIndex + 16);
  return 0;
}

uint64_t IFFInformationGetItemPropertyByType(uint64_t a1, int a2, _QWORD *a3, _BYTE *a4, _QWORD *a5)
{
  CFIndex Count;
  CFIndex v11;
  CFIndex v12;
  _BYTE *ValueAtIndex;
  uint64_t v14;

  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 56));
  if (Count < 1)
    return 4294954512;
  v11 = Count;
  v12 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), v12);
    if (*(_DWORD *)(*(_QWORD *)ValueAtIndex + 8) == a2)
      break;
    if (v11 == ++v12)
      return 4294954512;
  }
  if (a3)
    *a3 = *(_QWORD *)ValueAtIndex;
  if (a4)
    *a4 = ValueAtIndex[8];
  v14 = 0;
  if (a5)
    *a5 = *(_QWORD *)(*(_QWORD *)ValueAtIndex + 16);
  return v14;
}

uint64_t IFFInformationGetItemPropertyTypeForUUID(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = 0;
  while (1)
  {
    v2 = *(uint64_t **)((char *)&kIFFKnownUUIDPropertiesMap + v1);
    v4 = *v2;
    v3 = v2[1];
    if (v4 == *a1 && v3 == a1[1])
      break;
    v1 += 16;
    if (v1 == 96)
      return 0;
  }
  return *(unsigned int *)((char *)&kIFFKnownUUIDPropertiesMap + v1 + 8);
}

uint64_t IFFInformationGetCFUUIDBytesForItemPropertyType(int a1, _OWORD *a2)
{
  uint64_t v2;
  _OWORD *v3;
  uint64_t result;

  v2 = 0;
  while (*(_DWORD *)((char *)&kIFFKnownUUIDPropertiesMap + v2 + 8) != a1)
  {
    v2 += 16;
    if (v2 == 96)
      return 4294949526;
  }
  v3 = *(_UNKNOWN **)((char *)&kIFFKnownUUIDPropertiesMap + v2);
  if (v3)
  {
    result = 0;
    *a2 = *v3;
    return result;
  }
  return 4294949526;
}

uint64_t IFFInformationGetSharedItemPropertyAtIndex(uint64_t a1, CFIndex idx, _DWORD *a3, _QWORD *a4)
{
  const __CFArray *Count;
  _DWORD *ValueAtIndex;

  if (idx < 0)
    return FigSignalErrorAt();
  Count = *(const __CFArray **)(a1 + 104);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count <= idx)
    return FigSignalErrorAt();
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 104), idx);
  if (!ValueAtIndex)
    return FigSignalErrorAt();
  if (a3)
    *a3 = ValueAtIndex[2];
  if (a4)
    *a4 = ValueAtIndex;
  return 0;
}

uint64_t IFFInformationSetItemPropertyCodecConfiguration(uint64_t a1, int a2, const void *a3, size_t size)
{
  uint64_t result;
  void *v9;
  void *v10;

  result = 4294949526;
  if (a3 && size)
  {
    if (*(_QWORD *)(a1 + 56) >= size)
    {
      v10 = *(void **)(a1 + 48);
    }
    else
    {
      v9 = malloc_type_malloc(size, 0x4C0180B9uLL);
      if (!v9)
        return FigSignalErrorAt();
      v10 = v9;
      free(*(void **)(a1 + 24));
      *(_QWORD *)(a1 + 24) = v10;
      *(_QWORD *)(a1 + 48) = v10;
    }
    *(_DWORD *)(a1 + 40) = a2;
    *(_QWORD *)(a1 + 56) = size;
    memcpy(v10, a3, size);
    return 0;
  }
  return result;
}

uint64_t IFFInformationSetItemPropertyIndexedColor(uint64_t a1, __int16 a2, __int16 a3, __int16 a4, char a5)
{
  *(_WORD *)(a1 + 40) = a2;
  *(_WORD *)(a1 + 42) = a3;
  *(_WORD *)(a1 + 44) = a4;
  *(_BYTE *)(a1 + 46) = a5;
  return 0;
}

uint64_t IFFInformationSetItemPropertyICCProfileData(uint64_t a1, const void *a2, size_t size)
{
  uint64_t result;
  void *v7;
  void *v8;

  result = 4294949526;
  if (a2 && size)
  {
    *(_QWORD *)(a1 + 48) = size;
    v7 = malloc_type_malloc(size, 0x88F3349uLL);
    if (v7)
    {
      v8 = v7;
      free(*(void **)(a1 + 24));
      *(_QWORD *)(a1 + 24) = v8;
      *(_QWORD *)(a1 + 40) = v8;
      memcpy(v8, a2, size);
      return 0;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t IFFInformationSetItemPropertyHDRMetaData(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t result;
  unsigned int v4;

  switch(*(_DWORD *)(a1 + 8))
  {
    case 6:
      if (a3 == 4)
        goto LABEL_11;
      goto LABEL_9;
    case 7:
      if (a3 != 24)
        goto LABEL_9;
      goto LABEL_11;
    case 8:
      v4 = *a2;
      if ((v4 & 0x3C) == 0
        || (((((int)(v4 << 26) >> 31) & 0x18) + ((v4 >> 1) & 4) + ((v4 >> 2) & 4) + (v4 & 4)) | 1) != a3)
      {
        goto LABEL_9;
      }
      goto LABEL_11;
    case 9:
      if (a3 == 8)
      {
LABEL_11:
        memcpy((void *)(a1 + 40), a2, a3);
        result = 0;
      }
      else
      {
LABEL_9:
        result = 4294954516;
      }
      break;
    default:
      result = 4294954509;
      break;
  }
  return result;
}

uint64_t IFFInformationSetItemPropertyAuxiliaryType(uint64_t a1, char *__s, const void *a3, size_t a4)
{
  size_t v8;
  size_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t result;

  if (!__s)
    return 4294949526;
  v8 = strlen(__s) + 1;
  if (a3)
    v9 = a4;
  else
    v9 = 0;
  v10 = malloc_type_malloc(v8 + v9, 0x9FCAD575uLL);
  if (!v10)
    return FigSignalErrorAt();
  v11 = v10;
  free(*(void **)(a1 + 24));
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 40) = v11;
  memcpy(v11, __s, v8);
  if (a3)
  {
    v12 = (void *)(*(_QWORD *)(a1 + 24) + v8);
    *(_QWORD *)(a1 + 48) = v12;
    *(_QWORD *)(a1 + 56) = a4;
    memcpy(v12, a3, a4);
    return 0;
  }
  else
  {
    result = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
  }
  return result;
}

uint64_t IFFInformationGetItemPropertySpatialExtents(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (a2)
    *a2 = *(_DWORD *)(a1 + 40);
  if (a3)
    *a3 = *(_DWORD *)(a1 + 44);
  return 0;
}

uint64_t IFFInformationGetItemPropertyRotationDegreesCCW(uint64_t a1, _DWORD *a2)
{
  if (a2)
    *a2 = *(_DWORD *)(a1 + 40);
  return 0;
}

uint64_t IFFInformationGetItemPropertyCleanAperture(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  if (a2)
    *a2 = a1[5];
  if (a3)
    *a3 = a1[6];
  if (a4)
    *a4 = a1[7];
  if (a5)
    *a5 = a1[8];
  return 0;
}

uint64_t IFFInformationGetItemPropertyPixelInformation(uint64_t a1, _BYTE *a2, _QWORD *a3)
{
  if (a3)
    *a3 = *(_QWORD *)(a1 + 48);
  if (a2)
    *a2 = *(_BYTE *)(a1 + 40);
  return 0;
}

uint64_t IFFInformationGetItemPropertyCodecConfiguration(uint64_t a1, _DWORD *a2, _QWORD *a3, _QWORD *a4)
{
  if (a2)
    *a2 = *(_DWORD *)(a1 + 40);
  if (a3)
    *a3 = *(_QWORD *)(a1 + 48);
  if (a4)
    *a4 = *(_QWORD *)(a1 + 56);
  return 0;
}

uint64_t IFFInformationGetItemPropertyICCProfileData(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  if (a2)
    *a2 = *(_QWORD *)(a1 + 40);
  if (a3)
    *a3 = *(_QWORD *)(a1 + 48);
  return 0;
}

uint64_t IFFInformationGetItemPropertyIndexedColor(uint64_t a1, _WORD *a2, _WORD *a3, _WORD *a4, _BYTE *a5)
{
  if (a2)
    *a2 = *(_WORD *)(a1 + 40);
  if (a3)
    *a3 = *(_WORD *)(a1 + 42);
  if (a4)
    *a4 = *(_WORD *)(a1 + 44);
  if (a5)
    *a5 = *(_BYTE *)(a1 + 46);
  return 0;
}

uint64_t IFFInformationGetItemPropertyAuxiliaryType(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  if (a2)
    *a2 = a1[5];
  if (a3)
    *a3 = a1[6];
  if (a4)
    *a4 = a1[7];
  return 0;
}

uint64_t IFFInformationSetItemBodyImageDerivationGrid(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5)
{
  if (a3 >= 0x101 || a2 >= 0x101)
    return FigSignalErrorAt();
  *(_WORD *)(a1 + 288) = a3;
  *(_WORD *)(a1 + 290) = a2;
  *(_DWORD *)(a1 + 292) = a4;
  *(_DWORD *)(a1 + 296) = a5;
  *(_BYTE *)(a1 + 272) = 1;
  return 0;
}

uint64_t IFFInformationSetItemBodyImageDerivationTonemap(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _DWORD *v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if (a2 && !*(_WORD *)a2 && *(_DWORD *)(a2 + 12) && *(_DWORD *)(a2 + 20))
  {
    v2 = 0;
    v3 = (_DWORD *)(a2 + 36);
    while (*(v3 - 2) && *v3 && v3[2] && v3[4] && v3[6])
    {
      if (*(_BYTE *)(a2 + 4))
      {
        v3 += 10;
        if (v2++ <= 1)
          continue;
      }
      *(_OWORD *)(a1 + 288) = *(_OWORD *)a2;
      v5 = *(_OWORD *)(a2 + 16);
      v6 = *(_OWORD *)(a2 + 32);
      v7 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 352) = v7;
      *(_OWORD *)(a1 + 304) = v5;
      *(_OWORD *)(a1 + 320) = v6;
      v8 = *(_OWORD *)(a2 + 80);
      v9 = *(_OWORD *)(a2 + 96);
      v10 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 416) = v10;
      *(_OWORD *)(a1 + 368) = v8;
      *(_OWORD *)(a1 + 384) = v9;
      *(_BYTE *)(a1 + 272) = 1;
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t IFFInformationSetItemBodyImageDerivationOverlay(uint64_t a1, _QWORD *a2, int a3, int a4, const void *a5, uint64_t a6)
{
  size_t v11;
  _QWORD *v12;
  _QWORD *v13;

  v11 = 8 * a6;
  v12 = malloc_type_malloc(8 * a6 + 8, 0x9AAE2F9FuLL);
  if (!v12)
    return FigSignalErrorAt();
  v13 = v12;
  free(*(void **)(a1 + 280));
  *(_QWORD *)(a1 + 280) = v13;
  *(_QWORD *)(a1 + 288) = v13;
  *(_QWORD *)(a1 + 296) = v13 + 1;
  *v13 = *a2;
  memcpy(*(void **)(a1 + 296), a5, v11);
  *(_DWORD *)(a1 + 304) = a3;
  *(_DWORD *)(a1 + 308) = a4;
  *(_BYTE *)(a1 + 272) = 1;
  return 0;
}

uint64_t IFFInformationSetItemBodyImageExifPayload(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 288) = a2;
  *(_BYTE *)(a1 + 272) = 1;
  return 0;
}

uint64_t IFFInformationGetItemBodyImageDerivationGrid(uint64_t a1, _WORD *a2, _WORD *a3, _DWORD *a4, _DWORD *a5)
{
  if (a3)
    *a3 = *(_WORD *)(a1 + 288);
  if (a2)
    *a2 = *(_WORD *)(a1 + 290);
  if (a4)
    *a4 = *(_DWORD *)(a1 + 292);
  if (a5)
    *a5 = *(_DWORD *)(a1 + 296);
  return 0;
}

uint64_t IFFInformationGetItemBodyImageDerivationOverlay(uint64_t a1, _QWORD *a2, _DWORD *a3, _DWORD *a4, _QWORD *a5)
{
  if (a2)
    *a2 = *(_QWORD *)(a1 + 288);
  if (a3)
    *a3 = *(_DWORD *)(a1 + 304);
  if (a4)
    *a4 = *(_DWORD *)(a1 + 308);
  if (a5)
    *a5 = *(_QWORD *)(a1 + 296);
  return 0;
}

uint64_t IFFInformationGetItemBodyImageDerivationTonemap(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (a2)
  {
    *a2 = a1[18];
    v2 = a1[19];
    v3 = a1[20];
    v4 = a1[22];
    a2[3] = a1[21];
    a2[4] = v4;
    a2[1] = v2;
    a2[2] = v3;
    v5 = a1[23];
    v6 = a1[24];
    v7 = a1[26];
    a2[7] = a1[25];
    a2[8] = v7;
    a2[5] = v5;
    a2[6] = v6;
  }
  return 0;
}

uint64_t IFFInformationGetItemExtents(uint64_t a1, _DWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(a1 + 24);
  if (a2)
    *a2 = *(_DWORD *)(a1 + 432);
  if (a3)
    *a3 = *(_QWORD *)(a1 + 440);
  if (a4)
  {
    if (*(_BYTE *)(v6 + 48) && *(_DWORD *)(a1 + 432) == 1)
      v7 = *(_QWORD *)(v6 + 56);
    else
      v7 = 0;
    *a4 = v7;
  }
  if (a5)
    *a5 = *(_QWORD *)(a1 + 448);
  if (a6)
    *a6 = *(_QWORD *)(a1 + 456);
  return 0;
}

uint64_t IFFInformationSetItemDataOffset(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 48))
    return FigSignalErrorAt();
  *(_QWORD *)(a1 + 56) = a2;
  *(_BYTE *)(a1 + 48) = 1;
  return 0;
}

uint64_t IFFInformationUsesItemExtentConstructionMethod(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 122);
}

uint64_t IFFInformationReserveItemExtentTable(uint64_t a1, int a2, unsigned int a3, uint64_t a4, size_t a5, _QWORD *a6, _BYTE *a7)
{
  int v14;
  CFMutableArrayRef Mutable;
  uint64_t result;
  uint64_t v17;
  int v18;
  BOOL v19;
  int v20;
  void *v22;
  void *v23;
  void *v24;
  char v25;
  uint64_t v26;

  if (a3 >= 2)
    return FigSignalErrorAt();
  if (a7)
    v14 = *a7;
  else
    v14 = 0;
  if (!*(_QWORD *)(a1 + 96))
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(a1 + 96) = Mutable;
    if (!Mutable)
      return FigSignalErrorAt();
    v14 = 1;
    if (a7)
      *a7 = 1;
  }
  v26 = 0;
  result = IFFItemGetOrCreateWithID(a1, a2, v14, &v26);
  if ((_DWORD)result)
    return result;
  v17 = v26;
  if (*(_QWORD *)(v26 + 448))
    return FigSignalErrorAt();
  v18 = *(_DWORD *)(v26 + 44);
  if (v18 > 1768912491)
  {
    v19 = v18 == 1953325424;
    v20 = 1768912492;
  }
  else
  {
    v19 = v18 == 1735551332;
    v20 = 1768187246;
  }
  if (v19 || v18 == v20)
    v25 = *(_BYTE *)(a1 + 176) & 1;
  else
    v25 = *(_BYTE *)(a1 + 176) & (a3 == 0);
  *(_BYTE *)(a1 + 176) = v25;
  *(_DWORD *)(v17 + 432) = a3;
  *(_QWORD *)(v17 + 440) = a4;
  *(_QWORD *)(v17 + 448) = a5;
  v22 = *(void **)(v17 + 456);
  if (v22)
  {
    *(_QWORD *)(v17 + 456) = 0;
    free(v22);
  }
  v23 = malloc_type_calloc(a5, 0x10uLL, 0x1000040451B5BE8uLL);
  *(_QWORD *)(v17 + 456) = v23;
  if (!v23)
    return FigSignalErrorAt();
  v24 = v23;
  if (a3)
    *(_BYTE *)(a1 + 122) = 1;
  result = 0;
  if (a6)
    *a6 = v24;
  return result;
}

uint64_t IFFInformationReserveItemReferenceTable(uint64_t a1, int a2, int a3, size_t a4, _QWORD *a5, _BYTE *a6)
{
  int v12;
  CFMutableArrayRef Mutable;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v21;

  if (!a5)
  {
    v16 = 0;
    v19 = 4294949526;
    goto LABEL_17;
  }
  if (a6)
    v12 = *a6;
  else
    v12 = 0;
  if (!*(_QWORD *)(a1 + 96))
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(a1 + 96) = Mutable;
    if (!Mutable)
    {
      v14 = FigSignalErrorAt();
      goto LABEL_21;
    }
    v12 = 1;
    if (a6)
      *a6 = 1;
  }
  v21 = 0;
  v14 = IFFItemGetOrCreateWithID(a1, a2, v12, &v21);
  if ((_DWORD)v14)
  {
LABEL_21:
    v19 = v14;
    goto LABEL_16;
  }
  v15 = v21;
  if (!*(_QWORD *)(v21 + 520))
    *(_QWORD *)(v15 + 520) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
  v16 = malloc_type_calloc(1uLL, 0x20uLL, 0x1090040157183C6uLL);
  if (!v16
    || (v17 = malloc_type_calloc(a4, 4uLL, 0x100004052888210uLL), (v16[2] = v17) == 0)
    || (v18 = malloc_type_calloc(a4, 8uLL, 0x2004093837F09uLL), (v16[3] = v18) == 0))
  {
    v19 = FigSignalErrorAt();
    goto LABEL_17;
  }
  *(_DWORD *)v16 = a3;
  v16[1] = a4;
  CFArrayAppendValue(*(CFMutableArrayRef *)(v15 + 520), v16);
  v19 = 0;
  *(_BYTE *)(a1 + 120) = 1;
  *a5 = v16[2];
LABEL_16:
  v16 = 0;
LABEL_17:
  IFFItemReferenceFree((void **)v16);
  return v19;
}

uint64_t IFFInformationReserveItemGroup(uint64_t a1, int a2, int a3, int a4, uint64_t *a5)
{
  CFAllocatorRef *v11;
  CFMutableArrayRef v12;
  CFMutableArrayRef v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const __CFAllocator *v18;
  CFMutableArrayRef Mutable;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v22 = 0;
  v23 = 0;
  if (a3 == 1634497650 || a3 == 1937007986)
  {
    v11 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    if (*(_QWORD *)(a1 + 112)
      || (v12 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]),
          (*(_QWORD *)(a1 + 112) = v12) != 0))
    {
      if (*(_QWORD *)(a1 + 96)
        || (v13 = CFArrayCreateMutable(*v11, 0, MEMORY[0x1E0C9B378]), (*(_QWORD *)(a1 + 96) = v13) != 0))
      {
        v14 = IFFItemGetOrCreateWithID(a1, a2, 0, &v22);
        if ((_DWORD)v14)
          return v14;
        v15 = v22;
        if (!*(_BYTE *)(v22 + 16) && !*(_BYTE *)(v22 + 17))
        {
          *(_BYTE *)(v22 + 17) = 1;
          v16 = IFFItemGroupCreate(v14, &v23);
          v17 = v23;
          if ((_DWORD)v16)
          {
            v20 = v16;
            if (!v23)
              return v20;
          }
          else
          {
            v18 = *v11;
            *(_DWORD *)(v23 + 16) = a2;
            *(_DWORD *)(v17 + 24) = a3;
            *(_QWORD *)(v17 + 40) = v15;
            *(_DWORD *)(v17 + 32) = a4;
            Mutable = CFArrayCreateMutable(v18, 0, 0);
            *(_QWORD *)(v17 + 48) = Mutable;
            if (Mutable)
            {
              CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 112), (const void *)v17);
              v20 = 0;
              if (a5)
                *a5 = v17;
            }
            else
            {
              v20 = FigSignalErrorAt();
            }
          }
          CFRelease((CFTypeRef)v17);
          return v20;
        }
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t IFFItemGroupCreate(uint64_t a1, uint64_t *a2)
{
  uint64_t Instance;

  if (sRegisterIFFItemGroupTypeOnce != -1)
    dispatch_once_f(&sRegisterIFFItemGroupTypeOnce, 0, (dispatch_function_t)RegisterIFFItemGroupType);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  *a2 = Instance;
  return 0;
}

uint64_t IFFInformationDropItemGroup(uint64_t a1, CFArrayRef *a2)
{
  CFIndex i;
  const __CFArray *Count;
  const void *ValueAtIndex;
  CFIndex j;
  const __CFArray *v8;
  CFIndex k;
  const __CFArray *v10;

  if (a2)
  {
    for (i = 0; ; ++i)
    {
      Count = a2[6];
      if (Count)
        Count = (const __CFArray *)CFArrayGetCount(Count);
      if (i >= (uint64_t)Count)
        break;
      ValueAtIndex = CFArrayGetValueAtIndex(a2[6], i);
      for (j = 0; ; ++j)
      {
        v8 = (const __CFArray *)*((_QWORD *)ValueAtIndex + 68);
        if (v8)
          v8 = (const __CFArray *)CFArrayGetCount(v8);
        if (j >= (uint64_t)v8)
          break;
        if (CFArrayGetValueAtIndex(*((CFArrayRef *)ValueAtIndex + 68), j) == a2)
        {
          CFArrayRemoveValueAtIndex(*((CFMutableArrayRef *)ValueAtIndex + 68), j);
          break;
        }
      }
    }
    for (k = 0; ; ++k)
    {
      v10 = *(const __CFArray **)(a1 + 112);
      if (v10)
        v10 = (const __CFArray *)CFArrayGetCount(v10);
      if (k >= (uint64_t)v10)
        break;
      if (CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 112), k) == a2)
      {
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 112), k);
        return 0;
      }
    }
  }
  return 0;
}

uint64_t IFFInformationAddItemToGroup(uint64_t a1, int a2, uint64_t a3)
{
  CFMutableArrayRef Mutable;
  uint64_t result;
  CFArrayRef *v8;
  const __CFArray *Count;
  _DWORD *v10;
  CFIndex v11;
  _DWORD *ValueAtIndex;
  const __CFArray *v13;
  int v14;
  uint64_t i;
  const __CFArray *v16;
  uint64_t v17;
  uint64_t v18;
  CFIndex v19;
  const __CFArray *v20;
  const void *v21;
  const __CFArray *v22;
  void *value;

  value = 0;
  if (!a3)
    return FigSignalErrorAt();
  if (!*(_QWORD *)(a1 + 96))
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(a1 + 96) = Mutable;
    if (!Mutable)
      return FigSignalErrorAt();
  }
  result = IFFItemGetOrCreateWithID(a1, a2, 0, &value);
  if (!(_DWORD)result)
  {
    v8 = (CFArrayRef *)value;
    Count = (const __CFArray *)*((_QWORD *)value + 68);
    if (!Count)
    {
      Count = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
      v8[68] = Count;
      if (!Count)
        return FigSignalErrorAt();
    }
    v10 = 0;
    v11 = 0;
LABEL_8:
    Count = (const __CFArray *)CFArrayGetCount(Count);
    while (v11 < (uint64_t)Count)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v8[68], v11);
      if (ValueAtIndex == (_DWORD *)a3)
      {
        if (*(_DWORD *)(a3 + 24) != 1937007986)
          return FigSignalErrorAt();
        v13 = *(const __CFArray **)(a3 + 48);
        if (!v13 || CFArrayGetCount(v13) != 2)
          return FigSignalErrorAt();
      }
      if (ValueAtIndex[6] == 1634497650)
        v10 = ValueAtIndex;
      ++v11;
      Count = v8[68];
      if (Count)
        goto LABEL_8;
    }
    v14 = *(_DWORD *)(a3 + 24);
    if (v14 == 1634497650)
    {
      if (v10)
        return FigSignalErrorAt();
    }
    else
    {
      if (v10)
      {
        for (i = 0; ; ++i)
        {
          v16 = (const __CFArray *)*((_QWORD *)v10 + 6);
          if (v16)
            v16 = (const __CFArray *)CFArrayGetCount(v16);
          if (i >= (uint64_t)v16)
            break;
          v17 = FigCFArrayGetValueAtIndex();
          if (*(_DWORD *)(v17 + 40) != a2)
          {
            v18 = v17;
            v19 = 0;
            while (1)
            {
              v20 = *(const __CFArray **)(v18 + 544);
              if (v20)
                v20 = (const __CFArray *)CFArrayGetCount(v20);
              if (v19 >= (uint64_t)v20)
                break;
              v21 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v18 + 544), v19++);
              if (v21 == (const void *)a3)
                return FigSignalErrorAt();
            }
          }
        }
        v14 = *(_DWORD *)(a3 + 24);
      }
      if (v14 == 1937007986)
      {
        v22 = *(const __CFArray **)(a3 + 48);
        if (v22)
        {
          if (CFArrayGetCount(v22) >= 3)
            return FigSignalErrorAt();
        }
      }
    }
    CFArrayAppendValue(*(CFMutableArrayRef *)(a3 + 48), v8);
    CFArrayAppendValue(v8[68], (const void *)a3);
    return 0;
  }
  return result;
}

uint64_t IFFInformationReservePictureFromItemIfNeeded(uint64_t a1, _DWORD *a2, _QWORD *a3)
{
  int v6;
  _QWORD *v7;
  uint64_t v8;
  CFMutableArrayRef Mutable;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  int v14;
  uint64_t v16;

  v6 = *(_DWORD *)(a1 + 40);
  v7 = *(_QWORD **)(a1 + 32);
  if (!v7)
  {
    v8 = *(_QWORD *)(a1 + 24);
    if (!*(_QWORD *)(v8 + 136)
      && (Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0),
          (*(_QWORD *)(v8 + 136) = Mutable) == 0)
      || (v10 = malloc_type_calloc(1uLL, 0x50uLL, 0x10200409C0C7C1EuLL)) == 0)
    {
      v16 = FigSignalErrorAt();
      goto LABEL_22;
    }
    v7 = v10;
    *v10 = v8;
    v10[1] = a1;
    *(_QWORD *)(a1 + 32) = v10;
    if (*(_BYTE *)(a1 + 48) && !*(_DWORD *)(a1 + 64))
    {
      CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(v8 + 136), *(_QWORD *)(v8 + 128), v10);
      ++*(_QWORD *)(v8 + 128);
    }
    else
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(v8 + 136), v10);
    }
  }
  v11 = 0;
  v12 = *(_DWORD *)(v7[1] + 44);
  if (v12 > 1768912491)
  {
    v13 = v12 == 1953325424;
    v14 = 1768912492;
  }
  else
  {
    v13 = v12 == 1735551332;
    v14 = 1768187246;
  }
  if (v13 || v12 == v14)
    v11 = *(int *)(a1 + 512);
  v7[2] = v11;
  if (a2)
    *a2 = v6;
  v16 = 0;
  if (a3)
    *a3 = v7;
LABEL_22:
  IFFPictureRecordFree(0);
  return v16;
}

void IFFPictureRecordFree(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;

  if (a1)
  {
    v2 = (const void *)a1[3];
    if (v2)
    {
      CFRelease(v2);
      a1[3] = 0;
    }
    v3 = (const void *)a1[4];
    if (v3)
    {
      CFRelease(v3);
      a1[4] = 0;
    }
    v4 = (const void *)a1[5];
    if (v4)
    {
      CFRelease(v4);
      a1[5] = 0;
    }
    v5 = (const void *)a1[6];
    if (v5)
    {
      CFRelease(v5);
      a1[6] = 0;
    }
    v6 = (const void *)a1[7];
    if (v6)
    {
      CFRelease(v6);
      a1[7] = 0;
    }
    v7 = (const void *)a1[8];
    if (v7)
    {
      CFRelease(v7);
      a1[8] = 0;
    }
    v8 = (const void *)a1[9];
    if (v8)
      CFRelease(v8);
    free(a1);
  }
}

uint64_t IFFInformationGetPictureItem(uint64_t a1, _QWORD *a2)
{
  if (a2)
    *a2 = *(_QWORD *)(a1 + 8);
  return 0;
}

uint64_t IFFInformationGetPrimaryPicture(uint64_t a1, _QWORD *a2, _DWORD *a3, _BYTE *a4)
{
  uint64_t result;
  int v9;

  result = resolvePicturesIfNeeded(a1);
  if (!(_DWORD)result)
  {
    v9 = *(unsigned __int8 *)(a1 + 64);
    if (*(_BYTE *)(a1 + 64))
      v9 = *(_QWORD *)(a1 + 80) != 0;
    if (a4)
      *a4 = v9;
    if (v9)
    {
      if (a2)
        *a2 = *(_QWORD *)(a1 + 80);
      if (a3)
        *a3 = *(_DWORD *)(a1 + 68);
    }
  }
  return result;
}

uint64_t IFFInformationGetPictureCount(uint64_t a1, int a2, CFIndex *a3)
{
  uint64_t v6;
  CFIndex Count;

  v6 = resolvePicturesIfNeeded(a1);
  if (!(_DWORD)v6)
  {
    if (!a2)
    {
      Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 136));
      if (!a3)
        return v6;
      goto LABEL_4;
    }
    Count = *(_QWORD *)(a1 + 128);
    if (a3)
LABEL_4:
      *a3 = Count;
  }
  return v6;
}

uint64_t IFFInformationGetPictureByIndex(uint64_t a1, CFIndex a2, unint64_t a3, unint64_t a4)
{
  uint64_t result;
  _QWORD *ValueAtIndex;
  _QWORD *v10;

  if (!(a3 | a4))
    return 0;
  result = resolvePicturesIfNeeded(a1);
  if (!(_DWORD)result)
  {
    if (CFArrayGetCount(*(CFArrayRef *)(a1 + 136)) <= a2)
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 136), a2);
      v10 = ValueAtIndex;
      if (a3)
        *(_QWORD *)a3 = ValueAtIndex;
      result = 0;
      if (a4)
        *(_DWORD *)a4 = *(_DWORD *)(v10[1] + 40);
    }
  }
  return result;
}

uint64_t IFFInformationGetPictureByID(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t result;
  const __CFArray *v7;
  CFIndex v8;
  _QWORD *ValueAtIndex;
  _QWORD *v10;

  result = resolvePicturesIfNeeded(a1);
  if (!(_DWORD)result)
  {
    v7 = *(const __CFArray **)(a1 + 136);
    if (CFArrayGetCount(v7) < 1)
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      v8 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v7, v8);
        if (*(_DWORD *)(ValueAtIndex[1] + 40) == a2)
          break;
        if (++v8 >= CFArrayGetCount(v7))
          return 0xFFFFFFFFLL;
      }
      v10 = ValueAtIndex;
      result = 0;
      *a3 = v10;
    }
  }
  return result;
}

uint64_t IFFInformationGetIndexOfPicture(uint64_t a1, const void *a2, _DWORD *a3)
{
  uint64_t result;
  unint64_t FirstIndexOfValue;
  int v8;
  CFRange v9;

  if (!a2)
    return 4294949526;
  result = resolvePicturesIfNeeded(a1);
  if (!(_DWORD)result)
  {
    v9.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 136));
    v9.location = 0;
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(a1 + 136), v9, a2);
    if ((FirstIndexOfValue & 0x8000000000000000) != 0)
    {
      return 4294954513;
    }
    else
    {
      v8 = FirstIndexOfValue;
      if (FirstIndexOfValue >> 31)
      {
        return 4294954451;
      }
      else
      {
        result = 0;
        *a3 = v8;
      }
    }
  }
  return result;
}

uint64_t IFFInformationGetItemByID(uint64_t a1, int a2, _QWORD *a3)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t result;

  v4 = IFFItemGetWithID(*(const __CFArray **)(a1 + 96), a2);
  if (!v4)
    return 0xFFFFFFFFLL;
  v5 = v4;
  result = 0;
  *a3 = v5;
  return result;
}

uint64_t IFFInformationGetGroupsList(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = resolvePicturesIfNeeded(a1);
  if (!(_DWORD)result)
    *a2 = *(_QWORD *)(a1 + 112);
  return result;
}

uint64_t IFFInformationGetGroupByID(uint64_t a1, int a2, _QWORD *a3)
{
  CFIndex v5;
  const __CFArray *v6;
  CFIndex v7;
  _DWORD *ValueAtIndex;
  _DWORD *v9;
  uint64_t result;

  v5 = 0;
  v6 = *(const __CFArray **)(a1 + 112);
  while (1)
  {
    v7 = v6 ? CFArrayGetCount(v6) : 0;
    if (v5 >= v7)
      break;
    ValueAtIndex = CFArrayGetValueAtIndex(v6, v5++);
    if (ValueAtIndex[4] == a2)
    {
      v9 = ValueAtIndex;
      result = 0;
      *a3 = v9;
      return result;
    }
  }
  return 4294949526;
}

uint64_t IFFPictureIsDisplayable(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t IFFPictureTilesHaveSameBaseProperties(uint64_t a1, BOOL *a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v3 + 44) != 1735551332)
    return 4294954516;
  if (*(_QWORD *)(a1 + 16))
    return FigSignalErrorAt();
  return _tilesHaveSameBaseProperties(v3, a2);
}

uint64_t _tilesHaveSameBaseProperties(uint64_t a1, BOOL *a2)
{
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  uint64_t v8;
  BOOL v9;
  _QWORD *ValueAtIndex;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v18;
  uint64_t result;

  if (*(_DWORD *)(a1 + 44) != 1735551332)
    return 4294954516;
  v4 = *(const __CFArray **)(a1 + 520);
  if (!v4 || (Count = CFArrayGetCount(v4), Count < 1))
  {
    v9 = 1;
    goto LABEL_29;
  }
  v6 = Count;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 520), v7);
    if (*(_DWORD *)ValueAtIndex == 1684630887)
    {
      v11 = ValueAtIndex[1];
      if (v11 >= 1)
      {
        v12 = 0;
        while (1)
        {
          v13 = ValueAtIndex[3];
          v14 = *(_QWORD *)(v13 + 8 * v12);
          v15 = *(_DWORD *)(v14 + 44);
          if (v15 > 1768912491)
          {
            if (v15 == 1768912492 || v15 == 1953325424)
            {
LABEL_28:
              v9 = 0;
              goto LABEL_29;
            }
          }
          else if (v15 == 1735551332 || v15 == 1768187246)
          {
            goto LABEL_28;
          }
          if (!v8)
            v8 = *(_QWORD *)(v13 + 8 * v12);
          v18 = vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_193301180, (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(*(int64x2_t *)(v8 + 72), *(int64x2_t *)(v14 + 72)), (int32x4_t)vceqq_s64(*(int64x2_t *)(v8 + 104), *(int64x2_t *)(v14 + 104)))));
          if (++v12 >= v11 || (v18 & 0xF) != 0)
          {
            v9 = (v18 & 0xF) == 0;
            break;
          }
        }
      }
    }
    ++v7;
  }
  while (v7 < v6 && v9);
LABEL_29:
  result = 0;
  *a2 = v9;
  return result;
}

uint64_t IFFPictureTilesHaveTransformativeProperties(uint64_t a1, char *a2)
{
  uint64_t v2;
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex i;
  uint64_t *ValueAtIndex;
  uint64_t *v9;
  uint64_t v10;
  uint64_t j;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t result;
  char v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v2 + 44) != 1735551332)
    return 4294954516;
  if (*(_QWORD *)(a1 + 16))
    return FigSignalErrorAt();
  v4 = *(const __CFArray **)(v2 + 520);
  if (v4)
  {
    Count = CFArrayGetCount(v4);
    if (Count >= 1)
    {
      v6 = Count;
      for (i = 0; i < v6; ++i)
      {
        ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 520), i);
        if (*(_DWORD *)ValueAtIndex == 1684630887)
        {
          v9 = ValueAtIndex;
          if (ValueAtIndex[1] >= 1)
          {
            v10 = 0;
            while (2)
            {
              for (j = *(_QWORD *)(v9[3] + 8 * v10); ; j = *(_QWORD *)(v16 + 8))
              {
                if (*(_QWORD *)(j + 152)
                  || (v12 = *(_DWORD **)(j + 160)) != 0 && *v12
                  || (v13 = *(_DWORD **)(j + 168)) != 0 && *v13 != -1)
                {
                  v15 = 1;
                  goto LABEL_22;
                }
                if (*(_DWORD *)(j + 44) != 1768187246)
                  break;
                v16 = 0;
                result = getParentOfIdentityPicture(*(_QWORD *)(j + 32), &v16);
                if ((_DWORD)result)
                  return result;
              }
              if (++v10 < v9[1])
                continue;
              break;
            }
          }
        }
      }
    }
  }
  v15 = 0;
LABEL_22:
  result = 0;
  *a2 = v15;
  return result;
}

uint64_t getParentOfIdentityPicture(uint64_t a1, _QWORD *a2)
{
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  _QWORD *ValueAtIndex;
  uint64_t result;
  uint64_t v10;

  if (*(_QWORD *)(a1 + 16))
    return FigSignalErrorAt();
  v3 = *(const __CFArray **)(*(_QWORD *)(a1 + 8) + 520);
  if (!v3)
    return 4294954513;
  Count = CFArrayGetCount(v3);
  if (Count < 1)
    return 4294954513;
  v6 = Count;
  v7 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(*(_QWORD *)(a1 + 8) + 520), v7);
    if (*(_DWORD *)ValueAtIndex == 1684630887)
      break;
    if (v6 == ++v7)
      return 4294954513;
  }
  if (ValueAtIndex[1] != 1)
    return FigSignalErrorAt();
  v10 = *(_QWORD *)(*(_QWORD *)ValueAtIndex[3] + 32);
  if (!v10)
    return FigSignalErrorAt();
  result = 0;
  *a2 = v10;
  return result;
}

uint64_t IFFPictureIsPrimary(uint64_t *a1, BOOL *a2)
{
  uint64_t v4;
  uint64_t result;
  BOOL v6;

  v4 = *a1;
  result = resolvePicturesIfNeeded(*a1);
  if (!(_DWORD)result)
  {
    if (*(_BYTE *)(v4 + 64) && *(_QWORD *)(v4 + 80))
    {
      if (!a2)
        return result;
      v6 = *(_DWORD *)(a1[1] + 40) == *(_DWORD *)(v4 + 68);
      goto LABEL_6;
    }
    if (a2)
    {
      v6 = 0;
LABEL_6:
      *a2 = v6;
    }
  }
  return result;
}

uint64_t IFFPictureAddThumbnailItemReference(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  CFMutableArrayRef Mutable;
  void *value;

  result = IFFInformationAddItemReference(*(_QWORD *)a1, a2, 1953000802, 1, (uint64_t *)(a1 + 8));
  if (!(_DWORD)result)
  {
    if (*(_QWORD *)(a1 + 24)
      || (Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0),
          (*(_QWORD *)(a1 + 24) = Mutable) != 0))
    {
      value = 0;
      *(_DWORD *)(a2 + 64) = 1;
      result = IFFInformationReservePictureFromItemIfNeeded(a2, 0, &value);
      if (!(_DWORD)result)
      {
        CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 24), value);
        return 0;
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t IFFPictureAddAuxiliaryImageItemReference(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  CFMutableArrayRef Mutable;
  void *value;

  result = IFFInformationAddItemReference(*(_QWORD *)a1, a2, 1635088492, 1, (uint64_t *)(a1 + 8));
  if (!(_DWORD)result)
  {
    if (*(_QWORD *)(a1 + 32)
      || (Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0),
          (*(_QWORD *)(a1 + 32) = Mutable) != 0))
    {
      value = 0;
      *(_DWORD *)(a2 + 64) = 2;
      result = IFFInformationReservePictureFromItemIfNeeded(a2, 0, &value);
      if (!(_DWORD)result)
      {
        CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), value);
        return 0;
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t IFFPictureAddMetadataItemReference(uint64_t *a1, int a2, const void *a3)
{
  uint64_t result;
  __CFArray **v7;
  __CFArray *Mutable;

  result = IFFInformationAddItemReference(*a1, (uint64_t)a3, 1667527523, 1, a1 + 1);
  if (!(_DWORD)result)
  {
    switch(a2)
    {
      case 0:
        v7 = (__CFArray **)(a1 + 6);
        goto LABEL_8;
      case 1:
        v7 = (__CFArray **)(a1 + 7);
        goto LABEL_8;
      case 2:
        v7 = (__CFArray **)(a1 + 8);
        goto LABEL_8;
      case 3:
        v7 = (__CFArray **)(a1 + 9);
LABEL_8:
        Mutable = *v7;
        if (!*v7)
        {
          Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
          *v7 = Mutable;
          if (!Mutable)
            goto LABEL_4;
        }
        CFArrayAppendValue(Mutable, a3);
        result = 0;
        break;
      default:
LABEL_4:
        result = FigSignalErrorAt();
        break;
    }
  }
  return result;
}

uint64_t IFFPictureCopyDerivation(uint64_t a1, const __CFString **a2, CFTypeRef *a3, __CFDictionary **a4)
{
  int v4;
  const __CFAllocator *v11;
  int v12;
  uint64_t ParentOfIdentityPicture;
  _QWORD *v14;
  __CFString **v15;
  CFMutableArrayRef v16;
  CGColorRef v17;
  __CFDictionary *Mutable;
  uint64_t v19;
  const void *v20;
  const void *v21;
  CFArrayRef ArrayFromRational32;
  CFArrayRef v23;
  CFArrayRef v24;
  CFArrayRef v25;
  unint64_t v26;
  uint64_t v27;
  CFMutableDictionaryRef v28;
  __CFDictionary *v29;
  CFArrayRef v30;
  CFArrayRef v31;
  CFArrayRef v32;
  CFArrayRef v33;
  CFArrayRef v34;
  CFArrayRef v35;
  CFArrayRef v36;
  CFArrayRef v37;
  CFArrayRef v38;
  CFArrayRef v39;
  const __CFString *v41;
  uint64_t v42;
  _DWORD *v43;
  const __CFArray *v44;
  CFIndex Count;
  CFIndex v46;
  CFIndex v47;
  _QWORD *ValueAtIndex;
  uint64_t v49;
  uint64_t v50;
  uint64_t appended;
  CGColorSpace *v52;
  unint64_t v53;
  CGColorSpace *v54;
  _WORD *v55;
  double v56;
  double v57;
  double v58;
  __CFDictionary *v60;
  __CFDictionary **v61;
  int v62;
  CFMutableArrayRef theArray;
  void *values;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  CFTypeRef v69;
  void *value;
  CFTypeRef cf;
  CGFloat components[2];
  __int128 v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  value = 0;
  cf = 0;
  v69 = 0;
  v67 = 0u;
  v68 = 0u;
  v65 = 0;
  v66 = 0;
  values = 0;
  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 44);
  if (v4 != 1768187246 && v4 != 1953325424 && v4 != 1768912492)
  {
    v16 = 0;
    v17 = 0;
    Mutable = 0;
    v19 = 4294954513;
    goto LABEL_24;
  }
  if (*(_QWORD *)(a1 + 16))
  {
    v19 = FigSignalErrorAt();
    v16 = 0;
    v17 = 0;
    Mutable = 0;
    goto LABEL_24;
  }
  v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
LABEL_96:
    ParentOfIdentityPicture = FigSignalErrorAt();
    goto LABEL_97;
  }
  v12 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 44);
  if (v12 == 1953325424)
  {
    ParentOfIdentityPicture = _copyDerivationParentPicturesArray(a1, (__CFArray **)&cf);
    if (!(_DWORD)ParentOfIdentityPicture)
    {
      ParentOfIdentityPicture = IFFPictureCopyPictureDimensionsDictionary(a1, (CFDictionaryRef *)&value);
      if (!(_DWORD)ParentOfIdentityPicture)
      {
        CFDictionarySetValue(Mutable, CFSTR("PictureDimensions"), value);
        ParentOfIdentityPicture = FigCFDictionarySetInt();
        if (!(_DWORD)ParentOfIdentityPicture)
        {
          ParentOfIdentityPicture = FigCFDictionarySetInt();
          if (!(_DWORD)ParentOfIdentityPicture)
          {
            v20 = (const void *)*MEMORY[0x1E0C9AE50];
            if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 293))
              v21 = (const void *)*MEMORY[0x1E0C9AE50];
            else
              v21 = (const void *)*MEMORY[0x1E0C9AE40];
            CFDictionarySetValue(Mutable, CFSTR("TonemapBaseColorIsWorkingColor"), v21);
            CFDictionarySetValue(Mutable, CFSTR("TonemapForwardDirection"), v20);
            ArrayFromRational32 = createArrayFromRational32(v11, (char *)(*(_QWORD *)(a1 + 8) + 296));
            if (!ArrayFromRational32)
              goto LABEL_94;
            v23 = ArrayFromRational32;
            CFDictionarySetValue(Mutable, CFSTR("TonemapBaseHDRHeadroom"), ArrayFromRational32);
            CFRelease(v23);
            v24 = createArrayFromRational32(v11, (char *)(*(_QWORD *)(a1 + 8) + 304));
            if (!v24)
              goto LABEL_94;
            v25 = v24;
            CFDictionarySetValue(Mutable, CFSTR("TonemapAlternateHDRHeadroom"), v24);
            CFRelease(v25);
            theArray = CFArrayCreateMutable(v11, 3, MEMORY[0x1E0C9B378]);
            if (theArray)
            {
              v61 = a4;
              v26 = 0;
              v62 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 292);
              v27 = 344;
              while (1)
              {
                v28 = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                if (!v28)
                  break;
                v29 = v28;
                v30 = createArrayFromRational32(v11, (char *)(*(_QWORD *)(a1 + 8) + v27 - 32));
                if (!v30)
                  goto LABEL_87;
                v31 = v30;
                CFDictionarySetValue(v29, CFSTR("GainMapMin"), v30);
                CFRelease(v31);
                v32 = createArrayFromRational32(v11, (char *)(*(_QWORD *)(a1 + 8) + v27 - 24));
                if (!v32)
                  goto LABEL_87;
                v33 = v32;
                CFDictionarySetValue(v29, CFSTR("GainMapMax"), v32);
                CFRelease(v33);
                v34 = createArrayFromRational32(v11, (char *)(*(_QWORD *)(a1 + 8) + v27 - 16));
                if (!v34)
                  goto LABEL_87;
                v35 = v34;
                CFDictionarySetValue(v29, CFSTR("Gamma"), v34);
                CFRelease(v35);
                v36 = createArrayFromRational32(v11, (char *)(*(_QWORD *)(a1 + 8) + v27 - 8));
                if (!v36
                  || (v37 = v36,
                      CFDictionarySetValue(v29, CFSTR("BaseOffset"), v36),
                      CFRelease(v37),
                      (v38 = createArrayFromRational32(v11, (char *)(*(_QWORD *)(a1 + 8) + v27))) == 0))
                {
LABEL_87:
                  v19 = FigSignalErrorAt();
                  CFRelease(theArray);
                  v60 = v29;
                  goto LABEL_88;
                }
                v39 = v38;
                CFDictionarySetValue(v29, CFSTR("AlternateOffset"), v38);
                CFRelease(v39);
                CFArrayAppendValue(theArray, v29);
                CFRelease(v29);
                if (v62)
                {
                  v27 += 40;
                  if (v26++ < 2)
                    continue;
                }
                CFDictionarySetValue(Mutable, CFSTR("TonemapChannelMetadata"), theArray);
                CFRelease(theArray);
                a4 = v61;
                goto LABEL_49;
              }
              v19 = FigSignalErrorAt();
              v60 = theArray;
LABEL_88:
              CFRelease(v60);
              a4 = v61;
              if ((_DWORD)v19)
                goto LABEL_98;
            }
            else
            {
LABEL_94:
              v19 = FigSignalErrorAt();
              if ((_DWORD)v19)
                goto LABEL_98;
            }
LABEL_49:
            v15 = kFigPictureProperty_DerivationType_Tonemap;
            goto LABEL_50;
          }
        }
      }
    }
LABEL_97:
    v19 = ParentOfIdentityPicture;
LABEL_98:
    v16 = 0;
    v17 = 0;
    goto LABEL_24;
  }
  if (v12 != 1768912492)
  {
    if (v12 != 1768187246)
    {
      v16 = 0;
      v17 = 0;
      v19 = 4294954513;
      goto LABEL_76;
    }
    ParentOfIdentityPicture = getParentOfIdentityPicture(a1, &values);
    if ((_DWORD)ParentOfIdentityPicture)
      goto LABEL_97;
    v14 = values;
    ParentOfIdentityPicture = IFFItemPropertyGetOrderedTransformPropertiesForItem(*((_QWORD *)values + 1), &v66, &v67, (unsigned int *)&v65 + 1, (int *)&v65);
    if ((_DWORD)ParentOfIdentityPicture)
      goto LABEL_97;
    if (*(_DWORD *)(v14[1] + 44) != 1768187246)
    {
      cf = CFArrayCreate(v11, (const void **)&values, 1, 0);
      if (!cf)
      {
        v19 = FigSignalErrorAt();
        v16 = 0;
        v17 = 0;
LABEL_27:
        CFRelease(Mutable);
        goto LABEL_77;
      }
      ParentOfIdentityPicture = IFFPictureCopyPictureDimensionsDictionary((uint64_t)values, (CFDictionaryRef *)&value);
      if (!(_DWORD)ParentOfIdentityPicture)
      {
        CFDictionarySetValue(Mutable, CFSTR("PictureDimensions"), value);
        *(_OWORD *)components = v67;
        v73 = v68;
        ParentOfIdentityPicture = createCleanApertureExtensionDictFromProperty(v11, (char *)components, (CFDictionaryRef *)&v69);
        if (!(_DWORD)ParentOfIdentityPicture)
        {
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA8D50], v69);
          ParentOfIdentityPicture = FigCFDictionarySetInt();
          if (!(_DWORD)ParentOfIdentityPicture)
          {
            if ((_DWORD)v65 == -1
              || (ParentOfIdentityPicture = FigCFDictionarySetInt(), !(_DWORD)ParentOfIdentityPicture))
            {
              v15 = kFigPictureProperty_DerivationType_Identity;
LABEL_50:
              v41 = *v15;
              if (*v15)
                v41 = (const __CFString *)CFRetain(v41);
              v16 = 0;
              v17 = 0;
LABEL_74:
              v19 = 0;
              *a2 = v41;
LABEL_76:
              *a3 = cf;
              *a4 = Mutable;
              cf = 0;
              goto LABEL_77;
            }
          }
        }
      }
      goto LABEL_97;
    }
    goto LABEL_96;
  }
  ParentOfIdentityPicture = _copyDerivationParentPicturesArray(a1, (__CFArray **)&cf);
  if ((_DWORD)ParentOfIdentityPicture)
    goto LABEL_97;
  ParentOfIdentityPicture = IFFPictureCopyPictureDimensionsDictionary(a1, (CFDictionaryRef *)&value);
  if ((_DWORD)ParentOfIdentityPicture)
    goto LABEL_97;
  v42 = *(_QWORD *)(a1 + 8);
  v43 = *(_DWORD **)(v42 + 80);
  if (v43[1] != *(_DWORD *)(v42 + 308) || *v43 != *(_DWORD *)(v42 + 304))
    goto LABEL_96;
  CFDictionarySetValue(Mutable, CFSTR("PictureDimensions"), value);
  v44 = *(const __CFArray **)(*(_QWORD *)(a1 + 8) + 520);
  if (v44 && (Count = CFArrayGetCount(v44), Count >= 1))
  {
    v46 = Count;
    v47 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(*(_QWORD *)(a1 + 8) + 520), v47);
      if (*(_DWORD *)ValueAtIndex == 1684630887)
        break;
      if (v46 == ++v47)
        goto LABEL_62;
    }
    v49 = 2 * ValueAtIndex[1];
  }
  else
  {
LABEL_62:
    v49 = 0;
  }
  v16 = CFArrayCreateMutable(v11, 0, MEMORY[0x1E0C9B378]);
  if (v16)
  {
    if (v49 >= 1)
    {
      v50 = 0;
      while (1)
      {
        appended = FigCFArrayAppendInt32();
        if ((_DWORD)appended)
          break;
        if (v49 == ++v50)
          goto LABEL_68;
      }
      v19 = appended;
      CFRelease(v16);
      goto LABEL_98;
    }
  }
  else
  {
    ParentOfIdentityPicture = FigSignalErrorAt();
    if ((_DWORD)ParentOfIdentityPicture)
      goto LABEL_97;
  }
LABEL_68:
  CFDictionarySetValue(Mutable, CFSTR("OverlayLayerOffsets"), v16);
  v52 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
  if (v52)
  {
    v54 = v52;
    v55 = *(_WORD **)(*(_QWORD *)(a1 + 8) + 288);
    LOWORD(v53) = *v55;
    v56 = (double)v53 / 65535.0;
    components[0] = v56;
    LOWORD(v56) = v55[1];
    v57 = (double)*(unint64_t *)&v56 / 65535.0;
    components[1] = v57;
    LOWORD(v57) = v55[2];
    v58 = (double)*(unint64_t *)&v57 / 65535.0;
    *(double *)&v73 = v58;
    LOWORD(v58) = v55[3];
    *((double *)&v73 + 1) = (double)*(unint64_t *)&v58 / 65535.0;
    v17 = CGColorCreate(v52, components);
    if (v17)
      v19 = 0;
    else
      v19 = FigSignalErrorAt();
    CFRelease(v54);
    if (!(_DWORD)v19)
    {
LABEL_72:
      CFDictionarySetValue(Mutable, CFSTR("OverlayCanvasFillColor"), v17);
      v41 = CFSTR("OverlayDerivation");
      if (CFSTR("OverlayDerivation"))
        v41 = (const __CFString *)CFRetain(CFSTR("OverlayDerivation"));
      goto LABEL_74;
    }
  }
  else
  {
    v19 = FigSignalErrorAt();
    v17 = 0;
    if (!(_DWORD)v19)
      goto LABEL_72;
  }
LABEL_24:
  if (cf)
    CFRelease(cf);
  if (Mutable)
    goto LABEL_27;
LABEL_77:
  if (value)
    CFRelease(value);
  if (v69)
    CFRelease(v69);
  if (v17)
    CFRelease(v17);
  if (v16)
    CFRelease(v16);
  return v19;
}

uint64_t IFFPictureCopyPictureDimensionsDictionary(uint64_t a1, CFDictionaryRef *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v5;
  unsigned int v6;
  CFDictionaryRef DictionaryRepresentation;
  CFDictionaryRef v8;
  uint64_t result;
  CGSize v10;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned int **)(v2 + 80);
  if (!v3)
    return 4294954513;
  if (*(_DWORD *)(v2 + 44) != 1735551332)
  {
    v5 = *v3;
    v6 = v3[1];
    goto LABEL_8;
  }
  if (*(_BYTE *)(v2 + 272))
  {
    v5 = *(_DWORD *)(v2 + 292);
    if (v5 == *v3)
    {
      v6 = *(_DWORD *)(v2 + 296);
      if (v6 == v3[1])
      {
LABEL_8:
        v10.width = (double)v5;
        v10.height = (double)v6;
        DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v10);
        if (DictionaryRepresentation)
        {
          v8 = DictionaryRepresentation;
          result = 0;
          *a2 = v8;
          return result;
        }
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t createCleanApertureExtensionDictFromProperty(const __CFAllocator *a1, char *valuePtr, CFDictionaryRef *a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CFArrayRef ArrayFromRational32;
  CFArrayRef v14;
  CFArrayRef v15;
  CFArrayRef v16;
  CFArrayRef v17;
  const CFDictionaryKeyCallBacks *v18;
  const CFDictionaryValueCallBacks *v19;
  void **v20;
  CFDictionaryRef v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  const __CFAllocator *v26;
  CFNumberRef v27;
  int v28;
  int v29;
  int v30;
  int valuePtra;
  _QWORD v32[4];
  void *values[4];
  void *keys;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v6 = HIDWORD(*(_QWORD *)valuePtr);
  v7 = (int)*(_QWORD *)valuePtr / (int)v6;
  if ((int)*(_QWORD *)valuePtr % (int)v6
    || (v8 = *((_QWORD *)valuePtr + 1), (int)v8 % SHIDWORD(v8))
    || (v9 = *((_QWORD *)valuePtr + 2), (int)v9 % SHIDWORD(v9))
    || (v10 = *((_QWORD *)valuePtr + 3), (int)v10 % SHIDWORD(v10)))
  {
    v11 = *MEMORY[0x1E0CA22C8];
    keys = (void *)*MEMORY[0x1E0CA22F8];
    v35 = v11;
    v12 = *MEMORY[0x1E0CA22E8];
    v36 = *MEMORY[0x1E0CA22D8];
    v37 = v12;
    ArrayFromRational32 = createArrayFromRational32(a1, valuePtr);
    v14 = createArrayFromRational32(a1, valuePtr + 8);
    v15 = createArrayFromRational32(a1, valuePtr + 16);
    v16 = createArrayFromRational32(a1, valuePtr + 24);
    v17 = v16;
    if (ArrayFromRational32 && v14 && v15 && v16)
    {
      values[0] = ArrayFromRational32;
      values[1] = v14;
      values[2] = v15;
      values[3] = v16;
      v18 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
      v19 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
      v20 = values;
LABEL_10:
      v21 = CFDictionaryCreate(a1, (const void **)&keys, (const void **)v20, 4, v18, v19);
      v22 = 0;
      *a3 = v21;
LABEL_11:
      CFRelease(ArrayFromRational32);
      goto LABEL_12;
    }
  }
  else
  {
    v24 = *MEMORY[0x1E0CA8D40];
    keys = (void *)*MEMORY[0x1E0CA8D60];
    v35 = v24;
    v25 = *MEMORY[0x1E0CA8D58];
    v36 = *MEMORY[0x1E0CA8D48];
    v37 = v25;
    v30 = (int)v8 / SHIDWORD(v8);
    valuePtra = v7;
    v28 = (int)v10 / SHIDWORD(v10);
    v29 = (int)v9 / SHIDWORD(v9);
    v26 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    ArrayFromRational32 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtra);
    v14 = CFNumberCreate(v26, kCFNumberSInt32Type, &v30);
    v15 = CFNumberCreate(v26, kCFNumberSInt32Type, &v29);
    v27 = CFNumberCreate(v26, kCFNumberSInt32Type, &v28);
    v17 = v27;
    if (ArrayFromRational32 && v14 && v15 && v27)
    {
      v32[0] = ArrayFromRational32;
      v32[1] = v14;
      v32[2] = v15;
      v32[3] = v27;
      v18 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
      v19 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
      v20 = (void **)v32;
      goto LABEL_10;
    }
  }
  v22 = FigSignalErrorAt();
  if (ArrayFromRational32)
    goto LABEL_11;
LABEL_12:
  if (v14)
    CFRelease(v14);
  if (v15)
    CFRelease(v15);
  if (v17)
    CFRelease(v17);
  return v22;
}

uint64_t _copyDerivationParentPicturesArray(uint64_t a1, __CFArray **a2)
{
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  uint64_t *ValueAtIndex;
  uint64_t *v9;
  CFMutableArrayRef Mutable;
  __CFArray *v11;
  uint64_t v12;
  const void *v13;
  uint64_t v15;

  if (*(_QWORD *)(a1 + 16))
    return FigSignalErrorAt();
  v3 = *(const __CFArray **)(*(_QWORD *)(a1 + 8) + 520);
  if (!v3)
    return 0;
  Count = CFArrayGetCount(v3);
  if (Count < 1)
    return 0;
  v6 = Count;
  v7 = 0;
  while (1)
  {
    ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*(_QWORD *)(a1 + 8) + 520), v7);
    if (*(_DWORD *)ValueAtIndex == 1684630887)
      break;
    if (v6 == ++v7)
      return 0;
  }
  v9 = ValueAtIndex;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
  if (!Mutable)
    return FigSignalErrorAt();
  v11 = Mutable;
  if (v9[1] < 1)
  {
LABEL_13:
    *a2 = v11;
    return 0;
  }
  v12 = 0;
  while (1)
  {
    v13 = *(const void **)(*(_QWORD *)(v9[3] + 8 * v12) + 32);
    if (!v13)
      break;
    CFArrayAppendValue(v11, v13);
    if (++v12 >= v9[1])
      goto LABEL_13;
  }
  v15 = FigSignalErrorAt();
  CFRelease(v11);
  return v15;
}

uint64_t IFFPictureCopyTileDimensionsDictionary(uint64_t a1, CFDictionaryRef *a2)
{
  uint64_t v4;
  uint64_t OutputDimensionsForItem;
  const __CFArray *v6;
  const void *ValueAtIndex;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  CFDictionaryRef DictionaryRepresentation;
  uint64_t v12;
  uint64_t v14;
  CFArrayRef theArray;
  CGSize v16;

  theArray = 0;
  v4 = *(_QWORD *)(a1 + 8);
  if (IFFItemIsPicture(v4))
  {
    OutputDimensionsForItem = IFFItemOutboundReferencesOfType(v4, &theArray);
    v6 = theArray;
    if ((_DWORD)OutputDimensionsForItem)
      goto LABEL_14;
    v14 = 0;
    if (CFArrayGetCount(theArray) < 1)
    {
      v10 = *(unsigned int **)(*(_QWORD *)(a1 + 8) + 80);
      if (!v10)
      {
LABEL_13:
        OutputDimensionsForItem = FigSignalErrorAt();
LABEL_14:
        v12 = OutputDimensionsForItem;
        if (!v6)
          return v12;
        goto LABEL_10;
      }
      v8 = *v10;
      v9 = v10[1];
    }
    else
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v6, 0);
      OutputDimensionsForItem = getOutputDimensionsForItem((uint64_t)ValueAtIndex, &v14);
      if ((_DWORD)OutputDimensionsForItem)
        goto LABEL_14;
      v8 = v14;
      v9 = HIDWORD(v14);
    }
    v16.width = (double)v8;
    v16.height = (double)v9;
    DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v16);
    if (DictionaryRepresentation)
    {
      v12 = 0;
      *a2 = DictionaryRepresentation;
      if (!v6)
        return v12;
LABEL_10:
      CFRelease(v6);
      return v12;
    }
    goto LABEL_13;
  }
  return FigSignalErrorAt();
}

uint64_t IFFItemIsPicture(uint64_t a1)
{
  int v1;
  uint64_t result;
  BOOL v3;
  int v4;

  v1 = *(_DWORD *)(a1 + 44);
  result = 1;
  if (v1 > 1635135536)
  {
    if (v1 <= 1768187245)
    {
      if (v1 > 1735551331)
      {
        if (v1 == 1735551332)
          return result;
        v4 = 1752589105;
      }
      else
      {
        if (v1 == 1635135537)
          return result;
        v4 = 1635148593;
      }
    }
    else if (v1 <= 1785750886)
    {
      if (v1 == 1768187246)
        return result;
      v4 = 1768912492;
    }
    else
    {
      if (v1 == 1785750887 || v1 == 1936484717)
        return result;
      v4 = 1953325424;
    }
LABEL_32:
    if (v1 == v4)
      return result;
    return 0;
  }
  if (v1 > 1634743415)
  {
    v3 = (v1 - 1634755432) > 0xB || ((1 << (v1 - 104)) & 0x8C1) == 0;
    if (!v3 || (v1 - 1634759272) <= 6 && ((1 << (v1 - 104)) & 0x51) != 0)
      return result;
    v4 = 1634743416;
    goto LABEL_32;
  }
  if (v1 != 1634742376 && v1 != 1634742888 && v1 != 1634743400)
    return 0;
  return result;
}

uint64_t IFFItemOutboundReferencesOfType(uint64_t a1, CFMutableArrayRef *a2)
{
  const __CFAllocator *v4;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  _DWORD *ValueAtIndex;
  _QWORD *v11;
  const __CFArray *v12;
  const __CFArray *v13;
  uint64_t v15;
  CFRange v16;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
  if (Mutable)
  {
    v6 = Mutable;
    Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 520));
    if (Count < 1)
    {
LABEL_8:
      *a2 = v6;
      return 0;
    }
    v8 = Count;
    v9 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 520), v9);
      if (*ValueAtIndex == 1684630887)
      {
        v11 = ValueAtIndex;
        v12 = CFArrayCreate(v4, *((const void ***)ValueAtIndex + 3), *((_QWORD *)ValueAtIndex + 1), 0);
        if (!v12)
        {
          v15 = FigSignalErrorAt();
          CFRelease(v6);
          return v15;
        }
        v13 = v12;
        v16.length = v11[1];
        v16.location = 0;
        CFArrayAppendArray(v6, v12, v16);
        CFRelease(v13);
      }
      if (v8 == ++v9)
        goto LABEL_8;
    }
  }
  return FigSignalErrorAt();
}

uint64_t getOutputDimensionsForItem(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  _OWORD v6[2];
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if (*(_BYTE *)(a1 + 256))
  {
    v4 = *(_QWORD *)(a1 + 260);
LABEL_6:
    result = 0;
    *a2 = v4;
    return result;
  }
  v10 = 0;
  v8 = 0u;
  v9 = 0u;
  v7 = 0;
  result = IFFItemPropertyGetOrderedTransformPropertiesForItem(a1, &v10, &v8, (unsigned int *)&v7 + 1, (int *)&v7);
  if (!(_DWORD)result)
  {
    v6[0] = v8;
    v6[1] = v9;
    result = IFFItemPropertyApplyPropertiesToDimensions(v10, v6, SHIDWORD(v7), (int *)&v10);
    if (!(_DWORD)result)
    {
      v4 = v10;
      *(_QWORD *)(a1 + 260) = v10;
      *(_BYTE *)(a1 + 256) = 1;
      goto LABEL_6;
    }
  }
  return result;
}

uint64_t IFFPictureCopyTileGridDimensionsDictionary(uint64_t a1, CFDictionaryRef *a2)
{
  uint64_t v3;
  double v4;
  double v5;
  CFDictionaryRef DictionaryRepresentation;

  v3 = *(_QWORD *)(a1 + 8);
  if (!IFFItemIsPicture(v3))
    return FigSignalErrorAt();
  v4 = 1.0;
  v5 = 1.0;
  if (*(_DWORD *)(v3 + 44) == 1735551332)
  {
    if (!*(_BYTE *)(v3 + 272))
      return FigSignalErrorAt();
    LOWORD(v5) = *(_WORD *)(v3 + 290);
    v5 = (double)*(unint64_t *)&v5;
    LOWORD(v4) = *(_WORD *)(v3 + 288);
    v4 = (double)*(unint64_t *)&v4;
  }
  DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(*(CGSize *)&v5);
  if (DictionaryRepresentation)
  {
    *a2 = DictionaryRepresentation;
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t IFFPictureCopyCleanApertureDictionary(uint64_t a1, CFDictionaryRef *a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(v3 + 152))
    return createCleanApertureExtensionDictFromIFFItem((const __CFAllocator *)*MEMORY[0x1E0C9AE00], v3, a2);
  else
    return 4294954513;
}

uint64_t createCleanApertureExtensionDictFromIFFItem(const __CFAllocator *a1, uint64_t a2, CFDictionaryRef *a3)
{
  uint64_t result;
  _OWORD v6[2];
  __int128 v7;
  __int128 v8;

  v7 = 0u;
  v8 = 0u;
  result = IFFItemPropertyGetOrderedTransformPropertiesForItem(a2, 0, &v7, 0, 0);
  if (!(_DWORD)result)
  {
    v6[0] = v7;
    v6[1] = v8;
    return createCleanApertureExtensionDictFromProperty(a1, (char *)v6, a3);
  }
  return result;
}

uint64_t IFFPictureCopyPixelAspectRatioDictionary(uint64_t a1, CFDictionaryRef *a2)
{
  const __CFAllocator *v4;

  if (!*(_QWORD *)(*(_QWORD *)(a1 + 8) + 88))
    return 4294954513;
  v4 = CFGetAllocator(*(CFTypeRef *)a1);
  return createPixelAspectRatioExtensionDictFromIFFItemProperty(v4, *(char **)(*(_QWORD *)(a1 + 8) + 88), a2);
}

uint64_t createPixelAspectRatioExtensionDictFromIFFItemProperty(const __CFAllocator *a1, char *valuePtr, CFDictionaryRef *a3)
{
  const __CFAllocator *v6;
  CFNumberRef v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  void *v11;
  uint64_t v13;
  void *values[2];
  void *keys[3];

  keys[2] = *(void **)MEMORY[0x1E0C80C00];
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, valuePtr);
  if (!v7)
    return FigSignalErrorAt();
  v8 = v7;
  v9 = CFNumberCreate(v6, kCFNumberSInt32Type, valuePtr + 4);
  if (v9)
  {
    v10 = v9;
    v11 = (void *)*MEMORY[0x1E0CA8E70];
    keys[0] = *(void **)MEMORY[0x1E0CA8E60];
    keys[1] = v11;
    values[0] = v8;
    values[1] = v9;
    *a3 = CFDictionaryCreate(a1, (const void **)keys, (const void **)values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFRelease(v8);
    CFRelease(v10);
    return 0;
  }
  else
  {
    v13 = FigSignalErrorAt();
    CFRelease(v8);
    return v13;
  }
}

uint64_t IFFPictureCopyPixelInformationArray(uint64_t a1, __CFArray **a2)
{
  const __CFAllocator *v4;
  unsigned __int8 *v5;
  CFMutableArrayRef Mutable;
  __CFArray *v7;
  uint64_t v8;
  const __CFAllocator *v9;
  CFNumberRef v10;
  CFNumberRef v11;
  uint64_t result;
  uint64_t v13;

  if (!*(_QWORD *)(*(_QWORD *)(a1 + 8) + 96))
    return 4294954513;
  v4 = CFGetAllocator(*(CFTypeRef *)a1);
  v5 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 8) + 96);
  Mutable = CFArrayCreateMutable(v4, 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return FigSignalErrorAt();
  v7 = Mutable;
  if (*v5)
  {
    v8 = 0;
    v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    while (1)
    {
      v10 = CFNumberCreate(v9, kCFNumberSInt8Type, (const void *)(*((_QWORD *)v5 + 1) + v8));
      if (!v10)
        break;
      v11 = v10;
      CFArrayAppendValue(v7, v10);
      CFRelease(v11);
      if (++v8 >= (unint64_t)*v5)
        goto LABEL_7;
    }
    v13 = FigSignalErrorAt();
    CFRelease(v7);
    return v13;
  }
  else
  {
LABEL_7:
    result = 0;
    *a2 = v7;
  }
  return result;
}

uint64_t IFFPictureCopyRotationDegreesCCW(uint64_t a1, CFNumberRef *a2)
{
  uint64_t v2;
  uint64_t result;
  CFNumberRef v5;
  CFNumberRef v6;
  unsigned int valuePtr;

  v2 = *(_QWORD *)(a1 + 8);
  if (!*(_QWORD *)(v2 + 160))
    return 4294954513;
  valuePtr = 0;
  result = IFFItemPropertyGetOrderedTransformPropertiesForItem(v2, 0, 0, &valuePtr, 0);
  if (!(_DWORD)result)
  {
    v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
    if (v5)
    {
      v6 = v5;
      result = 0;
      *a2 = v6;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t IFFPictureCopyMirroringDirection(uint64_t a1, CFNumberRef *a2)
{
  uint64_t v2;
  uint64_t result;
  CFNumberRef v5;
  CFNumberRef v6;
  int valuePtr;

  v2 = *(_QWORD *)(a1 + 8);
  if (!*(_QWORD *)(v2 + 168))
    return 4294954513;
  valuePtr = 0;
  result = IFFItemPropertyGetOrderedTransformPropertiesForItem(v2, 0, 0, 0, &valuePtr);
  if (!(_DWORD)result)
  {
    v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
    if (v5)
    {
      v6 = v5;
      result = 0;
      *a2 = v6;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t IFFPictureCopyLayerSelector(uint64_t a1, CFNumberRef *a2)
{
  unsigned __int16 *v2;
  CFNumberRef v4;
  CFNumberRef v5;
  uint64_t result;
  int valuePtr;

  v2 = *(unsigned __int16 **)(*(_QWORD *)(a1 + 8) + 232);
  if (!v2)
    return 4294954513;
  valuePtr = *v2;
  v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  if (!v4)
    return FigSignalErrorAt();
  v5 = v4;
  result = 0;
  *a2 = v5;
  return result;
}

uint64_t IFFPictureCopyOperatingPointSelector(uint64_t a1, CFNumberRef *a2)
{
  unsigned __int8 *v2;
  CFNumberRef v4;
  CFNumberRef v5;
  uint64_t result;
  int valuePtr;

  v2 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 8) + 240);
  if (!v2)
    return 4294954513;
  valuePtr = *v2;
  v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  if (!v4)
    return FigSignalErrorAt();
  v5 = v4;
  result = 0;
  *a2 = v5;
  return result;
}

uint64_t IFFPictureCopyLayerSizes(uint64_t a1, CFMutableArrayRef *a2)
{
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v4;
  uint64_t v5;
  uint64_t appended;
  uint64_t v7;

  if (!*(_QWORD *)(*(_QWORD *)(a1 + 8) + 248))
    return 4294954513;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 3, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v4 = Mutable;
    v5 = 0;
    while (1)
    {
      appended = FigCFArrayAppendInt32();
      if ((_DWORD)appended)
        break;
      v5 += 4;
      if (v5 == 12)
      {
        v7 = 0;
        *a2 = v4;
        return v7;
      }
    }
    v7 = appended;
    CFRelease(v4);
    return v7;
  }
  return FigSignalErrorAt();
}

uint64_t IFFPictureCopyStereoMetadataProperties(uint64_t a1, __CFDictionary **a2)
{
  uint64_t v2;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  _QWORD *v7;
  uint64_t v8;
  __CFDictionary *v9;
  uint64_t v10;
  CFMutableArrayRef v11;
  CFMutableArrayRef v12;
  uint64_t appended;
  _DWORD *v14;
  CFMutableArrayRef v15;
  __CFString **v16;

  v2 = 4294949526;
  if (!a1 || !a2 || !*(_QWORD *)(a1 + 8))
    return v2;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v6 = Mutable;
    v7 = *(_QWORD **)(a1 + 8);
    if (v7[23])
    {
      v8 = FigCFDictionarySetInt32();
      if ((_DWORD)v8)
        goto LABEL_55;
      v7 = *(_QWORD **)(a1 + 8);
    }
    if (!v7[24])
      goto LABEL_11;
    v8 = FigCFDictionarySetInt32();
    if (!(_DWORD)v8)
    {
      v7 = *(_QWORD **)(a1 + 8);
LABEL_11:
      if (!v7[25])
      {
        if (!v7[26])
        {
          v9 = 0;
          goto LABEL_42;
        }
        goto LABEL_32;
      }
      v9 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v9)
      {
        v10 = FigCFDictionarySetInt32();
        if ((_DWORD)v10)
        {
LABEL_51:
          v2 = v10;
LABEL_52:
          v12 = 0;
          goto LABEL_53;
        }
        v11 = CFArrayCreateMutable(0, 3, MEMORY[0x1E0C9B378]);
        if (v11)
        {
          v12 = v11;
          appended = FigCFArrayAppendInt32();
          if ((_DWORD)appended)
            goto LABEL_49;
          appended = FigCFArrayAppendInt32();
          if ((_DWORD)appended)
            goto LABEL_49;
          appended = FigCFArrayAppendInt32();
          if ((_DWORD)appended)
            goto LABEL_49;
          CFDictionarySetValue(v9, CFSTR("Position"), v12);
          CFRelease(v12);
          v14 = *(_DWORD **)(*(_QWORD *)(a1 + 8) + 200);
          if (!v14[3] && !v14[4] && !v14[5])
          {
LABEL_29:
            CFDictionarySetValue(v6, CFSTR("CameraExtrinsics"), v9);
            if (!*(_QWORD *)(*(_QWORD *)(a1 + 8) + 208))
            {
LABEL_42:
              if (CFDictionaryGetCount(v6) >= 1)
              {
                v12 = 0;
                v2 = 0;
                *a2 = v6;
                if (!v9)
                  goto LABEL_45;
                goto LABEL_44;
              }
              v12 = 0;
              v2 = 4294954513;
LABEL_53:
              CFRelease(v6);
              if (!v9)
              {
LABEL_45:
                if (v12)
                  CFRelease(v12);
                return v2;
              }
LABEL_44:
              CFRelease(v9);
              goto LABEL_45;
            }
            CFRelease(v9);
LABEL_32:
            v9 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            if (v9)
            {
              v10 = FigCFDictionarySetInt();
              if (!(_DWORD)v10)
              {
                v10 = FigCFDictionarySetInt();
                if (!(_DWORD)v10)
                {
                  v10 = FigCFDictionarySetInt();
                  if (!(_DWORD)v10)
                  {
                    v10 = FigCFDictionarySetInt();
                    if (!(_DWORD)v10)
                    {
                      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 208) + 20)
                        || (v10 = FigCFDictionarySetInt(), !(_DWORD)v10)
                        && (v10 = FigCFDictionarySetInt(), !(_DWORD)v10)
                        && (v10 = FigCFDictionarySetInt(), !(_DWORD)v10))
                      {
                        CFDictionarySetValue(v6, CFSTR("CameraIntrinsics"), v9);
                        goto LABEL_42;
                      }
                    }
                  }
                }
              }
              goto LABEL_51;
            }
            goto LABEL_50;
          }
          v15 = CFArrayCreateMutable(0, 3, MEMORY[0x1E0C9B378]);
          if (v15)
          {
            v12 = v15;
            appended = FigCFArrayAppendInt32();
            if (!(_DWORD)appended)
            {
              appended = FigCFArrayAppendInt32();
              if (!(_DWORD)appended)
              {
                appended = FigCFArrayAppendInt32();
                if (!(_DWORD)appended)
                {
                  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 200) + 24))
                    v16 = kFigCameraExtrinsics_Rotation32Key;
                  else
                    v16 = kFigCameraExtrinsics_Rotation16Key;
                  CFDictionarySetValue(v9, *v16, v12);
                  CFRelease(v12);
                  goto LABEL_29;
                }
              }
            }
LABEL_49:
            v2 = appended;
            goto LABEL_53;
          }
        }
      }
LABEL_50:
      v10 = FigSignalErrorAt();
      goto LABEL_51;
    }
LABEL_55:
    v2 = v8;
    v9 = 0;
    goto LABEL_52;
  }
  return FigSignalErrorAt();
}

const void *IFFPictureSetStereoMetadataProperties(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4;
  uint64_t v5;
  const void *Value;
  const void *result;
  const void *v8;
  const void *v9;
  const void *v10;

  if (!a1)
    return (const void *)FigSignalErrorAt();
  if (!cf)
    return (const void *)FigSignalErrorAt();
  v4 = CFGetTypeID(cf);
  if (v4 != CFDictionaryGetTypeID())
    return (const void *)FigSignalErrorAt();
  v5 = *(_QWORD *)(a1 + 8);
  Value = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("HorizontalFOV"));
  if (!Value
    || (result = (const void *)_setStereoMetadataSingleIntegerHelper(*(CFArrayRef **)a1, v5, 0xFu, Value),
        !(_DWORD)result))
  {
    v8 = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("Baseline"));
    if (!v8
      || (result = (const void *)_setStereoMetadataSingleIntegerHelper(*(CFArrayRef **)a1, v5, 0x10u, v8),
          !(_DWORD)result))
    {
      v9 = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("DisparityAdjustment"));
      if (!v9
        || (result = (const void *)_setStereoMetadataSingleIntegerHelper(*(CFArrayRef **)a1, v5, 0x13u, v9),
            !(_DWORD)result))
      {
        v10 = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("CameraExtrinsics"));
        if (!v10
          || (result = (const void *)_setStereoMetadataIntrinsicsExtrinsicsHelper((CFArrayRef **)a1, v5, 17, v10),
              !(_DWORD)result))
        {
          result = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("CameraIntrinsics"));
          if (result)
            return (const void *)_setStereoMetadataIntrinsicsExtrinsicsHelper((CFArrayRef **)a1, v5, 18, result);
        }
      }
    }
  }
  return result;
}

uint64_t _setStereoMetadataSingleIntegerHelper(CFArrayRef *a1, uint64_t a2, unsigned int a3, const void *a4)
{
  uint64_t result;
  CFTypeID v9;
  unint64_t SInt64;
  int v11;
  CFArrayRef **v12;
  _QWORD v13[5];
  unsigned int v14;
  CFArrayRef **v15;
  uint64_t v16;

  v16 = 0;
  if (!IFFInformationGetItemPropertyByType(a2, a3, &v16, 0, 0))
    return FigSignalErrorAt();
  result = 4294949526;
  if (a3 <= 0x13 && ((1 << a3) & 0x98000) != 0)
  {
    v9 = CFGetTypeID(a4);
    if (v9 != CFNumberGetTypeID())
      return FigSignalErrorAt();
    SInt64 = FigCFNumberGetSInt64();
    v11 = SInt64;
    if (a3 == 19)
    {
      if (SInt64 != (int)SInt64)
        return FigSignalErrorAt();
    }
    else if (HIDWORD(SInt64))
    {
      return FigSignalErrorAt();
    }
    v15 = 0;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 0x40000000;
    v13[2] = ___setStereoMetadataSingleIntegerHelper_block_invoke;
    v13[3] = &__block_descriptor_tmp_11_6;
    v14 = a3;
    v13[4] = SInt64;
    if (_getSharedPropertyOfTypeWithComparator((uint64_t)a1, a3, &v15, (uint64_t)v13))
    {
      result = IFFInformationReserveSharedItemProperty(a1, a3, &v15, 0);
      if ((_DWORD)result)
        return result;
      if (a3 == 16 || a3 == 15)
      {
        v12 = v15;
LABEL_16:
        *((_DWORD *)v12 + 10) = v11;
        return IFFInformationAssignSharedItemPropertyByIndex((uint64_t)*v12, (CFIndex)v12[2], 0, *(_DWORD *)(a2 + 40));
      }
      v12 = v15;
      if (a3 == 19)
        goto LABEL_16;
    }
    else
    {
      v12 = v15;
    }
    return IFFInformationAssignSharedItemPropertyByIndex((uint64_t)*v12, (CFIndex)v12[2], 0, *(_DWORD *)(a2 + 40));
  }
  return result;
}

uint64_t _setStereoMetadataIntrinsicsExtrinsicsHelper(CFArrayRef **a1, uint64_t a2, int a3, const void *a4)
{
  CFTypeID v8;
  const __CFArray *Value;
  const __CFArray *v10;
  CFTypeID v11;
  uint64_t result;
  const void *v13;
  const void *v14;
  uint64_t v15;
  int v16;
  int v17;
  int SizeLimitedInt32IfPresent;
  int v19;
  int v20;
  int v21;
  int v22;
  CFArrayRef **v23;
  char v24;
  int v25;
  char v26;
  __int16 v27;
  int v28;
  _QWORD v29[4];
  int v30;
  __int128 v31;
  __int128 v32;
  int v33;
  __int128 v34;
  uint64_t v35;
  CFArrayRef **v36;
  char v37;
  char v38;
  char v39;
  __int128 v40;
  __int128 v41;
  int v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;

  v45 = 0;
  if (!IFFInformationGetItemPropertyByType(a2, a3, &v45, 0, 0))
    return FigSignalErrorAt();
  if ((a3 - 19) < 0xFFFFFFFE)
    return 4294949526;
  v8 = CFGetTypeID(a4);
  if (v8 != CFDictionaryGetTypeID())
    return FigSignalErrorAt();
  v43 = 0uLL;
  v44 = 0;
  v40 = 0u;
  v41 = 0u;
  v42 = 0;
  if (a3 == 17)
  {
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a4, CFSTR("Position"));
    if (Value)
    {
      v10 = Value;
      v11 = CFGetTypeID(Value);
      if (v11 == CFArrayGetTypeID() && CFArrayGetCount(v10) == 3)
      {
        result = _cfArrayGetSizeLimitedInt32IfPresent((uint64_t)v10, 0, 0, &v40);
        if ((_DWORD)result)
          return result;
        result = _cfArrayGetSizeLimitedInt32IfPresent((uint64_t)v10, 1, 0, (_DWORD *)&v40 + 1);
        if ((_DWORD)result)
          return result;
        result = _cfArrayGetSizeLimitedInt32IfPresent((uint64_t)v10, 2, 0, (_DWORD *)&v40 + 2);
        if ((_DWORD)result)
          return result;
        v13 = CFDictionaryGetValue((CFDictionaryRef)a4, CFSTR("Rotation32"));
        v14 = CFDictionaryGetValue((CFDictionaryRef)a4, CFSTR("Rotation16"));
        v15 = (uint64_t)v14;
        if (!v13)
        {
          if (v14)
          {
            result = _cfArrayGetSizeLimitedInt32IfPresent((uint64_t)v14, 0, 1, (_DWORD *)((unint64_t)&v40 | 0xC));
            if ((_DWORD)result)
              return result;
            result = _cfArrayGetSizeLimitedInt32IfPresent(v15, 1, 1, &v41);
            if ((_DWORD)result)
              return result;
            result = _cfArrayGetSizeLimitedInt32IfPresent(v15, 2, 1, (_DWORD *)&v41 + 1);
            if ((_DWORD)result)
              return result;
            v16 = 0;
            v17 = 0;
            LOBYTE(v15) = 0;
            BYTE8(v41) = 0;
          }
          else
          {
            v16 = 0;
            v17 = 0;
          }
          goto LABEL_36;
        }
        if (!v14)
        {
          result = _cfArrayGetSizeLimitedInt32IfPresent((uint64_t)v13, 0, 0, (_DWORD *)((unint64_t)&v40 | 0xC));
          if ((_DWORD)result)
            return result;
          result = _cfArrayGetSizeLimitedInt32IfPresent((uint64_t)v13, 1, 0, &v41);
          if ((_DWORD)result)
            return result;
          result = _cfArrayGetSizeLimitedInt32IfPresent((uint64_t)v13, 2, 0, (_DWORD *)&v41 + 1);
          if ((_DWORD)result)
            return result;
          v16 = 0;
          v17 = 0;
          LOBYTE(v15) = 0;
          BYTE8(v41) = 1;
          goto LABEL_36;
        }
      }
    }
    return FigSignalErrorAt();
  }
  v39 = 0;
  LODWORD(v45) = 0;
  SizeLimitedInt32IfPresent = _cfDictionaryGetSizeLimitedInt32IfPresent((uint64_t)a4, (uint64_t)CFSTR("DenominatorBits"), &v45, &v39);
  if (!v39)
    return FigSignalErrorAt();
  if (SizeLimitedInt32IfPresent)
    return FigSignalErrorAt();
  if (v45 > 0x3F)
    return FigSignalErrorAt();
  BYTE5(v44) = v45;
  v19 = _cfDictionaryGetSizeLimitedInt32IfPresent((uint64_t)a4, (uint64_t)CFSTR("FocalLengthX"), &v43, &v39);
  if (!v39)
    return FigSignalErrorAt();
  if (v19)
    return FigSignalErrorAt();
  v20 = _cfDictionaryGetSizeLimitedInt32IfPresent((uint64_t)a4, (uint64_t)CFSTR("PrincipalPointX"), (_DWORD *)&v43 + 2, &v39);
  if (!v39)
    return FigSignalErrorAt();
  if (v20)
    return FigSignalErrorAt();
  v21 = _cfDictionaryGetSizeLimitedInt32IfPresent((uint64_t)a4, (uint64_t)CFSTR("PrincipalPointY"), (_DWORD *)&v43 + 3, &v39);
  if (!v39 || v21)
    return FigSignalErrorAt();
  v37 = 0;
  result = _cfDictionaryGetSizeLimitedInt32IfPresent((uint64_t)a4, (uint64_t)CFSTR("FocalLengthY"), (_DWORD *)&v43 + 1, &v38);
  if ((_DWORD)result)
    return result;
  result = _cfDictionaryGetSizeLimitedInt32IfPresent((uint64_t)a4, (uint64_t)CFSTR("Skew"), &v44, &v37);
  if ((_DWORD)result)
    return result;
  v16 = v44;
  v17 = DWORD1(v43);
  if (v37 && (_DWORD)v44)
  {
    if (!DWORD1(v43))
      return FigSignalErrorAt();
    v22 = _cfDictionaryGetSizeLimitedInt32IfPresent((uint64_t)a4, (uint64_t)CFSTR("SkewDenominatorBits"), &v45, &v39);
    if (!v39 || v22 || v45 > 0x1F)
      return FigSignalErrorAt();
    BYTE6(v44) = v45;
  }
  LOBYTE(v15) = (v16 | v17) != 0;
  BYTE4(v44) = v15;
LABEL_36:
  v29[1] = 0x40000000;
  v31 = v40;
  v29[0] = MEMORY[0x1E0C809B0];
  v29[2] = ___setStereoMetadataIntrinsicsExtrinsicsHelper_block_invoke;
  v29[3] = &__block_descriptor_tmp_12_6;
  v30 = a3;
  v32 = v41;
  v33 = v42;
  v34 = v43;
  v35 = v44;
  v36 = 0;
  if (_getSharedPropertyOfTypeWithComparator((uint64_t)*a1, a3, &v36, (uint64_t)v29))
  {
    result = IFFInformationReserveSharedItemProperty(*a1, a3, &v36, 0);
    if ((_DWORD)result)
      return result;
    v23 = v36;
    if (a3 == 17)
    {
      v24 = BYTE8(v41);
      v25 = HIDWORD(v41);
      v26 = v42;
      *(_OWORD *)(v36 + 5) = v40;
      v23[7] = (CFArrayRef *)v41;
      *((_BYTE *)v23 + 64) = v24;
      *((_DWORD *)v23 + 17) = v25;
      *((_BYTE *)v23 + 72) = v26;
    }
    else
    {
      v27 = *(_WORD *)((char *)&v44 + 5);
      v28 = v43;
      *((_BYTE *)v36 + 60) = v15;
      *(_WORD *)((char *)v23 + 61) = v27;
      *((_DWORD *)v23 + 10) = v28;
      *((_DWORD *)v23 + 11) = v17;
      v23[6] = (CFArrayRef *)*((_QWORD *)&v43 + 1);
      *((_DWORD *)v23 + 14) = v16;
    }
  }
  else
  {
    v23 = v36;
  }
  return IFFInformationAssignSharedItemPropertyByIndex((uint64_t)*v23, (CFIndex)v23[2], 0, *(_DWORD *)(a2 + 40));
}

uint64_t _getSharedPropertyOfTypeWithComparator(uint64_t a1, int a2, _QWORD *a3, uint64_t a4)
{
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v10;
  CFIndex v11;
  uint64_t result;
  uint64_t v13;
  int v14;

  if (!a4)
    return 4294949526;
  v5 = *(const __CFArray **)(a1 + 104);
  if (!v5)
    return 4294954512;
  Count = CFArrayGetCount(v5);
  if (Count < 1)
    return 4294954512;
  v10 = Count;
  v11 = 0;
  while (1)
  {
    v14 = 0;
    v13 = 0;
    result = IFFInformationGetSharedItemPropertyAtIndex(a1, v11, &v14, &v13);
    if ((_DWORD)result)
      break;
    if (v14 == a2 && (*(unsigned int (**)(uint64_t, uint64_t))(a4 + 16))(a4, v13))
    {
      if (!v13)
        return 4294954512;
      result = 0;
      *a3 = v13;
      return result;
    }
    if (v10 == ++v11)
      return 4294954512;
  }
  return result;
}

uint64_t IFFPictureCopyAuxiliaryType(uint64_t a1, CFStringRef *a2, CFDataRef *a3)
{
  uint64_t v3;
  CFAllocatorRef *v6;
  CFStringRef v7;
  const UInt8 *v8;
  CFDataRef v9;
  uint64_t result;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 176);
  if (!v3)
    return 4294954513;
  v6 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (a2)
  {
    v7 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(const char **)v3, 0x8000100u);
    if (!v7)
      return FigSignalErrorAt();
    *a2 = v7;
  }
  if (!a3)
    return 0;
  v8 = *(const UInt8 **)(v3 + 8);
  if (v8)
  {
    v9 = CFDataCreate(*v6, v8, *(_QWORD *)(v3 + 16));
    if (!v9)
      return FigSignalErrorAt();
  }
  else
  {
    v9 = 0;
  }
  result = 0;
  *a3 = v9;
  return result;
}

uint64_t IFFPictureCopyFormatDescription(uint64_t a1, CMVideoFormatDescriptionRef *a2)
{
  return createFormatDescriptionForItem((const __CFAllocator *)*MEMORY[0x1E0C9AE00], *(_QWORD *)(a1 + 8), a2);
}

uint64_t createFormatDescriptionForItem(const __CFAllocator *a1, uint64_t a2, CMVideoFormatDescriptionRef *a3)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v7;
  uint64_t ColorExtensionsDictFromItem;
  uint64_t v9;
  const __CFArray *v10;
  const UInt8 *v11;
  CFDataRef v12;
  int v13;
  uint64_t v14;
  CFIndex v15;
  const void *ValueAtIndex;
  uint64_t v17;
  const UInt8 *v18;
  CFDataRef v19;
  const UInt8 *v20;
  unsigned int v21;
  CFDataRef v22;
  const UInt8 *v23;
  CFDataRef v24;
  char *v25;
  uint64_t PixelAspectRatioExtensionDictFromIFFItemProperty;
  CMVideoFormatDescriptionRef *v27;
  uint64_t v28;
  int32_t *v29;
  int v30;
  uint64_t HaveSameBaseProperties;
  CFIndex v32;
  const __CFData *v34;
  const __CFData *v35;
  BOOL v36;
  CFArrayRef theArray;
  CFTypeRef v38;
  CFTypeRef cf;
  void *value;

  cf = 0;
  value = 0;
  theArray = 0;
  v38 = 0;
  if (!*(_QWORD *)(a2 + 80)
    || (Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) == 0)
  {
    v9 = FigSignalErrorAt();
    v24 = 0;
    v22 = 0;
    v19 = 0;
    v12 = 0;
    goto LABEL_78;
  }
  v7 = Mutable;
  ColorExtensionsDictFromItem = createColorExtensionsDictFromItem(a1, a2, (__CFDictionary **)&v38);
  if ((_DWORD)ColorExtensionsDictFromItem)
  {
    v9 = ColorExtensionsDictFromItem;
    if ((_DWORD)ColorExtensionsDictFromItem != -12845)
      goto LABEL_76;
  }
  if (v38)
  {
    FigCFDictionaryAddEntriesToDictionaryWithRecursion();
LABEL_7:
    v10 = 0;
    goto LABEL_8;
  }
  v13 = *(_DWORD *)(a2 + 44);
  if (v13 != 1768187246 && v13 != 1735551332)
    goto LABEL_7;
  v14 = IFFItemOutboundReferencesOfType(a2, &theArray);
  if ((_DWORD)v14)
  {
    v9 = v14;
LABEL_76:
    v24 = 0;
    v22 = 0;
    v19 = 0;
    v12 = 0;
    goto LABEL_77;
  }
  v10 = theArray;
  if (CFArrayGetCount(theArray) >= 1)
  {
    v15 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v10, v15);
      v17 = createColorExtensionsDictFromItem(a1, (uint64_t)ValueAtIndex, (__CFDictionary **)&v38);
      if ((_DWORD)v17)
        break;
      if (v38)
      {
        FigCFDictionaryAddEntriesToDictionaryWithRecursion();
        goto LABEL_8;
      }
      if (++v15 >= CFArrayGetCount(v10))
        goto LABEL_8;
    }
    v9 = v17;
    v12 = 0;
    v19 = 0;
    v22 = 0;
    v24 = 0;
    goto LABEL_64;
  }
LABEL_8:
  v11 = *(const UInt8 **)(a2 + 120);
  if (v11)
  {
    v12 = CFDataCreate(a1, v11, 4);
    if (!v12)
    {
      v19 = 0;
      goto LABEL_71;
    }
    CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E0CA21A8], v12);
  }
  else
  {
    v12 = 0;
  }
  v18 = *(const UInt8 **)(a2 + 128);
  if (!v18)
  {
    v19 = 0;
    goto LABEL_25;
  }
  v19 = CFDataCreate(a1, v18, 24);
  if (!v19)
  {
LABEL_71:
    v22 = 0;
    goto LABEL_72;
  }
  CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E0CA2220], v19);
LABEL_25:
  v20 = *(const UInt8 **)(a2 + 136);
  if (!v20)
  {
    v22 = 0;
    goto LABEL_30;
  }
  v21 = *v20;
  if ((v21 & 0x3C) != 0)
  {
    v22 = CFDataCreate(a1, v20, ((((int)(v21 << 26) >> 31) & 0x18) + ((v21 >> 1) & 4) + ((v21 >> 2) & 4) + (v21 & 4)) | 1);
    if (v22)
    {
      CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E0CA21A0], v22);
LABEL_30:
      v23 = *(const UInt8 **)(a2 + 144);
      if (!v23)
      {
        v24 = 0;
LABEL_34:
        v25 = *(char **)(a2 + 88);
        if (v25)
        {
          PixelAspectRatioExtensionDictFromIFFItemProperty = createPixelAspectRatioExtensionDictFromIFFItemProperty(a1, v25, (CFDictionaryRef *)&value);
          if ((_DWORD)PixelAspectRatioExtensionDictFromIFFItemProperty)
          {
LABEL_69:
            v9 = PixelAspectRatioExtensionDictFromIFFItemProperty;
            goto LABEL_64;
          }
          CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E0CA8E68], value);
        }
        if (!*(_QWORD *)(a2 + 152))
          goto LABEL_40;
        PixelAspectRatioExtensionDictFromIFFItemProperty = createCleanApertureExtensionDictFromIFFItem(a1, a2, (CFDictionaryRef *)&cf);
        if (!(_DWORD)PixelAspectRatioExtensionDictFromIFFItemProperty)
        {
          CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E0CA8D50], cf);
LABEL_40:
          v34 = v19;
          v35 = v12;
          v27 = a3;
          if (*(_DWORD *)(a2 + 44) == 1785750887)
            CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E0CA8CE8], (const void *)*MEMORY[0x1E0CA8D00]);
          v28 = *(_QWORD *)(a2 + 72);
          v29 = *(int32_t **)(a2 + 80);
          if (v28)
            goto LABEL_58;
          v30 = *(_DWORD *)(a2 + 44);
          if (v30 != 1768187246 && v30 != 1735551332)
          {
LABEL_57:
            v28 = 0;
            goto LABEL_58;
          }
          v36 = 0;
          if (v30 == 1735551332)
          {
            HaveSameBaseProperties = _tilesHaveSameBaseProperties(a2, &v36);
            if ((_DWORD)HaveSameBaseProperties)
              goto LABEL_63;
            if (v36)
            {
LABEL_50:
              if (v10)
                goto LABEL_53;
              HaveSameBaseProperties = IFFItemOutboundReferencesOfType(a2, &theArray);
              if (!(_DWORD)HaveSameBaseProperties)
              {
                v10 = theArray;
LABEL_53:
                if (CFArrayGetCount(v10) >= 1)
                {
                  v32 = 0;
                  while (1)
                  {
                    v28 = *((_QWORD *)CFArrayGetValueAtIndex(v10, v32) + 9);
                    if (v28)
                      break;
                    if (++v32 >= CFArrayGetCount(v10))
                      goto LABEL_57;
                  }
LABEL_58:
                  if (CFDictionaryGetCount(v7))
                  {
                    if (v28)
                    {
LABEL_60:
                      HaveSameBaseProperties = FigVideoFormatDescriptionCreateWithSampleDescriptionExtensionAtom();
                      goto LABEL_63;
                    }
                  }
                  else
                  {
                    CFRelease(v7);
                    v7 = 0;
                    if (v28)
                      goto LABEL_60;
                  }
                  HaveSameBaseProperties = CMVideoFormatDescriptionCreate(a1, *(_DWORD *)(a2 + 44), *v29, v29[1], v7, v27);
                  goto LABEL_63;
                }
                goto LABEL_57;
              }
LABEL_63:
              v9 = HaveSameBaseProperties;
              v19 = v34;
              v12 = v35;
              goto LABEL_64;
            }
            v30 = *(_DWORD *)(a2 + 44);
          }
          if (v30 != 1768187246)
            goto LABEL_57;
          goto LABEL_50;
        }
        goto LABEL_69;
      }
      v24 = CFDataCreate(a1, v23, 8);
      if (v24)
      {
        CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E0CA2150], v24);
        goto LABEL_34;
      }
      goto LABEL_73;
    }
LABEL_72:
    v24 = 0;
LABEL_73:
    v9 = 4294954450;
    goto LABEL_64;
  }
  v22 = 0;
  v24 = 0;
  v9 = 4294954516;
LABEL_64:
  if (v7)
LABEL_77:
    CFRelease(v7);
LABEL_78:
  if (value)
    CFRelease(value);
  if (cf)
    CFRelease(cf);
  if (v38)
    CFRelease(v38);
  if (theArray)
    CFRelease(theArray);
  if (v12)
    CFRelease(v12);
  if (v19)
    CFRelease(v19);
  if (v22)
    CFRelease(v22);
  if (v24)
    CFRelease(v24);
  return v9;
}

uint64_t IFFPictureCopyItemType(uint64_t a1, CFNumberRef *a2)
{
  uint64_t v3;
  CFNumberRef v4;
  CFNumberRef v5;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  if (!IFFItemIsPicture(v3))
    return 4294954513;
  v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, (const void *)(v3 + 44));
  if (!v4)
    return FigSignalErrorAt();
  v5 = v4;
  result = 0;
  *a2 = v5;
  return result;
}

uint64_t IFFPictureCopyCodecType(uint64_t a1, CFNumberRef *a2)
{
  _DWORD *ValueAtIndex;
  int v4;
  uint64_t v6;
  const __CFArray *v7;
  CFNumberRef v8;
  uint64_t v9;
  CFArrayRef theArray;

  ValueAtIndex = *(_DWORD **)(a1 + 8);
  theArray = 0;
  v4 = ValueAtIndex[11];
  if (v4 != 1768912492 && v4 != 1735551332)
  {
    v7 = 0;
    goto LABEL_9;
  }
  v6 = IFFItemOutboundReferencesOfType((uint64_t)ValueAtIndex, &theArray);
  v7 = theArray;
  if (!(_DWORD)v6)
  {
    if (CFArrayGetCount(theArray) <= 0)
    {
LABEL_16:
      v6 = FigSignalErrorAt();
      goto LABEL_17;
    }
    ValueAtIndex = CFArrayGetValueAtIndex(v7, 0);
LABEL_9:
    if (!IFFItemIsPicture((uint64_t)ValueAtIndex))
    {
      v9 = 4294954513;
      goto LABEL_12;
    }
    v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, ValueAtIndex + 11);
    if (v8)
    {
      v9 = 0;
      *a2 = v8;
      goto LABEL_12;
    }
    goto LABEL_16;
  }
LABEL_17:
  v9 = v6;
LABEL_12:
  if (v7)
    CFRelease(v7);
  return v9;
}

const __CFArray *IFFPictureGetPictureThumbnailCount(uint64_t a1)
{
  const __CFArray *result;

  result = *(const __CFArray **)(a1 + 24);
  if (result)
    return (const __CFArray *)CFArrayGetCount(result);
  return result;
}

uint64_t IFFPictureGetPictureThumbnailByIndex(uint64_t a1, CFIndex a2, _QWORD *a3)
{
  const __CFArray *v4;
  const void *ValueAtIndex;
  uint64_t result;

  v4 = *(const __CFArray **)(a1 + 24);
  if (!v4 || CFArrayGetCount(v4) <= a2)
    return 4294950136;
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), a2);
  result = 0;
  *a3 = ValueAtIndex;
  return result;
}

const __CFArray *IFFPictureGetPictureAuxiliaryImageCount(uint64_t a1)
{
  const __CFArray *result;

  result = *(const __CFArray **)(a1 + 32);
  if (result)
    return (const __CFArray *)CFArrayGetCount(result);
  return result;
}

uint64_t IFFPictureGetPictureAuxiliaryImageByIndex(uint64_t a1, CFIndex a2, _QWORD *a3)
{
  const __CFArray *v4;
  const void *ValueAtIndex;
  uint64_t result;

  v4 = *(const __CFArray **)(a1 + 32);
  if (!v4 || CFArrayGetCount(v4) <= a2)
    return 4294950136;
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), a2);
  result = 0;
  *a3 = ValueAtIndex;
  return result;
}

const __CFArray *IFFPictureGetPictureExifCount(uint64_t a1)
{
  const __CFArray *result;

  result = *(const __CFArray **)(a1 + 48);
  if (result)
    return (const __CFArray *)CFArrayGetCount(result);
  return result;
}

const __CFArray *IFFPictureGetPictureXMPCount(uint64_t a1)
{
  const __CFArray *result;

  result = *(const __CFArray **)(a1 + 56);
  if (result)
    return (const __CFArray *)CFArrayGetCount(result);
  return result;
}

const __CFArray *IFFPictureGetPictureDebugMetadataCount(uint64_t a1)
{
  const __CFArray *result;

  result = *(const __CFArray **)(a1 + 64);
  if (result)
    return (const __CFArray *)CFArrayGetCount(result);
  return result;
}

const __CFArray *IFFPictureGetPictureCustomMetadataCount(uint64_t a1)
{
  const __CFArray *result;

  result = *(const __CFArray **)(a1 + 72);
  if (result)
    return (const __CFArray *)CFArrayGetCount(result);
  return result;
}

uint64_t IFFPictureCopyExifLocationByIndex(uint64_t a1, CFIndex a2, _DWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, _QWORD *a8, CFStringRef *a9)
{
  const __CFArray *v10;
  _BYTE *ValueAtIndex;
  _BYTE *v19;
  uint64_t result;

  v10 = *(const __CFArray **)(a1 + 48);
  if (!v10)
    return 4294954513;
  if (a2 < 0 || CFArrayGetCount(v10) <= a2)
    return FigSignalErrorAt();
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), a2);
  v19 = ValueAtIndex;
  if (a3)
  {
    if (!ValueAtIndex[272])
      return 4294954513;
  }
  result = copyLocationFromItem((uint64_t)ValueAtIndex, 4uLL, a4, a5, a6, a7, a8, a9);
  if (a3)
  {
    if (!(_DWORD)result)
      *a3 = *((_DWORD *)v19 + 72);
  }
  return result;
}

uint64_t copyLocationFromItem(uint64_t a1, unint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, CFStringRef *a8)
{
  uint64_t v8;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  BOOL v15;
  CFStringRef *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  const char *v28;
  CFStringRef v29;
  CFTypeRef v30;
  uint64_t v32;
  _QWORD *v33;

  v8 = 4294954516;
  if (!a3 || !a4 || !a5)
    return v8;
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_DWORD *)(a1 + 432);
  v14 = *(_QWORD *)(a1 + 440);
  if (*(_BYTE *)(v12 + 48))
    v15 = v13 == 1;
  else
    v15 = 0;
  if (v15)
  {
    v16 = a8;
    v17 = *(_QWORD *)(v12 + 56);
  }
  else
  {
    if (v13 >= 2)
      return FigSignalErrorAt();
    v16 = a8;
    v17 = 0;
  }
  v19 = *(_QWORD *)(a1 + 448);
  v18 = *(_QWORD *)(a1 + 456);
  v20 = malloc_type_malloc(8 * v19, 0x100004000313F17uLL);
  if (!v20)
    return FigSignalErrorAt();
  v21 = v20;
  v33 = a7;
  v22 = malloc_type_malloc(8 * v19, 0x100004000313F17uLL);
  if (v22)
  {
    v23 = v22;
    if (v19 < 1)
    {
      v24 = 0;
      if (!v16)
        goto LABEL_29;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t *)(v18 + 8);
      do
      {
        v26 = *v25;
        if (a2 >= *v25)
          v27 = *v25;
        else
          v27 = a2;
        if (v26 > a2)
        {
          v21[v24] = v17 + v14 + v27 + *(v25 - 1);
          *((_QWORD *)v22 + v24++) = v26 - v27;
        }
        a2 -= v27;
        v25 += 2;
        --v19;
      }
      while (v19);
      if (!v16)
        goto LABEL_29;
    }
    if (*(_DWORD *)(a1 + 44) == 1835625829)
    {
      if (!*(_BYTE *)(a1 + 464))
      {
        v8 = 4294954513;
LABEL_46:
        free(v21);
        free(v23);
        return v8;
      }
      v28 = *(const char **)(a1 + 480);
      if (v28)
      {
        v29 = CFStringCreateWithCString(0, v28, 0x8000100u);
        if (v29)
        {
LABEL_30:
          *a3 = v24;
          *a4 = v21;
          *a5 = v23;
          if (a6)
          {
            v30 = *(CFTypeRef *)(*(_QWORD *)(a1 + 24) + 16);
            if (v30)
              v30 = CFRetain(v30);
            *a6 = v30;
          }
          if (v33)
            *v33 = 0;
          if (v16)
          {
            v8 = 0;
            *v16 = v29;
          }
          else
          {
            if (v29)
              CFRelease(v29);
            return 0;
          }
          return v8;
        }
        v8 = FigSignalErrorAt();
        goto LABEL_46;
      }
    }
LABEL_29:
    v29 = 0;
    goto LABEL_30;
  }
  v32 = FigSignalErrorAt();
  free(v21);
  return v32;
}

uint64_t IFFPictureCopyXMPLocationByIndex(uint64_t a1, CFIndex a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, CFStringRef *a8)
{
  const __CFArray *v9;
  const void *ValueAtIndex;

  v9 = *(const __CFArray **)(a1 + 56);
  if (!v9)
    return 4294954513;
  if (a2 < 0 || CFArrayGetCount(v9) <= a2)
    return FigSignalErrorAt();
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), a2);
  return copyLocationFromItem((uint64_t)ValueAtIndex, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t IFFPictureCopyDebugMetadataLocationByIndex(uint64_t a1, CFIndex a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  const __CFArray *v8;
  const void *ValueAtIndex;

  v8 = *(const __CFArray **)(a1 + 64);
  if (!v8)
    return 4294954513;
  if (a2 < 0 || CFArrayGetCount(v8) <= a2)
    return FigSignalErrorAt();
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 64), a2);
  return copyLocationFromItem((uint64_t)ValueAtIndex, 0, a3, a4, a5, a6, a7, 0);
}

uint64_t IFFPictureCopyCustomMetadataLocationByIndex(uint64_t a1, CFIndex a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, CFStringRef *a8, CFStringRef *a9)
{
  const __CFArray *v10;
  _BYTE *ValueAtIndex;
  _BYTE *v19;
  uint64_t v20;
  CFAllocatorRef *v21;
  const char *v22;
  CFStringRef v23;
  const char *v24;
  CFStringRef v25;
  uint64_t v26;

  v10 = *(const __CFArray **)(a1 + 72);
  if (!v10)
    return 4294954513;
  if (a2 < 0)
    return FigSignalErrorAt();
  if (CFArrayGetCount(v10) <= a2)
    return FigSignalErrorAt();
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), a2);
  if (!ValueAtIndex[488])
    return FigSignalErrorAt();
  v19 = ValueAtIndex;
  v20 = copyLocationFromItem((uint64_t)ValueAtIndex, 0, a3, a4, a5, a6, a7, 0);
  if ((_DWORD)v20)
    return v20;
  v21 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (!a8)
  {
    v23 = 0;
    if (!a9)
      goto LABEL_30;
LABEL_16:
    if (*((_QWORD *)v19 + 63))
      v24 = (const char *)*((_QWORD *)v19 + 63);
    else
      v24 = "";
    if (*v24)
    {
      v25 = CFStringCreateWithCString(*v21, v24, 0x8000100u);
      if (!v25)
      {
        v26 = FigSignalErrorAt();
        if (!v23)
        {
LABEL_27:
          if (v25)
            CFRelease(v25);
          return v26;
        }
LABEL_26:
        CFRelease(v23);
        goto LABEL_27;
      }
      if (!a8)
      {
LABEL_23:
        v26 = 0;
        if (a9)
        {
          *a9 = v25;
          v25 = 0;
        }
        if (!v23)
          goto LABEL_27;
        goto LABEL_26;
      }
LABEL_22:
      *a8 = v23;
      v23 = 0;
      goto LABEL_23;
    }
LABEL_30:
    v25 = 0;
    if (!a8)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (*((_DWORD *)v19 + 11) != 1970432288)
    return 4294949526;
  if (!v19[488])
    return 4294954513;
  if (*((_QWORD *)v19 + 62))
    v22 = (const char *)*((_QWORD *)v19 + 62);
  else
    v22 = "";
  v23 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v22, 0x8000100u);
  if (v23)
  {
    if (!a9)
      goto LABEL_30;
    goto LABEL_16;
  }
  return FigSignalErrorAt();
}

uint64_t IFFPictureCopySampleLocation(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t v6;
  int v7;
  BOOL v8;
  int v9;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_DWORD *)(v6 + 44);
  if (v7 > 1768912491)
  {
    v8 = v7 == 1768912492;
    v9 = 1953325424;
  }
  else
  {
    v8 = v7 == 1735551332;
    v9 = 1768187246;
  }
  if (v8 || v7 == v9)
    return 4294954513;
  else
    return copyLocationFromItem(v6, 0, a2, a3, a4, a5, a6, 0);
}

uint64_t IFFInformationAddPicture(CFArrayRef *a1, int a2, const opaqueCMFormatDescription *a3, unsigned int a4, unsigned int a5, const __CFArray *a6, int a7, int a8, double a9, double a10, __int128 a11, __int128 a12, _DWORD *a13)
{
  return iffpcbAddPictureHelper(a1, a2, a3, 0, a4, a5, a6, a7, a9, a10, a8, 0, 0, 0, (const __CFArray *)a11, *((uint64_t *)&a11 + 1), (const __CFArray *)a12, *((uint64_t *)&a12 + 1), a13,
           0,
           0);
}

uint64_t iffpcbAddPictureHelper(CFArrayRef *a1, int a2, CMVideoFormatDescriptionRef videoDesc, int a4, unsigned int a5, unsigned int a6, const __CFArray *a7, int a8, double a9, double a10, int a11, const char *a12, const void *a13, size_t a14, const __CFArray *a15, uint64_t a16, const __CFArray *a17, uint64_t a18, _DWORD *a19, uint64_t a20,uint64_t a21)
{
  unint64_t Dimensions;
  int v29;
  unsigned int v30;
  unint64_t v31;
  int32_t v32;
  int32_t v33;
  char v34;
  const __CFData *Extension;
  const __CFData *v36;
  CFTypeID v37;
  const __CFString *v38;
  const __CFString *v39;
  const __CFString *v40;
  const __CFString *v41;
  int v42;
  const UInt8 *BytePtr;
  CFIndex Length;
  size_t v45;
  uint64_t v46;
  const __CFBoolean *v47;
  const __CFBoolean *v48;
  CFTypeID v49;
  const __CFDictionary *DescriptionWithPixelFormatType;
  char v51;
  unsigned int IntegerCodePointForString;
  unsigned int v53;
  unsigned int v54;
  CFArrayRef **v55;
  CFPropertyListRef v56;
  CFPropertyListRef v57;
  CFPropertyListRef v58;
  CFPropertyListRef v59;
  const void *v60;
  uint64_t v61;
  __CFArray *v62;
  CFMutableArrayRef Mutable;
  CFTypeID v64;
  uint64_t HDRMetadataProperty;
  CFTypeID v66;
  CFTypeID v67;
  CFTypeID v68;
  const __CFArray *v69;
  int v70;
  int v71;
  uint64_t PictureByID;
  uint64_t v73;
  uint64_t *v74;
  CFArrayRef *v75;
  uint64_t *v76;
  uint64_t ImageSpatialExtentsProperty;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  CFArrayRef **v96;
  uint64_t v97;
  double v98;
  uint64_t v99;
  uint64_t v100;
  const __CFArray *v101;
  CFTypeID v102;
  CFIndex v103;
  CFIndex v104;
  const __CFArray *v105;
  const __CFArray *v106;
  uint64_t v107;
  _BYTE *v108;
  const void *ValueAtIndex;
  CFTypeID v110;
  const __CFArray *v111;
  const __CFArray *v112;
  const __CFArray *v113;
  const __CFArray *v114;
  const __CFArray *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  CFIndex v121;
  double *v122;
  const __CFNumber *v123;
  const __CFArray *v124;
  BOOL v125;
  _BOOL4 v126;
  _QWORD *v127;
  uint64_t v128;
  int v129;
  _QWORD *v130;
  const __CFDictionary *v131;
  const __CFDictionary *v132;
  CFTypeID v133;
  CFArrayRef *v134;
  double v135;
  double v136;
  const void *v137;
  const void *v138;
  const void *v139;
  const void *v140;
  const void *v141;
  double v142;
  const void *v143;
  const void *v144;
  const void *v145;
  int v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t *v160;
  char v161;
  uint64_t *v162;
  uint64_t *v163;
  CFPropertyListRef v164;
  CFTypeID v165;
  uint64_t v166;
  int v167;
  size_t v168;
  size_t v169;
  char *v170;
  CFIndex v171;
  const __CFNumber *v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t *v175;
  char *v176;
  uint64_t v177;
  uint64_t v179;
  _BYTE *v180;
  __int16 v181;
  uint64_t v182;
  CFArrayRef theArray;
  int v184;
  int v185;
  uint64_t v186;
  double v187;
  int v188;
  uint64_t *v189;
  uint64_t *v190;
  unint64_t v191;
  uint64_t *v192;
  int v193;
  int v194;
  int v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  int32_t v199;
  unsigned int v200;
  char v202;
  void *v203;
  const __CFArray *v205;
  CFArrayRef v206;
  _QWORD v208[7];
  _QWORD v209[5];
  char v210;
  _QWORD v211[4];
  int v212;
  int v213;
  _QWORD v214[4];
  int v215;
  _QWORD v216[4];
  int v217;
  _QWORD v218[8];
  _QWORD v219[4];
  unsigned int v220;
  unsigned int v221;
  unsigned int v222;
  char v223;
  _QWORD v224[6];
  CFArrayRef **v225;
  int v226[2];
  _QWORD *v227;
  double v228;
  int v229;
  uint64_t v230;
  int v231;
  char v232;
  __int128 value;
  _BYTE v234[136];
  double v235;
  double v236;
  double v237;
  double v238;
  double v239;
  BOOL (*v240)(uint64_t, uint64_t);
  void *v241;
  char v242;
  double v243;
  uint64_t v244;
  uint64_t v245;
  CGRect v246;
  CGRect v247;

  v245 = *MEMORY[0x1E0C80C00];
  v229 = 0;
  Dimensions = (unint64_t)CMVideoFormatDescriptionGetDimensions(videoDesc);
  v228 = 0.0;
  v227 = 0;
  *(_QWORD *)v226 = 0;
  v225 = 0;
  if (a4 && (a5 & 1) != 0)
    return FigSignalErrorAt();
  if (a4 && !a21)
    return FigSignalErrorAt();
  if ((a5 & 1) != 0 && ((a5 >> 1) & 1) == 0)
    return FigSignalErrorAt();
  v29 = (a5 >> 2) & 1;
  v30 = a5 & 0x80;
  if (v29 + ((a5 >> 6) & 1) + (v30 >> 7) >= 2)
    return FigSignalErrorAt();
  v194 = (a5 >> 1) & 1;
  v31 = HIDWORD(Dimensions);
  if (!v29)
  {
    v191 = 0;
    v32 = 0;
    v33 = 0;
    goto LABEL_16;
  }
  if (a4 == 1)
    return FigSignalErrorAt();
  v33 = llround(a9);
  if (v33 < 1)
    return FigSignalErrorAt();
  v32 = llround(a10);
  if (v32 <= 0)
    return FigSignalErrorAt();
  if (v33 >= (int)Dimensions && v32 >= SHIDWORD(Dimensions))
  {
    v191 = 0;
LABEL_16:
    v34 = 1;
    if (a8)
      goto LABEL_17;
LABEL_22:
    v184 = 0;
    goto LABEL_23;
  }
  v34 = 0;
  v191 = ((v33 + (int)Dimensions - 1) / v33) | ((unint64_t)((v32
                                                                                              + HIDWORD(Dimensions)
                                                                                              - 1)
                                                                                             / v32) << 32);
  if (!a8)
    goto LABEL_22;
LABEL_17:
  if (a8 < 0)
    a8 += 360 * vcvtps_s32_f32((float)a8 / -360.0);
  v184 = a8 % 360;
  if ((unsigned __int16)(((20389 * (_WORD)v184 + 728) << 15) | ((unsigned __int16)(20389 * v184 + 728) >> 1)) >= 0x2D9u)
    return FigSignalErrorAt();
LABEL_23:
  v202 = v34;
  v185 = v32;
  v188 = v33;
  v196 = (a5 >> 6) & 1;
  v199 = Dimensions;
  v200 = a5;
  Extension = (const __CFData *)CMFormatDescriptionGetExtension(videoDesc, (CFStringRef)*MEMORY[0x1E0CA2210]);
  v36 = Extension;
  if (!Extension || (v37 = CFGetTypeID(Extension), v37 == CFDataGetTypeID()))
  {
    v195 = v31;
    v193 = a4;
    v38 = (const __CFString *)CMFormatDescriptionGetExtension(videoDesc, (CFStringRef)*MEMORY[0x1E0CA8D68]);
    v39 = (const __CFString *)CMFormatDescriptionGetExtension(videoDesc, (CFStringRef)*MEMORY[0x1E0CA8E98]);
    v40 = (const __CFString *)CMFormatDescriptionGetExtension(videoDesc, (CFStringRef)*MEMORY[0x1E0CA8EE8]);
    v41 = v40;
    if (v38 || v39 || v40)
    {
      if (v36)
        v42 = (v200 >> 5) & 1;
      else
        v42 = 1;
      if (!v36)
        goto LABEL_39;
    }
    else
    {
      v42 = 0;
      if (!v36)
        goto LABEL_39;
    }
    BytePtr = CFDataGetBytePtr(v36);
    Length = CFDataGetLength(v36);
    if (BytePtr)
    {
      v45 = Length;
      if (Length)
      {
        v224[0] = MEMORY[0x1E0C809B0];
        v224[1] = 0x40000000;
        v224[2] = __iffpcbAddPictureHelper_block_invoke;
        v224[3] = &__block_descriptor_tmp_13_2;
        v224[4] = Length;
        v224[5] = BytePtr;
        _getSharedPropertyOfTypeWithComparator((uint64_t)a1, 5, v226, (uint64_t)v224);
        if (!*(_QWORD *)v226)
        {
          v46 = IFFInformationReserveSharedItemProperty(a1, 5, (CFArrayRef ***)v226, 0);
          if ((_DWORD)v46)
            return v46;
          v46 = IFFInformationSetItemPropertyICCProfileData(*(uint64_t *)v226, BytePtr, v45);
          if ((_DWORD)v46)
            return v46;
        }
LABEL_39:
        if (v42)
        {
          v47 = (const __CFBoolean *)CMFormatDescriptionGetExtension(videoDesc, (CFStringRef)*MEMORY[0x1E0CA21D0]);
          if (v47 && (v48 = v47, v49 = CFGetTypeID(v47), v49 == CFBooleanGetTypeID()) && !CFBooleanGetValue(v48)
            || (CMFormatDescriptionGetMediaSubType(videoDesc),
                (DescriptionWithPixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType()) != 0)
            && (CFDictionaryGetValue(DescriptionWithPixelFormatType, (const void *)*MEMORY[0x1E0CA9120]),
                !FigCFEqual()))
          {
            v51 = 0;
          }
          else
          {
            v51 = 0x80;
          }
          IntegerCodePointForString = CVColorPrimariesGetIntegerCodePointForString(v38);
          v53 = CVYCbCrMatrixGetIntegerCodePointForString(v41);
          v54 = CVTransferFunctionGetIntegerCodePointForString(v39);
          if (v53 == 2)
            v53 = 2 * (FigCFEqual() == 0);
          if (IntegerCodePointForString >= 0x10000 || v53 >= 0x10000 || v54 >= 0x10000)
            return FigSignalErrorAt();
          v219[0] = MEMORY[0x1E0C809B0];
          v219[1] = 0x40000000;
          v219[2] = __iffpcbAddPictureHelper_block_invoke_2;
          v219[3] = &__block_descriptor_tmp_14_7;
          v220 = IntegerCodePointForString;
          v221 = v53;
          v222 = v54;
          v223 = v51;
          _getSharedPropertyOfTypeWithComparator((uint64_t)a1, 4, &v225, (uint64_t)v219);
          if (!v225)
          {
            v46 = IFFInformationReserveSharedItemProperty(a1, 4, &v225, 0);
            if (!(_DWORD)v46)
            {
              v55 = v225;
              *((_WORD *)v225 + 20) = IntegerCodePointForString;
              *((_WORD *)v55 + 21) = v54;
              *((_WORD *)v55 + 22) = v53;
              *((_BYTE *)v55 + 46) = v51;
              goto LABEL_55;
            }
            return v46;
          }
        }
LABEL_55:
        *(_QWORD *)&value = 0;
        v56 = CMFormatDescriptionGetExtension(videoDesc, (CFStringRef)*MEMORY[0x1E0CA21A8]);
        v57 = CMFormatDescriptionGetExtension(videoDesc, (CFStringRef)*MEMORY[0x1E0CA2220]);
        v58 = CMFormatDescriptionGetExtension(videoDesc, (CFStringRef)*MEMORY[0x1E0CA21A0]);
        v59 = CMFormatDescriptionGetExtension(videoDesc, (CFStringRef)*MEMORY[0x1E0CA2150]);
        v60 = v59;
        v61 = (uint64_t)a1;
        if (v56 || v57 || v58 || (v62 = 0, v59))
        {
          Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
          if (!Mutable)
            return 4294954450;
          v62 = Mutable;
          if (v56)
          {
            v64 = CFGetTypeID(v56);
            v125 = v64 == CFDataGetTypeID();
            v61 = (uint64_t)a1;
            if (v125)
            {
              HDRMetadataProperty = _getHDRMetadataProperty(6, (CFDataRef)v56, a1, (CFArrayRef ***)&value);
              if ((_DWORD)HDRMetadataProperty)
                goto LABEL_306;
              CFArrayAppendValue(v62, (const void *)value);
            }
          }
          if (v57)
          {
            v66 = CFGetTypeID(v57);
            if (v66 == CFDataGetTypeID())
            {
              HDRMetadataProperty = _getHDRMetadataProperty(7, (CFDataRef)v57, (CFArrayRef *)v61, (CFArrayRef ***)&value);
              if ((_DWORD)HDRMetadataProperty)
                goto LABEL_306;
              CFArrayAppendValue(v62, (const void *)value);
            }
          }
          if (v58)
          {
            v67 = CFGetTypeID(v58);
            if (v67 == CFDataGetTypeID())
            {
              HDRMetadataProperty = _getHDRMetadataProperty(8, (CFDataRef)v58, (CFArrayRef *)v61, (CFArrayRef ***)&value);
              if ((_DWORD)HDRMetadataProperty)
                goto LABEL_306;
              CFArrayAppendValue(v62, (const void *)value);
            }
          }
          if (v60)
          {
            v68 = CFGetTypeID(v60);
            if (v68 == CFDataGetTypeID())
            {
              HDRMetadataProperty = _getHDRMetadataProperty(9, (CFDataRef)v60, (CFArrayRef *)v61, (CFArrayRef ***)&value);
              if (!(_DWORD)HDRMetadataProperty)
              {
                CFArrayAppendValue(v62, (const void *)value);
                goto LABEL_77;
              }
LABEL_306:
              v87 = HDRMetadataProperty;
              goto LABEL_272;
            }
          }
        }
LABEL_77:
        if ((v202 & 1) != 0)
        {
          v69 = a15;
          if (!v196)
          {
            v70 = v193;
            v71 = v195;
            if (v30)
            {
              v96 = v225;
              v236 = 0.0;
              v237 = 0.0;
              v231 = 0;
              v235 = 0.0;
              if (!a17
                || (v192 = *(uint64_t **)v226, CFArrayGetCount(a17) != 2)
                || (v230 = 0, v73 = a20, !FigCFArrayGetInt32AtIndex())
                || (v190 = (uint64_t *)v96, !FigCFArrayGetInt32AtIndex()))
              {
                v87 = 4294949526;
                goto LABEL_270;
              }
              PictureByID = IFFInformationGetPictureByID(v61, SHIDWORD(v230), &v236);
              if ((_DWORD)PictureByID)
                goto LABEL_211;
              PictureByID = IFFInformationGetPictureByID(v61, v230, &v235);
              if ((_DWORD)PictureByID)
                goto LABEL_211;
              PictureByID = IFFInformationReserveItemWithType(v61, 1953325424, &v231, &v237);
              if ((_DWORD)PictureByID)
                goto LABEL_211;
              v98 = v236;
              v97 = *(_QWORD *)&v237;
              *(_DWORD *)(*(_QWORD *)&v237 + 64) = v193;
              *(_BYTE *)(v97 + 48) = v194;
              v244 = 0;
              v187 = v235;
              v99 = *(_QWORD *)(*(_QWORD *)&v235 + 8);
              v243 = *(double *)(*(_QWORD *)&v98 + 8);
              v244 = v99;
              PictureByID = IFFInformationAddItemReference(v61, v97, 1684630887, 2, (uint64_t *)&v243);
              if ((_DWORD)PictureByID)
                goto LABEL_211;
              PictureByID = IFFInformationReserveItemExtentTable(v61, v231, 1u, 0, 1uLL, 0, 0);
              if ((_DWORD)PictureByID)
                goto LABEL_211;
              v100 = *(_QWORD *)&v237;
              memset(v234, 0, 128);
              value = 0u;
              if (!a16
                || FigCFDictionaryGetInt16IfPresent() && (_WORD)value
                || !FigCFDictionaryGetBooleanIfPresent())
              {
                v87 = FigSignalErrorAt();
                v61 = (uint64_t)a1;
                v71 = v195;
              }
              else
              {
                v232 = 1;
                v61 = (uint64_t)a1;
                v71 = v195;
                if ((!FigCFDictionaryGetBooleanIfPresent() || v232)
                  && (v101 = (const __CFArray *)FigCFDictionaryGetValue()) != 0
                  && (v205 = v101, v102 = CFGetTypeID(v101), v102 == CFArrayGetTypeID())
                  && (v103 = CFArrayGetCount(v205), (v103 | 2) == 3))
                {
                  v104 = v103;
                  theArray = (CFArrayRef)v100;
                  BYTE4(value) = v103 == 3;
                  v105 = (const __CFArray *)FigCFDictionaryGetValue();
                  PictureByID = getRational32FromArray(v105, (uint64_t)&value + 8);
                  if ((_DWORD)PictureByID)
                    goto LABEL_211;
                  v106 = (const __CFArray *)FigCFDictionaryGetValue();
                  PictureByID = getRational32FromArray(v106, (uint64_t)v234);
                  if ((_DWORD)PictureByID)
                    goto LABEL_211;
                  v107 = 0;
                  v108 = &v234[40];
                  while (1)
                  {
                    ValueAtIndex = (const void *)FigCFArrayGetValueAtIndex();
                    if (!ValueAtIndex)
                      break;
                    v110 = CFGetTypeID(ValueAtIndex);
                    if (v110 != CFDictionaryGetTypeID())
                      break;
                    v111 = (const __CFArray *)FigCFDictionaryGetValue();
                    PictureByID = getRational32FromArray(v111, (uint64_t)(v108 - 16));
                    if ((_DWORD)PictureByID)
                      goto LABEL_211;
                    v112 = (const __CFArray *)FigCFDictionaryGetValue();
                    PictureByID = getRational32FromArray(v112, (uint64_t)(v108 - 32));
                    if ((_DWORD)PictureByID)
                      goto LABEL_211;
                    v113 = (const __CFArray *)FigCFDictionaryGetValue();
                    PictureByID = getRational32FromArray(v113, (uint64_t)(v108 - 24));
                    if ((_DWORD)PictureByID)
                      goto LABEL_211;
                    v114 = (const __CFArray *)FigCFDictionaryGetValue();
                    PictureByID = getRational32FromArray(v114, (uint64_t)(v108 - 8));
                    if ((_DWORD)PictureByID)
                      goto LABEL_211;
                    v115 = (const __CFArray *)FigCFDictionaryGetValue();
                    PictureByID = getRational32FromArray(v115, (uint64_t)v108);
                    if ((_DWORD)PictureByID)
                      goto LABEL_211;
                    ++v107;
                    v108 += 40;
                    if (v104 == v107)
                    {
                      v116 = IFFInformationSetItemBodyImageDerivationTonemap((uint64_t)theArray, (uint64_t)&value);
                      goto LABEL_158;
                    }
                  }
                  v116 = FigSignalErrorAt();
LABEL_158:
                  v87 = v116;
                  v73 = a20;
                  v70 = v193;
                  v71 = v195;
                  v69 = a15;
                  v61 = (uint64_t)a1;
                }
                else
                {
                  v87 = FigSignalErrorAt();
                }
              }
              if ((_DWORD)v87)
                goto LABEL_270;
              if (v192)
              {
                PictureByID = IFFInformationAssignSharedItemPropertyByIndex(*v192, v192[2], 1, *(_DWORD *)(*(_QWORD *)&v237 + 40));
                if ((_DWORD)PictureByID)
                  goto LABEL_211;
              }
              if (v190)
              {
                PictureByID = IFFInformationAssignSharedItemPropertyByIndex(*v190, v190[2], 1, *(_DWORD *)(*(_QWORD *)&v237 + 40));
                if ((_DWORD)PictureByID)
                  goto LABEL_211;
              }
              if (v62)
              {
                PictureByID = _assignSharedHDRMetadataPropertiesToItem(v62, *(uint64_t *)&v237);
                if ((_DWORD)PictureByID)
                  goto LABEL_211;
              }
              v179 = *(_QWORD *)(*(_QWORD *)&v187 + 8);
              if (!*(_QWORD *)(v179 + 112))
              {
                *(_QWORD *)&value = 0;
                v180 = *(_BYTE **)(v179 + 96);
                v181 = 2;
                if (v180)
                {
                  if (*v180 == 3)
                    v181 = 6;
                  else
                    v181 = 2;
                }
                v238 = MEMORY[0x1E0C809B0];
                *(_QWORD *)&v239 = 0x40000000;
                v240 = ___pcbAddImageTonemap_block_invoke;
                v241 = &__block_descriptor_tmp_25_4;
                v242 = v181;
                _getSharedPropertyOfTypeWithComparator((uint64_t)a1, 4, &value, (uint64_t)&v238);
                v182 = value;
                if (!(_QWORD)value)
                {
                  PictureByID = IFFInformationReserveSharedItemProperty(a1, 4, (CFArrayRef ***)&value, 0);
                  if ((_DWORD)PictureByID)
                    goto LABEL_211;
                  v182 = value;
                  *(_DWORD *)(value + 40) = 131074;
                  *(_WORD *)(v182 + 44) = v181;
                  *(_BYTE *)(v182 + 46) = 0x80;
                }
                PictureByID = IFFInformationAssignSharedItemPropertyByIndex(*(_QWORD *)v182, *(_QWORD *)(v182 + 16), 1, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&v187 + 8) + 40));
                if ((_DWORD)PictureByID)
                  goto LABEL_211;
                v61 = (uint64_t)a1;
                v71 = v195;
              }
              v228 = v237;
            }
            else
            {
              LODWORD(v243) = 0;
              if ((v200 & 0x100) != 0)
              {
                PictureByID = IFFInformationReserveItemWithType(v61, 1768187246, (int *)&v243, &v228);
                v73 = a20;
                if ((_DWORD)PictureByID)
                  goto LABEL_211;
                *(_QWORD *)&value = 0;
                PictureByID = IFFInformationGetPictureByID(v61, a18, &value);
                if ((_DWORD)PictureByID)
                  goto LABEL_211;
                v238 = *(double *)(value + 8);
                PictureByID = IFFInformationAddItemReference(v61, *(uint64_t *)&v228, 1684630887, 1, (uint64_t *)&v238);
                if ((_DWORD)PictureByID)
                  goto LABEL_211;
              }
              else
              {
                PictureByID = IFFInformationReserveItemWithType(v61, a2, (int *)&v243, &v228);
                v73 = a20;
                if ((_DWORD)PictureByID)
                  goto LABEL_211;
              }
              if (*(_QWORD *)v226)
              {
                PictureByID = IFFInformationAssignSharedItemPropertyByIndex(**(_QWORD **)v226, *(_QWORD *)(*(_QWORD *)v226 + 16), 1, *(_DWORD *)(*(_QWORD *)&v228 + 40));
                if ((_DWORD)PictureByID)
                  goto LABEL_211;
              }
              if (v225)
              {
                PictureByID = IFFInformationAssignSharedItemPropertyByIndex((uint64_t)*v225, (CFIndex)v225[2], 1, *(_DWORD *)(*(_QWORD *)&v228 + 40));
                if ((_DWORD)PictureByID)
                  goto LABEL_211;
              }
              if (v62)
              {
                PictureByID = _assignSharedHDRMetadataPropertiesToItem(v62, *(uint64_t *)&v228);
                if ((_DWORD)PictureByID)
                  goto LABEL_211;
              }
              v177 = *(_QWORD *)&v228;
              *(_DWORD *)(*(_QWORD *)&v228 + 64) = v193;
              *(_BYTE *)(v177 + 48) = v194;
            }
LABEL_180:
            v124 = *(const __CFArray **)(v61 + 128);
            PictureByID = IFFInformationReservePictureFromItemIfNeeded(*(uint64_t *)&v228, &v229, &v227);
            if ((_DWORD)PictureByID)
              goto LABEL_211;
            if (!v70)
            {
              v125 = v194 && *(_BYTE *)(v61 + 64) == 0;
              v126 = v125;
              if ((v200 & 1) != 0 || v126)
              {
                v127 = v227;
                v128 = *v227;
                *(_BYTE *)(v128 + 64) = 1;
                *(_DWORD *)(v128 + 68) = *(_DWORD *)(v127[1] + 40);
                *(_QWORD *)(v128 + 80) = v127;
              }
            }
            *(_QWORD *)&value = 0;
            PictureByID = _getImageSpatialExtentsProperty(v199, v71, (CFArrayRef *)v61, (CFArrayRef ***)&value);
            if ((_DWORD)PictureByID)
              goto LABEL_211;
            PictureByID = IFFInformationAssignSharedItemPropertyByIndex(*(_QWORD *)value, *(_QWORD *)(value + 16), 0, *(_DWORD *)(*(_QWORD *)&v228 + 40));
            if ((_DWORD)PictureByID)
              goto LABEL_211;
            v206 = v124;
            v129 = v70;
            v130 = (_QWORD *)v73;
            v131 = (const __CFDictionary *)CMFormatDescriptionGetExtension(videoDesc, (CFStringRef)*MEMORY[0x1E0CA8D50]);
            if (!v131)
              goto LABEL_212;
            v132 = v131;
            v133 = CFGetTypeID(v131);
            if (v133 != CFDictionaryGetTypeID())
              goto LABEL_212;
            v134 = (CFArrayRef *)v61;
            v135 = (double)v199;
            v136 = (double)v71;
            value = 0uLL;
            v238 = (double)v199;
            v239 = (double)v71;
            v137 = (const void *)*MEMORY[0x1E0CA22F8];
            if (CFDictionaryContainsKey(v132, (const void *)*MEMORY[0x1E0CA22F8])
              && (v138 = (const void *)*MEMORY[0x1E0CA22C8],
                  CFDictionaryContainsKey(v132, (const void *)*MEMORY[0x1E0CA22C8]))
              && (v139 = (const void *)*MEMORY[0x1E0CA22D8],
                  CFDictionaryContainsKey(v132, (const void *)*MEMORY[0x1E0CA22D8]))
              && (v140 = (const void *)*MEMORY[0x1E0CA22E8],
                  CFDictionaryContainsKey(v132, (const void *)*MEMORY[0x1E0CA22E8])))
            {
              v243 = 0.0;
              v236 = 0.0;
              v237 = 0.0;
              v235 = 0.0;
              v141 = CFDictionaryGetValue(v132, v137);
              v142 = 0.0;
              if (_floatFromRational((uint64_t)v141, &v243))
              {
                v143 = CFDictionaryGetValue(v132, v138);
                v61 = (uint64_t)v134;
                if (_floatFromRational((uint64_t)v143, &v237))
                {
                  v144 = CFDictionaryGetValue(v132, v139);
                  v69 = a15;
                  if (_floatFromRational((uint64_t)v144, &v236))
                  {
                    v145 = CFDictionaryGetValue(v132, v140);
                    v146 = _floatFromRational((uint64_t)v145, &v235);
                    v147 = (double)v71;
                    v148 = (double)v199;
                    v149 = 0.0;
                    if (v146)
                    {
                      v142 = v235;
                      v149 = v236;
                      v148 = v243;
                      v147 = v237;
                    }
                  }
                  else
                  {
                    v147 = (double)v71;
                    v148 = (double)v199;
                    v149 = 0.0;
                  }
                }
                else
                {
                  v147 = (double)v71;
                  v148 = (double)v199;
                  v149 = 0.0;
                  v69 = a15;
                }
LABEL_206:
                v150 = round(v149 + (v135 - v148) * 0.5);
                v151 = round(v142 + (v136 - v147) * 0.5);
                v152 = round(v148);
                v153 = round(v147);
                v247.origin.x = 0.0;
                v247.origin.y = 0.0;
                v246.origin.x = v150;
                v246.origin.y = v151;
                v246.size.width = v152;
                v246.size.height = v153;
                v247.size.width = (double)v199;
                v247.size.height = (double)v71;
                if (!CGRectEqualToRect(v246, v247))
                {
                  v154 = IFFrat32FromCGFloat(v152);
                  v155 = IFFrat32FromCGFloat(v153);
                  v156 = IFFrat32FromCGFloat(v152 * 0.5 + v150 - round(v135 * 0.5));
                  v157 = IFFrat32FromCGFloat(v153 * 0.5 + v151 - round(v136 * 0.5));
                  v158 = v61;
                  v159 = v157;
                  *(_QWORD *)&value = 0;
                  v218[0] = MEMORY[0x1E0C809B0];
                  v218[1] = 0x40000000;
                  v218[2] = __iffpcbAddPictureHelper_block_invoke_3;
                  v218[3] = &__block_descriptor_tmp_15_4;
                  v218[4] = v154;
                  v218[5] = v155;
                  v218[6] = v156;
                  v218[7] = v157;
                  _getSharedPropertyOfTypeWithComparator(v158, 10, &value, (uint64_t)v218);
                  v160 = (uint64_t *)value;
                  if (!(_QWORD)value)
                  {
                    PictureByID = IFFInformationReserveSharedItemProperty(v134, 10, (CFArrayRef ***)&value, 0);
                    if ((_DWORD)PictureByID)
                    {
LABEL_211:
                      v87 = PictureByID;
                      goto LABEL_270;
                    }
                    v160 = (uint64_t *)value;
                    *(_QWORD *)(value + 40) = v154;
                    v160[6] = v155;
                    v160[7] = v156;
                    v160[8] = v159;
                  }
                  PictureByID = IFFInformationAssignSharedItemPropertyByIndex(*v160, v160[2], 1, *(_DWORD *)(*(_QWORD *)&v228 + 40));
                  v69 = a15;
                  v61 = (uint64_t)v134;
                  if ((_DWORD)PictureByID)
                    goto LABEL_211;
                }
LABEL_212:
                v161 = v200;
                if ((v200 & 8) != 0)
                {
                  *(_QWORD *)&value = 0;
                  v216[0] = MEMORY[0x1E0C809B0];
                  v216[1] = 0x40000000;
                  v216[2] = __iffpcbAddPictureHelper_block_invoke_4;
                  v216[3] = &__block_descriptor_tmp_16_3;
                  v217 = v184;
                  _getSharedPropertyOfTypeWithComparator(v61, 11, &value, (uint64_t)v216);
                  v162 = (uint64_t *)value;
                  if (!(_QWORD)value)
                  {
                    PictureByID = IFFInformationReserveSharedItemProperty((CFArrayRef *)v61, 11, (CFArrayRef ***)&value, 0);
                    if ((_DWORD)PictureByID)
                      goto LABEL_211;
                    v162 = (uint64_t *)value;
                    *(_DWORD *)(value + 40) = v184;
                  }
                  PictureByID = IFFInformationAssignSharedItemPropertyByIndex(*v162, v162[2], 1, *(_DWORD *)(*(_QWORD *)&v228 + 40));
                  if ((_DWORD)PictureByID)
                    goto LABEL_211;
                  v161 = v200;
                }
                if ((v161 & 0x10) != 0)
                {
                  *(_QWORD *)&value = 0;
                  v214[0] = MEMORY[0x1E0C809B0];
                  v214[1] = 0x40000000;
                  v214[2] = __iffpcbAddPictureHelper_block_invoke_5;
                  v214[3] = &__block_descriptor_tmp_17_4;
                  v215 = a11;
                  _getSharedPropertyOfTypeWithComparator(v61, 12, &value, (uint64_t)v214);
                  v163 = (uint64_t *)value;
                  if (!(_QWORD)value)
                  {
                    PictureByID = IFFInformationReserveSharedItemProperty((CFArrayRef *)v61, 12, (CFArrayRef ***)&value, 0);
                    if ((_DWORD)PictureByID)
                      goto LABEL_211;
                    v163 = (uint64_t *)value;
                    *(_DWORD *)(value + 40) = a11;
                  }
                  PictureByID = IFFInformationAssignSharedItemPropertyByIndex(*v163, v163[2], 1, *(_DWORD *)(*(_QWORD *)&v228 + 40));
                  if ((_DWORD)PictureByID)
                    goto LABEL_211;
                }
                v164 = CMFormatDescriptionGetExtension(videoDesc, (CFStringRef)*MEMORY[0x1E0CA8E68]);
                if (v164)
                {
                  v165 = CFGetTypeID(v164);
                  if (v165 != CFDictionaryGetTypeID()
                    || (*(_QWORD *)&value = 0,
                        LODWORD(v238) = 0,
                        LODWORD(v243) = 0,
                        !FigCFDictionaryGetInt32IfPresent())
                    || !FigCFDictionaryGetInt32IfPresent())
                  {
                    PictureByID = FigSignalErrorAt();
                    goto LABEL_211;
                  }
                  v211[0] = MEMORY[0x1E0C809B0];
                  v211[1] = 0x40000000;
                  v211[2] = __iffpcbAddPictureHelper_block_invoke_6;
                  v211[3] = &__block_descriptor_tmp_18_7;
                  v212 = LODWORD(v238);
                  v213 = LODWORD(v243);
                  _getSharedPropertyOfTypeWithComparator(v61, 3, &value, (uint64_t)v211);
                  v166 = value;
                  if (!(_QWORD)value)
                  {
                    PictureByID = IFFInformationReserveSharedItemProperty((CFArrayRef *)v61, 3, (CFArrayRef ***)&value, 0);
                    if ((_DWORD)PictureByID)
                      goto LABEL_211;
                    v166 = value;
                    v167 = LODWORD(v243);
                    *(_DWORD *)(value + 40) = LODWORD(v238);
                    *(_DWORD *)(v166 + 44) = v167;
                  }
                  PictureByID = IFFInformationAssignSharedItemPropertyByIndex(*(_QWORD *)v166, *(_QWORD *)(v166 + 16), 1, *(_DWORD *)(*(_QWORD *)&v228 + 40));
                  if ((_DWORD)PictureByID)
                    goto LABEL_211;
                }
                if (v69)
                {
                  *(_QWORD *)&value = 0;
                  v168 = CFArrayGetCount(v69);
                  if (v168 - 256 < 0xFFFFFFFFFFFFFF01)
                  {
                    v170 = 0;
                  }
                  else
                  {
                    v169 = v168;
                    v170 = (char *)malloc_type_calloc(v168, 1uLL, 0x100004077774924uLL);
                    if (v170)
                    {
                      v171 = 0;
                      while (1)
                      {
                        v172 = (const __CFNumber *)CFArrayGetValueAtIndex(v69, v171);
                        if (!CFNumberGetValue(v172, kCFNumberSInt8Type, &v170[v171]))
                          break;
                        if (v169 == ++v171)
                        {
                          v209[0] = MEMORY[0x1E0C809B0];
                          v209[1] = 0x40000000;
                          v209[2] = __iffpcbAddPictureHelper_block_invoke_7;
                          v209[3] = &__block_descriptor_tmp_19_7;
                          v210 = v169;
                          v209[4] = v170;
                          _getSharedPropertyOfTypeWithComparator(v61, 14, &value, (uint64_t)v209);
                          v173 = (uint64_t *)value;
                          if (!(_QWORD)value)
                          {
                            v174 = IFFInformationReserveSharedItemProperty((CFArrayRef *)v61, 14, (CFArrayRef ***)&value, 0);
                            if ((_DWORD)v174)
                              goto LABEL_311;
                            v174 = IFFInformationSetItemPropertyPixelInformation(value, v169, v170);
                            if ((_DWORD)v174)
                              goto LABEL_311;
                            v173 = (uint64_t *)value;
                          }
                          v174 = IFFInformationAssignSharedItemPropertyByIndex(*v173, v173[2], 0, *(_DWORD *)(*(_QWORD *)&v228 + 40));
                          if (!(_DWORD)v174)
                            goto LABEL_244;
                          goto LABEL_311;
                        }
                      }
                    }
                  }
                  v174 = FigSignalErrorAt();
                  goto LABEL_311;
                }
                v170 = 0;
LABEL_244:
                if (v129 != 2)
                {
LABEL_253:
                  if (!v206)
                  {
                    *(_BYTE *)(v61 + 176) &= 1u;
                    *(_DWORD *)(v61 + 28) = 1885954932;
                  }
                  if (a19)
                    *a19 = v229;
                  v87 = 0;
                  if (v130)
                    *v130 = v227;
LABEL_271:
                  free(v170);
                  if (!v62)
                    return v87;
LABEL_272:
                  CFRelease(v62);
                  return v87;
                }
                *(_QWORD *)&value = 0;
                v208[0] = MEMORY[0x1E0C809B0];
                v208[1] = 0x40000000;
                v208[2] = __iffpcbAddPictureHelper_block_invoke_8;
                v208[3] = &__block_descriptor_tmp_20_4;
                v208[4] = a12;
                v208[5] = a14;
                v208[6] = a13;
                _getSharedPropertyOfTypeWithComparator(v61, 13, &value, (uint64_t)v208);
                v175 = (uint64_t *)value;
                if (!(_QWORD)value)
                {
                  v174 = IFFInformationReserveSharedItemProperty((CFArrayRef *)v61, 13, (CFArrayRef ***)&value, 0);
                  if ((_DWORD)v174)
                    goto LABEL_311;
                  v176 = a12 ? (char *)a12 : "";
                  v174 = IFFInformationSetItemPropertyAuxiliaryType(value, v176, a13, a14);
                  if ((_DWORD)v174)
                    goto LABEL_311;
                  v175 = (uint64_t *)value;
                }
                v174 = IFFInformationAssignSharedItemPropertyByIndex(*v175, v175[2], 1, *(_DWORD *)(*(_QWORD *)&v228 + 40));
                if (!(_DWORD)v174)
                  goto LABEL_253;
LABEL_311:
                v87 = v174;
                goto LABEL_271;
              }
              v147 = (double)v71;
              v148 = (double)v199;
              v149 = 0.0;
            }
            else
            {
              FigCFDictionaryGetDoubleIfPresent();
              FigCFDictionaryGetDoubleIfPresent();
              FigCFDictionaryGetDoubleIfPresent();
              FigCFDictionaryGetDoubleIfPresent();
              v142 = *((double *)&value + 1);
              v149 = *(double *)&value;
              v148 = v238;
              v147 = v239;
            }
            v69 = a15;
            v61 = (uint64_t)v134;
            goto LABEL_206;
          }
          v198 = v61;
          v88 = *(uint64_t **)v226;
          v89 = (uint64_t *)v225;
          *(_QWORD *)&value = 0;
          LODWORD(v243) = 0;
          v70 = v193;
          v71 = v195;
          if (a6)
          {
            v90 = (uint64_t *)malloc_type_calloc(a6, 8uLL, 0x2004093837F09uLL);
            if (v90 && (v203 = malloc_type_calloc(a6, 8uLL, 0x100004052888210uLL)) != 0)
            {
              v91 = 0;
              while (1)
              {
                LODWORD(v238) = 0;
                v92 = &v90[v91];
                v93 = IFFInformationReserveItemWithType((uint64_t)a1, a2, (int *)&v238, &v90[v91]);
                if ((_DWORD)v93)
                  break;
                if (v88)
                {
                  v93 = IFFInformationAssignSharedItemPropertyByIndex(*v88, v88[2], 1, *(_DWORD *)(*v92 + 40));
                  if ((_DWORD)v93)
                    break;
                }
                if (v89)
                {
                  v93 = IFFInformationAssignSharedItemPropertyByIndex(*v89, v89[2], 1, *(_DWORD *)(*v92 + 40));
                  if ((_DWORD)v93)
                    break;
                }
                if (v62)
                {
                  v93 = _assignSharedHDRMetadataPropertiesToItem(v62, *v92);
                  if ((_DWORD)v93)
                    break;
                }
                if (a6 == ++v91)
                {
                  v94 = (uint64_t)a1;
                  v70 = v193;
                  v71 = v195;
                  v69 = a15;
                  goto LABEL_160;
                }
              }
              v87 = v93;
              v73 = a20;
              v61 = (uint64_t)a1;
              v70 = v193;
              v71 = v195;
              v69 = a15;
            }
            else
            {
              v87 = FigSignalErrorAt();
              v203 = 0;
              v73 = a20;
              v61 = v198;
            }
            goto LABEL_178;
          }
          v203 = 0;
          v90 = 0;
          v94 = v198;
LABEL_160:
          v117 = v94;
          v118 = IFFInformationReserveItemWithType(v94, 1768912492, (int *)&v243, &value);
          if (!(_DWORD)v118)
          {
            v119 = value;
            *(_DWORD *)(value + 64) = v70;
            *(_BYTE *)(v119 + 48) = v194;
            if (a6)
            {
              v120 = IFFInformationAddItemReference(v117, v119, 1684630887, a6, v90);
              if ((_DWORD)v120)
              {
                v87 = v120;
                v73 = a20;
                v61 = v117;
                goto LABEL_178;
              }
            }
            v118 = IFFInformationReserveItemExtentTable(v117, SLODWORD(v243), 1u, 0, 1uLL, 0, 0);
            if (!(_DWORD)v118)
            {
              v238 = NAN;
              if (a7)
              {
                if (CFArrayGetCount(a7) == 4)
                {
                  v121 = 0;
                  v122 = &v238;
                  while (1)
                  {
                    v123 = (const __CFNumber *)CFArrayGetValueAtIndex(a7, v121);
                    if (!CFNumberGetValue(v123, kCFNumberSInt16Type, v122))
                      break;
                    ++v121;
                    v122 = (double *)((char *)v122 + 2);
                    if (v121 == 4)
                      goto LABEL_169;
                  }
                }
                v118 = FigSignalErrorAt();
              }
              else
              {
LABEL_169:
                v118 = IFFInformationSetItemBodyImageDerivationOverlay(value, &v238, v199, v71, v203, a6);
                if (!(_DWORD)v118)
                {
                  if (!v88
                    || (v118 = IFFInformationAssignSharedItemPropertyByIndex(*v88, v88[2], 1, *(_DWORD *)(value + 40)),
                        !(_DWORD)v118))
                  {
                    if (!v89
                      || (v118 = IFFInformationAssignSharedItemPropertyByIndex(*v89, v89[2], 1, *(_DWORD *)(value + 40)),
                          !(_DWORD)v118))
                    {
                      v73 = a20;
                      if (v62)
                        v87 = _assignSharedHDRMetadataPropertiesToItem(v62, value);
                      else
                        v87 = 0;
                      v61 = v117;
                      v228 = *(double *)&value;
                      goto LABEL_178;
                    }
                  }
                }
              }
            }
          }
          v87 = v118;
          v73 = a20;
          v61 = v117;
LABEL_178:
          free(v90);
          v95 = (uint64_t *)v203;
          goto LABEL_179;
        }
        v74 = *(uint64_t **)v226;
        v75 = (CFArrayRef *)v61;
        v76 = (uint64_t *)v225;
        *(_QWORD *)&value = 0;
        LODWORD(v243) = 0;
        v238 = 0.0;
        ImageSpatialExtentsProperty = _getImageSpatialExtentsProperty(v188, v185, v75, (CFArrayRef ***)&v238);
        if ((_DWORD)ImageSpatialExtentsProperty)
        {
          v87 = ImageSpatialExtentsProperty;
          v85 = 0;
          goto LABEL_125;
        }
        v186 = (uint64_t)((v191 << 32) * HIDWORD(v191)) >> 32;
        v189 = (uint64_t *)malloc_type_calloc(v186, 8uLL, 0x2004093837F09uLL);
        if ((uint64_t)v191 < 0x100000000)
        {
LABEL_101:
          v83 = IFFInformationReserveItemWithType((uint64_t)a1, 1735551332, (int *)&v243, &value);
          if (!(_DWORD)v83)
          {
            v84 = value;
            v70 = v193;
            *(_DWORD *)(value + 64) = v193;
            *(_BYTE *)(v84 + 48) = v194;
            v85 = v189;
            v86 = IFFInformationAddItemReference((uint64_t)a1, v84, 1684630887, v186, v189);
            if (!(_DWORD)v86)
            {
              v86 = IFFInformationReserveItemExtentTable((uint64_t)a1, SLODWORD(v243), 1u, 0, 1uLL, 0, 0);
              if (!(_DWORD)v86)
              {
                v71 = v195;
                v86 = IFFInformationSetItemBodyImageDerivationGrid(value, v191, HIDWORD(v191), v199, v195);
                if (!(_DWORD)v86)
                {
                  if (!v74
                    || (v86 = IFFInformationAssignSharedItemPropertyByIndex(*v74, v74[2], 1, *(_DWORD *)(value + 40)),
                        !(_DWORD)v86))
                  {
                    v69 = a15;
                    if (!v76
                      || (v86 = IFFInformationAssignSharedItemPropertyByIndex(*v76, v76[2], 1, *(_DWORD *)(value + 40)),
                          !(_DWORD)v86))
                    {
                      v73 = a20;
                      if (v62)
                        v87 = _assignSharedHDRMetadataPropertiesToItem(v62, value);
                      else
                        v87 = 0;
                      v61 = (uint64_t)a1;
                      v228 = *(double *)&value;
                      v95 = v189;
LABEL_179:
                      free(v95);
                      if (!(_DWORD)v87)
                        goto LABEL_180;
LABEL_270:
                      v170 = 0;
                      goto LABEL_271;
                    }
                  }
                }
              }
            }
            v87 = v86;
LABEL_125:
            free(v85);
            goto LABEL_270;
          }
        }
        else
        {
          v78 = 0;
          if ((int)v191 <= 1)
            v79 = 1;
          else
            v79 = (int)v191;
          v197 = v79;
          v80 = v189;
          while ((uint64_t)(v191 << 32) < 1)
          {
LABEL_100:
            ++v78;
            v80 += (int)v191;
            if (v78 == HIDWORD(v191))
              goto LABEL_101;
          }
          v81 = v80;
          v82 = v197;
          while (1)
          {
            LODWORD(v237) = 0;
            v83 = IFFInformationReserveItemWithType((uint64_t)a1, a2, (int *)&v237, v81);
            if ((_DWORD)v83)
              break;
            v83 = IFFInformationAssignSharedItemPropertyByIndex(**(_QWORD **)&v238, *(_QWORD *)(*(_QWORD *)&v238 + 16), 1, *(_DWORD *)(*v81 + 40));
            if ((_DWORD)v83)
              break;
            if (v74)
            {
              v83 = IFFInformationAssignSharedItemPropertyByIndex(*v74, v74[2], 1, *(_DWORD *)(*v81 + 40));
              if ((_DWORD)v83)
                break;
            }
            if (v76)
            {
              v83 = IFFInformationAssignSharedItemPropertyByIndex(*v76, v76[2], 1, *(_DWORD *)(*v81 + 40));
              if ((_DWORD)v83)
                break;
            }
            if (v62)
            {
              v83 = _assignSharedHDRMetadataPropertiesToItem(v62, *v81);
              if ((_DWORD)v83)
                break;
            }
            ++v81;
            if (!--v82)
              goto LABEL_100;
          }
        }
        v87 = v83;
        v85 = v189;
        goto LABEL_125;
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t IFFInformationAddThumbnailToPicture(CFArrayRef *a1, int a2, int a3, const opaqueCMFormatDescription *a4, unsigned int a5, int a6, int a7, const __CFArray *a8, _DWORD *a9)
{
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  v20 = 0;
  v19 = 0;
  v18 = 0;
  result = IFFInformationGetPictureByID((uint64_t)a1, a2, &v19);
  if (!(_DWORD)result)
  {
    v17 = v19;
    result = iffpcbAddPictureHelper(a1, a3, a4, 1, a5, 0, 0, a6, *MEMORY[0x1E0C9D820], *(double *)(MEMORY[0x1E0C9D820] + 8), a7, 0, 0, 0, a8, 0, 0, 0, &v20,
               (uint64_t)&v18,
               v19);
    if (!(_DWORD)result)
    {
      result = IFFPictureAddThumbnailItemReference(v17, *(_QWORD *)(v18 + 8));
      if (a9)
      {
        if (!(_DWORD)result)
          *a9 = v20;
      }
    }
  }
  return result;
}

uint64_t IFFInformationAddAuxiliaryImageToPicture(CFArrayRef *a1, int a2, int a3, const opaqueCMFormatDescription *a4, unsigned int a5, unsigned int a6, const __CFArray *a7, int a8, double a9, double a10, int a11, const char *a12, const void *a13, size_t a14, const __CFArray *a15, _DWORD *a16)
{
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;

  v29 = 0;
  v27 = 0;
  v28 = 0;
  result = IFFInformationGetPictureByID((uint64_t)a1, a2, &v28);
  if (!(_DWORD)result)
  {
    v26 = v28;
    result = iffpcbAddPictureHelper(a1, a3, a4, 2, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, 0, 0, 0, &v29,
               (uint64_t)&v27,
               v28);
    if (!(_DWORD)result)
    {
      result = IFFPictureAddAuxiliaryImageItemReference(v26, *(_QWORD *)(v27 + 8));
      if (a16)
      {
        if (!(_DWORD)result)
          *a16 = v29;
      }
    }
  }
  return result;
}

uint64_t IFFInformationAddAndGetPictureItemFromPicture(CFArrayRef *a1, int a2, int a3, int a4, unint64_t a5, const opaqueCMFormatDescription *a6, uint64_t *a7, double a8, double a9, double a10, double a11)
{
  uint64_t result;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  CMVideoDimensions Dimensions;
  int v29;
  BOOL v30;
  int v31;
  const __CFDictionary *Extension;
  const __CFDictionary *v34;
  CFTypeID v35;
  const __CFString *v36;
  unsigned __int16 v37;
  int v38;
  const __CFData *Value;
  const __CFData *v40;
  const UInt8 *BytePtr;
  size_t Length;
  _QWORD v43[6];
  int v44;
  CFArrayRef **v45;
  unint64_t v46;
  int v47[2];
  uint64_t v48;

  v48 = 0;
  result = IFFInformationGetPictureByID((uint64_t)a1, a2, &v48);
  if ((_DWORD)result)
    return result;
  if (a3)
    v22 = a8;
  else
    v22 = 0;
  if (a3)
    v23 = a9;
  else
    v23 = 0;
  v24 = *(_QWORD *)(v48 + 8);
  if (!v24)
    return FigSignalErrorAt();
  v25 = *(_DWORD *)(v24 + 44);
  if (!a3 && v25 == 1735551332)
    return FigSignalErrorAt();
  if (v25 == 1735551332)
  {
    v46 = 0;
    *(_QWORD *)v47 = 0;
    v26 = *(unsigned __int16 *)(v24 + 290);
    result = IFFInformationGetItemReferencesOfType(v24, 1684630887, &v46, 0, v47);
    if ((_DWORD)result)
      return result;
    v27 = v22 + v23 * v26;
    if ((uint64_t)v46 <= v27)
      return FigSignalErrorAt();
    v24 = *(_QWORD *)(*(_QWORD *)v47 + 8 * v27);
    goto LABEL_24;
  }
  if (v25 != 1768912492)
    goto LABEL_24;
  if (!a4 || !*(_BYTE *)(v24 + 272))
    return FigSignalErrorAt();
  *(_DWORD *)(*(_QWORD *)(v24 + 296) + 8 * a5) = (int)a10;
  *(_DWORD *)(*(_QWORD *)(v24 + 296) + 8 * a5 + 4) = (int)a11;
  v46 = 0;
  *(_QWORD *)v47 = 0;
  result = IFFInformationGetItemReferencesOfType(v24, 1684630887, &v46, 0, v47);
  if ((_DWORD)result)
    return result;
  if (v46 <= a5)
    return FigSignalErrorAt();
  v24 = *(_QWORD *)(*(_QWORD *)v47 + 8 * a5);
  Dimensions = CMVideoFormatDescriptionGetDimensions(a6);
  if (!Dimensions.width || !Dimensions.height)
    return FigSignalErrorAt();
  v45 = 0;
  result = _getImageSpatialExtentsProperty(Dimensions.width, Dimensions.height, a1, &v45);
  if ((_DWORD)result)
    return result;
  result = IFFInformationAssignSharedItemPropertyByIndex((uint64_t)*v45, (CFIndex)v45[2], 1, *(_DWORD *)(v24 + 40));
  if ((_DWORD)result)
    return result;
LABEL_24:
  v29 = *(_DWORD *)(v24 + 44);
  if (v29 > 1752589104)
  {
    v30 = v29 == 1936484717;
    v31 = 1752589105;
  }
  else
  {
    v30 = v29 == 1635135537;
    v31 = 1635148593;
  }
  if (!v30 && v29 != v31)
    goto LABEL_50;
  Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(a6, (CFStringRef)*MEMORY[0x1E0CA2240]);
  if (!Extension)
    return FigSignalErrorAt();
  v34 = Extension;
  v35 = CFGetTypeID(Extension);
  if (v35 != CFDictionaryGetTypeID())
    return FigSignalErrorAt();
  if (v29 > 1752589104)
  {
    if (v29 == 1936484717)
    {
      v36 = CFSTR("slmC");
      v38 = 1936485699;
      goto LABEL_45;
    }
    if (v29 == 1752589105)
    {
      v36 = CFSTR("hvcC");
      v38 = 1752589123;
      goto LABEL_45;
    }
  }
  else
  {
    if (v29 == 1635135537)
    {
      v36 = CFSTR("av1C");
      v37 = 12611;
      goto LABEL_42;
    }
    if (v29 == 1635148593)
    {
      v36 = CFSTR("avcC");
      v37 = 25411;
LABEL_42:
      v38 = v37 | 0x61760000;
      goto LABEL_45;
    }
  }
  v38 = 0;
  v36 = 0;
LABEL_45:
  Value = (const __CFData *)CFDictionaryGetValue(v34, v36);
  if (!Value)
    return FigSignalErrorAt();
  v40 = Value;
  *(_QWORD *)v47 = 0;
  BytePtr = CFDataGetBytePtr(Value);
  Length = CFDataGetLength(v40);
  v43[0] = MEMORY[0x1E0C809B0];
  v43[1] = 0x40000000;
  v43[2] = __IFFInformationAddAndGetPictureItemFromPicture_block_invoke;
  v43[3] = &__block_descriptor_tmp_10_9;
  v44 = v38;
  v43[4] = Length;
  v43[5] = BytePtr;
  if (!_getSharedPropertyOfTypeWithComparator((uint64_t)a1, 1, v47, (uint64_t)v43)
    || (result = IFFInformationReserveSharedItemProperty(a1, 1, (CFArrayRef ***)v47, 0), !(_DWORD)result)
    && (result = IFFInformationSetItemPropertyCodecConfiguration(*(uint64_t *)v47, v38, BytePtr, Length), !(_DWORD)result))
  {
    result = IFFInformationAssignSharedItemPropertyByIndex(**(_QWORD **)v47, *(_QWORD *)(*(_QWORD *)v47 + 16), 1, *(_DWORD *)(v24 + 40));
    if (!(_DWORD)result)
    {
LABEL_50:
      result = 0;
      *a7 = v24;
    }
  }
  return result;
}

uint64_t _getImageSpatialExtentsProperty(int a1, int a2, CFArrayRef *a3, CFArrayRef ***a4)
{
  uint64_t result;
  CFArrayRef **v9;
  _QWORD v10[4];
  int v11;
  int v12;

  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = ___getImageSpatialExtentsProperty_block_invoke;
  v10[3] = &__block_descriptor_tmp_26_2;
  v11 = a1;
  v12 = a2;
  result = _getSharedPropertyOfTypeWithComparator((uint64_t)a3, 2, a4, (uint64_t)v10);
  if ((_DWORD)result)
  {
    result = IFFInformationReserveSharedItemProperty(a3, 2, a4, 0);
    if (!(_DWORD)result)
    {
      v9 = *a4;
      *((_DWORD *)v9 + 10) = a1;
      *((_DWORD *)v9 + 11) = a2;
    }
  }
  return result;
}

uint64_t IFFInformationAddAndGetMetadataItemFromPicture(uint64_t a1, int a2, int a3, const __CFString *a4, const __CFString *a5, _QWORD *a6)
{
  uint64_t result;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  const __CFString *v16;
  int v17;
  int v18[2];
  uint64_t *v19;
  char buffer[16];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v18 = 0;
  v19 = 0;
  v17 = 0;
  result = IFFInformationGetPictureByID(a1, a2, &v19);
  if ((_DWORD)result)
    return result;
  if (a3 >= 4)
    return FigSignalErrorAt();
  v12 = v19;
  result = IFFInformationReserveItemWithType(a1, dword_193301190[a3], &v17, v18);
  if ((_DWORD)result)
    return result;
  if (a3 == 3)
  {
    v14 = *(_QWORD *)v18;
    v15 = 0;
    v16 = a4;
    goto LABEL_13;
  }
  if (a3 == 2)
  {
    v14 = *(_QWORD *)v18;
    v15 = "urn:uuid:0AFF93BC-356D-4BF7-8B5F-73037F2F1E5D";
    v16 = 0;
LABEL_13:
    result = IFFInformationSetItemURIType(v14, v15, v16);
    if ((_DWORD)result)
      return result;
    goto LABEL_17;
  }
  if (a3 != 1)
    goto LABEL_17;
  v22 = 0u;
  v23 = 0u;
  *(_OWORD *)buffer = 0u;
  v21 = 0u;
  if (a5)
  {
    v13 = buffer;
    if (!CFStringGetCString(a5, buffer, 64, 0x8000100u))
      return FigSignalErrorAt();
  }
  else
  {
    v13 = 0;
  }
  result = IFFInformationSetItemMIMETypeAndEncoding(*(uint64_t *)v18, "application/rdf+xml", v13);
  if (!(_DWORD)result)
  {
LABEL_17:
    result = IFFInformationReserveItemExtentTable(a1, v17, 0, 0, 1uLL, 0, 0);
    if (!(_DWORD)result)
    {
      result = IFFPictureAddMetadataItemReference(v12, a3, *(const void **)v18);
      if (!(_DWORD)result)
        *a6 = *(_QWORD *)v18;
    }
  }
  return result;
}

uint64_t IFFInformationAddGroup(uint64_t a1, int a2, int *a3)
{
  int v4;
  uint64_t result;

  v4 = *(_DWORD *)(a1 + 88) + 1;
  *(_DWORD *)(a1 + 88) = v4;
  result = IFFInformationReserveItemGroup(a1, v4, a2, 0, 0);
  if (!(_DWORD)result)
    *a3 = v4;
  return result;
}

uint64_t IFFInformationAddPictureToGroup(uint64_t a1, int a2, int a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = IFFInformationGetPictureByID(a1, a2, &v8);
  if (!(_DWORD)result)
  {
    v6 = *(_QWORD *)(v8 + 8);
    result = IFFInformationGetGroupByID(a1, a3, &v7);
    if (!(_DWORD)result)
      return IFFInformationAddItemToGroup(a1, *(_DWORD *)(v6 + 40), v7);
  }
  return result;
}

uint64_t IFFInformationAddGroupToGroup(uint64_t a1, int a2, int a3)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  result = IFFInformationGetGroupByID(a1, a2, &v9);
  if (!(_DWORD)result)
  {
    result = IFFInformationGetGroupByID(a1, a3, &v8);
    if (!(_DWORD)result)
    {
      if (*(_DWORD *)(v9 + 24) != 1634497650
        || (*(_DWORD *)(v9 + 24) == 1634497650) == (*(_DWORD *)(v8 + 24) != 1634497650))
      {
        return IFFInformationAddItemToGroup(a1, a2, v8);
      }
      else
      {
        return FigSignalErrorAt();
      }
    }
  }
  return result;
}

uint64_t IFFInformationAddPropertiesToGroup(CFArrayRef *a1, int a2)
{
  uint64_t GroupByID;
  const void *Value;
  uint64_t v5;
  const void *v6;
  const __CFArray *v7;
  const __CFArray *v8;
  CFIndex Count;
  uint64_t v10;
  uint64_t ValueAtIndex;
  const __CFArray *v12;
  uint64_t v13;
  int64_t v14;
  size_t v15;
  _QWORD *v16;
  uint64_t i;
  char v18;
  const void *v20;
  CFTypeID v21;
  uint64_t v22;
  uint64_t v23;
  char *v25;
  char *v26;
  uint64_t v27;
  CFArrayRef **v28;

  v27 = 0;
  GroupByID = IFFInformationGetGroupByID((uint64_t)a1, a2, &v27);
  if ((_DWORD)GroupByID)
    return GroupByID;
  Value = (const void *)FigCFDictionaryGetValue();
  if (!Value)
    goto LABEL_14;
  v5 = v27;
  if (*(_DWORD *)(v27 + 24) != 1937007986)
    return FigSignalErrorAt();
  v6 = Value;
  GroupByID = _setStereoMetadataSingleIntegerHelper(a1, *(_QWORD *)(v27 + 40), 0x13u, Value);
  if ((_DWORD)GroupByID)
    return GroupByID;
  v7 = *(const __CFArray **)(v5 + 48);
  if (!v7)
    goto LABEL_14;
  if (CFArrayGetCount(v7) > 1)
  {
    Count = 2;
    goto LABEL_11;
  }
  v8 = *(const __CFArray **)(v5 + 48);
  if (v8)
  {
    Count = CFArrayGetCount(v8);
    if (Count >= 1)
    {
LABEL_11:
      v10 = 0;
      do
      {
        ValueAtIndex = FigCFArrayGetValueAtIndex();
        GroupByID = _setStereoMetadataSingleIntegerHelper(a1, ValueAtIndex, 0x13u, v6);
        if ((_DWORD)GroupByID)
          return GroupByID;
      }
      while (Count != ++v10);
    }
  }
LABEL_14:
  v12 = (const __CFArray *)FigCFDictionaryGetValue();
  if (!v12)
  {
LABEL_52:
    if (!FigCFDictionaryGetInt32IfPresent())
      return 0;
    if (*(_DWORD *)(v27 + 24) == 1937007986)
    {
      v23 = 0;
      *(_DWORD *)(v27 + 32) = 0;
      return v23;
    }
    return FigSignalErrorAt();
  }
  if (*(_DWORD *)(v27 + 24) != 1937007986)
    return FigSignalErrorAt();
  v13 = *(_QWORD *)(v27 + 40);
  v14 = CFArrayGetCount(v12);
  if (v14 < 1)
  {
    v23 = 0;
    v25 = 0;
    v26 = 0;
    v16 = 0;
    goto LABEL_51;
  }
  v15 = v14;
  v26 = (char *)malloc_type_calloc(v14, 1uLL, 0x100004077774924uLL);
  if (!v26)
  {
    v26 = 0;
    goto LABEL_62;
  }
  v25 = (char *)malloc_type_calloc(v15, 1uLL, 0x100004077774924uLL);
  if (!v25)
  {
LABEL_62:
    v25 = 0;
    v16 = 0;
    goto LABEL_63;
  }
  v16 = malloc_type_calloc(v15, 8uLL, 0x6004044C4A2DFuLL);
  if (!v16)
  {
LABEL_63:
    v23 = 4294954450;
    goto LABEL_51;
  }
  for (i = 0; i != v15; ++i)
  {
    FigCFArrayGetValueAtIndex();
    if (!FigCFDictionaryGetValue())
    {
LABEL_56:
      v23 = FigSignalErrorAt();
      goto LABEL_51;
    }
    if (FigCFEqual())
    {
      v18 = 0;
    }
    else if (FigCFEqual())
    {
      v18 = 1;
    }
    else if (FigCFEqual())
    {
      v18 = 2;
    }
    else if (FigCFEqual())
    {
      v18 = 3;
    }
    else if (FigCFEqual())
    {
      v18 = 4;
    }
    else if (FigCFEqual())
    {
      v18 = 5;
    }
    else if (FigCFEqual())
    {
      v18 = 6;
    }
    else
    {
      if (!FigCFEqual())
        goto LABEL_56;
      v18 = 7;
    }
    v26[i] = v18;
    LODWORD(v28) = -1082130432;
    if (FigCFDictionaryGetFloatIfPresent())
    {
      if (*(float *)&v28 < 0.0 || *(float *)&v28 > 1.0)
        goto LABEL_56;
      v25[i] = (int)(roundf(*(float *)&v28 * 126.0) + 1.0);
    }
    v20 = (const void *)FigCFDictionaryGetValue();
    v16[i] = v20;
    if (v20)
    {
      v21 = CFGetTypeID(v20);
      if (v21 != CFStringGetTypeID())
        goto LABEL_56;
    }
  }
  v28 = 0;
  v22 = IFFInformationReserveSharedItemProperty(a1, 20, &v28, 0);
  if (!(_DWORD)v22)
  {
    v22 = IFFInformationSetItemPropertyStereoAggressors((uint64_t)v28, v15, v26, v25, v16);
    if (!(_DWORD)v22)
      v22 = IFFInformationAssignSharedItemPropertyByIndex((uint64_t)*v28, (CFIndex)v28[2], 0, *(_DWORD *)(v13 + 40));
  }
  v23 = v22;
LABEL_51:
  free(v16);
  free(v25);
  free(v26);
  if (!(_DWORD)v23)
    goto LABEL_52;
  return v23;
}

BOOL IFFPictureTileAccessorSupportsPicture(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  return !v1 || *(_DWORD *)(v1 + 44) != 1768187246;
}

uint64_t IFFPictureTileAccessorCreate(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  CFArrayRef v6;
  CFIndex Count;
  uint64_t v8;
  int v9;
  char v10;
  size_t v11;
  _DWORD *v12;
  _QWORD *v13;
  CFTypeRef v14;
  _QWORD *v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const void *ValueAtIndex;
  uint64_t OutputDimensionsForItem;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v36;
  _QWORD *v37;
  const __CFArray *v38;
  unsigned __int16 *v39;
  uint64_t v40;
  CFArrayRef theArray;

  theArray = 0;
  v4 = *(_QWORD *)(a1 + 8);
  if (!IFFItemIsPicture(v4) || *(_QWORD *)(a1 + 16) || !*(_QWORD *)(v4 + 80))
  {
    v36 = FigSignalErrorAt();
    IFFPictureTileAccessorDispose(0);
    return v36;
  }
  v5 = IFFItemOutboundReferencesOfType(v4, &theArray);
  v6 = theArray;
  if ((_DWORD)v5)
    goto LABEL_51;
  Count = CFArrayGetCount(theArray);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_DWORD *)(v8 + 44);
  if (v9 != 1768912492)
  {
    if (Count <= 1)
      v11 = 1;
    else
      v11 = Count;
    if (v9 == 1953325424)
    {
      v39 = 0;
      v11 = 1;
      v10 = 1;
      goto LABEL_22;
    }
    if (Count < 1)
    {
      v39 = 0;
      v10 = 1;
      goto LABEL_22;
    }
    if (v9 == 1735551332)
    {
      if (*(_BYTE *)(v8 + 272))
      {
        if (*(_WORD *)(v8 + 288))
        {
          if (*(_WORD *)(v8 + 290))
          {
            if (*(unsigned __int16 *)(v8 + 290) * (unint64_t)*(unsigned __int16 *)(v8 + 288) == v11)
            {
              v12 = *(_DWORD **)(v8 + 80);
              if (*(_DWORD *)(v8 + 296) == v12[1] && *(_DWORD *)(v8 + 292) == *v12)
              {
                v10 = 0;
                v39 = (unsigned __int16 *)(v8 + 288);
                goto LABEL_22;
              }
            }
          }
        }
      }
    }
    v5 = FigSignalErrorAt();
LABEL_51:
    v34 = v5;
    goto LABEL_42;
  }
  v39 = 0;
  v10 = 1;
  v11 = 1;
LABEL_22:
  v13 = malloc_type_calloc(1uLL, 0x50uLL, 0x10A0040BEEDEA2AuLL);
  if (!v13)
    goto LABEL_52;
  v13[8] = malloc_type_calloc(v11, 0x10uLL, 0x1000040451B5BE8uLL);
  v13[9] = malloc_type_calloc(v11, 8uLL, 0x2004093837F09uLL);
  v14 = *(CFTypeRef *)a1;
  if (*(_QWORD *)a1)
    v14 = CFRetain(v14);
  *v13 = v14;
  v13[1] = a1;
  v13[6] = v11;
  v13[7] = 0;
  if ((v10 & 1) == 0)
  {
    v37 = a2;
    v38 = v6;
    v40 = 0;
    v19 = *v39;
    if (*v39)
    {
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      LODWORD(v24) = v39[1];
      while (!(_DWORD)v24)
      {
LABEL_39:
        v22 += v20;
        if (++v21 >= (unint64_t)v19)
          goto LABEL_40;
      }
      v25 = 0;
      v26 = 0;
      v27 = 16 * v23;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v38, v23 + v25);
        OutputDimensionsForItem = getOutputDimensionsForItem((uint64_t)ValueAtIndex, &v40);
        if ((_DWORD)OutputDimensionsForItem)
          break;
        v30 = v40;
        v20 = HIDWORD(v40);
        if (v25 | v21)
        {
          if (*((_OWORD *)v13 + 2) != __PAIR128__(HIDWORD(v40), v40))
          {
            OutputDimensionsForItem = FigSignalErrorAt();
            break;
          }
        }
        else
        {
          v13[4] = v40;
          v13[5] = v20;
        }
        v31 = (_QWORD *)(v13[8] + v27);
        *v31 = v26;
        v31[1] = v22;
        *(_QWORD *)(v13[9] + 8 * v23 + 8 * v25) = ValueAtIndex;
        v26 += v30;
        ++v25;
        v24 = v39[1];
        v27 += 16;
        if (v25 >= v24)
        {
          v19 = *v39;
          v23 += v25;
          goto LABEL_39;
        }
      }
      v34 = OutputDimensionsForItem;
      v6 = v38;
      goto LABEL_43;
    }
LABEL_40:
    v6 = v38;
    v32 = *(_QWORD *)(v39 + 2);
    *(_QWORD *)&v33 = v32;
    *((_QWORD *)&v33 + 1) = HIDWORD(v32);
    *((_OWORD *)v13 + 1) = v33;
    a2 = v37;
    goto LABEL_41;
  }
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 8) + 80))
  {
LABEL_52:
    v34 = FigSignalErrorAt();
    goto LABEL_43;
  }
  v15 = (_QWORD *)v13[8];
  *v15 = 0;
  v15[1] = 0;
  *(_QWORD *)v13[9] = *(_QWORD *)(a1 + 8);
  v16 = *(unsigned int **)(*(_QWORD *)(a1 + 8) + 80);
  v17 = *v16;
  v13[2] = v17;
  v13[4] = v17;
  v18 = v16[1];
  v13[3] = v18;
  v13[5] = v18;
LABEL_41:
  v34 = 0;
  *a2 = v13;
LABEL_42:
  v13 = 0;
LABEL_43:
  IFFPictureTileAccessorDispose((const void **)v13);
  if (v6)
    CFRelease(v6);
  return v34;
}

void IFFPictureTileAccessorDispose(const void **a1)
{
  const void *v2;
  void *v3;
  void *v4;

  if (a1)
  {
    v2 = *a1;
    if (v2)
    {
      CFRelease(v2);
      *a1 = 0;
    }
    v3 = (void *)a1[8];
    if (v3)
    {
      a1[8] = 0;
      free(v3);
    }
    v4 = (void *)a1[9];
    if (v4)
    {
      a1[9] = 0;
      free(v4);
    }
    free(a1);
  }
}

uint64_t IFFPictureTileAccessorCopyCleanApertureDictionary(uint64_t a1, CFDictionaryRef *a2)
{
  CFAllocatorRef v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned int *v7;
  const __CFAllocator *v8;
  _DWORD *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  __int128 v24;
  uint64_t v25;
  const __CFAllocator *v26;
  CFDictionaryRef v27;
  uint64_t v28;
  unint64_t v29;
  const void *v30;
  double v33;
  double v34;
  double v35;
  double valuePtr;
  __int128 v37[2];
  _OWORD v38[2];
  __int128 v39;
  __int128 v40;
  void *values[4];
  void *keys[5];

  keys[4] = *(void **)MEMORY[0x1E0C80C00];
  v4 = CFGetAllocator(*(CFTypeRef *)a1);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD **)(*(_QWORD *)(a1 + 72) + 8 * v5);
  v7 = (unsigned int *)v6[10];
  if (v7)
  {
    if (v6 == *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8))
      return 4294954513;
    v8 = v4;
    v9 = (_DWORD *)v6[20];
    if (!v9 || !*v9)
    {
      v10 = v6[19];
      if (v10)
      {
        v11 = *(_DWORD *)v10 / *(_DWORD *)(v10 + 4);
        v12 = *(_DWORD *)(v10 + 8) / *(_DWORD *)(v10 + 12);
      }
      else
      {
        v11 = *v7;
        v12 = v7[1];
      }
      v13 = *(_QWORD *)(a1 + 64);
      v14 = *(_QWORD *)(v13 + 16 * v5);
      if (!HIDWORD(v14))
      {
        v15 = *(_QWORD *)(v13 + 16 * v5 + 8);
        if (!HIDWORD(v15))
        {
          v17 = *(_QWORD *)(a1 + 16);
          v16 = *(_QWORD *)(a1 + 24);
          v18 = v16 - v15;
          if (v16 - v15 >= v12)
            v18 = v12;
          if (v16 >= v15)
            v19 = v18;
          else
            v19 = 0;
          v20 = v17 - v14;
          if (v17 - v14 >= v11)
            v20 = v11;
          if (v17 >= v14)
            v21 = v20;
          else
            v21 = 0;
          if (v10)
            v22 = 0;
          else
            v22 = v21 == v11;
          if (!v22 || v19 != v12)
          {
            *(_QWORD *)&v39 = v21 | 0x100000000;
            *((_QWORD *)&v39 + 1) = v19 | 0x100000000;
            LODWORD(v40) = v21 - *(_DWORD *)(a1 + 32);
            DWORD1(v40) = 2;
            DWORD2(v40) = v19 - *(_DWORD *)(a1 + 40);
            HIDWORD(v40) = 2;
            if (v10)
            {
              v24 = *(_OWORD *)(v10 + 16);
              v38[0] = *(_OWORD *)v10;
              v38[1] = v24;
              v37[0] = v39;
              v37[1] = v40;
              IFFItemPropertyMergeCLAPs((uint64_t)v38, v37, &v39);
              if ((_DWORD)v25)
                return v25;
            }
            v35 = (double)SDWORD2(v39) / (double)SHIDWORD(v39);
            valuePtr = (double)(int)v39 / (double)SDWORD1(v39);
            v34 = (double)(int)v40 / (double)SDWORD1(v40);
            v33 = (double)SDWORD2(v40) / (double)SHIDWORD(v40);
            keys[0] = CFSTR("Width");
            keys[1] = CFSTR("Height");
            keys[2] = CFSTR("HorizontalOffset");
            keys[3] = CFSTR("VerticalOffset");
            v26 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, &valuePtr);
            values[1] = CFNumberCreate(v26, kCFNumberDoubleType, &v35);
            values[2] = CFNumberCreate(v26, kCFNumberDoubleType, &v34);
            values[3] = CFNumberCreate(v26, kCFNumberDoubleType, &v33);
            v27 = CFDictionaryCreate(v8, (const void **)keys, (const void **)values, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            if (v27)
            {
              v28 = 0;
              *a2 = v27;
            }
            else
            {
              v28 = FigSignalErrorAt();
            }
            v29 = 0;
            do
            {
              v30 = values[v29];
              if (v30)
              {
                CFRelease(v30);
                values[v29] = 0;
              }
            }
            while (v29++ < 3);
            return v28;
          }
          return 4294954513;
        }
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t IFFPictureTileAccessorCopySpatialRelationDictionary(uint64_t a1, CFDictionaryRef *a2)
{
  CFAllocatorRef v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  const __CFAllocator *v9;
  unint64_t *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  int *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  const __CFAllocator *v22;
  CFDictionaryRef v23;
  uint64_t v24;
  unint64_t v25;
  const void *v26;
  double v29;
  double valuePtr;
  double v31;
  double v32;
  void *values[4];
  void *keys[5];

  keys[4] = *(void **)MEMORY[0x1E0C80C00];
  v4 = CFGetAllocator(*(CFTypeRef *)a1);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v6);
  v8 = *(_DWORD **)(v7 + 80);
  if (!v8)
    return FigSignalErrorAt();
  v9 = v4;
  v10 = (unint64_t *)(*(_QWORD *)(a1 + 64) + 16 * v6);
  v32 = (double)*v10;
  v31 = (double)v10[1];
  v11 = (double)*(unint64_t *)(a1 + 16) - v32;
  v13 = (double)*(unint64_t *)(a1 + 24);
  v12 = v13 - v31;
  LODWORD(v13) = *v8;
  LODWORD(v5) = v8[1];
  v14 = (double)*(unint64_t *)&v13;
  if (v11 >= (double)*(unint64_t *)&v13)
    v11 = (double)*(unint64_t *)&v13;
  v15 = (double)v5;
  if (v12 >= (double)v5)
    v12 = (double)v5;
  v29 = v12;
  valuePtr = v11;
  v16 = *(int **)(v7 + 152);
  if (!v16)
    goto LABEL_16;
  v17 = (double)*v16 / (double)v16[1];
  if (v17 > v14)
    return FigSignalErrorAt();
  v18 = (double)v16[3];
  v19 = (double)v16[2] / v18;
  if (v19 > v15)
    return FigSignalErrorAt();
  if (v17 >= v11)
    v20 = v11;
  else
    v20 = (double)*v16 / (double)v16[1];
  if (v19 >= v12)
    v21 = v12;
  else
    v21 = (double)v16[2] / v18;
  v29 = v21;
  valuePtr = v20;
LABEL_16:
  keys[0] = CFSTR("Width");
  keys[1] = CFSTR("Height");
  keys[2] = CFSTR("HorizontalOffset");
  keys[3] = CFSTR("VerticalOffset");
  v22 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, &valuePtr);
  values[1] = CFNumberCreate(v22, kCFNumberDoubleType, &v29);
  values[2] = CFNumberCreate(v22, kCFNumberDoubleType, &v32);
  values[3] = CFNumberCreate(v22, kCFNumberDoubleType, &v31);
  v23 = CFDictionaryCreate(v9, (const void **)keys, (const void **)values, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v23)
  {
    v24 = 0;
    *a2 = v23;
  }
  else
  {
    v24 = FigSignalErrorAt();
  }
  v25 = 0;
  do
  {
    v26 = values[v25];
    if (v26)
    {
      CFRelease(v26);
      values[v25] = 0;
    }
  }
  while (v25++ < 3);
  return v24;
}

uint64_t IFFPictureTileAccessorGetItemIdentifier(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * *(_QWORD *)(a1 + 56)) + 40);
  return 0;
}

uint64_t IFFPictureTileAccessorCopyFormatDescription(uint64_t a1, CMVideoFormatDescriptionRef *a2)
{
  uint64_t v3;
  const __CFAllocator *v4;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * *(_QWORD *)(a1 + 56));
  v4 = CFGetAllocator(*(CFTypeRef *)a1);
  return createFormatDescriptionForItem(v4, v3, a2);
}

uint64_t IFFPictureTileAccessorResetCursor(uint64_t a1)
{
  *(_QWORD *)(a1 + 56) = 0;
  return 0;
}

uint64_t IFFPictureTileAccessorStepCursor(uint64_t a1, int *a2)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(a1 + 56) + 1;
  if (v2 >= *(_QWORD *)(a1 + 48))
  {
    v3 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 56) = v2;
    v3 = 1;
  }
  *a2 = v3;
  return 0;
}

uint64_t IFFPictureTileAccessorGetTileLocation(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;

  v3 = (_QWORD *)(*(_QWORD *)(a1 + 64) + 16 * *(_QWORD *)(a1 + 56));
  *a2 = *v3;
  *a3 = v3[1];
  return 0;
}

uint64_t IFFPictureTileAccessorSeekCursorToLocation(_QWORD *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;

  if (a1[2] <= a2 || a1[3] <= a3)
    return FigSignalErrorAt();
  if ((uint64_t)a1[6] < 1)
  {
LABEL_15:
    v15 = 0;
    LODWORD(result) = 0;
    v16 = 7;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    while (1)
    {
      v8 = a1[8];
      v9 = *(_QWORD *)(a1[9] + 8 * v7);
      v18 = 0;
      LODWORD(result) = getOutputDimensionsForItem(v9, &v18);
      if ((_DWORD)result)
        break;
      v11 = *(_QWORD *)(v8 + v6);
      if (v11 <= a2)
      {
        v12 = *(_QWORD *)(v8 + v6 + 8);
        v13 = v11 + v18 <= a2 || v12 > a3;
        if (!v13 && v12 + HIDWORD(v18) > a3)
        {
          a1[7] = v7;
          v16 = 7;
          v15 = 1;
          goto LABEL_17;
        }
      }
      ++v7;
      v6 += 16;
      if (v7 >= a1[6])
        goto LABEL_15;
    }
    v15 = 0;
    v16 = 4;
  }
LABEL_17:
  if (v16 == 7)
    v17 = -12782;
  else
    v17 = result;
  if (v15)
    return result;
  else
    return v17;
}

uint64_t IFFPictureTileAccessorCopySampleLocation(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  return copyLocationFromItem(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * *(_QWORD *)(a1 + 56)), 0, a2, a3, a4, a5, a6, 0);
}

uint64_t IFFItemCreate(uint64_t a1, uint64_t *a2)
{
  uint64_t Instance;

  if (sRegisterIFFItemTypeOnce != -1)
    dispatch_once_f(&sRegisterIFFItemTypeOnce, 0, (dispatch_function_t)RegisterIFFItemType);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  *a2 = Instance;
  return 0;
}

uint64_t IFFItemInformationCreate(uint64_t a1, uint64_t *a2)
{
  uint64_t Instance;

  if (sRegisterIFFItemInformationTypeOnce != -1)
    dispatch_once_f(&sRegisterIFFItemInformationTypeOnce, 0, (dispatch_function_t)RegisterIFFItemInformationType);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  *(_BYTE *)(Instance + 176) = 1;
  *(_DWORD *)(Instance + 88) = 0;
  *a2 = Instance;
  return 0;
}

uint64_t IFFItemComparator(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  BOOL v5;
  uint64_t v6;

  v2 = *(_DWORD *)(a1 + 40);
  v3 = *(_DWORD *)(a2 + 40);
  v4 = v2 >= v3;
  v5 = v2 == v3;
  v6 = -1;
  if (v4)
    v6 = 1;
  if (v5)
    return 0;
  else
    return v6;
}

uint64_t _sortExistingItems(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(*(_QWORD *)a1 + 40) - *(_DWORD *)(*(_QWORD *)a2 + 40));
}

uint64_t IFFItemInboundReferencesOfType(uint64_t a1, int a2, unsigned __int8 (*a3)(_BYTE *), __CFArray **a4)
{
  CFMutableArrayRef Mutable;
  __CFArray *v9;
  const __CFArray *v10;
  CFIndex Count;
  CFIndex v12;
  CFIndex i;
  _BYTE *ValueAtIndex;
  unsigned int v15;
  unsigned __int8 v16;
  int v17;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
  if (!Mutable)
    return FigSignalErrorAt();
  v9 = Mutable;
  v10 = *(const __CFArray **)(a1 + 528);
  if (v10)
  {
    Count = CFArrayGetCount(v10);
    if (Count >= 1)
    {
      v12 = Count;
      for (i = 0; i != v12; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 528), i);
        v15 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 536), i);
        v16 = ValueAtIndex[16];
        v17 = v16 & (ValueAtIndex != (_BYTE *)a1) & a3(ValueAtIndex);
        if (v15 == a2 && v17 != 0)
          CFArrayAppendValue(v9, ValueAtIndex);
      }
    }
  }
  *a4 = v9;
  return 0;
}

uint64_t sanityCheckImageItem(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    if (*(_BYTE *)(result + 16))
    {
      result = IFFItemIsPicture(result);
      if ((_DWORD)result)
        return *(_QWORD *)(v1 + 80) != 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL IFFItemIsExifPayload(uint64_t a1)
{
  return *(_DWORD *)(a1 + 44) == 1165519206;
}

BOOL IFFItemIsXMPPayload(uint64_t a1)
{
  const char *v1;
  _BOOL8 result;

  result = 0;
  if (*(_DWORD *)(a1 + 44) == 1835625829)
  {
    if (*(_BYTE *)(a1 + 464))
    {
      v1 = *(const char **)(a1 + 472);
      if (v1)
      {
        if (!strcmp(v1, "application/rdf+xml"))
          return 1;
      }
    }
  }
  return result;
}

BOOL IFFItemIsDebugMetadataPayload(uint64_t a1)
{
  const char *v1;
  _BOOL8 result;

  result = 0;
  if (*(_DWORD *)(a1 + 44) == 1970432288)
  {
    if (*(_BYTE *)(a1 + 488))
    {
      v1 = *(const char **)(a1 + 496);
      if (v1)
      {
        if (!strcmp(v1, "urn:uuid:0AFF93BC-356D-4BF7-8B5F-73037F2F1E5D"))
          return 1;
      }
    }
  }
  return result;
}

BOOL IFFItemIsCustomMetadataPayload(uint64_t a1)
{
  const char *v1;
  _BOOL8 result;

  result = 0;
  if (*(_DWORD *)(a1 + 44) == 1970432288)
  {
    if (*(_BYTE *)(a1 + 488))
    {
      v1 = *(const char **)(a1 + 496);
      if (v1)
      {
        if (strcmp(v1, "urn:uuid:0AFF93BC-356D-4BF7-8B5F-73037F2F1E5D"))
          return 1;
      }
    }
  }
  return result;
}

uint64_t _propertyIsEssential(uint64_t a1, uint64_t a2)
{
  CFIndex v4;
  const __CFArray *Count;
  unsigned __int8 *ValueAtIndex;

  v4 = 0;
  while (1)
  {
    Count = *(const __CFArray **)(a1 + 56);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (v4 >= (uint64_t)Count)
      break;
    ValueAtIndex = (unsigned __int8 *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), v4++);
    if (*(_QWORD *)ValueAtIndex + 40 == a2)
      return ValueAtIndex[8];
  }
  return 0;
}

CFArrayRef createArrayFromRational32(const __CFAllocator *a1, char *valuePtr)
{
  const __CFAllocator *v4;
  CFNumberRef v5;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  CFArrayRef v9;
  void *values[3];

  values[2] = *(void **)MEMORY[0x1E0C80C00];
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, valuePtr);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = CFNumberCreate(v4, kCFNumberSInt32Type, valuePtr + 4);
  if (!v7)
  {
    CFRelease(v6);
    return 0;
  }
  v8 = v7;
  values[0] = v6;
  values[1] = v7;
  v9 = CFArrayCreate(a1, (const void **)values, 2, MEMORY[0x1E0C9B378]);
  CFRelease(v6);
  CFRelease(v8);
  return v9;
}

BOOL ___setStereoMetadataSingleIntegerHelper_block_invoke(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;

  v2 = *(_DWORD *)(a1 + 40);
  if (v2 == 19)
  {
    v3 = *(int *)(a2 + 40);
    return *(_QWORD *)(a1 + 32) == v3;
  }
  if (v2 == 16 || v2 == 15)
  {
    v3 = *(unsigned int *)(a2 + 40);
    return *(_QWORD *)(a1 + 32) == v3;
  }
  return 0;
}

uint64_t _cfArrayGetSizeLimitedInt32IfPresent(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t result;

  if (!FigCFArrayGetInt64AtIndex())
    return FigSignalErrorAt();
  result = 0;
  *a4 = 0;
  return result;
}

uint64_t _cfDictionaryGetSizeLimitedInt32IfPresent(uint64_t a1, uint64_t a2, _DWORD *a3, _BYTE *a4)
{
  char Int64IfPresent;
  uint64_t result;

  Int64IfPresent = FigCFDictionaryGetInt64IfPresent();
  result = 0;
  *a4 = Int64IfPresent;
  *a3 = 0;
  return result;
}

BOOL ___setStereoMetadataIntrinsicsExtrinsicsHelper_block_invoke(uint64_t a1, _QWORD *a2)
{
  int v2;

  v2 = *(_DWORD *)(a1 + 32);
  if (v2 == 18)
  {
    return a2[5] == *(_QWORD *)(a1 + 72) && a2[6] == *(_QWORD *)(a1 + 80) && a2[7] == *(_QWORD *)(a1 + 88);
  }
  else
  {
    if (v2 != 17)
      return 0;
    return memcmp(a2 + 5, (const void *)(a1 + 36), 0x24uLL) == 0;
  }
}

uint64_t createColorExtensionsDictFromItem(const __CFAllocator *a1, uint64_t a2, __CFDictionary **a3)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v7;
  uint64_t v8;
  CFDataRef v9;
  CFDataRef v10;
  unsigned __int16 *v11;
  const void **v12;
  CFStringRef StringForIntegerCodePoint;
  CFStringRef v14;
  CFStringRef v15;
  CFStringRef v16;
  _BOOL4 v17;
  _BOOL4 v18;

  if (!a3)
    return 4294954516;
  if (!*(_QWORD *)(a2 + 104) && !*(_QWORD *)(a2 + 112))
    return 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return 4294954510;
  v7 = Mutable;
  v8 = *(_QWORD *)(a2 + 104);
  if (!v8)
  {
    v10 = 0;
LABEL_9:
    v11 = *(unsigned __int16 **)(a2 + 112);
    if (!v11)
      goto LABEL_29;
    if (*((char *)v11 + 6) >= 0)
      v12 = (const void **)MEMORY[0x1E0C9AE40];
    else
      v12 = (const void **)MEMORY[0x1E0C9AE50];
    CFDictionarySetValue(v7, (const void *)*MEMORY[0x1E0CA21D0], *v12);
    StringForIntegerCodePoint = CVColorPrimariesGetStringForIntegerCodePoint(*v11);
    v14 = CVTransferFunctionGetStringForIntegerCodePoint(v11[1]);
    v15 = CVYCbCrMatrixGetStringForIntegerCodePoint(v11[2]);
    if (v15)
    {
      v16 = v15;
      v17 = v14 != 0;
      v18 = 1;
    }
    else
    {
      if (v11[2])
        v16 = 0;
      else
        v16 = (CFStringRef)*MEMORY[0x1E0CA8F20];
      v17 = v14 != 0;
      v18 = v16 != 0;
      if (!StringForIntegerCodePoint && !v14 && !v16)
        goto LABEL_29;
    }
    if (StringForIntegerCodePoint)
    {
      CFDictionarySetValue(v7, (const void *)*MEMORY[0x1E0CA8D68], StringForIntegerCodePoint);
      if (v17)
        goto LABEL_17;
    }
    else if (v17)
    {
LABEL_17:
      CFDictionarySetValue(v7, (const void *)*MEMORY[0x1E0CA8E98], v14);
      if (!v18)
        goto LABEL_29;
      goto LABEL_28;
    }
    if (v18)
LABEL_28:
      CFDictionarySetValue(v7, (const void *)*MEMORY[0x1E0CA8EE8], v16);
LABEL_29:
    if (CFDictionaryGetCount(v7) >= 1)
      *a3 = v7;
    if (v10)
      CFRelease(v10);
    return 0;
  }
  v9 = CFDataCreate(a1, *(const UInt8 **)v8, *(_QWORD *)(v8 + 8));
  if (v9)
  {
    v10 = v9;
    CFDictionarySetValue(v7, (const void *)*MEMORY[0x1E0CA2210], v9);
    goto LABEL_9;
  }
  return FigSignalErrorAt();
}

BOOL __iffpcbAddPictureHelper_block_invoke(uint64_t a1, uint64_t a2)
{
  size_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  return v2 == *(_QWORD *)(a1 + 32) && memcmp(*(const void **)(a2 + 40), *(const void **)(a1 + 40), v2) == 0;
}

BOOL __iffpcbAddPictureHelper_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 32) == *(unsigned __int16 *)(a2 + 40)
      && *(_DWORD *)(a1 + 36) == *(unsigned __int16 *)(a2 + 44)
      && *(_DWORD *)(a1 + 40) == *(unsigned __int16 *)(a2 + 42)
      && *(unsigned __int8 *)(a2 + 46) == *(unsigned __int8 *)(a1 + 44);
}

uint64_t _assignSharedHDRMetadataPropertiesToItem(const __CFArray *a1, uint64_t a2)
{
  CFIndex v4;
  uint64_t *ValueAtIndex;
  uint64_t result;

  if (CFArrayGetCount(a1) < 1)
    return 0;
  v4 = 0;
  while (1)
  {
    ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(a1, v4);
    result = IFFInformationAssignSharedItemPropertyByIndex(*ValueAtIndex, ValueAtIndex[2], 0, *(_DWORD *)(a2 + 40));
    if ((_DWORD)result)
      break;
    if (++v4 >= CFArrayGetCount(a1))
      return 0;
  }
  return result;
}

BOOL __iffpcbAddPictureHelper_block_invoke_3(_DWORD *a1, _DWORD *a2)
{
  return a2[10] == a1[8]
      && a2[11] == a1[9]
      && a2[12] == a1[10]
      && a2[13] == a1[11]
      && a2[14] == a1[12]
      && a2[15] == a1[13]
      && a2[16] == a1[14]
      && a2[17] == a1[15];
}

BOOL __iffpcbAddPictureHelper_block_invoke_4(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 40) == *(_DWORD *)(a1 + 32);
}

BOOL __iffpcbAddPictureHelper_block_invoke_5(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 40) == *(_DWORD *)(a1 + 32);
}

BOOL __iffpcbAddPictureHelper_block_invoke_6(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 40) == *(_DWORD *)(a1 + 32) && *(_DWORD *)(a2 + 44) == *(_DWORD *)(a1 + 36);
}

BOOL __iffpcbAddPictureHelper_block_invoke_7(uint64_t a1, uint64_t a2)
{
  size_t v2;

  v2 = *(unsigned __int8 *)(a2 + 40);
  return (_DWORD)v2 == *(unsigned __int8 *)(a1 + 40)
      && memcmp(*(const void **)(a2 + 48), *(const void **)(a1 + 32), v2) == 0;
}

BOOL __iffpcbAddPictureHelper_block_invoke_8(uint64_t a1, uint64_t a2)
{
  const char *v4;
  size_t v5;
  size_t v6;
  _BOOL8 result;

  v4 = *(const char **)(a1 + 32);
  if (v4)
    v5 = strlen(*(const char **)(a1 + 32));
  else
    v5 = 0;
  result = strlen(*(const char **)(a2 + 40)) == v5
        && (v6 = *(_QWORD *)(a2 + 56), v6 == *(_QWORD *)(a1 + 40))
        && (!v5 || !strcmp(*(const char **)(a2 + 40), v4))
        && (!v6 || !memcmp(*(const void **)(a2 + 48), *(const void **)(a1 + 48), v6));
  return result;
}

uint64_t _getHDRMetadataProperty(int a1, CFDataRef theData, CFArrayRef *a3, CFArrayRef ***a4)
{
  unsigned __int8 *BytePtr;
  CFIndex Length;
  size_t v10;
  _QWORD *v11;
  uint64_t result;
  unsigned int v13;
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];

  BytePtr = (unsigned __int8 *)CFDataGetBytePtr(theData);
  Length = CFDataGetLength(theData);
  v10 = Length;
  switch(a1)
  {
    case 6:
      if (Length != 4)
        return 4294954516;
      v17[0] = MEMORY[0x1E0C809B0];
      v17[1] = 0x40000000;
      v17[2] = ___getHDRMetadataProperty_block_invoke;
      v17[3] = &__block_descriptor_tmp_21_2;
      v17[4] = BytePtr;
      v17[5] = 4;
      v11 = v17;
      goto LABEL_12;
    case 7:
      if (Length != 24)
        return 4294954516;
      v16[0] = MEMORY[0x1E0C809B0];
      v16[1] = 0x40000000;
      v16[2] = ___getHDRMetadataProperty_block_invoke_2;
      v16[3] = &__block_descriptor_tmp_22_7;
      v16[4] = BytePtr;
      v16[5] = 24;
      v11 = v16;
      goto LABEL_12;
    case 8:
      v13 = *BytePtr;
      if ((v13 & 0x3C) == 0
        || Length != (((((int)(v13 << 26) >> 31) & 0x18) + ((v13 >> 1) & 4) + ((v13 >> 2) & 4) + (v13 & 4)) | 1))
      {
        return 4294954516;
      }
      v15[0] = MEMORY[0x1E0C809B0];
      v15[1] = 0x40000000;
      v15[2] = ___getHDRMetadataProperty_block_invoke_3;
      v15[3] = &__block_descriptor_tmp_23_3;
      v15[4] = Length;
      v15[5] = BytePtr;
      v11 = v15;
      goto LABEL_12;
    case 9:
      if (Length != 8)
        return 4294954516;
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 0x40000000;
      v14[2] = ___getHDRMetadataProperty_block_invoke_4;
      v14[3] = &__block_descriptor_tmp_24_2;
      v14[4] = BytePtr;
      v14[5] = 8;
      v11 = v14;
LABEL_12:
      result = _getSharedPropertyOfTypeWithComparator((uint64_t)a3, a1, a4, (uint64_t)v11);
      if ((_DWORD)result)
      {
        result = IFFInformationReserveSharedItemProperty(a3, a1, a4, 0);
        if (!(_DWORD)result)
        {
          IFFInformationSetItemPropertyHDRMetaData((uint64_t)*a4, BytePtr, v10);
          return 0;
        }
      }
      return result;
    default:
      return 4294954509;
  }
}

BOOL ___getHDRMetadataProperty_block_invoke(uint64_t a1, uint64_t a2)
{
  return memcmp(*(const void **)(a1 + 32), (const void *)(a2 + 40), *(_QWORD *)(a1 + 40)) == 0;
}

BOOL ___getHDRMetadataProperty_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return memcmp(*(const void **)(a1 + 32), (const void *)(a2 + 40), *(_QWORD *)(a1 + 40)) == 0;
}

BOOL ___getHDRMetadataProperty_block_invoke_3(uint64_t a1, uint64_t a2)
{
  const void *v2;
  unsigned int v3;
  size_t v4;
  size_t v5;

  v3 = *(unsigned __int8 *)(a2 + 40);
  v2 = (const void *)(a2 + 40);
  v4 = ((((int)(v3 << 26) >> 31) & 0x18) + ((v3 >> 1) & 4) + ((v3 >> 2) & 4) + (v3 & 4)) | 1;
  if ((v3 & 0x3C) != 0)
    v5 = v4;
  else
    v5 = 0;
  return *(_QWORD *)(a1 + 32) == v5 && memcmp(*(const void **)(a1 + 40), v2, v5) == 0;
}

BOOL ___getHDRMetadataProperty_block_invoke_4(uint64_t a1, uint64_t a2)
{
  return memcmp(*(const void **)(a1 + 32), (const void *)(a2 + 40), *(_QWORD *)(a1 + 40)) == 0;
}

BOOL ___pcbAddImageTonemap_block_invoke(uint64_t a1, uint64_t a2)
{
  return *(_WORD *)(a2 + 40) == 2
      && *(_WORD *)(a2 + 44) == *(unsigned __int8 *)(a1 + 32)
      && *(_WORD *)(a2 + 42) == 2
      && *(unsigned __int8 *)(a2 + 46) == 128;
}

uint64_t getRational32FromArray(const __CFArray *a1, uint64_t a2)
{
  if (!a1 || CFArrayGetCount(a1) != 2)
    return FigSignalErrorAt();
  if (a2)
  {
    if (FigCFArrayGetInt32AtIndex() && FigCFArrayGetInt32AtIndex())
      return 0;
    return FigSignalErrorAt();
  }
  return 4294949526;
}

uint64_t _floatFromRational(uint64_t result, double *a2)
{
  const __CFArray *v3;
  CFTypeID v4;

  if (result)
  {
    v3 = (const __CFArray *)result;
    v4 = CFGetTypeID((CFTypeRef)result);
    if (v4 == CFArrayGetTypeID() && CFArrayGetCount(v3) == 2)
    {
      result = FigCFArrayGetInt32AtIndex();
      if ((_DWORD)result)
      {
        result = FigCFArrayGetInt32AtIndex();
        if ((_DWORD)result)
        {
          *a2 = (double)0 / (double)1;
          return 1;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL ___getImageSpatialExtentsProperty_block_invoke(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 40) == *(_DWORD *)(a1 + 32) && *(_DWORD *)(a2 + 44) == *(_DWORD *)(a1 + 36);
}

uint64_t RegisterIFFItemType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sIFFItemID = result;
  return result;
}

void InitIFFItem(uint64_t a1)
{
  bzero((void *)(a1 + 16), 0x218uLL);
}

void FinalizeIFFItem(uint64_t a1)
{
  const __CFArray *v2;
  CFIndex v3;
  void **ValueAtIndex;
  const void *v5;
  const __CFArray *v6;
  CFIndex v7;
  void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  const void *v19;

  v2 = *(const __CFArray **)(a1 + 520);
  if (v2)
  {
    if (CFArrayGetCount(v2) >= 1)
    {
      v3 = 0;
      do
      {
        ValueAtIndex = (void **)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 520), v3);
        IFFItemReferenceFree(ValueAtIndex);
        ++v3;
      }
      while (v3 < CFArrayGetCount(*(CFArrayRef *)(a1 + 520)));
    }
    v5 = *(const void **)(a1 + 520);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(a1 + 520) = 0;
    }
  }
  v6 = *(const __CFArray **)(a1 + 56);
  if (v6)
  {
    if (CFArrayGetCount(v6) >= 1)
    {
      v7 = 0;
      do
      {
        v8 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), v7);
        free(v8);
        ++v7;
      }
      while (v7 < CFArrayGetCount(*(CFArrayRef *)(a1 + 56)));
    }
    v9 = *(const void **)(a1 + 56);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(a1 + 56) = 0;
    }
  }
  v10 = *(const void **)(a1 + 224);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a1 + 224) = 0;
  }
  v11 = *(const void **)(a1 + 528);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(a1 + 528) = 0;
  }
  v12 = *(const void **)(a1 + 536);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(a1 + 536) = 0;
  }
  v13 = *(void **)(a1 + 456);
  if (v13)
  {
    *(_QWORD *)(a1 + 456) = 0;
    free(v13);
  }
  v14 = *(void **)(a1 + 280);
  if (v14)
  {
    *(_QWORD *)(a1 + 280) = 0;
    free(v14);
  }
  v15 = *(void **)(a1 + 472);
  if (v15)
  {
    *(_QWORD *)(a1 + 472) = 0;
    free(v15);
  }
  v16 = *(void **)(a1 + 480);
  if (v16)
  {
    *(_QWORD *)(a1 + 480) = 0;
    free(v16);
  }
  v17 = *(void **)(a1 + 496);
  if (v17)
  {
    *(_QWORD *)(a1 + 496) = 0;
    free(v17);
  }
  v18 = *(void **)(a1 + 504);
  if (v18)
  {
    *(_QWORD *)(a1 + 504) = 0;
    free(v18);
  }
  v19 = *(const void **)(a1 + 544);
  if (v19)
  {
    CFRelease(v19);
    *(_QWORD *)(a1 + 544) = 0;
  }
}

__CFString *IFFItemCopyFormattingDesc(uint64_t a1, const __CFDictionary *a2)
{
  const __CFAllocator *v3;
  __CFString *Mutable;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  const __CFArray *v8;
  CFIndex Count;
  const __CFArray *v10;
  CFIndex v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const __CFArray *v15;
  uint64_t v16;
  uint64_t v18;

  v3 = CFGetAllocator((CFTypeRef)a1);
  Mutable = CFStringCreateMutable(v3, 0);
  if (Mutable)
  {
    v18 = *(unsigned __int8 *)(a1 + 16);
    v5 = *(unsigned int *)(a1 + 40);
    v6 = *(_DWORD *)(a1 + 44);
    v7 = *(unsigned int *)(a1 + 512);
    v8 = *(const __CFArray **)(a1 + 520);
    if (v8)
      Count = CFArrayGetCount(v8);
    else
      Count = 0;
    v10 = *(const __CFArray **)(a1 + 528);
    if (v10)
      v11 = CFArrayGetCount(v10);
    else
      v11 = 0;
    v12 = HIBYTE(v6);
    v13 = BYTE2(v6);
    v14 = v6;
    v15 = *(const __CFArray **)(a1 + 544);
    v16 = BYTE1(v6);
    if (v15)
      v15 = (const __CFArray *)CFArrayGetCount(v15);
    CFStringAppendFormat(Mutable, a2, CFSTR("<IFFItem %p>{\n\tID: %d\n\tvalid: %d\n\ttype: %c%c%c%c\n\tderivationReferences: %d\n\tnumReferences: %d\n\tnumInboundReferences: %d\n\tnumGroups: %d\n}"), a1, v5, v18, v12, v13, v16, v14, v7, Count, v11, v15);
  }
  return Mutable;
}

__CFString *IFFItemCopyDebugDesc(uint64_t a1)
{
  return IFFItemCopyFormattingDesc(a1, 0);
}

uint64_t RegisterIFFItemGroupType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sIFFItemGroupID = result;
  return result;
}

double InitIFFItemGroup(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void FinalizeIFFItemGroup(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 48);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 48) = 0;
  }
}

uint64_t RegisterIFFItemInformationType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sIFFItemInformationID = result;
  return result;
}

double InitIFFItemInformation(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 176) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void FinalizeIFFItemInformation(uint64_t a1)
{
  const __CFArray *v2;
  CFIndex v3;
  _QWORD *ValueAtIndex;
  const void *v5;
  const __CFArray *v6;
  CFIndex v7;
  const void *v8;
  _QWORD *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;

  v2 = *(const __CFArray **)(a1 + 136);
  if (v2)
  {
    if (CFArrayGetCount(v2) >= 1)
    {
      v3 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 136), v3);
        IFFPictureRecordFree(ValueAtIndex);
        ++v3;
      }
      while (v3 < CFArrayGetCount(*(CFArrayRef *)(a1 + 136)));
    }
    v5 = *(const void **)(a1 + 136);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(a1 + 136) = 0;
    }
  }
  v6 = *(const __CFArray **)(a1 + 104);
  if (v6)
  {
    if (CFArrayGetCount(v6) >= 1)
    {
      v7 = 0;
      do
      {
        v8 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 104), v7);
        if (v8)
        {
          v9 = v8;
          free(*((void **)v8 + 3));
          v10 = (const void *)v9[4];
          if (v10)
            CFRelease(v10);
          free(v9);
        }
        ++v7;
      }
      while (v7 < CFArrayGetCount(*(CFArrayRef *)(a1 + 104)));
    }
    v11 = *(const void **)(a1 + 104);
    if (v11)
    {
      CFRelease(v11);
      *(_QWORD *)(a1 + 104) = 0;
    }
  }
  v12 = *(const void **)(a1 + 96);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(a1 + 96) = 0;
  }
  v13 = *(const void **)(a1 + 16);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v14 = *(const void **)(a1 + 144);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(a1 + 144) = 0;
  }
  v15 = *(const void **)(a1 + 152);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(a1 + 152) = 0;
  }
  v16 = *(const void **)(a1 + 160);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(a1 + 160) = 0;
  }
  v17 = *(const void **)(a1 + 168);
  if (v17)
  {
    CFRelease(v17);
    *(_QWORD *)(a1 + 168) = 0;
  }
  v18 = *(const void **)(a1 + 112);
  if (v18)
  {
    CFRelease(v18);
    *(_QWORD *)(a1 + 112) = 0;
  }
}

uint64_t FigPlayerInterstitialEventCreate(uint64_t a1, const void *a2, __int128 *a3, const void *a4, const __CFArray *a5, const void *a6, int a7, int a8, char a9, char a10, char a11, __int128 *a12, __int128 *a13, int a14, char a15, char a16, const __CFDictionary *a17, uint64_t *a18)
{
  const __CFAllocator *v23;
  uint64_t Instance;
  uint64_t v25;
  CFTypeRef v26;
  __int128 v27;
  CFTypeRef v28;
  uint64_t v29;
  CFArrayRef Copy;
  CFTypeRef v31;
  __int128 v32;
  __int128 v33;
  CFDictionaryRef v34;
  const __CFUUID *v35;

  if (!a18)
  {
    FigSignalErrorAt();
    return 0;
  }
  v23 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MEMORY[0x19402F294](&FigPlayerInterstitialEventGetTypeID_sFigPlayerInterstitialEventRegisterOnce, figPlayerInterstitialEvent_initOnce);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v25 = Instance;
    *(_QWORD *)(Instance + 16) = FigCFWeakReferenceHolderCreateWithReferencedObject();
    if (a2)
      v26 = CFRetain(a2);
    else
      v26 = 0;
    *(_QWORD *)(v25 + 24) = v26;
    v27 = *a3;
    *(_QWORD *)(v25 + 48) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(v25 + 32) = v27;
    if (a4)
      v28 = CFRetain(a4);
    else
      v28 = 0;
    *(_QWORD *)(v25 + 56) = v28;
    v29 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)(v25 + 64) = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)(v25 + 80) = *(_QWORD *)(v29 + 16);
    if (a5)
      Copy = CFArrayCreateCopy(v23, a5);
    else
      Copy = 0;
    *(_QWORD *)(v25 + 88) = Copy;
    if (a6)
      v31 = CFRetain(a6);
    else
      v31 = 0;
    *(_QWORD *)(v25 + 96) = v31;
    *(_DWORD *)(v25 + 104) = a7;
    *(_DWORD *)(v25 + 108) = a8;
    *(_BYTE *)(v25 + 112) = a9;
    *(_BYTE *)(v25 + 113) = a10;
    *(_BYTE *)(v25 + 114) = a11;
    v32 = *a12;
    *(_QWORD *)(v25 + 132) = *((_QWORD *)a12 + 2);
    *(_OWORD *)(v25 + 116) = v32;
    v33 = *a13;
    *(_QWORD *)(v25 + 156) = *((_QWORD *)a13 + 2);
    *(_OWORD *)(v25 + 140) = v33;
    *(_QWORD *)(v25 + 184) = FigSimpleMutexCreate();
    *(_DWORD *)(v25 + 280) = a14;
    *(_BYTE *)(v25 + 284) = a15;
    *(_BYTE *)(v25 + 285) = a16;
    *(_DWORD *)(v25 + 288) = -1;
    if (a17)
      v34 = CFDictionaryCreateCopy(v23, a17);
    else
      v34 = CFDictionaryCreate(v23, 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *(_QWORD *)(v25 + 168) = v34;
    if (!a2)
    {
      v35 = CFUUIDCreate(v23);
      *(_QWORD *)(v25 + 24) = CFUUIDCreateString(v23, v35);
      if (v35)
        CFRelease(v35);
    }
    *a18 = v25;
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t FigPlayerInterstitialEventCreateFromDictionary(uint64_t a1, const __CFDictionary *a2, uint64_t *a3)
{
  const __CFAllocator *v5;
  uint64_t Instance;
  uint64_t v7;
  CFTypeRef *v8;
  int CMTimeIfPresent;
  int DoubleIfPresent;
  const void *v11;
  const void *v12;
  CFTypeRef *v13;
  const __CFArray *v14;
  const __CFArray *v15;
  CFIndex Count;
  CFIndex v17;
  CFIndex v18;
  const CFArrayCallBacks *v19;
  const __CFString *ValueAtIndex;
  CFURLRef v21;
  __CFArray *Mutable;
  CFTypeRef *v23;
  const void *v24;
  uint64_t result;
  void *value;
  CFAbsoluteTime at;

  value = 0;
  if (!a2 || !a3)
    goto LABEL_38;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MEMORY[0x19402F294](&FigPlayerInterstitialEventGetTypeID_sFigPlayerInterstitialEventRegisterOnce, figPlayerInterstitialEvent_initOnce);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v7 = Instance;
  *(_QWORD *)(Instance + 16) = FigCFWeakReferenceHolderCreateWithReferencedObject();
  *(_QWORD *)(v7 + 184) = FigSimpleMutexCreate();
  v8 = (CFTypeRef *)(v7 + 24);
  if (!CFDictionaryGetValueIfPresent(a2, CFSTR("identifier"), (const void **)(v7 + 24)))
    goto LABEL_38;
  if (*v8)
    CFRetain(*v8);
  at = 0.0;
  CMTimeIfPresent = FigCFDictionaryGetCMTimeIfPresent();
  DoubleIfPresent = FigCFDictionaryGetDoubleIfPresent();
  if (!(CMTimeIfPresent | DoubleIfPresent))
    goto LABEL_38;
  if (DoubleIfPresent)
    *(_QWORD *)(v7 + 56) = CFDateCreate(v5, at);
  FigCFDictionaryGetCMTimeIfPresent();
  FigCFDictionaryGetCMTimeIfPresent();
  FigCFDictionaryGetCMTimeIfPresent();
  if (!FigCFDictionaryGetInt64IfPresent())
  {
LABEL_38:
    FigSignalErrorAt();
    return 0;
  }
  *(_DWORD *)(v7 + 104) = 0;
  if (FigCFDictionaryGetInt64IfPresent())
    *(_DWORD *)(v7 + 108) = 0;
  if (FigCFDictionaryGetInt64IfPresent())
    *(_DWORD *)(v7 + 280) = 0;
  v11 = CFDictionaryGetValue(a2, CFSTR("PreRoll"));
  v12 = (const void *)*MEMORY[0x1E0C9AE50];
  *(_BYTE *)(v7 + 112) = v11 == (const void *)*MEMORY[0x1E0C9AE50];
  *(_BYTE *)(v7 + 113) = CFDictionaryGetValue(a2, CFSTR("PostRoll")) == v12;
  *(_BYTE *)(v7 + 114) = CFDictionaryGetValue(a2, CFSTR("CueOnce")) == v12;
  *(_BYTE *)(v7 + 284) = CFDictionaryGetValue(a2, CFSTR("SupplementsPrimaryContent")) == v12;
  *(_BYTE *)(v7 + 285) = CFDictionaryGetValue(a2, CFSTR("ContentMayVary")) == v12;
  v13 = (CFTypeRef *)(v7 + 168);
  if (CFDictionaryGetValueIfPresent(a2, CFSTR("ExtraAttributes"), (const void **)(v7 + 168)))
  {
    if (*v13)
      CFRetain(*v13);
  }
  else
  {
    *v13 = CFDictionaryCreate(v5, 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  }
  CFDictionaryGetValueIfPresent(a2, CFSTR("assetListURL"), (const void **)&value);
  if (value)
    *(_QWORD *)(v7 + 96) = CFURLCreateWithString(v5, (CFStringRef)value, 0);
  v14 = (const __CFArray *)CFDictionaryGetValue(a2, CFSTR("URLs"));
  if (v14 && (v15 = v14, Count = CFArrayGetCount(v14), Count >= 1))
  {
    v17 = Count;
    v18 = 0;
    v19 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    while (1)
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v15, v18);
      v21 = ValueAtIndex ? CFURLCreateWithString(v5, ValueAtIndex, 0) : 0;
      Mutable = *(__CFArray **)(v7 + 88);
      if (!Mutable)
      {
        Mutable = CFArrayCreateMutable(v5, 0, v19);
        *(_QWORD *)(v7 + 88) = Mutable;
        if (!Mutable)
          return FigSignalErrorAt();
      }
      CFArrayAppendValue(Mutable, v21);
      if (v21)
        CFRelease(v21);
      if (v17 == ++v18)
        goto LABEL_32;
    }
  }
  else
  {
LABEL_32:
    FigCFDictionaryGetCFIndexIfPresent();
    FigCFDictionaryGetCMTimeIfPresent();
    FigCFDictionaryGetCMTimeIfPresent();
    FigCFDictionaryGetCMTimeIfPresent();
    FigCFDictionaryGetValueIfPresent();
    v23 = (CFTypeRef *)(v7 + 176);
    FigCFDictionaryGetValueIfPresent();
    v24 = *(const void **)(v7 + 272);
    if (v24)
      CFRetain(v24);
    if (*v23)
      CFRetain(*v23);
    result = 0;
    *a3 = v7;
  }
  return result;
}

__CFDictionary *FigPlayerInterstitialEventCopyAsDictionary(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFDictionary *Mutable;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void **v7;
  const __CFURL *v8;
  const __CFURL *v9;
  const __CFURL *v10;
  CFStringRef v11;
  const __CFArray *v12;
  CFIndex Count;
  CFIndex v14;
  CFIndex v15;
  __CFArray *v16;
  const CFArrayCallBacks *v17;
  const void *ValueAtIndex;
  const __CFURL *v19;
  const __CFURL *v20;
  const __CFURL *v21;
  CFStringRef v22;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 184));
  if (Mutable)
  {
    CFDictionarySetValue(Mutable, CFSTR("identifier"), *(const void **)(a1 + 24));
    if ((*(_BYTE *)(a1 + 44) & 1) != 0)
      FigCFDictionarySetCMTime();
    v6 = *(_QWORD *)(a1 + 56);
    if (v6)
    {
      MEMORY[0x194029D14](v6, v4, v5);
      FigCFDictionarySetDouble();
    }
    if ((*(_BYTE *)(a1 + 128) & 1) != 0)
      FigCFDictionarySetCMTime();
    if ((*(_BYTE *)(a1 + 76) & 1) != 0)
      FigCFDictionarySetCMTime();
    if ((*(_BYTE *)(a1 + 152) & 1) != 0)
      FigCFDictionarySetCMTime();
    FigCFDictionarySetInt64();
    CFDictionarySetValue(Mutable, CFSTR("ExtraAttributes"), *(const void **)(a1 + 168));
    FigCFDictionarySetInt64();
    FigCFDictionarySetInt64();
    v7 = (const void **)MEMORY[0x1E0C9AE50];
    if (*(_BYTE *)(a1 + 112))
      CFDictionarySetValue(Mutable, CFSTR("PreRoll"), (const void *)*MEMORY[0x1E0C9AE50]);
    if (*(_BYTE *)(a1 + 113))
      CFDictionarySetValue(Mutable, CFSTR("PostRoll"), *v7);
    if (*(_BYTE *)(a1 + 114))
      CFDictionarySetValue(Mutable, CFSTR("CueOnce"), *v7);
    v8 = *(const __CFURL **)(a1 + 96);
    if (v8)
    {
      v9 = CFURLCopyAbsoluteURL(v8);
      if (v9)
      {
        v10 = v9;
        v11 = CFURLGetString(v9);
        CFDictionarySetValue(Mutable, CFSTR("assetListURL"), v11);
        CFRelease(v10);
      }
    }
    if (*(_BYTE *)(a1 + 284))
      CFDictionarySetValue(Mutable, CFSTR("SupplementsPrimaryContent"), *v7);
    if (*(_BYTE *)(a1 + 285))
      CFDictionarySetValue(Mutable, CFSTR("ContentMayVary"), *v7);
    v12 = *(const __CFArray **)(a1 + 88);
    if (v12)
    {
      Count = CFArrayGetCount(v12);
      if (Count >= 1)
      {
        v14 = Count;
        v15 = 0;
        v16 = 0;
        v17 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), v15);
          if (!ValueAtIndex)
            break;
          v19 = (const __CFURL *)CFRetain(ValueAtIndex);
          if (!v16)
            goto LABEL_30;
LABEL_31:
          if (v19 && v16)
          {
            v20 = CFURLCopyAbsoluteURL(v19);
            if (v20)
            {
              v21 = v20;
              v22 = CFURLGetString(v20);
              CFArrayAppendValue(v16, v22);
              CFRelease(v21);
            }
LABEL_36:
            CFRelease(v19);
            goto LABEL_37;
          }
          if (v19)
            goto LABEL_36;
LABEL_37:
          if (v14 == ++v15)
          {
            if (v16)
            {
              CFDictionarySetValue(Mutable, CFSTR("URLs"), v16);
              CFRelease(v16);
            }
            goto LABEL_43;
          }
        }
        v19 = 0;
        if (v16)
          goto LABEL_31;
LABEL_30:
        v16 = CFArrayCreateMutable(v2, v14, v17);
        goto LABEL_31;
      }
    }
LABEL_43:
    FigCFDictionarySetCFIndex();
    if ((*(_BYTE *)(a1 + 212) & 1) != 0)
      FigCFDictionarySetCMTime();
    if ((*(_BYTE *)(a1 + 260) & 1) != 0)
      FigCFDictionarySetCMTime();
    if ((*(_BYTE *)(a1 + 236) & 1) != 0)
      FigCFDictionarySetCMTime();
    if (*(_QWORD *)(a1 + 272))
      FigCFDictionarySetValue();
    if (*(_QWORD *)(a1 + 176))
      FigCFDictionarySetValue();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 184));
  return Mutable;
}

uint64_t FigPlayerInterstitialEventValidate(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 184));
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_12;
  v2 = *(_QWORD *)(a1 + 56);
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    if (v2)
      goto LABEL_12;
  }
  else if (!v2)
  {
    goto LABEL_12;
  }
  v3 = *(_QWORD *)(a1 + 96);
  if (!*(_QWORD *)(a1 + 88))
  {
    if (v3)
      goto LABEL_10;
LABEL_12:
    FigSignalErrorAt();
    goto LABEL_13;
  }
  if (v3)
    goto LABEL_12;
LABEL_10:
  if (*(_BYTE *)(a1 + 112) && *(_BYTE *)(a1 + 113))
    goto LABEL_12;
LABEL_13:
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 184));
  return 0;
}

void FigPlayerInterstitialEventSetImmutable(uint64_t a1)
{
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 184));
  *(_BYTE *)(a1 + 115) = 1;
  JUMPOUT(0x19402EF04);
}

unsigned __int8 *FigPlayerInterstitialEventIsImmutable(uint64_t a1)
{
  return fpie_GetBooleanProperty(a1, (unsigned __int8 *)(a1 + 115));
}

unsigned __int8 *fpie_GetBooleanProperty(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;

  if (!a1)
    return 0;
  v2 = a2;
  if (a2)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 184));
    v2 = (unsigned __int8 *)*v2;
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 184));
  }
  else
  {
    FigSignalErrorAt();
  }
  return v2;
}

uint64_t FigPlayerInterstitialEventCopyPrimaryItem(uint64_t a1)
{
  uint64_t v2;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 184));
  v2 = FigCFWeakReferenceHolderCopyReferencedObject();
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 184));
  return v2;
}

void FigPlayerInterstitialEventSetPrimaryItem(_QWORD *a1)
{
  const void *v2;

  MEMORY[0x19402EEEC](a1[23]);
  ++a1[24];
  v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  a1[2] = FigCFWeakReferenceHolderCreateWithReferencedObject();
  JUMPOUT(0x19402EF04);
}

CFTypeRef *FigPlayerInterstitialEventCopyIdentifier(uint64_t a1)
{
  return fpie_CopyValueProperty(a1, (CFTypeRef *)(a1 + 24));
}

CFTypeRef *fpie_CopyValueProperty(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef *v2;

  if (!a1)
    return 0;
  v2 = a2;
  if (a2)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 184));
    if (*v2)
      v2 = (CFTypeRef *)CFRetain(*v2);
    else
      v2 = 0;
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 184));
  }
  else
  {
    FigSignalErrorAt();
  }
  return v2;
}

uint64_t FigPlayerInterstitialEventSetIdentifier(uint64_t a1, const void *a2)
{
  return fpie_SetValueProperty(a1, (const void **)(a1 + 24), a2);
}

uint64_t fpie_SetValueProperty(uint64_t result, const void **a2, const void *a3)
{
  uint64_t v5;
  const void *v6;

  if (result)
  {
    if (a2)
    {
      v5 = result;
      MEMORY[0x19402EEEC](*(_QWORD *)(result + 184));
      ++*(_QWORD *)(v5 + 192);
      v6 = *a2;
      *a2 = a3;
      if (a3)
        CFRetain(a3);
      if (v6)
        CFRelease(v6);
      JUMPOUT(0x19402EF04);
    }
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigPlayerInterstitialEventGetStartTime@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return fpie_GetTimeProperty(a1, a1 + 32, a2);
}

uint64_t fpie_GetTimeProperty@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;

  v4 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)a3 = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(v4 + 16);
  if (result)
  {
    if (a2)
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(result + 184));
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
      JUMPOUT(0x19402EF04);
    }
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigPlayerInterstitialEventSetStartTime(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  return fpie_SetTimeProperty(a1, a1 + 32, &v3);
}

uint64_t fpie_SetTimeProperty(uint64_t result, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  __int128 v6;

  if (result)
  {
    if (a2)
    {
      v5 = result;
      MEMORY[0x19402EEEC](*(_QWORD *)(result + 184));
      ++*(_QWORD *)(v5 + 192);
      v6 = *a3;
      *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
      *(_OWORD *)a2 = v6;
      JUMPOUT(0x19402EF04);
    }
    return FigSignalErrorAt();
  }
  return result;
}

void FigPlayerInterstitialEventSetPlannedDuration(uint64_t a1, __int128 *a2)
{
  __int128 v4;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 184));
  if ((*((_DWORD *)a2 + 3) & 0x1D) == 1 && (*(_BYTE *)(a1 + 76) & 1) == 0)
  {
    ++*(_QWORD *)(a1 + 192);
    v4 = *a2;
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 64) = v4;
  }
  JUMPOUT(0x19402EF04);
}

CFTypeRef *FigPlayerInterstitialEventCopyStartDate(uint64_t a1)
{
  return fpie_CopyValueProperty(a1, (CFTypeRef *)(a1 + 56));
}

uint64_t FigPlayerInterstitialEventSetStartDate(uint64_t a1, const void *a2)
{
  return fpie_SetValueProperty(a1, (const void **)(a1 + 56), a2);
}

uint64_t FigPlayerInterstitialEventGetStatedDuration@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return fpie_GetTimeProperty(a1, a1 + 64, a2);
}

CFTypeRef *FigPlayerInterstitialEventCopyInterstitialAssetURLs(uint64_t a1)
{
  return fpie_CopyValueProperty(a1, (CFTypeRef *)(a1 + 88));
}

void FigPlayerInterstitialEventSetInterstitialAssetURLs(uint64_t a1, const __CFArray *a2)
{
  CFArrayRef Copy;

  Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2);
  fpie_SetValueProperty(a1, (const void **)(a1 + 88), Copy);
  if (Copy)
    CFRelease(Copy);
}

uint64_t FigPlayerInterstitialEventGetResumptionOffset@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return fpie_GetTimeProperty(a1, a1 + 116, a2);
}

uint64_t FigPlayerInterstitialEventSetResumptionOffset(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  return fpie_SetTimeProperty(a1, a1 + 116, &v3);
}

uint64_t FigPlayerInterstitialEventGetPlayoutLimit@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return fpie_GetTimeProperty(a1, a1 + 140, a2);
}

uint64_t FigPlayerInterstitialEventSetPlayoutLimit(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  return fpie_SetTimeProperty(a1, a1 + 140, &v3);
}

unsigned int *FigPlayerInterstitialEventGetRestrictions(uint64_t a1)
{
  return fpie_GetUInt32Property(a1, (unsigned int *)(a1 + 104));
}

unsigned int *fpie_GetUInt32Property(uint64_t a1, unsigned int *a2)
{
  unsigned int *v2;

  if (!a1)
    return 0;
  v2 = a2;
  if (a2)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 184));
    v2 = (unsigned int *)*v2;
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 184));
  }
  else
  {
    FigSignalErrorAt();
  }
  return v2;
}

uint64_t FigPlayerInterstitialEventSetRestrictions(uint64_t a1, int a2)
{
  return fpie_SetUInt32Property(a1, (_DWORD *)(a1 + 104), a2);
}

uint64_t fpie_SetUInt32Property(uint64_t result, _DWORD *a2, int a3)
{
  uint64_t v5;

  if (result)
  {
    if (a2)
    {
      v5 = result;
      MEMORY[0x19402EEEC](*(_QWORD *)(result + 184));
      ++*(_QWORD *)(v5 + 192);
      *a2 = a3;
      JUMPOUT(0x19402EF04);
    }
    return FigSignalErrorAt();
  }
  return result;
}

unsigned int *FigPlayerInterstitialEventGetSnapOptions(uint64_t a1)
{
  return fpie_GetUInt32Property(a1, (unsigned int *)(a1 + 108));
}

uint64_t FigPlayerInterstitialEventSetSnapOptions(uint64_t a1, int a2)
{
  return fpie_SetUInt32Property(a1, (_DWORD *)(a1 + 108), a2);
}

unsigned __int8 *FigPlayerInterstitialEventIsPreRoll(uint64_t a1)
{
  return fpie_GetBooleanProperty(a1, (unsigned __int8 *)(a1 + 112));
}

uint64_t FigPlayerInterstitialEventSetIsPreRoll(uint64_t a1, char a2)
{
  return fpie_SetBooleanProperty(a1, (_BYTE *)(a1 + 112), a2);
}

uint64_t fpie_SetBooleanProperty(uint64_t result, _BYTE *a2, char a3)
{
  uint64_t v5;

  if (result)
  {
    if (a2)
    {
      v5 = result;
      MEMORY[0x19402EEEC](*(_QWORD *)(result + 184));
      ++*(_QWORD *)(v5 + 192);
      *a2 = a3;
      JUMPOUT(0x19402EF04);
    }
    return FigSignalErrorAt();
  }
  return result;
}

unsigned __int8 *FigPlayerInterstitialEventIsPostRoll(uint64_t a1)
{
  return fpie_GetBooleanProperty(a1, (unsigned __int8 *)(a1 + 113));
}

uint64_t FigPlayerInterstitialEventSetIsPostRoll(uint64_t a1, char a2)
{
  return fpie_SetBooleanProperty(a1, (_BYTE *)(a1 + 113), a2);
}

unsigned __int8 *FigPlayerInterstitialEventCueOnce(uint64_t a1)
{
  return fpie_GetBooleanProperty(a1, (unsigned __int8 *)(a1 + 114));
}

uint64_t FigPlayerInterstitialEventSetCueOnce(uint64_t a1, char a2)
{
  return fpie_SetBooleanProperty(a1, (_BYTE *)(a1 + 114), a2);
}

CFTypeRef *FigPlayerInterstitialEventCopyAssetListUrl(uint64_t a1)
{
  return fpie_CopyValueProperty(a1, (CFTypeRef *)(a1 + 96));
}

uint64_t FigPlayerInterstitialEventSetAssetListUrl(uint64_t a1, const void *a2)
{
  return fpie_SetValueProperty(a1, (const void **)(a1 + 96), a2);
}

CFTypeRef *FigPlayerInterstitialEventCopyExtraAttributes(uint64_t a1)
{
  return fpie_CopyValueProperty(a1, (CFTypeRef *)(a1 + 168));
}

void FigPlayerInterstitialEventSetExtraAttributes(uint64_t a1, const __CFDictionary *a2)
{
  CFDictionaryRef Copy;

  Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2);
  fpie_SetValueProperty(a1, (const void **)(a1 + 168), Copy);
  if (Copy)
    CFRelease(Copy);
}

CFTypeRef *FigPlayerInterstitialEventCopyAssetListResponse(uint64_t a1)
{
  return fpie_CopyValueProperty(a1, (CFTypeRef *)(a1 + 176));
}

uint64_t FigPlayerInterstitialEventSetAssetListResponse(uint64_t a1, const void *a2)
{
  return fpie_SetValueProperty(a1, (const void **)(a1 + 176), a2);
}

uint64_t FigPlayerInterstitialEventGetSeedValue(uint64_t a1)
{
  uint64_t v2;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 184));
  v2 = *(_QWORD *)(a1 + 192);
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 184));
  return v2;
}

uint64_t FigPlayerInterstitialEventSetResolvedStartTime(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  return fpie_SetTimeProperty(a1, a1 + 200, &v3);
}

uint64_t FigPlayerInterstitialEventGetResolvedStartTime@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return fpie_GetTimeProperty(a1, a1 + 200, a2);
}

uint64_t FigPlayerInterstitialEventSetResolvedDuration(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  return fpie_SetTimeProperty(a1, a1 + 224, &v3);
}

uint64_t FigPlayerInterstitialEventGetResolvedDuration@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return fpie_GetTimeProperty(a1, a1 + 224, a2);
}

uint64_t FigPlayerInterstitialEventSetResolvedEndTime(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  return fpie_SetTimeProperty(a1, a1 + 248, &v3);
}

uint64_t FigPlayerInterstitialEventGetResolvedEndTime@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return fpie_GetTimeProperty(a1, a1 + 248, a2);
}

uint64_t FigPlayerInterstitialEventSetLoadedTimeIntervals(uint64_t a1, const void *a2)
{
  return fpie_SetValueProperty(a1, (const void **)(a1 + 272), a2);
}

CFTypeRef *FigPlayerInterstitialEventCopyLoadedTimeIntervals(uint64_t a1)
{
  return fpie_CopyValueProperty(a1, (CFTypeRef *)(a1 + 272));
}

unsigned int *FigPlayerInterstitialEventGetTimelineOccupancy(uint64_t a1)
{
  return fpie_GetUInt32Property(a1, (unsigned int *)(a1 + 280));
}

uint64_t FigPlayerInterstitialEventSetTimelineOccupancy(uint64_t a1, int a2)
{
  return fpie_SetUInt32Property(a1, (_DWORD *)(a1 + 280), a2);
}

unsigned __int8 *FigPlayerInterstitialEventSupplementsPrimaryContent(uint64_t a1)
{
  return fpie_GetBooleanProperty(a1, (unsigned __int8 *)(a1 + 284));
}

uint64_t FigPlayerInterstitialEventSetSupplementsPrimaryContent(uint64_t a1, char a2)
{
  return fpie_SetBooleanProperty(a1, (_BYTE *)(a1 + 284), a2);
}

unsigned __int8 *FigPlayerInterstitialEventContentMayVary(uint64_t a1)
{
  return fpie_GetBooleanProperty(a1, (unsigned __int8 *)(a1 + 285));
}

uint64_t FigPlayerInterstitialEventSetContentMayVary(uint64_t a1, char a2)
{
  return fpie_SetBooleanProperty(a1, (_BYTE *)(a1 + 285), a2);
}

unsigned __int8 *FigPlayerInterstitialEventDidLastPlaybackFail(uint64_t a1)
{
  return fpie_GetBooleanProperty(a1, (unsigned __int8 *)(a1 + 286));
}

uint64_t FigPlayerInterstitialEventSetLastPlaybackFail(uint64_t a1, char a2)
{
  return fpie_SetBooleanProperty(a1, (_BYTE *)(a1 + 286), a2);
}

uint64_t FigPlayerInterstitialEventSetItemSuccessCount(uint64_t result, int a2)
{
  uint64_t v3;

  if (result)
  {
    v3 = result;
    MEMORY[0x19402EEEC](*(_QWORD *)(result + 184));
    ++*(_QWORD *)(v3 + 192);
    *(_DWORD *)(v3 + 288) = a2;
    JUMPOUT(0x19402EF04);
  }
  return result;
}

void FigPlayerInterstitialEventReportItemFailure(uint64_t a1)
{
  int v2;
  BOOL v3;
  int v4;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 184));
  v2 = *(_DWORD *)(a1 + 288);
  v3 = __OFSUB__(v2, 1);
  v4 = v2 - 1;
  if (v4 < 0 == v3)
    *(_DWORD *)(a1 + 288) = v4;
  JUMPOUT(0x19402EF04);
}

uint64_t FigPlayerInterstitialEventResetItemSuccessCount(uint64_t a1)
{
  return FigPlayerInterstitialEventSetItemSuccessCount(a1, -1);
}

BOOL FigPlayerInterstitialEventDidAllItemsFail(uint64_t a1)
{
  _BOOL8 v2;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 184));
  v2 = *(_DWORD *)(a1 + 288) == 0;
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 184));
  return v2;
}

uint64_t FigPlayerInterstitialEventMerge(uint64_t a1, uint64_t a2, const __CFArray *a3)
{
  _DWORD *v6;
  unsigned int UInt32Property;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  CFTypeRef *v12;
  int v13;
  CFTypeRef *v14;
  char v15;
  char v16;
  char v17;
  uint64_t Count;
  CFIndex v19;
  BOOL v20;
  CFIndex i;
  const void *ValueAtIndex;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v26;
  unsigned int v27;
  const __CFArray *v28;
  unsigned int v29;
  unsigned int BooleanProperty;
  int v31;
  CFTypeRef *v32;
  CMTime time2;
  CMTime v34;
  CMTime v35;
  CMTime time1;

  v6 = (_DWORD *)(a1 + 108);
  UInt32Property = fpie_GetUInt32Property(a1, (unsigned int *)(a1 + 108));
  v8 = fpie_GetUInt32Property(a2, (unsigned int *)(a2 + 108));
  memset(&v35, 0, sizeof(v35));
  fpie_GetTimeProperty(a1, a1 + 140, (uint64_t)&v35);
  memset(&v34, 0, sizeof(v34));
  fpie_GetTimeProperty(a2, a2 + 140, (uint64_t)&v34);
  v9 = fpie_GetUInt32Property(a1, (unsigned int *)(a1 + 104));
  v31 = fpie_GetUInt32Property(a2, (unsigned int *)(a2 + 104));
  BooleanProperty = fpie_GetBooleanProperty(a1, (unsigned __int8 *)(a1 + 112));
  v29 = fpie_GetBooleanProperty(a2, (unsigned __int8 *)(a2 + 112));
  v10 = fpie_GetBooleanProperty(a1, (unsigned __int8 *)(a1 + 113));
  v27 = fpie_GetBooleanProperty(a2, (unsigned __int8 *)(a2 + 113));
  v11 = fpie_GetBooleanProperty(a1, (unsigned __int8 *)(a1 + 114));
  v26 = fpie_GetBooleanProperty(a2, (unsigned __int8 *)(a2 + 114));
  v32 = fpie_CopyValueProperty(a1, (CFTypeRef *)(a1 + 168));
  v12 = fpie_CopyValueProperty(a2, (CFTypeRef *)(a2 + 168));
  v28 = a3;
  if (a3)
  {
    if (UInt32Property)
    {
      if (v8 != UInt32Property)
        goto LABEL_55;
    }
    else if (v8)
    {
      fpie_SetUInt32Property(a1, v6, v8);
      v13 = 1;
      goto LABEL_7;
    }
    v13 = 0;
LABEL_7:
    if ((v35.flags & 1) == 0)
    {
      if ((v34.flags & 1) != 0)
      {
        time1 = v34;
        fpie_SetTimeProperty(a1, a1 + 140, (__int128 *)&time1.value);
        v13 = 1;
      }
LABEL_11:
      if (v9)
      {
        if (v9 != v31)
          goto LABEL_55;
      }
      else if (v31)
      {
        fpie_SetUInt32Property(a1, (_DWORD *)(a1 + 104), v31);
        v13 = 1;
      }
      if (BooleanProperty && !v29 || v10 && !v27 || v11 && !v26)
        goto LABEL_55;
      if (BooleanProperty || v10 || v11)
      {
        v14 = v32;
      }
      else
      {
        v14 = v32;
        if (v29 || v27 || v26)
        {
          v15 = fpie_GetBooleanProperty(a2, (unsigned __int8 *)(a2 + 112));
          fpie_SetBooleanProperty(a1, (_BYTE *)(a1 + 112), v15);
          v16 = fpie_GetBooleanProperty(a2, (unsigned __int8 *)(a2 + 113));
          fpie_SetBooleanProperty(a1, (_BYTE *)(a1 + 113), v16);
          v17 = fpie_GetBooleanProperty(a2, (unsigned __int8 *)(a2 + 114));
          fpie_SetBooleanProperty(a1, (_BYTE *)(a1 + 114), v17);
          v13 = 1;
        }
      }
      if (FigCFDictionaryGetCount() || !FigCFDictionaryGetCount())
      {
        Count = FigCFDictionaryGetCount();
        if (Count <= FigCFDictionaryGetCount())
        {
          a3 = 0;
          v23 = (_QWORD *)MEMORY[0x1E0C9AE50];
          if (!v13)
            v23 = (_QWORD *)MEMORY[0x1E0C9AE40];
LABEL_48:
          v24 = 0;
          *(_QWORD *)v28 = *v23;
          if (!v14)
            goto LABEL_50;
          goto LABEL_49;
        }
        a3 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
        v19 = 0;
        v20 = 1;
        if (!a3)
          goto LABEL_34;
LABEL_33:
        for (i = CFArrayGetCount(a3); v19 < i && v20; i = 0)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(a3, v19);
          v20 = CFDictionaryContainsValue((CFDictionaryRef)v12, ValueAtIndex) != 0;
          ++v19;
          if (a3)
            goto LABEL_33;
LABEL_34:
          ;
        }
        if (!v20)
        {
          v24 = FigSignalErrorAt();
          if (!v14)
            goto LABEL_50;
LABEL_49:
          CFRelease(v14);
          goto LABEL_50;
        }
      }
      else
      {
        a3 = 0;
      }
      FigPlayerInterstitialEventSetExtraAttributes(a1, (const __CFDictionary *)v12);
      v23 = (_QWORD *)MEMORY[0x1E0C9AE50];
      goto LABEL_48;
    }
    time1 = v35;
    time2 = v34;
    if (!CMTimeCompare(&time1, &time2))
      goto LABEL_11;
LABEL_55:
    v24 = FigSignalErrorAt();
    a3 = 0;
    goto LABEL_57;
  }
  v24 = FigSignalErrorAt();
LABEL_57:
  v14 = v32;
  if (v32)
    goto LABEL_49;
LABEL_50:
  if (a3)
    CFRelease(a3);
  if (v12)
    CFRelease(v12);
  return v24;
}

uint64_t FigPlayerInterstitialEventsCreateFromTaggedRangeMetadata(const __CFArray *a1, uint64_t a2, __CFArray **a3)
{
  CFIndex v3;
  __CFArray *v4;
  const __CFAllocator *v5;
  CMTimeFlags v6;
  CMTimeEpoch v7;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  const void *v10;
  CFTypeID TypeID;
  const __CFArray *FirstMetadataValueForKey;
  const __CFString *v13;
  CFTypeID v14;
  CFArrayRef v15;
  const __CFString *v16;
  const __CFArray *v17;
  const __CFString *v18;
  CFTypeID v19;
  const __CFURL *v20;
  const __CFString *v21;
  _BOOL4 v22;
  const __CFString *v23;
  _BOOL4 v24;
  int v25;
  int v26;
  const void *v27;
  CFTypeID v28;
  CFTypeID v29;
  int DoubleIfPresent;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  _BOOL4 v33;
  CMTimeFlags v34;
  const void *v35;
  const void *v36;
  CFTypeID v37;
  CFTypeID v38;
  double v39;
  double v40;
  const __CFArray *v41;
  CMTimeEpoch v42;
  CMTimeFlags v43;
  const __CFArray *v44;
  CFTypeID v45;
  Float64 v46;
  const __CFArray *v47;
  const __CFArray *v48;
  CFTypeID v49;
  Float64 v50;
  _BOOL4 v51;
  int v52;
  char v53;
  const __CFArray *v54;
  const __CFArray *v55;
  CFIndex v56;
  CFIndex v57;
  CFIndex i;
  const __CFDictionary *v59;
  const __CFString *v60;
  CFTypeID v61;
  const void *v62;
  uint64_t v63;
  _QWORD *v64;
  CFMutableArrayRef Mutable;
  CMTimeFlags v68;
  const __CFAllocator *v69;
  CMTimeEpoch v71;
  CFIndex Count;
  int v74;
  char v75;
  CMTimeEpoch v76;
  char v77;
  char v78;
  char v79;
  _BOOL4 v80;
  __CFArray *v81;
  _BOOL4 v82;
  int v83;
  const __CFArray *v84;
  CFURLRef v85;
  const void *v86;
  __CFDictionary *theDict;
  CMTimeFlags v88;
  CMTimeEpoch v89;
  const void *v90;
  CMTime v91;
  Float64 seconds;
  CMTime v93;
  CMTime v94;
  _QWORD *v95;
  CMTime time2;
  CMTime values;
  CMTimeValue v98;
  CMTimeScale timescale;
  CMTimeValue v100;
  CMTimeScale v101;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  Count = CFArrayGetCount(a1);
  if (Count < 1)
  {
    v4 = 0;
LABEL_87:
    v63 = 0;
    *a3 = v4;
    return v63;
  }
  v3 = 0;
  v4 = 0;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v6 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
  v7 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v69 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v68 = v6;
  v71 = v7;
  while (1)
  {
    v95 = 0;
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v3);
    CFDictionaryGetValue(ValueAtIndex, CFSTR("TaggedRangeMetadataKey_Class"));
    if (!FigCFEqual())
      goto LABEL_84;
    *(_OWORD *)&v94.value = *MEMORY[0x1E0CA2E18];
    v94.epoch = v7;
    v100 = *MEMORY[0x1E0CA2E18];
    v101 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
    v98 = v100;
    timescale = v101;
    *(_OWORD *)&v93.value = *(_OWORD *)&v94.value;
    v93.epoch = v7;
    seconds = 0.0;
    Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("TaggedRangeMetadataKey_ID"));
    if (!Value)
      break;
    v10 = Value;
    TypeID = CFStringGetTypeID();
    if (TypeID != CFGetTypeID(v10))
      break;
    theDict = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!theDict)
      break;
    v86 = v10;
    FirstMetadataValueForKey = fpie_GetFirstMetadataValueForKey(ValueAtIndex);
    if (!FirstMetadataValueForKey
      || (v13 = (const __CFString *)FirstMetadataValueForKey, v14 = CFStringGetTypeID(), v14 != CFGetTypeID(v13)))
    {
      v16 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, CFSTR("TaggedRangeMetadataKey_BaseURL"));
      v17 = fpie_GetFirstMetadataValueForKey(ValueAtIndex);
      if (!v17)
        break;
      v18 = (const __CFString *)v17;
      v19 = CFStringGetTypeID();
      if (v19 != CFGetTypeID(v18))
        break;
      if (v16)
      {
        v20 = CFURLCreateWithString(v5, v16, 0);
        v85 = CFURLCreateWithString(v5, v18, v20);
        if (v20)
          CFRelease(v20);
      }
      else
      {
        v85 = CFURLCreateWithString(v5, v18, 0);
      }
      v84 = 0;
      goto LABEL_21;
    }
    values.value = 0;
    values.value = (CMTimeValue)CFURLCreateWithString(v5, v13, 0);
    if (!values.value)
      break;
    v15 = CFArrayCreate(v5, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
    if (values.value)
      CFRelease((CFTypeRef)values.value);
    if (!v15)
      break;
    v84 = v15;
    v85 = 0;
LABEL_21:
    v21 = (const __CFString *)fpie_GetFirstMetadataValueForKey(ValueAtIndex);
    v22 = fpie_MetadataStringListContainsString(v21, CFSTR("SKIP")) != 0;
    v82 = fpie_MetadataStringListContainsString(v21, CFSTR("JUMP")) != 0;
    v23 = (const __CFString *)fpie_GetFirstMetadataValueForKey(ValueAtIndex);
    v24 = fpie_MetadataStringListContainsString(v23, CFSTR("OUT")) != 0;
    v25 = fpie_MetadataStringListContainsString(v23, CFSTR("IN"));
    v26 = v24 | 2;
    if (!v25)
      v26 = v24;
    v83 = v26;
    v27 = fpie_GetFirstMetadataValueForKey(ValueAtIndex);
    if (v27 || (v27 = CFDictionaryGetValue(ValueAtIndex, CFSTR("TaggedRangeMetadataKey_Cue"))) != 0)
    {
      v28 = CFStringGetTypeID();
      if (v28 != CFGetTypeID(v27))
        break;
    }
    v79 = FigCFStringFind();
    v78 = FigCFStringFind();
    v77 = FigCFStringFind();
    v90 = CFDictionaryGetValue(ValueAtIndex, CFSTR("TaggedRangeMetadataKey_StartDate"));
    if (!v90)
    {
      v29 = CFDateGetTypeID();
      if (v29 == CFGetTypeID(0))
        FigCFDictionaryGetCMTimeIfPresent();
    }
    DoubleIfPresent = FigCFDictionaryGetDoubleIfPresent();
    flags = v6;
    epoch = v7;
    if (DoubleIfPresent)
    {
      CMTimeMakeWithSeconds(&values, seconds, 1000000);
      v98 = values.value;
      flags = values.flags;
      timescale = values.timescale;
      epoch = values.epoch;
    }
    v89 = epoch;
    if ((flags & 1) == 0)
    {
      v33 = v22;
      v34 = flags;
      v35 = CFDictionaryGetValue(ValueAtIndex, CFSTR("TaggedRangeMetadataKey_EndDate"));
      if (v35 && (v36 = v35, v37 = CFDateGetTypeID(), v38 = CFGetTypeID(v36), v90))
      {
        flags = v34;
        v22 = v33;
        if (v37 == v38)
        {
          v39 = MEMORY[0x194029D14](v36);
          v40 = MEMORY[0x194029D14](v90);
          CMTimeMakeWithSeconds(&values, v39 - v40, 1000000);
          v98 = values.value;
          flags = values.flags;
          timescale = values.timescale;
          v89 = values.epoch;
        }
      }
      else
      {
        flags = v34;
        v22 = v33;
      }
    }
    v88 = flags;
    if ((flags & 1) == 0 && FigCFDictionaryGetDoubleIfPresent())
    {
      CMTimeMakeWithSeconds(&values, seconds, 1000000);
      v98 = values.value;
      v88 = values.flags;
      timescale = values.timescale;
      v89 = values.epoch;
    }
    v41 = fpie_GetFirstMetadataValueForKey(ValueAtIndex);
    v42 = v7;
    v43 = v6;
    if (v41)
    {
      v44 = v41;
      v45 = CFNumberGetTypeID();
      v42 = v71;
      v43 = v6;
      if (v45 == CFGetTypeID(v44))
      {
        FigGetDoubleFromCFTypeWithDefault();
        CMTimeMakeWithSeconds(&values, v46, 1000000);
        v100 = values.value;
        v43 = values.flags;
        v101 = values.timescale;
        v42 = values.epoch;
      }
    }
    v47 = fpie_GetFirstMetadataValueForKey(ValueAtIndex);
    if (v47)
    {
      v48 = v47;
      v49 = CFNumberGetTypeID();
      if (v49 == CFGetTypeID(v48))
      {
        FigGetDoubleFromCFTypeWithDefault();
        CMTimeMakeWithSeconds(&v93, v50, 1000000);
      }
    }
    v76 = v42;
    if ((v43 & 0x1D) == 1)
    {
      values.value = v100;
      values.timescale = v101;
      values.flags = v43;
      values.epoch = v42;
      time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      v51 = CMTimeCompare(&values, &time2) > 0;
    }
    else
    {
      v51 = 0;
    }
    v80 = v22;
    v81 = v4;
    fpie_GetFirstMetadataValueForKey(ValueAtIndex);
    fpie_GetFirstMetadataValueForKey(ValueAtIndex);
    v75 = FigCFEqual();
    if (FigCFEqual())
    {
      v74 = 0;
    }
    else
    {
      if (FigCFEqual())
        v52 = 1;
      else
        v52 = v51;
      v74 = v52;
    }
    fpie_GetFirstMetadataValueForKey(ValueAtIndex);
    v53 = FigCFEqual() == 0;
    v54 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, CFSTR("TaggedRangeMetadataKey_MetadataArray"));
    if (v54)
    {
      v55 = v54;
      v56 = CFArrayGetCount(v54);
      if (v56 >= 1)
      {
        v57 = v56;
        for (i = 0; i != v57; ++i)
        {
          v59 = (const __CFDictionary *)CFArrayGetValueAtIndex(v55, i);
          v60 = (const __CFString *)CFDictionaryGetValue(v59, CFSTR("key"));
          v61 = CFStringGetTypeID();
          if (v61 == CFGetTypeID(v60)
            && CFStringHasPrefix(v60, CFSTR("X-"))
            && !CFEqual(v60, CFSTR("X-ASSET-URI"))
            && !CFEqual(v60, CFSTR("X-ASSET-LIST"))
            && !CFEqual(v60, CFSTR("X-RESTRICT"))
            && !CFEqual(v60, CFSTR("X-SNAP"))
            && !CFEqual(v60, CFSTR("X-CUE"))
            && !CFEqual(v60, CFSTR("X-RESUME-OFFSET"))
            && !CFEqual(v60, CFSTR("X-PLAYOUT-LIMIT"))
            && !CFEqual(v60, CFSTR("X-TIMELINE-STYLE"))
            && !CFEqual(v60, CFSTR("X-TIMELINE-OCCUPIES"))
            && !CFEqual(v60, CFSTR("X-CONTENT-MAY-VARY")))
          {
            v62 = CFDictionaryGetValue(v59, CFSTR("value"));
            CFDictionarySetValue(theDict, v60, v62);
          }
        }
      }
    }
    values = v94;
    time2.value = v100;
    time2.timescale = v101;
    time2.flags = v43;
    time2.epoch = v76;
    v91 = v93;
    v63 = FigPlayerInterstitialEventCreate(a2, v86, (__int128 *)&values.value, v90, v84, v85, v82 | (4 * v80), v83, v79, v78, v77, (__int128 *)&time2.value, (__int128 *)&v91.value, v74, v75, v53, theDict, (uint64_t *)&v95);
    if (v84)
      CFRelease(v84);
    v4 = v81;
    v5 = v69;
    v6 = v68;
    v7 = v71;
    if (v90)
      CFRelease(v90);
    CFRelease(theDict);
    if (v85)
      CFRelease(v85);
    if ((_DWORD)v63)
      goto LABEL_93;
    v64 = v95;
    v95[8] = v98;
    *((_DWORD *)v64 + 18) = timescale;
    *((_DWORD *)v64 + 19) = v88;
    v64[10] = v89;
    if (!v81)
    {
      Mutable = CFArrayCreateMutable(v69, 0, MEMORY[0x1E0C9B378]);
      v64 = v95;
      if (!Mutable)
      {
        if (v95)
          CFRelease(v95);
        return FigSignalErrorAt();
      }
      v4 = Mutable;
    }
    CFArrayAppendValue(v4, v64);
    if (v95)
      CFRelease(v95);
LABEL_84:
    if (++v3 == Count)
      goto LABEL_87;
  }
  v63 = FigSignalErrorAt();
LABEL_93:
  if (v4)
    CFRelease(v4);
  return v63;
}

const __CFArray *fpie_GetFirstMetadataValueForKey(const __CFDictionary *a1)
{
  const __CFArray *result;
  const __CFArray *v2;
  CFIndex Count;
  CFIndex v4;
  uint64_t v5;
  const __CFDictionary *ValueAtIndex;

  result = (const __CFArray *)CFDictionaryGetValue(a1, CFSTR("TaggedRangeMetadataKey_MetadataArray"));
  if (result)
  {
    v2 = result;
    Count = CFArrayGetCount(result);
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      v4 = Count;
      v5 = 1;
      do
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v2, v5 - 1);
        CFDictionaryGetValue(ValueAtIndex, CFSTR("key"));
        if (FigCFEqual())
          result = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, CFSTR("value"));
        else
          result = 0;
        if (v5 >= v4)
          break;
        ++v5;
      }
      while (!result);
    }
  }
  return result;
}

uint64_t fpie_MetadataStringListContainsString(const __CFString *a1, const void *a2)
{
  CFTypeID TypeID;
  const __CFArray *ArrayBySeparatingStrings;
  const __CFArray *v6;
  CFIndex Count;
  unint64_t v8;
  const void *ValueAtIndex;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
    return 0;
  TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(a1))
    return 0;
  ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1, CFSTR(","));
  if (!ArrayBySeparatingStrings)
    return 0;
  v6 = ArrayBySeparatingStrings;
  Count = CFArrayGetCount(ArrayBySeparatingStrings);
  if (Count < 1)
  {
    v11 = 0;
  }
  else
  {
    v8 = Count;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v6, v8 - 1);
      v10 = CFEqual(ValueAtIndex, a2);
      v11 = v10;
      if (v8 < 2)
        break;
      --v8;
    }
    while (!(_DWORD)v10);
  }
  CFRelease(v6);
  return v11;
}

CFMutableDictionaryRef FigDateTimeMomentCopyAsDictionary(uint64_t a1, CFAllocatorRef allocator)
{
  CFDictionaryRef v4;
  CFDictionaryRef v5;
  CFMutableDictionaryRef Mutable;
  CMTime v8;

  if (!*(_WORD *)(a1 + 32))
  {
    FigSignalErrorAt();
    return 0;
  }
  Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
LABEL_10:
    FigSignalErrorAt();
    return Mutable;
  }
  if (*(_BYTE *)(a1 + 33))
    FigCFDictionarySetDouble();
  if (*(_BYTE *)(a1 + 32))
  {
    v8 = *(CMTime *)a1;
    v4 = CMTimeCopyAsDictionary(&v8, allocator);
    if (v4)
    {
      v5 = v4;
      FigCFDictionarySetValue();
      CFRelease(v5);
      return Mutable;
    }
    goto LABEL_10;
  }
  return Mutable;
}

double FigDateTimeMakeFromDictionary@<D0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  CFTypeID TypeID;
  CMTime v6;
  CFDictionaryRef dictionaryRepresentation;

  *(_QWORD *)(a2 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  dictionaryRepresentation = 0;
  if (a1)
  {
    TypeID = CFDictionaryGetTypeID();
    if (TypeID == CFGetTypeID(a1))
    {
      if (FigCFDictionaryGetDoubleIfPresent())
        *(_BYTE *)(a2 + 33) = 1;
      if (FigCFDictionaryGetValueForCaseInsensitiveKeyIfPresent())
      {
        CMTimeMakeFromDictionary(&v6, dictionaryRepresentation);
        result = *(double *)&v6.value;
        *(CMTime *)a2 = v6;
        *(_BYTE *)(a2 + 32) = 1;
      }
    }
  }
  return result;
}

double FigCreateTimeWithDateAndMoment@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double result@<D0>)
{
  uint64_t v4;
  double v6;
  CMTime v7;
  CMTime rhs;
  CMTime v9;

  v4 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)a2 = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v4 + 16);
  if (*(_BYTE *)(a1 + 32))
  {
    if (*(_BYTE *)(a1 + 33))
    {
      v6 = *(double *)(a1 + 24);
      if (v6 != 0.0 && (*(_BYTE *)(a1 + 12) & 1) != 0)
      {
        CMTimeMakeWithSeconds(&rhs, result - v6, 1000000);
        v7 = *(CMTime *)a1;
        CMTimeAdd(&v9, &v7, &rhs);
        result = *(double *)&v9.value;
        *(CMTime *)a2 = v9;
      }
    }
  }
  return result;
}

BOOL figPlayerInterstitialEvent_checkEventStart(uint64_t a1, uint64_t a2)
{
  CFTypeRef *v4;
  CFTypeRef *v5;
  _BOOL8 v6;
  CMTime v8;
  CMTime time1;

  v4 = fpie_CopyValueProperty(a1, (CFTypeRef *)(a1 + 56));
  v5 = fpie_CopyValueProperty(a2, (CFTypeRef *)(a2 + 56));
  if (fpie_GetBooleanProperty(a1, (unsigned __int8 *)(a1 + 112))
    && fpie_GetBooleanProperty(a2, (unsigned __int8 *)(a2 + 112))
    || fpie_GetBooleanProperty(a1, (unsigned __int8 *)(a1 + 113))
    && fpie_GetBooleanProperty(a2, (unsigned __int8 *)(a2 + 113)))
  {
    v6 = 1;
    if (!v4)
      goto LABEL_10;
    goto LABEL_9;
  }
  fpie_GetTimeProperty(a1, a1 + 32, (uint64_t)&time1);
  fpie_GetTimeProperty(a2, a2 + 32, (uint64_t)&v8);
  if (CMTimeCompare(&time1, &v8))
  {
    v6 = 0;
    if (!v4)
      goto LABEL_10;
    goto LABEL_9;
  }
  v6 = FigCFEqual() != 0;
  if (v4)
LABEL_9:
    CFRelease(v4);
LABEL_10:
  if (v5)
    CFRelease(v5);
  return v6;
}

uint64_t figPlayerInterstitialEvent_initOnce()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigPlayerInterstitialEventTypeID = result;
  return result;
}

double figPlayerInterstitialEvent_init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 288) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t figPlayerInterstitialEvent_finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;

  v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  v3 = (const void *)a1[3];
  if (v3)
  {
    CFRelease(v3);
    a1[3] = 0;
  }
  v4 = (const void *)a1[7];
  if (v4)
  {
    CFRelease(v4);
    a1[7] = 0;
  }
  v5 = (const void *)a1[11];
  if (v5)
  {
    CFRelease(v5);
    a1[11] = 0;
  }
  v6 = (const void *)a1[12];
  if (v6)
  {
    CFRelease(v6);
    a1[12] = 0;
  }
  v7 = (const void *)a1[21];
  if (v7)
  {
    CFRelease(v7);
    a1[21] = 0;
  }
  v8 = (const void *)a1[22];
  if (v8)
  {
    CFRelease(v8);
    a1[22] = 0;
  }
  v9 = (const void *)a1[34];
  if (v9)
  {
    CFRelease(v9);
    a1[34] = 0;
  }
  return FigSimpleMutexDestroy();
}

BOOL figPlayerInterstitialEvent_equal(CFTypeRef *a1, CFTypeRef *a2)
{
  CFTypeRef *v4;
  CFTypeRef *v5;
  CFTypeRef *v6;
  CFTypeRef *v7;
  CFTypeRef *v8;
  CFTypeRef *v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex v12;
  CFIndex v13;
  CFIndex v14;
  const void *ValueAtIndex;
  CFTypeRef v16;
  const void *v17;
  CFTypeRef v18;
  int v19;
  _BOOL8 v20;
  CFTypeRef *v22;

  v4 = fpie_CopyValueProperty((uint64_t)a1, a1 + 3);
  v5 = fpie_CopyValueProperty((uint64_t)a2, a2 + 3);
  v6 = fpie_CopyValueProperty((uint64_t)a1, a1 + 11);
  v7 = fpie_CopyValueProperty((uint64_t)a2, a2 + 11);
  v8 = fpie_CopyValueProperty((uint64_t)a1, a1 + 12);
  v9 = fpie_CopyValueProperty((uint64_t)a2, a2 + 12);
  if (!FigCFEqual() || !figPlayerInterstitialEvent_checkEventStart((uint64_t)a1, (uint64_t)a2))
  {
LABEL_26:
    v20 = 0;
    if (!v4)
      goto LABEL_28;
    goto LABEL_27;
  }
  if (!v6)
  {
    Count = 0;
    if (v7)
      goto LABEL_5;
LABEL_7:
    v11 = 0;
    goto LABEL_8;
  }
  Count = CFArrayGetCount((CFArrayRef)v6);
  if (!v7)
    goto LABEL_7;
LABEL_5:
  v11 = CFArrayGetCount((CFArrayRef)v7);
LABEL_8:
  if (Count != v11 || !FigCFEqual())
    goto LABEL_26;
  if (!v6)
  {
    v12 = 0;
    goto LABEL_40;
  }
  v12 = CFArrayGetCount((CFArrayRef)v6);
  if (v12 < 1)
  {
LABEL_40:
    v13 = 0;
    goto LABEL_43;
  }
  v22 = v8;
  v13 = 0;
  while (1)
  {
    v14 = v12;
    ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v6, v13);
    if (ValueAtIndex)
      v16 = CFRetain(ValueAtIndex);
    else
      v16 = 0;
    v17 = CFArrayGetValueAtIndex((CFArrayRef)v7, v13);
    if (v17)
      v18 = CFRetain(v17);
    else
      v18 = 0;
    v19 = FigCFEqual();
    if (v16)
      CFRelease(v16);
    if (v18)
      CFRelease(v18);
    if (!v19)
      break;
    ++v13;
    v12 = v14;
    if (v14 == v13)
    {
      v13 = v14;
      goto LABEL_42;
    }
  }
  v12 = v14;
LABEL_42:
  v8 = v22;
LABEL_43:
  v20 = v13 == v12;
  if (v4)
LABEL_27:
    CFRelease(v4);
LABEL_28:
  if (v5)
    CFRelease(v5);
  if (v6)
    CFRelease(v6);
  if (v7)
    CFRelease(v7);
  if (v8)
    CFRelease(v8);
  if (v9)
    CFRelease(v9);
  return v20;
}

CFStringRef figPlayerInterstitialEvent_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigPlayerInterstitialEvent %p]"), a1);
}

CFStringRef figPlayerInterstitialEvent_copyDebugDesc(uint64_t a1)
{
  const void *v2;
  const __CFAllocator *v3;
  Float64 Seconds;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Float64 v9;
  double v10;
  uint64_t v11;
  CFStringRef v12;
  CMTime time;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 184));
  v2 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  time = *(CMTime *)(a1 + 32);
  Seconds = CMTimeGetSeconds(&time);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(unsigned int *)(a1 + 104);
  v8 = *(unsigned int *)(a1 + 108);
  time = *(CMTime *)(a1 + 116);
  v9 = CMTimeGetSeconds(&time);
  time = *(CMTime *)(a1 + 140);
  v10 = CMTimeGetSeconds(&time);
  v11 = *(_QWORD *)(a1 + 88);
  if (!v11)
    v11 = *(_QWORD *)(a1 + 96);
  v12 = CFStringCreateWithFormat(v3, 0, CFSTR("[FigPlayerInterstitialEvent %p item %p \n  start %f\n  date %@\n  identifier %@\n  restrictions 0x%X, snapOptions 0x%X\n  resume after %f\n  playout limit %f\n  timeline occupancy 0x%X\n, supplements primary 0x%X\n  content varies 0x%X\n  asset URL %@]"), a1, v2, *(_QWORD *)&Seconds, v5, v6, v7, v8, *(_QWORD *)&v9, *(_QWORD *)&v10, *(unsigned int *)(a1 + 280), *(unsigned __int8 *)(a1 + 284), *(unsigned __int8 *)(a1 + 285), v11);
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 184));
  if (v2)
    CFRelease(v2);
  return v12;
}

uint64_t FigOctaviaClockCreateConsumingNeroClock(uint64_t a1, uint64_t a2, const void *a3, _QWORD *a4)
{
  uint64_t TimeCallback;
  uint64_t DerivedStorage;
  CFTypeRef v9;
  NSObject *v10;
  dispatch_source_t v11;
  uint64_t v12;
  void *DispatchSourceBlock;
  CMTime v15;
  CFTypeRef v16;

  v16 = 0;
  if (!a4)
    return FigSignalErrorAt();
  CMClockGetHostTimeClock();
  CMTimeMake(&v15, 1, 10);
  TimeCallback = FigDerivedClockCreateWithGetTimeCallback();
  if ((_DWORD)TimeCallback)
    goto LABEL_11;
  DerivedStorage = FigDerivedClockGetDerivedStorage();
  *(_QWORD *)DerivedStorage = a2;
  v9 = a3 ? CFRetain(a3) : 0;
  *(_QWORD *)(DerivedStorage + 80) = v9;
  v10 = dispatch_queue_create("octclock_queue", 0);
  *(_QWORD *)(DerivedStorage + 64) = v10;
  if (v10
    && (v11 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, v10), (*(_QWORD *)(DerivedStorage + 56) = v11) != 0)
    && (v12 = FigSimpleMutexCreate(), (*(_QWORD *)(DerivedStorage + 72) = v12) != 0))
  {
    DispatchSourceBlock = (void *)FigDispatchCreateDispatchSourceBlock();
    dispatch_sync(*(dispatch_queue_t *)(DerivedStorage + 64), DispatchSourceBlock);
    dispatch_source_set_event_handler(*(dispatch_source_t *)(DerivedStorage + 56), DispatchSourceBlock);
    _Block_release(DispatchSourceBlock);
    dispatch_source_set_timer(*(dispatch_source_t *)(DerivedStorage + 56), 0, 0x3E16927F8uLL, 0);
    dispatch_resume(*(dispatch_object_t *)(DerivedStorage + 56));
    TimeCallback = 0;
    *a4 = v16;
  }
  else
  {
LABEL_11:
    if (v16)
      CFRelease(v16);
  }
  return TimeCallback;
}

uint64_t FigClockIsOctaviaClock()
{
  return FigDerivedClockVerifyCallbacksMatch();
}

CFStringRef octclock_CopyDebugDesc(const void *a1)
{
  _QWORD *DerivedStorage;
  const __CFAllocator *v3;

  DerivedStorage = (_QWORD *)FigDerivedClockGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v3, 0, CFSTR("OctaviaClock neroClock: 0x%llx"), *DerivedStorage);
}

void octclock_Finalize()
{
  uint64_t DerivedStorage;
  NSObject *v1;
  NSObject *v2;
  const void *v3;

  DerivedStorage = FigDerivedClockGetDerivedStorage();
  NeroTransportSendAsyncMessage();
  dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 56));
  dispatch_sync(*(dispatch_queue_t *)(DerivedStorage + 64), &__block_literal_global_108);
  v1 = *(NSObject **)(DerivedStorage + 56);
  if (v1)
  {
    dispatch_release(v1);
    *(_QWORD *)(DerivedStorage + 56) = 0;
  }
  v2 = *(NSObject **)(DerivedStorage + 64);
  if (v2)
  {
    dispatch_release(v2);
    *(_QWORD *)(DerivedStorage + 64) = 0;
  }
  FigSimpleMutexDestroy();
  *(_QWORD *)(DerivedStorage + 72) = 0;
  v3 = *(const void **)(DerivedStorage + 80);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 80) = 0;
  }
}

BOOL octclock_MightDrift()
{
  _QWORD *DerivedStorage;

  DerivedStorage = (_QWORD *)FigDerivedClockGetDerivedStorage();
  return *DerivedStorage != *(_QWORD *)FigDerivedClockGetDerivedStorage();
}

double octclock_GetRate()
{
  return 1.0;
}

uint64_t octclock_GetAnchorTime(uint64_t a1, CMTime *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  int64_t UpTimeNanoseconds;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  int64_t v10;
  CMTime v12;
  CMTime rhs;
  CMTime lhs;
  CMTime v15;
  CMTime v16;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  DerivedStorage = FigDerivedClockGetDerivedStorage();
  value = *MEMORY[0x1E0CA2E18];
  timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  if (a2)
  {
    v6 = DerivedStorage;
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 72));
    v16 = *(CMTime *)(v6 + 8);
    v15 = *(CMTime *)(v6 + 32);
    MEMORY[0x19402EF04](*(_QWORD *)(v6 + 72));
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    CMTimeMake(&lhs, UpTimeNanoseconds, 1000000000);
    flags = lhs.flags;
    timescale = lhs.timescale;
    value = lhs.value;
    epoch = lhs.epoch;
    v12 = v15;
    CMTimeSubtract(&rhs, &lhs, &v12);
    v12 = v16;
    CMTimeAdd(&lhs, &v12, &rhs);
    *a2 = lhs;
    if ((flags & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  flags = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
  epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  if ((flags & 1) == 0)
  {
LABEL_3:
    v10 = FigGetUpTimeNanoseconds();
    CMTimeMake(&v16, v10, 1000000000);
    value = v16.value;
    flags = v16.flags;
    timescale = v16.timescale;
    epoch = v16.epoch;
  }
LABEL_4:
  if (a3)
  {
    *(_QWORD *)a3 = value;
    *(_DWORD *)(a3 + 8) = timescale;
    *(_DWORD *)(a3 + 12) = flags;
    *(_QWORD *)(a3 + 16) = epoch;
  }
  return 0;
}

BOOL FPSupport_ItemReadyToDisplayVideoLatch(int a1, int a2, _BYTE *a3, _BYTE *a4)
{
  _BOOL8 result;

  result = 0;
  if (a3 && a4)
  {
    switch(a1)
    {
      case 0:
        if (!*a4 && !*a3)
          goto LABEL_8;
        result = 1;
        break;
      case 1:
      case 4:
        result = 0;
        *a4 = 0;
        *a3 = 0;
        break;
      case 2:
        *a4 = 1;
        goto LABEL_12;
      case 3:
        *a3 = 1;
LABEL_12:
        result = a2 != 0;
        break;
      default:
LABEL_8:
        result = 0;
        break;
    }
  }
  return result;
}

uint64_t FigAudioSessionGetMXNotificationTranslationInternal()
{
  if (FigAudioSessionGetMXNotificationTranslationInternal_onceToken != -1)
    dispatch_once(&FigAudioSessionGetMXNotificationTranslationInternal_onceToken, &__block_literal_global_109);
  return FigAudioSessionGetMXNotificationTranslationInternal_sNotificationTranslation;
}

const void *FigAudioSessionGetNotificationNameForMXSessionNotificationNameInternal(void *key)
{
  if (FigAudioSessionGetMXNotificationTranslationInternal_onceToken != -1)
    dispatch_once(&FigAudioSessionGetMXNotificationTranslationInternal_onceToken, &__block_literal_global_109);
  return CFDictionaryGetValue((CFDictionaryRef)FigAudioSessionGetMXNotificationTranslationInternal_sNotificationTranslation, key);
}

const void *FigAudioSessionGetMXSessionPropertyForResolvedFigAudioSessionPropertyInternal(void *key)
{
  if (ensureFigAudioSessionPropertyTranslation_onceToken != -1)
    dispatch_once(&ensureFigAudioSessionPropertyTranslation_onceToken, &__block_literal_global_63_0);
  return CFDictionaryGetValue((CFDictionaryRef)figAudioSessionResolvedPropertyTranslation, key);
}

const void *FigAudioSessionGetMXSessionPropertyForRequestedFigAudioSessionPropertyInternal(void *key)
{
  if (ensureFigAudioSessionPropertyTranslation_onceToken != -1)
    dispatch_once(&ensureFigAudioSessionPropertyTranslation_onceToken, &__block_literal_global_63_0);
  return CFDictionaryGetValue((CFDictionaryRef)figAudioSessionRequestedPropertyTranslation, key);
}

uint64_t FigAudioSessionGetClassID()
{
  MEMORY[0x19402F294](&FigAudioSessionGetClassID_sRegisterFigAudioSessionOnce, RegisterFigAudioSession);
  return sFigAudioSessionClassID;
}

uint64_t RegisterFigAudioSession()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigAudioSessionGetTypeID()
{
  MEMORY[0x19402F294](&FigAudioSessionGetClassID_sRegisterFigAudioSessionOnce, RegisterFigAudioSession);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigAudioSessionIsRelatedSession(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t SInt32;
  CFTypeRef cf;

  v2 = 0;
  cf = 0;
  if (a1 && a2)
  {
    v5 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    v6 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    if (v6
      && (v7 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(v6 + 16)) != 0
      && !v7(a2, CFSTR("FAS_AudioSessionID"), *MEMORY[0x1E0C9AE00], &cf)
      && (v8 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 96)) != 0)
    {
      SInt32 = FigCFNumberGetSInt32();
      v2 = v8(a1, SInt32);
    }
    else
    {
      v2 = 0;
    }
    if (cf)
      CFRelease(cf);
  }
  return v2;
}

uint64_t FigAudioSessionInitializeVTFigAudioSession()
{
  return VTFigAudioSessionInitialize();
}

uint64_t FigAudioSessionCreateSiblingSession(uint64_t a1, uint64_t a2, __int128 *a3, void *a4, _QWORD *a5)
{
  __int128 v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  if (FPSupport_CanUseCMSession())
  {
    v10 = a3[1];
    v13 = *a3;
    v14 = v10;
    return FigAudioSessionCreateWithMXSessionSiblingForFigAudioSession(a1, a2, (uint64_t)&v13, a5);
  }
  else
  {
    v12 = a3[1];
    v13 = *a3;
    v14 = v12;
    return FigAudioSessionCreateWithAVAudioSessionSiblingForFigAudioSession(a1, a2, &v13, a4, a5);
  }
}

void __ensureFigAudioSessionPropertyTranslation_block_invoke()
{
  const __CFAllocator *v0;
  const CFDictionaryKeyCallBacks *v1;
  const CFDictionaryValueCallBacks *v2;
  const __CFDictionary *Mutable;
  __CFDictionary *v4;
  __CFDictionary *v5;

  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v1 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v2 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4 = CFDictionaryCreateMutable(v0, 0, v1, v2);
  v5 = v4;
  if (*MEMORY[0x1E0D49630])
    CFDictionarySetValue(v4, CFSTR("FAS_CoreSessionID"), (const void *)*MEMORY[0x1E0D49630]);
  if (*MEMORY[0x1E0D49BF8])
    CFDictionarySetValue(v5, CFSTR("FAS_RoutingContext"), (const void *)*MEMORY[0x1E0D49BF8]);
  figAudioSessionRequestedPropertyTranslation = (uint64_t)CFDictionaryCreateCopy(v0, Mutable);
  figAudioSessionResolvedPropertyTranslation = (uint64_t)CFDictionaryCreateCopy(v0, v5);
  if (Mutable)
    CFRelease(Mutable);
  if (v5)
    CFRelease(v5);
}

CFStringRef FigAudioSessionBaseCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigAudioSession %p]"), a1);
}

uint64_t FigCaptionRendererActionProtocolGetProtocolID()
{
  MEMORY[0x19402F294](&FigCaptionRendererActionProtocolGetProtocolID_sRegisterFigCaptionRendererActionProtocolTypeOnce, RegisterFigCaptionRendererActionProtocolType);
  return sFigCaptionRendererActionProtocolID;
}

uint64_t RegisterFigCaptionRendererActionProtocolType()
{
  return FigBaseProtocolRegisterProtocol();
}

uint64_t FigCaptionRendererMoveToActionProtocolGetProtocolID()
{
  MEMORY[0x19402F294](&FigCaptionRendererMoveToActionProtocolGetProtocolID_sRegisterFigCaptionRendererMoveToActionProtocolTypeOnce, RegisterFigCaptionRendererMoveToActionProtocolType);
  return sFigCaptionRendererMoveToActionProtocolID;
}

uint64_t RegisterFigCaptionRendererMoveToActionProtocolType()
{
  return FigBaseProtocolRegisterProtocol();
}

uint64_t FigNeroGetTypeID()
{
  if (FigNeroGetTypeID_sRegisterNeroTypeOnce != -1)
    dispatch_once(&FigNeroGetTypeID_sRegisterNeroTypeOnce, &__block_literal_global_110);
  return FigNeroGetTypeID_sNeroTypeID;
}

double nero_Init(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

void nero_Finalize(_QWORD *a1)
{
  const void *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;

  v2 = (const void *)a1[9];
  if (v2)
  {
    CFRelease(v2);
    a1[9] = 0;
  }
  v3 = a1[11];
  if (v3)
  {
    dispatch_release(v3);
    a1[11] = 0;
  }
  v4 = a1[7];
  if (v4)
  {
    dispatch_release(v4);
    a1[7] = 0;
  }
  v5 = a1[5];
  if (v5)
  {
    dispatch_release(v5);
    a1[5] = 0;
  }
  v6 = a1[6];
  if (v6)
  {
    dispatch_release(v6);
    a1[6] = 0;
  }
  v7 = a1[4];
  if (v7)
  {
    dispatch_release(v7);
    a1[4] = 0;
  }
}

CFTypeRef nero_CopyFormattingDesc()
{
  return CFRetain(CFSTR("[FigNero]"));
}

__CFString *nero_CopyDebugDesc(const void *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  CFIndex v4;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = CFGetRetainCount(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("[FigNero %p retainCount:%d"), a1, v4);
  CFStringAppendFormat(Mutable, 0, CFSTR("]\n"));
  return Mutable;
}

uint64_t FigNeroCreate(uint64_t a1, _QWORD *a2)
{
  uint64_t Instance;
  _QWORD *v4;

  if (!a2)
    return FigSignalErrorAt();
  if (FigNeroGetTypeID_sRegisterNeroTypeOnce != -1)
    dispatch_once(&FigNeroGetTypeID_sRegisterNeroTypeOnce, &__block_literal_global_110);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v4 = (_QWORD *)Instance;
  *(_QWORD *)(Instance + 80) = 0;
  *(_QWORD *)(Instance + 72) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
  v4[4] = FigDispatchQueueCreateWithPriority();
  v4[11] = dispatch_queue_create("nero.timebaseRegistry", 0);
  v4[7] = dispatch_queue_create("nero.renderpipeline", 0);
  v4[5] = dispatch_queue_create("nero.clock", 0);
  v4[6] = FigDispatchQueueCreateWithPriority();
  *a2 = v4;
  return 0;
}

uint64_t FigNeroSetup(uint64_t a1, CFDictionaryRef theDict)
{
  const void *Value;
  const void *v5;
  const __CFAllocator *v6;
  uint64_t started;
  uint64_t v8;
  __CFDictionary *v9;
  CFMutableArrayRef Mutable;
  const void *v12;
  CFTypeID v13;
  uint64_t CMBaseObject;
  void (*v15)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  int DefaultLocalCenter;
  int v17;
  int v18;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v20;
  CFTypeRef cf[11];
  __int16 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v22 = 0;
  if (theDict)
  {
    Value = CFDictionaryGetValue(theDict, CFSTR("TransportConnection"));
    v5 = Value;
    if (Value)
      CFRetain(Value);
  }
  else
  {
    v5 = 0;
  }
  *(_BYTE *)(a1 + 112) = 1;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  started = NeroTransportCreate();
  if ((_DWORD)started)
    goto LABEL_7;
  FigTransportSetSharedTransport();
  *(_BYTE *)(a1 + 114) = 0;
  *(_QWORD *)(a1 + 120) = dispatch_semaphore_create(0);
  FigTransportGetLocalRootObject();
  cf[5] = (CFTypeRef)a1;
  cf[6] = (CFTypeRef)MEMORY[0x1E0C809B0];
  cf[7] = (CFTypeRef)0x40000000;
  cf[8] = __FigNeroSetup_block_invoke;
  cf[9] = &__block_descriptor_tmp_33_2;
  cf[10] = (CFTypeRef)a1;
  cf[1] = (CFTypeRef)MEMORY[0x1E0C809B0];
  cf[2] = (CFTypeRef)0x40000000;
  cf[3] = __FigNeroSetup_block_invoke_2;
  cf[4] = &__block_descriptor_tmp_35_1;
  started = NeroTransportRegisterObject();
  if ((_DWORD)started || *(_BYTE *)(a1 + 112) && (started = NeroTransportStartAcceptingConnections(), (_DWORD)started))
  {
LABEL_7:
    v8 = started;
    v9 = 0;
    goto LABEL_8;
  }
  Mutable = CFArrayCreateMutable(v6, 0, 0);
  *(_BYTE *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = Mutable;
  FigCFDictionaryGetBooleanIfPresent();
  if (theDict
    && (v12 = CFDictionaryGetValue(theDict, CFSTR("RenderDestination")),
        FigCFDictionaryGetBooleanIfPresent(),
        FigCFDictionaryGetBooleanIfPresent(),
        FigCFDictionaryGetBooleanIfPresent(),
        v12))
  {
    v13 = CFGetTypeID(v12);
    if (v13 == FigLayerViewGetTypeID())
    {
      cf[0] = 0;
      *(_QWORD *)(a1 + 152) = CFRetain(v12);
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterAddListener();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterAddListener();
      CMBaseObject = FigLayerViewGetCMBaseObject(*(_QWORD *)(a1 + 152));
      v15 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v15)
      {
        v15(CMBaseObject, CFSTR("DisplayInfo"), v6, cf);
        if (cf[0])
        {
          DefaultLocalCenter = CMNotificationCenterGetDefaultLocalCenter();
          nero_displayWasAttached(DefaultLocalCenter, a1, v17, v18, cf[0]);
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          if (cf[0])
            CFRelease(cf[0]);
        }
      }
    }
    v9 = 0;
  }
  else
  {
    v9 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(v9, CFSTR("StartImmediately"), (const void *)*MEMORY[0x1E0C9AE40]);
    v20 = FigToolViewCreateWithOptions(v6, v9, (CFMutableArrayRef **)(a1 + 96), 0);
    if ((_DWORD)v20)
      goto LABEL_30;
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterAddListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterAddListener();
    v20 = FigToolViewStart(*(_QWORD *)(a1 + 96));
    if ((_DWORD)v20)
      goto LABEL_30;
  }
  if (HIBYTE(v22)
    || (v20 = FigNeroPlayServerCreate((uint64_t)v6, *(NSObject **)(a1 + 32), *(const void **)(a1 + 160), *(const void **)(a1 + 24), v22, (uint64_t *)(a1 + 104)), !(_DWORD)v20))
  {
    *(_BYTE *)(a1 + 114) = 1;
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 120));
    v8 = 0;
    goto LABEL_8;
  }
LABEL_30:
  v8 = v20;
LABEL_8:
  if (v5)
    CFRelease(v5);
  if (v9)
    CFRelease(v9);
  return v8;
}

void nero_displayWasAttached(int a1, uint64_t a2, int a3, int a4, CFTypeRef cf)
{
  CFTypeRef v6;
  NSObject *v7;
  _QWORD v8[6];

  v6 = CFRetain(cf);
  v7 = *(NSObject **)(a2 + 32);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = __nero_displayWasAttached_block_invoke;
  v8[3] = &__block_descriptor_tmp_89_2;
  v8[4] = a2;
  v8[5] = v6;
  dispatch_async(v7, v8);
}

void nero_displayWasDetached(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD block[5];

  v2 = *(NSObject **)(a2 + 32);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __nero_displayWasDetached_block_invoke;
  block[3] = &__block_descriptor_tmp_90_3;
  block[4] = a2;
  dispatch_async(v2, block);
}

uint64_t FigNeroTeardown(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const void *v4;
  NSObject *v5;
  const void *v6;
  const void *v7;
  NSObject *v8;
  const void *v9;
  _QWORD v11[5];
  _QWORD block[5];

  *(_BYTE *)(a1 + 16) = 1;
  v2 = MEMORY[0x1E0C809B0];
  v3 = *(NSObject **)(a1 + 32);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __FigNeroTeardown_block_invoke;
  block[3] = &__block_descriptor_tmp_37_2;
  block[4] = a1;
  dispatch_sync(v3, block);
  if (*(_QWORD *)(a1 + 152))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    v4 = *(const void **)(a1 + 152);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(a1 + 152) = 0;
    }
  }
  if (*(_QWORD *)(a1 + 96))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    FigToolViewWaitUntilDoneThenDispose(*(_QWORD *)(a1 + 96));
    *(_QWORD *)(a1 + 96) = 0;
  }
  v5 = *(NSObject **)(a1 + 32);
  v11[0] = v2;
  v11[1] = 0x40000000;
  v11[2] = __FigNeroTeardown_block_invoke_3;
  v11[3] = &__block_descriptor_tmp_38_1;
  v11[4] = a1;
  dispatch_sync(v5, v11);
  nero_reset((_QWORD *)a1);
  dispatch_sync(*(dispatch_queue_t *)(a1 + 88), &__block_literal_global_40_0);
  dispatch_sync(*(dispatch_queue_t *)(a1 + 40), &__block_literal_global_42);
  v6 = *(const void **)(a1 + 104);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 104) = 0;
  }
  if (*(_BYTE *)(a1 + 112))
    NeroTransportStopAcceptingConnections();
  else
    NeroTransportDisconnectFromReceiver();
  CFArrayGetCount(*(CFArrayRef *)(a1 + 136));
  v7 = *(const void **)(a1 + 136);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 136) = 0;
  }
  v8 = *(NSObject **)(a1 + 120);
  if (v8)
  {
    dispatch_release(v8);
    *(_QWORD *)(a1 + 120) = 0;
  }
  FigTransportSetSharedTransport();
  NeroTransportInvalidate();
  v9 = *(const void **)(a1 + 24);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 24) = 0;
  }
  return 0;
}

void nrp_destroy(uint64_t a1)
{
  uint64_t FigBaseObject;
  _QWORD *v3;
  void (*v4)(uint64_t);
  opaqueCMBufferQueueTriggerToken *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  NSObject *v10;
  const void *v11;
  uint64_t v12;
  const void *v13;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      nrp_setTimebase((_QWORD **)a1, 0);
      CFDictionaryApplyFunction((CFDictionaryRef)sNeroRPNotificationNameToMessageTypeDict, (CFDictionaryApplierFunction)nrp_unregisterNotificationListener, (void *)a1);
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      FigBaseObject = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(a1 + 16));
      v3 = *(_QWORD **)(CMBaseObjectGetVTable() + 8);
      if (*v3 >= 2uLL)
      {
        v4 = (void (*)(uint64_t))v3[8];
        if (v4)
          v4(FigBaseObject);
      }
    }
    v5 = *(opaqueCMBufferQueueTriggerToken **)(a1 + 72);
    if (v5)
      CMBufferQueueRemoveTrigger(*(CMBufferQueueRef *)(a1 + 64), v5);
    v6 = *(const void **)(a1 + 64);
    if (v6)
      CFRelease(v6);
    v7 = *(const void **)(a1 + 16);
    if (v7)
      CFRelease(v7);
    v8 = *(const void **)(a1 + 104);
    if (v8)
      CFRelease(v8);
    v9 = *(const void **)(a1 + 112);
    if (v9)
      CFRelease(v9);
    v10 = *(NSObject **)(a1 + 40);
    if (v10)
      dispatch_release(v10);
    v11 = *(const void **)(a1 + 48);
    if (v11)
    {
      v12 = *(_QWORD *)(*(_QWORD *)a1 + 96);
      if (v12)
      {
        FigToolViewRemoveVisualContext(v12, v11);
        v11 = *(const void **)(a1 + 48);
      }
      CFRelease(v11);
    }
    v13 = *(const void **)(a1 + 56);
    if (v13)
      CFRelease(v13);
    if (*(_QWORD *)a1)
      CFRelease(*(CFTypeRef *)a1);
    free((void *)a1);
  }
}

void nero_reset(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  const void *v4;
  NSObject *v5;
  uint64_t v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  _QWORD v11[5];
  _QWORD block[5];

  v2 = MEMORY[0x1E0C809B0];
  v3 = a1[11];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __nero_reset_block_invoke;
  block[3] = &__block_descriptor_tmp_91_2;
  block[4] = a1;
  dispatch_async(v3, block);
  v4 = (const void *)a1[8];
  a1[8] = 0;
  if (v4)
    CFRelease(v4);
  v5 = a1[5];
  v11[0] = v2;
  v11[1] = 0x40000000;
  v11[2] = __nero_reset_block_invoke_2;
  v11[3] = &__block_descriptor_tmp_92_3;
  v11[4] = a1;
  dispatch_async(v5, v11);
  v6 = a1[12];
  if (v6)
    FigToolViewMarkNeedsClear(v6);
  v7 = (const void *)a1[22];
  if (v7)
  {
    CFRelease(v7);
    a1[22] = 0;
  }
  v8 = (const void *)a1[23];
  if (v8)
  {
    CFRelease(v8);
    a1[23] = 0;
  }
  v9 = (const void *)a1[24];
  if (v9)
  {
    CFRelease(v9);
    a1[24] = 0;
  }
  v10 = (const void *)a1[27];
  if (v10)
  {
    CFRelease(v10);
    a1[27] = 0;
  }
}

uint64_t FigNeroStartStream()
{
  return 0;
}

uint64_t FigNeroStopStream()
{
  return 0;
}

uint64_t FigNeroSendMessage()
{
  return 0;
}

uint64_t FigNeroSendAudioInputBuffer()
{
  return 0;
}

uint64_t FigNeroStart(CFDictionaryRef theDict)
{
  if (nero_getSharedNero_sCreateNeroOnce != -1)
    dispatch_once(&nero_getSharedNero_sCreateNeroOnce, &__block_literal_global_94);
  return FigNeroSetup(nero_getSharedNero_sNero, theDict);
}

__CFDictionary *FigNeroCopyPerformanceDictionary()
{
  uint64_t v0;
  uint64_t v1;
  __CFDictionary *Mutable;
  const __CFArray *v3;
  _QWORD *ValueAtIndex;
  _QWORD *v5;
  uint64_t v6;
  uint64_t FigBaseObject;
  unsigned int (*v8)(uint64_t, const __CFString *, uint64_t, void **);
  const void *v9;
  void *value;

  value = 0;
  if (nero_getSharedNero_sCreateNeroOnce != -1)
    dispatch_once(&nero_getSharedNero_sCreateNeroOnce, &__block_literal_global_94);
  v0 = nero_getSharedNero_sNero;
  if (!*(_BYTE *)(nero_getSharedNero_sNero + 113))
    return 0;
  v1 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v3 = *(const __CFArray **)(v0 + 136);
    if (v3)
    {
      if (CFArrayGetCount(v3) >= 1 && CFArrayGetCount(*(CFArrayRef *)(v0 + 136)) == 1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v0 + 136), 0);
        if (ValueAtIndex)
        {
          v5 = ValueAtIndex;
          v6 = ValueAtIndex[2];
          if (v6)
          {
            FigBaseObject = FigRenderPipelineGetFigBaseObject(v6);
            v8 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
            if (v8)
            {
              if (!v8(FigBaseObject, CFSTR("PerformanceDictionary"), v1, &value))
              {
                if (value)
                {
                  CFDictionarySetValue(Mutable, CFSTR("Video Perf Dict"), value);
                  CFRelease(value);
                }
                FigCFDictionarySetInt64();
                v9 = (const void *)v5[13];
                if (v9)
                  CFDictionarySetValue(Mutable, CFSTR("Video Format Desc"), v9);
              }
            }
          }
        }
      }
    }
  }
  return Mutable;
}

const __CFString *JNvfYIDgz()
{
  if (JNvfYIDgz_sRegisterValeriaNotificationBarrierOnce != -1)
    dispatch_once(&JNvfYIDgz_sRegisterValeriaNotificationBarrierOnce, &__block_literal_global_52);
  return CFSTR("rU492mlgo");
}

uint64_t g87kjbhgf(uint64_t result)
{
  if (LfJGfUJaT != (_DWORD)result)
  {
    LfJGfUJaT = result;
    CMNotificationCenterGetDefaultLocalCenter();
    if (JNvfYIDgz_sRegisterValeriaNotificationBarrierOnce != -1)
      dispatch_once(&JNvfYIDgz_sRegisterValeriaNotificationBarrierOnce, &__block_literal_global_52);
    return CMNotificationCenterPostNotification();
  }
  return result;
}

uint64_t RaEiDSv6c()
{
  return LfJGfUJaT;
}

uint64_t FigNeroGetNeroTransport()
{
  if (nero_getSharedNero_sCreateNeroOnce != -1)
    dispatch_once(&nero_getSharedNero_sCreateNeroOnce, &__block_literal_global_94);
  return *(_QWORD *)(nero_getSharedNero_sNero + 24);
}

void nero_tellOctaviaDisplayWasAttached(uint64_t a1)
{
  const __CFDictionary *v2;
  CFMutableDictionaryRef MutableCopy;
  __CFDictionary *v4;
  int v5;
  const void **v6;

  v2 = *(const __CFDictionary **)(a1 + 128);
  if (v2)
    MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v2);
  else
    MutableCopy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4 = MutableCopy;
  if (!*(_BYTE *)(a1 + 168))
  {
    v5 = FVDUtilsH264DecoderSupports444();
    v6 = (const void **)MEMORY[0x1E0C9AE50];
    if (v5)
      CFDictionarySetValue(v4, CFSTR("H264DecoderSupports444"), (const void *)*MEMORY[0x1E0C9AE50]);
    if (FVDUtilsHEVCDecodeSupported() && FigGetCFPreferenceNumberWithDefault())
      CFDictionarySetValue(v4, CFSTR("HEVCDecoderSupports444"), *v6);
    if (FVDUtilsHEVCDecodeSupported() && FigGetCFPreferenceNumberWithDefault())
      CFDictionarySetValue(v4, CFSTR("HEVCDecoderSupports44410"), *v6);
    if (!FigRemote_CreateSerializedAtomDataBlockBufferForCFType())
    {
      FigTransportGetRemoteRootObject();
      NeroTransportSendAsyncMessage();
    }
  }
  if (v4)
    CFRelease(v4);
}

void __nero_asyncMessageHandler_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  OpaqueCMBlockBuffer *v3;
  size_t v4;
  unint64_t v5;
  unsigned int v6;
  const void *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  size_t v12;
  _QWORD *v13;
  const void *v14;
  CMBlockBufferRef *v15;
  const void *v16;
  _QWORD *v17;
  _QWORD *v18;
  const void *v19;
  _QWORD *v20;
  const void *v21;
  _QWORD *v22;
  OpaqueCMBlockBuffer *v23;
  OpaqueCMBlockBuffer *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  size_t v29;
  size_t v30;
  size_t Width;
  int Height;
  void *v33;
  size_t v34;
  size_t DataSize;
  _QWORD *v36;
  _QWORD *v37;
  int BytesPerRow;
  char *BaseAddress;
  size_t v40;
  char *v41;
  char *v42;
  size_t v43;
  size_t v44;
  int v45;
  char *v46;
  size_t v47;
  size_t v48;
  uint64_t v49;
  size_t v50;
  size_t totalLengthOut;
  size_t v52;
  char *dataPointerOut;
  CFTypeRef cf;
  uint64_t destination;
  uint64_t v56;
  size_t dataLength;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = *(OpaqueCMBlockBuffer **)(a1 + 40);
  cf = 0;
  v4 = CMBlockBufferGetDataLength(v3);
  if (v4 < 0x18)
    goto LABEL_5;
  v5 = v4;
  destination = 0;
  v56 = 0;
  dataLength = 0;
  CMBlockBufferCopyDataBytes(v3, 0, 0x18uLL, &destination);
  v6 = destination;
  if (destination <= 1)
  {
    v8 = SHIDWORD(destination);
    v9 = dataLength;
    if (HIDWORD(destination) && (v10 = v56) != 0 && (v11 = HIDWORD(v56)) != 0)
    {
      v12 = SHIDWORD(dataLength);
      if (v5 < SHIDWORD(dataLength) + 24)
        goto LABEL_3;
      if ((_DWORD)dataLength != 1111970369)
      {
        if ((_DWORD)dataLength != 1852994665)
          goto LABEL_3;
        v13 = &v2[3 * destination];
        v16 = (const void *)v13[24];
        v15 = (CMBlockBufferRef *)(v13 + 24);
        v14 = v16;
        if (v16)
        {
          CFRelease(v14);
          *v15 = 0;
          v12 = SHIDWORD(dataLength);
        }
        if (CMBlockBufferCreateWithBufferReference(0, v3, 0x18uLL, v12, 0, v15))
          goto LABEL_3;
        v17 = &v2[3 * v6];
        v17[25] = v8;
        v17[26] = v10;
        goto LABEL_22;
      }
      dataPointerOut = 0;
      CMBlockBufferGetDataPointer(v3, 0x18uLL, 0, 0, &dataPointerOut);
      if (nero_createOverlayPixelBufferFromPool((uint64_t)v2, v6, v8, v10, (CVPixelBufferRef *)&cf))
        goto LABEL_3;
      BytesPerRow = CVPixelBufferGetBytesPerRow((CVPixelBufferRef)cf);
      CVPixelBufferLockBaseAddress((CVPixelBufferRef)cf, 0);
      BaseAddress = (char *)CVPixelBufferGetBaseAddress((CVPixelBufferRef)cf);
      v40 = 4 * v8;
      v41 = dataPointerOut;
      do
      {
        memcpy(BaseAddress, v41, v40);
        BaseAddress += BytesPerRow;
        v41 = &dataPointerOut[v11];
        dataPointerOut = v41;
        --v10;
      }
      while (v10);
      CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)cf, 0);
    }
    else
    {
      v18 = &v2[3 * destination];
      v21 = (const void *)v18[24];
      v20 = v18 + 24;
      v19 = v21;
      if (v21)
      {
        CFRelease(v19);
        *v20 = 0;
      }
      v22 = &v2[3 * v6];
      v22[25] = 0;
      v22[26] = 0;
    }
    if (v9 == 1111970369)
      goto LABEL_39;
LABEL_22:
    v23 = (OpaqueCMBlockBuffer *)v2[24];
    v24 = (OpaqueCMBlockBuffer *)v2[27];
    if (v23)
    {
      if (v24)
      {
        v52 = 0;
        dataPointerOut = 0;
        v50 = 0;
        totalLengthOut = 0;
        v25 = v2[25];
        if (v25 != v2[28])
          goto LABEL_3;
        v26 = v2[26];
        if (v26 != v2[29]
          || nero_createOverlayPixelBufferFromPool((uint64_t)v2, 0, v25, v26, (CVPixelBufferRef *)&cf))
        {
          goto LABEL_3;
        }
        CMBlockBufferGetDataPointer(v23, 0, 0, &totalLengthOut, &dataPointerOut);
        CMBlockBufferGetDataPointer(v24, 0, 0, &v50, (char **)&v52);
        CVPixelBufferLockBaseAddress((CVPixelBufferRef)cf, 0);
        v28 = (char *)v52;
        v27 = dataPointerOut;
        v30 = v50;
        v29 = totalLengthOut;
        Width = CVPixelBufferGetWidth((CVPixelBufferRef)cf);
        Height = CVPixelBufferGetHeight((CVPixelBufferRef)cf);
        v33 = CVPixelBufferGetBaseAddress((CVPixelBufferRef)cf);
        v34 = CVPixelBufferGetBytesPerRow((CVPixelBufferRef)cf);
        DataSize = CVPixelBufferGetDataSize((CVPixelBufferRef)cf);
        NeroTextImageCodec_DecompressAndCompositeTwo32BGRAImages(v27, v29, v28, v30, Width, Height, (uint64_t)v33, v34, DataSize);
        goto LABEL_37;
      }
      v52 = 0;
      dataPointerOut = 0;
      v36 = v2 + 25;
      v37 = v2 + 26;
    }
    else
    {
      if (!v24)
      {
LABEL_38:
        v6 = 0;
LABEL_39:
        v49 = v2[12];
        if (v49)
          FigToolViewSetOverlayImage(v49, v6, cf);
        goto LABEL_3;
      }
      v52 = 0;
      dataPointerOut = 0;
      v36 = v2 + 28;
      v37 = v2 + 29;
      v23 = v24;
    }
    if (nero_createOverlayPixelBufferFromPool((uint64_t)v2, 0, *v36, *v37, (CVPixelBufferRef *)&cf))
      goto LABEL_3;
    CMBlockBufferGetDataPointer(v23, 0, 0, &v52, &dataPointerOut);
    CVPixelBufferLockBaseAddress((CVPixelBufferRef)cf, 0);
    v43 = v52;
    v42 = dataPointerOut;
    v44 = CVPixelBufferGetWidth((CVPixelBufferRef)cf);
    v45 = CVPixelBufferGetHeight((CVPixelBufferRef)cf);
    v46 = (char *)CVPixelBufferGetBaseAddress((CVPixelBufferRef)cf);
    v47 = CVPixelBufferGetBytesPerRow((CVPixelBufferRef)cf);
    v48 = CVPixelBufferGetDataSize((CVPixelBufferRef)cf);
    NeroTextImageCodec_Decompress32BPPImage(v42, v43, v44, v45, v46, v47, v48);
LABEL_37:
    CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)cf, 0);
    goto LABEL_38;
  }
LABEL_3:
  if (cf)
    CFRelease(cf);
LABEL_5:
  v7 = *(const void **)(a1 + 40);
  if (v7)
    CFRelease(v7);
}

void __nero_asyncMessageHandler_block_invoke_2(uint64_t a1)
{
  OpaqueCMBlockBuffer *v2;
  uint64_t v3;
  const void *v4;
  BOOL v5;
  const void *v6;
  int destination;

  v2 = *(OpaqueCMBlockBuffer **)(a1 + 32);
  v3 = IOAVControllerCreateWithLocation();
  destination = 0;
  if (v3)
  {
    v4 = (const void *)v3;
    if (!CMBlockBufferCopyDataBytes(v2, 0, 4uLL, &destination))
    {
      v5 = nero_setIOAVProtectionType_firstTime == 1 && nero_setIOAVProtectionType_lastProtectionType == destination;
      if (!v5 && !IOAVControllerSetProtectionType())
      {
        nero_setIOAVProtectionType_firstTime = 1;
        nero_setIOAVProtectionType_lastProtectionType = destination;
      }
    }
    CFRelease(v4);
  }
  v6 = *(const void **)(a1 + 32);
  if (v6)
    CFRelease(v6);
}

uint64_t nero_createOverlayPixelBufferFromPool(uint64_t a1, int a2, int a3, int a4, CVPixelBufferRef *a5)
{
  uint64_t v8;
  __CVPixelBufferPool *v9;
  CFTypeRef *v10;
  __CVPixelBufferPool *v11;
  const __CFDictionary *PixelBufferAttributes;
  const __CFDictionary *v13;
  const void *Value;
  CFTypeID v15;
  const __CFNumber *v16;
  const __CFNumber *v17;
  __CVPixelBufferPool *v18;
  const __CFAllocator *v19;
  __CFDictionary *Mutable;
  __CFDictionary *v21;
  __CFDictionary *v22;
  __CFDictionary *v23;
  const void *IOSurfacePropertiesDictionary;
  uint64_t v25;
  int valuePtr;
  uint64_t v28;

  v8 = a1 + 8 * a2;
  v11 = *(__CVPixelBufferPool **)(v8 + 176);
  v10 = (CFTypeRef *)(v8 + 176);
  v9 = v11;
  if (v11)
  {
    PixelBufferAttributes = CVPixelBufferPoolGetPixelBufferAttributes(v9);
    if (!PixelBufferAttributes)
      goto LABEL_25;
    v13 = PixelBufferAttributes;
    valuePtr = 0;
    Value = CFDictionaryGetValue(PixelBufferAttributes, (const void *)*MEMORY[0x1E0CA9040]);
    v15 = CFGetTypeID(Value);
    if (v15 != CFNumberGetTypeID())
      goto LABEL_25;
    CFNumberGetValue((CFNumberRef)Value, kCFNumberSInt32Type, &valuePtr);
    if (valuePtr == 1111970369
      && (valuePtr = 0,
          v16 = (const __CFNumber *)CFDictionaryGetValue(v13, (const void *)*MEMORY[0x1E0CA90E0]),
          CFNumberGetValue(v16, kCFNumberSInt32Type, &valuePtr),
          valuePtr == a3)
      && (valuePtr = 0,
          v17 = (const __CFNumber *)CFDictionaryGetValue(v13, (const void *)*MEMORY[0x1E0CA8FD8]),
          CFNumberGetValue(v17, kCFNumberSInt32Type, &valuePtr),
          valuePtr == a4))
    {
      v18 = (__CVPixelBufferPool *)*v10;
      if (*v10)
      {
        v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
LABEL_21:
        CVPixelBufferPoolCreatePixelBuffer(v19, v18, a5);
        return 0;
      }
    }
    else
    {
LABEL_25:
      if (*v10)
      {
        CFRelease(*v10);
        *v10 = 0;
      }
    }
  }
  v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return 4294954510;
  v21 = Mutable;
  ftvCFDictionarySetSInt32Value(Mutable, (const void *)*MEMORY[0x1E0CA9060], 2);
  v22 = CFDictionaryCreateMutable(v19, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v22)
  {
    CFRelease(v21);
    return 4294954510;
  }
  v23 = v22;
  ftvCFDictionarySetSInt32Value(v22, (const void *)*MEMORY[0x1E0CA9040], 1111970369);
  ftvCFDictionarySetSInt32Value(v23, (const void *)*MEMORY[0x1E0CA90E0], a3);
  ftvCFDictionarySetSInt32Value(v23, (const void *)*MEMORY[0x1E0CA8FD8], a4);
  v28 = 0;
  IOSurfacePropertiesDictionary = (const void *)FigCreateIOSurfacePropertiesDictionary();
  CFDictionarySetValue(v23, (const void *)*MEMORY[0x1E0CA8FF0], IOSurfacePropertiesDictionary);
  CFRelease(IOSurfacePropertiesDictionary);
  FigGetAlignmentForIOSurfaceOutput();
  ftvCFDictionarySetSInt32Value(v23, (const void *)*MEMORY[0x1E0CA9048], SHIDWORD(v28));
  ftvCFDictionarySetSInt32Value(v23, (const void *)*MEMORY[0x1E0CA8F68], v28);
  v25 = CVPixelBufferPoolCreate(v19, v21, v23, (CVPixelBufferPoolRef *)v10);
  if (!(_DWORD)v25)
  {
    if (*v10)
      v25 = 0;
    else
      v25 = 4294954510;
  }
  CFRelease(v21);
  CFRelease(v23);
  if (!(_DWORD)v25)
  {
    v18 = (__CVPixelBufferPool *)*v10;
    goto LABEL_21;
  }
  return v25;
}

void nrp_setMinImageBounds(uint64_t a1, CFDictionaryRef theDict)
{
  const __CFDictionary *Value;
  __CFDictionary *DictionaryRepresentation;
  uint64_t FigBaseObject;
  void (*v11)(uint64_t, const __CFString *, __CFDictionary *);
  float64x2_t v12;

  Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("DisplaySize"));
  v12 = 0uLL;
  if (FigCGSizeMakeWithDictionaryRepresentation(Value, &v12))
  {
    __asm { FMOV            V1.2D, #0.25 }
    v12 = vmulq_f64(v12, _Q1);
    DictionaryRepresentation = FigCGSizeCreateDictionaryRepresentation(v12.f64[0], v12.f64[1]);
    FigBaseObject = FigRenderPipelineGetFigBaseObject(a1);
    v11 = *(void (**)(uint64_t, const __CFString *, __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 56);
    if (v11)
      v11(FigBaseObject, CFSTR("MinImageBounds"), DictionaryRepresentation);
    if (DictionaryRepresentation)
      CFRelease(DictionaryRepresentation);
  }
}

uint64_t nero_setVideoGravity(uint64_t a1)
{
  unsigned int v2;
  uint64_t result;

  if (FigCFEqual())
    v2 = 1;
  else
    v2 = 2 * (FigCFEqual() != 0);
  result = *(_QWORD *)(a1 + 96);
  if (result)
    return FigToolViewSetVideoGravity(result, v2);
  return result;
}

void __nero_createVideoRenderPipeline_block_invoke(uint64_t a1, int a2, CMBlockBufferRef theSourceBuffer)
{
  uint64_t v4;
  OpaqueCMTimebase *v5;
  uint64_t v6;
  CMTimeEpoch v7;
  CMTimeFlags v8;
  uint64_t v9;
  float v10;
  float v11;
  void (*v12)(uint64_t, __int128 *, CMTime *, float, float);
  OpaqueCMClock *v13;
  uint64_t v14;
  NSObject *v15;
  OpaqueCMBlockBuffer *DataBuffer;
  const __CFData *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, __int128 *);
  CMTimeValue value;
  uint64_t v22;
  void (*v23)(uint64_t);
  OpaqueCMTimebase *v24;
  uint64_t FigBaseObject;
  void (*v26)(uint64_t, _QWORD, CMTimeValue);
  const void *v27;
  CMClockOrTimebaseRef v28;
  OpaqueCMTimebase *v29;
  Float64 v30;
  CMClockOrTimebaseRef v31;
  const void *v32;
  CMClockRef HostTimeClock;
  OpaqueCMTimebase *v34;
  float v35;
  CMTime immediateSourceTime;
  uint64_t destination;
  CMTime timebaseTime;
  CMTime sbuf;
  __int128 block;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  CFRange v46;

  v45 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 32);
  if (a2 > 1920167792)
  {
    if (a2 > 1952604530)
    {
      if (a2 <= 1953721716)
      {
        if (a2 == 1952604531)
        {
          nrp_setTimebase(*(_QWORD ***)(a1 + 32), theSourceBuffer);
        }
        else if (a2 == 1953131888)
        {
          destination = 0;
          if (*(_QWORD *)(v4 + 120))
          {
            if (CMBlockBufferGetDataLength(theSourceBuffer) == 56)
            {
              block = 0uLL;
              *(_QWORD *)&v41 = 0;
              memset(&sbuf, 0, sizeof(sbuf));
              if (!CMBlockBufferCopyDataBytes(theSourceBuffer, 0, 8uLL, &destination)
                && !CMBlockBufferCopyDataBytes(theSourceBuffer, 8uLL, 0x18uLL, &block)
                && !CMBlockBufferCopyDataBytes(theSourceBuffer, 0x20uLL, 0x18uLL, &sbuf))
              {
                v5 = *(OpaqueCMTimebase **)(v4 + 120);
                *(_OWORD *)&timebaseTime.value = block;
                timebaseTime.epoch = v41;
                immediateSourceTime = sbuf;
                CMTimebaseSetAnchorTime(v5, &timebaseTime, &immediateSourceTime);
              }
            }
          }
        }
        return;
      }
      if (a2 != 1953721717)
      {
        if (a2 == 1969450091)
        {
          v13 = *(OpaqueCMClock **)(*(_QWORD *)v4 + 64);
          if (v13)
            CMTimebaseSetSourceClock(*(CMTimebaseRef *)(v4 + 120), v13);
        }
        return;
      }
      v44 = 0;
      v42 = 0u;
      v43 = 0u;
      block = 0u;
      v41 = 0u;
      if (!*(_QWORD *)(v4 + 120)
        || CMBlockBufferGetDataLength(theSourceBuffer) != 72
        || CMBlockBufferCopyDataBytes(theSourceBuffer, 0, 0x48uLL, &block))
      {
        return;
      }
      if ((BYTE4(block) & 1) == 0)
      {
        if ((BYTE12(v41) & 1) != 0)
        {
          v24 = *(OpaqueCMTimebase **)(v4 + 120);
          *(_OWORD *)&sbuf.value = v41;
          sbuf.epoch = v42;
          CMTimebaseSetTime(v24, &sbuf);
        }
        return;
      }
      v28 = CMTimebaseCopySource(*(CMTimebaseRef *)(v4 + 120));
      v29 = *(OpaqueCMTimebase **)(v4 + 120);
      v30 = *((double *)&block + 1);
      CMSyncGetTime(&sbuf, v28);
      *(_OWORD *)&timebaseTime.value = v41;
      timebaseTime.epoch = v42;
      CMTimebaseSetRateAndAnchorTime(v29, v30, &timebaseTime, &sbuf);
      if (!v28)
        return;
      v27 = v28;
LABEL_68:
      CFRelease(v27);
      return;
    }
    if (a2 == 1920167793)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      return;
    }
    if (a2 != 1936749168)
    {
      if (a2 == 1936875892)
      {
        LODWORD(destination) = 0;
        v35 = 0.0;
        v6 = MEMORY[0x1E0CA2E18];
        *(_OWORD *)&timebaseTime.value = *MEMORY[0x1E0CA2E18];
        v7 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
        timebaseTime.epoch = v7;
        if (CMBlockBufferGetDataLength(theSourceBuffer) == 32
          && !CMBlockBufferCopyDataBytes(theSourceBuffer, 0, 4uLL, &destination)
          && !CMBlockBufferCopyDataBytes(theSourceBuffer, 4uLL, 4uLL, &v35)
          && !CMBlockBufferCopyDataBytes(theSourceBuffer, 8uLL, 0x18uLL, &timebaseTime))
        {
          v8 = *(_DWORD *)(v6 + 12);
          if (*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8))
          {
            v9 = *(_QWORD *)(v4 + 16);
            v10 = *(float *)&destination;
            v11 = v35;
            immediateSourceTime = timebaseTime;
            v12 = *(void (**)(uint64_t, __int128 *, CMTime *, float, float))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 8);
            if (v12)
            {
              block = *(_OWORD *)&immediateSourceTime.value;
              *(_QWORD *)&v41 = immediateSourceTime.epoch;
              sbuf.value = *(_QWORD *)v6;
              sbuf.timescale = *(_DWORD *)(v6 + 8);
              sbuf.flags = v8;
              sbuf.epoch = v7;
              v12(v9, &block, &sbuf, v10, v11);
            }
          }
          else if ((timebaseTime.flags & 0x1D) == 1)
          {
            block = 0uLL;
            *(_QWORD *)&v41 = 0;
            v31 = CMTimebaseCopySource(*(CMTimebaseRef *)(v4 + 120));
            v32 = v31;
            if ((v8 & 0x1D) == 1)
            {
              HostTimeClock = CMClockGetHostTimeClock();
              sbuf.value = *(_QWORD *)v6;
              sbuf.timescale = *(_DWORD *)(v6 + 8);
              sbuf.flags = v8;
              sbuf.epoch = v7;
              CMSyncConvertTime((CMTime *)&block, &sbuf, HostTimeClock, v32);
            }
            else
            {
              CMSyncGetTime((CMTime *)&block, v31);
            }
            if (v32)
              CFRelease(v32);
            v34 = *(OpaqueCMTimebase **)(v4 + 120);
            sbuf = timebaseTime;
            *(_OWORD *)&immediateSourceTime.value = block;
            immediateSourceTime.epoch = v41;
            CMTimebaseSetRateAndAnchorTime(v34, *(float *)&destination, &sbuf, &immediateSourceTime);
          }
          else
          {
            CMTimebaseSetRate(*(CMTimebaseRef *)(v4 + 120), *(float *)&destination);
          }
        }
      }
      return;
    }
    *(_QWORD *)&block = 0;
    sbuf.value = 0;
    if (!FigRemote_CreateKeyValuePairFromSerializedAtomDataBlockBuffer())
    {
      if (CFEqual((CFTypeRef)block, CFSTR("IsTimebaseStarter")))
      {
        value = sbuf.value;
        *(_BYTE *)(v4 + 128) = sbuf.value == *MEMORY[0x1E0C9AE50];
      }
      else
      {
        value = sbuf.value;
        if (CFEqual((CFTypeRef)block, CFSTR("NeroVideoGravity")))
        {
          nero_setVideoGravity(*(_QWORD *)v4);
          value = sbuf.value;
        }
      }
      FigBaseObject = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(v4 + 16));
      v26 = *(void (**)(uint64_t, _QWORD, CMTimeValue))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v26)
        v26(FigBaseObject, block, value);
    }
    if ((_QWORD)block)
      CFRelease((CFTypeRef)block);
LABEL_67:
    v27 = (const void *)sbuf.value;
    if (!sbuf.value)
      return;
    goto LABEL_68;
  }
  if (a2 > 1886154614)
  {
    if (a2 == 1886154615)
    {
      v22 = *(_QWORD *)(v4 + 16);
      v23 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
      if (v23)
        v23(v22);
      return;
    }
    if (a2 != 1919249523)
    {
      if (a2 == 1920165236)
        CMBufferQueueReset(*(CMBufferQueueRef *)(v4 + 64));
      return;
    }
LABEL_38:
    v14 = *(_QWORD *)v4;
    if (*(_DWORD *)(v4 + 8) == 1986618469)
    {
      if (!*(_BYTE *)(v14 + 16))
      {
        v15 = *(NSObject **)(v14 + 32);
        *(_QWORD *)&block = MEMORY[0x1E0C809B0];
        *((_QWORD *)&block + 1) = 0x40000000;
        *(_QWORD *)&v41 = __nero_destroyVideoRenderPipeline_block_invoke;
        *((_QWORD *)&v41 + 1) = &__block_descriptor_tmp_82_2;
        *(_QWORD *)&v42 = v14;
        *((_QWORD *)&v42 + 1) = v4;
        dispatch_async(v15, &block);
      }
    }
    else
    {
      NeroTransportUnregisterObject();
      nrp_destroy(v4);
    }
    return;
  }
  switch(a2)
  {
    case 1684628836:
      goto LABEL_38;
    case 1717921124:
      sbuf.value = 0;
      if (!FigRemote_CreateSampleBufferFromSerializedAtomDataBlockBuffer())
      {
        DataBuffer = CMSampleBufferGetDataBuffer((CMSampleBufferRef)sbuf.value);
        *(_QWORD *)(v4 + 24) += CMBlockBufferGetDataLength(DataBuffer);
        v17 = (const __CFData *)CMGetAttachment((CMAttachmentBearerRef)sbuf.value, CFSTR("quaternion"), 0);
        if (v17)
        {
          v18 = *(_QWORD *)v4;
          if (*(_QWORD *)(*(_QWORD *)v4 + 152))
          {
            block = 0u;
            v41 = 0u;
            v46.location = 0;
            v46.length = 32;
            CFDataGetBytes(v17, v46, (UInt8 *)&block);
            v19 = *(_QWORD *)(v18 + 152);
            v20 = *(void (**)(uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
            if (v20)
              v20(v19, &block);
          }
        }
        CMBufferQueueEnqueue(*(CMBufferQueueRef *)(v4 + 64), (CMBufferRef)sbuf.value);
      }
      goto LABEL_67;
    case 1768912244:
      *(_QWORD *)&block = 0;
      if (!theSourceBuffer || !FigRemote_CreateCFTypeFromSerializedAtomDataBlockBuffer())
      {
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
      }
      break;
  }
}

void __nero_createVideoRenderPipeline_block_invoke_2(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t CFTypeFromSerializedAtomDataBlockBuffer;
  uint64_t BBufFromPointer;
  CFTypeRef v10;
  uint64_t v11;
  uint64_t FigBaseObject;
  uint64_t (*v13)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  int v14;
  CFTypeRef v15;
  BOOL v16;
  CMClockRef HostTimeClock;
  uint64_t v18;
  NSObject *v19;
  const void *v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, CFTypeRef, uint64_t, CFTypeRef *);
  CFTypeRef v25;
  CFTypeRef v26;
  CFTypeRef cf;
  uint64_t v28;
  void (*v29)(uint64_t);
  void *v30;
  uint64_t v31;
  CFTypeRef v32;

  v5 = *(uint64_t **)(a1 + 32);
  if (a2 == 1668050795)
  {
    v25 = 0;
    v26 = 0;
    v11 = *MEMORY[0x1E0C9AE00];
    FigBaseObject = FigRenderPipelineGetFigBaseObject(v5[2]);
    v13 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
    if (!v13
      || ((v14 = v13(FigBaseObject, CFSTR("PreferredClock"), v11, &v25), v15 = v25, !v14)
        ? (v16 = v25 == 0)
        : (v16 = 1),
          v16))
    {
      HostTimeClock = CMClockGetHostTimeClock();
      v15 = CFRetain(HostTimeClock);
      v25 = v15;
    }
    v18 = *v5;
    v19 = *(NSObject **)(*v5 + 40);
    v20 = (const void *)MEMORY[0x1E0C809B0];
    cf = (CFTypeRef)MEMORY[0x1E0C809B0];
    v28 = 0x40000000;
    v29 = __nero_retainClockForOctavia_block_invoke;
    v30 = &__block_descriptor_tmp_85_2;
    v31 = v18;
    v32 = v15;
    dispatch_sync(v19, &cf);
    BBufFromPointer = FigTransportCreateBBufFromPointer();
    v21 = *v5;
    if ((_DWORD)BBufFromPointer)
    {
      v22 = *(NSObject **)(v21 + 40);
      cf = v20;
      v28 = 0x40000000;
      v29 = __nero_releaseClockForOctavia_block_invoke;
      v30 = &__block_descriptor_tmp_86_4;
      v31 = v21;
      v32 = v25;
      dispatch_async(v22, &cf);
      if (v26)
        CFRelease(v26);
      v10 = 0;
    }
    else
    {
      MovieInformationSetAssetAnalysisReporter(v21, v25);
      v10 = v26;
      v26 = 0;
    }
    goto LABEL_27;
  }
  if (a2 != 1668313712)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD))(a4 + 16))(a4, 4294955260, 0);
    return;
  }
  v6 = v5[2];
  v26 = 0;
  cf = 0;
  v25 = 0;
  v7 = *MEMORY[0x1E0C9AE00];
  CFTypeFromSerializedAtomDataBlockBuffer = FigRemote_CreateCFTypeFromSerializedAtomDataBlockBuffer();
  if ((_DWORD)CFTypeFromSerializedAtomDataBlockBuffer)
    goto LABEL_4;
  v23 = FigRenderPipelineGetFigBaseObject(v6);
  v24 = *(uint64_t (**)(uint64_t, CFTypeRef, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
  if (!v24)
  {
    v10 = 0;
    BBufFromPointer = 4294954514;
    goto LABEL_6;
  }
  CFTypeFromSerializedAtomDataBlockBuffer = v24(v23, cf, v7, &v26);
  if ((_DWORD)CFTypeFromSerializedAtomDataBlockBuffer)
  {
LABEL_4:
    BBufFromPointer = CFTypeFromSerializedAtomDataBlockBuffer;
  }
  else
  {
    BBufFromPointer = FigRemote_CreateSerializedAtomDataBlockBufferForCFType();
    if (!(_DWORD)BBufFromPointer)
    {
      v10 = v25;
      v25 = 0;
      goto LABEL_6;
    }
  }
  v10 = 0;
LABEL_6:
  if (cf)
    CFRelease(cf);
  if (v26)
    CFRelease(v26);
LABEL_27:
  if (v25)
    CFRelease(v25);
  (*(void (**)(uint64_t, uint64_t, CFTypeRef))(a4 + 16))(a4, BBufFromPointer, v10);
  if (v10)
    CFRelease(v10);
}

double nrp_sourceQueueDidBecomeReady(uint64_t a1)
{
  double result;
  CMTime v3;

  if ((*(_BYTE *)(a1 + 92) & 1) != 0)
    NeroTransportSendAsyncMessage();
  CMBufferQueueGetMinPresentationTimeStamp(&v3, *(CMBufferQueueRef *)(a1 + 64));
  result = *(double *)&v3.value;
  *(CMTime *)(a1 + 80) = v3;
  return result;
}

CFDictionaryRef __nrp_createWithFigRenderPipeline_block_invoke()
{
  void *v0;
  CFDictionaryRef result;
  _OWORD v2[2];
  void *keys[5];

  keys[4] = *(void **)MEMORY[0x1E0C80C00];
  keys[0] = CFSTR("SynchronousFrameEnqueued");
  keys[1] = CFSTR("FirstVideoFrameEnqueued");
  v0 = (void *)*MEMORY[0x1E0CA2778];
  keys[2] = CFSTR("DecodeError");
  keys[3] = v0;
  v2[0] = *(_OWORD *)"mrfs";
  v2[1] = *(_OWORD *)"rred";
  result = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)v2, 4, MEMORY[0x1E0C9B390], 0);
  sNeroRPNotificationNameToMessageTypeDict = (uint64_t)result;
  return result;
}

uint64_t nrp_registerNotificationListener()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterAddListener();
}

uint64_t nero_handleFirstVideoFrameEnqueued()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

void nrp_reflectNotificationToOctavia(int a1, int a2, void *key, uint64_t a4, uint64_t a5)
{
  if (CFDictionaryContainsKey((CFDictionaryRef)sNeroRPNotificationNameToMessageTypeDict, key))
  {
    CFDictionaryGetValue((CFDictionaryRef)sNeroRPNotificationNameToMessageTypeDict, key);
    if (!a5 || !FigRemote_CreateSerializedAtomDataBlockBufferForCFType())
      NeroTransportSendAsyncMessage();
  }
}

void nrp_setTimebase(_QWORD **a1, CMBlockBufferRef theSourceBuffer)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t FigBaseObject;
  void (*v9)(uint64_t, const __CFString *, uint64_t);
  _QWORD *v10;
  void (*v11)(_QWORD *, _QWORD, _QWORD);
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  void (*v15)(_QWORD *, _QWORD *, _QWORD *);
  uint64_t v16;
  _QWORD *v17;
  void (*v18)(uint64_t, _QWORD *);
  uint64_t v19;
  _QWORD block[7];
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  if (!theSourceBuffer)
  {
    v7 = a1 + 15;
    v6 = (uint64_t)a1[15];
    if (!v6)
      return;
    v5 = 0;
LABEL_8:
    nero_relinquishNeroTimebase(*a1, v6);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CFRelease(a1[15]);
LABEL_9:
    a1[15] = (_QWORD *)v5;
    FigBaseObject = FigRenderPipelineGetFigBaseObject(a1[2]);
    v9 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v9)
      v9(FigBaseObject, CFSTR("Timebase"), v5);
    v10 = a1[7];
    if (v10)
    {
      v11 = *(void (**)(_QWORD *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v11)
        v11(v10, 0, 0);
      v13 = a1[6];
      v12 = a1[7];
      v14 = a1[15];
      v15 = *(void (**)(_QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v15)
        v15(v12, v13, v14);
    }
    if (*v7)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterAddListener();
      CFRetain(a1[15]);
    }
    if (*((_DWORD *)a1 + 2) == 1986618469)
    {
      v16 = (*a1)[19];
      if (v16)
      {
        v17 = a1[15];
        v18 = *(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (v18)
          v18(v16, v17);
      }
    }
    return;
  }
  v19 = 0;
  if (CMBlockBufferCopyDataBytes(theSourceBuffer, 0, 8uLL, &v19))
    return;
  v3 = (uint64_t)*a1;
  v21 = 0;
  v22 = &v21;
  v23 = 0x2000000000;
  v24 = 0;
  v4 = *(NSObject **)(v3 + 88);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __nero_acquireNeroTimebaseForOctaviaTimebase_block_invoke;
  block[3] = &unk_1E2FB4FC0;
  block[5] = v3;
  block[6] = v19;
  block[4] = &v21;
  dispatch_sync(v4, block);
  v5 = v22[3];
  _Block_object_dispose(&v21, 8);
  v7 = a1 + 15;
  v6 = (uint64_t)a1[15];
  if (v5 != v6)
  {
    if (!v6)
      goto LABEL_9;
    goto LABEL_8;
  }
  if (v5)
    nero_relinquishNeroTimebase(*a1, v5);
}

void nero_relinquishNeroTimebase(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  _QWORD v5[6];

  if (a1)
  {
    CFRetain(a1);
    v4 = a1[11];
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 0x40000000;
    v5[2] = __nero_relinquishNeroTimebase_block_invoke;
    v5[3] = &__block_descriptor_tmp_80_4;
    v5[4] = a1;
    v5[5] = a2;
    dispatch_async(v4, v5);
  }
}

void nrp_timebaseRateChangedCallback(uint64_t a1, uint64_t a2)
{
  uint64_t FigBaseObject;
  unsigned int (*v4)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const __CFAllocator *v5;
  const __CFArray *v6;
  CMClockOrTimebaseRef v7;
  OSStatus v8;
  CMBlockBufferRef v9;
  OSStatus v10;
  OSStatus v11;
  OSStatus v12;
  CFTypeRef cf;
  CMBlockBufferRef destinationBuffer;
  CMTime outRelativeToClockOrTimebaseAnchorTime;
  CMTime outOfClockOrTimebaseAnchorTime;
  Float64 outRelativeRate;
  CFRange v18;

  cf = 0;
  FigBaseObject = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(a2 + 16));
  v4 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
  if (v4)
  {
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (!v4(FigBaseObject, CFSTR("FigImageQueueArray"), *MEMORY[0x1E0C9AE00], &cf))
    {
      v6 = (const __CFArray *)cf;
      if (cf)
      {
        v18.length = CFArrayGetCount((CFArrayRef)cf);
        v18.location = 0;
        CFArrayApplyFunction(v6, v18, (CFArrayApplierFunction)nrp_timebaseRateChangedCallbackApply, *(void **)(a2 + 120));
      }
      if (*(_BYTE *)(a2 + 128))
      {
        outRelativeRate = 0.0;
        outOfClockOrTimebaseAnchorTime = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
        outRelativeToClockOrTimebaseAnchorTime = outOfClockOrTimebaseAnchorTime;
        destinationBuffer = 0;
        v7 = CMTimebaseCopySource(*(CMTimebaseRef *)(a2 + 120));
        if (!CMSyncGetRelativeRateAndAnchorTime(*(CMClockOrTimebaseRef *)(a2 + 120), v7, &outRelativeRate, &outOfClockOrTimebaseAnchorTime, &outRelativeToClockOrTimebaseAnchorTime))
        {
          v8 = CMBlockBufferCreateWithMemoryBlock(v5, 0, 0x38uLL, v5, 0, 0, 0x38uLL, 1u, &destinationBuffer);
          v9 = destinationBuffer;
          if (!v8)
          {
            v10 = CMBlockBufferReplaceDataBytes(&outRelativeRate, destinationBuffer, 0, 8uLL);
            v9 = destinationBuffer;
            if (!v10)
            {
              v11 = CMBlockBufferReplaceDataBytes(&outOfClockOrTimebaseAnchorTime, destinationBuffer, 8uLL, 0x18uLL);
              v9 = destinationBuffer;
              if (!v11)
              {
                v12 = CMBlockBufferReplaceDataBytes(&outRelativeToClockOrTimebaseAnchorTime, destinationBuffer, 0x20uLL, 0x18uLL);
                v9 = destinationBuffer;
                if (!v12)
                {
                  NeroTransportSendAsyncMessage();
                  v9 = destinationBuffer;
                }
              }
            }
          }
          if (v9)
            CFRelease(v9);
        }
        if (v7)
          CFRelease(v7);
      }
    }
  }
  if (cf)
    CFRelease(cf);
}

_QWORD *__nero_acquireNeroTimebaseForOctaviaTimebase_block_invoke(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = result;
  v2 = result[5] + 80;
  while (1)
  {
    v2 = *(_QWORD *)v2;
    if (!v2)
      break;
    if (*(_QWORD *)(v2 + 16) == result[6])
    {
      ++*(_DWORD *)(v2 + 32);
      *(_QWORD *)(*(_QWORD *)(result[4] + 8) + 24) = *(_QWORD *)(v2 + 24);
      break;
    }
  }
  if (!*(_QWORD *)(*(_QWORD *)(result[4] + 8) + 24))
  {
    v3 = malloc_type_calloc(1uLL, 0x28uLL, 0x10A004041EBAFA3uLL);
    v4 = v1[5];
    *((_QWORD *)v3 + 2) = v1[6];
    *((_DWORD *)v3 + 8) = 1;
    result = (_QWORD *)CMTimebaseCreateWithSourceClock((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CMClockRef *)(v4 + 64), (CMTimebaseRef *)v3 + 3);
    *(_QWORD *)(*(_QWORD *)(v1[4] + 8) + 24) = *((_QWORD *)v3 + 3);
    v5 = *(_QWORD *)(v1[5] + 80);
    *(_QWORD *)v3 = v5;
    if (v5)
      *(_QWORD *)(*(_QWORD *)(v1[5] + 80) + 8) = v3;
    *(_QWORD *)(v1[5] + 80) = v3;
    *((_QWORD *)v3 + 1) = v1[5] + 80;
  }
  return result;
}

void __nero_relinquishNeroTimebase_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  int v4;
  uint64_t v5;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = v2 + 10;
  while (1)
  {
    v3 = (_QWORD *)*v3;
    if (!v3)
      break;
    if (v3[3] == *(_QWORD *)(a1 + 40))
    {
      v4 = *((_DWORD *)v3 + 8) - 1;
      *((_DWORD *)v3 + 8) = v4;
      if (!v4)
      {
        v5 = *v3;
        if (*v3)
          *(_QWORD *)(v5 + 8) = v3[1];
        *(_QWORD *)v3[1] = v5;
        CFRelease((CFTypeRef)v3[3]);
        free(v3);
        v2 = *(_QWORD **)(a1 + 32);
      }
      break;
    }
  }
  CFRelease(v2);
}

uint64_t nrp_timebaseRateChangedCallbackApply(uint64_t a1, CMTimebaseRef timebase)
{
  float Rate;
  void (*v5)(uint64_t, BOOL);
  uint64_t result;
  uint64_t (*v7)(uint64_t, float);

  if (timebase)
  {
    CFGetTypeID(timebase);
    CMTimebaseGetTypeID();
  }
  Rate = CMTimebaseGetRate(timebase);
  v5 = *(void (**)(uint64_t, BOOL))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v5)
    v5(a1, Rate != 0.0);
  result = CMBaseObjectGetVTable();
  v7 = *(uint64_t (**)(uint64_t, float))(*(_QWORD *)(result + 16) + 48);
  if (v7)
    return v7(a1, Rate);
  return result;
}

void __nero_destroyVideoRenderPipeline_block_invoke(uint64_t a1)
{
  uint64_t v1;
  const __CFArray *v3;
  CFIndex FirstIndexOfValue;
  uint64_t v5;
  NSObject *v6;
  _QWORD block[5];
  CFRange v8;

  v1 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v1 + 16))
  {
    v3 = *(const __CFArray **)(v1 + 136);
    v8.length = CFArrayGetCount(v3);
    v8.location = 0;
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v3, v8, *(const void **)(a1 + 40));
    if (FirstIndexOfValue != -1)
    {
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(*(_QWORD *)(a1 + 32) + 136), FirstIndexOfValue);
      NeroTransportUnregisterObject();
      v5 = *(_QWORD *)(a1 + 40);
      v6 = *(NSObject **)(v5 + 40);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __nero_destroyVideoRenderPipeline_block_invoke_2;
      block[3] = &__block_descriptor_tmp_81_1;
      block[4] = v5;
      dispatch_async(v6, block);
    }
  }
}

void __nero_destroyVideoRenderPipeline_block_invoke_2(uint64_t a1)
{
  nrp_destroy(*(_QWORD *)(a1 + 32));
}

void __nero_retainClockForOctavia_block_invoke(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  if (CFDictionaryContainsKey(*(CFDictionaryRef *)(*(_QWORD *)(a1 + 32) + 72), *(const void **)(a1 + 40)))
  {
    v2 = (uint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)(*(_QWORD *)(a1 + 32) + 72), *(const void **)(a1 + 40)) + 1;
  }
  else
  {
    v3 = *(const void **)(a1 + 40);
    if (v3)
      CFRetain(v3);
    NeroTransportRegisterObject();
    v2 = 1;
  }
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(_QWORD *)(a1 + 32) + 72), *(const void **)(a1 + 40), (const void *)v2);
}

void __nero_retainClockForOctavia_block_invoke_2(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  NSObject *v5;
  _QWORD v6[4];
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 == 1919249523)
  {
    v8 = v2;
    v9 = v3;
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 0x40000000;
    v6[2] = __nero_releaseClockForOctavia_block_invoke;
    v6[3] = &__block_descriptor_tmp_86_4;
    v4 = *(_OWORD *)(a1 + 32);
    v5 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    v7 = v4;
    dispatch_async(v5, v6);
  }
}

void __nero_retainClockForOctavia_block_invoke_3(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  OpaqueCMClock *v5;
  uint64_t AnchorTime;
  uint64_t v7;
  CMBlockBufferRef v8;
  CMTime referenceClockTimeOut;
  CMTime clockTimeOut;
  CMBlockBufferRef blockBufferOut;

  if (a2 != 1953066341)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD))(a4 + 16))(a4, 4294955260, 0);
    return;
  }
  v5 = *(OpaqueCMClock **)(a1 + 32);
  blockBufferOut = 0;
  clockTimeOut = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  referenceClockTimeOut = clockTimeOut;
  AnchorTime = CMClockGetAnchorTime(v5, &clockTimeOut, &referenceClockTimeOut);
  if ((_DWORD)AnchorTime)
    goto LABEL_7;
  v7 = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0x18uLL, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0x18uLL, 1u, &blockBufferOut);
  v8 = blockBufferOut;
  if ((_DWORD)v7
    || (v7 = CMBlockBufferReplaceDataBytes(&clockTimeOut, blockBufferOut, 0, 0x18uLL), v8 = blockBufferOut, (_DWORD)v7))
  {
    AnchorTime = v7;
    if (v8)
      CFRelease(v8);
LABEL_7:
    (*(void (**)(uint64_t, uint64_t, _QWORD))(a4 + 16))(a4, AnchorTime, 0);
    return;
  }
  (*(void (**)(uint64_t, _QWORD, CMBlockBufferRef))(a4 + 16))(a4, 0, blockBufferOut);
  if (v8)
    CFRelease(v8);
}

void __nero_releaseClockForOctavia_block_invoke(uint64_t a1)
{
  char *Value;
  const void *v3;

  CFDictionaryContainsKey(*(CFDictionaryRef *)(*(_QWORD *)(a1 + 32) + 72), *(const void **)(a1 + 40));
  Value = (char *)CFDictionaryGetValue(*(CFDictionaryRef *)(*(_QWORD *)(a1 + 32) + 72), *(const void **)(a1 + 40));
  if (Value == (char *)1)
  {
    NeroTransportUnregisterObject();
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(*(_QWORD *)(a1 + 32) + 72), *(const void **)(a1 + 40));
    v3 = *(const void **)(a1 + 40);
    if (v3)
      CFRelease(v3);
  }
  else
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(_QWORD *)(a1 + 32) + 72), *(const void **)(a1 + 40), Value - 1);
  }
}

void nds_didDecodeFrame(uint64_t a1, int a2, int a3)
{
  OpaqueCMBlockBuffer *v3;
  size_t DataLength;
  CMBlockBufferRef destinationBuffer;
  int sourceBytes;
  int v7;

  sourceBytes = a2;
  v7 = a3;
  destinationBuffer = 0;
  if (!CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 8uLL, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 8uLL, 1u, &destinationBuffer)&& !CMBlockBufferReplaceDataBytes(&sourceBytes, destinationBuffer, 0, 4uLL)&& !CMBlockBufferReplaceDataBytes(&v7, destinationBuffer, 4uLL, 4uLL))
  {
    if (v7
      || !FigRemote_CreateSerializedAtomDataBlockBufferForPixelBuffer()
      && (v3 = destinationBuffer,
          DataLength = CMBlockBufferGetDataLength(0),
          !CMBlockBufferAppendBufferReference(v3, 0, 0, DataLength, 0)))
    {
      NeroTransportSendAsyncMessage();
    }
  }
  if (destinationBuffer)
    CFRelease(destinationBuffer);
}

void __nero_createVideoDecompressionSession_block_invoke(uint64_t a1, int a2, CMBlockBufferRef theSourceBuffer)
{
  VTDecompressionSessionRef *v3;
  int SampleBufferFromSerializedAtomDataBlockBuffer;
  CMSampleBufferRef v5;
  int destination;
  CMSampleBufferRef sampleBuffer;

  v3 = *(VTDecompressionSessionRef **)(a1 + 32);
  if (a2 > 1684628835)
  {
    if (a2 == 1684628836 || a2 == 1919249523)
      nds_destroy(*(_QWORD *)(a1 + 32));
  }
  else if (a2 == 561406316)
  {
    if (v3)
      VTDecompressionSessionInvalidate(*v3);
  }
  else if (a2 == 1684235365)
  {
    sampleBuffer = 0;
    destination = 0;
    if (!CMBlockBufferCopyDataBytes(theSourceBuffer, 0, 4uLL, &destination))
    {
      SampleBufferFromSerializedAtomDataBlockBuffer = FigRemote_CreateSampleBufferFromSerializedAtomDataBlockBuffer();
      v5 = sampleBuffer;
      if (!SampleBufferFromSerializedAtomDataBlockBuffer)
      {
        VTDecompressionSessionDecodeFrame(*v3, sampleBuffer, 0, (void *)destination, 0);
        v5 = sampleBuffer;
      }
      if (v5)
        CFRelease(v5);
    }
  }
}

void nds_destroy(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  if (a1)
  {
    NeroTransportUnregisterObject();
    if (*(_QWORD *)a1)
      CFRelease(*(CFTypeRef *)a1);
    v2 = *(NSObject **)(a1 + 16);
    if (v2)
      dispatch_release(v2);
    v3 = *(const void **)(a1 + 24);
    if (v3)
      CFRelease(v3);
    free((void *)a1);
  }
}

void __nero_displayWasAttached_block_invoke(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  CFIndex Count;
  CFIndex v5;
  CFIndex i;
  _QWORD *ValueAtIndex;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(const void **)(v2 + 128);
  if (v3)
  {
    CFRelease(v3);
    v2 = *(_QWORD *)(a1 + 32);
  }
  *(_QWORD *)(v2 + 128) = *(_QWORD *)(a1 + 40);
  Count = CFArrayGetCount(*(CFArrayRef *)(*(_QWORD *)(a1 + 32) + 136));
  if (Count >= 1)
  {
    v5 = Count;
    for (i = 0; i != v5; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(*(_QWORD *)(a1 + 32) + 136), i);
      nrp_setMinImageBounds(ValueAtIndex[2], *(CFDictionaryRef *)(*(_QWORD *)(a1 + 32) + 128));
    }
  }
  v8 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v8 + 113))
    nero_tellOctaviaDisplayWasAttached(v8);
}

void __nero_displayWasDetached_block_invoke(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(const void **)(v2 + 128);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 128) = 0;
    v2 = *(_QWORD *)(a1 + 32);
  }
  if (*(_BYTE *)(v2 + 113))
  {
    FigTransportGetRemoteRootObject();
    NeroTransportSendAsyncMessage();
  }
}

uint64_t nrp_unregisterNotificationListener()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterRemoveListener();
}

void __nero_reset_block_invoke(uint64_t a1)
{
  uint64_t *i;
  uint64_t v3;

  for (i = *(uint64_t **)(*(_QWORD *)(a1 + 32) + 80); i; i = *(uint64_t **)(*(_QWORD *)(a1 + 32) + 80))
  {
    v3 = *i;
    if (*i)
      *(_QWORD *)(v3 + 8) = i[1];
    *(_QWORD *)i[1] = v3;
    CFRelease((CFTypeRef)i[3]);
    free(i);
  }
}

void __nero_reset_block_invoke_2(uint64_t a1)
{
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(*(_QWORD *)(a1 + 32) + 72));
}

uint64_t __nero_getSharedNero_block_invoke()
{
  return FigNeroCreate(*MEMORY[0x1E0C9AE00], &nero_getSharedNero_sNero);
}

uint64_t FigVirtualDisplaySessionRemoteCreate(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return sessionCreateCommon(a1, a2, 1668441441, a3);
}

uint64_t sessionCreateCommon(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t uint64;
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  _QWORD block[16];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!FVDUtilsSessionServerEnabled())
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v6 = 4294954514;
    goto LABEL_14;
  }
  if (!a4)
  {
    v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v6 = 4294955226;
    goto LABEL_14;
  }
  v17 = 0;
  v18 = &v17;
  v19 = 0x2000000000;
  v20 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __fvdsr_ensureClientEstablished_block_invoke;
  block[3] = &unk_1E2FB5208;
  block[4] = &v17;
  if (fvdsr_ensureClientEstablished_onceToken != -1)
    dispatch_once(&fvdsr_ensureClientEstablished_onceToken, block);
  v6 = *((unsigned int *)v18 + 6);
  _Block_object_dispose(&v17, 8);
  if ((_DWORD)v6)
  {
    v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
LABEL_19:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_14;
  }
  v7 = FigXPCCreateBasicMessage();
  if ((_DWORD)v7)
    goto LABEL_18;
  if (a2)
  {
    v7 = FigXPCMessageSetCFDictionary();
    if ((_DWORD)v7)
      goto LABEL_18;
  }
  v7 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v7)
    goto LABEL_18;
  uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E0CA36A0]);
  if (!uint64)
  {
    v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  FigVirtualDisplaySessionGetClassID();
  v7 = CMDerivedObjectCreate();
  if ((_DWORD)v7)
  {
LABEL_18:
    v6 = v7;
    v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    goto LABEL_19;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)DerivedStorage = 0;
  *(_QWORD *)(DerivedStorage + 48) = uint64;
  *(_QWORD *)(DerivedStorage + 8) = dispatch_queue_create("com.apple.coremedia.vdsessionremote.stateq", 0);
  *(_QWORD *)(DerivedStorage + 16) = dispatch_queue_create("com.apple.coremedia.vdsessionremote.notifq", 0);
  FigXPCRemoteClientAssociateObject();
  v6 = 0;
  *a4 = 0;
LABEL_14:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t FigVirtualDisplaySessionRemoteFrameReceiverCreate(uint64_t a1, uint64_t a2, const void *a3, _QWORD *a4)
{
  uint64_t Common;
  uint64_t DerivedStorage;
  NSObject *v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (a3)
  {
    Common = sessionCreateCommon(a1, a2, 1668441715, a4);
    if ((_DWORD)Common)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    else
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(_QWORD *)(DerivedStorage + 32) = _Block_copy(a3);
    }
  }
  else
  {
    v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294955226;
  }
  return Common;
}

void __fvdsr_ensureClientEstablished_block_invoke(uint64_t a1)
{
  __CFDictionary *Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA54A0], CFSTR("SessionServerDied"));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = FigXPCRemoteClientCreate();
  if (Mutable)
    CFRelease(Mutable);
}

uint64_t fvdsr_handleDeadConnection()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(result + 56) = 1;
  return result;
}

uint64_t fvdsr_handleServerMessage()
{
  uint64_t OpCode;
  NSObject *v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v3;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  CMBaseObjectGetDerivedStorage();
  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
  {
    v3 = OpCode;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    v1 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294955226;
  }
  return v3;
}

void fvdsr_finalize()
{
  uint64_t DerivedStorage;
  NSObject *v1;
  NSObject *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)DerivedStorage)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (sFVDSessionRemoteClient)
    FigXPCRemoteClientDisassociateObject();
  if (!*(_BYTE *)(DerivedStorage + 56))
    fvdsr_sendBasicMessage(DerivedStorage, 1684632432, 0);
  v1 = *(NSObject **)(DerivedStorage + 8);
  if (v1)
  {
    dispatch_release(v1);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  v2 = *(NSObject **)(DerivedStorage + 16);
  if (v2)
  {
    dispatch_release(v2);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v3 = *(const void **)(DerivedStorage + 24);
  if (v3)
  {
    _Block_release(v3);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 32);
  if (v4)
  {
    _Block_release(v4);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 40);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
}

CFStringRef fvdsr_copyDebugDesc(const void *a1)
{
  unsigned int *DerivedStorage;
  const __CFAllocator *v3;
  uint64_t v4;
  CFIndex v5;

  DerivedStorage = (unsigned int *)CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  v4 = *DerivedStorage;
  v5 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(v3, 0, CFSTR("<FigVirtualDisplaySessionRemote %p state: %d retainCount: %ld objectID: %llu>"), a1, v4, v5, *((_QWORD *)DerivedStorage + 6));
}

uint64_t fvdsr_sendBasicMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v4 = FigXPCCreateBasicMessage();
  if ((_DWORD)v4 || a3 && (v4 = FigXPCMessageSetCFDictionary(), (_DWORD)v4))
  {
    v5 = v4;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    goto LABEL_9;
  }
  v5 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v5)
  {
    v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
LABEL_9:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t sessionStart_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  NSObject *v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD block[8];
  os_log_type_t type;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)DerivedStorage)
  {
    v12 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v7 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __sessionStart_block_invoke_0;
  block[3] = &unk_1E2FB52F0;
  block[4] = a3;
  block[5] = a1;
  block[6] = a2;
  block[7] = DerivedStorage;
  dispatch_sync(v7, block);
  return 0;
}

uint64_t sessionStop_0(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[5];

  v2 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __sessionStop_block_invoke_0;
  block[3] = &__block_descriptor_tmp_9_11;
  block[4] = a1;
  dispatch_sync(v2, block);
  return 0;
}

uint64_t sessionSuspend_0(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[5];

  v2 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __sessionSuspend_block_invoke_0;
  block[3] = &__block_descriptor_tmp_10_10;
  block[4] = a1;
  dispatch_sync(v2, block);
  return 0;
}

uint64_t sessionResume_0(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  uint64_t v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD block[6];
  os_log_type_t type;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  v11 = &v10;
  v12 = 0x2000000000;
  v13 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)DerivedStorage != 1)
  {
    v9 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v3 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __sessionResume_block_invoke_0;
  block[3] = &unk_1E2FB5358;
  block[4] = &v10;
  block[5] = a1;
  dispatch_sync(v3, block);
  v4 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v4;
}

void __sessionStart_block_invoke_0(_QWORD *a1)
{
  const __CFDictionary *v2;
  void *v3;
  uint64_t DerivedStorage;
  const void *v5;
  NSObject *v6;
  const __CFAllocator *v7;
  CFMutableDictionaryRef MutableCopy;
  int v9;
  const __CFDictionary *v10;
  const char *v11;
  const void *Value;
  const void *v13;
  CFStringRef v14;
  int v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD block[5];
  int v21;
  char v22;
  os_log_type_t type;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFDictionary *)a1[6];
  v3 = (void *)a1[4];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v22 = 0;
  if (v3)
    v3 = _Block_copy(v3);
  v5 = *(const void **)(DerivedStorage + 24);
  if (v5)
    _Block_release(v5);
  *(_QWORD *)(DerivedStorage + 24) = v3;
  if (!*(_DWORD *)DerivedStorage)
  {
    v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (v2)
      MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v2);
    else
      MutableCopy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v10 = MutableCopy;
    v11 = getprogname();
    if (*(_QWORD *)(DerivedStorage + 32))
    {
      Value = CFDictionaryGetValue(v10, CFSTR("usage"));
      if (!Value)
      {
LABEL_15:
        CFDictionarySetValue(v10, CFSTR("usage"), CFSTR("Uncompressed"));
        goto LABEL_16;
      }
      v13 = Value;
      if (!CFEqual(Value, CFSTR("Uncompressed")) && !CFEqual(v13, CFSTR("UncompressedHDR")))
      {
        v24 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_15;
      }
    }
LABEL_16:
    if (v11)
    {
      v14 = CFStringCreateWithCString(v7, v11, 0x8000100u);
      CFDictionaryAddValue(v10, CFSTR("clientName"), v14);
      if (v14)
        CFRelease(v14);
    }
    getpid();
    FigCFDictionarySetInt32();
    v9 = fvdsr_sendBasicMessage(DerivedStorage, 1937011316, (uint64_t)v10);
    if (v9)
    {
      v24 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      if (v10)
LABEL_24:
        CFRelease(v10);
    }
    else
    {
      FigCFDictionaryGetBooleanIfPresent();
      if (v22)
        v15 = 1;
      else
        v15 = 2;
      *(_DWORD *)DerivedStorage = v15;
      if (v10)
        goto LABEL_24;
    }
    if (!v9)
      return;
    goto LABEL_26;
  }
  v24 = 0;
  type = OS_LOG_TYPE_DEFAULT;
  v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  v9 = -12070;
LABEL_26:
  v16 = a1[4];
  if (v16)
  {
    v17 = *(NSObject **)(a1[7] + 16);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __sessionStart_block_invoke_2_0;
    block[3] = &unk_1E2FB52C8;
    block[4] = v16;
    v21 = v9;
    dispatch_async(v17, block);
  }
}

uint64_t __sessionStart_block_invoke_2_0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

uint64_t __sessionStop_block_invoke_0()
{
  _DWORD *DerivedStorage;
  uint64_t result;

  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  result = fvdsr_sendBasicMessage((uint64_t)DerivedStorage, 1937010544, 0);
  *DerivedStorage = 0;
  return result;
}

_DWORD *__sessionSuspend_block_invoke_0()
{
  _DWORD *result;
  _DWORD *v1;

  result = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (*result == 2)
  {
    v1 = result;
    result = (_DWORD *)fvdsr_sendBasicMessage((uint64_t)result, 1937077104, 0);
    *v1 = 1;
  }
  return result;
}

uint64_t __sessionResume_block_invoke_0(uint64_t a1)
{
  _DWORD *DerivedStorage;
  _DWORD *v3;
  uint64_t result;
  int v5;
  NSObject *v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage;
  if (*DerivedStorage == 1)
  {
    result = fvdsr_sendBasicMessage((uint64_t)DerivedStorage, 1919251309, 0);
    v5 = result;
    if ((_DWORD)result)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      result = fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    else
    {
      *v3 = 2;
    }
  }
  else
  {
    v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    result = fig_log_call_emit_and_clean_up_after_send_and_compose();
    v5 = -12070;
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v5;
  return result;
}

uint64_t FigSampleAttachmentCollectionRulesGetClassID()
{
  MEMORY[0x19402F294](&FigSampleAttachmentCollectionRulesGetClassID_sRegisterFigSampleAttachmentCollectionRulesBaseTypeOnce, RegisterFigSampleAttachmentCollectionRulesBaseType);
  return sFigSampleAttachmentCollectionRulesClassID;
}

uint64_t RegisterFigSampleAttachmentCollectionRulesBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigSampleAttachmentCollectionRulesGetTypeID()
{
  MEMORY[0x19402F294](&FigSampleAttachmentCollectionRulesGetClassID_sRegisterFigSampleAttachmentCollectionRulesBaseTypeOnce, RegisterFigSampleAttachmentCollectionRulesBaseType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigSampleAttachmentCollectionRulesCopyForManifold(uint64_t a1, const void *a2, _QWORD *a3)
{
  return rules_SampleAttachmentCollectionRulesCreate(a1, (uint64_t)&kManifoldSampleAttachmentCollectionRulesVTable, a2, a3);
}

uint64_t rules_SampleAttachmentCollectionRulesCreate(uint64_t a1, uint64_t a2, const void *a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t DerivedStorage;
  CFTypeRef v8;

  if (!a4)
    return FigSignalErrorAt();
  MEMORY[0x19402F294](&FigSampleAttachmentCollectionRulesGetClassID_sRegisterFigSampleAttachmentCollectionRulesBaseTypeOnce, RegisterFigSampleAttachmentCollectionRulesBaseType);
  result = CMDerivedObjectCreate();
  if (!(_DWORD)result)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (a3)
      v8 = CFRetain(a3);
    else
      v8 = 0;
    result = 0;
    *(_QWORD *)(DerivedStorage + 32) = v8;
    *a4 = 0;
  }
  return result;
}

uint64_t FigSampleAttachmentCollectionRulesCopyForFilePlayback(uint64_t a1, const void *a2, _QWORD *a3)
{
  return rules_SampleAttachmentCollectionRulesCreate(a1, (uint64_t)&kFilePlayerSampleAttachmentCollectionRulesVTable, a2, a3);
}

uint64_t FigSampleAttachmentCollectionRulesCopyForFileRemaker(uint64_t a1, const void *a2, _QWORD *a3)
{
  return rules_SampleAttachmentCollectionRulesCreate(a1, (uint64_t)&kRemakerSampleAttachmentCollectionRulesVTable, a2, a3);
}

CFStringRef FigSampleAttachmentCollectionRulesCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigSampleAttachmentCollectionRulesCopyFormattingDesc %p]"), a1);
}

void figSampleAttachmentCollectionRulesFinalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 24);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 32);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
}

__CFString *figSampleAttachmentCollectionRulesCopyDebugDesc(const void *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  CFIndex v4;
  CFAllocatorRef v5;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = CFGetRetainCount(a1);
  v5 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("FSAC %p retainCount: %d allocator: %p"), a1, v4, v5);
  return Mutable;
}

uint64_t figSampleAttachmentCollectionRulesCopyProperty(uint64_t a1, uint64_t a2)
{
  CMBaseObjectGetDerivedStorage();
  if (a2)
    return 0;
  else
    return 4294954516;
}

uint64_t figSampleAttachmentCollectionRulesSetProperty(uint64_t a1, uint64_t a2)
{
  CMBaseObjectGetDerivedStorage();
  if (a2)
    return 0;
  else
    return 4294954516;
}

uint64_t rules_formatDescriptionContainsCollectableData(uint64_t a1, const opaqueCMFormatDescription *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (!_os_feature_enabled_impl()
    || !FigVideoFormatDescriptionContainsHDR()
    || CMFormatDescriptionGetMediaType(a2) != 1835365473
    || CMFormatDescriptionGetMediaSubType(a2) != 1835360888)
  {
    return 0;
  }
  CMMetadataFormatDescriptionGetIdentifiers(a2);
  return FigCFArrayContainsValue();
}

uint64_t rules_copyCollectableAttachmentsFromMetadataSample(const void *a1, opaqueCMSampleBuffer *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  const __CFAllocator *v9;
  const void *Mutable;
  CMFormatDescriptionRef FormatDescription;
  CMFormatDescriptionRef v12;
  const void *v13;
  uint64_t v14;
  CFAllocatorRef refcon;
  CFTypeRef cf;
  uint64_t v18;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  refcon = 0;
  cf = 0;
  v18 = 0;
  if (a4 && a2)
  {
    v8 = DerivedStorage;
    *a4 = 0;
    if (_os_feature_enabled_impl())
    {
      v9 = CFGetAllocator(a1);
      Mutable = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      cf = Mutable;
      if (!CMSampleBufferGetNumSamples(a2))
        goto LABEL_13;
      FormatDescription = CMSampleBufferGetFormatDescription(a2);
      if (FormatDescription)
      {
        v12 = FormatDescription;
        if (!FigCFEqual())
        {
          v13 = *(const void **)v8;
          *(_QWORD *)v8 = v12;
          CFRetain(v12);
          if (v13)
            CFRelease(v13);
          *(_DWORD *)(v8 + 8) = FigMetadataFormatDescriptionGetFirstLocalIDForIdentifier();
        }
      }
      if (*(_DWORD *)(v8 + 8))
      {
        refcon = CFGetAllocator(a1);
        LODWORD(v18) = *(_DWORD *)(v8 + 8);
        v14 = CMSampleBufferCallForEachSample(a2, (OSStatus (__cdecl *)(CMSampleBufferRef, CMItemCount, void *))rules_collectSceneIlluminationAttachment, &refcon);
        Mutable = cf;
        if (!(_DWORD)v14)
        {
          *a4 = cf;
          return v14;
        }
      }
      else
      {
LABEL_13:
        v14 = 0;
      }
      if (Mutable)
        CFRelease(Mutable);
      return v14;
    }
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t rules_copyCollectedAttachmentsFromVideoSampleBuffer(const void *a1, const void *a2, __CFDictionary **a3)
{
  const __CFAllocator *v6;
  __CFDictionary *Mutable;
  const void *v8;
  CFTypeRef v9;

  if (_os_feature_enabled_impl())
  {
    v6 = CFGetAllocator(a1);
    Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v8 = (const void *)*MEMORY[0x1E0CA2630];
    v9 = CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA2630], 0);
    if (v9)
      CFDictionarySetValue(Mutable, v8, v9);
    *a3 = Mutable;
  }
  return 0;
}

uint64_t rules_copyRelevantAttachmentsFromVideoSampleBuffer(const void *a1, const void *a2, __CFDictionary **a3)
{
  const __CFAllocator *v6;
  __CFDictionary *Mutable;
  const void *v8;
  CFTypeRef v9;

  if (_os_feature_enabled_impl())
  {
    v6 = CFGetAllocator(a1);
    Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v8 = (const void *)*MEMORY[0x1E0CA2630];
    v9 = CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA2630], 0);
    if (v9)
      CFDictionarySetValue(Mutable, v8, v9);
    *a3 = Mutable;
  }
  return 0;
}

uint64_t rules_attachSceneIlluminationMetadataToPixelBuffer(uint64_t a1, const __CFDictionary *a2, __CVBuffer *a3)
{
  const void *Value;
  const void *v6;
  CFTypeID v7;
  __IOSurface *IOSurface;

  if (!a1 || !a2 || !a3)
    return FigSignalErrorAt();
  if (_os_feature_enabled_impl())
  {
    Value = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA2630]);
    if (Value)
    {
      v6 = Value;
      v7 = CFGetTypeID(Value);
      if (v7 == CFNumberGetTypeID())
      {
        CVBufferSetAttachment(a3, CFSTR("SceneIllumination"), v6, kCVAttachmentMode_ShouldPropagate);
        IOSurface = (__IOSurface *)CVDataBufferGetIOSurface();
        if (IOSurface)
          IOSurfaceSetValue(IOSurface, CFSTR("SceneIllumination"), v6);
      }
    }
  }
  return 0;
}

uint64_t rules_collectSceneIlluminationAttachment(opaqueCMSampleBuffer *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t NumberOfItems;
  uint64_t v7;
  uint64_t v8;
  int v9;

  CMSampleBufferGetDataBuffer(a1);
  CMSampleBufferGetFormatDescription(a1);
  v5 = FigBoxedMetadataCreateFromBlockBuffer();
  if (!(_DWORD)v5)
  {
    NumberOfItems = FigBoxedMetadataGetNumberOfItems();
    if (NumberOfItems >= 1)
    {
      v7 = NumberOfItems;
      v8 = 0;
      while (1)
      {
        v9 = *(_DWORD *)(a3 + 16);
        if (v9 == FigBoxedMetadataGetLocalIDOfItemAtIndex())
          break;
        if (v7 == ++v8)
          return v5;
      }
      FigBoxedMetadataGetValueOfItemAtIndexAsUInt32();
      FigCFDictionarySetUInt32();
    }
  }
  return v5;
}

uint64_t FigEndpointStreamAudioEngineRemoteXPC_ensureClientEstablished()
{
  uint64_t v0;
  _QWORD block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v6 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __FigEndpointStreamAudioEngineRemoteXPC_ensureClientEstablished_block_invoke;
  block[3] = &unk_1E2FB5518;
  block[4] = &v3;
  if (FigEndpointStreamAudioEngineRemoteXPC_ensureClientEstablished_sFigEndpointStreamAudioEngineRemoteClientSetupOnce != -1)
    dispatch_once(&FigEndpointStreamAudioEngineRemoteXPC_ensureClientEstablished_sFigEndpointStreamAudioEngineRemoteClientSetupOnce, block);
  v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t remoteXPCAudioEngine_CreateInternal(uint64_t a1, _QWORD *a2)
{
  const __CFAllocator *v4;
  uint64_t v5;
  _QWORD *DerivedStorage;
  CFMutableDictionaryRef Mutable;
  uint64_t v8;
  uint64_t v9;
  const void *v11;
  NSObject *v12;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  FigEndpointStreamAudioEngineGetClassID();
  v5 = CMDerivedObjectCreate();
  if ((_DWORD)v5)
    return v5;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[1] = a1;
  DerivedStorage[4] = 1;
  Mutable = CFDictionaryCreateMutable(v4, 0, 0, &kFigEndpointStreamAudioEngineRemoteXPC_CompletionCallbackEntryDictionaryValueCallbacks);
  DerivedStorage[3] = Mutable;
  if (Mutable)
  {
    v8 = FigDispatchQueueCreateWithPriority();
    DerivedStorage[2] = v8;
    if (v8)
    {
      v9 = FigXPCRemoteClientAssociateObject();
      if (!(_DWORD)v9)
      {
        *a2 = 0;
        return v9;
      }
    }
    else
    {
      v9 = 4294951816;
    }
    v11 = (const void *)DerivedStorage[3];
    if (v11)
      CFRelease(v11);
  }
  else
  {
    v9 = 4294951816;
  }
  v12 = DerivedStorage[2];
  if (v12)
    dispatch_release(v12);
  return v9;
}

uint64_t FigEndpointStreamAudioEngineXPCRemoteRetainCopiedAudioEngine(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v4;
  uint64_t v5;
  CFTypeRef v6;
  CFTypeRef cf;

  cf = 0;
  if (!a1 || !a2)
    return FigSignalErrorAt();
  v4 = FigEndpointStreamAudioEngineRemoteXPC_ensureClientEstablished();
  if ((_DWORD)v4)
    return v4;
  v5 = FigXPCRemoteClientRetainCopiedObject();
  v6 = cf;
  if ((_DWORD)v5 || (v5 = remoteXPCAudioEngine_CreateInternal(a1, &cf), v6 = cf, (_DWORD)v5))
  {
    if (v6)
      CFRelease(v6);
  }
  else
  {
    v5 = 0;
    *a2 = cf;
  }
  return v5;
}

uint64_t FigEndpointStreamAudioEngineXPCRemoteCopyAudioEngineFromEndpointStream(uint64_t a1, CFTypeRef *a2)
{
  uint64_t ObjectID;
  uint64_t uint64;
  uint64_t v5;

  FigEndpointStreamAudioEngineRemoteXPC_ensureClientEstablished();
  ObjectID = FigEndpointStreamXPCRemoteGetObjectID();
  if (!(_DWORD)ObjectID)
  {
    ObjectID = FigXPCCreateBasicMessage();
    if (!(_DWORD)ObjectID)
    {
      xpc_dictionary_set_uint64(0, "StreamObjectID", 0);
      ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)ObjectID)
      {
        uint64 = xpc_dictionary_get_uint64(0, "AudioEngineObjectID");
        ObjectID = FigEndpointStreamAudioEngineXPCRemoteRetainCopiedAudioEngine(uint64, a2);
      }
    }
  }
  v5 = ObjectID;
  FigXPCRelease();
  FigXPCRelease();
  return v5;
}

void remoteXPCAudioEngineClient_DeadConnectionCallback()
{
  uint64_t DerivedStorage;
  NSObject *v1;
  const __CFDictionary *v2;
  const void *v3;
  _QWORD v4[7];
  int context;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  int v11;

  *(_BYTE *)CMBaseObjectGetDerivedStorage() = 1;
  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x2000000000;
  v11 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  context = -16722;
  v1 = *(NSObject **)(DerivedStorage + 16);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = __FigEndpointStreamAudioEngineRemoteXPC_runAllCallbacks_block_invoke;
  v4[3] = &unk_1E2FB5540;
  v4[5] = v10;
  v4[6] = DerivedStorage;
  v4[4] = &v6;
  dispatch_sync(v1, v4);
  v2 = (const __CFDictionary *)v7[3];
  if (v2)
  {
    CFDictionaryApplyFunction(v2, (CFDictionaryApplierFunction)FigEndpointStreamAudioEngineRemoteXPC_runOneCallback, &context);
    v3 = (const void *)v7[3];
    if (v3)
      CFRelease(v3);
  }
  _Block_object_dispose(&v6, 8);
  _Block_object_dispose(v10, 8);
}

uint64_t remoteXPCAudioEngineClient_HandleClientMessage()
{
  uint64_t OpCode;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  else
    return 4294951815;
}

uint64_t FigEndpointStreamAudioEngineRemoteXPC_runOneCallback(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  int v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, _QWORD);
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v3 = *(_DWORD *)(a2 + 8) - 1;
  result = *(_QWORD *)a2;
  v6 = *a3;
  v8 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  switch(v3)
  {
    case 0:
    case 1:
    case 2:
      result = v8(result, v6, *(_QWORD *)(a2 + 24));
      break;
    case 3:
      v11 = *MEMORY[0x1E0CA2E18];
      v12 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      v9 = v11;
      v10 = v12;
      result = ((uint64_t (*)(uint64_t, uint64_t, __int128 *, __int128 *, _QWORD, uint64_t, double))v8)(result, v6, &v11, &v9, 0, v7, 0.0);
      break;
    default:
      return result;
  }
  return result;
}

void __remoteXPCAudioEngineClient_handleCompletionCallback_block_invoke(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  const void *v4;
  void *value;

  value = 0;
  if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(*(_QWORD *)(a1 + 40) + 24), *(const void **)(a1 + 48), (const void **)&value))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v3 = *((_OWORD *)value + 1);
    *(_OWORD *)(v2 + 24) = *(_OWORD *)value;
    *(_OWORD *)(v2 + 40) = v3;
    v4 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    if (v4)
      CFRetain(v4);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(*(_QWORD *)(a1 + 40) + 24), *(const void **)(a1 + 48));
  }
}

void FigEndpointStreamAudioEngineRemoteXPC_Finalize()
{
  uint64_t DerivedStorage;
  _BYTE *v1;
  const void *v2;
  NSObject *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = (_BYTE *)CMBaseObjectGetDerivedStorage();
  FigXPCRemoteClientDisassociateObject();
  if (!*v1 && !FigXPCCreateBasicMessage())
    FigXPCRemoteClientSendSyncMessage();
  FigXPCRelease();
  v2 = *(const void **)(DerivedStorage + 24);
  if (v2)
    CFRelease(v2);
  v3 = *(NSObject **)(DerivedStorage + 16);
  if (v3)
    dispatch_release(v3);
}

uint64_t FigEndpointStreamAudioEngineRemoteXPC_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t ObjectID;
  uint64_t uint64;
  uint64_t v8;
  uint64_t v10;
  CFTypeRef cf;

  v10 = 0;
  cf = 0;
  ObjectID = remoteXPCAudioEngine_GetObjectID(a1, &v10);
  if (!(_DWORD)ObjectID)
  {
    if (CFEqual(a2, CFSTR("endpointStream")))
    {
      ObjectID = FigXPCCreateBasicMessage();
      if ((_DWORD)ObjectID)
        goto LABEL_26;
      ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if ((_DWORD)ObjectID)
        goto LABEL_26;
      if (xpc_dictionary_get_uint64(0, "StreamObjectID"))
      {
        ObjectID = FigEndpointStreamXPCRemoteRetainCopiedEndpointStream();
        if ((_DWORD)ObjectID)
          goto LABEL_26;
      }
LABEL_23:
      v8 = 0;
      *a4 = cf;
      cf = 0;
      goto LABEL_24;
    }
    if (CFEqual(a2, CFSTR("inputSampleBufferConsumer")))
    {
      ObjectID = FigXPCCreateBasicMessage();
      if (!(_DWORD)ObjectID)
      {
        ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
        if (!(_DWORD)ObjectID)
        {
          uint64 = xpc_dictionary_get_uint64(0, "SampleBufferConsumerObjectID");
          if (!uint64)
            goto LABEL_23;
          ObjectID = FigSampleBufferConsumerXPCRemoteRetainCopiedSampleBufferConsumer(uint64, &cf);
          if (!(_DWORD)ObjectID)
            goto LABEL_23;
        }
      }
    }
    else if (CFEqual(a2, CFSTR("transportAudioFormatDescription")))
    {
      ObjectID = FigXPCCreateBasicMessage();
      if (!(_DWORD)ObjectID)
      {
        ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
        if (!(_DWORD)ObjectID)
        {
          ObjectID = FigXPCMessageCopyFigEndpointStreamAudioFormatDescription();
          if (!(_DWORD)ObjectID)
            goto LABEL_23;
        }
      }
    }
    else
    {
      if (!CFEqual(a2, CFSTR("supportedAudioFormatDescriptions")))
      {
        ObjectID = FigXPCSendStdCopyPropertyMessage();
        if ((_DWORD)ObjectID)
          goto LABEL_26;
        goto LABEL_23;
      }
      ObjectID = FigXPCCreateBasicMessage();
      if (!(_DWORD)ObjectID)
      {
        ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
        if (!(_DWORD)ObjectID)
        {
          ObjectID = FigXPCMessageCopyFigEndpointStreamAudioFormatDescriptionArray();
          if (!(_DWORD)ObjectID)
            goto LABEL_23;
        }
      }
    }
  }
LABEL_26:
  v8 = ObjectID;
  if (cf)
    CFRelease(cf);
LABEL_24:
  FigXPCRelease();
  FigXPCRelease();
  return v8;
}

uint64_t FigEndpointStreamAudioEngineRemoteXPC_SetProperty(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  ObjectID = remoteXPCAudioEngine_GetObjectID(a1, &v4);
  if (!(_DWORD)ObjectID)
    ObjectID = FigXPCSendStdSetPropertyMessage();
  v2 = ObjectID;
  FigXPCRelease();
  return v2;
}

uint64_t remoteXPCAudioEngine_GetObjectID(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  *a2 = *(_QWORD *)(DerivedStorage + 8);
  return 0;
}

uint64_t FigEndpointStreamAudioEngineRemoteXPC_Resume(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t ObjectID;
  __CFDictionary *MutableCopy;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, xpc_object_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t value;
  uint64_t v17;
  xpc_object_t xdict;

  v17 = 0;
  xdict = 0;
  v15 = 0;
  value = 0;
  ObjectID = remoteXPCAudioEngine_GetObjectID(a1, &v17);
  if ((_DWORD)ObjectID || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID))
  {
    v13 = ObjectID;
    MutableCopy = 0;
    goto LABEL_32;
  }
  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
  {
    v13 = 4294951816;
    goto LABEL_32;
  }
  v9 = FigCFDictionaryGetValue();
  if (v9)
  {
    xpc_dictionary_set_BOOL(xdict, "HasAudioSourceOption", 1);
    if (remoteXPCAudioEngine_getAPAudioSourceSharedMemoryWriterSetMessage_sAudioSourceFunctionLoadedOnce != -1)
      dispatch_once(&remoteXPCAudioEngine_getAPAudioSourceSharedMemoryWriterSetMessage_sAudioSourceFunctionLoadedOnce, &__block_literal_global_111);
    v10 = (uint64_t (*)(uint64_t, xpc_object_t))remoteXPCAudioEngine_getAPAudioSourceSharedMemoryWriterSetMessage_sAudioSourceSMWriterSetMessage;
    if (!remoteXPCAudioEngine_getAPAudioSourceSharedMemoryWriterSetMessage_sAudioSourceSMWriterSetMessage)
    {
      v11 = FigSignalErrorAt();
      if ((_DWORD)v11)
        goto LABEL_31;
    }
    v11 = v10(v9, xdict);
    if ((_DWORD)v11)
      goto LABEL_31;
    CFDictionaryRemoveValue(MutableCopy, CFSTR("audioSourceOption"));
  }
  else
  {
    xpc_dictionary_set_BOOL(xdict, "HasAudioSourceOption", 0);
  }
  if (FigCFDictionaryGetValue())
  {
    v11 = FigEndpointStreamXPCRemoteGetObjectID();
    if ((_DWORD)v11)
      goto LABEL_31;
    xpc_dictionary_set_uint64(xdict, "EndpointStreamHintObjectID", value);
    CFDictionaryRemoveValue(MutableCopy, CFSTR("endpointStreamHint"));
  }
  if (FigCFDictionaryGetValue())
  {
    v11 = FigXPCMessageSetFigEndpointStreamAudioFormatDescription();
    if ((_DWORD)v11)
      goto LABEL_31;
    CFDictionaryRemoveValue(MutableCopy, CFSTR("initialTransportAudioFormatDescriptionHint"));
  }
  if (!FigCFDictionaryGetValue())
    goto LABEL_20;
  v11 = FigXPCMessageSetFigEndpointStreamAudioFormatDescriptionArray();
  if (!(_DWORD)v11)
  {
    CFDictionaryRemoveValue(MutableCopy, CFSTR("supportedAudioFormatDescriptions"));
LABEL_20:
    v11 = FigXPCMessageSetCFDictionary();
    if (!(_DWORD)v11)
    {
      v12 = FigEndpointStreamAudioEngineRemoteXPC_sendMessageSynchronouslyExpectingCompletionCallback(a1, xdict, 1, (uint64_t)a3, a4, &v15);
      if (!a3)
        goto LABEL_26;
      v13 = v12;
      if (!(_DWORD)v12 || !FigEndpointStreamAudioEngineRemoteXPC_tryRemoveCallback(a1, v15))
        goto LABEL_26;
      goto LABEL_24;
    }
  }
LABEL_31:
  v13 = v11;
LABEL_32:
  if (a3)
LABEL_24:
    a3(a1, v13, a4);
  if (MutableCopy)
LABEL_26:
    CFRelease(MutableCopy);
  return FigXPCRelease();
}

uint64_t FigEndpointStreamAudioEngineRemoteXPC_Suspend(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t ObjectID;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  v12 = 0;
  v13 = 0;
  v11 = 0;
  ObjectID = remoteXPCAudioEngine_GetObjectID(a1, &v12);
  if ((_DWORD)ObjectID
    || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
    || (ObjectID = FigXPCMessageSetCFDictionary(), (_DWORD)ObjectID))
  {
    v9 = ObjectID;
    if (!a3)
      return FigXPCRelease();
    goto LABEL_7;
  }
  v8 = FigEndpointStreamAudioEngineRemoteXPC_sendMessageSynchronouslyExpectingCompletionCallback(a1, v13, 2, (uint64_t)a3, a4, &v11);
  if (a3)
  {
    v9 = v8;
    if ((_DWORD)v8)
    {
      if (FigEndpointStreamAudioEngineRemoteXPC_tryRemoveCallback(a1, v11))
LABEL_7:
        a3(a1, v9, a4);
    }
  }
  return FigXPCRelease();
}

uint64_t FigEndpointStreamAudioEngineRemoteXPC_SetEndpointStream(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t ObjectID;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t value;
  uint64_t v14;
  xpc_object_t xdict;

  v14 = 0;
  xdict = 0;
  v12 = 0;
  value = 0;
  ObjectID = remoteXPCAudioEngine_GetObjectID(a1, &v14);
  if ((_DWORD)ObjectID
    || a2 && (ObjectID = FigEndpointStreamXPCRemoteGetObjectID(), (_DWORD)ObjectID)
    || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID))
  {
    v10 = ObjectID;
    if (!a3)
      return FigXPCRelease();
    goto LABEL_8;
  }
  xpc_dictionary_set_uint64(xdict, "StreamObjectID", value);
  v9 = FigEndpointStreamAudioEngineRemoteXPC_sendMessageSynchronouslyExpectingCompletionCallback(a1, xdict, 3, (uint64_t)a3, a4, &v12);
  if (a3)
  {
    v10 = v9;
    if ((_DWORD)v9)
    {
      if (FigEndpointStreamAudioEngineRemoteXPC_tryRemoveCallback(a1, v12))
LABEL_8:
        a3(a1, v10, a4);
    }
  }
  return FigXPCRelease();
}

uint64_t FigEndpointStreamAudioEngineRemoteXPC_Flush(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  ObjectID = remoteXPCAudioEngine_GetObjectID(a1, v5);
  if ((_DWORD)ObjectID)
  {
    v3 = ObjectID;
  }
  else
  {
    v2 = FigXPCCreateBasicMessage();
    if ((_DWORD)v2 || (v2 = FigXPCMessageSetCFDictionary(), (_DWORD)v2))
      v3 = v2;
    else
      v3 = FigXPCRemoteClientSendSyncMessage();
  }
  FigXPCRelease();
  return v3;
}

uint64_t FigEndpointStreamAudioEngineRemoteXPC_FlushWithinSampleRange(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  ObjectID = remoteXPCAudioEngine_GetObjectID(a1, v5);
  if ((_DWORD)ObjectID)
  {
    v3 = ObjectID;
  }
  else
  {
    v2 = FigXPCCreateBasicMessage();
    if ((_DWORD)v2 || (v2 = FigXPCMessageSetCMTimeRange(), (_DWORD)v2))
      v3 = v2;
    else
      v3 = FigXPCRemoteClientSendSyncMessage();
  }
  FigXPCRelease();
  return v3;
}

uint64_t FigEndpointStreamAudioEngineRemoteXPC_SetRateAndAnchorTime(uint64_t a1, __int128 *a2, __int128 *a3, void (*a4)(uint64_t, uint64_t, __int128 *, __int128 *, _QWORD, uint64_t, double), uint64_t a5, double a6)
{
  uint64_t ObjectID;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  xpc_object_t xdict;

  v21 = 0;
  xdict = 0;
  v20 = 0;
  ObjectID = remoteXPCAudioEngine_GetObjectID(a1, &v21);
  if ((_DWORD)ObjectID)
    goto LABEL_11;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_11;
  xpc_dictionary_set_double(xdict, "Rate", a6);
  v18 = *a2;
  v19 = *((_QWORD *)a2 + 2);
  ObjectID = FigXPCMessageSetCMTime();
  if ((_DWORD)ObjectID
    || (v18 = *a3, v19 = *((_QWORD *)a3 + 2), ObjectID = FigXPCMessageSetCMTime(), (_DWORD)ObjectID)
    || (ObjectID = FigXPCMessageSetCFDictionary(), (_DWORD)ObjectID))
  {
LABEL_11:
    v14 = ObjectID;
    if (!a4)
      return FigXPCRelease();
    goto LABEL_9;
  }
  v13 = FigEndpointStreamAudioEngineRemoteXPC_sendMessageSynchronouslyExpectingCompletionCallback(a1, xdict, 4, (uint64_t)a4, a5, &v20);
  if (a4)
  {
    v14 = v13;
    if ((_DWORD)v13)
    {
      if (FigEndpointStreamAudioEngineRemoteXPC_tryRemoveCallback(a1, v20))
      {
LABEL_9:
        v18 = *MEMORY[0x1E0CA2E18];
        v19 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
        v16 = v18;
        v17 = v19;
        a4(a1, v14, &v18, &v16, 0, a5, 0.0);
      }
    }
  }
  return FigXPCRelease();
}

uint64_t FigEndpointStreamAudioEngineRemoteXPC_SetEndOfSiriTTSUtteranceMediaTime(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v5[1] = 0;
  v5[0] = 0;
  ObjectID = remoteXPCAudioEngine_GetObjectID(a1, v5);
  if ((_DWORD)ObjectID)
  {
    v3 = ObjectID;
  }
  else
  {
    v2 = FigXPCCreateBasicMessage();
    if ((_DWORD)v2 || (v2 = FigXPCMessageSetCMTime(), (_DWORD)v2))
      v3 = v2;
    else
      v3 = FigXPCRemoteClientSendSyncMessage();
  }
  FigXPCRelease();
  return v3;
}

uint64_t FigEndpointStreamAudioEngineRemoteXPC_ApplyVolumeFade(uint64_t a1, unsigned int a2)
{
  uint64_t ObjectID;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  xpc_object_t xdict;

  v7 = 0;
  xdict = 0;
  ObjectID = remoteXPCAudioEngine_GetObjectID(a1, &v7);
  if ((_DWORD)ObjectID)
  {
    v5 = ObjectID;
  }
  else
  {
    v4 = FigXPCCreateBasicMessage();
    if ((_DWORD)v4
      || (xpc_dictionary_set_uint64(xdict, "VolumeFadeType", a2), v4 = FigXPCMessageSetCMTime(), (_DWORD)v4))
    {
      v5 = v4;
    }
    else
    {
      v5 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  return v5;
}

uint64_t FigEndpointStreamAudioEngineRemoteXPC_sendMessageSynchronouslyExpectingCompletionCallback(uint64_t a1, void *a2, int a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t DerivedStorage;
  NSObject *v13;
  uint64_t v14;
  _QWORD block[8];
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v21 = 0;
  v22 = &v21;
  v23 = 0x2000000000;
  v24 = 0;
  if (a4)
  {
    v13 = *(NSObject **)(DerivedStorage + 16);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __FigEndpointStreamAudioEngineRemoteXPC_sendMessageSynchronouslyExpectingCompletionCallback_block_invoke;
    block[3] = &unk_1E2FB56B8;
    block[4] = &v21;
    block[5] = a1;
    block[6] = DerivedStorage;
    block[7] = a1;
    v17 = a3;
    v18 = 0;
    v19 = a4;
    v20 = a5;
    dispatch_sync(v13, block);
    xpc_dictionary_set_uint64(a2, "CompletionID", v22[3]);
  }
  v14 = FigXPCRemoteClientSendSyncMessage();
  if (a6)
    *a6 = v22[3];
  FigXPCRemoteClientKillServerOnTimeout();
  _Block_object_dispose(&v21, 8);
  return v14;
}

uint64_t FigEndpointStreamAudioEngineRemoteXPC_tryRemoveCallback(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  NSObject *v4;
  _QWORD block[7];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  if (a2)
  {
    v4 = *(NSObject **)(DerivedStorage + 16);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __FigEndpointStreamAudioEngineRemoteXPC_tryRemoveCallback_block_invoke;
    block[3] = &unk_1E2FB56E0;
    block[5] = DerivedStorage;
    block[6] = a2;
    block[4] = &v7;
    dispatch_sync(v4, block);
    a2 = *((unsigned __int8 *)v8 + 24);
  }
  _Block_object_dispose(&v7, 8);
  return a2;
}

void *__remoteXPCAudioEngine_getAPAudioSourceSharedMemoryWriterSetMessage_block_invoke()
{
  void *result;

  result = dlopen("/System/Library/PrivateFrameworks/AirPlaySender.framework/AirPlaySender", 4);
  if (result)
  {
    result = dlsym(result, "APAudioSourceSharedMemoryWriterSetMessageParameters");
    remoteXPCAudioEngine_getAPAudioSourceSharedMemoryWriterSetMessage_sAudioSourceSMWriterSetMessage = result;
  }
  return result;
}

_QWORD *remoteXPCAudioEngine_cloneCompletionCallback(const __CFAllocator *a1, _OWORD *a2)
{
  _OWORD *v3;
  _QWORD *v4;
  __int128 v5;
  const void *v6;

  v3 = CFAllocatorAllocate(a1, 32, 0);
  v4 = v3;
  if (v3)
  {
    v5 = a2[1];
    *v3 = *a2;
    v3[1] = v5;
    v6 = *(const void **)v3;
    if (*v4)
      CFRetain(v6);
  }
  return v4;
}

void remoteXPCAudioEngine_freeCompletionCallback(CFAllocatorRef allocator, CFTypeRef *ptr)
{
  if (*ptr)
    CFRelease(*ptr);
  CFAllocatorDeallocate(allocator, ptr);
}

uint64_t FigLayerViewGetClassID()
{
  if (FigLayerViewGetClassID_sRegisterFigLayerViewTypeOnce != -1)
    dispatch_once(&FigLayerViewGetClassID_sRegisterFigLayerViewTypeOnce, &__block_literal_global_112);
  return FigLayerViewGetClassID_sFigLayerViewClassID;
}

CFStringRef flv_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<FigLayerView %p>"), a1);
}

uint64_t FigLayerViewGetTypeID()
{
  if (FigLayerViewGetClassID_sRegisterFigLayerViewTypeOnce != -1)
    dispatch_once(&FigLayerViewGetClassID_sRegisterFigLayerViewTypeOnce, &__block_literal_global_112);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigPKDMSECPECryptorCreate(const void *a1, const void *a2, const void *a3, const __CFAllocator *a4, const __CFDictionary *a5, CFTypeRef *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t DerivedStorage;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  dispatch_queue_t v17;
  void *v18;
  NSObject *global_queue;
  const void *Value;
  const void *v21;
  CFTypeRef v22;
  __int128 v25;
  void (*v26)(uint64_t, void *);
  CFTypeRef v27;

  v25 = xmmword_1E2FB5798;
  v26 = KeyRequestErrorOccurredCallback_0;
  v27 = 0;
  if (FigPKDMSECPECryptorCreate_once != -1)
    dispatch_once_f(&FigPKDMSECPECryptorCreate_once, 0, (dispatch_function_t)PKDMSEInitOnce);
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  v11 = 4294955146;
  if (!a6 || !a2 || !a1 || !a5)
    goto LABEL_28;
  MEMORY[0x19402F294](&FigPKDMSECPECryptorGetClassID_sRegisterFigPKDMSECPECryptorTypeOnce, RegisterFigPKDMSECPECryptorType);
  v12 = CMDerivedObjectCreate();
  if ((_DWORD)v12)
    goto LABEL_27;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage
    || (v14 = DerivedStorage,
        v15 = FigCFWeakReferenceHolderCreateWithReferencedObject(),
        (*(_QWORD *)(v14 + 8) = v15) == 0)
    || (v16 = FigReadWriteLockCreate(), (*(_QWORD *)(v14 + 16) = v16) == 0)
    || (v17 = dispatch_queue_create("AirPlayStreamingNotifications", 0), (*(_QWORD *)(v14 + 120) = v17) == 0))
  {
    v11 = 4294955145;
    goto LABEL_28;
  }
  *(_QWORD *)v14 = CFRetain(a1);
  *(_QWORD *)(v14 + 32) = CFRetain(a2);
  v12 = EnsureUUID_1(v27);
  if ((_DWORD)v12)
    goto LABEL_27;
  v18 = *(void **)(v14 + 96);
  global_queue = dispatch_get_global_queue(0, 0);
  v12 = PKDKeyManagerInstallCallbacksForKeyID((uint64_t)a2, v18, (uint64_t)v27, global_queue, &v25);
  if ((_DWORD)v12)
    goto LABEL_27;
  CMNotificationCenterGetDefaultLocalCenter();
  v12 = FigNotificationCenterAddWeakListener();
  if ((_DWORD)v12)
    goto LABEL_27;
  if (a3)
  {
    *(_QWORD *)(v14 + 56) = CFRetain(a3);
    goto LABEL_19;
  }
  v12 = FigCPEExternalProtectionMonitorCreateForMethods(a4, 4u, 0, 0, (_QWORD *)(v14 + 56));
  if ((_DWORD)v12)
  {
LABEL_27:
    v11 = v12;
    goto LABEL_28;
  }
  *(_BYTE *)(v14 + 64) = 1;
LABEL_19:
  Value = CFDictionaryGetValue(a5, CFSTR("AssetID"));
  if (Value)
    Value = CFRetain(Value);
  *(_QWORD *)(v14 + 40) = Value;
  v21 = CFDictionaryGetValue(a5, CFSTR("CryptKeyAttributes"));
  if (!v21)
  {
    *(_QWORD *)(v14 + 104) = 0;
    goto LABEL_26;
  }
  v22 = CFRetain(v21);
  *(_QWORD *)(v14 + 104) = v22;
  if (!v22)
  {
LABEL_26:
    v12 = FigSignalErrorAt();
    goto LABEL_27;
  }
  FigCPEExternalProtectionMonitorBeginMonitoring(*(_QWORD *)(v14 + 56));
  v11 = AddWeakListenerOnExternalProtectionMonitor_0((uint64_t)v27, *(_QWORD *)(v14 + 56));
  if (!(_DWORD)v11)
  {
    *(_QWORD *)(v14 + 112) = 0;
    *a6 = v27;
    return v11;
  }
LABEL_28:
  if (v27)
    CFRelease(v27);
  return v11;
}

void PersistentKeyUpdatedCallback_0(uint64_t a1, void *a2)
{
  CFDictionaryRef v2;
  CFDictionaryRef v3;
  void *values;

  values = a2;
  CMBaseObjectGetDerivedStorage();
  v2 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], MEMORY[0x1E0CA3188], (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v2)
  {
    v3 = v2;
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v3);
  }
  else if (FigSignalErrorAt())
  {
    FigSignalErrorAt();
  }
}

void KeyRequestErrorOccurredCallback_0(uint64_t a1, void *a2)
{
  CFDictionaryRef v2;
  CFDictionaryRef v3;
  void *values;

  values = a2;
  CMBaseObjectGetDerivedStorage();
  v2 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], MEMORY[0x1E0CA3120], (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v2)
  {
    v3 = v2;
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v3);
  }
  else if (FigSignalErrorAt())
  {
    FigSignalErrorAt();
  }
}

uint64_t EnsureUUID_1(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const __CFAllocator *v4;
  CFUUIDRef v5;
  const __CFUUID *v6;
  const __CFAllocator *v7;
  CFStringRef v8;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 96))
    return 0;
  v3 = DerivedStorage;
  v4 = CFGetAllocator(a1);
  v5 = CFUUIDCreate(v4);
  if (v5)
  {
    v6 = v5;
    v7 = CFGetAllocator(a1);
    v8 = CFUUIDCreateString(v7, v6);
    *(_QWORD *)(v3 + 96) = v8;
    if (v8)
      v9 = 0;
    else
      v9 = FigSignalErrorAt();
    CFRelease(v6);
    return v9;
  }
  return FigSignalErrorAt();
}

void DecryptContextInvalidated(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  CMBaseObjectGetDerivedStorage();
  if (a5)
  {
    CFDictionaryGetValue(a5, CFSTR("AssetID"));
    if (FigCFEqual())
      InvalidateGuts(a2);
  }
}

uint64_t AddWeakListenerOnExternalProtectionMonitor_0(uint64_t a1, uint64_t a2)
{
  if (!a1 || !a2)
    return FigSignalErrorAt();
  CMNotificationCenterGetDefaultLocalCenter();
  return FigNotificationCenterAddWeakListener();
}

void FigCFRelease_10(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t FigPKDMSECPELimitedCryptorCreate(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;

  v3 = 4294955146;
  if (a1 && a3)
  {
    MEMORY[0x19402F294](&FigPKDMSECPECryptorGetClassID_sRegisterFigPKDMSECPECryptorTypeOnce, RegisterFigPKDMSECPECryptorType);
    v6 = CMDerivedObjectCreate();
    if ((_DWORD)v6)
    {
      return v6;
    }
    else
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (DerivedStorage && (v8 = DerivedStorage, v9 = FigReadWriteLockCreate(), (*(_QWORD *)(v8 + 16) = v9) != 0))
      {
        v3 = 0;
        *(_QWORD *)(v8 + 24) = a1;
        *a3 = 0;
      }
      else
      {
        return 4294955145;
      }
    }
  }
  return v3;
}

uint64_t FigPKDMSECPELimitedCryptorCreateWithExternalProtectionMethods(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;

  v6 = FigPKDMSECPELimitedCryptorCreate(a1, a3, a4);
  v7 = v6;
  if (a4 && !(_DWORD)v6)
    *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 48) = a2;
  return v7;
}

BOOL FigPKDMSECPECryptorEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t FigPKDMSECPECryptorInvalidate(const void *a1)
{
  InvalidateGuts(a1);
  return 0;
}

void FigPKDMSECPECryptorFinalize(const void *a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  InvalidateGuts(a1);
  if (*(_QWORD *)(DerivedStorage + 16))
  {
    FigReadWriteLockDestroy();
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v3 = *(NSObject **)(DerivedStorage + 120);
  if (v3)
  {
    dispatch_release(v3);
    *(_QWORD *)(DerivedStorage + 120) = 0;
  }
}

__CFString *FigPKDMSECPECryptorCopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  const __CFDictionary *v5;
  const void *Value;
  const __CFString *v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  FigReadWriteLockLockForRead();
  if (!*(_BYTE *)(DerivedStorage + 24))
  {
    if (Mutable && (v5 = *(const __CFDictionary **)(DerivedStorage + 104)) != 0)
      Value = CFDictionaryGetValue(v5, (const void *)*MEMORY[0x1E0CA3030]);
    else
      Value = 0;
    EnsureUUID_1(a1);
    v7 = PKDLogPrivateData((uint64_t)Value);
    CFStringAppendFormat(Mutable, 0, CFSTR("<FigCPECryptorPKD_MSE %p identifier: %@ uuid: %@>"), a1, v7, *(_QWORD *)(DerivedStorage + 96));
  }
  FigReadWriteLockUnlockForRead();
  return Mutable;
}

uint64_t FigPKDMSECPECryptorCopyProperty(const void *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  int IsDecryptContextAvailableForKeyID;
  const void **v12;
  const void *UInt32;
  uint64_t v15;
  uint64_t KeyRequestStateAndID;
  uint64_t SInt32;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, const void *, uint64_t, uint64_t *);
  uint64_t Methods;
  int v21;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = 4294955146;
  if (a2 && a4)
  {
    v10 = DerivedStorage;
    FigReadWriteLockLockForRead();
    if (*(_BYTE *)(v10 + 24))
    {
      v9 = 4294954511;
LABEL_17:
      FigReadWriteLockUnlockForRead();
      return v9;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31A0]))
    {
      v9 = 4294951076;
      goto LABEL_17;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3218]))
    {
      IsDecryptContextAvailableForKeyID = PKDKeyManagerIsDecryptContextAvailableForKeyID(*(_QWORD *)(v10 + 32), *(void **)(v10 + 96));
LABEL_11:
      v12 = (const void **)MEMORY[0x1E0C9AE50];
      if (IsDecryptContextAvailableForKeyID)
        v12 = (const void **)MEMORY[0x1E0C9AE40];
      UInt32 = *v12;
LABEL_14:
      UInt32 = CFRetain(UInt32);
LABEL_15:
      v9 = 0;
LABEL_16:
      *a4 = (uint64_t)UInt32;
      goto LABEL_17;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3210]))
    {
      IsDecryptContextAvailableForKeyID = PKDKeyManagerIsReadyToCreateKeyRequestForKeyID(*(_QWORD *)(v10 + 32), *(void **)(v10 + 96));
      goto LABEL_11;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31E0]))
    {
      v15 = *(_QWORD *)(v10 + 32);
      if (!v15)
      {
        v9 = 0;
        goto LABEL_17;
      }
    }
    else
    {
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31E8]))
      {
        v21 = 0;
        KeyRequestStateAndID = PKDKeyManagerGetKeyRequestStateAndID(*(_QWORD *)(v10 + 32), *(void **)(v10 + 96), &v21, 0);
        if (!(_DWORD)KeyRequestStateAndID)
        {
          SInt32 = FigCFNumberCreateSInt32();
          *a4 = SInt32;
          if (SInt32)
            v9 = 0;
          else
            v9 = 4294949725;
          goto LABEL_17;
        }
        goto LABEL_22;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3220]))
      {
        v15 = *(_QWORD *)(v10 + 32);
        if (!v15)
        {
          v9 = EnsureRequiredExternalProtectionMethod_0((uint64_t)a1);
          if ((_DWORD)v9)
            goto LABEL_17;
          UInt32 = (const void *)FigCFNumberCreateUInt32();
          goto LABEL_16;
        }
      }
      else
      {
        if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3238])
          && !CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31F8])
          && !CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31F0]))
        {
          if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31C0]))
          {
            Methods = FigCPEExternalProtectionMonitorGetMethods(*(_QWORD *)(v10 + 56));
            UInt32 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &Methods);
            goto LABEL_15;
          }
          if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31D8]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31C8]))
          {
            v9 = 4294954509;
            goto LABEL_17;
          }
          if (CFEqual(a2, CFSTR("DisplayList")) && *(_BYTE *)(v10 + 64))
          {
            KeyRequestStateAndID = FigCPEExternalProtectionMonitorCopyProperty(*(_QWORD *)(v10 + 56), CFSTR("DisplayList"), a3, (uint64_t)a4);
          }
          else if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3230]))
          {
            KeyRequestStateAndID = EnsureUUID_1(a1);
            if (!(_DWORD)KeyRequestStateAndID)
            {
              UInt32 = *(const void **)(v10 + 96);
              if (!UInt32)
                goto LABEL_15;
              goto LABEL_14;
            }
          }
          else if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31B8]))
          {
            KeyRequestStateAndID = CopyCurrentRequestID_1(v10, a4);
          }
          else
          {
            if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31B0]))
            {
              UInt32 = *(const void **)(v10 + 104);
              if (!UInt32)
                goto LABEL_15;
              goto LABEL_14;
            }
            v18 = *(_QWORD *)v10;
            if (!*(_QWORD *)v10)
            {
              v9 = 4294954512;
              goto LABEL_17;
            }
            v19 = *(uint64_t (**)(uint64_t, const void *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
            if (!v19)
            {
              v9 = 4294954514;
              goto LABEL_17;
            }
            KeyRequestStateAndID = v19(v18, a2, a3, a4);
          }
LABEL_22:
          v9 = KeyRequestStateAndID;
          goto LABEL_17;
        }
        v15 = *(_QWORD *)(v10 + 32);
      }
    }
    KeyRequestStateAndID = PKDKeyManagerCopyPropertyForKeyID(v15, *(void **)(v10 + 96), a2, (CFDataRef *)a4);
    goto LABEL_22;
  }
  return v9;
}

uint64_t FigPKDMSECPECryptorSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  CFTypeID v9;
  uint64_t Methods;
  uint64_t KeyRequestStateAndID;
  CFTypeRef v12;
  CFTypeRef v13;
  const void *v14;
  CFTypeRef v15;
  CFTypeID v16;
  unsigned int v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, const void *, const void *);
  CFTypeRef cf;
  uint64_t valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294955146;
  v7 = DerivedStorage;
  FigReadWriteLockLockForRead();
  if (!*(_BYTE *)(v7 + 24))
  {
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31C0]))
    {
      valuePtr = 0;
      if (a3)
      {
        v9 = CFGetTypeID(a3);
        if (v9 == CFNumberGetTypeID())
        {
          Methods = FigCPEExternalProtectionMonitorGetMethods(*(_QWORD *)(v7 + 56));
          CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt64Type, &valuePtr);
          if ((valuePtr & ~Methods) == 0)
          {
LABEL_29:
            v8 = 0;
            goto LABEL_30;
          }
          cf = 0;
          KeyRequestStateAndID = FigCPEExternalProtectionMonitorCreateForMethods((const __CFAllocator *)*MEMORY[0x1E0C9AE00], valuePtr & ~(_DWORD)Methods, 0, *(CFTypeRef *)(v7 + 56), &cf);
          if (!(_DWORD)KeyRequestStateAndID)
          {
            v12 = *(CFTypeRef *)(v7 + 56);
            if (v12 == cf)
            {
              v13 = *(CFTypeRef *)(v7 + 56);
LABEL_23:
              *(_QWORD *)(v7 + 56) = v13;
              if (v13)
                CFRetain(v13);
              if (v12)
                CFRelease(v12);
              v15 = cf;
              if (!cf)
                goto LABEL_29;
              goto LABEL_28;
            }
            KeyRequestStateAndID = AddWeakListenerOnExternalProtectionMonitor_0(a1, (uint64_t)cf);
            if (!(_DWORD)KeyRequestStateAndID)
            {
              KeyRequestStateAndID = RemoveWeakListenerOnExternalProtectionMonitor_0(a1, *(_QWORD *)(v7 + 56));
              if (!(_DWORD)KeyRequestStateAndID)
              {
                v13 = cf;
                v12 = *(CFTypeRef *)(v7 + 56);
                goto LABEL_23;
              }
            }
          }
          goto LABEL_36;
        }
      }
    }
    else
    {
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3208]))
      {
        v14 = *(const void **)(v7 + 80);
        *(_QWORD *)(v7 + 80) = a3;
        if (a3)
          CFRetain(a3);
        if (!v14)
          goto LABEL_29;
        v15 = v14;
LABEL_28:
        CFRelease(v15);
        goto LABEL_29;
      }
      if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31E0]))
      {
        if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3238]))
          goto LABEL_35;
        if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31F0]))
        {
          if (CFEqual(a2, CFSTR("DisplayList")) && *(_BYTE *)(v7 + 64))
          {
            v18 = FigCPEExternalProtectionMonitorSetProperty(*(_QWORD **)(v7 + 56), CFSTR("DisplayList"), (CFArrayRef)a3);
            if (v18 == -12152)
              v8 = 0;
            else
              v8 = v18;
            goto LABEL_30;
          }
          v19 = *(_QWORD *)v7;
          if (!*(_QWORD *)v7)
          {
            v8 = 4294954512;
            goto LABEL_30;
          }
          v20 = *(uint64_t (**)(uint64_t, const void *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 56);
          if (!v20)
          {
            v8 = 4294954514;
            goto LABEL_30;
          }
          KeyRequestStateAndID = v20(v19, a2, a3);
          goto LABEL_36;
        }
        valuePtr = 0;
        KeyRequestStateAndID = PKDKeyManagerGetKeyRequestStateAndID(*(_QWORD *)(v7 + 32), *(void **)(v7 + 96), 0, &valuePtr);
        if (!(_DWORD)KeyRequestStateAndID)
LABEL_35:
          KeyRequestStateAndID = PKDKeyManagerSetPropertyForKeyID(*(_QWORD *)(v7 + 32), *(void **)(v7 + 96), a2, a3);
LABEL_36:
        v8 = KeyRequestStateAndID;
        goto LABEL_30;
      }
      if (a3)
      {
        v16 = CFGetTypeID(a3);
        if (v16 == CFErrorGetTypeID())
        {
          KeyRequestStateAndID = PKDKeyManagerSetKeyRequestError(*(_QWORD *)(v7 + 32), *(void **)(v7 + 96), a3);
          goto LABEL_36;
        }
      }
    }
    KeyRequestStateAndID = FigSignalErrorAt();
    goto LABEL_36;
  }
  v8 = 4294954511;
LABEL_30:
  FigReadWriteLockUnlockForRead();
  return v8;
}

void InvalidateGuts(const void *a1)
{
  uint64_t DerivedStorage;
  int v3;
  const void *v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  const void *v8;
  uint64_t v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  void *v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigReadWriteLockLockForWrite();
  v3 = *(unsigned __int8 *)(DerivedStorage + 24);
  *(_BYTE *)(DerivedStorage + 24) = 1;
  StopAndReleaseTimer((dispatch_object_t *)(DerivedStorage + 88));
  FigReadWriteLockUnlockForWrite();
  if (!v3)
  {
    v4 = *(const void **)DerivedStorage;
    *(_QWORD *)DerivedStorage = 0;
    v5 = *(_QWORD *)(DerivedStorage + 32);
    if (v5)
    {
      PKDKeyManagerRemoveKeyID(v5, *(void **)(DerivedStorage + 96));
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
    }
    v6 = *(const void **)(DerivedStorage + 8);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(DerivedStorage + 8) = 0;
    }
    v7 = *(const void **)(DerivedStorage + 32);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(DerivedStorage + 32) = 0;
    }
    v8 = *(const void **)(DerivedStorage + 40);
    if (v8)
    {
      CFRelease(v8);
      *(_QWORD *)(DerivedStorage + 40) = 0;
    }
    v9 = *(_QWORD *)(DerivedStorage + 56);
    if (v9)
    {
      RemoveWeakListenerOnExternalProtectionMonitor_0((uint64_t)a1, v9);
      FigCPEExternalProtectionMonitorEndMonitoring(*(_QWORD *)(DerivedStorage + 56));
      v10 = *(const void **)(DerivedStorage + 56);
      if (v10)
      {
        CFRelease(v10);
        *(_QWORD *)(DerivedStorage + 56) = 0;
      }
    }
    if (v4)
    {
      FigPKDCPEProtectorCryptorWasInvalidated((uint64_t)v4, a1);
      CFRelease(v4);
    }
    v11 = *(const void **)(DerivedStorage + 80);
    if (v11)
    {
      CFRelease(v11);
      *(_QWORD *)(DerivedStorage + 80) = 0;
    }
    v12 = *(const void **)(DerivedStorage + 96);
    if (v12)
    {
      CFRelease(v12);
      *(_QWORD *)(DerivedStorage + 96) = 0;
    }
    v13 = *(const void **)(DerivedStorage + 104);
    if (v13)
    {
      CFRelease(v13);
      *(_QWORD *)(DerivedStorage + 104) = 0;
    }
    *(_QWORD *)(DerivedStorage + 112) = 0;
    v14 = *(const void **)(DerivedStorage + 136);
    if (v14)
    {
      CFRelease(v14);
      *(_QWORD *)(DerivedStorage + 136) = 0;
    }
    v15 = *(void **)(DerivedStorage + 144);
    if (v15)
    {
      *(_QWORD *)(DerivedStorage + 144) = 0;
      free(v15);
    }
  }
}

uint64_t RemoveWeakListenerOnExternalProtectionMonitor_0(uint64_t a1, uint64_t a2)
{
  if (!a1 || !a2)
    return FigSignalErrorAt();
  CMNotificationCenterGetDefaultLocalCenter();
  return FigNotificationCenterRemoveWeakListener();
}

uint64_t ExternalProtectionStatusChangedCallback_4()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t EnsureRequiredExternalProtectionMethod_0(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7;

  v7 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 72))
    return 0;
  v3 = DerivedStorage;
  EnsureDecryptContext_0(a1);
  v4 = *(_QWORD *)(v3 + 48);
  if (!v4)
    return FigSignalErrorAt();
  result = VCDDnY3lV491XcWac(v4, (uint64_t)&v7);
  if (!(_DWORD)result)
  {
    if (v7 == 0x285A0863BBA8E1D3)
      v6 = 2;
    else
      v6 = v7 == 0x40791AC78BD5C571;
    *(_DWORD *)(v3 + 68) = v6;
    *(_BYTE *)(v3 + 72) = 1;
  }
  return result;
}

uint64_t CopyCurrentRequestID_1(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t SInt64;
  uint64_t v5;

  v5 = 0;
  result = PKDKeyManagerGetKeyRequestStateAndID(*(_QWORD *)(a1 + 32), *(void **)(a1 + 96), 0, &v5);
  if (!(_DWORD)result)
  {
    SInt64 = FigCFNumberCreateSInt64();
    *a2 = SInt64;
    if (SInt64)
      return 0;
    else
      return FigSignalErrorAt();
  }
  return result;
}

uint64_t EnsureDecryptContext_0(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t DecryptContextForKeyID;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int Methods;
  unsigned int v10;
  CFTypeRef v11;
  CFTypeRef v12;
  CFTypeRef cf;
  uint64_t v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(_QWORD *)(DerivedStorage + 48);
  DecryptContextForKeyID = PKDKeyManagerGetDecryptContextForKeyID(*(_QWORD *)(DerivedStorage + 32), *(void **)(DerivedStorage + 96), (_QWORD *)(DerivedStorage + 48));
  if ((_DWORD)DecryptContextForKeyID)
    return DecryptContextForKeyID;
  v5 = *(_QWORD *)(DerivedStorage + 48);
  *(_BYTE *)(DerivedStorage + 73) = v3 == v5;
  if (v3 == v5)
    return 0;
  v15 = 0;
  v6 = VCDDnY3lV491XcWac(v5, (uint64_t)&v15);
  if ((_DWORD)v6)
  {
    v7 = v6;
LABEL_5:
    v8 = 2;
    goto LABEL_14;
  }
  switch(v15)
  {
    case 0xEF72894CA7895B78:
      v8 = 0;
      break;
    case 0x285A0863BBA8E1D3:
      v8 = 2;
      break;
    case 0x40791AC78BD5C571:
      v8 = 1;
      break;
    default:
      v7 = 4294951071;
      goto LABEL_5;
  }
  v7 = 0;
  *(_BYTE *)(DerivedStorage + 73) = 1;
LABEL_14:
  Methods = FigCPEExternalProtectionMonitorGetMethods(*(_QWORD *)(DerivedStorage + 56));
  if ((~Methods & v8) == 0)
  {
LABEL_31:
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    return v7;
  }
  cf = 0;
  v10 = FigCPEExternalProtectionMonitorCreateForMethods((const __CFAllocator *)*MEMORY[0x1E0C9AE00], v8 & ~Methods, 0, *(CFTypeRef *)(DerivedStorage + 56), &cf);
  if (v10)
  {
    if ((_DWORD)v7)
      v7 = v7;
    else
      v7 = v10;
    goto LABEL_31;
  }
  v11 = *(CFTypeRef *)(DerivedStorage + 56);
  if (v11 == cf)
  {
    v12 = *(CFTypeRef *)(DerivedStorage + 56);
    goto LABEL_25;
  }
  DecryptContextForKeyID = AddWeakListenerOnExternalProtectionMonitor_0(a1, (uint64_t)cf);
  if ((_DWORD)DecryptContextForKeyID)
    return DecryptContextForKeyID;
  v7 = RemoveWeakListenerOnExternalProtectionMonitor_0(a1, *(_QWORD *)(DerivedStorage + 56));
  if (!(_DWORD)v7)
  {
    v12 = cf;
    v11 = *(CFTypeRef *)(DerivedStorage + 56);
LABEL_25:
    *(_QWORD *)(DerivedStorage + 56) = v12;
    if (v12)
      CFRetain(v12);
    if (v11)
      CFRelease(v11);
    if (cf)
      CFRelease(cf);
    goto LABEL_31;
  }
  return v7;
}

uint64_t FigPKDMSECPECryptorGetNativeSession(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294955146;
  v5 = DerivedStorage;
  FigReadWriteLockLockForRead();
  if (*(_BYTE *)(v5 + 24))
  {
    v6 = 4294954511;
  }
  else
  {
    v6 = EnsureDecryptContext_0(a1);
    if (!(_DWORD)v6)
      *a2 = *(_QWORD *)(v5 + 48);
  }
  FigReadWriteLockUnlockForRead();
  return v6;
}

uint64_t FigPKDMSECPECryptorGetExternalProtectionMethods(uint64_t a1, _DWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294955146;
  v4 = DerivedStorage;
  FigReadWriteLockLockForRead();
  if (*(_BYTE *)(v4 + 24))
  {
    v5 = 4294954511;
  }
  else
  {
    v5 = 0;
    *a2 = FigCPEExternalProtectionMonitorGetMethods(*(_QWORD *)(v4 + 56));
  }
  FigReadWriteLockUnlockForRead();
  return v5;
}

uint64_t FigPKDMSECPECryptorGetAggregateExternalProtectionStatus(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
    return 4294955146;
  v5 = DerivedStorage;
  FigReadWriteLockLockForRead();
  if (*(_BYTE *)(v5 + 24))
  {
    v6 = 4294954511;
  }
  else
  {
    v6 = 0;
    *a3 = FigCPEExternalProtectionMonitorGetStatus(*(_QWORD *)(v5 + 56));
  }
  FigReadWriteLockUnlockForRead();
  return v6;
}

uint64_t FigPKDMSECPECryptorDecryptSampleWithFormat(uint64_t a1, OpaqueCMBlockBuffer *a2, OpaqueCMBlockBuffer *a3, int a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  uint64_t DataPointer;
  const __CFData *v12;
  const __CFNumber *v13;
  const __CFData *v14;
  const __CFData *v15;
  uint64_t v16;
  int v17;
  const UInt8 *BytePtr;
  int Length;
  int valuePtr;
  char *v22;
  char *dataPointerOut;
  size_t v24;
  size_t totalLengthOut;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v24 = 0;
  totalLengthOut = 0;
  v22 = 0;
  dataPointerOut = 0;
  v9 = 4294955146;
  if (a2 && a3)
  {
    v10 = DerivedStorage;
    FigReadWriteLockLockForRead();
    if (*(_BYTE *)(v10 + 24))
    {
      v9 = 4294954511;
      goto LABEL_16;
    }
    DataPointer = CMBlockBufferGetDataPointer(a2, 0, 0, &totalLengthOut, &dataPointerOut);
    if (!(_DWORD)DataPointer)
    {
      DataPointer = CMBlockBufferGetDataPointer(a3, 0, 0, &v24, &v22);
      if (!(_DWORD)DataPointer)
      {
        if (totalLengthOut != v24)
        {
LABEL_14:
          DataPointer = FigSignalErrorAt();
          goto LABEL_15;
        }
        DataPointer = EnsureDecryptContext_0(a1);
        if (!(_DWORD)DataPointer)
        {
          if (a4 == 1667331683)
          {
            v12 = (const __CFData *)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA25B8], 0);
            v13 = (const __CFNumber *)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA25B0], 0);
            v14 = (const __CFData *)CMGetAttachment(a2, CFSTR("avcC"), 0);
            if (v12)
            {
              if (v13)
              {
                v15 = v14;
                valuePtr = 0;
                CFNumberGetValue(v13, kCFNumberSInt32Type, &valuePtr);
                if (!v15
                  || (CFDataGetBytePtr(v15),
                      CFDataGetLength(v15),
                      DataPointer = FigH264Bridge_GetNALUnitHeaderLengthFromAVCC(),
                      !(_DWORD)DataPointer))
                {
                  v16 = *(_QWORD *)(v10 + 48);
                  v17 = valuePtr;
                  BytePtr = CFDataGetBytePtr(v12);
                  Length = CFDataGetLength(v12);
                  DataPointer = Eqabp8dNUu0KCyhO(v16, 6, 4, v17, (uint64_t)BytePtr, Length, (uint64_t)dataPointerOut, (uint64_t)v22, totalLengthOut);
                }
                goto LABEL_15;
              }
            }
          }
          goto LABEL_14;
        }
      }
    }
LABEL_15:
    v9 = DataPointer;
LABEL_16:
    FigReadWriteLockUnlockForRead();
  }
  return v9;
}

uint64_t FigPKDMSECPECryptorScrambleDecryptedSampleWithFormat(int a1, CMBlockBufferRef theBuffer)
{
  uint64_t result;
  char v3;
  size_t v4;
  char *v5;
  size_t totalLengthOut;

  v5 = 0;
  totalLengthOut = 0;
  if (!theBuffer)
    return 4294955146;
  result = CMBlockBufferGetDataPointer(theBuffer, 0, 0, &totalLengthOut, &v5);
  if (!(_DWORD)result)
  {
    if (totalLengthOut)
    {
      v3 = FigPKDMSECPECryptorScrambleDecryptedSampleWithFormat_sbCounter;
      v4 = totalLengthOut - 1;
      do
      {
        v5[v4] = ((v3 ^ 0x4C) * (32 - v3)) ^ &FigPKDMSECPECryptorScrambleDecryptedSampleWithFormat_sbCounter;
        v3 = ++FigPKDMSECPECryptorScrambleDecryptedSampleWithFormat_sbCounter;
        --v4;
      }
      while (v4 != -1);
    }
    return 0;
  }
  return result;
}

uint64_t FigPKDMSECPECryptorReencryptSampleWithFormat()
{
  return 4294954514;
}

uint64_t FigPKDMSECPECryptorPairForReEncryption()
{
  return 4294954514;
}

uint64_t FigPKDMSECPECryptorCreateKeyRequest(uint64_t a1, const __CFDictionary *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  const __CFDictionary *MutableCopy;
  uint64_t v8;
  uint64_t v9;
  const void *Value;
  const void *v11;
  const void *v12;
  uint64_t KeyRequestStateAndID;
  uint64_t KeyRequestForKeyID;
  const void *v15;
  CFTypeRef v16;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v19[18];

  v19[16] = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MutableCopy = 0;
  v8 = 4294955146;
  if (a2 && a4)
  {
    v9 = DerivedStorage;
    FigReadWriteLockLockForRead();
    Value = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA4D18]);
    v11 = *(const void **)(v9 + 80);
    v19[0] = 0;
    if (!*(_BYTE *)(v9 + 24))
    {
      v12 = Value;
      KeyRequestStateAndID = PKDKeyManagerGetKeyRequestStateAndID(*(_QWORD *)(v9 + 32), *(void **)(v9 + 96), 0, v19);
      if (!(_DWORD)KeyRequestStateAndID)
      {
        if (PKDKeyRequestIDsMatch((uint64_t)a2, v19[0]))
        {
          if (!*(_BYTE *)(v9 + 74))
          {
            if (*(_QWORD *)(v9 + 40))
            {
              if (v12)
              {
                if (!FigCFEqual())
                {
                  v15 = *(const void **)(v9 + 40);
                  *(_QWORD *)(v9 + 40) = v12;
                  CFRetain(v12);
                  if (v15)
                    CFRelease(v15);
                }
              }
            }
          }
          *(_BYTE *)(v9 + 74) = 1;
          if ((v12 != 0) != (*(_QWORD *)(v9 + 40) != 0) || FigCFEqual())
          {
            if (!v12)
              v12 = *(const void **)(v9 + 40);
            MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
            if (MutableCopy)
            {
              FigCFDictionarySetValue();
              KeyRequestForKeyID = PKDKeyManagerCreateKeyRequestForKeyID(*(_QWORD *)(v9 + 32), *(void **)(v9 + 96), MutableCopy, v11, a4);
              if (!(_DWORD)KeyRequestForKeyID)
              {
                if (*(_QWORD *)(v9 + 40))
                {
                  v8 = 0;
                }
                else
                {
                  if (v12)
                    v16 = CFRetain(v12);
                  else
                    v16 = 0;
                  v8 = 0;
                  *(_QWORD *)(v9 + 40) = v16;
                }
                goto LABEL_24;
              }
            }
            else
            {
              KeyRequestForKeyID = FigSignalErrorAt();
            }
            v8 = KeyRequestForKeyID;
LABEL_24:
            FigReadWriteLockUnlockForRead();
            goto LABEL_25;
          }
        }
        KeyRequestStateAndID = FigSignalErrorAt();
      }
      v8 = KeyRequestStateAndID;
      MutableCopy = 0;
      goto LABEL_24;
    }
    MutableCopy = 0;
    v8 = 4294954511;
    goto LABEL_24;
  }
LABEL_25:
  if (dword_1EE2A34C0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (MutableCopy)
    CFRelease(MutableCopy);
  return v8;
}

uint64_t FigPKDMSECPECryptorSetKeyRequestResponse(uint64_t a1, const void *a2, const __CFDictionary *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  const __CFDate *Value;
  _BOOL4 v9;
  uint64_t KeyRequestStateAndID;
  uint64_t v11;
  const __CFAllocator *v12;
  CFAbsoluteTime Current;
  const __CFDate *v14;
  double TimeIntervalSinceDate;
  double v16;
  dispatch_source_t *v17;
  NSObject *global_queue;
  NSObject *v19;
  void *v20;
  NSObject *v21;
  dispatch_time_t v22;
  uint64_t v23;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD v26[25];

  v26[24] = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v26[0] = 0;
  if (a2)
  {
    v7 = DerivedStorage;
    if (a3)
    {
      Value = (const __CFDate *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0CA4D70]);
      v9 = CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0CA4D78]) == (const void *)*MEMORY[0x1E0C9AE50];
    }
    else
    {
      v9 = 0;
      Value = 0;
    }
    FigReadWriteLockLockForRead();
    if (*(_BYTE *)(v7 + 24))
    {
      v11 = 4294954511;
    }
    else
    {
      KeyRequestStateAndID = PKDKeyManagerGetKeyRequestStateAndID(*(_QWORD *)(v7 + 32), *(void **)(v7 + 96), 0, v26);
      if ((_DWORD)KeyRequestStateAndID)
      {
        v11 = KeyRequestStateAndID;
      }
      else
      {
        v11 = PKDKeyManagerSetKeyRequestResponseForKeyID(*(_QWORD *)(v7 + 32), *(void **)(v7 + 96), a2);
        if ((_DWORD)v11 || !Value)
          goto LABEL_16;
        v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        Current = CFAbsoluteTimeGetCurrent();
        v14 = CFDateCreate(v12, Current);
        TimeIntervalSinceDate = CFDateGetTimeIntervalSinceDate(Value, v14);
        if (TimeIntervalSinceDate > 0.0
          && (v16 = TimeIntervalSinceDate,
              v17 = (dispatch_source_t *)(v7 + 88),
              StopAndReleaseTimer((dispatch_object_t *)(v7 + 88)),
              global_queue = dispatch_get_global_queue(0, 0),
              v19 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, global_queue),
              (*(_QWORD *)(v7 + 88) = v19) != 0))
        {
          if (*(_QWORD *)(v7 + 8))
          {
            CFRetain(*(CFTypeRef *)(v7 + 8));
            v19 = *(NSObject **)(v7 + 88);
            v20 = *(void **)(v7 + 8);
          }
          else
          {
            v20 = 0;
          }
          dispatch_set_context(v19, v20);
          v21 = *v17;
          v22 = dispatch_time(0, (uint64_t)(v16 * 1000000000.0));
          dispatch_source_set_timer(v21, v22, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
          dispatch_source_set_event_handler_f(*v17, (dispatch_function_t)RenewalTimerCallback_1);
          dispatch_source_set_cancel_handler_f(*v17, (dispatch_function_t)FigCFRelease_10);
          dispatch_resume(*v17);
          v11 = 0;
          if (!v14)
            goto LABEL_16;
        }
        else
        {
          v11 = FigSignalErrorAt();
          if (!v14)
            goto LABEL_16;
        }
        CFRelease(v14);
      }
    }
LABEL_16:
    FigReadWriteLockUnlockForRead();
    v23 = v26[0];
    goto LABEL_17;
  }
  v23 = 0;
  v9 = 0;
  v11 = 4294955146;
LABEL_17:
  PKDDispatchKeyResponseNotification(a1, v11, v23, v9);
  if (dword_1EE2A34C0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v11;
}

uint64_t FigPKDMSECPECryptorGetMaximumRequiredOutputBufferSizeForSampleWithFormat()
{
  return 4294954514;
}

uint64_t FigPKDMSECPECryptorSetPropertyForFormat(uint64_t a1, const void *a2, uint64_t a3, const void *a4)
{
  return FigPKDMSECPECryptorSetProperty(a1, a2, a4);
}

uint64_t FigPKDMSECPECryptorCopyPropertyForFormat(const void *a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = 4294955146;
  if (a2 && a5)
  {
    v11 = DerivedStorage;
    FigReadWriteLockLockForRead();
    if (*(_BYTE *)(v11 + 24))
    {
      v10 = 4294954511;
    }
    else if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31A0]))
    {
      v10 = 0;
      *a5 = *MEMORY[0x1E0C9AE40];
    }
    else
    {
      v10 = FigPKDMSECPECryptorCopyProperty(a1, a2, a4, a5);
    }
    FigReadWriteLockUnlockForRead();
  }
  return v10;
}

uint64_t FigPKDMSECPECryptorTestAndSetKeyRequestState(uint64_t a1, unsigned int a2, unsigned int a3, _BYTE *a4, _QWORD *a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t v11;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v15 = 0;
  v14 = 0;
  if (a2 && a3)
  {
    v10 = DerivedStorage;
    FigReadWriteLockLockForWrite();
    if (*(_BYTE *)(v10 + 24))
    {
      v11 = 4294954511;
    }
    else
    {
      v11 = PKDKeyManagerTestAndSetKeyRequestState(*(_QWORD *)(v10 + 32), *(void **)(v10 + 96), a2, a3, &v15, &v14);
      if (!(_DWORD)v11 && a3 == 2 && v15)
      {
        StopAndReleaseTimer((dispatch_object_t *)(v10 + 88));
        v11 = 0;
      }
    }
    FigReadWriteLockUnlockForWrite();
  }
  else
  {
    v11 = FigSignalErrorAt();
  }
  if (dword_1EE2A34C0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a4)
    *a4 = v15;
  if (a5)
    *a5 = v14;
  return v11;
}

uint64_t FigPKDMSECPECryptorCreatePackagedPersistentKey(uint64_t a1, uint64_t a2, CFDataRef *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t PackagedPersistentKeyForKeyID;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || !a3)
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  *a3 = 0;
  FigReadWriteLockLockForRead();
  if (*(_BYTE *)(v6 + 24))
    PackagedPersistentKeyForKeyID = 4294954511;
  else
    PackagedPersistentKeyForKeyID = PKDKeyManagerCreatePackagedPersistentKeyForKeyID(*(_QWORD *)(v6 + 32), *(void **)(v6 + 96), a2, a3);
  FigReadWriteLockUnlockForRead();
  return PackagedPersistentKeyForKeyID;
}

uint64_t FigPKDMSECPECryptorAbsorbKeyRequestContext(int a1, CFTypeRef cf)
{
  CFTypeID v2;
  uint64_t ClassID;
  uint64_t DerivedStorage;
  uint64_t v5;
  const void *v6;
  CFTypeRef v7;
  const void *v8;
  void *v9;
  const void *v10;
  CFTypeRef v11;
  const void *v12;
  void *v13;
  const void *v14;
  uint64_t v15;

  if (!cf)
    return 4294949726;
  v2 = CFGetTypeID(cf);
  if (v2 != FigCPECryptorGetTypeID())
    return 4294949726;
  ClassID = CMBaseObjectGetClassID();
  if (ClassID != CMBaseObjectGetClassID())
    return 4294949726;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = CMBaseObjectGetDerivedStorage();
  FigReadWriteLockLockForWrite();
  if (*(_BYTE *)(DerivedStorage + 24))
  {
    FigReadWriteLockUnlockForWrite();
    return 4294949723;
  }
  v6 = *(const void **)(DerivedStorage + 32);
  if (!v6 || *(_QWORD *)(DerivedStorage + 88))
  {
    v15 = FigSignalErrorAt();
    FigReadWriteLockUnlockForWrite();
    v9 = 0;
    v7 = 0;
    if ((_DWORD)v15)
      return v15;
  }
  else
  {
    v7 = CFRetain(v6);
    v8 = *(const void **)(DerivedStorage + 96);
    if (v8)
      v9 = (void *)CFRetain(v8);
    else
      v9 = 0;
    FigReadWriteLockUnlockForWrite();
  }
  FigReadWriteLockLockForWrite();
  if (*(_BYTE *)(v5 + 24))
  {
    FigReadWriteLockUnlockForWrite();
    v13 = 0;
    v14 = 0;
    v15 = 4294949723;
  }
  else
  {
    v10 = *(const void **)(v5 + 32);
    if (!v10 || *(_QWORD *)(v5 + 88))
    {
      v15 = FigSignalErrorAt();
      FigReadWriteLockUnlockForWrite();
      v13 = 0;
      if ((_DWORD)v15)
      {
        v14 = 0;
        goto LABEL_19;
      }
      v11 = 0;
    }
    else
    {
      v11 = CFRetain(v10);
      v12 = *(const void **)(v5 + 96);
      if (v12)
        v13 = (void *)CFRetain(v12);
      else
        v13 = 0;
      FigReadWriteLockUnlockForWrite();
    }
    v14 = v13;
    v15 = PKDKeyManagerAbsorbKeyRequestContext((uint64_t)v7, (uint64_t)v11, v9, v13);
    v13 = (void *)v11;
  }
LABEL_19:
  if (v7)
    CFRelease(v7);
  if (v13)
    CFRelease(v13);
  if (v9)
    CFRelease(v9);
  if (v14)
    CFRelease(v14);
  return v15;
}

uint64_t FigPKDMSECPECryptorCreateProcessedBlockBufferAndSubsampleAuxiliaryData(uint64_t a1, opaqueCMSampleBuffer *a2, CMBlockBufferRef *a3, _QWORD *a4, CFDataRef *a5)
{
  return FigPKDMSECPECryptorCreateProcessedBlockBufferAndSubsampleAuxiliaryDataWithOptions(a1, a2, 0, a3, a4, a5);
}

uint64_t FigPKDMSECPECryptorIsAggregateExternalProtectionStatusStable(uint64_t a1, _BYTE *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294955146;
  v4 = DerivedStorage;
  FigReadWriteLockLockForRead();
  if (*(_BYTE *)(v4 + 24))
  {
    v5 = 4294954511;
  }
  else
  {
    v5 = 0;
    *a2 = FigCPEExternalProtectionMonitorStableStatusDetermined(*(_QWORD *)(v4 + 56));
  }
  FigReadWriteLockUnlockForRead();
  return v5;
}

uint64_t FigPKDMSECPECryptorCreateProcessedBlockBufferAndSubsampleAuxiliaryDataWithOptions(uint64_t a1, opaqueCMSampleBuffer *a2, char a3, CMBlockBufferRef *a4, _QWORD *a5, CFDataRef *a6)
{
  _QWORD *DerivedStorage;
  const opaqueCMFormatDescription *FormatDescription;
  FourCharCode MediaSubType;
  const __CFAllocator *v14;
  OpaqueCMBlockBuffer *DataBuffer;
  uint64_t DataPointer;
  const __CFArray *SampleAttachmentsArray;
  const __CFArray *v18;
  const __CFDictionary *ValueAtIndex;
  const __CFData *Value;
  const __CFData *v21;
  CFIndex Length;
  CFIndex v23;
  const __CFDictionary *Extension;
  const __CFDictionary *v25;
  CFTypeID v26;
  const void *v27;
  uint64_t v28;
  CFTypeID v29;
  const void *v30;
  void *v31;
  unsigned int v32;
  uint64_t v33;
  CFDataRef v34;
  uint64_t v35;
  CFDataRef *v37;
  void *v38;
  char *v39;
  CMBlockBufferRef theBuffer;
  size_t totalLengthOut;
  char *dataPointerOut;
  CMBlockBufferRef blockBufferOut;
  UInt8 bytes[16];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  CFRange v77;

  v76 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  dataPointerOut = 0;
  blockBufferOut = 0;
  theBuffer = 0;
  totalLengthOut = 0;
  v39 = 0;
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  *(_OWORD *)bytes = 0u;
  v45 = 0u;
  v38 = 0;
  FormatDescription = CMSampleBufferGetFormatDescription(a2);
  MediaSubType = CMFormatDescriptionGetMediaSubType(FormatDescription);
  FigReadWriteLockLockForWrite();
  if (MediaSubType != 1667331683)
    goto LABEL_34;
  v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  DataBuffer = CMSampleBufferGetDataBuffer(a2);
  DataPointer = CMBlockBufferCreateContiguous(v14, DataBuffer, v14, 0, 0, 0, 0, &blockBufferOut);
  if ((_DWORD)DataPointer)
    goto LABEL_35;
  DataPointer = CMBlockBufferGetDataPointer(blockBufferOut, 0, 0, &totalLengthOut, &dataPointerOut);
  if ((_DWORD)DataPointer)
    goto LABEL_35;
  DataPointer = CMBlockBufferCreateWithMemoryBlock(v14, 0, totalLengthOut, v14, 0, 0, totalLengthOut, 1u, &theBuffer);
  if ((_DWORD)DataPointer)
    goto LABEL_35;
  DataPointer = CMBlockBufferGetDataPointer(theBuffer, 0, 0, 0, &v39);
  if ((_DWORD)DataPointer)
    goto LABEL_35;
  SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a2, 0);
  if (!SampleAttachmentsArray)
    goto LABEL_34;
  v18 = SampleAttachmentsArray;
  if (CFArrayGetCount(SampleAttachmentsArray) < 1)
    goto LABEL_34;
  ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v18, 0);
  if (!ValueAtIndex)
    goto LABEL_34;
  Value = (const __CFData *)CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E0CA25B8]);
  if (!Value)
    goto LABEL_34;
  v21 = Value;
  v37 = a6;
  Length = CFDataGetLength(Value);
  v23 = Length;
  if (Length != 8 && Length != 16)
    goto LABEL_34;
  if ((const opaqueCMFormatDescription *)DerivedStorage[17] == FormatDescription)
    goto LABEL_25;
  Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(FormatDescription, (CFStringRef)*MEMORY[0x1E0CA2240]);
  if (!Extension
    || (v25 = Extension, v26 = CFGetTypeID(Extension), v26 != CFDictionaryGetTypeID())
    || (v27 = CFDictionaryGetValue(v25, CFSTR("avcC"))) == 0
    || (v28 = (uint64_t)v27, v29 = CFGetTypeID(v27), v29 != CFDataGetTypeID()))
  {
LABEL_34:
    DataPointer = FigSignalErrorAt();
    goto LABEL_35;
  }
  DataPointer = CopyImageParamsFromAVCData_0(v28, &v38);
  if (!(_DWORD)DataPointer)
  {
    v30 = (const void *)DerivedStorage[17];
    DerivedStorage[17] = FormatDescription;
    if (FormatDescription)
      CFRetain(FormatDescription);
    if (v30)
      CFRelease(v30);
    v31 = (void *)DerivedStorage[18];
    if (v31)
    {
      DerivedStorage[18] = 0;
      free(v31);
    }
    DerivedStorage[18] = v38;
    v38 = 0;
LABEL_25:
    *(_QWORD *)&v68 = DerivedStorage[6];
    if ((a3 & 1) != 0)
      v32 = 11;
    else
      v32 = 8;
    *((_QWORD *)&v68 + 1) = v32 | 0x600000000;
    v69 = 0uLL;
    LODWORD(v70) = 0;
    v77.location = 0;
    v77.length = v23;
    CFDataGetBytes(v21, v77, (UInt8 *)&v69 + 4);
    WORD2(v70) = 4;
    *((_QWORD *)&v70 + 1) = dataPointerOut;
    LODWORD(v71) = totalLengthOut;
    *((_QWORD *)&v71 + 1) = v39;
    LODWORD(v72) = totalLengthOut;
    BYTE4(v73) = 0;
    *(_QWORD *)((char *)&v75 + 4) = 16;
    *((_QWORD *)&v73 + 1) = bytes;
    LODWORD(v74) = 16;
    *((_QWORD *)&v74 + 1) = DerivedStorage[18];
    HIDWORD(v75) = 0;
    DataPointer = MDIwLzAxLzA5IDE((uint64_t)&v68);
    if ((_DWORD)DataPointer)
      goto LABEL_35;
    if ((_DWORD)v72 == (_DWORD)totalLengthOut && BYTE4(v73) == 1)
    {
      v33 = DWORD1(v74);
      if (DWORD1(v74))
      {
        if (DWORD1(v74) < 0x11)
        {
          *a5 = *(_QWORD *)((char *)&v75 + 4);
          v34 = CFDataCreate(v14, bytes, 24 * v33);
          v35 = 0;
          *a4 = theBuffer;
          theBuffer = 0;
          *v37 = v34;
          goto LABEL_36;
        }
      }
    }
    goto LABEL_34;
  }
LABEL_35:
  v35 = DataPointer;
LABEL_36:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (theBuffer)
    CFRelease(theBuffer);
  free(v38);
  FigReadWriteLockUnlockForWrite();
  return v35;
}

uint64_t FigPKDMSECPECryptorGetAggregateExternalProtectionStatusIgnoringDisplays(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
    return 4294955146;
  v5 = DerivedStorage;
  FigReadWriteLockLockForRead();
  if (*(_BYTE *)(v5 + 24))
  {
    v6 = 4294954511;
  }
  else
  {
    v6 = 0;
    *a3 = FigCPEExternalProtectionMonitorGetStatusIgnoringDisplays(*(_QWORD *)(v5 + 56));
  }
  FigReadWriteLockUnlockForRead();
  return v6;
}

uint64_t FigPKDMSECPECryptorIsAggregateExternalProtectionStatusStableIgnoringDisplays(uint64_t a1, _BYTE *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294955146;
  v4 = DerivedStorage;
  FigReadWriteLockLockForRead();
  if (*(_BYTE *)(v4 + 24))
  {
    v5 = 4294954511;
  }
  else
  {
    v5 = 0;
    *a2 = FigCPEExternalProtectionMonitorStableStatusDeterminedIgnoringDisplays(*(_QWORD *)(v4 + 56));
  }
  FigReadWriteLockUnlockForRead();
  return v5;
}

uint64_t FigPKDMSECPECryptorCopySerializedCryptorRecipe(uint64_t a1, CFDataRef *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t *);
  uint64_t result;
  CFDataRef v8;
  uint64_t v9;
  UInt8 bytes[8];
  uint64_t Methods;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = 0;
  if (!DerivedStorage)
  {
    v8 = 0;
LABEL_7:
    result = 0;
    *a2 = v8;
    return result;
  }
  v5 = DerivedStorage;
  v6 = *(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v6)
  {
    result = v6(a1, &v9);
    if ((_DWORD)result)
      return result;
    *(_QWORD *)bytes = v9;
    Methods = FigCPEExternalProtectionMonitorGetMethods(*(_QWORD *)(v5 + 56));
    v12 = 3;
    v8 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, 24);
    if (!v8)
      return 4294955145;
    goto LABEL_7;
  }
  return 4294954514;
}

uint64_t FigPKDMSECPECryptorGetCryptorType(uint64_t a1, _DWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294955146;
  if (*(_BYTE *)(DerivedStorage + 24))
    return 4294954511;
  result = 0;
  *a2 = 3;
  return result;
}

void RenewalTimerCallback_1()
{
  uint64_t v0;
  const void *v1;
  uint64_t DerivedStorage;

  v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    v1 = (const void *)v0;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    FigReadWriteLockLockForRead();
    if (!*(_BYTE *)(DerivedStorage + 24))
    {
      StopAndReleaseTimer((dispatch_object_t *)(DerivedStorage + 88));
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
    }
    FigReadWriteLockUnlockForRead();
    CFRelease(v1);
  }
}

uint64_t CopyImageParamsFromAVCData_0(uint64_t a1, _QWORD *a2)
{
  uint64_t SPSAndPPSCountFromAVCC;
  char *v4;
  void *v5;
  uint64_t v6;

  if (a1)
  {
    SPSAndPPSCountFromAVCC = FigH264Bridge_GetSPSAndPPSCountFromAVCC();
    if ((_DWORD)SPSAndPPSCountFromAVCC)
    {
      v6 = SPSAndPPSCountFromAVCC;
    }
    else
    {
      v4 = (char *)malloc_type_calloc(1uLL, 0x30uLL, 0x3686C85EuLL);
      v5 = v4;
      if (!v4)
      {
        v6 = 4294955145;
        goto LABEL_6;
      }
      *(_QWORD *)v4 = v4 + 48;
      *((_QWORD *)v4 + 3) = v4 + 48;
      *((_QWORD *)v4 + 1) = v4 + 48;
      *((_QWORD *)v4 + 4) = v4 + 48;
      *((_DWORD *)v4 + 4) = 0;
      *((_DWORD *)v4 + 10) = 0;
      v6 = 0;
      *a2 = v4;
    }
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 4294955136;
  }
LABEL_6:
  free(v5);
  return v6;
}

uint64_t RegisterFigPKDMSECPECryptorType()
{
  FigCPECryptorGetClassID();
  return FigBaseClassRegisterClass();
}

CFTypeRef FigPKDMSECPECryptorCopyFormattingDesc()
{
  return CFRetain(CFSTR("[FigPKDMSECPECryptor]"));
}

uint64_t FigPKDMSECPELimitedCryptorInvalidate()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigReadWriteLockLockForWrite();
  if (!*(_BYTE *)(DerivedStorage + 8))
  {
    *(_BYTE *)(DerivedStorage + 8) = 1;
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  FigReadWriteLockUnlockForWrite();
  return 0;
}

uint64_t FigPKDMSECPELimitedCryptorFinalize()
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigPKDMSECPELimitedCryptorInvalidate();
  result = *(_QWORD *)(DerivedStorage + 16);
  if (result)
  {
    result = FigReadWriteLockDestroy();
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  return result;
}

uint64_t FigPKDMSECPELimitedCryptorGetNativeSession(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294955146;
  v4 = DerivedStorage;
  FigReadWriteLockLockForRead();
  if (*(_BYTE *)(v4 + 8))
  {
    v5 = 4294954511;
  }
  else
  {
    v5 = 0;
    *a2 = *(_QWORD *)(v4 + 24);
  }
  FigReadWriteLockUnlockForRead();
  return v5;
}

uint64_t FigPKDMSECPELimitedCryptorGetExternalProtectionMethods(uint64_t a1, _DWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294955146;
  v4 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 8))
    return 4294954511;
  result = 0;
  *a2 = *(_DWORD *)(v4 + 48);
  return result;
}

uint64_t FigPKDMSECPELimitedCryptorCreateProcessedBlockBufferAndSubsampleAuxiliaryData(uint64_t a1, opaqueCMSampleBuffer *a2, CMBlockBufferRef *a3, _QWORD *a4, CFDataRef *a5)
{
  return FigPKDMSECPELimitedCryptorCreateProcessedBlockBufferAndSubsampleAuxiliaryDataWithOptions(a1, a2, 0, a3, a4, a5);
}

uint64_t FigPKDMSECPELimitedCryptorCreateProcessedBlockBufferAndSubsampleAuxiliaryDataWithOptions(uint64_t a1, opaqueCMSampleBuffer *a2, char a3, CMBlockBufferRef *a4, _QWORD *a5, CFDataRef *a6)
{
  _QWORD *DerivedStorage;
  const opaqueCMFormatDescription *FormatDescription;
  FourCharCode MediaSubType;
  const __CFAllocator *v14;
  OpaqueCMBlockBuffer *DataBuffer;
  uint64_t DataPointer;
  const __CFArray *SampleAttachmentsArray;
  const __CFArray *v18;
  const __CFDictionary *ValueAtIndex;
  const __CFData *Value;
  const __CFData *v21;
  CFIndex Length;
  CFIndex v23;
  const __CFDictionary *Extension;
  const __CFDictionary *v25;
  CFTypeID v26;
  const void *v27;
  uint64_t v28;
  CFTypeID v29;
  const void *v30;
  void *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  CFDataRef v36;
  CFDataRef *v37;
  void *v38;
  char *v39;
  CMBlockBufferRef theBuffer;
  size_t totalLengthOut;
  char *dataPointerOut;
  CMBlockBufferRef blockBufferOut;
  UInt8 bytes[16];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  CFRange v77;

  v76 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  dataPointerOut = 0;
  blockBufferOut = 0;
  theBuffer = 0;
  totalLengthOut = 0;
  v39 = 0;
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  *(_OWORD *)bytes = 0u;
  v45 = 0u;
  v38 = 0;
  FormatDescription = CMSampleBufferGetFormatDescription(a2);
  MediaSubType = CMFormatDescriptionGetMediaSubType(FormatDescription);
  FigReadWriteLockLockForWrite();
  if (MediaSubType != 1667331683)
    goto LABEL_33;
  v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  DataBuffer = CMSampleBufferGetDataBuffer(a2);
  DataPointer = CMBlockBufferCreateContiguous(v14, DataBuffer, v14, 0, 0, 0, 0, &blockBufferOut);
  if ((_DWORD)DataPointer)
    goto LABEL_34;
  DataPointer = CMBlockBufferGetDataPointer(blockBufferOut, 0, 0, &totalLengthOut, &dataPointerOut);
  if ((_DWORD)DataPointer)
    goto LABEL_34;
  DataPointer = CMBlockBufferCreateWithMemoryBlock(v14, 0, totalLengthOut, v14, 0, 0, totalLengthOut, 1u, &theBuffer);
  if ((_DWORD)DataPointer)
    goto LABEL_34;
  DataPointer = CMBlockBufferGetDataPointer(theBuffer, 0, 0, 0, &v39);
  if ((_DWORD)DataPointer)
    goto LABEL_34;
  SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a2, 0);
  if (!SampleAttachmentsArray)
    goto LABEL_33;
  v18 = SampleAttachmentsArray;
  if (CFArrayGetCount(SampleAttachmentsArray) < 1)
    goto LABEL_33;
  ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v18, 0);
  if (!ValueAtIndex)
    goto LABEL_33;
  Value = (const __CFData *)CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E0CA25B8]);
  if (!Value)
    goto LABEL_33;
  v21 = Value;
  v37 = a6;
  Length = CFDataGetLength(Value);
  v23 = Length;
  if (Length != 8 && Length != 16)
    goto LABEL_33;
  if ((const opaqueCMFormatDescription *)DerivedStorage[4] != FormatDescription)
  {
    Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(FormatDescription, (CFStringRef)*MEMORY[0x1E0CA2240]);
    if (!Extension)
      goto LABEL_33;
    v25 = Extension;
    v26 = CFGetTypeID(Extension);
    if (v26 != CFDictionaryGetTypeID())
      goto LABEL_33;
    v27 = CFDictionaryGetValue(v25, CFSTR("avcC"));
    if (!v27)
      goto LABEL_33;
    v28 = (uint64_t)v27;
    v29 = CFGetTypeID(v27);
    if (v29 != CFDataGetTypeID())
      goto LABEL_33;
    DataPointer = CopyImageParamsFromAVCData_0(v28, &v38);
    if ((_DWORD)DataPointer)
    {
LABEL_34:
      v34 = DataPointer;
      goto LABEL_35;
    }
    v30 = (const void *)DerivedStorage[4];
    DerivedStorage[4] = FormatDescription;
    if (FormatDescription)
      CFRetain(FormatDescription);
    if (v30)
      CFRelease(v30);
    v31 = (void *)DerivedStorage[5];
    if (v31)
    {
      DerivedStorage[5] = 0;
      free(v31);
    }
    DerivedStorage[5] = v38;
    v38 = 0;
  }
  *(_QWORD *)&v68 = DerivedStorage[3];
  if ((a3 & 1) != 0)
    v32 = 11;
  else
    v32 = 8;
  *((_QWORD *)&v68 + 1) = v32 | 0x600000000;
  v69 = 0uLL;
  LODWORD(v70) = 0;
  v77.location = 0;
  v77.length = v23;
  CFDataGetBytes(v21, v77, (UInt8 *)&v69 + 4);
  WORD2(v70) = 4;
  *((_QWORD *)&v70 + 1) = dataPointerOut;
  LODWORD(v71) = totalLengthOut;
  *((_QWORD *)&v71 + 1) = v39;
  LODWORD(v72) = totalLengthOut;
  BYTE4(v73) = 0;
  *(_QWORD *)((char *)&v75 + 4) = 16;
  *((_QWORD *)&v73 + 1) = bytes;
  LODWORD(v74) = 16;
  *((_QWORD *)&v74 + 1) = DerivedStorage[5];
  HIDWORD(v75) = 0;
  DataPointer = MDIwLzAxLzA5IDE((uint64_t)&v68);
  if ((_DWORD)DataPointer)
    goto LABEL_34;
  if ((_DWORD)v72 != (_DWORD)totalLengthOut)
    goto LABEL_33;
  if (DWORD2(v68) == 8)
  {
    if (BYTE4(v73) != 1)
      goto LABEL_33;
    v33 = DWORD1(v74);
    if (!DWORD1(v74))
      goto LABEL_33;
  }
  else
  {
    v33 = DWORD1(v74);
  }
  if (v33 >= 0x11)
  {
LABEL_33:
    DataPointer = FigSignalErrorAt();
    goto LABEL_34;
  }
  *a5 = *(_QWORD *)((char *)&v75 + 4);
  v36 = CFDataCreate(v14, bytes, 24 * v33);
  v34 = 0;
  *a4 = theBuffer;
  theBuffer = 0;
  *v37 = v36;
LABEL_35:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (theBuffer)
    CFRelease(theBuffer);
  free(v38);
  FigReadWriteLockUnlockForWrite();
  return v34;
}

uint64_t FigPKDMSECPELimitedCryptorIsCompatibleWithSerializedCryptorRecipe(uint64_t a1, const __CFData *a2, BOOL *a3)
{
  uint64_t DerivedStorage;
  const UInt8 *BytePtr;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t *);
  uint64_t result;
  BOOL v13;
  uint64_t v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  BytePtr = CFDataGetBytePtr(a2);
  if (CFDataGetLength(a2) != 24)
    return 4294949724;
  v8 = *(_QWORD *)BytePtr;
  v9 = *((_DWORD *)BytePtr + 2);
  v10 = *((unsigned int *)BytePtr + 4);
  v14 = 0;
  v11 = *(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v11)
    return 4294954514;
  result = v11(a1, &v14);
  if (!(_DWORD)result)
  {
    v13 = v14 == v8 && *(_DWORD *)(DerivedStorage + 48) == v9 && v10 == 3;
    result = 0;
    *a3 = v13;
  }
  return result;
}

uint64_t FigAirPlaySecureStopRouterCreateSecureStopUUID(CFStringRef theString, __CFString **a2)
{
  CFMutableStringRef MutableCopy;
  __CFString *v4;
  uint64_t v5;

  if (!theString)
    return FigSignalErrorAt();
  if (!a2)
    return FigSignalErrorAt();
  *a2 = 0;
  MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theString);
  if (!MutableCopy)
    return FigSignalErrorAt();
  v4 = MutableCopy;
  v5 = FigAtomicIncrement32();
  CFStringAppendFormat(v4, 0, CFSTR("_%u"), v5);
  *a2 = v4;
  return 0;
}

uint64_t FigAirPlaySecureStopRouterRegisterSecureStopManager(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD block[7];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  if (a1 && a2)
  {
    if (fassr_ensureAirPlayManagerSingletonContext_sFigSecureStopManagerAirPlayOnce != -1)
      dispatch_once(&fassr_ensureAirPlayManagerSingletonContext_sFigSecureStopManagerAirPlayOnce, &__block_literal_global_113);
    *((_DWORD *)v8 + 6) = 0;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __FigAirPlaySecureStopRouterRegisterSecureStopManager_block_invoke;
    block[3] = &unk_1E2FB5B08;
    block[4] = &v7;
    block[5] = a1;
    block[6] = a2;
    dispatch_sync((dispatch_queue_t)sAirPlayManagerSingletonContext_1, block);
    v4 = *((unsigned int *)v8 + 6);
  }
  else
  {
    v4 = FigSignalErrorAt();
    *((_DWORD *)v8 + 6) = v4;
  }
  _Block_object_dispose(&v7, 8);
  return v4;
}

uint64_t FigAirPlaySecureStopRouterUpdateRecord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD block[9];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2000000000;
  v14 = 0;
  if (a1 && a2 && a3 && a4)
  {
    if (fassr_ensureAirPlayManagerSingletonContext_sFigSecureStopManagerAirPlayOnce != -1)
      dispatch_once(&fassr_ensureAirPlayManagerSingletonContext_sFigSecureStopManagerAirPlayOnce, &__block_literal_global_113);
    *((_DWORD *)v12 + 6) = 0;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __FigAirPlaySecureStopRouterUpdateRecord_block_invoke;
    block[3] = &unk_1E2FB5B30;
    block[4] = &v11;
    block[5] = a1;
    block[6] = a2;
    block[7] = a3;
    block[8] = a4;
    dispatch_sync((dispatch_queue_t)sAirPlayManagerSingletonContext_1, block);
    v8 = *((unsigned int *)v12 + 6);
  }
  else
  {
    v8 = FigSignalErrorAt();
    *((_DWORD *)v12 + 6) = v8;
  }
  _Block_object_dispose(&v11, 8);
  return v8;
}

uint64_t FigAirPlaySecureStopRouterCommitToDisk(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  if (a1)
  {
    if (fassr_ensureAirPlayManagerSingletonContext_sFigSecureStopManagerAirPlayOnce != -1)
      dispatch_once(&fassr_ensureAirPlayManagerSingletonContext_sFigSecureStopManagerAirPlayOnce, &__block_literal_global_113);
    *((_DWORD *)v6 + 6) = 0;
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 0x40000000;
    v4[2] = __FigAirPlaySecureStopRouterCommitToDisk_block_invoke;
    v4[3] = &unk_1E2FB5B58;
    v4[4] = &v5;
    v4[5] = a1;
    dispatch_sync((dispatch_queue_t)sAirPlayManagerSingletonContext_1, v4);
    v2 = *((unsigned int *)v6 + 6);
  }
  else
  {
    v2 = FigSignalErrorAt();
    *((_DWORD *)v6 + 6) = v2;
  }
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t FigAirPlaySecureStopRouterFinalizeRecordAndCommitToDisk(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  if (a1)
  {
    if (fassr_ensureAirPlayManagerSingletonContext_sFigSecureStopManagerAirPlayOnce != -1)
      dispatch_once(&fassr_ensureAirPlayManagerSingletonContext_sFigSecureStopManagerAirPlayOnce, &__block_literal_global_113);
    *((_DWORD *)v6 + 6) = 0;
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 0x40000000;
    v4[2] = __FigAirPlaySecureStopRouterFinalizeRecordAndCommitToDisk_block_invoke;
    v4[3] = &unk_1E2FB5B80;
    v4[4] = &v5;
    v4[5] = a1;
    dispatch_sync((dispatch_queue_t)sAirPlayManagerSingletonContext_1, v4);
    v2 = *((unsigned int *)v6 + 6);
  }
  else
  {
    v2 = FigSignalErrorAt();
    *((_DWORD *)v6 + 6) = v2;
  }
  _Block_object_dispose(&v5, 8);
  return v2;
}

dispatch_queue_t __fassr_ensureAirPlayManagerSingletonContext_block_invoke()
{
  dispatch_queue_t result;

  sAirPlayManagerSingletonContext_0 = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!sAirPlayManagerSingletonContext_0)
    return (dispatch_queue_t)FigSignalErrorAt();
  result = dispatch_queue_create("com.apple.coremedia.airplaysecurestopmanager.singletoncontext", 0);
  sAirPlayManagerSingletonContext_1 = (uint64_t)result;
  if (!result)
    return (dispatch_queue_t)FigSignalErrorAt();
  return result;
}

uint64_t FigCDSStackLayoutRegionCreate(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t DerivedStorage;
  int64x2_t v5;
  uint64_t v7;
  uint64_t v8;

  *a1 = 0;
  v8 = 0;
  MEMORY[0x19402F294](&FigCDSStackLayoutRegionGetClassID_sRegisterFigCDSStackLayoutRegionBaseTypeOnce, RegisterFigCDSStackLayoutRegionBaseType);
  v2 = CMDerivedObjectCreate();
  if (!(_DWORD)v2)
  {
    v3 = v8;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_BYTE *)DerivedStorage = 1;
    *(_QWORD *)(DerivedStorage + 24) = 0x3FAB4A2339C0EBEELL;
    *(_QWORD *)(DerivedStorage + 32) = 0x300000064;
    v5 = vdupq_n_s64(0x4049000000000000uLL);
    *(int64x2_t *)(DerivedStorage + 56) = v5;
    *(int64x2_t *)(DerivedStorage + 40) = v5;
    v7 = 0;
    FigCDSNodeCreate(&v7);
    *(_QWORD *)(DerivedStorage + 8) = v7;
    *a1 = v3;
  }
  return v2;
}

void FigCDSStackLayoutRegionFinalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  CFRelease(*(CFTypeRef *)(DerivedStorage + 8));
}

__CFString *FigCDSStackLayoutRegionCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCDSStackLayoutRegion: <%p>"), a1);
  return Mutable;
}

__CFString *FigCDSStackLayoutRegion_FigCDSBaseProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCDSStackLayoutRegion <FigCDSBaseProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCDSStackLayoutRegion_FigCDSBaseProtocol_GetClassName(uint64_t a1, _QWORD *a2)
{
  *a2 = "FigCDSStackLayoutRegion";
  return 0;
}

__CFString *FigCDSStackLayoutRegion_FigCDSNodeProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCDSStackLayoutRegion <FigCDSNodeProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_SetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_GetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_GetChildren(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 24);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_HasChildNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t ProtocolVTable;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  v5 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v7 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v7)
    return 4294954508;
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  if (v8)
    return v8(v5, a2, a3);
  else
    return 4294954514;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_AddChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t result;
  const __CFArray *v9;
  uint64_t v10;
  void (*v11)(uint64_t, CFMutableArrayRef *);
  CFMutableArrayRef theArray;
  CFRange v13;

  v4 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v6 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v6)
    return 4294954508;
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 40);
  if (!v7)
    return 4294954514;
  result = v7(v4, a2);
  if (!(_DWORD)result)
  {
    theArray = 0;
    FigCDSNodeProtocolGetProtocolID();
    v9 = (const __CFArray *)CMBaseObjectGetProtocolVTable();
    if (v9)
    {
      v10 = *((_QWORD *)v9 + 2);
      if (v10 && (v11 = *(void (**)(uint64_t, CFMutableArrayRef *))(v10 + 24)) != 0)
      {
        v11(a1, &theArray);
        v9 = theArray;
      }
      else
      {
        v9 = 0;
      }
    }
    v13.length = CFArrayGetCount(v9);
    v13.location = 0;
    CFArraySortValues(theArray, v13, (CFComparatorFunction)cdsStackLayout_TimeComparator, 0);
    return 0;
  }
  return result;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_RemoveChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_RemovelAllChildrenNodes()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 56);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_SetViewport(double a1, double a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t ProtocolVTable;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, double, double, double, double);

  v8 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v10 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v10)
    return 4294954508;
  v11 = *(uint64_t (**)(uint64_t, double, double, double, double))(v10 + 64);
  if (v11)
    return v11(v8, a1, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_GetViewport(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 72);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_SetCDSBounds(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _OWORD *);
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[4];

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  v8 = *a2;
  v9 = a2[1];
  v10 = a2[2];
  v11 = a2[3];
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, _OWORD *))(v5 + 80);
  if (!v6)
    return 4294954514;
  v12[0] = v8;
  v12[1] = v9;
  v12[2] = v10;
  v12[3] = v11;
  return v6(v3, v12);
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_GetCDSBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 88);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_SetCGBounds(double a1, double a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t ProtocolVTable;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, double, double, double, double);

  v8 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v10 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v10)
    return 4294954508;
  v11 = *(uint64_t (**)(uint64_t, double, double, double, double))(v10 + 96);
  if (v11)
    return v11(v8, a1, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_GetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 104);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_SetCGSize(double a1, double a2)
{
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, double, double);

  v4 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v6 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v6)
    return 4294954508;
  v7 = *(uint64_t (**)(uint64_t, double, double))(v6 + 112);
  if (v7)
    return v7(v4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_GetCGSize(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable
    && (v5 = *(_QWORD *)(ProtocolVTable + 16)) != 0
    && (v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 120)) != 0)
  {
    return v6(v3, a2);
  }
  else
  {
    return 4294954508;
  }
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_SetCGOrigin(double a1, double a2)
{
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, double, double);

  v4 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v6 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v6)
    return 4294954508;
  v7 = *(uint64_t (**)(uint64_t, double, double))(v6 + 128);
  if (v7)
    return v7(v4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_GetCGOrigin(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 136);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_PurgeImageCache()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 144);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_SetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 152);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_GetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 160);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_GetImageCacheWidth(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 168);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_GetImageCacheHeight(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 176);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_AllocateImageBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  v7 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 184);
  if (v10)
    return v10(v7, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_GetImageBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 192);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_SetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 200);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_GetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 208);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_SetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 216);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_GetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 224);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_HasActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 232);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_SetZOrder(double a1)
{
  uint64_t v2;
  uint64_t ProtocolVTable;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, double);

  v2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v4 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v4)
    return 4294954508;
  v5 = *(uint64_t (**)(uint64_t, double))(v4 + 240);
  if (v5)
    return v5(v2, a1);
  else
    return 4294954514;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_GetZOrder(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 248);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_ResetNodeTree()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 256);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_Draw(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t ProtocolVTable;
  uint64_t v6;
  void (*v7)(const void *, CGRect *);
  const __CFDictionary *v8;
  const void *Value;
  double y;
  CGFloat height;
  CGSize v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(const void *, CGRect *);
  double MidY;
  CGFloat v17;
  CGFloat x;
  CGFloat width;
  double MidX;
  double v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(const void *, double, double);
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(const void *, double, double);
  CGContext *v30;
  CGColorSpace *v31;
  CGColor *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(const void *, CGRect *);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t);
  CGSize v41;
  CGPoint v42;
  CGRect v43;
  CGRect rect;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v41 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
  v42 = (CGPoint)*MEMORY[0x1E0C9D628];
  rect.origin = (CGPoint)*MEMORY[0x1E0C9D628];
  rect.size = v41;
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v6 = *(_QWORD *)(ProtocolVTable + 16);
    if (v6)
    {
      v7 = *(void (**)(const void *, CGRect *))(v6 + 104);
      if (v7)
        v7(a1, &rect);
    }
  }
  v8 = *(const __CFDictionary **)(a2 + 272);
  if (v8)
  {
    Value = CFDictionaryGetValue(v8, a1);
    if (*(_DWORD *)(a2 + 296))
    {
      y = rect.origin.y;
      height = rect.size.height;
    }
    else
    {
      v12 = *(CGSize *)(MEMORY[0x1E0C9D648] + 16);
      v43.origin = (CGPoint)*MEMORY[0x1E0C9D648];
      v43.size = v12;
      FigCDSNodeProtocolGetProtocolID();
      v13 = CMBaseObjectGetProtocolVTable();
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 16);
        if (v14)
        {
          v15 = *(void (**)(const void *, CGRect *))(v14 + 72);
          if (v15)
            v15(a1, &v43);
        }
      }
      MidY = CGRectGetMidY(rect);
      v17 = CGRectGetMidY(v43);
      height = rect.size.height;
      y = v17 + v17 - MidY + rect.size.height * -0.5;
      rect.origin.y = y;
    }
    x = rect.origin.x;
    width = rect.size.width;
    MidX = CGRectGetMidX(*(CGRect *)(&y - 1));
    v21 = CGRectGetMidY(rect);
    FigCDSOutputNodeProtocolGetProtocolID();
    v22 = CMBaseObjectGetProtocolVTable();
    if (v22)
    {
      v23 = *(_QWORD *)(v22 + 16);
      if (v23)
      {
        v24 = *(void (**)(const void *, double, double))(v23 + 72);
        if (v24)
          v24(Value, MidX, v21);
      }
    }
    v25 = rect.size.width;
    v26 = rect.size.height;
    FigCDSOutputNodeProtocolGetProtocolID();
    v27 = CMBaseObjectGetProtocolVTable();
    if (v27)
    {
      v28 = *(_QWORD *)(v27 + 16);
      if (v28)
      {
        v29 = *(void (**)(const void *, double, double))(v28 + 88);
        if (v29)
          v29(Value, v25, v26);
      }
    }
  }
  v30 = *(CGContext **)(a2 + 288);
  if (v30 && *(_BYTE *)(a2 + 464))
  {
    v31 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
    rect = *(CGRect *)ymmword_193301290;
    v32 = CGColorCreate(v31, &rect.origin.x);
    if (v32)
    {
      CGContextSaveGState(v30);
      v43.origin = v42;
      v43.size = v41;
      FigCDSNodeProtocolGetProtocolID();
      v33 = CMBaseObjectGetProtocolVTable();
      if (v33)
      {
        v34 = *(_QWORD *)(v33 + 16);
        if (v34)
        {
          v35 = *(void (**)(const void *, CGRect *))(v34 + 104);
          if (v35)
            v35(a1, &v43);
        }
      }
      CGContextSetRGBStrokeColor(v30, 0.4, 0.8, 1.0, 1.0);
      CGContextSetLineWidth(v30, 3.0);
      CGContextStrokeRect(v30, v43);
      CGContextRestoreGState(v30);
    }
    CGColorRelease(v32);
    CFRelease(v31);
  }
  v36 = *(_QWORD *)(DerivedStorage + 8);
  FigCDSNodeProtocolGetProtocolID();
  v37 = CMBaseObjectGetProtocolVTable();
  if (!v37)
    return 4294954508;
  v38 = *(_QWORD *)(v37 + 16);
  if (!v38)
    return 4294954508;
  v39 = *(uint64_t (**)(uint64_t, uint64_t))(v38 + 264);
  if (v39)
    return v39(v36, a2);
  else
    return 4294954514;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_Layout(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  int v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t ProtocolVTable;
  uint64_t v11;
  void (*v12)(uint64_t, _BYTE *);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, _BYTE *);
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, __int128 *);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, CFArrayRef *);
  CFIndex Count;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, __int128 *);
  double v29;
  double v30;
  const void *ValueAtIndex;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(const void *, _BYTE *);
  int v35;
  double v36;
  unint64_t v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(const void *, _BYTE *);
  uint64_t v42;
  uint64_t v43;
  void (*v44)(const void *, __int128 *);
  uint64_t v45;
  uint64_t v46;
  void (*v47)(const void *, double *);
  uint64_t v48;
  uint64_t v49;
  void (*v50)(const void *, char *);
  uint64_t v51;
  uint64_t v52;
  void (*v53)(const void *, double, double);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, double, double);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(const void *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, double *);
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double x;
  double y;
  double width;
  double height;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(uint64_t, double, double, double, double);
  unint64_t v85;
  const void *v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(const void *, double, double);
  uint64_t v90;
  uint64_t v91;
  void (*v92)(const void *, uint64_t);
  uint64_t v93;
  uint64_t v94;
  void (*v95)(const void *, _BYTE *);
  uint64_t v96;
  uint64_t v97;
  void (*v98)(_QWORD, _BYTE *);
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  char v108;
  double v109[3];
  CFArrayRef theArray;
  __int128 v111;
  __int128 v112;
  _BYTE v113[48];
  __int128 v114;
  CGRect v115;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CMBaseObjectGetDerivedStorage();
  v4 = *(_DWORD *)(v3 + 32);
  v5 = *(double *)(v3 + 24) * (double)*(int *)(v3 + 36);
  v6 = *(double *)(v3 + 56);
  v7 = *(double *)(v3 + 40);
  if (*(double *)(v3 + 64) / 100.0 + *(double *)(v3 + 48) / -100.0 * v5 >= 0.0)
    v8 = *(double *)(v3 + 64) / 100.0 + *(double *)(v3 + 48) / -100.0 * v5;
  else
    v8 = 0.0;
  v9 = *(_QWORD *)(v3 + 8);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v11 = *(_QWORD *)(ProtocolVTable + 16);
    if (v11)
    {
      v12 = *(void (**)(uint64_t, _BYTE *))(v11 + 80);
      if (v12)
      {
        v113[0] = 1;
        *(_DWORD *)&v113[1] = 0;
        *(_DWORD *)&v113[4] = 0;
        *(double *)&v113[8] = v6 / 100.0 + v7 / -100.0 * ((double)v4 / 100.0);
        v113[16] = 1;
        *(_DWORD *)&v113[17] = 0;
        *(_DWORD *)&v113[20] = 0;
        *(double *)&v113[24] = v8;
        v113[32] = 1;
        *(_DWORD *)&v113[33] = 0;
        *(_DWORD *)&v113[36] = 0;
        *(double *)&v113[40] = (double)v4 / 100.0;
        LOBYTE(v114) = 1;
        *(_DWORD *)((char *)&v114 + 1) = 0;
        DWORD1(v114) = 0;
        *((double *)&v114 + 1) = v5;
        v12(v9, v113);
      }
    }
  }
  v13 = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)v113 = CDSRectNull;
  *(_OWORD *)&v113[16] = unk_193301910;
  *(_OWORD *)&v113[32] = xmmword_193301920;
  v114 = unk_193301930;
  v102 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  v103 = *MEMORY[0x1E0C9D628];
  v111 = *MEMORY[0x1E0C9D628];
  v112 = v102;
  FigCDSNodeProtocolGetProtocolID();
  v14 = CMBaseObjectGetProtocolVTable();
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 16);
    if (v15)
    {
      v16 = *(void (**)(uint64_t, _BYTE *))(v15 + 88);
      if (v16)
        v16(a1, v113);
    }
  }
  FigCDSNodeProtocolGetProtocolID();
  v17 = CMBaseObjectGetProtocolVTable();
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 16);
    if (v18)
    {
      v19 = *(void (**)(uint64_t, __int128 *))(v18 + 72);
      if (v19)
        v19(a1, &v111);
    }
  }
  if (*(double *)&v113[40] != -1.0)
  {
    v71 = *(double *)&v112;
    v72 = *(double *)&v111 + *(double *)&v113[8];
    if (v113[0])
      v72 = *(double *)&v111 + *(double *)&v113[8] * *(double *)&v112;
    v73 = *((double *)&v111 + 1) + *(double *)&v113[24];
    if (v113[16])
      v73 = *((double *)&v111 + 1) + *(double *)&v113[24] * *((double *)&v112 + 1);
    v74 = 1.0;
    if (!v113[32])
      v71 = 1.0;
    if ((_BYTE)v114)
      v74 = *((double *)&v112 + 1);
    v76 = *((double *)&v114 + 1) * v74;
    v75 = *(double *)&v113[40] * v71;
    v115 = CGRectIntegral(*(CGRect *)&v72);
    x = v115.origin.x;
    y = v115.origin.y;
    width = v115.size.width;
    height = v115.size.height;
    v81 = *(_QWORD *)(v13 + 8);
    FigCDSNodeProtocolGetProtocolID();
    v82 = CMBaseObjectGetProtocolVTable();
    if (v82)
    {
      v83 = *(_QWORD *)(v82 + 16);
      if (v83)
      {
        v84 = *(void (**)(uint64_t, double, double, double, double))(v83 + 96);
        if (v84)
          v84(v81, x, y, width, height);
      }
    }
  }
  theArray = 0;
  v20 = *(_QWORD *)(DerivedStorage + 8);
  FigCDSNodeProtocolGetProtocolID();
  v21 = CMBaseObjectGetProtocolVTable();
  if (v21)
  {
    v22 = *(_QWORD *)(v21 + 16);
    if (v22)
    {
      v23 = *(void (**)(uint64_t, CFArrayRef *))(v22 + 24);
      if (v23)
        v23(v20, &theArray);
    }
  }
  Count = CFArrayGetCount(theArray);
  v111 = v103;
  v112 = v102;
  v25 = *(_QWORD *)(DerivedStorage + 8);
  FigCDSNodeProtocolGetProtocolID();
  v26 = CMBaseObjectGetProtocolVTable();
  if (v26)
  {
    v27 = *(_QWORD *)(v26 + 16);
    if (v27)
    {
      v28 = *(void (**)(uint64_t, __int128 *))(v27 + 104);
      if (v28)
        v28(v25, &v111);
    }
  }
  v30 = *((double *)&v111 + 1);
  v29 = *(double *)&v111;
  if (*(_BYTE *)DerivedStorage)
  {
    if (Count >= 1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, Count - 1);
      v101 = *MEMORY[0x1E0C9D820];
      *(_OWORD *)v113 = *MEMORY[0x1E0C9D820];
      FigCDSNodeProtocolGetProtocolID();
      v32 = CMBaseObjectGetProtocolVTable();
      if (v32)
      {
        v33 = *(_QWORD *)(v32 + 16);
        if (v33)
        {
          v34 = *(void (**)(const void *, _BYTE *))(v33 + 120);
          if (v34)
            v34(ValueAtIndex, v113);
        }
      }
      v35 = 0;
      v36 = *(double *)&v113[8];
      v37 = Count + 1;
      v100 = *MEMORY[0x1E0C9D538];
      do
      {
        v38 = CFArrayGetValueAtIndex(theArray, v37 - 2);
        *(_OWORD *)v113 = v103;
        *(_OWORD *)&v113[16] = v102;
        v105 = v101;
        *(_OWORD *)v109 = v100;
        FigCDSNodeProtocolGetProtocolID();
        v39 = CMBaseObjectGetProtocolVTable();
        if (v39)
        {
          v40 = *(_QWORD *)(v39 + 16);
          if (v40)
          {
            v41 = *(void (**)(const void *, _BYTE *))(v40 + 104);
            if (v41)
              v41(v38, v113);
          }
        }
        FigCDSNodeProtocolGetProtocolID();
        v42 = CMBaseObjectGetProtocolVTable();
        if (v42)
        {
          v43 = *(_QWORD *)(v42 + 16);
          if (v43)
          {
            v44 = *(void (**)(const void *, __int128 *))(v43 + 120);
            if (v44)
              v44(v38, &v105);
          }
        }
        FigCDSNodeProtocolGetProtocolID();
        v45 = CMBaseObjectGetProtocolVTable();
        if (v45)
        {
          v46 = *(_QWORD *)(v45 + 16);
          if (v46)
          {
            v47 = *(void (**)(const void *, double *))(v46 + 136);
            if (v47)
              v47(v38, v109);
          }
        }
        if (*(double *)&v113[8] != v30)
        {
          v108 = 0;
          FigCDSNodeProtocolGetProtocolID();
          v48 = CMBaseObjectGetProtocolVTable();
          if (v48)
          {
            v49 = *(_QWORD *)(v48 + 16);
            if (v49)
            {
              v50 = *(void (**)(const void *, char *))(v49 + 232);
              if (v50)
                v50(v38, &v108);
            }
          }
          if (!v108)
          {
            if (v109[0] == -1.0 && v109[1] == -1.0)
            {
              v109[0] = v29;
              v109[1] = v30 - v36;
              FigCDSNodeProtocolGetProtocolID();
              v51 = CMBaseObjectGetProtocolVTable();
              if (v51)
              {
                v52 = *(_QWORD *)(v51 + 16);
                if (v52)
                {
                  v53 = *(void (**)(const void *, double, double))(v52 + 128);
                  if (v53)
                    v53(v38, v29, v30 - v36);
                }
              }
            }
            v107 = 0;
            FigCDSMoveToActionCreate(&v107);
            v54 = v107;
            FigCDSActionProtocolGetProtocolID();
            v55 = CMBaseObjectGetProtocolVTable();
            if (v55)
            {
              v56 = *(_QWORD *)(v55 + 16);
              if (v56)
              {
                v57 = *(void (**)(uint64_t, uint64_t))(v56 + 16);
                if (v57)
                  v57(v54, 450);
              }
            }
            v58 = v107;
            FigCDSMoveToActionProtocolGetProtocolID();
            v59 = CMBaseObjectGetProtocolVTable();
            if (v59)
            {
              v60 = *(_QWORD *)(v59 + 16);
              if (v60)
              {
                v61 = *(void (**)(uint64_t, double, double))(v60 + 16);
                if (v61)
                  v61(v58, v29, v30);
              }
            }
            v62 = v107;
            FigCDSNodeProtocolGetProtocolID();
            v63 = CMBaseObjectGetProtocolVTable();
            if (v63)
            {
              v64 = *(_QWORD *)(v63 + 16);
              if (v64)
              {
                v65 = *(void (**)(const void *, uint64_t))(v64 + 304);
                if (v65)
                  v65(v38, v62);
              }
            }
            v35 = 1;
          }
        }
        v30 = v30 + *((double *)&v105 + 1);
        --v37;
      }
      while (v37 > 1);
      if (v35)
      {
        v109[0] = 0.0;
        v105 = v111;
        v106 = v112;
        v66 = *(_QWORD *)(DerivedStorage + 8);
        FigCDSNodeProtocolGetProtocolID();
        v67 = CMBaseObjectGetProtocolVTable();
        if (v67
          && (v68 = *(_QWORD *)(v67 + 16)) != 0
          && (v69 = *(void (**)(uint64_t, double *))(v68 + 16)) != 0)
        {
          v69(v66, v109);
          v70 = v109[0];
        }
        else
        {
          v70 = 0.0;
        }
        FigCDSNodeProtocolGetProtocolID();
        v96 = CMBaseObjectGetProtocolVTable();
        if (v96)
        {
          v97 = *(_QWORD *)(v96 + 16);
          if (v97)
          {
            v98 = *(void (**)(_QWORD, _BYTE *))(v97 + 296);
            if (v98)
            {
              *(_QWORD *)v113 = 0x1C200000000;
              *(_OWORD *)&v113[8] = v105;
              *(_OWORD *)&v113[24] = v106;
              v98(*(_QWORD *)&v70, v113);
            }
          }
        }
      }
    }
  }
  else if (Count >= 1)
  {
    v85 = Count + 1;
    v104 = *MEMORY[0x1E0C9D820];
    do
    {
      *(_OWORD *)v113 = v104;
      v86 = CFArrayGetValueAtIndex(theArray, v85 - 2);
      FigCDSNodeProtocolGetProtocolID();
      v87 = CMBaseObjectGetProtocolVTable();
      if (v87)
      {
        v88 = *(_QWORD *)(v87 + 16);
        if (v88)
        {
          v89 = *(void (**)(const void *, double, double))(v88 + 128);
          if (v89)
            v89(v86, v29, v30);
        }
      }
      FigCDSNodeProtocolGetProtocolID();
      v90 = CMBaseObjectGetProtocolVTable();
      if (v90)
      {
        v91 = *(_QWORD *)(v90 + 16);
        if (v91)
        {
          v92 = *(void (**)(const void *, uint64_t))(v91 + 216);
          if (v92)
            v92(v86, 1);
        }
      }
      FigCDSNodeProtocolGetProtocolID();
      v93 = CMBaseObjectGetProtocolVTable();
      if (v93)
      {
        v94 = *(_QWORD *)(v93 + 16);
        if (v94)
        {
          v95 = *(void (**)(const void *, _BYTE *))(v94 + 120);
          if (v95)
            v95(v86, v113);
        }
      }
      v30 = v30 + *(double *)&v113[8];
      --v85;
    }
    while (v85 > 1);
  }
  return 0;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_ExecActions()
{
  return 0;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_Compose(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t ProtocolVTable;
  uint64_t v6;
  void (*v7)(uint64_t, char *);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, __int16 *);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  __int16 v25;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v25 = 0;
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v6 = *(_QWORD *)(ProtocolVTable + 16);
    if (v6)
    {
      v7 = *(void (**)(uint64_t, char *))(v6 + 232);
      if (v7)
        v7(a1, (char *)&v25 + 1);
    }
  }
  FigCDSNodeProtocolGetProtocolID();
  v8 = CMBaseObjectGetProtocolVTable();
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 16);
    if (v9)
    {
      v10 = *(void (**)(uint64_t, __int16 *))(v9 + 224);
      if (v10)
        v10(a1, &v25);
    }
  }
  if (HIBYTE(v25))
  {
    FigCDSNodeProtocolGetProtocolID();
    v11 = CMBaseObjectGetProtocolVTable();
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 16);
      if (v12)
      {
        v13 = *(void (**)(uint64_t, uint64_t))(v12 + 280);
        if (v13)
          v13(a1, a2);
      }
    }
  }
  if ((_BYTE)v25)
  {
    FigCDSNodeProtocolGetProtocolID();
    v14 = CMBaseObjectGetProtocolVTable();
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 16);
      if (v15)
      {
        v16 = *(void (**)(uint64_t, uint64_t))(v15 + 272);
        if (v16)
          v16(a1, a2);
      }
    }
  }
  FigCDSNodeProtocolGetProtocolID();
  v17 = CMBaseObjectGetProtocolVTable();
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 16);
    if (v18)
    {
      v19 = *(void (**)(uint64_t, uint64_t))(v18 + 264);
      if (v19)
        v19(a1, a2);
    }
  }
  v20 = *(_QWORD *)(DerivedStorage + 8);
  FigCDSNodeProtocolGetProtocolID();
  v21 = CMBaseObjectGetProtocolVTable();
  if (!v21)
    return 4294954508;
  v22 = *(_QWORD *)(v21 + 16);
  if (!v22)
    return 4294954508;
  v23 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 288);
  if (v23)
    return v23(v20, a2);
  else
    return 4294954514;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_OnChildUpdateDisplayRequest(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _OWORD *);
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  v8 = *a2;
  v9 = a2[1];
  v10 = *((_QWORD *)a2 + 4);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, _OWORD *))(v5 + 296);
  if (!v6)
    return 4294954514;
  v11[0] = v8;
  v11[1] = v9;
  v12 = v10;
  return v6(v3, v11);
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_AddAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 304);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_RemoveAllActions()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 312);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_SetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 320);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_GetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 328);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_SelectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, double, double);

  v7 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, double, double))(v9 + 336);
  if (v10)
    return v10(v7, a4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_UnselectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, double, double);

  v7 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, double, double))(v9 + 344);
  if (v10)
    return v10(v7, a4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCDSStackLayoutRegion_FigCDSNodeProtocol_IsSelected(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 352);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t cdsStackLayout_TimeComparator(uint64_t a1, uint64_t a2)
{
  double v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, double *);
  double FigBaseObject;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, _QWORD *);
  _QWORD v14[2];
  double v15[2];

  v15[0] = FigBytePumpGetFigBaseObject(a1);
  v15[1] = v4;
  FigCDSIntervalProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v6 = *(_QWORD *)(ProtocolVTable + 16);
    if (v6)
    {
      v7 = *(uint64_t (**)(uint64_t, double *))(v6 + 8);
      if (v7)
        ProtocolVTable = v7(a1, v15);
    }
  }
  FigBaseObject = FigBytePumpGetFigBaseObject(ProtocolVTable);
  *(double *)v14 = FigBaseObject;
  v14[1] = v9;
  FigCDSIntervalProtocolGetProtocolID();
  v10 = CMBaseObjectGetProtocolVTable();
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 16);
    if (v11)
    {
      v12 = *(void (**)(uint64_t, _QWORD *))(v11 + 8);
      if (v12)
      {
        v12(a2, v14);
        FigBaseObject = *(double *)v14;
      }
    }
  }
  if (v15[0] < FigBaseObject)
    return -1;
  else
    return v15[0] > FigBaseObject;
}

__CFString *FigCDSStackLayoutRegion_FigCDSRegionProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCDSStackLayoutRegion <FigCDSRegionProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCDSStackLayoutRegion_FigCDSRegionProtocol_SetRegionID(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(const void **)(DerivedStorage + 16);
  *(_QWORD *)(DerivedStorage + 16) = a2;
  if (a2)
    CFRetain(a2);
  if (v4)
    CFRelease(v4);
  return 0;
}

uint64_t FigCDSStackLayoutRegion_FigCDSRegionProtocol_GetRegionID(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  return 0;
}

uint64_t FigCDSStackLayoutRegion_FigCDSRegionProtocol_SetWidth(uint64_t a1, int a2)
{
  *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 32) = a2;
  return 0;
}

uint64_t FigCDSStackLayoutRegion_FigCDSRegionProtocol_GetWidth(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 32);
  return 0;
}

uint64_t FigCDSStackLayoutRegion_FigCDSRegionProtocol_SetLines(uint64_t a1, int a2)
{
  *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 36) = a2;
  return 0;
}

uint64_t FigCDSStackLayoutRegion_FigCDSRegionProtocol_GetLines(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 36);
  return 0;
}

uint64_t FigCDSStackLayoutRegion_FigCDSRegionProtocol_SetRegionAnchor(double a1, double a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 40) = a1;
  *(double *)(DerivedStorage + 48) = a2;
  return 0;
}

uint64_t FigCDSStackLayoutRegion_FigCDSRegionProtocol_GetRegionAnchor(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 40);
  return 0;
}

uint64_t FigCDSStackLayoutRegion_FigCDSRegionProtocol_SetViewportAnchor(double a1, double a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 56) = a1;
  *(double *)(DerivedStorage + 64) = a2;
  return 0;
}

uint64_t FigCDSStackLayoutRegion_FigCDSRegionProtocol_GetViewportAnchor(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 56);
  return 0;
}

__CFString *FigCDSStackLayoutRegion_FigCDSStackLayoutRegionProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCDSStackLayoutRegion <FigCDSStackLayoutRegionProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCDSStackLayoutRegion_FigCDSStackLayoutRegionProtocol_SetAnimationEnabled(uint64_t a1, char a2)
{
  *(_BYTE *)CMBaseObjectGetDerivedStorage() = a2;
  return 0;
}

uint64_t FigCDSStackLayoutRegion_FigCDSStackLayoutRegionProtocol_SetLineHeightRatio(double a1)
{
  *(double *)(CMBaseObjectGetDerivedStorage() + 24) = a1;
  return 0;
}

uint64_t RegisterFigCDSStackLayoutRegionBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFTypeRef FigCDSStackLayoutRegionBaseCopyFormattingDesc()
{
  return CFRetain(CFSTR("[FigCDSStackLayoutRegion]"));
}

uint64_t FigFairPlayOctaviaCPECryptorCreate(const void *a1, const void *a2, int a3, uint64_t a4, const void *a5, _QWORD *a6, const void *a7, CFTypeRef *a8)
{
  int v13;
  const void *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t DerivedStorage;
  uint64_t v19;
  CFTypeRef v20;
  uint64_t v21;
  uint64_t v22;
  const __CFData *DPInfoFromSinfExtensions;
  const __CFData *v24;
  const UInt8 *v25;
  int v26;
  int Length;
  const UInt8 *v28;
  const UInt8 *BytePtr;
  const __CFData *LegacySinfFromSinfExtensions;
  const UInt8 *ExtendedSinfFromSinfExtensions;
  NSObject *v32;
  int v33;
  int NeroCryptor;
  const void *v35;
  uint64_t v36;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v38;
  _QWORD v43[7];
  int v44;
  int v45;
  const UInt8 *v46;
  int v47;
  int v48;
  const UInt8 *v49;
  int v50;
  int v51;
  const UInt8 *v52;
  CFTypeRef cf;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  int v61;
  _QWORD block[16];
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v58 = 0;
  v59 = &v58;
  v60 = 0x2000000000;
  v61 = 0;
  v54 = 0;
  v55 = &v54;
  v56 = 0x2000000000;
  v57 = 0;
  cf = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  v13 = -12150;
  if (!a1)
    goto LABEL_18;
  if (!a3)
    goto LABEL_18;
  if (!a4)
    goto LABEL_18;
  if (!a5)
    goto LABEL_18;
  v14 = a1;
  v15 = a6;
  if (!a6 || !a8 || !a7)
    goto LABEL_18;
  v16 = (uint64_t)a2;
  MEMORY[0x19402F294](&FigFairPlayOctaviaCPECryptorGetClassID_sRegisterFigFairPlayOctaviaCPECryptorTypeOnce, RegisterFigFairPlayOctaviaCPECryptorType);
  v17 = CMDerivedObjectCreate();
  *((_DWORD *)v59 + 6) = v17;
  if (v17)
    goto LABEL_27;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    v13 = -12151;
    goto LABEL_18;
  }
  v19 = DerivedStorage;
  if (a2)
    v20 = CFRetain(a2);
  else
    v20 = 0;
  *(_QWORD *)v19 = v20;
  *(_QWORD *)(v19 + 8) = FigFairPlayCopyDisposeStorageAllocator();
  *(_QWORD *)(v19 + 16) = CFRetain(v14);
  *(_QWORD *)(v19 + 40) = CFRetain(a5);
  *(_QWORD *)(v19 + 72) = CFRetain(a7);
  v63 = 0;
  v64 = &v63;
  v65 = 0x2000000000;
  v66 = 0;
  if (gContextAccessInitOnce != -1)
    dispatch_once(&gContextAccessInitOnce, &__block_literal_global_114);
  v21 = MEMORY[0x1E0C809B0];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __CopyContextAccessQueue_block_invoke_2;
  block[3] = &unk_1E2FB6138;
  block[4] = &v63;
  block[5] = a7;
  dispatch_sync((dispatch_queue_t)gContextSerialAccessQueue, block);
  v22 = v64[3];
  _Block_object_dispose(&v63, 8);
  *(_QWORD *)(v19 + 48) = v22;
  if (!v22)
  {
    v13 = -12158;
    goto LABEL_18;
  }
  if ((a3 & 1) == 0)
  {
    v13 = -12161;
LABEL_18:
    *((_DWORD *)v59 + 6) = v13;
    goto LABEL_27;
  }
  DPInfoFromSinfExtensions = (const __CFData *)FigFairPlayGetDPInfoFromSinfExtensions(*(const __CFDictionary **)(v19 + 40));
  if (!DPInfoFromSinfExtensions)
  {
    LegacySinfFromSinfExtensions = (const __CFData *)FigFairPlayGetLegacySinfFromSinfExtensions(*(const __CFDictionary **)(v19 + 40));
    ExtendedSinfFromSinfExtensions = (const UInt8 *)FigFairPlayGetExtendedSinfFromSinfExtensions(*(const __CFDictionary **)(v19 + 40));
    v25 = ExtendedSinfFromSinfExtensions;
    if (LegacySinfFromSinfExtensions)
    {
      BytePtr = CFDataGetBytePtr(LegacySinfFromSinfExtensions);
      LODWORD(LegacySinfFromSinfExtensions) = CFDataGetLength(LegacySinfFromSinfExtensions);
      if (v25)
      {
LABEL_23:
        v28 = CFDataGetBytePtr((CFDataRef)v25);
        Length = CFDataGetLength((CFDataRef)v25);
        v26 = 0;
        v25 = 0;
        goto LABEL_26;
      }
    }
    else
    {
      BytePtr = 0;
      if (ExtendedSinfFromSinfExtensions)
        goto LABEL_23;
    }
    v26 = 0;
    Length = 0;
    v28 = 0;
    goto LABEL_26;
  }
  v24 = DPInfoFromSinfExtensions;
  v25 = CFDataGetBytePtr(DPInfoFromSinfExtensions);
  v26 = CFDataGetLength(v24);
  Length = 0;
  v28 = 0;
  BytePtr = 0;
  LODWORD(LegacySinfFromSinfExtensions) = 0;
LABEL_26:
  v32 = *(NSObject **)(v19 + 48);
  v43[0] = v21;
  v43[1] = 0x40000000;
  v43[2] = __FigFairPlayOctaviaCPECryptorCreate_block_invoke;
  v43[3] = &unk_1E2FB5F30;
  v44 = (int)LegacySinfFromSinfExtensions;
  v45 = 0;
  v46 = BytePtr;
  v47 = Length;
  v48 = 0;
  v49 = v28;
  v50 = v26;
  v51 = 0;
  v52 = v25;
  v43[4] = &v58;
  v43[5] = &v54;
  v43[6] = v19;
  dispatch_sync(v32, v43);
  if (!*((_DWORD *)v59 + 6))
  {
    v33 = FigCPEOctaviaExternalProtectionMonitorCreate(v16, v15, 0, *(const void **)(v19 + 72), (_QWORD *)(v19 + 64));
    *((_DWORD *)v59 + 6) = v33;
    if (!v33)
    {
      FigCPEExternalProtectionMonitorBeginMonitoring(*(_QWORD *)(v19 + 64));
      NeroCryptor = FigCPEOctaviaCreateNeroCryptor((uint64_t)cf, *(_QWORD *)(v19 + 64), (const void *)v55[3], *(_QWORD *)(v19 + 72), (_QWORD *)(v19 + 24), (_QWORD *)(v19 + 32));
      *((_DWORD *)v59 + 6) = NeroCryptor;
      if (!NeroCryptor)
      {
        *a8 = cf;
        cf = 0;
        goto LABEL_32;
      }
    }
  }
LABEL_27:
  if (cf)
    CFRelease(cf);
LABEL_32:
  v35 = (const void *)v55[3];
  if (v35)
    CFRelease(v35);
  v36 = *((unsigned int *)v59 + 6);
  if ((_DWORD)v36 && dword_1EE2A3248)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v36 = *((unsigned int *)v59 + 6);
  }
  v38 = FigFairPlayMapFairPlayErrorToCPEError(v36);
  _Block_object_dispose(&v54, 8);
  _Block_object_dispose(&v58, 8);
  return v38;
}

BOOL FigFairPlayOctaviaCPECryptorEqual()
{
  uint64_t DerivedStorage;
  uint64_t v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && v1)
    return *(_QWORD *)(DerivedStorage + 56) == *(_QWORD *)(v1 + 56);
  else
    return (DerivedStorage | v1) == 0;
}

uint64_t FigFairPlayOctaviaCPECryptorInvalidate()
{
  const void **DerivedStorage;
  const void **v1;
  const void *v2;
  const void *v3;
  const void *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  const void *v8;
  const void *v9;
  const void *v10;

  DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v1 = DerivedStorage;
    v2 = *DerivedStorage;
    if (v2)
    {
      CFRelease(v2);
      *v1 = 0;
    }
    v3 = v1[1];
    if (v3)
    {
      CFRelease(v3);
      v1[1] = 0;
    }
    v4 = v1[5];
    if (v4)
    {
      CFRelease(v4);
      v1[5] = 0;
    }
    FigCPEOctaviaReleaseRemoteCryptor((uint64_t)v1[3]);
    v1[3] = 0;
    if (v1[7])
    {
      t6uy9jukl3();
      FAIRPLAY_CALL_LOG(v5);
      v1[7] = 0;
    }
    v6 = v1[6];
    if (v6)
    {
      dispatch_release(v6);
      v1[6] = 0;
    }
    v7 = (uint64_t)v1[8];
    if (v7)
    {
      FigCPEExternalProtectionMonitorEndMonitoring(v7);
      v8 = v1[8];
      if (v8)
      {
        CFRelease(v8);
        v1[8] = 0;
      }
    }
    v9 = v1[2];
    if (v9)
    {
      CFRelease(v9);
      v1[2] = 0;
    }
    v10 = v1[9];
    if (v10)
    {
      CFRelease(v10);
      v1[9] = 0;
    }
  }
  return 0;
}

__CFString *FigFairPlayOctaviaCPECryptorCopyDebugDescription()
{
  CFAllocatorRef *DerivedStorage;
  CFAllocatorRef *v1;
  __CFString *Mutable;
  __CFString *v3;

  DerivedStorage = (CFAllocatorRef *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return 0;
  v1 = DerivedStorage;
  Mutable = CFStringCreateMutable(*DerivedStorage, 0);
  v3 = Mutable;
  if (Mutable)
    CFStringAppendFormat(Mutable, 0, CFSTR("<FigFPOCPECryptor: protectorParent<%@> >"), v1[2]);
  return v3;
}

uint64_t FigFairPlayOctaviaCPECryptorCopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  CFTypeRef *v9;
  CFTypeRef v10;
  uint64_t result;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, const void *, uint64_t, _QWORD *);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return 4294955146;
  v8 = DerivedStorage;
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31A0]))
  {
    v9 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
  }
  else
  {
    if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3200]))
    {
      v12 = *(_QWORD *)(v8 + 16);
      v13 = *(uint64_t (**)(uint64_t, const void *, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
      if (v13)
        return v13(v12, a2, a3, a4);
      else
        return 4294954514;
    }
    v9 = (CFTypeRef *)&kFigCPEProtectionScheme_FairPlay;
  }
  if (*v9)
    v10 = CFRetain(*v9);
  else
    v10 = 0;
  result = 0;
  *a4 = v10;
  return result;
}

uint64_t FigFairPlayOctaviaCPECryptorSetProperty()
{
  if (CMBaseObjectGetDerivedStorage())
    return 4294955144;
  else
    return 4294955146;
}

uint64_t FigFairPlayOctaviaCPECryptorGetExternalProtectionMethods(uint64_t a1, _DWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t result;
  int Methods;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = 4294955146;
  if (a2)
  {
    if (DerivedStorage)
    {
      Methods = FigCPEExternalProtectionMonitorGetMethods(*(_QWORD *)(DerivedStorage + 64));
      result = 0;
      *a2 = Methods;
    }
  }
  return result;
}

uint64_t FigFairPlayOctaviaCPECryptorGetAggregateExternalProtectionStatus(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t DerivedStorage;
  int Status;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
    return 4294955146;
  Status = FigCPEExternalProtectionMonitorGetStatus(*(_QWORD *)(DerivedStorage + 64));
  result = 0;
  *a3 = Status;
  return result;
}

uint64_t FigFairPlayOctaviaCPECryptorGetSerializationToken(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294955146;
  v4 = DerivedStorage;
  result = 0;
  *a2 = *(_QWORD *)(v4 + 32);
  return result;
}

uint64_t FigFairPlayOctaviaCPECryptorIsCompatibleWithFormatDescription(uint64_t a1, const opaqueCMFormatDescription *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  CFDictionaryRef v7;
  const __CFDictionary *v8;
  BOOL v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = 0;
  v10 = 0;
  if (a2)
  {
    if (a1)
    {
      v6 = DerivedStorage;
      if (DerivedStorage)
      {
        v7 = FigFairPlayCopySinfExtensionsFromFormatDescription(a2);
        v8 = v7;
        if (v7 && CFEqual(v7, *(CFTypeRef *)(v6 + 40)))
        {
          v5 = 1;
          goto LABEL_13;
        }
        if (FigFairPlayGetDPInfoFromSinfExtensions(*(const __CFDictionary **)(v6 + 40))
          && !FigFairPlayIsPlaceholder(v8, &v10)
          && v10)
        {
          v5 = 1;
          if (!v8)
            return v5;
          goto LABEL_13;
        }
        v5 = 0;
        if (v8)
LABEL_13:
          CFRelease(v8);
      }
    }
  }
  return v5;
}

uint64_t RegisterFigFairPlayOctaviaCPECryptorType()
{
  FigCPECryptorGetClassID();
  return FigBaseClassRegisterClass();
}

CFTypeRef FigFairPlayOctaviaCPECryptorCopyFormattingDesc()
{
  return CFRetain(CFSTR("[FigFPOCPECryptor]"));
}

uint64_t DestroyFairPlayDSContext()
{
  uint64_t v0;

  sv65rt7ugf9si4();
  return FAIRPLAY_CALL_LOG(v0);
}

void AsyncMessageHandler_block_invoke(uint64_t a1, int a2)
{
  if (a2 == 1684628836 && gCurrentContextQueue != 0)
  {
    dispatch_release((dispatch_object_t)gCurrentContextQueue);
    gCurrentContextQueue = 0;
  }
}

BOOL HardwareSupportsMetalCompositor()
{
  uint64_t v1;
  uint64_t v2;

  v1 = 0;
  v2 = 0;
  FigVideoCompositorCopyDeviceSpecificCompositorName(0, &v2);
  FigVideoCompositorCopyDeviceSpecificCompositorName(0, &v1);
  return FigCFEqual() || FigCFEqual() != 0;
}

uint64_t FigVideoCompositorCreateMetal(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v5;
  uint64_t DesiredSourcePixelBufferAttributes;
  _QWORD *DerivedStorage;
  uint64_t v8;
  void *value;
  char v11[18];
  __int16 v12;
  _BYTE v13[12];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  FigVideoCompositorGetClassID();
  v3 = CMDerivedObjectCreate();
  if ((_DWORD)v3)
    return v3;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return FigSignalErrorAt();
  v5 = Mutable;
  value = 0;
  strcpy(v11, "v024f024ARGByuv2 ");
  v12 = 0;
  qmemcpy(v13, "024x02fxAhGR", sizeof(v13));
  DesiredSourcePixelBufferAttributes = FigVideoCompositorCreateDesiredSourcePixelBufferAttributes((uint64_t)v11, 8, (CFMutableDictionaryRef *)&value);
  if (!(_DWORD)DesiredSourcePixelBufferAttributes)
    CFDictionarySetValue(v5, CFSTR("SourcePixelBufferAttributes"), value);
  if (value)
    CFRelease(value);
  if (!(_DWORD)DesiredSourcePixelBufferAttributes)
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    *DerivedStorage = v5;
    v8 = FigDispatchQueueCreateWithPriority();
    DerivedStorage[5] = v8;
    if (v8)
    {
      DesiredSourcePixelBufferAttributes = 0;
      *a2 = 0;
      return DesiredSourcePixelBufferAttributes;
    }
    return FigSignalErrorAt();
  }
  return DesiredSourcePixelBufferAttributes;
}

void mvc_Finalize()
{
  uint64_t DerivedStorage;
  NSObject *v1;
  const void *v2;
  const void *v3;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(NSObject **)(DerivedStorage + 40);
  if (v1)
  {
    dispatch_release(v1);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 8);
  if (v2)
    CFRelease(v2);
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
  v3 = *(const void **)(DerivedStorage + 48);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(DerivedStorage + 16);
  if (v4)
    CFRelease(v4);
}

__CFString *mvc_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;
  CFDictionaryRef *DerivedStorage;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  DerivedStorage = (CFDictionaryRef *)CMBaseObjectGetDerivedStorage();
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigVideoCompositor_Metal %p>\n"), a1);
  CFDictionaryApplyFunction(*DerivedStorage, (CFDictionaryApplierFunction)mvc_appendDebugDescriptionOfProperty, Mutable);
  return Mutable;
}

uint64_t mvc_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  CFDictionaryRef *v7;
  const void *UInt32;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a4)
    return FigSignalErrorAt();
  v7 = (CFDictionaryRef *)DerivedStorage;
  if (FigCFEqual())
  {
    *a4 = *MEMORY[0x1E0C9AE50];
  }
  else
  {
    if (FigCFEqual())
    {
      UInt32 = (const void *)FigCFNumberCreateUInt32();
    }
    else
    {
      UInt32 = CFDictionaryGetValue(*v7, a2);
      if (UInt32)
        UInt32 = CFRetain(UInt32);
    }
    *a4 = UInt32;
  }
  return 0;
}

uint64_t mvc_SetProperty(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  const __CFArray *Value;
  const __CFArray *v12;
  CFTypeID v13;
  CFTypeID v15;
  CFMutableDictionaryRef MutableCopy;
  CFTypeRef cf[7];

  cf[6] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  if (!a2)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  v8 = 0;
  cf[1] = CFSTR("RenderDimensions");
  cf[2] = CFSTR("RenderPixelAspectRatio");
  cf[3] = CFSTR("RenderEdgeProcessingPixels");
  cf[4] = CFSTR("DestinationPixelBufferDesiredAttributes");
  cf[5] = CFSTR("RenderScale");
  while (!FigCFEqual())
  {
    v8 += 8;
    if (v8 == 40)
      goto LABEL_11;
  }
  CFGetAllocator(a1);
  mvc_CopyProperty((uint64_t)a1, a2, v9, cf);
  if (!FigCFEqual())
  {
    v10 = *(const void **)(v7 + 8);
    if (v10)
    {
      CFRelease(v10);
      *(_QWORD *)(v7 + 8) = 0;
    }
  }
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
LABEL_11:
  if (a3)
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)v7, a2, a3);
    if (FigCFEqual())
    {
      Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a3, (const void *)*MEMORY[0x1E0CA9040]);
      if (Value)
      {
        v12 = Value;
        v13 = CFGetTypeID(Value);
        if (v13 == CFArrayGetTypeID())
        {
          if (!CFArrayGetValueAtIndex(v12, 0))
            goto LABEL_18;
LABEL_22:
          FigCFNumberGetUInt64();
          if (!VTMetalTransferSessionIsPixelFormatTypeSupportedOnDestination())
          {
            MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, (CFDictionaryRef)a3);
            FigCFDictionarySetInt32();
            CFDictionarySetValue(*(CFMutableDictionaryRef *)v7, a2, MutableCopy);
            if (MutableCopy)
              CFRelease(MutableCopy);
          }
          goto LABEL_18;
        }
        v15 = CFGetTypeID(v12);
        if (v15 == CFNumberGetTypeID())
          goto LABEL_22;
      }
    }
  }
  else
  {
    FigCFEqual();
  }
LABEL_18:
  if (cf[0])
    CFRelease(cf[0]);
  return 0;
}

void mvc_appendDebugDescriptionOfProperty(uint64_t a1, uint64_t a2, CFMutableStringRef theString)
{
  CFStringAppendFormat(theString, 0, CFSTR("  %@ : %@\n"), a1, a2);
}

uint64_t mvc_RenderFrame(const void *a1, int a2, _DWORD *a3, const void **a4, uint64_t a5, uint64_t a6, uint64_t a7, const __CFDictionary *a8, uint64_t a9, uint64_t a10)
{
  uint64_t DerivedStorage;
  uint64_t v16;
  uint64_t RenderDimensions;
  uint64_t *v18;
  const void *v19;
  _QWORD *v20;
  CGRect *v21;
  const __CFArray *v22;
  uint64_t v23;
  const __CFDictionary **v24;
  int BestBitDepthForCompositorPropertiesAndLayerDefinitions;
  CGAffineTransform *p_t1;
  CFIndex v27;
  const void *ValueAtIndex;
  __CVBuffer *SourcePixelBuffer;
  OSType PixelFormatType;
  uint64_t v31;
  const __CFAllocator *v32;
  CFMutableArrayRef Mutable;
  CVPixelBufferPoolRef *v34;
  CFAllocatorRef *v35;
  int v36;
  CVPixelBufferPoolRef v37;
  const void *v38;
  CGFloat a;
  int64_t Count;
  CGRect *v41;
  CFIndex v42;
  _DWORD *v43;
  __int128 *v44;
  CGRect *v45;
  const void *v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  NSObject *v56;
  const void *v57;
  const void *v59;
  _DWORD *v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _QWORD block[8];
  CGAffineTransform pixelBufferOut;
  int8x16_t v67;
  CGAffineTransform v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  __CFArray *v73;
  CGSize v74;
  char v75;
  CGAffineTransform t1;
  CGAffineTransform v77;
  int8x16_t v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v75 = 0;
  v74.width = 0.0;
  v74.height = 0.0;
  v73 = 0;
  v69 = 0;
  v70 = &v69;
  v71 = 0x2020000000;
  v72 = 0;
  v63 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  v64 = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)&v68.a = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)&v68.c = v63;
  v62 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
  *(_OWORD *)&v68.tx = v62;
  if (!DerivedStorage || (v16 = DerivedStorage, !*(_QWORD *)(DerivedStorage + 24)))
  {
    RenderDimensions = FigSignalErrorAt();
LABEL_85:
    v60 = 0;
    v61 = 0;
    v21 = 0;
    v20 = 0;
    goto LABEL_69;
  }
  RenderDimensions = FigVideoCompositorPropertiesGetRenderDimensions(*(const __CFDictionary **)DerivedStorage, &v74);
  if ((_DWORD)RenderDimensions)
    goto LABEL_85;
  *(_OWORD *)&v77.a = *(_OWORD *)a9;
  v77.c = *(CGFloat *)(a9 + 16);
  RenderDimensions = FigVCLayerDefinitionCreateLayerDefinitionArray(a2, a3, a4, a8, v74.width, v74.height, (uint64_t)&v77, &v73);
  if ((_DWORD)RenderDimensions)
    goto LABEL_85;
  FigCFDictionaryGetBooleanIfPresent();
  if (v75)
  {
    *(_OWORD *)&v77.a = *(_OWORD *)a9;
    v77.c = *(CGFloat *)(a9 + 16);
    FigVideoCompositionInstructionGetNormalizedTime(a8, (CMTime *)&v77);
  }
  RenderDimensions = FigVideoCompositorCopyDestinationPixelBufferWithoutComposingIfPossible(*(const __CFDictionary **)v16, v73, v70 + 3);
  if ((_DWORD)RenderDimensions)
    goto LABEL_85;
  v18 = v70;
  v19 = (const void *)v70[3];
  if (v19)
  {
    v20 = 0;
    v21 = 0;
    v60 = 0;
    v61 = 0;
LABEL_65:
    CFRetain(v19);
    goto LABEL_66;
  }
  v22 = v73;
  v23 = CMBaseObjectGetDerivedStorage();
  pixelBufferOut.a = 0.0;
  t1.a = 9.38084234e271;
  *(_OWORD *)&v77.a = *(_OWORD *)"v024f024ARGB ";
  v77.c = 2.89892896e-57;
  v24 = (const __CFDictionary **)CMBaseObjectGetDerivedStorage();
  BestBitDepthForCompositorPropertiesAndLayerDefinitions = FigVideoCompositorGetBestBitDepthForCompositorPropertiesAndLayerDefinitions(*v24, v22);
  if (BestBitDepthForCompositorPropertiesAndLayerDefinitions <= 8)
    p_t1 = &v77;
  else
    p_t1 = &t1;
  if (BestBitDepthForCompositorPropertiesAndLayerDefinitions <= 8)
    v27 = 6;
  else
    v27 = 2;
  if (!v22)
    goto LABEL_86;
  if (CFArrayGetCount(v22) > 0)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v22, 0);
    if (ValueAtIndex)
    {
      SourcePixelBuffer = (__CVBuffer *)FigVCLayerDefinitionGetSourcePixelBuffer((uint64_t)ValueAtIndex);
      if (SourcePixelBuffer)
      {
        PixelFormatType = CVPixelBufferGetPixelFormatType(SourcePixelBuffer);
        v31 = 0;
        while (*(_DWORD *)((char *)&p_t1->a + v31) != PixelFormatType)
        {
          v31 += 4;
          if (4 * v27 == v31)
            goto LABEL_25;
        }
        *(_DWORD *)((char *)&p_t1->a + v31) = LODWORD(p_t1->a);
        LODWORD(p_t1->a) = PixelFormatType;
        goto LABEL_25;
      }
    }
LABEL_86:
    Mutable = 0;
    goto LABEL_27;
  }
LABEL_25:
  v32 = CFGetAllocator(a1);
  Mutable = CFArrayCreateMutable(v32, v27, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    do
    {
      p_t1 = (CGAffineTransform *)((char *)p_t1 + 4);
      FigCFArrayAppendInt32();
      --v27;
    }
    while (v27);
  }
  else
  {
    FigSignalErrorAt();
  }
LABEL_27:
  v34 = (CVPixelBufferPoolRef *)(v23 + 8);
  v35 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (*(_QWORD *)(v23 + 8))
  {
    v36 = FigCFEqual();
    v37 = *v34;
    if (v36)
    {
      if (v37)
        goto LABEL_38;
    }
    else if (v37)
    {
      CFRelease(v37);
      *v34 = 0;
    }
  }
  RenderDimensions = FigVideoCompositorCreateDestinationPixelBufferPool(*(const __CFDictionary **)v23, (uint64_t)CFSTR("metal-vc-output"), Mutable, (_QWORD *)(v23 + 8), 1);
  if ((_DWORD)RenderDimensions)
    goto LABEL_42;
  v38 = *(const void **)(v23 + 16);
  *(_QWORD *)(v23 + 16) = Mutable;
  if (Mutable)
    CFRetain(Mutable);
  if (v38)
    CFRelease(v38);
LABEL_38:
  RenderDimensions = CVPixelBufferPoolCreatePixelBuffer(*v35, *v34, (CVPixelBufferRef *)&pixelBufferOut);
  a = pixelBufferOut.a;
  if ((_DWORD)RenderDimensions
    || (RenderDimensions = FigVideoCompositorSetDestinationPixelBufferColorProperties(*(__CVBuffer **)&pixelBufferOut.a, *(CFDictionaryRef *)v23, v22), a = pixelBufferOut.a, (_DWORD)RenderDimensions)|| (RenderDimensions = FigVideoCompositorSetDestinationPixelBufferGeometricProperties(*(__CVBuffer **)&pixelBufferOut.a, *(const __CFDictionary **)v23), a = pixelBufferOut.a, (_DWORD)RenderDimensions))
  {
    if (a != 0.0)
      CFRelease(*(CFTypeRef *)&a);
  }
  else
  {
    v18[3] = *(_QWORD *)&pixelBufferOut.a;
    pixelBufferOut.a = 0.0;
  }
LABEL_42:
  if (Mutable)
    CFRelease(Mutable);
  if ((_DWORD)RenderDimensions)
    goto LABEL_85;
  v78 = (int8x16_t)xmmword_1932FA180;
  RenderDimensions = FigVideoCompositionInstructionGetBackgroundColorARGB(a8, (uint64_t)&v78);
  if ((_DWORD)RenderDimensions)
    goto LABEL_85;
  v67 = vextq_s8(v78, v78, 4uLL);
  RenderDimensions = FigVideoCompositorCopyRenderPixelBufferDimensionsAndCleanAperture(*(const __CFDictionary **)v16, 0, &v68, 0);
  if ((_DWORD)RenderDimensions)
    goto LABEL_85;
  Count = CFArrayGetCount(v73);
  v20 = malloc_type_calloc(Count, 8uLL, 0x2004093837F09uLL);
  if (Count < 1)
  {
    v21 = 0;
    v60 = 0;
    v61 = 0;
    goto LABEL_61;
  }
  v61 = (__int128 *)malloc_type_calloc(Count, 0x30uLL, 0x1000040EED21634uLL);
  if (!v61)
  {
    RenderDimensions = FigSignalErrorAt();
    v61 = 0;
LABEL_90:
    v60 = 0;
LABEL_92:
    v21 = 0;
    goto LABEL_69;
  }
  v60 = malloc_type_calloc(Count, 4uLL, 0x100004052888210uLL);
  if (!v60)
  {
    RenderDimensions = FigSignalErrorAt();
    goto LABEL_90;
  }
  v41 = (CGRect *)malloc_type_calloc(Count, 0x20uLL, 0x1000040E0EAB150uLL);
  v21 = v41;
  v59 = a1;
  if (!v41)
  {
    RenderDimensions = FigSignalErrorAt();
    goto LABEL_92;
  }
  v42 = 0;
  v43 = v60;
  v44 = v61;
  v45 = v41;
  do
  {
    v46 = CFArrayGetValueAtIndex(v73, v42);
    v47 = (uint64_t)v46;
    if (v46)
    {
      v20[v42] = FigVCLayerDefinitionGetSourcePixelBuffer((uint64_t)v46);
      *v44 = v64;
      v44[1] = v63;
      v44[2] = v62;
      RenderDimensions = FigVCLayerDefinitionGetAffineTransform(v47, v44);
      if ((_DWORD)RenderDimensions)
        goto LABEL_69;
      v48 = *v44;
      v49 = v44[2];
      *(_OWORD *)&t1.c = v44[1];
      *(_OWORD *)&t1.tx = v49;
      *(_OWORD *)&t1.a = v48;
      pixelBufferOut = v68;
      CGAffineTransformConcat(&v77, &t1, &pixelBufferOut);
      v50 = *(_OWORD *)&v77.a;
      v51 = *(_OWORD *)&v77.tx;
      v44[1] = *(_OWORD *)&v77.c;
      v44[2] = v51;
      *v44 = v50;
      RenderDimensions = FigVCLayerDefinitionGetOpacity(v47, v43);
      if ((_DWORD)RenderDimensions)
        goto LABEL_69;
      RenderDimensions = FigVCLayerDefinitionGetCroppedSourceCleanApertureRect(v47, v45);
      if ((_DWORD)RenderDimensions)
        goto LABEL_69;
    }
    else
    {
      *v44 = v64;
      v44[1] = v63;
      v44[2] = v62;
      v52 = *v44;
      v53 = v44[2];
      *(_OWORD *)&t1.c = v44[1];
      *(_OWORD *)&t1.tx = v53;
      *(_OWORD *)&t1.a = v52;
      pixelBufferOut = v68;
      CGAffineTransformConcat(&v77, &t1, &pixelBufferOut);
      v54 = *(_OWORD *)&v77.a;
      v55 = *(_OWORD *)&v77.tx;
      v44[1] = *(_OWORD *)&v77.c;
      v44[2] = v55;
      *v44 = v54;
    }
    ++v42;
    ++v45;
    ++v43;
    v44 += 3;
  }
  while (Count != v42);
  a1 = v59;
LABEL_61:
  if (!*(_QWORD *)(v16 + 48))
  {
    RenderDimensions = VTMetalTransferSessionCreate();
    if ((_DWORD)RenderDimensions)
      goto LABEL_69;
  }
  RenderDimensions = VTMetalTransferSessionComposeImageWithAffineMatrix();
  if ((_DWORD)RenderDimensions)
    goto LABEL_69;
  v19 = (const void *)v70[3];
  if (v19)
    goto LABEL_65;
LABEL_66:
  if (a1)
    CFRetain(a1);
  v56 = *(NSObject **)(v16 + 40);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __mvc_RenderFrame_block_invoke;
  block[3] = &unk_1E2F991F0;
  block[4] = &v69;
  block[5] = v16;
  block[6] = a10;
  block[7] = a1;
  dispatch_sync(v56, block);
  RenderDimensions = 0;
LABEL_69:
  v57 = (const void *)v70[3];
  if (v57)
    CFRelease(v57);
  if (v73)
    CFRelease(v73);
  if (v21)
    free(v21);
  if (v61)
    free(v61);
  if (v60)
    free(v60);
  if (v20)
    free(v20);
  _Block_object_dispose(&v69, 8);
  return RenderDimensions;
}

void sub_192FBD0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  _Block_object_dispose(&a41, 8);
  _Unwind_Resume(a1);
}

uint64_t mvc_SetOutputCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  NSObject *v6;
  uint64_t v7;
  _QWORD v9[8];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = *(NSObject **)(DerivedStorage + 40);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __mvc_SetOutputCallback_block_invoke;
  v9[3] = &unk_1E2F991F0;
  v9[6] = a2;
  v9[7] = a3;
  v9[4] = &v10;
  v9[5] = DerivedStorage;
  dispatch_sync(v6, v9);
  v7 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v7;
}

void sub_192FBD190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t mvc_DoesRequireDifferentSourcePixelBufferAttributesForMultiSource()
{
  return 1;
}

uint64_t mvc_CopySourcePixelBufferAttributesForMultiSource(uint64_t a1, CFMutableDictionaryRef *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)"ARGBAhGRAfGRv024f024ARGByuv2 ";
  v4 = 1380410945;
  return FigVideoCompositorCreateDesiredSourcePixelBufferAttributes((uint64_t)&v3, 3, a2);
}

uint64_t FigVirtualDisplaySessionServerStart()
{
  uint64_t result;

  result = FVDUtilsSessionServerEnabled();
  if ((_DWORD)result)
  {
    FigVirtualDisplayScreenRecordingPostState();
    return FigXPCServerStart();
  }
  return result;
}

uint64_t fvdss_handleClientMessage()
{
  uint64_t OpCode;
  NSObject *v1;
  uint64_t v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
  {
    v2 = OpCode;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    v1 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294955226;
  }
  return v2;
}

uint64_t fvdss_verifyConnection(_xpc_connection_s *a1)
{
  uint64_t HasEntitlement;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  xpc_connection_get_pid(a1);
  HasEntitlement = FigXPCConnectionHasEntitlement();
  if (!(_DWORD)HasEntitlement)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return HasEntitlement;
}

void fvdss_releaseSession(const void *a1)
{
  void (*v2)(const void *);

  if (a1)
  {
    v2 = *(void (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v2)
      v2(a1);
    CFRelease(a1);
  }
}

void conduitDestroyContext(xpc_object_t *a1)
{
  if (a1)
  {
    xpc_release(*a1);
    free(a1);
  }
}

uint64_t conduitPushFrame(xpc_connection_t *a1, CMSampleBufferRef sbuf, int a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  __CVBuffer *ImageBuffer;
  __CVBuffer *v23;
  IOSurfaceRef IOSurface;
  __IOSurface *v25;
  xpc_object_t XPCObject;
  CFDictionaryRef v27;
  CFDictionaryRef v28;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v31;
  NSObject *v32;
  NSObject *v33;
  _BYTE bytes[32];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  xpc_object_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v41 = 0;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  memset(bytes, 0, sizeof(bytes));
  if (!sbuf)
    goto LABEL_15;
  ImageBuffer = CMSampleBufferGetImageBuffer(sbuf);
  if (!ImageBuffer)
    goto LABEL_16;
  v23 = ImageBuffer;
  IOSurface = CVPixelBufferGetIOSurface(ImageBuffer);
  if (!IOSurface)
    goto LABEL_16;
  v25 = IOSurface;
  if (FigXPCCreateBasicMessage())
  {
LABEL_15:
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_18:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_11;
  }
  XPCObject = IOSurfaceCreateXPCObject(v25);
  if (!XPCObject)
  {
LABEL_16:
    v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
    goto LABEL_18;
  }
  xpc_dictionary_set_value(v41, "FrameSurface", XPCObject);
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  memset(bytes, 0, sizeof(bytes));
  CMSampleBufferGetPresentationTimeStamp((CMTime *)bytes, sbuf);
  *(double *)&bytes[24] = a4;
  *(double *)&v35 = a5;
  *((double *)&v35 + 1) = a6;
  *(double *)&v36 = a7;
  *((double *)&v36 + 1) = a8;
  *(double *)&v37 = a9;
  *((double *)&v37 + 1) = a10;
  *(double *)&v38 = a11;
  DWORD2(v40) = a3;
  HIDWORD(v40) = CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0CED620], 0) == (CFTypeRef)*MEMORY[0x1E0C9AE50];
  CVPixelBufferGetExtendedPixels(v23, (size_t *)&v38 + 1, (size_t *)&v39, (size_t *)&v39 + 1, (size_t *)&v40);
  xpc_dictionary_set_data(v41, "FrameData", bytes, 0x80uLL);
  v27 = CVBufferCopyAttachments(v23, kCVAttachmentMode_ShouldPropagate);
  if (v27)
  {
    v28 = v27;
    if (FigXPCMessageSetCFDictionary())
    {
      v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    else
    {
      xpc_connection_send_message(*a1, v41);
    }
    CFRelease(v28);
  }
  else
  {
    xpc_connection_send_message(*a1, v41);
  }
LABEL_11:
  FigXPCRelease();
  return FigXPCRelease();
}

uint64_t conduitClearScreen(xpc_connection_t *a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (FigXPCCreateBasicMessage())
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    xpc_connection_send_message(*a1, 0);
  }
  return FigXPCRelease();
}

void __fvdss_handleStart_block_invoke(uint64_t a1, int a2)
{
  _xpc_connection_s *v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v4 = *(_xpc_connection_s **)(a1 + 32);
  if (FigXPCCreateBasicMessage())
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    xpc_dictionary_set_int64(0, "StartStatus", a2);
    xpc_connection_send_message(v4, 0);
  }
  FigXPCRelease();
  xpc_release(*(xpc_object_t *)(a1 + 32));
}

uint64_t FigTTMLDocumentWriterCreateRubySpanBuilder(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *DerivedStorage;

  if (!a2 || !a3)
    return FigSignalErrorAt();
  FigTTMLDocumentWriterGetClassID();
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    FigTTMLDocumentWriterGetCMBaseObject(0);
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    *DerivedStorage = CFRetain(a2);
    *a3 = 0;
  }
  return v5;
}

uint64_t figTTMLDocumentWriterRubySpanBuilder_Invalidate()
{
  return 0;
}

void figTTMLDocumentWriterRubySpanBuilder_Finalize(uint64_t a1)
{
  const void *v1;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  v1 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v1)
    CFRelease(v1);
}

CFStringRef figTTMLDocumentWriterRubySpanBuilder_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("figTTMLDocumentWriterRubySpanBuilder[%p]"), a1);
}

uint64_t figTTMLDocumentWriterRubySpanBuilder_StartElement(uint64_t a1, uint64_t a2)
{
  uint64_t *DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return FigTTMLDocumentWriterStartElement(*DerivedStorage, a2);
}

uint64_t figTTMLDocumentWriterRubySpanBuilder_EndElement(uint64_t a1)
{
  uint64_t *DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return FigTTMLDocumentWriterEndElement(*DerivedStorage);
}

uint64_t figTTMLDocumentWriterRubySpanBuilder_AddCaptionData(uint64_t a1, uint64_t a2)
{
  uint64_t *DerivedStorage;
  uint64_t (*v4)(uint64_t);
  const __CFString *v5;
  CFIndex Length;
  CFIndex v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef *, uint64_t *);
  uint64_t started;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t CMBaseObject;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  uint64_t v18;
  const void *InitialValue;
  int v20;
  uint64_t *v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  uint64_t v27;
  CFTypeRef v28;
  const void *v29;
  int v30;
  uint64_t *v31;
  int v32;
  CFTypeRef v34;
  CFTypeRef v35;
  CFTypeRef v36;
  CFTypeRef v37;
  CFTypeRef v38;
  uint64_t v39;
  CFTypeRef cf2;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  CFTypeRef v44;
  CFTypeRef v45;
  CFTypeRef v46;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v4)
    v5 = (const __CFString *)v4(a2);
  else
    v5 = &stru_1E2FD85F8;
  Length = CFStringGetLength(v5);
  v44 = 0;
  v45 = 0;
  if (!Length)
    return 0;
  v7 = Length;
  v8 = 0;
  v9 = *MEMORY[0x1E0CA35E0];
  v10 = *MEMORY[0x1E0C9AE00];
  v41 = *MEMORY[0x1E0CA3348];
  cf2 = (CFTypeRef)*MEMORY[0x1E0CA3520];
  v37 = (CFTypeRef)*MEMORY[0x1E0CA34F8];
  v35 = (CFTypeRef)*MEMORY[0x1E0CA3508];
  v34 = (CFTypeRef)*MEMORY[0x1E0CA3500];
  v39 = *MEMORY[0x1E0CA3350];
  v38 = (CFTypeRef)*MEMORY[0x1E0CA3530];
  v36 = (CFTypeRef)*MEMORY[0x1E0CA3528];
  while (1)
  {
    v42 = 0;
    v43 = 0;
    if (v45)
    {
      CFRelease(v45);
      v45 = 0;
    }
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                               + 24);
    if (!v11)
    {
      v27 = 4294954514;
      goto LABEL_56;
    }
    started = v11(a2, v8, v9, v10, &v45, &v42);
    if ((_DWORD)started)
      break;
    if (v44)
    {
      CFRelease(v44);
      v44 = 0;
    }
    started = FigCaptionDataCopySubrange();
    if ((_DWORD)started)
      break;
    v14 = (uint64_t)v44;
    v13 = (uint64_t)v45;
    v15 = *DerivedStorage;
    if (!v45)
    {
      v27 = FigTTMLDocumentWriterAddCaptionData(*DerivedStorage, (uint64_t)v44);
      goto LABEL_51;
    }
    started = FigTTMLDocumentWriterStartElement(*DerivedStorage, 5);
    if ((_DWORD)started)
      break;
    started = FigTTMLDocumentWriterSetAttribute(v15, (uint64_t)CFSTR("http://namespace.itunes.apple.com/itt/ttml-extension#ruby kind"), (uint64_t)CFSTR("ruby"));
    if ((_DWORD)started)
      break;
    v46 = 0;
    CMBaseObject = FigCaptionDataGetCMBaseObject();
    v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
    if (!v17)
    {
LABEL_35:
      v27 = 4294954514;
      goto LABEL_36;
    }
    v18 = v17(CMBaseObject, v41, v10, &v46);
    if ((_DWORD)v18)
      goto LABEL_34;
    if (v46)
    {
      InitialValue = (const void *)FigCaptionDynamicStyleGetInitialValue();
      v20 = CFEqual(InitialValue, cf2);
      v21 = (uint64_t *)&kFigTTML_AttributeValue_ry_align_start;
      if (!v20)
      {
        v22 = CFEqual(InitialValue, v37);
        v21 = (uint64_t *)&kFigTTML_AttributeValue_ry_align_center;
        if (!v22)
        {
          v23 = CFEqual(InitialValue, v35);
          v21 = (uint64_t *)&kFigTTML_AttributeValue_ry_align_spaceBetween;
          if (!v23)
          {
            v24 = CFEqual(InitialValue, v34);
            v21 = (uint64_t *)&kFigTTML_AttributeValue_ry_align_spaceAround;
            if (!v24)
              goto LABEL_53;
          }
        }
      }
      if (!*v21)
        goto LABEL_53;
      v18 = FigTTMLDocumentWriterSetAttribute(v15, (uint64_t)CFSTR("http://namespace.itunes.apple.com/itt/ttml-extension#ruby align"), *v21);
      if ((_DWORD)v18)
        goto LABEL_34;
      if (v46)
      {
        CFRelease(v46);
        v46 = 0;
      }
    }
    v25 = FigCaptionDataGetCMBaseObject();
    v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
    if (!v26)
      goto LABEL_35;
    v27 = v26(v25, v39, v10, &v46);
    v28 = v46;
    if ((_DWORD)v27 || !v46)
      goto LABEL_37;
    v29 = (const void *)FigCaptionDynamicStyleGetInitialValue();
    v30 = CFEqual(v29, v38);
    v31 = (uint64_t *)&kFigTTML_AttributeValue_ry_position_before;
    if (!v30 && (v32 = CFEqual(v29, v36), v31 = (uint64_t *)&kFigTTML_AttributeValue_ry_position_after, !v32) || !*v31)
    {
LABEL_53:
      v18 = FigSignalErrorAt();
      goto LABEL_34;
    }
    v18 = FigTTMLDocumentWriterSetAttribute(v15, (uint64_t)CFSTR("http://namespace.itunes.apple.com/itt/ttml-extension#ruby position"), *v31);
LABEL_34:
    v27 = v18;
LABEL_36:
    v28 = v46;
LABEL_37:
    if (v28)
      CFRelease(v28);
    if ((_DWORD)v27)
      goto LABEL_56;
    started = FigTTMLDocumentWriterStartElement(v15, 5);
    if ((_DWORD)started)
      break;
    started = FigTTMLDocumentWriterSetAttribute(v15, (uint64_t)CFSTR("http://namespace.itunes.apple.com/itt/ttml-extension#ruby kind"), (uint64_t)CFSTR("rb"));
    if ((_DWORD)started)
      break;
    started = FigTTMLDocumentWriterAddCaptionData(v15, v14);
    if ((_DWORD)started)
      break;
    started = FigTTMLDocumentWriterEndElement(v15);
    if ((_DWORD)started)
      break;
    started = FigTTMLDocumentWriterStartElement(v15, 5);
    if ((_DWORD)started)
      break;
    started = FigTTMLDocumentWriterSetAttribute(v15, (uint64_t)CFSTR("http://namespace.itunes.apple.com/itt/ttml-extension#ruby kind"), (uint64_t)CFSTR("rt"));
    if ((_DWORD)started)
      break;
    started = FigTTMLDocumentWriterAddCaptionData(v15, v13);
    if ((_DWORD)started)
      break;
    started = FigTTMLDocumentWriterEndElement(v15);
    if ((_DWORD)started)
      break;
    v27 = FigTTMLDocumentWriterEndElement(v15);
    if ((_DWORD)v27)
      goto LABEL_56;
LABEL_51:
    v8 = v43 + v42;
    if (v43 + v42 == v7)
      goto LABEL_56;
  }
  v27 = started;
LABEL_56:
  if (v44)
    CFRelease(v44);
  if (v45)
    CFRelease(v45);
  return v27;
}

uint64_t figTTMLDocumentWriterRubySpanBuilder_SetAttribute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return FigTTMLDocumentWriterSetAttribute(*DerivedStorage, a2, a3);
}

uint64_t figTTMLDocumentWriterRubySpanBuilder_Flush(uint64_t a1)
{
  uint64_t *DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return FigTTMLDocumentWriterFlush(*DerivedStorage);
}

uint64_t FigAlternateExpanderGetClassID()
{
  MEMORY[0x19402F294](&FigAlternateExpanderGetClassID_sRegisterFigAlternateExpanderTypeOnce, RegisterFigAlternateExpanderType);
  return sFigAlternateExpanderClassID;
}

uint64_t RegisterFigAlternateExpanderType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigAlternateExpanderGetTypeID()
{
  MEMORY[0x19402F294](&FigAlternateExpanderGetClassID_sRegisterFigAlternateExpanderTypeOnce, RegisterFigAlternateExpanderType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigAlternatePathwayCloningExpanderCreate(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *DerivedStorage;
  CFTypeRef v7;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  MEMORY[0x19402F294](&FigAlternateExpanderGetClassID_sRegisterFigAlternateExpanderTypeOnce, RegisterFigAlternateExpanderType);
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    if (a2)
      v7 = CFRetain(a2);
    else
      v7 = 0;
    *DerivedStorage = v7;
    *a3 = 0;
  }
  return v5;
}

CFStringRef FigAlternateExpanderCopyFormattingDesc(uint64_t a1)
{
  const __CFAllocator *v2;
  uint64_t (*v3)(uint64_t);
  const __CFString *v4;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v3)
    v4 = (const __CFString *)v3(a1);
  else
    v4 = &stru_1E2FD85F8;
  return CFStringCreateWithFormat(v2, 0, CFSTR("[FigAlternateExpander <%@:%p>]"), v4, a1);
}

uint64_t fapce_equal()
{
  CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  return FigCFEqual();
}

void fapce_finalize()
{
  CFTypeRef *DerivedStorage;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    *DerivedStorage = 0;
  }
}

CFStringRef fapce_copyDebugDescription(uint64_t a1)
{
  const __CFAllocator *v2;
  uint64_t BaseID;
  uint64_t ID;

  CMBaseObjectGetDerivedStorage();
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  BaseID = FigPathwayCloneGetBaseID();
  ID = FigPathwayCloneGetID();
  return CFStringCreateWithFormat(v2, 0, CFSTR("[FigAlternateExpander <%@,%p>, basePathwayID %@, newPathwayID %@]"), CFSTR("PathwayCloningExpander"), a1, BaseID, ID);
}

const __CFString *fapce_getName()
{
  return CFSTR("PathwayCloningExpander");
}

const __CFArray *fapce_apply(uint64_t a1, const __CFArray *a2, __CFArray **a3)
{
  uint64_t DerivedStorage;
  uint64_t *v6;
  const __CFAllocator *v7;
  CFMutableArrayRef Mutable;
  __CFArray *v9;
  __CFArray *v10;
  CFIndex v11;
  const void *ValueAtIndex;
  CFIndex v13;
  CFIndex i;
  const void *v15;
  uint64_t v16;
  uint64_t v18;
  CFTypeRef cf;
  void *value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  value = 0;
  if (a2)
  {
    if (!a3
      || (v6 = (uint64_t *)DerivedStorage,
          v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00],
          (Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378])) == 0))
    {
      a2 = (const __CFArray *)FigSignalErrorAt();
      goto LABEL_23;
    }
    v9 = Mutable;
    FigPathwayCloneGetBaseID();
    CMBaseObjectGetDerivedStorage();
    v10 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E0C9B378]);
    if (v10)
    {
      if (CFArrayGetCount(a2) >= 1)
      {
        v11 = 0;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(a2, v11);
          FigPathwayCloneGetBaseID();
          FigAlternateGetPathwayID((uint64_t)ValueAtIndex);
          if (FigCFEqual())
            CFArrayAppendValue(v10, ValueAtIndex);
          ++v11;
        }
        while (v11 < CFArrayGetCount(a2));
      }
      goto LABEL_10;
    }
    v18 = FigSignalErrorAt();
    if (!(_DWORD)v18)
    {
LABEL_10:
      v13 = 0;
      if (!v10)
        goto LABEL_12;
LABEL_11:
      for (i = CFArrayGetCount(v10); v13 < i; i = 0)
      {
        v15 = CFArrayGetValueAtIndex(v10, v13);
        v16 = FigSteeringCloneAlternateWithPathwayClone(*v6, (uint64_t)v15, (CFMutableDictionaryRef *)&cf, &value);
        if ((_DWORD)v16)
        {
          a2 = (const __CFArray *)v16;
          if (!v10)
          {
LABEL_21:
            if (v9)
              goto LABEL_22;
            goto LABEL_23;
          }
LABEL_20:
          CFRelease(v10);
          goto LABEL_21;
        }
        CFArrayAppendValue(v9, value);
        if (value)
        {
          CFRelease(value);
          value = 0;
        }
        ++v13;
        if (v10)
          goto LABEL_11;
LABEL_12:
        ;
      }
      a2 = 0;
      *a3 = v9;
      v9 = 0;
      if (!v10)
        goto LABEL_21;
      goto LABEL_20;
    }
    a2 = (const __CFArray *)v18;
LABEL_22:
    CFRelease(v9);
LABEL_23:
    if (value)
      CFRelease(value);
    if (cf)
      CFRelease(cf);
  }
  return a2;
}

uint64_t FigDataChannelResourceRemoteGetObjectID(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;

  if (!a1)
    return FigSignalErrorAt();
  if (!a2)
    return FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 4))
    return FigSignalErrorAt();
  *a2 = *(_QWORD *)(DerivedStorage + 8);
  return 0;
}

uint64_t FigDataChannelResourceRemoteHandleDeadConnection(uint64_t result)
{
  if (result)
  {
    result = CMBaseObjectGetDerivedStorage();
    *(_BYTE *)(result + 4) = 1;
  }
  return result;
}

uint64_t FigDataChannelResourceRemoteCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t DerivedStorage;
  uint64_t v9;

  if (!a4 || !a5)
    return FigSignalErrorAt();
  FigDataChannelResourceGetClassID();
  v7 = CMDerivedObjectCreate();
  if (!(_DWORD)v7)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_DWORD *)DerivedStorage = 0;
    *(_BYTE *)(DerivedStorage + 4) = 0;
    v9 = FigCFWeakReferenceHolderCreateWithReferencedObject();
    *(_QWORD *)(DerivedStorage + 8) = a3;
    *(_QWORD *)(DerivedStorage + 16) = v9;
    *a5 = 0;
  }
  return v7;
}

BOOL dataChannelResourceRemote_equal()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return *(_QWORD *)(DerivedStorage + 8) == *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
}

void dataChannelResourceRemote_finalize()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = DerivedStorage;
  if (DerivedStorage)
  {
    if (*(_QWORD *)(DerivedStorage + 16))
    {
      v2 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v2)
      {
        v3 = (const void *)v2;
        FigVideoReceiverRemoteDisassociateAndDisposeObjectID();
        CFRelease(v3);
      }
    }
  }
  v4 = *(const void **)(v1 + 16);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(v1 + 16) = 0;
  }
}

CFStringRef dataChannelResourceRemote_copyDebugDesc(uint64_t a1)
{
  unsigned int *DerivedStorage;
  const __CFAllocator *v3;

  DerivedStorage = (unsigned int *)CMBaseObjectGetDerivedStorage();
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (DerivedStorage)
    return CFStringCreateWithFormat(v3, 0, CFSTR("[DataChannelResourceRemote %p]: resourceID: %d objectID: %016llx"), a1, *DerivedStorage, *((_QWORD *)DerivedStorage + 1));
  else
    return CFStringCreateWithFormat(v3, 0, CFSTR("[DataChannelResourceRemote %p]"), a1);
}

uint64_t dataChannelResourceRemote_ProvidePayload(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  uint64_t (*v8)(const void *, uint64_t, uint64_t);
  uint64_t v9;

  if (!a1)
    return FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 4))
    return FigSignalErrorAt();
  v4 = DerivedStorage;
  v5 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v5)
    return FigSignalErrorAt();
  v6 = (const void *)v5;
  v7 = *(_QWORD *)(v4 + 8);
  v8 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 112);
  if (v8)
    v9 = v8(v6, v7, a2);
  else
    v9 = 4294954514;
  CFRelease(v6);
  return v9;
}

uint64_t dataChannelResourceRemote_SetFailedToLoad(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  uint64_t (*v6)(const void *, uint64_t, uint64_t);
  uint64_t v7;

  if (!a1)
    return FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 4))
    return FigSignalErrorAt();
  v2 = DerivedStorage;
  v3 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v3)
    return FigSignalErrorAt();
  v4 = (const void *)v3;
  v5 = *(_QWORD *)(v2 + 8);
  v6 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
  if (v6)
    v7 = v6(v4, v5, 2);
  else
    v7 = 4294954514;
  CFRelease(v4);
  return v7;
}

uint64_t dataChannelResourceRemote_SetCancelled(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  uint64_t (*v6)(const void *, uint64_t, uint64_t);
  uint64_t v7;

  if (!a1)
    return FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 4))
    return FigSignalErrorAt();
  v2 = DerivedStorage;
  v3 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v3)
    return FigSignalErrorAt();
  v4 = (const void *)v3;
  v5 = *(_QWORD *)(v2 + 8);
  v6 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
  if (v6)
    v7 = v6(v4, v5, 3);
  else
    v7 = 4294954514;
  CFRelease(v4);
  return v7;
}

uint64_t dataChannelResourceRemote_GetProcessingState(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  void (*v6)(const void *, uint64_t, unsigned int *);
  unsigned int v8;

  v8 = 0;
  if (a1
    && (DerivedStorage = CMBaseObjectGetDerivedStorage(), !*(_BYTE *)(DerivedStorage + 4))
    && (v2 = DerivedStorage, (v3 = FigCFWeakReferenceHolderCopyReferencedObject()) != 0))
  {
    v4 = (const void *)v3;
    v5 = *(_QWORD *)(v2 + 8);
    v6 = *(void (**)(const void *, uint64_t, unsigned int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 152);
    if (v6)
      v6(v4, v5, &v8);
    CFRelease(v4);
    return v8;
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
}

void FigCoreTelephonyMonitorCallbackEntryFree(_QWORD *a1)
{
  const void *v2;
  NSObject *v3;

  if (a1)
  {
    v2 = (const void *)a1[2];
    if (v2)
      CFRelease(v2);
    v3 = a1[4];
    if (v3)
      dispatch_release(v3);
    free(a1);
  }
}

void FigCoreTelephonyMonitorCallbackEntryDoCallback(uint64_t a1, char a2)
{
  __int128 v4;
  const void *v5;
  NSObject *v6;
  __int128 v7;
  _QWORD block[4];
  __int128 v9;
  char v10;

  v4 = *(_OWORD *)(a1 + 16);
  v5 = *(const void **)(a1 + 16);
  if (v5)
  {
    v7 = v4;
    CFRetain(v5);
    v4 = v7;
  }
  v6 = *(NSObject **)(a1 + 32);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __FigCoreTelephonyMonitorCallbackEntryDoCallback_block_invoke;
  block[3] = &__block_descriptor_49_e5_v8__0l;
  v9 = v4;
  v10 = a2;
  dispatch_async(v6, block);
}

uint64_t FigNetworkCostMonitorCreate(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (figNetworkCostMonitorGlobalInitOnce_sFigNetworkCostMonitorInitOnce != -1)
      dispatch_once(&figNetworkCostMonitorGlobalInitOnce_sFigNetworkCostMonitorInitOnce, &__block_literal_global_165);
    if (sFigNetworkCostMonitorQueue && sFigNetworkCostMonitorBag)
    {
      if (FigNetworkCostMonitorGetClassID_sRegisterFigNetworkCostMonitorTypeOnce != -1)
        dispatch_once(&FigNetworkCostMonitorGetClassID_sRegisterFigNetworkCostMonitorTypeOnce, &__block_literal_global_172);
      CMDerivedObjectCreate();
    }
  }
  return FigSignalErrorAt();
}

void figNetworkCostCTCallback(void *a1, char a2)
{
  *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 18) = a2;
  figNetworkCostUpdateHighSpeedHighPowerAndCheckForChanges(a1);
}

uint64_t initValkCTConnectionInvalidatedNotification()
{
  uint64_t *v0;
  uint64_t result;

  if (CoreTelephonyLibrary_sOnce != -1)
    dispatch_once(&CoreTelephonyLibrary_sOnce, &__block_literal_global_158_0);
  v0 = (uint64_t *)dlsym((void *)CoreTelephonyLibrary_sLib, "kCTConnectionInvalidatedNotification");
  if (v0)
  {
    result = *v0;
    constantValkCTConnectionInvalidatedNotification = result;
  }
  else
  {
    result = constantValkCTConnectionInvalidatedNotification;
  }
  getkCTConnectionInvalidatedNotification[0] = kCTConnectionInvalidatedNotificationFunction;
  return result;
}

uint64_t kCTConnectionInvalidatedNotificationFunction()
{
  return constantValkCTConnectionInvalidatedNotification;
}

uint64_t init_CTServerConnectionCreateOnTargetQueue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (CoreTelephonyLibrary_sOnce != -1)
    dispatch_once(&CoreTelephonyLibrary_sOnce, &__block_literal_global_158_0);
  softLink_CTServerConnectionCreateOnTargetQueue[0] = (uint64_t (*)())dlsym((void *)CoreTelephonyLibrary_sLib, "_CTServerConnectionCreateOnTargetQueue");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLink_CTServerConnectionCreateOnTargetQueue[0])(a1, a2, a3, a4);
}

Class initCoreTelephonyClient()
{
  Class result;

  if (CoreTelephonyLibrary_sOnce != -1)
    dispatch_once(&CoreTelephonyLibrary_sOnce, &__block_literal_global_158_0);
  result = objc_getClass("CoreTelephonyClient");
  classCoreTelephonyClient = (uint64_t)result;
  getCoreTelephonyClientClass[0] = CoreTelephonyClientFunction;
  return result;
}

uint64_t CoreTelephonyClientFunction()
{
  return classCoreTelephonyClient;
}

uint64_t init_CTServerConnectionRegisterForNotification(uint64_t a1, uint64_t a2)
{
  if (CoreTelephonyLibrary_sOnce != -1)
    dispatch_once(&CoreTelephonyLibrary_sOnce, &__block_literal_global_158_0);
  softLink_CTServerConnectionRegisterForNotification[0] = (uint64_t (*)())dlsym((void *)CoreTelephonyLibrary_sLib, "_CTServerConnectionRegisterForNotification");
  return ((uint64_t (*)(uint64_t, uint64_t))softLink_CTServerConnectionRegisterForNotification[0])(a1, a2);
}

uint64_t init_CTServerConnectionUnregisterForAllNotifications(uint64_t a1)
{
  if (CoreTelephonyLibrary_sOnce != -1)
    dispatch_once(&CoreTelephonyLibrary_sOnce, &__block_literal_global_158_0);
  softLink_CTServerConnectionUnregisterForAllNotifications = (uint64_t (*)())dlsym((void *)CoreTelephonyLibrary_sLib, "_CTServerConnectionUnregisterForAllNotifications");
  return ((uint64_t (*)(uint64_t))softLink_CTServerConnectionUnregisterForAllNotifications)(a1);
}

CFMutableBagRef __figNetworkCostMonitorGlobalInitOnce_block_invoke()
{
  CFMutableBagRef result;

  sFigNetworkCostMonitorQueue = FigDispatchQueueCreateWithPriority();
  result = CFBagCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B388]);
  sFigNetworkCostMonitorBag = (uint64_t)result;
  return result;
}

void FigNetworkCostMonitorFinalize(uint64_t a1)
{
  uint64_t *DerivedStorage;
  void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  uint64_t v7;
  _QWORD block[5];

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v3 = (void *)MEMORY[0x19403137C]();
  -[FigCoreTelephonyServiceConnection deregisterListener:](+[FigCoreTelephonyServiceConnection sharedInstance](FigCoreTelephonyServiceConnection, "sharedInstance"), "deregisterListener:", a1);
  objc_autoreleasePoolPop(v3);
  v4 = (const void *)DerivedStorage[3];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[3] = 0;
  }
  v5 = (const void *)DerivedStorage[1];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[1] = 0;
  }
  v6 = (const void *)DerivedStorage[5];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[5] = 0;
  }
  v7 = *DerivedStorage;
  if (*DerivedStorage)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __FigNetworkCostMonitorFinalize_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = v7;
    dispatch_async((dispatch_queue_t)sFigNetworkCostMonitorQueue, block);
  }
}

uint64_t figNetworkCostCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  _QWORD v9[8];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  if (a1 && a4)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __figNetworkCostCopyProperty_block_invoke;
    v9[3] = &unk_1E2F991F0;
    v9[6] = a4;
    v9[7] = DerivedStorage;
    v9[4] = &v10;
    v9[5] = a2;
    dispatch_sync((dispatch_queue_t)sFigNetworkCostMonitorQueue, v9);
    v7 = *((unsigned int *)v11 + 6);
  }
  else
  {
    v7 = FigSignalErrorAt();
    *((_DWORD *)v11 + 6) = v7;
  }
  _Block_object_dispose(&v10, 8);
  return v7;
}

void sub_192FC1F5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t figNetworkCostSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  _QWORD block[9];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __figNetworkCostSetProperty_block_invoke;
  block[3] = &unk_1E2F9A0C0;
  block[6] = a3;
  block[7] = DerivedStorage;
  block[8] = a1;
  block[4] = &v10;
  block[5] = a2;
  dispatch_sync((dispatch_queue_t)sFigNetworkCostMonitorQueue, block);
  v7 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v7;
}

void sub_192FC2028(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void __figNetworkCostMonitorUpdateGlobalEstimatedMaximumDemand_block_invoke()
{
  CFTypeRef cf;
  uint64_t v1;

  cf = 0;
  v1 = 0;
  CFBagApplyFunction((CFBagRef)sFigNetworkCostMonitorBag, (CFBagApplierFunction)figNetworkCostMonitorUpdateGlobalEstimatedMaximumDemandApplierFunc, &cf);
  if (v1 != sFigNetworkCostMonitorGlobalEstimatedMaximumDemand)
  {
    sFigNetworkCostMonitorGlobalEstimatedMaximumDemand = v1;
    FigNetworkInterfaceReporterReportEstimatedMaximumDemand(cf, v1);
  }
  if (cf)
    CFRelease(cf);
}

void figNetworkCostMonitorUpdateGlobalEstimatedMaximumDemandApplierFunc(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  uint64_t DerivedStorage;
  uint64_t v6;
  const void *v7;
  const void *v8;

  v3 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3)
  {
    v4 = (const void *)v3;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (*(_QWORD *)(DerivedStorage + 48) >= *(_QWORD *)(a2 + 8))
    {
      v6 = DerivedStorage;
      v7 = *(const void **)a2;
      v8 = *(const void **)(DerivedStorage + 40);
      *(_QWORD *)a2 = v8;
      if (v8)
        CFRetain(v8);
      if (v7)
        CFRelease(v7);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(v6 + 48);
    }
    CFRelease(v4);
  }
}

uint64_t __figNetworkCostCopyProperty_block_invoke(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int v4;
  _QWORD *v5;

  result = CFEqual(*(CFTypeRef *)(a1 + 40), CFSTR("FNCM_HighSpeedHighPower"));
  if ((_DWORD)result)
  {
    v3 = *(_QWORD **)(a1 + 48);
    v4 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 56) + 16);
  }
  else
  {
    result = CFEqual(*(CFTypeRef *)(a1 + 40), CFSTR("FNCM_Expensive"));
    if (!(_DWORD)result)
    {
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = -12784;
      return result;
    }
    v3 = *(_QWORD **)(a1 + 48);
    v4 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 56) + 17);
  }
  if (v4)
    v5 = (_QWORD *)MEMORY[0x1E0C9AE50];
  else
    v5 = (_QWORD *)MEMORY[0x1E0C9AE40];
  *v3 = *v5;
  return result;
}

void __figNetworkCostSetProperty_block_invoke(uint64_t a1)
{
  const void *v2;
  CFTypeID v3;
  int UInt64;
  uint64_t v5;
  const void *v6;
  uint64_t DerivedStorage;
  uint64_t v8;
  const void *v9;
  CFTypeID v10;
  int Value;
  const void *v12;
  CFTypeID v13;
  const void *v14;
  uint64_t v15;
  const void *v16;
  const void *v17;
  CFTypeID v18;
  const void *v19;
  CFTypeID v20;
  int v21;
  uint64_t v22;
  const void *v23;
  CFTypeID v24;
  const void *v25;
  CFTypeID v26;
  const void *v27;
  CFTypeID v28;
  const void *v29;
  CFTypeID v30;
  _QWORD v31[6];

  if (!CFEqual(*(CFTypeRef *)(a1 + 40), CFSTR("FNCM_ConnectedPhysicalInterface")))
  {
    if (CFEqual(*(CFTypeRef *)(a1 + 40), CFSTR("FNCM_ConnectionExpensive")))
    {
      v9 = *(const void **)(a1 + 48);
      if (v9)
      {
        v10 = CFGetTypeID(v9);
        if (v10 == CFBooleanGetTypeID())
        {
          Value = CFBooleanGetValue(*(CFBooleanRef *)(a1 + 48));
          figNetworkCostUpdateConnectedInterfaceIsExpensive(*(void **)(a1 + 64), Value);
          return;
        }
      }
      goto LABEL_46;
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 40), CFSTR("FNCM_PlaybackSessionId")))
    {
      v12 = *(const void **)(a1 + 48);
      if (!v12)
        goto LABEL_46;
      v13 = CFGetTypeID(v12);
      if (v13 != CFStringGetTypeID())
        goto LABEL_46;
      v14 = *(const void **)(a1 + 48);
      v15 = *(_QWORD *)(a1 + 56);
      v16 = *(const void **)(v15 + 40);
      *(_QWORD *)(v15 + 40) = v14;
      if (v14)
        CFRetain(v14);
      if (v16)
        CFRelease(v16);
    }
    else if (CFEqual(*(CFTypeRef *)(a1 + 40), CFSTR("FNCM_MaximumMediaBitrate")))
    {
      v17 = *(const void **)(a1 + 48);
      if (!v17)
        goto LABEL_46;
      v18 = CFGetTypeID(v17);
      if (v18 != CFNumberGetTypeID())
        goto LABEL_46;
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 56) = FigCFNumberGetUInt64();
    }
    else if (CFEqual(*(CFTypeRef *)(a1 + 40), CFSTR("FNCM_BufferingInProgress")))
    {
      v19 = *(const void **)(a1 + 48);
      if (!v19)
        goto LABEL_46;
      v20 = CFGetTypeID(v19);
      if (v20 != CFBooleanGetTypeID())
        goto LABEL_46;
      v21 = CFBooleanGetValue(*(CFBooleanRef *)(a1 + 48));
      v22 = *(_QWORD *)(a1 + 56);
      if (*(unsigned __int8 *)(v22 + 64) == v21)
        return;
      *(_BYTE *)(v22 + 64) = v21;
    }
    else if (CFEqual(*(CFTypeRef *)(a1 + 40), CFSTR("FNCM_FullThrottleDutyCycleRequested")))
    {
      v23 = *(const void **)(a1 + 48);
      if (!v23)
        goto LABEL_46;
      v24 = CFGetTypeID(v23);
      if (v24 != CFBooleanGetTypeID())
        goto LABEL_46;
      *(_BYTE *)(*(_QWORD *)(a1 + 56) + 65) = CFBooleanGetValue(*(CFBooleanRef *)(a1 + 48));
    }
    else if (CFEqual(*(CFTypeRef *)(a1 + 40), CFSTR("FNCM_FullThrottleDutyCycleAllowable")))
    {
      v25 = *(const void **)(a1 + 48);
      if (!v25)
        goto LABEL_46;
      v26 = CFGetTypeID(v25);
      if (v26 != CFBooleanGetTypeID())
        goto LABEL_46;
      *(_BYTE *)(*(_QWORD *)(a1 + 56) + 66) = CFBooleanGetValue(*(CFBooleanRef *)(a1 + 48));
    }
    else
    {
      if (!CFEqual(*(CFTypeRef *)(a1 + 40), CFSTR("FNCM_ItemInactive")))
      {
        if (!CFEqual(*(CFTypeRef *)(a1 + 40), CFSTR("FNCM_DisableHighSpeedHighPowerBuffering")))
        {
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = -12784;
          return;
        }
        v29 = *(const void **)(a1 + 48);
        if (v29)
        {
          v30 = CFGetTypeID(v29);
          if (v30 == CFBooleanGetTypeID())
          {
            *(_BYTE *)(*(_QWORD *)(a1 + 56) + 33) = CFBooleanGetValue(*(CFBooleanRef *)(a1 + 48));
            figNetworkCostUpdateHighSpeedHighPowerAndCheckForChanges(*(void **)(a1 + 64));
            return;
          }
        }
        goto LABEL_46;
      }
      v27 = *(const void **)(a1 + 48);
      if (!v27 || (v28 = CFGetTypeID(v27), v28 != CFBooleanGetTypeID()))
      {
LABEL_46:
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = FigSignalErrorAt();
        return;
      }
      *(_BYTE *)(*(_QWORD *)(a1 + 56) + 67) = CFBooleanGetValue(*(CFBooleanRef *)(a1 + 48));
    }
    figNetworkCostMonitorUpdateEstimatedMaximumDemand();
    return;
  }
  v2 = *(const void **)(a1 + 48);
  if (!v2)
    goto LABEL_46;
  v3 = CFGetTypeID(v2);
  if (v3 != CFNumberGetTypeID())
    goto LABEL_46;
  UInt64 = FigCFNumberGetUInt64();
  v5 = *(_QWORD *)(a1 + 56);
  if (*(_DWORD *)(v5 + 20) != UInt64)
  {
    *(_DWORD *)(v5 + 20) = UInt64;
    v6 = *(const void **)(a1 + 64);
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!*(_QWORD *)(DerivedStorage + 24))
    {
      v8 = DerivedStorage;
      if (FigNetworkInterfaceIsLocal(*(_DWORD *)(DerivedStorage + 20)))
      {
        CFRetain(v6);
        v31[0] = MEMORY[0x1E0C809B0];
        v31[1] = 3221225472;
        v31[2] = __figNetworkCostEnsureNetworkPathEvaluatorIfNeededAsync_block_invoke;
        v31[3] = &__block_descriptor_48_e5_v8__0l;
        v31[4] = v8;
        v31[5] = v6;
        dispatch_async((dispatch_queue_t)sFigNetworkCostMonitorQueue, v31);
      }
    }
    figNetworkCostUpdateHighSpeedHighPowerAndCheckForChanges(*(void **)(a1 + 64));
  }
}

void figNetworkCostUpdateHighSpeedHighPowerAndCheckForChanges(void *a1)
{
  uint64_t DerivedStorage;
  int v3;
  BOOL v4;
  uint64_t v5;
  const __CFArray *v6;
  CFRange v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigNetworkInterfaceIsCellular(*(_DWORD *)(DerivedStorage + 20)))
    v3 = 1;
  else
    v3 = FigNetworkInterfaceIsLocal(*(_DWORD *)(DerivedStorage + 20)) && *(_BYTE *)(DerivedStorage + 32) != 0;
  if (*(_BYTE *)(DerivedStorage + 33))
    v4 = 1;
  else
    v4 = *(_BYTE *)(DerivedStorage + 18) == 0;
  if (v4)
    v3 = 0;
  if (*(unsigned __int8 *)(DerivedStorage + 16) != v3)
  {
    *(_BYTE *)(DerivedStorage + 16) = v3;
    v5 = CMBaseObjectGetDerivedStorage();
    v6 = *(const __CFArray **)(v5 + 8);
    if (v6)
      v7.length = CFArrayGetCount(*(CFArrayRef *)(v5 + 8));
    else
      v7.length = 0;
    v7.location = 0;
    CFArrayApplyFunction(v6, v7, (CFArrayApplierFunction)figNetworkCostMonitorDispatchHighSpeedHighPowerFn, a1);
  }
}

void figNetworkCostUpdateConnectedInterfaceIsExpensive(void *a1, int a2)
{
  uint64_t DerivedStorage;
  const __CFArray *v5;
  CFRange v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned __int8 *)(DerivedStorage + 17) != a2)
  {
    *(_BYTE *)(DerivedStorage + 17) = a2;
    v5 = *(const __CFArray **)(DerivedStorage + 8);
    if (v5)
      v6.length = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 8));
    else
      v6.length = 0;
    v6.location = 0;
    CFArrayApplyFunction(v5, v6, (CFArrayApplierFunction)figNetworkCostMonitorDispatchIsExpensiveFn, a1);
  }
}

void figNetworkCostMonitorUpdateEstimatedMaximumDemand()
{
  uint64_t DerivedStorage;
  uint64_t v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 40))
  {
    if (*(_BYTE *)(DerivedStorage + 67))
    {
      v1 = 0;
    }
    else if (*(_BYTE *)(DerivedStorage + 65) && *(_BYTE *)(DerivedStorage + 66))
    {
      v1 = 0x7FFFFFFFFFFFFFFFLL;
      if (!*(_BYTE *)(DerivedStorage + 64))
        v1 = 0;
    }
    else
    {
      v1 = *(_QWORD *)(DerivedStorage + 56);
    }
    if (v1 != *(_QWORD *)(DerivedStorage + 48))
    {
      *(_QWORD *)(DerivedStorage + 48) = v1;
      dispatch_async((dispatch_queue_t)sFigNetworkCostMonitorQueue, &__block_literal_global_167_0);
    }
  }
}

void __figNetworkCostEnsureNetworkPathEvaluatorIfNeededAsync_block_invoke(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  const void *v7;
  char DoesUseCellular;
  void *v9;
  int IsExpensive;
  const void *v11;

  v2 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(v2 + 24);
  v3 = (_QWORD *)(v2 + 24);
  if (!v4)
  {
    if (FigNWPathEvaluatorCreate(*MEMORY[0x1E0C9AE00], 0, 0, sFigNetworkCostMonitorQueue, *(_QWORD *)(a1 + 40), (uint64_t)figNetworkCostHandleNetworkPathEvaluatorUpdate, v3))
    {
      FigSignalErrorAt();
    }
    else
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
      v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v6)
        v7 = (const void *)v6(v5);
      else
        v7 = 0;
      DoesUseCellular = FigNetworkPathInformationDoesUseCellular();
      v9 = *(void **)(a1 + 40);
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 32) = DoesUseCellular;
      IsExpensive = FigNetworkPathInformationIsExpensive();
      figNetworkCostUpdateConnectedInterfaceIsExpensive(v9, IsExpensive);
      if (v7)
        CFRelease(v7);
    }
  }
  v11 = *(const void **)(a1 + 40);
  if (v11)
    CFRelease(v11);
}

void figNetworkCostHandleNetworkPathEvaluatorUpdate(void *a1)
{
  uint64_t DerivedStorage;

  if (a1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_BYTE *)(DerivedStorage + 32) = FigNetworkPathInformationDoesUseCellular();
    figNetworkCostUpdateHighSpeedHighPowerAndCheckForChanges(a1);
  }
}

void figNetworkCostMonitorDispatchHighSpeedHighPowerFn(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  char v5;
  CFTypeRef v6;
  NSObject *v7;
  _QWORD block[6];
  __int128 v9;
  char v10;
  __int128 v11;

  v11 = *(_OWORD *)(a1 + 8);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(a1 + 8))
  {
    v5 = *(_BYTE *)(DerivedStorage + 16);
    if (a2)
      CFRetain(a2);
    v6 = *(CFTypeRef *)a1;
    if (*(_QWORD *)a1)
      v6 = CFRetain(v6);
    v7 = *(NSObject **)(a1 + 24);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __figNetworkCostMonitorDispatchHighSpeedHighPowerFn_block_invoke;
    block[3] = &__block_descriptor_65_e5_v8__0l;
    v9 = v11;
    block[4] = v6;
    block[5] = a2;
    v10 = v5;
    dispatch_async(v7, block);
  }
}

void __figNetworkCostMonitorDispatchHighSpeedHighPowerFn_block_invoke(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v2)
    (*(void (**)(_QWORD, const void *, _QWORD))(a1 + 48))(*(_QWORD *)(a1 + 40), v2, *(unsigned __int8 *)(a1 + 64));
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
  if (v2)
    CFRelease(v2);
  v4 = *(const void **)(a1 + 32);
  if (v4)
    CFRelease(v4);
}

void figNetworkCostMonitorDispatchIsExpensiveFn(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  char v5;
  CFTypeRef v6;
  NSObject *v7;
  _QWORD block[6];
  __int128 v9;
  char v10;
  __int128 v11;

  v11 = *(_OWORD *)(a1 + 8);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(a1 + 16))
  {
    v5 = *(_BYTE *)(DerivedStorage + 17);
    if (a2)
      CFRetain(a2);
    v6 = *(CFTypeRef *)a1;
    if (*(_QWORD *)a1)
      v6 = CFRetain(v6);
    v7 = *(NSObject **)(a1 + 24);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __figNetworkCostMonitorDispatchIsExpensiveFn_block_invoke;
    block[3] = &__block_descriptor_65_e5_v8__0l;
    v9 = v11;
    block[4] = v6;
    block[5] = a2;
    v10 = v5;
    dispatch_async(v7, block);
  }
}

void __figNetworkCostMonitorDispatchIsExpensiveFn_block_invoke(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v2)
    (*(void (**)(_QWORD, const void *, _QWORD))(a1 + 56))(*(_QWORD *)(a1 + 40), v2, *(unsigned __int8 *)(a1 + 64));
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
  if (v2)
    CFRelease(v2);
  v4 = *(const void **)(a1 + 32);
  if (v4)
    CFRelease(v4);
}

uint64_t figNetworkCostMonitorSetDelegate(const void *a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v9;
  const __CFAllocator *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _OWORD *v14;
  char v16;
  uint64_t v17;
  _QWORD v19[9];
  char v20;
  uint64_t v21;
  uint64_t v22;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = CFGetAllocator(a1);
  v21 = 0;
  v22 = 0;
  if (a2)
  {
    v10 = v9;
    v11 = (char *)CFAllocatorAllocate(v9, 32, 0);
    if (v11)
    {
      v12 = v11;
      v13 = FigCFWeakReferenceHolderCreateWithReferencedObject();
      *(_QWORD *)v12 = v13;
      if (!v13)
      {
        v17 = FigSignalErrorAt();
        if ((_DWORD)v17)
          fscm_delegateEntryCFArrayReleaseCallBack(v10, (CFTypeRef *)v12);
        return v17;
      }
      v14 = v12 + 8;
      if (a3)
      {
        *v14 = *(_OWORD *)a3;
        if (v21 != *(_QWORD *)a3 || v22 != *(_QWORD *)(a3 + 8))
        {
          if (a4)
            dispatch_retain(a4);
          else
            a4 = FigDispatchQueueCreateWithPriority();
          v16 = 0;
          goto LABEL_16;
        }
        a4 = 0;
      }
      else
      {
        a4 = 0;
        *(_QWORD *)v14 = 0;
        *((_QWORD *)v12 + 2) = 0;
      }
      v16 = 1;
LABEL_16:
      *((_QWORD *)v12 + 3) = a4;
      if (a1)
        CFRetain(a1);
      if (v10)
        CFRetain(v10);
      v19[0] = MEMORY[0x1E0C809B0];
      v19[1] = 3221225472;
      v19[2] = __figNetworkCostMonitorSetDelegate_block_invoke;
      v19[3] = &__block_descriptor_73_e5_v8__0l;
      v19[4] = a1;
      v19[5] = a2;
      v20 = v16;
      v19[6] = DerivedStorage;
      v19[7] = v12;
      v19[8] = v10;
      dispatch_async((dispatch_queue_t)sFigNetworkCostMonitorQueue, v19);
      return 0;
    }
  }
  return FigSignalErrorAt();
}

void __figNetworkCostMonitorSetDelegate_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t DerivedStorage;
  CFIndex Count;
  unint64_t v5;
  uint64_t v6;
  const void *v7;
  BOOL v8;
  const void *v9;
  const void *v10;

  v2 = *(_QWORD *)(a1 + 40);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 8));
  if (Count >= 1)
  {
    v5 = Count + 1;
    do
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 8), v5 - 2);
      v6 = FigCFWeakReferenceHolderCopyReferencedObject();
      v7 = (const void *)v6;
      if (v6)
        v8 = v6 == v2;
      else
        v8 = 1;
      if (!v8 || (CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 8), v5 - 2), v7))
        CFRelease(v7);
      --v5;
    }
    while (v5 > 1);
  }
  if (!*(_BYTE *)(a1 + 72))
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(a1 + 48) + 8), *(const void **)(a1 + 56));
  figNetworkCostMonitorDispatchHighSpeedHighPowerFn(*(_QWORD *)(a1 + 56), *(const void **)(a1 + 32));
  if (*(_BYTE *)(a1 + 72))
    fscm_delegateEntryCFArrayReleaseCallBack(*(CFAllocatorRef *)(a1 + 64), *(CFTypeRef **)(a1 + 56));
  v9 = *(const void **)(a1 + 64);
  if (v9)
    CFRelease(v9);
  v10 = *(const void **)(a1 + 32);
  if (v10)
    CFRelease(v10);
}

void fscm_delegateEntryCFArrayReleaseCallBack(CFAllocatorRef allocator, CFTypeRef *ptr)
{
  NSObject *v4;

  if (*ptr)
  {
    CFRelease(*ptr);
    *ptr = 0;
  }
  v4 = ptr[3];
  if (v4)
  {
    dispatch_release(v4);
    ptr[3] = 0;
  }
  CFAllocatorDeallocate(allocator, ptr);
}

CFStringRef FigNetworkCostMonitorCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigNetworkCostMonitor %p]"), a1);
}

uint64_t FigFairPlayMapFairPlayErrorToCPEError(uint64_t result)
{
  if ((result + 49999) >> 6 <= 0x7C)
  {
    if ((int)result <= -42208)
    {
      if ((result + 42597) > 0xD || ((1 << (result + 101)) & 0x3F87) == 0)
        return 4294955130;
    }
    else
    {
      if ((result + 42207) < 8 || (result + 42105) < 6)
        return 4294955135;
      if ((result + 42005) >= 2)
        return 4294955130;
    }
  }
  return result;
}

uint64_t FigContentKeySessionStartServer()
{
  uint64_t v0;
  _QWORD block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v6 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __FigContentKeySessionStartServer_block_invoke;
  block[3] = &unk_1E2FB6880;
  block[4] = &v3;
  if (FigContentKeySessionStartServer_sFigContentKeySessionServerSetupOnce != -1)
    dispatch_once(&FigContentKeySessionStartServer_sFigContentKeySessionServerSetupOnce, block);
  v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t fcks_server_handleRemoteSyncMessage()
{
  uint64_t OpCode;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  else
    return 4294950002;
}

uint64_t fcks_server_handleRemoteAsyncMessage()
{
  return fcks_server_handleRemoteSyncMessage();
}

uint64_t FigContentKeySessionServerGetIDForSessionByAssociatingWithClientConnection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a2 && a3)
    return FigXPCServerAssociateObjectWithNeighborProcess();
  else
    return FigSignalErrorAt();
}

uint64_t fcks_server_keyResponseErrorCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    if (*(_QWORD *)(a1 + 24))
    {
      if (*(_QWORD *)(a1 + 16))
      {
        if (!FigXPCCreateBasicMessage() && !FigXPCMessageSetCFString())
        {
          xpc_dictionary_set_uint64(0, "CryptorRequestID", a3);
          if (!FigXPCMessageSetCFError())
            xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), 0);
        }
      }
    }
  }
  return FigXPCRelease();
}

uint64_t fcks_server_keyResponseSuccessfullyProcessedCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1
    && *(_QWORD *)(a1 + 24)
    && *(_QWORD *)(a1 + 16)
    && !FigXPCCreateBasicMessage()
    && !FigXPCMessageSetCFString())
  {
    xpc_dictionary_set_uint64(0, "CryptorRequestID", a3);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), 0);
  }
  return FigXPCRelease();
}

uint64_t fcks_server_persistentKeyUpdatedCallback(uint64_t a1)
{
  if (a1
    && *(_QWORD *)(a1 + 24)
    && *(_QWORD *)(a1 + 16)
    && !FigXPCCreateBasicMessage()
    && !FigXPCMessageSetCFString()
    && !FigXPCMessageSetCFData())
  {
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), 0);
  }
  return FigXPCRelease();
}

uint64_t fcks_server_secureStopDidFinalizeRecordCallback(uint64_t a1)
{
  if (a1 && *(_QWORD *)(a1 + 24) && *(_QWORD *)(a1 + 16) && !FigXPCCreateBasicMessage())
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), 0);
  return FigXPCRelease();
}

uint64_t fcks_server_externalProtectionStateChangedCallback(uint64_t a1)
{
  if (a1
    && *(_QWORD *)(a1 + 24)
    && *(_QWORD *)(a1 + 16)
    && !FigXPCCreateBasicMessage()
    && !FigXPCMessageSetCFString())
  {
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), 0);
  }
  return FigXPCRelease();
}

void FigCFRelease_11(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

_QWORD *fcks_server_init(_QWORD *result)
{
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  return result;
}

void fcks_server_finalize(uint64_t a1)
{
  void *v2;

  FigXPCRelease();
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    os_release(v2);
    *(_QWORD *)(a1 + 32) = 0;
  }
}

uint64_t fcks_server_registerServerClassOnce(uint64_t a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  **(_QWORD **)(a1 + 8) = result;
  return result;
}

uint64_t fcks_server_copySessionByObjectIDForConnection(int a1, xpc_object_t xdict)
{
  uint64_t v2;

  if (!xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E0CA36A0]))
    return 4294950006;
  v2 = FigXPCServerLookupAndRetainAssociatedObject();
  if (!(_DWORD)v2)
    return FigSignalErrorAt();
  return v2;
}

uint64_t FigIOMFSelectBestDigitalOutMode()
{
  uint64_t SupportedDigitalOutModes;

  SupportedDigitalOutModes = IOMobileFramebufferGetSupportedDigitalOutModes();
  if ((_DWORD)SupportedDigitalOutModes)
    return SupportedDigitalOutModes;
  else
    return 3758097136;
}

const __CFNumber *figIOMF_CFDictionaryGetInt(const __CFDictionary *a1, const void *a2)
{
  const __CFNumber *result;
  const __CFNumber *v3;
  CFTypeID v4;
  unsigned int valuePtr;

  result = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (result)
  {
    v3 = result;
    v4 = CFGetTypeID(result);
    if (v4 == CFBooleanGetTypeID())
    {
      return (const __CFNumber *)(*MEMORY[0x1E0C9AE40] != (_QWORD)v3);
    }
    else if (v4 == CFNumberGetTypeID())
    {
      valuePtr = 0;
      CFNumberGetValue(v3, kCFNumberIntType, &valuePtr);
      return (const __CFNumber *)valuePtr;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

const void *array_dict(const __CFArray *a1, CFIndex a2)
{
  const void *ValueAtIndex;
  const void *v3;
  CFTypeID v4;

  ValueAtIndex = CFArrayGetValueAtIndex(a1, a2);
  if (!ValueAtIndex)
    return 0;
  v3 = ValueAtIndex;
  v4 = CFGetTypeID(ValueAtIndex);
  if (v4 != CFDictionaryGetTypeID())
    return 0;
  return v3;
}

const void *dictionary_dict(const __CFDictionary *a1, const void *a2)
{
  const void *Value;
  const void *v3;
  CFTypeID v4;

  Value = CFDictionaryGetValue(a1, a2);
  if (!Value)
    return 0;
  v3 = Value;
  v4 = CFGetTypeID(Value);
  if (v4 != CFDictionaryGetTypeID())
    return 0;
  return v3;
}

uint64_t FigCaptionGetClassID()
{
  MEMORY[0x19402F294](&FigCaptionGetClassID_sRegisterFigCaptionBaseTypeOnce, RegisterFigCaptionBaseType);
  return sFigCaptionClassID;
}

uint64_t RegisterFigCaptionBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigCaptionGetTypeID()
{
  MEMORY[0x19402F294](&FigCaptionGetClassID_sRegisterFigCaptionBaseTypeOnce, RegisterFigCaptionBaseType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigCaptionCreate(uint64_t a1, __int128 *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v7;
  CFTypeRef v8;
  uint64_t (*v9)(CFTypeRef, const __CFString *, uint64_t);
  CFTypeRef v10;
  uint64_t (*v11)(CFTypeRef, _OWORD *);
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  CFTypeRef cf;
  _OWORD v18[3];

  cf = 0;
  if (a3)
  {
    if (a4)
    {
      v7 = FigCaptionCreateMutable(a1, &cf);
      if (!(_DWORD)v7)
      {
        v8 = cf;
        v9 = *(uint64_t (**)(CFTypeRef, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 56);
        if (!v9)
          goto LABEL_9;
        v7 = v9(v8, CFSTR("CaptionData"), a3);
        if (!(_DWORD)v7)
        {
          v10 = cf;
          v14 = *a2;
          v15 = a2[1];
          v16 = a2[2];
          v11 = *(uint64_t (**)(CFTypeRef, _OWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
          if (v11)
          {
            v18[0] = v14;
            v18[1] = v15;
            v18[2] = v16;
            v12 = v11(v10, v18);
            if (!(_DWORD)v12)
            {
              *a4 = cf;
              return v12;
            }
LABEL_10:
            if (cf)
              CFRelease(cf);
            return v12;
          }
LABEL_9:
          v12 = 4294954514;
          goto LABEL_10;
        }
      }
    }
    else
    {
      v7 = FigSignalErrorAt();
    }
    v12 = v7;
    goto LABEL_10;
  }
  return FigSignalErrorAt();
}

uint64_t FigCaptionCreateMutableCopy(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v6;
  CFTypeRef v7;
  const __CFString *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v12;
  uint64_t v13;
  CFTypeRef v14;
  uint64_t (*v15)(CFTypeRef, const __CFString *, CFTypeRef);
  uint64_t v16;
  CFTypeRef v18;
  CFTypeRef cf;
  _QWORD v20[4];

  v20[3] = *MEMORY[0x1E0C80C00];
  v18 = 0;
  if (!a2 || !a3)
    return FigSignalErrorAt();
  *a3 = 0;
  v6 = FigCaptionCreateMutable(a1, &v18);
  v7 = v18;
  if ((_DWORD)v6)
  {
    v13 = v6;
    goto LABEL_24;
  }
  cf = 0;
  v8 = CFSTR("TimeRange");
  v9 = *MEMORY[0x1E0CA3370];
  v20[0] = CFSTR("TimeRange");
  v20[1] = v9;
  v20[2] = 0;
  v10 = 1;
  while (1)
  {
    v11 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
    if (!v11)
    {
LABEL_14:
      v16 = FigSignalErrorAt();
LABEL_15:
      v13 = v16;
      goto LABEL_17;
    }
    v12 = v11(a2, v8, a1, &cf);
    v13 = v12;
    if ((_DWORD)v12 != -12784)
      break;
LABEL_10:
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    v8 = (const __CFString *)v20[v10++];
    if (!v8)
      goto LABEL_17;
  }
  if ((_DWORD)v12)
    goto LABEL_14;
  v14 = cf;
  v15 = *(uint64_t (**)(CFTypeRef, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
  if (v15)
  {
    v16 = v15(v7, v8, v14);
    if ((_DWORD)v16)
      goto LABEL_15;
    goto LABEL_10;
  }
  v13 = 4294954514;
LABEL_17:
  if (cf)
    CFRelease(cf);
  v7 = v18;
  if (!(_DWORD)v13)
  {
    *a3 = v18;
    return v13;
  }
LABEL_24:
  if (v7)
    CFRelease(v7);
  return v13;
}

uint64_t FigCaptionCreateCopyWithNewTiming(uint64_t a1, uint64_t a2, __int128 *a3, CFTypeRef *a4)
{
  uint64_t v6;
  CFTypeRef v7;
  uint64_t (*v8)(CFTypeRef, _OWORD *);
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  CFTypeRef cf;
  _OWORD v15[3];

  cf = 0;
  if (a2 && a4)
  {
    v6 = FigCaptionCreateMutableCopy(a1, a2, &cf);
    v7 = cf;
    if ((_DWORD)v6)
    {
      v9 = v6;
      if (!cf)
        return v9;
    }
    else
    {
      v11 = *a3;
      v12 = a3[1];
      v13 = a3[2];
      v8 = *(uint64_t (**)(CFTypeRef, _OWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v8)
      {
        v15[0] = v11;
        v15[1] = v12;
        v15[2] = v13;
        v9 = v8(v7, v15);
        v7 = cf;
        if (!(_DWORD)v9)
        {
          *a4 = cf;
          return v9;
        }
      }
      else
      {
        v9 = 4294954514;
        v7 = cf;
      }
      if (!v7)
        return v9;
    }
    CFRelease(v7);
    return v9;
  }
  return FigSignalErrorAt();
}

CFStringRef FigCaptionCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigCaption %p]"), a1);
}

uint64_t FigRemote_CreateMetadataPropertiesFromBinaryPListData(uint64_t a1, uint64_t a2, const __CFAllocator *a3, _QWORD *a4)
{
  uint64_t v6;
  void *v7;
  CFTypeID v8;
  uint64_t v9;
  CFTypeRef cf;

  cf = 0;
  if (!a4)
    return FigSignalErrorAt();
  v6 = MEMORY[0x19402EA9C](a1, a2, a3, &cf);
  if ((_DWORD)v6)
    goto LABEL_12;
  v7 = (void *)cf;
  if (cf)
  {
    v8 = CFGetTypeID(cf);
    if (v8 == CFDictionaryGetTypeID())
    {
      v7 = FigRemote_CopyMetadataItemWithLocaleAsCFLocale(a3, cf);
      goto LABEL_6;
    }
    v6 = FigSignalErrorAt();
LABEL_12:
    v9 = v6;
    goto LABEL_7;
  }
LABEL_6:
  v9 = 0;
  *a4 = v7;
LABEL_7:
  if (cf)
    CFRelease(cf);
  return v9;
}

__CFDictionary *FigRemote_CopyMetadataItemWithLocaleAsCFLocale(const __CFAllocator *a1, CFTypeRef cf)
{
  CFTypeID v4;
  const __CFString *Value;
  const __CFString *v6;
  CFTypeID v7;
  CFLocaleRef v8;
  CFLocaleRef v9;
  __CFDictionary *MutableCopy;
  __CFDictionary *v11;

  if (!cf)
    return 0;
  v4 = CFGetTypeID(cf);
  if (v4 != CFDictionaryGetTypeID())
    return 0;
  Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("locale"));
  if (!Value)
    return (__CFDictionary *)CFRetain(cf);
  v6 = Value;
  v7 = CFGetTypeID(Value);
  if (v7 != CFStringGetTypeID())
    return (__CFDictionary *)CFRetain(cf);
  v8 = CFLocaleCreate(a1, v6);
  if (!v8)
    return 0;
  v9 = v8;
  MutableCopy = CFDictionaryCreateMutableCopy(a1, 0, (CFDictionaryRef)cf);
  if (MutableCopy)
  {
    v11 = MutableCopy;
    CFDictionaryReplaceValue(MutableCopy, CFSTR("locale"), v9);
    CFRelease(v9);
    return v11;
  }
  CFRelease(v9);
  return (__CFDictionary *)CFRetain(cf);
}

uint64_t FigRemote_CreateMetadataPropertiesBinaryPListData(void *cf, const __CFAllocator *a2, uint64_t a3)
{
  CFTypeID v6;
  __CFDictionary *v7;
  __CFDictionary *v8;
  uint64_t v9;

  if (!cf || (v6 = CFGetTypeID(cf), v6 != CFDictionaryGetTypeID()))
    JUMPOUT(0x19402EA30);
  v7 = FigRemote_CopyMetadataItemWithLocaleAsCFString(a2, cf);
  v8 = v7;
  if (!v7)
    v7 = (__CFDictionary *)cf;
  v9 = MEMORY[0x19402EA30](v7, a2, a3);
  if (v8)
    CFRelease(v8);
  return v9;
}

__CFDictionary *FigRemote_CopyMetadataItemWithLocaleAsCFString(const __CFAllocator *a1, CFTypeRef cf)
{
  CFTypeID v4;
  const void *Value;
  const void *v6;
  CFTypeID v7;
  uint64_t v8;
  const void *v9;
  __CFDictionary *MutableCopy;
  __CFDictionary *v11;

  if (!cf)
    return 0;
  v4 = CFGetTypeID(cf);
  if (v4 != CFDictionaryGetTypeID())
    return 0;
  Value = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("locale"));
  if (!Value)
    return (__CFDictionary *)CFRetain(cf);
  v6 = Value;
  v7 = CFGetTypeID(Value);
  if (v7 != CFLocaleGetTypeID())
    return (__CFDictionary *)CFRetain(cf);
  v8 = MEMORY[0x194029F3C](v6);
  if (!v8)
    return 0;
  v9 = (const void *)v8;
  MutableCopy = CFDictionaryCreateMutableCopy(a1, 0, (CFDictionaryRef)cf);
  if (!MutableCopy)
    return (__CFDictionary *)CFRetain(cf);
  v11 = MutableCopy;
  CFDictionaryReplaceValue(MutableCopy, CFSTR("locale"), v9);
  return v11;
}

const __CFNumber *FigRemote_CopyMetadataItemWithCFStringAsUnsafeCFType(const __CFAllocator *a1, CFTypeRef cf, int a3)
{
  CFTypeID v6;
  const __CFString *Value;
  const void *v8;
  const __CFNumber *v9;
  const __CFNumber *v10;
  CFTypeID v11;
  const __CFNumber *v12;
  int v13;
  CFTypeID v14;
  CFMutableDictionaryRef Mutable;
  CFURLRef v16;
  __CFDictionary *MutableCopy;
  CFTypeID v18;
  CFLocaleRef v19;
  CFLocaleRef v20;
  int valuePtr;

  if (!cf)
    return 0;
  v6 = CFGetTypeID(cf);
  if (v6 != CFDictionaryGetTypeID())
    return 0;
  Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("locale"));
  v8 = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("keyspace"));
  v9 = 0;
  if (a3 && v8)
  {
    if (CFEqual(v8, CFSTR("org.id3")))
    {
      v10 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("key"));
      v9 = v10;
      if (!v10)
        goto LABEL_20;
      v11 = CFGetTypeID(v10);
      if (v11 == CFNumberGetTypeID())
      {
        valuePtr = 0;
        CFNumberGetValue(v9, kCFNumberSInt32Type, &valuePtr);
        if (HIBYTE(valuePtr) == 87)
        {
          v12 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("value"));
          v9 = v12;
          if (!v12)
            goto LABEL_20;
          v13 = valuePtr;
          v14 = CFGetTypeID(v12);
          if (v13 == 1465407576)
          {
            if (v14 == CFDictionaryGetTypeID())
            {
              Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              if (Mutable)
              {
                v16 = Mutable;
                CFDictionaryApplyFunction(v9, (CFDictionaryApplierFunction)figRemote_ID3ConvertStringToURL, Mutable);
LABEL_16:
                MutableCopy = CFDictionaryCreateMutableCopy(a1, 0, (CFDictionaryRef)cf);
                v9 = MutableCopy;
                if (MutableCopy)
                  CFDictionaryReplaceValue(MutableCopy, CFSTR("value"), v16);
                CFRelease(v16);
                goto LABEL_20;
              }
            }
          }
          else if (v14 == CFStringGetTypeID())
          {
            v16 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFStringRef)v9, 0);
            if (v16)
              goto LABEL_16;
          }
        }
      }
    }
    v9 = 0;
  }
LABEL_20:
  if (Value)
  {
    v18 = CFGetTypeID(Value);
    if (v18 == CFStringGetTypeID())
    {
      v19 = CFLocaleCreate(a1, Value);
      if (!v19)
        return v9;
      v20 = v19;
      if (v9 || (v9 = CFDictionaryCreateMutableCopy(a1, 0, (CFDictionaryRef)cf)) != 0)
        CFDictionaryReplaceValue(v9, CFSTR("locale"), v20);
      CFRelease(v20);
    }
  }
  if (!v9)
    return (const __CFNumber *)CFRetain(cf);
  return v9;
}

void figRemote_ID3ConvertStringToURL(const __CFString *a1, const __CFString *a2, __CFDictionary *a3)
{
  CFTypeID v6;
  CFURLRef v7;
  CFURLRef v8;

  if (CFStringCompare(a1, CFSTR("text"), 0) == kCFCompareEqualTo
    && (v6 = CFGetTypeID(a2), v6 == CFStringGetTypeID())
    && (v7 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0)) != 0)
  {
    v8 = v7;
    CFDictionaryAddValue(a3, a1, v7);
    CFRelease(v8);
  }
  else
  {
    CFDictionaryAddValue(a3, a1, a2);
  }
}

const __CFNumber *FigRemote_CopyMetadataItemWithUnsafeCFTypeAsCFString(const __CFAllocator *a1, CFTypeRef cf)
{
  CFTypeID v4;
  const void *Value;
  const void *v6;
  const __CFNumber *v7;
  const __CFNumber *v8;
  CFTypeID v9;
  const __CFNumber *v10;
  int v11;
  CFTypeID v12;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v14;
  const __CFURL *v15;
  CFStringRef v16;
  __CFDictionary *MutableCopy;
  CFTypeID v18;
  uint64_t v19;
  const void *v20;
  int valuePtr;

  if (!cf)
    return 0;
  v4 = CFGetTypeID(cf);
  if (v4 != CFDictionaryGetTypeID())
    return 0;
  Value = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("locale"));
  v6 = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("keyspace"));
  if (!v6 || !CFEqual(v6, CFSTR("org.id3")))
    goto LABEL_19;
  v7 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("key"));
  v8 = v7;
  if (!v7)
    goto LABEL_20;
  v9 = CFGetTypeID(v7);
  if (v9 != CFNumberGetTypeID())
    goto LABEL_19;
  valuePtr = 0;
  CFNumberGetValue(v8, kCFNumberSInt32Type, &valuePtr);
  if (HIBYTE(valuePtr) != 87)
    goto LABEL_19;
  v10 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("value"));
  v8 = v10;
  if (!v10)
    goto LABEL_20;
  v11 = valuePtr;
  v12 = CFGetTypeID(v10);
  if (v11 == 1465407576)
  {
    if (v12 == CFDictionaryGetTypeID())
    {
      Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (Mutable)
      {
        v14 = Mutable;
        CFDictionaryApplyFunction(v8, (CFDictionaryApplierFunction)figRemote_ID3ConvertURLToString, Mutable);
        goto LABEL_17;
      }
    }
    goto LABEL_19;
  }
  if (v12 != CFURLGetTypeID() || (v15 = CFURLCopyAbsoluteURL(v8)) == 0)
  {
LABEL_19:
    v8 = 0;
    goto LABEL_20;
  }
  v14 = v15;
  v16 = CFURLGetString(v15);
  if (!v16)
  {
    v8 = 0;
    goto LABEL_27;
  }
  v8 = (const __CFNumber *)CFRetain(v16);
  CFRelease(v14);
  v14 = v8;
  if (!v8)
  {
LABEL_20:
    if (!Value)
      goto LABEL_28;
    goto LABEL_21;
  }
LABEL_17:
  MutableCopy = CFDictionaryCreateMutableCopy(a1, 0, (CFDictionaryRef)cf);
  v8 = MutableCopy;
  if (MutableCopy)
    CFDictionaryReplaceValue(MutableCopy, CFSTR("value"), v14);
LABEL_27:
  CFRelease(v14);
  if (!Value)
  {
LABEL_28:
    if (!v8)
      return (const __CFNumber *)CFRetain(cf);
    return v8;
  }
LABEL_21:
  v18 = CFGetTypeID(Value);
  if (v18 != CFLocaleGetTypeID())
    goto LABEL_28;
  v19 = MEMORY[0x194029F3C](Value);
  if (v19)
  {
    v20 = (const void *)v19;
    if (!v8)
    {
      v8 = CFDictionaryCreateMutableCopy(a1, 0, (CFDictionaryRef)cf);
      if (!v8)
        return (const __CFNumber *)CFRetain(cf);
    }
    CFDictionaryReplaceValue(v8, CFSTR("locale"), v20);
  }
  return v8;
}

void figRemote_ID3ConvertURLToString(const __CFString *a1, const void *a2, __CFDictionary *a3)
{
  CFTypeID v6;
  const __CFURL *v7;
  const __CFURL *v8;
  CFStringRef v9;
  CFTypeRef v10;

  if (CFStringCompare(a1, CFSTR("text"), 0) == kCFCompareEqualTo)
  {
    v6 = CFGetTypeID(a2);
    if (v6 == CFURLGetTypeID())
    {
      v7 = CFURLCopyAbsoluteURL((CFURLRef)a2);
      if (v7)
      {
        v8 = v7;
        v9 = CFURLGetString(v7);
        if (v9)
        {
          v10 = CFRetain(v9);
          CFRelease(v8);
          if (v10)
          {
            CFDictionaryAddValue(a3, a1, v10);
            CFRelease(v10);
            return;
          }
        }
        else
        {
          CFRelease(v8);
        }
      }
    }
  }
  CFDictionaryAddValue(a3, a1, a2);
}

uint64_t FigRemote_CreateMetadataBinaryPListData(const __CFArray *cf, uint64_t a2, uint64_t a3)
{
  const __CFArray *v4;
  CFTypeID v5;
  CFIndex Count;
  const __CFAllocator *v7;
  CFIndex v8;
  const void *Value;
  __CFDictionary *v10;
  CFIndex v11;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v13;
  CFTypeID v14;
  CFTypeID v15;
  CFIndex v16;
  CFIndex v17;
  __CFArray *Mutable;
  CFIndex i;
  const void *v20;
  const void *v21;
  CFTypeID v22;
  CFMutableDictionaryRef v23;
  const void *v24;
  __CFArray *v25;
  uint64_t v26;
  uint64_t v28;
  __CFArray *v29;
  CFIndex v30;
  const __CFArray *v31;

  if (!a3)
    return FigSignalErrorAt();
  v4 = cf;
  if (!cf
    || (v5 = CFGetTypeID(cf), v5 != CFArrayGetTypeID())
    || (Count = CFArrayGetCount(v4), v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00], Count <= 0))
  {
    JUMPOUT(0x19402EA30);
  }
  v8 = Count;
  v28 = a3;
  v29 = 0;
  Value = 0;
  v10 = 0;
  v11 = 0;
  v30 = Count;
  v31 = v4;
  do
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v4, v11);
    v13 = ValueAtIndex;
    if (ValueAtIndex)
    {
      v14 = CFGetTypeID(ValueAtIndex);
      if (v14 == CFDictionaryGetTypeID())
        Value = CFDictionaryGetValue(v13, CFSTR("items"));
    }
    if (Value)
    {
      v15 = CFGetTypeID(Value);
      if (v15 == CFArrayGetTypeID())
      {
        v16 = CFArrayGetCount((CFArrayRef)Value);
        if (v16 >= 1)
        {
          v17 = v16;
          Mutable = 0;
          for (i = 0; i != v17; ++i)
          {
            v20 = CFArrayGetValueAtIndex((CFArrayRef)Value, i);
            if (v20)
            {
              v21 = v20;
              v22 = CFGetTypeID(v20);
              if (v22 == CFDictionaryGetTypeID())
                v10 = FigRemote_CopyMetadataItemWithLocaleAsCFString(v7, v21);
            }
            if (v10)
            {
              if (!Mutable)
                Mutable = CFArrayCreateMutable(v7, 0, MEMORY[0x1E0C9B378]);
              CFArrayAppendValue(Mutable, v10);
              CFRelease(v10);
            }
          }
          v8 = v30;
          v4 = v31;
          if (Mutable)
          {
            if (CFArrayGetCount(Mutable) < 1)
            {
              v23 = Mutable;
LABEL_30:
              CFRelease(v23);
              goto LABEL_31;
            }
            v23 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            CFDictionaryAddValue(v23, CFSTR("items"), Mutable);
            v24 = CFDictionaryGetValue(v13, CFSTR("format"));
            if (v24)
              CFDictionaryAddValue(v23, CFSTR("format"), v24);
            CFRelease(Mutable);
            if (v23)
            {
              v25 = v29;
              if (!v29)
                v25 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E0C9B378]);
              v29 = v25;
              CFArrayAppendValue(v25, v23);
              goto LABEL_30;
            }
          }
        }
      }
    }
LABEL_31:
    ++v11;
  }
  while (v11 != v8);
  v26 = MEMORY[0x19402EA30](v29, v7, v28);
  if (v29)
    CFRelease(v29);
  return v26;
}

uint64_t FigRemote_CreateBinaryPListDataFromMetadataItemArray(CFTypeRef cf, _QWORD *a2)
{
  CFTypeID v4;
  CFIndex Count;
  uint64_t v6;
  const __CFAllocator *v7;
  CFMutableArrayRef Mutable;
  __CFArray *v9;
  CFIndex i;
  const void *ValueAtIndex;
  const __CFNumber *v12;
  const __CFNumber *v13;
  uint64_t v14;
  uint64_t v16;

  v16 = 0;
  if (a2)
  {
    if (!cf || (v4 = CFGetTypeID(cf), v4 != CFArrayGetTypeID()) || (Count = CFArrayGetCount((CFArrayRef)cf)) == 0)
    {
      v14 = 0;
      *a2 = 0;
      return v14;
    }
    v6 = Count;
    v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      v9 = Mutable;
      if (v6 >= 1)
      {
        for (i = 0; i != v6; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, i);
          v12 = FigRemote_CopyMetadataItemWithUnsafeCFTypeAsCFString(v7, ValueAtIndex);
          if (v12)
          {
            v13 = v12;
            CFArrayAppendValue(v9, v12);
            CFRelease(v13);
          }
        }
      }
      v14 = MEMORY[0x19402EA30](v9, v7, &v16);
      *a2 = v16;
      CFRelease(v9);
      return v14;
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigRemote_CreateMetadataItemArrayFromBinaryPListData(CFDataRef theData, const __CFAllocator *a2, int a3, __CFArray **a4)
{
  const UInt8 *BytePtr;
  CFIndex Length;
  __CFArray *v10;
  uint64_t v11;
  CFTypeID v12;
  CFIndex Count;
  uint64_t v14;
  CFMutableArrayRef Mutable;
  CFIndex i;
  const void *ValueAtIndex;
  const __CFNumber *v18;
  const __CFNumber *v19;
  uint64_t v20;
  CFTypeRef cf;

  cf = 0;
  if (a4)
  {
    if (!theData)
      return 0;
    BytePtr = CFDataGetBytePtr(theData);
    Length = CFDataGetLength(theData);
    v10 = 0;
    if (!BytePtr || !Length)
      goto LABEL_17;
    v11 = MEMORY[0x19402EA9C](BytePtr, Length, a2, &cf);
    if (!(_DWORD)v11)
    {
      if (cf)
      {
        v12 = CFGetTypeID(cf);
        if (v12 == CFArrayGetTypeID())
        {
          Count = CFArrayGetCount((CFArrayRef)cf);
          if (!Count)
          {
            v10 = 0;
LABEL_17:
            v20 = 0;
            *a4 = v10;
            goto LABEL_18;
          }
          v14 = Count;
          Mutable = CFArrayCreateMutable(a2, Count, MEMORY[0x1E0C9B378]);
          if (Mutable)
          {
            v10 = Mutable;
            if (v14 >= 1)
            {
              for (i = 0; i != v14; ++i)
              {
                ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, i);
                v18 = FigRemote_CopyMetadataItemWithCFStringAsUnsafeCFType(a2, ValueAtIndex, a3);
                if (v18)
                {
                  v19 = v18;
                  CFArrayAppendValue(v10, v18);
                  CFRelease(v19);
                }
              }
            }
            goto LABEL_17;
          }
        }
      }
      v11 = FigSignalErrorAt();
    }
    v20 = v11;
LABEL_18:
    if (cf)
      CFRelease(cf);
    return v20;
  }
  return FigSignalErrorAt();
}

uint64_t FigRemote_CreateMetadataFromBinaryPListData(const void *a1, uint64_t a2, __CFArray **a3)
{
  CFTypeID v6;
  const UInt8 *BytePtr;
  CFIndex Length;
  uint64_t v9;
  CFTypeID v10;
  CFIndex Count;
  CFIndex v12;
  CFIndex v13;
  const __CFAllocator *v14;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v16;
  CFTypeID v17;
  const __CFArray *Value;
  const __CFArray *v19;
  CFTypeID v20;
  CFIndex v21;
  CFIndex v22;
  __CFArray *Mutable;
  CFIndex i;
  const void *v25;
  const void *v26;
  CFTypeID v27;
  __CFDictionary *v28;
  __CFDictionary *v29;
  CFMutableDictionaryRef v30;
  const void *v31;
  __CFArray *v32;
  uint64_t v33;
  CFIndex v35;
  __CFArray **v36;
  __CFArray *v37;
  CFTypeRef cf;

  cf = 0;
  if (!a1 || (v6 = CFGetTypeID(a1), v6 != CFDataGetTypeID()) || !a3)
  {
LABEL_41:
    v9 = FigSignalErrorAt();
    goto LABEL_42;
  }
  BytePtr = CFDataGetBytePtr((CFDataRef)a1);
  Length = CFDataGetLength((CFDataRef)a1);
  v9 = MEMORY[0x19402EA9C](BytePtr, Length, a2, &cf);
  if ((_DWORD)v9)
  {
LABEL_42:
    v33 = v9;
    goto LABEL_38;
  }
  v36 = a3;
  if (cf)
  {
    v10 = CFGetTypeID(cf);
    if (v10 == CFArrayGetTypeID())
    {
      if (cf)
      {
        Count = CFArrayGetCount((CFArrayRef)cf);
        if (Count >= 1)
        {
          v12 = Count;
          v37 = 0;
          v13 = 0;
          v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          v35 = Count;
          while (1)
          {
            ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)cf, v13);
            if (!ValueAtIndex)
              goto LABEL_41;
            v16 = ValueAtIndex;
            v17 = CFGetTypeID(ValueAtIndex);
            if (v17 != CFDictionaryGetTypeID())
              goto LABEL_41;
            Value = (const __CFArray *)CFDictionaryGetValue(v16, CFSTR("items"));
            if (Value)
            {
              v19 = Value;
              v20 = CFGetTypeID(Value);
              if (v20 == CFArrayGetTypeID())
              {
                v21 = CFArrayGetCount(v19);
                if (v21 >= 1)
                {
                  v22 = v21;
                  Mutable = 0;
                  for (i = 0; i != v22; ++i)
                  {
                    v25 = CFArrayGetValueAtIndex(v19, i);
                    if (v25)
                    {
                      v26 = v25;
                      v27 = CFGetTypeID(v25);
                      if (v27 == CFDictionaryGetTypeID())
                      {
                        v28 = FigRemote_CopyMetadataItemWithLocaleAsCFLocale(v14, v26);
                        if (v28)
                        {
                          v29 = v28;
                          if (!Mutable)
                            Mutable = CFArrayCreateMutable(v14, 0, MEMORY[0x1E0C9B378]);
                          CFArrayAppendValue(Mutable, v29);
                          CFRelease(v29);
                        }
                      }
                    }
                  }
                  if (Mutable)
                  {
                    if (CFArrayGetCount(Mutable) < 1)
                    {
                      v30 = Mutable;
                      v12 = v35;
LABEL_33:
                      CFRelease(v30);
                      goto LABEL_34;
                    }
                    v30 = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                    CFDictionaryAddValue(v30, CFSTR("items"), Mutable);
                    v31 = CFDictionaryGetValue(v16, CFSTR("format"));
                    if (v31)
                      CFDictionaryAddValue(v30, CFSTR("format"), v31);
                    CFRelease(Mutable);
                    if (v30)
                    {
                      v12 = v35;
                      v32 = v37;
                      if (!v37)
                        v32 = CFArrayCreateMutable(v14, 0, MEMORY[0x1E0C9B378]);
                      v37 = v32;
                      CFArrayAppendValue(v32, v30);
                      goto LABEL_33;
                    }
                  }
                  v12 = v35;
                }
              }
            }
LABEL_34:
            if (++v13 == v12)
              goto LABEL_37;
          }
        }
      }
      goto LABEL_36;
    }
    goto LABEL_41;
  }
LABEL_36:
  v37 = 0;
LABEL_37:
  v33 = 0;
  *v36 = v37;
LABEL_38:
  if (cf)
    CFRelease(cf);
  return v33;
}

double figHapticPlayer_CF_init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 96) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void figHapticPlayer_CF_finalize(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 96);
  if (v2)
    dispatch_release(v2);
}

CFStringRef figHapticPlayer_CF_CopyFormattingDesc(_QWORD *a1, const __CFDictionary *a2)
{
  const __CFAllocator *v4;

  v4 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, CFSTR("<FigHapticPlayer %p>{%@}"), a1, a1[11]);
}

CFStringRef figHapticPlayer_CF_CopyDebugDesc(_QWORD *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<FigHapticPlayer %p>{%@}"), a1, a1[11]);
}

_QWORD *figHapticEngine_CF_init(_QWORD *result)
{
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  return result;
}

void figHapticEngine_CF_finalize(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 24);
  if (v2)
    dispatch_release(v2);
}

CFStringRef figHapticEngine_CF_CopyFormattingDesc(_QWORD *a1, const __CFDictionary *a2)
{
  const __CFAllocator *v4;

  v4 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, CFSTR("FigHapticEngine<%p>{%s<%p>}"), a1, "CHHapticEngine", a1[2]);
}

CFStringRef figHapticEngine_CF_CopyDebugDesc(_QWORD *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("FigHapticEngine<%p>{%s<%p>}"), a1, "CHHapticEngine", a1[2]);
}

uint64_t FigHapticEngineCreate(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t Instance;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v14;
  uint64_t v15;
  id v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  int v21;
  CFTypeRef v22;
  int v23;
  _BOOL4 v24;
  void *v25;
  NSObject *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[5];
  id v33;
  os_log_type_t type;
  unsigned int v35;
  CFTypeRef v36;
  int v37;
  const char *v38;
  __int16 v39;
  uint64_t v40;
  CFTypeRef cf[17];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v36 = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (dword_1EE2A3500)
  {
    v35 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a2)
    goto LABEL_34;
  if (FigHapticEngineGetTypeID_nonce != -1)
    dispatch_once(&FigHapticEngineGetTypeID_nonce, &__block_literal_global_3_0);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
LABEL_34:
    v18 = FigSignalErrorAt();
    goto LABEL_48;
  }
  v10 = Instance;
  v11 = (void *)MEMORY[0x19403137C](Instance, v9);
  v12 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (!v12)
  {
    v18 = 4294948075;
LABEL_15:
    objc_autoreleasePoolPop(v11);
    CFRelease((CFTypeRef)v10);
    goto LABEL_48;
  }
  v13 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(v12 + 16);
  if (!v13)
  {
    v18 = 4294948071;
    goto LABEL_15;
  }
  v14 = *MEMORY[0x1E0C9AE00];
  v15 = v13(a2, CFSTR("FAS_AudioSessionID"), *MEMORY[0x1E0C9AE00], &v36);
  if ((_DWORD)v15)
  {
LABEL_36:
    v18 = v15;
    goto LABEL_15;
  }
  v33 = 0;
  v16 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  if (a3)
  {
    if ((objc_msgSend(a3, "isEqualToString:", CFSTR("Default")) & 1) != 0)
    {
      v17 = (_QWORD *)MEMORY[0x1E0C9DC80];
    }
    else if ((objc_msgSend(a3, "isEqualToString:", CFSTR("FullGamut")) & 1) != 0)
    {
      v17 = (_QWORD *)MEMORY[0x1E0C9DC98];
    }
    else
    {
      if (!objc_msgSend(a3, "isEqualToString:", CFSTR("DefaultWithFullStrength")))
        goto LABEL_22;
      v17 = (_QWORD *)MEMORY[0x1E0C9DC90];
    }
    if (*v17)
      objc_msgSend(v16, "setValue:forKey:", *v17, *MEMORY[0x1E0C9DC30]);
  }
LABEL_22:
  *(_QWORD *)(v10 + 16) = objc_msgSend(objc_alloc(MEMORY[0x1E0C9DCC8]), "initWithAudioSessionID:options:error:", FigCFNumberGetSInt32(), v16, &v33);

  if (!*(_QWORD *)(v10 + 16))
  {
    objc_msgSend(v33, "code");
    v15 = FigSignalErrorAt();
    goto LABEL_36;
  }
  cf[0] = 0;
  v19 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (!v19)
    goto LABEL_39;
  v20 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(v19 + 48);
  if (!v20)
    goto LABEL_39;
  if (v20(a2, *MEMORY[0x1E0D494F8], v14, cf))
  {
    if (cf[0])
      CFRelease(cf[0]);
    goto LABEL_39;
  }
  v21 = FigCFEqual();
  v22 = cf[0];
  if (v21 || (v23 = FigCFEqual(), v22 = cf[0], v23))
  {
    v24 = 1;
    if (v22)
      goto LABEL_29;
  }
  else
  {
    v24 = FigCFEqual() != 0;
    v22 = cf[0];
    if (cf[0])
    {
LABEL_29:
      CFRelease(v22);
      if (!v24)
        goto LABEL_39;
      goto LABEL_33;
    }
  }
  if (!v24)
  {
LABEL_39:
    *(_DWORD *)(v10 + 32) = 0;
    objc_msgSend(*(id *)(v10 + 16), "setAutoShutdownTimeout:", 5.0, v30, v31);
    objc_msgSend(*(id *)(v10 + 16), "setAutoShutdownEnabled:", 1);
    goto LABEL_40;
  }
LABEL_33:
  objc_msgSend(*(id *)(v10 + 16), "setHighPriority:", 1, v30, v31);
  *(_DWORD *)(v10 + 32) = 1;
  objc_msgSend(*(id *)(v10 + 16), "setPlaysHapticsOnly:", 1);
LABEL_40:
  v25 = *(void **)(v10 + 16);
  v32[0] = MEMORY[0x1E0C809B0];
  v32[1] = 3221225472;
  v32[2] = __FigHapticEngineCreate_block_invoke;
  v32[3] = &__block_descriptor_40_e8_v16__0q8l;
  v32[4] = v25;
  objc_msgSend(v25, "setStoppedHandler:", v32);
  *(_QWORD *)(v10 + 24) = dispatch_queue_create("com.coremedia.hapticEngine", 0);
  objc_autoreleasePoolPop(v11);
  if (dword_1EE2A3500)
  {
    v35 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v27 = v35;
    if (os_log_type_enabled(v26, type))
      v28 = v27;
    else
      v28 = v27 & 0xFFFFFFFE;
    if (v28)
    {
      v37 = 136315394;
      v38 = "FigHapticEngineCreate";
      v39 = 2112;
      v40 = v10;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v18 = 0;
  *a4 = v10;
LABEL_48:
  if (v36)
    CFRelease(v36);
  return v18;
}

uint64_t FigHapticEngineStart(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v1 = *(NSObject **)(a1 + 24);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __FigHapticEngineStart_block_invoke;
  v4[3] = &unk_1E2F87F08;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync(v1, v4);
  v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t figHapticEngineStartOnActivityQueue(uint64_t a1)
{
  id v3;

  v3 = 0;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 24));
  if ((objc_msgSend(*(id *)(a1 + 16), "startAndReturnError:", &v3) & 1) != 0)
    return 0;
  else
    return objc_msgSend(v3, "code");
}

uint64_t FigHapticPlayerCreate(uint64_t a1, opaqueCMSampleBuffer *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t Instance;
  uint64_t v8;
  void *v9;
  const opaqueCMFormatDescription *FormatDescription;
  CMBlockBufferRef DataBuffer;
  OpaqueCMBlockBuffer *v12;
  FourCharCode MediaSubType;
  size_t DataLength;
  void *v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t HapticPatternDictionaryFromAppleHapticBBuf;
  NSObject *v20;
  void *v21;
  NSObject *v22;
  const __CFDictionary *v23;
  _OWORD *v24;
  CMTimeEpoch epoch;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  CMTime v30;
  CMTime start;
  CMTimeRange block;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  void (*v40)(uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  void (*v46)(uint64_t);
  uint64_t v47;
  uint64_t v48;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a2 || !a3)
    return FigSignalErrorAt();
  if (FigHapticPlayerGetTypeID_nonce != -1)
    dispatch_once(&FigHapticPlayerGetTypeID_nonce, &__block_literal_global_117);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v8 = Instance;
  v47 = 0;
  v48 = 0;
  v42 = 0;
  v43 = &v42;
  v44 = 0x3052000000;
  v45 = __Block_byref_object_copy__9;
  v46 = __Block_byref_object_dispose__9;
  v36 = 0;
  v37 = &v36;
  v38 = 0x3052000000;
  v39 = __Block_byref_object_copy__9;
  v40 = __Block_byref_object_dispose__9;
  v41 = 0;
  v9 = (void *)MEMORY[0x19403137C]();
  FormatDescription = CMSampleBufferGetFormatDescription(a2);
  DataBuffer = CMSampleBufferGetDataBuffer(a2);
  if (!FormatDescription
    || (v12 = DataBuffer, CMFormatDescriptionGetMediaType(FormatDescription) != 1751216244)
    || !v12)
  {
LABEL_16:
    HapticPatternDictionaryFromAppleHapticBBuf = FigSignalErrorAt();
    goto LABEL_19;
  }
  MediaSubType = CMFormatDescriptionGetMediaSubType(FormatDescription);
  if (MediaSubType == 1634230640)
  {
    HapticPatternDictionaryFromAppleHapticBBuf = FigCreateHapticPatternDictionaryFromAppleHapticBBuf((uint64_t)v12, (unint64_t)&v48, 0);
    goto LABEL_19;
  }
  if (MediaSubType == 1634230642)
  {
    HapticPatternDictionaryFromAppleHapticBBuf = FigCreateHapticPatternDictionaryFromAppleHapticRawBBuf(v12, &v48, 0);
LABEL_19:
    v17 = HapticPatternDictionaryFromAppleHapticBBuf;
    if ((_DWORD)HapticPatternDictionaryFromAppleHapticBBuf)
      goto LABEL_23;
LABEL_20:
    v18 = 0;
LABEL_21:
    v20 = *(NSObject **)(a3 + 24);
    block.start.value = MEMORY[0x1E0C809B0];
    *(_QWORD *)&block.start.timescale = 3221225472;
    block.start.epoch = (CMTimeEpoch)__createCHHapticPlayer_block_invoke;
    block.duration.value = (CMTimeValue)&unk_1E2FB6B48;
    v33 = &v36;
    v34 = &v42;
    v35 = a3;
    *(_QWORD *)&block.duration.timescale = v48;
    block.duration.epoch = (CMTimeEpoch)v18;
    dispatch_sync(v20, &block);
    v21 = (void *)v37[5];
    if (v21)
    {
      objc_msgSend(v21, "code");
      v17 = FigSignalErrorAt();
    }
    else
    {
      v17 = 0;
      *(_QWORD *)(v8 + 88) = (id)v43[5];
    }
    goto LABEL_23;
  }
  if (MediaSubType != 1651866234)
    goto LABEL_16;
  DataLength = CMBlockBufferGetDataLength(v12);
  if (!DataLength)
    goto LABEL_20;
  v15 = (void *)objc_msgSend(MEMORY[0x1E0C99DF0], "dataWithLength:", DataLength);
  v16 = v15;
  if (!v15)
    goto LABEL_16;
  v17 = CMBlockBufferCopyDataBytes(v12, 0, DataLength, (void *)objc_msgSend(v15, "mutableBytes"));
  if (!(_DWORD)v17)
  {
    v18 = v16;
    goto LABEL_21;
  }
LABEL_23:
  objc_autoreleasePoolPop(v9);
  _Block_object_dispose(&v36, 8);
  _Block_object_dispose(&v42, 8);
  if ((_DWORD)v17 || !*(_QWORD *)(v8 + 88))
  {
    CFRelease((CFTypeRef)v8);
  }
  else
  {
    v22 = *(NSObject **)(a3 + 24);
    if (v22)
      dispatch_retain(v22);
    *(_QWORD *)(v8 + 96) = v22;
    v23 = (const __CFDictionary *)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA2728], 0);
    v24 = (_OWORD *)(v8 + 16);
    if (v23)
    {
      CMTimeMakeFromDictionary(&block.start, v23);
      epoch = block.start.epoch;
      *v24 = *(_OWORD *)&block.start.value;
    }
    else
    {
      v26 = MEMORY[0x1E0CA2E68];
      *v24 = *MEMORY[0x1E0CA2E68];
      epoch = *(_QWORD *)(v26 + 16);
    }
    *(_QWORD *)(v8 + 32) = epoch;
    CMSampleBufferGetOutputPresentationTimeStamp(&start, a2);
    CMSampleBufferGetOutputDuration(&v30, a2);
    CMTimeRangeMake(&block, &start, &v30);
    v17 = 0;
    v28 = *(_OWORD *)&block.start.epoch;
    v27 = *(_OWORD *)&block.duration.timescale;
    *(_OWORD *)(v8 + 40) = *(_OWORD *)&block.start.value;
    *(_OWORD *)(v8 + 56) = v28;
    *(_OWORD *)(v8 + 72) = v27;
    *a4 = v8;
  }
  return v17;
}

void sub_192FC6A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v16 - 136), 8);
  _Unwind_Resume(a1);
}

__n128 FigHapticPlayerGetOutputTimeRange@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)(a1 + 72);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void FigHapticPlayerSetIsMuted(uint64_t a1, char a2)
{
  NSObject *v2;
  _QWORD v3[5];
  char v4;

  v2 = *(NSObject **)(a1 + 96);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __FigHapticPlayerSetIsMuted_block_invoke;
  v3[3] = &__block_descriptor_41_e5_v8__0l;
  v3[4] = a1;
  v4 = a2;
  dispatch_sync(v2, v3);
}

uint64_t FigHapticPlayerSetVolumeNow(uint64_t a1, float a2)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD block[6];
  float v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 0;
  v2 = *(NSObject **)(a1 + 96);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __FigHapticPlayerSetVolumeNow_block_invoke;
  block[3] = &unk_1E2FB6AB8;
  v6 = a2;
  block[4] = &v7;
  block[5] = a1;
  dispatch_sync(v2, block);
  v3 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v3;
}

uint64_t FigHapticPlayerSetActiveChannelIndexNow(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD block[7];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  v2 = *(NSObject **)(a1 + 96);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __FigHapticPlayerSetActiveChannelIndexNow_block_invoke;
  block[3] = &unk_1E2F81FC0;
  block[5] = a1;
  block[6] = a2;
  block[4] = &v6;
  dispatch_sync(v2, block);
  v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t FigHapticEngineStartPlayerAtHostTimeWithOffset(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4)
{
  NSObject *v4;
  __int128 v5;
  uint64_t v6;
  _QWORD block[7];
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;

  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 0;
  v4 = *(NSObject **)(a2 + 96);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __FigHapticEngineStartPlayerAtHostTimeWithOffset_block_invoke;
  block[3] = &unk_1E2FB6AE0;
  block[4] = &v13;
  block[5] = a1;
  block[6] = a2;
  v9 = *a3;
  v10 = *((_QWORD *)a3 + 2);
  v5 = *a4;
  v12 = *((_QWORD *)a4 + 2);
  v11 = v5;
  dispatch_sync(v4, block);
  v6 = *((unsigned int *)v14 + 6);
  _Block_object_dispose(&v13, 8);
  return v6;
}

uint64_t FigHapticPlayerPauseNow(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v1 = *(NSObject **)(a1 + 96);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __FigHapticPlayerPauseNow_block_invoke;
  v4[3] = &unk_1E2F87F08;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync(v1, v4);
  v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t FigHapticEngineStopPlayerNow(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD block[7];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  v2 = *(NSObject **)(a2 + 96);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __FigHapticEngineStopPlayerNow_block_invoke;
  block[3] = &unk_1E2F81FC0;
  block[5] = a1;
  block[6] = a2;
  block[4] = &v6;
  dispatch_sync(v2, block);
  v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void FigHapticPlayerSetPlaybackRate(uint64_t a1, double a2)
{
  NSObject *v2;
  _QWORD v3[6];

  v2 = *(NSObject **)(a1 + 96);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __FigHapticPlayerSetPlaybackRate_block_invoke;
  v3[3] = &__block_descriptor_48_e5_v8__0l;
  v3[4] = a1;
  *(double *)&v3[5] = a2;
  dispatch_sync(v2, v3);
}

void __Block_byref_object_copy__9(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__9(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __createCHHapticPlayer_block_invoke(_QWORD *a1)
{
  id *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v2 = (id *)(a1 + 4);
  if (a1[4])
  {
    v3 = objc_msgSend(objc_alloc(MEMORY[0x1E0C9DD08]), "initWithDictionary:error:", a1[4], *(_QWORD *)(a1[6] + 8) + 40);
    if (v3)
    {
      v4 = (void *)v3;
      *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 40) = objc_msgSend(*(id *)(a1[8] + 16), "createAdvancedPlayerWithPattern:error:", v3, *(_QWORD *)(a1[6] + 8) + 40);

    }
  }
  else
  {
    v2 = (id *)(a1 + 5);
    v5 = a1[5];
    if (!v5)
      return;
    *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 40) = objc_msgSend(*(id *)(a1[8] + 16), "createAdvancedPlayerWithRingtoneData:error:", v5, *(_QWORD *)(a1[6] + 8) + 40);
  }

}

uint64_t FigVirtualDisplayPrefsGetBoolean(CFStringRef key, Boolean *a2)
{
  uint64_t result;
  Boolean keyExistsAndHasValidFormat;

  keyExistsAndHasValidFormat = 0;
  if (FigVirtualDisplayPrefsAllowed_once != -1)
    dispatch_once(&FigVirtualDisplayPrefsAllowed_once, &__block_literal_global_118);
  if (FigVirtualDisplayPrefsAllowed_allowed)
  {
    result = CFPreferencesGetAppBooleanValue(key, CFSTR("com.apple.coremedia"), &keyExistsAndHasValidFormat);
    if (!a2)
      return result;
  }
  else
  {
    result = 0;
    if (!a2)
      return result;
  }
  *a2 = keyExistsAndHasValidFormat;
  return result;
}

CFIndex FigVirtualDisplayPrefsGetInteger(CFStringRef key, Boolean *a2)
{
  CFIndex result;
  Boolean keyExistsAndHasValidFormat;

  keyExistsAndHasValidFormat = 0;
  if (FigVirtualDisplayPrefsAllowed_once != -1)
    dispatch_once(&FigVirtualDisplayPrefsAllowed_once, &__block_literal_global_118);
  if (FigVirtualDisplayPrefsAllowed_allowed)
  {
    result = CFPreferencesGetAppIntegerValue(key, CFSTR("com.apple.coremedia"), &keyExistsAndHasValidFormat);
    if (!a2)
      return result;
  }
  else
  {
    result = 0;
    if (!a2)
      return result;
  }
  *a2 = keyExistsAndHasValidFormat;
  return result;
}

double FigVirtualDisplayPrefsGetDouble(CFStringRef key, char *a2)
{
  const __CFString *v4;
  const __CFString *v5;
  CFTypeID v6;
  CFTypeID v7;
  char v8;
  double valuePtr;

  valuePtr = 0.0;
  if (FigVirtualDisplayPrefsAllowed_once != -1)
    dispatch_once(&FigVirtualDisplayPrefsAllowed_once, &__block_literal_global_118);
  if (!FigVirtualDisplayPrefsAllowed_allowed
    || (v4 = (const __CFString *)CFPreferencesCopyAppValue(key, CFSTR("com.apple.coremedia"))) == 0)
  {
    v8 = 0;
    if (!a2)
      return valuePtr;
    goto LABEL_12;
  }
  v5 = v4;
  v6 = CFGetTypeID(v4);
  if (v6 == CFStringGetTypeID())
  {
    valuePtr = CFStringGetDoubleValue(v5);
LABEL_9:
    v8 = 1;
    goto LABEL_11;
  }
  v7 = CFGetTypeID(v5);
  if (v7 == CFNumberGetTypeID())
  {
    CFNumberGetValue((CFNumberRef)v5, kCFNumberDoubleType, &valuePtr);
    goto LABEL_9;
  }
  v8 = 0;
LABEL_11:
  CFRelease(v5);
  if (a2)
LABEL_12:
    *a2 = v8;
  return valuePtr;
}

CFPropertyListRef FigVirtualDisplayPrefsCopyValue(CFStringRef key)
{
  if (FigVirtualDisplayPrefsAllowed_once != -1)
    dispatch_once(&FigVirtualDisplayPrefsAllowed_once, &__block_literal_global_118);
  if (FigVirtualDisplayPrefsAllowed_allowed)
    return CFPreferencesCopyAppValue(key, CFSTR("com.apple.coremedia"));
  else
    return 0;
}

uint64_t FigVirtualDisplayPrefsGetBooleanWithDefault(const __CFString *a1, unsigned int a2)
{
  uint64_t result;
  Boolean v4;

  v4 = 0;
  LODWORD(result) = FigVirtualDisplayPrefsGetBoolean(a1, &v4);
  if (v4)
    return result;
  else
    return a2;
}

uint64_t FigVirtualDisplayPrefsGetIntegerWithDefault(const __CFString *a1, unsigned int a2)
{
  uint64_t result;
  Boolean v4;

  v4 = 0;
  LODWORD(result) = FigVirtualDisplayPrefsGetInteger(a1, &v4);
  if (v4)
    return result;
  else
    return a2;
}

void FigVirtualDisplayPrefsGetDoubleWithDefault(const __CFString *a1)
{
  char v1;

  v1 = 0;
  FigVirtualDisplayPrefsGetDouble(a1, &v1);
}

uint64_t MTAudioProcessingTapGetClassID()
{
  MEMORY[0x19402F294](&MTAudioProcessingTapGetClassID_sRegisterBaseTypeOnce, aptapC_RegisterBaseType);
  return aptapC_ClassID;
}

uint64_t aptapC_RegisterBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFDictionaryRef MTAudioProcessingTapCreateCFDictionaryFromPointer(void *a1, uint64_t a2)
{
  const __CFAllocator *v2;
  CFDictionaryRef v3;
  void *values;
  uint64_t valuePtr;
  void *keys;

  valuePtr = a2;
  keys = a1;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberLongType, &valuePtr);
  v3 = CFDictionaryCreate(v2, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (values)
    CFRelease(values);
  return v3;
}

CFDictionaryRef MTAudioProcessingTapCreateCFDictionaryFromPointerAndTrackID(void *a1, uint64_t a2, void *a3, int a4, void *a5, int a6)
{
  const __CFAllocator *v6;
  CFDictionaryRef v7;
  int v9;
  int v10;
  uint64_t valuePtr;
  void *values;
  CFTypeRef cf;
  CFTypeRef v14;
  void *keys[4];

  keys[3] = *(void **)MEMORY[0x1E0C80C00];
  valuePtr = a2;
  v9 = a6;
  v10 = a4;
  keys[0] = a1;
  keys[1] = a3;
  keys[2] = a5;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberLongType, &valuePtr);
  cf = CFNumberCreate(v6, kCFNumberSInt32Type, &v10);
  v14 = CFNumberCreate(v6, kCFNumberSInt32Type, &v9);
  v7 = CFDictionaryCreate(v6, (const void **)keys, (const void **)&values, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (values)
    CFRelease(values);
  if (cf)
    CFRelease(cf);
  if (v14)
    CFRelease(v14);
  return v7;
}

const __CFNumber *MTAudioProcessingTapGetPointerFromCFDictionary(void *key, CFDictionaryRef theDict)
{
  const __CFNumber *result;
  uint64_t valuePtr;

  valuePtr = 0;
  result = (const __CFNumber *)CFDictionaryGetValue(theDict, key);
  if (result)
  {
    if (CFNumberGetValue(result, kCFNumberLongType, &valuePtr))
      return (const __CFNumber *)valuePtr;
    else
      return 0;
  }
  return result;
}

double MTAudioProcessingTapConvertQueueTimeToMediaTime@<D0>(int64_t value@<X1>, int32_t timescale@<W3>, unsigned int a3@<W0>, int64_t a4@<X2>, uint64_t a5@<X8>, double a6@<D0>, float a7@<S1>, float a8@<S2>)
{
  uint64_t v15;
  __int128 v16;
  double result;
  CMTime v18;
  CMTime lhs;
  CMTime v20;
  CMTime v21;
  CMTime v22;
  CMTime v23;
  CMTime v24;

  v15 = MEMORY[0x1E0CA2E40];
  v16 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  *(_OWORD *)a5 = *MEMORY[0x1E0CA2E40];
  *(_OWORD *)(a5 + 16) = v16;
  *(_OWORD *)(a5 + 32) = *(_OWORD *)(v15 + 32);
  v24 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v23 = v24;
  memset(&v22, 0, sizeof(v22));
  CMTimeMake(&v22, value, timescale);
  memset(&v21, 0, sizeof(v21));
  CMTimeMake(&v21, a4, timescale);
  CMTimeMake(&v24, (uint64_t)(a6 + 0.5), timescale);
  lhs = v24;
  v18 = v21;
  CMTimeSubtract(&v20, &lhs, &v18);
  v24 = v20;
  lhs = v20;
  CMTimeMultiplyByFloat64(&v20, &lhs, (float)(a7 / a8));
  v24 = v20;
  lhs = v20;
  v18 = v22;
  CMTimeAdd(&v20, &lhs, &v18);
  v24 = v20;
  CMTimeMake(&v23, a3, timescale);
  lhs = v23;
  CMTimeMultiplyByFloat64(&v20, &lhs, fabsf(a7) / a8);
  v23 = v20;
  if (a7 < 0.0)
  {
    lhs = v24;
    v18 = v23;
    CMTimeSubtract(&v20, &lhs, &v18);
    v24 = v20;
  }
  *(CMTime *)a5 = v24;
  result = *(double *)&v23.value;
  *(CMTime *)(a5 + 24) = v23;
  return result;
}

CFTypeID MTAudioProcessingTapGetTypeID(void)
{
  MEMORY[0x19402F294](&MTAudioProcessingTapGetClassID_sRegisterBaseTypeOnce, aptapC_RegisterBaseType);
  return CMBaseClassGetCFTypeID();
}

CFStringRef aptapC_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[MTAudioProcessingTap %p]"), a1);
}

uint64_t FigCDSRegionProtocolGetProtocolID()
{
  MEMORY[0x19402F294](&FigCDSRegionProtocolGetProtocolID_sRegisterFigCDSRegionProtocolTypeOnce, RegisterFigCDSRegionProtocolType);
  return sFigCDSRegionProtocolID;
}

uint64_t RegisterFigCDSRegionProtocolType()
{
  return FigBaseProtocolRegisterProtocol();
}

uint64_t FigTX3GCaptionGroupConverterFromSampleBufferCreate(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;

  if (!a3 || !a1 || !*a1 || !a1[1])
    return FigSignalErrorAt();
  FigCaptionGroupConverterFromSampleBufferGetClassID();
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    *(_OWORD *)CMBaseObjectGetDerivedStorage() = *(_OWORD *)a1;
    *a3 = 0;
  }
  return v5;
}

__CFString *fcgcfs_tx3g_copyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigTX3GCaptionGroupConverterFromSampleBufferf %p>"), a1);
  return Mutable;
}

uint64_t fcgcfs_tx3g_copyProperty()
{
  return 4294954512;
}

uint64_t fcgcfs_tx3g_setProperty()
{
  return 4294954512;
}

uint64_t fcgcfs_tx3g_addSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  _QWORD *DerivedStorage;
  __int128 v4;
  const opaqueCMFormatDescription *FormatDescription;
  CMFormatDescriptionRef v6;
  __int128 v7;
  const __CFAllocator *v8;
  uint64_t Mutable;
  const __CFAttributedString *v10;
  void *v11;
  unsigned __int8 v12;
  CFIndex Length;
  CFIndex v14;
  CFStringRef String;
  uint64_t (*v16)(void *, CFStringRef);
  uint64_t v17;
  CFTypeRef v18;
  uint64_t CMBaseObject;
  uint64_t (*v20)(uint64_t, _QWORD, CFTypeRef);
  const __CFDictionary *Attributes;
  const __CFNumber *Value;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, _QWORD, const __CFString *);
  uint64_t v26;
  const void *v27;
  uint64_t v28;
  CFTypeRef v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, _QWORD, CFTypeRef);
  const void *v32;
  uint64_t v33;
  CFTypeRef v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, _QWORD, CFTypeRef);
  uint64_t v37;
  CFTypeRef v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, _QWORD, CFTypeRef);
  CFTypeRef v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, _QWORD, CFTypeRef);
  uint64_t value_high;
  CFIndex v45;
  const __CFDictionary *v46;
  CFArrayRef v47;
  uint64_t v48;
  void (*v49)(CFTypeRef, CMTimeRange *, uint64_t);
  _QWORD *v51;
  CMTimeRange context;
  CMTime duration;
  CMTime start;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  _OWORD v59[2];
  __int16 v60;
  _OWORD v61[4];
  uint64_t v62;
  CMTimeRange v63;
  __CFAttributedString *v64;
  void *values;
  CFTypeRef v66;
  int valuePtr;
  CFRange effectiveRange;
  CFTypeRef v69;
  __int128 v70;
  __int128 v71;
  CFTypeRef v72;
  CFTypeRef v73;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  values = 0;
  v66 = 0;
  v64 = 0;
  v4 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  *(_OWORD *)&v63.start.value = *MEMORY[0x1E0CA2E40];
  *(_OWORD *)&v63.start.epoch = v4;
  *(_OWORD *)&v63.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
  v62 = 0;
  memset(v61, 0, sizeof(v61));
  if (!a2
    || (FormatDescription = CMSampleBufferGetFormatDescription(a2),
        CMFormatDescriptionGetMediaType(FormatDescription) != 1952807028)
    && CMFormatDescriptionGetMediaType(FormatDescription) != 1935832172
    || (v6 = CMSampleBufferGetFormatDescription(a2), !FigCPEIsSupportedFormatDescription((uint64_t)v6))
    && CMFormatDescriptionGetMediaSubType(FormatDescription) != 1954034535
    || !*DerivedStorage
    || !DerivedStorage[1])
  {
    Mutable = FigSignalErrorAt();
    goto LABEL_77;
  }
  if (!CMSampleBufferGetNumSamples(a2))
  {
    value_high = 0;
    goto LABEL_78;
  }
  v60 = 0;
  v7 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  v59[0] = *MEMORY[0x1E0C9D628];
  v59[1] = v7;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = FigTextSampleBufferSetUpState(v61, *MEMORY[0x1E0C9AE00], FormatDescription);
  if ((_DWORD)Mutable
    || (Mutable = FigCaptionDataCreateMutable(), (_DWORD)Mutable)
    || (Mutable = FigTextSampleBufferCopyAttributedString((uint64_t)v61, v8, a2, &v64, (char *)&v60 + 1, &v60, (double *)v59), (_DWORD)Mutable))
  {
LABEL_77:
    value_high = Mutable;
LABEL_78:
    v47 = 0;
    goto LABEL_64;
  }
  v10 = v64;
  v11 = values;
  v12 = HIBYTE(v60);
  effectiveRange.length = 0;
  v69 = 0;
  effectiveRange.location = 0;
  Length = CFAttributedStringGetLength(v64);
  if (!v10 || !v11)
  {
    v17 = FigSignalErrorAt();
    goto LABEL_75;
  }
  v14 = Length;
  if (Length < 1)
  {
LABEL_57:
    value_high = 0;
    goto LABEL_58;
  }
  String = CFAttributedStringGetString(v10);
  v16 = *(uint64_t (**)(void *, CFStringRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v16)
    goto LABEL_42;
  v17 = v16(v11, String);
  if ((_DWORD)v17)
    goto LABEL_75;
  v17 = FigCaptionDynamicStyleCreate();
  if ((_DWORD)v17)
    goto LABEL_75;
  v18 = v69;
  CMBaseObject = FigCaptionDataGetCMBaseObject();
  v20 = *(uint64_t (**)(uint64_t, _QWORD, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v20)
  {
LABEL_42:
    value_high = 4294954514;
    goto LABEL_58;
  }
  v17 = v20(CMBaseObject, *MEMORY[0x1E0CA3378], v18);
  if ((_DWORD)v17)
  {
LABEL_75:
    value_high = v17;
    goto LABEL_58;
  }
  valuePtr = 0;
  Attributes = CFAttributedStringGetAttributes(v10, 0, &effectiveRange);
  Value = (const __CFNumber *)CFDictionaryGetValue(Attributes, (const void *)*MEMORY[0x1E0CA5298]);
  CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
  v72 = 0;
  v73 = 0;
  v23 = FigCaptionRegionCreateMutable();
  if ((_DWORD)v23)
    goto LABEL_81;
  v24 = FigCaptionRegionGetCMBaseObject();
  v25 = *(uint64_t (**)(uint64_t, _QWORD, const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v25)
  {
    value_high = 4294954514;
    goto LABEL_50;
  }
  v23 = v25(v24, *MEMORY[0x1E0CA3438], CFSTR("TX3GRegion"));
  if ((_DWORD)v23)
  {
LABEL_81:
    value_high = v23;
    goto LABEL_50;
  }
  memset(&context, 0, 32);
  FigGeometryDimensionMake();
  FigGeometryDimensionMake();
  FigGeometryPointMake();
  v70 = 0u;
  v71 = 0u;
  v26 = FigGeometryPointCopyAsDictionary();
  if (!v26)
  {
    value_high = 0;
    goto LABEL_50;
  }
  v27 = (const void *)v26;
  v28 = FigCaptionDynamicStyleCreate();
  if ((_DWORD)v28)
    goto LABEL_83;
  v29 = v72;
  v30 = FigCaptionRegionGetCMBaseObject();
  v31 = *(uint64_t (**)(uint64_t, _QWORD, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v31)
  {
    value_high = 4294954514;
    goto LABEL_48;
  }
  v28 = v31(v30, *MEMORY[0x1E0CA3490], v29);
  if ((_DWORD)v28)
  {
LABEL_83:
    value_high = v28;
  }
  else
  {
    if (v72)
    {
      CFRelease(v72);
      v72 = 0;
    }
    v32 = (const void *)FigGeometryDimensionCopyAsDictionary();
    v33 = FigCaptionDynamicStyleCreate();
    if (!(_DWORD)v33)
    {
      v51 = DerivedStorage;
      v34 = v72;
      v35 = FigCaptionRegionGetCMBaseObject();
      v36 = *(uint64_t (**)(uint64_t, _QWORD, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v36)
      {
        v37 = v36(v35, *MEMORY[0x1E0CA34B0], v34);
        if ((_DWORD)v37)
          goto LABEL_41;
        if (v32)
          CFRelease(v32);
        if (v72)
        {
          CFRelease(v72);
          v72 = 0;
        }
        v32 = (const void *)FigGeometryDimensionCopyAsDictionary();
        v37 = FigCaptionDynamicStyleCreate();
        if ((_DWORD)v37)
          goto LABEL_41;
        v38 = v72;
        v39 = FigCaptionRegionGetCMBaseObject();
        v40 = *(uint64_t (**)(uint64_t, _QWORD, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
        if (v40)
        {
          v37 = v40(v39, *MEMORY[0x1E0CA3428], v38);
          if ((_DWORD)v37)
          {
LABEL_41:
            value_high = v37;
            goto LABEL_45;
          }
          v41 = v73;
          v42 = FigCaptionDataGetCMBaseObject();
          v43 = *(uint64_t (**)(uint64_t, _QWORD, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
          if (v43)
          {
            v37 = v43(v42, *MEMORY[0x1E0CA3340], v41);
            goto LABEL_41;
          }
        }
      }
      value_high = 4294954514;
LABEL_45:
      DerivedStorage = v51;
      if (!v32)
        goto LABEL_48;
      goto LABEL_46;
    }
    value_high = v33;
    if (v32)
LABEL_46:
      CFRelease(v32);
  }
LABEL_48:
  CFRelease(v27);
  if (v72)
    CFRelease(v72);
LABEL_50:
  if (v73)
    CFRelease(v73);
  if (!(_DWORD)value_high)
  {
    v45 = 0;
    effectiveRange.location = 0;
    effectiveRange.length = 0;
    while (1)
    {
      v46 = CFAttributedStringGetAttributes(v10, v45, &effectiveRange);
      if (FigCFDictionaryGetCount() >= 1)
      {
        *(CFRange *)&context.start.value = effectiveRange;
        context.start.epoch = (CMTimeEpoch)v11;
        context.duration.value = v12;
        CFDictionaryApplyFunction(v46, (CFDictionaryApplierFunction)fcgcfs_tx3g_attribute_applier, &context);
        value_high = HIDWORD(context.duration.value);
        if (HIDWORD(context.duration.value))
          break;
      }
      v45 = effectiveRange.length + effectiveRange.location;
      if (effectiveRange.length + effectiveRange.location >= v14)
        goto LABEL_57;
    }
  }
LABEL_58:
  if (v69)
    CFRelease(v69);
  if ((_DWORD)value_high)
    goto LABEL_78;
  v47 = CFArrayCreate(v8, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
  if (v47)
  {
    v57 = *MEMORY[0x1E0CA2E68];
    v58 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    v55 = v57;
    v56 = v58;
    value_high = FigCaptionGroupCreate();
    if (!(_DWORD)value_high)
    {
      CMSampleBufferGetOutputPresentationTimeStamp(&start, a2);
      CMSampleBufferGetOutputDuration(&duration, a2);
      CMTimeRangeMake(&v63, &start, &duration);
    }
  }
  else
  {
    value_high = FigSignalErrorAt();
  }
LABEL_64:
  v49 = (void (*)(CFTypeRef, CMTimeRange *, uint64_t))*DerivedStorage;
  v48 = DerivedStorage[1];
  context = v63;
  v49(v66, &context, v48);
  FigTextSampleBufferTearDownState((uint64_t)v61);
  if (v64)
    CFRelease(v64);
  if (values)
    CFRelease(values);
  if (v47)
    CFRelease(v47);
  if (v66)
    CFRelease(v66);
  return value_high;
}

uint64_t fcgcfs_tx3g_finish()
{
  return 0;
}

void fcgcfs_tx3g_attribute_applier(uint64_t a1, const __CFString *a2, uint64_t *a3)
{
  int v5;
  CFAllocatorRef *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int FloatAtIndex;
  const __CFNumber *CGColorSRGB;
  CFTypeID v12;
  CFTypeID v13;
  CFTypeID v14;
  int Value;
  uint64_t *v16;
  uint64_t *v17;
  CFTypeID v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t);
  CFTypeID v24;
  CFTypeID v25;
  CFTypeID v26;
  CFNumberRef cf;
  _QWORD valuePtr[3];

  valuePtr[2] = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (!*((_DWORD *)a3 + 7))
  {
    v5 = FigCFEqual();
    v6 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    if (v5)
    {
      v7 = 0;
      v8 = *MEMORY[0x1E0CA35E8];
      valuePtr[0] = 0;
      valuePtr[1] = 0;
      v9 = valuePtr;
      while (1)
      {
        FloatAtIndex = FigCFArrayGetFloatAtIndex();
        if (!FloatAtIndex)
          break;
        ++v7;
        v9 = (_QWORD *)((char *)v9 + 4);
        if (v7 == 4)
        {
          CGColorSRGB = (const __CFNumber *)FigCreateCGColorSRGB();
          cf = CGColorSRGB;
          if (CGColorSRGB)
          {
            v12 = CFGetTypeID(CGColorSRGB);
            if (v12 == CGColorGetTypeID())
              goto LABEL_26;
          }
          goto LABEL_56;
        }
      }
LABEL_29:
      if (!FloatAtIndex)
        goto LABEL_33;
      goto LABEL_32;
    }
    if (FigCFEqual())
    {
      if (a2)
      {
        v13 = CFGetTypeID(a2);
        if (v13 == CFBooleanGetTypeID())
        {
          LODWORD(valuePtr[0]) = CFBooleanGetValue((CFBooleanRef)a2) != 0;
          cf = CFNumberCreate(*v6, kCFNumberSInt32Type, valuePtr);
          if (cf)
          {
            v8 = *MEMORY[0x1E0CA3560];
LABEL_26:
            FloatAtIndex = FigCaptionDynamicStyleCreate();
            if (FloatAtIndex)
              goto LABEL_32;
            v20 = a3[1];
            v21 = a3[2];
            v22 = *a3;
            v23 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 32);
            if (!v23)
            {
              FloatAtIndex = -12782;
              goto LABEL_32;
            }
            FloatAtIndex = v23(v21, v8, 0, v22, v20);
            goto LABEL_29;
          }
        }
      }
LABEL_56:
      FloatAtIndex = FigSignalErrorAt();
      if (!FloatAtIndex)
      {
LABEL_33:
        if (cf)
          CFRelease(cf);
        return;
      }
LABEL_32:
      *((_DWORD *)a3 + 7) = FloatAtIndex;
      goto LABEL_33;
    }
    if (FigCFEqual())
    {
      if (!a2)
        goto LABEL_56;
      v14 = CFGetTypeID(a2);
      if (v14 != CFBooleanGetTypeID())
        goto LABEL_56;
      v8 = *MEMORY[0x1E0CA3580];
      Value = CFBooleanGetValue((CFBooleanRef)a2);
      v16 = (uint64_t *)MEMORY[0x1E0CA3588];
      v17 = (uint64_t *)MEMORY[0x1E0CA3590];
    }
    else
    {
      if (!FigCFEqual())
      {
        if (FigCFEqual())
        {
          valuePtr[0] = 0;
          if (!a2)
            goto LABEL_56;
          v24 = CFGetTypeID(a2);
          if (v24 != CFNumberGetTypeID())
            goto LABEL_56;
          v8 = *MEMORY[0x1E0CA3578];
          CFNumberGetValue((CFNumberRef)a2, kCFNumberCGFloatType, valuePtr);
          v19 = FigCaptionGeometryCopyCellBasedSizeAsDictionary();
          cf = (CFNumberRef)v19;
        }
        else if (FigCFEqual())
        {
          if (!a2)
            goto LABEL_56;
          v25 = CFGetTypeID(a2);
          if (v25 != CFStringGetTypeID() || !fcgcfs_tx3g_getFontFamilyNameFromTx3gFontName(a2))
            goto LABEL_56;
          FloatAtIndex = FigCaptionFontFamilyNameListCreateMutable();
          if (FloatAtIndex)
            goto LABEL_32;
          FloatAtIndex = FigCaptionFontFamilyNameListAppend();
          if (FloatAtIndex)
            goto LABEL_32;
          v8 = *MEMORY[0x1E0CA3570];
          v19 = 0;
        }
        else
        {
          if (!FigCFEqual())
          {
            if (!FigCFEqual())
            {
              FigCFEqual();
              return;
            }
            goto LABEL_33;
          }
          if (!a2)
            goto LABEL_56;
          v26 = CFGetTypeID(a2);
          if (v26 != CFNumberGetTypeID())
            goto LABEL_56;
          v8 = *MEMORY[0x1E0CA35B8];
          LODWORD(valuePtr[0]) = 0;
          v19 = *MEMORY[0x1E0C9AE40];
          cf = (CFNumberRef)*MEMORY[0x1E0C9AE40];
          CFNumberGetValue((CFNumberRef)a2, kCFNumberSInt32Type, valuePtr);
          if ((valuePtr[0] & 0x80000000) != 0 || (valuePtr[0] & 0x40000000) != 0 && *((_BYTE *)a3 + 24))
          {
            v16 = (uint64_t *)MEMORY[0x1E0C9AE50];
LABEL_24:
            v19 = *v16;
            cf = (CFNumberRef)*v16;
          }
        }
        if (!v19)
          goto LABEL_33;
        goto LABEL_26;
      }
      if (!a2)
        goto LABEL_56;
      v18 = CFGetTypeID(a2);
      if (v18 != CFBooleanGetTypeID())
        goto LABEL_56;
      v8 = *MEMORY[0x1E0CA35A0];
      Value = CFBooleanGetValue((CFBooleanRef)a2);
      v16 = (uint64_t *)MEMORY[0x1E0CA35A8];
      v17 = (uint64_t *)MEMORY[0x1E0CA35B0];
    }
    if (!Value)
      v16 = v17;
    goto LABEL_24;
  }
}

uint64_t fcgcfs_tx3g_getFontFamilyNameFromTx3gFontName(const __CFString *a1)
{
  uint64_t v2;
  uint64_t v4;

  if (CFStringCompare(a1, CFSTR("ProportionalSansSerif"), 1uLL) == kCFCompareEqualTo)
  {
    v4 = MEMORY[0x1E0CA32C0];
    return *(_QWORD *)v4;
  }
  if (CFStringCompare(a1, CFSTR("ProportionalSerif"), 1uLL) == kCFCompareEqualTo)
  {
    v4 = MEMORY[0x1E0CA32B8];
    return *(_QWORD *)v4;
  }
  if (CFStringCompare(a1, CFSTR("MonospaceSansSerif"), 1uLL) == kCFCompareEqualTo)
  {
    v4 = MEMORY[0x1E0CA32B0];
    return *(_QWORD *)v4;
  }
  if (CFStringCompare(a1, CFSTR("MonospaceSerif"), 1uLL) == kCFCompareEqualTo)
  {
    v4 = MEMORY[0x1E0CA2BF8];
    return *(_QWORD *)v4;
  }
  if (CFStringCompare(a1, CFSTR("Serif"), 1uLL) == kCFCompareEqualTo)
  {
    v4 = MEMORY[0x1E0CA32D0];
    return *(_QWORD *)v4;
  }
  if (CFStringCompare(a1, CFSTR("SansSerif"), 1uLL) == kCFCompareEqualTo)
  {
    v4 = MEMORY[0x1E0CA32C8];
    return *(_QWORD *)v4;
  }
  if (CFStringCompare(a1, CFSTR("Monospace"), 1uLL) == kCFCompareEqualTo)
  {
    v4 = MEMORY[0x1E0CA32A0];
    return *(_QWORD *)v4;
  }
  if (CFStringCompare(a1, CFSTR("Casual"), 1uLL) == kCFCompareEqualTo)
  {
    v4 = MEMORY[0x1E0CA3280];
    return *(_QWORD *)v4;
  }
  if (CFStringCompare(a1, CFSTR("Cursive"), 1uLL) == kCFCompareEqualTo)
  {
    v4 = MEMORY[0x1E0CA3288];
    return *(_QWORD *)v4;
  }
  if (CFStringCompare(a1, CFSTR("Fantasy"), 1uLL) == kCFCompareEqualTo)
  {
    v4 = MEMORY[0x1E0CA2BE8];
    return *(_QWORD *)v4;
  }
  v2 = *MEMORY[0x1E0CA3290];
  if (CFStringCompare(a1, CFSTR("SmallCapital"), 1uLL))
    return v2;
  else
    return *MEMORY[0x1E0CA2C28];
}

uint64_t RegisterFigBasicAESCPEProtectorType()
{
  FigCPEProtectorGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigBasicAESCPEProtectorCreate(const __CFAllocator *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *DerivedStorage;
  uint64_t v7;

  if (!a3)
    return 4294955146;
  MEMORY[0x19402F294](&FigBasicAESCPEProtectorGetClassID_sRegisterFigBasicAESCPEProtectorTypeOnce, RegisterFigBasicAESCPEProtectorType);
  v5 = CMDerivedObjectCreate();
  if ((_DWORD)v5)
    return v5;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return 4294955145;
  v5 = FigCPEExternalProtectionMonitorCreateForMethods(a1, 0, 0, 0, DerivedStorage);
  if ((_DWORD)v5)
    return v5;
  CMNotificationCenterGetDefaultLocalCenter();
  v7 = FigNotificationCenterAddWeakListener();
  if (!(_DWORD)v7)
    *a3 = 0;
  return v7;
}

uint64_t ExternalProtectionStatusChangedCallback_5()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

CFTypeRef FigBasicAESCPEProtectorCopyFormattingDesc()
{
  return CFRetain(CFSTR("[FigFPCPEProtector]"));
}

BOOL FigBasicAESCPEProtectorEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t FigBasicAESCPEProtectorInvalidate()
{
  CFTypeRef *DerivedStorage;
  CFTypeRef *v1;
  CFTypeRef v2;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v1 = DerivedStorage;
    if (*DerivedStorage)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      if (*v1)
      {
        CFRelease(*v1);
        *v1 = 0;
      }
    }
    v2 = v1[1];
    if (v2)
    {
      CFRelease(v2);
      v1[1] = 0;
    }
  }
  return 0;
}

__CFString *FigBasicAESCPEProtectorCopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  __CFString *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = Mutable;
  if (DerivedStorage && Mutable)
    CFStringAppendFormat(Mutable, 0, CFSTR("<FigBasicAESBasicAESCPEProtector>"));
  return v5;
}

uint64_t FigBasicAESCPEProtectorCopyProperty(uint64_t a1, const void *a2, uint64_t a3, const __CFString **a4)
{
  uint64_t *DerivedStorage;
  uint64_t result;
  CFTypeRef *v9;
  const __CFString *v10;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  result = 4294955146;
  if (a2 && a4)
  {
    if (CFEqual(a2, CFSTR("ExternalProtectionRequiredForPlayback")))
    {
      if (!FigCPEExternalProtectionMonitorGetMethods(*DerivedStorage))
      {
        v9 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
        goto LABEL_9;
      }
    }
    else
    {
      if (CFEqual(a2, CFSTR("DisplayList")))
        return FigCPEExternalProtectionMonitorCopyProperty(*DerivedStorage, CFSTR("DisplayList"), a3, (uint64_t)a4);
      if (CFEqual(a2, CFSTR("ApplicationAuthorizationChallengeProvider")))
      {
        result = 0;
        v10 = CFSTR("ApplicationAuthorizationChallengeProviderNone");
LABEL_13:
        *a4 = v10;
        return result;
      }
      if (!CFEqual(a2, CFSTR("AllowsVideoOutput")))
        return 4294954512;
    }
    v9 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
LABEL_9:
    if (*v9)
      v10 = (const __CFString *)CFRetain(*v9);
    else
      v10 = 0;
    result = 0;
    goto LABEL_13;
  }
  return result;
}

uint64_t FigBasicAESCPEProtectorSetProperty(uint64_t a1, const void *a2, const __CFArray *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  const void *v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294955146;
  v6 = DerivedStorage;
  if (CFEqual(a2, CFSTR("DisplayList")))
    return FigCPEExternalProtectionMonitorSetProperty(*(_QWORD **)v6, CFSTR("DisplayList"), a3);
  if (!CFEqual(a2, CFSTR("NeroTransport")))
    return 4294954512;
  v8 = *(const void **)(v6 + 8);
  *(_QWORD *)(v6 + 8) = a3;
  if (a3)
    CFRetain(a3);
  if (v8)
    CFRelease(v8);
  return 0;
}

uint64_t FigBasicAESCPEProtectorGetAggregateExternalProtectionStatus(uint64_t a1, _DWORD *a2)
{
  uint64_t *DerivedStorage;
  int Status;
  uint64_t result;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294955146;
  Status = FigCPEExternalProtectionMonitorGetStatus(*DerivedStorage);
  result = 0;
  *a2 = Status;
  return result;
}

uint64_t FigBasicAESCPEProtectorCreateCryptor(const void *a1, uint64_t a2, unsigned int a3, const __CFDictionary *a4, _QWORD *a5)
{
  uint64_t DerivedStorage;
  const void **v11;
  const void *Value;
  const void *v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a5)
    return 4294955146;
  if (a3 > 3)
    return 4294955136;
  v11 = (const void **)DerivedStorage;
  if (!a4)
    return FigBasicAESCPECryptorCreate(a1, *v11, a4, a2, a5);
  Value = CFDictionaryGetValue(a4, CFSTR("Destination"));
  if (!Value)
    return FigBasicAESCPECryptorCreate(a1, *v11, a4, a2, a5);
  v13 = Value;
  if (CFEqual(Value, CFSTR("DestinationLocal")))
    return FigBasicAESCPECryptorCreate(a1, *v11, a4, a2, a5);
  if (CFEqual(v13, CFSTR("DestinationNero")))
    return FigOctaviaCPECryptorCreate(a1, CFSTR("com.apple.basicAES"), *v11, 0, a2, v11[1], a5);
  else
    return 4294955136;
}

uint64_t FigTTMLDivCreate(const __CFAllocator *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t DerivedStorage;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v11;
  uint64_t v12;

  if (a4)
  {
    FigTTMLNodeGetClassID();
    v8 = CMDerivedObjectCreate();
    if (!(_DWORD)v8)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v8 = FigTTMLInitializeNodeBaseStorage(DerivedStorage, (__int128 *)a3);
      if (!(_DWORD)v8)
      {
        v8 = FigTTMLAddCurrentElementAttributesToDictionary(a2, *(__CFDictionary **)(DerivedStorage + 24));
        if (!(_DWORD)v8)
        {
          Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
          *(_QWORD *)(DerivedStorage + 136) = Mutable;
          if (Mutable)
          {
            v11 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
            *(_QWORD *)(DerivedStorage + 144) = v11;
            if (v11)
            {
              *(_QWORD *)a3 = 0;
              *(_QWORD *)(a3 + 8) = 0;
              v12 = FigTTMLParseNode(a2, (uint64_t (*)(uint64_t, uint64_t *, CFTypeRef *))figTTMLDivConsumeChildNode, (uint64_t *)a3);
              if (!(_DWORD)v12)
                *a4 = 0;
              return v12;
            }
          }
          return FigSignalErrorAt();
        }
      }
    }
    return v8;
  }
  return FigSignalErrorAt();
}

uint64_t figTTMLDivConsumeChildNode(uint64_t a1, CFTypeRef *a2, void **a3)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v7;
  uint64_t BlockClassNode;
  void *v9;
  CFMutableArrayRef *v10;
  CFAllocatorRef v11;
  uint64_t v12;
  uint64_t v14;
  void *value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  value = 0;
  v7 = CFGetAllocator(*a2);
  BlockClassNode = FigTTMLParseAndCreateBlockClassNode(v7, a1, (uint64_t)a2, (CFTypeRef *)&value);
  if ((_DWORD)BlockClassNode)
    goto LABEL_16;
  v9 = value;
  if (value)
  {
    v10 = (CFMutableArrayRef *)(DerivedStorage + 136);
    goto LABEL_7;
  }
  v11 = CFGetAllocator(*a2);
  BlockClassNode = FigTTMLParseAndCreateAnimationClassNode((uint64_t)v11, a1, (uint64_t)a2, &value);
  if ((_DWORD)BlockClassNode)
  {
LABEL_16:
    v12 = BlockClassNode;
    goto LABEL_10;
  }
  v9 = value;
  if (!value)
  {
    v14 = FigTTMLSkipNode(a1, (uint64_t *)a2, *(__CFArray **)(DerivedStorage + 128));
    v12 = v14;
    if (a3 && !(_DWORD)v14)
      goto LABEL_8;
    goto LABEL_10;
  }
  v10 = (CFMutableArrayRef *)(DerivedStorage + 144);
LABEL_7:
  CFArrayAppendValue(*v10, v9);
  if (a3)
  {
LABEL_8:
    v12 = 0;
    *a3 = value;
    return v12;
  }
  v12 = 0;
LABEL_10:
  if (value)
    CFRelease(value);
  return v12;
}

void figTTMLDiv_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 136);
  if (v1)
    CFRelease(v1);
  v2 = *(const void **)(DerivedStorage + 144);
  if (v2)
    CFRelease(v2);
  FigTTMLReleaseNodeBaseStorage(DerivedStorage);
}

CFStringRef figTTMLDiv_CopyDebugDesc()
{
  const void *v0;
  CFStringRef v1;

  CMBaseObjectGetDerivedStorage();
  v0 = (const void *)FigCFCopyCompactDescription();
  v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("div: %@"), v0);
  if (v0)
    CFRelease(v0);
  return v1;
}

uint64_t figTTMLDiv_CopyChildNodeArray(uint64_t a1, uint64_t *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  *a2 = FigCFArrayCreateConcatenationOfTwoArrays();
  return 0;
}

uint64_t figTTMLDiv_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2)
    return FigSignalErrorAt();
  *a2 = 3;
  return 0;
}

BOOL FigPKDCPESupportsFormatDescription(const opaqueCMFormatDescription *a1)
{
  int v1;
  CFTypeRef v2;
  BOOL v3;
  CFTypeRef cf;

  cf = 0;
  v1 = PKDCopyDecryptFormatTypeFromFormatDescription(a1, &cf);
  v2 = cf;
  if (cf)
    CFRelease(cf);
  if (v1)
    v3 = 1;
  else
    v3 = v2 == 0;
  return !v3;
}

uint64_t FigBasicAESCPECryptorGetClassID()
{
  MEMORY[0x19402F294](&FigBasicAESCPECryptorGetClassID_sRegisterFigBasicAESCPECryptorTypeOnce, RegisterFigBasicAESCPECryptorType);
  return sFigBasicAESCPECryptorClassID;
}

uint64_t RegisterFigBasicAESCPECryptorType()
{
  FigCPECryptorGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigBasicAESCPESupportsFormatDescription(const opaqueCMFormatDescription *a1)
{
  signed int MediaSubType;
  uint64_t result;
  unsigned __int16 v3;
  int v4;

  MediaSubType = CMFormatDescriptionGetMediaSubType(a1);
  result = 0;
  if (MediaSubType <= 2053202274)
  {
    if (MediaSubType <= 1902207330)
    {
      if (MediaSubType != 1667331683)
      {
        v4 = 1700886115;
LABEL_15:
        if (MediaSubType != v4)
          return result;
      }
    }
    else if (MediaSubType != 1902207331 && MediaSubType != 1902212707)
    {
      v4 = 1903587385;
      goto LABEL_15;
    }
  }
  else if (MediaSubType > 2053207650)
  {
    if (MediaSubType != 2053464883)
    {
      v3 = 30307;
      goto LABEL_12;
    }
  }
  else if ((MediaSubType - 2053202739) > 0x3D
         || ((1 << (MediaSubType - 51)) & 0x2020000000000001) == 0)
  {
    v3 = 24931;
LABEL_12:
    v4 = v3 | 0x7A610000;
    goto LABEL_15;
  }
  return 1;
}

uint64_t FigBasicAESCPECryptorCreate(const void *a1, const void *a2, const __CFDictionary *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t DerivedStorage;
  _QWORD *v12;
  uint64_t v13;
  CFTypeRef v14;
  const void *Value;

  v5 = 4294955146;
  if (a1 && a2 && a5)
  {
    MEMORY[0x19402F294](&FigBasicAESCPECryptorGetClassID_sRegisterFigBasicAESCPECryptorTypeOnce, RegisterFigBasicAESCPECryptorType);
    v10 = CMDerivedObjectCreate();
    if ((_DWORD)v10)
      return v10;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!DerivedStorage)
      return 4294955145;
    v12 = (_QWORD *)DerivedStorage;
    v13 = FigSimpleMutexCreate();
    v12[10] = v13;
    if (!v13)
      return 4294955145;
    *v12 = CFRetain(a1);
    v12[5] = CFRetain((CFTypeRef)*MEMORY[0x1E0CA3100]);
    v14 = CFRetain(a2);
    v12[11] = v14;
    FigCPEExternalProtectionMonitorBeginMonitoring((uint64_t)v14);
    CMNotificationCenterGetDefaultLocalCenter();
    v10 = FigNotificationCenterAddWeakListener();
    if ((_DWORD)v10)
      return v10;
    if (a3)
    {
      Value = CFDictionaryGetValue(a3, CFSTR("CryptKeyAttributes"));
      if (Value)
        Value = CFRetain(Value);
      v12[12] = Value;
    }
    v5 = 0;
    *a5 = 0;
  }
  return v5;
}

uint64_t ExternalProtectionStatusChangedCallback_6()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

CFTypeRef FigBasicAESCPECryptorCopyFormattingDesc()
{
  return CFRetain(CFSTR("[FigBasicAESCPECryptor]"));
}

BOOL FigBasicAESCPECryptorEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t FigBasicAESCPECryptorInvalidate()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 80));
  *(_BYTE *)(DerivedStorage + 73) = 1;
  if (*(_QWORD *)(DerivedStorage + 88))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    FigCPEExternalProtectionMonitorEndMonitoring(*(_QWORD *)(DerivedStorage + 88));
    v1 = *(const void **)(DerivedStorage + 88);
    if (v1)
    {
      CFRelease(v1);
      *(_QWORD *)(DerivedStorage + 88) = 0;
    }
  }
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v2 = *(const void **)(DerivedStorage + 8);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  v3 = *(const void **)(DerivedStorage + 16);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 24);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  FigCryptDispose(*(CCCryptorRef **)(DerivedStorage + 32));
  *(_QWORD *)(DerivedStorage + 32) = 0;
  v5 = *(const void **)(DerivedStorage + 40);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 96);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 96) = 0;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 80));
  return 0;
}

uint64_t FigBasicAESCPECryptorFinalize()
{
  _QWORD *DerivedStorage;
  const void *v1;
  uint64_t result;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  FigBasicAESCPECryptorInvalidate();
  v1 = (const void *)DerivedStorage[6];
  if (v1)
    CFRelease(v1);
  if (DerivedStorage[7])
  {
    FigH264Bridge_HLSfMP4ParsingInfoDestroy();
    DerivedStorage[7] = 0;
  }
  result = DerivedStorage[10];
  if (result)
  {
    result = FigSimpleMutexDestroy();
    DerivedStorage[10] = 0;
  }
  return result;
}

__CFString *FigBasicAESCPECryptorCopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  BOOL v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 80));
  if (*(_BYTE *)(DerivedStorage + 73))
    v5 = 1;
  else
    v5 = Mutable == 0;
  if (!v5)
    CFStringAppendFormat(Mutable, 0, CFSTR("<FigBasicAESCPECryptor: protectorParent<%@> >"), *(_QWORD *)DerivedStorage);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 80));
  return Mutable;
}

uint64_t FigBasicAESCPECryptorCopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  const void **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, const void *, uint64_t, _QWORD *);
  uint64_t valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = 4294955146;
  if (a2 && a4)
  {
    v9 = DerivedStorage;
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 80));
    if (*(_BYTE *)(v9 + 73))
    {
      v8 = 4294954511;
LABEL_11:
      MEMORY[0x19402EF04](*(_QWORD *)(v9 + 80));
      return v8;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3108]))
    {
      v10 = *(const void **)(v9 + 40);
LABEL_7:
      v10 = CFRetain(v10);
LABEL_8:
      v8 = 0;
      *a4 = v10;
      goto LABEL_11;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31A0]))
    {
      v8 = 0;
      *a4 = *MEMORY[0x1E0C9AE50];
      goto LABEL_11;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3218]))
    {
      v12 = (const void **)MEMORY[0x1E0C9AE50];
      if (!*(_BYTE *)(v9 + 72) && !*(_QWORD *)(v9 + 8))
        v12 = (const void **)MEMORY[0x1E0C9AE40];
      v10 = *v12;
      goto LABEL_7;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31C0]))
    {
      valuePtr = FigCPEExternalProtectionMonitorGetMethods(*(_QWORD *)(v9 + 88));
      v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &valuePtr);
      goto LABEL_8;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31D8]))
    {
      v10 = *(const void **)(v9 + 8);
      if (!v10)
        goto LABEL_8;
      goto LABEL_7;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31C8]))
    {
      v10 = *(const void **)(v9 + 16);
      if (!v10)
        goto LABEL_8;
      goto LABEL_7;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31B0]))
    {
      v10 = *(const void **)(v9 + 96);
      if (v10)
        goto LABEL_7;
      v13 = FigSignalErrorAt();
    }
    else
    {
      v14 = *(_QWORD *)v9;
      v15 = *(uint64_t (**)(uint64_t, const void *, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
      if (!v15)
      {
        v8 = 4294954514;
        goto LABEL_11;
      }
      v13 = v15(v14, a2, a3, a4);
    }
    v8 = v13;
    goto LABEL_11;
  }
  return v8;
}

uint64_t FigBasicAESCPECryptorSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  CFTypeRef v8;
  unsigned int Methods;
  unsigned int v11;
  CFTypeID v12;
  uint64_t v13;
  const void *v14;
  CFTypeRef v15;
  CFTypeID v16;
  CFTypeID v17;
  CFTypeID v18;
  CFTypeID v19;
  const void *v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, const void *, const void *);
  CFTypeRef cf;
  uint64_t valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294955146;
  v6 = DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 80));
  if (!*(_BYTE *)(v6 + 73))
  {
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3108]))
    {
      if (a3)
      {
        v7 = *(_QWORD *)(v6 + 40);
        *(_QWORD *)(v6 + 40) = a3;
LABEL_7:
        CFRetain(a3);
        if (!v7)
          goto LABEL_11;
        v8 = (CFTypeRef)v7;
LABEL_9:
        CFRelease(v8);
LABEL_10:
        v7 = 0;
        goto LABEL_11;
      }
      goto LABEL_34;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31C0]))
    {
      Methods = FigCPEExternalProtectionMonitorGetMethods(*(_QWORD *)(v6 + 88));
      valuePtr = 0;
      if (!a3)
        goto LABEL_34;
      v11 = Methods;
      v12 = CFGetTypeID(a3);
      if (v12 != CFNumberGetTypeID())
        goto LABEL_34;
      CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt64Type, &valuePtr);
      if ((valuePtr & ~(unint64_t)v11) == 0)
        goto LABEL_10;
      cf = 0;
      v13 = FigCPEExternalProtectionMonitorCreateForMethods((const __CFAllocator *)*MEMORY[0x1E0C9AE00], valuePtr & ~v11, 0, *(CFTypeRef *)(v6 + 88), &cf);
      if (!(_DWORD)v13)
      {
        v14 = *(const void **)(v6 + 88);
        v15 = cf;
        *(_QWORD *)(v6 + 88) = cf;
        if (v15)
          CFRetain(v15);
        if (v14)
          CFRelease(v14);
        v8 = cf;
        if (!cf)
          goto LABEL_10;
        goto LABEL_9;
      }
    }
    else
    {
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31D8]))
      {
        if (a3)
        {
          v16 = CFGetTypeID(a3);
          if (v16 == CFDataGetTypeID())
          {
            v7 = *(_QWORD *)(v6 + 8);
            *(_QWORD *)(v6 + 8) = a3;
            goto LABEL_7;
          }
        }
LABEL_34:
        v7 = 4294955136;
        goto LABEL_11;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31C8]))
      {
        if (a3)
        {
          v17 = CFGetTypeID(a3);
          if (v17 == CFDataGetTypeID())
          {
            v7 = *(_QWORD *)(v6 + 16);
            *(_QWORD *)(v6 + 16) = a3;
            goto LABEL_7;
          }
        }
        goto LABEL_34;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3110]))
      {
        if (a3)
        {
          v18 = CFGetTypeID(a3);
          if (v18 == CFDataGetTypeID())
          {
            v7 = *(_QWORD *)(v6 + 24);
            *(_QWORD *)(v6 + 24) = a3;
            goto LABEL_7;
          }
        }
        goto LABEL_34;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3218]))
      {
        v7 = 0;
        *(_BYTE *)(v6 + 72) = *MEMORY[0x1E0C9AE50] == (_QWORD)a3;
        goto LABEL_11;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3118]))
      {
        if (a3)
        {
          v19 = CFGetTypeID(a3);
          if (v19 == CMFormatDescriptionGetTypeID())
          {
            if (!FigCFEqual())
            {
              v20 = *(const void **)(v6 + 48);
              *(_QWORD *)(v6 + 48) = a3;
              CFRetain(a3);
              if (v20)
                CFRelease(v20);
              if (*(_QWORD *)(v6 + 56))
              {
                FigH264Bridge_HLSfMP4ParsingInfoDestroy();
                v7 = 0;
                *(_QWORD *)(v6 + 56) = 0;
                goto LABEL_11;
              }
            }
            goto LABEL_10;
          }
        }
        goto LABEL_34;
      }
      v21 = *(_QWORD *)v6;
      v22 = *(uint64_t (**)(uint64_t, const void *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
      if (!v22)
      {
        v7 = 4294954514;
        goto LABEL_11;
      }
      v13 = v22(v21, a2, a3);
    }
    v7 = v13;
    goto LABEL_11;
  }
  v7 = 4294954511;
LABEL_11:
  MEMORY[0x19402EF04](*(_QWORD *)(v6 + 80));
  return v7;
}

uint64_t FigBasicAESCPECryptorGetExternalProtectionMethods(uint64_t a1, _DWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294955146;
  v4 = DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 80));
  if (*(_BYTE *)(v4 + 73))
  {
    v5 = 4294954511;
  }
  else
  {
    v5 = 0;
    *a2 = FigCPEExternalProtectionMonitorGetMethods(*(_QWORD *)(v4 + 88));
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v4 + 80));
  return v5;
}

uint64_t FigBasicAESCPECryptorGetAggregateExternalProtectionStatus(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
    return 4294955146;
  v5 = DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 80));
  if (*(_BYTE *)(v5 + 73))
  {
    v6 = 4294954511;
  }
  else
  {
    v6 = 0;
    *a3 = FigCPEExternalProtectionMonitorGetStatus(*(_QWORD *)(v5 + 88));
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v5 + 80));
  return v6;
}

uint64_t FigBasicAESCPECryptorDecryptSample(uint64_t a1, OpaqueCMBlockBuffer *a2, OpaqueCMBlockBuffer *a3)
{
  uint64_t DerivedStorage;
  size_t DataLength;
  size_t v7;
  uint64_t result;
  const void *v9;
  uint64_t *v10;
  const __CFData *v11;
  const UInt8 *BytePtr;
  const void *v13;
  size_t Length;
  size_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v20;
  size_t v21;
  int v22;
  __int128 v23;
  size_t v24;
  uint64_t v25;
  UInt8 *v26;
  char *v27;
  char *v28;
  size_t v31;
  char *v32;
  char *v33;
  size_t v34;
  size_t v36;
  uint64_t v37;
  UInt8 *v38;
  __int128 v39;
  __int128 v40;
  char *v43;
  char *v44;
  size_t v45;
  size_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  size_t v50;
  size_t v51;
  size_t v52;
  uint64_t v53;
  char *dataPointerOut;
  char *v55;
  char v56;
  size_t v57;
  size_t v58;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  DataLength = CMBlockBufferGetDataLength(a2);
  if (!a2)
    return FigSignalErrorAt();
  if (!a3)
    return FigSignalErrorAt();
  v7 = DataLength;
  if (!DataLength
    || DataLength != CMBlockBufferGetDataLength(a3)
    || !CMBlockBufferIsRangeContiguous(a3, 0, 0)
    || !CMBlockBufferIsRangeContiguous(a2, 0, 0))
  {
    return FigSignalErrorAt();
  }
  dataPointerOut = 0;
  v55 = 0;
  result = CMBlockBufferGetDataPointer(a2, 0, 0, 0, &dataPointerOut);
  if (!(_DWORD)result)
  {
    result = CMBlockBufferGetDataPointer(a3, 0, 0, 0, &v55);
    if (!(_DWORD)result)
    {
      v9 = *(const void **)(DerivedStorage + 40);
      if (!v9 || CFEqual(v9, (CFTypeRef)*MEMORY[0x1E0CA3100]))
      {
        memcpy(v55, dataPointerOut, v7);
        return 0;
      }
      v10 = (uint64_t *)(DerivedStorage + 32);
      if (!*(_QWORD *)(DerivedStorage + 32))
      {
        v11 = *(const __CFData **)(DerivedStorage + 8);
        if (!v11 || !*(_QWORD *)(DerivedStorage + 16))
          return FigSignalErrorAt();
        BytePtr = CFDataGetBytePtr(v11);
        v13 = (const void *)*MEMORY[0x1E0C9AE00];
        Length = CFDataGetLength(*(CFDataRef *)(DerivedStorage + 8));
        result = FigCryptCreateForDecrypt(2, v13, 0, v13, BytePtr, Length, (_QWORD *)(DerivedStorage + 32));
        if ((_DWORD)result)
          return result;
      }
      v52 = v7;
      v53 = DerivedStorage;
      if (FigCFEqual())
      {
        v15 = 0;
        v16 = dataPointerOut;
        v17 = v55;
        while (1)
        {
          v18 = bswap32(*(_DWORD *)v16);
          if (v7 - v15 < v18)
            break;
          if (v18 >= 0x31 && (v16[4] & 0x1B) == 1)
          {
            v57 = 0;
            v58 = 0;
            v56 = 0;
            v22 = *((_DWORD *)v16 + 8);
            v23 = *((_OWORD *)v16 + 1);
            *(_OWORD *)v17 = *(_OWORD *)v16;
            *((_OWORD *)v17 + 1) = v23;
            *((_DWORD *)v17 + 8) = v22;
            if ((v18 & 0xF) != 0)
              v21 = v18 & 0xF;
            else
              v21 = 16;
            if ((v18 & 0xF) != 0)
              v24 = (v18 & 0xFFFFFFF0) - 32;
            else
              v24 = v18 - 48;
            v25 = *(_QWORD *)(v53 + 32);
            v26 = (UInt8 *)CFDataGetBytePtr(*(CFDataRef *)(v53 + 16));
            CFDataGetLength(*(CFDataRef *)(v53 + 16));
            result = FigCryptSetIV(v25, v26);
            if ((_DWORD)result)
              return result;
            v27 = v17 + 36;
            v28 = v16 + 36;
            result = FigCryptDecryptMemory(*v10, 1, 0, v28, v24, &v58, v27, v24, &v57, &v56);
            if ((_DWORD)result)
              return result;
            if (v24 != v58 || v24 != v57 || v56 != 0)
              return FigSignalErrorAt();
            v17 = &v27[v24];
            v16 = &v28[v24];
            v20 = v18 + 4;
            v7 = v52;
          }
          else
          {
            v20 = v18 + 4;
            v21 = v20;
          }
          memcpy(v17, v16, v21);
          v16 += v21;
          v17 += v21;
          v15 += v20;
          if (v15 >= v7)
            return 0;
        }
        return FigSignalErrorAt();
      }
      if (FigCFEqual())
      {
        v31 = 0;
        v32 = dataPointerOut;
        v33 = v55;
        while (1)
        {
          v34 = bswap32(*(_DWORD *)v32);
          if (v7 - v31 < v34)
            return FigSignalErrorAt();
          if (v34 >= 0x31 && (v32[4] & 0x1B) == 1)
          {
            v57 = 0;
            v58 = 0;
            v56 = 0;
            v37 = *(_QWORD *)(v53 + 32);
            v38 = (UInt8 *)CFDataGetBytePtr(*(CFDataRef *)(v53 + 16));
            CFDataGetLength(*(CFDataRef *)(v53 + 16));
            result = FigCryptSetIV(v37, v38);
            if ((_DWORD)result)
              return result;
            v39 = *(_OWORD *)v32;
            v40 = *((_OWORD *)v32 + 1);
            *((_DWORD *)v33 + 8) = *((_DWORD *)v32 + 8);
            *(_OWORD *)v33 = v39;
            *((_OWORD *)v33 + 1) = v40;
            v33 += 36;
            v32 += 36;
            v36 = v34 - 32;
            if (v34 == 32)
              goto LABEL_72;
            while (v36 >= 0x11)
            {
              result = FigCryptDecryptMemory(*v10, 1, 0, v32, 0x10uLL, &v58, v33, 0x10uLL, &v57, &v56);
              if ((_DWORD)result)
                return result;
              if (v58 != 16 || v57 != 16 || v56 != 0)
                return FigSignalErrorAt();
              v43 = v33 + 16;
              v44 = v32 + 16;
              v45 = v36 - 16;
              if (v36 - 16 >= 0x90)
                v46 = 144;
              else
                v46 = v36 - 16;
              memcpy(v43, v44, v46);
              v33 = &v43[v46];
              v32 = &v44[v46];
              v36 = v45 - v46;
              if (!v36)
                goto LABEL_72;
            }
            if (!v36)
              goto LABEL_72;
          }
          else
          {
            v36 = v34 + 4;
          }
          memcpy(v33, v32, v36);
          v33 += v36;
          v32 += v36;
LABEL_72:
          v31 += v34 + 4;
          if (v31 >= v7)
            return 0;
        }
      }
      if (FigCFEqual())
        return FigBasicAESCPECryptorDecryptH264_ISO_23001_7((CFDataRef *)DerivedStorage, (uint64_t)dataPointerOut, (uint64_t)v55, v7);
      if (FigCFEqual())
        return FigBasicAESCPECryptorDecryptAAC(DerivedStorage, dataPointerOut, v55, v7);
      if (FigCFEqual() || FigCFEqual())
      {
        v47 = dataPointerOut;
        v48 = v55;
        v49 = DerivedStorage;
        v50 = v7;
        v51 = 16;
        return FigBasicAESCPECryptorDecryptAudio(v49, v47, v48, v50, v51);
      }
      if (FigCFEqual())
        return FigBasicAESCPECryptorDecryptEAC3(DerivedStorage, dataPointerOut, v55, v7);
      if (FigCFEqual())
      {
        v47 = dataPointerOut;
        v48 = v55;
        v49 = DerivedStorage;
        v50 = v7;
        v51 = 0;
        return FigBasicAESCPECryptorDecryptAudio(v49, v47, v48, v50, v51);
      }
      if (FigCFEqual())
        return FigBasicAESCPECryptorDecryptH264_FPS(DerivedStorage, a2, a3);
      if (FigCFEqual())
        return FigBasicAESCPECryptorDecryptHEVC_FPS(DerivedStorage, a2, a3);
      if (FigCFEqual())
        return FigBasicAESCPECryptorDecrypt_ISO_23001_7_CBCS(DerivedStorage, (uint64_t)dataPointerOut, (uint64_t)v55, v7);
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t FigBasicAESCPECryptorGetAggregateExternalProtectionStatusIgnoringDisplays(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
    return 4294955146;
  v5 = DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 80));
  if (*(_BYTE *)(v5 + 73))
  {
    v6 = 4294954511;
  }
  else
  {
    v6 = 0;
    *a3 = FigCPEExternalProtectionMonitorGetStatusIgnoringDisplays(*(_QWORD *)(v5 + 88));
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v5 + 80));
  return v6;
}

uint64_t FigBasicAESCPECryptorDecryptH264_ISO_23001_7(CFDataRef *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const __CFData *v5;
  CFIndex Length;
  const __CFData *v10;
  const UInt8 *BytePtr;
  unint64_t v12;
  unint64_t v13;
  const __CFAllocator *v14;
  CFIndex v15;
  CFMutableDataRef Mutable;
  __CFData *v17;
  CFIndex v18;
  UInt8 *MutableBytePtr;
  const UInt8 *v20;
  size_t v21;
  const UInt8 *v22;
  const UInt8 *v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  size_t v29;
  size_t v30;
  uint64_t v31;
  size_t dataOutMoved;
  CCCryptorRef cryptorRef;

  cryptorRef = 0;
  v5 = a1[1];
  if (!v5)
    return 4294955138;
  if (!a1[2])
    return 4294955138;
  Length = CFDataGetLength(v5);
  if (Length < CFDataGetLength(a1[2]))
    return 4294955138;
  v10 = a1[3];
  if (!v10)
    return 4294955138;
  BytePtr = CFDataGetBytePtr(v10);
  v12 = CFDataGetLength(a1[3]);
  if (v12 < 8)
    return 0;
  v13 = v12;
  v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v15 = CFDataGetLength(a1[1]);
  Mutable = CFDataCreateMutable(v14, v15);
  if (!Mutable)
    return 4294955145;
  v17 = Mutable;
  v18 = CFDataGetLength(a1[1]);
  CFDataSetLength(v17, v18);
  MutableBytePtr = CFDataGetMutableBytePtr(v17);
  v20 = CFDataGetBytePtr(a1[2]);
  v21 = CFDataGetLength(a1[2]);
  memcpy(MutableBytePtr, v20, v21);
  v22 = CFDataGetBytePtr(v17);
  v23 = CFDataGetBytePtr(a1[1]);
  v24 = CFDataGetLength(a1[1]);
  v25 = CCCryptorCreateWithMode(1u, 4u, 0, 0, v22, v23, v24, 0, 0, 0, 2u, &cryptorRef);
  if (!(_DWORD)v25)
  {
    v26 = 0;
    if (v13 >> 3 <= 1)
      v27 = 1;
    else
      v27 = v13 >> 3;
    v28 = (unsigned int *)(BytePtr + 4);
    while (1)
    {
      dataOutMoved = 0;
      v29 = *(v28 - 1);
      if (a4 - v26 < v29)
        break;
      memcpy((void *)(a3 + v26), (const void *)(a2 + v26), v29);
      v30 = *v28;
      v26 += *(v28 - 1);
      if ((_DWORD)v30)
      {
        if (a4 - v26 < v30)
          break;
        v25 = CCCryptorUpdate(cryptorRef, (const void *)(a2 + v26), v30, (void *)(a3 + v26), *v28, &dataOutMoved);
        if ((_DWORD)v25)
          goto LABEL_23;
        v26 += *v28;
      }
      v28 += 2;
      if (!--v27)
      {
        v31 = 0;
        goto LABEL_19;
      }
    }
    v25 = FigSignalErrorAt();
  }
LABEL_23:
  v31 = v25;
LABEL_19:
  CFRelease(v17);
  if (cryptorRef)
    CCCryptorRelease(cryptorRef);
  return v31;
}

uint64_t FigBasicAESCPECryptorDecryptAAC(uint64_t a1, char *a2, char *a3, size_t a4)
{
  size_t v8;

  v8 = ADTSGetADTSHeaderSize((uint64_t)a2) + 16;
  return FigBasicAESCPECryptorDecryptAudio(a1, a2, a3, a4, v8);
}

uint64_t FigBasicAESCPECryptorDecryptAudio(uint64_t a1, char *__src, char *__dst, size_t __n, size_t a5)
{
  size_t v5;
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v11;
  uint64_t v12;
  UInt8 *BytePtr;
  uint64_t result;
  char v15;
  size_t v16;
  size_t v17;

  v5 = __n;
  v6 = __dst;
  v7 = __src;
  v8 = __n - a5;
  if (__n >= a5)
  {
    v16 = 0;
    v17 = 0;
    v15 = 0;
    if (a5)
    {
      memcpy(__dst, __src, a5);
      v7 += a5;
      v6 += a5;
      v5 = v8;
    }
    v11 = v5 & 0xFFFFFFFFFFFFFFF0;
    if ((v5 & 0xFFFFFFFFFFFFFFF0) != 0)
    {
      v12 = *(_QWORD *)(a1 + 32);
      BytePtr = (UInt8 *)CFDataGetBytePtr(*(CFDataRef *)(a1 + 16));
      CFDataGetLength(*(CFDataRef *)(a1 + 16));
      result = FigCryptSetIV(v12, BytePtr);
      if ((_DWORD)result)
        return result;
      result = FigCryptDecryptMemory(*(_QWORD *)(a1 + 32), 1, 0, v7, v5 & 0xFFFFFFFFFFFFFFF0, &v17, v6, v5 & 0xFFFFFFFFFFFFFFF0, &v16, &v15);
      if ((_DWORD)result)
        return result;
      if (v11 != v17 || v11 != v16 || v15)
        return FigSignalErrorAt();
      v7 += v11;
      v6 += v11;
    }
    v5 &= 0xFu;
  }
  if (v5)
    memcpy(v6, v7, v5);
  return 0;
}

uint64_t FigBasicAESCPECryptorDecryptEAC3(uint64_t a1, _BYTE *a2, char *a3, unint64_t a4)
{
  int v7;
  unint64_t v8;
  unsigned int FrameSize;
  size_t v10;
  _BYTE *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  UInt8 *BytePtr;
  uint64_t v17;
  char v19;
  size_t v20;
  size_t v21;

  if (!a4)
    return 0;
  v7 = 0;
  v8 = 0;
  while (1)
  {
    FrameSize = DolbyGetFrameSize(a2);
    v8 += FrameSize;
    if (v8 > a4)
      break;
    v10 = FrameSize;
    if (FrameSize >= 0x10)
    {
      v20 = 0;
      v21 = 0;
      v19 = 0;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      v11 = a2 + 16;
      v12 = a3 + 16;
      v13 = FrameSize & 0xFFFFFFF0;
      v14 = v13 - 16;
      if (v13 != 16)
      {
        if (!v7)
        {
          v17 = *(_QWORD *)(a1 + 32);
          BytePtr = (UInt8 *)CFDataGetBytePtr(*(CFDataRef *)(a1 + 16));
          CFDataGetLength(*(CFDataRef *)(a1 + 16));
          result = FigCryptSetIV(v17, BytePtr);
          if ((_DWORD)result)
            return result;
          v7 = 1;
        }
        result = FigCryptDecryptMemory(*(_QWORD *)(a1 + 32), 1, 0, a2 + 16, (v10 & 0xFFFFFFF0) - 16, &v21, a3 + 16, (v10 & 0xFFFFFFF0) - 16, &v20, &v19);
        if ((_DWORD)result)
          return result;
        if (v14 != v21 || v14 != v20 || v19)
          return FigSignalErrorAt();
        v11 = &a2[v13];
        v12 = &a3[v13];
      }
      v10 &= 0xFu;
      a3 = v12;
      a2 = v11;
    }
    if (v10)
    {
      memcpy(a3, a2, v10);
      a2 += v10;
      a3 += v10;
    }
    if (v8 >= a4)
      return 0;
  }
  return FigSignalErrorAt();
}

uint64_t FigBasicAESCPECryptorDecryptH264_FPS(uint64_t a1, OpaqueCMBlockBuffer *a2, OpaqueCMBlockBuffer *a3)
{
  const opaqueCMFormatDescription *v4;
  const __CFDictionary *Extensions;
  const __CFDictionary *Value;
  const __CFArray *v9;
  CFTypeID TypeID;
  uint64_t result;
  int v12;
  uint64_t v13;

  v4 = *(const opaqueCMFormatDescription **)(a1 + 48);
  if (!v4)
    return FigSignalErrorAt();
  if (*(_QWORD *)(a1 + 56))
    return FigBasicAESCPECryptorDecryptHLSfMP4NALs_FPS(a1, a2, a3, (uint64_t (*)(OpaqueCMBlockBuffer *, _QWORD, _QWORD, _QWORD, uint64_t *, uint64_t, _QWORD, unint64_t *, uint64_t *))MEMORY[0x1E0CA0BC8]);
  v13 = 0;
  Extensions = CMFormatDescriptionGetExtensions(v4);
  Value = (const __CFDictionary *)CFDictionaryGetValue(Extensions, (const void *)*MEMORY[0x1E0CA2240]);
  v9 = (const __CFArray *)CFDictionaryGetValue(Value, CFSTR("avcC"));
  if (v9)
  {
    TypeID = CFArrayGetTypeID();
    if (TypeID == CFGetTypeID(v9))
      CFArrayGetValueAtIndex(v9, 0);
  }
  result = FigH264Bridge_CreateHLSfMP4ParsingInfoFromAVCCData();
  if (!(_DWORD)result)
  {
    result = FigParseHLSfMP4SecurityInfoFromFormatDescriptionAndCopyIV(*(const opaqueCMFormatDescription **)(a1 + 48), 0, (_DWORD *)&v13 + 1, &v13, 0, 0);
    if (!(_DWORD)result)
    {
      v12 = v13;
      *(_DWORD *)(a1 + 64) = HIDWORD(v13);
      *(_DWORD *)(a1 + 68) = v12;
      return FigBasicAESCPECryptorDecryptHLSfMP4NALs_FPS(a1, a2, a3, (uint64_t (*)(OpaqueCMBlockBuffer *, _QWORD, _QWORD, _QWORD, uint64_t *, uint64_t, _QWORD, unint64_t *, uint64_t *))MEMORY[0x1E0CA0BC8]);
    }
  }
  return result;
}

uint64_t FigBasicAESCPECryptorDecryptHEVC_FPS(uint64_t a1, OpaqueCMBlockBuffer *a2, OpaqueCMBlockBuffer *a3)
{
  const opaqueCMFormatDescription *v4;
  const __CFDictionary *Extensions;
  const __CFDictionary *Value;
  const __CFArray *v9;
  CFTypeID TypeID;
  const __CFArray *v11;
  CFTypeID v12;
  uint64_t result;
  int v14;
  uint64_t v15;

  v4 = *(const opaqueCMFormatDescription **)(a1 + 48);
  if (!v4)
    return FigSignalErrorAt();
  if (*(_QWORD *)(a1 + 56))
    return FigBasicAESCPECryptorDecryptHLSfMP4NALs_FPS(a1, a2, a3, MEMORY[0x1E0CA0CC0]);
  v15 = 0;
  Extensions = CMFormatDescriptionGetExtensions(v4);
  Value = (const __CFDictionary *)CFDictionaryGetValue(Extensions, (const void *)*MEMORY[0x1E0CA2240]);
  v9 = (const __CFArray *)CFDictionaryGetValue(Value, CFSTR("hvcC"));
  if (v9)
  {
    TypeID = CFArrayGetTypeID();
    if (TypeID == CFGetTypeID(v9))
      CFArrayGetValueAtIndex(v9, 0);
  }
  v11 = (const __CFArray *)CFDictionaryGetValue(Value, CFSTR("lhvC"));
  if (v11)
  {
    v12 = CFArrayGetTypeID();
    if (v12 == CFGetTypeID(v11))
      CFArrayGetValueAtIndex(v11, 0);
  }
  result = FigHEVCBridge_CreateHLSfMP4ParsingInfoFromHVCCAndLHVCData();
  if (!(_DWORD)result)
  {
    result = FigParseHLSfMP4SecurityInfoFromFormatDescriptionAndCopyIV(*(const opaqueCMFormatDescription **)(a1 + 48), 0, (_DWORD *)&v15 + 1, &v15, 0, 0);
    if (!(_DWORD)result)
    {
      v14 = v15;
      *(_DWORD *)(a1 + 64) = HIDWORD(v15);
      *(_DWORD *)(a1 + 68) = v14;
      return FigBasicAESCPECryptorDecryptHLSfMP4NALs_FPS(a1, a2, a3, MEMORY[0x1E0CA0CC0]);
    }
  }
  return result;
}

uint64_t FigBasicAESCPECryptorDecrypt_ISO_23001_7_CBCS(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const __CFData *v5;
  CFIndex Length;
  const __CFData *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const UInt8 *v17;
  size_t v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  UInt8 *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  size_t v28;
  uint64_t v29;
  BOOL v30;
  size_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  const UInt8 *BytePtr;
  uint64_t v38;
  char v39;
  size_t v40;
  size_t v41;
  uint64_t v42;

  v5 = *(const __CFData **)(a1 + 8);
  if (!v5)
    return 4294955138;
  if (!*(_QWORD *)(a1 + 16))
    return 4294955138;
  Length = CFDataGetLength(v5);
  if (Length < CFDataGetLength(*(CFDataRef *)(a1 + 16)))
    return 4294955138;
  v10 = *(const __CFData **)(a1 + 24);
  if (!v10)
    return 4294955138;
  BytePtr = CFDataGetBytePtr(v10);
  v11 = CFDataGetLength(*(CFDataRef *)(a1 + 24));
  if (v11 < 8)
    return 0;
  v12 = v11;
  v42 = 0;
  v13 = FigParseHLSfMP4SecurityInfoFromFormatDescriptionAndCopyIV(*(const opaqueCMFormatDescription **)(a1 + 48), 0, (_DWORD *)&v42 + 1, &v42, 0, 0);
  if (!(_DWORD)v13)
  {
    v14 = 0;
    v15 = 0;
    v16 = v12 >> 3;
    if (v12 >> 3 <= 1)
      v16 = 1;
    v35 = a4;
    v36 = v16;
    while (1)
    {
      v17 = &BytePtr[8 * v14];
      v18 = *(unsigned int *)v17;
      if (a4 - v15 < v18)
        return FigSignalErrorAt();
      memcpy((void *)(a3 + v15), (const void *)(a2 + v15), v18);
      v15 += *(unsigned int *)v17;
      v21 = *((_DWORD *)v17 + 1);
      v20 = (unsigned int *)(v17 + 4);
      v19 = v21;
      if (v21)
      {
        if (a4 - v15 < v19)
          return FigSignalErrorAt();
        v22 = *(_QWORD *)(a1 + 32);
        v23 = (UInt8 *)CFDataGetBytePtr(*(CFDataRef *)(a1 + 16));
        CFDataGetLength(*(CFDataRef *)(a1 + 16));
        v24 = FigCryptSetIV(v22, v23);
        v25 = *v20;
        v38 = v25 & 0xFFFFFFF0;
        v26 = v15 + v38;
        if (v15 + 16 <= (unint64_t)(v15 + v38))
        {
          v27 = 16 * SHIDWORD(v42);
          while (1)
          {
            v40 = 0;
            v41 = 0;
            v39 = 0;
            v28 = v27;
            if (v15 + v27 > v26)
            {
              v28 = v26 - v15;
              if (((v26 - v15) & 0xF) != 0)
                break;
            }
            v29 = FigCryptDecryptMemory(*(_QWORD *)(a1 + 32), 0, 0, (const void *)(a2 + v15), v28, &v41, (char *)(a3 + v15), v28, &v40, &v39);
            if ((_DWORD)v29)
              return v29;
            v30 = v28 == v41 && v28 == v40;
            if (!v30 || v39 != 0)
              break;
            v15 += v28;
            if (v26 - v15 >= 16 * (int)v42)
              v32 = 16 * (int)v42;
            else
              v32 = v26 - v15;
            if (v32)
            {
              memcpy((void *)(a3 + v15), (const void *)(a2 + v15), v32);
              v15 += v32;
            }
            if (v15 + 16 > v26)
            {
              v13 = 0;
              v25 = *v20;
              a4 = v35;
              goto LABEL_34;
            }
          }
          return FigSignalErrorAt();
        }
        v13 = v24;
LABEL_34:
        v33 = v25 - v38;
        if (v25 != v38)
        {
          memcpy((void *)(a3 + v15), (const void *)(a2 + v15), v25 - v38);
          v15 += v33;
        }
      }
      if (++v14 == v36)
        return v13;
    }
  }
  return v13;
}

uint64_t FigBasicAESCPECryptorDecryptHLSfMP4NALs_FPS(uint64_t a1, OpaqueCMBlockBuffer *a2, OpaqueCMBlockBuffer *a3, uint64_t (*a4)(OpaqueCMBlockBuffer *, _QWORD, _QWORD, _QWORD, uint64_t *, uint64_t, _QWORD, unint64_t *, uint64_t *))
{
  uint64_t DataPointer;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  UInt8 *BytePtr;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  size_t v17;
  BOOL v18;
  size_t v20;
  uint64_t v21;
  size_t DataLength;
  uint64_t v25;
  unint64_t v26;
  char v27;
  size_t v28;
  size_t v29;
  char *v30;
  char *dataPointerOut;
  uint64_t v32;

  dataPointerOut = 0;
  v32 = 0;
  v29 = 0;
  v30 = 0;
  v28 = 0;
  v27 = 0;
  DataPointer = a4(a2, 0, 0, *(_QWORD *)(a1 + 56), &v32, 0, 0, 0, 0);
  if ((_DWORD)DataPointer)
    return DataPointer;
  DataPointer = CMBlockBufferGetDataPointer(a2, 0, 0, 0, &dataPointerOut);
  if ((_DWORD)DataPointer)
    return DataPointer;
  v8 = CMBlockBufferGetDataPointer(a3, 0, 0, 0, &v30);
  if (!*(_QWORD *)(a1 + 56))
    return FigSignalErrorAt();
  if (v32 >= 1)
  {
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v25 = 0;
      v26 = 0;
      DataPointer = a4(a2, 0, 0, *(_QWORD *)(a1 + 56), 0, v10, 0, &v26, &v25);
      if ((_DWORD)DataPointer)
        return DataPointer;
      v11 = *(_QWORD *)(a1 + 32);
      BytePtr = (UInt8 *)CFDataGetBytePtr(*(CFDataRef *)(a1 + 16));
      CFDataGetLength(*(CFDataRef *)(a1 + 16));
      DataPointer = FigCryptSetIV(v11, BytePtr);
      if ((_DWORD)DataPointer)
        return DataPointer;
      v13 = v26;
      if (v26 > v9)
      {
        memcpy(&v30[v9], &dataPointerOut[v9], v26 - v9);
        v9 = v13;
      }
      v14 = v25 & 0xFFFFFFFFFFFFFFF0;
      if (*(_DWORD *)(a1 + 68))
      {
        v15 = v26 + v14;
        if (v9 + 16 <= v26 + v14)
        {
          v16 = (16 * *(_DWORD *)(a1 + 64));
          while (1)
          {
            v17 = v16;
            if (v9 + v16 > v15)
            {
              v17 = v15 - v9;
              if (((v15 - v9) & 0xF) != 0)
                break;
            }
            DataPointer = FigCryptDecryptMemory(*(_QWORD *)(a1 + 32), 1, 0, &dataPointerOut[v9], v17, &v29, &v30[v9], v17, &v28, &v27);
            if ((_DWORD)DataPointer)
              return DataPointer;
            v18 = v17 == v29 && v17 == v28;
            if (!v18 || v27 != 0)
              break;
            v9 += v17;
            if (v15 - v9 >= (16 * *(_DWORD *)(a1 + 68)))
              v20 = (16 * *(_DWORD *)(a1 + 68));
            else
              v20 = v15 - v9;
            if (v20)
            {
              memcpy(&v30[v9], &dataPointerOut[v9], v20);
              v9 += v20;
            }
            if (v9 + 16 > v15)
              goto LABEL_37;
          }
          return FigSignalErrorAt();
        }
      }
      else if (v14)
      {
        DataPointer = FigCryptDecryptMemory(*(_QWORD *)(a1 + 32), 1, 0, &dataPointerOut[v26], v25 & 0xFFFFFFFFFFFFFFF0, &v29, &v30[v26], v25 & 0xFFFFFFFFFFFFFFF0, &v28, &v27);
        if ((_DWORD)DataPointer)
          return DataPointer;
        if (v14 != v29 || v14 != v28 || v27)
          return FigSignalErrorAt();
        v9 += v14;
      }
LABEL_37:
      if (++v10 >= v32)
      {
        v21 = 0;
        goto LABEL_40;
      }
    }
  }
  v21 = v8;
  v9 = 0;
LABEL_40:
  DataLength = CMBlockBufferGetDataLength(a2);
  if (DataLength != v9)
    memcpy(&v30[v9], &dataPointerOut[v9], DataLength - v9);
  return v21;
}

uint64_t fnpe_GetInterfaceType(uint64_t result)
{
  if (result)
  {
    switch(nw_interface_get_type((nw_interface_t)result))
    {
      case nw_interface_type_wifi:
        if (nw_interface_get_subtype() == 1002)
          result = 4;
        else
          result = 3;
        break;
      case nw_interface_type_cellular:
        result = 5;
        break;
      case nw_interface_type_wired:
        result = 2;
        break;
      case nw_interface_type_loopback:
        result = 1;
        break;
      default:
        result = 0;
        break;
    }
  }
  return result;
}

uint64_t FigNetworkInterfaceGetTypeFromName()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t InterfaceType;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (FigCFStringGetCStringPtrAndBufferToFree())
  {
    v0 = nw_interface_create_with_name();
    v1 = v0;
    if (v0)
    {
      InterfaceType = fnpe_GetInterfaceType(v0);
      goto LABEL_4;
    }
  }
  else
  {
    v1 = 0;
  }
  InterfaceType = 0;
LABEL_4:
  if (v1)
    network_release();
  return InterfaceType;
}

BOOL FigNetworkInterfaceIsCellular(int a1)
{
  return a1 == 5 || a1 == 102;
}

BOOL FigNetworkInterfaceIsProxied(int a1)
{
  return a1 == 102 || (a1 & 0xFFFFFFFD) == 101;
}

BOOL FigNetworkInterfaceIsLocal(int a1)
{
  return a1 == 1;
}

uint64_t FigNetworkInterfaceGetInterfaceTypeFromCFNStats(uint64_t result)
{
  const __CFDictionary *v1;
  const void *v2;
  const void *v3;
  __int128 v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  void *value;

  value = 0;
  if (!result)
    return result;
  v1 = (const __CFDictionary *)result;
  if (CFDictionaryGetValueIfPresent((CFDictionaryRef)result, CFSTR("_kCFNTimingDataConnectionInterfaceIdentifier"), (const void **)&value))
  {
    return FigNetworkInterfaceGetTypeFromName();
  }
  v2 = CFDictionaryGetValue(v1, CFSTR("_kCFNTimingDataConnectionStartTimeCounts"));
  v3 = CFDictionaryGetValue(v1, CFSTR("_kCFNTimingDataConnectionStopTimeCounts"));
  if (v3)
  {
    v16 = 0uLL;
    v15 = 0;
    figHTTPRequestStatsGetInterfaceCounts(v3, (_QWORD *)&v16 + 1, &v16, &v15);
    v4 = v16;
    v5 = v15;
    if (*((_QWORD *)&v16 + 1) && __PAIR128__(v16, v15) == 0)
      return 2;
    if ((_QWORD)v16 && !(v15 | *((_QWORD *)&v16 + 1)))
      return 3;
    v6 = v16 != 0 || v15 == 0;
    if (v6)
      result = 0;
    else
      result = 5;
    if (v6 && v2)
    {
      v13 = 0;
      v14 = 0;
      v12 = 0;
      figHTTPRequestStatsGetInterfaceCounts(v2, &v14, &v13, &v12);
      v7 = v4 - v13;
      v8 = v5 - v12;
      v9 = *((_QWORD *)&v4 + 1) - v14;
      if (*((_QWORD *)&v4 + 1) == v14 || v8 | v7)
      {
        if ((_QWORD)v4 == v13 || v8 | v9)
        {
          if (v7 | v9)
            v10 = 1;
          else
            v10 = v5 == v12;
          if (v10)
            return 0;
          else
            return 5;
        }
        return 3;
      }
      return 2;
    }
  }
  else
  {
    if (!v2)
      return 0;
    v16 = 0uLL;
    v15 = 0;
    figHTTPRequestStatsGetInterfaceCounts(v2, (_QWORD *)&v16 + 1, &v16, &v15);
    if (*((_QWORD *)&v16 + 1) && __PAIR128__(v16, v15) == 0)
      return 2;
    if ((_QWORD)v16 && !(v15 | *((_QWORD *)&v16 + 1)))
      return 3;
    if (v15)
      v11 = v16 == 0;
    else
      v11 = 0;
    if (v11)
      return 5;
    else
      return 0;
  }
  return result;
}

CFTypeID figHTTPRequestStatsGetInterfaceCounts(const void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  CFTypeID v8;
  CFTypeID result;
  const __CFNumber *Value;
  const __CFNumber *v11;
  const __CFNumber *v12;
  uint64_t valuePtr;

  v8 = CFGetTypeID(a1);
  result = CFDictionaryGetTypeID();
  if (v8 == result)
  {
    Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("_kCFNTimingDataNStatWifiRXPackets"));
    v11 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("_kCFNTimingDataNStatCellRXPackets"));
    result = (CFTypeID)CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("_kCFNTimingDataNStatWiredRXPackets"));
    v12 = (const __CFNumber *)result;
    if (Value)
    {
      valuePtr = 0;
      result = CFNumberGetValue(Value, kCFNumberLongLongType, &valuePtr);
      *a3 = valuePtr;
    }
    if (v11)
    {
      valuePtr = 0;
      result = CFNumberGetValue(v11, kCFNumberLongLongType, &valuePtr);
      *a4 = valuePtr;
    }
    if (v12)
    {
      valuePtr = 0;
      result = CFNumberGetValue(v12, kCFNumberLongLongType, &valuePtr);
      *a2 = valuePtr;
    }
  }
  return result;
}

uint64_t FigAssetDownloaderGetClassID()
{
  MEMORY[0x19402F294](&FigAssetDownloaderGetClassID_sRegisterFigAssetDownloaderBaseTypeOnce, RegisterFigAssetDownloaderBaseType);
  return sFigAssetDownloaderClassID;
}

uint64_t RegisterFigAssetDownloaderBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigAssetDownloaderGetTypeID()
{
  MEMORY[0x19402F294](&FigAssetDownloaderGetClassID_sRegisterFigAssetDownloaderBaseTypeOnce, RegisterFigAssetDownloaderBaseType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigAssetDownloaderRegisterDestinationLocation(uint64_t a1, uint64_t a2)
{
  return FigAssetDownloadCoordinatorRegisterAssetForDownloader(a1, 0, a2, 0, 0, 0);
}

CFStringRef FigAssetDownloaderCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigAssetDownloader %p]"), a1);
}

uint64_t FigTTMLSynchronicTreeGetTypeID()
{
  MEMORY[0x19402F294](&FigTTMLSynchronicTreeGetTypeID_sRegisterFigTTMLSynchronicTreeOnce, RegisterFigTTMLSynchronicTree);
  return sFigTTMLSynchronicTreeID;
}

uint64_t RegisterFigTTMLSynchronicTree()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigTTMLSynchronicTreeID = result;
  return result;
}

uint64_t FigTTMLTreeCreateSynchronicTree(const __CFAllocator *a1, void *a2, __int128 *a3, const void *a4, uint64_t *a5)
{
  __CFArray *Mutable;
  uint64_t Instance;
  CFTypeRef v12;
  __int128 v13;
  CFTypeRef v14;
  uint64_t appended;
  CFIndex Count;
  uint64_t v17;
  __int128 v19;
  uint64_t v20;
  CFRange v21;
  CFRange v22;

  Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  if (!a5)
  {
    v17 = FigSignalErrorAt();
LABEL_11:
    Instance = 0;
    if (!Mutable)
      goto LABEL_13;
    goto LABEL_12;
  }
  MEMORY[0x19402F294](&FigTTMLSynchronicTreeGetTypeID_sRegisterFigTTMLSynchronicTreeOnce, RegisterFigTTMLSynchronicTree);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    if (a2)
      v12 = CFRetain(a2);
    else
      v12 = 0;
    *(_QWORD *)(Instance + 16) = v12;
    v13 = *a3;
    *(_QWORD *)(Instance + 40) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(Instance + 24) = v13;
    if (a4)
      v14 = CFRetain(a4);
    else
      v14 = 0;
    *(_QWORD *)(Instance + 48) = v14;
    *(_QWORD *)(Instance + 56) = CFSetCreateMutable(a1, 0, MEMORY[0x1E0C9B3B0]);
    v19 = *a3;
    v20 = *((_QWORD *)a3 + 2);
    appended = FigTTMLTreeAppendActiveNodesToArray((uint64_t *)a2, (uint64_t)&v19, Mutable);
    if (!(_DWORD)appended)
    {
      Count = CFArrayGetCount(Mutable);
      v21.location = 0;
      v21.length = Count;
      CFArraySortValues(Mutable, v21, (CFComparatorFunction)figTTMLSynchronicTreeCompareDocumentOrderIndex, (void *)0xFFFFFFFFFFFFFFFFLL);
      v22.location = 0;
      v22.length = Count;
      CFArrayApplyFunction(Mutable, v22, (CFArrayApplierFunction)figTTMLSynchronicTreeAddEligibleNodes, (void *)Instance);
      v17 = 0;
      *a5 = Instance;
      goto LABEL_11;
    }
  }
  else
  {
    appended = FigSignalErrorAt();
  }
  v17 = appended;
  if (Mutable)
LABEL_12:
    CFRelease(Mutable);
LABEL_13:
  if (Instance)
    CFRelease((CFTypeRef)Instance);
  return v17;
}

uint64_t figTTMLSynchronicTreeCompareDocumentOrderIndex(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t DocumentOrderIndex;
  uint64_t v5;
  uint64_t v6;

  DocumentOrderIndex = FigTTMLNodeGetDocumentOrderIndex();
  v5 = FigTTMLNodeGetDocumentOrderIndex();
  v6 = DocumentOrderIndex > v5;
  if (DocumentOrderIndex < v5)
    v6 = -1;
  return v6 * a3;
}

void figTTMLSynchronicTreeAddEligibleNodes(const void *a1, uint64_t a2)
{
  uint64_t v5;
  int IsAssociatedWithRegionID;
  const __CFSet *v7;
  _BOOL4 v8;
  CFIndex Count;
  CFIndex v10;
  CFIndex v11;
  const void *ValueAtIndex;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  CFTypeRef cf;

  v15 = 0;
  if (!FigTTMLNodeGetNodeType((uint64_t)a1, (uint64_t)&v15) && ((v15 - 2) < 5 || v15 == 14))
  {
    v5 = *(_QWORD *)(a2 + 48);
    cf = 0;
    if (!v5)
      goto LABEL_13;
    if (FigTTMLRegionCopyID(v5, &cf))
      IsAssociatedWithRegionID = 0;
    else
      IsAssociatedWithRegionID = FigTTMLNodeIsAssociatedWithRegionID(a1, cf);
    if (cf)
      CFRelease(cf);
    if (IsAssociatedWithRegionID)
    {
LABEL_13:
      v7 = *(const __CFSet **)(a2 + 56);
      cf = 0;
      v16 = 0;
      FigTTMLNodeGetNodeType((uint64_t)a1, (uint64_t)&v16);
      if ((v16 & 0xFFFFFFF7) == 6)
      {
        v8 = 1;
      }
      else
      {
        FigTTMLNodeCopyChildNodeArray((uint64_t)a1, (uint64_t)&cf);
        if (!cf)
          return;
        Count = CFArrayGetCount((CFArrayRef)cf);
        v10 = Count - 1;
        if (Count < 1)
        {
          v8 = 0;
        }
        else
        {
          v11 = 0;
          do
          {
            ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, v11);
            v13 = CFSetContainsValue(v7, ValueAtIndex);
            v8 = v13 != 0;
            if (v13)
              v14 = 1;
            else
              v14 = v10 == v11;
            ++v11;
          }
          while (!v14);
        }
      }
      if (cf)
        CFRelease(cf);
      if (v8)
        CFSetAddValue(*(CFMutableSetRef *)(a2 + 56), a1);
    }
  }
}

uint64_t FigTTMLSynchronicTreeCopyTextNodeArray(uint64_t a1, CFMutableArrayRef *a2)
{
  CFMutableArrayRef Mutable;
  uint64_t v5;
  CFRange v7;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (a2)
  {
    CFSetApplyFunction(*(CFSetRef *)(a1 + 56), (CFSetApplierFunction)figTTMLSynchronicTreeCollectTextNode, Mutable);
    v7.length = CFArrayGetCount(Mutable);
    v7.location = 0;
    CFArraySortValues(Mutable, v7, (CFComparatorFunction)figTTMLSynchronicTreeCompareDocumentOrderIndex, (void *)1);
    v5 = 0;
    *a2 = Mutable;
  }
  else
  {
    v5 = FigSignalErrorAt();
    if (Mutable)
      CFRelease(Mutable);
  }
  return v5;
}

void figTTMLSynchronicTreeCollectTextNode(const void *a1, __CFArray *a2)
{
  int v4;

  v4 = 0;
  if (!FigTTMLNodeGetNodeType((uint64_t)a1, (uint64_t)&v4) && v4 == 14)
    CFArrayAppendValue(a2, a1);
}

uint64_t FigTTMLSynchronicTreeCopyCaptionArray(uint64_t a1, CFMutableArrayRef *a2)
{
  const __CFAllocator *v4;
  const CFArrayCallBacks *v5;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v7;
  const __CFArray *v8;
  CFIndex Count;
  CFIndex v10;
  __CFArray *v11;
  CFIndex v12;
  CFMutableArrayRef v13;
  const void *ValueAtIndex;
  CFMutableArrayRef v15;
  uint64_t v16;
  __CFArray **v18;
  _QWORD context[2];
  CFRange v20;
  CFRange v21;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v5 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v7 = CFArrayCreateMutable(v4, 0, v5);
  v8 = v7;
  if (a2 && Mutable)
  {
    if (!v7)
    {
      v16 = FigSignalErrorAt();
      goto LABEL_16;
    }
    CFSetApplyFunction(*(CFSetRef *)(a1 + 56), (CFSetApplierFunction)figTTMLSynchronicTreeCollectCaptionNode, v7);
    v20.length = CFArrayGetCount(v8);
    v20.location = 0;
    CFArraySortValues(v8, v20, (CFComparatorFunction)figTTMLSynchronicTreeCompareDocumentOrderIndex, (void *)1);
    Count = CFArrayGetCount(v8);
    if (!Count)
    {
      v16 = 0;
      *a2 = Mutable;
      Mutable = 0;
      goto LABEL_15;
    }
    v10 = Count;
    v18 = a2;
    v11 = Mutable;
    v12 = 0;
    v13 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v8, v12);
      if (v13)
        CFRelease(v13);
      v15 = CFArrayCreateMutable(v4, 0, MEMORY[0x1E0C9B378]);
      if (!v15)
        break;
      v13 = v15;
      context[0] = ValueAtIndex;
      context[1] = v15;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 56), (CFSetApplierFunction)figTTMLSynchronicTreeCollectDescendantTextNode, context);
      v21.length = CFArrayGetCount(v13);
      v21.location = 0;
      CFArraySortValues(v13, v21, (CFComparatorFunction)figTTMLSynchronicTreeCompareDocumentOrderIndex, (void *)1);
      CFArrayAppendValue(v11, v13);
      if (v10 == ++v12)
      {
        *v18 = v11;
        CFRelease(v13);
        v16 = 0;
        Mutable = 0;
        goto LABEL_11;
      }
    }
    v16 = FigSignalErrorAt();
    Mutable = v11;
  }
  else
  {
    v16 = FigSignalErrorAt();
  }
LABEL_11:
  if (!v8)
  {
    if (!Mutable)
      return v16;
    goto LABEL_16;
  }
LABEL_15:
  CFRelease(v8);
  if (Mutable)
LABEL_16:
    CFRelease(Mutable);
  return v16;
}

void figTTMLSynchronicTreeCollectCaptionNode(const void *a1, __CFArray *a2)
{
  int v4;

  v4 = 0;
  if (!FigTTMLNodeGetNodeType((uint64_t)a1, (uint64_t)&v4) && v4 == 4)
    CFArrayAppendValue(a2, a1);
}

void figTTMLSynchronicTreeCollectDescendantTextNode(const void *a1, uint64_t a2)
{
  uint64_t ParentNode;
  int v5;

  v5 = 0;
  if (!FigTTMLNodeGetNodeType((uint64_t)a1, (uint64_t)&v5) && (v5 & 0xFFFFFFF7) == 6)
  {
    while (1)
    {
      ParentNode = FigTTMLNodeGetParentNode();
      if (!ParentNode)
        break;
      if (ParentNode == *(_QWORD *)a2)
      {
        CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 8), a1);
        return;
      }
    }
  }
}

uint64_t FigTTMLSynchronicTreeCopyCSS(uint64_t a1, const void *a2, _QWORD *a3)
{
  void *v6;
  void *v7;
  uint64_t result;
  uint64_t v9;
  void *value;

  v6 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 72), a2);
  value = v6;
  if (v6)
  {
    v7 = (void *)CFRetain(v6);
    result = 0;
LABEL_5:
    *a3 = v7;
    return result;
  }
  result = FigTTMLSynchronicTreeCopySSS(a1, a2, &value);
  if (!(_DWORD)result)
  {
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 72), a2, value);
    result = 0;
    v7 = value;
    goto LABEL_5;
  }
  if (value)
  {
    v9 = result;
    CFRelease(value);
    return v9;
  }
  return result;
}

uint64_t FigTTMLSynchronicTreeCopySSS(uint64_t a1, const void *a2, _QWORD *a3)
{
  _QWORD *v3;
  const void *v4;
  uint64_t v5;
  const void *Value;
  __CFArray *v7;
  CFMutableDictionaryRef Mutable;
  uint64_t v9;
  const __CFAllocator *v10;
  uint64_t v11;
  uint64_t NodeType;
  CFIndex i;
  CFIndex Count;
  const void *ValueAtIndex;
  uint64_t DocumentOrderIndex;
  CFStringRef v17;
  const void **v18;
  uint64_t v19;
  const __CFString *v20;
  CFIndex v21;
  CFIndex v22;
  CFIndex v23;
  void *v24;
  const void *NodeByID;
  const void *v26;
  uint64_t v27;
  uint64_t ParentNode;
  const __CFArray *v29;
  uint64_t v30;
  CFMutableArrayRef v31;
  __CFArray *v32;
  CFIndex j;
  CFIndex v34;
  const void *v35;
  uint64_t ActiveTimeRange;
  CFIndex v37;
  const void *v38;
  uint64_t v39;
  const __CFDictionary *v40;
  const __CFArray *v41;
  CFIndex v42;
  const void *v43;
  const __CFArray *v44;
  const __CFArray *v45;
  CFIndex v46;
  const __CFArray *v47;
  const __CFDictionary *v48;
  uint64_t v49;
  double Seconds;
  const void *InitialValue;
  CFTypeRef v52;
  CFIndex v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  const __CFArray *v57;
  const __CFDictionary *v58;
  double v59;
  unint64_t v60;
  const __CFDictionary *v61;
  __CFArray *v63;
  uint64_t v64;
  const void *v65;
  _QWORD *v66;
  uint64_t v67;
  int v68;
  const __CFArray *v69;
  const __CFAllocator *allocator;
  const __CFArray *v71;
  const __CFDictionary *v72;
  _QWORD context[3];
  uint64_t v74;
  CFTypeRef v75;
  CFDictionaryRef theDict;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  CFArrayRef v80;
  int v81;
  _BYTE theArray[56];
  CFTypeRef v83;
  CMTime lhs;
  CMTime v85;
  CMTime rhs;
  CMTime time;
  double v88;
  CMTimeRange cf;
  CMTime time2;
  CMTime v91;
  unint64_t v92;
  const void *v93;
  __int128 v94;
  __int128 v95;
  int v96;
  __int128 v97;
  __int128 v98;
  int v99;
  uint64_t v100;
  CFRange v101;

  v100 = *MEMORY[0x1E0C80C00];
  v75 = 0;
  theDict = 0;
  if (!a3)
  {
    v9 = FigSignalErrorAt();
    Mutable = 0;
    goto LABEL_150;
  }
  v3 = a3;
  v4 = a2;
  v5 = a1;
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), a2);
  if (Value)
  {
    v7 = 0;
    Mutable = 0;
    v9 = 0;
    *v3 = CFRetain(Value);
    goto LABEL_146;
  }
  v10 = CFGetAllocator((CFTypeRef)v5);
  Mutable = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v11 = FigSignalErrorAt();
    goto LABEL_161;
  }
  v11 = FigTTMLNodeCopyAttributes((uint64_t)v4, &theDict);
  if ((_DWORD)v11)
  {
LABEL_161:
    v9 = v11;
LABEL_35:
    v7 = 0;
    goto LABEL_146;
  }
  CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)figTTMLSynchronicTreeAppendStyleAttribute, Mutable);
  LODWORD(v77) = 0;
  *(_QWORD *)theArray = 0;
  cf.start.value = 0;
  NodeType = FigTTMLNodeGetNodeType((uint64_t)v4, (uint64_t)&v77);
  if (!(_DWORD)NodeType)
  {
    if ((_DWORD)v77 != 10)
    {
LABEL_20:
      v9 = 0;
      goto LABEL_21;
    }
    NodeType = FigTTMLNodeCopyChildNodeArray((uint64_t)v4, (uint64_t)theArray);
    if (!(_DWORD)NodeType)
    {
      for (i = 0; ; ++i)
      {
        Count = *(_QWORD *)theArray;
        if (*(_QWORD *)theArray)
          Count = CFArrayGetCount(*(CFArrayRef *)theArray);
        if (i >= Count)
          break;
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)theArray, i);
        NodeType = FigTTMLNodeGetNodeType((uint64_t)ValueAtIndex, (uint64_t)&v77);
        if ((_DWORD)NodeType)
          goto LABEL_155;
        if ((_DWORD)v77 == 13)
        {
          if (cf.start.value)
          {
            CFRelease((CFTypeRef)cf.start.value);
            cf.start.value = 0;
          }
          NodeType = FigTTMLSynchronicTreeCopySSS(v5, ValueAtIndex, &cf);
          if ((_DWORD)NodeType)
            goto LABEL_155;
          CFDictionaryApplyFunction((CFDictionaryRef)cf.start.value, (CFDictionaryApplierFunction)figTTMLSynchronicTreeMergeStyleset, Mutable);
        }
      }
      goto LABEL_20;
    }
  }
LABEL_155:
  v9 = NodeType;
LABEL_21:
  if (cf.start.value)
    CFRelease((CFTypeRef)cf.start.value);
  if (*(_QWORD *)theArray)
    CFRelease(*(CFTypeRef *)theArray);
  if ((_DWORD)v9)
    goto LABEL_35;
  CFDictionaryGetValue(Mutable, CFSTR("http://namespace.itunes.apple.com/itt/ttml-extension#ruby kind"));
  FigCaptionDynamicStyleGetInitialValue();
  if (FigCFEqual())
  {
    DocumentOrderIndex = FigTTMLNodeGetDocumentOrderIndex();
    v17 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%ld"), DocumentOrderIndex);
    *(_QWORD *)theArray = 0;
    v9 = FigCaptionDynamicStyleCreate();
    v18 = (const void **)&kFigTTML_AttributeKey_ry_rubyID;
  }
  else
  {
    CFDictionaryGetValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling ruby"));
    FigCaptionDynamicStyleGetInitialValue();
    if (!FigCFEqual())
      goto LABEL_36;
    v19 = FigTTMLNodeGetDocumentOrderIndex();
    v17 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%ld"), v19);
    *(_QWORD *)theArray = 0;
    v9 = FigCaptionDynamicStyleCreate();
    v18 = (const void **)&kFigTTML_AttributeKey_tts_rubyID;
  }
  CFDictionaryAddValue(Mutable, *v18, *(const void **)theArray);
  if (*(_QWORD *)theArray)
    CFRelease(*(CFTypeRef *)theArray);
  if (v17)
    CFRelease(v17);
  if ((_DWORD)v9)
    goto LABEL_35;
LABEL_36:
  v20 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("style"));
  if (v20)
  {
    v7 = FigTTMLCreateReversedStringArrayFromNMTOKENS(v20);
    v21 = CFArrayGetCount(v7);
    if (v21 >= 1)
    {
      v22 = v21;
      v23 = 0;
      while (1)
      {
        v24 = (void *)CFArrayGetValueAtIndex(v7, v23);
        NodeByID = FigTTMLTreeGetNodeByID(*(_QWORD *)(v5 + 16), v24);
        *(_DWORD *)theArray = 0;
        if (!NodeByID)
          goto LABEL_139;
        v26 = NodeByID;
        v27 = FigTTMLNodeGetNodeType((uint64_t)NodeByID, (uint64_t)theArray);
        if ((_DWORD)v27)
          break;
        if (*(_DWORD *)theArray != 13)
          goto LABEL_139;
        ParentNode = FigTTMLNodeGetParentNode();
        if (!ParentNode)
          goto LABEL_139;
        v27 = FigTTMLNodeGetNodeType(ParentNode, (uint64_t)theArray);
        if ((_DWORD)v27)
          break;
        if (*(_DWORD *)theArray != 12)
        {
LABEL_139:
          v9 = 4294950725;
          goto LABEL_146;
        }
        if (v75)
        {
          CFRelease(v75);
          v75 = 0;
        }
        v27 = FigTTMLSynchronicTreeCopySSS(v5, v26, &v75);
        if ((_DWORD)v27)
          break;
        CFDictionaryApplyFunction((CFDictionaryRef)v75, (CFDictionaryApplierFunction)figTTMLSynchronicTreeMergeStyleset, Mutable);
        if (v22 == ++v23)
          goto LABEL_51;
      }
      v9 = v27;
      goto LABEL_146;
    }
  }
  else
  {
    v7 = 0;
  }
LABEL_51:
  v29 = (const __CFArray *)FigTTMLGetInheritableStyleAttributeNames();
  context[0] = v5;
  context[1] = v4;
  context[2] = Mutable;
  v74 = 0;
  v101.length = CFArrayGetCount(v29);
  v101.location = 0;
  CFArrayApplyFunction(v29, v101, (CFArrayApplierFunction)figTTMLSynchronicTreeInheritStyle, context);
  v9 = v74;
  if (!(_DWORD)v74)
  {
    v81 = 0;
    v80 = 0;
    v30 = FigTTMLNodeCopyChildNodeArray((uint64_t)v4, (uint64_t)&v80);
    if (!(_DWORD)v30)
    {
      allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v31 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      if (v31)
      {
        v32 = v31;
        for (j = 0; ; ++j)
        {
          v34 = (CFIndex)v80;
          if (v80)
            v34 = CFArrayGetCount(v80);
          if (j >= v34)
            break;
          v35 = CFArrayGetValueAtIndex(v80, j);
          ActiveTimeRange = FigTTMLNodeGetNodeType((uint64_t)v35, (uint64_t)&v81);
          if ((_DWORD)ActiveTimeRange)
            goto LABEL_156;
          if (v81 == 1)
            CFArrayAppendValue(v32, v35);
        }
        if (CFArrayGetCount(v32) < 1)
        {
          v9 = 0;
        }
        else
        {
          v78 = 0u;
          v79 = 0u;
          v77 = 0u;
          ActiveTimeRange = FigTTMLNodeGetActiveTimeRange((uint64_t)v4, (uint64_t)&v77);
          if (!(_DWORD)ActiveTimeRange)
          {
            v94 = v77;
            v95 = v78;
            v68 = DWORD1(v79);
            v96 = v79;
            v67 = *((_QWORD *)&v79 + 1);
            v72 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            v83 = 0;
            v71 = v32;
            v65 = v4;
            v66 = v3;
            v63 = v7;
            v64 = v5;
            if (CFArrayGetCount(v32))
            {
              v37 = 0;
              while (1)
              {
                v38 = CFArrayGetValueAtIndex(v32, v37);
                if (v83)
                {
                  CFRelease(v83);
                  v83 = 0;
                }
                v39 = FigTTMLNodeCopyAttributes((uint64_t)v38, &v83);
                if ((_DWORD)v39)
                  break;
                memset(&cf, 0, sizeof(cf));
                v39 = FigTTMLNodeGetActiveTimeRange((uint64_t)v38, (uint64_t)&cf);
                if ((_DWORD)v39)
                  break;
                *(_QWORD *)theArray = v72;
                *(CMTimeRange *)&theArray[8] = cf;
                CFDictionaryApplyFunction((CFDictionaryRef)v83, (CFDictionaryApplierFunction)figTTMLSynchronicTreeBuildStyleNameToValueTimelineMap, theArray);
                ++v37;
                v32 = v71;
                if (v37 == CFArrayGetCount(v71))
                  goto LABEL_71;
              }
              v9 = v39;
              v32 = v71;
              v40 = v72;
              goto LABEL_135;
            }
LABEL_71:
            v40 = v72;
            CFDictionaryApplyFunction(v72, (CFDictionaryApplierFunction)figTTMLSynchronicTreeSortTimeline, 0);
            MEMORY[0x19402F294](&figTTMLSynchronicTreeGetAnimatableStyles_sInitializeAnimatableStylesOnce, figTTMLSynchronicTreeInitializeAnimatableStylesOnce);
            v41 = (const __CFArray *)sAnimatableStyles;
            if (!CFArrayGetCount((CFArrayRef)sAnimatableStyles))
            {
LABEL_134:
              v9 = 0;
LABEL_135:
              if (v83)
                CFRelease(v83);
              v4 = v65;
              v3 = v66;
              v7 = v63;
              v5 = v64;
              if (v40)
                CFRelease(v40);
              goto LABEL_141;
            }
            v42 = 0;
            v69 = v41;
            while (1)
            {
              v43 = CFArrayGetValueAtIndex(v41, v42);
              v44 = (const __CFArray *)CFDictionaryGetValue(v40, v43);
              if (!v44)
                goto LABEL_127;
              v45 = v44;
              v97 = v94;
              v98 = v95;
              v99 = v96;
              v92 = 0;
              v93 = 0;
              v91 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E28];
              if (CFArrayGetCount(v44))
              {
                v46 = 0;
                while (1)
                {
                  v47 = (const __CFArray *)CFArrayGetValueAtIndex(v45, v46);
                  v48 = (const __CFDictionary *)CFArrayGetValueAtIndex(v47, 0);
                  memset(theArray, 0, 48);
                  CMTimeRangeMakeFromDictionary((CMTimeRange *)theArray, v48);
                  cf.start = v91;
                  time2 = *(CMTime *)theArray;
                  if (CMTimeCompare(&cf.start, &time2) > 0)
                    break;
                  cf = *(CMTimeRange *)theArray;
                  CMTimeRangeGetEnd(&v91, &cf);
                  if (++v46 == CFArrayGetCount(v45))
                    goto LABEL_78;
                }
                v9 = FigSignalErrorAt();
                v52 = 0;
              }
              else
              {
LABEL_78:
                if (!CFDictionaryGetValue(Mutable, v43))
                {
                  v52 = 0;
                  v9 = 0;
LABEL_133:
                  v32 = v71;
                  goto LABEL_120;
                }
                FigCaptionDynamicStyleGetInitialValue();
                v49 = FigCaptionDynamicStyleCreateMutable();
                if ((_DWORD)v49)
                {
                  v9 = v49;
                  v52 = 0;
                  goto LABEL_133;
                }
                *(_OWORD *)&time2.value = v94;
                time2.epoch = v95;
                if ((v68 & 0x1D) == 1)
                {
                  *(_QWORD *)theArray = *((_QWORD *)&v98 + 1);
                  *(_DWORD *)&theArray[8] = v99;
                  *(_DWORD *)&theArray[12] = v68;
                  *(_QWORD *)&theArray[16] = v67;
                  Seconds = CMTimeGetSeconds((CMTime *)theArray);
                }
                else
                {
                  Seconds = INFINITY;
                }
                InitialValue = (const void *)FigCaptionDynamicStyleGetInitialValue();
                if (InitialValue)
                  v52 = CFRetain(InitialValue);
                else
                  v52 = 0;
                if (Seconds <= 0.0)
                {
LABEL_117:
                  v60 = (unint64_t)v52;
LABEL_118:
                  CFDictionarySetValue(Mutable, v43, v93);
                  v9 = 0;
                  v52 = (CFTypeRef)v60;
                }
                else
                {
                  v53 = 0;
                  v54 = 0;
                  v55 = 0.0;
                  while (1)
                  {
                    v88 = Seconds;
                    if (v92)
                    {
                      CFRelease((CFTypeRef)v92);
                      v92 = 0;
                    }
                    if (v54 < FigCaptionDynamicStyleGetKeyFrameCount())
                    {
                      v56 = FigCaptionDynamicStyleCopyKeyFrameValueAtIndex();
                      if ((_DWORD)v56)
                        break;
                    }
                    if (v53 >= CFArrayGetCount(v45))
                    {
                      v57 = 0;
                      v59 = Seconds;
                    }
                    else
                    {
                      v57 = (const __CFArray *)CFArrayGetValueAtIndex(v45, v53);
                      memset(theArray, 0, 48);
                      v58 = (const __CFDictionary *)CFArrayGetValueAtIndex(v57, 0);
                      CMTimeRangeMakeFromDictionary((CMTimeRange *)theArray, v58);
                      *(_OWORD *)&cf.start.value = *(_OWORD *)theArray;
                      cf.start.epoch = *(_QWORD *)&theArray[16];
                      rhs = time2;
                      CMTimeSubtract(&time, &cf.start, &rhs);
                      v59 = CMTimeGetSeconds(&time);
                    }
                    if (v88 >= v55)
                    {
                      v56 = FigCaptionDynamicStyleAddKeyFrameValue();
                      if ((_DWORD)v56)
                        break;
                      if (!((unint64_t)v57 | v92))
                        goto LABEL_117;
                      if (v88 >= v59)
                      {
                        CFArrayGetValueAtIndex(v57, 1);
                        memset(theArray, 0, 48);
                        v61 = (const __CFDictionary *)CFArrayGetValueAtIndex(v57, 0);
                        CMTimeRangeMakeFromDictionary((CMTimeRange *)theArray, v61);
                        if ((~*(_DWORD *)&theArray[36] & 0x11) != 0)
                        {
                          cf = *(CMTimeRange *)theArray;
                          CMTimeRangeGetEnd(&lhs, &cf);
                          cf.start = time2;
                          CMTimeSubtract(&v85, &lhs, &cf.start);
                          v55 = CMTimeGetSeconds(&v85);
                        }
                        else
                        {
                          v55 = INFINITY;
                        }
                        v56 = FigCaptionDynamicStyleAddKeyFrameValue();
                        if ((_DWORD)v56)
                          break;
                        ++v53;
                        v60 = (unint64_t)v52;
                      }
                      else
                      {
                        v56 = FigCaptionDynamicStyleAddKeyFrameValue();
                        if ((_DWORD)v56)
                          break;
                        v60 = v92;
                        if (v92)
                          CFRetain((CFTypeRef)v92);
                        if (v52)
                          CFRelease(v52);
                        ++v54;
                        v55 = v88;
                      }
                    }
                    else
                    {
                      v60 = v92;
                      if (v92)
                        CFRetain((CFTypeRef)v92);
                      if (v52)
                        CFRelease(v52);
                      ++v54;
                    }
                    v52 = (CFTypeRef)v60;
                    if (v55 >= Seconds)
                      goto LABEL_118;
                  }
                  v9 = v56;
                }
                v32 = v71;
                v40 = v72;
                v41 = v69;
              }
LABEL_120:
              if (v92)
                CFRelease((CFTypeRef)v92);
              if (v52)
                CFRelease(v52);
              if (v93)
                CFRelease(v93);
              if ((_DWORD)v9)
                goto LABEL_135;
LABEL_127:
              if (++v42 == CFArrayGetCount(v41))
                goto LABEL_134;
            }
          }
LABEL_156:
          v9 = ActiveTimeRange;
        }
LABEL_141:
        CFRelease(v32);
LABEL_142:
        if (v80)
          CFRelease(v80);
        if (!(_DWORD)v9)
        {
          CFDictionaryAddValue(*(CFMutableDictionaryRef *)(v5 + 64), v4, Mutable);
          *v3 = Mutable;
          Mutable = 0;
        }
        goto LABEL_146;
      }
      v30 = FigSignalErrorAt();
    }
    v9 = v30;
    goto LABEL_142;
  }
LABEL_146:
  if (v75)
    CFRelease(v75);
  if (v7)
    CFRelease(v7);
LABEL_150:
  if (theDict)
    CFRelease(theDict);
  if (Mutable)
    CFRelease(Mutable);
  return v9;
}

void figTTMLSynchronicTreeAppendStyleAttribute(const __CFString *a1, uint64_t a2, __CFDictionary *a3)
{
  if (figTTMLSynchronicTreeIsStyleAttribute(a1))
  {
    FigCaptionDynamicStyleCreateMutable();
    CFDictionaryAddValue(a3, a1, 0);
  }
}

void figTTMLSynchronicTreeMergeStyleset(void *key, void *value, CFMutableDictionaryRef theDict)
{
  CFDictionaryAddValue(theDict, key, value);
}

void figTTMLSynchronicTreeInheritStyle(void *key, uint64_t a2)
{
  int v3;
  CFTypeRef v5;
  int NodeType;
  const void *ParentNode;
  const void *Value;
  const void *v10;
  CMTimeFlags v11;
  CFTypeID v12;
  CFTypeRef v13;
  int Mutable;
  uint64_t KeyFrameCount;
  uint64_t v16;
  uint64_t v17;
  Float64 Seconds;
  double v19;
  double v20;
  double v21;
  CMTimeEpoch v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  CFTypeRef cf;
  CMTime rhs;
  CMTime lhs;
  CMTime time;
  double v34;
  CFTypeRef v35;
  CFTypeRef v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  CMTimeScale v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v3 = *(_DWORD *)(a2 + 24);
  if (v3)
    goto LABEL_48;
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a2 + 16), key))
  {
LABEL_3:
    v5 = cf;
    goto LABEL_4;
  }
  v29 = 0;
  NodeType = FigTTMLNodeGetNodeType(*(_QWORD *)(a2 + 8), (uint64_t)&v29);
  if (NodeType)
    goto LABEL_47;
  if ((v29 - 3) < 4 || v29 == 14)
  {
    ParentNode = (const void *)FigTTMLNodeGetParentNode();
    if (!ParentNode)
      goto LABEL_3;
  }
  else
  {
    if (v29 != 2)
      goto LABEL_3;
    ParentNode = *(const void **)(*(_QWORD *)a2 + 48);
    if (!ParentNode)
      goto LABEL_3;
  }
  NodeType = FigTTMLSynchronicTreeCopyCSS(*(_QWORD *)a2, ParentNode, &cf);
  if (NodeType)
  {
LABEL_47:
    v3 = NodeType;
LABEL_48:
    v13 = 0;
    goto LABEL_49;
  }
  v5 = cf;
  Value = CFDictionaryGetValue((CFDictionaryRef)cf, key);
  if (Value)
  {
    v10 = Value;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    NodeType = FigTTMLNodeGetActiveTimeRange((uint64_t)ParentNode, (uint64_t)&v23);
    if (!NodeType)
    {
      NodeType = FigTTMLNodeGetActiveTimeRange(*(_QWORD *)(a2 + 8), (uint64_t)&v26);
      if (!NodeType)
      {
        v39 = v25;
        v40 = v26;
        v41 = v27;
        v11 = DWORD1(v28);
        v42 = v28;
        v37 = v23;
        v38 = v24;
        v22 = *((_QWORD *)&v28 + 1);
        v36 = 0;
        v35 = 0;
        v12 = CFGetTypeID(v10);
        if (v12 != FigCaptionDynamicStyleGetTypeID() || FigCaptionDynamicStyleGetKeyFrameCount() <= 1)
        {
          v36 = CFRetain(v10);
LABEL_21:
          v3 = 0;
          v13 = v36;
          v36 = 0;
          goto LABEL_22;
        }
        FigCaptionDynamicStyleGetInitialValue();
        Mutable = FigCaptionDynamicStyleCreateMutable();
        if (!Mutable)
        {
          KeyFrameCount = FigCaptionDynamicStyleGetKeyFrameCount();
          if (KeyFrameCount < 1)
            goto LABEL_21;
          v16 = KeyFrameCount;
          v17 = 0;
          while (1)
          {
            v34 = 0.0;
            if (v35)
              CFRelease(v35);
            Mutable = FigCaptionDynamicStyleCopyKeyFrameValueAtIndex();
            if (Mutable)
              break;
            *(_OWORD *)&lhs.value = v40;
            lhs.epoch = v41;
            *(_OWORD *)&rhs.value = v37;
            rhs.epoch = v38;
            CMTimeSubtract(&time, &lhs, &rhs);
            Seconds = CMTimeGetSeconds(&time);
            v19 = v34 - Seconds;
            if ((v11 & 0x1D) != 1
              || ((lhs.value = *((_QWORD *)&v41 + 1),
                   lhs.timescale = v42,
                   lhs.flags = v11,
                   lhs.epoch = v22,
                   v20 = CMTimeGetSeconds(&lhs),
                   v19 >= 0.0)
                ? (v21 = v19)
                : (v21 = 0.0),
                  v20 >= v21))
            {
              Mutable = FigCaptionDynamicStyleAddKeyFrameValue();
              if (Mutable)
                break;
              if (v16 != ++v17)
                continue;
            }
            goto LABEL_21;
          }
        }
        v3 = Mutable;
        v13 = 0;
LABEL_22:
        if (v35)
          CFRelease(v35);
        if (v36)
          CFRelease(v36);
        if (!v3)
        {
          CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a2 + 16), key, v13);
          if (!v13)
            goto LABEL_3;
LABEL_28:
          CFRelease(v13);
          goto LABEL_3;
        }
LABEL_49:
        *(_DWORD *)(a2 + 24) = v3;
        if (!v13)
          goto LABEL_3;
        goto LABEL_28;
      }
    }
    goto LABEL_47;
  }
LABEL_4:
  if (v5)
    CFRelease(v5);
}

CFMutableDictionaryRef figTTMLSynchronicTree_Init(uint64_t a1)
{
  const __CFAllocator *v2;
  const CFDictionaryKeyCallBacks *v3;
  const CFDictionaryValueCallBacks *v4;
  const __CFAllocator *v5;
  CFMutableDictionaryRef result;

  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v2 = CFGetAllocator((CFTypeRef)a1);
  v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  *(_QWORD *)(a1 + 64) = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = CFGetAllocator((CFTypeRef)a1);
  result = CFDictionaryCreateMutable(v5, 0, v3, v4);
  *(_QWORD *)(a1 + 72) = result;
  return result;
}

void figTTMLSynchronicTree_Finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  v2 = (const void *)a1[2];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[6];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[7];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[8];
  if (v5)
    CFRelease(v5);
  v6 = (const void *)a1[9];
  if (v6)
    CFRelease(v6);
}

CFStringRef figTTMLSynchronicTree_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigTTMLSynchronicTree %p]"), a1);
}

CFStringRef figTTMLSynchronicTree_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigTTMLSynchronicTree %p]"), a1);
}

BOOL figTTMLSynchronicTreeIsStyleAttribute(const __CFString *a1)
{
  return CFStringHasPrefix(a1, CFSTR("http://www.w3.org/ns/ttml#styling"))
      || CFStringHasPrefix(a1, CFSTR("http://namespace.itunes.apple.com/itt/ttml-extension#ruby"))
      || CFStringHasPrefix(a1, CFSTR("http://namespace.itunes.apple.com/itt/ttml-extension#vertical"))
      || CFStringHasPrefix(a1, CFSTR("urn:ebu:tt:style"))
      || CFStringHasPrefix(a1, CFSTR("http://www.w3.org/ns/ttml/profile/imsc1#styling")) != 0;
}

void figTTMLSynchronicTreeBuildStyleNameToValueTimelineMap(const __CFString *a1, const void *a2, uint64_t a3)
{
  __CFArray *Value;
  CFMutableArrayRef Mutable;
  const __CFAllocator *v8;
  __CFArray *v9;
  __int128 v10;
  CFDictionaryRef v11;
  CMTimeRange v12;

  if (figTTMLSynchronicTreeIsStyleAttribute(a1))
  {
    Value = (__CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)a3, a1);
    if (Value)
    {
      Mutable = Value;
      CFRetain(Value);
      v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    }
    else
    {
      v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      CFDictionarySetValue(*(CFMutableDictionaryRef *)a3, a1, Mutable);
    }
    v9 = CFArrayCreateMutable(v8, 2, MEMORY[0x1E0C9B378]);
    v10 = *(_OWORD *)(a3 + 24);
    *(_OWORD *)&v12.start.value = *(_OWORD *)(a3 + 8);
    *(_OWORD *)&v12.start.epoch = v10;
    *(_OWORD *)&v12.duration.timescale = *(_OWORD *)(a3 + 40);
    v11 = CMTimeRangeCopyAsDictionary(&v12, v8);
    CFArrayAppendValue(v9, v11);
    CFArrayAppendValue(v9, a2);
    CFArrayAppendValue(Mutable, v9);
    if (v9)
      CFRelease(v9);
    if (Mutable)
      CFRelease(Mutable);
    if (v11)
      CFRelease(v11);
  }
}

void figTTMLSynchronicTreeSortTimeline(int a1, CFArrayRef theArray)
{
  CFRange v3;

  v3.length = CFArrayGetCount(theArray);
  v3.location = 0;
  CFArraySortValues(theArray, v3, (CFComparatorFunction)figTTMLSynchronicTreeSortTimelineComparator, 0);
}

uint64_t figTTMLSynchronicTreeSortTimelineComparator(const __CFArray *a1, const __CFArray *a2)
{
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v4;
  int32_t v5;
  CMTime start;
  CMTime time1;
  CMTimeRange v9;
  CMTimeRange v10;

  ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, 0);
  v4 = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, 0);
  memset(&v10, 0, sizeof(v10));
  CMTimeRangeMakeFromDictionary(&v10, ValueAtIndex);
  memset(&v9, 0, sizeof(v9));
  CMTimeRangeMakeFromDictionary(&v9, v4);
  time1 = v10.start;
  start = v9.start;
  v5 = CMTimeCompare(&time1, &start);
  if (v5 < 0)
    return -1;
  else
    return v5 != 0;
}

CFArrayRef figTTMLSynchronicTreeInitializeAnimatableStylesOnce()
{
  CFArrayRef result;
  void *values[35];

  values[34] = *(void **)MEMORY[0x1E0C80C00];
  values[0] = CFSTR("http://www.w3.org/ns/ttml#styling backgroundColor");
  values[1] = CFSTR("http://www.w3.org/ns/ttml#styling color");
  values[2] = CFSTR("http://www.w3.org/ns/ttml#styling direction");
  values[3] = CFSTR("http://www.w3.org/ns/ttml#styling display");
  values[4] = CFSTR("http://www.w3.org/ns/ttml#styling displayAlign");
  values[5] = CFSTR("http://www.w3.org/ns/ttml#styling extent");
  values[6] = CFSTR("http://www.w3.org/ns/ttml#styling fontFamily");
  values[7] = CFSTR("http://www.w3.org/ns/ttml#styling fontSize");
  values[8] = CFSTR("http://www.w3.org/ns/ttml#styling fontStyle");
  values[9] = CFSTR("http://www.w3.org/ns/ttml#styling fontWeight");
  values[10] = CFSTR("http://www.w3.org/ns/ttml#styling lineHeight");
  values[11] = CFSTR("http://www.w3.org/ns/ttml#styling opacity");
  values[12] = CFSTR("http://www.w3.org/ns/ttml#styling origin");
  values[13] = CFSTR("http://www.w3.org/ns/ttml#styling overflow");
  values[14] = CFSTR("http://www.w3.org/ns/ttml#styling padding");
  values[15] = CFSTR("http://www.w3.org/ns/ttml#styling position");
  values[16] = CFSTR("http://www.w3.org/ns/ttml#styling showBackground");
  values[17] = CFSTR("http://www.w3.org/ns/ttml#styling textAlign");
  values[18] = CFSTR("http://www.w3.org/ns/ttml#styling textDecoration");
  values[19] = CFSTR("http://www.w3.org/ns/ttml#styling textOutline");
  values[20] = CFSTR("http://www.w3.org/ns/ttml#styling unicodeBidi");
  values[21] = CFSTR("http://www.w3.org/ns/ttml#styling visibility");
  values[22] = CFSTR("http://www.w3.org/ns/ttml#styling wrapOption");
  values[23] = CFSTR("http://www.w3.org/ns/ttml#styling writingMode");
  values[24] = CFSTR("http://www.w3.org/ns/ttml#styling zIndex");
  values[25] = CFSTR("http://www.w3.org/ns/ttml/profile/imsc1#styling forcedDisplay");
  values[26] = CFSTR("http://www.w3.org/ns/ttml/profile/imsc1#styling fillLineGap");
  values[27] = CFSTR("urn:ebu:tt:style linePadding");
  values[28] = CFSTR("urn:ebu:tt:style multiRowAlign");
  values[29] = CFSTR("http://www.w3.org/ns/ttml#styling textEmphasis");
  values[30] = CFSTR("http://www.w3.org/ns/ttml#styling shear");
  values[31] = CFSTR("http://www.w3.org/ns/ttml#styling disparity");
  values[32] = CFSTR("http://www.w3.org/ns/ttml#styling luminanceGain");
  values[33] = CFSTR("http://www.w3.org/ns/ttml#styling textShadow");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 34, MEMORY[0x1E0C9B378]);
  sAnimatableStyles = (uint64_t)result;
  return result;
}

uint64_t FigCaptionRendererCaptionCreate(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = 0;
  v8 = 0;
  MEMORY[0x19402F294](&FigCaptionRendererCaptionGetClassID_sRegisterFigCaptionRendererCaptionBaseTypeOnce, RegisterFigCaptionRendererCaptionBaseType);
  v2 = CMDerivedObjectCreate();
  if (!(_DWORD)v2)
  {
    v3 = v8;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    FigNote_AllowInternalDefaultLogs();
    fig_note_initialize_category_with_default_work_cf();
    fig_note_initialize_category_with_default_work_cf();
    v7 = 0;
    FigCaptionRendererNodeCreate(&v7);
    *(_QWORD *)DerivedStorage = v7;
    v6 = 0;
    FigCaptionRendererIntervalCreate(&v6);
    *(_QWORD *)(DerivedStorage + 8) = v6;
    *(_QWORD *)(DerivedStorage + 80) = 0;
    *(_WORD *)(DerivedStorage + 88) = 0;
    *(_OWORD *)(DerivedStorage + 96) = 0u;
    *(_OWORD *)(DerivedStorage + 112) = 0u;
    *(_BYTE *)(DerivedStorage + 128) = 1;
    *a1 = v3;
  }
  return v2;
}

void FigCaptionRendererCaptionFinalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 40);
  if (v1)
    CFRelease(v1);
  v2 = *(const void **)(DerivedStorage + 32);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(DerivedStorage + 48);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(DerivedStorage + 64);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(DerivedStorage + 80);
  if (v5)
    CFRelease(v5);
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
  v6 = *(const void **)(DerivedStorage + 8);
  if (v6)
    CFRelease(v6);
}

__CFString *FigCaptionRendererCaptionCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererCaption: <%p>"), a1);
  return Mutable;
}

__CFString *FigCaptionRendererCaption_FigCaptionRendererBaseProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererCaption <FigCaptionRendererBaseProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererBaseProtocol_GetClassName(uint64_t a1, _QWORD *a2)
{
  *a2 = "FigCaptionRendererCaption";
  return 0;
}

__CFString *FigCaptionRendererCaption_FigCaptionRendererIntervalProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererCaption <FigCaptionRendererIntervalProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererIntervalProtocol_GetRange(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererIntervalProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererIntervalProtocol_SetRange(double a1, double a2)
{
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  void (*v7)(uint64_t, double, double);

  v4 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigCaptionRendererIntervalProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v6 = *(_QWORD *)(ProtocolVTable + 16);
    if (v6)
    {
      v7 = *(void (**)(uint64_t, double, double))(v6 + 16);
      if (v7)
        v7(v4, a1, a2);
    }
  }
  return 0;
}

__CFString *FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererCaption <FigCaptionRendererNodeProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_SetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_GetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_GetChildren(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 24);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_HasChildNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t ProtocolVTable;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  v5 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v7 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v7)
    return 4294954508;
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  if (v8)
    return v8(v5, a2, a3);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_AddChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 40);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_RemoveChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_RemovelAllChildrenNodes()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 56);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_SetViewport(double a1, double a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t ProtocolVTable;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, double, double, double, double);

  v8 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v10 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v10)
    return 4294954508;
  v11 = *(uint64_t (**)(uint64_t, double, double, double, double))(v10 + 64);
  if (v11)
    return v11(v8, a1, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_GetViewport(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 72);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_SetFCRBounds(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _OWORD *);
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[4];

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v8 = *a2;
  v9 = a2[1];
  v10 = a2[2];
  v11 = a2[3];
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, _OWORD *))(v5 + 80);
  if (!v6)
    return 4294954514;
  v12[0] = v8;
  v12[1] = v9;
  v12[2] = v10;
  v12[3] = v11;
  return v6(v3, v12);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_GetFCRBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 88);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_SetCGBounds(double a1, double a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t ProtocolVTable;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, double, double, double, double);

  v8 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v10 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v10)
    return 4294954508;
  v11 = *(uint64_t (**)(uint64_t, double, double, double, double))(v10 + 96);
  if (v11)
    return v11(v8, a1, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_GetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 104);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_SetCGSize(double a1, double a2)
{
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, double, double);

  v4 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v6 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v6)
    return 4294954508;
  v7 = *(uint64_t (**)(uint64_t, double, double))(v6 + 112);
  if (v7)
    return v7(v4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_GetCGSize(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable
    && (v5 = *(_QWORD *)(ProtocolVTable + 16)) != 0
    && (v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 120)) != 0)
  {
    return v6(v3, a2);
  }
  else
  {
    return 4294954508;
  }
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_SetCGOrigin(double a1, double a2)
{
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, double, double);

  v4 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v6 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v6)
    return 4294954508;
  v7 = *(uint64_t (**)(uint64_t, double, double))(v6 + 128);
  if (v7)
    return v7(v4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_GetCGOrigin(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 136);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_SetPaddings(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t ProtocolVTable;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v15 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v15)
    return 4294954508;
  v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 144);
  if (v16)
    return v16(v13, a2, a3, a4, a5, a6, a7);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_GetInsetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 152);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_PurgeImageCache()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 160);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_SetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 168);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_GetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 176);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_GetImageCacheWidth(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 184);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_GetImageCacheHeight(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 192);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_AllocateImageBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 200);
  if (v10)
    return v10(v7, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_GetImageBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 208);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_SetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 216);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_GetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 224);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_SetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 232);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_GetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 240);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_HasActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 248);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_SetZOrder(double a1)
{
  uint64_t v2;
  uint64_t ProtocolVTable;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, double);

  v2 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v4 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v4)
    return 4294954508;
  v5 = *(uint64_t (**)(uint64_t, double))(v4 + 256);
  if (v5)
    return v5(v2, a1);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_GetZOrder(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 264);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_ResetNodeTree()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 272);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_Draw(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  CGFloat *v5;
  CGContext *v6;
  CGSize v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  void (*v10)(const void *, int *);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(const void *, CGRect *);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(const void *, CGRect *);
  uint64_t v17;
  uint64_t v18;
  void (*v19)(const void *, void **);
  uint64_t v20;
  uint64_t v21;
  void (*v22)(const void *, char *);
  uint64_t v23;
  uint64_t v24;
  void (*v25)(const void *, unint64_t *);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(const void *, char *);
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  const __CFAllocator *v33;
  const __CFAttributedString *MutableCopy;
  uint64_t v35;
  const __CFDictionary *v36;
  const void *Value;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(const void *, CGRect *);
  double v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(const void *, CFStringCompareFlags *);
  uint64_t v48;
  uint64_t v49;
  void (*v50)(const void *, double *);
  const __CFAttributedString *v51;
  double v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(_QWORD, CGAffineTransform *);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, double *);
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(_QWORD, CGAffineTransform *);
  double v66;
  double v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(const void *, CGAffineTransform *);
  CGFloat a;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(_QWORD, CFRange *);
  double v76;
  __int128 v77;
  double v78;
  int v79;
  const __CFString *v80;
  double v81;
  const __CFNumber *v82;
  const __CFNumber *Attribute;
  void *v84;
  double v85;
  double v86;
  CFNumberRef v87;
  double v88;
  const __CFNumber *v89;
  const __CFString *v90;
  double v91;
  CFTypeRef v92;
  CFTypeRef v93;
  CFTypeRef v94;
  BOOL v95;
  char v96;
  double v97;
  double v98;
  CGFloat v99;
  double v100;
  const __CFString *v101;
  double v102;
  double v103;
  const __CFAttributedString *v104;
  const __CFAttributedString *v105;
  const __CFString *v106;
  CGContext *v107;
  const __CFDictionary *v108;
  const __CFDictionary *v109;
  const __CTTypesetter *v110;
  const __CTTypesetter *v111;
  CTFramesetterRef v112;
  const __CTTypesetter *v113;
  CGContext *v114;
  CFDictionaryRef FrameAttributesDictionary_0;
  CFIndex v116;
  CGPath *Mutable;
  double v118;
  const __CFDictionary *v119;
  CGPath *v120;
  const CGPath *v121;
  const __CTFrame *Frame;
  double v123;
  const __CFArray *Lines;
  const __CFArray *v125;
  CFIndex Count;
  CFIndex v127;
  const __CTLine *ValueAtIndex;
  CFIndex v129;
  double v130;
  void *v131;
  double v132;
  const __CTLine *v133;
  CFRange v134;
  uint64_t v135;
  uint64_t v136;
  double v137;
  const __CFNumber *v138;
  CFIndex v139;
  const __CTLine *v140;
  CFRange v141;
  CFIndex i;
  const __CFString *String;
  UniChar CharacterAtIndex;
  double TypographicBounds;
  CFRange v147;
  const __CFString *v148;
  CGSize v149;
  double width;
  double v151;
  const __CFDictionary *Attributes;
  uint64_t EdgeStyle;
  CFDictionaryRef v154;
  double v155;
  CFIndex v156;
  CFNumberRef v157;
  CFNumberRef v158;
  float v159;
  int v160;
  double v161;
  const __CFDictionary *v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  CFIndex Length;
  CFNumberRef v169;
  CFNumberRef v170;
  CFNumberRef v171;
  CFNumberRef v172;
  int v173;
  double v174;
  double v175;
  int v176;
  double v177;
  double v178;
  double height;
  double v180;
  double v181;
  double v182;
  float v183;
  float v184;
  double y;
  double x;
  double v187;
  CGFloat v188;
  double v189;
  double v190;
  double v191;
  double v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t (*v196)(const void *, const __CFAllocator *, CFTypeRef, uint64_t);
  uint64_t v197;
  uint64_t v198;
  double v199;
  double v200;
  uint64_t v201;
  void (*v202)(const void *, void **);
  const __CFString *v203;
  CGColorSpace *v204;
  CGColorSpace *v205;
  CGContext *v206;
  CGContext *v207;
  const __CFNumber *v208;
  CGImageRef v209;
  CGImage *v210;
  uint64_t v211;
  uint64_t v212;
  void (*v213)(const void *, CGImage *);
  uint64_t v214;
  uint64_t v215;
  void (*v216)(const void *, _QWORD);
  uint64_t v217;
  uint64_t v218;
  void (*v219)(const void *, double, double);
  CGPoint v220;
  uint64_t v221;
  uint64_t v222;
  void (*v223)(const void *, double, double, double, double);
  CFTypeRef v224;
  uint64_t v225;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v227;
  unsigned int v228;
  const __CFDictionary *v229;
  void *v230;
  const __CFDictionary *v231;
  const CGFloat *Components;
  double v233;
  CGColor *CGColorFromCFArray;
  const CGFloat *v235;
  CGColorSpace *v236;
  double v237;
  CGColorSpace *DeviceRGB;
  CGColorRef v239;
  CGColor *v240;
  NSObject *v241;
  unsigned int v242;
  unsigned int v243;
  double v244;
  double v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  void (*v249)(uint64_t, uint64_t);
  CGFloat v250;
  uint64_t v251;
  uint64_t v252;
  void (*v253)(const void *, CGAffineTransform *);
  const void *v254;
  CGSize v255;
  uint64_t v256;
  uint64_t v257;
  void (*v258)(const void *, CGRect *);
  double v259;
  int v260;
  double v261;
  double v262;
  int v263;
  double MidY;
  CGFloat v265;
  double v266;
  uint64_t v267;
  uint64_t v268;
  void (*v269)(const void *, double);
  double Alpha;
  const __CFAttributedString *v271;
  const __CFDictionary *v272;
  CGColor *v273;
  CGColor *v274;
  uint64_t v275;
  uint64_t v276;
  void (*v277)(const void *, double);
  __int128 v278;
  uint64_t v279;
  uint64_t v280;
  void (*v281)(const void *, double, double);
  double MidX;
  double v283;
  uint64_t v284;
  uint64_t v285;
  void (*v286)(const void *, double, double);
  uint64_t v287;
  uint64_t v288;
  void (*v289)(const void *, CGRect *);
  CGFloat v290;
  uint64_t v291;
  uint64_t v292;
  void (*v293)(const void *, _QWORD);
  CGFloat v294;
  CGColorSpace *v295;
  int v296;
  int v297;
  int v299;
  CGContext *v300;
  __int128 v301;
  CGImageRef v302;
  CGImage *v303;
  int v305;
  double v306;
  CGFloat MinY;
  CGFloat v308;
  double v309;
  CGColorSpace *v310;
  int v311;
  int v312;
  size_t v313;
  int v314;
  CGColorSpace *v315;
  CGContext *v316;
  CGContext *v317;
  const __CFNumber *v318;
  BOOL v319;
  double v320;
  int v321;
  void *v322;
  double v323;
  double v324;
  double v325;
  const __CFAllocator *v326;
  double v327;
  const __CFAttributedString *Image;
  const __CFAllocator *v329;
  const __CFAttributedString *v330;
  const __CFAttributedString *v331;
  const __CFAttributedString *v332;
  const __CFArray *v333;
  CFIndex v334;
  char *v335;
  CFIndex v336;
  const __CFDictionary *v337;
  const __CFDictionary *v338;
  const __CFString *v339;
  const __CFString *v340;
  const void *v341;
  uint64_t j;
  double v343;
  CGColor *v344;
  const void *v345;
  uint64_t v346;
  double v347;
  CGColor *v348;
  CGColorRef v349;
  const __CFArray *Results;
  const __CFArray *v351;
  CFIndex v352;
  CFRange *v353;
  CFRange *v354;
  CGColor *v355;
  const void *v356;
  CGContext *v357;
  CGColorSpace *v358;
  const __CFString *v359;
  int v360;
  const __CTFrame *cf;
  CFTypeRef cfa;
  CFDictionaryRef theDict;
  const __CFDictionary *theDicta;
  CGPath *v365;
  CFTypeRef v366[2];
  CFIndex v367;
  CFIndex stringRange;
  __int128 stringRangea;
  CGContext *stringRangeb;
  const __CTTypesetter *v371;
  CFTypeRef v372[2];
  const __CFAttributedString *v373;
  CFAttributedStringRef aStr;
  const __CFAttributedString *aStra;
  CGContext *v376;
  CGContext *v377;
  CGContext *v378;
  const __CFString *key;
  char *v380;
  const __CFDictionary *v381;
  CGFloat v382;
  CTFramesetterRef framesetter;
  const __CTFramesetter *framesettera;
  CTFramesetterRef framesetterb;
  CGColorRef color;
  CGColorRef colora;
  CFStringRef stringToFind;
  const __CFString *stringToFinda;
  CFStringRef stringToFindb;
  CGFloat v391;
  CGColorRef CopyWithAlpha;
  CGFloat tx;
  CGFloat txb;
  CGFloat txc;
  const __CFString *txa;
  void *v397;
  const void *v398;
  const __CFString *v399;
  CFTypeRef v400;
  CGFloat v401;
  __CFAttributedString *v402;
  const __CFAllocator *alloc;
  CGSize v404;
  CGPoint origin;
  CFRange v406;
  double v407;
  int v408;
  char v409;
  unint64_t v410;
  void *data;
  CGRect v412;
  CGRect v413;
  CFRange effectiveRange;
  __int128 v415;
  double v416;
  CFStringCompareFlags compareOptions;
  int v418;
  double valuePtr;
  CGRect v420;
  __int16 v421;
  CGFloat v422;
  __int16 v423;
  CGFloat v424;
  CGAffineTransform __s1[2];
  void *values[4];
  CFRange v427;
  CFRange v428;
  CFRange v429;
  CFRange v430;
  CFRange v431;
  CFRange v432;
  CGSize v433;
  CGRect v434;
  CGRect v435;
  CGRect v436;
  CGRect v437;
  CGRect v438;
  CGRect v439;
  CGRect v440;
  CGRect v441;
  CGRect v442;
  CGRect v443;
  CGRect v444;
  CGRect v445;
  CGRect v446;
  CGRect v447;
  CGRect v448;
  CGRect v449;
  CGRect v450;
  CGRect v451;
  CGRect v452;
  CGRect v453;
  CGRect v454;
  CGRect v455;
  CGRect v456;

  values[1] = *(void **)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = (CGFloat *)MEMORY[0x1E0C9D628];
  v6 = *(CGContext **)(a2 + 320);
  v7 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
  v413.origin = (CGPoint)*MEMORY[0x1E0C9D628];
  v413.size = v7;
  v404 = v7;
  origin = v413.origin;
  v412.origin = v413.origin;
  v412.size = v7;
  v410 = 0;
  data = 0;
  v409 = 0;
  v408 = 0;
  FigCaptionRendererCaptionProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v9 = *(_QWORD *)(ProtocolVTable + 16);
    if (v9)
    {
      v10 = *(void (**)(const void *, int *))(v9 + 48);
      if (v10)
        v10(a1, &v408);
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  v11 = CMBaseObjectGetProtocolVTable();
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 16);
    if (v12)
    {
      v13 = *(void (**)(const void *, CGRect *))(v12 + 72);
      if (v13)
        v13(a1, &v413);
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  v14 = CMBaseObjectGetProtocolVTable();
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 16);
    if (v15)
    {
      v16 = *(void (**)(const void *, CGRect *))(v15 + 104);
      if (v16)
        v16(a1, &v412);
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  v17 = CMBaseObjectGetProtocolVTable();
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 16);
    if (v18)
    {
      v19 = *(void (**)(const void *, void **))(v18 + 208);
      if (v19)
        v19(a1, &data);
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  v20 = CMBaseObjectGetProtocolVTable();
  if (v20)
  {
    v21 = *(_QWORD *)(v20 + 16);
    if (v21)
    {
      v22 = *(void (**)(const void *, char *))(v21 + 184);
      if (v22)
        v22(a1, (char *)&v410 + 4);
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  v23 = CMBaseObjectGetProtocolVTable();
  if (v23)
  {
    v24 = *(_QWORD *)(v23 + 16);
    if (v24)
    {
      v25 = *(void (**)(const void *, unint64_t *))(v24 + 192);
      if (v25)
        v25(a1, &v410);
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  v26 = CMBaseObjectGetProtocolVTable();
  if (v26)
  {
    v27 = *(_QWORD *)(v26 + 16);
    if (v27)
    {
      v28 = *(void (**)(const void *, char *))(v27 + 224);
      if (v28)
        v28(a1, &v409);
    }
  }
  *(_BYTE *)(a2 + 749) = 0;
  *(_BYTE *)(a2 + 749) = CTIsExuberatedLanguage();
  if (!v409)
    goto LABEL_349;
  v29 = *v5;
  v30 = v5[1];
  v31 = v5[2];
  v32 = v5[3];
  v454.origin.x = *v5;
  v454.origin.y = v30;
  v454.size.width = v31;
  v454.size.height = v32;
  if (CGRectEqualToRect(v413, v454) || v413.size.width <= 0.0 || v413.size.height <= 0.0)
    goto LABEL_349;
  v33 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MutableCopy = CFAttributedStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, *(CFAttributedStringRef *)(DerivedStorage + 32));
  values[0] = 0;
  v420.origin = origin;
  v420.size = v404;
  v35 = CMBaseObjectGetDerivedStorage();
  v36 = *(const __CFDictionary **)(v35 + 40);
  if (v36)
    Value = CFDictionaryGetValue(v36, CFSTR("region"));
  else
    Value = 0;
  color = *(CGColorRef *)&v32;
  stringToFind = *(CFStringRef *)&v31;
  v391 = v30;
  tx = v29;
  v406.location = 0;
  FigCaptionRendererNodeProtocolGetProtocolID();
  v38 = CMBaseObjectGetProtocolVTable();
  if (v38)
  {
    v39 = *(_QWORD *)(v38 + 16);
    if (v39)
    {
      v40 = *(void (**)(const void *, CGRect *))(v39 + 72);
      if (v40)
        v40(a1, &v420);
    }
  }
  FCRGetVideoPresentationBounds(*(double *)(a2 + 368), *(double *)(a2 + 376), *(double *)(a2 + 336), *(double *)(a2 + 344), *(double *)(a2 + 352), *(double *)(a2 + 360));
  v42 = v41;
  v44 = v43;
  LODWORD(compareOptions) = 0;
  FigCaptionRendererCaptionProtocolGetProtocolID();
  v45 = CMBaseObjectGetProtocolVTable();
  if (v45)
  {
    v46 = *(_QWORD *)(v45 + 16);
    if (v46)
    {
      v47 = *(void (**)(const void *, CFStringCompareFlags *))(v46 + 48);
      if (v47)
        v47(a1, &compareOptions);
    }
  }
  alloc = v33;
  if (!Value)
  {
    FCRGetOverscanSafeRectForVideo((double *)a2);
    v67 = v66 * 0.15;
    v68 = 3.0;
LABEL_78:
    v76 = v67 / v68;
    *(double *)values = v67 / v68;
    goto LABEL_83;
  }
  if (*(_DWORD *)(v35 + 16) != 7)
  {
    __s1[0].a = 0.0;
    LODWORD(effectiveRange.location) = 0;
    FigCaptionRendererNodeProtocolGetProtocolID();
    v69 = CMBaseObjectGetProtocolVTable();
    if (v69)
    {
      v70 = *(_QWORD *)(v69 + 16);
      if (v70)
      {
        v71 = *(void (**)(const void *, CGAffineTransform *))(v70 + 16);
        if (v71)
          v71(a1, __s1);
      }
    }
    a = __s1[0].a;
    FigCaptionRendererRegionProtocolGetProtocolID();
    v73 = CMBaseObjectGetProtocolVTable();
    if (v73)
    {
      v74 = *(_QWORD *)(v73 + 16);
      if (v74)
      {
        v75 = *(void (**)(_QWORD, CFRange *))(v74 + 48);
        if (v75)
          v75(*(_QWORD *)&a, &effectiveRange);
      }
    }
    v67 = v420.size.height / (double)SLODWORD(effectiveRange.location);
    v68 = 1.3;
    goto LABEL_78;
  }
  valuePtr = 0.0;
  FigCaptionRendererNodeProtocolGetProtocolID();
  v48 = CMBaseObjectGetProtocolVTable();
  if (v48)
  {
    v49 = *(_QWORD *)(v48 + 16);
    if (v49)
    {
      v50 = *(void (**)(const void *, double *))(v49 + 16);
      if (v50)
        v50(a1, &valuePtr);
    }
  }
  v51 = MutableCopy;
  v52 = valuePtr;
  if (valuePtr == 0.0)
  {
    v53 = 0;
    v77 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
    *(_OWORD *)&__s1[0].a = *MEMORY[0x1E0C9D648];
    *(_OWORD *)&__s1[0].c = v77;
  }
  else
  {
    v53 = 0;
    do
    {
      v54 = v52;
      __s1[0].a = 0.0;
      FigCaptionRendererBaseProtocolGetProtocolID();
      v55 = CMBaseObjectGetProtocolVTable();
      if (v55)
      {
        v56 = *(_QWORD *)(v55 + 16);
        if (v56)
        {
          v57 = *(void (**)(_QWORD, CGAffineTransform *))(v56 + 8);
          if (v57)
            v57(*(_QWORD *)&v54, __s1);
        }
      }
      v58 = *(_QWORD *)&valuePtr;
      if (*(_QWORD *)&__s1[0].a && !strcmp(*(const char **)&__s1[0].a, "FigCaptionRendererTTMLRegion"))
        v53 = v58;
      FigCaptionRendererNodeProtocolGetProtocolID();
      v59 = CMBaseObjectGetProtocolVTable();
      if (v59)
      {
        v60 = *(_QWORD *)(v59 + 16);
        if (v60)
        {
          v61 = *(void (**)(uint64_t, double *))(v60 + 16);
          if (v61)
            v61(v58, &valuePtr);
        }
      }
      v52 = valuePtr;
    }
    while (valuePtr != 0.0);
    v62 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
    *(_OWORD *)&__s1[0].a = *MEMORY[0x1E0C9D648];
    *(_OWORD *)&__s1[0].c = v62;
    FigCaptionRendererNodeProtocolGetProtocolID();
    v63 = CMBaseObjectGetProtocolVTable();
    if (v63)
    {
      v64 = *(_QWORD *)(v63 + 16);
      if (v64)
      {
        v65 = *(void (**)(_QWORD, CGAffineTransform *))(v64 + 104);
        if (v65)
          v65(*(_QWORD *)&v54, __s1);
      }
    }
  }
  effectiveRange = (CFRange)0;
  v415 = 0u;
  FigGeometryDimensionMake();
  FigGeometryDimensionMake();
  FigGeometrySizeMake();
  if (v53)
    FigCaptionRendererTTMLRegionGetCellResolution(v53, &effectiveRange);
  v76 = v44 * 0.041;
  *(double *)values = v44 * 0.041;
  MutableCopy = v51;
  v33 = alloc;
LABEL_83:
  if (v44 > v42)
  {
    v76 = v42 / v44 * v76;
    values[0] = *(void **)&v76;
  }
  LOBYTE(v416) = 0;
  FigCFDictionaryGetBooleanIfPresent();
  if (!LOBYTE(v416) && (*(double *)(a2 + 368) == 0.0 || *(double *)(a2 + 376) == 0.0))
  {
    v76 = v76 * 0.9;
    values[0] = *(void **)&v76;
  }
  if ((_DWORD)compareOptions == 1)
  {
    v78 = *(double *)(a2 + 720);
    if (v78 > 0.0)
    {
      v76 = v78 * 0.8;
      *(double *)values = v78 * 0.8;
    }
  }
  v79 = *(_DWORD *)(v35 + 16);
  if (v79 == 3)
    goto LABEL_107;
  effectiveRange.location = 0;
  effectiveRange.length = 0;
  if (v79 != 7)
  {
    Attribute = (const __CFNumber *)CFAttributedStringGetAttribute(MutableCopy, 0, (CFStringRef)*MEMORY[0x1E0CA52B0], &effectiveRange);
    if (!Attribute)
    {
      v80 = (const __CFString *)*MEMORY[0x1E0CA2A10];
      goto LABEL_103;
    }
    v82 = Attribute;
    CFRetain(Attribute);
LABEL_101:
    CFNumberGetValue(v82, kCFNumberCGFloatType, values);
    CFRelease(v82);
    v84 = values[0];
    memset(__s1, 0, 48);
    FCRGetTransform((uint64_t)__s1, *(double *)(a2 + 368), *(double *)(a2 + 376), *(double *)(a2 + 352), *(double *)(a2 + 360));
    v76 = __s1[0].b + *(double *)&v84 * __s1[0].d;
    *(double *)values = v76;
    goto LABEL_107;
  }
  v80 = (const __CFString *)*MEMORY[0x1E0CA2A10];
  if (CFAttributedStringGetAttribute(MutableCopy, 0, (CFStringRef)*MEMORY[0x1E0CA2A10], &effectiveRange))
  {
    memset(__s1, 0, 32);
    FigTextMarkupSizeMakeFromSimplifiedDictionary();
    if (LODWORD(__s1[0].b) == 1886679840 || LODWORD(__s1[0].b) == 1886920736)
    {
      FigGeometryDimensionGetCGFloat();
      valuePtr = v81;
      v82 = CFNumberCreate(v33, kCFNumberCGFloatType, &valuePtr);
      if (v82)
        goto LABEL_101;
    }
  }
LABEL_103:
  if (CFAttributedStringGetAttribute(MutableCopy, 0, v80, &effectiveRange))
  {
    memset(__s1, 0, 32);
    FigTextMarkupSizeMakeFromSimplifiedDictionary();
    if (LODWORD(__s1[0].d) == 1986535456 && *(_QWORD *)(a2 + 56) == 1)
    {
      v85 = v44 * __s1[0].c / 100.0;
      if (v85 > 0.0)
        goto LABEL_109;
    }
  }
LABEL_107:
  v86 = *(double *)(a2 + 200);
  if (v86 > 0.0)
  {
    v85 = v76 * v86;
LABEL_109:
    *(double *)&v406.location = v85;
    goto LABEL_111;
  }
  *(double *)&v406.location = v76;
LABEL_111:
  v87 = CFNumberCreate(v33, kCFNumberCGFloatType, &v406);
  v427.length = CFAttributedStringGetLength(MutableCopy);
  v427.location = 0;
  CFAttributedStringSetAttribute(MutableCopy, v427, CFSTR("kFCRSubtitleRenderer_FontSizeToUse"), v87);
  if (v87)
    CFRelease(v87);
  v88 = *(double *)&v406.location;
  *(_QWORD *)(v35 + 24) = v406.location;
  effectiveRange.location = 0;
  effectiveRange.length = 0;
  v407 = 100.0;
  v89 = (const __CFNumber *)CFAttributedStringGetAttribute(MutableCopy, 0, (CFStringRef)*MEMORY[0x1E0CA2B48], &effectiveRange);
  if (v89)
    CFNumberGetValue(v89, kCFNumberCGFloatType, &v407);
  v90 = (const __CFString *)*MEMORY[0x1E0CA2B40];
  v91 = v407 / 100.0;
  v92 = CFAttributedStringGetAttribute(MutableCopy, 0, (CFStringRef)*MEMORY[0x1E0CA2B40], &effectiveRange);
  v93 = CFAttributedStringGetAttribute(MutableCopy, 0, (CFStringRef)*MEMORY[0x1E0CA2A98], &effectiveRange);
  v94 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
  if (v93)
    v95 = v93 == v94;
  else
    v95 = 0;
  v96 = !v95;
  FCRGetOverscanSafeRectForVideo((double *)a2);
  v99 = v97;
  if (v92)
  {
    if ((v96 & 1) != 0)
    {
      if (v91 * v413.size.height >= v98)
        v100 = v98;
      else
        v100 = v91 * v413.size.height;
    }
    else
    {
      v100 = *(double *)(MEMORY[0x1E0C9D5E0] + 24);
    }
  }
  else
  {
    if ((v96 & 1) != 0)
    {
      if (v91 * v413.size.width >= v97)
        v100 = v97;
      else
        v100 = v91 * v413.size.width;
    }
    else
    {
      v100 = *(double *)(MEMORY[0x1E0C9D5E0] + 16);
    }
    v99 = v98;
  }
  v406.location = 0;
  v406.length = 0;
  v101 = (const __CFString *)*MEMORY[0x1E0CA2AD8];
  if (CFAttributedStringGetAttribute(MutableCopy, 0, (CFStringRef)*MEMORY[0x1E0CA2AD8], &v406)
    || CFAttributedStringGetAttribute(MutableCopy, 0, (CFStringRef)*MEMORY[0x1E0CA2B18], &v406))
  {
    updateCMRubyAttributeForCoreTextRender(DerivedStorage, MutableCopy, 1);
  }
  v103 = *MEMORY[0x1E0C9D820];
  v102 = *(double *)(MEMORY[0x1E0C9D820] + 8);
  v416 = 0.0;
  compareOptions = 0;
  key = v90;
  if (MutableCopy)
  {
    v400 = v92;
    ckCaptionSetupText_0(DerivedStorage, MutableCopy, 0, a2, v88);
    v104 = CFAttributedStringCreateMutableCopy(v33, 0, MutableCopy);
    if (!v104)
    {
      FigSignalErrorAt();
LABEL_222:
      v92 = v400;
      goto LABEL_223;
    }
    v105 = v104;
    v420.origin.x = 0.0;
    v420.origin.y = 0.0;
    v106 = (const __CFString *)CFAttributedStringGetAttribute(v104, 0, v90, (CFRange *)&v420);
    setupHighlight_1((_QWORD *)a2, v105);
    if (CFAttributedStringGetLength(v105) < 1)
    {
      v397 = (void *)v94;
      v376 = v6;
      v148 = v101;
LABEL_214:
      CFRelease(v105);
      Length = CFAttributedStringGetLength(MutableCopy);
      v169 = CFNumberCreate(v33, kCFNumberCGFloatType, &compareOptions);
      if (v169)
      {
        v170 = v169;
        v430.location = 0;
        v430.length = Length;
        CFAttributedStringSetAttribute(MutableCopy, v430, CFSTR("kFCRSubtitleRenderer_SuggestLineHeight"), v169);
        CFRelease(v170);
      }
      v171 = CFNumberCreate(v33, kCFNumberCGFloatType, &v416);
      v92 = v400;
      if (v171)
      {
        v172 = v171;
        v431.location = 0;
        v431.length = Length;
        CFAttributedStringSetAttribute(MutableCopy, v431, CFSTR("kFCRSubtitleRenderer_LinePadding"), v171);
        CFRelease(v172);
      }
      v101 = v148;
      v6 = v376;
      v94 = v397;
      goto LABEL_223;
    }
    if (v106 && *(_BYTE *)(DerivedStorage + 128))
    {
      framesetter = (CTFramesetterRef)DerivedStorage;
      v107 = v6;
      __s1[0].a = *(CGFloat *)MEMORY[0x1E0CA8618];
      values[0] = (void *)v94;
      v108 = CFDictionaryCreate(v33, (const void **)__s1, (const void **)values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v108)
      {
        v109 = v108;
        v110 = CTTypesetterCreateWithAttributedStringAndOptions(v105, v108);
        if (v110)
        {
          v381 = v109;
          v111 = v110;
          v112 = CTFramesetterCreateWithTypesetter(v110);
          v113 = v111;
          v6 = v107;
          DerivedStorage = (uint64_t)framesetter;
          if (!v112)
            goto LABEL_221;
LABEL_146:
          v397 = (void *)v94;
          v114 = v6;
          framesettera = v112;
          v371 = v113;
          FrameAttributesDictionary_0 = createFrameAttributesDictionary_0(DerivedStorage, v106);
          v116 = CFAttributedStringGetLength(v105);
          Mutable = CGPathCreateMutable();
          v376 = v114;
          stringRange = v116;
          if (Mutable)
          {
            v118 = 0.0;
            v434.origin.x = 0.0;
            v434.origin.y = 0.0;
            v119 = FrameAttributesDictionary_0;
            v120 = Mutable;
            v434.size.width = v100;
            v434.size.height = v99;
            CGPathAddRect(Mutable, 0, v434);
            v428.location = 0;
            v428.length = v116;
            v365 = v120;
            v121 = v120;
            FrameAttributesDictionary_0 = v119;
            Frame = CTFramesetterCreateFrame(framesettera, v428, v121, v119);
            v123 = 0.0;
            if (Frame)
            {
              cf = Frame;
              theDict = v119;
              aStr = MutableCopy;
              Lines = CTFrameGetLines(Frame);
              if (Lines)
              {
                v125 = Lines;
                Count = CFArrayGetCount(Lines);
                if (Count >= 1)
                {
                  v127 = Count;
                  v359 = v101;
                  __s1[0].a = 0.0;
                  values[0] = 0;
                  valuePtr = 0.0;
                  ValueAtIndex = (const __CTLine *)CFArrayGetValueAtIndex(v125, 0);
                  CTLineGetTypographicBounds(ValueAtIndex, &__s1[0].a, (CGFloat *)values, &valuePtr);
                  v129 = 0;
                  v130 = __s1[0].a;
                  v131 = values[0];
                  v132 = valuePtr;
                  do
                  {
                    v133 = (const __CTLine *)CFArrayGetValueAtIndex(v125, v129);
                    v134 = CTLineGetStringRange(v133);
                    if (v129)
                      v135 = 112;
                    else
                      v135 = 96;
                    if (v129)
                      v136 = 120;
                    else
                      v136 = 104;
                    *(_QWORD *)(DerivedStorage + v135) = v134.location;
                    *(_QWORD *)(DerivedStorage + v136) = v134.length;
                    ++v129;
                  }
                  while (v127 != v129);
                  v137 = v130 + *(double *)&v131;
                  v418 = 0;
                  v138 = (const __CFNumber *)CFDictionaryGetValue(v119, (const void *)*MEMORY[0x1E0CA8578]);
                  if (!v138 || (CFNumberGetValue(v138, kCFNumberSInt32Type, &v418), v118 = 0.0, !v418))
                  {
                    v139 = 0;
                    v118 = 0.0;
                    do
                    {
                      v140 = (const __CTLine *)CFArrayGetValueAtIndex(v125, v139);
                      v141 = CTLineGetStringRange(v140);
                      if (v141.length >= 1)
                      {
                        for (i = v141.length + v141.location - 1; ; --i)
                        {
                          String = CFAttributedStringGetString(v105);
                          CharacterAtIndex = CFStringGetCharacterAtIndex(String, i);
                          if (i <= v141.location)
                            break;
                          if (CharacterAtIndex != 13 && CharacterAtIndex != 10)
                            break;
                        }
                      }
                      TypographicBounds = CTLineGetTypographicBounds(v140, &__s1[0].a, (CGFloat *)values, &valuePtr);
                      if (v118 < TypographicBounds)
                        v118 = TypographicBounds;
                      ++v139;
                    }
                    while (v139 != v127);
                  }
                  v123 = v137 + v132;
                  v101 = v359;
                }
              }
              CFRelease(cf);
              MutableCopy = aStr;
              FrameAttributesDictionary_0 = theDict;
            }
            CFRelease(v365);
            v147.location = 0;
          }
          else
          {
            v147.location = 0;
            v118 = 0.0;
            v123 = 0.0;
          }
          compareOptions = *(_QWORD *)&v123;
          v147.length = stringRange;
          v433.width = v100;
          v433.height = v99;
          v149 = CTFramesetterSuggestFrameSizeWithConstraints(framesettera, v147, 0, v433, 0);
          if (v149.width >= v118)
            width = v149.width;
          else
            width = v118;
          if (*(_DWORD *)(DerivedStorage + 16) == 1)
            v151 = v149.width;
          else
            v151 = width;
          __s1[0].b = 0.0;
          __s1[0].a = 0.0;
          Attributes = CFAttributedStringGetAttributes(v105, 0, (CFRange *)__s1);
          EdgeStyle = getEdgeStyle(*(_QWORD *)(a2 + 128), *(_QWORD *)(a2 + 272), Attributes, (void *)*MEMORY[0x1E0CA29C0]);
          if (EdgeStyle == 4)
          {
            v154 = FrameAttributesDictionary_0;
            v148 = v101;
            v155 = v123 * 10.0 / 100.0;
            v33 = alloc;
          }
          else
          {
            v33 = alloc;
            v154 = FrameAttributesDictionary_0;
            v148 = v101;
            if (EdgeStyle == 3 || (v155 = 0.0, EdgeStyle == 2))
            {
              if (v88 > 60.0)
                v155 = v88 * 0.0882352941 / 1.5;
              else
                v155 = v88 * 0.0882352941;
            }
          }
          __s1[0].a = v155;
          v156 = CFAttributedStringGetLength(MutableCopy);
          v157 = CFNumberCreate(v33, kCFNumberCGFloatType, __s1);
          if (v157)
          {
            v158 = v157;
            v429.location = 0;
            v429.length = v156;
            CFAttributedStringSetAttribute(MutableCopy, v429, CFSTR("kFigSubtitleRenderer_CompensationInTextLayout"), v157);
            CFRelease(v158);
          }
          v159 = v123;
          *(float *)(DerivedStorage + 20) = v159;
          if (!CFAttributedStringGetAttribute(v105, 0, (CFStringRef)*MEMORY[0x1E0CA2A68], (CFRange *)&v420))
          {
            v161 = 0.0;
            v162 = v381;
LABEL_207:
            if (v154)
              CFRelease(v154);
            CFRelease(framesettera);
            if (v371)
              CFRelease(v371);
            v167 = v151 + v155 * 2.0;
            if (v162)
              CFRelease(v162);
            v102 = ceil(v149.height + v155 * 2.0);
            v103 = v167 + v161 * 2.0;
            goto LABEL_214;
          }
          FigTextMarkupDimensionMakeFromSimplifiedDictionary();
          v161 = 0.0;
          v162 = v381;
          if (v160 <= 1701650463)
          {
            if (v160 != 622862368)
            {
              if (v160 == 1667591276)
              {
                FigGeometryDimensionGetCGFloat();
                v161 = v164 * *(double *)(a2 + 712);
              }
              goto LABEL_206;
            }
            FigGeometryDimensionGetCGFloat();
            v165 = v166 / 100.0;
          }
          else
          {
            if (v160 != 1701650464)
            {
              if (v160 == 1886679840 || v160 == 1886920736)
              {
                FigGeometryDimensionGetCGFloat();
                v161 = v163;
              }
              goto LABEL_206;
            }
            FigGeometryDimensionGetCGFloat();
          }
          v161 = v88 * v165;
LABEL_206:
          v416 = v161;
          goto LABEL_207;
        }
      }
      v6 = v107;
      DerivedStorage = (uint64_t)framesetter;
    }
    else
    {
      v112 = CTFramesetterCreateWithAttributedString(v105);
      v113 = 0;
      v381 = 0;
      if (v112)
        goto LABEL_146;
    }
LABEL_221:
    CFRelease(v105);
    goto LABEL_222;
  }
LABEL_223:
  if (CFAttributedStringGetAttribute(MutableCopy, 0, v101, &v406))
    updateCMRubyAttributeForCoreTextRender(DerivedStorage, MutableCopy, 0);
  v173 = v408;
  if (FigCFEqual())
  {
    v174 = 0.7;
  }
  else if (FigCFEqual())
  {
    v174 = 0.59;
  }
  else if (FigCFEqual())
  {
    v174 = 0.53;
  }
  else
  {
    v174 = dbl_193301350[FigCFEqual() == 0];
  }
  if (FigCFEqual())
  {
    v175 = 0.11;
  }
  else if (FigCFEqual())
  {
    v175 = 0.07;
  }
  else if (FigCFEqual())
  {
    v175 = 0.26;
  }
  else
  {
    v176 = FigCFEqual();
    v175 = 0.1;
    if (v176)
      v175 = 0.0;
  }
  if (v173 == 1)
  {
    if (v88 <= 12.0)
    {
      v103 = ceil(v103);
      v102 = ceil(*(double *)(a2 + 720));
    }
    else
    {
      v102 = *(double *)(a2 + 720);
    }
    v182 = 0.0;
    v180 = 0.0;
    height = v102;
    v178 = v103;
  }
  else
  {
    if (*(_BYTE *)(a2 + 749))
      v175 = 0.4;
    v177 = v88 * v174;
    if (v88 <= 12.0)
    {
      v183 = ceil(v177);
      v184 = ceil(v88 * v175);
      v103 = ceil(v103);
      v178 = v103 + v183;
      v102 = ceil(v102);
      height = v102 + v184;
      v180 = (float)(v183 * 0.5) + 0.0;
      v181 = (float)(v184 * 0.5);
    }
    else
    {
      v178 = v103 + v88 * v174;
      height = v102 + v88 * v175;
      v180 = v177 * 0.5 + 0.0;
      v181 = v88 * v175 * 0.5;
    }
    v182 = v181 + 0.0;
  }
  y = 0.0;
  if (v88 <= 12.0)
  {
    x = 0.0;
  }
  else
  {
    v435.origin.x = 0.0;
    v435.origin.y = 0.0;
    v435.size.width = v178;
    v435.size.height = height;
    v436 = CGRectIntegral(v435);
    x = v436.origin.x;
    y = v436.origin.y;
    v178 = v436.size.width;
    height = v436.size.height;
    v436.origin.x = v180;
    v436.origin.y = v182;
    v436.size.width = v103;
    v436.size.height = v102;
    v437 = CGRectIntegral(v436);
    v180 = v437.origin.x;
    v182 = v437.origin.y;
    v103 = v437.size.width;
    v102 = v437.size.height;
  }
  if (v92)
    v187 = v182;
  else
    v187 = v180;
  v401 = v187;
  if (v92)
  {
    v188 = v102;
  }
  else
  {
    v180 = v182;
    v188 = v103;
  }
  if (v92)
  {
    v102 = v103;
    v189 = y;
  }
  else
  {
    v189 = x;
  }
  if (v92)
    v190 = x;
  else
    v190 = y;
  v382 = v190;
  framesetterb = *(CTFramesetterRef *)&v189;
  if (v92)
    v191 = height;
  else
    v191 = v178;
  LODWORD(v33) = vcvtpd_s64_f64(v191);
  if (v92)
    v192 = v178;
  else
    v192 = height;
  LODWORD(v92) = vcvtpd_s64_f64(v192);
  v410 = __PAIR64__(v33, v92);
  v193 = *(unsigned int *)(a2 + 332);
  FigCaptionRendererNodeProtocolGetProtocolID();
  v194 = CMBaseObjectGetProtocolVTable();
  if (!v194 || (v195 = *(_QWORD *)(v194 + 16)) == 0)
  {
    v225 = 4294954508;
    goto LABEL_308;
  }
  v196 = *(uint64_t (**)(const void *, const __CFAllocator *, CFTypeRef, uint64_t))(v195 + 200);
  if (!v196)
  {
    v225 = 4294954514;
    goto LABEL_308;
  }
  v197 = v196(a1, v33, v92, v193);
  if ((_DWORD)v197)
  {
    v225 = v197;
    goto LABEL_308;
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  v198 = CMBaseObjectGetProtocolVTable();
  v199 = v401;
  v200 = v188;
  if (v198)
  {
    v201 = *(_QWORD *)(v198 + 16);
    if (v201)
    {
      v202 = *(void (**)(const void *, void **))(v201 + 208);
      if (v202)
        v202(a1, &data);
    }
  }
  aStra = MutableCopy;
  if (!data)
  {
    FigSignalErrorAt();
    v225 = 0;
    goto LABEL_522;
  }
  v398 = v94;
  v203 = (const __CFString *)*MEMORY[0x1E0C9DA10];
  v204 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
  if (!v204)
  {
    v225 = FigSignalErrorAt();
    goto LABEL_522;
  }
  v205 = v204;
  v206 = CGBitmapContextCreate(data, *(_DWORD *)(a2 + 332) * HIDWORD(v410), (int)v410 * (uint64_t)*(int *)(a2 + 332), 8uLL, 4 * *(_DWORD *)(a2 + 332) * HIDWORD(v410), v204, 0x4001u);
  if (!v206)
  {
    v225 = FigSignalErrorAt();
    goto LABEL_521;
  }
  v207 = v206;
  CGContextScaleCTM(v206, (double)*(int *)(a2 + 332), (double)*(int *)(a2 + 332));
  stringRangea = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)v372 = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)&__s1[0].a = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)&__s1[0].c = stringRangea;
  *(_OWORD *)v366 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
  *(_OWORD *)&__s1[0].tx = *(_OWORD *)v366;
  CGContextSetTextMatrix(v207, __s1);
  CGColorSpaceRelease(v205);
  *(_QWORD *)(a2 + 320) = v207;
  v420.origin.x = 0.0;
  v420.origin.y = 0.0;
  valuePtr = 0.0;
  MutableCopy = aStra;
  v208 = (const __CFNumber *)CFAttributedStringGetAttribute(aStra, 0, CFSTR("kFCRSubtitleRenderer_FontSizeToUse"), (CFRange *)&v420);
  if (!v208)
    goto LABEL_286;
  CFNumberGetValue(v208, kCFNumberCGFloatType, &valuePtr);
  if (valuePtr <= 0.0)
    goto LABEL_286;
  v438.origin.x = v401;
  v438.origin.y = v180;
  v438.size.width = v188;
  v438.size.height = v102;
  v455.origin.y = v391;
  v455.origin.x = tx;
  *(_QWORD *)&v455.size.height = color;
  *(_QWORD *)&v455.size.width = stringToFind;
  if (CGRectEqualToRect(v438, v455))
  {
LABEL_286:
    CGColorRelease(0);
    goto LABEL_287;
  }
  v229 = CFAttributedStringGetAttributes(aStra, 0, (CFRange *)&v420);
  v230 = (void *)*MEMORY[0x1E0CA2968];
  theDicta = v229;
  colora = copyContentColor(*(_QWORD *)(a2 + 16), *(CGColorRef *)(a2 + 160), *(_QWORD *)(a2 + 40), v229, (void *)*MEMORY[0x1E0CA2968], *(CGFloat *)(a2 + 184));
  if (colora)
  {
    values[0] = 0;
    v231 = *(const __CFDictionary **)(a2 + 736);
    v377 = v6;
    if (v231 && CFDictionaryGetValueIfPresent(v231, CFSTR("styleOptions"), (const void **)values))
    {
      Components = CGColorGetComponents(colora);
      v233 = CGColorGetComponents(colora)[3];
      CGColorFromCFArray = createCGColorFromCFArray((const __CFDictionary *)values[0], v230, 0);
      v235 = CGColorGetComponents(CGColorFromCFArray);
      v236 = 0;
      if (v233 > 0.0)
      {
        v237 = v235[3];
        if (v233 < v237)
        {
          *(_OWORD *)&__s1[0].a = *(_OWORD *)Components;
          __s1[0].c = Components[2];
          __s1[0].d = v237;
          DeviceRGB = CGColorSpaceCreateDeviceRGB();
          v236 = DeviceRGB;
          if (DeviceRGB)
          {
            v239 = CGColorCreate(DeviceRGB, &__s1[0].a);
            if (v239)
            {
              v240 = v239;
              CGColorRelease(colora);
              colora = v240;
            }
          }
        }
      }
    }
    else
    {
      CGColorFromCFArray = 0;
      v236 = 0;
    }
    CGColorSpaceRelease(v236);
    CGColorRelease(CGColorFromCFArray);
    v6 = v377;
  }
  else
  {
    colora = 0;
  }
  v244 = valuePtr;
  if (FigCFEqual())
  {
    v245 = 0.35;
  }
  else if (FigCFEqual())
  {
    v245 = 0.15;
  }
  else if (FigCFEqual())
  {
    v245 = 0.26;
  }
  else
  {
    v305 = FigCFEqual();
    v245 = 0.23;
    if (v305)
      v245 = 0.0;
  }
  v306 = ceil(v244 * v245);
  *(double *)(DerivedStorage + 136) = v306;
  CGContextSaveGState(v207);
  CGContextSetFontRenderingStyle();
  CGContextSetShouldSmoothFonts(v207, 0);
  CGContextSetShouldAntialias(v207, 1);
  CGContextSetInterpolationQuality(v207, kCGInterpolationHigh);
  if (colora)
  {
    CGContextSetFillColorWithColor(v207, colora);
    CGContextBeginPath(v207);
    if (v306 <= 1.0)
    {
      v448.origin.y = v382;
      *(_QWORD *)&v448.origin.x = framesetterb;
      v448.size.width = v191;
      v448.size.height = v192;
      CGContextAddRect(v207, v448);
    }
    else
    {
      CGContextSaveGState(v207);
      *(_QWORD *)&v444.origin.x = framesetterb;
      v444.origin.y = v382;
      v444.size.width = v191;
      v444.size.height = v192;
      txb = CGRectGetMinX(v444);
      *(_QWORD *)&v445.origin.x = framesetterb;
      v445.origin.y = v382;
      v445.size.width = v191;
      v445.size.height = v192;
      MinY = CGRectGetMinY(v445);
      CGContextTranslateCTM(v207, txb, MinY);
      CGContextScaleCTM(v207, v306, v306);
      *(_QWORD *)&v446.origin.x = framesetterb;
      v446.origin.y = v382;
      v446.size.width = v191;
      v446.size.height = v192;
      txc = CGRectGetWidth(v446) / v306;
      *(_QWORD *)&v447.origin.x = framesetterb;
      v447.origin.y = v382;
      v447.size.width = v191;
      v447.size.height = v192;
      v308 = CGRectGetHeight(v447) / v306;
      CGContextMoveToPoint(v207, txc, v308 * 0.5);
      CGContextAddArcToPoint(v207, txc, v308, txc * 0.5, v308, 1.0);
      CGContextAddArcToPoint(v207, 0.0, v308, 0.0, v308 * 0.5, 1.0);
      CGContextAddArcToPoint(v207, 0.0, 0.0, txc * 0.5, 0.0, 1.0);
      v199 = v401;
      v200 = v188;
      CGContextAddArcToPoint(v207, txc, 0.0, txc, v308 * 0.5, 1.0);
      CGContextClosePath(v207);
      CGContextRestoreGState(v207);
    }
    CGContextFillPath(v207);
  }
  cfa = (CFTypeRef)*MEMORY[0x1E0CA2B30];
  if (CFDictionaryContainsKey(theDicta, (const void *)*MEMORY[0x1E0CA2B30]))
  {
    if (!CGColorSpaceCreateWithName(v203))
    {
      FigSignalErrorAt();
      v315 = 0;
      Image = 0;
      v317 = 0;
      goto LABEL_528;
    }
    v309 = v180;
    v310 = CGColorSpaceCreateWithName(v203);
    v311 = *(_DWORD *)(a2 + 332);
    v312 = v311 * (_DWORD)v33;
    v313 = v311 * (int)v33;
    v314 = v311 * (_DWORD)v92;
    v315 = v310;
    v316 = CGBitmapContextCreate(0, v313, v314, 8uLL, 4 * v312, v310, 0x4001u);
    v317 = v316;
    if (!v316)
    {
      FigSignalErrorAt();
      goto LABEL_527;
    }
    *(_OWORD *)&__s1[0].a = *(_OWORD *)v372;
    *(_OWORD *)&__s1[0].c = stringRangea;
    *(_OWORD *)&__s1[0].tx = *(_OWORD *)v366;
    CGContextSetTextMatrix(v316, __s1);
    values[0] = 0;
    v318 = (const __CFNumber *)CFDictionaryGetValue(theDicta, cfa);
    CFNumberGetValue(v318, kCFNumberCGFloatType, values);
    v319 = *(double *)values > 100.0 || *(double *)values < -100.0;
    v320 = *(double *)values / 100.0;
    if (v319)
      v320 = 0.0;
    values[0] = *(void **)&v320;
    v321 = CFDictionaryContainsKey(theDicta, key);
    v322 = values[0];
    if (v321)
    {
      __s1[0].a = 1.0;
      *(void **)&__s1[0].b = values[0];
      *(_OWORD *)&__s1[0].c = xmmword_193301360;
      *(_OWORD *)&__s1[0].tx = 0uLL;
      v449.origin.y = v382;
      *(_QWORD *)&v449.origin.x = framesetterb;
      v449.size.width = v191;
      v449.size.height = v192;
      v450 = CGRectApplyAffineTransform(v449, __s1);
      __s1[0].a = 1.0;
      *(_QWORD *)&__s1[0].b = v322;
      *(_OWORD *)&__s1[0].c = xmmword_193301360;
      *(_OWORD *)&__s1[0].tx = 0uLL;
      v323 = v192 / v450.size.height;
      CGContextConcatCTM(v317, __s1);
      v324 = (double)*(int *)(a2 + 332);
      v325 = v323 * v324;
    }
    else
    {
      *(_OWORD *)&__s1[0].a = xmmword_193301370;
      *(void **)&__s1[0].c = values[0];
      __s1[0].d = 1.0;
      *(_OWORD *)&__s1[0].tx = 0uLL;
      v451.origin.y = v382;
      *(_QWORD *)&v451.origin.x = framesetterb;
      v451.size.width = v191;
      v451.size.height = v192;
      v452 = CGRectApplyAffineTransform(v451, __s1);
      *(_OWORD *)&__s1[0].a = xmmword_193301370;
      *(_QWORD *)&__s1[0].c = v322;
      __s1[0].d = 1.0;
      *(_OWORD *)&__s1[0].tx = 0uLL;
      v327 = v191 / v452.size.width;
      CGContextConcatCTM(v317, __s1);
      v325 = (double)*(int *)(a2 + 332);
      v324 = v327 * v325;
    }
    CGContextScaleCTM(v317, v324, v325);
    CGContextSetFontRenderingStyle();
    CGContextSetShouldSmoothFonts(v317, 0);
    CGContextSetShouldAntialias(v317, 1);
    CGContextSetInterpolationQuality(v317, kCGInterpolationHigh);
    *(_QWORD *)(a2 + 320) = v317;
    v326 = alloc;
  }
  else
  {
    v317 = 0;
    v315 = 0;
    v326 = alloc;
    v309 = v180;
  }
  if (v398 == CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 40), CFSTR("FigFCRPreview_DisableTextEdge"))
    || (unint64_t)(getEdgeStyle(*(_QWORD *)(a2 + 128), *(_QWORD *)(a2 + 272), theDicta, (void *)*MEMORY[0x1E0CA29C0])- 1) < 3)
  {
    Image = CFAttributedStringCreateMutableCopy(v326, 0, aStra);
    if (!Image)
      goto LABEL_528;
    setupHighlight_1((_QWORD *)a2, Image);
    v373 = 0;
    v360 = 1;
    goto LABEL_453;
  }
  v329 = v326;
  v330 = CFAttributedStringCreateMutableCopy(v326, 0, aStra);
  if (!v330)
  {
LABEL_527:
    Image = 0;
    goto LABEL_528;
  }
  v331 = v330;
  setupHighlight_1((_QWORD *)a2, v330);
  if (ckCaptionSetupText_0(DerivedStorage, v331, 2, a2, valuePtr))
  {
    Image = 0;
    v332 = v331;
    goto LABEL_514;
  }
  v373 = v331;
  if (ckCaptionDrawText_0(DerivedStorage, v331, a2, 1, 1, valuePtr, v199, v309, v200, v102))
  {
    Image = 0;
LABEL_506:
    v332 = v331;
    goto LABEL_514;
  }
  Image = CFAttributedStringCreateMutableCopy(v329, 0, aStra);
  if (!Image)
    goto LABEL_506;
  v360 = 0;
LABEL_453:
  v402 = Image;
  if (ckCaptionSetupText_0(DerivedStorage, Image, 1, a2, valuePtr))
  {
    Image = 0;
    goto LABEL_513;
  }
  v378 = v6;
  v333 = *(const __CFArray **)(DerivedStorage + 56);
  if (!v333)
    goto LABEL_502;
  v334 = CFArrayGetCount(v333);
  if (v334 < 1)
    goto LABEL_502;
  v335 = (char *)v334;
  v336 = 0;
  v399 = (const __CFString *)*MEMORY[0x1E0CA8550];
  txa = (const __CFString *)*MEMORY[0x1E0CA8160];
  v358 = v315;
  stringRangeb = v317;
  v367 = v334;
  v357 = v207;
  do
  {
    v380 = (char *)v336;
    v337 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 56), v336);
    if (!v337)
      goto LABEL_498;
    v338 = v337;
    if (!CFDictionaryGetValue(v337, CFSTR("CMTextHighlightAttributeKey_StringToHighlight")))
      goto LABEL_498;
    v339 = CFAttributedStringGetString(Image);
    v340 = (const __CFString *)CFDictionaryGetValue(v338, CFSTR("CMTextHighlightAttributeKey_CueID"));
    if (v340 && CFStringCompare(v339, v340, 0))
      goto LABEL_497;
    stringToFinda = (const __CFString *)CFDictionaryGetValue(v338, CFSTR("CMTextHighlightAttributeKey_StringToHighlight"));
    LODWORD(values[0]) = 0;
    memset(__s1, 0, 32);
    v341 = CFDictionaryGetValue(v338, CFSTR("CMTextHighlightAttributeKey_ForegroundColor"));
    for (j = 0; j != 4; ++j)
    {
      if (v341)
      {
        if (!FigCFArrayGetFloatAtIndex())
          goto LABEL_497;
        v343 = *(float *)values;
      }
      else
      {
        v343 = *((double *)&xmmword_1933013D0 + j);
      }
      *(&__s1[0].a + j) = v343;
    }
    v344 = createCGColorFromCFArray(0, 0, __s1);
    CopyWithAlpha = CGColorCreateCopyWithAlpha(v344, 0.5);
    v345 = CFDictionaryGetValue(v338, CFSTR("CMTextHighlightAttributeKey_BackgroundColor"));
    v346 = 0;
    while (1)
    {
      if (!v345)
      {
        v347 = dbl_1933013F0[v346];
        goto LABEL_476;
      }
      if (!FigCFArrayGetFloatAtIndex())
        break;
      v347 = *(float *)values;
LABEL_476:
      *(&__s1[0].a + v346++) = v347;
      if (v346 == 4)
      {
        v348 = createCGColorFromCFArray(0, 0, __s1);
        v349 = CGColorCreateCopyWithAlpha(v348, 0.7);
        LODWORD(compareOptions) = 0;
        FigCFDictionaryGetIntIfPresent();
        LODWORD(v416) = -1;
        FigCFDictionaryGetIntIfPresent();
        v432.length = CFStringGetLength(v339);
        v432.location = 0;
        Results = CFStringCreateArrayWithFindResults(alloc, v339, stringToFinda, v432, (int)compareOptions);
        if (Results)
        {
          v351 = Results;
          stringToFindb = (CFStringRef)v349;
          if (CFArrayGetCount(Results) >= 1)
          {
            v352 = 0;
            do
            {
              v353 = (CFRange *)CFArrayGetValueAtIndex(v351, v352);
              v354 = v353;
              v355 = v344;
              v356 = v348;
              if (LODWORD(v416) != -1)
              {
                if (v352 + cueHighlightFocusIndexStart == SLODWORD(v416))
                  v355 = v344;
                else
                  v355 = CopyWithAlpha;
                if (v352 + cueHighlightFocusIndexStart == SLODWORD(v416))
                  v356 = v348;
                else
                  v356 = stringToFindb;
              }
              CFAttributedStringSetAttribute(v402, *v353, v399, v355);
              CFAttributedStringSetAttribute(v402, *v354, txa, v356);
              ++v352;
            }
            while (v352 < CFArrayGetCount(v351));
          }
          cueHighlightFocusIndexStart += CFArrayGetCount(v351);
          CFRelease(v351);
          v207 = v357;
          v349 = (CGColorRef)stringToFindb;
        }
        if (v344)
          goto LABEL_490;
        goto LABEL_491;
      }
    }
    v349 = 0;
    v348 = 0;
    if (v344)
LABEL_490:
      CFRelease(v344);
LABEL_491:
    if (CopyWithAlpha)
      CFRelease(CopyWithAlpha);
    v315 = v358;
    if (v348)
      CFRelease(v348);
    Image = v402;
    if (v349)
      CFRelease(v349);
LABEL_497:
    v317 = stringRangeb;
    v335 = (char *)v367;
LABEL_498:
    v336 = (CFIndex)(v380 + 1);
  }
  while (v380 + 1 != v335);
LABEL_502:
  if (ckCaptionDrawText_0(DerivedStorage, Image, a2, 0, v360, valuePtr, v199, v309, v200, v102))
  {
    Image = 0;
    v6 = v378;
  }
  else
  {
    v6 = v378;
    if (CFDictionaryContainsKey(theDicta, cfa))
    {
      *(_QWORD *)(a2 + 320) = v207;
      Image = CGBitmapContextCreateImage(v317);
      if (Image)
      {
        v453.origin.y = v382;
        *(_QWORD *)&v453.origin.x = framesetterb;
        v453.size.width = v191;
        v453.size.height = v192;
        CGContextDrawImage(v207, v453, Image);
      }
      else
      {
        FigSignalErrorAt();
      }
    }
    else
    {
      Image = 0;
    }
  }
LABEL_513:
  CFRelease(v402);
  v332 = v373;
  if (v373)
LABEL_514:
    CFRelease(v332);
LABEL_528:
  CGContextRestoreGState(v207);
  CGColorRelease(colora);
  if (Image)
    CGImageRelease(Image);
  if (v317)
    CGContextRelease(v317);
  MutableCopy = aStra;
  if (v315)
    CGColorSpaceRelease(v315);
LABEL_287:
  v209 = CGBitmapContextCreateImage(v207);
  if (!v209)
  {
    v225 = FigSignalErrorAt();
    goto LABEL_524;
  }
  v210 = v209;
  FigCaptionRendererNodeProtocolGetProtocolID();
  v211 = CMBaseObjectGetProtocolVTable();
  if (v211)
  {
    v212 = *(_QWORD *)(v211 + 16);
    if (v212)
    {
      v213 = *(void (**)(const void *, CGImage *))(v212 + 168);
      if (v213)
        v213(a1, v210);
    }
  }
  CGImageRelease(v210);
  FigCaptionRendererNodeProtocolGetProtocolID();
  v214 = CMBaseObjectGetProtocolVTable();
  if (v214)
  {
    v215 = *(_QWORD *)(v214 + 16);
    if (v215)
    {
      v216 = *(void (**)(const void *, _QWORD))(v215 + 216);
      if (v216)
        v216(a1, 0);
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  v217 = CMBaseObjectGetProtocolVTable();
  if (v217)
  {
    v218 = *(_QWORD *)(v217 + 16);
    if (v218)
    {
      v219 = *(void (**)(const void *, double, double))(v218 + 112);
      if (v219)
        v219(a1, v191, v192);
    }
  }
  v220 = v412.origin;
  v412.size.width = v191;
  v412.size.height = v192;
  FigCaptionRendererNodeProtocolGetProtocolID();
  v221 = CMBaseObjectGetProtocolVTable();
  if (v221)
  {
    v222 = *(_QWORD *)(v221 + 16);
    if (v222)
    {
      v223 = *(void (**)(const void *, double, double, double, double))(v222 + 96);
      if (v223)
        v223(a1, v220.x, v220.y, v191, v192);
    }
  }
  if (*(_BYTE *)(DerivedStorage + 88))
  {
    if (MutableCopy)
      v224 = CFRetain(MutableCopy);
    else
      v224 = 0;
    *(_QWORD *)(DerivedStorage + 80) = v224;
  }
  if (MutableCopy && *(_BYTE *)(a2 + 748))
  {
    if (CFAttributedStringGetLength(MutableCopy))
    {
      *(_BYTE *)(a2 + 748) = 0;
      if (dword_1EE2A3540)
      {
        LODWORD(values[0]) = 0;
        LOBYTE(valuePtr) = 0;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v227 = values[0];
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, LOBYTE(valuePtr)))
          v228 = v227;
        else
          v228 = v227 & 0xFFFFFFFE;
        if (v228)
        {
          LODWORD(v420.origin.x) = 136315394;
          *(_QWORD *)((char *)&v420.origin.x + 4) = "FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_Draw";
          WORD2(v420.origin.y) = 2112;
          *(_QWORD *)((char *)&v420.origin.y + 6) = aStra;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        MutableCopy = aStra;
        if (dword_1EE2A3540)
        {
          LODWORD(values[0]) = 0;
          LOBYTE(valuePtr) = 0;
          v241 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v242 = values[0];
          if (os_log_type_enabled(v241, LOBYTE(valuePtr)))
            v243 = v242;
          else
            v243 = v242 & 0xFFFFFFFE;
          if (v243)
          {
            LODWORD(v420.origin.x) = 136316162;
            *(_QWORD *)((char *)&v420.origin.x + 4) = "FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_Draw";
            WORD2(v420.origin.y) = 2048;
            *(CGFloat *)((char *)&v420.origin.y + 6) = v412.origin.x;
            HIWORD(v420.size.width) = 2048;
            v420.size.height = v412.origin.y;
            v421 = 2048;
            v422 = v412.size.width;
            v423 = 2048;
            v424 = v412.size.height;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          MutableCopy = aStra;
        }
      }
    }
    CGContextRelease(v207);
LABEL_347:
    CFRelease(MutableCopy);
  }
  else
  {
    CGContextRelease(v207);
    if (MutableCopy)
      goto LABEL_347;
  }
  *(_QWORD *)(a2 + 320) = v6;
  v5 = (CGFloat *)MEMORY[0x1E0C9D628];
LABEL_349:
  v246 = *(_QWORD *)DerivedStorage;
  FigCaptionRendererNodeProtocolGetProtocolID();
  v247 = CMBaseObjectGetProtocolVTable();
  if (v247)
  {
    v248 = *(_QWORD *)(v247 + 16);
    if (v248)
    {
      v249 = *(void (**)(uint64_t, uint64_t))(v248 + 280);
      if (v249)
        v249(v246, a2);
    }
  }
  if (!v6 && !*(_QWORD *)(a2 + 296))
    return 0;
  v456 = *(CGRect *)v5;
  v225 = 0;
  if (!CGRectEqualToRect(v412, v456))
  {
    v250 = v412.size.width;
    if (v412.size.width > 0.0 && v412.size.height > 0.0 && data)
    {
      if (*(_QWORD *)(a2 + 296))
      {
        *(CGPoint *)&__s1[0].a = origin;
        *(CGSize *)&__s1[0].c = v404;
        FigCaptionRendererNodeProtocolGetProtocolID();
        v251 = CMBaseObjectGetProtocolVTable();
        if (v251)
        {
          v252 = *(_QWORD *)(v251 + 16);
          if (v252)
          {
            v253 = *(void (**)(const void *, CGAffineTransform *))(v252 + 104);
            if (v253)
              v253(a1, __s1);
          }
        }
        v254 = CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 296), a1);
        if (!*(_DWORD *)(a2 + 328))
        {
          v255 = *(CGSize *)(MEMORY[0x1E0C9D648] + 16);
          v420.origin = (CGPoint)*MEMORY[0x1E0C9D648];
          v420.size = v255;
          FigCaptionRendererNodeProtocolGetProtocolID();
          v256 = CMBaseObjectGetProtocolVTable();
          if (v256)
          {
            v257 = *(_QWORD *)(v256 + 16);
            if (v257)
            {
              v258 = *(void (**)(const void *, CGRect *))(v257 + 72);
              if (v258)
                v258(a1, &v420);
            }
          }
          if (v408 == 7)
          {
            v259 = v420.size.height - __s1[0].b - __s1[0].d;
          }
          else
          {
            v439.origin.x = __s1[0].a;
            v439.origin.y = __s1[0].b;
            v439.size = *(CGSize *)&__s1[0].c;
            MidY = CGRectGetMidY(v439);
            v265 = CGRectGetMidY(v420);
            v259 = v265 + v265 - MidY + __s1[0].d * -0.5;
          }
          __s1[0].b = v259;
        }
        v266 = *(double *)(DerivedStorage + 136);
        FigCaptionRendererOutputNodeProtocolGetProtocolID();
        v267 = CMBaseObjectGetProtocolVTable();
        if (v267)
        {
          v268 = *(_QWORD *)(v267 + 16);
          if (v268)
          {
            v269 = *(void (**)(const void *, double))(v268 + 152);
            if (v269)
              v269(v254, v266);
          }
        }
        Alpha = *(double *)(a2 + 184);
        v271 = *(const __CFAttributedString **)(DerivedStorage + 32);
        if (v271 && CFAttributedStringGetLength(v271) >= 1)
        {
          v420.origin.x = 0.0;
          v420.origin.y = 0.0;
          v272 = CFAttributedStringGetAttributes(*(CFAttributedStringRef *)(DerivedStorage + 32), 0, (CFRange *)&v420);
          v273 = copyContentColor(*(_QWORD *)(a2 + 16), *(CGColorRef *)(a2 + 160), *(_QWORD *)(a2 + 40), v272, (void *)*MEMORY[0x1E0CA2968], *(CGFloat *)(a2 + 184));
          v274 = v273;
          if (v273)
            Alpha = CGColorGetAlpha(v273);
        }
        else
        {
          v274 = 0;
        }
        FigCaptionRendererOutputNodeProtocolGetProtocolID();
        v275 = CMBaseObjectGetProtocolVTable();
        if (v275)
        {
          v276 = *(_QWORD *)(v275 + 16);
          if (v276)
          {
            v277 = *(void (**)(const void *, double))(v276 + 168);
            if (v277)
              v277(v254, Alpha);
          }
        }
        v278 = *(_OWORD *)&__s1[0].c;
        FigCaptionRendererOutputNodeProtocolGetProtocolID();
        v279 = CMBaseObjectGetProtocolVTable();
        if (v279)
        {
          v280 = *(_QWORD *)(v279 + 16);
          if (v280)
          {
            v281 = *(void (**)(const void *, double, double))(v280 + 88);
            if (v281)
              v281(v254, *(double *)&v278, *((double *)&v278 + 1));
          }
        }
        v440.origin.x = __s1[0].a;
        v440.origin.y = __s1[0].b;
        v440.size = *(CGSize *)&__s1[0].c;
        MidX = CGRectGetMidX(v440);
        v441.origin.x = __s1[0].a;
        v441.origin.y = __s1[0].b;
        v441.size = *(CGSize *)&__s1[0].c;
        v283 = CGRectGetMidY(v441);
        FigCaptionRendererOutputNodeProtocolGetProtocolID();
        v284 = CMBaseObjectGetProtocolVTable();
        if (v284)
        {
          v285 = *(_QWORD *)(v284 + 16);
          if (v285)
          {
            v286 = *(void (**)(const void *, double, double))(v285 + 72);
            if (v286)
              v286(v254, MidX, v283);
          }
        }
        v420.origin.x = 0.0;
        FigCaptionRendererNodeProtocolGetProtocolID();
        v287 = CMBaseObjectGetProtocolVTable();
        if (v287
          && (v288 = *(_QWORD *)(v287 + 16)) != 0
          && (v289 = *(void (**)(const void *, CGRect *))(v288 + 176)) != 0)
        {
          v289(a1, &v420);
          v290 = v420.origin.x;
        }
        else
        {
          v290 = 0.0;
        }
        FigCaptionRendererOutputNodeProtocolGetProtocolID();
        v291 = CMBaseObjectGetProtocolVTable();
        if (v291)
        {
          v292 = *(_QWORD *)(v291 + 16);
          if (v292)
          {
            v293 = *(void (**)(const void *, _QWORD))(v292 + 120);
            if (v293)
              v293(v254, *(_QWORD *)&v290);
          }
        }
        if (v274)
          CFRelease(v274);
        return 0;
      }
      v260 = (int)(v412.size.height + v412.origin.y);
      v261 = v413.origin.y;
      if (v412.origin.y <= v413.origin.y)
      {
        v263 = 0;
      }
      else
      {
        v262 = v413.origin.y + v413.size.height;
        if (v412.origin.y > v413.origin.y + v413.size.height)
          return 0;
        if (v412.size.height + v412.origin.y <= v262)
        {
          v263 = 0;
        }
        else
        {
          v260 = (int)v262;
          v263 = (int)(v412.size.height - ((double)(int)v262 - v412.origin.y));
        }
        v261 = v412.origin.y;
      }
      v294 = v412.origin.x;
      v295 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
      if (!v295)
        return FigSignalErrorAt();
      v205 = v295;
      v296 = v260 - (int)v261;
      if (v296 >= (int)v410)
        v297 = v410;
      else
        v297 = v260 - (int)v261;
      if (v297 + v263 <= (int)v410 || v263 <= 0)
        v299 = v263;
      else
        v299 = v410 - v297;
      v300 = CGBitmapContextCreate((char *)data + v299 * *(_DWORD *)(a2 + 332) * 4 * HIDWORD(v410) * *(_DWORD *)(a2 + 332), HIDWORD(v410) * *(_DWORD *)(a2 + 332), *(_DWORD *)(a2 + 332) * v297, 8uLL, 4 * HIDWORD(v410) * *(_DWORD *)(a2 + 332), v295, 0x4001u);
      if (v300)
      {
        v207 = v300;
        CGContextScaleCTM(v300, (double)*(int *)(a2 + 332), (double)*(int *)(a2 + 332));
        v301 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
        *(_OWORD *)&__s1[0].a = *MEMORY[0x1E0C9BAA8];
        *(_OWORD *)&__s1[0].c = v301;
        *(_OWORD *)&__s1[0].tx = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
        CGContextSetTextMatrix(v207, __s1);
        CGColorSpaceRelease(v205);
        v302 = CGBitmapContextCreateImage(v207);
        if (v302)
        {
          v303 = v302;
          v442.origin.y = (double)(int)v261;
          v442.size.height = (double)v296;
          v442.origin.x = v294;
          v442.size.width = v250;
          v443 = CGRectIntegral(v442);
          CGContextDrawImage(v6, v443, v303);
          CGImageRelease(v303);
          CGContextRelease(v207);
          return 0;
        }
        v225 = FigSignalErrorAt();
        MutableCopy = 0;
LABEL_524:
        CGContextRelease(v207);
LABEL_308:
        if (MutableCopy)
          CFRelease(MutableCopy);
        return v225;
      }
      v225 = FigSignalErrorAt();
      aStra = 0;
LABEL_521:
      CGColorSpaceRelease(v205);
LABEL_522:
      MutableCopy = aStra;
      goto LABEL_308;
    }
  }
  return v225;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_Layout(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  CGSize v5;
  CGPoint v6;
  uint64_t ProtocolVTable;
  uint64_t v8;
  void (*v9)(const void *, _OWORD *);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(const void *, CGRect *);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(const void *, CGSize *);
  uint64_t v16;
  uint64_t v17;
  void (*v18)(const void *, CGPoint *);
  CGPoint v19;
  CGSize size;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(const void *, double, double, double, double);
  CGPoint origin;
  CGSize v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(const void *, double, double, double, double);
  uint64_t v29;
  uint64_t v30;
  void (*v31)(const void *, uint64_t);
  uint64_t v32;
  const __CFArray *Value;
  const __CFArray *v34;
  CFIndex Count;
  CFIndex v36;
  const __CFAttributedString *ValueAtIndex;
  const __CFAttributedString *v38;
  CFIndex Length;
  CFNumberRef v40;
  CFDictionaryRef DictionaryRepresentation;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t);
  const __CFAttributedString *v47;
  CFDictionaryRef theDict;
  _OWORD v49[2];
  CGPoint v50;
  CGSize v51;
  CGRect v52;
  CFRange v53;
  CFRange v54;
  CFRange v55;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
  v52.origin = (CGPoint)*MEMORY[0x1E0C9D628];
  v52.size = v5;
  v51 = (CGSize)*MEMORY[0x1E0C9D820];
  v6 = (CGPoint)*MEMORY[0x1E0C9D538];
  v49[1] = v5;
  v50 = v6;
  v49[0] = v52.origin;
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v8 = *(_QWORD *)(ProtocolVTable + 16);
    if (v8)
    {
      v9 = *(void (**)(const void *, _OWORD *))(v8 + 72);
      if (v9)
        v9(a1, v49);
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  v10 = CMBaseObjectGetProtocolVTable();
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 16);
    if (v11)
    {
      v12 = *(void (**)(const void *, CGRect *))(v11 + 104);
      if (v12)
        v12(a1, &v52);
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  v13 = CMBaseObjectGetProtocolVTable();
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 16);
    if (v14)
    {
      v15 = *(void (**)(const void *, CGSize *))(v14 + 120);
      if (v15)
        v15(a1, &v51);
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  v16 = CMBaseObjectGetProtocolVTable();
  if (v16)
  {
    v17 = *(_QWORD *)(v16 + 16);
    if (v17)
    {
      v18 = *(void (**)(const void *, CGPoint *))(v17 + 136);
      if (v18)
        v18(a1, &v50);
    }
  }
  if (v52.origin.x != v50.x || v52.origin.y != v50.y)
  {
    v52.origin = v50;
    v19 = v50;
    size = v52.size;
    FigCaptionRendererNodeProtocolGetProtocolID();
    v21 = CMBaseObjectGetProtocolVTable();
    if (v21)
    {
      v22 = *(_QWORD *)(v21 + 16);
      if (v22)
      {
        v23 = *(void (**)(const void *, double, double, double, double))(v22 + 96);
        if (v23)
          v23(a1, v19.x, v19.y, size.width, size.height);
      }
    }
  }
  if (v52.size.width != v51.width || v52.size.height != v51.height)
  {
    v52.size = v51;
    origin = v52.origin;
    v25 = v51;
    FigCaptionRendererNodeProtocolGetProtocolID();
    v26 = CMBaseObjectGetProtocolVTable();
    if (v26)
    {
      v27 = *(_QWORD *)(v26 + 16);
      if (v27)
      {
        v28 = *(void (**)(const void *, double, double, double, double))(v27 + 96);
        if (v28)
          v28(a1, origin.x, origin.y, v25.width, v25.height);
      }
    }
    FigCaptionRendererNodeProtocolGetProtocolID();
    v29 = CMBaseObjectGetProtocolVTable();
    if (v29)
    {
      v30 = *(_QWORD *)(v29 + 16);
      if (v30)
      {
        v31 = *(void (**)(const void *, uint64_t))(v30 + 216);
        if (v31)
          v31(a1, 1);
      }
    }
  }
  v32 = *(_QWORD *)(a2 + 312);
  if (v32)
  {
    theDict = 0;
    FigCaptionRendererLayoutContextGetSubtitleSample(v32, &theDict);
    if (theDict)
    {
      Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("SubtitleContent"));
      if (Value)
      {
        v34 = Value;
        Count = CFArrayGetCount(Value);
        v47 = 0;
        FigCaptionRendererLayoutContextGetMapping(*(_QWORD *)(a2 + 312), a1, (const void **)&v47);
        if (Count >= 1)
        {
          v36 = 0;
          while (1)
          {
            ValueAtIndex = (const __CFAttributedString *)CFArrayGetValueAtIndex(v34, v36);
            if (ValueAtIndex)
            {
              v38 = ValueAtIndex;
              if (CFAttributedStringGetLength(ValueAtIndex))
              {
                if (v38 == v47)
                  break;
              }
            }
            if (Count == ++v36)
              goto LABEL_49;
          }
          Length = CFAttributedStringGetLength(v38);
          if (*(_BYTE *)(DerivedStorage + 88))
          {
            v53.location = 0;
            v53.length = Length;
            CFAttributedStringReplaceAttributedString(v38, v53, *(CFAttributedStringRef *)(DerivedStorage + 80));
          }
          else
          {
            v40 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberCGFloatType, (const void *)(DerivedStorage + 24));
            v54.location = 0;
            v54.length = Length;
            CFAttributedStringSetAttribute(v38, v54, CFSTR("kFigSubtitleRenderer_FontSizeToUse"), v40);
            if (v40)
              CFRelease(v40);
          }
          DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v52);
          v55.location = 0;
          v55.length = Length;
          CFAttributedStringSetAttribute(v38, v55, CFSTR("kFigSubtitleRenderer_SuggestTextLayout"), DictionaryRepresentation);
          if (DictionaryRepresentation)
            CFRelease(DictionaryRepresentation);
        }
      }
    }
  }
LABEL_49:
  v42 = *(_QWORD *)DerivedStorage;
  FigCaptionRendererNodeProtocolGetProtocolID();
  v43 = CMBaseObjectGetProtocolVTable();
  if (!v43)
    return 4294954508;
  v44 = *(_QWORD *)(v43 + 16);
  if (!v44)
    return 4294954508;
  v45 = *(uint64_t (**)(uint64_t, uint64_t))(v44 + 288);
  if (v45)
    return v45(v42, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_ExecActions(uint64_t a1)
{
  uint64_t ProtocolVTable;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, CFArrayRef *);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, float64x2_t *);
  const void *ValueAtIndex;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(const void *, char **);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(const void *, float64x2_t *);
  uint64_t v16;
  uint64_t v17;
  void (*v18)(const void *, int *);
  float64x2_t v19;
  float64x2_t v20;
  int v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, __n128, double);
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  int v30;
  void *v31;
  float64x2_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(void *, double, double);
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(void *, _QWORD);
  float64x2_t v40;
  __n128 v41;
  void *value;
  int v43;
  float64x2_t v44;
  char *__s1;
  CFArrayRef theArray;
  float64x2_t v47;

  v40 = *(float64x2_t *)MEMORY[0x1E0C9D538];
  v47 = *(float64x2_t *)MEMORY[0x1E0C9D538];
  __s1 = 0;
  theArray = 0;
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v3 = *(_QWORD *)(ProtocolVTable + 16);
    if (v3)
    {
      v4 = *(uint64_t (**)(uint64_t, CFArrayRef *))(v3 + 344);
      if (!v4)
      {
LABEL_29:
        v22 = 4294954514;
        goto LABEL_27;
      }
      v5 = v4(a1, &theArray);
      if ((_DWORD)v5)
      {
LABEL_53:
        v22 = v5;
        goto LABEL_27;
      }
      if (!theArray || !CFArrayGetCount(theArray))
        return 0;
      FigCaptionRendererNodeProtocolGetProtocolID();
      v6 = CMBaseObjectGetProtocolVTable();
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 16);
        if (v7)
        {
          v8 = *(void (**)(uint64_t, float64x2_t *))(v7 + 136);
          if (v8)
            v8(a1, &v47);
        }
      }
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
      FigCaptionRendererBaseProtocolGetProtocolID();
      v10 = CMBaseObjectGetProtocolVTable();
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 16);
        if (v11)
        {
          v12 = *(uint64_t (**)(const void *, char **))(v11 + 8);
          if (v12)
          {
            v5 = v12(ValueAtIndex, &__s1);
            if (!(_DWORD)v5)
            {
              if (__s1 && !strcmp(__s1, "FigCaptionRendererMoveToAction"))
              {
                v44 = v40;
                v43 = 0;
                FigCaptionRendererMoveToActionProtocolGetProtocolID();
                v13 = CMBaseObjectGetProtocolVTable();
                if (v13)
                {
                  v14 = *(_QWORD *)(v13 + 16);
                  if (v14)
                  {
                    v15 = *(void (**)(const void *, float64x2_t *))(v14 + 8);
                    if (v15)
                      v15(ValueAtIndex, &v44);
                  }
                }
                FigCaptionRendererActionProtocolGetProtocolID();
                v16 = CMBaseObjectGetProtocolVTable();
                if (v16
                  && (v17 = *(_QWORD *)(v16 + 16)) != 0
                  && (v18 = *(void (**)(const void *, int *))(v17 + 8)) != 0
                  && (v18(ValueAtIndex, &v43), v43 >= 33))
                {
                  v19 = v47;
                  v20 = vdivq_f64(vsubq_f64(v44, v47), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(int)(v43 / 0x21u + 1)), 0));
                  v21 = 1;
                }
                else
                {
                  v21 = 0;
                  v19 = v47;
                  v20 = vsubq_f64(v44, v47);
                }
                if (v20.f64[0] != 0.0 || v20.f64[1] != 0.0)
                {
                  v41 = (__n128)vaddq_f64(v20, v19);
                  v47 = (float64x2_t)v41;
                  FigCaptionRendererNodeProtocolGetProtocolID();
                  v24 = CMBaseObjectGetProtocolVTable();
                  if (v24)
                  {
                    v25 = *(_QWORD *)(v24 + 16);
                    if (v25)
                    {
                      v26 = *(void (**)(uint64_t, __n128, double))(v25 + 128);
                      if (v26)
                        v26(a1, v41, v41.n128_f64[1]);
                    }
                  }
                  FigCaptionRendererNodeProtocolGetProtocolID();
                  v27 = CMBaseObjectGetProtocolVTable();
                  if (v27)
                  {
                    v28 = *(_QWORD *)(v27 + 16);
                    if (v28)
                    {
                      v29 = *(void (**)(uint64_t, uint64_t))(v28 + 232);
                      if (v29)
                        v29(a1, 1);
                    }
                  }
                }
                CFArrayRemoveValueAtIndex(theArray, 0);
                if (v21)
                {
                  v30 = v43;
                  value = 0;
                  FigCaptionRendererMoveToActionCreate(&value);
                  v31 = value;
                  v32 = v44;
                  FigCaptionRendererMoveToActionProtocolGetProtocolID();
                  v33 = CMBaseObjectGetProtocolVTable();
                  if (v33)
                  {
                    v34 = *(_QWORD *)(v33 + 16);
                    if (v34)
                    {
                      v35 = *(void (**)(void *, double, double))(v34 + 16);
                      if (v35)
                        v35(v31, v32.f64[0], v32.f64[1]);
                    }
                  }
                  v36 = value;
                  FigCaptionRendererActionProtocolGetProtocolID();
                  v37 = CMBaseObjectGetProtocolVTable();
                  if (v37)
                  {
                    v38 = *(_QWORD *)(v37 + 16);
                    if (v38)
                    {
                      v39 = *(void (**)(void *, _QWORD))(v38 + 16);
                      if (v39)
                        v39(v36, (v30 - 33));
                    }
                  }
                  CFArrayInsertValueAtIndex(theArray, 0, value);
                  if (value)
                    CFRelease(value);
                }
              }
              return 0;
            }
            goto LABEL_53;
          }
          goto LABEL_29;
        }
      }
    }
  }
  v22 = 4294954508;
LABEL_27:
  FigSignalErrorAt();
  return v22;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_Compose(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t *v6;
  uint64_t ProtocolVTable;
  uint64_t v8;
  void (*v9)(uint64_t, char *);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, __int16 *);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  __int16 v26;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 72))
    return 0;
  v6 = (uint64_t *)DerivedStorage;
  v26 = 0;
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v8 = *(_QWORD *)(ProtocolVTable + 16);
    if (v8)
    {
      v9 = *(void (**)(uint64_t, char *))(v8 + 248);
      if (v9)
        v9(a1, (char *)&v26 + 1);
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  v10 = CMBaseObjectGetProtocolVTable();
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 16);
    if (v11)
    {
      v12 = *(void (**)(uint64_t, __int16 *))(v11 + 240);
      if (v12)
        v12(a1, &v26);
    }
  }
  if (HIBYTE(v26))
  {
    FigCaptionRendererNodeProtocolGetProtocolID();
    v13 = CMBaseObjectGetProtocolVTable();
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 16);
      if (v14)
      {
        v15 = *(void (**)(uint64_t, uint64_t))(v14 + 296);
        if (v15)
          v15(a1, a2);
      }
    }
  }
  if ((_BYTE)v26)
  {
    FigCaptionRendererNodeProtocolGetProtocolID();
    v16 = CMBaseObjectGetProtocolVTable();
    if (v16)
    {
      v17 = *(_QWORD *)(v16 + 16);
      if (v17)
      {
        v18 = *(void (**)(uint64_t, uint64_t))(v17 + 288);
        if (v18)
          v18(a1, a2);
      }
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  v19 = CMBaseObjectGetProtocolVTable();
  if (v19)
  {
    v20 = *(_QWORD *)(v19 + 16);
    if (v20)
    {
      v21 = *(void (**)(uint64_t, uint64_t))(v20 + 280);
      if (v21)
        v21(a1, a2);
    }
  }
  v22 = *v6;
  FigCaptionRendererNodeProtocolGetProtocolID();
  v23 = CMBaseObjectGetProtocolVTable();
  if (!v23)
    return 4294954508;
  v24 = *(_QWORD *)(v23 + 16);
  if (!v24)
    return 4294954508;
  v25 = *(uint64_t (**)(uint64_t, uint64_t))(v24 + 304);
  if (v25)
    return v25(v22, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_OnChildUpdateDisplayRequest(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _OWORD *);
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v8 = *a2;
  v9 = a2[1];
  v10 = *((_QWORD *)a2 + 4);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, _OWORD *))(v5 + 312);
  if (!v6)
    return 4294954514;
  v11[0] = v8;
  v11[1] = v9;
  v12 = v10;
  return v6(v3, v11);
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_AddAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 320);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_RemoveAllActions()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 328);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_SetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 336);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_GetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 344);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_SelectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, double, double);

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, double, double))(v9 + 352);
  if (v10)
    return v10(v7, a4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_UnselectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, double, double);

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, double, double))(v9 + 360);
  if (v10)
    return v10(v7, a4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_IsSelected(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 368);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_BeginScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 376);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererNodeProtocol_EndScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 384);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

void updateCMRubyAttributeForCoreTextRender(uint64_t a1, CFAttributedStringRef aStr, int a3)
{
  CFIndex v4;
  const __CFString *v5;
  const __CFString *v6;
  const __CFAllocator *v7;
  const __CFString *v8;
  const __CFDictionary *Attributes;
  const __CFDictionary *v10;
  const __CFAttributedString *Value;
  const __CFDictionary *v12;
  const __CFString *v13;
  const __CFString *v14;
  CFIndex v15;
  CFComparisonResult v16;
  CFRange v17;
  const void *v18;
  CFComparisonResult v19;
  CFIndex v20;
  __CFAttributedString *v21;
  __CFAttributedString *v22;
  const void *v23;
  const void *v24;
  const __CFDictionary *v25;
  const __CFString *v26;
  const __CFString *v27;
  const __CFString *v28;
  const void *v29;
  UniChar v30;
  CFComparisonResult v31;
  uint64_t v32;
  __CFAttributedString *v33;
  __CFAttributedString *v34;
  const void *UInt32;
  CFComparisonResult v36;
  CFComparisonResult v37;
  UniChar v38;
  const void *v39;
  const __CFDictionary *v40;
  const void *v41;
  uint64_t v42;
  CFAttributedStringRef v43;
  __CFAttributedString *v44;
  const void *v45;
  int v46;
  const void *v47;
  const void *v48;
  const void *v49;
  const __CFString *v51;
  CFIndex Length;
  const void *v54;
  const void *v55;
  const __CFString *str;
  const void *v57;
  const __CFString *key;
  CFStringRef attrName;
  UniChar chars;
  CFRange effectiveRange;
  CFRange v62;
  CFRange v63;
  CFRange v64;
  CFRange v65;
  CFRange v66;
  CFRange v67;
  CFRange v68;
  CFRange v69;
  CFRange v70;
  CFRange v71;
  CFRange v72;

  v62.location = 0;
  v62.length = 0;
  effectiveRange.location = 0;
  effectiveRange.length = 0;
  Length = CFAttributedStringGetLength(aStr);
  if (Length < 1)
    return;
  v4 = 0;
  v5 = 0;
  str = 0;
  v6 = (const __CFString *)*MEMORY[0x1E0CA2AD8];
  key = (const __CFString *)*MEMORY[0x1E0CA2AE0];
  attrName = (CFStringRef)*MEMORY[0x1E0CA2AF0];
  v55 = (const void *)*MEMORY[0x1E0CA2D20];
  v54 = (const void *)*MEMORY[0x1E0CA2D18];
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v57 = (const void *)*MEMORY[0x1E0CA2CE0];
  v8 = (const __CFString *)*MEMORY[0x1E0CA2B00];
  v51 = (const __CFString *)*MEMORY[0x1E0CA2B40];
  while (1)
  {
    Attributes = CFAttributedStringGetAttributes(aStr, v4, &effectiveRange);
    if (!Attributes)
      goto LABEL_66;
    v10 = Attributes;
    if (CFDictionaryContainsKey(Attributes, v6))
    {
      Value = (const __CFAttributedString *)CFDictionaryGetValue(v10, v6);
      v12 = CFAttributedStringGetAttributes(Value, 0, &v62);
      v13 = (const __CFString *)CFDictionaryGetValue(v12, key);
      v14 = (const __CFString *)CFDictionaryGetValue(v12, attrName);
      v15 = CFAttributedStringGetLength(Value);
      if (v14)
      {
        v16 = CFStringCompare(v14, (CFStringRef)*MEMORY[0x1E0CA2D30], 0);
        if (!a3 && v16 == kCFCompareEqualTo)
        {
          *(_BYTE *)(a1 + 89) = 1;
          v17 = v62;
          if (effectiveRange.length + effectiveRange.location <= *(_QWORD *)(a1 + 104) + *(_QWORD *)(a1 + 96))
            v18 = v55;
          else
            v18 = v54;
          CFAttributedStringSetAttribute(Value, v17, attrName, v18);
          CFAttributedStringSetAttribute(aStr, effectiveRange, v6, Value);
        }
      }
      if (v13)
      {
        v19 = CFStringCompare(v13, (CFStringRef)*MEMORY[0x1E0CA2CF8], 0);
        if (a3)
        {
          if (v19 == kCFCompareEqualTo && effectiveRange.length == v15 && effectiveRange.length >= 1)
            break;
        }
      }
    }
LABEL_24:
    v24 = (const void *)*MEMORY[0x1E0CA2B18];
    if (CFDictionaryContainsKey(v10, (const void *)*MEMORY[0x1E0CA2B18]))
    {
      v25 = (const __CFDictionary *)CFDictionaryGetValue(v10, v24);
      v26 = (const __CFString *)CFDictionaryGetValue(v25, (const void *)*MEMORY[0x1E0CA2D90]);
      v27 = (const __CFString *)CFDictionaryGetValue(v25, (const void *)*MEMORY[0x1E0CA2D70]);
      v28 = (const __CFString *)CFDictionaryGetValue(v25, (const void *)*MEMORY[0x1E0CA2D50]);
      v29 = CFDictionaryGetValue(v25, (const void *)*MEMORY[0x1E0CA2D88]);
      v30 = CFAttributedStringGetAttribute(aStr, 0, v51, &v62) ? -443 : 9679;
      chars = v30;
      if (v26)
      {
        v31 = CFStringCompare(v26, (CFStringRef)*MEMORY[0x1E0CA2D98], 0);
        if (a3 && v31 == kCFCompareEqualTo)
          goto LABEL_31;
        v36 = CFStringCompare(v26, (CFStringRef)*MEMORY[0x1E0CA2DA8], 0);
        if (a3)
        {
          if (v36 == kCFCompareEqualTo)
          {
            if (!v27 || !v28)
              goto LABEL_31;
            v37 = CFStringCompare(v27, (CFStringRef)*MEMORY[0x1E0CA2D78], 0);
            if (CFStringCompare(v28, (CFStringRef)*MEMORY[0x1E0CA2D58], 0))
            {
              if (CFStringCompare(v28, (CFStringRef)*MEMORY[0x1E0CA2D60], 0))
              {
                if (CFStringCompare(v28, (CFStringRef)*MEMORY[0x1E0CA2D68], 0) == kCFCompareEqualTo)
                {
                  if (v37)
                    v38 = -442;
                  else
                    v38 = -443;
                  goto LABEL_74;
                }
LABEL_31:
                v5 = CFStringCreateWithCharacters(v7, &chars, 1);
                if (!v5)
                  goto LABEL_75;
                if (effectiveRange.length >= 1)
                {
                  v32 = 0;
                  while (1)
                  {
                    v33 = CFAttributedStringCreate(v7, v5, 0);
                    if (!v33)
                      goto LABEL_75;
                    v34 = v33;
                    if (v29)
                    {
                      v66.location = 0;
                      v66.length = 1;
                      CFAttributedStringSetAttribute(v33, v66, attrName, v29);
                    }
                    UInt32 = (const void *)FigCFNumberCreateUInt32();
                    v67.location = 0;
                    v67.length = 1;
                    CFAttributedStringSetAttribute(v34, v67, v8, UInt32);
                    v68.location = v32 + effectiveRange.location;
                    v68.length = 1;
                    CFAttributedStringSetAttribute(aStr, v68, v6, v34);
                    if (UInt32)
                      CFRelease(UInt32);
                    CFRelease(v34);
                    if (++v32 >= effectiveRange.length)
                      goto LABEL_51;
                  }
                }
                goto LABEL_51;
              }
              if (v37)
                v38 = 9702;
              else
                v38 = 8226;
            }
            else if (v37)
            {
              v38 = 9675;
            }
            else
            {
              v38 = 9679;
            }
LABEL_74:
            chars = v38;
            goto LABEL_31;
          }
        }
      }
    }
LABEL_51:
    v39 = (const void *)*MEMORY[0x1E0CA2AF8];
    if (CFDictionaryContainsKey(v10, (const void *)*MEMORY[0x1E0CA2AF8]))
    {
      v40 = (const __CFDictionary *)CFDictionaryGetValue(v10, v39);
      v41 = (const void *)*MEMORY[0x1E0CA2D38];
      if (CFDictionaryGetValue(v40, (const void *)*MEMORY[0x1E0CA2D38]))
      {
        if (!CFDictionaryContainsKey(v10, v6))
        {
          chars = 12288;
          str = CFStringCreateWithCharacters(v7, &chars, 1);
          if (!str)
            goto LABEL_75;
          if (effectiveRange.length >= 1)
          {
            v42 = 0;
            while (1)
            {
              v43 = CFAttributedStringCreate(v7, str, 0);
              if (!v43)
                break;
              v44 = v43;
              v45 = CFDictionaryGetValue(v40, v41);
              v46 = FigCFEqual();
              v47 = v55;
              if ((v42 & 1) != 0)
                v47 = v54;
              if (v46)
                v48 = v47;
              else
                v48 = v45;
              v69.location = 0;
              v69.length = 1;
              CFAttributedStringSetAttribute(v44, v69, attrName, v48);
              v49 = (const void *)FigCFNumberCreateUInt32();
              v70.location = 0;
              v70.length = 1;
              CFAttributedStringSetAttribute(v44, v70, v8, v49);
              v71.location = v42 + effectiveRange.location;
              v71.length = 1;
              CFAttributedStringSetAttribute(aStr, v71, v6, v44);
              if (v49)
                CFRelease(v49);
              CFRelease(v44);
              if (++v42 >= effectiveRange.length)
                goto LABEL_66;
            }
LABEL_75:
            v22 = 0;
            goto LABEL_76;
          }
        }
      }
    }
LABEL_66:
    v4 = effectiveRange.length + effectiveRange.location;
    if (effectiveRange.length + effectiveRange.location >= Length)
      goto LABEL_75;
  }
  v20 = 0;
  while (1)
  {
    v72.location = v20;
    v72.length = 1;
    v21 = CFAttributedStringCreateWithSubstring(v7, Value, v72);
    v22 = v21;
    if (!v6)
      break;
    v63.location = 0;
    v63.length = 1;
    CFAttributedStringSetAttribute(v21, v63, key, v57);
    v23 = (const void *)FigCFNumberCreateUInt32();
    v64.location = 0;
    v64.length = 1;
    CFAttributedStringSetAttribute(v22, v64, v8, v23);
    v65.location = v20 + effectiveRange.location;
    v65.length = 1;
    CFAttributedStringSetAttribute(aStr, v65, v6, v22);
    if (v23)
      CFRelease(v23);
    if (v22)
      CFRelease(v22);
    if (++v20 >= effectiveRange.length)
      goto LABEL_24;
  }
LABEL_76:
  if (v5)
    CFRelease(v5);
  if (str)
    CFRelease(str);
  if (v22)
    CFRelease(v22);
}

uint64_t ckCaptionSetupText_0(uint64_t a1, CFAttributedStringRef aStr, int a3, uint64_t a4, double a5)
{
  double v6;
  __CFAttributedString *v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  CFIndex v11;
  const __CFString *String;
  UniChar *v13;
  CFAllocatorRef *v14;
  UniChar *v15;
  CFNumberRef v16;
  CFNumberRef v17;
  int v18;
  CFIndex v19;
  const __CFString *v20;
  CFRange v21;
  unsigned int v22;
  const __CFString *v23;
  CFIndex Length;
  uint64_t v25;
  int v26;
  uint64_t v27;
  CFIndex v29;
  __CFDictionary *Mutable;
  __CFDictionary *v31;
  CTParagraphStyleRef v32;
  CTParagraphStyleRef v33;
  const void *v34;
  const __CFString *v35;
  const __CFDictionary *Attributes;
  CGColor *CGColorFromCFArray;
  const __CFNumber *v38;
  const __CFNumber *v39;
  const void *v40;
  const __CFString *v41;
  int v42;
  double v43;
  uint64_t v44;
  const __CFString *v45;
  UniChar *v46;
  UniChar *v47;
  uint64_t v48;
  const void *v49;
  const __CFDictionary *v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  int v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  int v64;
  CFNumberRef v65;
  _BOOL4 v66;
  int v67;
  const __CFArray *v68;
  const __CFArray *v69;
  CFIndex Count;
  CFIndex v71;
  CFIndex v72;
  const __CFDictionary *ValueAtIndex;
  const __CTFontDescriptor *v74;
  CFDictionaryRef v75;
  const __CTFontDescriptor *v76;
  const __CTFontDescriptor *v77;
  CTFontDescriptorRef MatchingFontDescriptor;
  const __CFString *v79;
  const __CFString *v80;
  int v81;
  int v82;
  const __CTFontDescriptor *v83;
  int v84;
  const __CTFontDescriptor *v85;
  const void *v86;
  const void *v87;
  const __CTFontDescriptor *v88;
  const __CFString *v89;
  const void *v90;
  const __CFString *v91;
  const void *v92;
  const void *v93;
  const __CTFont *v94;
  double Size;
  unsigned int v96;
  uint64_t v97;
  const void *v98;
  const __CFDictionary *v99;
  CGColorRef v100;
  const __CFString *v101;
  const void *v102;
  const __CFString *v103;
  BOOL v104;
  char v105;
  const __CTFont *v106;
  char v107;
  uint64_t v108;
  const __CTFontDescriptor *v109;
  CTFontSymbolicTraits v110;
  const void *CopyWithSymbolicTraits;
  const __CFNumber *SInt32;
  const __CFNumber *UInt32;
  const __CTFontDescriptor *CopyWithFeature;
  CTFontDescriptorRef v115;
  CTFontDescriptorRef v116;
  __CFDictionary *v117;
  __CFDictionary *v118;
  float v119;
  CFNumberRef v120;
  CFNumberRef v121;
  const __CTFontDescriptor *CopyWithAttributes;
  const __CFDictionary *v123;
  const __CFArray *v124;
  const __CFArray *v125;
  CFArrayRef v126;
  CFArrayRef v127;
  const __CTFontDescriptor *v128;
  int v129;
  const __CFString *v130;
  const __CFString *v131;
  const __CFString *v132;
  int v133;
  double Ascent;
  double Descent;
  double Leading;
  const __CTFont *v137;
  double v138;
  double v139;
  CFIndex v140;
  CFIndex v141;
  CFIndex v142;
  int v143;
  int v144;
  const __CFDictionary *v145;
  const __CFDictionary *v146;
  const __CFAttributedString *v147;
  const __CFDictionary *v148;
  int v149;
  double v150;
  double v151;
  double v152;
  const __CFString *v153;
  const __CFArray *v154;
  CTParagraphStyleRef v155;
  CGColorRef v156;
  const __CTFontDescriptor *v157;
  void *v158;
  void *v159;
  const __CFString *v160;
  const __CFString *v161;
  const void *v162;
  void *v163;
  const __CFString *v164;
  void *v165;
  const __CFString *attrName;
  void *v167;
  const __CFString *v168;
  const __CFString *v169;
  const __CFString *v170;
  const __CFString *v171;
  const __CFString *v172;
  const __CFString *theString2;
  int v174;
  const __CFString *attribute;
  const __CFString *v176;
  void *v177;
  void *v178;
  void *v179;
  uint64_t v180;
  const __CFString *v181;
  const __CTFontDescriptor *v182;
  void *v183;
  void *v184;
  void *v185;
  void *v186;
  const __CFString *v187;
  void *v188;
  void *v189;
  const __CFString *v190;
  void *v191;
  void *key;
  CTFontDescriptorRef cf;
  uint64_t v194;
  const __CFDictionary *v195;
  const __CFString *v196;
  CFTypeRef v197;
  CFIndex v198;
  int v199;
  __CFDictionary *v200;
  const __CFAllocator *allocator;
  void *v202;
  uint64_t v203;
  const void *v204;
  CFTypeRef v205;
  _BOOL4 v206;
  const __CFString *v207;
  int v208;
  int v209;
  CGColorRef color;
  int v211;
  void *v212;
  const __CFDictionary *theDict;
  double v214;
  double v215;
  char v216;
  CFRange range;
  CFRange effectiveRange;
  CFTypeRef value[2];
  __int128 v220;
  unsigned __int128 valuePtr;
  __int128 v222;
  __int128 v223;
  int v224;
  uint64_t v225;
  void **v226;
  int v227;
  uint64_t v228;
  double *v229;
  int v230;
  uint64_t v231;
  double *v232;
  int v233;
  uint64_t v234;
  CFTypeRef *v235;
  _OWORD v236[2];
  void *keys[4];
  CFRange v238;
  CFRange v239;
  CFRange v240;
  CFRange v241;
  CFRange v242;
  CFRange v243;
  CFRange v244;
  CFRange v245;

  v6 = a5;
  v7 = aStr;
  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  if (a3 == 2)
  {
    *(_QWORD *)&valuePtr = 0;
    value[0] = 0;
    Length = CFAttributedStringGetLength(aStr);
    calculateAndCopyStrokeAttributes_0(a4, &valuePtr, (CFNumberRef *)value, v6);
    if ((_QWORD)valuePtr)
    {
      v239.location = 0;
      v239.length = Length;
      CFAttributedStringSetAttribute(v7, v239, (CFStringRef)*MEMORY[0x1E0CA85C8], (CFTypeRef)valuePtr);
    }
    if (value[0])
    {
      v240.location = 0;
      v240.length = Length;
      CFAttributedStringSetAttribute(v7, v240, (CFStringRef)*MEMORY[0x1E0CA85D0], value[0]);
    }
    if ((_QWORD)valuePtr)
      CFRelease((CFTypeRef)valuePtr);
    if (value[0])
      CFRelease(value[0]);
    v25 = a4;
    aStr = v7;
    a5 = v6;
    v26 = 2;
    goto LABEL_41;
  }
  v8 = a1;
  if (a3 == 1)
  {
    if (!*(_BYTE *)(a1 + 89))
      return 0;
    v25 = a4;
    v26 = 0;
LABEL_41:
    setupRubyAnnotation_1(v25, aStr, v26, a5);
    return 0;
  }
  if (a3)
    return 0;
  v174 = FigCFEqual();
  if (!v174)
  {
    v9 = *(const void **)(a4 + 656);
    v10 = *(const void **)(v8 + 48);
    *(_QWORD *)(a4 + 656) = v10;
    if (v10)
      CFRetain(v10);
    if (v9)
      CFRelease(v9);
  }
  v11 = CFAttributedStringGetLength(v7);
  String = CFAttributedStringGetString(v7);
  v13 = (UniChar *)malloc_type_calloc(v11, 2uLL, 0x1000040BDFB0063uLL);
  v14 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  v194 = v8;
  if (v13)
  {
    v15 = v13;
    LODWORD(valuePtr) = 1;
    v16 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
    if (v16)
    {
      v17 = v16;
      v238.location = 0;
      v238.length = v11;
      CFStringGetCharacters(String, v238, v15);
      v18 = 0;
      if (v11 >= 1)
      {
        v19 = 0;
        v20 = CFSTR("kFCRSubtitleRenderer_LanguageCategory");
LABEL_13:
        v21.location = -1;
        do
        {
          v22 = v15[v19];
          if ((vmaxv_u16(vcgt_u16((uint16x4_t)0x51C019C0003000C0, (uint16x4_t)vadd_s16(vdup_n_s16(v22), (int16x4_t)0xB200CC00CE40CFC0))) & 1) != 0|| (unsigned __int16)(v22 + 1792) < 0x200u|| (unsigned __int16)(v22 + 464) < 0x20u|| (unsigned __int16)(v22 + 256) < 0xF0u|| (v22 & 0xFFC0) == 0x3000|| (v22 & 0xFF80) == 0x2E80|| (v22 & 0xFE00) == 0x3200)
          {
            if (v21.location < 0)
              v21.location = v19;
          }
          else if ((v21.location & 0x8000000000000000) == 0)
          {
            v21.length = v19 - v21.location;
            v23 = v20;
            CFAttributedStringSetAttribute(v7, v21, v20, v17);
            v20 = v23;
            v18 = 1;
            v104 = v11 - 1 == v19++;
            if (v104)
              goto LABEL_47;
            goto LABEL_13;
          }
          ++v19;
        }
        while (v11 != v19);
        if ((v21.location & 0x8000000000000000) == 0)
        {
          v21.length = v11 - v21.location;
          CFAttributedStringSetAttribute(v7, v21, CFSTR("kFCRSubtitleRenderer_LanguageCategory"), v17);
          v18 = 1;
        }
      }
LABEL_47:
      CFRelease(v17);
      v8 = v194;
      v14 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    }
    else
    {
      v18 = 0;
    }
    free(v15);
  }
  else
  {
    v18 = 0;
  }
  effectiveRange.length = 0;
  effectiveRange.location = 0;
  v171 = (const __CFString *)*MEMORY[0x1E0CA2B40];
  v197 = CFAttributedStringGetAttribute(v7, 0, (CFStringRef)*MEMORY[0x1E0CA2B40], &effectiveRange);
  v29 = CFAttributedStringGetLength(v7);
  if (v18 && v197)
  {
    if (!*(_BYTE *)(v8 + 128))
    {
      v241.location = 0;
      v241.length = v29;
      CFAttributedStringSetAttribute(v7, v241, (CFStringRef)*MEMORY[0x1E0CA86C8], (CFTypeRef)*MEMORY[0x1E0C9AE50]);
    }
    Mutable = CFDictionaryCreateMutable(*v14, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
      return 4294950093;
    v31 = Mutable;
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8170], (const void *)*MEMORY[0x1E0CA8180]);
    v242.location = 0;
    v242.length = v29;
    CFAttributedStringSetAttribute(v7, v242, (CFStringRef)*MEMORY[0x1E0CA8178], v31);
    CFRelease(v31);
  }
  v32 = CTParagraphStyleCreate(0, 0);
  if (!v32)
    return 4294950095;
  v33 = v32;
  CTParagraphStyleSetCompositionLanguage();
  v243.location = 0;
  v243.length = v29;
  v176 = (const __CFString *)*MEMORY[0x1E0CA85A0];
  CFAttributedStringSetAttribute(v7, v243, (CFStringRef)*MEMORY[0x1E0CA85A0], v33);
  CFRelease(v33);
  range.length = 0;
  range.location = 0;
  v205 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
  if (v29 < 1)
  {
    cf = 0;
    v157 = 0;
    v75 = 0;
LABEL_368:
    setupRubyAnnotation_1(a4, v7, 0, v6);
    v245.length = CFAttributedStringGetLength(v7);
    range.location = 0;
    range.length = v245.length;
    v245.location = 0;
    CFAttributedStringSetAttribute(v7, v245, CFSTR("kFCRSubtitleRenderer_CommonSetupDone"), v205);
    v27 = 0;
    if (!v157)
      goto LABEL_370;
    goto LABEL_369;
  }
  v195 = 0;
  v182 = 0;
  cf = 0;
  v203 = *MEMORY[0x1E0CA8308];
  v191 = (void *)*MEMORY[0x1E0CA2A20];
  key = (void *)*MEMORY[0x1E0CA2A38];
  allocator = *v14;
  attrName = (const __CFString *)*MEMORY[0x1E0CA8580];
  v178 = (void *)*MEMORY[0x1E0CA2A10];
  v186 = (void *)*MEMORY[0x1E0CA2A50];
  v185 = (void *)*MEMORY[0x1E0CA2978];
  v184 = (void *)*MEMORY[0x1E0CA2B38];
  v168 = (const __CFString *)*MEMORY[0x1E0CA86C0];
  v183 = (void *)*MEMORY[0x1E0CA2A08];
  v212 = (void *)*MEMORY[0x1E0CA3278];
  v179 = (void *)*MEMORY[0x1E0CA8300];
  attribute = (const __CFString *)*MEMORY[0x1E0CA8380];
  v180 = *MEMORY[0x1E0CA83C0];
  v165 = (void *)*MEMORY[0x1E0CA2A00];
  v159 = (void *)*MEMORY[0x1E0CA2A28];
  v202 = (void *)*MEMORY[0x1E0CA2A58];
  v169 = (const __CFString *)*MEMORY[0x1E0CA8590];
  v158 = (void *)*MEMORY[0x1E0CA8340];
  v167 = (void *)*MEMORY[0x1E0CA8320];
  v163 = (void *)*MEMORY[0x1E0CA81D8];
  v190 = (const __CFString *)*MEMORY[0x1E0CA2958];
  theString2 = (const __CFString *)*MEMORY[0x1E0CA2948];
  v170 = (const __CFString *)*MEMORY[0x1E0CA2938];
  v164 = (const __CFString *)*MEMORY[0x1E0CA2930];
  v161 = (const __CFString *)*MEMORY[0x1E0CA2928];
  v160 = (const __CFString *)*MEMORY[0x1E0CA2940];
  v181 = (const __CFString *)*MEMORY[0x1E0CA2DC0];
  v34 = (const void *)*MEMORY[0x1E0CA2AD8];
  v204 = (const void *)*MEMORY[0x1E0CA2AF0];
  v189 = (void *)*MEMORY[0x1E0CA2A60];
  v172 = (const __CFString *)*MEMORY[0x1E0CA2DB8];
  v188 = (void *)*MEMORY[0x1E0CA2A40];
  v196 = (const __CFString *)*MEMORY[0x1E0CA8550];
  v187 = (const __CFString *)*MEMORY[0x1E0CA8188];
  v177 = (void *)*MEMORY[0x1E0CA2A48];
  v198 = v29;
  v162 = (const void *)*MEMORY[0x1E0CA2AD8];
  while (1)
  {
    v236[0] = xmmword_193301390;
    v236[1] = xmmword_1933013A0;
    v35 = (const __CFString *)CFRetain(CFSTR("Helvetica"));
    Attributes = CFAttributedStringGetAttributes(v7, range.length + range.location, &range);
    theDict = Attributes;
    if (!Attributes)
    {
      color = 0;
      LODWORD(v40) = 0;
      LODWORD(v41) = 0;
      v199 = 0;
      v211 = 0;
      v42 = 0;
      v43 = v6;
      v44 = v203;
      goto LABEL_201;
    }
    CGColorFromCFArray = copyContentColor(*(_QWORD *)a4, *(CGColorRef *)(a4 + 144), *(_QWORD *)(a4 + 24), Attributes, v191, *(CGFloat *)(a4 + 168));
    if (!CGColorFromCFArray)
      CGColorFromCFArray = createCGColorFromCFArray(0, 0, v236);
    if (!v197 || !CFDictionaryContainsKey(Attributes, key))
      goto LABEL_80;
    v38 = (const __CFNumber *)CFDictionaryGetValue(Attributes, key);
    v39 = v38;
    LODWORD(valuePtr) = 0;
    if (!v38)
      goto LABEL_67;
    CFNumberGetValue(v38, kCFNumberIntType, &valuePtr);
    if ((_DWORD)valuePtr == -1)
      break;
    if (valuePtr <= 4)
LABEL_67:
      CFAttributedStringSetAttribute(v7, range, attrName, v39);
LABEL_80:
    if (*(_QWORD *)(a4 + 56) != 1 || !CFDictionaryContainsKey(Attributes, v178))
    {
      LODWORD(valuePtr) = 0;
      checkCJKContent(*(const __CFString **)(a4 + 656), (int *)&valuePtr);
      LOBYTE(value[0]) = 0;
      FigCFDictionaryGetBooleanIfPresent();
      v43 = v6;
      v50 = v195;
      if ((_DWORD)valuePtr == 4)
      {
        v43 = v6;
        if (!LOBYTE(value[0]))
        {
          MACaptionAppearanceGetRelativeCharacterSizeForLanguage();
          v43 = v61 * v6;
        }
      }
      goto LABEL_113;
    }
    v43 = v6;
    v50 = v195;
    if (!CFDictionaryGetValue(Attributes, v178))
      goto LABEL_113;
    v51 = *(double *)(a4 + 368);
    v52 = *(double *)(a4 + 376);
    v53 = *(double *)(a4 + 336);
    v54 = *(double *)(a4 + 344);
    v55 = *(double *)(a4 + 352);
    v56 = *(double *)(a4 + 360);
    *(_OWORD *)value = 0u;
    v220 = 0u;
    FigTextMarkupSizeMakeFromSimplifiedDictionary();
    v57 = DWORD2(v220);
    FCRGetVideoPresentationBounds(v51, v52, v53, v54, v55, v56);
    if (v57 <= 1986535455)
    {
      if (v57 > 1886679839)
      {
        if (v57 != 1886679840 && v57 != 1886920736)
          goto LABEL_112;
        FigGeometryDimensionGetCGFloat();
        v63 = v62;
        valuePtr = 0u;
        v222 = 0u;
        v223 = 0u;
        FCRGetTransform((uint64_t)&valuePtr, v51, v52, v55, v56);
        v43 = *((double *)&valuePtr + 1) + v63 * *((double *)&v222 + 1);
      }
      else
      {
        if (v57 == 622862368)
        {
          v60 = *(double *)&v220 / 100.0;
        }
        else
        {
          if (v57 != 1701650464)
            goto LABEL_112;
          v60 = *(double *)&v220;
        }
        v43 = v60 * v6;
      }
      goto LABEL_111;
    }
    if (v57 > 1986881901)
    {
      if (v57 != 1986881902)
      {
        if (v57 != 1987518496 || v58 <= 0.0)
        {
LABEL_112:
          v43 = v6;
          goto LABEL_113;
        }
        goto LABEL_103;
      }
      if (v59 > v58)
        goto LABEL_95;
      goto LABEL_109;
    }
    if (v57 != 1986535456)
    {
      if (v57 != 1986879864)
        goto LABEL_112;
      if (v59 <= v58)
      {
LABEL_95:
        if (v58 == 0.0)
          goto LABEL_112;
LABEL_103:
        v43 = v58 * (*(double *)value / 100.0);
        goto LABEL_111;
      }
LABEL_109:
      if (v59 == 0.0)
        goto LABEL_112;
      goto LABEL_110;
    }
    if (v59 <= 0.0)
      goto LABEL_112;
LABEL_110:
    v43 = v59 * (*(double *)&v220 / 100.0);
LABEL_111:
    if (v43 <= 0.0)
      goto LABEL_112;
LABEL_113:
    v64 = v205 == CFDictionaryGetValue(Attributes, v186);
    v211 = v205 == CFDictionaryGetValue(Attributes, v185);
    if (v205 == CFDictionaryGetValue(Attributes, v184))
    {
      LODWORD(valuePtr) = 1;
      v65 = CFNumberCreate(allocator, kCFNumberSInt32Type, &valuePtr);
      CFAttributedStringSetAttribute(v7, range, v168, v65);
      if (v65)
        CFRelease(v65);
    }
    v208 = v64;
    v66 = *(unsigned __int8 *)(a4 + 648) != v64 || !v174 || *(unsigned __int8 *)(a4 + 649) != v211;
    v67 = *(_DWORD *)(v8 + 16);
    color = CGColorFromCFArray;
    v206 = v66;
    if (v67 == 7 || v67 == 4)
    {
      if (CFDictionaryContainsKey(theDict, v183))
      {
        v68 = (const __CFArray *)CFDictionaryGetValue(theDict, v183);
        if (v68)
        {
          v69 = v68;
          Count = CFArrayGetCount(v68);
          if (Count >= 1)
          {
            v71 = Count;
            v72 = 0;
            while (1)
            {
              LODWORD(v215) = 0;
              *(_QWORD *)&valuePtr = 0;
              ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v69, v72);
              value[0] = 0;
              value[0] = CFDictionaryGetValue(ValueAtIndex, v212);
              if (FigCFDictionaryGetInt32IfPresent())
              {
                if (LODWORD(v215) == 1)
                {
                  keys[0] = v179;
                  v75 = CFDictionaryCreate(allocator, (const void **)keys, value, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                  if (!v75)
                    goto LABEL_379;
                  v76 = (const __CTFontDescriptor *)CTFontDescriptorCreateWithAttributesAndOptions();
                  if (!v76)
                  {
                    v182 = 0;
LABEL_379:
                    v27 = 0;
                    goto LABEL_376;
                  }
                  v77 = v76;
                  MatchingFontDescriptor = CTFontDescriptorCreateMatchingFontDescriptor(v76, 0);
                  if (MatchingFontDescriptor)
                  {
                    cf = MatchingFontDescriptor;
                    v80 = (const __CFString *)value[0];
                    if (value[0])
                      CFRetain(value[0]);
                    v182 = v77;
                    v195 = v75;
                    if (!v35)
                    {
LABEL_143:
                      v74 = 0;
                      v81 = 1;
                      v82 = 1;
                      v44 = v203;
                      goto LABEL_153;
                    }
LABEL_142:
                    CFRelease(v35);
                    goto LABEL_143;
                  }
                  CFRelease(v77);
                  CFRelease(v75);
                  cf = 0;
                  v182 = 0;
                  v50 = 0;
                }
                else if (!LODWORD(v215))
                {
                  if (FigTextMarkupMapGenericFontFamilyToMACaptionAppearanceFontStyle())
                  {
                    v74 = *(const __CTFontDescriptor **)(a4 + 8 * valuePtr + 208);
                    if (v74)
                    {
                      v195 = v50;
                      if (v35)
                        CFRelease(v35);
                      v80 = (const __CFString *)CTFontDescriptorCopyAttribute(v74, attribute);
                      v82 = 0;
                      v81 = 1;
                      v44 = v180;
                      goto LABEL_153;
                    }
                  }
                }
              }
              if (v71 == ++v72)
              {
                v195 = v50;
                break;
              }
            }
          }
        }
      }
      else if (CFDictionaryContainsKey(theDict, v165))
      {
        v79 = (const __CFString *)CFDictionaryGetValue(theDict, v165);
        if (v79)
        {
          v80 = v79;
          CFRetain(v79);
          if (!v35)
            goto LABEL_143;
          goto LABEL_142;
        }
      }
      else if (CFDictionaryContainsKey(theDict, v159) && CFDictionaryGetValue(theDict, v159))
      {
        *(_QWORD *)&valuePtr = 0;
        if (FigTextMarkupMapGenericFontFamilyToMACaptionAppearanceFontStyle()
          && (v83 = *(const __CTFontDescriptor **)(a4 + 8 * valuePtr + 208)) != 0)
        {
          if (v35)
            CFRelease(v35);
          v35 = (const __CFString *)CTFontDescriptorCopyAttribute(v83, attribute);
          v81 = 1;
          v44 = v180;
        }
        else
        {
          v81 = 0;
          v44 = v203;
        }
        v74 = 0;
        v82 = 0;
        goto LABEL_152;
      }
    }
    v74 = 0;
    v81 = 0;
    v82 = 0;
    v44 = v203;
LABEL_152:
    v80 = v35;
LABEL_153:
    v84 = *(_DWORD *)(v8 + 16);
    if (v84 == 3)
    {
      CFRetain(CFSTR("Helvetica"));
      if (v80)
LABEL_160:
        CFRelease(v80);
      v81 = 1;
      v199 = 1;
      v44 = v203;
      v80 = CFSTR("Helvetica");
      goto LABEL_164;
    }
    if (v84 == 1)
    {
      CFRetain(CFSTR("CourierNewPSMT"));
      if (v80)
        CFRelease(v80);
      if (*(_DWORD *)(v8 + 16) == 3)
      {
        CFRetain(CFSTR("Helvetica"));
        v80 = CFSTR("CourierNewPSMT");
        goto LABEL_160;
      }
      v81 = 1;
      v199 = 1;
      v44 = v180;
      v80 = CFSTR("CourierNewPSMT");
    }
    else
    {
      v199 = v82;
    }
LABEL_164:
    if (*(_QWORD *)(a4 + 64))
    {
      if (v81)
      {
        v41 = v80;
        goto LABEL_173;
      }
      v85 = *(const __CTFontDescriptor **)(a4 + 208);
      if (v80)
        CFRelease(v80);
    }
    else
    {
      if (v80)
        CFRelease(v80);
      v85 = *(const __CTFontDescriptor **)(a4 + 208);
    }
    v41 = (const __CFString *)CTFontDescriptorCopyAttribute(v85, attribute);
    v74 = *(const __CTFontDescriptor **)(a4 + 208);
    v44 = v180;
LABEL_173:
    v86 = v202;
    if (v74)
    {
      v87 = *(const void **)(a4 + 632);
      if (v87)
      {
        CFRelease(v87);
        v86 = v202;
        *(_QWORD *)(a4 + 632) = 0;
      }
      v88 = *(const __CTFontDescriptor **)(a4 + 640);
      if (v88 && v88 == v74)
      {
        v89 = v41;
        LODWORD(v40) = 0;
        LODWORD(v41) = 0;
        goto LABEL_197;
      }
      *(_QWORD *)(a4 + 640) = v74;
      CFRetain(v74);
      v89 = v41;
      if (v88)
        CFRelease(v88);
      LODWORD(v41) = 0;
      LODWORD(v40) = 1;
    }
    else
    {
      v90 = *(const void **)(a4 + 640);
      if (v90)
      {
        CFRelease(v90);
        v86 = v202;
        *(_QWORD *)(a4 + 640) = 0;
      }
      v91 = *(const __CFString **)(a4 + 632);
      if (!v91)
      {
        *(_QWORD *)(a4 + 632) = v41;
        if (v41)
        {
          v89 = v41;
          CFRetain(v41);
          v86 = v202;
        }
        else
        {
          v89 = 0;
        }
        LODWORD(v40) = 0;
        LODWORD(v41) = 1;
        goto LABEL_197;
      }
      if (!v41)
      {
        v89 = 0;
        LODWORD(v40) = 0;
        goto LABEL_197;
      }
      if (CFStringCompare(v91, v41, 0))
      {
        v40 = *(const void **)(a4 + 632);
        *(_QWORD *)(a4 + 632) = v41;
        CFRetain(v41);
        v89 = v41;
        if (v40)
        {
          CFRelease(v40);
          LODWORD(v40) = 0;
        }
        LODWORD(v41) = 1;
      }
      else
      {
        v89 = v41;
        LODWORD(v40) = 0;
        LODWORD(v41) = 0;
      }
    }
    v86 = v202;
LABEL_197:
    v92 = v86;
    if (CFDictionaryContainsKey(theDict, v86))
    {
      v93 = CFDictionaryGetValue(theDict, v92);
      if (v93)
        CFAttributedStringSetAttribute(v7, range, v169, v93);
    }
    v35 = v89;
    v42 = v208;
    LODWORD(Attributes) = v206;
LABEL_201:
    v94 = *(const __CTFont **)(a4 + 624);
    v207 = v35;
    if (v94)
    {
      Size = CTFontGetSize(v94);
      v96 = v41 | v40;
      v97 = *(_QWORD *)(a4 + 624);
      if (!(v96 | Attributes) && v43 == Size)
      {
        v29 = v198;
        v98 = v204;
        if (!v97)
          goto LABEL_205;
        goto LABEL_280;
      }
      if (v97)
      {
        CFRelease(*(CFTypeRef *)(a4 + 624));
        *(_QWORD *)(a4 + 624) = 0;
      }
    }
    v102 = *(const void **)(a4 + 640);
    v103 = *(const __CFString **)(v8 + 48);
    value[0] = 0;
    LODWORD(v215) = 0;
    if (!v35)
    {
      v106 = 0;
      v98 = v204;
      goto LABEL_279;
    }
    checkCJKContent(v103, (int *)&v215);
    v98 = v204;
    if (LODWORD(v215) == 1)
    {
      if (v199)
        v104 = 0;
      else
        v104 = *(_QWORD *)(a4 + 64) == 1;
      v105 = !v104;
    }
    else
    {
      v105 = 1;
    }
    if (v205 == CFDictionaryGetValue(*(CFDictionaryRef *)(v8 + 40), CFSTR("FigFCRPreview_JapaneseV2")))
      v107 = 0;
    else
      v107 = v105;
    if ((v107 & 1) == 0)
    {
      *(_QWORD *)&valuePtr = *(_QWORD *)(a4 + 64);
      v108 = MACaptionAppearanceCopyFontDescriptorForLanguage();
LABEL_225:
      v109 = (const __CTFontDescriptor *)v108;
      v200 = 0;
      if (v108)
        goto LABEL_226;
LABEL_241:
      v106 = 0;
      CopyWithAttributes = 0;
      v118 = 0;
      v8 = v194;
      goto LABEL_271;
    }
    if (v102)
    {
      v108 = (uint64_t)CFRetain(v102);
      goto LABEL_225;
    }
    v117 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v118 = v117;
    if (v117)
    {
      if (v203 == v44)
      {
        CFDictionaryAddValue(v117, v179, v207);
      }
      else if (v180 == v44)
      {
        CFDictionaryAddValue(v117, attribute, v207);
        if (CFStringCompare(v207, CFSTR("CourierNewPSMT"), 1uLL) == kCFCompareEqualTo)
        {
          v119 = *(double *)(a4 + 712);
          *(float *)&valuePtr = v119;
          if (v119 > 0.0)
          {
            v120 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
            if (v120)
            {
              v121 = v120;
              CFDictionaryAddValue(v118, v158, v120);
              CFRelease(v121);
            }
          }
        }
      }
      v200 = v118;
      v109 = CTFontDescriptorCreateWithAttributes(v118);
      if (!v109)
        goto LABEL_241;
LABEL_226:
      v209 = v42;
      v110 = v42 | (2 * v211);
      CopyWithSymbolicTraits = CTFontDescriptorCreateCopyWithSymbolicTraits(v109, v110, 3u);
      if (!CopyWithSymbolicTraits)
      {
        if (!v209)
          goto LABEL_251;
        SInt32 = (const __CFNumber *)FigCFNumberCreateSInt32();
        UInt32 = (const __CFNumber *)FigCFNumberCreateUInt32();
        CopyWithFeature = CTFontDescriptorCreateCopyWithFeature(v109, SInt32, UInt32);
        CopyWithSymbolicTraits = CopyWithFeature;
        if (v211)
        {
          if (CopyWithFeature)
          {
            v115 = CTFontDescriptorCreateCopyWithSymbolicTraits(CopyWithFeature, v110, 2u);
            if (v115)
            {
              v116 = v115;
              CFRelease(CopyWithSymbolicTraits);
              CopyWithSymbolicTraits = v116;
            }
          }
          else
          {
            CopyWithSymbolicTraits = CTFontDescriptorCreateCopyWithSymbolicTraits(v109, v110, 2u);
          }
        }
        if (SInt32)
          CFRelease(SInt32);
        if (UInt32)
          CFRelease(UInt32);
        if (!CopyWithSymbolicTraits)
        {
LABEL_251:
          CopyWithSymbolicTraits = CFRetain(v109);
          if ((v107 & 1) == 0)
            goto LABEL_252;
LABEL_249:
          v98 = v204;
          if (CopyWithSymbolicTraits)
            CopyWithAttributes = (const __CTFontDescriptor *)CFRetain(CopyWithSymbolicTraits);
          else
            CopyWithAttributes = 0;
          v118 = 0;
          v8 = v194;
LABEL_259:
          v106 = CTFontCreateWithFontDescriptor(CopyWithAttributes, v43, 0);
          if (!v106 || !v200 || (LODWORD(v215) & 0xFFFFFFFE) != 2)
            goto LABEL_267;
          *(_QWORD *)&valuePtr = qword_1E2FB7540[LODWORD(v215)];
          v124 = CFArrayCreate(allocator, (const void **)&valuePtr, 1, MEMORY[0x1E0C9B378]);
          if (v124)
          {
            v125 = v124;
            v126 = CTFontCopyDefaultCascadeListForLanguages(v106, v124);
            if (v126)
            {
              v127 = v126;
              CFDictionarySetValue(v200, v163, v126);
              CFRelease(v109);
              CFRelease(v106);
              v128 = CTFontDescriptorCreateWithAttributes(v200);
              v109 = v128;
              if (v128)
                v106 = CTFontCreateWithFontDescriptor(v128, v43, 0);
              else
                v106 = 0;
              v34 = v162;
              CFRelease(v127);
              CFRelease(v125);
              v8 = v194;
              v98 = v204;
              if (v109)
                goto LABEL_267;
              goto LABEL_268;
            }
            CFRelease(v125);
            v8 = v194;
          }
          v98 = v204;
          goto LABEL_267;
        }
      }
      if ((v107 & 1) != 0)
        goto LABEL_249;
LABEL_252:
      valuePtr = xmmword_1E2FB7560;
      keys[0] = v167;
      value[0] = CFArrayCreate(0, (const void **)&valuePtr, 2, MEMORY[0x1E0C9B378]);
      v98 = v204;
      if (value[0])
      {
        v123 = CFDictionaryCreate(allocator, (const void **)keys, value, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (v123)
        {
          v118 = v123;
          CopyWithAttributes = CTFontDescriptorCreateCopyWithAttributes((CTFontDescriptorRef)CopyWithSymbolicTraits, v123);
          v8 = v194;
          if (!CopyWithAttributes)
          {
            if (CopyWithSymbolicTraits)
              CopyWithAttributes = (const __CTFontDescriptor *)CFRetain(CopyWithSymbolicTraits);
            else
              CopyWithAttributes = 0;
          }
          goto LABEL_259;
        }
      }
      v118 = 0;
      CopyWithAttributes = 0;
      v106 = 0;
      v8 = v194;
LABEL_267:
      CFRelease(v109);
LABEL_268:
      if (CopyWithSymbolicTraits)
        CFRelease(CopyWithSymbolicTraits);
      LOBYTE(v42) = v209;
LABEL_271:
      if (v200)
        CFRelease(v200);
      goto LABEL_273;
    }
    CopyWithAttributes = 0;
    v106 = 0;
    v8 = v194;
LABEL_273:
    if (value[0])
      CFRelease(value[0]);
    if (v118)
      CFRelease(v118);
    if (CopyWithAttributes)
      CFRelease(CopyWithAttributes);
LABEL_279:
    *(_QWORD *)(a4 + 624) = v106;
    *(_BYTE *)(a4 + 648) = v42;
    *(_BYTE *)(a4 + 649) = v211;
    v29 = v198;
    if (!v106)
    {
LABEL_205:
      v27 = 4294950093;
      v99 = theDict;
      v100 = color;
      v101 = v207;
      goto LABEL_343;
    }
LABEL_280:
    v216 = 0;
    v129 = *(_DWORD *)(v8 + 16);
    v130 = *(const __CFString **)(v8 + 64);
    valuePtr = 0uLL;
    v131 = (const __CFString *)CFAttributedStringGetAttribute(v7, 0, v190, (CFRange *)&valuePtr);
    if (v131)
    {
      v132 = v131;
      if (CFStringCompare(v131, theString2, 0))
      {
        if (CFStringCompare(v132, v170, 0))
        {
          if (CFStringCompare(v132, v164, 0))
          {
            if (CFStringCompare(v132, v161, 0))
            {
              if (CFStringCompare(v132, v160, 0))
                v133 = 2 * (v129 != 7);
              else
                v133 = 1;
            }
            else
            {
              v133 = 1;
            }
          }
          else
          {
            v133 = 0;
          }
        }
        else
        {
          v133 = 2;
        }
      }
      else
      {
        v133 = 4;
      }
    }
    else if (CFAttributedStringGetAttribute(v7, 0, v171, (CFRange *)&valuePtr))
    {
      v133 = 0;
    }
    else
    {
      v133 = 2 * (v129 != 7);
    }
    v104 = v129 == 7;
    v100 = color;
    if (v104 && v130 && CFStringCompare(v130, v181, 1uLL) == kCFCompareEqualTo)
    {
      if (v133)
      {
        if (v133 == 1)
          LOBYTE(v133) = 0;
      }
      else
      {
        LOBYTE(v133) = 1;
      }
    }
    v216 = v133;
    Ascent = CTFontGetAscent(*(CTFontRef *)(a4 + 624));
    Descent = CTFontGetDescent(*(CTFontRef *)(a4 + 624));
    keys[0] = 0;
    Leading = 0.0;
    if (*(_DWORD *)(v8 + 16) != 1)
    {
      v137 = *(const __CTFont **)(a4 + 624);
      v138 = CTFontGetAscent(v137);
      v139 = CTFontGetDescent(v137);
      Leading = CTFontGetLeading(v137);
      if (Leading <= (v138 + v139) * 0.2)
        Leading = (v138 + v139) * 0.2;
    }
    keys[0] = *(void **)&Leading;
    v214 = Ascent + Descent + Leading;
    v215 = Ascent + Descent;
    valuePtr = 0uLL;
    v140 = CFAttributedStringGetLength(v7);
    if (v140 >= 1)
    {
      v141 = v140;
      v142 = 0;
      v143 = 0;
      v144 = 0;
      do
      {
        v145 = CFAttributedStringGetAttributes(v7, v142, (CFRange *)&valuePtr);
        if (v145)
        {
          v146 = v145;
          if (CFDictionaryContainsKey(v145, v34))
          {
            v147 = (const __CFAttributedString *)CFDictionaryGetValue(v146, v34);
            value[1] = 0;
            value[0] = 0;
            v148 = CFAttributedStringGetAttributes(v147, 0, (CFRange *)value);
            CFDictionaryGetValue(v148, v98);
            if (FigCFEqual())
            {
              v144 = 1;
            }
            else if (FigCFEqual())
            {
              v143 = 1;
            }
          }
        }
        v142 = *((_QWORD *)&valuePtr + 1) + valuePtr;
      }
      while (*((_QWORD *)&valuePtr + 1) + (_QWORD)valuePtr < v141);
      v104 = (v143 & v144) == 0;
      v100 = color;
      if (!v104)
        goto LABEL_319;
    }
    if (*(_DWORD *)(v8 + 16) == 7)
LABEL_319:
      v214 = 0.0;
    v99 = theDict;
    v101 = v207;
    if (!CFDictionaryGetValue(theDict, v189))
      goto LABEL_331;
    FigTextMarkupDimensionMakeFromSimplifiedDictionary();
    v150 = 0.0;
    if (v149 > 1886679839)
    {
      if (v149 == 1886679840 || v149 == 1886920736)
        FigGeometryDimensionGetCGFloat();
      goto LABEL_330;
    }
    if (v149 == 622862368)
    {
      FigGeometryDimensionGetCGFloat();
      v151 = v152 / 100.0;
      goto LABEL_329;
    }
    if (v149 == 1701650464)
    {
      FigGeometryDimensionGetCGFloat();
LABEL_329:
      v150 = v43 * v151;
    }
LABEL_330:
    v214 = v150;
    v215 = v150;
LABEL_331:
    LOBYTE(value[0]) = -1;
    v153 = *(const __CFString **)(v8 + 64);
    if (v153)
    {
      if (CFStringCompare(v153, v172, 1uLL))
      {
        if (CFStringCompare(*(CFStringRef *)(v8 + 64), v181, 1uLL) == kCFCompareEqualTo)
          LOBYTE(value[0]) = 1;
      }
      else
      {
        LOBYTE(value[0]) = 0;
      }
    }
    v154 = (const __CFArray *)CFDictionaryGetValue(theDict, v188);
    if (v154)
    {
      if (CFArrayGetCount(v154) >= 1)
      {
        LODWORD(valuePtr) = 0;
        if (FigCFArrayGetInt32AtIndex())
          LOBYTE(value[0]) = valuePtr & 1;
      }
    }
    LODWORD(valuePtr) = 0;
    *((_QWORD *)&valuePtr + 1) = 1;
    *(_QWORD *)&v222 = &v216;
    DWORD2(v222) = 15;
    *(_QWORD *)&v223 = 8;
    *((_QWORD *)&v223 + 1) = keys;
    v224 = 14;
    v225 = 8;
    v226 = keys;
    v227 = 9;
    v228 = 8;
    v229 = &v215;
    v230 = 8;
    v231 = 8;
    v232 = &v214;
    v233 = 13;
    v234 = 1;
    v235 = value;
    v155 = CTParagraphStyleCreate((const CTParagraphStyleSetting *)&valuePtr, 6uLL);
    CFAttributedStringSetAttribute(v7, range, v196, v100);
    CFAttributedStringSetAttribute(v7, range, v187, *(CFTypeRef *)(a4 + 624));
    if (v155)
    {
      CFAttributedStringSetAttribute(v7, range, v176, v155);
      CFRelease(v155);
      v27 = 0;
    }
    else
    {
      v27 = 4294950093;
    }
LABEL_343:
    CGColorRelease(v100);
    if (v101)
      CFRelease(v101);
    if (*(_DWORD *)(v8 + 16) == 7 && v205 == CFDictionaryGetValue(v99, v177))
    {
      valuePtr = 0u;
      v222 = 0u;
      v156 = createCGColorFromCFArray(0, 0, &valuePtr);
      CFAttributedStringRemoveAttribute(v7, range, v196);
      CFAttributedStringSetAttribute(v7, range, v196, v156);
      CGColorRelease(v156);
    }
    if ((_DWORD)v27)
      goto LABEL_375;
    if (range.length + range.location >= v29)
    {
      v75 = v195;
      v157 = v182;
      goto LABEL_368;
    }
  }
  v45 = CFAttributedStringGetString(v7);
  v46 = (UniChar *)malloc_type_calloc(v29, 2uLL, 0x1000040BDFB0063uLL);
  if (v46)
  {
    v47 = v46;
    v244.location = 0;
    v244.length = v29;
    CFStringGetCharacters(v45, v244, v46);
    if (range.length >= 1)
    {
      v48 = 0;
      while (v47[range.location + v48] - 48 < 0xA)
      {
        if (range.length == ++v48)
        {
          if (range.length >= 5uLL)
            goto LABEL_79;
          goto LABEL_77;
        }
      }
      if (range.length >= 3uLL)
        goto LABEL_79;
LABEL_77:
      v49 = (const void *)FigCFNumberCreateSInt32();
      CFAttributedStringSetAttribute(v7, range, attrName, v49);
      if (v49)
        CFRelease(v49);
    }
LABEL_79:
    free(v47);
    goto LABEL_80;
  }
  v27 = 4294950095;
LABEL_375:
  v75 = v195;
LABEL_376:
  v157 = v182;
  if (v182)
LABEL_369:
    CFRelease(v157);
LABEL_370:
  if (v75)
    CFRelease(v75);
  if (cf)
    CFRelease(cf);
  return v27;
}

void setupHighlight_1(_QWORD *a1, const __CFAttributedString *a2)
{
  CFIndex Length;
  CFIndex v5;
  CFIndex v6;
  const __CFString *v7;
  const void *v8;
  const void *v9;
  CFDictionaryRef Attributes;
  const __CFDictionary *v11;
  CGColorSpace *v12;
  int v13;
  void *v14;
  int v15;
  CGColor *CGColorFromCFArray;
  CGColor *v17;
  const CGFloat *v18;
  CGColor *v19;
  char v20;
  const CGFloat *v21;
  const CGFloat *v22;
  CGColor *v23;
  CFRange v24;
  __CFAttributedString *v25;
  const __CFString *v26;
  CFStringRef attrName;
  const void *v28;
  const __CFString *v29;
  int AppBooleanValue;
  CFRange effectiveRange;
  CGFloat components[2];
  CGFloat v33[3];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("fcr_custom_background_render"), CFSTR("com.apple.coremedia"), 0);
  effectiveRange.location = 0;
  effectiveRange.length = 0;
  Length = CFAttributedStringGetLength(a2);
  if (Length >= 1)
  {
    v5 = Length;
    v6 = 0;
    v7 = (const __CFString *)*MEMORY[0x1E0C9DA10];
    v8 = (const void *)*MEMORY[0x1E0CA29B8];
    v9 = (const void *)*MEMORY[0x1E0CA2968];
    attrName = (CFStringRef)*MEMORY[0x1E0CA8160];
    v29 = (const __CFString *)*MEMORY[0x1E0CA8600];
    v28 = (const void *)*MEMORY[0x1E0C9AE50];
    while (1)
    {
      Attributes = CFAttributedStringGetAttributes(a2, v6, &effectiveRange);
      if (Attributes)
        break;
LABEL_27:
      v6 = effectiveRange.length + effectiveRange.location;
      if (effectiveRange.length + effectiveRange.location >= v5)
        return;
    }
    v11 = Attributes;
    v12 = CGColorSpaceCreateWithName(v7);
    *(_OWORD *)components = 0u;
    *(_OWORD *)v33 = 0u;
    v13 = CFDictionaryContainsKey(v11, v8);
    v14 = (void *)v8;
    if ((v13 || (v15 = CFDictionaryContainsKey(v11, v9), v14 = (void *)v9, v15))
      && (CGColorFromCFArray = createCGColorFromCFArray(v11, v14, 0)) != 0)
    {
      v17 = CGColorFromCFArray;
      if (a1[1])
      {
        v18 = CGColorGetComponents(CGColorFromCFArray);
        *(_OWORD *)components = *(_OWORD *)v18;
        v33[0] = v18[2];
        goto LABEL_14;
      }
      v19 = (CGColor *)a1[19];
      if (!v19)
      {
LABEL_14:
        if (a1[4])
        {
          v22 = CGColorGetComponents(v17) + 3;
          goto LABEL_17;
        }
LABEL_16:
        v22 = (const CGFloat *)(a1 + 22);
LABEL_17:
        v33[1] = *v22;
        v23 = CGColorCreate(v12, components);
        CGColorRelease(v17);
        if (v12)
          CFRelease(v12);
        if (!v23)
          goto LABEL_26;
        if (AppBooleanValue)
        {
          if (CGColorGetAlpha(v23) == 0.0)
          {
LABEL_25:
            CFAttributedStringSetAttribute(a2, effectiveRange, v29, v28);
LABEL_26:
            CGColorRelease(v23);
            goto LABEL_27;
          }
          v24 = effectiveRange;
          v25 = a2;
          v26 = CFSTR("kFCRSubtitleRenderer_CharacterBackgroundColor");
        }
        else
        {
          v24 = effectiveRange;
          v25 = a2;
          v26 = attrName;
        }
        CFAttributedStringSetAttribute(v25, v24, v26, v23);
        goto LABEL_25;
      }
      v20 = 0;
    }
    else
    {
      v17 = 0;
      v19 = (CGColor *)a1[19];
      if (!v19)
        goto LABEL_16;
      v20 = 1;
    }
    v21 = CGColorGetComponents(v19);
    *(_OWORD *)components = *(_OWORD *)v21;
    v33[0] = v21[2];
    v22 = (const CGFloat *)(a1 + 22);
    if ((v20 & 1) != 0)
      goto LABEL_17;
    goto LABEL_14;
  }
}

CFDictionaryRef createFrameAttributesDictionary_0(uint64_t a1, CFStringRef theString1)
{
  int v3;
  const __CFString *v4;
  const __CFAllocator *v5;
  int valuePtr;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  keys[0] = *(void **)MEMORY[0x1E0CA8578];
  valuePtr = 0;
  if (theString1)
  {
    if (CFStringCompare(theString1, (CFStringRef)*MEMORY[0x1E0CA2DE0], 0))
      v3 = 2;
    else
      v3 = 1;
    valuePtr = v3;
  }
  v4 = *(const __CFString **)(a1 + 64);
  if (v4)
  {
    if (CFStringCompare(v4, (CFStringRef)*MEMORY[0x1E0CA2DB8], 1uLL)
      && CFStringCompare(*(CFStringRef *)(a1 + 64), (CFStringRef)*MEMORY[0x1E0CA2DC0], 1uLL))
    {
      if (CFStringCompare(*(CFStringRef *)(a1 + 64), (CFStringRef)*MEMORY[0x1E0CA2DD0], 1uLL))
      {
        if (CFStringCompare(*(CFStringRef *)(a1 + 64), (CFStringRef)*MEMORY[0x1E0CA2DC8], 1uLL) == kCFCompareEqualTo)
          valuePtr = 2;
      }
      else
      {
        valuePtr = 1;
      }
    }
    else
    {
      valuePtr = 0;
    }
  }
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  return CFDictionaryCreate(v5, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
}

const __CFString *checkCJKContent(const __CFString *theString2, int *a2)
{
  const __CFString *v3;
  int v4;

  if (theString2)
  {
    v3 = theString2;
    theString2 = (const __CFString *)CFStringCompare(CFSTR("yue"), theString2, 1uLL);
    if (theString2
      && (theString2 = (const __CFString *)CFStringCompare(CFSTR("yue-Hant"), v3, 1uLL)) != 0
      && (theString2 = (const __CFString *)CFStringCompare(CFSTR("cmn-Hant"), v3, 1uLL)) != 0
      && (theString2 = (const __CFString *)CFStringCompare(CFSTR("zh-cmn-Hant"), v3, 1uLL)) != 0
      && (theString2 = (const __CFString *)CFStringCompare(CFSTR("zh-Hant"), v3, 1uLL)) != 0)
    {
      theString2 = (const __CFString *)CFStringCompare(CFSTR("cmn-Hans"), v3, 1uLL);
      if (theString2
        && (theString2 = (const __CFString *)CFStringCompare(CFSTR("zh-cmn-Hans"), v3, 1uLL)) != 0
        && (theString2 = (const __CFString *)CFStringCompare(CFSTR("zh-cmn"), v3, 1uLL)) != 0
        && (theString2 = (const __CFString *)CFStringCompare(CFSTR("zh-Hans"), v3, 1uLL)) != 0)
      {
        v4 = 1;
        theString2 = (const __CFString *)CFStringCompare(CFSTR("ja"), v3, 1uLL);
        if (theString2)
        {
          v4 = 1;
          theString2 = (const __CFString *)CFStringCompare(CFSTR("ja-JP"), v3, 1uLL);
          if (theString2)
          {
            theString2 = (const __CFString *)CFStringCompare(CFSTR("ko"), v3, 1uLL);
            if (theString2 && (theString2 = (const __CFString *)CFStringCompare(CFSTR("ko-KR"), v3, 1uLL)) != 0)
              v4 = 0;
            else
              v4 = 4;
          }
        }
      }
      else
      {
        v4 = 2;
      }
    }
    else
    {
      v4 = 3;
    }
    if (a2)
      *a2 = v4;
  }
  return theString2;
}

void setupRubyAnnotation_1(uint64_t a1, CFAttributedStringRef aStr, int a3, double a4)
{
  CFIndex Length;
  CFIndex v7;
  CFIndex v8;
  const void *v9;
  const void *v10;
  const __CFAllocator *v11;
  const __CFDictionary *Attributes;
  const __CFDictionary *v13;
  const void *v14;
  const __CFAttributedString *Value;
  const __CFString *String;
  const __CFDictionary *v17;
  const __CFString *v18;
  const __CFString *v19;
  CTRubyAlignment v20;
  const void *v21;
  double v22;
  __CFDictionary *Mutable;
  CFNumberRef v24;
  const __CFDictionary *Copy;
  CTRubyPosition v26;
  CTRubyAnnotationRef v27;
  const __CFString *v28;
  const __CFString *v29;
  const __CFString *v30;
  const __CFString *v31;
  const __CFString *v32;
  const __CFString *v33;
  void *v35;
  void *v36;
  const __CFString *attrName;
  const __CFString *theString2;
  const void *v39;
  const void *v40;
  void *v41;
  const __CFString *v42;
  void *v43;
  void *v44;
  void *key;
  const void *v46;
  CFRange v48;
  CFRange effectiveRange;
  CFNumberRef v50;
  const void *v51;
  uint64_t valuePtr;

  effectiveRange.location = 0;
  effectiveRange.length = 0;
  Length = CFAttributedStringGetLength(aStr);
  if (Length >= 1)
  {
    v7 = Length;
    v8 = 0;
    v9 = (const void *)*MEMORY[0x1E0CA8550];
    v10 = (const void *)*MEMORY[0x1E0CA2AD8];
    key = (void *)*MEMORY[0x1E0CA2AE0];
    theString2 = (const __CFString *)*MEMORY[0x1E0CA2D10];
    v32 = (const __CFString *)*MEMORY[0x1E0CA2D00];
    v33 = (const __CFString *)*MEMORY[0x1E0CA2CE0];
    v30 = (const __CFString *)*MEMORY[0x1E0CA2CF0];
    v31 = (const __CFString *)*MEMORY[0x1E0CA2CE8];
    v28 = (const __CFString *)*MEMORY[0x1E0CA2CD8];
    v29 = (const __CFString *)*MEMORY[0x1E0CA2D08];
    v44 = (void *)*MEMORY[0x1E0CA2AE8];
    attrName = (const __CFString *)*MEMORY[0x1E0CA8168];
    v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v41 = (void *)*MEMORY[0x1E0CA85B8];
    v40 = (const void *)*MEMORY[0x1E0CA85B0];
    v39 = (const void *)*MEMORY[0x1E0C9AE50];
    v36 = (void *)*MEMORY[0x1E0CA85C8];
    v35 = (void *)*MEMORY[0x1E0CA85D0];
    v43 = (void *)*MEMORY[0x1E0CA2AF0];
    v42 = (const __CFString *)*MEMORY[0x1E0CA85A8];
    v46 = (const void *)*MEMORY[0x1E0CA2AD8];
    while (1)
    {
      Attributes = CFAttributedStringGetAttributes(aStr, v8, &effectiveRange);
      if (Attributes)
      {
        v13 = Attributes;
        v14 = CFDictionaryContainsKey(Attributes, v9) ? CFDictionaryGetValue(v13, v9) : 0;
        if (CFDictionaryContainsKey(v13, v10))
          break;
      }
LABEL_47:
      v8 = effectiveRange.length + effectiveRange.location;
      if (effectiveRange.length + effectiveRange.location >= v7)
        return;
    }
    Value = (const __CFAttributedString *)CFDictionaryGetValue(v13, v10);
    String = CFAttributedStringGetString(Value);
    v48.location = 0;
    v48.length = 0;
    v17 = CFAttributedStringGetAttributes(Value, 0, &v48);
    v18 = (const __CFString *)CFDictionaryGetValue(v17, key);
    if (v18)
    {
      v19 = v18;
      if (CFStringCompare(v18, theString2, 0) == kCFCompareEqualTo)
      {
        v20 = kCTRubyAlignmentStart;
        goto LABEL_22;
      }
      if (CFStringCompare(v19, v33, 0))
      {
        if (CFStringCompare(v19, v32, 0))
        {
          if (CFStringCompare(v19, v31, 0))
          {
            if (CFStringCompare(v19, v30, 0))
            {
              if (CFStringCompare(v19, v29, 0))
                v20 = 2 * (CFStringCompare(v19, v28, 0) != kCFCompareEqualTo);
              else
                v20 = kCTRubyAlignmentLineEdge;
            }
            else
            {
              v20 = kCTRubyAlignmentDistributeSpace;
            }
          }
          else
          {
            v20 = kCTRubyAlignmentDistributeLetter;
          }
        }
        else
        {
          v20 = kCTRubyAlignmentEnd;
        }
        goto LABEL_22;
      }
    }
    v20 = kCTRubyAlignmentCenter;
LABEL_22:
    v21 = CFDictionaryGetValue(v17, v44);
    if (v21)
      CFAttributedStringSetAttribute(aStr, effectiveRange, attrName, v21);
    v51 = 0;
    valuePtr = 0x3FE0000000000000;
    v50 = 0;
    if (a3 == 2)
    {
      if (*(_BYTE *)(a1 + 680))
        v22 = a4 * 0.5;
      else
        v22 = a4;
      calculateAndCopyStrokeAttributes_0(a1, &v51, &v50, v22);
    }
    Mutable = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v24 = CFNumberCreate(v11, kCFNumberCGFloatType, &valuePtr);
      CFDictionaryAddValue(Mutable, v41, v24);
      if (v24)
        CFRelease(v24);
      CFDictionaryAddValue(Mutable, v40, v39);
      CFDictionaryAddValue(Mutable, v9, v14);
      if (v51)
        CFDictionaryAddValue(Mutable, v36, v51);
      if (v50)
        CFDictionaryAddValue(Mutable, v35, v50);
      Copy = CFDictionaryCreateCopy(v11, Mutable);
    }
    else
    {
      FigSignalErrorAt();
      Copy = 0;
    }
    if (v51)
      CFRelease(v51);
    if (v50)
      CFRelease(v50);
    if (Mutable)
      CFRelease(Mutable);
    CFDictionaryGetValue(v17, v43);
    v26 = FigCFEqual() != 0;
    v27 = CTRubyAnnotationCreateWithAttributes(v20, kCTRubyOverhangNone, v26, String, Copy);
    CFAttributedStringSetAttribute(aStr, effectiveRange, v42, v27);
    if (v27)
      CFRelease(v27);
    v10 = v46;
    if (Copy)
      CFRelease(Copy);
    goto LABEL_47;
  }
}

void calculateAndCopyStrokeAttributes_0(uint64_t a1, _QWORD *a2, CFNumberRef *a3, double a4)
{
  const void *CopyWithAlpha;
  CGColorSpace *DeviceRGB;
  CGColorSpace *v10;
  CGColor *v11;
  double v12;
  double v13;
  const __CFAllocator *v14;
  CFNumberRef v15;
  double v16;
  CGFloat components[2];
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a4 > 0.0)
  {
    components[0] = *(CGFloat *)(a1 + 64);
    CopyWithAlpha = (const void *)MACaptionAppearanceCopyStrokeColor();
    if (!CopyWithAlpha)
    {
      DeviceRGB = CGColorSpaceCreateDeviceRGB();
      if (DeviceRGB)
      {
        v10 = DeviceRGB;
        *(_OWORD *)components = xmmword_1933013D0;
        v18 = unk_1933013E0;
        v11 = CGColorCreate(DeviceRGB, components);
        CopyWithAlpha = CGColorCreateCopyWithAlpha(v11, *(CGFloat *)(a1 + 168));
        CGColorRelease(v11);
        CGColorSpaceRelease(v10);
      }
      else
      {
        CopyWithAlpha = 0;
      }
    }
    v12 = *(double *)(a1 + 672);
    if (v12 < 0.0)
    {
      MACaptionAppearanceGetStrokeWidth();
      v12 = v13 + v13;
    }
    if (*(_BYTE *)(a1 + 664))
      v12 = v12 * 100.0 / a4;
    components[0] = v12;
    v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v15 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberCGFloatType, components);
    if (v15)
    {
      if (a2)
      {
LABEL_12:
        *a2 = CopyWithAlpha;
LABEL_18:
        if (a3)
        {
          *a3 = v15;
        }
        else if (v15)
        {
          CFRelease(v15);
        }
        return;
      }
    }
    else
    {
      v16 = a4 * 0.147058824;
      if (a4 > 60.0)
        v16 = a4 * 0.147058824 * 0.5;
      components[0] = v16;
      v15 = CFNumberCreate(v14, kCFNumberCGFloatType, components);
      if (a2)
        goto LABEL_12;
    }
    if (CopyWithAlpha)
      CFRelease(CopyWithAlpha);
    goto LABEL_18;
  }
}

uint64_t ckCaptionDrawText_0(uint64_t a1, const __CFAttributedString *a2, uint64_t a3, int a4, int a5, double a6, double a7, double a8, double a9, double a10)
{
  CGContext *v20;
  int AppBooleanValue;
  double v22;
  double v23;
  const __CFDictionary *Attributes;
  double v25;
  double v26;
  double v27;
  CGColorSpace *v28;
  CGColorSpace *v29;
  CGColor *v30;
  CGColor *CopyWithAlpha;
  CGMutablePathRef Mutable;
  CGMutablePathRef v33;
  const __CFDictionary *v34;
  const __CFDictionary *v35;
  const __CTTypesetter *v36;
  const __CTTypesetter *v37;
  const __CTFramesetter *v38;
  uint64_t v39;
  const __CFDictionary *FrameAttributesDictionary_0;
  const __CFNumber *Attribute;
  const __CFArray *Lines;
  const __CFArray *v43;
  double *v44;
  CFIndex v45;
  const __CFString *v46;
  const __CTLine *ValueAtIndex;
  const __CFArray *GlyphRuns;
  CFIndex v49;
  double *v50;
  char IsRightToLeft;
  char v52;
  uint64_t v53;
  CFIndex v54;
  const __CTRun *v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  CGFloat x;
  CGFloat y;
  double width;
  double height;
  CFDictionaryRef v68;
  const __CFDictionary *v69;
  char v70;
  double v71;
  char v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  CGColor *Value;
  CGColor *v81;
  double *v82;
  _BOOL4 v83;
  double *v84;
  double v85;
  double v86;
  double v87;
  double *v88;
  uint64_t v89;
  double *v90;
  double v91;
  double v92;
  double v93;
  double v94;
  CGFloat v95;
  CGFloat v96;
  CGFloat v97;
  CGFloat v98;
  const __CTFramesetter *v100;
  const __CTTypesetter *v101;
  const __CFDictionary *v102;
  CGPath *v103;
  const __CFArray *v104;
  CFRange v105;
  CFIndex Count;
  const __CFAllocator *allocator;
  const __CTFrame *frame;
  double dx;
  CFIndex v110;
  double v111;
  int v112;
  const __CFString *theString1;
  double v114;
  double v115;
  double v116;
  double TrailingWhitespaceWidth;
  double rect;
  CFRange v119;
  void *values;
  CFRange effectiveRange;
  __int128 v122;
  uint64_t v123;
  CFRange v124;
  CFRange v125;
  CFRange v126;
  CGSize v127;
  CGRect v128;
  CGRect ImageBounds;
  CGRect v130;
  CGRect v131;
  CGRect v132;
  CGRect v133;
  CGRect v134;
  CGRect v135;

  v123 = *MEMORY[0x1E0C80C00];
  v20 = *(CGContext **)(a3 + 320);
  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("fcr_custom_background_render"), CFSTR("com.apple.coremedia"), 0);
  v112 = a4;
  if (a4 == 1)
  {
    CGContextSetLineJoin(*(CGContextRef *)(a3 + 320), kCGLineJoinRound);
    v22 = 0.0;
    v23 = 0.0;
  }
  else
  {
    if (a6 <= 60.0)
      v23 = a6 * 0.0882352941;
    else
      v23 = a6 * 0.0882352941 / 1.5;
    if (*(_DWORD *)(a3 + 328))
      v23 = -v23;
    v22 = 0.0;
  }
  effectiveRange.location = 0;
  effectiveRange.length = 0;
  Attributes = CFAttributedStringGetAttributes(a2, 0, &effectiveRange);
  switch(getEdgeStyle(*(_QWORD *)(a3 + 128), *(_QWORD *)(a3 + 272), Attributes, (void *)*MEMORY[0x1E0CA29C0]))
  {
    case 1:
    case 4:
      goto LABEL_21;
    case 2:
      if (a6 <= 60.0)
      {
        v22 = a6 * -0.0882352941;
        v23 = a6 * 0.0882352941;
      }
      else
      {
        v22 = a6 * 0.0882352941 / -1.5;
        v23 = a6 * 0.0882352941 / 1.5;
      }
      goto LABEL_17;
    case 3:
      if (a6 <= 60.0)
        v22 = a6 * 0.0882352941;
      else
        v22 = a6 * 0.0882352941 / 1.5;
      v23 = -v22;
      goto LABEL_17;
    default:
LABEL_17:
      v25 = (double)*(int *)(a3 + 332);
      v26 = v22 * v25;
      v27 = v23 * v25;
      effectiveRange = (CFRange)xmmword_1933013B0;
      v122 = unk_1933013C0;
      v28 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
      if (v28)
      {
        v29 = v28;
        v30 = CGColorCreate(v28, (const CGFloat *)&effectiveRange.location);
        CopyWithAlpha = CGColorCreateCopyWithAlpha(v30, *(CGFloat *)(a3 + 168));
        CGColorRelease(v30);
        CGColorSpaceRelease(v29);
      }
      else
      {
        CopyWithAlpha = 0;
      }
      v127.width = v26;
      v127.height = v27;
      CGContextSetShadowWithColor(*(CGContextRef *)(a3 + 320), v127, (double)*(int *)(a3 + 332) * 4.0, CopyWithAlpha);
      CGColorRelease(CopyWithAlpha);
LABEL_21:
      Mutable = CGPathCreateMutable();
      if (!Mutable)
        return 4294950093;
      v33 = Mutable;
      v119.location = 0;
      v119.length = 0;
      theString1 = (const __CFString *)CFAttributedStringGetAttribute(a2, 0, (CFStringRef)*MEMORY[0x1E0CA2B40], &v119);
      if (!theString1 || !*(_BYTE *)(a1 + 128))
      {
        v38 = CTFramesetterCreateWithAttributedString(a2);
        v37 = 0;
        v35 = 0;
        if (!v38)
          goto LABEL_27;
        goto LABEL_29;
      }
      effectiveRange.location = *MEMORY[0x1E0CA8618];
      values = (void *)*MEMORY[0x1E0C9AE50];
      v34 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&effectiveRange, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v34)
      {
        v35 = v34;
        v36 = CTTypesetterCreateWithAttributedStringAndOptions(a2, v34);
        if (v36)
        {
          v37 = v36;
          v38 = CTFramesetterCreateWithTypesetter(v36);
          if (!v38)
          {
LABEL_27:
            v39 = 4294950093;
LABEL_107:
            CFRelease(v33);
            return v39;
          }
LABEL_29:
          FrameAttributesDictionary_0 = createFrameAttributesDictionary_0(a1, theString1);
          effectiveRange.location = 0;
          Attribute = (const __CFNumber *)CFAttributedStringGetAttribute(a2, 0, CFSTR("kFigSubtitleRenderer_CompensationInTextLayout"), &v119);
          if (Attribute)
            CFNumberGetValue(Attribute, kCFNumberCGFloatType, &effectiveRange);
          v128.origin.x = a7 + *(double *)&effectiveRange.location;
          v128.origin.y = a8 + *(double *)&effectiveRange.location;
          v128.size.width = a9 - *(double *)&effectiveRange.location * 2.0;
          v128.size.height = a10 - *(double *)&effectiveRange.location * 2.0;
          v114 = a8 + *(double *)&effectiveRange.location;
          v115 = a7 + *(double *)&effectiveRange.location;
          CGPathAddRect(v33, 0, v128);
          v124.location = 0;
          v124.length = 0;
          frame = CTFramesetterCreateFrame(v38, v124, v33, FrameAttributesDictionary_0);
          if (FrameAttributesDictionary_0)
            CFRelease(FrameAttributesDictionary_0);
          if (frame)
          {
            if (!a5)
              goto LABEL_100;
            if (!AppBooleanValue)
              goto LABEL_100;
            Lines = CTFrameGetLines(frame);
            if (!Lines)
              goto LABEL_100;
            v43 = Lines;
            Count = CFArrayGetCount(Lines);
            if (Count < 1)
              goto LABEL_100;
            v100 = v38;
            v101 = v37;
            v102 = v35;
            v103 = v33;
            v44 = 0;
            v45 = 0;
            allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            dx = a6 / -10.0;
            v105 = (CFRange)*MEMORY[0x1E0C9D538];
            v111 = a6 / -40.0;
            v46 = theString1;
            v104 = v43;
LABEL_39:
            effectiveRange = v105;
            v125.location = v45;
            v125.length = 1;
            CTFrameGetLineOrigins(frame, v125, (CGPoint *)&effectiveRange);
            ValueAtIndex = (const __CTLine *)CFArrayGetValueAtIndex(v43, v45);
            GlyphRuns = CTLineGetGlyphRuns(ValueAtIndex);
            v49 = CFArrayGetCount(GlyphRuns);
            v50 = (double *)CFAllocatorReallocate(allocator, v44, 24 * v49, 0);
            if (v50)
            {
              v44 = v50;
              v110 = v45;
              TrailingWhitespaceWidth = CTLineGetTrailingWhitespaceWidth(ValueAtIndex);
              IsRightToLeft = CTLineIsRightToLeft();
              if (v49 < 1)
                goto LABEL_97;
              v52 = IsRightToLeft;
              v53 = 0;
              v54 = 0;
              v116 = -INFINITY;
              rect = INFINITY;
              while (1)
              {
                v55 = (const __CTRun *)CFArrayGetValueAtIndex(GlyphRuns, v54);
                CTRunGetBackgroundBounds();
                v57 = v56;
                v59 = v58;
                v61 = v60;
                v63 = v62;
                v126.location = 0;
                v126.length = 0;
                ImageBounds = CTRunGetImageBounds(v55, 0, v126);
                x = ImageBounds.origin.x;
                y = ImageBounds.origin.y;
                width = ImageBounds.size.width;
                height = ImageBounds.size.height;
                v68 = CTRunGetAttributes(v55);
                if (v61 < 0.0 || v63 < 0.0 || width < 0.0 || height < 0.0)
                  goto LABEL_85;
                v69 = v68;
                if (TrailingWhitespaceWidth > 0.0)
                {
                  v70 = v52 ^ 1;
                  if (v54)
                    v70 = 1;
                  if ((v70 & 1) != 0)
                  {
                    if (v54 == v49 - 1)
                      v72 = v52;
                    else
                      v72 = 1;
                    if ((v72 & 1) != 0)
                      goto LABEL_60;
                    v71 = TrailingWhitespaceWidth;
                    if (TrailingWhitespaceWidth >= v61)
                      v71 = v61;
                  }
                  else
                  {
                    v71 = TrailingWhitespaceWidth;
                    if (TrailingWhitespaceWidth >= v61)
                      v71 = v61;
                    v57 = v57 + v71;
                  }
                  v61 = v61 - v71;
                }
LABEL_60:
                if (v61 == 0.0)
                {
LABEL_85:
                  if (++v54 == v49)
                  {
                    v89 = v53;
                    if (v53 >= 1)
                    {
LABEL_90:
                      v90 = v44;
                      do
                      {
                        if (*(_QWORD *)v90)
                        {
                          v91 = v90[1];
                          v92 = v90[2] - v91;
                          if (v46)
                          {
                            v93 = -v91;
                            v94 = -v92;
                            v91 = rect;
                            v92 = v116 - rect;
                          }
                          else
                          {
                            v93 = rect;
                            v94 = v116 - rect;
                          }
                          v134 = CGRectOffset(*(CGRect *)&v91, v115 + *(double *)&effectiveRange.location, v114 + *(double *)&effectiveRange.length);
                          v95 = v134.origin.x;
                          v96 = v134.origin.y;
                          v97 = v134.size.width;
                          v98 = v134.size.height;
                          CGContextSetFillColorWithColor(v20, *(CGColorRef *)v90);
                          v135.origin.x = v95;
                          v135.origin.y = v96;
                          v135.size.width = v97;
                          v135.size.height = v98;
                          CGContextAddRect(v20, v135);
                          CGContextFillPath(v20);
                        }
                        v90 += 3;
                        --v89;
                      }
                      while (v89);
                    }
LABEL_97:
                    v45 = v110 + 1;
                    v43 = v104;
                    if (v110 + 1 == Count)
                    {
                      CFAllocatorDeallocate(allocator, v44);
                      goto LABEL_99;
                    }
                    goto LABEL_39;
                  }
                }
                else
                {
                  if (v112 == 1)
                  {
                    v130.origin.x = x;
                    v130.origin.y = y;
                    v130.size.width = width;
                    v130.size.height = height;
                    v131 = CGRectInset(v130, dx, dx);
                    x = v131.origin.x;
                    y = v131.origin.y;
                    width = v131.size.width;
                    height = v131.size.height;
                  }
                  v132.origin.x = x;
                  v132.origin.y = y;
                  v132.size.width = width;
                  v132.size.height = height;
                  v133 = CGRectInset(v132, v111, v111);
                  if (v57 >= v133.origin.x)
                    v73 = v133.origin.x;
                  else
                    v73 = v57;
                  v74 = v133.origin.x + v133.size.width;
                  if (v57 + v61 <= v74)
                    v75 = v74;
                  else
                    v75 = v57 + v61;
                  if (v59 >= v133.origin.y)
                    v76 = v133.origin.y;
                  else
                    v76 = v59;
                  v77 = v133.origin.y + v133.size.height;
                  if (v59 + v63 > v77)
                    v77 = v59 + v63;
                  v78 = rect;
                  if (rect >= v76)
                    v78 = v76;
                  rect = v78;
                  v79 = v116;
                  if (v116 <= v77)
                    v79 = v77;
                  v116 = v79;
                  Value = (CGColor *)CFDictionaryGetValue(v69, CFSTR("kFCRSubtitleRenderer_CharacterBackgroundColor"));
                  v81 = Value;
                  if (v53)
                  {
                    v82 = &v44[3 * v53];
                    v83 = CGColorEqualToColor(Value, *((CGColorRef *)v82 - 3));
                    v85 = *(v82 - 1);
                    v84 = v82 - 1;
                    v86 = v85;
                    if (v83)
                    {
                      if (v86 <= v75)
                        v86 = v75;
                      *v84 = v86;
                    }
                    else
                    {
                      v87 = (v73 + v86) * 0.5;
                      *v84 = v87;
                      v88 = &v44[3 * v53];
                      *(_QWORD *)v88 = v81;
                      v88[1] = v87;
                      v88[2] = v75;
                      ++v53;
                    }
                    v46 = theString1;
                    goto LABEL_85;
                  }
                  *(_QWORD *)v44 = Value;
                  v44[1] = v73;
                  v44[2] = v75;
                  ++v54;
                  v89 = 1;
                  v53 = 1;
                  v46 = theString1;
                  if (v54 == v49)
                    goto LABEL_90;
                }
              }
            }
            FigSignalErrorAt();
LABEL_99:
            v35 = v102;
            v33 = v103;
            v38 = v100;
            v37 = v101;
LABEL_100:
            CTFrameDraw(frame, v20);
            CFRelease(frame);
            v39 = 0;
          }
          else
          {
            v39 = 4294950093;
          }
          CFRelease(v38);
          if (v37)
            CFRelease(v37);
          if (v35)
            CFRelease(v35);
          goto LABEL_107;
        }
      }
      return 0;
  }
}

__CFString *FigCaptionRendererCaption_FigCaptionRendererCaptionProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererCaption <FigCaptionRendererCaptionProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererCaptionProtocol_SetAttributes(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  CFTypeRef v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(const void **)(DerivedStorage + 40);
  *(_QWORD *)(DerivedStorage + 40) = 0;
  if (a2)
    v5 = CFRetain(a2);
  else
    v5 = 0;
  *(_QWORD *)(DerivedStorage + 40) = v5;
  if (v4)
    CFRelease(v4);
  return 0;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererCaptionProtocol_GetAttributes(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 40);
  return 0;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererCaptionProtocol_SetContent(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v5;
  CFTypeRef v6;
  uint64_t ProtocolVTable;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(const void **)(DerivedStorage + 32);
  *(_QWORD *)(DerivedStorage + 32) = 0;
  if (a2)
    v6 = CFRetain(a2);
  else
    v6 = 0;
  *(_QWORD *)(DerivedStorage + 32) = v6;
  if (v5)
    CFRelease(v5);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v8 = *(_QWORD *)(ProtocolVTable + 16);
    if (v8)
    {
      v9 = *(void (**)(uint64_t, uint64_t))(v8 + 232);
      if (v9)
        v9(a1, 1);
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  v10 = CMBaseObjectGetProtocolVTable();
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 16);
    if (v11)
    {
      v12 = *(void (**)(uint64_t, uint64_t))(v11 + 216);
      if (v12)
        v12(a1, 1);
    }
  }
  return 0;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererCaptionProtocol_GetContent(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 32);
  return 0;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererCaptionProtocol_SetFormat(uint64_t a1, int a2)
{
  *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 16) = a2;
  return 0;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererCaptionProtocol_GetFormat(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  return 0;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererCaptionProtocol_SetExtendedLanguageTagString(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(const void **)(DerivedStorage + 48);
  *(_QWORD *)(DerivedStorage + 48) = a2;
  if (a2)
    CFRetain(a2);
  if (v4)
    CFRelease(v4);
  return 0;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererCaptionProtocol_GetExtendedLanguageTagString(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 48);
  return 0;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererCaptionProtocol_SetTextHighlightArray(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(const void **)(DerivedStorage + 56);
  *(_QWORD *)(DerivedStorage + 56) = a2;
  if (a2)
    CFRetain(a2);
  if (v4)
    CFRelease(v4);
  return 0;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererCaptionProtocol_GetTextHighlightArray(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 56);
  return 0;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererCaptionProtocol_SetInvisible_0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 72) = *MEMORY[0x1E0C9AE50] == a2;
  return 0;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererCaptionProtocol_GetInvisible_0(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  _QWORD *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = (_QWORD *)MEMORY[0x1E0C9AE50];
  if (!*(_BYTE *)(DerivedStorage + 72))
    v4 = (_QWORD *)MEMORY[0x1E0C9AE40];
  *a2 = *v4;
  return 0;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererCaptionProtocol_GetSuggestLineHeight(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 20);
  return 0;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererCaptionProtocol_SetWritingMode(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(const void **)(DerivedStorage + 64);
  *(_QWORD *)(DerivedStorage + 64) = a2;
  if (a2)
    CFRetain(a2);
  if (v4)
    CFRelease(v4);
  return 0;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererCaptionProtocol_SetLayoutSampleWithCTAttributes(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(DerivedStorage + 88) = CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0C9AE50]) != 0;
  return 0;
}

uint64_t RegisterFigCaptionRendererCaptionBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFTypeRef FigCaptionRendererCaptionBaseCopyFormattingDesc()
{
  return CFRetain(CFSTR("[FigCaptionRendererCaption]"));
}

uint64_t FigCDSCGOutputCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  if (a1 && a2 && a3 && a6)
  {
    *a6 = 0;
    FigCDSOutputGetClassID();
    CMDerivedObjectCreate();
  }
  return FigSignalErrorAt();
}

void FigCDSCGOutput_Finalize()
{
  const void *v0;

  v0 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v0)
    CFRelease(v0);
}

__CFString *FigCDSCGOutput_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigCDSCGOutput %p>"), a1);
  return Mutable;
}

uint64_t transactionBegin_4()
{
  return 0;
}

uint64_t transactionFlush_4()
{
  return 0;
}

uint64_t transactionCommit_4()
{
  return 0;
}

uint64_t setNeedsDisplayInRect_4()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
    (*(void (**)(_QWORD, _QWORD))(DerivedStorage + 88))(*(_QWORD *)DerivedStorage, *(_QWORD *)(DerivedStorage + 72));
  return 0;
}

double getBounds_4()
{
  return *(double *)(CMBaseObjectGetDerivedStorage() + 8);
}

uint64_t setBounds_4(double a1, double a2, double a3, double a4)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 8) = a1;
  *(double *)(DerivedStorage + 16) = a2;
  *(double *)(DerivedStorage + 24) = a3;
  *(double *)(DerivedStorage + 32) = a4;
  (*(void (**)(_QWORD, double, double, double, double))(DerivedStorage + 80))(*(_QWORD *)(DerivedStorage + 72), a1, a2, a3, a4);
  return 0;
}

uint64_t setVideoBounds_4(double a1, double a2, double a3, double a4)
{
  double *DerivedStorage;

  DerivedStorage = (double *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[5] = a1;
  DerivedStorage[6] = a2;
  DerivedStorage[7] = a3;
  DerivedStorage[8] = a4;
  return 0;
}

int clear_4(void)
{
  double v0;
  double v1;
  double v2;
  double v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGContextRef *DerivedStorage;
  CGContextRef *v9;
  CGRect v11;
  CGRect v12;

  v4 = v3;
  v5 = v2;
  v6 = v1;
  v7 = v0;
  DerivedStorage = (CGContextRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    v9 = DerivedStorage;
    v11.origin.x = v7;
    v11.origin.y = v6;
    v11.size.width = v5;
    v11.size.height = v4;
    if (CGRectEqualToRect(v11, *MEMORY[0x1E0C9D628]))
    {
      CGContextClear();
    }
    else
    {
      v12.origin.x = v7;
      v12.origin.y = v6;
      v12.size.width = v5;
      v12.size.height = v4;
      CGContextClearRect(*v9, v12);
    }
  }
  return 0;
}

double ftu_Init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 144) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void ftu_Finalize(uint64_t a1)
{
  __CFRunLoopSource *RunLoopSource;
  __CFRunLoop *v3;
  NSObject *v4;
  const void *v5;
  const void *v6;
  NSObject *v7;
  const void *v8;
  const void *v9;

  if (*(_QWORD *)(a1 + 72))
  {
    RunLoopSource = (__CFRunLoopSource *)IOSurfaceAcceleratorGetRunLoopSource();
    CFRunLoopRemoveSource(*(CFRunLoopRef *)(a1 + 96), RunLoopSource, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
  }
  v3 = *(__CFRunLoop **)(a1 + 96);
  if (v3)
  {
    CFRunLoopStop(v3);
    FigThreadJoin();
  }
  v4 = *(NSObject **)(a1 + 16);
  if (v4)
  {
    dispatch_release(v4);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v5 = *(const void **)(a1 + 24);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v6 = *(const void **)(a1 + 72);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 72) = 0;
  }
  v7 = *(NSObject **)(a1 + 80);
  if (v7)
  {
    dispatch_release(v7);
    *(_QWORD *)(a1 + 80) = 0;
  }
  v8 = *(const void **)(a1 + 88);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a1 + 88) = 0;
  }
  v9 = *(const void **)(a1 + 120);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 120) = 0;
  }
}

CFTypeRef ftu_CopyFormattingDesc()
{
  return CFRetain(CFSTR("[FigTransformUtility]"));
}

__CFString *ftu_CopyDebugDesc(const void *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  CFIndex v4;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = CFGetRetainCount(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("[FigTransformUtility %p retainCount:%ld"), a1, v4);
  CFStringAppendFormat(Mutable, 0, CFSTR("]\n"));
  return Mutable;
}

uint64_t FigTransformUtilityCreate(uint64_t a1, const void *a2)
{
  uint64_t Instance;
  CFTypeRef v4;
  CFDictionaryRef v5;
  int v6;
  NSObject *v7;
  void *values;

  if (FigTransformUtilityGetTypeID_sRegisterOnce != -1)
    dispatch_once(&FigTransformUtilityGetTypeID_sRegisterOnce, &__block_literal_global_119);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    *(_QWORD *)(Instance + 16) = dispatch_queue_create("com.apple.coremedia.transformutility", 0);
    if (a2)
      v4 = CFRetain(a2);
    else
      v4 = 0;
    *(_QWORD *)(Instance + 24) = v4;
    values = CFSTR("com.apple.coremedia.transformutility.callback");
    v5 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], MEMORY[0x1E0CA52C8], (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *(_QWORD *)(Instance + 80) = dispatch_semaphore_create(3);
    *(_QWORD *)(Instance + 112) = dispatch_semaphore_create(0);
    v6 = FigThreadCreate();
    if (!v6)
    {
      dispatch_semaphore_wait(*(dispatch_semaphore_t *)(Instance + 112), 0xFFFFFFFFFFFFFFFFLL);
      *(int64x2_t *)(Instance + 56) = vdupq_n_s64(0xF4240uLL);
    }
    v7 = *(NSObject **)(Instance + 112);
    if (v7)
    {
      dispatch_release(v7);
      *(_QWORD *)(Instance + 112) = 0;
    }
    if (v5)
      CFRelease(v5);
    if (v6)
    {
      CFRelease((CFTypeRef)Instance);
      return 0;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  return Instance;
}

uint64_t ftu_callbackThread(uint64_t a1)
{
  __CFRunLoopSource *v2;
  CFRunLoopSourceContext v4;

  *(_QWORD *)(a1 + 96) = CFRunLoopGetCurrent();
  memset(&v4, 0, 72);
  v4.perform = (void (__cdecl *)(void *))ftu_noop;
  v2 = CFRunLoopSourceCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, &v4);
  CFRunLoopAddSource(*(CFRunLoopRef *)(a1 + 96), v2, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
  CFRelease(v2);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 112));
  CFRunLoopRun();
  return 0;
}

uint64_t FigTransformUtilityGenerateReplacementImageBufferAsync(uint64_t a1, CVImageBufferRef imageBuffer, uint64_t a3, void (*a4)(uint64_t, CVImageBufferRef), uint64_t a5)
{
  double x;
  double y;
  double width;
  double height;
  CGFloat *v13;
  double *v14;
  const __CFNumber *v15;
  const __CFDictionary *v16;
  const __CFDictionary *v17;
  uint64_t v18;
  char v19;
  const __CFDictionary *v20;
  const __CFDictionary *v21;
  CFTypeID v22;
  const __CFDictionary *v23;
  const __CFDictionary *v24;
  CFTypeID v25;
  const __CFDictionary *v26;
  const __CFDictionary *v27;
  CFTypeID v28;
  const __CFNumber *v29;
  const __CFNumber *v30;
  CFTypeID v31;
  NSObject *v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  int v37;
  double v38;
  double v39;
  const __CFDictionary *v40;
  const __CFDictionary *v41;
  CFTypeID v42;
  const __CFNumber *v43;
  const __CFNumber *v44;
  CFTypeID v45;
  const __CFNumber *v46;
  const __CFNumber *v47;
  CFTypeID v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  size_t v56;
  size_t v57;
  _BOOL4 v58;
  const void *v59;
  const __CFAllocator *v60;
  CFDictionaryRef v61;
  unint64_t v62;
  BOOL v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  double v70;
  double v71;
  double v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  _BOOL4 v77;
  unint64_t v78;
  unint64_t v79;
  OSType PixelFormatType;
  const __CFAllocator *v81;
  const void *v82;
  __CFDictionary *MutableCopy;
  uint64_t v84;
  __CFRunLoopSource *RunLoopSource;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  CFDictionaryRef DictionaryRepresentation;
  _QWORD *v100;
  const void *v101;
  char v102;
  uint64_t v104;
  char v105;
  const __CFNumber *v106;
  const __CFDictionary *v107;
  const __CFDictionary *value;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  void *values;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  _QWORD block[12];
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  int valuePtr;
  CGSize size;
  CGRect v148;
  CGRect rect;
  CVPixelBufferRef pixelBufferOut;
  CGRect CleanRect;
  CGRect v152;
  CGRect v153;
  CGRect v154;

  pixelBufferOut = 0;
  CleanRect = CVImageBufferGetCleanRect(imageBuffer);
  x = CleanRect.origin.x;
  y = CleanRect.origin.y;
  width = CleanRect.size.width;
  height = CleanRect.size.height;
  v13 = (CGFloat *)MEMORY[0x1E0C9D648];
  CleanRect.origin = (CGPoint)*MEMORY[0x1E0C9D648];
  rect.size = *(CGSize *)(MEMORY[0x1E0C9D648] + 16);
  v14 = (double *)MEMORY[0x1E0C9D820];
  v148.size = rect.size;
  rect.origin = CleanRect.origin;
  size = (CGSize)*MEMORY[0x1E0C9D820];
  v148.origin = CleanRect.origin;
  valuePtr = 0;
  v142 = 0;
  v143 = &v142;
  v144 = 0x2000000000;
  v145 = 0;
  v138 = 0;
  v139 = &v138;
  v140 = 0x2000000000;
  v141 = 0;
  v134 = 0;
  v135 = &v134;
  v136 = 0x2000000000;
  v137 = 0;
  v130 = 0;
  v131 = &v130;
  v132 = 0x2000000000;
  v133 = 0;
  v126 = 0;
  v127 = &v126;
  v128 = 0x2000000000;
  v129 = 0;
  v122 = 0;
  v123 = &v122;
  v124 = 0x2000000000;
  v125 = 0;
  v118 = 0;
  v119 = &v118;
  v120 = 0x2000000000;
  v121 = 0;
  if (FigIsNullPixelBuffer(imageBuffer))
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 1;
    goto LABEL_133;
  }
  v20 = (const __CFDictionary *)CVBufferCopyAttachment(imageBuffer, CFSTR("SourceRect"), 0);
  if (v20)
  {
    v21 = v20;
    v22 = CFGetTypeID(v20);
    if (v22 == CFDictionaryGetTypeID())
      CGRectMakeWithDictionaryRepresentation(v21, &rect);
    CFRelease(v21);
  }
  v23 = (const __CFDictionary *)CVBufferCopyAttachment(imageBuffer, CFSTR("DestRect"), 0);
  v24 = v23;
  if (v23)
  {
    v25 = CFGetTypeID(v23);
    if (v25 == CFDictionaryGetTypeID())
      CGRectMakeWithDictionaryRepresentation(v24, &v148);
  }
  v26 = (const __CFDictionary *)CVBufferCopyAttachment(imageBuffer, CFSTR("VirtualDisplaySizeForDestRect"), 0);
  v27 = v26;
  if (v26)
  {
    v28 = CFGetTypeID(v26);
    if (v28 == CFDictionaryGetTypeID())
      CGSizeMakeWithDictionaryRepresentation(v27, &size);
  }
  v107 = v27;
  v29 = (const __CFNumber *)CVBufferCopyAttachment(imageBuffer, CFSTR("SymmetricTransform"), 0);
  v30 = v29;
  if (v29)
  {
    v31 = CFGetTypeID(v29);
    if (v31 == CFNumberGetTypeID())
      CFNumberGetValue(v30, kCFNumberIntType, &valuePtr);
  }
  v106 = v30;
  v32 = *(NSObject **)(a1 + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __FigTransformUtilityGenerateReplacementImageBufferAsync_block_invoke;
  block[3] = &unk_1E2FB7788;
  block[4] = &v142;
  block[5] = &v138;
  block[6] = &v134;
  block[7] = &v130;
  block[8] = &v126;
  block[9] = &v122;
  block[10] = &v118;
  block[11] = a1;
  dispatch_sync(v32, block);
  v33 = *v13;
  v34 = v13[1];
  v35 = v13[2];
  v36 = v13[3];
  v153.origin.x = *v13;
  v153.origin.y = v34;
  v153.size.width = v35;
  v153.size.height = v36;
  if (CGRectEqualToRect(v148, v153)
    || size.width == *v14 && size.height == v14[1]
    || (v154.origin.x = v33,
        v154.origin.y = v34,
        v154.size.width = v35,
        v154.size.height = v36,
        CGRectEqualToRect(rect, v154)))
  {
    v105 = 1;
  }
  else
  {
    if (valuePtr)
    {
      *((_DWORD *)v127 + 6) = valuePtr;
      v59 = (const void *)v119[3];
      if (v59)
        CFRelease(v59);
      values = 0;
      v60 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
      v61 = CFDictionaryCreate(v60, MEMORY[0x1E0D3A330], (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v119[3] = (uint64_t)v61;
      if (values)
        CFRelease(values);
    }
    v105 = 0;
  }
  v37 = *((_DWORD *)v127 + 6);
  v152 = CVImageBufferGetCleanRect(imageBuffer);
  v38 = v152.size.width;
  v39 = v152.size.height;
  v40 = (const __CFDictionary *)CVBufferCopyAttachment(imageBuffer, (CFStringRef)*MEMORY[0x1E0CA8E68], 0);
  value = v24;
  if (v40)
  {
    v41 = v40;
    v42 = CFGetTypeID(v40);
    if (v42 == CFDictionaryGetTypeID())
    {
      LODWORD(values) = 1;
      LODWORD(v109) = 1;
      v43 = (const __CFNumber *)CFDictionaryGetValue(v41, (const void *)*MEMORY[0x1E0CA8E60]);
      if (v43)
      {
        v44 = v43;
        v45 = CFGetTypeID(v43);
        if (v45 == CFNumberGetTypeID())
        {
          CFNumberGetValue(v44, kCFNumberSInt32Type, &values);
          v46 = (const __CFNumber *)CFDictionaryGetValue(v41, (const void *)*MEMORY[0x1E0CA8E70]);
          if (v46)
          {
            v47 = v46;
            v48 = CFGetTypeID(v46);
            if (v48 == CFNumberGetTypeID())
            {
              CFNumberGetValue(v47, kCFNumberSInt32Type, &v109);
              v38 = v38 * (double)(int)values / (double)(int)v109;
            }
          }
        }
      }
    }
    CFRelease(v41);
  }
  v49 = (unint64_t)(v39 + 0.5);
  v50 = (unint64_t)(v38 + 0.5);
  if (v37)
  {
    v51 = *((_DWORD *)v123 + 6);
    goto LABEL_31;
  }
  v56 = CVPixelBufferGetWidth(imageBuffer);
  v57 = CVPixelBufferGetHeight(imageBuffer);
  v58 = v56 <= v135[3] && v57 <= v131[3];
  v51 = *((_DWORD *)v123 + 6);
  v75 = v143[3];
  if (v51)
  {
    if (width < (double)v75)
      goto LABEL_31;
    if (height < (double)(unint64_t)v139[3])
      LOBYTE(v58) = 0;
    if (!v58)
    {
LABEL_31:
      if ((v37 & 4) != 0)
        v52 = (unint64_t)(v39 + 0.5);
      else
        v52 = (unint64_t)(v38 + 0.5);
      if ((v37 & 4) != 0)
        v53 = (unint64_t)(v38 + 0.5);
      else
        v53 = (unint64_t)(v39 + 0.5);
      if (v51 == 1)
      {
        v54 = v143[3];
        v55 = v139[3];
        if (v52 < v54 || v53 < v55)
        {
          if ((float)((float)v54 / (float)v52) <= (float)((float)v55 / (float)v53))
          {
            v52 = v55 * v52 / v53;
            v53 = v139[3];
          }
          else
          {
            v53 = v54 * v53 / v52;
            v52 = v143[3];
          }
        }
        v104 = a5;
        v62 = v53 * v54;
        v63 = v52 * v55 > v53 * v54;
        v64 = v52 * v55 / v54;
        if (v63)
          v65 = v53;
        else
          v65 = v64;
        v66 = v62 / v55;
        if (v63)
          v67 = v66;
        else
          v67 = v52;
        if ((v37 & 4) != 0)
        {
          v68 = v53;
          v69 = v65;
        }
        else
        {
          v68 = v52;
          v52 = v53;
          v69 = v67;
        }
        x = ftu_computeSourceImageRectForCroppedDimensions(v68, x, y, width, v52, v69);
        y = v70;
        width = v71;
        height = v72;
        v73 = v135[3];
        v74 = v131[3];
        if (v67 > v73 || v65 > v74)
        {
          if ((float)((float)v73 / (float)v67) >= (float)((float)v74 / (float)v65))
          {
            v67 = v74 * v67 / v65;
            v65 = v131[3];
          }
          else
          {
            v65 = v73 * v65 / v67;
            v67 = v135[3];
          }
        }
        goto LABEL_91;
      }
LABEL_81:
      v78 = v135[3];
      v79 = v131[3];
      if (v52 > v78 || v53 > v79)
      {
        if ((float)((float)v78 / (float)v52) >= (float)((float)v79 / (float)v53))
        {
          v52 = v79 * v52 / v53;
          v53 = v131[3];
        }
        else
        {
          v53 = v78 * v53 / v52;
          v52 = v135[3];
        }
      }
      v104 = a5;
      v67 = v143[3];
      if (v52 >= v67 || (v65 = v139[3], v53 >= v65))
      {
        v67 = v52;
        v65 = v53;
      }
      else if ((float)((float)v67 / (float)v52) >= (float)((float)v65 / (float)v53))
      {
        v67 = v65 * v52 / v53;
      }
      else
      {
        v65 = v67 * v53 / v52;
      }
LABEL_91:
      PixelFormatType = CVPixelBufferGetPixelFormatType(imageBuffer);
      if (*(_DWORD *)(a1 + 128) == PixelFormatType && *(_QWORD *)(a1 + 136) == v67 && *(_QWORD *)(a1 + 144) == v65)
      {
        v81 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      }
      else
      {
        v82 = *(const void **)(a1 + 120);
        if (v82)
        {
          CFRelease(v82);
          *(_QWORD *)(a1 + 120) = 0;
        }
        v81 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, *(CFDictionaryRef *)(a1 + 24));
        ftvCFDictionarySetSInt32Value(MutableCopy, (const void *)*MEMORY[0x1E0CA9040], PixelFormatType);
        ftvCFDictionarySetSInt32Value(MutableCopy, (const void *)*MEMORY[0x1E0CA90E0], v67);
        ftvCFDictionarySetSInt32Value(MutableCopy, (const void *)*MEMORY[0x1E0CA8FD8], v65);
        v18 = CVPixelBufferPoolCreate(v81, 0, MutableCopy, (CVPixelBufferPoolRef *)(a1 + 120));
        if (!(_DWORD)v18)
        {
          *(_DWORD *)(a1 + 128) = PixelFormatType;
          *(_QWORD *)(a1 + 136) = v67;
          *(_QWORD *)(a1 + 144) = v65;
        }
        if (MutableCopy)
          CFRelease(MutableCopy);
        if ((_DWORD)v18)
        {
LABEL_151:
          v19 = 1;
          a5 = v104;
          goto LABEL_132;
        }
      }
      v84 = CVPixelBufferPoolCreatePixelBuffer(v81, *(CVPixelBufferPoolRef *)(a1 + 120), &pixelBufferOut);
      if (!(_DWORD)v84)
      {
        if (*(_QWORD *)(a1 + 72))
        {
LABEL_106:
          dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 80), 0xFFFFFFFFFFFFFFFFLL);
          dispatch_retain(*(dispatch_object_t *)(a1 + 80));
          if ((v105 & 1) == 0)
          {
            v86 = (double)v65;
            if ((valuePtr & 4) != 0)
              v87 = (double)v65;
            else
              v87 = (double)v67;
            if ((valuePtr & 4) != 0)
              v86 = (double)v67;
            v88 = v87 / width;
            v89 = 1.0;
            if (v87 == width)
              v88 = 1.0;
            if (v86 != height)
              v89 = v86 / height;
            v90 = rect.origin.x * v88;
            v91 = rect.origin.y * v89;
            v92 = rect.size.width * v88;
            v93 = rect.size.height * v89;
            v94 = v86 - (rect.origin.y * v89 + rect.size.height * v89);
            if ((valuePtr & 4) != 0)
              v95 = rect.size.height * v89;
            else
              v95 = rect.size.width * v88;
            if ((valuePtr & 4) != 0)
              v96 = v92;
            else
              v96 = rect.size.height * v89;
            v97 = v87 - (v90 + v92);
            if ((valuePtr & 2) == 0)
              v94 = v91;
            if ((valuePtr & 1) == 0)
              v97 = v90;
            v98 = (double)v67 - (v93 + v94);
            if ((valuePtr & 4) != 0)
              v94 = v97;
            else
              v98 = v97;
            DictionaryRepresentation = CGRectCreateDictionaryRepresentation(*(CGRect *)(&v94 - 1));
            CVBufferSetAttachment(pixelBufferOut, CFSTR("SourceRect"), DictionaryRepresentation, kCVAttachmentMode_ShouldPropagate);
            CVBufferSetAttachment(pixelBufferOut, CFSTR("DestRect"), value, kCVAttachmentMode_ShouldPropagate);
            CVBufferSetAttachment(pixelBufferOut, CFSTR("VirtualDisplaySizeForDestRect"), v107, kCVAttachmentMode_ShouldPropagate);
            if (DictionaryRepresentation)
              CFRelease(DictionaryRepresentation);
          }
          v100 = malloc_type_calloc(1uLL, 0x18uLL, 0xA0040114AFA65uLL);
          *v100 = a4;
          v100[1] = v104;
          v100[2] = pixelBufferOut;
          CVPixelBufferGetIOSurface(imageBuffer);
          CVPixelBufferGetIOSurface(pixelBufferOut);
          LODWORD(values) = x;
          HIDWORD(values) = y;
          v114 = width;
          v115 = height;
          v116 = 0;
          v109 = 0;
          v110 = v67;
          v111 = v65;
          a5 = v104;
          v112 = 0;
          v18 = IOSurfaceAcceleratorBlitSurface();
          v19 = 0;
          goto LABEL_132;
        }
        v84 = IOSurfaceAcceleratorCreate();
        if (!(_DWORD)v84)
        {
          RunLoopSource = (__CFRunLoopSource *)IOSurfaceAcceleratorGetRunLoopSource();
          CFRunLoopAddSource(*(CFRunLoopRef *)(a1 + 96), RunLoopSource, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
          goto LABEL_106;
        }
      }
      v18 = v84;
      goto LABEL_151;
    }
  }
  else
  {
    v76 = v139[3];
    if ((float)((float)v75 / (float)v50) >= (float)((float)v76 / (float)v49))
      v75 = v76 * v50 / v49;
    else
      v76 = v75 * v49 / v50;
    v77 = width >= (double)v75;
    if (height >= (double)v76)
      v77 = 1;
    if (!v58 || !v77)
    {
      v52 = (unint64_t)(v38 + 0.5);
      v53 = (unint64_t)(v39 + 0.5);
      goto LABEL_81;
    }
  }
  v18 = 0;
  v19 = 1;
LABEL_132:
  v16 = v107;
  v17 = value;
  v15 = v106;
LABEL_133:
  v101 = (const void *)v119[3];
  if (v101)
    CFRelease(v101);
  if (v17)
    CFRelease(v17);
  if (v16)
    CFRelease(v16);
  if (v15)
    CFRelease(v15);
  if ((_DWORD)v18 && pixelBufferOut)
  {
    CFRelease(pixelBufferOut);
    pixelBufferOut = 0;
  }
  v102 = v19 ^ 1;
  if (!a4)
    v102 = 1;
  if ((v102 & 1) == 0)
    a4(a5, imageBuffer);
  _Block_object_dispose(&v118, 8);
  _Block_object_dispose(&v122, 8);
  _Block_object_dispose(&v126, 8);
  _Block_object_dispose(&v130, 8);
  _Block_object_dispose(&v134, 8);
  _Block_object_dispose(&v138, 8);
  _Block_object_dispose(&v142, 8);
  return v18;
}

double ftu_computeSourceImageRectForCroppedDimensions(unint64_t a1, double result, double a3, double a4, uint64_t a5, uint64_t a6)
{
  if (a1 != a6)
    return result + a4 / (double)a1 * ((double)(a1 - a6) * 0.5);
  return result;
}

void ftu_blitComplete(NSObject *a1, uint64_t a2, void *a3)
{
  dispatch_semaphore_signal(a1);
  if (*(_QWORD *)a3)
    (*(void (**)(_QWORD, _QWORD))a3)(*((_QWORD *)a3 + 1), *((_QWORD *)a3 + 2));
  CFRelease(*((CFTypeRef *)a3 + 2));
  dispatch_release(a1);
  free(a3);
}

void FigTransformUtilityRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t FigTransformUtilitySetRotation(uint64_t a1, CFNumberRef number)
{
  int v3;
  int v4;
  int v5;
  NSObject *v6;
  _QWORD v8[5];
  int v9;
  int valuePtr;

  valuePtr = 0;
  CFNumberGetValue(number, kCFNumberIntType, &valuePtr);
  if (valuePtr == 180)
    v3 = 3;
  else
    v3 = 0;
  if (valuePtr == 270)
    v4 = 7;
  else
    v4 = v3;
  if (valuePtr == 90)
    v5 = 4;
  else
    v5 = v4;
  v6 = *(NSObject **)(a1 + 16);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = __FigTransformUtilitySetRotation_block_invoke;
  v8[3] = &__block_descriptor_tmp_5_8;
  v9 = v5;
  v8[4] = a1;
  dispatch_sync(v6, v8);
  return 0;
}

uint64_t FigTransformUtilitySetVideoGravity(uint64_t a1)
{
  int v2;
  NSObject *v3;
  _QWORD v5[5];
  int v6;

  if (FigCFEqual())
    v2 = 1;
  else
    v2 = 2 * (FigCFEqual() != 0);
  v3 = *(NSObject **)(a1 + 16);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = __FigTransformUtilitySetVideoGravity_block_invoke;
  v5[3] = &__block_descriptor_tmp_10_13;
  v5[4] = a1;
  v6 = v2;
  dispatch_sync(v3, v5);
  return 0;
}

uint64_t FigTransformUtilitySetMinImageBounds(uint64_t a1, CFDictionaryRef dict)
{
  NSObject *v3;
  _QWORD block[5];
  CGSize v6;
  CGSize size;

  size.width = 0.0;
  size.height = 0.0;
  CGSizeMakeWithDictionaryRepresentation(dict, &size);
  v3 = *(NSObject **)(a1 + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __FigTransformUtilitySetMinImageBounds_block_invoke;
  block[3] = &__block_descriptor_tmp_11_9;
  block[4] = a1;
  v6 = size;
  dispatch_sync(v3, block);
  return 0;
}

uint64_t FigTransformUtilitySetMaxImageBounds(uint64_t a1, CFDictionaryRef dict)
{
  NSObject *v3;
  _QWORD block[5];
  CGSize v6;
  CGSize size;

  size.width = 0.0;
  size.height = 0.0;
  CGSizeMakeWithDictionaryRepresentation(dict, &size);
  v3 = *(NSObject **)(a1 + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __FigTransformUtilitySetMaxImageBounds_block_invoke;
  block[3] = &__block_descriptor_tmp_12_7;
  block[4] = a1;
  v6 = size;
  dispatch_sync(v3, block);
  return 0;
}

uint64_t FigItemIntegratedTimelineGetClassID()
{
  MEMORY[0x19402F294](&FigItemIntegratedTimelineGetClassID_sRegisterFigItemIntegratedTimelineTypeOnce, RegisterFigItemIntegratedTimelineType);
  return sFigItemIntegratedTimelineClassID;
}

uint64_t RegisterFigItemIntegratedTimelineType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigItemIntegratedTimelineCreate(const void *a1, __int128 *a2, _QWORD *a3)
{
  const __CFAllocator *v6;
  uint64_t v7;
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  CFArrayRef v18;
  CFArrayRef v19;
  uint64_t FigBaseObject;
  void (*v21)(uint64_t, const __CFString *, CFArrayRef);
  uint64_t v22;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MEMORY[0x19402F294](&FigItemIntegratedTimelineGetClassID_sRegisterFigItemIntegratedTimelineTypeOnce, RegisterFigItemIntegratedTimelineType);
  v7 = CMDerivedObjectCreate();
  if ((_DWORD)v7)
    return v7;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v9 = DerivedStorage;
  v10 = FigReentrantMutexCreate();
  *(_QWORD *)v9 = v10;
  if (!v10)
    return FigSignalErrorAt();
  MEMORY[0x19402EA0C]();
  if (dword_1EE2A3560)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a1)
    v12 = CFRetain(a1);
  else
    v12 = 0;
  v13 = MEMORY[0x1E0CA2E40];
  v14 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  *(_OWORD *)(v9 + 88) = *MEMORY[0x1E0CA2E40];
  *(_QWORD *)(v9 + 8) = v12;
  *(_OWORD *)(v9 + 104) = v14;
  *(_OWORD *)(v9 + 120) = *(_OWORD *)(v13 + 32);
  v15 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)(v9 + 192) = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(v9 + 208) = *(_QWORD *)(v15 + 16);
  v16 = *a2;
  *(_QWORD *)(v9 + 80) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(v9 + 64) = v16;
  *(_QWORD *)(v9 + 56) = FigDispatchQueueCreateWithPriority();
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  v17 = CMBaseObjectGetDerivedStorage();
  v18 = CFArrayCreate(v6, 0, 0, MEMORY[0x1E0C9B378]);
  if (v18)
  {
    v19 = v18;
    FigBaseObject = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(v17 + 8));
    v21 = *(void (**)(uint64_t, const __CFString *, CFArrayRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 56);
    if (v21)
      v21(FigBaseObject, CFSTR("IntegratedTimelineTimeOffsets"), v19);
    CFRelease(v19);
  }
  else
  {
    FigSignalErrorAt();
  }
  fiit_checkAndUpdateIfPrimaryIsReadyForInspection(0);
  fiit_updatePrimaryItemSeekableTimeRange(0, 0);
  fiit_updatePrimaryItemStartMoment();
  fiit_rebuildSegmentList(0);
  fiit_unlockAndPostSnapshotOutOfSyncNotification(0);
  v22 = 0;
  *a3 = 0;
  return v22;
}

void fiit_checkAndUpdateIfPrimaryIsReadyForInspection(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t FigBaseObject;
  void (*v7)(uint64_t, const __CFString *, uint64_t, uint64_t *);
  BOOL v8;
  NSObject *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  unsigned int (*v16)(uint64_t, __int128 *);
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, const __CFString *, uint64_t, CFArrayRef *);
  const __CFArray *v20;
  CFIndex Count;
  CFIndex v22;
  uint64_t v23;
  const __CFDictionary *ValueAtIndex;
  int v25;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  os_log_type_t v32;
  os_log_type_t type[4];
  CFArrayRef theArray;
  int v35;
  const char *v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v30 = *MEMORY[0x1E0CA2E18];
  v31 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v3 = *MEMORY[0x1E0C9AE40];
  v29 = *MEMORY[0x1E0C9AE40];
  if (!*(_BYTE *)(DerivedStorage + 185))
  {
    v4 = DerivedStorage;
    v5 = *MEMORY[0x1E0C9AE00];
    FigBaseObject = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(DerivedStorage + 8));
    v7 = *(void (**)(uint64_t, const __CFString *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
    if (v7)
    {
      v7(FigBaseObject, CFSTR("BasicsReadyForInspection"), v5, &v29);
      v3 = v29;
    }
    v8 = v3 == *MEMORY[0x1E0C9AE50];
    *(_BYTE *)(v4 + 185) = v8;
    if (v8)
    {
      v15 = *(_QWORD *)(v4 + 8);
      v16 = *(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (!v16 || v16(v15, &v30))
        return;
      *(_BYTE *)(v4 + 184) = (~HIDWORD(v30) & 0x11) == 0;
      v17 = CMBaseObjectGetDerivedStorage();
      theArray = 0;
      v18 = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(v17 + 8));
      v19 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
      if (v19
        && (v19(v18, CFSTR("TaggedRangeMetadataArray"), v5, &theArray), theArray)
        && CFArrayGetCount(theArray) >= 1
        && !*(_BYTE *)(v17 + 186)
        && (v20 = theArray) != 0
        && (Count = CFArrayGetCount(theArray), Count >= 1))
      {
        v22 = Count;
        v23 = 1;
        do
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v20, v23 - 1);
          CFDictionaryGetValue(ValueAtIndex, CFSTR("TaggedRangeMetadataKey_Class"));
          v25 = FigCFEqual();
          if (v23 >= v22)
            break;
          ++v23;
        }
        while (!v25);
        *(_BYTE *)(v17 + 187) = v25 != 0;
        if (v25 && dword_1EE2A3560)
        {
          *(_DWORD *)type = 0;
          v32 = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v27 = *(_DWORD *)type;
          if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, v32))
            v28 = v27;
          else
            v28 = v27 & 0xFFFFFFFE;
          if (v28)
          {
            v35 = 136315394;
            v36 = "fiit_checkAndUpdateIfTimelineShouldWaitForInterstitialsFromCoordinator";
            v37 = 2048;
            v38 = a1;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      else
      {
        *(_BYTE *)(v17 + 187) = 0;
      }
      if (theArray)
        CFRelease(theArray);
    }
    if (dword_1EE2A3560)
    {
      LODWORD(theArray) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v10 = theArray;
      if (os_log_type_enabled(v9, type[0]))
        v11 = v10;
      else
        v11 = v10 & 0xFFFFFFFE;
      if (v11)
      {
        v12 = *(unsigned __int8 *)(v4 + 184);
        if (*(_BYTE *)(v4 + 185))
          v13 = "is";
        else
          v13 = "is not";
        v14 = ", is live";
        v36 = "fiit_checkAndUpdateIfPrimaryIsReadyForInspection";
        v37 = 2048;
        v35 = 136315906;
        v38 = a1;
        v39 = 2080;
        if (!v12)
          v14 = "";
        v40 = v13;
        v41 = 2080;
        v42 = v14;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
}

uint64_t fiit_updatePrimaryItemSeekableTimeRange(int a1, CFTypeRef cf)
{
  CFTypeRef v2;
  __int128 v3;
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t FigBaseObject;
  unsigned int (*v7)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CMTimeFlags v8;
  CMTimeEpoch v9;
  CMTimeFlags v10;
  CMTimeEpoch v11;
  CFIndex v12;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *Value;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  const __CFDictionary *v17;
  CMTimeFlags v18;
  CMTimeEpoch v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v24;
  CFIndex Count;
  CMTimeRange time2;
  CMTimeRange time1;
  CMTimeRange v28;
  CFTypeRef v29;
  CMTimeValue v30;
  CMTimeScale v31;
  CMTimeValue v32;
  CMTimeScale timescale;
  CMTimeValue v34;
  CMTimeScale v35;
  CMTimeValue v36;
  CMTimeScale v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (cf)
    v2 = CFRetain(cf);
  else
    v2 = 0;
  v29 = v2;
  v3 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  *(_OWORD *)&v28.start.value = *MEMORY[0x1E0CA2E40];
  *(_OWORD *)&v28.start.epoch = v3;
  *(_OWORD *)&v28.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = DerivedStorage;
  if (!v2)
  {
    FigBaseObject = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(DerivedStorage + 8));
    v7 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
    if (!v7 || v7(FigBaseObject, CFSTR("SeekableTimeIntervals"), *MEMORY[0x1E0C9AE00], &v29))
      goto LABEL_18;
    v2 = v29;
  }
  v24 = v5;
  v36 = *MEMORY[0x1E0CA2E18];
  v8 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
  v37 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  v9 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v34 = *MEMORY[0x1E0CA2E28];
  v10 = *(_DWORD *)(MEMORY[0x1E0CA2E28] + 12);
  v35 = *(_DWORD *)(MEMORY[0x1E0CA2E28] + 8);
  v11 = *(_QWORD *)(MEMORY[0x1E0CA2E28] + 16);
  if (v2)
  {
    Count = CFArrayGetCount((CFArrayRef)v2);
    if (Count >= 1)
    {
      v12 = 0;
      do
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v2, v12);
        Value = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, CFSTR("startTime"));
        CMTimeMakeFromDictionary(&time1.start, Value);
        v32 = time1.start.value;
        flags = time1.start.flags;
        timescale = time1.start.timescale;
        epoch = time1.start.epoch;
        v17 = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, CFSTR("endTime"));
        CMTimeMakeFromDictionary(&time1.start, v17);
        v30 = time1.start.value;
        v18 = time1.start.flags;
        v31 = time1.start.timescale;
        if ((flags & 0x1D) != 1)
          goto LABEL_18;
        v19 = time1.start.epoch;
        time1.start.value = v36;
        time1.start.timescale = v37;
        time1.start.flags = v8;
        time1.start.epoch = v9;
        time2.start.value = v32;
        time2.start.timescale = timescale;
        time2.start.flags = flags;
        time2.start.epoch = epoch;
        if (CMTimeCompare(&time1.start, &time2.start) >= 1)
        {
          v36 = v32;
          v37 = timescale;
          v8 = flags;
          v9 = epoch;
        }
        time1.start.value = v34;
        time1.start.timescale = v35;
        time1.start.flags = v10;
        time1.start.epoch = v11;
        time2.start.value = v30;
        time2.start.timescale = v31;
        time2.start.flags = v18;
        time2.start.epoch = v19;
        if (CMTimeCompare(&time1.start, &time2.start) < 0)
        {
          v34 = v30;
          v35 = v31;
          v10 = v18;
          v11 = v19;
        }
      }
      while (Count != ++v12);
    }
  }
  time1.start.value = v36;
  time1.start.timescale = v37;
  time1.start.flags = v8;
  time1.start.epoch = v9;
  time2.start.value = v34;
  time2.start.timescale = v35;
  time2.start.flags = v10;
  time2.start.epoch = v11;
  CMTimeRangeFromTimeToTime(&v28, &time1.start, &time2.start);
  v20 = *(_OWORD *)(v24 + 104);
  *(_OWORD *)&time1.start.value = *(_OWORD *)(v24 + 88);
  *(_OWORD *)&time1.start.epoch = v20;
  *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(v24 + 120);
  time2 = v28;
  if (CMTimeRangeEqual(&time1, &time2))
  {
LABEL_18:
    v21 = 0;
    goto LABEL_20;
  }
  v22 = *(_OWORD *)&v28.start.epoch;
  *(_OWORD *)(v24 + 88) = *(_OWORD *)&v28.start.value;
  *(_OWORD *)(v24 + 104) = v22;
  *(_OWORD *)(v24 + 120) = *(_OWORD *)&v28.duration.timescale;
  v21 = 1;
LABEL_20:
  if (v29)
    CFRelease(v29);
  return v21;
}

void fiit_updatePrimaryItemStartMoment()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  CMTimeValue *v2;
  uint64_t FigBaseObject;
  void (*v4)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v5;
  void (*v6)(uint64_t, __int128 *);
  char v7;
  CMTimeFlags v8;
  CMTimeEpoch v9;
  double v10;
  double v11;
  double v12;
  CMTime v13;
  CFTypeRef cf;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  CMTime time;
  CMTimeValue v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  cf = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((*(_BYTE *)(DerivedStorage + 100) & 1) != 0)
  {
    v1 = DerivedStorage;
    if ((*(_BYTE *)(DerivedStorage + 124) & 1) != 0
      && !*(_QWORD *)(DerivedStorage + 128)
      && (*(_QWORD *)(DerivedStorage + 112) & 0x8000000000000000) == 0)
    {
      v2 = (CMTimeValue *)(DerivedStorage + 88);
      FigBaseObject = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(DerivedStorage + 8));
      v4 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
      if (v4 && (v4(FigBaseObject, CFSTR("currentDateAndTime"), *MEMORY[0x1E0C9AE00], &cf), cf))
      {
        FigDateTimeMakeFromDictionary(cf, (uint64_t)&v15);
      }
      else
      {
        LOBYTE(v17) = 1;
        v5 = *(_QWORD *)(v1 + 8);
        v6 = *(void (**)(uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
        if (v6)
          v6(v5, &v15);
      }
      v7 = 0;
      v8 = *(_DWORD *)(v1 + 100);
      v9 = *(_QWORD *)(v1 + 104);
      *(_OWORD *)&v13.value = v15;
      v10 = *((double *)&v16 + 1);
      v13.epoch = v16;
      v19 = *v2;
      v20 = *(_DWORD *)(v1 + 96);
      v11 = 0.0;
      if ((_BYTE)v17 && BYTE1(v17))
      {
        time.value = *v2;
        time.timescale = *(_DWORD *)(v1 + 96);
        time.flags = v8;
        time.epoch = v9;
        v12 = v10 + CMTimeGetSeconds(&time);
        time = v13;
        v11 = v12 - CMTimeGetSeconds(&time);
        v7 = 1;
      }
      *(_QWORD *)(v1 + 144) = v19;
      *(_DWORD *)(v1 + 152) = v20;
      *(_DWORD *)(v1 + 156) = v8;
      *(_QWORD *)(v1 + 160) = v9;
      *(double *)(v1 + 168) = v11;
      *(_BYTE *)(v1 + 176) = v8 & 1;
      *(_BYTE *)(v1 + 177) = v7;
      *(_DWORD *)(v1 + 178) = 0;
      *(_WORD *)(v1 + 182) = 0;
      if (cf)
        CFRelease(cf);
    }
  }
}

void fiit_rebuildSegmentList(uint64_t a1)
{
  uint64_t DerivedStorage;
  const __CFArray *v3;
  CFIndex Count;
  uint64_t v5;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  CFIndex v8;
  CMTime *v9;
  __int128 v10;
  uint64_t ValueAtIndex;
  uint64_t v12;
  uint64_t v13;
  int v14;
  CMTimeFlags v15;
  CMTimeEpoch v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  const __CFArray *v21;
  __CFArray *LoadedTimeRangesForTimeMapping;
  __int128 v23;
  CFDateRef CFDateFromTime;
  CFTypeRef v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  CMTimeEpoch v29;
  _OWORD *v30;
  __int128 v31;
  CMTimeEpoch v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t InterstitialEvent;
  void (*v39)(uint64_t, uint64_t);
  CFTypeRef *v40;
  __CFArray *v41;
  __int128 v42;
  CFDateRef v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t);
  const void *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int Type;
  int v54;
  const void *v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  __int128 v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t);
  const void *v61;
  __CFArray *v62;
  _OWORD *v63;
  uint64_t v64;
  CMTimeEpoch v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  CFIndex v69;
  CFIndex v70;
  __CFArray *theArray;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  CMTimeFlags v75;
  CMTimeEpoch v76;
  CMTime v77;
  CMTime v78;
  CMTime rhs;
  CMTime time1;
  CMTime v81;
  CMTime v82;
  CMTime time2;
  CMTimeRange v84;
  CFTypeRef cf;
  CMTime v86;
  CMTimeRange duration;
  CMTimeRange v88;
  CMTimeRange lhs;
  CMTimeRange target;
  CMTimeMapping time;
  CMTimeMapping range;
  CMTime start;
  CMTimeValue v94;
  CMTimeScale v95;
  CMTimeValue value;
  CMTimeScale timescale;
  CMTimeValue v98;
  CMTimeScale v99;
  CMTimeValue v100;
  CMTimeScale v101;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(const __CFArray **)(DerivedStorage + 24);
  if (v3)
    Count = CFArrayGetCount(v3);
  else
    Count = 0;
  if (!*(_BYTE *)(DerivedStorage + 185) || *(_BYTE *)(DerivedStorage + 187))
    return;
  v5 = DerivedStorage + 88;
  v98 = *(_QWORD *)(DerivedStorage + 88);
  flags = *(_DWORD *)(DerivedStorage + 100);
  v99 = *(_DWORD *)(DerivedStorage + 96);
  epoch = *(_QWORD *)(DerivedStorage + 104);
  v100 = v98;
  v101 = v99;
  theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v8 = 0;
  v74 = 0;
  v69 = Count - 1;
  v9 = (CMTime *)MEMORY[0x1E0CA2E18];
  v76 = epoch;
  v75 = flags;
  v72 = a1;
  v73 = DerivedStorage;
  v70 = Count;
  while (1)
  {
    v10 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)&range.source.start.value = *(_OWORD *)v5;
    *(_OWORD *)&range.source.start.epoch = v10;
    *(_OWORD *)&range.source.duration.timescale = *(_OWORD *)(v5 + 32);
    CMTimeRangeGetEnd(&time2, &range.source);
    range.source.start.value = v100;
    range.source.start.timescale = v101;
    range.source.start.flags = flags;
    range.source.start.epoch = epoch;
    if ((CMTimeCompare(&range.source.start, &time2) & 0x80000000) == 0 && v8 >= Count)
      break;
    value = v9->value;
    timescale = v9->timescale;
    v82 = *v9;
    v81 = v82;
    ValueAtIndex = FigCFArrayGetValueAtIndex();
    v12 = CMBaseObjectGetDerivedStorage();
    if (!ValueAtIndex)
    {
      memset(&v78, 0, sizeof(v78));
      v58 = *(_OWORD *)(v5 + 16);
      *(_OWORD *)&range.source.start.value = *(_OWORD *)v5;
      *(_OWORD *)&range.source.start.epoch = v58;
      *(_OWORD *)&range.source.duration.timescale = *(_OWORD *)(v5 + 32);
      CMTimeRangeGetEnd(&v78, &range.source);
LABEL_26:
      range.source.start = v78;
      time.source.start.value = v100;
      *(_QWORD *)&time.source.start.timescale = __PAIR64__(flags, v101);
      time.source.start.epoch = epoch;
      CMTimeSubtract(&v81, &range.source.start, &time.source.start);
      range.source.start = v81;
      *(_OWORD *)&time.source.start.value = *MEMORY[0x1E0CA2E68];
      time.source.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
      if (CMTimeCompare(&range.source.start, &time.source.start) < 1)
        goto LABEL_118;
      v94 = v98;
      v95 = v99;
      v77 = v81;
      cf = 0;
      v17 = CMBaseObjectGetDerivedStorage();
      v18 = *(uint64_t (**)(uint64_t))(v17 + 80);
      v19 = FigCFArrayGetValueAtIndex();
      v20 = v18(v19);
      range.source.start.value = v100;
      range.source.start.timescale = v101;
      range.source.start.flags = flags;
      range.source.start.epoch = epoch;
      time.source.start = v77;
      CMTimeRangeMake(&duration, &range.source.start, &time.source.start);
      range.source.start.value = v98;
      range.source.start.timescale = v99;
      range.source.start.flags = v75;
      range.source.start.epoch = v76;
      time.source.start = v77;
      CMTimeRangeMake(&v84, &range.source.start, &time.source.start);
      CMTimeMappingMake(&range, &duration, &v84);
      v21 = *(const __CFArray **)(v17 + 136);
      time = range;
      LoadedTimeRangesForTimeMapping = fiit_createLoadedTimeRangesForTimeMapping(v21, (uint64_t)&time);
      if (!v20)
        goto LABEL_29;
      if (FigPlaybackItemSegmentGetType(v20))
        goto LABEL_29;
      FigPlaybackItemSegmentGetLoadedTimeRanges(v20);
      if (!FigCFEqual())
        goto LABEL_29;
      FigPlaybackItemSegmentGetTimeMapping(v20, (uint64_t)&lhs);
      time = range;
      start = range.source.start;
      v86 = lhs.start;
      if (CMTimeCompare(&start, &v86)
        || (start = time.source.duration, v86 = lhs.duration, CMTimeCompare(&start, &v86))
        || (start = time.target.start, v86 = target.start, CMTimeCompare(&start, &v86))
        || (start = time.target.duration, v86 = target.duration, CMTimeCompare(&start, &v86)))
      {
LABEL_29:
        start.value = v94;
        start.timescale = v95;
        start.flags = v75;
        start.epoch = v76;
        v23 = *(_OWORD *)(v17 + 160);
        *(_OWORD *)&time.source.start.value = *(_OWORD *)(v17 + 144);
        *(_OWORD *)&time.source.start.epoch = v23;
        *(_QWORD *)&time.source.duration.timescale = *(_QWORD *)(v17 + 176);
        CFDateFromTime = fiit_MakeCFDateFromTime(&start, (uint64_t)&time);
        time = range;
        if (!FigPlaybackItemSegmentCreate(0, (__int128 *)&time.source.start.value, LoadedTimeRangesForTimeMapping, CFDateFromTime, 0, &cf))
        {
          v25 = (CFTypeRef)(*(uint64_t (**)(CFTypeRef))(v17 + 72))(cf);
LABEL_31:
          if (LoadedTimeRangesForTimeMapping)
            CFRelease(LoadedTimeRangesForTimeMapping);
          if (CFDateFromTime)
            CFRelease(CFDateFromTime);
          if (cf)
            CFRelease(cf);
          if (!v25)
            goto LABEL_118;
          time.source.start.value = v100;
          *(_QWORD *)&time.source.start.timescale = __PAIR64__(flags, v101);
          time.source.start.epoch = epoch;
          lhs.start = v81;
          CMTimeAdd(&range.source.start, &time.source.start, &lhs.start);
          v100 = range.source.start.value;
          flags = range.source.start.flags;
          v101 = range.source.start.timescale;
          epoch = range.source.start.epoch;
          goto LABEL_74;
        }
      }
      else
      {
        v55 = (const void *)FigCFArrayGetValueAtIndex();
        if (v55)
        {
          v25 = CFRetain(v55);
          CFDateFromTime = 0;
          goto LABEL_31;
        }
        CFDateFromTime = 0;
      }
      v25 = 0;
      goto LABEL_31;
    }
    v13 = v12;
    FigPlayerInterstitialEventGetResolvedStartTime(ValueAtIndex, (uint64_t)&range);
    if ((range.source.start.flags & 1) == 0)
      goto LABEL_19;
    FigPlayerInterstitialEventGetResolvedEndTime(ValueAtIndex, (uint64_t)&time);
    if ((time.source.start.flags & 1) == 0)
      goto LABEL_19;
    if (FigPlayerInterstitialEventIsPostRoll(ValueAtIndex))
    {
      if (*(_BYTE *)(v13 + 184))
      {
        v14 = 1;
        goto LABEL_16;
      }
LABEL_17:
      FigPlayerInterstitialEventGetResolvedStartTime(ValueAtIndex, (uint64_t)&time1);
      range.source.start.value = v100;
      range.source.start.timescale = v101;
      range.source.start.flags = flags;
      range.source.start.epoch = epoch;
      if (CMTimeCompare(&time1, &range.source.start) < 0)
      {
        value = v100;
        timescale = v101;
        FigPlayerInterstitialEventGetResolvedStartTime(ValueAtIndex, (uint64_t)&rhs);
        range.source.start.value = v100;
        range.source.start.timescale = v101;
        range.source.start.flags = flags;
        range.source.start.epoch = epoch;
        CMTimeSubtract(&v82, &range.source.start, &rhs);
        v15 = flags;
        v16 = epoch;
      }
      else
      {
        v82 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
        FigPlayerInterstitialEventGetResolvedStartTime(ValueAtIndex, (uint64_t)&range);
        value = range.source.start.value;
        v15 = range.source.start.flags;
        timescale = range.source.start.timescale;
        v16 = range.source.start.epoch;
      }
      if ((flags & 0x1F) != 3 && (v15 & 0x1F) != 3)
        goto LABEL_121;
      memset(&range, 0, 24);
      lhs.start.value = v100;
      lhs.start.timescale = v101;
      lhs.start.flags = flags;
      lhs.start.epoch = epoch;
      duration.start.value = value;
      duration.start.timescale = timescale;
      duration.start.flags = v15;
      duration.start.epoch = v16;
      CMTimeSubtract(&time.source.start, &lhs.start, &duration.start);
      CMTimeAbsoluteValue(&range.source.start, &time.source.start);
      CMTimeMake(&v84.start, 1, 1000000000);
      *(_OWORD *)&lhs.start.value = *(_OWORD *)&range.source.start.value;
      lhs.start.epoch = range.source.start.epoch;
      if (CMTimeCompare(&lhs.start, &v84.start) > 0)
      {
LABEL_121:
        range.source.start.value = v100;
        range.source.start.timescale = v101;
        range.source.start.flags = flags;
        range.source.start.epoch = epoch;
        lhs.start.value = value;
        lhs.start.timescale = timescale;
        lhs.start.flags = v15;
        lhs.start.epoch = v16;
        if (CMTimeCompare(&range.source.start, &lhs.start))
        {
          memset(&v78, 0, sizeof(v78));
          FigPlayerInterstitialEventGetResolvedStartTime(ValueAtIndex, (uint64_t)&v78);
          goto LABEL_26;
        }
      }
      memset(&v86, 0, sizeof(v86));
      FigPlayerInterstitialEventGetResolvedDuration(ValueAtIndex, (uint64_t)&v86);
      v26 = CMBaseObjectGetDerivedStorage();
      if (*(_BYTE *)(v26 + 184))
      {
        v27 = v26;
        if (FigPlayerInterstitialEventGetTimelineOccupancy(ValueAtIndex) == 1)
        {
          memset(&time, 0, 24);
          FigPlayerInterstitialEventGetResolvedStartTime(ValueAtIndex, (uint64_t)&lhs);
          v28 = *(_OWORD *)(v27 + 104);
          *(_OWORD *)&range.source.start.value = *(_OWORD *)(v27 + 88);
          *(_OWORD *)&range.source.start.epoch = v28;
          *(_OWORD *)&range.source.duration.timescale = *(_OWORD *)(v27 + 120);
          fiit_distanceFromRange((uint64_t)&range, &lhs.start, (uint64_t)&time);
          *(_OWORD *)&range.source.start.value = *(_OWORD *)&time.source.start.value;
          range.source.start.epoch = time.source.start.epoch;
          v67 = *MEMORY[0x1E0CA2E68];
          *(_OWORD *)&duration.start.value = *MEMORY[0x1E0CA2E68];
          v29 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
          duration.start.epoch = v29;
          if (CMTimeCompare(&range.source.start, &duration.start))
          {
            duration.start = v86;
            *(_OWORD *)&v84.start.value = *(_OWORD *)&time.source.start.value;
            v84.start.epoch = time.source.start.epoch;
            CMTimeSubtract(&range.source.start, &duration.start, &v84.start);
            v86 = range.source.start;
          }
          v30 = (_OWORD *)(v27 + 88);
          FigPlayerInterstitialEventGetResolvedEndTime(ValueAtIndex, (uint64_t)&duration);
          v31 = v30[1];
          *(_OWORD *)&range.source.start.value = *v30;
          *(_OWORD *)&range.source.start.epoch = v31;
          *(_OWORD *)&range.source.duration.timescale = v30[2];
          fiit_distanceFromRange((uint64_t)&range, &duration.start, (uint64_t)&time);
          *(_OWORD *)&range.source.start.value = *(_OWORD *)&time.source.start.value;
          range.source.start.epoch = time.source.start.epoch;
          *(_OWORD *)&v84.start.value = v67;
          v84.start.epoch = v29;
          if (CMTimeCompare(&range.source.start, &v84.start))
          {
            v84.start = v86;
            start = time.source.start;
            CMTimeSubtract(&range.source.start, &v84.start, &start);
            v86 = range.source.start;
          }
        }
      }
      if (FigPlayerInterstitialEventGetTimelineOccupancy(ValueAtIndex) == 1)
      {
        *(_OWORD *)&v81.value = *(_OWORD *)&v86.value;
        v32 = v86.epoch;
      }
      else
      {
        *(_OWORD *)&v81.value = *MEMORY[0x1E0CA2E68];
        v32 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
      }
      v81.epoch = v32;
      start = v82;
      v78 = v86;
      memset(&range, 0, sizeof(range));
      v77.value = 0;
      v33 = CMBaseObjectGetDerivedStorage();
      v34 = *(uint64_t (**)(uint64_t))(v33 + 80);
      v35 = FigCFArrayGetValueAtIndex();
      v36 = v34(v35);
      v37 = *(_QWORD *)(v33 + 16);
      if (v37)
      {
        if (v36)
        {
          InterstitialEvent = FigPlaybackItemSegmentGetInterstitialEvent(v36);
          v39 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
          if (v39)
            v39(v37, InterstitialEvent);
        }
        time.source.start = start;
        duration.start = v78;
        CMTimeRangeMake(&lhs, &time.source.start, &duration.start);
        time.source.start.value = v98;
        *(_QWORD *)&time.source.start.timescale = __PAIR64__(v75, v99);
        time.source.start.epoch = v76;
        v84.start = v81;
        CMTimeRangeMake(&duration, &time.source.start, &v84.start);
        CMTimeMappingMake(&range, &lhs, &duration);
        if (FigPlayerInterstitialEventGetTimelineOccupancy(ValueAtIndex) == 1)
        {
          v40 = FigPlayerInterstitialEventCopyLoadedTimeIntervals(ValueAtIndex);
          time = range;
          v41 = fiit_createLoadedTimeRangesForTimeMapping((const __CFArray *)v40, (uint64_t)&time);
        }
        else
        {
          v41 = 0;
          v40 = 0;
        }
        v84.start.value = v98;
        v84.start.timescale = v99;
        v84.start.flags = v75;
        v84.start.epoch = v76;
        v42 = *(_OWORD *)(v33 + 160);
        *(_OWORD *)&time.source.start.value = *(_OWORD *)(v33 + 144);
        *(_OWORD *)&time.source.start.epoch = v42;
        *(_QWORD *)&time.source.duration.timescale = *(_QWORD *)(v33 + 176);
        v43 = fiit_MakeCFDateFromTime(&v84.start, (uint64_t)&time);
        v44 = *(_QWORD *)(v33 + 16);
        v45 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 112);
        if (v45)
          v46 = (const void *)v45(v44, ValueAtIndex);
        else
          v46 = 0;
        time = range;
        if (FigPlaybackItemSegmentCreate(1, (__int128 *)&time.source.start.value, v41, v43, v46, &v77))
        {
          v25 = 0;
          if (v40)
LABEL_60:
            CFRelease(v40);
        }
        else
        {
          v25 = (CFTypeRef)(*(uint64_t (**)(CMTimeValue))(v33 + 72))(v77.value);
          if (v40)
            goto LABEL_60;
        }
        if (v41)
          CFRelease(v41);
        if (v43)
          CFRelease(v43);
        if (v46)
          CFRelease(v46);
        goto LABEL_67;
      }
      v25 = 0;
LABEL_67:
      if (v77.value)
        CFRelease((CFTypeRef)v77.value);
      if (!v25)
      {
LABEL_118:
        v62 = theArray;
        if (!theArray)
          return;
LABEL_116:
        CFRelease(v62);
        return;
      }
      FigPlayerInterstitialEventGetResolvedEndTime(ValueAtIndex, (uint64_t)&range);
      v100 = range.source.start.value;
      flags = range.source.start.flags;
      v101 = range.source.start.timescale;
      epoch = range.source.start.epoch;
      if (FigPlayerInterstitialEventIsPostRoll(ValueAtIndex) && v8 == v69)
      {
        v47 = *(_OWORD *)(v5 + 16);
        *(_OWORD *)&range.source.start.value = *(_OWORD *)v5;
        *(_OWORD *)&range.source.start.epoch = v47;
        *(_OWORD *)&range.source.duration.timescale = *(_OWORD *)(v5 + 32);
        CMTimeRangeGetEnd(&time.source.start, &range.source);
        v100 = time.source.start.value;
        flags = time.source.start.flags;
        v101 = time.source.start.timescale;
        epoch = time.source.start.epoch;
      }
      ++v8;
LABEL_74:
      v48 = FigCFArrayGetValueAtIndex();
      v49 = CMBaseObjectGetDerivedStorage();
      v50 = (*(uint64_t (**)(uint64_t))(v49 + 80))(v48);
      v51 = (*(uint64_t (**)(CFTypeRef))(v49 + 80))(v25);
      if (*(_DWORD *)(v49 + 280) == 1)
        goto LABEL_85;
      if (v50
        && (v52 = v51) != 0
        && (Type = FigPlaybackItemSegmentGetType(v50), Type == FigPlaybackItemSegmentGetType(v52)))
      {
        memset(&range, 0, sizeof(range));
        FigPlaybackItemSegmentGetTimeMapping(v50, (uint64_t)&range);
        memset(&time, 0, sizeof(time));
        FigPlaybackItemSegmentGetTimeMapping(v52, (uint64_t)&time);
        lhs = range.source;
        target = range.target;
        duration = time.source;
        v88 = time.target;
        *(_OWORD *)&v84.start.value = *(_OWORD *)&range.source.start.value;
        v84.start.epoch = range.source.start.epoch;
        start = time.source.start;
        if (CMTimeCompare(&v84.start, &start))
          goto LABEL_82;
        v84.start = lhs.duration;
        start = duration.duration;
        if (CMTimeCompare(&v84.start, &start))
          goto LABEL_82;
        *(_OWORD *)&v84.start.value = *(_OWORD *)&target.start.value;
        v84.start.epoch = target.start.epoch;
        start = v88.start;
        if (CMTimeCompare(&v84.start, &start))
          goto LABEL_82;
        v84.start = target.duration;
        start = v88.duration;
        if (CMTimeCompare(&v84.start, &start))
          goto LABEL_82;
        if (FigPlaybackItemSegmentGetType(v50) == 1)
        {
          v56 = *(_QWORD *)(v49 + 16);
          v68 = FigPlaybackItemSegmentGetInterstitialEvent(v50);
          v57 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
          if (v57)
            v57(v56, v68);
          v59 = *(_QWORD *)(v49 + 16);
          v66 = FigPlaybackItemSegmentGetInterstitialEvent(v52);
          v60 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
          if (v60)
            v60(v59, v66);
          if (!FigCFEqual())
          {
LABEL_82:
            v54 = 1;
LABEL_83:
            *(_DWORD *)(v49 + 280) = v54;
            goto LABEL_85;
          }
        }
        if (!*(_DWORD *)(v49 + 280))
        {
          FigPlaybackItemSegmentGetLoadedTimeRanges(v50);
          FigPlaybackItemSegmentGetLoadedTimeRanges(v52);
          if (!FigCFEqual())
          {
            v54 = 3;
            goto LABEL_83;
          }
        }
      }
      else
      {
        *(_DWORD *)(v49 + 280) = 1;
      }
LABEL_85:
      time.source.start.value = v98;
      *(_QWORD *)&time.source.start.timescale = __PAIR64__(v75, v99);
      time.source.start.epoch = v76;
      lhs.start = v81;
      CMTimeAdd(&range.source.start, &time.source.start, &lhs.start);
      v98 = range.source.start.value;
      v75 = range.source.start.flags;
      v99 = range.source.start.timescale;
      v76 = range.source.start.epoch;
      CFArrayAppendValue(theArray, v25);
      ++v74;
      CFRelease(v25);
      a1 = v72;
      DerivedStorage = v73;
      Count = v70;
    }
    else
    {
      v14 = 0;
LABEL_16:
      if (fiit_isEventResolvedTimeInSeekableTimeRange(a1, ValueAtIndex, v14))
        goto LABEL_17;
LABEL_19:
      ++v8;
    }
  }
  v61 = *(const void **)(DerivedStorage + 48);
  v62 = theArray;
  *(_QWORD *)(DerivedStorage + 48) = theArray;
  if (theArray)
    CFRetain(theArray);
  if (v61)
    CFRelease(v61);
  v63 = (_OWORD *)(DerivedStorage + 192);
  if (*(_BYTE *)(DerivedStorage + 184))
  {
    v64 = MEMORY[0x1E0CA2E10];
    *v63 = *MEMORY[0x1E0CA2E10];
    v65 = *(_QWORD *)(v64 + 16);
  }
  else
  {
    time.source.start.value = v98;
    *(_QWORD *)&time.source.start.timescale = __PAIR64__(v75, v99);
    time.source.start.epoch = v76;
    *(_OWORD *)&lhs.start.value = *(_OWORD *)v5;
    lhs.start.epoch = *(_QWORD *)(v5 + 16);
    CMTimeSubtract(&range.source.start, &time.source.start, &lhs.start);
    *v63 = *(_OWORD *)&range.source.start.value;
    v65 = range.source.start.epoch;
  }
  *(_QWORD *)(DerivedStorage + 208) = v65;
  fiit_updateCurrentSegmentWrapper(a1, 1);
  if (theArray)
    goto LABEL_116;
}

uint64_t fiit_unlockAndPostSnapshotOutOfSyncNotification(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const __CFAllocator *v6;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v8;
  __CFString *v9;
  uint64_t v10;
  CFMutableArrayRef v11;
  __CFArray *v12;
  CFIndex i;
  const __CFArray *Count;
  const void *ValueAtIndex;
  uint64_t v16;
  CFDictionaryRef v17;
  uint64_t FigBaseObject;
  void (*v19)(uint64_t, const __CFString *, __CFArray *);
  uint64_t v20;
  CFMutableDictionaryRef v21;
  CFMutableDictionaryRef v22;
  CFIndex j;
  const __CFArray *v24;
  const void *v25;
  uint64_t v26;
  uint64_t InterstitialEvent;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  CFTypeRef *v31;
  uint64_t v32;
  void (*v33)(uint64_t, const __CFString *, CFMutableDictionaryRef);
  CMTimeMapping mapping;
  CMTimeMapping v36;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 280))
  {
    v3 = CMBaseObjectGetDerivedStorage();
    if (!*(_BYTE *)(v3 + 187))
    {
      v4 = v3;
      v5 = *(_DWORD *)(v3 + 280);
      v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!Mutable)
      {
        FigSignalErrorAt();
        return MEMORY[0x19402EA24](*(_QWORD *)DerivedStorage);
      }
      v8 = Mutable;
      FigCFDictionarySetInt32();
      if (v5 == 3)
        goto LABEL_37;
      v9 = fiit_CopyDebugDescription((uint64_t)a1);
      if (v9)
        CFRelease(v9);
      v10 = CMBaseObjectGetDerivedStorage();
      v11 = CFArrayCreateMutable(v6, 0, MEMORY[0x1E0C9B378]);
      if (v11)
      {
        v12 = v11;
        for (i = 0; ; ++i)
        {
          Count = *(const __CFArray **)(v10 + 48);
          if (Count)
            Count = (const __CFArray *)CFArrayGetCount(Count);
          if (i >= (uint64_t)Count)
            break;
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v10 + 48), i);
          v16 = (*(uint64_t (**)(const void *))(v10 + 80))(ValueAtIndex);
          if (!FigPlaybackItemSegmentGetType(v16))
          {
            memset(&v36, 0, sizeof(v36));
            FigPlaybackItemSegmentGetTimeMapping(v16, (uint64_t)&v36);
            mapping = v36;
            v17 = CMTimeMappingCopyAsDictionary(&mapping, v6);
            CFArrayAppendValue(v12, v17);
            if (v17)
              CFRelease(v17);
          }
        }
        FigBaseObject = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(v10 + 8));
        v19 = *(void (**)(uint64_t, const __CFString *, __CFArray *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 56);
        if (v19)
          v19(FigBaseObject, CFSTR("IntegratedTimelineTimeOffsets"), v12);
        CFRelease(v12);
      }
      else
      {
        FigSignalErrorAt();
      }
      v20 = CMBaseObjectGetDerivedStorage();
      v21 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v22 = v21;
      if (*(_QWORD *)(v20 + 16))
      {
        if (!v21)
        {
          FigSignalErrorAt();
LABEL_36:
          FigCFDictionarySetBoolean();
LABEL_37:
          fiit_postNotification(v4, (uint64_t)CFSTR("fiitSnapshotsOutOfSync"), a1, v8);
          *(_DWORD *)(v4 + 280) = 0;
          *(_BYTE *)(v4 + 188) = 0;
          CFRelease(v8);
          return MEMORY[0x19402EA24](*(_QWORD *)DerivedStorage);
        }
        for (j = 0; ; ++j)
        {
          v24 = *(const __CFArray **)(v20 + 48);
          if (v24)
            v24 = (const __CFArray *)CFArrayGetCount(v24);
          if (j >= (uint64_t)v24)
            break;
          v25 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v20 + 48), j);
          v26 = (*(uint64_t (**)(const void *))(v20 + 80))(v25);
          if (FigPlaybackItemSegmentGetType(v26) == 1)
          {
            InterstitialEvent = FigPlaybackItemSegmentGetInterstitialEvent(v26);
            v28 = *(_QWORD *)(v20 + 16);
            v29 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
            v30 = v29 ? v29(v28, InterstitialEvent) : 0;
            v31 = FigPlayerInterstitialEventCopyIdentifier(v30);
            memset(&v36, 0, sizeof(v36));
            FigPlaybackItemSegmentGetTimeMapping(v26, (uint64_t)&v36);
            if (v31)
            {
              *(_OWORD *)&mapping.source.start.value = *(_OWORD *)&v36.target.start.value;
              mapping.source.start.epoch = v36.target.start.epoch;
              FigCFDictionarySetCMTime();
              CFRelease(v31);
            }
          }
        }
        v32 = *(_QWORD *)(v20 + 16);
        v33 = *(void (**)(uint64_t, const __CFString *, CFMutableDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 56);
        if (v33)
          v33(v32, CFSTR("fpicProperty_InterstitialEventIntegratedStartTimes"), v22);
      }
      if (v22)
        CFRelease(v22);
      goto LABEL_36;
    }
  }
  return MEMORY[0x19402EA24](*(_QWORD *)DerivedStorage);
}

uint64_t fiit_finalize(const void *a1)
{
  _QWORD *DerivedStorage;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  NSObject *v7;
  const void *v8;
  const void *v9;
  const void *v10;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  v3 = (const void *)DerivedStorage[1];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[1] = 0;
  }
  fiit_setCoordinator(a1, 0);
  v4 = (const void *)DerivedStorage[3];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[3] = 0;
  }
  v5 = (const void *)DerivedStorage[6];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[6] = 0;
  }
  v6 = (const void *)DerivedStorage[4];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[4] = 0;
  }
  v7 = DerivedStorage[7];
  if (v7)
  {
    dispatch_release(v7);
    DerivedStorage[7] = 0;
  }
  v8 = (const void *)DerivedStorage[17];
  if (v8)
  {
    CFRelease(v8);
    DerivedStorage[17] = 0;
  }
  v9 = (const void *)DerivedStorage[5];
  if (v9)
  {
    CFRelease(v9);
    DerivedStorage[5] = 0;
  }
  v10 = (const void *)DerivedStorage[28];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[28] = 0;
  }
  return FigSimpleMutexDestroy();
}

__CFString *fiit_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;
  __CFString *v4;
  CFIndex i;
  const __CFArray *Count;
  const void *ValueAtIndex;
  const __CFString *v8;
  Float64 Seconds;
  CMTime time;
  CMTime v12;
  CFDateRef v13;

  v13 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v12, 0, sizeof(v12));
  fiit_currentTime(a1, &v13, (uint64_t)&v12);
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v4 = Mutable;
  if (Mutable)
  {
    CFStringAppendFormat(Mutable, 0, CFSTR("\n[%p]:\n"), a1);
    for (i = 0; ; ++i)
    {
      Count = *(const __CFArray **)(DerivedStorage + 48);
      if (Count)
        Count = (const __CFArray *)CFArrayGetCount(Count);
      if (i >= (uint64_t)Count)
        break;
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 48), i);
      if (ValueAtIndex == *(const void **)(DerivedStorage + 40))
        v8 = CFSTR("*");
      else
        v8 = &stru_1E2FD85F8;
      CFStringAppendFormat(v4, 0, CFSTR("%@%@\n"), v8, ValueAtIndex);
    }
    time = v12;
    Seconds = CMTimeGetSeconds(&time);
    CFStringAppendFormat(v4, 0, CFSTR("Current Time:%.3f\nCurrent Date:%@\n"), *(_QWORD *)&Seconds, v13);
  }
  if (v13)
    CFRelease(v13);
  return v4;
}

uint64_t fiit_SetProperty(const void *a1, uint64_t a2, const void *a3)
{
  _QWORD *DerivedStorage;
  CFTypeID v6;
  uint64_t v7;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (FigCFEqual()
    && a3
    && (v6 = CFGetTypeID(a3), FigPlayerInterstitialCoordinatorGetClassID(), v6 == CMBaseClassGetCFTypeID()))
  {
    fiit_setCoordinator(a1, a3);
    v7 = 0;
  }
  else
  {
    v7 = FigSignalErrorAt();
  }
  fiit_unlockAndPostSnapshotOutOfSyncNotification(a1);
  return v7;
}

void fiit_setCoordinator(const void *a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v5;
  uint64_t v6;
  const void *v7;
  const void *v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(const void **)(DerivedStorage + 16);
  if (v5 != a2)
  {
    v6 = DerivedStorage;
    if (v5)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      v7 = *(const void **)(v6 + 16);
    }
    else
    {
      v7 = 0;
    }
    *(_QWORD *)(v6 + 16) = a2;
    if (a2)
      CFRetain(a2);
    if (v7)
      CFRelease(v7);
    v8 = *(const void **)(v6 + 24);
    if (v8)
    {
      CFRelease(v8);
      *(_QWORD *)(v6 + 24) = 0;
    }
    if (a2)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
    }
    fiit_rebuildEventList(a1, 0);
  }
}

uint64_t fiit_primaryItemSeekableTimeRangeChange(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *Value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)DerivedStorage);
  Value = (const void *)FigCFDictionaryGetValue();
  if (!*(_BYTE *)(DerivedStorage + 185))
    fiit_checkAndUpdateIfPrimaryIsReadyForInspection((uint64_t)a2);
  if (fiit_updatePrimaryItemSeekableTimeRange((int)a2, Value))
  {
    fiit_updatePrimaryItemStartMoment();
    fiit_updatePrimarySeekableTimeRangeForCurrentEvent((uint64_t)a2);
    fiit_rebuildSegmentList((uint64_t)a2);
  }
  return fiit_unlockAndPostSnapshotOutOfSyncNotification(a2);
}

uint64_t fiit_primaryItemPlayableRangeChange(uint64_t a1, const void *a2)
{
  _QWORD *DerivedStorage;
  const void *Value;
  uint64_t v5;
  const void *v6;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  Value = (const void *)FigCFDictionaryGetValue();
  v5 = CMBaseObjectGetDerivedStorage();
  if (!FigCFEqual())
  {
    v6 = *(const void **)(v5 + 136);
    *(_QWORD *)(v5 + 136) = Value;
    if (Value)
      CFRetain(Value);
    if (v6)
      CFRelease(v6);
    fiit_rebuildSegmentList((uint64_t)a2);
  }
  return fiit_unlockAndPostSnapshotOutOfSyncNotification(a2);
}

uint64_t fiit_primaryItemSeekDidFinish(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  int v4;
  int v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = FigCFEqual();
  FigCFDictionaryGetInt32IfPresent();
  MEMORY[0x19402EA0C](*(_QWORD *)DerivedStorage);
  if (!*(_DWORD *)(DerivedStorage + 220))
  {
    if (v4)
      v5 = 3;
    else
      v5 = 2;
    *(_DWORD *)(DerivedStorage + 216) = v5;
    fiit_checkAndPostIfSeekCompletedAllSteps(a2);
  }
  fiit_updatePrimarySeekableTimeRangeForCurrentEvent((uint64_t)a2);
  fiit_updateCurrentSegmentWrapper((uint64_t)a2, 0);
  return fiit_unlockAndPostSnapshotOutOfSyncNotification(a2);
}

void fiit_updatePrimarySeekableTimeRangeForCurrentEvent(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t i;
  const __CFArray *Count;
  uint64_t ValueAtIndex;
  CFTypeRef *v7;
  uint64_t v8;
  void (*v9)(uint64_t, CMTime *);
  CMTimeEpoch epoch;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  CMTime end;
  CMTimeRange v18;
  CMTime rhs;
  CMTime lhs;
  CMTime start;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 184))
  {
    v3 = DerivedStorage;
    if (*(_QWORD *)(DerivedStorage + 32))
    {
      for (i = 0; ; ++i)
      {
        Count = *(const __CFArray **)(v3 + 24);
        if (Count)
          Count = (const __CFArray *)CFArrayGetCount(Count);
        if (i >= (uint64_t)Count)
          break;
        ValueAtIndex = FigCFArrayGetValueAtIndex();
        v7 = FigPlayerInterstitialEventCopyIdentifier(ValueAtIndex);
        if (FigCFEqual() && !fiit_isEventResolvedTimeInSeekableTimeRange(a1, ValueAtIndex, 0))
        {
          FigPlayerInterstitialEventGetResolvedStartTime(ValueAtIndex, (uint64_t)&end);
          start = *(CMTime *)(v3 + 88);
          CMTimeRangeFromTimeToTime(&v18, &start, &end);
          v16 = *(_OWORD *)&v18.start.epoch;
          *(_OWORD *)(v3 + 88) = *(_OWORD *)&v18.start.value;
          *(_OWORD *)(v3 + 104) = v16;
          *(_OWORD *)(v3 + 120) = *(_OWORD *)&v18.duration.timescale;
          fiit_rebuildSegmentList(a1);
          if (v7)
            CFRelease(v7);
          return;
        }
        if (v7)
          CFRelease(v7);
      }
    }
    else
    {
      start = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E10];
      v8 = *(_QWORD *)(DerivedStorage + 8);
      v9 = *(void (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (v9)
        v9(v8, &start);
      lhs = start;
      *(_OWORD *)&rhs.value = kSeekableTimeRangeFudge;
      rhs.epoch = 0;
      CMTimeAdd(&v18.start, &lhs, &rhs);
      epoch = v18.start.epoch;
      start = v18.start;
      v11 = *(_OWORD *)&v18.start.value;
      v12 = *(_OWORD *)(v3 + 104);
      *(_OWORD *)&v18.start.value = *(_OWORD *)(v3 + 88);
      *(_OWORD *)&v18.start.epoch = v12;
      *(_OWORD *)&v18.duration.timescale = *(_OWORD *)(v3 + 120);
      *(_OWORD *)&lhs.value = v11;
      lhs.epoch = epoch;
      if (!CMTimeRangeContainsTime(&v18, &lhs))
      {
        v14 = *(_OWORD *)(v3 + 88);
        v13 = v3 + 88;
        *(_OWORD *)&lhs.value = v14;
        lhs.epoch = *(_QWORD *)(v13 + 16);
        rhs = start;
        CMTimeRangeFromTimeToTime(&v18, &lhs, &rhs);
        v15 = *(_OWORD *)&v18.start.epoch;
        *(_OWORD *)v13 = *(_OWORD *)&v18.start.value;
        *(_OWORD *)(v13 + 16) = v15;
        *(_OWORD *)(v13 + 32) = *(_OWORD *)&v18.duration.timescale;
        fiit_rebuildSegmentList(a1);
      }
    }
  }
}

BOOL fiit_isEventResolvedTimeInSeekableTimeRange(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t DerivedStorage;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  CMTime v10;
  CMTime lhs;
  CMTime v12;
  CMTime v13;
  CMTimeRange range;
  CMTime start;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&start, 0, sizeof(start));
  v6 = *(_OWORD *)(DerivedStorage + 104);
  *(_OWORD *)&range.start.value = *(_OWORD *)(DerivedStorage + 88);
  *(_OWORD *)&range.start.epoch = v6;
  *(_OWORD *)&range.duration.timescale = *(_OWORD *)(DerivedStorage + 120);
  CMTimeRangeGetEnd(&start, &range);
  v13 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v12 = v13;
  if (!a2)
    return 0;
  v7 = DerivedStorage + 88;
  FigPlayerInterstitialEventGetResolvedStartTime(a2, (uint64_t)&v13);
  FigPlayerInterstitialEventGetResolvedEndTime(a2, (uint64_t)&v12);
  if (a3)
  {
    lhs = start;
    *(_OWORD *)&v10.value = kSeekableTimeRangeEndSlop;
    v10.epoch = 0;
    CMTimeAdd(&range.start, &lhs, &v10);
    start = range.start;
  }
  range.start = v13;
  lhs = *(CMTime *)v7;
  if ((CMTimeCompare(&range.start, &lhs) & 0x80000000) == 0)
  {
    range.start = v13;
    lhs = start;
    if (CMTimeCompare(&range.start, &lhs) < 1)
      return 1;
  }
  v8 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)&range.start.value = *(_OWORD *)v7;
  *(_OWORD *)&range.start.epoch = v8;
  *(_OWORD *)&range.duration.timescale = *(_OWORD *)(v7 + 32);
  lhs = v12;
  return CMTimeRangeContainsTime(&range, &lhs) != 0;
}

void fiit_checkAndPostIfSeekCompletedAllSteps(const void *a1)
{
  uint64_t DerivedStorage;
  int v3;
  uint64_t v4;
  int v5;
  _BOOL4 v6;
  CFTypeRef *v7;
  uint64_t v8;
  uint64_t InterstitialEvent;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(_DWORD *)(DerivedStorage + 220);
  if (v3)
  {
    v4 = DerivedStorage;
    v5 = *(_DWORD *)(DerivedStorage + 216);
    if (v5 == 3)
    {
      v8 = (*(uint64_t (**)(_QWORD))(DerivedStorage + 80))(*(_QWORD *)(DerivedStorage + 224));
      if (FigPlaybackItemSegmentGetType(v8) == 1)
      {
        InterstitialEvent = FigPlaybackItemSegmentGetInterstitialEvent(v8);
        v10 = *(_QWORD *)(v4 + 16);
        v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
        if (v11)
          v12 = v11(v10, InterstitialEvent);
        else
          v12 = 0;
        v7 = FigPlayerInterstitialEventCopyIdentifier(v12);
      }
      else
      {
        v7 = 0;
      }
      if (!FigCFEqual())
        goto LABEL_14;
      v3 = *(_DWORD *)(v4 + 220);
      v6 = *(_DWORD *)(v4 + 216) == 3;
    }
    else
    {
      if (v5 != 2)
        return;
      v6 = 0;
      v7 = 0;
    }
    fiit_postIntegratedTimelineSeekDidFinishNotification(a1, v3, v6);
LABEL_14:
    if (v7)
      CFRelease(v7);
  }
}

void fiit_updateCurrentSegmentWrapper(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  const void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t InterstitialEvent;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFIndex i;
  const __CFArray *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  CFTypeRef *v24;
  char v25;
  uint64_t v26;
  void (*v27)(uint64_t, __int128 *);
  uint64_t v28;
  CFIndex v29;
  __int128 *v30;
  const __CFArray *Count;
  const void *ValueAtIndex;
  uint64_t v33;
  CMTimeEpoch v34;
  const void *v35;
  __int128 v36;
  CMTime v37;
  CMTimeRange v38;
  CMTimeRange range;
  __int128 v40;
  CMTimeEpoch v41;
  CMTime time2;
  _BYTE time[32];
  __int128 v44;
  CMTime v45;
  _BYTE v46[32];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  CMTime v51;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(const void **)(DerivedStorage + 32);
  if (v5)
    v6 = CFRetain(v5);
  else
    v6 = 0;
  v7 = (*(uint64_t (**)(_QWORD))(DerivedStorage + 80))(*(_QWORD *)(DerivedStorage + 40));
  v8 = v7;
  if (*(_DWORD *)(DerivedStorage + 220))
    v9 = v7 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    if (!FigPlaybackItemSegmentGetType(v7))
    {
      if (v6)
        CFRelease(v6);
      a2 = 1;
      goto LABEL_31;
    }
    InterstitialEvent = FigPlaybackItemSegmentGetInterstitialEvent(v8);
    v11 = *(_QWORD *)(DerivedStorage + 16);
    v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
    if (v12)
    {
      v13 = v12(v11, InterstitialEvent);
      if (!v6)
      {
LABEL_12:
        v6 = FigPlayerInterstitialEventCopyIdentifier(v13);
        a2 = 1;
        goto LABEL_13;
      }
    }
    else
    {
      v13 = 0;
      if (!v6)
        goto LABEL_12;
    }
    CFRelease(v6);
    goto LABEL_12;
  }
LABEL_13:
  if (!v6)
  {
LABEL_31:
    v40 = *MEMORY[0x1E0CA2E10];
    v41 = *(_QWORD *)(MEMORY[0x1E0CA2E10] + 16);
    v26 = *(_QWORD *)(DerivedStorage + 8);
    v27 = *(void (**)(uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v27)
      v27(v26, &v40);
    if (v8 && a2)
    {
      FigPlaybackItemSegmentGetTimeMapping(v8, (uint64_t)&v38);
      range = v38;
      *(_OWORD *)time = v40;
      *(_QWORD *)&time[16] = v41;
      CMTimeClampToRange((CMTime *)v46, (CMTime *)time, &range);
      v40 = *(_OWORD *)v46;
      v41 = *(_QWORD *)&v46[16];
    }
    *(_OWORD *)&v37.value = v40;
    v37.epoch = v41;
    v51 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    v28 = CMBaseObjectGetDerivedStorage();
    v29 = 0;
    v18 = 0;
    v30 = (__int128 *)MEMORY[0x1E0CA2E68];
    while (1)
    {
      Count = *(const __CFArray **)(v28 + 48);
      if (Count)
        Count = (const __CFArray *)CFArrayGetCount(Count);
      if (v29 >= (uint64_t)Count)
        break;
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v28 + 48), v29);
      v33 = (*(uint64_t (**)(void))(v28 + 80))();
      if (!FigPlaybackItemSegmentGetType(v33))
      {
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        memset(v46, 0, sizeof(v46));
        FigPlaybackItemSegmentGetTimeMapping(v33, (uint64_t)v46);
        memset(&v45, 0, sizeof(v45));
        *(_OWORD *)time = *(_OWORD *)v46;
        *(_OWORD *)&time[16] = *(_OWORD *)&v46[16];
        v44 = v47;
        time2 = v37;
        fiit_distanceFromRange((uint64_t)time, &time2, (uint64_t)&v45);
        *(CMTime *)time = v45;
        time2 = v51;
        if (CMTimeCompare((CMTime *)time, &time2) <= 0)
        {
          v51 = v45;
          v18 = ValueAtIndex;
        }
        *(CMTime *)time = v45;
        v36 = *v30;
        *(_OWORD *)&time2.value = *v30;
        v34 = *((_QWORD *)v30 + 2);
        time2.epoch = v34;
        if (CMTimeCompare((CMTime *)time, &time2))
        {
          *(CMTime *)time = v51;
          *(_OWORD *)&time2.value = v36;
          time2.epoch = v34;
          if (!CMTimeCompare((CMTime *)time, &time2))
            break;
        }
      }
      ++v29;
    }
    v6 = 0;
    v25 = 1;
    goto LABEL_50;
  }
  v14 = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(v14 + 16))
  {
    v15 = v14;
    for (i = 0; ; ++i)
    {
      v17 = *(const __CFArray **)(v15 + 48);
      if (v17)
        v17 = (const __CFArray *)CFArrayGetCount(v17);
      if (i >= (uint64_t)v17)
        break;
      v18 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v15 + 48), i);
      v19 = (*(uint64_t (**)(void))(v15 + 80))();
      if (FigPlaybackItemSegmentGetType(v19) == 1)
      {
        v20 = FigPlaybackItemSegmentGetInterstitialEvent(v19);
        v21 = *(_QWORD *)(v15 + 16);
        v22 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
        if (v22)
          v23 = v22(v21, v20);
        else
          v23 = 0;
        v24 = FigPlayerInterstitialEventCopyIdentifier(v23);
        if (FigCFEqual())
        {
          if (v24)
            CFRelease(v24);
          v25 = 0;
          goto LABEL_50;
        }
        if (v24)
          CFRelease(v24);
      }
    }
  }
  v25 = 0;
  v18 = 0;
LABEL_50:
  if (fiit_AreSegmentWrappersDifferent(a1, *(_QWORD *)(DerivedStorage + 40), (uint64_t)v18))
  {
    if (*(_DWORD *)(DerivedStorage + 280) != 1)
      *(_DWORD *)(DerivedStorage + 280) = 2;
    *(_BYTE *)(DerivedStorage + 188) = 1;
  }
  v35 = *(const void **)(DerivedStorage + 40);
  *(_QWORD *)(DerivedStorage + 40) = v18;
  if (v18)
    CFRetain(v18);
  if (v35)
    CFRelease(v35);
  if ((v25 & 1) == 0)
    CFRelease(v6);
}

uint64_t fiit_postIntegratedTimelineSeekDidFinishNotification(const void *a1, int a2, int a3)
{
  uint64_t DerivedStorage;
  const __CFString *v7;
  uint64_t v8;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __int128 *v12;
  __int128 v13;
  uint64_t v14;
  const void *v15;
  __int128 v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3)
    v7 = CFSTR("fiitSeekDidComplete");
  else
    v7 = CFSTR("fiitSeekWasCanceled");
  if (!a2)
    return 0;
  v8 = DerivedStorage;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v10 = Mutable;
    FigCFDictionarySetInt32();
    if (dword_1EE2A3560)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    fiit_postNotification(v8, (uint64_t)v7, a1, v10);
    v12 = (__int128 *)MEMORY[0x1E0CA2E18];
    *(_QWORD *)(v8 + 216) = 0;
    v13 = *v12;
    *(_OWORD *)(v8 + 232) = *v12;
    v14 = *((_QWORD *)v12 + 2);
    *(_QWORD *)(v8 + 248) = v14;
    v15 = *(const void **)(v8 + 224);
    if (v15)
    {
      v17 = v13;
      CFRelease(v15);
      v13 = v17;
      *(_QWORD *)(v8 + 224) = 0;
    }
    *(_OWORD *)(v8 + 256) = v13;
    *(_QWORD *)(v8 + 272) = v14;
    CFRelease(v10);
    return 0;
  }
  return FigSignalErrorAt();
}

void fiit_postNotification(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  CFTypeRef v10;
  CFTypeRef v11;

  v8 = malloc_type_malloc(0x18uLL, 0xE004074F98F5AuLL);
  if (v8)
  {
    v9 = v8;
    *v8 = a2;
    if (a3)
      v10 = CFRetain(a3);
    else
      v10 = 0;
    v9[1] = v10;
    if (a4)
      v11 = CFRetain(a4);
    else
      v11 = 0;
    v9[2] = v11;
    dispatch_async_f(*(dispatch_queue_t *)(a1 + 56), v9, (dispatch_function_t)fiit_postNotificationFromDispatch);
  }
  else
  {
    FigSignalErrorAt();
  }
}

void fiit_postNotificationFromDispatch(_QWORD *a1)
{
  const void *v2;
  const void *v3;

  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[2];
  if (v3)
    CFRelease(v3);
  free(a1);
}

BOOL fiit_AreSegmentWrappersDifferent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int Type;
  uint64_t v12;
  uint64_t InterstitialEvent;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  CFTypeRef *v21;
  CFTypeRef *v22;
  CMTimeRange v23;
  CMTimeRange range;
  CMTimeRange v25;
  CMTimeRange v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  CMTimeRange v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
    return 0;
  v7 = (*(uint64_t (**)(uint64_t))(DerivedStorage + 80))(a2);
  v8 = (*(uint64_t (**)(uint64_t))(DerivedStorage + 80))(a3);
  if (v7)
    v9 = v8 == 0;
  else
    v9 = 1;
  if (v9)
    return 1;
  v10 = v8;
  Type = FigPlaybackItemSegmentGetType(v7);
  if (Type != FigPlaybackItemSegmentGetType(v10))
    return 1;
  if (FigPlaybackItemSegmentGetType(v7))
  {
    v12 = *(_QWORD *)(DerivedStorage + 16);
    InterstitialEvent = FigPlaybackItemSegmentGetInterstitialEvent(v7);
    v14 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
    if (v14)
      v15 = v14(v12, InterstitialEvent);
    else
      v15 = 0;
    v17 = *(_QWORD *)(DerivedStorage + 16);
    v18 = FigPlaybackItemSegmentGetInterstitialEvent(v10);
    v19 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
    if (v19)
      v20 = v19(v17, v18);
    else
      v20 = 0;
    v21 = FigPlayerInterstitialEventCopyIdentifier(v15);
    v22 = FigPlayerInterstitialEventCopyIdentifier(v20);
    v6 = FigCFEqual() == 0;
    if (v21)
      CFRelease(v21);
    if (v22)
      CFRelease(v22);
  }
  else
  {
    v32 = 0u;
    v33 = 0u;
    v31 = 0u;
    memset(&v30, 0, sizeof(v30));
    FigPlaybackItemSegmentGetTimeMapping(v7, (uint64_t)&v30);
    v28 = 0u;
    v29 = 0u;
    v27 = 0u;
    memset(&v26, 0, sizeof(v26));
    FigPlaybackItemSegmentGetTimeMapping(v10, (uint64_t)&v26);
    range = v30;
    memset(&v25, 0, sizeof(v25));
    v23 = v26;
    CMTimeRangeGetIntersection(&v25, &range, &v23);
    if ((v25.start.flags & 1) == 0)
      return 0;
    v6 = 0;
    if ((v25.duration.flags & 1) != 0 && !v25.duration.epoch && (v25.duration.value & 0x8000000000000000) == 0)
    {
      range.start = v25.duration;
      *(_OWORD *)&v23.start.value = *MEMORY[0x1E0CA2E68];
      v23.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
      return CMTimeCompare(&range.start, &v23.start) == 0;
    }
  }
  return v6;
}

double fiit_distanceFromRange@<D0>(uint64_t a1@<X0>, CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  double result;
  __int128 v10;
  CMTime *p_rhs;
  __int128 v12;
  CMTime v13;
  CMTime rhs;
  CMTime time;
  CMTimeRange range;

  v6 = MEMORY[0x1E0CA2E68];
  v12 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)a3 = *MEMORY[0x1E0CA2E68];
  v7 = *(_QWORD *)(v6 + 16);
  *(_QWORD *)(a3 + 16) = v7;
  v8 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&range.start.value = *(_OWORD *)a1;
  *(_OWORD *)&range.start.epoch = v8;
  *(_OWORD *)&range.duration.timescale = *(_OWORD *)(a1 + 32);
  time = *a2;
  if (CMTimeRangeContainsTime(&range, &time))
  {
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v7;
  }
  else
  {
    *(_OWORD *)&range.start.value = *(_OWORD *)&a2->value;
    range.start.epoch = a2->epoch;
    time = *(CMTime *)a1;
    if (CMTimeCompare(&range.start, &time) <= 0)
    {
      time = *(CMTime *)a1;
      rhs = *a2;
      p_rhs = &rhs;
    }
    else
    {
      v10 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)&range.start.value = *(_OWORD *)a1;
      *(_OWORD *)&range.start.epoch = v10;
      *(_OWORD *)&range.duration.timescale = *(_OWORD *)(a1 + 32);
      CMTimeRangeGetEnd(&v13, &range);
      time = *a2;
      p_rhs = &v13;
    }
    CMTimeSubtract(&range.start, &time, p_rhs);
    result = *(double *)&range.start.value;
    *(_OWORD *)a3 = *(_OWORD *)&range.start.value;
    *(_QWORD *)(a3 + 16) = range.start.epoch;
  }
  return result;
}

uint64_t fiit_interstitialEventsChanged(uint64_t a1, const void *a2)
{
  _QWORD *DerivedStorage;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  fiit_rebuildEventList(a2, 0);
  return fiit_unlockAndPostSnapshotOutOfSyncNotification(a2);
}

uint64_t fiit_interstitialEventsResolvedChange(uint64_t a1, const void *a2)
{
  _QWORD *DerivedStorage;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  fiit_rebuildEventList(a2, 0);
  return fiit_unlockAndPostSnapshotOutOfSyncNotification(a2);
}

uint64_t fiit_interstitialCurrentEventChanged(uint64_t a1, const void *a2)
{
  _QWORD *DerivedStorage;
  CFTypeRef *StringValue;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  StringValue = (CFTypeRef *)FigCFDictionaryGetStringValue();
  MEMORY[0x19402EA0C](*DerivedStorage);
  fiit_rebuildEventList(a2, StringValue);
  return fiit_unlockAndPostSnapshotOutOfSyncNotification(a2);
}

uint64_t fiit_initiatedSeekIntoCoordinatorDidFinish(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  const __CFArray *v8;
  uint64_t v9;
  CMTime v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = FigCFEqual();
  FigCFDictionaryGetInt32IfPresent();
  MEMORY[0x19402EA0C](*(_QWORD *)DerivedStorage);
  if (!*(_DWORD *)(DerivedStorage + 220))
  {
    if (v4)
    {
      v5 = 3;
LABEL_9:
      *(_DWORD *)(DerivedStorage + 216) = v5;
      fiit_checkAndPostIfSeekCompletedAllSteps(a2);
      fiit_updateCurrentSegmentWrapper((uint64_t)a2, 0);
      return fiit_unlockAndPostSnapshotOutOfSyncNotification(a2);
    }
    v13 = *MEMORY[0x1E0CA2E18];
    v14 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    v12 = 0;
    v6 = CMBaseObjectGetDerivedStorage();
    if (!*(_DWORD *)(v6 + 220)
      || (v7 = v6,
          fiit_rebuildEventList(a2, 0),
          v8 = *(const __CFArray **)(v7 + 48),
          v11 = *(CMTime *)(v7 + 232),
          fiit_mapTimeToSegmentAndOffset((uint64_t)a2, &v11, v8, &v12, (uint64_t)&v13))
      || !fiit_AreSegmentWrappersDifferent((uint64_t)a2, *(_QWORD *)(v7 + 224), v12)
      || (v9 = *(unsigned int *)(v7 + 220),
          v11 = *(CMTime *)(v7 + 232),
          fiit_SeekToTimeWithOptions(a2, v9, (__int128 *)&v11.value, MEMORY[0x1E0CA2E68], MEMORY[0x1E0CA2E68], 0)))
    {
      v5 = 2;
      goto LABEL_9;
    }
  }
  return fiit_unlockAndPostSnapshotOutOfSyncNotification(a2);
}

void fiit_rebuildEventList(const void *a1, CFTypeRef *a2)
{
  char *DerivedStorage;
  char *v5;
  const void *Mutable;
  uint64_t v7;
  void (*v8)(const void *, uint64_t, char *, CFArrayRef *);
  uint64_t Count;
  const __CFArray *v10;
  const void *v11;
  int v12;
  const void *v13;
  uint64_t v14;
  uint64_t i;
  uint64_t ValueAtIndex;
  uint64_t v17;
  uint64_t SeedValue;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  CFTypeRef *v23;
  uint64_t (*v24)(uint64_t);
  const void *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, const void *);
  uint64_t v28;
  CFTypeRef *v29;
  CFTypeRef *v30;
  const void *v31;
  CFArrayRef theArray[23];

  theArray[21] = *(CFArrayRef *)MEMORY[0x1E0C80C00];
  theArray[0] = 0;
  DerivedStorage = (char *)CMBaseObjectGetDerivedStorage();
  v5 = DerivedStorage;
  Mutable = (const void *)*((_QWORD *)DerivedStorage + 2);
  if (Mutable)
  {
    v7 = *((_QWORD *)DerivedStorage + 1);
    v8 = *(void (**)(const void *, uint64_t, char *, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 80);
    if (v8 && (v8(Mutable, v7, v5 + 186, theArray), theArray[0]))
      Count = CFArrayGetCount(theArray[0]);
    else
      Count = 0;
    v10 = (const __CFArray *)*((_QWORD *)v5 + 3);
    if (v10)
      v10 = (const __CFArray *)CFArrayGetCount(v10);
    if ((const __CFArray *)Count == v10)
    {
      v11 = (const void *)*((_QWORD *)v5 + 3);
      if (v11)
        Mutable = CFRetain(v11);
      else
        Mutable = 0;
      if (Count < 1)
      {
        v12 = 0;
      }
      else
      {
        v12 = 0;
        for (i = 0; i != Count; ++i)
        {
          ValueAtIndex = FigCFArrayGetValueAtIndex();
          v17 = FigCFArrayGetValueAtIndex();
          if (FigCFEqual())
          {
            SeedValue = FigPlayerInterstitialEventGetSeedValue(ValueAtIndex);
            if (SeedValue == FigPlayerInterstitialEventGetSeedValue(v17))
              continue;
          }
          fiit_CopyEvent(ValueAtIndex);
        }
      }
    }
    else
    {
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B378]);
      if (Count >= 1)
      {
        v14 = FigCFArrayGetValueAtIndex();
        fiit_CopyEvent(v14);
      }
      v12 = 1;
    }
    v13 = (const void *)*((_QWORD *)v5 + 3);
    *((_QWORD *)v5 + 3) = Mutable;
    if (Mutable)
      CFRetain(Mutable);
  }
  else
  {
    v12 = 0;
    v13 = (const void *)*((_QWORD *)DerivedStorage + 3);
    *((_QWORD *)DerivedStorage + 3) = 0;
  }
  if (v13)
    CFRelease(v13);
  if (v5[187])
  {
    if (v5[186])
    {
      v5[187] = 0;
      if (dword_1EE2A3560)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
  }
  v20 = CMBaseObjectGetDerivedStorage();
  v21 = *(_QWORD *)(v20 + 16);
  if (v21)
  {
    v22 = v20;
    if (a2)
    {
      if (FigCFEqual())
        v23 = 0;
      else
        v23 = a2;
    }
    else
    {
      v24 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v24)
        v25 = (const void *)v24(v21);
      else
        v25 = 0;
      v26 = *(_QWORD *)(v22 + 16);
      v27 = *(uint64_t (**)(uint64_t, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
      if (v27)
        v28 = v27(v26, v25);
      else
        v28 = 0;
      v29 = FigPlayerInterstitialEventCopyIdentifier(v28);
      v30 = v29;
      if (v28)
        v23 = v29;
      else
        v23 = 0;
      if (v25)
        CFRelease(v25);
      if (v30)
        CFRelease(v30);
    }
    if (!FigCFEqual())
    {
      v31 = *(const void **)(v22 + 32);
      *(_QWORD *)(v22 + 32) = v23;
      if (v23)
        CFRetain(v23);
      if (v31)
        CFRelease(v31);
      fiit_checkAndPostIfSeekCompletedAllSteps(a1);
      fiit_updatePrimarySeekableTimeRangeForCurrentEvent((uint64_t)a1);
      fiit_updateCurrentSegmentWrapper((uint64_t)a1, 0);
    }
  }
  if (v12)
    fiit_rebuildSegmentList((uint64_t)a1);
  if (Mutable)
    CFRelease(Mutable);
  if (theArray[0])
    CFRelease(theArray[0]);
}

uint64_t fiit_mapTimeToSegmentAndOffset(uint64_t a1, CMTime *a2, const __CFArray *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t v11;
  uint64_t ValueAtIndex;
  CFIndex v13;
  CFIndex i;
  uint64_t v15;
  uint64_t FirstValue;
  uint64_t LastValue;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CMTimeEpoch epoch;
  CMTime v23;
  CMTime start;
  CMTimeRange v25[2];
  CMTime time;
  CMTimeRange v27;
  CMTimeRange v28;
  CMTimeRange range;
  CMTimeRange v30;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(v25, 0, sizeof(v25));
  if (!a4 || !a5)
    return FigSignalErrorAt();
  v10 = DerivedStorage;
  v11 = 0;
  ValueAtIndex = 0;
  v13 = 0;
  if (!a3)
    goto LABEL_5;
LABEL_4:
  for (i = CFArrayGetCount(a3); v13 < i; i = 0)
  {
    ValueAtIndex = FigCFArrayGetValueAtIndex();
    v11 = (*(uint64_t (**)(void))(v10 + 80))();
    FigPlaybackItemSegmentGetTimeMapping(v11, (uint64_t)v25);
    if ((~a2->flags & 5) != 0)
    {
      range = v25[1];
      time = *a2;
      if (CMTimeRangeContainsTime(&range, &time))
        goto LABEL_19;
    }
    else if (!FigPlaybackItemSegmentGetType(v11))
    {
      goto LABEL_19;
    }
    ++v13;
    if (a3)
      goto LABEL_4;
LABEL_5:
    ;
  }
  memset(&start, 0, sizeof(start));
  v23 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v15 = CMBaseObjectGetDerivedStorage();
  if (CFArrayGetCount(a3) >= 1)
  {
    FirstValue = FigCFArrayGetFirstValue();
    LastValue = FigCFArrayGetLastValue();
    v18 = (*(uint64_t (**)(uint64_t))(v15 + 80))(FirstValue);
    v19 = (*(uint64_t (**)(uint64_t))(v15 + 80))(LastValue);
    FigPlaybackItemSegmentGetTimeMapping(v18, (uint64_t)&range);
    start = v30.start;
    FigPlaybackItemSegmentGetTimeMapping(v19, (uint64_t)&time);
    v28 = v27;
    CMTimeRangeGetEnd(&v23, &v28);
  }
  *(_OWORD *)&range.start.value = *(_OWORD *)&a2->value;
  range.start.epoch = a2->epoch;
  time = v23;
  if (CMTimeCompare(&range.start, &time) < 0)
  {
    *(_OWORD *)&range.start.value = *(_OWORD *)&a2->value;
    range.start.epoch = a2->epoch;
    time = start;
    if (CMTimeCompare(&range.start, &time) < 0)
    {
      *a2 = start;
      ValueAtIndex = FigCFArrayGetFirstValue();
      (*(void (**)(void))(v10 + 80))();
      FigPlaybackItemSegmentGetTimeMapping(v11, (uint64_t)&range);
      v25[0] = range;
      v25[1] = v30;
    }
  }
  else
  {
    *a2 = v23;
  }
LABEL_19:
  *a4 = ValueAtIndex;
  if ((~a2->flags & 5) != 0)
  {
    time = *a2;
    *(_OWORD *)&v28.start.value = *(_OWORD *)&v25[1].start.value;
    v28.start.epoch = v25[1].start.epoch;
    CMTimeSubtract(&range.start, &time, &v28.start);
    *(_OWORD *)a5 = *(_OWORD *)&range.start.value;
    epoch = range.start.epoch;
  }
  else
  {
    v20 = MEMORY[0x1E0CA2E30];
    *(_OWORD *)a5 = *MEMORY[0x1E0CA2E30];
    epoch = *(_QWORD *)(v20 + 16);
  }
  *(_QWORD *)(a5 + 16) = epoch;
  return 0;
}

uint64_t fiit_SeekToTimeWithOptions(const void *a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t DerivedStorage;
  CMTimeEpoch v13;
  int v14;
  uint64_t v15;
  const __CFArray *v16;
  uint64_t v17;
  CFTypeRef v18;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int value;
  unsigned int v21;
  Float64 Seconds;
  uint64_t v23;
  __int128 v24;
  const void *v25;
  CFTypeRef v26;
  NSObject *v27;
  unsigned int v28;
  unsigned int v29;
  Float64 v30;
  Float64 v31;
  Float64 v32;
  Float64 v33;
  int v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t InterstitialEvent;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, _BYTE *, _BYTE *, CMTime *, uint64_t, _QWORD);
  uint64_t v46;
  unsigned int v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  CMTime v55;
  CMTime v56;
  CMTime v57;
  CFTypeRef cf;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  CMTime v65;
  CMTime v66;
  CMTime v67;
  __int128 v68;
  CMTimeEpoch v69;
  CMTime v70;
  CMTime time2;
  CMTime type;
  CMTime v73;
  _BYTE rhs[32];
  _BYTE v75[20];
  __int16 v76;
  Float64 v77;
  __int16 v78;
  Float64 v79;
  __int16 v80;
  int v81;
  _BYTE time[32];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v68 = *MEMORY[0x1E0CA2E18];
  v13 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v69 = v13;
  *(_OWORD *)&v67.value = v68;
  v67.epoch = v13;
  *(_OWORD *)&v66.value = v68;
  v66.epoch = v13;
  v54 = v68;
  *(_OWORD *)&v65.value = v68;
  v65.epoch = v13;
  v52 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 48);
  v53 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 32);
  v61 = v53;
  v62 = v52;
  v50 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 80);
  v51 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 64);
  v63 = v51;
  v64 = v50;
  v48 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 16);
  v49 = *MEMORY[0x1E0CA2E20];
  v59 = *MEMORY[0x1E0CA2E20];
  v60 = v48;
  cf = 0;
  MEMORY[0x19402EA0C](*(_QWORD *)DerivedStorage);
  v14 = *(_DWORD *)(DerivedStorage + 220);
  if (v14 != (_DWORD)a2)
  {
    v15 = fiit_postIntegratedTimelineSeekDidFinishNotification(a1, v14, 0);
    if ((_DWORD)v15)
      goto LABEL_39;
  }
  fiit_ensureSegmentListContainsCurrentTime((uint64_t)a1);
  v16 = *(const __CFArray **)(DerivedStorage + 48);
  *(_OWORD *)time = *a3;
  *(_QWORD *)&time[16] = *((_QWORD *)a3 + 2);
  v15 = fiit_mapTimeToSegmentAndOffset((uint64_t)a1, (CMTime *)time, v16, (uint64_t *)&cf, (uint64_t)&v68);
  if ((_DWORD)v15)
    goto LABEL_39;
  v18 = cf;
  if (!cf && dword_1EE2A3560)
  {
    v46 = a6;
    v47 = a2;
    LODWORD(v73.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    value = v73.value;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type.value))
      v21 = value;
    else
      v21 = value & 0xFFFFFFFE;
    if (v21)
    {
      *(_OWORD *)time = *a3;
      *(_QWORD *)&time[16] = *((_QWORD *)a3 + 2);
      Seconds = CMTimeGetSeconds((CMTime *)time);
      *(_DWORD *)rhs = 136315906;
      *(_QWORD *)&rhs[4] = "fiit_SeekToTimeWithOptions";
      *(_WORD *)&rhs[12] = 2048;
      *(_QWORD *)&rhs[14] = a1;
      *(_WORD *)&rhs[22] = 2048;
      *(Float64 *)&rhs[24] = Seconds;
      *(_WORD *)v75 = 1024;
      *(_DWORD *)&v75[2] = v47;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v18 = cf;
    a2 = v47;
    a6 = v46;
  }
  if (!v18)
    goto LABEL_38;
  v23 = (*(uint64_t (**)(CFTypeRef, uint64_t))(DerivedStorage + 80))(v18, v17);
  FigPlaybackItemSegmentGetTimeMapping(v23, (uint64_t)&v59);
  *(_OWORD *)time = v59;
  *(_QWORD *)&time[16] = v60;
  *(_OWORD *)rhs = v68;
  *(_QWORD *)&rhs[16] = v69;
  CMTimeAdd(&v67, (CMTime *)time, (CMTime *)rhs);
  if (a6)
    FigCFDictionaryGetInt32IfPresent();
  v57 = v67;
  *(_OWORD *)&v56.value = *(_OWORD *)a4;
  v56.epoch = *(_QWORD *)(a4 + 16);
  *(_OWORD *)&v55.value = *(_OWORD *)a5;
  v55.epoch = *(_QWORD *)(a5 + 16);
  *(_OWORD *)&v73.value = v54;
  v73.epoch = v13;
  *(_OWORD *)&type.value = v54;
  type.epoch = v13;
  v83 = v53;
  v84 = v52;
  v85 = v51;
  v86 = v50;
  *(_OWORD *)time = v49;
  *(_OWORD *)&time[16] = v48;
  FigPlaybackItemSegmentGetTimeMapping(v23, (uint64_t)time);
  *(CMTime *)rhs = v57;
  time2 = v56;
  CMTimeSubtract(&v73, (CMTime *)rhs, &time2);
  *(CMTime *)rhs = v57;
  time2 = v55;
  CMTimeAdd(&type, (CMTime *)rhs, &time2);
  *(CMTime *)rhs = v73;
  time2 = *(CMTime *)time;
  if (CMTimeCompare((CMTime *)rhs, &time2) < 0)
    v73 = *(CMTime *)time;
  *(_OWORD *)rhs = *(_OWORD *)time;
  *(_OWORD *)&rhs[16] = *(_OWORD *)&time[16];
  *(_OWORD *)v75 = v83;
  CMTimeRangeGetEnd(&time2, (CMTimeRange *)rhs);
  *(CMTime *)rhs = type;
  if (CMTimeCompare((CMTime *)rhs, &time2) >= 1)
  {
    *(_OWORD *)rhs = *(_OWORD *)time;
    *(_OWORD *)&rhs[16] = *(_OWORD *)&time[16];
    *(_OWORD *)v75 = v83;
    CMTimeRangeGetEnd(&v70, (CMTimeRange *)rhs);
    type = v70;
  }
  v66 = v73;
  v65 = type;
  fiit_currentTime((uint64_t)a1, 0, (uint64_t)time);
  *(_OWORD *)(DerivedStorage + 256) = *(_OWORD *)time;
  *(_QWORD *)(DerivedStorage + 272) = *(_QWORD *)&time[16];
  *(_DWORD *)(DerivedStorage + 216) = 1;
  *(_DWORD *)(DerivedStorage + 220) = a2;
  v24 = *a3;
  *(_QWORD *)(DerivedStorage + 248) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(DerivedStorage + 232) = v24;
  v25 = *(const void **)(DerivedStorage + 224);
  v26 = cf;
  *(_QWORD *)(DerivedStorage + 224) = cf;
  if (v26)
    CFRetain(v26);
  if (v25)
    CFRelease(v25);
  if (dword_1EE2A3560)
  {
    LODWORD(v73.value) = 0;
    LOBYTE(type.value) = 0;
    v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v28 = v73.value;
    if (os_log_type_enabled(v27, type.value))
      v29 = v28;
    else
      v29 = v28 & 0xFFFFFFFE;
    if (v29)
    {
      *(_OWORD *)time = *a3;
      *(_QWORD *)&time[16] = *((_QWORD *)a3 + 2);
      v30 = CMTimeGetSeconds((CMTime *)time);
      *(CMTime *)time = v67;
      v31 = CMTimeGetSeconds((CMTime *)time);
      *(CMTime *)time = v66;
      v32 = CMTimeGetSeconds((CMTime *)time);
      *(CMTime *)time = v65;
      v33 = CMTimeGetSeconds((CMTime *)time);
      *(_DWORD *)rhs = 136316930;
      *(_QWORD *)&rhs[4] = "fiit_SeekToTimeWithOptions";
      *(_WORD *)&rhs[12] = 2048;
      *(_QWORD *)&rhs[14] = a1;
      *(_WORD *)&rhs[22] = 2048;
      *(Float64 *)&rhs[24] = v30;
      *(_WORD *)v75 = 2048;
      *(Float64 *)&v75[2] = v31;
      *(_WORD *)&v75[10] = 2112;
      *(_QWORD *)&v75[12] = v23;
      v76 = 2048;
      v77 = v32;
      v78 = 2048;
      v79 = v33;
      v80 = 1024;
      v81 = a2;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v34 = FigPlaybackItemSegmentGetType(v23);
  if (v34 == 1)
  {
    InterstitialEvent = FigPlaybackItemSegmentGetInterstitialEvent(v23);
    v39 = *(_QWORD *)(DerivedStorage + 16);
    v40 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
    if (v40)
      v41 = v40(v39, InterstitialEvent);
    else
      v41 = 0;
    if (FigPlayerInterstitialEventGetTimelineOccupancy(v41) == 1)
    {
      v43 = *(_QWORD *)(DerivedStorage + 16);
      type = v67;
      if (!v43)
        goto LABEL_46;
      v44 = *(uint64_t (**)(uint64_t, uint64_t, _BYTE *, _BYTE *, CMTime *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
      if (!v44)
        goto LABEL_46;
      *(CMTime *)time = type;
      *(CMTime *)rhs = v66;
      v73 = v65;
      v15 = v44(v43, InterstitialEvent, time, rhs, &v73, a2, 0);
      if ((_DWORD)v15)
        goto LABEL_39;
    }
    v42 = 0;
    goto LABEL_47;
  }
  if (v34)
  {
LABEL_38:
    v15 = FigSignalErrorAt();
    goto LABEL_39;
  }
  v35 = *(_QWORD *)(DerivedStorage + 16);
  if (!v35)
  {
LABEL_35:
    v37 = *(_QWORD *)(DerivedStorage + 8);
    *(CMTime *)time = v67;
    *(CMTime *)rhs = v66;
    v73 = v65;
    v15 = FPSupport_SetCurrentTimeWithRangeIDAndReason(v37, (__int128 *)time, 0, (__int128 *)rhs, (__int128 *)&v73.value);
    goto LABEL_39;
  }
  v36 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 96);
  if (!v36)
  {
LABEL_46:
    v42 = 4294954514;
    goto LABEL_47;
  }
  v15 = v36(v35, a2);
  if (!(_DWORD)v15)
    goto LABEL_35;
LABEL_39:
  v42 = v15;
LABEL_47:
  fiit_unlockAndPostSnapshotOutOfSyncNotification(a1);
  return v42;
}

void fiit_ensureSegmentListContainsCurrentTime(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  int Type;
  const void *LoadedTimeRanges;
  const void *StartDate;
  const void *InterstitialEvent;
  uint64_t v9;
  const void *v10;
  const __CFArray *v11;
  CFIndex Count;
  CMTimeMapping v13;
  _BYTE v14[48];
  CMTime v15;
  CMTime v16;
  CMTimeRange target;
  CMTime v18;
  CMTime start;
  CMTimeRange source;
  CMTimeMapping time2;
  _BYTE v22[48];
  CMTime v23;
  CMTime rhs;
  CMTime v25;
  _BYTE v26[48];
  CMTimeRange v27;
  CMTimeRange range;
  CMTime time1;
  CFTypeRef v30;
  __int128 v31;
  CMTimeEpoch v32;

  v31 = *MEMORY[0x1E0CA2E18];
  v32 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v30 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 184))
  {
    v3 = DerivedStorage;
    fiit_currentTime(a1, 0, (uint64_t)&v31);
    if (FigCFArrayGetLastValue())
    {
      v4 = (*(uint64_t (**)(void))(v3 + 80))();
      FigPlaybackItemSegmentGetTimeMapping(v4, (uint64_t)v26);
      range = v27;
      CMTimeRangeGetEnd(&time1, &range);
      *(_OWORD *)&time2.source.start.value = v31;
      time2.source.start.epoch = v32;
      if (CMTimeCompare(&time1, &time2.source.start) < 0)
      {
        memset(&v25, 0, sizeof(v25));
        FigPlaybackItemSegmentGetTimeMapping(v4, (uint64_t)v22);
        rhs = v23;
        *(_OWORD *)&time2.source.start.value = v31;
        time2.source.start.epoch = v32;
        CMTimeSubtract(&v25, &time2.source.start, &rhs);
        memset(&time2, 0, sizeof(time2));
        FigPlaybackItemSegmentGetTimeMapping(v4, (uint64_t)&v18);
        start = v18;
        v13.source.start = v25;
        CMTimeRangeMake(&source, &start, &v13.source.start);
        FigPlaybackItemSegmentGetTimeMapping(v4, (uint64_t)v14);
        v16 = v15;
        v13.source.start = v25;
        CMTimeRangeMake(&target, &v16, &v13.source.start);
        CMTimeMappingMake(&time2, &source, &target);
        Type = FigPlaybackItemSegmentGetType(v4);
        LoadedTimeRanges = (const void *)FigPlaybackItemSegmentGetLoadedTimeRanges(v4);
        StartDate = (const void *)FigPlaybackItemSegmentGetStartDate(v4);
        InterstitialEvent = (const void *)FigPlaybackItemSegmentGetInterstitialEvent(v4);
        v13 = time2;
        if (!FigPlaybackItemSegmentCreate(Type, (__int128 *)&v13.source.start.value, LoadedTimeRanges, StartDate, InterstitialEvent, &v30))
        {
          v9 = (*(uint64_t (**)(CFTypeRef))(v3 + 72))(v30);
          if (v9)
          {
            v10 = (const void *)v9;
            v11 = *(const __CFArray **)(v3 + 48);
            Count = CFArrayGetCount(v11);
            CFArraySetValueAtIndex(v11, Count - 1, v10);
            fiit_updateCurrentSegmentWrapper(a1, 1);
            CFRelease(v10);
          }
        }
        if (v30)
          CFRelease(v30);
      }
    }
  }
}

void fiit_currentTime(uint64_t a1@<X0>, CFDateRef *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t DerivedStorage;
  uint64_t v8;
  CMTimeEpoch v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t InterstitialEvent;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  CMTimeEpoch v16;
  uint64_t v17;
  void (*v18)(uint64_t, CMTime *);
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const __CFArray *v25;
  CFIndex Count;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  uint64_t ValueAtIndex;
  uint64_t v30;
  int Type;
  uint64_t v32;
  CMTimeEpoch v33;
  CFTypeRef *v34;
  uint64_t v35;
  void (*v36)(CMTimeRange *__return_ptr, uint64_t, CMTime *);
  CMTimeValue value;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  CFTypeRef *v40;
  CMTimeEpoch v41;
  __int128 v42;
  CMTimeRange v43;
  CMTimeRange range;
  CMTime v45;
  CMTime v46;
  CMTime v47;
  CMTime v48;
  CMTimeRange fromRange;
  CMTimeRange v50;
  CMTimeRange toRange;
  CMTimeRange v52;
  CMTimeRange v53;
  CMTime rhs;
  CMTime time;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v6 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)a3 = *MEMORY[0x1E0CA2E68];
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(v6 + 16);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = (*(uint64_t (**)(_QWORD))(DerivedStorage + 80))(*(_QWORD *)(DerivedStorage + 40));
  if (v8)
  {
    if (*(_DWORD *)(DerivedStorage + 220))
    {
      *(_OWORD *)a3 = *(_OWORD *)(DerivedStorage + 256);
      v9 = *(_QWORD *)(DerivedStorage + 272);
    }
    else
    {
      v11 = v8;
      if (FigPlaybackItemSegmentGetType(v8))
      {
        if (FigPlaybackItemSegmentGetType(v11) == 1)
        {
          v48.value = 0;
          memset(&v53, 0, sizeof(v53));
          memset(&v52, 0, sizeof(v52));
          FigPlaybackItemSegmentGetTimeMapping(v11, (uint64_t)&v52);
          v12 = *(_QWORD *)(DerivedStorage + 16);
          if (!v12)
            return;
          InterstitialEvent = FigPlaybackItemSegmentGetInterstitialEvent(v11);
          v14 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
          if (v14)
            v15 = v14(v12, InterstitialEvent);
          else
            v15 = 0;
          v34 = FigPlayerInterstitialEventCopyIdentifier(v15);
          if (FigPlayerInterstitialEventGetTimelineOccupancy(v15) == 1)
          {
            v35 = *(_QWORD *)(DerivedStorage + 16);
            v36 = *(void (**)(CMTimeRange *__return_ptr, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 104);
            if (v36)
            {
              v36(&fromRange, v35, &v48);
              value = v48.value;
            }
            else
            {
              value = 0;
              *(_OWORD *)&fromRange.start.value = *MEMORY[0x1E0CA2E10];
              fromRange.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E10] + 16);
            }
            time.value = fromRange.start.value;
            flags = fromRange.start.flags;
            time.timescale = fromRange.start.timescale;
            epoch = fromRange.start.epoch;
            v40 = FigPlayerInterstitialEventCopyIdentifier(value);
            if (!FigCFEqual() || (flags & 1) == 0)
            {
              FigPlaybackItemSegmentGetTimeMapping(v11, (uint64_t)&v43);
              range = v43;
              CMTimeRangeGetEnd(&fromRange.start, &range);
              time.value = fromRange.start.value;
              flags = fromRange.start.flags;
              time.timescale = fromRange.start.timescale;
              epoch = fromRange.start.epoch;
            }
            toRange.start.value = time.value;
            toRange.start.timescale = time.timescale;
            toRange.start.flags = flags;
            toRange.start.epoch = epoch;
            rhs = v52.start;
            CMTimeSubtract(&fromRange.start, &toRange.start, &rhs);
            *(_OWORD *)a3 = *(_OWORD *)&fromRange.start.value;
            v41 = fromRange.start.epoch;
            *(_QWORD *)(a3 + 16) = fromRange.start.epoch;
            *(_OWORD *)&toRange.start.value = *(_OWORD *)a3;
            toRange.start.epoch = v41;
            rhs = v53.start;
            CMTimeAdd(&fromRange.start, &toRange.start, &rhs);
            *(_OWORD *)a3 = *(_OWORD *)&fromRange.start.value;
            *(_QWORD *)(a3 + 16) = fromRange.start.epoch;
            if (v48.value)
              CFRelease((CFTypeRef)v48.value);
            if (v40)
              CFRelease(v40);
          }
          else
          {
            *(_OWORD *)a3 = *(_OWORD *)&v53.start.value;
            *(_QWORD *)(a3 + 16) = v53.start.epoch;
          }
          if (v34)
            CFRelease(v34);
        }
        goto LABEL_5;
      }
      v42 = *MEMORY[0x1E0CA2E10];
      *(_OWORD *)&v47.value = *MEMORY[0x1E0CA2E10];
      v16 = *(_QWORD *)(MEMORY[0x1E0CA2E10] + 16);
      v47.epoch = v16;
      v17 = *(_QWORD *)(DerivedStorage + 8);
      v18 = *(void (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (v18)
        v18(v17, &v47);
      v45 = v47;
      *(_OWORD *)&v46.value = v42;
      v46.epoch = v16;
      v19 = *MEMORY[0x1E0CA2E18];
      rhs.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      *(_OWORD *)&rhs.value = v19;
      memset(&v53, 0, sizeof(v53));
      memset(&v52, 0, sizeof(v52));
      v20 = CMBaseObjectGetDerivedStorage();
      v21 = (*(uint64_t (**)(_QWORD))(v20 + 80))(*(_QWORD *)(v20 + 40));
      if (v21)
      {
        v22 = v21;
        if (!FigPlaybackItemSegmentGetType(v21))
        {
          FigPlaybackItemSegmentGetTimeMapping(v22, (uint64_t)&v52);
          time = v45;
          fromRange = v52;
          toRange = v53;
          CMTimeMapTimeFromRangeToRange(&v46, &time, &fromRange, &toRange);
          v23 = *(_QWORD *)(v20 + 40);
          v24 = CMBaseObjectGetDerivedStorage();
          v25 = *(const __CFArray **)(v24 + 48);
          if (v25)
            Count = CFArrayGetCount(v25);
          else
            Count = 0;
          v27 = (*(uint64_t (**)(uint64_t))(v24 + 80))(v23);
          if (FigPlaybackItemSegmentGetType(v27) || Count < 1)
          {
LABEL_25:
            fromRange = v53;
            toRange.start = v46;
            fiit_distanceFromRange((uint64_t)&fromRange, &toRange.start, (uint64_t)&rhs);
            fromRange.start = rhs;
            *(_OWORD *)&toRange.start.value = kCurrentTimeTolerance;
            toRange.start.epoch = 0;
            if (CMTimeCompare(&fromRange.start, &toRange.start) < 0)
            {
              time = v46;
              fromRange = v53;
              CMTimeClampToRange(&toRange.start, &time, &fromRange);
              *(_OWORD *)&v46.value = *(_OWORD *)&toRange.start.value;
              v33 = toRange.start.epoch;
            }
            else
            {
              fiit_updateCurrentSegmentWrapper(a1, 0);
              v32 = (*(uint64_t (**)(_QWORD))(v20 + 80))(*(_QWORD *)(v20 + 40));
              FigPlaybackItemSegmentGetTimeMapping(v32, (uint64_t)&fromRange);
              v52 = fromRange;
              v53 = v50;
              v48 = v45;
              toRange = v50;
              CMTimeMapTimeFromRangeToRange(&time, &v48, &fromRange, &toRange);
              *(_OWORD *)&v46.value = *(_OWORD *)&time.value;
              v33 = time.epoch;
            }
            v46.epoch = v33;
          }
          else
          {
            while (1)
            {
              v28 = *(uint64_t (**)(uint64_t))(v24 + 80);
              ValueAtIndex = FigCFArrayGetValueAtIndex();
              v30 = v28(ValueAtIndex);
              if (v27 == v30)
                break;
              Type = FigPlaybackItemSegmentGetType(v30);
              if ((unint64_t)Count >= 2)
              {
                --Count;
                if (Type)
                  continue;
              }
              goto LABEL_25;
            }
          }
        }
      }
      *(_OWORD *)a3 = *(_OWORD *)&v46.value;
      v9 = v46.epoch;
    }
    *(_QWORD *)(a3 + 16) = v9;
LABEL_5:
    if (a2)
    {
      *(_OWORD *)&fromRange.start.value = *(_OWORD *)a3;
      fromRange.start.epoch = *(_QWORD *)(a3 + 16);
      v10 = *(_OWORD *)(DerivedStorage + 160);
      *(_OWORD *)&v52.start.value = *(_OWORD *)(DerivedStorage + 144);
      *(_OWORD *)&v52.start.epoch = v10;
      *(_QWORD *)&v52.duration.timescale = *(_QWORD *)(DerivedStorage + 176);
      *a2 = fiit_MakeCFDateFromTime(&fromRange.start, (uint64_t)&v52);
    }
  }
}

CFDateRef fiit_MakeCFDateFromTime(CMTime *a1, uint64_t a2)
{
  const __CFAllocator *v3;
  double v4;
  double v5;
  Float64 Seconds;
  CMTime v8;

  if (!*(_BYTE *)(a2 + 32) || !*(_BYTE *)(a2 + 33))
    return 0;
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v4 = *(double *)(a2 + 24);
  v8 = *a1;
  v5 = v4 + CMTimeGetSeconds(&v8);
  v8 = *(CMTime *)a2;
  Seconds = CMTimeGetSeconds(&v8);
  return CFDateCreate(v3, v5 - Seconds);
}

void fiit_CopyEvent(uint64_t a1)
{
  uint64_t v2;
  __CFDictionary *v3;
  uint64_t v4;

  v4 = 0;
  v2 = FigPlayerInterstitialEventCopyPrimaryItem(a1);
  v3 = FigPlayerInterstitialEventCopyAsDictionary(a1);
  FigPlayerInterstitialEventCreateFromDictionary(v2, v3, &v4);
  FigPlayerInterstitialEventSetImmutable(v4);
}

uint64_t sub_192FDC8E0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  const void *v14;
  const void *v15;
  uint64_t v17;

  CFRelease(v15);
  if (v14)
    CFRelease(v14);
  return v17;
}

uint64_t fiit_CopySnapshot(const void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, CFDateRef *a5, _QWORD *a6)
{
  _QWORD *DerivedStorage;
  _QWORD *v13;
  uint64_t v14;
  CFTypeRef v15;
  __int128 v17;
  uint64_t v18;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (!a2 || !a3 || !a4 || !a5 || !a6)
    return FigSignalErrorAt();
  v13 = DerivedStorage;
  MEMORY[0x19402EA0C](*DerivedStorage);
  fiit_currentTime((uint64_t)a1, a5, (uint64_t)&v17);
  *(_OWORD *)a4 = v17;
  *(_QWORD *)(a4 + 16) = v18;
  fiit_ensureSegmentListContainsCurrentTime((uint64_t)a1);
  *a2 = FigCFArrayCreateCopy();
  v14 = v13[26];
  *(_OWORD *)a3 = *((_OWORD *)v13 + 12);
  *(_QWORD *)(a3 + 16) = v14;
  v15 = (CFTypeRef)v13[5];
  if (v15)
    v15 = CFRetain(v15);
  *a6 = v15;
  fiit_unlockAndPostSnapshotOutOfSyncNotification(a1);
  return 0;
}

uint64_t fiit_GetCurrentTime(const void *a1, uint64_t a2)
{
  _QWORD *DerivedStorage;
  __int128 v6;
  uint64_t v7;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  MEMORY[0x19402EA0C](*DerivedStorage);
  fiit_currentTime((uint64_t)a1, 0, (uint64_t)&v6);
  *(_OWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v7;
  fiit_unlockAndPostSnapshotOutOfSyncNotification(a1);
  return 0;
}

uint64_t fiit_CopyCurrentDate(const void *a1, CFDateRef *a2)
{
  _QWORD *DerivedStorage;
  _BYTE v6[24];

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  MEMORY[0x19402EA0C](*DerivedStorage);
  fiit_currentTime((uint64_t)a1, a2, (uint64_t)v6);
  fiit_unlockAndPostSnapshotOutOfSyncNotification(a1);
  return 0;
}

uint64_t fiit_SeekToDateWithOptions(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  double v10;
  __int128 v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v14 = *MEMORY[0x1E0CA2E18];
  v15 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  MEMORY[0x19402EA0C](*(_QWORD *)DerivedStorage);
  if (dword_1EE2A3560)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v10 = MEMORY[0x194029D14](a3);
  v11 = *(_OWORD *)(DerivedStorage + 160);
  v16 = *(_OWORD *)(DerivedStorage + 144);
  v17 = v11;
  v18 = *(_QWORD *)(DerivedStorage + 176);
  FigCreateTimeWithDateAndMoment((uint64_t)&v16, (uint64_t)&v14, v10);
  v16 = v14;
  *(_QWORD *)&v17 = v15;
  v12 = fiit_SeekToTimeWithOptions(a1, a2, &v16, MEMORY[0x1E0CA2E68], MEMORY[0x1E0CA2E68], a4);
  fiit_unlockAndPostSnapshotOutOfSyncNotification(a1);
  return v12;
}

__CFArray *fiit_createLoadedTimeRangesForTimeMapping(const __CFArray *a1, uint64_t a2)
{
  CFIndex Count;
  CFIndex v5;
  __CFArray *Mutable;
  CFIndex v7;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *Value;
  const __CFDictionary *v10;
  __int128 v11;
  CFDictionaryRef v12;
  const __CFAllocator *allocator;
  CMTime rhs;
  CMTime lhs;
  CMTimeRange otherRange;
  CMTimeRange end;
  CMTimeRange start;
  CMTimeRange v20;
  CMTime v21;
  CMTime v22;

  if (!a1)
    return 0;
  Count = CFArrayGetCount(a1);
  if (Count < 1)
    return 0;
  v5 = Count;
  Mutable = 0;
  v7 = 0;
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  do
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v7);
    memset(&v22, 0, sizeof(v22));
    Value = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, CFSTR("startTime"));
    CMTimeMakeFromDictionary(&v22, Value);
    memset(&v21, 0, sizeof(v21));
    v10 = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, CFSTR("endTime"));
    CMTimeMakeFromDictionary(&v21, v10);
    memset(&v20, 0, sizeof(v20));
    start.start = v22;
    end.start = v21;
    CMTimeRangeFromTimeToTime(&v20, &start.start, &end.start);
    end = v20;
    memset(&start, 0, sizeof(start));
    v11 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)&otherRange.start.value = *(_OWORD *)a2;
    *(_OWORD *)&otherRange.start.epoch = v11;
    *(_OWORD *)&otherRange.duration.timescale = *(_OWORD *)(a2 + 32);
    CMTimeRangeGetIntersection(&start, &end, &otherRange);
    if ((start.start.flags & 1) != 0
      && (start.duration.flags & 1) != 0
      && !start.duration.epoch
      && (start.duration.value & 0x8000000000000000) == 0)
    {
      end.start = start.duration;
      *(_OWORD *)&otherRange.start.value = *MEMORY[0x1E0CA2E68];
      otherRange.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
      if (CMTimeCompare(&end.start, &otherRange.start))
      {
        memset(&end, 0, sizeof(end));
        *(_OWORD *)&otherRange.start.value = *(_OWORD *)(a2 + 48);
        otherRange.start.epoch = *(_QWORD *)(a2 + 64);
        rhs = *(CMTime *)a2;
        CMTimeSubtract(&lhs, &otherRange.start, &rhs);
        *(_OWORD *)&otherRange.start.value = *(_OWORD *)&start.start.value;
        otherRange.start.epoch = start.start.epoch;
        CMTimeAdd(&end.start, &lhs, &otherRange.start);
        end.duration = start.duration;
        otherRange = end;
        v12 = CMTimeRangeCopyAsDictionary(&otherRange, allocator);
        if (!Mutable)
          Mutable = CFArrayCreateMutable(allocator, v5, MEMORY[0x1E0C9B378]);
        CFArrayAppendValue(Mutable, v12);
        if (v12)
          CFRelease(v12);
      }
    }
    ++v7;
  }
  while (v5 != v7);
  return Mutable;
}

uint64_t FigCaptionFormatConformerGetClassID()
{
  MEMORY[0x19402F294](&FigCaptionFormatConformerGetClassID_sRegisterFigCaptionFormatConformerBaseTypeOnce, RegisterFigCaptionFormatConformerBaseType);
  return sFigCaptionFormatConformerClassID;
}

uint64_t RegisterFigCaptionFormatConformerBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigCaptionFormatConformerGetTypeID()
{
  MEMORY[0x19402F294](&FigCaptionFormatConformerGetClassID_sRegisterFigCaptionFormatConformerBaseTypeOnce, RegisterFigCaptionFormatConformerBaseType);
  return CMBaseClassGetCFTypeID();
}

CFStringRef FigCaptionFormatConformerCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigCaptionFormatConformer %p]"), a1);
}

uint64_t FigNeroidCreateLocal(uint64_t a1, CFTypeRef *a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v5;
  uint64_t DerivedStorage;
  uint64_t CMBaseObject;
  uint64_t (*v9)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFTypeRef cf;
  CFTypeRef v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v18 = 0;
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  FigNeroidGetClassID();
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v5 = FigNeroCreate(a1, (_QWORD *)(DerivedStorage + 32));
    if (!(_DWORD)v5)
    {
      v5 = FigNeroidLayerViewCreate(a1, (_QWORD *)(DerivedStorage + 40));
      if (!(_DWORD)v5)
      {
        CMBaseObject = FigLayerViewGetCMBaseObject(*(_QWORD *)(DerivedStorage + 40));
        v9 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
        if (v9)
        {
          v10 = v9(CMBaseObject, CFSTR("ImageQueue"), a1, &cf);
          v5 = v10;
          if (!(_DWORD)v10)
          {
            v12 = (void *)MEMORY[0x19403137C](v10, v11);
            objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
            if (!pthread_main_np())
              objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
            objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1, v15, v16);
            v13 = objc_alloc_init(MEMORY[0x1E0CD27A8]);
            *(_QWORD *)(DerivedStorage + 24) = v13;
            objc_msgSend(v13, "setName:", CFSTR("neroid-internal-videolayer"));
            objc_msgSend(*(id *)(DerivedStorage + 24), "setContents:", cf);
            objc_msgSend(*(id *)(DerivedStorage + 24), "setContentsGravity:", *MEMORY[0x1E0CD2F90]);
            objc_msgSend(*(id *)(DerivedStorage + 24), "setEdgeAntialiasingMask:", 0);
            objc_msgSend(*(id *)(DerivedStorage + 24), "setAllowsDisplayCompositing:", 1);
            if (FigServer_IsMediaplaybackd()
              && (v14 = FigOSTransactionCreate(), (*(_QWORD *)(DerivedStorage + 48) = v14) == 0))
            {
              v5 = FigSignalErrorAt();
              objc_autoreleasePoolPop(v12);
            }
            else
            {
              objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
              objc_autoreleasePoolPop(v12);
              CMNotificationCenterGetDefaultLocalCenter();
              CMNotificationCenterAddListener();
              v5 = 0;
              *a2 = v18;
              v18 = 0;
            }
          }
        }
        else
        {
          v5 = 4294954514;
        }
      }
    }
  }
  if (cf)
    CFRelease(cf);
  if (v18)
    CFRelease(v18);
  return v5;
}

uint64_t neroid_handleNeroNotification(int a1, int a2, CFTypeRef cf1)
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (!CFEqual(cf1, CFSTR("Nero_Connected")) && !CFEqual(cf1, CFSTR("Nero_Disconnected")))
  {
    result = CFEqual(cf1, CFSTR("Nero_FirstVideoFrameEnqueued"));
    if (!(_DWORD)result)
      return result;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t neroid_Invalidate()
{
  _BYTE *DerivedStorage;
  _BYTE *v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  const void *v7;
  void *v8;
  const void *v9;
  const void *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    v1 = DerivedStorage;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    *v1 = 1;
    CMNotificationCenterGetDefaultLocalCenter();
    v3 = CMNotificationCenterRemoveListener();
    v4 = (void *)MEMORY[0x19403137C](v3);
    objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
    if (!pthread_main_np())
      objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
    objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1, v12, v13);
    v5 = (void *)*((_QWORD *)v1 + 1);
    if (v5)
    {

      *((_QWORD *)v1 + 1) = 0;
    }
    v6 = (void *)*((_QWORD *)v1 + 3);
    if (v6)
    {
      objc_msgSend(v6, "removeFromSuperlayer");
      objc_msgSend(*((id *)v1 + 3), "setContents:", 0);

      *((_QWORD *)v1 + 3) = 0;
    }
    v7 = (const void *)*((_QWORD *)v1 + 2);
    if (v7)
    {
      CFRelease(v7);
      *((_QWORD *)v1 + 2) = 0;
    }
    objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
    objc_autoreleasePoolPop(v4);
    FigNeroTeardown(*((_QWORD *)v1 + 4));
    v8 = (void *)*((_QWORD *)v1 + 6);
    if (v8)
    {

      *((_QWORD *)v1 + 6) = 0;
    }
    v9 = (const void *)*((_QWORD *)v1 + 5);
    if (v9)
    {
      CFRelease(v9);
      *((_QWORD *)v1 + 5) = 0;
    }
    v10 = (const void *)*((_QWORD *)v1 + 4);
    if (v10)
    {
      CFRelease(v10);
      *((_QWORD *)v1 + 4) = 0;
    }
  }
  return 0;
}

__CFString *neroid_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigNeroid %p>"), a1);
  return Mutable;
}

uint64_t neroid_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFNumberRef *a4)
{
  _BYTE *DerivedStorage;
  _BYTE *v7;
  void *v8;
  CFNumberRef v9;
  uint64_t result;
  int valuePtr;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
    return 4294950604;
  v7 = DerivedStorage;
  if (!CFEqual(a2, CFSTR("CAContextID")))
    return 4294954512;
  if (!*((_QWORD *)v7 + 2))
    return FigSignalErrorAt();
  v8 = (void *)MEMORY[0x19403137C]();
  valuePtr = objc_msgSend(*((id *)v7 + 2), "contextId");
  objc_autoreleasePoolPop(v8);
  v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  result = 0;
  *a4 = v9;
  return result;
}

uint64_t neroid_SetProperty(uint64_t a1, const void *a2, void *a3)
{
  id *DerivedStorage;
  id *v7;
  void *v8;
  id v9;
  id v10;
  CGFloat v11;
  CGFloat v12;
  const __CFDictionary *DictionaryRepresentation;
  uint64_t v14;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  _QWORD v23[2];
  _QWORD v24[3];
  CGSize v25;

  v24[2] = *MEMORY[0x1E0C80C00];
  DerivedStorage = (id *)CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return 4294950604;
  v7 = DerivedStorage;
  if (CFEqual(a2, CFSTR("DisplayLayer")))
  {
    v8 = (void *)MEMORY[0x19403137C]();
    objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
    if (!pthread_main_np())
      objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
    objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
    objc_msgSend(v7[3], "removeFromSuperlayer");
    v9 = v7[1];
    v10 = a3;
    v7[1] = v10;
    objc_msgSend(v10, "addSublayer:", v7[3]);
    objc_msgSend(v7[1], "bounds");
    v25.width = v11;
    v25.height = v12;
    DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v25);
    neroid_setDisplaySize(a1, DictionaryRepresentation);
    objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
    if (DictionaryRepresentation)
      CFRelease(DictionaryRepresentation);
    objc_autoreleasePoolPop(v8);
    return 0;
  }
  if (!CFEqual(a2, CFSTR("DisplaySize")))
  {
    if (!CFEqual(a2, CFSTR("MakeCAContextForRemoteHost")))
      return 4294954512;
    v16 = CMBaseObjectGetDerivedStorage();
    v17 = (void *)MEMORY[0x19403137C]();
    if (!*(_QWORD *)(v16 + 16))
    {
      v18 = *MEMORY[0x1E0CD2A40];
      v23[0] = *MEMORY[0x1E0CD2A20];
      v23[1] = v18;
      v19 = *MEMORY[0x1E0C9AE50];
      v24[0] = CFSTR("FigNeroid_CAContext");
      v24[1] = v19;
      v20 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v24, v23, 2);
      v21 = (void *)objc_msgSend(MEMORY[0x1E0CD28E0], "contextWithOptions:", v20);
      *(_QWORD *)(v16 + 16) = v21;
      if (!v21)
      {
        v14 = FigSignalErrorAt();
LABEL_18:
        objc_autoreleasePoolPop(v17);
        return v14;
      }
      v22 = v21;
    }
    objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
    if (!pthread_main_np())
      objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
    objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
    objc_msgSend(*(id *)(v16 + 16), "setLayer:", *(_QWORD *)(v16 + 24));
    objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
    v14 = 0;
    goto LABEL_18;
  }
  return neroid_setDisplaySize(a1, (const __CFDictionary *)a3);
}

uint64_t neroid_setDisplaySize(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  CGSize v7;
  float v8;
  double v9;
  CFDictionaryRef DictionaryRepresentation;
  CFDictionaryRef v11;
  uint64_t CMBaseObject;
  uint64_t (*v13)(uint64_t, const __CFString *, __CFDictionary *);
  uint64_t v14;
  void *v15;
  CGSize v17;
  CGSize v18;

  v17 = (CGSize)*MEMORY[0x1E0C9D820];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294950606;
  v4 = DerivedStorage;
  if (!CGSizeMakeWithDictionaryRepresentation(a2, &v17))
    return 4294950606;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return 4294950605;
  v6 = Mutable;
  v7 = v17;
  GSMainScreenScaleFactor();
  v9 = v8;
  v18.width = v7.width * v8;
  v18.height = v7.height * v9;
  DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v18);
  if (DictionaryRepresentation)
  {
    v11 = DictionaryRepresentation;
    CFDictionarySetValue(v6, CFSTR("DisplaySize"), DictionaryRepresentation);
    CMBaseObject = FigLayerViewGetCMBaseObject(*(_QWORD *)(v4 + 40));
    v13 = *(uint64_t (**)(uint64_t, const __CFString *, __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 56);
    if (v13)
    {
      v14 = v13(CMBaseObject, CFSTR("DisplayInfo"), v6);
      if (!(_DWORD)v14)
      {
        v15 = (void *)MEMORY[0x19403137C]();
        objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
        if (!pthread_main_np())
          objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
        objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1, v17);
        objc_msgSend(*(id *)(v4 + 24), "setFrame:", 0.0, 0.0, v17);
        objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
        objc_autoreleasePoolPop(v15);
        v14 = 0;
      }
    }
    else
    {
      v14 = 4294954514;
    }
    CFRelease(v6);
  }
  else
  {
    v14 = 4294950605;
    v11 = v6;
  }
  CFRelease(v11);
  return v14;
}

uint64_t neroid_Start()
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int CFPreferenceNumberWithDefault;
  const __CFAllocator *v3;
  uint64_t v4;
  uint64_t v5;
  __CFDictionary *Mutable;
  uint64_t CMBaseObject;
  uint64_t (*v9)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  CFTypeRef cf;
  void *value;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  value = 0;
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (CFPreferenceNumberWithDefault)
    v4 = FigTransportConnectionTCPCreate();
  else
    v4 = FigTransportConnectionIDSCreate();
  v5 = v4;
  if (!(_DWORD)v4)
  {
    Mutable = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(Mutable, CFSTR("RenderDestination"), *(const void **)(DerivedStorage + 40));
    CFDictionarySetValue(Mutable, CFSTR("TransportConnection"), value);
    v5 = FigNeroSetup(*(_QWORD *)(DerivedStorage + 32), Mutable);
    if (!(_DWORD)v5)
    {
      CMBaseObject = FigLayerViewGetCMBaseObject(*(_QWORD *)(DerivedStorage + 40));
      v9 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v9)
      {
        v5 = v9(CMBaseObject, CFSTR("DisplayInfo"), v3, &cf);
        if (!(_DWORD)v5)
        {
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterPostNotification();
        }
      }
      else
      {
        v5 = 4294954514;
      }
    }
    if (Mutable)
      CFRelease(Mutable);
  }
  if (value)
    CFRelease(value);
  if (cf)
    CFRelease(cf);
  return v5;
}

uint64_t FigCPEProtectorXPCRemoteRetainCopiedCPEProtector(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v4;
  CFTypeRef v5;
  uint64_t v6;
  CFTypeRef cf;

  cf = 0;
  if (a1 && a2)
  {
    if (remoteXPCCPEProtectorClient_EnsureClientEstablished_sCPEProtectorRemoteClientSetupOnce != -1)
      dispatch_once(&remoteXPCCPEProtectorClient_EnsureClientEstablished_sCPEProtectorRemoteClientSetupOnce, &__block_literal_global_120);
    v4 = remoteXPCCPEProtectorClient_EnsureClientEstablished_sCPEProtectorRemoteClientEstablishmentError;
    if (remoteXPCCPEProtectorClient_EnsureClientEstablished_sCPEProtectorRemoteClientEstablishmentError)
      return v4;
    v4 = FigXPCRemoteClientRetainCopiedObject();
    v5 = cf;
    if (!(_DWORD)v4)
    {
      v6 = FigCPEProtectorXPCRemoteCreateWithObjectID(a1, &cf);
      if (!(_DWORD)v6)
      {
        v4 = 0;
        *a2 = cf;
        return v4;
      }
      v4 = v6;
      v5 = cf;
    }
    if (v5)
      CFRelease(v5);
    return v4;
  }
  return FigSignalErrorAt();
}

uint64_t FigCPEProtectorXPCRemoteCreateWithObjectID(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (!a1 || !a2)
    return FigSignalErrorAt();
  if (remoteXPCCPEProtectorClient_EnsureClientEstablished_sCPEProtectorRemoteClientSetupOnce != -1)
    dispatch_once(&remoteXPCCPEProtectorClient_EnsureClientEstablished_sCPEProtectorRemoteClientSetupOnce, &__block_literal_global_120);
  v4 = remoteXPCCPEProtectorClient_EnsureClientEstablished_sCPEProtectorRemoteClientEstablishmentError;
  if (!remoteXPCCPEProtectorClient_EnsureClientEstablished_sCPEProtectorRemoteClientEstablishmentError)
  {
    FigCPEProtectorGetClassID();
    v5 = CMDerivedObjectCreate();
    if ((_DWORD)v5)
    {
      return v5;
    }
    else
    {
      *(_QWORD *)CMBaseObjectGetDerivedStorage() = a1;
      v4 = FigXPCRemoteClientAssociateObject();
      if (!(_DWORD)v4)
        *a2 = 0;
    }
  }
  return v4;
}

uint64_t FigCPEProtectorXPCRemoteGetObjectID(uint64_t a1, _QWORD *a2)
{
  if (a1 && a2)
    return remoteXPCCPEProtector_GetObjectID(a1, a2);
  else
    return FigSignalErrorAt();
}

uint64_t remoteXPCCPEProtector_GetObjectID(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8))
    return FigSignalErrorAt();
  *a2 = *(_QWORD *)DerivedStorage;
  return 0;
}

uint64_t FigCPEProtectorRemoteCreateForScheme(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t uint64;

  if (remoteXPCCPEProtectorClient_EnsureClientEstablished_sCPEProtectorRemoteClientSetupOnce != -1)
    dispatch_once(&remoteXPCCPEProtectorClient_EnsureClientEstablished_sCPEProtectorRemoteClientSetupOnce, &__block_literal_global_120);
  v5 = remoteXPCCPEProtectorClient_EnsureClientEstablished_sCPEProtectorRemoteClientEstablishmentError;
  if (!remoteXPCCPEProtectorClient_EnsureClientEstablished_sCPEProtectorRemoteClientEstablishmentError)
  {
    v6 = FigXPCCreateBasicMessage();
    if ((_DWORD)v6
      || (v6 = FigXPCMessageSetCFString(), (_DWORD)v6)
      || (v6 = FigXPCMessageSetCFDictionary(), (_DWORD)v6))
    {
      v5 = v6;
    }
    else
    {
      FigCPEProtectorGetClassID();
      v7 = CMDerivedObjectCreate();
      if ((_DWORD)v7 || (v7 = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)v7))
      {
        v5 = v7;
      }
      else
      {
        uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E0CA36A0]);
        *(_QWORD *)CMBaseObjectGetDerivedStorage() = uint64;
        v5 = FigXPCRemoteClientAssociateObject();
        if (!(_DWORD)v5)
          *a4 = 0;
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t remoteXPCCPEProtectorClient_DeadConnectionCallback()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(result + 8) = 1;
  return result;
}

uint64_t remoteXPCCPEProtector_Finalize()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigXPCRemoteClientDisassociateObject();
  if (!*(_BYTE *)(DerivedStorage + 8) && !FigXPCCreateBasicMessage())
    FigXPCRemoteClientSendSyncMessage();
  FigXPCRelease();
  return FigXPCRemoteClientKillServerOnTimeout();
}

__CFString *remoteXPCCPEProtector_CopyDebugDesc(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;
  const char *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(a1);
  if (*(_BYTE *)(DerivedStorage + 8))
    v6 = " SERVER DIED";
  else
    v6 = "";
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigCPEProtectorRemote(XPC) %p retainCount: %ld ObjectID: %016llx%s>"), a1, v5, *(_QWORD *)DerivedStorage, v6);
  return Mutable;
}

uint64_t remoteXPCCPEProtector_CopyProperty(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  ObjectID = remoteXPCCPEProtector_GetObjectID(a1, &v4);
  if (!(_DWORD)ObjectID)
    ObjectID = FigXPCSendStdCopyPropertyMessage();
  v2 = ObjectID;
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t remoteXPCCPEProtector_SetProperty(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  ObjectID = remoteXPCCPEProtector_GetObjectID(a1, &v4);
  if (!(_DWORD)ObjectID)
    ObjectID = FigXPCSendStdSetPropertyMessage();
  v2 = ObjectID;
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t remoteXPCCPEProtector_IsApplicationAuthorized(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  uint64_t ObjectID;
  uint64_t v6;
  uint64_t v8;

  v8 = 0;
  if (!a3)
  {
    ObjectID = FigSignalErrorAt();
LABEL_8:
    v6 = ObjectID;
    goto LABEL_6;
  }
  ObjectID = remoteXPCCPEProtector_GetObjectID(a1, &v8);
  if ((_DWORD)ObjectID)
    goto LABEL_8;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_8;
  xpc_dictionary_set_uint64(0, "R", a2);
  v6 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!(_DWORD)v6)
    *a3 = xpc_dictionary_get_uint64(0, "A");
LABEL_6:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteXPCCPEProtector_IsContentAuthorized(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  uint64_t ObjectID;
  uint64_t v6;
  uint64_t v8;

  v8 = 0;
  ObjectID = remoteXPCCPEProtector_GetObjectID(a1, &v8);
  if ((_DWORD)ObjectID || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID))
  {
    v6 = ObjectID;
  }
  else
  {
    xpc_dictionary_set_uint64(0, "R", a2);
    v6 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!(_DWORD)v6)
      *a3 = xpc_dictionary_get_uint64(0, "A");
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteXPCCPEProtector_GetAggregateExternalProtectionState(uint64_t a1, _DWORD *a2)
{
  uint64_t ObjectID;
  uint64_t v4;
  uint64_t v6;

  v6 = 0;
  ObjectID = remoteXPCCPEProtector_GetObjectID(a1, &v6);
  if ((_DWORD)ObjectID || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID))
  {
    v4 = ObjectID;
  }
  else
  {
    v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!(_DWORD)v4)
      *a2 = xpc_dictionary_get_int64(0, "E");
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t remoteXPCCPEProtector_CreateCryptor(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t ObjectID;
  uint64_t v7;
  uint64_t v9;

  v9 = 0;
  if (!a5)
  {
    ObjectID = FigSignalErrorAt();
LABEL_9:
    v7 = ObjectID;
    goto LABEL_7;
  }
  ObjectID = remoteXPCCPEProtector_GetObjectID(a1, &v9);
  if ((_DWORD)ObjectID)
    goto LABEL_9;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_9;
  xpc_dictionary_set_uint64(0, "R", a3);
  ObjectID = FigXPCMessageSetCFDictionary();
  if ((_DWORD)ObjectID)
    goto LABEL_9;
  v7 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!(_DWORD)v7)
  {
    xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E0CA36A0]);
    v7 = FigCPECryptorRemoteRetainCopiedCryptor();
  }
LABEL_7:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v7;
}

uint64_t FigMetricEventInitialLikelyToKeepUpSubscriberCreate(const __CFAllocator *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t Instance;
  uint64_t v8;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v10;
  CFMutableArrayRef v11;
  dispatch_queue_t v12;
  dispatch_queue_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, void *, dispatch_queue_t);
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  void (*v17)(uint64_t, uint64_t, uint64_t);
  void (*v18)(uint64_t, uint64_t, _QWORD);
  void (*v19)(uint64_t, uint64_t, uint64_t);
  __int128 v21;

  v3 = 0;
  if (!a2 || !a3)
    return v3;
  v21 = xmmword_1E2FB7BC8;
  if (ilktu_getTypeID_once != -1)
    dispatch_once_f(&ilktu_getTypeID_once, &v21, (dispatch_function_t)subUtil_registerClass);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v8 = Instance;
  Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(v8 + 16) = Mutable;
  if (!Mutable
    || (v10 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]), (*(_QWORD *)(v8 + 24) = v10) == 0)
    || (v11 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]), (*(_QWORD *)(v8 + 32) = v11) == 0)
    || (v12 = dispatch_queue_create("FigMetricIntialLTKUSubscriber.queue", 0), (*(_QWORD *)(v8 + 48) = v12) == 0))
  {
    v3 = 4294954510;
    goto LABEL_22;
  }
  v13 = v12;
  v14 = *(uint64_t (**)(uint64_t, uint64_t, void *, dispatch_queue_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 8);
  if (!v14)
  {
    v3 = 4294954514;
LABEL_22:
    CFRelease((CFTypeRef)v8);
    return v3;
  }
  v15 = v14(a2, v8, &FigMetricEventInitialLikelyToKeepUpSubscriberCreate_subscriberCallbacks, v13);
  if ((_DWORD)v15)
  {
    v3 = v15;
    goto LABEL_22;
  }
  *(_BYTE *)(v8 + 40) = 0;
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v16)
    v16(a2, v8, 1);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v17)
    v17(a2, v8, 2);
  v18 = *(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v18)
    v18(a2, v8, 0);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v19)
    v19(a2, v8, 3);
  v3 = 0;
  *a3 = v8;
  return v3;
}

void ilktu_didReceiveEvent(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t (*v8)(const void *);
  __CFArray *v9;
  uint64_t (*v10)(const void *);
  const void *v11;
  const __CFAllocator *AllocatorForMedia;
  void (*v13)(__int128 *__return_ptr, const void *);
  uint64_t (*v14)(const void *);
  const void *v15;
  uint64_t (*v16)(const void *);
  const void *v17;
  double (*v18)(const void *);
  double v19;
  uint64_t (*v20)(const void *);
  const void *v21;
  CFTypeRef v22;
  void (*v23)(uint64_t, uint64_t, CFTypeRef);
  __int128 v24;
  uint64_t v25;
  CFTypeRef cf;

  cf = 0;
  if (a4)
  {
    if (!*(_BYTE *)(a1 + 40))
    {
      v8 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (v8)
      {
        switch(v8(a4))
        {
          case 0:
            v9 = *(__CFArray **)(a1 + 32);
            goto LABEL_8;
          case 1:
            v9 = *(__CFArray **)(a1 + 16);
            goto LABEL_8;
          case 2:
            v9 = *(__CFArray **)(a1 + 24);
LABEL_8:
            CFArrayAppendValue(v9, a4);
            break;
          case 3:
            *(_BYTE *)(a1 + 40) = 1;
            v10 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
            if (v10)
              v11 = (const void *)v10(a4);
            else
              v11 = 0;
            AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
            v13 = *(void (**)(__int128 *__return_ptr, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 56);
            if (v13)
            {
              v13(&v24, a4);
            }
            else
            {
              v24 = *MEMORY[0x1E0CA2E18];
              v25 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
            }
            v14 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
            if (v14)
              v15 = (const void *)v14(a4);
            else
              v15 = 0;
            v16 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 40) + 8);
            if (v16)
              v17 = (const void *)v16(a4);
            else
              v17 = 0;
            v18 = *(double (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 40) + 48);
            if (v18)
              v19 = v18(a4);
            else
              v19 = 0.0;
            v20 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 40) + 16);
            if (v20)
              v21 = (const void *)v20(a4);
            else
              v21 = 0;
            if (!FigMetricItemInitialLikelyToKeepUpEventCreate(AllocatorForMedia, &v24, v15, v11, v17, v21, *(const void **)(a1 + 32), *(const void **)(a1 + 16), v19, *(const void **)(a1 + 24), &cf))
            {
              v22 = cf;
              v23 = *(void (**)(uint64_t, uint64_t, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
              if (v23)
                v23(a2, a3, v22);
            }
            if (v11)
              CFRelease(v11);
            break;
          default:
            break;
        }
      }
    }
    if (cf)
      CFRelease(cf);
  }
}

uint64_t FigMetricEventSummarySubscriberCreate(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t Instance;
  uint64_t v7;
  dispatch_queue_t v8;
  dispatch_queue_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, void *, dispatch_queue_t);
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  __int128 v14;

  v3 = 0;
  if (!a2 || !a3)
    return v3;
  v14 = xmmword_1E2FB7C38;
  if (ss_getTypeID_once != -1)
    dispatch_once_f(&ss_getTypeID_once, &v14, (dispatch_function_t)subUtil_registerClass);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v7 = Instance;
  v8 = dispatch_queue_create("FigMetricEventSummarySubscriber.queue", 0);
  *(_QWORD *)(v7 + 152) = v8;
  if (!v8)
  {
    v3 = 4294954510;
    goto LABEL_13;
  }
  v9 = v8;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, void *, dispatch_queue_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 8);
  if (!v10)
  {
    v3 = 4294954514;
LABEL_13:
    CFRelease((CFTypeRef)v7);
    return v3;
  }
  v11 = v10(a2, v7, &FigMetricEventSummarySubscriberCreate_subscriberCallbacks, v9);
  if ((_DWORD)v11)
  {
    v3 = v11;
    goto LABEL_13;
  }
  *(_DWORD *)(v7 + 160) = 0;
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v12)
    v12(a2, v7);
  v3 = 0;
  *a3 = v7;
  return v3;
}

void ss_didReceiveEvent(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  const void *v4;
  uint64_t (*v8)(const void *);
  void (*v9)(const void *);
  uint64_t v10;
  void (*v11)(const void *);
  double v12;
  uint64_t (*v13)(const void *);
  double (*v14)(const void *);
  double (*v15)(const void *);
  unsigned int (*v16)(const void *);
  uint64_t v17;
  int8x16_t v18;
  uint64_t (*v19)(const void *);
  const void *v20;
  double (*v21)(const void *);
  double (*v22)(const void *);
  void (*v23)(const void *);
  uint64_t v24;
  const void *v25;
  uint64_t (*v26)(const void *);
  const void *v27;
  const void *v28;
  const void *v29;
  const __CFAllocator *AllocatorForMedia;
  void (*v31)(__int128 *__return_ptr, const void *);
  uint64_t (*v32)(const void *);
  const void *v33;
  CFTypeRef v34;
  void (*v35)(uint64_t, uint64_t, CFTypeRef);
  __int128 v36;
  uint64_t v37;
  CFTypeRef v38;

  v38 = 0;
  if (a4)
  {
    v4 = a4;
    v8 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v8)
    {
      switch(v8(v4))
      {
        case 0:
        case 1:
        case 2:
          ++*(_QWORD *)(a1 + 56);
          break;
        case 3:
          v9 = *(void (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 40) + 48);
          if (v9)
            v9(v4);
          else
            v10 = 0;
          *(_QWORD *)(a1 + 72) = v10;
          v26 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 40) + 8);
          if (v26 && (v27 = (const void *)v26(v4)) != 0)
          {
            v28 = *(const void **)(a1 + 128);
            *(_QWORD *)(a1 + 128) = v27;
            CFRetain(v27);
            if (v28)
            {
              v29 = v28;
              goto LABEL_66;
            }
          }
          else
          {
            FigSignalErrorAt();
          }
          break;
        case 5:
          if (*(_DWORD *)(a1 + 160) == 1)
          {
            *(_QWORD *)(a1 + 80) = 0;
            v11 = *(void (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 40) + 48);
            if (v11)
              v11(v4);
            else
              v12 = 0.0;
            *(double *)(a1 + 64) = v12 + *(double *)(a1 + 64);
          }
          *(_DWORD *)(a1 + 160) = 2;
          break;
        case 6:
          ++*(_QWORD *)(a1 + 48);
          v13 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 56) + 8);
          if (v13)
            v4 = (const void *)v13(v4);
          else
            v4 = 0;
          if (*(_QWORD *)(a1 + 128))
          {
            ss_updateStatsWithCurrentVariant(a1);
            *(CFAbsoluteTime *)(a1 + 136) = CFAbsoluteTimeGetCurrent();
            v25 = *(const void **)(a1 + 128);
          }
          else
          {
            v25 = 0;
          }
          *(_QWORD *)(a1 + 144) = 0;
          *(_QWORD *)(a1 + 128) = v4;
          if (!v4)
            goto LABEL_52;
          goto LABEL_51;
        case 8:
          ++*(_QWORD *)(a1 + 32);
          *(_DWORD *)(a1 + 160) = 1;
          *(CFAbsoluteTime *)(a1 + 80) = CFAbsoluteTimeGetCurrent();
          break;
        case 9:
          v14 = *(double (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 48) + 16);
          if (!v14
            || v14(v4) == 0.0
            || (v15 = *(double (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 48) + 24)) != 0
            && v15(v4) != 0.0)
          {
            v21 = *(double (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 48) + 16);
            if (!v21 || v21(v4) == 0.0)
            {
              v22 = *(double (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 48) + 24);
              if (v22)
              {
                if (v22(v4) != 0.0)
                  *(double *)(a1 + 144) = *(double *)(a1 + 144) + CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 136);
              }
            }
          }
          else
          {
            *(CFAbsoluteTime *)(a1 + 136) = CFAbsoluteTimeGetCurrent();
          }
          v23 = *(void (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 48) + 16);
          if (v23)
            v23(v4);
          else
            v24 = 0;
          *(_QWORD *)(a1 + 120) = v24;
          break;
        case 12:
          v16 = *(unsigned int (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 16);
          if (v16 && v16(v4))
          {
            ++*(_QWORD *)(a1 + 40);
          }
          else
          {
            v25 = *(const void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v4;
LABEL_51:
            CFRetain(v4);
LABEL_52:
            if (v25)
            {
              v29 = v25;
LABEL_66:
              CFRelease(v29);
            }
          }
          break;
        case 13:
          if (*(_QWORD *)(a1 + 128))
            ss_updateStatsWithCurrentVariant(a1);
          v17 = *(uint64_t *)(a1 + 24);
          if (*(double *)&v17 > 0.0)
          {
            v18 = (int8x16_t)vcvtq_s64_f64(vdivq_f64(vcvtq_f64_s64(*(int64x2_t *)(a1 + 104)), (float64x2_t)vdupq_lane_s64(v17, 0)));
            *(int8x16_t *)(a1 + 88) = vextq_s8(v18, v18, 8uLL);
          }
          if (*(_DWORD *)(a1 + 160) == 1 && *(double *)(a1 + 80) != 0.0)
            *(CFAbsoluteTime *)(a1 + 64) = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 80);
          v19 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
          if (v19)
            v20 = (const void *)v19(v4);
          else
            v20 = 0;
          AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
          v31 = *(void (**)(__int128 *__return_ptr, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 56);
          if (v31)
          {
            v31(&v36, v4);
          }
          else
          {
            v36 = *MEMORY[0x1E0CA2E18];
            v37 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
          }
          v32 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
          if (v32)
            v33 = (const void *)v32(v4);
          else
            v33 = 0;
          if (!FigMetricItemPlaybackSummaryEventCreate(AllocatorForMedia, &v36, v33, v20, *(const void **)(a1 + 16), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48), *(double *)(a1 + 64), *(double *)(a1 + 72), (uint64_t)*(double *)(a1 + 24), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), &v38))
          {
            v34 = v38;
            v35 = *(void (**)(uint64_t, uint64_t, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
            if (v35)
              v35(a2, a3, v34);
          }
          if (!v20)
            break;
          v29 = v20;
          goto LABEL_66;
        default:
          break;
      }
    }
    if (v38)
      CFRelease(v38);
  }
}

void ilktu_finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  NSObject *v5;

  v2 = (const void *)a1[2];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[3];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[4];
  if (v4)
    CFRelease(v4);
  v5 = a1[6];
  if (v5)
    dispatch_release(v5);
}

CFStringRef ilktu_copyDesc(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<FigMetricEventInitialLikelyToKeepUpSubscriberRef %p>"), a1);
}

uint64_t subUtil_registerClass(uint64_t a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  **(_QWORD **)(a1 + 8) = result;
  return result;
}

void ss_finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  NSObject *v4;

  v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  v3 = (const void *)a1[16];
  if (v3)
  {
    CFRelease(v3);
    a1[16] = 0;
  }
  v4 = a1[19];
  if (v4)
  {
    dispatch_release(v4);
    a1[19] = 0;
  }
}

CFStringRef ss_copyDesc(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<FigMetricEventInitialLikelyToKeepUpSubscriberRef %p>"), a1);
}

double ss_updateStatsWithCurrentVariant(uint64_t a1)
{
  int AverageBitRate;
  double v3;
  double result;

  if (*(double *)(a1 + 120) != 0.0)
    *(double *)(a1 + 144) = *(double *)(a1 + 144) + CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 136);
  *(_QWORD *)(a1 + 104) = (uint64_t)((double)*(uint64_t *)(a1 + 104)
                                  + (double)(int)FigAlternateGetPeakBitRate(*(_QWORD *)(a1 + 128))
                                  * *(double *)(a1 + 144));
  AverageBitRate = FigAlternateGetAverageBitRate(*(_QWORD *)(a1 + 128));
  v3 = *(double *)(a1 + 144);
  *(_QWORD *)(a1 + 112) = (uint64_t)((double)*(uint64_t *)(a1 + 112) + (double)AverageBitRate * v3);
  result = v3 + *(double *)(a1 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

uint64_t FigLoopingEditCursorServiceCreate(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t DerivedStorage;
  __int128 v7;
  __int128 v8;
  CMTimeEpoch v9;
  int32_t v10;
  BOOL v11;
  __int128 v13;
  CMTime time2;
  CMTime time1;
  uint64_t v16;

  v16 = 0;
  FigEditCursorServiceGetClassID();
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v7 = *a2;
    v8 = a2[2];
    *(_OWORD *)(DerivedStorage + 16) = a2[1];
    *(_OWORD *)(DerivedStorage + 32) = v8;
    *(_OWORD *)DerivedStorage = v7;
    if ((*((_DWORD *)a2 + 3) & 0x1D) == 1
      && (time1 = *(CMTime *)a2,
          v13 = *MEMORY[0x1E0CA2E68],
          *(_OWORD *)&time2.value = *MEMORY[0x1E0CA2E68],
          v9 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16),
          time2.epoch = v9,
          (CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
      && (*((_DWORD *)a2 + 9) & 0x1D) == 1)
    {
      time1 = *(CMTime *)((_BYTE *)a2 + 1);
      *(_OWORD *)&time2.value = v13;
      time2.epoch = v9;
      v10 = CMTimeCompare(&time1, &time2);
      *(_BYTE *)(DerivedStorage + 48) = v10 > 0;
      if (v10 < 1)
      {
        v11 = 0;
      }
      else
      {
        time1 = *(CMTime *)a2;
        *(_OWORD *)&time2.value = v13;
        time2.epoch = v9;
        v11 = CMTimeCompare(&time1, &time2) > 0;
      }
    }
    else
    {
      v11 = 0;
      *(_BYTE *)(DerivedStorage + 48) = 0;
    }
    *(_BYTE *)(DerivedStorage + 49) = v11;
    *a3 = v16;
  }
  return v5;
}

__CFString *loopingCursorService_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;
  const char *v4;
  __int128 v5;
  Float64 Seconds;
  Float64 v7;
  CMTime time;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigLoopingEditCursorService %p>"), a1);
  if (*(_BYTE *)(DerivedStorage + 48))
    v4 = "looping";
  else
    v4 = "pass-through";
  CFStringAppendFormat(Mutable, 0, CFSTR("{ %s"), v4);
  if (*(_BYTE *)(DerivedStorage + 48))
  {
    v5 = *(_OWORD *)DerivedStorage;
    time.epoch = *(_QWORD *)(DerivedStorage + 16);
    *(_OWORD *)&time.value = v5;
    Seconds = CMTimeGetSeconds(&time);
    time = *(CMTime *)(DerivedStorage + 24);
    v7 = CMTimeGetSeconds(&time);
    CFStringAppendFormat(Mutable, 0, CFSTR(" time range [%1.3f,+%1.3f]"), *(_QWORD *)&Seconds, *(_QWORD *)&v7);
  }
  CFStringAppendFormat(Mutable, 0, CFSTR(" }"));
  return Mutable;
}

uint64_t loopingCursorService_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  CFTypeRef *v7;
  CFTypeRef v8;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a4)
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  if (!FigCFEqual())
    return 4294954509;
  v7 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  if (!*(_BYTE *)(v6 + 48))
    v7 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
  v8 = CFRetain(*v7);
  result = 0;
  *a4 = v8;
  return result;
}

uint64_t loopingCursorService_CreateCursorAtTrackTime(const void *a1, CMTime *a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  __int128 v14;
  __int128 v15;
  int32_t v16;
  uint64_t v17;
  CMTime v19;
  CMTime time2;
  CMTime time1;
  uint64_t v22;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v22 = 0;
  CFGetAllocator(a1);
  FigEditCursorGetClassID();
  v7 = CMDerivedObjectCreate();
  if (!(_DWORD)v7)
  {
    v8 = CMBaseObjectGetDerivedStorage();
    v9 = v8;
    v11 = *(_OWORD *)(DerivedStorage + 16);
    v10 = *(_OWORD *)(DerivedStorage + 32);
    v12 = *(_OWORD *)DerivedStorage;
    v13 = *(_DWORD *)(DerivedStorage + 48);
    *(_DWORD *)(v8 + 48) = v13;
    *(_OWORD *)(v8 + 16) = v11;
    *(_OWORD *)(v8 + 32) = v10;
    *(_OWORD *)v8 = v12;
    if ((_BYTE)v13)
    {
      if (!*(_BYTE *)(v8 + 49))
      {
LABEL_7:
        v16 = *(_DWORD *)(v9 + 32);
        time2 = *a2;
        CMTimeConvertScale(&time1, &time2, v16, kCMTimeRoundingMethod_RoundTowardNegativeInfinity);
        *a2 = time1;
        v17 = (a2->value / *(uint64_t *)(v9 + 24)) & ~((a2->value / *(uint64_t *)(v9 + 24)) >> 63);
        if (*(_BYTE *)(v9 + 49))
          ++v17;
        goto LABEL_11;
      }
      time1 = *a2;
      v14 = *(_OWORD *)v8;
      time2.epoch = *(_QWORD *)(v8 + 16);
      *(_OWORD *)&time2.value = v14;
      if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
      {
        if (*(_BYTE *)(v9 + 49))
        {
          time2 = *a2;
          v15 = *(_OWORD *)v9;
          v19.epoch = *(_QWORD *)(v9 + 16);
          *(_OWORD *)&v19.value = v15;
          CMTimeSubtract(&time1, &time2, &v19);
          *a2 = time1;
        }
        goto LABEL_7;
      }
    }
    v17 = 0;
LABEL_11:
    *(_QWORD *)(v9 + 56) = v17;
    *a3 = v22;
  }
  return v7;
}

__CFString *loopingCursor_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;
  const char *v4;
  __int128 v5;
  Float64 Seconds;
  Float64 v7;
  CMTime time;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigLoopingEditCursor %p>"), a1);
  if (*(_BYTE *)(DerivedStorage + 48))
    v4 = "looping";
  else
    v4 = "pass-through";
  CFStringAppendFormat(Mutable, 0, CFSTR("{ %s"), v4);
  if (*(_BYTE *)(DerivedStorage + 48))
  {
    v5 = *(_OWORD *)DerivedStorage;
    time.epoch = *(_QWORD *)(DerivedStorage + 16);
    *(_OWORD *)&time.value = v5;
    Seconds = CMTimeGetSeconds(&time);
    time = *(CMTime *)(DerivedStorage + 24);
    v7 = CMTimeGetSeconds(&time);
    CFStringAppendFormat(Mutable, 0, CFSTR(" time range [%1.3f,+%1.3f]"), *(_QWORD *)&Seconds, *(_QWORD *)&v7);
  }
  CFStringAppendFormat(Mutable, 0, CFSTR(", editIndex %d }"), *(_QWORD *)(DerivedStorage + 56));
  return Mutable;
}

uint64_t loopingCursor_Copy(const void *a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  __int128 v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFGetAllocator(a1);
  FigEditCursorGetClassID();
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    v6 = CMBaseObjectGetDerivedStorage();
    v7 = *(_DWORD *)(DerivedStorage + 48);
    v8 = *(_OWORD *)(DerivedStorage + 32);
    v9 = *(_OWORD *)DerivedStorage;
    *(_OWORD *)(v6 + 16) = *(_OWORD *)(DerivedStorage + 16);
    *(_OWORD *)(v6 + 32) = v8;
    *(_DWORD *)(v6 + 48) = v7;
    *(_OWORD *)v6 = v9;
    *(_QWORD *)(v6 + 56) = *(_QWORD *)(DerivedStorage + 56);
    *a2 = 0;
  }
  return v5;
}

uint64_t loopingCursor_Step(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(_QWORD *)(DerivedStorage + 56) + a2;
  *(_QWORD *)(DerivedStorage + 56) = v4 & ~(v4 >> 63);
  return (v4 >> 63) & 0xFFFFCF18;
}

uint64_t loopingCursor_GetEditSegment(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CMTime v23;
  CMTime rhs;
  CMTime time;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 48))
  {
    v4 = DerivedStorage;
    v5 = *(_QWORD *)(DerivedStorage + 56);
    if (v5)
    {
      if (*(_BYTE *)(DerivedStorage + 49))
        v6 = -1;
      else
        v6 = 0;
    }
    else
    {
      if (*(_BYTE *)(DerivedStorage + 49))
      {
        v17 = MEMORY[0x1E0CA2E68];
        v18 = *MEMORY[0x1E0CA2E68];
        *(_OWORD *)(a2 + 48) = *MEMORY[0x1E0CA2E68];
        v19 = *(_QWORD *)(v17 + 16);
        *(_QWORD *)(a2 + 64) = v19;
        v20 = *(_QWORD *)(DerivedStorage + 16);
        *(_OWORD *)(a2 + 72) = *(_OWORD *)DerivedStorage;
        *(_QWORD *)(a2 + 88) = v20;
        *(_QWORD *)(a2 + 16) = v19;
        *(_OWORD *)a2 = v18;
        v21 = *(_QWORD *)(DerivedStorage + 16);
        *(_OWORD *)(a2 + 24) = *(_OWORD *)DerivedStorage;
        *(_QWORD *)(a2 + 40) = v21;
        return 0;
      }
      v6 = 0;
    }
    time = *(CMTime *)(DerivedStorage + 24);
    CMTimeMultiply(&rhs, &time, v5 + v6);
    v7 = *(_OWORD *)v4;
    v23.epoch = *(_QWORD *)(v4 + 16);
    *(_OWORD *)&v23.value = v7;
    CMTimeAdd(&time, &v23, &rhs);
    *(CMTime *)(a2 + 48) = time;
    v8 = *(_OWORD *)(v4 + 24);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(v4 + 40);
    *(_OWORD *)(a2 + 72) = v8;
    v9 = *(_OWORD *)v4;
    v10 = *(_OWORD *)(v4 + 32);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(v4 + 16);
    *(_OWORD *)(a2 + 32) = v10;
    *(_OWORD *)a2 = v9;
  }
  else
  {
    v11 = MEMORY[0x1E0CA2E68];
    v12 = *MEMORY[0x1E0CA2E68];
    *(_OWORD *)(a2 + 48) = *MEMORY[0x1E0CA2E68];
    v13 = *(_QWORD *)(v11 + 16);
    *(_QWORD *)(a2 + 64) = v13;
    v14 = MEMORY[0x1E0CA2E30];
    v15 = *MEMORY[0x1E0CA2E30];
    *(_OWORD *)(a2 + 72) = *MEMORY[0x1E0CA2E30];
    v16 = *(_QWORD *)(v14 + 16);
    *(_QWORD *)(a2 + 88) = v16;
    *(_OWORD *)a2 = v12;
    *(_QWORD *)(a2 + 16) = v13;
    *(_OWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 40) = v16;
  }
  return 0;
}

const __CFString *FigGetNotifyingObjectForSelectionCriteriaChanged()
{
  if (_ensureAutomaticMediaSelectionInitialized_gSetupAutomaticMediaSelectionOnce != -1)
    dispatch_once_f(&_ensureAutomaticMediaSelectionInitialized_gSetupAutomaticMediaSelectionOnce, 0, (dispatch_function_t)_setupAutomaticMediaSelection);
  return CFSTR("AutomaticMediaSelectionNotification_DefaultsChanged");
}

__CFDictionary *FigAutomaticMediaSelectionCopyDefaultCriteria()
{
  __CFDictionary *DefaultMediaSelectionCriteria;

  if (_ensureAutomaticMediaSelectionInitialized_gSetupAutomaticMediaSelectionOnce != -1)
    dispatch_once_f(&_ensureAutomaticMediaSelectionInitialized_gSetupAutomaticMediaSelectionOnce, 0, (dispatch_function_t)_setupAutomaticMediaSelection);
  MEMORY[0x19402EEEC](gDefaultMediaSelectionCriteriaMutex);
  DefaultMediaSelectionCriteria = (__CFDictionary *)gDefaultMediaSelectionCriteria;
  if (gDefaultMediaSelectionCriteria
    || (DefaultMediaSelectionCriteria = _createDefaultMediaSelectionCriteria((const __CFAllocator *)*MEMORY[0x1E0C9AE00]),
        (gDefaultMediaSelectionCriteria = (uint64_t)DefaultMediaSelectionCriteria) != 0))
  {
    CFRetain(DefaultMediaSelectionCriteria);
  }
  MEMORY[0x19402EF04](gDefaultMediaSelectionCriteriaMutex);
  return DefaultMediaSelectionCriteria;
}

__CFDictionary *_createDefaultMediaSelectionCriteria(const __CFAllocator *a1)
{
  __CFDictionary *Mutable;
  __CFArray *v3;
  const __CFArray *v4;
  const __CFArray *v5;
  __CFDictionary *MediaSelectionCriteria;
  CFArrayRef v7;
  CFArrayRef v8;
  __CFDictionary *v9;
  MACaptionAppearanceDisplayType v10;
  __CFDictionary *v11;
  __CFArray *v12;
  const __CFArray *v13;
  const __CFArray *v14;
  const __CFArray *v15;
  const __CFArray *v16;
  __CFArray *v17;
  const __CFArray *v18;
  const __CFArray *v19;
  CFArrayRef v20;
  const void **v21;
  CFIndex v22;
  __CFDictionary *v23;
  __CFArray *v24;
  const __CFArray *v26;
  __CFDictionary *v27;
  CFArrayRef cf;
  __CFArray *v29;
  _QWORD v30[2];
  const void *v31[2];
  CFRange v32;
  CFRange v33;
  CFRange v34;

  v31[1] = *(const void **)MEMORY[0x1E0C80C00];
  v31[0] = CFSTR("public.auxiliary-content");
  Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return Mutable;
  v3 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  v4 = CFLocaleCopyPreferredLanguages();
  v5 = v4;
  if (v4)
  {
    v32.length = CFArrayGetCount(v4);
    v32.location = 0;
    CFArrayAppendArray(v3, v5, v32);
  }
  MediaSelectionCriteria = _createMediaSelectionCriteria(a1, 0, v3, 0, 0, v31, 1);
  if (!MediaSelectionCriteria)
  {
    v24 = 0;
    if (!v3)
      goto LABEL_44;
    goto LABEL_43;
  }
  v7 = MediaSelectionCriteria;
  CFDictionarySetValue(Mutable, CFSTR("public.visual"), MediaSelectionCriteria);
  v8 = FigMediaAccessibilityCopyPreferredAudibleCharacteristics();
  v9 = _createMediaSelectionCriteria(a1, 0, v3, 0, v8, v31, 1);
  if (!v9)
  {
    v29 = 0;
    v20 = 0;
LABEL_35:
    CFRelease(v7);
    goto LABEL_36;
  }
  CFDictionarySetValue(Mutable, CFSTR("public.audible"), v9);
  v10 = FigMediaAccessibilityCaptionsDisplayType();
  v30[0] = CFSTR("public.auxiliary-content");
  v30[1] = CFSTR("public.subtitles.forced-only");
  v11 = CFDictionaryCreateMutable(a1, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v27 = v9;
  cf = v7;
  if (v11)
  {
    FigCFDictionarySetInt32();
    v26 = v8;
    if (v10 == kMACaptionAppearanceDisplayTypeAlwaysOn)
    {
      v17 = v3;
      v19 = v5;
      v20 = FigMediaAccessibilityCopyPreferredLegibleCharacteristics();
      v21 = (const void **)v30;
      v22 = 2;
      v7 = FigMediaAccessibilityCopyPreferredLanguages();
      v9 = 0;
      v29 = 0;
    }
    else
    {
      if (v10 == kMACaptionAppearanceDisplayTypeAutomatic)
      {
        v12 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
        if (v12)
        {
          v13 = FigMediaAccessibilityCopyPreferredLanguages();
          v14 = v13;
          if (v13)
          {
            v33.length = CFArrayGetCount(v13);
            v33.location = 0;
            CFArrayAppendArray(v12, v14, v33);
          }
          v15 = CFLocaleCopyPreferredLanguages();
          v16 = v15;
          if (v15)
          {
            v34.length = CFArrayGetCount(v15);
            v34.location = 0;
            CFArrayAppendArray(v12, v16, v34);
          }
          if (v14)
            CFRelease(v14);
          if (v16)
            CFRelease(v16);
          CFDictionarySetValue(v11, CFSTR("fallbackPreferredLanguages"), v12);
        }
        v29 = v12;
        v17 = v3;
        v18 = FigMediaAccessibilityCopyPreferredLegibleCharacteristics();
        v9 = v18;
        if (v18)
        {
          v19 = v5;
          if (CFArrayGetCount(v18) >= 1)
            CFDictionarySetValue(v11, CFSTR("fallbackPreferredCharacteristics"), v9);
        }
        else
        {
          v19 = v5;
        }
        v20 = 0;
        v7 = 0;
      }
      else
      {
        v17 = v3;
        v19 = v5;
        v20 = 0;
        v9 = 0;
        v7 = 0;
        v29 = 0;
      }
      v21 = 0;
      v22 = 0;
    }
    v23 = _createMediaSelectionCriteria(a1, (uint64_t)v11, v7, 0, v20, v21, v22);
    if (v23)
      CFDictionarySetValue(Mutable, CFSTR("public.legible"), v23);
    v5 = v19;
    v3 = v17;
    v8 = v26;
  }
  else
  {
    v20 = 0;
    v9 = 0;
    v7 = 0;
    v23 = 0;
    v29 = 0;
  }
  CFRelease(cf);
  CFRelease(v27);
  if (v23)
    CFRelease(v23);
  if (v11)
    CFRelease(v11);
  if (v7)
    goto LABEL_35;
LABEL_36:
  if (v8)
    CFRelease(v8);
  if (v20)
    CFRelease(v20);
  if (v9)
    CFRelease(v9);
  v24 = v29;
  if (!v3)
    goto LABEL_44;
LABEL_43:
  CFRelease(v3);
LABEL_44:
  if (v5)
    CFRelease(v5);
  if (v24)
    CFRelease(v24);
  return Mutable;
}

uint64_t FigAutomaticMediaSelectionGetMediaSelectionGroupsForMajorIntrinsicCharacteristics(uint64_t theArray, const __CFDictionary **a2, const __CFDictionary **a3, const __CFDictionary **a4)
{
  const __CFArray *v7;
  uint64_t v8;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  const __CFArray *v11;
  CFIndex v12;
  CFRange v13;
  CFRange v14;
  CFRange v15;

  v7 = (const __CFArray *)theArray;
  if (theArray)
  {
    theArray = CFArrayGetCount((CFArrayRef)theArray);
    v8 = theArray;
    if (!a2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v8 = 0;
  if (a2)
LABEL_3:
    *a2 = 0;
LABEL_4:
  if (a3)
    *a3 = 0;
  if (a4)
    *a4 = 0;
  if (v8 >= 1)
  {
    for (i = 0; i != v8; ++i)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v7, i);
      theArray = (uint64_t)CFDictionaryGetValue(ValueAtIndex, CFSTR("MediaSelectionGroupMediaCharacteristics"));
      if (theArray)
      {
        v11 = (const __CFArray *)theArray;
        theArray = CFArrayGetCount((CFArrayRef)theArray);
        v12 = theArray;
        if (a2)
        {
          if (!*a2)
          {
            v13.location = 0;
            v13.length = theArray;
            theArray = CFArrayContainsValue(v11, v13, CFSTR("public.visual"));
            if ((_DWORD)theArray)
              *a2 = ValueAtIndex;
          }
        }
        if (a3)
        {
          if (!*a3)
          {
            v14.location = 0;
            v14.length = v12;
            theArray = CFArrayContainsValue(v11, v14, CFSTR("public.audible"));
            if ((_DWORD)theArray)
              *a3 = ValueAtIndex;
          }
        }
        if (a4 && !*a4)
        {
          v15.location = 0;
          v15.length = v12;
          theArray = CFArrayContainsValue(v11, v15, CFSTR("public.legible"));
          if ((_DWORD)theArray)
            *a4 = ValueAtIndex;
        }
      }
    }
  }
  return theArray;
}

const __CFDictionary *FigAutomaticMediaSelectionGetOptionFromMediaSelectionGroupAssociatedWithOption(const __CFDictionary *a1, int a2, int a3, int a4, CFDictionaryRef theDict)
{
  const __CFArray *Value;
  const __CFArray *v7;
  const __CFArray *v8;
  CFIndex v9;
  CFIndex v10;
  CFIndex v11;
  CFIndex v12;
  CFIndex v13;
  CFIndex v14;
  const __CFDictionary *v15;
  const __CFString *v16;
  const __CFString *v17;
  const __CFString *v18;
  CFIndex Count;
  CFIndex v20;
  CFIndex v21;
  const __CFDictionary *ValueAtIndex;
  const __CFString *v23;
  const __CFDictionary *v24;
  const __CFDictionary *v25;
  int64_t v26;
  const void **v27;
  const void **v28;
  const __CFString *v29;
  uint64_t v30;
  const __CFString *v31;
  const __CFString *v32;
  char v33;
  CFIndex v34;
  CFIndex v35;
  CFIndex v36;
  const __CFDictionary *v37;
  const __CFString *v39;
  const __CFAllocator *allocator;
  const __CFDictionary *theDicta;
  const void *v42;
  CFIndex v43;
  CFIndex v44;
  CFDictionaryRef v45;
  const __CFDictionary *ComponentsFromLocaleIdentifier;
  const __CFDictionary *v47;
  BOOL v51;
  int v52;
  BOOL v53;
  int v54;
  BOOL v55;
  int v56;

  Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("MediaSelectionGroupOptions"));
  if (!a1)
    return 0;
  v7 = Value;
  v8 = (const __CFArray *)CFDictionaryGetValue(a1, CFSTR("MediaSelectionOptionsAssociatedPersistentIDs"));
  theDicta = a1;
  v42 = CFDictionaryGetValue(a1, CFSTR("MediaSelectionOptionsExtendedLanguageTag"));
  if (!v8 || (v9 = CFArrayGetCount(v8), v9 < 1))
  {
LABEL_19:
    v16 = CFSTR("MediaSelectionOptionsUnicodeLanguageIdentifier");
    v17 = (const __CFString *)CFDictionaryGetValue(theDicta, CFSTR("MediaSelectionOptionsUnicodeLanguageIdentifier"));
    if (v17)
    {
      if (!v7)
        return 0;
      v18 = v17;
      Count = CFArrayGetCount(v7);
      if (Count >= 1)
      {
        v20 = Count;
        v47 = 0;
        v21 = 0;
        allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v44 = Count;
        v39 = v18;
        while (1)
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v7, v21);
          CFDictionaryGetValue(ValueAtIndex, CFSTR("MediaSelectionOptionsMediaType"));
          v54 = 0;
          v23 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, v16);
          FigCFStringGetOSTypeValue();
          if (!v23 || v54 == 1668047728)
            goto LABEL_50;
          if (v18 == v23)
          {
            v33 = 0;
            v25 = 0;
            v24 = 0;
            v27 = 0;
            v28 = 0;
            goto LABEL_39;
          }
          ComponentsFromLocaleIdentifier = CFLocaleCreateComponentsFromLocaleIdentifier(allocator, v18);
          if (ComponentsFromLocaleIdentifier)
          {
            v24 = CFLocaleCreateComponentsFromLocaleIdentifier(allocator, v23);
            if (!v24)
            {
              v27 = 0;
              v28 = 0;
              v33 = 1;
LABEL_37:
              v25 = ComponentsFromLocaleIdentifier;
              goto LABEL_39;
            }
            v25 = ComponentsFromLocaleIdentifier;
            v26 = CFDictionaryGetCount(ComponentsFromLocaleIdentifier);
            v27 = (const void **)malloc_type_calloc(v26, 8uLL, 0x80040B8603338uLL);
            v28 = (const void **)malloc_type_calloc(v26, 8uLL, 0x80040B8603338uLL);
            CFDictionaryGetKeysAndValues(ComponentsFromLocaleIdentifier, v27, v28);
            if (v26 >= 1)
            {
              v29 = v16;
              v30 = 0;
              while (1)
              {
                v31 = (const __CFString *)v28[v30];
                v32 = (const __CFString *)CFDictionaryGetValue(v24, v27[v30]);
                if (!v32 || CFStringCompare(v32, v31, 0))
                  break;
                if (v26 == ++v30)
                {
                  v33 = 0;
                  goto LABEL_36;
                }
              }
              v33 = 1;
LABEL_36:
              v16 = v29;
              v18 = v39;
              goto LABEL_37;
            }
            v33 = 0;
          }
          else
          {
            v25 = 0;
            v24 = 0;
            v27 = 0;
            v28 = 0;
            v33 = 1;
          }
LABEL_39:
          free(v27);
          free(v28);
          if (v25)
            CFRelease(v25);
          if (v24)
            CFRelease(v24);
          if ((v33 & 1) != 0)
          {
            v20 = v44;
          }
          else
          {
            v20 = v44;
            if (v54 != 1952807028 && v54 != 1935832172)
            {
LABEL_71:
              v47 = ValueAtIndex;
              goto LABEL_55;
            }
            v53 = 0;
            if (_legibleOptionMeetsMainProgramContentAndForcedOnlyCriteria(ValueAtIndex, a2, a3, a4, &v53))
            {
              if (v53)
                goto LABEL_71;
              v47 = ValueAtIndex;
            }
          }
LABEL_50:
          if (++v21 == v20)
            goto LABEL_55;
        }
      }
    }
    v47 = 0;
LABEL_55:
    if (v47 || !v42)
      return v47;
    if (v7)
    {
      v34 = CFArrayGetCount(v7);
      if (v34 >= 1)
      {
        v35 = v34;
        v47 = 0;
        v36 = 0;
        while (1)
        {
          v37 = (const __CFDictionary *)CFArrayGetValueAtIndex(v7, v36);
          CFDictionaryGetValue(v37, CFSTR("MediaSelectionOptionsAssociatedExtendedLanguageTag"));
          CFDictionaryGetValue(v37, CFSTR("MediaSelectionOptionsMediaType"));
          v52 = 0;
          FigCFStringGetOSTypeValue();
          if (v52 != 1668047728 && FigCFEqual())
          {
            if (v52 != 1952807028 && v52 != 1935832172)
              return v37;
            v51 = 0;
            if (_legibleOptionMeetsMainProgramContentAndForcedOnlyCriteria(v37, a2, a3, a4, &v51))
            {
              if (v51)
                return v37;
              v47 = v37;
            }
          }
          if (v35 == ++v36)
            return v47;
        }
      }
    }
    return 0;
  }
  v10 = v9;
  v11 = 0;
  v43 = v9;
  v45 = v8;
  while (2)
  {
    CFArrayGetValueAtIndex(v8, v11);
    if (!v7)
      goto LABEL_18;
    v12 = CFArrayGetCount(v7);
    if (v12 < 1)
      goto LABEL_18;
    v13 = v12;
    v47 = 0;
    v14 = 0;
    while (1)
    {
      v15 = (const __CFDictionary *)CFArrayGetValueAtIndex(v7, v14);
      CFDictionaryGetValue(v15, CFSTR("MediaSelectionOptionsPersistentID"));
      CFDictionaryGetValue(v15, CFSTR("MediaSelectionOptionsMediaType"));
      v56 = 0;
      FigCFStringGetOSTypeValue();
      if (!FigCFEqual())
        goto LABEL_14;
      if (v56 != 1952807028 && v56 != 1935832172)
        break;
      v55 = 0;
      if (_legibleOptionMeetsMainProgramContentAndForcedOnlyCriteria(v15, a2, a3, a4, &v55))
      {
        if (v55)
          break;
        v47 = v15;
      }
LABEL_14:
      if (v13 == ++v14)
        goto LABEL_17;
    }
    v47 = v15;
LABEL_17:
    v8 = v45;
    v10 = v43;
    if (!v47)
    {
LABEL_18:
      if (++v11 == v10)
        goto LABEL_19;
      continue;
    }
    return v47;
  }
}

uint64_t _legibleOptionMeetsMainProgramContentAndForcedOnlyCriteria(const __CFDictionary *a1, int a2, int a3, int a4, BOOL *a5)
{
  const void *Value;
  const void *v11;
  uint64_t result;

  Value = CFDictionaryGetValue(a1, CFSTR("MediaSelectionOptionsDisplaysForcedSubtitlesOnly"));
  v11 = (const void *)*MEMORY[0x1E0C9AE50];
  if (a5)
    *a5 = Value == v11;
  if (a3 && Value != v11 || a2 && CFDictionaryGetValue(a1, CFSTR("MediaSelectionOptionsIsAuxiliaryContent")) == v11)
    return 0;
  if (!a4)
    return 1;
  CFDictionaryGetValue(a1, CFSTR("MediaSelectionOptionsTaggedMediaCharacteristics"));
  result = FigCFArrayContainsValue();
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t FigAutomaticMediaSelectionCreateSecondaryForcedSubtitlesSelectedMediaDictionary(const __CFArray *a1, const __CFDictionary *a2)
{
  const __CFDictionary *v3;
  const __CFDictionary *OptionMatchingSelectionOptionIDAndDisplaysNonForcedSubtitles;

  v3 = (const __CFDictionary *)_copySelectedMediaDictionaryMatchingGroupIDAndMediaType(a1, a2);
  OptionMatchingSelectionOptionIDAndDisplaysNonForcedSubtitles = _getOptionMatchingSelectionOptionIDAndDisplaysNonForcedSubtitles(a2, v3);
  if (OptionMatchingSelectionOptionIDAndDisplaysNonForcedSubtitles
    && CFDictionaryGetValue(OptionMatchingSelectionOptionIDAndDisplaysNonForcedSubtitles, CFSTR("MediaSelectionOptionsMediaType")))
  {
    FigCFStringGetOSTypeValue();
  }
  if (v3)
    CFRelease(v3);
  return 0;
}

CFTypeRef _copySelectedMediaDictionaryMatchingGroupIDAndMediaType(CFArrayRef theArray, const __CFDictionary *a2)
{
  CFIndex Count;
  CFIndex v5;
  const __CFDictionary *ValueAtIndex;

  if (theArray)
    Count = CFArrayGetCount(theArray);
  else
    Count = 0;
  if (a2)
  {
    CFDictionaryGetValue(a2, CFSTR("MediaSelectionGroupID"));
    CFDictionaryGetValue(a2, CFSTR("MediaSelectionGroupMediaType"));
  }
  if (Count < 1)
    return 0;
  v5 = 0;
  while (1)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v5);
    CFDictionaryGetValue(ValueAtIndex, CFSTR("MediaSelectionGroupID"));
    CFDictionaryGetValue(ValueAtIndex, CFSTR("MediaSelectionGroupMediaType"));
    if (FigCFEqual())
    {
      if (FigCFEqual())
        break;
    }
    if (Count == ++v5)
      return 0;
  }
  if (ValueAtIndex)
    return CFRetain(ValueAtIndex);
  else
    return 0;
}

const __CFDictionary *_getOptionMatchingSelectionOptionIDAndDisplaysNonForcedSubtitles(const __CFDictionary *a1, const __CFDictionary *a2)
{
  const __CFArray *Value;
  const __CFArray *v4;
  CFIndex Count;
  const void **v6;
  CFIndex v7;
  const void *v8;
  const __CFDictionary *ValueAtIndex;
  const void *v10;
  _BOOL4 v12;

  if (a1)
  {
    Value = (const __CFArray *)CFDictionaryGetValue(a1, CFSTR("MediaSelectionGroupOptions"));
    v4 = Value;
    if (Value)
    {
      Count = CFArrayGetCount(Value);
      goto LABEL_6;
    }
  }
  else
  {
    v4 = 0;
  }
  Count = 0;
LABEL_6:
  v6 = (const void **)MEMORY[0x1E0C9AE50];
  if (a2)
  {
    CFDictionaryGetValue(a2, CFSTR("MediaSelectionOptionsPersistentID"));
    v12 = *v6 == CFDictionaryGetValue(a2, CFSTR("MediaSelectionOptionsDisplaysNonForcedSubtitles"));
  }
  else
  {
    v12 = 0;
  }
  if (Count < 1)
    return 0;
  v7 = 0;
  v8 = *v6;
  while (1)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v4, v7);
    CFDictionaryGetValue(ValueAtIndex, CFSTR("MediaSelectionOptionsPersistentID"));
    v10 = CFDictionaryGetValue(ValueAtIndex, CFSTR("MediaSelectionOptionsDisplaysNonForcedSubtitles"));
    if (FigCFEqual())
    {
      if (v12 == (v8 == v10))
        break;
    }
    if (Count == ++v7)
      return 0;
  }
  return ValueAtIndex;
}

__CFDictionary *_createSelectedMediaDictionaryForOptionInGroup(const __CFAllocator *a1, const __CFDictionary *a2, const __CFDictionary *a3)
{
  __CFDictionary *Mutable;
  const void *Value;
  const void *v7;
  __CFDictionary *v8;
  const __CFString *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  __CFDictionary *v15;
  const __CFString *v16;
  const void *v17;

  Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!a2)
    goto LABEL_11;
  Value = CFDictionaryGetValue(a2, CFSTR("MediaSelectionOptionsPersistentID"));
  v7 = CFDictionaryGetValue(a2, CFSTR("MediaSelectionOptionsUniqueOutOfBandID"));
  if (Value)
  {
    v8 = Mutable;
    v9 = CFSTR("MediaSelectionOptionsPersistentID");
    v10 = Value;
LABEL_6:
    CFDictionarySetValue(v8, v9, v10);
    goto LABEL_7;
  }
  v10 = v7;
  if (v7)
  {
    v8 = Mutable;
    v9 = CFSTR("MediaSelectionOptionsUniqueOutOfBandID");
    goto LABEL_6;
  }
LABEL_7:
  v11 = CFDictionaryGetValue(a2, CFSTR("MediaSelectionOptionsDisplaysNonForcedSubtitles"));
  if (v11)
    CFDictionarySetValue(Mutable, CFSTR("MediaSelectionOptionsDisplaysNonForcedSubtitles"), v11);
  v12 = CFDictionaryGetValue(a2, CFSTR("MediaSelectionOptionsAudioCompositionPresetIndex"));
  if (v12)
    CFDictionarySetValue(Mutable, CFSTR("MediaSelectionOptionsAudioCompositionPresetIndex"), v12);
LABEL_11:
  v13 = CFDictionaryGetValue(a3, CFSTR("MediaSelectionGroupID"));
  v14 = CFDictionaryGetValue(a3, CFSTR("MediaSelectionGroupMediaType"));
  if (v13)
  {
    v15 = Mutable;
    v16 = CFSTR("MediaSelectionGroupID");
    v17 = v13;
LABEL_15:
    CFDictionarySetValue(v15, v16, v17);
    goto LABEL_16;
  }
  v17 = v14;
  if (v14)
  {
    v15 = Mutable;
    v16 = CFSTR("MediaSelectionGroupMediaType");
    goto LABEL_15;
  }
LABEL_16:
  CFDictionarySetValue(Mutable, CFSTR("AutomaticallySelected"), (const void *)*MEMORY[0x1E0C9AE50]);
  return Mutable;
}

uint64_t FigAutomaticMediaSelectionCreateSelectedMediaArrayForCriteria(uint64_t a1, const __CFArray *a2, const __CFDictionary *a3, int a4, _QWORD *a5)
{
  return FigAutomaticMediaSelectionCreateSelectedMediaArrayForCriteriaWithLegibleFallbackCriteria(a1, a2, a3, 0, 0, a4, a5);
}

uint64_t FigAutomaticMediaSelectionCreateSelectedMediaArrayForCriteriaWithLegibleFallbackCriteria(uint64_t a1, const __CFArray *a2, const __CFDictionary *a3, const __CFDictionary *a4, int a5, int a6, _QWORD *a7)
{
  const __CFAllocator *v13;
  uint64_t MutableCopy;
  const __CFArray *v16;
  const __CFDictionary *AutomaticSelectedMediaArrayForCriteria;
  uint64_t v18;
  CFTypeRef cf;

  cf = 0;
  *a7 = 0;
  v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (a2)
  {
    MutableCopy = FigCFArrayCreateMutableCopy();
    if (MutableCopy)
    {
      v16 = (const __CFArray *)MutableCopy;
      AutomaticSelectedMediaArrayForCriteria = _createAutomaticSelectedMediaArrayForCriteria(v13, a1, a2, a3, a4, a5, a6, (__CFArray **)&cf);
      if ((_DWORD)AutomaticSelectedMediaArrayForCriteria)
      {
        v18 = (uint64_t)AutomaticSelectedMediaArrayForCriteria;
      }
      else
      {
        v18 = FigAutomaticMediaSelectionCoalesceSelectedMediaArrays(v16, (CFArrayRef)cf, 0);
        if (!(_DWORD)v18)
        {
          *a7 = v16;
          goto LABEL_6;
        }
      }
      CFRelease(v16);
    }
    else
    {
      v18 = FigSignalErrorAt();
    }
  }
  else
  {
    v18 = (uint64_t)_createAutomaticSelectedMediaArrayForCriteria((const __CFAllocator *)*MEMORY[0x1E0C9AE00], a1, 0, a3, a4, a5, a6, (__CFArray **)&cf);
    if (!(_DWORD)v18)
    {
      *a7 = cf;
      return v18;
    }
  }
LABEL_6:
  if (cf)
    CFRelease(cf);
  return v18;
}

const __CFDictionary *_createAutomaticSelectedMediaArrayForCriteria(const __CFAllocator *a1, uint64_t a2, const __CFArray *a3, const __CFDictionary *a4, const __CFDictionary *a5, int a6, int a7, __CFArray **a8)
{
  CFMutableArrayRef Mutable;
  const __CFAllocator **v13;
  __CFDictionary *v14;
  __CFDictionary *MergedCriteria;
  const __CFDictionary *MutableCopy;
  char v17;
  char v18;
  const __CFDictionary *v19;
  const void *v20;
  CFArrayRef v21;
  __CFArray *v22;
  const __CFDictionary *Value;
  const __CFDictionary *v24;
  __CFDictionary *v25;
  const __CFArray *v26;
  const __CFArray *v27;
  CFIndex v28;
  const __CFArray *v29;
  const __CFArray *v30;
  CFIndex Count;
  const __CFArray *v32;
  const __CFArray *v33;
  CFTypeRef v34;
  CFIndex v35;
  const __CFDictionary *ValueAtIndex;
  const void *v37;
  const void *v38;
  const void *v39;
  const void *v40;
  const __CFArray *v41;
  const void *v42;
  CFIndex i;
  const __CFDictionary *v44;
  const __CFDictionary *v45;
  const __CFArray *v46;
  const __CFArray *v47;
  const void *v48;
  __CFDictionary *v49;
  __CFDictionary *v50;
  const __CFDictionary *v51;
  uint64_t v52;
  int v53;
  const __CFDictionary *SelectedMediaDictionaryForGroupUsingCriteria;
  const __CFDictionary *v56;
  const __CFDictionary *v57;
  const __CFDictionary *v58;
  const __CFDictionary *v59;
  int v60;
  const __CFDictionary *v61;
  const __CFDictionary *v62;
  const __CFDictionary *v63;
  CFIndex v64;
  CFIndex CountOfKey;
  CFIndex v66;
  CFIndex v67;
  uint64_t v68;
  const __CFArray *v69;
  CFIndex v70;
  BOOL v71;
  const __CFDictionary *v72;
  __CFDictionary *MediaSelectionCriteria;
  const __CFDictionary *OptionMatchingSelectionOptionIDAndDisplaysNonForcedSubtitles;
  const void *v75;
  CFArrayRef v76;
  const __CFArray *v77;
  const __CFArray *v78;
  unsigned int v79;
  const __CFDictionary *OptionFromMediaSelectionGroupAssociatedWithOption;
  const __CFArray *v81;
  const __CFArray *v82;
  const __CFArray *v83;
  const __CFArray *v84;
  const __CFArray *v85;
  const void *v86;
  const void *v87;
  const __CFArray *v88;
  CFDictionaryRef v89;
  const __CFDictionary *v90;
  const __CFDictionary *v91;
  const __CFDictionary *v92;
  int v94;
  CFIndex v96;
  const __CFArray *v97;
  __CFArray *v99;
  const __CFDictionary *v100;
  const __CFDictionary *v101;
  CFArrayRef theArraya;
  CFArrayRef theArrayb;
  const __CFAllocator *v105;
  CFDictionaryRef v106;
  const __CFDictionary *v107;
  CFDictionaryRef v108;
  CFDictionaryRef v109;
  void *key;
  int keya;
  CFMutableArrayRef keyb;
  int keyc;
  const __CFAllocator *allocator;
  unsigned __int8 v115;
  CFTypeRef SelectedMediaDictionaryForOptionInGroup;
  CFDictionaryRef theDict;
  CFTypeRef cf;
  const __CFDictionary *v119;
  __CFDictionary *v120;
  const __CFDictionary *v121[2];
  const __CFString *context;
  const __CFString *v123;
  uint64_t v124;
  CFRange v125;
  CFRange v126;
  CFRange v127;
  CFRange v128;
  CFRange v129;

  v124 = *MEMORY[0x1E0C80C00];
  v120 = 0;
  v121[0] = 0;
  v119 = 0;
  theDict = 0;
  cf = 0;
  SelectedMediaDictionaryForOptionInGroup = 0;
  v115 = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v99 = Mutable;
    v13 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
    v14 = FigAutomaticMediaSelectionCopyDefaultCriteria();
    MergedCriteria = _createMergedCriteria(a1, v14, a4);
    if (v14)
      CFRelease(v14);
    v105 = *v13;
    allocator = a1;
    v94 = a7;
    if (a7)
    {
      MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
      if (MutableCopy)
      {
        v106 = MergedCriteria;
        key = (void *)a2;
        context = CFSTR("public.audible");
        v123 = CFSTR("public.legible");
        v17 = 1;
        do
        {
          v18 = v17;
          v121[1] = 0;
          v19 = MutableCopy;
          FigCFDictionaryGetValueForCaseInsensitiveKeyIfPresent();
          v20 = (const void *)FigCFDictionaryCreateMutableCopy();
          v21 = CFArrayCreate(a1, (const void **)kFigStdAssetMediaCharacteristic_HLSAvailableOffline, 1, MEMORY[0x1E0C9B378]);
          if (v21)
          {
            FigCFDictionarySetValue();
            CFRelease(v21);
          }
          MutableCopy = v19;
          FigCFDictionarySetValue();
          if (v20)
            CFRelease(v20);
          v17 = 0;
        }
        while ((v18 & 1) != 0);
        a2 = (uint64_t)key;
        MergedCriteria = v106;
      }
      if (MergedCriteria)
        CFRelease(MergedCriteria);
    }
    else
    {
      MutableCopy = MergedCriteria;
    }
    v22 = v99;
    FigAutomaticMediaSelectionGetMediaSelectionGroupsForMajorIntrinsicCharacteristics(a2, v121, &v119, &theDict);
    Value = (const __CFDictionary *)CFDictionaryGetValue(MutableCopy, CFSTR("public.audible"));
    v24 = Value;
    v25 = 0;
    if (v119 && theDict && Value)
    {
      v26 = (const __CFArray *)CFDictionaryGetValue(Value, CFSTR("preferredLanguages"));
      if (v26)
      {
        v27 = v26;
        v89 = v24;
        v91 = MutableCopy;
        if (!theDict)
          goto LABEL_57;
        v28 = (CFIndex)v119;
        v29 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("MediaSelectionGroupOptions"));
        if (!v29)
          goto LABEL_57;
        v30 = v29;
        Count = CFArrayGetCount(v29);
        if (v28)
        {
          v32 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v28, CFSTR("MediaSelectionGroupOptions"));
          v33 = v32;
          v28 = v32 ? CFArrayGetCount(v32) : 0;
        }
        else
        {
          v33 = 0;
        }
        if (Count < 1)
          goto LABEL_57;
        v88 = v27;
        v107 = 0;
        v35 = 0;
        v96 = Count;
        v97 = v30;
        do
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v30, v35);
          v37 = CFDictionaryGetValue(ValueAtIndex, CFSTR("MediaSelectionOptionsUnicodeLanguageIdentifier"));
          if (v37)
          {
            if ((v38 = v37, v39 = CFDictionaryGetValue(ValueAtIndex, CFSTR("MediaSelectionOptionsPersistentID")), v107)
              && (v40 = CFDictionaryGetValue(v107, v38)) != 0
              && (v41 = (const __CFArray *)CFRetain(v40)) != 0
              || (v41 = CFArrayCreateMutable(v105, 0, MEMORY[0x1E0C9B378])) != 0)
            {
              _addToMutableArrayIfNotPresent(v38, v41);
              v42 = CFDictionaryGetValue(ValueAtIndex, CFSTR("MediaSelectionOptionsAssociatedUnicodeLanguageIdentifier"));
              if (v42)
                _addToMutableArrayIfNotPresent(v42, v41);
              if (v39 && v28 >= 1)
              {
                for (i = 0; i != v28; ++i)
                {
                  v44 = (const __CFDictionary *)CFArrayGetValueAtIndex(v33, i);
                  if (v44)
                  {
                    v45 = v44;
                    v46 = (const __CFArray *)CFDictionaryGetValue(v44, CFSTR("MediaSelectionOptionsAssociatedPersistentIDs"));
                    if (v46)
                    {
                      v47 = v46;
                      v125.length = CFArrayGetCount(v46);
                      v125.location = 0;
                      if (CFArrayContainsValue(v47, v125, v39))
                      {
                        v48 = CFDictionaryGetValue(v45, CFSTR("MediaSelectionOptionsUnicodeLanguageIdentifier"));
                        if (v48)
                          _addToMutableArrayIfNotPresent(v48, v41);
                      }
                    }
                  }
                }
              }
              v49 = v107;
              if (v107 || (v49 = CFDictionaryCreateMutable(v105, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) != 0)
              {
                v107 = v49;
                CFDictionarySetValue(v49, v38, v41);
              }
              else
              {
                v107 = 0;
              }
              Count = v96;
              v30 = v97;
              CFRelease(v41);
            }
          }
          ++v35;
        }
        while (v35 != Count);
        context = (const __CFString *)v107;
        v123 = 0;
        v22 = v99;
        v27 = v88;
        if (v107)
        {
          v123 = (const __CFString *)CFArrayCreateMutable(v105, 0, MEMORY[0x1E0C9B378]);
          v126.length = CFArrayGetCount(v88);
          v126.location = 0;
          CFArrayApplyFunction(v88, v126, (CFArrayApplierFunction)_addToAssociatedLanguages, &context);
          v34 = v123;
          if (context)
            CFRelease(context);
        }
        else
        {
LABEL_57:
          v34 = CFRetain(v27);
        }
        v24 = v89;
        MutableCopy = v91;
        a1 = allocator;
        if (v34)
        {
          v50 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
          v25 = v50;
          if (!v50)
          {
            SelectedMediaDictionaryForGroupUsingCriteria = (const __CFDictionary *)FigSignalErrorAt();
LABEL_75:
            CFRelease(v34);
            goto LABEL_76;
          }
          CFDictionarySetValue(v50, CFSTR("preferredLanguages"), v34);
          v24 = v25;
        }
        else
        {
          v25 = 0;
        }
      }
      else
      {
        v25 = 0;
        v34 = 0;
      }
    }
    else
    {
      v34 = 0;
    }
    if (v121[0])
    {
      v120 = (__CFDictionary *)_copySelectedMediaDictionaryMatchingGroupIDAndMediaType(a3, v121[0]);
      if (!v120)
      {
        v51 = (const __CFDictionary *)CFDictionaryGetValue(MutableCopy, CFSTR("public.visual"));
        v52 = _createSelectedMediaDictionaryForGroupUsingCriteria(a1, v121[0], v51, 1, &v120, 0);
        if ((_DWORD)v52)
          goto LABEL_160;
        a1 = allocator;
        if (v120)
          CFArrayAppendValue(v22, v120);
      }
    }
    if (!v119)
      goto LABEL_69;
    cf = _copySelectedMediaDictionaryMatchingGroupIDAndMediaType(a3, v119);
    if (cf)
      goto LABEL_69;
    v52 = _createSelectedMediaDictionaryForGroupUsingCriteria(a1, v119, v24, 1, (__CFDictionary **)&cf, &v115);
    if (!(_DWORD)v52)
    {
      if (cf)
      {
        CFArrayAppendValue(v22, cf);
        v53 = 1;
        goto LABEL_70;
      }
LABEL_69:
      v53 = 0;
LABEL_70:
      if (!theDict)
        goto LABEL_72;
      SelectedMediaDictionaryForOptionInGroup = _copySelectedMediaDictionaryMatchingGroupIDAndMediaType(a3, theDict);
      if (SelectedMediaDictionaryForOptionInGroup)
        goto LABEL_72;
      v56 = (const __CFDictionary *)CFDictionaryGetValue(MutableCopy, CFSTR("public.legible"));
      v58 = theDict;
      v57 = (const __CFDictionary *)cf;
      v59 = v119;
      v60 = v115;
      SelectedMediaDictionaryForOptionInGroup = 0;
      if (!theDict)
        goto LABEL_72;
      v61 = v56;
      if (v56)
      {
        keya = v115;
        v108 = (CFDictionaryRef)cf;
        v100 = theDict;
        theArraya = v119;
        v62 = v24;
        v63 = MutableCopy;
        v64 = CFDictionaryGetCount(v56);
        CountOfKey = CFDictionaryGetCountOfKey(v61, CFSTR("captionAppearanceDisplayType"));
        v66 = CFDictionaryGetCountOfKey(v61, CFSTR("fallbackPreferredLanguages"));
        v67 = CFDictionaryGetCountOfKey(v61, CFSTR("fallbackPreferredCharacteristics"));
        v68 = v64 - (CountOfKey + v66 + v67 + CFDictionaryGetCountOfKey(v61, CFSTR("precludedMediaCharacteristics")));
        v69 = (const __CFArray *)CFDictionaryGetValue(v61, CFSTR("requiredMediaCharacteristics"));
        if (v69)
        {
          v70 = CFArrayGetCount(v69);
          v68 -= v70 == (FigCFArrayContainsValue() != 0);
        }
        v71 = v68 < 1;
        MutableCopy = v63;
        v24 = v62;
        v22 = v99;
        v58 = v100;
        v59 = theArraya;
        v57 = v108;
        v60 = keya;
        if (!v71)
        {
          SelectedMediaDictionaryForGroupUsingCriteria = (const __CFDictionary *)_createSelectedMediaDictionaryForGroupUsingCriteria(allocator, v100, v61, 0, (__CFDictionary **)&SelectedMediaDictionaryForOptionInGroup, 0);
          goto LABEL_98;
        }
      }
      if (!v57
        || !(v53 | a6)
        || (keyc = v60, _getCaptionAppearanceDisplayType() != kMACaptionAppearanceDisplayTypeAutomatic))
      {
        v72 = 0;
        keyb = 0;
        MediaSelectionCriteria = 0;
        SelectedMediaDictionaryForGroupUsingCriteria = 0;
        goto LABEL_115;
      }
      OptionMatchingSelectionOptionIDAndDisplaysNonForcedSubtitles = _getOptionMatchingSelectionOptionIDAndDisplaysNonForcedSubtitles(v59, v57);
      SelectedMediaDictionaryForGroupUsingCriteria = OptionMatchingSelectionOptionIDAndDisplaysNonForcedSubtitles;
      if (!OptionMatchingSelectionOptionIDAndDisplaysNonForcedSubtitles)
      {
LABEL_98:
        v72 = 0;
        keyb = 0;
        MediaSelectionCriteria = 0;
LABEL_115:
        if (!SelectedMediaDictionaryForOptionInGroup)
        {
LABEL_120:
          if (!v72)
            v72 = _getOptionMatchingSelectionOptionIDAndDisplaysNonForcedSubtitles(v59, v57);
          OptionFromMediaSelectionGroupAssociatedWithOption = FigAutomaticMediaSelectionGetOptionFromMediaSelectionGroupAssociatedWithOption(v72, 1, 1, v94, v58);
          SelectedMediaDictionaryForOptionInGroup = _createSelectedMediaDictionaryForOptionInGroup(allocator, OptionFromMediaSelectionGroupAssociatedWithOption, v58);
          if (!SelectedMediaDictionaryForOptionInGroup)
            SelectedMediaDictionaryForGroupUsingCriteria = (const __CFDictionary *)FigSignalErrorAt();
          goto LABEL_124;
        }
        if (!CFDictionaryContainsKey((CFDictionaryRef)SelectedMediaDictionaryForOptionInGroup, CFSTR("MediaSelectionOptionsPersistentID"))&& !CFDictionaryContainsKey((CFDictionaryRef)SelectedMediaDictionaryForOptionInGroup, CFSTR("MediaSelectionOptionsUniqueOutOfBandID")))
        {
          if (SelectedMediaDictionaryForOptionInGroup)
          {
            CFRelease(SelectedMediaDictionaryForOptionInGroup);
            SelectedMediaDictionaryForOptionInGroup = 0;
          }
          goto LABEL_120;
        }
LABEL_124:
        if (keyb)
          CFRelease(keyb);
        if (MediaSelectionCriteria)
          CFRelease(MediaSelectionCriteria);
        if ((_DWORD)SelectedMediaDictionaryForGroupUsingCriteria)
        {
LABEL_74:
          if (!v34)
            goto LABEL_76;
          goto LABEL_75;
        }
        if (SelectedMediaDictionaryForOptionInGroup)
          CFArrayAppendValue(v22, SelectedMediaDictionaryForOptionInGroup);
LABEL_72:
        SelectedMediaDictionaryForGroupUsingCriteria = 0;
        if (a8)
        {
          *a8 = v22;
          v22 = 0;
        }
        goto LABEL_74;
      }
      v109 = v57;
      theArrayb = v59;
      v90 = v24;
      v92 = MutableCopy;
      v75 = CFDictionaryGetValue(OptionMatchingSelectionOptionIDAndDisplaysNonForcedSubtitles, CFSTR("MediaSelectionOptionsLanguageCode"));
      v76 = CFLocaleCopyPreferredLanguages();
      v77 = CFArrayCreateMutable(v105, 0, MEMORY[0x1E0C9B378]);
      _appendOptionLanguages(SelectedMediaDictionaryForGroupUsingCriteria, v77);
      v78 = (const __CFArray *)FigCopyRankedLanguagesAccordingToPreferredLanguages();
      v101 = SelectedMediaDictionaryForGroupUsingCriteria;
      v79 = _optionLanguageMatchesLanguageList(SelectedMediaDictionaryForGroupUsingCriteria, v78);
      if (v77)
        CFRelease(v77);
      if (v76)
        CFRelease(v76);
      if (v78)
        CFRelease(v78);
      MutableCopy = v92;
      if (keyc | a6)
      {
        SelectedMediaDictionaryForGroupUsingCriteria = 0;
        MediaSelectionCriteria = 0;
        v57 = v109;
        if (!a6 || v79 || !v75)
        {
          keyb = 0;
LABEL_137:
          v22 = v99;
          goto LABEL_138;
        }
      }
      else
      {
        v57 = v109;
        if (!v75)
        {
          keyb = 0;
          MediaSelectionCriteria = 0;
          SelectedMediaDictionaryForGroupUsingCriteria = 0;
          goto LABEL_137;
        }
      }
      v22 = v99;
      if (FigCFEqual())
      {
        keyb = 0;
        MediaSelectionCriteria = 0;
        SelectedMediaDictionaryForGroupUsingCriteria = 0;
LABEL_138:
        v72 = v101;
        v59 = theArrayb;
        goto LABEL_115;
      }
      if (v90)
        v81 = (const __CFArray *)CFDictionaryGetValue(v90, CFSTR("preferredLanguages"));
      else
        v81 = 0;
      context = CFSTR("public.auxiliary-content");
      v123 = CFSTR("public.subtitles.forced-only");
      v59 = theArrayb;
      keyb = CFArrayCreateMutable(v105, 0, MEMORY[0x1E0C9B378]);
      if (!keyb)
      {
        MediaSelectionCriteria = 0;
        goto LABEL_163;
      }
      if (a5 && (v82 = (const __CFArray *)CFDictionaryGetValue(a5, CFSTR("preferredLanguages"))) != 0)
      {
        v83 = v82;
        v127.length = CFArrayGetCount(v82);
        v127.location = 0;
        CFArrayAppendArray(keyb, v83, v127);
        MutableCopy = v92;
      }
      else
      {
        if (!a6 && v81)
        {
          v128.length = CFArrayGetCount(v81);
          v128.location = 0;
          CFArrayAppendArray(keyb, v81, v128);
        }
        MutableCopy = v92;
        if (v61)
        {
          v84 = (const __CFArray *)CFDictionaryGetValue(v61, CFSTR("fallbackPreferredLanguages"));
          if (v84)
          {
            v85 = v84;
            v129.length = CFArrayGetCount(v84);
            v129.location = 0;
            CFArrayAppendArray(keyb, v85, v129);
          }
        }
        if (!a5)
        {
          v86 = 0;
          v87 = 0;
          goto LABEL_153;
        }
      }
      v86 = CFDictionaryGetValue(a5, CFSTR("requiredMediaCharacteristics"));
      v87 = CFDictionaryGetValue(a5, CFSTR("preferredMediaCharacteristics"));
LABEL_153:
      if (v61 && !v87)
        v87 = CFDictionaryGetValue(v61, CFSTR("fallbackPreferredCharacteristics"));
      MediaSelectionCriteria = _createMediaSelectionCriteria(allocator, 0, keyb, v86, v87, (const void **)&context, 2);
      if (MediaSelectionCriteria)
      {
        SelectedMediaDictionaryForGroupUsingCriteria = (const __CFDictionary *)_createSelectedMediaDictionaryForGroupUsingCriteria(allocator, v58, MediaSelectionCriteria, 0, (__CFDictionary **)&SelectedMediaDictionaryForOptionInGroup, 0);
        v72 = v101;
        if (!(_DWORD)SelectedMediaDictionaryForGroupUsingCriteria)
        {
          v57 = v109;
          goto LABEL_115;
        }
LABEL_164:
        v22 = v99;
        MutableCopy = v92;
        goto LABEL_124;
      }
LABEL_163:
      SelectedMediaDictionaryForGroupUsingCriteria = 0;
      goto LABEL_164;
    }
LABEL_160:
    SelectedMediaDictionaryForGroupUsingCriteria = (const __CFDictionary *)v52;
    goto LABEL_74;
  }
  SelectedMediaDictionaryForGroupUsingCriteria = (const __CFDictionary *)FigSignalErrorAt();
  MutableCopy = 0;
  v22 = 0;
  v25 = 0;
LABEL_76:
  if (v120)
    CFRelease(v120);
  if (cf)
    CFRelease(cf);
  if (SelectedMediaDictionaryForOptionInGroup)
    CFRelease(SelectedMediaDictionaryForOptionInGroup);
  if (v25)
    CFRelease(v25);
  if (v22)
    CFRelease(v22);
  if (MutableCopy)
    CFRelease(MutableCopy);
  return SelectedMediaDictionaryForGroupUsingCriteria;
}

uint64_t FigAutomaticMediaSelectionCoalesceSelectedMediaArrays(const __CFArray *a1, CFArrayRef theArray, int a3)
{
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v9;
  CFTypeID v10;
  CFIndex v11;
  const __CFDictionary *v12;
  const __CFDictionary *v13;
  CFTypeID v14;
  int v15;
  const void *v17;
  CFIndex v18;
  const __CFArray *v19;
  const void *Value;
  CFIndex v21;

  v3 = theArray;
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (a1)
    {
LABEL_3:
      v6 = CFArrayGetCount(a1);
      goto LABEL_6;
    }
  }
  else
  {
    Count = 0;
    if (a1)
      goto LABEL_3;
  }
  v6 = 0;
LABEL_6:
  if (Count < 1)
    return 0;
  v7 = 0;
  v17 = (const void *)*MEMORY[0x1E0C9AE50];
  v18 = Count;
  v19 = v3;
  while (1)
  {
    v21 = v7;
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v3, v7);
    if (!ValueAtIndex)
      break;
    v9 = ValueAtIndex;
    v10 = CFGetTypeID(ValueAtIndex);
    if (v10 != CFDictionaryGetTypeID())
      break;
    CFDictionaryGetValue(v9, CFSTR("MediaSelectionGroupID"));
    CFDictionaryGetValue(v9, CFSTR("MediaSelectionGroupMediaType"));
    Value = CFDictionaryGetValue(v9, CFSTR("AutomaticSelection"));
    if (v6 >= 1)
    {
      v11 = 0;
      while (1)
      {
        v12 = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v11);
        if (!v12)
          break;
        v13 = v12;
        v14 = CFGetTypeID(v12);
        if (v14 != CFDictionaryGetTypeID())
          break;
        CFDictionaryGetValue(v13, CFSTR("MediaSelectionGroupID"));
        CFDictionaryGetValue(v13, CFSTR("MediaSelectionGroupMediaType"));
        v15 = FigCFEqual();
        if (a3)
        {
          if (v15 && FigCFEqual())
          {
            CFArrayRemoveValueAtIndex(a1, v11);
            --v6;
            --v11;
          }
        }
        else if (v15 && FigCFEqual())
        {
          goto LABEL_23;
        }
        if (++v11 >= v6)
          goto LABEL_21;
      }
      return FigSignalErrorAt();
    }
LABEL_21:
    if (Value != v17)
    {
      CFArrayAppendValue(a1, v9);
      ++v6;
    }
LABEL_23:
    v7 = v21 + 1;
    v3 = v19;
    if (v21 + 1 == v18)
      return 0;
  }
  return FigSignalErrorAt();
}

__CFDictionary *_createMergedCriteria(const __CFAllocator *a1, const __CFDictionary *a2, const __CFDictionary *a3)
{
  CFMutableDictionaryRef MutableCopy;
  __CFDictionary *v7;
  int64_t Count;
  const void **v9;
  const void **v10;
  const void **v11;
  const void **v12;
  const void *v13;
  const void *v14;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a3)
    MutableCopy = CFDictionaryCreateMutableCopy(a1, 0, a3);
  else
    MutableCopy = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v7 = MutableCopy;
  if (a2 && MutableCopy)
  {
    Count = CFDictionaryGetCount(a2);
    v9 = (const void **)malloc_type_calloc(Count, 8uLL, 0x80040B8603338uLL);
    v10 = (const void **)malloc_type_calloc(Count, 8uLL, 0x80040B8603338uLL);
    CFDictionaryGetKeysAndValues(a2, v9, v10);
    if (Count >= 1)
    {
      v11 = v9;
      v12 = v10;
      do
      {
        v13 = *v11;
        v14 = *v12;
        if (!CFDictionaryContainsKey(v7, *v11))
          CFDictionarySetValue(v7, v13, v14);
        ++v12;
        ++v11;
        --Count;
      }
      while (Count);
    }
    free(v9);
    free(v10);
  }
  return v7;
}

__CFArray *FigCopyMediaSelectionArrayAndMarkOptionsAvailableOffline(const void *a1, const void *a2, uint64_t a3)
{
  const __CFAllocator *v4;
  __CFArray *Mutable;
  CFIndex v6;
  const __CFDictionary *ValueAtIndex;
  CFMutableDictionaryRef MutableCopy;
  CFTypeRef v9;
  void (*v10)(CFTypeRef, const __CFDictionary *, _QWORD, CFTypeRef *);
  CFTypeRef cf;
  CFTypeRef v13;

  if (!a1 || !a2 || !a3)
    goto LABEL_17;
  v13 = 0;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  FigAssetCacheInspectorCreate((const void *)*MEMORY[0x1E0C9AE00], a2, &v13);
  if (!v13)
    return (__CFArray *)CFRetain(a1);
  Mutable = CFArrayCreateMutable(v4, 0, MEMORY[0x1E0C9B378]);
  if (CFArrayGetCount((CFArrayRef)a1) >= 1)
  {
    v6 = 0;
    do
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)a1, v6);
      MutableCopy = CFDictionaryCreateMutableCopy(v4, 0, ValueAtIndex);
      CFArrayAppendValue(Mutable, MutableCopy);
      CFDictionaryGetValue(MutableCopy, CFSTR("MediaSelectionGroupOptions"));
      cf = 0;
      v9 = v13;
      v10 = *(void (**)(CFTypeRef, const __CFDictionary *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 8);
      if (v10)
        v10(v9, ValueAtIndex, 0, &cf);
      FigCFArrayApplyFunction();
      if (cf)
        CFRelease(cf);
      if (MutableCopy)
        CFRelease(MutableCopy);
      ++v6;
    }
    while (v6 < CFArrayGetCount((CFArrayRef)a1));
  }
  if (v13)
    CFRelease(v13);
  if (!Mutable)
  {
LABEL_17:
    if (!a1)
      return 0;
    return (__CFArray *)CFRetain(a1);
  }
  return Mutable;
}

void figAddOfflineCharacteristic(const __CFDictionary *a1, CFDictionaryRef theDict)
{
  const __CFArray *Value;
  const __CFArray *v5;
  const __CFAllocator *v6;
  CFMutableArrayRef MutableCopy;
  const __CFDictionary *OptionMatchingSelectionOptionIDAndDisplaysNonForcedSubtitles;
  const __CFDictionary *v9;
  CFIndex FirstIndexOfValue;
  CFIndex v11;
  const __CFArray *v12;
  const __CFArray *v13;
  __CFDictionary *v14;
  __CFArray *v15;
  CFRange v16;
  CFRange v17;

  if (a1)
  {
    if (theDict)
    {
      Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("MediaSelectionGroupOptions"));
      if (Value)
      {
        v5 = Value;
        v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, Value);
        CFRetain(v5);
        CFDictionarySetValue(theDict, CFSTR("MediaSelectionGroupOptions"), MutableCopy);
        OptionMatchingSelectionOptionIDAndDisplaysNonForcedSubtitles = _getOptionMatchingSelectionOptionIDAndDisplaysNonForcedSubtitles(theDict, a1);
        if (OptionMatchingSelectionOptionIDAndDisplaysNonForcedSubtitles)
        {
          v9 = OptionMatchingSelectionOptionIDAndDisplaysNonForcedSubtitles;
          v16.length = CFArrayGetCount(v5);
          v16.location = 0;
          FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v5, v16, v9);
          if (FirstIndexOfValue != -1)
          {
            v11 = FirstIndexOfValue;
            v12 = (const __CFArray *)CFDictionaryGetValue(a1, CFSTR("MediaSelectionOptionsTaggedMediaCharacteristics"));
            v13 = v12;
            if (!v12
              || (v17.length = CFArrayGetCount(v12),
                  v17.location = 0,
                  !CFArrayContainsValue(v13, v17, CFSTR("com.apple.HLS.available-offline"))))
            {
              v14 = CFDictionaryCreateMutableCopy(v6, 0, a1);
              v15 = (__CFArray *)FigCFArrayCreateMutableCopy();
              CFArrayAppendValue(v15, CFSTR("com.apple.HLS.available-offline"));
              CFDictionarySetValue(v14, CFSTR("MediaSelectionOptionsTaggedMediaCharacteristics"), v15);
              CFArraySetValueAtIndex(MutableCopy, v11, v14);
              if (v15)
                CFRelease(v15);
              if (v14)
                CFRelease(v14);
            }
          }
        }
        if (MutableCopy)
          CFRelease(MutableCopy);
        CFRelease(v5);
      }
    }
  }
}

__CFString *FigMediaSelectionArrayCopyDescription(const __CFAllocator *a1, const __CFArray *a2)
{
  __CFString *Mutable;
  __CFString *v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  __CFString *v10;

  Mutable = CFStringCreateMutable(a1, 0);
  v5 = Mutable;
  if (Mutable)
  {
    CFStringAppendFormat(Mutable, 0, CFSTR("<SelectedMediaArray: %p, "), a2);
    if (a2)
    {
      Count = CFArrayGetCount(a2);
      if (Count >= 1)
      {
        v7 = Count;
        for (i = 0; i != v7; ++i)
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, i);
          if (i)
            CFStringAppendFormat(v5, 0, CFSTR(" "));
          v10 = FigMediaSelectionOptionCopyDescription(a1, ValueAtIndex);
          CFStringAppend(v5, v10);
          if (v10)
            CFRelease(v10);
        }
      }
    }
    CFStringAppendFormat(v5, 0, CFSTR(">"));
  }
  return v5;
}

uint64_t _setupAutomaticMediaSelection()
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  gDefaultMediaSelectionCriteriaMutex = FigSimpleMutexCreate();
  gMediaSelectionNotificationQueue = FigDispatchQueueCreateWithPriority();
  gDefaultMediaSelectionCriteria = (uint64_t)_createDefaultMediaSelectionCriteria((const __CFAllocator *)*MEMORY[0x1E0C9AE00]);
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterAddListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigGetNotifyingObjectForMediaAccessibilityChanged();
  CMNotificationCenterAddListener();
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterRegisterForBarrierSupport();
}

uint64_t _localeOrMediaAccessibilityDidChangeNotificationCallback()
{
  return FigDeferNotificationToDispatchQueue();
}

uint64_t _deferredLocaleOrMediaAccessibilityDidChangeNotificationCallback()
{
  MEMORY[0x19402EEEC](gDefaultMediaSelectionCriteriaMutex);
  if (gDefaultMediaSelectionCriteria)
  {
    CFRelease((CFTypeRef)gDefaultMediaSelectionCriteria);
    gDefaultMediaSelectionCriteria = 0;
  }
  MEMORY[0x19402EF04](gDefaultMediaSelectionCriteriaMutex);
  if (_ensureAutomaticMediaSelectionInitialized_gSetupAutomaticMediaSelectionOnce != -1)
    dispatch_once_f(&_ensureAutomaticMediaSelectionInitialized_gSetupAutomaticMediaSelectionOnce, 0, (dispatch_function_t)_setupAutomaticMediaSelection);
  return CMNotificationCenterPostNotification();
}

__CFDictionary *_createMediaSelectionCriteria(const __CFAllocator *a1, uint64_t a2, const void *a3, const void *a4, const void *a5, const void **a6, CFIndex a7)
{
  __CFDictionary *MutableCopy;
  __CFDictionary *v14;
  CFArrayRef v15;
  CFArrayRef v16;

  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  v14 = MutableCopy;
  if (MutableCopy)
  {
    if (a3)
      CFDictionarySetValue(MutableCopy, CFSTR("preferredLanguages"), a3);
    if (a4)
      CFDictionarySetValue(v14, CFSTR("requiredMediaCharacteristics"), a4);
    if (a5)
      CFDictionarySetValue(v14, CFSTR("preferredMediaCharacteristics"), a5);
    if (a6)
    {
      v15 = CFArrayCreate(a1, a6, a7, MEMORY[0x1E0C9B378]);
      if (v15)
      {
        v16 = v15;
        CFDictionarySetValue(v14, CFSTR("precludedMediaCharacteristics"), v15);
        CFRelease(v16);
      }
    }
  }
  return v14;
}

uint64_t _createSelectedMediaDictionaryForGroupUsingCriteria(const __CFAllocator *a1, CFDictionaryRef theDict, CFDictionaryRef a3, int a4, __CFDictionary **a5, unsigned __int8 *a6)
{
  const __CFArray *v9;
  void *v10;
  void *v11;
  const __CFArray *v12;
  const __CFArray *v13;
  const void *v14;
  void *v15;
  CFArrayRef v16;
  uint64_t v17;
  const __CFArray *v18;
  const __CFArray *v19;
  const __CFDictionary *v20;
  const __CFArray *v21;
  const __CFArray *v22;
  const __CFArray *v23;
  CFIndex Count;
  uint64_t BestOptionInGroupUsingCriteria;
  const __CFDictionary *v26;
  const void *v27;
  __CFDictionary **v28;
  const void *v29;
  const void *v30;
  NSObject *v31;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __CFDictionary *SelectedMediaDictionaryForOptionInGroup;
  uint64_t v34;
  const __CFArray *v39;
  const __CFArray *v40;
  const __CFArray *v41;
  const __CFArray *Value;
  CFArrayRef v43;
  __int16 v44;
  void *v45;
  void *values;
  CFDictionaryRef theDicta;
  CFDictionaryRef v48[23];
  CFRange v49;
  CFRange v50;
  CFRange v51;

  v48[21] = *(CFDictionaryRef *)MEMORY[0x1E0C80C00];
  theDicta = 0;
  v48[0] = 0;
  v45 = 0;
  values = 0;
  if (!a5)
    return 4294954516;
  *a5 = 0;
  if (!theDict)
    return 0;
  if (a3)
  {
    Value = (const __CFArray *)CFDictionaryGetValue(a3, CFSTR("requiredMediaCharacteristics"));
    v41 = (const __CFArray *)CFDictionaryGetValue(a3, CFSTR("premiumMediaCharacteristics"));
    v9 = (const __CFArray *)CFDictionaryGetValue(a3, CFSTR("preferredMediaCharacteristics"));
    v40 = (const __CFArray *)CFDictionaryGetValue(a3, CFSTR("precludedMediaCharacteristics"));
    v39 = v9;
    if (FigCFArrayContainsValue())
      v43 = 0;
    else
      v43 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)kFigStdAssetMediaCharacteristic_TaggedDescribesVideoForAccessibility, 1, MEMORY[0x1E0C9B378]);
    v14 = CFDictionaryGetValue(a3, CFSTR("preferredLanguages"));
    v13 = (const __CFArray *)CFDictionaryGetValue(a3, CFSTR("preferredMediaSubTypes"));
    v12 = (const __CFArray *)CFDictionaryGetValue(a3, CFSTR("precludedMediaSubTypes"));
    v11 = (void *)CFDictionaryGetValue(a3, CFSTR("preferMultichannelAudio"));
    values = v11;
    v10 = (void *)CFDictionaryGetValue(a3, CFSTR("precludeMultichannelAudio"));
    v45 = v10;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    Value = 0;
    v43 = 0;
    v39 = 0;
    v40 = 0;
    v14 = 0;
    v41 = 0;
  }
  v15 = (void *)*MEMORY[0x1E0C9AE50];
  if (v11 == (void *)*MEMORY[0x1E0C9AE50])
  {
    v16 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 1, MEMORY[0x1E0C9B378]);
    v10 = v45;
  }
  else
  {
    v16 = 0;
  }
  v17 = (uint64_t)v14;
  if (v10 == v15)
    v18 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&v45, 1, MEMORY[0x1E0C9B378]);
  else
    v18 = 0;
  v19 = v16;
  v20 = theDict;
  v21 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("MediaSelectionGroupMediaCharacteristics"));
  v22 = v43;
  if (v21)
  {
    v23 = v21;
    Count = CFArrayGetCount(v21);
    v49.location = 0;
    v49.length = Count;
    if (!CFArrayContainsValue(v23, v49, CFSTR("public.visual")))
    {
      v50.location = 0;
      v50.length = Count;
      if (!CFArrayContainsValue(v23, v50, CFSTR("public.audible")))
      {
        v51.location = 0;
        v51.length = Count;
        CFArrayContainsValue(v23, v51, CFSTR("public.legible"));
        v22 = v43;
      }
    }
  }
  v44 = 0;
  BestOptionInGroupUsingCriteria = _findBestOptionInGroupUsingCriteria(v20, Value, v41, v39, v40, v22, v17, v13, v12, v19, v18, v48, &theDicta, a6, (BOOL *)&v44 + 1, (BOOL *)&v44);
  if ((_DWORD)BestOptionInGroupUsingCriteria)
  {
LABEL_57:
    v34 = BestOptionInGroupUsingCriteria;
    if (!v19)
      goto LABEL_49;
    goto LABEL_48;
  }
  v26 = theDicta;
  if (!theDicta && (_BYTE)v44)
  {
    BestOptionInGroupUsingCriteria = _findBestOptionInGroupUsingCriteria(v20, Value, v41, v39, v40, 0, v17, v13, v12, v19, v18, v48, &theDicta, a6, (BOOL *)&v44 + 1, 0);
    if ((_DWORD)BestOptionInGroupUsingCriteria)
      goto LABEL_57;
    v26 = theDicta;
  }
  if (v26)
  {
    v27 = CFDictionaryGetValue(v26, CFSTR("MediaSelectionOptionsDebugDescription"));
    v28 = a5;
    if (!v27 || (v29 = CFRetain(v27)) == 0)
      v29 = FigCopyGMLoggingDescriptionForOption(v26);
    if (!dword_1EE2A3580)
      goto LABEL_39;
    goto LABEL_38;
  }
  v28 = a5;
  if (!a4)
  {
    if (dword_1EE2A3580)
      goto LABEL_44;
    goto LABEL_45;
  }
  v26 = v48[0];
  if (!v48[0])
  {
    if (dword_1EE2A3580)
    {
LABEL_44:
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
LABEL_45:
    v26 = 0;
    goto LABEL_46;
  }
  theDicta = v48[0];
  if (a6)
    *a6 = HIBYTE(v44);
  v30 = CFDictionaryGetValue(v26, CFSTR("MediaSelectionOptionsDebugDescription"));
  if (!v30 || (v29 = CFRetain(v30)) == 0)
    v29 = FigCopyGMLoggingDescriptionForOption(v26);
  if (!dword_1EE2A3580)
    goto LABEL_39;
LABEL_38:
  v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  v22 = v43;
LABEL_39:
  if (v29)
    CFRelease(v29);
LABEL_46:
  SelectedMediaDictionaryForOptionInGroup = _createSelectedMediaDictionaryForOptionInGroup(a1, v26, v20);
  *v28 = SelectedMediaDictionaryForOptionInGroup;
  if (!SelectedMediaDictionaryForOptionInGroup)
  {
    BestOptionInGroupUsingCriteria = FigSignalErrorAt();
    goto LABEL_57;
  }
  v34 = 0;
  if (v19)
LABEL_48:
    CFRelease(v19);
LABEL_49:
  if (v18)
    CFRelease(v18);
  if (v22)
    CFRelease(v22);
  return v34;
}

MACaptionAppearanceDisplayType _getCaptionAppearanceDisplayType()
{
  if (FigCFDictionaryGetInt32IfPresent())
    return 0;
  else
    return FigMediaAccessibilityCaptionsDisplayType();
}

void _addToAssociatedLanguages(void *key, uint64_t a2)
{
  const __CFArray *Value;
  const __CFArray *v5;
  CFRange v6;

  Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)a2, key);
  if (Value)
  {
    v5 = Value;
    v6.length = CFArrayGetCount(Value);
    v6.location = 0;
    CFArrayApplyFunction(v5, v6, (CFArrayApplierFunction)_addToMutableArrayIfNotPresent, *(void **)(a2 + 8));
  }
  else
  {
    _addToMutableArrayIfNotPresent(key, *(CFArrayRef *)(a2 + 8));
  }
}

void _addToMutableArrayIfNotPresent(const void *a1, CFArrayRef theArray)
{
  CFRange v4;

  v4.length = CFArrayGetCount(theArray);
  v4.location = 0;
  if (!CFArrayContainsValue(theArray, v4, a1))
    CFArrayAppendValue(theArray, a1);
}

uint64_t _findBestOptionInGroupUsingCriteria(const __CFDictionary *a1, CFArrayRef theArray, const __CFArray *a3, const __CFArray *a4, const __CFArray *a5, const __CFArray *a6, uint64_t a7, const __CFArray *a8, const __CFArray *a9, const __CFArray *a10, const __CFArray *a11, const __CFDictionary **a12, const __CFDictionary **a13, unsigned __int8 *a14, BOOL *a15, BOOL *a16)
{
  CFIndex Count;
  const __CFArray *v20;
  const __CFArray *v21;
  CFIndex v22;
  unsigned __int8 *v23;
  const __CFAllocator **v24;
  const __CFArray *Mutable;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  const __CFArray *v28;
  const __CFArray *v29;
  const __CFArray *v30;
  uint64_t v31;
  const __CFDictionary *v32;
  CFIndex v33;
  const __CFDictionary *v34;
  const __CFArray *v35;
  const __CFArray *v36;
  CFIndex v37;
  uint64_t v38;
  __CFArray *v39;
  CFIndex v40;
  const __CFData *v41;
  const UInt8 *BytePtr;
  const UInt8 *v43;
  int v44;
  const void **v45;
  uint64_t v46;
  int shouldConsiderOptionWithItems;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  const __CFDictionary *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  const void *v62;
  const __CFArray *v63;
  CFIndex v64;
  CFIndex FirstIndexOfValue;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  _BOOL4 v70;
  int v71;
  uint64_t v72;
  int v73;
  const __CFBoolean *v74;
  BOOL v75;
  const __CFDictionary *v76;
  uint64_t v77;
  BOOL v78;
  const __CFDictionary *v79;
  unsigned __int8 v80;
  unsigned __int8 v81;
  uint64_t v82;
  const void *v83;
  const void *v84;
  const void *v85;
  int v86;
  BOOL v87;
  uint64_t v88;
  _BOOL4 v90;
  const __CFArray *theArraya;
  const __CFArray *v94;
  CFIndex v95;
  const __CFDictionary *v97;
  const __CFArray *v98;
  const __CFArray *v100;
  CFIndex v101;
  const __CFArray *Value;
  const __CFArray *v103;
  const __CFDictionary *v104;
  int v105;
  const __CFArray *v106;
  _BOOL4 v107;
  const __CFAllocator *v108;
  uint64_t v109;
  __CFArray *v110;
  CFRange v111;
  CFRange v112;

  v110 = 0;
  theArraya = a3;
  if (!theArray)
  {
    v95 = 0;
    if (a3)
      goto LABEL_3;
LABEL_5:
    v90 = 0;
    goto LABEL_6;
  }
  Count = CFArrayGetCount(theArray);
  a3 = theArraya;
  v95 = Count;
  if (!theArraya)
    goto LABEL_5;
LABEL_3:
  v90 = CFArrayGetCount(a3) > 0;
LABEL_6:
  v103 = theArray;
  *a12 = 0;
  *a13 = 0;
  Value = (const __CFArray *)CFDictionaryGetValue(a1, CFSTR("MediaSelectionGroupMediaCharacteristics"));
  v20 = (const __CFArray *)CFDictionaryGetValue(a1, CFSTR("MediaSelectionGroupOptions"));
  v21 = v20;
  if (v20)
    v22 = CFArrayGetCount(v20);
  else
    v22 = 0;
  v23 = a14;
  v24 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
  if (a7)
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (v22 >= 1)
    {
      for (i = 0; i != v22; ++i)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v21, i);
        _appendOptionLanguages(ValueAtIndex, Mutable);
      }
    }
    v28 = (const __CFArray *)FigCopyRankedLanguagesAccordingToPreferredLanguages();
    if (Mutable)
    {
      v29 = Mutable;
      v30 = v28;
      CFRelease(v29);
      v28 = v30;
    }
  }
  else
  {
    v28 = 0;
  }
  if (v22 < 1)
  {
    v80 = 0;
    v82 = 0;
    goto LABEL_130;
  }
  v94 = v28;
  v31 = 0;
  v32 = 0;
  v104 = 0;
  v33 = 0;
  v97 = 0;
  v109 = 0;
  v108 = *v24;
  v100 = v21;
  v98 = a6;
  v101 = v22;
  do
  {
    v34 = (const __CFDictionary *)CFArrayGetValueAtIndex(v21, v33);
    v106 = (const __CFArray *)CFDictionaryGetValue(v34, CFSTR("MediaSelectionOptionsMediaSubTypes"));
    v35 = (const __CFArray *)CFDictionaryGetValue(v34, CFSTR("MediaSelectionOptionsAudioChannelLayouts"));
    if (v35 && (v36 = v35, (v37 = CFArrayGetCount(v35)) != 0))
    {
      v38 = v37;
      v39 = CFArrayCreateMutable(v108, v37, MEMORY[0x1E0C9B378]);
      if (v39 && v38 >= 1)
      {
        v40 = 0;
        while (1)
        {
          v41 = (const __CFData *)CFArrayGetValueAtIndex(v36, v40);
          BytePtr = CFDataGetBytePtr(v41);
          if (!BytePtr)
            goto LABEL_31;
          v43 = BytePtr;
          if ((unint64_t)CFDataGetLength(v41) < 0xC)
            goto LABEL_31;
          v44 = *(_DWORD *)v43;
          v45 = (const void **)MEMORY[0x1E0C9AE50];
          if ((unsigned __int16)*(_DWORD *)v43 <= 2u)
          {
            if (v44)
            {
              if (v44 == 0x10000 && *((_DWORD *)v43 + 1) >= 4u)
                goto LABEL_32;
LABEL_31:
              v45 = (const void **)MEMORY[0x1E0C9AE40];
              goto LABEL_32;
            }
            if (*((_DWORD *)v43 + 2) <= 2u)
              goto LABEL_31;
          }
LABEL_32:
          CFArrayAppendValue(v39, *v45);
          if (v38 == ++v40)
          {
            a6 = v98;
            break;
          }
        }
      }
    }
    else
    {
      v39 = 0;
    }
    v46 = FigMediaCharacteristicsCreateMediaCharacteristicsForMediaOption(v108, Value, v34, &v110);
    if ((_DWORD)v46)
    {
      v88 = v46;
      v28 = v94;
      if (v94)
        goto LABEL_135;
      goto LABEL_136;
    }
    if (v103 && CFArrayGetCount(v103) >= 1)
    {
      shouldConsiderOptionWithItems = _shouldConsiderOptionWithItems(v110, v103, 0);
      v48 = 0;
      if (!shouldConsiderOptionWithItems)
      {
        v49 = 0;
        v105 = 1;
        v50 = 1;
        goto LABEL_42;
      }
    }
    else
    {
      v48 = 1;
    }
    v105 = v48;
    v49 = _shouldConsiderOptionWithItems(v110, 0, a5);
    v50 = v49;
LABEL_42:
    v51 = _shouldConsiderOptionWithItems(v110, 0, a6);
    v52 = 0;
    v53 = 0;
    v54 = v109;
    if (!v51)
    {
      v54 = v109 + 1;
      v50 = 0;
    }
    v109 = v54;
    if (v51 && v49)
    {
      if (!_shouldConsiderOptionWithItems(v106, 0, a9)
        || !_shouldConsiderOptionWithItems(v39, 0, a11))
      {
        v50 = 0;
        v53 = 0;
        v52 = 0;
        goto LABEL_90;
      }
      v55 = v97;
      if (!v97)
        v55 = v34;
      if (a8)
      {
        v56 = _calculatePointsForCandidateItemArrayUsingPreferredItems(v106, a8, 2);
        v57 = CFArrayGetCount(a8);
        v58 = v57 * (uint64_t)v57 + v57;
        v59 = ((v58 + (v58 < 0)) & 0xFFFFFFFFFFFFFFFELL) + 2;
      }
      else
      {
        v56 = 0;
        v59 = 2;
      }
      if (a10)
      {
        v56 += _calculatePointsForCandidateItemArrayUsingPreferredItems(v39, a10, v59);
        v60 = CFArrayGetCount(a10);
        v59 += v59 * ((v60 * (uint64_t)v60 + v60) / 2);
      }
      if (a4)
      {
        v56 += _calculatePointsForCandidateItemArrayUsingPreferredItems(v110, a4, v59);
        v61 = CFArrayGetCount(a4);
        v59 += v59 * ((v61 * (uint64_t)v61 + v61) / 2);
      }
      v97 = v55;
      if (a7)
      {
        v62 = CFDictionaryGetValue(v34, CFSTR("MediaSelectionOptionsUnicodeLanguageIdentifier"));
        if (v62 || (v62 = CFDictionaryGetValue(v34, CFSTR("MediaSelectionOptionsUnicodeLanguageCode"))) != 0)
        {
          v63 = v94;
          if (v94)
          {
            v64 = CFArrayGetCount(v94);
            v111.location = 0;
            v111.length = v64;
            FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v94, v111, v62);
            if (FirstIndexOfValue == -1)
              v66 = 0;
            else
              v66 = (v64 - FirstIndexOfValue) * v59;
            v63 = v94;
            a6 = v98;
          }
          else
          {
            v66 = 0;
          }
          v107 = v66 != 0;
          if (v63)
LABEL_76:
            LODWORD(v63) = CFArrayGetCount(v63);
        }
        else
        {
          v107 = 1;
          v66 = v59;
          v63 = v94;
          if (v94)
            goto LABEL_76;
        }
        v56 += v66;
        v59 += v59 * (((int)v63 * (uint64_t)(int)v63 + (int)v63) / 2);
      }
      else if (v95)
      {
        v107 = 0;
      }
      else
      {
        if (!CFDictionaryGetValue(v34, CFSTR("MediaSelectionOptionsUnicodeLanguageIdentifier")))
          CFDictionaryGetValue(v34, CFSTR("MediaSelectionOptionsUnicodeLanguageCode"));
        v67 = FigCFEqual();
        v107 = v67 != 0;
        if (v67)
          v68 = v59;
        else
          v68 = 0;
        v56 += v68;
        v59 *= 2;
      }
      if (theArraya)
      {
        v69 = _calculatePointsForCandidateItemArrayUsingPreferredItems(v110, theArraya, v59);
        v56 += v69;
        v70 = v69 != 0;
        v71 = CFArrayGetCount(theArraya);
        v59 += v59 * ((v71 * (uint64_t)v71 + v71) / 2);
      }
      else
      {
        v70 = 0;
      }
      if (v105)
        v72 = 0;
      else
        v72 = v59;
      v53 = v56 + v72;
      v73 = v90 && v70;
      if (v95)
        v73 = 1;
      if (v107)
        v52 = 1;
      else
        v52 = v73;
      v50 = 1;
    }
LABEL_90:
    v74 = (const __CFBoolean *)CFDictionaryGetValue(v34, CFSTR("MediaSelectionOptionsIsDefault"));
    if (v50 && v74)
    {
      v75 = CFBooleanGetValue(v74) != 0;
      v76 = v104;
      v77 = v75 & (v104 == 0);
      v53 += v77;
      if ((_DWORD)v77)
        v76 = v34;
      v104 = v76;
    }
    v22 = v101;
    if (v110)
    {
      CFRelease(v110);
      v110 = 0;
    }
    if (v39)
      CFRelease(v39);
    if (v52 != 0 && v53 > v31)
    {
      v32 = v34;
      v31 = v53;
    }
    ++v33;
    v21 = v100;
  }
  while (v33 != v101);
  if (v97)
    v78 = v104 == 0;
  else
    v78 = 0;
  if (v78)
    v79 = v97;
  else
    v79 = v104;
  v80 = 0;
  if (!v32)
  {
    v23 = a14;
    v28 = v94;
    if (!v79)
      goto LABEL_129;
LABEL_119:
    *a12 = v79;
    v83 = CFDictionaryGetValue(v79, CFSTR("MediaSelectionOptionsUnicodeLanguageIdentifier"));
    if (v83)
    {
      if (a15)
      {
        v84 = v83;
        v28 = v94;
        if (!v94)
          goto LABEL_129;
        goto LABEL_126;
      }
    }
    else
    {
      v85 = CFDictionaryGetValue(v79, CFSTR("MediaSelectionOptionsUnicodeLanguageCode"));
      if (a15)
      {
        v28 = v94;
        if (!v94)
          goto LABEL_129;
        v84 = v85;
        if (!v85)
        {
          v87 = 0;
          goto LABEL_127;
        }
LABEL_126:
        v112.length = CFArrayGetCount(v28);
        v112.location = 0;
        v86 = CFArrayContainsValue(v94, v112, v84);
        v28 = v94;
        v87 = v86 != 0;
LABEL_127:
        *a15 = v87;
        goto LABEL_129;
      }
    }
    v28 = v94;
    goto LABEL_129;
  }
  *a13 = v32;
  v23 = a14;
  v28 = v94;
  if (a14 && v94)
  {
    v81 = _optionLanguageMatchesLanguageList(v32, v94);
    v28 = v94;
    v80 = v81;
  }
  if (v79)
    goto LABEL_119;
LABEL_129:
  v82 = v109;
LABEL_130:
  if (v23)
    *v23 = v80;
  v39 = 0;
  v88 = 0;
  if (a16)
    *a16 = v82 == v22;
  if (v28)
LABEL_135:
    CFRelease(v28);
LABEL_136:
  if (v110)
    CFRelease(v110);
  if (v39)
    CFRelease(v39);
  return v88;
}

void _appendOptionLanguages(const __CFDictionary *a1, const __CFArray *a2)
{
  const void *Value;
  const void *v5;
  CFRange v6;

  if (a1)
  {
    if (a2)
    {
      Value = CFDictionaryGetValue(a1, CFSTR("MediaSelectionOptionsUnicodeLanguageIdentifier"));
      if (Value || (Value = CFDictionaryGetValue(a1, CFSTR("MediaSelectionOptionsUnicodeLanguageCode"))) != 0)
      {
        v5 = Value;
        v6.length = CFArrayGetCount(a2);
        v6.location = 0;
        if (!CFArrayContainsValue(a2, v6, v5))
          CFArrayAppendValue(a2, v5);
      }
    }
  }
}

uint64_t _shouldConsiderOptionWithItems(const __CFArray *a1, const __CFArray *a2, const __CFArray *a3)
{
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  CFIndex v9;
  CFIndex v10;
  const void *v11;
  uint64_t result;
  CFIndex v13;
  CFIndex v14;
  CFIndex v15;
  const void *ValueAtIndex;
  CFRange v17;
  CFRange v18;

  if (!a1)
    return 1;
  Count = CFArrayGetCount(a1);
  if (Count < 1)
    return 1;
  v7 = Count;
  if (!a2 || (v8 = CFArrayGetCount(a2), v8 < 1))
  {
LABEL_8:
    if (a3)
    {
      v13 = CFArrayGetCount(a3);
      if (v13 >= 1)
      {
        v14 = v13;
        v15 = 0;
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(a3, v15);
          v18.location = 0;
          v18.length = v7;
          if (CFArrayContainsValue(a1, v18, ValueAtIndex))
            break;
          if (v14 == ++v15)
            return 1;
        }
        return 0;
      }
    }
    return 1;
  }
  v9 = v8;
  v10 = 0;
  while (1)
  {
    v11 = CFArrayGetValueAtIndex(a2, v10);
    v17.location = 0;
    v17.length = v7;
    result = CFArrayContainsValue(a1, v17, v11);
    if (!(_DWORD)result)
      return result;
    if (v9 == ++v10)
      goto LABEL_8;
  }
}

uint64_t _calculatePointsForCandidateItemArrayUsingPreferredItems(const __CFArray *a1, CFArrayRef theArray, uint64_t a3)
{
  CFIndex Count;
  CFIndex v7;
  uint64_t v8;
  CFIndex v9;
  CFIndex v10;
  CFIndex v11;
  const void *ValueAtIndex;
  CFIndex v13;
  CFRange v15;

  if (!theArray)
  {
    Count = 0;
    if (a1)
      goto LABEL_3;
    return 0;
  }
  Count = CFArrayGetCount(theArray);
  if (!a1)
    return 0;
LABEL_3:
  v7 = CFArrayGetCount(a1);
  v8 = 0;
  if (Count >= 1)
  {
    v9 = v7;
    if (v7 >= 1)
    {
      v8 = 0;
      v10 = 0;
      v11 = Count * a3;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, v10);
        v15.location = 0;
        v15.length = v9;
        if (CFArrayContainsValue(a1, v15, ValueAtIndex))
          v13 = v11;
        else
          v13 = 0;
        v8 += v13;
        ++v10;
        v11 -= a3;
      }
      while (Count != v10);
    }
  }
  return v8;
}

const void *_optionLanguageMatchesLanguageList(const __CFDictionary *a1, const __CFArray *a2)
{
  const void *Value;
  const void *result;
  CFRange v6;

  if (!a2)
    return 0;
  Value = CFDictionaryGetValue(a1, CFSTR("MediaSelectionOptionsUnicodeLanguageIdentifier"));
  if (Value
    || (result = CFDictionaryGetValue(a1, CFSTR("MediaSelectionOptionsUnicodeLanguageCode")), (Value = result) != 0))
  {
    v6.length = CFArrayGetCount(a2);
    v6.location = 0;
    return (const void *)(CFArrayContainsValue(a2, v6, Value) != 0);
  }
  return result;
}

uint64_t FigHapticRenderPipelineCreate(const __CFAllocator *a1, uint64_t a2, const void *a3, CFTypeRef *a4)
{
  uint64_t v7;
  CFTypeRef v8;
  uint64_t DerivedStorage;
  uint64_t v10;
  CMTime v12;
  CFTypeRef cf;

  cf = 0;
  if (a4)
  {
    FigRenderPipelineGetClassID();
    v7 = CMDerivedObjectCreate();
    v8 = cf;
    if ((_DWORD)v7
      || (DerivedStorage = CMBaseObjectGetDerivedStorage(),
          *(_QWORD *)(DerivedStorage + 8) = FigSimpleMutexCreate(),
          CMTimeMakeWithSeconds(&v12, 0.5, 100),
          *(CMTime *)(DerivedStorage + 28) = v12,
          v7 = FigHapticQueueCreate(a1, a3, (uint64_t *)(DerivedStorage + 64)),
          v8 = cf,
          (_DWORD)v7))
    {
      v10 = v7;
    }
    else
    {
      v12 = *(CMTime *)(DerivedStorage + 28);
      v10 = FigSimpleRenderPipelineCreateWithCallback((uint64_t)a1, (uint64_t)figHapticRenderPipelineOutputCallback, (uint64_t)figHapticRenderPipelineResetOutputCallback, (uint64_t)cf, (uint64_t)&v12, 0, (_QWORD *)(DerivedStorage + 56));
      v8 = cf;
      if (!(_DWORD)v10)
      {
        *a4 = cf;
        return v10;
      }
    }
    if (v8)
      CFRelease(v8);
    return v10;
  }
  return FigSignalErrorAt();
}

uint64_t figHapticRenderPipelineOutputCallback(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return FigHapticQueueEnqueueSamples(*(_QWORD *)(DerivedStorage + 64), a2);
}

uint64_t figHapticRenderPipelineResetOutputCallback()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return FigHapticQueueStop(*(_QWORD *)(DerivedStorage + 64));
}

uint64_t FigHapticRenderPipelineInvalidate()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t FigBaseObject;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v1 = DerivedStorage;
    if (!*(_BYTE *)DerivedStorage)
    {
      *(_BYTE *)DerivedStorage = 1;
      if (*(_QWORD *)(DerivedStorage + 16))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterRemoveListener();
      }
      v2 = *(_QWORD *)(v1 + 56);
      if (v2)
      {
        FigBaseObject = FigRenderPipelineGetFigBaseObject(v2);
        if (FigBaseObject)
        {
          v4 = FigBaseObject;
          v5 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
          if (v5)
            v5(v4);
        }
      }
      v6 = *(_QWORD *)(v1 + 64);
      if (v6)
        FigHapticQueueStop(v6);
    }
  }
  return 0;
}

void FigHapticRenderPipelineFinalize()
{
  _QWORD *DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  FigHapticRenderPipelineInvalidate();
  v1 = (const void *)DerivedStorage[2];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[2] = 0;
  }
  FigSimpleMutexDestroy();
  v2 = (const void *)DerivedStorage[7];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[7] = 0;
  }
  v3 = (const void *)DerivedStorage[8];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[8] = 0;
  }
}

__CFString *FigHapticRenderPipelineCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigHapticRenderPipeline %p>"), a1);
  return Mutable;
}

uint64_t FigHapticRenderPipelineCopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFDictionaryRef *a4)
{
  _BYTE *DerivedStorage;
  _BYTE *v8;
  CFTypeRef v9;
  uint64_t result;
  const __CFAllocator *v11;
  CFDictionaryRef v12;
  uint64_t FigBaseObject;
  uint64_t (*v14)(uint64_t, const void *, uint64_t, CFDictionaryRef *);
  CMTime v15;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  if (*DerivedStorage || !a2 || !a4)
    return FigSignalErrorAt();
  if (CFEqual(a2, CFSTR("Timebase")))
  {
    MEMORY[0x19402EEEC](*((_QWORD *)v8 + 1));
    v9 = (CFTypeRef)*((_QWORD *)v8 + 2);
    if (v9)
      v9 = CFRetain(v9);
    *a4 = (CFDictionaryRef)v9;
    MEMORY[0x19402EF04](*((_QWORD *)v8 + 1));
    return 0;
  }
  else if (CFEqual(a2, CFSTR("PipelineLatency")))
  {
    v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v15 = *(CMTime *)(v8 + 28);
    v12 = CMTimeCopyAsDictionary(&v15, v11);
    result = 0;
    *a4 = v12;
  }
  else
  {
    FigBaseObject = FigRenderPipelineGetFigBaseObject(*((_QWORD *)v8 + 7));
    v14 = *(uint64_t (**)(uint64_t, const void *, uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
    if (v14)
      return v14(FigBaseObject, a2, a3, a4);
    else
      return 4294954514;
  }
  return result;
}

uint64_t FigHapticRenderPipelineSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  _BYTE *DerivedStorage;
  _BYTE *v6;
  CFTypeID v7;
  uint64_t v8;
  const void *v9;
  CFTypeID v10;
  uint64_t result;
  uint64_t FigBaseObject;
  uint64_t (*v13)(uint64_t, const void *, const void *);
  CFTypeID v14;
  CFTypeID v15;
  uint64_t v16;
  Boolean Value;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  if (*DerivedStorage || !a2)
    return FigSignalErrorAt();
  if (CFEqual(a2, CFSTR("Timebase")))
  {
    if (!a3 || (v7 = CFGetTypeID(a3), v7 == CMTimebaseGetTypeID()))
    {
      v8 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19402EEEC](*(_QWORD *)(v8 + 8));
      if (*(_QWORD *)(v8 + 16))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterRemoveListener();
        v9 = *(const void **)(v8 + 16);
      }
      else
      {
        v9 = 0;
      }
      *(_QWORD *)(v8 + 16) = a3;
      if (a3)
        CFRetain(a3);
      if (v9)
        CFRelease(v9);
      FigHapticQueueSetTimebase(*(_QWORD *)(v8 + 64), (uint64_t)a3);
      if (*(_QWORD *)(v8 + 16))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterAddListener();
        if (CMTimebaseGetRate(*(CMTimebaseRef *)(v8 + 16)) != 0.0)
        {
          CMNotificationCenterGetDefaultLocalCenter();
          figHapticRenderPipelineEffectiveRateChanged();
        }
      }
      MEMORY[0x19402EF04](*(_QWORD *)(v8 + 8));
      goto LABEL_23;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(a2, CFSTR("ActiveHapticChannelIndex")))
  {
    if (a3)
    {
      v10 = CFGetTypeID(a3);
      if (v10 == CFNumberGetTypeID())
      {
        result = FigHapticQueueSetActiveChannelIndex(*((_QWORD *)v6 + 8), (CFNumberRef)a3);
        if ((_DWORD)result)
          return result;
        goto LABEL_23;
      }
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(a2, CFSTR("SoftwareVolume1")))
  {
    if (a3)
    {
      v14 = CFGetTypeID(a3);
      if (v14 == CFNumberGetTypeID())
      {
        result = FigHapticQueueSetVolume(*((_QWORD *)v6 + 8), (CFNumberRef)a3);
        if ((_DWORD)result)
          return result;
        goto LABEL_23;
      }
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(CFSTR("Muted"), a2))
  {
    if (!a3)
      return FigSignalErrorAt();
    v15 = CFGetTypeID(a3);
    if (v15 != CFBooleanGetTypeID())
      return FigSignalErrorAt();
    v16 = *((_QWORD *)v6 + 8);
    Value = CFBooleanGetValue((CFBooleanRef)a3);
    FigHapticQueueSetIsMuted(v16, Value);
  }
LABEL_23:
  FigBaseObject = FigRenderPipelineGetFigBaseObject(*((_QWORD *)v6 + 7));
  v13 = *(uint64_t (**)(uint64_t, const void *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v13)
    return v13(FigBaseObject, a2, a3);
  else
    return 4294954514;
}

void figHapticRenderPipelineEffectiveRateChanged()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 16)) <= 0.0)
  {
    if (!FigHapticQueuePause(*(_QWORD *)(DerivedStorage + 64)))
      *(_BYTE *)(DerivedStorage + 24) = 0;
  }
  else if (!*(_BYTE *)(DerivedStorage + 24) && !FigHapticQueueStart(*(_QWORD *)(DerivedStorage + 64)))
  {
    *(_BYTE *)(DerivedStorage + 24) = 1;
  }
}

uint64_t FigEndpointAudioSourceBufferQueueCreate(const __CFAllocator *a1, __int128 *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t DerivedStorage;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v13;
  const CMBufferCallbacks *CallbacksForSampleBuffersSortedByOutputPTS;
  uint64_t v15;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a4)
    return 4294950525;
  FigEndpointAudioSourceGetClassID();
  v7 = CMDerivedObjectCreate();
  if ((_DWORD)v7)
    return v7;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigCFDictionaryGetBooleanIfPresent();
  *(_BYTE *)(DerivedStorage + 2) = 0;
  v10 = *a2;
  v9 = a2[1];
  *(_QWORD *)(DerivedStorage + 40) = *((_QWORD *)a2 + 4);
  *(_OWORD *)(DerivedStorage + 8) = v10;
  *(_OWORD *)(DerivedStorage + 24) = v9;
  v12 = *a2;
  v11 = a2[1];
  *(_QWORD *)(DerivedStorage + 80) = *((_QWORD *)a2 + 4);
  *(_OWORD *)(DerivedStorage + 48) = v12;
  *(_OWORD *)(DerivedStorage + 64) = v11;
  v13 = (_OWORD *)MEMORY[0x1E0CA2E18];
  *(_QWORD *)(DerivedStorage + 156) = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  *(_OWORD *)(DerivedStorage + 140) = *v13;
  *(_BYTE *)(DerivedStorage + 136) = 0;
  *(_QWORD *)(DerivedStorage + 168) = 0;
  *(_BYTE *)(DerivedStorage + 3) = 1;
  CallbacksForSampleBuffersSortedByOutputPTS = CMBufferQueueGetCallbacksForSampleBuffersSortedByOutputPTS();
  v15 = CMBufferQueueCreate(a1, 0, CallbacksForSampleBuffersSortedByOutputPTS, (CMBufferQueueRef *)(DerivedStorage + 120));
  if (!(_DWORD)v15)
  {
    bufferQueueSource_setupStats(0);
    *a4 = 0;
  }
  return v15;
}

uint64_t bufferQueueSource_Invalidate()
{
  uint64_t DerivedStorage;
  uint64_t v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
  {
    *(_BYTE *)DerivedStorage = 1;
    v1 = MEMORY[0x1E0CA2E18];
    *(_QWORD *)(DerivedStorage + 128) = 0;
    *(_OWORD *)(DerivedStorage + 140) = *(_OWORD *)v1;
    *(_QWORD *)(DerivedStorage + 156) = *(_QWORD *)(v1 + 16);
    *(_QWORD *)(DerivedStorage + 168) = 0;
  }
  return 0;
}

void bufferQueueSource_Finalize()
{
  _QWORD *DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  const void *v5;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)v1)
  {
    *(_BYTE *)v1 = 1;
    v2 = MEMORY[0x1E0CA2E18];
    *(_QWORD *)(v1 + 128) = 0;
    *(_OWORD *)(v1 + 140) = *(_OWORD *)v2;
    *(_QWORD *)(v1 + 156) = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v1 + 168) = 0;
  }
  v3 = (const void *)DerivedStorage[15];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[15] = 0;
  }
  v4 = (const void *)DerivedStorage[12];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[12] = 0;
  }
  v5 = (const void *)DerivedStorage[11];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[11] = 0;
  }
}

__CFString *bufferQueueSource_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;
  __CFString *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v4 = Mutable;
  if (!*(_BYTE *)DerivedStorage)
    CFStringAppendFormat(Mutable, 0, CFSTR("<FigEndpointAudioSourceBufferQueue %p (CMBufferQueue %p)>"), a1, *(_QWORD *)(DerivedStorage + 120));
  return v4;
}

uint64_t bufferQueueSource_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  _BYTE *DerivedStorage;
  _BYTE *v7;
  const void *v8;
  CFTypeRef v9;
  uint64_t result;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  if (CFEqual(a2, CFSTR("BufferQueue")))
  {
    v8 = (const void *)*((_QWORD *)v7 + 15);
    if (v8)
    {
LABEL_4:
      v9 = CFRetain(v8);
LABEL_8:
      result = 0;
      *a4 = v9;
      return result;
    }
LABEL_7:
    v9 = 0;
    goto LABEL_8;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA37D0]))
  {
    v8 = (const void *)*((_QWORD *)v7 + 11);
    if (v8)
      goto LABEL_4;
    goto LABEL_7;
  }
  return 4294954512;
}

uint64_t bufferQueueSource_SetProperty(void *a1, const void *a2, const void *a3)
{
  _BYTE *DerivedStorage;
  _BYTE *v7;
  CFTypeID v8;
  const void *v9;
  uint64_t result;
  CFTypeID v11;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  if (!CFEqual(a2, CFSTR("BufferQueue")))
  {
    if (!CFEqual(a2, CFSTR("ContinuousAudioMode")))
      return 4294954512;
    if (!v7[1])
    {
      if (a3)
      {
        v11 = CFGetTypeID(a3);
        if (v11 == CFBooleanGetTypeID())
        {
          result = 0;
          v7[136] = *MEMORY[0x1E0C9AE50] == (_QWORD)a3;
          return result;
        }
      }
      return 4294950525;
    }
    return 4294950524;
  }
  if (v7[1])
    return 4294950524;
  if (!a3)
    return 4294950525;
  v8 = CFGetTypeID(a3);
  if (v8 != CMBufferQueueGetTypeID())
    return 4294950525;
  v9 = (const void *)*((_QWORD *)v7 + 15);
  *((_QWORD *)v7 + 15) = a3;
  CFRetain(a3);
  if (v9)
    CFRelease(v9);
  bufferQueueSource_setupStats(a1);
  return 0;
}

opaqueCMBufferQueue *bufferQueueSource_setupStats(void *a1)
{
  uint64_t DerivedStorage;
  opaqueCMBufferQueue *result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = (opaqueCMBufferQueue *)FigGetCFPreferenceNumberWithDefault();
  *(_QWORD *)(DerivedStorage + 128) = (int)result;
  if ((_DWORD)result)
  {
    result = *(opaqueCMBufferQueue **)(DerivedStorage + 120);
    if (result)
      return (opaqueCMBufferQueue *)CMBufferQueueSetValidationCallback(result, (CMBufferValidationCallback)bufferQueueSource_queueStats, a1);
  }
  return result;
}

uint64_t bufferQueueSource_queueStats()
{
  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 128))
    ++bufferQueueSource_queueStats_count;
  return 0;
}

uint64_t bufferQueueSource_Resume()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  if (!*(_BYTE *)(DerivedStorage + 1))
  {
    *(_BYTE *)(DerivedStorage + 1) = 1;
    *(_DWORD *)(DerivedStorage + 112) = 0;
  }
  return 0;
}

uint64_t bufferQueueSource_Suspend()
{
  _BYTE *DerivedStorage;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
    return FigSignalErrorAt();
  if (DerivedStorage[1])
    DerivedStorage[1] = 0;
  return 0;
}

uint64_t bufferQueueSource_Flush()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  const void *v2;
  uint64_t v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v1 = DerivedStorage;
  v2 = *(const void **)(DerivedStorage + 96);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(v1 + 96) = 0;
  }
  *(_QWORD *)(v1 + 104) = 0;
  v3 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)(v1 + 140) = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(v1 + 156) = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v1 + 168) = 0;
  *(_BYTE *)(v1 + 3) = 1;
  if (*(_BYTE *)(v1 + 2))
    return 0;
  else
    return CMBufferQueueReset(*(CMBufferQueueRef *)(v1 + 120));
}

BOOL bufferQueueSource_CanProduceBytes(uint64_t a1, unint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  size_t TotalSize;
  OpaqueCMBlockBuffer *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
  {
    TotalSize = 0;
  }
  else
  {
    v4 = DerivedStorage;
    if (a2 <= 1)
      a2 = 1;
    TotalSize = CMBufferQueueGetTotalSize(*(CMBufferQueueRef *)(DerivedStorage + 120));
    v6 = *(OpaqueCMBlockBuffer **)(v4 + 96);
    if (v6)
      TotalSize = CMBlockBufferGetDataLength(v6) + TotalSize - *(_QWORD *)(v4 + 104);
  }
  return TotalSize >= a2;
}

uint64_t bufferQueueSource_FillBuffer(uint64_t a1, uint64_t a2, size_t a3, size_t *a4, size_t *a5, _QWORD *a6, uint64_t a7)
{
  uint64_t DerivedStorage;
  uint64_t v13;
  OpaqueCMBlockBuffer *v14;
  size_t DataLength;
  const AudioStreamBasicDescription *v16;
  size_t v17;
  CMTime *v18;
  int *v19;
  opaqueCMSampleBuffer *v20;
  opaqueCMSampleBuffer *v21;
  uint64_t v22;
  int *v23;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int value;
  unsigned int v26;
  Float64 Seconds;
  CMBlockBufferRef DataBuffer;
  OpaqueCMBlockBuffer *v29;
  int32_t v30;
  CMFormatDescriptionRef FormatDescription;
  const void *v32;
  const AudioStreamBasicDescription *StreamBasicDescription;
  size_t v34;
  size_t v35;
  size_t v36;
  size_t v37;
  uint64_t result;
  size_t v39;
  const void *v40;
  int v41;
  unint64_t v42;
  size_t v43;
  __int128 *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  size_t *v50;
  _QWORD *v51;
  uint64_t v52;
  CMTime v55;
  os_log_type_t type;
  __int128 v57;
  CMTime v58;
  CMTime v59;
  CMTime v60;
  CMTime rhs;
  Float64 v62;
  CMTime lhs;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v60 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v59 = v60;
  v58.epoch = v60.epoch;
  v57 = *(_OWORD *)(MEMORY[0x1E0CA2E18] + 8);
  *(_OWORD *)&v58.value = *(_OWORD *)&v60.value;
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v13 = DerivedStorage;
  if (!*(_BYTE *)(DerivedStorage + 1) || !*(_DWORD *)(DerivedStorage + 32))
    return FigSignalErrorAt();
  v14 = *(OpaqueCMBlockBuffer **)(DerivedStorage + 96);
  if (v14)
    DataLength = CMBlockBufferGetDataLength(v14);
  else
    DataLength = 0;
  if (CMBufferQueueGetTotalSize(*(CMBufferQueueRef *)(v13 + 120)) + DataLength - *(_QWORD *)(v13 + 104) <= a3)
    a3 = CMBufferQueueGetTotalSize(*(CMBufferQueueRef *)(v13 + 120)) + DataLength - *(_QWORD *)(v13 + 104);
  if (!a3)
  {
    v17 = 0;
    v21 = 0;
    v16 = 0;
    v41 = 0;
LABEL_57:
    v42 = *(unsigned int *)(v13 + 72);
    if (a4)
      *a4 = v17;
    v43 = v17 / v42;
    if (a5)
      *a5 = v43;
    if (a6)
      *a6 = *(unsigned int *)(v13 + 112);
    v44 = (__int128 *)(v13 + 48);
    if (a7)
    {
      v45 = *v44;
      v46 = *(_OWORD *)(v13 + 64);
      *(_QWORD *)(a7 + 32) = *(_QWORD *)(v13 + 80);
      *(_OWORD *)a7 = v45;
      *(_OWORD *)(a7 + 16) = v46;
    }
    if (!v16)
      v41 = 0;
    if (v41 == 1)
    {
      v47 = *(_OWORD *)&v16->mSampleRate;
      v48 = *(_OWORD *)&v16->mBytesPerPacket;
      *(_QWORD *)(v13 + 80) = *(_QWORD *)&v16->mBitsPerChannel;
      *v44 = v47;
      *(_OWORD *)(v13 + 64) = v48;
    }
    v49 = 0;
    result = 0;
    *(_DWORD *)(v13 + 112) += v43;
    if (v21)
      goto LABEL_70;
    return result;
  }
  v50 = a5;
  v51 = a6;
  v52 = a7;
  v16 = 0;
  v17 = 0;
  v18 = (CMTime *)(v13 + 140);
  v19 = &dword_1EE2A3000;
  while (1)
  {
    if (*(_QWORD *)(v13 + 96))
      goto LABEL_39;
    v20 = (opaqueCMSampleBuffer *)CMBufferQueueDequeueAndRetain(*(CMBufferQueueRef *)(v13 + 120));
    v21 = v20;
    if (!v20)
      goto LABEL_54;
    CMSampleBufferGetOutputPresentationTimeStamp(&v60, v20);
    CMSampleBufferGetOutputDuration(&v58, v21);
    lhs = v60;
    rhs = v58;
    CMTimeAdd(&v59, &lhs, &rhs);
    if (*(_BYTE *)(v13 + 3))
    {
      if (v19[360])
      {
        v22 = a2;
        v23 = v19;
        LODWORD(v55.value) = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        value = v55.value;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
          v26 = value;
        else
          v26 = value & 0xFFFFFFFE;
        if (v26)
        {
          lhs = v60;
          Seconds = CMTimeGetSeconds(&lhs);
          LODWORD(rhs.value) = 136315650;
          *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"bufferQueueSource_FillBuffer";
          LOWORD(rhs.flags) = 2048;
          *(_QWORD *)((char *)&rhs.flags + 2) = a1;
          HIWORD(rhs.epoch) = 2048;
          v62 = Seconds;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v19 = v23;
        a2 = v22;
        v18 = (CMTime *)(v13 + 140);
      }
      *(_BYTE *)(v13 + 3) = 0;
    }
    if ((*(_BYTE *)(v13 + 152) & 1) == 0)
      *v18 = v60;
    DataBuffer = CMSampleBufferGetDataBuffer(v21);
    if (!DataBuffer)
      break;
    v29 = (OpaqueCMBlockBuffer *)CFRetain(DataBuffer);
    *(_QWORD *)(v13 + 96) = v29;
    if (!v29)
      goto LABEL_73;
    DataLength = CMBlockBufferGetDataLength(v29);
    if (*(_BYTE *)(v13 + 136) && (*(_DWORD *)(v13 + 152) & 0x1D) == 1)
    {
      lhs = *v18;
      rhs = v60;
      if (CMTimeCompare(&lhs, &rhs) < 0)
      {
        rhs = v60;
        v55 = *v18;
        CMTimeSubtract(&lhs, &rhs, &v55);
        v57 = *(_OWORD *)&lhs.timescale;
        v30 = (int)*(double *)(v13 + 8);
        rhs = lhs;
        CMTimeConvertScale(&lhs, &rhs, v30, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
        v57 = *(_OWORD *)&lhs.timescale;
        *(_QWORD *)(v13 + 168) = lhs.value * *(unsigned int *)(v13 + 32);
      }
      *v18 = v59;
    }
    FormatDescription = CMSampleBufferGetFormatDescription(v21);
    if (!FigCFEqual())
    {
      v32 = *(const void **)(v13 + 88);
      *(_QWORD *)(v13 + 88) = FormatDescription;
      if (FormatDescription)
        CFRetain(FormatDescription);
      if (v32)
        CFRelease(v32);
    }
    StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(FormatDescription);
    v16 = StreamBasicDescription;
    if (StreamBasicDescription && memcmp(StreamBasicDescription, (const void *)(v13 + 48), 0x28uLL))
    {
      v41 = 1;
      goto LABEL_55;
    }
    CFRelease(v21);
LABEL_39:
    v34 = *(_QWORD *)(v13 + 168);
    v35 = a3 - v17;
    if (v34)
    {
      if (v35 >= v34)
        v36 = *(_QWORD *)(v13 + 168);
      else
        v36 = a3 - v17;
      bzero((void *)(a2 + v17), v36);
      *(_QWORD *)(v13 + 168) -= v36;
    }
    else
    {
      v37 = *(_QWORD *)(v13 + 104);
      if (v35 >= DataLength - v37)
        v36 = DataLength - v37;
      else
        v36 = a3 - v17;
      result = CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v13 + 96), v37, v36, (void *)(a2 + v17));
      if ((_DWORD)result)
        return result;
      v39 = *(_QWORD *)(v13 + 104) + v36;
      *(_QWORD *)(v13 + 104) = v39;
      if (v39 >= DataLength)
      {
        v40 = *(const void **)(v13 + 96);
        if (v40)
        {
          CFRelease(v40);
          *(_QWORD *)(v13 + 96) = 0;
        }
        *(_QWORD *)(v13 + 104) = 0;
      }
    }
    v17 += v36;
    if (v17 >= a3)
    {
      v21 = 0;
LABEL_54:
      v41 = 0;
LABEL_55:
      a6 = v51;
      a7 = v52;
      a5 = v50;
      goto LABEL_57;
    }
  }
  *(_QWORD *)(v13 + 96) = 0;
LABEL_73:
  v49 = FigSignalErrorAt();
LABEL_70:
  CFRelease(v21);
  return v49;
}

uint64_t bufferQueueSource_GetAudioFormat(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  __int128 v4;
  __int128 v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v4 = *(_OWORD *)(DerivedStorage + 8);
  v5 = *(_OWORD *)(DerivedStorage + 24);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(DerivedStorage + 40);
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  return 0;
}

uint64_t FigVirtualDisplayProcessorGetClassID()
{
  MEMORY[0x19402F294](&FigVirtualDisplayProcessorGetClassID_once, virtualDisplayProcessorRegisterType);
  return sVirtualDisplayProcessorClassID;
}

uint64_t virtualDisplayProcessorRegisterType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigVirtualDisplayProcessorGetTypeID()
{
  MEMORY[0x19402F294](&FigVirtualDisplayProcessorGetClassID_once, virtualDisplayProcessorRegisterType);
  return CMBaseClassGetCFTypeID();
}

CFStringRef virtualDisplayProcessorCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigVirtualDisplayProcessor %p]"), a1);
}

CGColorRef figHUDCGColorCreateWithRGB(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  CGColorSpace *DeviceRGB;
  CGFloat components[5];

  components[4] = *(CGFloat *)MEMORY[0x1E0C80C00];
  components[0] = a1;
  components[1] = a2;
  components[2] = a3;
  components[3] = a4;
  DeviceRGB = (CGColorSpace *)figHUDCGColorSpaceGetRGB_sColorSpace;
  if (!figHUDCGColorSpaceGetRGB_sColorSpace)
  {
    DeviceRGB = CGColorSpaceCreateDeviceRGB();
    figHUDCGColorSpaceGetRGB_sColorSpace = (uint64_t)DeviceRGB;
  }
  return CGColorCreate(DeviceRGB, components);
}

CGColorRef figHUDCGColorCreateWithIndex(int a1)
{
  CGColorSpace *DeviceRGB;

  DeviceRGB = (CGColorSpace *)figHUDCGColorSpaceGetRGB_sColorSpace;
  if (!figHUDCGColorSpaceGetRGB_sColorSpace)
  {
    DeviceRGB = CGColorSpaceCreateDeviceRGB();
    figHUDCGColorSpaceGetRGB_sColorSpace = (uint64_t)DeviceRGB;
  }
  return CGColorCreate(DeviceRGB, &gHudColors[4 * a1]);
}

uint64_t FigSampleAttachmentCollectorGetClassID()
{
  MEMORY[0x19402F294](&FigSampleAttachmentCollectorGetClassID_sRegisterFigSampleAttachmentCollectorBaseTypeOnce, RegisterFigSampleAttachmentCollectorBaseType);
  return sFigSampleAttachmentCollectorClassID;
}

uint64_t RegisterFigSampleAttachmentCollectorBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigSampleAttachmentCollectorGetTypeID()
{
  MEMORY[0x19402F294](&FigSampleAttachmentCollectorGetClassID_sRegisterFigSampleAttachmentCollectorBaseTypeOnce, RegisterFigSampleAttachmentCollectorBaseType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigSampleAttachmentCollectorCreateSynchronous(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t DerivedStorage;
  CFTypeRef v8;

  if (!a4)
    return FigSignalErrorAt();
  MEMORY[0x19402F294](&FigSampleAttachmentCollectorGetClassID_sRegisterFigSampleAttachmentCollectorBaseTypeOnce, RegisterFigSampleAttachmentCollectorBaseType);
  v6 = CMDerivedObjectCreate();
  if (!(_DWORD)v6)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_QWORD *)(DerivedStorage + 72) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (a2)
      v8 = CFRetain(a2);
    else
      v8 = 0;
    v6 = 0;
    *(_QWORD *)(DerivedStorage + 8) = v8;
    *(_BYTE *)DerivedStorage = 0;
    *a4 = 0;
  }
  return v6;
}

uint64_t FigSampleAttachmentCollectorCreateAsynchronous(const __CFAllocator *a1, const void *a2, void *a3, const void *a4, const void *a5, uint64_t a6, __int128 *a7, uint64_t a8, CFTypeRef *a9)
{
  uint64_t MetadataBufferProvidersAndInstallTriggers;
  uint64_t DerivedStorage;
  CFTypeRef v18;
  CFTypeRef v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t (*)(), uint64_t, uint64_t);
  int BooleanIfPresent;
  BOOL v26;
  int v27;
  int v28;
  BOOL v29;
  CFNumberRef v30;
  uint64_t FigBaseObject;
  void (*v32)(uint64_t, const __CFString *, CFNumberRef);
  uint64_t v33;
  void (*v34)(uint64_t, const __CFString *, _QWORD);
  uint64_t v35;
  CFTypeRef v36;
  uint64_t (*v37)(uint64_t, uint64_t (*)(uint64_t), CFTypeRef);
  uint64_t v38;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  CMTime time;
  __int16 v44;
  CFTypeRef cf;

  cf = 0;
  v44 = 0;
  if (!a9 || !a3 || !a5)
  {
    MetadataBufferProvidersAndInstallTriggers = FigSignalErrorAt();
    goto LABEL_39;
  }
  MEMORY[0x19402F294](&FigSampleAttachmentCollectorGetClassID_sRegisterFigSampleAttachmentCollectorBaseTypeOnce, RegisterFigSampleAttachmentCollectorBaseType);
  MetadataBufferProvidersAndInstallTriggers = CMDerivedObjectCreate();
  if ((_DWORD)MetadataBufferProvidersAndInstallTriggers)
    goto LABEL_39;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v18 = a2 ? CFRetain(a2) : 0;
  *(_QWORD *)(DerivedStorage + 8) = v18;
  *(_BYTE *)DerivedStorage = 0;
  *(_QWORD *)(DerivedStorage + 48) = CFRetain(a3);
  v19 = a4 ? CFRetain(a4) : 0;
  *(_QWORD *)(DerivedStorage + 80) = v19;
  MetadataBufferProvidersAndInstallTriggers = collector_createMetadataBufferProvidersAndInstallTriggers(cf);
  if ((_DWORD)MetadataBufferProvidersAndInstallTriggers)
    goto LABEL_39;
  *(_QWORD *)(DerivedStorage + 24) = CFRetain(a5);
  *(_QWORD *)(DerivedStorage + 112) = FigReentrantMutexCreate();
  v20 = *(_QWORD *)(a6 + 16);
  *(_OWORD *)(DerivedStorage + 120) = *(_OWORD *)a6;
  *(_QWORD *)(DerivedStorage + 136) = v20;
  v21 = *a7;
  *(_QWORD *)(DerivedStorage + 160) = *((_QWORD *)a7 + 2);
  *(_OWORD *)(DerivedStorage + 144) = v21;
  v22 = *(_QWORD *)(DerivedStorage + 24);
  time = *(CMTime *)(DerivedStorage + 120);
  v41 = *a7;
  v42 = *((_QWORD *)a7 + 2);
  MetadataBufferProvidersAndInstallTriggers = FigSampleBufferConsumerCreateForBufferQueue(v22, (uint64_t)&time, (uint64_t)&v41, (_QWORD *)(DerivedStorage + 32));
  if ((_DWORD)MetadataBufferProvidersAndInstallTriggers)
    goto LABEL_39;
  v23 = *(_QWORD *)(DerivedStorage + 32);
  v24 = *(uint64_t (**)(uint64_t, uint64_t (*)(), uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 32);
  if (!v24)
  {
LABEL_34:
    v38 = 4294954514;
    goto LABEL_35;
  }
  MetadataBufferProvidersAndInstallTriggers = v24(v23, collector_handleOutputVideoQueueLowWaterTrigger, DerivedStorage, DerivedStorage + 40);
  if ((_DWORD)MetadataBufferProvidersAndInstallTriggers
    || (MetadataBufferProvidersAndInstallTriggers = FigSampleBufferProviderCreateForBufferQueue((uint64_t)a1, *(const void **)(DerivedStorage + 48), (CFTypeRef *)(DerivedStorage + 64)), (_DWORD)MetadataBufferProvidersAndInstallTriggers))
  {
LABEL_39:
    v38 = MetadataBufferProvidersAndInstallTriggers;
    goto LABEL_35;
  }
  time = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  CMBufferQueueInstallTrigger((CMBufferQueueRef)a3, (CMBufferQueueTriggerCallback)collector_handleInputQueueBecomesNonEmptyTrigger, (void *)DerivedStorage, 7, &time, (CMBufferQueueTriggerToken *)(DerivedStorage + 56));
  BooleanIfPresent = FigCFDictionaryGetBooleanIfPresent();
  if (HIBYTE(v44))
    v26 = 1;
  else
    v26 = BooleanIfPresent == 0;
  if (v26)
    v27 = 3;
  else
    v27 = 31;
  v28 = FigCFDictionaryGetBooleanIfPresent();
  if ((_BYTE)v44)
    v29 = v28 == 0;
  else
    v29 = 1;
  if (!v29)
    v27 = 16;
  FigCFDictionaryGetBooleanIfPresent();
  v40 = 0;
  FigActivitySchedulerCreateForNewThread((uint64_t)a1, v27, CFSTR("com.apple.coremedia.figsampleattachmentcollector"), &v40);
  *(_QWORD *)(DerivedStorage + 16) = v40;
  LODWORD(time.value) = 0;
  v30 = CFNumberCreate(a1, kCFNumberSInt32Type, &time);
  FigBaseObject = FigActivitySchedulerGetFigBaseObject(*(_QWORD *)(DerivedStorage + 16));
  v32 = *(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v32)
    v32(FigBaseObject, CFSTR("ClientPID"), v30);
  CFRelease(v30);
  v33 = FigActivitySchedulerGetFigBaseObject(*(_QWORD *)(DerivedStorage + 16));
  v34 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v34)
    v34(v33, CFSTR("ThrottleForBackground"), *MEMORY[0x1E0C9AE40]);
  v35 = *(_QWORD *)(DerivedStorage + 16);
  v36 = cf;
  v37 = *(uint64_t (**)(uint64_t, uint64_t (*)(uint64_t), CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 8);
  if (!v37)
    goto LABEL_34;
  v38 = v37(v35, collector_processAsynchronouslyUntilHighWaterMet, v36);
  if (!(_DWORD)v38)
  {
    *a9 = cf;
    return v38;
  }
LABEL_35:
  if (cf)
    CFRelease(cf);
  return v38;
}

uint64_t collector_createMetadataBufferProvidersAndInstallTriggers(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFArray *v3;
  CFIndex Count;
  uint64_t v5;
  CFMutableArrayRef Mutable;
  CFIndex v7;
  const void *v8;
  uint64_t v9;
  const void *v10;
  const __CFAllocator *v11;
  CFMutableArrayRef v12;
  CFMutableArrayRef v13;
  uint64_t v14;
  CMTimeEpoch v15;
  opaqueCMBufferQueue *ValueAtIndex;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  __int128 v21;
  CMTime value;
  CMBufferQueueTriggerToken triggerTokenOut;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(const __CFArray **)(DerivedStorage + 80);
  if (!v3)
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
LABEL_22:
    v19 = 0;
    if (!Mutable)
      return v19;
    goto LABEL_28;
  }
  Count = CFArrayGetCount(v3);
  v5 = *MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Count)
    goto LABEL_22;
  if (Count < 1)
  {
LABEL_9:
    v10 = *(const void **)(DerivedStorage + 88);
    *(_QWORD *)(DerivedStorage + 88) = Mutable;
    if (Mutable)
      CFRetain(Mutable);
    if (v10)
      CFRelease(v10);
    v11 = CFGetAllocator(a1);
    v12 = CFArrayCreateMutable(v11, 0, MEMORY[0x1E0C9B378]);
    if (v12)
    {
      v13 = v12;
      if (Count < 1)
      {
LABEL_18:
        v18 = *(const void **)(DerivedStorage + 96);
        *(_QWORD *)(DerivedStorage + 96) = v13;
        CFRetain(v13);
        if (v18)
          CFRelease(v18);
        v19 = 0;
      }
      else
      {
        v14 = 0;
        v21 = *MEMORY[0x1E0CA2E68];
        v15 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
        while (1)
        {
          ValueAtIndex = (opaqueCMBufferQueue *)FigCFArrayGetValueAtIndex();
          value.epoch = v15;
          triggerTokenOut = 0;
          *(_OWORD *)&value.value = v21;
          v17 = CMBufferQueueInstallTrigger(ValueAtIndex, (CMBufferQueueTriggerCallback)collector_handleInputQueueBecomesNonEmptyTrigger, (void *)DerivedStorage, 7, &value, &triggerTokenOut);
          if ((_DWORD)v17)
            break;
          FigCFArrayAppendInt64();
          if (Count == ++v14)
            goto LABEL_18;
        }
        v19 = v17;
        FigSignalErrorAt();
      }
      CFRelease(v13);
      if (!Mutable)
        return v19;
    }
    else
    {
      v19 = FigSignalErrorAt();
      if (!Mutable)
        return v19;
    }
LABEL_28:
    CFRelease(Mutable);
    return v19;
  }
  v7 = 0;
  while (1)
  {
    value.value = 0;
    v8 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 80), v7);
    v9 = FigSampleBufferProviderCreateForBufferQueue(v5, v8, (CFTypeRef *)&value);
    if ((_DWORD)v9)
      break;
    CFArrayAppendValue(Mutable, (const void *)value.value);
    if (value.value)
      CFRelease((CFTypeRef)value.value);
    if (Count == ++v7)
      goto LABEL_9;
  }
  v19 = v9;
  FigSignalErrorAt();
  if (Mutable)
    goto LABEL_28;
  return v19;
}

uint64_t collector_processAsynchronouslyUntilHighWaterMet(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const __CFArray *v4;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  CMTimeFlags v7;
  CMTimeEpoch v8;
  const __CFArray *v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  opaqueCMSampleBuffer *v13;
  opaqueCMSampleBuffer *v14;
  const void *v15;
  unsigned int appended;
  uint64_t FirstValue;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  CMTimeValue *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t (*v28)(uint64_t);
  opaqueCMSampleBuffer *v29;
  opaqueCMSampleBuffer *v30;
  int NumSamples;
  const void *v32;
  const __CFArray *v33;
  CFIndex v34;
  unsigned int v35;
  char *v36;
  uint64_t LastValue;
  uint64_t v38;
  int v39;
  CMTimeFlags v40;
  CMTimeEpoch v41;
  CMTimeFlags v42;
  CMTimeEpoch v43;
  int32_t v44;
  CMTimeFlags v45;
  CMTimeEpoch v46;
  CMTimeFlags v47;
  CMTimeEpoch v48;
  CFIndex v49;
  CFIndex v50;
  uint64_t v51;
  CMSampleBufferRef v52;
  void (*v53)(uint64_t, CMSampleBufferRef);
  uint64_t v54;
  CFArrayRef *ValueAtIndex;
  const __CFArray *v56;
  CFIndex v57;
  uint64_t v58;
  void (*v59)(uint64_t, char *, CMTime *, CMTime *);
  CFIndex v60;
  const void *v61;
  const void *v62;
  unsigned int v63;
  CMTimeFlags v64;
  CMTimeEpoch v65;
  CMTimeFlags v66;
  CMTimeEpoch v67;
  CMTimeFlags v69;
  CMTimeEpoch v70;
  CMTimeFlags v71;
  CMTimeEpoch v72;
  CFIndex v74;
  CMTimeEpoch v76;
  uint64_t v77;
  uint64_t v78;
  const __CFString *v79;
  const __CFString *v80;
  CMTimeValue *v81;
  CMTime *v82;
  CFArrayRef *v83;
  int v84;
  uint64_t v85;
  CFTypeRef v86;
  const __CFString *key;
  CFIndex Count;
  char v89;
  CMTime v90;
  CMTime time2;
  CMTime rhs;
  CMTime lhs;
  CMTime time;
  CMTime time1;
  CMTimeValue value;
  CMTimeScale timescale;
  CMTimeValue v98;
  CMTimeScale v99;
  CMTime v100;
  CMTime v101;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 112))
    return FigSignalErrorAt();
  v78 = DerivedStorage;
  MEMORY[0x19402EA0C]();
  v77 = a1;
  v3 = CMBaseObjectGetDerivedStorage();
  v4 = *(const __CFArray **)(v3 + 224);
  if (v4)
    Count = CFArrayGetCount(v4);
  else
    Count = 0;
  if (!*(_BYTE *)(v3 + 104))
    return MEMORY[0x19402EA24](*(_QWORD *)(v78 + 112));
  v81 = (CMTimeValue *)(v3 + 120);
  key = (const __CFString *)*MEMORY[0x1E0CA26E0];
  v80 = (const __CFString *)*MEMORY[0x1E0CA2678];
  v86 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
  v79 = (const __CFString *)*MEMORY[0x1E0CA26C0];
  while (1)
  {
    memset(&v90, 0, sizeof(v90));
    CMBufferQueueGetDuration(&v90, *(CMBufferQueueRef *)(v3 + 24));
    v101.value = v90.value;
    flags = v90.flags;
    v101.timescale = v90.timescale;
    epoch = v90.epoch;
    v100.value = *v81;
    v100.timescale = *(_DWORD *)(v3 + 128);
    v7 = *(_DWORD *)(v3 + 132);
    v8 = *(_QWORD *)(v3 + 136);
    if ((v90.flags & 0x1F) == 3 || (*(_DWORD *)(v3 + 132) & 0x1F) == 3)
    {
      memset(&time1, 0, sizeof(time1));
      lhs = v90;
      rhs.value = *v81;
      rhs.timescale = *(_DWORD *)(v3 + 128);
      rhs.flags = v7;
      rhs.epoch = v8;
      CMTimeSubtract(&time, &lhs, &rhs);
      CMTimeAbsoluteValue(&time1, &time);
      CMTimeMake(&time2, 1, 1000000000);
      lhs = time1;
      if (CMTimeCompare(&lhs, &time2) <= 0)
        return MEMORY[0x19402EA24](*(_QWORD *)(v78 + 112));
    }
    time1.value = v101.value;
    time1.timescale = v101.timescale;
    time1.flags = flags;
    time1.epoch = epoch;
    lhs.value = v100.value;
    lhs.timescale = v100.timescale;
    lhs.flags = v7;
    lhs.epoch = v8;
    if ((CMTimeCompare(&time1, &lhs) & 0x80000000) == 0)
      return MEMORY[0x19402EA24](*(_QWORD *)(v78 + 112));
    *(_DWORD *)(v3 + 168) = *(_DWORD *)(v3 + 340);
    v9 = *(const __CFArray **)(v3 + 176);
    if (!v9 || !CFArrayGetCount(v9))
    {
      v10 = *(_BYTE *)(v3 + 336) == 0;
      v11 = *(_QWORD *)(v3 + 64);
      v12 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (v12)
      {
        v13 = (opaqueCMSampleBuffer *)v12(v11);
        if (v13)
        {
          v14 = v13;
          if (*(_QWORD *)(v3 + 184))
          {
            CMGetAttachment(v13, key, 0);
            if (FigCFEqual())
            {
              v15 = *(const void **)(v3 + 184);
              if (v15)
              {
                CFRelease(v15);
                *(_QWORD *)(v3 + 184) = 0;
              }
            }
          }
          appended = collectorPendingSampleArray_appendSampleBuffer(*(void **)(v3 + 176), v14, v10);
          CFRelease(v14);
          if (appended)
            return MEMORY[0x19402EA24](*(_QWORD *)(v78 + 112));
        }
      }
    }
    FirstValue = FigCFArrayGetFirstValue();
    if (!FirstValue)
      return MEMORY[0x19402EA24](*(_QWORD *)(v78 + 112));
    v18 = FirstValue;
    if (!*(_BYTE *)(FirstValue + 58) && !*(_QWORD *)(v3 + 184) && !*(_BYTE *)(FirstValue + 56))
      break;
    v19 = *(_QWORD *)(v3 + 32);
    v20 = *(_QWORD *)FirstValue;
    v21 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v21)
      v21(v19, v20);
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v3 + 176), 0);
LABEL_28:
    if (!*(_BYTE *)(v3 + 104))
      return MEMORY[0x19402EA24](*(_QWORD *)(v78 + 112));
  }
  if (Count < 1)
  {
LABEL_86:
    if (CMSampleBufferGetSampleAttachmentsArray(*(CMSampleBufferRef *)v18, 0))
    {
      FigCFArrayGetFirstValue();
      FigCFDictionaryGetValue();
    }
    v51 = *(_QWORD *)(v3 + 32);
    v52 = *(CMSampleBufferRef *)v18;
    v53 = *(void (**)(uint64_t, CMSampleBufferRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v53)
      v53(v51, v52);
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v3 + 176), 0);
    if (Count >= 1)
    {
      v54 = 0;
      do
      {
        ValueAtIndex = (CFArrayRef *)FigCFArrayGetValueAtIndex();
        v83 = ValueAtIndex;
        v85 = v54;
        v56 = *ValueAtIndex;
        if (*ValueAtIndex)
          v57 = CFArrayGetCount(*ValueAtIndex);
        else
          v57 = 0;
        v101 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
        v100 = v101;
        v89 = 0;
        v58 = *(_QWORD *)(v3 + 64);
        v59 = *(void (**)(uint64_t, char *, CMTime *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 32);
        if (v59)
          v59(v58, &v89, &v101, &v100);
        if ((v101.flags & 1) == 0)
          v101 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E28];
        if ((v100.flags & 1) == 0)
          v100 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
        if (v57 >= 1)
        {
          do
          {
            v60 = v57 - 1;
            v61 = CFArrayGetValueAtIndex(v56, v57 - 1);
            v62 = v61;
            v63 = *(_DWORD *)(v3 + 168);
            if (v63 <= 1)
            {
              v98 = *((_QWORD *)v61 + 1);
              v64 = *((_DWORD *)v61 + 5);
              v99 = *((_DWORD *)v61 + 4);
              v65 = *((_QWORD *)v61 + 3);
              value = v101.value;
              v66 = v101.flags;
              timescale = v101.timescale;
              v67 = v101.epoch;
              if ((v64 & 0x1F) == 3 || (v101.flags & 0x1F) == 3)
              {
                memset(&time1, 0, sizeof(time1));
                lhs.value = v98;
                lhs.timescale = v99;
                lhs.flags = v64;
                lhs.epoch = v65;
                rhs = v101;
                CMTimeSubtract(&time, &lhs, &rhs);
                CMTimeAbsoluteValue(&time1, &time);
                CMTimeMake(&time2, 1, 1000000000);
                lhs = time1;
                if (CMTimeCompare(&lhs, &time2) <= 0)
                  goto LABEL_121;
              }
              time1.value = v98;
              time1.timescale = v99;
              time1.flags = v64;
              time1.epoch = v65;
              lhs.value = value;
              lhs.timescale = timescale;
              lhs.flags = v66;
              lhs.epoch = v67;
              if (CMTimeCompare(&time1, &lhs) < 1)
              {
LABEL_121:
                v74 = v57 - 2;
                if ((unint64_t)v57 >= 2)
                {
                  do
                    CFArrayRemoveValueAtIndex(v56, v74--);
                  while (v74 != -1);
                }
                break;
              }
              v63 = *(_DWORD *)(v3 + 168);
            }
            if (v63 == -1)
            {
              v98 = *((_QWORD *)v62 + 1);
              v69 = *((_DWORD *)v62 + 5);
              v99 = *((_DWORD *)v62 + 4);
              v70 = *((_QWORD *)v62 + 3);
              value = v100.value;
              v71 = v100.flags;
              timescale = v100.timescale;
              v72 = v100.epoch;
              if ((v69 & 0x1F) == 3 || (v100.flags & 0x1F) == 3)
              {
                memset(&time1, 0, sizeof(time1));
                lhs.value = v98;
                lhs.timescale = v99;
                lhs.flags = v69;
                lhs.epoch = v70;
                rhs = v100;
                CMTimeSubtract(&time, &lhs, &rhs);
                CMTimeAbsoluteValue(&time1, &time);
                CMTimeMake(&time2, 1, 1000000000);
                lhs = time1;
                if (CMTimeCompare(&lhs, &time2) <= 0)
                  goto LABEL_121;
              }
              time1.value = v98;
              time1.timescale = v99;
              time1.flags = v69;
              time1.epoch = v70;
              lhs.value = value;
              lhs.timescale = timescale;
              lhs.flags = v71;
              lhs.epoch = v72;
              if ((CMTimeCompare(&time1, &lhs) & 0x80000000) == 0)
                goto LABEL_121;
            }
            --v57;
          }
          while ((unint64_t)(v60 + 1) > 1);
        }
        v83[3] = 0;
        v83[4] = 0;
        *((_BYTE *)v83 + 40) = 0;
        v54 = v85 + 1;
      }
      while (v85 + 1 != Count);
    }
    goto LABEL_28;
  }
  v22 = 0;
  v23 = (CMTimeValue *)(FirstValue + 8);
  v82 = (CMTime *)(FirstValue + 32);
  v84 = 1;
  do
  {
    v24 = FigCFArrayGetValueAtIndex();
    v25 = FigCFArrayGetValueAtIndex();
    if (*(_BYTE *)(v24 + 40))
      goto LABEL_75;
    v26 = v25;
    v27 = *(_DWORD *)(v3 + 168);
    *(_OWORD *)&rhs.value = *(_OWORD *)v23;
    rhs.epoch = *(_QWORD *)(v18 + 24);
    while (1)
    {
      v28 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (!v28)
        goto LABEL_57;
      v29 = (opaqueCMSampleBuffer *)v28(v26);
      if (!v29)
        goto LABEL_57;
      v30 = v29;
      memset(&time1, 0, sizeof(time1));
      CMSampleBufferGetOutputPresentationTimeStamp(&time1, v29);
      NumSamples = CMSampleBufferGetNumSamples(v30);
      if (*(_QWORD *)(v24 + 8))
      {
        CMGetAttachment(v30, key, 0);
        if (!FigCFEqual())
          goto LABEL_53;
        v32 = *(const void **)(v24 + 8);
        if (v32)
        {
          CFRelease(v32);
          *(_QWORD *)(v24 + 8) = 0;
        }
      }
      if (NumSamples
        || CMGetAttachment(v30, v80, 0) == v86 && CMGetAttachment(v30, v79, 0) != v86
        || CMGetAttachment(v30, v80, 0) == v86 && CMGetAttachment(v30, v79, 0) == v86)
      {
        break;
      }
LABEL_53:
      CFRelease(v30);
    }
    if (collectorPendingSampleArray_appendSampleBuffer(*(void **)v24, v30, 0))
    {
      CFRelease(v30);
      return MEMORY[0x19402EA24](*(_QWORD *)(v78 + 112));
    }
    memset(&time1, 0, sizeof(time1));
    CMSampleBufferGetOutputPresentationTimeStamp(&time1, v30);
    if (v27 == -1)
    {
      time = time1;
      lhs = rhs;
      if (CMTimeCompare(&time, &lhs) <= 0)
        goto LABEL_56;
      goto LABEL_53;
    }
    if (v27 != 1)
    {
      if (!v27)
        goto LABEL_56;
      goto LABEL_53;
    }
    time = time1;
    lhs = rhs;
    if (CMTimeCompare(&time, &lhs) < 0)
      goto LABEL_53;
LABEL_56:
    CFRelease(v30);
LABEL_57:
    if (!*(_QWORD *)v24 || !CFArrayGetCount(*(CFArrayRef *)v24))
    {
      v84 = 0;
      goto LABEL_75;
    }
    if (*(_DWORD *)(v24 + 16) != *(_DWORD *)(v3 + 192))
    {
      v84 = 0;
      *(_BYTE *)(v24 + 40) = 0;
      goto LABEL_75;
    }
    v33 = *(const __CFArray **)v24;
    v34 = *(_QWORD *)(v24 + 24);
    v35 = *(_DWORD *)(v3 + 168);
    *(_OWORD *)&time1.value = *(_OWORD *)v23;
    time1.epoch = *(_QWORD *)(v18 + 24);
    time = *v82;
    v36 = collectorPendingSampleArray_searchForPendingSampleAtPTSWithDuration(v33, &time1, &time, v34, v35);
    if (!v36)
    {
      LastValue = FigCFArrayGetLastValue();
      if (!*(_BYTE *)(LastValue + 60))
      {
        v38 = LastValue;
        v39 = *(_DWORD *)(v3 + 168);
        if (v39 != 1)
          goto LABEL_73;
        v101.value = *(_QWORD *)(LastValue + 8);
        v40 = *(_DWORD *)(LastValue + 20);
        v101.timescale = *(_DWORD *)(LastValue + 16);
        v41 = *(_QWORD *)(LastValue + 24);
        v100.value = *v23;
        v100.timescale = *(_DWORD *)(v18 + 16);
        v42 = *(_DWORD *)(v18 + 20);
        v43 = *(_QWORD *)(v18 + 24);
        if ((v40 & 0x1F) != 3 && (*(_DWORD *)(v18 + 20) & 0x1F) != 3)
          goto LABEL_131;
        memset(&time1, 0, sizeof(time1));
        lhs.value = v101.value;
        lhs.timescale = v101.timescale;
        lhs.flags = v40;
        lhs.epoch = v41;
        rhs.value = v100.value;
        rhs.timescale = v100.timescale;
        rhs.flags = v42;
        rhs.epoch = v43;
        v76 = v41;
        CMTimeSubtract(&time, &lhs, &rhs);
        CMTimeAbsoluteValue(&time1, &time);
        CMTimeMake(&time2, 1, 1000000000);
        lhs = time1;
        v44 = CMTimeCompare(&lhs, &time2);
        v41 = v76;
        if (v44 > 0)
        {
LABEL_131:
          time1.value = v101.value;
          time1.timescale = v101.timescale;
          time1.flags = v40;
          time1.epoch = v41;
          lhs.value = v100.value;
          lhs.timescale = v100.timescale;
          lhs.flags = v42;
          lhs.epoch = v43;
          if (CMTimeCompare(&time1, &lhs) < 0)
            goto LABEL_130;
        }
        v39 = *(_DWORD *)(v3 + 168);
LABEL_73:
        if (v39 == -1)
        {
          v101.value = *(_QWORD *)(v38 + 8);
          v45 = *(_DWORD *)(v38 + 20);
          v101.timescale = *(_DWORD *)(v38 + 16);
          v46 = *(_QWORD *)(v38 + 24);
          v100.value = *v23;
          v100.timescale = *(_DWORD *)(v18 + 16);
          v47 = *(_DWORD *)(v18 + 20);
          v48 = *(_QWORD *)(v18 + 24);
          if ((v45 & 0x1F) != 3 && (*(_DWORD *)(v18 + 20) & 0x1F) != 3)
            goto LABEL_80;
          memset(&time1, 0, sizeof(time1));
          lhs.value = v101.value;
          lhs.timescale = v101.timescale;
          lhs.flags = v45;
          lhs.epoch = v46;
          rhs.value = v100.value;
          rhs.timescale = v100.timescale;
          rhs.flags = v47;
          rhs.epoch = v48;
          CMTimeSubtract(&time, &lhs, &rhs);
          CMTimeAbsoluteValue(&time1, &time);
          CMTimeMake(&time2, 1, 1000000000);
          lhs = time1;
          if (CMTimeCompare(&lhs, &time2) > 0)
          {
LABEL_80:
            time1.value = v101.value;
            time1.timescale = v101.timescale;
            time1.flags = v45;
            time1.epoch = v46;
            lhs.value = v100.value;
            lhs.timescale = v100.timescale;
            lhs.flags = v47;
            lhs.epoch = v48;
            if (CMTimeCompare(&time1, &lhs) >= 1)
            {
LABEL_130:
              if (*(_QWORD *)v24)
              {
                v49 = CFArrayGetCount(*(CFArrayRef *)v24);
                v50 = v49 - (v49 > 0);
              }
              else
              {
                v50 = 0;
              }
              v84 = 0;
              *(_QWORD *)(v24 + 24) = v50;
              goto LABEL_75;
            }
          }
        }
      }
      *(_BYTE *)(v24 + 40) = 1;
      goto LABEL_75;
    }
    *(_BYTE *)(v24 + 40) = 1;
    *(_QWORD *)(v24 + 32) = v36;
    if (!v36[59] && *(_QWORD *)(v3 + 8))
      collector_updateVideoSampleAttachmentsWithMetadataSample(v77, *(opaqueCMSampleBuffer **)v18, *(_QWORD *)v36);
LABEL_75:
    ++v22;
  }
  while (v22 != Count);
  if (v84)
    goto LABEL_86;
  return MEMORY[0x19402EA24](*(_QWORD *)(v78 + 112));
}

CFTypeRef collector_CopyFormattingDesc()
{
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return CFRetain(CFSTR("[FSAC (invalidated)]"));
  else
    return CFRetain(CFSTR("[FSAC]"));
}

uint64_t collector_Invalidate(const void *a1)
{
  uint64_t DerivedStorage;
  void (*v3)(const void *);
  double v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
  {
    v3 = *(void (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v3)
      v3(a1);
    if (*(_QWORD *)(DerivedStorage + 112))
    {
      MEMORY[0x19402EA0C]();
      v4 = collector_tearDownAsyncProcessState(a1);
      MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 112), v4);
    }
    collector_tearDownSyncProcessState(a1);
  }
  *(_BYTE *)DerivedStorage = 1;
  return 0;
}

void collector_Finalize(const void *a1)
{
  _QWORD *DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  opaqueCMBufferQueue *v6;
  opaqueCMBufferQueueTriggerToken *v7;
  const __CFArray *v8;
  CFIndex Count;
  CFIndex v10;
  uint64_t i;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  collector_Invalidate(a1);
  v3 = DerivedStorage[4];
  if (v3)
  {
    v4 = DerivedStorage[5];
    if (v4)
    {
      v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
      if (v5)
        v5(v3, v4);
    }
  }
  v6 = (opaqueCMBufferQueue *)DerivedStorage[6];
  if (v6)
  {
    v7 = (opaqueCMBufferQueueTriggerToken *)DerivedStorage[7];
    if (v7)
      CMBufferQueueRemoveTrigger(v6, v7);
  }
  v8 = (const __CFArray *)DerivedStorage[10];
  if (v8)
  {
    Count = CFArrayGetCount(v8);
    if (Count >= 1)
    {
      v10 = Count;
      for (i = 0; i != v10; ++i)
      {
        FigCFArrayGetValueAtIndex();
        FigCFArrayGetInt64AtIndex();
      }
    }
  }
  v12 = (const void *)DerivedStorage[2];
  if (v12)
  {
    CFRelease(v12);
    DerivedStorage[2] = 0;
  }
  v13 = (const void *)DerivedStorage[11];
  if (v13)
  {
    CFRelease(v13);
    DerivedStorage[11] = 0;
  }
  v14 = (const void *)DerivedStorage[8];
  if (v14)
  {
    CFRelease(v14);
    DerivedStorage[8] = 0;
  }
  if (DerivedStorage[14])
  {
    FigSimpleMutexDestroy();
    DerivedStorage[14] = 0;
  }
  v15 = (const void *)DerivedStorage[9];
  if (v15)
  {
    CFRelease(v15);
    DerivedStorage[9] = 0;
  }
  v16 = (const void *)DerivedStorage[1];
  if (v16)
  {
    CFRelease(v16);
    DerivedStorage[1] = 0;
  }
  v17 = (const void *)DerivedStorage[10];
  if (v17)
  {
    CFRelease(v17);
    DerivedStorage[10] = 0;
  }
  v18 = (const void *)DerivedStorage[6];
  if (v18)
  {
    CFRelease(v18);
    DerivedStorage[6] = 0;
  }
  v19 = (const void *)DerivedStorage[3];
  if (v19)
  {
    CFRelease(v19);
    DerivedStorage[3] = 0;
  }
  v20 = (const void *)DerivedStorage[4];
  if (v20)
  {
    CFRelease(v20);
    DerivedStorage[4] = 0;
  }
  v21 = (const void *)DerivedStorage[12];
  if (v21)
  {
    CFRelease(v21);
    DerivedStorage[12] = 0;
  }
}

__CFString *collector_CopyDebugDesc(const void *a1)
{
  _BYTE *DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;
  const char *v6;
  CFAllocatorRef v7;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(a1);
  if (*DerivedStorage)
    v6 = " (invalidated)";
  else
    v6 = "";
  v7 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("FSAC %p retainCount: %d%s allocator: %p"), a1, v5, v6, v7);
  return Mutable;
}

uint64_t collector_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  _BYTE *DerivedStorage;
  _BYTE *v7;
  uint64_t result;
  const void *v9;
  CFTypeRef v10;
  const void **v11;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294954516;
  v7 = DerivedStorage;
  if (*DerivedStorage || !a4)
    return FigSignalErrorAt();
  if (CFEqual(CFSTR("MetadataSourceBuffersQueues"), a2))
  {
    v9 = (const void *)*((_QWORD *)v7 + 10);
    if (!v9)
      goto LABEL_11;
LABEL_16:
    v10 = CFRetain(v9);
    goto LABEL_17;
  }
  if (!CFEqual(CFSTR("SampleAttachmentCollectionRules"), a2))
  {
    if (CFEqual(CFSTR("PropagatePerFrameHDRDisplayMetadata"), a2))
    {
      v11 = (const void **)MEMORY[0x1E0C9AE40];
      if (v7[1])
        v11 = (const void **)MEMORY[0x1E0C9AE50];
      v9 = *v11;
      goto LABEL_16;
    }
    return FigSignalErrorAt();
  }
  v9 = (const void *)*((_QWORD *)v7 + 1);
  if (v9)
    goto LABEL_16;
LABEL_11:
  v10 = 0;
LABEL_17:
  result = 0;
  *a4 = v10;
  return result;
}

uint64_t collector_SetProperty(const void *a1, const void *a2, const void *MetadataBufferProvidersAndInstallTriggers)
{
  _BYTE *DerivedStorage;
  _BYTE *v7;
  CFTypeID v9;
  const void *v10;
  __n128 v11;
  CFTypeID v12;
  const void *v13;
  double v14;
  CFTypeID v15;
  const void *v16;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294954516;
  v7 = DerivedStorage;
  if (*DerivedStorage)
    return FigSignalErrorAt();
  if (CFEqual(CFSTR("MetadataSourceBuffersQueues"), a2))
  {
    if (MetadataBufferProvidersAndInstallTriggers)
    {
      v9 = CFGetTypeID(MetadataBufferProvidersAndInstallTriggers);
      if (v9 == CFArrayGetTypeID())
      {
        if (*((_QWORD *)v7 + 14))
        {
          MEMORY[0x19402EA0C]();
          v10 = (const void *)*((_QWORD *)v7 + 10);
          *((_QWORD *)v7 + 10) = MetadataBufferProvidersAndInstallTriggers;
          CFRetain(MetadataBufferProvidersAndInstallTriggers);
          if (v10)
            CFRelease(v10);
          MetadataBufferProvidersAndInstallTriggers = (const void *)collector_createMetadataBufferProvidersAndInstallTriggers(a1);
          if (!(_DWORD)MetadataBufferProvidersAndInstallTriggers)
          {
            collector_tearDownAsyncProcessState(a1);
            v11.n128_f64[0] = collector_setUpAsyncProcessState(a1);
          }
          MEMORY[0x19402EA24](*((_QWORD *)v7 + 14), v11);
          return (uint64_t)MetadataBufferProvidersAndInstallTriggers;
        }
        v16 = (const void *)*((_QWORD *)v7 + 10);
        *((_QWORD *)v7 + 10) = MetadataBufferProvidersAndInstallTriggers;
LABEL_28:
        CFRetain(MetadataBufferProvidersAndInstallTriggers);
        if (v16)
          CFRelease(v16);
        return 0;
      }
      return 0;
    }
  }
  else if (CFEqual(CFSTR("SampleAttachmentCollectionRules"), a2))
  {
    if (MetadataBufferProvidersAndInstallTriggers)
    {
      v12 = CFGetTypeID(MetadataBufferProvidersAndInstallTriggers);
      if (v12 == FigSampleAttachmentCollectionRulesGetTypeID())
      {
        if (*((_QWORD *)v7 + 14))
        {
          MEMORY[0x19402EA0C]();
          v13 = (const void *)*((_QWORD *)v7 + 1);
          *((_QWORD *)v7 + 1) = MetadataBufferProvidersAndInstallTriggers;
          CFRetain(MetadataBufferProvidersAndInstallTriggers);
          if (v13)
            CFRelease(v13);
          collector_tearDownAsyncProcessState(a1);
          v14 = collector_setUpAsyncProcessState(a1);
          MEMORY[0x19402EA24](*((_QWORD *)v7 + 14), v14);
          return 0;
        }
        v16 = (const void *)*((_QWORD *)v7 + 1);
        *((_QWORD *)v7 + 1) = MetadataBufferProvidersAndInstallTriggers;
        goto LABEL_28;
      }
      return 0;
    }
  }
  else
  {
    if (!CFEqual(CFSTR("PropagatePerFrameHDRDisplayMetadata"), a2))
      return FigSignalErrorAt();
    if (MetadataBufferProvidersAndInstallTriggers)
    {
      v15 = CFGetTypeID(MetadataBufferProvidersAndInstallTriggers);
      if (v15 != CFBooleanGetTypeID())
        return 0;
      MetadataBufferProvidersAndInstallTriggers = 0;
      v7[1] = FigCFEqual();
    }
  }
  return (uint64_t)MetadataBufferProvidersAndInstallTriggers;
}

double collector_tearDownAsyncProcessState(const void *a1)
{
  uint64_t DerivedStorage;
  double result;
  uint64_t v4;
  uint64_t v5;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  uint64_t i;
  const void *v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 172))
  {
    v4 = DerivedStorage;
    v5 = CMBaseObjectGetDerivedStorage();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListeners();
    v6 = *(const __CFArray **)(v5 + 88);
    if (v6)
    {
      Count = CFArrayGetCount(v6);
      if (Count >= 1)
      {
        v8 = Count;
        for (i = 0; i != v8; ++i)
        {
          FigCFArrayGetValueAtIndex();
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterRemoveWeakListeners();
        }
      }
    }
    CFGetAllocator(a1);
    collectorSearchWindow_teardown(v4 + 176);
    v10 = *(const void **)(v4 + 224);
    if (v10)
      CFRelease(v10);
    result = 0.0;
    *(_OWORD *)(v4 + 200) = 0u;
    *(_OWORD *)(v4 + 216) = 0u;
    *(_OWORD *)(v4 + 168) = 0u;
    *(_OWORD *)(v4 + 184) = 0u;
  }
  return result;
}

double collector_tearDownSyncProcessState(const void *a1)
{
  uint64_t DerivedStorage;
  double result;
  uint64_t v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = DerivedStorage + 232;
  if (*(_BYTE *)(DerivedStorage + 232))
  {
    v5 = DerivedStorage;
    CFGetAllocator(a1);
    collectorSearchWindow_teardown(v5 + 240);
    CFGetAllocator(a1);
    collectorSearchWindow_teardown(v5 + 288);
    *(_QWORD *)(v4 + 96) = 0;
    result = 0.0;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
  }
  return result;
}

void collectorSearchWindow_teardown(uint64_t a1)
{
  const void *v2;
  const void *v3;

  if (a1)
  {
    v2 = *(const void **)a1;
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)a1 = 0;
    }
    v3 = *(const void **)(a1 + 8);
    if (v3)
      CFRelease(v3);
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t collector_handleVideoBufferQueueConduitNotifications(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage;
  uint64_t result;
  CFTypeID v9;
  const void *Value;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, const void *, _QWORD);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = FigCFEqual();
  if ((_DWORD)result)
  {
    if (a5)
    {
      v9 = CFGetTypeID(a5);
      result = CFDictionaryGetTypeID();
      if (v9 == result)
      {
        Value = (const void *)FigCFDictionaryGetValue();
        MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 112));
        collectorSearchWindow_setInhibitOutputUntil(DerivedStorage + 176, Value);
        result = MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 112));
      }
    }
  }
  else
  {
    result = FigCFEqual();
    if ((_DWORD)result)
    {
      result = FigCFDictionaryGetInt32IfPresent();
      if ((_DWORD)result)
      {
        MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 112));
        *(_DWORD *)(DerivedStorage + 192) = 0;
        MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 112));
        return collector_triggerAsyncProcessing(DerivedStorage);
      }
    }
  }
  v11 = *(_QWORD *)(DerivedStorage + 32);
  if (v11)
  {
    result = CMBaseObjectGetVTable();
    v12 = *(uint64_t (**)(uint64_t, uint64_t, const void *, _QWORD))(*(_QWORD *)(result + 16) + 64);
    if (v12)
      return v12(v11, a3, a5, 0);
  }
  return result;
}

void collectorSearchWindow_setInhibitOutputUntil(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  v2 = *(const void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
}

uint64_t collector_triggerAsyncProcessing(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);

  if (!result)
    return FigSignalErrorAt();
  if (*(_BYTE *)(result + 104))
  {
    v1 = *(_QWORD *)(result + 16);
    if (v1)
    {
      result = CMBaseObjectGetVTable();
      v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 16);
      if (v2)
        return v2(v1);
    }
  }
  return result;
}

uint64_t collector_handleMetadataBufferQueueConduitNotifications(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage;
  const __CFArray *v9;
  CFIndex Count;
  CFIndex v11;
  uint64_t v12;
  uint64_t ValueAtIndex;
  uint64_t v14;
  uint64_t result;
  CFTypeID v16;
  const void *Value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 112))
    MEMORY[0x19402EA0C]();
  v9 = *(const __CFArray **)(DerivedStorage + 88);
  if (v9)
  {
    Count = CFArrayGetCount(v9);
    if (Count >= 1)
    {
      v11 = Count;
      v12 = 0;
      while (FigCFArrayGetValueAtIndex() != a4)
      {
        if (v11 == ++v12)
          goto LABEL_16;
      }
      ValueAtIndex = FigCFArrayGetValueAtIndex();
      if (ValueAtIndex)
      {
        v14 = ValueAtIndex;
        if (*MEMORY[0x1E0CA2768] == a3)
        {
          FigCFArrayRemoveAllValues();
          *(_QWORD *)(v14 + 24) = 0;
          *(_QWORD *)(v14 + 32) = 0;
          *(_BYTE *)(v14 + 40) = 0;
        }
        else if (*MEMORY[0x1E0CA2760] == a3)
        {
          if (a5)
          {
            v16 = CFGetTypeID(a5);
            if (v16 == CFDictionaryGetTypeID())
            {
              Value = (const void *)FigCFDictionaryGetValue();
              collectorSearchWindow_setInhibitOutputUntil(v14, Value);
            }
          }
        }
        else if (FigCFEqual() && FigCFDictionaryGetInt32IfPresent())
        {
          *(_DWORD *)(v14 + 16) = 0;
          collector_triggerAsyncProcessing(DerivedStorage);
        }
      }
      else
      {
        FigSignalErrorAt();
      }
    }
  }
LABEL_16:
  result = *(_QWORD *)(DerivedStorage + 112);
  if (result)
    return MEMORY[0x19402EA24]();
  return result;
}

double collector_setUpAsyncProcessState(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  const __CFArray *v4;
  uint64_t Count;
  const __CFAllocator *v6;
  CFMutableArrayRef v7;
  __CFArray *v8;
  uint64_t v9;
  double result;
  const __CFArray *v11;
  CFIndex v12;
  CFIndex v13;
  uint64_t i;
  _BYTE callBacks[48];
  CFArrayCallBacks v16;
  CFArrayCallBacks v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 172))
    collector_tearDownAsyncProcessState(a1);
  *(_OWORD *)(DerivedStorage + 200) = 0u;
  *(_OWORD *)(DerivedStorage + 216) = 0u;
  *(_OWORD *)(DerivedStorage + 168) = 0u;
  *(_OWORD *)(DerivedStorage + 184) = 0u;
  v3 = CFGetAllocator(a1);
  *(_OWORD *)(DerivedStorage + 176) = 0u;
  *(_OWORD *)(DerivedStorage + 192) = 0u;
  *(_OWORD *)(DerivedStorage + 208) = 0u;
  *(_OWORD *)callBacks = xmmword_1E2FB80D8;
  *(_OWORD *)&callBacks[16] = *(_OWORD *)&off_1E2FB80E8;
  *(_QWORD *)&callBacks[32] = pendingSampleArray_EqualCallBack;
  *(_QWORD *)(DerivedStorage + 176) = CFArrayCreateMutable(v3, 0, (const CFArrayCallBacks *)callBacks);
  v4 = *(const __CFArray **)(DerivedStorage + 80);
  if (v4)
    Count = CFArrayGetCount(v4);
  else
    Count = 0;
  v6 = CFGetAllocator(a1);
  *(_OWORD *)&v16.version = xmmword_1E2FB8100;
  *(_OWORD *)&v16.release = *(_OWORD *)&off_1E2FB8110;
  v16.equal = (CFArrayEqualCallBack)collectorSearchWindowArray_EqualCallBack;
  v7 = CFArrayCreateMutable(v6, Count, &v16);
  if (v7)
  {
    v8 = v7;
    if (Count >= 1)
    {
      do
      {
        memset(callBacks, 0, sizeof(callBacks));
        *(_OWORD *)&v17.version = xmmword_1E2FB80D8;
        *(_OWORD *)&v17.release = *(_OWORD *)&off_1E2FB80E8;
        v17.equal = (CFArrayEqualCallBack)pendingSampleArray_EqualCallBack;
        *(_QWORD *)callBacks = CFArrayCreateMutable(v6, 0, &v17);
        CFArrayAppendValue(v8, callBacks);
        collectorSearchWindow_teardown((uint64_t)callBacks);
        --Count;
      }
      while (Count);
    }
    *(_QWORD *)(DerivedStorage + 224) = v8;
    v9 = CMBaseObjectGetDerivedStorage();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListeners();
    v11 = *(const __CFArray **)(v9 + 88);
    if (v11)
    {
      v12 = CFArrayGetCount(v11);
      if (v12 >= 1)
      {
        v13 = v12;
        for (i = 0; i != v13; ++i)
        {
          FigCFArrayGetValueAtIndex();
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterAddWeakListeners();
        }
      }
    }
    *(_BYTE *)(DerivedStorage + 172) = 1;
  }
  else
  {
    FigSignalErrorAt();
    *(_QWORD *)(DerivedStorage + 224) = 0;
    FigSignalErrorAt();
    if (!*(_BYTE *)(DerivedStorage + 172))
      return collector_tearDownAsyncProcessState(a1);
  }
  return result;
}

_QWORD *pendingSampleArray_RetainCallBack(const __CFAllocator *a1, __int128 *a2)
{
  _OWORD *v3;
  _QWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  const void *v8;

  v3 = CFAllocatorAllocate(a1, 64, 0);
  v4 = v3;
  if (v3)
  {
    v5 = a2[3];
    v7 = *a2;
    v6 = a2[1];
    v3[2] = a2[2];
    v3[3] = v5;
    *v3 = v7;
    v3[1] = v6;
    v8 = *(const void **)v3;
    if (*v4)
      CFRetain(v8);
  }
  else
  {
    FigSignalErrorAt();
  }
  return v4;
}

void pendingSampleArray_ReleaseCallBack(CFAllocatorRef allocator, CFTypeRef *ptr)
{
  if (ptr)
  {
    if (*ptr)
      CFRelease(*ptr);
    CFAllocatorDeallocate(allocator, ptr);
  }
  else
  {
    FigSignalErrorAt();
  }
}

CFStringRef pendingSampleArray_CopyDescriptionCallBack(uint64_t a1)
{
  const __CFString *v2;
  const __CFAllocator *v3;
  Float64 Seconds;
  void *v5;
  CFTypeRef v6;
  CFTypeRef v7;
  Float64 v9;
  CMTime v10;
  CMTime rhs;
  CMTime lhs;
  CMTime v13;
  CMTime time;

  if (!a1)
    return CFSTR("NULL");
  v2 = (const __CFString *)*MEMORY[0x1E0CA26E8];
  CMGetAttachment(*(CMAttachmentBearerRef *)a1, (CFStringRef)*MEMORY[0x1E0CA26E8], 0);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  time = *(CMTime *)(a1 + 8);
  Seconds = CMTimeGetSeconds(&time);
  v5 = *(void **)a1;
  v10 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  if (v5)
  {
    v6 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
    v7 = CMGetAttachment(v5, v2, 0);
    memset(&time, 0, sizeof(time));
    CMSampleBufferGetOutputPresentationTimeStamp(&time, (CMSampleBufferRef)v5);
    memset(&v13, 0, sizeof(v13));
    CMSampleBufferGetOutputDuration(&v13, (CMSampleBufferRef)v5);
    lhs = time;
    rhs = v13;
    if (v7 == v6)
      CMTimeSubtract(&v10, &lhs, &rhs);
    else
      CMTimeAdd(&v10, &lhs, &rhs);
  }
  v9 = CMTimeGetSeconds(&v10);
  return CFStringCreateWithFormat(v3, 0, CFSTR("[%1.3f - %1.3f) "), *(_QWORD *)&Seconds, *(_QWORD *)&v9, v10.value, *(_QWORD *)&v10.timescale, v10.epoch);
}

BOOL pendingSampleArray_EqualCallBack(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  CMTime v7;
  CMTime time1;
  uint64_t v9;
  uint64_t v10;

  if (a1 == a2)
    return 1;
  v9 = v2;
  v10 = v3;
  result = 0;
  if (a1 && a2)
  {
    if (*(_QWORD *)a1 == *(_QWORD *)a2
      && (time1 = *(CMTime *)(a1 + 8), v7 = *(CMTime *)(a2 + 8), !CMTimeCompare(&time1, &v7)))
    {
      time1 = *(CMTime *)(a1 + 32);
      v7 = *(CMTime *)(a2 + 32);
      return CMTimeCompare(&time1, &v7) == 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

_QWORD *collectorSearchWindowArray_RetainCallback(const __CFAllocator *a1, __int128 *a2)
{
  _OWORD *v3;
  _QWORD *v4;
  __int128 v5;
  __int128 v6;
  const void *v7;

  v3 = CFAllocatorAllocate(a1, 48, 0);
  v4 = v3;
  if (v3)
  {
    v5 = a2[2];
    v6 = *a2;
    v3[1] = a2[1];
    v3[2] = v5;
    *v3 = v6;
    v7 = *(const void **)v3;
    if (*v4)
      CFRetain(v7);
  }
  else
  {
    FigSignalErrorAt();
  }
  return v4;
}

void collectorSearchWindowArray_ReleaseCallback(CFAllocatorRef allocator, CFTypeRef *ptr)
{
  if (ptr)
  {
    if (*ptr)
    {
      CFRelease(*ptr);
      *ptr = 0;
    }
    CFAllocatorDeallocate(allocator, ptr);
  }
  else
  {
    FigSignalErrorAt();
  }
}

CFStringRef collectorSearchWindowArray_CopyDescriptionCallback(_QWORD *a1)
{
  if (a1)
    return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<FSAC_BufferQueueCache %p | searchStartIndex: %ld, matchedSampleInfo: %p, sampleInfoArray: %@ >"), a1, a1[3], a1[4], *a1);
  else
    return CFSTR("NULL");
}

BOOL collectorSearchWindowArray_EqualCallBack(_QWORD *a1, _QWORD *a2)
{
  return a1 == a2 || a1 && a2 && *a1 == *a2;
}

uint64_t collector_AddMetadataToCollection(const void *a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const __CFAllocator *v6;
  const __CFAllocator *v7;
  CFArrayCallBacks callBacks;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 232))
  {
    v5 = CMBaseObjectGetDerivedStorage();
    if (*(_BYTE *)(v5 + 232))
      collector_tearDownSyncProcessState(a1);
    *(_QWORD *)(v5 + 328) = 0;
    *(_OWORD *)(v5 + 296) = 0u;
    *(_OWORD *)(v5 + 312) = 0u;
    *(_OWORD *)(v5 + 264) = 0u;
    *(_OWORD *)(v5 + 280) = 0u;
    *(_OWORD *)(v5 + 232) = 0u;
    *(_OWORD *)(v5 + 248) = 0u;
    v6 = CFGetAllocator(a1);
    *(_OWORD *)(v5 + 240) = 0u;
    *(_OWORD *)(v5 + 256) = 0u;
    *(_OWORD *)(v5 + 272) = 0u;
    *(_OWORD *)&callBacks.version = xmmword_1E2FB80D8;
    *(_OWORD *)&callBacks.release = *(_OWORD *)&off_1E2FB80E8;
    callBacks.equal = (CFArrayEqualCallBack)pendingSampleArray_EqualCallBack;
    *(_QWORD *)(v5 + 240) = CFArrayCreateMutable(v6, 0, &callBacks);
    v7 = CFGetAllocator(a1);
    *(_OWORD *)(v5 + 288) = 0u;
    *(_OWORD *)(v5 + 304) = 0u;
    *(_OWORD *)(v5 + 320) = 0u;
    *(_OWORD *)&callBacks.version = xmmword_1E2FB80D8;
    *(_OWORD *)&callBacks.release = *(_OWORD *)&off_1E2FB80E8;
    callBacks.equal = (CFArrayEqualCallBack)pendingSampleArray_EqualCallBack;
    *(_QWORD *)(v5 + 288) = CFArrayCreateMutable(v7, 0, &callBacks);
    *(_BYTE *)(v5 + 232) = 1;
  }
  return collectorPendingSampleArray_appendSampleBuffer(*(void **)(DerivedStorage + 288), a2, 0);
}

uint64_t collector_CollectForVideoSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2, CFTypeRef *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  const __CFArray *v8;
  uint64_t result;
  uint64_t v10;
  const __CFArray *v11;
  uint64_t *v12;
  CMTime v13;
  CMTime v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 8))
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  collectorPendingSampleArray_appendSampleBuffer(*(void **)(DerivedStorage + 240), a2, 1);
  v8 = *(const __CFArray **)(v7 + 240);
  if (!v8 || CFArrayGetCount(v8) != 1)
    return FigSignalErrorAt();
  result = FigCFArrayGetFirstValue();
  if (!result)
    return result;
  v10 = result;
  v11 = *(const __CFArray **)(v7 + 288);
  v14 = *(CMTime *)(v10 + 8);
  v13 = *(CMTime *)(v10 + 32);
  v12 = (uint64_t *)collectorPendingSampleArray_searchForPendingSampleAtPTSWithDuration(v11, &v14, &v13, 0, 1u);
  if (!v12)
    return FigSignalErrorAt();
  *(_BYTE *)(v7 + 328) = 1;
  *(_QWORD *)(v7 + 320) = v12;
  result = collector_updateVideoSampleAttachmentsWithMetadataSample(a1, *(opaqueCMSampleBuffer **)v10, *v12);
  if (!(_DWORD)result)
  {
    *a3 = CFRetain(*(CFTypeRef *)v10);
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v7 + 240), 0);
    return 0;
  }
  return result;
}

uint64_t collector_SynchronousReset()
{
  __CFArray *v0;

  v0 = *(__CFArray **)(CMBaseObjectGetDerivedStorage() + 72);
  if (v0)
    CFArrayRemoveAllValues(v0);
  return 0;
}

opaqueCMSampleBuffer *collectorPendingSampleArray_appendSampleBuffer(void *a1, CMSampleBufferRef sbuf, int a3)
{
  opaqueCMSampleBuffer *v3;
  uint64_t v6;
  const __CFAllocator *v7;
  uint64_t v8;
  CMSampleBufferRef v9;
  CMSampleBufferRef sampleBufferOut;

  sampleBufferOut = 0;
  if (!a1)
    return (opaqueCMSampleBuffer *)FigSignalErrorAt();
  v3 = sbuf;
  if (sbuf)
  {
    if (CMSampleBufferGetNumSamples(sbuf) > 1)
      return (opaqueCMSampleBuffer *)CMSampleBufferCallForEachSample(v3, (OSStatus (__cdecl *)(CMSampleBufferRef, CMItemCount, void *))collectorPendingSampleArray_appendSingleSampleSampleBuffer, a1);
    if (a3)
    {
      v7 = CFGetAllocator(a1);
      v3 = (opaqueCMSampleBuffer *)CMSampleBufferCreateCopy(v7, v3, &sampleBufferOut);
      v9 = sampleBufferOut;
      if (!(_DWORD)v3)
      {
        collectorPendingSampleArray_appendSingleSampleSampleBuffer(sampleBufferOut, v8, (__CFArray *)a1);
        v9 = sampleBufferOut;
      }
      if (v9)
        CFRelease(v9);
    }
    else
    {
      collectorPendingSampleArray_appendSingleSampleSampleBuffer(v3, v6, (__CFArray *)a1);
      return 0;
    }
  }
  return v3;
}

uint64_t collectorPendingSampleArray_appendSingleSampleSampleBuffer(opaqueCMSampleBuffer *a1, uint64_t a2, __CFArray *a3)
{
  CFTypeRef v5;
  const __CFArray *SampleAttachmentsArray;
  int32_t v7;
  const __CFString *v8;
  CMTime v10;
  CMTime time1;
  opaqueCMSampleBuffer *value;
  CMTime v13[2];
  uint64_t v14;

  v14 = 0;
  memset(v13, 0, sizeof(v13));
  value = a1;
  CMSampleBufferGetOutputPresentationTimeStamp(v13, a1);
  CMSampleBufferGetOutputDuration(&time1, a1);
  v13[1] = time1;
  v5 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
  SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a1, 0);
  if (SampleAttachmentsArray)
  {
    CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
    FigCFDictionaryGetValue();
  }
  LOBYTE(v14) = FigCFEqual();
  CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA26E8], 0);
  BYTE1(v14) = FigCFEqual();
  if (!CMSampleBufferGetNumSamples(a1))
  {
    BYTE2(v14) = 1;
    if (!a1)
      goto LABEL_15;
LABEL_8:
    v8 = (const __CFString *)*MEMORY[0x1E0CA2678];
    if (CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA2678], 0) == v5
      && CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA26C0], 0) == v5)
    {
      BYTE4(v14) = 1;
    }
    else if (CMGetAttachment(a1, v8, 0) != v5 || CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA26C0], 0) == v5)
    {
      goto LABEL_15;
    }
    BYTE3(v14) = 1;
    goto LABEL_15;
  }
  time1 = v13[1];
  v10 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v7 = CMTimeCompare(&time1, &v10);
  BYTE2(v14) = v7 == 0;
  if (a1 && !v7)
    goto LABEL_8;
LABEL_15:
  CFArrayAppendValue(a3, &value);
  return 0;
}

char *collectorPendingSampleArray_searchForPendingSampleAtPTSWithDuration(CFArrayRef theArray, CMTime *a2, CMTime *a3, CFIndex a4, unsigned int a5)
{
  const __CFArray *v8;
  CFIndex Count;
  char *ValueAtIndex;
  char *v11;
  const void *v12;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  __int128 *v15;
  _OWORD *v16;
  __int128 v17;
  CMTimeFlags v18;
  CMTimeEpoch v19;
  CMTimeFlags v20;
  CMTimeEpoch v21;
  __int128 v22;
  CMTimeFlags v23;
  CMTimeEpoch v24;
  CMTimeFlags v25;
  CMTimeEpoch v26;
  const __CFArray *v28;
  CMTime v30;
  CMTime v31;
  CMTime time2;
  CMTime v33;
  CMTime rhs;
  CMTime lhs;
  CMTime time1;
  CMTimeValue v37;
  CMTimeScale v38;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v41;

  v8 = theArray;
  v41 = *MEMORY[0x1E0C80C00];
  if (theArray)
    Count = CFArrayGetCount(theArray);
  else
    Count = 0;
  if (Count > a4)
  {
    v28 = v8;
    do
    {
      ValueAtIndex = (char *)CFArrayGetValueAtIndex(v8, a4);
      v11 = ValueAtIndex;
      if (Count < 2 || a4 >= Count - 1)
      {
        v15 = (__int128 *)(ValueAtIndex + 8);
        v16 = ValueAtIndex + 32;
        if (a5 > 1)
        {
          v22 = *v15;
          lhs.epoch = *((_QWORD *)ValueAtIndex + 3);
          *(_OWORD *)&lhs.value = v22;
          *(_OWORD *)&rhs.value = *v16;
          rhs.epoch = *((_QWORD *)ValueAtIndex + 6);
          CMTimeSubtract(&time1, &lhs, &rhs);
          value = time1.value;
          flags = time1.flags;
          timescale = time1.timescale;
          epoch = time1.epoch;
LABEL_22:
          time1 = *a2;
          lhs = *a3;
          CMTimeSubtract(&v30, &time1, &lhs);
          v37 = *((_QWORD *)v11 + 1);
          v23 = *((_DWORD *)v11 + 5);
          v38 = *((_DWORD *)v11 + 4);
          v24 = *((_QWORD *)v11 + 3);
          if ((v23 & 0x1F) != 3 && (v30.flags & 0x1F) != 3)
            goto LABEL_35;
          memset(&time1, 0, sizeof(time1));
          rhs.value = v37;
          rhs.timescale = v38;
          rhs.flags = v23;
          rhs.epoch = v24;
          v33 = v30;
          CMTimeSubtract(&lhs, &rhs, &v33);
          CMTimeAbsoluteValue(&time1, &lhs);
          CMTimeMake(&time2, 1, 1000000000);
          rhs = time1;
          if (CMTimeCompare(&rhs, &time2) > 0)
          {
LABEL_35:
            time1.value = v37;
            time1.timescale = v38;
            time1.flags = v23;
            time1.epoch = v24;
            rhs = v30;
            if (CMTimeCompare(&time1, &rhs) >= 1)
            {
              v37 = a2->value;
              v25 = a2->flags;
              v38 = a2->timescale;
              v26 = a2->epoch;
              if ((flags & 0x1F) != 3 && (v25 & 0x1F) != 3)
                goto LABEL_36;
              memset(&time1, 0, sizeof(time1));
              rhs.value = value;
              rhs.timescale = timescale;
              rhs.flags = flags;
              rhs.epoch = epoch;
              v33.value = a2->value;
              v33.timescale = a2->timescale;
              v33.flags = v25;
              v33.epoch = v26;
              CMTimeSubtract(&lhs, &rhs, &v33);
              CMTimeAbsoluteValue(&time1, &lhs);
              CMTimeMake(&time2, 1, 1000000000);
              rhs = time1;
              if (CMTimeCompare(&rhs, &time2) > 0)
              {
LABEL_36:
                time1.value = value;
                time1.timescale = timescale;
                time1.flags = flags;
                time1.epoch = epoch;
                rhs.value = v37;
                rhs.timescale = v38;
                rhs.flags = v25;
                rhs.epoch = v26;
                if (CMTimeCompare(&time1, &rhs) < 0)
                  return v11;
              }
            }
          }
          goto LABEL_30;
        }
        v17 = *v15;
        lhs.epoch = *((_QWORD *)ValueAtIndex + 3);
        *(_OWORD *)&lhs.value = v17;
        *(_OWORD *)&rhs.value = *v16;
        rhs.epoch = *((_QWORD *)ValueAtIndex + 6);
        CMTimeAdd(&time1, &lhs, &rhs);
        value = time1.value;
        flags = time1.flags;
        timescale = time1.timescale;
        epoch = time1.epoch;
      }
      else
      {
        v12 = CFArrayGetValueAtIndex(v8, a4 + 1);
        value = *((_QWORD *)v12 + 1);
        flags = *((_DWORD *)v12 + 5);
        timescale = *((_DWORD *)v12 + 4);
        epoch = *((_QWORD *)v12 + 3);
        if (a5 > 1)
          goto LABEL_22;
      }
      time1 = *a2;
      lhs = *a3;
      CMTimeAdd(&v31, &time1, &lhs);
      v37 = *((_QWORD *)v11 + 1);
      v18 = *((_DWORD *)v11 + 5);
      v38 = *((_DWORD *)v11 + 4);
      v19 = *((_QWORD *)v11 + 3);
      if ((v18 & 0x1F) != 3 && (v31.flags & 0x1F) != 3)
        goto LABEL_37;
      memset(&time1, 0, sizeof(time1));
      rhs.value = v37;
      rhs.timescale = v38;
      rhs.flags = v18;
      rhs.epoch = v19;
      v33 = v31;
      CMTimeSubtract(&lhs, &rhs, &v33);
      CMTimeAbsoluteValue(&time1, &lhs);
      CMTimeMake(&time2, 1, 1000000000);
      rhs = time1;
      if (CMTimeCompare(&rhs, &time2) > 0)
      {
LABEL_37:
        time1.value = v37;
        time1.timescale = v38;
        time1.flags = v18;
        time1.epoch = v19;
        rhs = v31;
        if (CMTimeCompare(&time1, &rhs) < 0)
        {
          v37 = a2->value;
          v20 = a2->flags;
          v38 = a2->timescale;
          v21 = a2->epoch;
          if ((flags & 0x1F) != 3 && (v20 & 0x1F) != 3)
            goto LABEL_38;
          memset(&time1, 0, sizeof(time1));
          rhs.value = value;
          rhs.timescale = timescale;
          rhs.flags = flags;
          rhs.epoch = epoch;
          v33.value = a2->value;
          v33.timescale = a2->timescale;
          v33.flags = v20;
          v33.epoch = v21;
          CMTimeSubtract(&lhs, &rhs, &v33);
          CMTimeAbsoluteValue(&time1, &lhs);
          CMTimeMake(&time2, 1, 1000000000);
          rhs = time1;
          if (CMTimeCompare(&rhs, &time2) > 0)
          {
LABEL_38:
            time1.value = value;
            time1.timescale = timescale;
            time1.flags = flags;
            time1.epoch = epoch;
            rhs.value = v37;
            rhs.timescale = v38;
            rhs.flags = v20;
            rhs.epoch = v21;
            if (CMTimeCompare(&time1, &rhs) > 0)
              return v11;
          }
        }
      }
LABEL_30:
      ++a4;
      v8 = v28;
    }
    while (Count != a4);
  }
  return 0;
}

uint64_t collector_updateVideoSampleAttachmentsWithMetadataSample(uint64_t a1, opaqueCMSampleBuffer *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  uint64_t v8;
  CFTypeRef v9;
  CFTypeRef cf;

  cf = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMSampleBufferGetSampleAttachmentsArray(a2, 1u);
  FigCFArrayGetValueAtIndex();
  v6 = *(_QWORD *)(DerivedStorage + 8);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v7)
    return 4294954514;
  v8 = v7(v6, a3, 0, &cf);
  v9 = cf;
  if (!(_DWORD)v8)
  {
    FigCFDictionarySetAllValuesFromDictionary();
    if (!cf)
      return 0;
    FigCFDictionaryApplyBlock();
    v9 = cf;
  }
  if (v9)
    CFRelease(v9);
  return v8;
}

void __collector_updateVideoSampleAttachmentsWithMetadataSample_block_invoke(uint64_t a1, const __CFString *a2, const void *a3)
{
  CMSetAttachment(*(CMAttachmentBearerRef *)(a1 + 32), a2, a3, 1u);
}

uint64_t collector_Go(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  void (*v7)(uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v4 = DerivedStorage;
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 112));
  if (!*(_BYTE *)(v4 + 172))
    v5.n128_f64[0] = collector_setUpAsyncProcessState(a1);
  MEMORY[0x19402EA24](*(_QWORD *)(v4 + 112), v5);
  *(_BYTE *)(v4 + 104) = 1;
  FigMemoryBarrier();
  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v7)
    v7(v6);
  return 0;
}

uint64_t collector_Stop()
{
  _BYTE *DerivedStorage;
  _BYTE *v2;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
    return FigSignalErrorAt();
  v2 = DerivedStorage;
  DerivedStorage[104] = 0;
  FigMemoryBarrier();
  if (*((_QWORD *)v2 + 14))
  {
    MEMORY[0x19402EA0C]();
    MEMORY[0x19402EA24](*((_QWORD *)v2 + 14));
  }
  return 0;
}

uint64_t collector_Reset(const void *a1, int a2)
{
  uint64_t DerivedStorage;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 112));
  v5 = *(_BYTE *)(DerivedStorage + 104);
  *(_BYTE *)(DerivedStorage + 104) = 0;
  FigMemoryBarrier();
  collector_tearDownAsyncProcessState(a1);
  v6 = CMBufferQueueReset(*(CMBufferQueueRef *)(DerivedStorage + 48));
  if ((_DWORD)v6)
    goto LABEL_9;
  if (a2)
  {
    v7 = *(_QWORD *)(DerivedStorage + 32);
    if (v7)
    {
      v8 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
      if (!v8)
      {
        v9 = 4294954514;
        goto LABEL_7;
      }
      v6 = v8(v7);
      if ((_DWORD)v6)
      {
LABEL_9:
        v9 = v6;
        goto LABEL_7;
      }
    }
  }
  collector_setUpAsyncProcessState(a1);
  *(_BYTE *)(DerivedStorage + 104) = v5;
  FigMemoryBarrier();
  v9 = 0;
LABEL_7:
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 112));
  return v9;
}

uint64_t collector_SetDirection(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  int v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 112));
  if (a2 < 1)
  {
    if ((a2 & 0x80000000) == 0)
    {
      *(_DWORD *)(DerivedStorage + 340) = 0;
      goto LABEL_6;
    }
    v4 = -1;
  }
  else
  {
    v4 = 1;
  }
  *(_DWORD *)(DerivedStorage + 340) = v4;
LABEL_6:
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 112));
  return 0;
}

uint64_t collector_IsAtEndOfOutputData()
{
  return 0;
}

uint64_t FigCPEExternalProtectionMonitorRegisterClass()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigCPEExternalProtectionMonitorID = result;
  return result;
}

uint64_t FigCPEExternalProtectionMonitorCopyProperty(uint64_t a1, CFTypeRef cf1, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  NSObject *v7;
  _QWORD v8[6];

  result = 4294955146;
  if (cf1 && a4)
  {
    if (CFEqual(cf1, CFSTR("DisplayList")))
    {
      v7 = *(NSObject **)(a1 + 136);
      v8[0] = MEMORY[0x1E0C809B0];
      v8[1] = 3221225472;
      v8[2] = __FigCPEExternalProtectionMonitorCopyProperty_block_invoke;
      v8[3] = &__block_descriptor_48_e5_v8__0l;
      v8[4] = a4;
      v8[5] = a1;
      dispatch_sync(v7, v8);
      return 0;
    }
    else
    {
      return 4294955144;
    }
  }
  return result;
}

uint64_t FigCPEExternalProtectionMonitorSetProperty(_QWORD *a1, CFTypeRef cf1, CFArrayRef Copy)
{
  CFTypeID v5;
  NSObject *v6;
  _QWORD v8[6];

  if (!cf1)
    return 4294955146;
  if (!CFEqual(cf1, CFSTR("DisplayList")))
    return 4294955144;
  if (!Copy)
  {
LABEL_6:
    CFRetain(a1);
    v6 = a1[17];
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __FigCPEExternalProtectionMonitorSetProperty_block_invoke;
    v8[3] = &__block_descriptor_48_e5_v8__0l;
    v8[4] = a1;
    v8[5] = Copy;
    dispatch_async(v6, v8);
    return 0;
  }
  v5 = CFGetTypeID(Copy);
  if (v5 != CFArrayGetTypeID())
    return 4294955136;
  Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Copy);
  if (Copy)
    goto LABEL_6;
  return 4294955145;
}

void UpdateNonExclusiveDisplayList(uint64_t a1)
{
  const void *v2;
  void *MutableCopy;

  v2 = *(const void **)(a1 + 48);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 48) = 0;
  }
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 56));
  MutableCopy = (void *)FigCFArrayCreateMutableCopy();
  *(_QWORD *)(a1 + 48) = MutableCopy;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 24), (CFSetApplierFunction)RemoveExclusiveDisplays, MutableCopy);
}

void FigCPEExternalProtectionMonitorBeginMonitoring(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  v1 = *(NSObject **)(a1 + 136);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __FigCPEExternalProtectionMonitorBeginMonitoring_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a1;
  dispatch_async(v1, block);
}

uint64_t BeginMonitoringSetApplier(uint64_t result)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(result + 64);
  if (v1)
    return v1(*(_QWORD *)(result + 32));
  return result;
}

void FigCPEExternalProtectionMonitorEndMonitoring(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  v1 = *(NSObject **)(a1 + 136);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __FigCPEExternalProtectionMonitorEndMonitoring_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a1;
  dispatch_async(v1, block);
}

uint64_t EndMonitoringSetApplier(uint64_t result)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(result + 72);
  if (v1)
    return v1(*(_QWORD *)(result + 32));
  return result;
}

uint64_t FigCPEExternalProtectionMonitorGetMethods(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v1 = *(NSObject **)(a1 + 136);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __FigCPEExternalProtectionMonitorGetMethods_block_invoke;
  v4[3] = &unk_1E2F87F08;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync(v1, v4);
  v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t GetMethodsSetApplier(uint64_t result, _DWORD *a2)
{
  uint64_t (*v2)(_QWORD);

  v2 = *(uint64_t (**)(_QWORD))(result + 80);
  if (v2)
  {
    result = v2(*(_QWORD *)(result + 32));
    *a2 |= result;
  }
  return result;
}

uint64_t FigCPEExternalProtectionMonitorGetStatus(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  _QWORD block[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2810000000;
  v8 = &unk_19339E166;
  v9 = 0x100000001;
  v1 = *(NSObject **)(a1 + 136);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __FigCPEExternalProtectionMonitorGetStatus_block_invoke;
  block[3] = &unk_1E2F87F08;
  block[4] = &v5;
  block[5] = a1;
  dispatch_sync(v1, block);
  v2 = *((unsigned int *)v6 + 8);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void GetStatusSetApplier(_QWORD *key, int *a2)
{
  const __CFArray *Value;
  const __CFArray *MutableCopy;
  int v6;
  uint64_t (*v7)(_QWORD);
  const __CFArray *v8;
  const __CFArray *v9;
  CFTypeID v10;
  int v11;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  char v17;
  _QWORD context[2];
  char v19;
  CFRange v20;

  v19 = 0;
  if (!key[16])
  {
    v6 = 1;
    goto LABEL_26;
  }
  Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(key[18] + 56), key);
  if (Value)
  {
    MutableCopy = Value;
    CFRetain(Value);
    goto LABEL_22;
  }
  MutableCopy = (const __CFArray *)FigCFArrayCreateMutableCopy();
  v7 = (uint64_t (*)(_QWORD))key[11];
  if (v7 && *(_QWORD *)(key[18] + 40))
  {
    v8 = (const __CFArray *)v7(key[4]);
    context[0] = *(_QWORD *)(key[18] + 40);
    context[1] = MutableCopy;
    v20.length = CFArrayGetCount(v8);
    v20.location = 0;
    CFArrayApplyFunction(v8, v20, (CFArrayApplierFunction)AddExclusiveDisplay, context);
  }
  if (MutableCopy && CFArrayGetCount(MutableCopy))
    goto LABEL_56;
  v9 = *(const __CFArray **)(key[18] + 40);
  if (v9 && CFArrayGetCount(v9) >= 1)
  {
    if (!MutableCopy)
      goto LABEL_18;
    goto LABEL_17;
  }
  if (MutableCopy)
  {
LABEL_56:
    if (!CFArrayGetCount(MutableCopy) && !*((_BYTE *)a2 + 5))
    {
LABEL_17:
      CFRelease(MutableCopy);
LABEL_18:
      MutableCopy = (const __CFArray *)*MEMORY[0x1E0C9B0D0];
    }
  }
  else
  {
    if (!*((_BYTE *)a2 + 5))
      goto LABEL_18;
    MutableCopy = 0;
  }
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(key[18] + 56), key, MutableCopy);
  if (!MutableCopy)
  {
    v6 = ((uint64_t (*)(_QWORD, _QWORD, char *))key[16])(key[4], 0, &v19);
    goto LABEL_26;
  }
LABEL_22:
  v10 = CFGetTypeID(MutableCopy);
  if (v10 == CFNullGetTypeID())
  {
    v19 = 0;
    v6 = 1;
  }
  else
  {
    v6 = ((uint64_t (*)(_QWORD, const __CFArray *, char *))key[16])(key[4], MutableCopy, &v19);
  }
  CFRelease(MutableCopy);
LABEL_26:
  v11 = *a2;
  if (*a2 == 4 || v6 == 4)
    v13 = 4;
  else
    v13 = 1;
  if (!v11)
    v13 = 0;
  if (!v6)
    v13 = 0;
  if (v11 == 2)
    v13 = 2;
  if (v6 == 2)
    v14 = 2;
  else
    v14 = v13;
  if (v11 == 3)
    v15 = 3;
  else
    v15 = v14;
  if (v6 == 3)
    v15 = 3;
  *a2 = v15;
  if (*((_BYTE *)a2 + 4))
    v16 = v19 == 0;
  else
    v16 = 1;
  v17 = !v16;
  *((_BYTE *)a2 + 4) = v17;
}

uint64_t FigCPEExternalProtectionMonitorGetStatusIgnoringDisplays(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  _QWORD block[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2810000000;
  v8 = &unk_19339E166;
  v9 = 0x10100000001;
  v1 = *(NSObject **)(a1 + 136);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __FigCPEExternalProtectionMonitorGetStatusIgnoringDisplays_block_invoke;
  block[3] = &unk_1E2F87F08;
  block[4] = &v5;
  block[5] = a1;
  dispatch_sync(v1, block);
  v2 = *((unsigned int *)v6 + 8);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t FigCPEExternalProtectionMonitorStableStatusDetermined(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  _QWORD block[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2810000000;
  v8 = &unk_19339E166;
  v9 = 0x100000001;
  v1 = *(NSObject **)(a1 + 136);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __FigCPEExternalProtectionMonitorStableStatusDetermined_block_invoke;
  block[3] = &unk_1E2F87F08;
  block[4] = &v5;
  block[5] = a1;
  dispatch_sync(v1, block);
  v2 = *((unsigned __int8 *)v6 + 36);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t FigCPEExternalProtectionMonitorStableStatusDeterminedIgnoringDisplays(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  _QWORD block[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2810000000;
  v8 = &unk_19339E166;
  v9 = 0x10100000001;
  v1 = *(NSObject **)(a1 + 136);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __FigCPEExternalProtectionMonitorStableStatusDeterminedIgnoringDisplays_block_invoke;
  block[3] = &unk_1E2F87F08;
  block[4] = &v5;
  block[5] = a1;
  dispatch_sync(v1, block);
  v2 = *((unsigned __int8 *)v6 + 36);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t FigCPEExternalProtectionMonitorGetState(uint64_t a1, int a2)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD block[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  int v10;
  int v11;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2810000000;
  v9 = &unk_19339E166;
  v10 = -1;
  v11 = a2;
  v2 = *(NSObject **)(a1 + 136);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __FigCPEExternalProtectionMonitorGetState_block_invoke;
  block[3] = &unk_1E2F87F08;
  block[4] = &v6;
  block[5] = a1;
  dispatch_sync(v2, block);
  v3 = *((unsigned int *)v7 + 8);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t GetStateSetApplier(uint64_t result, int *a2)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD, _QWORD);
  int v5;
  int v6;
  int v7;

  v3 = result;
  v4 = *(uint64_t (**)(_QWORD, _QWORD))(result + 104);
  if (v4)
  {
    result = v4(*(_QWORD *)(result + 32), a2[1]);
    v5 = result;
  }
  else
  {
    v5 = -1;
  }
  if (a2[1] == 7)
  {
    v6 = 2;
    if (v5 != 2)
    {
      v7 = *a2;
      if (*a2 != 2)
      {
        if (v7 == 1 || v5 == 1)
          v6 = 1;
        else
          v6 = -1;
        if (!v7)
          v6 = 0;
        if (!v5)
          v6 = 0;
      }
    }
  }
  else
  {
    result = (*(uint64_t (**)(_QWORD))(v3 + 80))(*(_QWORD *)(v3 + 32));
    v6 = v5;
    if ((_DWORD)result != a2[1])
      return result;
  }
  *a2 = v6;
  return result;
}

uint64_t FigCPEExternalProtectionMonitorGetSerializationToken(uint64_t a1, uint64_t *a2)
{
  uint64_t (*v2)(_QWORD);
  uint64_t v4;
  uint64_t result;

  if (!a2)
    return 4294955146;
  v2 = *(uint64_t (**)(_QWORD))(a1 + 112);
  if (!v2)
    return 4294954514;
  v4 = v2(*(_QWORD *)(a1 + 32));
  result = 0;
  *a2 = v4;
  return result;
}

const char *AntiScreenCaptureGetIdentifier()
{
  return "AntiScreenCapture";
}

uint64_t HDCPAddWeakListener(uint64_t result)
{
  if (result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterAddWeakListener();
  }
  return result;
}

uint64_t HDCPRemoveWeakListener(uint64_t result)
{
  if (result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterRemoveWeakListener();
  }
  return result;
}

uint64_t HDCPBeginMonitoring(uint64_t result)
{
  if (result)
    return FigUpstreamMonitor_BeginMonitoring(result);
  return result;
}

uint64_t HDCPEndMonitoring(uint64_t result)
{
  if (result)
    return FigUpstreamMonitor_EndMonitoring(result);
  return result;
}

uint64_t AntiScreenCaptureGetMethods()
{
  return 4;
}

uint64_t AntiScreenCaptureGetStatus(_QWORD *a1, CFArrayRef theArray, _BYTE *a3)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;
  CFRange v20;

  v19 = *MEMORY[0x1E0C80C00];
  if (AntiScreenCaptureGetStatus_once == -1)
  {
    if (!theArray)
      return HDCPGetStatus(a1, AntiScreenCaptureGetStatus_wirelessDisplayList, a3);
  }
  else
  {
    dispatch_once(&AntiScreenCaptureGetStatus_once, &__block_literal_global_121);
    if (!theArray)
      return HDCPGetStatus(a1, AntiScreenCaptureGetStatus_wirelessDisplayList, a3);
  }
  v20.length = CFArrayGetCount(theArray);
  v20.location = 0;
  if (CFArrayContainsValue(theArray, v20, (const void *)AntiScreenCaptureGetStatus_wirelessDisplayName))
    return HDCPGetStatus(a1, AntiScreenCaptureGetStatus_wirelessDisplayList, a3);
  v7 = 1;
  *a3 = 1;
  if (VTParavirtualizationIsRunningInGuest())
  {
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v8 = (void *)objc_msgSend(MEMORY[0x1E0CD2728], "displays");
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v15;
      while (2)
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v15 != v11)
            objc_enumerationMutation(v8);
          v13 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * i);
          if (objc_msgSend((id)objc_msgSend(v13, "availableModes"), "count"))
          {
            objc_msgSend(v13, "deviceName");
            if (!IOMobileFramebufferOpenByName()
              && !IOMobileFramebufferGetProtectionOptions())
            {
              return 3;
            }
          }
        }
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
        if (v10)
          continue;
        break;
      }
      return 1;
    }
  }
  return v7;
}

uint64_t AntiScreenCaptureGetState()
{
  return 2;
}

void HDCPDisposeRefcon(uint64_t a1)
{
  if (a1)
    FigUpstreamMonitor_ReleaseSharedMonitor(a1);
}

uint64_t FigCPEExternalProtectionMonitorCreateForMethods(const __CFAllocator *a1, unsigned int a2, const __CFDictionary *a3, CFTypeRef cf, _QWORD *a5)
{
  _QWORD *v9;
  char v10;
  _QWORD *v11;
  CFTypeRef v12;
  __int128 *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t (*v27)(_QWORD *, CFArrayRef, _BYTE *);
  CFTypeRef cfa;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _QWORD *v35;

  if (cf)
  {
    v9 = CFRetain(cf);
    if (a3)
    {
LABEL_3:
      v10 = CFDictionaryGetValue(a3, CFSTR("InformationalMode")) != (const void *)*MEMORY[0x1E0C9AE50];
      goto LABEL_6;
    }
  }
  else
  {
    v9 = 0;
    if (a3)
      goto LABEL_3;
  }
  v10 = 1;
LABEL_6:
  if (a2 > 7)
  {
    v16 = 4294955136;
    if (!v9)
      return v16;
    goto LABEL_28;
  }
  if (!a2)
  {
    cfa = 0;
    v13 = (__int128 *)&sAggregateOnlyCallbacks;
LABEL_25:
    v19 = FigCPEExternalProtectionMonitorCreateWithCallbacks(a1, v13, v9, (uint64_t *)&cfa);
    if (!(_DWORD)v19)
    {
      v12 = cfa;
      if (cfa)
        CFRetain(cfa);
      if (v9)
        CFRelease(v9);
      if (cfa)
        CFRelease(cfa);
      goto LABEL_35;
    }
    v16 = v19;
    goto LABEL_27;
  }
  if ((a2 & 1) == 0)
  {
    v11 = v9;
LABEL_10:
    if ((a2 & 2) != 0)
    {
      v35 = 0;
      v31 = xmmword_1E2FB82F8;
      v32 = unk_1E2FB8308;
      v33 = xmmword_1E2FB8318;
      v34 = *(_OWORD *)off_1E2FB8328;
      v29 = xmmword_1E2FB82D8;
      v30 = *(_OWORD *)&off_1E2FB82E8;
      v17 = (const void *)FigUpstreamMonitor_CreateOrRetainSharedMonitor(v10);
      cfa = v17;
      v18 = FigCPEExternalProtectionMonitorCreateWithCallbacks(a1, (__int128 *)&cfa, v11, (uint64_t *)&v35);
      if ((_DWORD)v18)
      {
        v16 = v18;
        if (v17)
          FigUpstreamMonitor_ReleaseSharedMonitor((uint64_t)v17);
        v9 = v11;
        if (v11)
          goto LABEL_28;
        return v16;
      }
      v9 = v35;
      if (v35)
        CFRetain(v35);
      if (v11)
        CFRelease(v11);
      if (v35)
        CFRelease(v35);
    }
    else
    {
      v9 = v11;
    }
    if ((a2 & 4) == 0)
    {
      v12 = v9;
LABEL_35:
      v16 = 0;
      *a5 = v12;
      return v16;
    }
    cfa = 0;
    v25 = xmmword_1E2FB81D8;
    v26 = unk_1E2FB81E8;
    v27 = AntiScreenCaptureGetStatus;
    v21[1] = *((_QWORD *)&FigCPEAntiScreenCaptureCreateCallbacks_callbacks + 1);
    v22 = *(_OWORD *)&off_1E2FB81A8;
    v23 = xmmword_1E2FB81B8;
    v24 = *(_OWORD *)&off_1E2FB81C8;
    v21[0] = FigUpstreamMonitor_CreateOrRetainSharedMonitor(v10);
    v13 = (__int128 *)v21;
    goto LABEL_25;
  }
  v35 = 0;
  v31 = xmmword_1E2FB8290;
  v32 = unk_1E2FB82A0;
  v33 = xmmword_1E2FB82B0;
  v34 = *(_OWORD *)off_1E2FB82C0;
  v29 = xmmword_1E2FB8270;
  v30 = *(_OWORD *)&off_1E2FB8280;
  v14 = (const void *)FigUpstreamMonitor_CreateOrRetainSharedMonitor(v10);
  cfa = v14;
  v15 = FigCPEExternalProtectionMonitorCreateWithCallbacks(a1, (__int128 *)&cfa, v9, (uint64_t *)&v35);
  if (!(_DWORD)v15)
  {
    v11 = v35;
    if (v35)
      CFRetain(v35);
    if (v9)
      CFRelease(v9);
    if (v35)
      CFRelease(v35);
    goto LABEL_10;
  }
  v16 = v15;
  if (v14)
  {
    FigUpstreamMonitor_ReleaseSharedMonitor((uint64_t)v14);
    if (!v9)
      return v16;
    goto LABEL_28;
  }
LABEL_27:
  if (v9)
LABEL_28:
    CFRelease(v9);
  return v16;
}

uint64_t FigCPEExternalProtectionMonitorCreateWithCallbacks(const __CFAllocator *a1, __int128 *a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t DefaultLocalCenter;
  uint64_t v9;
  uint64_t Instance;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  NSObject *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  dispatch_queue_t v24;
  _DWORD *v25;
  CFMutableSetRef Mutable;
  CFMutableDictionaryRef v27;
  NSObject *v28;
  uint64_t v29;
  _QWORD block[5];

  DefaultLocalCenter = CMNotificationCenterGetDefaultLocalCenter();
  if (!a4)
    return 4294955146;
  v9 = DefaultLocalCenter;
  if (FigCPEExternalProtectionMonitorGetTypeID_sRegisterFigCPEExternalProtectionMonitorTypeOnce != -1)
    dispatch_once_f(&FigCPEExternalProtectionMonitorGetTypeID_sRegisterFigCPEExternalProtectionMonitorTypeOnce, 0, (dispatch_function_t)FigCPEExternalProtectionMonitorRegisterClass);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return 4294955145;
  v11 = Instance;
  v12 = CMNotificationCenterRegisterForBarrierSupport();
  if ((_DWORD)v12)
    goto LABEL_19;
  *(_QWORD *)(v11 + 16) = v9;
  if (!a3)
  {
    *(_QWORD *)(v11 + 24) = 0;
    v19 = *a2;
    v20 = a2[2];
    *(_OWORD *)(v11 + 48) = a2[1];
    *(_OWORD *)(v11 + 64) = v20;
    *(_OWORD *)(v11 + 32) = v19;
    v21 = a2[3];
    v22 = a2[4];
    v23 = a2[5];
    *(_QWORD *)(v11 + 128) = *((_QWORD *)a2 + 12);
    *(_OWORD *)(v11 + 96) = v22;
    *(_OWORD *)(v11 + 112) = v23;
    *(_OWORD *)(v11 + 80) = v21;
    v24 = dispatch_queue_create("com.apple.figcpeepm.pool", 0);
    *(_QWORD *)(v11 + 136) = v24;
    if (!v24)
      goto LABEL_18;
    if (FigCPEExternalProtectionMonitorPoolDataGetTypeID_sRegisterFigCPEExternalProtectionMonitorPoolDataTypeOnce != -1)
      dispatch_once_f(&FigCPEExternalProtectionMonitorPoolDataGetTypeID_sRegisterFigCPEExternalProtectionMonitorPoolDataTypeOnce, 0, (dispatch_function_t)FigCPEExternalProtectionMonitorPoolDataRegisterClass);
    v25 = (_DWORD *)_CFRuntimeCreateInstance();
    *(_QWORD *)(v11 + 144) = v25;
    if (!v25
      || (v25[8] = 0,
          dispatch_set_context(*(dispatch_object_t *)(v11 + 136), v25),
          dispatch_set_finalizer_f(*(dispatch_object_t *)(v11 + 136), (dispatch_function_t)finalizePoolQueue),
          Mutable = CFSetCreateMutable(a1, 0, 0),
          (*(_QWORD *)(*(_QWORD *)(v11 + 144) + 24) = Mutable) == 0)
      || (v27 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B3A0]),
          (*(_QWORD *)(*(_QWORD *)(v11 + 144) + 56) = v27) == 0))
    {
LABEL_18:
      v29 = 4294955145;
LABEL_20:
      CFRelease((CFTypeRef)v11);
      return v29;
    }
    v12 = CMNotificationCenterRegisterForBarrierSupport();
    if (!(_DWORD)v12)
    {
      *(_QWORD *)(*(_QWORD *)(v11 + 144) + 16) = v9;
      goto LABEL_16;
    }
LABEL_19:
    v29 = v12;
    goto LABEL_20;
  }
  *(_QWORD *)(v11 + 24) = CFRetain(a3);
  v14 = a2[1];
  v13 = a2[2];
  *(_OWORD *)(v11 + 32) = *a2;
  *(_OWORD *)(v11 + 48) = v14;
  *(_OWORD *)(v11 + 64) = v13;
  v16 = a2[4];
  v15 = a2[5];
  v17 = a2[3];
  *(_QWORD *)(v11 + 128) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(v11 + 96) = v16;
  *(_OWORD *)(v11 + 112) = v15;
  *(_OWORD *)(v11 + 80) = v17;
  v18 = a3[17];
  *(_QWORD *)(v11 + 136) = v18;
  dispatch_retain(v18);
  *(_QWORD *)(v11 + 144) = a3[18];
LABEL_16:
  v28 = *(NSObject **)(v11 + 136);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __FigCPEExternalProtectionMonitorCreateWithCallbacks_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = v11;
  dispatch_sync(v28, block);
  v29 = 0;
  *a4 = v11;
  return v29;
}

const char *HDCPGetIdentifier()
{
  return "HDCP";
}

uint64_t HDCPGetMethods()
{
  return 1;
}

uint64_t HDCPGetStatus(_QWORD *a1, uint64_t a2, _BYTE *a3)
{
  int v4;
  int v5;

  v5 = 0;
  v4 = 0;
  if (a1)
  {
    FigUpstreamMonitor_GetStatus(a1, a2, &v5, &v4, a3);
    if ((v5 - 1) >= 4)
      return 0;
    else
      return (5 - v5);
  }
  else
  {
    *a3 = 0;
    return 1;
  }
}

uint64_t HDCPGetState(uint64_t a1, char a2)
{
  if (!a1)
    return 0xFFFFFFFFLL;
  if ((a2 & 1) != 0)
    return FigUpstreamMonitor_GetExternalProtectionState(a1, a2);
  return 0;
}

uint64_t HDCPGetAliasedStatus(_QWORD *a1, uint64_t a2, _BYTE *a3)
{
  int v4;
  int v5;

  v5 = 0;
  v4 = 0;
  if (a1)
  {
    FigUpstreamMonitor_GetStatus(a1, a2, &v5, &v4, a3);
    if ((v5 - 1) > 3)
      return 0;
    else
      return dword_193301700[v5 - 1];
  }
  else
  {
    *a3 = 0;
    return 4;
  }
}

const char *HDCPType1GetIdentifier()
{
  return "HDCPType1";
}

uint64_t HDCPType1AddWeakListener(uint64_t result)
{
  if (result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterAddWeakListener();
  }
  return result;
}

uint64_t HDCPType1RemoveWeakListener(uint64_t result)
{
  if (result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterRemoveWeakListener();
  }
  return result;
}

uint64_t HDCPType1BeginMonitoring(uint64_t result)
{
  if (result)
    return FigUpstreamMonitor_BeginMonitoring(result);
  return result;
}

uint64_t HDCPType1EndMonitoring(uint64_t result)
{
  if (result)
    return FigUpstreamMonitor_EndMonitoring(result);
  return result;
}

uint64_t HDCPType1GetMethods()
{
  return 2;
}

uint64_t HDCPType1GetStatus(_QWORD *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t result;
  int v4;
  int v5;

  v5 = 0;
  v4 = 0;
  if (a1)
  {
    FigUpstreamMonitor_GetStatus(a1, a2, &v5, &v4, a3);
    result = 3;
    switch(v5)
    {
      case 1:
        if (v4 == 2)
          result = 4;
        else
          result = 2;
        break;
      case 2:
        return result;
      case 3:
        result = 2;
        break;
      case 4:
        return 1;
      default:
        result = 0;
        break;
    }
  }
  else
  {
    *a3 = 0;
    return 1;
  }
  return result;
}

uint64_t HDCPType1GetState(uint64_t a1, char a2)
{
  if (!a1)
    return 0xFFFFFFFFLL;
  if ((a2 & 2) != 0)
    return FigUpstreamMonitor_GetExternalProtectionState(a1, a2);
  return 0;
}

void HDCPType1DisposeRefcon(uint64_t a1)
{
  if (a1)
    FigUpstreamMonitor_ReleaseSharedMonitor(a1);
}

uint64_t HDCPType1GetAliasedStatus(_QWORD *a1, uint64_t a2, _BYTE *a3)
{
  int v5;
  int v6;

  v6 = 0;
  v5 = 0;
  if (a1)
  {
    FigUpstreamMonitor_GetStatus(a1, a2, &v6, &v5, a3);
    if ((v6 - 2) < 2)
      return 3;
    if (v6 != 4 && v6 != 1)
      return 0;
  }
  else
  {
    *a3 = 0;
  }
  if (v5 == 2)
    return 4;
  else
    return 3;
}

void finalizePoolQueue(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

void FigCPEExternalProtectionMonitorNotificationCallback(int a1, int a2, CFStringRef theString2)
{
  const __CFDictionary *MutableCopy;

  if (CFStringCompare((CFStringRef)*MEMORY[0x1E0CA3250], theString2, 0))
  {
    CMNotificationCenterPostNotification();
  }
  else
  {
    MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
    if (!CFDictionaryContainsKey(MutableCopy, (const void *)*MEMORY[0x1E0CA3258]))
      FigCFDictionarySetInt32();
    CMNotificationCenterPostNotification();
    if (MutableCopy)
      CFRelease(MutableCopy);
  }
}

double FigCPEExternalProtectionMonitorInit(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 144) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void FigCPEExternalProtectionMonitorFinalize(uint64_t a1)
{
  NSObject *v2;
  void (*v3)(_QWORD);
  void (*v4)(_QWORD);
  const void *v5;
  _QWORD v6[6];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 0;
  v2 = *(NSObject **)(a1 + 136);
  if (v2)
  {
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __FigCPEExternalProtectionMonitorFinalize_block_invoke;
    v6[3] = &unk_1E2F87F08;
    v6[4] = &v7;
    v6[5] = a1;
    dispatch_sync(v2, v6);
    dispatch_release(*(dispatch_object_t *)(a1 + 136));
    *(_QWORD *)(a1 + 136) = 0;
    if (*((_BYTE *)v8 + 24))
    {
      v3 = *(void (**)(_QWORD))(a1 + 72);
      if (v3)
        v3(*(_QWORD *)(a1 + 32));
    }
  }
  v4 = *(void (**)(_QWORD))(a1 + 120);
  if (v4)
    v4(*(_QWORD *)(a1 + 32));
  v5 = *(const void **)(a1 + 24);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (*(_QWORD *)(a1 + 16))
    CMNotificationCenterUnregisterForBarrierSupport();
  _Block_object_dispose(&v7, 8);
}

void sub_192FEBB78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CFStringRef FigCPEExternalProtectionMonitorCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigCPEExternalProtectionMonitor %p]"), a1);
}

CFStringRef FigCPEExternalProtectionMonitorCopyDebugDesc(const void *a1)
{
  const __CFAllocator *v2;
  CFIndex v3;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("[FigCPEExternalProtectionMonitor %p retain count %d"), a1, v3);
}

void RemoveExclusiveDisplays(uint64_t a1, void *a2)
{
  uint64_t (*v2)(_QWORD);
  const __CFArray *v4;
  const __CFArray *v5;
  CFRange v6;

  v2 = *(uint64_t (**)(_QWORD))(a1 + 88);
  if (v2)
  {
    v4 = (const __CFArray *)v2(*(_QWORD *)(a1 + 32));
    if (v4)
    {
      v5 = v4;
      v6.length = CFArrayGetCount(v4);
      v6.location = 0;
      CFArrayApplyFunction(v5, v6, (CFArrayApplierFunction)RemoveExclusiveDisplay, a2);
    }
  }
}

CFIndex RemoveExclusiveDisplay(const void *a1, CFArrayRef theArray)
{
  CFIndex result;
  CFIndex v5;
  CFRange v6;
  CFRange v7;

  v6.length = CFArrayGetCount(theArray);
  v6.location = 0;
  result = CFArrayGetFirstIndexOfValue(theArray, v6, a1);
  if (result != -1)
  {
    v5 = result;
    do
    {
      CFArrayRemoveValueAtIndex(theArray, v5);
      v7.length = CFArrayGetCount(theArray);
      v7.location = 0;
      result = CFArrayGetFirstIndexOfValue(theArray, v7, a1);
      v5 = result;
    }
    while (result != -1);
  }
  return result;
}

void AddExclusiveDisplay(const void *a1, CFArrayRef *a2)
{
  const __CFArray *v2;
  CFRange v5;

  v2 = *a2;
  if (*a2)
  {
    v5.length = CFArrayGetCount(*a2);
    v5.location = 0;
    if (CFArrayGetFirstIndexOfValue(v2, v5, a1) != -1)
      CFArrayAppendValue(a2[1], a1);
  }
}

const char *AggregateOnlyGetIdentifier()
{
  return "AggregateOnly";
}

uint64_t FigCPEExternalProtectionMonitorPoolDataRegisterClass()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigCPEExternalProtectionMonitorPoolDataID = result;
  return result;
}

double FigCPEExternalProtectionMonitorPoolDataInit(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t FigCPEExternalProtectionMonitorPoolDataFinalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  uint64_t result;

  v2 = (const void *)a1[3];
  if (v2)
  {
    CFRelease(v2);
    a1[3] = 0;
  }
  v3 = (const void *)a1[5];
  if (v3)
  {
    CFRelease(v3);
    a1[5] = 0;
  }
  v4 = (const void *)a1[6];
  if (v4)
  {
    CFRelease(v4);
    a1[6] = 0;
  }
  v5 = (const void *)a1[7];
  if (v5)
  {
    CFRelease(v5);
    a1[7] = 0;
  }
  result = a1[2];
  if (result)
    return CMNotificationCenterUnregisterForBarrierSupport();
  return result;
}

CFStringRef FigCPEExternalProtectionMonitorPoolDataCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigCPEExternalProtectionMonitorPoolData %p]"), a1);
}

CFStringRef FigCPEExternalProtectionMonitorPoolDataCopyDebugDesc(const void *a1)
{
  const __CFAllocator *v2;
  CFIndex v3;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("[FigCPEExternalProtectionMonitorPoolData %p retain count %d"), a1, v3);
}

uint64_t FigCPEOctaviaExternalProtectionMonitorCreate(uint64_t a1, _QWORD *a2, uint64_t a3, const void *a4, _QWORD *a5)
{
  uint64_t v8;
  const __CFAllocator *v9;
  CFMutableDictionaryRef Mutable;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  dispatch_queue_t v14;
  CFTypeRef v15;
  uint64_t BBufFromPointer;
  OpaqueCMBlockBuffer *v17;
  OpaqueCMBlockBuffer *v18;
  size_t DataLength;
  uint64_t v20;
  _QWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, int);
  void *v32;
  _QWORD *v33;
  CFTypeRef v34;
  OpaqueCMBlockBuffer *v35;
  OpaqueCMBlockBuffer *v36;
  OpaqueCMBlockBuffer *v37;

  v36 = 0;
  v37 = 0;
  v34 = 0;
  v35 = 0;
  v8 = MEMORY[0x1E0C809B0];
  v22 = (_QWORD *)MEMORY[0x1E0C809B0];
  *(_QWORD *)&v23 = 0x40000000;
  *((_QWORD *)&v23 + 1) = __InitializeIOAVProtectionTypeForNero_block_invoke;
  *(_QWORD *)&v24 = &__block_descriptor_tmp_7_10;
  *((_QWORD *)&v24 + 1) = a4;
  if (InitializeIOAVProtectionTypeForNero_dpProtectionTypeOnce != -1)
    dispatch_once(&InitializeIOAVProtectionTypeForNero_dpProtectionTypeOnce, &v22);
  SendIOAVProtectionTypeToNero();
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    goto LABEL_30;
  v11 = FigCFDictionarySetInt64();
  if ((_DWORD)v11)
  {
LABEL_31:
    v20 = v11;
    goto LABEL_18;
  }
  v12 = malloc_type_calloc(1uLL, 0x18uLL, 0x102004023CB03E4uLL);
  if (!v12
    || (v13 = v12, v14 = dispatch_queue_create("com.apple.coremedia.fcpeo.transport", 0), (v13[1] = v14) == 0))
  {
LABEL_30:
    v20 = 4294955145;
    goto LABEL_18;
  }
  v29 = v8;
  v30 = 0x40000000;
  v31 = __FigCPEOctaviaExternalProtectionMonitorCreate_block_invoke;
  v32 = &__block_descriptor_tmp_137;
  v33 = v13;
  v11 = NeroTransportRegisterObjectWithFlags();
  if ((_DWORD)v11)
    goto LABEL_31;
  if (a4)
    v15 = CFRetain(a4);
  else
    v15 = 0;
  v13[2] = v15;
  BBufFromPointer = FigTransportCreateBBufFromPointer();
  if ((_DWORD)BBufFromPointer)
    goto LABEL_27;
  BBufFromPointer = FigRemote_CreateSerializedAtomDataBlockBufferForCFType();
  if ((_DWORD)BBufFromPointer
    || (v18 = v36,
        v17 = v37,
        DataLength = CMBlockBufferGetDataLength(v36),
        BBufFromPointer = CMBlockBufferAppendBufferReference(v17, v18, 0, DataLength, 0),
        (_DWORD)BBufFromPointer)
    || (FigTransportGetRemoteRootObject(),
        BBufFromPointer = NeroTransportSendSyncMessageCreatingReply(),
        (_DWORD)BBufFromPointer)
    || (BBufFromPointer = CMBlockBufferCopyDataBytes(v35, 0, 8uLL, v13), (_DWORD)BBufFromPointer))
  {
LABEL_27:
    v20 = BBufFromPointer;
  }
  else
  {
    v22 = v13;
    v25 = xmmword_1E2FB8440;
    v26 = *(_OWORD *)&off_1E2FB8450;
    v27 = xmmword_1E2FB8460;
    v28 = *(_OWORD *)&off_1E2FB8470;
    v23 = xmmword_1E2FB8420;
    v24 = *(_OWORD *)&off_1E2FB8430;
    v20 = FigCPEExternalProtectionMonitorCreateWithCallbacks(v9, (__int128 *)&v22, a2, (uint64_t *)&v34);
    if (!(_DWORD)v20)
    {
      *a5 = v34;
      v34 = 0;
      goto LABEL_18;
    }
  }
  OctaviaDisposeRefCon((dispatch_object_t *)v13);
  if (v34)
    CFRelease(v34);
LABEL_18:
  if (v37)
    CFRelease(v37);
  if (v36)
    CFRelease(v36);
  if (v35)
    CFRelease(v35);
  if (Mutable)
    CFRelease(Mutable);
  return v20;
}

const char *OctaviaGetIdentifier()
{
  return "Octavia";
}

uint64_t OctaviaAddListener()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterAddListener();
}

uint64_t OctaviaRemoveListener()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterRemoveListener();
}

uint64_t OctaviaBeginMonitoring()
{
  return NeroTransportSendAsyncMessage();
}

uint64_t OctaviaEndMonitoring()
{
  return NeroTransportSendAsyncMessage();
}

uint64_t OctaviaGetMethods()
{
  OSStatus v0;
  OSStatus v1;
  unsigned int destination;
  CMBlockBufferRef theSourceBuffer;

  theSourceBuffer = 0;
  destination = 0;
  v0 = NeroTransportSendSyncMessageCreatingReply();
  if (v0 == -12031)
  {
    v1 = 0;
    destination = 0;
  }
  else
  {
    v1 = v0;
    if (!v0)
      v1 = CMBlockBufferCopyDataBytes(theSourceBuffer, 0, 4uLL, &destination);
  }
  if (theSourceBuffer)
    CFRelease(theSourceBuffer);
  if (v1)
    return 0;
  else
    return destination;
}

uint64_t OctaviaGetExclusiveDisplayList()
{
  if (OctaviaGetExclusiveDisplayList_once != -1)
    dispatch_once(&OctaviaGetExclusiveDisplayList_once, &__block_literal_global_122);
  return OctaviaGetExclusiveDisplayList_exclusiveDisplayList;
}

uint64_t OctaviaGetStatus(int a1, CFArrayRef theArray, _BYTE *a3)
{
  OSStatus SerializedAtomDataBlockBufferForCFType;
  OSStatus v5;
  OSStatus v6;
  unsigned int destination;
  CMBlockBufferRef theSourceBuffer;
  CFTypeRef cf;

  theSourceBuffer = 0;
  cf = 0;
  destination = 0;
  *a3 = 1;
  if (theArray
    && CFArrayGetCount(theArray) >= 1
    && (SerializedAtomDataBlockBufferForCFType = FigRemote_CreateSerializedAtomDataBlockBufferForCFType()) != 0)
  {
    v6 = SerializedAtomDataBlockBufferForCFType;
  }
  else
  {
    v5 = NeroTransportSendSyncMessageCreatingReply();
    if (v5 == -12031)
    {
      destination = 1;
LABEL_9:
      v6 = 0;
      *a3 = 0;
      goto LABEL_10;
    }
    v6 = v5;
    if (!v5)
    {
      v6 = CMBlockBufferCopyDataBytes(theSourceBuffer, 0, 4uLL, &destination);
      if (!v6 && destination == 1)
        goto LABEL_9;
    }
  }
LABEL_10:
  if (cf)
    CFRelease(cf);
  if (theSourceBuffer)
    CFRelease(theSourceBuffer);
  if (v6)
    return 0;
  else
    return destination;
}

uint64_t OctaviaGetState()
{
  OSStatus v0;
  OSStatus v1;
  unsigned int destination;
  CMBlockBufferRef theSourceBuffer;

  theSourceBuffer = 0;
  destination = 0;
  v0 = NeroTransportSendSyncMessageCreatingReply();
  if (v0 == -12031)
  {
    v1 = 0;
    destination = 1;
  }
  else
  {
    v1 = v0;
    if (!v0)
      v1 = CMBlockBufferCopyDataBytes(theSourceBuffer, 0, 4uLL, &destination);
  }
  if (theSourceBuffer)
    CFRelease(theSourceBuffer);
  if (v1)
    return 0;
  else
    return destination;
}

uint64_t OctaviaGetSerializationToken(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void OctaviaDisposeRefCon(dispatch_object_t *a1)
{
  dispatch_object_t v2;

  if (a1)
  {
    NeroTransportUnregisterObject();
    NeroTransportSendAsyncMessage();
    dispatch_release(a1[1]);
    v2 = a1[2];
    if (v2)
      CFRelease(v2);
  }
  free(a1);
}

uint64_t OctaviaGetAliasedStatus(int a1, const __CFArray *a2, _BYTE *a3)
{
  uint64_t result;

  LODWORD(result) = OctaviaGetStatus(a1, a2, a3);
  if ((_DWORD)result == 2)
    return 3;
  else
    return result;
}

void SendIOAVProtectionTypeToNero()
{
  const __CFString *v0;
  const __CFString *v1;
  CFTypeID v2;
  CFTypeID v3;
  CFTypeID v4;
  unsigned int valuePtr;

  v0 = (const __CFString *)CFPreferencesCopyAppValue(CFSTR("IOAVProtectionType"), CFSTR("com.apple.coremedia"));
  v1 = v0;
  valuePtr = 1;
  if (v0)
  {
    v2 = CFGetTypeID(v0);
    if (v2 == CFStringGetTypeID())
    {
      if (CFStringCompare(v1, CFSTR("hdcp"), 1uLL) == kCFCompareEqualTo)
        goto LABEL_12;
LABEL_11:
      valuePtr = 0;
      goto LABEL_12;
    }
    v3 = CFGetTypeID(v1);
    if (v3 == CFNumberGetTypeID())
    {
      if (!CFNumberGetValue((CFNumberRef)v1, kCFNumberSInt32Type, &valuePtr) || valuePtr >= 2)
        goto LABEL_11;
    }
    else
    {
      v4 = CFGetTypeID(v1);
      if (v4 != CFBooleanGetTypeID() || !CFBooleanGetValue((CFBooleanRef)v1))
        goto LABEL_11;
    }
  }
LABEL_12:
  if (!FigCreateBlockBufferCopyingMemoryBlock())
  {
    FigTransportGetRemoteRootObject();
    NeroTransportSendAsyncMessage();
  }
  if (v1)
    CFRelease(v1);
}

uint64_t FigAssetExportSessionCreateWithAsset(const __CFAllocator *a1, uint64_t a2, int a3, const void *a4, void *a5, char a6, uint64_t a7, CFTypeRef *a8)
{
  uint64_t v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DerivedStorage;
  uint64_t v15;
  __int128 v16;
  dispatch_queue_t v17;
  uint64_t v18;
  uint64_t v19;
  dispatch_semaphore_t v20;
  dispatch_queue_t v21;
  CFMutableDictionaryRef Mutable;
  uint64_t v23;
  int valuePtr;
  CMTime duration;
  os_log_type_t type;
  CFTypeRef cf;
  CMTime start;
  CMTimeRange v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  cf = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  FigKTraceInit();
  if (a4 && a5)
  {
    if (FigCFEqual() || FigExportSettingsForExportPreset(a5))
    {
      MEMORY[0x19402F294](&FigAssetExportSessionGetClassID_sRegisterFigAssetExportSessionOnce, RegisterFigAssetExportSessionClassOnce);
      v12 = CMDerivedObjectCreate();
      if ((_DWORD)v12)
      {
LABEL_16:
        v23 = v12;
        goto LABEL_18;
      }
      if (dword_1EE2A35C0)
      {
        LODWORD(duration.value) = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(_DWORD *)(DerivedStorage + 24) = a3;
      *(_QWORD *)(DerivedStorage + 16) = CFRetain(a4);
      v15 = FigReadWriteLockCreate();
      *(_QWORD *)(DerivedStorage + 32) = v15;
      if (v15)
      {
        start = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
        duration = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
        CMTimeRangeMake(&v33, &start, &duration);
        v16 = *(_OWORD *)&v33.start.epoch;
        *(_OWORD *)(DerivedStorage + 208) = *(_OWORD *)&v33.start.value;
        *(_OWORD *)(DerivedStorage + 224) = v16;
        *(_OWORD *)(DerivedStorage + 240) = *(_OWORD *)&v33.duration.timescale;
        *(_QWORD *)(DerivedStorage + 72) = CFRetain(a5);
        *(_QWORD *)(DerivedStorage + 168) = CFSTR("Spectral");
        v17 = dispatch_queue_create("com.apple.coremedia.figassetexportsession.notifications", 0);
        *(_QWORD *)(DerivedStorage + 424) = v17;
        if (v17)
        {
          v18 = MEMORY[0x1E0CA2E18];
          *(_OWORD *)(DerivedStorage + 256) = *MEMORY[0x1E0CA2E18];
          *(_QWORD *)(DerivedStorage + 272) = *(_QWORD *)(v18 + 16);
          *(_BYTE *)(DerivedStorage + 280) = 0;
          *(_QWORD *)(DerivedStorage + 288) = CFSTR("kFigAssetExportSession_VideoFrameRateConversionAlgorithmPrecise");
          v19 = *MEMORY[0x1E0C9AE40];
          *(_QWORD *)(DerivedStorage + 384) = *MEMORY[0x1E0C9AE40];
          *(_QWORD *)(DerivedStorage + 392) = v19;
          *(_QWORD *)(DerivedStorage + 336) = v19;
          *(_QWORD *)(DerivedStorage + 312) = v19;
          *(_QWORD *)(DerivedStorage + 320) = 0;
          v20 = dispatch_semaphore_create(0);
          *(_QWORD *)(DerivedStorage + 304) = v20;
          if (v20)
          {
            FigDispatchOnceInitWithinObject();
            *(_BYTE *)(DerivedStorage + 28) = a6;
            *(_QWORD *)DerivedStorage = FigCFWeakReferenceHolderCreateWithReferencedObject();
            *(_QWORD *)(DerivedStorage + 376) = a7;
            v21 = dispatch_queue_create("com.apple.coremedia.figassetexportsession.assetLoadValuesAsyncBatchID", 0);
            *(_QWORD *)(DerivedStorage + 432) = v21;
            if (v21)
            {
              Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              *(_QWORD *)(DerivedStorage + 352) = Mutable;
              if (Mutable)
              {
                CMNotificationCenterGetDefaultLocalCenter();
                FigNotificationCenterAddWeakListener();
                CMNotificationCenterGetDefaultLocalCenter();
                FigNotificationCenterAddWeakListener();
                *(_DWORD *)(DerivedStorage + 344) = 0;
                *(_WORD *)(DerivedStorage + 96) = 0;
                *(_QWORD *)(DerivedStorage + 136) = 0;
                *(_QWORD *)(DerivedStorage + 112) = 0;
                *(_QWORD *)(DerivedStorage + 120) = 0;
                *(_QWORD *)(DerivedStorage + 104) = 0;
                *(_BYTE *)(DerivedStorage + 128) = 0;
                valuePtr = 0;
                v23 = 0;
                *(_QWORD *)(DerivedStorage + 64) = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloatType, &valuePtr);
                *a8 = cf;
                return v23;
              }
            }
          }
        }
      }
    }
    v12 = FigSignalErrorAt();
    goto LABEL_16;
  }
  v23 = 4294950325;
  FigSignalErrorAt();
LABEL_18:
  if (cf)
    CFRelease(cf);
  return v23;
}

void figAssetExportSession_figAssetNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage;
  CFErrorRef v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v9;
  const void *v10;
  const void *Value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
  {
    v7 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("FigAssetExportSession_ErrorDomain"), -16978, 0);
    *(_BYTE *)(DerivedStorage + 8) = 1;
    if (dword_1EE2A35C0)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(DerivedStorage + 352), (CFDictionaryApplierFunction)figAssetExportSession_completePendingTaskWithError, v7);
    if (v7)
      CFRelease(v7);
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(DerivedStorage + 352));
  }
  else if (FigCFEqual() && (v9 = CFDictionaryGetValue(a5, CFSTR("assetPayload_BatchID"))) != 0)
  {
    v10 = v9;
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 352), v9);
    if (Value)
    {
      FigAssetExportSessionTaskExecuteAndComplete((uint64_t)Value);
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 352), v10);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t FigAssetExportSessionVideoCompositionCreate(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  uint64_t Instance;
  _QWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;

  if (!a2)
    return FigSignalErrorAt();
  if (!a3)
    return FigSignalErrorAt();
  *a3 = 0;
  MEMORY[0x19402F294](&FigAssetExportSessionVideoCompositionGetTypeID_sRegisterFigAssetExportSessionVideoCompositionOnce, registerFigAssetExportSessionVideoCompositionOnce);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v6 = (_QWORD *)Instance;
  v7 = *a2;
  v8 = a2[2];
  *(_OWORD *)(Instance + 32) = a2[1];
  *(_OWORD *)(Instance + 48) = v8;
  *(_OWORD *)(Instance + 16) = v7;
  v9 = a2[3];
  v10 = a2[4];
  v11 = a2[6];
  *(_OWORD *)(Instance + 96) = a2[5];
  *(_OWORD *)(Instance + 112) = v11;
  *(_OWORD *)(Instance + 64) = v9;
  *(_OWORD *)(Instance + 80) = v10;
  v12 = a2[7];
  v13 = a2[8];
  v14 = a2[10];
  *(_OWORD *)(Instance + 160) = a2[9];
  *(_OWORD *)(Instance + 176) = v14;
  *(_OWORD *)(Instance + 128) = v12;
  *(_OWORD *)(Instance + 144) = v13;
  v15 = *(const void **)(Instance + 40);
  if (v15)
    CFRetain(v15);
  v16 = (const void *)v6[7];
  if (v16)
    CFRetain(v16);
  v17 = (const void *)v6[8];
  if (v17)
    CFRetain(v17);
  v18 = (const void *)v6[10];
  if (v18)
    CFRetain(v18);
  v19 = (const void *)v6[11];
  if (v19)
    CFRetain(v19);
  v20 = (const void *)v6[14];
  if (v20)
    CFRetain(v20);
  v21 = (const void *)v6[15];
  if (v21)
    CFRetain(v21);
  v22 = (const void *)v6[16];
  if (v22)
    CFRetain(v22);
  v23 = (const void *)v6[21];
  if (v23)
    CFRetain(v23);
  v24 = (const void *)v6[22];
  if (v24)
    CFRetain(v24);
  v25 = (const void *)v6[23];
  if (v25)
    CFRetain(v25);
  *a3 = v6;
  return 0;
}

uint64_t FigAssetExportSessionVideoCompositionGetTypeID()
{
  MEMORY[0x19402F294](&FigAssetExportSessionVideoCompositionGetTypeID_sRegisterFigAssetExportSessionVideoCompositionOnce, registerFigAssetExportSessionVideoCompositionOnce);
  return sFigAssetExportSessionVideoCompositionID;
}

uint64_t FigAssetExportSessionGetTypeID()
{
  MEMORY[0x19402F294](&FigAssetExportSessionGetClassID_sRegisterFigAssetExportSessionOnce, RegisterFigAssetExportSessionClassOnce);
  return CMBaseClassGetCFTypeID();
}

uint64_t registerFigAssetExportSessionVideoCompositionOnce()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigAssetExportSessionVideoCompositionID = result;
  return result;
}

const __CFDictionary *FigAssetExportSessionGetSettingForFigRemaker(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  CGSize *v5;
  __CFString *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v10[3];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(_QWORD *)(DerivedStorage + 16);
  v5 = *(CGSize **)(DerivedStorage + 184);
  v6 = *(__CFString **)(DerivedStorage + 72);
  v7 = *(_QWORD *)(DerivedStorage + 328);
  v8 = *(_OWORD *)(DerivedStorage + 224);
  v10[0] = *(_OWORD *)(DerivedStorage + 208);
  v10[1] = v8;
  v10[2] = *(_OWORD *)(DerivedStorage + 240);
  return figAssetExportSession_getSettingForFigRemaker(v4, a2, v10, v5, v6, v7, (const void **)(DerivedStorage + 80));
}

const __CFDictionary *figAssetExportSession_getSettingForFigRemaker(uint64_t a1, uint64_t a2, __int128 *a3, CGSize *a4, __CFString *a5, uint64_t a6, const void **a7)
{
  CGFloat UntransformedSourceDimension;
  double v15;
  double v16;
  double v17;
  double v18;
  BOOL v19;
  __CFString *v20;
  __int128 v21;
  const __CFDictionary *v22;
  const void *v23;
  __int128 v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  UntransformedSourceDimension = FigAssetExportSession_getUntransformedSourceDimension(a1, a2, a4);
  v15 = UntransformedSourceDimension * 9.0;
  v19 = UntransformedSourceDimension * 9.0 == v16 * 16.0;
  v17 = UntransformedSourceDimension * 16.0;
  v18 = v16 * 9.0;
  v19 = v19 || v17 == v18;
  if (!v19)
    goto LABEL_14;
  v20 = (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@_16x9"), v17, v18, 9.0, v15, a5);
  v21 = a3[1];
  v26 = *a3;
  v27 = v21;
  v28 = a3[2];
  v22 = FigAssetExportSession_actualSettingForPreset(a1, a2, &v26, a4, v20, a6);
  if (v22)
  {
    v23 = *a7;
    *a7 = v20;
    if (v20)
      CFRetain(v20);
    if (v23)
      CFRelease(v23);
  }
  if (v20)
    CFRelease(v20);
  if (!v22)
  {
LABEL_14:
    v24 = a3[1];
    v26 = *a3;
    v27 = v24;
    v28 = a3[2];
    return FigAssetExportSession_actualSettingForPreset(a1, a2, &v26, a4, a5, a6);
  }
  return v22;
}

void FigAssetExportSessionGetDestinationFrameDurationAndExpectedFrameRate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t v11;
  CMTime v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = *(_QWORD *)(DerivedStorage + 16);
  v11 = *(_QWORD *)(DerivedStorage + 184);
  v12 = *(CMTime *)(DerivedStorage + 256);
  figAssetExportSession_getDestinationFrameDurationAndExpectedFrameRate(v10, a3, v11, a2, &v12, a4, a5);
}

void figAssetExportSession_getDestinationFrameDurationAndExpectedFrameRate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CMTime *a5, uint64_t a6, float *a7)
{
  float SourceVideoFrameRate;
  int v14;
  float v15;
  BOOL v17;
  int v18;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  double UntransformedSourceDimension;
  double v22;
  double v23;
  double v24;
  double v25;
  float v26;
  CMTime v27;
  CMTime time;
  float v29;
  uint64_t v30;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  SourceVideoFrameRate = figAssetExportSession_getSourceVideoFrameRate(a1, a3, a2);
  v30 = 0;
  v29 = 0.0;
  FigCFDictionaryGetFloatIfPresent();
  FigCFDictionaryGetFloatIfPresent();
  FigCFDictionaryGetFloatIfPresent();
  v14 = 0;
  if ((a5->flags & 0x1D) == 1)
  {
    time = *a5;
    v15 = 1.0 / CMTimeGetSeconds(&time);
    if (SourceVideoFrameRate > v15 && v15 > 0.0)
      v14 = 2;
  }
  v17 = a3 != 0 && v14 == 0;
  if (v17)
    v18 = 3;
  else
    v18 = v14;
  value = *MEMORY[0x1E0CA2E18];
  flags = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
  timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  if (v18)
  {
    if (v18 == 2)
    {
      value = a5->value;
      flags = a5->flags;
      timescale = a5->timescale;
      epoch = a5->epoch;
    }
    else if (v17)
    {
      value = *(_QWORD *)(a3 + 16);
      flags = *(_DWORD *)(a3 + 28);
      timescale = *(_DWORD *)(a3 + 24);
      epoch = *(_QWORD *)(a3 + 32);
    }
  }
  if ((flags & 0x1D) == 1)
  {
    time.value = value;
    time.timescale = timescale;
    time.flags = flags;
    time.epoch = epoch;
    SourceVideoFrameRate = 1.0 / CMTimeGetSeconds(&time);
  }
  if (v29 != 0.0)
  {
    UntransformedSourceDimension = FigAssetExportSession_getUntransformedSourceDimension(a1, a2, (CGSize *)a3);
    v23 = FigExportSettingsCalculateOutputDimensions(UntransformedSourceDimension, v22);
    v25 = v23 * v24;
    v26 = v29;
    if (v25 * SourceVideoFrameRate > v29)
    {
      do
      {
        if ((flags & 0x1D) == 1)
        {
          v27.value = value;
          v27.timescale = timescale;
          v27.flags = flags;
          v27.epoch = epoch;
          CMTimeMultiplyByRatio(&time, &v27, 2, 1);
          value = time.value;
          flags = time.flags;
          timescale = time.timescale;
          epoch = time.epoch;
          SourceVideoFrameRate = 1.0 / CMTimeGetSeconds(&time);
          v26 = v29;
        }
        else
        {
          SourceVideoFrameRate = SourceVideoFrameRate * 0.5;
        }
      }
      while (v25 * SourceVideoFrameRate > v26);
      CMTimeMakeWithSeconds(&time, 1.0 / SourceVideoFrameRate, 600);
      value = time.value;
      flags = time.flags;
      timescale = time.timescale;
      epoch = time.epoch;
    }
  }
  if (a7)
    *a7 = SourceVideoFrameRate;
  if (a6)
  {
    *(_QWORD *)a6 = value;
    *(_DWORD *)(a6 + 8) = timescale;
    *(_DWORD *)(a6 + 12) = flags;
    *(_QWORD *)(a6 + 16) = epoch;
  }
}

uint64_t FigAssetExportSessionGetAverageVideoBitRateForSourceAndPresetAndTransferFunction(double a1, double a2, float a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return figAssetExportSession_getAverageVideoBitRateForSourceAndPreset(*(_QWORD *)(DerivedStorage + 16), a5, *(_QWORD *)(DerivedStorage + 72), a6, a1, a2, a3);
}

uint64_t figAssetExportSession_getAverageVideoBitRateForSourceAndPreset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, float a7)
{
  unsigned int (*v13)(uint64_t, uint64_t, CFTypeRef *);
  BOOL v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t CMBaseObject;
  unsigned int (*v19)(uint64_t, const __CFString *, uint64_t, CFArrayRef *);
  CFIndex Count;
  CFIndex v21;
  CFIndex v22;
  const opaqueCMFormatDescription *ValueAtIndex;
  FourCharCode MediaSubType;
  _BOOL4 v25;
  uint64_t v27;
  void (*v28)(uint64_t, const __CFString *, uint64_t, CFNumberRef *);
  int v29;
  CFNumberRef number;
  CFTypeRef cf;
  CFArrayRef theArray;

  number = 0;
  cf = 0;
  if (!a3)
    goto LABEL_25;
  if (!(_DWORD)a2)
    goto LABEL_9;
  v13 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v13 || (!v13(a1, a2, &cf) ? (v14 = cf == 0) : (v14 = 1), v14))
  {
LABEL_25:
    FigSignalErrorAt();
    v15 = 0;
    goto LABEL_39;
  }
  figAssetExportSession_trackContainsStereoVideo((uint64_t)cf);
LABEL_9:
  v15 = FigExportSettingsAverageBitRateForSourceAndExportPreset(a4, a5, a6, a7);
  if (FigCFEqual() || FigCFEqual() || FigCFEqual())
  {
    v16 = 0;
    if (!(_DWORD)a2)
      goto LABEL_39;
  }
  else
  {
    v16 = FigCFEqual() == 0;
    if (!(_DWORD)a2)
      goto LABEL_39;
  }
  if (v16)
    goto LABEL_39;
  theArray = 0;
  v17 = *MEMORY[0x1E0C9AE00];
  CMBaseObject = FigAssetTrackGetCMBaseObject(cf);
  v19 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
  if (!v19 || v19(CMBaseObject, CFSTR("FormatDescriptionArray"), v17, &theArray))
    goto LABEL_26;
  if (!theArray)
  {
LABEL_30:
    v27 = FigAssetTrackGetCMBaseObject(cf);
    v28 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
    if (v28)
    {
      v28(v27, CFSTR("EstimatedDataRate"), v17, &number);
      if (number)
      {
        LODWORD(theArray) = 0;
        CFNumberGetValue(number, kCFNumberFloatType, &theArray);
        v29 = vcvts_n_s32_f32(*(float *)&theArray, 3uLL);
        if ((int)v15 < v29)
          v29 = v15;
        if ((float)(*(float *)&theArray * 8.0) > 0.0)
          v15 = v29;
        else
          v15 = v15;
        if (number)
          CFRelease(number);
      }
    }
    goto LABEL_39;
  }
  Count = CFArrayGetCount(theArray);
  v21 = Count - 1;
  if (Count < 1)
  {
LABEL_26:
    v25 = 1;
  }
  else
  {
    v22 = 0;
    do
    {
      ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(theArray, v22);
      MediaSubType = CMFormatDescriptionGetMediaSubType(ValueAtIndex);
      v25 = MediaSubType != 1752589105;
    }
    while (MediaSubType != 1752589105 && v21 != v22++);
  }
  if (theArray)
    CFRelease(theArray);
  if (v25)
    goto LABEL_30;
LABEL_39:
  if (cf)
    CFRelease(cf);
  return v15;
}

uint64_t FigAssetExportSessionGetAverageVideoBitRateForSourceAndPreset(double a1, double a2, float a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return figAssetExportSession_getAverageVideoBitRateForSourceAndPreset(*(_QWORD *)(DerivedStorage + 16), a5, *(_QWORD *)(DerivedStorage + 72), a6, a1, a2, a3);
}

uint64_t FigAssetExportSessionExportGetPresetsCompatibleWithFigAsset(uint64_t a1)
{
  unsigned int hasAudioTrack;
  uint64_t (*v3)(uint64_t, uint64_t, CFTypeRef *);
  int v4;
  CFTypeRef v5;
  _BOOL4 v6;
  uint64_t (*v7)(uint64_t, uint64_t, CFTypeRef *);
  int v8;
  CFTypeRef v9;
  _BOOL4 v10;
  CFTypeRef cf[8];

  hasAudioTrack = figAssetExportSession_hasAudioTrack(a1);
  cf[0] = 0;
  v3 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v3)
  {
    v4 = v3(a1, 1986618469, cf);
    v5 = cf[0];
    if (!v4)
    {
      v6 = remakerFamily_GetEnabledTrackWithAllAlphaSegments((const __CFArray *)cf[0]) != 0;
      v5 = cf[0];
      if (!cf[0])
        goto LABEL_6;
      goto LABEL_4;
    }
    v6 = 0;
    if (cf[0])
LABEL_4:
      CFRelease(v5);
  }
  else
  {
    v6 = 0;
  }
LABEL_6:
  cf[0] = 0;
  v7 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v7)
  {
    v8 = v7(a1, 1986618469, cf);
    v9 = cf[0];
    if (!v8)
    {
      v10 = remakerFamily_GetEnabledTrackWithHomogeneousStereoSegments((const __CFArray *)cf[0]) != 0;
      v9 = cf[0];
      if (!cf[0])
        goto LABEL_11;
      goto LABEL_9;
    }
    v10 = 0;
    if (cf[0])
LABEL_9:
      CFRelease(v9);
  }
  else
  {
    v10 = 0;
  }
LABEL_11:
  cf[0] = &figAssetExportSession_GetPresets_sCategorizedPresets[7];
  cf[1] = &figAssetExportSession_GetPresets_sCategorizedPresets[6];
  cf[2] = &figAssetExportSession_GetPresets_sCategorizedPresets[5];
  cf[3] = &figAssetExportSession_GetPresets_sCategorizedPresets[4];
  cf[4] = &figAssetExportSession_GetPresets_sCategorizedPresets[3];
  cf[5] = &figAssetExportSession_GetPresets_sCategorizedPresets[2];
  cf[6] = &figAssetExportSession_GetPresets_sCategorizedPresets[1];
  cf[7] = figAssetExportSession_GetPresets_sCategorizedPresets;
  if (figAssetExportSession_GetPresets_onceToken != -1)
    dispatch_once_f(&figAssetExportSession_GetPresets_onceToken, cf, (dispatch_function_t)figAssetExportSession_CategorizePresetsOnce);
  return figAssetExportSession_GetPresets_sCategorizedPresets[4 * hasAudioTrack + 2 * v6 + v10];
}

uint64_t figAssetExportSession_hasAudioTrack(uint64_t a1)
{
  uint64_t v1;
  uint64_t CMBaseObject;
  unsigned int (*v3)(uint64_t, const __CFString *, _QWORD, CFArrayRef *);
  uint64_t v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  uint64_t v8;
  const void *ValueAtIndex;
  unsigned int (*v10)(const void *, _QWORD, int *);
  uint64_t v11;
  unsigned int (*v12)(uint64_t, const __CFString *, uint64_t, uint64_t *);
  uint64_t v13;
  int v15;
  uint64_t v16;
  CFArrayRef theArray;

  theArray = 0;
  v1 = *MEMORY[0x1E0C9AE40];
  v16 = *MEMORY[0x1E0C9AE40];
  v15 = 0;
  CMBaseObject = FigAssetGetCMBaseObject(a1);
  v3 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
  if (v3)
  {
    v4 = *MEMORY[0x1E0C9AE00];
    if (!v3(CMBaseObject, CFSTR("assetProperty_Tracks"), *MEMORY[0x1E0C9AE00], &theArray))
    {
      if (!theArray)
        return 0;
      Count = CFArrayGetCount(theArray);
      if (Count >= 1)
      {
        v6 = Count;
        v7 = 0;
        v8 = *MEMORY[0x1E0C9AE50];
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(theArray, v7);
          v16 = v1;
          v15 = 0;
          v10 = *(unsigned int (**)(const void *, _QWORD, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 32);
          if (!v10 || v10(ValueAtIndex, 0, &v15))
            break;
          if (v15 == 1936684398)
          {
            v11 = FigAssetTrackGetCMBaseObject(ValueAtIndex);
            v12 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
            if (!v12 || v12(v11, CFSTR("IsEnabled"), v4, &v16))
              break;
            if (v16 == v8)
            {
              v13 = 1;
              goto LABEL_14;
            }
          }
          ++v7;
        }
        while (v6 != v7);
      }
    }
  }
  v13 = 0;
LABEL_14:
  if (theArray)
    CFRelease(theArray);
  return v13;
}

void FigAssetExportSessionDetermineCompatibilityOfExportPreset(const void *a1, const void *a2, int a3, const void *a4, void (*a5)(uint64_t, _QWORD), uint64_t a6)
{
  _QWORD *v11;
  _QWORD *v12;
  CFTypeRef v13;
  CFTypeRef v14;
  CFTypeRef v15;

  v11 = malloc_type_malloc(0x30uLL, 0x10E0040BF5512D3uLL);
  if (v11)
  {
    v12 = v11;
    if (a1)
      v13 = CFRetain(a1);
    else
      v13 = 0;
    *v12 = v13;
    if (a2)
      v14 = CFRetain(a2);
    else
      v14 = 0;
    v12[1] = v14;
    if (a4)
      v15 = CFRetain(a4);
    else
      v15 = 0;
    v12[2] = v15;
    v12[3] = a5;
    v12[4] = a6;
    *((_DWORD *)v12 + 10) = a3;
    if (figAssetExportSession_GetAsynchronousConcurrentDispatchQueue_onceToken != -1)
      dispatch_once_f(&figAssetExportSession_GetAsynchronousConcurrentDispatchQueue_onceToken, &figAssetExportSession_GetAsynchronousConcurrentDispatchQueue_sAsyncDispatchQueue, (dispatch_function_t)figAssetExportSession_CreateAsynchronousConcurrentDispatchQueueOnce);
    dispatch_async_f((dispatch_queue_t)figAssetExportSession_GetAsynchronousConcurrentDispatchQueue_sAsyncDispatchQueue, v12, (dispatch_function_t)figAssetExportSession_IsExportPresetCompatibleWithAssetDeferred);
  }
  else
  {
    a5(a6, 0);
  }
}

void figAssetExportSession_IsExportPresetCompatibleWithAssetDeferred(uint64_t a1)
{
  uint64_t IsExportPresetCompatibleWithAssetAndOutputFileType;
  const void *v3;
  const void *v4;

  IsExportPresetCompatibleWithAssetAndOutputFileType = figAssetExportSession_IsExportPresetCompatibleWithAssetAndOutputFileType(*(__CFString **)a1, *(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 40), *(const void **)(a1 + 16), 0);
  (*(void (**)(_QWORD, uint64_t))(a1 + 24))(*(_QWORD *)(a1 + 32), IsExportPresetCompatibleWithAssetAndOutputFileType);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v3 = *(const void **)(a1 + 8);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 16);
  if (v4)
    CFRelease(v4);
  free((void *)a1);
}

uint64_t FigAssetExportSessionGetMaximumDuration(void *a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    FigCFDictionaryGetInt64IfPresent();
    a2 = 0;
  }
  return figAssetExportSession_maximumDuration(a1, a2, a3);
}

uint64_t figAssetExportSession_maximumDuration(void *a1, uint64_t a2, uint64_t a3)
{
  const __CFDictionary *v5;
  const __CFDictionary *v6;
  uint64_t v7;
  const __CFArray *Value;
  const __CFArray *v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex v12;
  uint64_t v13;
  const __CFDictionary *ValueAtIndex;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  CMTimeEpoch epoch;
  uint64_t v19;
  CMTime v21;
  uint64_t v22;
  uint64_t v23;

  v22 = a2;
  if (a3)
  {
    v5 = (const __CFDictionary *)FigExportSettingsForExportPreset(a1);
    if (v5)
    {
      v6 = v5;
      v7 = MEMORY[0x1E0CA2E30];
      *(_OWORD *)a3 = *MEMORY[0x1E0CA2E30];
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(v7 + 16);
      if (!a2)
      {
        FigCFDictionaryGetInt64IfPresent();
        if (!v22)
          return 0;
      }
      Value = (const __CFArray *)CFDictionaryGetValue(v6, CFSTR("mediaTiers"));
      v21.value = 0;
      v23 = 0;
      if (Value)
      {
        v9 = Value;
        Count = CFArrayGetCount(Value);
        if (Count <= 0)
        {
          v13 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_21;
        }
        v11 = Count;
        v12 = 0;
        v13 = 0x7FFFFFFFFFFFFFFFLL;
        do
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v9, v12);
          v15 = (uint64_t)CFDictionaryGetValue(ValueAtIndex, CFSTR("Video"));
          v16 = CFDictionaryGetValue(ValueAtIndex, CFSTR("Audio"));
          if (v15)
            v15 = figAssetExportSession_computeVideoTrackByteRate(v15, 1);
          if (v16)
            v17 = figAssetExportSession_computeAudioTrackByteRate((uint64_t)v16, 1);
          else
            v17 = 0;
          if (v17 + v15 < v13)
            v13 = v17 + v15;
          ++v12;
        }
        while (v11 != v12);
      }
      else
      {
        figAssetExportSession_computeAudioVideoByteRate(v6, 1, &v21.value, &v23);
        v13 = v23 + v21.value;
      }
      if (v13 < 1)
        return 0;
LABEL_21:
      if (v22 < 30721)
      {
        v19 = MEMORY[0x1E0CA2E68];
        *(_OWORD *)a3 = *MEMORY[0x1E0CA2E68];
        epoch = *(_QWORD *)(v19 + 16);
      }
      else
      {
        CMTimeMakeWithSeconds(&v21, (float)((float)((float)(v22 - 30720) * 0.99) / (float)v13), 1000000);
        *(_OWORD *)a3 = *(_OWORD *)&v21.value;
        epoch = v21.epoch;
      }
      *(_QWORD *)(a3 + 16) = epoch;
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigAssetExportSessionEstimateMaximumDurationWithCompletionHandler(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  __CFArray *Mutable;
  __CFArray *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  CFTypeRef v13;
  __int128 v14;
  __int128 v15;
  CFTypeRef v16;
  CFTypeRef v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  _QWORD *v23;

  v23 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    if (a2)
    {
      v7 = DerivedStorage;
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      if (Mutable)
      {
        v9 = Mutable;
        CFArrayAppendValue(Mutable, CFSTR("assetProperty_Tracks"));
        CFArrayAppendValue(v9, CFSTR("assetProperty_FormatReader"));
        CFArrayAppendValue(v9, CFSTR("assetProperty_TrackReferences"));
        v10 = FigAssetExportSessionTaskCreate(a1, v9, (uint64_t)figAssetExportSession_estimateMaximumDurationDeferred, (uint64_t)figAssetExportSession_completeEstimateMaximumDurationTask, 0xB0uLL, &v23);
        v11 = v23;
        if ((_DWORD)v10)
        {
          CFRelease(v9);
          if (!v11)
            return v10;
        }
        else
        {
          v12 = v23[6];
          v13 = *(CFTypeRef *)(v7 + 16);
          if (v13)
            v13 = CFRetain(v13);
          *(_QWORD *)v12 = v13;
          v14 = *(_OWORD *)(v7 + 208);
          v15 = *(_OWORD *)(v7 + 224);
          *(_OWORD *)(v12 + 40) = *(_OWORD *)(v7 + 240);
          *(_OWORD *)(v12 + 24) = v15;
          *(_OWORD *)(v12 + 8) = v14;
          v16 = *(CFTypeRef *)(v7 + 184);
          if (v16)
            v16 = CFRetain(v16);
          *(_QWORD *)(v12 + 56) = v16;
          v17 = *(CFTypeRef *)(v7 + 72);
          if (v17)
            v17 = CFRetain(v17);
          v19 = *(_QWORD *)(v7 + 320);
          v18 = *(_QWORD *)(v7 + 328);
          *(_QWORD *)(v12 + 64) = v17;
          *(_QWORD *)(v12 + 72) = v18;
          *(_QWORD *)(v12 + 80) = v19;
          v20 = *(_QWORD *)(v7 + 272);
          *(_OWORD *)(v12 + 88) = *(_OWORD *)(v7 + 256);
          *(_QWORD *)(v12 + 104) = v20;
          *(_QWORD *)(v12 + 112) = v7 + 80;
          *(_DWORD *)(v12 + 124) = *(_DWORD *)(v7 + 344);
          *(_BYTE *)(v12 + 128) = *(_QWORD *)(v7 + 176) != 0;
          *(_BYTE *)(v12 + 120) = *(_BYTE *)(v7 + 98);
          v21 = (_OWORD *)MEMORY[0x1E0CA2E18];
          *(_QWORD *)(v12 + 148) = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
          *(_OWORD *)(v12 + 132) = *v21;
          *(_QWORD *)(v12 + 160) = a2;
          *(_QWORD *)(v12 + 168) = a3;
          figAssetExportSession_runTaskAfterLoadingRequiredAssetProperties(v11);
          CFRelease(v9);
        }
        CFRelease(v11);
        return v10;
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigAssetExportSessionTaskCreate(const void *a1, const __CFArray *a2, uint64_t a3, uint64_t a4, size_t a5, _QWORD *a6)
{
  const __CFAllocator *v12;
  uint64_t Instance;
  _QWORD *v14;
  void *v15;
  CFArrayRef Copy;
  CFArrayRef v17;
  CFTypeRef v18;
  uint64_t v20;

  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MEMORY[0x19402F294](&figAssetExportSessionTask_GetTypeID_sRegisterfigAssetExportSessionTaskOnce, figAssetExportSessionTask_RegisterOnce);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v14 = (_QWORD *)Instance;
  v15 = malloc_type_malloc(a5, 0xC07A6DAEuLL);
  if (v15 && (Copy = CFArrayCreateCopy(v12, a2)) != 0)
  {
    v17 = Copy;
    if (a1)
      v18 = CFRetain(a1);
    else
      v18 = 0;
    v14[4] = a3;
    v14[5] = a4;
    v14[2] = v18;
    v14[3] = v17;
    v14[6] = v15;
    *a6 = v14;
    return 0;
  }
  else
  {
    v20 = FigSignalErrorAt();
    free(v15);
    CFRelease(v14);
    return v20;
  }
}

CFIndex figAssetExportSession_estimateMaximumDurationDeferred(uint64_t a1, __CFError **a2)
{
  __int128 v2;
  CMTimeEpoch v3;
  CMTimeEpoch v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  const __CFDictionary *v10;
  CMTimeEpoch epoch;
  uint64_t TypeID;
  uint64_t v13;
  int v14;
  uint64_t DefaultSourceVideoTrackFromAsset;
  uint64_t v16;
  CGSize *v17;
  __CFString *v18;
  uint64_t v19;
  const void **v20;
  const __CFDictionary *SettingForFigRemaker;
  uint64_t v22;
  uint64_t v23;
  double TotalByteRateOfAllAssetTracks;
  uint64_t v25;
  __CFError *CFError;
  const __CFDictionary *Value;
  uint64_t v29;
  const __CFArray *v30;
  __CFDictionary *VideoEncoderSpecification;
  uint64_t v32;
  uint64_t v33;
  double UntransformedSourceDimension;
  double v35;
  double v36;
  CFTypeRef v37;
  int AverageVideoBitRateForSourceAndPreset;
  int v39;
  const __CFDictionary *v40;
  uint64_t v41;
  int isHEVCHDRPreset;
  const __CFArray *PreferredFormatDescription;
  const char *v44;
  int v45;
  __int128 v46;
  __int128 v47;
  const void *v48;
  float v49;
  unsigned int v50;
  CMTimeRange start;
  CMTime duration;
  CMTimeRange otherRange;
  CMTimeRange v54;
  CMTime v55;
  uint64_t v56;
  CMTime v57;

  v2 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)&v57.value = *MEMORY[0x1E0CA2E18];
  v3 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v57.epoch = v3;
  if (!a2)
  {
    v25 = 4294950325;
    FigSignalErrorAt();
    return v25;
  }
  *a2 = 0;
  v46 = v2;
  *(_OWORD *)(a1 + 132) = v2;
  *(_QWORD *)(a1 + 148) = v3;
  v56 = *(_QWORD *)(a1 + 72);
  memset(&v55, 0, sizeof(v55));
  figAssetExportSession_getAssetDuration(*(_QWORD *)a1, &v55);
  memset(&v54, 0, sizeof(v54));
  v47 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&start.start.value = *MEMORY[0x1E0CA2E68];
  v6 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  start.start.epoch = v6;
  duration = v55;
  CMTimeRangeMake(&otherRange, &start.start, &duration);
  v7 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)&start.start.value = *(_OWORD *)(a1 + 8);
  *(_OWORD *)&start.start.epoch = v7;
  *(_OWORD *)&start.duration.timescale = *(_OWORD *)(a1 + 40);
  CMTimeRangeGetIntersection(&v54, &start, &otherRange);
  if (**(_QWORD **)(a1 + 112))
    v8 = **(_QWORD **)(a1 + 112);
  else
    v8 = *(_QWORD *)(a1 + 64);
  if (!figAssetExportSession_isOutputEstimateSupported(v8, 1))
  {
    v44 = "Unable to estimate for this preset.";
    v45 = -17391;
LABEL_54:
    CFError = figAssetExportSession_createCFError(v45, v44);
    v25 = 0;
LABEL_55:
    *a2 = CFError;
    if (!CFError)
      return v25;
    return CFErrorGetCode(CFError);
  }
  v9 = a1 + 132;
  v50 = 0;
  if (FigCFEqual())
  {
    v10 = 0;
    goto LABEL_8;
  }
  TypeID = FigRemakerGetTypeID();
  v13 = *(_QWORD *)a1;
  v14 = figAssetExportSession_IsAlphaPreset(*(void **)(a1 + 64));
  DefaultSourceVideoTrackFromAsset = remakerFamily_GetDefaultSourceVideoTrackFromAsset(TypeID, v13, v14, *(unsigned __int8 *)(a1 + 120), &v50);
  if ((_DWORD)DefaultSourceVideoTrackFromAsset)
  {
    v25 = DefaultSourceVideoTrackFromAsset;
    CFError = figAssetExportSession_createCFError(-16976, "Unable to select default video track for this asset.");
    goto LABEL_55;
  }
  v16 = *(_QWORD *)a1;
  v17 = *(CGSize **)(a1 + 56);
  v18 = *(__CFString **)(a1 + 64);
  v19 = *(_QWORD *)(a1 + 72);
  v20 = *(const void ***)(a1 + 112);
  start = v54;
  SettingForFigRemaker = figAssetExportSession_getSettingForFigRemaker(v16, v50, (__int128 *)&start.start.value, v17, v18, v19, v20);
  if (!SettingForFigRemaker)
  {
    v44 = "Unable to find export settings for this preset.";
    v45 = -16971;
    goto LABEL_54;
  }
  v10 = SettingForFigRemaker;
  if (v56)
    goto LABEL_13;
  FigCFDictionaryGetInt64IfPresent();
LABEL_8:
  if (!v56)
  {
    v57 = v54.duration;
    epoch = v54.duration.epoch;
    *(_OWORD *)v9 = *(_OWORD *)&v54.duration.value;
LABEL_15:
    *(_QWORD *)(v9 + 16) = epoch;
    goto LABEL_16;
  }
LABEL_13:
  if (FigCFEqual())
  {
    v22 = *(_QWORD *)a1;
    v23 = v56;
    *(_OWORD *)&start.start.value = v47;
    start.start.epoch = v6;
    TotalByteRateOfAllAssetTracks = figAssetExportSession_getTotalByteRateOfAllAssetTracks(v22);
    CMTimeMakeWithSeconds(&start.start, (float)((float)(v23 - 30720) * 0.99) / TotalByteRateOfAllAssetTracks, 1000000);
    *(_OWORD *)v9 = *(_OWORD *)&start.start.value;
    epoch = start.start.epoch;
    goto LABEL_15;
  }
  if (figAssetExportSession_hasVideoTrack(*(_QWORD *)a1))
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(v10, CFSTR("Video"));
    v29 = (uint64_t)Value;
    if (Value)
    {
      if (!CFDictionaryGetValue(Value, CFSTR("videoCodec")))
        goto LABEL_16;
      *(_OWORD *)&start.start.value = v46;
      start.start.epoch = v3;
      v49 = 0.0;
      v48 = 0;
      v30 = figAssetExportSession_copyFormatDescriptionsOfSourceVideoTrack(*(_QWORD *)a1, v50);
      figAssetExportSession_createProfileLevel(*(_QWORD *)(a1 + 56), v29, v30, &v48);
      VideoEncoderSpecification = figAssetExportSession_createVideoEncoderSpecification(*(const void **)(a1 + 80), (const __CFDictionary *)v29, v48);
      v32 = *(_QWORD *)a1;
      v33 = *(_QWORD *)(a1 + 56);
      duration = *(CMTime *)(a1 + 88);
      figAssetExportSession_getDestinationFrameDurationAndExpectedFrameRate(v32, v50, v33, v29, &duration, (uint64_t)&start, &v49);
      UntransformedSourceDimension = FigAssetExportSession_getUntransformedSourceDimension(*(_QWORD *)a1, v50, *(CGSize **)(a1 + 56));
      v36 = v35;
      v37 = figAssetExportSession_copySourceTransferFunction(*(_QWORD *)a1, v50, *(_QWORD *)(a1 + 56));
      AverageVideoBitRateForSourceAndPreset = figAssetExportSession_getAverageVideoBitRateForSourceAndPreset(*(_QWORD *)a1, v50, *(_QWORD *)(a1 + 64), v29, UntransformedSourceDimension, v36, v49);
      v39 = AverageVideoBitRateForSourceAndPreset + 7;
      if (AverageVideoBitRateForSourceAndPreset >= 0)
        v39 = AverageVideoBitRateForSourceAndPreset;
      v29 = (uint64_t)v39 >> 3;
      if (FigCFEqual())
      {
        v29 = (uint64_t)((double)(int)v29 * 1.6);
      }
      else
      {
        isHEVCHDRPreset = figAssetExportSession_isHEVCHDRPreset();
        if (v30)
        {
          if (isHEVCHDRPreset)
          {
            PreferredFormatDescription = FigExportSettingsGetPreferredFormatDescription(v30);
            if (FigExportSettingsGetHDRType(PreferredFormatDescription) == 20 && v49 > 0.0)
              v29 = (uint64_t)(float)((float)(int)v29 + (float)(v49 * 430.0));
          }
        }
      }
    }
    else
    {
      v37 = 0;
      v30 = 0;
      VideoEncoderSpecification = 0;
    }
  }
  else
  {
    v37 = 0;
    v30 = 0;
    VideoEncoderSpecification = 0;
    v29 = 0;
  }
  if (figAssetExportSession_hasAudioTrack(*(_QWORD *)a1))
  {
    v40 = (const __CFDictionary *)CFDictionaryGetValue(v10, CFSTR("Audio"));
    v41 = figAssetExportSession_computeAudioByteRate(*(_QWORD *)a1, v40, *(unsigned __int8 *)(a1 + 128), *(_DWORD *)(a1 + 124));
  }
  else
  {
    v41 = 0;
  }
  if (v41 + v29 < 1)
  {
    *a2 = figAssetExportSession_createCFError(-16976, "Incompatible preset for source asset.");
    *(_OWORD *)&v57.value = v46;
    v57.epoch = v3;
  }
  else if (v56 < 30721)
  {
    *(_OWORD *)&v57.value = v47;
    v57.epoch = v6;
  }
  else
  {
    CMTimeMakeWithSeconds(&v57, (float)((float)((float)(v56 - 30720) * 0.99) / (float)(v41 + v29)), 1000000);
    start.start = v57;
    duration = v54.duration;
    if (CMTimeCompare(&start.start, &duration) >= 1)
      v57 = v54.duration;
  }
  *(_OWORD *)v9 = *(_OWORD *)&v57.value;
  *(_QWORD *)(a1 + 148) = v57.epoch;
  if (v37)
    CFRelease(v37);
  if (v30)
    CFRelease(v30);
  if (VideoEncoderSpecification)
    CFRelease(VideoEncoderSpecification);
LABEL_16:
  v25 = 0;
  CFError = *a2;
  if (*a2)
    return CFErrorGetCode(CFError);
  return v25;
}

void figAssetExportSession_completeEstimateMaximumDurationTask(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t, __int128 *, uint64_t);
  const void *v5;
  const void *v6;
  __int128 v7;
  uint64_t v8;

  v4 = *(void (**)(uint64_t, __int128 *, uint64_t))(a1 + 160);
  v3 = *(_QWORD *)(a1 + 168);
  v7 = *(_OWORD *)(a1 + 132);
  v8 = *(_QWORD *)(a1 + 148);
  v4(v3, &v7, a2);
  v5 = *(const void **)(a1 + 64);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 56);
  if (v6)
    CFRelease(v6);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
}

void figAssetExportSession_runTaskAfterLoadingRequiredAssetProperties(void *a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 432), a1, (dispatch_function_t)figAssetExportSession_runTaskAfterLoadingRequiredAssetPropertiesDispatched);
}

uint64_t FigAssetExportSessionGetEstimatedOutputFileLength(void *a1, CMTime *a2, uint64_t a3, uint64_t *a4)
{
  const __CFDictionary *v7;
  CMTime v9;
  uint64_t v10;
  uint64_t v11;

  if (a4)
  {
    *a4 = 0;
    if ((a2->flags & 0x1D) != 1 || !figAssetExportSession_isOutputEstimateSupported((uint64_t)a1, 0))
      return 0;
    v7 = (const __CFDictionary *)FigExportSettingsForExportPreset(a1);
    if (v7)
    {
      v10 = 0;
      v11 = 0;
      figAssetExportSession_computeAudioVideoByteRate(v7, 0, &v11, &v10);
      v9 = *a2;
      *a4 = figAssetExportSession_getEstimatedFileLengthWithOverhead(&v9, v11, v10);
      return 0;
    }
  }
  return FigSignalErrorAt();
}

BOOL figAssetExportSession_isOutputEstimateSupported(uint64_t a1, int a2)
{
  int v3;

  v3 = FigCFEqual();
  return (a2 || !v3)
      && !FigCFEqual()
      && !FigCFEqual()
      && !FigCFEqual()
      && !FigCFEqual()
      && !FigCFEqual();
}

uint64_t figAssetExportSession_computeAudioVideoByteRate(const __CFDictionary *a1, int a2, uint64_t *a3, uint64_t *a4)
{
  const __CFDictionary *Value;
  const void *v9;
  uint64_t result;

  Value = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("Video"));
  v9 = CFDictionaryGetValue(a1, CFSTR("Audio"));
  *a3 = 0;
  *a4 = 0;
  if (Value)
  {
    result = (uint64_t)CFDictionaryGetValue(Value, CFSTR("videoCodec"));
    if (!result)
      return result;
    *a3 = figAssetExportSession_computeVideoTrackByteRate((uint64_t)Value, a2);
  }
  result = figAssetExportSession_computeAudioTrackByteRate((uint64_t)v9, a2);
  *a4 = result;
  return result;
}

uint64_t figAssetExportSession_getEstimatedFileLengthWithOverhead(CMTime *a1, uint64_t a2, uint64_t a3)
{
  CMTime v4;

  if (a2 < 0 || a3 < 0)
  {
    FigSignalErrorAt();
  }
  else if (a3 + a2)
  {
    v4 = *a1;
    return (uint64_t)(CMTimeGetSeconds(&v4) * (double)(a3 + a2) / 0.99000001 + 30720.0);
  }
  return 0;
}

uint64_t FigAssetExportSessionEstimateOutputFileLengthWithCompletionHandler(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  __CFArray *Mutable;
  __CFArray *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  CFTypeRef v13;
  __int128 v14;
  __int128 v15;
  CFTypeRef v16;
  CFTypeRef v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v23;

  v23 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    if (a2)
    {
      v7 = DerivedStorage;
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      if (Mutable)
      {
        v9 = Mutable;
        CFArrayAppendValue(Mutable, CFSTR("assetProperty_Tracks"));
        CFArrayAppendValue(v9, CFSTR("assetProperty_FormatReader"));
        CFArrayAppendValue(v9, CFSTR("assetProperty_TrackReferences"));
        v10 = FigAssetExportSessionTaskCreate(a1, v9, (uint64_t)figAssetExportSession_estimateOutputFileLengthDeferred, (uint64_t)figAssetExportSession_completeEstimateOutputFileLengthTask, 0xA0uLL, &v23);
        v11 = v23;
        if ((_DWORD)v10)
        {
          v21 = v10;
          if (!v23)
            goto LABEL_13;
        }
        else
        {
          v12 = v23[6];
          v13 = *(CFTypeRef *)(v7 + 16);
          if (v13)
            v13 = CFRetain(v13);
          *(_QWORD *)v12 = v13;
          v14 = *(_OWORD *)(v7 + 208);
          v15 = *(_OWORD *)(v7 + 224);
          *(_OWORD *)(v12 + 40) = *(_OWORD *)(v7 + 240);
          *(_OWORD *)(v12 + 24) = v15;
          *(_OWORD *)(v12 + 8) = v14;
          v16 = *(CFTypeRef *)(v7 + 184);
          if (v16)
            v16 = CFRetain(v16);
          *(_QWORD *)(v12 + 56) = v16;
          v17 = *(CFTypeRef *)(v7 + 72);
          if (v17)
            v17 = CFRetain(v17);
          v19 = *(_QWORD *)(v7 + 320);
          v18 = *(_QWORD *)(v7 + 328);
          *(_QWORD *)(v12 + 64) = v17;
          *(_QWORD *)(v12 + 72) = v18;
          *(_QWORD *)(v12 + 80) = v19;
          v20 = *(_QWORD *)(v7 + 272);
          *(_OWORD *)(v12 + 88) = *(_OWORD *)(v7 + 256);
          *(_QWORD *)(v12 + 104) = v20;
          *(_QWORD *)(v12 + 112) = v7 + 80;
          *(_DWORD *)(v12 + 124) = *(_DWORD *)(v7 + 344);
          *(_BYTE *)(v12 + 128) = *(_QWORD *)(v7 + 176) != 0;
          *(_BYTE *)(v12 + 120) = *(_BYTE *)(v7 + 98);
          *(_QWORD *)(v12 + 136) = 0;
          *(_QWORD *)(v12 + 144) = a2;
          *(_QWORD *)(v12 + 152) = a3;
          figAssetExportSession_runTaskAfterLoadingRequiredAssetProperties(v11);
          v21 = 0;
        }
        CFRelease(v11);
LABEL_13:
        CFRelease(v9);
        return v21;
      }
    }
  }
  return FigSignalErrorAt();
}

CFIndex figAssetExportSession_estimateOutputFileLengthDeferred(uint64_t a1, __CFError **a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  double TotalByteRateOfAllAssetTracks;
  uint64_t TypeID;
  uint64_t v9;
  int v10;
  uint64_t DefaultSourceVideoTrackFromAsset;
  uint64_t v12;
  CGSize *v13;
  __CFString *v14;
  uint64_t v15;
  const void **v16;
  uint64_t SettingForFigRemaker;
  const __CFDictionary *Value;
  uint64_t v19;
  const __CFArray *v20;
  __CFDictionary *VideoEncoderSpecification;
  uint64_t v22;
  uint64_t v23;
  double UntransformedSourceDimension;
  double v25;
  double v26;
  CFTypeRef v27;
  int AverageVideoBitRateForSourceAndPreset;
  int v29;
  const __CFDictionary *v30;
  uint64_t v31;
  __CFError *CFError;
  int isHEVCHDRPreset;
  const __CFArray *PreferredFormatDescription;
  const char *v36;
  const char *v37;
  int v38;
  const void *v39;
  float v40;
  unsigned int v41;
  CMTimeRange start;
  CMTimeRange otherRange;
  CMTimeRange v44;
  CMTime v45;
  CMTime duration;

  if (!a2)
  {
    SettingForFigRemaker = 4294950325;
    FigSignalErrorAt();
    return SettingForFigRemaker;
  }
  *a2 = 0;
  *(_QWORD *)(a1 + 136) = 0;
  memset(&v45, 0, sizeof(v45));
  figAssetExportSession_getAssetDuration(*(_QWORD *)a1, &v45);
  memset(&v44, 0, sizeof(v44));
  *(_OWORD *)&start.start.value = *MEMORY[0x1E0CA2E68];
  start.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  duration = v45;
  CMTimeRangeMake(&otherRange, &start.start, &duration);
  v4 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)&start.start.value = *(_OWORD *)(a1 + 8);
  *(_OWORD *)&start.start.epoch = v4;
  *(_OWORD *)&start.duration.timescale = *(_OWORD *)(a1 + 40);
  CMTimeRangeGetIntersection(&v44, &start, &otherRange);
  if (**(_QWORD **)(a1 + 112))
    v5 = **(_QWORD **)(a1 + 112);
  else
    v5 = *(_QWORD *)(a1 + 64);
  if (!figAssetExportSession_isOutputEstimateSupported(v5, 1))
  {
    v36 = "Unable to estimate for this preset.";
LABEL_39:
    CFError = figAssetExportSession_createCFError(-17391, v36);
    SettingForFigRemaker = 0;
    goto LABEL_43;
  }
  if (FigCFEqual())
  {
    v6 = *(_QWORD *)a1;
    start = v44;
    TotalByteRateOfAllAssetTracks = figAssetExportSession_getTotalByteRateOfAllAssetTracks(v6);
    duration = start.duration;
    *(_QWORD *)(a1 + 136) = (uint64_t)(TotalByteRateOfAllAssetTracks * CMTimeGetSeconds(&duration));
    goto LABEL_28;
  }
  v41 = 0;
  TypeID = FigRemakerGetTypeID();
  v9 = *(_QWORD *)a1;
  v10 = figAssetExportSession_IsAlphaPreset(*(void **)(a1 + 64));
  DefaultSourceVideoTrackFromAsset = remakerFamily_GetDefaultSourceVideoTrackFromAsset(TypeID, v9, v10, *(unsigned __int8 *)(a1 + 120), &v41);
  if ((_DWORD)DefaultSourceVideoTrackFromAsset)
  {
    SettingForFigRemaker = DefaultSourceVideoTrackFromAsset;
    v37 = "Unable to select default video track for this asset.";
    v38 = -16976;
LABEL_42:
    CFError = figAssetExportSession_createCFError(v38, v37);
LABEL_43:
    *a2 = CFError;
    if (!CFError)
      return SettingForFigRemaker;
    return CFErrorGetCode(CFError);
  }
  v12 = *(_QWORD *)a1;
  v13 = *(CGSize **)(a1 + 56);
  v14 = *(__CFString **)(a1 + 64);
  v15 = *(_QWORD *)(a1 + 72);
  v16 = *(const void ***)(a1 + 112);
  start = v44;
  SettingForFigRemaker = (uint64_t)figAssetExportSession_getSettingForFigRemaker(v12, v41, (__int128 *)&start.start.value, v13, v14, v15, v16);
  if (!SettingForFigRemaker)
  {
    v37 = "Unable to find export settings for this preset.";
    v38 = -16971;
    goto LABEL_42;
  }
  if (figAssetExportSession_hasVideoTrack(*(_QWORD *)a1))
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)SettingForFigRemaker, CFSTR("Video"));
    v19 = (uint64_t)Value;
    if (Value)
    {
      if (CFDictionaryGetValue(Value, CFSTR("videoCodec")))
      {
        *(_OWORD *)&start.start.value = *MEMORY[0x1E0CA2E18];
        start.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
        v40 = 0.0;
        v39 = 0;
        v20 = figAssetExportSession_copyFormatDescriptionsOfSourceVideoTrack(*(_QWORD *)a1, v41);
        figAssetExportSession_createProfileLevel(*(_QWORD *)(a1 + 56), v19, v20, &v39);
        VideoEncoderSpecification = figAssetExportSession_createVideoEncoderSpecification(*(const void **)(a1 + 80), (const __CFDictionary *)v19, v39);
        v22 = *(_QWORD *)a1;
        v23 = *(_QWORD *)(a1 + 56);
        duration = *(CMTime *)(a1 + 88);
        figAssetExportSession_getDestinationFrameDurationAndExpectedFrameRate(v22, v41, v23, v19, &duration, (uint64_t)&start, &v40);
        UntransformedSourceDimension = FigAssetExportSession_getUntransformedSourceDimension(*(_QWORD *)a1, v41, *(CGSize **)(a1 + 56));
        v26 = v25;
        v27 = figAssetExportSession_copySourceTransferFunction(*(_QWORD *)a1, v41, *(_QWORD *)(a1 + 56));
        AverageVideoBitRateForSourceAndPreset = figAssetExportSession_getAverageVideoBitRateForSourceAndPreset(*(_QWORD *)a1, v41, *(_QWORD *)(a1 + 64), v19, UntransformedSourceDimension, v26, v40);
        v29 = AverageVideoBitRateForSourceAndPreset + 7;
        if (AverageVideoBitRateForSourceAndPreset >= 0)
          v29 = AverageVideoBitRateForSourceAndPreset;
        v19 = (uint64_t)v29 >> 3;
        if (FigCFEqual())
        {
          v19 = (uint64_t)((double)(int)v19 * 1.6);
        }
        else
        {
          isHEVCHDRPreset = figAssetExportSession_isHEVCHDRPreset();
          if (v20)
          {
            if (isHEVCHDRPreset)
            {
              PreferredFormatDescription = FigExportSettingsGetPreferredFormatDescription(v20);
              if (FigExportSettingsGetHDRType(PreferredFormatDescription) == 20 && v40 > 0.0)
                v19 = (uint64_t)(float)((float)(int)v19 + (float)(v40 * 430.0));
            }
          }
        }
        goto LABEL_19;
      }
      v36 = "Unable to estimate for pass-through video track.";
      goto LABEL_39;
    }
    v27 = 0;
    v20 = 0;
    VideoEncoderSpecification = 0;
  }
  else
  {
    v27 = 0;
    v20 = 0;
    VideoEncoderSpecification = 0;
    v19 = 0;
  }
LABEL_19:
  if (figAssetExportSession_hasAudioTrack(*(_QWORD *)a1))
  {
    v30 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)SettingForFigRemaker, CFSTR("Audio"));
    v31 = figAssetExportSession_computeAudioByteRate(*(_QWORD *)a1, v30, *(unsigned __int8 *)(a1 + 128), *(_DWORD *)(a1 + 124));
  }
  else
  {
    v31 = 0;
  }
  start.start = v44.duration;
  *(_QWORD *)(a1 + 136) = figAssetExportSession_getEstimatedFileLengthWithOverhead(&start.start, v19, v31);
  if (v27)
    CFRelease(v27);
  if (v20)
    CFRelease(v20);
  if (VideoEncoderSpecification)
    CFRelease(VideoEncoderSpecification);
LABEL_28:
  SettingForFigRemaker = 0;
  CFError = *a2;
  if (*a2)
    return CFErrorGetCode(CFError);
  return SettingForFigRemaker;
}

void figAssetExportSession_completeEstimateOutputFileLengthTask(uint64_t a1, uint64_t a2)
{
  const void *v3;
  const void *v4;

  (*(void (**)(_QWORD, _QWORD, uint64_t))(a1 + 144))(*(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 136), a2);
  v3 = *(const void **)(a1 + 64);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 56);
  if (v4)
    CFRelease(v4);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
}

uint64_t FigAssetExportSessionGetAllPresets()
{
  if (FigAssetExportSessionGetAllPresets_onceToken != -1)
    dispatch_once_f(&FigAssetExportSessionGetAllPresets_onceToken, &FigAssetExportSessionGetAllPresets_sAllPresets, (dispatch_function_t)figAssetExportSession_CreateAllPresetsOnce);
  return FigAssetExportSessionGetAllPresets_sAllPresets;
}

void figAssetExportSession_CreateAllPresetsOnce(CFArrayRef *a1)
{
  const __CFAllocator *v2;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  const __CFArray *v6;
  const __CFArray *v7;
  const CFSetCallBacks *v8;
  CFSetRef v9;
  const __CFArray *Mutable;
  BOOL v11;
  CFRange v13;
  CFRange v14;
  CFIndex Count;
  const __CFArray *v16;
  const __CFArray *MutableCopy;
  __CFArray *v18;
  const __CFAllocator *AllocatorForPermanentAllocations;
  const __CFAllocator *v20;
  CFTypeRef cf;
  CFTypeRef v22;
  CFArrayRef theArray;
  const void *__dst[35];
  CFRange v25;
  CFRange v26;

  __dst[34] = *(const void **)MEMORY[0x1E0C80C00];
  cf = 0;
  v22 = 0;
  theArray = 0;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = MEMORY[0x19402DAA0](*MEMORY[0x1E0C9AE00], CFSTR("com.apple.MediaToolbox"), CFSTR("AVAssetExportPresetsBase.plist"));
  v4 = MEMORY[0x19402DAA0](v2, CFSTR("com.apple.MediaToolbox"), CFSTR("AVAssetExportPresets.plist"));
  if (!(v3 | v4))
    goto LABEL_29;
  v5 = (const void *)v4;
  memcpy(__dst, off_1E2FB8A98, 0x110uLL);
  v6 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
  v7 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
  v8 = (const CFSetCallBacks *)MEMORY[0x1E0C9B3B0];
  cf = CFSetCreateMutable(v2, 0, MEMORY[0x1E0C9B3B0]);
  v9 = CFSetCreate(v2, __dst, 34, v8);
  v22 = v9;
  Mutable = CFArrayCreateMutable(v2, 0, MEMORY[0x1E0C9B378]);
  theArray = Mutable;
  if (cf)
    v11 = v9 == 0;
  else
    v11 = 1;
  if (v11 || Mutable == 0)
  {
    FigSignalErrorAt();
    if (!v3)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (v6)
    v13.length = CFArrayGetCount(v6);
  else
    v13.length = 0;
  v13.location = 0;
  CFArrayApplyFunction(v6, v13, (CFArrayApplierFunction)figAssetExportSession_FilterSPIPresets, &cf);
  if (v7)
    v14.length = CFArrayGetCount(v7);
  else
    v14.length = 0;
  v14.location = 0;
  CFArrayApplyFunction(v7, v14, (CFArrayApplierFunction)figAssetExportSession_FilterSPIPresets, &cf);
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    v16 = theArray;
  }
  else
  {
    v16 = 0;
    Count = 0;
  }
  MutableCopy = CFArrayCreateMutableCopy(v2, Count, v16);
  v18 = MutableCopy;
  if (MutableCopy)
  {
    v25.length = CFArrayGetCount(MutableCopy);
    v25.location = 0;
    CFArraySortValues(v18, v25, (CFComparatorFunction)figAssetExportSession_StringArrayNumericalComparatorFunction, 0);
    AllocatorForPermanentAllocations = (const __CFAllocator *)FigGetAllocatorForPermanentAllocations();
    *a1 = CFArrayCreateCopy(AllocatorForPermanentAllocations, v18);
    CFRelease(v18);
    if (!v3)
      goto LABEL_23;
    goto LABEL_22;
  }
  v26.location = 0;
  v26.length = 0;
  CFArraySortValues(0, v26, (CFComparatorFunction)figAssetExportSession_StringArrayNumericalComparatorFunction, 0);
  v20 = (const __CFAllocator *)FigGetAllocatorForPermanentAllocations();
  *a1 = CFArrayCreateCopy(v20, 0);
  if (v3)
LABEL_22:
    CFRelease((CFTypeRef)v3);
LABEL_23:
  if (v5)
    CFRelease(v5);
  if (v6)
    CFRelease(v6);
  if (v7)
    CFRelease(v7);
LABEL_29:
  if (cf)
    CFRelease(cf);
  if (v22)
    CFRelease(v22);
  if (theArray)
    CFRelease(theArray);
}

uint64_t FigAssetExportSessionExportAsynchronously(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  return v6(a1, a2, a3);
}

uint64_t FigAssetExportSessionCancelExport(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);

  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  return v2(a1);
}

uint64_t FigAssetExportSessionDetermineCompatibleFileTypes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  return v6(a1, a2, a3);
}

uint64_t FigAssetExportSessionCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v8)
    return v8(a1, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigAssetExportSessionSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v6)
    return v6(a1, a2, a3);
  else
    return 4294954514;
}

void *FigAssetExportSessionProperty_GetAudioMix_CFDictionaryValueCallBacks()
{
  return &kFigAssetExportSessionProperty_AudioMix_CFDictionaryValueCallBacks;
}

void FigAssetExportSession_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v4;
  uint64_t FigBaseObject;
  uint64_t v6;
  void (*v7)(uint64_t);
  const void *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A35C0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  if (*(_QWORD *)(DerivedStorage + 432) && _FigIsNotCurrentDispatchQueue())
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 432), 0, (dispatch_function_t)figAssetExportSession_EmptyWait);
  v4 = *(_QWORD *)(DerivedStorage + 40);
  if (v4)
  {
    figAssetExportSession_removeListeners(v4);
    if (_FigIsNotCurrentDispatchQueue())
      dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 424), 0, (dispatch_function_t)figAssetExportSession_EmptyWait);
    FigReadWriteLockLockForWrite();
    FigBaseObject = FigRemakerGetFigBaseObject(*(_QWORD *)(DerivedStorage + 40));
    if (FigBaseObject)
    {
      v6 = FigBaseObject;
      v7 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v7)
        v7(v6);
    }
    CFRelease(*(CFTypeRef *)(DerivedStorage + 40));
    *(_QWORD *)(DerivedStorage + 40) = 0;
    FigReadWriteLockUnlockForWrite();
  }
  if (*(_BYTE *)(DerivedStorage + 97))
  {
    FigReadWriteLockLockForWrite();
    figAssetExportSession_releaseSegmentResources(a1);
    FigReadWriteLockUnlockForWrite();
    v8 = *(const void **)(DerivedStorage + 136);
    if (v8)
      CFRelease(v8);
  }
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
  FigReadWriteLockDestroy();
  v9 = *(NSObject **)(DerivedStorage + 424);
  if (v9)
    dispatch_release(v9);
  v10 = *(NSObject **)(DerivedStorage + 432);
  if (v10)
    dispatch_release(v10);
  v11 = *(NSObject **)(DerivedStorage + 304);
  if (v11)
    dispatch_release(v11);
  v12 = *(const void **)(DerivedStorage + 184);
  if (v12)
    CFRelease(v12);
  v13 = *(const void **)(DerivedStorage + 56);
  if (v13)
    CFRelease(v13);
  v14 = *(const void **)(DerivedStorage + 64);
  if (v14)
    CFRelease(v14);
  v15 = *(const void **)(DerivedStorage + 16);
  if (v15)
    CFRelease(v15);
  v16 = *(const void **)(DerivedStorage + 72);
  if (v16)
    CFRelease(v16);
  v17 = *(const void **)(DerivedStorage + 80);
  if (v17)
    CFRelease(v17);
  v18 = *(const void **)(DerivedStorage + 88);
  if (v18)
    CFRelease(v18);
  v19 = *(const void **)(DerivedStorage + 144);
  if (v19)
    CFRelease(v19);
  v20 = *(const void **)(DerivedStorage + 160);
  if (v20)
    CFRelease(v20);
  v21 = *(const void **)(DerivedStorage + 168);
  if (v21)
    CFRelease(v21);
  v22 = *(const void **)(DerivedStorage + 192);
  if (v22)
    CFRelease(v22);
  v23 = *(const void **)(DerivedStorage + 200);
  if (v23)
    CFRelease(v23);
  v24 = *(const void **)(DerivedStorage + 176);
  if (v24)
    CFRelease(v24);
  v25 = *(const void **)(DerivedStorage + 288);
  if (v25)
    CFRelease(v25);
  v26 = *(const void **)(DerivedStorage + 400);
  if (v26)
    CFRelease(v26);
  v27 = *(const void **)(DerivedStorage + 416);
  if (v27)
    CFRelease(v27);
  v28 = *(const void **)(DerivedStorage + 352);
  if (v28)
    CFRelease(v28);
}

__CFString *exportSession_CopyDebugDescription(uint64_t a1)
{
  _QWORD *DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigAssetExportSession %p,  asset = %@, presetName = %@, outputFileType = %@>"), a1, DerivedStorage[2], DerivedStorage[9], DerivedStorage[18]);
  return Mutable;
}

uint64_t figAssetExportSession_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  const void *v8;
  uint64_t SInt64;
  uint64_t v10;
  uint64_t result;
  uint64_t SInt32;
  const void *v13;
  const void *v14;
  const void *v15;
  const __CFArray *Value;
  CFArrayRef v17;
  __int128 v18;
  void *v19;
  CMTimeRange *p_range;
  uint64_t v21;
  void *v22;
  int v23;
  uint64_t *v24;
  __int128 v25;
  CMTimeEpoch epoch;
  CMTimeRange range;

  if (!a1 || !a2 || !a4)
    return FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(CFSTR("kFigAssetExportSessionProperty_PresetName"), a2))
  {
    v8 = *(const void **)(DerivedStorage + 72);
    if (!v8)
      goto LABEL_74;
    goto LABEL_15;
  }
  if (CFEqual(CFSTR("kFigAssetExportSessionProperty_Asset"), a2))
  {
    v8 = *(const void **)(DerivedStorage + 16);
    if (!v8)
      goto LABEL_74;
    goto LABEL_15;
  }
  if (CFEqual(CFSTR("kFigAssetExportSessionProperty_OutputFileType"), a2))
  {
    v8 = *(const void **)(DerivedStorage + 144);
    if (!v8)
      goto LABEL_74;
    goto LABEL_15;
  }
  if (CFEqual(CFSTR("kFigAssetExportSessionProperty_OutputURL"), a2))
  {
    v8 = *(const void **)(DerivedStorage + 88);
    if (v8)
    {
LABEL_15:
      SInt64 = (uint64_t)CFRetain(v8);
LABEL_16:
      v10 = SInt64;
LABEL_75:
      result = 0;
      goto LABEL_76;
    }
LABEL_74:
    v10 = 0;
    goto LABEL_75;
  }
  if (CFEqual(CFSTR("kFigAssetExportSessionProperty_ShouldOptimizeForNetworkUse"), a2))
  {
    result = 0;
    v10 = *(_QWORD *)(DerivedStorage + 384);
LABEL_76:
    *a4 = v10;
    return result;
  }
  if (CFEqual(CFSTR("kFigAssetExportSessionProperty_PreserveSyncFrames"), a2))
  {
    result = 0;
    v10 = *(_QWORD *)(DerivedStorage + 312);
    goto LABEL_76;
  }
  if (CFEqual(CFSTR("kFigAssetExportSessionProperty_UseHardwareVideoEncoderIfAvailable"), a2))
  {
    result = 0;
    v10 = *(_QWORD *)(DerivedStorage + 320);
    goto LABEL_76;
  }
  if (CFEqual(CFSTR("kFigAssetExportSessionProperty_Status"), a2))
  {
    FigReadWriteLockLockForRead();
    SInt32 = FigCFNumberCreateSInt32();
    FigReadWriteLockUnlockForRead();
    if (!SInt32)
      return FigSignalErrorAt();
LABEL_36:
    result = 0;
    *a4 = SInt32;
    return result;
  }
  if (CFEqual(CFSTR("kFigAssetExportSessionProperty_Error"), a2))
  {
    FigReadWriteLockLockForRead();
    v13 = *(const void **)(DerivedStorage + 56);
    if (v13)
      SInt32 = (uint64_t)CFRetain(v13);
    else
      SInt32 = 0;
    FigReadWriteLockUnlockForRead();
    goto LABEL_36;
  }
  if (CFEqual(CFSTR("kFigAssetExportSessionProperty_Progress"), a2))
  {
    figAssetExportSession_updateProgress(DerivedStorage);
    v14 = *(const void **)(DerivedStorage + 64);
    if (v14)
    {
      SInt64 = (uint64_t)CFRetain(v14);
      if (SInt64)
        goto LABEL_16;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(CFSTR("kFigAssetExportSessionProperty_SupportedFileTypes"), a2))
  {
    if (figAssetExportSession_GetPresetToUTTypesMap_onceToken != -1)
      dispatch_once_f(&figAssetExportSession_GetPresetToUTTypesMap_onceToken, &figAssetExportSession_GetPresetToUTTypesMap__gUTTypesForPresets, (dispatch_function_t)figAssetExportSession_CreateUTTypesForPresetOnce);
    if (!figAssetExportSession_GetPresetToUTTypesMap__gUTTypesForPresets)
      return FigSignalErrorAt();
    if (*(_QWORD *)(DerivedStorage + 80))
      v15 = *(const void **)(DerivedStorage + 80);
    else
      v15 = *(const void **)(DerivedStorage + 72);
    Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)figAssetExportSession_GetPresetToUTTypesMap__gUTTypesForPresets, v15);
    if (Value)
    {
      v17 = Value;
      CFRetain(Value);
    }
    else
    {
      v17 = CFArrayCreate(a3, 0, 0, MEMORY[0x1E0C9B378]);
      if (!v17)
        return FigSignalErrorAt();
    }
    result = 0;
    *a4 = v17;
    return result;
  }
  if (CFEqual(CFSTR("kFigAssetExportSessionProperty_TimeRange"), a2))
  {
    v18 = *(_OWORD *)(DerivedStorage + 224);
    *(_OWORD *)&range.start.value = *(_OWORD *)(DerivedStorage + 208);
    *(_OWORD *)&range.start.epoch = v18;
    *(_OWORD *)&range.duration.timescale = *(_OWORD *)(DerivedStorage + 240);
    SInt64 = (uint64_t)CMTimeRangeCopyAsDictionary(&range, a3);
    if (SInt64)
      goto LABEL_16;
    return FigSignalErrorAt();
  }
  if (!CFEqual(CFSTR("kFigAssetExportSessionProperty_MaxDuration"), a2))
  {
    if (CFEqual(CFSTR("kFigAssetExportSessionProperty_FileLengthLimit"), a2))
    {
      SInt64 = FigCFNumberCreateSInt64();
      if (SInt64)
        goto LABEL_16;
    }
    else
    {
      if (CFEqual(CFSTR("kFigAssetExportSessionProperty_MaximizePowerEfficiency"), a2))
      {
        v8 = *(const void **)(DerivedStorage + 336);
        if (!v8)
          goto LABEL_74;
        goto LABEL_15;
      }
      if (CFEqual(CFSTR("kFigAssetExportSessionProperty_Metadata"), a2))
      {
        v8 = *(const void **)(DerivedStorage + 192);
        if (!v8)
          goto LABEL_74;
        goto LABEL_15;
      }
      if (CFEqual(CFSTR("kFigAssetExportSessionProperty_MetadataItemFilterWhitelist"), a2))
      {
        v8 = *(const void **)(DerivedStorage + 200);
        if (!v8)
          goto LABEL_74;
        goto LABEL_15;
      }
      if (CFEqual(CFSTR("kFigAssetExportSessionProperty_AudioMix"), a2))
      {
        v8 = *(const void **)(DerivedStorage + 176);
        if (v8)
          goto LABEL_15;
        goto LABEL_74;
      }
      if (CFEqual(CFSTR("kFigAssetExportSessionProperty_EstimatedOutputFileLength"), a2))
      {
        *(_QWORD *)&v25 = 0;
        if (*(_QWORD *)(DerivedStorage + 80))
          v22 = *(void **)(DerivedStorage + 80);
        else
          v22 = *(void **)(DerivedStorage + 72);
        *(_OWORD *)&range.start.value = *(_OWORD *)(DerivedStorage + 232);
        range.start.epoch = *(_QWORD *)(DerivedStorage + 248);
        result = FigAssetExportSessionGetEstimatedOutputFileLength(v22, &range.start, v21, (uint64_t *)&v25);
        if (!(_DWORD)result)
        {
          SInt64 = FigCFNumberCreateSInt64();
          if (SInt64)
            goto LABEL_16;
          return FigSignalErrorAt();
        }
        return result;
      }
      if (CFEqual(CFSTR("kFigAssetExportSessionProperty_AudioTimePitchAlgorithm"), a2))
      {
        v8 = *(const void **)(DerivedStorage + 168);
        if (v8)
          goto LABEL_15;
      }
      else
      {
        if (CFEqual(CFSTR("kFigAssetExportSessionProperty_CanPerformMultiplePassesOverSourceMediaData"), a2))
        {
          result = 0;
          v10 = *(_QWORD *)(DerivedStorage + 392);
          goto LABEL_76;
        }
        if (CFEqual(CFSTR("kFigAssetExportSessionProperty_DirectoryForTemporaryFiles"), a2))
        {
          v8 = *(const void **)(DerivedStorage + 400);
          if (!v8)
            goto LABEL_74;
          goto LABEL_15;
        }
        if (CFEqual(CFSTR("kFigAssetExportSessionProperty_MinVideoFrameDuration"), a2))
        {
          *(_OWORD *)&range.start.value = *(_OWORD *)(DerivedStorage + 256);
          range.start.epoch = *(_QWORD *)(DerivedStorage + 272);
          p_range = &range;
LABEL_58:
          SInt64 = (uint64_t)CMTimeCopyAsDictionary(&p_range->start, a3);
          if (SInt64)
            goto LABEL_16;
          return FigSignalErrorAt();
        }
        if (CFEqual(CFSTR("kFigAssetExportSessionProperty_VideoFrameRateConversionAlgorithm"), a2))
        {
          v8 = *(const void **)(DerivedStorage + 288);
          if (v8)
            goto LABEL_15;
        }
        else
        {
          if (!CFEqual(CFSTR("kFigAssetExportSessionProperty_AudioTrackGroupOutputHandling"), a2))
          {
            if (CFEqual(CFSTR("kFigAssetExportSessionProperty_AllowsParallelizedExport"), a2))
            {
              result = 0;
              v23 = *(unsigned __int8 *)(DerivedStorage + 96);
            }
            else
            {
              result = CFEqual(CFSTR("kFigAssetExportSessionProperty_EnableDecodeAppleOnlySWAV1"), a2);
              if (!(_DWORD)result)
                return result;
              result = 0;
              v23 = *(unsigned __int8 *)(DerivedStorage + 98);
            }
            if (v23)
              v24 = (uint64_t *)MEMORY[0x1E0C9AE50];
            else
              v24 = (uint64_t *)MEMORY[0x1E0C9AE40];
            v10 = *v24;
            goto LABEL_76;
          }
          SInt64 = FigCFNumberCreateSInt32();
          if (SInt64)
            goto LABEL_16;
        }
      }
    }
    return FigSignalErrorAt();
  }
  *(_OWORD *)&range.start.value = *MEMORY[0x1E0CA2E30];
  range.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E30] + 16);
  if (*(_QWORD *)(DerivedStorage + 80))
    v19 = *(void **)(DerivedStorage + 80);
  else
    v19 = *(void **)(DerivedStorage + 72);
  result = figAssetExportSession_maximumDuration(v19, *(_QWORD *)(DerivedStorage + 328), (uint64_t)&range);
  if (!(_DWORD)result)
  {
    v25 = *(_OWORD *)&range.start.value;
    epoch = range.start.epoch;
    p_range = (CMTimeRange *)&v25;
    goto LABEL_58;
  }
  return result;
}

uint64_t figAssetExportSession_SetProperty(uint64_t a1, const void *a2, const __CFString *a3)
{
  uint64_t DerivedStorage;
  int v7;
  CFAllocatorRef *v8;
  uint64_t (*v9)(uint64_t, const __CFString *, CFAllocatorRef, CMTimeRange *);
  uint64_t v10;
  CFTypeID v11;
  const __CFAllocator *v12;
  uint64_t (*v13)(uint64_t, const __CFString *, const __CFAllocator *, CMTimeRange *);
  uint64_t v14;
  CFIndex Count;
  CFIndex v16;
  _BOOL4 v17;
  CFTypeID v18;
  CFURLRef v19;
  const void *v20;
  const __CFString *v21;
  const void *v22;
  CFTypeID v23;
  CFIndex v24;
  CFIndex v25;
  int v26;
  CFStringRef Copy;
  CFTypeID v29;
  CFTypeID v30;
  CFTypeID v31;
  CFTypeID v32;
  __int128 v33;
  const void *v34;
  const __CFString *v35;
  CFTypeID v36;
  CFTypeID v37;
  CFArrayRef v38;
  CFTypeID v39;
  CFArrayRef v40;
  const void *v41;
  CFTypeID v42;
  CFTypeID v43;
  CFTypeID v44;
  CFTypeID v45;
  CFTypeID v46;
  CFTypeID v47;
  CFURLRef v48;
  const void *v49;
  CFTypeID v50;
  CFTypeID v51;
  CFStringRef v52;
  const void *v53;
  CFTypeID v54;
  CFTypeID v55;
  CFTypeID v56;
  CMTimeRange number;
  int valuePtr;

  if (a1 && a2)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v7 = CFEqual(CFSTR("kFigAssetExportSessionProperty_OutputFileType"), a2);
    v8 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    if (v7
      || CFEqual(CFSTR("kFigAssetExportSessionProperty_OutputURL"), a2)
      || CFEqual(CFSTR("kFigAssetExportSessionProperty_FileLengthLimit"), a2)
      || CFEqual(CFSTR("kFigAssetExportSessionProperty_MaximizePowerEfficiency"), a2)
      || CFEqual(CFSTR("kFigAssetExportSessionProperty_AudioTimePitchAlgorithm"), a2)
      || CFEqual(CFSTR("kFigAssetExportSessionProperty_CanPerformMultiplePassesOverSourceMediaData"), a2)
      || CFEqual(CFSTR("kFigAssetExportSessionProperty_DirectoryForTemporaryFiles"), a2)
      || CFEqual(CFSTR("kFigAssetExportSessionProperty_MinVideoFrameDuration"), a2)
      || CFEqual(CFSTR("kFigAssetExportSessionProperty_VideoFrameRateConversionAlgorithm"), a2)
      || CFEqual(CFSTR("kFigAssetExportSessionProperty_Metadata"), a2)
      || CFEqual(CFSTR("kFigAssetExportSessionProperty_MetadataItemFilterWhitelist"), a2)
      || CFEqual(CFSTR("kFigAssetExportSessionProperty_AudioMix"), a2)
      || CFEqual(CFSTR("kFigAssetExportSessionProperty_TimeRange"), a2)
      || CFEqual(CFSTR("kFigAssetExportSessionProperty_VideoComposition"), a2)
      || CFEqual(CFSTR("kFigAssetExportSessionProperty_PreserveSyncFrames"), a2)
      || CFEqual(CFSTR("kFigAssetExportSessionProperty_UseHardwareVideoEncoderIfAvailable"), a2)
      || CFEqual(CFSTR("kFigAssetExportSessionProperty_ShouldOptimizeForNetworkUse"), a2)
      || CFEqual(CFSTR("kFigAssetExportSessionProperty_EnableDecodeAppleOnlySWAV1"), a2)
      || CFEqual(CFSTR("kFigAssetExportSessionProperty_AudioTrackGroupOutputHandling"), a2)
      || CFEqual(CFSTR("kFigAssetExportSessionProperty_AllowsParallelizedExport"), a2))
    {
      valuePtr = 0;
      number.start.value = 0;
      v9 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                + 48);
      if (!v9)
        return 4294954514;
      v10 = v9(a1, CFSTR("kFigAssetExportSessionProperty_Status"), *v8, &number);
      if ((_DWORD)v10)
        return v10;
      CFNumberGetValue((CFNumberRef)number.start.value, kCFNumberSInt32Type, &valuePtr);
      CFRelease((CFTypeRef)number.start.value);
      if (valuePtr)
        return FigSignalErrorAt();
    }
    if (CFEqual(CFSTR("kFigAssetExportSessionProperty_OutputFileType"), a2))
    {
      if (!FigCFEqual())
      {
        if (!a3)
        {
          v14 = 0;
          v22 = *(const void **)(DerivedStorage + 144);
          *(_QWORD *)(DerivedStorage + 144) = 0;
          if (v22)
LABEL_64:
            CFRelease(v22);
LABEL_65:
          if (a3)
LABEL_66:
            CFRelease(a3);
          return v14;
        }
        number.start.value = 0;
        v11 = CFGetTypeID(a3);
        if (v11 == CFStringGetTypeID())
        {
          v12 = *v8;
          v13 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
          if (v13)
          {
            v14 = v13(a1, CFSTR("kFigAssetExportSessionProperty_SupportedFileTypes"), v12, &number);
            if (!number.start.value)
              return FigSignalErrorAt();
            Count = CFArrayGetCount((CFArrayRef)number.start.value);
            if (Count < 1)
            {
              v17 = 0;
            }
            else
            {
              v16 = Count;
              CFArrayGetValueAtIndex((CFArrayRef)number.start.value, 0);
              if (FigCFEqual())
              {
                v17 = 1;
              }
              else
              {
                v24 = 1;
                do
                {
                  v25 = v24;
                  if (v16 == v24)
                    break;
                  CFArrayGetValueAtIndex((CFArrayRef)number.start.value, v24);
                  v26 = FigCFEqual();
                  v24 = v25 + 1;
                }
                while (!v26);
                v17 = v25 < v16;
              }
            }
          }
          else
          {
            v17 = 0;
            v14 = 4294954514;
          }
          if (number.start.value)
          {
            CFRelease((CFTypeRef)number.start.value);
            if (!v17)
              return FigSignalErrorAt();
          }
          else if (!v17)
          {
            return FigSignalErrorAt();
          }
          Copy = CFStringCreateCopy(v12, a3);
          if (!Copy)
            return FigSignalErrorAt();
          a3 = Copy;
          v22 = *(const void **)(DerivedStorage + 144);
          *(_QWORD *)(DerivedStorage + 144) = Copy;
          CFRetain(Copy);
          if (v22)
            goto LABEL_64;
          goto LABEL_65;
        }
        return FigSignalErrorAt();
      }
      return 0;
    }
    if (CFEqual(CFSTR("kFigAssetExportSessionProperty_OutputURL"), a2))
    {
      if (FigCFEqual())
        return 0;
      if (!a3)
        return FigSignalErrorAt();
      v18 = CFGetTypeID(a3);
      if (v18 != CFURLGetTypeID())
        return FigSignalErrorAt();
      v19 = CFURLCopyAbsoluteURL((CFURLRef)a3);
      if (!v19)
        return FigSignalErrorAt();
      a3 = (const __CFString *)v19;
      v20 = *(const void **)(DerivedStorage + 88);
      *(_QWORD *)(DerivedStorage + 88) = v19;
      CFRetain(v19);
      if (v20)
        CFRelease(v20);
LABEL_43:
      v21 = a3;
LABEL_44:
      CFRelease(v21);
      return 0;
    }
    if (CFEqual(CFSTR("kFigAssetExportSessionProperty_ShouldOptimizeForNetworkUse"), a2))
    {
      if (!a3)
        return FigSignalErrorAt();
      v23 = CFGetTypeID(a3);
      if (v23 != CFBooleanGetTypeID())
        return FigSignalErrorAt();
      v14 = 0;
      *(_QWORD *)(DerivedStorage + 384) = a3;
      return v14;
    }
    if (CFEqual(CFSTR("kFigAssetExportSessionProperty_PreserveSyncFrames"), a2))
    {
      if (!a3)
        return FigSignalErrorAt();
      v29 = CFGetTypeID(a3);
      if (v29 != CFBooleanGetTypeID())
        return FigSignalErrorAt();
      v14 = 0;
      *(_QWORD *)(DerivedStorage + 312) = a3;
      return v14;
    }
    if (CFEqual(CFSTR("kFigAssetExportSessionProperty_UseHardwareVideoEncoderIfAvailable"), a2))
    {
      if (!a3)
        return FigSignalErrorAt();
      v30 = CFGetTypeID(a3);
      if (v30 != CFBooleanGetTypeID())
        return FigSignalErrorAt();
      v14 = 0;
      *(_QWORD *)(DerivedStorage + 320) = a3;
      return v14;
    }
    if (CFEqual(CFSTR("kFigAssetExportSessionProperty_Error"), a2))
    {
      if (a3)
      {
        v31 = CFGetTypeID(a3);
        if (v31 != CFErrorGetTypeID())
          return FigSignalErrorAt();
      }
      figAssetExportSession_DeliverParentExportNotification(DerivedStorage, 0, (uint64_t)CFSTR("kFigAssetExportSessionProperty_Error"));
      figAssetExportSession_DeliverParentExportNotification(DerivedStorage, 0, (uint64_t)CFSTR("kFigAssetExportSessionProperty_Status"));
      FigReadWriteLockLockForWrite();
      if (FigCFEqual())
      {
        FigReadWriteLockUnlockForWrite();
      }
      else
      {
        v34 = *(const void **)(DerivedStorage + 56);
        *(_QWORD *)(DerivedStorage + 56) = a3;
        if (a3)
          CFRetain(a3);
        if (v34)
          CFRelease(v34);
        if (*(_DWORD *)(DerivedStorage + 48) || !*(_QWORD *)(DerivedStorage + 56))
        {
          FigReadWriteLockUnlockForWrite();
          v35 = CFSTR("kFigAssetExportSessionProperty_Error");
        }
        else
        {
          *(_DWORD *)(DerivedStorage + 48) = 5;
          FigReadWriteLockUnlockForWrite();
          figAssetExportSession_DeliverParentExportNotification(DerivedStorage, 1, (uint64_t)CFSTR("kFigAssetExportSessionProperty_Error"));
          v35 = CFSTR("kFigAssetExportSessionProperty_Status");
        }
        figAssetExportSession_DeliverParentExportNotification(DerivedStorage, 1, (uint64_t)v35);
      }
      return 0;
    }
    if (CFEqual(CFSTR("kFigAssetExportSessionProperty_TimeRange"), a2))
    {
      if (!a3)
        return FigSignalErrorAt();
      v32 = CFGetTypeID(a3);
      if (v32 != CFDictionaryGetTypeID())
        return FigSignalErrorAt();
      CMTimeRangeMakeFromDictionary(&number, (CFDictionaryRef)a3);
      v14 = 0;
      v33 = *(_OWORD *)&number.start.epoch;
      *(_OWORD *)(DerivedStorage + 208) = *(_OWORD *)&number.start.value;
      *(_OWORD *)(DerivedStorage + 224) = v33;
      *(_OWORD *)(DerivedStorage + 240) = *(_OWORD *)&number.duration.timescale;
      return v14;
    }
    if (CFEqual(CFSTR("kFigAssetExportSessionProperty_FileLengthLimit"), a2))
    {
      if (!a3)
        return FigSignalErrorAt();
      v36 = CFGetTypeID(a3);
      if (v36 != CFNumberGetTypeID())
        return FigSignalErrorAt();
      CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt64Type, (void *)(DerivedStorage + 328));
      return 0;
    }
    if (CFEqual(CFSTR("kFigAssetExportSessionProperty_MaximizePowerEfficiency"), a2))
    {
      if (!a3)
        return FigSignalErrorAt();
      v37 = CFGetTypeID(a3);
      if (v37 != CFBooleanGetTypeID())
        return FigSignalErrorAt();
      v38 = *(CFArrayRef *)(DerivedStorage + 336);
      *(_QWORD *)(DerivedStorage + 336) = a3;
LABEL_104:
      CFRetain(a3);
      goto LABEL_105;
    }
    if (CFEqual(CFSTR("kFigAssetExportSessionProperty_Metadata"), a2))
    {
      if (FigCFEqual())
        return 0;
      if (a3)
      {
        v39 = CFGetTypeID(a3);
        if (v39 != CFArrayGetTypeID())
          return FigSignalErrorAt();
        v40 = CFArrayCreateCopy(*v8, (CFArrayRef)a3);
        if (!v40)
          return FigSignalErrorAt();
        v38 = v40;
        v41 = *(const void **)(DerivedStorage + 192);
        *(_QWORD *)(DerivedStorage + 192) = v40;
        CFRetain(v40);
      }
      else
      {
        v38 = 0;
        v41 = *(const void **)(DerivedStorage + 192);
        *(_QWORD *)(DerivedStorage + 192) = 0;
      }
      if (v41)
        CFRelease(v41);
      if (!a3)
        return 0;
LABEL_122:
      v21 = (const __CFString *)v38;
      goto LABEL_44;
    }
    if (CFEqual(CFSTR("kFigAssetExportSessionProperty_MetadataItemFilterWhitelist"), a2))
    {
      if (FigCFEqual())
        return 0;
      if (a3)
      {
        v42 = CFGetTypeID(a3);
        if (v42 != CFDictionaryGetTypeID())
          return FigSignalErrorAt();
        v38 = *(CFArrayRef *)(DerivedStorage + 200);
        *(_QWORD *)(DerivedStorage + 200) = a3;
        goto LABEL_104;
      }
      v38 = *(CFArrayRef *)(DerivedStorage + 200);
      *(_QWORD *)(DerivedStorage + 200) = 0;
    }
    else
    {
      if (CFEqual(CFSTR("kFigAssetExportSessionProperty_AudioMix"), a2))
      {
        if (FigCFEqual())
          return 0;
        if (!a3)
          return FigSignalErrorAt();
        v43 = CFGetTypeID(a3);
        if (v43 != CFDictionaryGetTypeID())
          return FigSignalErrorAt();
        if (FigCFEqual())
          return 0;
        v38 = *(CFArrayRef *)(DerivedStorage + 176);
        *(_QWORD *)(DerivedStorage + 176) = a3;
        goto LABEL_104;
      }
      if (!CFEqual(CFSTR("kFigAssetExportSessionProperty_VideoComposition"), a2))
      {
        if (!CFEqual(CFSTR("kFigAssetExportSessionProperty_AudioTimePitchAlgorithm"), a2))
        {
          if (CFEqual(CFSTR("kFigAssetExportSessionProperty_CanPerformMultiplePassesOverSourceMediaData"), a2))
          {
            if (!a3)
              return FigSignalErrorAt();
            v46 = CFGetTypeID(a3);
            if (v46 != CFBooleanGetTypeID())
              return FigSignalErrorAt();
            v14 = 0;
            *(_QWORD *)(DerivedStorage + 392) = a3;
            return v14;
          }
          if (!CFEqual(CFSTR("kFigAssetExportSessionProperty_DirectoryForTemporaryFiles"), a2))
          {
            if (CFEqual(CFSTR("kFigAssetExportSessionProperty_MinVideoFrameDuration"), a2))
            {
              if (!a3)
                return FigSignalErrorAt();
              v50 = CFGetTypeID(a3);
              if (v50 != CFDictionaryGetTypeID())
                return FigSignalErrorAt();
              CMTimeMakeFromDictionary(&number.start, (CFDictionaryRef)a3);
              v14 = 0;
              *(_OWORD *)(DerivedStorage + 256) = *(_OWORD *)&number.start.value;
              *(_QWORD *)(DerivedStorage + 272) = number.start.epoch;
              return v14;
            }
            if (CFEqual(CFSTR("kFigAssetExportSessionProperty_VideoFrameRateConversionAlgorithm"), a2))
            {
              if (!a3)
                return FigSignalErrorAt();
              v51 = CFGetTypeID(a3);
              if (v51 != CFStringGetTypeID() || !FigCFEqual() && !FigCFEqual())
                return FigSignalErrorAt();
              v52 = CFStringCreateCopy(*v8, a3);
              if (!v52)
                return FigSignalErrorAt();
              a3 = v52;
              v53 = *(const void **)(DerivedStorage + 288);
              *(_QWORD *)(DerivedStorage + 288) = v52;
              CFRetain(v52);
              if (v53)
                CFRelease(v53);
              v14 = 0;
              goto LABEL_66;
            }
            if (CFEqual(CFSTR("kFigAssetExportSessionProperty_AudioTrackGroupOutputHandling"), a2))
            {
              if (!a3)
                return FigSignalErrorAt();
              v54 = CFGetTypeID(a3);
              if (v54 != CFNumberGetTypeID())
                return FigSignalErrorAt();
              LODWORD(number.start.value) = 0;
              CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &number);
              v14 = 0;
              *(_DWORD *)(DerivedStorage + 344) = number.start.value;
              return v14;
            }
            if (CFEqual(CFSTR("kFigAssetExportSessionProperty_AllowsParallelizedExport"), a2))
            {
              if (!a3)
                return FigSignalErrorAt();
              v55 = CFGetTypeID(a3);
              if (v55 != CFBooleanGetTypeID())
                return FigSignalErrorAt();
              v14 = 0;
              *(_BYTE *)(DerivedStorage + 96) = CFBooleanGetValue((CFBooleanRef)a3);
              return v14;
            }
            if (CFEqual(CFSTR("kFigAssetExportSessionProperty_EnableDecodeAppleOnlySWAV1"), a2))
            {
              if (!a3)
                return FigSignalErrorAt();
              v56 = CFGetTypeID(a3);
              if (v56 != CFBooleanGetTypeID())
                return FigSignalErrorAt();
              v14 = 0;
              *(_BYTE *)(DerivedStorage + 98) = CFBooleanGetValue((CFBooleanRef)a3);
              return v14;
            }
            return 0;
          }
          if (a3)
          {
            v47 = CFGetTypeID(a3);
            if (v47 != CFURLGetTypeID())
              return FigSignalErrorAt();
            v48 = CFURLCopyAbsoluteURL((CFURLRef)a3);
            if (!v48)
              return FigSignalErrorAt();
            a3 = (const __CFString *)v48;
            v49 = *(const void **)(DerivedStorage + 400);
            *(_QWORD *)(DerivedStorage + 400) = v48;
            CFRetain(v48);
          }
          else
          {
            v49 = *(const void **)(DerivedStorage + 400);
            *(_QWORD *)(DerivedStorage + 400) = 0;
          }
          if (v49)
            CFRelease(v49);
          if (!a3)
            return 0;
          goto LABEL_43;
        }
        if (!a3)
          return FigSignalErrorAt();
        v45 = CFGetTypeID(a3);
        if (v45 != CFStringGetTypeID())
          return FigSignalErrorAt();
        v38 = *(CFArrayRef *)(DerivedStorage + 168);
        *(_QWORD *)(DerivedStorage + 168) = a3;
        goto LABEL_104;
      }
      if (a3)
      {
        if (FigCFEqual())
          return 0;
        v44 = CFGetTypeID(a3);
        MEMORY[0x19402F294](&FigAssetExportSessionVideoCompositionGetTypeID_sRegisterFigAssetExportSessionVideoCompositionOnce, registerFigAssetExportSessionVideoCompositionOnce);
        if (v44 != sFigAssetExportSessionVideoCompositionID)
          return FigSignalErrorAt();
        v38 = *(CFArrayRef *)(DerivedStorage + 184);
        *(_QWORD *)(DerivedStorage + 184) = a3;
        goto LABEL_104;
      }
      v38 = *(CFArrayRef *)(DerivedStorage + 184);
      *(_QWORD *)(DerivedStorage + 184) = 0;
    }
LABEL_105:
    if (!v38)
      return 0;
    goto LABEL_122;
  }
  return FigSignalErrorAt();
}

void figAssetExportSession_removeListeners(uint64_t a1)
{
  _QWORD *v1;
  size_t v2;
  malloc_type_id_t v3;
  _QWORD *v4;
  void *v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;

  if (a1)
  {
    v8 = 0;
    v1 = figAssetExportSession_figRemakerNotificationNames(&v8);
    if (v8)
    {
      if (v8 >> 60)
        return;
      v2 = 16 * v8;
      v3 = 1556728742;
    }
    else
    {
      v2 = 0;
      v3 = 1270757447;
    }
    v4 = malloc_type_malloc(v2, v3);
    v5 = v4;
    if (v4)
    {
      v6 = v8;
      if (v8)
      {
        v7 = v4 + 1;
        do
        {
          *(v7 - 1) = figAssetExportSession_figRemakerNotification;
          *v7 = v1;
          v7 += 2;
          ++v1;
          --v6;
        }
        while (v6);
      }
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListeners();
      free(v5);
    }
  }
}

void figAssetExportSession_releaseSegmentResources(uint64_t a1)
{
  uint64_t DerivedStorage;
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  CFIndex i;
  uint64_t v7;
  uint64_t FigBaseObject;
  uint64_t v9;
  void (*v10)(uint64_t);
  const void *v11;
  _QWORD *v12;
  uint64_t VTable;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(const __CFArray **)(DerivedStorage + 112);
  if (v3)
  {
    Count = CFArrayGetCount(v3);
    if (Count >= 1)
    {
      v5 = Count;
      for (i = 0; i != v5; ++i)
      {
        v7 = *(_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 112), i);
        figAssetExportSession_removeListeners(v7, a1);
        if (_FigIsNotCurrentDispatchQueue())
          dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 424), 0, (dispatch_function_t)figAssetExportSession_EmptyWait);
        FigFileDeleteFile();
        FigBaseObject = FigRemakerGetFigBaseObject(v7);
        if (FigBaseObject)
        {
          v9 = FigBaseObject;
          v10 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
          if (v10)
            v10(v9);
        }
      }
    }
    v11 = *(const void **)(DerivedStorage + 112);
    if (v11)
    {
      CFRelease(v11);
      *(_QWORD *)(DerivedStorage + 112) = 0;
    }
  }
  v12 = *(_QWORD **)(DerivedStorage + 120);
  if (v12)
  {
    figAssetExportSession_removeListeners(*v12, a1);
    if (_FigIsNotCurrentDispatchQueue())
      dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 424), 0, (dispatch_function_t)figAssetExportSession_EmptyWait);
    FigFileDeleteFile();
    VTable = FigRemakerGetFigBaseObject(**(_QWORD **)(DerivedStorage + 120));
    if (VTable)
    {
      v14 = VTable;
      VTable = CMBaseObjectGetVTable();
      v15 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(VTable + 8) + 24);
      if (v15)
        LODWORD(VTable) = v15(v14);
    }
    FAES_RemakerConfigRelease(VTable, *(CFTypeRef **)(DerivedStorage + 120));
    *(_QWORD *)(DerivedStorage + 120) = 0;
  }
}

_QWORD *figAssetExportSession_figRemakerNotificationNames(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)figAssetExportSession_figRemakerNotificationNames_sNotificationNames;
  if (figAssetExportSession_figRemakerNotificationNames_sNotificationNames)
  {
    if (!a1)
      return result;
LABEL_6:
    *a1 = 6;
    return result;
  }
  result = malloc_type_malloc(0x30uLL, 0x5CC9CBA6uLL);
  figAssetExportSession_figRemakerNotificationNames_sNotificationNames = (uint64_t)result;
  if (result)
  {
    v3 = *MEMORY[0x1E0CA4B88];
    *result = CFSTR("Remaker_Completed");
    result[1] = CFSTR("Remaker_Failed");
    result[2] = CFSTR("Remaker_DecodeError");
    result[3] = CFSTR("Remaker_Started");
    result[4] = CFSTR("ServerConnectionDied");
    result[5] = v3;
    if (a1)
      goto LABEL_6;
  }
  return result;
}

void figAssetExportSession_figRemakerNotification(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage;
  CFTypeID v8;
  const __CFAllocator *v9;
  CFIndex v10;
  CFErrorRef v11;
  unsigned int v12;
  CFTypeID v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
  {
    FigSignalErrorAt();
    if (a5)
    {
      v8 = CFGetTypeID(a5);
      if (v8 == CFDictionaryGetTypeID())
        FigCFDictionaryGetInt32IfPresent();
    }
    v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v10 = -16979;
    goto LABEL_8;
  }
  if (FigCFEqual())
  {
    FigSignalErrorAt();
    v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v10 = -16977;
LABEL_8:
    v11 = CFErrorCreate(v9, CFSTR("FigAssetExportSession_ErrorDomain"), v10, 0);
LABEL_9:
    v12 = 5;
    goto LABEL_10;
  }
  if (FigCFEqual())
  {
    FigSignalErrorAt();
    v11 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("FigAssetExportSession_ErrorDomain"), -16978, 0);
    *(_BYTE *)(DerivedStorage + 8) = 1;
    goto LABEL_17;
  }
  if (FigCFEqual())
  {
    FigSignalErrorAt();
    v11 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("FigAssetExportSession_ErrorDomain"), -16978, 0);
LABEL_17:
    if (*(_BYTE *)(DerivedStorage + 296))
    {
      *(_BYTE *)(DerivedStorage + 280) = 0;
      *(_BYTE *)(DerivedStorage + 296) = 0;
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(DerivedStorage + 304));
    }
    goto LABEL_9;
  }
  if (FigCFEqual())
  {
    v11 = 0;
    v12 = 4;
    goto LABEL_10;
  }
  if (FigCFEqual())
  {
    if (!a5
      || (v13 = CFGetTypeID(a5), v13 != CFDictionaryGetTypeID())
      || !FigCFDictionaryGetBooleanIfPresent())
    {
      v11 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("FigAssetExportSession_ErrorDomain"), -16979, 0);
      if (!v11)
        return;
LABEL_11:
      CFRelease(v11);
      return;
    }
    if (*(_BYTE *)(DerivedStorage + 296))
    {
      *(_BYTE *)(DerivedStorage + 280) = 0;
      *(_BYTE *)(DerivedStorage + 296) = 0;
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(DerivedStorage + 304));
    }
  }
  else if (FigCFEqual())
  {
    v11 = 0;
    v12 = 2;
LABEL_10:
    figAssetExportSession_transitionToStatus(a2, v12, v11);
    if (!v11)
      return;
    goto LABEL_11;
  }
}

void figAssetExportSession_transitionToStatus(const void *a1, unsigned int a2, const void *a3)
{
  uint64_t DerivedStorage;
  _DWORD *v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v9;
  const void *v11;
  CFErrorRef v12;
  uint64_t FigBaseObject;
  uint64_t v14;
  void (*v15)(uint64_t);
  const void *v16;
  int v17;
  void (*v18)(_QWORD);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  if (dword_1EE2A35C0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  figAssetExportSession_DeliverParentExportNotification(DerivedStorage, 0, (uint64_t)CFSTR("kFigAssetExportSessionProperty_Error"));
  figAssetExportSession_DeliverParentExportNotification(DerivedStorage, 0, (uint64_t)CFSTR("kFigAssetExportSessionProperty_Status"));
  FigReadWriteLockLockForWrite();
  v9 = *(_DWORD *)(DerivedStorage + 48);
  if (v9 == a2 || v9 > 3)
  {
    FigReadWriteLockUnlockForWrite();
    return;
  }
  *(_DWORD *)(DerivedStorage + 48) = a2;
  v11 = *(const void **)(DerivedStorage + 56);
  *(_QWORD *)(DerivedStorage + 56) = a3;
  if (a3)
    CFRetain(a3);
  if (v11)
    CFRelease(v11);
  if (a2 >= 4)
  {
    if (*v7 == 1)
      kdebug_trace();
    if (*(_QWORD *)(DerivedStorage + 40))
    {
      FigReadWriteLockUnlockForWrite();
      figAssetExportSession_updateProgress(DerivedStorage);
      FigReadWriteLockLockForWrite();
      figAssetExportSession_removeListeners(*(_QWORD *)(DerivedStorage + 40), a1);
      FigBaseObject = FigRemakerGetFigBaseObject(*(_QWORD *)(DerivedStorage + 40));
      if (FigBaseObject)
      {
        v14 = FigBaseObject;
        v15 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
        if (v15)
          v15(v14);
      }
      v16 = *(const void **)(DerivedStorage + 40);
      if (v16)
      {
        CFRelease(v16);
        *(_QWORD *)(DerivedStorage + 40) = 0;
      }
      FigReadWriteLockUnlockForWrite();
      if (!*(_BYTE *)(DerivedStorage + 97))
        goto LABEL_32;
      FigReadWriteLockLockForWrite();
    }
    else if (!*(_BYTE *)(DerivedStorage + 97))
    {
      goto LABEL_33;
    }
    figAssetExportSession_releaseSegmentResources((uint64_t)a1);
    FigReadWriteLockUnlockForWrite();
LABEL_32:
    v17 = *(unsigned __int8 *)(DerivedStorage + 152);
    goto LABEL_34;
  }
  if (a2 == 3)
  {
    FigReadWriteLockUnlockForWrite();
    if (figAssetExportSession_kickoffSegmentReassembly((uint64_t)a1))
    {
      v12 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("FigAssetExportSession_ErrorDomain"), -16979, 0);
      FigSignalErrorAt();
      figAssetExportSession_transitionToStatus(a1, 5, v12);
      if (v12)
        CFRelease(v12);
    }
    goto LABEL_32;
  }
LABEL_33:
  v17 = *(unsigned __int8 *)(DerivedStorage + 152);
  FigReadWriteLockUnlockForWrite();
LABEL_34:
  figAssetExportSession_DeliverParentExportNotification(DerivedStorage, 1, (uint64_t)CFSTR("kFigAssetExportSessionProperty_Error"));
  figAssetExportSession_DeliverParentExportNotification(DerivedStorage, 1, (uint64_t)CFSTR("kFigAssetExportSessionProperty_Status"));
  if (a2 >= 4)
  {
    if (a2 - 5 <= 1 && v17)
      FigFileDeleteFile();
    v18 = *(void (**)(_QWORD))(DerivedStorage + 360);
    if (v18)
    {
      *(_QWORD *)(DerivedStorage + 360) = 0;
      v18(*(_QWORD *)(DerivedStorage + 368));
      if (*v7 == 1)
        kdebug_trace();
      CFRelease(a1);
    }
  }
}

void figAssetExportSession_DeliverParentExportNotification(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const void *v7;

  if (*(_QWORD *)(a1 + 376) && *(_QWORD *)a1)
  {
    v6 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v6)
    {
      v7 = (const void *)v6;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 376))(v6, a2, a3);
      CFRelease(v7);
    }
  }
}

void figAssetExportSession_updateProgress(uint64_t a1)
{
  uint64_t v2;
  uint64_t FigBaseObject;
  void (*v4)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef v5;
  const void *v6;
  const void *Float32;
  uint64_t v8;
  void (*v9)(uint64_t, const __CFString *, _QWORD, const void **);
  const void *v10;
  const void *v11;
  const void *v12;
  const __CFArray *v13;
  float v14;
  CFIndex Count;
  CFIndex v16;
  CFIndex v17;
  uint64_t v18;
  _QWORD *ValueAtIndex;
  uint64_t v20;
  void (*v21)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  float v22;
  _QWORD *v23;
  uint64_t v24;
  void (*v25)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  float v26;
  const void *v27;
  const void *v28;
  const void *v29;
  CFTypeRef cf;

  cf = 0;
  if (*(_QWORD *)(a1 + 40))
  {
    FigReadWriteLockLockForRead();
    v2 = *(_QWORD *)(a1 + 40);
    if (v2)
    {
      FigBaseObject = FigRemakerGetFigBaseObject(v2);
      v4 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
      if (v4)
        v4(FigBaseObject, CFSTR("Remaker_Progress"), *MEMORY[0x1E0C9AE00], &cf);
    }
    FigReadWriteLockUnlockForRead();
    v5 = cf;
    if (cf)
    {
      FigReadWriteLockLockForWrite();
      v6 = *(const void **)(a1 + 64);
      *(_QWORD *)(a1 + 64) = v5;
      CFRetain(v5);
      if (v6)
        CFRelease(v6);
      FigReadWriteLockUnlockForWrite();
      Float32 = cf;
      if (cf)
LABEL_9:
        CFRelease(Float32);
    }
  }
  else if (*(_BYTE *)(a1 + 97))
  {
    if (!*(_BYTE *)(a1 + 128))
    {
      FigReadWriteLockLockForRead();
      v13 = *(const __CFArray **)(a1 + 112);
      v14 = 2.0;
      if (v13)
      {
        Count = CFArrayGetCount(v13);
        if (Count >= 1)
        {
          v16 = Count;
          v17 = 0;
          v18 = *MEMORY[0x1E0C9AE00];
          do
          {
            ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 112), v17);
            v20 = FigRemakerGetFigBaseObject(*ValueAtIndex);
            v21 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
            if (v21)
              v21(v20, CFSTR("Remaker_Progress"), v18, &cf);
            FigCFNumberGetFloat32();
            if (v22 < v14)
              v14 = v22;
            if (cf)
              CFRelease(cf);
            ++v17;
          }
          while (v16 != v17);
        }
      }
      v23 = *(_QWORD **)(a1 + 120);
      if (v23 && *v23)
      {
        v24 = FigRemakerGetFigBaseObject(*v23);
        v25 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
        if (v25)
          v25(v24, CFSTR("Remaker_Progress"), *MEMORY[0x1E0C9AE00], &cf);
        FigCFNumberGetFloat32();
        if (v26 < v14)
          v14 = v26;
        if (cf)
          CFRelease(cf);
      }
      if (v14 == 1.0)
        *(_BYTE *)(a1 + 128) = 1;
      FigReadWriteLockUnlockForRead();
      Float32 = (const void *)FigCFNumberCreateFloat32();
      cf = Float32;
      if (Float32)
      {
        v27 = Float32;
        FigReadWriteLockLockForWrite();
        v28 = *(const void **)(a1 + 64);
        *(_QWORD *)(a1 + 64) = v27;
        CFRetain(v27);
        if (v28)
          CFRelease(v28);
        FigReadWriteLockUnlockForWrite();
        Float32 = cf;
      }
      goto LABEL_9;
    }
    v29 = 0;
    v8 = *(_QWORD *)(a1 + 136);
    if (v8)
    {
      v9 = *(void (**)(uint64_t, const __CFString *, _QWORD, const void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
      if (v9)
      {
        v9(v8, CFSTR("kFigAssetExportSessionProperty_Progress"), *MEMORY[0x1E0C9AE00], &v29);
        if (v29)
        {
          FigCFNumberGetFloat32();
          v10 = (const void *)FigCFNumberCreateFloat32();
          cf = v10;
          if (v10)
          {
            v11 = v10;
            FigReadWriteLockLockForWrite();
            v12 = *(const void **)(a1 + 64);
            *(_QWORD *)(a1 + 64) = v11;
            CFRetain(v11);
            if (v12)
              CFRelease(v12);
            FigReadWriteLockUnlockForWrite();
            if (cf)
              CFRelease(cf);
          }
          Float32 = v29;
          goto LABEL_9;
        }
      }
    }
  }
}

uint64_t figAssetExportSession_kickoffSegmentReassembly(uint64_t a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  uint64_t CMBaseObject;
  void (*v5)(uint64_t, const __CFString *, const __CFAllocator *, const __CFDictionary **);
  const __CFDictionary *v6;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v8;
  uint64_t v9;
  const __CFArray *v10;
  int64_t Count;
  uint64_t v12;
  const __CFArray *v13;
  CFIndex v14;
  char *v15;
  CFMutableDictionaryRef v16;
  __int128 *v17;
  CFIndex v18;
  uint64_t v19;
  CMTime *v20;
  int *ValueAtIndex;
  int *v22;
  CFTypeRef v23;
  uint64_t (*v24)(CFTypeRef, uint64_t, _QWORD, uint64_t, CMTime *);
  uint64_t v25;
  CMTimeEpoch epoch;
  CMTimeEpoch v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  CFTypeRef v32;
  uint64_t value_low;
  uint64_t (*v34)(CFTypeRef, uint64_t, uint64_t, char *);
  CFNumberRef v35;
  CFNumberRef v36;
  CFTypeRef v37;
  uint64_t (*v38)(CFTypeRef, uint64_t, _QWORD, uint64_t, unsigned int *);
  int64_t v39;
  _DWORD *v40;
  uint64_t v41;
  BOOL v42;
  const void *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  CFTypeRef v48;
  const void *v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  int *v52;
  CFNumberRef v53;
  CFNumberRef v54;
  CFTypeRef v55;
  uint64_t v56;
  uint64_t (*v57)(CFTypeRef, uint64_t, int64_t, char *);
  uint64_t v58;
  __CFDictionary *v59;
  uint64_t v61;
  CFIndex v62;
  uint64_t v63;
  CMTime *v64;
  int *v65;
  int *v66;
  CFTypeRef v67;
  uint64_t (*v68)(CFTypeRef, uint64_t, _QWORD, uint64_t, CMTime *);
  uint64_t v69;
  CMTimeEpoch v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  CFTypeRef v75;
  uint64_t v76;
  uint64_t (*v77)(CFTypeRef, uint64_t, uint64_t, char *);
  CFNumberRef v78;
  CFNumberRef v79;
  uint64_t v80;
  CFMutableDictionaryRef v81;
  uint64_t FigBaseObject;
  uint64_t (*v83)(uint64_t, const __CFString *, CFMutableDictionaryRef);
  CFTypeRef v84;
  uint64_t v85;
  unsigned int (*v86)(uint64_t, const __CFString *, const __CFAllocator *, CMTimeMapping *);
  BOOL v87;
  CMTimeValue value;
  uint64_t v89;
  void (*v90)(uint64_t, const __CFString *, CMTimeValue);
  CFTypeRef v91;
  uint64_t (*v92)(CFTypeRef, _QWORD, _QWORD, const void **);
  CFTypeRef v93;
  uint64_t v94;
  void (*v95)(CFTypeRef, const __CFString *, uint64_t);
  uint64_t v96;
  void (*v97)(CFTypeRef, const __CFString *, uint64_t);
  uint64_t v98;
  void (*v99)(CFTypeRef, const __CFString *, uint64_t);
  uint64_t VTable;
  uint64_t v101;
  const __CFDictionary *v102;
  int64_t v103;
  __int128 v104;
  uint64_t v105;
  __CFDictionary *v106;
  __CFDictionary *theDict;
  __CFDictionary *v108;
  __int128 v109;
  CMTimeEpoch v110;
  __int128 v111;
  __int128 v112;
  const __CFAllocator *allocator;
  uint64_t v114;
  _QWORD context[3];
  CMTimeRange v116;
  CMTimeRange v117;
  CMTimeRange v118;
  CMTime rhs;
  CMTimeRange v120;
  CMTime valuePtr;
  CMTimeRange target;
  CMTime duration;
  CMTimeRange source;
  CMTimeMapping start;
  CFTypeRef v126;
  CFTypeRef v127;
  CFTypeRef v128;
  const void *v129;
  CFTypeRef v130;
  CFMutableDictionaryRef v131;
  const __CFDictionary *v132;
  unsigned int v133;
  CFTypeRef v134[3];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v134[0] = 0;
  v133 = 0;
  v131 = 0;
  v132 = 0;
  v129 = 0;
  v130 = 0;
  v127 = 0;
  v128 = 0;
  v126 = 0;
  FigReadWriteLockLockForRead();
  v114 = DerivedStorage;
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  CMBaseObject = FigAssetGetCMBaseObject(*(_QWORD *)(DerivedStorage + 16));
  v5 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, const __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v5)
  {
    v5(CMBaseObject, CFSTR("assetProperty_TrackReferences"), v3, &v132);
    v6 = v132;
  }
  else
  {
    v6 = 0;
  }
  Mutable = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v58 = FigSignalErrorAt();
    v15 = 0;
    v8 = 0;
    goto LABEL_138;
  }
  v8 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v8)
  {
    v9 = FigSignalErrorAt();
    goto LABEL_137;
  }
  v9 = FigMutableCompositionCreate(v3, 0, 0, v134);
  if ((_DWORD)v9)
  {
LABEL_137:
    v58 = v9;
    v15 = 0;
    goto LABEL_138;
  }
  v10 = *(const __CFArray **)(v114 + 112);
  if (v10)
    Count = CFArrayGetCount(v10);
  else
    Count = 0;
  v12 = *(_QWORD *)(v114 + 120);
  if (v12 && (v13 = *(const __CFArray **)(v12 + 16)) != 0)
    v14 = CFArrayGetCount(v13);
  else
    v14 = 0;
  v15 = (char *)malloc_type_calloc(Count, 0x6CuLL, 0x1060040CB727B4DuLL);
  if (!v15 || (v16 = CFDictionaryCreateMutable(v3, v14 + 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) == 0)
  {
    v58 = FigSignalErrorAt();
LABEL_138:
    v59 = 0;
    goto LABEL_63;
  }
  v103 = Count;
  v101 = a1;
  v102 = v6;
  allocator = v3;
  theDict = v16;
  v108 = v8;
  v106 = Mutable;
  v17 = (__int128 *)MEMORY[0x1E0CA2E68];
  v105 = v14;
  if (v14 >= 1)
  {
    v18 = 0;
    v19 = 1;
    v20 = (CMTime *)MEMORY[0x1E0CA2E30];
    while (1)
    {
      ValueAtIndex = (int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*(_QWORD *)(v114 + 120) + 16), v18);
      if (ValueAtIndex[2] == 1936684398)
      {
        v22 = ValueAtIndex;
        LODWORD(valuePtr.value) = 0;
        v23 = v134[0];
        v24 = *(uint64_t (**)(CFTypeRef, uint64_t, _QWORD, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 32);
        if (!v24)
          goto LABEL_60;
        v25 = v24(v23, 1936684398, 0, v19, &valuePtr);
        if ((_DWORD)v25)
          goto LABEL_132;
        *(_OWORD *)&start.source.start.value = *v17;
        v111 = *(_OWORD *)&start.source.start.value;
        start.source.start.epoch = *((_QWORD *)v17 + 2);
        epoch = start.source.start.epoch;
        duration = *v20;
        v109 = *(_OWORD *)&duration.value;
        v27 = duration.epoch;
        CMTimeRangeMake(&source, &start.source.start, &duration);
        *(_OWORD *)&start.source.start.value = v111;
        start.source.start.epoch = epoch;
        *(_OWORD *)&duration.value = v109;
        duration.epoch = v27;
        CMTimeRangeMake(&target, &start.source.start, &duration);
        CMTimeMappingMake(&start, &source, &target);
        v28 = *(_OWORD *)&start.source.start.epoch;
        *(_OWORD *)v15 = *(_OWORD *)&start.source.start.value;
        *((_OWORD *)v15 + 1) = v28;
        v29 = *(_OWORD *)&start.source.duration.timescale;
        v30 = *(_OWORD *)&start.target.start.value;
        v31 = *(_OWORD *)&start.target.duration.timescale;
        *((_OWORD *)v15 + 4) = *(_OWORD *)&start.target.start.epoch;
        *((_OWORD *)v15 + 5) = v31;
        *((_OWORD *)v15 + 2) = v29;
        *((_OWORD *)v15 + 3) = v30;
        *((_QWORD *)v15 + 12) = *(_QWORD *)(*(_QWORD *)(v114 + 120) + 8);
        *((_DWORD *)v15 + 26) = v22[1];
        v32 = v134[0];
        value_low = LODWORD(valuePtr.value);
        v34 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 48);
        if (!v34)
          goto LABEL_60;
        v25 = v34(v32, value_low, 1, v15);
        if ((_DWORD)v25)
          goto LABEL_132;
        v35 = CFNumberCreate(allocator, kCFNumberSInt32Type, &valuePtr);
        if (!v35)
        {
LABEL_133:
          v58 = 4294950326;
          goto LABEL_61;
        }
        v36 = v35;
        CFDictionarySetValue(theDict, v35, *(const void **)(*(_QWORD *)(v114 + 120) + 8));
        CFRelease(v36);
        v25 = figAssetExportSession_addTrackMapping(v108, valuePtr.value, v22[1]);
        if ((_DWORD)v25)
          goto LABEL_132;
        v25 = figAssetExportSession_addTrackMapping(v106, *v22, valuePtr.value);
        if ((_DWORD)v25)
          goto LABEL_132;
        v19 = (v19 + 1);
        v14 = v105;
      }
      if (v14 == ++v18)
        goto LABEL_30;
    }
  }
  v19 = 1;
LABEL_30:
  v112 = *v17;
  *(_OWORD *)&duration.value = *v17;
  v110 = *((_QWORD *)v17 + 2);
  duration.epoch = v110;
  v37 = v134[0];
  v38 = *(uint64_t (**)(CFTypeRef, uint64_t, _QWORD, uint64_t, unsigned int *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 32);
  if (!v38)
    goto LABEL_60;
  v25 = v38(v37, 1986618469, 0, v19, &v133);
  if ((_DWORD)v25)
    goto LABEL_132;
  if (Count < 1)
  {
    v42 = 0;
LABEL_56:
    v55 = v134[0];
    v56 = v133;
    v57 = *(uint64_t (**)(CFTypeRef, uint64_t, int64_t, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 48);
    if (v57)
    {
      v58 = v57(v55, v56, v103, v15);
      if (!(_DWORD)v58)
      {
        if (!v42)
          goto LABEL_87;
        v58 = 0;
      }
LABEL_61:
      Mutable = v106;
      goto LABEL_62;
    }
LABEL_60:
    v58 = 4294954514;
    goto LABEL_61;
  }
  v39 = -Count;
  v40 = v15 + 104;
  v41 = 1;
  v42 = 1;
  while (1)
  {
    v43 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v114 + 112), v41 - 1);
    valuePtr = *(CMTime *)((_BYTE *)v43 + 1);
    *(_OWORD *)&start.source.start.value = v112;
    start.source.start.epoch = v110;
    rhs = valuePtr;
    CMTimeRangeMake(&v120, &start.source.start, &rhs);
    start.source.start = duration;
    rhs = valuePtr;
    CMTimeRangeMake(&v118, &start.source.start, &rhs);
    CMTimeMappingMake(&start, &v120, &v118);
    v44 = *(_OWORD *)&start.source.start.value;
    *(_OWORD *)(v40 - 22) = *(_OWORD *)&start.source.start.epoch;
    *(_OWORD *)(v40 - 26) = v44;
    v45 = *(_OWORD *)&start.source.duration.timescale;
    v46 = *(_OWORD *)&start.target.start.value;
    v47 = *(_OWORD *)&start.target.start.epoch;
    *(_OWORD *)(v40 - 6) = *(_OWORD *)&start.target.duration.timescale;
    *(_OWORD *)(v40 - 10) = v47;
    *(_OWORD *)(v40 - 14) = v46;
    *(_OWORD *)(v40 - 18) = v45;
    *((_QWORD *)v40 - 1) = *((_QWORD *)v43 + 1);
    *v40 = 1;
    start.source.start = duration;
    rhs = valuePtr;
    CMTimeAdd(&duration, &start.source.start, &rhs);
    v25 = FigAssetCreateWithURL((uint64_t)allocator, *((_QWORD *)v43 + 1), 0, 0, &v130);
    if ((_DWORD)v25)
      goto LABEL_132;
    if (!v130 || (v48 = figAssetExportSession_CopySourceVideoTrack((uint64_t)v130, 1)) == 0)
    {
LABEL_131:
      v25 = FigSignalErrorAt();
      goto LABEL_132;
    }
    v49 = v48;
    v50 = FigAssetTrackGetCMBaseObject(v48);
    v51 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v41 == 1)
    {
      if (!v51)
        goto LABEL_60;
      v25 = v51(v50, CFSTR("FormatDescriptionArray"), allocator, &v127);
      if ((_DWORD)v25)
        goto LABEL_132;
      if (!v127)
        goto LABEL_131;
    }
    else
    {
      if (!v51)
        goto LABEL_60;
      v25 = v51(v50, CFSTR("FormatDescriptionArray"), allocator, &v126);
      if ((_DWORD)v25)
        goto LABEL_132;
      if (!FigCFEqual())
        goto LABEL_131;
      if (v126)
      {
        CFRelease(v126);
        v126 = 0;
      }
    }
    CFRelease(v49);
    if (v39 + v41)
    {
      if (v130)
      {
        CFRelease(v130);
        v130 = 0;
      }
      goto LABEL_53;
    }
    v52 = (int *)CFArrayGetValueAtIndex(*((CFArrayRef *)v43 + 2), 0);
    v53 = CFNumberCreate(allocator, kCFNumberSInt32Type, &v133);
    if (!v53)
      goto LABEL_133;
    v54 = v53;
    CFDictionarySetValue(theDict, v53, *((const void **)v43 + 1));
    CFRelease(v54);
    v25 = figAssetExportSession_addTrackMapping(v108, v133, v52[1]);
    if ((_DWORD)v25)
      goto LABEL_132;
    v25 = figAssetExportSession_addTrackMapping(v106, *v52, v133);
    if ((_DWORD)v25)
      break;
LABEL_53:
    v42 = v41++ < v103;
    v40 += 27;
    if (v39 + v41 == 1)
      goto LABEL_56;
  }
  if (v42)
  {
LABEL_132:
    v58 = v25;
    goto LABEL_61;
  }
LABEL_87:
  v61 = v105;
  Mutable = v106;
  if (v105 < 1)
  {
LABEL_99:
    v59 = theDict;
    v8 = v108;
    if (v102)
    {
      v80 = remakerFamily_createDestinationTrackReferenceDictionary((uint64_t)v106, v132, &v131);
      if ((_DWORD)v80)
        goto LABEL_141;
      v81 = v131;
      FigBaseObject = FigMutableCompositionGetFigBaseObject(v134[0]);
      v83 = *(uint64_t (**)(uint64_t, const __CFString *, CFMutableDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 56);
      if (!v83)
      {
LABEL_129:
        v58 = 4294954514;
        goto LABEL_63;
      }
      v80 = v83(FigBaseObject, CFSTR("MutableComposition_TrackReferenceDictionary"), v81);
      if ((_DWORD)v80)
        goto LABEL_141;
    }
    v84 = v134[0];
    start.source.start.value = 0;
    duration.value = 0;
    if (!v130)
    {
LABEL_118:
      context[0] = theDict;
      context[1] = 0;
      context[2] = v134[0];
      CFDictionaryApplyFunction(v108, (CFDictionaryApplierFunction)figAssetExportSession_reassemblyTransferTrackPropertiesApplier, context);
      v91 = v134[0];
      v92 = *(uint64_t (**)(CFTypeRef, _QWORD, _QWORD, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 208);
      if (v92)
      {
        v80 = v92(v91, 0, 0, &v129);
        if (!(_DWORD)v80)
        {
          v80 = FigAssetExportSessionCreateWithAsset(allocator, 0, 1, v129, CFSTR("AVAssetExportPresetPassthrough"), 0, 0, &v128);
          if (!(_DWORD)v80)
          {
            v93 = v128;
            v94 = *(_QWORD *)(v114 + 88);
            v95 = *(void (**)(CFTypeRef, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 56);
            if (v95)
              v95(v93, CFSTR("kFigAssetExportSessionProperty_OutputURL"), v94);
            v96 = *(_QWORD *)(v114 + 144);
            v97 = *(void (**)(CFTypeRef, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 56);
            if (v97)
              v97(v93, CFSTR("kFigAssetExportSessionProperty_OutputFileType"), v96);
            v98 = *(_QWORD *)(v114 + 384);
            v99 = *(void (**)(CFTypeRef, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 56);
            if (v99)
              v99(v93, CFSTR("kFigAssetExportSessionProperty_ShouldOptimizeForNetworkUse"), v98);
            VTable = CMBaseObjectGetVTable();
            v58 = (*(uint64_t (**)(CFTypeRef, uint64_t (*)(uint64_t), uint64_t))(*(_QWORD *)(VTable + 16)
                                                                                                 + 16))(v93, figAssetExportSession_reassemblyCompletionHandler, v101);
            if (!(_DWORD)v58)
            {
              *(_QWORD *)(v114 + 136) = v93;
              v128 = 0;
            }
            goto LABEL_63;
          }
        }
LABEL_141:
        v58 = v80;
        goto LABEL_63;
      }
      goto LABEL_129;
    }
    v85 = FigAssetGetCMBaseObject(v130);
    v86 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CMTimeMapping *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v86)
    {
      v87 = v86(v85, CFSTR("assetProperty_FormatReader"), allocator, &start) || start.source.start.value == 0;
      if (!v87
        && !FigMetadataCopyMovieMetadata(start.source.start.value, allocator, (__CFArray **)&duration))
      {
        if (!duration.value)
        {
LABEL_116:
          if (start.source.start.value)
            CFRelease((CFTypeRef)start.source.start.value);
          goto LABEL_118;
        }
        if (CFArrayGetCount((CFArrayRef)duration.value))
        {
          value = duration.value;
          v89 = FigMutableCompositionGetFigBaseObject(v84);
          v90 = *(void (**)(uint64_t, const __CFString *, CMTimeValue))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 56);
          if (v90)
            v90(v89, CFSTR("MutableComposition_Metadata"), value);
        }
      }
    }
    if (duration.value)
      CFRelease((CFTypeRef)duration.value);
    goto LABEL_116;
  }
  v62 = 0;
  v63 = (v19 + 1);
  v64 = (CMTime *)MEMORY[0x1E0CA2E30];
  while (1)
  {
    v65 = (int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*(_QWORD *)(v114 + 120) + 16), v62);
    if (v65[2] != 1835365473)
      goto LABEL_98;
    v66 = v65;
    LODWORD(valuePtr.value) = 0;
    v67 = v134[0];
    v68 = *(uint64_t (**)(CFTypeRef, uint64_t, _QWORD, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 32);
    if (!v68)
      goto LABEL_130;
    v69 = v68(v67, 1835365473, 0, v63, &valuePtr);
    if ((_DWORD)v69)
      goto LABEL_139;
    *(_OWORD *)&start.source.start.value = v112;
    start.source.start.epoch = v110;
    duration = *v64;
    v104 = *(_OWORD *)&duration.value;
    v70 = duration.epoch;
    CMTimeRangeMake(&v117, &start.source.start, &duration);
    *(_OWORD *)&start.source.start.value = v112;
    start.source.start.epoch = v110;
    *(_OWORD *)&duration.value = v104;
    duration.epoch = v70;
    CMTimeRangeMake(&v116, &start.source.start, &duration);
    CMTimeMappingMake(&start, &v117, &v116);
    v71 = *(_OWORD *)&start.source.start.epoch;
    *(_OWORD *)v15 = *(_OWORD *)&start.source.start.value;
    *((_OWORD *)v15 + 1) = v71;
    v72 = *(_OWORD *)&start.source.duration.timescale;
    v73 = *(_OWORD *)&start.target.start.value;
    v74 = *(_OWORD *)&start.target.duration.timescale;
    *((_OWORD *)v15 + 4) = *(_OWORD *)&start.target.start.epoch;
    *((_OWORD *)v15 + 5) = v74;
    *((_OWORD *)v15 + 2) = v72;
    *((_OWORD *)v15 + 3) = v73;
    *((_QWORD *)v15 + 12) = *(_QWORD *)(*(_QWORD *)(v114 + 120) + 8);
    *((_DWORD *)v15 + 26) = v66[1];
    v75 = v134[0];
    v76 = LODWORD(valuePtr.value);
    v77 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 48);
    if (!v77)
    {
LABEL_130:
      v58 = 4294954514;
      goto LABEL_62;
    }
    v69 = v77(v75, v76, 1, v15);
    if ((_DWORD)v69)
    {
LABEL_139:
      v58 = v69;
      goto LABEL_62;
    }
    v78 = CFNumberCreate(allocator, kCFNumberSInt32Type, &valuePtr);
    if (!v78)
      break;
    v79 = v78;
    CFDictionarySetValue(theDict, v78, *(const void **)(*(_QWORD *)(v114 + 120) + 8));
    CFRelease(v79);
    v69 = figAssetExportSession_addTrackMapping(v108, valuePtr.value, v66[1]);
    if ((_DWORD)v69)
      goto LABEL_139;
    v69 = figAssetExportSession_addTrackMapping(v106, *v66, valuePtr.value);
    if ((_DWORD)v69)
      goto LABEL_139;
    v63 = (v63 + 1);
    v61 = v105;
LABEL_98:
    if (v61 == ++v62)
      goto LABEL_99;
  }
  v58 = 4294950326;
LABEL_62:
  v59 = theDict;
  v8 = v108;
LABEL_63:
  FigReadWriteLockUnlockForRead();
  if (v127)
    CFRelease(v127);
  if (v126)
    CFRelease(v126);
  if (v129)
    CFRelease(v129);
  if (v130)
    CFRelease(v130);
  free(v15);
  if (v59)
    CFRelease(v59);
  if (Mutable)
    CFRelease(Mutable);
  if (v8)
    CFRelease(v8);
  if (v132)
    CFRelease(v132);
  if (v131)
    CFRelease(v131);
  if (v134[0])
    CFRelease(v134[0]);
  if (v128)
    CFRelease(v128);
  return v58;
}

uint64_t figAssetExportSession_addTrackMapping(__CFDictionary *a1, int a2, int a3)
{
  const __CFAllocator *v4;
  CFNumberRef v5;
  CFNumberRef v6;
  CFNumberRef v7;
  BOOL v8;
  uint64_t v9;
  int v11;
  int valuePtr;

  v11 = a3;
  valuePtr = a2;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  v6 = CFNumberCreate(v4, kCFNumberSInt32Type, &v11);
  v7 = v6;
  if (v5)
    v8 = v6 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    CFDictionarySetValue(a1, v5, v6);
    v9 = 0;
LABEL_6:
    CFRelease(v5);
    goto LABEL_7;
  }
  v9 = 4294950326;
  if (v5)
    goto LABEL_6;
LABEL_7:
  if (v7)
    CFRelease(v7);
  return v9;
}

CFTypeRef figAssetExportSession_CopySourceVideoTrack(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, CFTypeRef *);
  void (*v6)(uint64_t, uint64_t, CFArrayRef *);
  CFIndex Count;
  CFArrayRef v8;
  CFTypeRef ValueAtIndex;
  CFArrayRef theArray;

  ValueAtIndex = 0;
  theArray = 0;
  if (a1)
  {
    v4 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    if ((_DWORD)a2)
    {
      v5 = *(void (**)(uint64_t, uint64_t, CFTypeRef *))(v4 + 40);
      if (v5)
        v5(a1, a2, &ValueAtIndex);
    }
    else
    {
      v6 = *(void (**)(uint64_t, uint64_t, CFArrayRef *))(v4 + 48);
      if (v6)
      {
        v6(a1, 1986618469, &theArray);
        if (theArray)
        {
          Count = CFArrayGetCount(theArray);
          v8 = theArray;
          if (Count)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
            CFRetain(ValueAtIndex);
            v8 = theArray;
          }
          if (v8)
            CFRelease(v8);
        }
      }
    }
  }
  return ValueAtIndex;
}

uint64_t FigAssetTrackCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CMBaseObject;
  uint64_t result;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);

  CMBaseObject = FigAssetTrackGetCMBaseObject(a1);
  result = CMBaseObjectGetVTable();
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(result + 8) + 48);
  if (v9)
    return v9(CMBaseObject, a2, a3, a4);
  return result;
}

void figAssetExportSession_reassemblyTransferTrackPropertiesApplier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t SInt32;
  uint64_t Value;
  const __CFAllocator *v6;
  CFTypeRef v7;
  unsigned int (*v8)(CFTypeRef, _QWORD, CFTypeRef *);
  uint64_t i;
  uint64_t v10;
  uint64_t CMBaseObject;
  void (*v12)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *);
  CFTypeRef v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, CFTypeRef);
  int v17;
  BOOL v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  int v23;
  CFTypeRef v24;
  unsigned int (*v26)(CFTypeRef, _QWORD, CFTypeRef *, _QWORD);
  CFTypeRef v27;
  void (*v28)(uint64_t, uint64_t, const __CFString *, CFTypeRef);
  unsigned int v29;
  CFTypeRef v30;
  CFTypeRef v31;
  CFTypeRef cf;
  CFTypeRef v33;
  CFTypeRef v34;
  CFTypeRef v35;
  _QWORD v36[26];

  v36[24] = *MEMORY[0x1E0C80C00];
  v36[0] = CFSTR("IsEnabled");
  v36[1] = CFSTR("MutableCompositionTrack_Enabled");
  v36[2] = CFSTR("AlternateGroupID");
  v36[3] = CFSTR("MutableCompositionTrack_AlternateGroupID");
  v36[4] = CFSTR("LanguageCode");
  v36[5] = CFSTR("MutableCompositionTrack_LanguageCode");
  v36[6] = CFSTR("ExtendedLanguageTag");
  v36[7] = CFSTR("MutableCompositionTrack_ExtendedLanguageTag");
  v36[8] = CFSTR("Layer");
  v36[9] = CFSTR("MutableCompositionTrack_Layer");
  v36[10] = CFSTR("Volume");
  v36[11] = CFSTR("MutableCompositionTrack_Volume");
  v36[12] = CFSTR("PreferredTransform");
  v36[13] = CFSTR("MutableCompositionTrack_PreferredTransform");
  v36[14] = CFSTR("CleanApertureDimensions");
  v36[15] = CFSTR("MutableCompositionTrack_CleanApertureDimensions");
  v36[16] = CFSTR("ProductionApertureDimensions");
  v36[17] = CFSTR("MutableCompositionTrack_ProductionApertureDimensions");
  v36[18] = CFSTR("EncodedPixelsDimensions");
  v36[19] = CFSTR("MutableCompositionTrack_EncodedPixelsDimensions");
  v36[20] = CFSTR("NaturalTimeScale");
  v36[21] = CFSTR("MutableCompositionTrack_NaturalTimeScale");
  v36[22] = CFSTR("LoadSettings");
  v36[23] = CFSTR("MutableCompositionTrack_LoadSettings");
  SInt32 = FigCFNumberGetSInt32();
  v29 = FigCFNumberGetSInt32();
  v31 = 0;
  cf = 0;
  v30 = 0;
  Value = FigCFDictionaryGetValue();
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (FigAssetCreateWithURL(*MEMORY[0x1E0C9AE00], Value, 0, 0, &v31))
    goto LABEL_36;
  v7 = v31;
  if (!v31)
    goto LABEL_36;
  v8 = *(unsigned int (**)(CFTypeRef, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v8 || v8(v7, v29, &v30))
    goto LABEL_36;
  for (i = 0; i != 24; i += 2)
  {
    v10 = v36[i];
    CMBaseObject = FigAssetTrackGetCMBaseObject(v30);
    v12 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
    if (v12)
      v12(CMBaseObject, v10, v6, &cf);
    v13 = cf;
    if (cf)
    {
      v14 = *(_QWORD *)(a3 + 16);
      v15 = v36[i + 1];
      v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 80);
      if (v16)
      {
        v17 = v16(v14, SInt32, v15, v13);
        v18 = v17 == -12784 || v17 == 0;
        if (!v18 && v17 != -12782)
          goto LABEL_36;
      }
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
    }
  }
  v20 = *(_QWORD *)(a3 + 16);
  v34 = 0;
  v35 = 0;
  v33 = 0;
  if (v31)
  {
    v21 = FigAssetGetCMBaseObject(v31);
    v22 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v22)
    {
      v23 = v22(v21, CFSTR("assetProperty_FormatReader"), v6, &v35);
      if (v29)
      {
        v24 = v35;
        if (!v23 && v35 != 0)
        {
          v26 = *(unsigned int (**)(CFTypeRef, _QWORD, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 56);
          if (v26)
          {
            if (!v26(v24, v29, &v34, 0)
              && !FigMetadataCopyTrackMetadata((uint64_t)v34, v6, (__CFArray **)&v33))
            {
              if (!v33)
              {
LABEL_32:
                if (v34)
                  CFRelease(v34);
                goto LABEL_34;
              }
              if (CFArrayGetCount((CFArrayRef)v33))
              {
                v27 = v33;
                v28 = *(void (**)(uint64_t, uint64_t, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 80);
                if (v28)
                  v28(v20, SInt32, CFSTR("MutableCompositionTrack_Metadata"), v27);
              }
            }
          }
        }
      }
    }
    if (v33)
      CFRelease(v33);
    goto LABEL_32;
  }
LABEL_34:
  if (v35)
    CFRelease(v35);
LABEL_36:
  if (v30)
    CFRelease(v30);
  if (v31)
    CFRelease(v31);
  if (cf)
    CFRelease(cf);
}

uint64_t figAssetExportSession_reassemblyCompletionHandler(uint64_t a1)
{
  return figAssetExportSession_transitionToStatus(a1, 4, 0);
}

void FAES_RemakerConfigRelease(int a1, CFTypeRef *a2)
{
  CFTypeRef v3;
  CFTypeRef v4;

  if (*a2)
    CFRelease(*a2);
  v3 = a2[1];
  if (v3)
    CFRelease(v3);
  v4 = a2[2];
  if (v4)
    CFRelease(v4);
  free(a2);
}

void figAssetExportSession_CreateUTTypesForPresetOnce(CFDictionaryRef *a1)
{
  uint64_t v2;
  const __CFAllocator *v3;
  CFArrayRef v4;
  CFArrayRef v5;
  CFArrayRef v6;
  CFArrayRef v7;
  CFArrayRef v8;
  CFArrayRef v9;
  CFArrayRef v10;
  CFArrayRef v11;
  CFArrayRef v12;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v14;
  uint64_t i;
  _QWORD v16[108];
  void *v17[2];
  void *values[6];

  values[4] = *(void **)MEMORY[0x1E0C80C00];
  if (figAssetExportSession_GetUTTypesForDefaultPassthroughPreset_onceToken != -1)
    dispatch_once_f(&figAssetExportSession_GetUTTypesForDefaultPassthroughPreset_onceToken, &figAssetExportSession_GetUTTypesForDefaultPassthroughPreset__gUTTypesForPassthroughPresetDefault, (dispatch_function_t)figAssetExportSession_CreateUTTypesForDefaultPassthroughPresetOnce);
  v2 = figAssetExportSession_GetUTTypesForDefaultPassthroughPreset__gUTTypesForPassthroughPresetDefault;
  if (figAssetExportSession_GetUTTypesForDefaultPassthroughPreset__gUTTypesForPassthroughPresetDefault)
  {
    v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v4 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)kFigFileType_QuickTimeMovie, 1, MEMORY[0x1E0C9B378]);
    if (v4)
    {
      v5 = v4;
      values[0] = CFSTR("com.apple.quicktime-movie");
      values[1] = CFSTR("public.mpeg-4");
      values[2] = CFSTR("com.apple.m4v-video");
      values[3] = CFSTR("com.apple.immersive-video");
      v6 = CFArrayCreate(v3, (const void **)values, 4, MEMORY[0x1E0C9B378]);
      if (!v6)
      {
        v12 = v5;
LABEL_17:
        CFRelease(v12);
        return;
      }
      v7 = v6;
      v8 = CFArrayCreate(v3, (const void **)kFigFileType_MPEG4, 1, MEMORY[0x1E0C9B378]);
      if (v8
        && (v17[0] = CFSTR("public.3gpp"),
            v17[1] = CFSTR("org.3gpp.adaptive-multi-rate-audio"),
            (v9 = CFArrayCreate(v3, (const void **)v17, 2, MEMORY[0x1E0C9B378])) != 0))
      {
        v10 = v9;
        v11 = CFArrayCreate(v3, (const void **)kFigFileType_AppleM4A, 1, MEMORY[0x1E0C9B378]);
        v12 = v11;
        if (v11)
        {
          v16[0] = v7;
          v16[1] = CFSTR("AVAssetExportPresetLowQuality");
          v16[2] = v7;
          v16[3] = CFSTR("AVAssetExportPresetLowQuality_16x9");
          v16[4] = v7;
          v16[5] = CFSTR("AVAssetExportPresetMediumQuality");
          v16[6] = v7;
          v16[7] = CFSTR("AVAssetExportPresetMediumQuality_16x9");
          v16[8] = v7;
          v16[9] = CFSTR("AVAssetExportPresetHighestQuality");
          v16[10] = v7;
          v16[11] = CFSTR("AVAssetExportPreset640x480");
          v16[12] = v7;
          v16[13] = CFSTR("AVAssetExportPreset1280x720");
          v16[14] = v7;
          v16[15] = CFSTR("AVAssetExportPreset960x540");
          v16[16] = v7;
          v16[17] = CFSTR("AVAssetExportPreset1920x1080");
          v16[18] = v7;
          v16[19] = CFSTR("AVAssetExportPreset3840x2160");
          v16[20] = v7;
          v16[21] = CFSTR("AVAssetExportPresetHEVCHighestQuality");
          v16[22] = v7;
          v16[23] = CFSTR("AVAssetExportPresetHEVCHighestQualityWithAlpha");
          v16[24] = v7;
          v16[25] = CFSTR("AVAssetExportPresetHEVC1920x1080");
          v16[26] = v7;
          v16[27] = CFSTR("AVAssetExportPresetHEVC1920x1080WithAlpha");
          v16[28] = v7;
          v16[29] = CFSTR("AVAssetExportPresetHEVC3840x2160");
          v16[30] = v7;
          v16[31] = CFSTR("AVAssetExportPresetHEVC3840x2160WithAlpha");
          v16[32] = v7;
          v16[33] = CFSTR("AVAssetExportPresetHEVC7680x4320");
          v16[34] = v7;
          v16[35] = CFSTR("AVAssetExportPresetMVHEVC960x960");
          v16[36] = v7;
          v16[37] = CFSTR("AVAssetExportPresetMVHEVC1440x1440");
          v16[38] = v7;
          v16[39] = CFSTR("AVAssetExportPresetICPLHEVC1280x1280WithHDR");
          v16[40] = v7;
          v16[41] = CFSTR("AVAssetExportPresetICPLHEVC1920x1080");
          v16[42] = v7;
          v16[43] = CFSTR("AVAssetExportPresetICPLHEVC1920x1920WithHDR");
          v16[44] = v7;
          v16[45] = CFSTR("AVAssetExportPresetICPLHighFPSHEVC1920x1920WithHDR");
          v16[46] = v7;
          v16[47] = CFSTR("AVAssetExportPresetICPLHEVC960x960WithHDR");
          v16[48] = v7;
          v16[49] = CFSTR("AVAssetExportPresetICPLHEVC1440x1440WithHDR");
          v16[50] = v7;
          v16[51] = CFSTR("AVAssetExportPresetPhotoStream");
          v16[52] = v7;
          v16[53] = CFSTR("AVAssetExportPresetPhotoStreamHD");
          v16[54] = v7;
          v16[55] = CFSTR("AVAssetExportPresetICPL480x480");
          v16[56] = v7;
          v16[57] = CFSTR("AVAssetExportPresetICPL");
          v16[58] = v7;
          v16[59] = CFSTR("AVAssetExportPresetICPL960x960");
          v16[60] = v7;
          v16[61] = CFSTR("AVAssetExportPresetICPLHD");
          v16[62] = v11;
          v16[63] = CFSTR("AVAssetExportPresetAppleM4A");
          v16[64] = v11;
          v16[65] = CFSTR("AVAssetExportPresetVoiceMemoALAC");
          v16[66] = v5;
          v16[67] = CFSTR("AVAssetExportPresetAppleProRes422LPCM");
          v16[68] = v5;
          v16[69] = CFSTR("AVAssetExportPresetAppleProRes4444LPCM");
          v16[70] = v2;
          v16[71] = CFSTR("AVAssetExportPresetPassthrough");
          v16[72] = v10;
          v16[73] = CFSTR("AVAssetExportPresetMMS");
          v16[74] = v10;
          v16[75] = CFSTR("AVAssetExportPreset3GPRelease6MMS");
          v16[76] = v10;
          v16[77] = CFSTR("AVAssetExportPresetAudioOnlyMMS");
          v16[78] = v5;
          v16[79] = CFSTR("AVAssetExportPresetYouTube");
          v16[80] = v5;
          v16[81] = CFSTR("AVAssetExportPresetYouTube_16x9");
          v16[82] = v5;
          v16[83] = CFSTR("AVAssetExportPresetMail");
          v16[84] = v5;
          v16[85] = CFSTR("AVAssetExportPresetMail_16x9");
          v16[86] = v5;
          v16[87] = CFSTR("AVAssetExportPresetAuxSmall");
          v16[88] = v5;
          v16[89] = CFSTR("AVAssetExportPresetHEVCAnimojiWithAlpha");
          v16[90] = v5;
          v16[91] = CFSTR("AVAssetExportPresetAVCAnimoji");
          v16[92] = v5;
          v16[93] = CFSTR("AVAssetExportPresetYouTubeHD");
          v16[94] = v7;
          v16[95] = CFSTR("AVAssetExportPresetMessage");
          v16[96] = v7;
          v16[97] = CFSTR("AVAssetExportPresetMessageHEVCWithHDR");
          v16[98] = v7;
          v16[99] = CFSTR("AVAssetExportPresetMessage_16x9");
          v16[100] = v7;
          v16[101] = CFSTR("AVAssetExportPresetMessageAux");
          v16[102] = v5;
          v16[103] = CFSTR("AVAssetExportPresetICPLAux");
          v16[104] = v5;
          v16[105] = CFSTR("AVAssetExportPresetICPLAuxHD");
          v16[106] = v11;
          v16[107] = CFSTR("AVAssetExportPresetMessageAudio");
          Mutable = CFDictionaryCreateMutable(v3, 54, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (Mutable)
          {
            v14 = Mutable;
            for (i = 0; i != 108; i += 2)
              CFDictionarySetValue(v14, (const void *)v16[i + 1], (const void *)v16[i]);
            *a1 = CFDictionaryCreateCopy(v3, v14);
            CFRelease(v14);
          }
        }
        CFRelease(v10);
      }
      else
      {
        v12 = 0;
      }
      CFRelease(v5);
      CFRelease(v7);
      if (v8)
        CFRelease(v8);
      if (v12)
        goto LABEL_17;
    }
  }
}

CFArrayRef figAssetExportSession_CreateUTTypesForDefaultPassthroughPresetOnce(CFArrayRef *a1)
{
  CFArrayRef result;
  const void *v3[12];

  v3[11] = *(const void **)MEMORY[0x1E0C80C00];
  v3[0] = CFSTR("com.apple.quicktime-movie");
  v3[1] = CFSTR("com.apple.m4a-audio");
  v3[2] = CFSTR("public.mpeg-4");
  v3[3] = CFSTR("com.apple.m4v-video");
  v3[4] = CFSTR("public.3gpp");
  v3[5] = CFSTR("org.3gpp.adaptive-multi-rate-audio");
  v3[6] = CFSTR("com.microsoft.waveform-audio");
  v3[7] = CFSTR("public.aiff-audio");
  v3[8] = CFSTR("public.aifc-audio");
  v3[9] = CFSTR("com.apple.coreaudio-format");
  v3[10] = CFSTR("com.apple.immersive-video");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3, 11, MEMORY[0x1E0C9B378]);
  *a1 = result;
  return result;
}

void figAssetExportSession_DetermineCompatibleFileTypes(const void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v9;

  v6 = malloc_type_malloc(0x18uLL, 0xE0040BC9ECFC2uLL);
  if (v6)
  {
    v7 = v6;
    if (dword_1EE2A35C0)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (a1)
      v9 = CFRetain(a1);
    else
      v9 = 0;
    *v7 = v9;
    v7[1] = a2;
    v7[2] = a3;
    if (figAssetExportSession_GetAsynchronousConcurrentDispatchQueue_onceToken != -1)
      dispatch_once_f(&figAssetExportSession_GetAsynchronousConcurrentDispatchQueue_onceToken, &figAssetExportSession_GetAsynchronousConcurrentDispatchQueue_sAsyncDispatchQueue, (dispatch_function_t)figAssetExportSession_CreateAsynchronousConcurrentDispatchQueueOnce);
    dispatch_async_f((dispatch_queue_t)figAssetExportSession_GetAsynchronousConcurrentDispatchQueue_sAsyncDispatchQueue, v7, (dispatch_function_t)figAssetExportSession_DetermineCompatibleFileTypes_Worker);
  }
}

uint64_t figAssetExportSession_ExportAsynchronously(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFAllocator *v8;
  uint64_t (*v9)(const void *, const __CFString *, const __CFAllocator *, CFNumberRef *);
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  unsigned int v13;
  unsigned int v14;
  __CFArray *v15;
  uint64_t v16;
  __CFArray *Mutable;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  CFTypeRef v21;
  CFErrorRef v22;
  uint64_t v24;
  CFTypeRef cf;
  CFNumberRef number;
  int valuePtr;
  os_log_type_t type;
  unsigned int v29;
  int v30;
  const char *v31;
  __int16 v32;
  const void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  valuePtr = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  number = 0;
  if (dword_1EE2A35C0)
  {
    v29 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v9 = *(uint64_t (**)(const void *, const __CFString *, const __CFAllocator *, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v9)
  {
    v15 = 0;
    v16 = 4294954514;
    goto LABEL_30;
  }
  v10 = v9(a1, CFSTR("kFigAssetExportSessionProperty_Status"), v8, &number);
  if ((_DWORD)v10)
    goto LABEL_41;
  CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
  if (valuePtr || !*(_QWORD *)(DerivedStorage + 88))
  {
    v10 = FigSignalErrorAt();
LABEL_41:
    v16 = v10;
LABEL_44:
    v15 = 0;
    goto LABEL_30;
  }
  v11 = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A35C0)
  {
    v29 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v13 = v29;
    if (os_log_type_enabled(v12, type))
      v14 = v13;
    else
      v14 = v13 & 0xFFFFFFFE;
    if (v14)
    {
      v30 = 136315394;
      v31 = "figAssetExportSession_validateOutputFileTypeForExport";
      v32 = 2048;
      v33 = a1;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(_QWORD *)(v11 + 144) || !figAssetExportSession_GetFigFormatReaderFileFormat())
  {
    v24 = FigSignalErrorAt();
    if ((_DWORD)v24)
    {
      v16 = v24;
      FigSignalErrorAt();
      goto LABEL_44;
    }
  }
  if (a2)
  {
    CFRetain(a1);
    *(_QWORD *)(DerivedStorage + 360) = a2;
    *(_QWORD *)(DerivedStorage + 368) = a3;
  }
  figAssetExportSession_transitionToStatus(a1, 1u, 0);
  if ((*(_DWORD *)(DerivedStorage + 24) - 1) <= 1)
  {
    figAssetExportSession_createRemakerAndBeginExport(a1);
    v15 = 0;
LABEL_29:
    v16 = 0;
    goto LABEL_30;
  }
  Mutable = CFArrayCreateMutable(v8, 0, MEMORY[0x1E0C9B378]);
  v15 = Mutable;
  if (Mutable)
  {
    CFArrayAppendValue(Mutable, CFSTR("assetProperty_Tracks"));
    CFArrayAppendValue(v15, CFSTR("assetProperty_FormatReader"));
    CFArrayAppendValue(v15, CFSTR("assetProperty_TrackReferences"));
    v18 = FigAssetExportSessionTaskCreate(a1, v15, (uint64_t)figAssetExportSession_exportAsynchronouslyDeferred, (uint64_t)figAssetExportSession_completeExportAsynchronously, 8uLL, &cf);
    if (!(_DWORD)v18)
    {
      v19 = (void *)cf;
      v20 = (_QWORD *)*((_QWORD *)cf + 6);
      if (a1)
        v21 = CFRetain(a1);
      else
        v21 = 0;
      *v20 = v21;
      figAssetExportSession_runTaskAfterLoadingRequiredAssetProperties(v19);
      goto LABEL_29;
    }
  }
  else
  {
    v18 = FigSignalErrorAt();
  }
  v16 = v18;
LABEL_30:
  if (number)
    CFRelease(number);
  if (cf)
    CFRelease(cf);
  if (v15)
    CFRelease(v15);
  if ((_DWORD)v16)
  {
    v22 = CFErrorCreate(v8, CFSTR("FigAssetExportSession_ErrorDomain"), (int)v16, 0);
    figAssetExportSession_transitionToStatus(a1, 5u, v22);
    if (v22)
      CFRelease(v22);
  }
  return v16;
}

void figAssetExportSession_CancelExport(const void *a1)
{
  figAssetExportSession_transitionToStatus(a1, 6u, 0);
}

void figAssetExportSession_DetermineCompatibleFileTypes_Worker(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage;
  if (*(_QWORD *)(DerivedStorage + 408) != -1)
    dispatch_once_f((dispatch_once_t *)(DerivedStorage + 408), *(void **)a1, (dispatch_function_t)figAssetExportSession_DetermineCompatibleFileTypesOnce);
  (*(void (**)(_QWORD, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16), *(_QWORD *)(v3 + 416));
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  free((void *)a1);
}

void figAssetExportSession_DetermineCompatibleFileTypesOnce(uint64_t a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  CFMutableArrayRef Mutable;
  const __CFArray *v5;
  const void *v6;
  unsigned int (*v7)(uint64_t, const __CFString *, const __CFAllocator *, CFArrayRef *);
  uint64_t v8;
  NSObject *v9;
  unint64_t Count;
  unint64_t v11;
  void *v12;
  CFIndex v13;
  uint64_t v14;
  const void *ValueAtIndex;
  void *v16;
  void *v17;
  CFArrayRef theArray;
  CFRange v19;

  theArray = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    v16 = 0;
    goto LABEL_23;
  }
  v5 = Mutable;
  if (*(_QWORD *)(DerivedStorage + 80))
    v6 = *(const void **)(DerivedStorage + 80);
  else
    v6 = *(const void **)(DerivedStorage + 72);
  v7 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v7
    || v7(a1, CFSTR("kFigAssetExportSessionProperty_SupportedFileTypes"), v3, &theArray)
    || (v8 = FigSimpleMutexCreate()) == 0)
  {
    v9 = 0;
    goto LABEL_16;
  }
  v9 = dispatch_group_create();
  if (!v9)
  {
LABEL_16:
    v16 = 0;
    goto LABEL_19;
  }
  Count = CFArrayGetCount(theArray);
  if (Count)
  {
    v11 = Count;
    if (!(Count >> 59))
    {
      v12 = malloc_type_malloc(32 * Count, 0x5CC9CBA6uLL);
      if (v12)
      {
        v13 = 0;
        v17 = v12;
        v14 = (uint64_t)v12;
        do
        {
          *(_QWORD *)(v14 + 16) = v5;
          *(_QWORD *)(v14 + 24) = v9;
          ValueAtIndex = CFArrayGetValueAtIndex(theArray, v13);
          *(_QWORD *)v14 = v8;
          *(_QWORD *)(v14 + 8) = ValueAtIndex;
          dispatch_group_enter(v9);
          FigAssetExportSessionDetermineCompatibilityOfExportPreset(v6, *(const void **)(DerivedStorage + 16), *(_DWORD *)(DerivedStorage + 24), *(const void **)(v14 + 8), (void (*)(uint64_t, _QWORD))figAssetExportSession_DetermineCompatibleFileTypesOnce_CompletionHandler, v14);
          ++v13;
          v14 += 32;
        }
        while (v11 != v13);
        v16 = v17;
        goto LABEL_18;
      }
    }
    goto LABEL_16;
  }
  v16 = malloc_type_malloc(0, 0x4BBE3847uLL);
  if (v16)
  {
LABEL_18:
    dispatch_group_wait(v9, 0xFFFFFFFFFFFFFFFFLL);
    v19.length = CFArrayGetCount(v5);
    v19.location = 0;
    CFArraySortValues(v5, v19, (CFComparatorFunction)figAssetExportSession_StringArrayComparatorFunction, 0);
    *(_QWORD *)(DerivedStorage + 416) = CFArrayCreateCopy(v3, v5);
  }
LABEL_19:
  CFRelease(v5);
  if (theArray)
    CFRelease(theArray);
  if (v9)
    dispatch_release(v9);
LABEL_23:
  FigSimpleMutexDestroy();
  free(v16);
}

void figAssetExportSession_DetermineCompatibleFileTypesOnce_CompletionHandler(_QWORD *a1, int a2)
{
  if (a2 && !MEMORY[0x19402EEEC](*a1))
  {
    CFArrayAppendValue((CFMutableArrayRef)a1[2], (const void *)a1[1]);
    MEMORY[0x19402EF04](*a1);
  }
  dispatch_group_leave((dispatch_group_t)a1[3]);
}

CFComparisonResult figAssetExportSession_StringArrayComparatorFunction(const __CFString *a1, const __CFString *a2)
{
  return CFStringCompare(a1, a2, 0);
}

void figAssetExportSession_createRemakerAndBeginExport(const void *a1)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v4;
  uint64_t v5;
  uint64_t CMBaseObject;
  uint64_t (*v7)(uint64_t, const __CFString *, _QWORD, CFDictionaryRef *);
  const __CFAllocator *v8;
  int v9;
  CFDictionaryRef v10;
  uint64_t v11;
  CFTypeRef v12;
  __int128 v13;
  uint64_t v14;
  const void *v15;
  uint64_t (*v16)(uint64_t, CMTimeRange *);
  CFStringRef v17;
  const __CFArray *v18;
  __CFString *v19;
  uint64_t v20;
  int v21;
  CFTypeRef v22;
  CFErrorRef v23;
  CFTypeRef *v24;
  uint64_t (*v25)(CFTypeRef);
  CFTypeRef *v26;
  CFTypeRef cf;
  CFErrorRef v28;
  CMTimeRange start;
  CMTime duration;
  CMTime type;
  CFDictionaryRef dictionaryRepresentation;
  CMTimeRange v33;
  CMTimeRange otherRange;
  uint64_t v35;
  CFRange v36;

  v35 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v28 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v26 = 0;
  if (dword_1EE2A35C0)
  {
    LODWORD(start.start.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_DWORD *)(DerivedStorage + 48) != 1)
  {
    LODWORD(v12) = 0;
    goto LABEL_33;
  }
  if (!*(_BYTE *)(DerivedStorage + 8))
  {
    dictionaryRepresentation = 0;
    v4 = *(_QWORD *)(DerivedStorage + 184);
    if (!v4
      || !*(_QWORD *)(v4 + 144)
      || (v5 = *(_QWORD *)(DerivedStorage + 16)) == 0
      || (CMBaseObject = FigAssetGetCMBaseObject(v5),
          (v7 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48)) == 0))
    {
LABEL_21:
      v17 = CFURLCopyPathExtension(*(CFURLRef *)(DerivedStorage + 88));
      if (v17)
      {
        if (figAssetExportSession_UnsupportedOutputURLPathExtensions_createExtensionListOnce != -1)
          dispatch_once_f(&figAssetExportSession_UnsupportedOutputURLPathExtensions_createExtensionListOnce, &figAssetExportSession_UnsupportedOutputURLPathExtensions_sUnsupportedExtensionList, (dispatch_function_t)figAssetExportSession_UnsupportedOutputURLPathExtensionsOnce_Worker);
        v18 = (const __CFArray *)figAssetExportSession_UnsupportedOutputURLPathExtensions_sUnsupportedExtensionList;
        v36.length = CFArrayGetCount((CFArrayRef)figAssetExportSession_UnsupportedOutputURLPathExtensions_sUnsupportedExtensionList);
        v36.location = 0;
        if (CFArrayContainsValue(v18, v36, v17))
        {
          LODWORD(v12) = FigSignalErrorAt();
LABEL_32:
          CFRelease(v17);
          goto LABEL_33;
        }
      }
      if (!figAssetExportSession_IsAssetPropertyAvailable(*(_QWORD *)(DerivedStorage + 16), (uint64_t)CFSTR("assetProperty_FormatReader"), (CFTypeRef *)&v28)|| !figAssetExportSession_IsAssetPropertyAvailable(*(_QWORD *)(DerivedStorage + 16), (uint64_t)CFSTR("assetProperty_Tracks"), (CFTypeRef *)&v28))
      {
        goto LABEL_30;
      }
      v19 = *(__CFString **)(DerivedStorage + 72);
      v20 = *(_QWORD *)(DerivedStorage + 16);
      v21 = *(_DWORD *)(DerivedStorage + 24);
      v22 = figAssetExportSession_actualOutputFileType((uint64_t)a1);
      if (!figAssetExportSession_IsExportPresetCompatibleWithAssetAndOutputFileType(v19, v20, v21, v22, *(_QWORD *)(DerivedStorage + 184) != 0)&& (*(_BYTE *)(DerivedStorage + 98) != 1|| !figAssetExportSession_sourceVideoContainsAV1(*(_QWORD *)(DerivedStorage + 16))))
      {
        LODWORD(v12) = FigSignalErrorAt();
        goto LABEL_31;
      }
      v28 = figAssetExportSession_createFigRemakers_CopyError((uint64_t)a1, &cf, &v26);
      if (v28)
      {
LABEL_30:
        LODWORD(v12) = 0;
        goto LABEL_31;
      }
      *(_BYTE *)(DerivedStorage + 97) = 0;
      v12 = cf;
      if (!cf)
      {
LABEL_31:
        if (!v17)
          goto LABEL_33;
        goto LABEL_32;
      }
      FigReadWriteLockLockForWrite();
      if (*(_DWORD *)(DerivedStorage + 48) == 1)
      {
        *(_QWORD *)(DerivedStorage + 40) = v12;
        v24 = v26;
        *(_QWORD *)(DerivedStorage + 112) = 0;
        *(_QWORD *)(DerivedStorage + 120) = v24;
        *(_QWORD *)(DerivedStorage + 104) = 0;
        cf = 0;
        figAssetExportSession_addListeners((uint64_t)v12);
        v12 = *(CFTypeRef *)(DerivedStorage + 40);
        v25 = *(uint64_t (**)(CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
        if (!v25)
        {
          LODWORD(v12) = -12782;
LABEL_51:
          FigSignalErrorAt();
          goto LABEL_52;
        }
        LODWORD(v12) = v25(v12);
        if ((_DWORD)v12)
          goto LABEL_51;
      }
      else
      {
        LODWORD(v12) = 0;
      }
LABEL_52:
      FigReadWriteLockUnlockForWrite();
      goto LABEL_31;
    }
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v9 = v7(CMBaseObject, CFSTR("Duration"), *MEMORY[0x1E0C9AE00], &dictionaryRepresentation);
    v10 = dictionaryRepresentation;
    if (v9)
    {
      LODWORD(v12) = 1;
      if (dictionaryRepresentation)
LABEL_19:
        CFRelease(v10);
    }
    else
    {
      memset(&type, 0, sizeof(type));
      v11 = MEMORY[0x1E0CA2E68];
      if (dictionaryRepresentation)
        CMTimeMakeFromDictionary(&type, dictionaryRepresentation);
      else
        type = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      memset(&v33, 0, sizeof(v33));
      *(_OWORD *)&start.start.value = *(_OWORD *)v11;
      start.start.epoch = *(_QWORD *)(v11 + 16);
      duration = type;
      CMTimeRangeMake(&otherRange, &start.start, &duration);
      v13 = *(_OWORD *)(DerivedStorage + 224);
      *(_OWORD *)&start.start.value = *(_OWORD *)(DerivedStorage + 208);
      *(_OWORD *)&start.start.epoch = v13;
      *(_OWORD *)&start.duration.timescale = *(_OWORD *)(DerivedStorage + 240);
      CMTimeRangeGetIntersection(&v33, &start, &otherRange);
      if (!*(_QWORD *)DerivedStorage
        || (v14 = FigCFWeakReferenceHolderCopyReferencedObject()) == 0
        || (v15 = (const void *)v14,
            v16 = *(uint64_t (**)(uint64_t, CMTimeRange *))(*(_QWORD *)(DerivedStorage + 184) + 144),
            start = v33,
            LODWORD(v12) = v16(v14, &start),
            CFRelease(v15),
            !(_DWORD)v12))
      {
        LODWORD(v12) = 0;
        v28 = CFErrorCreate(v8, CFSTR("FigAssetExportSession_ErrorDomain"), -17390, 0);
      }
      v10 = dictionaryRepresentation;
      if (dictionaryRepresentation)
        goto LABEL_19;
    }
    if (!(_DWORD)v12)
      goto LABEL_33;
    goto LABEL_21;
  }
  LODWORD(v12) = FigSignalErrorAt();
LABEL_33:
  if (cf)
    CFRelease(cf);
  if ((_DWORD)v12)
  {
    v23 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("FigAssetExportSession_ErrorDomain"), (int)v12, 0);
    if (!v23)
      return;
    goto LABEL_37;
  }
  v23 = v28;
  if (v28)
  {
LABEL_37:
    figAssetExportSession_transitionToStatus(a1, 5u, v23);
    CFRelease(v23);
  }
}

uint64_t figAssetExportSession_exportAsynchronouslyDeferred(const void **a1)
{
  figAssetExportSession_createRemakerAndBeginExport(*a1);
  return 0;
}

void figAssetExportSession_completeExportAsynchronously(const void **a1, const void *a2)
{
  if (a2)
    figAssetExportSession_transitionToStatus(*a1, 5u, a2);
  if (*a1)
    CFRelease(*a1);
}

const __CFString *figAssetExportSession_GetFigFormatReaderFileFormat()
{
  __CFString **v0;

  if (FigCFEqual())
  {
    v0 = kFigFormatWriterOption_FileFormat_QuickTimeMovie;
    return *v0;
  }
  if (FigCFEqual())
  {
    v0 = kFigFormatWriterOption_FileFormat_MP4Family;
    return *v0;
  }
  if (FigCFEqual())
  {
    v0 = kFigFormatWriterOption_FileFormat_3GPFamily;
    return *v0;
  }
  if (FigCFEqual())
  {
    v0 = kFigFormatWriterOption_FileFormat_iTunesVideoFamily;
    return *v0;
  }
  if (FigCFEqual())
  {
    v0 = kFigFormatWriterOption_FileFormat_iTunesAudioFamily;
    return *v0;
  }
  if (FigCFEqual())
  {
    v0 = kFigFormatWriterOption_FileFormat_AppleImmersiveVideo;
    return *v0;
  }
  if (FigCFEqual())
  {
    v0 = kFigFormatWriterOption_FileFormat_CAFAudioFile;
    return *v0;
  }
  if (FigCFEqual())
  {
    v0 = kFigFormatWriterOption_FileFormat_WAVEAudioFile;
    return *v0;
  }
  if (FigCFEqual() || FigCFEqual())
  {
    v0 = kFigFormatWriterOption_FileFormat_AIFFAudioFile;
    return *v0;
  }
  if (FigCFEqual())
    return CFSTR("AMRAudioFile");
  else
    return 0;
}

uint64_t figAssetExportSession_IsAssetPropertyAvailable(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t CMBaseObject;
  unsigned int (*v7)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, char *, uint64_t *, CFTypeRef *);
  CFIndex v10;
  uint64_t v11;
  void (*v12)(uint64_t, const __CFString *, _QWORD, void **);
  const __CFAllocator *v13;
  __CFDictionary *Mutable;
  __CFDictionary *v15;
  void *v16;
  uint64_t v18;
  void *value;
  CFTypeRef v20;
  CFTypeRef cf;

  v20 = 0;
  cf = 0;
  value = 0;
  CMBaseObject = FigAssetGetCMBaseObject(a1);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
  if (v7 && !v7(CMBaseObject, a2, 0, &v20))
  {
    v8 = 1;
    goto LABEL_23;
  }
  FigSignalErrorAt();
  v18 = 0;
  v9 = *(void (**)(uint64_t, uint64_t, char *, uint64_t *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 8);
  if (!v9 || (v9(a1, a2, (char *)&v18 + 4, &v18, &cf), HIDWORD(v18) != 3))
  {
    v8 = 0;
    *a3 = cf;
    cf = 0;
    goto LABEL_23;
  }
  if ((_DWORD)v18 == -12493)
    v10 = -12493;
  else
    v10 = -16979;
  FigSignalErrorAt();
  v11 = FigAssetGetCMBaseObject(a1);
  v12 = *(void (**)(uint64_t, const __CFString *, _QWORD, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
  if (v12)
    v12(v11, CFSTR("assetProperty_CreationURL"), 0, &value);
  v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v15 = Mutable;
  if (value)
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0C9AFF8], value);
  if (cf)
  {
    CFDictionaryAddValue(v15, (const void *)*MEMORY[0x1E0C9B000], cf);
    v16 = (void *)cf;
    if (cf && (_DWORD)v18 != -12493)
      goto LABEL_19;
    if (cf)
      CFRelease(cf);
  }
  v16 = CFErrorCreate(v13, CFSTR("FigAssetExportSession_ErrorDomain"), v10, v15);
LABEL_19:
  *a3 = v16;
  cf = 0;
  if (v15)
    CFRelease(v15);
  v8 = 0;
LABEL_23:
  if (value)
    CFRelease(value);
  if (v20)
    CFRelease(v20);
  if (cf)
    CFRelease(cf);
  return v8;
}

uint64_t figAssetExportSession_IsExportPresetCompatibleWithAssetAndOutputFileType(__CFString *a1, uint64_t a2, int a3, const void *EnabledTrackWithHomogeneousStereoSegments, int a5)
{
  int AppBooleanValue;
  BOOL v11;
  BOOL v12;
  const __CFArray *v13;
  CFIndex Count;
  uint64_t v15;
  uint64_t CMBaseObject;
  void (*v17)(uint64_t, const __CFString *, uint64_t, CMTime *);
  uint64_t v18;
  unsigned int (*v19)(uint64_t, const __CFString *, uint64_t, CMTime *);
  CFIndex v20;
  CFIndex v21;
  CFIndex v22;
  const void *ValueAtIndex;
  unsigned int (*v24)(const void *, const void **, const __CFArray **);
  CMTimeValue value;
  uint64_t v27;
  unsigned int (*v28)(CMTimeValue, uint64_t, CFTypeRef *, _QWORD);
  uint64_t v29;
  unsigned int (*v30)(uint64_t, const __CFString *, uint64_t, CMTimeRange *);
  CFIndex v31;
  uint64_t v32;
  const opaqueCMFormatDescription *v33;
  const opaqueCMFormatDescription *v34;
  uint64_t v35;
  const opaqueCMFormatDescription *v36;
  int v37;
  _BOOL4 v38;
  BOOL v39;
  BOOL v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, const __CFString *, uint64_t, CMTimeRange *);
  int v43;
  const void *v44;
  CFIndex v45;
  const opaqueCMFormatDescription *v46;
  _BOOL4 v47;
  int v48;
  int v49;
  __CFSet *v50;
  const __CFSet *v51;
  void (*v52)(uint64_t, uint64_t, CFTypeRef *);
  void (*v53)(uint64_t, uint64_t, const __CFArray **);
  const __CFArray *v54;
  const __CFArray *v55;
  CFIndex v56;
  CFRange v57;
  const __CFArray *v58;
  CFIndex v59;
  CFIndex v60;
  uint64_t v61;
  const void *v62;
  int v63;
  const __CFArray *v64;
  const __CFDictionary *v65;
  const __CFArray *v66;
  const __CFArray *v67;
  CFIndex v68;
  const __CFArray *v69;
  CFIndex v70;
  CFIndex v71;
  const void *v72;
  const __CFArray *v73;
  int HasDecodableTrack;
  int v75;
  _BOOL4 v76;
  int v77;
  BOOL v78;
  unsigned int v79;
  const __CFDictionary *SettingForFigRemaker;
  double UntransformedSourceDimension;
  double v83;
  double v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  CMTime cf;
  CMTime theArray;
  CMTimeRange keyExistsAndHasValidFormat;
  const void *v91;
  const __CFArray *v92;
  CFTypeRef v93[2];
  CFRange v94;
  CFRange v95;
  CFRange v96;
  CFRange v97;
  CFRange v98;

  LOBYTE(keyExistsAndHasValidFormat.start.value) = 0;
  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("disable_export_compatibilitycheck"), CFSTR("com.apple.avfoundation"), (Boolean *)&keyExistsAndHasValidFormat);
  if (LOBYTE(keyExistsAndHasValidFormat.start.value))
    v11 = AppBooleanValue == 0;
  else
    v11 = 1;
  if (!v11)
  {
    v48 = 0;
    LODWORD(EnabledTrackWithHomogeneousStereoSegments) = 1;
    goto LABEL_145;
  }
  if (FigCFEqual())
  {
    theArray.value = 0;
    cf.value = 0;
    v93[0] = 0;
    v12 = FigCFEqual()
       || FigCFEqual()
       || FigCFEqual()
       || FigCFEqual() != 0;
    if (figAssetExportSession_GetUTTypesForAudioOnly_onceToken != -1)
      dispatch_once_f(&figAssetExportSession_GetUTTypesForAudioOnly_onceToken, &figAssetExportSession_GetUTTypesForAudioOnly__gUTTypesForAudioOnlyArray, (dispatch_function_t)figAssetExportSession_CreateUTTypesForAudioOnlyOnce);
    v13 = (const __CFArray *)figAssetExportSession_GetUTTypesForAudioOnly__gUTTypesForAudioOnlyArray;
    Count = CFArrayGetCount((CFArrayRef)figAssetExportSession_GetUTTypesForAudioOnly__gUTTypesForAudioOnlyArray);
    if (EnabledTrackWithHomogeneousStereoSegments)
    {
      v94.length = Count;
      v94.location = 0;
      if (CFArrayContainsValue(v13, v94, EnabledTrackWithHomogeneousStereoSegments))
      {
        v15 = *MEMORY[0x1E0C9AE00];
        CMBaseObject = FigAssetGetCMBaseObject(a2);
        v17 = *(void (**)(uint64_t, const __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
        if (v17)
          v17(CMBaseObject, CFSTR("assetProperty_Tracks"), v15, &theArray);
        v18 = FigAssetGetCMBaseObject(a2);
        v19 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
        if (!v19 || v19(v18, CFSTR("assetProperty_FormatReader"), v15, &cf))
        {
LABEL_102:
          v49 = 0;
          goto LABEL_69;
        }
        if (theArray.value)
        {
          v20 = CFArrayGetCount((CFArrayRef)theArray.value);
          if (v20 >= 1)
          {
            v21 = v20;
            v85 = v12;
            v22 = 0;
            v87 = 0;
            v86 = v15;
            do
            {
              ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)theArray.value, v22);
              LODWORD(v92) = 0;
              LODWORD(v91) = 0;
              v24 = *(unsigned int (**)(const void *, const void **, const __CFArray **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
              if (!v24)
                goto LABEL_55;
              if (v24(ValueAtIndex, &v91, &v92) || (_DWORD)v92 != 1936684398)
                goto LABEL_55;
              value = cf.value;
              v27 = v91;
              v28 = *(unsigned int (**)(CMTimeValue, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 56);
              if (!v28 || v28(value, v27, v93, 0))
                goto LABEL_55;
              keyExistsAndHasValidFormat.start.value = 0;
              v29 = FigAssetTrackGetCMBaseObject(ValueAtIndex);
              v30 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
              if (v30
                && !v30(v29, CFSTR("FormatDescriptionArray"), v15, &keyExistsAndHasValidFormat)
                && (v31 = CFArrayGetCount((CFArrayRef)keyExistsAndHasValidFormat.start.value)) != 0
                && (v32 = v31,
                    v33 = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex((CFArrayRef)keyExistsAndHasValidFormat.start.value, 0), v32 >= 2))
              {
                v34 = v33;
                v35 = 2;
                do
                {
                  v36 = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex((CFArrayRef)keyExistsAndHasValidFormat.start.value, v35 - 1);
                  v37 = CMFormatDescriptionEqual(v36, v34);
                  v38 = v37 != 0;
                  if (v37)
                    v39 = v32 == v35;
                  else
                    v39 = 1;
                  ++v35;
                }
                while (!v39);
              }
              else
              {
                v38 = 1;
              }
              if (keyExistsAndHasValidFormat.start.value)
                CFRelease((CFTypeRef)keyExistsAndHasValidFormat.start.value);
              if (!v38
                || figAssetExportSession_HasEditSegmentData((uint64_t)v93[0], 0)
                || figAssetExportSession_HasEditSegmentData((uint64_t)v93[0], 1))
              {
                goto LABEL_102;
              }
              if (FigCFEqual())
              {
                if (figAssetExportSession_HasEditSegmentData((uint64_t)v93[0], 2))
                  goto LABEL_102;
              }
              else if (FigCFEqual()
                     && figAssetExportSession_HasEditSegmentData((uint64_t)v93[0], 2))
              {
                keyExistsAndHasValidFormat.start.value = 0;
                v41 = FigAssetTrackGetCMBaseObject(ValueAtIndex);
                v42 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                if (!v42)
                  goto LABEL_102;
                v43 = v42(v41, CFSTR("FormatDescriptionArray"), v86, &keyExistsAndHasValidFormat);
                v44 = (const void *)keyExistsAndHasValidFormat.start.value;
                if (v43
                  || (v45 = CFArrayGetCount((CFArrayRef)keyExistsAndHasValidFormat.start.value),
                      v44 = (const void *)keyExistsAndHasValidFormat.start.value,
                      !v45))
                {
                  v47 = 0;
                  if (v44)
LABEL_63:
                    CFRelease(v44);
                }
                else
                {
                  v46 = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex((CFArrayRef)keyExistsAndHasValidFormat.start.value, 0);
                  v47 = CMFormatDescriptionGetMediaSubType(v46) == 1819304813;
                  v44 = (const void *)keyExistsAndHasValidFormat.start.value;
                  if (keyExistsAndHasValidFormat.start.value)
                    goto LABEL_63;
                }
                if (!v47)
                  goto LABEL_102;
              }
              v40 = v85;
              if (v87 <= 0)
                v40 = 0;
              if (v40)
                goto LABEL_102;
              ++v87;
              if (v93[0])
              {
                CFRelease(v93[0]);
                v93[0] = 0;
              }
              v15 = v86;
LABEL_55:
              ++v22;
            }
            while (v22 != v21);
          }
        }
      }
    }
    v49 = 1;
LABEL_69:
    if (v93[0])
      CFRelease(v93[0]);
    if (cf.value)
      CFRelease((CFTypeRef)cf.value);
    if (theArray.value)
      CFRelease((CFTypeRef)theArray.value);
    if (v49 && (v50 = figAssetExportSession_CopyChapterTracks(a2)) != 0)
    {
      v51 = v50;
      if (EnabledTrackWithHomogeneousStereoSegments)
      {
        LODWORD(EnabledTrackWithHomogeneousStereoSegments) = figAssetExportSession_CanWriteMediaOfAsset(a2, a3, (uint64_t)EnabledTrackWithHomogeneousStereoSegments, v50);
      }
      else
      {
        if (figAssetExportSession_GetUTTypesForDefaultPassthroughPreset_onceToken != -1)
          dispatch_once_f(&figAssetExportSession_GetUTTypesForDefaultPassthroughPreset_onceToken, &figAssetExportSession_GetUTTypesForDefaultPassthroughPreset__gUTTypesForPassthroughPresetDefault, (dispatch_function_t)figAssetExportSession_CreateUTTypesForDefaultPassthroughPresetOnce);
        v58 = (const __CFArray *)figAssetExportSession_GetUTTypesForDefaultPassthroughPreset__gUTTypesForPassthroughPresetDefault;
        v59 = CFArrayGetCount((CFArrayRef)figAssetExportSession_GetUTTypesForDefaultPassthroughPreset__gUTTypesForPassthroughPresetDefault);
        if (v59 < 1)
        {
          LODWORD(EnabledTrackWithHomogeneousStereoSegments) = 0;
        }
        else
        {
          v60 = v59;
          v61 = 1;
          do
          {
            v62 = CFArrayGetValueAtIndex(v58, v61 - 1);
            v63 = figAssetExportSession_CanWriteMediaOfAsset(a2, a3, (uint64_t)v62, v51);
            LODWORD(EnabledTrackWithHomogeneousStereoSegments) = v63;
            if (v61 >= v60)
              break;
            ++v61;
          }
          while (!v63);
        }
      }
      CFRelease(v51);
      v48 = 0;
    }
    else
    {
      v48 = 0;
      LODWORD(EnabledTrackWithHomogeneousStereoSegments) = 0;
    }
    goto LABEL_145;
  }
  v92 = 0;
  v93[0] = 0;
  v52 = *(void (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v52)
    v52(a2, 1936684398, v93);
  v53 = *(void (**)(uint64_t, uint64_t, const __CFArray **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v53)
    v53(a2, 1986618469, &v92);
  if ((!v93[0] || !CFArrayGetCount((CFArrayRef)v93[0])) && (!v92 || !CFArrayGetCount(v92)))
    goto LABEL_140;
  if (figAssetExportSession_GetPresetToUTTypesMap_onceToken != -1)
    dispatch_once_f(&figAssetExportSession_GetPresetToUTTypesMap_onceToken, &figAssetExportSession_GetPresetToUTTypesMap__gUTTypesForPresets, (dispatch_function_t)figAssetExportSession_CreateUTTypesForPresetOnce);
  v54 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)figAssetExportSession_GetPresetToUTTypesMap__gUTTypesForPresets, a1);
  if (!v54)
    goto LABEL_104;
  v55 = v54;
  v56 = CFArrayGetCount(v54);
  v57.length = v56;
  if (EnabledTrackWithHomogeneousStereoSegments)
  {
    v57.location = 0;
    if (!CFArrayContainsValue(v55, v57, EnabledTrackWithHomogeneousStereoSegments))
      goto LABEL_140;
LABEL_104:
    if (figAssetExportSession_GetAudioOnlyPresets_onceToken != -1)
      dispatch_once_f(&figAssetExportSession_GetAudioOnlyPresets_onceToken, &figAssetExportSession_GetAudioOnlyPresets_sAudioOnlyPresets, (dispatch_function_t)figAssetExportSession_CreateAudioOnlyPresetsOnce);
    v64 = (const __CFArray *)figAssetExportSession_GetAudioOnlyPresets_sAudioOnlyPresets;
    if (figAssetExportSession_GetPresetToUTTypesMap_onceToken != -1)
      dispatch_once_f(&figAssetExportSession_GetPresetToUTTypesMap_onceToken, &figAssetExportSession_GetPresetToUTTypesMap__gUTTypesForPresets, (dispatch_function_t)figAssetExportSession_CreateUTTypesForPresetOnce);
    v65 = (const __CFDictionary *)figAssetExportSession_GetPresetToUTTypesMap__gUTTypesForPresets;
    v95.length = CFArrayGetCount(v64);
    v95.location = 0;
    if (!CFArrayContainsValue(v64, v95, a1))
    {
      if (figAssetExportSession_GetUTTypesForAudioOnly_onceToken != -1)
        dispatch_once_f(&figAssetExportSession_GetUTTypesForAudioOnly_onceToken, &figAssetExportSession_GetUTTypesForAudioOnly__gUTTypesForAudioOnlyArray, (dispatch_function_t)figAssetExportSession_CreateUTTypesForAudioOnlyOnce);
      v67 = (const __CFArray *)figAssetExportSession_GetUTTypesForAudioOnly__gUTTypesForAudioOnlyArray;
      v68 = CFArrayGetCount((CFArrayRef)figAssetExportSession_GetUTTypesForAudioOnly__gUTTypesForAudioOnlyArray);
      if (!EnabledTrackWithHomogeneousStereoSegments
        || (v96.location = 0,
            v96.length = v68,
            !CFArrayContainsValue(v67, v96, EnabledTrackWithHomogeneousStereoSegments)))
      {
        v69 = (const __CFArray *)CFDictionaryGetValue(v65, a1);
        v70 = 0;
        while (1)
        {
          v71 = v69 ? CFArrayGetCount(v69) : 0;
          if (v70 == v71)
            break;
          v72 = CFArrayGetValueAtIndex(v69, v70);
          v97.location = 0;
          v97.length = v68;
          ++v70;
          if (!CFArrayContainsValue(v67, v97, v72))
          {
            if (figAssetExportSession_GetVideoOnlyPresets_onceToken != -1)
              dispatch_once_f(&figAssetExportSession_GetVideoOnlyPresets_onceToken, &figAssetExportSession_GetVideoOnlyPresets__gVideoOnlyPresets, (dispatch_function_t)figAssetExportSession_CreateGetVideoOnlyPresetsOnce);
            v73 = (const __CFArray *)figAssetExportSession_GetVideoOnlyPresets__gVideoOnlyPresets;
            v98.length = CFArrayGetCount((CFArrayRef)figAssetExportSession_GetVideoOnlyPresets__gVideoOnlyPresets);
            v98.location = 0;
            if (CFArrayContainsValue(v73, v98, a1))
            {
              v66 = v92;
              goto LABEL_110;
            }
            HasDecodableTrack = figAssetExportSession_HasDecodableTrack((CFArrayRef)v93[0]);
            v75 = figAssetExportSession_HasDecodableTrack(v92);
            if (v93[0] && CFArrayGetCount((CFArrayRef)v93[0]) && !HasDecodableTrack)
            {
              v48 = 1;
            }
            else
            {
              if (v92)
                v76 = CFArrayGetCount(v92) != 0;
              else
                v76 = 0;
              if (v75)
                v48 = 0;
              else
                v48 = v76;
            }
            if (a5)
            {
              if (!figAssetExportSession_IsStereoPreset(a1))
                goto LABEL_111;
              goto LABEL_140;
            }
            if (!figAssetExportSession_IsAlphaPreset(a1)
              || remakerFamily_GetEnabledTrackWithAllAlphaSegments(v92))
            {
              if (!figAssetExportSession_IsStereoPreset(a1))
                goto LABEL_111;
              EnabledTrackWithHomogeneousStereoSegments = (const void *)remakerFamily_GetEnabledTrackWithHomogeneousStereoSegments(v92);
              if (!(_DWORD)EnabledTrackWithHomogeneousStereoSegments)
              {
                v48 = 0;
                goto LABEL_141;
              }
              v91 = 0;
              theArray = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
              cf = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
              CMTimeRangeMake(&keyExistsAndHasValidFormat, &theArray, &cf);
              SettingForFigRemaker = figAssetExportSession_getSettingForFigRemaker(a2, (uint64_t)EnabledTrackWithHomogeneousStereoSegments, (__int128 *)&keyExistsAndHasValidFormat.start.value, 0, a1, 0, &v91);
              if (v91)
                CFRelease(v91);
              if (SettingForFigRemaker)
              {
                if (CFDictionaryGetValue(SettingForFigRemaker, CFSTR("Video")))
                {
                  UntransformedSourceDimension = FigAssetExportSession_getUntransformedSourceDimension(a2, (uint64_t)EnabledTrackWithHomogeneousStereoSegments, 0);
                  if (FigExportSettingsCalculateOutputDimensions(UntransformedSourceDimension, v83) >= 960.0
                    && v84 >= 960.0)
                  {
                    goto LABEL_111;
                  }
                }
              }
            }
            goto LABEL_140;
          }
        }
      }
    }
    v66 = (const __CFArray *)v93[0];
LABEL_110:
    v48 = 0;
    LODWORD(EnabledTrackWithHomogeneousStereoSegments) = 0;
    if (figAssetExportSession_HasDecodableTrack(v66))
LABEL_111:
      LODWORD(EnabledTrackWithHomogeneousStereoSegments) = 1;
    goto LABEL_141;
  }
  if (v56)
    goto LABEL_104;
LABEL_140:
  v48 = 0;
  LODWORD(EnabledTrackWithHomogeneousStereoSegments) = 0;
LABEL_141:
  if (v93[0])
    CFRelease(v93[0]);
  if (v92)
    CFRelease(v92);
LABEL_145:
  v77 = dyld_program_sdk_at_least();
  if ((_DWORD)EnabledTrackWithHomogeneousStereoSegments)
    v78 = v48 == 0;
  else
    v78 = 0;
  v79 = v78;
  if (v77)
    return v79;
  else
    return EnabledTrackWithHomogeneousStereoSegments;
}

CFTypeRef figAssetExportSession_actualOutputFileType(uint64_t a1)
{
  uint64_t DerivedStorage;
  CFTypeRef *v3;
  const __CFString *v4;
  const __CFURL *v5;
  const __CFString *v6;
  const __CFString *v7;
  CFStringRef PreferredIdentifierForTag;
  void (*v9)(uint64_t, const __CFString *, _QWORD, CFArrayRef *);
  CFIndex Count;
  _BOOL4 v11;
  CFRange v12;
  CFArrayRef theArray;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = (CFTypeRef *)(DerivedStorage + 160);
  if (*(_QWORD *)(DerivedStorage + 160))
    return *v3;
  v4 = *(const __CFString **)(DerivedStorage + 144);
  if (!v4)
  {
    v5 = *(const __CFURL **)(DerivedStorage + 88);
    if (!v5)
      return *v3;
    v6 = CFURLCopyPathExtension(v5);
    if (!v6)
      return *v3;
    v7 = v6;
    PreferredIdentifierForTag = UTTypeCreatePreferredIdentifierForTag((CFStringRef)*MEMORY[0x1E0CA5A88], v6, 0);
    CFRelease(v7);
    theArray = 0;
    v9 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
    if (v9
      && (v9(a1, CFSTR("kFigAssetExportSessionProperty_SupportedFileTypes"), *MEMORY[0x1E0C9AE00], &theArray), theArray))
    {
      Count = CFArrayGetCount(theArray);
      v11 = PreferredIdentifierForTag != 0;
      if (PreferredIdentifierForTag)
      {
        v12.length = Count;
        if (theArray)
        {
          v12.location = 0;
          if (CFArrayContainsValue(theArray, v12, PreferredIdentifierForTag))
          {
            v4 = PreferredIdentifierForTag;
LABEL_17:
            if (theArray)
              CFRelease(theArray);
            goto LABEL_19;
          }
          v11 = 1;
        }
      }
    }
    else
    {
      v11 = PreferredIdentifierForTag != 0;
    }
    v4 = CFSTR("com.apple.quicktime-movie");
    if (CFSTR("com.apple.quicktime-movie"))
      CFRetain(CFSTR("com.apple.quicktime-movie"));
    if (v11)
      CFRelease(PreferredIdentifierForTag);
    goto LABEL_17;
  }
  CFRetain(*(CFTypeRef *)(DerivedStorage + 144));
LABEL_19:
  if (FigAtomicCompareAndSwapPtr() && *v3)
    CFRetain(*v3);
  if (v4)
    CFRelease(v4);
  return *v3;
}

uint64_t figAssetExportSession_sourceVideoContainsAV1(uint64_t a1)
{
  uint64_t TypeID;
  const __CFArray *v3;
  CFIndex v4;
  uint64_t v5;
  CFIndex i;
  const opaqueCMFormatDescription *ValueAtIndex;
  FourCharCode MediaSubType;
  unsigned int v10;

  v10 = 0;
  if (!figAssetExportSession_hasVideoTrack(a1))
    return 0;
  TypeID = FigRemakerGetTypeID();
  remakerFamily_GetDefaultSourceVideoTrackFromAsset(TypeID, a1, 0, 1, &v10);
  v3 = figAssetExportSession_copyFormatDescriptionsOfSourceVideoTrack(a1, v10);
  v4 = 0;
  v5 = 1;
  if (!v3)
    goto LABEL_4;
LABEL_3:
  for (i = CFArrayGetCount(v3); v4 < i; i = 0)
  {
    ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(v3, v4);
    MediaSubType = CMFormatDescriptionGetMediaSubType(ValueAtIndex);
    if (MediaSubType == 1635135537 || MediaSubType == 1902212657)
      goto LABEL_12;
    ++v4;
    if (v3)
      goto LABEL_3;
LABEL_4:
    ;
  }
  v5 = 0;
LABEL_12:
  if (v3)
    CFRelease(v3);
  return v5;
}

CFErrorRef figAssetExportSession_createFigRemakers_CopyError(uint64_t a1, _QWORD *a2, CFTypeRef **a3)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v7;
  uint64_t CMBaseObject;
  void (*v9)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  int v10;
  __CFDictionary *v11;
  __CFDictionary *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v15;
  const __CFAllocator *v16;
  int v17;
  CFDictionaryRef v18;
  uint64_t v19;
  const void *v20;
  __CFDictionary *v21;
  int v22;
  const void *v23;
  const void *v24;
  const void *v25;
  void (*v26)(uint64_t, const __CFString *, CFAllocatorRef, CMTimeRange *);
  const void *v27;
  void *v28;
  __CFDictionary *MutableCopy;
  __CFDictionary *v30;
  __CFDictionary *v31;
  __CFDictionary *v32;
  const void *v33;
  __CFDictionary *v34;
  __CFDictionary *v35;
  __CFDictionary *v36;
  uint64_t TypeID;
  uint64_t v38;
  int v39;
  int DefaultSourceVideoTrackFromAsset;
  uint64_t v41;
  double UntransformedSourceDimension;
  double v43;
  double v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, CMTimeRange *);
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, CMTime *);
  uint64_t v49;
  void (*v50)(uint64_t, const __CFString *, CFAllocatorRef, CFArrayRef *);
  CFIndex Count;
  CFIndex v52;
  CFIndex v53;
  int v54;
  const opaqueCMFormatDescription *ValueAtIndex;
  FourCharCode MediaSubType;
  BOOL v58;
  int v60;
  __CFDictionary *v61;
  int v62;
  const void *DestURL;
  CFMutableArrayRef v64;
  CFTypeRef v65;
  __int128 v66;
  void (*v67)(CFTypeRef, CMTimeRange *, CMTime *);
  uint64_t v68;
  uint64_t FigBaseObject;
  void (*v70)(uint64_t, const __CFString *, uint64_t);
  const void *v71;
  __int128 v72;
  void (*v73)(const void *, CMTimeRange *, CMTime *);
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, const __CFString *, uint64_t);
  uint64_t v77;
  const __CFDictionary *SettingForFigRemaker;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)(uint64_t, const __CFString *, uint64_t);
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(uint64_t, const __CFString *, uint64_t);
  uint64_t v86;
  void (*v87)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, const __CFString *, const __CFAllocator *, CMTimeRange *);
  CFIndex v91;
  CFIndex v92;
  CFIndex j;
  const void *v94;
  uint64_t v95;
  void (*v96)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *);
  CFIndex v97;
  CFIndex v98;
  const __CFAllocator *v99;
  const __CFDictionary *v100;
  CFIndex v101;
  const opaqueCMFormatDescription *v102;
  const __CFDictionary *v103;
  CFMutableDictionaryRef v104;
  const void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t (*v108)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  int v109;
  const __CFArray *v110;
  uint64_t (*v111)(uint64_t, const __CFString *, const __CFAllocator *, const void **);
  int v112;
  __CFSet *v113;
  uint64_t v114;
  void (*v115)(uint64_t, const __CFString *, const __CFAllocator *, const __CFArray **);
  CFIndex v116;
  CFIndex v117;
  CFIndex k;
  const void *v119;
  uint64_t (*v120)(const void *, CFTypeRef *, int *);
  int v121;
  uint64_t v122;
  CFTypeRef v123;
  void (*v124)(CFTypeRef, uint64_t, CFTypeRef *, _QWORD);
  int v125;
  const __CFString *v126;
  uint64_t v127;
  void (*v128)(uint64_t, const __CFString *, const __CFAllocator *, CMTimeRange *);
  const opaqueCMFormatDescription *v129;
  const __CFArray *v130;
  CFIndex v131;
  uint64_t v132;
  uint64_t (*v133)(CFTypeRef, uint64_t, int *);
  CFTypeRef v134;
  int v135;
  const AudioStreamBasicDescription *v136;
  CFArrayRef v137;
  uint64_t (*v138)(CFTypeRef, _QWORD, const AudioStreamBasicDescription *, CFArrayRef, const AudioChannelLayout *, _QWORD, _QWORD, int *);
  int v139;
  __CFError *v140;
  uint64_t (*v141)(uint64_t, const __CFString *, const __CFAllocator *, CMTimeRange *);
  _BOOL4 v142;
  uint64_t (*v143)(CFTypeRef, _QWORD, int *);
  int v144;
  const __CFString *v145;
  _BOOL4 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t (*v149)(CFTypeRef, uint64_t, _QWORD, int *);
  const void *v150;
  const void *v151;
  const void *v152;
  __CFDictionary *v153;
  __CFDictionary *v154;
  __CFDictionary *v155;
  __CFDictionary *v156;
  __CFDictionary *v157;
  __CFDictionary *v158;
  const __CFAllocator *v159;
  const void *v160;
  int v161;
  CFErrorRef result;
  const __CFDictionary *v163;
  CFMutableDictionaryRef v164;
  const void *v165;
  int v166;
  int v167;
  uint64_t v168;
  __CFArray *v169;
  int v170;
  unsigned int v171;
  CFTypeRef v172;
  const void *v173;
  CFTypeRef v174;
  CFMutableArrayRef v175;
  uint64_t v176;
  void (*v177)(uint64_t, uint64_t, CMTimeRange *);
  CFIndex v178;
  CFIndex v179;
  CFIndex v180;
  uint64_t v181;
  const void *v182;
  uint64_t v183;
  void (*v184)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *);
  BOOL v185;
  __CFDictionary *v187;
  CFTypeRef *v188;
  const void *v189;
  uint64_t (*v190)(const void *, CMTime *);
  int v191;
  uint64_t v192;
  void (*v193)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  CFIndex v194;
  CFIndex v195;
  CFIndex v196;
  const void *v197;
  void (*v198)(const void *, char *, void **);
  const __CFDictionary *v200;
  CFMutableDictionaryRef v201;
  const __CFDictionary *v202;
  uint64_t v203;
  void (*v204)(uint64_t, const __CFString *, const __CFAllocator *, CMTimeRange *);
  CFIndex v205;
  CFIndex v206;
  CFIndex v207;
  uint64_t v208;
  const opaqueCMFormatDescription *v209;
  const AudioStreamBasicDescription *StreamBasicDescription;
  unsigned int mChannelsPerFrame;
  CFStringRef v213;
  CFStringRef v214;
  const __CFDictionary *v215;
  const __CFDictionary *v216;
  int IsWithinFileLengthLimit;
  void (*v218)(uint64_t, const __CFString *, const __CFAllocator *, const void **);
  const __CFArray *v219;
  CFIndex v220;
  const void *v221;
  const __CFArray *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  double v227;
  double v228;
  double v229;
  double v230;
  int v231;
  int v232;
  unsigned __int16 v233;
  CFMutableArrayRef v234;
  CFMutableArrayRef v235;
  int v236;
  uint64_t v237;
  float v238;
  const void *v239;
  uint64_t v240;
  __CFDictionary *v241;
  __CFDictionary *v242;
  const __CFDictionary *v243;
  const void *v244;
  const void *v245;
  char v246;
  const void *v247;
  const void *SInt32;
  const __CFDictionary *v249;
  const __CFDictionary *v250;
  const void *v251;
  const void *v252;
  uint64_t v253;
  uint64_t v254;
  const void *v255;
  const void *v256;
  CFArrayRef v257;
  CFArrayRef v258;
  const void *v259;
  int v260;
  int v261;
  unsigned __int16 v262;
  unsigned __int16 v263;
  int v264;
  uint64_t v265;
  void (*v266)(uint64_t, uint64_t, CFTypeRef *);
  CFIndex v267;
  CFIndex v268;
  CFIndex v269;
  void *v270;
  const void *v271;
  uint64_t v272;
  void (*v273)(uint64_t, const __CFString *, const __CFAllocator *, void **);
  const __CFArray *PreferredFormatDescription;
  char HDRType;
  _BOOL4 v276;
  const void *v277;
  const __CFArray *v278;
  const __CFArray *v279;
  CFPropertyListRef Extension;
  const void *v281;
  CFTypeID v282;
  const __CFDictionary *v283;
  int v284;
  unsigned __int16 v285;
  CFMutableArrayRef v286;
  __CFDictionary *v287;
  int appended;
  const __CFArray *v289;
  CFDictionaryRef Extensions;
  const __CFDictionary *v291;
  CFTypeID v292;
  uint64_t v293;
  const __CFDictionary *v294;
  const __CFDictionary *v295;
  const void *v296;
  const void *v297;
  const void *v298;
  const void *v299;
  const void *v300;
  _QWORD *v301;
  uint64_t v302;
  uint64_t v303;
  const void *v304;
  int v305;
  __CFString **v306;
  const void *v307;
  uint64_t v308;
  __CFDictionary *v309;
  void (*v310)(uint64_t, const __CFString *, const __CFAllocator *, CMTimeRange *);
  const void *v311;
  __CFDictionary *v312;
  __CFArray *v313;
  __CFArray *v314;
  uint64_t v315;
  void (*v316)(uint64_t, uint64_t, CFTypeRef *);
  uint64_t v317;
  void (*v318)(uint64_t, uint64_t, CFTypeRef *);
  CFIndex v319;
  CFIndex v320;
  __CFArray *v321;
  CFIndex v322;
  void *v323;
  const __CFArray *v324;
  const void *v325;
  void (*v326)(const void *, char *, void **);
  uint64_t v327;
  void (*v328)(uint64_t, const __CFString *, const __CFAllocator *, void **);
  CFMutableArrayRef v329;
  uint64_t v330;
  void (*v331)(uint64_t, uint64_t, const __CFArray **);
  char v332;
  const void *v333;
  uint64_t (*v334)(const void *, uint64_t *);
  int v335;
  CFIndex v336;
  CFIndex v337;
  CFIndex v338;
  const void *v339;
  int v340;
  CFMutableDictionaryRef v341;
  unint64_t v342;
  BOOL v343;
  const void *v344;
  uint64_t (*v345)(const void *, __CFArray *, const void *, CFDictionaryRef, char *);
  int v346;
  CFIndex v347;
  CFIndex v348;
  uint64_t i;
  const void *v350;
  uint64_t v351;
  uint64_t (*v352)(const void *, uint64_t, const void *, CFDictionaryRef, char *);
  const void *v353;
  uint64_t v354;
  const void *v355;
  CFDictionaryRef v356;
  CFIndex v357;
  CFIndex v358;
  uint64_t v359;
  const void *v360;
  uint64_t v361;
  uint64_t (*v362)(const void *, uint64_t, _QWORD, _QWORD, char *);
  int v363;
  _QWORD *v364;
  __CFArray *v365;
  uint64_t v366;
  const void *v367;
  CFIndex v368;
  CFIndex v369;
  CFIndex v370;
  void *v371;
  BOOL v372;
  char v373;
  const void *v374;
  uint64_t v375;
  int v376;
  uint64_t v377;
  void (*v378)(uint64_t, const __CFString *, const __CFAllocator *, void **);
  void (*v379)(uint64_t, char *, _QWORD);
  CFMutableArrayRef v380;
  uint64_t v381;
  _QWORD *v382;
  _QWORD *v383;
  const void *v384;
  const void *v385;
  const void *v386;
  uint64_t v387;
  void (*v388)(uint64_t, const __CFString *, const __CFAllocator *, CMTimeRange *);
  CMTimeValue v389;
  void (*v390)(CFTypeRef, const __CFString *, CMTimeValue);
  uint64_t v391;
  void (*v392)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *);
  CMTimeValue v393;
  void (*v394)(CFTypeRef, const __CFString *, CMTimeValue);
  uint64_t v395;
  void (*v396)(uint64_t, const __CFString *, const __CFAllocator *, CFArrayRef *);
  CFArrayRef v397;
  void (*v398)(CFTypeRef, const __CFString *, CFArrayRef);
  uint64_t v399;
  void (*v400)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  CFTypeRef v401;
  void (*v402)(CFTypeRef, const __CFString *, CFTypeRef);
  __CFArray *v403;
  __CFArray *v404;
  const __CFArray *v405;
  const __CFDictionary *v406;
  __CFDictionary *v407;
  const void *v408;
  uint64_t v409;
  const void *v410;
  uint64_t (*v411)(const void *, uint64_t, __CFDictionary *, uint64_t *);
  int v412;
  void (*v413)(uint64_t, const __CFString *, const __CFAllocator *, const void **);
  const __CFDictionary *v414;
  CFIndex v415;
  uint64_t v416;
  const void *v417;
  uint64_t v418;
  uint64_t (*v419)(const void *, uint64_t, __CFDictionary *, uint64_t *);
  int v420;
  const void *v421;
  CFTypeRef v422;
  double v423;
  double v424;
  double v425;
  double v426;
  CFTypeID v427;
  double v428;
  const void *v429;
  uint64_t v430;
  uint64_t (*v431)(const void *, uint64_t, _QWORD, _QWORD, __CFDictionary *, _QWORD, __CFDictionary *, __CFDictionary *, __CFDictionary *, __CFDictionary *, CMTimeRange *, uint64_t *);
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  int v436;
  double v437;
  double v438;
  uint64_t (*v439)(const void *, const __CFArray *, uint64_t, uint64_t, uint64_t, void *, uint64_t, CFAllocatorRef, int, CFTypeRef, _QWORD, _QWORD, CMTimeRange *, uint64_t, uint64_t, int, __CFDictionary *, unsigned int, __CFDictionary *, __CFDictionary *, __CFDictionary *, __CFDictionary *, uint64_t *);
  uint64_t v440;
  void (*v441)(uint64_t, uint64_t, CFTypeRef *);
  CFIndex v442;
  CFIndex v443;
  const __CFArray *v444;
  CFIndex v445;
  void (*v446)(uint64_t, const __CFString *, const __CFAllocator *, const void **);
  _BOOL4 v447;
  const __CFString *FigFormatReaderFileFormat;
  _BOOL4 CanFileTypeSupportMediaType;
  CFIndex v450;
  const void *v451;
  void (*v452)(const void *, CMTimeRange *, _QWORD);
  const void *v453;
  uint64_t value_low;
  uint64_t (*v455)(const void *, uint64_t, _QWORD, CMTime *);
  int v456;
  CFDictionaryRef v457;
  const void *v458;
  uint64_t v459;
  void (*v460)(const void *, uint64_t, const __CFString *, CFDictionaryRef);
  uint64_t v461;
  void (*v462)(uint64_t, const __CFString *, const __CFAllocator *, const __CFArray **);
  const __CFArray *v463;
  uint64_t v464;
  uint64_t (*v465)(uint64_t, const __CFString *, const __CFArray *);
  int v466;
  int v467;
  uint64_t v468;
  uint64_t v469;
  unsigned int VideoCodecType;
  __CFDictionary *v471;
  _BOOL4 v472;
  __CFDictionary *v473;
  CFTypeRef v474;
  const __CFDictionary *v475;
  __CFDictionary *VideoEncoderSpecification;
  const void *v477;
  const void *v478;
  __CFDictionary *v479;
  CFMutableDictionaryRef v480;
  CFTypeRef **v481;
  _QWORD *v482;
  const __CFArray *v483;
  CFMutableDictionaryRef v484;
  CFTypeRef *v485;
  const __CFArray *v486;
  int v487;
  CFDictionaryRef cf;
  int cfa;
  CFTypeRef cfb;
  __CFDictionary *v491;
  __CFArray *v492;
  const AudioChannelLayout *ChannelLayout;
  __CFArray *v494;
  __CFArray *v495;
  __CFDictionary *v496;
  const __CFDictionary *v497;
  unsigned int v498;
  __CFArray *v499;
  CFTypeRef v500;
  CFMutableArrayRef theDict;
  __CFDictionary *theDicta;
  CFMutableDictionaryRef theDictb;
  uint64_t v504;
  const __CFArray *Mutable;
  __CFDictionary *v506;
  CFDictionaryRef v507;
  const __CFArray *ConcatenationOfTwoArrays;
  int v509;
  int v510;
  CFAllocatorRef allocator;
  int allocatora;
  CFAllocatorRef allocatorb;
  void *value;
  __CFDictionary *valuea;
  int valueb;
  int valuec;
  void *valued;
  CMTime time;
  float v520;
  CMTime v521;
  CMTime v522;
  CFArrayRef theArray[2];
  CMTimeEpoch v524;
  CMTime v525;
  const __CFArray *v526;
  CFTypeRef v527;
  CFTypeRef v528;
  const void *v529;
  CFTypeRef v530;
  void *v531;
  const __CFArray *v532;
  const void *v533;
  void *key;
  CFTypeRef v535;
  CFTypeRef v536;
  CFTypeRef v537;
  void *values;
  uint64_t v539;
  uint64_t v540;
  const void *v541;
  CFErrorRef v542;
  CMTime v543;
  CFTypeRef v544;
  int v545;
  int v546;
  CFTypeRef v547;
  CFTypeRef v548;
  const __CFArray *v549;
  const void *v550;
  CMTimeRange range;
  uint64_t v552;
  CFRange v553;
  CFRange v554;
  CFRange v555;
  CFRange v556;

  v552 = *MEMORY[0x1E0C80C00];
  v541 = 0;
  v542 = 0;
  v540 = 0;
  v539 = 0;
  v537 = 0;
  values = 0;
  v535 = 0;
  v536 = 0;
  key = 0;
  v532 = 0;
  v533 = 0;
  value = (void *)*MEMORY[0x1E0C9AE40];
  v530 = 0;
  v531 = value;
  v528 = 0;
  v529 = 0;
  v526 = 0;
  v527 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *a2 = 0;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  CMBaseObject = FigAssetGetCMBaseObject(*(_QWORD *)(DerivedStorage + 16));
  v9 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
  if (v9)
    v9(CMBaseObject, CFSTR("assetProperty_ResolvedURL"), v7, &v527);
  allocator = v7;
  if (*(_DWORD *)(DerivedStorage + 344))
  {
    Mutable = CFArrayCreateMutable(v7, 0, MEMORY[0x1E0C9B378]);
    if (!Mutable)
    {
      v10 = FigSignalErrorAt();
      v11 = 0;
      v12 = 0;
      v507 = 0;
      ConcatenationOfTwoArrays = 0;
      Mutable = 0;
      v506 = 0;
LABEL_34:
      v31 = 0;
      v496 = 0;
      v497 = 0;
      v32 = 0;
      cf = 0;
      v491 = 0;
      valuea = 0;
      v33 = 0;
      v30 = 0;
      v485 = 0;
      v486 = 0;
      v34 = 0;
      v35 = 0;
      v492 = 0;
      v499 = 0;
      theDict = 0;
      v16 = allocator;
      goto LABEL_233;
    }
  }
  else
  {
    Mutable = 0;
  }
  v13 = FigAssetGetCMBaseObject(*(_QWORD *)(DerivedStorage + 16));
  v14 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 48);
  if (!v14)
  {
    v10 = -12782;
LABEL_33:
    FigSignalErrorAt();
    v11 = 0;
    v12 = 0;
    v507 = 0;
    ConcatenationOfTwoArrays = 0;
    v506 = 0;
    goto LABEL_34;
  }
  v15 = v13;
  v16 = v7;
  v17 = v14(v15, CFSTR("assetProperty_FormatReader"), v7, &v530);
  if (v17)
  {
    v10 = v17;
    goto LABEL_33;
  }
  figAssetExportSession_actualOutputFileType(a1);
  values = (void *)figAssetExportSession_GetFigFormatReaderFileFormat();
  v18 = CFDictionaryCreate(v7, (const void **)kFigFormatWriterOption_FileFormat, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v18)
  {
    v10 = FigSignalErrorAt();
    v11 = 0;
    v12 = 0;
    v507 = 0;
    ConcatenationOfTwoArrays = 0;
    v506 = 0;
    goto LABEL_893;
  }
  v481 = a3;
  v482 = a2;
  v507 = v18;
  v19 = CMBaseObjectGetDerivedStorage();
  v20 = *(const void **)(v19 + 384);
  range.start.value = 0;
  v21 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v21)
  {
    v22 = FigCFEqual();
    v23 = (const void *)*MEMORY[0x1E0C9AE50];
    if (v22)
      v24 = (const void *)*MEMORY[0x1E0C9AE50];
    else
      v24 = v20;
    if (FigCFEqual() || FigCFEqual() || (v25 = value, FigCFEqual()))
      v25 = v23;
    CFDictionaryAddValue(v21, CFSTR("Remaker_FastStart"), v24);
    CFDictionaryAddValue(v21, CFSTR("Remaker_NoInterruptions"), v25);
    v26 = *(void (**)(uint64_t, const __CFString *, CFAllocatorRef, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
    if (v26)
      v26(a1, CFSTR("kFigAssetExportSessionProperty_DirectoryForTemporaryFiles"), allocator, &range);
    if (figAssetExportSession_IsAlphaPreset(*(void **)(v19 + 72)))
      v27 = v23;
    else
      v27 = value;
    CFDictionaryAddValue(v21, CFSTR("Remaker_PreferSourceVideoTrackWithAlpha"), v27);
    if (range.start.value)
    {
      CFDictionaryAddValue(v21, CFSTR("Remaker_TemporaryDirectoryURL"), (const void *)range.start.value);
      CFRelease((CFTypeRef)range.start.value);
    }
  }
  if (FigFormatReaderIsRemote((_BOOL8)v530))
    v28 = FigRemakerRemoteCreateBaseWithURLs;
  else
    v28 = FigRemakerCreateBaseWithURLs;
  if (*(_BYTE *)(DerivedStorage + 28))
  {
    MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
    v30 = MutableCopy;
    if (!MutableCopy)
    {
      v506 = v21;
LABEL_967:
      v10 = FigSignalErrorAt();
      v11 = 0;
      v12 = 0;
      ConcatenationOfTwoArrays = 0;
      v31 = 0;
      v497 = 0;
      v32 = 0;
      cf = 0;
      valuea = 0;
      v33 = 0;
      goto LABEL_968;
    }
    CFDictionaryAddValue(MutableCopy, CFSTR("Remaker_PermitNonLocalSourceURLs"), (const void *)*MEMORY[0x1E0C9AE50]);
    if (v21)
      CFRelease(v21);
  }
  else
  {
    v30 = v21;
  }
  if (*(_BYTE *)(DerivedStorage + 98))
  {
    v36 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
    v34 = v36;
    if (!v36)
      goto LABEL_891;
    CFDictionarySetValue(v36, CFSTR("Remaker_EnableDecodeAppleOnlySWAV1"), (const void *)*MEMORY[0x1E0C9AE50]);
    if (v30)
      CFRelease(v30);
  }
  else
  {
    v34 = v30;
  }
  v506 = v34;
  if (!*(_QWORD *)(DerivedStorage + 184)
    && (TypeID = FigRemakerGetTypeID(),
        v38 = *(_QWORD *)(DerivedStorage + 16),
        v39 = figAssetExportSession_IsAlphaPreset(*(void **)(DerivedStorage + 72)),
        (DefaultSourceVideoTrackFromAsset = remakerFamily_GetDefaultSourceVideoTrackFromAsset(TypeID, v38, v39, *(unsigned __int8 *)(DerivedStorage + 98), (_DWORD *)&v539 + 1)) != 0)|| (DefaultSourceVideoTrackFromAsset = ((uint64_t (*)(CFAllocatorRef, CFTypeRef, CFTypeRef, _QWORD, _QWORD, CFDictionaryRef, __CFDictionary *, const void **))v28)(allocator, v527, v530, *(_QWORD *)(DerivedStorage + 88), 0, v507, v34, &v541)) != 0)
  {
    v10 = DefaultSourceVideoTrackFromAsset;
    FigSignalErrorAt();
    v11 = 0;
    v12 = 0;
    ConcatenationOfTwoArrays = 0;
LABEL_893:
    v31 = 0;
    v497 = 0;
    v32 = 0;
    cf = 0;
    valuea = 0;
    v33 = 0;
    v30 = 0;
LABEL_968:
    v485 = 0;
    goto LABEL_232;
  }
  v41 = HIDWORD(v539);
  UntransformedSourceDimension = FigAssetExportSession_getUntransformedSourceDimension(*(_QWORD *)(DerivedStorage + 16), HIDWORD(v539), *(CGSize **)(DerivedStorage + 184));
  v44 = v43;
  range.start.value = 0;
  v543.value = 0;
  theArray[0] = 0;
  v45 = *(_QWORD *)(DerivedStorage + 16);
  v46 = *(void (**)(uint64_t, uint64_t, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v46)
    v46(v45, 1986618469, &range);
  v47 = *(_QWORD *)(DerivedStorage + 16);
  v48 = *(void (**)(uint64_t, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  v504 = a1;
  if (v48 && (v48(v47, v41, &v543), v543.value))
  {
    v49 = FigAssetTrackGetCMBaseObject(v543.value);
    v50 = *(void (**)(uint64_t, const __CFString *, CFAllocatorRef, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
    if (v50
      && (v50(v49, CFSTR("FormatDescriptionArray"), allocator, theArray), theArray[0])
      && (Count = CFArrayGetCount(theArray[0]), Count >= 1))
    {
      v52 = Count;
      v53 = 0;
      v54 = 0;
      do
      {
        ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(theArray[0], v53);
        MediaSubType = CMFormatDescriptionGetMediaSubType(ValueAtIndex);
        if (MediaSubType == 1634759272 || MediaSubType == 1634759278)
          v54 = 1;
        v58 = MediaSubType == 1634759272 || MediaSubType == 1634759278;
        ++v53;
      }
      while (!v58 && v52 != v53);
    }
    else
    {
      v54 = 0;
    }
    if (!*(_BYTE *)(DerivedStorage + 96) || *(_QWORD *)(DerivedStorage + 184) || FigCFEqual())
    {
      v60 = 0;
    }
    else
    {
      if (FigCFEqual())
        v185 = 0;
      else
        v185 = (int)(UntransformedSourceDimension * v44) < 9437184;
      v60 = v185 && v54 == 0;
    }
    v16 = allocator;
  }
  else
  {
    v60 = 0;
  }
  if (range.start.value)
    CFRelease((CFTypeRef)range.start.value);
  if (v543.value)
    CFRelease((CFTypeRef)v543.value);
  if (theArray[0])
    CFRelease(theArray[0]);
  v509 = v60;
  if (!v60)
  {
    v34 = 0;
    goto LABEL_94;
  }
  v61 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  v30 = v61;
  if (!v61)
    goto LABEL_967;
  CFDictionarySetValue(v61, CFSTR("Remaker_FastStart"), value);
  if (v506)
    CFRelease(v506);
  CFDictionarySetValue(v30, CFSTR("Remaker_InterimAssetName"), CFSTR("otherTracks"));
  v62 = ((uint64_t (*)(const __CFAllocator *, CFTypeRef, CFTypeRef, _QWORD, _QWORD, CFDictionaryRef, __CFDictionary *, CFTypeRef *))v28)(v16, v527, v530, *(_QWORD *)(DerivedStorage + 88), 0, v507, v30, &v528);
  if (v62)
  {
    v10 = v62;
    FigSignalErrorAt();
    v11 = 0;
    v12 = 0;
    ConcatenationOfTwoArrays = 0;
    v31 = 0;
    v497 = 0;
    v32 = 0;
    cf = 0;
    valuea = 0;
    v485 = 0;
LABEL_971:
    v34 = 0;
    goto LABEL_972;
  }
  v34 = (__CFDictionary *)malloc_type_calloc(1uLL, 0x38uLL, 0x106004012191893uLL);
  if (!v34)
  {
LABEL_891:
    v10 = FigSignalErrorAt();
    v11 = 0;
    v12 = 0;
    ConcatenationOfTwoArrays = 0;
    v31 = 0;
    v497 = 0;
    v32 = 0;
    cf = 0;
    valuea = 0;
    v485 = 0;
LABEL_972:
    v491 = 0;
    v492 = 0;
    v496 = 0;
    v35 = 0;
    v486 = 0;
    v499 = 0;
    theDict = 0;
    v506 = v30;
    v30 = 0;
    v33 = 0;
    goto LABEL_233;
  }
  DestURL = (const void *)remakerFamily_getDestURL();
  if (DestURL)
    DestURL = CFRetain(DestURL);
  *((_QWORD *)v34 + 1) = DestURL;
  v64 = CFArrayCreateMutable(v16, 0, &TrackMappingCallBacks);
  *((_QWORD *)v34 + 2) = v64;
  if (!v64)
  {
    v485 = (CFTypeRef *)v34;
    v10 = FigSignalErrorAt();
    v11 = 0;
    v12 = 0;
    ConcatenationOfTwoArrays = 0;
    v31 = 0;
    v497 = 0;
    v32 = 0;
    cf = 0;
    valuea = 0;
    goto LABEL_971;
  }
  v65 = v528;
  v66 = *(_OWORD *)(DerivedStorage + 224);
  *(_OWORD *)&range.start.value = *(_OWORD *)(DerivedStorage + 208);
  *(_OWORD *)&range.start.epoch = v66;
  *(_OWORD *)&range.duration.timescale = *(_OWORD *)(DerivedStorage + 240);
  CMTimeRangeGetEnd(&v525, &range);
  *(_OWORD *)theArray = *(_OWORD *)(DerivedStorage + 208);
  v524 = *(_QWORD *)(DerivedStorage + 224);
  v67 = *(void (**)(CFTypeRef, CMTimeRange *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v67)
  {
    *(_OWORD *)&range.start.value = *(_OWORD *)theArray;
    range.start.epoch = v524;
    v543 = v525;
    v67(v65, &range, &v543);
  }
  v68 = *(_QWORD *)(DerivedStorage + 336);
  FigBaseObject = FigRemakerGetFigBaseObject(v528);
  v70 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v70)
    v70(FigBaseObject, CFSTR("Remaker_MaximizePowerEfficiency"), v68);
  v506 = v30;
  v16 = allocator;
LABEL_94:
  *(_BYTE *)(DerivedStorage + 152) = 1;
  v71 = v541;
  v72 = *(_OWORD *)(DerivedStorage + 224);
  *(_OWORD *)&range.start.value = *(_OWORD *)(DerivedStorage + 208);
  *(_OWORD *)&range.start.epoch = v72;
  *(_OWORD *)&range.duration.timescale = *(_OWORD *)(DerivedStorage + 240);
  CMTimeRangeGetEnd(&v522, &range);
  *(_OWORD *)theArray = *(_OWORD *)(DerivedStorage + 208);
  v524 = *(_QWORD *)(DerivedStorage + 224);
  v73 = *(void (**)(const void *, CMTimeRange *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v73)
  {
    *(_OWORD *)&range.start.value = *(_OWORD *)theArray;
    range.start.epoch = v524;
    v543 = v522;
    v73(v71, &range, &v543);
  }
  v74 = *(_QWORD *)(DerivedStorage + 336);
  v75 = FigRemakerGetFigBaseObject(v541);
  v76 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v76)
    v76(v75, CFSTR("Remaker_MaximizePowerEfficiency"), v74);
  v77 = a1;
  SettingForFigRemaker = FigAssetExportSessionGetSettingForFigRemaker(a1, HIDWORD(v539));
  v79 = *(_QWORD *)(DerivedStorage + 200);
  v485 = (CFTypeRef *)v34;
  if (v79)
  {
    v80 = FigRemakerGetFigBaseObject(v541);
    v81 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 56);
    if (v81)
    {
      v82 = v81(v80, CFSTR("Remaker_MetadataTransferWhitelist"), v79);
      if (v82)
      {
LABEL_1008:
        v10 = v82;
        goto LABEL_128;
      }
      if (!v509)
        goto LABEL_104;
      v83 = *(_QWORD *)(DerivedStorage + 200);
      v84 = FigRemakerGetFigBaseObject(v528);
      v85 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
      if (v85)
      {
        v82 = v85(v84, CFSTR("Remaker_MetadataTransferWhitelist"), v83);
        if (!v82)
          goto LABEL_104;
        goto LABEL_1008;
      }
    }
    v10 = -12782;
LABEL_128:
    FigSignalErrorAt();
LABEL_231:
    v11 = 0;
    v12 = 0;
    ConcatenationOfTwoArrays = 0;
    v31 = 0;
    v497 = 0;
    v32 = 0;
    cf = 0;
    valuea = 0;
    v33 = 0;
    v30 = 0;
LABEL_232:
    v34 = 0;
    v491 = 0;
    v492 = 0;
    v496 = 0;
    v35 = 0;
    v486 = 0;
    v499 = 0;
    theDict = 0;
    goto LABEL_233;
  }
LABEL_104:
  v86 = FigAssetGetCMBaseObject(*(_QWORD *)(DerivedStorage + 16));
  v87 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
  if (v87)
    v87(v86, CFSTR("assetProperty_Tracks"), v16, &v537);
  if (!FigCFEqual())
  {
    if (v537)
    {
      CFRelease(v537);
      v537 = 0;
    }
    if (SettingForFigRemaker)
    {
      v103 = (const __CFDictionary *)CFDictionaryGetValue(SettingForFigRemaker, CFSTR("Video"));
      if (v103)
        v104 = CFDictionaryCreateMutableCopy(v16, 0, v103);
      else
        v104 = 0;
      v163 = (const __CFDictionary *)CFDictionaryGetValue(SettingForFigRemaker, CFSTR("Audio"));
      v484 = v104;
      if (v163)
      {
        v164 = CFDictionaryCreateMutableCopy(v16, 0, v163);
        if (v164)
        {
          LOBYTE(range.start.value) = 0;
          v497 = v164;
          if (FigCFDictionaryGetBooleanIfPresent())
            *(_DWORD *)(DerivedStorage + 344) = *(_DWORD *)(DerivedStorage + 344) & 0xFFFFFFFE | (LOBYTE(range.start.value) == 1);
          v165 = CFDictionaryGetValue(v497, CFSTR("audioPreset"));
          v166 = 0;
          goto LABEL_310;
        }
      }
    }
    else
    {
      v484 = 0;
    }
    v497 = 0;
    v165 = 0;
    v166 = 1;
LABEL_310:
    if (FigCFEqual())
    {
      v477 = v165;
      v475 = SettingForFigRemaker;
      v167 = 0;
      v168 = 0;
      v169 = 0;
      cfa = 1;
      goto LABEL_312;
    }
    if (*(_QWORD *)(DerivedStorage + 176))
      v171 = 1;
    else
      v171 = figAssetExportSession_isAudioMixdownRequired(v165, &v542);
    if (v542)
    {
      v11 = 0;
      v12 = 0;
      ConcatenationOfTwoArrays = 0;
      v32 = 0;
      cf = 0;
      v491 = 0;
      valuea = 0;
      v33 = 0;
      v30 = 0;
      v34 = 0;
      v492 = 0;
      v496 = 0;
      v35 = 0;
      v486 = 0;
      v499 = 0;
      theDict = 0;
      v10 = 0;
LABEL_326:
      v31 = v484;
      goto LABEL_233;
    }
    cfa = v171;
    v477 = v165;
    v169 = CFArrayCreateMutable(v16, 0, MEMORY[0x1E0C9B378]);
    range.start.value = 0;
    v176 = *(_QWORD *)(DerivedStorage + 16);
    v177 = *(void (**)(uint64_t, uint64_t, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    v475 = SettingForFigRemaker;
    if (!v177)
      goto LABEL_350;
    v177(v176, 1936684398, &range);
    if (!range.start.value)
    {
      v168 = 0;
      v167 = 0;
      goto LABEL_861;
    }
    v178 = CFArrayGetCount((CFArrayRef)range.start.value);
    if (v178 >= 1)
    {
      v179 = v178;
      v494 = v169;
      LODWORD(v168) = 0;
      v180 = 0;
      v181 = *MEMORY[0x1E0C9AE50];
      do
      {
        v543.value = (CMTimeValue)value;
        v182 = CFArrayGetValueAtIndex((CFArrayRef)range.start.value, v180);
        v183 = FigAssetTrackGetCMBaseObject(v182);
        v184 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (v184)
          v184(v183, CFSTR("IsEnabled"), v16, &v543);
        if (v543.value == v181)
          v168 = (v168 + 1);
        else
          v168 = v168;
        ++v180;
      }
      while (v179 != v180);
      v169 = v494;
    }
    else
    {
LABEL_350:
      v168 = 0;
    }
    if (range.start.value)
      CFRelease((CFTypeRef)range.start.value);
    if (v168 == 1)
    {
      LODWORD(v543.value) = 0;
      v189 = v541;
      v190 = *(uint64_t (**)(const void *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
      v492 = v169;
      if (v190)
      {
        v191 = v190(v189, &v543);
        if (!v191)
        {
          v192 = FigAssetGetCMBaseObject(*(_QWORD *)(DerivedStorage + 16));
          v193 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
          if (v193)
            v193(v192, CFSTR("assetProperty_Tracks"), v16, &v537);
          if (v537 && (v194 = CFArrayGetCount((CFArrayRef)v537), v194 >= 1))
          {
            v195 = v194;
            v196 = 0;
            while (1)
            {
              key = 0;
              v197 = CFArrayGetValueAtIndex((CFArrayRef)v537, v196);
              v198 = *(void (**)(const void *, char *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 32);
              if (v198)
                v198(v197, (char *)&key + 4, &key);
              if (HIDWORD(key) == LODWORD(v543.value) && (_DWORD)key == 1936684398)
                break;
              if (v195 == ++v196)
                goto LABEL_368;
            }
          }
          else
          {
LABEL_368:
            v197 = 0;
          }
          range.start.value = 0;
          if (v166)
          {
            v216 = 0;
            goto LABEL_845;
          }
          CFRetain(v497);
          v200 = (const __CFDictionary *)CFDictionaryGetValue(v497, CFSTR("audioSettingPerChannelCount"));
          v201 = v497;
          if (v200)
          {
            v202 = v200;
            v203 = FigAssetTrackGetCMBaseObject(v197);
            v204 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
            v201 = v497;
            if (v204)
            {
              v204(v203, CFSTR("FormatDescriptionArray"), v16, &range);
              v201 = v497;
              if (!range.start.value)
              {
LABEL_389:
                if (v201)
                {
                  CFRetain(v201);
                  CFRelease(v497);
                  CFRelease(v201);
                  v216 = v201;
                }
                else
                {
                  CFRelease(v497);
                  v216 = 0;
                }
LABEL_845:
                v477 = CFDictionaryGetValue(v216, CFSTR("audioPreset"));
                v497 = v216;
                if (figAssetExportSession_canPassThroughAudio(v504, v216, 1))
                {
                  CFArrayAppendValue(v169, v197);
                  v167 = 1;
                }
                else
                {
                  v167 = 0;
                }
                v168 = 1;
                goto LABEL_861;
              }
              v205 = CFArrayGetCount((CFArrayRef)range.start.value);
              v201 = v497;
              if (v205 >= 1)
              {
                v206 = v205;
                v207 = 0;
                v208 = 0;
                do
                {
                  v209 = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex((CFArrayRef)range.start.value, v207);
                  StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(v209);
                  if (StreamBasicDescription)
                  {
                    mChannelsPerFrame = StreamBasicDescription->mChannelsPerFrame;
                    if (mChannelsPerFrame <= v208 || mChannelsPerFrame == 0)
                      v208 = v208;
                    else
                      v208 = mChannelsPerFrame;
                  }
                  ++v207;
                }
                while (v206 != v207);
                v201 = v497;
                if ((int)v208 > 0)
                {
                  v213 = CFStringCreateWithFormat(v16, 0, CFSTR("%d"), v208);
                  v201 = v497;
                  if (v213)
                  {
                    v214 = v213;
                    v215 = (const __CFDictionary *)CFDictionaryGetValue(v202, v213);
                    CFRelease(v214);
                    v201 = v497;
                    if (v215)
                    {
                      CFRelease(v497);
                      v201 = CFDictionaryCreateMutableCopy(v16, 0, v215);
                    }
                  }
                }
              }
            }
          }
          if (range.start.value)
            CFRelease((CFTypeRef)range.start.value);
          goto LABEL_389;
        }
        v10 = v191;
      }
      else
      {
        v10 = -12782;
      }
      FigSignalErrorAt();
      v11 = 0;
      v12 = 0;
      ConcatenationOfTwoArrays = 0;
      v32 = 0;
      cf = 0;
      v491 = 0;
      valuea = 0;
      v33 = 0;
      v30 = 0;
      v34 = 0;
      v496 = 0;
LABEL_833:
      v35 = 0;
      v486 = 0;
      v499 = 0;
      theDict = 0;
      goto LABEL_326;
    }
    v167 = 0;
    if (v477 || !v168)
      goto LABEL_861;
    v495 = v169;
    v265 = *(_QWORD *)(DerivedStorage + 16);
    v266 = *(void (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (v266)
      v266(v265, 1936684398, &v537);
    if (!v537)
    {
      v477 = 0;
      v167 = 1;
      v169 = v495;
LABEL_312:
      if (*(_QWORD *)(DerivedStorage + 184)
        || !figAssetExportSession_canPassThroughVideo(v504, v484, v541, HIDWORD(v539), 1, 0))
      {
        v474 = 0;
        if (!v167)
        {
          v472 = 0;
          v487 = 0;
          goto LABEL_404;
        }
        v170 = 0;
LABEL_393:
        IsWithinFileLengthLimit = figAssetExportSession_totalSizeOfTracksIsWithinFileLengthLimit(DerivedStorage, v169, v475);
        if (!IsWithinFileLengthLimit)
          v167 = 0;
        if (v170 && IsWithinFileLengthLimit)
        {
          v16 = allocator;
          if (v484)
          {
            CFRelease(v484);
            v484 = 0;
          }
        }
        else
        {
          v16 = allocator;
        }
        v472 = v167 != 0;
        if (v497 && v167)
        {
          CFRelease(v497);
          v497 = 0;
          v472 = 1;
          v487 = 1;
        }
        else
        {
          v487 = v167;
        }
LABEL_404:
        v218 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (v218)
          v218(v504, CFSTR("kFigAssetExportSessionProperty_OutputFileType"), v16, &v533);
        v492 = v169;
        if (figAssetExportSession_GetUTTypesForAudioOnly_onceToken != -1)
          dispatch_once_f(&figAssetExportSession_GetUTTypesForAudioOnly_onceToken, &figAssetExportSession_GetUTTypesForAudioOnly__gUTTypesForAudioOnlyArray, (dispatch_function_t)figAssetExportSession_CreateUTTypesForAudioOnlyOnce);
        v219 = (const __CFArray *)figAssetExportSession_GetUTTypesForAudioOnly__gUTTypesForAudioOnlyArray;
        if (figAssetExportSession_GetUTTypesForAudioOnly__gUTTypesForAudioOnlyArray)
        {
          v220 = CFArrayGetCount((CFArrayRef)figAssetExportSession_GetUTTypesForAudioOnly__gUTTypesForAudioOnlyArray);
          if (v533)
          {
            v555.length = v220;
            v555.location = 0;
            if (CFArrayContainsValue(v219, v555, v533))
            {
              v11 = 0;
              v479 = 0;
              VideoEncoderSpecification = 0;
              v30 = 0;
              v491 = 0;
              v496 = 0;
              v35 = 0;
              VideoCodecType = 1851876449;
              v221 = v477;
              v31 = v484;
              goto LABEL_635;
            }
          }
        }
        if (v484)
          VideoCodecType = figAssetExportSession_GetVideoCodecType((uint64_t)v484);
        else
          VideoCodecType = 0;
        if (v533)
        {
          CFRelease(v533);
          v533 = 0;
        }
        v222 = figAssetExportSession_copyFormatDescriptionsOfSourceVideoTrack(*(_QWORD *)(DerivedStorage + 16), HIDWORD(v539));
        v521 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
        v520 = 0.0;
        v223 = HIDWORD(v539);
        v224 = CMBaseObjectGetDerivedStorage();
        v225 = *(_QWORD *)(v224 + 16);
        v226 = *(_QWORD *)(v224 + 184);
        *(_OWORD *)&range.start.value = *(_OWORD *)(v224 + 256);
        range.start.epoch = *(_QWORD *)(v224 + 272);
        figAssetExportSession_getDestinationFrameDurationAndExpectedFrameRate(v225, v223, v226, (uint64_t)v484, &range.start, (uint64_t)&v521, &v520);
        v227 = FigAssetExportSession_getUntransformedSourceDimension(*(_QWORD *)(DerivedStorage + 16), HIDWORD(v539), *(CGSize **)(DerivedStorage + 184));
        v229 = v228;
        UntransformedSourceDimension = FigExportSettingsCalculateOutputDimensions(v227, v228);
        v44 = v230;
        figAssetExportSession_createProfileLevel(*(_QWORD *)(DerivedStorage + 184), (uint64_t)v484, v222, &v529);
        VideoEncoderSpecification = figAssetExportSession_createVideoEncoderSpecification(*(const void **)(DerivedStorage + 320), v484, v529);
        v479 = CFDictionaryCreateMutable(v16, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v483 = v222;
        if (!v479)
        {
          v479 = 0;
          v10 = -16970;
          goto LABEL_975;
        }
        v231 = figAssetExportSession_GetVideoCodecType((uint64_t)v484);
        LOBYTE(theArray[0]) = 0;
        if (v231 > 1836415072)
        {
          if (v231 > 1902407031)
          {
            if (v231 > 1902671458)
            {
              if (v231 == 1902998904)
                goto LABEL_443;
              v233 = 30307;
            }
            else
            {
              if (v231 == 1902407032)
                goto LABEL_443;
              v233 = 25974;
            }
            v232 = v233 | 0x71680000;
          }
          else if (v231 > 1902405680)
          {
            if (v231 == 1902405681)
              goto LABEL_443;
            v232 = 1902405733;
          }
          else
          {
            if (v231 == 1836415073)
              goto LABEL_443;
            v232 = 1869117027;
          }
        }
        else if (v231 > 1685481572)
        {
          if (v231 > 1751479856)
          {
            if (v231 == 1751479857)
              goto LABEL_443;
            v232 = 1752589105;
          }
          else
          {
            if (v231 == 1685481573)
              goto LABEL_443;
            v232 = 1718908520;
          }
        }
        else if (v231 > 1684895095)
        {
          if (v231 == 1684895096)
            goto LABEL_443;
          v232 = 1685481521;
        }
        else
        {
          if (v231 == 1667524657)
            goto LABEL_443;
          v232 = 1667790435;
        }
        if (v231 != v232)
          goto LABEL_451;
LABEL_443:
        if (!FigCFDictionaryGetBooleanIfPresent() || LOBYTE(theArray[0]) != 1)
        {
LABEL_451:
          v237 = HIDWORD(v539);
          v238 = v520;
          v239 = v529;
          v240 = CMBaseObjectGetDerivedStorage();
          v241 = CFDictionaryCreateMutable(v16, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (!v241)
          {
            v11 = 0;
            v10 = -16970;
            goto LABEL_977;
          }
          v242 = v241;
          v11 = v241;
          if (v239)
          {
            CFDictionarySetValue(v241, (const void *)*MEMORY[0x1E0CED180], v239);
            v243 = v484;
            if (!v484)
              goto LABEL_461;
          }
          else
          {
            v243 = v484;
            if (!v484)
            {
LABEL_461:
              v246 = 1;
              goto LABEL_462;
            }
            v244 = CFDictionaryGetValue(v484, CFSTR("profileLevel"));
            if (v244)
              CFDictionarySetValue(v242, (const void *)*MEMORY[0x1E0CED180], v244);
          }
          v245 = CFDictionaryGetValue(v243, CFSTR("entropyMode"));
          if (v245)
            CFDictionarySetValue(v242, (const void *)*MEMORY[0x1E0CED000], v245);
          v246 = 0;
LABEL_462:
          theDictb = (CFMutableDictionaryRef)*MEMORY[0x1E0C9AE50];
          if (*MEMORY[0x1E0C9AE50] == *(_QWORD *)(v240 + 312) && !*(_QWORD *)(v240 + 184))
          {
            SInt32 = (const void *)FigCFNumberCreateSInt32();
            if (!SInt32)
            {
LABEL_984:
              v10 = -16970;
LABEL_997:
              v287 = v11;
              goto LABEL_998;
            }
            CFDictionarySetValue(v11, (const void *)*MEMORY[0x1E0CED0A8], SInt32);
            CFRelease(SInt32);
          }
          else if ((v246 & 1) == 0)
          {
            v247 = CFDictionaryGetValue(v243, CFSTR("keyFrameInterval"));
            if (v247)
              CFDictionarySetValue(v11, (const void *)*MEMORY[0x1E0CED0A8], v247);
          }
          v249 = figAssetExportSession_CopyEffectiveColorProperties(v504, v243, v483);
          if (v249)
          {
            v250 = v249;
            v251 = CFDictionaryGetValue(v249, CFSTR("colorPrimaries"));
            if (v251)
              CFDictionarySetValue(v11, (const void *)*MEMORY[0x1E0CECF48], v251);
            SInt32 = CFDictionaryGetValue(v250, CFSTR("transferFunction"));
            if (SInt32)
            {
              CFDictionarySetValue(v11, (const void *)*MEMORY[0x1E0CED238], SInt32);
              SInt32 = CFRetain(SInt32);
            }
            v252 = CFDictionaryGetValue(v250, CFSTR("ycbcrMatrix"));
            if (v252)
              CFDictionarySetValue(v11, (const void *)*MEMORY[0x1E0CED290], v252);
            CFRelease(v250);
          }
          else
          {
            SInt32 = 0;
          }
          v253 = CMBaseObjectGetDerivedStorage();
          v254 = (uint64_t)v484;
          if ((int)figAssetExportSession_getAverageVideoBitRateForSourceAndPreset(*(_QWORD *)(v253 + 16), v237, *(_QWORD *)(v253 + 72), (uint64_t)v484, v227, v229, v238) >= 1)FigCFDictionarySetInt();
          if ((v246 & 1) != 0)
          {
            range.start.value = 0;
            *(_QWORD *)&range.start.timescale = 0;
          }
          else
          {
            v255 = CFDictionaryGetValue(v484, CFSTR("dataRateLimitBytes"));
            v256 = CFDictionaryGetValue(v484, CFSTR("dataRateLimitDuration"));
            range.start.value = (CMTimeValue)v255;
            *(_QWORD *)&range.start.timescale = v256;
            if (v255 && v256)
            {
              v257 = CFArrayCreate(v16, (const void **)&range, 2, MEMORY[0x1E0C9B378]);
              if (!v257)
              {
                v10 = FigSignalErrorAt();
                goto LABEL_997;
              }
              v258 = v257;
              CFDictionarySetValue(v11, (const void *)*MEMORY[0x1E0CECF78], v257);
              CFRelease(v258);
            }
            v254 = (uint64_t)v484;
            v259 = CFDictionaryGetValue(v484, CFSTR("frameReordering"));
            if (v259)
              CFDictionarySetValue(v11, (const void *)*MEMORY[0x1E0CECEB0], v259);
          }
          if (v238 > 0.0)
            FigCFDictionarySetDouble();
          LODWORD(v543.value) = 1065353216;
          if (FigCFDictionaryGetFloatIfPresent())
            FigCFDictionarySetFloat();
          v260 = figAssetExportSession_GetVideoCodecType(v254);
          v261 = v260;
          if (v260 > 1685481520)
          {
            if (v260 <= 1869117026)
            {
              if (v260 <= 1751479856)
              {
                if (v260 != 1685481521 && v260 != 1685481573)
                {
                  v264 = 1718908520;
                  goto LABEL_542;
                }
                goto LABEL_543;
              }
              if (v260 == 1751479857 || v260 == 1752589105)
                goto LABEL_543;
              v264 = 1836415073;
            }
            else if (v260 <= 1902407031)
            {
              if (v260 == 1869117027 || v260 == 1902405681)
                goto LABEL_543;
              v264 = 1902405733;
            }
            else
            {
              if (v260 > 1902671458)
              {
                if (v260 == 1902998904)
                  goto LABEL_543;
                v263 = 30307;
              }
              else
              {
                if (v260 == 1902407032)
                  goto LABEL_543;
                v263 = 25974;
              }
              v264 = v263 | 0x71680000;
            }
          }
          else
          {
            if (v260 <= 1634759271)
            {
              if (v260 > 1634743415)
              {
                if ((v260 - 1634755432) > 0xB || ((1 << (v260 - 104)) & 0x8C1) == 0)
                {
                  v262 = 13432;
                  goto LABEL_514;
                }
              }
              else if (v260 != 1634742376 && v260 != 1634742888)
              {
                v262 = 13416;
LABEL_514:
                v264 = v262 | 0x61700000;
                goto LABEL_542;
              }
LABEL_543:
              if (v483)
              {
                PreferredFormatDescription = FigExportSettingsGetPreferredFormatDescription(v483);
                HDRType = FigExportSettingsGetHDRType(PreferredFormatDescription);
              }
              else
              {
                HDRType = 0;
              }
              v276 = FigExportSettingsRequiresHDRMetadata(HDRType);
              v277 = (const void *)*MEMORY[0x1E0CED008];
              if (v276)
              {
                CFDictionarySetValue(v11, v277, (const void *)*MEMORY[0x1E0CED698]);
                if (v483)
                {
                  if (CFArrayGetCount(v483) <= 1)
                    CFDictionarySetValue(v11, (const void *)*MEMORY[0x1E0CED168], theDictb);
                  v278 = FigExportSettingsGetPreferredFormatDescription(v483);
                  if (FigExportSettingsGetHDRType(v278) == 20)
                  {
                    v279 = FigExportSettingsGetPreferredFormatDescription(v483);
                    if (v279)
                    {
                      Extension = CMFormatDescriptionGetExtension(v279, (CFStringRef)*MEMORY[0x1E0CA2150]);
                      if (Extension)
                      {
                        v281 = Extension;
                        v282 = CFGetTypeID(Extension);
                        if (v282 == CFDataGetTypeID())
                        {
                          CFRetain(v281);
                          CFDictionarySetValue(v11, (const void *)*MEMORY[0x1E0CECEE0], v281);
                          CFRelease(v281);
                        }
                      }
                    }
                  }
                }
              }
              else
              {
                CFDictionarySetValue(v11, v277, (const void *)*MEMORY[0x1E0CED6A0]);
              }
LABEL_556:
              v10 = 0;
              LOBYTE(theArray[0]) = 0;
              if (v261 > 1836415072)
              {
                v283 = v484;
                if (v261 > 1902407031)
                {
                  if (v261 > 1902671458)
                  {
                    if (v261 == 1902998904)
                      goto LABEL_581;
                    v285 = 30307;
                  }
                  else
                  {
                    if (v261 == 1902407032)
                      goto LABEL_581;
                    v285 = 25974;
                  }
                  v284 = v285 | 0x71680000;
                }
                else if (v261 > 1902405680)
                {
                  if (v261 == 1902405681)
                    goto LABEL_581;
                  v284 = 1902405733;
                }
                else
                {
                  if (v261 == 1836415073)
                    goto LABEL_581;
                  v284 = 1869117027;
                }
              }
              else
              {
                v283 = v484;
                if (v261 > 1685481572)
                {
                  if (v261 > 1751479856)
                  {
                    if (v261 == 1751479857)
                      goto LABEL_581;
                    v284 = 1752589105;
                  }
                  else
                  {
                    if (v261 == 1685481573)
                      goto LABEL_581;
                    v284 = 1718908520;
                  }
                }
                else if (v261 > 1684895095)
                {
                  if (v261 == 1684895096)
                    goto LABEL_581;
                  v284 = 1685481521;
                }
                else
                {
                  if (v261 == 1667524657)
                    goto LABEL_581;
                  v284 = 1667790435;
                }
              }
              if (v261 != v284)
                goto LABEL_592;
LABEL_581:
              v10 = 0;
              if (!FigCFDictionaryGetBooleanIfPresent() || LOBYTE(theArray[0]) != 1)
              {
LABEL_592:
                if (SInt32)
                  CFRelease(SInt32);
                if (!v10)
                {
                  v293 = CMBaseObjectGetDerivedStorage();
                  v35 = CFDictionaryCreateMutable(v16, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                  v294 = figAssetExportSession_CopyEffectiveColorProperties(v504, v283, v483);
                  if (v294)
                  {
                    v295 = v294;
                    v296 = CFDictionaryGetValue(v294, CFSTR("colorPrimaries"));
                    if (v296 && *(_QWORD *)(v293 + 184))
                      CFDictionarySetValue(v35, (const void *)*MEMORY[0x1E0CED7C0], v296);
                    v297 = CFDictionaryGetValue(v295, CFSTR("transferFunction"));
                    if (v297 && *(_QWORD *)(v293 + 184))
                      CFDictionarySetValue(v35, (const void *)*MEMORY[0x1E0CED7D8], v297);
                    v298 = CFDictionaryGetValue(v295, CFSTR("ycbcrMatrix"));
                    if (v298 && *(_QWORD *)(v293 + 184))
                      CFDictionarySetValue(v35, (const void *)*MEMORY[0x1E0CED7E0], v298);
                    CFRelease(v295);
                  }
                  if (v484)
                  {
                    v299 = CFDictionaryGetValue(v484, CFSTR("scalingMode"));
                    if (v299)
                      CFDictionarySetValue(v35, (const void *)*MEMORY[0x1E0CED848], v299);
                    v300 = CFDictionaryGetValue(v484, CFSTR("videoMatrixHandling"));
                    if (v300)
                      CFDictionarySetValue(v35, CFSTR("MatrixHandling"), v300);
                  }
                  v301 = (_QWORD *)CMBaseObjectGetDerivedStorage();
                  v491 = CFDictionaryCreateMutable(v16, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                  v302 = v301[23];
                  if (v302 && *(_QWORD *)(v302 + 152))
                  {
                    v543.value = 0;
                    theArray[0] = 0;
                    v550 = 0;
                    range.start.value = 0;
                    if (*v301)
                    {
                      v303 = FigCFWeakReferenceHolderCopyReferencedObject();
                      v304 = (const void *)v303;
                      if (v303)
                      {
                        (*(void (**)(uint64_t, const __CFArray *, CMTimeRange *, CMTime *, CFArrayRef *, const void **))(v301[23] + 152))(v303, v483, &range, &v543, theArray, &v550);
                        if (range.start.value)
                          CFDictionarySetValue(v491, CFSTR("VideoCompositionProcessor_CompositionColorPrimaries"), (const void *)range.start.value);
                      }
                    }
                    else
                    {
                      v304 = 0;
                    }
                    if (v543.value)
                      CFDictionarySetValue(v491, CFSTR("VideoCompositionProcessor_CompositionTransferFunction"), (const void *)v543.value);
                    if (theArray[0])
                      CFDictionarySetValue(v491, CFSTR("VideoCompositionProcessor_CompositionYCbCrMatrix"), theArray[0]);
                    if (v550)
                    {
                      v305 = FigCFEqual();
                      v306 = kFigVideoCompositionProcessorHDRDisplayMetadataPolicy_Generate;
                      if (!v305)
                        v306 = kFigVideoCompositionProcessorHDRDisplayMetadataPolicy_Propagate;
                      CFDictionarySetValue(v491, CFSTR("VideoCompositionProcessor_HDRDisplayMetadataPolicy"), *v306);
                    }
                    if (v304)
                      CFRelease(v304);
                  }
                  v307 = v541;
                  v308 = CMBaseObjectGetDerivedStorage();
                  v309 = CFDictionaryCreateMutable(v16, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                  if (figAssetExportSession_canPerformFastFrameRateConversionWithPreset(v504, v484, v307))
                    CFDictionarySetValue(v309, CFSTR("RemakerVideoProcessingOption_VideoFrameRateConversionAlgorithm"), CFSTR("RemakerVideoFrameRateConversionAlgorithm_Fast"));
                  v496 = v309;
                  range.start.value = (CMTimeValue)value;
                  v310 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                  v311 = value;
                  v30 = v483;
                  if (v310)
                  {
                    v310(v504, CFSTR("kFigAssetExportSessionProperty_CanPerformMultiplePassesOverSourceMediaData"), v16, &range);
                    v311 = (const void *)range.start.value;
                  }
                  CFDictionarySetValue(v309, CFSTR("Remaker_MultiPass"), v311);
                  v312 = *(__CFDictionary **)(v308 + 312);
                  v31 = v484;
                  if (theDictb == v312)
                    CFDictionarySetValue(v309, CFSTR("Remaker_PreserveSyncFrames"), theDictb);
                  v221 = v477;
LABEL_635:
                  v478 = v221;
                  v483 = v30;
                  v473 = v35;
                  v471 = v11;
                  if (FigCFEqual())
                    goto LABEL_636;
                  v330 = *(_QWORD *)(DerivedStorage + 16);
                  v331 = *(void (**)(uint64_t, uint64_t, const __CFArray **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 48);
                  if (v331)
                    v331(v330, 1936684398, &v532);
                  if (!v532)
                  {
LABEL_636:
                    v313 = 0;
                    v314 = 0;
                    v12 = v479;
                    goto LABEL_637;
                  }
                  theDict = CFArrayCreateMutable(v16, 0, MEMORY[0x1E0C9B378]);
                  v332 = !v472;
                  if (v168 != 1)
                    v332 = 1;
                  if ((v332 & 1) == 0)
                  {
                    v333 = v541;
                    v334 = *(uint64_t (**)(const void *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 72);
                    v12 = v479;
                    if (v334)
                    {
                      v335 = v334(v333, &v539);
                      if (!v335)
                      {
                        FigCFArrayAppendInt32();
                        if (*(_DWORD *)(DerivedStorage + 344))
                        {
                          v336 = CFArrayGetCount(v532);
                          if (v336 >= 1)
                          {
                            v337 = v336;
                            v338 = 0;
                            while (1)
                            {
                              v339 = CFArrayGetValueAtIndex(v532, v338);
                              if (figAssetExportSession_isAlternateTrack((uint64_t)v339))
                              {
                                v340 = figAssetExportSession_handleAudioAlternateTrack(*(_DWORD *)(DerivedStorage + 344), (uint64_t)v339);
                                if (v340)
                                  break;
                              }
                              if (v337 == ++v338)
                                goto LABEL_752;
                            }
                            v10 = v340;
                            FigSignalErrorAt();
                            ConcatenationOfTwoArrays = 0;
                            v486 = 0;
                            cf = 0;
                            valuea = 0;
                            v34 = 0;
                            v499 = 0;
                            goto LABEL_982;
                          }
                        }
                        goto LABEL_752;
                      }
                      v10 = v335;
                    }
                    else
                    {
                      v10 = -12782;
                    }
                    FigSignalErrorAt();
                    ConcatenationOfTwoArrays = 0;
                    v486 = 0;
                    cf = 0;
                    valuea = 0;
                    v34 = 0;
                    v499 = 0;
                    v33 = v474;
LABEL_963:
                    v32 = VideoEncoderSpecification;
                    goto LABEL_233;
                  }
                  v368 = CFArrayGetCount(v532);
                  if (v368 >= 1)
                  {
                    v369 = v368;
                    v499 = 0;
                    v370 = 0;
                    v371 = (void *)*MEMORY[0x1E0C9AE50];
                    if (v487)
                      v372 = 1;
                    else
                      v372 = cfa == 0;
                    v373 = !v372;
                    while (1)
                    {
                      v374 = CFArrayGetValueAtIndex(v532, v370);
                      v375 = (uint64_t)v374;
                      if (*(_DWORD *)(DerivedStorage + 344) && figAssetExportSession_isAlternateTrack((uint64_t)v374))
                      {
                        v376 = figAssetExportSession_handleAudioAlternateTrack(*(_DWORD *)(DerivedStorage + 344), v375);
                        if (v376)
                        {
                          v10 = v376;
                          FigSignalErrorAt();
                          ConcatenationOfTwoArrays = 0;
                          cf = 0;
                          valuea = 0;
                          v34 = 0;
LABEL_993:
                          v486 = 0;
LABEL_994:
                          v31 = v484;
                          v33 = v474;
                          v12 = v479;
                          goto LABEL_912;
                        }
                      }
                      else
                      {
                        v531 = value;
                        v377 = FigAssetTrackGetCMBaseObject(v375);
                        v378 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                        if (v378)
                          v378(v377, CFSTR("IsEnabled"), v16, &v531);
                        HIDWORD(key) = 0;
                        v379 = *(void (**)(uint64_t, char *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 32);
                        if (v379)
                          v379(v375, (char *)&key + 4, 0);
                        if (v371 == v531)
                        {
                          if ((v373 & 1) != 0)
                          {
                            v34 = CFDictionaryCreateMutable(v16, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                            if (!v34)
                            {
                              v10 = FigSignalErrorAt();
                              ConcatenationOfTwoArrays = 0;
                              cf = 0;
                              valuea = 0;
                              goto LABEL_993;
                            }
                            v380 = v499;
                            if (!v499)
                            {
                              v380 = CFArrayCreateMutable(v16, 0, MEMORY[0x1E0C9B378]);
                              if (!v380)
                              {
                                v10 = FigSignalErrorAt();
                                ConcatenationOfTwoArrays = 0;
                                v486 = 0;
                                cf = 0;
                                valuea = 0;
                                v499 = 0;
                                goto LABEL_994;
                              }
                            }
                            v499 = v380;
                            v381 = *(_QWORD *)(DerivedStorage + 176);
                            FigCFDictionarySetInt32();
                            if (v381)
                            {
                              v382 = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 176), (const void *)SHIDWORD(key));
                              if (v382)
                              {
                                v383 = v382;
                                v384 = (const void *)v382[3];
                                if (v384)
                                  CFDictionarySetValue(v34, CFSTR("RemakerAudioMixdown_VolumeCurve"), v384);
                                v385 = (const void *)v383[1];
                                if (v385)
                                  CFDictionarySetValue(v34, CFSTR("RemakerFamilyAudioProcessingOption_TimePitchAlgorithmSourceTrack"), v385);
                                v386 = (const void *)v383[2];
                                if (v386)
                                  CFDictionarySetValue(v34, CFSTR("RemakerAudioMixdown_AudioProcessingTap"), v386);
                              }
                            }
                            CFArrayAppendValue(v499, v34);
                            CFRelease(v34);
                            v16 = allocator;
                          }
                          else
                          {
                            FigCFArrayAppendInt32();
                          }
                        }
                      }
                      if (v369 == ++v370)
                        goto LABEL_753;
                    }
                  }
LABEL_752:
                  v499 = 0;
LABEL_753:
                  v314 = theDict;
                  if (CFArrayGetCount(theDict))
                  {
                    v30 = v483;
                    v31 = v484;
                    v12 = v479;
                    v11 = v471;
                  }
                  else
                  {
                    v30 = v483;
                    v31 = v484;
                    v12 = v479;
                    v11 = v471;
                    if (theDict)
                    {
                      CFRelease(theDict);
                      v314 = 0;
                    }
                  }
                  if (v532)
                  {
                    CFRelease(v532);
                    v532 = 0;
                  }
                  v313 = v499;
LABEL_637:
                  theDict = v314;
                  v480 = v12;
                  if (*(_QWORD *)(DerivedStorage + 184))
                  {
                    v499 = v313;
                    v315 = *(_QWORD *)(DerivedStorage + 16);
                    v316 = *(void (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 48);
                    if (v316)
                      v316(v315, 1986618469, &v536);
                    v317 = *(_QWORD *)(DerivedStorage + 16);
                    v318 = *(void (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 48);
                    if (v318)
                      v318(v317, 1635088502, &v535);
                    ConcatenationOfTwoArrays = (const __CFArray *)FigCFArrayCreateConcatenationOfTwoArrays();
                    if (v536)
                    {
                      CFRelease(v536);
                      v536 = 0;
                    }
                    if (v535)
                    {
                      CFRelease(v535);
                      v535 = 0;
                    }
                    if (ConcatenationOfTwoArrays)
                    {
                      v319 = CFArrayGetCount(ConcatenationOfTwoArrays);
                      if (v319 >= 1)
                      {
                        v320 = v319;
                        v321 = 0;
                        v322 = 0;
                        v323 = (void *)*MEMORY[0x1E0C9AE50];
                        v324 = ConcatenationOfTwoArrays;
                        while (1)
                        {
                          v325 = CFArrayGetValueAtIndex(v324, v322);
                          v326 = *(void (**)(const void *, char *, void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 32);
                          if (v326)
                            v326(v325, (char *)&key + 4, &key);
                          v531 = value;
                          v327 = FigAssetTrackGetCMBaseObject(v325);
                          v328 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                          if (v328)
                            v328(v327, CFSTR("IsEnabled"), v16, &v531);
                          if (v323 == v531)
                          {
                            v329 = v321;
                            if (!v321)
                            {
                              v329 = CFArrayCreateMutable(v16, 0, MEMORY[0x1E0C9B378]);
                              if (!v329)
                              {
                                v10 = FigSignalErrorAt();
                                v486 = 0;
                                cf = 0;
LABEL_911:
                                valuea = 0;
                                v34 = 0;
                                v31 = v484;
                                v33 = v474;
LABEL_912:
                                v30 = v483;
                                v32 = VideoEncoderSpecification;
                                v11 = v471;
                                v35 = v473;
                                goto LABEL_233;
                              }
                            }
                            v321 = v329;
                            FigCFArrayAppendInt32();
                          }
                          ++v322;
                          v324 = ConcatenationOfTwoArrays;
                          if (v320 == v322)
                            goto LABEL_677;
                        }
                      }
                      v321 = 0;
                      v324 = ConcatenationOfTwoArrays;
LABEL_677:
                      CFRelease(v324);
                      v30 = v483;
                      v341 = v484;
                      v11 = v471;
                    }
                    else
                    {
                      v341 = v31;
                      v321 = 0;
                    }
                    v313 = v499;
                    v314 = theDict;
                  }
                  else
                  {
                    v341 = v31;
                    v321 = 0;
                  }
                  v342 = (unint64_t)Mutable | (unint64_t)v314 | (unint64_t)v313;
                  v343 = v342 != 0;
                  if (!v342 && !v321 && !HIDWORD(v539))
                  {
                    v10 = FigSignalErrorAt();
                    ConcatenationOfTwoArrays = 0;
                    v486 = 0;
                    cf = 0;
                    valuea = 0;
                    v34 = 0;
                    v499 = 0;
                    theDict = 0;
                    Mutable = 0;
                    v33 = v474;
                    v32 = VideoEncoderSpecification;
                    goto LABEL_718;
                  }
                  v486 = v321;
                  if (VideoCodecType != 1851876449)
                    v343 = 1;
                  if (!v343)
                  {
                    v10 = FigSignalErrorAt();
                    ConcatenationOfTwoArrays = 0;
                    cf = 0;
                    valuea = 0;
                    v34 = 0;
                    v499 = 0;
                    theDict = 0;
                    Mutable = 0;
                    goto LABEL_717;
                  }
                  v499 = v313;
                  v31 = v341;
                  v12 = v480;
                  if (!((unint64_t)v314 | (unint64_t)v313))
                  {
LABEL_702:
                    if (Mutable)
                    {
                      v357 = CFArrayGetCount(Mutable);
                      if (v357 >= 1)
                      {
                        v358 = v357;
                        v359 = 0;
                        do
                        {
                          FigCFArrayGetIntAtIndex();
                          v360 = v541;
                          v361 = v539;
                          v362 = *(uint64_t (**)(const void *, uint64_t, _QWORD, _QWORD, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
                          if (!v362)
                            goto LABEL_909;
                          v363 = v362(v360, v361, 0, 0, (char *)&v540 + 4);
                          if (v363)
                            goto LABEL_1009;
                          figAssetExportSession_transferTrackProperties(DerivedStorage, (uint64_t)v541, v539, HIDWORD(v540));
                        }
                        while (v358 != ++v359);
                      }
                    }
                    if (VideoCodecType == 1851876449)
                      goto LABEL_898;
                    v364 = v482;
                    v365 = v492;
                    v11 = v471;
                    v35 = v473;
                    if (VideoCodecType)
                    {
                      if (v486)
                      {
                        v366 = *(_QWORD *)(DerivedStorage + 184);
                        if (!v366)
                          goto LABEL_900;
                        if (*(_QWORD *)(v366 + 64))
                        {
                          v367 = v541;
                          valued = *(void **)(v366 + 64);
                          if (*(_BYTE *)(v366 + 48))
                          {
                            allocatorb = *(CFAllocatorRef *)(v366 + 56);
                            v510 = *(_DWORD *)(v366 + 136);
                            if (!*(_BYTE *)(v366 + 72))
                              goto LABEL_895;
                          }
                          else
                          {
                            if (!*(_BYTE *)(v366 + 72))
                            {
                              v510 = 0;
                              allocatorb = 0;
LABEL_895:
                              cfb = 0;
                              goto LABEL_896;
                            }
                            v510 = 0;
                            allocatorb = *(CFAllocatorRef *)(v366 + 80);
                          }
                          cfb = *(CFTypeRef *)(v366 + 88);
LABEL_896:
                          v432 = *(_QWORD *)(v366 + 168);
                          v433 = *(_QWORD *)(v366 + 176);
                          v434 = *(_QWORD *)(v366 + 184);
                          v435 = *(_QWORD *)(v366 + 40);
                          v436 = *(_DWORD *)(v366 + 140);
                          v437 = *(double *)(v366 + 96);
                          v438 = *(double *)(v366 + 104);
                          v543 = v521;
                          v439 = *(uint64_t (**)(const void *, const __CFArray *, uint64_t, uint64_t, uint64_t, void *, uint64_t, CFAllocatorRef, int, CFTypeRef, _QWORD, _QWORD, CMTimeRange *, uint64_t, uint64_t, int, __CFDictionary *, unsigned int, __CFDictionary *, __CFDictionary *, __CFDictionary *, __CFDictionary *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 112);
                          if (!v439)
                          {
LABEL_909:
                            v10 = -12782;
LABEL_910:
                            FigSignalErrorAt();
                            ConcatenationOfTwoArrays = 0;
                            cf = 0;
                            goto LABEL_911;
                          }
                          range.start = v543;
                          HIDWORD(v469) = (int)UntransformedSourceDimension;
                          HIDWORD(v468) = (int)v437;
                          LODWORD(v469) = (int)v438;
                          LODWORD(v468) = v436;
                          v363 = v439(v367, v486, v432, v433, v434, valued, v435, allocatorb, v510, cfb, 0, 0, &range, v468, v469, (int)v44, v473, VideoCodecType, VideoEncoderSpecification,
                                   v471,
                                   v496,
                                   v491,
                                   &v540);
                          if (v363)
                          {
LABEL_1009:
                            v10 = v363;
                            goto LABEL_910;
                          }
LABEL_898:
                          v364 = v482;
                          v365 = v492;
                          v11 = v471;
LABEL_899:
                          v35 = v473;
                          goto LABEL_900;
                        }
                        v10 = FigSignalErrorAt();
                        ConcatenationOfTwoArrays = 0;
                        cf = 0;
LABEL_1004:
                        valuea = 0;
                        v34 = 0;
LABEL_982:
                        v31 = v484;
                        v33 = v474;
                        goto LABEL_983;
                      }
                      if (!HIDWORD(v539))
                        goto LABEL_900;
                      v533 = 0;
                      v413 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                      if (v413)
                        v413(v504, CFSTR("kFigAssetExportSessionProperty_PresetName"), v16, &v533);
                      if (v533)
                      {
                        if (FigCFEqual() || FigCFEqual() || (v414 = v484) == 0)
                        {
LABEL_883:
                          if (v533)
                          {
                            CFRelease(v533);
                            v533 = 0;
                          }
                          goto LABEL_885;
                        }
                      }
                      else
                      {
                        v414 = v484;
                        if (!v484)
                        {
LABEL_885:
                          v429 = v541;
                          v430 = HIDWORD(v539);
                          v543 = v521;
                          v431 = *(uint64_t (**)(const void *, uint64_t, _QWORD, _QWORD, __CFDictionary *, _QWORD, __CFDictionary *, __CFDictionary *, __CFDictionary *, __CFDictionary *, CMTimeRange *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
                          if (v431)
                          {
                            range.start = v543;
                            v10 = v431(v429, v430, (int)UntransformedSourceDimension, (int)v44, v35, VideoCodecType, VideoEncoderSpecification, v12, v11, v496, &range, &v540);
                          }
                          else
                          {
                            v10 = -12782;
                          }
                          v365 = v492;
                          figAssetExportSession_transferTrackProperties(DerivedStorage, (uint64_t)v541, HIDWORD(v539), v540);
                          if (!v10)
                          {
LABEL_900:
                            v440 = *(_QWORD *)(DerivedStorage + 16);
                            v441 = *(void (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 48);
                            if (v441)
                              v441(v440, 1835365473, &v537);
                            if (!v537)
                            {
                              v406 = v497;
                              v32 = VideoEncoderSpecification;
LABEL_934:
                              v404 = v499;
                              v403 = theDict;
                              v405 = v486;
                              goto LABEL_935;
                            }
                            v442 = CFArrayGetCount((CFArrayRef)v537);
                            if (v442 < 1)
                            {
LABEL_931:
                              v32 = VideoEncoderSpecification;
                              if (v537)
                              {
                                CFRelease(v537);
                                v537 = 0;
                              }
                              v364 = v482;
                              v406 = v497;
                              v365 = v492;
                              goto LABEL_934;
                            }
                            v443 = v442;
                            if (figAssetExportSession_GetTemporalMetadataPresetBlacklist_onceToken != -1)
                              dispatch_once_f(&figAssetExportSession_GetTemporalMetadataPresetBlacklist_onceToken, &figAssetExportSession_GetTemporalMetadataPresetBlacklist__gTemporalMetadataPresetBlacklist, (dispatch_function_t)figAssetExportSession_CreateTemporalMetadataPresetBlacklistOnce);
                            v444 = (const __CFArray *)figAssetExportSession_GetTemporalMetadataPresetBlacklist__gTemporalMetadataPresetBlacklist;
                            if (figAssetExportSession_GetTemporalMetadataPresetBlacklist__gTemporalMetadataPresetBlacklist)
                              v445 = CFArrayGetCount((CFArrayRef)figAssetExportSession_GetTemporalMetadataPresetBlacklist__gTemporalMetadataPresetBlacklist);
                            else
                              v445 = 0;
                            v533 = 0;
                            v446 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                            if (v446)
                              v446(v504, CFSTR("kFigAssetExportSessionProperty_PresetName"), v16, &v533);
                            if (v445)
                            {
                              v35 = v473;
                              if (!v533)
                              {
                                v447 = 0;
                                goto LABEL_923;
                              }
                              v556.location = 0;
                              v556.length = v445;
                              v447 = CFArrayContainsValue(v444, v556, v533) == 0;
                            }
                            else
                            {
                              v447 = 1;
                              v35 = v473;
                            }
                            if (v533)
                            {
                              CFRelease(v533);
                              v533 = 0;
                            }
LABEL_923:
                            figAssetExportSession_actualOutputFileType(v504);
                            FigFormatReaderFileFormat = figAssetExportSession_GetFigFormatReaderFileFormat();
                            CanFileTypeSupportMediaType = FigRemakerCanFileTypeSupportMediaType(FigFormatReaderFileFormat, 1835365473, 0);
                            if (v447 && CanFileTypeSupportMediaType)
                            {
                              v450 = 0;
                              while (1)
                              {
                                v451 = CFArrayGetValueAtIndex((CFArrayRef)v537, v450);
                                LODWORD(range.start.value) = 0;
                                LODWORD(v543.value) = 0;
                                v452 = *(void (**)(const void *, CMTimeRange *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                  + 32);
                                if (v452)
                                  v452(v451, &range, 0);
                                v453 = v541;
                                value_low = LODWORD(range.start.value);
                                v455 = *(uint64_t (**)(const void *, uint64_t, _QWORD, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 136);
                                if (!v455)
                                {
                                  v10 = -12782;
                                  goto LABEL_961;
                                }
                                v456 = v455(v453, value_low, 0, &v543);
                                if (v456)
                                  break;
                                figAssetExportSession_transferTrackProperties(DerivedStorage, (uint64_t)v541, LODWORD(range.start.value), LODWORD(v543.value));
                                ++v450;
                                v35 = v473;
                                if (v443 == v450)
                                  goto LABEL_931;
                              }
                              v10 = v456;
LABEL_961:
                              FigSignalErrorAt();
                              ConcatenationOfTwoArrays = 0;
                              cf = 0;
                              valuea = 0;
LABEL_962:
                              v34 = 0;
                              v30 = v483;
                              v31 = v484;
                              v35 = v473;
                              v33 = v474;
                              goto LABEL_963;
                            }
                            goto LABEL_931;
                          }
                          FigSignalErrorAt();
                          ConcatenationOfTwoArrays = 0;
                          v486 = 0;
                          cf = 0;
                          goto LABEL_1004;
                        }
                      }
                      v421 = CFDictionaryGetValue(v414, CFSTR("videoMatrixHandling"));
                      if (v421 && CFEqual(v421, CFSTR("ApplyRotation")))
                      {
                        v543.value = 0;
                        v422 = v474;
                        if (!v474)
                        {
                          v422 = figAssetExportSession_CopySourceVideoTrack(*(_QWORD *)(DerivedStorage + 16), HIDWORD(v539));
                          if (!v422)
                          {
                            v10 = FigSignalErrorAt();
                            ConcatenationOfTwoArrays = 0;
                            v486 = 0;
                            cf = 0;
                            valuea = 0;
                            v33 = 0;
                            v34 = 0;
                            v31 = v484;
                            goto LABEL_983;
                          }
                        }
                        v423 = *MEMORY[0x1E0C9BAA8];
                        v424 = *(double *)(MEMORY[0x1E0C9BAA8] + 8);
                        v425 = *(double *)(MEMORY[0x1E0C9BAA8] + 16);
                        v426 = *(double *)(MEMORY[0x1E0C9BAA8] + 24);
                        v474 = v422;
                        FigAssetTrackCopyProperty((uint64_t)v422, (uint64_t)CFSTR("PreferredTransform"), (uint64_t)v16, (uint64_t)&v543);
                        if (v543.value)
                        {
                          v427 = CFGetTypeID((CFTypeRef)v543.value);
                          if (v427 == CFArrayGetTypeID())
                          {
                            FigGetCGAffineTransformFrom3x3MatrixArray((const void *)v543.value, (uint64_t)&range);
                            v423 = *(double *)&range.start.value;
                            v424 = *(double *)&range.start.timescale;
                            v425 = *(double *)&range.start.epoch;
                            v426 = *(double *)&range.duration.value;
                          }
                          if (v543.value)
                            CFRelease((CFTypeRef)v543.value);
                          v16 = allocator;
                          v364 = v482;
                          v12 = v480;
                          v11 = v471;
                          v35 = v473;
                        }
                        v428 = v44 * v426 + v424 * UntransformedSourceDimension;
                        UntransformedSourceDimension = fabs(v44 * v425 + v423 * UntransformedSourceDimension);
                        v44 = fabs(v428);
                      }
                      goto LABEL_883;
                    }
                    v407 = CFDictionaryCreateMutable(v16, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                    if (FigCFEqual())
                      v408 = value;
                    else
                      v408 = (const void *)*MEMORY[0x1E0C9AE50];
                    valuea = v407;
                    CFDictionarySetValue(v407, CFSTR("RemakerPassthroughOption_Retime"), v408);
                    v30 = v483;
                    v31 = v484;
                    if ((v521.flags & 1) != 0
                      && figAssetExportSession_canPerformFastFrameRateConversionWithPreset(v504, v484, v541))
                    {
                      range.start = v521;
                      v34 = CMTimeCopyAsDictionary(&range.start, v16);
                      if (!v34)
                      {
                        v10 = FigSignalErrorAt();
                        ConcatenationOfTwoArrays = 0;
                        cf = 0;
                        goto LABEL_868;
                      }
                      CFDictionarySetValue(valuea, CFSTR("RemakerPassthroughOption_FrameDuration"), v34);
                      CFRelease(v34);
                    }
                    v409 = HIDWORD(v539);
                    if (!HIDWORD(v539))
                    {
                      v12 = v480;
                      if (v486)
                      {
                        v415 = CFArrayGetCount(v486);
                        if (v415 >= 1)
                        {
                          v416 = 0;
                          while (1)
                          {
                            FigCFArrayGetIntAtIndex();
                            v417 = v541;
                            v418 = HIDWORD(v539);
                            v419 = *(uint64_t (**)(const void *, uint64_t, __CFDictionary *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
                            if (!v419)
                            {
                              v10 = -12782;
                              goto LABEL_965;
                            }
                            v420 = v419(v417, v418, valuea, &v540);
                            if (v420)
                              break;
                            figAssetExportSession_transferTrackProperties(DerivedStorage, (uint64_t)v541, HIDWORD(v539), v540);
                            if (v415 == ++v416)
                              goto LABEL_856;
                          }
                          v10 = v420;
LABEL_965:
                          FigSignalErrorAt();
                          ConcatenationOfTwoArrays = 0;
                          cf = 0;
                          goto LABEL_962;
                        }
                      }
                      goto LABEL_856;
                    }
                    v410 = v541;
                    v411 = *(uint64_t (**)(const void *, uint64_t, __CFDictionary *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
                    if (v411)
                    {
                      v412 = v411(v410, v409, valuea, &v540);
                      if (!v412)
                      {
                        figAssetExportSession_transferTrackProperties(DerivedStorage, (uint64_t)v541, HIDWORD(v539), v540);
                        v12 = v480;
LABEL_856:
                        if (valuea)
                          CFRelease(valuea);
                        v364 = v482;
                        v365 = v492;
                        goto LABEL_899;
                      }
                      v10 = v412;
                      v30 = v483;
                      v31 = v484;
                      v35 = v473;
                    }
                    else
                    {
                      v10 = -12782;
                      v31 = v484;
                    }
                    FigSignalErrorAt();
                    ConcatenationOfTwoArrays = 0;
                    cf = 0;
                    v34 = 0;
LABEL_868:
                    v33 = v474;
                    v32 = VideoEncoderSpecification;
                    goto LABEL_719;
                  }
                  cf = CFDictionaryCreate(v16, (const void **)kFigRemakerAudioProcessingOption_TimePitchAlgorithm, (const void **)(DerivedStorage + 168), 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                  if (v499)
                  {
                    v344 = v541;
                    v345 = *(uint64_t (**)(const void *, __CFArray *, const void *, CFDictionaryRef, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
                    if (v345)
                    {
                      v346 = v345(v344, v499, v478, cf, (char *)&v540 + 4);
                      if (!v346)
                        goto LABEL_690;
                      v10 = v346;
                    }
                    else
                    {
                      v10 = -12782;
                    }
                    FigSignalErrorAt();
                    ConcatenationOfTwoArrays = 0;
                    valuea = 0;
                    v34 = 0;
                    v33 = v474;
                    v32 = VideoEncoderSpecification;
                    v11 = v471;
                    goto LABEL_233;
                  }
LABEL_690:
                  if (theDict)
                  {
                    v347 = CFArrayGetCount(theDict);
                    if (v347 >= 1)
                    {
                      v348 = v347;
                      for (i = 0; v348 != i; ++i)
                      {
                        FigCFArrayGetIntAtIndex();
                        v350 = v541;
                        v351 = v539;
                        v352 = *(uint64_t (**)(const void *, uint64_t, const void *, CFDictionaryRef, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
                        if (v472)
                        {
                          if (!v352)
                            goto LABEL_834;
                          v353 = v350;
                          v354 = v351;
                          v355 = 0;
                          v356 = 0;
                        }
                        else
                        {
                          if (!v352)
                          {
LABEL_834:
                            v10 = -12782;
                            v30 = v483;
                            v341 = v484;
LABEL_835:
                            FigSignalErrorAt();
                            ConcatenationOfTwoArrays = 0;
                            valuea = 0;
                            v34 = 0;
LABEL_717:
                            v33 = v474;
                            v32 = VideoEncoderSpecification;
                            v11 = v471;
LABEL_718:
                            v31 = v341;
LABEL_719:
                            v12 = v480;
                            goto LABEL_233;
                          }
                          v353 = v350;
                          v354 = v351;
                          v355 = v478;
                          v356 = cf;
                        }
                        v10 = v352(v353, v354, v355, v356, (char *)&v540 + 4);
                        v30 = v483;
                        v341 = v484;
                        if (v10)
                          goto LABEL_835;
                        figAssetExportSession_transferTrackProperties(DerivedStorage, (uint64_t)v541, v539, HIDWORD(v540));
                        v12 = v480;
                      }
                    }
                  }
                  if (cf)
                    CFRelease(cf);
                  goto LABEL_702;
                }
LABEL_977:
                FigSignalErrorAt();
                ConcatenationOfTwoArrays = 0;
                cf = 0;
                v491 = 0;
                valuea = 0;
                v34 = 0;
                v496 = 0;
                v35 = 0;
                v486 = 0;
                v499 = 0;
                theDict = 0;
                v16 = allocator;
                v30 = v483;
                v31 = v484;
                v33 = v474;
                v12 = v479;
                v32 = VideoEncoderSpecification;
                goto LABEL_233;
              }
              v286 = CFArrayCreateMutable(v16, 2, MEMORY[0x1E0C9B378]);
              if (v286)
              {
                v287 = v286;
                appended = FigCFArrayAppendInt64();
                if (appended || (appended = FigCFArrayAppendInt64()) != 0)
                {
                  v10 = appended;
                }
                else
                {
                  CFDictionarySetValue(v11, (const void *)*MEMORY[0x1E0CED080], v287);
                  CFDictionarySetValue(v11, (const void *)*MEMORY[0x1E0CED088], v287);
                  CFDictionarySetValue(v11, (const void *)*MEMORY[0x1E0CED078], v287);
                  if (v483)
                  {
                    v289 = FigExportSettingsGetPreferredFormatDescription(v483);
                    Extensions = CMFormatDescriptionGetExtensions(v289);
                    if (Extensions)
                    {
                      v291 = Extensions;
                      v292 = CFGetTypeID(Extensions);
                      if (v292 == CFDictionaryGetTypeID())
                        CFDictionaryApplyFunction(v291, (CFDictionaryApplierFunction)spatialFormatDescriptionExtensionApplierFunction, v11);
                    }
                    v10 = 0;
                    goto LABEL_591;
                  }
                  v10 = -16971;
                }
                CFRelease(v11);
LABEL_998:
                v11 = 0;
LABEL_591:
                CFRelease(v287);
                v283 = v484;
                goto LABEL_592;
              }
              goto LABEL_984;
            }
            if (v260 <= 1667524656)
            {
              if ((v260 - 1634759272) > 6 || ((1 << (v260 - 104)) & 0x51) == 0)
                goto LABEL_556;
              goto LABEL_543;
            }
            if (v260 == 1667524657 || v260 == 1667790435)
              goto LABEL_543;
            v264 = 1684895096;
          }
LABEL_542:
          if (v260 != v264)
            goto LABEL_556;
          goto LABEL_543;
        }
        CFArrayGetValueAtIndex(v222, 0);
        range.start.value = 0;
        v543.value = 0;
        if (FigVideoFormatDescriptionGetMVHEVCVideoLayerIDs())
        {
          v234 = CFArrayCreateMutable(v16, 2, MEMORY[0x1E0C9B378]);
          if (v234)
          {
            v235 = v234;
            v236 = FigCFArrayAppendInt64();
            if (v236)
            {
              v10 = v236;
            }
            else
            {
              v10 = FigCFArrayAppendInt64();
              if (!v10)
              {
                CFDictionarySetValue(v479, (const void *)*MEMORY[0x1E0CED398], v235);
                goto LABEL_450;
              }
            }
            CFRelease(v479);
LABEL_990:
            v479 = 0;
            v16 = allocator;
LABEL_450:
            CFRelease(v235);
            if (!v10)
              goto LABEL_451;
LABEL_975:
            FigSignalErrorAt();
            v11 = 0;
            ConcatenationOfTwoArrays = 0;
            cf = 0;
            v491 = 0;
            valuea = 0;
            v34 = 0;
            v496 = 0;
            v35 = 0;
            v486 = 0;
            v499 = 0;
            theDict = 0;
            v31 = v484;
            v33 = v474;
            v12 = v479;
LABEL_983:
            v30 = v483;
            goto LABEL_963;
          }
          v10 = -16970;
        }
        else
        {
          v10 = 0;
        }
        v235 = v479;
        goto LABEL_990;
      }
      v172 = figAssetExportSession_CopySourceVideoTrack(*(_QWORD *)(DerivedStorage + 16), HIDWORD(v539));
      if (!v172)
      {
        v474 = 0;
        goto LABEL_392;
      }
      v173 = v172;
      if (v169
        || (v174 = v172, v175 = CFArrayCreateMutable(v16, 0, MEMORY[0x1E0C9B378]), v173 = v174, (v169 = v175) != 0))
      {
        v474 = v173;
        CFArrayAppendValue(v169, v173);
LABEL_392:
        v170 = 1;
        goto LABEL_393;
      }
      v467 = FigSignalErrorAt();
      v33 = v174;
      v10 = v467;
      v11 = 0;
      v12 = 0;
      ConcatenationOfTwoArrays = 0;
      v32 = 0;
      cf = 0;
      v491 = 0;
      valuea = 0;
      v30 = 0;
      v34 = 0;
      v492 = 0;
      v496 = 0;
      goto LABEL_833;
    }
    v267 = CFArrayGetCount((CFArrayRef)v537);
    if (v267 < 1)
    {
      v477 = 0;
      v167 = 1;
      v169 = v495;
    }
    else
    {
      v268 = v267;
      v269 = 0;
      v270 = (void *)*MEMORY[0x1E0C9AE50];
      do
      {
        v271 = CFArrayGetValueAtIndex((CFArrayRef)v537, v269);
        v531 = value;
        v272 = FigAssetTrackGetCMBaseObject(v271);
        v273 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 48);
        if (v273)
          v273(v272, CFSTR("IsEnabled"), v16, &v531);
        if (v270 == v531)
        {
          v169 = v495;
          CFArrayAppendValue(v495, v271);
          v477 = 0;
          v167 = 1;
          goto LABEL_861;
        }
        ++v269;
      }
      while (v268 != v269);
      v477 = 0;
      v167 = 1;
      v169 = v495;
    }
LABEL_861:
    if (v537)
    {
      CFRelease(v537);
      v537 = 0;
    }
    goto LABEL_312;
  }
  if (!figAssetExportSession_canPassThroughVideo(v504, 0, v541, 0, 0, 1)
    || !figAssetExportSession_canPassThroughAudio(v504, 0, 0))
  {
    goto LABEL_230;
  }
  range.start.value = 0;
  v543.value = 0;
  v88 = CMBaseObjectGetDerivedStorage();
  v89 = FigAssetGetCMBaseObject(*(_QWORD *)(v88 + 16));
  v90 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
  if (!v90)
    goto LABEL_135;
  v90(v89, CFSTR("assetProperty_Tracks"), v16, &range);
  if (!range.start.value)
    goto LABEL_139;
  v91 = CFArrayGetCount((CFArrayRef)range.start.value);
  if (v91 >= 1)
  {
    v92 = v91;
    valueb = 0;
    for (j = 0; j != v92; ++j)
    {
      v94 = CFArrayGetValueAtIndex((CFArrayRef)range.start.value, j);
      v95 = FigAssetTrackGetCMBaseObject(v94);
      v96 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                + 48);
      if (v96)
        v96(v95, CFSTR("FormatDescriptionArray"), v16, &v543);
      if (v543.value)
      {
        v97 = CFArrayGetCount((CFArrayRef)v543.value);
        if (v97 >= 1)
        {
          v98 = v97;
          v99 = v16;
          v100 = SettingForFigRemaker;
          v101 = 0;
          while (1)
          {
            v102 = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex((CFArrayRef)v543.value, v101);
            if (FigRemakerIsFormatDescriptionProtected(v102))
              break;
            if (v98 == ++v101)
              goto LABEL_122;
          }
          CMFormatDescriptionGetMediaSubType(v102);
          valueb = 1;
LABEL_122:
          v77 = v504;
          SettingForFigRemaker = v100;
          v16 = v99;
        }
        if (v543.value)
        {
          CFRelease((CFTypeRef)v543.value);
          v543.value = 0;
        }
      }
    }
  }
  else
  {
LABEL_135:
    valueb = 0;
  }
  if (range.start.value)
    CFRelease((CFTypeRef)range.start.value);
  if (valueb)
    goto LABEL_230;
LABEL_139:
  if (!figAssetExportSession_totalSizeOfTracksIsWithinFileLengthLimit(DerivedStorage, (CFArrayRef)v537, SettingForFigRemaker))
  {
LABEL_230:
    v10 = FigSignalErrorAt();
    goto LABEL_231;
  }
  v105 = v541;
  v549 = 0;
  v550 = 0;
  v547 = 0;
  v548 = 0;
  v106 = CMBaseObjectGetDerivedStorage();
  v107 = FigAssetGetCMBaseObject(*(_QWORD *)(v106 + 16));
  v108 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  v475 = SettingForFigRemaker;
  if (!v108)
  {
    v121 = -12782;
LABEL_348:
    FigSignalErrorAt();
LABEL_349:
    v187 = 0;
    v113 = 0;
    v140 = 0;
    v188 = v485;
    goto LABEL_795;
  }
  v500 = v105;
  v109 = v108(v107, CFSTR("assetProperty_FormatReader"), v16, &v548);
  if (v109)
  {
    v121 = v109;
    goto LABEL_348;
  }
  theDicta = CFDictionaryCreateMutable(v16, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!theDicta)
  {
    v121 = FigSignalErrorAt();
    goto LABEL_349;
  }
  if (figAssetExportSession_GetUTTypesForAudioOnly_onceToken != -1)
    dispatch_once_f(&figAssetExportSession_GetUTTypesForAudioOnly_onceToken, &figAssetExportSession_GetUTTypesForAudioOnly__gUTTypesForAudioOnlyArray, (dispatch_function_t)figAssetExportSession_CreateUTTypesForAudioOnlyOnce);
  v110 = (const __CFArray *)figAssetExportSession_GetUTTypesForAudioOnly__gUTTypesForAudioOnlyArray;
  if (!figAssetExportSession_GetUTTypesForAudioOnly__gUTTypesForAudioOnlyArray)
  {
    v121 = FigSignalErrorAt();
    goto LABEL_538;
  }
  v111 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v111)
  {
    v121 = -12782;
LABEL_537:
    FigSignalErrorAt();
LABEL_538:
    v113 = 0;
    goto LABEL_793;
  }
  v112 = v111(v77, CFSTR("kFigAssetExportSessionProperty_OutputFileType"), v16, &v550);
  if (v112)
  {
    v121 = v112;
    goto LABEL_537;
  }
  v553.length = CFArrayGetCount(v110);
  v553.location = 0;
  valuec = CFArrayContainsValue(v110, v553, v550);
  v113 = figAssetExportSession_CopyChapterTracks(*(_QWORD *)(v106 + 16));
  v114 = FigAssetGetCMBaseObject(*(_QWORD *)(v106 + 16));
  v115 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, const __CFArray **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v115)
    v115(v114, CFSTR("assetProperty_Tracks"), v16, &v549);
  if (!v549 || (v116 = CFArrayGetCount(v549), v116 < 1))
  {
LABEL_792:
    v121 = FigSignalErrorAt();
LABEL_793:
    v140 = 0;
LABEL_794:
    v188 = v485;
    v187 = theDicta;
    goto LABEL_795;
  }
  v117 = v116;
  allocatora = 0;
  for (k = 0; k != v117; ++k)
  {
    v119 = CFArrayGetValueAtIndex(v549, k);
    LODWORD(v544) = 0;
    v546 = 0;
    v120 = *(uint64_t (**)(const void *, CFTypeRef *, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v120)
      v121 = v120(v119, &v544, &v546);
    else
      v121 = -12782;
    if (v547)
    {
      CFRelease(v547);
      v547 = 0;
    }
    v122 = v544;
    if ((_DWORD)v544)
    {
      v123 = v548;
      v124 = *(void (**)(CFTypeRef, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 56);
      if (v124)
        v124(v123, v122, &v547, 0);
    }
    v125 = CFSetContainsValue(v113, v119);
    if (FigAssetExportSessionTrackExportPolicy_GetPassthroughExportPolicy((uint64_t)v119, (uint64_t)v550, v125, *(_DWORD *)(v106 + 24), (uint64_t)v547)&& (!valuec || v546 == 1936684398))
    {
      v545 = 0;
      if (v546 != 1835365473)
      {
        if (v546 == 1936684398)
        {
          v498 = v544;
          range.start.value = 0;
          v543.value = 0;
          figAssetExportSession_actualOutputFileType(v504);
          v126 = figAssetExportSession_GetFigFormatReaderFileFormat();
          v127 = FigAssetTrackGetCMBaseObject(v119);
          v128 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
          if (!v128)
            goto LABEL_177;
          v128(v127, CFSTR("FormatDescriptionArray"), v16, &range);
          v129 = (const opaqueCMFormatDescription *)range.start.value;
          if (!range.start.value)
            goto LABEL_178;
          if (CFArrayGetCount((CFArrayRef)range.start.value) >= 1)
            v129 = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex((CFArrayRef)range.start.value, 0);
          else
LABEL_177:
            v129 = 0;
LABEL_178:
          if (!figAssetExportSession_IsPassthroughExportSupportedForAudioFormat(v129, v126, v125, (CMAudioFormatDescriptionRef *)&v543))
          {
            v139 = FigSignalErrorAt();
            v140 = CFErrorCreate(v16, CFSTR("FigAssetExportSession_ErrorDomain"), v139, 0);
LABEL_200:
            if (v139 && !v140)
              v140 = CFErrorCreate(v16, CFSTR("FigAssetExportSession_ErrorDomain"), v139, 0);
LABEL_203:
            if (range.start.value)
              CFRelease((CFTypeRef)range.start.value);
            if (v543.value)
              CFRelease((CFTypeRef)v543.value);
            if (v140)
            {
              FigSignalErrorAt();
              goto LABEL_794;
            }
            goto LABEL_216;
          }
          if (v543.value)
          {
            theArray[0] = 0;
            ChannelLayout = CMAudioFormatDescriptionGetChannelLayout((CMAudioFormatDescriptionRef)v543.value, (size_t *)theArray);
            v136 = CMAudioFormatDescriptionGetStreamBasicDescription((CMAudioFormatDescriptionRef)v543.value);
            v137 = theArray[0];
            v138 = *(uint64_t (**)(CFTypeRef, _QWORD, const AudioStreamBasicDescription *, CFArrayRef, const AudioChannelLayout *, _QWORD, _QWORD, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
            if (v138)
            {
              v139 = v138(v500, v498, v136, v137, ChannelLayout, 0, 0, &v545);
              if (!v139)
              {
LABEL_199:
                v140 = 0;
                goto LABEL_200;
              }
LABEL_198:
              FigSignalErrorAt();
              goto LABEL_199;
            }
          }
          else
          {
            v143 = *(uint64_t (**)(CFTypeRef, _QWORD, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
            if (v143)
            {
              v144 = v143(v500, v498, &v545);
              if (!v144)
              {
                v140 = 0;
                goto LABEL_203;
              }
              v139 = v144;
              goto LABEL_198;
            }
          }
          v139 = -12782;
          goto LABEL_198;
        }
        v132 = v544;
        v133 = *(uint64_t (**)(CFTypeRef, uint64_t, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
        if (!v133)
          goto LABEL_869;
        v134 = v500;
        goto LABEL_176;
      }
      if (figAssetExportSession_GetTemporalMetadataPresetBlacklist_onceToken != -1)
        dispatch_once_f(&figAssetExportSession_GetTemporalMetadataPresetBlacklist_onceToken, &figAssetExportSession_GetTemporalMetadataPresetBlacklist__gTemporalMetadataPresetBlacklist, (dispatch_function_t)figAssetExportSession_CreateTemporalMetadataPresetBlacklistOnce);
      v130 = (const __CFArray *)figAssetExportSession_GetTemporalMetadataPresetBlacklist__gTemporalMetadataPresetBlacklist;
      if (figAssetExportSession_GetTemporalMetadataPresetBlacklist__gTemporalMetadataPresetBlacklist)
        v131 = CFArrayGetCount((CFArrayRef)figAssetExportSession_GetTemporalMetadataPresetBlacklist__gTemporalMetadataPresetBlacklist);
      else
        v131 = 0;
      range.start.value = 0;
      v141 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v141)
        v121 = v141(v504, CFSTR("kFigAssetExportSessionProperty_PresetName"), v16, &range);
      else
        v121 = -12782;
      if (v131)
      {
        if (!range.start.value)
        {
          v142 = 0;
LABEL_210:
          figAssetExportSession_actualOutputFileType(v504);
          v145 = figAssetExportSession_GetFigFormatReaderFileFormat();
          v146 = FigRemakerCanFileTypeSupportMediaType(v145, 1835365473, 0);
          if (!v142 || !v146)
            goto LABEL_216;
          v147 = FigCFDictionaryGetCount();
          v132 = v544;
          v148 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
          if (v147)
          {
            v149 = *(uint64_t (**)(CFTypeRef, uint64_t, _QWORD, int *))(v148 + 136);
            if (!v149)
              goto LABEL_869;
            v135 = v149(v500, v132, 0, &v545);
LABEL_215:
            v121 = v135;
            if (v135)
              goto LABEL_870;
LABEL_216:
            if (!v545)
            {
LABEL_224:
              ++allocatora;
              continue;
            }
            v150 = (const void *)FigCFNumberCreateSInt32();
            v151 = (const void *)FigCFNumberCreateSInt32();
            v152 = v151;
            if (v150 && v151)
            {
              CFDictionarySetValue(theDicta, v151, v150);
            }
            else if (!v151)
            {
              goto LABEL_222;
            }
            CFRelease(v152);
LABEL_222:
            if (v150)
              CFRelease(v150);
            goto LABEL_224;
          }
          v133 = *(uint64_t (**)(CFTypeRef, uint64_t, int *))(v148 + 24);
          if (!v133)
          {
LABEL_869:
            v121 = -12782;
LABEL_870:
            FigSignalErrorAt();
            goto LABEL_793;
          }
          v134 = v500;
LABEL_176:
          v135 = v133(v134, v132, &v545);
          goto LABEL_215;
        }
        v554.location = 0;
        v554.length = v131;
        v142 = CFArrayContainsValue(v130, v554, (const void *)range.start.value) == 0;
      }
      else
      {
        v142 = 1;
      }
      if (range.start.value)
        CFRelease((CFTypeRef)range.start.value);
      goto LABEL_210;
    }
  }
  if (allocatora <= 0)
    goto LABEL_792;
  range.start.value = 0;
  v543.value = 0;
  theArray[0] = 0;
  v544 = 0;
  v387 = FigFormatReaderGetFigBaseObject(v548);
  v388 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 48);
  if (v388)
    v388(v387, CFSTR("Timescale"), v16, &range);
  v389 = range.start.value;
  if (range.start.value)
  {
    v390 = *(void (**)(CFTypeRef, const __CFString *, CMTimeValue))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 32);
    if (v390)
      v390(v500, CFSTR("MovieTimeScale"), v389);
  }
  v391 = FigFormatReaderGetFigBaseObject(v548);
  v392 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
  if (v392)
    v392(v391, CFSTR("MovieMatrix"), v16, &v543);
  v393 = v543.value;
  v187 = theDicta;
  if (v543.value)
  {
    v394 = *(void (**)(CFTypeRef, const __CFString *, CMTimeValue))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 32);
    if (v394)
      v394(v500, CFSTR("MovieMatrix"), v393);
  }
  v395 = FigFormatReaderGetFigBaseObject(v548);
  v396 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
  if (v396)
    v396(v395, CFSTR("PreferredVolume"), v16, theArray);
  v397 = theArray[0];
  if (theArray[0])
  {
    v398 = *(void (**)(CFTypeRef, const __CFString *, CFArrayRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 32);
    if (v398)
      v398(v500, CFSTR("PreferredVolume"), v397);
  }
  v399 = FigFormatReaderGetFigBaseObject(v548);
  v400 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                + 48);
  if (v400)
  {
    v400(v399, CFSTR("PreferredRate"), v16, &v544);
    v401 = v544;
    if (v544)
    {
      v402 = *(void (**)(CFTypeRef, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 32);
      if (v402)
        v402(v500, CFSTR("PreferredRate"), v401);
    }
  }
  if (range.start.value)
    CFRelease((CFTypeRef)range.start.value);
  v188 = v485;
  if (v543.value)
    CFRelease((CFTypeRef)v543.value);
  if (theArray[0])
    CFRelease(theArray[0]);
  if (v544)
    CFRelease(v544);
  v140 = 0;
LABEL_795:
  if (v121 && !v140)
    v140 = CFErrorCreate(v16, CFSTR("FigAssetExportSession_ErrorDomain"), v121, 0);
  if (v547)
    CFRelease(v547);
  if (v549)
    CFRelease(v549);
  if (v113)
    CFRelease(v113);
  if (v550)
    CFRelease(v550);
  if (v187)
    CFRelease(v187);
  if (v548)
    CFRelease(v548);
  v542 = v140;
  if (v140)
  {
    v11 = 0;
    v12 = 0;
    ConcatenationOfTwoArrays = 0;
    v31 = 0;
    v496 = 0;
    v497 = 0;
    v32 = 0;
    cf = 0;
    v491 = 0;
    valuea = 0;
    v33 = 0;
    v30 = 0;
    v34 = 0;
    v35 = 0;
    v492 = 0;
    v486 = 0;
    v499 = 0;
    theDict = 0;
    v10 = 0;
  }
  else
  {
    if (v509)
    {
      v364 = v482;
      if (v188)
        FigFileDeleteFile();
      if (v528)
      {
        CFRelease(v528);
        v403 = 0;
        v404 = 0;
        v405 = 0;
        v365 = 0;
        v35 = 0;
        v496 = 0;
        v491 = 0;
        v483 = 0;
        v484 = 0;
        v474 = 0;
        v32 = 0;
        v406 = 0;
        v12 = 0;
        v11 = 0;
        v528 = 0;
      }
      else
      {
        v403 = 0;
        v404 = 0;
        v405 = 0;
        v365 = 0;
        v35 = 0;
        v496 = 0;
        v491 = 0;
        v483 = 0;
        v484 = 0;
        v474 = 0;
        v32 = 0;
        v406 = 0;
        v12 = 0;
        v11 = 0;
      }
    }
    else
    {
      v403 = 0;
      v404 = 0;
      v405 = 0;
      v365 = 0;
      v35 = 0;
      v496 = 0;
      v491 = 0;
      v483 = 0;
      v484 = 0;
      v474 = 0;
      v32 = 0;
      v406 = 0;
      v12 = 0;
      v11 = 0;
      v364 = v482;
    }
LABEL_935:
    v486 = v405;
    v499 = v404;
    theDict = v403;
    v492 = v365;
    v497 = v406;
    if (v541)
    {
      range.start.value = 0;
      if (FigCFDictionaryGetDoubleIfPresent())
      {
        CMTimeMakeWithSeconds(&time, *(Float64 *)&range.start.value, 1000);
        v457 = CMTimeCopyAsDictionary(&time, v16);
        v458 = v541;
        v459 = HIDWORD(v540);
        v460 = *(void (**)(const void *, uint64_t, const __CFString *, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                 + 40);
        if (v460)
          v460(v458, v459, CFSTR("InterleavingAdvance"), v457);
        CFRelease(v457);
        v364 = v482;
      }
      v461 = (uint64_t)v541;
    }
    else
    {
      v461 = 0;
    }
    figAssetExportSession_applyFileSize(v504, (uint64_t)v475, v461);
    v462 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, const __CFArray **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v462)
      v462(v504, CFSTR("kFigAssetExportSessionProperty_Metadata"), v16, &v526);
    if (v526)
    {
      if (CFArrayGetCount(v526) >= 1)
      {
        v463 = v526;
        v464 = FigRemakerGetFigBaseObject(v541);
        v465 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFArray *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 56);
        if (v465)
        {
          v466 = v465(v464, CFSTR("Remaker_Metadata"), v463);
          if (!v466)
            goto LABEL_948;
          v10 = v466;
        }
        else
        {
          v10 = -12782;
        }
        FigSignalErrorAt();
        ConcatenationOfTwoArrays = 0;
        cf = 0;
        valuea = 0;
        v34 = 0;
LABEL_952:
        v30 = v483;
        v31 = v484;
        goto LABEL_953;
      }
LABEL_948:
      if (v526)
      {
        CFRelease(v526);
        v526 = 0;
      }
    }
    if (v542 || (*v364 = v541, v541 = 0, !v528))
    {
      ConcatenationOfTwoArrays = 0;
      cf = 0;
      valuea = 0;
      v34 = 0;
      v10 = 0;
      goto LABEL_952;
    }
    v30 = v483;
    v31 = v484;
    ConcatenationOfTwoArrays = 0;
    cf = 0;
    valuea = 0;
    v34 = 0;
    v10 = 0;
    if (remakerFamily_getTrackCount())
    {
      *v485 = v528;
      v528 = 0;
      *v481 = v485;
      v485 = 0;
    }
LABEL_953:
    v33 = v474;
  }
LABEL_233:
  if (v529)
  {
    v153 = v31;
    v154 = v35;
    v155 = v11;
    v156 = v32;
    v157 = v30;
    v158 = v12;
    v159 = v16;
    v160 = v33;
    CFRelease(v529);
    v33 = v160;
    v16 = v159;
    v12 = v158;
    v30 = v157;
    v32 = v156;
    v11 = v155;
    v35 = v154;
    v31 = v153;
  }
  if (v33)
    CFRelease(v33);
  if (v530)
    CFRelease(v530);
  if (valuea)
    CFRelease(valuea);
  if (cf)
    CFRelease(cf);
  if (v532)
    CFRelease(v532);
  if (v32)
    CFRelease(v32);
  if (v497)
    CFRelease(v497);
  if (v31)
    CFRelease(v31);
  if (v533)
    CFRelease(v533);
  if (v537)
    CFRelease(v537);
  if (v536)
    CFRelease(v536);
  if (v535)
    CFRelease(v535);
  if (ConcatenationOfTwoArrays)
    CFRelease(ConcatenationOfTwoArrays);
  if (v506)
    CFRelease(v506);
  if (v507)
    CFRelease(v507);
  if (v491)
    CFRelease(v491);
  if (v496)
    CFRelease(v496);
  if (v35)
    CFRelease(v35);
  if (v11)
    CFRelease(v11);
  if (v12)
    CFRelease(v12);
  if (v492)
    CFRelease(v492);
  if (v30)
    CFRelease(v30);
  if (v486)
    CFRelease(v486);
  if (Mutable)
    CFRelease(Mutable);
  if (v499)
    CFRelease(v499);
  if (theDict)
    CFRelease(theDict);
  if (v541)
    CFRelease(v541);
  if (v34)
    CFRelease(v34);
  if (v526)
    CFRelease(v526);
  if (v528)
    CFRelease(v528);
  if (v485)
  {
    v161 = FigFileDeleteFile();
    FAES_RemakerConfigRelease(v161, v485);
  }
  if (v527)
    CFRelease(v527);
  result = v542;
  if (v10)
  {
    if (!v542)
      return CFErrorCreate(v16, CFSTR("FigAssetExportSession_ErrorDomain"), v10, 0);
  }
  return result;
}

void figAssetExportSession_addListeners(uint64_t a1)
{
  _QWORD *v2;
  size_t v3;
  malloc_type_id_t v4;
  _QWORD *v5;
  void *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;

  CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    v9 = 0;
    v2 = figAssetExportSession_figRemakerNotificationNames(&v9);
    if (v9)
    {
      if (v9 >> 60)
        return;
      v3 = 16 * v9;
      v4 = 1556728742;
    }
    else
    {
      v3 = 0;
      v4 = 1270757447;
    }
    v5 = malloc_type_malloc(v3, v4);
    v6 = v5;
    if (v5)
    {
      v7 = v9;
      if (v9)
      {
        v8 = v5 + 1;
        do
        {
          *(v8 - 1) = figAssetExportSession_figRemakerNotification;
          *v8 = v2;
          v8 += 2;
          ++v2;
          --v7;
        }
        while (v7);
      }
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListeners();
      free(v6);
    }
  }
}

CFArrayRef figAssetExportSession_UnsupportedOutputURLPathExtensionsOnce_Worker(CFArrayRef *a1)
{
  CFArrayRef result;
  _OWORD v3[3];
  const __CFString *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3[0] = xmmword_1E2FB8890;
  v3[1] = *(_OWORD *)&off_1E2FB88A0;
  v3[2] = xmmword_1E2FB88B0;
  v4 = CFSTR("mpa");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)v3, 7, MEMORY[0x1E0C9B378]);
  *a1 = result;
  return result;
}

__CFSet *figAssetExportSession_CopyChapterTracks(uint64_t a1)
{
  uint64_t v2;
  __CFSet *Mutable;
  uint64_t CMBaseObject;
  unsigned int (*v5)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeID v6;
  const __CFArray *v7;
  const __CFArray *v8;
  CFTypeID v9;
  CFIndex Count;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, _QWORD, void **);
  void *value;
  CFTypeRef cf;

  cf = 0;
  v2 = *MEMORY[0x1E0C9AE00];
  Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]);
  if (Mutable)
  {
    CMBaseObject = FigAssetGetCMBaseObject(a1);
    v5 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
    if (v5 && !v5(CMBaseObject, CFSTR("assetProperty_TrackReferences"), v2, &cf))
    {
      if (!cf)
        return Mutable;
      v6 = CFGetTypeID(cf);
      if (v6 == CFDictionaryGetTypeID())
      {
        v7 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("chap"));
        if (v7)
        {
          v8 = v7;
          v9 = CFGetTypeID(v7);
          if (v9 == CFArrayGetTypeID())
          {
            Count = CFArrayGetCount(v8);
            v11 = Count >= 0 ? Count : Count + 1;
            if (Count >= 2)
            {
              v12 = v11 >> 1;
              v13 = 1;
              do
              {
                value = 0;
                if (FigCFArrayGetInt32AtIndex())
                {
                  v14 = *(void (**)(uint64_t, _QWORD, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 40);
                  if (v14)
                    v14(a1, 0, &value);
                  if (value)
                  {
                    CFSetAddValue(Mutable, value);
                    if (value)
                      CFRelease(value);
                  }
                }
                v13 += 2;
                --v12;
              }
              while (v12);
            }
          }
        }
      }
    }
    if (cf)
      CFRelease(cf);
  }
  return Mutable;
}

uint64_t figAssetExportSession_CanWriteMediaOfAsset(uint64_t a1, int a2, uint64_t a3, const __CFSet *a4)
{
  uint64_t CMBaseObject;
  unsigned int (*v9)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, const __CFString *, uint64_t, CFArrayRef *);
  CFIndex Count;
  CFIndex v14;
  CFIndex v15;
  unsigned __int8 v16;
  const void *ValueAtIndex;
  int v18;
  void (*v19)(const void *, unsigned int *, _QWORD);
  uint64_t v20;
  CFTypeRef v21;
  void (*v22)(CFTypeRef, uint64_t, CFTypeRef *, _QWORD);
  int PassthroughExportPolicy;
  unsigned int v25;
  CFTypeRef cf;
  CFTypeRef v27;
  CFArrayRef theArray;

  v27 = 0;
  theArray = 0;
  CMBaseObject = FigAssetGetCMBaseObject(a1);
  v9 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
  if (!v9)
    goto LABEL_21;
  v10 = *MEMORY[0x1E0C9AE00];
  if (v9(CMBaseObject, CFSTR("assetProperty_FormatReader"), *MEMORY[0x1E0C9AE00], &v27))
    goto LABEL_21;
  v11 = FigAssetGetCMBaseObject(a1);
  v12 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
  if (!v12 || v12(v11, CFSTR("assetProperty_Tracks"), v10, &theArray))
    goto LABEL_21;
  if (!theArray)
  {
    v16 = 0;
    goto LABEL_25;
  }
  Count = CFArrayGetCount(theArray);
  if (Count < 1)
  {
LABEL_21:
    v16 = 0;
  }
  else
  {
    v14 = Count;
    v15 = 0;
    v16 = 0;
    do
    {
      cf = 0;
      v25 = 0;
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v15);
      v18 = CFSetContainsValue(a4, ValueAtIndex);
      v19 = *(void (**)(const void *, unsigned int *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 32);
      if (v19)
        v19(ValueAtIndex, &v25, 0);
      v20 = v25;
      if (v25)
      {
        v21 = v27;
        v22 = *(void (**)(CFTypeRef, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 56);
        if (v22)
          v22(v21, v20, &cf, 0);
      }
      PassthroughExportPolicy = FigAssetExportSessionTrackExportPolicy_GetPassthroughExportPolicy((uint64_t)ValueAtIndex, a3, v18, a2, (uint64_t)cf);
      if (cf)
        CFRelease(cf);
      if (PassthroughExportPolicy == 2)
      {
        v16 = 1;
      }
      else if (PassthroughExportPolicy == 1)
      {
        goto LABEL_21;
      }
      ++v15;
    }
    while (v14 != v15);
  }
  if (theArray)
    CFRelease(theArray);
LABEL_25:
  if (v27)
    CFRelease(v27);
  return v16;
}

uint64_t figAssetExportSession_HasEditSegmentData(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t FigBaseObject;
  void (*v6)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v11;
  CFTypeRef v12;
  unsigned int (*v13)(CFTypeRef, _BYTE *, CFTypeRef *);
  CFTypeRef v14;
  unsigned int (*v15)(CFTypeRef, _BYTE *);
  CFTypeRef v16;
  unsigned int (*v17)(CFTypeRef, uint64_t);
  CMTimeRange v19;
  _BYTE duration[32];
  __int128 v21;
  _BYTE start[32];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  CMTimeRange v27;
  CFTypeRef v28;
  CFTypeRef v29;
  CFTypeRef v30;

  v29 = 0;
  v30 = 0;
  v28 = 0;
  v4 = *MEMORY[0x1E0C9AE00];
  FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  v6 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
  if (!v6)
    goto LABEL_4;
  v6(FigBaseObject, CFSTR("SecondaryEditCursorService"), v4, &v30);
  v7 = (uint64_t)v30;
  if (!v30
    || (*(_OWORD *)start = *MEMORY[0x1E0CA2E28],
        *(_QWORD *)&start[16] = *(_QWORD *)(MEMORY[0x1E0CA2E28] + 16),
        *(_OWORD *)duration = *MEMORY[0x1E0CA2E30],
        *(_QWORD *)&duration[16] = *(_QWORD *)(MEMORY[0x1E0CA2E30] + 16),
        CMTimeRangeMake(&v27, (CMTime *)start, (CMTime *)duration),
        v8 = figAssetExportSession__editCursorServiceContainsEditsInTimeRange(v7, (uint64_t)&v27, a2),
        !(_DWORD)v8))
  {
LABEL_4:
    v9 = FigTrackReaderGetFigBaseObject(a1);
    v10 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
    if (!v10 || (v10(v9, CFSTR("EditCursorService"), v4, &v29), (v11 = (uint64_t)v29) == 0))
    {
LABEL_18:
      v8 = 0;
      goto LABEL_20;
    }
    v12 = v30;
    if (v30)
    {
      v13 = *(unsigned int (**)(CFTypeRef, _BYTE *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 8);
      if (v13)
      {
        *(_OWORD *)start = *MEMORY[0x1E0CA2E28];
        *(_QWORD *)&start[16] = *(_QWORD *)(MEMORY[0x1E0CA2E28] + 16);
        if (!v13(v12, start, &v28))
        {
          while (1)
          {
            v25 = 0u;
            v26 = 0u;
            v23 = 0u;
            v24 = 0u;
            memset(start, 0, sizeof(start));
            v14 = v28;
            v15 = *(unsigned int (**)(CFTypeRef, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
            if (!v15 || v15(v14, start))
              break;
            if ((start[12] & 1) != 0
              && (BYTE4(v23) & 1) != 0
              && !*((_QWORD *)&v23 + 1)
              && (*(_QWORD *)&start[24] & 0x8000000000000000) == 0)
            {
              *(_OWORD *)duration = *(_OWORD *)start;
              *(_OWORD *)&duration[16] = *(_OWORD *)&start[16];
              v21 = v23;
              if (figAssetExportSession__editCursorServiceContainsEditsInTimeRange((uint64_t)v29, (uint64_t)duration, a2))
              {
                v8 = 1;
                goto LABEL_20;
              }
            }
            v16 = v28;
            v17 = *(unsigned int (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
            if (!v17 || v17(v16, 1))
              goto LABEL_18;
          }
        }
      }
      goto LABEL_18;
    }
    *(_OWORD *)start = *MEMORY[0x1E0CA2E28];
    *(_QWORD *)&start[16] = *(_QWORD *)(MEMORY[0x1E0CA2E28] + 16);
    *(_OWORD *)duration = *MEMORY[0x1E0CA2E30];
    *(_QWORD *)&duration[16] = *(_QWORD *)(MEMORY[0x1E0CA2E30] + 16);
    CMTimeRangeMake(&v19, (CMTime *)start, (CMTime *)duration);
    v8 = figAssetExportSession__editCursorServiceContainsEditsInTimeRange(v11, (uint64_t)&v19, a2);
  }
LABEL_20:
  if (v30)
    CFRelease(v30);
  if (v29)
    CFRelease(v29);
  if (v28)
    CFRelease(v28);
  return v8;
}

CFArrayRef figAssetExportSession_CreateUTTypesForAudioOnlyOnce(CFArrayRef *a1)
{
  CFArrayRef result;
  void *values[7];

  values[6] = *(void **)MEMORY[0x1E0C80C00];
  values[0] = CFSTR("com.apple.m4a-audio");
  values[1] = CFSTR("org.3gpp.adaptive-multi-rate-audio");
  values[2] = CFSTR("com.microsoft.waveform-audio");
  values[3] = CFSTR("public.aiff-audio");
  values[4] = CFSTR("public.aifc-audio");
  values[5] = CFSTR("com.apple.coreaudio-format");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 6, MEMORY[0x1E0C9B378]);
  *a1 = result;
  return result;
}

uint64_t figAssetExportSession__editCursorServiceContainsEditsInTimeRange(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t (*v6)(uint64_t, __int128 *, const void **);
  int v7;
  const void *v8;
  unsigned int (*v9)(const void *, __int128 *);
  int v10;
  uint64_t v11;
  const void *v12;
  unsigned int (*v13)(const void *, uint64_t);
  __int128 v14;
  CMTime v16;
  CMTimeRange time1;
  CMTime v18;
  CMTime time2;
  __int128 v20;
  _BYTE v21[80];
  const void *v22;

  v22 = 0;
  *(_OWORD *)&time1.start.value = *(_OWORD *)a2;
  time1.start.epoch = *(_QWORD *)(a2 + 16);
  v6 = *(uint64_t (**)(uint64_t, __int128 *, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v6)
    return 0;
  v20 = *(_OWORD *)&time1.start.value;
  *(_QWORD *)v21 = time1.start.epoch;
  v7 = v6(a1, &v20, &v22);
  v8 = v22;
  if (v7)
  {
    v11 = 0;
    if (!v22)
      return v11;
LABEL_32:
    CFRelease(v8);
    return v11;
  }
  v20 = 0u;
  memset(v21, 0, sizeof(v21));
  v9 = *(unsigned int (**)(const void *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v9)
  {
    v10 = 0;
    v11 = 1;
    while (!v9(v8, &v20))
    {
      if (a3)
      {
        if (a3 == 1)
        {
          if ((BYTE12(v20) & 1) == 0)
            goto LABEL_34;
        }
        else
        {
          if (a3 == 2 && v10)
            goto LABEL_34;
          if (a3 == 3)
          {
            if ((v21[44] & 1) == 0)
              goto LABEL_34;
            if ((v21[68] & 1) == 0 || *(_QWORD *)&v21[72] || (*(_QWORD *)&v21[56] & 0x8000000000000000) != 0)
              goto LABEL_28;
          }
        }
      }
      else if ((BYTE12(v20) & 1) != 0
             && (v21[20] & 1) != 0
             && !*(_QWORD *)&v21[24]
             && (*(_QWORD *)&v21[8] & 0x8000000000000000) == 0)
      {
        *(_OWORD *)&time1.start.value = *(_OWORD *)&v21[8];
        time1.start.epoch = *(_QWORD *)&v21[24];
        time2 = *(CMTime *)&v21[56];
        if (CMTimeCompare(&time1.start, &time2))
        {
LABEL_34:
          v11 = 1;
          goto LABEL_28;
        }
      }
      v12 = v22;
      v13 = *(unsigned int (**)(const void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v13)
      {
        if (!v13(v12, 1))
        {
          v14 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&time1.start.value = *(_OWORD *)a2;
          *(_OWORD *)&time1.start.epoch = v14;
          *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(a2 + 32);
          CMTimeRangeGetEnd(&v18, &time1);
          time1 = *(CMTimeRange *)&v21[32];
          CMTimeRangeGetEnd(&v16, &time1);
          if (CMTimeCompare(&v18, &v16) > 0)
          {
            v20 = 0u;
            memset(v21, 0, sizeof(v21));
            v8 = v22;
            v9 = *(unsigned int (**)(const void *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 24);
            --v10;
            if (v9)
              continue;
          }
        }
      }
      break;
    }
  }
  v11 = 0;
LABEL_28:
  v8 = v22;
  if (v22)
    goto LABEL_32;
  return v11;
}

uint64_t FigAssetExportSessionTrackExportPolicy_GetPassthroughExportPolicy(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  const __CFString *FigFormatReaderFileFormat;
  unsigned int (*v10)(uint64_t, _QWORD, int *);
  uint64_t CFStringForOSTypeValue;
  uint64_t v12;
  const void *v13;
  uint64_t CMBaseObject;
  void (*v15)(uint64_t, const __CFString *, _QWORD, CFArrayRef *);
  CFIndex Count;
  CFIndex v17;
  CFIndex v18;
  const opaqueCMFormatDescription *ValueAtIndex;
  CMMediaType MediaType;
  int IsPassthroughExportSupportedForAudioFormat;
  CFArrayRef theArray;
  int v24;

  v24 = 0;
  theArray = 0;
  FigFormatReaderFileFormat = figAssetExportSession_GetFigFormatReaderFileFormat();
  v10 = *(unsigned int (**)(uint64_t, _QWORD, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v10 || v10(a1, 0, &v24))
  {
LABEL_27:
    v12 = 1;
  }
  else
  {
    CFStringForOSTypeValue = FigGetCFStringForOSTypeValue();
    v12 = 1;
    if (CFStringForOSTypeValue && FigFormatReaderFileFormat)
    {
      v13 = (const void *)CFStringForOSTypeValue;
      if (figAssetExportSession_MediaTypesToStripOnPassthroughExport_onceToken != -1)
        dispatch_once_f(&figAssetExportSession_MediaTypesToStripOnPassthroughExport_onceToken, &figAssetExportSession_MediaTypesToStripOnPassthroughExport_sMediaTypesToStrip, (dispatch_function_t)figAssetExportSession_MediaTypesToStripOnPassthroughExportWorkerOnce);
      if (CFSetContainsValue((CFSetRef)figAssetExportSession_MediaTypesToStripOnPassthroughExport_sMediaTypesToStrip, v13))
      {
        goto LABEL_8;
      }
      if (figAssetExportSession_MediaTypesToFailPassthroughExport_onceToken != -1)
        dispatch_once_f(&figAssetExportSession_MediaTypesToFailPassthroughExport_onceToken, &figAssetExportSession_MediaTypesToFailPassthroughExport_sMediaTypesToFail, (dispatch_function_t)figAssetExportSession_MediaTypesToFailPassthroughExportWorkerOnce);
      if (CFSetContainsValue((CFSetRef)figAssetExportSession_MediaTypesToFailPassthroughExport_sMediaTypesToFail, v13))
        goto LABEL_28;
      if (a4 == 1 && a5 && figAssetExportSession_HasEditSegmentData(a5, 3))
        goto LABEL_8;
      CMBaseObject = FigAssetTrackGetCMBaseObject(a1);
      v15 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
      if (!v15)
        return 0;
      v15(CMBaseObject, CFSTR("FormatDescriptionArray"), *MEMORY[0x1E0C9AE00], &theArray);
      if (!theArray)
        return 0;
      Count = CFArrayGetCount(theArray);
      if (!Count)
        goto LABEL_8;
      v17 = Count;
      if (Count >= 1)
      {
        v18 = 0;
        v12 = 2;
        while (1)
        {
          ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(theArray, v18);
          MediaType = CMFormatDescriptionGetMediaType(ValueAtIndex);
          if (!FigRemakerCanFileTypeSupportMediaType(FigFormatReaderFileFormat, MediaType, a3))
            break;
          if (CMFormatDescriptionGetMediaType(ValueAtIndex) == 1936684398)
            IsPassthroughExportSupportedForAudioFormat = figAssetExportSession_IsPassthroughExportSupportedForAudioFormat(ValueAtIndex, FigFormatReaderFileFormat, a3, 0);
          else
            IsPassthroughExportSupportedForAudioFormat = FigRemakerCanFileTypeSupportFormatDescription(FigFormatReaderFileFormat, ValueAtIndex, a3);
          if (!IsPassthroughExportSupportedForAudioFormat)
            goto LABEL_27;
          if (v17 == ++v18)
            goto LABEL_28;
        }
LABEL_8:
        v12 = 0;
        goto LABEL_28;
      }
      v12 = 2;
    }
  }
LABEL_28:
  if (theArray)
    CFRelease(theArray);
  return v12;
}

CFSetRef figAssetExportSession_MediaTypesToStripOnPassthroughExportWorkerOnce(CFSetRef *a1)
{
  CFSetRef result;
  __int128 v3;
  const __CFString *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3 = xmmword_1E2FB88C8;
  v4 = CFSTR("hint");
  result = CFSetCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&v3, 3, MEMORY[0x1E0C9B3B0]);
  *a1 = result;
  return result;
}

CFSetRef figAssetExportSession_MediaTypesToFailPassthroughExportWorkerOnce(CFSetRef *a1)
{
  CFSetRef result;
  _OWORD v3[7];
  const __CFString *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3[4] = xmmword_1E2FB8920;
  v3[5] = *(_OWORD *)&off_1E2FB8930;
  v3[6] = xmmword_1E2FB8940;
  v4 = CFSTR("mpeg");
  v3[0] = xmmword_1E2FB88E0;
  v3[1] = *(_OWORD *)&off_1E2FB88F0;
  v3[2] = xmmword_1E2FB8900;
  v3[3] = *(_OWORD *)&off_1E2FB8910;
  result = CFSetCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)v3, 15, MEMORY[0x1E0C9B3B0]);
  *a1 = result;
  return result;
}

uint64_t figAssetExportSession_IsPassthroughExportSupportedForAudioFormat(const opaqueCMFormatDescription *a1, const void *a2, int a3, CMAudioFormatDescriptionRef *a4)
{
  _BOOL8 v8;
  const AudioStreamBasicDescription *StreamBasicDescription;
  __int128 v10;
  __int128 v11;
  const AudioChannelLayout *ChannelLayout;
  const void *MagicCookie;
  const __CFAllocator *v14;
  size_t v15;
  size_t v16;
  const __CFDictionary *Extensions;
  OSStatus v18;
  CMAudioFormatDescriptionRef v19;
  int CanFileTypeSupportFormatDescription;
  CMAudioFormatDescriptionRef formatDescriptionOut;
  AudioStreamBasicDescription asbd;
  size_t v24;
  size_t sizeOut;

  v24 = 0;
  sizeOut = 0;
  formatDescriptionOut = 0;
  if (!a1 || CMFormatDescriptionGetMediaType(a1) != 1936684398)
    return 0;
  if (a4)
    *a4 = 0;
  if (FigRemakerCanFileTypeSupportFormatDescription(a2, a1, a3))
    return 1;
  StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(a1);
  if (StreamBasicDescription->mFormatID != 1819304813)
    return 0;
  v11 = *(_OWORD *)&StreamBasicDescription->mSampleRate;
  v10 = *(_OWORD *)&StreamBasicDescription->mBytesPerPacket;
  *(_QWORD *)&asbd.mBitsPerChannel = *(_QWORD *)&StreamBasicDescription->mBitsPerChannel;
  *(_OWORD *)&asbd.mSampleRate = v11;
  *(_OWORD *)&asbd.mBytesPerPacket = v10;
  asbd.mFormatFlags = HIDWORD(v11) ^ 2;
  ChannelLayout = CMAudioFormatDescriptionGetChannelLayout(a1, &sizeOut);
  MagicCookie = CMAudioFormatDescriptionGetMagicCookie(a1, &v24);
  v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v16 = v24;
  v15 = sizeOut;
  Extensions = CMFormatDescriptionGetExtensions(a1);
  v18 = CMAudioFormatDescriptionCreate(v14, &asbd, v15, ChannelLayout, v16, MagicCookie, Extensions, &formatDescriptionOut);
  v19 = formatDescriptionOut;
  if (v18)
  {
    v8 = 0;
  }
  else
  {
    CanFileTypeSupportFormatDescription = FigRemakerCanFileTypeSupportFormatDescription(a2, formatDescriptionOut, a3);
    v8 = CanFileTypeSupportFormatDescription != 0;
    v19 = formatDescriptionOut;
    if (a4 && CanFileTypeSupportFormatDescription)
    {
      *a4 = formatDescriptionOut;
      return 1;
    }
  }
  if (v19)
    CFRelease(v19);
  return v8;
}

uint64_t figAssetExportSession_HasDecodableTrack(CFArrayRef theArray)
{
  CFIndex v2;
  uint64_t v3;
  CFIndex v4;
  const void *ValueAtIndex;
  uint64_t CMBaseObject;
  uint64_t (*v7)(uint64_t, const __CFString *, uint64_t, CFNumberRef *);
  int v8;
  CFNumberRef v9;
  int valuePtr;
  CFNumberRef number;

  v2 = 0;
  v3 = *MEMORY[0x1E0C9AE00];
  while (1)
  {
    v4 = theArray ? CFArrayGetCount(theArray) : 0;
    if (v2 >= v4)
      return 0;
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, v2);
    number = 0;
    valuePtr = 0;
    CMBaseObject = FigAssetTrackGetCMBaseObject(ValueAtIndex);
    v7 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
    if (v7)
    {
      v8 = v7(CMBaseObject, CFSTR("assetTrackProperty_MediaDecodingValidation"), v3, &number);
      v9 = number;
      if (v8)
        goto LABEL_10;
      if (number)
      {
        CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
        v9 = number;
LABEL_10:
        if (v9)
          CFRelease(v9);
      }
    }
    ++v2;
    if (!valuePtr)
      return 1;
  }
}

const __CFDictionary *figAssetExportSession_IsAlphaPreset(void *a1)
{
  const __CFDictionary *result;
  const __CFDictionary *v2;
  const __CFArray *Value;
  const __CFDictionary *ValueAtIndex;

  result = (const __CFDictionary *)FigExportSettingsForExportPreset(a1);
  if (result)
  {
    v2 = result;
    Value = (const __CFArray *)CFDictionaryGetValue(result, CFSTR("mediaTiers"));
    if (Value)
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Value, 0);
    else
      ValueAtIndex = v2;
    result = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, CFSTR("Video"));
    if (result)
    {
      FigCFDictionaryGetBooleanIfPresent();
      return 0;
    }
  }
  return result;
}

const __CFDictionary *figAssetExportSession_IsStereoPreset(void *a1)
{
  const __CFDictionary *result;

  result = (const __CFDictionary *)FigExportSettingsForExportPreset(a1);
  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("Video"));
    if (result)
    {
      FigCFDictionaryGetBooleanIfPresent();
      return 0;
    }
  }
  return result;
}

CGFloat FigAssetExportSession_getUntransformedSourceDimension(uint64_t a1, uint64_t a2, CGSize *a3)
{
  CFTypeRef v3;
  const void *v4;
  uint64_t v5;
  uint64_t CMBaseObject;
  void (*v7)(uint64_t, const __CFString *, uint64_t, CFArrayRef *);
  const opaqueCMFormatDescription *ValueAtIndex;
  uint64_t v9;
  void (*v10)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeID v11;
  CFTypeRef cf;
  CFArrayRef theArray;
  CGSize size;

  size.width = 0.0;
  size.height = 0.0;
  if (a3)
  {
    size = a3[6];
  }
  else
  {
    v3 = figAssetExportSession_CopySourceVideoTrack(a1, a2);
    if (v3)
    {
      v4 = v3;
      theArray = 0;
      v5 = *MEMORY[0x1E0C9AE00];
      CMBaseObject = FigAssetTrackGetCMBaseObject(v3);
      v7 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
      if (v7
        && (v7(CMBaseObject, CFSTR("FormatDescriptionArray"), v5, &theArray), theArray)
        && CFArrayGetCount(theArray) >= 1)
      {
        ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(theArray, 0);
        size = CMVideoFormatDescriptionGetPresentationDimensions(ValueAtIndex, 1u, 0);
      }
      else
      {
        cf = 0;
        v9 = FigAssetTrackGetCMBaseObject(v4);
        v10 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
        if (v10)
        {
          v10(v9, CFSTR("NaturalSize"), v5, &cf);
          if (cf)
          {
            v11 = CFGetTypeID(cf);
            if (v11 == CFDictionaryGetTypeID())
            {
              CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)cf, &size);
              CFRelease(cf);
            }
          }
        }
      }
      if (theArray)
        CFRelease(theArray);
      CFRelease(v4);
    }
  }
  return size.width;
}

CFArrayRef figAssetExportSession_CreateAudioOnlyPresetsOnce(CFArrayRef *a1)
{
  CFArrayRef result;
  _OWORD v3[2];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v3[0] = xmmword_1E2FB8958;
  v3[1] = *(_OWORD *)&off_1E2FB8968;
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)v3, 4, MEMORY[0x1E0C9B378]);
  *a1 = result;
  return result;
}

CFArrayRef figAssetExportSession_CreateGetVideoOnlyPresetsOnce(CFArrayRef *a1)
{
  CFArrayRef result;

  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)kFigAssetExportSessionPresetAuxSmall, 1, MEMORY[0x1E0C9B378]);
  *a1 = result;
  return result;
}

uint64_t figAssetExportSession_hasVideoTrack(uint64_t a1)
{
  uint64_t v1;
  uint64_t CMBaseObject;
  unsigned int (*v3)(uint64_t, const __CFString *, _QWORD, CFArrayRef *);
  uint64_t v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  uint64_t v8;
  const void *ValueAtIndex;
  unsigned int (*v10)(const void *, _QWORD, int *);
  uint64_t v11;
  unsigned int (*v12)(uint64_t, const __CFString *, uint64_t, uint64_t *);
  uint64_t v13;
  int v15;
  uint64_t v16;
  CFArrayRef theArray;

  theArray = 0;
  v1 = *MEMORY[0x1E0C9AE40];
  v16 = *MEMORY[0x1E0C9AE40];
  v15 = 0;
  CMBaseObject = FigAssetGetCMBaseObject(a1);
  v3 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
  if (v3)
  {
    v4 = *MEMORY[0x1E0C9AE00];
    if (!v3(CMBaseObject, CFSTR("assetProperty_Tracks"), *MEMORY[0x1E0C9AE00], &theArray))
    {
      if (!theArray)
        return 0;
      Count = CFArrayGetCount(theArray);
      if (Count >= 1)
      {
        v6 = Count;
        v7 = 0;
        v8 = *MEMORY[0x1E0C9AE50];
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(theArray, v7);
          v16 = v1;
          v15 = 0;
          v10 = *(unsigned int (**)(const void *, _QWORD, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 32);
          if (!v10 || v10(ValueAtIndex, 0, &v15))
            break;
          if (v15 == 1986618469)
          {
            v11 = FigAssetTrackGetCMBaseObject(ValueAtIndex);
            v12 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
            if (!v12 || v12(v11, CFSTR("IsEnabled"), v4, &v16))
              break;
            if (v16 == v8)
            {
              v13 = 1;
              goto LABEL_14;
            }
          }
          ++v7;
        }
        while (v6 != v7);
      }
    }
  }
  v13 = 0;
LABEL_14:
  if (theArray)
    CFRelease(theArray);
  return v13;
}

CFMutableArrayRef figAssetExportSession_copyFormatDescriptionsOfSourceVideoTrack(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, CFTypeRef *);
  uint64_t CMBaseObject;
  void (*v7)(uint64_t, const __CFString *, _QWORD, CFMutableArrayRef *);
  void (*v8)(uint64_t, uint64_t, CFArrayRef *);
  CFIndex Count;
  uint64_t v10;
  uint64_t v11;
  CFMutableArrayRef Mutable;
  __CFArray *v13;
  CFIndex v14;
  CFTypeRef v15;
  const void *ValueAtIndex;
  uint64_t v17;
  void (*v18)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef v19;
  uint64_t v20;
  void (*v21)(uint64_t, const __CFString *, uint64_t, CFArrayRef *);
  CFIndex v22;
  CFTypeRef v24;
  CFArrayRef otherArray;
  CFMutableArrayRef v26;
  CFTypeRef cf;
  CFArrayRef theArray;
  CFRange v29;

  cf = 0;
  theArray = 0;
  otherArray = 0;
  v26 = 0;
  v24 = (CFTypeRef)*MEMORY[0x1E0C9AE40];
  v4 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if ((_DWORD)a2)
  {
    v5 = *(void (**)(uint64_t, uint64_t, CFTypeRef *))(v4 + 40);
    if (v5)
    {
      v5(a1, a2, &cf);
      if (cf)
      {
        CMBaseObject = FigAssetTrackGetCMBaseObject(cf);
        v7 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFMutableArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
        if (v7)
          v7(CMBaseObject, CFSTR("FormatDescriptionArray"), *MEMORY[0x1E0C9AE00], &v26);
        CFRelease(cf);
      }
    }
    goto LABEL_31;
  }
  v8 = *(void (**)(uint64_t, uint64_t, CFArrayRef *))(v4 + 48);
  if (!v8)
    goto LABEL_31;
  v8(a1, 1986618469, &theArray);
  if (!theArray)
    goto LABEL_31;
  Count = CFArrayGetCount(theArray);
  if (!Count)
    goto LABEL_31;
  v10 = Count;
  v11 = *MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v26 = Mutable;
  if (!Mutable)
    goto LABEL_31;
  v13 = Mutable;
  if (v10 >= 1)
  {
    v14 = 0;
    v15 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v14);
      cf = ValueAtIndex;
      v17 = FigAssetTrackGetCMBaseObject(ValueAtIndex);
      v18 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
      if (v18)
        v18(v17, CFSTR("IsEnabled"), v11, &v24);
      v19 = v24;
      if (v24 == v15)
        break;
      if (v24)
        goto LABEL_17;
LABEL_18:
      if (v10 == ++v14)
        goto LABEL_29;
    }
    v20 = FigAssetTrackGetCMBaseObject(ValueAtIndex);
    v21 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
    if (v21)
      v21(v20, CFSTR("FormatDescriptionArray"), v11, &otherArray);
    if (otherArray)
    {
      v22 = CFArrayGetCount(otherArray);
      if (v22)
      {
        v29.length = v22;
        v29.location = 0;
        CFArrayAppendArray(v13, otherArray, v29);
      }
      if (otherArray)
      {
        CFRelease(otherArray);
        otherArray = 0;
      }
    }
    v19 = v24;
    if (!v24)
      goto LABEL_18;
LABEL_17:
    CFRelease(v19);
    v24 = 0;
    goto LABEL_18;
  }
LABEL_29:
  if (!CFArrayGetCount(v13))
  {
    CFRelease(v13);
    v26 = 0;
  }
LABEL_31:
  if (v24)
    CFRelease(v24);
  if (theArray)
    CFRelease(theArray);
  if (otherArray)
    CFRelease(otherArray);
  return v26;
}

uint64_t figAssetExportSession_canPassThroughVideo(uint64_t a1, const __CFDictionary *a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t DerivedStorage;
  int AppBooleanValue;
  uint64_t v15;
  double UntransformedSourceDimension;
  double v17;
  double v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, const __CFArray **);
  CFTypeRef v21;
  int v22;
  CFIndex v23;
  uint64_t v24;
  float v25;
  const void *v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, CFTypeRef *);
  uint64_t v29;
  void (*v30)(uint64_t, const __CFString *, uint64_t, uint64_t *);
  uint64_t v31;
  void (*v32)(uint64_t, const __CFString *, uint64_t, const __CFArray **);
  CFIndex v33;
  CFIndex v34;
  CFIndex v35;
  const __CFArray *v36;
  uint64_t v37;
  const opaqueCMFormatDescription *v38;
  FourCharCode MediaSubType;
  CFPropertyListRef Extension;
  CFPropertyListRef v41;
  CFIndex v42;
  const void *SInt32;
  CFTypeRef v44;
  int v45;
  int v46;
  int v47;
  CFTypeID v48;
  uint64_t v49;
  void (*v50)(uint64_t, const __CFString *, uint64_t, const void **);
  CFTypeID v51;
  uint64_t v52;
  void (*v53)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeID v54;
  float SourceVideoFrameRate;
  double v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t, const __CFArray **);
  CFIndex Count;
  CFIndex v60;
  CFIndex v61;
  uint64_t v62;
  uint64_t v63;
  CFTypeRef v64;
  const void *ValueAtIndex;
  uint64_t CMBaseObject;
  void (*v67)(uint64_t, const __CFString *, uint64_t, uint64_t *);
  uint64_t v68;
  void (*v69)(uint64_t, const __CFString *, uint64_t, const __CFArray **);
  uint64_t v70;
  CFIndex v71;
  CFIndex v72;
  CFIndex i;
  const void *v74;
  int v75;
  uint64_t v76;
  int FloatIfPresent;
  BOOL v79;
  float v80;
  BOOL v81;
  const void *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  unsigned int v86;
  const __CFString *v87;
  uint64_t v88;
  uint64_t v89;
  CFDictionaryRef theDict;
  const __CFArray *Value;
  uint64_t v92;
  const __CFString *extensionKey;
  CFIndex v94;
  CGAffineTransform valuePtr;
  const void *v96;
  CGAffineTransform keyExistsAndHasValidFormat;
  char v98;
  char v99;
  const __CFArray *v100;
  uint64_t v101;
  CFTypeRef v102;
  const __CFArray *v103;
  float v104;
  CFTypeRef v105[2];
  CFRange v106;

  v105[0] = 0;
  v104 = 0.0;
  v102 = 0;
  v103 = 0;
  v12 = *MEMORY[0x1E0C9AE40];
  v100 = 0;
  v101 = v12;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  LOBYTE(keyExistsAndHasValidFormat.a) = 0;
  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("disable_passthrough_export"), CFSTR("com.apple.avfoundation"), (Boolean *)&keyExistsAndHasValidFormat);
  if (LOBYTE(keyExistsAndHasValidFormat.a))
  {
    v15 = 0;
    if (AppBooleanValue)
      return v15;
  }
  if (!a2 || !CFDictionaryGetValue(a2, CFSTR("videoCodec")))
  {
    v57 = *(_QWORD *)(DerivedStorage + 16);
    v58 = *(void (**)(uint64_t, uint64_t, const __CFArray **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (v58)
      v58(v57, 1986618469, &v103);
    if (v103)
    {
      Count = CFArrayGetCount(v103);
      if (Count >= 1)
      {
        v60 = Count;
        v61 = 0;
        v62 = *MEMORY[0x1E0C9AE00];
        v63 = *MEMORY[0x1E0C9AE50];
        do
        {
          v64 = v102;
          ValueAtIndex = CFArrayGetValueAtIndex(v103, v61);
          v102 = ValueAtIndex;
          if (ValueAtIndex)
            CFRetain(ValueAtIndex);
          if (v64)
            CFRelease(v64);
          v101 = v12;
          CMBaseObject = FigAssetTrackGetCMBaseObject(v102);
          v67 = *(void (**)(uint64_t, const __CFString *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
          if (v67)
            v67(CMBaseObject, CFSTR("IsEnabled"), v62, &v101);
          if (!(_DWORD)a5 || v101 == v63)
          {
            v68 = FigAssetTrackGetCMBaseObject(v102);
            v69 = *(void (**)(uint64_t, const __CFString *, uint64_t, const __CFArray **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 48);
            if (v69)
              v69(v68, CFSTR("FormatDescriptionArray"), v62, &v100);
            if (v100)
            {
              v70 = a5;
              v71 = CFArrayGetCount(v100);
              if (v71 >= 1)
              {
                v72 = v71;
                for (i = 0; i != v72; ++i)
                {
                  v74 = CFArrayGetValueAtIndex(v100, i);
                  if (FigRemakerIsFormatDescriptionProtected(v74))
                  {
                    v15 = 0;
                    goto LABEL_131;
                  }
                }
              }
              a5 = v70;
              if (v100)
              {
                CFRelease(v100);
                v100 = 0;
              }
            }
          }
          ++v61;
        }
        while (v61 != v60);
      }
    }
LABEL_118:
    v15 = 1;
    goto LABEL_131;
  }
  Value = (const __CFArray *)CFDictionaryGetValue(a2, CFSTR("applicableVideoCodecs"));
  UntransformedSourceDimension = FigAssetExportSession_getUntransformedSourceDimension(*(_QWORD *)(DerivedStorage + 16), a4, *(CGSize **)(DerivedStorage + 184));
  v18 = v17;
  if (v103)
  {
    CFRelease(v103);
    v103 = 0;
  }
  v19 = *(_QWORD *)(DerivedStorage + 16);
  v20 = *(void (**)(uint64_t, uint64_t, const __CFArray **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v20)
    v20(v19, 1986618469, &v103);
  if (!v103)
    goto LABEL_118;
  v94 = CFArrayGetCount(v103);
  if (v94 < 1)
    goto LABEL_118;
  v82 = a3;
  v89 = DerivedStorage;
  v85 = a1;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = *MEMORY[0x1E0C9AE00];
  v88 = *MEMORY[0x1E0C9AE50];
  extensionKey = (const __CFString *)*MEMORY[0x1E0CA8DC8];
  v87 = (const __CFString *)*MEMORY[0x1E0CA8E98];
  v25 = 0.0;
  v92 = *MEMORY[0x1E0C9AE00];
  v86 = a4;
  theDict = a2;
  v84 = a5;
  v83 = v12;
  do
  {
    if (v102)
    {
      CFRelease(v102);
      v102 = 0;
    }
    if ((_DWORD)a6)
    {
      v26 = CFArrayGetValueAtIndex(v103, v23);
      v102 = v26;
      if (!v26)
        goto LABEL_87;
      CFRetain(v26);
    }
    else
    {
      v27 = *(_QWORD *)(v89 + 16);
      v28 = *(void (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
      if (v28)
        v28(v27, a4, &v102);
    }
    if (v102)
    {
      v101 = v12;
      v29 = FigAssetTrackGetCMBaseObject(v102);
      v30 = *(void (**)(uint64_t, const __CFString *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
      if (v30)
        v30(v29, CFSTR("IsEnabled"), v24, &v101);
      if (!(_DWORD)a5 || v101 == v88)
      {
        v31 = FigAssetTrackGetCMBaseObject(v102);
        v32 = *(void (**)(uint64_t, const __CFString *, uint64_t, const __CFArray **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
        if (v32)
          v32(v31, CFSTR("FormatDescriptionArray"), v24, &v100);
        v99 = 0;
        FigCFDictionaryGetBooleanIfPresent();
        v98 = 0;
        FigCFDictionaryGetBooleanIfPresent();
        if (v100)
        {
          v33 = CFArrayGetCount(v100);
          if (v33 >= 1)
          {
            v34 = v33;
            v35 = 0;
            v36 = Value;
            do
            {
              v37 = a6;
              v38 = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(v100, v35);
              MediaSubType = CMFormatDescriptionGetMediaSubType(v38);
              Extension = CMFormatDescriptionGetExtension(v38, extensionKey);
              if (!v21)
              {
                CMFormatDescriptionGetExtension(v38, v87);
                if ((FigCFEqual() || FigCFEqual())
                  && (v41 = CMFormatDescriptionGetExtension(v38, v87)) != 0)
                {
                  v21 = CFRetain(v41);
                }
                else
                {
                  v21 = 0;
                }
                v24 = v92;
              }
              if (!MediaSubType)
                goto LABEL_123;
              if (v36)
              {
                v42 = CFArrayGetCount(v36);
                SInt32 = (const void *)FigCFNumberCreateSInt32();
                v105[0] = SInt32;
                a6 = v37;
                if (SInt32)
                {
                  v106.location = 0;
                  v106.length = v42;
                  if (!CFArrayContainsValue(v36, v106, SInt32))
                  {
                    CFRelease(v105[0]);
                    goto LABEL_123;
                  }
                  if (v105[0])
                  {
                    CFRelease(v105[0]);
                    v105[0] = 0;
                  }
                }
              }
              else
              {
                v44 = v21;
                LODWORD(keyExistsAndHasValidFormat.a) = 0;
                FigCFDictionaryGetIntIfPresent();
                v45 = FigVideoFormatDescriptionContainsAlphaChannel();
                v46 = FigVideoFormatDescriptionContainsStereoMultiviewVideo();
                if (MediaSubType != LODWORD(keyExistsAndHasValidFormat.a)
                  || (v47 = v46, FigRemakerIsFormatDescriptionProtected(v38))
                  || (v45 != 0) != (v99 != 0)
                  || (v47 != 0) != (v98 != 0))
                {
                  v21 = v44;
LABEL_123:
                  v15 = 0;
                  SourceVideoFrameRate = 0.0;
                  v75 = 1;
                  a4 = v86;
                  a2 = theDict;
                  goto LABEL_124;
                }
                a6 = v37;
                if (Extension)
                {
                  v48 = CFGetTypeID(Extension);
                  if (v48 == CFNumberGetTypeID())
                  {
                    LODWORD(valuePtr.a) = 0;
                    CFNumberGetValue((CFNumberRef)Extension, kCFNumberIntType, &valuePtr);
                    if (SLODWORD(valuePtr.a) > 1)
                    {
                      a4 = v86;
                      v21 = v44;
                      a2 = theDict;
                      goto LABEL_166;
                    }
                  }
                }
                v21 = v44;
                v36 = Value;
                v24 = v92;
              }
              ++v35;
            }
            while (v34 != v35);
          }
          if (v100)
          {
            CFRelease(v100);
            v100 = 0;
          }
          a4 = v86;
          a2 = theDict;
          LODWORD(a5) = v84;
          v12 = v83;
        }
        if (FigCFDictionaryGetFloatIfPresent())
        {
          if (UntransformedSourceDimension > v104)
            goto LABEL_166;
        }
        else if (FigCFDictionaryGetFloatIfPresent() && UntransformedSourceDimension != v104)
        {
          goto LABEL_166;
        }
        if (FigCFDictionaryGetFloatIfPresent() && UntransformedSourceDimension < v104)
          goto LABEL_166;
        if (FigCFDictionaryGetFloatIfPresent())
        {
          if (v18 > v104)
            goto LABEL_166;
        }
        else if (FigCFDictionaryGetFloatIfPresent() && v18 != v104)
        {
          goto LABEL_166;
        }
        if (FigCFDictionaryGetFloatIfPresent() && v18 < v104)
          goto LABEL_166;
        if (CFDictionaryGetValue(a2, CFSTR("videoMatrixHandling")) && FigCFEqual())
        {
          memset(&keyExistsAndHasValidFormat, 0, sizeof(keyExistsAndHasValidFormat));
          v96 = 0;
          v49 = FigAssetTrackGetCMBaseObject(v102);
          v50 = *(void (**)(uint64_t, const __CFString *, uint64_t, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
          if (v50)
            v50(v49, CFSTR("PreferredTransform"), v24, &v96);
          if (v96)
          {
            v51 = CFGetTypeID(v96);
            if (v51 == CFArrayGetTypeID())
              FigGetCGAffineTransformFrom3x3MatrixArray(v96, (uint64_t)&keyExistsAndHasValidFormat);
            if (v96)
              CFRelease(v96);
          }
          valuePtr = keyExistsAndHasValidFormat;
          if (!CGAffineTransformIsIdentity(&valuePtr))
          {
LABEL_166:
            v15 = 0;
            SourceVideoFrameRate = 0.0;
            v75 = 1;
            goto LABEL_124;
          }
        }
        v104 = 0.0;
        v52 = FigAssetTrackGetCMBaseObject(v102);
        v53 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
        if (v53)
          v53(v52, CFSTR("EstimatedDataRate"), v24, v105);
        if (v105[0])
        {
          v54 = CFGetTypeID(v105[0]);
          if (v54 == CFNumberGetTypeID())
          {
            CFNumberGetValue((CFNumberRef)v105[0], kCFNumberFloatType, &v104);
            v104 = v104 * 8.0;
          }
          if (v105[0])
          {
            CFRelease(v105[0]);
            v105[0] = 0;
          }
        }
        v25 = v25 + v104;
        if (!(_DWORD)a6)
          goto LABEL_89;
        v22 = 1;
      }
    }
LABEL_87:
    ++v23;
  }
  while (v23 != v94);
  if (!v22)
  {
    v15 = 1;
    goto LABEL_129;
  }
LABEL_89:
  SourceVideoFrameRate = figAssetExportSession_getSourceVideoFrameRate(*(_QWORD *)(v89 + 16), *(_QWORD *)(v89 + 184), a4);
  if (SourceVideoFrameRate == 0.0
    || FigCFEqual()
    && !figAssetExportSession_canPerformFastFrameRateConversionWithPreset(v85, a2, v82))
  {
    goto LABEL_164;
  }
  v56 = SourceVideoFrameRate;
  if (FigCFDictionaryGetFloatIfPresent())
  {
    if (SourceVideoFrameRate > v104)
      goto LABEL_164;
  }
  else if ((*(_DWORD *)(v89 + 268) & 0x1D) == 1)
  {
    *(_OWORD *)&keyExistsAndHasValidFormat.a = *(_OWORD *)(v89 + 256);
    keyExistsAndHasValidFormat.c = *(CGFloat *)(v89 + 272);
    if (1.0 / CMTimeGetSeconds((CMTime *)&keyExistsAndHasValidFormat) < v56)
      goto LABEL_164;
  }
  FloatIfPresent = FigCFDictionaryGetFloatIfPresent();
  v15 = 0;
  v79 = SourceVideoFrameRate >= v104 || FloatIfPresent == 0;
  v75 = 1;
  if (v79 && v25 != 0.0)
  {
    if (FigCFDictionaryGetFloatIfPresent())
    {
      v80 = v104;
      goto LABEL_150;
    }
    if (!CFDictionaryGetValue(a2, CFSTR("videoAverageBitRate")))
      goto LABEL_156;
    v80 = (float)(int)FigAssetExportSessionGetAverageVideoBitRateForSourceAndPresetAndTransferFunction(UntransformedSourceDimension, v18, SourceVideoFrameRate, v85, a4, (uint64_t)a2)* 1.2;
LABEL_150:
    if (v25 <= v80)
    {
LABEL_156:
      if (FigCFDictionaryGetFloatIfPresent() && v25 < v104
        || FigCFDictionaryGetFloatIfPresent() && UntransformedSourceDimension * v18 >= v104
        || FigCFDictionaryGetFloatIfPresent() && UntransformedSourceDimension * v18 * v56 >= v104)
      {
        goto LABEL_164;
      }
      LODWORD(keyExistsAndHasValidFormat.a) = 0;
      if (FigCFDictionaryGetInt32IfPresent())
        v81 = LODWORD(keyExistsAndHasValidFormat.a) == 0;
      else
        v81 = 1;
      v75 = !v81;
      v15 = v75 ^ 1u;
      goto LABEL_124;
    }
LABEL_164:
    v15 = 0;
    v75 = 1;
  }
LABEL_124:
  if (v75)
  {
    if (v25 != 0.0)
    {
      if (CFDictionaryGetValue(a2, CFSTR("videoAverageBitRate")))
      {
        v76 = CMBaseObjectGetDerivedStorage();
        if ((float)(v25 + v25) < (float)(int)figAssetExportSession_getAverageVideoBitRateForSourceAndPreset(*(_QWORD *)(v76 + 16), a4, *(_QWORD *)(v76 + 72), (uint64_t)a2, UntransformedSourceDimension, v18, SourceVideoFrameRate))
        {
          v104 = v25 + v25;
          FigCFDictionarySetFloat();
        }
      }
    }
  }
LABEL_129:
  if (v21)
    CFRelease(v21);
LABEL_131:
  if (v100)
    CFRelease(v100);
  if (v102)
    CFRelease(v102);
  if (v103)
    CFRelease(v103);
  return v15;
}

BOOL figAssetExportSession_canPassThroughAudio(uint64_t a1, const __CFDictionary *a2, int a3)
{
  uint64_t DerivedStorage;
  int AppBooleanValue;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t CMBaseObject;
  void (*v10)(uint64_t, const __CFString *, uint64_t, CFArrayRef *);
  CFIndex Count;
  CFIndex v12;
  _BOOL4 v13;
  CFIndex v14;
  uint64_t v15;
  const void *ValueAtIndex;
  uint64_t v17;
  void (*v18)(uint64_t, const __CFString *, uint64_t, uint64_t *);
  void (*v19)(const void *, void **, char *);
  const __CFArray **v20;
  const __CFArray **v21;
  const __CFArray *v22;
  const void *v23;
  const __CFArray *v24;
  float v25;
  unsigned int v26;
  unint64_t v27;
  float v28;
  const __CFArray *v29;
  CFIndex v30;
  CFIndex v31;
  uint64_t v32;
  const void *v33;
  uint64_t v34;
  void (*v35)(uint64_t, const __CFString *, uint64_t, uint64_t *);
  void (*v36)(const void *, _QWORD, char *);
  uint64_t v37;
  void (*v38)(uint64_t, const __CFString *, uint64_t, CFArrayRef *);
  CFIndex v39;
  CFIndex v40;
  CFIndex v41;
  const void *v42;
  void (*v43)(uint64_t, const __CFString *, uint64_t, void **);
  int v44;
  void *v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  int v48;
  _BOOL4 v49;
  int v50;
  CFIndex v51;
  float v52;
  const void *v53;
  uint64_t v54;
  void (*v55)(uint64_t, const __CFString *, uint64_t, uint64_t *);
  void (*v56)(const void *, void **, char *);
  CFTypeRef v57;
  uint64_t v58;
  unsigned int (*v59)(CFTypeRef, uint64_t, CFTypeRef *, _QWORD);
  uint64_t v60;
  void (*v61)(uint64_t, const __CFString *, uint64_t, CFArrayRef *);
  CFIndex v62;
  CFIndex v63;
  CFIndex i;
  const opaqueCMFormatDescription *v65;
  const AudioStreamBasicDescription *StreamBasicDescription;
  AudioFormatID mFormatID;
  CFIndex v68;
  const void *SInt32;
  UInt32 v70;
  uint64_t v71;
  void (*v72)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *value;
  CFTypeRef v79;
  CFTypeRef v80;
  float valuePtr;
  CFTypeRef cf;
  CFArrayRef v83;
  void *key;
  uint64_t v85;
  CFArrayRef theArray;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  Boolean keyExistsAndHasValidFormat[9];
  CFRange v91;
  CFRange v92;

  v89 = 0;
  v87 = 0;
  v88 = 0;
  theArray = 0;
  v76 = *MEMORY[0x1E0C9AE40];
  key = 0;
  v85 = v76;
  cf = 0;
  v83 = 0;
  valuePtr = 0.0;
  v79 = 0;
  v80 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  keyExistsAndHasValidFormat[0] = 0;
  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("disable_passthrough_export"), CFSTR("com.apple.avfoundation"), keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat[0])
  {
    v7 = 0;
    if (AppBooleanValue)
      return v7;
  }
  v8 = *MEMORY[0x1E0C9AE00];
  CMBaseObject = FigAssetGetCMBaseObject(*(_QWORD *)(DerivedStorage + 16));
  v10 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (v10)
    v10(CMBaseObject, CFSTR("assetProperty_Tracks"), v8, &theArray);
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    v12 = Count;
    v13 = Count > 0;
    if (*(_QWORD *)(DerivedStorage + 176) && Count >= 1)
    {
      v75 = a1;
      v14 = 0;
      v15 = *MEMORY[0x1E0C9AE50];
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, v14);
        v85 = v76;
        HIDWORD(key) = 0;
        v17 = FigAssetTrackGetCMBaseObject(ValueAtIndex);
        v18 = *(void (**)(uint64_t, const __CFString *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
        if (v18)
          v18(v17, CFSTR("IsEnabled"), v8, &v85);
        v19 = *(void (**)(const void *, void **, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
        if (v19)
          v19(ValueAtIndex, &key, (char *)&key + 4);
        if ((!a3 || v85 == v15) && HIDWORD(key) == 1936684398)
        {
          v20 = (const __CFArray **)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 176), (const void *)(int)key);
          if (v20)
          {
            v21 = v20;
            v22 = v20[3];
            if (v22)
            {
              if (CFArrayGetCount(v22) > 0)
                goto LABEL_117;
            }
            if (v21[2] || v21[1])
              goto LABEL_117;
          }
        }
        ++v14;
      }
      while (v12 != v14);
      v13 = 1;
      a1 = v75;
    }
    if (!a2)
      goto LABEL_37;
  }
  else
  {
    v13 = 0;
    v12 = 0;
    if (!a2)
      goto LABEL_37;
  }
  if (CFDictionaryGetValue(a2, CFSTR("audioPreset")))
  {
    v23 = CFDictionaryGetValue(a2, CFSTR("audioPreset"));
    if (FigAudioCompressionOptionsGetPreset(v23, &v89, 0, 0, &v88))
      goto LABEL_117;
    v24 = (const __CFArray *)CFDictionaryGetValue(a2, CFSTR("applicableAudioCodecs"));
    if (!FigCFDictionaryGetFloatIfPresent())
    {
      FigCFDictionaryGetFloatIfPresent();
      v25 = *((float *)&v87 + 1);
      if (*((float *)&v87 + 1) == 0.0)
      {
        v26 = *(_DWORD *)(v89 + 20);
        if (v26)
        {
          *(double *)&v27 = (double)v26;
          LODWORD(v27) = *(_DWORD *)(v89 + 16);
          v25 = *(double *)v89 / (double)v26 * (double)v27 * 8.0;
        }
      }
      v28 = v25 * 1.2;
      *((float *)&v87 + 1) = v28;
    }
    FigCFDictionaryGetFloatIfPresent();
    if (figAssetExportSession_GetUTTypesForAudioOnly_onceToken != -1)
      dispatch_once_f(&figAssetExportSession_GetUTTypesForAudioOnly_onceToken, &figAssetExportSession_GetUTTypesForAudioOnly__gUTTypesForAudioOnlyArray, (dispatch_function_t)figAssetExportSession_CreateUTTypesForAudioOnlyOnce);
    v29 = (const __CFArray *)figAssetExportSession_GetUTTypesForAudioOnly__gUTTypesForAudioOnlyArray;
    if (figAssetExportSession_GetUTTypesForAudioOnly__gUTTypesForAudioOnlyArray)
      v30 = CFArrayGetCount((CFArrayRef)figAssetExportSession_GetUTTypesForAudioOnly__gUTTypesForAudioOnlyArray);
    else
      v30 = 0;
    value = 0;
    v43 = *(void (**)(uint64_t, const __CFString *, uint64_t, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
    if (v43)
      v43(a1, CFSTR("kFigAssetExportSessionProperty_OutputFileType"), v8, &value);
    v44 = 0;
    v45 = value;
    if (v29 && value)
    {
      v91.location = 0;
      v91.length = v30;
      v44 = CFArrayContainsValue(v29, v91, value);
      v45 = value;
    }
    if (v45)
      CFRelease(v45);
    v46 = FigAssetGetCMBaseObject(*(_QWORD *)(DerivedStorage + 16));
    v47 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
    if (!v47)
      goto LABEL_117;
    v48 = v47(v46, CFSTR("assetProperty_FormatReader"), v8, &v79);
    v7 = v48 == 0;
    if (v48)
      v49 = 0;
    else
      v49 = v13;
    if (!v49)
      goto LABEL_118;
    v50 = 0;
    v51 = 0;
    v74 = *MEMORY[0x1E0C9AE50];
    v52 = 0.0;
    do
    {
      v53 = CFArrayGetValueAtIndex(theArray, v51);
      key = 0;
      v85 = v76;
      v54 = FigAssetTrackGetCMBaseObject(v53);
      v55 = *(void (**)(uint64_t, const __CFString *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
      if (v55)
        v55(v54, CFSTR("IsEnabled"), v8, &v85);
      v56 = *(void (**)(const void *, void **, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (v56)
        v56(v53, &key, (char *)&key + 4);
      if ((!a3 || v85 == v74) && HIDWORD(key) == 1936684398)
      {
        v57 = v79;
        v58 = key;
        v59 = *(unsigned int (**)(CFTypeRef, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 56);
        if (!v59
          || v59(v57, v58, &v80, 0)
          || v44 && figAssetExportSession_HasEditSegmentData((uint64_t)v80, 2)
          || figAssetExportSession_HasEditSegmentData((uint64_t)v80, 0))
        {
          goto LABEL_117;
        }
        v60 = FigAssetTrackGetCMBaseObject(v53);
        v61 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
        if (v61)
          v61(v60, CFSTR("FormatDescriptionArray"), v8, &v83);
        if (v83)
        {
          v62 = CFArrayGetCount(v83);
          if (v62 >= 1)
          {
            v63 = v62;
            for (i = 0; i != v63; ++i)
            {
              v65 = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(v83, i);
              StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(v65);
              mFormatID = StreamBasicDescription->mFormatID;
              if (!mFormatID)
                goto LABEL_117;
              if (v24)
              {
                v68 = CFArrayGetCount(v24);
                SInt32 = (const void *)FigCFNumberCreateSInt32();
                cf = SInt32;
                if (SInt32)
                {
                  v92.location = 0;
                  v92.length = v68;
                  if (!CFArrayContainsValue(v24, v92, SInt32))
                  {
                    CFRelease(cf);
                    goto LABEL_117;
                  }
                  if (cf)
                  {
                    CFRelease(cf);
                    cf = 0;
                  }
                }
              }
              else
              {
                if (mFormatID != *(_DWORD *)(v89 + 8))
                  goto LABEL_117;
                v70 = *(_DWORD *)(v89 + 28);
                if (v70)
                {
                  if (StreamBasicDescription->mChannelsPerFrame > v70)
                    goto LABEL_117;
                }
                if (FigRemakerIsFormatDescriptionProtected(v65))
                  goto LABEL_117;
              }
            }
          }
          if (v83)
          {
            CFRelease(v83);
            v83 = 0;
          }
        }
        valuePtr = 0.0;
        v71 = FigAssetTrackGetCMBaseObject(v53);
        v72 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
        if (v72)
          v72(v71, CFSTR("EstimatedDataRate"), v8, &cf);
        if (cf)
        {
          CFNumberGetValue((CFNumberRef)cf, kCFNumberFloatType, &valuePtr);
          valuePtr = valuePtr * 8.0;
          if (cf)
          {
            CFRelease(cf);
            cf = 0;
          }
        }
        v52 = v52 + valuePtr;
        if (v80)
        {
          CFRelease(v80);
          v80 = 0;
        }
        v50 = 1;
      }
      ++v51;
    }
    while (v51 != v12);
    if (v50)
    {
      v7 = 0;
      if (v52 != 0.0 && v52 <= *((float *)&v87 + 1))
        v7 = v52 >= *(float *)&v87 || *(float *)&v87 == 0.0;
      goto LABEL_118;
    }
LABEL_56:
    v7 = 1;
    goto LABEL_118;
  }
LABEL_37:
  if (!v13)
    goto LABEL_56;
  v31 = 0;
  v32 = *MEMORY[0x1E0C9AE50];
  while (1)
  {
    v33 = CFArrayGetValueAtIndex(theArray, v31);
    v85 = v76;
    HIDWORD(key) = 0;
    v34 = FigAssetTrackGetCMBaseObject(v33);
    v35 = *(void (**)(uint64_t, const __CFString *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
    if (v35)
      v35(v34, CFSTR("IsEnabled"), v8, &v85);
    v36 = *(void (**)(const void *, _QWORD, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v36)
      v36(v33, 0, (char *)&key + 4);
    if (a3 && v85 != v32 || HIDWORD(key) != 1936684398)
      goto LABEL_55;
    v37 = FigAssetTrackGetCMBaseObject(v33);
    v38 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
    if (v38)
      v38(v37, CFSTR("FormatDescriptionArray"), v8, &v83);
    if (!v83)
      goto LABEL_55;
    v39 = CFArrayGetCount(v83);
    if (v39 >= 1)
      break;
LABEL_53:
    if (v83)
    {
      CFRelease(v83);
      v83 = 0;
    }
LABEL_55:
    if (++v31 == v12)
      goto LABEL_56;
  }
  v40 = v39;
  v41 = 0;
  while (1)
  {
    v42 = CFArrayGetValueAtIndex(v83, v41);
    if (FigRemakerIsFormatDescriptionProtected(v42))
      break;
    if (v40 == ++v41)
      goto LABEL_53;
  }
LABEL_117:
  v7 = 0;
LABEL_118:
  if (v80)
    CFRelease(v80);
  if (v83)
    CFRelease(v83);
  if (theArray)
    CFRelease(theArray);
  if (v79)
    CFRelease(v79);
  return v7;
}

uint64_t figAssetExportSession_totalSizeOfTracksIsWithinFileLengthLimit(uint64_t a1, CFArrayRef theArray, CFDictionaryRef theDict)
{
  const __CFNumber *Value;
  BOOL v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  uint64_t v10;
  uint64_t v11;
  const void *ValueAtIndex;
  uint64_t CMBaseObject;
  void (*v14)(uint64_t, const __CFString *, uint64_t, CFNumberRef *);
  CFNumberRef number;
  uint64_t v17;
  uint64_t valuePtr;

  valuePtr = 0;
  if (theDict)
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("maxFileSize"));
    if (Value)
      CFNumberGetValue(Value, kCFNumberSInt64Type, &valuePtr);
  }
  if (*(_QWORD *)(a1 + 328))
  {
    valuePtr = *(_QWORD *)(a1 + 328);
    if (!theArray)
      return 1;
  }
  else
  {
    if (valuePtr)
      v6 = theArray == 0;
    else
      v6 = 1;
    if (v6)
      return 1;
  }
  Count = CFArrayGetCount(theArray);
  if (Count < 1)
    return 1;
  v8 = Count;
  v9 = 0;
  v10 = 0;
  v11 = *MEMORY[0x1E0C9AE00];
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, v9);
    number = 0;
    v17 = 0;
    CMBaseObject = FigAssetTrackGetCMBaseObject(ValueAtIndex);
    v14 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
    if (v14)
      v14(CMBaseObject, CFSTR("TotalSampleDataLength"), v11, &number);
    if (number)
    {
      CFNumberGetValue(number, kCFNumberSInt64Type, &v17);
      CFRelease(number);
    }
    v10 += v17;
    if (v10 > valuePtr)
      break;
    if (v8 == ++v9)
      return 1;
  }
  return 0;
}

const void *figAssetExportSession_isAudioMixdownRequired(const void *result, CFErrorRef *a2)
{
  int Preset;
  CFErrorRef v4;
  uint64_t v5;

  if (result)
  {
    v5 = 0;
    Preset = FigAudioCompressionOptionsGetPreset(result, &v5, 0, 0, 0);
    if (Preset)
    {
      if (a2)
      {
        v4 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("FigAssetExportSession_ErrorDomain"), Preset, 0);
        result = 0;
        *a2 = v4;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return (const void *)(*(_DWORD *)(v5 + 28) != 0);
    }
  }
  return result;
}

uint64_t figAssetExportSession_GetVideoCodecType(uint64_t a1)
{
  uint64_t result;

  result = 1851876449;
  if (a1)
  {
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    return 1851876449;
  }
  return result;
}

void figAssetExportSession_createProfileLevel(uint64_t a1, uint64_t a2, const __CFArray *a3, _QWORD *a4)
{
  int MaximumBitsPerComponent;
  CFTypeRef v8;
  CFTypeRef cf;

  cf = 0;
  if ((!a1
     || (!FigCFEqual()
      || !FigVideoCompositorCopyDeviceSpecificCompositorName(1, &cf)
      && (FigCFEqual() || FigCFEqual()))
     && !FigCFEqual()
     && !FigCFEqual())
    && figAssetExportSession_GetVideoCodecType(a2) == 1752589105)
  {
    MaximumBitsPerComponent = FigExportSettings_GetMaximumBitsPerComponent(a3);
    if (a4)
    {
      if (MaximumBitsPerComponent >= 10)
      {
        v8 = (CFTypeRef)*MEMORY[0x1E0CED988];
        if (*MEMORY[0x1E0CED988])
          v8 = CFRetain(v8);
        *a4 = v8;
      }
    }
  }
  if (cf)
    CFRelease(cf);
}

__CFDictionary *figAssetExportSession_createVideoEncoderSpecification(const void *a1, const __CFDictionary *a2, const void *a3)
{
  const __CFAllocator *v6;
  __CFDictionary *Mutable;
  const void *Value;
  __CFDictionary *v9;
  const void *v10;
  __CFDictionary *v11;

  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (a2)
  {
    Value = CFDictionaryGetValue(a2, CFSTR("usageMode"));
    if (Value)
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED248], Value);
  }
  if (a1)
  {
    v9 = Mutable;
    v10 = a1;
  }
  else
  {
    v10 = (const void *)*MEMORY[0x1E0C9AE50];
    v9 = Mutable;
  }
  CFDictionaryAddValue(v9, (const void *)*MEMORY[0x1E0CEDD20], v10);
  if (a3)
  {
    v11 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E0CED180], a3);
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CEDD48], v11);
    if (v11)
      CFRelease(v11);
  }
  return Mutable;
}

void figAssetExportSession_applyFileSize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t SInt64;
  const void *v5;
  uint64_t FigBaseObject;
  void (*v7)(uint64_t, const __CFString *, const void *);

  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 328))
  {
    SInt64 = FigCFNumberCreateSInt64();
    if (SInt64)
    {
      v5 = (const void *)SInt64;
      FigBaseObject = FigRemakerGetFigBaseObject(a3);
      v7 = *(void (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
      if (v7)
        v7(FigBaseObject, CFSTR("Remaker_MaxFileSize"), v5);
      CFRelease(v5);
    }
  }
  else
  {
    FigCFDictionaryGetInt64IfPresent();
  }
}

BOOL figAssetExportSession_isAlternateTrack(uint64_t a1)
{
  uint64_t CMBaseObject;
  void (*v2)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t UInt64;
  CFTypeRef cf;

  cf = 0;
  CMBaseObject = FigAssetTrackGetCMBaseObject(a1);
  v2 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (v2)
    v2(CMBaseObject, CFSTR("AlternateGroupID"), *MEMORY[0x1E0C9AE00], &cf);
  UInt64 = FigCFNumberGetUInt64();
  if (cf)
    CFRelease(cf);
  return UInt64 != 0;
}

uint64_t figAssetExportSession_handleAudioAlternateTrack(int a1, uint64_t a2)
{
  uint64_t CMBaseObject;
  void (*v5)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  void (*v6)(uint64_t, int *, _QWORD);
  uint64_t v7;
  int v9;
  CFTypeRef cf;

  cf = (CFTypeRef)*MEMORY[0x1E0C9AE40];
  CMBaseObject = FigAssetTrackGetCMBaseObject(a2);
  v5 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (v5)
    v5(CMBaseObject, CFSTR("IsEnabled"), *MEMORY[0x1E0C9AE00], &cf);
  v9 = 0;
  v6 = *(void (**)(uint64_t, int *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v6)
    v6(a2, &v9, 0);
  if (a1 == 1)
  {
    FigCFArrayAppendInt32();
    v7 = 0;
  }
  else
  {
    v7 = FigSignalErrorAt();
  }
  if (cf)
    CFRelease(cf);
  return v7;
}

void figAssetExportSession_transferTrackProperties(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CMBaseObject;
  unsigned int (*v9)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v10;
  CFTypeRef v11;
  uint64_t (*v12)(CFTypeRef, uint64_t, CFTypeRef *, int *);
  int v13;
  CFTypeRef v14;
  uint64_t FigBaseObject;
  void (*v16)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef v17;
  void (*v18)(uint64_t, uint64_t, const __CFString *, CFTypeRef);
  uint64_t v19;
  void (*v20)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef v21;
  void (*v22)(uint64_t, uint64_t, const __CFString *, CFTypeRef);
  uint64_t v23;
  void (*v24)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef v25;
  void (*v26)(uint64_t, uint64_t, const __CFString *, CFTypeRef);
  CFTypeRef v27;
  CFTypeRef v28;
  CFTypeRef cf;
  int v30;
  CFTypeRef v31;
  CFTypeRef v32;

  v31 = 0;
  v32 = 0;
  v30 = 0;
  CMBaseObject = FigAssetGetCMBaseObject(*(_QWORD *)(a1 + 16));
  v9 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
  if (v9)
  {
    v10 = *MEMORY[0x1E0C9AE00];
    if (!v9(CMBaseObject, CFSTR("assetProperty_FormatReader"), *MEMORY[0x1E0C9AE00], &v31))
    {
      v11 = v31;
      v12 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 56);
      if (v12)
      {
        v13 = v12(v11, a3, &v32, &v30);
        v14 = v32;
        if (!v13)
        {
          cf = 0;
          FigBaseObject = FigTrackReaderGetFigBaseObject(v32);
          v16 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
          if (v16)
          {
            v16(FigBaseObject, CFSTR("TrackLanguageCode"), v10, &cf);
            v17 = cf;
            if (cf)
            {
              v18 = *(void (**)(uint64_t, uint64_t, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 40);
              if (v18)
                v18(a2, a4, CFSTR("LanguageTag"), v17);
              CFRelease(cf);
            }
          }
          v28 = 0;
          v19 = FigTrackReaderGetFigBaseObject(v32);
          v20 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
          if (v20)
          {
            v20(v19, CFSTR("ExtendedLanguageTagString"), v10, &v28);
            v21 = v28;
            if (v28)
            {
              v22 = *(void (**)(uint64_t, uint64_t, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 40);
              if (v22)
                v22(a2, a4, CFSTR("ExtendedLanguageTag"), v21);
              CFRelease(v28);
            }
          }
          v14 = v32;
          if (*(_DWORD *)(a1 + 344) && v30 == 1936684398)
          {
            v27 = 0;
            v23 = FigTrackReaderGetFigBaseObject(v32);
            v24 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
            if (v24)
            {
              v24(v23, CFSTR("AlternateGroupID"), v10, &v27);
              v25 = v27;
              if (v27)
              {
                v26 = *(void (**)(uint64_t, uint64_t, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 40);
                if (v26)
                  v26(a2, a4, CFSTR("AlternateGroupID"), v25);
                CFRelease(v27);
              }
            }
            v14 = v32;
          }
        }
        if (v14)
          CFRelease(v14);
      }
    }
  }
  if (v31)
    CFRelease(v31);
}

uint64_t figAssetExportSession_canPerformFastFrameRateConversionWithPreset(uint64_t a1, const __CFDictionary *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  CFTypeID v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int (*v11)(const void *, uint64_t, CMTime *);
  CMTime timescale;
  unsigned int v14;
  CMTime v15;
  CMTime value;

  v15 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v14 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 280)
    || *(_QWORD *)(DerivedStorage + 184)
    || !FigCFEqual()
    || FigCFEqual())
  {
    goto LABEL_17;
  }
  if (!a2 || !CFDictionaryGetValue(a2, CFSTR("maxFrameRate")))
  {
    if ((*(_DWORD *)(v6 + 268) & 0x1D) != 1)
    {
      *(_BYTE *)(v6 + 280) = 1;
      goto LABEL_17;
    }
    v15 = *(CMTime *)(v6 + 256);
    if (a3)
      goto LABEL_8;
LABEL_15:
    FigSignalErrorAt();
    goto LABEL_17;
  }
  value.value = 0;
  FigCFDictionaryGetInt64IfPresent();
  FigCFDictionaryGetIntIfPresent();
  CMTimeMake(&v15, 0, 0);
  if (!a3)
    goto LABEL_15;
LABEL_8:
  v7 = CFGetTypeID(a3);
  v8 = *(_QWORD *)(v6 + 16);
  v9 = figAssetExportSession_IsAlphaPreset(*(void **)(v6 + 72));
  if (!remakerFamily_GetDefaultSourceVideoTrackFromAsset(v7, v8, v9, *(unsigned __int8 *)(v6 + 98), &v14))
  {
    if (v14)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      *(_BYTE *)(v6 + 296) = 1;
      v10 = v14;
      timescale = v15;
      v11 = *(unsigned int (**)(const void *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 128);
      if (v11)
      {
        value = timescale;
        if (!v11(a3, v10, &value))
        {
          dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v6 + 304), 0xFFFFFFFFFFFFFFFFLL);
          FigNotificationCenterRemoveWeakListener();
        }
      }
    }
  }
LABEL_17:
  *(_BYTE *)(v6 + 296) = 0;
  return *(unsigned __int8 *)(v6 + 280);
}

_DWORD *FAES_TrackMappingRetain(uint64_t a1, uint64_t a2)
{
  _DWORD *result;
  int v4;

  if (!a2)
    return 0;
  result = malloc_type_malloc(0xCuLL, 0x10000403E1C8BA9uLL);
  v4 = *(_DWORD *)(a2 + 8);
  *(_QWORD *)result = *(_QWORD *)a2;
  result[2] = v4;
  return result;
}

void FAES_TrackMappingRelease(int a1, void *a2)
{
  if (a2)
    free(a2);
}

CFStringRef FAES_TrackMappingCopyDescription(_DWORD *a1)
{
  const __CFAllocator *v1;
  CFStringEncoding SystemEncoding;
  char __str[16];
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = 0u;
  v7 = 0u;
  *(_OWORD *)__str = 0u;
  v5 = 0u;
  snprintf(__str, 0x40uLL, "source trackID = %d, intermediate trackID = %d, mediaType = %c%c%c%c", *a1, a1[1], HIBYTE(a1[2]), BYTE2(a1[2]), BYTE1(a1[2]), a1[2]);
  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  SystemEncoding = CFStringGetSystemEncoding();
  return CFStringCreateWithCString(v1, __str, SystemEncoding);
}

float figAssetExportSession_getSourceVideoFrameRate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v6)(uint64_t, uint64_t, CFTypeRef *);
  float v7;
  CFIndex Count;
  CFIndex v10;
  CFIndex v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, CFTypeRef *);
  const void *ValueAtIndex;
  uint64_t CMBaseObject;
  void (*v16)(uint64_t, const __CFString *, uint64_t, CMTime *);
  CFTypeRef v17;
  float valuePtr;
  CMTime time;
  CFTypeRef cf;

  cf = 0;
  v6 = *(void (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  v7 = 0.0;
  if (!v6)
    return v7;
  v6(a1, 1986618469, &cf);
  if (!cf)
    return v7;
  if (a2)
  {
    time = *(CMTime *)(a2 + 16);
    v7 = 1.0 / CMTimeGetSeconds(&time);
    goto LABEL_5;
  }
  Count = CFArrayGetCount((CFArrayRef)cf);
  if (Count >= 1)
  {
    v10 = Count;
    v11 = 0;
    v12 = *MEMORY[0x1E0C9AE00];
    do
    {
      time.value = 0;
      valuePtr = 0.0;
      v17 = 0;
      if ((_DWORD)a3)
      {
        v13 = *(void (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
        if (v13)
          v13(a1, a3, &v17);
      }
      else
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, v11);
        v17 = ValueAtIndex;
        if (!ValueAtIndex)
          goto LABEL_25;
        CFRetain(ValueAtIndex);
      }
      if (v17)
      {
        CMBaseObject = FigAssetTrackGetCMBaseObject(v17);
        v16 = *(void (**)(uint64_t, const __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
        if (v16)
          v16(CMBaseObject, CFSTR("NominalFrameRate"), v12, &time);
        if (time.value)
        {
          CFNumberGetValue((CFNumberRef)time.value, kCFNumberFloat32Type, &valuePtr);
          CFRelease((CFTypeRef)time.value);
        }
        if (v7 <= valuePtr)
          v7 = valuePtr;
        if (v17)
          CFRelease(v17);
        if ((_DWORD)a3)
          break;
      }
LABEL_25:
      ++v11;
    }
    while (v10 != v11);
  }
LABEL_5:
  if (cf)
    CFRelease(cf);
  return v7;
}

CFDictionaryRef figAssetExportSession_CopyEffectiveColorProperties(uint64_t a1, const __CFDictionary *a2, const __CFArray *a3)
{
  uint64_t DerivedStorage;
  const __CFDictionary *Mutable;
  CFDictionaryRef v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (*(_QWORD *)(DerivedStorage + 184))
  {
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
  }
  v7 = FigExportSettings_CopyEffectiveColorPropertyForPresetAndInputOutputFormat(a2, a3, Mutable);
  if (Mutable)
    CFRelease(Mutable);
  return v7;
}

void spatialFormatDescriptionExtensionApplierFunction(const void *a1, const void *a2, __CFDictionary *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFTypeID v18;
  uint64_t v19;
  _QWORD v20[25];

  v20[24] = *MEMORY[0x1E0C80C00];
  v3 = *MEMORY[0x1E0CED030];
  v20[0] = *MEMORY[0x1E0CA21E8];
  v20[1] = v3;
  v4 = *MEMORY[0x1E0CED038];
  v20[2] = *MEMORY[0x1E0CA21F0];
  v20[3] = v4;
  v5 = *MEMORY[0x1E0CED028];
  v20[4] = *MEMORY[0x1E0CA4A30];
  v20[5] = v5;
  v6 = *MEMORY[0x1E0CED020];
  v20[6] = *MEMORY[0x1E0CA21E0];
  v20[7] = v6;
  v7 = *MEMORY[0x1E0CED040];
  v20[8] = *MEMORY[0x1E0CA21F8];
  v20[9] = v7;
  v8 = *MEMORY[0x1E0CED200];
  v20[10] = *MEMORY[0x1E0CA2250];
  v20[11] = v8;
  v9 = *MEMORY[0x1E0CED048];
  v20[12] = *MEMORY[0x1E0CA2200];
  v20[13] = v9;
  v10 = *MEMORY[0x1E0CED188];
  v20[14] = *MEMORY[0x1E0CA4A60];
  v20[15] = v10;
  v11 = *MEMORY[0x1E0CED280];
  v20[16] = *MEMORY[0x1E0CA4A80];
  v20[17] = v11;
  v12 = *MEMORY[0x1E0CED288];
  v20[18] = *MEMORY[0x1E0CA4A88];
  v20[19] = v12;
  v13 = *MEMORY[0x1E0CED240];
  v20[20] = *MEMORY[0x1E0CA4A70];
  v20[21] = v13;
  v14 = *MEMORY[0x1E0CED050];
  v20[22] = *MEMORY[0x1E0CA2208];
  v20[23] = v14;
  if (a1)
  {
    v18 = CFGetTypeID(a1);
    if (v18 == CFStringGetTypeID())
    {
      v19 = 0;
      while (!CFEqual(a1, (CFTypeRef)v20[v19]))
      {
        v19 += 2;
        if (v19 == 24)
          return;
      }
      CFDictionarySetValue(a3, (const void *)v20[v19 + 1], a2);
    }
  }
}

CFArrayRef figAssetExportSession_CreateTemporalMetadataPresetBlacklistOnce(CFArrayRef *a1)
{
  CFArrayRef result;
  _OWORD v3[4];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v3[0] = xmmword_1E2FB8978;
  v3[1] = *(_OWORD *)&off_1E2FB8988;
  v3[2] = xmmword_1E2FB8998;
  v3[3] = *(_OWORD *)off_1E2FB89A8;
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)v3, 8, MEMORY[0x1E0C9B378]);
  *a1 = result;
  return result;
}

uint64_t RegisterFigAssetExportSessionClassOnce()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFStringRef assetExportSessionCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigAssetExportSession %p]"), a1);
}

double figAssetExportSessionVideoCompositionInit(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

void figAssetExportSessionVideoCompositionFinalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;

  v2 = (const void *)a1[5];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[7];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[8];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[10];
  if (v5)
    CFRelease(v5);
  v6 = (const void *)a1[11];
  if (v6)
    CFRelease(v6);
  v7 = (const void *)a1[14];
  if (v7)
    CFRelease(v7);
  v8 = (const void *)a1[15];
  if (v8)
    CFRelease(v8);
  v9 = (const void *)a1[16];
  if (v9)
    CFRelease(v9);
  v10 = (const void *)a1[21];
  if (v10)
    CFRelease(v10);
  v11 = (const void *)a1[22];
  if (v11)
    CFRelease(v11);
  v12 = (const void *)a1[23];
  if (v12)
    CFRelease(v12);
}

uint64_t figAssetExportSession_completePendingTaskWithError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FigAssetExportSessionTaskCompleteWithError(a2, a3);
}

void FigAssetExportSessionTaskExecuteAndComplete(uint64_t a1)
{
  CFTypeRef cf;

  cf = 0;
  if (FigAtomicCompareAndSwap32())
  {
    (*(void (**)(_QWORD, CFTypeRef *))(a1 + 32))(*(_QWORD *)(a1 + 48), &cf);
    (*(void (**)(_QWORD, CFTypeRef))(a1 + 40))(*(_QWORD *)(a1 + 48), cf);
    if (cf)
      CFRelease(cf);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t FigAssetExportSessionTaskCompleteWithError(uint64_t a1, uint64_t a2)
{
  if (FigAtomicCompareAndSwap32())
    return (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 40))(*(_QWORD *)(a1 + 48), a2);
  else
    return FigSignalErrorAt();
}

const __CFDictionary *FigAssetExportSession_actualSettingForPreset(uint64_t a1, uint64_t a2, _OWORD *a3, CGSize *a4, __CFString *a5, uint64_t a6)
{
  CFTypeRef v12;
  const __CFDictionary *v13;
  const __CFDictionary *v14;
  const __CFArray *Value;
  const __CFArray *v16;
  double UntransformedSourceDimension;
  double v18;
  double v19;
  double v20;
  __int128 v21;
  int v22;
  CFIndex v23;
  const __CFDictionary *v24;
  double v25;
  uint64_t v26;
  double v27;
  const __CFArray *v28;
  const __CFDictionary *ValueAtIndex;
  const void *v30;
  const void *v31;
  CMTimeValue v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const __CFDictionary *v36;
  double v37;
  uint64_t v39;
  const __CFDictionary *v40;
  CFIndex Count;
  CMTimeRange start;
  CMTime duration;
  CMTimeRange otherRange;
  CMTimeRange v45;
  CMTime v46;

  if (FigCFEqual() || FigCFEqual())
  {
    v12 = figAssetExportSession_CopySourceVideoTrack(a1, a2);
    if (figAssetExportSession_trackContainsStereoVideo((uint64_t)v12))
      a5 = CFSTR("AVAssetExportPresetHighestQuality");
    if (v12)
      CFRelease(v12);
  }
  v13 = (const __CFDictionary *)FigExportSettingsForExportPreset(a5);
  v14 = v13;
  if (v13)
  {
    Value = (const __CFArray *)CFDictionaryGetValue(v13, CFSTR("mediaTiers"));
    if (Value)
    {
      v16 = Value;
      UntransformedSourceDimension = FigAssetExportSession_getUntransformedSourceDimension(a1, a2, a4);
      v19 = v18;
      if (a6)
        v20 = (float)((float)(a6 - 30720) * 0.99);
      else
        v20 = 9.1311384e18;
      memset(&v46, 0, sizeof(v46));
      figAssetExportSession_getAssetDuration(a1, &v46);
      memset(&v45, 0, sizeof(v45));
      *(_OWORD *)&start.start.value = *MEMORY[0x1E0CA2E68];
      start.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
      duration = v46;
      CMTimeRangeMake(&otherRange, &start.start, &duration);
      v21 = a3[1];
      *(_OWORD *)&start.start.value = *a3;
      *(_OWORD *)&start.start.epoch = v21;
      *(_OWORD *)&start.duration.timescale = a3[2];
      CMTimeRangeGetIntersection(&v45, &start, &otherRange);
      v22 = FigCFEqual();
      Count = CFArrayGetCount(v16);
      if (Count >= 1)
      {
        v23 = 0;
        v24 = 0;
        v39 = 0;
        v40 = 0;
        v25 = 0.0;
        v26 = 0x7FFFFFFFFFFFFFFFLL;
        v27 = 0.0;
        while (1)
        {
          v28 = v16;
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v16, v23);
          v30 = CFDictionaryGetValue(ValueAtIndex, CFSTR("Video"));
          v31 = CFDictionaryGetValue(ValueAtIndex, CFSTR("Audio"));
          v32 = 0;
          if (v30 && !v22)
          {
            start.start.value = 0;
            if (FigCFDictionaryGetInt64IfPresent())
              v32 = start.start.value / 8;
            else
              v32 = start.start.value;
          }
          if (FigCFEqual())
            v32 = (uint64_t)((double)v32 * 1.6);
          if (v31)
            v33 = figAssetExportSession_computeAudioTrackByteRate((uint64_t)v31, 0);
          else
            v33 = 0;
          v34 = v33 + v32;
          start.start = v45.duration;
          if (CMTimeGetSeconds(&start.start) * (double)(v33 + v32) > v20)
            goto LABEL_37;
          if (v22)
          {
            v35 = v39;
            v36 = v40;
            if (v34 > v39)
            {
              v36 = ValueAtIndex;
              v35 = v34;
            }
            v39 = v35;
            v40 = v36;
            goto LABEL_37;
          }
          start.start.value = 0;
          *(_QWORD *)&start.start.timescale = 0;
          FigCFDictionaryGetCGFloatIfPresent();
          FigCFDictionaryGetCGFloatIfPresent();
          if (v40)
          {
            if (*(double *)&start.start.value < UntransformedSourceDimension)
              goto LABEL_37;
            v37 = *(double *)&start.start.timescale;
            if (*(double *)&start.start.timescale < v19
              || *(double *)&start.start.value >= v27
              || *(double *)&start.start.timescale >= v25)
            {
              goto LABEL_37;
            }
          }
          else
          {
            v37 = *(double *)&start.start.timescale;
          }
          v40 = ValueAtIndex;
          v27 = *(double *)&start.start.value;
          v25 = v37;
LABEL_37:
          if (v34 < v26)
          {
            v24 = ValueAtIndex;
            v26 = v34;
          }
          ++v23;
          v16 = v28;
          if (Count == v23)
            goto LABEL_42;
        }
      }
      v40 = 0;
      v24 = 0;
LABEL_42:
      if (v40)
        return v40;
      else
        return v24;
    }
  }
  return v14;
}

uint64_t figAssetExportSession_trackContainsStereoVideo(uint64_t a1)
{
  uint64_t CMBaseObject;
  void (*v2)(uint64_t, const __CFString *, _QWORD, CFArrayRef *);
  CFIndex Count;
  CFIndex v4;
  CFIndex v5;
  uint64_t v6;
  CFArrayRef theArray;

  if (!a1)
    return 0;
  theArray = 0;
  CMBaseObject = FigAssetTrackGetCMBaseObject(a1);
  v2 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
  if (!v2)
    goto LABEL_8;
  v2(CMBaseObject, CFSTR("FormatDescriptionArray"), *MEMORY[0x1E0C9AE00], &theArray);
  if (!theArray)
    return 0;
  Count = CFArrayGetCount(theArray);
  if (Count >= 1)
  {
    v4 = Count;
    v5 = 0;
    while (1)
    {
      CFArrayGetValueAtIndex(theArray, v5);
      if (FigVideoFormatDescriptionContainsStereoMultiviewVideo())
        break;
      if (v4 == ++v5)
        goto LABEL_8;
    }
    v6 = 1;
    goto LABEL_9;
  }
LABEL_8:
  v6 = 0;
LABEL_9:
  if (theArray)
    CFRelease(theArray);
  return v6;
}

__n128 figAssetExportSession_getAssetDuration@<Q0>(uint64_t a1@<X0>, CMTime *a2@<X8>)
{
  uint64_t v3;
  CMTimeEpoch v4;
  uint64_t CMBaseObject;
  uint64_t (*v6)(uint64_t, const __CFString *, _QWORD, CFDictionaryRef *);
  __n128 result;
  int v8;
  CFDictionaryRef v9;
  __n128 v10;
  CFDictionaryRef dictionaryRepresentation;

  dictionaryRepresentation = 0;
  v3 = MEMORY[0x1E0CA2E68];
  v10 = *(__n128 *)MEMORY[0x1E0CA2E68];
  *(_OWORD *)&a2->value = *MEMORY[0x1E0CA2E68];
  v4 = *(_QWORD *)(v3 + 16);
  a2->epoch = v4;
  CMBaseObject = FigAssetGetCMBaseObject(a1);
  v6 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
  if (v6)
  {
    v8 = v6(CMBaseObject, CFSTR("Duration"), *MEMORY[0x1E0C9AE00], &dictionaryRepresentation);
    v9 = dictionaryRepresentation;
    if (!v8)
    {
      if (!dictionaryRepresentation)
      {
        result = v10;
        *(__n128 *)&a2->value = v10;
        a2->epoch = v4;
        return result;
      }
      CMTimeMakeFromDictionary(a2, dictionaryRepresentation);
      v9 = dictionaryRepresentation;
    }
    if (v9)
      CFRelease(v9);
  }
  return result;
}

uint64_t figAssetExportSession_computeVideoTrackByteRate(uint64_t a1, int a2)
{
  if (a2)
    FigCFDictionaryGetInt64IfPresent();
  if (FigCFDictionaryGetInt64IfPresent())
    return 0;
  else
    return 0;
}

uint64_t figAssetExportSession_computeAudioTrackByteRate(uint64_t result, int a2)
{
  const void *Value;
  int Int64IfPresent;
  int v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  BOOL v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = 0;
  if (result)
  {
    Value = CFDictionaryGetValue((CFDictionaryRef)result, CFSTR("audioPreset"));
    if (FigCFEqual())
    {
      return 0;
    }
    else
    {
      if (!a2)
        goto LABEL_8;
      Int64IfPresent = FigCFDictionaryGetInt64IfPresent();
      result = v16;
      if (Int64IfPresent)
      {
        result = v16 >> 3;
        v16 >>= 3;
      }
      if (!result)
      {
LABEL_8:
        v5 = FigCFDictionaryGetInt64IfPresent();
        v6 = v16;
        if (v5)
        {
          if (v16 < 0)
            v6 = v16 + 7;
          v6 >>= 3;
          v16 = v6;
        }
        if (Value)
          v7 = v6 == 0;
        else
          v7 = 0;
        if (v7)
        {
          v14 = 0;
          v15 = 0;
          v12 = 0;
          v13 = 0;
          FigAudioCompressionOptionsGetPreset(Value, &v15, &v13, &v14, &v12);
          v8 = FigCFDictionaryGetInt64IfPresent();
          v6 = v16;
          if (v8)
            v6 = v16 / 8;
          if (v6)
            v9 = 1;
          else
            v9 = v15 == 0;
          if (!v9)
          {
            v10 = *(_DWORD *)(v15 + 20);
            if (v10)
            {
              *(double *)&v11 = (double)v10;
              LODWORD(v11) = *(_DWORD *)(v15 + 16);
              v6 = (uint64_t)(*(double *)v15 / (double)v10 * (double)v11);
            }
            else
            {
              v6 = 0;
            }
          }
        }
        if (v6)
          return v6;
        else
          return 21000;
      }
    }
  }
  return result;
}

dispatch_queue_t figAssetExportSession_CreateAsynchronousConcurrentDispatchQueueOnce(dispatch_queue_t *a1)
{
  dispatch_queue_t result;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  FigKTraceInit();
  result = dispatch_queue_create("com.apple.MediaToolbox.FigAssetExportSession.Concurrent", MEMORY[0x1E0C80D50]);
  *a1 = result;
  return result;
}

uint64_t figAssetExportSessionTask_RegisterOnce()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigAssetExportSessionTaskID = result;
  return result;
}

double figAssetExportSessionTask_Init(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

void figAssetExportSessionTask_Finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 16);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 24);
  if (v3)
    CFRelease(v3);
  free(*(void **)(a1 + 48));
}

CFStringRef figAssetExportSessionTask_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigAssetExportSessionTask %p] execution: %p completion: %p"), a1, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

CFStringRef figAssetExportSessionTask_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigAssetExportSessionTask %p] execution: %p completion: %p"), a1, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void figAssetExportSession_runTaskAfterLoadingRequiredAssetPropertiesDispatched(_QWORD *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, char *, int *);
  int v6;
  CFErrorRef CFError;
  CFErrorRef v8;
  void *SInt32;
  int v10;
  char v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = 0;
  v10 = 0;
  v3 = *(_QWORD *)(DerivedStorage + 16);
  v4 = a1[3];
  v5 = *(uint64_t (**)(uint64_t, uint64_t, char *, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v5)
  {
    v6 = -12782;
    goto LABEL_6;
  }
  v6 = v5(v3, v4, &v11, &v10);
  if (v6)
  {
LABEL_6:
    CFError = figAssetExportSession_createCFError(v6, "Failed to FigAssetLoadValuesAsyncForProperties.");
    FigAssetExportSessionTaskCompleteWithError((uint64_t)a1, (uint64_t)CFError);
    if (!CFError)
      goto LABEL_9;
    v8 = CFError;
LABEL_8:
    CFRelease(v8);
    goto LABEL_9;
  }
  if (!v11)
  {
    SInt32 = (void *)FigCFNumberCreateSInt32();
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 352), SInt32, a1);
    if (!SInt32)
      goto LABEL_9;
    v8 = (CFErrorRef)SInt32;
    goto LABEL_8;
  }
  FigAssetExportSessionTaskExecuteAndComplete((uint64_t)a1);
LABEL_9:
  CFRelease(a1);
}

CFErrorRef figAssetExportSession_createCFError(int a1, const char *a2)
{
  const __CFAllocator *v3;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  CFStringRef v7;
  CFErrorRef v8;

  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (!a2)
    return CFErrorCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("FigAssetExportSession_ErrorDomain"), a1, 0);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return 0;
  v6 = Mutable;
  v7 = CFStringCreateWithCString(v3, a2, 0x8000100u);
  CFDictionarySetValue(v6, (const void *)*MEMORY[0x1E0C9AFA8], v7);
  v8 = CFErrorCreate(v3, CFSTR("FigAssetExportSession_ErrorDomain"), a1, v6);
  if (v7)
    CFRelease(v7);
  CFRelease(v6);
  return v8;
}

CFTypeRef figAssetExportSession_copySourceTransferFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v3;
  CFTypeRef v4;
  CFTypeRef v5;
  const void *v6;
  uint64_t CMBaseObject;
  unsigned int (*v8)(uint64_t, const __CFString *, _QWORD, CFArrayRef *);
  const opaqueCMFormatDescription *ValueAtIndex;
  CFPropertyListRef Extension;
  CFTypeID v11;
  CFArrayRef theArray;

  theArray = 0;
  if (a3)
  {
    v3 = *(const void **)(a3 + 128);
    if (v3)
      v4 = CFRetain(v3);
    else
      v4 = 0;
    v6 = 0;
    goto LABEL_14;
  }
  v5 = figAssetExportSession_CopySourceVideoTrack(a1, a2);
  if (!v5)
    return 0;
  v6 = v5;
  CMBaseObject = FigAssetTrackGetCMBaseObject(v5);
  v8 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
  if (!v8 || v8(CMBaseObject, CFSTR("FormatDescriptionArray"), *MEMORY[0x1E0C9AE00], &theArray))
    goto LABEL_20;
  if (!theArray)
  {
    v4 = 0;
LABEL_17:
    CFRelease(v6);
    return v4;
  }
  if (CFArrayGetCount(theArray) < 1)
    goto LABEL_20;
  ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(theArray, 0);
  Extension = CMFormatDescriptionGetExtension(ValueAtIndex, (CFStringRef)*MEMORY[0x1E0CA8E98]);
  v4 = Extension;
  if (!Extension)
    goto LABEL_14;
  v11 = CFGetTypeID(Extension);
  if (v11 == CFStringGetTypeID())
    CFRetain(v4);
  else
LABEL_20:
    v4 = 0;
LABEL_14:
  if (theArray)
    CFRelease(theArray);
  if (v6)
    goto LABEL_17;
  return v4;
}

uint64_t figAssetExportSession_isHEVCHDRPreset()
{
  uint64_t result;

  if (FigCFEqual())
    return 1;
  if (FigCFEqual())
    return 1;
  if (FigCFEqual())
    return 1;
  if (FigCFEqual())
    return 1;
  if (FigCFEqual())
    return 1;
  if (FigCFEqual())
    return 1;
  if (FigCFEqual())
    return 1;
  if (FigCFEqual())
    return 1;
  if (FigCFEqual())
    return 1;
  if (FigCFEqual())
    return 1;
  result = FigCFEqual();
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t figAssetExportSession_computeAudioByteRate(uint64_t a1, CFDictionaryRef theDict, int a3, char a4)
{
  const void *Value;
  CFMutableArrayRef Mutable;
  uint64_t v10;
  unsigned int v11;
  const void *v12;
  unsigned int (*v13)(uint64_t, uint64_t, CFArrayRef *);
  CFIndex Count;
  CFIndex v15;
  CFIndex v16;
  int v17;
  uint64_t v18;
  CFTypeRef v19;
  const void *ValueAtIndex;
  uint64_t CMBaseObject;
  unsigned int (*v22)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  void (*v23)(uint64_t, uint64_t, CFTypeRef *);
  uint64_t v24;
  CFIndex v25;
  CFIndex v26;
  CFIndex v27;
  const __CFArray *v28;
  const void *v29;
  uint64_t v30;
  void (*v31)(uint64_t, const __CFString *, uint64_t, CFArrayRef *);
  uint64_t v33;
  void (*v34)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t SInt64;
  CFTypeRef cf;
  CFTypeRef v38;
  CFTypeRef v39;
  CFArrayRef theArray;

  v38 = 0;
  Value = CFDictionaryGetValue(theDict, CFSTR("audioPreset"));
  cf = 0;
  if (FigCFEqual())
  {
    Mutable = 0;
    v10 = 0;
    goto LABEL_47;
  }
  v10 = figAssetExportSession_computeAudioTrackByteRate((uint64_t)theDict, 0);
  if (!a3 && theDict && Value)
  {
    v11 = figAssetExportSession_isAudioMixdownRequired(Value, (CFErrorRef *)&v38);
    if (v38)
    {
      CFErrorGetCode((CFErrorRef)v38);
      goto LABEL_9;
    }
    if (!v11)
    {
      theArray = 0;
      v12 = (const void *)*MEMORY[0x1E0C9AE40];
      v39 = (CFTypeRef)*MEMORY[0x1E0C9AE40];
      v13 = *(unsigned int (**)(uint64_t, uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 48);
      if (!v13 || v13(a1, 1936684398, &theArray))
        goto LABEL_23;
      if (!theArray)
      {
        v17 = 0;
        goto LABEL_27;
      }
      Count = CFArrayGetCount(theArray);
      if (Count < 1)
      {
LABEL_23:
        v17 = 0;
      }
      else
      {
        v15 = Count;
        v16 = 0;
        v17 = 0;
        v18 = *MEMORY[0x1E0C9AE00];
        v19 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(theArray, v16);
          v39 = v12;
          CMBaseObject = FigAssetTrackGetCMBaseObject(ValueAtIndex);
          v22 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
          if (!v22 || v22(CMBaseObject, CFSTR("IsEnabled"), v18, &v39))
            break;
          if (v39 == v19)
            ++v17;
          ++v16;
        }
        while (v15 != v16);
      }
      if (theArray)
        CFRelease(theArray);
LABEL_27:
      v10 *= v17;
      if ((a4 & 1) == 0)
        goto LABEL_9;
      goto LABEL_28;
    }
  }
  if ((a4 & 1) == 0)
  {
LABEL_9:
    Mutable = 0;
    goto LABEL_10;
  }
LABEL_28:
  v23 = *(void (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (!v23 || (v23(a1, 1936684398, &cf), !cf))
  {
    Mutable = 0;
    goto LABEL_47;
  }
  v24 = *MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v25 = CFArrayGetCount((CFArrayRef)cf);
  if (v25 >= 1)
  {
    v26 = v25;
    v27 = 0;
    v28 = (const __CFArray *)*MEMORY[0x1E0C9AE40];
    do
    {
      v29 = CFArrayGetValueAtIndex((CFArrayRef)cf, v27);
      theArray = v28;
      v30 = FigAssetTrackGetCMBaseObject(v29);
      v31 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
      if (v31)
        v31(v30, CFSTR("IsEnabled"), v24, &theArray);
      if (figAssetExportSession_isAlternateTrack((uint64_t)v29) && theArray == v28)
      {
        v39 = 0;
        v33 = FigAssetTrackGetCMBaseObject(v29);
        v34 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
        if (v34)
          v34(v33, CFSTR("EstimatedDataRate"), v24, &v39);
        SInt64 = FigCFNumberGetSInt64();
        if (v39)
          CFRelease(v39);
        v10 += SInt64;
      }
      ++v27;
    }
    while (v26 != v27);
  }
LABEL_10:
  if (cf)
    CFRelease(cf);
LABEL_47:
  if (v38)
    CFRelease(v38);
  if (Mutable)
    CFRelease(Mutable);
  return v10;
}

double figAssetExportSession_getTotalByteRateOfAllAssetTracks(uint64_t a1)
{
  uint64_t CMBaseObject;
  unsigned int (*v3)(uint64_t, const __CFString *, _QWORD, CFDictionaryRef *);
  double v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef v8;
  unsigned int (*v9)(CFTypeRef, uint64_t *);
  uint64_t v10;
  uint64_t v11;
  CFTypeRef v12;
  unsigned int (*v13)(CFTypeRef, uint64_t, CFTypeRef *, _QWORD, _QWORD);
  uint64_t FigBaseObject;
  unsigned int (*v15)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  double v16;
  double v17;
  uint64_t v19;
  CMTime time2;
  CMTime time1;
  CMTime v22;
  CFDictionaryRef dictionaryRepresentation;
  CFTypeRef v24;
  CFTypeRef v25;
  CFTypeRef v26;

  v25 = 0;
  v26 = 0;
  v24 = 0;
  dictionaryRepresentation = 0;
  v22 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  CMBaseObject = FigAssetGetCMBaseObject(a1);
  v3 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
  v4 = 0.0;
  if (v3)
  {
    v5 = *MEMORY[0x1E0C9AE00];
    if (!v3(CMBaseObject, CFSTR("Duration"), *MEMORY[0x1E0C9AE00], &dictionaryRepresentation))
    {
      CMTimeMakeFromDictionary(&v22, dictionaryRepresentation);
      time1 = v22;
      time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      if (CMTimeCompare(&time1, &time2))
      {
        v19 = 0;
        v6 = FigAssetGetCMBaseObject(a1);
        v7 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
        if (v7)
        {
          if (!v7(v6, CFSTR("assetProperty_FormatReader"), v5, &v24))
          {
            v8 = v24;
            v9 = *(unsigned int (**)(CFTypeRef, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
            if (v9)
            {
              if (!v9(v8, &v19))
              {
                if (v19 < 1)
                {
LABEL_21:
                  time1 = v22;
                  v4 = v4 / CMTimeGetSeconds(&time1) + 0.0;
                }
                else
                {
                  v10 = 0;
                  v11 = 0;
                  while (1)
                  {
                    v12 = v24;
                    v13 = *(unsigned int (**)(CFTypeRef, uint64_t, CFTypeRef *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
                    if (!v13)
                      break;
                    if (v13(v12, v10, &v26, 0, 0))
                      break;
                    FigBaseObject = FigTrackReaderGetFigBaseObject(v26);
                    v15 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                    if (!v15)
                      break;
                    if (v15(FigBaseObject, CFSTR("UneditedNumDataBytes"), v5, &v25))
                      break;
                    FigCFNumberGetFloat64();
                    if (v16 == 0.0)
                      break;
                    v17 = v16;
                    if (v25)
                    {
                      CFRelease(v25);
                      v25 = 0;
                    }
                    if (v26)
                    {
                      CFRelease(v26);
                      v26 = 0;
                    }
                    v11 = (uint64_t)(v17 + (double)v11);
                    if (v19 <= ++v10)
                    {
                      v4 = (double)v11;
                      goto LABEL_21;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (dictionaryRepresentation)
    CFRelease(dictionaryRepresentation);
  if (v25)
    CFRelease(v25);
  if (v26)
    CFRelease(v26);
  if (v24)
    CFRelease(v24);
  return v4;
}

void figAssetExportSession_FilterSPIPresets(void *value, CFMutableSetRef *a2)
{
  if (!CFSetContainsValue(*a2, value) && !CFSetContainsValue(a2[1], value))
  {
    CFArrayAppendValue(a2[2], value);
    CFSetAddValue(*a2, value);
  }
}

CFComparisonResult figAssetExportSession_StringArrayNumericalComparatorFunction(const __CFString *a1, const __CFString *a2)
{
  return CFStringCompare(a1, a2, 0x40uLL);
}

void figAssetExportSession_CategorizePresetsOnce(const __CFArray ***a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  const __CFAllocator *v6;
  CFMutableArrayRef v7;
  CFMutableArrayRef v8;
  CFMutableArrayRef v9;
  CFMutableArrayRef v10;
  CFMutableArrayRef v11;
  __CFArray *v12;
  CFIndex i;
  void *ValueAtIndex;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  const __CFArray ***v19;
  __CFArray *theArray;
  __CFArray *v21;
  __CFArray *v22;
  __CFArray *v23;
  CFMutableArrayRef v24;
  CFMutableArrayRef Mutable;
  CFRange v26;
  CFRange v27;
  CFRange v28;
  CFRange v29;
  CFRange v30;
  CFRange v31;
  CFRange v32;
  CFRange v33;

  if (FigAssetExportSessionGetAllPresets_onceToken != -1)
    dispatch_once_f(&FigAssetExportSessionGetAllPresets_onceToken, &FigAssetExportSessionGetAllPresets_sAllPresets, (dispatch_function_t)figAssetExportSession_CreateAllPresetsOnce);
  v2 = (const __CFArray *)FigAssetExportSessionGetAllPresets_sAllPresets;
  if (!FigAssetExportSessionGetAllPresets_sAllPresets)
    return;
  if (figAssetExportSession_GetAudioOnlyPresets_onceToken != -1)
    dispatch_once_f(&figAssetExportSession_GetAudioOnlyPresets_onceToken, &figAssetExportSession_GetAudioOnlyPresets_sAudioOnlyPresets, (dispatch_function_t)figAssetExportSession_CreateAudioOnlyPresetsOnce);
  v3 = (const __CFArray *)figAssetExportSession_GetAudioOnlyPresets_sAudioOnlyPresets;
  if (!figAssetExportSession_GetAudioOnlyPresets_sAudioOnlyPresets)
    return;
  Count = CFArrayGetCount(v2);
  v5 = CFArrayGetCount(v3);
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return;
  v24 = CFArrayCreateMutable(v6, 0, MEMORY[0x1E0C9B378]);
  if (!v24)
  {
    CFRelease(Mutable);
    return;
  }
  v7 = CFArrayCreateMutable(v6, 0, MEMORY[0x1E0C9B378]);
  if (!v7)
  {
    v9 = 0;
    v10 = 0;
    v8 = 0;
LABEL_38:
    CFRelease(Mutable);
    CFRelease(v24);
    if (v7)
      CFRelease(v7);
    if (v8)
      CFRelease(v8);
    if (v9)
      CFRelease(v9);
    if (v10)
      CFRelease(v10);
    return;
  }
  v8 = CFArrayCreateMutable(v6, 0, MEMORY[0x1E0C9B378]);
  if (!v8)
  {
    v9 = 0;
    goto LABEL_37;
  }
  v9 = CFArrayCreateMutable(v6, 0, MEMORY[0x1E0C9B378]);
  if (!v9)
  {
LABEL_37:
    v10 = 0;
    goto LABEL_38;
  }
  v10 = CFArrayCreateMutable(v6, 0, MEMORY[0x1E0C9B378]);
  if (!v10)
    goto LABEL_38;
  v22 = v7;
  v23 = v8;
  v11 = CFArrayCreateMutable(v6, 0, MEMORY[0x1E0C9B378]);
  if (!v11)
    goto LABEL_38;
  v12 = v11;
  theArray = v9;
  v21 = v10;
  v19 = a1;
  if (Count >= 1)
  {
    for (i = 0; Count != i; ++i)
    {
      ValueAtIndex = (void *)CFArrayGetValueAtIndex(v2, i);
      v26.location = 0;
      v26.length = v5;
      v15 = CFArrayContainsValue(v3, v26, ValueAtIndex);
      v16 = figAssetExportSession_IsAlphaPreset(ValueAtIndex);
      v17 = figAssetExportSession_IsStereoPreset(ValueAtIndex);
      if (v17)
      {
        if (v16)
          goto LABEL_18;
      }
      else
      {
        CFArrayAppendValue(Mutable, ValueAtIndex);
        if (v16)
          goto LABEL_18;
      }
      CFArrayAppendValue(v24, ValueAtIndex);
LABEL_18:
      if (v17 | v16)
      {
        if (!v15)
          goto LABEL_31;
      }
      else
      {
        CFArrayAppendValue(v22, ValueAtIndex);
        if (!v15)
LABEL_31:
          CFArrayAppendValue(v23, ValueAtIndex);
      }
      if (!(v17 | v15))
        CFArrayAppendValue(theArray, ValueAtIndex);
      v18 = v16 | v15;
      if (!v18)
        CFArrayAppendValue(v21, ValueAtIndex);
      if (!(v18 | v17))
        CFArrayAppendValue(v12, ValueAtIndex);
    }
  }
  **v19 = v2;
  v27.length = CFArrayGetCount(Mutable);
  v27.location = 0;
  CFArraySortValues(Mutable, v27, (CFComparatorFunction)figAssetExportSession_StringArrayNumericalComparatorFunction, 0);
  *v19[1] = Mutable;
  v28.length = CFArrayGetCount(v24);
  v28.location = 0;
  CFArraySortValues(v24, v28, (CFComparatorFunction)figAssetExportSession_StringArrayNumericalComparatorFunction, 0);
  *v19[2] = v24;
  v29.length = CFArrayGetCount(v22);
  v29.location = 0;
  CFArraySortValues(v22, v29, (CFComparatorFunction)figAssetExportSession_StringArrayNumericalComparatorFunction, 0);
  *v19[3] = v22;
  v30.length = CFArrayGetCount(v23);
  v30.location = 0;
  CFArraySortValues(v23, v30, (CFComparatorFunction)figAssetExportSession_StringArrayNumericalComparatorFunction, 0);
  *v19[4] = v23;
  v31.length = CFArrayGetCount(theArray);
  v31.location = 0;
  CFArraySortValues(theArray, v31, (CFComparatorFunction)figAssetExportSession_StringArrayNumericalComparatorFunction, 0);
  *v19[5] = theArray;
  v32.length = CFArrayGetCount(v21);
  v32.location = 0;
  CFArraySortValues(v21, v32, (CFComparatorFunction)figAssetExportSession_StringArrayNumericalComparatorFunction, 0);
  *v19[6] = v21;
  v33.length = CFArrayGetCount(v12);
  v33.location = 0;
  CFArraySortValues(v12, v33, (CFComparatorFunction)figAssetExportSession_StringArrayNumericalComparatorFunction, 0);
  *v19[7] = v12;
}

_QWORD *figAssetExportSessionProperty_AudioMix_CFDictionaryRetainCallBack(uint64_t a1, _QWORD *a2)
{
  const void *v3;
  const void *v4;
  const void *v5;

  if (FigAtomicIncrement32() == 1)
  {
    v3 = (const void *)a2[1];
    if (v3)
      CFRetain(v3);
    v4 = (const void *)a2[2];
    if (v4)
      CFRetain(v4);
    v5 = (const void *)a2[3];
    if (v5)
      CFRetain(v5);
  }
  return a2;
}

void figAssetExportSessionProperty_AudioMix_CFDictionaryReleaseCallBack(const __CFAllocator *a1, _QWORD *a2)
{
  const void *v4;
  const void *v5;
  const void *v6;

  if (!FigAtomicDecrement32())
  {
    v4 = (const void *)a2[1];
    if (v4)
      CFRelease(v4);
    v5 = (const void *)a2[2];
    if (v5)
      CFRelease(v5);
    v6 = (const void *)a2[3];
    if (v6)
      CFRelease(v6);
    CFAllocatorDeallocate(a1, a2);
  }
}

uint64_t FigCPEOctaviaCreateNeroCryptor(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t (*v12)(uint64_t, _QWORD, _QWORD, void **);
  const __CFAllocator *v13;
  uint64_t v14;
  uint64_t CFNumberFromRemoteObjectRef;
  CFDictionaryRef v16;
  CFIndex v17;
  uint64_t SerializedAtomDataBlockBufferForCFType;
  uint64_t v19;
  const void *v20;
  uint64_t v22;
  CMBlockBufferRef theSourceBuffer;
  CFTypeRef cf;
  uint64_t destination;
  uint64_t v26;
  void *values[2];
  __int128 v28;
  void *keys[2];
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)keys = 0u;
  v30 = 0u;
  *(_OWORD *)values = 0u;
  v28 = 0u;
  theSourceBuffer = 0;
  cf = 0;
  destination = 0;
  v26 = 0;
  v6 = 4294955146;
  if (!a1 || !a5)
    goto LABEL_22;
  keys[0] = CFSTR("ProtectionScheme");
  v12 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v12)
  {
    v6 = 4294954514;
    goto LABEL_22;
  }
  v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v14 = v12(a1, *MEMORY[0x1E0CA3200], *MEMORY[0x1E0C9AE00], values);
  if ((_DWORD)v14)
  {
    v6 = v14;
    goto LABEL_22;
  }
  if (!a2)
  {
    v17 = 1;
    if (!a3)
      goto LABEL_11;
    goto LABEL_10;
  }
  v22 = 0;
  FigCPEExternalProtectionMonitorGetSerializationToken(a2, &v22);
  keys[1] = CFSTR("OctaviaExternalProtectionMonitorSerializationToken");
  CFNumberFromRemoteObjectRef = FigTransportCreateCFNumberFromRemoteObjectRef();
  if (!(_DWORD)CFNumberFromRemoteObjectRef)
  {
    v17 = 2;
    if (!a3)
    {
LABEL_11:
      v16 = CFDictionaryCreate(v13, (const void **)keys, (const void **)values, v17, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v16)
      {
        SerializedAtomDataBlockBufferForCFType = FigRemote_CreateSerializedAtomDataBlockBufferForCFType();
        if ((_DWORD)SerializedAtomDataBlockBufferForCFType
          || (FigTransportGetRemoteRootObject(),
              SerializedAtomDataBlockBufferForCFType = NeroTransportSendSyncMessageCreatingReply(),
              (_DWORD)SerializedAtomDataBlockBufferForCFType)
          || (SerializedAtomDataBlockBufferForCFType = CMBlockBufferCopyDataBytes(theSourceBuffer, 0, 8uLL, &destination), (_DWORD)SerializedAtomDataBlockBufferForCFType))
        {
          v6 = SerializedAtomDataBlockBufferForCFType;
        }
        else
        {
          v6 = CMBlockBufferCopyDataBytes(theSourceBuffer, 8uLL, 8uLL, &v26);
          if (!(_DWORD)v6)
          {
            v19 = v26;
            *a5 = destination;
            *a6 = v19;
            destination = 0;
            v26 = 0;
          }
        }
      }
      else
      {
        v6 = 4294955145;
      }
      goto LABEL_17;
    }
LABEL_10:
    keys[v17] = CFSTR("SerializedState");
    values[v17++] = (void *)CFRetain(a3);
    goto LABEL_11;
  }
  v6 = CFNumberFromRemoteObjectRef;
  v16 = 0;
  v17 = 1;
  do
  {
LABEL_17:
    v20 = values[v17 - 1];
    if (v20)
      CFRelease(v20);
    --v17;
  }
  while ((unint64_t)(v17 + 1) > 1);
  if (v16)
    CFRelease(v16);
LABEL_22:
  if (cf)
    CFRelease(cf);
  if (theSourceBuffer)
    CFRelease(theSourceBuffer);
  if (destination)
    NeroTransportSendAsyncMessage();
  return v6;
}

uint64_t FigCPEOctaviaReleaseRemoteCryptor(uint64_t result)
{
  if (result)
    return NeroTransportSendAsyncMessage();
  return result;
}

uint64_t FigOctaviaCPECryptorCreate(const void *a1, const void *a2, _QWORD *a3, const void *a4, uint64_t a5, const void *a6, _QWORD *a7)
{
  uint64_t NeroCryptor;
  uint64_t v14;
  uint64_t DerivedStorage;
  _QWORD *v16;
  uint64_t v17;
  CFTypeRef v18;

  NeroCryptor = 4294955146;
  if (a6 && a1 && a2 && a3 && a7)
  {
    MEMORY[0x19402F294](&FigOctaviaCPECryptorGetClassID_sRegisterFigOctaviaCPECryptorTypeOnce, RegisterFigOctaviaCPECryptorType);
    v14 = CMDerivedObjectCreate();
    if ((_DWORD)v14)
      return v14;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!DerivedStorage)
      return 4294955145;
    v16 = (_QWORD *)DerivedStorage;
    v17 = FigSimpleMutexCreate();
    v16[7] = v17;
    if (!v17)
      return 4294955145;
    *v16 = CFRetain(a1);
    v16[3] = CFRetain(a2);
    v18 = CFRetain(a6);
    v16[8] = v18;
    v14 = FigCPEOctaviaExternalProtectionMonitorCreate(*MEMORY[0x1E0C9AE00], a3, 0, v18, v16 + 5);
    if ((_DWORD)v14)
      return v14;
    FigCPEExternalProtectionMonitorBeginMonitoring(v16[5]);
    NeroCryptor = FigCPEOctaviaCreateNeroCryptor(0, v16[5], a4, v16[8], v16 + 1, v16 + 2);
    if (!(_DWORD)NeroCryptor)
      *a7 = 0;
  }
  return NeroCryptor;
}

BOOL FigOctaviaCPECryptorEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t FigOctaviaCPECryptorInvalidate()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  const void *v2;
  const void *v3;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 56));
  *(_BYTE *)(DerivedStorage + 48) = 1;
  v1 = *(_QWORD *)(DerivedStorage + 40);
  if (v1)
  {
    FigCPEExternalProtectionMonitorEndMonitoring(v1);
    v2 = *(const void **)(DerivedStorage + 40);
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)(DerivedStorage + 40) = 0;
    }
  }
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v3 = *(const void **)(DerivedStorage + 24);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 64);
  if (*(_QWORD *)(DerivedStorage + 8))
  {
    NeroTransportSendAsyncMessage();
    v4 = *(const void **)(DerivedStorage + 64);
  }
  *(_QWORD *)(DerivedStorage + 8) = 0;
  *(_QWORD *)(DerivedStorage + 16) = 0;
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 64) = 0;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 56));
  return 0;
}

uint64_t FigOctaviaCPECryptorFinalize()
{
  uint64_t result;
  uint64_t v1;

  result = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(result + 56))
  {
    v1 = result;
    FigOctaviaCPECryptorInvalidate();
    result = FigSimpleMutexDestroy();
    *(_QWORD *)(v1 + 56) = 0;
  }
  return result;
}

__CFString *FigOctaviaCPECryptorCopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  BOOL v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 56));
  if (*(_BYTE *)(DerivedStorage + 48))
    v5 = 1;
  else
    v5 = Mutable == 0;
  if (!v5)
    CFStringAppendFormat(Mutable, 0, CFSTR("<FigOctaviaCPECryptor: protectorParent<%@> >"), *(_QWORD *)DerivedStorage);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 56));
  return Mutable;
}

uint64_t FigOctaviaCPECryptorCopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  uint64_t SerializedAtomDataBlockBufferForCFType;
  CFTypeRef v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, const void *, uint64_t, _QWORD *);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294955146;
  v8 = DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 56));
  if (!*(_BYTE *)(v8 + 48))
  {
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31A0]))
    {
      v9 = 0;
      *a4 = *MEMORY[0x1E0C9AE40];
      goto LABEL_6;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3218]))
    {
      SerializedAtomDataBlockBufferForCFType = FigRemote_CreateSerializedAtomDataBlockBufferForCFType();
      if (!(_DWORD)SerializedAtomDataBlockBufferForCFType)
      {
        SerializedAtomDataBlockBufferForCFType = NeroTransportSendSyncMessageCreatingReply();
        if (!(_DWORD)SerializedAtomDataBlockBufferForCFType)
          SerializedAtomDataBlockBufferForCFType = FigRemote_CreateCFTypeFromSerializedAtomDataBlockBuffer();
      }
      v9 = SerializedAtomDataBlockBufferForCFType;
      goto LABEL_6;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3200]))
    {
      v12 = *(CFTypeRef *)(v8 + 24);
      if (!v12)
      {
LABEL_16:
        v9 = 0;
        *a4 = v12;
        goto LABEL_6;
      }
    }
    else
    {
      if (!CFEqual(a2, CFSTR("BC70EF27-5C84-4D7C-9C87-F8A091DFDC77")))
      {
        v13 = *(_QWORD *)v8;
        v14 = *(uint64_t (**)(uint64_t, const void *, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
        if (v14)
          v9 = v14(v13, a2, a3, a4);
        else
          v9 = 4294954514;
        goto LABEL_6;
      }
      v12 = *(CFTypeRef *)(v8 + 32);
      if (!v12)
        goto LABEL_16;
    }
    v12 = CFRetain(v12);
    goto LABEL_16;
  }
  v9 = 4294954511;
LABEL_6:
  MEMORY[0x19402EF04](*(_QWORD *)(v8 + 56));
  return v9;
}

uint64_t FigOctaviaCPECryptorSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  uint64_t SerializedAtomDataBlockBufferForKeyValuePair;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, const void *, const void *);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294955146;
  v6 = DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 56));
  if (*(_BYTE *)(v6 + 48))
  {
    v7 = 4294954511;
  }
  else if (CFEqual(a2, CFSTR("BC70EF27-5C84-4D7C-9C87-F8A091DFDC77")))
  {
    v8 = *(const void **)(v6 + 32);
    *(_QWORD *)(v6 + 32) = a3;
    if (a3)
      CFRetain(a3);
    if (v8)
      CFRelease(v8);
    v7 = 0;
  }
  else if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31F8])
         || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3208])
         || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31E0])
         || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3190])
         || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3218]))
  {
    SerializedAtomDataBlockBufferForKeyValuePair = FigRemote_CreateSerializedAtomDataBlockBufferForKeyValuePair();
    if (!(_DWORD)SerializedAtomDataBlockBufferForKeyValuePair)
      SerializedAtomDataBlockBufferForKeyValuePair = NeroTransportSendAsyncMessage();
    v7 = SerializedAtomDataBlockBufferForKeyValuePair;
  }
  else
  {
    v11 = *(_QWORD *)v6;
    v12 = *(uint64_t (**)(uint64_t, const void *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v12)
      v7 = v12(v11, a2, a3);
    else
      v7 = 4294954514;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v6 + 56));
  return v7;
}

uint64_t FigOctaviaCPECryptorGetExternalProtectionMethods(uint64_t a1, _DWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294955146;
  v4 = DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 56));
  if (*(_BYTE *)(v4 + 48))
  {
    v5 = 4294954511;
  }
  else
  {
    v5 = 0;
    *a2 = 7;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v4 + 56));
  return v5;
}

uint64_t FigOctaviaCPECryptorGetAggregateExternalProtectionStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v9)(uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
    return 4294955146;
  v5 = DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 56));
  if (*(_BYTE *)(v5 + 48))
  {
    v6 = 4294954511;
  }
  else
  {
    v7 = *(_QWORD *)v5;
    v8 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
    if (*v8 && (v9 = (uint64_t (*)(uint64_t, uint64_t))v8[9]) != 0)
      v6 = v9(v7, a3);
    else
      v6 = 4294954514;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v5 + 56));
  return v6;
}

uint64_t FigOctaviaCPECryptorCreateKeyRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t SerializedAtomDataBlockBufferForCFType;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a4)
    return 4294955146;
  v6 = DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 56));
  if (*(_BYTE *)(v6 + 48))
  {
    SerializedAtomDataBlockBufferForCFType = 4294954511;
  }
  else
  {
    SerializedAtomDataBlockBufferForCFType = FigRemote_CreateSerializedAtomDataBlockBufferForCFType();
    if (!(_DWORD)SerializedAtomDataBlockBufferForCFType)
    {
      SerializedAtomDataBlockBufferForCFType = NeroTransportSendSyncMessageCreatingReply();
      if (!(_DWORD)SerializedAtomDataBlockBufferForCFType)
        SerializedAtomDataBlockBufferForCFType = FigRemote_CreateCFTypeFromSerializedAtomDataBlockBuffer();
    }
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v6 + 56));
  return SerializedAtomDataBlockBufferForCFType;
}

uint64_t FigOctaviaCPECryptorSetKeyRequestResponse(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t SerializedAtomDataBlockBufferForCFType;
  __CFDictionary *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294955146;
  v6 = DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 56));
  if (*(_BYTE *)(v6 + 48))
  {
    SerializedAtomDataBlockBufferForCFType = 4294954511;
  }
  else
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2, 0, 0);
    CFDictionaryAddValue(Mutable, CFSTR("KeyRequestResponse"), a2);
    if (a3)
      CFDictionaryAddValue(Mutable, CFSTR("KeyResponseOptions"), a3);
    SerializedAtomDataBlockBufferForCFType = FigRemote_CreateSerializedAtomDataBlockBufferForCFType();
    if (!(_DWORD)SerializedAtomDataBlockBufferForCFType)
      SerializedAtomDataBlockBufferForCFType = NeroTransportSendSyncMessageCreatingReply();
    if (Mutable)
      CFRelease(Mutable);
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v6 + 56));
  return SerializedAtomDataBlockBufferForCFType;
}

uint64_t FigOctaviaCPECryptorGetSerializationToken(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294955146;
  v4 = DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 56));
  if (*(_BYTE *)(v4 + 48))
  {
    v5 = 4294954511;
  }
  else
  {
    v5 = 0;
    *a2 = *(_QWORD *)(v4 + 16);
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v4 + 56));
  return v5;
}

uint64_t FigOctaviaCPECryptorTestAndSetKeyRequestState(uint64_t a1, uint64_t a2, uint64_t a3, BOOL *a4, _QWORD *a5)
{
  uint64_t DerivedStorage;
  __CFArray *Mutable;
  const void *SInt32;
  const void *v10;
  uint64_t v11;
  uint64_t SerializedAtomDataBlockBufferForCFType;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 56));
  if (*(_BYTE *)(DerivedStorage + 48))
  {
    Mutable = 0;
    SInt32 = 0;
    v10 = 0;
    v11 = 4294954511;
    goto LABEL_10;
  }
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    SInt32 = 0;
    goto LABEL_22;
  }
  SInt32 = (const void *)FigCFNumberCreateSInt32();
  if (!SInt32)
  {
LABEL_22:
    v10 = 0;
    goto LABEL_23;
  }
  v10 = (const void *)FigCFNumberCreateSInt32();
  if (!v10)
  {
LABEL_23:
    v11 = 4294955145;
    goto LABEL_10;
  }
  CFArrayAppendValue(Mutable, SInt32);
  CFArrayAppendValue(Mutable, v10);
  SerializedAtomDataBlockBufferForCFType = FigRemote_CreateSerializedAtomDataBlockBufferForCFType();
  if (!(_DWORD)SerializedAtomDataBlockBufferForCFType)
  {
    SerializedAtomDataBlockBufferForCFType = NeroTransportSendSyncMessageCreatingReply();
    if (!(_DWORD)SerializedAtomDataBlockBufferForCFType)
      SerializedAtomDataBlockBufferForCFType = FigRemote_CreateCFTypeFromSerializedAtomDataBlockBuffer();
  }
  v11 = SerializedAtomDataBlockBufferForCFType;
LABEL_10:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 56));
  if (a4)
    *a4 = *MEMORY[0x1E0C9AE50] == 0;
  if (a5)
    *a5 = 0;
  if (Mutable)
    CFRelease(Mutable);
  if (SInt32)
    CFRelease(SInt32);
  if (v10)
    CFRelease(v10);
  return v11;
}

uint64_t RegisterFigOctaviaCPECryptorType()
{
  FigCPECryptorGetClassID();
  return FigBaseClassRegisterClass();
}

CFTypeRef FigOctaviaCPECryptorCopyFormattingDesc()
{
  return CFRetain(CFSTR("[FigOctaviaCPECryptor]"));
}

uint64_t bvc_SimpleMixing_420v_420v_420v_arm(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, _QWORD *a7, uint64_t a8, int16x8_t a9)
{
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  uint64_t v12;
  int16x8_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  int8x16_t *v19;
  uint64_t i;
  uint8x16_t v21;
  uint8x16_t v22;
  uint8x16_t v23;
  uint8x16_t v24;
  uint8x16_t v25;
  uint8x16_t v26;
  uint8x16_t v27;
  uint8x16_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  uint64_t j;
  uint8x8_t v36;
  uint64_t v37;
  __int8 v38;
  __int8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint8x16_t *v45;
  int16x8_t *v46;
  uint64_t v47;
  uint64_t k;
  uint8x16_t v49;
  uint8x16_t v50;
  uint8x16_t v51;
  uint8x16_t v52;
  uint8x16_t v53;
  uint8x16_t v54;
  uint8x16_t v55;
  uint8x16_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  uint64_t m;
  uint8x16_t v64;
  uint64_t v65;
  __int16 v66;
  __int16 v67;

  if (a2)
  {
    v12 = a2;
    a9.i32[0] = vcvts_n_u32_f32(*(float *)a9.i32, 8uLL);
    v13.i64[0] = 0x100010001000100;
    v13.i64[1] = 0x100010001000100;
    a9.i16[1] = vsubq_s16(v13, a9).u16[0];
    v14 = *a3 - a1;
    v15 = *a5 - a1;
    v16 = *a7 - a1;
    v17 = *(_OWORD **)a4;
    v18 = *(_OWORD **)a6;
    v19 = *(int8x16_t **)a8;
    do
    {
      for (i = a1 >> 6; i; v19 += 4)
      {
        v21 = *(uint8x16_t *)v17;
        v22 = *((uint8x16_t *)v17 + 1);
        v23 = *((uint8x16_t *)v17 + 2);
        v24 = *((uint8x16_t *)v17 + 3);
        v17 += 4;
        v25 = *(uint8x16_t *)v18;
        v26 = *((uint8x16_t *)v18 + 1);
        v27 = *((uint8x16_t *)v18 + 2);
        v28 = *((uint8x16_t *)v18 + 3);
        v18 += 4;
        v29 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v21.i8);
        v30 = (int16x8_t)vmovl_high_u8(v21);
        v31 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v22.i8);
        v32 = (int16x8_t)vmovl_high_u8(v22);
        v33 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v25.i8);
        v34 = (int16x8_t)vmovl_high_u8(v25);
        v10 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v27.i8);
        v11 = vmlaq_lane_s16(vmulq_n_s16(v29, a9.i16[0]), v33, *(int16x4_t *)a9.i8, 1);
        v9 = (int16x8_t)vshrn_high_n_s16(vshrn_n_s16(v11, 8uLL), vmlaq_lane_s16(vmulq_n_s16(v30, a9.i16[0]), v34, *(int16x4_t *)a9.i8, 1), 8uLL);
        --i;
        *v19 = (int8x16_t)v9;
        v19[1] = vshrn_high_n_s16(vshrn_n_s16(vmlaq_lane_s16(vmulq_n_s16(v31, a9.i16[0]), (int16x8_t)vmovl_u8(*(uint8x8_t *)v26.i8), *(int16x4_t *)a9.i8, 1), 8uLL), vmlaq_lane_s16(vmulq_n_s16(v32, a9.i16[0]), (int16x8_t)vmovl_high_u8(v26), *(int16x4_t *)a9.i8, 1), 8uLL);
        v19[2] = vshrn_high_n_s16(vshrn_n_s16(vmlaq_lane_s16(vmulq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v23.i8), a9.i16[0]), v10, *(int16x4_t *)a9.i8, 1), 8uLL), vmlaq_lane_s16(vmulq_n_s16((int16x8_t)vmovl_high_u8(v23), a9.i16[0]), (int16x8_t)vmovl_high_u8(v27), *(int16x4_t *)a9.i8, 1), 8uLL);
        v19[3] = vshrn_high_n_s16(vshrn_n_s16(vmlaq_lane_s16(vmulq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v24.i8), a9.i16[0]), (int16x8_t)vmovl_u8(*(uint8x8_t *)v28.i8), *(int16x4_t *)a9.i8, 1), 8uLL), vmlaq_lane_s16(vmulq_n_s16((int16x8_t)vmovl_high_u8(v24), a9.i16[0]), (int16x8_t)vmovl_high_u8(v28), *(int16x4_t *)a9.i8, 1), 8uLL);
      }
      for (j = (a1 & 0x3F) >> 3; j; v19 = (int8x16_t *)((char *)v19 + 8))
      {
        v36 = *(uint8x8_t *)v17;
        v17 = (_OWORD *)((char *)v17 + 8);
        v10.i64[0] = *(_QWORD *)v18;
        v18 = (_OWORD *)((char *)v18 + 8);
        v11 = vmlaq_lane_s16(vmulq_n_s16((int16x8_t)vmovl_u8(v36), a9.i16[0]), (int16x8_t)vmovl_u8(*(uint8x8_t *)v10.i8), *(int16x4_t *)a9.i8, 1);
        *(int8x8_t *)v9.i8 = vshrn_n_s16(v11, 8uLL);
        --j;
        v19->i64[0] = v9.i64[0];
      }
      v37 = a1 & 7;
      if ((a1 & 7) != 0)
      {
        do
        {
          v38 = *(_BYTE *)v17;
          v17 = (_OWORD *)((char *)v17 + 1);
          v11.i8[0] = v38;
          v39 = *(_BYTE *)v18;
          v18 = (_OWORD *)((char *)v18 + 1);
          v9.i8[0] = v39;
          v11 = vmlaq_lane_s16(vmulq_n_s16(v11, a9.i16[0]), v9, *(int16x4_t *)a9.i8, 1);
          --v37;
          v19->i8[0] = v11.i8[1];
          v19 = (int8x16_t *)((char *)v19 + 1);
        }
        while (v37);
      }
      v17 = (_OWORD *)((char *)v17 + v14);
      v18 = (_OWORD *)((char *)v18 + v15);
      v19 = (int8x16_t *)((char *)v19 + v16);
      --v12;
    }
    while (v12);
    v40 = a2 >> 1;
    v41 = a1 >> 1;
    v42 = a3[1] - 2 * v41;
    v43 = a5[1] - 2 * v41;
    v44 = a7[1] - 2 * v41;
    v45 = *(uint8x16_t **)(a4 + 8);
    v46 = *(int16x8_t **)(a6 + 8);
    v47 = *(_QWORD *)(a8 + 8);
    do
    {
      for (k = v41 >> 5; k; v47 += 64)
      {
        v49 = *v45;
        v50 = v45[1];
        v51 = v45[2];
        v52 = v45[3];
        v45 += 4;
        v53 = *(uint8x16_t *)v46;
        v54 = (uint8x16_t)v46[1];
        v55 = (uint8x16_t)v46[2];
        v56 = (uint8x16_t)v46[3];
        v46 += 4;
        v57 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v49.i8);
        v58 = (int16x8_t)vmovl_high_u8(v49);
        v59 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v50.i8);
        v60 = (int16x8_t)vmovl_high_u8(v50);
        v61 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v53.i8);
        v62 = (int16x8_t)vmovl_high_u8(v53);
        v10 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v55.i8);
        v9 = (int16x8_t)vshrn_high_n_s16(vshrn_n_s16(vmlaq_lane_s16(vmulq_n_s16(v57, a9.i16[0]), v61, *(int16x4_t *)a9.i8, 1), 8uLL), vmlaq_lane_s16(vmulq_n_s16(v58, a9.i16[0]), v62, *(int16x4_t *)a9.i8, 1), 8uLL);
        --k;
        *(int16x8_t *)v47 = v9;
        *(int8x16_t *)(v47 + 16) = vshrn_high_n_s16(vshrn_n_s16(vmlaq_lane_s16(vmulq_n_s16(v59, a9.i16[0]), (int16x8_t)vmovl_u8(*(uint8x8_t *)v54.i8), *(int16x4_t *)a9.i8, 1), 8uLL), vmlaq_lane_s16(vmulq_n_s16(v60, a9.i16[0]), (int16x8_t)vmovl_high_u8(v54), *(int16x4_t *)a9.i8, 1), 8uLL);
        *(int8x16_t *)(v47 + 32) = vshrn_high_n_s16(vshrn_n_s16(vmlaq_lane_s16(vmulq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v51.i8), a9.i16[0]), v10, *(int16x4_t *)a9.i8, 1), 8uLL), vmlaq_lane_s16(vmulq_n_s16((int16x8_t)vmovl_high_u8(v51), a9.i16[0]), (int16x8_t)vmovl_high_u8(v55), *(int16x4_t *)a9.i8, 1), 8uLL);
        *(int8x16_t *)(v47 + 48) = vshrn_high_n_s16(vshrn_n_s16(vmlaq_lane_s16(vmulq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v52.i8), a9.i16[0]), (int16x8_t)vmovl_u8(*(uint8x8_t *)v56.i8), *(int16x4_t *)a9.i8, 1), 8uLL), vmlaq_lane_s16(vmulq_n_s16((int16x8_t)vmovl_high_u8(v52), a9.i16[0]), (int16x8_t)vmovl_high_u8(v56), *(int16x4_t *)a9.i8, 1), 8uLL);
      }
      for (m = (v41 & 0x1F) >> 3; m; v47 += 16)
      {
        v64 = *v45++;
        v10 = *v46++;
        v9 = (int16x8_t)vshrn_high_n_s16(vshrn_n_s16(vmlaq_lane_s16(vmulq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v64.i8), a9.i16[0]), (int16x8_t)vmovl_u8(*(uint8x8_t *)v10.i8), *(int16x4_t *)a9.i8, 1), 8uLL), vmlaq_lane_s16(vmulq_n_s16((int16x8_t)vmovl_high_u8(v64), a9.i16[0]), (int16x8_t)vmovl_high_u8((uint8x16_t)v10), *(int16x4_t *)a9.i8, 1), 8uLL);
        --m;
        *(int16x8_t *)v47 = v9;
      }
      v65 = v41 & 7;
      if ((v41 & 7) != 0)
      {
        do
        {
          v66 = v45->i16[0];
          v45 = (uint8x16_t *)((char *)v45 + 2);
          v9.i16[0] = v66;
          v67 = v46->i16[0];
          v46 = (int16x8_t *)((char *)v46 + 2);
          v10.i16[0] = v67;
          *(int8x8_t *)v9.i8 = vshrn_n_s16(vmlaq_lane_s16(vmulq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v9.i8), a9.i16[0]), (int16x8_t)vmovl_u8(*(uint8x8_t *)v10.i8), *(int16x4_t *)a9.i8, 1), 8uLL);
          --v65;
          *(_WORD *)v47 = v9.i16[0];
          v47 += 2;
        }
        while (v65);
      }
      v45 = (uint8x16_t *)((char *)v45 + v42);
      v46 = (int16x8_t *)((char *)v46 + v43);
      v47 += v44;
      --v40;
    }
    while (v40);
  }
  return 0;
}

uint64_t bvc_SimpleMixingOpaque_420v_420v_420v_arm(uint64_t a1, uint64_t a2, _QWORD *a3, __int128 **a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  uint64_t i;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t j;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  _OWORD *v29;
  uint64_t k;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t m;
  __int128 v36;
  uint64_t v37;
  __int16 v38;

  if (a2)
  {
    v10 = a2;
    v11 = *a3 - a1;
    v12 = *a7 - a1;
    v13 = *a4;
    v14 = *(_OWORD **)a8;
    do
    {
      for (i = a1 >> 6; i; v14 += 4)
      {
        v16 = *v13;
        v17 = v13[1];
        v18 = v13[2];
        v19 = v13[3];
        v13 += 4;
        --i;
        *v14 = v16;
        v14[1] = v17;
        v14[2] = v18;
        v14[3] = v19;
      }
      for (j = (a1 & 0x3F) >> 3; j; v14 = (_OWORD *)((char *)v14 + 8))
      {
        v21 = *(_QWORD *)v13;
        v13 = (__int128 *)((char *)v13 + 8);
        --j;
        *(_QWORD *)v14 = v21;
      }
      v22 = a1 & 7;
      if ((a1 & 7) != 0)
      {
        do
        {
          v23 = *(_BYTE *)v13;
          v13 = (__int128 *)((char *)v13 + 1);
          --v22;
          *(_BYTE *)v14 = v23;
          v14 = (_OWORD *)((char *)v14 + 1);
        }
        while (v22);
      }
      v13 = (__int128 *)((char *)v13 + v11);
      v9 += v8;
      v14 = (_OWORD *)((char *)v14 + v12);
      --v10;
    }
    while (v10);
    v24 = a2 >> 1;
    v25 = a1 >> 1;
    v26 = a3[1] - 2 * v25;
    v27 = a7[1] - 2 * v25;
    v28 = a4[1];
    v29 = *(_OWORD **)(a8 + 8);
    do
    {
      for (k = v25 >> 5; k; v29 += 4)
      {
        v31 = *v28;
        v32 = v28[1];
        v33 = v28[2];
        v34 = v28[3];
        v28 += 4;
        --k;
        *v29 = v31;
        v29[1] = v32;
        v29[2] = v33;
        v29[3] = v34;
      }
      for (m = (v25 & 0x1F) >> 3; m; ++v29)
      {
        v36 = *v28++;
        --m;
        *v29 = v36;
      }
      v37 = v25 & 7;
      if ((v25 & 7) != 0)
      {
        do
        {
          v38 = *(_WORD *)v28;
          v28 = (__int128 *)((char *)v28 + 2);
          --v37;
          *(_WORD *)v29 = v38;
          v29 = (_OWORD *)((char *)v29 + 2);
        }
        while (v37);
      }
      v28 = (__int128 *)((char *)v28 + v26);
      v9 += v8;
      v29 = (_OWORD *)((char *)v29 + v27);
      --v24;
    }
    while (v24);
  }
  return 0;
}

uint64_t bvc_FullCompositionYInner_420v_420v_arm(uint64_t a1, unsigned __int16 a2, uint64_t *a3, uint64_t a4, uint64_t a5, signed __int32 a6, int *a7, int *a8, int32x4_t a9, int a10, int a11, int *a12, int *a13, unsigned int a14, unsigned int a15, int a16, int a17)
{
  int16x4_t v17;
  int16x8_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  uint64_t v28;
  uint8x8_t *v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int16x8_t v42;
  int16x8_t v43;
  uint32x4_t v44;
  uint32x4_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  __int8 *v49;

  if (a1)
  {
    a9.i16[0] = a2;
    a9.i16[1] = 256 - a2;
    a9.i32[1] = a6;
    a9.i32[2] = 4;
    v19 = *a3;
    v20 = *a7;
    v21 = *a8;
    v22 = *a12;
    v23 = *a13;
    v24.i32[0] = 0;
    v24.i32[1] = a14;
    v25 = vshlq_n_s32(vdupq_n_s32(a14), 2uLL);
    v26.i32[0] = 0;
    v26.i32[1] = a15;
    v27 = vshlq_n_s32(vdupq_n_s32(a15), 2uLL);
    do
    {
      v28 = (v20 >> 16);
      v29 = (uint8x8_t *)(v19 + v28);
      v30 = v22 + a14 * v28;
      v31 = v23 + a15 * v28;
      LODWORD(v28) = (v21 >> 16) - v28;
      v32 = v28 & 0xF;
      v33 = (int)v28 >> 4;
      v34 = vdupq_n_s32(v31);
      v35 = vdupq_n_s32(v30);
      if (v33)
      {
        v26.i32[3] = 3 * a15;
        v26.i32[2] = 2 * a15;
        v34 = vaddq_s32(v34, v26);
        v36 = vaddq_s32(v34, v27);
        v37 = vaddq_s32(v36, v27);
        v38 = vaddq_s32(v37, v27);
        v24.i32[3] = 3 * a14;
        v24.i32[2] = 2 * a14;
        v35 = vaddq_s32(v35, v24);
        v39 = vaddq_s32(v35, v25);
        v40 = vaddq_s32(v39, v25);
        v41 = vaddq_s32(v40, v25);
        do
        {
          v42 = (int16x8_t)vsraq_n_u32((uint32x4_t)vmulq_lane_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v34, 0x10uLL), *(int32x2_t *)a9.i8, 1), (uint32x4_t)v35, 0x10uLL);
          v43 = (int16x8_t)vsraq_n_u32((uint32x4_t)vmulq_lane_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v36, 0x10uLL), *(int32x2_t *)a9.i8, 1), (uint32x4_t)v39, 0x10uLL);
          v44 = vsraq_n_u32((uint32x4_t)vmulq_lane_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v37, 0x10uLL), *(int32x2_t *)a9.i8, 1), (uint32x4_t)v40, 0x10uLL);
          v45 = vsraq_n_u32((uint32x4_t)vmulq_lane_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v38, 0x10uLL), *(int32x2_t *)a9.i8, 1), (uint32x4_t)v41, 0x10uLL);
          v42.i16[0] = *(unsigned __int8 *)(v42.u32[0] + a5);
          v42.i16[1] = *(unsigned __int8 *)(v42.u32[1] + a5);
          v42.i16[2] = *(unsigned __int8 *)(v42.u32[2] + a5);
          v42.i16[3] = *(unsigned __int8 *)(v42.u32[3] + a5);
          v42.i16[4] = *(unsigned __int8 *)(v43.u32[0] + a5);
          v42.i16[5] = *(unsigned __int8 *)(v43.u32[1] + a5);
          v42.i16[6] = *(unsigned __int8 *)(v43.u32[2] + a5);
          v42.i16[7] = *(unsigned __int8 *)(v43.u32[3] + a5);
          v43.i16[0] = *(unsigned __int8 *)(v44.u32[0] + a5);
          v43.i16[1] = *(unsigned __int8 *)(v44.u32[1] + a5);
          v43.i16[2] = *(unsigned __int8 *)(v44.u32[2] + a5);
          v43.i16[3] = *(unsigned __int8 *)(v44.u32[3] + a5);
          v43.i16[4] = *(unsigned __int8 *)(v45.u32[0] + a5);
          v43.i16[5] = *(unsigned __int8 *)(v45.u32[1] + a5);
          v43.i16[6] = *(unsigned __int8 *)(v45.u32[2] + a5);
          v43.i16[7] = *(unsigned __int8 *)(v45.u32[3] + a5);
          v35 = vmlaq_laneq_s32(v35, v25, a9, 2);
          v39 = vmlaq_laneq_s32(v39, v25, a9, 2);
          v40 = vmlaq_laneq_s32(v40, v25, a9, 2);
          v41 = vmlaq_laneq_s32(v41, v25, a9, 2);
          v34 = vmlaq_laneq_s32(v34, v27, a9, 2);
          v36 = vmlaq_laneq_s32(v36, v27, a9, 2);
          v37 = vmlaq_laneq_s32(v37, v27, a9, 2);
          v38 = vmlaq_laneq_s32(v38, v27, a9, 2);
          v18 = (int16x8_t)vmovl_u8(*v29);
          v17 = (int16x4_t)vshrn_n_s16(vmlaq_lane_s16(vmulq_n_s16(v42, a9.i16[0]), v18, *(int16x4_t *)a9.i8, 1), 8uLL);
          *(int8x8_t *)v43.i8 = vshrn_n_s16(vmlaq_lane_s16(vmulq_n_s16(v43, a9.i16[0]), (int16x8_t)vmovl_high_u8(*(uint8x16_t *)v29->i8), *(int16x4_t *)a9.i8, 1), 8uLL);
          --v33;
          *v29 = (uint8x8_t)v17;
          v29[1] = *(uint8x8_t *)v43.i8;
          v29 += 2;
        }
        while (v33);
      }
      if (v32)
      {
        v46 = v35.u32[0];
        v47 = v34.i32[0];
        do
        {
          v48 = a5 + (v46 >> 16);
          v46 = v46 + a14;
          v18.i8[0] = v29->i8[0];
          v49 = (__int8 *)(v48 + (v47 >> 16) * (uint64_t)a6);
          v47 += a15;
          v17.i8[0] = *v49;
          --v32;
          v17 = vmla_lane_s16(vmul_n_s16(v17, a9.i16[0]), *(int16x4_t *)v18.i8, *(int16x4_t *)a9.i8, 1);
          v29->i8[0] = v17.i8[1];
          v29 = (uint8x8_t *)((char *)v29 + 1);
        }
        while (v32);
      }
      --a1;
      v19 += a4;
      v20 += a10;
      v21 += a11;
      v22 += a16;
      v23 += a17;
    }
    while (a1);
    *a3 = v19;
    *a7 = v20;
    *a8 = v21;
    *a12 = v22;
    *a13 = v23;
  }
  return 0;
}

uint64_t bvc_FullCompositionCbCrInner_420v_420v_arm(uint64_t a1, unsigned __int16 a2, uint64_t *a3, uint64_t a4, uint64_t a5, signed __int32 a6, int *a7, int *a8, int32x4_t a9, int a10, int a11, int *a12, int *a13, unsigned int a14, unsigned int a15, int a16, int a17)
{
  uint8x8_t v17;
  int16x8_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  uint64_t v28;
  uint8x8_t *v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  __int32 v40;
  int v41;
  uint64_t v42;
  __int16 *v43;
  int16x8_t v44;

  if (a1)
  {
    a9.i16[0] = a2;
    a9.i16[1] = 256 - a2;
    a9.i32[1] = a6;
    a9.i32[2] = 2;
    v19 = *a3;
    v20 = *a7;
    v21 = *a8;
    v22 = *a12;
    v23 = *a13;
    v24.i32[0] = 0;
    v24.i32[1] = a14;
    v25 = vshlq_n_s32(vdupq_n_s32(a14), 2uLL);
    v26.i32[0] = 0;
    v26.i32[1] = a15;
    v27 = vshlq_n_s32(vdupq_n_s32(a15), 2uLL);
    do
    {
      v28 = (v20 >> 16);
      v29 = (uint8x8_t *)(v19 + 2 * v28);
      v30 = v22 + a14 * v28;
      v31 = v23 + a15 * v28;
      LODWORD(v28) = (v21 >> 16) - v28;
      v32 = v28 & 7;
      v33 = (int)v28 >> 3;
      v34 = vdupq_n_s32(v31);
      v35 = vdupq_n_s32(v30);
      if (v33)
      {
        v26.i32[3] = 3 * a15;
        v26.i32[2] = 2 * a15;
        v34 = vaddq_s32(v34, v26);
        v36 = vaddq_s32(v34, v27);
        v24.i32[3] = 3 * a14;
        v24.i32[2] = 2 * a14;
        v35 = vaddq_s32(v35, v24);
        v37 = vaddq_s32(v35, v25);
        do
        {
          v38 = vmlaq_lane_s32(vshlq_n_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v35, 0x10uLL), 1uLL), (int32x4_t)vshrq_n_u32((uint32x4_t)v34, 0x10uLL), *(int32x2_t *)a9.i8, 1);
          v39 = vmlaq_lane_s32(vshlq_n_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v37, 0x10uLL), 1uLL), (int32x4_t)vshrq_n_u32((uint32x4_t)v36, 0x10uLL), *(int32x2_t *)a9.i8, 1);
          v38.i16[0] = *(_WORD *)(v38.u32[0] + a5);
          v38.i16[1] = *(_WORD *)(v38.u32[1] + a5);
          v38.i16[2] = *(_WORD *)(v38.u32[2] + a5);
          v38.i16[3] = *(_WORD *)(v38.u32[3] + a5);
          v39.i16[0] = *(_WORD *)(v39.u32[0] + a5);
          v39.i16[1] = *(_WORD *)(v39.u32[1] + a5);
          v39.i16[2] = *(_WORD *)(v39.u32[2] + a5);
          v39.i16[3] = *(_WORD *)(v39.u32[3] + a5);
          v35 = vmlaq_laneq_s32(v35, v25, a9, 2);
          v37 = vmlaq_laneq_s32(v37, v25, a9, 2);
          v34 = vmlaq_laneq_s32(v34, v27, a9, 2);
          v36 = vmlaq_laneq_s32(v36, v27, a9, 2);
          v18 = (int16x8_t)vmovl_u8(*v29);
          v17 = (uint8x8_t)vshrn_n_s16(vmlaq_lane_s16(vmulq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v38.i8), a9.i16[0]), v18, *(int16x4_t *)a9.i8, 1), 8uLL);
          *(int8x8_t *)v39.i8 = vshrn_n_s16(vmlaq_lane_s16(vmulq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v39.i8), a9.i16[0]), (int16x8_t)vmovl_high_u8(*(uint8x16_t *)v29->i8), *(int16x4_t *)a9.i8, 1), 8uLL);
          --v33;
          *v29 = v17;
          v29[1] = *(uint8x8_t *)v39.i8;
          v29 += 2;
        }
        while (v33);
      }
      if (v32)
      {
        v40 = v35.i32[0];
        v41 = v34.i32[0];
        do
        {
          v42 = v40 & 0xFFFF0000;
          v40 += a14;
          v18.i16[0] = v29->i16[0];
          v18.i64[0] = vmovl_u8(*(uint8x8_t *)v18.i8).u64[0];
          v43 = (__int16 *)(a5 + (v42 >> 15) + (v41 >> 16) * (uint64_t)a6);
          v41 += a15;
          v17.i16[0] = *v43;
          --v32;
          v44 = (int16x8_t)vmovl_u8(v17);
          *(int16x4_t *)v44.i8 = vmla_lane_s16(vmul_n_s16(*(int16x4_t *)v44.i8, a9.i16[0]), *(int16x4_t *)v18.i8, *(int16x4_t *)a9.i8, 1);
          v17 = (uint8x8_t)vshrn_n_s16(v44, 8uLL);
          v29->i16[0] = v17.i16[0];
          v29 = (uint8x8_t *)((char *)v29 + 2);
        }
        while (v32);
      }
      --a1;
      v19 += a4;
      v20 += a10;
      v21 += a11;
      v22 += a16;
      v23 += a17;
    }
    while (a1);
    *a3 = v19;
    *a7 = v20;
    *a8 = v21;
    *a12 = v22;
    *a13 = v23;
  }
  return 0;
}

uint64_t bvc_FullCompositionOpaqueYInner_420v_420v_arm(uint64_t a1, unsigned __int16 a2, uint64_t *a3, uint64_t a4, uint64_t a5, signed __int32 a6, int *a7, int *a8, int32x4_t a9, int a10, int a11, int *a12, int *a13, unsigned int a14, unsigned int a15, int a16, int a17)
{
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  uint64_t v26;
  int8x8_t *v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int16x8_t v40;
  int16x8_t v41;
  uint32x4_t v42;
  uint32x4_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  __int8 *v47;

  if (a1)
  {
    a9.i16[0] = a2;
    a9.i16[1] = 256 - a2;
    a9.i32[1] = a6;
    a9.i32[2] = 4;
    v17 = *a3;
    v18 = *a7;
    v19 = *a8;
    v20 = *a12;
    v21 = *a13;
    v22.i32[0] = 0;
    v22.i32[1] = a14;
    v23 = vshlq_n_s32(vdupq_n_s32(a14), 2uLL);
    v24.i32[0] = 0;
    v24.i32[1] = a15;
    v25 = vshlq_n_s32(vdupq_n_s32(a15), 2uLL);
    do
    {
      v26 = (v18 >> 16);
      v27 = (int8x8_t *)(v17 + v26);
      v28 = v20 + a14 * v26;
      v29 = v21 + a15 * v26;
      LODWORD(v26) = (v19 >> 16) - v26;
      v30 = v26 & 0xF;
      v31 = (int)v26 >> 4;
      v32 = vdupq_n_s32(v29);
      v33 = vdupq_n_s32(v28);
      if (v31)
      {
        v24.i32[3] = 3 * a15;
        v24.i32[2] = 2 * a15;
        v32 = vaddq_s32(v32, v24);
        v34 = vaddq_s32(v32, v25);
        v35 = vaddq_s32(v34, v25);
        v36 = vaddq_s32(v35, v25);
        v22.i32[3] = 3 * a14;
        v22.i32[2] = 2 * a14;
        v33 = vaddq_s32(v33, v22);
        v37 = vaddq_s32(v33, v23);
        v38 = vaddq_s32(v37, v23);
        v39 = vaddq_s32(v38, v23);
        do
        {
          v40 = (int16x8_t)vsraq_n_u32((uint32x4_t)vmulq_lane_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v32, 0x10uLL), *(int32x2_t *)a9.i8, 1), (uint32x4_t)v33, 0x10uLL);
          v41 = (int16x8_t)vsraq_n_u32((uint32x4_t)vmulq_lane_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v34, 0x10uLL), *(int32x2_t *)a9.i8, 1), (uint32x4_t)v37, 0x10uLL);
          v42 = vsraq_n_u32((uint32x4_t)vmulq_lane_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v35, 0x10uLL), *(int32x2_t *)a9.i8, 1), (uint32x4_t)v38, 0x10uLL);
          v43 = vsraq_n_u32((uint32x4_t)vmulq_lane_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v36, 0x10uLL), *(int32x2_t *)a9.i8, 1), (uint32x4_t)v39, 0x10uLL);
          v40.i16[0] = *(unsigned __int8 *)(v40.u32[0] + a5);
          v40.i16[1] = *(unsigned __int8 *)(v40.u32[1] + a5);
          v40.i16[2] = *(unsigned __int8 *)(v40.u32[2] + a5);
          v40.i16[3] = *(unsigned __int8 *)(v40.u32[3] + a5);
          v40.i16[4] = *(unsigned __int8 *)(v41.u32[0] + a5);
          v40.i16[5] = *(unsigned __int8 *)(v41.u32[1] + a5);
          v40.i16[6] = *(unsigned __int8 *)(v41.u32[2] + a5);
          v40.i16[7] = *(unsigned __int8 *)(v41.u32[3] + a5);
          v41.i16[0] = *(unsigned __int8 *)(v42.u32[0] + a5);
          v41.i16[1] = *(unsigned __int8 *)(v42.u32[1] + a5);
          v41.i16[2] = *(unsigned __int8 *)(v42.u32[2] + a5);
          v41.i16[3] = *(unsigned __int8 *)(v42.u32[3] + a5);
          v41.i16[4] = *(unsigned __int8 *)(v43.u32[0] + a5);
          v41.i16[5] = *(unsigned __int8 *)(v43.u32[1] + a5);
          v41.i16[6] = *(unsigned __int8 *)(v43.u32[2] + a5);
          v41.i16[7] = *(unsigned __int8 *)(v43.u32[3] + a5);
          v33 = vmlaq_laneq_s32(v33, v23, a9, 2);
          v37 = vmlaq_laneq_s32(v37, v23, a9, 2);
          v38 = vmlaq_laneq_s32(v38, v23, a9, 2);
          v39 = vmlaq_laneq_s32(v39, v23, a9, 2);
          v32 = vmlaq_laneq_s32(v32, v25, a9, 2);
          v34 = vmlaq_laneq_s32(v34, v25, a9, 2);
          v35 = vmlaq_laneq_s32(v35, v25, a9, 2);
          v36 = vmlaq_laneq_s32(v36, v25, a9, 2);
          --v31;
          *v27 = vmovn_s16(v40);
          v27[1] = vmovn_s16(v41);
          v27 += 2;
        }
        while (v31);
      }
      if (v30)
      {
        v44 = v33.u32[0];
        v45 = v32.i32[0];
        do
        {
          v46 = a5 + (v44 >> 16);
          v44 = v44 + a14;
          v47 = (__int8 *)(v46 + (v45 >> 16) * (uint64_t)a6);
          v45 += a15;
          --v30;
          v27->i8[0] = *v47;
          v27 = (int8x8_t *)((char *)v27 + 1);
        }
        while (v30);
      }
      --a1;
      v17 += a4;
      v18 += a10;
      v19 += a11;
      v20 += a16;
      v21 += a17;
    }
    while (a1);
    *a3 = v17;
    *a7 = v18;
    *a8 = v19;
    *a12 = v20;
    *a13 = v21;
  }
  return 0;
}

uint64_t bvc_FullCompositionOpaqueCbCrInner_420v_420v_arm(uint64_t a1, unsigned __int16 a2, uint64_t *a3, uint64_t a4, uint64_t a5, signed __int32 a6, int *a7, int *a8, int32x4_t a9, int a10, int a11, int *a12, int *a13, unsigned int a14, unsigned int a15, int a16, int a17)
{
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  uint64_t v26;
  _QWORD *v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  __int32 v38;
  int v39;
  uint64_t v40;
  _WORD *v41;

  if (a1)
  {
    a9.i16[0] = a2;
    a9.i16[1] = 256 - a2;
    a9.i32[1] = a6;
    a9.i32[2] = 2;
    v17 = *a3;
    v18 = *a7;
    v19 = *a8;
    v20 = *a12;
    v21 = *a13;
    v22.i32[0] = 0;
    v22.i32[1] = a14;
    v23 = vshlq_n_s32(vdupq_n_s32(a14), 2uLL);
    v24.i32[0] = 0;
    v24.i32[1] = a15;
    v25 = vshlq_n_s32(vdupq_n_s32(a15), 2uLL);
    do
    {
      v26 = (v18 >> 16);
      v27 = (_QWORD *)(v17 + 2 * v26);
      v28 = v20 + a14 * v26;
      v29 = v21 + a15 * v26;
      LODWORD(v26) = (v19 >> 16) - v26;
      v30 = v26 & 7;
      v31 = (int)v26 >> 3;
      v32 = vdupq_n_s32(v29);
      v33 = vdupq_n_s32(v28);
      if (v31)
      {
        v24.i32[3] = 3 * a15;
        v24.i32[2] = 2 * a15;
        v32 = vaddq_s32(v32, v24);
        v34 = vaddq_s32(v32, v25);
        v22.i32[3] = 3 * a14;
        v22.i32[2] = 2 * a14;
        v33 = vaddq_s32(v33, v22);
        v35 = vaddq_s32(v33, v23);
        do
        {
          v36 = vmlaq_lane_s32(vshlq_n_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v33, 0x10uLL), 1uLL), (int32x4_t)vshrq_n_u32((uint32x4_t)v32, 0x10uLL), *(int32x2_t *)a9.i8, 1);
          v37 = vmlaq_lane_s32(vshlq_n_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v35, 0x10uLL), 1uLL), (int32x4_t)vshrq_n_u32((uint32x4_t)v34, 0x10uLL), *(int32x2_t *)a9.i8, 1);
          v36.i16[0] = *(_WORD *)(v36.u32[0] + a5);
          v36.i16[1] = *(_WORD *)(v36.u32[1] + a5);
          v36.i16[2] = *(_WORD *)(v36.u32[2] + a5);
          v36.i16[3] = *(_WORD *)(v36.u32[3] + a5);
          v37.i16[0] = *(_WORD *)(v37.u32[0] + a5);
          v37.i16[1] = *(_WORD *)(v37.u32[1] + a5);
          v37.i16[2] = *(_WORD *)(v37.u32[2] + a5);
          v37.i16[3] = *(_WORD *)(v37.u32[3] + a5);
          v33 = vmlaq_laneq_s32(v33, v23, a9, 2);
          v35 = vmlaq_laneq_s32(v35, v23, a9, 2);
          v32 = vmlaq_laneq_s32(v32, v25, a9, 2);
          v34 = vmlaq_laneq_s32(v34, v25, a9, 2);
          --v31;
          *v27 = v36.i64[0];
          v27[1] = v37.i64[0];
          v27 += 2;
        }
        while (v31);
      }
      if (v30)
      {
        v38 = v33.i32[0];
        v39 = v32.i32[0];
        do
        {
          v40 = v38 & 0xFFFF0000;
          v38 += a14;
          v41 = (_WORD *)(a5 + (v40 >> 15) + (v39 >> 16) * (uint64_t)a6);
          v39 += a15;
          --v30;
          *(_WORD *)v27 = *v41;
          v27 = (_QWORD *)((char *)v27 + 2);
        }
        while (v30);
      }
      --a1;
      v17 += a4;
      v18 += a10;
      v19 += a11;
      v20 += a16;
      v21 += a17;
    }
    while (a1);
    *a3 = v17;
    *a7 = v18;
    *a8 = v19;
    *a12 = v20;
    *a13 = v21;
  }
  return 0;
}

uint64_t bvc_SimpleMixing_32BGRA_420v601_420v601_arm(uint64_t a1, uint64_t a2, _QWORD *a3, const char **a4, _QWORD *a5, uint8x16_t **a6, uint64_t *a7, int8x8_t **a8, float a9)
{
  int32x4_t v9;
  int32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  uint8x16_t *v16;
  const char *v17;
  uint8x16_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int8x8_t *v22;
  uint64_t v23;
  int8x8_t *v24;
  int8x8_t *v25;
  uint64_t v26;
  uint64_t v27;
  int16x8_t v28;
  uint64_t i;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  uint8x16_t v62;
  uint8x16_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  uint16x8_t v72;
  uint16x8_t v73;
  uint16x8_t v74;
  uint16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  uint64_t v87;
  int8x8_t v88;
  int8x8_t v89;
  int8x8_t v90;
  int8x8_t v91;
  int8x8_t v92;
  uint16x8_t v93;
  uint16x8_t v94;
  uint32x4_t v95;
  int16x4_t v96;
  int16x4_t v97;
  int16x4_t v98;
  int16x4_t v99;
  int16x8_t v100;
  int16x4_t v101;
  int16x4_t v102;
  int16x4_t v103;
  int16x4_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int8x16x4_t v108;
  int8x16x4_t v109;

  v11 = a2 >> 1;
  if (v11)
  {
    v12 = a1 >> 1;
    v28.i16[0] = vcvts_n_u32_f32(a9, 8uLL);
    v28.i16[1] = (v28.u16[0] << 8) / 0xFFu;
    v13 = *a4;
    v14 = &(*a4)[*a3];
    v15 = 2 * *a3 - 8 * v12;
    v16 = *a6;
    v17 = (const char *)a6[1];
    v18 = (uint8x16_t *)((char *)*a6 + *a5);
    v19 = 2 * *a5 - 2 * v12;
    v20 = a5[1] - 2 * v12;
    v21 = *a7;
    v22 = *a8;
    v23 = a7[1];
    v24 = a8[1];
    v25 = (int8x8_t *)((char *)v22 + *a7);
    v26 = 2 * v21 - 2 * v12;
    v27 = v23 - 2 * v12;
    v28.i32[1] = 1082132552;
    v28.i64[1] = 0xED060C93407C20DCLL;
    do
    {
      for (i = v12 >> 3; i; v24 += 2)
      {
        v108 = vld4q_s8(v13);
        v13 += 64;
        v109 = vld4q_s8(v14);
        v14 += 64;
        v30 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v108.val[0].i8);
        v31 = (int16x8_t)vmovl_high_u8((uint8x16_t)v108.val[0]);
        v32 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v108.val[1].i8);
        v33 = (int16x8_t)vmovl_high_u8((uint8x16_t)v108.val[1]);
        v34 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v109.val[0].i8);
        v35 = (int16x8_t)vmovl_high_u8((uint8x16_t)v109.val[0]);
        v36 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v109.val[1].i8);
        v37 = (int16x8_t)vmovl_high_u8((uint8x16_t)v109.val[1]);
        v38 = vmull_laneq_s16(*(int16x4_t *)v30.i8, v28, 6);
        v39 = vmull_high_laneq_s16(v30, v28, 6);
        v40 = vmull_laneq_s16(*(int16x4_t *)v31.i8, v28, 6);
        v41 = vmull_high_laneq_s16(v31, v28, 6);
        v42 = vmull_laneq_s16(*(int16x4_t *)v34.i8, v28, 6);
        v43 = vmull_high_laneq_s16(v34, v28, 6);
        v44 = vmull_laneq_s16(*(int16x4_t *)v35.i8, v28, 6);
        v45 = vmull_high_laneq_s16(v35, v28, 6);
        v46 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v108.val[2].i8);
        v47 = (int16x8_t)vmovl_high_u8((uint8x16_t)v108.val[2]);
        v48 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v109.val[2].i8);
        v49 = (int16x8_t)vmovl_high_u8((uint8x16_t)v109.val[2]);
        v50 = vmlal_laneq_s16(v38, *(int16x4_t *)v32.i8, v28, 5);
        v51 = vmlal_high_laneq_s16(v39, v32, v28, 5);
        v52 = vmlal_laneq_s16(v40, *(int16x4_t *)v33.i8, v28, 5);
        v53 = vmlal_high_laneq_s16(v41, v33, v28, 5);
        v54 = vmlal_laneq_s16(v42, *(int16x4_t *)v36.i8, v28, 5);
        v55 = vmlal_high_laneq_s16(v43, v36, v28, 5);
        v56 = vmlal_laneq_s16(v44, *(int16x4_t *)v37.i8, v28, 5);
        v57 = vmlal_high_laneq_s16(v45, v37, v28, 5);
        v58 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v108.val[3].i8);
        v59 = (int16x8_t)vmovl_high_u8((uint8x16_t)v108.val[3]);
        v60 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v109.val[3].i8);
        v61 = (int16x8_t)vmovl_high_u8((uint8x16_t)v109.val[3]);
        v62 = *v16++;
        v63 = *v18++;
        v64 = vmlal_laneq_s16(v50, *(int16x4_t *)v46.i8, v28, 4);
        v65 = vmlal_high_laneq_s16(v51, v46, v28, 4);
        v66 = vmlal_laneq_s16(v52, *(int16x4_t *)v47.i8, v28, 4);
        v67 = vmlal_high_laneq_s16(v53, v47, v28, 4);
        v68 = vmlal_laneq_s16(v54, *(int16x4_t *)v48.i8, v28, 4);
        v69 = vmlal_high_laneq_s16(v55, v48, v28, 4);
        v70 = vmlal_laneq_s16(v56, *(int16x4_t *)v49.i8, v28, 4);
        v71 = vmlal_high_laneq_s16(v57, v49, v28, 4);
        v72 = vmovl_u8(*(uint8x8_t *)v62.i8);
        v73 = vmovl_high_u8(v62);
        v74 = vmovl_u8(*(uint8x8_t *)v63.i8);
        v75 = vmovl_high_u8(v63);
        v76 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(v64, *(int16x4_t *)v58.i8, *(int16x4_t *)v28.i8, 2), 0xFuLL), vmlal_high_lane_s16(v65, v58, *(int16x4_t *)v28.i8, 2), 0xFuLL);
        v77 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(v66, *(int16x4_t *)v59.i8, *(int16x4_t *)v28.i8, 2), 0xFuLL), vmlal_high_lane_s16(v67, v59, *(int16x4_t *)v28.i8, 2), 0xFuLL);
        v78 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(v68, *(int16x4_t *)v60.i8, *(int16x4_t *)v28.i8, 2), 0xFuLL), vmlal_high_lane_s16(v69, v60, *(int16x4_t *)v28.i8, 2), 0xFuLL);
        v79 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(v70, *(int16x4_t *)v61.i8, *(int16x4_t *)v28.i8, 2), 0xFuLL), vmlal_high_lane_s16(v71, v61, *(int16x4_t *)v28.i8, 2), 0xFuLL);
        v64.i64[0] = 0x1000000010000;
        v64.i64[1] = 0x1000000010000;
        v65.i64[0] = 0x1000000010000;
        v65.i64[1] = 0x1000000010000;
        v66.i64[0] = 0x1000000010000;
        v66.i64[1] = 0x1000000010000;
        v67.i64[0] = 0x1000000010000;
        v67.i64[1] = 0x1000000010000;
        v68.i64[0] = 0x1000000010000;
        v68.i64[1] = 0x1000000010000;
        v69.i64[0] = 0x1000000010000;
        v69.i64[1] = 0x1000000010000;
        v70.i64[0] = 0x1000000010000;
        v70.i64[1] = 0x1000000010000;
        v71.i64[0] = 0x1000000010000;
        v71.i64[1] = 0x1000000010000;
        v80 = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32((int32x4_t)vmlsl_lane_u16((uint32x4_t)v64, *(uint16x4_t *)v58.i8, *(uint16x4_t *)v28.i8, 1), (int32x4_t)vmovl_u16(*(uint16x4_t *)v72.i8)), 8uLL), vmulq_s32((int32x4_t)vmlsl_high_lane_u16((uint32x4_t)v65, (uint16x8_t)v58, *(uint16x4_t *)v28.i8, 1), (int32x4_t)vmovl_high_u16(v72)), 8uLL);
        v81 = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32((int32x4_t)vmlsl_lane_u16((uint32x4_t)v66, *(uint16x4_t *)v59.i8, *(uint16x4_t *)v28.i8, 1), (int32x4_t)vmovl_u16(*(uint16x4_t *)v73.i8)), 8uLL), vmulq_s32((int32x4_t)vmlsl_high_lane_u16((uint32x4_t)v67, (uint16x8_t)v59, *(uint16x4_t *)v28.i8, 1), (int32x4_t)vmovl_high_u16(v73)), 8uLL);
        v82 = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32((int32x4_t)vmlsl_lane_u16((uint32x4_t)v70, *(uint16x4_t *)v61.i8, *(uint16x4_t *)v28.i8, 1), (int32x4_t)vmovl_u16(*(uint16x4_t *)v75.i8)), 8uLL), vmulq_s32((int32x4_t)vmlsl_high_lane_u16((uint32x4_t)v71, (uint16x8_t)v61, *(uint16x4_t *)v28.i8, 1), (int32x4_t)vmovl_high_u16(v75)), 8uLL);
        v83 = (int16x8_t)vpaddlq_u8((uint8x16_t)v109.val[0]);
        v84 = (int16x8_t)vpaddlq_u8((uint8x16_t)v109.val[1]);
        v109.val[0] = (int8x16_t)vld2_s8(v17);
        v17 += 16;
        *(int8x8_t *)v65.i8 = vaddhn_s16(v81, vmulq_n_s16(v77, v28.i16[0]));
        *(int8x8_t *)v67.i8 = vaddhn_s16(v82, vmulq_n_s16(v79, v28.i16[0]));
        v85 = (int16x8_t)vpaddlq_u8((uint8x16_t)v109.val[2]);
        v86 = (int16x8_t)vpaddlq_u8((uint8x16_t)v109.val[3]);
        *v22 = vaddhn_s16(v80, vmulq_n_s16(v76, v28.i16[0]));
        v22[1] = *(int8x8_t *)v65.i8;
        v22 += 2;
        *v25 = vaddhn_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32((int32x4_t)vmlsl_lane_u16((uint32x4_t)v68, *(uint16x4_t *)v60.i8, *(uint16x4_t *)v28.i8, 1), (int32x4_t)vmovl_u16(*(uint16x4_t *)v74.i8)), 8uLL), vmulq_s32((int32x4_t)vmlsl_high_lane_u16((uint32x4_t)v69, (uint16x8_t)v60, *(uint16x4_t *)v28.i8, 1), (int32x4_t)vmovl_high_u16(v74)), 8uLL), vmulq_n_s16(v78, v28.i16[0]));
        v25[1] = *(int8x8_t *)v67.i8;
        v25 += 2;
        v109.val[2] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v109.val[0].i8);
        v109.val[3] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v109.val[1].i8);
        v108.val[0] = (int8x16_t)vaddq_s16((int16x8_t)vpaddlq_u8((uint8x16_t)v108.val[0]), v83);
        v108.val[1] = (int8x16_t)vaddq_s16((int16x8_t)vpaddlq_u8((uint8x16_t)v108.val[1]), v84);
        v72.i64[0] = 0x1000000010000;
        v72.i64[1] = 0x1000000010000;
        v83.i64[0] = 0x1000000010000;
        v83.i64[1] = 0x1000000010000;
        v74.i64[0] = 0x1000000010000;
        v74.i64[1] = 0x1000000010000;
        v84.i64[0] = 0x1000000010000;
        v84.i64[1] = 0x1000000010000;
        v108.val[0] = (int8x16_t)vshrq_n_u16((uint16x8_t)v108.val[0], 2uLL);
        v108.val[1] = (int8x16_t)vshrq_n_u16((uint16x8_t)v108.val[1], 2uLL);
        v108.val[2] = (int8x16_t)vshrq_n_u16((uint16x8_t)vaddq_s16((int16x8_t)vpaddlq_u8((uint8x16_t)v108.val[2]), v85), 2uLL);
        v108.val[3] = (int8x16_t)vshrq_n_u16((uint16x8_t)vaddq_s16((int16x8_t)vpaddlq_u8((uint8x16_t)v108.val[3]), v86), 2uLL);
        v9 = (int32x4_t)vmlsl_high_lane_u16((uint32x4_t)v83, (uint16x8_t)v108.val[3], *(uint16x4_t *)v28.i8, 1);
        v10 = vmlal_lane_s16(vmlal_laneq_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v108.val[0].i8, (int16x4_t)0xF6D4D0F83838DAC4, 1), *(int16x4_t *)v108.val[1].i8, (int16x4_t)0xF6D4D0F83838DAC4, 0), *(int16x4_t *)v108.val[2].i8, v28, 7), *(int16x4_t *)v108.val[3].i8, *(int16x4_t *)v28.i8, 3);
        --i;
        *(int8x8_t *)v109.val[0].i8 = vaddhn_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v109.val[2].i8), (int32x4_t)vmlsl_lane_u16((uint32x4_t)v72, *(uint16x4_t *)v108.val[3].i8, *(uint16x4_t *)v28.i8, 1)), 8uLL), vmulq_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v109.val[2]), v9), 8uLL), vmulq_n_s16(vshrn_high_n_s32(vshrn_n_s32(v10, 0xFuLL), vmlal_high_lane_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmull_high_lane_s16(
                                                    (int16x8_t)v108.val[0],
                                                    (int16x4_t)0xF6D4D0F83838DAC4,
                                                    1),
                                                  (int16x8_t)v108.val[1],
                                                  (int16x4_t)0xF6D4D0F83838DAC4,
                                                  0),
                                                (int16x8_t)v108.val[2],
                                                v28,
                                                7),
                                              (int16x8_t)v108.val[3],
                                              *(int16x4_t *)v28.i8,
                                              3),
                                            0xFuLL),
                                          v28.i16[0]));
        *(int8x8_t *)v109.val[1].i8 = vaddhn_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v109.val[3].i8), (int32x4_t)vmlsl_lane_u16((uint32x4_t)v74, *(uint16x4_t *)v108.val[3].i8, *(uint16x4_t *)v28.i8, 1)), 8uLL), vmulq_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v109.val[3]), (int32x4_t)vmlsl_high_lane_u16((uint32x4_t)v84, (uint16x8_t)v108.val[3], *(uint16x4_t *)v28.i8, 1)), 8uLL), vmulq_n_s16(
                                          vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v108.val[0].i8, (int16x4_t)0xF6D4D0F83838DAC4, 3), *(int16x4_t *)v108.val[1].i8, (int16x4_t)0xF6D4D0F83838DAC4, 2), *(int16x4_t *)v108.val[2].i8, (int16x4_t)0xF6D4D0F83838DAC4, 1), *(int16x4_t *)v108.val[3].i8, *(int16x4_t *)v28.i8, 3), 0xFuLL), vmlal_high_lane_s16(
                                              vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16((int16x8_t)v108.val[0], (int16x4_t)0xF6D4D0F83838DAC4, 3), (int16x8_t)v108.val[1], (int16x4_t)0xF6D4D0F83838DAC4, 2), (int16x8_t)v108.val[2], (int16x4_t)0xF6D4D0F83838DAC4, 1), (int16x8_t)v108.val[3], *(int16x4_t *)v28.i8, 3), 0xFuLL), v28.i16[0]));
        *v24 = vzip1_s8(*(int8x8_t *)v109.val[0].i8, *(int8x8_t *)v109.val[1].i8);
        v24[1] = vzip2_s8(*(int8x8_t *)v109.val[0].i8, *(int8x8_t *)v109.val[1].i8);
      }
      v87 = v12 & 7;
      if ((v12 & 7) != 0)
      {
        do
        {
          v88 = *(int8x8_t *)v13;
          v13 += 8;
          v89 = v88;
          v90 = *(int8x8_t *)v14;
          v14 += 8;
          v91 = vuzp1_s8(v89, v90);
          v92 = vuzp2_s8(v89, v90);
          v93 = vmovl_u8((uint8x8_t)vuzp1_s8(v91, v92));
          v94 = vmovl_u8((uint8x8_t)vuzp2_s8(v91, v92));
          v90.i16[0] = v16->i16[0];
          v16 = (uint8x16_t *)((char *)v16 + 2);
          v92.i16[0] = v90.i16[0];
          v92.i16[1] = v18->i16[0];
          v18 = (uint8x16_t *)((char *)v18 + 2);
          v95.i64[0] = 0x1000000010000;
          v95.i64[1] = 0x1000000010000;
          v96 = vpadd_s16(*(int16x4_t *)v93.i8, *(int16x4_t *)v93.i8);
          v97 = vpadd_s16((int16x4_t)v93.u64[1], (int16x4_t)v93.u64[1]);
          v98 = vpadd_s16(*(int16x4_t *)v94.i8, *(int16x4_t *)v94.i8);
          v99 = vpadd_s16((int16x4_t)v94.u64[1], (int16x4_t)v94.u64[1]);
          v100 = (int16x8_t)vmlal_lane_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v93.i8, v28, 6), (int16x4_t)v93.u64[1], v28, 5), *(int16x4_t *)v94.i8, v28, 4), (int16x4_t)v94.u64[1], *(int16x4_t *)v28.i8, 2);
          v101 = (int16x4_t)vshr_n_u16((uint16x4_t)vpadd_s16(v96, v96), 2uLL);
          v102 = (int16x4_t)vshr_n_u16((uint16x4_t)vpadd_s16(v97, v97), 2uLL);
          v103 = (int16x4_t)vshr_n_u16((uint16x4_t)vpadd_s16(v98, v98), 2uLL);
          v104 = (int16x4_t)vshr_n_u16((uint16x4_t)vpadd_s16(v99, v99), 2uLL);
          v90.i16[0] = *(_WORD *)v17;
          v17 += 2;
          v9.i16[0] = v90.i16[0];
          v9.i64[0] = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v9.i8)).u64[0];
          *(int16x4_t *)v100.i8 = vadd_s16(vmul_n_s16(vshrn_n_s32((int32x4_t)v100, 0xFuLL), v28.i16[0]), vshrn_n_s32(vmulq_s32((int32x4_t)vmlsl_lane_u16(v95, (uint16x4_t)v94.u64[1], *(uint16x4_t *)v28.i8, 1), (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v92))), 8uLL));
          v100.i32[0] = vshrn_n_s16(v100, 8uLL).u32[0];
          v22->i16[0] = v100.i16[0];
          v22 = (int8x8_t *)((char *)v22 + 2);
          v25->i16[0] = v100.i16[1];
          v25 = (int8x8_t *)((char *)v25 + 2);
          v105 = (int16x8_t)vmlal_lane_s16(vmlal_laneq_s16(vmlal_lane_s16(vmull_lane_s16(v101, (int16x4_t)0xF6D4D0F83838DAC4, 1), v102, (int16x4_t)0xF6D4D0F83838DAC4, 0), v103, v28, 7), v104, *(int16x4_t *)v28.i8, 3);
          v106 = (int16x8_t)vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v101, (int16x4_t)0xF6D4D0F83838DAC4, 3), v102, (int16x4_t)0xF6D4D0F83838DAC4, 2), v103, (int16x4_t)0xF6D4D0F83838DAC4, 1), v104, *(int16x4_t *)v28.i8, 3);
          v10.i64[0] = 0x1000000010000;
          v105.i32[1] = v106.i32[0];
          v10 = (int32x4_t)vmlsl_lane_u16((uint32x4_t)v10, (uint16x4_t)v104, *(uint16x4_t *)v28.i8, 1);
          *(int16x4_t *)v105.i8 = vshrn_n_s32((int32x4_t)v105, 0xFuLL);
          *(int32x2_t *)v10.i8 = vmul_s32(*(int32x2_t *)v9.i8, *(int32x2_t *)v10.i8);
          *(int16x4_t *)v106.i8 = vadd_s16(vshrn_n_s32(v10, 8uLL), (int16x4_t)*(_OWORD *)&vmulq_n_s16(v105, v28.i16[0]));
          v24->i16[0] = vshrn_n_s16(v106, 8uLL).u16[0];
          v24 = (int8x8_t *)((char *)v24 + 2);
          --v87;
        }
        while (v87);
      }
      --v11;
      v22 = (int8x8_t *)((char *)v22 + v26);
      v25 = (int8x8_t *)((char *)v25 + v26);
      v24 = (int8x8_t *)((char *)v24 + v27);
      v13 += v15;
      v14 += v15;
      v16 = (uint8x16_t *)((char *)v16 + v19);
      v18 = (uint8x16_t *)((char *)v18 + v19);
      v17 += v20;
    }
    while (v11);
  }
  return 0;
}

