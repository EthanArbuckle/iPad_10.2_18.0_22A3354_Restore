uint64_t fvdp_shouldDropFrame(uint64_t a1)
{
  int v2;
  const void *v3;
  const __CFString *v4;
  CFTypeID v5;
  int v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(uint64_t);
  NSObject *v12;
  int v13;
  NSObject *v14;
  NSObject *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  int valuePtr;
  CFTypeRef propertyValueOut[17];

  propertyValueOut[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (!**(_QWORD **)(a1 + 56))
    return 0;
  v2 = *(_DWORD *)(a1 + 480);
  if (v2 != 2)
  {
    if (v2 == 1 && *(_BYTE *)(a1 + 217))
    {
      if (dword_1EE2A3148)
        goto LABEL_18;
      return 1;
    }
    goto LABEL_8;
  }
  if (*(_BYTE *)(a1 + 217))
  {
LABEL_8:
    if (*(int *)(a1 + 364) >= 1)
    {
      v3 = *(const void **)(a1 + 344);
      if (v3)
      {
        v4 = (const __CFString *)*MEMORY[0x1E0CED108];
        valuePtr = 0;
        propertyValueOut[0] = 0;
        VTSessionCopyProperty(v3, v4, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], propertyValueOut);
        if (propertyValueOut[0])
        {
          v5 = CFGetTypeID(propertyValueOut[0]);
          if (v5 == CFNumberGetTypeID())
            CFNumberGetValue((CFNumberRef)propertyValueOut[0], kCFNumberSInt32Type, &valuePtr);
          if (propertyValueOut[0])
            CFRelease(propertyValueOut[0]);
        }
        v6 = valuePtr;
        if (dword_1EE2A3148 >= 3)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (v6 >= *(_DWORD *)(a1 + 364))
        {
          if (dword_1EE2A3148)
          {
            v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (*(_BYTE *)(a1 + 744) || *(_BYTE *)(a1 + 745))
          {
            v18 = (unsigned int *)(a1 + 716);
            do
              v19 = __ldxr(v18);
            while (__stxr(v19 + 1, v18));
          }
          return 1;
        }
      }
    }
    v10 = *(_QWORD *)(a1 + 64);
    v11 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
    if (v11 && v11(v10))
    {
      if (dword_1EE2A3148)
      {
        v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (*(_BYTE *)(a1 + 744) || *(_BYTE *)(a1 + 745))
      {
        v16 = (unsigned int *)(a1 + 720);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      return 1;
    }
    v13 = *(_DWORD *)(a1 + 476);
    if (v13 >= 1)
    {
      if (dword_1EE2A3148)
      {
        v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v13 = *(_DWORD *)(a1 + 476);
      }
      *(_DWORD *)(a1 + 476) = v13 - 1;
      return 1;
    }
    return 0;
  }
  if (!dword_1EE2A3148)
    return 1;
LABEL_18:
  v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  v9 = 1;
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return v9;
}

uint64_t fvdp_sendFrameToEncoder(uint64_t a1, int a2)
{
  char v2;
  uint64_t v4;
  const __CFString *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  NSObject *v12;
  dispatch_time_t v13;
  uint64_t v14;
  __CVBuffer *v15;
  int64_t v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  const void *v26;
  int64_t v27;
  int v28;
  uint64_t SampleBufferWithPixelBuffer;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFDictionary *Mutable;
  const __CFString *v32;
  int v33;
  unsigned int v34;
  const __CFAllocator *v35;
  const void *v36;
  const void *v37;
  const void **v38;
  NSObject *v39;
  unsigned int v40;
  unsigned int v41;
  const __CFString *v42;
  OpaqueVTCompressionSession *v43;
  uint64_t v44;
  void (*v45)(uint64_t, const __CFString *, _QWORD, _QWORD);
  uint64_t v46;
  NSObject *v47;
  unsigned int v48;
  unsigned int v49;
  const __CFString *v50;
  CFMutableDictionaryRef v51;
  OpaqueVTCompressionSession *v52;
  __CVBuffer *v53;
  NSObject *v54;
  unsigned int v55;
  unsigned int v56;
  const __CFString *v57;
  NSObject *v59;
  NSObject *v60;
  unsigned int v61;
  unsigned int v62;
  const __CFString *v63;
  NSObject *v64;
  unsigned int v65;
  unsigned int v66;
  const __CFString *v67;
  NSObject *v68;
  CMTime presentationTimeStamp;
  CMAttachmentBearerRef target;
  os_log_type_t v71;
  os_log_type_t type[4];
  CFTypeRef cf;
  int v74;
  const __CFString *v75;
  __int16 v76;
  const char *v77;
  __int16 v78;
  int v79;
  __int16 v80;
  int v81;
  CMTime completeUntilPresentationTimeStamp;
  uint64_t v83;

  v2 = a2;
  v83 = *MEMORY[0x1E0C80C00];
  target = 0;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(const __CFString **)(a1 + 16);
  if (*(_BYTE *)(a1 + 744))
  {
    v6 = (unsigned int *)(a1 + 700);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  else
  {
    if (!*(_BYTE *)(a1 + 745))
      goto LABEL_11;
    v8 = (unsigned int *)(a1 + 700);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  if (a2)
  {
    v10 = (unsigned int *)(a1 + 708);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
LABEL_11:
  if (!*(_QWORD *)v4)
  {
    if (dword_1EE2A3148)
    {
      LODWORD(cf) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v43 = *(OpaqueVTCompressionSession **)(a1 + 344);
    if (v43)
    {
      completeUntilPresentationTimeStamp = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
      VTCompressionSessionCompleteFrames(v43, &completeUntilPresentationTimeStamp);
    }
    v44 = *(_QWORD *)(a1 + 64);
    v45 = *(void (**)(uint64_t, const __CFString *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 56);
    if (v45)
      v45(v44, CFSTR("clearScreen"), *MEMORY[0x1E0C9AE50], 0);
    goto LABEL_65;
  }
  if (!*(_QWORD *)(a1 + 344) && *(_DWORD *)(a1 + 320) != 1852796517)
  {
LABEL_65:
    v17 = 0;
    Mutable = 0;
    v46 = 0;
    goto LABEL_100;
  }
  *(_BYTE *)(a1 + 48) = 0;
  v12 = *(NSObject **)(a1 + 40);
  v13 = dispatch_time(0, *(_QWORD *)(a1 + 32));
  dispatch_source_set_timer(v12, v13, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
  v14 = *(_QWORD *)(a1 + 664);
  if (v14)
  {
    v15 = *(__CVBuffer **)v4;
    v16 = *(_QWORD *)(a1 + 432);
    cf = 0;
    if (v15)
    {
      if (fvdp_createSampleBufferWithPixelBuffer(v15, v16, (CFTypeRef *)(v14 + 16), (CMSampleBufferRef *)&cf))
      {
        v59 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        *(_DWORD *)type = 0;
        v71 = OS_LOG_TYPE_DEFAULT;
        v68 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      else
      {
        tapWriteSampleBuffer((uint64_t *)v14, (CMSampleBufferRef)cf);
      }
      if (cf)
        CFRelease(cf);
    }
  }
  v17 = malloc_type_malloc(0xA8uLL, 0x10E0040FEF2BE32uLL);
  v19 = *(_OWORD *)(v4 + 16);
  v18 = *(_OWORD *)(v4 + 32);
  *v17 = *(_OWORD *)v4;
  v17[1] = v19;
  v17[2] = v18;
  v20 = *(_OWORD *)(v4 + 96);
  v22 = *(_OWORD *)(v4 + 48);
  v21 = *(_OWORD *)(v4 + 64);
  v17[5] = *(_OWORD *)(v4 + 80);
  v17[6] = v20;
  v17[3] = v22;
  v17[4] = v21;
  v24 = *(_OWORD *)(v4 + 128);
  v23 = *(_OWORD *)(v4 + 144);
  v25 = *(_OWORD *)(v4 + 112);
  *((_QWORD *)v17 + 20) = *(_QWORD *)(v4 + 160);
  v17[8] = v24;
  v17[9] = v23;
  v17[7] = v25;
  if (*(_QWORD *)v17)
    CFRetain(*(CFTypeRef *)v17);
  v26 = (const void *)*((_QWORD *)v17 + 18);
  if (v26)
    CFRetain(v26);
  v27 = *(_QWORD *)(a1 + 432);
  *((_QWORD *)v17 + 19) = v27;
  *((_BYTE *)v17 + 164) = v2;
  v28 = *(_DWORD *)(a1 + 320);
  if (v28 != 1852796517)
  {
    Mutable = 0;
    v32 = *(const __CFString **)(a1 + 16);
    if (v28 > 1752589104)
    {
      if (v28 == 1752589105 || v28 == 1869117027)
        goto LABEL_47;
      v33 = 1836415073;
    }
    else
    {
      if (v28 == 1635148593 || v28 == 1718908515)
        goto LABEL_47;
      v33 = 1718908520;
    }
    if (v28 != v33)
    {
LABEL_84:
      fvdp_encoderControlApply(a1, 0);
      if (*(_BYTE *)(a1 + 752) || *(_BYTE *)(a1 + 753))
        *((_QWORD *)v17 + 15) = mach_absolute_time();
      if (*(_BYTE *)(a1 + 754) && *MEMORY[0x1E0CA1FC0] == 1)
        kdebug_trace();
      v52 = *(OpaqueVTCompressionSession **)(a1 + 344);
      v53 = *(__CVBuffer **)v4;
      CMTimeMake(&presentationTimeStamp, *(_QWORD *)(a1 + 432), 1000000000);
      completeUntilPresentationTimeStamp = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
      v46 = VTCompressionSessionEncodeFrame(v52, v53, &presentationTimeStamp, &completeUntilPresentationTimeStamp, Mutable, v17, 0);
      if ((_DWORD)v46)
      {
        LODWORD(cf) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v54 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v55 = cf;
        if (os_log_type_enabled(v54, type[0]))
          v56 = v55;
        else
          v56 = v55 & 0xFFFFFFFE;
        if (v56)
        {
          v57 = &stru_1E2FD85F8;
          if (v5)
            v57 = v5;
          v74 = 138412802;
          v75 = v57;
          v76 = 2080;
          v77 = "fvdp_sendFrameToEncoder";
          v78 = 1024;
          v79 = v46;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v17 = 0;
      goto LABEL_100;
    }
LABEL_47:
    Mutable = 0;
    v34 = *(_DWORD *)(a1 + 512);
    if (v34 <= 0x26 && ((1 << v34) & 0x6000100000) != 0)
    {
      v35 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      FigCFDictionarySetDouble();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      v36 = *(const void **)(a1 + 624);
      if (v36)
      {
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED4A0], v36);
        v37 = *(const void **)(a1 + 624);
        if (v37)
        {
          CFRelease(v37);
          *(_QWORD *)(a1 + 624) = 0;
        }
      }
      FigCFDictionarySetInt32();
      v38 = (const void **)MEMORY[0x1E0C9AE50];
      if (*(_BYTE *)(a1 + 603))
      {
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED5B8], (const void *)*MEMORY[0x1E0C9AE50]);
        if (dword_1EE2A3148)
        {
          LODWORD(cf) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v40 = cf;
          if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
            v41 = v40;
          else
            v41 = v40 & 0xFFFFFFFE;
          if (v41)
          {
            v42 = &stru_1E2FD85F8;
            if (v32)
              v42 = v32;
            v74 = 138412546;
            v75 = v42;
            v76 = 2080;
            v77 = "fvdp_encoderControlCreateFrameProperties";
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v38 = (const void **)MEMORY[0x1E0C9AE50];
        }
        *(_BYTE *)(a1 + 603) = 0;
      }
      else if (*(_BYTE *)(a1 + 604))
      {
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED5C8], (const void *)*MEMORY[0x1E0C9AE50]);
        if (dword_1EE2A3148)
        {
          LODWORD(cf) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          v47 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v48 = cf;
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
            v49 = v48;
          else
            v49 = v48 & 0xFFFFFFFE;
          if (v49)
          {
            v50 = &stru_1E2FD85F8;
            if (v32)
              v50 = v32;
            v74 = 138412546;
            v75 = v50;
            v76 = 2080;
            v77 = "fvdp_encoderControlCreateFrameProperties";
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v38 = (const void **)MEMORY[0x1E0C9AE50];
        }
        *(_BYTE *)(a1 + 604) = 0;
      }
      if (*((_BYTE *)v17 + 164))
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED620], *v38);
      if (*(_DWORD *)(a1 + 512) == 38)
      {
        v51 = CFDictionaryCreateMutable(v35, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED670], v51);
        if (v51)
          CFRelease(v51);
      }
    }
    goto LABEL_84;
  }
  if (*(_QWORD *)(a1 + 344))
  {
    LODWORD(cf) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v60 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v61 = cf;
    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
      v62 = v61;
    else
      v62 = v61 & 0xFFFFFFFE;
    if (v62)
    {
      v63 = &stru_1E2FD85F8;
      if (v5)
        v63 = v5;
      v74 = 138412802;
      v75 = v63;
      v76 = 2080;
      v77 = "fvdp_sendFrameToEncoder";
      v78 = 1024;
      v79 = 3691;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    Mutable = 0;
    v46 = 4294955226;
  }
  else
  {
    SampleBufferWithPixelBuffer = fvdp_createSampleBufferWithPixelBuffer(*(__CVBuffer **)v4, v27, (CFTypeRef *)(a1 + 352), (CMSampleBufferRef *)&target);
    if (!(_DWORD)SampleBufferWithPixelBuffer)
    {
      if (*(_DWORD *)(a1 + 320) == 1852796517 && *((_BYTE *)v17 + 164))
        CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E0CED620], (CFTypeRef)*MEMORY[0x1E0C9AE50], 1u);
      if (*(_BYTE *)(a1 + 752) || *(_BYTE *)(a1 + 753))
        *((_QWORD *)v17 + 15) = mach_absolute_time();
      if (*(_BYTE *)(a1 + 754) && *MEMORY[0x1E0CA1FC0] == 1)
        kdebug_trace();
      fvdp_sendEncodedFrame(a1, (char *)v17, 0, 0, (CMSampleBufferRef)target);
      goto LABEL_65;
    }
    v46 = SampleBufferWithPixelBuffer;
    LODWORD(cf) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v64 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v65 = cf;
    if (os_log_type_enabled(v64, type[0]))
      v66 = v65;
    else
      v66 = v65 & 0xFFFFFFFE;
    if (v66)
    {
      v67 = &stru_1E2FD85F8;
      v74 = 138413058;
      if (v5)
        v67 = v5;
      v75 = v67;
      v76 = 2080;
      v77 = "fvdp_sendFrameToEncoder";
      v78 = 1024;
      v79 = 3694;
      v80 = 1024;
      v81 = v46;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    Mutable = 0;
  }
LABEL_100:
  if (target)
    CFRelease(target);
  if (Mutable)
    CFRelease(Mutable);
  frameDataDestroy((const void **)v17);
  return v46;
}

uint64_t fvdp_createSampleBufferWithPixelBuffer(__CVBuffer *a1, int64_t value, CFTypeRef *a3, CMSampleBufferRef *a4)
{
  CFTypeRef v7;
  const __CFAllocator *v8;
  char v9;
  const opaqueCMFormatDescription *v10;
  CMVideoFormatDescriptionRef v11;
  uint64_t v12;
  const opaqueCMFormatDescription *v13;
  uint64_t v14;
  CMVideoFormatDescriptionRef v15;
  uint64_t v16;
  char v17;
  NSObject *v19;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v21;
  CMSampleTimingInfo sampleTiming;
  CMVideoFormatDescriptionRef formatDescriptionOut[23];

  formatDescriptionOut[22] = *(CMVideoFormatDescriptionRef *)MEMORY[0x1E0C80C00];
  formatDescriptionOut[0] = 0;
  memset(&sampleTiming, 0, sizeof(sampleTiming));
  if (a1 && a3 && a4)
  {
    CMTimeMake(&sampleTiming.presentationTimeStamp, value, 1000000000);
    sampleTiming.decodeTimeStamp = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    sampleTiming.duration = sampleTiming.decodeTimeStamp;
    v7 = *a3;
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v9 = 1;
    v10 = (const opaqueCMFormatDescription *)*a3;
    while (1)
    {
      if (v10)
      {
        v11 = 0;
      }
      else
      {
        v12 = CMVideoFormatDescriptionCreateForImageBuffer(v8, a1, formatDescriptionOut);
        if ((_DWORD)v12)
        {
          v16 = v12;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          goto LABEL_25;
        }
        v11 = formatDescriptionOut[0];
      }
      if (v11)
        v13 = v11;
      else
        v13 = v10;
      v14 = CMSampleBufferCreateReadyWithImageBuffer(v8, a1, v13, &sampleTiming, a4);
      v15 = formatDescriptionOut[0];
      if (!(_DWORD)v14)
      {
        if (!formatDescriptionOut[0])
          return 0;
        if (*a3)
        {
          CFRelease(*a3);
          v15 = formatDescriptionOut[0];
        }
        v16 = 0;
        *a3 = v15;
        return v16;
      }
      v16 = v14;
      if ((_DWORD)v14 != -12743 || formatDescriptionOut[0])
      {
        v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
LABEL_25:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_26;
      }
      v10 = 0;
      v17 = (v7 == 0) | ~v9;
      v9 = 0;
      if ((v17 & 1) != 0)
        return 0;
    }
  }
  v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  v16 = 4294955226;
LABEL_26:
  if (formatDescriptionOut[0])
    CFRelease(formatDescriptionOut[0]);
  return v16;
}

uint64_t writebackCacheCopyBuffer(_QWORD *a1, int a2, int a3, CVBufferRef *a4, double a5, double a6)
{
  BOOL v12;
  __CVBuffer *v13;
  __CVPixelBufferPool *v14;
  _BOOL8 v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (!a1)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
  MEMORY[0x19402EEEC](*a1);
  v12 = a5 == *((double *)a1 + 6) && a6 == *((double *)a1 + 7);
  if (v12 && *((_DWORD *)a1 + 20) == a2 && *((unsigned __int8 *)a1 + 84) == a3)
  {
    v13 = (__CVBuffer *)a1[4];
    if (v13)
    {
LABEL_12:
      v15 = v13 != 0;
      if (a4 && v13)
      {
        *a4 = v13;
        a1[4] = 0;
        v15 = 1;
      }
      goto LABEL_16;
    }
    v14 = (__CVPixelBufferPool *)a1[1];
    if (v14)
    {
      CVPixelBufferPoolCreatePixelBufferWithAuxAttributes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v14, (CFDictionaryRef)a1[2], (CVPixelBufferRef *)a1 + 4);
      cvPixelBufferSetColorAttachments((CVBufferRef)a1[4], (_QWORD *)a1[5]);
      v13 = (__CVBuffer *)a1[4];
      goto LABEL_12;
    }
  }
  v15 = 0;
LABEL_16:
  MEMORY[0x19402EF04](*a1);
  if (a4 && v15)
  {
    CVBufferSetAttachment(*a4, CFSTR("FVDWritebackBuffer"), (CFTypeRef)*MEMORY[0x1E0C9AE50], kCVAttachmentMode_ShouldNotPropagate);
    return 1;
  }
  return v15;
}

uint64_t __fvdp_copyWritebackPixelBuffer_block_invoke(uint64_t a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(*(_QWORD *)(a1 + 32) + 656);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 - 1, v1));
  return fvdp_ensureWritebackPixelBuffer(*(_QWORD *)(a1 + 32), *(_DWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 60), *(double *)(a1 + 40), *(float64_t *)(a1 + 48));
}

uint64_t fvdp_ensureWritebackPixelBuffer(uint64_t result, unsigned int a2, int a3, double a4, float64_t a5)
{
  uint64_t v9;
  const __CFString *v10;
  double *v11;
  _OWORD *v12;
  double v13;
  double v14;
  BOOL v15;
  double v16;
  double v17;
  double v19;
  double v20;
  NSObject *v21;
  float64x2_t v22;
  _BOOL4 v23;
  unint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  NSObject *v29;
  NSObject *v30;
  unsigned int v31;
  unsigned int v32;
  const __CFString *v33;
  unsigned int v34;
  char *v35;
  BOOL v36;
  BOOL v37;
  int v38;
  double *v39;
  __CVPixelBufferPool *v40;
  CVReturn PixelBufferWithAuxAttributes;
  int v42;
  NSObject *v43;
  unsigned int v44;
  unsigned int v45;
  const void *v46;
  NSObject *v47;
  unsigned int v48;
  unsigned int v49;
  NSObject *v50;
  unsigned int v51;
  unsigned int v52;
  const __CFString *v53;
  NSObject *v54;
  unsigned int v55;
  unsigned int v56;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v58;
  NSObject *v59;
  unsigned int v60;
  unsigned int v61;
  const __CFString *v62;
  os_log_type_t v63[16];
  CVPixelBufferRef pixelBufferOut[2];
  int v65;
  const __CFString *v66;
  __int16 v67;
  const char *v68;
  __int16 v69;
  _BYTE v70[10];
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(result + 24) != 2)
    return result;
  v9 = result;
  v10 = *(const __CFString **)(result + 16);
  *(_BYTE *)(result + 217) = a3;
  v11 = *(double **)(result + 648);
  v12 = (_OWORD *)MEMORY[0x1E0C9D820];
  v13 = *MEMORY[0x1E0C9D820];
  v14 = *(double *)(MEMORY[0x1E0C9D820] + 8);
  if (v11)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)v11);
    v15 = a4 == v11[6] && a5 == v11[7];
    v16 = v14;
    v17 = v13;
    if (v15)
    {
      v16 = v14;
      v17 = v13;
      if (*((_DWORD *)v11 + 20) == a2)
      {
        v16 = v14;
        v17 = v13;
        if (*((unsigned __int8 *)v11 + 84) == a3)
        {
          v17 = v11[8];
          v16 = v11[9];
        }
      }
    }
    MEMORY[0x19402EF04](*(_QWORD *)v11);
  }
  else
  {
    LODWORD(pixelBufferOut[0]) = 0;
    v63[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v16 = v14;
    v17 = v13;
  }
  if (v17 == v13 && v16 == v14)
  {
    pixelBufferOut[0] = *(CVPixelBufferRef *)&a4;
    pixelBufferOut[1] = *(CVPixelBufferRef *)&a5;
    v19 = *(double *)(v9 + 136);
    v20 = *(double *)(v9 + 144);
    if (*(_BYTE *)(v9 + 217))
    {
      if (a4 > v19 || a5 > v20)
      {
        *(_DWORD *)v63 = 0;
        v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else
    {
      if (CFEqual(*(CFTypeRef *)(v9 + 72), CFSTR("FileWriter")) && !*(_BYTE *)(v9 + 88))
      {
        HIDWORD(v24) = -1527099483 * a2 - 2;
        LODWORD(v24) = HIDWORD(v24);
        v23 = (v24 >> 2) < 0x16C16C1;
      }
      else
      {
        v23 = a4 > a5;
        if (v19 > v20)
          v23 = a4 < a5;
      }
      if (v23)
        v25 = v19;
      else
        v25 = v20;
      if (v23)
        v26 = v20;
      else
        v26 = v19;
      if (*(_BYTE *)(v9 + 218))
      {
        v17 = (double)(int)(((int)v26 + 1) & 0xFFFFFFFE);
        v16 = (double)(int)(((int)v25 + 1) & 0xFFFFFFFE);
        *(double *)pixelBufferOut = v17;
        *(double *)&pixelBufferOut[1] = v16;
        goto LABEL_35;
      }
      v22.f64[0] = a4;
      FigDisplayModes_DetermineSenderSurfaceDimensionsFromDisplayModeAndCurrentSenderDisplaySize(*(unsigned __int8 *)(v9 + 168), (float64x2_t *)pixelBufferOut, v26, v25, v22, a5, 0.0);
      v17 = *(double *)pixelBufferOut;
      v16 = *(double *)&pixelBufferOut[1];
      if (a4 >= *(double *)pixelBufferOut || a5 >= *(double *)&pixelBufferOut[1])
      {
LABEL_35:
        v27 = *(double *)(v9 + 128);
        v28 = *(double *)(v9 + 120);
        if (*(double *)(v9 + 136) != v28 || *(double *)(v9 + 144) != v27)
        {
          *(_OWORD *)v63 = *v12;
          FigDisplayModes_ConvertSquarePixelSizeToNonSquarePixelSize(a2, (double *)v63, v17, v16, *(double *)(v9 + 152), *(double *)(v9 + 160), v28, v27, *(double *)(v9 + 184));
          if (dword_1EE2A3148 >= 3)
          {
            v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          *(_OWORD *)pixelBufferOut = *(_OWORD *)v63;
          v16 = *(double *)&v63[8];
          v17 = *(double *)v63;
        }
        goto LABEL_43;
      }
      pixelBufferOut[0] = *(CVPixelBufferRef *)&a4;
      pixelBufferOut[1] = *(CVPixelBufferRef *)&a5;
    }
    v16 = a5;
    v17 = a4;
    goto LABEL_35;
  }
LABEL_43:
  if (dword_1EE2A3148)
  {
    LODWORD(pixelBufferOut[0]) = 0;
    v63[0] = OS_LOG_TYPE_DEFAULT;
    v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v31 = pixelBufferOut[0];
    if (os_log_type_enabled(v30, v63[0]))
      v32 = v31;
    else
      v32 = v31 & 0xFFFFFFFE;
    if (v32)
    {
      if (v10)
        v33 = v10;
      else
        v33 = &stru_1E2FD85F8;
      do
        v34 = __ldxr(&strGetAvailableBuffer_strIndex);
      while (__stxr(v34 + 1, &strGetAvailableBuffer_strIndex));
      v35 = (char *)&strGetAvailableBuffer_strBuffer + 64 * (unint64_t)(v34 & 0xF);
      snprintf(v35, 0x40uLL, "{%g, %g}", v17, v16);
      v65 = 138412802;
      v66 = v33;
      v67 = 2080;
      v68 = "fvdp_ensureWritebackPixelBuffer";
      v69 = 2080;
      *(_QWORD *)v70 = v35;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v36 = *(double *)(v9 + 224) == v17 && *(double *)(v9 + 232) == v16;
  if (!v36 || (*(double *)(v9 + 240) == v17 ? (v37 = *(double *)(v9 + 248) == v16) : (v37 = 0), !v37))
  {
    fvdp_shutdownEncoderAndPools(v9);
    *(double *)(v9 + 224) = v17;
    *(double *)(v9 + 232) = v16;
    *(double *)(v9 + 240) = v17;
    *(double *)(v9 + 248) = v16;
  }
  v38 = fvdp_ensureEncoderAndPools(v9);
  if (v38)
  {
    v58 = v38;
    LODWORD(pixelBufferOut[0]) = 0;
    v63[0] = OS_LOG_TYPE_DEFAULT;
    v59 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v60 = pixelBufferOut[0];
    if (os_log_type_enabled(v59, v63[0]))
      v61 = v60;
    else
      v61 = v60 & 0xFFFFFFFE;
    if (v61)
    {
      v62 = &stru_1E2FD85F8;
      v65 = 138413058;
      if (v10)
        v62 = v10;
      v66 = v62;
      v67 = 2080;
      v68 = "fvdp_ensureWritebackPixelBuffer";
      v69 = 1024;
      *(_DWORD *)v70 = 3959;
      *(_WORD *)&v70[4] = 1024;
      *(_DWORD *)&v70[6] = v58;
      _os_log_send_and_compose_impl();
    }
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v39 = *(double **)(v9 + 648);
  pixelBufferOut[0] = 0;
  if (!v39 || (v40 = (__CVPixelBufferPool *)*((_QWORD *)v39 + 1)) == 0)
  {
    *(_DWORD *)v63 = 0;
    v54 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v55 = *(_DWORD *)v63;
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      v56 = v55;
    else
      v56 = v55 & 0xFFFFFFFE;
    if (v56)
    {
      v65 = 138412802;
      v66 = &stru_1E2FD85F8;
      v67 = 2080;
      v68 = "writebackCacheAllocateBuffer";
      v69 = 1024;
      *(_DWORD *)v70 = 1458;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v42 = -12070;
    goto LABEL_84;
  }
  PixelBufferWithAuxAttributes = CVPixelBufferPoolCreatePixelBufferWithAuxAttributes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v40, *((CFDictionaryRef *)v39 + 3), pixelBufferOut);
  v42 = PixelBufferWithAuxAttributes;
  if (PixelBufferWithAuxAttributes == -6689)
  {
    *(_DWORD *)v63 = 0;
    v43 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v44 = *(_DWORD *)v63;
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      v45 = v44;
    else
      v45 = v44 & 0xFFFFFFFE;
    if (v45)
    {
      v65 = 138412546;
      v66 = &stru_1E2FD85F8;
      v67 = 2080;
      v68 = "writebackCacheAllocateBuffer";
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_78;
  }
  if (PixelBufferWithAuxAttributes)
  {
LABEL_78:
    *(_DWORD *)v63 = 0;
    v47 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v48 = *(_DWORD *)v63;
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      v49 = v48;
    else
      v49 = v48 & 0xFFFFFFFE;
    if (v49)
    {
      v65 = 138413058;
      v66 = &stru_1E2FD85F8;
      v67 = 2080;
      v68 = "writebackCacheAllocateBuffer";
      v69 = 1024;
      *(_DWORD *)v70 = 1463;
      *(_WORD *)&v70[4] = 1024;
      *(_DWORD *)&v70[6] = v42;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_84:
    LODWORD(pixelBufferOut[0]) = 0;
    v63[0] = OS_LOG_TYPE_DEFAULT;
    v50 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v51 = pixelBufferOut[0];
    if (os_log_type_enabled(v50, v63[0]))
      v52 = v51;
    else
      v52 = v51 & 0xFFFFFFFE;
    if (v52)
    {
      v53 = &stru_1E2FD85F8;
      v65 = 138413058;
      if (v10)
        v53 = v10;
      v66 = v53;
      v67 = 2080;
      v68 = "fvdp_ensureWritebackPixelBuffer";
      v69 = 1024;
      *(_DWORD *)v70 = 3962;
      *(_WORD *)&v70[4] = 1024;
      *(_DWORD *)&v70[6] = v42;
      _os_log_send_and_compose_impl();
    }
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  cvPixelBufferSetColorAttachments(pixelBufferOut[0], *((_QWORD **)v39 + 5));
  MEMORY[0x19402EEEC](*(_QWORD *)v39);
  v46 = (const void *)*((_QWORD *)v39 + 4);
  if (v46)
    CFRelease(v46);
  v39[4] = *(double *)pixelBufferOut;
  v39[6] = a4;
  v39[7] = a5;
  v39[8] = v17;
  v39[9] = v16;
  *((_DWORD *)v39 + 20) = a2;
  *((_BYTE *)v39 + 84) = a3;
  return MEMORY[0x19402EF04](*(_QWORD *)v39);
}

uint64_t __fvdp_copyWritebackPixelBuffer_block_invoke_317(uint64_t a1)
{
  return fvdp_ensureWritebackPixelBuffer(*(_QWORD *)(a1 + 32), *(_DWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 60), *(double *)(a1 + 40), *(float64_t *)(a1 + 48));
}

void __fvdp_encoderControlTimerFired_block_invoke(uint64_t a1)
{
  uint64_t v2;
  int v3;
  BOOL v4;
  int v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 40))
  {
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if (!*(_BYTE *)(v2 + 601) && FigCFDictionaryGetInt32IfPresent())
        fvdp_encoderControlSetBitrate(v2, 0);
      if (!*(_BYTE *)(v2 + 602) && FigCFDictionaryGetInt32IfPresent())
        fvdp_encoderControlSetFramerate(v2, 0);
      v3 = *(_DWORD *)(v2 + 320);
      if (v3 > 1752589104)
      {
        v4 = v3 == 1752589105 || v3 == 1869117027;
        v5 = 1836415073;
      }
      else
      {
        v4 = v3 == 1635148593 || v3 == 1718908515;
        v5 = 1718908520;
      }
      if (v4 || v3 == v5)
      {
        FigCFDictionaryGetDoubleIfPresent();
        FigCFDictionaryGetInt32IfPresent();
        FigCFDictionaryGetInt32IfPresent();
        FigCFDictionaryGetInt32IfPresent();
      }
    }
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

uint64_t FigTTMLDocumentWriterCreateWritingDirectionSpanBuilder(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *DerivedStorage;

  if (!a2 || !a3)
    return FigSignalErrorAt();
  FigTTMLDocumentWriterGetClassID();
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    FigTTMLDocumentWriterGetCMBaseObject(0);
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    *DerivedStorage = CFRetain(a2);
    *a3 = 0;
  }
  return v5;
}

uint64_t figTTMLDocumentWriterWritingDirectionSpanBuilder_Invalidate()
{
  return 0;
}

void figTTMLDocumentWriterWritingDirectionSpanBuilder_Finalize(uint64_t a1)
{
  const void *v1;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  v1 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v1)
    CFRelease(v1);
}

CFStringRef figTTMLDocumentWriterWritingDirectionSpanBuilder_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("figTTMLDocumentWriterWritingDirectionSpanBuilder[%p]"), a1);
}

uint64_t figTTMLDocumentWriterWritingDirectionSpanBuilder_StartElement(uint64_t a1, uint64_t a2)
{
  uint64_t *DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return FigTTMLDocumentWriterStartElement(*DerivedStorage, a2);
}

uint64_t figTTMLDocumentWriterWritingDirectionSpanBuilder_EndElement(uint64_t a1)
{
  uint64_t *DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return FigTTMLDocumentWriterEndElement(*DerivedStorage);
}

uint64_t figTTMLDocumentWriterWritingDirectionSpanBuilder_AddCaptionData(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  __int128 v5;
  CMTime v7;
  CMTime start;
  CMTimeRange v9;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(_OWORD *)(DerivedStorage + 8);
  start.epoch = *(_QWORD *)(DerivedStorage + 24);
  *(_OWORD *)&start.value = v5;
  v7 = *(CMTime *)(DerivedStorage + 32);
  CMTimeRangeFromTimeToTime(&v9, &start, &v7);
  return processPropertyAtDepthLevel(a1, a2, &v9, 0);
}

uint64_t figTTMLDocumentWriterWritingDirectionSpanBuilder_SetAttribute(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  __int128 v7;
  CMTime v9;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = FigTTMLDocumentWriterSetAttribute(*(_QWORD *)DerivedStorage, a2, (uint64_t)a3);
  if (!(_DWORD)v6)
  {
    if (FigCFEqual())
    {
      CMTimeMakeFromDictionary(&v9, a3);
      v7 = *(_OWORD *)&v9.value;
      *(_QWORD *)(DerivedStorage + 24) = v9.epoch;
      *(_OWORD *)(DerivedStorage + 8) = v7;
    }
    else if (FigCFEqual())
    {
      CMTimeMakeFromDictionary(&v9, a3);
      *(CMTime *)(DerivedStorage + 32) = v9;
    }
  }
  return v6;
}

uint64_t figTTMLDocumentWriterWritingDirectionSpanBuilder_Flush(uint64_t a1)
{
  uint64_t *DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return FigTTMLDocumentWriterFlush(*DerivedStorage);
}

uint64_t processPropertyAtDepthLevel(uint64_t a1, uint64_t a2, _OWORD *a3, CFIndex a4)
{
  uint64_t (*v6)(uint64_t);
  const __CFString *v7;
  CFIndex v8;
  uint64_t v9;
  const void *v10;
  CFTypeRef v11;
  uint64_t (*v12)(uint64_t, CFIndex, uint64_t, uint64_t, CFTypeRef *, uint64_t *);
  uint64_t v13;
  uint64_t Mutable;
  uint64_t KeyFrameCount;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CFTypeRef v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *DerivedStorage;
  uint64_t v26;
  __int128 v27;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  CFIndex Length;
  uint64_t v35;
  CFTypeRef cf[2];
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  CFTypeRef v41[2];
  CFTypeRef v42;

  v41[0] = 0;
  v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v6)
    v7 = (const __CFString *)v6(a2);
  else
    v7 = &stru_1E2FD85F8;
  Length = CFStringGetLength(v7);
  if (Length < 1)
  {
    v20 = 0;
    goto LABEL_63;
  }
  v8 = 0;
  v9 = 0;
  v32 = 0;
  v10 = 0;
  v11 = 0;
  v33 = *MEMORY[0x1E0CA3648];
  v35 = *MEMORY[0x1E0C9AE00];
  do
  {
    v39 = 0;
    v40 = 0;
    if (v41[0])
    {
      CFRelease(v41[0]);
      v41[0] = 0;
    }
    v12 = *(uint64_t (**)(uint64_t, CFIndex, uint64_t, uint64_t, CFTypeRef *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                               + 24);
    if (!v12)
    {
      v20 = 4294954514;
      goto LABEL_59;
    }
    v13 = v12(a2, v8, v33, v35, v41, &v39);
    if ((_DWORD)v13)
    {
      v20 = v13;
      goto LABEL_59;
    }
    if (v11)
      CFRelease(v11);
    if (!v41[0])
      goto LABEL_36;
    cf[0] = 0;
    v42 = 0;
    Mutable = FigCaptionDynamicStyleCreateMutable();
    if ((_DWORD)Mutable)
    {
      v20 = Mutable;
      v11 = 0;
    }
    else
    {
      KeyFrameCount = FigCaptionDynamicStyleGetKeyFrameCount();
      if (KeyFrameCount < 1)
      {
        v11 = 0;
        v20 = 0;
      }
      else
      {
        v16 = KeyFrameCount;
        v30 = v9;
        v17 = 0;
        v18 = 0;
        do
        {
          v41[1] = 0;
          if (v42)
          {
            CFRelease(v42);
            v42 = 0;
          }
          v19 = FigCaptionDynamicStyleCopyKeyFrameValueAtIndex();
          if ((_DWORD)v19)
            goto LABEL_51;
          if (CFArrayGetCount((CFArrayRef)v42) > a4)
          {
            CFArrayGetValueAtIndex((CFArrayRef)v42, a4);
            v18 = 1;
          }
          v19 = FigCaptionDynamicStyleAddKeyFrameValue();
          if ((_DWORD)v19)
          {
LABEL_51:
            v20 = v19;
            v11 = 0;
            goto LABEL_27;
          }
          ++v17;
        }
        while (v16 != v17);
        if (v18)
        {
          v20 = 0;
          v11 = cf[0];
          cf[0] = 0;
        }
        else
        {
          v11 = 0;
          v20 = 0;
        }
LABEL_27:
        v9 = v30;
      }
    }
    if (v42)
      CFRelease(v42);
    if (cf[0])
      CFRelease(cf[0]);
    if ((_DWORD)v20)
      goto LABEL_59;
    if (v11)
    {
      if (FigCFEqual())
      {
        v21 = v40;
        v9 += v40;
        goto LABEL_47;
      }
      v22 = v11;
      if (v10)
      {
LABEL_37:
        v23 = a3[1];
        *(_OWORD *)cf = *a3;
        v37 = v23;
        v38 = a3[2];
        v24 = writeNestedSpan(a1, a2, v32, v9, (__int128 *)cf, (uint64_t)v10, a4);
        if ((_DWORD)v24)
        {
          v20 = v24;
          v11 = v22;
          goto LABEL_59;
        }
        CFRelease(v10);
      }
    }
    else
    {
LABEL_36:
      v22 = 0;
      if (v10)
        goto LABEL_37;
    }
    if (v22)
    {
      v11 = 0;
      v21 = v40;
      v10 = v22;
      v32 = v39;
      v9 = v40;
    }
    else
    {
      cf[0] = 0;
      FigTTMLDocumentWriterGetCMBaseObject(a1);
      DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
      v26 = FigCaptionDataCopySubrange();
      if (!(_DWORD)v26)
        v26 = FigTTMLDocumentWriterAddCaptionData(*DerivedStorage, (uint64_t)cf[0]);
      v20 = v26;
      if (cf[0])
        CFRelease(cf[0]);
      v11 = 0;
      v10 = 0;
      if ((_DWORD)v20)
        goto LABEL_59;
      v21 = v40;
    }
LABEL_47:
    v8 += v21;
  }
  while (v8 < Length);
  if (v10)
  {
    v27 = a3[1];
    *(_OWORD *)cf = *a3;
    v37 = v27;
    v38 = a3[2];
    v20 = writeNestedSpan(a1, a2, v32, v9, (__int128 *)cf, (uint64_t)v10, a4);
    if (!(_DWORD)v20)
    {
      CFRelease(v10);
      v10 = 0;
    }
  }
  else
  {
    v20 = 0;
  }
LABEL_59:
  if (v11)
    CFRelease(v11);
  if (v10)
    CFRelease(v10);
LABEL_63:
  if (v41[0])
    CFRelease(v41[0]);
  return v20;
}

uint64_t writeNestedSpan(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t *DerivedStorage;
  uint64_t started;
  __int128 v12;
  uint64_t *v13;
  uint64_t KeyFrameCount;
  uint64_t v15;
  uint64_t v16;
  CFDictionaryRef v17;
  CFMutableDictionaryRef Mutable;
  const __CFAllocator *v19;
  uint64_t v20;
  double v21;
  double Seconds;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t *v28;
  uint64_t v29;
  __int128 v30;
  _BYTE v31[32];
  CFTypeRef cf;
  CMTime v33;
  CMTime time;
  double v35;
  CFTypeRef v36;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  cf = 0;
  started = FigTTMLDocumentWriterStartElement(*DerivedStorage, 5);
  if ((_DWORD)started)
    return started;
  v12 = a5[1];
  v30 = *a5;
  *(_OWORD *)v31 = v12;
  *(_OWORD *)&v31[16] = a5[2];
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  v13 = (uint64_t *)CMBaseObjectGetDerivedStorage();
  KeyFrameCount = FigCaptionDynamicStyleGetKeyFrameCount();
  if (KeyFrameCount <= 0)
    goto LABEL_22;
  v15 = KeyFrameCount;
  v29 = a7;
  v28 = DerivedStorage;
  v16 = 0;
  v17 = 0;
  Mutable = 0;
  v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  while (1)
  {
    v35 = 0.0;
    v36 = 0;
    v20 = FigCaptionDynamicStyleCopyKeyFrameValueAtIndex();
    if ((_DWORD)v20)
      break;
    if (Mutable)
      CFRelease(Mutable);
    Mutable = CFDictionaryCreateMutable(v19, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    FigTTMLDocumentWriterMapPropertyToAttribute_WritingDirection(v36, Mutable);
    if (v16)
    {
      v21 = v35;
      time = *(CMTime *)&v31[8];
      Seconds = CMTimeGetSeconds(&time);
      if (v17)
        CFRelease(v17);
      CMTimeMake(&v33, (int)(v21 * Seconds * 1000.0), 1000);
      v17 = CMTimeCopyAsDictionary(&v33, v19);
      CFDictionarySetValue(Mutable, CFSTR("begin"), v17);
      v20 = FigTTMLDocumentWriterStartElement(*v13, 1);
      if ((_DWORD)v20)
        break;
      CFDictionaryApplyFunction(Mutable, (CFDictionaryApplierFunction)writeAttribute, (void *)*v13);
      v23 = FigTTMLDocumentWriterEndElement(*v13);
      if ((_DWORD)v23)
      {
        v24 = v23;
LABEL_17:
        DerivedStorage = v28;
        if (!v17)
          goto LABEL_19;
LABEL_18:
        CFRelease(v17);
        goto LABEL_19;
      }
    }
    else
    {
      CFDictionaryApplyFunction(Mutable, (CFDictionaryApplierFunction)writeAttribute, (void *)*v13);
    }
    if (v15 == ++v16)
    {
      v24 = 0;
      goto LABEL_17;
    }
  }
  v24 = v20;
  DerivedStorage = v28;
  if (v17)
    goto LABEL_18;
LABEL_19:
  if (Mutable)
    CFRelease(Mutable);
  a7 = v29;
  if (!(_DWORD)v24)
  {
LABEL_22:
    v25 = FigCaptionDataCopySubrange();
    if (!(_DWORD)v25)
    {
      v26 = a5[1];
      v30 = *a5;
      *(_OWORD *)v31 = v26;
      *(_OWORD *)&v31[16] = a5[2];
      v25 = processPropertyAtDepthLevel(a1, cf, &v30, a7 + 1);
      if (!(_DWORD)v25)
        v25 = FigTTMLDocumentWriterEndElement(*DerivedStorage);
    }
    v24 = v25;
  }
  if (cf)
    CFRelease(cf);
  return v24;
}

uint64_t writeAttribute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FigTTMLDocumentWriterSetAttribute(a3, a1, a2);
}

uint64_t FigSampleBufferConsumerRemoteXPC_ensureClientEstablished()
{
  uint64_t v0;
  _QWORD block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v6 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __FigSampleBufferConsumerRemoteXPC_ensureClientEstablished_block_invoke;
  block[3] = &unk_1E2FA1BA0;
  block[4] = &v3;
  if (FigSampleBufferConsumerRemoteXPC_ensureClientEstablished_sFigSampleBufferConsumerRemoteClientSetupOnce != -1)
    dispatch_once(&FigSampleBufferConsumerRemoteXPC_ensureClientEstablished_sFigSampleBufferConsumerRemoteClientSetupOnce, block);
  v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t remoteXPCSampleBufferConsumer_CreateInternal(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *DerivedStorage;
  uint64_t v6;
  uint64_t v7;

  FigSampleBufferConsumerGetClassID();
  v4 = CMDerivedObjectCreate();
  if ((_DWORD)v4)
    return v4;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[1] = a1;
  DerivedStorage[2] = FigSimpleMutexCreate();
  v6 = FigDispatchQueueCreateWithPriority();
  DerivedStorage[3] = v6;
  if (!v6)
    return FigSignalErrorAt();
  v4 = FigXPCRemoteClientAssociateObject();
  if ((_DWORD)v4)
    return v4;
  v7 = FigXPCRemoteClientCopyMemoryOrigin();
  if (!(_DWORD)v7)
    *a2 = 0;
  return v7;
}

uint64_t FigSampleBufferConsumerXPCRemoteRetainCopiedSampleBufferConsumer(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v4;
  uint64_t v5;
  CFTypeRef v6;
  CFTypeRef cf;

  cf = 0;
  if (!a1 || !a2)
    return FigSignalErrorAt();
  v4 = FigSampleBufferConsumerRemoteXPC_ensureClientEstablished();
  if ((_DWORD)v4)
    return v4;
  v5 = FigXPCRemoteClientRetainCopiedObject();
  v6 = cf;
  if ((_DWORD)v5 || (v5 = remoteXPCSampleBufferConsumer_CreateInternal(a1, &cf), v6 = cf, (_DWORD)v5))
  {
    if (v6)
      CFRelease(v6);
  }
  else
  {
    v5 = 0;
    *a2 = cf;
  }
  return v5;
}

_BYTE *remoteXPCSampleBufferConsumerClient_DeadConnectionCallback()
{
  _BYTE *result;

  result = (_BYTE *)CMBaseObjectGetDerivedStorage();
  *result = 1;
  return result;
}

uint64_t remoteXPCSampleBufferConsumerClient_HandleServerMessage()
{
  uint64_t result;

  result = FigXPCMessageGetOpCode();
  if (!(_DWORD)result)
    return 4294951138;
  return result;
}

void FigSampleBufferConsumerRemoteXPC_handleLowWaterTriggerCallbackAsync(const void *a1)
{
  _QWORD *DerivedStorage;
  void (*v3)(_QWORD);

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](DerivedStorage[2]);
  v3 = (void (*)(_QWORD))DerivedStorage[7];
  if (v3)
    v3(DerivedStorage[8]);
  MEMORY[0x19402EF04](DerivedStorage[2]);
  if (a1)
    CFRelease(a1);
}

uint64_t FigSampleBufferConsumerRemoteXPC_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  NSObject *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigXPCRemoteClientDisassociateObject();
  if (*(_BYTE *)DerivedStorage
    || !FigXPCCreateBasicMessage() && !FigXPCRemoteClientSendSyncMessage())
  {
    v1 = *(const void **)(DerivedStorage + 32);
    if (v1)
    {
      CFRelease(v1);
      *(_QWORD *)(DerivedStorage + 32) = 0;
    }
    v2 = *(const void **)(DerivedStorage + 40);
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)(DerivedStorage + 40) = 0;
    }
    v3 = *(const void **)(DerivedStorage + 48);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(DerivedStorage + 48) = 0;
    }
    FigSimpleMutexDestroy();
    v4 = *(NSObject **)(DerivedStorage + 24);
    if (v4)
    {
      dispatch_release(v4);
      *(_QWORD *)(DerivedStorage + 24) = 0;
    }
  }
  return FigXPCRelease();
}

uint64_t FigSampleBufferConsumerRemoteXPC_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t ObjectID;
  uint64_t v6;
  uint64_t v8;
  CFTypeRef cf;

  v8 = 0;
  cf = 0;
  ObjectID = remoteXPCSampleBufferConsumer_GetObjectID(a1, &v8);
  if ((_DWORD)ObjectID)
  {
    v6 = ObjectID;
  }
  else
  {
    v6 = FigXPCSendStdCopyPropertyMessage();
    if ((_DWORD)v6)
    {
      if (cf)
        CFRelease(cf);
    }
    else
    {
      *a4 = cf;
      cf = 0;
    }
  }
  FigXPCRelease();
  return v6;
}

uint64_t FigSampleBufferConsumerRemoteXPC_SetProperty(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  ObjectID = remoteXPCSampleBufferConsumer_GetObjectID(a1, &v4);
  if (!(_DWORD)ObjectID)
    ObjectID = FigXPCSendStdSetPropertyMessage();
  v2 = ObjectID;
  FigXPCRelease();
  return v2;
}

uint64_t remoteXPCSampleBufferConsumer_GetObjectID(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  *a2 = *(_QWORD *)(DerivedStorage + 8);
  return 0;
}

uint64_t FigSampleBufferConsumerRemoteXPC_SendSampleBuffer(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t ObjectID;
  uint64_t v4;
  _QWORD v6[3];

  memset(v6, 0, sizeof(v6));
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
  ObjectID = remoteXPCSampleBufferConsumer_GetObjectID(a1, v6);
  if (!(_DWORD)ObjectID)
  {
    ObjectID = FigXPCCreateBasicMessage();
    if (!(_DWORD)ObjectID)
    {
      ObjectID = FigXPCRemoteClientGetServerPID();
      if (!(_DWORD)ObjectID)
      {
        ObjectID = FigXPCMessageAddCMSampleBufferForPID();
        if (!(_DWORD)ObjectID)
        {
          ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
          if (!(_DWORD)ObjectID)
            ObjectID = FigMemoryOriginUpdateRecipientStateFromXPCMessage();
        }
      }
    }
  }
  v4 = ObjectID;
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
  FigXPCRelease();
  FigXPCRelease();
  return v4;
}

BOOL FigSampleBufferConsumerRemoteXPC_IsQueueAtOrAboveHighWater(uint64_t a1)
{
  _BOOL8 v1;
  uint64_t v3;
  xpc_object_t xdict;
  uint64_t v5;

  xdict = 0;
  v5 = 0;
  v3 = 0;
  v1 = !remoteXPCSampleBufferConsumer_GetObjectID(a1, &v3)
    && !FigXPCCreateBasicMessage()
    && !FigXPCRemoteClientSendSyncMessageCreatingReply()
    && xpc_dictionary_get_BOOL(xdict, "IsQueueAtOrAboveHighWater");
  FigXPCRelease();
  FigXPCRelease();
  return v1;
}

BOOL FigSampleBufferConsumerRemoteXPC_IsQueueBelowLowWater(uint64_t a1)
{
  _BOOL8 v1;
  uint64_t v3;
  xpc_object_t xdict;
  uint64_t v5;

  xdict = 0;
  v5 = 0;
  v3 = 0;
  v1 = !remoteXPCSampleBufferConsumer_GetObjectID(a1, &v3)
    && !FigXPCCreateBasicMessage()
    && !FigXPCRemoteClientSendSyncMessageCreatingReply()
    && xpc_dictionary_get_BOOL(xdict, "IsQueueBelowLowWater");
  FigXPCRelease();
  FigXPCRelease();
  return v1;
}

uint64_t FigSampleBufferConsumerRemoteXPC_InstallLowWaterTrigger(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *DerivedStorage;
  uint64_t ObjectID;
  uint64_t v10;
  _QWORD v12[2];

  v12[0] = 0;
  v12[1] = 0;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](DerivedStorage[2]);
  if (DerivedStorage[7] || !a2)
  {
    ObjectID = FigSignalErrorAt();
  }
  else
  {
    ObjectID = remoteXPCSampleBufferConsumer_GetObjectID(a1, v12);
    if (!(_DWORD)ObjectID)
    {
      DerivedStorage[7] = a2;
      DerivedStorage[8] = a3;
      *a4 = a1;
      ObjectID = FigXPCCreateBasicMessage();
      if (!(_DWORD)ObjectID)
        ObjectID = FigXPCRemoteClientSendSyncMessage();
    }
  }
  v10 = ObjectID;
  MEMORY[0x19402EF04](DerivedStorage[2]);
  FigXPCRelease();
  return v10;
}

uint64_t FigSampleBufferConsumerRemoteXPC_RemoveLowWaterTrigger(uint64_t a1, uint64_t a2)
{
  _QWORD *DerivedStorage;
  uint64_t ObjectID;
  uint64_t v6;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](DerivedStorage[2]);
  if (a1 != a2)
  {
    ObjectID = FigSignalErrorAt();
LABEL_8:
    v6 = ObjectID;
    goto LABEL_6;
  }
  ObjectID = remoteXPCSampleBufferConsumer_GetObjectID(a1, v8);
  if ((_DWORD)ObjectID)
    goto LABEL_8;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_8;
  v6 = FigXPCRemoteClientSendSyncMessage();
  if (!(_DWORD)v6)
  {
    DerivedStorage[7] = 0;
    DerivedStorage[8] = 0;
  }
LABEL_6:
  MEMORY[0x19402EF04](DerivedStorage[2]);
  FigXPCRelease();
  return v6;
}

uint64_t FigSampleBufferConsumerRemoteXPC_GetPendingSampleBufferCount(uint64_t a1)
{
  uint64_t uint64;
  _QWORD v3[2];
  xpc_object_t xdict;

  v3[1] = 0;
  xdict = 0;
  v3[0] = 0;
  if (remoteXPCSampleBufferConsumer_GetObjectID(a1, v3)
    || FigXPCCreateBasicMessage()
    || FigXPCRemoteClientSendSyncMessageCreatingReply())
  {
    uint64 = 0;
  }
  else
  {
    uint64 = xpc_dictionary_get_uint64(xdict, "GetPendingSampleBufferCount");
  }
  FigXPCRelease();
  return uint64;
}

uint64_t FigSampleBufferConsumerRemoteXPC_SetAttachmentOnPendingSampleBuffersInPTSRange(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  ObjectID = remoteXPCSampleBufferConsumer_GetObjectID(a1, v5);
  if ((_DWORD)ObjectID)
  {
    v3 = ObjectID;
  }
  else
  {
    v2 = FigXPCCreateBasicMessage();
    if ((_DWORD)v2
      || (v2 = FigXPCMessageSetCFString(), (_DWORD)v2)
      || (v2 = FigXPCMessageSetCFObject(), (_DWORD)v2)
      || (v2 = FigXPCMessageSetCMTime(), (_DWORD)v2)
      || (v2 = FigXPCMessageSetCMTime(), (_DWORD)v2))
    {
      v3 = v2;
    }
    else
    {
      v3 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  return v3;
}

uint64_t FigSampleBufferConsumerRemoteXPC_PostNotification(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t ObjectID;
  uint64_t v6;
  uint64_t v8;
  xpc_object_t xdict;

  v8 = 0;
  xdict = 0;
  ObjectID = remoteXPCSampleBufferConsumer_GetObjectID(a1, &v8);
  if ((_DWORD)ObjectID)
  {
    v6 = ObjectID;
  }
  else
  {
    v6 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v6)
    {
      v6 = FigXPCMessageSetCFString();
      if (!(_DWORD)v6)
      {
        v6 = FigXPCMessageSetCFDictionary();
        if (!(_DWORD)v6)
        {
          xpc_dictionary_set_uint64(xdict, "NotificationDeliveryFlags", a4);
          v6 = FigXPCRemoteClientSendSyncMessage();
        }
      }
    }
  }
  FigXPCRelease();
  return v6;
}

uint64_t FigSampleBufferConsumerRemoteXPC_Flush(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  ObjectID = remoteXPCSampleBufferConsumer_GetObjectID(a1, v5);
  if ((_DWORD)ObjectID)
  {
    v3 = ObjectID;
  }
  else
  {
    v2 = FigXPCCreateBasicMessage();
    if ((_DWORD)v2)
      v3 = v2;
    else
      v3 = FigXPCRemoteClientSendSyncMessage();
  }
  FigXPCRelease();
  return v3;
}

BOOL FigSampleBufferConsumerRemoteXPC_IsQueueBelowPrerollLevel(uint64_t a1)
{
  _BOOL8 v1;
  uint64_t v3;
  xpc_object_t xdict;
  uint64_t v5;

  xdict = 0;
  v5 = 0;
  v3 = 0;
  v1 = !remoteXPCSampleBufferConsumer_GetObjectID(a1, &v3)
    && !FigXPCCreateBasicMessage()
    && !FigXPCRemoteClientSendSyncMessageCreatingReply()
    && xpc_dictionary_get_BOOL(xdict, "IsQueueBelowPrerollLevel");
  FigXPCRelease();
  FigXPCRelease();
  return v1;
}

uint64_t FigNeroidCreateRemote(uint64_t a1, CFTypeRef *a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t uint64;
  CFTypeRef cf[16];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (!a2)
  {
    v5 = FigSignalErrorAt();
    goto LABEL_6;
  }
  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  cf[0] = (CFTypeRef)MEMORY[0x1E0C809B0];
  cf[1] = (CFTypeRef)3221225472;
  cf[2] = __neroidRemote_ensureClientEstablished_block_invoke;
  cf[3] = &unk_1E2F91F58;
  cf[4] = &v10;
  if (neroidRemote_ensureClientEstablished_sFigNeroidRemoteClientSetupOnce != -1)
    dispatch_once(&neroidRemote_ensureClientEstablished_sFigNeroidRemoteClientSetupOnce, cf);
  v4 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  if (!(_DWORD)v4)
  {
    v5 = FigXPCCreateBasicMessage();
    if ((_DWORD)v5)
    {
LABEL_6:
      v4 = v5;
      goto LABEL_7;
    }
    v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!(_DWORD)v4)
    {
      uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E0CA36A0]);
      cf[0] = 0;
      FigNeroidGetClassID();
      v4 = CMDerivedObjectCreate();
      if ((_DWORD)v4)
      {
        if (cf[0])
          CFRelease(cf[0]);
      }
      else
      {
        *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8) = uint64;
        FigXPCRemoteClientAssociateObject();
        *a2 = cf[0];
      }
    }
  }
LABEL_7:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  if ((_DWORD)v4)
  {
    v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v4;
}

void __neroidRemote_ensureClientEstablished_block_invoke(uint64_t a1)
{
  __CFDictionary *Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA54A0], CFSTR("Neroid_ServerConnectionDied"));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = FigXPCRemoteClientCreate();
  if (Mutable)
    CFRelease(Mutable);
}

uint64_t neroidRemote_deadConnectionCallback()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(result + 1) = 1;
  return result;
}

uint64_t neroidRemote_Invalidate()
{
  _BYTE *DerivedStorage;
  _BYTE *v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    v1 = DerivedStorage;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    *v1 = 1;
    v3 = FigXPCRemoteClientDisassociateObject();
    if (v1[1] || !FigXPCCreateBasicMessage() && (v3 = FigXPCRemoteClientSendSyncMessage(), !(_DWORD)v3))
    {
      v4 = (void *)MEMORY[0x19403137C](v3);
      neroidRemote_removeHostLayer();
      if (*((_QWORD *)v1 + 2))
      {
        objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
        if (!pthread_main_np())
          objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
        objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1, v7, v8);
        v5 = (void *)*((_QWORD *)v1 + 2);
        if (v5)
        {

          *((_QWORD *)v1 + 2) = 0;
        }
        objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
      }
      objc_autoreleasePoolPop(v4);
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return 0;
}

__CFString *neroidRemote_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigNeroidRemote %p>"), a1);
  return Mutable;
}

uint64_t neroidRemote_CopyProperty(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v3;

  v3 = 0;
  ObjectID = neroidRemote_getObjectID(a1, &v3);
  if (!(_DWORD)ObjectID)
    ObjectID = FigXPCSendStdCopyPropertyMessage();
  FigXPCRemoteClientKillServerOnTimeout();
  return ObjectID;
}

uint64_t neroidRemote_SetProperty(uint64_t a1, const void *a2, void *a3)
{
  uint64_t ObjectID;
  uint64_t DerivedStorage;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, __CFString *, _QWORD);
  uint64_t v15;
  CFDictionaryRef DictionaryRepresentation;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, __CFString *, _QWORD, CFTypeRef *);
  CFTypeID v20;
  void *v21;
  void *v23;
  id v24;
  void *v25;
  CGFloat v26;
  CGFloat v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, __CFString *, CFDictionaryRef);
  uint64_t v31;
  unsigned int valuePtr;
  CFTypeRef cf;
  CGSize v34;

  v31 = 0;
  ObjectID = neroidRemote_getObjectID(a1, &v31);
  if (!(_DWORD)ObjectID)
  {
    if (CFEqual(a2, CFSTR("DisplayLayer")))
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v8 = (void *)MEMORY[0x19403137C]();
      if (*(void **)(DerivedStorage + 16) == a3)
      {
        ObjectID = 0;
LABEL_29:
        objc_autoreleasePoolPop(v8);
        goto LABEL_30;
      }
      objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
      if (!pthread_main_np())
        objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
      objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
      v9 = *(id *)(DerivedStorage + 16);
      *(_QWORD *)(DerivedStorage + 16) = a3;
      objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
      v10 = CMBaseObjectGetDerivedStorage();
      cf = 0;
      v11 = (void *)MEMORY[0x19403137C]();
      if (!*(_QWORD *)(v10 + 16))
      {
        neroidRemote_removeHostLayer();
        ObjectID = 0;
        goto LABEL_13;
      }
      valuePtr = 0;
      FigBytePumpGetFigBaseObject(a1);
      v13 = v12;
      v14 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (!v14)
        goto LABEL_23;
      v15 = v14(v13, CFSTR("MakeCAContextForRemoteHost"), *MEMORY[0x1E0C9AE50]);
      if ((_DWORD)v15)
      {
LABEL_9:
        ObjectID = v15;
LABEL_13:
        DictionaryRepresentation = 0;
LABEL_25:
        objc_autoreleasePoolPop(v11);
        if (cf)
          CFRelease(cf);
        if (DictionaryRepresentation)
          CFRelease(DictionaryRepresentation);
        goto LABEL_29;
      }
      FigBytePumpGetFigBaseObject(a1);
      v18 = v17;
      v19 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
      if (v19)
      {
        v15 = v19(v18, CFSTR("CAContextID"), 0, &cf);
        if ((_DWORD)v15)
          goto LABEL_9;
        if (!cf || (v20 = CFGetTypeID(cf), v20 != CFNumberGetTypeID()))
        {
          v15 = FigSignalErrorAt();
          goto LABEL_9;
        }
        if (!CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, &valuePtr))
        {
          DictionaryRepresentation = 0;
          ObjectID = 4294950606;
          goto LABEL_25;
        }
        objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
        if (!pthread_main_np())
          objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
        objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
        v21 = *(void **)(v10 + 24);
        if (v21)
        {
          objc_msgSend(v21, "removeFromSuperlayer");
        }
        else
        {
          v23 = (void *)objc_msgSend(MEMORY[0x1E0CD27B0], "layer");
          *(_QWORD *)(v10 + 24) = v23;
          if (!v23)
          {
            objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
            DictionaryRepresentation = 0;
            ObjectID = 4294950605;
            goto LABEL_25;
          }
          v24 = v23;
        }
        objc_msgSend(*(id *)(v10 + 24), "setName:", CFSTR("FigNeroidRemoteLayerHost"));
        objc_msgSend(*(id *)(v10 + 24), "setContextId:", valuePtr);
        objc_msgSend(*(id *)(v10 + 16), "addSublayer:", *(_QWORD *)(v10 + 24));
        v25 = *(void **)(v10 + 24);
        objc_msgSend(*(id *)(v10 + 16), "bounds");
        objc_msgSend(v25, "setFrame:");
        objc_msgSend(*(id *)(v10 + 16), "bounds");
        v34.width = v26;
        v34.height = v27;
        DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v34);
        FigBytePumpGetFigBaseObject(a1);
        v29 = v28;
        v30 = *(uint64_t (**)(uint64_t, __CFString *, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 56);
        if (v30)
        {
          ObjectID = v30(v29, CFSTR("DisplaySize"), DictionaryRepresentation);
          if (!(_DWORD)ObjectID)
            objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
          goto LABEL_25;
        }
      }
      else
      {
LABEL_23:
        DictionaryRepresentation = 0;
      }
      ObjectID = 4294954514;
      goto LABEL_25;
    }
    ObjectID = FigXPCSendStdSetPropertyMessage();
  }
LABEL_30:
  FigXPCRemoteClientKillServerOnTimeout();
  return ObjectID;
}

void neroidRemote_removeHostLayer()
{
  uint64_t DerivedStorage;
  void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = (void *)MEMORY[0x19403137C]();
  if (*(_QWORD *)(DerivedStorage + 24))
  {
    objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
    if (!pthread_main_np())
      objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
    objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
    objc_msgSend(*(id *)(DerivedStorage + 24), "removeFromSuperlayer");

    *(_QWORD *)(DerivedStorage + 24) = 0;
    objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
  }
  objc_autoreleasePoolPop(v1);
}

uint64_t neroidRemote_getObjectID(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage || *(_BYTE *)(DerivedStorage + 1))
    return FigSignalErrorAt();
  *a2 = *(_QWORD *)(DerivedStorage + 8);
  return 0;
}

uint64_t neroidRemote_Start(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t ObjectID;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[21];

  v7[20] = *MEMORY[0x1E0C80C00];
  v7[0] = 0;
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  ObjectID = neroidRemote_getObjectID(a1, v7);
  if ((_DWORD)ObjectID)
  {
    v4 = ObjectID;
  }
  else
  {
    v5 = FigXPCCreateBasicMessage();
    if ((_DWORD)v5)
      v4 = v5;
    else
      v4 = FigXPCRemoteClientSendSyncMessage();
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t MTAudioProcessingTapXPCServerCopyTapForID(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = FigXPCServerRetainNeighborObjectFromID();
  if (!(_DWORD)result)
    *a2 = 0;
  return result;
}

uint64_t MTAudioProcessingTapServerIsObjectIDLocallyServed()
{
  return FigXPCIsObjectIDLocallyServed();
}

uint64_t MTAudioProcessingTapServerStart()
{
  if (!FigServer_IsMediaplaybackd())
    FigServer_IsAirplayd();
  return FigXPCServerStart();
}

uint64_t HandleAudioProcessingTapMessage(uint64_t a1, void *a2)
{
  uint64_t result;

  result = FigXPCMessageGetOpCode();
  if (!(_DWORD)result)
  {
    xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
    result = FigXPCServerLookupAndRetainAssociatedObject();
    if (!(_DWORD)result)
      return FigSignalErrorAt();
  }
  return result;
}

uint64_t aptXPCServer_NotificationFilter(int a1, int a2, CFTypeRef cf1)
{
  uint64_t result;

  if (CFEqual(cf1, CFSTR("MTAudioProcessingTapNotification_InitializeTapCompleted")))
    return 1;
  result = CFEqual(cf1, CFSTR("MTAudioProcessingTapNotification_CreateAQTapCompleted"));
  if ((_DWORD)result)
    return 1;
  return result;
}

void aptapS_BaseClass_Finalize()
{
  uint64_t DerivedStorage;
  void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(void **)(DerivedStorage + 8);
  if (v1)
  {
    os_release(v1);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
}

__CFString *aptapS_BaseClass_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;
  CFIndex v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v4 = CFGetRetainCount(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<MTAudioProcessingTapServer %p> Retain count %d Created with flags = 0x%x"), a1, v4, *(unsigned int *)(DerivedStorage + 16));
  return Mutable;
}

void aptapS_Class_InitializeTap(uint64_t a1, uint64_t a2)
{
  CFDictionaryRef CFDictionaryFromPointer;

  CFDictionaryFromPointer = MTAudioProcessingTapCreateCFDictionaryFromPointer(CFSTR("AQTapServerPointer"), a2);
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (CFDictionaryFromPointer)
    CFRelease(CFDictionaryFromPointer);
}

uint64_t aptapS_Class_CreateAQTap(uint64_t a1, int a2, int a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  CFDictionaryRef CFDictionaryFromPointerAndTrackID;

  CMBaseObjectGetDerivedStorage();
  v8 = AudioQueueProcessingTapNew_CMServer();
  if (!(_DWORD)v8)
  {
    CFDictionaryFromPointerAndTrackID = MTAudioProcessingTapCreateCFDictionaryFromPointerAndTrackID(CFSTR("AQTapServerPointer"), 0, CFSTR("TrackID"), a2, CFSTR("AudioStreamToken"), a3);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    *a5 = 0;
    if (CFDictionaryFromPointerAndTrackID)
      CFRelease(CFDictionaryFromPointerAndTrackID);
  }
  return v8;
}

void aptapS_Class_DisposeAQTap(int a1, AudioQueueProcessingTapRef inAQTap)
{
  CFDictionaryRef CFDictionaryFromPointer;

  AudioQueueProcessingTapDispose(inAQTap);
  CFDictionaryFromPointer = MTAudioProcessingTapCreateCFDictionaryFromPointer(CFSTR("AQTapServerPointer"), (uint64_t)inAQTap);
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (CFDictionaryFromPointer)
    CFRelease(CFDictionaryFromPointer);
}

uint64_t aptapS_Class_SetTimelineInfo(int a1, int a2, AudioQueueRef inAQ, float a4, float a5, uint64_t a6, uint64_t a7)
{
  uint64_t inData;
  float v9;
  uint64_t v10;
  float v11;

  inData = a6;
  v9 = a4;
  v10 = a7;
  v11 = a5;
  return AudioQueueSetProperty(inAQ, 0x636D7469u, &inData, 0x18u);
}

uint64_t aptapS_Class_IsMultitrackTap()
{
  return *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 20);
}

uint64_t FigCaptionCreateMutable(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  _OWORD *DerivedStorage;
  uint64_t v5;
  __int128 v6;

  if (!a2)
    return FigSignalErrorAt();
  FigCaptionGetClassID();
  result = CMDerivedObjectCreate();
  if (!(_DWORD)result)
  {
    DerivedStorage = (_OWORD *)CMBaseObjectGetDerivedStorage();
    v5 = MEMORY[0x1E0CA2E40];
    v6 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
    *DerivedStorage = *MEMORY[0x1E0CA2E40];
    DerivedStorage[1] = v6;
    DerivedStorage[2] = *(_OWORD *)(v5 + 32);
    result = FigCaptionDataCreateMutable();
    if (!(_DWORD)result)
      *a2 = 0;
  }
  return result;
}

void figCaptionFinalize()
{
  const void *v0;

  v0 = *(const void **)(CMBaseObjectGetDerivedStorage() + 48);
  if (v0)
    CFRelease(v0);
}

__CFString *figCaptionCopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  const __CFAllocator *v5;
  __int128 v6;
  __int128 v7;
  CFStringRef v8;
  CFStringRef v9;
  const __CFString *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  const __CFString *v13;
  CMTimeRange range;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v6 = *(_OWORD *)DerivedStorage;
  v7 = *(_OWORD *)(DerivedStorage + 32);
  *(_OWORD *)&range.start.epoch = *(_OWORD *)(DerivedStorage + 16);
  *(_OWORD *)&range.duration.timescale = v7;
  *(_OWORD *)&range.start.value = v6;
  v8 = CMTimeRangeCopyDescription(v5, &range);
  v9 = v8;
  if (v8)
    v10 = v8;
  else
    v10 = CFSTR("<no timing>");
  v11 = *(_QWORD *)(DerivedStorage + 48);
  v12 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v12)
    v13 = (const __CFString *)v12(v11);
  else
    v13 = &stru_1E2FD85F8;
  CFStringAppendFormat(Mutable, 0, CFSTR("\tCaption: %p timing:%@ text<%@>"), a1, v10, v13);
  if (v9)
    CFRelease(v9);
  return Mutable;
}

uint64_t figCaptionCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  void (*v8)(CMTimeRange *__return_ptr, uint64_t);
  uint64_t MutableCopy;
  CFDictionaryRef v10;
  __int128 v11;
  uint64_t CMBaseObject;
  uint64_t (*v14)(uint64_t, const void *, const __CFAllocator *, const __CFDictionary **);
  CMTimeRange v15;
  CMTimeRange v16;
  const __CFDictionary *v17;

  CMBaseObjectGetDerivedStorage();
  v17 = 0;
  if (a2 && a4)
  {
    if (CFEqual(a2, CFSTR("TimeRange")))
    {
      memset(&v16, 0, sizeof(v16));
      v8 = *(void (**)(CMTimeRange *__return_ptr, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v8)
      {
        v8(&v16, a1);
      }
      else
      {
        v11 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
        *(_OWORD *)&v16.start.value = *MEMORY[0x1E0CA2E40];
        *(_OWORD *)&v16.start.epoch = v11;
        *(_OWORD *)&v16.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
      }
      v15 = v16;
      v10 = CMTimeRangeCopyAsDictionary(&v15, a3);
      if (!v10)
        return FigSignalErrorAt();
      MutableCopy = 0;
    }
    else if (CFEqual(a2, CFSTR("CaptionData")))
    {
      MutableCopy = FigCaptionDataCreateMutableCopy();
      v10 = v17;
      if ((_DWORD)MutableCopy)
        return MutableCopy;
    }
    else
    {
      CMBaseObject = FigCaptionDataGetCMBaseObject();
      v14 = *(uint64_t (**)(uint64_t, const void *, const __CFAllocator *, const __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v14)
      {
        MutableCopy = v14(CMBaseObject, a2, a3, &v17);
        v10 = v17;
      }
      else
      {
        v10 = 0;
        MutableCopy = 4294954514;
      }
    }
    *a4 = v10;
    return MutableCopy;
  }
  return FigSignalErrorAt();
}

uint64_t figCaptionSetProperty(const void *a1, const void *a2, const __CFDictionary *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t (*v8)(const void *, CMTimeRange *);
  uint64_t result;
  CFTypeID v10;
  const void *v11;
  uint64_t CMBaseObject;
  uint64_t (*v13)(uint64_t, const void *, const __CFDictionary *);
  CMTimeRange v14;
  CMTimeRange v15;
  CMTimeRange v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || !a3)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  if (CFEqual(a2, CFSTR("TimeRange")))
  {
    memset(&v15, 0, sizeof(v15));
    CMTimeRangeMakeFromDictionary(&v15, a3);
    v14 = v15;
    v8 = *(uint64_t (**)(const void *, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v8)
    {
      v16 = v14;
      return v8(a1, &v16);
    }
    return 4294954514;
  }
  if (!CFEqual(a2, CFSTR("CaptionData")))
  {
    CMBaseObject = FigCaptionDataGetCMBaseObject();
    v13 = *(uint64_t (**)(uint64_t, const void *, const __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 56);
    if (v13)
      return v13(CMBaseObject, a2, a3);
    return 4294954514;
  }
  v16.start.value = 0;
  v10 = CFGetTypeID(a3);
  if (v10 != FigCaptionDataGetTypeID())
    return FigSignalErrorAt();
  CFGetAllocator(a1);
  result = FigCaptionDataCreateMutableCopy();
  if (!(_DWORD)result)
  {
    v11 = *(const void **)(v7 + 48);
    if (v11)
      CFRelease(v11);
    result = 0;
    *(_QWORD *)(v7 + 48) = v16.start.value;
  }
  return result;
}

__n128 figCaptionGetTimeRange@<Q0>(uint64_t a1@<X8>)
{
  uint64_t DerivedStorage;
  __int128 v3;
  __n128 result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(_OWORD *)(DerivedStorage + 16);
  *(_OWORD *)a1 = *(_OWORD *)DerivedStorage;
  *(_OWORD *)(a1 + 16) = v3;
  result = *(__n128 *)(DerivedStorage + 32);
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t figCaptionSetTimeRange(uint64_t a1, __int128 *a2)
{
  _OWORD *DerivedStorage;
  __int128 v4;
  __int128 v5;

  DerivedStorage = (_OWORD *)CMBaseObjectGetDerivedStorage();
  if ((*((_DWORD *)a2 + 3) & 0x1D) != 1 || (*((_DWORD *)a2 + 9) & 0x1D) != 1)
    return FigSignalErrorAt();
  v4 = *a2;
  v5 = a2[2];
  DerivedStorage[1] = a2[1];
  DerivedStorage[2] = v5;
  *DerivedStorage = v4;
  return 0;
}

uint64_t FigSampleBufferAudioRendererGetClassID()
{
  MEMORY[0x19402F294](&FigSampleBufferAudioRendererGetClassID_sRegisterFigSampleBufferAudioRendererTypeOnce, RegisterFigSampleBufferAudioRendererType);
  return sFigSampleBufferAudioRendererClassID;
}

uint64_t RegisterFigSampleBufferAudioRendererType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigSampleBufferAudioRendererGetTypeID()
{
  MEMORY[0x19402F294](&FigSampleBufferAudioRendererGetClassID_sRegisterFigSampleBufferAudioRendererTypeOnce, RegisterFigSampleBufferAudioRendererType);
  return CMBaseClassGetCFTypeID();
}

CFStringRef FigSampleBufferAudioRendererCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigSampleBufferAudioRenderer %p]"), a1);
}

uint64_t FigPWDKeyExchangeReceiverGetClassID()
{
  if (FigPWDKeyExchangeReceiverGetClassID_onceToken != -1)
    dispatch_once_f(&FigPWDKeyExchangeReceiverGetClassID_onceToken, 0, (dispatch_function_t)RegisterFigPWDKeyExchangeReceiverBaseTypeOnce);
  return sFigPWDKeyExchangeReceiverClassID;
}

uint64_t RegisterFigPWDKeyExchangeReceiverBaseTypeOnce()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigPWDKeyExchangeReceiverGetTypeID()
{
  if (FigPWDKeyExchangeReceiverGetClassID_onceToken != -1)
    dispatch_once_f(&FigPWDKeyExchangeReceiverGetClassID_onceToken, 0, (dispatch_function_t)RegisterFigPWDKeyExchangeReceiverBaseTypeOnce);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigPWDKeyExchangeReceiverCreate(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return FigPWDKeyExchangeReceiverCreateForAOCP(*MEMORY[0x1E0C9AE00], a3, a4);
}

CFStringRef FigPWDKeyExchangeReceiverCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigPWDKeyExchangeReceiver %p]"), a1);
}

uint64_t FigAssetCacheInspectorCreate_File(const void *a1, CFTypeRef cf, CFTypeRef *a3)
{
  CFTypeID v6;
  uint64_t v7;
  _QWORD *DerivedStorage;
  dispatch_queue_t v9;
  CFTypeRef v10;
  uint64_t v11;
  uint64_t CMBaseObject;
  uint64_t (*v13)(uint64_t, const __CFString *, uint64_t, _QWORD *);
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v17;
  CFTypeRef v18;
  const void *URLValue;
  CFTypeRef v21;
  CFTypeRef cfa;

  v21 = 0;
  cfa = 0;
  if (!cf)
    goto LABEL_25;
  v6 = CFGetTypeID(cf);
  if (v6 != FigAssetGetTypeID() || !a3)
    goto LABEL_25;
  FigAssetCacheInspectorGetClassID();
  v7 = CMDerivedObjectCreate();
  if ((_DWORD)v7)
    goto LABEL_26;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v9 = dispatch_queue_create("com.apple.coremedia.assetcacheinspector_file.statequeue", 0);
  *DerivedStorage = v9;
  if (!v9)
  {
LABEL_25:
    v7 = FigSignalErrorAt();
    goto LABEL_26;
  }
  if (a1)
    v10 = CFRetain(a1);
  else
    v10 = 0;
  DerivedStorage[2] = v10;
  DerivedStorage[3] = CFRetain(cf);
  v11 = DerivedStorage[2];
  CMBaseObject = FigAssetGetCMBaseObject(cf);
  v13 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
  if (!v13)
    goto LABEL_21;
  v7 = v13(CMBaseObject, CFSTR("assetProperty_CreationURL"), v11, DerivedStorage + 4);
  if ((_DWORD)v7)
  {
LABEL_26:
    v17 = v7;
    goto LABEL_22;
  }
  if (!DerivedStorage[4])
    goto LABEL_25;
  v14 = DerivedStorage[2];
  v15 = FigAssetGetCMBaseObject(cf);
  v16 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (!v16)
  {
LABEL_21:
    v17 = 4294954514;
    goto LABEL_22;
  }
  v17 = v16(v15, CFSTR("assetProperty_CreationOptionsDictionary"), v14, &v21);
  v18 = v21;
  if (!(_DWORD)v17)
  {
    if (v21)
    {
      URLValue = (const void *)FigCFDictionaryGetURLValue();
      if (URLValue)
        URLValue = CFRetain(URLValue);
      DerivedStorage[5] = URLValue;
    }
    *a3 = CFRetain(cfa);
    v18 = v21;
  }
  if (v18)
    CFRelease(v18);
LABEL_22:
  if (cfa)
    CFRelease(cfa);
  return v17;
}

uint64_t acif_invalidate()
{
  dispatch_queue_t *DerivedStorage;
  uint64_t v2;

  v2 = 0;
  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  dispatch_sync_f(*DerivedStorage, &DerivedStorage, (dispatch_function_t)acif_invalidateDispatch);
  return v2;
}

void acif_finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  void (*v3)(uint64_t);
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    v3 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
    if (v3)
      v3(a1);
  }
  v4 = *(const void **)(DerivedStorage + 16);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 24);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 32);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  v7 = *(const void **)(DerivedStorage + 40);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
}

uint64_t acif_copyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  int v6;
  _QWORD *v7;

  CMBaseObjectGetDerivedStorage();
  if (!a2 || !a4 || !CFEqual(CFSTR("AssetCacheInspectorProperty_PlayableOffline"), a2))
    return FigSignalErrorAt();
  v6 = FigCFURLIsLocalResource();
  v7 = (_QWORD *)MEMORY[0x1E0C9AE50];
  if (!v6)
    v7 = (_QWORD *)MEMORY[0x1E0C9AE40];
  *a4 = *v7;
  return 0;
}

uint64_t *acif_invalidateDispatch(uint64_t *result)
{
  uint64_t v1;

  if (result)
  {
    v1 = *result;
    if (*result)
    {
      if (!*(_BYTE *)(v1 + 8))
        *(_BYTE *)(v1 + 8) = 1;
    }
  }
  return result;
}

uint64_t acif_copyCompletelyCachedMediaSelectionOptionsInGroup(uint64_t a1, const void *a2, uint64_t a3, CFArrayRef *a4)
{
  CFTypeID v6;
  const void *Value;
  CFArrayRef v8;

  CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v6 = CFGetTypeID(a2);
    if (v6 == CFDictionaryGetTypeID())
    {
      if (a4)
      {
        if (FigCFURLIsLocalResource())
        {
          Value = CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("MediaSelectionGroupOptions"));
          if (Value)
            Value = CFRetain(Value);
          *a4 = (CFArrayRef)Value;
          return 0;
        }
        v8 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B378]);
        *a4 = v8;
        if (v8)
          return 0;
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigSampleGeneratorRemoteCreateForFormatReader(uint64_t a1, uint64_t a2, OpaqueCMTimebase *a3, unsigned int a4, _QWORD *a5)
{
  if (a2)
    return figSampleGeneratorRemoteCreateCommon(a1, a2, 0, 0, a3, a4, a5);
  else
    return FigSignalErrorAt();
}

uint64_t figSampleGeneratorRemoteCreateCommon(uint64_t a1, uint64_t a2, uint64_t a3, int a4, OpaqueCMTimebase *a5, unsigned int a6, _QWORD *a7)
{
  uint64_t v13;
  uint64_t updated;
  uint64_t ObjectID;
  uint64_t uint64;
  uint64_t v17;
  BOOL v18;
  uint64_t DerivedStorage;
  const void *v20;
  __int128 v22;
  __int128 v23;
  _OWORD v24[2];
  uint64_t v25;
  _OWORD bytes[2];
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  uint64_t v35;
  uint64_t v36;

  v33 = 0;
  v34 = 0;
  v31 = 0;
  v32 = 0;
  if (!a7)
    goto LABEL_36;
  if (gSampleGeneratorRemoteClientSetupOnce != -1)
    dispatch_once(&gSampleGeneratorRemoteClientSetupOnce, &__block_literal_global_56);
  v13 = remoteSampleGenerator_EnsureClientEstablished_err;
  if (remoteSampleGenerator_EnsureClientEstablished_err)
    goto LABEL_34;
  *(_QWORD *)&bytes[0] = 0;
  *(_QWORD *)&v22 = 0;
  v35 = 0;
  v36 = 0;
  if (remoteSampleGenerator_establishMemoryRecipient_sFigSampleGeneratorMemoryRecipient_initOnce != -1)
    dispatch_once(&remoteSampleGenerator_establishMemoryRecipient_sFigSampleGeneratorMemoryRecipient_initOnce, &__block_literal_global_5_1);
  MEMORY[0x19402EEEC](qword_1EE2A11B0);
  if (qword_1EE2A11B8)
    goto LABEL_15;
  updated = FigXPCCreateBasicMessage();
  if ((_DWORD)updated
    || (updated = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)updated)
    || (updated = FigXPCCreateBasicMessage(), (_DWORD)updated)
    || (FigRemote_ShouldConnectToMediaparserdForFileParsing(),
        FigRemote_ShouldConnectToMediaplaybackd(),
        updated = FigMemoryRecipientCreateWithXPCMessage1AndUpdateXPCMessage2(),
        (_DWORD)updated))
  {
    v13 = updated;
  }
  else
  {
    v13 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!(_DWORD)v13 && qword_1EE2A11B8)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterAddListener();
LABEL_15:
      v13 = 0;
    }
  }
  MEMORY[0x19402EF04](qword_1EE2A11B0);
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRelease();
  if ((_DWORD)v13)
    goto LABEL_34;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
  {
LABEL_37:
    v13 = ObjectID;
    goto LABEL_34;
  }
  if (!a2)
    goto LABEL_22;
  if (!FigFormatReaderIsRemote(a2))
  {
LABEL_36:
    ObjectID = FigSignalErrorAt();
    goto LABEL_37;
  }
  ObjectID = FigFormatReaderXPCRemoteGetObjectID(a2, &v32);
  if ((_DWORD)ObjectID)
    goto LABEL_37;
  xpc_dictionary_set_uint64(v34, "FormatReader", v32);
LABEL_22:
  if (!a3)
    goto LABEL_26;
  if (!FigTrackReaderIsRemote(a3))
    goto LABEL_36;
  ObjectID = FigFormatReaderXPCRemoteGetObjectID(a3, &v31);
  if ((_DWORD)ObjectID)
    goto LABEL_37;
  xpc_dictionary_set_uint64(v34, "TrackReader", v31);
LABEL_26:
  xpc_dictionary_set_uint64(v34, "CreationOptions", a6);
  xpc_dictionary_set_BOOL(v34, "AttachByteReferences", a4 != 0);
  if (a5)
  {
    v25 = 0;
    memset(v24, 0, sizeof(v24));
    v22 = 0u;
    v23 = 0u;
    FigTimebaseGetSyncMoment(a5, (uint64_t)&v22);
    bytes[0] = v22;
    bytes[1] = v23;
    v27 = *(_QWORD *)&v24[0];
    v28 = *(_OWORD *)((char *)v24 + 8);
    v29 = *((_QWORD *)&v24[1] + 1);
    v30 = v25;
    xpc_dictionary_set_data(v34, "TimebaseSyncMoment", bytes, 0x48uLL);
  }
  ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)ObjectID)
    goto LABEL_37;
  uint64 = xpc_dictionary_get_uint64(v33, (const char *)*MEMORY[0x1E0CA36A0]);
  *(_QWORD *)&bytes[0] = 0;
  FigSampleGeneratorGetClassID();
  v17 = CMDerivedObjectCreate();
  if (!(_DWORD)v17)
  {
    v18 = a5 != 0;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_QWORD *)(DerivedStorage + 24) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *(_QWORD *)(DerivedStorage + 16) = FigSimpleMutexCreate();
    *(_QWORD *)(DerivedStorage + 32) = FigSimpleMutexCreate();
    *(_QWORD *)DerivedStorage = uint64;
    *(_BYTE *)(DerivedStorage + 56) = v18;
    MEMORY[0x19402EEEC](qword_1EE2A11B0);
    if (qword_1EE2A11B8)
    {
      *(_QWORD *)(DerivedStorage + 40) = CFRetain((CFTypeRef)qword_1EE2A11B8);
      MEMORY[0x19402EF04](qword_1EE2A11B0);
      v20 = *(const void **)&bytes[0];
      goto LABEL_32;
    }
    v17 = FigSignalErrorAt();
  }
  v13 = v17;
  if (*(_QWORD *)&bytes[0])
    CFRelease(*(CFTypeRef *)&bytes[0]);
  if (!(_DWORD)v13)
  {
    v20 = 0;
LABEL_32:
    v13 = FigXPCRemoteClientAssociateObject();
    if ((_DWORD)v13)
    {
      if (v20)
        CFRelease(v20);
    }
    else
    {
      *a7 = v20;
    }
  }
LABEL_34:
  FigXPCRelease();
  FigXPCRelease();
  return v13;
}

uint64_t FigSampleGeneratorRemoteCreateForTrackReader(uint64_t a1, uint64_t a2, OpaqueCMTimebase *a3, unsigned int a4, _QWORD *a5)
{
  if (a2)
    return figSampleGeneratorRemoteCreateCommon(a1, 0, a2, 0, a3, a4, a5);
  else
    return FigSignalErrorAt();
}

uint64_t FigSampleGeneratorRemoteCreateForTrackReaderProducingByteReferenceSampleBuffers(uint64_t a1, uint64_t a2, OpaqueCMTimebase *a3, unsigned int a4, _QWORD *a5)
{
  if (a2)
    return figSampleGeneratorRemoteCreateCommon(a1, 0, a2, 1, a3, a4, a5);
  else
    return FigSignalErrorAt();
}

uint64_t remoteSampleGenerator_DeadConnectionCallback(const void *a1)
{
  CFTypeID v2;
  uint64_t result;
  uint64_t DerivedStorage;
  const __CFDictionary *v5;

  *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 8) = 1;
  v2 = CFGetTypeID(a1);
  result = FigSampleGeneratorGetTypeID();
  if (v2 == result)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 32));
    v5 = *(const __CFDictionary **)(DerivedStorage + 24);
    if (v5)
    {
      CFDictionaryApplyFunction(v5, (CFDictionaryApplierFunction)remoteSampleGenerator_markSampleBufferDataFailed, 0);
      CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(DerivedStorage + 24));
    }
    JUMPOUT(0x19402EF04);
  }
  return result;
}

uint64_t remoteSampleGenerator_handleServerMessage()
{
  uint64_t OpCode;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  else
    return 4294951138;
}

uint64_t remoteSampleGenerator_markSampleBufferDataFailed(int a1, CMSampleBufferRef sbuf)
{
  return CMSampleBufferSetDataFailed(sbuf, -12556);
}

uint64_t __remoteSampleGenerator_establishMemoryRecipient_block_invoke()
{
  uint64_t result;

  result = FigSimpleMutexCreate();
  qword_1EE2A11B0 = result;
  return result;
}

void remoteSampleGenerator_memoryRecipientDeathNotificationHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x19402EEEC](qword_1EE2A11B0);
  if (qword_1EE2A11B8 == a4)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    if (qword_1EE2A11B8)
    {
      CFRelease((CFTypeRef)qword_1EE2A11B8);
      qword_1EE2A11B8 = 0;
    }
  }
  JUMPOUT(0x19402EF04);
}

uint64_t remoteSampleGenerator_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigSimpleMutexDestroy();
  v1 = *(const void **)(DerivedStorage + 24);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  FigSimpleMutexDestroy();
  v2 = *(const void **)(DerivedStorage + 40);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  v3 = *(const void **)(DerivedStorage + 48);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  FigXPCRemoteClientDisassociateObject();
  if (*(_QWORD *)DerivedStorage && !*(_BYTE *)(DerivedStorage + 8) && !FigXPCCreateBasicMessage())
    FigXPCRemoteClientSendAsyncMessage();
  FigXPCRelease();
  return FigXPCRelease();
}

__CFString *remoteSampleGenerator_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;
  const char *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(a1);
  if (*(_BYTE *)(DerivedStorage + 8))
    v6 = " SERVER DIED";
  else
    v6 = "";
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigSampleGeneratorRemote(XPC) %p retainCount: %ld ObjectID: %016llx%s>"), a1, v5, *(_QWORD *)DerivedStorage, v6);
  return Mutable;
}

uint64_t remoteSampleGenerator_CreateSampleBufferAtCursor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, int a8, __int128 a9, uint64_t a10, CFTypeRef *a11)
{
  uint64_t SampleBuffer;
  uint64_t v13[3];
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  __int128 v18;
  uint64_t v19;

  v13[0] = a2;
  v13[1] = a3;
  v13[2] = a4;
  v14 = a5;
  v15 = a6;
  v16 = a7;
  v17 = a8;
  v18 = a9;
  v19 = a10;
  SampleBuffer = remoteSampleGenerator_createSampleBuffer(a1, v13, 0, a11);
  FigXPCRemoteClientKillServerOnTimeout();
  return SampleBuffer;
}

uint64_t remoteSampleGenerator_GenerateSampleBuffersForRequests(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t ObjectID;
  uint64_t v11;
  xpc_object_t v12;
  const __CFAllocator *v13;
  __CFArray *Mutable;
  __CFArray *v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, void **);
  uint64_t SampleBufferGeneratorRequestXPCMessage;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, CFTypeRef *);
  uint64_t *SampleBufferRequestor;
  uint64_t v24;
  xpc_object_t array;
  void *v26;
  size_t count;
  size_t v28;
  size_t v29;
  xpc_object_t dictionary;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  _OWORD bytes[3];
  CFTypeRef cf;
  void *value[2];
  xpc_object_t xdict;
  xpc_object_t v42;
  uint64_t v43;

  v42 = 0;
  v43 = 0;
  value[1] = 0;
  xdict = 0;
  cf = 0;
  value[0] = 0;
  if (!a1)
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_35;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  ObjectID = remoteSampleGeneratorBatch_GetObjectID(a1, &v43);
  if ((_DWORD)ObjectID)
  {
LABEL_35:
    v33 = ObjectID;
    Mutable = 0;
    v15 = 0;
    goto LABEL_46;
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
  v11 = FigXPCCreateBasicMessage();
  if ((_DWORD)v11)
  {
    v33 = v11;
LABEL_38:
    Mutable = 0;
LABEL_40:
    v15 = 0;
    goto LABEL_32;
  }
  xpc_dictionary_set_int64(v42, "RequestCount", a2);
  v12 = xpc_array_create(0, 0);
  if (!v12)
  {
    v33 = FigSignalErrorAt();
    goto LABEL_38;
  }
  v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    v33 = FigSignalErrorAt();
    goto LABEL_40;
  }
  v35 = a4;
  v15 = CFArrayCreateMutable(v13, 0, MEMORY[0x1E0C9B378]);
  if (!v15)
  {
    v33 = FigSignalErrorAt();
    goto LABEL_32;
  }
  v36 = DerivedStorage;
  if (a2 < 1)
  {
LABEL_21:
    xpc_dictionary_set_value(v42, "SampleBufferGenerationRequestArray", v12);
    SampleBufferRequestor = CreateSampleBufferRequestor(a3, a2, v35, a5);
    v24 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!(_DWORD)v24)
    {
      array = xpc_dictionary_get_array(xdict, "SampleBufferResponseArray");
      if (array)
      {
        v26 = array;
        count = xpc_array_get_count(array);
        if (count)
        {
          v28 = count;
          v29 = 0;
          do
          {
            dictionary = xpc_array_get_dictionary(v26, v29);
            v24 = remoteSampleGenerator_processSingleSampleBufferResponse(a1, SampleBufferRequestor, dictionary, 0);
            if ((_DWORD)v24)
              goto LABEL_43;
          }
          while (v28 != ++v29);
        }
LABEL_27:
        v31 = FigXPCCreateBasicMessage();
        v32 = v36;
        if (!(_DWORD)v31)
          v31 = FigXPCRemoteClientSendSyncMessage();
        v33 = v31;
        goto LABEL_44;
      }
      v24 = FigSignalErrorAt();
      if (!(_DWORD)v24)
        goto LABEL_27;
    }
LABEL_43:
    v33 = v24;
    v32 = v36;
LABEL_44:
    MEMORY[0x19402EF04](*(_QWORD *)(v32 + 16));
    if (SampleBufferRequestor)
      free(SampleBufferRequestor);
    goto LABEL_46;
  }
  v16 = a2;
  v17 = (uint64_t *)a3;
  while (1)
  {
    memset(bytes, 0, sizeof(bytes));
    v18 = *v17;
    v19 = *(uint64_t (**)(uint64_t, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (!v19)
    {
LABEL_30:
      v33 = 4294954514;
      goto LABEL_31;
    }
    SampleBufferGeneratorRequestXPCMessage = v19(v18, value);
    if ((_DWORD)SampleBufferGeneratorRequestXPCMessage)
      goto LABEL_33;
    CFArrayAppendValue(Mutable, value[0]);
    v21 = *(uint64_t *)((char *)v17 + 28);
    if (v21)
      break;
LABEL_15:
    SampleBufferGeneratorRequestXPCMessage = remoteSampleGenerator_createSampleBufferGeneratorRequestXPCMessage((uint64_t)v17, value[0], cf, (uint64_t)bytes);
    if ((_DWORD)SampleBufferGeneratorRequestXPCMessage)
      goto LABEL_33;
    xpc_array_set_data(v12, 0xFFFFFFFFFFFFFFFFLL, bytes, 0x30uLL);
    if (value[0])
    {
      CFRelease(value[0]);
      value[0] = 0;
    }
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    v17 = (uint64_t *)((char *)v17 + 68);
    if (!--v16)
      goto LABEL_21;
  }
  v22 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v22)
    goto LABEL_30;
  SampleBufferGeneratorRequestXPCMessage = v22(v21, &cf);
  if (!(_DWORD)SampleBufferGeneratorRequestXPCMessage)
  {
    CFArrayAppendValue(v15, cf);
    goto LABEL_15;
  }
LABEL_33:
  v33 = SampleBufferGeneratorRequestXPCMessage;
LABEL_31:
  DerivedStorage = v36;
LABEL_32:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
LABEL_46:
  if (value[0])
    CFRelease(value[0]);
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  if (v15)
    CFRelease(v15);
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v33;
}

uint64_t remoteSampleGenerator_CreateBatch(const void *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t ObjectID;
  uint64_t uint64;
  uint64_t v7;
  int v8;
  uint64_t v9;
  const void *v10;
  uint64_t DerivedStorage;
  const void *v12;
  uint64_t v14;
  const void *v15;

  v14 = 0;
  if (!a1 || !a3)
    goto LABEL_11;
  ObjectID = remoteSampleGeneratorBatch_GetObjectID((uint64_t)a1, &v14);
  if ((_DWORD)ObjectID)
    goto LABEL_12;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_12;
  ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)ObjectID)
    goto LABEL_12;
  uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E0CA36A0]);
  if (!uint64)
  {
LABEL_11:
    ObjectID = FigSignalErrorAt();
LABEL_12:
    v9 = ObjectID;
    goto LABEL_10;
  }
  v7 = uint64;
  v8 = *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 56);
  v15 = 0;
  FigSampleGeneratorBatchGetClassID();
  v9 = CMDerivedObjectCreate();
  v10 = v15;
  if ((_DWORD)v9)
  {
    if (!v15)
      goto LABEL_10;
    goto LABEL_17;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 16) = FigSimpleMutexCreate();
  *(_QWORD *)DerivedStorage = v7;
  *(_BYTE *)(DerivedStorage + 24) = v8 == 0;
  *(_DWORD *)(DerivedStorage + 28) = 0;
  *(_QWORD *)(DerivedStorage + 40) = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]);
  *(_QWORD *)(DerivedStorage + 32) = CFRetain(a1);
  v12 = v15;
  v9 = FigXPCRemoteClientAssociateObject();
  if ((_DWORD)v9)
  {
    if (!v12)
      goto LABEL_10;
    v10 = v12;
LABEL_17:
    CFRelease(v10);
    goto LABEL_10;
  }
  *a3 = v12;
LABEL_10:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v9;
}

uint64_t remoteSampleGenerator_createSampleBuffer(uint64_t a1, uint64_t *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, CFTypeRef *);
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, CFTypeRef *);
  uint64_t ObjectID;
  uint64_t v16;
  uint64_t *SampleBufferRequestor;
  uint64_t SampleBufferGeneratorRequestXPCMessage;
  xpc_object_t value;
  _OWORD v21[3];
  uint64_t v22;
  CFTypeRef v23;
  CFTypeRef cf;
  CFTypeRef v25[2];
  xpc_object_t v26;
  xpc_object_t v27;

  v26 = 0;
  v27 = 0;
  v25[0] = 0;
  v25[1] = 0;
  v23 = 0;
  cf = 0;
  if (!a1 || !a2 || !*a2 || !a4 || (DerivedStorage = CMBaseObjectGetDerivedStorage(), *(_BYTE *)(DerivedStorage + 8)))
  {
    v12 = FigSignalErrorAt();
    goto LABEL_33;
  }
  v9 = DerivedStorage;
  v10 = *a2;
  v11 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v11)
    goto LABEL_14;
  v12 = v11(v10, &cf);
  if ((_DWORD)v12)
  {
LABEL_33:
    v16 = v12;
    goto LABEL_25;
  }
  v13 = *(uint64_t *)((char *)a2 + 28);
  if (!v13)
    goto LABEL_11;
  v14 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v14)
  {
LABEL_14:
    v16 = 4294954514;
    goto LABEL_25;
  }
  v12 = v14(v13, &v23);
  if ((_DWORD)v12)
    goto LABEL_33;
LABEL_11:
  MEMORY[0x19402EEEC](*(_QWORD *)(v9 + 16));
  if (a3 && (v22 = 0, ObjectID = remoteSampleGeneratorBatch_GetObjectID(a3, &v22), (_DWORD)ObjectID)
    || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID))
  {
    v16 = ObjectID;
    MEMORY[0x19402EF04](*(_QWORD *)(v9 + 16));
  }
  else
  {
    SampleBufferRequestor = CreateSampleBufferRequestor((uint64_t)a2, 1, 0, 0);
    memset(v21, 0, sizeof(v21));
    SampleBufferGeneratorRequestXPCMessage = remoteSampleGenerator_createSampleBufferGeneratorRequestXPCMessage((uint64_t)a2, cf, v23, (uint64_t)v21);
    if ((_DWORD)SampleBufferGeneratorRequestXPCMessage
      || (xpc_dictionary_set_data(v27, "SampleBufferGenerationRequest", v21, 0x30uLL),
          SampleBufferGeneratorRequestXPCMessage = FigXPCRemoteClientSendSyncMessageCreatingReply(),
          (_DWORD)SampleBufferGeneratorRequestXPCMessage)
      || (value = xpc_dictionary_get_value(v26, "SampleBufferResponse"),
          SampleBufferGeneratorRequestXPCMessage = remoteSampleGenerator_processSingleSampleBufferResponse(a1, SampleBufferRequestor, value, (void **)v25), (_DWORD)SampleBufferGeneratorRequestXPCMessage)|| !a3&& ((SampleBufferGeneratorRequestXPCMessage = FigXPCCreateBasicMessage(), (_DWORD)SampleBufferGeneratorRequestXPCMessage)|| (SampleBufferGeneratorRequestXPCMessage = FigXPCRemoteClientSendSyncMessage(), (_DWORD)SampleBufferGeneratorRequestXPCMessage)))
    {
      v16 = SampleBufferGeneratorRequestXPCMessage;
    }
    else
    {
      v16 = 0;
      *a4 = v25[0];
      v25[0] = 0;
    }
    MEMORY[0x19402EF04](*(_QWORD *)(v9 + 16));
    if (SampleBufferRequestor)
      free(SampleBufferRequestor);
  }
LABEL_25:
  if (cf)
    CFRelease(cf);
  if (v23)
    CFRelease(v23);
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRelease();
  if (v25[0])
    CFRelease(v25[0]);
  return v16;
}

uint64_t remoteSampleGeneratorBatch_GetObjectID(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8))
    return FigSignalErrorAt();
  *a2 = *(_QWORD *)DerivedStorage;
  return 0;
}

_QWORD *CreateSampleBufferRequestor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;

  v8 = malloc_type_calloc(1uLL, 0x20uLL, 0x10E00403B2942D6uLL);
  v9 = v8;
  if (v8)
  {
    *v8 = a2;
    v8[1] = a1;
    v8[2] = a3;
    v8[3] = a4;
  }
  else
  {
    FigSignalErrorAt();
  }
  return v9;
}

uint64_t remoteSampleGenerator_createSampleBufferGeneratorRequestXPCMessage(uint64_t a1, const void *a2, const void *a3, uint64_t a4)
{
  _QWORD *v6;
  _QWORD *v7;

  if (a1
    && a4
    && (*(_DWORD *)(a4 + 16) = *(_DWORD *)(a1 + 24),
        *(_OWORD *)a4 = *(_OWORD *)(a1 + 8),
        *(_QWORD *)(a4 + 20) = *(_QWORD *)(a1 + 36),
        a2)
    && (v6 = (_QWORD *)(a4 + 32), !FigSampleCursorXPCRemoteGetObjectID(a2, (_QWORD *)(a4 + 32)))
    && *v6
    && (!a3 || (v7 = (_QWORD *)(a4 + 40), !FigSampleCursorXPCRemoteGetObjectID(a3, v7)) && *v7))
  {
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t remoteSampleGenerator_processSingleSampleBufferResponse(uint64_t a1, uint64_t *a2, void *a3, void **a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  BOOL v9;
  int64_t int64;
  unsigned int v11;
  const void *v12;
  void *v13;
  uint64_t v14;
  unsigned int (*v15)(_QWORD, _QWORD, void *);
  void (*v16)(uint64_t, uint64_t, int64_t, void *);
  int64_t v18;
  void *value;

  value = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  if (a3
    && (v8 = DerivedStorage,
        v9 = xpc_dictionary_get_BOOL(a3, "SampleBufferDataReady"),
        int64 = xpc_dictionary_get_int64(a3, "SampleBufferErrorReturn"),
        v18 = xpc_dictionary_get_int64(a3, "RequestID"),
        v11 = v18,
        v18 < *a2))
  {
    if ((_DWORD)int64 || (v12 = (const void *)FigXPCMessageCopyCMSampleBuffer(), !(_DWORD)v12))
    {
      if (v9)
      {
        v12 = 0;
      }
      else
      {
        MEMORY[0x19402EEEC](*(_QWORD *)(v8 + 32));
        v12 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &v18);
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(v8 + 24), v12, value);
        MEMORY[0x19402EF04](*(_QWORD *)(v8 + 32));
      }
      v13 = value;
      v14 = a2[1];
      if (value)
      {
        v15 = *(unsigned int (**)(_QWORD, _QWORD, void *))(v14 + 68 * v11 + 44);
        if (v15)
        {
          if (v15(*(_QWORD *)(v14 + 68 * v11 + 52), *(_QWORD *)(v14 + 68 * v11 + 60), value))
            FigSignalErrorAt();
        }
      }
      v16 = (void (*)(uint64_t, uint64_t, int64_t, void *))a2[3];
      if (v16)
        v16(a2[2], v14 + 68 * v11, int64, v13);
      if (a4)
      {
        *a4 = value;
        value = 0;
      }
      if (v12)
      {
        CFRelease(v12);
        v12 = 0;
      }
    }
  }
  else
  {
    v12 = (const void *)FigSignalErrorAt();
  }
  if (value)
    CFRelease(value);
  return (uint64_t)v12;
}

uint64_t remoteSampleGeneratorBatch_Finalize(void *a1)
{
  uint64_t DerivedStorage;
  const __CFSet *v3;
  void (*v4)(void *);
  const void *v5;
  const void *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(const __CFSet **)(DerivedStorage + 40);
  if (v3)
    CFSetApplyFunction(v3, (CFSetApplierFunction)remoteSampleGeneratorBatch_removeListener, a1);
  if (!*(_DWORD *)(DerivedStorage + 28))
  {
    v4 = *(void (**)(void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v4)
      v4(a1);
  }
  FigSimpleMutexDestroy();
  v5 = *(const void **)(DerivedStorage + 40);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(DerivedStorage + 32);
  if (v6)
    CFRelease(v6);
  FigXPCRemoteClientDisassociateObject();
  if (*(_QWORD *)DerivedStorage && !*(_BYTE *)(DerivedStorage + 8) && !FigXPCCreateBasicMessage())
    FigXPCRemoteClientSendAsyncMessage();
  return FigXPCRelease();
}

__CFString *remoteSampleGeneratorBatch_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;
  const char *v6;
  uint64_t v7;
  const char *v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(a1);
  v6 = "open";
  v7 = *(unsigned int *)(DerivedStorage + 28);
  if ((int)v7 > 1)
    v6 = "completed";
  if ((_DWORD)v7 == 1)
    v6 = "committed";
  if (*(_BYTE *)(DerivedStorage + 8))
    v8 = " SERVER DIED";
  else
    v8 = "";
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigSampleGeneratorBatchRemote(XPC) %p retainCount: %ld ObjectID: %016llx%s State: %s(%d)"), a1, v5, *(_QWORD *)DerivedStorage, v8, v6, v7);
  return Mutable;
}

uint64_t remoteSampleGeneratorBatch_removeListener()
{
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  return FigNotificationCenterRemoveWeakListener();
}

uint64_t remoteSampleGeneratorBatch_completionCallback(uint64_t a1, uint64_t a2, uint64_t a3, opaqueCMSampleBuffer *a4)
{
  uint64_t DerivedStorage;
  int HasDataFailed;
  OSStatus v7;
  uint64_t v8;
  int v10;
  OSStatus statusOut;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
  if (FigCFEqual())
  {
    statusOut = 0;
    HasDataFailed = CMSampleBufferHasDataFailed(a4, &statusOut);
    v7 = statusOut;
    v8 = CMBaseObjectGetDerivedStorage();
    if (v7 != -16751 || HasDataFailed == 0)
      v10 = 3;
    else
      v10 = 4;
    *(_DWORD *)(v8 + 28) = v10;
  }
  CFSetRemoveValue(*(CFMutableSetRef *)(DerivedStorage + 40), a4);
  if (!CFSetGetCount(*(CFSetRef *)(DerivedStorage + 40)))
  {
    if ((*(_DWORD *)(DerivedStorage + 28) - 3) >= 2)
      *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 28) = 2;
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  return MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
}

uint64_t remoteSampleGeneratorBatch_CreateAndAddSampleBufferAtCursor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CMSampleBufferRef *a12)
{
  uint64_t DerivedStorage;
  opaqueCMSampleBuffer *v21;
  uint64_t v22;
  uint64_t v24[3];
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  CMSampleBufferRef sbuf;

  sbuf = 0;
  if (!a1 || !a12)
  {
    v22 = FigSignalErrorAt();
    goto LABEL_14;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
  if (!*(_DWORD *)(DerivedStorage + 28))
  {
    v24[0] = a2;
    v24[1] = a3;
    v24[2] = a4;
    v25 = a5;
    v26 = a6;
    v27 = a7;
    v28 = a8;
    v30 = a10;
    v29 = a9;
    v31 = a11;
    if (!remoteSampleGenerator_createSampleBuffer(*(_QWORD *)(DerivedStorage + 32), v24, a1, (CFTypeRef *)&sbuf))
    {
      v21 = sbuf;
      if (sbuf)
      {
        if (!*(_BYTE *)(DerivedStorage + 24))
        {
LABEL_9:
          if (!CMSampleBufferDataIsReady(v21))
          {
            CFSetAddValue(*(CFMutableSetRef *)(DerivedStorage + 40), sbuf);
            CMNotificationCenterGetDefaultLocalCenter();
            FigNotificationCenterAddWeakListener();
            CMNotificationCenterGetDefaultLocalCenter();
            FigNotificationCenterAddWeakListener();
          }
          v22 = 0;
          *a12 = sbuf;
          sbuf = 0;
          goto LABEL_12;
        }
        if (CMSampleBufferDataIsReady(sbuf))
        {
          v21 = sbuf;
          goto LABEL_9;
        }
      }
    }
  }
  v22 = FigSignalErrorAt();
LABEL_12:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
  if (sbuf)
    CFRelease(sbuf);
LABEL_14:
  FigXPCRemoteClientKillServerOnTimeout();
  return v22;
}

uint64_t remoteSampleGeneratorBatch_Commit(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = 0;
  if (!a1)
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_13;
  }
  ObjectID = remoteSampleGeneratorBatch_GetObjectID(a1, &v6);
  if ((_DWORD)ObjectID)
  {
LABEL_13:
    v4 = ObjectID;
    goto LABEL_11;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
  if (*(_DWORD *)(DerivedStorage + 28))
  {
    v3 = FigSignalErrorAt();
  }
  else
  {
    *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 28) = 1;
    v3 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v3)
    {
      v3 = FigXPCRemoteClientSendSyncMessage();
      if (!(_DWORD)v3)
      {
        if (!CFSetGetCount(*(CFSetRef *)(DerivedStorage + 40)) || *(_BYTE *)(DerivedStorage + 24))
        {
          *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 28) = 2;
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterPostNotification();
        }
        v4 = 0;
        goto LABEL_10;
      }
    }
  }
  v4 = v3;
LABEL_10:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
LABEL_11:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t remoteSampleGeneratorBatch_Cancel(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = 0;
  if (!a1)
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_11;
  }
  ObjectID = remoteSampleGeneratorBatch_GetObjectID(a1, &v6);
  if ((_DWORD)ObjectID)
  {
LABEL_11:
    v3 = ObjectID;
    goto LABEL_9;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
  if (*(_DWORD *)(DerivedStorage + 28) == 2)
  {
    v3 = 0;
  }
  else
  {
    *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 28) = 4;
    v4 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v4)
      v4 = FigXPCRemoteClientSendSyncMessage();
    v3 = v4;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
LABEL_9:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t remoteSampleGeneratorBatch_GetState(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;

  if (a1)
  {
    v2 = 0;
    *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 28);
  }
  else
  {
    v2 = FigSignalErrorAt();
  }
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t FigMediaProcessorCreateForCustom(const __CFAllocator *a1, const __CFString *a2, uint64_t a3, uint64_t a4, const void *a5, void *a6, uint64_t a7, __int128 *a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12, int a13, uint64_t *a14)
{
  uint64_t v19;
  const __CFAllocator *v20;
  uint64_t v21;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  CFTypeRef v32;
  CFTypeRef v33;
  CFTypeRef cf;
  const void *v35;

  v35 = 0;
  v33 = 0;
  cf = 0;
  v32 = 0;
  if ((a5 == 0) != (a6 != 0) || !a9)
    return FigSignalErrorAt();
  v19 = FigSampleBufferProcessorCreateForCustom((int)a1, a2, a3, a4, &v35);
  if (!(_DWORD)v19)
  {
    v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (a5)
    {
      v21 = FigSampleBufferProviderCreateForBufferQueue((uint64_t)v20, a5, &cf);
    }
    else
    {
      v23 = *(_OWORD *)a7;
      v31 = *(_QWORD *)(a7 + 16);
      v24 = a8[1];
      v27 = *a8;
      v28 = v24;
      v29 = a8[2];
      v30 = v23;
      v21 = FigSampleBufferProviderCreateForVisualContext(v20, a6, &v30, &v27, &cf);
    }
    v25 = v21;
    if ((_DWORD)v21)
      goto LABEL_16;
    v27 = *(_OWORD *)a10;
    *(_QWORD *)&v28 = *(_QWORD *)(a10 + 16);
    v30 = *(_OWORD *)a11;
    v31 = *(_QWORD *)(a11 + 16);
    v25 = FigSampleBufferConsumerCreateForBufferQueue(a9, (uint64_t)&v27, (uint64_t)&v30, &v33);
    if ((_DWORD)v25)
      goto LABEL_16;
    v26 = a12
        ? FigActivitySchedulerCreateForCFRunLoop(a1, a12, &v32)
        : FigActivitySchedulerCreateForNewThread((uint64_t)a1, a13, CFSTR("com.apple.coremedia.mediaprocessor.videocustom"), &v32);
    v25 = v26;
    if ((_DWORD)v26)
      goto LABEL_16;
    v19 = FigMediaProcessorCreate((uint64_t)a1, v35, cf, v33, v32, a14);
  }
  v25 = v19;
LABEL_16:
  if (cf)
    CFRelease(cf);
  if (v32)
    CFRelease(v32);
  if (v35)
    CFRelease(v35);
  if (v33)
    CFRelease(v33);
  return v25;
}

uint64_t FigSampleBufferProcessorCreateCustomProcessors(CFStringRef theString, __CFArray **a2)
{
  const __CFAllocator *v3;
  const __CFArray *ArrayBySeparatingStrings;
  const __CFArray *v5;
  CFIndex Count;
  uint64_t v7;
  __CFArray *Mutable;
  CFIndex i;
  const void *ValueAtIndex;
  void *value;

  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theString, CFSTR(","));
  if (ArrayBySeparatingStrings)
  {
    v5 = ArrayBySeparatingStrings;
    Count = CFArrayGetCount(ArrayBySeparatingStrings);
    if (Count)
    {
      v7 = Count;
      Mutable = CFArrayCreateMutable(v3, Count, MEMORY[0x1E0C9B378]);
      if (v7 >= 1)
      {
        for (i = 0; i != v7; ++i)
        {
          value = 0;
          ValueAtIndex = CFArrayGetValueAtIndex(v5, i);
          if (CFEqual(ValueAtIndex, CFSTR("monochrome")))
            FigSampleBufferProcessorCreateForMonochrome((uint64_t)v3, &value);
          if (value)
          {
            CFArrayAppendValue(Mutable, value);
            CFRelease(value);
          }
        }
      }
      if (Mutable)
      {
        if (CFArrayGetCount(Mutable) < 1)
        {
          *a2 = 0;
          CFRelease(Mutable);
        }
        else
        {
          *a2 = Mutable;
        }
      }
    }
    CFRelease(v5);
  }
  return 0;
}

uint64_t FigSampleBufferProcessorCreateForCustom(int a1, const __CFString *cf1, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t (*v12)(_QWORD, uint64_t, uint64_t *);
  uint64_t v13;
  char __symbol[1024];
  char __str[1024];
  char buffer[1024];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13 = 0;
  if (CFEqual(cf1, CFSTR("monochrome")))
  {
    result = FigSampleBufferProcessorCreateForMonochrome(*MEMORY[0x1E0C9AE00], &v13);
  }
  else
  {
    if (!CFStringGetCString(cf1, buffer, 1024, 0x8000100u)
      || (snprintf(__str, 0x400uLL, "%s/%s.videoprocessor", "/System/Library/VideoProcessors", buffer),
          snprintf(__symbol, 0x400uLL, "%s%s", "FigSampleBufferProcessorCreateFor", buffer),
          (v11 = dlopen(__str, 4)) == 0)
      || (v12 = (uint64_t (*)(_QWORD, uint64_t, uint64_t *))dlsym(v11, __symbol)) == 0)
    {
      v9 = v13;
      result = 4294954516;
      goto LABEL_13;
    }
    result = v12(*MEMORY[0x1E0C9AE00], a3, &v13);
  }
  v9 = v13;
  if (v13)
    v10 = 0;
  else
    v10 = 4294954516;
  if (!(_DWORD)result)
    result = v10;
LABEL_13:
  *a5 = v9;
  return result;
}

CFURLRef FigFairPlayCopyDefaultKeybagFolderURL()
{
  uid_t v0;
  passwd *v1;
  const __CFAllocator *v2;
  size_t v3;
  CFURLRef result;
  char __str[1024];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v0 = getuid();
  v1 = getpwuid(v0);
  if (v1)
  {
    snprintf(__str, 0x400uLL, "%s/Media/iTunes_Control/iTunes/", v1->pw_dir);
    v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v3 = strlen(__str);
    result = CFURLCreateFromFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)__str, v3, 1u);
    if (result)
      return result;
  }
  else
  {
    v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  }
  return CFURLCreateWithFileSystemPath(v2, CFSTR("/"), kCFURLPOSIXPathStyle, 1u);
}

const __CFString *FigFairPlayCopyAbsolutePathFromURL(const __CFURL *a1)
{
  const __CFURL *v1;
  const __CFURL *v2;
  CFStringRef v3;

  if (a1 && (v1 = CFURLCopyAbsoluteURL(a1)) != 0)
  {
    v2 = v1;
    v3 = CFURLCopyFileSystemPath(v1, kCFURLPOSIXPathStyle);
    CFRelease(v2);
  }
  else
  {
    v3 = 0;
  }
  if (v3)
    return v3;
  else
    return CFSTR("/");
}

CFDictionaryRef FigFairPlayCreateSinfExtensionsFromSinfData(unint64_t a1, unint64_t a2)
{
  CFIndex v2;
  void *keys[2];
  void *values[3];

  values[2] = *(void **)MEMORY[0x1E0C80C00];
  values[0] = 0;
  values[1] = 0;
  keys[0] = 0;
  keys[1] = 0;
  if (a1 | a2)
  {
    if (a1)
    {
      values[0] = (void *)a1;
      keys[0] = CFSTR("sinf");
      v2 = 1;
      if (!a2)
        return CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)values, v2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    }
    else
    {
      v2 = 0;
      if (!a2)
        return CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)values, v2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    }
    values[v2] = (void *)a2;
    keys[v2++] = CFSTR("UUID");
    return CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)values, v2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  }
  return 0;
}

CFDictionaryRef FigFairPlayCreateSinfExtensionsFromPinfData(unint64_t a1, unint64_t a2)
{
  CFIndex v2;
  void *keys[2];
  void *values[3];

  values[2] = *(void **)MEMORY[0x1E0C80C00];
  values[0] = 0;
  values[1] = 0;
  keys[0] = 0;
  keys[1] = 0;
  if (a1 | a2)
  {
    if (a1)
    {
      values[0] = (void *)a1;
      keys[0] = CFSTR("pinf");
      v2 = 1;
      if (!a2)
        return CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)values, v2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    }
    else
    {
      v2 = 0;
      if (!a2)
        return CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)values, v2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    }
    values[v2] = (void *)a2;
    keys[v2++] = CFSTR("dpInfo");
    return CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)values, v2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  }
  return 0;
}

CFDictionaryRef FigFairPlayCopySinfExtensionsFromFormatDescription(const opaqueCMFormatDescription *a1)
{
  const opaqueCMFormatDescription *v1;
  const __CFDictionary *Extension;
  const __CFDictionary *v3;
  CFTypeID v4;
  const __CFData *Value;
  const __CFData *v6;
  CFTypeID v7;
  CFIndex v8;
  __CFData *Mutable;
  UInt8 *MutableBytePtr;
  void *v11;
  const UInt8 *BytePtr;
  size_t Length;
  CFIndex v14;
  uint64_t v15;
  char v16;
  char v17;
  __CFString *v18;
  const __CFData *v19;
  const __CFData *v20;
  CFTypeID v21;
  const UInt8 *v22;
  const __CFAllocator *v24;
  CFDictionaryRef v25;
  CFIndex v26;
  __CFData *v27;
  UInt8 *v28;
  void *v29;
  const UInt8 *v30;
  size_t v31;
  const void *v32;
  const UInt8 *MagicCookie;
  int v36;
  const opaqueCMFormatDescription *v37;
  void *keys;
  uint64_t v39;
  void *values[3];

  v1 = a1;
  values[2] = *(void **)MEMORY[0x1E0C80C00];
  Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E0CA2240]);
  if (!Extension)
    goto LABEL_33;
  v3 = Extension;
  v4 = CFGetTypeID(Extension);
  if (v4 != CFDictionaryGetTypeID())
    goto LABEL_33;
  v37 = v1;
  keys = 0;
  values[0] = 0;
  values[1] = 0;
  v39 = 0;
  Value = (const __CFData *)CFDictionaryGetValue(v3, CFSTR("sinf"));
  if (!Value)
    goto LABEL_6;
  v6 = Value;
  v7 = CFGetTypeID(Value);
  if (v7 == CFDataGetTypeID())
  {
    v8 = CFDataGetLength(v6) + 8;
    Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v8);
    CFDataIncreaseLength(Mutable, v8);
    MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
    *(_DWORD *)MutableBytePtr = bswap32(v8);
    *((_DWORD *)MutableBytePtr + 1) = 1718511987;
    v11 = MutableBytePtr + 8;
    BytePtr = CFDataGetBytePtr(v6);
    Length = CFDataGetLength(v6);
    memcpy(v11, BytePtr, Length);
    keys = CFSTR("sinf");
    values[0] = Mutable;
    v36 = 1;
    v14 = 1;
  }
  else
  {
LABEL_6:
    v36 = 0;
    v14 = 0;
  }
  v15 = 0;
  v16 = 1;
  do
  {
    v17 = v16;
    v18 = off_1E2FA2450[v15];
    v19 = (const __CFData *)CFDictionaryGetValue(v3, v18);
    if (v19)
    {
      v20 = v19;
      v21 = CFGetTypeID(v19);
      if (v21 == CFDataGetTypeID() && (unint64_t)CFDataGetLength(v20) >= 0x10)
      {
        v22 = CFDataGetBytePtr(v20);
        if (*(_QWORD *)v22 == 0xA7458277191E8547 && *((_QWORD *)v22 + 1) == 0x65FB4846FF1A9E8FLL)
        {
          v26 = CFDataGetLength(v20) + 8;
          v24 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          v27 = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v26);
          CFDataIncreaseLength(v27, v26);
          v28 = CFDataGetMutableBytePtr(v27);
          *(_DWORD *)v28 = bswap32(v26);
          *((_DWORD *)v28 + 1) = bswap32(*(_DWORD *)&aDiuudiuufnisih[4 * v15]);
          v29 = v28 + 8;
          v30 = CFDataGetBytePtr(v20);
          v31 = CFDataGetLength(v20);
          memcpy(v29, v30, v31);
          *(&keys + v14) = (void *)CFRetain(v18);
          values[v14++] = v27;
          goto LABEL_20;
        }
      }
    }
    v16 = 0;
    v15 = 1;
  }
  while ((v17 & 1) != 0);
  if (!v36)
  {
    v25 = 0;
    v1 = v37;
    goto LABEL_21;
  }
  v24 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
LABEL_20:
  v1 = v37;
  v25 = CFDictionaryCreate(v24, (const void **)&keys, (const void **)values, v14, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
LABEL_21:
  if (v14 >= 1)
  {
    do
    {
      v32 = values[v14 - 1];
      if (v32)
        CFRelease(v32);
    }
    while ((unint64_t)v14-- > 1);
  }
  if (!v25)
  {
LABEL_33:
    if (CMFormatDescriptionGetMediaType(v1) == 1936684398
      && (values[0] = 0,
          (MagicCookie = (const UInt8 *)CMAudioFormatDescriptionGetMagicCookie(v1, (size_t *)values)) != 0))
    {
      return FigFairPlayCopySinfExtensionsFromAtomContainer(MagicCookie);
    }
    else
    {
      return 0;
    }
  }
  return v25;
}

CFDictionaryRef FigFairPlayCopySinfExtensionsFromAtomContainer(const UInt8 *a1)
{
  CFDictionaryRef v2;
  int v3;
  unint64_t v4;
  const void *v5;
  void *keys;
  uint64_t v9;
  void *values[3];

  values[2] = *(void **)MEMORY[0x1E0C80C00];
  values[0] = 0;
  values[1] = 0;
  keys = 0;
  v9 = 0;
  v2 = 0;
  if (!FigAtomStreamInitWithMemoryBlock())
  {
    if (FigAtomStreamPositionAtFirstAtomWithType()
      || FigAtomStreamGetCurrentAtomGlobalOffset())
    {
      v3 = 0;
    }
    else
    {
      keys = CFSTR("sinf");
      values[0] = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1, 0);
      v3 = 1;
    }
    if (!FigAtomStreamPositionAtFirstAtomWithType())
      FigAtomStreamGetCurrentAtomGlobalOffset();
    if (!FigAtomStreamPositionAtFirstAtomWithType())
      FigAtomStreamGetCurrentAtomUUIDType();
    if (v3)
    {
      v4 = 1;
      v2 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&keys, (const void **)values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      do
      {
        v5 = values[v4 - 1];
        if (v5)
          CFRelease(v5);
      }
      while (v4-- > 1);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

const void *FigFairPlayGetBestSinfFromSinfExtensions(const __CFDictionary *a1)
{
  const __CFString *v2;
  const void *result;

  if (CFDictionaryContainsKey(a1, CFSTR("UUID")))
    v2 = CFSTR("UUID");
  else
    v2 = CFSTR("uuid");
  result = CFDictionaryGetValue(a1, v2);
  if (!result)
  {
    result = CFDictionaryGetValue(a1, CFSTR("sinf"));
    if (!result)
    {
      result = CFDictionaryGetValue(a1, CFSTR("pinf"));
      if (!result)
        return CFDictionaryGetValue(a1, CFSTR("dpInfo"));
    }
  }
  return result;
}

const void *FigFairPlayGetExtendedSinfFromSinfExtensions(const __CFDictionary *a1)
{
  const __CFString *v2;

  if (CFDictionaryContainsKey(a1, CFSTR("UUID")))
    v2 = CFSTR("UUID");
  else
    v2 = CFSTR("uuid");
  return CFDictionaryGetValue(a1, v2);
}

const void *FigFairPlayGetLegacySinfFromSinfExtensions(const __CFDictionary *a1)
{
  return CFDictionaryGetValue(a1, CFSTR("sinf"));
}

const void *FigFairPlayGetDPInfoFromSinfExtensions(const __CFDictionary *a1)
{
  return CFDictionaryGetValue(a1, CFSTR("dpInfo"));
}

uint64_t FigFairPlayGetSkipParametersFromSinf(const __CFDictionary *a1, _DWORD *a2)
{
  const __CFData *BestSinfFromSinfExtensions;
  const __CFData *v4;
  const UInt8 *BytePtr;
  CFIndex Length;
  uint64_t v7;
  uint64_t result;
  int v9;
  int v10;
  int v11;
  const UInt8 *v12;
  CFIndex v13;
  uint64_t v14;
  const UInt8 *v15;
  CFIndex v16;
  uint64_t v17;
  uint64_t v18;

  BestSinfFromSinfExtensions = (const __CFData *)FigFairPlayGetBestSinfFromSinfExtensions(a1);
  if (BestSinfFromSinfExtensions)
  {
    v4 = BestSinfFromSinfExtensions;
    v18 = 0;
    BytePtr = CFDataGetBytePtr(BestSinfFromSinfExtensions);
    Length = CFDataGetLength(v4);
    hZZRqgZwI((uint64_t)BytePtr, Length, 19, (uint64_t)&v18);
    result = FAIRPLAY_CALL_LOG(v7);
    if ((_DWORD)result)
    {
      v9 = 0;
LABEL_7:
      v10 = 0;
      goto LABEL_8;
    }
    v9 = v18;
    v12 = CFDataGetBytePtr(v4);
    v13 = CFDataGetLength(v4);
    hZZRqgZwI((uint64_t)v12, v13, 20, (uint64_t)&v18);
    result = FAIRPLAY_CALL_LOG(v14);
    if ((_DWORD)result)
      goto LABEL_7;
    v10 = v18;
    v15 = CFDataGetBytePtr(v4);
    v16 = CFDataGetLength(v4);
    hZZRqgZwI((uint64_t)v15, v16, 21, (uint64_t)&v18);
    result = FAIRPLAY_CALL_LOG(v17);
    if ((_DWORD)result)
    {
LABEL_8:
      v11 = 0;
      if (!a2)
        return result;
      goto LABEL_9;
    }
    v11 = v18;
    if (!a2)
      return result;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    result = 4294955146;
    if (!a2)
      return result;
  }
LABEL_9:
  *a2 = v9;
  a2[1] = v10;
  a2[2] = v11;
  return result;
}

uint64_t FigFairPlayGetMediaKindFromSinf(const __CFDictionary *a1, uint64_t *a2)
{
  const __CFData *BestSinfFromSinfExtensions;
  const __CFData *v4;
  const UInt8 *BytePtr;
  CFIndex Length;
  uint64_t v7;
  uint64_t result;
  _BOOL4 v9;
  _BOOL4 v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;

  v13 = 0;
  BestSinfFromSinfExtensions = (const __CFData *)FigFairPlayGetBestSinfFromSinfExtensions(a1);
  if (!BestSinfFromSinfExtensions)
  {
    v12 = 0;
    result = 4294955146;
    if (!a2)
      return result;
    goto LABEL_9;
  }
  v4 = BestSinfFromSinfExtensions;
  BytePtr = CFDataGetBytePtr(BestSinfFromSinfExtensions);
  Length = CFDataGetLength(v4);
  hZZRqgZwI((uint64_t)BytePtr, Length, 11, (uint64_t)&v13);
  LODWORD(result) = FAIRPLAY_CALL_LOG(v7);
  v9 = result == 0;
  v10 = v13 == 0;
  v11 = !v9 || !v10;
  if (v9 && v10)
    v12 = 1;
  else
    v12 = v13;
  if (v11)
    result = result;
  else
    result = 0;
  if (a2)
LABEL_9:
    *a2 = v12;
  return result;
}

uint64_t FigFairPlayGetSchemeFromSinf(const __CFDictionary *a1, unsigned int *a2)
{
  const __CFData *Value;
  const __CFData *v5;
  const UInt8 *BytePtr;
  CFIndex Length;
  uint64_t result;
  unsigned int v9;
  const __CFString *v10;
  const __CFData *v11;
  const __CFData *v12;
  const UInt8 *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  Value = (const __CFData *)CFDictionaryGetValue(a1, CFSTR("sinf"));
  if (Value)
  {
    v5 = Value;
    v15 = 0;
    v16[0] = 0x7363686D73696E66;
    v14 = 0;
    BytePtr = CFDataGetBytePtr(Value);
    Length = CFDataGetLength(v5);
    result = FigFairPlayGetSinfChildDataWithPath((uint64_t)BytePtr, Length, (uint64_t)v16, 2, &v15, &v14);
    if ((_DWORD)result)
    {
      v9 = 0;
      if (!a2)
        return result;
      goto LABEL_20;
    }
    if (v14 != 12)
    {
      v9 = 0;
      result = 4294925279;
      if (!a2)
        return result;
      goto LABEL_20;
    }
    result = 0;
    v9 = bswap32(*(_DWORD *)(v15 + 4));
    if (a2)
LABEL_20:
      *a2 = v9;
  }
  else
  {
    if (CFDictionaryContainsKey(a1, CFSTR("UUID")))
      v10 = CFSTR("UUID");
    else
      v10 = CFSTR("uuid");
    v11 = (const __CFData *)CFDictionaryGetValue(a1, v10);
    if (v11 && (v12 = v11, (unint64_t)CFDataGetLength(v11) >= 0x18))
    {
      v13 = CFDataGetBytePtr(v12);
      if (*((_QWORD *)v13 + 1) ^ 0xA7458277191E8547 | *((_QWORD *)v13 + 2) ^ 0x65FB4846FF1A9E8FLL)
        v9 = 0;
      else
        v9 = 1769239918;
    }
    else
    {
      v9 = 0;
    }
    result = 4294955146;
    if (a2)
      goto LABEL_20;
  }
  return result;
}

uint64_t FigFairPlayGetSinfChildDataWithPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t result;

  result = 4294955146;
  if (a1)
  {
    if (a3)
    {
      result = FigAtomStreamInitWithMemoryBlock();
      if (!(_DWORD)result)
      {
        result = FigAtomStreamPositionViaAtomPath();
        if (!(_DWORD)result)
        {
          result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
          if (!(_DWORD)result)
          {
            result = FigAtomStreamGetCurrentAtomDataGlobalOffset();
            if (!(_DWORD)result)
            {
              if (a5)
                *a5 = a1;
              result = 0;
              if (a6)
                *a6 = 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t FigFairPlayIsRentalSinf(const __CFDictionary *a1, BOOL *a2)
{
  const __CFData *BestSinfFromSinfExtensions;
  const __CFData *v4;
  const UInt8 *BytePtr;
  CFIndex Length;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v9 = 1;
  BestSinfFromSinfExtensions = (const __CFData *)FigFairPlayGetBestSinfFromSinfExtensions(a1);
  if (BestSinfFromSinfExtensions)
  {
    v4 = BestSinfFromSinfExtensions;
    BytePtr = CFDataGetBytePtr(BestSinfFromSinfExtensions);
    Length = CFDataGetLength(v4);
    hZZRqgZwI((uint64_t)BytePtr, Length, 14, (uint64_t)&v9);
    result = FAIRPLAY_CALL_LOG(v7);
    if (!a2)
      return result;
  }
  else
  {
    result = 4294955146;
    if (!a2)
      return result;
  }
  *a2 = v9 != 0;
  return result;
}

uint64_t FigFairPlayIsHDCPRequiredSinf(const __CFDictionary *a1, BOOL *a2)
{
  const __CFData *BestSinfFromSinfExtensions;
  const __CFData *v4;
  const UInt8 *BytePtr;
  CFIndex Length;
  uint64_t v7;
  uint64_t result;
  const UInt8 *v9;
  CFIndex v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = 4;
  v12 = 0x40000000;
  BestSinfFromSinfExtensions = (const __CFData *)FigFairPlayGetBestSinfFromSinfExtensions(a1);
  if (BestSinfFromSinfExtensions)
  {
    v4 = BestSinfFromSinfExtensions;
    BytePtr = CFDataGetBytePtr(BestSinfFromSinfExtensions);
    Length = CFDataGetLength(v4);
    hZZRqgZwI((uint64_t)BytePtr, Length, 15, (uint64_t)&v13);
    result = FAIRPLAY_CALL_LOG(v7);
    if (!(_DWORD)result)
    {
      v9 = CFDataGetBytePtr(v4);
      v10 = CFDataGetLength(v4);
      hZZRqgZwI((uint64_t)v9, v10, 12, (uint64_t)&v12);
      result = FAIRPLAY_CALL_LOG(v11);
    }
  }
  else
  {
    result = 4294955146;
  }
  if (a2)
    *a2 = v12 != 0;
  return result;
}

uint64_t FigFairPlayIsLowValueSinf(const __CFDictionary *a1, BOOL *a2)
{
  const __CFData *BestSinfFromSinfExtensions;
  const __CFData *v4;
  const UInt8 *BytePtr;
  CFIndex Length;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v9 = 0;
  BestSinfFromSinfExtensions = (const __CFData *)FigFairPlayGetBestSinfFromSinfExtensions(a1);
  if (BestSinfFromSinfExtensions)
  {
    v4 = BestSinfFromSinfExtensions;
    BytePtr = CFDataGetBytePtr(BestSinfFromSinfExtensions);
    Length = CFDataGetLength(v4);
    hZZRqgZwI((uint64_t)BytePtr, Length, 16, (uint64_t)&v9);
    result = FAIRPLAY_CALL_LOG(v7);
    if (!a2)
      return result;
  }
  else
  {
    result = 4294955146;
    if (!a2)
      return result;
  }
  *a2 = v9 != 0;
  return result;
}

uint64_t FigFairPlayIsSkipEncrypted(const __CFDictionary *a1, BOOL *a2)
{
  const __CFData *BestSinfFromSinfExtensions;
  const __CFData *v4;
  const UInt8 *BytePtr;
  CFIndex Length;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v9 = 0;
  BestSinfFromSinfExtensions = (const __CFData *)FigFairPlayGetBestSinfFromSinfExtensions(a1);
  if (!BestSinfFromSinfExtensions)
    return 4294955146;
  v4 = BestSinfFromSinfExtensions;
  BytePtr = CFDataGetBytePtr(BestSinfFromSinfExtensions);
  Length = CFDataGetLength(v4);
  hZZRqgZwI((uint64_t)BytePtr, Length, 13, (uint64_t)&v9);
  result = FAIRPLAY_CALL_LOG(v7);
  if (a2)
  {
    if (!(_DWORD)result)
      *a2 = v9 == 3;
  }
  return result;
}

uint64_t FigFairPlayIsPreviewEncrypted(const __CFDictionary *a1, BOOL *a2)
{
  const __CFData *BestSinfFromSinfExtensions;
  const __CFData *v4;
  const UInt8 *BytePtr;
  CFIndex Length;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v9 = 0;
  BestSinfFromSinfExtensions = (const __CFData *)FigFairPlayGetBestSinfFromSinfExtensions(a1);
  if (!BestSinfFromSinfExtensions)
    return 4294955146;
  v4 = BestSinfFromSinfExtensions;
  BytePtr = CFDataGetBytePtr(BestSinfFromSinfExtensions);
  Length = CFDataGetLength(v4);
  hZZRqgZwI((uint64_t)BytePtr, Length, 1, (uint64_t)&v9);
  result = FAIRPLAY_CALL_LOG(v7);
  if (a2)
  {
    if (!(_DWORD)result)
      *a2 = v9 == 0;
  }
  return result;
}

uint64_t FigFairPlayIsPlaceholder(const __CFDictionary *a1, BOOL *a2)
{
  const __CFData *Value;
  const __CFData *v4;
  const UInt8 *BytePtr;
  CFIndex Length;
  BOOL v7;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)"fnisihcsresu";
  v10 = 1970496882;
  Value = (const __CFData *)CFDictionaryGetValue(a1, CFSTR("sinf"));
  if (!Value)
  {
    v7 = 0;
    if (!a2)
      return 0;
    goto LABEL_3;
  }
  v4 = Value;
  BytePtr = CFDataGetBytePtr(Value);
  Length = CFDataGetLength(v4);
  v7 = FigFairPlayGetSinfChildDataWithPath((uint64_t)BytePtr, Length, (uint64_t)&v9, 3, 0, 0) != 0;
  if (a2)
LABEL_3:
    *a2 = v7;
  return 0;
}

uint64_t FigFairPlayGetSinfExtensionType(const __CFDictionary *a1, int *a2)
{
  int v4;
  uint64_t result;

  if (!a1)
    return 4294955146;
  if (!a2)
    return 0;
  if (CFDictionaryContainsKey(a1, CFSTR("sinf"))
    || CFDictionaryContainsKey(a1, CFSTR("UUID"))
    || CFDictionaryContainsKey(a1, CFSTR("uuid")))
  {
    v4 = 1;
  }
  else
  {
    v4 = 2 * (CFDictionaryContainsKey(a1, CFSTR("dpInfo")) != 0);
  }
  result = 0;
  *a2 = v4;
  return result;
}

uint64_t FigFairPlayGetMaximumReEncryptionPaddingByteCount(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
  return 0;
}

CFTypeRef FigFairPlayCopyDisposeStorageAllocator()
{
  CFTypeRef result;

  MEMORY[0x19402F294](&sFairPlayDisposeStorageAllocatorContextOnce, FigFairPlayInitFairPlayDisposeStorageAllocatorContext);
  result = (CFTypeRef)sFairPlayDisposeStorageAllocator;
  if (sFairPlayDisposeStorageAllocator)
    return CFRetain((CFTypeRef)sFairPlayDisposeStorageAllocator);
  return result;
}

CFAllocatorRef FigFairPlayInitFairPlayDisposeStorageAllocatorContext()
{
  CFAllocatorRef result;
  CFAllocatorContext v1;

  v1.reallocate = 0;
  memset(&v1, 0, 40);
  v1.allocate = (CFAllocatorAllocateCallBack)FigFairPlayDisposeStorageAllocatorAllocateCallback;
  v1.deallocate = (CFAllocatorDeallocateCallBack)FigFairPlayDisposeStorageAllocatorDeallocateCallback;
  v1.preferredSize = 0;
  result = CFAllocatorCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &v1);
  sFairPlayDisposeStorageAllocator = (uint64_t)result;
  return result;
}

uint64_t FigCFKBCryptRefRegisterClass(uint64_t *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t FigCFKBCryptRefCreate(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (FigCFKBCryptRefGetTypeID_once != -1)
    dispatch_once_f(&FigCFKBCryptRefGetTypeID_once, &FigCFKBCryptRefGetTypeID_typeID, (dispatch_function_t)FigCFKBCryptRefRegisterClass);
  result = _CFRuntimeCreateInstance();
  *(_QWORD *)(result + 16) = a2;
  return result;
}

uint64_t FigFairPlayDisposeStorageAllocatorAllocateCallback()
{
  return 0;
}

uint64_t FigFairPlayDisposeStorageAllocatorDeallocateCallback(uint64_t a1)
{
  uint64_t v1;

  jEHf8Xzsv8K(a1);
  return FAIRPLAY_CALL_LOG(v1);
}

uint64_t FigCFKBCryptRefInit(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t FigCFKBCryptRefFinalize(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;

  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    v2 = Hz73b(result);
    return FAIRPLAY_CALL_LOG(v2);
  }
  return result;
}

uint64_t FigAssetCacheInspectorStartServer()
{
  if (FigServer_IsMediaparserd())
    return FigSignalErrorAt();
  FigServer_IsMediaplaybackd();
  return FigXPCServerStart();
}

uint64_t assetCacheInspectorServer_handleRemoteMessage(uint64_t a1, void *a2)
{
  uint64_t OpCode;
  uint64_t v4;
  uint64_t v6;
  uint64_t value;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
  value = 0;
  v4 = FigXPCServerLookupAndRetainAssociatedObject();
  if (!(_DWORD)v4)
    v4 = FigSignalErrorAt();
  v6 = v4;
  if (!(_DWORD)v4)
    return 4294950034;
  return v6;
}

void FreeAVITrackArray(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  if (a1)
  {
    v2 = *(void **)(a1 + 64);
    if (v2)
    {
      if (*(uint64_t *)(a1 + 48) >= 1)
      {
        v3 = 0;
        v4 = 0;
        do
        {
          TearDownPerTrackInfo(*(_QWORD *)(a1 + 64) + v3);
          ++v4;
          v3 += 108;
        }
        while (v4 < *(_QWORD *)(a1 + 48));
        v2 = *(void **)(a1 + 64);
      }
      free(v2);
      *(_QWORD *)(a1 + 64) = 0;
      *(_QWORD *)(a1 + 48) = 0;
    }
  }
}

void TearDownPerTrackInfo(uint64_t a1)
{
  if (a1)
  {
    FigFormatDescriptionRelease();
    *(_QWORD *)(a1 + 8) = 0;
    free(*(void **)(a1 + 100));
    *(_QWORD *)(a1 + 100) = 0;
    *(_QWORD *)(a1 + 92) = 0;
  }
}

uint64_t ParseAVIFile(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  _OWORD v3[6];

  memset(v3, 0, sizeof(v3));
  v2 = a1;
  result = RIFFAtomStreamInitWithByteStream(*(_QWORD *)(a1 + 24), 0, 1, (uint64_t)v3);
  if (!(_DWORD)result)
    return ProcessChildRIFFAtoms((uint64_t)v3, (uint64_t)"FFIR IVA", 1, (uint64_t)&v2);
  return result;
}

uint64_t ParseMainRIFF(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _OWORD v4[6];

  memset(v4, 0, sizeof(v4));
  LODWORD(result) = RIFFAtomStreamInitWithParent(a1, 0, (uint64_t)v4);
  if (!(_DWORD)result)
    LODWORD(result) = ProcessChildRIFFAtoms((uint64_t)v4, (uint64_t)&ParseMainRIFF_atomDispatch, 3, a2);
  if ((_DWORD)result)
    return result;
  else
    return 1937010544;
}

uint64_t ProcessChildRIFFAtoms(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (**v7)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t (**v9)(uint64_t, uint64_t);
  uint64_t v10;
  int v12;
  int v13;

  v13 = 0;
  v7 = (uint64_t (**)(uint64_t, uint64_t))(a2 + 8);
  while (1)
  {
    result = RIFFAtomStreamGetCurrentAtomTypeAndDataLength(a1, &v13, 0);
    if ((_DWORD)result)
      return result;
    if (a3 >= 1)
    {
      v9 = v7;
      v10 = a3;
      while (1)
      {
        if (v13 == *((_DWORD *)v9 - 2))
        {
          if (v13 != 1380533830 && v13 != 1279873876)
            break;
          v12 = 0;
          result = RIFFAtomStreamGetCurrentAtomLISTType(a1, &v12);
          if ((_DWORD)result)
            return result;
          if (*((_DWORD *)v9 - 1) == v12)
            break;
        }
        v9 += 2;
        if (!--v10)
          goto LABEL_17;
      }
      result = (*v9)(a1, a4);
      if ((_DWORD)result == 1937010544)
        return 0;
      if ((_DWORD)result)
        return result;
    }
LABEL_17:
    result = RIFFAtomStreamAdvanceToNextAtom(a1);
    if ((_DWORD)result)
    {
      if ((_DWORD)result != -12340)
        return result;
      return 0;
    }
  }
}

uint64_t ParseHeaderList(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _OWORD v4[6];

  memset(v4, 0, sizeof(v4));
  result = RIFFAtomStreamInitWithParent(a1, 0, (uint64_t)v4);
  if (!(_DWORD)result)
    return ProcessChildRIFFAtoms((uint64_t)v4, (uint64_t)&ParseHeaderList_atomDispatch, 2, a2);
  return result;
}

uint64_t ParseMovieList(_QWORD *a1, uint64_t a2)
{
  return RIFFAtomStreamGetCurrentAtomGlobalOffset(a1, (_QWORD *)(*(_QWORD *)a2 + 32), (_QWORD *)(*(_QWORD *)a2 + 40));
}

uint64_t Parse_idx1(uint64_t a1, uint64_t **a2)
{
  uint64_t v2;
  uint64_t CurrentAtomTypeAndDataLength;
  unint64_t v5;
  int *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t CurrentAtomData;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  int *v17;
  unint64_t v20;

  if (!(*a2)[6])
  {
    CurrentAtomTypeAndDataLength = FigSignalErrorAt();
    goto LABEL_30;
  }
  if (!*((_BYTE *)*a2 + 108))
  {
    v20 = 0;
    CurrentAtomTypeAndDataLength = RIFFAtomStreamGetCurrentAtomTypeAndDataLength(a1, 0, &v20);
    if (!(_DWORD)CurrentAtomTypeAndDataLength)
    {
      v5 = v20;
      v6 = (int *)(*a2)[8];
      v7 = (int *)malloc_type_malloc(0x4000uLL, 0x1000040451B5BE8uLL);
      if (v7)
      {
        if (v5 >= 0x10)
        {
          v8 = 0;
          v9 = v5 >> 4;
          while (1)
          {
            if (v9 >= 1024)
              v10 = 1024;
            else
              v10 = v9;
            CurrentAtomData = RIFFAtomStreamReadCurrentAtomData(a1, v8, 16 * v10, (uint64_t)v7);
            if ((_DWORD)CurrentAtomData)
              goto LABEL_32;
            if (v9 >= 1)
              break;
LABEL_25:
            v8 += 16 * v10;
            v9 -= v10;
            if (!v9)
              goto LABEL_26;
          }
          v12 = 0;
          if (v10 <= 1)
            v13 = 1;
          else
            v13 = v10;
          while (1)
          {
            v14 = v7[4 * v12];
            v15 = *a2;
            if (v14 == *v6)
              goto LABEL_23;
            v16 = v15[6];
            if (v16 >= 1)
              break;
LABEL_24:
            if (++v12 == v13)
              goto LABEL_25;
          }
          v17 = (int *)v15[8];
          while (*v17 != v14)
          {
            v17 += 27;
            if (!--v16)
              goto LABEL_24;
          }
          v6 = v17;
LABEL_23:
          CurrentAtomData = AddChunkToTrack(v15[3], v7[4 * v12 + 2] + v15[4] + 16, v7[4 * v12 + 3], v7[4 * v12 + 1], v6);
          if ((_DWORD)CurrentAtomData)
            goto LABEL_32;
          goto LABEL_24;
        }
LABEL_26:
        v2 = 0;
      }
      else
      {
        CurrentAtomData = FigSignalErrorAt();
LABEL_32:
        v2 = CurrentAtomData;
      }
LABEL_27:
      free(v7);
      return v2;
    }
LABEL_30:
    v2 = CurrentAtomTypeAndDataLength;
    v7 = 0;
    goto LABEL_27;
  }
  return 0;
}

uint64_t ParseStreamList(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  const char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[2];
  _QWORD v22[2];
  _OWORD v23[6];
  char __str[8];

  memset(v23, 0, sizeof(v23));
  v20 = 0u;
  memset(v21, 0, 28);
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  result = RIFFAtomStreamInitWithParent(a1, 0, (uint64_t)v23);
  if ((_DWORD)result)
    return result;
  v22[0] = a2;
  v22[1] = &v16;
  v4 = ProcessChildRIFFAtoms((uint64_t)v23, (uint64_t)"hrts", 4, (uint64_t)v22);
  if (!v4 && !*((_QWORD *)&v16 + 1))
    v4 = FigSignalErrorAt();
  if (v4)
  {
    FigFormatDescriptionRelease();
    *((_QWORD *)&v16 + 1) = 0;
    free(*(void **)((char *)&v21[1] + 4));
    return 0;
  }
  v5 = (_QWORD *)*a2;
  v6 = v5[6];
  v7 = (char *)v5[8];
  if (v6 == v5[7])
  {
    if (v7)
    {
      v8 = v6 + 2;
      v7 = (char *)malloc_type_realloc(v7, 108 * (v6 + 2), 0x106004053A53023uLL);
      if (v7)
      {
        v5[7] = v8;
        v5[8] = v7;
        goto LABEL_12;
      }
    }
    else
    {
      *((_OWORD *)v5 + 3) = xmmword_1932FC870;
      v7 = (char *)malloc_type_malloc(0xD8uLL, 0x106004053A53023uLL);
      v5[8] = v7;
      if (v7)
        goto LABEL_12;
    }
    return FigSignalErrorAt();
  }
LABEL_12:
  v9 = &v7[108 * v5[6]];
  v10 = v16;
  v11 = v18;
  *((_OWORD *)v9 + 1) = v17;
  *((_OWORD *)v9 + 2) = v11;
  *(_OWORD *)v9 = v10;
  v12 = v19;
  v13 = v20;
  v14 = v21[0];
  *(_OWORD *)(v9 + 92) = *(_OWORD *)((char *)v21 + 12);
  *((_OWORD *)v9 + 4) = v13;
  *((_OWORD *)v9 + 5) = v14;
  *((_OWORD *)v9 + 3) = v12;
  v15 = "dc";
  if (DWORD1(v16) == 1936684398)
    v15 = "wb";
  snprintf(__str, 5uLL, "%02d%s", v5[6], v15);
  result = 0;
  *(_DWORD *)(v5[8] + 108 * v5[6]++) = *(_DWORD *)__str;
  return result;
}

uint64_t Parse_avih(uint64_t a1, uint64_t *a2)
{
  uint64_t CurrentAtomData;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  CMTime v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v13 = 0;
  v11 = 0u;
  v12 = 0u;
  v10 = 0u;
  CurrentAtomData = RIFFAtomStreamReadCurrentAtomData(a1, 0, 56, (uint64_t)&v10);
  if (!(_DWORD)CurrentAtomData)
  {
    v4 = *a2;
    v5 = v10;
    v6 = HIDWORD(v10);
    *(_DWORD *)(v4 + 96) = v10;
    *(_DWORD *)(v4 + 100) = v6;
    v7 = v11;
    *(_DWORD *)(v4 + 104) = v11;
    CMTimeMake(&v9, v7 * (uint64_t)v5, 1000000);
    *(CMTime *)(v4 + 72) = v9;
  }
  return CurrentAtomData;
}

uint64_t Parse_strh(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v4;
  int v5;
  uint64_t v6;
  int32_t v7;
  CMTimeEpoch epoch;
  CMTime v9;
  __int128 v10;
  int32_t timescale[4];
  __int128 v12;

  *(_OWORD *)timescale = 0u;
  v12 = 0u;
  v10 = 0u;
  result = RIFFAtomStreamReadCurrentAtomData(a1, 0, 48, (uint64_t)&v10);
  if (!(_DWORD)result)
  {
    v4 = bswap32(v10);
    if (v4 == 1986618483)
    {
      v5 = 1986618469;
    }
    else
    {
      if (v4 != 1635083379)
        return 4294954451;
      v5 = 1936684398;
    }
    v6 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(v6 + 4) = v5;
    v7 = timescale[2];
    *(_DWORD *)(v6 + 84) = timescale[2];
    if (v7)
    {
      CMTimeMake(&v9, timescale[1] * (uint64_t)(int)v12, v7);
      result = 0;
      epoch = v9.epoch;
      *(_OWORD *)(v6 + 20) = *(_OWORD *)&v9.value;
      *(_QWORD *)(v6 + 36) = epoch;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t Parse_strf(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  size_t v7;
  __int128 v8;
  __int128 v9;
  int v10;
  uint64_t v11;
  OpaqueCMBlockBuffer *v12;
  int32_t v13;
  int32_t v14;
  unsigned int v15;
  __CFDictionary *Mutable;
  CFDictionaryRef v17;
  const void *SInt32;
  const void *v19;
  CMVideoCodecType v20;
  uint64_t v21;
  unsigned int v22;
  unsigned __int16 v23;
  BOOL v24;
  __int16 v25;
  size_t v26;
  int v27;
  int32_t v28;
  int64_t v29;
  UInt32 v30;
  char *v31;
  int v32;
  int v33;
  BOOL v34;
  int v35;
  AudioFormatID v37;
  char v38;
  size_t v39;
  char *v40;
  unsigned int v41;
  char *v42;
  size_t v43;
  unsigned int v44;
  size_t v45;
  const void *v46;
  AudioFormatID v47;
  unsigned int v48;
  double v49;
  AudioFormatFlags v51;
  void **v52;
  const void *v53;
  int32_t mSampleRate;
  CMBlockBufferRef theBuffer;
  CMTime ioPropertyDataSize;
  size_t lengthAtOffsetOut;
  char *dataPointerOut;
  void *values[2];
  __int128 v60;
  AudioStreamBasicDescription outPropertyData;
  void *keys[2];
  _OWORD v63[2];

  theBuffer = 0;
  v3 = a2[1];
  v4 = RIFFAtomStreamReadCurrentAtomDataAndCreateBBuf(a1, 0, 0, &theBuffer);
  if ((_DWORD)v4)
  {
    v21 = v4;
    goto LABEL_80;
  }
  v5 = *((_DWORD *)v3 + 1);
  if (v5 != 1986618469)
  {
    if (v5 == 1936684398)
    {
      v6 = **a2;
      *(_OWORD *)keys = 0u;
      memset(v63, 0, 24);
      memset(&outPropertyData, 0, sizeof(outPropertyData));
      *(_OWORD *)values = 0u;
      v60 = 0u;
      lengthAtOffsetOut = 0;
      dataPointerOut = 0;
      CMBlockBufferGetDataPointer(theBuffer, 0, &lengthAtOffsetOut, 0, &dataPointerOut);
      v7 = lengthAtOffsetOut;
      if (lengthAtOffsetOut > 7)
      {
        if (lengthAtOffsetOut >= 0x12
          && *(__int16 *)dataPointerOut == -2
          && *((unsigned __int16 *)dataPointerOut + 8) >= 0x16u)
        {
          if (lengthAtOffsetOut <= 0x27)
            goto LABEL_47;
          v8 = *(_OWORD *)dataPointerOut;
          v9 = *((_OWORD *)dataPointerOut + 1);
          *(_QWORD *)&v63[1] = *((_QWORD *)dataPointerOut + 4);
          *(_OWORD *)keys = v8;
          v63[0] = v9;
          v10 = 1;
        }
        else
        {
          __memcpy_chk();
          v10 = 0;
        }
        v22 = HIDWORD(keys[0]);
        if (HIDWORD(keys[0]))
        {
          v23 = WORD1(keys[0]);
          if ((SWORD1(keys[0]) & 0x80000000) == 0)
          {
            if (HIDWORD(keys[0]) >= 0xFFFF0000)
            {
              v22 = WORD2(keys[0]);
              HIDWORD(keys[0]) = WORD2(keys[0]);
            }
            if (!WORD1(keys[0]))
            {
              v23 = 1;
              WORD1(keys[0]) = 1;
            }
            outPropertyData.mChannelsPerFrame = v23;
            outPropertyData.mSampleRate = (double)v22;
            if ((v10 & 1) == 0)
            {
              v26 = 0;
              v25 = (__int16)keys[0];
              goto LABEL_39;
            }
            if (v7 < 0x29)
            {
              v24 = *(_QWORD *)&v63[1] == 0x719B3800AA000080 && *(_QWORD *)((char *)v63 + 10) == 0x80001000000000;
              v25 = WORD4(v63[0]);
              if (!v24)
                v25 = 0;
              LOWORD(keys[0]) = v25;
              LODWORD(values[0]) = 0x10000;
              HIDWORD(values[0]) = SWORD2(v63[0]);
              LODWORD(values[1]) = 0;
              v26 = 32;
LABEL_39:
              switch(v25)
              {
                case 0:
                  goto LABEL_47;
                case 1:
                case 3:
                  outPropertyData.mFormatID = 1819304813;
                  if (v10 && WORD1(v63[0]) && SHIWORD(keys[1]) != WORD1(v63[0]))
                    goto LABEL_47;
                  v30 = HIWORD(keys[1]);
                  if ((HIWORD(keys[1]) & 0x8000) != 0)
                    goto LABEL_47;
                  if (!HIWORD(keys[1]))
                  {
                    v30 = (8 * LODWORD(keys[1]) / (v22 * v23)) & 0x7FFF;
                    goto LABEL_85;
                  }
                  if (HIWORD(keys[1]) < 9u)
                  {
                    v30 = 8;
LABEL_85:
                    HIWORD(keys[1]) = v30;
                    goto LABEL_86;
                  }
                  if (HIWORD(keys[1]) < 0x11u)
                  {
                    v30 = 16;
                    HIWORD(keys[1]) = 16;
                    if (v25 == 3)
                      goto LABEL_87;
                    goto LABEL_92;
                  }
LABEL_86:
                  outPropertyData.mFormatFlags = 8;
                  if (v25 == 3)
                  {
LABEL_87:
                    v51 = 9;
                    goto LABEL_93;
                  }
                  if (v30 == 8)
                    goto LABEL_94;
LABEL_92:
                  v51 = 12;
LABEL_93:
                  outPropertyData.mFormatFlags = v51;
LABEL_94:
                  outPropertyData.mBitsPerChannel = v30;
LABEL_95:
                  v31 = 0;
                  LODWORD(ioPropertyDataSize.value) = 40;
LABEL_96:
                  LODWORD(v39) = 0;
                  v45 = 0;
                  v46 = 0;
LABEL_97:
                  if (!AudioFormatGetProperty(0x666D7469u, v39, v46, (UInt32 *)&ioPropertyDataSize, &outPropertyData)
                    && outPropertyData.mBytesPerPacket
                    && outPropertyData.mFramesPerPacket)
                  {
                    if (v10)
                      v52 = values;
                    else
                      v52 = 0;
                    if (v45)
                      v53 = v31;
                    else
                      v53 = 0;
                    v21 = CMAudioFormatDescriptionCreate(*(CFAllocatorRef *)(v6 + 16), &outPropertyData, v26, (const AudioChannelLayout *)v52, v45, v53, 0, (CMAudioFormatDescriptionRef *)v3 + 1);
                    *(uint64_t *)((char *)v3 + 68) = outPropertyData.mBytesPerPacket;
                    mSampleRate = (int)outPropertyData.mSampleRate;
                    *((_DWORD *)v3 + 4) = (int)outPropertyData.mSampleRate;
                    CMTimeMake(&ioPropertyDataSize, outPropertyData.mFramesPerPacket, mSampleRate);
                    *(CMTime *)((char *)v3 + 44) = ioPropertyDataSize;
                  }
                  else
                  {
LABEL_107:
                    v21 = FigSignalErrorAt();
                  }
                  break;
                case 6:
                  v47 = 1634492791;
                  goto LABEL_70;
                case 7:
                  v47 = 1970037111;
LABEL_70:
                  outPropertyData.mFormatID = v47;
                  goto LABEL_95;
                default:
                  v37 = v25 | 0x6D730000;
                  outPropertyData.mFormatID = v37;
                  if (v7 < 0x13)
                    v38 = 1;
                  else
                    v38 = v10;
                  if ((v38 & 1) != 0)
                    goto LABEL_95;
                  v39 = v7 + 28;
                  v40 = (char *)malloc_type_malloc(v7 + 28, 0x934C80BCuLL);
                  v31 = v40;
                  if (!v40)
                    goto LABEL_107;
                  *(_QWORD *)v40 = 0x616D72660C000000;
                  v41 = bswap32(v37);
                  v43 = lengthAtOffsetOut;
                  v42 = dataPointerOut;
                  v44 = bswap32(lengthAtOffsetOut + 8);
                  *((_DWORD *)v40 + 2) = v41;
                  *((_DWORD *)v40 + 3) = v44;
                  *((_DWORD *)v40 + 4) = v41;
                  memcpy(v40 + 20, v42, v43);
                  *(_QWORD *)&v31[v43 + 20] = 0x8000000;
                  LODWORD(ioPropertyDataSize.value) = 40;
                  v45 = v39;
                  v46 = v31;
                  if (!v39)
                    goto LABEL_96;
                  goto LABEL_97;
              }
              goto LABEL_48;
            }
          }
        }
      }
LABEL_47:
      v21 = FigSignalErrorAt();
      v31 = 0;
LABEL_48:
      free(v31);
      goto LABEL_80;
    }
LABEL_18:
    v21 = 0;
    goto LABEL_80;
  }
  v11 = **a2;
  v12 = theBuffer;
  outPropertyData.mSampleRate = 0.0;
  if (CMBlockBufferGetDataLength(theBuffer) < 0x28)
    goto LABEL_18;
  CMBlockBufferGetDataPointer(v12, 0, 0, 0, (char **)&outPropertyData);
  v13 = *(_DWORD *)(*(_QWORD *)&outPropertyData.mSampleRate + 4);
  v14 = *(_DWORD *)(*(_QWORD *)&outPropertyData.mSampleRate + 8);
  v15 = *(_DWORD *)(*(_QWORD *)&outPropertyData.mSampleRate + 16);
  if (v15 == 1196444237)
  {
    keys[0] = *(void **)MEMORY[0x1E0CA4CF8];
    Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)(v11 + 16), 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
      goto LABEL_51;
    values[0] = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CreateMicrosoftHuffmanTable_MJPGDHTSeg, 418, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    v17 = CFDictionaryCreate(*(CFAllocatorRef *)(v11 + 16), (const void **)keys, (const void **)values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (values[0])
      CFRelease(values[0]);
    if (!v17)
      goto LABEL_51;
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA2240], v17);
    CFRelease(v17);
    SInt32 = (const void *)FigCFNumberCreateSInt32();
    if (!SInt32)
      goto LABEL_51;
    v19 = SInt32;
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA8DC8], SInt32);
    CFRelease(v19);
    v20 = 1684890161;
  }
  else
  {
    Mutable = 0;
    v20 = bswap32(v15);
  }
  v27 = *(_DWORD *)(v11 + 96);
  if ((v27 - 33366) < 2)
  {
    v28 = 2997;
    v29 = 100;
LABEL_76:
    v21 = CMVideoFormatDescriptionCreate(*(CFAllocatorRef *)(v11 + 16), v20, v13, v14, Mutable, (CMVideoFormatDescriptionRef *)v3 + 1);
    if (!(_DWORD)v21)
    {
      CMTimeMake((CMTime *)keys, v29, v28);
      *(_OWORD *)((char *)v3 + 44) = *(_OWORD *)keys;
      *(uint64_t *)((char *)v3 + 60) = *(_QWORD *)&v63[0];
      *((_DWORD *)v3 + 4) = v28;
      *((_DWORD *)v3 + 19) = v13;
      *((_DWORD *)v3 + 20) = v14;
    }
    goto LABEL_78;
  }
  if ((v27 - 66666) < 2)
  {
    v28 = 600;
    v29 = 40;
    goto LABEL_76;
  }
  if (v27)
  {
    v32 = 1000000 / v27;
    v33 = *((_DWORD *)v3 + 21);
    v34 = 1000000 / v27 < 500 || v33 == v32;
    v35 = 1000000 / v33;
    if (v34 || v35 < 1)
    {
      v48 = 1000000 % v27;
    }
    else
    {
      *(_DWORD *)(v11 + 96) = v35;
      v48 = 0xF4240u % v35;
      v27 = 1000000 / v33;
      v32 = v33;
    }
    if (v48 <= 0x63 && 600 / v32 * v32 == 600)
    {
      v29 = 600 / v32;
      v28 = 600;
    }
    else
    {
      v49 = (float)((float)v27 * (float)*(int *)(v11 + 104)) / 2147483650.0;
      if (v49 < 1.0)
        v49 = 1.0;
      v29 = (uint64_t)((double)v27 / v49);
      v28 = (int)(1000000.0 / v49);
    }
    goto LABEL_76;
  }
LABEL_51:
  v21 = FigSignalErrorAt();
LABEL_78:
  if (Mutable)
    CFRelease(Mutable);
LABEL_80:
  if (theBuffer)
    CFRelease(theBuffer);
  return v21;
}

uint64_t Parse_strn(uint64_t a1)
{
  uint64_t BBuf;
  CFTypeRef cf;

  cf = 0;
  BBuf = RIFFAtomStreamReadCurrentAtomDataAndCreateBBuf(a1, 0, 0, (CMBlockBufferRef *)&cf);
  if (cf)
    CFRelease(cf);
  return BBuf;
}

uint64_t Parse_indx(uint64_t a1, int **a2)
{
  uint64_t CurrentAtomTypeAndDataLength;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  const __CFAllocator *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, CMBlockBufferRef *, uint64_t *);
  uint64_t DataPointer;
  uint64_t v18;
  OpaqueCMBlockBuffer *v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  char *dataPointerOut;
  CMBlockBufferRef theBuffer;
  uint64_t v25;
  char *v26;
  CMBlockBufferRef sourceBuffer;

  dataPointerOut = 0;
  theBuffer = 0;
  v22 = 0;
  CurrentAtomTypeAndDataLength = RIFFAtomStreamGetCurrentAtomTypeAndDataLength(a1, 0, 0);
  if ((_DWORD)CurrentAtomTypeAndDataLength)
    goto LABEL_9;
  CurrentAtomTypeAndDataLength = RIFFAtomStreamReadCurrentAtomDataAndCreateBBuf(a1, 0, 0, &theBuffer);
  if ((_DWORD)CurrentAtomTypeAndDataLength)
    goto LABEL_9;
  CMBlockBufferGetDataPointer(theBuffer, 0, &v22, 0, &dataPointerOut);
  v5 = v22 - 24;
  if (v22 < 0x18
    || (v6 = dataPointerOut, dataPointerOut[3] == 1)
    || dataPointerOut[3]
    || (*(_BYTE *)(*(_QWORD *)*a2 + 108) = 1, *(_WORD *)v6 != 4)
    || v6[2]
    || (v9 = *((int *)v6 + 1), !(_DWORD)v9)
    || v5 <= 16 * v9)
  {
    CurrentAtomTypeAndDataLength = FigSignalErrorAt();
LABEL_9:
    v7 = CurrentAtomTypeAndDataLength;
    goto LABEL_10;
  }
  if ((int)v9 >= 1)
  {
    v10 = 0;
    v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    while (1)
    {
      v12 = &dataPointerOut[16 * v10];
      v13 = *((_QWORD *)v12 + 3);
      v14 = *((unsigned int *)v12 + 8);
      v26 = 0;
      sourceBuffer = 0;
      v25 = 0;
      if (v14 < 0x18)
        goto LABEL_28;
      v15 = *(_QWORD *)(*(_QWORD *)*a2 + 24);
      v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CMBlockBufferRef *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                               + 32);
      if (!v16)
      {
        v7 = 4294954514;
        goto LABEL_34;
      }
      DataPointer = v16(v15, v14, v13, &sourceBuffer, &v25);
      if (!(_DWORD)DataPointer)
        break;
LABEL_29:
      v7 = DataPointer;
LABEL_34:
      if (sourceBuffer)
        CFRelease(sourceBuffer);
      if (!(_DWORD)v7 && ++v10 != v9)
        continue;
      goto LABEL_10;
    }
    if (v25 == v14)
    {
      if (!CMBlockBufferIsRangeContiguous(sourceBuffer, 0, 0))
      {
        v19 = sourceBuffer;
        sourceBuffer = 0;
        v7 = CMBlockBufferCreateContiguous(v11, v19, v11, 0, 0, 0, 0, &sourceBuffer);
        if (v19)
          CFRelease(v19);
        if ((_DWORD)v7)
          goto LABEL_34;
      }
      DataPointer = CMBlockBufferGetDataPointer(sourceBuffer, 8uLL, 0, 0, &v26);
      if ((_DWORD)DataPointer)
        goto LABEL_29;
      if (*(_WORD *)v26 == 2 && !v26[2] && v26[3] == 1)
      {
        v18 = *((int *)v26 + 1);
        if ((_DWORD)v18)
        {
          if (v14 - 24 >= (unint64_t)(8 * v18))
          {
            if ((int)v18 < 1)
            {
              v7 = 0;
            }
            else
            {
              v20 = 0;
              v21 = *(_QWORD *)(v26 + 12);
              do
              {
                v7 = AddChunkToTrack(*(_QWORD *)(*(_QWORD *)*a2 + 24), v21 + *(int *)&v26[v20 + 24], *(_DWORD *)&v26[v20 + 28], 16, a2[1]);
                if ((_DWORD)v7)
                  break;
                v20 += 8;
                --v18;
              }
              while (v18);
            }
            goto LABEL_34;
          }
        }
      }
    }
LABEL_28:
    DataPointer = FigSignalErrorAt();
    goto LABEL_29;
  }
  v7 = 0;
LABEL_10:
  if (theBuffer)
    CFRelease(theBuffer);
  return v7;
}

uint64_t AddChunkToTrack(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int *a5)
{
  unsigned int v7;
  uint64_t v10;
  void *v11;
  int v12;
  void *v13;
  int v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  int64_t v18;
  uint64_t result;
  void *v20;
  int v21;
  unsigned int (*v22)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *);
  BOOL v23;
  BOOL v24;
  uint64_t v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if ((a3 & 0x80000000) == 0)
  {
    v7 = a3;
    v10 = a5[23];
    if ((_DWORD)v10 != a5[24])
      goto LABEL_6;
    v11 = *(void **)(a5 + 25);
    if (v11)
    {
      v12 = v10 + 0x2000;
      v13 = malloc_type_realloc(v11, 24 * (v10 + 0x2000), 0x1000040504FFAC1uLL);
      if (v13)
      {
        a5[24] = v12;
        *(_QWORD *)(a5 + 25) = v13;
LABEL_6:
        if (v7)
        {
LABEL_7:
          v14 = a5[23];
          v15 = *(_QWORD *)(a5 + 25) + 24 * v14;
          *(_DWORD *)(v15 + 16) = a4;
          *(_QWORD *)v15 = a2;
          *(_QWORD *)(v15 + 8) = v7;
          v16 = a5[22];
          *(_DWORD *)(v15 + 20) = v16;
          goto LABEL_8;
        }
LABEL_15:
        if (a5[1] != 1986618469)
          return FigSignalErrorAt();
        if (a5[23] < 1)
          return FigSignalErrorAt();
        v21 = *a5;
        v30 = 0;
        v31 = 0;
        v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 8);
        if (!v22)
          return FigSignalErrorAt();
        v23 = !v22(a1, 8, a2 - 8, &v31, &v30) && v30 == 8;
        v24 = v23 && HIDWORD(v31) == 0;
        if (!v24 || (_DWORD)v31 != v21)
          return FigSignalErrorAt();
        v26 = *(_QWORD *)(a5 + 25);
        v14 = a5[23];
        v27 = (__int128 *)(v26 + 24 * (v14 - 1));
        v28 = v26 + 24 * v14;
        *(_DWORD *)(v28 + 16) = *((_DWORD *)v27 + 4);
        v29 = *v27;
        *(_OWORD *)v28 = *v27;
        v16 = a5[22];
        *(_DWORD *)(v28 + 20) = v16;
        v7 = DWORD2(v29);
        if (!DWORD2(v29))
          return FigSignalErrorAt();
LABEL_8:
        a5[23] = v14 + 1;
        v17 = *(_QWORD *)(a5 + 17);
        if (v17)
        {
          v18 = (int)v7 / v17;
          if (v18 <= 0)
            return FigSignalErrorAt();
        }
        else
        {
          LODWORD(v18) = 1;
        }
        result = 0;
        a5[22] = v16 + v18;
        return result;
      }
    }
    else
    {
      v20 = malloc_type_malloc(0x60000uLL, 0x1000040504FFAC1uLL);
      *(_QWORD *)(a5 + 25) = v20;
      if (v20)
      {
        *(_QWORD *)(a5 + 23) = 0x400000000000;
        if (v7)
          goto LABEL_7;
        goto LABEL_15;
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t AVIFormatReaderCreateFromStream(const void *a1, const __CFAllocator *a2, _QWORD *a3)
{
  uint64_t v6;
  _QWORD *DerivedStorage;
  uint64_t Instance;
  uint64_t v9;
  CFAllocatorRef Default;
  CFIndex v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  FigFormatReaderGetClassID();
  v6 = CMDerivedObjectCreate();
  if ((_DWORD)v6)
    return v6;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (sRegisterAVIFileInfoTypeOnce != -1)
    dispatch_once_f(&sRegisterAVIFileInfoTypeOnce, 0, (dispatch_function_t)RegisterAVIFileInfoType);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v9 = Instance;
  *(_QWORD *)(Instance + 24) = CFRetain(a1);
  Default = a2;
  if (!a2)
    Default = CFAllocatorGetDefault();
  *(_QWORD *)(v9 + 16) = CFRetain(Default);
  *DerivedStorage = v9;
  v6 = ParseAVIFile(v9);
  if ((_DWORD)v6)
    return v6;
  v11 = *(_QWORD *)(*DerivedStorage + 48);
  if (v11)
  {
    DerivedStorage[1] = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v11, MEMORY[0x1E0C9B378]);
    v12 = (const void *)*DerivedStorage;
    if (*(uint64_t *)(*DerivedStorage + 48) >= 1)
    {
      v13 = 0;
      do
      {
        FigTrackReaderGetClassID();
        if (!CMDerivedObjectCreate())
        {
          v14 = CMBaseObjectGetDerivedStorage();
          *(_QWORD *)v14 = CFRetain(v12);
          *(_DWORD *)(v14 + 8) = v13;
        }
        ++v13;
        v12 = (const void *)*DerivedStorage;
      }
      while (v13 < *(_QWORD *)(*DerivedStorage + 48));
    }
  }
  v15 = 0;
  *a3 = 0;
  return v15;
}

uint64_t AVIFormatReaderConvertCodecElementsToMediaSubType(int a1, char *__s1, uint64_t a3, _DWORD *a4, int *a5, int *a6)
{
  uint64_t result;
  int v7;

  if (a3)
  {
    if (a6)
    {
      result = 0;
      v7 = 8;
LABEL_4:
      *a6 = v7;
      return result;
    }
    return 0;
  }
  if (!__s1)
  {
    if (a6)
    {
      result = 0;
      v7 = 4;
      goto LABEL_4;
    }
    return 0;
  }
  if (!a1)
    return FigAudioFormatReaderConvertCodecElementsToMediaSubType(1463899717, a1, __s1, 0, a4, a5, a6);
  if (a1 != 1296715847)
  {
    if (*__s1 - 51 < 0xFFFFFFFD)
      return 0;
    return FigAudioFormatReaderConvertCodecElementsToMediaSubType(1463899717, a1, __s1, 0, a4, a5, a6);
  }
  if (a4)
    *a4 = 1986618469;
  if (a5)
    *a5 = 1684890161;
  if (a6)
    *a6 = 0;
  return 1;
}

void AVIFormatReaderFinalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
}

__CFString *AVIFormatReaderCopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  const void *v5;
  CFStringRef v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = *(const void **)(*(_QWORD *)DerivedStorage + 24);
  if (v5)
  {
    v6 = CFCopyDescription(v5);
    CFStringAppendFormat(Mutable, 0, CFSTR("\tAVI FormatReader: stream<%@> trackCount<%d>"), v6, *(_QWORD *)(*(_QWORD *)DerivedStorage + 48));
    if (v6)
      CFRelease(v6);
  }
  else
  {
    CFStringAppendFormat(Mutable, 0, CFSTR("\tAVI FormatReader: stream<%@> trackCount<%d>"), 0, *(_QWORD *)(*(_QWORD *)DerivedStorage + 48));
  }
  return Mutable;
}

uint64_t AVIFormatReaderCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  void *IdentityMatrixCFArray;
  void *v10;
  uint64_t result;
  CFTypeRef *v12;
  CMTime v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a4 || !a2)
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  *a4 = 0;
  if (CFEqual(a2, CFSTR("Duration")) || CFEqual(a2, CFSTR("NominalDuration")))
  {
    v13 = *(CMTime *)(*(_QWORD *)v8 + 72);
    IdentityMatrixCFArray = CMTimeCopyAsDictionary(&v13, a3);
    goto LABEL_6;
  }
  if (CFEqual(a2, CFSTR("Identifier")))
  {
    v12 = (CFTypeRef *)kFigFormatReaderIdentifier_AVI;
LABEL_13:
    IdentityMatrixCFArray = (void *)CFRetain(*v12);
    goto LABEL_6;
  }
  if (CFEqual(a2, CFSTR("AccurateDurationIsKnown")) || CFEqual(a2, CFSTR("SampleCursorTimeAccuracyIsExact")))
  {
    v12 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    goto LABEL_13;
  }
  if (CFEqual(a2, CFSTR("PreferredRate")) || CFEqual(a2, CFSTR("PreferredVolume")))
  {
    LODWORD(v13.value) = 1065353216;
    IdentityMatrixCFArray = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat32Type, &v13);
  }
  else
  {
    if (!CFEqual(a2, CFSTR("MovieMatrix")))
      return 4294954512;
    IdentityMatrixCFArray = wvtt_CreateIdentityMatrixCFArray(a3);
  }
LABEL_6:
  v10 = IdentityMatrixCFArray;
  result = 0;
  *a4 = v10;
  return result;
}

uint64_t AVIFormatReaderGetTrackCount(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  *a2 = *(_QWORD *)(*(_QWORD *)DerivedStorage + 48);
  return 0;
}

uint64_t AVIFormatReaderCopyTrackByIndex(uint64_t a1, CFIndex a2, _QWORD *a3, _DWORD *a4, _DWORD *a5)
{
  CFArrayRef *DerivedStorage;
  uint64_t v10;
  const void *ValueAtIndex;
  uint64_t result;

  DerivedStorage = (CFArrayRef *)CMBaseObjectGetDerivedStorage();
  if (a2 < 0 || *((_QWORD *)*DerivedStorage + 6) <= a2)
    return 4294954453;
  v10 = *((_QWORD *)*DerivedStorage + 8);
  if (a3)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(DerivedStorage[1], a2);
    if (ValueAtIndex)
      ValueAtIndex = CFRetain(ValueAtIndex);
    *a3 = ValueAtIndex;
  }
  if (a4)
    *a4 = *(_DWORD *)(v10 + 108 * a2 + 4);
  result = 0;
  if (a5)
    *a5 = *(_DWORD *)(v10 + 108 * a2);
  return result;
}

uint64_t AVIFormatReaderCopyTrackByID(uint64_t a1, int a2, _QWORD *a3, _DWORD *a4)
{
  CFArrayRef *DerivedStorage;
  uint64_t v8;
  CFArrayRef *v9;
  uint64_t v10;
  CFIndex v11;
  const void *ValueAtIndex;

  DerivedStorage = (CFArrayRef *)CMBaseObjectGetDerivedStorage();
  v8 = *((_QWORD *)*DerivedStorage + 6);
  if (v8 < 1)
    return FigSignalErrorAt();
  v9 = DerivedStorage;
  v10 = 0;
  v11 = 0;
  while (*(_DWORD *)(*((_QWORD *)*DerivedStorage + 8) + v10) != a2)
  {
    ++v11;
    v10 += 108;
    if (v8 == v11)
      return FigSignalErrorAt();
  }
  if (a3)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(DerivedStorage[1], v11);
    if (ValueAtIndex)
      ValueAtIndex = CFRetain(ValueAtIndex);
    *a3 = ValueAtIndex;
  }
  if (a4)
    *a4 = *(_DWORD *)(*((_QWORD *)*v9 + 8) + v10 + 4);
  return 0;
}

uint64_t AVIFormatReaderCopyTrackByType(uint64_t a1, uint64_t a2, int a3, _QWORD *a4, _DWORD *a5)
{
  CFArrayRef *DerivedStorage;
  uint64_t v10;
  CFIndex v11;
  uint64_t v12;
  _DWORD *i;
  uint64_t result;
  const void *ValueAtIndex;

  DerivedStorage = (CFArrayRef *)CMBaseObjectGetDerivedStorage();
  v10 = *((_QWORD *)*DerivedStorage + 6);
  if (v10 < 1)
    return 4294954453;
  v11 = 0;
  v12 = 0;
  for (i = (_DWORD *)(*((_QWORD *)*DerivedStorage + 8) + 4); *i != a3; i += 27)
  {
LABEL_6:
    if (v10 == ++v11)
      return 4294954453;
  }
  if (v12 != a2)
  {
    ++v12;
    goto LABEL_6;
  }
  if (a4)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(DerivedStorage[1], v11);
    if (ValueAtIndex)
      ValueAtIndex = CFRetain(ValueAtIndex);
    *a4 = ValueAtIndex;
  }
  result = 0;
  if (a5)
    *a5 = *(i - 1);
  return result;
}

uint64_t RegisterAVIFileInfoType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sAVIFileInfoID = result;
  return result;
}

double InitAVIFileInfo(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

void FinalizeAVIFileInfo(uint64_t a1)
{
  const void *v2;
  const void *v3;

  FreeAVITrackArray(a1);
  v2 = *(const void **)(a1 + 24);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 16);
  if (v3)
    CFRelease(v3);
}

void AVITrackReaderFinalize()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  *(_DWORD *)(DerivedStorage + 8) = -1;
}

__CFString *AVITrackReaderCopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  const void *v9;
  CFStringRef v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  Float64 Seconds;
  CMTime time;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = *(_QWORD *)DerivedStorage;
  if (*(_QWORD *)DerivedStorage)
  {
    v6 = *(_DWORD *)(DerivedStorage + 8);
    if (v6 != -1)
    {
      v7 = *(_QWORD *)(v5 + 64);
      v8 = (unsigned int *)(v7 + 108 * v6);
      v9 = *(const void **)(v5 + 24);
      if (v9)
        v10 = CFCopyDescription(v9);
      else
        v10 = 0;
      v11 = v7 + 108 * v6;
      v12 = *(_DWORD *)(v11 + 4);
      v13 = HIBYTE(v12);
      v14 = BYTE2(v12);
      v15 = BYTE1(v12);
      v16 = v12;
      v17 = *(unsigned int *)(v11 + 88);
      v18 = *v8;
      v19 = *(_OWORD *)(v11 + 20);
      time.epoch = *(_QWORD *)(v11 + 36);
      *(_OWORD *)&time.value = v19;
      Seconds = CMTimeGetSeconds(&time);
      CFStringAppendFormat(Mutable, 0, CFSTR("\t AVITrackReader: stream<%@> trackType %c%c%c%c trackID %d contains %d samples media duration %1.3f seconds (%lld/%d)"), v10, v13, v14, v15, v16, v18, v17, *(_QWORD *)&Seconds, *(_QWORD *)(v11 + 20), *(unsigned int *)(v11 + 28));
      if (v10)
        CFRelease(v10);
    }
  }
  return Mutable;
}

uint64_t AVITrackReaderCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t result;
  void *DimensionDictionary;
  const __CFAllocator *v10;
  CMTime *p_time;
  CFNumberType v12;
  void *v13;
  CFTypeRef *v14;
  uint64_t v15;
  CMTimeValue v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  CMTime v21;
  float v22;
  CMTime time;
  uint64_t v24;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v24 = 0;
  result = TrackIndexToTrack(*(_QWORD *)DerivedStorage, *(_DWORD *)(DerivedStorage + 8), &v24);
  if (!(_DWORD)result)
  {
    if (!a2 || !a4)
      return FigSignalErrorAt();
    *a4 = 0;
    if (CFEqual(a2, CFSTR("TrackFormatDescriptionArray")))
    {
      DimensionDictionary = CFArrayCreate(a3, (const void **)(v24 + 8), 1, MEMORY[0x1E0C9B378]);
LABEL_13:
      v13 = DimensionDictionary;
      result = 0;
      *a4 = v13;
      return result;
    }
    if (CFEqual(a2, CFSTR("TrackTimescale")))
    {
      v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      p_time = (CMTime *)(v24 + 16);
LABEL_8:
      v12 = kCFNumberSInt32Type;
LABEL_9:
      DimensionDictionary = CFNumberCreate(v10, v12, p_time);
      goto LABEL_13;
    }
    if (CFEqual(a2, CFSTR("TrackDuration")) || CFEqual(a2, CFSTR("UneditedTrackDuration")))
    {
      time = *(CMTime *)(v24 + 20);
      DimensionDictionary = CMTimeCopyAsDictionary(&time, a3);
      goto LABEL_13;
    }
    if (CFEqual(a2, CFSTR("UneditedSampleCount")))
    {
      v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      p_time = (CMTime *)(v24 + 88);
      goto LABEL_8;
    }
    if (CFEqual(a2, CFSTR("TrackFrameReorderingRequired")))
      goto LABEL_18;
    if (!CFEqual(a2, CFSTR("TrackEnabled")))
    {
      if (CFEqual(a2, CFSTR("TrackDimensions")))
      {
        DimensionDictionary = CreateDimensionDictionary(a3, (float)*(int *)(v24 + 76), (float)*(int *)(v24 + 80));
        goto LABEL_13;
      }
      if (CFEqual(a2, CFSTR("TrackMatrix")))
      {
        DimensionDictionary = wvtt_CreateIdentityMatrixCFArray(a3);
        goto LABEL_13;
      }
      if (CFEqual(a2, CFSTR("TrackExcludeFromAutoSelection")))
      {
LABEL_18:
        v14 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
LABEL_21:
        DimensionDictionary = (void *)CFRetain(*v14);
        goto LABEL_13;
      }
      if (!CFEqual(a2, CFSTR("TrackIsSelfContained")))
      {
        if (CFEqual(a2, CFSTR("UneditedNumDataBytes")))
        {
          v15 = *(int *)(v24 + 92);
          if ((int)v15 < 1)
          {
            v16 = 0;
          }
          else
          {
            v16 = 0;
            v17 = (uint64_t *)(*(_QWORD *)(v24 + 100) + 8);
            do
            {
              v18 = *v17;
              v17 += 3;
              v16 += v18;
              --v15;
            }
            while (v15);
          }
          time.value = v16;
          v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          p_time = &time;
          v12 = kCFNumberSInt64Type;
        }
        else
        {
          if (!CFEqual(a2, CFSTR("NominalFrameRate")))
            return 4294954512;
          v22 = 0.0;
          v19 = v24;
          if ((*(_BYTE *)(v24 + 56) & 1) != 0)
          {
            time = *(CMTime *)(v24 + 44);
            v21 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
            if (CMTimeCompare(&time, &v21))
            {
              time = *(CMTime *)(v19 + 44);
              v20 = 1.0 / CMTimeGetSeconds(&time);
              v22 = v20;
            }
          }
          v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          p_time = (CMTime *)&v22;
          v12 = kCFNumberFloat32Type;
        }
        goto LABEL_9;
      }
    }
    v14 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    goto LABEL_21;
  }
  return result;
}

uint64_t TrackIndexToTrack(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  if (!a1 || (a2 & 0x80000000) != 0 || *(_QWORD *)(a1 + 48) <= (uint64_t)a2)
    return FigSignalErrorAt();
  *a3 = *(_QWORD *)(a1 + 64) + 108 * a2;
  return 0;
}

CFDictionaryRef CreateDimensionDictionary(const __CFAllocator *a1, float a2, float a3)
{
  const __CFAllocator *v4;
  CFDictionaryRef v5;
  float v7;
  float valuePtr;
  void *keys[2];
  void *values;
  CFTypeRef cf;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  valuePtr = a2;
  *(_OWORD *)keys = xmmword_1E2FA2788;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat32Type, &valuePtr);
  cf = CFNumberCreate(v4, kCFNumberFloat32Type, &v7);
  v5 = CFDictionaryCreate(a1, (const void **)keys, (const void **)&values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (values)
    CFRelease(values);
  if (cf)
    CFRelease(cf);
  return v5;
}

uint64_t AVITrackReaderGetTrackInfo(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t result;
  _DWORD *v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = 0;
  result = TrackIndexToTrack(*(_QWORD *)DerivedStorage, *(_DWORD *)(DerivedStorage + 8), &v7);
  if (!(_DWORD)result)
  {
    if (a2)
      *a2 = *v7;
    if (a3)
      *a3 = v7[1];
  }
  return result;
}

uint64_t AVITrackReaderCopySampleCursorService(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  CFTypeRef v7;
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)DerivedStorage)
    return FigSignalErrorAt();
  v4 = DerivedStorage;
  if (*(_DWORD *)(DerivedStorage + 8) == -1)
    return FigSignalErrorAt();
  FigSampleCursorServiceGetClassID();
  v5 = CMDerivedObjectCreate();
  if ((_DWORD)v5)
  {
    v8 = v5;
    FigSignalErrorAt();
  }
  else
  {
    v6 = CMBaseObjectGetDerivedStorage();
    v7 = *(CFTypeRef *)v4;
    if (*(_QWORD *)v4)
      v7 = CFRetain(v7);
    v8 = 0;
    *(_QWORD *)v6 = v7;
    *(_DWORD *)(v6 + 8) = *(_DWORD *)(v4 + 8);
    *a2 = 0;
  }
  return v8;
}

void AVICursorServiceFinalize()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  *(_DWORD *)(DerivedStorage + 8) = -1;
}

__CFString *AVICursorServiceCopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigFormatReader_AVI_SampleCursorService %p>{ trackIndex %d }"), a1, *(unsigned int *)(DerivedStorage + 8));
  return Mutable;
}

uint64_t AVICursorServiceCreateCursorAtPresentationTimeStamp(uint64_t a1, __int128 *a2, _QWORD *a3, _BYTE *a4, char *a5)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v11;
  CMTime v12;
  __int128 v13;
  int32_t v14;
  uint64_t v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v15 = 0;
  v14 = 0;
  v13 = *a2;
  result = TrackIndexToTrack(*(_QWORD *)DerivedStorage, *(_DWORD *)(DerivedStorage + 8), &v15);
  if (!(_DWORD)result)
  {
    v11 = v15;
    *(_OWORD *)&v12.value = v13;
    v12.epoch = 0;
    result = ComputeSampleDeltaForDuration(v15, &v12, 0, &v14, a4, a5);
    if (!(_DWORD)result)
      return CreateAVISampleCursor(*(const void **)DerivedStorage, v11, v14, a3);
  }
  return result;
}

uint64_t AVICursorServiceCreateCursorNearPresentationTimeStamp(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _BYTE *a5, char *a6)
{
  __int128 v7;
  uint64_t v8;

  v7 = *(_OWORD *)a2;
  v8 = *(_QWORD *)(a2 + 16);
  return AVICursorServiceCreateCursorAtPresentationTimeStamp(a1, &v7, a4, a5, a6);
}

uint64_t AVICursorServiceCreateCursorAtFirstSampleInDecodeOrder(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = 0;
  result = TrackIndexToTrack(*(_QWORD *)DerivedStorage, *(_DWORD *)(DerivedStorage + 8), &v5);
  if (!(_DWORD)result)
    return CreateAVISampleCursor(*(const void **)DerivedStorage, v5, 0, a2);
  return result;
}

uint64_t AVICursorServiceCreateCursorAtLastSampleInDecodeOrder(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = 0;
  result = TrackIndexToTrack(*(_QWORD *)DerivedStorage, *(_DWORD *)(DerivedStorage + 8), &v5);
  if (!(_DWORD)result)
    return CreateAVISampleCursor(*(const void **)DerivedStorage, v5, *(_DWORD *)(v5 + 88) - 1, a2);
  return result;
}

uint64_t ComputeSampleDeltaForDuration(uint64_t a1, CMTime *a2, int a3, int *a4, _BYTE *a5, char *a6)
{
  int32_t v11;
  int v12;
  int v13;
  char v14;
  uint64_t result;
  unsigned int v16;
  int v17;
  CMTime v18;
  CMTime v19;

  v11 = *(_DWORD *)(a1 + 52);
  v18 = *a2;
  CMTimeConvertScale(&v19, &v18, v11, kCMTimeRoundingMethod_RoundTowardZero);
  if ((v19.flags & 0x1D) == 1)
  {
    v12 = v19.value / *(uint64_t *)(a1 + 44) + a3;
    v13 = *(_DWORD *)(a1 + 88);
    if (v12 < v13)
    {
      v14 = 0;
      result = 0;
      v16 = v12 >> 31;
      v17 = v12 & ~(v12 >> 31);
      goto LABEL_11;
    }
    LOBYTE(v16) = 0;
    result = 0;
    goto LABEL_9;
  }
  if ((~v19.flags & 9) == 0)
  {
    v17 = 0;
    v14 = 0;
    result = 0;
    LOBYTE(v16) = 1;
    goto LABEL_11;
  }
  if ((~v19.flags & 5) == 0)
  {
    LOBYTE(v16) = 0;
    result = 0;
    v13 = *(_DWORD *)(a1 + 88);
LABEL_9:
    v17 = v13 - 1;
    v14 = 1;
    goto LABEL_11;
  }
  result = FigSignalErrorAt();
  v17 = 0;
  LOBYTE(v16) = 0;
  v14 = 0;
LABEL_11:
  *a4 = v17;
  if (a5)
    *a5 = v16;
  if (a6)
    *a6 = v14;
  return result;
}

uint64_t CreateAVISampleCursor(const void *a1, uint64_t a2, int32_t a3, _QWORD *a4)
{
  int32_t v4;
  uint64_t v9;
  uint64_t DerivedStorage;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int32_t *v15;
  int32_t v16;
  uint64_t v18;
  int32_t *v19;
  uint64_t v20;
  int32_t v21;
  uint64_t v22;
  CMTime v23;
  CMTime v24;
  uint64_t v25;

  v25 = 0;
  *a4 = 0;
  v4 = *(_DWORD *)(a2 + 88);
  if (v4 <= a3 || !v4)
    return FigSignalErrorAt();
  FigSampleCursorGetClassID();
  v9 = CMDerivedObjectCreate();
  if ((_DWORD)v9)
  {
    v22 = v9;
    FigSignalErrorAt();
  }
  else
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_QWORD *)DerivedStorage = CFRetain(a1);
    *(_QWORD *)(DerivedStorage + 8) = a2;
    *(_DWORD *)(DerivedStorage + 16) = a3;
    v11 = *(_QWORD *)(a2 + 60);
    *(_OWORD *)(DerivedStorage + 48) = *(_OWORD *)(a2 + 44);
    *(_QWORD *)(DerivedStorage + 64) = v11;
    v23 = *(CMTime *)(a2 + 44);
    CMTimeMultiply(&v24, &v23, a3);
    *(CMTime *)(DerivedStorage + 24) = v24;
    v12 = *(_QWORD *)(DerivedStorage + 8);
    v13 = *(_QWORD *)(v12 + 100);
    if (*(_DWORD *)(v13 + 20) <= a3)
    {
      v18 = *(unsigned int *)(v12 + 92);
      if ((int)v18 < 2)
      {
        LODWORD(v20) = 1;
      }
      else
      {
        v19 = (int32_t *)(v13 + 44);
        v20 = 1;
        while (1)
        {
          v21 = *v19;
          v19 += 6;
          if (v21 > a3)
            break;
          if (v18 == ++v20)
          {
            LODWORD(v20) = v18;
            break;
          }
        }
      }
      v14 = v20 - 1;
    }
    else
    {
      v14 = 0;
      v15 = (int32_t *)(v13 - 4);
      do
      {
        v16 = *v15;
        v15 -= 6;
        --v14;
      }
      while (v16 > a3);
    }
    v22 = 0;
    *(_DWORD *)(DerivedStorage + 20) = v14;
    *a4 = v25;
  }
  return v22;
}

double AVISampleCursorFinalize()
{
  uint64_t DerivedStorage;
  double result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  *(_QWORD *)(DerivedStorage + 8) = 0;
  result = 0.0;
  *(_OWORD *)(DerivedStorage + 16) = 0u;
  *(_OWORD *)(DerivedStorage + 32) = 0u;
  *(_OWORD *)(DerivedStorage + 48) = 0u;
  *(_QWORD *)(DerivedStorage + 64) = 0;
  return result;
}

__CFString *AVISampleCursorCopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  unsigned int *v5;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = *(unsigned int **)(DerivedStorage + 8);
  v6 = *v5;
  CFStringAppendFormat(Mutable, 0, CFSTR("<AVI SampleCursor %p>{ sampleNum %d, Track ID %d (%c%c%c%c), Type %c%c%c%c }"), a1, *(unsigned int *)(DerivedStorage + 16), v6, BYTE3(v6), BYTE2(v6), BYTE1(v6), v6, HIBYTE(v5[1]), BYTE2(v5[1]), BYTE1(v5[1]), v5[1]);
  return Mutable;
}

uint64_t AVISampleCursorCopyProperty(int a1, CFTypeRef cf1, uint64_t a3, _QWORD *a4)
{
  if (!a4 || !cf1)
    return FigSignalErrorAt();
  *a4 = 0;
  if (CFEqual(cf1, CFSTR("CursorPlayableHorizon")))
    return 4294954513;
  if (CFEqual(cf1, CFSTR("CursorPlayableThroughEndOfTrack")))
    return 4294954513;
  return 4294954512;
}

uint64_t AVISampleCursorCopy(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  const void *v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigSampleCursorGetClassID();
  v4 = CMDerivedObjectCreate();
  if ((_DWORD)v4)
  {
    FigSignalErrorAt();
  }
  else
  {
    v5 = CMBaseObjectGetDerivedStorage();
    *(_OWORD *)v5 = *(_OWORD *)DerivedStorage;
    v7 = *(_OWORD *)(DerivedStorage + 32);
    v6 = *(_OWORD *)(DerivedStorage + 48);
    v8 = *(_OWORD *)(DerivedStorage + 16);
    *(_QWORD *)(v5 + 64) = *(_QWORD *)(DerivedStorage + 64);
    *(_OWORD *)(v5 + 32) = v7;
    *(_OWORD *)(v5 + 48) = v6;
    *(_OWORD *)(v5 + 16) = v8;
    v9 = *(const void **)v5;
    if (v9)
      CFRetain(v9);
    *a2 = 0;
  }
  return v4;
}

uint64_t AVISampleCursorCompareInDecodeOrder()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  int v2;
  int v3;
  BOOL v4;
  _BOOL8 v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = CMBaseObjectGetDerivedStorage();
  v2 = *(_DWORD *)(DerivedStorage + 16);
  v3 = *(_DWORD *)(v1 + 16);
  v4 = v2 < v3;
  v5 = v2 > v3;
  if (v4)
    return -1;
  else
    return v5;
}

uint64_t AVISampleCursorGetPresentationTimeStamp(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  __int128 v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v4 = *(_OWORD *)(DerivedStorage + 24);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(DerivedStorage + 40);
    *(_OWORD *)a2 = v4;
  }
  return 0;
}

uint64_t AVISampleCursorGetDecodeTimeStamp(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  __int128 v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v4 = *(_OWORD *)(DerivedStorage + 24);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(DerivedStorage + 40);
    *(_OWORD *)a2 = v4;
  }
  return 0;
}

uint64_t AVISampleCursorGetDuration(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  __int128 v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v4 = *(_OWORD *)(DerivedStorage + 48);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(DerivedStorage + 64);
    *(_OWORD *)a2 = v4;
  }
  return 0;
}

uint64_t AVISampleCursorGetDependencyInfo(uint64_t a1, BOOL *a2, _BYTE *a3, _DWORD *a4, _BYTE *a5)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
    *a2 = (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(DerivedStorage + 8) + 100) + 24 * *(int *)(DerivedStorage + 20) + 16) & 0x10) != 0;
  if (a3)
    *a3 = 0;
  if (a4)
    *a4 = 0;
  if (a5)
    *a5 = 0;
  return 0;
}

uint64_t AVISampleCursorStepByDecodeTime(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v10;
  int v11;
  CMTime time2;
  CMTime time1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  time1 = *a2;
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  result = CMTimeCompare(&time1, &time2);
  if ((_DWORD)result)
  {
    v11 = 0;
    v10 = 0;
    time2.value = 0;
    v6 = *(_QWORD *)(DerivedStorage + 8);
    v7 = *(_DWORD *)(DerivedStorage + 16);
    time1 = *a2;
    result = ComputeSampleDeltaForDuration(v6, &time1, v7, &v11, &v10, (char *)&v10 + 1);
    if (!(_DWORD)result)
    {
      v8 = v11 - (uint64_t)*(int *)(DerivedStorage + 16);
      AVISampleCursorStepInDecodeOrderAndReportStepsTaken(a1, v8, &time2);
      if (time2.value == v8 && (v10 | HIBYTE(v10)) == 0)
        return 0;
      else
        return 4294954456;
    }
  }
  return result;
}

uint64_t AVISampleCursorStepByPresentationTime(uint64_t a1, CMTime *a2)
{
  CMTime v3;

  v3 = *a2;
  return AVISampleCursorStepByDecodeTime(a1, &v3);
}

uint64_t AVISampleCursorCopySampleLocation(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  CFTypeRef v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = DerivedStorage;
  if (a5)
    *a5 = 0;
  if (a4)
  {
    v11 = *(CFTypeRef *)(*(_QWORD *)DerivedStorage + 24);
    if (v11)
      v11 = CFRetain(v11);
    *a4 = v11;
  }
  v12 = *(_QWORD *)(v10 + 8);
  v13 = *(_QWORD *)(v12 + 68);
  if (v13)
  {
    if (a2)
    {
      v14 = *(_QWORD *)(v12 + 100) + 24 * *(int *)(v10 + 20);
      *a2 = *(_QWORD *)v14 + v13 * (*(int *)(v10 + 16) - (uint64_t)*(int *)(v14 + 20));
    }
    if (!a3)
      return 0;
LABEL_16:
    *a3 = v13;
    return 0;
  }
  if (a2)
    *a2 = *(_QWORD *)(*(_QWORD *)(v12 + 100) + 24 * *(int *)(v10 + 20));
  if (a3)
  {
    v13 = *(_QWORD *)(*(_QWORD *)(v12 + 100) + 24 * *(int *)(v10 + 20) + 8);
    goto LABEL_16;
  }
  return 0;
}

uint64_t AVISampleCursorCopyChunkDetails(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, uint64_t *a6, uint64_t *a7, uint64_t a8, _BYTE *a9, _BYTE *a10)
{
  uint64_t DerivedStorage;
  uint64_t v17;
  CFTypeRef v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v17 = DerivedStorage;
  if (a3)
    *a3 = 0;
  if (a2)
  {
    v18 = *(CFTypeRef *)(*(_QWORD *)DerivedStorage + 24);
    if (v18)
      v18 = CFRetain(v18);
    *a2 = v18;
  }
  if (a4)
    *a4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 8) + 100) + 24 * *(int *)(v17 + 20));
  if (a5)
    *a5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 8) + 100) + 24 * *(int *)(v17 + 20) + 8);
  if (a6)
  {
    v19 = *(_QWORD *)(v17 + 8);
    v20 = *(_QWORD *)(v19 + 68);
    if (v20)
      v21 = *(_QWORD *)(*(_QWORD *)(v19 + 100) + 24 * *(int *)(v17 + 20) + 8) / v20;
    else
      v21 = 1;
    *a6 = v21;
  }
  if (a7)
  {
    v22 = *(_QWORD *)(v17 + 8);
    if (*(_QWORD *)(v22 + 68))
      v23 = *(int *)(v17 + 16) - (uint64_t)*(int *)(*(_QWORD *)(v22 + 100) + 24 * *(int *)(v17 + 20) + 20);
    else
      v23 = 0;
    *a7 = v23;
  }
  if (a9)
    *a9 = 1;
  if (a10)
    *a10 = 1;
  return 0;
}

uint64_t AVISampleCursorCopyFormatDescription(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  CFTypeRef v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v4 = *(CFTypeRef *)(*(_QWORD *)(DerivedStorage + 8) + 8);
    if (v4)
      v4 = CFRetain(v4);
    *a2 = v4;
  }
  return 0;
}

uint64_t AVISampleCursorStepInDecodeOrderAndReportStepsTaken(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int *v21;
  int v22;
  CMTime v24;
  CMTime rhs;
  CMTime time;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = DerivedStorage;
  v7 = *(int *)(DerivedStorage + 16);
  if ((v7 ^ 0x7FFFFFFF) < a2)
  {
    v8 = 0x7FFFFFFF;
    goto LABEL_6;
  }
  if (v7 < -a2)
  {
    v8 = 0;
    goto LABEL_6;
  }
  v8 = v7 + a2;
  if ((int)v7 + (int)a2 >= 0)
  {
LABEL_6:
    v9 = *(_DWORD *)(*(_QWORD *)(DerivedStorage + 8) + 88);
    if (v8 >= v9)
      v10 = v9 - 1;
    else
      v10 = v8;
    if (a3)
      goto LABEL_10;
    goto LABEL_11;
  }
  v10 = 0;
  if (a3)
LABEL_10:
    *a3 = v10 - (int)v7;
LABEL_11:
  if (v10 != (_DWORD)v7)
  {
    time = *(CMTime *)(DerivedStorage + 48);
    CMTimeMultiply(&rhs, &time, v10 - v7);
    v24 = *(CMTime *)(v6 + 24);
    CMTimeAdd(&time, &v24, &rhs);
    *(CMTime *)(v6 + 24) = time;
  }
  *(_DWORD *)(v6 + 16) = v10;
  v11 = *(_QWORD *)(v6 + 8);
  if (*(_QWORD *)(v11 + 68))
  {
    v12 = *(_DWORD *)(v6 + 20);
    v13 = *(_QWORD *)(v11 + 100);
    v14 = v12;
    if (v10 >= *(_DWORD *)(v13 + 24 * v12 + 20))
    {
      v17 = *(int *)(v11 + 92);
      if ((int)v17 <= v12 + 1)
        v18 = v12 + 1;
      else
        v18 = v17;
      v19 = v18 - 1;
      --v12;
      v20 = v14 + 1;
      v21 = (int *)(v13 + 24 * (int)v14 + 44);
      while (v20 < v17)
      {
        v22 = *v21;
        v21 += 6;
        ++v12;
        ++v20;
        if (v10 < v22)
          goto LABEL_27;
      }
      v12 = v19;
    }
    else
    {
      v15 = (int *)(v13 + 24 * v12 - 4);
      do
      {
        v16 = *v15;
        v15 -= 6;
        --v12;
      }
      while (v10 < v16);
    }
  }
  else
  {
    v12 = v10;
  }
LABEL_27:
  *(_DWORD *)(v6 + 20) = v12;
  return 0;
}

uint64_t AVISampleCursorStepInPresentationOrderAndReportStepsTaken(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  AVISampleCursorStepInDecodeOrderAndReportStepsTaken(a1, a2, a3);
  return 0;
}

uint64_t FigPlayerAirPlayRoute_Create(uint64_t a1, const void *a2, const void **a3, NSObject *a4, const __CFString *a5)
{
  uint64_t Instance;
  uint64_t v10;
  CFTypeRef v11;
  dispatch_queue_t v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  char __str[16];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a3 || !a3[2] || !a3[3] || !*a3 || !a3[1] || !a3[5] || !a3[6] || !a3[7] || !a3[4])
    return 0;
  if (FigPlayerAirPlayRoute_GetTypeID_FigPlayerAirPlayRouteInitOnce != -1)
    dispatch_once(&FigPlayerAirPlayRoute_GetTypeID_FigPlayerAirPlayRouteInitOnce, &__block_literal_global_57);
  Instance = _CFRuntimeCreateInstance();
  v10 = Instance;
  if (Instance)
  {
    *(_OWORD *)(Instance + 240) = 0u;
    *(_BYTE *)(Instance + 241) = 0;
    *(_OWORD *)(Instance + 224) = 0u;
    *(_OWORD *)(Instance + 208) = 0u;
    *(_OWORD *)(Instance + 192) = 0u;
    *(_OWORD *)(Instance + 176) = 0u;
    *(_OWORD *)(Instance + 160) = 0u;
    *(_OWORD *)(Instance + 144) = 0u;
    *(_OWORD *)(Instance + 128) = 0u;
    *(_OWORD *)(Instance + 112) = 0u;
    *(_OWORD *)(Instance + 96) = 0u;
    *(_OWORD *)(Instance + 80) = 0u;
    *(_OWORD *)(Instance + 64) = 0u;
    *(_OWORD *)(Instance + 48) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    *(_OWORD *)(Instance + 16) = 0u;
    if (a5)
      CFStringGetCString(a5, (char *)(Instance + 241), 10, 0x600u);
    if (a4)
    {
      *(_QWORD *)(v10 + 104) = a4;
      dispatch_retain(a4);
      if (*(_QWORD *)(v10 + 104))
      {
LABEL_17:
        *(_QWORD *)(v10 + 128) = _Block_copy(*a3);
        *(_QWORD *)(v10 + 136) = _Block_copy(a3[1]);
        *(_QWORD *)(v10 + 144) = _Block_copy(a3[2]);
        *(_QWORD *)(v10 + 152) = _Block_copy(a3[3]);
        *(_QWORD *)(v10 + 168) = _Block_copy(a3[5]);
        *(_QWORD *)(v10 + 176) = _Block_copy(a3[6]);
        *(_QWORD *)(v10 + 184) = _Block_copy(a3[7]);
        *(_QWORD *)(v10 + 160) = _Block_copy(a3[4]);
        if (a2)
          v11 = CFRetain(a2);
        else
          v11 = 0;
        *(_QWORD *)(v10 + 232) = v11;
        *(_BYTE *)(v10 + 66) = 1;
        *(_BYTE *)(v10 + 219) = 0;
        playerairplayroute_updateRoutingContextUUID((NSObject **)v10, 0);
        if (dword_1EE2A2FA0)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        return v10;
      }
    }
    else
    {
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      *(_OWORD *)__str = 0u;
      snprintf(__str, 0x50uLL, "com.apple.coremedia.playerairplayroute_serialize.%s", (const char *)(v10 + 241));
      v12 = dispatch_queue_create(__str, 0);
      *(_QWORD *)(v10 + 104) = v12;
      if (v12)
        goto LABEL_17;
    }
    CFRelease((CFTypeRef)v10);
    return 0;
  }
  return v10;
}

void playerairplayroute_updateRoutingContextUUID(NSObject **cf, CFTypeRef a2)
{
  NSObject *v4;
  _QWORD v5[6];

  if (cf)
    CFRetain(cf);
  if (a2)
    CFRetain(a2);
  v4 = cf[13];
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = __playerairplayroute_updateRoutingContextUUID_block_invoke;
  v5[3] = &__block_descriptor_tmp_79;
  v5[4] = cf;
  v5[5] = a2;
  dispatch_async(v4, v5);
}

uint64_t FigPlayerAirPlayRoute_DoesCurrentRouteUseScreen(uint64_t a1)
{
  if (a1)
    return *(unsigned __int8 *)(a1 + 120);
  FigSignalErrorAt();
  return 0;
}

uint64_t FigPlayerAirPlayRoute_SuspendAirPlayScreen(uint64_t a1)
{
  if (!a1)
    return FigSignalErrorAt();
  if (!*(_BYTE *)(a1 + 64) && *(_BYTE *)(a1 + 120))
  {
    if (*(_QWORD *)(a1 + 56))
    {
      *(_BYTE *)(a1 + 64) = 1;
      FigEndpointStreamSuspend();
    }
  }
  return 0;
}

uint64_t FigPlayerAirPlayRoute_SuspendAirPlayScreenAndWaitForCompletion(uint64_t a1)
{
  uint64_t v2;
  NSObject *v4;
  uint64_t v5;
  void (*v6)(uint64_t, _QWORD, void (*)(int, int, dispatch_semaphore_t), NSObject *);
  dispatch_time_t v7;

  if (!a1)
    return FigSignalErrorAt();
  if (*(_BYTE *)(a1 + 64) || !*(_BYTE *)(a1 + 120) || !*(_QWORD *)(a1 + 56))
    return 0;
  v4 = dispatch_semaphore_create(0);
  *(_BYTE *)(a1 + 64) = 1;
  dispatch_retain(v4);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(void (**)(uint64_t, _QWORD, void (*)(int, int, dispatch_semaphore_t), NSObject *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v6)
    v6(v5, 0, playerairplayroute_screenStreamCompletionCallback, v4);
  v7 = dispatch_time(0, 1000000000);
  if (dispatch_semaphore_wait(v4, v7))
    v2 = FigSignalErrorAt();
  else
    v2 = 0;
  dispatch_release(v4);
  return v2;
}

void playerairplayroute_screenStreamCompletionCallback(int a1, int a2, dispatch_semaphore_t dsema)
{
  dispatch_semaphore_signal(dsema);
  dispatch_release(dsema);
}

uint64_t FigPlayerAirPlayRoute_ResumeAirPlayScreen(uint64_t a1)
{
  if (!a1)
    return FigSignalErrorAt();
  if (*(_BYTE *)(a1 + 64) && *(_BYTE *)(a1 + 120))
  {
    if (*(_QWORD *)(a1 + 56))
    {
      *(_BYTE *)(a1 + 64) = 0;
      FigEndpointStreamResume();
    }
  }
  return 0;
}

uint64_t FigPlayerAirPlayRoute_CopyProperty(uint64_t a1, CFTypeRef cf1, uint64_t a3, _QWORD *a4)
{
  NSObject *v8;
  _QWORD *v9;
  uint64_t v10;
  const void *v11;
  NSObject *v13;
  uint64_t v14;
  void (*v15)(uint64_t, _QWORD, uint64_t, _QWORD *);
  CFTypeRef v16;
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD block[6];
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;

  v20 = 0;
  v21 = &v20;
  v22 = 0x2000000000;
  v23 = 0;
  if (a1)
  {
    if (CFEqual(cf1, CFSTR("IsSetupForAirPlayVideo")))
    {
      v8 = *(NSObject **)(a1 + 104);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __FigPlayerAirPlayRoute_CopyProperty_block_invoke;
      block[3] = &__block_descriptor_tmp_59_0;
      block[4] = a1;
      block[5] = a4;
      v9 = block;
      goto LABEL_4;
    }
    if (!CFEqual(cf1, CFSTR("PickerContextUUID")))
    {
      if (!CFEqual(cf1, CFSTR("BufferedAudioStream")))
        goto LABEL_5;
      v8 = *(NSObject **)(a1 + 104);
      v17[0] = MEMORY[0x1E0C809B0];
      v17[1] = 0x40000000;
      v17[2] = __FigPlayerAirPlayRoute_CopyProperty_block_invoke_3;
      v17[3] = &__block_descriptor_tmp_61_0;
      v17[4] = a4;
      v17[5] = a1;
      v9 = v17;
LABEL_4:
      dispatch_sync(v8, v9);
LABEL_5:
      v10 = 0;
      goto LABEL_6;
    }
    v13 = *(NSObject **)(a1 + 104);
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 0x40000000;
    v18[2] = __FigPlayerAirPlayRoute_CopyProperty_block_invoke_2;
    v18[3] = &unk_1E2FA2B50;
    v18[4] = &v20;
    v18[5] = a1;
    dispatch_sync(v13, v18);
    v14 = v21[3];
    if (v14)
    {
      v15 = *(void (**)(uint64_t, _QWORD, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v15)
        v15(v14, *MEMORY[0x1E0D48D58], a3, a4);
      goto LABEL_5;
    }
    v16 = *(CFTypeRef *)(a1 + 32);
    if (v16)
      v16 = CFRetain(v16);
    v10 = 0;
    *a4 = v16;
  }
  else
  {
    v10 = FigSignalErrorAt();
  }
LABEL_6:
  v11 = (const void *)v21[3];
  if (v11)
    CFRelease(v11);
  _Block_object_dispose(&v20, 8);
  return v10;
}

uint64_t playerairplay_copyRoutingContext(uint64_t a1, CFTypeRef *a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v8;
  __CFDictionary *Mutable;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef cf[25];

  cf[24] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  cf[0] = 0;
  if (*(_BYTE *)(a1 + 16))
    return 0;
  if (*(_QWORD *)(a1 + 32))
  {
    if (dword_1EE2A2FA0)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0D48BE0], *(const void **)(a1 + 32));
    v10 = FigRoutingContextRemoteCopyContextForUUID();
    if (!(_DWORD)v10)
    {
LABEL_11:
      v11 = 0;
      *a2 = cf[0];
      cf[0] = 0;
      if (!Mutable)
        goto LABEL_13;
      goto LABEL_12;
    }
    v11 = v10;
    if (Mutable)
LABEL_12:
      CFRelease(Mutable);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 192);
    if (!v5)
      goto LABEL_9;
    v6 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    if (!v6)
    {
      v11 = 4294948075;
      goto LABEL_13;
    }
    v7 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(v6 + 8);
    if (!v7)
    {
      v11 = 4294948071;
      goto LABEL_13;
    }
    v8 = v7(v5, CFSTR("FAS_RoutingContext"), *MEMORY[0x1E0C9AE00], cf);
    if (!(_DWORD)v8)
    {
LABEL_9:
      Mutable = 0;
      goto LABEL_11;
    }
    v11 = v8;
  }
LABEL_13:
  if (cf[0])
    CFRelease(cf[0]);
  return v11;
}

uint64_t FigPlayerAirPlayRoute_SetProperty(uint64_t a1, CFTypeRef cf1, const void *a3)
{
  CFTypeID v6;
  const void *v7;
  char v8;
  NSObject *v9;
  void (*v10)(uint64_t);
  void *v11;
  NSObject *v12;
  uint64_t *p_block;
  uint64_t result;
  CFTypeID v15;
  int Value;
  CFTypeID v17;
  int v18;
  _QWORD v19[6];
  uint64_t block;
  uint64_t v21;
  void (*v22)(uint64_t);
  void *v23;
  uint64_t v24;
  const void *v25;

  if (!a1)
    return FigSignalErrorAt();
  if (CFEqual(cf1, CFSTR("FigAudioSession")))
  {
    if (!a3)
    {
      v7 = (const void *)a1;
      goto LABEL_9;
    }
    v6 = CFGetTypeID(a3);
    if (v6 == FigAudioSessionGetTypeID())
    {
      CFRetain((CFTypeRef)a1);
      v7 = a3;
LABEL_9:
      CFRetain(v7);
      v12 = *(NSObject **)(a1 + 104);
      block = MEMORY[0x1E0C809B0];
      v21 = 0x40000000;
      v22 = __FigPlayerAirPlayRoute_setNewFigAudioSession_block_invoke;
      v23 = &__block_descriptor_tmp_76_0;
      v24 = a1;
      v25 = a3;
      dispatch_sync(v12, &block);
      return 0;
    }
    return 4294954436;
  }
  if (CFEqual(cf1, CFSTR("AirPlayVideoActive")))
  {
    v8 = FigCFEqual();
    CFRetain((CFTypeRef)a1);
    v9 = *(NSObject **)(a1 + 104);
    block = MEMORY[0x1E0C809B0];
    v21 = 0x40000000;
    v10 = __playerairplayroute_setAirPlayVideoIsActive_block_invoke;
    v11 = &__block_descriptor_tmp_85_1;
LABEL_12:
    v22 = v10;
    v23 = v11;
    v24 = a1;
    LOBYTE(v25) = v8;
    p_block = &block;
LABEL_13:
    dispatch_async(v9, p_block);
    return 0;
  }
  if (CFEqual(cf1, CFSTR("VideoForMusicActive")))
  {
    v8 = FigCFEqual();
    CFRetain((CFTypeRef)a1);
    v9 = *(NSObject **)(a1 + 104);
    block = MEMORY[0x1E0C809B0];
    v21 = 0x40000000;
    v10 = __playerairplayroute_setAudioOnlyAirPlayVideoIsActive_block_invoke;
    v11 = &__block_descriptor_tmp_86_2;
    goto LABEL_12;
  }
  if (CFEqual(cf1, CFSTR("AllowBackgroundClientProcessToBeUnsuspended")))
  {
    CFRetain((CFTypeRef)a1);
    if (a3)
      CFRetain(a3);
    v9 = *(NSObject **)(a1 + 104);
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 0x40000000;
    v19[2] = __FigPlayerAirPlayRoute_SetProperty_block_invoke;
    v19[3] = &__block_descriptor_tmp_62_1;
    v19[4] = a1;
    v19[5] = a3;
    p_block = v19;
    goto LABEL_13;
  }
  if (CFEqual(cf1, CFSTR("PickerContextUUID")))
  {
    playerairplayroute_updateRoutingContextUUID((NSObject **)a1, a3);
    return 0;
  }
  if (CFEqual(cf1, CFSTR("ClientPID")))
  {
    LODWORD(block) = 0;
    if (a3)
    {
      v15 = CFGetTypeID(a3);
      if (v15 == CFNumberGetTypeID())
      {
        if (CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &block))
          *(_DWORD *)(a1 + 200) = block;
      }
    }
    return 0;
  }
  if (CFEqual(cf1, CFSTR("PlaybackActive")))
  {
    if (a3)
      Value = CFBooleanGetValue((CFBooleanRef)a3);
    else
      Value = 0;
    if (Value == *(unsigned __int8 *)(a1 + 80))
      return 0;
    *(_BYTE *)(a1 + 80) = Value;
    goto LABEL_37;
  }
  if (!CFEqual(cf1, CFSTR("DisableBufferedAudio")))
  {
    if (!CFEqual(cf1, CFSTR("IsPIPMuted")))
      return 4294954436;
    if (a3)
    {
      v17 = CFGetTypeID(a3);
      if (v17 == CFBooleanGetTypeID())
      {
        v18 = CFBooleanGetValue((CFBooleanRef)a3);
        if (*(unsigned __int8 *)(a1 + 219) == v18)
          return 0;
        *(_BYTE *)(a1 + 219) = v18;
        goto LABEL_37;
      }
    }
    return FigSignalErrorAt();
  }
  result = 0;
  if (a3 && (const void *)*MEMORY[0x1E0C9AE50] == a3)
  {
    *(_BYTE *)(a1 + 240) = 1;
LABEL_37:
    playerairplayroute_updateRoutingRegistry((NSObject **)a1);
    return 0;
  }
  return result;
}

void playerairplayroute_updateRoutingRegistry(NSObject **cf)
{
  NSObject *v2;
  _QWORD block[5];

  if (cf)
    CFRetain(cf);
  v2 = cf[13];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __playerairplayroute_updateRoutingRegistry_block_invoke;
  block[3] = &__block_descriptor_tmp_80_2;
  block[4] = cf;
  dispatch_async(v2, block);
}

uint64_t FigPlayerAirPlayRoute_ResetRoutingContextIfNeeded(NSObject **cf)
{
  NSObject *v2;
  _QWORD block[5];

  if (cf)
    CFRetain(cf);
  v2 = cf[13];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __FigPlayerAirPlayRoute_ResetRoutingContextIfNeeded_block_invoke;
  block[3] = &__block_descriptor_tmp_63_1;
  block[4] = cf;
  dispatch_async(v2, block);
  return 0;
}

void playerairplayroute_resetRoutingContextIfNeededInternal(uint64_t a1)
{
  int v2;
  CFTypeRef v3;
  const void *v4;
  CFTypeRef cf;

  cf = 0;
  if (!*(_BYTE *)(a1 + 16))
  {
    v2 = playerairplay_copyRoutingContext(a1, &cf);
    v3 = cf;
    if (v2 || (playerairplayroute_updateRoutingRegistryInternal(a1, (uint64_t)cf), FigCFEqual()))
    {
      if (!v3)
        return;
      goto LABEL_5;
    }
    playerairplayroute_stopRoutingContextListeners(a1);
    v4 = *(const void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v3;
    if (v3)
      CFRetain(v3);
    if (v4)
      CFRelease(v4);
    if (*(_QWORD *)(a1 + 24))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
    }
    playerairplayroute_pickableRoutesChangedGuts(a1);
    if (v3)
LABEL_5:
      CFRelease(v3);
  }
}

void FigPlayerAirPlayRoute_ReevaluateCurrentRoute(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  if (a1 && !*(_BYTE *)(a1 + 16))
  {
    v1 = *(NSObject **)(a1 + 104);
    if (v1)
    {
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __FigPlayerAirPlayRoute_ReevaluateCurrentRoute_block_invoke;
      block[3] = &__block_descriptor_tmp_64;
      block[4] = a1;
      dispatch_sync(v1, block);
    }
  }
}

uint64_t playerairplayroute_pickableRoutesChangedGuts(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  NSObject *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  char *v13;
  uint64_t v14;
  CFTypeRef v15;
  uint64_t (*v16)(uint64_t, CFTypeRef, CFTypeRef *);
  int v17;
  uint64_t v18;
  CFTypeRef v19;
  uint64_t (*v20)(uint64_t, CFTypeRef, CFTypeRef *);
  uint64_t CMBaseObject;
  void (*v22)(uint64_t, _QWORD, _QWORD);
  uint64_t v23;
  unsigned int (*v24)(uint64_t, _QWORD, uint64_t, CFBooleanRef *);
  _QWORD *v25;
  const void *v26;
  int v27;
  __CFDictionary *v28;
  int v29;
  NSObject *v30;
  unsigned int v31;
  unsigned int v32;
  __CFDictionary *Mutable;
  const void *v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, _QWORD, _QWORD, void **);
  uint64_t v37;
  int v38;
  int v39;
  unsigned __int8 v40;
  const void *v41;
  CFTypeRef v42;
  int v43;
  uint64_t v44;
  unsigned int (*v45)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFIndex Count;
  uint64_t v47;
  CFIndex v48;
  uint64_t v49;
  unsigned int v50;
  const void *ValueAtIndex;
  uint64_t v52;
  unsigned int (*v53)(uint64_t, uint64_t, uint64_t, _BYTE *);
  uint64_t v54;
  uint64_t (*v55)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  int v56;
  const void *v57;
  uint64_t v58;
  void (*v59)(uint64_t, _QWORD, uint64_t, CFBooleanRef *);
  int v60;
  uint64_t v61;
  void (*v62)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  const void *v63;
  const __CFAllocator *v64;
  uint64_t v65;
  void (*v66)(uint64_t, _QWORD, const __CFAllocator *, CFBooleanRef *);
  uint64_t v67;
  void (*v68)(uint64_t, _QWORD, const __CFAllocator *, CFBooleanRef *);
  uint64_t v69;
  void (*v70)(uint64_t, _QWORD, const __CFAllocator *, CFBooleanRef *);
  uint64_t v71;
  void (*v72)(uint64_t, _QWORD, const __CFAllocator *, CFBooleanRef *);
  uint64_t v73;
  void (*v74)(uint64_t, _QWORD, const __CFAllocator *, CFBooleanRef *);
  uint64_t v75;
  void (*v76)(uint64_t, _QWORD, const __CFAllocator *, CFBooleanRef *);
  uint64_t v77;
  void (*v78)(uint64_t, _QWORD, const __CFAllocator *, CFDictionaryRef *);
  NSObject *v79;
  unsigned int v80;
  unsigned int v81;
  const __CFString *v82;
  const __CFArray *ArrayBySeparatingStrings;
  const __CFArray *v84;
  const __CFString *v85;
  SInt32 IntValue;
  _BOOL4 v87;
  NSObject *v89;
  unsigned int v90;
  unsigned int v91;
  const __CFString *v92;
  const __CFString *v93;
  int v94;
  const __CFString *v95;
  const __CFString *v96;
  CFTypeID v97;
  int v98;
  BOOL v99;
  int v100;
  NSObject *v101;
  unsigned int v102;
  unsigned int v103;
  NSObject *v104;
  unsigned int v105;
  unsigned int v106;
  const void *v107;
  const void *v108;
  uint64_t v109;
  void (*v110)(uint64_t, _QWORD, const __CFAllocator *, CFBooleanRef *);
  int v111;
  const void *v112;
  uint64_t v113;
  void (*v114)(uint64_t, _QWORD, const __CFAllocator *, CFBooleanRef *);
  const void *v115;
  int v116;
  uint64_t v117;
  void (*v118)(uint64_t, _QWORD, const __CFAllocator *, CFBooleanRef *);
  uint64_t v119;
  void (*v120)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  const void *v121;
  const void *v122;
  int v123;
  char v124;
  BOOL v125;
  char v126;
  uint64_t v127;
  const void *v128;
  const void *v129;
  const void *v130;
  const void *v131;
  const void *v132;
  const void *v133;
  const void *v134;
  const void *v135;
  CFTypeRef v136;
  const void *v137;
  CFTypeRef v138;
  const void *v139;
  const void *v140;
  void *v141;
  const void *v142;
  CFTypeRef v143;
  NSObject *v144;
  unsigned int v145;
  unsigned int v146;
  uint64_t v147;
  int v148;
  const __CFString *v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  int v153;
  NSObject *v154;
  unsigned int v155;
  unsigned int v156;
  const void *v157;
  const __CFString *v158;
  int v159;
  int HaveSameID;
  int v161;
  int v162;
  void *v163;
  int v164;
  int v165;
  uint64_t v166;
  void *v167;
  __int16 v168;
  CFDictionaryRef theDict;
  CFTypeRef v170;
  CFTypeRef v171;
  CFBooleanRef BOOLean;
  CFTypeRef v173;
  CFTypeRef v174;
  void *value;
  CFTypeRef v176;
  CFTypeRef v177;
  CFTypeRef v178;
  os_log_type_t v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t v182;
  CFTypeRef v183;
  _BYTE cf[12];
  __int16 v185;
  uint64_t v186;
  __int16 v187;
  uint64_t v188;
  __int16 v189;
  _BYTE v190[10];
  int v191;
  __int16 v192;
  const __CFString *v193;
  __int16 v194;
  uint64_t v195;
  __int16 v196;
  uint64_t v197;
  __int16 v198;
  int v199;
  __int16 v200;
  int v201;
  __int16 v202;
  int v203;
  CFTypeRef v204[19];

  v204[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(result + 16))
    return result;
  v1 = result;
  v177 = 0;
  v178 = 0;
  value = 0;
  v176 = 0;
  v173 = 0;
  v174 = 0;
  v171 = 0;
  BOOLean = 0;
  theDict = 0;
  v170 = 0;
  v168 = 0;
  v2 = &sFigCDSNodeProtocolID;
  if (dword_1EE2A2FA0)
  {
    LODWORD(v183) = 0;
    BYTE4(v182) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v4 = (_QWORD *)MEMORY[0x1E0C9AE00];
  if (!*(_QWORD *)(v1 + 24))
  {
    v12 = 1;
    goto LABEL_48;
  }
  v5 = *(_QWORD *)(v1 + 192);
  v6 = *MEMORY[0x1E0C9AE00];
  if (v5)
  {
    v7 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    if (v7)
    {
      v8 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(v7 + 48);
      if (v8)
        v8(v5, *MEMORY[0x1E0D49BB0], v6, &v170);
    }
  }
  if (!FigGetCFPreferenceNumberWithDefault())
  {
    v13 = getenv("ENABLE_BUFFERED_LOCAL_PLAYBACK");
    if (!v13 || strcmp(v13, "1"))
    {
      v14 = *(_QWORD *)(v1 + 24);
      v15 = v170;
      v16 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 144);
      if (v16)
      {
        v17 = v16(v14, v15, &v178);
        if (v17)
          goto LABEL_393;
        goto LABEL_28;
      }
LABEL_31:
      v166 = 0;
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v29 = -12782;
LABEL_32:
      LOBYTE(v164) = 1;
LABEL_60:
      v40 = 5;
LABEL_282:
      v57 = *(const void **)(v1 + 56);
      if (v57)
        CFRetain(*(CFTypeRef *)(v1 + 56));
      playerairplayroute_stopEndpointNotificationListeners(v1);
      v127 = *(_QWORD *)(v1 + 48);
      if (v127 && !playerairplayroute_endpointStreamsHaveSameID(v127, (uint64_t)v177))
        FigEndpointRelinquishStreamResource();
      v128 = *(const void **)(v1 + 40);
      if (v128)
      {
        CFRelease(v128);
        *(_QWORD *)(v1 + 40) = 0;
      }
      v129 = *(const void **)(v1 + 96);
      if (v129)
      {
        CFRelease(v129);
        *(_QWORD *)(v1 + 96) = 0;
      }
      v130 = *(const void **)(v1 + 112);
      if (v130)
      {
        CFRelease(v130);
        *(_QWORD *)(v1 + 112) = 0;
      }
      *(_BYTE *)(v1 + 120) = 0;
      *(_WORD *)(v1 + 65) = 256;
      v131 = *(const void **)(v1 + 56);
      if (v131)
      {
        CFRelease(v131);
        *(_QWORD *)(v1 + 56) = 0;
      }
      v132 = *(const void **)(v1 + 72);
      if (v132)
      {
        CFRelease(v132);
        *(_QWORD *)(v1 + 72) = 0;
      }
      v133 = *(const void **)(v1 + 48);
      if (v133)
      {
        CFRelease(v133);
        *(_QWORD *)(v1 + 48) = 0;
      }
      if (!v29)
      {
        if (v27)
        {
          *(_BYTE *)(v1 + 65) = v27;
          v134 = *(const void **)(v1 + 56);
          *(_QWORD *)(v1 + 56) = v26;
          if (v26)
            CFRetain(v26);
          if (v134)
            CFRelease(v134);
          v135 = *(const void **)(v1 + 72);
          v136 = v176;
          *(_QWORD *)(v1 + 72) = v176;
          if (v136)
            CFRetain(v136);
          if (v135)
            CFRelease(v135);
        }
        if (HIDWORD(v166))
        {
          v137 = *(const void **)(v1 + 48);
          v138 = v177;
          *(_QWORD *)(v1 + 48) = v177;
          if (v138)
            CFRetain(v138);
          if (v137)
            CFRelease(v137);
        }
        v139 = *(const void **)(v1 + 96);
        *(_QWORD *)(v1 + 96) = v28;
        if (v28)
          CFRetain(v28);
        if (v139)
          CFRelease(v139);
        v140 = *(const void **)(v1 + 112);
        v141 = value;
        *(_QWORD *)(v1 + 112) = value;
        if (v141)
          CFRetain(v141);
        if (v140)
          CFRelease(v140);
        v142 = *(const void **)(v1 + 40);
        v143 = v178;
        *(_QWORD *)(v1 + 40) = v178;
        if (v143)
          CFRetain(v143);
        if (v142)
          CFRelease(v142);
        if (*(_QWORD *)(v1 + 40))
        {
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterAddWeakListener();
        }
        *(_BYTE *)(v1 + 120) = v166;
        *(_BYTE *)(v1 + 66) = v164;
      }
      if (!FigCFEqual())
        *(_BYTE *)(v1 + 64) = 0;
      goto LABEL_331;
    }
  }
  if (dword_1EE2A2FA0)
  {
    LODWORD(v183) = 0;
    BYTE4(v182) = 0;
    v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v10 = v183;
    if (os_log_type_enabled(v9, BYTE4(v182)))
      v11 = v10;
    else
      v11 = v10 & 0xFFFFFFFE;
    if (v11)
    {
      *(_DWORD *)cf = 136315650;
      *(_QWORD *)&cf[4] = "playerairplayroute_updateRouteInformation";
      v185 = 2048;
      v186 = v1;
      v187 = 2082;
      v188 = v1 + 241;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v18 = *(_QWORD *)(v1 + 24);
  v19 = v170;
  v20 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 192);
  if (!v20)
    goto LABEL_31;
  v17 = v20(v18, v19, &v178);
  if (v17)
  {
LABEL_393:
    v29 = v17;
    v166 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    goto LABEL_32;
  }
  if (!v178)
    goto LABEL_33;
  CMBaseObject = FigEndpointGetCMBaseObject();
  v22 = *(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v22)
    v22(CMBaseObject, *MEMORY[0x1E0CA37B8], *MEMORY[0x1E0C9AE50]);
LABEL_28:
  if (v178)
  {
    v23 = *(_QWORD *)(v1 + 24);
    v24 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
    if (v24)
    {
      v25 = (_QWORD *)MEMORY[0x1E0D48D38];
LABEL_35:
      v12 = 1;
      if (!v24(v23, *v25, v6, &BOOLean) && BOOLean)
        v12 = CFBooleanGetValue(BOOLean);
      goto LABEL_39;
    }
    goto LABEL_38;
  }
LABEL_33:
  v23 = *(_QWORD *)(v1 + 24);
  v24 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
  if (v24)
  {
    v25 = (_QWORD *)MEMORY[0x1E0D48D40];
    goto LABEL_35;
  }
LABEL_38:
  v12 = 1;
LABEL_39:
  if (dword_1EE2A2FA0)
  {
    LODWORD(v183) = 0;
    BYTE4(v182) = 0;
    v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v31 = v183;
    if (os_log_type_enabled(v30, BYTE4(v182)))
      v32 = v31;
    else
      v32 = v31 & 0xFFFFFFFE;
    if (v32)
    {
      *(_DWORD *)cf = 136316162;
      *(_QWORD *)&cf[4] = "playerairplayroute_updateRouteInformation";
      v185 = 2048;
      v186 = v1;
      v187 = 2082;
      v188 = v1 + 241;
      v189 = 2048;
      *(_QWORD *)v190 = v178;
      *(_WORD *)&v190[8] = 1024;
      v191 = v12;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (BOOLean)
  {
    CFRelease(BOOLean);
    BOOLean = 0;
  }
LABEL_48:
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v28 = Mutable;
  if (!Mutable)
  {
    LOBYTE(v164) = v12;
    v166 = 0;
    v26 = 0;
    v27 = 0;
    v29 = -12862;
    goto LABEL_60;
  }
  v163 = (void *)*MEMORY[0x1E0C9AE50];
  v167 = (void *)*MEMORY[0x1E0C9AE40];
  if (v12)
    v34 = (const void *)*MEMORY[0x1E0C9AE50];
  else
    v34 = (const void *)*MEMORY[0x1E0C9AE40];
  CFDictionaryAddValue(Mutable, CFSTR("IsLocalPlaybackEnabled"), v34);
  if (!v178)
  {
    LOBYTE(v166) = 0;
    v39 = 0;
    v26 = 0;
    v27 = 0;
    v159 = 1;
    HaveSameID = 0;
    goto LABEL_103;
  }
  v35 = FigEndpointGetCMBaseObject();
  v36 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v36)
  {
    LOBYTE(v164) = v12;
    v166 = 0;
    v26 = 0;
    v27 = 0;
    v29 = -12782;
    goto LABEL_60;
  }
  v37 = *v4;
  v38 = v36(v35, *MEMORY[0x1E0CA4348], *v4, &value);
  if (v38)
  {
    v29 = v38;
    LOBYTE(v164) = v12;
    v166 = 0;
    v26 = 0;
    v27 = 0;
    goto LABEL_383;
  }
  if (!value)
  {
    LOBYTE(v164) = v12;
    v166 = 0;
    v26 = 0;
    v27 = 0;
    v29 = -12860;
LABEL_383:
    v40 = 5;
    v2 = &sFigCDSNodeProtocolID;
    goto LABEL_282;
  }
  CFDictionaryAddValue(v28, CFSTR("NewRouteName"), value);
  if (FigGetCFPreferenceNumberWithDefault())
  {
    CFDictionarySetValue(v28, CFSTR("IsLocalPlaybackEnabled"), v163);
    HaveSameID = 0;
    v39 = 0;
    v12 = 1;
  }
  else if (*(_BYTE *)(v1 + 220))
  {
    HaveSameID = 0;
    v39 = 0;
  }
  else
  {
    if (*(_QWORD *)(v1 + 48) && FigEndpointContainsStream())
    {
      v41 = *(const void **)(v1 + 48);
      if (v41)
        v42 = CFRetain(v41);
      else
        v42 = 0;
      v177 = v42;
    }
    else
    {
      FigEndpointAcquireAndCopyStreamResource();
      v42 = v177;
    }
    HaveSameID = playerairplayroute_endpointStreamsHaveSameID(*(_QWORD *)(v1 + 48), (uint64_t)v42);
    v39 = v177 != 0;
  }
  if (CelestialIsAppleTV() || CelestialIsAudioAccessory())
  {
    v43 = 0;
  }
  else
  {
    v58 = FigEndpointGetCMBaseObject();
    v59 = *(void (**)(uint64_t, _QWORD, uint64_t, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 48);
    if (v59)
      v59(v58, *MEMORY[0x1E0CA42E0], v37, &BOOLean);
    if (BOOLean)
    {
      v60 = CFBooleanGetValue(BOOLean);
      if (BOOLean)
      {
        CFRelease(BOOLean);
        BOOLean = 0;
      }
    }
    else
    {
      v60 = 0;
    }
    v43 = v60;
    if (v176)
    {
      CFRelease(v176);
      v176 = 0;
    }
    v61 = FigEndpointGetCMBaseObject();
    v62 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v62)
      v62(v61, *MEMORY[0x1E0CA4470], v37, &v176);
  }
  v161 = v43;
  v204[0] = 0;
  *(_QWORD *)cf = 0;
  if (v178)
  {
    v44 = FigEndpointGetCMBaseObject();
    v45 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
    if (!v45)
    {
      v26 = 0;
      goto LABEL_93;
    }
    v26 = 0;
    if (!v45(v44, *MEMORY[0x1E0CA43C8], v37, v204) && v204[0])
    {
      Count = CFArrayGetCount((CFArrayRef)v204[0]);
      if (Count < 1)
      {
        v26 = 0;
        goto LABEL_93;
      }
      v47 = Count;
      v165 = v12;
      v48 = 0;
      v49 = *MEMORY[0x1E0CA4820];
      v50 = 1;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v204[0], v48);
        if (ValueAtIndex)
        {
          v26 = ValueAtIndex;
          v52 = FigEndpointStreamGetCMBaseObject();
          v53 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
          if (!v53 || v53(v52, v49, v37, cf))
          {
LABEL_89:
            v26 = 0;
            goto LABEL_90;
          }
          if (*(_QWORD *)cf)
          {
            if (FigCFEqual())
            {
              CFRetain(v26);
LABEL_90:
              v12 = v165;
              break;
            }
            if (*(_QWORD *)cf)
            {
              CFRelease(*(CFTypeRef *)cf);
              *(_QWORD *)cf = 0;
            }
          }
        }
        v48 = v50;
        v99 = v47 <= v50++;
        if (v99)
          goto LABEL_89;
      }
    }
LABEL_93:
    if (*(_QWORD *)cf)
      CFRelease(*(CFTypeRef *)cf);
    if (v204[0])
      CFRelease(v204[0]);
  }
  else
  {
    v26 = 0;
  }
  v54 = FigEndpointGetCMBaseObject();
  v55 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v55)
  {
    LOBYTE(v166) = 0;
    HIDWORD(v166) = v39;
    LOBYTE(v164) = v12;
    v29 = -12782;
LABEL_111:
    v40 = 5;
    v2 = &sFigCDSNodeProtocolID;
    v27 = v161;
    goto LABEL_282;
  }
  v56 = v55(v54, *MEMORY[0x1E0CA4388], v37, &v174);
  if (v56)
  {
    v29 = v56;
    LOBYTE(v166) = 0;
    HIDWORD(v166) = v39;
    LOBYTE(v164) = v12;
    goto LABEL_111;
  }
  v27 = v161;
  if (v26 || FigCFEqual())
  {
    v159 = 0;
    LOBYTE(v166) = 1;
  }
  else
  {
    LOBYTE(v166) = 0;
    v26 = 0;
    v159 = 1;
  }
  v2 = &sFigCDSNodeProtocolID;
LABEL_103:
  v164 = v12;
  HIDWORD(v166) = v39;
  if (*(CFTypeRef *)(v1 + 40) == v178
    && *(unsigned __int8 *)(v1 + 65) == v27
    && FigCFEqual()
    && *(const void **)(v1 + 56) == v26
    && HaveSameID)
  {
    if (*(unsigned __int8 *)(v1 + 66) == v12)
      goto LABEL_109;
    if (v12 != 1)
    {
      v29 = 0;
      v40 = 4;
      goto LABEL_282;
    }
  }
  v63 = v163;
  if (v27)
  {
    v162 = v27;
    v64 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v65 = FigEndpointGetCMBaseObject();
    v66 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
    if (v66)
      v66(v65, *MEMORY[0x1E0CA40C8], v64, &BOOLean);
    if (BOOLean)
    {
      CFDictionaryAddValue(v28, CFSTR("AirPlayFromCloudSupported"), BOOLean);
      if (BOOLean)
      {
        CFRelease(BOOLean);
        BOOLean = 0;
      }
    }
    v67 = FigEndpointGetCMBaseObject();
    v68 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
    if (v68)
      v68(v67, *MEMORY[0x1E0CA40D8], v64, &BOOLean);
    if (BOOLean)
    {
      CFDictionaryAddValue(v28, CFSTR("AirPlayPlayQueueSupported"), BOOLean);
      if (BOOLean)
      {
        CFRelease(BOOLean);
        BOOLean = 0;
      }
    }
    v69 = FigEndpointGetCMBaseObject();
    v70 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
    if (v70)
      v70(v69, *MEMORY[0x1E0CA41D8], v64, &BOOLean);
    if (BOOLean)
    {
      CFDictionaryAddValue(v28, CFSTR("ExternalPlaybackCannotFetchMediaFromSender"), BOOLean);
      if (BOOLean)
      {
        CFRelease(BOOLean);
        BOOLean = 0;
      }
    }
    v71 = FigEndpointGetCMBaseObject();
    v72 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
    if (v72)
      v72(v71, *MEMORY[0x1E0CA41F8], v64, &BOOLean);
    if (BOOLean)
    {
      CFDictionaryAddValue(v28, CFSTR("ExternalPlaybackDoesNotSupportEncryptedCRABS"), BOOLean);
      if (BOOLean)
      {
        CFRelease(BOOLean);
        BOOLean = 0;
      }
    }
    v73 = FigEndpointGetCMBaseObject();
    v74 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
    if (v74)
      v74(v73, *MEMORY[0x1E0CA41E8], v64, &BOOLean);
    if (BOOLean)
    {
      CFDictionaryAddValue(v28, CFSTR("ExternalPlaybackDoesNotRequireVodkaForHLS"), BOOLean);
      if (BOOLean)
      {
        CFRelease(BOOLean);
        BOOLean = 0;
      }
    }
    v75 = FigEndpointGetCMBaseObject();
    v76 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
    if (v76)
      v76(v75, *MEMORY[0x1E0CA4208], v64, &BOOLean);
    if (BOOLean)
    {
      CFDictionaryAddValue(v28, CFSTR("ExternalPlaybackSupportsOfflineHLS"), BOOLean);
      if (BOOLean)
      {
        CFRelease(BOOLean);
        BOOLean = 0;
      }
    }
    v77 = FigEndpointGetCMBaseObject();
    v78 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
    if (v78)
      v78(v77, *MEMORY[0x1E0CA41E0], v64, &theDict);
    if (!theDict)
      goto LABEL_226;
    if (FigCFDictionaryGetBooleanIfPresent())
    {
      if (dword_1EE2A2FA0)
      {
        LODWORD(v183) = 0;
        BYTE4(v182) = 0;
        v79 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v80 = v183;
        if (os_log_type_enabled(v79, BYTE4(v182)))
          v81 = v80;
        else
          v81 = v80 & 0xFFFFFFFE;
        if (v81)
        {
          *(_DWORD *)cf = 136315906;
          *(_QWORD *)&cf[4] = "playerairplayroute_updateRouteInformation";
          v185 = 2048;
          v186 = v1;
          v187 = 2082;
          v188 = v1 + 241;
          v189 = 1024;
          *(_DWORD *)v190 = 0;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v2 = &sFigCDSNodeProtocolID;
      }
    }
    else
    {
      if (theDict)
      {
        v82 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("webAppVersion"));
        if (v82)
        {
          ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(v64, v82, CFSTR("."));
          v84 = ArrayBySeparatingStrings;
          if (ArrayBySeparatingStrings
            && CFArrayGetCount(ArrayBySeparatingStrings) >= 1
            && (v85 = (const __CFString *)CFArrayGetValueAtIndex(v84, 0)) != 0)
          {
            IntValue = CFStringGetIntValue(v85);
            v87 = 0;
            if (IntValue != 0x80000000 && IntValue && IntValue != 0x7FFFFFFF)
              v87 = IntValue > 40 || (IntValue & 0xFFFFFFFE) == 18;
          }
          else
          {
            v87 = 0;
          }
        }
        else
        {
          v87 = 0;
          v84 = 0;
        }
      }
      else
      {
        v87 = 0;
        v84 = 0;
        v82 = 0;
      }
      if (dword_1EE2A2FA0)
      {
        LODWORD(v183) = 0;
        BYTE4(v182) = 0;
        v89 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v90 = v183;
        if (os_log_type_enabled(v89, BYTE4(v182)))
          v91 = v90;
        else
          v91 = v90 & 0xFFFFFFFE;
        if (v91)
        {
          *(_DWORD *)cf = 136316162;
          *(_QWORD *)&cf[4] = "playerairplayroute_isAirPlayVideoWithSharePlaySupportedByReceiver";
          v185 = 2048;
          v186 = v1;
          v187 = 2082;
          v188 = v1 + 241;
          v189 = 2112;
          *(_QWORD *)v190 = v82;
          *(_WORD *)&v190[8] = 1024;
          v191 = v87;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (v84)
        CFRelease(v84);
      HIBYTE(v168) = v87;
      v2 = &sFigCDSNodeProtocolID;
      v39 = HIDWORD(v166);
    }
    if (FigCFDictionaryGetBooleanIfPresent())
    {
LABEL_218:
      if (*((_DWORD *)v2 + 1000))
      {
        LODWORD(v183) = 0;
        BYTE4(v182) = 0;
        v104 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v105 = v183;
        if (os_log_type_enabled(v104, BYTE4(v182)))
          v106 = v105;
        else
          v106 = v105 & 0xFFFFFFFE;
        if (v106)
        {
          *(_DWORD *)cf = 136315906;
          *(_QWORD *)&cf[4] = "playerairplayroute_updateRouteInformation";
          v185 = 2048;
          v186 = v1;
          v187 = 2082;
          v188 = v1 + 241;
          v189 = 1024;
          *(_DWORD *)v190 = v168;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      FigCFDictionaryGetBooleanIfPresent();
      v63 = v163;
LABEL_226:
      if (HIBYTE(v168))
        v107 = v63;
      else
        v107 = v167;
      CFDictionaryAddValue(v28, CFSTR("ExternalPlaybackSupportsAirPlayVideoWithSharePlay"), v107);
      if ((_BYTE)v168)
        v108 = v63;
      else
        v108 = v167;
      CFDictionaryAddValue(v28, CFSTR("ExternalPlaybackSupportsInterstitials"), v108);
      v109 = FigEndpointGetCMBaseObject();
      v110 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
      if (v110)
        v110(v109, *MEMORY[0x1E0CA4200], v64, &BOOLean);
      if (!BOOLean)
        goto LABEL_238;
      v111 = CFBooleanGetValue(BOOLean);
      if (BOOLean)
      {
        CFRelease(BOOLean);
        BOOLean = 0;
      }
      v112 = v63;
      if (!v111)
LABEL_238:
        v112 = v167;
      CFDictionaryAddValue(v28, CFSTR("ExternalPlaybackSupportsIntegratedTimeline"), v112);
      CFDictionaryAddValue(v28, CFSTR("ExternalPlaybackSupportsStopAtEndOfQueue"), v167);
      v113 = FigEndpointGetCMBaseObject();
      v114 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
      if (v114)
        v114(v113, *MEMORY[0x1E0CA41A8], v64, &BOOLean);
      if (BOOLean)
      {
        if ((_BYTE)v168 || (v116 = FigCFEqual(), v115 = v167, !v116))
          v115 = v63;
      }
      else
      {
        v115 = v167;
      }
      CFDictionaryAddValue(v28, CFSTR("ExternalPlaybackReportsValidSeekResponseTime"), v115);
      if (BOOLean)
      {
        CFRelease(BOOLean);
        BOOLean = 0;
      }
      v117 = FigEndpointGetCMBaseObject();
      v118 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
      if (v118)
        v118(v117, *MEMORY[0x1E0CA40E8], v64, &BOOLean);
      if (BOOLean)
      {
        CFDictionaryAddValue(v28, CFSTR("AirPlayVideoV2Supported"), BOOLean);
        if (BOOLean)
        {
          CFRelease(BOOLean);
          BOOLean = 0;
        }
      }
      CFDictionaryAddValue(v28, CFSTR("IsURLPlaybackEnabled"), v63);
      v119 = FigEndpointGetCMBaseObject();
      v120 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
      if (v120)
        v120(v119, *MEMORY[0x1E0CA40F0], v64, &v173);
      if (v173)
      {
        CFDictionaryAddValue(v28, CFSTR("AirPlayVodkaVersion"), v173);
        if (v173)
        {
          CFRelease(v173);
          v173 = 0;
        }
      }
      if (FigCFEqual())
        v121 = v167;
      else
        v121 = v63;
      CFDictionaryAddValue(v28, CFSTR("IsPlaybackTokenChanged"), v121);
      v27 = v162;
      goto LABEL_262;
    }
    v182 = 0;
    v183 = 0;
    v181 = 0;
    v92 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("webAppVersion"));
    v93 = v92;
    if (v92 && (getBuildNumberFromVersionString(v92, (SInt32 *)&v182 + 1, (SInt32 *)&v182), HIDWORD(v182) == 19))
    {
      v94 = FigRCLCreateConfiguration(CFSTR("com.apple.mediaplaybackd"), CFSTR("kFigRemoteConfigurationLoaderStoreBagType_AirPlay"), 0, (CFMutableDictionaryRef *)&v183);
      if (!v94)
      {
        v95 = (const __CFString *)FigRCLCopyCFType((CFDictionaryRef)v183, CFSTR("AirPlayMPV1ReceiverNativeInterstitialsEnabledMinimumVersion"));
        v96 = v95;
        if (v95)
        {
          v97 = CFGetTypeID(v95);
          if (v97 == CFStringGetTypeID())
          {
            getBuildNumberFromVersionString(v96, (SInt32 *)&v181 + 1, (SInt32 *)&v181);
            v98 = 0;
            v99 = HIDWORD(v182) != HIDWORD(v181) || (int)v182 < (int)v181;
            v100 = !v99;
          }
          else
          {
            v100 = 0;
            v98 = -12780;
          }
          goto LABEL_206;
        }
        v98 = 0;
LABEL_205:
        v100 = 0;
LABEL_206:
        if (dword_1EE2A2FA0)
        {
          v158 = v93;
          v180 = 0;
          v179 = OS_LOG_TYPE_DEFAULT;
          v101 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v102 = v180;
          if (os_log_type_enabled(v101, v179))
            v103 = v102;
          else
            v103 = v102 & 0xFFFFFFFE;
          if (v103)
          {
            *(_DWORD *)cf = 136316674;
            *(_QWORD *)&cf[4] = "playerairplayroute_isAirPlayVideoWithNativeInterstitialsSupportedByReceiver";
            v185 = 2048;
            v186 = v1;
            v187 = 2082;
            v188 = v1 + 241;
            v189 = 2112;
            *(_QWORD *)v190 = v158;
            *(_WORD *)&v190[8] = 1024;
            v191 = v100;
            v192 = 2112;
            v193 = v96;
            v194 = 1024;
            LODWORD(v195) = v98;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (v96)
          CFRelease(v96);
        if (v183)
          CFRelease(v183);
        LOBYTE(v168) = v100;
        v2 = &sFigCDSNodeProtocolID;
        v39 = HIDWORD(v166);
        goto LABEL_218;
      }
      v98 = v94;
    }
    else
    {
      v98 = 0;
    }
    v96 = 0;
    goto LABEL_205;
  }
LABEL_262:
  if (v39)
  {
    CFDictionaryAddValue(v28, CFSTR("IsBufferedAudioEnabled"), v63);
    if (HaveSameID)
      v122 = v167;
    else
      v122 = v63;
    CFDictionaryAddValue(v28, CFSTR("IsBufferedAudioStreamChanged"), v122);
    *(_BYTE *)(v1 + 240) = 0;
    v123 = playerairplay_copyRoutingContext(v1, &v171);
    if (v123)
    {
      v29 = v123;
      HIDWORD(v166) = 1;
      goto LABEL_60;
    }
    playerairplayroute_updateRoutingRegistryInternal(v1, (uint64_t)v171);
  }
  if (*(_BYTE *)(v1 + 65) || *(_QWORD *)(v1 + 56) || *(_QWORD *)(v1 + 48) || !*(_BYTE *)(v1 + 66))
  {
    if (!v27)
    {
      v40 = 4;
      if (v39)
      {
        v27 = 0;
        v29 = 0;
        HIDWORD(v166) = 1;
      }
      else
      {
        HIDWORD(v166) = 0;
        v27 = 0;
        v29 = 0;
        if (v164)
          v40 = 5;
        else
          v40 = 4;
      }
      goto LABEL_282;
    }
    v29 = 0;
    v124 = v159;
    v125 = v159 == 0;
    v126 = 3;
LABEL_273:
    if (v125)
      v40 = v126;
    else
      v40 = v126 + 1;
    LOBYTE(v166) = v124 ^ 1;
    goto LABEL_282;
  }
  if (v27)
  {
LABEL_376:
    v29 = 0;
    v124 = v159;
    v125 = v159 == 0;
    v126 = 1;
    goto LABEL_273;
  }
  if (v39)
  {
    v27 = 0;
    v29 = 0;
    HIDWORD(v166) = 1;
    v40 = 2;
    goto LABEL_282;
  }
  if (!v164)
  {
    HIDWORD(v166) = 0;
    LOBYTE(v164) = 0;
    v27 = 0;
    goto LABEL_376;
  }
LABEL_109:
  v40 = 0;
  v57 = 0;
  v29 = 0;
LABEL_331:
  if (v26)
    CFRelease(v26);
  if (v57)
    CFRelease(v57);
  if (v177)
    CFRelease(v177);
  if (value)
    CFRelease(value);
  if (v28)
    CFRelease(v28);
  if (v174)
    CFRelease(v174);
  if (v178)
    CFRelease(v178);
  if (v171)
    CFRelease(v171);
  if (v176)
    CFRelease(v176);
  if (v170)
    CFRelease(v170);
  if (theDict)
    CFRelease(theDict);
  result = FigCFDictionaryGetBooleanIfPresent();
  if (*((_DWORD *)v2 + 1000))
  {
    LODWORD(v183) = 0;
    BYTE4(v182) = 0;
    v144 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v145 = v183;
    if (os_log_type_enabled(v144, BYTE4(v182)))
      v146 = v145;
    else
      v146 = v145 & 0xFFFFFFFE;
    if (v146)
    {
      v147 = *(_QWORD *)(v1 + 112);
      v148 = *(unsigned __int8 *)(v1 + 65);
      v149 = *(const __CFString **)(v1 + 72);
      v151 = *(_QWORD *)(v1 + 48);
      v150 = *(_QWORD *)(v1 + 56);
      v152 = *(unsigned __int8 *)(v1 + 66);
      v153 = *(unsigned __int8 *)(v1 + 120);
      *(_DWORD *)cf = 136317698;
      *(_QWORD *)&cf[4] = "playerairplayroute_updateRouteInformation";
      v185 = 2048;
      v186 = v1;
      v187 = 2082;
      v188 = v1 + 241;
      v189 = 2112;
      *(_QWORD *)v190 = v147;
      *(_WORD *)&v190[8] = 1024;
      v191 = v148;
      v192 = 2048;
      v193 = v149;
      v194 = 2048;
      v195 = v150;
      v196 = 2048;
      v197 = v151;
      v198 = 1024;
      v199 = v152;
      v200 = 1024;
      v201 = v153;
      v202 = 1024;
      v203 = 0;
      _os_log_send_and_compose_impl();
    }
    result = fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (dword_1EE2A2FA0)
    {
      LODWORD(v183) = 0;
      BYTE4(v182) = 0;
      v154 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v155 = v183;
      if (os_log_type_enabled(v154, BYTE4(v182)))
        v156 = v155;
      else
        v156 = v155 & 0xFFFFFFFE;
      if (v156)
      {
        *(_DWORD *)cf = 136316162;
        *(_QWORD *)&cf[4] = "playerairplayroute_updateRouteInformation";
        v185 = 2048;
        v186 = v1;
        v187 = 2082;
        v188 = v1 + 241;
        v189 = 1024;
        *(_DWORD *)v190 = v40;
        *(_WORD *)&v190[4] = 1024;
        *(_DWORD *)&v190[6] = v29;
        _os_log_send_and_compose_impl();
      }
      result = fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  if (v40 - 1 < 2 || v40 - 3 < 2)
    return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 144) + 16))(*(_QWORD *)(v1 + 144), *(_QWORD *)(v1 + 232));
  if (v40 == 5)
  {
    v157 = *(const void **)(v1 + 96);
    if (v157)
    {
      CFRelease(v157);
      *(_QWORD *)(v1 + 96) = 0;
    }
    return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 152) + 16))(*(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 232));
  }
  return result;
}

double playerairplayroute_init(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

void playerairplayroute_finalize(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v3;
  uint64_t SharedInstance;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  NSObject *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;

  if (dword_1EE2A2FA0 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(_BYTE *)(a1 + 16) = 1;
  if (*(_QWORD *)(a1 + 88))
  {
    if (dword_1EE2A2FA0)
    {
      v3 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    SharedInstance = FigBufferedAirPlayGlobalRoutingRegistryGetSharedInstance();
    v5 = *(_QWORD *)(a1 + 88);
    v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v6)
      v6(SharedInstance, a1, v5);
  }
  *(_WORD *)(a1 + 218) = 0;
  playerairplayroute_stopRoutingContextListeners(a1);
  v7 = *(const void **)(a1 + 24);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v8 = *(const void **)(a1 + 32);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a1 + 32) = 0;
  }
  if (*(_QWORD *)(a1 + 192))
  {
    playerairplayroute_stopFigAudioSessionListeners(a1);
    v9 = *(const void **)(a1 + 192);
    if (v9)
      CFRelease(v9);
  }
  MX_RunningBoardServices_InvalidateMediaPlaybackProcessAssertion();
  v10 = *(const void **)(a1 + 208);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a1 + 208) = 0;
  }
  v11 = *(NSObject **)(a1 + 104);
  if (v11)
  {
    dispatch_release(v11);
    *(_QWORD *)(a1 + 104) = 0;
  }
  FigPlayerAirPlayRoute_ResumeAirPlayScreen(a1);
  if (*(_QWORD *)(a1 + 48))
    FigEndpointRelinquishStreamResource();
  v12 = *(const void **)(a1 + 56);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(a1 + 56) = 0;
  }
  v13 = *(const void **)(a1 + 48);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(a1 + 48) = 0;
  }
  playerairplayroute_stopEndpointNotificationListeners(a1);
  v14 = *(const void **)(a1 + 40);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(a1 + 40) = 0;
  }
  v15 = *(const void **)(a1 + 96);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(a1 + 96) = 0;
  }
  v16 = *(const void **)(a1 + 112);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(a1 + 112) = 0;
  }
  v17 = *(const void **)(a1 + 88);
  if (v17)
  {
    CFRelease(v17);
    *(_QWORD *)(a1 + 88) = 0;
  }
  v18 = *(const void **)(a1 + 72);
  if (v18)
  {
    CFRelease(v18);
    *(_QWORD *)(a1 + 72) = 0;
  }
  *(_BYTE *)(a1 + 120) = 0;
  v19 = *(const void **)(a1 + 224);
  if (v19)
  {
    CFRelease(v19);
    *(_QWORD *)(a1 + 224) = 0;
  }
  v20 = *(const void **)(a1 + 128);
  if (v20)
  {
    _Block_release(v20);
    *(_QWORD *)(a1 + 128) = 0;
  }
  v21 = *(const void **)(a1 + 136);
  if (v21)
  {
    _Block_release(v21);
    *(_QWORD *)(a1 + 136) = 0;
  }
  v22 = *(const void **)(a1 + 144);
  if (v22)
  {
    _Block_release(v22);
    *(_QWORD *)(a1 + 144) = 0;
  }
  v23 = *(const void **)(a1 + 152);
  if (v23)
  {
    _Block_release(v23);
    *(_QWORD *)(a1 + 152) = 0;
  }
  v24 = *(const void **)(a1 + 168);
  if (v24)
  {
    _Block_release(v24);
    *(_QWORD *)(a1 + 168) = 0;
  }
  v25 = *(const void **)(a1 + 176);
  if (v25)
  {
    _Block_release(v25);
    *(_QWORD *)(a1 + 176) = 0;
  }
  v26 = *(const void **)(a1 + 184);
  if (v26)
  {
    _Block_release(v26);
    *(_QWORD *)(a1 + 184) = 0;
  }
  v27 = *(const void **)(a1 + 160);
  if (v27)
  {
    _Block_release(v27);
    *(_QWORD *)(a1 + 160) = 0;
  }
  v28 = *(const void **)(a1 + 232);
  if (v28)
    CFRelease(v28);
}

uint64_t playerairplayroute_stopRoutingContextListeners(uint64_t result)
{
  if (*(_QWORD *)(result + 24))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterRemoveWeakListener();
  }
  return result;
}

uint64_t playerairplayroute_stopFigAudioSessionListeners(uint64_t result)
{
  if (result)
  {
    if (*(_QWORD *)(result + 192))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      return FigNotificationCenterRemoveWeakListener();
    }
  }
  return result;
}

uint64_t playerairplayroute_stopEndpointNotificationListeners(uint64_t result)
{
  if (*(_QWORD *)(result + 40))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterRemoveWeakListener();
  }
  return result;
}

void playerairplayroute_currentEndpointChangedNotificationCallback(int a1, NSObject **cf, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v8;
  _QWORD block[5];
  char v10;
  os_log_type_t type;
  int v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = 0;
  if (dword_1EE2A2FA0)
  {
    v12 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (cf)
  {
    if (a5)
      FigCFDictionaryGetBooleanIfPresent();
    if (cf[13])
    {
      CFRetain(cf);
      v8 = cf[13];
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __playerairplayroute_currentEndpointChangedNotificationCallback_block_invoke;
      block[3] = &__block_descriptor_tmp_66_0;
      block[4] = cf;
      v10 = v13;
      dispatch_async(v8, block);
    }
  }
}

void playerairplayroute_routeConfigUpdatedNotificationCallback(int a1, _QWORD *a2, int a3, int a4, CFDictionaryRef theDict)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v8;
  NSObject *v9;
  _QWORD block[5];
  os_log_type_t type;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A2FA0)
  {
    v12 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (theDict)
  {
    CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0D48C48]);
    if (FigCFEqual())
    {
      if (dword_1EE2A2FA0)
      {
        v12 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (a2[13])
      {
        CFRetain(a2);
        v9 = a2[13];
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 0x40000000;
        block[2] = __playerairplayroute_routeConfigUpdatedNotificationCallback_block_invoke;
        block[3] = &__block_descriptor_tmp_67_1;
        block[4] = a2;
        dispatch_async(v9, block);
      }
    }
  }
}

void __playerairplayroute_currentEndpointChangedNotificationCallback_block_invoke(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + 16))
    goto LABEL_5;
  if (*(_BYTE *)(a1 + 40))
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v2 + 160) + 16))(*(_QWORD *)(v2 + 160), *(_QWORD *)(v2 + 232));
    v2 = *(_QWORD *)(a1 + 32);
  }
  playerairplayroute_pickableRoutesChangedGuts(v2);
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
LABEL_5:
    CFRelease((CFTypeRef)v2);
}

void __playerairplayroute_routeConfigUpdatedNotificationCallback_block_invoke(uint64_t a1)
{
  _BYTE *v2;

  v2 = *(_BYTE **)(a1 + 32);
  if (v2[16] || (playerairplayroute_pickableRoutesChangedGuts((uint64_t)v2), (v2 = *(_BYTE **)(a1 + 32)) != 0))
    CFRelease(v2);
}

uint64_t playerairplayroute_playbackWillBeInterruptedNotificationCallback(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 168) + 16))();
}

void playerairplayroute_overlayPresentDidChangeNotificationCallback(int a1, NSObject **cf)
{
  playerairplay_checkIfPrimaryAppChanged(cf);
}

uint64_t playerairplayroute_routingContextDidChangeNotificationCallback(int a1, NSObject **cf)
{
  return FigPlayerAirPlayRoute_ResetRoutingContextIfNeeded(cf);
}

const void *playerairplayroute_isActiveDidChange(int a1, uint64_t a2, int a3, uint64_t a4, CFDictionaryRef theDict)
{
  const void *result;
  int v8;

  if (theDict)
    result = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0D492F8]);
  else
    result = 0;
  v8 = result == (const void *)*MEMORY[0x1E0C9AE50];
  if (*(_QWORD *)(a2 + 192) == a4 && *(unsigned __int8 *)(a2 + 218) != v8)
    *(_BYTE *)(a2 + 218) = v8;
  return result;
}

void playerairplayroute_audioBehaviorOrPrefersConcurrentAirPlayAudioDidChange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_QWORD *)(a2 + 192) == a4)
  {
    if (playerairplayroute_updateAudioSessionPolicyForBuffered(a2))
      playerairplayroute_pickableRoutesChangedGuts(a2);
  }
}

void playerairplayroute_audioModeDidChange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  void (*v7)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFTypeRef cf;

  cf = 0;
  if (!*(_BYTE *)(a2 + 16) && *(_QWORD *)(a2 + 192) == a4)
  {
    if (a4)
    {
      v6 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
      if (v6)
      {
        v7 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(v6 + 48);
        if (v7)
          v7(a4, *MEMORY[0x1E0D49528], *MEMORY[0x1E0C9AE00], &cf);
      }
    }
    (*(void (**)(void))(*(_QWORD *)(a2 + 184) + 16))();
    if (cf)
      CFRelease(cf);
  }
}

void playerairplay_checkIfPrimaryAppChanged(NSObject **cf)
{
  NSObject *v2;
  _QWORD block[5];

  if (cf)
  {
    if (cf[13])
    {
      CFRetain(cf);
      v2 = cf[13];
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __playerairplay_checkIfPrimaryAppChanged_block_invoke;
      block[3] = &__block_descriptor_tmp_68_1;
      block[4] = cf;
      dispatch_async(v2, block);
    }
  }
}

void __playerairplay_checkIfPrimaryAppChanged_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFTypeRef cf;

  cf = 0;
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + 16))
    goto LABEL_9;
  v3 = *(_QWORD *)(v2 + 192);
  if (v3)
  {
    v4 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    if (v4)
    {
      v5 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(v4 + 48);
      if (v5)
        v5(v3, *MEMORY[0x1E0D48680], *MEMORY[0x1E0C9AE00], &cf);
    }
    FigCFEqual();
    (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 176) + 16))();
    if (cf)
      CFRelease(cf);
  }
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
LABEL_9:
    CFRelease((CFTypeRef)v2);
}

uint64_t playerairplayroute_updateAudioSessionPolicyForBuffered(uint64_t a1)
{
  uint64_t v2;
  __CFArray *Mutable;
  __CFArray *v4;
  BOOL v5;
  uint64_t v6;
  void (*v7)(uint64_t, __CFArray *, CFTypeRef *, _QWORD);
  const __CFNumber *Value;
  uint64_t v9;
  BOOL v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v12;
  CFTypeRef cf;
  int valuePtr;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  valuePtr = 8;
  v2 = *(_QWORD *)(a1 + 192);
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v4 = Mutable;
  cf = 0;
  if (v2)
    v5 = Mutable == 0;
  else
    v5 = 1;
  if (v5)
  {
    v12 = 0;
    if (!Mutable)
      goto LABEL_40;
    goto LABEL_38;
  }
  CFArrayAppendValue(Mutable, (const void *)*MEMORY[0x1E0D494F8]);
  CFArrayAppendValue(v4, (const void *)*MEMORY[0x1E0D49878]);
  CFArrayAppendValue(v4, (const void *)*MEMORY[0x1E0D497D0]);
  CFArrayAppendValue(v4, (const void *)*MEMORY[0x1E0D49B10]);
  CFArrayAppendValue(v4, (const void *)*MEMORY[0x1E0D49BB0]);
  v6 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (v6)
  {
    v7 = *(void (**)(uint64_t, __CFArray *, CFTypeRef *, _QWORD))(v6 + 112);
    if (v7)
      v7(v2, v4, &cf, 0);
  }
  FigCFDictionaryGetValue();
  Value = (const __CFNumber *)FigCFDictionaryGetValue();
  if (Value)
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
  FigCFDictionaryGetValue();
  v9 = FigCFDictionaryGetValue();
  FigCFDictionaryGetValue();
  v10 = valuePtr == 32 || valuePtr == 16;
  if (v10 && !v9)
  {
    if (dword_1EE2A2FA0)
      goto LABEL_20;
    goto LABEL_37;
  }
  if (FigCFEqual())
  {
    if (dword_1EE2A2FA0)
    {
LABEL_20:
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      v12 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_38;
    }
LABEL_37:
    v12 = 1;
    goto LABEL_38;
  }
  if (FigCFEqual()
    || FigCFEqual() && !v9
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual())
  {
    if (dword_1EE2A2FA0)
      goto LABEL_20;
    goto LABEL_37;
  }
  if (FigCFEqual())
  {
    if (dword_1EE2A2FA0)
      goto LABEL_20;
    goto LABEL_37;
  }
  if (FigCFEqual())
  {
    if (dword_1EE2A2FA0)
      goto LABEL_20;
    goto LABEL_37;
  }
  v12 = 0;
LABEL_38:
  CFRelease(v4);
  if (cf)
    CFRelease(cf);
LABEL_40:
  if (v12 == *(unsigned __int8 *)(a1 + 220))
    return 0;
  *(_BYTE *)(a1 + 220) = v12;
  playerairplayroute_updateRoutingRegistry((NSObject **)a1);
  return 1;
}

void playerairplayroute_endpointStreamsChangedCallback(int a1, NSObject **cf)
{
  NSObject *v3;
  _QWORD block[5];

  if (cf)
  {
    if (cf[13])
    {
      CFRetain(cf);
      v3 = cf[13];
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __playerairplayroute_endpointStreamsChangedCallback_block_invoke;
      block[3] = &__block_descriptor_tmp_73_0;
      block[4] = cf;
      dispatch_async(v3, block);
    }
  }
}

void __playerairplayroute_endpointStreamsChangedCallback_block_invoke(uint64_t a1)
{
  _BYTE *v2;

  v2 = *(_BYTE **)(a1 + 32);
  if (v2[16] || (playerairplayroute_pickableRoutesChangedGuts(), (v2 = *(_BYTE **)(a1 + 32)) != 0))
    CFRelease(v2);
}

unsigned int *playerairplayroute_createOrReleaseClientAssertionIfNeeded(unsigned int *result)
{
  unsigned int *v1;

  if (result)
  {
    v1 = result;
    result = (unsigned int *)result[50];
    if ((_DWORD)result)
    {
      if (*((_QWORD *)v1 + 26))
      {
        if (!*((_BYTE *)v1 + 216) && !*((_BYTE *)v1 + 217))
        {
          MX_RunningBoardServices_InvalidateMediaPlaybackProcessAssertion();
          result = (unsigned int *)*((_QWORD *)v1 + 26);
          if (result)
          {
            CFRelease(result);
            result = 0;
LABEL_11:
            *((_QWORD *)v1 + 26) = result;
          }
        }
      }
      else if (*((_BYTE *)v1 + 216) || *((_BYTE *)v1 + 217))
      {
        result = (unsigned int *)MX_RunningBoardServices_CreateMediaPlaybackProcessAssertionForPID();
        goto LABEL_11;
      }
    }
  }
  return result;
}

void __playerairplayroute_updateRoutingContextUUID_block_invoke(uint64_t a1)
{
  _BYTE *v2;
  const void *v3;
  uint64_t v4;
  const void *v5;
  const void *v6;

  v2 = *(_BYTE **)(a1 + 32);
  if (v2[16])
    goto LABEL_9;
  if (!FigCFEqual())
  {
    v4 = *(_QWORD *)(a1 + 32);
    v3 = *(const void **)(a1 + 40);
    v5 = *(const void **)(v4 + 32);
    *(_QWORD *)(v4 + 32) = v3;
    if (v3)
      CFRetain(v3);
    if (v5)
      CFRelease(v5);
    playerairplayroute_resetRoutingContextIfNeededInternal(*(_QWORD *)(a1 + 32));
  }
  v2 = *(_BYTE **)(a1 + 32);
  if (v2)
LABEL_9:
    CFRelease(v2);
  v6 = *(const void **)(a1 + 40);
  if (v6)
    CFRelease(v6);
}

void __playerairplayroute_updateRoutingRegistry_block_invoke(uint64_t a1)
{
  const void *v2;
  CFTypeRef cf;

  cf = 0;
  if (!playerairplay_copyRoutingContext(*(_QWORD *)(a1 + 32), &cf))
    playerairplayroute_updateRoutingRegistryInternal(*(_QWORD *)(a1 + 32), (uint64_t)cf);
  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
  if (cf)
    CFRelease(cf);
}

void playerairplayroute_updateRoutingRegistryInternal(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t SharedInstance;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  const void *v9;
  char CFPreferenceNumberWithDefault;
  uint64_t v11;
  CFTypeRef v12;
  unsigned int (*v13)(uint64_t, uint64_t, CFTypeRef);
  const void *v14;
  CFTypeRef v15;
  CFTypeRef cf[27];

  cf[26] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  cf[0] = 0;
  if (a2)
  {
    v4 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v4)
      v4(a2, *MEMORY[0x1E0D48D58], *MEMORY[0x1E0C9AE00], cf);
  }
  if (dword_1EE2A2FA0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  SharedInstance = FigBufferedAirPlayGlobalRoutingRegistryGetSharedInstance();
  v7 = *(_QWORD *)(a1 + 88);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v8 || v8(SharedInstance, a1, v7))
    goto LABEL_16;
  v9 = *(const void **)(a1 + 88);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 88) = 0;
  }
  CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  if (cf[0])
  {
    if (*(_BYTE *)(a1 + 80))
    {
      if (!*(_BYTE *)(a1 + 240) && !CFPreferenceNumberWithDefault && !*(_BYTE *)(a1 + 220) && !*(_BYTE *)(a1 + 219))
      {
        v11 = FigBufferedAirPlayGlobalRoutingRegistryGetSharedInstance();
        v12 = cf[0];
        v13 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 8);
        if (v13)
        {
          if (!v13(v11, a1, v12))
          {
            v14 = *(const void **)(a1 + 88);
            v15 = cf[0];
            *(CFTypeRef *)(a1 + 88) = cf[0];
            if (v15)
              CFRetain(v15);
            if (v14)
              CFRelease(v14);
          }
        }
      }
    }
LABEL_16:
    if (cf[0])
      CFRelease(cf[0]);
  }
}

void __playerairplayroute_setAirPlayVideoIsActive_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void (*v6)(uint64_t, _QWORD, _QWORD);
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + 16))
    goto LABEL_2;
  v3 = *(_QWORD *)(v2 + 192);
  if (!v3)
    goto LABEL_2;
  v4 = (_QWORD *)(*(_BYTE *)(a1 + 40) ? MEMORY[0x1E0C9AE50] : MEMORY[0x1E0C9AE40]);
  v5 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (v5)
  {
    v6 = *(void (**)(uint64_t, _QWORD, _QWORD))(v5 + 56);
    if (v6)
      v6(v3, *MEMORY[0x1E0D49498], *v4);
  }
  v7 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v7 + 216) = *(_BYTE *)(a1 + 40);
  playerairplayroute_createOrReleaseClientAssertionIfNeeded((unsigned int *)v7);
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
LABEL_2:
    CFRelease((CFTypeRef)v2);
}

void __playerairplayroute_setAudioOnlyAirPlayVideoIsActive_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void (*v6)(uint64_t, _QWORD, _QWORD);
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + 16))
    goto LABEL_2;
  v3 = *(_QWORD *)(v2 + 192);
  if (!v3)
    goto LABEL_2;
  v4 = (_QWORD *)(*(_BYTE *)(a1 + 40) ? MEMORY[0x1E0C9AE50] : MEMORY[0x1E0C9AE40]);
  v5 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (v5)
  {
    v6 = *(void (**)(uint64_t, _QWORD, _QWORD))(v5 + 56);
    if (v6)
      v6(v3, *MEMORY[0x1E0D49538], *v4);
  }
  v7 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v7 + 217) = *(_BYTE *)(a1 + 40);
  playerairplayroute_createOrReleaseClientAssertionIfNeeded((unsigned int *)v7);
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
LABEL_2:
    CFRelease((CFTypeRef)v2);
}

uint64_t playerairplayroute_endpointStreamsHaveSameID(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t CMBaseObject;
  uint64_t (*v5)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v6;
  uint64_t (*v7)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v8;
  CFTypeRef v10;
  CFTypeRef cf;

  v10 = 0;
  cf = 0;
  v3 = (_QWORD *)MEMORY[0x1E0CA4788];
  if (a1)
  {
    CMBaseObject = FigEndpointStreamGetCMBaseObject();
    v5 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (!v5)
    {
      LODWORD(a1) = -12782;
      if (!a2)
        goto LABEL_8;
      goto LABEL_5;
    }
    LODWORD(a1) = v5(CMBaseObject, *v3, 0, &cf);
  }
  if (!a2)
    goto LABEL_8;
LABEL_5:
  v6 = FigEndpointStreamGetCMBaseObject();
  v7 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v7)
    goto LABEL_10;
  LODWORD(a1) = v7(v6, *v3, 0, &v10);
LABEL_8:
  if (!(_DWORD)a1)
  {
    v8 = FigCFEqual();
    goto LABEL_11;
  }
LABEL_10:
  FigSignalErrorAt();
  v8 = 0;
LABEL_11:
  if (cf)
    CFRelease(cf);
  if (v10)
    CFRelease(v10);
  return v8;
}

void getBuildNumberFromVersionString(CFStringRef theString, SInt32 *a2, SInt32 *a3)
{
  const __CFArray *ArrayBySeparatingStrings;
  const __CFArray *v6;
  const __CFString *ValueAtIndex;
  const __CFString *v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (theString)
  {
    ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theString, CFSTR("."));
    v6 = ArrayBySeparatingStrings;
    if (ArrayBySeparatingStrings && CFArrayGetCount(ArrayBySeparatingStrings) > 1)
    {
      if (a2)
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v6, 0);
        if (!ValueAtIndex)
        {
LABEL_13:
          CFRelease(v6);
          return;
        }
        *a2 = CFStringGetIntValue(ValueAtIndex);
      }
      if (a3)
      {
        v8 = (const __CFString *)CFArrayGetValueAtIndex(v6, 1);
        if (v8)
          *a3 = CFStringGetIntValue(v8);
      }
      goto LABEL_13;
    }
    if (dword_1EE2A2FA0)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v6)
      goto LABEL_13;
  }
}

uint64_t RIFFAtomStreamInitWithByteStream(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t CMBaseObject;
  uint64_t (*v9)(uint64_t, uint64_t, _QWORD, CFNumberRef *);
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFNumberRef number;

  number = 0;
  CMBaseObject = CMByteStreamGetCMBaseObject();
  v9 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
  if (!v9)
    return 4294954514;
  v10 = *MEMORY[0x1E0CA2070];
  v14 = 0;
  result = v9(CMBaseObject, v10, 0, &number);
  if (!(_DWORD)result)
  {
    CFNumberGetValue(number, kCFNumberSInt64Type, &v14);
    CFRelease(number);
    if (a2 < 0)
      return FigSignalErrorAt();
    v12 = v14;
    v13 = v14 - a2;
    if (v14 <= a2)
    {
      return FigSignalErrorAt();
    }
    else
    {
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      *(_OWORD *)(a4 + 32) = 0u;
      *(_OWORD *)(a4 + 48) = 0u;
      *(_OWORD *)(a4 + 64) = 0u;
      *(_OWORD *)(a4 + 80) = 0u;
      *(_BYTE *)a4 = a3;
      *(_QWORD *)(a4 + 8) = a1;
      *(_QWORD *)(a4 + 16) = v12;
      *(_QWORD *)(a4 + 24) = ReadBytesFromByteStreamDataSource;
      *(_QWORD *)(a4 + 32) = ReadBBufFromByteStreamDataSource;
      *(_QWORD *)(a4 + 40) = a2;
      *(_QWORD *)(a4 + 48) = v13;
      return CommonRIFFStreamInitialization(a4);
    }
  }
  return result;
}

uint64_t ReadBytesFromByteStreamDataSource(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v9 = *a1;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 8);
  if (v10)
    return v10(v9, a2, a3, a4, a5);
  else
    return 4294954514;
}

uint64_t ReadBBufFromByteStreamDataSource(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v9 = *a1;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 32);
  if (v10)
    return v10(v9, a2, a3, a4, a5);
  else
    return 4294954514;
}

uint64_t CommonRIFFStreamInitialization(uint64_t a1)
{
  uint64_t v2;
  int64_t v3;
  uint64_t *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48) + v2;
  v8 = 0;
  v4 = (uint64_t *)(a1 + 72);
  result = ReadRIFFHeader(a1 + 8, v2, v3, (unsigned int *)(a1 + 64), (_QWORD *)(a1 + 72), (unsigned int *)(a1 + 88), &v8);
  if (!(_DWORD)result)
  {
    v6 = *v4;
    if ((unint64_t)*v4 >= 8 && *(_QWORD *)(a1 + 40) + v6 <= v3)
    {
      result = 0;
      v7 = v8;
      *(_QWORD *)(a1 + 56) = v8;
      *(_QWORD *)(a1 + 80) = v6 - v7;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t RIFFAtomStreamInitWithParent(uint64_t a1, unint64_t a2, uint64_t a3)
{
  __int128 v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v8;
  uint64_t *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)a3 = 0;
  v3 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a3 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a3 + 8) = v3;
  v4 = *(_QWORD *)(a1 + 56) + *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a3 + 40) = v4;
  *(_QWORD *)(a3 + 48) = v5;
  if (v5 < a2)
    return FigSignalErrorAt();
  v8 = v5 + v4;
  v13 = 0;
  v9 = (uint64_t *)(a3 + 72);
  result = ReadRIFFHeader(a3 + 8, v4 + a2, v5 + v4, (unsigned int *)(a3 + 64), (_QWORD *)(a3 + 72), (unsigned int *)(a3 + 88), &v13);
  if ((_DWORD)result)
    return result;
  v11 = *v9;
  if ((unint64_t)*v9 < 8 || v11 + a2 + *(_QWORD *)(a3 + 40) > v8)
    return FigSignalErrorAt();
  result = 0;
  v12 = v13;
  *(_QWORD *)(a3 + 56) = v13 + a2;
  *(_QWORD *)(a3 + 80) = v11 - v12;
  return result;
}

uint64_t ReadRIFFHeader(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int *a4, _QWORD *a5, unsigned int *a6, _QWORD *a7)
{
  uint64_t v7;
  uint64_t result;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v7 = a2 + 8;
  if (a2 + 8 > a3)
    return 4294954953;
  v18 = 0;
  v19 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *))(a1 + 16))(a1, 8, a2, &v19, &v18);
  if (!(_DWORD)result)
  {
    if (v18 != 8)
      return FigSignalErrorAt();
    v16 = bswap32(v19);
    LODWORD(v19) = v16;
    if ((v19 & 0x100000000) != 0)
      v17 = 9;
    else
      v17 = 8;
    *a5 = v17 + HIDWORD(v19);
    *a7 = 8;
    if (v16 != 1380533830 && v16 != 1279873876)
      goto LABEL_17;
    if (a2 + 12 > a3)
      return FigSignalErrorAt();
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t *))(a1 + 16))(a1, 4, v7, a6, &v18);
    if (!(_DWORD)result && v18 != 4)
      result = FigSignalErrorAt();
    if (!(_DWORD)result)
    {
      *a6 = bswap32(*a6);
      *a7 += 4;
      v16 = v19;
LABEL_17:
      result = 0;
      *a4 = v16;
    }
  }
  return result;
}

uint64_t RIFFAtomStreamGetCurrentAtomTypeAndDataLength(uint64_t a1, _DWORD *a2, _QWORD *a3)
{
  if (a2)
    *a2 = *(_DWORD *)(a1 + 64);
  if (a3)
    *a3 = *(_QWORD *)(a1 + 80);
  return 0;
}

uint64_t RIFFAtomStreamGetCurrentAtomLISTType(uint64_t a1, _DWORD *a2)
{
  int v2;
  uint64_t result;

  v2 = *(_DWORD *)(a1 + 64);
  if (v2 != 1380533830 && v2 != 1279873876)
    return 4294954951;
  result = 0;
  *a2 = *(_DWORD *)(a1 + 88);
  return result;
}

uint64_t RIFFAtomStreamReadCurrentAtomData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 80);
  if ((uint64_t)v4 <= a2 || a3 + a2 > v4)
    return FigSignalErrorAt();
  v8 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(a1 + 24))(a1 + 8, a3, *(_QWORD *)(a1 + 40) + a2 + *(_QWORD *)(a1 + 56), a4, &v8);
  if (!(_DWORD)result)
  {
    if (v8 == a3)
      return 0;
    else
      return FigSignalErrorAt();
  }
  return result;
}

uint64_t RIFFAtomStreamGetCurrentAtomGlobalOffset(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  if (a2)
    *a2 = a1[7] + a1[5] - a1[9] + a1[10];
  if (a3)
    *a3 = a1[9];
  return 0;
}

uint64_t RIFFAtomStreamReadCurrentAtomDataAndCreateBBuf(uint64_t a1, uint64_t a2, size_t a3, CMBlockBufferRef *a4)
{
  uint64_t v4;
  size_t v8;
  uint64_t v9;
  CMBlockBufferRef v10;
  CMBlockBufferRef blockBufferOut;
  CMBlockBufferRef sourceBuffer;
  uint64_t v13;

  v4 = *(_QWORD *)(a1 + 80);
  if (v4 <= a2 || a3 + a2 > v4)
    return FigSignalErrorAt();
  sourceBuffer = 0;
  v13 = 0;
  if (a3)
    v8 = a3;
  else
    v8 = v4 - a2;
  v9 = (*(uint64_t (**)(uint64_t, size_t, uint64_t, CMBlockBufferRef *, uint64_t *))(a1 + 32))(a1 + 8, v8, *(_QWORD *)(a1 + 40) + a2 + *(_QWORD *)(a1 + 56), &sourceBuffer, &v13);
  if (!(_DWORD)v9)
  {
    if (v13 == v8)
    {
      if (CMBlockBufferIsRangeContiguous(sourceBuffer, 0, v8))
      {
        v9 = 0;
        *a4 = sourceBuffer;
      }
      else
      {
        blockBufferOut = 0;
        v9 = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E0C9AE00], sourceBuffer, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, v8, 0, &blockBufferOut);
        v10 = sourceBuffer;
        *a4 = blockBufferOut;
        if (v10)
          CFRelease(v10);
      }
    }
    else
    {
      if (sourceBuffer)
        CFRelease(sourceBuffer);
      return FigSignalErrorAt();
    }
  }
  return v9;
}

uint64_t RIFFAtomStreamAdvanceToNextAtom(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 56);
  if (v2 == v1)
    return 4294954956;
  v13 = 0;
  v12 = 0;
  v11 = 0;
  v10 = 0;
  v5 = *(_QWORD *)(a1 + 40);
  v6 = v5 + v1;
  result = ReadRIFFHeader(a1 + 8, v5 + v2, v5 + v1, &v13, &v12, &v11, &v10);
  if (!(_DWORD)result)
  {
    v7 = v12;
    if (v12 >= 8 && (uint64_t)(v12 + v2 + *(_QWORD *)(a1 + 40)) <= v6)
    {
      v8 = v13;
      *(_DWORD *)(a1 + 64) = v13;
      v9 = v10;
      *(_QWORD *)(a1 + 56) = v10 + v2;
      *(_QWORD *)(a1 + 72) = v7;
      *(_QWORD *)(a1 + 80) = v7 - v9;
      if (v8 == 1380533830 || v8 == 1279873876)
      {
        result = 0;
        *(_DWORD *)(a1 + 88) = v11;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t FigMutableMovieGetClassID()
{
  MEMORY[0x19402F294](&FigMutableMovieGetClassID_sRegisterFigMutableMovieBaseTypeOnce, RegisterFigMutableMovieBaseType);
  return sFigMutableMovieClassID;
}

uint64_t RegisterFigMutableMovieBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigMutableMovieGetTypeID()
{
  MEMORY[0x19402F294](&FigMutableMovieGetClassID_sRegisterFigMutableMovieBaseTypeOnce, RegisterFigMutableMovieBaseType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigMutableMovieCreateEmpty(const __CFAllocator *a1, const __CFString *a2, const void *a3, uint64_t a4, CFTypeRef *a5)
{
  uint64_t v7;
  const __CFAllocator *v8;
  uint64_t FigBaseObject;
  void (*v10)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  CFTypeRef v11;
  CFTypeRef v12;
  void (*v13)(CFTypeRef, const __CFString *, CFTypeRef);
  uint64_t v14;
  void (*v15)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  CFTypeRef v16;
  CFTypeRef v17;
  void (*v18)(CFTypeRef, const __CFString *, CFTypeRef);
  uint64_t v19;
  void (*v20)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  CFTypeRef v21;
  CFTypeRef v22;
  void (*v23)(CFTypeRef, const __CFString *, CFTypeRef);
  uint64_t v24;
  void (*v25)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  CFTypeRef v26;
  CFTypeRef v27;
  void (*v28)(CFTypeRef, const __CFString *, CFTypeRef);
  CFTypeRef v29;
  CFTypeRef v30;
  void (*v31)(CFTypeRef, const __CFString *, CFTypeRef);
  uint64_t v32;
  CFTypeRef v34;
  CFTypeRef v35;
  CFTypeRef v36;
  CFTypeRef v37;
  CFTypeRef cf;
  uint64_t v39;
  CFTypeRef v40;

  v39 = 0;
  v40 = 0;
  if (a5)
  {
    if (!a2)
      a2 = CFSTR("com.apple.quicktime-movie");
    v7 = createMutableMovieObject(a1, a2, a3, &v40, &v39);
    if ((_DWORD)v7)
      goto LABEL_40;
    if (v39)
    {
      if (a4)
      {
        v37 = 0;
        cf = 0;
        v35 = 0;
        v36 = 0;
        v34 = 0;
        v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        FigBaseObject = FigFormatReaderGetFigBaseObject(a4);
        v10 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (v10)
          v10(FigBaseObject, CFSTR("PreferredVolume"), v8, &cf);
        v11 = cf;
        if (cf)
        {
          v12 = v40;
          v13 = *(void (**)(CFTypeRef, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 56);
          if (v13)
            v13(v12, CFSTR("PreferredVolume"), v11);
        }
        v14 = FigFormatReaderGetFigBaseObject(a4);
        v15 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (v15)
        {
          v15(v14, CFSTR("PreferredRate"), v8, &v37);
          v16 = v37;
          if (v37)
          {
            v17 = v40;
            v18 = *(void (**)(CFTypeRef, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 56);
            if (v18)
              v18(v17, CFSTR("PreferredVolume"), v16);
          }
        }
        v19 = FigFormatReaderGetFigBaseObject(a4);
        v20 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (v20)
        {
          v20(v19, CFSTR("MovieMatrix"), v8, &v36);
          v21 = v36;
          if (v36)
          {
            v22 = v40;
            v23 = *(void (**)(CFTypeRef, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 56);
            if (v23)
              v23(v22, CFSTR("MovieMatrix"), v21);
          }
        }
        v24 = FigFormatReaderGetFigBaseObject(a4);
        v25 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (v25)
        {
          v25(v24, CFSTR("Timescale"), v8, &v35);
          v26 = v35;
          if (v35)
          {
            v27 = v40;
            v28 = *(void (**)(CFTypeRef, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 56);
            if (v28)
              v28(v27, CFSTR("MovieTimeScale"), v26);
          }
        }
        FigMetadataCopyMovieMetadata(a4, v8, (__CFArray **)&v34);
        v29 = v34;
        if (v34)
        {
          v30 = v40;
          v31 = *(void (**)(CFTypeRef, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 56);
          if (v31)
            v31(v30, CFSTR("Metadata"), v29);
        }
        if (cf)
          CFRelease(cf);
        if (v37)
          CFRelease(v37);
        if (v36)
          CFRelease(v36);
        if (v35)
          CFRelease(v35);
        if (v34)
          CFRelease(v34);
      }
      v32 = 0;
      *a5 = v40;
      return v32;
    }
  }
  v7 = FigSignalErrorAt();
LABEL_40:
  v32 = v7;
  if (v40)
    CFRelease(v40);
  return v32;
}

uint64_t createMutableMovieObject(const __CFAllocator *a1, const void *a2, const void *a3, CFTypeRef *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t DerivedStorage;
  uint64_t v12;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v14;
  CFMutableArrayRef v15;
  CFTypeRef v16;
  CFTypeRef v17;
  CFTypeID v18;
  uint64_t v19;
  void *ptr;
  CFTypeRef v22;
  CFTypeRef cf;

  v22 = 0;
  cf = 0;
  ptr = 0;
  if (!a5)
  {
    Mutable = 0;
    v19 = 4294950861;
    goto LABEL_13;
  }
  MEMORY[0x19402F294](&FigMutableMovieGetClassID_sRegisterFigMutableMovieBaseTypeOnce, RegisterFigMutableMovieBaseType);
  v10 = CMDerivedObjectCreate();
  if ((_DWORD)v10)
    goto LABEL_21;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
LABEL_20:
    v10 = FigSignalErrorAt();
    goto LABEL_21;
  }
  v12 = DerivedStorage;
  v10 = MovieInformationCreate((uint64_t)a1, 3, (uint64_t *)&v22);
  if ((_DWORD)v10)
  {
LABEL_21:
    v19 = v10;
    Mutable = 0;
    goto LABEL_13;
  }
  if (!v22)
    goto LABEL_20;
  v10 = MediaDataChunkWriterCreate((const __CFAllocator *)*MEMORY[0x1E0C9AE00], (uint64_t *)&ptr);
  if ((_DWORD)v10)
    goto LABEL_21;
  Mutable = CFArrayCreateMutable(a1, 0, 0);
  if (Mutable && (v14 = CFArrayCreateMutable(a1, 0, 0)) != 0)
  {
    v15 = v14;
    *a4 = cf;
    cf = 0;
    v16 = CFRetain(a2);
    v17 = v22;
    *(_QWORD *)(v12 + 16) = v16;
    *(_QWORD *)(v12 + 24) = v17;
    *(_QWORD *)(v12 + 32) = ptr;
    ptr = 0;
    v22 = 0;
    *(_QWORD *)(v12 + 48) = FigSimpleMutexCreate();
    *(_QWORD *)(v12 + 56) = Mutable;
    *(_QWORD *)(v12 + 64) = v15;
    *(_QWORD *)(v12 + 96) = 0;
    *(_OWORD *)(v12 + 80) = kFigMutableMovie_DefaultInterleavingPeriod;
    if (a3)
    {
      v18 = CFGetTypeID(a3);
      if (v18 == CFDictionaryGetTypeID())
        FigCFDictionaryGetBooleanIfPresent();
    }
    Mutable = 0;
    v19 = 0;
    *a5 = v12;
  }
  else
  {
    v19 = FigSignalErrorAt();
  }
LABEL_13:
  if (cf)
    CFRelease(cf);
  if (v22)
    CFRelease(v22);
  MediaDataChunkWriterRelease((const __CFAllocator **)ptr);
  if (Mutable)
    CFRelease(Mutable);
  return v19;
}

uint64_t FigMutableMovieCreateFromFormatReader(const __CFAllocator *a1, uint64_t a2, const __CFString *a3, const void *a4, CFTypeRef *a5)
{
  const __CFString *v8;
  uint64_t v9;
  const void *v10;
  uint64_t MovieInformation;
  uint64_t DeepCopy;
  uint64_t updated;
  int v15[2];
  CFTypeRef cf;

  *(_QWORD *)v15 = 0;
  cf = 0;
  if (!a2 || !a5)
    goto LABEL_17;
  if (a3)
    v8 = a3;
  else
    v8 = CFSTR("com.apple.quicktime-movie");
  v9 = createMutableMovieObject(a1, v8, a4, &cf, (uint64_t *)v15);
  if ((_DWORD)v9)
    goto LABEL_18;
  if (*(_QWORD *)v15)
  {
    v10 = *(const void **)(*(_QWORD *)v15 + 24);
    if (v10)
    {
      CFRelease(v10);
      *(_QWORD *)(*(_QWORD *)v15 + 24) = 0;
    }
    MovieInformation = MovieFormatReaderGetMovieInformation(a2);
    v9 = MovieInformationLockForRead(MovieInformation);
    if (!(_DWORD)v9)
    {
      DeepCopy = MovieInformationCreateDeepCopy(a1, MovieInformation, 3, (_QWORD *)(*(_QWORD *)v15 + 24));
      if ((_DWORD)DeepCopy)
      {
        updated = DeepCopy;
      }
      else
      {
        updated = updateTrackArrayFromMovieInformation(*(uint64_t *)v15, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
        *a5 = cf;
        cf = 0;
      }
      MovieInformationUnlockForRead(MovieInformation);
      goto LABEL_14;
    }
  }
  else
  {
LABEL_17:
    v9 = FigSignalErrorAt();
  }
LABEL_18:
  updated = v9;
LABEL_14:
  if (cf)
    CFRelease(cf);
  return updated;
}

uint64_t updateTrackArrayFromMovieInformation(uint64_t a1, CFAllocatorRef allocator)
{
  CFMutableArrayRef Mutable;
  const __CFArray *v5;
  uint64_t v6;
  uint64_t TrackCount;
  uint64_t v8;
  uint64_t v9;
  const void *TrackForTrackIndex;
  uint64_t MutableMovieTrackObject;
  __CFArray *v12;
  uint64_t v13;
  void *value;
  CFRange v16;

  value = 0;
  if (!a1 || !*(_QWORD *)(a1 + 24))
    return 4294950861;
  Mutable = CFArrayCreateMutable(allocator, 0, 0);
  if (!Mutable)
    return 4294954510;
  v5 = Mutable;
  v6 = MovieInformationLockForRead(*(_QWORD *)(a1 + 24));
  if ((_DWORD)v6)
  {
    v13 = v6;
  }
  else
  {
    TrackCount = MovieInformationGetTrackCount(*(_QWORD *)(a1 + 24));
    if (TrackCount < 1)
    {
LABEL_11:
      MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 48));
      CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 56));
      v12 = *(__CFArray **)(a1 + 56);
      v16.length = CFArrayGetCount(v5);
      v16.location = 0;
      CFArrayAppendArray(v12, v5, v16);
      MEMORY[0x19402EF04](*(_QWORD *)(a1 + 48));
      v13 = 0;
    }
    else
    {
      v8 = TrackCount;
      v9 = 0;
      while (1)
      {
        TrackForTrackIndex = (const void *)MovieInformationFindTrackForTrackIndex(*(_QWORD *)(a1 + 24), v9);
        if (!TrackForTrackIndex)
        {
          v13 = 4294950872;
          goto LABEL_12;
        }
        MutableMovieTrackObject = createMutableMovieTrackObject(allocator, *(const void **)(a1 + 24), TrackForTrackIndex, *(CFAllocatorRef **)(a1 + 32), (uint64_t *)&value);
        if ((_DWORD)MutableMovieTrackObject)
        {
          v13 = MutableMovieTrackObject;
          goto LABEL_12;
        }
        if (!value)
          break;
        CFArrayAppendValue(v5, value);
        if (v8 == ++v9)
          goto LABEL_11;
      }
      v13 = 4294954510;
    }
LABEL_12:
    MovieInformationUnlockForRead(*(_QWORD *)(a1 + 24));
  }
  CFRelease(v5);
  return v13;
}

uint64_t FigMutableMovieCreateWithByteStream(const __CFAllocator *a1, const void *a2, const __CFString *a3, const void *a4, CFTypeRef *a5)
{
  uint64_t v6;
  CFTypeRef cf;

  cf = 0;
  if (!a2 || !a5)
    return FigSignalErrorAt();
  if (!a3)
    a3 = CFSTR("com.apple.quicktime-movie");
  v6 = createMutableMovieObjectWithByteStream(a1, a2, a3, a4, &cf);
  if ((_DWORD)v6)
  {
    if (cf)
      CFRelease(cf);
  }
  else
  {
    *a5 = cf;
  }
  return v6;
}

uint64_t createMutableMovieObjectWithByteStream(const __CFAllocator *a1, const void *a2, const void *a3, const void *a4, CFTypeRef *a5)
{
  uint64_t updated;
  uint64_t v8;
  uint64_t v9;
  uint64_t CMBaseObject;
  uint64_t (*v11)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v12;
  int v14[2];
  CFTypeRef cf;

  *(_QWORD *)v14 = 0;
  cf = 0;
  updated = createMutableMovieObject(a1, a3, a4, &cf, (uint64_t *)v14);
  if ((_DWORD)updated)
    goto LABEL_13;
  if (!*(_QWORD *)v14)
  {
    updated = FigSignalErrorAt();
LABEL_13:
    v12 = updated;
    goto LABEL_9;
  }
  updated = MoovParseByteStream(*(_QWORD *)(*(_QWORD *)v14 + 24), 9, a2, 0);
  if ((_DWORD)updated)
    goto LABEL_13;
  v8 = *MEMORY[0x1E0C9AE00];
  updated = updateTrackArrayFromMovieInformation(*(uint64_t *)v14, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  if ((_DWORD)updated)
    goto LABEL_13;
  v9 = *(_QWORD *)v14;
  CMBaseObject = CMByteStreamGetCMBaseObject();
  v11 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v11)
  {
    v12 = v11(CMBaseObject, *MEMORY[0x1E0CA2098], v8, v9 + 8);
    if (!(_DWORD)v12)
    {
      *a5 = cf;
      return v12;
    }
  }
  else
  {
    v12 = 4294954514;
  }
LABEL_9:
  if (cf)
    CFRelease(cf);
  return v12;
}

uint64_t FigMutableMovieCreateWithURL(const __CFAllocator *a1, uint64_t a2, const __CFString *a3, const void *a4, CFTypeRef *a5)
{
  uint64_t v9;
  const __CFString *v10;
  uint64_t v11;
  CFTypeRef v13;

  v13 = 0;
  if (a2)
  {
    if (!a5)
      return FigSignalErrorAt();
    v9 = CMByteStreamCreateForFileURL();
    if (!(_DWORD)v9)
    {
      if (a3)
        v10 = a3;
      else
        v10 = CFSTR("com.apple.quicktime-movie");
      v11 = createMutableMovieObjectWithByteStream(a1, 0, v10, a4, &v13);
      if ((_DWORD)v11)
      {
        if (v13)
          CFRelease(v13);
      }
      else
      {
        *a5 = v13;
      }
      return v11;
    }
    return v9;
  }
  return FigSignalErrorAt();
}

uint64_t FigMutableMovieCreateFromData(const __CFAllocator *a1, const __CFData *a2, const __CFString *a3, CFTypeRef cf, CFTypeRef *a5)
{
  const __CFString *v9;
  CFTypeID v10;
  uint64_t BlockBufferWithCFDataNoCopy;
  const __CFAllocator *v12;
  unsigned int v13;
  uint64_t updated;
  int v16[2];
  CFTypeRef v17;

  *(_QWORD *)v16 = 0;
  v17 = 0;
  if (!a2)
  {
    updated = FigSignalErrorAt();
    goto LABEL_19;
  }
  if (a3)
    v9 = a3;
  else
    v9 = CFSTR("com.apple.quicktime-movie");
  if (cf)
  {
    v10 = CFGetTypeID(cf);
    if (v10 == CFDictionaryGetTypeID())
      FigCFDictionaryGetBooleanIfPresent();
  }
  BlockBufferWithCFDataNoCopy = createMutableMovieObject(a1, v9, cf, &v17, (uint64_t *)v16);
  if ((_DWORD)BlockBufferWithCFDataNoCopy)
  {
LABEL_22:
    updated = BlockBufferWithCFDataNoCopy;
    goto LABEL_19;
  }
  if (!*(_QWORD *)v16 || CFDataGetLength(a2) <= 0)
  {
    BlockBufferWithCFDataNoCopy = FigSignalErrorAt();
    goto LABEL_22;
  }
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  BlockBufferWithCFDataNoCopy = FigCreateBlockBufferWithCFDataNoCopy();
  if ((_DWORD)BlockBufferWithCFDataNoCopy)
    goto LABEL_22;
  BlockBufferWithCFDataNoCopy = CMByteStreamCreateForBlockBuffer();
  if ((_DWORD)BlockBufferWithCFDataNoCopy)
    goto LABEL_22;
  v13 = MoovParseByteStream(*(_QWORD *)(*(_QWORD *)v16 + 24), 9, 0, 0);
  if (v13 + 12896 >= 7)
    updated = v13;
  else
    updated = 4294950864;
  if (!(_DWORD)updated)
  {
    updated = updateTrackArrayFromMovieInformation(*(uint64_t *)v16, v12);
    *a5 = v17;
    v17 = 0;
    return updated;
  }
LABEL_19:
  if (v17)
    CFRelease(v17);
  return updated;
}

CFStringRef FigMutableMovieCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigMutableMovie %p]"), a1);
}

uint64_t MutableMovie_Invalidate(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v2;
  const __CFArray *v3;
  CFIndex Count;
  const __CFAllocator *v5;
  unint64_t v6;
  const void **ValueAtIndex;
  const void **v8;
  const void *v9;
  const __CFArray *v10;
  CFIndex v11;
  unint64_t v12;
  _QWORD *v13;
  const __CFAllocator *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;

  if (a1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      v2 = DerivedStorage;
      if (!*(_BYTE *)DerivedStorage)
      {
        v3 = *(const __CFArray **)(DerivedStorage + 64);
        if (v3)
        {
          Count = CFArrayGetCount(v3);
          if (Count >= 1)
          {
            v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v6 = Count + 1;
            do
            {
              ValueAtIndex = (const void **)CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 64), v6 - 2);
              if (ValueAtIndex)
              {
                v8 = ValueAtIndex;
                v9 = *ValueAtIndex;
                if (v9)
                  CFRelease(v9);
                CFAllocatorDeallocate(v5, v8);
              }
              CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v2 + 64), v6 - 2);
              --v6;
            }
            while (v6 > 1);
          }
        }
        if (*(_QWORD *)(v2 + 48))
        {
          MEMORY[0x19402EEEC]();
          v10 = *(const __CFArray **)(v2 + 56);
          if (v10)
          {
            v11 = CFArrayGetCount(*(CFArrayRef *)(v2 + 56));
            if (v11 >= 1)
            {
              v12 = v11 + 1;
              do
              {
                v13 = CFArrayGetValueAtIndex(v10, v12 - 2);
                v14 = CFGetAllocator(v10);
                releaseTrack(v14, v13);
                --v12;
              }
              while (v12 > 1);
            }
            CFRelease(v10);
          }
          *(_QWORD *)(v2 + 56) = 0;
          MEMORY[0x19402EF04](*(_QWORD *)(v2 + 48));
        }
        v15 = *(const void **)(v2 + 64);
        if (v15)
        {
          CFRelease(v15);
          *(_QWORD *)(v2 + 64) = 0;
        }
        v16 = *(const void **)(v2 + 8);
        if (v16)
        {
          CFRelease(v16);
          *(_QWORD *)(v2 + 8) = 0;
        }
        v17 = *(const void **)(v2 + 40);
        if (v17)
        {
          CFRelease(v17);
          *(_QWORD *)(v2 + 40) = 0;
        }
        v18 = *(const void **)(v2 + 24);
        if (v18)
        {
          CFRelease(v18);
          *(_QWORD *)(v2 + 24) = 0;
        }
        v19 = *(const void **)(v2 + 16);
        if (v19)
        {
          CFRelease(v19);
          *(_QWORD *)(v2 + 16) = 0;
        }
        v20 = *(const void **)(v2 + 104);
        if (v20)
        {
          CFRelease(v20);
          *(_QWORD *)(v2 + 104) = 0;
        }
        MediaDataChunkWriterRelease(*(const __CFAllocator ***)(v2 + 32));
        *(_QWORD *)(v2 + 32) = 0;
        *(_BYTE *)v2 = 1;
      }
    }
  }
  return 0;
}

uint64_t MutableMovie_Finalize(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    result = CMBaseObjectGetDerivedStorage();
    if (result)
    {
      v2 = result;
      MutableMovie_Invalidate(v1);
      result = *(_QWORD *)(v2 + 48);
      if (result)
      {
        result = FigSimpleMutexDestroy();
        *(_QWORD *)(v2 + 48) = 0;
      }
    }
  }
  return result;
}

__CFString *MutableMovie_CopyDebugDescription(uint64_t a1)
{
  _BYTE *DerivedStorage;
  _QWORD *v3;
  uint64_t v4;
  __CFString *Mutable;
  void (*v6)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeID v7;
  unsigned int Value;
  uint64_t TrackCount;
  uint64_t v10;
  uint64_t i;
  uint64_t TrackForTrackIndex;
  CFTypeRef cf;

  cf = 0;
  if (!a1)
    return 0;
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return 0;
  v3 = DerivedStorage;
  if (*DerivedStorage)
    return 0;
  v4 = *MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (Mutable)
  {
    v6 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
    if (v6 && (v6(a1, CFSTR("Modified"), v4, &cf), cf))
    {
      v7 = CFGetTypeID(cf);
      if (v7 == CFBooleanGetTypeID())
        Value = CFBooleanGetValue((CFBooleanRef)cf);
      else
        Value = 0;
      CFRelease(cf);
    }
    else
    {
      Value = 0;
    }
    CFStringAppendFormat(Mutable, 0, CFSTR("<FigMutableMovie %p>"), a1);
    CFStringAppendFormat(Mutable, 0, CFSTR("{ modified: %d URL: %@ default media storage URL: %@ tracks: "), Value, v3[1], v3[5]);
    TrackCount = MovieInformationGetTrackCount(v3[3]);
    if (TrackCount >= 1)
    {
      v10 = TrackCount;
      for (i = 0; i != v10; ++i)
      {
        TrackForTrackIndex = MovieInformationFindTrackForTrackIndex(v3[3], i);
        if (TrackForTrackIndex)
          CFStringAppendFormat(Mutable, 0, CFSTR("<track ID: %d type: %d>"), *(unsigned int *)(TrackForTrackIndex + 144), *(unsigned int *)(TrackForTrackIndex + 24));
      }
    }
    CFStringAppendFormat(Mutable, 0, CFSTR(" }"));
  }
  return Mutable;
}

uint64_t MutableMovie_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, __CFArray **a4)
{
  uint64_t BasicMetrics;
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CFTypeRef *v13;
  CFTypeRef *v14;
  const __CFAllocator *v15;
  CFNumberType v16;
  __CFArray *AlternateGroupArray;
  CMTime *p_time1;
  uint64_t v20;
  CFTypeRef *v21;
  CFTypeRef *v22;
  int HasCompressedMovieAtom;
  const void **v24;
  __CFArray *Mutable;
  __CFArray *v26;
  const __CFArray *v27;
  CFIndex Count;
  CFIndex v29;
  CFIndex i;
  const void *ValueAtIndex;
  const void *v32;
  const __CFArray *v33;
  __CFArray *v34;
  const __CFArray *v35;
  CFIndex v36;
  CFIndex v37;
  CFIndex j;
  const void *v39;
  const void *v40;
  const __CFDictionary *MovieMetadataItemArray;
  const __CFDictionary *v42;
  __CFDictionary *v43;
  __CFDictionary *v44;
  CFIndex TrackCount;
  CFIndex v46;
  CFMutableArrayRef v47;
  CFMutableArrayRef v48;
  uint64_t v49;
  uint64_t TrackForTrackIndex;
  __CFArray *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __CFArray *v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t, uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  __CFArray *v61;
  CFTypeRef cf[2];
  __int128 v63;
  int v64;
  CMTime v65;
  CMTime time2;
  CMTime time1;

  BasicMetrics = 4294950861;
  if (a1)
  {
    if (a2)
    {
      if (a4)
      {
        DerivedStorage = CMBaseObjectGetDerivedStorage();
        if (DerivedStorage)
        {
          v10 = DerivedStorage;
          if (*(_BYTE *)DerivedStorage)
            return 4294950869;
          v11 = MovieInformationLockForRead(*(_QWORD *)(DerivedStorage + 24));
          if ((_DWORD)v11)
            return v11;
          if (CFEqual(a2, CFSTR("PreferredVolume")))
          {
            LODWORD(cf[0]) = 1065353216;
            v12 = *(_QWORD *)(v10 + 24);
            v13 = cf;
            v14 = 0;
LABEL_11:
            BasicMetrics = MovieInformationGetBasicMetrics(v12, v14, v13, 0, 0);
            if ((_DWORD)BasicMetrics)
            {
LABEL_15:
              MovieInformationUnlockForRead(*(_QWORD *)(v10 + 24));
              return BasicMetrics;
            }
            v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v16 = kCFNumberFloat32Type;
            goto LABEL_13;
          }
          if (CFEqual(a2, CFSTR("PreferredRate")))
          {
            LODWORD(cf[0]) = 1065353216;
            v12 = *(_QWORD *)(v10 + 24);
            v14 = cf;
            v13 = 0;
            goto LABEL_11;
          }
          if (CFEqual(a2, CFSTR("PosterTime")))
          {
LABEL_18:
            BasicMetrics = 4294950876;
            goto LABEL_15;
          }
          if (CFEqual(a2, CFSTR("MovieDuration")))
          {
            cf[0] = 0;
            cf[1] = 0;
            *(_QWORD *)&v63 = 0;
            MovieInformationGetMovieDuration(*(_QWORD *)(v10 + 24), (uint64_t)cf);
            *(_OWORD *)&time1.value = *(_OWORD *)cf;
            time1.epoch = v63;
            time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
            if (CMTimeCompare(&time1, &time2) >= 1 && !*(_BYTE *)(v10 + 2))
            {
              memset(&time1, 0, sizeof(time1));
              getMaximumEditedTrackDuration(v10, (uint64_t)&time1);
              time2 = time1;
              *(_OWORD *)&v65.value = *(_OWORD *)cf;
              v65.epoch = v63;
              if (CMTimeCompare(&time2, &v65) < 0)
              {
                *(_OWORD *)cf = *(_OWORD *)&time1.value;
                *(_QWORD *)&v63 = time1.epoch;
              }
            }
            *(_OWORD *)&time1.value = *(_OWORD *)cf;
            time1.epoch = v63;
            p_time1 = &time1;
LABEL_25:
            AlternateGroupArray = CMTimeCopyAsDictionary(p_time1, a3);
LABEL_26:
            BasicMetrics = 0;
            goto LABEL_14;
          }
          if (CFEqual(a2, CFSTR("MovieTimeScale")))
          {
            LODWORD(cf[0]) = 0;
            BasicMetrics = MovieInformationGetBasicMetrics(*(_QWORD *)(v10 + 24), 0, 0, cf, 0);
            if ((_DWORD)BasicMetrics)
              goto LABEL_15;
            v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v16 = kCFNumberSInt32Type;
LABEL_13:
            AlternateGroupArray = CFNumberCreate(v15, v16, cf);
LABEL_14:
            *a4 = AlternateGroupArray;
            goto LABEL_15;
          }
          if (CFEqual(a2, CFSTR("MovieMatrix")))
          {
            v64 = 0;
            *(_OWORD *)cf = 0u;
            v63 = 0u;
            BasicMetrics = MovieInformationGetBasicMetrics(*(_QWORD *)(v10 + 24), 0, 0, 0, (uint64_t)cf);
            if ((_DWORD)BasicMetrics)
              goto LABEL_15;
            AlternateGroupArray = FigMatrixToCFArray(a3, (uint64_t)cf);
            goto LABEL_14;
          }
          if (CFEqual(a2, CFSTR("URL")))
          {
            AlternateGroupArray = *(__CFArray **)(v10 + 8);
            if (!AlternateGroupArray)
              goto LABEL_26;
            goto LABEL_43;
          }
          if (CFEqual(a2, CFSTR("FileType")))
          {
            AlternateGroupArray = *(__CFArray **)(v10 + 16);
            if (!AlternateGroupArray)
              goto LABEL_26;
            goto LABEL_43;
          }
          if (CFEqual(a2, CFSTR("DefaultMediaDataStorageURL")))
          {
            AlternateGroupArray = *(__CFArray **)(v10 + 40);
            if (!AlternateGroupArray)
              goto LABEL_26;
LABEL_43:
            AlternateGroupArray = (__CFArray *)CFRetain(AlternateGroupArray);
            goto LABEL_26;
          }
          if (CFEqual(a2, CFSTR("CreationTime")))
          {
            cf[0] = 0;
            v20 = *(_QWORD *)(v10 + 24);
            v21 = cf;
            v22 = 0;
LABEL_48:
            BasicMetrics = MovieInformationGetTimeInfo(v20, v21, v22);
            if ((_DWORD)BasicMetrics)
              goto LABEL_15;
            AlternateGroupArray = CFDateCreate(a3, (double)(unint64_t)cf[0] - *MEMORY[0x1E0C9ADE8]);
            goto LABEL_14;
          }
          if (CFEqual(a2, CFSTR("ModificationTime")))
          {
            cf[0] = 0;
            v20 = *(_QWORD *)(v10 + 24);
            v22 = cf;
            v21 = 0;
            goto LABEL_48;
          }
          if (CFEqual(a2, CFSTR("HasCompressedMovieAtom")))
          {
            HasCompressedMovieAtom = MovieInformationHasCompressedMovieAtom(*(_QWORD *)(v10 + 24));
            v24 = (const void **)MEMORY[0x1E0C9AE50];
            if (!HasCompressedMovieAtom)
              v24 = (const void **)MEMORY[0x1E0C9AE40];
            goto LABEL_53;
          }
          if (CFEqual(a2, CFSTR("AvailableMetadataFormats")))
          {
            Mutable = CFArrayCreateMutable(a3, 0, MEMORY[0x1E0C9B378]);
            v26 = copyArrayOfKnownMetadataFormats(a3);
            if (v26)
            {
              v27 = v26;
              Count = CFArrayGetCount(v26);
              if (Count >= 1)
              {
                v29 = Count;
                for (i = 0; i != v29; ++i)
                {
                  ValueAtIndex = CFArrayGetValueAtIndex(v27, i);
                  if (ValueAtIndex)
                  {
                    v32 = ValueAtIndex;
                    if (MovieInformationMetadataFormatIsAvailable(*(_QWORD **)(v10 + 24), ValueAtIndex))
                      CFArrayAppendValue(Mutable, v32);
                  }
                }
              }
              v33 = v27;
LABEL_73:
              CFRelease(v33);
            }
          }
          else
          {
            if (!CFEqual(a2, CFSTR("Metadata")))
            {
              if (CFEqual(a2, CFSTR("Tracks")))
              {
                LODWORD(cf[0]) = 0;
                TrackCount = MovieInformationGetTrackCount(*(_QWORD *)(v10 + 24));
                if (TrackCount < 1)
                {
                  v48 = 0;
                  BasicMetrics = 0;
                }
                else
                {
                  v46 = TrackCount;
                  v47 = CFArrayCreateMutable(a3, TrackCount, MEMORY[0x1E0C9B378]);
                  if (!v47)
                    goto LABEL_15;
                  v48 = v47;
                  v49 = 0;
                  BasicMetrics = 0;
                  do
                  {
                    TrackForTrackIndex = MovieInformationFindTrackForTrackIndex(*(_QWORD *)(v10 + 24), v49);
                    if (TrackForTrackIndex)
                    {
                      BasicMetrics = MovieTrackGetBasicInfo(TrackForTrackIndex, 0, cf);
                      if (!(_DWORD)BasicMetrics && LODWORD(cf[0]) != 0)
                      {
                        FigCFArrayAppendInt32();
                        BasicMetrics = 0;
                      }
                    }
                    ++v49;
                  }
                  while (v46 != v49);
                }
                *a4 = v48;
                goto LABEL_15;
              }
              if (CFEqual(a2, CFSTR("AlternateGroupArray")))
              {
                AlternateGroupArray = MovieInformationCreateAlternateGroupArray(a3, *(_QWORD *)(v10 + 24));
                goto LABEL_26;
              }
              if (CFEqual(a2, CFSTR("TrackReferenceDictionary")))
              {
                cf[0] = 0;
                BasicMetrics = MovieInformationCreateTrackReferenceDictionary(a3, *(_QWORD *)(v10 + 24), (CFDictionaryRef *)cf);
                if ((_DWORD)BasicMetrics)
                  goto LABEL_15;
                v52 = (__CFArray *)cf[0];
              }
              else
              {
                if (CFEqual(a2, CFSTR("CouldContainFragments")))
                {
                  v24 = (const void **)MEMORY[0x1E0C9AE40];
LABEL_53:
                  AlternateGroupArray = (__CFArray *)*v24;
                  goto LABEL_43;
                }
                if (!CFEqual(a2, CFSTR("ProtectedStatus")))
                {
                  if (!CFEqual(a2, CFSTR("Modified")))
                  {
                    if (!CFEqual(a2, CFSTR("InterleavingPeriod")))
                      goto LABEL_18;
                    *(_OWORD *)cf = *(_OWORD *)(v10 + 80);
                    *(_QWORD *)&v63 = *(_QWORD *)(v10 + 96);
                    p_time1 = (CMTime *)cf;
                    goto LABEL_25;
                  }
                  v24 = (const void **)MEMORY[0x1E0C9AE50];
                  if (!*(_BYTE *)(v10 + 1))
                    v24 = (const void **)MEMORY[0x1E0C9AE40];
                  goto LABEL_53;
                }
                v53 = MovieInformationGetTrackCount(*(_QWORD *)(v10 + 24));
                cf[0] = 0;
                if (v53 < 1)
                {
                  BasicMetrics = 0;
                  v52 = (__CFArray *)*MEMORY[0x1E0C9AE40];
                }
                else
                {
                  v54 = v53;
                  v55 = 0;
                  BasicMetrics = 0;
                  v56 = (__CFArray *)*MEMORY[0x1E0C9AE50];
                  v57 = 1;
                  do
                  {
                    v58 = MovieInformationFindTrackForTrackIndex(*(_QWORD *)(v10 + 24), v55);
                    if (v58)
                    {
                      v59 = *(unsigned int *)(v58 + 144);
                      v60 = *(uint64_t (**)(uint64_t, uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
                      if (v60)
                        BasicMetrics = v60(a1, v59, CFSTR("TrackProtectedStatus"), a3, cf);
                      else
                        BasicMetrics = 4294954514;
                      v61 = (__CFArray *)cf[0];
                      if (cf[0])
                        CFRelease(cf[0]);
                      if (v61 == v56)
                        break;
                    }
                    v57 = ++v55 < v54;
                  }
                  while (v54 != v55);
                  v52 = (__CFArray *)*MEMORY[0x1E0C9AE40];
                  if (v57)
                    v52 = v56;
                }
              }
              *a4 = v52;
              goto LABEL_15;
            }
            Mutable = CFArrayCreateMutable(a3, 0, MEMORY[0x1E0C9B378]);
            v34 = copyArrayOfKnownMetadataFormats(a3);
            if (v34)
            {
              v35 = v34;
              v36 = CFArrayGetCount(v34);
              if (v36 >= 1)
              {
                v37 = v36;
                for (j = 0; j != v37; ++j)
                {
                  v39 = CFArrayGetValueAtIndex(v35, j);
                  if (v39)
                  {
                    v40 = v39;
                    MovieMetadataItemArray = MovieInformationGetMovieMetadataItemArray(*(_QWORD *)(v10 + 24), v39);
                    if (MovieMetadataItemArray)
                    {
                      v42 = MovieMetadataItemArray;
                      v43 = CFDictionaryCreateMutable(a3, 0, 0, 0);
                      if (v43)
                      {
                        v44 = v43;
                        CFDictionaryAddValue(v43, v40, v42);
                        CFArrayAppendValue(Mutable, v44);
                        CFRelease(v44);
                      }
                    }
                  }
                }
              }
              v33 = v35;
              goto LABEL_73;
            }
          }
          BasicMetrics = 0;
          *a4 = Mutable;
          goto LABEL_15;
        }
      }
    }
  }
  return BasicMetrics;
}

uint64_t MutableMovie_SetProperty(uint64_t a1, const void *a2, const __CFNumber *a3)
{
  uint64_t v3;
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  CFTypeID TypeID;
  CFTypeID v10;
  BOOL v11;
  CFTypeID v12;
  uint64_t v13;
  CFTypeID v14;
  CFTypeID v15;
  CFTypeID v16;
  const void *v17;
  CFTypeID v18;
  CFTypeID v19;
  const __CFAllocator *v20;
  __CFArray *v21;
  const __CFArray *v22;
  CFIndex Count;
  CFIndex v24;
  CFIndex i;
  void *ValueAtIndex;
  void *v27;
  CFArrayRef v28;
  CFArrayRef v29;
  CFIndex v30;
  void *v31;
  void *v32;
  CFMutableArrayRef Mutable;
  __CFArray *v34;
  CFIndex v35;
  CFIndex v36;
  CFIndex j;
  const __CFDictionary *v38;
  const __CFDictionary *v39;
  CFTypeID v40;
  const __CFArray *Value;
  const __CFArray *v42;
  CFTypeID v44;
  int64_t v45;
  const void **v46;
  const void **v47;
  uint64_t v48;
  const __CFString *v49;
  CFIndex v50;
  CFIndex v51;
  CFIndex v52;
  CFIndex v53;
  uint64_t *v54;
  int v55;
  uint64_t v56;
  CFTypeID v57;
  CFTypeID v58;
  const __CFAllocator *v59;
  CFIndex v60;
  const __CFArray *v61;
  __int128 valuePtr;
  __int128 v63;
  int v64;
  CFRange v65;

  v3 = 4294950861;
  if (a1)
  {
    if (a2)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (DerivedStorage)
      {
        v7 = DerivedStorage;
        if (*(_BYTE *)DerivedStorage)
          return 4294950869;
        v8 = MovieInformationLockForWrite(*(_QWORD *)(DerivedStorage + 24));
        if ((_DWORD)v8)
          return v8;
        if (CFEqual(a2, CFSTR("PreferredVolume")))
        {
          if (a3)
          {
            TypeID = CFNumberGetTypeID();
            if (TypeID == CFGetTypeID(a3))
            {
              LODWORD(valuePtr) = 1065353216;
              CFNumberGetValue(a3, kCFNumberFloat32Type, &valuePtr);
              MovieInformationSetPreferredVolume(*(_QWORD *)(v7 + 24), *(float *)&valuePtr);
LABEL_14:
              v3 = 0;
              v11 = 1;
LABEL_15:
              *(_BYTE *)(v7 + 1) = v11;
LABEL_70:
              MovieInformationUnlockForWrite(*(_QWORD *)(v7 + 24));
              return v3;
            }
          }
          goto LABEL_69;
        }
        if (CFEqual(a2, CFSTR("PreferredRate")))
        {
          if (a3)
          {
            v10 = CFNumberGetTypeID();
            if (v10 == CFGetTypeID(a3))
            {
              LODWORD(valuePtr) = 1065353216;
              CFNumberGetValue(a3, kCFNumberFloat32Type, &valuePtr);
              MovieInformationSetPreferredRate(*(_QWORD *)(v7 + 24), *(float *)&valuePtr);
              goto LABEL_14;
            }
          }
LABEL_69:
          v3 = 0;
          goto LABEL_70;
        }
        if (CFEqual(a2, CFSTR("MovieTimeScale")))
        {
          if (!a3)
            goto LABEL_69;
          v12 = CFNumberGetTypeID();
          if (v12 != CFGetTypeID(a3))
            goto LABEL_69;
          LODWORD(valuePtr) = 0;
          CFNumberGetValue(a3, kCFNumberSInt32Type, &valuePtr);
          if ((int)valuePtr > 0)
          {
            v13 = MovieInformationSetMovieTimeScale(*(_QWORD *)(v7 + 24), valuePtr);
            goto LABEL_21;
          }
LABEL_25:
          v3 = FigSignalErrorAt();
          goto LABEL_70;
        }
        if (CFEqual(a2, CFSTR("PosterTime")))
        {
          if (!a3)
            goto LABEL_69;
          v14 = CFDictionaryGetTypeID();
          if (v14 != CFGetTypeID(a3))
            goto LABEL_69;
          goto LABEL_25;
        }
        if (CFEqual(a2, CFSTR("MovieMatrix")))
        {
          if (!a3)
            goto LABEL_69;
          v15 = CFArrayGetTypeID();
          if (v15 != CFGetTypeID(a3))
            goto LABEL_69;
          v64 = 0;
          valuePtr = 0u;
          v63 = 0u;
          v3 = CFArrayToFigMatrix(a3, (uint64_t)&valuePtr);
          if ((_DWORD)v3)
            goto LABEL_70;
          v13 = MovieInformationSetMovieMatrix(*(_QWORD *)(v7 + 24), (uint64_t)&valuePtr);
LABEL_21:
          v3 = v13;
          v11 = (_DWORD)v13 == 0;
          goto LABEL_15;
        }
        if (CFEqual(a2, CFSTR("DefaultMediaDataStorageURL")))
        {
          if (a3)
          {
            v16 = CFGetTypeID(a3);
            if (v16 != CFURLGetTypeID())
              goto LABEL_69;
            v17 = *(const void **)(v7 + 40);
            *(_QWORD *)(v7 + 40) = a3;
            goto LABEL_39;
          }
          v17 = *(const void **)(v7 + 40);
          *(_QWORD *)(v7 + 40) = 0;
          goto LABEL_67;
        }
        if (CFEqual(a2, CFSTR("URL")))
        {
          if (a3)
          {
            v18 = CFGetTypeID(a3);
            if (v18 != CFURLGetTypeID())
              goto LABEL_69;
            v17 = *(const void **)(v7 + 8);
            *(_QWORD *)(v7 + 8) = a3;
LABEL_39:
            CFRetain(a3);
            goto LABEL_67;
          }
          v17 = *(const void **)(v7 + 8);
          *(_QWORD *)(v7 + 8) = 0;
LABEL_67:
          if (v17)
            CFRelease(v17);
          goto LABEL_69;
        }
        if (CFEqual(a2, CFSTR("Metadata")))
        {
          if (!a3 || (v19 = CFGetTypeID(a3), v19 == CFArrayGetTypeID()))
          {
            v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v21 = copyArrayOfKnownMetadataFormats((const __CFAllocator *)*MEMORY[0x1E0C9AE00]);
            if (v21)
            {
              v22 = v21;
              Count = CFArrayGetCount(v21);
              if (Count >= 1)
              {
                v24 = Count;
                for (i = 0; i != v24; ++i)
                {
                  ValueAtIndex = (void *)CFArrayGetValueAtIndex(v22, i);
                  if (ValueAtIndex)
                  {
                    v27 = ValueAtIndex;
                    v28 = CFArrayCreate(v20, 0, 0, 0);
                    if (v28)
                    {
                      v29 = v28;
                      MovieInformationSetMovieMetadataItemArray(*(_QWORD *)(v7 + 24), v27, v28);
                      CFRelease(v29);
                    }
                  }
                }
                if (a3)
                {
                  v30 = 0;
                  v59 = v20;
                  v60 = v24;
                  v61 = v22;
                  do
                  {
                    v31 = (void *)CFArrayGetValueAtIndex(v22, v30);
                    if (v31)
                    {
                      v32 = v31;
                      Mutable = CFArrayCreateMutable(v20, 0, MEMORY[0x1E0C9B378]);
                      if (Mutable)
                      {
                        v34 = Mutable;
                        v35 = CFArrayGetCount(a3);
                        if (v35 >= 1)
                        {
                          v36 = v35;
                          for (j = 0; j != v36; ++j)
                          {
                            v38 = (const __CFDictionary *)CFArrayGetValueAtIndex(a3, j);
                            if (v38)
                            {
                              v39 = v38;
                              v40 = CFDictionaryGetTypeID();
                              if (v40 == CFGetTypeID(v39))
                              {
                                CFDictionaryGetValue(v39, CFSTR("format"));
                                Value = (const __CFArray *)CFDictionaryGetValue(v39, CFSTR("items"));
                                if (Value)
                                {
                                  v42 = Value;
                                  if (FigCFEqual())
                                  {
                                    v65.length = CFArrayGetCount(v42);
                                    v65.location = 0;
                                    CFArrayAppendArray(v34, v42, v65);
                                  }
                                }
                              }
                            }
                          }
                        }
                        MovieInformationSetMovieMetadataItemArray(*(_QWORD *)(v7 + 24), v32, v34);
                        CFRelease(v34);
                        v20 = v59;
                      }
                    }
                    ++v30;
                    v22 = v61;
                  }
                  while (v30 != v60);
                }
              }
              CFRelease(v22);
            }
            goto LABEL_14;
          }
          goto LABEL_69;
        }
        if (!CFEqual(a2, CFSTR("TrackReferenceDictionary")))
        {
          if (CFEqual(a2, CFSTR("Modified")))
          {
            if (a3)
            {
              v57 = CFBooleanGetTypeID();
              if (v57 == CFGetTypeID(a3))
              {
                if ((const __CFNumber *)*MEMORY[0x1E0C9AE50] != a3)
                {
                  v3 = 0;
                  *(_BYTE *)(v7 + 1) = 0;
                  goto LABEL_70;
                }
                goto LABEL_14;
              }
            }
            goto LABEL_69;
          }
          if (CFEqual(a2, CFSTR("InterleavingPeriod")))
          {
            if (a3)
            {
              v58 = CFDictionaryGetTypeID();
              if (v58 == CFGetTypeID(a3))
              {
                CMTimeMakeFromDictionary((CMTime *)&valuePtr, a3);
                v3 = 0;
                *(_OWORD *)(v7 + 80) = valuePtr;
                *(_QWORD *)(v7 + 96) = v63;
                goto LABEL_70;
              }
            }
            goto LABEL_69;
          }
          if (!CFEqual(a2, CFSTR("MovieDuration"))
            && !CFEqual(a2, CFSTR("CreationTime"))
            && !CFEqual(a2, CFSTR("ModificationTime"))
            && !CFEqual(a2, CFSTR("Tracks"))
            && !CFEqual(a2, CFSTR("AlternateGroupArray"))
            && !CFEqual(a2, CFSTR("CouldContainFragments"))
            && !CFEqual(a2, CFSTR("AvailableMetadataFormats"))
            && !CFEqual(a2, CFSTR("FileType"))
            && !CFEqual(a2, CFSTR("HasCompressedMovieAtom")))
          {
            v3 = 4294950876;
            goto LABEL_70;
          }
          goto LABEL_25;
        }
        if (!a3)
          goto LABEL_69;
        v44 = CFDictionaryGetTypeID();
        if (v44 != CFGetTypeID(a3))
          goto LABEL_69;
        v45 = CFDictionaryGetCount(a3);
        v46 = (const void **)malloc_type_calloc(v45, 8uLL, 0x6004044C4A2DFuLL);
        if (v46)
        {
          v47 = (const void **)malloc_type_calloc(v45, 8uLL, 0x6004044C4A2DFuLL);
          if (v47)
          {
            CFDictionaryGetKeysAndValues(a3, v46, v47);
            if (v45 < 1)
            {
              v3 = 0;
            }
            else
            {
              v48 = 0;
              v3 = 0;
              while (1)
              {
                v49 = (const __CFString *)v46[v48];
                v50 = CFArrayGetCount((CFArrayRef)v47[v48]);
                if (v50 >= 1)
                  break;
LABEL_87:
                if (++v48 == v45)
                  goto LABEL_110;
              }
              v51 = v50;
              v52 = 0;
              while (1)
              {
                LODWORD(valuePtr) = 0;
                if (!FigCFArrayGetInt32AtIndex())
                  break;
                v53 = v52 + 1;
                if (!FigCFArrayGetInt32AtIndex())
                  break;
                v54 = *(uint64_t **)(v7 + 24);
                v55 = convertCFStringToOSType(v49);
                v56 = MovieInformationAddOneTrackReference(v54, v55, valuePtr, 0);
                v52 = v53 + 1;
                if (v52 >= v51)
                {
                  v3 = v56;
                  goto LABEL_87;
                }
              }
              v3 = 4294954516;
            }
            goto LABEL_110;
          }
        }
        else
        {
          v47 = 0;
        }
        v3 = 4294954510;
LABEL_110:
        free(v46);
        free(v47);
        goto LABEL_70;
      }
    }
  }
  return v3;
}

void releaseTrack(const __CFAllocator *a1, _QWORD *a2)
{
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;

  if (a2)
  {
    v4 = (const void *)a2[1];
    if (v4)
      CFRelease(v4);
    v5 = (const void *)a2[2];
    if (v5)
      CFRelease(v5);
    v6 = (const void *)a2[5];
    if (v6)
      CFRelease(v6);
    v7 = (const void *)a2[6];
    if (v7)
      CFRelease(v7);
    releaseSource((const __CFAllocator *)*MEMORY[0x1E0C9AE00], a2[16]);
    CFAllocatorDeallocate(a1, a2);
  }
}

void releaseSource(const __CFAllocator *a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;

  if (a2)
  {
    v4 = *(const void **)(a2 + 16);
    if (v4)
      CFRelease(v4);
    v5 = *(const void **)(a2 + 32);
    if (v5)
      CFRelease(v5);
    v6 = *(const void **)(a2 + 24);
    if (v6)
      CFRelease(v6);
    v7 = *(const void **)(a2 + 40);
    if (v7)
      CFRelease(v7);
    v8 = *(const void **)(a2 + 48);
    if (v8)
      CFRelease(v8);
    v9 = *(const void **)(a2 + 136);
    if (v9)
      CFRelease(v9);
    deleteTimeMappingArray(*(void ***)(a2 + 64));
    deleteTimeMappingArray(*(void ***)(a2 + 72));
    deleteTimeMappingArray(*(void ***)(a2 + 80));
    deleteTimeMappingArray(*(void ***)(a2 + 88));
    MediaSampleTimingGeneratorRelease(*(void **)(a2 + 56));
    CFAllocatorDeallocate(a1, (void *)a2);
  }
}

void deleteTimeMappingArray(void **a1)
{
  if (a1)
  {
    free(*a1);
    free(a1);
  }
}

uint64_t getMaximumEditedTrackDuration@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex i;
  const void *ValueAtIndex;
  CMTime v11;
  CMTime time1;
  CMTime v13;

  v4 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)a2 = *MEMORY[0x1E0CA2E68];
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v4 + 16);
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 48));
  v5 = *(const __CFArray **)(a1 + 56);
  if (v5)
  {
    Count = CFArrayGetCount(v5);
    if (Count >= 1)
    {
      v7 = Count;
      for (i = 0; i != v7; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), i);
        memset(&v13, 0, sizeof(v13));
        getTrackEditedDuration(a1, (uint64_t)ValueAtIndex, &v13);
        time1 = v13;
        v11 = *(CMTime *)a2;
        if (CMTimeCompare(&time1, &v11) >= 1)
          *(CMTime *)a2 = v13;
      }
    }
  }
  return MEMORY[0x19402EF04](*(_QWORD *)(a1 + 48));
}

__CFArray *copyArrayOfKnownMetadataFormats(const __CFAllocator *a1)
{
  __CFArray *Mutable;
  __CFArray *v2;

  Mutable = CFArrayCreateMutable(a1, 0, 0);
  v2 = Mutable;
  if (Mutable)
  {
    CFArrayAppendValue(Mutable, CFSTR("com.apple.quicktime.udta"));
    CFArrayAppendValue(v2, CFSTR("com.apple.quicktime.mdta"));
    CFArrayAppendValue(v2, CFSTR("org.mp4ra"));
    CFArrayAppendValue(v2, CFSTR("com.apple.itunes"));
    CFArrayAppendValue(v2, CFSTR("org.id3"));
    CFArrayAppendValue(v2, CFSTR("com.apple.quicktime.HLS"));
  }
  return v2;
}

void getTrackEditedDuration(uint64_t a1@<X0>, uint64_t a2@<X1>, CMTime *a3@<X8>)
{
  uint64_t v6;
  uint64_t EditSegmentCount;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  const __CFArray *v11;
  const __CFArray *v12;
  const AudioFormatListItem *ValueAtIndex;
  uint64_t v14;
  CMTimeEpoch v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE rhs[32];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD v29[3];
  _BYTE lhs[32];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE time1[32];
  __int128 v36;
  __int128 v37;
  _BYTE v38[32];
  __int128 v39;
  CMTimeEpoch v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _OWORD v47[3];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;

  v6 = *(_QWORD *)(a2 + 16);
  EditSegmentCount = MovieTrackGetEditSegmentCount(v6);
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)&v47[0] = 0;
  v9 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
  v10 = *MEMORY[0x1E0CA2E40];
  v52 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  v53 = v9;
  v51 = v10;
  if (*(_DWORD *)(v8 + 24) == 1936684398
    && !*(_BYTE *)(a1 + 2)
    && !MovieTrackEditsExcludeAudioPrimingAndRemainderDuration(v8))
  {
    v11 = MovieTrackCopyFormatDescriptionArray(v8);
    if (v11)
    {
      v12 = v11;
      if (CFArrayGetCount(v11) >= 1)
      {
        ValueAtIndex = (const AudioFormatListItem *)CFArrayGetValueAtIndex(v12, 0);
        MovieTrackCopyEnhancedGaplessInfo(v8, v47);
        FigGaplessInfoGetGaplessSourceTimeRange(ValueAtIndex, *(__CFDictionary **)&v47[0], &v51);
      }
      CFRelease(v12);
      if (*(_QWORD *)&v47[0])
        CFRelease(*(CFTypeRef *)&v47[0]);
    }
  }
  v14 = MEMORY[0x1E0CA2E68];
  v17 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&a3->value = *MEMORY[0x1E0CA2E68];
  v15 = *(_QWORD *)(v14 + 16);
  a3->epoch = v15;
  if (EditSegmentCount >= 1)
  {
    v16 = 0;
    v22 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 48);
    v23 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 32);
    v20 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 80);
    v21 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 64);
    v18 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 16);
    v19 = *MEMORY[0x1E0CA2E20];
    do
    {
      v49 = 0u;
      v50 = 0u;
      v48 = 0u;
      memset(v47, 0, sizeof(v47));
      v43 = v23;
      v44 = v22;
      v45 = v21;
      v46 = v20;
      v41 = v19;
      v42 = v18;
      v39 = v17;
      v40 = v15;
      if (MovieTrackGetEditSegmentWithIndex(v6, v16, v47))
        break;
      do
      {
        v36 = v23;
        v37 = v22;
        *(_OWORD *)v38 = v21;
        *(_OWORD *)&v38[16] = v20;
        *(_OWORD *)time1 = v19;
        *(_OWORD *)&time1[16] = v18;
        v31 = v47[2];
        v32 = v48;
        v33 = v49;
        v34 = v50;
        *(_OWORD *)lhs = v47[0];
        *(_OWORD *)&lhs[16] = v47[1];
        v29[0] = v51;
        v29[1] = v52;
        v29[2] = v53;
        v25 = v43;
        v26 = v44;
        v27 = v45;
        v28 = v46;
        *(_OWORD *)rhs = v41;
        *(_OWORD *)&rhs[16] = v42;
        FigGaplessInfoAdjustEditSegmentAccordingtoGaplessAudioTimeRange((CMTime *)lhs, (uint64_t)v29, (uint64_t)rhs, (uint64_t)time1, (uint64_t)&v39);
        v43 = v36;
        v44 = v37;
        v45 = *(_OWORD *)v38;
        v46 = *(_OWORD *)&v38[16];
        v41 = *(_OWORD *)time1;
        v42 = *(_OWORD *)&time1[16];
        *(_OWORD *)lhs = *(_OWORD *)&a3->value;
        *(_QWORD *)&lhs[16] = a3->epoch;
        *(_OWORD *)rhs = *(_OWORD *)&v38[8];
        *(_QWORD *)&rhs[16] = *(_QWORD *)&v38[24];
        CMTimeAdd(a3, (CMTime *)lhs, (CMTime *)rhs);
        if (v16 >= EditSegmentCount - 1)
          break;
        *(_OWORD *)time1 = v39;
        *(_QWORD *)&time1[16] = v40;
        *(_OWORD *)lhs = *(_OWORD *)((char *)&v47[1] + 8);
        *(_QWORD *)&lhs[16] = *((_QWORD *)&v47[2] + 1);
      }
      while (CMTimeCompare((CMTime *)time1, (CMTime *)lhs) < 0);
      ++v16;
    }
    while (v16 != EditSegmentCount);
  }
}

uint64_t CFArrayToFigMatrix(const __CFArray *a1, uint64_t a2)
{
  uint64_t result;
  CFTypeID TypeID;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  char *v10;
  const void *ValueAtIndex;
  CFTypeID v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;

  v16 = 0;
  v14 = 0u;
  v15 = 0u;
  result = 4294950861;
  if (a1 && a2)
  {
    TypeID = CFArrayGetTypeID();
    if (TypeID == CFGetTypeID(a1) && CFArrayGetCount(a1) == 9)
    {
      v6 = 0;
      v7 = 0;
      v8 = &v14;
LABEL_6:
      v9 = 0;
      v10 = (char *)v8;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a1, v6 + v9);
        v12 = CFNumberGetTypeID();
        if (v12 != CFGetTypeID(ValueAtIndex))
          break;
        CFNumberGetValue((CFNumberRef)ValueAtIndex, kCFNumberFloat32Type, v10);
        ++v9;
        v10 += 4;
        if (v9 == 3)
        {
          ++v7;
          v6 += 3;
          v8 = (__int128 *)((char *)v8 + 12);
          if (v7 != 3)
            goto LABEL_6;
          result = 0;
          v13 = v15;
          *(_OWORD *)a2 = v14;
          *(_OWORD *)(a2 + 16) = v13;
          *(_DWORD *)(a2 + 32) = v16;
          return result;
        }
      }
    }
    return 4294950861;
  }
  return result;
}

const __CFString *convertCFStringToOSType(const __CFString *result)
{
  const __CFString *v1;
  CFIndex Length;
  CFIndex v3;
  CFIndex Bytes;
  UInt8 buffer[4];
  CFRange v6;

  *(_DWORD *)buffer = 0;
  if (result)
  {
    v1 = result;
    Length = CFStringGetLength(result);
    if (Length >= 4)
      v3 = 4;
    else
      v3 = Length;
    v6.location = 0;
    v6.length = v3;
    Bytes = CFStringGetBytes(v1, v6, 0, 0, 0, buffer, 4, 0);
    result = 0;
    if (v3 == Bytes)
      return (const __CFString *)bswap32(*(unsigned int *)buffer);
  }
  return result;
}

uint64_t MutableMovie_CopyFormatReader(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t result;
  CFTypeRef v8;
  CFTypeRef v9;

  v9 = 0;
  if (a1 && a4)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      if (*(_BYTE *)DerivedStorage)
      {
        v8 = 0;
        result = 4294950869;
      }
      else
      {
        result = MovieFormatReaderCreateWithMovieInformation(*(const void **)(DerivedStorage + 24), a2 != 0, &v9);
        v8 = v9;
      }
    }
    else
    {
      v8 = 0;
      result = 4294950861;
    }
    goto LABEL_6;
  }
  result = 4294950861;
  if (a4)
  {
    v8 = 0;
LABEL_6:
    *a4 = v8;
  }
  return result;
}

uint64_t MutableMovie_WriteHeader(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  _BYTE *DerivedStorage;
  uint64_t v8;

  if (!a1)
    return FigSignalErrorAt();
  if (!a2)
    return FigSignalErrorAt();
  if (!a3)
    return FigSignalErrorAt();
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || *DerivedStorage)
    return FigSignalErrorAt();
  FigFileDoesFileExist();
  v8 = CMByteStreamCreateForFileURL();
  if ((_DWORD)v8)
    return v8;
  else
    return writeHeaderToByteStream(a1, a2, 0, a4);
}

uint64_t MutableMovie_CopyHeaderData(uint64_t a1, uint64_t a2, const __CFDictionary *a3, uint64_t a4, __CFData **a5)
{
  const void **v5;
  uint64_t v6;
  __CFData *Mutable;
  const void **DerivedStorage;
  CFTypeID v13;
  _BOOL4 v14;
  BOOL v15;
  uint64_t v16;
  const __CFAllocator *v17;
  uint64_t v18;
  CFTypeRef v19;
  CFTypeRef v21;
  void *ptr;
  CFTypeRef cf;

  v5 = 0;
  v21 = 0;
  ptr = 0;
  v6 = 4294950861;
  if (a1 && a2)
  {
    Mutable = 0;
    if (!a5)
      goto LABEL_25;
    DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
    v5 = DerivedStorage;
    if (!DerivedStorage)
      goto LABEL_24;
    if (*(_BYTE *)DerivedStorage)
    {
      v5 = 0;
      Mutable = 0;
      v6 = 4294950869;
    }
    else
    {
      if (a3 && (v13 = CFGetTypeID(a3), v13 == CFDictionaryGetTypeID()))
      {
        v14 = CFDictionaryGetValue(a3, CFSTR("WriteFileTypeAtom")) != (const void *)*MEMORY[0x1E0C9AE40];
        v15 = CFDictionaryGetValue(a3, CFSTR("SynthesizeURLForMovieProxy")) != (const void *)*MEMORY[0x1E0C9AE50];
      }
      else
      {
        v14 = 1;
        v15 = 1;
      }
      v16 = createMovieHeaderMakerFromMiP(a1, v5[3], &ptr);
      if ((_DWORD)v16)
      {
        v6 = v16;
        v5 = 0;
        goto LABEL_24;
      }
      v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      if (v15)
        v5 = 0;
      else
        v5 = (const void **)CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("file:///proxy.mov"), 0);
      v18 = MovieHeaderMakerCopyMovieHeaderAsBlockBuffer((uint64_t)ptr, v17, a2, (const __CFURL *)v5, (CMBlockBufferRef *)&v21);
      if ((_DWORD)v18)
      {
        v6 = v18;
        goto LABEL_24;
      }
      Mutable = CFDataCreateMutable(v17, 0);
      if (Mutable)
      {
        if (!v14)
          goto LABEL_39;
        cf = 0;
        v6 = copyFileTypeAtomAsBlockBuffer(a2, (CMBlockBufferRef *)&cf);
        v19 = cf;
        if (!(_DWORD)v6)
        {
          v6 = writeBlockBufferToCFData((CMBlockBufferRef)cf, Mutable);
          v19 = cf;
        }
        if (v19)
          CFRelease(v19);
        if (!(_DWORD)v6)
        {
LABEL_39:
          v6 = writeBlockBufferToCFData((CMBlockBufferRef)v21, Mutable);
          if (!(_DWORD)v6)
          {
            *a5 = Mutable;
LABEL_24:
            Mutable = 0;
          }
        }
      }
      else
      {
        v6 = FigSignalErrorAt();
      }
    }
  }
  else
  {
    Mutable = 0;
  }
LABEL_25:
  if (v21)
    CFRelease(v21);
  MovieHeaderMakerRelease((const __CFAllocator **)ptr);
  if (Mutable)
    CFRelease(Mutable);
  if (v5)
    CFRelease(v5);
  return v6;
}

uint64_t MutableMovie_AddTrack(uint64_t a1, int a2, const __CFDictionary *a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v6;
  uint64_t DerivedStorage;
  uint64_t v12;
  uint64_t v13;
  uint64_t MutableMovieTrackObject;
  int v15;
  void (*v16)(uint64_t, _QWORD, int *);
  int v18;
  void *value;
  CFTypeRef cf;
  unsigned int v21;

  v21 = 0;
  value = 0;
  cf = 0;
  v6 = 4294950861;
  if (a1)
  {
    if (a2)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (DerivedStorage)
      {
        v12 = DerivedStorage;
        if (*(_BYTE *)DerivedStorage)
        {
          v6 = 4294950869;
        }
        else
        {
          v13 = MovieInformationLockForWrite(*(_QWORD *)(DerivedStorage + 24));
          if (!(_DWORD)v13)
          {
            v6 = MovieInformationCreateTrack(*(_QWORD *)(v12 + 24), a2, 0, &v21, &cf);
            MovieInformationUnlockForWrite(*(_QWORD *)(v12 + 24));
            if ((_DWORD)v6)
              goto LABEL_13;
            *(_BYTE *)(v12 + 1) = 1;
            MutableMovieTrackObject = createMutableMovieTrackObject((const __CFAllocator *)*MEMORY[0x1E0C9AE00], *(const void **)(v12 + 24), cf, *(CFAllocatorRef **)(v12 + 32), (uint64_t *)&value);
            if (value)
            {
              v6 = MutableMovieTrackObject;
              MEMORY[0x19402EEEC](*(_QWORD *)(v12 + 48));
              CFArrayAppendValue(*(CFMutableArrayRef *)(v12 + 56), value);
              MEMORY[0x19402EF04](*(_QWORD *)(v12 + 48));
              if (!a4)
                goto LABEL_12;
              v15 = 1752524863;
              v18 = 1752524863;
              v16 = *(void (**)(uint64_t, _QWORD, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
              if (v16)
              {
                v16(a4, 0, &v18);
                v15 = v18;
              }
              if (v15 == a2)
              {
LABEL_12:
                syncPropertiesOfNewTrackWithSourceTrackUsingTrackReaderOrOptionsDictionary(a1, v21, a4, a3);
                goto LABEL_13;
              }
            }
            v13 = FigSignalErrorAt();
          }
          v6 = v13;
        }
      }
    }
  }
LABEL_13:
  if (a5)
    *a5 = v21;
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t MutableMovie_DeleteTrack(uint64_t a1, int a2)
{
  uint64_t v2;
  _BYTE *DerivedStorage;
  _BYTE *v6;
  _DWORD *Storage;
  _QWORD *v8;
  const __CFArray *v9;
  CFIndex FirstIndexOfValue;
  uint64_t v11;
  _DWORD *TrackForTrackID;
  CFRange v14;

  v2 = 4294950861;
  if (a1)
  {
    if (a2)
    {
      DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
      if (DerivedStorage)
      {
        v6 = DerivedStorage;
        if (*DerivedStorage)
        {
          return 4294950869;
        }
        else
        {
          Storage = MutableMovieTrackGetStorage(a1, a2);
          if (Storage)
          {
            v8 = Storage;
            MEMORY[0x19402EEEC](*((_QWORD *)v6 + 6));
            v9 = (const __CFArray *)*((_QWORD *)v6 + 7);
            v14.length = CFArrayGetCount(v9);
            v14.location = 0;
            FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v9, v14, v8);
            if (FirstIndexOfValue != -1)
              CFArrayRemoveValueAtIndex(*((CFMutableArrayRef *)v6 + 7), FirstIndexOfValue);
            MEMORY[0x19402EF04](*((_QWORD *)v6 + 6));
            releaseTrack((const __CFAllocator *)*MEMORY[0x1E0C9AE00], v8);
            v11 = MovieInformationLockForWrite(*((_QWORD *)v6 + 3));
            if ((_DWORD)v11)
            {
              return v11;
            }
            else
            {
              TrackForTrackID = (_DWORD *)MovieInformationFindTrackForTrackID(*((_QWORD *)v6 + 3), a2);
              if (TrackForTrackID)
                v2 = MovieInformationRemoveTrack(*((uint64_t **)v6 + 3), TrackForTrackID);
              else
                v2 = 0;
              MovieInformationUnlockForWrite(*((_QWORD *)v6 + 3));
              v6[1] = (_DWORD)v2 == 0;
            }
          }
          else
          {
            return 4294950872;
          }
        }
      }
    }
  }
  return v2;
}

uint64_t MutableMovie_CopyTrackProperty(uint64_t a1, int a2, const void *a3, const __CFAllocator *a4, _QWORD *a5)
{
  uint64_t TrackTimeInfo;
  uint64_t DerivedStorage;
  uint64_t v12;
  uint64_t v13;
  uint64_t TrackForTrackID;
  uint64_t v15;
  _DWORD *Storage;
  _DWORD *v17;
  const __CFAllocator *v18;
  CFNumberType v19;
  const void *DictionaryRepresentation;
  CMTimeRange *p_valuePtr;
  uint64_t v23;
  CMTimeRange *v24;
  uint64_t BasicInfo;
  const __CFAllocator *v26;
  CFNumberType v27;
  const __CFArray *v28;
  const __CFArray *v29;
  const opaqueCMFormatDescription *ValueAtIndex;
  __int16 AlternateGroupID;
  uint64_t v32;
  CMTimeRange *v33;
  uint64_t v34;
  CMTimeRange *v35;
  int IsEnabled;
  const void **v37;
  const __CFArray *v38;
  const __CFArray *v39;
  CFIndex Count;
  CFIndex v41;
  const void *v42;
  CFIndex v43;
  const void *v44;
  CMTimeRange *v45;
  uint64_t v46;
  CMTimeRange *v47;
  CMTimeValue value;
  int v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t, CMTime *, _QWORD);
  __CFArray *Mutable;
  __CFArray *v53;
  const __CFArray *v54;
  CFIndex v55;
  CFIndex v56;
  CFIndex i;
  const void *v58;
  const void *v59;
  __CFArray *v60;
  const __CFArray *v61;
  CFIndex v62;
  CFIndex v63;
  CFIndex j;
  const void *v65;
  const void *v66;
  const __CFDictionary *TrackMetadataItemArray;
  const __CFDictionary *v68;
  __CFDictionary *v69;
  __CFDictionary *v70;
  const __CFAllocator *v71;
  uint64_t DisplayTimeRange;
  const __CFAllocator *v73;
  int v74;
  int v75;
  int v76;
  __CFArray *theArray;
  CMTimeRange cf;
  CMTime end;
  CMTimeRange valuePtr;
  CMTime duration;
  CMTime v82;
  CGSize v83;

  TrackTimeInfo = 4294950861;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        if (a5)
        {
          DerivedStorage = CMBaseObjectGetDerivedStorage();
          if (DerivedStorage)
          {
            v12 = DerivedStorage;
            if (*(_BYTE *)DerivedStorage)
              return 4294950869;
            v13 = MovieInformationLockForRead(*(_QWORD *)(DerivedStorage + 24));
            if ((_DWORD)v13)
              return v13;
            TrackForTrackID = MovieInformationFindTrackForTrackID(*(_QWORD *)(v12 + 24), a2);
            if (!TrackForTrackID)
              goto LABEL_21;
            v15 = TrackForTrackID;
            Storage = MutableMovieTrackGetStorage(a1, a2);
            if (!Storage)
            {
              v32 = FigSignalErrorAt();
              goto LABEL_42;
            }
            v17 = Storage;
            if (CFEqual(a3, CFSTR("Volume")))
            {
              LODWORD(valuePtr.start.value) = MovieTrackGetVolume(v15);
              v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
              v19 = kCFNumberFloat32Type;
LABEL_12:
              DictionaryRepresentation = CFNumberCreate(v18, v19, &valuePtr);
LABEL_19:
              TrackTimeInfo = 0;
LABEL_20:
              *a5 = DictionaryRepresentation;
LABEL_21:
              MovieInformationUnlockForRead(*(_QWORD *)(v12 + 24));
              return TrackTimeInfo;
            }
            if (CFEqual(a3, CFSTR("MediaDataStorageURL")))
            {
              DictionaryRepresentation = (const void *)*((_QWORD *)v17 + 5);
              if (!DictionaryRepresentation)
                goto LABEL_19;
              goto LABEL_18;
            }
            if (CFEqual(a3, CFSTR("SampleReferenceBaseURL")))
            {
              DictionaryRepresentation = (const void *)*((_QWORD *)v17 + 6);
              if (!DictionaryRepresentation)
                goto LABEL_19;
LABEL_18:
              DictionaryRepresentation = CFRetain(DictionaryRepresentation);
              goto LABEL_19;
            }
            if (CFEqual(a3, CFSTR("MediaTimeScale")))
            {
              LODWORD(valuePtr.start.value) = MovieTrackGetMediaTimeScale(*((_QWORD *)v17 + 2));
LABEL_25:
              v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
              v19 = kCFNumberSInt32Type;
              goto LABEL_12;
            }
            if (CFEqual(a3, CFSTR("MediaType")))
            {
              LODWORD(valuePtr.start.value) = 1752524863;
              p_valuePtr = &valuePtr;
              v23 = v15;
              v24 = 0;
LABEL_28:
              BasicInfo = MovieTrackGetBasicInfo(v23, p_valuePtr, v24);
LABEL_29:
              TrackTimeInfo = BasicInfo;
              if ((_DWORD)BasicInfo)
                goto LABEL_21;
              v26 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
              v27 = kCFNumberSInt32Type;
              goto LABEL_31;
            }
            if (CFEqual(a3, CFSTR("MediaSubType")))
            {
              LODWORD(valuePtr.start.value) = 1752524863;
              v28 = MovieTrackCopyFormatDescriptionArray(v15);
              if (v28)
              {
                v29 = v28;
                ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(v28, 0);
                LODWORD(valuePtr.start.value) = CMFormatDescriptionGetMediaSubType(ValueAtIndex);
                CFRelease(v29);
              }
              goto LABEL_25;
            }
            if (CFEqual(a3, CFSTR("TrackID")))
            {
              LODWORD(valuePtr.start.value) = 0;
              v24 = &valuePtr;
              v23 = v15;
              p_valuePtr = 0;
              goto LABEL_28;
            }
            if (CFEqual(a3, CFSTR("AlternateGroupID")))
            {
              AlternateGroupID = MovieTrackGetAlternateGroupID(v15);
LABEL_45:
              LOWORD(valuePtr.start.value) = AlternateGroupID;
LABEL_46:
              v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
              v19 = kCFNumberSInt16Type;
              goto LABEL_12;
            }
            if (CFEqual(a3, CFSTR("DefaultAlternateGroupID")))
            {
              AlternateGroupID = MovieTrackGetDefaultAlternateGroupID(v15);
              goto LABEL_45;
            }
            if (CFEqual(a3, CFSTR("ProvisionalAlternateGroupID")))
            {
              LOWORD(valuePtr.start.value) = 0;
              if (!MovieTrackGetProvisionalAlternateGroupID(v15, &valuePtr))
              {
                DictionaryRepresentation = 0;
                goto LABEL_19;
              }
              goto LABEL_46;
            }
            if (CFEqual(a3, CFSTR("CreationTime")))
            {
              valuePtr.start.value = 0;
              v33 = &valuePtr;
              v34 = v15;
              v35 = 0;
LABEL_54:
              TrackTimeInfo = MovieTrackGetTrackTimeInfo(v34, v33, v35);
              if ((_DWORD)TrackTimeInfo)
                goto LABEL_21;
              DictionaryRepresentation = CFDateCreate(a4, (double)(unint64_t)valuePtr.start.value - *MEMORY[0x1E0C9ADE8]);
              goto LABEL_20;
            }
            if (CFEqual(a3, CFSTR("ModificationTime")))
            {
              valuePtr.start.value = 0;
              v35 = &valuePtr;
              v34 = v15;
              v33 = 0;
              goto LABEL_54;
            }
            if (CFEqual(a3, CFSTR("Layer")))
            {
              AlternateGroupID = MovieTrackGetLayer(v15);
              goto LABEL_45;
            }
            if (CFEqual(a3, CFSTR("TrackEnabled")))
            {
              IsEnabled = MovieTrackIsEnabled(v15);
              goto LABEL_62;
            }
            if (CFEqual(a3, CFSTR("IsSelfContained")))
            {
              IsEnabled = MovieTrackIsSelfContained(v15);
              goto LABEL_62;
            }
            if (CFEqual(a3, CFSTR("TrackProtectedStatus")))
            {
              v38 = MovieTrackCopyFormatDescriptionArray(v15);
              if (v38)
              {
                v39 = v38;
                Count = CFArrayGetCount(v38);
                if (Count >= 1)
                {
                  v41 = Count;
                  v42 = CFArrayGetValueAtIndex(v39, 0);
                  if (FigCPEIsSupportedFormatDescription((uint64_t)v42))
                  {
                    CFRelease(v39);
LABEL_70:
                    v37 = (const void **)MEMORY[0x1E0C9AE50];
                    goto LABEL_64;
                  }
                  v43 = 1;
                  while (v41 != v43)
                  {
                    v44 = CFArrayGetValueAtIndex(v39, v43++);
                    if (FigCPEIsSupportedFormatDescription((uint64_t)v44))
                    {
                      CFRelease(v39);
                      if (v43 - 1 < v41)
                        goto LABEL_70;
                      goto LABEL_83;
                    }
                  }
                }
                CFRelease(v39);
              }
LABEL_83:
              v37 = (const void **)MEMORY[0x1E0C9AE40];
LABEL_64:
              DictionaryRepresentation = *v37;
              goto LABEL_18;
            }
            if (CFEqual(a3, CFSTR("TrackDimensions")))
            {
              LODWORD(valuePtr.start.value) = 0;
              LODWORD(cf.start.value) = 0;
LABEL_73:
              MovieTrackGetSpatialInformation(v15, &valuePtr, &cf, 0);
LABEL_74:
              v83.width = *(float *)&valuePtr.start.value;
              v83.height = *(float *)&cf.start.value;
              DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v83);
              goto LABEL_19;
            }
            if (CFEqual(a3, CFSTR("TrackMatrix")))
            {
LABEL_76:
              memset(&valuePtr, 0, 36);
              MovieTrackGetSpatialInformation(v15, 0, 0, (uint64_t)&valuePtr);
              DictionaryRepresentation = FigMatrixToCFArray(a4, (uint64_t)&valuePtr);
              goto LABEL_19;
            }
            if (CFEqual(a3, CFSTR("FormatDescriptionArray")))
            {
              DictionaryRepresentation = MovieTrackCopyFormatDescriptionArray(v15);
              goto LABEL_19;
            }
            if (CFEqual(a3, CFSTR("LanguageCode")))
            {
              valuePtr.start.value = 0;
              v45 = &valuePtr;
              v46 = v15;
              v47 = 0;
              goto LABEL_90;
            }
            if (CFEqual(a3, CFSTR("ExtendedLanguageTag")))
            {
              valuePtr.start.value = 0;
              v47 = &valuePtr;
              v46 = v15;
              v45 = 0;
LABEL_90:
              MovieTrackGetLanguageInformation(v46, 0, v45, v47);
              DictionaryRepresentation = (const void *)valuePtr.start.value;
              if (!valuePtr.start.value)
                goto LABEL_19;
              goto LABEL_18;
            }
            if (CFEqual(a3, CFSTR("MediaCharacteristicArray")))
            {
              valuePtr.start.value = 0;
              TrackTimeInfo = FigMediaCharacteristicsCopyMediaCharacteristicsForTrackInformation((uint64_t)a4, v15, (__CFArray **)&valuePtr);
              if ((_DWORD)TrackTimeInfo)
                goto LABEL_21;
              value = valuePtr.start.value;
LABEL_95:
              *a5 = value;
              goto LABEL_21;
            }
            if (CFEqual(a3, CFSTR("NaturalSize")))
            {
              LODWORD(valuePtr.start.value) = 0;
              LODWORD(cf.start.value) = 0;
              MovieTrackGetCleanApertureDimensions(v15, (float *)&valuePtr, (float *)&cf);
              if (v49)
                goto LABEL_74;
              goto LABEL_73;
            }
            if (CFEqual(a3, CFSTR("PreferredTransform")))
              goto LABEL_76;
            if (CFEqual(a3, CFSTR("NominalFrameRate")))
            {
              LODWORD(valuePtr.start.value) = 0;
              TrackTimeInfo = MovieTrackComputeNominalFrameRate(*(_QWORD **)(v12 + 24), v15, (float *)&valuePtr);
              if ((_DWORD)TrackTimeInfo)
                goto LABEL_21;
              v26 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
              v27 = kCFNumberFloat32Type;
LABEL_31:
              DictionaryRepresentation = CFNumberCreate(v26, v27, &valuePtr);
              goto LABEL_20;
            }
            if (CFEqual(a3, CFSTR("CommonMetadata")))
            {
              valuePtr.start.value = 0;
              cf.start.value = 0;
              v82.value = 0;
              v32 = MovieFormatReaderCreateWithMovieInformation(*(const void **)(v12 + 24), 1, (CFTypeRef *)&cf);
              if (!(_DWORD)v32)
              {
                TrackTimeInfo = cf.start.value;
                if (!cf.start.value)
                  goto LABEL_122;
                v50 = v17[1];
                v51 = *(uint64_t (**)(uint64_t, uint64_t, CMTime *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 56);
                if (v51)
                {
                  TrackTimeInfo = v51(TrackTimeInfo, v50, &v82, 0);
                  if (!(_DWORD)TrackTimeInfo && v82.value)
                  {
                    FigMetadataCopyTrackCommonMetadata(v82.value, (const __CFAllocator *)*MEMORY[0x1E0C9AE00], (__CFArray **)&valuePtr);
                    CFRelease((CFTypeRef)v82.value);
                    TrackTimeInfo = 0;
                  }
                }
                else
                {
                  TrackTimeInfo = 4294954514;
                }
                CFRelease((CFTypeRef)cf.start.value);
                DictionaryRepresentation = (const void *)valuePtr.start.value;
                if (!valuePtr.start.value)
LABEL_122:
                  DictionaryRepresentation = CFArrayCreateMutable(a4, 0, MEMORY[0x1E0C9B378]);
                goto LABEL_20;
              }
LABEL_42:
              TrackTimeInfo = v32;
              goto LABEL_21;
            }
            if (CFEqual(a3, CFSTR("AvailableMetadataFormats")))
            {
              Mutable = CFArrayCreateMutable(a4, 0, MEMORY[0x1E0C9B378]);
              v53 = copyArrayOfKnownMetadataFormats(a4);
              if (v53)
              {
                v54 = v53;
                v55 = CFArrayGetCount(v53);
                if (v55 >= 1)
                {
                  v56 = v55;
                  for (i = 0; i != v56; ++i)
                  {
                    v58 = CFArrayGetValueAtIndex(v54, i);
                    if (v58)
                    {
                      v59 = v58;
                      if (MovieTrackMetadataFormatIsAvailable(*(_QWORD *)(v12 + 24), *((_QWORD **)v17 + 2), v58))CFArrayAppendValue(Mutable, v59);
                    }
                  }
                }
                CFRelease(v54);
              }
              TrackTimeInfo = 0;
              *a5 = Mutable;
              goto LABEL_21;
            }
            if (CFEqual(a3, CFSTR("Metadata")))
            {
              theArray = CFArrayCreateMutable(a4, 0, MEMORY[0x1E0C9B378]);
              v60 = copyArrayOfKnownMetadataFormats(a4);
              if (v60)
              {
                v61 = v60;
                v62 = CFArrayGetCount(v60);
                if (v62 >= 1)
                {
                  v63 = v62;
                  for (j = 0; j != v63; ++j)
                  {
                    v65 = CFArrayGetValueAtIndex(v61, j);
                    if (v65)
                    {
                      v66 = v65;
                      TrackMetadataItemArray = MovieTrackGetTrackMetadataItemArray(*((_QWORD *)v17 + 2), v65);
                      if (TrackMetadataItemArray)
                      {
                        v68 = TrackMetadataItemArray;
                        v69 = CFDictionaryCreateMutable(a4, 0, 0, 0);
                        if (v69)
                        {
                          v70 = v69;
                          CFDictionaryAddValue(v69, v66, v68);
                          CFArrayAppendValue(theArray, v70);
                          CFRelease(v70);
                        }
                      }
                    }
                  }
                }
                CFRelease(v61);
              }
              TrackTimeInfo = 0;
              value = (CMTimeValue)theArray;
              goto LABEL_95;
            }
            if (CFEqual(a3, CFSTR("MediaPresentationTimeRange")))
            {
              v82 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
              duration = v82;
              TrackTimeInfo = MovieTrackGetDisplayTimeRange(*((_QWORD **)v17 + 1), v15, &v82, &duration);
              if ((_DWORD)TrackTimeInfo)
                goto LABEL_21;
              memset(&valuePtr, 0, sizeof(valuePtr));
              cf.start = v82;
              end = duration;
              CMTimeRangeFromTimeToTime(&valuePtr, &cf.start, &end);
              v71 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
              cf = valuePtr;
              DictionaryRepresentation = CMTimeRangeCopyAsDictionary(&cf, v71);
              goto LABEL_20;
            }
            if (CFEqual(a3, CFSTR("MediaPresentationEndTime")))
            {
              *(_OWORD *)&valuePtr.start.value = *MEMORY[0x1E0CA2E18];
              valuePtr.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
              DisplayTimeRange = MovieTrackGetDisplayTimeRange(*((_QWORD **)v17 + 1), v15, 0, &valuePtr.start);
              goto LABEL_139;
            }
            if (CFEqual(a3, CFSTR("MediaDecodeTimeRange")))
            {
              memset(&v82, 0, sizeof(v82));
              MovieTrackGetMediaDuration(v15, (uint64_t)&v82);
              memset(&valuePtr, 0, sizeof(valuePtr));
              *(_OWORD *)&cf.start.value = *MEMORY[0x1E0CA2E68];
              cf.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
              duration = v82;
              CMTimeRangeMake(&valuePtr, &cf.start, &duration);
              v73 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
              cf = valuePtr;
              DictionaryRepresentation = CMTimeRangeCopyAsDictionary(&cf, v73);
              goto LABEL_19;
            }
            if (CFEqual(a3, CFSTR("IsExcludedFromAutoselection")))
            {
              IsEnabled = MovieTrackIsExcludedFromAutoSelection(v15);
LABEL_62:
              v37 = (const void **)MEMORY[0x1E0C9AE50];
              if (!IsEnabled)
                v37 = (const void **)MEMORY[0x1E0C9AE40];
              goto LABEL_64;
            }
            if (CFEqual(a3, CFSTR("CleanApertureDimensions")))
            {
              LODWORD(valuePtr.start.value) = 0;
              LODWORD(cf.start.value) = 0;
              MovieTrackGetCleanApertureDimensions(v15, (float *)&valuePtr, (float *)&cf);
              if (v74)
                goto LABEL_74;
            }
            else if (CFEqual(a3, CFSTR("ProductionApertureDimensions")))
            {
              LODWORD(valuePtr.start.value) = 0;
              LODWORD(cf.start.value) = 0;
              MovieTrackGetProductionApertureDimensions(v15, (float *)&valuePtr, (float *)&cf);
              if (v75)
                goto LABEL_74;
            }
            else
            {
              if (!CFEqual(a3, CFSTR("EncodedPixelsDimensions")))
              {
                if (CFEqual(a3, CFSTR("Modified")))
                {
                  v37 = (const void **)MEMORY[0x1E0C9AE50];
                  if (!*((_BYTE *)v17 + 56))
                    v37 = (const void **)MEMORY[0x1E0C9AE40];
                  goto LABEL_64;
                }
                if (CFEqual(a3, CFSTR("PreferredChunkSize")))
                {
                  LODWORD(valuePtr.start.value) = 0;
                  BasicInfo = MediaDataChunkWriterTrackGetPreferredChunkSize(*((_QWORD *)v17 + 3), *((_QWORD *)v17 + 4), &valuePtr);
                  goto LABEL_29;
                }
                if (!CFEqual(a3, CFSTR("PreferredChunkDuration")))
                {
                  if (!CFEqual(a3, CFSTR("PreferredChunkAlignment")))
                  {
                    TrackTimeInfo = 4294950876;
                    goto LABEL_21;
                  }
                  LODWORD(valuePtr.start.value) = 0;
                  BasicInfo = MediaDataChunkWriterTrackGetPreferredChunkAlignment(*((_QWORD *)v17 + 3), *((_QWORD *)v17 + 4), &valuePtr);
                  goto LABEL_29;
                }
                *(_OWORD *)&valuePtr.start.value = *MEMORY[0x1E0CA2E18];
                valuePtr.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
                DisplayTimeRange = MediaDataChunkWriterTrackGetPreferredChunkDuration(*((_QWORD *)v17 + 3), *((_QWORD *)v17 + 4), (uint64_t)&valuePtr);
LABEL_139:
                TrackTimeInfo = DisplayTimeRange;
                if ((_DWORD)DisplayTimeRange)
                  goto LABEL_21;
                *(_OWORD *)&cf.start.value = *(_OWORD *)&valuePtr.start.value;
                cf.start.epoch = valuePtr.start.epoch;
                DictionaryRepresentation = CMTimeCopyAsDictionary(&cf.start, a4);
                goto LABEL_20;
              }
              LODWORD(valuePtr.start.value) = 0;
              LODWORD(cf.start.value) = 0;
              MovieTrackGetEncodedPixelsDimensions(v15, (float *)&valuePtr, (float *)&cf);
              if (v76)
                goto LABEL_74;
            }
            TrackTimeInfo = 4294954513;
            goto LABEL_21;
          }
        }
      }
    }
  }
  return TrackTimeInfo;
}

uint64_t MutableMovie_SetTrackProperty(uint64_t a1, int a2, const void *a3, const __CFString *a4)
{
  uint64_t v4;
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t v11;
  uint64_t TrackForTrackID;
  uint64_t v13;
  _DWORD *Storage;
  _DWORD *v15;
  CFTypeID v16;
  uint64_t v17;
  CFTypeID v18;
  CFTypeID v19;
  Boolean Value;
  CFTypeID v21;
  Boolean v22;
  CFTypeID v23;
  float v24;
  float v25;
  uint64_t v26;
  CFTypeID v27;
  float v28;
  float v29;
  CFTypeID v30;
  float v31;
  float v32;
  CFTypeID v33;
  float v34;
  float v35;
  CFTypeID v36;
  BOOL v37;
  char v38;
  CFTypeID v39;
  CFTypeID v40;
  uint64_t v41;
  CFTypeID v42;
  CFTypeID v43;
  CFTypeID v44;
  const void *v45;
  CFTypeID v46;
  CFTypeID v47;
  CFIndex i;
  void *ValueAtIndex;
  void *v50;
  CFArrayRef v51;
  CFArrayRef v52;
  CFIndex j;
  void *v54;
  void *v55;
  CFMutableArrayRef Mutable;
  __CFArray *v57;
  CFIndex v58;
  CFIndex v59;
  CFIndex k;
  const __CFDictionary *v61;
  const __CFDictionary *v62;
  CFTypeID TypeID;
  const __CFArray *v64;
  const __CFArray *v65;
  CFTypeID v67;
  CFTypeID v68;
  CFTypeID v69;
  CFTypeID v70;
  uint64_t v71;
  uint64_t v72;
  CFTypeID v73;
  CFTypeID v74;
  CFTypeID v75;
  const __CFAllocator *allocator;
  CFIndex Count;
  __CFArray *theArray;
  CMTime size;
  float v80;
  unsigned __int128 valuePtr;
  __int128 v82;
  int v83;
  CFRange v84;

  v4 = 4294950861;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        DerivedStorage = CMBaseObjectGetDerivedStorage();
        if (DerivedStorage)
        {
          v10 = DerivedStorage;
          if (*(_BYTE *)DerivedStorage)
          {
            return 4294950869;
          }
          else
          {
            v11 = MovieInformationLockForWrite(*(_QWORD *)(DerivedStorage + 24));
            if (!(_DWORD)v11)
            {
              TrackForTrackID = MovieInformationFindTrackForTrackID(*(_QWORD *)(v10 + 24), a2);
              if (!TrackForTrackID)
                goto LABEL_120;
              v13 = TrackForTrackID;
              Storage = MutableMovieTrackGetStorage(a1, a2);
              if (Storage)
              {
                v15 = Storage;
                if (CFEqual(a3, CFSTR("Volume")))
                {
                  if (a4)
                  {
                    v16 = CFGetTypeID(a4);
                    if (v16 == CFNumberGetTypeID())
                    {
                      LODWORD(valuePtr) = 1065353216;
                      CFNumberGetValue((CFNumberRef)a4, kCFNumberFloat32Type, &valuePtr);
                      v17 = MovieTrackSetVolume(v13, *(float *)&valuePtr);
LABEL_25:
                      v4 = v17;
LABEL_74:
                      v38 = 1;
LABEL_75:
                      *((_BYTE *)v15 + 56) = v38;
                      goto LABEL_120;
                    }
                  }
                  goto LABEL_119;
                }
                if (CFEqual(a3, CFSTR("Layer")))
                {
                  if (a4)
                  {
                    v18 = CFGetTypeID(a4);
                    if (v18 == CFNumberGetTypeID())
                    {
                      LOWORD(valuePtr) = 0;
                      CFNumberGetValue((CFNumberRef)a4, kCFNumberSInt16Type, &valuePtr);
                      v17 = MovieTrackSetLayer(v13, valuePtr);
                      goto LABEL_25;
                    }
                  }
LABEL_119:
                  v4 = 0;
                  goto LABEL_120;
                }
                if (CFEqual(a3, CFSTR("TrackEnabled")))
                {
                  if (a4)
                  {
                    v19 = CFGetTypeID(a4);
                    if (v19 == CFBooleanGetTypeID())
                    {
                      Value = CFBooleanGetValue((CFBooleanRef)a4);
                      v17 = MovieTrackSetEnabled(v13, Value);
                      goto LABEL_25;
                    }
                  }
                  goto LABEL_73;
                }
                if (CFEqual(a3, CFSTR("IsExcludedFromAutoselection")))
                {
                  if (a4)
                  {
                    v21 = CFGetTypeID(a4);
                    if (v21 == CFBooleanGetTypeID())
                    {
                      v22 = CFBooleanGetValue((CFBooleanRef)a4);
                      v17 = MovieTrackSetExcludeFromAutoSelection(v13, v22);
                      goto LABEL_25;
                    }
                  }
                  goto LABEL_73;
                }
                if (CFEqual(a3, CFSTR("TrackDimensions")))
                {
                  size.value = 0;
                  *(_QWORD *)&size.timescale = 0;
                  if (!a4)
                    goto LABEL_119;
                  v23 = CFGetTypeID(a4);
                  if (v23 != CFDictionaryGetTypeID()
                    || !CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)a4, (CGSize *)&size))
                  {
                    goto LABEL_119;
                  }
                  v83 = 0;
                  valuePtr = 0u;
                  v82 = 0u;
                  MovieTrackGetSpatialInformation(v13, 0, 0, (uint64_t)&valuePtr);
                  v24 = *(double *)&size.value;
                  v25 = *(double *)&size.timescale;
                  goto LABEL_31;
                }
                if (CFEqual(a3, CFSTR("CleanApertureDimensions")))
                {
                  valuePtr = 0uLL;
                  if (!a4)
                    goto LABEL_119;
                  v27 = CFGetTypeID(a4);
                  if (v27 != CFDictionaryGetTypeID()
                    || !CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)a4, (CGSize *)&valuePtr))
                  {
                    goto LABEL_119;
                  }
                  v28 = *(double *)&valuePtr;
                  v29 = *((double *)&valuePtr + 1);
                  v26 = MovieTrackSetCleanApertureDimensions(v13, v28, v29);
                  goto LABEL_54;
                }
                if (CFEqual(a3, CFSTR("ProductionApertureDimensions")))
                {
                  valuePtr = 0uLL;
                  if (!a4)
                    goto LABEL_119;
                  v30 = CFGetTypeID(a4);
                  if (v30 != CFDictionaryGetTypeID()
                    || !CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)a4, (CGSize *)&valuePtr))
                  {
                    goto LABEL_119;
                  }
                  v31 = *(double *)&valuePtr;
                  v32 = *((double *)&valuePtr + 1);
                  v26 = MovieTrackSetProductionApertureDimensions(v13, v31, v32);
                  goto LABEL_54;
                }
                if (CFEqual(a3, CFSTR("EncodedPixelsDimensions")))
                {
                  valuePtr = 0uLL;
                  if (!a4)
                    goto LABEL_119;
                  v33 = CFGetTypeID(a4);
                  if (v33 != CFDictionaryGetTypeID()
                    || !CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)a4, (CGSize *)&valuePtr))
                  {
                    goto LABEL_119;
                  }
                  v34 = *(double *)&valuePtr;
                  v35 = *((double *)&valuePtr + 1);
                  v26 = MovieTrackSetEncodedPixelsDimensions(v13, v34, v35);
                  goto LABEL_54;
                }
                if (CFEqual(a3, CFSTR("AlternateGroupID")))
                {
                  if (!a4)
                    goto LABEL_119;
                  v36 = CFGetTypeID(a4);
                  if (v36 != CFNumberGetTypeID())
                    goto LABEL_119;
                  LOWORD(valuePtr) = 0;
                  CFNumberGetValue((CFNumberRef)a4, kCFNumberSInt16Type, &valuePtr);
                  v26 = MovieTrackSetAlternateGroupID(v13, valuePtr);
                  goto LABEL_54;
                }
                if (CFEqual(a3, CFSTR("DefaultAlternateGroupID")))
                {
                  if (!a4)
                    goto LABEL_119;
                  v39 = CFGetTypeID(a4);
                  if (v39 != CFNumberGetTypeID())
                    goto LABEL_119;
                  LOWORD(valuePtr) = 0;
                  CFNumberGetValue((CFNumberRef)a4, kCFNumberSInt16Type, &valuePtr);
                  v4 = MovieTrackSetDefaultAlternateGroupID(v13, valuePtr);
                  MovieTrackEvaluateAlternateTrackGroupAssignment(v13);
                  v37 = (_DWORD)v4 == 0;
LABEL_55:
                  v38 = v37;
                  goto LABEL_75;
                }
                if (CFEqual(a3, CFSTR("ProvisionalAlternateGroupID")))
                {
                  if (a4)
                  {
                    v40 = CFGetTypeID(a4);
                    if (v40 != CFNumberGetTypeID())
                    {
LABEL_72:
                      MovieTrackEvaluateAlternateTrackGroupAssignment(v13);
                      goto LABEL_73;
                    }
                    LOWORD(valuePtr) = 0;
                    CFNumberGetValue((CFNumberRef)a4, kCFNumberSInt16Type, &valuePtr);
                    v41 = MovieTrackSetProvisionalAlternateGroupID(v13, valuePtr);
                  }
                  else
                  {
                    v41 = MovieTrackClearProvisionalAlternateGroupID(v13);
                  }
                  v4 = v41;
                  if (!(_DWORD)v41)
                    goto LABEL_72;
LABEL_120:
                  MovieInformationUnlockForWrite(*(_QWORD *)(v10 + 24));
                  return v4;
                }
                if (CFEqual(a3, CFSTR("LanguageCode")))
                {
                  if (!a4)
                    goto LABEL_119;
                  v42 = CFGetTypeID(a4);
                  if (v42 != CFStringGetTypeID())
                    goto LABEL_119;
                  v26 = MovieTrackSetLanguageCodeString(v13, a4);
                  goto LABEL_54;
                }
                if (CFEqual(a3, CFSTR("ExtendedLanguageTag")))
                {
                  if (!a4)
                    goto LABEL_119;
                  v43 = CFGetTypeID(a4);
                  if (v43 != CFStringGetTypeID())
                    goto LABEL_119;
                  v26 = MovieTrackSetExtendedLanguageTagString(v13, a4);
                  goto LABEL_54;
                }
                if (CFEqual(a3, CFSTR("MediaDataStorageURL")))
                {
                  if (a4)
                  {
                    v44 = CFGetTypeID(a4);
                    if (v44 != CFURLGetTypeID())
                      goto LABEL_119;
                    v45 = (const void *)*((_QWORD *)v15 + 5);
                    *((_QWORD *)v15 + 5) = a4;
                    goto LABEL_88;
                  }
                  v45 = (const void *)*((_QWORD *)v15 + 5);
                  *((_QWORD *)v15 + 5) = 0;
                  goto LABEL_117;
                }
                if (CFEqual(a3, CFSTR("SampleReferenceBaseURL")))
                {
                  if (a4)
                  {
                    v46 = CFGetTypeID(a4);
                    if (v46 != CFURLGetTypeID())
                      goto LABEL_119;
                    v45 = (const void *)*((_QWORD *)v15 + 6);
                    *((_QWORD *)v15 + 6) = a4;
LABEL_88:
                    CFRetain(a4);
                    goto LABEL_117;
                  }
                  v45 = (const void *)*((_QWORD *)v15 + 6);
                  *((_QWORD *)v15 + 6) = 0;
LABEL_117:
                  if (v45)
                    CFRelease(v45);
                  goto LABEL_119;
                }
                if (CFEqual(a3, CFSTR("Metadata")))
                {
                  if (!a4 || (v47 = CFGetTypeID(a4), v47 == CFArrayGetTypeID()))
                  {
                    allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
                    theArray = copyArrayOfKnownMetadataFormats((const __CFAllocator *)*MEMORY[0x1E0C9AE00]);
                    if (theArray)
                    {
                      Count = CFArrayGetCount(theArray);
                      if (Count >= 1)
                      {
                        for (i = 0; i != Count; ++i)
                        {
                          ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, i);
                          if (ValueAtIndex)
                          {
                            v50 = ValueAtIndex;
                            v51 = CFArrayCreate(allocator, 0, 0, 0);
                            if (v51)
                            {
                              v52 = v51;
                              MovieTrackSetTrackMetadataItemArray(*(_QWORD *)(v10 + 24), v13, v50, v51);
                              CFRelease(v52);
                            }
                          }
                        }
                        if (a4)
                        {
                          for (j = 0; j != Count; ++j)
                          {
                            v54 = (void *)CFArrayGetValueAtIndex(theArray, j);
                            if (v54)
                            {
                              v55 = v54;
                              Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
                              if (Mutable)
                              {
                                v57 = Mutable;
                                v58 = CFArrayGetCount((CFArrayRef)a4);
                                if (v58 >= 1)
                                {
                                  v59 = v58;
                                  for (k = 0; k != v59; ++k)
                                  {
                                    v61 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)a4, k);
                                    if (v61)
                                    {
                                      v62 = v61;
                                      TypeID = CFDictionaryGetTypeID();
                                      if (TypeID == CFGetTypeID(v62))
                                      {
                                        CFDictionaryGetValue(v62, CFSTR("format"));
                                        v64 = (const __CFArray *)CFDictionaryGetValue(v62, CFSTR("items"));
                                        if (v64)
                                        {
                                          v65 = v64;
                                          if (FigCFEqual())
                                          {
                                            v84.length = CFArrayGetCount(v65);
                                            v84.location = 0;
                                            CFArrayAppendArray(v57, v65, v84);
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                MovieTrackSetTrackMetadataItemArray(*(_QWORD *)(v10 + 24), v13, v55, v57);
                                CFRelease(v57);
                              }
                            }
                          }
                        }
                      }
                      CFRelease(theArray);
                    }
                    v4 = 0;
                    *(_BYTE *)(v10 + 1) = 1;
                    goto LABEL_120;
                  }
                  goto LABEL_119;
                }
                if (CFEqual(a3, CFSTR("TrackMatrix")))
                {
                  if (!a4)
                    goto LABEL_119;
                  v67 = CFArrayGetTypeID();
                  if (v67 != CFGetTypeID(a4))
                    goto LABEL_119;
                  v83 = 0;
                  valuePtr = 0u;
                  v82 = 0u;
                  v4 = CFArrayToFigMatrix((const __CFArray *)a4, (uint64_t)&valuePtr);
                  if ((_DWORD)v4)
                    goto LABEL_120;
                  LODWORD(size.value) = 0;
                  v80 = 0.0;
                  MovieTrackGetSpatialInformation(v13, &size, &v80, 0);
                  v24 = *(float *)&size.value;
                  v25 = v80;
LABEL_31:
                  v26 = MovieTrackSetSpatialInformation(v13, (__int128 *)&valuePtr, v24, v25);
LABEL_54:
                  v4 = v26;
                  v37 = (_DWORD)v26 == 0;
                  goto LABEL_55;
                }
                if (CFEqual(a3, CFSTR("Modified")))
                {
                  if (!a4)
                    goto LABEL_119;
                  v68 = CFBooleanGetTypeID();
                  if (v68 != CFGetTypeID(a4))
                    goto LABEL_119;
                  if ((const __CFString *)*MEMORY[0x1E0C9AE50] != a4)
                  {
                    v4 = 0;
                    *((_BYTE *)v15 + 56) = 0;
                    goto LABEL_120;
                  }
LABEL_73:
                  v4 = 0;
                  goto LABEL_74;
                }
                if (CFEqual(a3, CFSTR("PreferredChunkSize")))
                {
                  if (!a4)
                    goto LABEL_119;
                  v69 = CFNumberGetTypeID();
                  if (v69 != CFGetTypeID(a4))
                    goto LABEL_119;
                  LODWORD(valuePtr) = 0x100000;
                  CFNumberGetValue((CFNumberRef)a4, kCFNumberSInt32Type, &valuePtr);
                  v26 = MediaDataChunkWriterTrackSetPreferredChunkSize(*((_QWORD *)v15 + 3), *((_QWORD *)v15 + 4), valuePtr);
                  goto LABEL_54;
                }
                if (CFEqual(a3, CFSTR("PreferredChunkDuration")))
                {
                  if (!a4)
                    goto LABEL_119;
                  v70 = CFDictionaryGetTypeID();
                  if (v70 != CFGetTypeID(a4))
                    goto LABEL_119;
                  valuePtr = 0uLL;
                  *(_QWORD *)&v82 = 0;
                  CMTimeMakeFromDictionary((CMTime *)&valuePtr, (CFDictionaryRef)a4);
                  v71 = *((_QWORD *)v15 + 3);
                  v72 = *((_QWORD *)v15 + 4);
                  *(_OWORD *)&size.value = valuePtr;
                  size.epoch = v82;
                  v26 = MediaDataChunkWriterTrackSetPreferredChunkDuration(v71, v72, &size);
                  goto LABEL_54;
                }
                if (CFEqual(a3, CFSTR("PreferredChunkAlignment")))
                {
                  if (!a4)
                    goto LABEL_119;
                  v73 = CFNumberGetTypeID();
                  if (v73 != CFGetTypeID(a4))
                    goto LABEL_119;
                  LODWORD(valuePtr) = 0;
                  CFNumberGetValue((CFNumberRef)a4, kCFNumberSInt32Type, &valuePtr);
                  v26 = MediaDataChunkWriterTrackSetPreferredChunkAlignment(*((_QWORD *)v15 + 3), *((_QWORD *)v15 + 4), valuePtr);
                  goto LABEL_54;
                }
                if (CFEqual(a3, CFSTR("FormatDescriptionArray")))
                {
                  if (a4)
                  {
                    v74 = CFArrayGetTypeID();
                    if (v74 == CFGetTypeID(a4))
                    {
                      v4 = MovieTrackReplaceFormatDescriptionArray(v13, (CFArrayRef)a4);
                      MovieTrackEvaluateAlternateTrackGroupAssignment(v13);
                      goto LABEL_74;
                    }
                  }
                  goto LABEL_119;
                }
                if (CFEqual(a3, CFSTR("MediaTimeScale")))
                {
                  if (!a4)
                    goto LABEL_119;
                  v75 = CFNumberGetTypeID();
                  if (v75 != CFGetTypeID(a4))
                    goto LABEL_119;
                  LODWORD(valuePtr) = 0;
                  CFNumberGetValue((CFNumberRef)a4, kCFNumberSInt32Type, &valuePtr);
                  MovieTrackSetMediaTimeScale(v13, valuePtr);
                  goto LABEL_73;
                }
                if (!CFEqual(CFSTR("MediaType"), a3)
                  && !CFEqual(CFSTR("MediaSubType"), a3)
                  && !CFEqual(CFSTR("IsSelfContained"), a3)
                  && !CFEqual(CFSTR("TrackProtectedStatus"), a3)
                  && !CFEqual(CFSTR("CreationTime"), a3)
                  && !CFEqual(CFSTR("AvailableMetadataFormats"), a3)
                  && !CFEqual(CFSTR("MediaPresentationTimeRange"), a3)
                  && !CFEqual(CFSTR("MediaPresentationEndTime"), a3)
                  && !CFEqual(CFSTR("MediaDecodeTimeRange"), a3)
                  && !CFEqual(CFSTR("ModificationTime"), a3))
                {
                  v4 = 4294950876;
                  goto LABEL_120;
                }
              }
              v4 = FigSignalErrorAt();
              goto LABEL_120;
            }
            return v11;
          }
        }
      }
    }
  }
  return v4;
}

uint64_t MutableMovie_AppendSampleBuffer(uint64_t a1, int a2, opaqueCMSampleBuffer *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *DerivedStorage;
  uint64_t v14;
  _DWORD *Storage;
  uint64_t v16;
  const opaqueCMFormatDescription *FormatDescription;
  CMMediaType MediaType;
  int v19;
  uint64_t v20;
  CFTypeRef v21;
  const void *v22;
  CFAllocatorRef *v23;
  const __CFAllocator *v24;
  _OWORD *v25;
  _OWORD *v26;
  int v28;
  uint64_t v29;
  uint64_t v30;
  CFIndex v31;
  CFAllocatorRef *v32;
  uint64_t *ValueAtIndex;
  uint64_t *v34;
  size_t TotalSampleSize;
  uint64_t v36;
  __CFArray *Mutable;
  const __CFArray *v38;
  __int128 v40;
  _QWORD refcon[4];
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  CFIndex v48;
  char v49;
  const void *v50;

  v50 = 0;
  v49 = 0;
  v48 = -1;
  v7 = *MEMORY[0x1E0CA2E18];
  v46 = v7;
  v8 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v47 = v8;
  v44 = v7;
  v45 = v8;
  v43 = 0;
  v9 = 4294950861;
  if (!a1)
    goto LABEL_54;
  if (!a2)
    goto LABEL_54;
  if (!a3)
    goto LABEL_54;
  v40 = v7;
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    goto LABEL_54;
  v14 = (uint64_t)DerivedStorage;
  if (*DerivedStorage)
  {
    v9 = 4294950869;
    goto LABEL_54;
  }
  Storage = MutableMovieTrackGetStorage(a1, a2);
  if (!Storage)
    goto LABEL_61;
  v16 = (uint64_t)Storage;
  *((_OWORD *)Storage + 6) = v40;
  *((_QWORD *)Storage + 14) = v8;
  *(_OWORD *)(Storage + 18) = v40;
  *((_QWORD *)Storage + 11) = v8;
  FormatDescription = CMSampleBufferGetFormatDescription(a3);
  if (!FormatDescription
    || (MediaType = CMFormatDescriptionGetMediaType(FormatDescription), MediaType != *(_DWORD *)v16))
  {
    v9 = 4294950866;
    goto LABEL_54;
  }
  v19 = MediaType;
  if (*(_DWORD *)(v16 + 120) != 1)
  {
    v20 = *(_QWORD *)(v16 + 16);
    if (v20 && MovieTrackGetTrackDurationValue(v20))
      MovieTrackExtendMediaDecodeDurationToDisplayEndTime(*(_QWORD **)(v16 + 8), *(_QWORD *)(v16 + 16), 0);
    *(_DWORD *)(v16 + 120) = 1;
  }
  v21 = CMGetAttachment(a3, (CFStringRef)*MEMORY[0x1E0CA26F8], 0);
  v22 = v21;
  if (!v21)
  {
    v22 = *(const void **)(v16 + 40);
    if (!v22)
    {
      v22 = *(const void **)(v14 + 40);
      if (!v22)
      {
        v9 = 4294950873;
        goto LABEL_54;
      }
    }
  }
  v23 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (!*(_QWORD *)(v16 + 128))
  {
    v24 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v25 = CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 160, 0);
    if (!v25)
      goto LABEL_61;
    v26 = v25;
    if (v19 == 1751216244 || v19 == 1936684398)
      v28 = 1;
    else
      v28 = 2;
    v29 = MediaSampleTimingGeneratorCreate(v24, v19, v28, &v43);
    if ((_DWORD)v29)
      goto LABEL_62;
    v26[8] = 0u;
    v26[9] = 0u;
    v26[6] = 0u;
    v26[7] = 0u;
    v26[4] = 0u;
    v26[5] = 0u;
    v26[2] = 0u;
    v26[3] = 0u;
    *v26 = 0u;
    v26[1] = 0u;
    *((_QWORD *)v26 + 7) = v43;
    *(_DWORD *)v26 = v19;
    *(_QWORD *)(v16 + 128) = v26;
    v29 = MovieInformationLockForWrite(*(_QWORD *)(v14 + 24));
    if ((_DWORD)v29)
      goto LABEL_62;
    v30 = setMediaTimeScaleIfNeeded(v16, a3);
    if ((_DWORD)v30)
    {
      v9 = v30;
      MovieInformationUnlockForWrite(*(_QWORD *)(v14 + 24));
      goto LABEL_54;
    }
    if (v19 == 1668047728)
    {
      v9 = setClosedCaptionTrackDimensionsIfNeeded(*(_QWORD *)(v14 + 24));
      v23 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    }
    else
    {
      v23 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
      if (v19 != 1986618469)
      {
        MovieInformationUnlockForWrite(*(_QWORD *)(v14 + 24));
        if (v21)
          goto LABEL_34;
        goto LABEL_36;
      }
      v9 = setVideoTrackDimensionsIfNeeded(*(_QWORD *)(v16 + 16), *(_QWORD *)(v14 + 16), a3);
    }
    MovieInformationUnlockForWrite(*(_QWORD *)(v14 + 24));
    if ((_DWORD)v9)
      goto LABEL_54;
  }
  if (v21)
  {
LABEL_34:
    v31 = *(_QWORD *)(v16 + 64);
    goto LABEL_42;
  }
LABEL_36:
  getByteStreamForTrackStorageURL(a1, v22, &v49, &v48);
  if (v48 == -1)
  {
    v29 = CMByteStreamCreateForFileURL();
    if ((_DWORD)v29)
      goto LABEL_62;
    v29 = createStreamInfoForByteStream(v50, v14, &v48);
    if ((_DWORD)v29)
      goto LABEL_62;
    if (v50)
    {
      CFRelease(v50);
      v50 = 0;
    }
  }
  v31 = v48;
  *(_QWORD *)(v16 + 64) = v48;
LABEL_42:
  if (v31 == -1)
  {
    v36 = 0;
  }
  else
  {
    v32 = v23;
    ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v14 + 64), v31);
    if (!ValueAtIndex)
      goto LABEL_61;
    v34 = ValueAtIndex;
    TotalSampleSize = CMSampleBufferGetTotalSampleSize(a3);
    if (!TotalSampleSize)
    {
      v9 = 4294950861;
      goto LABEL_54;
    }
    writeMdatHeaderIfNecessary((uint64_t)v34, TotalSampleSize, 0);
    v36 = *v34;
    v23 = v32;
  }
  if (v19 == 1936684398)
  {
    v29 = addSampleBufferToTrack_0(v16, v22, v36, 0, a3);
    if ((_DWORD)v29)
      goto LABEL_62;
  }
  else
  {
    refcon[0] = v16;
    refcon[1] = v22;
    refcon[2] = v36;
    refcon[3] = 0;
    CMSampleBufferCallForEachSample(a3, (OSStatus (__cdecl *)(CMSampleBufferRef, CMItemCount, void *))addSample, refcon);
  }
  Mutable = CFArrayCreateMutable(*v23, 0, 0);
  if (!Mutable)
  {
LABEL_61:
    v29 = FigSignalErrorAt();
LABEL_62:
    v9 = v29;
    goto LABEL_54;
  }
  v38 = Mutable;
  CFArrayAppendValue(Mutable, (const void *)v16);
  v9 = writeActualMdatLengthsToStorages(v14, v38);
  CFRelease(v38);
  if (!(_DWORD)v9)
  {
    v46 = *(_OWORD *)(v16 + 96);
    v47 = *(_QWORD *)(v16 + 112);
    v44 = *(_OWORD *)(v16 + 72);
    v45 = *(_QWORD *)(v16 + 88);
  }
LABEL_54:
  if (a5)
  {
    *(_OWORD *)a5 = v46;
    *(_QWORD *)(a5 + 16) = v47;
  }
  if (a6)
  {
    *(_OWORD *)a6 = v44;
    *(_QWORD *)(a6 + 16) = v45;
  }
  if (v50)
    CFRelease(v50);
  return v9;
}

uint64_t MutableMovie_AppendMediaData(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v7;
  uint64_t DerivedStorage;
  uint64_t v13;
  uint64_t ByteStreamForTrackStorageURL;
  uint64_t TrackForTrackID;
  _DWORD *Storage;
  _DWORD *v17;
  CFIndex v18;
  CFAllocatorRef *v19;
  const void *v20;
  _QWORD *ValueAtIndex;
  __CFArray *Mutable;
  const __CFArray *v23;
  CFIndex idx;
  uint64_t v26;
  CFTypeRef cf;

  v26 = 0;
  cf = 0;
  v7 = 4294950861;
  if (!a1)
    goto LABEL_29;
  if (!a2)
    goto LABEL_29;
  if (!a3)
    goto LABEL_29;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    goto LABEL_29;
  v13 = DerivedStorage;
  if (*(_BYTE *)DerivedStorage)
  {
    v7 = 4294950869;
    goto LABEL_29;
  }
  ByteStreamForTrackStorageURL = MovieInformationLockForRead(*(_QWORD *)(DerivedStorage + 24));
  if ((_DWORD)ByteStreamForTrackStorageURL)
    goto LABEL_33;
  TrackForTrackID = MovieInformationFindTrackForTrackID(*(_QWORD *)(v13 + 24), a2);
  MovieInformationUnlockForRead(*(_QWORD *)(v13 + 24));
  if (!TrackForTrackID)
  {
    v7 = 4294950861;
    goto LABEL_29;
  }
  Storage = MutableMovieTrackGetStorage(a1, a2);
  if (!Storage)
  {
LABEL_32:
    ByteStreamForTrackStorageURL = FigSignalErrorAt();
    goto LABEL_33;
  }
  v17 = Storage;
  v18 = *((_QWORD *)Storage + 8);
  v19 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (v18 != -1)
    goto LABEL_20;
  v20 = (const void *)*((_QWORD *)Storage + 5);
  idx = -1;
  if (!v20)
  {
    v20 = *(const void **)(v13 + 40);
    if (!v20)
    {
      v7 = 4294950873;
      goto LABEL_29;
    }
  }
  ByteStreamForTrackStorageURL = getByteStreamForTrackStorageURL(a1, v20, 0, &idx);
  if ((_DWORD)ByteStreamForTrackStorageURL)
  {
LABEL_33:
    v7 = ByteStreamForTrackStorageURL;
    goto LABEL_29;
  }
  v18 = idx;
  if (idx != -1)
  {
    *((_QWORD *)v17 + 8) = idx;
    goto LABEL_20;
  }
  ByteStreamForTrackStorageURL = CMByteStreamCreateForFileURL();
  if ((_DWORD)ByteStreamForTrackStorageURL)
    goto LABEL_33;
  ByteStreamForTrackStorageURL = createStreamInfoForByteStream(cf, v13, &idx);
  if ((_DWORD)ByteStreamForTrackStorageURL)
    goto LABEL_33;
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  v18 = idx;
  *((_QWORD *)v17 + 8) = idx;
  if (v18 != -1)
  {
LABEL_20:
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v13 + 64), v18);
    if (ValueAtIndex && *ValueAtIndex)
    {
      ByteStreamForTrackStorageURL = writeMdatHeaderIfNecessary((uint64_t)ValueAtIndex, a5, &v26);
      if ((_DWORD)ByteStreamForTrackStorageURL)
        goto LABEL_33;
      ByteStreamForTrackStorageURL = CMByteStreamWriteBlockBuffer();
      if ((_DWORD)ByteStreamForTrackStorageURL)
        goto LABEL_33;
      Mutable = CFArrayCreateMutable(*v19, 0, 0);
      if (Mutable)
      {
        v23 = Mutable;
        CFArrayAppendValue(Mutable, v17);
        v7 = writeActualMdatLengthsToStorages(v13, v23);
        CFRelease(v23);
        if ((_DWORD)v7)
          goto LABEL_29;
        goto LABEL_26;
      }
    }
    goto LABEL_32;
  }
LABEL_26:
  if (a7)
    *a7 = v26;
  v7 = 0;
  *((_BYTE *)v17 + 56) = 1;
LABEL_29:
  if (cf)
    CFRelease(cf);
  return v7;
}

uint64_t MutableMovie_AppendSampleReferences(uint64_t a1, int a2, const void *a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, unint64_t *a8, CFArrayRef theArray, const void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  unint64_t Count;
  uint64_t result;
  uint64_t DerivedStorage;
  uint64_t v24;
  uint64_t TrackForTrackID;
  _DWORD *Storage;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  unsigned int v35;

  if (theArray)
    Count = CFArrayGetCount(theArray);
  else
    Count = 0;
  result = 4294950861;
  if (!a1 || !a2 || !a3 || a4 < 1 || !a10 || a5 >= 2 && a5 != a4 || a7 >= 2 && a7 != a4 || Count >= 2 && Count != a4)
    return result;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return 4294950861;
  v24 = DerivedStorage;
  if (*(_BYTE *)DerivedStorage)
    return 4294950869;
  result = MovieInformationLockForRead(*(_QWORD *)(DerivedStorage + 24));
  if (!(_DWORD)result)
  {
    TrackForTrackID = MovieInformationFindTrackForTrackID(*(_QWORD *)(v24 + 24), a2);
    MovieInformationUnlockForRead(*(_QWORD *)(v24 + 24));
    if (TrackForTrackID)
    {
      Storage = MutableMovieTrackGetStorage(a1, a2);
      if (!Storage)
        return FigSignalErrorAt();
      v27 = Storage;
      if (Storage[30] != 2)
      {
        v28 = *((_QWORD *)Storage + 2);
        if (v28 && MovieTrackGetTrackDurationValue(v28))
          MovieTrackExtendMediaDecodeDurationToDisplayEndTime(*((_QWORD **)v27 + 1), *((_QWORD *)v27 + 2), 0);
        v27[30] = 2;
      }
      v29 = MEMORY[0x1E0CA2E18];
      v30 = *MEMORY[0x1E0CA2E18];
      *((_OWORD *)v27 + 6) = *MEMORY[0x1E0CA2E18];
      v31 = *(_QWORD *)(v29 + 16);
      *((_QWORD *)v27 + 14) = v31;
      *(_OWORD *)(v27 + 18) = v30;
      *((_QWORD *)v27 + 11) = v31;
      if (!*((_QWORD *)v27 + 3) || !*((_QWORD *)v27 + 4))
        return FigSignalErrorAt();
      v35 = 0;
      result = MovieTrackFindOrAddSampleDescription(TrackForTrackID, a3, a10, &v35);
      if (!(_DWORD)result)
      {
        MovieTrackEvaluateAlternateTrackGroupAssignment(TrackForTrackID);
        result = MediaDataChunkWriterTrackAppendSampleReference(*((_QWORD *)v27 + 3), *((_QWORD *)v27 + 4), a11, v35, a4, a5, a6, a7, a8, theArray, 0);
        if (a13)
        {
          v32 = *((_OWORD *)v27 + 6);
          *(_QWORD *)(a13 + 16) = *((_QWORD *)v27 + 14);
          *(_OWORD *)a13 = v32;
        }
        if (a14)
        {
          v33 = *(_OWORD *)(v27 + 18);
          *(_QWORD *)(a14 + 16) = *((_QWORD *)v27 + 11);
          *(_OWORD *)a14 = v33;
        }
        *((_BYTE *)v27 + 56) = 1;
      }
      return result;
    }
    return 4294950861;
  }
  return result;
}

uint64_t MutableMovie_AppendSampleReferencesFromSampleCursor(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;
  _BYTE *DerivedStorage;
  _BYTE *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t TrackForTrackID;
  _DWORD *Storage;
  uint64_t v22;

  result = 4294950861;
  if (!a1 || !a2 || !a4)
    return result;
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return 4294950861;
  v17 = DerivedStorage;
  if (*DerivedStorage)
    return 4294950869;
  if (a5)
  {
    v18 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    if (v18 != *(_QWORD *)(CMBaseObjectGetVTable() + 16))
      return 0;
    v19 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 32);
    if (!v19 || v19(a4, a5) != -1)
      return 0;
  }
  result = MovieInformationLockForRead(*((_QWORD *)v17 + 3));
  if (!(_DWORD)result)
  {
    TrackForTrackID = MovieInformationFindTrackForTrackID(*((_QWORD *)v17 + 3), a2);
    MovieInformationUnlockForRead(*((_QWORD *)v17 + 3));
    if (TrackForTrackID)
    {
      Storage = MutableMovieTrackGetStorage(a1, a2);
      if (!Storage)
        return FigSignalErrorAt();
      if (a8)
        *a8 = 0;
      v22 = MEMORY[0x1E0CA2E18];
      if (a9)
      {
        *(_OWORD *)a9 = *MEMORY[0x1E0CA2E18];
        *(_QWORD *)(a9 + 16) = *(_QWORD *)(v22 + 16);
      }
      if (a10)
      {
        *(_OWORD *)a10 = *(_OWORD *)v22;
        *(_QWORD *)(a10 + 16) = *(_QWORD *)(v22 + 16);
      }
      *((_BYTE *)Storage + 56) = 1;
      return 4294954514;
    }
    return 4294950861;
  }
  return result;
}

BOOL MutableMovie_CanTrackAcceptFormatDescription(uint64_t a1, int a2, const opaqueCMFormatDescription *a3)
{
  BOOL v3;
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t TrackForTrackID;
  uint64_t v9;
  CMMediaType MediaType;
  CMMediaType v11;
  const __CFArray *v12;
  const __CFArray *v13;
  CFIndex Count;
  CFIndex v15;
  CFIndex v16;
  const opaqueCMFormatDescription *ValueAtIndex;
  FourCharCode MediaSubType;
  CGSize PresentationDimensions;
  CGSize v20;
  double v21;
  double v22;
  int v24;

  v3 = 0;
  if (a1 && a2 && a3)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!DerivedStorage)
      return 0;
    v7 = DerivedStorage;
    v24 = 0;
    if (*(_BYTE *)DerivedStorage || MovieInformationLockForRead(*(_QWORD *)(DerivedStorage + 24)))
    {
      return 0;
    }
    else
    {
      TrackForTrackID = MovieInformationFindTrackForTrackID(*(_QWORD *)(v7 + 24), a2);
      if (TrackForTrackID
        && (v9 = TrackForTrackID, !MovieTrackGetBasicInfo(TrackForTrackID, &v24, 0))
        && (MediaType = CMFormatDescriptionGetMediaType(a3), MediaType == v24)
        && (v11 = MediaType, (v12 = MovieTrackCopyFormatDescriptionArray(v9)) != 0))
      {
        v13 = v12;
        Count = CFArrayGetCount(v12);
        if (Count >= 1)
        {
          v15 = Count;
          v3 = 0;
          v16 = 0;
          while (1)
          {
            ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(v13, v16);
            if (v11 == 1952807028)
              goto LABEL_16;
            if (v11 != 1986618469)
              break;
            PresentationDimensions = CMVideoFormatDescriptionGetPresentationDimensions(a3, 1u, 1u);
            v20 = CMVideoFormatDescriptionGetPresentationDimensions(ValueAtIndex, 1u, 1u);
            if (v20.width != 0.0 || v20.height != 0.0)
            {
              v21 = v20.width / v20.height;
              if (v20.height == 0.0)
                v21 = 0.0;
              v22 = PresentationDimensions.width / PresentationDimensions.height;
              if (PresentationDimensions.height == 0.0)
                v22 = 0.0;
              if (vabdd_f64(v21, v22) > 0.00999999978)
                goto LABEL_31;
            }
LABEL_27:
            v3 = ++v16 >= v15;
            if (v15 == v16)
              goto LABEL_31;
          }
          if (v11 != 1953325924)
          {
            if (!CFEqual(a3, ValueAtIndex))
              goto LABEL_31;
            goto LABEL_27;
          }
LABEL_16:
          MediaSubType = CMFormatDescriptionGetMediaSubType(a3);
          if (MediaSubType != CMFormatDescriptionGetMediaSubType(ValueAtIndex))
            goto LABEL_31;
          goto LABEL_27;
        }
        v3 = 1;
LABEL_31:
        CFRelease(v13);
      }
      else
      {
        v3 = 0;
      }
      MovieInformationUnlockForRead(*(_QWORD *)(v7 + 24));
    }
  }
  return v3;
}

uint64_t MutableMovie_GetTrackCompatibleWithTrackReader(uint64_t a1, const void *a2, _DWORD *a3)
{
  uint64_t result;
  _BYTE *DerivedStorage;
  uint64_t v8;
  const __CFAllocator *v9;
  _DWORD *TrackForInsertionFromSource;
  uint64_t v11;

  result = 4294950861;
  if (a1 && a3)
  {
    *a3 = 0;
    DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      v8 = (uint64_t)DerivedStorage;
      if (*DerivedStorage)
      {
        return 4294950869;
      }
      else
      {
        v11 = 0;
        v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        result = createSourceFromTrack(0, a2, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, &v11);
        if (!(_DWORD)result)
        {
          if (v11)
          {
            TrackForInsertionFromSource = getTrackForInsertionFromSource(v8, v11);
            if (TrackForInsertionFromSource)
              *a3 = TrackForInsertionFromSource[1];
            releaseSource(v9, v11);
          }
          return 0;
        }
      }
    }
    else
    {
      return 4294950861;
    }
  }
  return result;
}

uint64_t MutableMovie_InsertMediaIntoTrack(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t v11;
  uint64_t TrackForTrackID;
  uint64_t v13;
  CMTime *v14;
  __int128 v15;
  __int128 v16;
  uint64_t inserted;
  __int128 v19[3];
  _OWORD v20[3];

  v4 = 4294950861;
  if (a1)
  {
    if (a2)
    {
      if ((*(_BYTE *)(a3 + 36) & 1) != 0
        && (*(_BYTE *)(a4 + 12) & 1) != 0
        && (*(_BYTE *)(a4 + 36) & 1) != 0
        && !*(_QWORD *)(a4 + 40)
        && (*(_QWORD *)(a4 + 24) & 0x8000000000000000) == 0)
      {
        DerivedStorage = CMBaseObjectGetDerivedStorage();
        if (DerivedStorage)
        {
          v10 = DerivedStorage;
          if (*(_BYTE *)DerivedStorage)
          {
            return 4294950869;
          }
          else
          {
            v11 = MovieInformationLockForWrite(*(_QWORD *)(DerivedStorage + 24));
            if ((_DWORD)v11)
            {
              return v11;
            }
            else
            {
              TrackForTrackID = MovieInformationFindTrackForTrackID(*(_QWORD *)(v10 + 24), a2);
              if (TrackForTrackID)
              {
                v13 = TrackForTrackID;
                v14 = *(CMTime **)(v10 + 24);
                v15 = *(_OWORD *)(a3 + 16);
                v20[0] = *(_OWORD *)a3;
                v20[1] = v15;
                v20[2] = *(_OWORD *)(a3 + 32);
                v16 = *(_OWORD *)(a4 + 16);
                v19[0] = *(_OWORD *)a4;
                v19[1] = v16;
                v19[2] = *(_OWORD *)(a4 + 32);
                inserted = MovieTrackInsertMediaSegment(v14, v13, v20, v19);
                if (!(_DWORD)inserted)
                  inserted = setTrackIDModified(a1, v10, a2);
                v4 = inserted;
              }
              MovieInformationUnlockForWrite(*(_QWORD *)(v10 + 24));
            }
          }
        }
      }
    }
  }
  return v4;
}

uint64_t MutableMovie_InsertEmptyTrackSegment(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  uint64_t TrackForTrackID;
  uint64_t v11;
  CMTime *v12;
  __int128 v13;
  uint64_t inserted;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  CMTime time2;

  v3 = 4294950861;
  if (a1
    && a2
    && (*(_BYTE *)(a3 + 12) & 1) != 0
    && (*(_BYTE *)(a3 + 36) & 1) != 0
    && !*(_QWORD *)(a3 + 40)
    && (*(_QWORD *)(a3 + 24) & 0x8000000000000000) == 0)
  {
    v16 = *(_OWORD *)(a3 + 24);
    *(_QWORD *)&v17 = *(_QWORD *)(a3 + 40);
    time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    if (CMTimeCompare((CMTime *)&v16, &time2))
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (DerivedStorage)
      {
        v8 = DerivedStorage;
        if (*(_BYTE *)DerivedStorage)
        {
          return 4294950869;
        }
        else
        {
          v9 = MovieInformationLockForWrite(*(_QWORD *)(DerivedStorage + 24));
          if ((_DWORD)v9)
          {
            return v9;
          }
          else
          {
            TrackForTrackID = MovieInformationFindTrackForTrackID(*(_QWORD *)(v8 + 24), a2);
            if (TrackForTrackID)
            {
              v11 = TrackForTrackID;
              if (*(int *)(TrackForTrackID + 816) < 1
                || (v12 = *(CMTime **)(v8 + 24),
                    v13 = *(_OWORD *)(a3 + 16),
                    v16 = *(_OWORD *)a3,
                    v17 = v13,
                    v18 = *(_OWORD *)(a3 + 32),
                    inserted = MovieTrackInsertEmptySegment(v12, v11, &v16),
                    !(_DWORD)inserted))
              {
                inserted = setTrackIDModified(a1, v8, a2);
              }
              v3 = inserted;
            }
            MovieInformationUnlockForWrite(*(_QWORD *)(v8 + 24));
          }
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t MutableMovie_InsertEmptySegment(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t TrackCount;
  uint64_t v9;
  uint64_t v10;
  uint64_t TrackForTrackIndex;
  uint64_t v12;
  CMTime *v13;
  __int128 v14;
  uint64_t inserted;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  CMTime time2;

  if (!a1
    || (*(_BYTE *)(a2 + 12) & 1) == 0
    || (*(_BYTE *)(a2 + 36) & 1) == 0
    || *(_QWORD *)(a2 + 40)
    || (*(_QWORD *)(a2 + 24) & 0x8000000000000000) != 0)
  {
    return 4294950861;
  }
  v16 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)&v17 = *(_QWORD *)(a2 + 40);
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (!CMTimeCompare((CMTime *)&v16, &time2))
    return 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return 4294950861;
  v6 = DerivedStorage;
  if (*(_BYTE *)DerivedStorage)
    return 4294950869;
  v7 = MovieInformationLockForWrite(*(_QWORD *)(DerivedStorage + 24));
  if ((_DWORD)v7)
    return v7;
  TrackCount = MovieInformationGetTrackCount(*(_QWORD *)(v6 + 24));
  if (TrackCount < 1)
  {
LABEL_18:
    v3 = 0;
    *(_BYTE *)(v6 + 1) = 1;
  }
  else
  {
    v9 = TrackCount;
    v10 = 0;
    while (1)
    {
      TrackForTrackIndex = MovieInformationFindTrackForTrackIndex(*(_QWORD *)(v6 + 24), v10);
      if (!TrackForTrackIndex)
      {
        v3 = 4294950872;
        goto LABEL_19;
      }
      v12 = TrackForTrackIndex;
      if (*(int *)(TrackForTrackIndex + 816) >= 1)
      {
        v13 = *(CMTime **)(v6 + 24);
        v14 = *(_OWORD *)(a2 + 16);
        v16 = *(_OWORD *)a2;
        v17 = v14;
        v18 = *(_OWORD *)(a2 + 32);
        inserted = MovieTrackInsertEmptySegment(v13, v12, &v16);
        if ((_DWORD)inserted)
          break;
      }
      if (v9 == ++v10)
        goto LABEL_18;
    }
    v3 = inserted;
  }
LABEL_19:
  MovieInformationUnlockForWrite(*(_QWORD *)(v6 + 24));
  return v3;
}

uint64_t MutableMovie_DeleteTrackSegment(uint64_t a1, int a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  uint64_t TrackForTrackID;
  uint64_t v11;
  CMTime *v12;
  __int128 v13;
  uint64_t v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  CMTime time2;

  v3 = 4294950861;
  if (a1
    && a2
    && (*((_BYTE *)a3 + 12) & 1) != 0
    && (*((_BYTE *)a3 + 36) & 1) != 0
    && !*((_QWORD *)a3 + 5)
    && (*((_QWORD *)a3 + 3) & 0x8000000000000000) == 0)
  {
    v16 = *(__int128 *)((char *)a3 + 24);
    *(_QWORD *)&v17 = *((_QWORD *)a3 + 5);
    time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    if (CMTimeCompare((CMTime *)&v16, &time2))
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (DerivedStorage)
      {
        v8 = DerivedStorage;
        if (*(_BYTE *)DerivedStorage)
        {
          return 4294950869;
        }
        else
        {
          v9 = MovieInformationLockForWrite(*(_QWORD *)(DerivedStorage + 24));
          if ((_DWORD)v9)
          {
            return v9;
          }
          else
          {
            TrackForTrackID = MovieInformationFindTrackForTrackID(*(_QWORD *)(v8 + 24), a2);
            if (TrackForTrackID)
            {
              v11 = TrackForTrackID;
              v12 = *(CMTime **)(v8 + 24);
              v13 = a3[1];
              v16 = *a3;
              v17 = v13;
              v18 = a3[2];
              v14 = MovieTrackDeleteSegment(v12, v11, (uint64_t)&v16);
              if (!(_DWORD)v14)
                v14 = setTrackIDModified(a1, v8, a2);
              v3 = v14;
            }
            MovieInformationUnlockForWrite(*(_QWORD *)(v8 + 24));
          }
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t MutableMovie_DeleteSegment(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t TrackCount;
  uint64_t v9;
  uint64_t v10;
  uint64_t TrackForTrackIndex;
  uint64_t v12;
  CMTime *v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  CMTime time2;

  if (!a1
    || (*((_BYTE *)a2 + 12) & 1) == 0
    || (*((_BYTE *)a2 + 36) & 1) == 0
    || *((_QWORD *)a2 + 5)
    || (*((_QWORD *)a2 + 3) & 0x8000000000000000) != 0)
  {
    return 4294950861;
  }
  v16 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)&v17 = *((_QWORD *)a2 + 5);
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (!CMTimeCompare((CMTime *)&v16, &time2))
    return 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return 4294950861;
  v6 = DerivedStorage;
  if (*(_BYTE *)DerivedStorage)
    return 4294950869;
  v7 = MovieInformationLockForWrite(*(_QWORD *)(DerivedStorage + 24));
  if ((_DWORD)v7)
    return v7;
  TrackCount = MovieInformationGetTrackCount(*(_QWORD *)(v6 + 24));
  if (TrackCount < 1)
  {
LABEL_17:
    v3 = 0;
    *(_BYTE *)(v6 + 1) = 1;
  }
  else
  {
    v9 = TrackCount;
    v10 = 0;
    while (1)
    {
      TrackForTrackIndex = MovieInformationFindTrackForTrackIndex(*(_QWORD *)(v6 + 24), v10);
      if (!TrackForTrackIndex)
      {
        v3 = 4294950872;
        goto LABEL_18;
      }
      v12 = TrackForTrackIndex;
      v13 = *(CMTime **)(v6 + 24);
      v14 = a2[1];
      v16 = *a2;
      v17 = v14;
      v18 = a2[2];
      v15 = MovieTrackDeleteSegment(v13, v12, (uint64_t)&v16);
      if ((_DWORD)v15)
        break;
      if (v9 == ++v10)
        goto LABEL_17;
    }
    v3 = v15;
  }
LABEL_18:
  MovieInformationUnlockForWrite(*(_QWORD *)(v6 + 24));
  return v3;
}

uint64_t MutableMovie_ScaleTrackSegment(uint64_t a1, int a2, uint64_t a3, __int128 *a4)
{
  uint64_t v4;
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t v11;
  uint64_t TrackForTrackID;
  uint64_t v13;
  CMTime *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  CMTime time2;

  v4 = 4294950861;
  if (a1
    && a2
    && (*(_BYTE *)(a3 + 12) & 1) != 0
    && (*(_BYTE *)(a3 + 36) & 1) != 0
    && !*(_QWORD *)(a3 + 40)
    && (*(_QWORD *)(a3 + 24) & 0x8000000000000000) == 0)
  {
    v19 = *(_OWORD *)(a3 + 24);
    *(_QWORD *)&v20 = *(_QWORD *)(a3 + 40);
    time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    if (CMTimeCompare((CMTime *)&v19, &time2))
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (DerivedStorage)
      {
        v10 = DerivedStorage;
        if (*(_BYTE *)DerivedStorage)
        {
          return 4294950869;
        }
        else
        {
          v11 = MovieInformationLockForWrite(*(_QWORD *)(DerivedStorage + 24));
          if ((_DWORD)v11)
          {
            return v11;
          }
          else
          {
            TrackForTrackID = MovieInformationFindTrackForTrackID(*(_QWORD *)(v10 + 24), a2);
            if (TrackForTrackID)
            {
              v13 = TrackForTrackID;
              v14 = *(CMTime **)(v10 + 24);
              v15 = *(_OWORD *)(a3 + 16);
              v19 = *(_OWORD *)a3;
              v20 = v15;
              v16 = *a4;
              v21 = *(_OWORD *)(a3 + 32);
              *(_OWORD *)&time2.value = v16;
              time2.epoch = *((_QWORD *)a4 + 2);
              v17 = MovieTrackScaleSegment(v14, v13, &v19, (uint64_t)&time2);
              if (!(_DWORD)v17)
                v17 = setTrackIDModified(a1, v10, a2);
              v4 = v17;
            }
            MovieInformationUnlockForWrite(*(_QWORD *)(v10 + 24));
          }
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

uint64_t MutableMovie_ScaleSegment(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  uint64_t TrackCount;
  uint64_t v11;
  uint64_t v12;
  uint64_t TrackForTrackIndex;
  uint64_t v14;
  CMTime *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  CMTime time2;

  if (!a1
    || (*(_BYTE *)(a2 + 12) & 1) == 0
    || (*(_BYTE *)(a2 + 36) & 1) == 0
    || *(_QWORD *)(a2 + 40)
    || (*(_QWORD *)(a2 + 24) & 0x8000000000000000) != 0)
  {
    return 4294950861;
  }
  v19 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)&v20 = *(_QWORD *)(a2 + 40);
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (!CMTimeCompare((CMTime *)&v19, &time2))
    return 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return 4294950861;
  v8 = DerivedStorage;
  if (*(_BYTE *)DerivedStorage)
    return 4294950869;
  v9 = MovieInformationLockForWrite(*(_QWORD *)(DerivedStorage + 24));
  if ((_DWORD)v9)
    return v9;
  TrackCount = MovieInformationGetTrackCount(*(_QWORD *)(v8 + 24));
  if (TrackCount < 1)
  {
LABEL_17:
    v4 = 0;
    *(_BYTE *)(v8 + 1) = 1;
  }
  else
  {
    v11 = TrackCount;
    v12 = 0;
    while (1)
    {
      TrackForTrackIndex = MovieInformationFindTrackForTrackIndex(*(_QWORD *)(v8 + 24), v12);
      if (!TrackForTrackIndex)
      {
        v4 = 4294950872;
        goto LABEL_18;
      }
      v14 = TrackForTrackIndex;
      v15 = *(CMTime **)(v8 + 24);
      v16 = *(_OWORD *)(a2 + 16);
      v19 = *(_OWORD *)a2;
      v20 = v16;
      v17 = *a3;
      v21 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&time2.value = v17;
      time2.epoch = *((_QWORD *)a3 + 2);
      v18 = MovieTrackScaleSegment(v15, v14, &v19, (uint64_t)&time2);
      if ((_DWORD)v18)
        break;
      if (v11 == ++v12)
        goto LABEL_17;
    }
    v4 = v18;
  }
LABEL_18:
  MovieInformationUnlockForWrite(*(_QWORD *)(v8 + 24));
  return v4;
}

uint64_t MutableMovie_InsertSegmentFromTrackReader(uint64_t a1, int a2, uint64_t a3, const void *a4, uint64_t a5, CMTime *a6, __int16 a7)
{
  const __CFArray *v7;
  uint64_t inserted;
  _OWORD *v12;
  CMTimeEpoch v18;
  _BYTE *DerivedStorage;
  uint64_t v20;
  int32_t v21;
  void (*v22)(const void *, _QWORD, CMTime *);
  const __CFAllocator *v23;
  uint64_t SourceFromTrack;
  __CFArray *Mutable;
  __int128 v26;
  uint64_t TrackCount;
  uint64_t v28;
  CFIndex v29;
  CMTime **ValueAtIndex;
  CMTime **v31;
  CMTimeEpoch epoch;
  CFTypeID v33;
  __int128 v34;
  _BYTE time1[32];
  __int128 v36;
  CMTime v37;
  CMTime v38;
  CMTime v39;
  CMTime time2;
  CFTypeRef v41;
  _DWORD *v42;

  v7 = 0;
  v41 = 0;
  v42 = 0;
  inserted = 4294950861;
  if (!a1 || !a4)
    goto LABEL_7;
  if ((*(_BYTE *)(a5 + 12) & 1) == 0
    || (*(_BYTE *)(a5 + 36) & 1) == 0
    || *(_QWORD *)(a5 + 40)
    || (v12 = (_OWORD *)(a5 + 24), (*(_QWORD *)(a5 + 24) & 0x8000000000000000) != 0))
  {
LABEL_6:
    v7 = 0;
    goto LABEL_7;
  }
  *(_OWORD *)time1 = *v12;
  *(_QWORD *)&time1[16] = *(_QWORD *)(a5 + 40);
  v34 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&time2.value = *MEMORY[0x1E0CA2E68];
  v18 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  time2.epoch = v18;
  if (!CMTimeCompare((CMTime *)time1, &time2))
  {
    v7 = 0;
    inserted = 0;
    goto LABEL_7;
  }
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    v7 = 0;
    inserted = 4294950861;
    goto LABEL_7;
  }
  v20 = (uint64_t)DerivedStorage;
  if (*DerivedStorage)
  {
    v7 = 0;
    inserted = 4294950869;
    goto LABEL_7;
  }
  if ((a7 & 0x100) == 0)
  {
    *(_OWORD *)time1 = *(_OWORD *)a5;
    *(_QWORD *)&time1[16] = *(_QWORD *)(a5 + 16);
    *(_OWORD *)&time2.value = v34;
    time2.epoch = v18;
    v21 = CMTimeCompare((CMTime *)time1, &time2);
    if (a3)
    {
      if (!v21)
      {
        LODWORD(v38.value) = 0;
        v22 = *(void (**)(const void *, _QWORD, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (v22)
          v22(a4, 0, &v38);
        if (LODWORD(v38.value) == 1936684398
          && !FigTrackReaderCopyProperty((uint64_t)a4, (uint64_t)CFSTR("TrackDuration"), *MEMORY[0x1E0C9AE00], (uint64_t)&v41))
        {
          *(_OWORD *)time1 = *MEMORY[0x1E0CA2E18];
          *(_QWORD *)&time1[16] = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
          if (v41)
          {
            v33 = CFGetTypeID(v41);
            if (v33 == CFDictionaryGetTypeID())
              CMTimeMakeFromDictionary((CMTime *)time1, (CFDictionaryRef)v41);
            if (v41)
            {
              CFRelease(v41);
              v41 = 0;
            }
          }
          if ((time1[12] & 0x1D) == 1)
          {
            *(_OWORD *)&time2.value = *v12;
            time2.epoch = *(_QWORD *)(a5 + 40);
            v39 = *(CMTime *)time1;
            if (!CMTimeCompare(&time2, &v39)
              && !FigGaplessInfoGetTrackDuration(a3, (uint64_t)a4, 0, (CMTime *)time1))
            {
              *v12 = *(_OWORD *)time1;
              *(_QWORD *)(a5 + 40) = *(_QWORD *)&time1[16];
            }
          }
        }
      }
    }
  }
  if (!*(_BYTE *)(v20 + 2))
  {
    *(_OWORD *)time1 = *(_OWORD *)&a6->value;
    *(_QWORD *)&time1[16] = a6->epoch;
    *(_OWORD *)&time2.value = v34;
    time2.epoch = v18;
    if (CMTimeCompare((CMTime *)time1, &time2) >= 1)
    {
      if (!a2)
        goto LABEL_43;
      TrackCount = MovieInformationGetTrackCount(*(_QWORD *)(v20 + 24));
      if (TrackCount < 1)
        goto LABEL_43;
      v28 = TrackCount;
      v29 = 0;
      while (1)
      {
        ValueAtIndex = (CMTime **)CFArrayGetValueAtIndex(*(CFArrayRef *)(v20 + 56), v29);
        if (*((_DWORD *)ValueAtIndex + 1) == a2)
          break;
        if (v28 == ++v29)
          goto LABEL_43;
      }
      v31 = ValueAtIndex;
      memset(time1, 0, 24);
      getTrackEditedDuration(v20, (uint64_t)ValueAtIndex, (CMTime *)time1);
      time2 = *a6;
      v39 = *(CMTime *)time1;
      if (!CMTimeCompare(&time2, &v39))
      {
        memset(&time2, 0, sizeof(time2));
        GetTotalEditSegmentDuration(v31[2], &time2);
        v39 = time2;
        v38 = *a6;
        if (CMTimeCompare(&v39, &v38) >= 1)
        {
          *(_OWORD *)&a6->value = *(_OWORD *)&time2.value;
          epoch = time2.epoch;
          goto LABEL_46;
        }
      }
      else
      {
LABEL_43:
        getMaximumEditedTrackDuration(v20, (uint64_t)&v37);
        *(_OWORD *)time1 = *(_OWORD *)&a6->value;
        *(_QWORD *)&time1[16] = a6->epoch;
        if (!CMTimeCompare((CMTime *)time1, &v37))
        {
          memset(time1, 0, 24);
          MovieInformationGetMovieDuration(*(_QWORD *)(v20 + 24), (uint64_t)time1);
          time2 = *(CMTime *)time1;
          v39 = *a6;
          if (CMTimeCompare(&time2, &v39) >= 1)
          {
            *(_OWORD *)&a6->value = *(_OWORD *)time1;
            epoch = *(_QWORD *)&time1[16];
LABEL_46:
            a6->epoch = epoch;
          }
        }
      }
    }
  }
  clearInsertionStateInTracks(a1);
  v23 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  SourceFromTrack = createSourceFromTrack(0, a4, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], a7, 1, (uint64_t *)&v42);
  if ((_DWORD)SourceFromTrack)
  {
    inserted = SourceFromTrack;
    goto LABEL_6;
  }
  v42[37] = a2;
  Mutable = CFArrayCreateMutable(v23, 0, 0);
  v7 = Mutable;
  if (Mutable)
  {
    CFArrayAppendValue(Mutable, v42);
    v26 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)time1 = *(_OWORD *)a5;
    *(_OWORD *)&time1[16] = v26;
    v36 = *(_OWORD *)(a5 + 32);
    time2 = *a6;
    inserted = insertSegmentFromSourceArray(v7, a1, time1, (__int128 *)&time2.value, a7);
    if (!(_DWORD)inserted)
      *(_BYTE *)(v20 + 1) = 1;
  }
  else
  {
    inserted = FigSignalErrorAt();
  }
LABEL_7:
  releaseSourceArray(v7);
  if (v41)
    CFRelease(v41);
  return inserted;
}

uint64_t MutableMovie_InsertSegmentFromFormatReader(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  const __CFArray *Mutable;
  uint64_t SourceFromTrack;
  uint64_t v8;
  int v10;
  _OWORD *v14;
  CMTimeEpoch v16;
  int v17;
  _BYTE *DerivedStorage;
  uint64_t *v19;
  const __CFAllocator *v20;
  uint64_t (*v21)(const void *, CMTimeRange *);
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(const void *, uint64_t, const void **, _QWORD, _QWORD);
  const void *v25;
  __int128 v26;
  uint64_t inserted;
  uint64_t v28;
  uint64_t v29;
  uint64_t TrackCount;
  uint64_t v31;
  uint64_t i;
  uint64_t TrackForTrackIndex;
  uint64_t v34;
  _DWORD *Storage;
  _DWORD *v36;
  CMTime *v37;
  uint64_t v38;
  CFTypeID v39;
  CMTimeFlags flags;
  CFTypeID v41;
  CMTimeFlags v42;
  CMTimeEpoch v43;
  CMTimeEpoch epoch;
  _OWORD *v45;
  __int128 v46;
  CMTimeRange time2;
  CMTimeRange v48;
  CMTime v49;
  CFTypeRef cf;
  CMTimeRange time1;
  CMTimeValue v52;
  CMTimeScale v53;
  const void *value;
  CMTimeScale timescale;
  uint64_t v56;

  Mutable = 0;
  v56 = *MEMORY[0x1E0C80C00];
  cf = 0;
  SourceFromTrack = 4294950861;
  if (!a1)
    goto LABEL_80;
  v8 = 0;
  if (!a2)
    goto LABEL_9;
  v10 = *(_DWORD *)(a3 + 12);
  if ((v10 & 1) == 0)
    goto LABEL_8;
  v14 = (_OWORD *)(a3 + 24);
  if ((*(_BYTE *)(a3 + 36) & 1) != 0 && !*(_QWORD *)(a3 + 40) && (*(_QWORD *)v14 & 0x8000000000000000) == 0)
  {
    *(_OWORD *)&time1.start.value = *v14;
    time1.start.epoch = *(_QWORD *)(a3 + 40);
    *(_OWORD *)&time2.start.value = *MEMORY[0x1E0CA2E68];
    time2.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    if (!CMTimeCompare(&time1.start, &time2.start))
    {
      Mutable = 0;
      v8 = 0;
      SourceFromTrack = 0;
      goto LABEL_9;
    }
    v10 = *(_DWORD *)(a3 + 12);
    if ((v10 & 1) == 0)
      goto LABEL_8;
  }
  if ((*(_BYTE *)(a3 + 36) & 1) == 0 || *(_QWORD *)(a3 + 40))
    goto LABEL_8;
  Mutable = 0;
  if ((v10 & 0x1D) != 1)
  {
LABEL_80:
    v8 = 0;
    goto LABEL_9;
  }
  v8 = 0;
  if ((*(_QWORD *)v14 & 0x8000000000000000) != 0)
    goto LABEL_9;
  *(_OWORD *)&time1.start.value = *(_OWORD *)a3;
  time1.start.epoch = *(_QWORD *)(a3 + 16);
  v46 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&time2.start.value = *MEMORY[0x1E0CA2E68];
  v16 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  time2.start.epoch = v16;
  if (CMTimeCompare(&time1.start, &time2.start) < 0)
    goto LABEL_8;
  v17 = *(_DWORD *)(a4 + 12);
  if ((v17 & 0x1D) != 1 && (v17 & 1) != 0)
    goto LABEL_8;
  if ((v17 & 0x1D) == 1)
  {
    *(_OWORD *)&time1.start.value = *(_OWORD *)a4;
    time1.start.epoch = *(_QWORD *)(a4 + 16);
    *(_OWORD *)&time2.start.value = v46;
    time2.start.epoch = v16;
    if (CMTimeCompare(&time1.start, &time2.start) < 0)
    {
      SourceFromTrack = FigSignalErrorAt();
LABEL_8:
      Mutable = 0;
      v8 = 0;
      goto LABEL_9;
    }
  }
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v8 = (uint64_t)DerivedStorage;
  if (!DerivedStorage)
    goto LABEL_61;
  v45 = (_OWORD *)(a3 + 24);
  if (*DerivedStorage)
  {
    Mutable = 0;
    goto LABEL_82;
  }
  v19 = (uint64_t *)MEMORY[0x1E0C9AE00];
  if ((a5 & 0x100) == 0)
  {
    *(_OWORD *)&time1.start.value = *(_OWORD *)a3;
    time1.start.epoch = *(_QWORD *)(a3 + 16);
    *(_OWORD *)&time2.start.value = v46;
    time2.start.epoch = v16;
    if (!CMTimeCompare(&time1.start, &time2.start))
    {
      v38 = *v19;
      if (!FigFormatReaderCopyProperty((uint64_t)a2, (uint64_t)CFSTR("Duration"), *v19, (uint64_t)&cf))
      {
        if (cf)
        {
          v39 = CFGetTypeID(cf);
          if (v39 == CFDictionaryGetTypeID())
          {
            CMTimeMakeFromDictionary(&time1.start, (CFDictionaryRef)cf);
            value = (const void *)time1.start.value;
            flags = time1.start.flags;
            timescale = time1.start.timescale;
            epoch = time1.start.epoch;
            if (cf)
            {
              CFRelease(cf);
              cf = 0;
            }
            if (!FigFormatReaderCopyProperty((uint64_t)a2, (uint64_t)CFSTR("NominalDuration"), v38, (uint64_t)&cf))
            {
              if (cf)
              {
                v41 = CFGetTypeID(cf);
                if (v41 == CFDictionaryGetTypeID())
                {
                  CMTimeMakeFromDictionary(&time1.start, (CFDictionaryRef)cf);
                  v52 = time1.start.value;
                  v53 = time1.start.timescale;
                  if ((flags & 0x1D) == 1)
                  {
                    v42 = time1.start.flags;
                    if ((time1.start.flags & 0x1D) == 1)
                    {
                      time1.start.value = v52;
                      time1.start.timescale = v53;
                      v43 = time1.start.epoch;
                      time2.start.value = (CMTimeValue)value;
                      *(_QWORD *)&time2.start.timescale = __PAIR64__(flags, timescale);
                      time2.start.epoch = epoch;
                      if (CMTimeCompare(&time1.start, &time2.start) >= 1)
                      {
                        *(_OWORD *)&time1.start.value = *v45;
                        time1.start.epoch = *(_QWORD *)(a3 + 40);
                        time2.start.value = (CMTimeValue)value;
                        *(_QWORD *)&time2.start.timescale = __PAIR64__(flags, timescale);
                        time2.start.epoch = epoch;
                        if (!CMTimeCompare(&time1.start, &time2.start))
                        {
                          *(_QWORD *)v45 = v52;
                          *(_DWORD *)(a3 + 32) = v53;
                          *(_DWORD *)(a3 + 36) = v42;
                          *(_QWORD *)(a3 + 40) = v43;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (!*(_BYTE *)(v8 + 2))
  {
    *(_OWORD *)&time1.start.value = *(_OWORD *)a4;
    time1.start.epoch = *(_QWORD *)(a4 + 16);
    *(_OWORD *)&time2.start.value = v46;
    time2.start.epoch = v16;
    if (CMTimeCompare(&time1.start, &time2.start) >= 1)
    {
      getMaximumEditedTrackDuration(v8, (uint64_t)&v49);
      *(_OWORD *)&time1.start.value = *(_OWORD *)a4;
      time1.start.epoch = *(_QWORD *)(a4 + 16);
      if (!CMTimeCompare(&time1.start, &v49))
      {
        MovieInformationGetMovieDuration(*(_QWORD *)(v8 + 24), (uint64_t)&time1);
        *(_OWORD *)a4 = *(_OWORD *)&time1.start.value;
        *(_QWORD *)(a4 + 16) = time1.start.epoch;
      }
    }
  }
  clearInsertionStateInTracks(a1);
  v20 = (const __CFAllocator *)*v19;
  time1.start.value = 0;
  time2.start.value = 0;
  Mutable = CFArrayCreateMutable(v20, 0, 0);
  if (Mutable)
  {
    v21 = *(uint64_t (**)(const void *, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (!v21)
    {
LABEL_59:
      SourceFromTrack = 4294954514;
LABEL_60:
      releaseSourceArray(Mutable);
LABEL_61:
      Mutable = 0;
      goto LABEL_9;
    }
    v22 = v21(a2, &time1);
    if ((_DWORD)v22)
    {
LABEL_89:
      SourceFromTrack = v22;
      goto LABEL_60;
    }
    if (time1.start.value >= 1)
    {
      v23 = 0;
      do
      {
        value = 0;
        v24 = *(uint64_t (**)(const void *, uint64_t, const void **, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 48);
        if (!v24)
          goto LABEL_59;
        v22 = v24(a2, v23, &value, 0, 0);
        if ((_DWORD)v22)
          goto LABEL_89;
        SourceFromTrack = createSourceFromTrack(a2, value, v20, a5, 1, &time2.start.value);
        if (value)
          CFRelease(value);
        if ((_DWORD)SourceFromTrack)
          goto LABEL_60;
        v25 = (const void *)time2.start.value;
        if (time2.start.value)
        {
          *(_DWORD *)(time2.start.value + 148) = 0;
          CFArrayAppendValue(Mutable, v25);
        }
      }
      while (++v23 < time1.start.value);
    }
    releaseSourceArray(0);
  }
  else
  {
    SourceFromTrack = FigSignalErrorAt();
    releaseSourceArray(0);
    if ((_DWORD)SourceFromTrack)
      goto LABEL_61;
  }
  *(_QWORD *)(v8 + 72) = Mutable;
  v26 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)&time1.start.value = *(_OWORD *)a3;
  *(_OWORD *)&time1.start.epoch = v26;
  *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(a3 + 32);
  *(_OWORD *)&time2.start.value = *(_OWORD *)a4;
  time2.start.epoch = *(_QWORD *)(a4 + 16);
  inserted = insertSegmentFromSourceArray(Mutable, a1, &time1, (__int128 *)&time2.start.value, a5);
  if ((_DWORD)inserted)
    goto LABEL_85;
  memset(&v48, 0, sizeof(v48));
  *(_OWORD *)&time1.start.value = *(_OWORD *)a4;
  time1.start.epoch = *(_QWORD *)(a4 + 16);
  *(_OWORD *)&time2.start.value = *v45;
  time2.start.epoch = *(_QWORD *)(a3 + 40);
  CMTimeRangeMake(&v48, &time1.start, &time2.start);
  time2 = v48;
  v28 = CMBaseObjectGetDerivedStorage();
  if (!v28)
  {
    SourceFromTrack = 4294950861;
    goto LABEL_9;
  }
  v29 = v28;
  if (*(_BYTE *)v28)
  {
LABEL_82:
    SourceFromTrack = 4294950869;
    goto LABEL_9;
  }
  inserted = MovieInformationLockForRead(*(_QWORD *)(v28 + 24));
  if ((_DWORD)inserted)
  {
LABEL_85:
    SourceFromTrack = inserted;
    goto LABEL_9;
  }
  TrackCount = MovieInformationGetTrackCount(*(_QWORD *)(v29 + 24));
  if (TrackCount < 1)
  {
    MovieInformationUnlockForRead(*(_QWORD *)(v29 + 24));
LABEL_79:
    SourceFromTrack = 0;
    *(_BYTE *)(v8 + 1) = 1;
    goto LABEL_9;
  }
  v31 = TrackCount;
  SourceFromTrack = 0;
  for (i = 0; i != v31; ++i)
  {
    TrackForTrackIndex = MovieInformationFindTrackForTrackIndex(*(_QWORD *)(v29 + 24), i);
    if (TrackForTrackIndex)
    {
      v34 = TrackForTrackIndex;
      Storage = MutableMovieTrackGetStorage(a1, *(_DWORD *)(TrackForTrackIndex + 144));
      if (Storage)
      {
        v36 = Storage;
        if (!*((_BYTE *)Storage + 124))
        {
          if (*(int *)(v34 + 816) >= 1)
          {
            v37 = *(CMTime **)(v29 + 24);
            time1 = time2;
            SourceFromTrack = MovieTrackInsertEmptySegment(v37, v34, (__int128 *)&time1.start.value);
          }
          *((_BYTE *)v36 + 124) = 1;
          *((_BYTE *)v36 + 56) = (_DWORD)SourceFromTrack == 0;
        }
      }
    }
  }
  MovieInformationUnlockForRead(*(_QWORD *)(v29 + 24));
  if (!(_DWORD)SourceFromTrack)
    goto LABEL_79;
LABEL_9:
  releaseSourceArray(Mutable);
  if (cf)
    CFRelease(cf);
  if (v8)
    *(_QWORD *)(v8 + 72) = 0;
  return SourceFromTrack;
}

uint64_t MutableMovie_AddTrackReferenceToTrack(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t result;
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t v11;

  result = 4294950861;
  if (a1 && a3 && a4)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      v10 = DerivedStorage;
      if (*(_BYTE *)DerivedStorage)
      {
        return 4294950869;
      }
      else
      {
        result = MovieInformationLockForWrite(*(_QWORD *)(DerivedStorage + 24));
        if (!(_DWORD)result)
        {
          v11 = MovieInformationAddOneTrackReference(*(uint64_t **)(v10 + 24), a2, a3, a4);
          MovieInformationUnlockForWrite(*(_QWORD *)(v10 + 24));
          *(_BYTE *)(v10 + 1) = 1;
          return v11;
        }
      }
    }
    else
    {
      return 4294950861;
    }
  }
  return result;
}

uint64_t MutableMovie_DeleteTrackReferenceToTrack(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t result;
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t v11;

  result = 4294950861;
  if (a1 && a3 && a4)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      v10 = DerivedStorage;
      if (*(_BYTE *)DerivedStorage)
      {
        return 4294950869;
      }
      else
      {
        result = MovieInformationLockForWrite(*(_QWORD *)(DerivedStorage + 24));
        if (!(_DWORD)result)
        {
          v11 = MovieInformationRemoveOneTrackReference(*(uint64_t **)(v10 + 24), a2, a3, a4);
          MovieInformationUnlockForWrite(*(_QWORD *)(v10 + 24));
          *(_BYTE *)(v10 + 1) = 1;
          return v11;
        }
      }
    }
    else
    {
      return 4294950861;
    }
  }
  return result;
}

uint64_t MutableMovie_CopyAsset(const void *a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  CFAllocatorRef v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t DerivedStorage;
  uint64_t v12;
  uint64_t (*v13)(const void *, uint64_t, uint64_t, CFTypeRef *);
  uint64_t v14;
  const void *v15;
  CFTypeRef cf;
  CFTypeRef v18;

  v18 = 0;
  v8 = CFGetAllocator(a1);
  v9 = 4294950861;
  if (a1)
  {
    if (a4)
    {
      v10 = (uint64_t)v8;
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (DerivedStorage)
      {
        v12 = DerivedStorage;
        if (!(_DWORD)a2)
        {
          v15 = *(const void **)(DerivedStorage + 104);
          if (v15)
          {
            v18 = CFRetain(v15);
            goto LABEL_14;
          }
        }
        cf = 0;
        v13 = *(uint64_t (**)(const void *, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 8);
        if (v13)
        {
          v14 = v13(a1, a2, a3, &cf);
          if ((_DWORD)v14)
            return v14;
          v9 = FigAssetCreateWithFormatReader(v10, cf, (unint64_t)(*(_BYTE *)(v12 + 2) != 0) << 8, 0, &v18);
          CFRelease(cf);
          if (!(_DWORD)a2 && !(_DWORD)v9)
          {
            *(_QWORD *)(v12 + 104) = CFRetain(v18);
LABEL_14:
            v9 = 0;
            *a4 = v18;
            return v9;
          }
          if (!(_DWORD)v9)
            goto LABEL_14;
        }
        else
        {
          return 4294954514;
        }
      }
    }
  }
  return v9;
}

uint64_t MutableMovie_WriteHeaderToByteStream(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  _BYTE *DerivedStorage;

  if (a1 && a2 && a3 && (DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage()) != 0 && !*DerivedStorage)
    return writeHeaderToByteStream(a1, a2, a3, a4);
  else
    return FigSignalErrorAt();
}

uint64_t MutableMovie_AddByteStreamForMediaDataStrage(uint64_t a1, const void *a2)
{
  _BYTE *DerivedStorage;
  uint64_t v5;
  uint64_t CMBaseObject;
  uint64_t (*v7)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v8;
  uint64_t ByteStreamForTrackStorageURL;
  uint64_t v11;
  CFTypeRef cf;

  v11 = -1;
  cf = 0;
  if (!a1
    || !a2
    || (DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage()) == 0
    || (v5 = (uint64_t)DerivedStorage, *DerivedStorage))
  {
    v8 = FigSignalErrorAt();
    goto LABEL_10;
  }
  CMBaseObject = CMByteStreamGetCMBaseObject();
  v7 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v7)
  {
    v8 = v7(CMBaseObject, *MEMORY[0x1E0CA2098], *MEMORY[0x1E0C9AE00], &cf);
    if ((_DWORD)v8)
    {
LABEL_10:
      ByteStreamForTrackStorageURL = v8;
      goto LABEL_12;
    }
    ByteStreamForTrackStorageURL = getByteStreamForTrackStorageURL(a1, cf, 0, &v11);
    if (!(_DWORD)ByteStreamForTrackStorageURL && v11 == -1)
    {
      v8 = createStreamInfoForByteStream(a2, v5, &v11);
      goto LABEL_10;
    }
  }
  else
  {
    ByteStreamForTrackStorageURL = 4294954514;
  }
LABEL_12:
  if (cf)
    CFRelease(cf);
  return ByteStreamForTrackStorageURL;
}

uint64_t writeHeaderToByteStream(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t DerivedStorage;
  uint64_t CMBaseObject;
  uint64_t (*v10)(uint64_t, _QWORD, _QWORD, CFURLRef *);
  const __CFAllocator *v11;
  uint64_t LastAtomTypeAndOffsetAndLength;
  const __CFString *v13;
  const __CFString *v14;
  const __CFArray *v15;
  CFIndex Count;
  CFIndex v17;
  CFIndex i;
  _QWORD *ValueAtIndex;
  _QWORD *v20;
  uint64_t v21;
  CFTypeID v22;
  BOOL v23;
  uint64_t (*v24)(uint64_t, _QWORD, uint64_t *);
  char v25;
  uint64_t appended;
  CMBlockBufferRef v27;
  OpaqueCMBlockBuffer *v28;
  uint64_t (*v29)(uint64_t, _QWORD, CMBlockBufferRef *);
  uint64_t v30;
  int64_t DataLength;
  uint64_t CurrentAtomGlobalOffset;
  uint64_t AtomWithType;
  _BOOL4 v34;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t, const char *, _QWORD);
  BOOL v38;
  char v39;
  uint64_t v40;
  size_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD);
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD);
  uint64_t (*v46)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD);
  uint64_t (*v47)(uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD);
  uint64_t v48;
  uint64_t (*v49)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD);
  int v50;
  size_t v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t, uint64_t, int *, _QWORD);
  const void *v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD);
  int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t, uint64_t, uint64_t, const char *, _QWORD);
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t, uint64_t, CMBlockBufferRef *, _QWORD);
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t, const char *, _QWORD);
  uint64_t v65;
  uint64_t (*v66)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD);
  uint64_t v67;
  uint64_t (*v68)(uint64_t, uint64_t, uint64_t, unsigned int *, _QWORD);
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t, uint64_t, CMBlockBufferRef *, _QWORD);
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  CMBlockBufferRef v76;
  void *ptr;
  CFURLRef url;
  uint64_t v79;
  uint64_t v80;
  int v81;
  CMBlockBufferRef theBuffer[2];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;

  ptr = 0;
  url = 0;
  v76 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObject = CMByteStreamGetCMBaseObject();
  v10 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFURLRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v10)
    goto LABEL_142;
  v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  LastAtomTypeAndOffsetAndLength = v10(CMBaseObject, *MEMORY[0x1E0CA2098], *MEMORY[0x1E0C9AE00], &url);
  if ((_DWORD)LastAtomTypeAndOffsetAndLength)
    goto LABEL_148;
  v13 = CFURLCopyPathExtension(url);
  if (v13)
  {
    v14 = v13;
    FigGetFileTypeForMovieFamilyExtension(v13);
    CFRelease(v14);
    if (!FigCFEqual())
    {
      appended = 4294950874;
      goto LABEL_143;
    }
  }
  v15 = *(const __CFArray **)(DerivedStorage + 56);
  if (v15)
  {
    Count = CFArrayGetCount(v15);
    if (Count >= 1)
    {
      v17 = Count;
      for (i = 0; i != v17; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 56), i);
        if (ValueAtIndex)
        {
          v20 = ValueAtIndex;
          if (*((_DWORD *)ValueAtIndex + 30) == 1)
          {
            v21 = ValueAtIndex[16];
            if (v21)
            {
              releaseSource(v11, v21);
              v20[16] = 0;
            }
          }
        }
      }
    }
  }
  v23 = !a4
     || (v22 = CFGetTypeID(a4), v22 != CFDictionaryGetTypeID())
     || CFDictionaryGetValue((CFDictionaryRef)a4, CFSTR("WriteFileTypeAtom")) != (const void *)*MEMORY[0x1E0C9AE40];
  LastAtomTypeAndOffsetAndLength = createMovieHeaderMakerFromMiP(a1, *(const void **)(DerivedStorage + 24), &ptr);
  if ((_DWORD)LastAtomTypeAndOffsetAndLength)
    goto LABEL_148;
  LastAtomTypeAndOffsetAndLength = MovieHeaderMakerCopyMovieHeaderAsBlockBuffer((uint64_t)ptr, v11, a2, url, &v76);
  if ((_DWORD)LastAtomTypeAndOffsetAndLength)
    goto LABEL_148;
  v75 = 0;
  v24 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v24)
    goto LABEL_142;
  LastAtomTypeAndOffsetAndLength = v24(a3, 0, &v75);
  if ((_DWORD)LastAtomTypeAndOffsetAndLength)
    goto LABEL_148;
  v25 = !v23;
  if (v75)
    v25 = 1;
  if ((v25 & 1) != 0)
  {
    v73 = -1;
    v74 = -1;
    v72 = 1752524863;
    DataLength = CMBlockBufferGetDataLength(v76);
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    *(_OWORD *)theBuffer = 0u;
    CurrentAtomGlobalOffset = FigAtomStreamInitWithByteStream();
    if (!(_DWORD)CurrentAtomGlobalOffset)
    {
      AtomWithType = FigAtomStreamPositionAtFirstAtomWithType();
      if ((_DWORD)AtomWithType == -12890)
      {
        v74 = -1;
        goto LABEL_50;
      }
      appended = AtomWithType;
      if ((_DWORD)AtomWithType)
      {
LABEL_44:
        if ((_DWORD)appended && (_DWORD)appended != -12894)
          goto LABEL_143;
LABEL_50:
        v34 = -DataLength > 7 || DataLength >= 0;
        if (DataLength <= 0 && v34)
          goto LABEL_66;
        theBuffer[0] = 0;
        LastAtomTypeAndOffsetAndLength = getLastAtomTypeAndOffsetAndLength(a3, &v72, &v73, theBuffer);
        if ((_DWORD)LastAtomTypeAndOffsetAndLength)
          goto LABEL_148;
        if (v72 == 1836019574 || v72 == 1718773093)
        {
          LastAtomTypeAndOffsetAndLength = CMByteStreamWriteBlockBuffer();
          if ((_DWORD)LastAtomTypeAndOffsetAndLength)
            goto LABEL_148;
          v36 = v74;
          if (v74 == -1 || v74 == v73)
            goto LABEL_66;
        }
        else
        {
          LODWORD(v80) = 0;
          v55 = v73;
          v56 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 8);
          if (!v56)
            goto LABEL_142;
          LastAtomTypeAndOffsetAndLength = v56(a3, 4, v55, &v80, 0);
          if ((_DWORD)LastAtomTypeAndOffsetAndLength)
            goto LABEL_148;
          v57 = v80;
          LODWORD(v80) = bswap32(v80);
          if (!v57)
          {
            v58 = theBuffer[0];
            if ((uint64_t)theBuffer[0] > 0xFFFFFFFFLL)
            {
              if (!precedingAtomIsWideAtom(a3, v73))
              {
                appended = 4294950860;
                goto LABEL_143;
              }
              v63 = v74;
              if (v74 != -1)
              {
                v64 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 16);
                if (!v64)
                  goto LABEL_142;
                LastAtomTypeAndOffsetAndLength = v64(a3, 4, v63 + 4, "free", 0);
                if ((_DWORD)LastAtomTypeAndOffsetAndLength)
                  goto LABEL_148;
              }
              v65 = v73 - 8;
              v73 -= 8;
              theBuffer[0] = (CMBlockBufferRef)((char *)theBuffer[0] + 8);
              LODWORD(v80) = 0x1000000;
              v66 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 16);
              if (!v66)
                goto LABEL_142;
              LastAtomTypeAndOffsetAndLength = v66(a3, 4, v65, &v80, 0);
              if ((_DWORD)LastAtomTypeAndOffsetAndLength)
                goto LABEL_148;
              v72 = bswap32(v72);
              v67 = v73;
              v68 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 16);
              if (!v68)
              {
LABEL_142:
                appended = 4294954514;
                goto LABEL_143;
              }
              LastAtomTypeAndOffsetAndLength = v68(a3, 4, v67 + 4, &v72, 0);
              if ((_DWORD)LastAtomTypeAndOffsetAndLength)
                goto LABEL_148;
              theBuffer[0] = (CMBlockBufferRef)bswap64((unint64_t)theBuffer[0]);
              v69 = v73;
              v70 = *(void (**)(uint64_t, uint64_t, uint64_t, CMBlockBufferRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                 + 16);
              if (v70)
                v70(a3, 8, v69 + 8, theBuffer, 0);
            }
            else
            {
              v59 = v74;
              if (v74 != -1)
              {
                v60 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 16);
                if (!v60)
                  goto LABEL_142;
                LastAtomTypeAndOffsetAndLength = v60(a3, 4, v59 + 4, "free", 0);
                if ((_DWORD)LastAtomTypeAndOffsetAndLength)
                  goto LABEL_148;
                v58 = theBuffer[0];
              }
              theBuffer[0] = (CMBlockBufferRef)bswap32(v58);
              v61 = v73;
              v62 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CMBlockBufferRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
              if (!v62)
                goto LABEL_142;
              LastAtomTypeAndOffsetAndLength = v62(a3, 4, v61, theBuffer, 0);
              if ((_DWORD)LastAtomTypeAndOffsetAndLength)
                goto LABEL_148;
            }
            LastAtomTypeAndOffsetAndLength = CMByteStreamWriteBlockBuffer();
            if ((_DWORD)LastAtomTypeAndOffsetAndLength)
              goto LABEL_148;
LABEL_66:
            theBuffer[0] = 0;
            LODWORD(v80) = 0;
            if (a2)
              v38 = a3 == 0;
            else
              v38 = 1;
            v39 = v38;
            if (!v38)
            {
              v40 = copyFileTypeAtomAsBlockBuffer(a2, theBuffer);
              if ((_DWORD)v40)
                goto LABEL_155;
              v41 = CMBlockBufferGetDataLength(theBuffer[0]);
              if (v41 <= 0x20)
              {
                v42 = v41;
                v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 8);
                if (!v43)
                {
LABEL_90:
                  appended = 4294954514;
                  goto LABEL_91;
                }
                v40 = v43(a3, 4, 4, &v80, 0);
                if (!(_DWORD)v40)
                {
                  if ((_DWORD)v80 == 1952539757)
                  {
                    v44 = 8;
                    while (1)
                    {
                      v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
                      if (!v45)
                        goto LABEL_90;
                      v40 = v45(a3, 4, v44, &v80, 0);
                      if ((_DWORD)v40)
                        goto LABEL_155;
                      if ((_DWORD)v80 != 1887007846)
                        break;
                      v44 += 4;
                      if (v44 == 32)
                      {
                        appended = CMByteStreamWriteBlockBuffer();
                        if (!(_DWORD)appended)
                        {
                          LOBYTE(v79) = 0;
                          if (v42 <= 31)
                          {
                            do
                            {
                              v46 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
                              if (v46)
                                appended = v46(a3, 1, v42, &v79, 0);
                              else
                                appended = 4294954514;
                              ++v42;
                            }
                            while (v42 != 32);
                          }
                        }
                        goto LABEL_91;
                      }
                    }
                  }
                  appended = 0;
LABEL_91:
                  if (theBuffer[0])
                    CFRelease(theBuffer[0]);
                  if ((_DWORD)appended)
                    goto LABEL_143;
                  theBuffer[0] = 0;
                  LODWORD(v80) = 0;
                  LODWORD(v79) = 0;
                  if ((v39 & 1) != 0)
                  {
LABEL_152:
                    v48 = FigSignalErrorAt();
                    goto LABEL_153;
                  }
                  v47 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 8);
                  if (v47)
                  {
                    v48 = v47(a3, 4, 0, &v80, 0);
                    if ((_DWORD)v48)
                      goto LABEL_153;
                    v49 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                 + 8);
                    if (v49)
                    {
                      v48 = v49(a3, 4, 4, &v79, 0);
                      if (!(_DWORD)v48)
                      {
                        LODWORD(v80) = bswap32(v80);
                        v50 = v79;
                        LODWORD(v79) = bswap32(v79);
                        if (v50 != 1887007846)
                        {
                          appended = 0;
LABEL_110:
                          if (theBuffer[0])
                            CFRelease(theBuffer[0]);
                          goto LABEL_112;
                        }
                        v48 = copyFileTypeAtomAsBlockBuffer(a2, theBuffer);
                        if (!(_DWORD)v48)
                        {
                          v51 = CMBlockBufferGetDataLength(theBuffer[0]);
                          if (v51 <= v80)
                          {
                            v52 = v51;
                            appended = CMByteStreamWriteBlockBuffer();
                            if (!(_DWORD)appended)
                            {
                              LOBYTE(v81) = 0;
                              while (v52 < v80)
                              {
                                v53 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
                                if (v53)
                                  appended = v53(a3, 1, v52, &v81, 0);
                                else
                                  appended = 4294954514;
                                ++v52;
                              }
                            }
                            goto LABEL_110;
                          }
                          goto LABEL_152;
                        }
                      }
LABEL_153:
                      appended = v48;
                      goto LABEL_110;
                    }
                  }
                  appended = 4294954514;
                  goto LABEL_110;
                }
LABEL_155:
                appended = v40;
                goto LABEL_91;
              }
            }
            v40 = FigSignalErrorAt();
            goto LABEL_155;
          }
          LastAtomTypeAndOffsetAndLength = CMByteStreamWriteBlockBuffer();
          if ((_DWORD)LastAtomTypeAndOffsetAndLength)
            goto LABEL_148;
          v36 = v74;
          if (v74 == -1)
            goto LABEL_66;
        }
        v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 16);
        if (!v37)
          goto LABEL_142;
        LastAtomTypeAndOffsetAndLength = v37(a3, 4, v36 + 4, "free", 0);
        if ((_DWORD)LastAtomTypeAndOffsetAndLength)
          goto LABEL_148;
        goto LABEL_66;
      }
      CurrentAtomGlobalOffset = FigAtomStreamGetCurrentAtomGlobalOffset();
    }
    appended = CurrentAtomGlobalOffset;
    goto LABEL_44;
  }
  theBuffer[0] = 0;
  if (!a2 || !a3)
  {
    appended = FigSignalErrorAt();
    if ((_DWORD)appended)
      goto LABEL_143;
LABEL_31:
    v28 = v76;
    theBuffer[0] = 0;
    if (!v76 || !a3)
    {
      v30 = FigSignalErrorAt();
      goto LABEL_36;
    }
    v29 = *(uint64_t (**)(uint64_t, _QWORD, CMBlockBufferRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 24);
    if (v29)
    {
      LastAtomTypeAndOffsetAndLength = v29(a3, 0, theBuffer);
      if (!(_DWORD)LastAtomTypeAndOffsetAndLength)
      {
        CMBlockBufferGetDataLength(v28);
        v30 = CMByteStreamWriteBlockBuffer();
LABEL_36:
        appended = v30;
LABEL_112:
        if (!(_DWORD)appended)
        {
          v54 = *(const void **)(DerivedStorage + 8);
          if (v54 && CFEqual(url, v54))
          {
            appended = 0;
            *(_BYTE *)(DerivedStorage + 1) = 0;
          }
          else
          {
            appended = 0;
          }
        }
        goto LABEL_143;
      }
LABEL_148:
      appended = LastAtomTypeAndOffsetAndLength;
      goto LABEL_143;
    }
    goto LABEL_142;
  }
  appended = copyFileTypeAtomAsBlockBuffer(a2, theBuffer);
  v27 = theBuffer[0];
  if (!(_DWORD)appended)
  {
    CMBlockBufferGetDataLength(theBuffer[0]);
    appended = CMByteStreamAppendBlockBuffer();
    v27 = theBuffer[0];
  }
  if (v27)
    CFRelease(v27);
  if (!(_DWORD)appended)
    goto LABEL_31;
LABEL_143:
  if (v76)
    CFRelease(v76);
  MovieHeaderMakerRelease((const __CFAllocator **)ptr);
  if (url)
    CFRelease(url);
  return appended;
}

uint64_t createMovieHeaderMakerFromMiP(uint64_t a1, const void *a2, _QWORD *a3)
{
  _BYTE *DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t TrackCount;
  uint64_t v10;
  uint64_t v11;
  uint64_t TrackForTrackIndex;
  const void *v13;
  uint64_t BasicInfo;
  _DWORD *Storage;
  const void *v16;
  int v18;
  uint64_t v19;
  uint64_t v20;

  v20 = 0;
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    v7 = 4294950861;
    goto LABEL_20;
  }
  if (*DerivedStorage)
  {
    v7 = 4294950869;
    goto LABEL_20;
  }
  v7 = 4294950861;
  if (a2 && a3)
  {
    v8 = MovieInformationLockForRead((uint64_t)a2);
    if (!(_DWORD)v8)
    {
      v8 = MovieHeaderMakerCreateWithMovieInformation((const __CFAllocator *)*MEMORY[0x1E0C9AE00], a2, 0, &v20);
      if (!(_DWORD)v8)
      {
        if (v20)
        {
          TrackCount = MovieInformationGetTrackCount((uint64_t)a2);
          if (TrackCount < 1)
          {
LABEL_18:
            v7 = 0;
          }
          else
          {
            v10 = TrackCount;
            v11 = 0;
            while (1)
            {
              v19 = 0;
              TrackForTrackIndex = MovieInformationFindTrackForTrackIndex((uint64_t)a2, v11);
              v18 = 0;
              if (!TrackForTrackIndex)
                break;
              v13 = (const void *)TrackForTrackIndex;
              BasicInfo = MovieTrackGetBasicInfo(TrackForTrackIndex, 0, &v18);
              if ((_DWORD)BasicInfo)
                goto LABEL_23;
              if (!v18)
                break;
              BasicInfo = MovieHeaderMakerAddTrack(v20, v13, &v19);
              if ((_DWORD)BasicInfo
                || (Storage = MutableMovieTrackGetStorage(a1, v18)) != 0
                && (v16 = (const void *)*((_QWORD *)Storage + 6)) != 0
                && (BasicInfo = MovieHeaderMakerTrackSetSampleReferenceBaseURL(v20, v19, v16), (_DWORD)BasicInfo))
              {
LABEL_23:
                v7 = BasicInfo;
                goto LABEL_19;
              }
              if (v10 == ++v11)
                goto LABEL_18;
            }
            v7 = 4294950872;
          }
LABEL_19:
          MovieInformationUnlockForRead((uint64_t)a2);
          goto LABEL_20;
        }
        v8 = FigSignalErrorAt();
      }
    }
    v7 = v8;
    goto LABEL_21;
  }
LABEL_20:
  if (a3)
LABEL_21:
    *a3 = v20;
  return v7;
}

uint64_t getLastAtomTypeAndOffsetAndLength(uint64_t a1, _DWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;
  int Atom;

  result = FigAtomStreamInitWithByteStream();
  if ((_DWORD)result != -12893)
  {
    if ((_DWORD)result)
      goto LABEL_7;
    do
      Atom = FigAtomStreamAdvanceToNextAtom();
    while (!Atom);
    if (Atom == -12890)
    {
      result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
      if (!(_DWORD)result)
        result = FigAtomStreamGetCurrentAtomGlobalOffset();
LABEL_7:
      if (!a2)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  result = 0;
  if (a2)
LABEL_8:
    *a2 = 1752524863;
LABEL_9:
  if (a3)
    *a3 = 0;
  if (a4)
    *a4 = 0;
  return result;
}

BOOL precedingAtomIsWideAtom(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v4;
  unsigned __int16 (*v6)(uint64_t, uint64_t, uint64_t, int *, _QWORD);
  unsigned __int16 (*v7)(uint64_t, uint64_t, uint64_t, int *, _QWORD);
  int v9;
  int v10;

  result = 0;
  v9 = 1752524863;
  v10 = 0;
  v4 = a2 - 8;
  if (a2 >= 8)
  {
    v6 = *(unsigned __int16 (**)(uint64_t, uint64_t, uint64_t, int *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 8);
    if (!v6)
      return 0;
    if (v6(a1, 4, v4, &v10, 0))
      return 0;
    v7 = *(unsigned __int16 (**)(uint64_t, uint64_t, uint64_t, int *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 8);
    return v7 && !v7(a1, 4, a2 - 4, &v9, 0) && v10 == 0x8000000 && v9 == 1701079415;
  }
  return result;
}

_DWORD *MutableMovieTrackGetStorage(uint64_t a1, int a2)
{
  _DWORD *v2;
  uint64_t DerivedStorage;
  uint64_t v5;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  _DWORD *ValueAtIndex;

  v2 = 0;
  if (a1 && a2)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!DerivedStorage)
      return 0;
    v5 = DerivedStorage;
    if (*(_BYTE *)DerivedStorage)
    {
      return 0;
    }
    else
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 48));
      v6 = *(const __CFArray **)(v5 + 56);
      if (v6 && (Count = CFArrayGetCount(v6), Count >= 1))
      {
        v8 = Count;
        v9 = 0;
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 56), v9);
          if (ValueAtIndex)
          {
            v2 = ValueAtIndex;
            if (ValueAtIndex[1] == a2)
              break;
          }
          if (v8 == ++v9)
            goto LABEL_11;
        }
      }
      else
      {
LABEL_11:
        v2 = 0;
      }
      MEMORY[0x19402EF04](*(_QWORD *)(v5 + 48));
    }
  }
  return v2;
}

uint64_t copyFileTypeAtomAsBlockBuffer(uint64_t a1, CMBlockBufferRef *a2)
{
  const __CFAllocator *v4;
  uint64_t v5;
  uint64_t v6;
  CFTypeRef v7;
  uint64_t v8;
  CFTypeRef cf;
  CFTypeRef v11;
  CFTypeRef v12;

  v11 = 0;
  v12 = 0;
  cf = 0;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v5 = MovieHeaderMakerCopyFileTypeMajorBrand(*MEMORY[0x1E0C9AE00], a1, 0, 0, (CFNumberRef *)&v12);
  if ((_DWORD)v5
    || (v5 = MovieHeaderMakerCopyFileTypeMinorVersion((uint64_t)v4, a1, 0, 0, (CFNumberRef *)&v11), (_DWORD)v5))
  {
    v8 = v5;
  }
  else
  {
    v6 = MovieHeaderMakerCopyFileTypeCompatibleBrands(v4, a1, 0, 0, (CFMutableArrayRef *)&cf);
    v7 = cf;
    if (!(_DWORD)v6)
    {
      v8 = MovieHeaderMakerCopyFileTypeAtomAsBlockBuffer(v4, (const __CFNumber *)v12, (const __CFNumber *)v11, (CFArrayRef)cf, a2);
      v7 = cf;
      if (!cf)
        goto LABEL_6;
      goto LABEL_5;
    }
    v8 = v6;
    if (cf)
LABEL_5:
      CFRelease(v7);
  }
LABEL_6:
  if (v11)
    CFRelease(v11);
  if (v12)
    CFRelease(v12);
  return v8;
}

uint64_t writeBlockBufferToCFData(CMBlockBufferRef sourceBuffer, __CFData *a2)
{
  uint64_t v3;
  uint64_t DataPointer;
  size_t totalLengthOut;
  char *dataPointerOut;
  CMBlockBufferRef blockBufferOut;

  dataPointerOut = 0;
  blockBufferOut = 0;
  totalLengthOut = 0;
  if (!sourceBuffer || !a2)
  {
    v3 = FigSignalErrorAt();
    goto LABEL_10;
  }
  v3 = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E0C9AE00], sourceBuffer, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, 0, &blockBufferOut);
  if ((_DWORD)v3)
  {
LABEL_10:
    DataPointer = v3;
    goto LABEL_6;
  }
  DataPointer = CMBlockBufferGetDataPointer(blockBufferOut, 0, 0, &totalLengthOut, &dataPointerOut);
  if (!(_DWORD)DataPointer)
    CFDataAppendBytes(a2, (const UInt8 *)dataPointerOut, totalLengthOut);
LABEL_6:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  return DataPointer;
}

uint64_t createMutableMovieTrackObject(const __CFAllocator *a1, const void *a2, const void *a3, CFAllocatorRef *a4, uint64_t *a5)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t BasicInfo;
  CFTypeRef v13;
  _BYTE *v14;
  uint64_t v15;
  CMTime v17;
  uint64_t v18;
  uint64_t v19;

  v18 = 0;
  v19 = 0;
  if (!a5)
    return 4294950861;
  v10 = CFAllocatorAllocate(a1, 136, 0);
  if (v10)
  {
    v11 = (uint64_t)v10;
    v10[16] = 0;
    *((_OWORD *)v10 + 6) = 0u;
    *((_OWORD *)v10 + 7) = 0u;
    *((_OWORD *)v10 + 4) = 0u;
    *((_OWORD *)v10 + 5) = 0u;
    *((_OWORD *)v10 + 2) = 0u;
    *((_OWORD *)v10 + 3) = 0u;
    *(_OWORD *)v10 = 0u;
    *((_OWORD *)v10 + 1) = 0u;
    v10[8] = -1;
    BasicInfo = MovieTrackGetBasicInfo((uint64_t)a3, (_DWORD *)&v19 + 1, &v19);
    if ((_DWORD)BasicInfo
      || (BasicInfo = MediaDataChunkWriterAddTrack(a4, SHIDWORD(v19), 1, (uint64_t)chunkCallback_0, v11, &v18),
          (_DWORD)BasicInfo)
      || (BasicInfo = MediaDataChunkWriterTrackSetPreferredChunkAlignment((uint64_t)a4, v18, 0), (_DWORD)BasicInfo)
      || (*(_OWORD *)&v17.value = kFigMutableMovie_DefaultPreferredChunkDuration,
          v17.epoch = 0,
          BasicInfo = MediaDataChunkWriterTrackSetPreferredChunkDuration((uint64_t)a4, v18, &v17),
          (_DWORD)BasicInfo)
      || (BasicInfo = MediaDataChunkWriterTrackSetPreferredChunkSize((uint64_t)a4, v18, 0x100000), (_DWORD)BasicInfo))
    {
      v15 = BasicInfo;
      releaseTrack(a1, (_QWORD *)v11);
    }
    else
    {
      *(_DWORD *)v11 = HIDWORD(v19);
      *(_DWORD *)(v11 + 4) = v19;
      if (a2)
        v13 = CFRetain(a2);
      else
        v13 = 0;
      *(_QWORD *)(v11 + 8) = v13;
      if (a3)
        v14 = CFRetain(a3);
      else
        v14 = 0;
      *(_QWORD *)(v11 + 16) = v14;
      *(_QWORD *)(v11 + 24) = a4;
      *(_QWORD *)(v11 + 32) = v18;
      *(_DWORD *)(v11 + 120) = 0;
      *(_BYTE *)(v11 + 124) = 0;
      if (*(_DWORD *)v11 == 1953325924)
        v14[883] = 1;
      v15 = 0;
      *a5 = v11;
    }
    return v15;
  }
  return FigSignalErrorAt();
}

void syncPropertiesOfNewTrackWithSourceTrackUsingTrackReaderOrOptionsDictionary(uint64_t a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4)
{
  _QWORD v8[2];

  setTrackPropertyFromTrackReaderOrOptionsDictionary(a1, a2, CFSTR("TrackEnabled"), a3, a4);
  setTrackPropertyFromTrackReaderOrOptionsDictionary(a1, a2, CFSTR("TrackLanguageCode"), a3, a4);
  setTrackPropertyFromTrackReaderOrOptionsDictionary(a1, a2, CFSTR("ExtendedLanguageTagString"), a3, a4);
  setTrackPropertyFromTrackReaderOrOptionsDictionary(a1, a2, CFSTR("TrackTimescale"), a3, a4);
  setTrackPropertyFromTrackReaderOrOptionsDictionary(a1, a2, CFSTR("Volume"), a3, a4);
  setTrackPropertyFromTrackReaderOrOptionsDictionary(a1, a2, CFSTR("TrackMatrix"), a3, a4);
  if (a4)
  {
    v8[0] = a1;
    v8[1] = a2;
    CFDictionaryApplyFunction(a4, (CFDictionaryApplierFunction)setTrackPropertiesFromOptionsDictionary, v8);
  }
}

uint64_t chunkCallback_0(int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t *a9, const __CFArray *a10, uint64_t a11, uint64_t a12)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _QWORD *v20;
  _OWORD *v21;
  __int128 v22;
  CMTime time2;
  CMTime time1;
  __int128 v25;
  _BYTE v26[32];
  CMTime v27;
  CMTime v28;

  v28 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v27 = v28;
  if (!a12)
    return 4294950861;
  result = MovieTrackAppendSampleInformation(*(_QWORD *)(a12 + 8), *(_QWORD *)(a12 + 16), a1, a2, a4, a5, a6, a7, a8, a9, a10, a11, (uint64_t)&v28, (uint64_t)&v27);
  if (!(_DWORD)result)
  {
    v13 = *(_QWORD *)(a12 + 128);
    if (v13)
    {
      if (*(_DWORD *)(a12 + 120) != 1)
      {
        v14 = *(_QWORD *)(v13 + 96);
        if ((v14 & 0x8000000000000000) == 0)
        {
          v15 = *(_QWORD **)(v13 + 88);
          if (v15)
          {
            if (v14 < v15[1])
            {
              v16 = *v15 + 48 * v14;
              v17 = *(_OWORD *)(v16 + 16);
              v25 = *(_OWORD *)v16;
              *(_OWORD *)v26 = v17;
              *(_OWORD *)&v26[16] = *(_OWORD *)(v16 + 32);
              time1 = v28;
              v18 = *(_OWORD *)v16;
              time2.epoch = *(_QWORD *)(v16 + 16);
              *(_OWORD *)&time2.value = v18;
              if (CMTimeCompare(&time1, &time2) < 0)
              {
                time1 = v28;
                time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
                if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
                {
                  v25 = *(_OWORD *)&v28.value;
                  *(_QWORD *)v26 = v28.epoch;
                }
              }
              time1 = v27;
              time2 = *(CMTime *)&v26[8];
              if (CMTimeCompare(&time1, &time2) < 0)
                *(CMTime *)&v26[8] = v27;
              v19 = *(_QWORD *)(a12 + 128);
              v20 = *(_QWORD **)(v19 + 88);
              if (v20)
              {
                v21 = (_OWORD *)(*v20 + 48 * *(_QWORD *)(v19 + 96));
                v22 = *(_OWORD *)v26;
                *v21 = v25;
                v21[1] = v22;
                v21[2] = *(_OWORD *)&v26[16];
              }
            }
          }
        }
      }
    }
    if ((*(_BYTE *)(a12 + 84) & 1) == 0)
      *(CMTime *)(a12 + 72) = v28;
    result = 0;
    if ((*(_BYTE *)(a12 + 108) & 1) == 0)
      *(CMTime *)(a12 + 96) = v27;
  }
  return result;
}

void setTrackPropertyFromTrackReaderOrOptionsDictionary(uint64_t a1, uint64_t a2, const __CFString *cf1, uint64_t a4, const __CFDictionary *a5)
{
  const __CFString *v10;
  const void *Value;
  void (*v12)(uint64_t, uint64_t, const __CFString *, const void *);
  uint64_t FigBaseObject;
  unsigned int (*v14)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef v15;
  void (*v16)(uint64_t, uint64_t, const __CFString *, CFTypeRef);
  CFTypeRef cf;

  cf = 0;
  if (CFEqual(cf1, CFSTR("TrackTimescale")))
  {
    v10 = CFSTR("MediaTimeScale");
  }
  else if (CFEqual(cf1, CFSTR("TrackLanguageCode")))
  {
    v10 = CFSTR("LanguageCode");
  }
  else if (CFEqual(cf1, CFSTR("ExtendedLanguageTagString")))
  {
    v10 = CFSTR("ExtendedLanguageTag");
  }
  else if (CFEqual(cf1, CFSTR("TrackFormatDescriptionArray")))
  {
    v10 = CFSTR("FormatDescriptionArray");
  }
  else if (CFEqual(cf1, CFSTR("TrackExcludeFromAutoSelection")))
  {
    v10 = CFSTR("IsExcludedFromAutoselection");
  }
  else if (CFEqual(cf1, CFSTR("TrackIsSelfContained")))
  {
    v10 = CFSTR("IsSelfContained");
  }
  else
  {
    v10 = cf1;
  }
  if (a5 && CFDictionaryContainsKey(a5, cf1))
  {
    Value = CFDictionaryGetValue(a5, cf1);
    v12 = *(void (**)(uint64_t, uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 56);
    if (v12)
      v12(a1, a2, v10, Value);
  }
  else if (a4)
  {
    FigBaseObject = FigTrackReaderGetFigBaseObject(a4);
    v14 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
    if (v14)
    {
      if (!v14(FigBaseObject, cf1, *MEMORY[0x1E0C9AE00], &cf))
      {
        v15 = cf;
        v16 = *(void (**)(uint64_t, uint64_t, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 56);
        if (v16)
          v16(a1, a2, v10, v15);
        if (cf)
          CFRelease(cf);
      }
    }
  }
}

uint64_t setTrackPropertiesFromOptionsDictionary(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);

  if (result && a3)
  {
    v4 = result;
    v5 = *a3;
    v6 = *((unsigned int *)a3 + 2);
    result = CMBaseObjectGetVTable();
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(result + 16) + 56);
    if (v7)
      return v7(v5, v6, v4, a2);
  }
  return result;
}

uint64_t setMediaTimeScaleIfNeeded(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  CMTimeScale MediaTimeScale;

  result = 4294950861;
  if (!a1 || !a2)
    return result;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return 4294950861;
  v6 = *(_QWORD *)(a1 + 128);
  if (!v6)
  {
    MediaTimeScale = MovieTrackGetMediaTimeScale(*(_QWORD *)(a1 + 16));
    if (MediaTimeScale)
      return 0;
    goto LABEL_11;
  }
  v7 = *(_QWORD *)(v6 + 56);
  if (v7 && MediaSampleTimingGeneratorGetMediaTimeScale(v7))
    return 0;
  v8 = MovieTrackGetMediaTimeScale(v5);
  MediaTimeScale = v8;
  if (!v8)
  {
    v9 = *(_DWORD *)(v6 + 8);
    MediaTimeScale = v9;
    if (v9)
    {
LABEL_13:
      result = MovieTrackSetMediaTimeScale(v5, v9);
      if ((_DWORD)result)
        return result;
      v8 = MediaTimeScale;
      goto LABEL_15;
    }
LABEL_11:
    result = FigMovieGetDefaultMediaTimeScaleFromSample(a2, &MediaTimeScale);
    if ((_DWORD)result)
      return result;
    v9 = MediaTimeScale;
    if (MediaTimeScale)
      goto LABEL_13;
    return 0;
  }
LABEL_15:
  result = 0;
  if (v6 && v8)
  {
    result = *(_QWORD *)(v6 + 56);
    if (result)
      return MediaSampleTimingGeneratorSetMediaTimeScale(result, v8);
  }
  return result;
}

uint64_t setVideoTrackDimensionsIfNeeded(uint64_t a1, uint64_t a2, opaqueCMSampleBuffer *a3)
{
  int IsISOFileType;
  const opaqueCMFormatDescription *FormatDescription;
  float VideoDefaultTrackDimensionsFromFormatDescription;
  double v8;
  uint64_t result;
  int v10;
  float VideoDefaultCleanApertureDimensionsFromFormatDescription;
  double v12;
  int v13;
  float VideoDefaultProductionApertureDimensionsFromFormatDescription;
  double v15;
  int v16;
  float VideoDefaultEncodedPixelsDimensionsFromFormatDescription;
  double v18;
  uint64_t v19;

  IsISOFileType = FigFileTypeIsISOFileType();
  FormatDescription = CMSampleBufferGetFormatDescription(a3);
  v19 = 0;
  MovieTrackGetSpatialInformation(a1, (_DWORD *)&v19 + 1, &v19, 0);
  if (*((float *)&v19 + 1) != 0.0 && *(float *)&v19 != 0.0
    || (VideoDefaultTrackDimensionsFromFormatDescription = FigMovieGetVideoDefaultTrackDimensionsFromFormatDescription(FormatDescription, IsISOFileType), *(float *)&v8 = v8, result = MovieTrackSetTrackDimensions(a1, VideoDefaultTrackDimensionsFromFormatDescription, *(float *)&v8), !(_DWORD)result))
  {
    MovieTrackGetCleanApertureDimensions(a1, (float *)&v19 + 1, (float *)&v19);
    if (v10
      || (VideoDefaultCleanApertureDimensionsFromFormatDescription = FigMovieGetVideoDefaultCleanApertureDimensionsFromFormatDescription(FormatDescription),
          *(float *)&v12 = v12,
          result = MovieTrackSetCleanApertureDimensions(a1, VideoDefaultCleanApertureDimensionsFromFormatDescription, *(float *)&v12), !(_DWORD)result))
    {
      MovieTrackGetProductionApertureDimensions(a1, (float *)&v19 + 1, (float *)&v19);
      if (v13
        || (VideoDefaultProductionApertureDimensionsFromFormatDescription = FigMovieGetVideoDefaultProductionApertureDimensionsFromFormatDescription(FormatDescription),
            *(float *)&v15 = v15,
            result = MovieTrackSetProductionApertureDimensions(a1, VideoDefaultProductionApertureDimensionsFromFormatDescription, *(float *)&v15), !(_DWORD)result))
      {
        MovieTrackGetEncodedPixelsDimensions(a1, (float *)&v19 + 1, (float *)&v19);
        if (v16)
        {
          return 0;
        }
        else
        {
          VideoDefaultEncodedPixelsDimensionsFromFormatDescription = FigMovieGetVideoDefaultEncodedPixelsDimensionsFromFormatDescription(FormatDescription);
          *(float *)&v18 = v18;
          return MovieTrackSetEncodedPixelsDimensions(a1, VideoDefaultEncodedPixelsDimensionsFromFormatDescription, *(float *)&v18);
        }
      }
    }
  }
  return result;
}

uint64_t setClosedCaptionTrackDimensionsIfNeeded(uint64_t a1)
{
  uint64_t TrackCount;
  uint64_t v3;
  uint64_t i;
  uint64_t TrackForTrackIndex;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = 0;
  TrackCount = MovieInformationGetTrackCount(a1);
  if (TrackCount < 1)
    return 0;
  v3 = TrackCount;
  for (i = 0; i != v3; ++i)
  {
    TrackForTrackIndex = MovieInformationFindTrackForTrackIndex(a1, i);
    if (MovieTrackGetMediaType(TrackForTrackIndex) == 1986618469)
      MovieTrackGetSpatialInformation(TrackForTrackIndex, (_DWORD *)&v11 + 1, &v11, 0);
  }
  result = 0;
  if (*((float *)&v11 + 1) != 0.0 && *(float *)&v11 != 0.0 && v3 >= 1)
  {
    v8 = 0;
    while (1)
    {
      v9 = MovieInformationFindTrackForTrackIndex(a1, v8);
      if (MovieTrackGetMediaType(v9) == 1668047728)
      {
        v10 = 0;
        MovieTrackGetSpatialInformation(v9, (_DWORD *)&v10 + 1, &v10, 0);
        if (*((float *)&v10 + 1) == 0.0 || *(float *)&v10 == 0.0)
        {
          result = MovieTrackSetTrackDimensions(v9, *((float *)&v11 + 1), *(float *)&v11);
          if ((_DWORD)result)
            break;
        }
      }
      if (v3 == ++v8)
        return 0;
    }
  }
  return result;
}

uint64_t getByteStreamForTrackStorageURL(uint64_t a1, const void *a2, char *a3, uint64_t *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  const __CFArray *v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *ValueAtIndex;
  _QWORD *v18;
  uint64_t CMBaseObject;
  void (*v20)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  CFTypeID v21;
  uint64_t result;
  char *v23;
  uint64_t *v24;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return 4294950861;
  v8 = DerivedStorage;
  v23 = a3;
  v24 = a4;
  v9 = *(const __CFArray **)(DerivedStorage + 64);
  if (v9 && (Count = CFArrayGetCount(v9), Count >= 1))
  {
    v11 = Count;
    v12 = 0;
    v13 = 0;
    v14 = *MEMORY[0x1E0CA2098];
    v15 = *MEMORY[0x1E0C9AE00];
    v16 = -1;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v8 + 64), v12);
      if (!ValueAtIndex)
        return FigSignalErrorAt();
      v18 = ValueAtIndex;
      if (*ValueAtIndex)
      {
        cf = 0;
        CMBaseObject = CMByteStreamGetCMBaseObject();
        v20 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
        if (v20)
          v20(CMBaseObject, v14, v15, &cf);
        if (cf)
        {
          v21 = CFGetTypeID(cf);
          if (v21 == CFURLGetTypeID() && CFEqual(cf, a2))
          {
            if (*((_BYTE *)v18 + 8))
              v13 = 1;
            v16 = v12;
          }
          CFRelease(cf);
        }
      }
      if (v11 == ++v12)
        goto LABEL_19;
    }
  }
  else
  {
    v13 = 0;
    v16 = -1;
LABEL_19:
    if (v23)
      *v23 = v13;
    result = 0;
    if (v24)
      *v24 = v16;
  }
  return result;
}

uint64_t createStreamInfoForByteStream(const void *a1, uint64_t a2, CFIndex *a3)
{
  uint64_t result;
  CFIndex Count;
  _QWORD *v8;
  const void *v9;

  result = 4294950861;
  if (a1 && a2 && a3 && *(_QWORD *)(a2 + 64))
  {
    Count = CFArrayGetCount(*(CFArrayRef *)(a2 + 64));
    v8 = CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 24, 0);
    if (v8)
    {
      v9 = v8;
      *v8 = 0;
      v8[1] = 0;
      v8[2] = 0;
      *v8 = CFRetain(a1);
      CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 64), v9);
      result = 0;
      *a3 = Count;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t writeMdatHeaderIfNecessary(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, unsigned int *, _QWORD);
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  v16 = 0;
  v15 = 1752524863;
  v14 = 0;
  if (a1)
  {
    result = getLastAtomTypeAndOffsetAndLength(*(_QWORD *)a1, &v15, &v16, &v14);
    if (!(_DWORD)result)
    {
      if (v15 != 1835295092)
        goto LABEL_16;
      v13 = 0;
      v7 = *(_QWORD *)a1;
      v8 = v16;
      v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 8);
      if (!v9)
      {
        result = 4294954514;
        if (!a3)
          return result;
        goto LABEL_18;
      }
      result = v9(v7, 4, v8, &v13, 0);
      if (!(_DWORD)result)
      {
        v10 = bswap32(v13);
        v13 = v10;
        if (v10)
        {
          if (v10 == 1)
          {
            if (~v14 < a2)
              goto LABEL_16;
          }
          else if (0xFFFFFFFFLL - v14 < a2 && !precedingAtomIsWideAtom(*(_QWORD *)a1, v16))
          {
LABEL_16:
            result = writeMdatHeader(*(_QWORD *)a1);
            if (!(_DWORD)result)
            {
              v12 = v14 + v16;
              *(_QWORD *)(a1 + 16) = v14 + v16 + 8;
              *(_BYTE *)(a1 + 8) = 1;
              v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, unsigned int *, _QWORD))(v12 + 16);
              if (!a3)
                return result;
              goto LABEL_18;
            }
            goto LABEL_21;
          }
        }
        result = 0;
        v11 = v16;
        *(_QWORD *)(a1 + 16) = v16;
        *(_BYTE *)(a1 + 8) = 1;
        v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, unsigned int *, _QWORD))(v14 + v11);
        if (!a3)
          return result;
        goto LABEL_18;
      }
    }
  }
  else
  {
    result = FigSignalErrorAt();
  }
LABEL_21:
  v9 = 0;
  if (!a3)
    return result;
LABEL_18:
  *a3 = v9;
  return result;
}

uint64_t addSample(CMSampleBufferRef sbuf, uint64_t a2, uint64_t a3)
{
  if (a3)
    return addSampleBufferToTrack_0(*(_QWORD *)a3, *(const void **)(a3 + 8), *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), sbuf);
  else
    return 4294950861;
}

uint64_t addSampleBufferToTrack_0(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, CMSampleBufferRef sbuf)
{
  CMItemCount NumSamples;
  uint64_t v11;
  uint64_t OutputSampleTimingInfoArray;
  void *v13;
  uint64_t v14;
  CMSampleTimingInfo *v15;
  CMSampleTimingInfo *v16;
  uint64_t v17;
  CFAllocatorRef *v18;
  uint64_t v19;
  uint64_t v20;
  const __CFAllocator *v21;
  CFDictionaryRef v22;
  uint64_t IsNonInterleavedPCMAudioSample;
  CMBlockBufferRef DataBuffer;
  size_t *v26;
  uint64_t SampleSizeArray;
  const __CFNumber *v28;
  CFTypeRef v29;
  uint64_t appended;
  uint64_t v31;
  CFAllocatorRef allocator;
  const __CFArray *SampleAttachmentsArray;
  void *v34;
  uint64_t v35;
  CMFormatDescriptionRef FormatDescription;
  CMTime ptr;
  CMTime sizeArrayEntriesNeededOut;
  char v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  CMItemCount timingArrayEntriesNeededOut;
  uint64_t valuePtr;
  CMBlockBufferRef v45;
  _DWORD v46[3];

  NumSamples = CMSampleBufferGetNumSamples(sbuf);
  v42 = 0;
  timingArrayEntriesNeededOut = 0;
  v41 = 0;
  v40 = 0;
  v39 = 0;
  v11 = *(_QWORD *)(a1 + 128);
  OutputSampleTimingInfoArray = CMSampleBufferGetOutputSampleTimingInfoArray(sbuf, 0, 0, &timingArrayEntriesNeededOut);
  if ((_DWORD)OutputSampleTimingInfoArray != -12736)
  {
    v14 = OutputSampleTimingInfoArray;
    if ((_DWORD)OutputSampleTimingInfoArray)
    {
      v13 = 0;
      goto LABEL_23;
    }
    if (!timingArrayEntriesNeededOut)
    {
      v13 = 0;
      v14 = 4294950861;
      goto LABEL_23;
    }
    v13 = 0;
    v14 = 4294950861;
    if ((unint64_t)timingArrayEntriesNeededOut > 0x38E38E38E38E38ELL || !(72 * timingArrayEntriesNeededOut))
      goto LABEL_23;
    v15 = (CMSampleTimingInfo *)malloc_type_malloc(72 * timingArrayEntriesNeededOut, 0x5CC9CBA6uLL);
    if (!v15)
    {
      v13 = v40;
      goto LABEL_23;
    }
    v16 = v15;
    v17 = CMSampleBufferGetOutputSampleTimingInfoArray(sbuf, timingArrayEntriesNeededOut, v15, 0);
    v18 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    if (!(_DWORD)v17)
    {
      v17 = MediaSampleTimingGeneratorCreateMediaSampleTimingInfoArray(*(_QWORD *)(v11 + 56), NumSamples, timingArrayEntriesNeededOut, (uint64_t)v16, &v42, &v41, &v40, &v39);
      if (!(_DWORD)v17)
      {
        if (!v39)
          goto LABEL_14;
        if (v41)
        {
          sizeArrayEntriesNeededOut = *(CMTime *)((_BYTE *)v40 + 3 * v41 - 3);
          v19 = *(_QWORD *)(a1 + 16);
          ptr = sizeArrayEntriesNeededOut;
          v14 = MovieTrackSetLastSampleDecodeDuration(v19, &ptr);
          if ((_DWORD)v14)
          {
LABEL_41:
            MediaSampleTimingGeneratorDisposeMediaSampleTimingInfoArray(v40);
            CFAllocatorDeallocate(*v18, v16);
            return v14;
          }
        }
        MediaSampleTimingGeneratorDisposeMediaSampleTimingInfoArray(v40);
        v40 = 0;
        v17 = MediaSampleTimingGeneratorCreateMediaSampleTimingInfoArrayWithDefaultLastSampleDuration(*(_QWORD *)(v11 + 56), &v42, &v41, &v40);
        if (!(_DWORD)v17)
        {
LABEL_14:
          v20 = v42;
          v34 = v40;
          v35 = v41;
          FormatDescription = CMSampleBufferGetFormatDescription(sbuf);
          SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(sbuf, 0);
          v21 = *v18;
          v22 = CMCopyDictionaryOfAttachments(*v18, sbuf, 1u);
          sizeArrayEntriesNeededOut.value = 0;
          ptr.value = 0;
          v46[0] = 0;
          v45 = 0;
          if (CMSampleBufferGetSampleSizeArray(sbuf, 0, 0, &sizeArrayEntriesNeededOut.value) == -12735)
          {
            if (*(_DWORD *)a1 == 1936684398)
            {
              if (v20 >= 1)
              {
                v31 = v20;
                LOBYTE(valuePtr) = 0;
                IsNonInterleavedPCMAudioSample = FigMovieIsNonInterleavedPCMAudioSample(sbuf, &valuePtr);
                allocator = v21;
                if (!(_DWORD)IsNonInterleavedPCMAudioSample)
                {
                  if ((_BYTE)valuePtr)
                  {
                    IsNonInterleavedPCMAudioSample = FigSignalErrorAt();
                  }
                  else
                  {
                    IsNonInterleavedPCMAudioSample = FigMovieCreateContiguousBBufFromNonContiguousAudioSample(sbuf, v21, &v45, v21, &sizeArrayEntriesNeededOut.value, &ptr);
                    if (!(_DWORD)IsNonInterleavedPCMAudioSample)
                    {
                      DataBuffer = v45;
                      *(_QWORD *)(*(_QWORD *)(a1 + 128) + 96) = a4;
                      if (!DataBuffer)
                      {
                        v14 = 0;
                        goto LABEL_32;
                      }
                      goto LABEL_29;
                    }
                  }
                }
LABEL_31:
                v14 = IsNonInterleavedPCMAudioSample;
                goto LABEL_32;
              }
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)(a1 + 128) + 96) = a4;
            }
            v14 = 4294954561;
            if (!v22)
            {
LABEL_37:
              if (v45)
                CFRelease(v45);
              if (ptr.value)
                CFAllocatorDeallocate(v21, (void *)ptr.value);
              goto LABEL_41;
            }
LABEL_36:
            CFRelease(v22);
            goto LABEL_37;
          }
          v31 = v20;
          allocator = v21;
          v26 = (size_t *)CFAllocatorAllocate(v21, 8 * sizeArrayEntriesNeededOut.value, 0);
          ptr.value = (CMTimeValue)v26;
          SampleSizeArray = CMSampleBufferGetSampleSizeArray(sbuf, sizeArrayEntriesNeededOut.value, v26, 0);
          if ((_DWORD)SampleSizeArray)
          {
            v14 = SampleSizeArray;
          }
          else
          {
            DataBuffer = CMSampleBufferGetDataBuffer(sbuf);
            if (DataBuffer || (DataBuffer = CMSampleBufferGetImageBuffer(sbuf)) != 0)
            {
              *(_QWORD *)(*(_QWORD *)(a1 + 128) + 96) = a4;
              v18 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
LABEL_29:
              IsNonInterleavedPCMAudioSample = MovieTrackFindOrAddSampleDescription(*(_QWORD *)(a1 + 16), FormatDescription, a2, v46);
              if (!(_DWORD)IsNonInterleavedPCMAudioSample)
              {
                MovieTrackEvaluateAlternateTrackGroupAssignment(*(_QWORD *)(a1 + 16));
                IsNonInterleavedPCMAudioSample = MediaDataChunkWriterTrackAppendSampleData(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), a3, (uint64_t)DataBuffer, v46[0], v31, v35, (uint64_t)v34, sizeArrayEntriesNeededOut.value, (unint64_t *)ptr.value, SampleAttachmentsArray, (uint64_t)v22);
              }
              goto LABEL_31;
            }
            v28 = (const __CFNumber *)CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0CA26F0], 0);
            *(_QWORD *)(*(_QWORD *)(a1 + 128) + 96) = a4;
            if (v28)
            {
              valuePtr = 0;
              CFNumberGetValue(v28, kCFNumberSInt64Type, &valuePtr);
              v29 = CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0CA26F8], 0);
              appended = MovieTrackFindOrAddSampleDescription(*(_QWORD *)(a1 + 16), FormatDescription, v29, v46);
              if (!(_DWORD)appended)
              {
                MovieTrackEvaluateAlternateTrackGroupAssignment(*(_QWORD *)(a1 + 16));
                appended = MediaDataChunkWriterTrackAppendSampleReference(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), valuePtr, v46[0], v20, v35, (uint64_t)v34, sizeArrayEntriesNeededOut.value, v26, SampleAttachmentsArray, (uint64_t)v22);
              }
              v14 = appended;
              v21 = allocator;
              v18 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
              if (!v22)
                goto LABEL_37;
              goto LABEL_36;
            }
            v14 = 0;
          }
          v18 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
LABEL_32:
          v21 = allocator;
          if (!v22)
            goto LABEL_37;
          goto LABEL_36;
        }
      }
    }
    v14 = v17;
    goto LABEL_41;
  }
  v13 = 0;
  v14 = 0;
LABEL_23:
  MediaSampleTimingGeneratorDisposeMediaSampleTimingInfoArray(v13);
  return v14;
}

uint64_t writeActualMdatLengthsToStorages(uint64_t a1, CFArrayRef theArray)
{
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  uint64_t v7;
  _QWORD *ValueAtIndex;
  CFIndex v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, _QWORD, uint64_t *);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, unint64_t *, _QWORD);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t, unsigned int *, _QWORD);
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD);
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;

  v36 = 0;
  if (!theArray)
    return 0;
  Count = CFArrayGetCount(theArray);
  if (Count < 1)
    return 0;
  v5 = Count;
  v6 = 0;
  v7 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, v6);
    if (!ValueAtIndex)
      return FigSignalErrorAt();
    v9 = ValueAtIndex[8];
    if (v9 != -1)
    {
      v10 = (uint64_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 64), v9);
      if (!v10)
        return FigSignalErrorAt();
      v11 = v10;
      if (*((_BYTE *)v10 + 8))
      {
        v12 = *v10;
        v13 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
        if (!v13)
          return 4294954514;
        v14 = v13(v12, 0, &v36);
        if ((_DWORD)v14)
          return v14;
        v15 = v11[2];
        v16 = v36 - v15;
        if (!((unint64_t)(v36 - v15) >> 32))
        {
          LODWORD(v34) = bswap32(v16);
          v17 = *v11;
          v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 16);
          if (!v18)
            return 4294954514;
          v19 = v17;
          v20 = 4;
          v21 = v15;
LABEL_25:
          v7 = v18(v19, v20, v21, &v34, 0);
          if ((_DWORD)v7)
            return v7;
          goto LABEL_26;
        }
        v35 = 0;
        v34 = v36 - v15;
        v22 = *v11;
        v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 8);
        if (!v23)
          return 4294954514;
        v14 = v23(v22, 4, v15, &v35, 0);
        if ((_DWORD)v14)
          return v14;
        v24 = bswap32(v35);
        v35 = v24;
        if (v24)
        {
          if (v24 == 1)
          {
            precedingAtomIsWideAtom(*v11, v11[2]);
            v34 = bswap64(v34);
            v25 = *v11;
            v26 = v11[2];
            v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                  + 16);
            if (!v18)
              return 4294954514;
            v21 = v26 + 8;
            v19 = v25;
            v20 = 8;
            goto LABEL_25;
          }
          if (precedingAtomIsWideAtom(*v11, v11[2]))
          {
            v33 = 0x7461646D01000000;
            v34 = bswap64(v16 + 8);
            v27 = *v11;
            v28 = v11[2];
            v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 16);
            if (!v29)
              return 4294954514;
            v14 = v29(v27, 8, v28 - 8, &v33, 0);
            if ((_DWORD)v14)
              return v14;
            v30 = *v11;
            v31 = v11[2];
            v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                  + 16);
            if (!v18)
              return 4294954514;
            v19 = v30;
            v20 = 8;
            v21 = v31;
            goto LABEL_25;
          }
          v7 = 4294954402;
        }
        else
        {
          v7 = 0;
        }
      }
    }
LABEL_26:
    if (v5 == ++v6)
      return v7;
  }
}

uint64_t writeMdatHeader(uint64_t a1)
{
  uint64_t appended;
  CMBlockBufferRef v2;
  CMBlockBufferRef theBuffer;

  theBuffer = 0;
  if (!a1)
    return FigSignalErrorAt();
  appended = MovieHeaderMakerCopyMediaDataAtomHeaderAsBlockBuffer((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, 0, &theBuffer);
  v2 = theBuffer;
  if (!(_DWORD)appended)
  {
    CMBlockBufferGetDataLength(theBuffer);
    appended = CMByteStreamAppendBlockBuffer();
    v2 = theBuffer;
  }
  if (v2)
    CFRelease(v2);
  return appended;
}

uint64_t createSourceFromTrack(const void *a1, const void *a2, CFAllocatorRef allocator, char a4, int a5, uint64_t *a6)
{
  void *v8;
  uint64_t v9;
  uint64_t v11;
  _OWORD *v15;
  uint64_t (*v16)(const void *, uint64_t *, char *);
  uint64_t v17;
  uint64_t FigBaseObject;
  void (*v19)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeID TypeID;
  uint64_t v21;
  const void *v22;
  const void *BaseByteStreamProvider;
  int v25;
  uint64_t v26;
  int v27;
  CFTypeRef v28;
  CFTypeRef v29;
  CFTypeRef v30;
  __int128 v31;
  int valuePtr;
  CFTypeRef cf;
  uint64_t v35;
  CFTypeRef v36;
  void *v37;

  v8 = 0;
  v36 = 0;
  v37 = 0;
  cf = 0;
  v35 = 0;
  v9 = 4294950861;
  valuePtr = 0;
  if (!a2)
  {
    v11 = 0;
    goto LABEL_33;
  }
  v11 = 0;
  if (!a6)
    goto LABEL_33;
  v15 = CFAllocatorAllocate(allocator, 160, 0);
  v11 = (uint64_t)v15;
  if (!v15)
  {
    v17 = FigSignalErrorAt();
LABEL_40:
    v9 = v17;
    goto LABEL_41;
  }
  v15[8] = 0u;
  v15[9] = 0u;
  v15[6] = 0u;
  v15[7] = 0u;
  v15[4] = 0u;
  v15[5] = 0u;
  v15[2] = 0u;
  v15[3] = 0u;
  *v15 = 0u;
  v15[1] = 0u;
  v16 = *(uint64_t (**)(const void *, uint64_t *, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v16)
  {
    v8 = 0;
    v9 = 4294954514;
    goto LABEL_33;
  }
  v17 = v16(a2, &v35, (char *)&v35 + 4);
  if ((_DWORD)v17)
    goto LABEL_40;
  FigBaseObject = FigTrackReaderGetFigBaseObject(a2);
  v19 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
  if (v19)
  {
    v19(FigBaseObject, CFSTR("TrackTimescale"), 0, &cf);
    if (cf)
    {
      TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(cf))
      {
        CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, &valuePtr);
        CFRelease(cf);
      }
    }
  }
  if (!a5)
    goto LABEL_29;
  if (FigServer_IsMediaparserd()
    && (FigFormatReaderIsRemote((_BOOL8)a1) || FigTrackReaderIsRemote((_BOOL8)a2)))
  {
    if ((a4 & 1) != 0)
      v21 = FigSampleGeneratorRemoteCreateForTrackReader((uint64_t)allocator, (uint64_t)a2, 0, 0, &v36);
    else
      v21 = FigSampleGeneratorRemoteCreateForTrackReaderProducingByteReferenceSampleBuffers((uint64_t)allocator, (uint64_t)a2, 0, 0, &v36);
  }
  else
  {
    v22 = (const void *)*MEMORY[0x1E0C9AE00];
    if ((a4 & 1) != 0)
    {
      BaseByteStreamProvider = (const void *)FigGetBaseByteStreamProvider();
      v21 = FigSampleGeneratorCreateForFormatReaderUsingByteStreams(v22, 0, a2, BaseByteStreamProvider, 0, 2, &v36);
    }
    else
    {
      v21 = FigSampleGeneratorCreateForFormatReaderProducingByteReferenceSampleBuffers((const void *)*MEMORY[0x1E0C9AE00], 0, a2, 0, 0, &v36);
    }
  }
  v9 = v21;
  if ((_DWORD)v21)
  {
LABEL_41:
    v8 = 0;
    goto LABEL_33;
  }
  if (HIDWORD(v35) == 1751216244 || HIDWORD(v35) == 1936684398)
    v25 = 1;
  else
    v25 = 2;
  v26 = MediaSampleTimingGeneratorCreate(allocator, SHIDWORD(v35), v25, &v37);
  if ((_DWORD)v26)
  {
    v9 = v26;
    v8 = v37;
    goto LABEL_33;
  }
LABEL_29:
  *(_DWORD *)v11 = HIDWORD(v35);
  v27 = valuePtr;
  *(_DWORD *)(v11 + 4) = v35;
  *(_DWORD *)(v11 + 8) = v27;
  if (a1)
    v28 = CFRetain(a1);
  else
    v28 = 0;
  *(_QWORD *)(v11 + 24) = v28;
  v29 = CFRetain(a2);
  v8 = 0;
  v9 = 0;
  v30 = v36;
  *(_QWORD *)(v11 + 32) = v29;
  *(_QWORD *)(v11 + 40) = v30;
  *(_QWORD *)(v11 + 56) = v37;
  v31 = *MEMORY[0x1E0CA2E68];
  *(_QWORD *)(v11 + 128) = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  *(_BYTE *)(v11 + 146) = 0;
  *(_OWORD *)(v11 + 112) = v31;
  *(_QWORD *)(v11 + 16) = 0;
  *a6 = v11;
  v36 = 0;
  v37 = 0;
  v11 = 0;
LABEL_33:
  MediaSampleTimingGeneratorRelease(v8);
  if (v36)
    CFRelease(v36);
  if (v11)
    releaseSource(allocator, v11);
  return v9;
}

void *getTrackForInsertionFromSource(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v7;
  __CFArray *Mutable;
  CFIndex v9;
  const __CFString *v10;
  uint64_t *ValueAtIndex;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t FigBaseObject;
  void (*v16)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeID TypeID;
  int MediaTimeScale;
  uint64_t v19;
  void (*v20)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeID v21;
  int v22;
  uint64_t v23;
  void (*v24)(uint64_t, const __CFString *, _QWORD, void **);
  int v25;
  uint64_t v26;
  void (*v27)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  int v28;
  uint64_t v29;
  void (*v30)(uint64_t, const __CFString *, const __CFAllocator *, void **);
  CFTypeID v31;
  uint64_t v32;
  uint64_t i;
  uint64_t j;
  float Volume;
  uint64_t v36;
  unsigned int (*v37)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  BOOL v38;
  CFTypeID v39;
  int IsChapterTrack;
  uint64_t v41;
  void (*v42)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeID v43;
  int v44;
  uint64_t v45;
  unsigned int (*v46)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const __CFArray *v47;
  CFIndex v48;
  CFIndex v49;
  CFIndex v51;
  const opaqueCMFormatDescription *v52;
  const opaqueCMFormatDescription *v53;
  int v54;
  const __CFArray *v55;
  FourCharCode MediaSubType;
  CGSize PresentationDimensions;
  CGSize v58;
  double v59;
  double v60;
  int v61;
  CFIndex v62;
  CFIndex v63;
  __CFArray *v64;
  CFIndex v65;
  const __CFString *v66;
  const __CFAllocator *v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  CFIndex v73;
  const __CFString *v74;
  __CFArray *v75;
  size_t v76;
  const void **v77;
  const void **v78;
  _BOOL4 v79;
  uint64_t v80;
  CFIndex v81;
  CFIndex v82;
  uint64_t v83;
  int v84;
  int v85;
  int v87;
  CFIndex v88;
  CFIndex v89;
  CFIndex k;
  uint64_t *v91;
  CFIndex v92;
  CFIndex v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  _DWORD *v98;
  int v99;
  _DWORD *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  CFIndex v105;
  __CFArray *v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeID v112;
  int AlternateGroupID;
  int v114;
  CFIndex v115;
  CFIndex v116;
  CFIndex v117;
  _QWORD *v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void (*v123)(uint64_t, const __CFString *, _QWORD, _OWORD *);
  CFTypeID v124;
  __CFArray *v125;
  CFIndex v126;
  CFIndex v127;
  CFIndex v128;
  __CFArray *v129;
  const __CFString *v130;
  CFIndex v131;
  const opaqueCMFormatDescription *desc;
  CMFormatDescriptionRef desca;
  const __CFAllocator *allocator;
  CFIndex v135;
  uint64_t v136;
  const void **v137;
  void **keys;
  uint64_t v139;
  CFTypeRef v140;
  const __CFArray *v141;
  CFIndex v142;
  uint64_t v143;
  const void *v144;
  _OWORD valuePtr[2];
  int v146;
  CFTypeRef cf[2];
  __int128 v148;
  int v149;
  CFTypeRef v150;
  uint64_t v151;
  void *value;
  int v153;

  v2 = 0;
  if (!a1)
    return v2;
  v3 = a2;
  if (!a2)
    return v2;
  if (!*(_QWORD *)(a1 + 56) || !*(_QWORD *)(a2 + 32))
    return 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 48));
  v5 = *(const __CFArray **)(a1 + 56);
  if (!v5)
    goto LABEL_184;
  Count = CFArrayGetCount(v5);
  if (Count < 1)
    goto LABEL_184;
  v7 = Count;
  Mutable = 0;
  v9 = 0;
  v10 = CFSTR("TrackEnabled");
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v143 = v3;
  do
  {
    ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), v9);
    if (ValueAtIndex)
    {
      v12 = ValueAtIndex;
      if (!*((_BYTE *)ValueAtIndex + 124))
      {
        if (ValueAtIndex[1])
        {
          if (ValueAtIndex[2])
          {
            v13 = *(_QWORD *)(v3 + 32);
            if (v13)
            {
              v14 = *(_DWORD *)(v3 + 148);
              if (v14)
              {
                if (v14 != *((_DWORD *)ValueAtIndex + 1))
                  goto LABEL_18;
                goto LABEL_15;
              }
              if (*(_DWORD *)ValueAtIndex == *(_DWORD *)v3)
              {
                cf[0] = 0;
                LODWORD(valuePtr[0]) = 0;
                FigBaseObject = FigTrackReaderGetFigBaseObject(v13);
                v16 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
                if (v16)
                {
                  v16(FigBaseObject, CFSTR("TrackTimescale"), 0, cf);
                  if (cf[0])
                  {
                    TypeID = CFNumberGetTypeID();
                    if (TypeID == CFGetTypeID(cf[0]))
                    {
                      CFNumberGetValue((CFNumberRef)cf[0], kCFNumberSInt32Type, valuePtr);
                      CFRelease(cf[0]);
                    }
                  }
                }
                MediaTimeScale = MovieTrackGetMediaTimeScale(v12[2]);
                if (!MediaTimeScale || MediaTimeScale == LODWORD(valuePtr[0]))
                {
                  cf[0] = 0;
                  v19 = FigTrackReaderGetFigBaseObject(v13);
                  v20 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                + 48);
                  if (v20)
                    v20(v19, v10, 0, cf);
                  if (cf[0] && (v21 = CFBooleanGetTypeID(), v21 == CFGetTypeID(cf[0])))
                  {
                    v22 = CFBooleanGetValue((CFBooleanRef)cf[0]);
                    CFRelease(cf[0]);
                  }
                  else
                  {
                    v22 = 0;
                  }
                  if (MovieTrackIsEnabled(v12[2]) == v22)
                  {
                    cf[0] = 0;
                    *(_QWORD *)&valuePtr[0] = 0;
                    MovieTrackGetLanguageInformation(v12[2], 0, cf, valuePtr);
                    value = 0;
                    v150 = 0;
                    v23 = FigTrackReaderGetFigBaseObject(v13);
                    v24 = *(void (**)(uint64_t, const __CFString *, _QWORD, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
                    if (v24)
                      v24(v23, CFSTR("TrackLanguageCode"), 0, &value);
                    if (!cf[0])
                      cf[0] = CFSTR("und");
                    if (!value)
                      value = CFSTR("und");
                    v25 = FigCFEqual();
                    if (value)
                    {
                      CFRelease(value);
                      value = 0;
                    }
                    if (v25)
                    {
                      v26 = FigTrackReaderGetFigBaseObject(v13);
                      v27 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                      if (v27)
                        v27(v26, CFSTR("ExtendedLanguageTagString"), 0, &v150);
                      v28 = FigCFEqual();
                      if (v150)
                        CFRelease(v150);
                      if (v28)
                      {
                        v149 = 0;
                        *(_OWORD *)cf = 0u;
                        v148 = 0u;
                        v146 = 0;
                        memset(valuePtr, 0, sizeof(valuePtr));
                        value = 0;
                        MovieTrackGetSpatialInformation(v12[2], 0, 0, (uint64_t)cf);
                        v29 = FigTrackReaderGetFigBaseObject(v13);
                        v30 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                        if (v30)
                          v30(v29, CFSTR("TrackMatrix"), allocator, &value);
                        if (value)
                        {
                          v31 = CFArrayGetTypeID();
                          if (v31 == CFGetTypeID(value))
                          {
                            CFArrayToFigMatrix((const __CFArray *)value, (uint64_t)valuePtr);
                            CFRelease(value);
                            v32 = 0;
                            for (i = 0; i != 3; ++i)
                            {
                              for (j = 0; j != 12; j += 4)
                              {
                                if (*(float *)((char *)cf + v32 + j) != *(float *)((char *)valuePtr + v32 + j))
                                  goto LABEL_72;
                              }
                              v32 += 12;
                            }
                          }
                        }
                        if (*(_DWORD *)v12 != 1936684398)
                          goto LABEL_65;
                        cf[0] = 0;
                        LODWORD(valuePtr[0]) = 1065353216;
                        Volume = MovieTrackGetVolume(v12[2]);
                        v36 = FigTrackReaderGetFigBaseObject(v13);
                        v37 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                        if (v37)
                        {
                          v38 = v37(v36, CFSTR("Volume"), 0, cf) || cf[0] == 0;
                          if (!v38)
                          {
                            v39 = CFNumberGetTypeID();
                            if (v39 == CFGetTypeID(cf[0]))
                            {
                              CFNumberGetValue((CFNumberRef)cf[0], kCFNumberFloat32Type, valuePtr);
                              CFRelease(cf[0]);
                            }
                          }
                        }
                        if (Volume == *(float *)valuePtr)
                        {
LABEL_65:
                          IsChapterTrack = MovieTrackIsChapterTrack(v12[1], v12[2]);
                          cf[0] = 0;
                          v41 = FigTrackReaderGetFigBaseObject(v13);
                          v42 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                          if (v42)
                            v42(v41, CFSTR("ContainsChapters"), 0, cf);
                          if (cf[0] && (v43 = CFBooleanGetTypeID(), v43 == CFGetTypeID(cf[0])))
                          {
                            v44 = CFBooleanGetValue((CFBooleanRef)cf[0]);
                            CFRelease(cf[0]);
                            if ((IsChapterTrack == 0) != (v44 == 0))
                              goto LABEL_18;
                            if (v44)
                              goto LABEL_15;
                          }
                          else if (IsChapterTrack)
                          {
                            goto LABEL_18;
                          }
                          cf[0] = 0;
                          v45 = FigTrackReaderGetFigBaseObject(v13);
                          v46 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                          if (!v46 || v46(v45, CFSTR("TrackFormatDescriptionArray"), 0, cf) || !cf[0])
                          {
LABEL_15:
                            if (Mutable || (Mutable = CFArrayCreateMutable(allocator, 0, 0)) != 0)
                              CFArrayAppendValue(Mutable, v12);
                            goto LABEL_18;
                          }
                          v47 = MovieTrackCopyFormatDescriptionArray(v12[2]);
                          if (v47)
                          {
                            if (cf[0])
                            {
                              v48 = CFArrayGetCount((CFArrayRef)cf[0]);
                              v135 = CFArrayGetCount(v47);
                              v126 = v48;
                              if (v48 >= 1)
                              {
                                v49 = 0;
                                v130 = v10;
                                while (1)
                                {
                                  v128 = v49;
                                  desc = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex((CFArrayRef)cf[0], v49);
                                  if (desc && v135 >= 1)
                                    break;
LABEL_103:
                                  v49 = v128 + 1;
                                  if (v128 + 1 == v126)
                                    goto LABEL_106;
                                }
                                v51 = 0;
                                while (1)
                                {
                                  v52 = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(v47, v51);
                                  if (!v52)
                                    goto LABEL_102;
                                  v53 = v52;
                                  v54 = *(_DWORD *)v12;
                                  if (*(_DWORD *)v12 == 1952807028)
                                    break;
                                  if (v54 == 1986618469)
                                  {
                                    PresentationDimensions = CMVideoFormatDescriptionGetPresentationDimensions(v52, 1u, 1u);
                                    v58 = CMVideoFormatDescriptionGetPresentationDimensions(desc, 1u, 1u);
                                    if (PresentationDimensions.width != 0.0 || PresentationDimensions.height != 0.0)
                                    {
                                      v59 = PresentationDimensions.width / PresentationDimensions.height;
                                      if (PresentationDimensions.height == 0.0)
                                        v59 = 0.0;
                                      v60 = v58.width / v58.height;
                                      if (v58.height == 0.0)
                                        v60 = 0.0;
                                      if (vabdd_f64(v59, v60) > 0.00999999978)
                                      {
LABEL_107:
                                        v61 = 0;
LABEL_108:
                                        if (cf[0])
                                        {
                                          CFRelease(cf[0]);
                                          cf[0] = 0;
                                        }
                                        if (v47)
                                          CFRelease(v47);
                                        if (!v61)
                                        {
LABEL_18:
                                          v3 = v143;
                                          goto LABEL_72;
                                        }
                                        goto LABEL_15;
                                      }
                                    }
                                  }
                                  else
                                  {
                                    if (v54 == 1953325924)
                                      break;
                                    if (!CFEqual(desc, v52))
                                      goto LABEL_107;
                                  }
LABEL_102:
                                  if (v135 == ++v51)
                                    goto LABEL_103;
                                }
                                v55 = v47;
                                MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
                                v38 = MediaSubType == CMFormatDescriptionGetMediaSubType(v53);
                                v47 = v55;
                                v10 = v130;
                                if (!v38)
                                  goto LABEL_107;
                                goto LABEL_102;
                              }
                            }
                            else
                            {
                              CFArrayGetCount(v47);
                            }
                          }
LABEL_106:
                          v61 = 1;
                          goto LABEL_108;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_72:
    ++v9;
  }
  while (v9 != v7);
  if (!Mutable)
  {
LABEL_184:
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 48));
    return 0;
  }
  v62 = CFArrayGetCount(Mutable);
  if (!v62)
  {
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 48));
    CFRelease(Mutable);
    return 0;
  }
  v63 = v62;
  if (v62 < 1)
  {
    v2 = 0;
    v64 = 0;
    goto LABEL_224;
  }
  v64 = 0;
  v65 = 0;
  v66 = CFSTR("TrackReferenceDictionary");
  v67 = allocator;
  v127 = v62;
  v129 = Mutable;
  do
  {
    v68 = CFArrayGetValueAtIndex(Mutable, v65);
    if (!v68)
      goto LABEL_180;
    v69 = v68;
    cf[0] = 0;
    *(_QWORD *)&valuePtr[0] = 0;
    if (v68[1] && v68[2] && *(_QWORD *)(v3 + 32))
    {
      v70 = *(_QWORD *)(v3 + 24);
      if (v70)
      {
        v71 = FigFormatReaderGetFigBaseObject(v70);
        v72 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (v72)
          v72(v71, v66, v67, cf);
        MovieInformationCreateTrackReferenceDictionary(v67, v69[1], (CFDictionaryRef *)valuePtr);
        if (cf[0] && CFDictionaryGetCount((CFDictionaryRef)cf[0]))
        {
          v73 = v63;
          v74 = v66;
          v75 = Mutable;
          v76 = CFDictionaryGetCount((CFDictionaryRef)cf[0]);
          v77 = (const void **)malloc_type_calloc(v76, 8uLL, 0x6004044C4A2DFuLL);
          v136 = v76;
          v78 = (const void **)malloc_type_calloc(v76, 8uLL, 0x6004044C4A2DFuLL);
          v79 = 0;
          v3 = v143;
          v137 = v78;
          keys = (void **)v77;
          if (v77 && v78)
          {
            CFDictionaryGetKeysAndValues((CFDictionaryRef)cf[0], v77, v78);
            if (v136 >= 1)
            {
              v131 = v65;
              desca = v64;
              v80 = 0;
              do
              {
                v144 = keys[v80];
                v139 = v80;
                v81 = CFArrayGetCount((CFArrayRef)v137[v80]);
                if (v81 >= 1)
                {
                  v82 = v81;
                  v83 = 0;
                  v140 = (CFTypeRef)v81;
                  do
                  {
                    LODWORD(v150) = 0;
                    v153 = 0;
                    FigCFArrayGetInt32AtIndex();
                    FigCFArrayGetInt32AtIndex();
                    v84 = *(_DWORD *)(v3 + 4);
                    v85 = (int)v150;
                    if (v84 == (_DWORD)v150 || v84 == v153)
                    {
                      if (v84 == (_DWORD)v150)
                        v87 = v153;
                      else
                        v87 = (int)v150;
                      value = 0;
                      if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)&valuePtr[0], v144, (const void **)&value))
                      {
                        v88 = CFArrayGetCount((CFArrayRef)value);
                        if (v88 >= 1)
                        {
                          v89 = v88;
                          for (k = 0; k < v89; k += 2)
                          {
                            v151 = 0;
                            FigCFArrayGetInt32AtIndex();
                            FigCFArrayGetInt32AtIndex();
                            v91 = (uint64_t *)((char *)&v151 + 4);
                            if (v84 != v85)
                              v91 = &v151;
                            if (*((_DWORD *)v69 + 1) == *(_DWORD *)v91)
                            {
                              v92 = CFArrayGetCount(*(CFArrayRef *)(a1 + 72));
                              if (v92 >= 1)
                              {
                                v93 = v92;
                                v94 = 1;
                                do
                                {
                                  v95 = *((_DWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v94 - 1) + 1) != v87
                                     && v94 < v93;
                                  ++v94;
                                }
                                while (v95);
                              }
                            }
                          }
                        }
                      }
                      v3 = v143;
                      v82 = (CFIndex)v140;
                    }
                    v83 += 2;
                  }
                  while (v83 < v82);
                }
                v80 = v139 + 1;
              }
              while (v139 + 1 != v136);
              v79 = 1;
              v63 = v127;
              Mutable = v129;
              v64 = desca;
              v67 = allocator;
              v65 = v131;
              v66 = CFSTR("TrackReferenceDictionary");
              goto LABEL_172;
            }
            Mutable = v75;
            v79 = 1;
          }
          else
          {
            Mutable = v75;
          }
          v66 = v74;
          v63 = v73;
          v67 = allocator;
        }
        else
        {
          v96 = v69[1];
          v97 = *(_QWORD *)(v96 + 328);
          v3 = v143;
          if (v97 < 1)
          {
            v79 = 1;
          }
          else
          {
            v98 = *(_DWORD **)(v96 + 344);
            v99 = *(_DWORD *)(v69[2] + 144);
            if (v98[2] == v99 || v98[1] == v99)
            {
              v79 = 0;
            }
            else
            {
              v100 = v98 + 5;
              v101 = 1;
              do
              {
                v102 = v101;
                if (v97 == v101)
                  break;
                if (*v100 == v99)
                  break;
                v103 = *(v100 - 1);
                ++v101;
                v100 += 3;
              }
              while (v103 != v99);
              v79 = v102 >= v97;
            }
          }
          v137 = 0;
          keys = 0;
        }
      }
      else
      {
        v137 = 0;
        keys = 0;
        v79 = 1;
      }
    }
    else
    {
      v137 = 0;
      keys = 0;
      v79 = 0;
    }
LABEL_172:
    if (cf[0])
      CFRelease(cf[0]);
    if (*(_QWORD *)&valuePtr[0])
      CFRelease(*(CFTypeRef *)&valuePtr[0]);
    free(keys);
    free(v137);
    if (v79 && (v64 || (v64 = CFArrayCreateMutable(v67, 0, 0)) != 0))
      CFArrayAppendValue(v64, v69);
LABEL_180:
    ++v65;
  }
  while (v65 != v63);
  if (!v64 || (v142 = CFArrayGetCount(v64), v142 < 1))
  {
    v2 = 0;
    goto LABEL_224;
  }
  v141 = 0;
  v105 = 0;
  while (2)
  {
    v106 = v64;
    v107 = (uint64_t *)CFArrayGetValueAtIndex(v64, v105);
    if (v107)
    {
      v108 = v107;
      cf[0] = 0;
      *(_QWORD *)&valuePtr[0] = 0;
      LODWORD(value) = 0;
      LODWORD(v150) = 0;
      if (v107[1])
      {
        if (v107[2])
        {
          v109 = *(_QWORD *)(v143 + 32);
          if (v109)
          {
            v110 = FigTrackReaderGetFigBaseObject(v109);
            v111 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
            if (v111)
            {
              v111(v110, CFSTR("AlternateGroupID"), 0, cf);
              if (cf[0])
              {
                v112 = CFGetTypeID(cf[0]);
                if (v112 == CFNumberGetTypeID())
                {
                  CFNumberGetValue((CFNumberRef)cf[0], kCFNumberSInt32Type, &value);
                  CFRelease(cf[0]);
                }
              }
            }
            AlternateGroupID = MovieTrackGetAlternateGroupID(v108[2]);
            v114 = AlternateGroupID;
            if ((_DWORD)value)
            {
              if (!AlternateGroupID)
                goto LABEL_218;
              v115 = CFArrayGetCount(*(CFArrayRef *)(a1 + 56));
              if (v115 >= 1)
              {
                v116 = v115;
                v117 = 0;
                do
                {
                  v118 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), v117);
                  if (v118)
                  {
                    v119 = v118;
                    v120 = v118[16];
                    if (v120)
                    {
                      v121 = *(_QWORD *)(v120 + 32);
                      if (v121)
                      {
                        v122 = FigTrackReaderGetFigBaseObject(v121);
                        v123 = *(void (**)(uint64_t, const __CFString *, _QWORD, _OWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                        if (v123)
                          v123(v122, CFSTR("AlternateGroupID"), 0, valuePtr);
                        if (*(_QWORD *)&valuePtr[0])
                        {
                          v124 = CFGetTypeID(*(CFTypeRef *)&valuePtr[0]);
                          if (v124 == CFNumberGetTypeID())
                          {
                            CFNumberGetValue(*(CFNumberRef *)&valuePtr[0], kCFNumberSInt32Type, &v150);
                            CFRelease(*(CFTypeRef *)&valuePtr[0]);
                          }
                        }
                        if ((_DWORD)v150 == (_DWORD)value
                          && MovieTrackGetAlternateGroupID(v119[2]) != v114)
                        {
                          goto LABEL_218;
                        }
                      }
                    }
                  }
                }
                while (v116 != ++v117);
              }
            }
            else if (AlternateGroupID)
            {
              goto LABEL_218;
            }
            v125 = v141;
            if (v141 || (v125 = CFArrayCreateMutable(allocator, 0, 0)) != 0)
            {
              v141 = v125;
              CFArrayAppendValue(v125, v108);
            }
            else
            {
              v141 = 0;
            }
          }
        }
      }
    }
LABEL_218:
    ++v105;
    v64 = v106;
    if (v105 != v142)
      continue;
    break;
  }
  v2 = v141;
  if (!v141)
  {
LABEL_224:
    v141 = 0;
    goto LABEL_225;
  }
  if (CFArrayGetCount(v141))
    v2 = (void *)CFArrayGetValueAtIndex(v141, 0);
  else
    v2 = 0;
LABEL_225:
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 48));
  CFRelease(Mutable);
  if (v64)
    CFRelease(v64);
  if (v141)
    CFRelease(v141);
  return v2;
}

uint64_t setTrackIDModified(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  _DWORD *Storage;
  _DWORD *v6;

  result = 4294950861;
  if (a1 && a2 && a3)
  {
    Storage = MutableMovieTrackGetStorage(a1, a3);
    if (Storage)
    {
      v6 = Storage;
      result = 0;
      *((_BYTE *)v6 + 56) = 1;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

CMTime *GetTotalEditSegmentDuration@<X0>(CMTime *result@<X0>, CMTime *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  CMTimeRange v9;

  v2 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)&a2->value = *MEMORY[0x1E0CA2E68];
  a2->epoch = *(_QWORD *)(v2 + 16);
  LODWORD(v2) = result[34].value;
  v3 = (v2 - 1);
  if ((int)v2 >= 1)
  {
    v4 = (_OWORD *)(result[33].epoch + 96 * v3 + 48);
    v5 = v3 + 1;
    while ((*((_BYTE *)v4 - 36) & 1) == 0)
    {
      v4 -= 6;
      if (v5-- <= 1)
        return result;
    }
    v7 = *v4;
    v8 = v4[2];
    *(_OWORD *)&v9.start.epoch = v4[1];
    *(_OWORD *)&v9.duration.timescale = v8;
    *(_OWORD *)&v9.start.value = v7;
    return CMTimeRangeGetEnd(a2, &v9);
  }
  return result;
}

uint64_t clearInsertionStateInTracks(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t TrackCount;
  uint64_t v5;
  uint64_t i;
  uint64_t TrackForTrackIndex;
  _DWORD *Storage;

  result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    v3 = result;
    if (!*(_BYTE *)result)
    {
      result = MovieInformationLockForRead(*(_QWORD *)(result + 24));
      if (!(_DWORD)result)
      {
        TrackCount = MovieInformationGetTrackCount(*(_QWORD *)(v3 + 24));
        if (TrackCount >= 1)
        {
          v5 = TrackCount;
          for (i = 0; i != v5; ++i)
          {
            TrackForTrackIndex = MovieInformationFindTrackForTrackIndex(*(_QWORD *)(v3 + 24), i);
            if (TrackForTrackIndex)
            {
              Storage = MutableMovieTrackGetStorage(a1, *(_DWORD *)(TrackForTrackIndex + 144));
              if (Storage)
                *((_BYTE *)Storage + 124) = 0;
            }
          }
        }
        return MovieInformationUnlockForRead(*(_QWORD *)(v3 + 24));
      }
    }
  }
  return result;
}

uint64_t insertSegmentFromSourceArray(const __CFArray *a1, uint64_t a2, _OWORD *a3, __int128 *a4, char a5)
{
  _BOOL4 v5;
  uint64_t DerivedStorage;
  uint64_t v11;
  CFAllocatorRef *v12;
  const void *v13;
  const void *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t result;
  __int128 v18;
  uint64_t v19;
  _OWORD v20[3];

  v5 = (a5 & 1) == 0;
  if (!a1)
    return 4294950861;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return 4294950861;
  v11 = DerivedStorage;
  if (*(_BYTE *)DerivedStorage)
    return 4294950869;
  v12 = *(CFAllocatorRef **)(DerivedStorage + 32);
  v13 = *(const void **)(DerivedStorage + 40);
  v15 = *(_QWORD *)(DerivedStorage + 16);
  v14 = *(const void **)(DerivedStorage + 24);
  v16 = a3[1];
  v20[0] = *a3;
  v20[1] = v16;
  v20[2] = a3[2];
  v18 = *a4;
  v19 = *((_QWORD *)a4 + 2);
  result = transferMovieSamplesFromSourceArray(a2, a1, v14, v12, v13, v5, v15, v20, (uint64_t)&v18);
  if (!(_DWORD)result)
    return writeActualMdatLengthsToStorages(v11, *(CFArrayRef *)(v11 + 56));
  return result;
}

void releaseSourceArray(const __CFArray *a1)
{
  CFIndex Count;
  unint64_t v3;
  const void *ValueAtIndex;
  const __CFAllocator *v5;

  if (a1)
  {
    Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      v3 = Count + 1;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a1, v3 - 2);
        v5 = CFGetAllocator(a1);
        releaseSource(v5, (uint64_t)ValueAtIndex);
        --v3;
      }
      while (v3 > 1);
    }
    CFRelease(a1);
  }
}

uint64_t transferMovieSamplesFromSourceArray(uint64_t a1, const __CFArray *a2, const void *a3, CFAllocatorRef *a4, const void *a5, int a6, uint64_t a7, _OWORD *a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t DerivedStorage;
  uint64_t v14;
  const __CFArray *v15;
  CFIndex Count;
  CFIndex v17;
  CFIndex i;
  _QWORD *ValueAtIndex;
  void *v20;
  uint64_t v21;
  CFIndex v22;
  CFIndex v23;
  CFIndex v24;
  const __CFAllocator *v25;
  const void *v26;
  _DWORD *TrackForInsertionFromSource;
  uint64_t MutableMovieTrackObject;
  _BYTE *v29;
  _QWORD *v30;
  uint64_t v31;
  CMTimeValue v32;
  const void *v33;
  const void *v34;
  int ByteStreamForTrackStorageURL;
  BOOL v36;
  _BYTE *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, _QWORD, CMTimeRange *);
  uint64_t v41;
  CMTimeValue v42;
  const __CFArray *v43;
  CFIndex v44;
  CFIndex v45;
  CFIndex v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t);
  unint64_t v53;
  size_t v54;
  char **v55;
  uint64_t FigBaseObject;
  void (*v57)(uint64_t, const __CFString *, uint64_t, uint64_t *);
  _BOOL4 v58;
  uint64_t v59;
  void (*v60)(uint64_t, const __CFString *, uint64_t, uint64_t *);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int (*v65)(uint64_t, CMTimeMapping *, CFTypeRef *);
  CFTypeRef v66;
  unsigned int (*v67)(CFTypeRef, CMTimeMapping *);
  _BOOL4 v68;
  uint64_t v69;
  uint64_t (*v70)(uint64_t, CMTimeRange *, CFTypeRef *);
  int v71;
  CFTypeRef v72;
  unsigned int (*v73)(CFTypeRef, CMTimeRange *);
  CFTypeRef v74;
  uint64_t (*v75)(CFTypeRef, uint64_t);
  int v76;
  CFTypeRef v77;
  unsigned int (*v78)(CFTypeRef, uint64_t);
  CFTypeRef *v79;
  int64_t v80;
  char **v81;
  char **v82;
  uint64_t j;
  CMTimeValue v84;
  CMTimeScale v85;
  __int128 v86;
  CMTimeEpoch v87;
  __int128 v88;
  CMTimeEpoch v89;
  __int128 v90;
  _QWORD *v91;
  uint64_t v92;
  CMTimeFlags v93;
  CMTimeEpoch v94;
  CMTimeRange *v95;
  CMTimeEpoch epoch;
  uint64_t v97;
  unsigned int (*v98)(uint64_t, CMTime *);
  CMTimeValue v99;
  unsigned int (*v100)(CMTimeValue, CMTimeMapping *, CMTime *, _QWORD, _QWORD);
  CMTimeValue v101;
  unsigned int (*v102)(CMTimeValue, CMTimeMapping *);
  CMTimeValue v103;
  unsigned int (*v104)(CMTimeValue, CMTime *, CMTime *, _QWORD, _QWORD);
  CMTimeValue v106;
  unsigned int (*v107)(CMTimeValue, uint64_t, CMTime *);
  CMTimeValue v109;
  unsigned int (*v110)(CMTimeValue, CMTimeRange *);
  CMTimeValue v111;
  unsigned int (*v112)(CMTimeValue, CMTimeMapping *, CMTime *, _QWORD, _QWORD);
  CMTimeValue v113;
  unsigned int (*v114)(CMTimeValue, CMTime *);
  CMTimeValue v115;
  unsigned int (*v116)(CMTimeValue, uint64_t, _QWORD);
  CMTimeValue v117;
  unsigned int (*v118)(CMTimeValue, CMTimeMapping *);
  unsigned int (*v119)(CMTimeValue, CMTimeRange *);
  CMTimeValue v120;
  unsigned int (*v121)(CMTimeValue, CMTime *, CMTime *, _QWORD, _QWORD);
  CMTimeValue v122;
  unsigned int (*v123)(CMTimeValue, uint64_t, CMTime *);
  uint64_t v124;
  uint64_t v125;
  size_t v126;
  _QWORD *v127;
  uint64_t v128;
  __int128 v129;
  char **v130;
  uint64_t v131;
  unsigned int (*v132)(uint64_t, CFTypeRef *);
  CFTypeRef v133;
  unsigned int (*v134)(CFTypeRef, uint64_t *);
  uint64_t *v135;
  uint64_t v136;
  CFTypeRef v137;
  unsigned int (*v138)(CFTypeRef, CMTimeMapping *, uint64_t *, _QWORD, _QWORD);
  CMTimeFlags flags;
  CMTimeValue *v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int (*v143)(uint64_t, uint64_t, CMTimeMapping *);
  CMTimeEpoch v144;
  int v145;
  CFIndex v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  void (*v150)(uint64_t, CMTimeRange *);
  _QWORD *v151;
  const void *v152;
  uint64_t v153;
  void (*v154)(uint64_t, _QWORD, _QWORD, CMTimeMapping *, CMTimeRange *);
  CMTimeValue v155;
  const void *v156;
  uint64_t CMBaseObject;
  void (*v158)(uint64_t, uint64_t, uint64_t, CMTimeRange *);
  CFIndex v159;
  uint64_t *v160;
  CMTimeFlags v161;
  CMTimeEpoch v162;
  uint64_t v163;
  uint64_t (*v164)(uint64_t, CMTimeMapping *);
  CFIndex v165;
  _QWORD *v166;
  CMTimeFlags v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  CMTimeEpoch v171;
  uint64_t v172;
  CMTimeFlags v173;
  CMTimeFlags v174;
  CMTimeValue v175;
  CMTimeEpoch v176;
  CMTimeScale v177;
  CMItemCount NumSamples;
  uint64_t v179;
  uint64_t (*v180)(uint64_t, CMItemCount, CMTimeRange *);
  uint64_t v181;
  uint64_t (*v182)(uint64_t, CMTimeRange *);
  CMTimeValue v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t (*v186)(uint64_t, uint64_t, CMTimeValue, CMTimeValue, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, CMSampleBufferRef *);
  uint64_t v187;
  void *v188;
  const void *v189;
  _QWORD *v190;
  int v191;
  int *v192;
  char v193;
  const __CFArray *v194;
  CFIndex v195;
  CFIndex v196;
  CFIndex v197;
  uint64_t v198;
  CMTimeValue v199;
  _QWORD *v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  BOOL v206;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  CMTimeEpoch v211;
  uint64_t v212;
  _QWORD *v213;
  _QWORD *v214;
  CMTimeEpoch v215;
  CMTimeFlags *v216;
  CMTimeEpoch *v217;
  CMTimeValue *v218;
  CMTimeScale *v219;
  CMTimeFlags *v220;
  CMTimeValue v221;
  uint64_t v222;
  CMTimeFlags v223;
  CMTimeScale v224;
  CMTimeValue v225;
  CMTimeEpoch v226;
  CMTimeFlags v227;
  _QWORD *v228;
  _QWORD *v229;
  _DWORD *v230;
  _QWORD *v231;
  _DWORD *v232;
  __int128 v233;
  __int128 v234;
  _QWORD *v235;
  CMTimeRange *v236;
  CMTimeFlags v237;
  CMTimeFlags v238;
  int32_t v239;
  uint64_t inserted;
  CFIndex v241;
  CFIndex v242;
  void *v243;
  CFIndex v244;
  _QWORD *v245;
  uint64_t v246;
  const __CFDictionary *v247;
  uint64_t v248;
  const __CFString *v249;
  CFIndex v250;
  CFIndex v251;
  CFIndex k;
  int v253;
  CFIndex v254;
  CFIndex v255;
  CFIndex v256;
  _DWORD *v257;
  int v258;
  BOOL v259;
  uint64_t *v260;
  int v261;
  uint64_t v262;
  void (*v263)(uint64_t, const __CFString *, uint64_t, CMTimeMapping *);
  size_t v264;
  size_t v265;
  const void **v266;
  CFIndex v267;
  CFIndex v268;
  _QWORD *v269;
  _QWORD *v270;
  uint64_t v271;
  const __CFArray *v272;
  uint64_t v273;
  void (*v274)(uint64_t, const __CFString *, uint64_t, CMTimeMapping *);
  CFIndex v275;
  CFIndex v276;
  CFIndex v277;
  const __CFArray *v278;
  CFIndex v279;
  CFIndex v280;
  uint64_t v281;
  CFIndex v282;
  _QWORD *v283;
  uint64_t v284;
  int AlternateGroupID;
  __int16 v286;
  uint64_t v287;
  uint64_t v288;
  CFIndex v289;
  CFIndex v290;
  __int16 v291;
  CFIndex v292;
  _QWORD *v293;
  int v294;
  const __CFArray *v295;
  CFIndex v296;
  CFIndex v297;
  CFIndex m;
  void *v299;
  CMTimeFlags v302;
  CMTimeValue v303;
  CFIndex v304;
  const __CFArray *v305;
  CFIndex v306;
  CMTimeEpoch v307;
  uint64_t v308;
  CMTimeEpoch v309;
  uint64_t v311;
  CMTimeFlags v312;
  uint64_t v314;
  int v315[2];
  int v316[2];
  CMTimeEpoch v317;
  CMTimeFlags v318;
  CMTimeEpoch v319;
  CFIndex v320;
  char v321;
  uint64_t v322;
  BOOL v323;
  char **v324;
  CMTimeEpoch v325;
  CMTimeEpoch v326;
  CFIndex v327;
  char **v328;
  __int128 v329;
  CMTimeValue v330;
  CFIndex v331;
  CFIndex v332;
  CMTimeScale v334;
  void *v335;
  _QWORD *v336;
  CMTimeEpoch v337;
  CMTime *v338;
  CFIndex v339;
  CFIndex v340;
  _BOOL4 keysa;
  void **keysb[2];
  void **keysc[2];
  CMTimeScale keysd;
  const void **keyse;
  CFIndex keysf;
  CMTimeRange start;
  uint64_t v349;
  CFTypeRef v350;
  CFTypeRef v351;
  CMSampleBufferRef sbuf;
  __int128 v353;
  CMTimeEpoch v354;
  void *value;
  CFTypeRef cf;
  CMTimeMapping v357;
  CMTimeRange v358;
  CMTime v359;
  CMTime v360;
  CMTimeRange v361;
  CFTypeRef v362;
  CFTypeRef v363;
  CMTime v364;
  CMTime v365;
  CMTime v366;
  CMTimeValue v367;
  CMTimeScale timescale;
  CMTimeRange dur;
  CMTimeRange v370;
  CMTimeRange otherRange;
  CMTimeRange target;
  CMTimeRange range;
  CMTimeRange v374;
  CMTimeRange source;
  CMTimeRange v376;
  uint64_t v377;
  uint64_t v378;
  CMTime duration;
  CMTime v380;
  CMTime v381;
  CMTimeRange time2;
  CMTimeRange time1;
  CMTime rhs;
  CMTimeMapping v385;
  uint64_t v386;

  v386 = *MEMORY[0x1E0C80C00];
  value = 0;
  cf = 0;
  v367 = *MEMORY[0x1E0CA2E18];
  timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  v351 = 0;
  sbuf = 0;
  v9 = 4294950861;
  if (!a1)
    goto LABEL_451;
  if (!a2)
    goto LABEL_451;
  if (!a3)
    goto LABEL_451;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    goto LABEL_451;
  v14 = DerivedStorage;
  v353 = *(_OWORD *)(DerivedStorage + 80);
  v354 = *(_QWORD *)(DerivedStorage + 96);
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 48));
  v15 = *(const __CFArray **)(v14 + 56);
  if (v15)
  {
    Count = CFArrayGetCount(v15);
    if (Count >= 1)
    {
      v17 = Count;
      for (i = 0; i != v17; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v14 + 56), i);
        v20 = ValueAtIndex;
        if (ValueAtIndex)
        {
          v21 = ValueAtIndex[2];
          if (v21 && MovieTrackGetTrackDurationValue(v21))
            MovieTrackExtendMediaDecodeDurationToDisplayEndTime(*((_QWORD **)v20 + 1), *((_QWORD *)v20 + 2), 0);
          *((_DWORD *)v20 + 30) = 4;
        }
      }
      value = v20;
    }
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v14 + 48));
  v22 = CFArrayGetCount(a2);
  if (v22 >= 1)
  {
    v23 = v22;
    v24 = 0;
    v25 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v323 = 1;
    while (1)
    {
      v26 = CFArrayGetValueAtIndex(a2, v24);
      TrackForInsertionFromSource = getTrackForInsertionFromSource(v14, (uint64_t)v26);
      value = TrackForInsertionFromSource;
      if (TrackForInsertionFromSource)
      {
        *((_DWORD *)v26 + 38) = TrackForInsertionFromSource[1];
      }
      else
      {
        MutableMovieTrackObject = MovieInformationCreateTrack((uint64_t)a3, *(_DWORD *)v26, 0, 0, &cf);
        if ((_DWORD)MutableMovieTrackObject)
          goto LABEL_440;
        MutableMovieTrackObject = createMutableMovieTrackObject(v25, a3, cf, a4, (uint64_t *)&value);
        if ((_DWORD)MutableMovieTrackObject)
          goto LABEL_440;
        v29 = value;
        if (!value)
          goto LABEL_439;
        *((_DWORD *)v26 + 38) = *((_DWORD *)value + 1);
        v29[125] = 1;
        MEMORY[0x19402EEEC](*(_QWORD *)(v14 + 48));
        CFArrayAppendValue(*(CFMutableArrayRef *)(v14 + 56), value);
        MEMORY[0x19402EF04](*(_QWORD *)(v14 + 48));
        syncPropertiesOfNewTrackWithSourceTrackUsingTrackReaderOrOptionsDictionary(a1, *((unsigned int *)cf + 36), *((_QWORD *)v26 + 4), 0);
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
      }
      v30 = value;
      v31 = *((_QWORD *)value + 16);
      if (v31)
      {
        releaseSource(v25, v31);
        v30 = value;
        *((_QWORD *)value + 16) = 0;
      }
      v30[16] = v26;
      *((_BYTE *)v30 + 124) = 1;
      if (!a6)
      {
        LOBYTE(v357.source.start.value) = 0;
        v32 = v30[8];
        if (v32 == -1)
        {
          v33 = (const void *)v30[5];
          v385.source.start.value = -1;
          if (v33)
            v34 = v33;
          else
            v34 = a5;
          if (!v34)
            goto LABEL_458;
          ByteStreamForTrackStorageURL = getByteStreamForTrackStorageURL(a1, v34, (char *)&v357, &v385.source.start.value);
          v32 = v385.source.start.value;
          if (ByteStreamForTrackStorageURL)
            v36 = 1;
          else
            v36 = v385.source.start.value == -1;
          if (v36)
          {
            FigFileDoesFileExist();
            MutableMovieTrackObject = CMByteStreamCreateForFileURL();
            if ((_DWORD)MutableMovieTrackObject)
              goto LABEL_440;
            source.start.value = -1;
            MutableMovieTrackObject = createStreamInfoForByteStream(v351, v14, &source.start.value);
            if ((_DWORD)MutableMovieTrackObject)
              goto LABEL_440;
            if (v351)
            {
              CFRelease(v351);
              v351 = 0;
            }
            v32 = source.start.value;
            *((_QWORD *)value + 8) = source.start.value;
            if (v32 == -1)
              goto LABEL_54;
          }
          else
          {
            *((_QWORD *)value + 8) = v385.source.start.value;
          }
        }
        v37 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v14 + 64), v32);
        if (!v37)
        {
LABEL_439:
          MutableMovieTrackObject = FigSignalErrorAt();
LABEL_440:
          v9 = MutableMovieTrackObject;
          goto LABEL_441;
        }
        if (!LOBYTE(v357.source.start.value))
        {
          v38 = v37;
          LOBYTE(v357.source.start.value) = v37[8];
          if (!LOBYTE(v357.source.start.value))
          {
            source.start.value = 0;
            v39 = *(_QWORD *)v37;
            v40 = *(uint64_t (**)(uint64_t, _QWORD, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 24);
            if (!v40)
            {
LABEL_390:
              v9 = 4294954514;
              goto LABEL_441;
            }
            MutableMovieTrackObject = v40(v39, 0, &source);
            if ((_DWORD)MutableMovieTrackObject)
              goto LABEL_440;
            if (!source.start.value)
            {
              v41 = *(_QWORD *)v38;
              v385.source.start.value = 0;
              if (v41)
              {
                MutableMovieTrackObject = CMByteStreamAppend();
                if ((_DWORD)MutableMovieTrackObject)
                  goto LABEL_440;
                v42 = v385.source.start.value;
              }
              else
              {
                MutableMovieTrackObject = FigSignalErrorAt();
                v42 = 0;
                if ((_DWORD)MutableMovieTrackObject)
                  goto LABEL_440;
              }
              source.start.value += v42;
            }
            MutableMovieTrackObject = writeMdatHeader(*(_QWORD *)v38);
            if ((_DWORD)MutableMovieTrackObject)
              goto LABEL_440;
            *((_QWORD *)v38 + 2) = source.start.value + 8;
            v38[8] = 1;
          }
        }
      }
LABEL_54:
      v323 = ++v24 < v23;
      if (v23 == v24)
        goto LABEL_59;
    }
  }
  v323 = 0;
LABEL_59:
  MEMORY[0x19402EEEC](*(_QWORD *)(v14 + 48));
  v43 = *(const __CFArray **)(v14 + 56);
  if (v43)
  {
    v44 = CFArrayGetCount(v43);
    v45 = v44;
    v314 = *MEMORY[0x1E0C9AE00];
    if (v44 < 1)
    {
      v145 = 0;
    }
    else
    {
      v46 = 0;
      v47 = MEMORY[0x1E0CA2E20];
      v318 = *(_DWORD *)(MEMORY[0x1E0CA2E20] + 12);
      *(_QWORD *)v315 = *(_QWORD *)(MEMORY[0x1E0CA2E20] + 16);
      v306 = v44;
      do
      {
        v349 = 0;
        v350 = 0;
        v48 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v14 + 56), v46);
        value = v48;
        if (v48)
        {
          v49 = v48[16];
          if (v49)
          {
            v50 = a8[1];
            *(_OWORD *)&start.start.value = *a8;
            *(_OWORD *)&start.start.epoch = v50;
            *(_OWORD *)&start.duration.timescale = a8[2];
            v378 = 0;
            v377 = 0;
            v363 = 0;
            v362 = 0;
            v51 = *(_QWORD *)(v49 + 32);
            v320 = v46;
            if (v51)
            {
              v52 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
              if (v52)
                v53 = v52(v51);
              else
                v53 = 0;
              if (v53 <= 1)
                v54 = 1;
              else
                v54 = v53;
              v55 = (char **)malloc_type_calloc(1uLL, 0x18uLL, 0x102004024DAA5DEuLL);
              *v55 = (char *)malloc_type_calloc(v54, 0x60uLL, 0x1000040565EDBD2uLL);
              v55[2] = (char *)v54;
              FigBaseObject = FigTrackReaderGetFigBaseObject(*(_QWORD *)(v49 + 32));
              v57 = *(void (**)(uint64_t, const __CFString *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
              if (v57)
              {
                v57(FigBaseObject, CFSTR("SecondaryEditCursorService"), v314, &v377);
                v58 = v377 != 0;
              }
              else
              {
                v58 = 0;
              }
              v59 = FigTrackReaderGetFigBaseObject(*(_QWORD *)(v49 + 32));
              v60 = *(void (**)(uint64_t, const __CFString *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
              if (v60)
                v60(v59, CFSTR("EditCursorService"), v314, &v377 + v58);
              v61 = *(&v377 + v58);
              v62 = 1;
              if (v58)
                v62 = 2;
              if (v61)
                v63 = v62;
              else
                v63 = v58;
              if (v63)
              {
                v64 = v377;
                v65 = *(unsigned int (**)(uint64_t, CMTimeMapping *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 8);
                if (v65)
                {
                  *(_OWORD *)&v385.source.start.value = *MEMORY[0x1E0CA2E28];
                  v385.source.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E28] + 16);
                  if (!v65(v64, &v385, &v363))
                  {
                    memset(&v385, 0, sizeof(v385));
                    memset(&v376, 0, sizeof(v376));
                    memset(&source, 0, sizeof(source));
                    v66 = v363;
                    v67 = *(unsigned int (**)(CFTypeRef, CMTimeMapping *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 24);
                    if (v67)
                    {
                      if (v61)
                        v68 = v58;
                      else
                        v68 = 0;
                      while (!v67(v66, &v385))
                      {
                        memset(&v361, 0, sizeof(v361));
                        range = v385.target;
                        otherRange = start;
                        CMTimeRangeGetIntersection(&v361, &range, &otherRange);
                        v46 = v320;
                        if ((v361.start.flags & 1) == 0
                          || (v361.duration.flags & 1) == 0
                          || v361.duration.epoch
                          || v361.duration.value < 0
                          || (range.start = v361.duration,
                              *(_OWORD *)&otherRange.start.value = *MEMORY[0x1E0CA2E68],
                              otherRange.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16),
                              CMTimeCompare(&range.start, &otherRange.start)))
                        {
                          memset(&v360, 0, sizeof(v360));
                          *(_OWORD *)&dur.start.value = *(_OWORD *)&v361.start.value;
                          dur.start.epoch = v361.start.epoch;
                          range = v385.target;
                          otherRange = v385.source;
                          CMTimeMapTimeFromRangeToRange(&v360, &dur.start, &range, &otherRange);
                          memset(&v359, 0, sizeof(v359));
                          dur.start = v361.duration;
                          range = v385.target;
                          otherRange = v385.source;
                          CMTimeMapDurationFromRangeToRange(&v359, &dur.start, &range, &otherRange);
                          memset(&v358, 0, sizeof(v358));
                          range.start = v360;
                          otherRange.start = v359;
                          CMTimeRangeMake(&v358, &range.start, &otherRange.start);
                          memset(&v357, 0, sizeof(v357));
                          range = v358;
                          otherRange = v361;
                          CMTimeMappingMake(&v357, &range, &otherRange);
                          if (v68)
                          {
                            v69 = v378;
                            otherRange.start = v360;
                            v70 = *(uint64_t (**)(uint64_t, CMTimeRange *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 8);
                            if (!v70)
                              goto LABEL_190;
                            *(_OWORD *)&range.start.value = *(_OWORD *)&otherRange.start.value;
                            range.start.epoch = otherRange.start.epoch;
                            v71 = v70(v69, &range, &v362);
                            if (v71 != -12521)
                            {
                              if (!v71)
                              {
                                keysa = v68;
                                do
                                {
                                  v72 = v362;
                                  v73 = *(unsigned int (**)(CFTypeRef, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 24);
                                  if (!v73 || v73(v72, &source))
                                    break;
                                  otherRange = v376;
                                  dur = v358;
                                  CMTimeRangeGetIntersection(&range, &otherRange, &dur);
                                  v361 = range;
                                  if ((range.start.flags & 1) == 0
                                    || (v361.duration.flags & 1) == 0
                                    || v361.duration.epoch
                                    || v361.duration.value < 0
                                    || (range.start = v361.duration,
                                        *(_OWORD *)&otherRange.start.value = *MEMORY[0x1E0CA2E68],
                                        otherRange.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16),
                                        CMTimeCompare(&range.start, &otherRange.start)))
                                  {
                                    otherRange = v385.source;
                                    target = v385.target;
                                    dur = source;
                                    v370 = v376;
                                    range = source;
                                    memset(&v366, 0, sizeof(v366));
                                    memset(&v365, 0, sizeof(v365));
                                    v374 = v376;
                                    *(_OWORD *)&time1.start.value = *(_OWORD *)&v376.start.value;
                                    time1.start.epoch = v376.start.epoch;
                                    *(_OWORD *)&time2.start.value = *(_OWORD *)&v385.source.start.value;
                                    time2.start.epoch = v385.source.start.epoch;
                                    if (CMTimeCompare(&time1.start, &time2.start) < 0)
                                    {
                                      *(_OWORD *)&v374.start.value = *(_OWORD *)&otherRange.start.value;
                                      v374.start.epoch = otherRange.start.epoch;
                                      rhs = otherRange.start;
                                      time1 = v370;
                                      time2 = dur;
                                      CMTimeMapTimeFromRangeToRange(&range.start, &rhs, &time1, &time2);
                                      *(_OWORD *)&time1.start.value = *(_OWORD *)&v374.start.value;
                                      time1.start.epoch = v374.start.epoch;
                                      *(_OWORD *)&time2.start.value = *(_OWORD *)&v370.start.value;
                                      time2.start.epoch = v370.start.epoch;
                                      CMTimeSubtract(&rhs, &time1.start, &time2.start);
                                      time2.start = v370.duration;
                                      CMTimeSubtract(&time1.start, &time2.start, &rhs);
                                      v374.duration = time1.start;
                                      *(_OWORD *)&time1.start.value = *(_OWORD *)&range.start.value;
                                      time1.start.epoch = range.start.epoch;
                                      *(_OWORD *)&time2.start.value = *(_OWORD *)&dur.start.value;
                                      time2.start.epoch = dur.start.epoch;
                                      CMTimeSubtract(&v381, &time1.start, &time2.start);
                                      time2.start = dur.duration;
                                      CMTimeSubtract(&time1.start, &time2.start, &v381);
                                      range.duration = time1.start;
                                    }
                                    time1 = v374;
                                    CMTimeRangeGetEnd(&v366, &time1);
                                    time1 = otherRange;
                                    CMTimeRangeGetEnd(&v365, &time1);
                                    time1.start = v366;
                                    time2.start = v365;
                                    if (CMTimeCompare(&time1.start, &time2.start) >= 1)
                                    {
                                      memset(&v380, 0, sizeof(v380));
                                      time1.start = v366;
                                      time2.start = v365;
                                      CMTimeSubtract(&v380, &time1.start, &time2.start);
                                      memset(&duration, 0, sizeof(duration));
                                      v364 = v380;
                                      time1 = v370;
                                      time2 = dur;
                                      CMTimeMapDurationFromRangeToRange(&duration, &v364, &time1, &time2);
                                      time2.start = v374.duration;
                                      v364 = v380;
                                      CMTimeSubtract(&time1.start, &time2.start, &v364);
                                      v374.duration = time1.start;
                                      time2.start = range.duration;
                                      v364 = duration;
                                      CMTimeSubtract(&time1.start, &time2.start, &v364);
                                      range.duration = time1.start;
                                    }
                                    duration = v374.start;
                                    time1 = otherRange;
                                    time2 = target;
                                    CMTimeMapTimeFromRangeToRange(&v380, &duration, &time1, &time2);
                                    v374.start = v380;
                                    duration = v374.duration;
                                    time1 = otherRange;
                                    time2 = target;
                                    CMTimeMapDurationFromRangeToRange(&v380, &duration, &time1, &time2);
                                    v374.duration = v380;
                                    v357.source = range;
                                    v357.target = v374;
                                    appendToTimeMappingArray(v55, (uint64_t)&range);
                                    v68 = keysa;
                                  }
                                  v74 = v362;
                                  v75 = *(uint64_t (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 16);
                                  if (!v75)
                                    break;
                                  v76 = v75(v74, 1);
                                  if (v76 == -12520)
                                    goto LABEL_116;
                                }
                                while (!v76);
                              }
LABEL_190:
                              v45 = v306;
                              goto LABEL_124;
                            }
                          }
                          else
                          {
                            range = v357.source;
                            v374 = v357.target;
                            appendToTimeMappingArray(v55, (uint64_t)&range);
                          }
                        }
LABEL_116:
                        v77 = v363;
                        v78 = *(unsigned int (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 16);
                        if (!v78 || v78(v77, 1))
                          goto LABEL_190;
                        if (v362)
                        {
                          CFRelease(v362);
                          v362 = 0;
                        }
                        memset(&v385, 0, sizeof(v385));
                        memset(&v376, 0, sizeof(v376));
                        memset(&source, 0, sizeof(source));
                        v66 = v363;
                        v67 = *(unsigned int (**)(CFTypeRef, CMTimeMapping *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 24);
                        if (!v67)
                          break;
                      }
                    }
                    v45 = v306;
                  }
                }
              }
              else
              {
                memset(&v385, 0, sizeof(v385));
                source = start;
                v357.source = start;
                CMTimeMappingMake(&v385, &source, &v357.source);
                source = v385.source;
                v376 = v385.target;
                appendToTimeMappingArray(v55, (uint64_t)&source);
              }
              v46 = v320;
            }
            else
            {
              FigSignalErrorAt();
              v55 = 0;
              v63 = 0;
            }
LABEL_124:
            if (v363)
              CFRelease(v363);
            if (v362)
              CFRelease(v362);
            if (v63 >= 1)
            {
              v79 = (CFTypeRef *)&v377;
              do
              {
                if (*v79)
                {
                  CFRelease(*v79);
                  *v79 = 0;
                }
                ++v79;
                --v63;
              }
              while (v63);
            }
            *(_QWORD *)(v49 + 64) = v55;
            if (v55)
            {
              v80 = (int64_t)v55[1];
              if (v80)
              {
                v81 = (char **)malloc_type_calloc(1uLL, 0x18uLL, 0x102004024DAA5DEuLL);
                *v81 = (char *)malloc_type_calloc(v80, 0x60uLL, 0x1000040565EDBD2uLL);
                v328 = v81;
                v81[2] = (char *)v80;
                v82 = (char **)malloc_type_calloc(1uLL, 0x18uLL, 0x102004024DAA5DEuLL);
                *v82 = (char *)malloc_type_calloc(v80, 0x30uLL, 0x1000040EED21634uLL);
                v324 = v82;
                v82[2] = (char *)v80;
                if (v80 >= 1)
                {
                  for (j = 0; j != v80; ++j)
                  {
                    v381.value = 0;
                    v380.value = 0;
                    v84 = *(_QWORD *)v47;
                    rhs.value = *(_QWORD *)v47;
                    v85 = *(_DWORD *)(v47 + 8);
                    rhs.timescale = v85;
                    v86 = *(_OWORD *)(v47 + 24);
                    *(_OWORD *)&time1.start.value = v86;
                    v87 = *(_QWORD *)(v47 + 40);
                    time1.start.epoch = v87;
                    v88 = *(_OWORD *)(v47 + 64);
                    *(_OWORD *)&source.start.value = *(_OWORD *)(v47 + 48);
                    *(_OWORD *)&source.start.epoch = v88;
                    *(_OWORD *)&source.duration.timescale = *(_OWORD *)(v47 + 80);
                    *(_OWORD *)&time2.start.value = *MEMORY[0x1E0CA2E18];
                    v89 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
                    time2.start.epoch = v89;
                    *(_OWORD *)&v361.start.value = *(_OWORD *)&time2.start.value;
                    v361.start.epoch = v89;
                    *(_OWORD *)&v358.start.value = *(_OWORD *)&time2.start.value;
                    v358.start.epoch = v89;
                    *(_OWORD *)keysb = *(_OWORD *)&time2.start.value;
                    *(_OWORD *)&start.start.value = *MEMORY[0x1E0CA2E28];
                    start.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E28] + 16);
                    *(_OWORD *)&v366.value = *(_OWORD *)&time2.start.value;
                    v366.epoch = v89;
                    v90 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
                    *(_OWORD *)&v357.source.start.value = *MEMORY[0x1E0CA2E40];
                    *(_OWORD *)&v357.source.start.epoch = v90;
                    *(_OWORD *)&v357.source.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
                    LOBYTE(v364.value) = 0;
                    LOBYTE(v360.value) = 0;
                    duration.value = 0;
                    v91 = *(_QWORD **)(v49 + 64);
                    if (v91)
                    {
                      v92 = *v91 + 96 * j;
                      range.start.value = *(_QWORD *)v92;
                      range.start.timescale = *(_DWORD *)(v92 + 8);
                      v93 = *(_DWORD *)(v92 + 12);
                      v94 = *(_QWORD *)(v92 + 16);
                      *(_OWORD *)&v385.source.start.value = *(_OWORD *)(v92 + 24);
                      v385.source.start.epoch = *(_QWORD *)(v92 + 40);
                      v95 = (CMTimeRange *)(v92 + 48);
                    }
                    else
                    {
                      range.start.value = v84;
                      range.start.timescale = v85;
                      *(_OWORD *)&v385.source.start.value = v86;
                      v95 = (CMTimeRange *)(v47 + 48);
                      v93 = v318;
                      v94 = *(_QWORD *)v315;
                      v385.source.start.epoch = v87;
                    }
                    source = *v95;
                    rhs.value = range.start.value;
                    rhs.timescale = range.start.timescale;
                    *(_OWORD *)&time1.start.value = *(_OWORD *)&v385.source.start.value;
                    time1.start.epoch = v385.source.start.epoch;
                    epoch = v385.source.start.epoch;
                    v385.source.start.value = range.start.value;
                    v385.source.start.timescale = range.start.timescale;
                    v385.source.start.flags = v93;
                    v385.source.start.epoch = v94;
                    *(_OWORD *)&v385.source.duration.value = *(_OWORD *)&time1.start.value;
                    v385.source.duration.epoch = epoch;
                    CMTimeRangeGetEnd(&time2.start, &v385.source);
                    if ((v93 & 1) != 0)
                    {
                      v97 = *(_QWORD *)(v49 + 32);
                      v98 = *(unsigned int (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 32);
                      if (v98)
                      {
                        if (!v98(v97, &v381))
                        {
                          v99 = v381.value;
                          v100 = *(unsigned int (**)(CMTimeValue, CMTimeMapping *, CMTime *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
                          if (v100)
                          {
                            v385.source.start.value = rhs.value;
                            v385.source.start.timescale = rhs.timescale;
                            v385.source.start.flags = v93;
                            v385.source.start.epoch = v94;
                            if (!v100(v99, &v385, &v380, 0, 0))
                            {
                              while (1)
                              {
                                LOBYTE(v364.value) = 0;
                                LOBYTE(v360.value) = 0;
                                duration.value = 0;
                                *(_OWORD *)&v385.source.start.value = *(_OWORD *)keysb;
                                v385.source.start.epoch = v89;
                                v101 = v380.value;
                                v102 = *(unsigned int (**)(CMTimeValue, CMTimeMapping *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
                                if (!v102 || v102(v101, &v385))
                                  break;
                                *(_OWORD *)&range.start.value = *(_OWORD *)&v361.start.value;
                                range.start.epoch = v361.start.epoch;
                                *(_OWORD *)&otherRange.start.value = *(_OWORD *)&v385.source.start.value;
                                otherRange.start.epoch = v385.source.start.epoch;
                                CMTimeMinimum(&v361.start, &range.start, &otherRange.start);
                                v103 = v380.value;
                                v104 = *(unsigned int (**)(CMTimeValue, CMTime *, CMTime *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
                                if (v104)
                                {
                                  if (!v104(v103, &v364, &v360, 0, 0) && LOBYTE(v364.value) == 0)
                                  {
                                    v106 = v380.value;
                                    v107 = *(unsigned int (**)(CMTimeValue, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
                                    if (v107)
                                    {
                                      if (!v107(v106, -1, &duration) && duration.value == -1)
                                        continue;
                                    }
                                  }
                                }
                                v109 = v380.value;
                                v110 = *(unsigned int (**)(CMTimeValue, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                 + 48);
                                if (v110 && !v110(v109, &v358))
                                {
                                  if (v380.value)
                                  {
                                    CFRelease((CFTypeRef)v380.value);
                                    v380.value = 0;
                                  }
                                  v111 = v381.value;
                                  *(_OWORD *)&range.start.value = *(_OWORD *)&time2.start.value;
                                  range.start.epoch = time2.start.epoch;
                                  v112 = *(unsigned int (**)(CMTimeValue, CMTimeMapping *, CMTime *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
                                  if (v112)
                                  {
                                    *(_OWORD *)&v385.source.start.value = *(_OWORD *)&range.start.value;
                                    v385.source.start.epoch = range.start.epoch;
                                    if (!v112(v111, &v385, &v380, 0, 0))
                                    {
                                      v113 = v380.value;
                                      v114 = *(unsigned int (**)(CMTimeValue, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                  + 40);
                                      if (v114)
                                      {
                                        if (!v114(v113, &v366))
                                        {
                                          v385.source.start = v366;
                                          *(_OWORD *)&range.start.value = *(_OWORD *)&time2.start.value;
                                          range.start.epoch = time2.start.epoch;
                                          if (CMTimeCompare(&v385.source.start, &range.start)
                                            || (v115 = v380.value,
                                                (v116 = *(unsigned int (**)(CMTimeValue, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 176)) != 0)
                                            && !v116(v115, -1, 0))
                                          {
                                            while (1)
                                            {
                                              *(_OWORD *)&v365.value = *(_OWORD *)keysb;
                                              v365.epoch = v89;
                                              LOBYTE(v364.value) = 0;
                                              LOBYTE(v360.value) = 0;
                                              duration.value = 0;
                                              v117 = v380.value;
                                              *(_OWORD *)&v385.source.start.value = *(_OWORD *)keysb;
                                              v385.source.start.epoch = v89;
                                              *(_OWORD *)&range.start.value = *(_OWORD *)keysb;
                                              range.start.epoch = v89;
                                              v118 = *(unsigned int (**)(CMTimeValue, CMTimeMapping *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
                                              if (!v118)
                                                break;
                                              if (v118(v117, &v385))
                                                break;
                                              v119 = *(unsigned int (**)(CMTimeValue, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
                                              if (!v119 || v119(v117, &range))
                                                break;
                                              *(_OWORD *)&otherRange.start.value = *(_OWORD *)&v385.source.start.value;
                                              otherRange.start.epoch = v385.source.start.epoch;
                                              *(_OWORD *)&dur.start.value = *(_OWORD *)&range.start.value;
                                              dur.start.epoch = range.start.epoch;
                                              CMTimeAdd(&v365, &otherRange.start, &dur.start);
                                              *(_OWORD *)&v385.source.start.value = *(_OWORD *)&start.start.value;
                                              v385.source.start.epoch = start.start.epoch;
                                              range.start = v365;
                                              CMTimeMaximum(&start.start, &v385.source.start, &range.start);
                                              v120 = v380.value;
                                              v121 = *(unsigned int (**)(CMTimeValue, CMTime *, CMTime *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
                                              if (v121)
                                              {
                                                if (!v121(v120, &v364, &v360, 0, 0) && !LOBYTE(v364.value))
                                                {
                                                  v122 = v380.value;
                                                  v123 = *(unsigned int (**)(CMTimeValue, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 176);
                                                  if (v123)
                                                  {
                                                    if (!v123(v122, -1, &duration) && duration.value == -1)
                                                      continue;
                                                  }
                                                }
                                              }
                                              goto LABEL_141;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                break;
                              }
                            }
                          }
                        }
                      }
                    }
                    else
                    {
LABEL_141:
                      *(_OWORD *)&range.start.value = *(_OWORD *)&v361.start.value;
                      range.start.epoch = v361.start.epoch;
                      *(_OWORD *)&otherRange.start.value = *(_OWORD *)&time2.start.value;
                      otherRange.start.epoch = time2.start.epoch;
                      CMTimeRangeFromTimeToTime(&v385.source, &range.start, &otherRange.start);
                      rhs.timescale = v385.source.start.timescale;
                      rhs.value = v385.source.start.value;
                      time1.start = v385.source.duration;
                      v385.target = source;
                      appendToTimeMappingArray(v328, (uint64_t)&v385);
                      *(_OWORD *)&v385.source.start.value = *(_OWORD *)&v358.start.value;
                      v385.source.start.epoch = v358.start.epoch;
                      *(_OWORD *)&range.start.value = *(_OWORD *)&start.start.value;
                      range.start.epoch = start.start.epoch;
                      CMTimeRangeFromTimeToTime(&v357.source, &v385.source.start, &range.start);
                      *(_OWORD *)&v385.source.start.value = *(_OWORD *)&v357.source.start.value;
                      *(_OWORD *)&v385.source.start.epoch = *(_OWORD *)&v357.source.start.epoch;
                      *(_OWORD *)&v385.source.duration.timescale = *(_OWORD *)&v357.source.duration.timescale;
                      appendToTimeRangeArray(v324, (uint64_t)&v385);
                    }
                    if (v381.value)
                      CFRelease((CFTypeRef)v381.value);
                    if (v380.value)
                      CFRelease((CFTypeRef)v380.value);
                  }
                }
                *(_QWORD *)(v49 + 72) = v328;
                *(_QWORD *)(v49 + 80) = v324;
                v45 = v306;
                v46 = v320;
                if (v328[1] && v324[1])
                {
                  v124 = *(_QWORD *)(v49 + 64);
                  if (v124)
                    v125 = *(_QWORD *)(v124 + 8);
                  else
                    v125 = 0;
                  if ((unint64_t)v125 <= 1)
                    v126 = 1;
                  else
                    v126 = v125;
                  v127 = malloc_type_calloc(1uLL, 0x18uLL, 0x102004024DAA5DEuLL);
                  *v127 = malloc_type_calloc(v126, 0x30uLL, 0x1000040EED21634uLL);
                  v127[2] = v126;
                  *(_QWORD *)(v49 + 88) = v127;
                  v128 = MEMORY[0x1E0CA2E30];
                  v129 = 0uLL;
                  if (v125 >= 1)
                  {
                    do
                    {
                      *(_OWORD *)&v385.source.start.epoch = v129;
                      *(_OWORD *)&v385.source.duration.timescale = v129;
                      *(_OWORD *)&v385.source.start.value = v129;
                      *(_OWORD *)&source.start.value = *(_OWORD *)v128;
                      source.start.epoch = *(_QWORD *)(v128 + 16);
                      *(_OWORD *)&v357.source.start.value = *(_OWORD *)&source.start.value;
                      v357.source.start.epoch = source.start.epoch;
                      CMTimeRangeMake(&v385.source, &source.start, &v357.source.start);
                      v130 = *(char ***)(v49 + 88);
                      source = v385.source;
                      appendToTimeRangeArray(v130, (uint64_t)&source);
                      v129 = 0uLL;
                      --v125;
                    }
                    while (v125);
                  }
                  v131 = *(_QWORD *)(v49 + 32);
                  v132 = *(unsigned int (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 32);
                  v46 = v320;
                  if (v132 && !v132(v131, &v350))
                  {
                    v133 = v350;
                    v134 = *(unsigned int (**)(CFTypeRef, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 24);
                    if (!v134 || v134(v133, &v349))
                    {
                      v135 = *(uint64_t **)(v49 + 72);
                      *(_OWORD *)&source.start.value = *MEMORY[0x1E0CA2E18];
                      source.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
                      if (v135 && v135[1] > 0)
                      {
                        v136 = *v135;
                        *(_OWORD *)&source.start.value = *(_OWORD *)v136;
                        source.start.epoch = *(_QWORD *)(v136 + 16);
                      }
                      else
                      {
                        FigSignalErrorAt();
                      }
                      v137 = v350;
                      v138 = *(unsigned int (**)(CFTypeRef, CMTimeMapping *, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
                      if (v138)
                      {
                        *(_OWORD *)&v385.source.start.value = *(_OWORD *)&source.start.value;
                        v385.source.start.epoch = source.start.epoch;
                        if (!v138(v137, &v385, &v349, 0, 0))
                        {
                          do
                          {
                            v385.source.start.value = 0;
                            v142 = v349;
                            v143 = *(unsigned int (**)(uint64_t, uint64_t, CMTimeMapping *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
                          }
                          while (v143 && !v143(v142, -1, &v385) && v385.source.start.value == -1);
                        }
                      }
                    }
                    if (v350)
                      CFRelease(v350);
                    *(_QWORD *)(v49 + 48) = v349;
                    MovieTrackGetMediaDuration(*((_QWORD *)value + 2), (uint64_t)&v385);
                    v367 = v385.source.start.value;
                    flags = v385.source.start.flags;
                    timescale = v385.source.start.timescale;
                    v140 = (CMTimeValue *)(v49 + 112);
                    if ((v385.source.start.flags & 1) != 0)
                    {
                      v144 = v385.source.start.epoch;
                      *v140 = v367;
                      *(_DWORD *)(v49 + 120) = timescale;
                      *(_DWORD *)(v49 + 124) = flags;
                      *(_QWORD *)(v49 + 128) = v144;
                    }
                    else
                    {
                      v141 = MEMORY[0x1E0CA2E68];
                      *(_OWORD *)v140 = *MEMORY[0x1E0CA2E68];
                      *(_QWORD *)(v49 + 128) = *(_QWORD *)(v141 + 16);
                    }
                  }
                }
              }
            }
          }
        }
        ++v46;
      }
      while (v46 != v45);
      v145 = 1;
    }
  }
  else
  {
    v145 = 0;
    v45 = 0;
    v314 = *MEMORY[0x1E0C9AE00];
  }
  v321 = v145;
  if (v145)
  {
    v146 = 0;
    v308 = *MEMORY[0x1E0CA2098];
    *(_OWORD *)keysc = *MEMORY[0x1E0CA2E18];
    v337 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    v329 = *MEMORY[0x1E0CA2E68];
    v325 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    v147 = 1;
    while (1)
    {
      *(_OWORD *)&v357.source.start.value = *(_OWORD *)keysc;
      v357.source.start.epoch = v337;
      *(_OWORD *)&range.start.value = v329;
      range.start.epoch = v325;
      value = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v14 + 56), v146);
      v148 = *((_QWORD *)value + 16);
      if (!v148)
        goto LABEL_299;
      v149 = *(_QWORD *)(v148 + 48);
      if (!v149)
        goto LABEL_299;
      v150 = *(void (**)(uint64_t, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
      if (v150)
        v150(v149, &range);
      *(_OWORD *)&source.start.value = *(_OWORD *)(v148 + 112);
      source.start.epoch = *(_QWORD *)(v148 + 128);
      *(_OWORD *)&otherRange.start.value = v353;
      otherRange.start.epoch = v354;
      CMTimeAdd(&v385.source.start, &source.start, &otherRange.start);
      *(_OWORD *)(v148 + 112) = *(_OWORD *)&v385.source.start.value;
      *(_QWORD *)(v148 + 128) = v385.source.start.epoch;
      v151 = value;
      v152 = a5;
      if (*((_QWORD *)value + 5))
        v152 = (const void *)*((_QWORD *)value + 5);
      if (!a6 && !v152)
      {
LABEL_458:
        v9 = 4294950873;
        goto LABEL_441;
      }
      *(_QWORD *)v316 = v152;
      if (a6 && !*(_QWORD *)(v148 + 16))
      {
        v385.source.start.value = 0;
        source.start.value = 0;
        v153 = *(_QWORD *)(v148 + 48);
        v154 = *(void (**)(uint64_t, _QWORD, _QWORD, CMTimeMapping *, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 144);
        if (v154)
          v154(v153, 0, 0, &v385, &source);
        v155 = source.start.value;
        v156 = (const void *)v385.source.start.value;
        if (!source.start.value && v385.source.start.value)
        {
          CMBaseObject = CMByteStreamGetCMBaseObject();
          v158 = *(void (**)(uint64_t, uint64_t, uint64_t, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
          if (v158)
            v158(CMBaseObject, v308, v314, &source);
          v156 = (const void *)v385.source.start.value;
          v155 = source.start.value;
        }
        *(_QWORD *)(v148 + 16) = v155;
        if (v156)
          CFRelease(v156);
        v151 = value;
      }
      v159 = v151[8];
      if (v159 == -1 || (v160 = (uint64_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v14 + 64), v159)) == 0)
        v311 = 0;
      else
        v311 = *v160;
      if (!*(_BYTE *)(v148 + 145))
        break;
LABEL_299:
      if (++v146 == v45)
      {
        v146 = 0;
        v36 = v147 == 0;
        v193 = v321 ^ 1;
        v147 = 1;
        if (!v36)
          v193 = 1;
        if ((v193 & 1) != 0)
          goto LABEL_303;
      }
    }
    while (1)
    {
      time1.start.value = 0;
      MovieTrackGetMediaDuration(*((_QWORD *)value + 2), (uint64_t)&v385);
      v367 = v385.source.start.value;
      v161 = v385.source.start.flags;
      timescale = v385.source.start.timescale;
      if ((v385.source.start.flags & 1) != 0)
      {
        v162 = v385.source.start.epoch;
        *(_OWORD *)&v385.source.start.value = *(_OWORD *)(v148 + 112);
        v385.source.start.epoch = *(_QWORD *)(v148 + 128);
        source.start.value = v367;
        source.start.timescale = timescale;
        source.start.flags = v161;
        source.start.epoch = v162;
        if (CMTimeCompare(&v385.source.start, &source.start) < 1)
        {
LABEL_298:
          v147 = 0;
          goto LABEL_299;
        }
      }
      v163 = *(_QWORD *)(v148 + 48);
      v164 = *(uint64_t (**)(uint64_t, CMTimeMapping *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
      if (!v164)
        goto LABEL_390;
      MutableMovieTrackObject = v164(v163, &v357);
      if ((_DWORD)MutableMovieTrackObject)
        goto LABEL_440;
      v165 = v45;
      v166 = *(_QWORD **)(v148 + 80);
      dur.start.value = range.start.value;
      dur.start.timescale = range.start.timescale;
      if (!v166)
        break;
      v167 = range.start.flags;
      if ((range.start.flags & 1) == 0)
        break;
      v168 = v166[1];
      if (!v168)
        break;
      if (v168 < 1)
        goto LABEL_263;
      v169 = 0;
      v170 = 0;
      v171 = range.start.epoch;
      while (1)
      {
        v172 = *v166 + v169;
        otherRange.start.value = *(_QWORD *)v172;
        otherRange.start.timescale = *(_DWORD *)(v172 + 8);
        v173 = *(_DWORD *)(v172 + 12);
        if ((v173 & 1) != 0)
        {
          v174 = *(_DWORD *)(v172 + 36);
          if ((v174 & 1) != 0 && !*(_QWORD *)(v172 + 40))
          {
            v175 = *(_QWORD *)(v172 + 24);
            if ((v175 & 0x8000000000000000) == 0)
            {
              v176 = *(_QWORD *)(v172 + 16);
              v177 = *(_DWORD *)(v172 + 32);
              v385.source.start.value = otherRange.start.value;
              v385.source.start.timescale = otherRange.start.timescale;
              v385.source.start.flags = v173;
              v385.source.start.epoch = v176;
              v385.source.duration.value = v175;
              v385.source.duration.timescale = v177;
              v385.source.duration.flags = v174;
              v385.source.duration.epoch = 0;
              source.start.value = dur.start.value;
              source.start.timescale = dur.start.timescale;
              source.start.flags = v167;
              source.start.epoch = v171;
              if (CMTimeRangeContainsTime(&v385.source, &source.start))
                break;
            }
          }
        }
        ++v170;
        v169 += 48;
        if (v168 == v170)
          goto LABEL_263;
      }
      v45 = v165;
      if (*(_DWORD *)value == 1936684398)
      {
        if (v357.source.start.timescale / v357.source.start.value / 4 <= 1)
          v183 = 1;
        else
          v183 = v357.source.start.timescale / v357.source.start.value / 4;
      }
      else
      {
        v183 = 1;
      }
      v184 = *(_QWORD *)(v148 + 40);
      v185 = *(_QWORD *)(v148 + 48);
      v186 = *(uint64_t (**)(uint64_t, uint64_t, CMTimeValue, CMTimeValue, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, CMSampleBufferRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (!v186)
        goto LABEL_390;
      v187 = v186(v184, v185, v183, v183, 1, 0, 2, 0, 0, 0, 0, &sbuf);
      if ((_DWORD)v187 == -12840)
      {
        if (sbuf)
        {
          CFRelease(sbuf);
          sbuf = 0;
        }
LABEL_297:
        *(_BYTE *)(v148 + 145) = 1;
        goto LABEL_298;
      }
      v9 = v187;
      if ((_DWORD)v187)
        goto LABEL_441;
      v188 = value;
      v189 = *(const void **)v316;
      if (!*(_BYTE *)(*((_QWORD *)value + 16) + 146) || !*((_BYTE *)value + 126))
      {
        MovieInformationLockForWrite(*(_QWORD *)(v14 + 24));
        v190 = value;
        if (*(_BYTE *)(*((_QWORD *)value + 16) + 146))
        {
          v9 = 0;
        }
        else
        {
          v9 = setMediaTimeScaleIfNeeded((uint64_t)value, sbuf);
          v190 = value;
          *(_BYTE *)(*((_QWORD *)value + 16) + 146) = 1;
        }
        if (!*((_BYTE *)v190 + 126))
        {
          v191 = *(_DWORD *)v190;
          if (*(_DWORD *)v190 == 1986618469)
          {
            v9 = setVideoTrackDimensionsIfNeeded(v190[2], a7, sbuf);
            v192 = (int *)value;
            *((_BYTE *)value + 126) = 1;
            v191 = *v192;
          }
          if (v191 == 1668047728)
          {
            v9 = setClosedCaptionTrackDimensionsIfNeeded(*(_QWORD *)(v14 + 24));
            *((_BYTE *)value + 126) = 1;
          }
        }
        MovieInformationUnlockForWrite(*(_QWORD *)(v14 + 24));
        if ((_DWORD)v9)
          goto LABEL_441;
        v188 = value;
        v189 = *(const void **)v316;
      }
      MutableMovieTrackObject = addSampleBufferToTrack_0((uint64_t)v188, v189, v311, v170, sbuf);
      if ((_DWORD)MutableMovieTrackObject)
        goto LABEL_440;
      NumSamples = CMSampleBufferGetNumSamples(sbuf);
      if (sbuf)
      {
        CFRelease(sbuf);
        sbuf = 0;
      }
LABEL_264:
      v179 = *(_QWORD *)(v148 + 48);
      v180 = *(uint64_t (**)(uint64_t, CMItemCount, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 168);
      if (!v180)
        goto LABEL_390;
      MutableMovieTrackObject = v180(v179, NumSamples, &time1);
      if ((_DWORD)MutableMovieTrackObject)
        goto LABEL_440;
      v181 = *(_QWORD *)(v148 + 48);
      v182 = *(uint64_t (**)(uint64_t, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
      if (!v182)
        goto LABEL_390;
      MutableMovieTrackObject = v182(v181, &range);
      if ((_DWORD)MutableMovieTrackObject)
        goto LABEL_440;
      if (time1.start.value != NumSamples)
        goto LABEL_297;
      v147 = 0;
      if (*(_BYTE *)(v148 + 145))
        goto LABEL_299;
    }
    FigSignalErrorAt();
LABEL_263:
    NumSamples = 1;
    v45 = v165;
    goto LABEL_264;
  }
LABEL_303:
  v194 = *(const __CFArray **)(v14 + 56);
  *(_OWORD *)&v366.value = *(_OWORD *)a9;
  v366.epoch = *(_QWORD *)(a9 + 16);
  if (!v194 || (v195 = CFArrayGetCount(v194), v195 < 1))
  {
LABEL_437:
    v9 = FigSignalErrorAt();
    if ((_DWORD)v9)
      goto LABEL_441;
LABEL_354:
    v241 = CFArrayGetCount(*(CFArrayRef *)(v14 + 56));
    v385.source.start.value = 0;
    if (v241 < 1)
    {
      keyse = 0;
      v243 = 0;
LABEL_392:
      free(keyse);
      free(v243);
      if (v385.source.start.value)
        CFRelease((CFTypeRef)v385.source.start.value);
      v267 = CFArrayGetCount(*(CFArrayRef *)(v14 + 56));
      v385.source.start.value = 0;
      keysf = v267;
      if (v267 >= 1)
      {
        v268 = 0;
        do
        {
          v269 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v14 + 56), v268);
          if (v269)
          {
            v270 = v269;
            if (*((_BYTE *)v269 + 125))
            {
              v271 = v269[16];
              if (v271)
              {
                if (*(_QWORD *)(v271 + 24))
                {
                  v272 = (const __CFArray *)v385.source.start.value;
                  if (v385.source.start.value)
                    goto LABEL_404;
                  v273 = FigFormatReaderGetFigBaseObject(*(_QWORD *)(v271 + 24));
                  v274 = *(void (**)(uint64_t, const __CFString *, uint64_t, CMTimeMapping *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                  if (v274)
                    v274(v273, CFSTR("AlternateGroupArray"), v314, &v385);
                  v272 = (const __CFArray *)v385.source.start.value;
                  if (v385.source.start.value)
                  {
LABEL_404:
                    v275 = CFArrayGetCount(v272);
                    if (v275 >= 1)
                    {
                      v276 = v275;
                      v277 = 0;
                      v336 = v270;
                      v340 = v268;
                      v332 = v275;
                      do
                      {
                        v278 = (const __CFArray *)CFArrayGetValueAtIndex((CFArrayRef)v385.source.start.value, v277);
                        if (v278)
                        {
                          v279 = CFArrayGetCount(v278);
                          if (v279 >= 1)
                          {
                            v280 = v279;
                            v281 = 0;
                            while (1)
                            {
                              LODWORD(source.start.value) = 0;
                              FigCFArrayGetInt32AtIndex();
                              if (*(_DWORD *)(v271 + 4) == LODWORD(source.start.value))
                                break;
                              if (v280 == ++v281)
                                goto LABEL_432;
                            }
                            v282 = 0;
                            while (1)
                            {
                              v283 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v14 + 56), v282);
                              if (v283)
                              {
                                v284 = v283[16];
                                if (v284)
                                {
                                  AlternateGroupID = MovieTrackGetAlternateGroupID(v283[2]);
                                  if (AlternateGroupID)
                                    break;
                                }
                              }
LABEL_420:
                              if (++v282 == keysf)
                              {
                                v288 = v336[2];
                                v289 = CFArrayGetCount(*(CFArrayRef *)(v14 + 56));
                                if (v289 < 1)
                                {
                                  v291 = 0;
                                  v268 = v340;
                                }
                                else
                                {
                                  v290 = v289;
                                  v291 = 0;
                                  v292 = 0;
                                  v268 = v340;
                                  do
                                  {
                                    v293 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v14 + 56), v292);
                                    if (v293)
                                    {
                                      v294 = MovieTrackGetAlternateGroupID(v293[2]);
                                      if (v294 > v291)
                                        v291 = v294;
                                    }
                                    ++v292;
                                  }
                                  while (v290 != v292);
                                }
                                MovieTrackSetAlternateGroupID(v288, v291 + 1);
                                goto LABEL_431;
                              }
                            }
                            v286 = AlternateGroupID;
                            v287 = 0;
                            while (1)
                            {
                              LODWORD(v357.source.start.value) = 0;
                              if (v281 != v287)
                              {
                                FigCFArrayGetInt32AtIndex();
                                if (*(_DWORD *)(v284 + 4) == LODWORD(v357.source.start.value))
                                  break;
                              }
                              if (v280 == ++v287)
                                goto LABEL_420;
                            }
                            MovieTrackSetAlternateGroupID(v336[2], v286);
                            v268 = v340;
LABEL_431:
                            v276 = v332;
                          }
                        }
LABEL_432:
                        ++v277;
                      }
                      while (v277 != v276);
                    }
                  }
                }
              }
            }
          }
          ++v268;
        }
        while (v268 != keysf);
        if (v385.source.start.value)
          CFRelease((CFTypeRef)v385.source.start.value);
      }
      v9 = 0;
      goto LABEL_441;
    }
    v242 = v241;
    v243 = 0;
    keyse = 0;
    v244 = 0;
    v327 = v241;
    while (1)
    {
      v245 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v14 + 56), v244);
      if (v245)
      {
        if (*((_BYTE *)v245 + 125))
        {
          v246 = v245[16];
          if (v246)
          {
            if (*(_QWORD *)(v246 + 24))
            {
              v247 = (const __CFDictionary *)v385.source.start.value;
              if (v385.source.start.value)
                goto LABEL_361;
              v262 = FigFormatReaderGetFigBaseObject(*(_QWORD *)(v246 + 24));
              v263 = *(void (**)(uint64_t, const __CFString *, uint64_t, CMTimeMapping *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 48);
              if (v263)
                v263(v262, CFSTR("TrackReferenceDictionary"), v314, &v385);
              if (v385.source.start.value)
              {
                v264 = CFDictionaryGetCount((CFDictionaryRef)v385.source.start.value);
                if (v264)
                  break;
              }
            }
          }
        }
      }
LABEL_388:
      if (++v244 == v242)
        goto LABEL_392;
    }
    v265 = v264;
    v266 = (const void **)malloc_type_calloc(v264, 8uLL, 0x6004044C4A2DFuLL);
    v243 = malloc_type_calloc(v265, 8uLL, 0x6004044C4A2DFuLL);
    v247 = (const __CFDictionary *)v385.source.start.value;
    keyse = v266;
    if (v266 && v243)
    {
      CFDictionaryGetKeysAndValues((CFDictionaryRef)v385.source.start.value, v266, (const void **)v243);
      v247 = (const __CFDictionary *)v385.source.start.value;
    }
LABEL_361:
    v339 = CFDictionaryGetCount(v247);
    if (keyse && v243 && v339 >= 1)
    {
      v331 = v244;
      v248 = 0;
      v335 = v243;
      do
      {
        v249 = (const __CFString *)keyse[v248];
        v250 = CFArrayGetCount(*((CFArrayRef *)v243 + v248));
        if (v250 >= 1)
        {
          v251 = v250;
          for (k = 0; k < v251; k += 2)
          {
            LODWORD(source.start.value) = 0;
            LODWORD(v357.source.start.value) = 0;
            FigCFArrayGetInt32AtIndex();
            FigCFArrayGetInt32AtIndex();
            if (*(_DWORD *)(v246 + 4) == LODWORD(v357.source.start.value))
            {
              v253 = *(_DWORD *)(v246 + 152);
              v254 = CFArrayGetCount(*(CFArrayRef *)(v14 + 72));
              if (v254 >= 1)
              {
                v255 = v254;
                v256 = 0;
                while (1)
                {
                  v257 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v14 + 72), v256);
                  if (v257[1] == LODWORD(source.start.value))
                    break;
                  if (v255 == ++v256)
                    goto LABEL_378;
                }
                v258 = v257[38];
                if (v258)
                  v259 = v253 == 0;
                else
                  v259 = 1;
                if (!v259)
                {
                  v260 = *(uint64_t **)(v14 + 24);
                  v261 = convertCFStringToOSType(v249);
                  MovieInformationAddOneTrackReference(v260, v261, v258, v253);
                }
              }
            }
LABEL_378:
            ;
          }
        }
        ++v248;
        v243 = v335;
      }
      while (v248 != v339);
      v242 = v327;
      v244 = v331;
    }
    goto LABEL_388;
  }
  v196 = v195;
  v197 = 0;
  v9 = 0;
  v198 = MEMORY[0x1E0CA2E20];
  v305 = v194;
  v307 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v319 = *(_QWORD *)(MEMORY[0x1E0CA2E20] + 16);
  v199 = *MEMORY[0x1E0CA2E68];
  v302 = *(_DWORD *)(MEMORY[0x1E0CA2E68] + 12);
  keysd = *(_DWORD *)(MEMORY[0x1E0CA2E68] + 8);
  v304 = v195;
  v303 = *MEMORY[0x1E0CA2E68];
  do
  {
    v200 = CFArrayGetValueAtIndex(v194, v197);
    rhs.value = v199;
    rhs.timescale = keysd;
    if (!v200)
      goto LABEL_437;
    v201 = (_QWORD *)v200[16];
    if (v201)
    {
      v202 = v201[8];
      if (v202)
      {
        v203 = v201[9];
        if (v203)
        {
          v204 = *(_QWORD *)(v202 + 8);
          v205 = *(_QWORD *)(v203 + 8);
          v206 = !v204 || v205 == 0;
          if (!v206 && v204 == v205)
          {
            v208 = v200[1];
            v322 = v200[2];
            v9 = MovieInformationLockForWrite(v208);
            if (!(_DWORD)v9)
            {
              v338 = (CMTime *)v208;
              if (v204 >= 1)
              {
                v209 = 0;
                v9 = 0;
                v210 = 88;
                v309 = v307;
                v312 = v302;
                v211 = v319;
                v212 = v208;
                while (1)
                {
                  v213 = (_QWORD *)v201[8];
                  if (v213)
                  {
                    v214 = (_QWORD *)(*v213 + v210);
                    *(_OWORD *)&v365.value = *(_OWORD *)(v214 - 11);
                    v215 = *(v214 - 9);
                    *(_OWORD *)&dur.start.value = *((_OWORD *)v214 - 4);
                    dur.start.epoch = *(v214 - 6);
                    v380.value = *(v214 - 5);
                    v216 = (CMTimeFlags *)v214 - 7;
                    v380.timescale = *((_DWORD *)v214 - 8);
                    v217 = v214 - 3;
                    v218 = v214 - 2;
                    v219 = (CMTimeScale *)(v214 - 1);
                    v220 = (CMTimeFlags *)v214 - 1;
                  }
                  else
                  {
                    *(_OWORD *)&v365.value = *(_OWORD *)v198;
                    *(_OWORD *)&dur.start.value = *(_OWORD *)(v198 + 24);
                    v221 = *(_QWORD *)(v198 + 48);
                    dur.start.epoch = *(_QWORD *)(v198 + 40);
                    v380.value = v221;
                    v214 = (_QWORD *)(v198 + 88);
                    v220 = (CMTimeFlags *)(v198 + 84);
                    v219 = (CMTimeScale *)(v198 + 80);
                    v380.timescale = *(_DWORD *)(v198 + 56);
                    v218 = (CMTimeValue *)(v198 + 72);
                    v217 = (CMTimeEpoch *)(v198 + 64);
                    v216 = (CMTimeFlags *)(v198 + 60);
                    v215 = v211;
                  }
                  v222 = *v214;
                  v223 = *v220;
                  v224 = *v219;
                  v225 = *v218;
                  v226 = *v217;
                  v227 = *v216;
                  v228 = (_QWORD *)v201[9];
                  if (v228)
                  {
                    v229 = (_QWORD *)(*v228 + v210);
                    *(_OWORD *)&v385.source.start.value = *(_OWORD *)(v229 - 11);
                    *(_OWORD *)&v385.source.start.epoch = *(_OWORD *)(v229 - 9);
                    *(_OWORD *)&v385.source.duration.timescale = *(_OWORD *)(v229 - 7);
                    *(_OWORD *)((char *)&v385.source.duration.epoch + 4) = *(_OWORD *)((char *)v229 - 44);
                    v230 = (_DWORD *)v229 - 7;
                    v231 = v229 - 2;
                    v232 = (_DWORD *)v229 - 1;
                    if ((v227 & 1) != 0)
                      goto LABEL_328;
                  }
                  else
                  {
                    v233 = *(_OWORD *)(v198 + 16);
                    *(_OWORD *)&v385.source.start.value = *(_OWORD *)v198;
                    *(_OWORD *)&v385.source.start.epoch = v233;
                    *(_OWORD *)&v385.source.duration.timescale = *(_OWORD *)(v198 + 32);
                    *(_OWORD *)((char *)&v385.source.duration.epoch + 4) = *(_OWORD *)(v198 + 44);
                    v229 = (_QWORD *)(v198 + 88);
                    v232 = (_DWORD *)(v198 + 84);
                    v231 = (_QWORD *)(v198 + 72);
                    v230 = (_DWORD *)(v198 + 60);
                    if ((v227 & 1) != 0)
                    {
LABEL_328:
                      if ((v223 & 1) != 0
                        && !v222
                        && (v225 & 0x8000000000000000) == 0
                        && (*v230 & 1) != 0
                        && (*v232 & 1) != 0
                        && !*v229
                        && (*v231 & 0x8000000000000000) == 0)
                      {
                        *(_OWORD *)&time1.start.value = *MEMORY[0x1E0CA2E18];
                        time1.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
                        v234 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
                        *(_OWORD *)&source.start.value = *MEMORY[0x1E0CA2E40];
                        *(_OWORD *)&source.start.epoch = v234;
                        *(_OWORD *)&source.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
                        duration.value = *MEMORY[0x1E0CA2E40];
                        duration.timescale = *(_DWORD *)(MEMORY[0x1E0CA2E40] + 8);
                        *(_OWORD *)&time2.start.value = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 24);
                        time2.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E40] + 40);
                        *(_OWORD *)&v357.source.start.value = *(_OWORD *)&source.start.value;
                        *(_OWORD *)&v357.source.start.epoch = v234;
                        *(_OWORD *)&v357.source.duration.timescale = *(_OWORD *)&source.duration.timescale;
                        if (v210 == 88)
                        {
                          rhs.value = v380.value;
                          rhs.timescale = v380.timescale;
                          v312 = v227;
                          v309 = v226;
                        }
                        v330 = v225;
                        v334 = v224;
                        if (v215)
                        {
                          v326 = v226;
                          v381.value = v380.value;
                          v381.timescale = v380.timescale;
                        }
                        else
                        {
                          otherRange.start.value = v380.value;
                          otherRange.start.timescale = v380.timescale;
                          otherRange.start.flags = v227;
                          otherRange.start.epoch = v226;
                          v361.start.value = rhs.value;
                          v361.start.timescale = rhs.timescale;
                          v361.start.flags = v312;
                          v361.start.epoch = v309;
                          CMTimeSubtract(&range.start, &otherRange.start, &v361.start);
                          v215 = 0;
                          v381.value = range.start.value;
                          v227 = range.start.flags;
                          v381.timescale = range.start.timescale;
                          v326 = range.start.epoch;
                        }
                        *(_OWORD *)&range.start.value = *(_OWORD *)&v365.value;
                        range.start.epoch = v215;
                        *(_OWORD *)&otherRange.start.value = *(_OWORD *)&v385.source.start.value;
                        otherRange.start.epoch = v385.source.start.epoch;
                        CMTimeSubtract(&time1.start, &range.start, &otherRange.start);
                        v235 = (_QWORD *)v201[11];
                        if (v235)
                          v236 = (CMTimeRange *)(*v235 + v209);
                        else
                          v236 = (CMTimeRange *)MEMORY[0x1E0CA2E40];
                        source = *v236;
                        *(_OWORD *)&otherRange.start.value = *(_OWORD *)&source.start.value;
                        otherRange.start.epoch = source.start.epoch;
                        *(_OWORD *)&v361.start.value = *(_OWORD *)&time1.start.value;
                        v361.start.epoch = time1.start.epoch;
                        CMTimeAdd(&v358.start, &otherRange.start, &v361.start);
                        *(_OWORD *)&otherRange.start.value = *(_OWORD *)&dur.start.value;
                        otherRange.start.epoch = dur.start.epoch;
                        CMTimeRangeMake(&range, &v358.start, &otherRange.start);
                        duration.value = range.start.value;
                        v237 = range.start.flags;
                        duration.timescale = range.start.timescale;
                        v317 = range.start.epoch;
                        time2.start = range.duration;
                        range.start = v366;
                        otherRange.start.value = v381.value;
                        otherRange.start.timescale = v381.timescale;
                        otherRange.start.flags = v227;
                        v238 = v237;
                        otherRange.start.epoch = v326;
                        CMTimeAdd(&start.start, &range.start, &otherRange.start);
                        range.start.value = v330;
                        range.start.timescale = v334;
                        range.start.flags = v223;
                        range.start.epoch = 0;
                        CMTimeRangeMake(&v357.source, &start.start, &range.start);
                        if ((v238 & 0x1D) == 1)
                        {
                          range.start.value = duration.value;
                          range.start.timescale = duration.timescale;
                          range.start.flags = v238;
                          range.start.epoch = v317;
                          *(_OWORD *)&otherRange.start.value = *MEMORY[0x1E0CA2E68];
                          otherRange.start.epoch = v307;
                          v239 = CMTimeCompare(&range.start, &otherRange.start);
                          v212 = (uint64_t)v338;
                          if ((v239 & 0x80000000) == 0)
                          {
                            range = v357.source;
                            otherRange.start.value = duration.value;
                            otherRange.start.timescale = duration.timescale;
                            otherRange.start.flags = v238;
                            otherRange.start.epoch = v317;
                            otherRange.duration = time2.start;
                            inserted = MovieTrackInsertMediaSegment(v338, v322, &range, (__int128 *)&otherRange.start.value);
                            v212 = (uint64_t)v338;
                            v9 = inserted;
                          }
                        }
                        else
                        {
                          v212 = (uint64_t)v338;
                        }
                        v211 = v319;
                      }
                    }
                  }
                  v209 += 48;
                  v210 += 96;
                  if (!--v204)
                    goto LABEL_351;
                }
              }
              v9 = 0;
              v212 = v208;
LABEL_351:
              MovieInformationUnlockForWrite(v212);
              v196 = v304;
              v194 = v305;
              v199 = v303;
            }
          }
        }
      }
    }
    ++v197;
  }
  while (v197 != v196);
  if (!(_DWORD)v9)
    goto LABEL_354;
LABEL_441:
  v295 = *(const __CFArray **)(v14 + 56);
  if (v295)
  {
    v296 = CFArrayGetCount(v295);
    if (v296 >= 1)
    {
      v297 = v296;
      for (m = 0; m != v297; ++m)
      {
        v299 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v14 + 56), m);
        value = v299;
        if (v299)
        {
          if (*((_BYTE *)v299 + 124))
            *((_QWORD *)v299 + 16) = 0;
          *((_BYTE *)v299 + 125) = 0;
        }
      }
    }
  }
  if (!v323)
    MEMORY[0x19402EF04](*(_QWORD *)(v14 + 48));
LABEL_451:
  if (v351)
    CFRelease(v351);
  if (sbuf)
    CFRelease(sbuf);
  if (cf)
    CFRelease(cf);
  return v9;
}

__n128 appendToTimeRangeArray(char **a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  __n128 result;
  __int128 v9;

  if (a1)
  {
    v4 = a1[1];
    v5 = a1[2];
    v6 = *a1;
    if (v4 == v5)
    {
      a1[2] = (char *)(2 * (_QWORD)v4);
      v6 = (char *)malloc_type_realloc(v6, 96 * (_QWORD)v4, 0x1000040EED21634uLL);
      *a1 = v6;
      v4 = a1[1];
    }
    a1[1] = v4 + 1;
    v7 = &v6[48 * (_QWORD)v4];
    result = *(__n128 *)a2;
    v9 = *(_OWORD *)(a2 + 32);
    *((_OWORD *)v7 + 1) = *(_OWORD *)(a2 + 16);
    *((_OWORD *)v7 + 2) = v9;
    *(__n128 *)v7 = result;
  }
  return result;
}

__n128 appendToTimeMappingArray(char **a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  if (a1)
  {
    v4 = a1[1];
    v5 = a1[2];
    v6 = *a1;
    if (v4 == v5)
    {
      a1[2] = (char *)(2 * (_QWORD)v4);
      v6 = (char *)malloc_type_realloc(v6, 192 * (_QWORD)v4, 0x1000040565EDBD2uLL);
      *a1 = v6;
      v4 = a1[1];
    }
    a1[1] = v4 + 1;
    v7 = &v6[96 * (_QWORD)v4];
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v7 = *(_OWORD *)a2;
    *((_OWORD *)v7 + 1) = v8;
    result = *(__n128 *)(a2 + 32);
    v10 = *(_OWORD *)(a2 + 48);
    v11 = *(_OWORD *)(a2 + 80);
    *((_OWORD *)v7 + 4) = *(_OWORD *)(a2 + 64);
    *((_OWORD *)v7 + 5) = v11;
    *((__n128 *)v7 + 2) = result;
    *((_OWORD *)v7 + 3) = v10;
  }
  return result;
}

uint64_t FigNWPathEvaluatorCreate(uint64_t a1, const __CFURL *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v12;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a7 && a4 && a6 && a5)
  {
    if (a2 && !FigCFHTTPIsHTTPBasedURL(a2))
      return 4294954516;
    if (FigNwPathEvaluatorGetClassID_sRegisterFigNwPathEvaluatorTypeOnce != -1)
      dispatch_once(&FigNwPathEvaluatorGetClassID_sRegisterFigNwPathEvaluatorTypeOnce, &__block_literal_global_58);
    CMDerivedObjectCreate();
  }
  v12 = FigSignalErrorAt();
  if (!(_DWORD)v12)
    *a7 = 0;
  return v12;
}

void figNwPathEvaluatorFinalize()
{
  uint64_t DerivedStorage;
  void *v1;
  const void *v2;
  NSObject *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 8))
  {
    nw_path_evaluator_cancel();
    v1 = *(void **)(DerivedStorage + 8);
    if (v1)
      nw_release(v1);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 32);
  if (v2)
    CFRelease(v2);
  v3 = *(NSObject **)(DerivedStorage + 40);
  if (v3)
  {
    dispatch_release(v3);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
}

uint64_t figNwPathEvaluatorCopyProperty(uint64_t a1, CFTypeRef cf1, uint64_t a3, _QWORD *a4)
{
  NSObject **DerivedStorage;
  NSObject *v6;
  uint64_t v7;
  _QWORD block[7];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;

  v14 = 0;
  v15 = &v14;
  v16 = 0x2000000000;
  v17 = 0;
  if (a1 && a4)
  {
    if (CFEqual(cf1, CFSTR("kFigNetworkPathEvaluatorProperty_EstimatedDownloadThroughput")))
    {
      DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
      v10 = 0;
      v11 = &v10;
      v12 = 0x2000000000;
      v13 = 0;
      v6 = *DerivedStorage;
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __figNwPathEvaluatorCopyProperty_block_invoke;
      block[3] = &unk_1E2FA3190;
      block[4] = &v10;
      block[5] = &v14;
      block[6] = DerivedStorage;
      dispatch_sync(v6, block);
      if (!*((_DWORD *)v15 + 6))
        *a4 = v11[3];
      _Block_object_dispose(&v10, 8);
    }
    else
    {
      *((_DWORD *)v15 + 6) = FigSignalErrorAt();
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  v7 = *((unsigned int *)v15 + 6);
  _Block_object_dispose(&v14, 8);
  return v7;
}

void __figNwPathEvaluatorCopyProperty_block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = nw_path_evaluator_copy_path();
  if (v2)
  {
    v3 = (void *)v2;
    nw_path_get_estimated_download_throughput();
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = FigCFNumberCreateUInt64();
    if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = -12786;
    nw_release(v3);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = -12783;
  }
}

CFDictionaryRef figNwPathEvaluatorCopyCurrentPathInformation(uint64_t a1)
{
  NSObject **DerivedStorage;
  NSObject *v2;
  CFDictionaryRef v3;
  void *v4;
  _QWORD v6[6];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  if (a1)
  {
    DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
    v2 = *DerivedStorage;
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 0x40000000;
    v6[2] = __figNwPathEvaluatorCopyCurrentPathInformation_block_invoke;
    v6[3] = &unk_1E2FA31B8;
    v6[4] = &v7;
    v6[5] = DerivedStorage;
    dispatch_sync(v2, v6);
    v3 = fnpe_CopyCurrentPathInformationFromNWPath(v8[3]);
  }
  else
  {
    FigSignalErrorAt();
    v3 = 0;
  }
  v4 = (void *)v8[3];
  if (v4)
    nw_release(v4);
  _Block_object_dispose(&v7, 8);
  return v3;
}

uint64_t __figNwPathEvaluatorCopyCurrentPathInformation_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (result)
  {
    result = nw_path_evaluator_copy_path();
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

CFDictionaryRef fnpe_CopyCurrentPathInformationFromNWPath(NSObject *a1)
{
  const __CFAllocator *v2;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v4;
  void *v5;
  _BOOL4 v6;
  int is_local;
  int v8;
  _BOOL4 is_expensive;
  CFDictionaryRef Copy;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v4 = Mutable;
    if (a1)
    {
      v5 = (void *)nw_path_copy_interface();
      FigNetworkInterfaceGetTypeFromNWInterface();
      if (v5)
        nw_release(v5);
      FigNetworkPathInformationSetInterfaceType();
      v6 = ((nw_path_get_status(a1) - 1) & 0xFFFFFFFD) == 0;
      FigNetworkPathInformationSetHostIsReachable(v4, v6);
      is_local = nw_path_is_local();
      FigNetworkPathInformationSetHostIsLocal(v4, is_local);
      v8 = ((nw_path_get_status(a1) - 1) & 0xFFFFFFFD) == 0
        && nw_path_uses_interface_type(a1, nw_interface_type_cellular);
      FigNetworkPathInformationSetDoesUseCellular(v4, v8);
      is_expensive = nw_path_is_expensive(a1);
    }
    else
    {
      FigNetworkPathInformationSetInterfaceType();
      FigNetworkPathInformationSetHostIsReachable(v4, 0);
      FigNetworkPathInformationSetHostIsLocal(v4, 0);
      FigSignalErrorAt();
      FigNetworkPathInformationSetDoesUseCellular(v4, 0);
      FigSignalErrorAt();
      is_expensive = 0;
    }
    FigNetworkPathInformationSetExpensive(v4, is_expensive);
    Copy = CFDictionaryCreateCopy(v2, v4);
    CFRelease(v4);
    return Copy;
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
}

CFStringRef figNwPathEvaluatorBaseCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigNWPathEvaluator %p]"), a1);
}

uint64_t FigPlaybackCoordinatorCreate()
{
  uint64_t result;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  FigPlaybackCoordinatorGetClassID();
  result = CMDerivedObjectCreate();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t FigPlayerCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t FigBaseObject;
  uint64_t result;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);

  FigBaseObject = FigPlayerGetFigBaseObject(a1);
  result = CMBaseObjectGetVTable();
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(result + 8) + 48);
  if (v9)
    return v9(FigBaseObject, a2, a3, a4);
  return result;
}

void playbackCoordinator_performStartupTaskNegotiatingTimingWithCoordinatedPlaybackGroup(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t DerivedStorage;
  uint64_t v9;
  const __CFAllocator *v10;
  CFAbsoluteTime Current;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v20;
  _BOOL4 v21;
  BOOL v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  NSObject *v29;
  uint64_t v30;
  NSObject *v31;
  NSObject *v32;
  NSObject *v33;
  __CFDictionary *Mutable;
  int v35;
  NSObject *v36;
  _DWORD *v37;
  NSObject *v38;
  int v39;
  _OWORD v41[3];
  char v42;
  float v43;
  CMTime v44;
  CMTime type;
  int v46;
  uint64_t v47;
  CMTime time;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
  {
    FigSignalErrorAt();
    a5(a4, a2, 1);
    return;
  }
  v9 = DerivedStorage;
  FigCFDictionaryGetFloat32IfPresent();
  playbackCoordinator_completePendingStartupTask((uint64_t)a1, 0);
  FigCFDictionaryGetValue();
  *(_QWORD *)(v9 + 184) = a5;
  *(_QWORD *)(v9 + 192) = a4;
  *(_DWORD *)(v9 + 176) = a2;
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Current = CFAbsoluteTimeGetCurrent();
  *(_QWORD *)(v9 + 200) = CFDateCreate(v10, Current);
  if (!*(_BYTE *)(v9 + 96))
  {
    if (*(_QWORD *)(v9 + 296))
      playbackCoordinator_completePendingStartupTask((uint64_t)a1, 1);
    if (!FigCFEqual())
      return;
    v47 = -1;
    v46 = 0;
    type = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    v44 = type;
    v43 = 0.0;
    v42 = 0;
    FigPlaybackCoordinatorGetCMBaseObject(a1);
    v14 = CMBaseObjectGetDerivedStorage();
    v15 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
    v41[0] = *MEMORY[0x1E0CA2E40];
    v41[1] = v15;
    v41[2] = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
    if (*(_DWORD *)(v14 + 176) != (_DWORD)a2)
      return;
    v16 = v14;
    if (!*(_QWORD *)(v14 + 40) || *(_DWORD *)(v14 + 56) != 10000)
      return;
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetCMTimeIfPresent();
    FigCFDictionaryGetFloat32IfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetCMTimeIfPresent();
    if (v43 != 0.0 && playbackCoordinator_systemEventSuspensionsActive((uint64_t)a1))
    {
      v18 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (dword_1ECDC8900)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      MEMORY[0x19402EEEC](*(_QWORD *)(v16 + 64));
      v21 = playbackCoordinator_systemEventSuspensionsActive((uint64_t)a1);
      v22 = v21;
      if (v21)
        playbackCoordinator_endAllSystemEventSuspensions((uint64_t)a1);
      if (FigTimelineCoordinatorIsSuspended())
      {
        if (dword_1ECDC8900)
        {
          v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        playbackCoordinator_completePendingStartupTask((uint64_t)a1, 1);
        MEMORY[0x19402EF04](*(_QWORD *)(v16 + 64));
      }
      else
      {
        *(_BYTE *)(v16 + 320) = v22;
        MEMORY[0x19402EF04](*(_QWORD *)(v16 + 64));
        if (*(_QWORD *)(v16 + 216))
        {
          if (dword_1ECDC8900)
          {
            v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          figPlaybackCoordinator_completePendingCommandAndRecordNewCallback((uint64_t)a1, 0, 0, 0);
          if (!v18)
            return;
LABEL_46:
          v17 = (const void *)v18;
          goto LABEL_14;
        }
      }
      if (!v18)
        return;
      goto LABEL_46;
    }
    if (FigTimelineCoordinatorIsSuspended())
    {
      if (dword_1ECDC8900)
        goto LABEL_40;
      goto LABEL_41;
    }
    if (*(float *)(v16 + 168) == v43)
    {
      if (!*(_BYTE *)(v16 + 104))
      {
        time = v44;
        if (!figPlaybackCoordinator_isTimeInInterstitialRange((uint64_t)a1, &time, v41))
        {
          if (dword_1ECDC8900)
          {
            v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          return;
        }
        if (!dword_1ECDC8900)
          goto LABEL_41;
        goto LABEL_40;
      }
      if (!*(_BYTE *)(v16 + 232))
      {
        if (dword_1ECDC8900)
        {
          v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v26 = (uint64_t)a1;
        v27 = 0;
        goto LABEL_42;
      }
      if ((*(_BYTE *)(v16 + 120) & 1) != 0 && *(float *)(v16 + 156) != 0.0 && (*(_BYTE *)(v16 + 144) & 1) != 0)
      {
        v37 = malloc_type_malloc(0x10uLL, 0x10200403A5D3213uLL);
        *(_QWORD *)v37 = CFRetain(a1);
        v37[2] = a2;
        if (dword_1ECDC8900)
        {
          v38 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        dispatch_async_f(*(dispatch_queue_t *)(v16 + 272), v37, (dispatch_function_t)playbackCoordinator_setReferenceTimebaseAndCompleteStartupTask);
        return;
      }
      if (dword_1ECDC8900)
      {
LABEL_40:
        v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
LABEL_41:
      v26 = (uint64_t)a1;
      v27 = 1;
LABEL_42:
      playbackCoordinator_completePendingStartupTask(v26, v27);
      return;
    }
    if (dword_1ECDC8900)
    {
      v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    MEMORY[0x19402EEEC](*(_QWORD *)(v16 + 208));
    if (*(_BYTE *)(v16 + 264))
    {
      if (dword_1ECDC8900)
      {
        v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      playbackCoordinator_completePendingStartupTask((uint64_t)a1, 0);
      v30 = *(_QWORD *)(v16 + 208);
LABEL_63:
      MEMORY[0x19402EF04](v30);
      return;
    }
    MEMORY[0x19402EF04](*(_QWORD *)(v16 + 208));
    MEMORY[0x19402EEEC](*(_QWORD *)(v16 + 64));
    if (*(_BYTE *)(v16 + 320))
    {
      if (dword_1ECDC8900)
      {
        v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      playbackCoordinator_completePendingStartupTask((uint64_t)a1, 0);
      v30 = *(_QWORD *)(v16 + 64);
      goto LABEL_63;
    }
    MEMORY[0x19402EF04](*(_QWORD *)(v16 + 64));
    if (*(_QWORD *)(v16 + 216))
    {
      if (dword_1ECDC8900)
      {
        v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      figPlaybackCoordinator_completePendingCommandAndRecordNewCallback((uint64_t)a1, 0, 0, 0);
    }
    if (*(float *)(v16 + 168) == v43 || v43 == 0.0)
    {
      Mutable = 0;
    }
    else
    {
      Mutable = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA5388], (const void *)*MEMORY[0x1E0C9AE50]);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA5390], (const void *)*MEMORY[0x1E0C9AE40]);
      v35 = FigTimelineCoordinatorCoordinateRateChange();
      if (v35)
      {
        v39 = v35;
LABEL_81:
        if (Mutable)
          CFRelease(Mutable);
        if (!v39)
          return;
        goto LABEL_41;
      }
      *(_QWORD *)(v16 + 88) = v47;
      *(float *)(v16 + 168) = v43;
      *(_BYTE *)(v16 + 104) = 0;
      time = v44;
      if (figPlaybackCoordinator_isTimeInInterstitialRange((uint64_t)a1, &time, v41))
      {
        if (dword_1ECDC8900)
        {
          v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        playbackCoordinator_completePendingStartupTask((uint64_t)a1, 1);
      }
    }
    v39 = 0;
    goto LABEL_81;
  }
  v12 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (dword_1ECDC8900)
  {
    LODWORD(v41[0]) = 0;
    LOBYTE(type.value) = 0;
    v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  playbackCoordinator_completePendingStartupTask((uint64_t)a1, 1);
  if (v12)
  {
    v17 = (const void *)v12;
LABEL_14:
    CFRelease(v17);
  }
}

void playbackCoordinator_setRateAndAnchorTime(uint64_t a1, float a2, uint64_t a3, uint64_t a4, __int128 *a5, __int128 *a6, uint64_t a7, const void *a8, int a9, uint64_t a10, void (*a11)(uint64_t, _QWORD))
{
  uint64_t DerivedStorage;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  const __CFArray *v20;
  CFMutableDictionaryRef Mutable;
  const void *v22;
  void (*v23)(CFTypeRef, float *);
  uint64_t v24;
  void (*v25)(uint64_t, CMTime *);
  uint64_t FigBaseObject;
  void (*v27)(uint64_t, const __CFString *, _QWORD, CMTime *);
  const __CFArray *v28;
  const __CFAllocator *v29;
  CFAbsoluteTime Current;
  CFDateRef v31;
  const void *v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v38;
  unsigned int v39;
  int v40;
  OpaqueCMClock *HostTimeClock;
  const void *v42;
  CFTypeRef v43;
  void (*v44)(CFTypeRef, float *);
  int v45;
  char v46;
  NSObject *v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  Float64 v51;
  double v52;
  char *v53;
  const char *v54;
  const char *v55;
  NSObject *v56;
  unsigned int v57;
  unsigned int v58;
  const __CFAllocator *v59;
  int v60;
  double v61;
  Float64 Seconds;
  Float64 v63;
  const __CFAllocator *v64;
  OpaqueCMTimebase *v65;
  const void *v66;
  CFMutableDictionaryRef v67;
  unsigned int (*v68)(CFTypeRef, CFMutableDictionaryRef, float);
  uint64_t v69;
  void (*v70)(uint64_t, const __CFString *, const __CFAllocator *, CMTimebaseRef *);
  uint64_t v71;
  void (*v72)(uint64_t, CMTime *, CFMutableDictionaryRef);
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  CFTypeRef cf;
  CMTime v80;
  CMTime v81;
  os_log_type_t type;
  CMTime v83;
  CMTime rhs;
  CMTime v85;
  CMTimebaseRef timebaseOut[2];
  uint64_t v87;
  _OWORD v88[3];
  __int128 v89;
  __int128 v90;
  __int128 v91;
  CMTime v92;
  char v93;
  float v94;
  char *v95;
  CFTypeRef v96;
  CFMutableDictionaryRef v97;
  CMTime valuePtr;
  int v99;
  __int16 v100;
  double v101;
  __int16 v102;
  Float64 v103;
  __int16 v104;
  Float64 v105;
  __int16 v106;
  const char *v107;
  __int16 v108;
  char *v109;
  __int16 v110;
  const char *v111;
  CMTime lhs;
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  v96 = 0;
  v97 = 0;
  v95 = 0;
  v94 = 0.0;
  v93 = 0;
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v92 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v17 = *MEMORY[0x1E0CA2E40];
  v18 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
  v90 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  v91 = v18;
  v88[0] = v17;
  v88[1] = v90;
  v88[2] = v18;
  v89 = v17;
  if (!a1 || (v19 = DerivedStorage, (cf = (CFTypeRef)FigCFWeakReferenceHolderCopyReferencedObject()) == 0))
  {
    cf = 0;
    goto LABEL_121;
  }
  if (!*(_QWORD *)(v19 + 40) || !FigCFEqual() || *(_BYTE *)(v19 + 488) && !*(_BYTE *)(v19 + 448))
  {
LABEL_121:
    if (FigSignalErrorAt())
      a11(a10, 0);
    goto LABEL_9;
  }
  v20 = *(const __CFArray **)(v19 + 360);
  valuePtr = *(CMTime *)a5;
  *(_OWORD *)timebaseOut = *(_OWORD *)(v19 + 324);
  v87 = *(_QWORD *)(v19 + 340);
  figPlaybackCoordinator_getPlayerTimeFromGroupTime(a1, &valuePtr, (uint64_t)timebaseOut, v20, &v93, &lhs);
  *(CMTime *)a5 = lhs;
  figPlaybackCoordinator_completePendingCommandAndRecordNewCallback(a1, (uint64_t)a11, a10, 0);
  if ((*((_BYTE *)a5 + 12) & 1) == 0)
  {
    FigTimelineCoordinatorSetReadinessHintFromTimelineControl();
    figPlaybackCoordinator_completePendingCommandAndRecordNewCallback(a1, 0, 0, 0);
LABEL_9:
    Mutable = 0;
    v22 = cf;
    goto LABEL_111;
  }
  v22 = cf;
  v23 = *(void (**)(CFTypeRef, float *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v23)
    v23(cf, &v94);
  v24 = *(_QWORD *)(v19 + 40);
  v25 = *(void (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v25)
    v25(v24, &v92);
  if (v94 != 0.0)
  {
    lhs = v92;
    if (figPlaybackCoordinator_isTimeInInterstitialRange(a1, &lhs, v88))
    {
      lhs = *(CMTime *)a5;
      if (figPlaybackCoordinator_isTimeInInterstitialRange(a1, &lhs, &v89))
      {
        lhs.value = 0;
        LODWORD(valuePtr.value) = 0;
        FigBaseObject = FigPlayerGetFigBaseObject(cf);
        v27 = *(void (**)(uint64_t, const __CFString *, _QWORD, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
        if (v27)
        {
          v27(FigBaseObject, CFSTR("PlaybackState"), *MEMORY[0x1E0C9AE00], &lhs);
          if (lhs.value)
          {
            CFNumberGetValue((CFNumberRef)lhs.value, kCFNumberSInt32Type, &valuePtr);
            if (lhs.value)
              CFRelease((CFTypeRef)lhs.value);
          }
        }
        goto LABEL_82;
      }
    }
  }
  if ((*((_BYTE *)a6 + 12) & 1) != 0)
  {
    lhs = *(CMTime *)a5;
    if (figPlaybackCoordinator_isTimeInInterstitialRange(a1, &lhs, &v89))
    {
      CMTimeMake(&rhs, 20, 1000);
      lhs = *(CMTime *)a5;
      CMTimeAdd(&v85, &lhs, &rhs);
      v28 = *(const __CFArray **)(v19 + 360);
      valuePtr = *(CMTime *)(v19 + 324);
      figPlaybackCoordinator_getPlayerTimeFromGroupTime(a1, &v85, (uint64_t)&valuePtr, v28, &v93, &lhs);
      *(CMTime *)a5 = lhs;
      if ((*((_BYTE *)a5 + 12) & 1) == 0)
      {
        FigTimelineCoordinatorSetReadinessHintFromTimelineControl();
LABEL_82:
        figPlaybackCoordinator_completePendingCommandAndRecordNewCallback(a1, 0, 0, 0);
        Mutable = 0;
        goto LABEL_111;
      }
      CMTimeMake(&v83, 20, 1000);
      valuePtr = *(CMTime *)a6;
      CMTimeAdd(&lhs, &valuePtr, &v83);
      *(CMTime *)a6 = lhs;
    }
  }
  *(float *)(v19 + 240) = a2;
  *(_BYTE *)(v19 + 244) = 0;
  v29 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Current = CFAbsoluteTimeGetCurrent();
  v31 = CFDateCreate(v29, Current);
  v32 = *(const void **)(v19 + 248);
  *(_QWORD *)(v19 + 248) = a8;
  *(_QWORD *)(v19 + 256) = v31;
  if (a8)
    CFRetain(a8);
  if (v32)
    CFRelease(v32);
  *(float *)(v19 + 168) = a2;
  *(float *)(v19 + 156) = a2;
  v33 = *a5;
  *(_QWORD *)(v19 + 124) = *((_QWORD *)a5 + 2);
  *(_OWORD *)(v19 + 108) = v33;
  v34 = *a6;
  *(_QWORD *)(v19 + 148) = *((_QWORD *)a6 + 2);
  *(_OWORD *)(v19 + 132) = v34;
  *(_BYTE *)(v19 + 104) = 1;
  v35 = *(_QWORD *)(v19 + 88);
  v36 = a9;
  if (v35 > a4)
  {
    if (dword_1ECDC8900)
    {
      LODWORD(timebaseOut[0]) = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v38 = timebaseOut[0];
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
        v39 = v38;
      else
        v39 = v38 & 0xFFFFFFFE;
      if (v39)
      {
        v40 = *(unsigned __int8 *)(v19 + 488);
        LODWORD(valuePtr.value) = 136315650;
        *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"playbackCoordinator_setRateAndAnchorTime";
        LOWORD(valuePtr.flags) = 2048;
        *(_QWORD *)((char *)&valuePtr.flags + 2) = a1;
        HIWORD(valuePtr.epoch) = 1024;
        v99 = v40;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v22 = cf;
    }
    goto LABEL_82;
  }
  if (a9 == 5)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(v19 + 64));
    *(_BYTE *)(v19 + 320) = 0;
    MEMORY[0x19402EF04](*(_QWORD *)(v19 + 64));
    v35 = *(_QWORD *)(v19 + 88);
  }
  if (v35 < a4)
  {
    *(_QWORD *)(v19 + 88) = a4;
    if (*(_QWORD *)(v19 + 184))
      playbackCoordinator_completePendingStartupTask(a1, 0);
  }
  if ((*((_BYTE *)a5 + 12) & 1) != 0 && a2 != 0.0 && (*((_DWORD *)a6 + 3) & 1) != 0)
  {
    timebaseOut[0] = 0;
    HostTimeClock = CMClockGetHostTimeClock();
    CMTimebaseCreateWithSourceClock(v29, HostTimeClock, timebaseOut);
    lhs = *(CMTime *)a5;
    valuePtr = *(CMTime *)a6;
    CMTimebaseSetRateAndAnchorTime(timebaseOut[0], a2, &lhs, &valuePtr);
    CMTimebaseCreateReadOnlyTimebase();
    if (timebaseOut[0])
      CFRelease(timebaseOut[0]);
  }
  v42 = *(const void **)(v19 + 160);
  v43 = v96;
  *(_QWORD *)(v19 + 160) = v96;
  if (v43)
    CFRetain(v43);
  if (v42)
    CFRelease(v42);
  v44 = *(void (**)(CFTypeRef, float *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v44)
    v44(cf, &v94);
  if ((*((_DWORD *)a5 + 3) & 0x1D) == 1)
  {
    if (a2 == 0.0
      || (CMTimebaseGetTime(&v81, *(CMTimebaseRef *)(v19 + 48)),
          v76 = 1,
          CMTimeMake(&v80, 1, 1),
          lhs = *(CMTime *)a5,
          !CMTimeDifferenceIsWithinTolerance(&lhs, &v81, &v80)))
    {
      v45 = *(_DWORD *)(v19 + 80);
      *(_DWORD *)(v19 + 80) = FPSupport_IncrementSeekID(v45);
      FigTimelineCoordinatorSetReadinessHintFromTimelineControl();
      if (dword_1ECDC8900 >= 2)
        asprintf(&v95, " (id=%d)", v45);
      v76 = 0;
      v46 = 1;
    }
    else
    {
      v46 = 0;
      v45 = 0;
    }
  }
  else
  {
    v46 = 0;
    v45 = 0;
    v76 = 1;
  }
  if (!*(_QWORD *)(v19 + 184))
    goto LABEL_63;
  if (v94 != a2)
    v46 = 1;
  if ((v46 & 1) == 0)
  {
    if (dword_1ECDC8900)
    {
      LODWORD(timebaseOut[0]) = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v56 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v57 = timebaseOut[0];
      if (os_log_type_enabled(v56, type))
        v58 = v57;
      else
        v58 = v57 & 0xFFFFFFFE;
      if (v58)
      {
        v59 = v29;
        v60 = *(unsigned __int8 *)(v19 + 488);
        v61 = a2;
        lhs = *(CMTime *)a5;
        Seconds = CMTimeGetSeconds(&lhs);
        lhs = *(CMTime *)a6;
        v63 = CMTimeGetSeconds(&lhs);
        LODWORD(valuePtr.value) = 136316418;
        *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"playbackCoordinator_setRateAndAnchorTime";
        LOWORD(valuePtr.flags) = 2048;
        *(_QWORD *)((char *)&valuePtr.flags + 2) = a1;
        HIWORD(valuePtr.epoch) = 1024;
        v99 = v60;
        v29 = v59;
        v100 = 2048;
        v101 = v61;
        v102 = 2048;
        v103 = Seconds;
        v104 = 2048;
        v105 = v63;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v22 = cf;
    }
    v73 = *(_QWORD *)(v19 + 40);
    if (v73)
    {
      v74 = *(_QWORD *)(v19 + 160);
      if (v74)
      {
        FigPlaybackItemSetProperty_0(v73, (uint64_t)CFSTR("TransientTimebaseForCoordinatedPlaybackSynchronization"), v74);
        lhs.value = 0;
        FigPlayerCopyProperty((uint64_t)v22, (uint64_t)CFSTR("SynchronizedNULL"), (uint64_t)v29, (uint64_t)&lhs);
        if (lhs.value)
          CFRelease((CFTypeRef)lhs.value);
      }
    }
    playbackCoordinator_completePendingStartupTask(a1, 1);
    Mutable = 0;
  }
  else
  {
LABEL_63:
    playbackCoordinator_completePendingStartupTask(a1, 0);
    v75 = v45;
    if (dword_1ECDC8900)
    {
      LODWORD(timebaseOut[0]) = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v47 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v48 = timebaseOut[0];
      if (os_log_type_enabled(v47, type))
        v49 = v48;
      else
        v49 = v48 & 0xFFFFFFFE;
      if (v49)
      {
        v50 = *(unsigned __int8 *)(v19 + 488);
        lhs = *(CMTime *)a5;
        v51 = CMTimeGetSeconds(&lhs);
        lhs = *(CMTime *)a6;
        v52 = CMTimeGetSeconds(&lhs);
        v53 = v95;
        v54 = "[SEEK";
        LODWORD(valuePtr.value) = 136317186;
        *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"playbackCoordinator_setRateAndAnchorTime";
        v55 = "";
        LOWORD(valuePtr.flags) = 2048;
        if (!v95)
          v53 = "";
        *(_QWORD *)((char *)&valuePtr.flags + 2) = a1;
        HIWORD(valuePtr.epoch) = 1024;
        if (v76)
          v54 = "";
        v99 = v50;
        if (!v76)
          v55 = "]";
        v100 = 2048;
        v101 = a2;
        v102 = 2048;
        v103 = v51;
        v104 = 2048;
        v105 = v52;
        v106 = 2082;
        v107 = v54;
        v108 = 2082;
        v109 = v53;
        v110 = 2082;
        v111 = v55;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v36 = a9;
    }
    v64 = v29;
    if (FPSupport_CreateSetRateOptions(v29, 33, &v97))
      goto LABEL_9;
    v65 = (OpaqueCMTimebase *)*MEMORY[0x1E0C9AE40];
    if (a2 == 0.0)
      v66 = (const void *)*MEMORY[0x1E0C9AE40];
    else
      v66 = (const void *)*MEMORY[0x1E0C9AE50];
    CFDictionarySetValue(v97, CFSTR("SynchronizeWithStartupTasks"), v66);
    FigCFDictionarySetValue();
    if (v36 == 6 || !v36)
      FigCFDictionarySetValue();
    *(_BYTE *)(v19 + 232) = v76;
    v67 = v97;
    v68 = *(unsigned int (**)(CFTypeRef, CFMutableDictionaryRef, float))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 104);
    if (!v68)
    {
      Mutable = 0;
      v22 = cf;
      goto LABEL_111;
    }
    if (v68(cf, v67, a2))
      goto LABEL_9;
    if ((v76 & 1) != 0)
    {
      Mutable = 0;
      v22 = cf;
    }
    else
    {
      timebaseOut[0] = v65;
      v69 = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(v19 + 40));
      v70 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CMTimebaseRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v70)
        v70(v69, CFSTR("IsPlayingIFrameOnly"), v64, timebaseOut);
      *(_DWORD *)(v19 + 236) = v75;
      *(_BYTE *)(v19 + 232) = 1;
      Mutable = CFDictionaryCreateMutable(v64, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetValue();
      v22 = cf;
      FigCFDictionarySetInt32();
      v71 = *(_QWORD *)(v19 + 40);
      valuePtr = *(CMTime *)a5;
      v72 = *(void (**)(uint64_t, CMTime *, CFMutableDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 176);
      if (v72)
      {
        lhs = valuePtr;
        v72(v71, &lhs, Mutable);
      }
      if (timebaseOut[0])
        CFRelease(timebaseOut[0]);
    }
  }
  figPlaybackCoordinator_checkForCommandCompletion(a1);
LABEL_111:
  if (v97)
    CFRelease(v97);
  if (Mutable)
    CFRelease(Mutable);
  if (v22)
    CFRelease(v22);
  if (v96)
    CFRelease(v96);
  free(v95);
}

void playbackCoordinator_jumpToTime(uint64_t a1, float a2, uint64_t a3, uint64_t a4, CMTime *a5, int a6, int a7, uint64_t a8, const void *a9, int a10, uint64_t a11, void (*a12)(uint64_t, _QWORD))
{
  CMTimeEpoch v17;
  uint64_t DerivedStorage;
  uint64_t v19;
  const __CFArray *v20;
  const __CFAllocator *v21;
  CFAbsoluteTime Current;
  CFDateRef v23;
  const void *v24;
  int v25;
  int v26;
  const void *v27;
  CFMutableDictionaryRef Mutable;
  BOOL v29;
  float v30;
  void (*v31)(CFTypeRef, CMTime *);
  int value;
  CMTimeEpoch epoch;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  void (*v39)(uint64_t, CMTime *);
  _BOOL4 IsWithinTolerance;
  int v41;
  void (*v42)(CFTypeRef, CMTime *);
  NSObject *v43;
  unsigned int v44;
  unsigned int v45;
  _BOOL4 v46;
  const char *v47;
  double Seconds;
  const char *v49;
  const char *v50;
  float v51;
  CFTypeRef v52;
  unsigned int (*v53)(const void *, CFTypeRef, float);
  double v54;
  uint64_t v55;
  unsigned int (*v56)(uint64_t, CMTime *, CFMutableDictionaryRef);
  int v57;
  int v58;
  const __CFAllocator *allocator;
  __int128 v60;
  CFTypeRef v63;
  CMTime time;
  CMTime v65;
  os_log_type_t type;
  __int128 v67;
  uint64_t v68;
  CMTime v69;
  CFTypeRef cf;
  CMTime time2;
  int v72;
  __int16 v73;
  const char *v74;
  __int16 v75;
  double v76;
  __int16 v77;
  const char *v78;
  __int16 v79;
  const char *v80;
  __int16 v81;
  const char *v82;
  __int16 v83;
  double v84;
  CMTime time1;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v60 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)&v69.value = *MEMORY[0x1E0CA2E18];
  v17 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v69.epoch = v17;
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1 || (v19 = DerivedStorage, (v63 = (CFTypeRef)FigCFWeakReferenceHolderCopyReferencedObject()) == 0))
  {
    v27 = 0;
LABEL_92:
    if (FigSignalErrorAt())
      a12(a11, 0);
    goto LABEL_61;
  }
  if (!*(_QWORD *)(v19 + 40) || !FigCFEqual() || *(_BYTE *)(v19 + 488) && !*(_BYTE *)(v19 + 448))
  {
    v27 = v63;
    goto LABEL_92;
  }
  v20 = *(const __CFArray **)(v19 + 360);
  time2 = *a5;
  v67 = *(_OWORD *)(v19 + 324);
  v68 = *(_QWORD *)(v19 + 340);
  figPlaybackCoordinator_getPlayerTimeFromGroupTime(a1, &time2, (uint64_t)&v67, v20, 0, &time1);
  *a5 = time1;
  figPlaybackCoordinator_completePendingCommandAndRecordNewCallback(a1, (uint64_t)a12, a11, 0);
  time1 = *a5;
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (CMTimeCompare(&time1, &time2) < 0)
  {
    FigTimelineCoordinatorSetReadinessHintFromTimelineControl();
    figPlaybackCoordinator_completePendingCommandAndRecordNewCallback(a1, 0, 0, 0);
    Mutable = 0;
    v27 = v63;
    goto LABEL_83;
  }
  v21 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Current = CFAbsoluteTimeGetCurrent();
  allocator = v21;
  v23 = CFDateCreate(v21, Current);
  v24 = *(const void **)(v19 + 248);
  *(_QWORD *)(v19 + 248) = a9;
  *(_QWORD *)(v19 + 256) = v23;
  if (a9)
    CFRetain(a9);
  v25 = a10;
  v26 = a7;
  if (v24)
    CFRelease(v24);
  v27 = v63;
  if (a10 == 5)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(v19 + 64));
    *(_BYTE *)(v19 + 320) = 0;
    MEMORY[0x19402EF04](*(_QWORD *)(v19 + 64));
    v58 = 1;
  }
  else
  {
    if (!a10)
      figPlaybackCoordinator_updateReportingStats(a1, CFSTR("CPPlayRemoteSeek"), 1);
    v58 = 0;
  }
  if (a6)
  {
    *(_BYTE *)(v19 + 104) = 0;
    v29 = a7 != 0;
    v30 = 0.0;
    if (a7)
      v30 = a2;
    *(float *)(v19 + 168) = v30;
    *(_DWORD *)(v19 + 240) = 0;
    if (a2 == 0.0)
      v29 = 0;
    *(_BYTE *)(v19 + 244) = v29;
  }
  else
  {
    LODWORD(time1.value) = 0;
    v31 = *(void (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (v31)
      v31(v63, &time1);
    value = time1.value;
    *(_DWORD *)(v19 + 168) = time1.value;
    *(_DWORD *)(v19 + 240) = value;
    epoch = a5->epoch;
    *(_OWORD *)(v19 + 108) = *(_OWORD *)&a5->value;
    *(_QWORD *)(v19 + 124) = epoch;
    *(_OWORD *)(v19 + 132) = v60;
    *(_QWORD *)(v19 + 148) = v17;
  }
  if (*(_QWORD *)(v19 + 88) > a4)
  {
    if (dword_1ECDC8900)
    {
      LODWORD(v67) = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v35 = v67;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
        v36 = v35;
      else
        v36 = v35 & 0xFFFFFFFE;
      if (v36)
      {
        v37 = *(unsigned __int8 *)(v19 + 488);
        LODWORD(time2.value) = 136315650;
        *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"playbackCoordinator_jumpToTime";
        LOWORD(time2.flags) = 2048;
        *(_QWORD *)((char *)&time2.flags + 2) = a1;
        HIWORD(time2.epoch) = 1024;
        v72 = v37;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    figPlaybackCoordinator_completePendingCommandAndRecordNewCallback(a1, 0, 0, 0);
LABEL_61:
    Mutable = 0;
    goto LABEL_83;
  }
  playbackCoordinator_completePendingStartupTask(a1, 0);
  v38 = *(_QWORD *)(v19 + 40);
  v39 = *(void (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v39)
    v39(v38, &v69);
  CMTimeMake(&v65, 8, 1000);
  time1 = v69;
  time2 = *a5;
  IsWithinTolerance = CMTimeDifferenceIsWithinTolerance(&time1, &time2, &v65);
  if (IsWithinTolerance)
  {
    v41 = 0;
  }
  else
  {
    LODWORD(time1.value) = 0;
    v42 = *(void (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (v42)
      v42(v63, &time1);
    if (a6 && !a7 && *(float *)&time1.value != 0.0)
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(v19 + 208), *(float *)&time1.value);
      *(_BYTE *)(v19 + 264) = 1;
      MEMORY[0x19402EF04](*(_QWORD *)(v19 + 208));
    }
    v41 = *(_DWORD *)(v19 + 80);
    *(_DWORD *)(v19 + 80) = FPSupport_IncrementSeekID(v41);
  }
  if (dword_1ECDC8900)
  {
    LODWORD(v67) = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v43 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v44 = v67;
    if (os_log_type_enabled(v43, type))
      v45 = v44;
    else
      v45 = v44 & 0xFFFFFFFE;
    if (v45)
    {
      v57 = *(unsigned __int8 *)(v19 + 488);
      v46 = IsWithinTolerance;
      if (IsWithinTolerance)
        v47 = " SKIP";
      else
        v47 = "";
      time1 = *a5;
      Seconds = CMTimeGetSeconds(&time1);
      LODWORD(time2.value) = 136317186;
      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"playbackCoordinator_jumpToTime";
      v49 = " NOT";
      LOWORD(time2.flags) = 2048;
      if (a6)
        v50 = "";
      else
        v50 = " NOT";
      *(_QWORD *)((char *)&time2.flags + 2) = a1;
      HIWORD(time2.epoch) = 1024;
      if (a7)
        v49 = "";
      v72 = v57;
      v73 = 2082;
      v74 = v47;
      IsWithinTolerance = v46;
      v75 = 2048;
      v76 = Seconds;
      v77 = 2082;
      v78 = "";
      v79 = 2082;
      v80 = v50;
      v81 = 2082;
      v82 = v49;
      v83 = 2048;
      v84 = a2;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v27 = v63;
    v26 = a7;
    v25 = a10;
  }
  *(_BYTE *)(v19 + 232) = IsWithinTolerance;
  if (v26 | a6)
  {
    if (FPSupport_CreateSetRateOptions(allocator, 33, (CFMutableDictionaryRef *)&cf))
      goto LABEL_61;
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    if (v26)
    {
      if (v25 == 6 || (v51 = a2, !v25))
      {
        FigCFDictionarySetValue();
        v51 = a2;
      }
    }
    else
    {
      v51 = 0.0;
    }
    v52 = cf;
    v53 = *(unsigned int (**)(const void *, CFTypeRef, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 104);
    if (!v53 || v53(v27, v52, v51))
      goto LABEL_61;
  }
  *(_BYTE *)(v19 + 232) = 1;
  if (IsWithinTolerance)
  {
    Mutable = 0;
LABEL_74:
    if (v26
      && a2 != 0.0
      && (time1 = *a5, figPlaybackCoordinator_isInterstitialScheduledAtTime(a1, &time1)))
    {
      FigTimelineCoordinatorSetReadinessHintFromTimelineControl();
      figPlaybackCoordinator_completePendingCommandAndRecordNewCallback(a1, 0, 0, 0);
    }
    else
    {
      figPlaybackCoordinator_checkForCommandCompletion(a1);
    }
    goto LABEL_83;
  }
  *(_DWORD *)(v19 + 236) = v41;
  Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetValue();
  FigCFDictionarySetInt32();
  if (v58)
  {
    time1 = *a5;
    time2 = v69;
    CMTimeSubtract(&time, &time1, &time2);
    v54 = CMTimeGetSeconds(&time);
    figPlaybackCoordinator_updateReportingStats(a1, CFSTR("CPPlayTimeSkip"), (uint64_t)(fabs(v54) * 1000.0));
  }
  v55 = *(_QWORD *)(v19 + 40);
  time2 = *a5;
  v56 = *(unsigned int (**)(uint64_t, CMTime *, CFMutableDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 176);
  if (v56)
  {
    time1 = time2;
    if (!v56(v55, &time1, Mutable))
      goto LABEL_74;
  }
LABEL_83:
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  if (v27)
    CFRelease(v27);
}

void playbackCoordinator_pause(uint64_t a1, float a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, const void *a7, int a8, uint64_t a9, void (*a10)(uint64_t, _QWORD))
{
  uint64_t DerivedStorage;
  uint64_t v18;
  const void *v19;
  const __CFAllocator *v20;
  CFAbsoluteTime Current;
  CFDateRef v22;
  const void *v23;
  BOOL v24;
  float v25;
  NSObject *v26;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v28;
  unsigned int (*v29)(const void *, CFTypeRef, float);
  CFTypeRef cf[25];

  cf[23] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  cf[0] = 0;
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    v18 = DerivedStorage;
    v19 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    if (v19 && *(_QWORD *)(v18 + 40) && FigCFEqual() && (!*(_BYTE *)(v18 + 488) || *(_BYTE *)(v18 + 448)))
    {
      figPlaybackCoordinator_completePendingCommandAndRecordNewCallback(a1, (uint64_t)a10, a9, 0);
      v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Current = CFAbsoluteTimeGetCurrent();
      v22 = CFDateCreate(v20, Current);
      v23 = *(const void **)(v18 + 248);
      *(_QWORD *)(v18 + 248) = a7;
      *(_QWORD *)(v18 + 256) = v22;
      if (a7)
        CFRetain(a7);
      if (v23)
        CFRelease(v23);
      if (a8 == 5)
      {
        MEMORY[0x19402EEEC](*(_QWORD *)(v18 + 64));
        *(_BYTE *)(v18 + 320) = 0;
        MEMORY[0x19402EF04](*(_QWORD *)(v18 + 64));
      }
      else if (!a8)
      {
        figPlaybackCoordinator_updateReportingStats(a1, CFSTR("CPPlayRemoteSetRate"), 1);
      }
      *(_BYTE *)(v18 + 104) = 0;
      v24 = a5 != 0;
      if (a5)
        v25 = a2;
      else
        v25 = 0.0;
      *(float *)(v18 + 168) = v25;
      *(_DWORD *)(v18 + 240) = 0;
      if (a2 == 0.0)
        v24 = 0;
      *(_BYTE *)(v18 + 244) = v24;
      if (*(_QWORD *)(v18 + 88) <= a4)
      {
        playbackCoordinator_completePendingStartupTask(a1, 0);
        if (dword_1ECDC8900)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        *(_BYTE *)(v18 + 232) = 1;
        if (!FPSupport_CreateSetRateOptions(v20, 33, (CFMutableDictionaryRef *)cf))
        {
          FigCFDictionarySetValue();
          FigCFDictionarySetValue();
          if (a5 && (a8 == 6 || !a8))
            FigCFDictionarySetValue();
          v28 = cf[0];
          v29 = *(unsigned int (**)(const void *, CFTypeRef, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 104);
          if (v29 && !v29(v19, v28, v25))
            figPlaybackCoordinator_checkForCommandCompletion(a1);
        }
      }
      else
      {
        if (dword_1ECDC8900)
        {
          v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        figPlaybackCoordinator_completePendingCommandAndRecordNewCallback(a1, 0, 0, 0);
      }
LABEL_34:
      CFRelease(v19);
      if (cf[0])
        CFRelease(cf[0]);
      return;
    }
  }
  else
  {
    v19 = 0;
  }
  if (FigSignalErrorAt())
    a10(a9, 0);
  if (v19)
    goto LABEL_34;
}

void playbackCoordinator_prepareToSetRate(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6, int a7, uint64_t a8, void (*a9)(uint64_t, _QWORD))
{
  uint64_t DerivedStorage;
  uint64_t v17;
  const void *v18;
  const __CFAllocator *v19;
  CFAbsoluteTime Current;
  CFDateRef v21;
  const void *v22;
  NSObject *v23;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v25;
  unsigned int (*v26)(const void *, CFTypeRef, float);
  uint64_t v27;
  void (*v28)(uint64_t, CMTime *);
  CMTime v29;
  CFTypeRef cf;
  CMTime v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  cf = 0;
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v29 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  if (a1)
  {
    v17 = DerivedStorage;
    v18 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    if (v18
      && a2 != 0.0
      && *(_QWORD *)(v17 + 40)
      && FigCFEqual()
      && (!*(_BYTE *)(v17 + 488) || *(_BYTE *)(v17 + 448)))
    {
      figPlaybackCoordinator_completePendingCommandAndRecordNewCallback(a1, (uint64_t)a9, a8, 0);
      v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Current = CFAbsoluteTimeGetCurrent();
      v21 = CFDateCreate(v19, Current);
      v22 = *(const void **)(v17 + 248);
      *(_QWORD *)(v17 + 248) = a6;
      *(_QWORD *)(v17 + 256) = v21;
      if (a6)
        CFRetain(a6);
      if (v22)
        CFRelease(v22);
      if (a7 == 5)
      {
        MEMORY[0x19402EEEC](*(_QWORD *)(v17 + 64));
        *(_BYTE *)(v17 + 320) = 0;
        MEMORY[0x19402EF04](*(_QWORD *)(v17 + 64));
      }
      else if (!a7)
      {
        figPlaybackCoordinator_updateReportingStats(a1, CFSTR("CPPlayRemoteSetRate"), 1);
      }
      *(_BYTE *)(v17 + 104) = 0;
      *(float *)(v17 + 168) = a2;
      *(_DWORD *)(v17 + 240) = 0;
      *(_BYTE *)(v17 + 244) = 1;
      if (*(_QWORD *)(v17 + 88) <= a4)
      {
        playbackCoordinator_completePendingStartupTask(a1, 0);
        if (dword_1ECDC8900)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        *(_BYTE *)(v17 + 232) = 1;
        if (FPSupport_CreateSetRateOptions(v19, 33, (CFMutableDictionaryRef *)&cf))
          goto LABEL_32;
        FigCFDictionarySetValue();
        FigCFDictionarySetValue();
        if (a7 == 6 || !a7)
          FigCFDictionarySetValue();
        v25 = cf;
        v26 = *(unsigned int (**)(const void *, CFTypeRef, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 104);
        if (!v26 || v26(v18, v25, a2))
          goto LABEL_32;
        v27 = *(_QWORD *)(v17 + 40);
        v28 = *(void (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
        if (v28)
          v28(v27, &v29);
        v31 = v29;
        if (!figPlaybackCoordinator_isInterstitialScheduledAtTime(a1, &v31))
        {
          figPlaybackCoordinator_checkForCommandCompletion(a1);
LABEL_32:
          CFRelease(v18);
          if (cf)
            CFRelease(cf);
          return;
        }
        FigTimelineCoordinatorSetReadinessHintFromTimelineControl();
      }
      else if (dword_1ECDC8900)
      {
        v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      figPlaybackCoordinator_completePendingCommandAndRecordNewCallback(a1, 0, 0, 0);
      goto LABEL_32;
    }
  }
  else
  {
    v18 = 0;
  }
  if (FigSignalErrorAt())
    a9(a8, 0);
  if (v18)
    goto LABEL_32;
}

uint64_t playbackCoordinator_proposeTimelineForIdentifier(const void *a1)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  CMBaseObjectGetDerivedStorage();
  if (a1 && FigCFEqual())
    return figPlaybackCoordinator_resetTimelineCoordinatorStateToCurrentItemIdentifierAndTiming(a1);
  else
    return FigSignalErrorAt();
}

uint64_t figPlaybackCoordinator_beginPlayingPrimarySuspension(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;

  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 352));
  if (*(_QWORD *)(DerivedStorage + 440))
    goto LABEL_6;
  v3 = FigTimelineCoordinatorSuspensionCreate();
  if (!(_DWORD)v3)
  {
    if (*(_QWORD *)(DerivedStorage + 440))
    {
      v3 = figPlaybackCoordinator_BeginSuspension(a1);
      goto LABEL_5;
    }
LABEL_6:
    v4 = 0;
    goto LABEL_7;
  }
LABEL_5:
  v4 = v3;
LABEL_7:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 352));
  return v4;
}

void figPlaybackCoordinator_transitionToNewCurrentItemAsync(const void *a1)
{
  const void *v2;

  FigPlaybackCoordinatorGetCMBaseObject(a1);
  CMBaseObjectGetDerivedStorage();
  v2 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  figPlaybackCoordinator_transitionToNewCurrentItemIfReady(a1, (uint64_t)v2);
  if (a1)
    CFRelease(a1);
  if (v2)
    CFRelease(v2);
}

void FigCFRelease_6(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

void figPlaybackCoordinator_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  _QWORD *v3;
  const void *v4;
  char v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  NSObject *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  NSObject *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  _QWORD block[7];

  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  v3 = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (v3[3])
  {
    v4 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    if (v4)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      v5 = 0;
      goto LABEL_6;
    }
  }
  else
  {
    v4 = 0;
  }
  v5 = 1;
LABEL_6:
  if (v3[2])
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  figPlaybackCoordinator_removeAllItemListeners(a1);
  figPlaybackCoordinator_removeTimebaseNotificationListeners(a1, v3[6]);
  if ((v5 & 1) == 0)
    CFRelease(v4);
  figPlaybackCoordinator_completePendingCommandAndRecordNewCallback(a1, 0, 0, 0);
  playbackCoordinator_completePendingStartupTask(a1, 1);
  v6 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v7 = v6;
  if (v6)
  {
    v8 = *(const void **)(DerivedStorage + 32);
    if (v8)
    {
      v9 = *(const void **)(DerivedStorage + 40);
      CFRetain(v6);
      if (v9)
        CFRetain(v9);
      CFRetain(v8);
      v10 = *(NSObject **)(DerivedStorage + 272);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __figPlaybackCoordinator_Finalize_block_invoke;
      block[3] = &__block_descriptor_tmp_76;
      block[4] = v7;
      block[5] = v8;
      block[6] = v9;
      dispatch_async(v10, block);
    }
  }
  FigSimpleMutexDestroy();
  *(_QWORD *)(DerivedStorage + 64) = 0;
  FigSimpleMutexDestroy();
  *(_QWORD *)(DerivedStorage + 208) = 0;
  FigSimpleMutexDestroy();
  *(_QWORD *)(DerivedStorage + 352) = 0;
  v11 = *(const void **)(DerivedStorage + 16);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v12 = *(const void **)(DerivedStorage + 32);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  v13 = *(const void **)(DerivedStorage + 24);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v14 = *(NSObject **)(DerivedStorage + 272);
  if (v14)
  {
    dispatch_release(v14);
    *(_QWORD *)(DerivedStorage + 272) = 0;
  }
  v15 = *(const void **)(DerivedStorage + 160);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(DerivedStorage + 160) = 0;
  }
  v16 = *(const void **)(DerivedStorage + 288);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(DerivedStorage + 288) = 0;
  }
  v17 = *(const void **)(DerivedStorage + 296);
  if (v17)
  {
    CFRelease(v17);
    *(_QWORD *)(DerivedStorage + 296) = 0;
  }
  *(_DWORD *)(DerivedStorage + 304) = 0;
  FigSimpleMutexDestroy();
  *(_QWORD *)(DerivedStorage + 280) = 0;
  v18 = *(const void **)(DerivedStorage + 72);
  if (v18)
  {
    CFRelease(v18);
    *(_QWORD *)(DerivedStorage + 72) = 0;
  }
  v19 = *(const void **)(DerivedStorage + 40);
  if (v19)
  {
    CFRelease(v19);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  v20 = *(const void **)(DerivedStorage + 48);
  if (v20)
  {
    CFRelease(v20);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  v21 = *(const void **)(DerivedStorage + 312);
  if (v21)
  {
    CFRelease(v21);
    *(_QWORD *)(DerivedStorage + 312) = 0;
  }
  v22 = *(const void **)(DerivedStorage + 200);
  if (v22)
  {
    CFRelease(v22);
    *(_QWORD *)(DerivedStorage + 200) = 0;
  }
  v23 = *(const void **)(DerivedStorage + 456);
  if (v23)
  {
    CFRelease(v23);
    *(_QWORD *)(DerivedStorage + 456) = 0;
  }
  v24 = *(const void **)(DerivedStorage + 464);
  if (v24)
  {
    CFRelease(v24);
    *(_QWORD *)(DerivedStorage + 464) = 0;
  }
  v25 = *(const void **)(DerivedStorage + 472);
  if (v25)
  {
    CFRelease(v25);
    *(_QWORD *)(DerivedStorage + 472) = 0;
  }
  figPlaybackCoordinator_resetInterstitialStateMachine(a1);
  if (v7)
    CFRelease(v7);
}

__CFString *figPlaybackCoordinator_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;

  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigPlaybackCoordinator %p> [%d]"), a1, *(unsigned __int8 *)(DerivedStorage + 488));
  return Mutable;
}

uint64_t figPlaybackCoordinator_CopyProperty(uint64_t a1)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  CMBaseObjectGetDerivedStorage();
  return FigTimelineCoordinatorCopyProperty();
}

uint64_t figPlaybackCoordinator_SetProperty(const void *a1, uint64_t a2, const void *a3)
{
  CFTypeID v5;
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  FigPlaybackCoordinatorGetCMBaseObject(a1);
  CMBaseObjectGetDerivedStorage();
  if (!FigCFEqual())
    return FigTimelineCoordinatorSetProperty();
  if (!a3)
    return FigSignalErrorAt();
  v5 = CFGetTypeID(a3);
  if (v5 != CFBooleanGetTypeID())
    return FigSignalErrorAt();
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 488))
  {
    if ((const void *)*MEMORY[0x1E0C9AE40] != a3
      || playbackCoordinator_coordinatedPlaybackNotPossibleSuspensionActive((uint64_t)a1, 4))
    {
      return FigTimelineCoordinatorSetProperty();
    }
    v7 = figPlaybackCoordinator_beginPlayingPrimarySuspension(a1);
    goto LABEL_18;
  }
  if ((const void *)*MEMORY[0x1E0C9AE50] != a3)
  {
    v8 = DerivedStorage;
    v7 = figPlaybackCoordinator_endPlayingInterstitialSuspension((uint64_t)a1);
    if (*(_BYTE *)(v8 + 96))
      figPlaybackCoordinator_resetTimelineCoordinatorStateToCurrentItemIdentifierAndTiming(a1);
    goto LABEL_18;
  }
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  v9 = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(v9 + 352));
  if (*(_QWORD *)(v9 + 440))
    goto LABEL_16;
  v10 = FigTimelineCoordinatorSuspensionCreate();
  if (!(_DWORD)v10)
  {
    if (*(_QWORD *)(v9 + 440))
    {
      v10 = figPlaybackCoordinator_BeginSuspension(a1);
      goto LABEL_15;
    }
LABEL_16:
    v7 = 0;
    goto LABEL_17;
  }
LABEL_15:
  v7 = v10;
LABEL_17:
  MEMORY[0x19402EF04](*(_QWORD *)(v9 + 352));
LABEL_18:
  if (!(_DWORD)v7)
    return FigTimelineCoordinatorSetProperty();
  return v7;
}

void figPlaybackCoordinator_completePendingCommandAndRecordNewCallback(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t DerivedStorage;
  void (*v9)(uint64_t, CFTypeRef);
  uint64_t v10;
  const void *v11;
  const void *v12;
  int v13;
  CFTypeRef v14;
  CFTypeRef v15;
  CFTypeRef cf;

  cf = 0;
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 208));
  v9 = *(void (**)(uint64_t, CFTypeRef))(DerivedStorage + 216);
  if (v9)
    v10 = *(_QWORD *)(DerivedStorage + 224);
  else
    v10 = 0;
  *(_QWORD *)(DerivedStorage + 216) = a2;
  *(_QWORD *)(DerivedStorage + 224) = a3;
  *(_DWORD *)(DerivedStorage + 236) = 0;
  v11 = *(const void **)(DerivedStorage + 248);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(DerivedStorage + 248) = 0;
  }
  v12 = *(const void **)(DerivedStorage + 256);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(DerivedStorage + 256) = 0;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 208));
  if (*(_QWORD *)(DerivedStorage + 48))
  {
    v13 = figPlaybackCoordinator_copyGroupTimebaseFromCurrentItemTimebase(a1, (CMTimebaseRef *)&cf);
    if (!v9 || v13)
      goto LABEL_18;
    v14 = cf;
  }
  else
  {
    if (!v9)
      goto LABEL_18;
    v14 = 0;
  }
  if (a4)
    v15 = v14;
  else
    v15 = 0;
  v9(v10, v15);
  FigTimelineCoordinatorSetReadinessHintFromTimelineControl();
LABEL_18:
  if (cf)
    CFRelease(cf);
}

uint64_t playbackCoordinator_completePendingStartupTask(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t (*v5)(_QWORD, _QWORD, _QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFAllocator *v10;
  CFAbsoluteTime Current;
  const __CFDate *v12;
  const __CFDate *v13;
  CFTimeInterval TimeIntervalSinceDate;
  const void *v15;
  uint64_t (*v16)(_QWORD, _QWORD, _QWORD);

  FigPlaybackCoordinatorGetCMBaseObject(a1);
  result = CMBaseObjectGetDerivedStorage();
  v5 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(result + 184);
  if (v5)
  {
    v6 = result;
    v7 = *(unsigned int *)(result + 176);
    *(_DWORD *)(result + 176) = 0;
    v9 = *(_QWORD *)(result + 192);
    v8 = *(_QWORD *)(result + 200);
    *(_QWORD *)(result + 184) = 0;
    *(_QWORD *)(result + 192) = 0;
    if (v8)
    {
      v16 = v5;
      v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Current = CFAbsoluteTimeGetCurrent();
      v12 = CFDateCreate(v10, Current);
      if (v12)
      {
        v13 = v12;
        TimeIntervalSinceDate = CFDateGetTimeIntervalSinceDate(v12, *(CFDateRef *)(v6 + 200));
        figPlaybackCoordinator_updateReportingStats(a1, CFSTR("CPPlayWaitTime"), (uint64_t)(TimeIntervalSinceDate * 1000.0));
        CFRelease(v13);
      }
      v15 = *(const void **)(v6 + 200);
      v5 = v16;
      if (v15)
      {
        CFRelease(v15);
        v5 = v16;
        *(_QWORD *)(v6 + 200) = 0;
      }
    }
    return v5(v9, v7, a2);
  }
  return result;
}

__n128 figPlaybackCoordinator_resetInterstitialStateMachine(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  const void *v4;
  __n128 *v5;
  __int128 v6;
  __n128 result;

  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(const void **)(DerivedStorage + 360);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 360) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 432);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 432) = 0;
  }
  figPlaybackCoordinator_clearInterstitialEventTimer(a1);
  *(_DWORD *)(DerivedStorage + 376) = 0;
  v5 = (__n128 *)MEMORY[0x1E0CA2E40];
  v6 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  *(_OWORD *)(DerivedStorage + 384) = *MEMORY[0x1E0CA2E40];
  *(_OWORD *)(DerivedStorage + 400) = v6;
  result = v5[2];
  *(__n128 *)(DerivedStorage + 416) = result;
  return result;
}

void figPlaybackCoordinator_playerCurrentItemDidChange(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;

  FigPlaybackCoordinatorGetCMBaseObject(a2);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  figPlaybackCoordinator_transitionToNewCurrentItemIfReady(a2, a4);
  playbackCoordinator_endAllSystemEventSuspensions((uint64_t)a2);
  if (!*(_BYTE *)(DerivedStorage + 488))
    figPlaybackCoordinator_endPlayingInterstitialSuspension((uint64_t)a2);
}

uint64_t figPlaybackCoordinator_InterstitialStarted(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t DerivedStorage;
  const void *v6;
  const __CFArray *v7;
  const __CFDictionary *ValueAtIndex;
  CMTimeMapping v9;
  __int128 v10;
  CMTimeEpoch epoch;

  FigPlaybackCoordinatorGetCMBaseObject(a2);
  result = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(result + 488))
  {
    v4 = result;
    FigPlaybackCoordinatorGetCMBaseObject(a2);
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 352));
    if (*(_QWORD *)(DerivedStorage + 440))
    {
      FigTimelineCoordinatorEndSuspension();
      v6 = *(const void **)(DerivedStorage + 440);
      if (v6)
      {
        CFRelease(v6);
        *(_QWORD *)(DerivedStorage + 440) = 0;
      }
    }
    result = MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 352));
    if (!*(_BYTE *)(v4 + 448))
    {
      result = playbackCoordinator_coordinatedPlaybackNotPossibleSuspensionActive(a2, 4);
      if (!(_DWORD)result)
      {
        v10 = *MEMORY[0x1E0CA2E18];
        epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
        v7 = *(const __CFArray **)(v4 + 472);
        if (v7)
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v7, 0);
          memset(&v9, 0, sizeof(v9));
          CMTimeMappingMakeFromDictionary(&v9, ValueAtIndex);
          v10 = *(_OWORD *)&v9.target.start.value;
          epoch = v9.target.start.epoch;
        }
        *(_OWORD *)&v9.source.start.value = v10;
        v9.source.start.epoch = epoch;
        return playbackCoordinator_beginCoordinatedPlaybackNotPossibleSuspension(a2, 4);
      }
    }
  }
  return result;
}

void figPlaybackCoordinator_playerRateDidChange(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  float v5;
  uint64_t v6;
  void (*v7)(uint64_t, CMTime *);
  __CFDictionary *Mutable;
  const void **v9;
  int IsAudioSessionInterrupted;
  CMTime v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t type[16];
  CMTime time1;
  int v16;
  CMTime v17;
  CMTime v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = 0;
  v13 = 0;
  FigPlaybackCoordinatorGetCMBaseObject(a2);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  FigCFDictionaryGetFloat32IfPresent();
  FigCFDictionaryGetInt32IfPresent();
  if (dword_1ECDC8900)
  {
    LODWORD(time1.value) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  figPlaybackCoordinator_completePendingCommandAndRecordNewCallback(a2, 0, 0, 0);
  FigPlaybackCoordinatorGetCMBaseObject(a2);
  CMBaseObjectGetDerivedStorage();
  LODWORD(v18.value) = 0;
  FigCFDictionaryGetInt32IfPresent();
  v5 = *(float *)(DerivedStorage + 168);
  if (v5 != *(float *)&v12)
  {
    if (*(float *)&v12 == 0.0)
    {
      FigPlaybackCoordinatorGetCMBaseObject(a2);
      CMBaseObjectGetDerivedStorage();
      v16 = 0;
      FigCFDictionaryGetInt32IfPresent();
      LOBYTE(v17.value) = 0;
      LODWORD(v18.value) = 0;
      if (!FigCFDictionaryGetInt32IfPresent()
        || LODWORD(v18.value) < 2
        || FigCFDictionaryGetBooleanIfPresent() && LOBYTE(v17.value))
      {
        v6 = *(_QWORD *)(DerivedStorage + 40);
        if (v6)
        {
          v7 = *(void (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
          if (v7)
            v7(v6, &v11);
        }
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v17 = v11;
        figPlaybackCoordinator_getGroupTimeFromPlayerTime(a2, &v17, &v18);
        v11 = v18;
        FigCFDictionarySetCMTime();
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA5380], (const void *)*MEMORY[0x1E0C9AE50]);
        FigTimelineCoordinatorCoordinateRateChange();
        *(_QWORD *)(DerivedStorage + 88) = v13;
        *(_DWORD *)(DerivedStorage + 168) = v12;
        *(_BYTE *)(DerivedStorage + 104) = 0;
        if (Mutable)
          CFRelease(Mutable);
        return;
      }
      if (figPlaybackCoordinator_playerHasPlaybackStalled())
      {
        v9 = (const void **)MEMORY[0x1E0CA53D0];
      }
      else
      {
        IsAudioSessionInterrupted = figPlaybackCoordinator_playerIsAudioSessionInterrupted();
        v9 = (const void **)MEMORY[0x1E0CA53A0];
        if (!IsAudioSessionInterrupted)
          v9 = (const void **)MEMORY[0x1E0CA53D8];
      }
      if (*v9)
        playbackCoordinator_beginSystemEventSuspensionForReason(a2, *v9);
    }
    else
    {
      if (v5 == 0.0 || *(_BYTE *)(DerivedStorage + 96))
        return;
      FigTimelineCoordinatorCoordinateRateChange();
      *(_QWORD *)(DerivedStorage + 88) = v13;
    }
    *(_DWORD *)(DerivedStorage + 168) = v12;
    *(_BYTE *)(DerivedStorage + 104) = 0;
  }
}

uint64_t figPlaybackCoordinator_suspensionReasonsChanged()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t figPlaybackCoordinator_timelineCoordinatorParticipantsDidChange(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage;
  _QWORD *v8;
  CFTypeRef v9;
  CFTypeRef v10;

  FigPlaybackCoordinatorGetCMBaseObject(a2);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = malloc_type_malloc(0x10uLL, 0x60040FAFB2B2FuLL);
  if (a2)
    v9 = CFRetain(a2);
  else
    v9 = 0;
  *v8 = v9;
  if (a5)
    v10 = CFRetain(a5);
  else
    v10 = 0;
  v8[1] = v10;
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 272), v8, (dispatch_function_t)figPlaybackCoordinator_timelineCoordinatorParticipantsDidChangeDispatch);
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t figPlaybackCoordinator_timelineCoordinatorDidIssueCommandToTimelineControl()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t figPlaybackCoordinator_removeAllItemListeners(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;

  FigPlaybackCoordinatorGetCMBaseObject(a1);
  result = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(result + 40))
  {
    v2 = result;
    if (*(_BYTE *)(result + 61))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      result = FigNotificationCenterRemoveWeakListener();
      *(_BYTE *)(v2 + 61) = 0;
    }
    if (*(_BYTE *)(v2 + 60))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      result = FigNotificationCenterRemoveWeakListener();
      *(_BYTE *)(v2 + 60) = 0;
    }
  }
  return result;
}

uint64_t figPlaybackCoordinator_removeTimebaseNotificationListeners(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterRemoveWeakListener();
  }
  return result;
}

void figPlaybackCoordinator_transitionToNewCurrentItemIfReady(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  void (*v6)(uint64_t, _QWORD, CFTypeRef *);
  CFTypeRef v7;
  uint64_t v8;
  void (*v9)(uint64_t, CMTime *);
  uint64_t v10;
  void (*v11)(uint64_t, CMTime *);
  const __CFArray *v12;
  const __CFDictionary *ValueAtIndex;
  CMTime v14;
  CMTime rhs;
  CMTime lhs;
  CMTime v17;
  CMTimeRange time2;
  CMTimeMapping time1;
  CMTime start;
  CMTime v21;
  CMTime v22;
  CFTypeRef v23;

  v23 = 0;
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v5 = DerivedStorage;
    v6 = *(void (**)(uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v6)
    {
      v6(a2, 0, &v23);
      v7 = v23;
    }
    else
    {
      v7 = 0;
    }
    if (*(_BYTE *)(v5 + 488))
    {
      v8 = *(_QWORD *)(v5 + 40);
      if (v8)
      {
        if (!v7)
        {
          v22 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
          v21 = v22;
          start = v22;
          v9 = *(void (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
          if (v9)
            v9(v8, &v22);
          v10 = *(_QWORD *)(v5 + 40);
          v11 = *(void (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
          if (v11)
            v11(v10, &v21);
          time1.source.start = v22;
          time2.start = v21;
          if ((CMTimeCompare(&time1.source.start, &time2.start) & 0x80000000) == 0)
          {
            v12 = *(const __CFArray **)(v5 + 472);
            if (v12)
            {
              ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v12, 0);
              memset(&time1, 0, sizeof(time1));
              CMTimeMappingMakeFromDictionary(&time1, ValueAtIndex);
              time2 = time1.target;
              CMTimeRangeGetEnd(&start, &time2);
              CMTimeMake(&lhs, 1, 10);
              CMTimeMake(&rhs, 1, 1000);
              CMTimeAdd(&v17, &lhs, &rhs);
              v14 = start;
              CMTimeAdd(&time2.start, &v14, &v17);
              start = time2.start;
            }
          }
          time1.source.start = start;
          playbackCoordinator_endCoordinatedPlaybackNotPossibleSuspension((uint64_t)a1, 4);
          figPlaybackCoordinator_beginPlayingPrimarySuspension(a1);
          v7 = v23;
        }
      }
    }
    figPlaybackCoordinator_transitionToNewCurrentItem(a1, v7);
    if (v23)
      CFRelease(v23);
  }
}

void playbackCoordinator_endAllSystemEventSuspensions(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v2;

  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 280));
  v2 = (const void *)FigCFDictionaryCopyArrayOfValues();
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(DerivedStorage + 288));
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 280));
  FigTimelineCoordinatorEndSuspensions();
  if (v2)
    CFRelease(v2);
}

uint64_t figPlaybackCoordinator_endPlayingInterstitialSuspension(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v2;
  const void *v3;

  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 352));
  if (*(_QWORD *)(DerivedStorage + 440))
  {
    v2 = FigTimelineCoordinatorEndSuspensionReApplyingGroupStateOnlyIfNeeded();
    v3 = *(const void **)(DerivedStorage + 440);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(DerivedStorage + 440) = 0;
    }
  }
  else
  {
    v2 = 0;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 352));
  return v2;
}

uint64_t playbackCoordinator_endCoordinatedPlaybackNotPossibleSuspension(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  BOOL v4;
  uint64_t v5;
  const void *v7;

  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 280));
  v4 = (*(_DWORD *)(DerivedStorage + 304) & ~a2) == 0;
  *(_DWORD *)(DerivedStorage + 304) &= ~a2;
  if (v4 && *(_QWORD *)(DerivedStorage + 296))
  {
    v5 = FigTimelineCoordinatorEndSuspensionProposingNewTime();
    v7 = *(const void **)(DerivedStorage + 296);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(DerivedStorage + 296) = 0;
    }
  }
  else
  {
    v5 = 0;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 280));
  return v5;
}

void figPlaybackCoordinator_transitionToNewCurrentItem(const void *a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v5;
  BOOL v6;
  const void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t FigBaseObject;
  unsigned int (*v14)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  BOOL v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef v21;
  CFTypeRef v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  int v25;
  const void *v26;
  const void *v27;
  CFTypeRef v28;
  CFTypeRef v29;
  CFTypeRef cf;

  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v5)
    v6 = 1;
  else
    v6 = a2 == 0;
  if (!v6)
    a2 = 0;
  if (a2 != *(const void **)(DerivedStorage + 40))
  {
    figPlaybackCoordinator_removeAllItemListeners((uint64_t)a1);
    if (*(_QWORD *)(DerivedStorage + 48))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      v7 = *(const void **)(DerivedStorage + 48);
      if (v7)
      {
        CFRelease(v7);
        *(_QWORD *)(DerivedStorage + 48) = 0;
      }
    }
    if (playbackCoordinator_coordinatedPlaybackNotPossibleSuspensionActive((uint64_t)a1, 1)
      || *(_DWORD *)(DerivedStorage + 56) != 2
      || !playbackCoordinator_beginCoordinatedPlaybackNotPossibleSuspension((uint64_t)a1, 1))
    {
      v8 = *(const void **)(DerivedStorage + 40);
      *(_QWORD *)(DerivedStorage + 40) = a2;
      if (a2)
        CFRetain(a2);
      if (v8)
        CFRelease(v8);
      *(_DWORD *)(DerivedStorage + 56) = 0;
      FigPlaybackCoordinatorGetCMBaseObject(a1);
      v9 = CMBaseObjectGetDerivedStorage();
      v10 = v9;
      v28 = 0;
      v29 = 0;
      if (*(_DWORD *)(v9 + 56))
      {
        FigSignalErrorAt();
      }
      else
      {
        v11 = *(_QWORD *)(v9 + 40);
        if (v11)
        {
          cf = 0;
          v12 = *MEMORY[0x1E0C9AE00];
          FigBaseObject = FigPlaybackItemGetFigBaseObject(v11);
          v14 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
          if (v14)
          {
            if (v14(FigBaseObject, CFSTR("IsCoordinatedPlaybackSupported"), v12, &cf))
              v15 = 0;
            else
              v15 = cf == (CFTypeRef)*MEMORY[0x1E0C9AE40];
            v16 = v15;
            if (cf)
              CFRelease(cf);
            if ((v16 & 1) != 0)
            {
              v25 = 2;
              goto LABEL_43;
            }
          }
          if (*(_QWORD *)(v10 + 40))
          {
            FigPlaybackCoordinatorGetCMBaseObject(a1);
            v17 = CMBaseObjectGetDerivedStorage();
            if (*(_QWORD *)(v17 + 40))
            {
              v18 = v17;
              CMNotificationCenterGetDefaultLocalCenter();
              FigNotificationCenterAddWeakListener();
              CMNotificationCenterGetDefaultLocalCenter();
              FigNotificationCenterAddWeakListener();
              CMNotificationCenterGetDefaultLocalCenter();
              FigNotificationCenterAddWeakListener();
              CMNotificationCenterGetDefaultLocalCenter();
              FigNotificationCenterAddWeakListener();
              *(_BYTE *)(v18 + 60) = 1;
            }
          }
          v19 = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(v10 + 40));
          v20 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
          if (v20 && !v20(v19, CFSTR("IsReadyForPlayback"), v12, &v29))
          {
            v21 = v29;
            v22 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
            if (v29 == (CFTypeRef)*MEMORY[0x1E0C9AE50])
            {
              v25 = 102;
LABEL_44:
              *(_DWORD *)(v10 + 56) = v25;
              if (v21)
                CFRelease(v21);
              if (v28)
                CFRelease(v28);
              figPlaybackCoordinator_resetInterstitialStateMachine((uint64_t)a1);
              v26 = *(const void **)(DerivedStorage + 456);
              if (v26)
              {
                CFRelease(v26);
                *(_QWORD *)(DerivedStorage + 456) = 0;
              }
              v27 = *(const void **)(DerivedStorage + 464);
              if (v27)
              {
                CFRelease(v27);
                *(_QWORD *)(DerivedStorage + 464) = 0;
              }
              figPlaybackCoordinator_seekToGroupTimeIfOnlyReadyForInspection((uint64_t)a1);
              figPlaybackCoordinator_startTrackingPlaybackStateIfReady((uint64_t)a1);
              figPlaybackCoordinator_setIntegratedTimelineOffsetTimesForItem((uint64_t)a1, (uint64_t)a2);
              if (!figPlaybackCoordinator_resetTimelineCoordinatorStateToCurrentItemIdentifierAndTiming(a1)
                && playbackCoordinator_coordinatedPlaybackNotPossibleSuspensionActive((uint64_t)a1, 1)
                && *(_DWORD *)(DerivedStorage + 56) != 2)
              {
                playbackCoordinator_endCoordinatedPlaybackNotPossibleSuspension((uint64_t)a1, 1);
              }
              goto LABEL_56;
            }
            v23 = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(v10 + 40));
            v24 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
            if (v24)
            {
              if (!v24(v23, CFSTR("BasicsReadyForInspection"), v12, &v28))
              {
                if (v28 == v22)
                  v25 = 101;
                else
                  v25 = 100;
                goto LABEL_43;
              }
            }
          }
        }
      }
      v25 = 1;
LABEL_43:
      v21 = v29;
      goto LABEL_44;
    }
  }
LABEL_56:
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 64));
  *(_BYTE *)(DerivedStorage + 320) = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 64));
  if (v5)
    CFRelease(v5);
}

BOOL playbackCoordinator_coordinatedPlaybackNotPossibleSuspensionActive(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  _BOOL8 v4;

  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 280));
  v4 = (*(_DWORD *)(DerivedStorage + 304) & a2) != 0;
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 280));
  return v4;
}

uint64_t playbackCoordinator_beginCoordinatedPlaybackNotPossibleSuspension(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  int v4;
  const void *v5;
  const void **v6;
  uint64_t v7;
  uint64_t v8;

  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 280));
  v4 = *(_DWORD *)(DerivedStorage + 304);
  if (v4)
  {
    v5 = 0;
LABEL_9:
    v8 = 0;
    *(_DWORD *)(DerivedStorage + 304) = v4 | a2;
    goto LABEL_10;
  }
  if (*(_BYTE *)(DerivedStorage + 488))
    v6 = (const void **)MEMORY[0x1E0CA53B8];
  else
    v6 = (const void **)MEMORY[0x1E0CA53B0];
  v5 = *v6;
  v7 = FigTimelineCoordinatorSuspensionCreate();
  if (!(_DWORD)v7)
  {
    v7 = FigTimelineCoordinatorBeginSuspensionProposingTime();
    if (!(_DWORD)v7)
    {
      *(_QWORD *)(DerivedStorage + 296) = 0;
      v4 = *(_DWORD *)(DerivedStorage + 304);
      goto LABEL_9;
    }
  }
  v8 = v7;
LABEL_10:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 280));
  if (v5)
    CFRelease(v5);
  return v8;
}

void figPlaybackCoordinator_seekToGroupTimeIfOnlyReadyForInspection(uint64_t a1)
{
  uint64_t v2;
  CMTimeEpoch epoch;
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t FigBaseObject;
  unsigned int (*v7)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const __CFAllocator *v8;
  CMTimeScale v9;
  CMTimeFlags flags;
  CMTimeFlags v11;
  uint64_t v12;
  CMTimeEpoch v13;
  uint64_t v14;
  void (*v15)(uint64_t, const __CFString *, const __CFAllocator *, const __CFArray **);
  CFIndex Count;
  CFIndex v17;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *Value;
  const __CFDictionary *v21;
  CFMutableDictionaryRef Mutable;
  uint64_t v23;
  void (*v24)(uint64_t, CMTime *, CFMutableDictionaryRef);
  CMTime v25;
  CMTime v26;
  CMTime v27;
  CMTime v28;
  CFTypeRef v29;
  CFTypeRef cf;
  CMTime v31;
  CMTime v32;
  CMTime time2;
  const __CFArray *v34;
  CMTime time1;
  CMTimeValue v36;
  CMTimeScale v37;
  CMTimeValue v38;
  CMTimeScale v39;
  CMTimeValue v40;
  CMTimeScale v41;
  CMTimeValue v42;
  CMTimeScale timescale;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v29 = 0;
  cf = 0;
  v2 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)&v28.value = *MEMORY[0x1E0CA2E18];
  epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v28.epoch = epoch;
  *(_OWORD *)&v27.value = *(_OWORD *)&v28.value;
  v27.epoch = epoch;
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 56) != 101)
    goto LABEL_22;
  v5 = DerivedStorage;
  if (figPlaybackCoordinator_recordDateOffsetForItem(a1, &v28))
    goto LABEL_22;
  figPlaybackCoordinator_recordInterstitialTimeRange(a1, &cf);
  FigBaseObject = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(v5 + 40));
  v7 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
  if (!v7)
    goto LABEL_22;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (v7(FigBaseObject, CFSTR("CoordinationIdentifier"), *MEMORY[0x1E0C9AE00], &v29))
    goto LABEL_22;
  if (FigTimelineCoordinatorIsSuspended())
    goto LABEL_22;
  if (FigTimelineCoordinatorGetExpectedGroupTimeForIdentifier())
    goto LABEL_22;
  if ((v27.flags & 1) == 0)
    goto LABEL_22;
  memset(&v26, 0, sizeof(v26));
  time1 = v27;
  time2 = v28;
  figPlaybackCoordinator_getPlayerTimeFromGroupTime(a1, &time1, (uint64_t)&time2, (const __CFArray *)cf, 0, &v26);
  time1 = v26;
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (CMTimeCompare(&time1, &time2) < 0)
    goto LABEL_22;
  v25 = v26;
  v42 = *(_QWORD *)v2;
  v9 = *(_DWORD *)(v2 + 8);
  flags = *(_DWORD *)(v2 + 12);
  timescale = v9;
  v40 = *MEMORY[0x1E0CA2E28];
  v11 = *(_DWORD *)(MEMORY[0x1E0CA2E28] + 12);
  v41 = *(_DWORD *)(MEMORY[0x1E0CA2E28] + 8);
  v12 = *(_QWORD *)(v5 + 40);
  v34 = 0;
  v13 = *(_QWORD *)(MEMORY[0x1E0CA2E28] + 16);
  v14 = FigPlaybackItemGetFigBaseObject(v12);
  v15 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, const __CFArray **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v15)
  {
    v15(v14, CFSTR("SeekableTimeIntervals"), v8, &v34);
    if (v34)
    {
      Count = CFArrayGetCount(v34);
      if (Count >= 1)
      {
        v17 = Count;
        for (i = 0; i != v17; ++i)
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v34, i);
          memset(&time1, 0, sizeof(time1));
          Value = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, CFSTR("startTime"));
          CMTimeMakeFromDictionary(&time1, Value);
          memset(&time2, 0, sizeof(time2));
          v21 = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, CFSTR("endTime"));
          CMTimeMakeFromDictionary(&time2, v21);
          v32.timescale = timescale;
          v32.flags = flags;
          v32.epoch = epoch;
          v31 = time1;
          v32.value = v42;
          if (CMTimeCompare(&v32, &v31) >= 1)
          {
            v42 = time1.value;
            flags = time1.flags;
            timescale = time1.timescale;
            epoch = time1.epoch;
          }
          v32.timescale = v41;
          v32.flags = v11;
          v32.epoch = v13;
          v31 = time2;
          v32.value = v40;
          if (CMTimeCompare(&v32, &v31) < 0)
          {
            v40 = time2.value;
            v11 = time2.flags;
            v41 = time2.timescale;
            v13 = time2.epoch;
          }
        }
      }
      CFRelease(v34);
    }
  }
  v38 = v42;
  v39 = timescale;
  v36 = v40;
  v37 = v41;
  if ((flags & 0x1D) != 1)
    goto LABEL_22;
  if ((v11 & 0x1D) != 1)
    goto LABEL_22;
  time1.value = v38;
  time1.timescale = v39;
  time1.flags = flags;
  time1.epoch = epoch;
  time2 = v25;
  if (CMTimeCompare(&time1, &time2) >= 1
    || (time1.value = v36,
        time1.timescale = v37,
        time1.flags = v11,
        time1.epoch = v13,
        time2 = v25,
        CMTimeCompare(&time1, &time2) < 0))
  {
LABEL_22:
    Mutable = 0;
  }
  else
  {
    *(_DWORD *)(v5 + 80) = FPSupport_IncrementSeekID(*(_DWORD *)(v5 + 80));
    Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    v23 = *(_QWORD *)(v5 + 40);
    time2 = v26;
    v24 = *(void (**)(uint64_t, CMTime *, CFMutableDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 176);
    if (v24)
    {
      time1 = time2;
      v24(v23, &time1, Mutable);
    }
  }
  if (cf)
    CFRelease(cf);
  if (v29)
    CFRelease(v29);
  if (Mutable)
    CFRelease(Mutable);
}

void figPlaybackCoordinator_startTrackingPlaybackStateIfReady(uint64_t a1)
{
  uint64_t DerivedStorage;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t FigBaseObject;
  unsigned int (*v7)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v8;
  CFTypeRef v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, __CFString *, uint64_t, CFTypeRef *);
  CFIndex Count;
  uint64_t v15;
  CFIndex v16;
  void (*v17)(uint64_t, __CFString *, __CFString *, CFIndex);
  uint64_t v18;
  void (*v19)(uint64_t, __CFString *, __CFString *, uint64_t);
  const void *v20;
  CFTypeRef v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef v24;
  CFTypeRef v25;
  CFTypeRef cf;
  CFArrayRef theArray;
  CFTypeRef v28;

  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v25 = 0;
  cf = 0;
  if (*(_DWORD *)(DerivedStorage + 56) == 102)
  {
    v3 = (_QWORD *)DerivedStorage;
    FigPlaybackCoordinatorGetCMBaseObject(a1);
    v4 = CMBaseObjectGetDerivedStorage();
    if (*(_QWORD *)(v4 + 40))
    {
      v5 = v4;
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      *(_BYTE *)(v5 + 61) = 1;
    }
    FigPlaybackCoordinatorGetCMBaseObject(a1);
    CMBaseObjectGetDerivedStorage();
    FigBaseObject = FigPlaybackItemGetFigBaseObject(v3[5]);
    v7 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
    if (v7)
    {
      v8 = *MEMORY[0x1E0C9AE00];
      if (!v7(FigBaseObject, CFSTR("Timebase"), *MEMORY[0x1E0C9AE00], &cf))
      {
        figPlaybackCoordinator_addTimebaseNotificationListeners(a1, (uint64_t)cf);
        figPlaybackCoordinator_updateHLSInterstitialStartTimes(a1);
        figPlaybackCoordinator_recordCurrentHLSInterstitialEventCoordinationStatus(a1);
        v9 = cf;
        if (cf)
          v9 = CFRetain(cf);
        v3[6] = v9;
        FigPlaybackCoordinatorGetCMBaseObject(a1);
        v10 = CMBaseObjectGetDerivedStorage();
        theArray = 0;
        v28 = 0;
        v11 = *(_QWORD *)(v10 + 40);
        if (v11)
        {
          v12 = FigPlaybackItemGetFigBaseObject(v11);
          v13 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
          if (v13)
          {
            if (!v13(v12, CFSTR("ReportingAgent"), v8, &v28)
              && !figPlaybackCoordinator_CopyParticipantSnapshots(a1))
            {
              if (theArray)
              {
                Count = CFArrayGetCount(theArray);
                if (Count >= 1)
                {
                  v15 = *(_QWORD *)(v10 + 312);
                  if (v15)
                  {
                    v16 = Count;
                    v17 = *(void (**)(uint64_t, __CFString *, __CFString *, CFIndex))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 40);
                    if (v17)
                      v17(v15, CFSTR("playbackCoordinatorStats"), CFSTR("CPCntOfParts"), v16);
                    v18 = *(_QWORD *)(v10 + 312);
                    if (v18)
                    {
                      v19 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 40);
                      if (v19)
                        v19(v18, CFSTR("CPPlayIsParticipating"), CFSTR("CPCntOfParts"), 1);
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          FigSignalErrorAt();
        }
        v20 = *(const void **)(v10 + 312);
        v21 = v28;
        *(_QWORD *)(v10 + 312) = v28;
        if (v21)
          CFRetain(v21);
        if (v20)
          CFRelease(v20);
        if (v28)
          CFRelease(v28);
        if (theArray)
          CFRelease(theArray);
        v22 = FigPlaybackItemGetFigBaseObject(v3[5]);
        v23 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
        if (v23 && !v23(v22, CFSTR("IntegratedTimelineTimeOffsets"), v8, &v25))
        {
          v24 = v25;
          if (v25)
            v24 = CFRetain(v25);
          v3[59] = v24;
        }
      }
    }
  }
  if (cf)
    CFRelease(cf);
  if (v25)
    CFRelease(v25);
}

void figPlaybackCoordinator_setIntegratedTimelineOffsetTimesForItem(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t FigBaseObject;
  void (*v5)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef v6;
  const void *v7;
  CFTypeRef cf;

  cf = 0;
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    FigBaseObject = FigPlaybackItemGetFigBaseObject(a2);
    v5 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
    if (v5)
    {
      v5(FigBaseObject, CFSTR("IntegratedTimelineTimeOffsets"), *MEMORY[0x1E0C9AE00], &cf);
      v6 = cf;
      v7 = *(const void **)(DerivedStorage + 472);
      *(_QWORD *)(DerivedStorage + 472) = cf;
      if (v6)
        CFRetain(v6);
      if (v7)
        goto LABEL_6;
      goto LABEL_7;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  v7 = *(const void **)(DerivedStorage + 472);
  *(_QWORD *)(DerivedStorage + 472) = 0;
  if (v7)
LABEL_6:
    CFRelease(v7);
LABEL_7:
  if (cf)
    CFRelease(cf);
}

uint64_t figPlaybackCoordinator_resetTimelineCoordinatorStateToCurrentItemIdentifierAndTiming(const void *a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  __int128 v4;
  int v5;
  uint64_t v6;
  uint64_t FigBaseObject;
  uint64_t (*v8)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  int DefaultCoordinationIdentifierForPlaybackItem;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, const __CFString *, uint64_t, CMTimebaseRef *);
  float Rate;
  uint64_t v20;
  void (*v21)(uint64_t, CMTime *);
  void (*v22)(const void *, float *);
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v28;
  NSObject *v29;
  OpaqueCMTimebase *v30;
  uint64_t v31;
  double v32;
  float v33;
  OpaqueCMClock *HostTimeClock;
  CMClockRef v35;
  const void *v36;
  CMTimebaseRef *v37;
  const void *v38;
  const void *v39;
  CFTypeRef v40;
  CFTypeRef v42;
  float v43;
  _OWORD v44[3];
  CMTime v45;
  CFTypeRef v46;
  CMTimebaseRef timebase;
  CFTypeRef cf;
  CMTime v49;
  CMTime time;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  timebase = 0;
  cf = 0;
  v46 = 0;
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v45 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v4 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  v44[0] = *MEMORY[0x1E0CA2E40];
  v44[1] = v4;
  v44[2] = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
  v43 = 0.0;
  v5 = *(_DWORD *)(DerivedStorage + 56);
  v42 = 0;
  FigTimelineCoordinatorSetReadinessHintFromTimelineControl();
  figPlaybackCoordinator_completePendingCommandAndRecordNewCallback((uint64_t)a1, 0, 0, 0);
  *(_BYTE *)(DerivedStorage + 104) = 0;
  *(_DWORD *)(DerivedStorage + 168) = 2143289344;
  if (*(_DWORD *)(DerivedStorage + 56) < 0x66u)
    goto LABEL_36;
  v6 = *MEMORY[0x1E0C9AE00];
  FigBaseObject = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(DerivedStorage + 40));
  v8 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (v8)
  {
    DefaultCoordinationIdentifierForPlaybackItem = v8(FigBaseObject, CFSTR("CoordinationIdentifier"), v6, &cf);
    if (DefaultCoordinationIdentifierForPlaybackItem == -12783)
      DefaultCoordinationIdentifierForPlaybackItem = FPSupport_CreateDefaultCoordinationIdentifierForPlaybackItem(*(_QWORD *)(DerivedStorage + 40), (CFStringRef *)&cf);
    v10 = DefaultCoordinationIdentifierForPlaybackItem == 0;
  }
  else
  {
    v10 = 0;
  }
  figPlaybackCoordinator_beginOrEndCoordinatedPlaybackNotPossibleSuspension((uint64_t)a1, v10, 2);
  if (*(_BYTE *)(DerivedStorage + 488))
  {
    v11 = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(DerivedStorage + 40));
    v12 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
    if (!v12)
      goto LABEL_24;
    v13 = v12(v11, CFSTR("ParticipatesInCoordinatedPlayback"), v6, &v42);
    if ((_DWORD)v13)
      goto LABEL_74;
    *(_BYTE *)(DerivedStorage + 448) = v42 == (CFTypeRef)*MEMORY[0x1E0C9AE50];
    FigPlaybackCoordinatorGetCMBaseObject(a1);
    v14 = CMBaseObjectGetDerivedStorage();
    if (*(_BYTE *)(v14 + 488) != 1
      || (v15 = v14,
          MEMORY[0x19402EEEC](*(_QWORD *)(v14 + 352)),
          v16 = *(_QWORD *)(v15 + 440),
          MEMORY[0x19402EF04](*(_QWORD *)(v15 + 352)),
          !v16))
    {
      figPlaybackCoordinator_beginOrEndCoordinatedPlaybackNotPossibleSuspension((uint64_t)a1, *(_BYTE *)(DerivedStorage + 448) != 0, 4);
    }
  }
  v17 = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(DerivedStorage + 40));
  v18 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CMTimebaseRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
  if (!v18)
  {
LABEL_24:
    v26 = 4294954514;
    if (!v3)
      goto LABEL_65;
    goto LABEL_64;
  }
  v13 = v18(v17, CFSTR("Timebase"), v6, &timebase);
  if ((_DWORD)v13)
    goto LABEL_74;
  figPlaybackCoordinator_recordInterstitialTimeRange((uint64_t)a1, 0);
  Rate = CMTimebaseGetRate(timebase);
  *(float *)(DerivedStorage + 168) = Rate;
  figPlaybackCoordinator_recordDateOffsetForItem((uint64_t)a1, 0);
  v20 = *(_QWORD *)(DerivedStorage + 40);
  v21 = *(void (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v21)
    v21(v20, &v45);
  v22 = *(void (**)(const void *, float *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v22)
    v22(v3, &v43);
  v23 = CMTimebaseGetRate(timebase);
  if (v23 == 0.0 && v3)
  {
    v24 = v43;
    v25 = 0.0;
    if ((v45.flags & 1) != 0 && v43 != v23)
    {
      *(float *)(DerivedStorage + 168) = v43;
      v25 = v24;
    }
  }
  else
  {
    v25 = 0.0;
    v24 = v43;
  }
  if (v24 != 0.0 && (v45.flags & 1) != 0)
  {
    time = v45;
    if (figPlaybackCoordinator_isTimeInInterstitialRange((uint64_t)a1, &time, v44))
    {
      if (dword_1ECDC8900)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v49 = v45;
      figPlaybackCoordinator_getGroupTimeFromPlayerTime((uint64_t)a1, &v49, &time);
      v45 = time;
LABEL_51:
      v13 = FigTimelineCoordinatorHandleTransitionToNewTimelineFromTimelineControlProposingTimeAndPrerollRate();
      if ((_DWORD)v13)
        goto LABEL_74;
      v5 = 10000;
      goto LABEL_53;
    }
  }
  if (v25 != 0.0)
  {
    v49 = v45;
    figPlaybackCoordinator_getGroupTimeFromPlayerTime((uint64_t)a1, &v49, &time);
    v45 = time;
    if (dword_1ECDC8900)
    {
      v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    time = v45;
    goto LABEL_51;
  }
  v5 = 10000;
LABEL_36:
  if (dword_1ECDC8900)
  {
    v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(_BYTE *)(DerivedStorage + 96) && cf)
  {
    v30 = *(OpaqueCMTimebase **)(DerivedStorage + 48);
    FigPlaybackCoordinatorGetCMBaseObject(a1);
    v31 = CMBaseObjectGetDerivedStorage();
    v32 = CMTimebaseGetRate(v30);
    if (v32 == 0.0)
    {
      *(_BYTE *)(v31 + 104) = 0;
    }
    else
    {
      *(_BYTE *)(v31 + 104) = 1;
      v33 = v32;
      *(float *)(v31 + 156) = v33;
      HostTimeClock = CMClockGetHostTimeClock();
      CMClockGetTime(&time, HostTimeClock);
      *(CMTime *)(v31 + 132) = time;
      v35 = CMClockGetHostTimeClock();
      v49 = *(CMTime *)(v31 + 132);
      CMSyncConvertTime(&time, &v49, v35, v30);
      *(CMTime *)(v31 + 108) = time;
      v38 = *(const void **)(v31 + 160);
      v37 = (CMTimebaseRef *)(v31 + 160);
      v36 = v38;
      if (v38)
      {
        CFRelease(v36);
        *v37 = 0;
      }
      v13 = figPlaybackCoordinator_copyTimebaseAndAddOffset(v30, MEMORY[0x1E0CA2E68], v37);
      if ((_DWORD)v13)
        goto LABEL_74;
    }
  }
  v13 = figPlaybackCoordinator_copyGroupTimebaseFromCurrentItemTimebase((uint64_t)a1, (CMTimebaseRef *)&v46);
  if ((_DWORD)v13)
    goto LABEL_74;
  v13 = FigTimelineCoordinatorHandleTransitionToNewTimelineFromTimelineControl();
  if ((_DWORD)v13)
    goto LABEL_74;
LABEL_53:
  v39 = *(const void **)(DerivedStorage + 72);
  v40 = cf;
  *(_QWORD *)(DerivedStorage + 72) = cf;
  if (v40)
    CFRetain(v40);
  if (v39)
    CFRelease(v39);
  v13 = FigTimelineCoordinatorSetReadinessHintFromTimelineControl();
  if (!(_DWORD)v13)
  {
    if (!*(_DWORD *)(DerivedStorage + 376))
      figPlaybackCoordinator_updateInterstitialStateMachine(a1, 0);
    if (*(_DWORD *)(DerivedStorage + 56) == v5)
    {
      v26 = 0;
      if (!v3)
        goto LABEL_65;
    }
    else
    {
      v26 = 0;
      *(_DWORD *)(DerivedStorage + 56) = v5;
      if (!v3)
        goto LABEL_65;
    }
LABEL_64:
    CFRelease(v3);
    goto LABEL_65;
  }
LABEL_74:
  v26 = v13;
  if (v3)
    goto LABEL_64;
LABEL_65:
  if (cf)
    CFRelease(cf);
  if (timebase)
    CFRelease(timebase);
  if (v46)
    CFRelease(v46);
  if (v42)
    CFRelease(v42);
  return v26;
}

void figPlaybackCoordinator_currentItemReadyForPlayback(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;

  FigPlaybackCoordinatorGetCMBaseObject(a2);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 40) == a4)
  {
    v7 = DerivedStorage;
    figPlaybackCoordinator_setIntegratedTimelineOffsetTimesForItem((uint64_t)a2, a4);
    if ((*(_DWORD *)(v7 + 56) & 0xFFFFFFFE) == 0x64)
      *(_DWORD *)(v7 + 56) = 102;
    figPlaybackCoordinator_startTrackingPlaybackStateIfReady((uint64_t)a2);
    if ((*(_DWORD *)(v7 + 56) - 102) <= 0x26A9)
      figPlaybackCoordinator_resetTimelineCoordinatorStateToCurrentItemIdentifierAndTiming(a2);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t figPlaybackCoordinator_currentItemFailedToBecomeReadyForInspectionOrPlayback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;

  FigPlaybackCoordinatorGetCMBaseObject(a2);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 40) == a4 && (*(_DWORD *)(DerivedStorage + 56) - 102) > 0xFFFFFFFD)
    return figPlaybackCoordinator_beginOrEndCoordinatedPlaybackNotPossibleSuspension(a2, 0, 1);
  else
    return FigSignalErrorAt();
}

void figPlaybackCoordinator_readyForInspection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;

  FigPlaybackCoordinatorGetCMBaseObject(a2);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 40) == a4)
  {
    if (*(_DWORD *)(DerivedStorage + 56) == 100)
      *(_DWORD *)(DerivedStorage + 56) = 101;
    if (!*(_BYTE *)(DerivedStorage + 488) && !*(_QWORD *)(DerivedStorage + 472))
      figPlaybackCoordinator_seekToGroupTimeIfOnlyReadyForInspection(a2);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t figPlaybackCoordinator_beginOrEndCoordinatedPlaybackNotPossibleSuspension(uint64_t result, int a2, int a3)
{
  uint64_t v4;

  v4 = result;
  if (a2 == 1)
  {
    result = playbackCoordinator_coordinatedPlaybackNotPossibleSuspensionActive(result, a3);
    if ((_DWORD)result)
      return playbackCoordinator_endCoordinatedPlaybackNotPossibleSuspension(v4, a3);
  }
  else if (!a2)
  {
    result = playbackCoordinator_coordinatedPlaybackNotPossibleSuspensionActive(result, a3);
    if (!(_DWORD)result)
      return playbackCoordinator_beginCoordinatedPlaybackNotPossibleSuspension(v4, a3);
  }
  return result;
}

uint64_t figPlaybackCoordinator_recordDateOffsetForItem(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, CMTime *);
  uint64_t result;
  uint64_t FigBaseObject;
  uint64_t (*v9)(uint64_t, const __CFString *, _QWORD, const void **);
  const __CFAllocator *v10;
  Float64 v11;
  int v12;
  int v13;
  Float64 Seconds;
  CFDateRef v15;
  CFStringRef v16;
  CFStringRef v17;
  CMTime rhs;
  CMTime v19;
  CMTime time;
  double v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  CMTime v24;
  CMTime v25;
  CMTime v26;
  const void *v27;

  v27 = 0;
  v26 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v25 = v26;
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = DerivedStorage;
  if (*(_DWORD *)(DerivedStorage + 56) < 0x65u)
  {
LABEL_16:
    result = 0;
    goto LABEL_18;
  }
  v5 = *(_QWORD *)(DerivedStorage + 40);
  v6 = *(uint64_t (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v6)
    goto LABEL_17;
  result = v6(v5, &v26);
  if ((_DWORD)result)
    goto LABEL_18;
  if ((v26.flags & 0x1D) == 1)
    goto LABEL_16;
  FigBaseObject = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(v4 + 40));
  v9 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, const void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (v9)
  {
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    result = v9(FigBaseObject, CFSTR("currentDateAndTime"), *MEMORY[0x1E0C9AE00], &v27);
    if (!(_DWORD)result)
    {
      FigDateTimeMakeFromDictionary(v27, (uint64_t)&time);
      v24 = time;
      v11 = v21;
      v12 = v22;
      v13 = v23;
      CFRelease(v27);
      result = 0;
      if (v13)
      {
        if (v12)
        {
          memset(&v19, 0, sizeof(v19));
          CMTimeMakeWithSeconds(&v19, v11, 1000000000);
          time = v24;
          Seconds = CMTimeGetSeconds(&time);
          v15 = CFDateCreate(v10, v11);
          v16 = CFCopyDescription(v15);
          if (v15)
            CFRelease(v15);
          v17 = CFStringCreateWithFormat(v10, 0, CFSTR("time: %f date: %@ (%f)"), *(_QWORD *)&Seconds, v16, *(_QWORD *)&v11);
          if (v16)
            CFRelease(v16);
          if (v17)
            CFRelease(v17);
          time = v19;
          rhs = v24;
          CMTimeSubtract(&v25, &time, &rhs);
          goto LABEL_16;
        }
      }
    }
  }
  else
  {
LABEL_17:
    result = 4294954514;
  }
LABEL_18:
  if (a2)
    *a2 = v25;
  if (*(_DWORD *)(v4 + 56) >= 0x66u)
    *(CMTime *)(v4 + 324) = v25;
  return result;
}

void figPlaybackCoordinator_recordInterstitialTimeRange(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t FigBaseObject;
  unsigned int (*v6)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const void *v7;
  CFTypeRef v8;
  CFTypeRef cf;

  cf = 0;
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 56) < 0x65u
    || (v4 = DerivedStorage,
        FigBaseObject = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(DerivedStorage + 40)),
        (v6 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48)) == 0)
    || v6(FigBaseObject, CFSTR("InterstitialTimeRanges"), *MEMORY[0x1E0C9AE00], &cf))
  {
LABEL_7:
    v7 = 0;
    goto LABEL_8;
  }
  v7 = 0;
  if (*(_DWORD *)(v4 + 56) >= 0x66u && cf)
  {
    if (!*(_QWORD *)(v4 + 360))
    {
      v7 = (const void *)FigCFCopyCompactDescription();
      *(_QWORD *)(v4 + 360) = CFRetain(cf);
      if (!a2)
        goto LABEL_12;
      goto LABEL_9;
    }
    goto LABEL_7;
  }
LABEL_8:
  if (!a2)
    goto LABEL_12;
LABEL_9:
  v8 = cf;
  if (cf)
    v8 = CFRetain(cf);
  *a2 = v8;
LABEL_12:
  if (v7)
    CFRelease(v7);
  if (cf)
    CFRelease(cf);
}

double figPlaybackCoordinator_getPlayerTimeFromGroupTime@<D0>(uint64_t a1@<X0>, CMTime *a2@<X1>, uint64_t a3@<X2>, const __CFArray *a4@<X3>, char *a5@<X4>, CMTime *a6@<X8>)
{
  uint64_t DerivedStorage;
  __int128 v13;
  int v14;
  CFIndex Count;
  CMTimeEpoch v16;
  CFIndex v17;
  CFIndex v18;
  __int128 v19;
  const __CFDictionary *ValueAtIndex;
  char v21;
  const __CFArray *v22;
  CFIndex v23;
  char v24;
  uint64_t v25;
  const __CFArray *v26;
  CFIndex v27;
  CFIndex v28;
  CFIndex v29;
  CFIndex v30;
  const __CFDictionary *v31;
  int v32;
  const __CFDictionary *v33;
  CMTimeFlags flags;
  char v35;
  CMTimeEpoch v37;
  __int128 v38;
  CMTimeEpoch epoch;
  CMTime v40;
  CMTime v41;
  CMTime v42;
  CMTime v43;
  CMTime v44;
  CMTime v45;
  CMTimeMapping rhs;
  _BYTE v47[32];
  __int128 v48;
  CMTime v49;
  CMTime v50;
  CMTime time1;
  CMTime v52;
  CMTime time2;
  CMTime v54;
  CMTimeRange target;
  CMTimeMapping lhs;
  _BYTE time[32];
  _OWORD v58[2];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v13 = *(_OWORD *)&a2->value;
  *(_OWORD *)&a6->value = *(_OWORD *)&a2->value;
  a6->epoch = a2->epoch;
  v14 = *(_DWORD *)(a3 + 12);
  if ((v14 & 1) != 0)
  {
    *(_OWORD *)&lhs.source.start.value = *(_OWORD *)&a2->value;
    lhs.source.start.epoch = a2->epoch;
    *(_OWORD *)&rhs.source.start.value = *(_OWORD *)a3;
    rhs.source.start.epoch = *(_QWORD *)(a3 + 16);
    CMTimeSubtract(a6, &lhs.source.start, &rhs.source.start);
  }
  else if (a4 && CFArrayGetCount(a4) >= 1)
  {
    v52 = *a2;
    Count = CFArrayGetCount(a4);
    *(_OWORD *)time = *MEMORY[0x1E0CA2E68];
    v16 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    *(_QWORD *)&time[16] = v16;
    *(_OWORD *)&target.start.value = *(_OWORD *)time;
    target.start.epoch = v16;
    if (Count >= 1)
    {
      v17 = Count;
      v18 = 0;
      v19 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
      *(_OWORD *)&lhs.source.start.value = *MEMORY[0x1E0CA2E40];
      *(_OWORD *)&lhs.source.start.epoch = v19;
      *(_OWORD *)&lhs.source.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
      *(_OWORD *)v47 = *(_OWORD *)time;
      *(_QWORD *)&v47[16] = v16;
      do
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a4, v18);
        CMTimeRangeMakeFromDictionary(&lhs.source, ValueAtIndex);
        *(_OWORD *)&rhs.source.start.value = *(_OWORD *)&lhs.source.start.value;
        rhs.source.start.epoch = lhs.source.start.epoch;
        time2 = *(CMTime *)v47;
        CMTimeSubtract(&v54, &rhs.source.start, &time2);
        *(_OWORD *)&rhs.source.start.value = *(_OWORD *)&target.start.value;
        rhs.source.start.epoch = target.start.epoch;
        CMTimeAdd(&target.start, &rhs.source.start, &v54);
        *(_OWORD *)&rhs.source.start.value = *(_OWORD *)&target.start.value;
        rhs.source.start.epoch = target.start.epoch;
        time2 = v52;
        if ((CMTimeCompare(&rhs.source.start, &time2) & 0x80000000) == 0)
          break;
        *(_OWORD *)&rhs.source.start.value = *(_OWORD *)time;
        rhs.source.start.epoch = *(_QWORD *)&time[16];
        time2 = lhs.source.duration;
        CMTimeAdd((CMTime *)time, &rhs.source.start, &time2);
        *(_OWORD *)&rhs.source.start.value = *(_OWORD *)&lhs.source.start.value;
        *(_OWORD *)&rhs.source.start.epoch = *(_OWORD *)&lhs.source.start.epoch;
        *(_OWORD *)&rhs.source.duration.timescale = *(_OWORD *)&lhs.source.duration.timescale;
        CMTimeRangeGetEnd((CMTime *)v47, &rhs.source);
        ++v18;
      }
      while (v17 != v18);
    }
    lhs.source.start = v52;
    *(_OWORD *)&rhs.source.start.value = *(_OWORD *)time;
    rhs.source.start.epoch = *(_QWORD *)&time[16];
    CMTimeAdd((CMTime *)v47, &lhs.source.start, &rhs.source.start);
    v21 = 0;
    *(_QWORD *)&v13 = *(_QWORD *)v47;
    *(_OWORD *)&a6->value = *(_OWORD *)v47;
    a6->epoch = *(_QWORD *)&v47[16];
    goto LABEL_11;
  }
  v21 = 1;
LABEL_11:
  v22 = *(const __CFArray **)(DerivedStorage + 472);
  if (!v22)
    goto LABEL_45;
  v23 = CFArrayGetCount(v22);
  v24 = v21 ^ 1;
  if (v23 < 1)
    v24 = 1;
  if ((v24 & 1) != 0)
  {
LABEL_45:
    v35 = 0;
    if (!a5)
      return *(double *)&v13;
    goto LABEL_46;
  }
  v38 = *(_OWORD *)&a6->value;
  epoch = a6->epoch;
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  v25 = CMBaseObjectGetDerivedStorage();
  v40 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v26 = *(const __CFArray **)(v25 + 472);
  if (!v26 || (v27 = CFArrayGetCount(v26), v28 = v27 - 1, v27 < 1))
  {
LABEL_49:
    v35 = 0;
    goto LABEL_50;
  }
  v29 = v27;
  v30 = 0;
  while (1)
  {
    v31 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v25 + 472), v30);
    memset(&lhs, 0, sizeof(lhs));
    CMTimeMappingMakeFromDictionary(&lhs, v31);
    target = lhs.target;
    *(_OWORD *)&rhs.source.start.value = v38;
    memset(&v54, 0, sizeof(v54));
    rhs.source.start.epoch = epoch;
    *(_OWORD *)time = *(_OWORD *)&lhs.target.start.value;
    *(_QWORD *)&time[16] = lhs.target.start.epoch;
    CMTimeSubtract(&v54, &rhs.source.start, (CMTime *)time);
    rhs.source = target;
    *(_OWORD *)time = v38;
    *(_QWORD *)&time[16] = epoch;
    if (CMTimeRangeContainsTime(&rhs.source, (CMTime *)time)
      || (rhs.source.start = v54,
          CMTimeAbsoluteValue(&time2, &rhs.source.start),
          CMTimeMake(&v52, 350, 1000),
          CMTimeCompare(&time2, &v52) < 0)
      || (rhs.source = target,
          CMTimeRangeGetEnd(&time1, &rhs.source),
          *(_OWORD *)&rhs.source.start.value = v38,
          rhs.source.start.epoch = epoch,
          !CMTimeCompare(&time1, &rhs.source.start)))
    {
LABEL_48:
      *(_OWORD *)&rhs.source.start.value = *(_OWORD *)&lhs.source.start.value;
      rhs.source.start.epoch = lhs.source.start.epoch;
      *(CMTime *)time = v54;
      CMTimeAdd(&v40, &rhs.source.start, (CMTime *)time);
      goto LABEL_49;
    }
    if (!*(_BYTE *)(v25 + 488))
    {
      if ((v14 & 1) == 0 || v28 != v30)
        goto LABEL_32;
      goto LABEL_29;
    }
    rhs.source = target;
    CMTimeRangeGetEnd(&v50, &rhs.source);
    *(_OWORD *)&rhs.source.start.value = v38;
    rhs.source.start.epoch = epoch;
    if (CMTimeCompare(&rhs.source.start, &v50) >= 1)
    {
      v35 = 0;
      v40 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
      goto LABEL_50;
    }
    v32 = *(unsigned __int8 *)(v25 + 488);
    if ((v14 & 1) != 0 && v28 == v30)
    {
      if (*(_BYTE *)(v25 + 488))
        goto LABEL_43;
LABEL_29:
      rhs.source = target;
      CMTimeRangeGetEnd(&v49, &rhs.source);
      *(_OWORD *)&rhs.source.start.value = v38;
      rhs.source.start.epoch = epoch;
      if (CMTimeCompare(&rhs.source.start, &v49) > 0)
        goto LABEL_48;
      v32 = *(unsigned __int8 *)(v25 + 488);
    }
    if (v32)
      goto LABEL_43;
LABEL_32:
    if ((v40.flags & 1) != 0)
      goto LABEL_43;
    *(_OWORD *)v47 = *(_OWORD *)&lhs.source.start.value;
    *(_OWORD *)&v47[16] = *(_OWORD *)&lhs.source.start.epoch;
    v48 = *(_OWORD *)&lhs.source.duration.timescale;
    if (v30 + 1 >= v29)
      break;
    v33 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v25 + 472), v30 + 1);
    CMTimeMappingMakeFromDictionary(&rhs, v33);
    *(_OWORD *)time = *(_OWORD *)&rhs.source.start.value;
    *(_OWORD *)&time[16] = *(_OWORD *)&rhs.source.start.epoch;
    v58[0] = *(_OWORD *)&rhs.source.duration.timescale;
    *(_OWORD *)((char *)v58 + 12) = *(_OWORD *)((char *)&rhs.source.duration.epoch + 4);
    flags = rhs.target.start.flags;
    if ((rhs.target.start.flags & 1) != 0
      && (rhs.target.duration.flags & 1) != 0
      && !rhs.target.duration.epoch
      && (rhs.target.duration.value & 0x8000000000000000) == 0)
    {
      v37 = rhs.target.start.epoch;
      rhs.source = target;
      CMTimeRangeGetEnd(&v45, &rhs.source);
      *(_OWORD *)&rhs.source.start.value = v38;
      rhs.source.start.epoch = epoch;
      if (CMTimeCompare(&rhs.source.start, &v45) >= 1)
      {
        *(_OWORD *)&rhs.source.start.value = v38;
        rhs.source.start.epoch = epoch;
        v44.value = *(_QWORD *)&v58[1];
        v44.timescale = DWORD2(v58[1]);
        v44.flags = flags;
        v44.epoch = v37;
        if (CMTimeCompare(&rhs.source.start, &v44) < 0)
          goto LABEL_53;
      }
    }
LABEL_43:
    if (v29 == ++v30)
      goto LABEL_49;
  }
  if (v28 != v30)
    goto LABEL_43;
  rhs.source = target;
  CMTimeRangeGetEnd(&v41, &rhs.source);
  *(_OWORD *)&rhs.source.start.value = v38;
  rhs.source.start.epoch = epoch;
  if (CMTimeCompare(&rhs.source.start, &v41) < 1)
    goto LABEL_43;
LABEL_53:
  *(_OWORD *)&rhs.source.start.value = *(_OWORD *)v47;
  *(_OWORD *)&rhs.source.start.epoch = *(_OWORD *)&v47[16];
  *(_OWORD *)&rhs.source.duration.timescale = v48;
  CMTimeRangeGetEnd(&v44, &rhs.source);
  CMTimeMake(&rhs.source.start, 350, 1000);
  CMTimeSubtract(&v40, &v44, &rhs.source.start);
  v43 = v40;
  v42 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (CMTimeCompare(&v43, &v42) < 0)
    v40 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v35 = 1;
LABEL_50:
  *(_QWORD *)&v13 = v40.value;
  *a6 = v40;
  if (a5)
LABEL_46:
    *a5 = v35;
  return *(double *)&v13;
}

uint64_t figPlaybackCoordinator_addTimebaseNotificationListeners(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  FigPlaybackCoordinatorGetCMBaseObject(a1);
  result = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterAddWeakListener();
  }
  return result;
}

void figPlaybackCoordinator_updateHLSInterstitialStartTimes(uint64_t a1)
{
  _QWORD *DerivedStorage;
  uint64_t v2;
  const __CFAllocator *v3;
  uint64_t FigBaseObject;
  uint64_t (*v5)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  int v6;
  CFTypeRef v7;
  const void *v8;
  CFIndex Count;
  CFIndex v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  double v14;
  __CFArray *Mutable;
  CFIndex v16;
  const __CFDictionary *ValueAtIndex;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  CFTypeRef *started;
  CFTypeRef *v21;
  double v22;
  CFDictionaryRef v23;
  CFDictionaryRef v24;
  const void *v25;
  const void *v26;
  const void *v27;
  CMTime v28;
  CMTime time;
  Float64 seconds;
  char v31;
  char v32;
  CMTime v33;
  CFTypeRef cf[4];
  CFTypeRef v35;
  CMTime lhs;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v35 = 0;
  memset(cf, 0, sizeof(cf));
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v2 = DerivedStorage[5];
  if (!v2)
  {
LABEL_31:
    Mutable = 0;
LABEL_32:
    LOBYTE(v26) = 1;
    goto LABEL_33;
  }
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  FigBaseObject = FigPlaybackItemGetFigBaseObject(v2);
  v5 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
  if (!v5)
  {
    v8 = (const void *)DerivedStorage[58];
    DerivedStorage[58] = 0;
    v6 = -12782;
    if (!v8)
      goto LABEL_7;
    goto LABEL_6;
  }
  v6 = v5(FigBaseObject, CFSTR("interstitialEvents"), v3, cf);
  v7 = cf[0];
  v8 = (const void *)DerivedStorage[58];
  DerivedStorage[58] = cf[0];
  if (v7)
    CFRetain(v7);
  if (v8)
LABEL_6:
    CFRelease(v8);
LABEL_7:
  if (!cf[0])
    goto LABEL_31;
  Count = CFArrayGetCount((CFArrayRef)cf[0]);
  if (v6 || Count < 1)
    goto LABEL_31;
  v11 = Count;
  v33 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v12 = FigPlaybackItemGetFigBaseObject(DerivedStorage[5]);
  v13 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v13)
    goto LABEL_31;
  if (v13(v12, CFSTR("currentDateAndTime"), v3, &v35))
    goto LABEL_31;
  FigDateTimeMakeFromDictionary(v35, (uint64_t)&time);
  *(CMTime *)&cf[1] = time;
  if (!v32 || !v31)
    goto LABEL_31;
  CMTimeMakeWithSeconds(&v33, seconds, 1000000000);
  lhs = v33;
  v28 = *(CMTime *)&cf[1];
  CMTimeSubtract(&time, &lhs, &v28);
  v33 = time;
  v14 = CMTimeGetSeconds(&time);
  Mutable = CFArrayCreateMutable(v3, 0, MEMORY[0x1E0C9B378]);
  v16 = 0;
  do
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)cf[0], v16);
    v28.value = 0;
    if (!FigPlayerInterstitialEventCreateFromDictionary(0, ValueAtIndex, &v28.value))
    {
      FigPlayerInterstitialEventGetStartTime(v28.value, (uint64_t)&time);
      lhs.value = time.value;
      flags = time.flags;
      lhs.timescale = time.timescale;
      epoch = time.epoch;
      if ((time.flags & 1) == 0)
      {
        started = FigPlayerInterstitialEventCopyStartDate(v28.value);
        if (started)
        {
          v21 = started;
          v22 = MEMORY[0x194029D14]();
          CMTimeMakeWithSeconds(&time, v22 - v14, 1000000000);
          lhs.value = time.value;
          flags = time.flags;
          lhs.timescale = time.timescale;
          epoch = time.epoch;
          CFRelease(v21);
        }
      }
      time.value = lhs.value;
      time.timescale = lhs.timescale;
      time.flags = flags;
      time.epoch = epoch;
      v23 = CMTimeCopyAsDictionary(&time, v3);
      if (v23)
      {
        v24 = v23;
        CFArrayAppendValue(Mutable, v23);
        CFRelease(v24);
      }
      CFRelease((CFTypeRef)v28.value);
    }
    ++v16;
  }
  while (v11 != v16);
  if (!Mutable)
    goto LABEL_32;
  if (CFArrayGetCount(Mutable) >= 1)
  {
    v25 = (const void *)FigCFCopyCompactDescription();
    if (v25)
      CFRelease(v25);
    v26 = (const void *)DerivedStorage[57];
    DerivedStorage[57] = Mutable;
    CFRetain(Mutable);
    if (v26)
    {
      CFRelease(v26);
      LOBYTE(v26) = 0;
    }
    goto LABEL_35;
  }
  LOBYTE(v26) = 0;
LABEL_33:
  v27 = (const void *)DerivedStorage[57];
  if (v27)
  {
    CFRelease(v27);
    DerivedStorage[57] = 0;
  }
LABEL_35:
  if (v35)
    CFRelease(v35);
  if (cf[0])
    CFRelease(cf[0]);
  if ((v26 & 1) == 0)
    CFRelease(Mutable);
}

void figPlaybackCoordinator_recordCurrentHLSInterstitialEventCoordinationStatus(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v2;
  uint64_t FigBaseObject;
  unsigned int (*v4)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  const __CFDictionary *ValueAtIndex;
  const __CFString *v10;
  CFTypeRef cf;
  CFTypeRef cf1;

  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf1 = 0;
  v2 = *(_QWORD *)(DerivedStorage + 40);
  if (v2)
  {
    if (*(_DWORD *)(DerivedStorage + 56) != 10000)
      goto LABEL_17;
    FigBaseObject = FigPlaybackItemGetFigBaseObject(v2);
    v4 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
    if (!v4 || v4(FigBaseObject, CFSTR("currentInterstitialEvent"), *MEMORY[0x1E0C9AE00], &cf1))
      goto LABEL_17;
    if (cf1)
    {
      if (CFEqual(cf1, &stru_1E2FD85F8))
        goto LABEL_17;
      *(_BYTE *)(DerivedStorage + 480) = 1;
      v5 = *(const __CFArray **)(DerivedStorage + 464);
      if (!v5)
        goto LABEL_17;
      Count = CFArrayGetCount(v5);
      if (Count < 1)
        goto LABEL_17;
      v7 = Count;
      v8 = 0;
      while (1)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 464), v8);
        cf = 0;
        if (!FigPlayerInterstitialEventCreateFromDictionary(0, ValueAtIndex, (uint64_t *)&cf))
        {
          v10 = (const __CFString *)FigPlayerInterstitialEventCopyIdentifier((uint64_t)cf);
          if (CFStringCompare((CFStringRef)cf1, v10, 0) == kCFCompareEqualTo)
          {
            if (FigPlayerInterstitialEventContentMayVary((uint64_t)cf)
              || !FigPlayerInterstitialEventGetTimelineOccupancy((uint64_t)cf)
              || FigPlayerInterstitialEventIsPreRoll((uint64_t)cf))
            {
              *(_BYTE *)(DerivedStorage + 480) = 0;
            }
            if (cf)
              CFRelease(cf);
            if (v10)
              CFRelease(v10);
LABEL_17:
            if (cf1)
              CFRelease(cf1);
            return;
          }
          if (cf)
            CFRelease(cf);
          if (v10)
            CFRelease(v10);
        }
        if (v7 == ++v8)
          goto LABEL_17;
      }
    }
  }
}

void figPlaybackCoordinator_seekDidComplete(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  const void *v8;
  void (*v9)(const void *, uint64_t *);
  void (*v10)(uint64_t, __int128 *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  FigPlaybackCoordinatorGetCMBaseObject(a2);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = FigCFWeakReferenceHolderCopyReferencedObject();
  v13 = *MEMORY[0x1E0CA2E18];
  v14 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v12 = 0;
  if (v7)
  {
    v8 = (const void *)v7;
    if (*(_QWORD *)(DerivedStorage + 40) == a4)
    {
      FigCFDictionaryGetInt32IfPresent();
      v9 = *(void (**)(const void *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
      if (v9)
        v9(v8, &v12);
      v10 = *(void (**)(uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (v10)
        v10(a4, &v13);
      if (dword_1ECDC8900)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (*(_BYTE *)(DerivedStorage + 96))
      {
        figPlaybackCoordinator_resetTimelineCoordinatorStateToCurrentItemIdentifierAndTiming(a2);
      }
      else if (HIDWORD(v12))
      {
        if (HIDWORD(v12) == *(_DWORD *)(DerivedStorage + 236))
        {
          *(_DWORD *)(DerivedStorage + 236) = 0;
          figPlaybackCoordinator_checkForCommandCompletion((uint64_t)a2);
        }
      }
      figPlaybackCoordinator_updateInterstitialStateMachine(a2, 1);
    }
    else
    {
      FigSignalErrorAt();
    }
    CFRelease(v8);
  }
  else
  {
    FigSignalErrorAt();
  }
}

void figPlaybackCoordinator_seekWasCancelled(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  const void *v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  FigPlaybackCoordinatorGetCMBaseObject(a2);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v7)
  {
    v8 = (const void *)v7;
    if (*(_QWORD *)(DerivedStorage + 40) == a4)
    {
      FigCFDictionaryGetInt32IfPresent();
      if (!*(_DWORD *)(DerivedStorage + 236))
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        figPlaybackCoordinator_completePendingCommandAndRecordNewCallback(a2, 0, 0, 0);
      }
    }
    else
    {
      FigSignalErrorAt();
    }
    CFRelease(v8);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t figPlaybackCoordinator_coordinationIdentifierChanged(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  FigPlaybackCoordinatorGetCMBaseObject(a2);
  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 40) == a4)
    return figPlaybackCoordinator_resetTimelineCoordinatorStateToCurrentItemIdentifierAndTiming(a2);
  else
    return FigSignalErrorAt();
}

void figPlaybackCoordinator_playbackStalled(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  FigPlaybackCoordinatorGetCMBaseObject(a2);
  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 40) == a4)
    playbackCoordinator_beginSystemEventSuspensionForReason(a2, (const void *)*MEMORY[0x1E0CA53D0]);
  else
    FigSignalErrorAt();
}

void figPlaybackCoordinator_itemBecameLikelyToKeepUp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  const void *Value;
  const void *v11;
  int v12;
  const void *v13;
  const __CFAllocator *v14;
  CFAbsoluteTime Current;
  CFDateRef v16;

  FigPlaybackCoordinatorGetCMBaseObject(a2);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 40) != a4)
  {
    FigSignalErrorAt();
    return;
  }
  v7 = DerivedStorage;
  v8 = (const void *)*MEMORY[0x1E0CA53D0];
  FigPlaybackCoordinatorGetCMBaseObject(a2);
  v9 = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(v9 + 280));
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 288), v8);
  if (Value)
  {
    v11 = Value;
    CFRetain(Value);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v9 + 288), v8);
    MEMORY[0x19402EF04](*(_QWORD *)(v9 + 280));
    v12 = FigTimelineCoordinatorEndSuspension();
    CFRelease(v11);
    if (v12)
      return;
  }
  else
  {
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v9 + 288), v8);
    MEMORY[0x19402EF04](*(_QWORD *)(v9 + 280));
  }
  figPlaybackCoordinator_checkForCommandCompletion(a2);
  v13 = *(const void **)(v7 + 200);
  if (v13)
  {
    v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Current = CFAbsoluteTimeGetCurrent();
    v16 = CFDateCreate(v14, Current);
    *(_QWORD *)(v7 + 200) = v16;
    if (v16)
      CFRetain(v16);
    CFRelease(v13);
  }
}

uint64_t figPlaybackCoordinator_coordinatedPlaybackSupportChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage;
  _BOOL4 v9;

  FigPlaybackCoordinatorGetCMBaseObject(a2);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 40) != a4 || *(_DWORD *)(DerivedStorage + 56) != 10000 || !a5)
    return FigSignalErrorAt();
  v9 = CFDictionaryGetValue(a5, CFSTR("IsCoordinatedPlaybackSupported")) == (const void *)*MEMORY[0x1E0C9AE50];
  return figPlaybackCoordinator_beginOrEndCoordinatedPlaybackNotPossibleSuspension(a2, v9, 1);
}

void figPlaybackCoordinator_currentItemTimebaseDidChange(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t FigBaseObject;
  uint64_t (*v9)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  int v10;
  CFTypeRef v11;
  CFTypeRef v12;
  const void *v13;
  CFTypeRef v14;
  CFTypeRef cf;

  cf = 0;
  FigPlaybackCoordinatorGetCMBaseObject(a2);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 40) == a4)
  {
    v7 = DerivedStorage;
    FigBaseObject = FigPlaybackItemGetFigBaseObject(a4);
    v9 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
    if (v9)
    {
      v10 = v9(FigBaseObject, CFSTR("Timebase"), *MEMORY[0x1E0C9AE00], &cf);
      v11 = cf;
      if (!v10)
      {
        v12 = *(CFTypeRef *)(v7 + 48);
        if (cf != v12)
        {
          figPlaybackCoordinator_removeTimebaseNotificationListeners((uint64_t)a2, (uint64_t)v12);
          v13 = *(const void **)(v7 + 48);
          v14 = cf;
          *(_QWORD *)(v7 + 48) = cf;
          if (v14)
            CFRetain(v14);
          if (v13)
            CFRelease(v13);
          figPlaybackCoordinator_addTimebaseNotificationListeners((uint64_t)a2, *(_QWORD *)(v7 + 48));
          figPlaybackCoordinator_handleCurrentTimebaseRateChange(a2);
          v11 = cf;
        }
      }
      if (v11)
        CFRelease(v11);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

void figPlaybackCoordinator_hlsInterstitialEventsChanged(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  const void *v5;
  void (*v6)(const void *, _QWORD, const void **);
  const void *v7;
  const void *v8;

  FigPlaybackCoordinatorGetCMBaseObject(a2);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = FigCFWeakReferenceHolderCopyReferencedObject();
  v8 = 0;
  if (v4)
  {
    v5 = (const void *)v4;
    v6 = *(void (**)(const void *, _QWORD, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v6)
    {
      v6(v5, 0, &v8);
      v7 = v8;
    }
    else
    {
      v7 = 0;
    }
    if (v7 == *(const void **)(DerivedStorage + 40))
    {
      figPlaybackCoordinator_updateHLSInterstitialStartTimes(a2);
      v7 = v8;
      if (!v8)
        goto LABEL_8;
    }
    else if (!v7)
    {
LABEL_8:
      CFRelease(v5);
      return;
    }
    CFRelease(v7);
    goto LABEL_8;
  }
}

void figPlaybackCoordinator_hlsCurrentInterstitialEventChanged(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  const void *v5;
  void (*v6)(const void *, _QWORD, CFTypeRef *);
  CFTypeRef v7;
  CFTypeRef cf;

  FigPlaybackCoordinatorGetCMBaseObject(a2);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = FigCFWeakReferenceHolderCopyReferencedObject();
  cf = 0;
  if (v4)
  {
    v5 = (const void *)v4;
    v6 = *(void (**)(const void *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v6)
    {
      v6(v5, 0, &cf);
      v7 = cf;
    }
    else
    {
      v7 = 0;
    }
    if (!*(_BYTE *)(DerivedStorage + 488) && v7 == *(CFTypeRef *)(DerivedStorage + 40))
    {
      figPlaybackCoordinator_recordCurrentHLSInterstitialEventCoordinationStatus(a2);
      v7 = cf;
    }
    if (v7)
      CFRelease(v7);
    CFRelease(v5);
  }
}

void figPlaybackCoordinator_integratedTimelineOffsetsChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  FigPlaybackCoordinatorGetCMBaseObject(a2);
  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 40) == a4)
    figPlaybackCoordinator_setIntegratedTimelineOffsetTimesForItem(a2, a4);
  else
    FigSignalErrorAt();
}

void figPlaybackCoordinator_checkForCommandCompletion(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  double Rate;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  float v6;
  uint64_t FigBaseObject;
  void (*v8)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  NSObject *v9;
  CFTypeRef cf[25];

  cf[24] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  cf[0] = 0;
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 216))
    goto LABEL_16;
  v3 = DerivedStorage;
  Rate = CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 48));
  if (*(_DWORD *)(v3 + 236))
  {
    if (!dword_1ECDC8900)
      goto LABEL_16;
LABEL_4:
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_15:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_16;
  }
  v6 = Rate;
  if (*(float *)(v3 + 240) != v6)
  {
    if (!dword_1ECDC8900)
      goto LABEL_16;
    goto LABEL_4;
  }
  if (!*(_BYTE *)(v3 + 244))
    goto LABEL_12;
  FigBaseObject = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(v3 + 40));
  v8 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (v8)
    v8(FigBaseObject, CFSTR("WillKeepUpPrediction"), *MEMORY[0x1E0C9AE00], cf);
  if (FigCFEqual())
  {
LABEL_12:
    figPlaybackCoordinator_completePendingCommandAndRecordNewCallback(a1, 0, 0, 1);
    goto LABEL_16;
  }
  if (dword_1ECDC8900)
  {
    v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    goto LABEL_15;
  }
LABEL_16:
  if (cf[0])
    CFRelease(cf[0]);
}

void figPlaybackCoordinator_updateInterstitialStateMachine(const void *a1, int a2)
{
  uint64_t DerivedStorage;
  CMTimeEpoch v5;
  const __CFArray *v6;
  __int128 *v7;
  unsigned int v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  void (*v15)(uint64_t, __int128 *);
  __int128 v16;
  uint64_t v17;
  void (*v18)(uint64_t, CMTime *);
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  uint64_t v22;
  void (*v23)(uint64_t, CMTimeRange *);
  void (*v24)(const void *, CMTimeRange *);
  int isTimeInInterstitialRange;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  const __CFArray *v32;
  CFIndex Count;
  uint64_t v34;
  const void *v35;
  void (*v36)(const void *, float *);
  CFIndex v37;
  const __CFDictionary *ValueAtIndex;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  CMTime rhs;
  CMTime lhs;
  CMTime v52;
  CMTime v53;
  CMTime v54;
  CMTimeRange v55;
  CMTime v56;
  CMTime v57;
  CMTime v58;
  CMTime v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  CMTime v63;
  CMTime v64;
  CMTime start;
  CMTime time2;
  CMTimeRange time1;
  CMTimeRange range;
  float v69;

  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)&start.value = *MEMORY[0x1E0CA2E18];
  v5 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  start.epoch = v5;
  v49 = *(_OWORD *)&start.value;
  *(_OWORD *)&v64.value = *(_OWORD *)&start.value;
  v64.epoch = v5;
  v6 = *(const __CFArray **)(DerivedStorage + 360);
  if (v6 && CFArrayGetCount(v6) >= 1)
  {
    v7 = (__int128 *)(DerivedStorage + 384);
    v8 = *(_DWORD *)(DerivedStorage + 376);
    v9 = (__int128 *)MEMORY[0x1E0CA2E40];
    while (1)
    {
      do
      {
        while (1)
        {
          if (v8 < 2)
          {
            *(_OWORD *)&v63.value = v49;
            v63.epoch = v5;
            v17 = *(_QWORD *)(DerivedStorage + 40);
            v18 = *(void (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
            if (v18)
              v18(v17, &v63);
            v46 = v9[1];
            v48 = *v9;
            v60 = *v9;
            v61 = v46;
            v44 = v9[2];
            v62 = v44;
            FigPlaybackCoordinatorGetCMBaseObject(a1);
            v19 = CMBaseObjectGetDerivedStorage();
            *(_OWORD *)&range.start.value = v49;
            range.start.epoch = v5;
            LODWORD(v55.start.value) = 0;
            v20 = FigCFWeakReferenceHolderCopyReferencedObject();
            if (v20)
            {
              v21 = (const void *)v20;
              v22 = *(_QWORD *)(v19 + 40);
              v23 = *(void (**)(uint64_t, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
              if (v23)
                v23(v22, &range);
              v24 = *(void (**)(const void *, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
              if (!v24 || (v24(v21, &v55), *(float *)&v55.start.value == 0.0))
              {
                CFRelease(v21);
              }
              else
              {
                *(_OWORD *)&time1.start.value = *(_OWORD *)&range.start.value;
                time1.start.epoch = range.start.epoch;
                isTimeInInterstitialRange = figPlaybackCoordinator_isTimeInInterstitialRange((uint64_t)a1, &time1.start, &v60);
                CFRelease(v21);
                if (isTimeInInterstitialRange)
                {
                  if ((*(_BYTE *)(DerivedStorage + 396) & 1) == 0
                    || (*(_BYTE *)(DerivedStorage + 420) & 1) == 0
                    || *(_QWORD *)(DerivedStorage + 424)
                    || (*(_QWORD *)(DerivedStorage + 408) & 0x8000000000000000) != 0)
                  {
                    v26 = v61;
                    *v7 = v60;
                    *(_OWORD *)(DerivedStorage + 400) = v26;
                    *(_OWORD *)(DerivedStorage + 416) = v62;
                  }
                  v27 = *(_OWORD *)(DerivedStorage + 400);
                  *(_OWORD *)&range.start.value = *v7;
                  *(_OWORD *)&range.start.epoch = v27;
                  *(_OWORD *)&range.duration.timescale = *(_OWORD *)(DerivedStorage + 416);
                  CMTimeRangeGetEnd(&v59, &range);
                  CMTimeMake(&v58, 20, 1000);
                  CMTimeAdd(&v64, &v59, &v58);
                  range.start = v64;
                  figPlaybackCoordinator_primeNextInterstitialEventTimer((uint64_t)a1, (uint64_t)&range, 1);
                  *(_OWORD *)&range.start.value = *v7;
                  range.start.epoch = *(_QWORD *)(DerivedStorage + 400);
                  figPlaybackCoordinator_getGroupTimeFromPlayerTimeForInterstitials((uint64_t)a1, &range.start, &start);
                  FigPlaybackCoordinatorGetCMBaseObject(a1);
                  v28 = CMBaseObjectGetDerivedStorage();
                  if (!*(_QWORD *)(v28 + 432))
                  {
                    v29 = (_QWORD *)(v28 + 432);
                    if (!FigTimelineCoordinatorSuspensionCreate())
                    {
                      if (*v29)
                        figPlaybackCoordinator_BeginSuspension(a1);
                    }
                  }
                  v30 = 3;
LABEL_62:
                  *(_DWORD *)(DerivedStorage + 376) = v30;
                  return;
                }
              }
            }
            else
            {
              FigSignalErrorAt();
            }
            *(_OWORD *)&range.start.value = *v7;
            range.start.epoch = *(_QWORD *)(DerivedStorage + 400);
            figPlaybackCoordinator_getGroupTimeFromPlayerTimeForInterstitials((uint64_t)a1, &range.start, &start);
            CMTimeMake(&v56, 20, 1000);
            range.start = start;
            CMTimeAdd(&v57, &range.start, &v56);
            figPlaybackCoordinator_endDiscontinuitiyBasedInterstitialSuspensionProposingNewTime((uint64_t)a1);
            v54 = v63;
            FigPlaybackCoordinatorGetCMBaseObject(a1);
            v31 = CMBaseObjectGetDerivedStorage();
            v32 = *(const __CFArray **)(v31 + 360);
            if (v32)
              Count = CFArrayGetCount(v32);
            else
              Count = 0;
            *(_OWORD *)&v55.start.value = v48;
            *(_OWORD *)&v55.start.epoch = v46;
            *(_OWORD *)&v55.duration.timescale = v44;
            v69 = 0.0;
            v34 = FigCFWeakReferenceHolderCopyReferencedObject();
            if (v34)
            {
              v35 = (const void *)v34;
              v36 = *(void (**)(const void *, float *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
              if (v36)
                v36(v35, &v69);
              if (Count >= 1)
              {
                v37 = 0;
                while (1)
                {
                  memset(&range, 0, sizeof(range));
                  ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v31 + 360), v37);
                  CMTimeRangeMakeFromDictionary(&range, ValueAtIndex);
                  time1 = range;
                  time2 = v54;
                  if (figPlaybackCoordinator_timeRangeContainsTimeWithStartTolerance((uint64_t)&time1, &time2))
                  {
                    if (v69 == 0.0)
                      break;
                  }
                  *(_OWORD *)&time1.start.value = *(_OWORD *)&range.start.value;
                  time1.start.epoch = range.start.epoch;
                  time2 = v54;
                  if ((CMTimeCompare(&time1.start, &time2) & 0x80000000) == 0)
                    break;
                  if (Count == ++v37)
                    goto LABEL_56;
                }
                v55 = range;
              }
LABEL_56:
              CFRelease(v35);
            }
            else
            {
              FigSignalErrorAt();
            }
            v39 = *(_OWORD *)&v55.start.epoch;
            *v7 = *(_OWORD *)&v55.start.value;
            *(_OWORD *)(DerivedStorage + 400) = v39;
            *(_OWORD *)(DerivedStorage + 416) = *(_OWORD *)&v55.duration.timescale;
            if ((*(_BYTE *)(DerivedStorage + 396) & 1) == 0
              || (*(_BYTE *)(DerivedStorage + 420) & 1) == 0
              || *(_QWORD *)(DerivedStorage + 424)
              || (*(_QWORD *)(DerivedStorage + 408) & 0x8000000000000000) != 0)
            {
              figPlaybackCoordinator_clearInterstitialEventTimer((uint64_t)a1);
            }
            else
            {
              *(_OWORD *)&range.start.value = *v7;
              range.start.epoch = *(_QWORD *)(DerivedStorage + 400);
              figPlaybackCoordinator_primeNextInterstitialEventTimer((uint64_t)a1, (uint64_t)&range, 0);
            }
            v30 = 2;
            goto LABEL_62;
          }
          if (v8 != 2)
            break;
          if (a2 == 2)
            goto LABEL_23;
          v8 = 2;
          if (a2 == 1)
          {
            v13 = v9[1];
            *v7 = *v9;
            *(_OWORD *)(DerivedStorage + 400) = v13;
            *(_OWORD *)(DerivedStorage + 416) = v9[2];
            goto LABEL_23;
          }
        }
      }
      while (v8 != 3);
      v60 = v49;
      *(_QWORD *)&v61 = v5;
      v10 = *v9;
      v11 = v9[1];
      *(_OWORD *)&range.start.value = *v9;
      *(_OWORD *)&range.start.epoch = v11;
      v12 = v9[2];
      *(_OWORD *)&range.duration.timescale = v12;
      if (a2 == 1)
        break;
      if (a2 == 3)
      {
LABEL_18:
        if ((BYTE12(v60) & 1) != 0)
        {
          *(_OWORD *)&time1.start.value = v60;
          time1.start.epoch = v61;
          figPlaybackCoordinator_getGroupTimeFromPlayerTimeForInterstitials((uint64_t)a1, &time1.start, &start);
        }
        else
        {
          *(_OWORD *)&time1.start.value = *v7;
          time1.start.epoch = *(_QWORD *)(DerivedStorage + 400);
          figPlaybackCoordinator_getGroupTimeFromPlayerTimeForInterstitials((uint64_t)a1, &time1.start, &lhs);
          CMTimeMake(&rhs, 20, 1000);
          CMTimeAdd(&time1.start, &lhs, &rhs);
          start = time1.start;
        }
        time1.start = start;
        figPlaybackCoordinator_endDiscontinuitiyBasedInterstitialSuspensionProposingNewTime((uint64_t)a1);
        if (*(_BYTE *)(DerivedStorage + 96))
          figPlaybackCoordinator_resetTimelineCoordinatorStateToCurrentItemIdentifierAndTiming(a1);
LABEL_23:
        v8 = 1;
        *(_DWORD *)(DerivedStorage + 376) = 1;
      }
      else
      {
        v8 = 3;
      }
    }
    v43 = v12;
    v45 = v11;
    v47 = v10;
    v14 = *(_QWORD *)(DerivedStorage + 40);
    v15 = *(void (**)(uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v15)
      v15(v14, &v60);
    v16 = *(_OWORD *)(DerivedStorage + 400);
    *(_OWORD *)&time1.start.value = *v7;
    *(_OWORD *)&time1.start.epoch = v16;
    *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(DerivedStorage + 416);
    *(_OWORD *)&v55.start.value = v60;
    v55.start.epoch = v61;
    if (figPlaybackCoordinator_timeRangeContainsTimeWithStartTolerance((uint64_t)&time1, &v55.start))
      return;
    *(_OWORD *)&time1.start.value = v60;
    time1.start.epoch = v61;
    if (figPlaybackCoordinator_isTimeInInterstitialRange((uint64_t)a1, &time1.start, &range))
    {
      v40 = *(_OWORD *)&range.start.value;
      v41 = *(_OWORD *)&range.start.epoch;
      *v7 = *(_OWORD *)&range.start.value;
      *(_OWORD *)(DerivedStorage + 400) = v41;
      v42 = *(_OWORD *)&range.duration.timescale;
      *(_OWORD *)(DerivedStorage + 416) = *(_OWORD *)&range.duration.timescale;
      *(_OWORD *)&time1.start.value = v40;
      *(_OWORD *)&time1.start.epoch = v41;
      *(_OWORD *)&time1.duration.timescale = v42;
      CMTimeRangeGetEnd(&v53, &time1);
      CMTimeMake(&v52, 20, 1000);
      CMTimeAdd(&v64, &v53, &v52);
      time1.start = v64;
      figPlaybackCoordinator_primeNextInterstitialEventTimer((uint64_t)a1, (uint64_t)&time1, 1);
      return;
    }
    *v7 = v47;
    *(_OWORD *)(DerivedStorage + 400) = v45;
    *(_OWORD *)(DerivedStorage + 416) = v43;
    goto LABEL_18;
  }
}

void figPlaybackCoordinator_primeNextInterstitialEventTimer(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  dispatch_source_t v9;
  NSObject *v10;
  void *v11;
  OpaqueCMTimebase *v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CMTime v14;
  os_log_type_t type;
  int v16;
  CMTime fireTime;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  figPlaybackCoordinator_clearInterstitialEventTimer(a1);
  *(_OWORD *)&v14.value = *(_OWORD *)a2;
  v14.epoch = *(_QWORD *)(a2 + 16);
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  v7 = CMBaseObjectGetDerivedStorage();
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  v8 = CMBaseObjectGetDerivedStorage();
  v9 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 1uLL, *(dispatch_queue_t *)(v8 + 272));
  if (v9)
  {
    v10 = v9;
    v11 = (void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
    dispatch_set_context(v10, v11);
    dispatch_source_set_timer(v10, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x989680uLL);
    dispatch_source_set_event_handler_f(v10, (dispatch_function_t)figPlaybackCoordinator_interstitialTimerEventProc);
    dispatch_source_set_cancel_handler_f(v10, 0);
    dispatch_set_finalizer_f(v10, (dispatch_function_t)FigCFRelease_6);
    dispatch_resume(v10);
    if (CMTimebaseAddTimerDispatchSource(*(CMTimebaseRef *)(v7 + 48), v10)
      || (v12 = *(OpaqueCMTimebase **)(v7 + 48),
          fireTime = v14,
          CMTimebaseSetTimerDispatchSourceNextFireTime(v12, v10, &fireTime, 1u)))
    {
      CFRelease(v10);
    }
    else
    {
      *(_DWORD *)(v7 + 380) = a3;
      if (dword_1ECDC8900)
      {
        v16 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      *(_QWORD *)(DerivedStorage + 368) = v10;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

CMTime *figPlaybackCoordinator_getGroupTimeFromPlayerTimeForInterstitials@<X0>(uint64_t a1@<X0>, CMTime *a2@<X1>, CMTime *a3@<X8>)
{
  uint64_t DerivedStorage;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  __int128 v10;
  const __CFDictionary *ValueAtIndex;
  CMTime v13;
  CMTime rhs;
  CMTimeRange range;
  CMTime time1;
  CMTimeRange v17;
  CMTime v18;

  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = *(const __CFArray **)(DerivedStorage + 360);
  if (v6)
  {
    Count = CFArrayGetCount(v6);
    v18 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    if (Count >= 1)
    {
      v8 = Count;
      v9 = 0;
      v10 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
      *(_OWORD *)&v17.start.value = *MEMORY[0x1E0CA2E40];
      *(_OWORD *)&v17.start.epoch = v10;
      *(_OWORD *)&v17.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
      while (1)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 360), v9);
        CMTimeRangeMakeFromDictionary(&v17, ValueAtIndex);
        range = v17;
        CMTimeRangeGetEnd(&time1, &range);
        *(_OWORD *)&range.start.value = *(_OWORD *)&a2->value;
        range.start.epoch = a2->epoch;
        if (CMTimeCompare(&time1, &range.start) >= 1)
          break;
        range.start = v18;
        rhs = v17.duration;
        CMTimeAdd(&v18, &range.start, &rhs);
        if (v8 == ++v9)
          goto LABEL_10;
      }
      range = v17;
      rhs = *a2;
      if (figPlaybackCoordinator_timeRangeContainsTimeWithStartTolerance((uint64_t)&range, &rhs))
      {
        *(_OWORD *)&range.start.value = *(_OWORD *)&a2->value;
        range.start.epoch = a2->epoch;
        rhs = v17.start;
        CMTimeSubtract(&v13, &range.start, &rhs);
        range.start = v18;
        CMTimeAdd(&v18, &range.start, &v13);
      }
    }
  }
  else
  {
    v18 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  }
LABEL_10:
  *(_OWORD *)&v17.start.value = *(_OWORD *)&a2->value;
  v17.start.epoch = a2->epoch;
  range.start = v18;
  return CMTimeSubtract(a3, &v17.start, &range.start);
}

void figPlaybackCoordinator_endDiscontinuitiyBasedInterstitialSuspensionProposingNewTime(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v2;
  const void *v3;
  void (*v4)(const void *, int *);
  const void *v5;
  int v6;

  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 432))
  {
    v2 = DerivedStorage;
    v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    v6 = 0;
    v4 = *(void (**)(const void *, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (v4)
      v4(v3, &v6);
    if (v3)
      CFRelease(v3);
    FigTimelineCoordinatorEndSuspensionWeaklyIfNeededProposingNewRateAndTime();
    v5 = *(const void **)(v2 + 432);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(v2 + 432) = 0;
    }
  }
}

void figPlaybackCoordinator_clearInterstitialEventTimer(uint64_t a1)
{
  uint64_t DerivedStorage;
  const __CFArray *v2;
  NSObject *v3;

  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v2 = *(const __CFArray **)(DerivedStorage + 360);
  if (v2 && CFArrayGetCount(v2) >= 1)
  {
    v3 = *(NSObject **)(DerivedStorage + 368);
    if (v3)
    {
      dispatch_source_cancel(v3);
      dispatch_release(*(dispatch_object_t *)(DerivedStorage + 368));
      *(_QWORD *)(DerivedStorage + 368) = 0;
    }
  }
}

uint64_t figPlaybackCoordinator_timeRangeContainsTimeWithStartTolerance(uint64_t a1, CMTime *a2)
{
  __int128 v4;
  __int128 v6;
  CMTime time2;
  CMTime rhs;
  CMTime time1;
  CMTime time;
  CMTimeRange range;

  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&range.start.value = *(_OWORD *)a1;
  *(_OWORD *)&range.start.epoch = v4;
  *(_OWORD *)&range.duration.timescale = *(_OWORD *)(a1 + 32);
  time = *a2;
  if (CMTimeRangeContainsTime(&range, &time))
    return 1;
  CMTimeMake(&rhs, 40, 1000);
  *(_OWORD *)&range.start.value = *(_OWORD *)&a2->value;
  range.start.epoch = a2->epoch;
  CMTimeAdd(&time1, &range.start, &rhs);
  *(_OWORD *)&range.start.value = *(_OWORD *)a1;
  range.start.epoch = *(_QWORD *)(a1 + 16);
  if (CMTimeCompare(&time1, &range.start) < 0)
    return 0;
  v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&range.start.value = *(_OWORD *)a1;
  *(_OWORD *)&range.start.epoch = v6;
  *(_OWORD *)&range.duration.timescale = *(_OWORD *)(a1 + 32);
  CMTimeRangeGetEnd(&time2, &range);
  *(_OWORD *)&range.start.value = *(_OWORD *)&a2->value;
  range.start.epoch = a2->epoch;
  return CMTimeCompare(&range.start, &time2) >> 31;
}

uint64_t figPlaybackCoordinator_isTimeInInterstitialRange(uint64_t a1, CMTime *a2, _OWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t result;
  CFIndex Count;
  __int128 v8;
  CFIndex v9;
  CFIndex v10;
  const __CFDictionary *ValueAtIndex;
  __int128 v12;
  __int128 v13;
  CMTime v14;
  CMTimeRange v15;
  CMTimeRange v16;
  CMTimeRange v17;

  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = *(_QWORD *)(DerivedStorage + 360);
  if (!result)
  {
    v12 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
    *(_OWORD *)&v17.start.value = *MEMORY[0x1E0CA2E40];
    *(_OWORD *)&v17.start.epoch = v12;
    *(_OWORD *)&v17.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
    if (!a3)
      return result;
    goto LABEL_9;
  }
  Count = CFArrayGetCount((CFArrayRef)result);
  v8 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  *(_OWORD *)&v17.start.value = *MEMORY[0x1E0CA2E40];
  *(_OWORD *)&v17.start.epoch = v8;
  *(_OWORD *)&v17.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
  if (Count < 1)
  {
LABEL_6:
    result = 0;
    if (!a3)
      return result;
    goto LABEL_9;
  }
  v9 = Count;
  v10 = 0;
  while (1)
  {
    memset(&v16, 0, sizeof(v16));
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 360), v10);
    CMTimeRangeMakeFromDictionary(&v16, ValueAtIndex);
    v15 = v16;
    v14 = *a2;
    if (figPlaybackCoordinator_timeRangeContainsTimeWithStartTolerance((uint64_t)&v15, &v14))
      break;
    if (v9 == ++v10)
      goto LABEL_6;
  }
  v17 = v16;
  result = 1;
  if (a3)
  {
LABEL_9:
    v13 = *(_OWORD *)&v17.start.epoch;
    *a3 = *(_OWORD *)&v17.start.value;
    a3[1] = v13;
    a3[2] = *(_OWORD *)&v17.duration.timescale;
  }
  return result;
}

void figPlaybackCoordinator_interstitialTimerEventProc()
{
  uint64_t v0;
  const void *v1;
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __int128 v4;
  CFStringRef v5;
  uint64_t v6;
  CMTimeRange v7;

  v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    v1 = (const void *)v0;
    FigPlaybackCoordinatorGetCMBaseObject(v0);
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v4 = *(_OWORD *)(DerivedStorage + 400);
    *(_OWORD *)&v7.start.value = *(_OWORD *)(DerivedStorage + 384);
    *(_OWORD *)&v7.start.epoch = v4;
    *(_OWORD *)&v7.duration.timescale = *(_OWORD *)(DerivedStorage + 416);
    v5 = CMTimeRangeCopyDescription(v3, &v7);
    CFRelease(v5);
    if (*(_DWORD *)(DerivedStorage + 380))
      v6 = 3;
    else
      v6 = 2;
    figPlaybackCoordinator_updateInterstitialStateMachine(v1, v6);
    CFRelease(v1);
  }
}

uint64_t figPlaybackCoordinator_BeginSuspension(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  _BYTE *v4;
  CFTypeRef v5;

  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = FigTimelineCoordinatorBeginSuspension();
  if (!(_DWORD)v3)
  {
    v4 = malloc_type_malloc(0x10uLL, 0x10200405F07FB98uLL);
    if (a1)
      v5 = CFRetain(a1);
    else
      v5 = 0;
    *(_QWORD *)v4 = v5;
    v4[8] = 1;
    dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 272), v4, (dispatch_function_t)playbackCoordinator_completePendingStartupTaskOnQueue);
  }
  return v3;
}

void playbackCoordinator_completePendingStartupTaskOnQueue(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)a1;
  playbackCoordinator_completePendingStartupTask(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
  if (v2)
    CFRelease(v2);
  free((void *)a1);
}

void playbackCoordinator_beginSystemEventSuspensionForReason(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;

  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 280));
  if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(DerivedStorage + 288), a2))
  {
    if (FigTimelineCoordinatorSuspensionCreate())
      return;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 288), a2, 0);
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 280));
}

void figPlaybackCoordinator_handleCurrentTimebaseRateChange(const void *a1)
{
  uint64_t DerivedStorage;
  double Rate;
  float v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Rate = CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 48));
  if (*(_BYTE *)(DerivedStorage + 96))
  {
    v4 = Rate;
    if (dword_1ECDC8900)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v4 != 0.0)
      figPlaybackCoordinator_resetTimelineCoordinatorStateToCurrentItemIdentifierAndTiming(a1);
  }
  else if (*(_QWORD *)(DerivedStorage + 216))
  {
    figPlaybackCoordinator_checkForCommandCompletion((uint64_t)a1);
  }
}

void figPlaybackCoordinator_currentItemTimebaseRateDidChange(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  FigPlaybackCoordinatorGetCMBaseObject(a2);
  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 48) == a4)
    figPlaybackCoordinator_handleCurrentTimebaseRateChange(a2);
  else
    FigSignalErrorAt();
}

uint64_t figPlaybackCoordinator_CopyParticipantSnapshots(uint64_t a1)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  CMBaseObjectGetDerivedStorage();
  return FigTimelineCoordinatorCopyParticipantSnapshots();
}

double figPlaybackCoordinator_getGroupTimeFromPlayerTime@<D0>(uint64_t a1@<X0>, CMTime *a2@<X1>, CMTime *a3@<X8>)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  __int128 v8;
  const __CFArray *v9;
  char v10;
  int v11;
  const __CFArray *v12;
  CFIndex Count;
  char v14;
  CMTime v16;
  CMTime lhs;

  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = DerivedStorage;
  a3->epoch = a2->epoch;
  v8 = *(_OWORD *)&a2->value;
  *(_OWORD *)&a3->value = *(_OWORD *)&a2->value;
  if ((*(_BYTE *)(DerivedStorage + 336) & 1) != 0)
  {
    lhs = *a2;
    v16 = *(CMTime *)(DerivedStorage + 324);
    CMTimeAdd(a3, &lhs, &v16);
    v10 = 1;
    v11 = 1;
  }
  else
  {
    v9 = *(const __CFArray **)(DerivedStorage + 360);
    if (v9 && CFArrayGetCount(v9) >= 1)
    {
      lhs = *a2;
      figPlaybackCoordinator_getGroupTimeFromPlayerTimeForInterstitials(a1, &lhs, a3);
      v10 = 0;
      v11 = 0;
    }
    else
    {
      v11 = 0;
      v10 = 1;
    }
  }
  v12 = *(const __CFArray **)(v7 + 472);
  if (v12)
  {
    Count = CFArrayGetCount(v12);
    v14 = v10 ^ 1;
    if (Count < 1)
      v14 = 1;
    if ((v14 & 1) == 0)
    {
      v16 = *a3;
      figPlaybackCoordinator_getGroupTimeFromPlayerTimeOnIntegratedTimeline(a1, (__int128 *)&v16.value, v11, &lhs);
      *(_QWORD *)&v8 = lhs.value;
      *a3 = lhs;
    }
  }
  return *(double *)&v8;
}

uint64_t figPlaybackCoordinator_copyGroupTimebaseFromCurrentItemTimebase(uint64_t a1, CMTimebaseRef *a2)
{
  uint64_t DerivedStorage;
  OpaqueCMTimebase *v5;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  const __CFArray *v8;
  int v9;
  char v10;
  const __CFArray *v11;
  CFIndex Count;
  char v13;
  OpaqueCMTimebase *v14;
  CMTime v16;
  CMTime v17;
  CMTime rhs;
  CMTime lhs;
  CMTime v20;
  CMTime v21;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  value = *MEMORY[0x1E0CA2E18];
  timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  v5 = *(OpaqueCMTimebase **)(DerivedStorage + 48);
  if (v5)
  {
    CMTimebaseGetTime(&v21, v5);
    value = v21.value;
    flags = v21.flags;
    timescale = v21.timescale;
    epoch = v21.epoch;
  }
  else
  {
    flags = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
    epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  }
  v21 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if ((*(_BYTE *)(DerivedStorage + 336) & 1) != 0)
  {
    v21 = *(CMTime *)(DerivedStorage + 324);
    if ((flags & 1) == 0)
      goto LABEL_19;
    v9 = 1;
  }
  else
  {
    if ((flags & 1) == 0)
      goto LABEL_19;
    v8 = *(const __CFArray **)(DerivedStorage + 360);
    if (v8 && CFArrayGetCount(v8) >= 1)
    {
      memset(&v20, 0, sizeof(v20));
      lhs.value = value;
      lhs.timescale = timescale;
      lhs.flags = flags;
      lhs.epoch = epoch;
      figPlaybackCoordinator_getGroupTimeFromPlayerTimeForInterstitials(a1, &lhs, &v20);
      lhs = v20;
      rhs.value = value;
      rhs.timescale = timescale;
      rhs.flags = flags;
      rhs.epoch = epoch;
      CMTimeSubtract(&v21, &lhs, &rhs);
      v9 = 0;
      v10 = 0;
      goto LABEL_13;
    }
    v9 = 0;
  }
  v10 = 1;
LABEL_13:
  v11 = *(const __CFArray **)(DerivedStorage + 472);
  if (v11)
  {
    Count = CFArrayGetCount(v11);
    v13 = v10 ^ 1;
    if (Count < 1)
      v13 = 1;
    if ((v13 & 1) == 0)
    {
      memset(&v20, 0, sizeof(v20));
      lhs.value = value;
      lhs.timescale = timescale;
      lhs.flags = flags;
      lhs.epoch = epoch;
      figPlaybackCoordinator_getGroupTimeFromPlayerTimeOnIntegratedTimeline(a1, (__int128 *)&lhs.value, v9, &v20);
      if ((v20.flags & 1) != 0)
      {
        memset(&lhs, 0, sizeof(lhs));
        rhs = v20;
        v17.value = value;
        v17.timescale = timescale;
        v17.flags = flags;
        v17.epoch = epoch;
        CMTimeSubtract(&lhs, &rhs, &v17);
        v17 = v21;
        v16 = lhs;
        CMTimeAdd(&rhs, &v17, &v16);
        v21 = rhs;
      }
    }
  }
LABEL_19:
  v14 = *(OpaqueCMTimebase **)(DerivedStorage + 48);
  v20 = v21;
  return figPlaybackCoordinator_copyTimebaseAndAddOffset(v14, &v20, a2);
}

uint64_t figPlaybackCoordinator_getGroupTimeFromPlayerTimeOnIntegratedTimeline@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, int a3@<W2>, CMTime *a4@<X8>)
{
  uint64_t DerivedStorage;
  _OWORD *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  CFIndex v12;
  const __CFDictionary *ValueAtIndex;
  __int128 v14;
  CMTime v15;
  CMTime v16;
  CMTime time2;
  CMTime time1;
  CMTimeRange lhs;
  CMTime rhs;
  CMTime v21;
  CMTimeRange source;
  CMTimeMapping v23;

  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = (_OWORD *)MEMORY[0x1E0CA2E18];
  a4->epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  *(_OWORD *)&a4->value = *v8;
  result = *(_QWORD *)(DerivedStorage + 472);
  if (result)
  {
    result = CFArrayGetCount((CFArrayRef)result);
    v10 = result - 1;
    if (result >= 1)
    {
      v11 = result;
      v12 = 0;
      while (1)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 472), v12);
        memset(&v23, 0, sizeof(v23));
        CMTimeMappingMakeFromDictionary(&v23, ValueAtIndex);
        source = v23.source;
        *(_OWORD *)&lhs.start.value = *a2;
        memset(&v21, 0, sizeof(v21));
        lhs.start.epoch = *((_QWORD *)a2 + 2);
        rhs = v23.source.start;
        CMTimeSubtract(&v21, &lhs.start, &rhs);
        *(_OWORD *)&lhs.start.value = *(_OWORD *)&source.start.value;
        *(_OWORD *)&lhs.start.epoch = *(_OWORD *)&source.start.epoch;
        v14 = *a2;
        *(_OWORD *)&lhs.duration.timescale = *(_OWORD *)&source.duration.timescale;
        *(_OWORD *)&rhs.value = v14;
        rhs.epoch = *((_QWORD *)a2 + 2);
        if (CMTimeRangeContainsTime(&lhs, &rhs))
          break;
        lhs.start = v21;
        CMTimeAbsoluteValue(&time1, &lhs.start);
        CMTimeMake(&time2, 350, 1000);
        if (CMTimeCompare(&time1, &time2) < 0)
          break;
        lhs = source;
        CMTimeRangeGetEnd(&v16, &lhs);
        *(_OWORD *)&lhs.start.value = *a2;
        lhs.start.epoch = *((_QWORD *)a2 + 2);
        result = CMTimeCompare(&v16, &lhs.start);
        if (!(_DWORD)result)
          break;
        if (a3)
        {
          if (v10 == v12 && !*(_BYTE *)(DerivedStorage + 488))
          {
            lhs = source;
            CMTimeRangeGetEnd(&v15, &lhs);
            *(_OWORD *)&lhs.start.value = *a2;
            lhs.start.epoch = *((_QWORD *)a2 + 2);
            result = CMTimeCompare(&lhs.start, &v15);
            if ((int)result >= 1)
              break;
          }
        }
        if (v11 == ++v12)
          return result;
      }
      *(_OWORD *)&lhs.start.value = *(_OWORD *)&v23.target.start.value;
      lhs.start.epoch = v23.target.start.epoch;
      rhs = v21;
      return (uint64_t)CMTimeAdd(a4, &lhs.start, &rhs);
    }
  }
  return result;
}

uint64_t figPlaybackCoordinator_copyTimebaseAndAddOffset(OpaqueCMTimebase *a1, CMTime *a2, CMTimebaseRef *a3)
{
  OpaqueCMTimebase *v6;
  OpaqueCMTimebase *v7;
  CFTypeID v8;
  uint64_t RelativeRateAndAnchorTime;
  OpaqueCMTimebase *v10;
  Float64 v11;
  uint64_t v12;
  CMTime v14;
  CMTime lhs;
  CMTime timebaseTime;
  CMTime outRelativeToClockOrTimebaseAnchorTime;
  CMTime outOfClockOrTimebaseAnchorTime;
  Float64 outRelativeRate;
  CMTimebaseRef timebaseOut;

  timebaseOut = 0;
  v6 = (OpaqueCMTimebase *)CMTimebaseCopySource(a1);
  v7 = v6;
  outRelativeRate = 0.0;
  outOfClockOrTimebaseAnchorTime = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  outRelativeToClockOrTimebaseAnchorTime = outOfClockOrTimebaseAnchorTime;
  if (a1)
  {
    if (v6 && (v8 = CFGetTypeID(v6), v8 == CMTimebaseGetTypeID()))
    {
      RelativeRateAndAnchorTime = CMTimebaseCreateWithSourceTimebase((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v7, &timebaseOut);
      if ((_DWORD)RelativeRateAndAnchorTime)
        goto LABEL_9;
    }
    else
    {
      RelativeRateAndAnchorTime = CMTimebaseCreateWithSourceClock((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v7, &timebaseOut);
      if ((_DWORD)RelativeRateAndAnchorTime)
        goto LABEL_9;
    }
    RelativeRateAndAnchorTime = CMSyncGetRelativeRateAndAnchorTime(a1, v7, &outRelativeRate, &outOfClockOrTimebaseAnchorTime, &outRelativeToClockOrTimebaseAnchorTime);
    if (!(_DWORD)RelativeRateAndAnchorTime)
    {
      v10 = timebaseOut;
      v11 = outRelativeRate;
      lhs = outOfClockOrTimebaseAnchorTime;
      v14 = *a2;
      CMTimeAdd(&timebaseTime, &lhs, &v14);
      lhs = outRelativeToClockOrTimebaseAnchorTime;
      RelativeRateAndAnchorTime = CMTimebaseSetRateAndAnchorTime(v10, v11, &timebaseTime, &lhs);
    }
LABEL_9:
    v12 = RelativeRateAndAnchorTime;
    if (!a3)
      goto LABEL_11;
    goto LABEL_10;
  }
  v12 = 0;
  if (a3)
LABEL_10:
    *a3 = timebaseOut;
LABEL_11:
  if (v7)
    CFRelease(v7);
  return v12;
}

uint64_t figPlaybackCoordinator_playerHasPlaybackStalled()
{
  FigCFDictionaryGetInt32IfPresent();
  return 0;
}

uint64_t figPlaybackCoordinator_playerIsAudioSessionInterrupted()
{
  FigCFDictionaryGetInt32IfPresent();
  return 0;
}

void figPlaybackCoordinator_timelineCoordinatorParticipantsDidChangeDispatch(uint64_t *a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  const __CFDictionary *v4;
  BOOL v5;
  const void *v6;
  const __CFArray *Value;
  const __CFArray *v8;
  CFTypeID v9;
  CFIndex Count;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, const __CFString *, uint64_t);
  void (*v14)(const void *, float *);
  void (*v15)(const void *, _QWORD, CFTypeRef *);
  uint64_t v16;
  const __CFString *v17;
  uint64_t v18;
  uint64_t FigBaseObject;
  void (*v20)(uint64_t, const __CFString *, _QWORD);
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, const __CFString *, _QWORD);
  const void *v24;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  float v26;
  CFTypeRef v27;
  unsigned int (*v28)(const void *, CFTypeRef, float);
  float v29;
  CFTypeRef cf;
  CFTypeRef v31[23];

  v31[22] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  FigPlaybackCoordinatorGetCMBaseObject(*a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  cf = 0;
  v31[0] = 0;
  v4 = (const __CFDictionary *)a1[1];
  if (v4)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (v5)
    goto LABEL_28;
  v6 = (const void *)*MEMORY[0x1E0CA5338];
  if (CFDictionaryContainsKey(v4, (const void *)*MEMORY[0x1E0CA5338]))
  {
    Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a1[1], v6);
    if (!Value)
      goto LABEL_28;
    v8 = Value;
    v9 = CFGetTypeID(Value);
    if (v9 != CFArrayGetTypeID())
      goto LABEL_28;
  }
  else
  {
    v8 = 0;
  }
  Count = CFArrayGetCount(v8);
  if (Count < 1)
  {
    *(_BYTE *)(DerivedStorage + 96) = 1;
    FigBaseObject = FigPlayerGetFigBaseObject(v3);
    v20 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v20)
      v20(FigBaseObject, CFSTR("ParticipatingInCoordinatedPlayback"), *MEMORY[0x1E0C9AE40]);
    v21 = *(_QWORD *)(DerivedStorage + 40);
    if (v21)
    {
      v22 = FigPlaybackItemGetFigBaseObject(v21);
      v23 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v23)
        v23(v22, CFSTR("TransientTimebaseForCoordinatedPlaybackSynchronization"), 0);
    }
    v16 = *a1;
    v17 = CFSTR("CPCntOfParts");
    v18 = Count;
    goto LABEL_27;
  }
  if (!*(_BYTE *)(DerivedStorage + 96))
  {
LABEL_20:
    figPlaybackCoordinator_updateReportingStats(*a1, CFSTR("CPCntOfParts"), Count);
    v16 = *a1;
    v17 = CFSTR("CPPlayIsParticipating");
    v18 = 1;
LABEL_27:
    figPlaybackCoordinator_updateReportingStats(v16, v17, v18);
    goto LABEL_28;
  }
  v29 = 0.0;
  *(_BYTE *)(DerivedStorage + 96) = 0;
  v11 = *MEMORY[0x1E0C9AE50];
  v12 = FigPlayerGetFigBaseObject(v3);
  v13 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v13)
    v13(v12, CFSTR("ParticipatingInCoordinatedPlayback"), v11);
  FigPlaybackCoordinatorGetCMBaseObject(*a1);
  CMBaseObjectGetDerivedStorage();
  v14 = *(void (**)(const void *, float *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v14)
    v14(v3, &v29);
  v15 = *(void (**)(const void *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v15)
  {
    v15(v3, 0, &cf);
    v15 = (void (*)(const void *, _QWORD, CFTypeRef *))cf;
  }
  if (v15 != *(void (**)(const void *, _QWORD, CFTypeRef *))(DerivedStorage + 40)
    || v29 == 0.0
    || v29 == *(float *)(DerivedStorage + 168))
  {
    FigTimelineCoordinatorReapplyGroupStateViaTimelineControl();
    goto LABEL_20;
  }
  if (!FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E0C9AE00], 33, (CFMutableDictionaryRef *)v31))
  {
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    if (dword_1ECDC8900)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v26 = v29;
    v27 = v31[0];
    v28 = *(unsigned int (**)(const void *, CFTypeRef, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 104);
    if (v28)
    {
      if (!v28(v3, v27, v26))
        goto LABEL_20;
    }
  }
LABEL_28:
  if (cf)
    CFRelease(cf);
  if (v3)
    CFRelease(v3);
  if (*a1)
    CFRelease((CFTypeRef)*a1);
  v24 = (const void *)a1[1];
  if (v24)
    CFRelease(v24);
  if (v31[0])
    CFRelease(v31[0]);
  free(a1);
}

uint64_t figPlaybackCoordinator_updateReportingStats(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  __CFString *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v10;
  uint64_t (*v11)(uint64_t, __CFString *, __CFString *, uint64_t);

  FigPlaybackCoordinatorGetCMBaseObject(a1);
  result = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(result + 312))
    return result;
  v6 = result;
  v7 = CFSTR("CPPlayRemoteSetRate");
  result = CFStringCompare(a2, CFSTR("CPPlayRemoteSetRate"), 0);
  if (!result)
    goto LABEL_10;
  v7 = CFSTR("CPPlayRemoteSeek");
  result = CFStringCompare(a2, CFSTR("CPPlayRemoteSeek"), 0);
  if (!result)
    goto LABEL_10;
  v7 = CFSTR("CPCntOfParts");
  result = CFStringCompare(a2, CFSTR("CPCntOfParts"), 0);
  if (!result)
  {
    v10 = *(_QWORD *)(v6 + 312);
    if (!v10)
      return result;
    result = CMBaseObjectGetVTable();
    v11 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(result + 16) + 40);
    if (!v11)
      return result;
    return v11(v10, CFSTR("playbackCoordinatorStats"), v7, a3);
  }
  v7 = CFSTR("CPPlayWaitTime");
  result = CFStringCompare(a2, CFSTR("CPPlayWaitTime"), 0);
  if (!result)
  {
LABEL_10:
    v10 = *(_QWORD *)(v6 + 312);
    if (!v10)
      return result;
    result = CMBaseObjectGetVTable();
    v11 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(result + 16) + 32);
    if (!v11)
      return result;
    return v11(v10, CFSTR("playbackCoordinatorStats"), v7, a3);
  }
  result = CFStringCompare(a2, CFSTR("CPPlayIsParticipating"), 0);
  if (!result)
  {
    v8 = *(_QWORD *)(v6 + 312);
    if (v8)
    {
      result = CMBaseObjectGetVTable();
      v9 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(result + 16)
                                                                                          + 56);
      if (v9)
        return v9(v8, CFSTR("playbackCoordinatorStats"), CFSTR("CPPlayIsParticipating"), a3, 0);
    }
  }
  return result;
}

uint64_t figPlaybackCoordinator_EndSuspension(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v2;

  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 64));
  v2 = FigTimelineCoordinatorEndSuspension();
  if (!(_DWORD)v2 && !FigTimelineCoordinatorIsSuspended())
    *(_BYTE *)(DerivedStorage + 320) = 1;
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 64));
  return v2;
}

uint64_t figPlaybackCoordinator_EndSuspensionProposingNewTime(const void *a1, const void *a2, __int128 *a3)
{
  uint64_t DerivedStorage;
  _QWORD *v7;
  CFTypeRef v8;
  CFTypeRef v9;
  __int128 v10;

  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = malloc_type_malloc(0x28uLL, 0x1020040E349F4B1uLL);
  if (a1)
    v8 = CFRetain(a1);
  else
    v8 = 0;
  *v7 = v8;
  if (a2)
    v9 = CFRetain(a2);
  else
    v9 = 0;
  v7[1] = v9;
  v10 = *a3;
  v7[4] = *((_QWORD *)a3 + 2);
  *((_OWORD *)v7 + 1) = v10;
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 272), v7, (dispatch_function_t)figPlaybackCoordinator_EndSuspensionProposingNewTimeOnQueue);
  return 0;
}

uint64_t figPlaybackCoordinator_SetWeakMediumAndCallbacks(uint64_t a1)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  CMBaseObjectGetDerivedStorage();
  return FigTimelineCoordinatorSetWeakMediumAndCallbacks();
}

uint64_t figPlaybackCoordinator_HandleAssignmentOfUUIDToLocalParticipantByMedium(uint64_t a1)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  CMBaseObjectGetDerivedStorage();
  return FigTimelineCoordinatorHandleAssignmentOfUUIDToLocalParticipantByMedium();
}

uint64_t figPlaybackCoordinator_CopyParticipantSnapshotForUUID(uint64_t a1)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  CMBaseObjectGetDerivedStorage();
  return FigTimelineCoordinatorCopyParticipantSnapshotForUUID();
}

uint64_t figPlaybackCoordinator_HandleRemovalOfParticipantStateFromMedium(uint64_t a1)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  CMBaseObjectGetDerivedStorage();
  return FigTimelineCoordinatorHandleRemovalOfParticipantStateFromMedium();
}

uint64_t figPlaybackCoordinator_GetExpectedTimeAtHostTime(uint64_t a1)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  CMBaseObjectGetDerivedStorage();
  return FigTimelineCoordinatorGetExpectedTimeAtHostTime();
}

uint64_t figPlaybackCoordinator_HandleUpdatedTimelineStateFromMedium(uint64_t a1)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  CMBaseObjectGetDerivedStorage();
  return FigTimelineCoordinatorHandleUpdatedTimelineStateFromMedium();
}

uint64_t figPlaybackCoordinator_HandleReplacementOfAllParticipantStatesFromMedium(uint64_t a1)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  CMBaseObjectGetDerivedStorage();
  return FigTimelineCoordinatorHandleReplacementOfAllParticipantStatesFromMedium();
}

uint64_t figPlaybackCoordinator_HandleUpdatedParticipantStateFromMedium(uint64_t a1)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  CMBaseObjectGetDerivedStorage();
  return FigTimelineCoordinatorHandleUpdatedParticipantStateFromMedium();
}

uint64_t figPlaybackCoordinator_DisconnectFromMedium(uint64_t a1)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  CMBaseObjectGetDerivedStorage();
  return FigTimelineCoordinatorDisconnectFromMedium();
}

uint64_t figPlaybackCoordinator_StopTrackingPlayer(void *a1)
{
  uint64_t DerivedStorage;

  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
    CFRetain(a1);
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 272), a1, (dispatch_function_t)playbackCoordinator_stopTrackingPlayerOnQueue);
  return 0;
}

uint64_t figPlaybackCoordinator_ResetGroupTimelineExpectations(uint64_t a1)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  CMBaseObjectGetDerivedStorage();
  return FigTimelineCoordinatorResetGroupTimelineExpectations();
}

void figPlaybackCoordinator_EndSuspensionProposingNewTimeOnQueue(uint64_t a1)
{
  CFTypeRef v2;
  const void *v3;
  __int128 v4;
  uint64_t DerivedStorage;
  __CFArray *Mutable;
  const void *v7;
  const void *v8;
  CMTime v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  CMTime v13;

  v2 = *(CFTypeRef *)a1;
  v3 = *(const void **)(a1 + 8);
  v13 = *(CMTime *)(a1 + 16);
  v4 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  v10 = *MEMORY[0x1E0CA2E40];
  v11 = v4;
  v12 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
  FigPlaybackCoordinatorGetCMBaseObject(v2);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  CFArrayAppendValue(Mutable, v3);
  FigPlaybackCoordinatorGetCMBaseObject(v2);
  if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 432)
    || (v9 = v13, !figPlaybackCoordinator_isTimeInCurrentlyPlayingInterstitial((uint64_t)v2, &v9)))
  {
    v9 = v13;
    if (figPlaybackCoordinator_isTimeInInterstitialRange((uint64_t)v2, &v9, &v10))
    {
      *(_OWORD *)&v13.value = v10;
      v13.epoch = v11;
    }
  }
  FigPlaybackCoordinatorGetCMBaseObject(v2);
  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 432))
  {
    v9 = v13;
    if (!figPlaybackCoordinator_isTimeInCurrentlyPlayingInterstitial((uint64_t)v2, &v9))
    {
      CFArrayAppendValue(Mutable, *(const void **)(DerivedStorage + 432));
      v7 = *(const void **)(DerivedStorage + 432);
      if (v7)
      {
        CFRelease(v7);
        *(_QWORD *)(DerivedStorage + 432) = 0;
      }
    }
  }
  v9 = v13;
  figPlaybackCoordinator_getGroupTimeFromPlayerTime((uint64_t)v2, &v9, &v13);
  v9 = v13;
  FigTimelineCoordinatorEndSuspensionsProposingNewTime();
  v8 = *(const void **)(a1 + 8);
  if (v8)
    CFRelease(v8);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  if (Mutable)
    CFRelease(Mutable);
  free((void *)a1);
}

uint64_t figPlaybackCoordinator_isTimeInCurrentlyPlayingInterstitial(uint64_t a1, CMTime *a2)
{
  _OWORD *DerivedStorage;
  __int128 v4;
  CMTime v6;
  _OWORD v7[3];

  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = (_OWORD *)CMBaseObjectGetDerivedStorage();
  v4 = DerivedStorage[25];
  v7[0] = DerivedStorage[24];
  v7[1] = v4;
  v7[2] = DerivedStorage[26];
  v6 = *a2;
  return figPlaybackCoordinator_timeRangeContainsTimeWithStartTolerance((uint64_t)v7, &v6);
}

void playbackCoordinator_stopTrackingPlayerOnQueue(const void *a1)
{
  figPlaybackCoordinator_transitionToNewCurrentItem(a1, 0);
  if (a1)
    CFRelease(a1);
}

BOOL playbackCoordinator_systemEventSuspensionsActive(uint64_t a1)
{
  uint64_t DerivedStorage;
  _BOOL8 v2;

  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 280));
  v2 = FigCFDictionaryGetCount() > 0;
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 280));
  return v2;
}

void playbackCoordinator_setReferenceTimebaseAndCompleteStartupTask(CFTypeRef *a1)
{
  uint64_t v2;
  uint64_t DerivedStorage;
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t FigBaseObject;
  void (*v9)(uint64_t, const __CFString *, uint64_t);
  uint64_t v10;
  void (*v11)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef cf;

  v2 = (uint64_t)*a1;
  FigPlaybackCoordinatorGetCMBaseObject(*a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = FigCFWeakReferenceHolderCopyReferencedObject();
  v5 = (const void *)v4;
  if (*(_DWORD *)(DerivedStorage + 176) == *((_DWORD *)a1 + 2))
  {
    if (v4)
    {
      v6 = *(_QWORD *)(DerivedStorage + 40);
      if (v6 && *(_DWORD *)(DerivedStorage + 56) == 10000)
      {
        v7 = *(_QWORD *)(DerivedStorage + 160);
        FigBaseObject = FigPlaybackItemGetFigBaseObject(v6);
        v9 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 56);
        if (v9)
          v9(FigBaseObject, CFSTR("TransientTimebaseForCoordinatedPlaybackSynchronization"), v7);
        cf = 0;
        v10 = FigPlayerGetFigBaseObject(v5);
        v11 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
        if (v11)
        {
          v11(v10, CFSTR("SynchronizedNULL"), *MEMORY[0x1E0C9AE00], &cf);
          if (cf)
            CFRelease(cf);
        }
        playbackCoordinator_completePendingStartupTask(v2, 1);
      }
      else
      {
        FigSignalErrorAt();
      }
      goto LABEL_11;
    }
    FigSignalErrorAt();
  }
  else if (v4)
  {
LABEL_11:
    CFRelease(v5);
  }
  if (*a1)
    CFRelease(*a1);
  free(a1);
}

BOOL CMTimeDifferenceIsWithinTolerance(CMTime *a1, CMTime *a2, CMTime *a3)
{
  CMTime v5;
  CMTime lhs;
  CMTime time;
  CMTime time1;

  lhs = *a1;
  v5 = *a2;
  CMTimeSubtract(&time, &lhs, &v5);
  CMTimeAbsoluteValue(&time1, &time);
  lhs = *a3;
  return CMTimeCompare(&time1, &lhs) < 1;
}

uint64_t figPlaybackCoordinator_isInterstitialScheduledAtTime(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage;
  const __CFArray *v5;
  uint64_t v6;
  const __CFArray *v7;
  uint64_t v8;
  const __CFArray *v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex v12;
  const __CFDictionary *ValueAtIndex;
  CMTime v15;
  CMTime v16;
  CMTime v17;
  CMTime v18;
  CMTime v19;

  FigPlaybackCoordinatorGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(const __CFArray **)(DerivedStorage + 360);
  if (v5 && CFArrayGetCount(v5) >= 1)
  {
    v19 = *a2;
    return figPlaybackCoordinator_isTimeInInterstitialRange(a1, &v19, 0);
  }
  else
  {
    v7 = *(const __CFArray **)(DerivedStorage + 456);
    if (v7
      && CFArrayGetCount(v7) >= 1
      && (*(_OWORD *)&v15.value = *(_OWORD *)&a2->value,
          v15.epoch = a2->epoch,
          FigPlaybackCoordinatorGetCMBaseObject(a1),
          v8 = CMBaseObjectGetDerivedStorage(),
          (v9 = *(const __CFArray **)(v8 + 456)) != 0)
      && (Count = CFArrayGetCount(v9), Count >= 1))
    {
      v11 = Count;
      v12 = 0;
      while (1)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v8 + 456), v12);
        memset(&v19, 0, sizeof(v19));
        CMTimeMakeFromDictionary(&v19, ValueAtIndex);
        v6 = 1;
        CMTimeMake(&v18, 1, 1000);
        v17 = v19;
        v16 = v15;
        if (CMTimeDifferenceIsWithinTolerance(&v17, &v16, &v18))
          break;
        if (v11 == ++v12)
          return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

uint64_t FigTTMLHeadCreate(const __CFAllocator *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t Default;
  uint64_t DerivedStorage;
  CFTypeRef *v10;
  uint64_t v11;
  uint64_t v12;

  if (!a4)
    return FigSignalErrorAt();
  FigTTMLNodeGetClassID();
  Default = CMDerivedObjectCreate();
  if ((_DWORD)Default)
    return Default;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Default = FigTTMLInitializeNodeBaseStorage(DerivedStorage, (__int128 *)a3);
  if ((_DWORD)Default)
    return Default;
  *(_QWORD *)(DerivedStorage + 152) = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  Default = FigTTMLAddCurrentElementAttributesToDictionary(a2, *(__CFDictionary **)(DerivedStorage + 24));
  if ((_DWORD)Default)
    return Default;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  Default = FigTTMLParseNode(a2, (uint64_t (*)(uint64_t, uint64_t *, CFTypeRef *))figTTMLHead_ConsumeChildNode, (uint64_t *)a3);
  if ((_DWORD)Default)
    return Default;
  v11 = *(_QWORD *)(DerivedStorage + 144);
  v10 = (CFTypeRef *)(DerivedStorage + 144);
  if (!v11)
  {
    Default = FigTTMLLayoutCreateDefault(a1, a3, v10);
    if ((_DWORD)Default)
      return Default;
  }
  v12 = 0;
  *a4 = 0;
  return v12;
}

uint64_t figTTMLHead_ConsumeChildNode(uint64_t a1, CFTypeRef *a2, CFTypeRef *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  const __CFAllocator *v9;
  const void *v10;
  CFTypeRef v11;
  const __CFAllocator *v12;
  const __CFAllocator *v13;
  uint64_t v14;
  CFTypeRef v16;
  CFTypeRef v17;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v17 = 0;
  cf = 0;
  v16 = 0;
  v7 = FigTTMLGetLibXMLAccess();
  if (!v7)
  {
    v14 = FigSignalErrorAt();
    goto LABEL_25;
  }
  if ((*(unsigned int (**)(uint64_t))(v7 + 72))(a1) != 1)
    goto LABEL_20;
  v8 = FigTTMLCopyNamespaceAndLocalNameOfCurrentNode(a1, (const char **)&v17, (CFStringRef *)&v16);
  if ((_DWORD)v8)
    goto LABEL_30;
  if (FigCFEqual() && FigCFEqual())
  {
    v9 = CFGetAllocator(*a2);
    v8 = FigTTMLStylingCreate(v9, a1, (uint64_t)a2, &cf);
    if (!(_DWORD)v8)
    {
      v10 = *(const void **)(DerivedStorage + 136);
      v11 = cf;
      *(_QWORD *)(DerivedStorage + 136) = cf;
      if (!v11)
        goto LABEL_9;
      goto LABEL_8;
    }
    goto LABEL_30;
  }
  if (!FigCFEqual() || !FigCFEqual())
  {
    if (FigCFEqual() && FigCFEqual())
    {
      v13 = CFGetAllocator(*a2);
      v8 = FigTTMLProfileCreate(v13, a1, (uint64_t)a2, &cf);
      if ((_DWORD)v8)
        goto LABEL_30;
      CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 152), cf);
LABEL_21:
      v14 = 0;
      if (a3)
      {
        *a3 = cf;
        cf = 0;
      }
      goto LABEL_23;
    }
LABEL_20:
    v8 = FigTTMLSkipNode(a1, (uint64_t *)a2, *(__CFArray **)(DerivedStorage + 128));
    if ((_DWORD)v8)
      goto LABEL_30;
    goto LABEL_21;
  }
  v12 = CFGetAllocator(*a2);
  v8 = FigTTMLLayoutCreate(v12, a1, (uint64_t)a2, &cf);
  if (!(_DWORD)v8)
  {
    v10 = *(const void **)(DerivedStorage + 144);
    v11 = cf;
    *(_QWORD *)(DerivedStorage + 144) = cf;
    if (!v11)
    {
LABEL_9:
      if (v10)
        CFRelease(v10);
      goto LABEL_21;
    }
LABEL_8:
    CFRetain(v11);
    goto LABEL_9;
  }
LABEL_30:
  v14 = v8;
LABEL_23:
  if (v16)
    CFRelease(v16);
LABEL_25:
  if (v17)
    CFRelease(v17);
  if (cf)
    CFRelease(cf);
  return v14;
}

uint64_t FigTTMLHeadCreateDefault(const __CFAllocator *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t Default;
  uint64_t DerivedStorage;
  uint64_t v8;

  if (!a3)
    return FigSignalErrorAt();
  FigTTMLNodeGetClassID();
  Default = CMDerivedObjectCreate();
  if (!(_DWORD)Default)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v8 = FigTTMLInitializeNodeBaseStorage(DerivedStorage, (__int128 *)a2);
    if ((_DWORD)v8)
    {
      return v8;
    }
    else
    {
      *(_QWORD *)(DerivedStorage + 152) = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      Default = FigTTMLLayoutCreateDefault(a1, a2, (CFTypeRef *)(DerivedStorage + 144));
      if (!(_DWORD)Default)
        *a3 = 0;
    }
  }
  return Default;
}

void figTTMLHead_Finalize()
{
  _QWORD *DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = (const void *)DerivedStorage[17];
  if (v1)
    CFRelease(v1);
  v2 = (const void *)DerivedStorage[18];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)DerivedStorage[19];
  if (v3)
    CFRelease(v3);
  FigTTMLReleaseNodeBaseStorage((uint64_t)DerivedStorage);
}

CFStringRef figTTMLHead_CopyDebugDesc()
{
  const void *v0;
  CFStringRef v1;

  CMBaseObjectGetDerivedStorage();
  v0 = (const void *)FigCFCopyCompactDescription();
  v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("head %@"), v0);
  if (v0)
    CFRelease(v0);
  return v1;
}

uint64_t figTTMLHead_CopyChildNodeArray(const void *a1, __CFArray **a2)
{
  const __CFAllocator *v3;
  __CFArray *Mutable;
  uint64_t DerivedStorage;
  uint64_t v6;
  const __CFArray *v7;
  CFRange v8;
  const void *v9;
  const void *v10;
  uint64_t v11;

  v3 = CFGetAllocator(a1);
  Mutable = CFArrayCreateMutable(v3, 0, MEMORY[0x1E0C9B378]);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v6 = DerivedStorage;
    v7 = *(const __CFArray **)(DerivedStorage + 152);
    if (v7)
      v8.length = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 152));
    else
      v8.length = 0;
    v8.location = 0;
    CFArrayAppendArray(Mutable, v7, v8);
    v9 = *(const void **)(v6 + 136);
    if (v9)
      CFArrayAppendValue(Mutable, v9);
    v10 = *(const void **)(v6 + 144);
    if (v10)
      CFArrayAppendValue(Mutable, v10);
    v11 = 0;
    *a2 = Mutable;
  }
  else
  {
    v11 = FigSignalErrorAt();
    if (Mutable)
      CFRelease(Mutable);
  }
  return v11;
}

uint64_t figTTMLHead_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2)
    return FigSignalErrorAt();
  *a2 = 8;
  return 0;
}

uint64_t CreateTrackReaderDictionary(const __CFAllocator *a1, uint64_t *a2)
{
  uint64_t v4;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  uint64_t TrackCount;
  uint64_t v8;
  uint64_t v9;
  const void *TrackForTrackIndex;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *value;

  value = 0;
  MovieInformationLockForRead(a2[1]);
  v4 = FigSimpleMutexCreate();
  a2[2] = v4;
  if (v4 && (Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) != 0)
  {
    v6 = Mutable;
    TrackCount = MovieInformationGetTrackCount(a2[1]);
    if (TrackCount < 1)
    {
LABEL_7:
      v13 = 0;
      a2[3] = (uint64_t)v6;
    }
    else
    {
      v8 = TrackCount;
      v9 = 0;
      while (1)
      {
        TrackForTrackIndex = (const void *)MovieInformationFindTrackForTrackIndex(a2[1], v9);
        v11 = CreateTrackReaderForMovieTrack((uint64_t)a1, (const void *)a2[1], TrackForTrackIndex, &value);
        v12 = value;
        if ((_DWORD)v11)
          break;
        CFDictionarySetValue(v6, TrackForTrackIndex, value);
        CFRelease(v12);
        value = 0;
        if (v8 == ++v9)
          goto LABEL_7;
      }
      v13 = v11;
      if (value)
        CFRelease(value);
      CFRelease(v6);
    }
  }
  else
  {
    v13 = FigSignalErrorAt();
  }
  MovieInformationUnlockForRead(a2[1]);
  return v13;
}

uint64_t MovieFormatReaderGetMovieInformation(uint64_t a1)
{
  if (a1 && (_UNKNOWN *)CMBaseObjectGetVTable() == &kMovieFormatReaderVTable)
    return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  FigSignalErrorAt();
  return 0;
}

uint64_t MovieFormatReaderCreateWithMovieInformation(const void *a1, char a2, CFTypeRef *a3)
{
  const __CFAllocator *v6;
  uint64_t TrackReaderDictionary;
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 IsMutable;
  BOOL v12;
  uint64_t v13;
  uint64_t TrackCount;
  uint64_t v15;
  uint64_t i;
  const void *TrackForTrackIndex;
  const void *v18;
  uint64_t v19;
  const void *v21;
  CFTypeRef cf;

  cf = 0;
  if (a1)
  {
    v6 = CFGetAllocator(a1);
    FigFormatReaderGetClassID();
    TrackReaderDictionary = CMDerivedObjectCreate();
    if (!(_DWORD)TrackReaderDictionary)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v9 = FigSimpleMutexCreate();
      *(_QWORD *)(DerivedStorage + 80) = v9;
      if (v9 && (v10 = FigSimpleMutexCreate(), (*(_QWORD *)(DerivedStorage + 72) = v10) != 0))
      {
        IsMutable = MovieInformationIsMutable((uint64_t)a1);
        v12 = !IsMutable;
        if (!IsMutable)
        {
LABEL_13:
          *(_QWORD *)(DerivedStorage + 8) = CFRetain(a1);
LABEL_14:
          TrackReaderDictionary = CreateTrackReaderDictionary(v6, (uint64_t *)DerivedStorage);
          if (!(_DWORD)TrackReaderDictionary)
          {
            MovieInformationLockForRead(*(_QWORD *)(DerivedStorage + 8));
            if (!v12)
            {
              CMNotificationCenterGetDefaultLocalCenter();
              CMNotificationCenterAddListener();
              *(_BYTE *)(DerivedStorage + 120) = 1;
              TrackCount = MovieInformationGetTrackCount(*(_QWORD *)(DerivedStorage + 8));
              if (TrackCount >= 1)
              {
                v15 = TrackCount;
                for (i = 0; i != v15; ++i)
                {
                  v21 = 0;
                  TrackForTrackIndex = (const void *)MovieInformationFindTrackForTrackIndex(*(_QWORD *)(DerivedStorage + 8), i);
                  CopyTrackReader(DerivedStorage, TrackForTrackIndex, &v21);
                  v18 = v21;
                  if (v21)
                  {
                    v19 = CMBaseObjectGetDerivedStorage();
                    CMNotificationCenterGetDefaultLocalCenter();
                    CMNotificationCenterAddListener();
                    *(_BYTE *)(v19 + 64) = 1;
                    CFRelease(v18);
                  }
                }
              }
            }
            MovieInformationUnlockForRead(*(_QWORD *)(DerivedStorage + 8));
            v13 = 0;
            *a3 = cf;
            return v13;
          }
          goto LABEL_24;
        }
        if ((a2 & 1) == 0)
        {
          v13 = MovieInformationLockForWrite((uint64_t)a1);
          if ((_DWORD)v13)
            goto LABEL_8;
          v13 = MovieInformationEnsureMutationsWillNotify((uint64_t)a1);
          MovieInformationUnlockForWrite((uint64_t)a1);
          if ((_DWORD)v13)
            goto LABEL_8;
          goto LABEL_13;
        }
        TrackReaderDictionary = MovieInformationCreateDeepCopy((const __CFAllocator *)*MEMORY[0x1E0C9AE00], (uint64_t)a1, 0, (_QWORD *)(DerivedStorage + 8));
        if (!(_DWORD)TrackReaderDictionary)
        {
          v12 = 1;
          goto LABEL_14;
        }
      }
      else
      {
        TrackReaderDictionary = FigSignalErrorAt();
      }
    }
LABEL_24:
    v13 = TrackReaderDictionary;
LABEL_8:
    if (cf)
      CFRelease(cf);
    return v13;
  }
  return FigSignalErrorAt();
}

void MovieMutationNotificationCallback(int a1, uint64_t a2, CFTypeRef cf1, uint64_t a4, const __CFDictionary *a5)
{
  CFTypeID v8;
  __CFDictionary *Mutable;
  __int16 v10;
  const void **v11;
  void *v12;
  uint64_t DerivedStorage;
  void *v14;
  const void *v15;
  int v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t valuePtr;
  void *value;

  v20 = 0;
  if (!CFEqual(cf1, CFSTR("MovieChanges")))
  {
    if (CFEqual(cf1, CFSTR("TrackAdded")))
    {
      if (!a5 || !CFDictionaryGetValueIfPresent(a5, CFSTR("TrackInfo"), (const void **)&v20))
        return;
      v12 = v20;
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      value = 0;
      if (CreateTrackReaderForMovieTrack(*MEMORY[0x1E0C9AE00], *(const void **)(DerivedStorage + 8), v12, &value))
      {
        v14 = value;
        if (!value)
          goto LABEL_35;
      }
      else
      {
        MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
        v14 = value;
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 24), v12, value);
        MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterAddListener();
        *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 64) = 1;
        if (!v14)
        {
LABEL_35:
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterPostNotification();
          return;
        }
      }
      v15 = v14;
    }
    else
    {
      v16 = CFEqual(cf1, CFSTR("TrackRemoved"));
      if (!a5 || !v16 || !CFDictionaryGetValueIfPresent(a5, CFSTR("TrackInfo"), (const void **)&v20))
        return;
      v17 = v20;
      v18 = CMBaseObjectGetDerivedStorage();
      value = 0;
      CopyTrackReader(v18, v17, &value);
      v19 = value;
      if (!value)
      {
        MEMORY[0x19402EEEC](*(_QWORD *)(v18 + 16));
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v18 + 24), v17);
        MEMORY[0x19402EF04](*(_QWORD *)(v18 + 16));
        goto LABEL_35;
      }
      *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 64) = 0;
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterBarrier();
      MEMORY[0x19402EEEC](*(_QWORD *)(v18 + 16));
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v18 + 24), v17);
      MEMORY[0x19402EF04](*(_QWORD *)(v18 + 16));
      v15 = v19;
    }
    CFRelease(v15);
    goto LABEL_35;
  }
  if (!a5)
    return;
  v8 = CFGetTypeID(a5);
  if (v8 != CFDictionaryGetTypeID())
    return;
  value = 0;
  if (!CFDictionaryGetValueIfPresent(a5, CFSTR("ChangeBits"), (const void **)&value))
    return;
  valuePtr = 0;
  CFNumberGetValue((CFNumberRef)value, kCFNumberSInt64Type, &valuePtr);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v10 = valuePtr;
  if ((valuePtr & 1) != 0)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    v10 = valuePtr;
  }
  v11 = (const void **)MEMORY[0x1E0C9AE50];
  if ((v10 & 0x100) != 0)
  {
    CFDictionarySetValue(Mutable, CFSTR("TrackReferenceDictionary"), (const void *)*MEMORY[0x1E0C9AE50]);
    v10 = valuePtr;
    if ((valuePtr & 0x80) == 0)
    {
LABEL_9:
      if ((v10 & 0x200) == 0)
        goto LABEL_10;
      goto LABEL_39;
    }
  }
  else if ((v10 & 0x80) == 0)
  {
    goto LABEL_9;
  }
  CFDictionarySetValue(Mutable, CFSTR("AlternateGroupArray"), *v11);
  v10 = valuePtr;
  if ((valuePtr & 0x200) == 0)
  {
LABEL_10:
    if ((v10 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_40;
  }
LABEL_39:
  CFDictionarySetValue(Mutable, CFSTR("PreferredRate"), *v11);
  v10 = valuePtr;
  if ((valuePtr & 0x400) == 0)
  {
LABEL_11:
    if ((v10 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_41;
  }
LABEL_40:
  CFDictionarySetValue(Mutable, CFSTR("PreferredVolume"), *v11);
  v10 = valuePtr;
  if ((valuePtr & 0x1000) == 0)
  {
LABEL_12:
    if ((v10 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_42;
  }
LABEL_41:
  CFDictionarySetValue(Mutable, CFSTR("FormatDescriptionsChanged"), *v11);
  v10 = valuePtr;
  if ((valuePtr & 0x2000) == 0)
  {
LABEL_13:
    if ((v10 & 0x4000) == 0)
      goto LABEL_14;
    goto LABEL_43;
  }
LABEL_42:
  CFDictionarySetValue(Mutable, CFSTR("EnabledTracksChanged"), *v11);
  LOBYTE(v10) = valuePtr;
  if ((valuePtr & 0x4000) == 0)
  {
LABEL_14:
    if ((v10 & 8) == 0)
      goto LABEL_15;
    goto LABEL_44;
  }
LABEL_43:
  CFDictionarySetValue(Mutable, CFSTR("ContainsChapters"), *v11);
  LOBYTE(v10) = valuePtr;
  if ((valuePtr & 8) == 0)
  {
LABEL_15:
    if ((v10 & 0x10) == 0)
      goto LABEL_16;
    goto LABEL_45;
  }
LABEL_44:
  ReactToMovieMetadataChange(a2, 8, Mutable);
  LOBYTE(v10) = valuePtr;
  if ((valuePtr & 0x10) == 0)
  {
LABEL_16:
    if ((v10 & 0x20) == 0)
      goto LABEL_17;
LABEL_46:
    ReactToMovieMetadataChange(a2, 32, Mutable);
    if ((valuePtr & 0x40) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_45:
  ReactToMovieMetadataChange(a2, 16, Mutable);
  LOBYTE(v10) = valuePtr;
  if ((valuePtr & 0x20) != 0)
    goto LABEL_46;
LABEL_17:
  if ((v10 & 0x40) != 0)
LABEL_18:
    ReactToMovieMetadataChange(a2, 64, Mutable);
LABEL_19:
  if (CFDictionaryGetCount(Mutable))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  if (Mutable)
    CFRelease(Mutable);
}

uint64_t CopyTrackReader(uint64_t a1, const void *a2, _QWORD *a3)
{
  const void *Value;
  const void *v7;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), a2);
  if (Value)
  {
    v7 = Value;
    CFRetain(Value);
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
    *a3 = v7;
    return 0;
  }
  else
  {
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
    return FigSignalErrorAt();
  }
}

void TrackMutationNotificationCallback(int a1, uint64_t a2, CFTypeRef cf1, uint64_t a4, const void *a5)
{
  CFTypeID v8;
  __CFDictionary *Mutable;
  int v10;
  const void *v11;
  uint64_t DerivedStorage;
  const void *v13;
  const void *v14;
  const void *v15;
  uint64_t v16;
  void *value;

  if (CFEqual(cf1, CFSTR("TrackChanges")))
  {
    if (!a5)
      return;
    v8 = CFGetTypeID(a5);
    if (v8 != CFDictionaryGetTypeID())
      return;
    value = 0;
    if (!CFDictionaryGetValueIfPresent((CFDictionaryRef)a5, CFSTR("ChangeBits"), (const void **)&value))
      return;
    v16 = 0;
    CFNumberGetValue((CFNumberRef)value, kCFNumberSInt64Type, &v16);
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v10 = v16;
    if ((v16 & 1) != 0)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      v11 = (const void *)*MEMORY[0x1E0C9AE50];
      CFDictionarySetValue(Mutable, CFSTR("UneditedSampleCount"), (const void *)*MEMORY[0x1E0C9AE50]);
      CFDictionarySetValue(Mutable, CFSTR("UneditedTrackDuration"), v11);
      CFDictionarySetValue(Mutable, CFSTR("NominalFrameRate"), v11);
      CFDictionarySetValue(Mutable, CFSTR("MinSampleDuration"), v11);
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 48));
      v13 = *(const void **)(DerivedStorage + 56);
      if (v13)
      {
        CFRelease(v13);
        *(_QWORD *)(DerivedStorage + 56) = 0;
      }
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 48));
      v10 = v16;
      if ((v16 & 4) == 0)
      {
LABEL_7:
        if ((v10 & 0x40) == 0)
          goto LABEL_8;
        goto LABEL_45;
      }
    }
    else if ((v16 & 4) == 0)
    {
      goto LABEL_7;
    }
    CFDictionarySetValue(Mutable, CFSTR("TrackFormatDescriptionArray"), (const void *)*MEMORY[0x1E0C9AE50]);
    v10 = v16;
    if ((v16 & 0x40) == 0)
    {
LABEL_8:
      if ((v10 & 0x80) == 0)
        goto LABEL_9;
      goto LABEL_46;
    }
LABEL_45:
    CFDictionarySetValue(Mutable, CFSTR("TrackEnabled"), (const void *)*MEMORY[0x1E0C9AE50]);
    v10 = v16;
    if ((v16 & 0x80) == 0)
    {
LABEL_9:
      if ((v10 & 0x100) == 0)
        goto LABEL_10;
      goto LABEL_47;
    }
LABEL_46:
    CFDictionarySetValue(Mutable, CFSTR("TrackLanguageCode"), (const void *)*MEMORY[0x1E0C9AE50]);
    v10 = v16;
    if ((v16 & 0x100) == 0)
    {
LABEL_10:
      if ((v10 & 0x200) == 0)
        goto LABEL_11;
      goto LABEL_48;
    }
LABEL_47:
    CFDictionarySetValue(Mutable, CFSTR("ExtendedLanguageTagString"), (const void *)*MEMORY[0x1E0C9AE50]);
    v10 = v16;
    if ((v16 & 0x200) == 0)
    {
LABEL_11:
      if ((v10 & 0x400) == 0)
        goto LABEL_12;
      goto LABEL_49;
    }
LABEL_48:
    CFDictionarySetValue(Mutable, CFSTR("CleanApertureDimensions"), (const void *)*MEMORY[0x1E0C9AE50]);
    v10 = v16;
    if ((v16 & 0x400) == 0)
    {
LABEL_12:
      if ((v10 & 0x800) == 0)
        goto LABEL_13;
      goto LABEL_50;
    }
LABEL_49:
    CFDictionarySetValue(Mutable, CFSTR("TrackDimensions"), (const void *)*MEMORY[0x1E0C9AE50]);
    v10 = v16;
    if ((v16 & 0x800) == 0)
    {
LABEL_13:
      if ((v10 & 0x1000) == 0)
        goto LABEL_14;
      goto LABEL_51;
    }
LABEL_50:
    CFDictionarySetValue(Mutable, CFSTR("TrackExcludeFromAutoSelection"), (const void *)*MEMORY[0x1E0C9AE50]);
    v10 = v16;
    if ((v16 & 0x1000) == 0)
    {
LABEL_14:
      if ((v10 & 0x400000) == 0)
        goto LABEL_15;
      goto LABEL_52;
    }
LABEL_51:
    CFDictionarySetValue(Mutable, CFSTR("AlternateGroupID"), (const void *)*MEMORY[0x1E0C9AE50]);
    v10 = v16;
    if ((v16 & 0x400000) == 0)
    {
LABEL_15:
      if ((v10 & 0x800000) == 0)
        goto LABEL_16;
      goto LABEL_53;
    }
LABEL_52:
    CFDictionarySetValue(Mutable, CFSTR("ProvisionalAlternateGroupID"), (const void *)*MEMORY[0x1E0C9AE50]);
    v10 = v16;
    if ((v16 & 0x800000) == 0)
    {
LABEL_16:
      if ((v10 & 0x2000) == 0)
        goto LABEL_17;
      goto LABEL_54;
    }
LABEL_53:
    CFDictionarySetValue(Mutable, CFSTR("DefaultAlternateGroupID"), (const void *)*MEMORY[0x1E0C9AE50]);
    v10 = v16;
    if ((v16 & 0x2000) == 0)
    {
LABEL_17:
      if ((v10 & 0x4000) == 0)
        goto LABEL_18;
      goto LABEL_55;
    }
LABEL_54:
    v14 = (const void *)*MEMORY[0x1E0C9AE50];
    CFDictionarySetValue(Mutable, CFSTR("EstimatedDataRate"), (const void *)*MEMORY[0x1E0C9AE50]);
    CFDictionarySetValue(Mutable, CFSTR("UneditedNumDataBytes"), v14);
    v10 = v16;
    if ((v16 & 0x4000) == 0)
    {
LABEL_18:
      if ((v10 & 0x8000) == 0)
        goto LABEL_19;
      goto LABEL_56;
    }
LABEL_55:
    CFDictionarySetValue(Mutable, CFSTR("ProductionApertureDimensions"), (const void *)*MEMORY[0x1E0C9AE50]);
    v10 = v16;
    if ((v16 & 0x8000) == 0)
    {
LABEL_19:
      if ((v10 & 0x10000) == 0)
        goto LABEL_20;
      goto LABEL_57;
    }
LABEL_56:
    CFDictionarySetValue(Mutable, CFSTR("EncodedPixelsDimensions"), (const void *)*MEMORY[0x1E0C9AE50]);
    v10 = v16;
    if ((v16 & 0x10000) == 0)
    {
LABEL_20:
      if ((v10 & 0x20000) == 0)
        goto LABEL_21;
      goto LABEL_58;
    }
LABEL_57:
    CFDictionarySetValue(Mutable, CFSTR("Volume"), (const void *)*MEMORY[0x1E0C9AE50]);
    v10 = v16;
    if ((v16 & 0x20000) == 0)
    {
LABEL_21:
      if ((v10 & 0x40000) == 0)
        goto LABEL_22;
      goto LABEL_59;
    }
LABEL_58:
    CFDictionarySetValue(Mutable, CFSTR("TrackLayer"), (const void *)*MEMORY[0x1E0C9AE50]);
    v10 = v16;
    if ((v16 & 0x40000) == 0)
    {
LABEL_22:
      if ((v10 & 0x80000) == 0)
        goto LABEL_23;
      goto LABEL_60;
    }
LABEL_59:
    CFDictionarySetValue(Mutable, CFSTR("TrackQTLoadSettings"), (const void *)*MEMORY[0x1E0C9AE50]);
    v10 = v16;
    if ((v16 & 0x80000) == 0)
    {
LABEL_23:
      if ((v10 & 0x100000) == 0)
        goto LABEL_24;
      goto LABEL_61;
    }
LABEL_60:
    CFDictionarySetValue(Mutable, CFSTR("TrackMatrix"), (const void *)*MEMORY[0x1E0C9AE50]);
    v10 = v16;
    if ((v16 & 0x100000) == 0)
    {
LABEL_24:
      if ((v10 & 2) == 0)
        goto LABEL_25;
      goto LABEL_62;
    }
LABEL_61:
    CFDictionarySetValue(Mutable, CFSTR("TrackReferencesChanged"), (const void *)*MEMORY[0x1E0C9AE50]);
    v10 = v16;
    if ((v16 & 2) == 0)
    {
LABEL_25:
      if ((v10 & 0x200000) == 0)
        goto LABEL_26;
      goto LABEL_63;
    }
LABEL_62:
    CFDictionarySetValue(Mutable, CFSTR("EditCursorService"), (const void *)*MEMORY[0x1E0C9AE50]);
    v10 = v16;
    if ((v16 & 0x200000) == 0)
    {
LABEL_26:
      if ((v10 & 8) == 0)
        goto LABEL_27;
      goto LABEL_64;
    }
LABEL_63:
    CFDictionarySetValue(Mutable, CFSTR("ContainsChapters"), (const void *)*MEMORY[0x1E0C9AE50]);
    v10 = v16;
    if ((v16 & 8) == 0)
    {
LABEL_27:
      if ((v10 & 0x10) == 0)
        goto LABEL_28;
      goto LABEL_65;
    }
LABEL_64:
    ReactToTrackMetadataChange(a2, 8, Mutable);
    v10 = v16;
    if ((v16 & 0x10) == 0)
    {
LABEL_28:
      if ((v10 & 0x20) == 0)
        goto LABEL_29;
      goto LABEL_66;
    }
LABEL_65:
    ReactToTrackMetadataChange(a2, 16, Mutable);
    v10 = v16;
    if ((v16 & 0x20) == 0)
    {
LABEL_29:
      if ((v10 & 0x1000000) == 0)
        goto LABEL_30;
      goto LABEL_67;
    }
LABEL_66:
    ReactToTrackMetadataChange(a2, 32, Mutable);
    v10 = v16;
    if ((v16 & 0x1000000) == 0)
    {
LABEL_30:
      if ((v10 & 0x2000000) == 0)
        goto LABEL_31;
      goto LABEL_68;
    }
LABEL_67:
    CFDictionarySetValue(Mutable, CFSTR("SampleGroupDescriptions"), (const void *)*MEMORY[0x1E0C9AE50]);
    v10 = v16;
    if ((v16 & 0x2000000) == 0)
    {
LABEL_31:
      if ((v10 & 0x4000000) == 0)
        goto LABEL_32;
      goto LABEL_69;
    }
LABEL_68:
    CFDictionarySetValue(Mutable, CFSTR("HasRollInformation"), (const void *)*MEMORY[0x1E0C9AE50]);
    v10 = v16;
    if ((v16 & 0x4000000) == 0)
    {
LABEL_32:
      if ((v10 & 0x8000000) == 0)
      {
LABEL_34:
        if (CFDictionaryGetCount(Mutable))
        {
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterPostNotification();
        }
        if (Mutable)
          CFRelease(Mutable);
        return;
      }
LABEL_33:
      CFDictionarySetValue(Mutable, CFSTR("HasAudioSampleDependencyInformation"), (const void *)*MEMORY[0x1E0C9AE50]);
      goto LABEL_34;
    }
LABEL_69:
    v15 = (const void *)*MEMORY[0x1E0C9AE50];
    CFDictionarySetValue(Mutable, CFSTR("HEVCSyncSampleNALUnitTypes"), (const void *)*MEMORY[0x1E0C9AE50]);
    CFDictionarySetValue(Mutable, CFSTR("HEVCTemporalLevelInfoCombinations"), v15);
    if ((v16 & 0x8000000) == 0)
      goto LABEL_34;
    goto LABEL_33;
  }
  if (CFEqual(cf1, CFSTR("TrackEditSegmentsChanged")))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
}

uint64_t MovieFormatReaderFinalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 120))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterBarrier();
  }
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v1 = *(const void **)(DerivedStorage + 24);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  if (*(_QWORD *)(DerivedStorage + 16))
    FigSimpleMutexDestroy();
  v2 = *(const void **)(DerivedStorage + 8);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  if (*(_QWORD *)(DerivedStorage + 80))
    FigSimpleMutexDestroy();
  v3 = *(const void **)(DerivedStorage + 64);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 64) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 88);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 88) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 104);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 104) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 96);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 96) = 0;
  }
  v7 = *(const void **)(DerivedStorage + 112);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 112) = 0;
  }
  return FigSimpleMutexDestroy();
}

__CFString *MovieFormatReaderCopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  uint64_t v5;
  CFStringRef v6;
  uint64_t TrackCount;
  _BOOL4 IsMutable;
  const char *v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = *(_QWORD *)(DerivedStorage + 8);
  if (v5)
  {
    if (*(_QWORD *)DerivedStorage)
    {
      v6 = CFCopyDescription(*(CFTypeRef *)DerivedStorage);
      v5 = *(_QWORD *)(DerivedStorage + 8);
    }
    else
    {
      v6 = 0;
    }
    TrackCount = MovieInformationGetTrackCount(v5);
    IsMutable = MovieInformationIsMutable(*(_QWORD *)(DerivedStorage + 8));
    v9 = " Mutable";
    if (!IsMutable)
      v9 = "";
    CFStringAppendFormat(Mutable, 0, CFSTR("\tMovieFormatReader: %p stream<%@> trackCount<%d>%s"), a1, v6, TrackCount, v9);
    if (v6)
      CFRelease(v6);
  }
  else
  {
    CFStringAppendFormat(Mutable, 0, CFSTR("\tMovieFormatReader: %p APPEARS INVALIDATED"), a1);
  }
  return Mutable;
}

uint64_t MovieFormatReaderCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  uint64_t DerivedStorage;
  CMTime *p_context;
  CFDictionaryRef v9;
  uint64_t v10;
  CFTypeRef *v12;
  const __CFDictionary *AlternateGroupArray;
  const __CFAllocator *v14;
  __CFArray *v15;
  uint64_t TrackReferenceDictionary;
  uint64_t v17;
  void **v18;
  void **v19;
  const __CFAllocator *v20;
  CFNumberType v21;
  __CFArray *v22;
  CFMutableArrayRef Mutable;
  int HasCompressedMovieAtom;
  CFTypeRef *v25;
  BOOL v26;
  uint64_t AssetAnalysisReporter;
  CMTime v28;
  CMTime time1;
  void *keys[2];
  __int128 v31;
  int v32;
  CMTime context;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MovieInformationLockForRead(*(_QWORD *)(DerivedStorage + 8));
  if (!a4)
    goto LABEL_79;
  *a4 = 0;
  if (!CFEqual(a2, CFSTR("Duration")))
  {
    if (CFEqual(a2, CFSTR("NominalDuration")))
    {
      keys[1] = 0;
      *(_QWORD *)&v31 = 0;
      keys[0] = 0;
      MovieInformationGetMovieDuration(*(_QWORD *)(DerivedStorage + 8), (uint64_t)keys);
LABEL_8:
      *(_OWORD *)&context.value = *(_OWORD *)keys;
      context.epoch = v31;
      p_context = &context;
      goto LABEL_9;
    }
    if (CFEqual(a2, CFSTR("Identifier")))
    {
      v12 = (CFTypeRef *)kFigFormatReaderIdentifier_QuickTime_ISO;
LABEL_17:
      AlternateGroupArray = (const __CFDictionary *)CFRetain(*v12);
LABEL_18:
      v10 = 0;
      *a4 = AlternateGroupArray;
      goto LABEL_11;
    }
    if (CFEqual(a2, CFSTR("AccurateDurationIsKnown")) || CFEqual(a2, CFSTR("SampleCursorTimeAccuracyIsExact")))
    {
LABEL_16:
      v12 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      goto LABEL_17;
    }
    if (CFEqual(a2, CFSTR("ImportantResourceLocation")))
    {
      time1.value = 0;
      v28.value = 0;
      keys[0] = CFSTR("LocationOffset");
      keys[1] = CFSTR("LocationSize");
      MovieInformationGetMoovLocation(*(_QWORD *)(DerivedStorage + 8), &time1, &v28);
      v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      context.value = (CMTimeValue)CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &time1);
      *(_QWORD *)&context.timescale = CFNumberCreate(v14, kCFNumberSInt64Type, &v28);
      *a4 = CFDictionaryCreate(a3, (const void **)keys, (const void **)&context, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (context.value)
        CFRelease((CFTypeRef)context.value);
      v15 = *(__CFArray **)&context.timescale;
      if (!*(_QWORD *)&context.timescale)
        goto LABEL_10;
      goto LABEL_23;
    }
    if (CFEqual(a2, CFSTR("AlternateGroupArray")))
    {
      AlternateGroupArray = MovieInformationCreateAlternateGroupArray(a3, *(_QWORD *)(DerivedStorage + 8));
      goto LABEL_18;
    }
    if (CFEqual(a2, CFSTR("TrackReferenceDictionary")))
    {
      TrackReferenceDictionary = MovieInformationCreateTrackReferenceDictionary(a3, *(_QWORD *)(DerivedStorage + 8), a4);
LABEL_80:
      v10 = TrackReferenceDictionary;
      goto LABEL_11;
    }
    if (CFEqual(a2, CFSTR("Lyrics")))
      GetLyricsFromMovieMetadata((uint64_t)a3, (uint64_t *)DerivedStorage, a4);
    if (CFEqual(a2, CFSTR("LyricsScanCompleted")))
    {
      v10 = 0;
      *a4 = (CFDictionaryRef)*MEMORY[0x1E0C9AE50];
      goto LABEL_11;
    }
    if (CFEqual(a2, CFSTR("PreferredRate")))
    {
      LODWORD(keys[0]) = 1065353216;
      v17 = *(_QWORD *)(DerivedStorage + 8);
      v18 = keys;
      v19 = 0;
LABEL_37:
      MovieInformationGetBasicMetrics(v17, v18, v19, 0, 0);
      v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v21 = kCFNumberFloat32Type;
LABEL_38:
      AlternateGroupArray = CFNumberCreate(v20, v21, keys);
      goto LABEL_18;
    }
    if (CFEqual(a2, CFSTR("PreferredVolume")))
    {
      LODWORD(keys[0]) = 1065353216;
      v17 = *(_QWORD *)(DerivedStorage + 8);
      v19 = keys;
      v18 = 0;
      goto LABEL_37;
    }
    if (CFEqual(a2, CFSTR("Timescale")))
    {
      LODWORD(keys[0]) = 0;
      MovieInformationGetBasicMetrics(*(_QWORD *)(DerivedStorage + 8), 0, 0, keys, 0);
LABEL_41:
      v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v21 = kCFNumberSInt32Type;
      goto LABEL_38;
    }
    if (CFEqual(a2, CFSTR("MovieMatrix")))
    {
      v32 = 0;
      *(_OWORD *)keys = 0u;
      v31 = 0u;
      MovieInformationGetBasicMetrics(*(_QWORD *)(DerivedStorage + 8), 0, 0, 0, (uint64_t)keys);
      AlternateGroupArray = FigMatrixToCFArray(a3, (uint64_t)keys);
      goto LABEL_18;
    }
    if (CFEqual(a2, CFSTR("iTunesGaplessInfo")))
    {
      AlternateGroupArray = CreateiTunesGaplessInfoDictionaryEnhanced(DerivedStorage);
      goto LABEL_18;
    }
    if (CFEqual(a2, CFSTR("iTunesSoundCheckVolumeNormalization")))
    {
      keys[0] = (void *)CopySoundCheckInfoDictionary_0(DerivedStorage);
      if (keys[0])
      {
        LODWORD(context.value) = 0;
        LODWORD(time1.value) = 4;
        if (AudioFormatGetProperty(0x73636462u, 8u, keys, (UInt32 *)&time1, &context))
        {
          CFRelease(keys[0]);
          goto LABEL_50;
        }
        v22 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat32Type, &context);
        CFRelease(keys[0]);
        if (!v22)
          goto LABEL_50;
LABEL_54:
        v10 = 0;
        *a4 = v22;
        goto LABEL_11;
      }
LABEL_50:
      v10 = 4294954512;
      goto LABEL_11;
    }
    if (CFEqual(a2, CFSTR("SoundCheckInfo")))
    {
      AlternateGroupArray = (const __CFDictionary *)CopySoundCheckInfoDictionary_0(DerivedStorage);
      goto LABEL_18;
    }
    if (CFEqual(a2, CFSTR("iTunesStoreItemKind")))
    {
      keys[0] = 0;
      CopyiTunesStoreItemKindValue((uint64_t)a3, (uint64_t *)DerivedStorage, keys);
    }
    if (CFEqual(a2, CFSTR("QuickTimeUserDataReader")))
      AssureQuickTimeUserDataReaderCreated((uint64_t *)DerivedStorage);
    if (CFEqual(a2, CFSTR("QuickTimeMetadataReader")))
      AssureQuickTimeMetadataReaderCreated((uint64_t *)DerivedStorage);
    if (CFEqual(a2, CFSTR("ISOUserDataReader")))
      AssureISOUserDataReaderCreated((uint64_t *)DerivedStorage);
    if (CFEqual(a2, CFSTR("iTunesMetadataReader")))
      AssureiTunesMetadataReaderCreated((uint64_t *)DerivedStorage);
    if (CFEqual(a2, CFSTR("MetadataReaders")))
      AssureQuickTimeUserDataReaderCreated((uint64_t *)DerivedStorage);
    if (CFEqual(a2, CFSTR("MetadataReaderTypes")))
    {
      Mutable = CFArrayCreateMutable(a3, 0, MEMORY[0x1E0C9B378]);
      if (!Mutable)
        goto LABEL_79;
      v22 = Mutable;
      if (MovieInformationMetadataFormatIsAvailable(*(_QWORD **)(DerivedStorage + 8), CFSTR("com.apple.itunes")))CFArrayAppendValue(v22, CFSTR("iTunesMetadataReader"));
      if (MovieInformationMetadataFormatIsAvailable(*(_QWORD **)(DerivedStorage + 8), CFSTR("com.apple.quicktime.mdta")))CFArrayAppendValue(v22, CFSTR("QuickTimeMetadataReader"));
      if (MovieInformationMetadataFormatIsAvailable(*(_QWORD **)(DerivedStorage + 8), CFSTR("com.apple.quicktime.udta")))CFArrayAppendValue(v22, CFSTR("QuickTimeUserDataReader"));
      if (MovieInformationMetadataFormatIsAvailable(*(_QWORD **)(DerivedStorage + 8), CFSTR("org.mp4ra")))
        CFArrayAppendValue(v22, CFSTR("ISOUserDataReader"));
      if (CFArrayGetCount(v22) < 1)
      {
        v15 = v22;
LABEL_23:
        CFRelease(v15);
        goto LABEL_10;
      }
      goto LABEL_54;
    }
    if (CFEqual(a2, CFSTR("CreationDate")))
      CopyCreationDate((uint64_t)a3, (uint64_t *)DerivedStorage);
    if (CFEqual(a2, CFSTR("HasCompressedMovieAtom")))
    {
      HasCompressedMovieAtom = MovieInformationHasCompressedMovieAtom(*(_QWORD *)(DerivedStorage + 8));
      goto LABEL_85;
    }
    if (CFEqual(a2, CFSTR("CouldContainFragments")))
    {
      if (!MovieInformationCouldContainFragments(*(_QWORD *)(DerivedStorage + 8)))
        goto LABEL_95;
    }
    else
    {
      if (!CFEqual(a2, CFSTR("ContainsFragments")))
      {
        if (CFEqual(a2, CFSTR("MovieExtendsDuration")))
        {
          keys[1] = 0;
          *(_QWORD *)&v31 = 0;
          keys[0] = 0;
          MovieInformationGetMovieExtendsDuration(*(__n128 **)(DerivedStorage + 8), (uint64_t)keys);
          goto LABEL_8;
        }
        if (CFEqual(a2, CFSTR("CanMutate")))
        {
          HasCompressedMovieAtom = MovieInformationIsMutable(*(_QWORD *)(DerivedStorage + 8));
        }
        else if (CFEqual(a2, CFSTR("IsSelfContained")))
        {
          HasCompressedMovieAtom = MovieInformationAllTracksAreSelfContained(*(_QWORD *)(DerivedStorage + 8));
        }
        else
        {
          if (!CFEqual(a2, CFSTR("ContainsChapters")))
          {
            if (CFEqual(a2, CFSTR("PictureCollection")))
            {
              TrackReferenceDictionary = CopyPictureCollection((uint64_t)a3, DerivedStorage, a4);
              goto LABEL_80;
            }
            if (CFEqual(a2, CFSTR("FirstFragmentSequenceNumber")))
            {
              LODWORD(keys[0]) = 0;
              if (MovieInformationGetFirstFragmentSequenceNumber(*(_QWORD *)(DerivedStorage + 8), keys))
                goto LABEL_41;
            }
            else
            {
              if (!CFEqual(a2, CFSTR("FragmentCount")))
              {
                if (!CFEqual(a2, CFSTR("IsAssetAnalysisActive")))
                {
                  if (CFEqual(a2, CFSTR("AssetAnalysisMessages")))
                  {
                    if (MovieInformationGetAssetAnalysisReporter(*(_QWORD *)(DerivedStorage + 8)))
                      FigAssetAnalysisReporterCopyMessages();
                    goto LABEL_10;
                  }
                  goto LABEL_50;
                }
                AssetAnalysisReporter = MovieInformationGetAssetAnalysisReporter(*(_QWORD *)(DerivedStorage + 8));
                v12 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
                v25 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
                v26 = AssetAnalysisReporter == 0;
LABEL_86:
                if (v26)
                  v12 = v25;
                goto LABEL_17;
              }
              LODWORD(keys[0]) = 0;
              if (MovieInformationGetParsedFragmentCount(*(_DWORD **)(DerivedStorage + 8), keys))
                goto LABEL_41;
            }
            AlternateGroupArray = 0;
            goto LABEL_18;
          }
          HasCompressedMovieAtom = MovieInformationContainsChapters(*(_QWORD *)(DerivedStorage + 8));
        }
LABEL_85:
        v12 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
        v25 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
        v26 = HasCompressedMovieAtom == 0;
        goto LABEL_86;
      }
      if (!MovieInformationContainsFragments(*(_QWORD *)(DerivedStorage + 8)))
      {
LABEL_95:
        v12 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
        goto LABEL_17;
      }
    }
    if (!*(_BYTE *)(*(_QWORD *)(DerivedStorage + 8) + 89))
      goto LABEL_16;
    goto LABEL_95;
  }
  keys[1] = 0;
  *(_QWORD *)&v31 = 0;
  keys[0] = 0;
  MovieInformationGetMovieDuration(*(_QWORD *)(DerivedStorage + 8), (uint64_t)keys);
  context = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(DerivedStorage + 24), (CFDictionaryApplierFunction)FindMaximumEditedTrackDuration, &context);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
  time1 = context;
  *(_OWORD *)&v28.value = *(_OWORD *)keys;
  v28.epoch = v31;
  if (CMTimeCompare(&time1, &v28) < 0)
  {
    *(_OWORD *)keys = *(_OWORD *)&context.value;
    *(_QWORD *)&v31 = context.epoch;
  }
  *(_OWORD *)&time1.value = *(_OWORD *)keys;
  time1.epoch = v31;
  p_context = &time1;
LABEL_9:
  v9 = CMTimeCopyAsDictionary(p_context, a3);
  *a4 = v9;
  if (!v9)
  {
LABEL_79:
    TrackReferenceDictionary = FigSignalErrorAt();
    goto LABEL_80;
  }
LABEL_10:
  v10 = 0;
LABEL_11:
  MovieInformationUnlockForRead(*(_QWORD *)(DerivedStorage + 8));
  return v10;
}

void GetLyricsFromMovieMetadata(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  *a3 = 0;
  AssureiTunesMetadataReaderCreated(a2);
}

uint64_t sub_192D7F82C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, const __CFString *, const __CFString *, _QWORD, uint64_t, uint64_t, _QWORD);

  v3 = *(_QWORD *)(v2 + 112);
  if (!v3)
    return 0;
  v4 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFString *, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v4)
    return v4(v3, CFSTR("itsk"), CFSTR("@lyr"), 0, v1, v0, 0);
  else
    return 4294954514;
}

CFMutableDictionaryRef CreateiTunesGaplessInfoDictionaryEnhanced(uint64_t a1)
{
  uint64_t v2;
  uint64_t NthTrackOfType;
  uint64_t v4;
  const __CFArray *v5;
  const __CFArray *v6;
  const AudioFormatListItem *ValueAtIndex;
  const AudioFormatListItem *v8;
  int v9;
  int v10;
  int64_t v11;
  CFMutableDictionaryRef v12;
  CMTime v14;
  CMTime v15;

  if (!*(_BYTE *)(a1 + 32))
    AssureiTunesMetadataReaderCreated((uint64_t *)a1);
  if (!*(_BYTE *)(a1 + 33))
    return 0;
  v2 = *(_QWORD *)(a1 + 8);
  v15 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  NthTrackOfType = MovieInformationFindNthTrackOfType(v2, 0, 1936684398);
  if (!NthTrackOfType)
    return 0;
  v4 = NthTrackOfType;
  v5 = MovieTrackCopyFormatDescriptionArray(NthTrackOfType);
  if (!v5)
    return 0;
  v6 = v5;
  if (CFArrayGetCount(v5) >= 1 && (ValueAtIndex = (const AudioFormatListItem *)CFArrayGetValueAtIndex(v6, 0)) != 0)
  {
    v8 = ValueAtIndex;
    MovieTrackGetMediaDuration(v4, (uint64_t)&v15);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_QWORD *)(a1 + 48);
    v14 = v15;
    v12 = FigGaplessInfoCreateEnhanced_CorrectingWithUneditedDuration(v8, &v14, v9, v10, v11);
  }
  else
  {
    v12 = 0;
  }
  CFRelease(v6);
  return v12;
}

CFTypeRef CopySoundCheckInfoDictionary_0(uint64_t a1)
{
  CFTypeRef result;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 72));
  if (!*(_BYTE *)(a1 + 56))
  {
    *(_BYTE *)(a1 + 56) = 1;
    AssureiTunesMetadataReaderCreated((uint64_t *)a1);
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 72));
  result = *(CFTypeRef *)(a1 + 64);
  if (result)
    return CFRetain(result);
  return result;
}

void CopyiTunesStoreItemKindValue(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  *a3 = 0;
  AssureiTunesMetadataReaderCreated(a2);
}

uint64_t sub_192D7FD64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, const __CFString *, const __CFString *, _QWORD, uint64_t, uint64_t, _QWORD);

  v3 = *(_QWORD *)(v2 + 112);
  if (!v3)
    return 0;
  v4 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFString *, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v4)
    return v4(v3, CFSTR("itsk"), CFSTR("stik"), 0, v1, v0, 0);
  else
    return 4294954514;
}

void AssureQuickTimeUserDataReaderCreated(uint64_t *a1)
{
  MEMORY[0x19402EEEC](a1[10]);
  if (!a1[11])
  {
    MovieInformationLockForRead(a1[1]);
    MovieInformationCreateQuickTimeUserDataReader((uint64_t *)a1[1], a1 + 11);
    MovieInformationUnlockForRead(a1[1]);
  }
  JUMPOUT(0x19402EF04);
}

void AssureQuickTimeMetadataReaderCreated(uint64_t *a1)
{
  MEMORY[0x19402EEEC](a1[10]);
  if (!a1[12])
  {
    MovieInformationLockForRead(a1[1]);
    MovieInformationCreateQuickTimeMetadataReader(a1[1], a1 + 12);
    MovieInformationUnlockForRead(a1[1]);
  }
  JUMPOUT(0x19402EF04);
}

void AssureISOUserDataReaderCreated(uint64_t *a1)
{
  MEMORY[0x19402EEEC](a1[10]);
  if (!a1[13])
  {
    MovieInformationLockForRead(a1[1]);
    MovieInformationCreateISOUserDataReader((uint64_t *)a1[1], a1 + 13);
    MovieInformationUnlockForRead(a1[1]);
  }
  JUMPOUT(0x19402EF04);
}

void AssureiTunesMetadataReaderCreated(uint64_t *a1)
{
  MEMORY[0x19402EEEC](a1[10]);
  if (!a1[14])
  {
    MovieInformationLockForRead(a1[1]);
    MovieInformationCreateiTunesMetadataReader(a1[1], a1 + 14);
    MovieInformationUnlockForRead(a1[1]);
  }
  JUMPOUT(0x19402EF04);
}

void CopyCreationDate(uint64_t a1, uint64_t *a2)
{
  AssureQuickTimeMetadataReaderCreated(a2);
}

__CFDictionary *sub_192D7FF50(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, CFTypeRef a11, CFTypeRef cf, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t *v22;
  const __CFAllocator *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, const __CFString *, const __CFString *, _QWORD, const __CFAllocator *, const void **, const __CFDictionary **);
  int v27;
  const void *v28;
  BOOL v29;
  uint64_t v30;
  __CFDictionary *result;
  __CFDictionary *v32;
  const __CFDictionary *v33;
  const void *v34;

  v25 = v24[12];
  if (!v25)
    goto LABEL_19;
  v26 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFString *, _QWORD, const __CFAllocator *, const void **, const __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v26)
  {
    v27 = v26(v25, CFSTR("comn"), CFSTR("creationDate"), 0, v23, &v34, &v33);
    v28 = v34;
    if (v27)
      v29 = 1;
    else
      v29 = v34 == 0;
    if (v29)
    {
      v30 = 0;
      if (!v34)
        goto LABEL_16;
      goto LABEL_15;
    }
    result = (__CFDictionary *)CopyCreationDateAsDictionary(v23, v34, v33, &v32);
    if ((_DWORD)result)
      return result;
    if (v33)
      CFDictionaryGetValue(v33, CFSTR("locale"));
    v30 = FigCFDateCreateFromString();
    v28 = v34;
    if (v34)
    {
LABEL_15:
      CFRelease(v28);
      v34 = 0;
    }
  }
  else
  {
    v30 = 0;
  }
LABEL_16:
  if (v33)
  {
    CFRelease(v33);
    v33 = 0;
  }
  if (!v30)
LABEL_19:
    AssureiTunesMetadataReaderCreated(v24);
  *v22 = v30;
  result = v32;
  if (v32)
  {
    CFRelease(v32);
    return 0;
  }
  return result;
}

uint64_t CopyPictureCollection(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  CFTypeRef cf;

  v8 = 0;
  cf = 0;
  v5 = MovieInformationCopyIFFItemInformation(*(_QWORD *)(a2 + 8), &cf);
  if ((_DWORD)v5)
  {
    v6 = v5;
  }
  else
  {
    if (!cf)
      return 0;
    v6 = FigPictureCollectionCreateFromIFFItemInformation(a1, cf, &v8);
    if (!(_DWORD)v6)
    {
      *a3 = v8;
      v8 = 0;
    }
  }
  if (cf)
    CFRelease(cf);
  return v6;
}

double FindMaximumEditedTrackDuration(uint64_t a1, const void *a2, CMTime *a3)
{
  double result;
  CMTime v5;
  CMTime time1;
  CMTime v7;

  memset(&v7, 0, sizeof(v7));
  GetTrackEditedDuration(a2, &v7);
  time1 = v7;
  v5 = *a3;
  if (CMTimeCompare(&time1, &v5) >= 1)
  {
    result = *(double *)&v7.value;
    *a3 = v7;
  }
  return result;
}

void GetTrackEditedDuration(const void *a1@<X0>, CMTime *a2@<X8>)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  const void *v8;
  CFTypeID v9;
  uint64_t v10;
  unint64_t Length;
  unint64_t v12;
  const UInt8 *BytePtr;
  __int128 v14;
  const UInt8 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int64_t TrackDurationValue;
  CMTimeRange v21;
  CMTimeRange range;
  CMTimeRange v23;
  CMTimeRange v24;
  const void *v25;
  __int128 v26;
  CMTimeEpoch v27;
  __CFData *v28;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(_QWORD *)(DerivedStorage + 8);
  v6 = (_OWORD *)MEMORY[0x1E0CA2E18];
  v28 = 0;
  a2->epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  *(_OWORD *)&a2->value = *v6;
  if (*(_BYTE *)(v5 + 723))
  {
    if (*(_BYTE *)(v5 + 201))
    {
      v7 = MEMORY[0x1E0CA2E10];
      *(_OWORD *)&a2->value = *MEMORY[0x1E0CA2E10];
      a2->epoch = *(_QWORD *)(v7 + 16);
    }
    else
    {
      v19 = DerivedStorage;
      TrackDurationValue = MovieTrackGetTrackDurationValue(v5);
      CMTimeMake(a2, TrackDurationValue, *(_DWORD *)(*(_QWORD *)v19 + 240));
    }
  }
  else
  {
    v26 = 0uLL;
    v27 = 0;
    MovieTrackGetMediaDuration(v5, (uint64_t)&v26);
    v25 = 0;
    MovieTrackReaderCreateEditCursorService(a1, *MEMORY[0x1E0C9AE00], &v25);
    memset(&v24, 0, sizeof(v24));
    GetGaplessSourceTimeRange(&v24);
    v8 = v25;
    *(_OWORD *)&range.start.value = v26;
    range.start.epoch = v27;
    v23 = v24;
    FigGaplessInfoCreateSegmentDataForTrack((uint64_t)v25, &range.start, (__int128 *)&v23.start.value, &v28);
    if (v8)
      CFRelease(v8);
    if (v28 && (v9 = CFGetTypeID(v28), v9 == CFDataGetTypeID()))
    {
      v10 = MEMORY[0x1E0CA2E68];
      *(_OWORD *)&a2->value = *MEMORY[0x1E0CA2E68];
      a2->epoch = *(_QWORD *)(v10 + 16);
      Length = CFDataGetLength(v28);
      if (Length >= 0x60)
      {
        v12 = Length;
        BytePtr = CFDataGetBytePtr(v28);
        v14 = *((_OWORD *)BytePtr + 4);
        *(_OWORD *)&v23.start.value = *((_OWORD *)BytePtr + 3);
        *(_OWORD *)&v23.start.epoch = v14;
        *(_OWORD *)&v23.duration.timescale = *((_OWORD *)BytePtr + 5);
        if (v12 >= 0xC0)
        {
          v15 = &BytePtr[96 * (v12 / 0x60)];
          v16 = *((_OWORD *)BytePtr + 4);
          *(_OWORD *)&range.start.value = *((_OWORD *)BytePtr + 3);
          *(_OWORD *)&range.start.epoch = v16;
          *(_OWORD *)&range.duration.timescale = *((_OWORD *)BytePtr + 5);
          v17 = *((_OWORD *)v15 - 3);
          v18 = *((_OWORD *)v15 - 1);
          *(_OWORD *)&v21.start.epoch = *((_OWORD *)v15 - 2);
          *(_OWORD *)&v21.duration.timescale = v18;
          *(_OWORD *)&v21.start.value = v17;
          CMTimeRangeGetUnion(&v23, &range, &v21);
        }
        *a2 = v23.duration;
      }
    }
    else
    {
      MovieTrackGetMediaDuration(v5, (uint64_t)a2);
    }
    if (v28)
      CFRelease(v28);
  }
}

uint64_t MovieTrackReaderCreateEditCursorService(const void *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  const void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  CFTypeRef v11;
  CFTypeRef v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = *(const void **)DerivedStorage;
  v6 = *(const void **)(DerivedStorage + 8);
  if (!MovieTrackIsValid((uint64_t)v6))
    return FigSignalErrorAt();
  FigEditCursorServiceGetClassID();
  v8 = CMDerivedObjectCreate();
  if (!(_DWORD)v8)
  {
    v9 = CMBaseObjectGetDerivedStorage();
    if (v7)
      v10 = CFRetain(v7);
    else
      v10 = 0;
    *(_QWORD *)v9 = v10;
    if (v6)
    {
      v11 = CFRetain(v6);
      v10 = *(_BYTE **)v9;
    }
    else
    {
      v11 = 0;
    }
    *(_QWORD *)(v9 + 8) = v11;
    if (v10[88])
    {
      if (a1)
        v12 = CFRetain(a1);
      else
        v12 = 0;
      *(_QWORD *)(v9 + 16) = v12;
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      *(_BYTE *)(v9 + 24) = 1;
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      *(_BYTE *)(v9 + 25) = 1;
    }
    v8 = 0;
    *a3 = 0;
  }
  return v8;
}

void GetGaplessSourceTimeRange(_OWORD *a1@<X8>)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  const __CFArray *v6;
  const __CFArray *v7;
  const AudioFormatListItem *ValueAtIndex;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = MEMORY[0x1E0CA2E40];
  v4 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  *a1 = *MEMORY[0x1E0CA2E40];
  a1[1] = v4;
  a1[2] = *(_OWORD *)(v3 + 32);
  cf = 0;
  v5 = *(_QWORD *)(DerivedStorage + 8);
  if (*(_DWORD *)(v5 + 24) == 1936684398)
  {
    v6 = MovieTrackCopyFormatDescriptionArray(v5);
    if (v6)
    {
      v7 = v6;
      if (CFArrayGetCount(v6) >= 1)
      {
        ValueAtIndex = (const AudioFormatListItem *)CFArrayGetValueAtIndex(v7, 0);
        MovieTrackCopyEnhancedGaplessInfo(*(_QWORD *)(DerivedStorage + 8), &cf);
        FigGaplessInfoGetGaplessSourceTimeRange(ValueAtIndex, (__CFDictionary *)cf, a1);
      }
      CFRelease(v7);
      if (cf)
        CFRelease(cf);
    }
  }
}

uint64_t MovieEditCursorServiceEditsChanged()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t MovieEditCursorServiceTimeRangesMayNoLongerIncrease()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

void MovieEditCursorServiceFinalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 24))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    *(_BYTE *)(DerivedStorage + 24) = 0;
  }
  if (*(_BYTE *)(DerivedStorage + 25))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    *(_BYTE *)(DerivedStorage + 25) = 0;
  }
  v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v2 = *(const void **)(DerivedStorage + 8);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
}

__CFString *MovieEditCursorServiceCopyDebugDescription(const void *a1)
{
  uint64_t *DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  uint64_t v5;
  uint64_t v6;
  unsigned int v8;
  unsigned int v9;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = *DerivedStorage;
  if (*DerivedStorage)
  {
    v6 = DerivedStorage[1];
    if (v6)
    {
      v9 = 1061109567;
      v8 = 0;
      MovieInformationLockForRead(v5);
      MovieTrackGetBasicInfo(v6, &v9, &v8);
      MovieInformationUnlockForRead(*DerivedStorage);
      CFStringAppendFormat(Mutable, 0, CFSTR("<MovieEditCursorService: '%c%c%c%c' trackID %d>"), HIBYTE(v9), BYTE2(v9), BYTE1(v9), v9, v8);
    }
  }
  return Mutable;
}

uint64_t MovieEditCursorServiceCreateCursorAtTrackTime(const void *a1, CMTime *a2, _QWORD *a3)
{
  uint64_t *DerivedStorage;
  uint64_t *v7;
  uint64_t v8;
  uint64_t EditIndexForTrackTime;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  CFTypeRef v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  CMTime v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v26 = 0;
  v27 = 0;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  if (!*DerivedStorage)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  if (!MovieTrackIsValid(DerivedStorage[1]))
    return FigSignalErrorAt();
  v8 = v7[1];
  MovieInformationLockForRead(*v7);
  v19 = *a2;
  EditIndexForTrackTime = MovieTrackFindEditIndexForTrackTime(v8, &v19, &v26);
  if (!(_DWORD)EditIndexForTrackTime)
    EditIndexForTrackTime = MovieTrackGetEditSegmentWithIndex(v8, v26, &v20);
  MovieInformationUnlockForRead(*v7);
  if (!(_DWORD)EditIndexForTrackTime)
  {
    CFGetAllocator(a1);
    FigEditCursorGetClassID();
    v10 = CMDerivedObjectCreate();
    if ((_DWORD)v10)
    {
      return v10;
    }
    else
    {
      v11 = CMBaseObjectGetDerivedStorage();
      v12 = (const void *)*v7;
      if (*v7)
        v12 = CFRetain(v12);
      *(_QWORD *)v11 = v12;
      v13 = (CFTypeRef)v7[1];
      if (v13)
        v13 = CFRetain(v13);
      EditIndexForTrackTime = 0;
      *(_QWORD *)(v11 + 8) = v13;
      *(_DWORD *)(v11 + 16) = v26;
      v15 = v24;
      v14 = v25;
      v16 = v23;
      *(_OWORD *)(v11 + 52) = v22;
      *(_OWORD *)(v11 + 68) = v16;
      *(_OWORD *)(v11 + 84) = v15;
      v17 = v21;
      *(_OWORD *)(v11 + 20) = v20;
      *(_OWORD *)(v11 + 100) = v14;
      *(_OWORD *)(v11 + 36) = v17;
      *a3 = v27;
    }
  }
  return EditIndexForTrackTime;
}

void MovieEditCursorFinalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
}

__CFString *MovieEditCursorCopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = *(_QWORD *)DerivedStorage;
  if (*(_QWORD *)DerivedStorage)
  {
    v6 = *(_QWORD *)(DerivedStorage + 8);
    if (v6)
    {
      v8 = 0;
      MovieInformationLockForRead(v5);
      MovieTrackGetBasicInfo(v6, &v8, (_DWORD *)&v8 + 1);
      MovieInformationUnlockForRead(*(_QWORD *)DerivedStorage);
      CFStringAppendFormat(Mutable, 0, CFSTR("<MovieEditCursor: %c%c%c%c trackID %d, editIndex %d>"), BYTE3(v8), BYTE2(v8), BYTE1(v8), v8, HIDWORD(v8), *(unsigned int *)(DerivedStorage + 16));
    }
  }
  return Mutable;
}

uint64_t MovieEditCursorCopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t *DerivedStorage;
  const void *v7;
  const void *v8;
  const void **v9;
  uint64_t v10;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  MovieInformationLockForRead(*DerivedStorage);
  if (!a4)
  {
    v10 = FigSignalErrorAt();
    goto LABEL_13;
  }
  *a4 = 0;
  if (CFEqual(a2, CFSTR("TimeRangesMayIncrease")))
  {
    v7 = (const void *)*MEMORY[0x1E0C9AE40];
    if (*(_BYTE *)(*DerivedStorage + 88) && MovieInformationCouldContainFragments(*DerivedStorage))
      v7 = (const void *)*MEMORY[0x1E0C9AE50];
    v8 = v7;
  }
  else
  {
    if (!CFEqual(a2, CFSTR("RepeatsEdits")))
    {
      v10 = 4294954512;
      goto LABEL_13;
    }
    if (*(_BYTE *)(DerivedStorage[1] + 723))
      v9 = (const void **)MEMORY[0x1E0C9AE50];
    else
      v9 = (const void **)MEMORY[0x1E0C9AE40];
    v8 = *v9;
  }
  v10 = 0;
  *a4 = CFRetain(v8);
LABEL_13:
  MovieInformationUnlockForRead(*DerivedStorage);
  return v10;
}

uint64_t MovieEditCursorCopy(const void *a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v6;
  CFTypeRef v7;
  const void *v8;
  CFTypeRef v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!MovieTrackIsValid(*(_QWORD *)(DerivedStorage + 8)))
    return FigSignalErrorAt();
  CFGetAllocator(a1);
  FigEditCursorGetClassID();
  result = CMDerivedObjectCreate();
  if (!(_DWORD)result)
  {
    v6 = CMBaseObjectGetDerivedStorage();
    v7 = *(CFTypeRef *)DerivedStorage;
    if (*(_QWORD *)DerivedStorage)
      v7 = CFRetain(v7);
    *(_QWORD *)v6 = v7;
    v8 = *(const void **)(DerivedStorage + 8);
    if (v8)
      v9 = CFRetain(v8);
    else
      v9 = 0;
    result = 0;
    *(_QWORD *)(v6 + 8) = v9;
    *(_DWORD *)(v6 + 16) = *(_DWORD *)(DerivedStorage + 16);
    v10 = *(_OWORD *)(DerivedStorage + 20);
    *(_OWORD *)(v6 + 36) = *(_OWORD *)(DerivedStorage + 36);
    *(_OWORD *)(v6 + 20) = v10;
    v11 = *(_OWORD *)(DerivedStorage + 52);
    v12 = *(_OWORD *)(DerivedStorage + 68);
    v13 = *(_OWORD *)(DerivedStorage + 84);
    *(_OWORD *)(v6 + 100) = *(_OWORD *)(DerivedStorage + 100);
    *(_OWORD *)(v6 + 84) = v13;
    *(_OWORD *)(v6 + 68) = v12;
    *(_OWORD *)(v6 + 52) = v11;
    *a2 = 0;
  }
  return result;
}

uint64_t MovieEditCursorStep(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  unsigned int v5;
  uint64_t EditSegmentCount;
  int v7;
  int v8;
  unsigned int EditSegmentWithIndex;
  BOOL v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(_QWORD *)(DerivedStorage + 8);
  MovieInformationLockForRead(*(_QWORD *)DerivedStorage);
  v5 = ValidateMovieEditCursor();
  if (v5)
  {
    EditSegmentWithIndex = v5;
    v8 = 0;
  }
  else
  {
    EditSegmentCount = MovieTrackGetEditSegmentCount(v4);
    v7 = *(_DWORD *)(DerivedStorage + 16) + a2;
    if (v7 < 0)
    {
      v7 = 0;
      v8 = 1;
    }
    else if (EditSegmentCount > v7)
    {
      v8 = 0;
    }
    else
    {
      v7 = EditSegmentCount - 1;
      v8 = 1;
    }
    *(_DWORD *)(DerivedStorage + 16) = v7;
    EditSegmentWithIndex = MovieTrackGetEditSegmentWithIndex(*(_QWORD *)(DerivedStorage + 8), v7, (_OWORD *)(DerivedStorage + 20));
  }
  MovieInformationUnlockForRead(*(_QWORD *)DerivedStorage);
  if (v8)
    v10 = EditSegmentWithIndex == 0;
  else
    v10 = 0;
  if (v10)
    return 4294954776;
  else
    return EditSegmentWithIndex;
}

uint64_t MovieEditCursorGetEditSegment(uint64_t a1, _OWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MovieInformationLockForRead(*(_QWORD *)DerivedStorage);
  v4 = ValidateMovieEditCursor();
  if (!(_DWORD)v4)
  {
    v5 = *(_OWORD *)(DerivedStorage + 36);
    *a2 = *(_OWORD *)(DerivedStorage + 20);
    a2[1] = v5;
    v6 = *(_OWORD *)(DerivedStorage + 52);
    v7 = *(_OWORD *)(DerivedStorage + 68);
    v8 = *(_OWORD *)(DerivedStorage + 100);
    a2[4] = *(_OWORD *)(DerivedStorage + 84);
    a2[5] = v8;
    a2[2] = v6;
    a2[3] = v7;
  }
  MovieInformationUnlockForRead(*(_QWORD *)DerivedStorage);
  return v4;
}

uint64_t ValidateMovieEditCursor()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t result;
  uint64_t EditSegmentCount;
  uint64_t v4;
  int32_t v5;
  int32_t v6;
  int32_t v7;
  int32_t v8;
  CMTime *p_time1;
  CMTime *p_time2;
  CMTime v11;
  CMTime v12;
  CMTime time2;
  CMTime time1;
  CMTime v15[2];
  __int128 v16;
  _OWORD v17[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(_QWORD *)(DerivedStorage + 8);
  memset(v17, 0, sizeof(v17));
  v16 = 0u;
  memset(v15, 0, sizeof(v15));
  result = MovieInformationIsMutable(*(_QWORD *)DerivedStorage);
  if ((_DWORD)result)
  {
    if (MovieTrackIsValid(*(_QWORD *)(DerivedStorage + 8))
      && (EditSegmentCount = MovieTrackGetEditSegmentCount(v1), v4 = *(int *)(DerivedStorage + 16),
                                                                EditSegmentCount > v4))
    {
      result = MovieTrackGetEditSegmentWithIndex(*(_QWORD *)(DerivedStorage + 8), v4, v15);
      if (!(_DWORD)result)
      {
        *(_OWORD *)&time1.value = v16;
        time1.epoch = *(_QWORD *)&v17[0];
        time2 = *(CMTime *)(DerivedStorage + 68);
        if (CMTimeCompare(&time1, &time2))
          return FigSignalErrorAt();
        time1 = v15[0];
        time2 = *(CMTime *)(DerivedStorage + 20);
        if (CMTimeCompare(&time1, &time2))
          return FigSignalErrorAt();
        if ((v15[0].flags & 0x1D) != 1)
          return 0;
        time1 = *(CMTime *)(DerivedStorage + 92);
        time2 = *(CMTime *)(DerivedStorage + 44);
        if (CMTimeCompare(&time1, &time2))
        {
          v5 = *(_DWORD *)(DerivedStorage + 92);
          v6 = *(_DWORD *)(DerivedStorage + 100);
          time1 = v15[1];
          CMTimeMultiplyByRatio(&v12, &time1, v5, v6);
          v7 = *(_DWORD *)(DerivedStorage + 44);
          v8 = *(_DWORD *)(DerivedStorage + 52);
          time1 = *(CMTime *)((char *)v17 + 8);
          CMTimeMultiplyByRatio(&v11, &time1, v7, v8);
          p_time1 = &v12;
          p_time2 = &v11;
        }
        else
        {
          time1 = v15[1];
          time2 = *(CMTime *)((char *)v17 + 8);
          p_time1 = &time1;
          p_time2 = &time2;
        }
        result = CMTimeCompare(p_time1, p_time2);
        if ((_DWORD)result)
          return FigSignalErrorAt();
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t CopyCreationDateAsDictionary(const __CFAllocator *a1, const void *a2, const __CFDictionary *a3, __CFDictionary **a4)
{
  __CFDictionary *Mutable;
  __CFDictionary *v8;
  const void *v9;

  if (!a4)
    return FigSignalErrorAt();
  Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return FigSignalErrorAt();
  v8 = Mutable;
  CFDictionaryAddValue(Mutable, CFSTR("CreationDate_Value"), a2);
  if (a3 && CFDictionaryGetValue(a3, CFSTR("locale")))
  {
    v9 = (const void *)MEMORY[0x194029F3C]();
    if (v9)
      CFDictionaryAddValue(v8, CFSTR("CreationDate_LocaleIdentifier"), v9);
  }
  *a4 = v8;
  return 0;
}

uint64_t MovieFormatReaderGetTrackCount(uint64_t a1, uint64_t *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MovieInformationLockForRead(*(_QWORD *)(DerivedStorage + 8));
  *a2 = MovieInformationGetTrackCount(*(_QWORD *)(DerivedStorage + 8));
  MovieInformationUnlockForRead(*(_QWORD *)(DerivedStorage + 8));
  return 0;
}

uint64_t MovieFormatReaderParseAdditionalFragments(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TrackCount;
  uint64_t v9;
  uint64_t v10;
  const __CFAllocator *v11;
  const CFDictionaryValueCallBacks *v12;
  const void *TrackForTrackIndex;
  uint64_t AudioQueue;
  char v15;
  CFTypeRef v16;
  CFDictionaryRef v17;
  uint64_t v18;
  uint64_t v19;
  const __CFArray *v20;
  CFIndex Count;
  CFIndex v22;
  CFIndex i;
  unsigned int v25;
  _DWORD *v26;
  uint64_t v27;
  int v28;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v28 = 0;
  v5 = MovieInformationLockForWrite(*(_QWORD *)(DerivedStorage + 8));
  if ((_DWORD)v5)
    return v5;
  v6 = *(_QWORD *)(DerivedStorage + 8);
  if (*(_BYTE *)(v6 + 88))
  {
    MovieInformationClearChangeBits((_QWORD *)v6, 1);
    v27 = DerivedStorage;
    v25 = MoovParseIncrementalFragments(*(_QWORD *)(DerivedStorage + 8), &v28);
    v7 = CMBaseObjectGetDerivedStorage();
    if ((MovieInformationGetChangeBits(*(_QWORD *)(v7 + 8)) & 1) != 0)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }
    v26 = a3;
    TrackCount = MovieInformationGetTrackCount(*(_QWORD *)(v7 + 8));
    if (TrackCount >= 1)
    {
      v9 = TrackCount;
      v10 = 0;
      v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v12 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
      do
      {
        TrackForTrackIndex = (const void *)MovieInformationFindTrackForTrackIndex(*(_QWORD *)(v7 + 8), v10);
        AudioQueue = FigAudioQueueTimingShimGetAudioQueue((uint64_t)TrackForTrackIndex);
        if (AudioQueue)
        {
          v15 = AudioQueue;
          cf = 0;
          CopyTrackReader(v7, TrackForTrackIndex, &cf);
          v16 = cf;
          if (cf)
          {
            if ((v15 & 2) != 0)
            {
              v17 = CFDictionaryCreate(v11, (const void **)kFigTrackReaderPayloadKey_FragmentWasAdded, MEMORY[0x1E0C9AE50], 1, MEMORY[0x1E0C9B390], v12);
              CMNotificationCenterGetDefaultLocalCenter();
              CMNotificationCenterPostNotification();
              if (v17)
                CFRelease(v17);
            }
            if ((v15 & 1) != 0)
            {
              CMNotificationCenterGetDefaultLocalCenter();
              CMNotificationCenterPostNotification();
            }
            CFRelease(v16);
          }
        }
        ++v10;
      }
      while (v9 != v10);
    }
    if ((v28 & 4) != 0)
    {
      DerivedStorage = v27;
      v18 = v25;
      if (*(_BYTE *)(*(_QWORD *)(v27 + 8) + 89))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        MEMORY[0x19402EEEC](*(_QWORD *)(v27 + 16));
        v20 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
        MEMORY[0x19402EF04](*(_QWORD *)(v27 + 16));
        Count = CFArrayGetCount(v20);
        if (Count >= 1)
        {
          v22 = Count;
          for (i = 0; i != v22; ++i)
          {
            CFArrayGetValueAtIndex(v20, i);
            CMNotificationCenterGetDefaultLocalCenter();
            CMNotificationCenterPostNotification();
          }
        }
        if (v20)
          CFRelease(v20);
      }
    }
    else
    {
      DerivedStorage = v27;
      v18 = v25;
      if ((v28 & 2) != 0)
      {
        v19 = *(_QWORD *)(v27 + 8);
        if (!*(_BYTE *)(v19 + 90))
        {
          *(_BYTE *)(v19 + 90) = 1;
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterPostNotification();
        }
      }
    }
    if (v26)
      *v26 = v28;
  }
  else
  {
    v18 = FigSignalErrorAt();
  }
  MovieInformationUnlockForWrite(*(_QWORD *)(DerivedStorage + 8));
  return v18;
}

uint64_t MovieFormatReaderCopyTrackByIndex(uint64_t a1, uint64_t a2, _QWORD *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t DerivedStorage;
  const void *TrackForTrackIndex;
  uint64_t v11;
  uint64_t BasicInfo;
  uint64_t v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MovieInformationLockForRead(*(_QWORD *)(DerivedStorage + 8));
  TrackForTrackIndex = (const void *)MovieInformationFindTrackForTrackIndex(*(_QWORD *)(DerivedStorage + 8), a2);
  if (TrackForTrackIndex)
  {
    v11 = (uint64_t)TrackForTrackIndex;
    if (!a3 || (BasicInfo = CopyTrackReader(DerivedStorage, TrackForTrackIndex, a3), !(_DWORD)BasicInfo))
      BasicInfo = MovieTrackGetBasicInfo(v11, a4, a5);
    v13 = BasicInfo;
  }
  else
  {
    v13 = 4294954453;
  }
  MovieInformationUnlockForRead(*(_QWORD *)(DerivedStorage + 8));
  return v13;
}

uint64_t MovieFormatReaderCopyTrackByID(uint64_t a1, int a2, _QWORD *a3, _DWORD *a4)
{
  uint64_t DerivedStorage;
  const void *TrackForTrackID;
  uint64_t v9;
  uint64_t BasicInfo;
  uint64_t v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MovieInformationLockForRead(*(_QWORD *)(DerivedStorage + 8));
  TrackForTrackID = (const void *)MovieInformationFindTrackForTrackID(*(_QWORD *)(DerivedStorage + 8), a2);
  if (TrackForTrackID)
  {
    v9 = (uint64_t)TrackForTrackID;
    if (!a3 || (BasicInfo = CopyTrackReader(DerivedStorage, TrackForTrackID, a3), !(_DWORD)BasicInfo))
      BasicInfo = MovieTrackGetBasicInfo(v9, a4, 0);
  }
  else
  {
    BasicInfo = FigSignalErrorAt();
  }
  v11 = BasicInfo;
  MovieInformationUnlockForRead(*(_QWORD *)(DerivedStorage + 8));
  return v11;
}

uint64_t MovieFormatReaderCopyTrackByType(uint64_t a1, uint64_t a2, int a3, _QWORD *a4, _DWORD *a5)
{
  uint64_t DerivedStorage;
  const void *NthTrackOfType;
  uint64_t v11;
  uint64_t BasicInfo;
  uint64_t v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MovieInformationLockForRead(*(_QWORD *)(DerivedStorage + 8));
  NthTrackOfType = (const void *)MovieInformationFindNthTrackOfType(*(_QWORD *)(DerivedStorage + 8), a2, a3);
  if (NthTrackOfType)
  {
    v11 = (uint64_t)NthTrackOfType;
    if (!a4 || (BasicInfo = CopyTrackReader(DerivedStorage, NthTrackOfType, a4), !(_DWORD)BasicInfo))
      BasicInfo = MovieTrackGetBasicInfo(v11, 0, a5);
    v13 = BasicInfo;
  }
  else
  {
    v13 = 4294954453;
  }
  MovieInformationUnlockForRead(*(_QWORD *)(DerivedStorage + 8));
  return v13;
}

uint64_t CreateTrackReaderForMovieTrack(uint64_t a1, const void *a2, const void *a3, _QWORD *a4)
{
  uint64_t v7;
  _QWORD *DerivedStorage;
  CFTypeRef v9;
  CFTypeRef v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  FigTrackReaderGetClassID();
  v7 = CMDerivedObjectCreate();
  if ((_DWORD)v7)
    return v7;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (a2)
    v9 = CFRetain(a2);
  else
    v9 = 0;
  *DerivedStorage = v9;
  if (a3)
    v10 = CFRetain(a3);
  else
    v10 = 0;
  DerivedStorage[1] = v10;
  v11 = FigReentrantMutexCreate();
  DerivedStorage[2] = v11;
  if (!v11)
    return FigSignalErrorAt();
  v12 = FigSimpleMutexCreate();
  DerivedStorage[6] = v12;
  if (!v12)
    return FigSignalErrorAt();
  v13 = 0;
  *a4 = 0;
  return v13;
}

void MovieTrackReaderFinalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 64))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterBarrier();
  }
  v1 = *(const void **)(DerivedStorage + 24);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 40);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  v3 = *(const void **)(DerivedStorage + 32);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  if (*(_QWORD *)(DerivedStorage + 16))
  {
    FigSimpleMutexDestroy();
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  if (*(_QWORD *)(DerivedStorage + 48))
  {
    FigSimpleMutexDestroy();
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 56);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 56) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v5 = *(const void **)(DerivedStorage + 8);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
}

CFMutableStringRef MovieTrackReaderCopyDebugDescription(const void *a1)
{
  uint64_t *DerivedStorage;
  const __CFAllocator *v3;
  CFMutableStringRef Mutable;
  uint64_t v5;
  unsigned int TrackType;
  const __CFArray *NumFormatDescriptions;
  const void *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  double Seconds;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  Float64 v16;
  Float64 v17;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CFStringRef v24;
  uint64_t timescale;
  CMTimeValue value;
  __CFString *theString;
  CMTime rhs;
  CMTime lhs;
  CMTime v30;
  CMTime v31;
  CMTime time;
  uint64_t v33;
  uint64_t v34;
  int epoch_high;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  if (*DerivedStorage)
  {
    v5 = DerivedStorage[1];
    if (v5)
    {
      TrackType = MovieTrackGetTrackType(DerivedStorage[1]);
      v33 = 0;
      MovieInformationLockForRead(*DerivedStorage);
      MovieTrackGetMediaDuration(v5, (uint64_t)&time);
      timescale = time.timescale;
      value = time.value;
      v34 = *(_QWORD *)&time.flags;
      epoch_high = HIDWORD(time.epoch);
      MovieTrackGetBasicInfo(v5, &v33, (_DWORD *)&v33 + 1);
      NumFormatDescriptions = MovieTrackGetNumFormatDescriptions(v5);
      v8 = *(const void **)(*DerivedStorage + 48);
      theString = Mutable;
      if (v8)
        v24 = CFCopyDescription(v8);
      else
        v24 = 0;
      v9 = HIDWORD(v33);
      v23 = BYTE3(v33);
      v22 = BYTE2(v33);
      v20 = v33;
      v21 = BYTE1(v33);
      if (MovieTrackIsValid(v5))
        v10 = "";
      else
        v10 = " (Invalidated)";
      v11 = *(unsigned int *)(v5 + 288);
      time.value = value;
      time.timescale = timescale;
      *(_QWORD *)&time.flags = v34;
      HIDWORD(time.epoch) = epoch_high;
      Seconds = CMTimeGetSeconds(&time);
      v13 = "s";
      if ((_DWORD)NumFormatDescriptions == 1)
        v13 = "";
      v19 = v10;
      Mutable = theString;
      CFStringAppendFormat(theString, 0, CFSTR("\tMovieTrackReader: stream<%@> mediaType %c%c%c%c trackType %c%c%c%c trackID %d%s contains %d samples media duration %1.3f seconds (%lld/%d) has %d formatDescription%s"), v24, v23, v22, v21, v20, HIBYTE(TrackType), BYTE2(TrackType), BYTE1(TrackType), TrackType, v9, v19, v11, *(_QWORD *)&Seconds, value, timescale, NumFormatDescriptions,
        v13);
      v14 = *(_QWORD *)(v5 + 728);
      if (v14 && *(_QWORD *)(v14 + 56))
      {
        v15 = *(unsigned int *)(v14 + 8);
        CMTimeMake(&v31, *(_QWORD *)v14, *(_DWORD *)(v5 + 232));
        v16 = CMTimeGetSeconds(&v31);
        CMTimeMake(&lhs, *(_QWORD *)(v5 + 224), *(_DWORD *)(v5 + 232));
        CMTimeMake(&rhs, **(_QWORD **)(v5 + 728), *(_DWORD *)(v5 + 232));
        CMTimeAdd(&v30, &lhs, &rhs);
        v17 = CMTimeGetSeconds(&v30);
        CFStringAppendFormat(theString, 0, CFSTR("\nFragments supply %d samples or %1.3f seconds (%1.3f total media duration)"), v15, *(_QWORD *)&v16, *(_QWORD *)&v17);
      }
      if (v24)
        CFRelease(v24);
      MovieInformationUnlockForRead(*DerivedStorage);
    }
  }
  return Mutable;
}

uint64_t MovieTrackReaderCopyProperty(const void *a1, const void *a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  _QWORD *DerivedStorage;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  const void *value;
  int MediaTimeScale;
  const __CFAllocator *v15;
  CFNumberType v16;
  uint64_t MustBeShown;
  const __CFAllocator *v18;
  float *p_valuePtr;
  CFNumberType v20;
  double v21;
  float v22;
  uint64_t v23;
  uint64_t EditCursorService;
  uint64_t v25;
  const __CFString *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, const __CFString *, const __CFString *);
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, const __CFString *, const __CFString *, uint64_t, const __CFAllocator *, CMTimeRange *, _QWORD);
  uint64_t Property;
  CFTypeID v36;
  int IsFrameReorderingRequired;
  const void **v38;
  CFDictionaryRef QTLoadSettingsDictionary;
  int IsEnabled;
  int v41;
  int v42;
  int v43;
  __int16 Layer;
  CFTypeRef *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, const __CFString *, const __CFString *);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const __CFAllocator *v52;
  unsigned int (*v53)(uint64_t, const __CFString *, const __CFString *, uint64_t, const __CFAllocator *, CMTimeRange *, CMTimeRange *);
  const __CFNumber *v54;
  uint64_t v55;
  int v56;
  CFStringRef StringForLanguageCode;
  CFStringRef v58;
  uint64_t (*v59)(uint64_t, const __CFString *, const __CFString *, _QWORD, _QWORD, CMTimeRange *, _QWORD);
  int v60;
  const void *v61;
  CFTypeID v62;
  const void *v63;
  const void *v64;
  uint64_t v65;
  const void *v66;
  __CFArray *Mutable;
  __CFArray *v68;
  CFMutableArrayRef v69;
  __CFArray *v70;
  const void *v71;
  const __CFAllocator *v72;
  __CFDictionary *theDict;
  CMTimeRange time;
  CMTimeRange valuePtr;
  uint64_t v76;
  float v77;
  CGSize v78;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage || !DerivedStorage[1])
    return FigSignalErrorAt();
  v9 = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v10 = (_QWORD *)*v9;
  v11 = v9[1];
  MovieInformationLockForRead(*v9);
  if (!a4 || !MovieTrackIsValid(v11))
    goto LABEL_31;
  *a4 = 0;
  if (!CFEqual(a2, CFSTR("TrackFormatDescriptionArray")))
  {
    if (CFEqual(a2, CFSTR("TrackTimescale")))
    {
      MediaTimeScale = MovieTrackGetMediaTimeScale(v11);
LABEL_10:
      LODWORD(valuePtr.start.value) = MediaTimeScale;
      v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v16 = kCFNumberSInt32Type;
LABEL_11:
      value = CFNumberCreate(v15, v16, &valuePtr);
      goto LABEL_17;
    }
    if (CFEqual(a2, CFSTR("TrackDuration")))
    {
      memset(&valuePtr, 0, 24);
      GetTrackEditedDuration(a1, &valuePtr.start);
LABEL_16:
      *(_OWORD *)&time.start.value = *(_OWORD *)&valuePtr.start.value;
      time.start.epoch = valuePtr.start.epoch;
      value = CMTimeCopyAsDictionary(&time.start, a3);
      goto LABEL_17;
    }
    if (CFEqual(a2, CFSTR("UneditedTrackDuration")))
    {
      memset(&valuePtr, 0, 24);
      MovieTrackGetMediaDuration(v11, (uint64_t)&valuePtr);
      goto LABEL_16;
    }
    if (CFEqual(a2, CFSTR("UneditedNumDataBytes")))
    {
      valuePtr.start.value = 0;
      MustBeShown = MovieTrackComputeTotalTrackBytes(v10, v11, &valuePtr.start.value);
      if ((_DWORD)MustBeShown)
        goto LABEL_19;
      v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      p_valuePtr = (float *)&valuePtr;
      v20 = kCFNumberSInt64Type;
      goto LABEL_23;
    }
    if (CFEqual(a2, CFSTR("UneditedSampleCount")))
    {
      MediaTimeScale = MovieTrackGetSampleCount(v11);
      goto LABEL_10;
    }
    if (CFEqual(a2, CFSTR("EstimatedDataRate")))
    {
      v76 = 0;
      MustBeShown = MovieTrackComputeTotalTrackBytes(v10, v11, &v76);
      if ((_DWORD)MustBeShown)
        goto LABEL_19;
      memset(&valuePtr, 0, 24);
      MovieTrackGetMediaDuration(v11, (uint64_t)&valuePtr);
      v21 = (double)v76;
      *(_OWORD *)&time.start.value = *(_OWORD *)&valuePtr.start.value;
      time.start.epoch = valuePtr.start.epoch;
      v22 = v21 / CMTimeGetSeconds(&time.start);
      v77 = v22;
      v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      p_valuePtr = &v77;
      goto LABEL_37;
    }
    if (CFEqual(a2, CFSTR("PeakDataRate")))
    {
      LODWORD(valuePtr.start.value) = 0;
      v23 = MovieTrackComputePeakDataRate(v10, v11, (float *)&valuePtr);
LABEL_35:
      MustBeShown = v23;
      if ((_DWORD)v23)
        goto LABEL_19;
      v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      p_valuePtr = (float *)&valuePtr;
LABEL_37:
      v20 = kCFNumberFloat32Type;
LABEL_23:
      value = CFNumberCreate(v18, v20, p_valuePtr);
      goto LABEL_18;
    }
    if (CFEqual(a2, CFSTR("NominalFrameRate")))
    {
      LODWORD(valuePtr.start.value) = 0;
      v23 = MovieTrackComputeNominalFrameRate(v10, v11, (float *)&valuePtr);
      goto LABEL_35;
    }
    if (CFEqual(a2, CFSTR("Volume")))
    {
      LODWORD(valuePtr.start.value) = MovieTrackGetVolume(v11);
      v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v16 = kCFNumberFloat32Type;
      goto LABEL_11;
    }
    if (CFEqual(a2, CFSTR("LoudnessInfo")))
    {
      valuePtr.start.value = 0;
      LODWORD(time.start.value) = 8;
      v25 = *v9;
      if (*(_BYTE *)(*v9 + 81))
      {
        if (*(_BYTE *)(v25 + 82))
        {
LABEL_43:
          v26 = CFSTR("udta");
          v27 = AssureTrackQuickTimeUserDataReaderCreated((uint64_t)v9);
          goto LABEL_50;
        }
      }
      else if (!*(_BYTE *)(v25 + 83))
      {
        goto LABEL_43;
      }
      v26 = CFSTR("uiso");
      v27 = AssureTrackISOUserDataReaderCreated((uint64_t)v9);
LABEL_50:
      v30 = v27;
      if (!v27
        || (v31 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 40)) == 0
        || (v32 = v31(v30, v26, CFSTR("ludt")), v33 = v32 - 1, v32 < 1))
      {
LABEL_59:
        MustBeShown = 4294954513;
        goto LABEL_61;
      }
      v34 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFString *, uint64_t, const __CFAllocator *, CMTimeRange *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
      if (!v34)
      {
        MustBeShown = 4294954514;
LABEL_61:
        if (valuePtr.start.value)
          CFRelease((CFTypeRef)valuePtr.start.value);
        goto LABEL_19;
      }
      Property = v34(v30, v26, CFSTR("ludt"), v33, a3, &valuePtr, 0);
      if ((_DWORD)Property)
      {
LABEL_58:
        MustBeShown = Property;
        goto LABEL_61;
      }
      if (valuePtr.start.value)
      {
        v36 = CFGetTypeID((CFTypeRef)valuePtr.start.value);
        if (v36 == CFDataGetTypeID())
        {
          Property = AudioFormatGetProperty(0x6C646C62u, 8u, &valuePtr, (UInt32 *)&time, a4);
          goto LABEL_58;
        }
        goto LABEL_59;
      }
LABEL_76:
      MustBeShown = 4294954513;
      goto LABEL_19;
    }
    if (CFEqual(a2, CFSTR("TrackFrameReorderingRequired")))
    {
      v28 = *(_DWORD *)(v11 + 24);
      MustBeShown = 4294954452;
      if (v28 > 1935893869)
      {
        if (v28 != 1986618469)
        {
          v29 = 1935893870;
LABEL_68:
          if (v28 != v29)
            goto LABEL_19;
        }
      }
      else if (v28 != 1635088502)
      {
        v29 = 1885954932;
        goto LABEL_68;
      }
      IsFrameReorderingRequired = MovieTrackIsFrameReorderingRequired(v10, v11);
      goto LABEL_70;
    }
    if (CFEqual(a2, CFSTR("TrackLanguageCode")))
    {
      valuePtr.start.value = 0;
      MovieTrackGetLanguageInformation(v11, 0, &valuePtr, 0);
      value = (const void *)valuePtr.start.value;
      if (!valuePtr.start.value)
        goto LABEL_17;
      goto LABEL_73;
    }
    if (CFEqual(a2, CFSTR("ExtendedLanguageTagString")))
    {
      valuePtr.start.value = 0;
      MovieTrackGetLanguageInformation(v11, 0, 0, &valuePtr);
      value = (const void *)valuePtr.start.value;
      if (!valuePtr.start.value)
        goto LABEL_76;
LABEL_73:
      value = CFRetain(value);
      goto LABEL_17;
    }
    if (CFEqual(a2, CFSTR("TrackQTLoadSettings")))
    {
      QTLoadSettingsDictionary = MovieInformationCreateQTLoadSettingsDictionary(a3, (uint64_t)v10, (_BYTE *)v11);
      *a4 = QTLoadSettingsDictionary;
      if (QTLoadSettingsDictionary)
        MustBeShown = 0;
      else
        MustBeShown = 4294954513;
      goto LABEL_19;
    }
    if (CFEqual(a2, CFSTR("TrackEnabled")))
    {
      IsEnabled = MovieTrackIsEnabled(v11);
      goto LABEL_83;
    }
    if (CFEqual(a2, CFSTR("TrackDimensions")))
    {
      LODWORD(valuePtr.start.value) = 0;
      LODWORD(time.start.value) = 0;
      MovieTrackGetSpatialInformation(v11, &valuePtr, &time, 0);
      goto LABEL_88;
    }
    if (CFEqual(a2, CFSTR("CleanApertureDimensions")))
    {
      LODWORD(valuePtr.start.value) = 0;
      LODWORD(time.start.value) = 0;
      MovieTrackGetCleanApertureDimensions(v11, (float *)&valuePtr, (float *)&time);
      if (!v41)
        goto LABEL_76;
LABEL_88:
      v78.width = *(float *)&valuePtr.start.value;
      v78.height = *(float *)&time.start.value;
      value = CGSizeCreateDictionaryRepresentation(v78);
      goto LABEL_17;
    }
    if (CFEqual(a2, CFSTR("ProductionApertureDimensions")))
    {
      LODWORD(valuePtr.start.value) = 0;
      LODWORD(time.start.value) = 0;
      MovieTrackGetProductionApertureDimensions(v11, (float *)&valuePtr, (float *)&time);
      if (!v42)
        goto LABEL_76;
      goto LABEL_88;
    }
    if (CFEqual(a2, CFSTR("EncodedPixelsDimensions")))
    {
      LODWORD(valuePtr.start.value) = 0;
      LODWORD(time.start.value) = 0;
      MovieTrackGetEncodedPixelsDimensions(v11, (float *)&valuePtr, (float *)&time);
      if (!v43)
        goto LABEL_76;
      goto LABEL_88;
    }
    if (CFEqual(a2, CFSTR("TrackMatrix")))
    {
      memset(&valuePtr, 0, 36);
      MovieTrackGetSpatialInformation(v11, 0, 0, (uint64_t)&valuePtr);
      value = FigMatrixToCFArray(a3, (uint64_t)&valuePtr);
      goto LABEL_17;
    }
    if (CFEqual(a2, CFSTR("TrackLayer")))
    {
      Layer = MovieTrackGetLayer(v11);
LABEL_104:
      LOWORD(valuePtr.start.value) = Layer;
LABEL_105:
      v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v16 = kCFNumberSInt16Type;
      goto LABEL_11;
    }
    if (CFEqual(a2, CFSTR("AlternateGroupID")))
    {
      Layer = MovieTrackGetAlternateGroupID(v11);
      goto LABEL_104;
    }
    if (CFEqual(a2, CFSTR("ProvisionalAlternateGroupID")))
    {
      LOWORD(valuePtr.start.value) = 0;
      if (!MovieTrackGetProvisionalAlternateGroupID(v11, &valuePtr))
      {
        value = 0;
        goto LABEL_17;
      }
      goto LABEL_105;
    }
    if (CFEqual(a2, CFSTR("DefaultAlternateGroupID")))
    {
      Layer = MovieTrackGetDefaultAlternateGroupID(v11);
      goto LABEL_104;
    }
    if (CFEqual(a2, CFSTR("TrackExcludeFromAutoSelection")))
    {
      IsEnabled = MovieTrackIsExcludedFromAutoSelection(v11);
LABEL_83:
      v38 = (const void **)MEMORY[0x1E0C9AE50];
      if (IsEnabled != 1)
        v38 = (const void **)MEMORY[0x1E0C9AE40];
      goto LABEL_72;
    }
    if (CFEqual(a2, CFSTR("TrackIsSelfContained")))
    {
      IsFrameReorderingRequired = MovieTrackIsSelfContained(v11);
      goto LABEL_70;
    }
    if (CFEqual(a2, CFSTR("ContainsUnsupportedDataReferences")))
    {
      IsFrameReorderingRequired = MovieTrackContainsUnsupportedDataReferences((uint64_t)v10, v11);
      goto LABEL_70;
    }
    if (CFEqual(a2, CFSTR("AdvanceDecodeDelta")))
    {
      value = MovieTrackCreateAdvanceDecodeDeltaDictionary(a3, v10, v11);
      goto LABEL_17;
    }
    if (CFEqual(a2, CFSTR("ShowTimeCode")))
    {
      LOBYTE(valuePtr.start.value) = 0;
      MustBeShown = MovieTrackGetTimecodeMustBeShown(v11, &valuePtr);
      if ((_DWORD)MustBeShown)
        goto LABEL_19;
      v45 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      if (LOBYTE(valuePtr.start.value) != 1)
        v45 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
      value = CFRetain(*v45);
      goto LABEL_18;
    }
    if (CFEqual(a2, CFSTR("TrackName")))
    {
      v46 = AssureTrackQuickTimeUserDataReaderCreated((uint64_t)v9);
      if (!v46)
        goto LABEL_151;
      v47 = v46;
      v48 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 40);
      if (v48)
      {
        v49 = v48(v47, CFSTR("udta"), CFSTR("tnam"));
        if (v49)
        {
          v50 = v49;
          if (v49 >= 1)
          {
            v51 = 0;
            theDict = 0;
            v52 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            do
            {
              valuePtr.start.value = 0;
              time.start.value = 0;
              v53 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFString *, uint64_t, const __CFAllocator *, CMTimeRange *, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
              if (v53 && !v53(v47, CFSTR("udta"), CFSTR("tnam"), v51, v52, &valuePtr, &time))
              {
                LOWORD(v76) = 0;
                v54 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)time.start.value, CFSTR("languageCode"));
                if (v54)
                {
                  CFNumberGetValue(v54, kCFNumberSInt16Type, &v76);
                  v55 = *v9;
                  v56 = *(_BYTE *)(*v9 + 81) ? *(_BYTE *)(v55 + 82) == 0 : *(_BYTE *)(v55 + 83) != 0;
                  StringForLanguageCode = FigCreateStringForLanguageCode(v52, (unsigned __int16)v76, v56);
                  if (StringForLanguageCode)
                  {
                    v58 = StringForLanguageCode;
                    if (theDict
                      || (theDict = CFDictionaryCreateMutable(a3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) != 0)
                    {
                      CFDictionarySetValue(theDict, v58, (const void *)valuePtr.start.value);
                    }
                    else
                    {
                      theDict = 0;
                    }
                    CFRelease(v58);
                  }
                }
                if (valuePtr.start.value)
                  CFRelease((CFTypeRef)valuePtr.start.value);
                if (time.start.value)
                  CFRelease((CFTypeRef)time.start.value);
              }
              ++v51;
            }
            while (v50 != v51);
            goto LABEL_164;
          }
LABEL_151:
          theDict = 0;
LABEL_164:
          MustBeShown = 0;
          *a4 = theDict;
          goto LABEL_19;
        }
      }
      valuePtr.start.value = 0;
      v59 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFString *, _QWORD, _QWORD, CMTimeRange *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (!v59)
        goto LABEL_160;
      v60 = v59(v47, CFSTR("udta"), CFSTR("name"), 0, *MEMORY[0x1E0C9AE00], &valuePtr, 0);
      theDict = 0;
      v61 = (const void *)valuePtr.start.value;
      if (v60 || !valuePtr.start.value)
      {
LABEL_162:
        if (v61)
          CFRelease(v61);
        goto LABEL_164;
      }
      v62 = CFGetTypeID((CFTypeRef)valuePtr.start.value);
      if (v62 == CFStringGetTypeID())
      {
        time.start.value = (CMTimeValue)CFSTR("eng");
        theDict = CFDictionaryCreate(a3, (const void **)&time, (const void **)&valuePtr, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      }
      else
      {
LABEL_160:
        theDict = 0;
      }
      v61 = (const void *)valuePtr.start.value;
      goto LABEL_162;
    }
    if (CFEqual(a2, CFSTR("QuickTimeUserDataReader")))
    {
      value = (const void *)AssureTrackQuickTimeUserDataReaderCreated((uint64_t)v9);
      if (!value)
        goto LABEL_76;
      goto LABEL_73;
    }
    if (CFEqual(a2, CFSTR("ISOUserDataReader")))
    {
      value = (const void *)AssureTrackISOUserDataReaderCreated((uint64_t)v9);
      if (!value)
        goto LABEL_76;
      goto LABEL_73;
    }
    if (CFEqual(a2, CFSTR("QuickTimeMetadataReader")))
    {
      value = (const void *)AssureTrackQuickTimeMetadataReaderCreated((uint64_t)v9);
      if (!value)
        goto LABEL_76;
      goto LABEL_73;
    }
    if (CFEqual(a2, CFSTR("MetadataReaders")))
    {
      v63 = (const void *)AssureTrackQuickTimeUserDataReaderCreated((uint64_t)v9);
      v64 = (const void *)AssureTrackQuickTimeMetadataReaderCreated((uint64_t)v9);
      v65 = AssureTrackISOUserDataReaderCreated((uint64_t)v9);
      v66 = (const void *)v65;
      if (v63 || v65 || v64)
      {
        Mutable = CFArrayCreateMutable(a3, 0, MEMORY[0x1E0C9B378]);
        if (Mutable)
        {
          v68 = Mutable;
          if (v64)
            CFArrayAppendValue(Mutable, v64);
          if (v63)
            CFArrayAppendValue(v68, v63);
          if (v66)
            CFArrayAppendValue(v68, v66);
          MustBeShown = 0;
          *a4 = v68;
          goto LABEL_19;
        }
        goto LABEL_31;
      }
LABEL_193:
      MustBeShown = 0;
      goto LABEL_19;
    }
    if (CFEqual(a2, CFSTR("MetadataReaderTypes")))
    {
      v69 = CFArrayCreateMutable(a3, 0, MEMORY[0x1E0C9B378]);
      if (v69)
      {
        v70 = v69;
        if (MovieTrackMetadataFormatIsAvailable((int)v10, (_QWORD *)v11, CFSTR("com.apple.quicktime.udta")))CFArrayAppendValue(v70, CFSTR("QuickTimeUserDataReader"));
        if (MovieTrackMetadataFormatIsAvailable((int)v10, (_QWORD *)v11, CFSTR("org.mp4ra")))
          CFArrayAppendValue(v70, CFSTR("ISOUserDataReader"));
        if (MovieTrackMetadataFormatIsAvailable((int)v10, (_QWORD *)v11, CFSTR("com.apple.quicktime.mdta")))CFArrayAppendValue(v70, CFSTR("QuickTimeMetadataReader"));
        if (CFArrayGetCount(v70) >= 1)
        {
          MustBeShown = 0;
          *a4 = v70;
          goto LABEL_19;
        }
        CFRelease(v70);
        goto LABEL_193;
      }
LABEL_31:
      EditCursorService = FigSignalErrorAt();
      goto LABEL_32;
    }
    if (CFEqual(a2, CFSTR("EditCursorService")))
    {
      EditCursorService = MovieTrackReaderCreateEditCursorService(a1, (uint64_t)a3, a4);
      goto LABEL_32;
    }
    if (CFEqual(a2, CFSTR("HasRollInformation")))
    {
      IsFrameReorderingRequired = MovieTrackHasRollInformation(v11);
      goto LABEL_70;
    }
    if (CFEqual(a2, CFSTR("HasAudioSampleDependencyInformation")))
    {
      IsFrameReorderingRequired = MovieTrackHasAudioDependencyInformation(v11);
      goto LABEL_70;
    }
    if (CFEqual(a2, CFSTR("EditsExcludePrimingAndRemainderDuration")))
    {
      IsFrameReorderingRequired = MovieTrackEditsExcludeAudioPrimingAndRemainderDuration(v11);
      goto LABEL_70;
    }
    if (CFEqual(a2, CFSTR("GaplessSourceTimeRange")))
    {
      memset(&valuePtr, 0, sizeof(valuePtr));
      GetGaplessSourceTimeRange(&valuePtr);
      time = valuePtr;
      value = CMTimeRangeCopyAsDictionary(&time, a3);
      goto LABEL_17;
    }
    if (CFEqual(a2, CFSTR("HasSeamSamples")))
    {
      IsFrameReorderingRequired = MovieTrackHasSeamSamples(v11);
      goto LABEL_70;
    }
    if (CFEqual(a2, CFSTR("ContainsChapters")))
    {
      IsFrameReorderingRequired = MovieTrackIsChapterTrack((uint64_t)v10, v11);
LABEL_70:
      v38 = (const void **)MEMORY[0x1E0C9AE50];
      if (!IsFrameReorderingRequired)
        v38 = (const void **)MEMORY[0x1E0C9AE40];
LABEL_72:
      value = *v38;
      goto LABEL_73;
    }
    if (!CFEqual(a2, CFSTR("MinSampleDuration")))
    {
      if (CFEqual(a2, CFSTR("MaxEditRate")))
      {
        LODWORD(valuePtr.start.value) = 1065353216;
        v23 = MovieTrackComputeMaxEditRate((_QWORD *)*v9, v9[1], (float *)&valuePtr);
        goto LABEL_35;
      }
      if (CFEqual(a2, CFSTR("SampleDescriptionAtomLocation")))
      {
        EditCursorService = MovieTrackCreateSampleDescriptionAtomLocationDictionary(v11, a4);
      }
      else if (CFEqual(a2, CFSTR("ExternalDataReferenceSchemes")))
      {
        EditCursorService = MovieTrackCopyExternalDataReferenceSchemes(v10, v11, a4);
      }
      else if (CFEqual(a2, CFSTR("MediaCharacteristicArray")))
      {
        EditCursorService = FigMediaCharacteristicsCopyMediaCharacteristicsForTrackInformation((uint64_t)a3, v11, a4);
      }
      else if (CFEqual(a2, CFSTR("HEVCSyncSampleNALUnitTypes")))
      {
        EditCursorService = MovieTrackCopySyncSampleCombinations(a3, v11, a4);
      }
      else if (CFEqual(a2, CFSTR("HEVCTemporalLevelInfoCombinations")))
      {
        EditCursorService = MovieTrackCopyTemporalLevelCombinations(a3, v11, a4);
      }
      else if (CFEqual(a2, CFSTR("SampleGroupDescriptions")))
      {
        EditCursorService = MovieTrackCopySampleGroupDescriptionDictionary(a3, v11, a4);
      }
      else
      {
        if (!CFEqual(a2, CFSTR("LatentBaseDecodeTimeStampOfFirstTrackFragment")))
        {
          if (CFEqual(a2, CFSTR("UsesAudibleDRM")))
          {
            IsFrameReorderingRequired = MovieTrackUsesAudibleDRM(v11);
          }
          else if (CFEqual(a2, CFSTR("AudibleContentIsAuthorized")))
          {
            IsFrameReorderingRequired = MovieTrackAudibleContentIsAuthorized((uint64_t)v10, v11);
          }
          else
          {
            if (!CFEqual(a2, CFSTR("HasEditListBox")))
            {
              MustBeShown = 4294954512;
              goto LABEL_19;
            }
            IsFrameReorderingRequired = MovieTrackHasEditList(v11);
          }
          goto LABEL_70;
        }
        EditCursorService = MovieTrackCopyLatentBaseDecodeTimeStampOfFirstTrackFragmentDictionary(a3, v11, a4);
      }
LABEL_32:
      MustBeShown = EditCursorService;
      goto LABEL_19;
    }
    MEMORY[0x19402EEEC](v9[6]);
    v71 = (const void *)v9[7];
    if (v71)
    {
      MustBeShown = 0;
    }
    else
    {
      memset(&valuePtr, 0, 24);
      MustBeShown = MovieTrackComputeMinSampleDuration((_QWORD *)*v9, v9[1], &valuePtr.start);
      if ((_DWORD)MustBeShown)
      {
        v71 = (const void *)v9[7];
      }
      else
      {
        v72 = CFGetAllocator((CFTypeRef)v9[1]);
        *(_OWORD *)&time.start.value = *(_OWORD *)&valuePtr.start.value;
        time.start.epoch = valuePtr.start.epoch;
        v71 = CMTimeCopyAsDictionary(&time.start, v72);
        v9[7] = (uint64_t)v71;
      }
      if (!v71)
        goto LABEL_219;
    }
    v71 = CFRetain(v71);
LABEL_219:
    *a4 = (CFDictionaryRef)v71;
    MEMORY[0x19402EF04](v9[6]);
    goto LABEL_19;
  }
  value = MovieTrackCopyFormatDescriptionArray(v11);
LABEL_17:
  MustBeShown = 0;
LABEL_18:
  *a4 = (CFDictionaryRef)value;
LABEL_19:
  MovieInformationUnlockForRead((uint64_t)v10);
  return MustBeShown;
}

uint64_t AssureTrackQuickTimeUserDataReaderCreated(uint64_t a1)
{
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
  if (!*(_QWORD *)(a1 + 24))
  {
    MovieInformationLockForRead(*(_QWORD *)a1);
    MovieTrackCreateQuickTimeUserDataReader(*(_QWORD *)a1, *(uint64_t **)(a1 + 8), (_QWORD *)(a1 + 24));
    MovieInformationUnlockForRead(*(_QWORD *)a1);
  }
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
  return *(_QWORD *)(a1 + 24);
}

uint64_t AssureTrackISOUserDataReaderCreated(uint64_t a1)
{
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
  if (!*(_QWORD *)(a1 + 32))
  {
    MovieInformationLockForRead(*(_QWORD *)a1);
    MovieTrackCreateISOUserDataReader(*(_QWORD *)a1, *(uint64_t **)(a1 + 8), (_QWORD *)(a1 + 32));
    MovieInformationUnlockForRead(*(_QWORD *)a1);
  }
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
  return *(_QWORD *)(a1 + 32);
}

uint64_t AssureTrackQuickTimeMetadataReaderCreated(uint64_t a1)
{
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
  if (!*(_QWORD *)(a1 + 40))
  {
    MovieInformationLockForRead(*(_QWORD *)a1);
    MovieTrackCreateQuickTimeMetadataReader(*(_QWORD *)a1, *(uint64_t **)(a1 + 8), (_QWORD *)(a1 + 40));
    MovieInformationUnlockForRead(*(_QWORD *)a1);
  }
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
  return *(_QWORD *)(a1 + 40);
}

uint64_t MovieTrackReaderGetTrackInfo(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t *DerivedStorage;
  uint64_t BasicInfo;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage || !DerivedStorage[1])
    return FigSignalErrorAt();
  MovieInformationLockForRead(*DerivedStorage);
  BasicInfo = MovieTrackGetBasicInfo(DerivedStorage[1], a3, a2);
  MovieInformationUnlockForRead(*DerivedStorage);
  return BasicInfo;
}

uint64_t MovieTrackReaderGetTrackEditCount()
{
  uint64_t *DerivedStorage;
  uint64_t EditSegmentCount;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage && DerivedStorage[1])
  {
    MovieInformationLockForRead(*DerivedStorage);
    EditSegmentCount = MovieTrackGetEditSegmentCount(DerivedStorage[1]);
    MovieInformationUnlockForRead(*DerivedStorage);
    return EditSegmentCount;
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
}

uint64_t MovieTrackReaderGetTrackEditWithIndex(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t *DerivedStorage;
  uint64_t EditSegmentWithIndex;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage || !DerivedStorage[1] || !a3)
    return FigSignalErrorAt();
  MovieInformationLockForRead(*DerivedStorage);
  EditSegmentWithIndex = MovieTrackGetEditSegmentWithIndex(DerivedStorage[1], a2, a3);
  MovieInformationUnlockForRead(*DerivedStorage);
  return EditSegmentWithIndex;
}

uint64_t MovieTrackReaderCopySampleCursorService(const void *a1, _QWORD *a2)
{
  _QWORD *DerivedStorage;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  CFTypeRef v10;
  uint64_t v11;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
    return FigSignalErrorAt();
  v5 = DerivedStorage;
  if (!MovieTrackIsValid(DerivedStorage[1]))
    return FigSignalErrorAt();
  v6 = MoovAssureSampleTableParsed((_QWORD *)*v5, v5[1]);
  if ((_DWORD)v6)
    return v6;
  CFGetAllocator(a1);
  FigSampleCursorServiceGetClassID();
  v7 = CMDerivedObjectCreate();
  if ((_DWORD)v7)
  {
    v11 = v7;
    FigSignalErrorAt();
  }
  else
  {
    v8 = (_QWORD *)CMBaseObjectGetDerivedStorage();
    v9 = (_QWORD *)*v5;
    if (*v5)
      v9 = CFRetain(v9);
    *v8 = v9;
    v10 = (CFTypeRef)v5[1];
    if (v10)
      v10 = CFRetain(v10);
    v11 = 0;
    v8[1] = v10;
    *a2 = 0;
  }
  return v11;
}

uint64_t MovieTrackReaderGetTrackEditIndexWithTrackTime(uint64_t a1, CMTime *a2, _QWORD *a3)
{
  uint64_t *DerivedStorage;
  uint64_t v6;
  uint64_t EditIndexForTrackTime;
  CMTime v9;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage || !DerivedStorage[1])
    return FigSignalErrorAt();
  MovieInformationLockForRead(*DerivedStorage);
  v6 = DerivedStorage[1];
  v9 = *a2;
  EditIndexForTrackTime = MovieTrackFindEditIndexForTrackTime(v6, &v9, a3);
  MovieInformationUnlockForRead(*DerivedStorage);
  return EditIndexForTrackTime;
}

void MovieCursorService_finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
}

__CFString *MovieCursorService_copyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigFormatReader_Movie_CursorService %p>{ track %p }"), a1, *(_QWORD *)(DerivedStorage + 8));
  return Mutable;
}

uint64_t MovieCursorService_createCursorAtPresentationTimeStamp(const void *a1, __int128 *a2, _QWORD *a3, _BYTE *a4, _BYTE *a5)
{
  uint64_t *DerivedStorage;
  CFAllocatorRef v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  uint64_t v19;
  const void *v20;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v20 = 0;
  MovieInformationLockForRead(*DerivedStorage);
  v11 = CFGetAllocator(a1);
  v12 = CreateMovieSampleCursor((uint64_t)v11, (const void *)*DerivedStorage, DerivedStorage[1], &v20);
  if ((_DWORD)v12)
  {
    v16 = v12;
  }
  else
  {
    v13 = v20;
    v14 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
    v18 = *a2;
    v19 = *((_QWORD *)a2 + 2);
    MovieSampleAccessorMoveToSampleAtPTS(v14, (uint64_t)&v18, a4, a5);
    v16 = v15;
    if ((_DWORD)v15)
    {
      if (v13)
        CFRelease(v13);
    }
    else
    {
      *a3 = v13;
    }
  }
  MovieInformationUnlockForRead(*DerivedStorage);
  return v16;
}

uint64_t MovieCursorService_createCursorNearPresentationTimeStamp(const void *a1, __int128 *a2, uint64_t a3, _QWORD *a4, _BYTE *a5, _BYTE *a6)
{
  uint64_t *DerivedStorage;
  CFAllocatorRef v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  uint64_t v20;
  const void *v21;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v21 = 0;
  MovieInformationLockForRead(*DerivedStorage);
  v12 = CFGetAllocator(a1);
  v13 = CreateMovieSampleCursor((uint64_t)v12, (const void *)*DerivedStorage, DerivedStorage[1], &v21);
  if ((_DWORD)v13)
  {
    v17 = v13;
  }
  else
  {
    v14 = v21;
    v15 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
    v19 = *a2;
    v20 = *((_QWORD *)a2 + 2);
    MovieSampleAccessorMoveToSampleAtPTS(v15, (uint64_t)&v19, a5, a6);
    v17 = v16;
    if ((_DWORD)v16)
    {
      if (v14)
        CFRelease(v14);
    }
    else
    {
      *a4 = v14;
    }
  }
  MovieInformationUnlockForRead(*DerivedStorage);
  return v17;
}

uint64_t MovieCursorService_createCursorAtFirstSampleInDecodeOrder(const void *a1, _QWORD *a2)
{
  uint64_t *DerivedStorage;
  CFAllocatorRef v5;
  uint64_t v6;
  uint64_t v8;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v8 = 0;
  MovieInformationLockForRead(*DerivedStorage);
  v5 = CFGetAllocator(a1);
  v6 = CreateMovieSampleCursor((uint64_t)v5, (const void *)*DerivedStorage, DerivedStorage[1], &v8);
  if (!(_DWORD)v6)
    *a2 = v8;
  MovieInformationUnlockForRead(*DerivedStorage);
  return v6;
}

uint64_t MovieCursorService_createCursorAtLastSampleInDecodeOrder(const void *a1, _QWORD *a2)
{
  uint64_t *DerivedStorage;
  CFAllocatorRef v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t SampleInDecodeOrder;
  const void *v11;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v11 = 0;
  MovieInformationLockForRead(*DerivedStorage);
  v5 = CFGetAllocator(a1);
  v6 = CreateMovieSampleCursor((uint64_t)v5, (const void *)*DerivedStorage, DerivedStorage[1], &v11);
  if ((_DWORD)v6)
  {
    SampleInDecodeOrder = v6;
  }
  else
  {
    v7 = v11;
    v8 = CMBaseObjectGetDerivedStorage();
    SampleInDecodeOrder = MovieSampleAccessorMoveToLastSampleInDecodeOrder(*(_QWORD *)(v8 + 8));
    if ((_DWORD)SampleInDecodeOrder)
    {
      if (v7)
        CFRelease(v7);
    }
    else
    {
      *a2 = v7;
    }
  }
  MovieInformationUnlockForRead(*DerivedStorage);
  return SampleInDecodeOrder;
}

uint64_t CreateMovieSampleCursor(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t DerivedStorage;
  uint64_t v9;
  CFTypeRef v10;
  uint64_t v11;

  if (!MovieTrackIsValid(a3))
  {
    v9 = FigSignalErrorAt();
LABEL_10:
    v11 = v9;
    goto LABEL_8;
  }
  FigSampleCursorGetClassID();
  v7 = CMDerivedObjectCreate();
  if ((_DWORD)v7)
  {
    v11 = v7;
    FigSignalErrorAt();
    goto LABEL_8;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = MovieSampleAccessorCreate(a2, a3, (const void ***)(DerivedStorage + 8));
  if ((_DWORD)v9)
    goto LABEL_10;
  if (a2)
    v10 = CFRetain(a2);
  else
    v10 = 0;
  v11 = 0;
  *(_QWORD *)DerivedStorage = v10;
LABEL_8:
  *a4 = 0;
  return v11;
}

void MovieCursor_finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MovieSampleAccessorDispose(*(const void ***)(DerivedStorage + 8));
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
  v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
    CFRelease(v1);
  *(_QWORD *)DerivedStorage = 0;
  *(_QWORD *)(DerivedStorage + 8) = 0;
  *(_QWORD *)(DerivedStorage + 16) = 0;
}

__CFString *MovieCursor_copyDebugDescription(const void *a1)
{
  uint64_t *DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  unsigned int TrackType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 IsValid;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  unsigned int v19;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  TrackType = MovieTrackGetTrackType(*(_QWORD *)(DerivedStorage[1] + 8));
  v19 = 0;
  MovieInformationLockForRead(*DerivedStorage);
  MovieTrackGetBasicInfo(*(_QWORD *)(DerivedStorage[1] + 8), 0, &v19);
  MovieInformationUnlockForRead(*DerivedStorage);
  v6 = DerivedStorage[1];
  v7 = *(unsigned int *)(v6 + 80);
  v8 = v19;
  IsValid = MovieTrackIsValid(*(_QWORD *)(v6 + 8));
  v10 = "";
  if (!IsValid)
    v10 = " (INVALIDATED)";
  CFStringAppendFormat(Mutable, 0, CFSTR("<Movie_SampleCursor %p>{ sampleNum %d, Track ID %d%s, Type %c%c%c%c }"), a1, v7, v8, v10, HIBYTE(TrackType), BYTE2(TrackType), BYTE1(TrackType), TrackType);
  v11 = DerivedStorage[1];
  v12 = *(_QWORD *)(v11 + 8);
  v13 = *(_QWORD *)(v12 + 728);
  if (v13)
  {
    if (*(_QWORD *)(v13 + 56))
    {
      v14 = *(_DWORD *)(v11 + 80);
      v15 = *(_DWORD *)(v12 + 288);
      v16 = v14 >= v15;
      v17 = v14 - v15;
      if ((_DWORD)v17 != 0 && v16)
        CFStringAppendFormat(Mutable, 0, CFSTR("\nFragment Sample %d of %d [Fragment %p Run %p IndexInRun %u/%d]"), v17, *(unsigned int *)(v13 + 8), *(_QWORD *)(v11 + 200), *(_QWORD *)(v11 + 208), v14 - *(_DWORD *)(*(_QWORD *)(v11 + 208) + 16), *(unsigned int *)(*(_QWORD *)(v11 + 208) + 36));
    }
  }
  return Mutable;
}

uint64_t MovieCursor_copyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CMTimeValue *a4)
{
  uint64_t *DerivedStorage;
  uint64_t v8;
  const void *AdvanceDecodeDeltaDictionary;
  uint64_t SampleDependencyAttributeDictionary;
  CMTimeValue value;
  _BOOL4 v12;
  const void *v13;
  CMTime v15;
  CMTime v16;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  MovieInformationLockForRead(*DerivedStorage);
  if (!a4 || !MovieTrackIsValid(*(_QWORD *)(DerivedStorage[1] + 8)))
  {
    v8 = FigSignalErrorAt();
    goto LABEL_30;
  }
  *a4 = 0;
  if (!CFEqual(a2, CFSTR("CursorPlayableHorizon")))
  {
    if (CFEqual(a2, CFSTR("SampleDependencyAttributes")))
    {
      v16.value = 0;
      SampleDependencyAttributeDictionary = MovieSampleAccessorCreateSampleDependencyAttributeDictionary(a3, DerivedStorage[1], (__CFDictionary **)&v16);
LABEL_8:
      v8 = SampleDependencyAttributeDictionary;
      if ((_DWORD)SampleDependencyAttributeDictionary)
        goto LABEL_30;
      value = v16.value;
LABEL_16:
      *a4 = value;
      goto LABEL_30;
    }
    if (CFEqual(a2, CFSTR("GradualDecoderRefresh")))
    {
      LOWORD(v16.value) = 0;
      if (!MovieSampleAccessorGetRollValue(DerivedStorage[1], &v16))
      {
        v8 = 4294954513;
        goto LABEL_30;
      }
      LOWORD(v15.value) = -LOWORD(v16.value);
      AdvanceDecodeDeltaDictionary = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt16Type, &v15);
    }
    else
    {
      if (CFEqual(a2, CFSTR("SeamIdentifier")))
      {
        v16.value = 0;
        v12 = MovieSampleAccessorCopySeamIdentifier(DerivedStorage[1], (CFStringRef *)&v16);
        v8 = 0;
        value = v16.value;
        if (!v12)
          value = 0;
        goto LABEL_16;
      }
      if (CFEqual(a2, CFSTR("AdvanceDecodeDelta")))
      {
        AdvanceDecodeDeltaDictionary = (const void *)DerivedStorage[2];
        if (!AdvanceDecodeDeltaDictionary)
        {
          AdvanceDecodeDeltaDictionary = MovieTrackCreateAdvanceDecodeDeltaDictionary(a3, *(_QWORD **)DerivedStorage[1], *(_QWORD *)(DerivedStorage[1] + 8));
          DerivedStorage[2] = (uint64_t)AdvanceDecodeDeltaDictionary;
          if (!AdvanceDecodeDeltaDictionary)
            goto LABEL_28;
        }
      }
      else
      {
        if (!CFEqual(a2, CFSTR("MoreSamplesMayBeForthcoming")))
        {
          if (!CFEqual(a2, CFSTR("SampleGroupData")))
          {
            v8 = 4294954512;
            goto LABEL_30;
          }
          v16.value = 0;
          SampleDependencyAttributeDictionary = MovieSampleAccessorCreateSampleGroupDataDictionary(a3, DerivedStorage[1], (CFMutableDictionaryRef *)&v16);
          goto LABEL_8;
        }
        v13 = (const void *)*MEMORY[0x1E0C9AE40];
        if (*(_BYTE *)(*DerivedStorage + 88) && MovieInformationCouldContainFragments(*DerivedStorage))
          v13 = (const void *)*MEMORY[0x1E0C9AE50];
        AdvanceDecodeDeltaDictionary = v13;
      }
      AdvanceDecodeDeltaDictionary = CFRetain(AdvanceDecodeDeltaDictionary);
    }
LABEL_28:
    v8 = 0;
    goto LABEL_29;
  }
  memset(&v16, 0, sizeof(v16));
  v8 = MovieSampleAccessorComputePlayableHorizon(DerivedStorage[1], (uint64_t)&v16);
  if (!(_DWORD)v8)
  {
    v15 = v16;
    AdvanceDecodeDeltaDictionary = CMTimeCopyAsDictionary(&v15, a3);
LABEL_29:
    *a4 = (CMTimeValue)AdvanceDecodeDeltaDictionary;
  }
LABEL_30:
  MovieInformationUnlockForRead(*DerivedStorage);
  return v8;
}

uint64_t MovieCursor_copy(const void *a1, CFTypeRef *a2)
{
  uint64_t *DerivedStorage;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  void *v11;
  CFTypeRef cf;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v11 = 0;
  cf = 0;
  MovieInformationLockForRead(*DerivedStorage);
  if (!MovieTrackIsValid(*(_QWORD *)(DerivedStorage[1] + 8)))
  {
    v7 = FigSignalErrorAt();
LABEL_9:
    v9 = v7;
    goto LABEL_11;
  }
  CFGetAllocator(a1);
  FigSampleCursorGetClassID();
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    v6 = (_QWORD *)CMBaseObjectGetDerivedStorage();
    v7 = MovieSampleAccessorCopy(DerivedStorage[1], &v11);
    if (!(_DWORD)v7)
    {
      v6[1] = v11;
      v11 = 0;
      v8 = (const void *)*DerivedStorage;
      if (*DerivedStorage)
        v8 = CFRetain(v8);
      v9 = 0;
      *v6 = v8;
      *a2 = cf;
      cf = 0;
      goto LABEL_7;
    }
    goto LABEL_9;
  }
  v9 = v5;
  FigSignalErrorAt();
LABEL_11:
  if (cf)
    CFRelease(cf);
LABEL_7:
  MovieInformationUnlockForRead(*DerivedStorage);
  MovieSampleAccessorDispose((const void **)v11);
  return v9;
}

uint64_t MovieCursor_compareInDecodeOrder()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  _BOOL8 v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = CMBaseObjectGetDerivedStorage();
  v2 = *(_DWORD *)(*(_QWORD *)(DerivedStorage + 8) + 80);
  v3 = *(_DWORD *)(*(_QWORD *)(v1 + 8) + 80);
  v4 = v2 >= v3;
  v5 = v2 > v3;
  if (v4)
    return v5;
  else
    return -1;
}

uint64_t MovieCursor_getPresentationTimeStamp(uint64_t a1, CMTime *a2)
{
  uint64_t *DerivedStorage;
  uint64_t v4;
  CMTime v6;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  MovieInformationLockForRead(*DerivedStorage);
  if (MovieTrackIsValid(*(_QWORD *)(DerivedStorage[1] + 8)))
  {
    MovieSampleAccessorGetPTS(DerivedStorage[1], &v6);
    v4 = 0;
    *a2 = v6;
  }
  else
  {
    v4 = FigSignalErrorAt();
  }
  MovieInformationUnlockForRead(*DerivedStorage);
  return v4;
}

uint64_t MovieCursor_getDecodeTimeStamp(uint64_t a1, CMTime *a2)
{
  uint64_t *DerivedStorage;
  uint64_t v4;
  CMTime v6;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  MovieInformationLockForRead(*DerivedStorage);
  if (MovieTrackIsValid(*(_QWORD *)(DerivedStorage[1] + 8)))
  {
    MovieSampleAccessorGetDTS(DerivedStorage[1], &v6);
    v4 = 0;
    *a2 = v6;
  }
  else
  {
    v4 = FigSignalErrorAt();
  }
  MovieInformationUnlockForRead(*DerivedStorage);
  return v4;
}

uint64_t MovieCursor_getDuration(uint64_t a1, CMTime *a2)
{
  uint64_t *DerivedStorage;
  uint64_t SampleDuration;
  uint64_t v5;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  MovieInformationLockForRead(*DerivedStorage);
  if (MovieTrackIsValid(*(_QWORD *)(DerivedStorage[1] + 8)))
    SampleDuration = MovieSampleAccessorGetSampleDuration(DerivedStorage[1], a2);
  else
    SampleDuration = FigSignalErrorAt();
  v5 = SampleDuration;
  MovieInformationUnlockForRead(*DerivedStorage);
  return v5;
}

uint64_t MovieCursor_getDependencyInfo(uint64_t a1, _BYTE *a2, char *a3, _DWORD *a4, BOOL *a5)
{
  uint64_t *DerivedStorage;
  uint64_t DependencyInfo;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  MovieInformationLockForRead(*DerivedStorage);
  if (!MovieTrackIsValid(*(_QWORD *)(DerivedStorage[1] + 8)))
    return FigSignalErrorAt();
  DependencyInfo = MovieSampleAccessorGetDependencyInfo(DerivedStorage[1], a2, a3, 0, 0, a4, a5);
  MovieInformationUnlockForRead(*DerivedStorage);
  return DependencyInfo;
}

BOOL MovieCursor_testReorderingBoundary(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *DerivedStorage;
  uint64_t v5;
  uint64_t DTSTimeValue;
  uint64_t PTSTimeValue;
  _BOOL8 v8;
  uint64_t v10;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v5 = CMBaseObjectGetDerivedStorage();
  v10 = 0;
  MovieInformationLockForRead(*DerivedStorage);
  if (MovieTrackIsValid(*(_QWORD *)(DerivedStorage[1] + 8)))
  {
    DTSTimeValue = MovieSampleAccessorGetDTSTimeValue(DerivedStorage[1]);
    PTSTimeValue = MovieSampleAccessorGetPTSTimeValue(*(_QWORD *)(v5 + 8));
    MovieTrackGetCompositionOffsetRange(*(_QWORD **)DerivedStorage[1], *(_QWORD *)(DerivedStorage[1] + 8), (_DWORD *)&v10 + 1, &v10);
    if (a3)
      v8 = DTSTimeValue + SHIDWORD(v10) >= PTSTimeValue;
    else
      v8 = DTSTimeValue + (int)v10 <= PTSTimeValue;
  }
  else
  {
    FigSignalErrorAt();
    v8 = 0;
  }
  MovieInformationUnlockForRead(*DerivedStorage);
  return v8;
}

uint64_t MovieCursor_stepByDecodeTime(uint64_t a1, CMTime *a2)
{
  uint64_t *DerivedStorage;
  uint64_t v4;
  CMTime v6;
  CMTime lhs;
  CMTime v8;
  __int16 v9;
  CMTime v10;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  memset(&v10, 0, sizeof(v10));
  v9 = 0;
  MovieInformationLockForRead(*DerivedStorage);
  if (MovieTrackIsValid(*(_QWORD *)(DerivedStorage[1] + 8)))
  {
    MovieSampleAccessorGetDTS(DerivedStorage[1], &v10);
    lhs = v10;
    v6 = *a2;
    CMTimeAdd(&v8, &lhs, &v6);
    v10 = v8;
    MovieSampleAccessorMoveToSampleForDTS(DerivedStorage[1], &v8, (char *)&v9 + 1, (char *)&v9);
    if (HIBYTE(v9) | v9)
      v4 = 4294954456;
    else
      v4 = 0;
  }
  else
  {
    v4 = FigSignalErrorAt();
  }
  MovieInformationUnlockForRead(*DerivedStorage);
  return v4;
}

uint64_t MovieCursor_stepByPresentationTime(uint64_t a1, CMTime *a2)
{
  uint64_t *DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  CMTime v7;
  CMTime lhs;
  CMTime v9;
  __int16 v10;
  CMTime v11;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  memset(&v11, 0, sizeof(v11));
  v10 = 0;
  MovieInformationLockForRead(*DerivedStorage);
  if (MovieTrackIsValid(*(_QWORD *)(DerivedStorage[1] + 8)))
  {
    MovieSampleAccessorGetPTS(DerivedStorage[1], &v11);
    lhs = v11;
    v7 = *a2;
    CMTimeAdd(&v9, &lhs, &v7);
    v11 = v9;
    MovieSampleAccessorMoveToSampleAtPTS(DerivedStorage[1], (uint64_t)&v9, (_BYTE *)&v10 + 1, &v10);
    v5 = v4;
    if (!(_DWORD)v4)
    {
      if (HIBYTE(v10) | v10)
        v5 = 4294954456;
      else
        v5 = 0;
    }
  }
  else
  {
    v5 = FigSignalErrorAt();
  }
  MovieInformationUnlockForRead(*DerivedStorage);
  return v5;
}

uint64_t MovieCursor_copySampleLocation(uint64_t a1, uint64_t *a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t *DerivedStorage;
  uint64_t SampleLocation;
  uint64_t v11;
  int v13;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v13 = 0;
  MovieInformationLockForRead(*DerivedStorage);
  if (!MovieTrackIsValid(*(_QWORD *)(DerivedStorage[1] + 8)))
  {
    v11 = FigSignalErrorAt();
LABEL_5:
    SampleLocation = v11;
    goto LABEL_7;
  }
  SampleLocation = MovieSampleAccessorGetSampleLocation(DerivedStorage[1], a2, a3, &v13);
  if (!(_DWORD)SampleLocation)
  {
    if (!(a4 | a5))
    {
      SampleLocation = 0;
      goto LABEL_7;
    }
    v11 = MovieTrackCopyDataSourceForSampleDescriptionID(*(_QWORD **)DerivedStorage[1], *(_QWORD *)(DerivedStorage[1] + 8), v13, (_QWORD *)a5, (_QWORD *)a4);
    goto LABEL_5;
  }
LABEL_7:
  MovieInformationUnlockForRead(*DerivedStorage);
  return SampleLocation;
}

uint64_t MovieCursor_copyChunkDetails(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t *a4, uint64_t *a5, _QWORD *a6, _QWORD *a7, BOOL *a8, BOOL *a9, _BYTE *a10)
{
  uint64_t *DerivedStorage;
  uint64_t ChunkDetails;
  uint64_t v19;
  int v21;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v21 = 0;
  MovieInformationLockForRead(*DerivedStorage);
  if (!MovieTrackIsValid(*(_QWORD *)(DerivedStorage[1] + 8)))
  {
    v19 = FigSignalErrorAt();
LABEL_5:
    ChunkDetails = v19;
    goto LABEL_7;
  }
  ChunkDetails = MovieSampleAccessorGetChunkDetails(DerivedStorage[1], &v21, a4, a5, a6, a7, a8, a9, a10);
  if (!(_DWORD)ChunkDetails)
  {
    if (!(a2 | a3))
    {
      ChunkDetails = 0;
      goto LABEL_7;
    }
    v19 = MovieTrackCopyDataSourceForSampleDescriptionID((_QWORD *)*DerivedStorage, *(_QWORD *)(DerivedStorage[1] + 8), v21, (_QWORD *)a3, (_QWORD *)a2);
    goto LABEL_5;
  }
LABEL_7:
  MovieInformationUnlockForRead(*DerivedStorage);
  return ChunkDetails;
}

uint64_t MovieCursor_copyFormatDescription(uint64_t a1, _QWORD *a2)
{
  uint64_t *DerivedStorage;
  uint64_t FormatDescription;
  CFTypeRef v5;
  uint64_t v6;
  CFTypeRef cf;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  cf = 0;
  MovieInformationLockForRead(*DerivedStorage);
  if (!MovieTrackIsValid(*(_QWORD *)(DerivedStorage[1] + 8)))
  {
    FormatDescription = FigSignalErrorAt();
    goto LABEL_8;
  }
  FormatDescription = MovieSampleAccessorGetFormatDescription(DerivedStorage[1], &cf);
  if ((_DWORD)FormatDescription)
  {
LABEL_8:
    v6 = FormatDescription;
    goto LABEL_6;
  }
  v5 = cf;
  if (cf)
    v5 = CFRetain(cf);
  v6 = 0;
  *a2 = v5;
LABEL_6:
  MovieInformationUnlockForRead(*DerivedStorage);
  return v6;
}

uint64_t MovieCursor_stepInDecodeOrderAndReportStepsTaken(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *DerivedStorage;
  unsigned int v6;
  uint64_t v7;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  MovieInformationLockForRead(*DerivedStorage);
  if (MovieTrackIsValid(*(_QWORD *)(DerivedStorage[1] + 8)))
  {
    v6 = MovieSampleAccessorStepCursor(DerivedStorage[1], a2, a3);
    if (v6 == -12840)
      v7 = 0;
    else
      v7 = v6;
  }
  else
  {
    v7 = FigSignalErrorAt();
  }
  MovieInformationUnlockForRead(*DerivedStorage);
  return v7;
}

uint64_t MovieCursor_stepInPresentationOrderAndReportStepsTaken(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  MovieInformationLockForRead(*DerivedStorage);
  if (!MovieTrackIsValid(*(_QWORD *)(DerivedStorage[1] + 8)))
  {
    v10 = FigSignalErrorAt();
    goto LABEL_17;
  }
  if (a2 < 0)
  {
    v6 = a2;
    while (1)
    {
      MovieSampleAccessorStepBackPTS(DerivedStorage[1]);
      if ((_DWORD)v7)
        break;
      if (__CFADD__(v6++, 1))
        goto LABEL_13;
    }
LABEL_14:
    v10 = v7;
    if ((_DWORD)v7 != -12840)
      goto LABEL_17;
    goto LABEL_15;
  }
  if (a2)
  {
    v6 = a2;
    do
    {
      MovieSampleAccessorStepFwdPTS(DerivedStorage[1]);
      if ((_DWORD)v7)
        goto LABEL_14;
    }
    while (v6-- > 1);
  }
LABEL_13:
  v6 = 0;
LABEL_15:
  v10 = 0;
  if (a3)
    *a3 = a2 - v6;
LABEL_17:
  MovieInformationUnlockForRead(*DerivedStorage);
  return v10;
}

uint64_t MovieCursor_getDecodeToPresentationTimeDeltaRange(uint64_t a1, CMTime *a2, CMTime *a3)
{
  uint64_t *DerivedStorage;
  uint64_t v6;
  int64_t v7;
  int32_t MediaTimeScale;
  int64_t v9;
  int32_t v10;
  uint64_t v11;
  CMTime v13;
  uint64_t v14;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v14 = 0;
  MovieInformationLockForRead(*DerivedStorage);
  v6 = *(_QWORD *)(DerivedStorage[1] + 8);
  if (MovieTrackIsValid(v6))
  {
    MovieTrackGetCompositionOffsetRange(*(_QWORD **)DerivedStorage[1], v6, (_DWORD *)&v14 + 1, &v14);
    if (a2)
    {
      v7 = SHIDWORD(v14);
      MediaTimeScale = MovieTrackGetMediaTimeScale(v6);
      CMTimeMake(&v13, v7, MediaTimeScale);
      *a2 = v13;
    }
    if (a3)
    {
      v9 = (int)v14;
      v10 = MovieTrackGetMediaTimeScale(v6);
      CMTimeMake(&v13, v9, v10);
      v11 = 0;
      *a3 = v13;
    }
    else
    {
      v11 = 0;
    }
  }
  else
  {
    v11 = FigSignalErrorAt();
  }
  MovieInformationUnlockForRead(*DerivedStorage);
  return v11;
}

void ReactToMovieMetadataChange(uint64_t a1, uint64_t a2, __CFDictionary *a3)
{
  _QWORD *DerivedStorage;
  __int128 v6;
  const __CFString *v7;
  const void *v8;
  _QWORD *v9;
  const void *v10;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](DerivedStorage[10]);
  *((_QWORD *)&v6 + 1) = a2;
  *(_QWORD *)&v6 = a2 - 8;
  switch((unint64_t)(v6 >> 3))
  {
    case 0uLL:
      v7 = CFSTR("ISOUserDataReader");
      v9 = DerivedStorage + 13;
      v8 = (const void *)DerivedStorage[13];
      if (v8)
        goto LABEL_3;
      goto LABEL_4;
    case 1uLL:
      v7 = CFSTR("QuickTimeUserDataReader");
      v9 = DerivedStorage + 11;
      v8 = (const void *)DerivedStorage[11];
      if (!v8)
        goto LABEL_4;
      goto LABEL_3;
    case 3uLL:
      v7 = CFSTR("QuickTimeMetadataReader");
      v9 = DerivedStorage + 12;
      v8 = (const void *)DerivedStorage[12];
      if (!v8)
        goto LABEL_4;
      goto LABEL_3;
    case 7uLL:
      v7 = CFSTR("iTunesMetadataReader");
      v9 = DerivedStorage + 14;
      v8 = (const void *)DerivedStorage[14];
      if (!v8)
        goto LABEL_4;
LABEL_3:
      CFRelease(v8);
      *v9 = 0;
LABEL_4:
      MEMORY[0x19402EF04](DerivedStorage[10]);
      if (v7)
      {
        v10 = (const void *)*MEMORY[0x1E0C9AE50];
        CFDictionarySetValue(a3, v7, (const void *)*MEMORY[0x1E0C9AE50]);
        CFDictionarySetValue(a3, CFSTR("MetadataReaderTypes"), v10);
        CFDictionarySetValue(a3, CFSTR("MetadataReaders"), v10);
      }
      return;
    default:
      JUMPOUT(0x19402EF04);
  }
}

void ReactToTrackMetadataChange(uint64_t a1, uint64_t a2, __CFDictionary *a3)
{
  _QWORD *DerivedStorage;
  const __CFString *v6;
  const void *v7;
  _QWORD *v8;
  const void *v9;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](DerivedStorage[2]);
  if (a2 == 8)
  {
    v6 = CFSTR("ISOUserDataReader");
    v8 = DerivedStorage + 4;
    v7 = (const void *)DerivedStorage[4];
    if (!v7)
      goto LABEL_8;
    goto LABEL_7;
  }
  if (a2 == 16)
  {
    v6 = CFSTR("QuickTimeUserDataReader");
    v8 = DerivedStorage + 3;
    v7 = (const void *)DerivedStorage[3];
    if (!v7)
      goto LABEL_8;
LABEL_7:
    CFRelease(v7);
    *v8 = 0;
    goto LABEL_8;
  }
  if (a2 != 32)
    JUMPOUT(0x19402EA24);
  v6 = CFSTR("QuickTimeMetadataReader");
  v8 = DerivedStorage + 5;
  v7 = (const void *)DerivedStorage[5];
  if (v7)
    goto LABEL_7;
LABEL_8:
  MEMORY[0x19402EA24](DerivedStorage[2]);
  if (v6)
  {
    v9 = (const void *)*MEMORY[0x1E0C9AE50];
    CFDictionarySetValue(a3, v6, (const void *)*MEMORY[0x1E0C9AE50]);
    CFDictionarySetValue(a3, CFSTR("MetadataReaderTypes"), v9);
    CFDictionarySetValue(a3, CFSTR("MetadataReaders"), v9);
  }
}

uint64_t MoovIsParsingError(int a1)
{
  uint64_t result;
  unsigned int v3;
  unsigned int v4;
  int v5;

  result = 1;
  if (a1 <= -12720)
  {
    v4 = a1 + 12896;
    if (v4 > 0x33 || ((1 << v4) & 0x900000000007FLL) == 0)
      return 0;
  }
  else
  {
    if (a1 <= -207)
    {
      v3 = a1 + 12719;
      if (v3 <= 9 && ((1 << v3) & 0x23D) != 0)
        return result;
      return 0;
    }
    if (a1 > 560360819)
    {
      if (a1 == 560360820)
        return result;
      v5 = 1718449215;
    }
    else
    {
      if (a1 == -206)
        return result;
      v5 = 560226676;
    }
    if (a1 != v5)
      return 0;
  }
  return result;
}

uint64_t MoovParseByteStream(uint64_t a1, char a2, const void *a3, const void *a4)
{
  uint64_t result;
  int NextTrackID;
  uint64_t TrackCount;
  uint64_t v10;
  const __CFArray *Mutable;
  int v12;
  uint64_t v13;
  const __CFAllocator *v14;
  uint64_t TrackForTrackIndex;
  int v16;
  int v17;
  int AlternateGroupID;
  CFNumberRef v19;
  CFNumberRef v20;
  uint64_t valuePtr;
  uint64_t v22;
  _OWORD v23[7];
  _QWORD v24[3];
  uint64_t v25;
  CFRange v26;

  v24[1] = 0;
  v24[2] = 0;
  v25 = 0;
  result = MovieInformationSetByteStream(a1, a3);
  if ((_DWORD)result)
    return result;
  MovieInformationSetAssetAnalysisReporter(a1, a4);
  v24[0] = a1;
  if ((a2 & 2) != 0)
  {
    BYTE1(v25) = 1;
    a2 |= 1u;
  }
  memset(v23, 0, sizeof(v23));
  LOBYTE(v25) = (a2 & 1) == 0;
  *(_BYTE *)(a1 + 153) = (a2 & 0x20) != 0;
  *(_BYTE *)(a1 + 80) = (a2 & 0x40) != 0;
  result = FigAtomStreamInitWithByteStreamAndReporter();
  if ((_DWORD)result)
    return result;
  result = ParseChildAtoms((_QWORD *)a1, (uint64_t)v23, 4, (uint64_t)&MoovParseByteStream_atomDispatch, (uint64_t)v24);
  if (!*(_BYTE *)(a1 + 84))
  {
    if (!(_DWORD)result)
    {
      _MovieAtomReportParsingMessage((_QWORD *)a1, 0, (uint64_t)v23, (uint64_t)"'moov' atom could not be parsed", 3);
      return FigSignalErrorAt();
    }
    return result;
  }
  MovieInformationCheckForMovieTimescaleAnomaly_7135294(a1);
  NextTrackID = MovieInformationGetNextTrackID(a1);
  TrackCount = MovieInformationGetTrackCount(a1);
  if (TrackCount < 1)
    goto LABEL_30;
  v10 = TrackCount;
  Mutable = 0;
  v12 = 0;
  v13 = 0;
  LODWORD(v22) = 0;
  LOWORD(valuePtr) = 0;
  v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  do
  {
    TrackForTrackIndex = MovieInformationFindTrackForTrackIndex(a1, v13);
    MovieTrackGetBasicInfo(TrackForTrackIndex, 0, &v22);
    if ((_DWORD)v22 == 0x7FFFFFFF)
      v16 = v12;
    else
      v16 = 1;
    if ((_DWORD)v22 == 0x7FFFFFFF)
      v17 = NextTrackID;
    else
      v17 = v22 + 1;
    if ((int)v22 > NextTrackID)
    {
      v12 = v16;
      NextTrackID = v17;
    }
    AlternateGroupID = MovieTrackGetAlternateGroupID(TrackForTrackIndex);
    LOWORD(valuePtr) = AlternateGroupID;
    if (AlternateGroupID)
    {
      if (MovieTrackIsEnabled(TrackForTrackIndex))
      {
        v19 = CFNumberCreate(v14, kCFNumberSInt16Type, &valuePtr);
        if (v19)
        {
          v20 = v19;
          if (Mutable)
          {
            v26.length = CFArrayGetCount(Mutable);
            v26.location = 0;
            if (CFArrayContainsValue(Mutable, v26, v20))
            {
              MovieTrackSetEnabled(TrackForTrackIndex, 0);
LABEL_24:
              CFRelease(v20);
              goto LABEL_25;
            }
          }
          else
          {
            Mutable = CFArrayCreateMutable(v14, 0, MEMORY[0x1E0C9B378]);
            if (!Mutable)
              goto LABEL_24;
          }
          CFArrayAppendValue(Mutable, v20);
          goto LABEL_24;
        }
      }
    }
LABEL_25:
    MovieTrackCreateEnhancedGaplessInfo(a1, TrackForTrackIndex);
    ++v13;
  }
  while (v10 != v13);
  if ((_BYTE)v12)
    MovieInformationSetParsedNextTrackID(a1, NextTrackID);
  if (Mutable)
    CFRelease(Mutable);
LABEL_30:
  if ((a2 & 0x10) != 0
    && *(_BYTE *)(a1 + 154)
    && (valuePtr = 0, v22 = 0, !FigAtomStreamGetCurrentAtomGlobalOffset()))
  {
    *(_QWORD *)(a1 + 144) = valuePtr + v22;
    *(_BYTE *)(a1 + 88) = 1;
    if ((a2 & 8) != 0)
      return MovieInformationPerformPostParsingForHeaderWriting(a1);
    return 0;
  }
  else
  {
    if ((a2 & 8) == 0)
      return 0;
    return MovieInformationPerformPostParsingForHeaderWriting(a1);
  }
}

uint64_t ParseFileTypeAtom_0(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  uint64_t CurrentAtomTypeAndDataLength;
  uint64_t v6;
  char *dataPointerOut;
  CMBlockBufferRef theBuffer;
  uint64_t v9;

  v3 = *a2;
  theBuffer = 0;
  v9 = 0;
  dataPointerOut = 0;
  CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!(_DWORD)CurrentAtomTypeAndDataLength)
  {
    _MovieAtomReportParsingMessage(v3, 0, a1, (uint64_t)"Incorrect 'ftyp' atom size", 1);
    CurrentAtomTypeAndDataLength = FigSignalErrorAt();
  }
  v6 = CurrentAtomTypeAndDataLength;
  if (theBuffer)
    CFRelease(theBuffer);
  return v6;
}

uint64_t ParseMovieAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t BBuf;
  uint64_t v7;
  uint64_t v8;
  CFTypeRef v10;
  _OWORD v11[7];
  int v12;
  uint64_t *v13[2];
  CFTypeRef v14;

  v4 = *(_QWORD *)a2;
  v13[1] = 0;
  v14 = 0;
  v12 = 0;
  v13[0] = (uint64_t *)a2;
  FigAtomStreamGetCurrentAtomTypeAndDataLength();
  v5 = 0;
  if (!*(_BYTE *)(v4 + 84))
  {
    memset(v11, 0, sizeof(v11));
    if (!*(_QWORD *)(v4 + 56))
    {
      if (*(_BYTE *)(v4 + 80))
      {
        BBuf = FigAtomStreamReadCurrentAtomAndCreateBBuf();
        if ((_DWORD)BBuf)
          goto LABEL_30;
        v5 = CMByteStreamCreateForBlockBuffer();
        if ((_DWORD)v5)
          goto LABEL_10;
        *(_QWORD *)(v4 + 56) = 0;
        BBuf = FigAtomStreamInitWithByteStream();
        if ((_DWORD)BBuf)
          goto LABEL_30;
        v8 = FigAtomStreamInitWithParent();
        if ((_DWORD)v8)
          return v8;
LABEL_5:
        v7 = ParseChildAtoms((_QWORD *)v4, (uint64_t)v11, 6, (uint64_t)&ParseMovieAtom_atomDispatch, (uint64_t)v13);
        if ((_DWORD)v7)
        {
          v5 = v7;
          _MovieAtomReportParsingMessage((_QWORD *)v4, 0, a1, (uint64_t)"while parsing", 6);
          goto LABEL_10;
        }
        if (*(_BYTE *)(v4 + 85))
        {
          if (!v14 || (BBuf = ParseMovieExtendsAtomFromBBuf((uint64_t)v14, v13), !(_DWORD)BBuf))
          {
            v5 = 0;
            *(_BYTE *)(v4 + 84) = 1;
            goto LABEL_10;
          }
        }
        else
        {
          _MovieAtomReportParsingMessage((_QWORD *)v4, 0, a1, (uint64_t)"No movie header atom found", 3);
          BBuf = FigSignalErrorAt();
        }
LABEL_30:
        v5 = BBuf;
LABEL_10:
        if (v14)
          CFRelease(v14);
        goto LABEL_12;
      }
      v10 = *(CFTypeRef *)(v4 + 48);
      if (v10)
        v10 = CFRetain(v10);
      *(_QWORD *)(v4 + 56) = v10;
    }
    BBuf = FigAtomStreamInitWithParent();
    if ((_DWORD)BBuf)
      goto LABEL_30;
    goto LABEL_5;
  }
  _MovieAtomReportParsingMessage((_QWORD *)v4, 0, a1, (uint64_t)"File contains multiple 'moov' atoms", 3);
LABEL_12:
  if (!(_DWORD)v5)
  {
    if (*(_BYTE *)(v4 + 154))
    {
      return 0;
    }
    else if (*(_BYTE *)(a2 + 26))
    {
      return 0;
    }
    else
    {
      return 1937010544;
    }
  }
  return v5;
}

uint64_t ParseMovieFragmentAtom(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t BBuf;
  uint64_t v6;
  _OWORD v8[7];
  CFTypeRef v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  __int128 v13;

  v2 = *a2;
  v12 = 0u;
  v13 = 0u;
  v9 = 0;
  if (!*(_BYTE *)(v2 + 154))
    return 0;
  v11 = 0;
  v10 = 0;
  memset(v8, 0, sizeof(v8));
  FigAtomStreamGetCurrentAtomTypeAndDataLength();
  BBuf = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
  if ((_DWORD)BBuf)
    goto LABEL_13;
  BBuf = FigAtomStreamInitWithBBuf();
  if ((_DWORD)BBuf)
    goto LABEL_13;
  if (*((_BYTE *)a2 + 8))
  {
    *((_QWORD *)&v12 + 1) = a2[2];
    goto LABEL_8;
  }
  BBuf = FigAtomStreamGetCurrentAtomGlobalOffset();
  if ((_DWORD)BBuf)
  {
LABEL_13:
    v6 = BBuf;
    goto LABEL_10;
  }
LABEL_8:
  *(_QWORD *)&v12 = a2;
  *(_QWORD *)&v13 = a1;
  v6 = ParseChildAtoms((_QWORD *)v2, (uint64_t)v8, 2, (uint64_t)&ParseMovieFragmentAtom_atomDispatch, (uint64_t)&v12);
  if ((_DWORD)v6)
    _MovieAtomReportParsingMessage((_QWORD *)v2, 0, a1, (uint64_t)"Encountered an error during parsing of movie fragment atom", 3);
  else
    *(_BYTE *)(v2 + 156) = 1;
LABEL_10:
  if (v9)
    CFRelease(v9);
  return v6;
}

uint64_t ParseTopLevelMetaAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ItemInformation;
  uint64_t v5;

  v3 = *(_QWORD *)a2;
  ItemInformation = IFFParseMetaAtomStreamAndCreateItemInformation();
  if ((_DWORD)ItemInformation)
    return ItemInformation;
  v5 = MovieInformationSetParsedIFFItemInformation(v3, 0);
  if (!(_DWORD)v5)
    *(_BYTE *)(a2 + 26) = 0;
  return v5;
}

uint64_t MoovParseMovieLevelAtom()
{
  uint64_t result;

  result = FigAtomStreamInitWithBBuf();
  if (!(_DWORD)result)
  {
    FigAtomStreamGetCurrentAtomTypeAndDataLength();
    return 0;
  }
  return result;
}

uint64_t MoovParseIncrementalFragments(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, int *, _QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t *);
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  _OWORD v15[7];
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19[3];
  uint64_t v20;

  v19[1] = 0;
  v19[2] = 0;
  v20 = 0;
  v18 = 0;
  if (!*(_BYTE *)(a1 + 88))
    goto LABEL_35;
  if (!*(_BYTE *)(a1 + 154))
  {
    v14 = "Movie does not support fragments";
LABEL_34:
    _MovieAtomReportParsingMessage((_QWORD *)a1, 0, 0, (uint64_t)v14, 3);
LABEL_35:
    result = FigSignalErrorAt();
LABEL_36:
    v11 = 0;
    goto LABEL_25;
  }
  if (*(_DWORD *)(a1 + 184) == 2)
  {
    v14 = "Fragments were out of sequence";
    goto LABEL_34;
  }
  v17 = 0;
  v16 = 0;
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, int *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v5)
    v5(v4, 1, 0, &v17, 0);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 144);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v8)
  {
    v11 = 0;
    result = 4294954514;
    goto LABEL_25;
  }
  result = v8(v6, v7, &v18);
  if ((_DWORD)result)
    goto LABEL_36;
  if (!v18)
  {
    result = 0;
    goto LABEL_36;
  }
  v10 = *(_QWORD *)(a1 + 144) + v18;
  if (v10 <= *(_QWORD *)(a1 + 72))
  {
    v11 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 72) = v10;
    v11 = 1;
  }
  v19[0] = a1;
  BYTE1(v20) = 1;
  while (1)
  {
    if (FigAtomUtilityGetAtomTypeAndLengthInByteStream() || (v12 = v16, v13 = v18 - v16, v18 < v16))
    {
LABEL_24:
      result = 0;
      goto LABEL_25;
    }
    if (v16 <= 0)
      break;
    if (v17 == 1836019558)
    {
      memset(v15, 0, sizeof(v15));
      result = FigAtomStreamInitWithByteStream();
      if ((_DWORD)result)
        goto LABEL_25;
      result = ParseMovieFragmentAtom((uint64_t)v15, v19);
      if ((_DWORD)result)
        goto LABEL_25;
      v11 |= 2u;
      v12 = v16;
      v13 = v18 - v16;
    }
    else if (v17 == 1836019574)
    {
      result = 0;
      v11 |= 4u;
      *(_WORD *)(a1 + 88) = 256;
      goto LABEL_25;
    }
    v18 = v13;
    *(_QWORD *)(a1 + 144) += v12;
    if (v13 <= 0)
      goto LABEL_24;
  }
  result = FigSignalErrorAt();
LABEL_25:
  if (a2)
    *a2 = v11;
  if ((_DWORD)result)
    *(_BYTE *)(a1 + 88) = 0;
  return result;
}

uint64_t MoovAssureSampleTableParsed(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t CurrentAtomTypeAndDataLength;
  uint64_t v7;
  _OWORD v9[7];
  _OWORD v10[2];
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;
  _QWORD v14[2];
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _OWORD v18[7];

  v15 = 0;
  v16 = 0;
  v14[0] = 0;
  v14[1] = 0;
  v12 = 0;
  v13 = 0;
  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  if (!a1[7])
    return 0;
  memset(v9, 0, sizeof(v9));
  MEMORY[0x19402EA0C](*(_QWORD *)(a2 + 32));
  if (*(_BYTE *)(a2 + 718))
  {
    v4 = FigAtomStreamInitWithByteStream();
    if ((_DWORD)v4)
    {
      v5 = v4;
      *(_BYTE *)(a2 + 718) = 0;
LABEL_13:
      *(_DWORD *)(a2 + 712) = v5;
      goto LABEL_14;
    }
    *(_QWORD *)&v10[0] = a1;
    v11[0] = v10;
    v12 = v11;
    v13 = a2;
    v14[0] = &v12;
    v16 = v14;
    v17 = 0;
    memset(v18, 0, sizeof(v18));
    *(_BYTE *)(a2 + 718) = 0;
    CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if (!(_DWORD)CurrentAtomTypeAndDataLength)
    {
      if (v17 < 1)
      {
LABEL_11:
        CurrentAtomTypeAndDataLength = DoPostParsingSampleTableCommon(a1, a2);
        goto LABEL_12;
      }
      CurrentAtomTypeAndDataLength = FigAtomStreamInitWithParent();
      if (!(_DWORD)CurrentAtomTypeAndDataLength)
      {
        v7 = ParseChildAtoms(a1, (uint64_t)v18, 11, (uint64_t)&ParseSampleTableAtom_Phase2_atomDispatch, (uint64_t)&v15);
        if ((_DWORD)v7)
        {
          v5 = v7;
          _MovieAtomReportParsingMessage(a1, a2, (uint64_t)v9, (uint64_t)"while parsing", 5);
          goto LABEL_13;
        }
        goto LABEL_11;
      }
    }
LABEL_12:
    v5 = CurrentAtomTypeAndDataLength;
    goto LABEL_13;
  }
  v5 = *(unsigned int *)(a2 + 712);
LABEL_14:
  MEMORY[0x19402EA24](*(_QWORD *)(a2 + 32));
  return v5;
}

uint64_t ParseMovieHeaderAtom(uint64_t a1, _QWORD ***a2)
{
  _QWORD *v3;
  uint64_t result;
  const char *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  char v16;
  uint64_t v17;
  int v18;

  v3 = **a2;
  v18 = 0;
  v17 = 0;
  v16 = 0;
  v15 = 0;
  v13 = 0u;
  v14 = 0u;
  result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!(_DWORD)result)
  {
    result = FigAtomStreamGetCurrentAtomVersionAndFlags();
    if (!(_DWORD)result)
    {
      if (v16 == 1)
      {
        v11 = 0u;
        v12 = 0u;
        v9 = 0u;
        v10 = 0u;
        v7 = 0u;
        v8 = 0u;
        v6 = 0u;
        v5 = "'mvhd' V1 atom data size less than minimum";
      }
      else
      {
        LODWORD(v12) = 0;
        v10 = 0u;
        v11 = 0u;
        v8 = 0u;
        v9 = 0u;
        v6 = 0u;
        v7 = 0u;
        v5 = "'mvhd' V0 atom data size less than minimum";
      }
      _MovieAtomReportParsingMessage(v3, 0, a1, (uint64_t)v5, 3);
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t ParseTrackAtom(uint64_t a1, uint64_t **a2)
{
  uint64_t v2;
  uint64_t started;
  CFTypeRef v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t **v9;
  CFTypeRef v10;
  CFTypeRef cf;
  _OWORD v12[7];

  v2 = **a2;
  memset(v12, 0, sizeof(v12));
  v10 = 0;
  cf = 0;
  v9 = a2;
  started = FigAtomStreamInitWithParent();
  if ((_DWORD)started || (started = MovieTrackCreate((uint64_t *)&cf), (_DWORD)started))
  {
LABEL_11:
    v6 = started;
    goto LABEL_12;
  }
  v4 = cf;
  *((_BYTE *)cf + 736) = *(_BYTE *)(v2 + 153);
  v10 = v4;
  v5 = ParseChildAtoms((_QWORD *)v2, (uint64_t)v12, 11, (uint64_t)&ParseTrackAtom_atomDispatch, (uint64_t)&v9);
  if (!(_DWORD)v5)
  {
    if (*(_BYTE *)(v2 + 81))
      v7 = *(_BYTE *)(v2 + 82) == 0;
    else
      v7 = *(_BYTE *)(v2 + 83) != 0;
    MovieTrackEvaluateParsedLanguageCode((uint64_t)cf, v7);
    MovieTrackCreateEditSegmentArray(v2, (uint64_t)cf);
    MovieTrackEvaluateAlternateTrackGroupAssignment((uint64_t)cf);
    started = MovieTrackInitializeLowestDisplayStartTimeAndHighestDisplayEndTime((_QWORD *)v2, (uint64_t)cf);
    if (!(_DWORD)started)
      started = MovieInformationAddNewPerTrackInfo((_QWORD *)v2, cf);
    goto LABEL_11;
  }
  v6 = v5;
  if (MoovIsParsingError(v5))
  {
    _MovieAtomReportParsingMessage((_QWORD *)v2, (uint64_t)cf, 0, (uint64_t)"Omitting a track that encountered an error during atom parsing", 2);
    v6 = 0;
  }
LABEL_12:
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t ParseMovieUserDataAtom(uint64_t a1, _QWORD **a2)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  _OWORD v7[7];

  v4 = (_QWORD *)**a2;
  memset(v7, 0, sizeof(v7));
  result = FigAtomStreamGetCurrentAtomGlobalOffset();
  if (!(_DWORD)result)
  {
    v6 = FigAtomStreamInitWithParent();
    if (!(_DWORD)v6)
      v6 = ParseChildAtoms(v4, (uint64_t)v7, 1, (uint64_t)"atem", (uint64_t)a2);
    result = 0;
    if ((_DWORD)v6 != -12893)
    {
      if ((_DWORD)v6)
      {
        _MovieAtomReportParsingMessage(v4, 0, a1, (uint64_t)"while parsing", 6);
        return v6;
      }
    }
  }
  return result;
}

uint64_t ParseMovieMetaDataAtom(uint64_t a1, _QWORD ***a2)
{
  _QWORD *v3;
  uint64_t v4;
  int v7;
  _OWORD v8[7];
  int v9;
  char v10;

  v3 = **a2;
  v10 = 0;
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v7 = 0;
  FigAtomStreamGetCurrentAtomVersionAndFlags();
  v4 = FigAtomStreamInitWithParent();
  if (!(_DWORD)v4)
    v4 = ParseChildAtoms(v3, (uint64_t)v8, 1, (uint64_t)&ParseMovieMetaDataAtom_atomDispatch, (uint64_t)&v7);
  if ((_DWORD)v4 == -12893 || (_DWORD)v4 == 0)
    v4 = 0;
  else
    _MovieAtomReportParsingMessage(v3, 0, a1, (uint64_t)"while parsing", 6);
  if (v7 == 1835299937)
    return FigAtomStreamGetCurrentAtomGlobalOffset();
  return v4;
}

uint64_t ParseCompressedMovieAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  _OWORD v7[7];

  v3 = **(_QWORD **)a2;
  memset(v7, 0, sizeof(v7));
  *(_BYTE *)(a2 + 9) = 1;
  *(_BYTE *)(v3 + 87) = 1;
  if (*(_BYTE *)(v3 + 85) || *(_BYTE *)(a2 + 8))
  {
    _MovieAtomReportParsingMessage((_QWORD *)v3, 0, a1, (uint64_t)"Can't have a compressed movie atom, if we already have a movie header atom or movie alias", 3);
    return FigSignalErrorAt();
  }
  else
  {
    result = FigAtomStreamInitWithParent();
    if (!(_DWORD)result)
    {
      result = ParseChildAtoms((_QWORD *)v3, (uint64_t)v7, 2, (uint64_t)&ParseCompressedMovieAtom_atomDispatch, a2);
      if ((_DWORD)result)
      {
        v6 = result;
        _MovieAtomReportParsingMessage((_QWORD *)v3, 0, a1, (uint64_t)"while parsing", 6);
        return v6;
      }
    }
  }
  return result;
}

uint64_t ParseMovieExtendsAtom(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t BBuf;
  uint64_t v5;
  const void *v6;

  v3 = (_QWORD *)(a2 + 16);
  BBuf = FigAtomStreamReadCurrentAtomAndCreateBBuf();
  if ((_DWORD)BBuf)
    return BBuf;
  if (!MovieInformationGetTrackCount(**(_QWORD **)a2))
    return 0;
  v5 = ParseMovieExtendsAtomFromBBuf(*(_QWORD *)(a2 + 16), (uint64_t **)a2);
  v6 = *(const void **)(a2 + 16);
  if (v6)
  {
    CFRelease(v6);
    *v3 = 0;
  }
  return v5;
}

uint64_t ParseMovieExtendsAtomFromBBuf(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD v8[7];
  _OWORD v9[7];

  v3 = **a2;
  memset(v9, 0, sizeof(v9));
  memset(v8, 0, sizeof(v8));
  v4 = FigAtomStreamInitWithBBuf();
  if ((_DWORD)v4)
    return v4;
  FigAtomStreamGetCurrentAtomTypeAndDataLength();
  v4 = FigAtomStreamInitWithParent();
  if ((_DWORD)v4)
    return v4;
  v5 = ParseChildAtoms((_QWORD *)v3, (uint64_t)v8, 2, (uint64_t)&ParseMovieExtendsAtomFromBBuf_atomDispatch, (uint64_t)a2);
  if ((_DWORD)v5)
  {
    v6 = v5;
    _MovieAtomReportParsingMessage((_QWORD *)v3, 0, (uint64_t)v9, (uint64_t)"while parsing", 6);
  }
  else
  {
    *(_BYTE *)(v3 + 154) = 1;
    v6 = 0;
    if (*((_BYTE *)*a2 + 25))
      *((_BYTE *)*a2 + 24) = 0;
  }
  return v6;
}

uint64_t ParseTrackHeaderAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 8);
  v4 = ***(_QWORD ****)a2;
  result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!(_DWORD)result)
  {
    result = FigAtomStreamGetCurrentAtomVersionAndFlags();
    if (!(_DWORD)result)
    {
      _MovieAtomReportParsingMessage(v4, v3, a1, (uint64_t)"'tkhd' V0 atom size less than minimum", 2);
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t ParseEditsAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t CurrentAtomTypeAndDataLength;
  uint64_t v6;
  _QWORD v8[2];
  uint64_t v9;
  int v10;
  _OWORD v11[7];

  v3 = *(_QWORD *)(a2 + 8);
  v4 = ***(_QWORD ****)a2;
  memset(v11, 0, sizeof(v11));
  v10 = 0;
  v8[1] = v3;
  v9 = 0;
  v8[0] = v4;
  CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if ((_DWORD)CurrentAtomTypeAndDataLength)
    return CurrentAtomTypeAndDataLength;
  *(_WORD *)(v3 + 721) = 257;
  if (v9 < 1)
    return 0;
  CurrentAtomTypeAndDataLength = FigAtomStreamInitWithParent();
  if ((_DWORD)CurrentAtomTypeAndDataLength)
    return CurrentAtomTypeAndDataLength;
  v6 = ParseChildAtoms(v4, (uint64_t)v11, 1, (uint64_t)&ParseEditsAtom_atomDispatch, (uint64_t)v8);
  if ((_DWORD)v6)
    _MovieAtomReportParsingMessage(v4, v3, a1, (uint64_t)"while parsing", 5);
  return v6;
}

uint64_t ParseMediaAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  _OWORD v9[7];

  v3 = *(_QWORD *)(a2 + 8);
  v4 = ***(_QWORD ****)a2;
  memset(v9, 0, sizeof(v9));
  v8[0] = a2;
  v8[1] = 0;
  v5 = FigAtomStreamInitWithParent();
  if ((_DWORD)v5)
    return v5;
  v6 = ParseChildAtoms(v4, (uint64_t)v9, 4, (uint64_t)&ParseMediaAtom_atomDispatch, (uint64_t)v8);
  if ((_DWORD)v6)
    _MovieAtomReportParsingMessage(v4, v3, a1, (uint64_t)"while parsing", 5);
  return v6;
}

uint64_t ParseTrackReferenceAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  v3 = *(_QWORD *)(a2 + 8);
  v4 = ***(_QWORD ****)a2;
  v14 = 0;
  v13 = 0;
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v6 = 0u;
  result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!(_DWORD)result)
  {
    _MovieAtomReportParsingMessage(v4, v3, a1, (uint64_t)"'tref' atom size less than minimum", 2);
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t ParseTrackLoadSettingsAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 8);
  v4 = ***(_QWORD ****)a2;
  result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!(_DWORD)result)
  {
    _MovieAtomReportParsingMessage(v4, v3, a1, (uint64_t)"Incorrect 'load' atom size", 2);
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t ParseTrackUserDataAtom(uint64_t a1, uint64_t ***a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;

  v2 = (uint64_t *)a2[1];
  v3 = ***a2;
  if (*(_QWORD *)(v3 + 56))
    return FigAtomStreamGetCurrentAtomGlobalOffset();
  result = FigAtomStreamReadCurrentAtomAndCreateBBuf();
  if (!(_DWORD)result)
  {
    if (*(_BYTE *)(v3 + 81))
    {
      if (*(_BYTE *)(v3 + 82))
        return MovieTrackSupplementQuickTimeUserDataFromBlockBuffer((const void *)v3, v2, 0);
    }
    else if (!*(_BYTE *)(v3 + 83))
    {
      return MovieTrackSupplementQuickTimeUserDataFromBlockBuffer((const void *)v3, v2, 0);
    }
    return MovieTrackSupplementISOUserDataFromBlockBuffer((const void *)v3, v2, 0);
  }
  return result;
}

uint64_t SaveTrackMetadataAtomLocation()
{
  return FigAtomStreamGetCurrentAtomGlobalOffset();
}

uint64_t ParseTrackExcludeFromAutoSelectionAtom(uint64_t a1, uint64_t a2)
{
  return MovieTrackSetExcludeFromAutoSelection(*(_QWORD *)(a2 + 8), 1);
}

uint64_t ParseTrackApertureModeDimensionsAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD v9[7];

  v4 = *(_QWORD *)(a2 + 8);
  v5 = ***(_QWORD ****)a2;
  memset(v9, 0, sizeof(v9));
  v6 = FigAtomStreamInitWithParent();
  if ((_DWORD)v6)
    return v6;
  v7 = ParseChildAtoms(v5, (uint64_t)v9, 3, (uint64_t)&ParseTrackApertureModeDimensionsAtom_atomDispatch, a2);
  if ((_DWORD)v7)
    _MovieAtomReportParsingMessage(v5, v4, a1, (uint64_t)"while parsing", 5);
  return v7;
}

uint64_t ParseProvisionalTrackGroupAssignmentAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 8);
  v4 = ***(_QWORD ****)a2;
  result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!(_DWORD)result)
  {
    _MovieAtomReportParsingMessage(v4, v3, a1, (uint64_t)"Incorrect 'tgas' atom size", 2);
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t ParseSampleEncryptionAtomInTrak(uint64_t a1, uint64_t a2)
{
  MovieTrackNoteSampleEncryptionAtomPresent(*(_QWORD *)(a2 + 8));
  return 0;
}

void _MovieAtomReportParsingMessage(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  const __CFAllocator *v10;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v12;
  const __CFAllocator *v13;
  __CFString *v14;
  __CFString *v15;
  uint64_t CFStringForOSTypeValue;
  int v17;
  uint64_t v18;

  if (a1[8])
  {
    v10 = CFGetAllocator(a1);
    Mutable = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v12 = Mutable;
      v13 = CFGetAllocator(a1);
      v14 = CFStringCreateMutable(v13, 0);
      if (v14)
      {
        v15 = v14;
        CFStringAppendFormat(v14, 0, CFSTR("%s."), a4);
        if (a3)
        {
          v18 = 0;
          v17 = 0;
          FigAtomStreamGetCurrentAtomGlobalOffset();
          FigAtomStreamGetCurrentAtomTypeAndDataLength();
          CFStringForOSTypeValue = FigGetCFStringForOSTypeValue();
          CFStringAppendFormat(v15, 0, CFSTR(" Atom: '%@' Offset: %lld"), CFStringForOSTypeValue, 0);
          FigCFDictionarySetInt64();
          FigCFDictionarySetInt32();
        }
        if (a2)
        {
          v17 = 0;
          LODWORD(v18) = 0;
          MovieTrackGetBasicInfo(a2, &v18, &v17);
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
        }
        FigCFDictionarySetInt64();
        CFDictionarySetValue(v12, (const void *)*MEMORY[0x1E0CA2EF0], v15);
        FigCFDictionarySetInt32();
        if (a5 == 6 || a5 == 5)
          FigAssetAnalysisReporterEditAndAppendMessage();
        else
          FigAssetAnalysisReporterAddMessage();
        CFRelease(v15);
      }
      CFRelease(v12);
    }
  }
}

uint64_t ParseEditListAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t CurrentAtomTypeAndDataLength;
  uint64_t v6;
  const void *v7;

  v4 = *(_QWORD **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if ((_DWORD)CurrentAtomTypeAndDataLength)
  {
    v6 = CurrentAtomTypeAndDataLength;
  }
  else
  {
    _MovieAtomReportParsingMessage(v4, v3, a1, (uint64_t)"'elst' atom size less than minimum", 2);
    v6 = FigSignalErrorAt();
    if (!(_DWORD)v6)
      return v6;
  }
  v7 = *(const void **)(v3 + 696);
  if (v7)
    CFRelease(v7);
  *(_QWORD *)(v3 + 696) = 0;
  *(_QWORD *)(v3 + 704) = 0;
  return v6;
}

uint64_t ParseMediaHeaderAtom(uint64_t a1, _QWORD *****a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = (uint64_t)(*a2)[1];
  v4 = ****a2;
  result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!(_DWORD)result)
  {
    result = FigAtomStreamGetCurrentAtomVersionAndFlags();
    if (!(_DWORD)result)
    {
      _MovieAtomReportParsingMessage(v4, v3, a1, (uint64_t)"'mdhd' V0 atom size less than minimum", 2);
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t ParseMediaHandlerAtom(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = FigAtomStreamReadCurrentAtomData();
  if (!(_DWORD)result)
  {
    result = CheckAtomVersionIsZero_0();
    if (!(_DWORD)result)
      *(_DWORD *)(a2 + 8) = 0;
  }
  return result;
}

uint64_t ParseMediaInfoAtom(__int128 *a1, _DWORD *a2)
{
  unsigned int v4;
  int v5;
  int v6;
  CFArrayRef *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const __CFArray *v11;
  CFIndex *v12;
  OpaqueCMBlockBuffer *ValueAtIndex;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  CMSoundDescriptionFlavor *v20;
  int v21;
  const opaqueCMFormatDescription *FirstFormatDescription;
  const AudioStreamBasicDescription *StreamBasicDescription;
  const opaqueCMFormatDescription *v24;
  const AudioStreamBasicDescription *v25;
  AudioFormatID mFormatID;
  const AudioStreamBasicDescription *v28;
  int CommonSampleSize;
  const char *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  size_t lengthAtOffsetOut;
  _OWORD v35[7];
  _QWORD v36[2];
  __int128 dataPointerOut;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v4 = a2[2];
  v5 = bswap32(v4);
  if (v5 <= 1885954931)
  {
    if (!v5)
    {
      v14 = a1[5];
      v41 = a1[4];
      v42 = v14;
      v43 = a1[6];
      v15 = a1[1];
      dataPointerOut = *a1;
      v38 = v15;
      v16 = a1[3];
      v39 = a1[2];
      v40 = v16;
      if (!FigAtomStreamAdvanceToNextAtomWithType())
      {
        v17 = ParseMediaHandlerAtom((uint64_t)&dataPointerOut, (uint64_t)a2);
        if ((_DWORD)v17)
          return v17;
      }
      v4 = a2[2];
      goto LABEL_21;
    }
    v6 = 1635088502;
LABEL_7:
    if (v5 == v6)
    {
LABEL_8:
      v7 = *(CFArrayRef **)(*(_QWORD *)a2 + 8);
      v8 = ****(_QWORD ****)a2;
      *((_QWORD *)&v35[0] + 1) = a2;
      dataPointerOut = 0u;
      v38 = 0u;
      v39 = 0u;
      v40 = 0u;
      v41 = 0u;
      v42 = 0u;
      v43 = 0u;
      *(_QWORD *)&v35[0] = v5;
      MovieTrackSetParsedTrackType((uint64_t)v7, v5);
      v9 = FigAtomStreamInitWithParent();
      if (!(_DWORD)v9)
      {
        v10 = ParseChildAtoms((_QWORD *)v8, (uint64_t)&dataPointerOut, 3, (uint64_t)&ParseVideoMediaInfoAtom_atomDispatch, (uint64_t)v35);
        if (!(_DWORD)v10)
        {
LABEL_23:
          v18 = ConvertSampleDescriptionsToFormatDescriptions((_QWORD *)v8, v7);
          goto LABEL_24;
        }
LABEL_25:
        _MovieAtomReportParsingMessage((_QWORD *)v8, (uint64_t)v7, (uint64_t)a1, (uint64_t)"while parsing", 5);
        return v10;
      }
LABEL_55:
      v10 = v9;
      goto LABEL_25;
    }
LABEL_21:
    v7 = *(CFArrayRef **)(*(_QWORD *)a2 + 8);
    v8 = ****(_QWORD ****)a2;
    *((_QWORD *)&v35[0] + 1) = a2;
    dataPointerOut = 0u;
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v42 = 0u;
    v43 = 0u;
    *(_QWORD *)&v35[0] = bswap32(v4);
    MovieTrackSetParsedTrackType((uint64_t)v7, v35[0]);
    v9 = FigAtomStreamInitWithParent();
    if (!(_DWORD)v9)
    {
      v9 = ParseChildAtoms((_QWORD *)v8, (uint64_t)&dataPointerOut, 4, (uint64_t)&ParseMediaInfoAtomForGenericMedia_atomDispatch, (uint64_t)v35);
      if (!(_DWORD)v9)
        goto LABEL_23;
    }
    goto LABEL_55;
  }
  if (v5 == 1885954932)
    goto LABEL_8;
  if (v5 != 1936684398)
  {
    v6 = 1986618469;
    goto LABEL_7;
  }
  v7 = *(CFArrayRef **)(*(_QWORD *)a2 + 8);
  v8 = ****(_QWORD ****)a2;
  memset(v35, 0, sizeof(v35));
  v36[0] = 1936684398;
  v36[1] = a2;
  MovieTrackSetParsedTrackType((uint64_t)v7, 1936684398);
  v9 = FigAtomStreamInitWithParent();
  if ((_DWORD)v9)
    goto LABEL_55;
  v10 = ParseChildAtoms((_QWORD *)v8, (uint64_t)v35, 3, (uint64_t)&ParseSoundMediaInfoAtom_atomDispatch, (uint64_t)v36);
  if ((_DWORD)v10)
    goto LABEL_25;
  v11 = v7[7];
  if (v11)
  {
    *(_QWORD *)&dataPointerOut = 0;
    if (CFArrayGetCount(v11) && (v12 = (CFIndex *)CFArrayGetValueAtIndex(v7[7], 0)) != 0 && v7[5])
      ValueAtIndex = (OpaqueCMBlockBuffer *)CFArrayGetValueAtIndex(v7[5], *v12);
    else
      ValueAtIndex = 0;
    lengthAtOffsetOut = 0;
    CMBlockBufferGetDataPointer(ValueAtIndex, 0, &lengthAtOffsetOut, 0, (char **)&dataPointerOut);
    if (lengthAtOffsetOut <= 0x23)
    {
      v30 = "Invalid size for sound description";
    }
    else
    {
      if (*(_WORD *)(dataPointerOut + 16) || !*(_BYTE *)(v8 + 82) || !*(_BYTE *)(v8 + 83))
      {
        if (*(_BYTE *)(v8 + 81))
        {
          if (*(_BYTE *)(v8 + 82))
          {
LABEL_34:
            v20 = (CMSoundDescriptionFlavor *)MEMORY[0x1E0CA27E8];
            goto LABEL_39;
          }
        }
        else if (!*(_BYTE *)(v8 + 83))
        {
          goto LABEL_34;
        }
        v20 = (CMSoundDescriptionFlavor *)MEMORY[0x1E0CA27E0];
LABEL_39:
        v21 = CMDoesBigEndianSoundDescriptionRequireLegacyCBRSampleTableLayout(ValueAtIndex, *v20);
        MovieTrackSetSampleOverrides((uint64_t)v7, 0, 0);
        v9 = ConvertSampleDescriptionsToFormatDescriptions((_QWORD *)v8, v7);
        if ((_DWORD)v9)
          goto LABEL_55;
        if (v21)
        {
          FirstFormatDescription = (const opaqueCMFormatDescription *)GetFirstFormatDescription((uint64_t)v7);
          if (FirstFormatDescription)
          {
            StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(FirstFormatDescription);
            MovieTrackSetSampleOverrides((uint64_t)v7, StreamBasicDescription->mBytesPerPacket, StreamBasicDescription->mFramesPerPacket);
          }
          return 0;
        }
        goto LABEL_43;
      }
      v30 = "V0 sound description in file with QT ftyp and ISO file extension";
    }
    v31 = (_QWORD *)v8;
    v32 = (uint64_t)v7;
    v33 = (uint64_t)a1;
    goto LABEL_54;
  }
  v9 = ConvertSampleDescriptionsToFormatDescriptions((_QWORD *)v8, v7);
  if ((_DWORD)v9)
    goto LABEL_55;
LABEL_43:
  v24 = (const opaqueCMFormatDescription *)GetFirstFormatDescription((uint64_t)v7);
  if (!v24)
    return 0;
  v25 = CMAudioFormatDescriptionGetStreamBasicDescription(v24);
  mFormatID = v25->mFormatID;
  if (mFormatID == 1634492791 || mFormatID == 1970037111)
    return 0;
  v28 = v25;
  if (!v25->mBytesPerPacket)
    return 0;
  CommonSampleSize = MovieSampleTableGetCommonSampleSize((uint64_t)v7);
  if (!CommonSampleSize || v28->mBytesPerPacket == CommonSampleSize)
    return 0;
  snprintf((char *)&dataPointerOut, 0x100uLL, "ASBD mBytesPerPacket %d expected to match common sample size %d from the sample table", v28->mBytesPerPacket, CommonSampleSize);
  _MovieAtomReportParsingMessage((_QWORD *)v8, (uint64_t)v7, (uint64_t)a1, (uint64_t)&dataPointerOut, 5);
  v30 = "ASBD mBytesPerPacket does not match the common sample size";
  v31 = (_QWORD *)v8;
  v32 = (uint64_t)v7;
  v33 = 0;
LABEL_54:
  _MovieAtomReportParsingMessage(v31, v32, v33, (uint64_t)v30, 2);
  v18 = FigSignalErrorAt();
LABEL_24:
  v10 = v18;
  if ((_DWORD)v18)
    goto LABEL_25;
  return v10;
}

uint64_t ParseExtendedLanguageTagAtom()
{
  uint64_t CurrentAtomTypeAndDataLength;
  CMBlockBufferRef theBuffer;
  int v4;
  char v5;
  uint64_t v6;
  int v7;

  v7 = 0;
  v6 = 0;
  v5 = 0;
  v4 = 0;
  theBuffer = 0;
  CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if ((_DWORD)CurrentAtomTypeAndDataLength)
    return CurrentAtomTypeAndDataLength;
  FigAtomStreamGetCurrentAtomVersionAndFlags();
  return 0;
}

uint64_t ParseVideoMediaInfoHeaderAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  __int16 CurrentAtomTypeAndDataLength;

  v3 = *(_QWORD *)(**(_QWORD **)(a2 + 8) + 8);
  v4 = *****(_QWORD ******)(a2 + 8);
  CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!CurrentAtomTypeAndDataLength)
  {
    _MovieAtomReportParsingMessage(v4, v3, a1, (uint64_t)"Unexpected size for 'vmhd' atom", 2);
    return (__int16)FigSignalErrorAt();
  }
  return CurrentAtomTypeAndDataLength;
}

uint64_t ParseDataInfoAtom(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD v8[7];

  v4 = *****(_QWORD ******)(a2 + 8);
  memset(v8, 0, sizeof(v8));
  v5 = FigAtomStreamInitWithParent();
  if ((_DWORD)v5)
    return v5;
  v6 = ParseChildAtoms(v4, (uint64_t)v8, 1, (uint64_t)"ferd", a2);
  if ((_DWORD)v6)
    _MovieAtomReportParsingMessage(v4, 0, a1, (uint64_t)"while parsing", 5);
  return v6;
}

uint64_t ParseSampleTableAtom(uint64_t a1, uint64_t a2)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t CurrentAtomTypeAndDataLength;

  v2 = **(uint64_t ****)(a2 + 8);
  v3 = (uint64_t)v2[1];
  v4 = **v2;
  v5 = *(_QWORD **)v4;
  if (!*(_BYTE *)(v4 + 24))
  {
    CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if ((_DWORD)CurrentAtomTypeAndDataLength)
      goto LABEL_7;
    v6 = DoPostParsingSampleTableCommon(v5, v3);
LABEL_6:
    CurrentAtomTypeAndDataLength = v6;
    goto LABEL_7;
  }
  FigAtomStreamGetCurrentAtomGlobalOffset();
  v6 = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if ((_DWORD)v6)
    goto LABEL_6;
  CurrentAtomTypeAndDataLength = 0;
  *(_BYTE *)(v3 + 718) = 1;
LABEL_7:
  *(_DWORD *)(v3 + 712) = CurrentAtomTypeAndDataLength;
  return CurrentAtomTypeAndDataLength;
}

uint64_t ParseDataRefAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t CurrentAtomTypeAndDataLength;
  uint64_t v7;

  v3 = **(_QWORD **)(a2 + 8);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = ***(_QWORD ****)v3;
  CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!(_DWORD)CurrentAtomTypeAndDataLength)
  {
    _MovieAtomReportParsingMessage(v5, v4, a1, (uint64_t)"'dref' atom size less than minimum", 2);
    CurrentAtomTypeAndDataLength = FigSignalErrorAt();
  }
  v7 = CurrentAtomTypeAndDataLength;
  if ((_DWORD)CurrentAtomTypeAndDataLength)
    ReleaseDataReferenceInfoArray(v4);
  return v7;
}

uint64_t ParseSampleDescriptionAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t CurrentAtomTypeAndDataLength;
  uint64_t v7;
  char v9;
  CFTypeRef cf;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  v3 = **(_QWORD **)(a2 + 8);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = ***(_QWORD ****)v3;
  v20 = 0;
  v19 = 0;
  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v11 = 0u;
  cf = 0;
  v9 = 0;
  CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if ((_DWORD)CurrentAtomTypeAndDataLength)
  {
    v7 = CurrentAtomTypeAndDataLength;
  }
  else
  {
    FigAtomStreamGetCurrentAtomGlobalOffset();
    _MovieAtomReportParsingMessage(v5, v4, a1, (uint64_t)"'stsd' atom size less than minimum", 2);
    v7 = FigSignalErrorAt();
    if (!(_DWORD)v7)
      goto LABEL_4;
  }
  ReleaseSampleDescriptionInfoArray(v4);
LABEL_4:
  if (cf)
    CFRelease(cf);
  return v7;
}

uint64_t ParseSampleGroupDescriptionAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  uint64_t CurrentAtomTypeAndDataLength;
  int v7;
  int v8;
  int v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  const char *v14;
  const char *v15;
  char *v16;
  int v17;
  CFTypeRef cf;
  unsigned __int8 v19;
  CMBlockBufferRef blockBufferOut;
  CMBlockBufferRef sourceBuffer;
  unint64_t v22;
  int v23;

  v3 = **(_QWORD **)(a2 + 8);
  v4 = *(void **)(v3 + 8);
  v5 = ***(_QWORD ****)v3;
  v23 = 0;
  sourceBuffer = 0;
  v22 = 0;
  blockBufferOut = 0;
  v19 = 0;
  cf = 0;
  v17 = 0;
  CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if ((_DWORD)CurrentAtomTypeAndDataLength)
    goto LABEL_21;
  CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomVersionAndFlags();
  if ((_DWORD)CurrentAtomTypeAndDataLength)
    goto LABEL_21;
  if (v19 >= 3u)
  {
    v14 = "Only support V0, V1 or V2 'sgpd' atoms";
    goto LABEL_30;
  }
  CurrentAtomTypeAndDataLength = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
  if ((_DWORD)CurrentAtomTypeAndDataLength)
    goto LABEL_21;
  CurrentAtomTypeAndDataLength = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E0C9AE00], sourceBuffer, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, 2u, &blockBufferOut);
  if ((_DWORD)CurrentAtomTypeAndDataLength)
    goto LABEL_21;
  if (v19 == 1)
  {
    v16 = 0;
    if (v22 < 0x10)
    {
      v15 = "V1 'sgpd' atom size less than minimum";
      goto LABEL_37;
    }
    CMBlockBufferGetDataPointer(blockBufferOut, 0, 0, 0, &v16);
    v7 = bswap32(*((_DWORD *)v16 + 1));
    v9 = bswap32(*((_DWORD *)v16 + 3));
    v8 = bswap32(*((_DWORD *)v16 + 2));
    v10 = v16 + 16;
    v11 = v22 - 16;
  }
  else
  {
    v16 = 0;
    if (v22 <= 0xB)
    {
      v15 = "V0 'sgpd' atom size less than minimum";
      goto LABEL_37;
    }
    CMBlockBufferGetDataPointer(blockBufferOut, 0, 0, 0, &v16);
    v7 = bswap32(*((_DWORD *)v16 + 1));
    v8 = 2;
    if (v7 != 1886547820 && v7 != 1919904876)
    {
      if (v7 != 1936023917)
      {
        v14 = "V0 'sgpd' atom has group description with unknown entry lengths";
        goto LABEL_30;
      }
      v8 = 16;
    }
    v9 = bswap32(*((_DWORD *)v16 + 2));
    v10 = v16 + 12;
    v11 = v22 - 12;
  }
  if (v9 < 0)
  {
    v14 = "Negative number of sample group description entries";
  }
  else
  {
    if ((v8 & 0x80000000) == 0)
    {
      CurrentAtomTypeAndDataLength = MovieTrackAddAndRetainSampleGroupDescriptionArray(v4, v7, &cf);
      if ((_DWORD)CurrentAtomTypeAndDataLength)
        goto LABEL_21;
      CurrentAtomTypeAndDataLength = MovieSampleGroupDescriptionArrayCopyInfo((uint64_t)cf, 0, 0, &v17, 0, 0);
      if ((_DWORD)CurrentAtomTypeAndDataLength)
        goto LABEL_21;
      if (!v17)
      {
        CurrentAtomTypeAndDataLength = CommonSampleGroupDescriptionEntryParse(v5, (uint64_t)v4, (unsigned int *)v10, v9, v8, 0, v11, (uint64_t)cf);
LABEL_21:
        v12 = CurrentAtomTypeAndDataLength;
        goto LABEL_22;
      }
      v15 = "Parsing a second 'sgpd' for the same groupType";
LABEL_37:
      _MovieAtomReportParsingMessage(v5, (uint64_t)v4, a1, (uint64_t)v15, 2);
      CurrentAtomTypeAndDataLength = FigSignalErrorAt();
      goto LABEL_21;
    }
    v14 = "Negative default entry length";
  }
LABEL_30:
  _MovieAtomReportParsingMessage(v5, (uint64_t)v4, a1, (uint64_t)v14, 2);
  FigSignalErrorAt();
  v12 = 0;
LABEL_22:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (sourceBuffer)
    CFRelease(sourceBuffer);
  if (cf)
    CFRelease(cf);
  return v12;
}

uint64_t ParseSampleToGroupAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t ArrayBBuf;
  CMBlockBufferRef v7;
  uint64_t v8;
  CFTypeRef cf;
  CMBlockBufferRef v11;
  unint64_t v12;
  unsigned int v13;
  int v14;

  v3 = **(_QWORD **)(a2 + 8);
  v4 = *(_QWORD **)(v3 + 8);
  v5 = ***(_QWORD ****)v3;
  v14 = 0;
  v13 = 0;
  v11 = 0;
  v12 = 0;
  cf = 0;
  ArrayBBuf = CommonSampleToGroupAtomParseAndCreateArrayBBuf(v5, (uint64_t)v4, a1);
  if (!(_DWORD)ArrayBBuf)
  {
    ArrayBBuf = MovieTrackAddAndRetainSampleGroup(v4, v12, v13, &cf);
    if (!(_DWORD)ArrayBBuf)
    {
      v7 = v11;
      v8 = MovieSampleGroupSet_sbgp((uint64_t)cf, v14, v11);
      if (!v7)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  v8 = ArrayBBuf;
  v7 = v11;
  if (v11)
LABEL_4:
    CFRelease(v7);
LABEL_5:
  if (cf)
    CFRelease(cf);
  return v8;
}

uint64_t ParseMOVCompactSampleToGroupAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t ArrayBBuf;
  OpaqueCMBlockBuffer *v6;
  uint64_t v7;
  _QWORD v9[2];
  int v10;
  CFTypeRef v11;
  OpaqueCMBlockBuffer *v12;
  CFTypeRef cf;
  unint64_t v14;
  unsigned int v15;

  v2 = **(_QWORD **)(a2 + 8);
  v3 = *(_QWORD **)(v2 + 8);
  v4 = ***(_QWORD ****)v2;
  v15 = 0;
  cf = 0;
  v14 = 0;
  v11 = 0;
  v12 = 0;
  v9[0] = 0;
  v9[1] = 0;
  v10 = 0;
  ArrayBBuf = CommonMOVCompactSampleToGroupAtomParseAndCreateArrayBBuf(v4, (uint64_t)v3, a1);
  if (!(_DWORD)ArrayBBuf)
  {
    ArrayBBuf = MovieTrackAddAndRetainSampleGroup(v3, v14, v15, &v11);
    if (!(_DWORD)ArrayBBuf)
    {
      v6 = v12;
      v7 = MovieSampleGroupSet_csgp((CMBlockBufferRef *)v11, v9, (CMBlockBufferRef)cf, v12);
      if (!v6)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  v7 = ArrayBBuf;
  v6 = v12;
  if (v12)
LABEL_4:
    CFRelease(v6);
LABEL_5:
  if (cf)
    CFRelease(cf);
  if (v11)
    CFRelease(v11);
  return v7;
}

uint64_t ParseTimeToSampleNumAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;

  v3 = **(_QWORD **)(a2 + 8);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = ***(_QWORD ****)v3;
  result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!(_DWORD)result)
  {
    _MovieAtomReportParsingMessage(v5, v4, a1, (uint64_t)"'stts' atom size less than minimum", 2);
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t ParseSyncSampleAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;

  v3 = **(_QWORD **)(a2 + 8);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = ***(_QWORD ****)v3;
  result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!(_DWORD)result)
  {
    _MovieAtomReportParsingMessage(v5, v4, a1, (uint64_t)"'stss' atom size less than minimum", 2);
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t ParseSampleToChunkAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;

  v3 = **(_QWORD **)(a2 + 8);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = ***(_QWORD ****)v3;
  result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!(_DWORD)result)
  {
    _MovieAtomReportParsingMessage(v5, v4, a1, (uint64_t)"'stsc' atom size less than minimum", 2);
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t ParseSampleSizeAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;

  v3 = **(_QWORD **)(a2 + 8);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = ***(_QWORD ****)v3;
  result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!(_DWORD)result)
  {
    _MovieAtomReportParsingMessage(v5, v4, a1, (uint64_t)"'stsz' atom size less than minimum", 2);
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t ParseCompactSampleSizeAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;

  v3 = **(_QWORD **)(a2 + 8);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = ***(_QWORD ****)v3;
  result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!(_DWORD)result)
  {
    _MovieAtomReportParsingMessage(v5, v4, a1, (uint64_t)"'stz2' atom size less than minimum", 2);
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t ParseChunkOffsetAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;

  v3 = **(_QWORD **)(a2 + 8);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = ***(_QWORD ****)v3;
  result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!(_DWORD)result)
  {
    _MovieAtomReportParsingMessage(v5, v4, a1, (uint64_t)"'stco' atom size less than minimum", 2);
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t ParseChunkOffset64Atom(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;

  v3 = **(_QWORD **)(a2 + 8);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = ***(_QWORD ****)v3;
  result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!(_DWORD)result)
  {
    _MovieAtomReportParsingMessage(v5, v4, a1, (uint64_t)"'co64' atom size less than minimum", 2);
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t ParseCompositionOffsetAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;

  v3 = **(_QWORD **)(a2 + 8);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = ***(_QWORD ****)v3;
  result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!(_DWORD)result)
  {
    _MovieAtomReportParsingMessage(v5, v4, a1, (uint64_t)"'ctts' atom size less than minimum", 2);
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t ParsePartialSyncSampleAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;

  v3 = **(_QWORD **)(a2 + 8);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = ***(_QWORD ****)v3;
  result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!(_DWORD)result)
  {
    _MovieAtomReportParsingMessage(v5, v4, a1, (uint64_t)"'stps' atom size less than minimum", 2);
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t ParseSampleDependencyAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t CurrentAtomTypeAndDataLength;
  uint64_t BBuf;
  int DataLength;

  v2 = *(_QWORD *)(**(_QWORD **)(a2 + 8) + 8);
  CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if ((_DWORD)CurrentAtomTypeAndDataLength)
    return CurrentAtomTypeAndDataLength;
  CurrentAtomTypeAndDataLength = CheckAtomVersionIsZero_0();
  if ((_DWORD)CurrentAtomTypeAndDataLength)
    return CurrentAtomTypeAndDataLength;
  BBuf = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
  if (!(_DWORD)BBuf)
  {
    DataLength = CMBlockBufferGetDataLength(0);
    return MovieSampleTableSet_sdtp(v2, DataLength, 0);
  }
  return BBuf;
}

uint64_t ParseCompositionShiftLeastGreatestAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;

  v3 = **(_QWORD **)(a2 + 8);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = ***(_QWORD ****)v3;
  result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!(_DWORD)result)
  {
    _MovieAtomReportParsingMessage(v5, v4, a1, (uint64_t)"'cslg' atom size less than minimum", 2);
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t CommonSampleGroupDescriptionEntryParse(_QWORD *a1, uint64_t a2, unsigned int *a3, int a4, int a5, unsigned int a6, unint64_t a7, uint64_t a8)
{
  int v11;
  CFIndex v15;
  uint64_t result;
  unint64_t v17;
  unsigned int v18;
  CFIndex v19;
  const UInt8 *v20;
  const UInt8 *v21;
  const char *v22;

  v11 = a4;
  if (!a5)
  {
    if (a4 >= 1)
    {
      v17 = 0;
      while (1)
      {
        if (v17 + 4 > a7)
        {
LABEL_20:
          v22 = "Atom too short to hold description length";
          goto LABEL_21;
        }
        v18 = *a3;
        v19 = bswap32(*a3);
        if ((v19 & 0x80000000) != 0)
          break;
        v17 += 4 + v19;
        if (v17 > a7)
          goto LABEL_20;
        v20 = (const UInt8 *)(a3 + 1);
        if (v18)
          v21 = v20;
        else
          v21 = 0;
        result = MovieSampleGroupDescriptionArrayAppendParsedDescription(a8, v19, v21);
        if ((_DWORD)result)
          return result;
        a3 = (unsigned int *)&v20[v19];
        if (!--v11)
          goto LABEL_18;
      }
      _MovieAtomReportParsingMessage(a1, a2, 0, (uint64_t)"Invalid sample group description length", 2);
      FigSignalErrorAt();
      return 0;
    }
LABEL_18:
    if (a6)
      return MovieSampleGroupDescriptionArraySetDefaultDescriptionIndex(a8, a6);
    return 0;
  }
  if (a5 * (uint64_t)a4 <= (uint64_t)a7)
  {
    if (a4 >= 1)
    {
      v15 = a5;
      while (1)
      {
        result = MovieSampleGroupDescriptionArrayAppendParsedDescription(a8, v15, (const UInt8 *)a3);
        if ((_DWORD)result)
          return result;
        a3 = (unsigned int *)((char *)a3 + v15);
        if (!--v11)
          goto LABEL_18;
      }
    }
    goto LABEL_18;
  }
  v22 = "Entry length and count inconsistent with atom data size";
LABEL_21:
  _MovieAtomReportParsingMessage(a1, a2, 0, (uint64_t)v22, 2);
  return FigSignalErrorAt();
}

uint64_t CommonSampleToGroupAtomParseAndCreateArrayBBuf(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!(_DWORD)result)
  {
    result = FigAtomStreamGetCurrentAtomVersionAndFlags();
    if (!(_DWORD)result)
    {
      _MovieAtomReportParsingMessage(a1, a2, a3, (uint64_t)"'sbgp' V0 atom size less than minimum", 2);
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t CommonMOVCompactSampleToGroupAtomParseAndCreateArrayBBuf(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t CurrentAtomTypeAndDataLength;
  uint64_t v7;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];
  CMBlockBufferRef sourceBuffer;
  CFTypeRef cf;
  CMBlockBufferRef blockBufferOut;
  uint64_t v17;
  int v18;

  v18 = 0;
  blockBufferOut = 0;
  v17 = 0;
  sourceBuffer = 0;
  cf = 0;
  v11 = 0;
  v12 = 0;
  *(_QWORD *)((char *)v13 + 6) = 0;
  v13[0] = 0;
  v10 = 0;
  v9 = 0;
  CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!(_DWORD)CurrentAtomTypeAndDataLength)
  {
    CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomVersionAndFlags();
    if (!(_DWORD)CurrentAtomTypeAndDataLength)
    {
      _MovieAtomReportParsingMessage(a1, a2, a3, (uint64_t)"'csgm' atom size less than minimum", 2);
      CurrentAtomTypeAndDataLength = FigSignalErrorAt();
    }
  }
  v7 = CurrentAtomTypeAndDataLength;
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (sourceBuffer)
    CFRelease(sourceBuffer);
  return v7;
}

uint64_t NoteThatCompositionOffsetAtomExists(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 8) + 720) = 1;
  return 0;
}

uint64_t ParseSoundMediaInfoHeaderAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = *(_QWORD *)(**(_QWORD **)(a2 + 8) + 8);
  v4 = *****(_QWORD ******)(a2 + 8);
  result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!(_DWORD)result)
  {
    _MovieAtomReportParsingMessage(v4, v3, a1, (uint64_t)"Unexpected size for 'smhd' atom", 2);
    return FigSignalErrorAt();
  }
  return result;
}

const void *GetFirstFormatDescription(uint64_t a1)
{
  const __CFArray *v2;
  CFIndex *ValueAtIndex;

  v2 = *(const __CFArray **)(a1 + 56);
  if (v2
    && CFArrayGetCount(v2)
    && (ValueAtIndex = (CFIndex *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), 0)) != 0
    && *(_QWORD *)(a1 + 48))
  {
    return CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), *ValueAtIndex);
  }
  else
  {
    return 0;
  }
}

uint64_t ParseGenericMediaInfoHeaderAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = **(_QWORD **)(a2 + 8);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = ***(_QWORD ****)v3;
  FigAtomStreamGetCurrentAtomTypeAndDataLength();
  _MovieAtomReportParsingMessage(v5, v4, a1, (uint64_t)"'gmhd' atom size too small", 2);
  return FigSignalErrorAt();
}

uint64_t ParseGenericMediaInfoAtom()
{
  FigAtomStreamGetCurrentAtomTypeAndDataLength();
  return 0;
}

uint64_t ParseTimeCodeMediaHeaderAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD v10[7];
  uint64_t v11;
  int v12;

  v4 = **(_QWORD **)(a2 + 8);
  v5 = *(_QWORD *)(v4 + 8);
  v6 = ***(_QWORD ****)v4;
  v12 = 0;
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  FigAtomStreamGetCurrentAtomTypeAndDataLength();
  v7 = FigAtomStreamInitWithParent();
  if ((_DWORD)v7)
    return v7;
  v8 = ParseChildAtoms(v6, (uint64_t)v10, 1, (uint64_t)&ParseTimeCodeMediaHeaderAtom_atomDispatch, a2);
  if ((_DWORD)v8)
    _MovieAtomReportParsingMessage(v6, v5, a1, (uint64_t)"while parsing", 5);
  return v8;
}

uint64_t ParseTimeCodeMediaInfoAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t CurrentAtomVersionAndFlags;

  v3 = *(_QWORD *)(**(_QWORD **)(a2 + 8) + 8);
  v4 = *****(_QWORD ******)(a2 + 8);
  FigAtomStreamGetCurrentAtomTypeAndDataLength();
  _MovieAtomReportParsingMessage(v4, v3, a1, (uint64_t)"Incorrect 'tcmi' atom size", 2);
  CurrentAtomVersionAndFlags = FigAtomStreamGetCurrentAtomVersionAndFlags();
  if (!(_DWORD)CurrentAtomVersionAndFlags)
    MovieTrackSetTimecodeSpecifics(v3, 0);
  return CurrentAtomVersionAndFlags;
}

uint64_t ParseTrackCleanApertureDimensionsAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 8);
  result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!(_DWORD)result)
  {
    result = FigAtomStreamReadCurrentAtomData();
    if (!(_DWORD)result)
    {
      result = FigAtomStreamReadCurrentAtomData();
      if (!(_DWORD)result)
        return MovieTrackSetCleanApertureDimensions(v2, (float)(int)bswap32(0) * 0.000015259, (float)(int)bswap32(0) * 0.000015259);
    }
  }
  return result;
}

uint64_t ParseTrackProductionApertureDimensionsAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 8);
  result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!(_DWORD)result)
  {
    result = FigAtomStreamReadCurrentAtomData();
    if (!(_DWORD)result)
    {
      result = FigAtomStreamReadCurrentAtomData();
      if (!(_DWORD)result)
        return MovieTrackSetProductionApertureDimensions(v2, (float)(int)bswap32(0) * 0.000015259, (float)(int)bswap32(0) * 0.000015259);
    }
  }
  return result;
}

uint64_t ParseTrackEncodedPixelsDimensionsAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 8);
  result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!(_DWORD)result)
  {
    result = FigAtomStreamReadCurrentAtomData();
    if (!(_DWORD)result)
    {
      result = FigAtomStreamReadCurrentAtomData();
      if (!(_DWORD)result)
        return MovieTrackSetEncodedPixelsDimensions(v2, (float)(int)bswap32(0) * 0.000015259, (float)(int)bswap32(0) * 0.000015259);
    }
  }
  return result;
}

uint64_t SaveiTunesMetaDataAtomLocation(uint64_t a1, uint64_t a2)
{
  if (*(uint64_t *)(**(_QWORD **)a2 + 136) <= 0)
    return FigAtomStreamGetCurrentAtomGlobalOffset();
  else
    return 0;
}

uint64_t ParseMetaDataHandlerAtom(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  result = FigAtomStreamReadCurrentAtomData();
  if (!(_DWORD)result)
    *a2 = bswap32(0);
  return result;
}

uint64_t ParseDataCompressionAtom(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = FigAtomStreamReadCurrentAtomData();
  *(_DWORD *)(a2 + 12) = bswap32(0);
  return result;
}

uint64_t ParseCompressedMovieDataAtom(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t BBuf;
  size_t v6;
  char *v7;
  BOOL v8;
  int v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  _OWORD v15[7];
  uint64_t v16;
  char *v17;
  char *dataPointerOut;
  size_t totalLengthOut;
  CMBlockBufferRef blockBufferOut;
  CMBlockBufferRef theBuffer;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v2 = *(_QWORD **)*a2;
  blockBufferOut = 0;
  theBuffer = 0;
  dataPointerOut = 0;
  totalLengthOut = 0;
  v16 = 0;
  v17 = 0;
  memset(v15, 0, sizeof(v15));
  if (*((_DWORD *)a2 + 3) != 2053925218)
    goto LABEL_33;
  BBuf = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
  if ((_DWORD)BBuf)
    goto LABEL_24;
  CMBlockBufferGetDataPointer(theBuffer, 0, 0, &totalLengthOut, &dataPointerOut);
  if (totalLengthOut <= 3)
  {
    _MovieAtomReportParsingMessage(v2, 0, a1, (uint64_t)"'cmvd' atom data size less than minimum", 3);
LABEL_33:
    BBuf = FigSignalErrorAt();
    goto LABEL_24;
  }
  v6 = bswap32(*(_DWORD *)dataPointerOut);
  if ((int)v6 < 1)
  {
LABEL_30:
    v11 = 0;
    goto LABEL_25;
  }
  BBuf = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v6, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, v6, 1u, &blockBufferOut);
  if ((_DWORD)BBuf)
  {
LABEL_24:
    v11 = BBuf;
    goto LABEL_25;
  }
  CMBlockBufferGetDataPointer(blockBufferOut, 0, 0, 0, &v17);
  v7 = dataPointerOut + 4;
  v9 = totalLengthOut - 4;
  v8 = totalLengthOut == 4;
  dataPointerOut += 4;
  totalLengthOut -= 4;
  if (v8)
    goto LABEL_30;
  v10 = v17;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v22 = 0u;
  MEMORY[0x19402F294](&gFigInitInflatorLibOnce_0, InitInflatorLibrary_0);
  if (!s_inflateInit__0 || !s_inflate_0 || !s_inflateEnd_0)
  {
    v11 = 0xFFFFFFFFLL;
    goto LABEL_25;
  }
  if (s_inflateInit__0(&v22, "1.2.12", 112))
  {
    v12 = FigSignalErrorAt();
    v11 = v12;
    if ((_DWORD)v12)
      goto LABEL_25;
    goto LABEL_19;
  }
  *(_QWORD *)&v22 = v7;
  DWORD2(v22) = v9;
  *(_QWORD *)&v23 = 0;
  *((_QWORD *)&v23 + 1) = v10;
  LODWORD(v24) = v6;
  *((_QWORD *)&v24 + 1) = 0;
  if (s_inflate_0(&v22, 4) == 1)
    v11 = 0;
  else
    v11 = FigSignalErrorAt();
  s_inflateEnd_0(&v22);
  if (!(_DWORD)v11)
  {
LABEL_19:
    BBuf = CMByteStreamCreateForBlockBuffer();
    if (!(_DWORD)BBuf)
    {
      v13 = (const void *)v2[7];
      if (v13)
        CFRelease(v13);
      v2[7] = v16;
      BBuf = FigAtomStreamInitWithByteStream();
      if (!(_DWORD)BBuf)
        BBuf = ParseMovieAtom((uint64_t)v15, *a2);
    }
    goto LABEL_24;
  }
LABEL_25:
  if (theBuffer)
    CFRelease(theBuffer);
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  return v11;
}

void *InitInflatorLibrary_0()
{
  void *result;
  void *v1;

  result = dlopen("/usr/lib/libz.dylib", 6);
  if (result)
  {
    v1 = result;
    s_inflateInit__0 = dlsym(result, "inflateInit_");
    s_inflate_0 = dlsym(v1, "inflate");
    result = dlsym(v1, "inflateEnd");
    s_inflateEnd_0 = result;
  }
  return result;
}

uint64_t ParseMovieExtendsHeaderAtom(uint64_t a1, uint64_t **a2)
{
  uint64_t v2;
  uint64_t CurrentAtomVersionAndFlags;
  uint64_t CurrentAtomData;
  int64_t v5;
  CMTime v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = **a2;
  v10 = 0;
  v9 = 0;
  v8 = 0;
  FigAtomStreamGetCurrentAtomTypeAndDataLength();
  CurrentAtomVersionAndFlags = FigAtomStreamGetCurrentAtomVersionAndFlags();
  if ((_DWORD)CurrentAtomVersionAndFlags)
    return CurrentAtomVersionAndFlags;
  if (v10 == 1)
  {
    CurrentAtomData = FigAtomStreamReadCurrentAtomData();
    if (!(_DWORD)CurrentAtomData)
    {
      v5 = bswap64(0);
      goto LABEL_7;
    }
  }
  else
  {
    CurrentAtomData = FigAtomStreamReadCurrentAtomData();
    if (!(_DWORD)CurrentAtomData)
    {
      v5 = bswap32(0);
LABEL_7:
      CMTimeMake(&v7, v5, *(_DWORD *)(v2 + 240));
      *(CMTime *)(v2 + 160) = v7;
      *(_BYTE *)(v2 + 155) = 1;
    }
  }
  return CurrentAtomData;
}

_DWORD *ParseTrackExtendsAtom(uint64_t a1, uint64_t **a2)
{
  uint64_t v2;
  _DWORD *result;
  _DWORD *v4;
  int v5;
  _DWORD *v6;
  _DWORD *v7;

  v2 = **a2;
  FigAtomStreamGetCurrentAtomTypeAndDataLength();
  result = (_DWORD *)FigAtomStreamGetCurrentAtomVersionAndFlags();
  if (!(_DWORD)result)
  {
    result = (_DWORD *)FigAtomStreamReadCurrentAtomData();
    if (!(_DWORD)result)
    {
      result = (_DWORD *)MovieInformationFindTrackForTrackID(v2, bswap32(0));
      if (result)
      {
        v4 = result;
        v5 = bswap32(0);
        result = (_DWORD *)MovieTrackSetTrackExtendsDefaultValues(result, v5, v5, v5, v5);
        if (!(_DWORD)result)
        {
          if (*((_QWORD *)v4 + 91))
          {
            return 0;
          }
          else
          {
            v6 = malloc_type_calloc(1uLL, 0x40uLL, 0x10200407FA1957DuLL);
            *((_QWORD *)v4 + 91) = v6;
            if (v6)
            {
              v7 = v6;
              result = 0;
              v7[10] = v5;
              v7[11] = v5;
              v7[12] = v5;
              v7[13] = v5;
              *((_OWORD *)v7 + 1) = xmmword_1932FCCD0;
              *((_QWORD *)v7 + 4) = 0x7FFFFFFF80000000;
            }
            else
            {
              return (_DWORD *)FigSignalErrorAt();
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t ParseMovieFragmentHeaderAtom(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t CurrentAtomData;
  int v5;
  int v6;
  uint64_t v7;

  v3 = **a2;
  FigAtomStreamGetCurrentAtomTypeAndDataLength();
  CurrentAtomData = FigAtomStreamReadCurrentAtomData();
  if ((_DWORD)CurrentAtomData)
    return CurrentAtomData;
  v5 = bswap32(0);
  v6 = *(_DWORD *)(v3 + 184);
  switch(v6)
  {
    case 2:
      return 1937010544;
    case 1:
      if (v5 != *(_DWORD *)(v3 + 188) + 1)
      {
        v7 = 1937010544;
        _MovieAtomReportParsingMessage((_QWORD *)v3, 0, a1, (uint64_t)"Movie fragment sequence number out of sequence. This and subsequent fragments ignored", 3);
        *(_DWORD *)(v3 + 184) = 2;
        return v7;
      }
      MovieInformationUpdateLastParsedFragmentSequenceNumber(v3, v5);
      break;
    case 0:
      MovieInformationEstablishFirstParsedFragmentSequenceNumber(v3, v5);
      break;
  }
  return 0;
}

uint64_t ParseTrackFragmentAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  const opaqueCMFormatDescription *FirstFormatDescription;
  uint64_t v14;
  const opaqueCMFormatDescription *v15;
  const __CFData *Extension;
  const __CFData *v17;
  CFTypeID v18;
  const UInt8 *BytePtr;
  const UInt8 *v20;
  CFIndex v21;
  uint64_t *v22;
  uint64_t v23;
  const __CFAllocator *v24;
  CFMutableArrayRef Mutable;
  CFDataRef v26;
  _QWORD *v27;
  CFIndex v28;
  FourCharCode MediaSubType;
  CFMutableArrayRef v30;
  const char *v31;
  CFMutableArrayRef v32;
  uint64_t v33;
  size_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  __CFData *v38;
  __CFData *v39;
  unsigned int v40;
  CFIndex v41;
  __CFData *v42;
  __CFData *v43;
  UInt8 *MutableBytePtr;
  const __CFData *v45;
  unint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  const char *v50;
  uint64_t v51;
  _QWORD *v52;
  _OWORD v53[7];
  uint64_t v54;
  int v55;
  uint64_t *v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  unsigned int v60;
  unsigned __int16 v61;
  unsigned __int16 v62;
  unsigned __int8 destination;
  unint64_t v64;

  v4 = **(_QWORD **)a2;
  v59 = 0;
  v58 = 0u;
  v57 = 0u;
  v55 = 0;
  v54 = 0;
  memset(v53, 0, sizeof(v53));
  FigAtomStreamGetCurrentAtomTypeAndDataLength();
  v5 = FigAtomStreamInitWithParent();
  if ((_DWORD)v5)
    return v5;
  v6 = *(_QWORD *)(a2 + 8);
  v56 = *(uint64_t **)a2;
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)&v58 = v6;
  *((_QWORD *)&v58 + 1) = v7;
  LOBYTE(v59) = *(_BYTE *)(a2 + 24);
  v8 = ParseChildAtoms((_QWORD *)v4, (uint64_t)v53, 12, (uint64_t)&ParseTrackFragmentAtom_atomDispatch, (uint64_t)&v56);
  if ((_DWORD)v8)
    _MovieAtomReportParsingMessage((_QWORD *)v4, v57, a1, (uint64_t)"Encountered an error during parsing of track fragment atom", 5);
  if (!*(_BYTE *)(a2 + 24))
  {
    if ((_BYTE)v59)
      v9 = BYTE1(v59) == 0;
    else
      v9 = 1;
    v10 = !v9;
    *(_BYTE *)(a2 + 24) = v10;
  }
  if (*((_QWORD *)&v57 + 1))
  {
    if (*(_BYTE *)(*((_QWORD *)&v57 + 1) + 176))
      MovieTrackEstablishFirstFragmentBaseDecodeTime(v4, v57, *(_QWORD *)(*((_QWORD *)&v57 + 1) + 16));
    MovieTrackCreateEditSegmentArrayFromFragmentEditList(v4, v57, *(unsigned __int8 *)(*(_QWORD *)a2 + 25));
    v11 = *((_QWORD *)&v57 + 1);
    if (!*(_QWORD *)(*((_QWORD *)&v57 + 1) + 72))
    {
      v27 = *(_QWORD **)(*((_QWORD *)&v57 + 1) + 8);
      if (!v27)
        v27 = (_QWORD *)(*(_QWORD *)(v57 + 728) + 56);
      *v27 = 0;
      if (*(_BYTE *)(*(_QWORD *)a2 + 25))
      {
        MovieTrackIntegrateFragmentSampleGroups(v57, *(_QWORD *)(v11 + 104));
        v11 = *((_QWORD *)&v57 + 1);
      }
      if (*(_QWORD *)(v11 + 96))
      {
        CFRelease(*(CFTypeRef *)(v11 + 96));
        v11 = *((_QWORD *)&v57 + 1);
      }
      if (*(_QWORD *)(v11 + 112))
      {
        CFRelease(*(CFTypeRef *)(v11 + 112));
        v11 = *((_QWORD *)&v57 + 1);
      }
      if (*(_QWORD *)(v11 + 104))
      {
        CFRelease(*(CFTypeRef *)(v11 + 104));
        v11 = *((_QWORD *)&v57 + 1);
      }
      FreeSampleAuxInfo(v11);
      free(*((void **)&v57 + 1));
      return v8;
    }
    *(_BYTE *)(v4 + 157) = 1;
    if (!*(_QWORD *)(v11 + 88))
      return v8;
    v12 = v57;
    v52 = (_QWORD *)*v56;
    v64 = 0;
    FirstFormatDescription = (const opaqueCMFormatDescription *)GetFirstFormatDescription(v57);
    v14 = *(_QWORD *)(*((_QWORD *)&v57 + 1) + 88);
    if (!*(_DWORD *)(v14 + 12))
      return v8;
    if (!*(_QWORD *)v14)
      return v8;
    if (!*((_QWORD *)&v58 + 1))
      return v8;
    v15 = FirstFormatDescription;
    if (!FirstFormatDescription)
      return v8;
    Extension = (const __CFData *)CMFormatDescriptionGetExtension(FirstFormatDescription, (CFStringRef)*MEMORY[0x1E0CA4A18]);
    if (!Extension)
      return v8;
    v17 = Extension;
    v18 = CFGetTypeID(Extension);
    if (v18 != CFDataGetTypeID())
      return v8;
    if (CFDataGetLength(v17) <= 7)
    {
      v31 = ">> CommonEncryptionTrackEncryptionBox is too small";
    }
    else
    {
      BytePtr = CFDataGetBytePtr(v17);
      if ((BytePtr[6] & 1) == 0)
        return v8;
      v20 = BytePtr;
      v21 = BytePtr[7];
      if (BytePtr[7])
      {
        if ((_DWORD)v21 == 8 || (_DWORD)v21 == 16)
        {
          v22 = *(uint64_t **)(*((_QWORD *)&v57 + 1) + 88);
          v23 = *v22;
          v24 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *((unsigned int *)v22 + 3), MEMORY[0x1E0C9B378]);
          *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v57 + 1) + 88) + 24) = Mutable;
          if (Mutable)
          {
            v26 = 0;
LABEL_56:
            v51 = v12;
            v32 = CFArrayCreateMutable(v24, *(unsigned int *)(*(_QWORD *)(*((_QWORD *)&v57 + 1) + 88) + 12), MEMORY[0x1E0C9B378]);
            *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v57 + 1) + 88) + 32) = v32;
            if (!v32)
            {
LABEL_94:
              FigSignalErrorAt();
              goto LABEL_85;
            }
            if (FigAtomStreamGetCurrentAtomTypeAndDataLength())
              goto LABEL_85;
            v33 = *(_QWORD *)(*((_QWORD *)&v57 + 1) + 88);
            if (!*(_DWORD *)(v33 + 12))
              goto LABEL_85;
            v34 = 0;
            v35 = v23 - 8;
            while (1)
            {
              destination = 0;
              v36 = *(_DWORD *)(v33 + 8);
              if (v36)
              {
                v37 = *(_DWORD *)(v33 + 8);
                destination = v36;
              }
              else
              {
                if (CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v33 + 16), v34, 1uLL, &destination))
                  goto LABEL_85;
                v37 = destination;
              }
              if (v35 + v37 > v64)
                break;
              if ((_DWORD)v21)
              {
                v38 = CFDataCreateMutable(v24, v21);
                if (!v38)
                  goto LABEL_94;
                v39 = v38;
                CFDataSetLength(v38, v21);
                CFDataGetMutableBytePtr(v39);
                if (FigAtomStreamReadCurrentAtomData())
                {
                  CFRelease(v39);
                  goto LABEL_85;
                }
                CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*((_QWORD *)&v57 + 1) + 88) + 24), v39);
                CFRelease(v39);
                v35 += v21;
              }
              else if (v26)
              {
                CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*((_QWORD *)&v57 + 1) + 88) + 24), v26);
              }
              if (destination > v21)
              {
                v62 = 0;
                if (FigAtomStreamReadCurrentAtomData())
                  goto LABEL_85;
                v40 = bswap32(v62) >> 16;
                v62 = v40;
                if ((_DWORD)v21 + 2 + 6 * v40 != destination)
                {
                  v50 = ">> Bad sample auxiliary data";
                  goto LABEL_93;
                }
                v41 = 8 * v40;
                v42 = CFDataCreateMutable(v24, v41);
                if (!v42)
                  goto LABEL_94;
                v43 = v42;
                v35 += 2;
                CFDataSetLength(v42, v41);
                MutableBytePtr = CFDataGetMutableBytePtr(v43);
                if (v62)
                {
                  v45 = v26;
                  v46 = 0;
                  v47 = MutableBytePtr + 4;
                  while (1)
                  {
                    v48 = v35;
                    v61 = 0;
                    v60 = 0;
                    if (FigAtomStreamReadCurrentAtomData()
                      || FigAtomStreamReadCurrentAtomData())
                    {
                      break;
                    }
                    *(v47 - 1) = bswap32(v61) >> 16;
                    *v47 = bswap32(v60);
                    v47 += 2;
                    ++v46;
                    v35 += 6;
                    if (v46 >= v62)
                    {
                      v35 = v48 + 6;
                      v26 = v45;
                      goto LABEL_81;
                    }
                  }
                  CFRelease(v43);
                  v26 = v45;
LABEL_85:
                  if (v26)
                    CFRelease(v26);
                  return v8;
                }
LABEL_81:
                CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*((_QWORD *)&v57 + 1) + 88) + 32), v43);
                CFRelease(v43);
              }
              ++v34;
              v33 = *(_QWORD *)(*((_QWORD *)&v57 + 1) + 88);
              if (v34 >= *(unsigned int *)(v33 + 12))
                goto LABEL_85;
            }
            v50 = ">> Sample auxiliary data read offset out of range";
LABEL_93:
            _MovieAtomReportParsingMessage(v52, v51, 0, (uint64_t)v50, 2);
            goto LABEL_94;
          }
LABEL_54:
          FigSignalErrorAt();
          return v8;
        }
        v31 = ">> Only default_Per_Sample_IV_Size = 0, 8, 16  is supported";
      }
      else if (CFDataGetLength(v17) <= 24)
      {
        v31 = ">> CommonEncryptionTrackEncryptionBox is too small (< 25)";
      }
      else
      {
        v28 = v20[24];
        if (v28 <= 0x10 && ((1 << v28) & 0x10101) != 0)
        {
          v23 = **(_QWORD **)(*((_QWORD *)&v57 + 1) + 88);
          MediaSubType = CMFormatDescriptionGetMediaSubType(v15);
          if (MediaSubType != 1635135537 && MediaSubType != 1902212657)
          {
            v26 = 0;
            v24 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            goto LABEL_56;
          }
          if ((_DWORD)v28 != 8 && (_DWORD)v28 != 16)
            goto LABEL_54;
          v24 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          v30 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(unsigned int *)(*(_QWORD *)(*((_QWORD *)&v57 + 1) + 88) + 12), MEMORY[0x1E0C9B378]);
          *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v57 + 1) + 88) + 24) = v30;
          if (!v30)
            goto LABEL_54;
          if (CFDataGetLength(v17) >= v28 + 25)
          {
            v26 = CFDataCreate(v24, v20 + 25, v28);
            goto LABEL_56;
          }
          v31 = ">> CommonEncryptionTrackEncryptionBox is too small (25+default_constant_IV_size)";
        }
        else
        {
          v31 = ">> Only default_constant_IV_size = 0, 8, 16  is supported";
        }
      }
    }
    _MovieAtomReportParsingMessage(v52, v12, 0, (uint64_t)v31, 2);
    goto LABEL_54;
  }
  return v8;
}

uint64_t ParseTrackFragmentHeaderAtom(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t result;
  uint64_t TrackForTrackID;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  const char *v10;

  v3 = **(_QWORD ***)a2;
  if (*(_BYTE *)(a2 + 40))
  {
    _MovieAtomReportParsingMessage(v3, 0, a1, (uint64_t)"Inherited base data offset with more than one track fragment not supported", 2);
    return FigSignalErrorAt();
  }
  else
  {
    FigAtomStreamGetCurrentAtomTypeAndDataLength();
    result = FigAtomStreamGetCurrentAtomVersionAndFlags();
    if (!(_DWORD)result)
    {
      result = FigAtomStreamReadCurrentAtomData();
      if (!(_DWORD)result)
      {
        TrackForTrackID = MovieInformationFindTrackForTrackID((uint64_t)v3, bswap32(0));
        *(_QWORD *)(a2 + 8) = TrackForTrackID;
        if (TrackForTrackID)
        {
          v7 = TrackForTrackID;
          if (*(_QWORD *)(TrackForTrackID + 728))
          {
            if (*(_BYTE *)(*(_QWORD *)a2 + 25))
              MoovAssureSampleTableParsed(v3, TrackForTrackID);
            v10 = "Incorrect 'tfhd' atom size";
          }
          else
          {
            v10 = "Track not set up to receive fragments";
          }
          v8 = v3;
          v9 = v7;
        }
        else
        {
          v10 = "Fragment contains unknown track ID";
          v8 = v3;
          v9 = 0;
        }
        _MovieAtomReportParsingMessage(v8, v9, a1, (uint64_t)v10, 2);
        return FigSignalErrorAt();
      }
    }
  }
  return result;
}

uint64_t ParseTrackFragmentBaseMediaDecodeTimeAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  const char *v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
  {
    v6 = "'tfdt' atom appears without prior 'tfhd' atom";
LABEL_9:
    _MovieAtomReportParsingMessage(**(_QWORD ***)a2, *(_QWORD *)(a2 + 8), a1, (uint64_t)v6, 2);
    return FigSignalErrorAt();
  }
  if (*(_QWORD *)(v2 + 72))
  {
    v6 = "'tfdt' atom appeared after encountering 'trun' atom";
    goto LABEL_9;
  }
  result = FigAtomStreamGetCurrentAtomVersionAndFlags();
  if (!(_DWORD)result)
  {
    result = FigAtomStreamReadCurrentAtomData();
    if (!(_DWORD)result)
    {
      v5 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(v5 + 16) = bswap32(0);
      result = 0;
      *(_BYTE *)(v5 + 176) = 1;
    }
  }
  return result;
}

uint64_t ParseTrackRunAtom(uint64_t a1, uint64_t a2)
{
  uint64_t CurrentAtomVersionAndFlags;

  if (*(_QWORD *)(a2 + 16)
    && ((FigAtomStreamGetCurrentAtomTypeAndDataLength(),
         CurrentAtomVersionAndFlags = FigAtomStreamGetCurrentAtomVersionAndFlags(),
         (_DWORD)CurrentAtomVersionAndFlags)
     || (CurrentAtomVersionAndFlags = FigAtomStreamReadCurrentAtomData(), (_DWORD)CurrentAtomVersionAndFlags)))
  {
    return CurrentAtomVersionAndFlags;
  }
  else
  {
    return 0;
  }
}

uint64_t ParseSampleAuxInfoSizesAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t CurrentAtomVersionAndFlags;
  const opaqueCMFormatDescription *FirstFormatDescription;
  uint64_t CurrentAtomData;
  CFPropertyListRef v9;
  unsigned int v10;
  _DWORD *v11;
  uint64_t v12;
  const char *v14;
  _BYTE v15[5];

  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
  {
    v14 = "'saiz' atom appears without prior 'tfhd' atom";
LABEL_14:
    _MovieAtomReportParsingMessage(**(_QWORD ***)a2, v3, a1, (uint64_t)v14, 2);
    CurrentAtomData = FigSignalErrorAt();
    goto LABEL_15;
  }
  if (*(_BYTE *)(v4 + 40) != 1)
  {
    v14 = "Only supports sample auxiliary info data when default-base-is-moof is set";
    goto LABEL_14;
  }
  v5 = *(_QWORD *)(v4 + 88);
  if (v5 && *(_QWORD *)(v5 + 16))
    return 0;
  FigAtomStreamGetCurrentAtomTypeAndDataLength();
  CurrentAtomVersionAndFlags = FigAtomStreamGetCurrentAtomVersionAndFlags();
  if ((_DWORD)CurrentAtomVersionAndFlags)
  {
    v12 = CurrentAtomVersionAndFlags;
    goto LABEL_16;
  }
  FirstFormatDescription = (const opaqueCMFormatDescription *)GetFirstFormatDescription(v3);
  MovieTrackNoteSampleAuxInfoSizesAtomPresent(v3);
  memset(v15, 0, sizeof(v15));
  CurrentAtomData = FigAtomStreamReadCurrentAtomData();
  if ((_DWORD)CurrentAtomData)
  {
LABEL_15:
    v12 = CurrentAtomData;
    if (!(_DWORD)CurrentAtomData)
      return v12;
LABEL_16:
    FreeSampleAuxInfo(*(_QWORD *)(a2 + 16));
    return v12;
  }
  v9 = (CFPropertyListRef)*MEMORY[0x1E0C9AE50];
  if (v9 != CMFormatDescriptionGetExtension(FirstFormatDescription, (CFStringRef)*MEMORY[0x1E0CA4A10]))
    return 0;
  v10 = bswap32(*(unsigned int *)&v15[1]);
  v11 = *(_DWORD **)(*(_QWORD *)(a2 + 16) + 88);
  if (!v11)
  {
    v11 = malloc_type_calloc(1uLL, 0x28uLL, 0x1020040DB654AE0uLL);
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 88) = v11;
  }
  v11[2] = 0;
  v11[3] = v10;
  v12 = 0;
  *((_QWORD *)v11 + 2) = 0;
  return v12;
}

uint64_t ParseSampleAuxInfoOffsetsAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t CurrentAtomVersionAndFlags;
  const opaqueCMFormatDescription *FirstFormatDescription;
  uint64_t CurrentAtomData;
  CFPropertyListRef v9;
  const char *v11;

  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
  {
    v11 = "'saio' atom appears without prior 'tfhd' atom";
LABEL_16:
    _MovieAtomReportParsingMessage(**(_QWORD ***)a2, v3, a1, (uint64_t)v11, 2);
    CurrentAtomData = FigSignalErrorAt();
    goto LABEL_17;
  }
  if (*(_BYTE *)(v4 + 40) != 1)
  {
    v11 = "Only supports sample auxiliary info data when default-base-is-moof is set";
    goto LABEL_16;
  }
  v5 = *(_QWORD **)(v4 + 88);
  if (v5 && *v5)
    return 0;
  FigAtomStreamGetCurrentAtomTypeAndDataLength();
  CurrentAtomVersionAndFlags = FigAtomStreamGetCurrentAtomVersionAndFlags();
  if ((_DWORD)CurrentAtomVersionAndFlags)
    goto LABEL_13;
  FirstFormatDescription = (const opaqueCMFormatDescription *)GetFirstFormatDescription(v3);
  MovieTrackNoteSampleAuxInfoOffsetsAtomPresent(v3);
  CurrentAtomData = FigAtomStreamReadCurrentAtomData();
  if ((_DWORD)CurrentAtomData
    || (v9 = (CFPropertyListRef)*MEMORY[0x1E0C9AE50],
        v9 != CMFormatDescriptionGetExtension(FirstFormatDescription, (CFStringRef)*MEMORY[0x1E0CA4A10])))
  {
LABEL_17:
    if (!(_DWORD)CurrentAtomData)
      return CurrentAtomData;
LABEL_18:
    FreeSampleAuxInfo(*(_QWORD *)(a2 + 16));
    return CurrentAtomData;
  }
  if (!*(_QWORD *)(*(_QWORD *)(a2 + 16) + 88))
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 88) = malloc_type_calloc(1uLL, 0x28uLL, 0x1020040DB654AE0uLL);
  CurrentAtomVersionAndFlags = FigAtomStreamReadCurrentAtomData();
  if ((_DWORD)CurrentAtomVersionAndFlags)
  {
LABEL_13:
    CurrentAtomData = CurrentAtomVersionAndFlags;
    goto LABEL_18;
  }
  CurrentAtomData = 0;
  **(_QWORD **)(*(_QWORD *)(a2 + 16) + 88) = bswap32(0);
  return CurrentAtomData;
}

uint64_t ParseEditsAtomInTrackFragment(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t CurrentAtomTypeAndDataLength;
  const void *v6;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _QWORD *v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a2 + 8);
  v4 = **(_QWORD ***)a2;
  v16 = v4;
  v17 = v3;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v9 = 0u;
  CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if ((_DWORD)CurrentAtomTypeAndDataLength)
    return CurrentAtomTypeAndDataLength;
  if (!v3)
  {
    _MovieAtomReportParsingMessage(v4, 0, a1, (uint64_t)"Track Information is NULL (missing track fragment header)", 3);
    return FigSignalErrorAt();
  }
  *(_BYTE *)(v3 + 722) = 1;
  *(_BYTE *)(v3 + 727) = 1;
  v6 = *(const void **)(v3 + 696);
  if (v6)
    CFRelease(v6);
  *(_QWORD *)(v3 + 696) = 0;
  *(_QWORD *)(v3 + 704) = 0;
  return 0;
}

uint64_t ParseSampleDependencyAtomInTrackFragment(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = **(_QWORD ***)a2;
  result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!(_DWORD)result)
  {
    _MovieAtomReportParsingMessage(v4, v3, a1, (uint64_t)"'sdtp' atom not minimum size", 2);
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t ParseFragmentSampleGroupDescriptionAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t CurrentAtomTypeAndDataLength;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  CFTypeRef v14;
  uint64_t v15;
  const char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  const char *v22;
  char *v23;
  int v24;
  CFTypeRef cf;
  unsigned __int8 v26;
  CMBlockBufferRef sourceBuffer;
  CMBlockBufferRef blockBufferOut;
  unint64_t v29;
  int v30;

  v3 = *(_QWORD *)(a2 + 8);
  v4 = **(_QWORD ***)a2;
  v30 = 0;
  blockBufferOut = 0;
  v29 = 0;
  sourceBuffer = 0;
  v26 = 0;
  cf = 0;
  v24 = 0;
  if (!v3)
  {
    v17 = "Track Information is NULL (missing track fragment header)";
    v18 = v4;
    v19 = 0;
    v20 = a1;
    v21 = 3;
LABEL_37:
    _MovieAtomReportParsingMessage(v18, v19, v20, (uint64_t)v17, v21);
    CurrentAtomTypeAndDataLength = FigSignalErrorAt();
    goto LABEL_19;
  }
  CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if ((_DWORD)CurrentAtomTypeAndDataLength)
    goto LABEL_19;
  CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomVersionAndFlags();
  if ((_DWORD)CurrentAtomTypeAndDataLength)
    goto LABEL_19;
  if (v26 - 3 <= 0xFFFFFFFD)
  {
    v22 = "Only support V1 or V2 'sgpd' atoms";
    goto LABEL_31;
  }
  CurrentAtomTypeAndDataLength = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
  if ((_DWORD)CurrentAtomTypeAndDataLength)
    goto LABEL_19;
  CurrentAtomTypeAndDataLength = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E0C9AE00], sourceBuffer, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, 2u, &blockBufferOut);
  if ((_DWORD)CurrentAtomTypeAndDataLength)
    goto LABEL_19;
  if (v26 == 1)
  {
    v23 = 0;
    if (v29 >= 0x10)
    {
      CMBlockBufferGetDataPointer(blockBufferOut, 0, 0, 0, &v23);
      v7 = 0;
      v8 = bswap32(*((_DWORD *)v23 + 1));
      v9 = bswap32(*((_DWORD *)v23 + 3));
      v10 = bswap32(*((_DWORD *)v23 + 2));
      v11 = v23 + 16;
      v12 = v29 - 16;
      goto LABEL_12;
    }
    v17 = "V1 'sgpd' atom size less than minimum";
LABEL_36:
    v18 = v4;
    v19 = v3;
    v20 = a1;
    v21 = 2;
    goto LABEL_37;
  }
  v23 = 0;
  if (v29 < 0x14)
  {
    v17 = "V2 'sgpd' atom size less than minimum";
    goto LABEL_36;
  }
  CMBlockBufferGetDataPointer(blockBufferOut, 0, 0, 0, &v23);
  v8 = bswap32(*((_DWORD *)v23 + 1));
  v9 = bswap32(*((_DWORD *)v23 + 4));
  v10 = bswap32(*((_DWORD *)v23 + 2));
  v7 = bswap32(*((_DWORD *)v23 + 3));
  v11 = v23 + 20;
  v12 = v29 - 20;
LABEL_12:
  if (v9 < 0)
  {
    v22 = "Negative number of sample group description entries";
  }
  else
  {
    if ((v10 & 0x80000000) == 0)
    {
      v13 = *(_QWORD *)(a2 + 16);
      if (v13)
      {
        CurrentAtomTypeAndDataLength = FragmentInfoAddAndRetainSampleGroupDescriptionArray(*(const void **)(a2 + 8), v13, v8, &cf);
        if ((_DWORD)CurrentAtomTypeAndDataLength)
          goto LABEL_19;
        v14 = cf;
        CurrentAtomTypeAndDataLength = MovieSampleGroupDescriptionArrayCopyInfo((uint64_t)cf, 0, 0, &v24, 0, 0);
        if ((_DWORD)CurrentAtomTypeAndDataLength)
          goto LABEL_19;
        if (!v24)
        {
          CurrentAtomTypeAndDataLength = CommonSampleGroupDescriptionEntryParse(v4, v3, (unsigned int *)v11, v9, v10, v7, v12, (uint64_t)v14);
LABEL_19:
          v15 = CurrentAtomTypeAndDataLength;
          goto LABEL_20;
        }
        v17 = "Parsing a second 'sgpd' for the same groupType in fragment";
      }
      else
      {
        v17 = "No FragmentInfo (missing track fragment header)";
      }
      goto LABEL_36;
    }
    v22 = "Negative default entry length in sample group description";
  }
LABEL_31:
  _MovieAtomReportParsingMessage(v4, v3, a1, (uint64_t)v22, 2);
  FigSignalErrorAt();
  v15 = 0;
LABEL_20:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (sourceBuffer)
    CFRelease(sourceBuffer);
  if (cf)
    CFRelease(cf);
  return v15;
}

uint64_t ParseFragmentSampleToGroupAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD **v5;
  _QWORD *v6;
  uint64_t ArrayBBuf;
  uint64_t v8;
  CFTypeRef v9;
  uint64_t v10;
  CFTypeRef v12;
  CFTypeRef cf;
  unint64_t v14;
  unsigned int v15;
  int v16;

  v5 = *(_QWORD ***)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = *v5;
  v16 = 0;
  v15 = 0;
  cf = 0;
  v14 = 0;
  v12 = 0;
  if (v4)
  {
    ArrayBBuf = CommonSampleToGroupAtomParseAndCreateArrayBBuf(v6, v4, a1);
    if ((_DWORD)ArrayBBuf)
    {
      v10 = ArrayBBuf;
    }
    else
    {
      v8 = FragmentInfoAddAndRetainSampleGroup(*(_QWORD **)(a2 + 8), *(_QWORD *)(a2 + 16), v14, v15, &v12);
      v9 = cf;
      if (!(_DWORD)v8)
        v8 = MovieSampleGroupSet_sbgp((uint64_t)v12, v16, (CMBlockBufferRef)cf);
      v10 = v8;
      if (v9)
        CFRelease(v9);
    }
    if (v12)
      CFRelease(v12);
    return v10;
  }
  else
  {
    _MovieAtomReportParsingMessage(v6, 0, a1, (uint64_t)"Track Information is NULL (missing track fragment header)", 3);
    return FigSignalErrorAt();
  }
}

uint64_t ParseFragmentMOVCompactSampleToGroupAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD **v5;
  _QWORD *v6;
  uint64_t ArrayBBuf;
  uint64_t v8;
  CFTypeRef v9;
  uint64_t v10;
  _QWORD v12[2];
  int v13;
  CFTypeRef v14;
  CFTypeRef cf;
  CFTypeRef v16;
  unint64_t v17;
  unsigned int v18;

  v5 = *(_QWORD ***)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = *v5;
  v18 = 0;
  v17 = 0;
  cf = 0;
  v16 = 0;
  v14 = 0;
  v12[0] = 0;
  v12[1] = 0;
  v13 = 0;
  if (v4)
  {
    ArrayBBuf = CommonMOVCompactSampleToGroupAtomParseAndCreateArrayBBuf(v6, v4, a1);
    if ((_DWORD)ArrayBBuf)
    {
      v10 = ArrayBBuf;
    }
    else
    {
      v8 = FragmentInfoAddAndRetainSampleGroup(*(_QWORD **)(a2 + 8), *(_QWORD *)(a2 + 16), v17, v18, &v14);
      v9 = cf;
      if (!(_DWORD)v8)
        v8 = MovieSampleGroupSet_csgp((CMBlockBufferRef *)v14, v12, (CMBlockBufferRef)v16, (OpaqueCMBlockBuffer *)cf);
      v10 = v8;
      if (v9)
        CFRelease(v9);
    }
  }
  else
  {
    _MovieAtomReportParsingMessage(v6, 0, a1, (uint64_t)"Track Information is NULL (missing track fragment header)", 3);
    v10 = FigSignalErrorAt();
  }
  if (v16)
    CFRelease(v16);
  if (v14)
    CFRelease(v14);
  return v10;
}

uint64_t ParseTrackFragmentUserDataAtom(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  uint64_t result;

  v2 = **(_BYTE ***)a2;
  if (*(_QWORD *)(a2 + 8))
  {
    result = FigAtomStreamReadCurrentAtomAndCreateBBuf();
    if (!(_DWORD)result)
    {
      if (v2[81])
      {
        if (v2[82])
          return MovieTrackSupplementQuickTimeUserDataFromBlockBuffer(v2, *(uint64_t **)(a2 + 8), 0);
      }
      else if (!v2[83])
      {
        return MovieTrackSupplementQuickTimeUserDataFromBlockBuffer(v2, *(uint64_t **)(a2 + 8), 0);
      }
      return MovieTrackSupplementISOUserDataFromBlockBuffer(v2, *(uint64_t **)(a2 + 8), 0);
    }
  }
  else
  {
    _MovieAtomReportParsingMessage(v2, 0, a1, (uint64_t)"Track Information is NULL (missing track fragment header)", 3);
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t ParseSampleEncryptionAtomInTraf(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    MovieTrackNoteSampleEncryptionAtomPresent(v3);
    return 0;
  }
  else
  {
    _MovieAtomReportParsingMessage(**(_QWORD ***)a2, 0, a1, (uint64_t)"Track Information is NULL (missing track fragment header)", 3);
    return FigSignalErrorAt();
  }
}

uint64_t FragmentInfoAddAndRetainSampleGroupDescriptionArray(const void *a1, uint64_t a2, int a3, _QWORD *a4)
{
  const __CFDictionary *Mutable;
  void *v9;
  void *v10;
  const __CFAllocator *v11;
  uint64_t v12;
  uint64_t v13;
  void *value;

  Mutable = *(const __CFDictionary **)(a2 + 112);
  if (!Mutable)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B3A0]);
    *(_QWORD *)(a2 + 112) = Mutable;
    if (!Mutable)
    {
      FigSignalErrorAt();
      return 0;
    }
  }
  v9 = (void *)CFDictionaryGetValue(Mutable, (const void *)a3);
  value = v9;
  if (v9)
  {
    v10 = v9;
    CFRetain(v9);
LABEL_7:
    v13 = 0;
    *a4 = v10;
    return v13;
  }
  v11 = CFGetAllocator(a1);
  v12 = MovieSampleGroupDescriptionArrayCreate(v11, a3, (uint64_t *)&value);
  if (!(_DWORD)v12)
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a2 + 112), (const void *)a3, value);
    v10 = value;
    goto LABEL_7;
  }
  v13 = v12;
  if (value)
    CFRelease(value);
  return v13;
}

uint64_t FragmentInfoAddAndRetainSampleGroup(_QWORD *cf, uint64_t a2, unint64_t a3, unsigned int a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t *v11;
  const __CFAllocator *v12;
  uint64_t v13;
  CFTypeRef v14;
  const __CFAllocator *v15;
  uint64_t v16;
  CFTypeRef v18;
  CFTypeRef cfa;
  CFTypeRef v20;

  cfa = 0;
  v20 = 0;
  v18 = 0;
  v11 = (uint64_t *)(a2 + 104);
  v10 = *(_QWORD *)(a2 + 104);
  if (!v10)
  {
    v12 = CFGetAllocator(cf);
    v13 = MovieSampleGroupCollectionCreate(v12, v11);
    if ((_DWORD)v13)
      goto LABEL_18;
    v10 = *v11;
  }
  v14 = MovieSampleGroupCollectionLookupAndRetainSampleGroup(v10, a3, a4);
  v20 = v14;
  if (v14)
  {
LABEL_10:
    v16 = 0;
    *a5 = v14;
    v20 = 0;
    goto LABEL_11;
  }
  MovieTrackAddAndRetainSampleGroup(cf, a3, a4, &cfa);
  v15 = CFGetAllocator(cf);
  v13 = MovieSampleGroupCreateForFragment(v15, a3, a4, (uint64_t)cfa, &v20);
  if (!(_DWORD)v13)
  {
    v13 = FragmentInfoAddAndRetainSampleGroupDescriptionArray(cf, a2, a3, &v18);
    if (!(_DWORD)v13)
    {
      v13 = MovieSampleGroupSetDescriptionArray((uint64_t)v20, v18);
      if (!(_DWORD)v13)
      {
        v13 = MovieSampleGroupCollectionAddSampleGroup(*v11, (uint64_t)v20);
        if (!(_DWORD)v13)
        {
          v14 = v20;
          goto LABEL_10;
        }
      }
    }
  }
LABEL_18:
  v16 = v13;
LABEL_11:
  if (cfa)
    CFRelease(cfa);
  if (v18)
    CFRelease(v18);
  if (v20)
    CFRelease(v20);
  return v16;
}

void MovieAtomReportChildAtomParsingFailureMessage(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const __CFAllocator *v6;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v8;
  const __CFAllocator *v9;
  __CFString *v10;
  __CFString *v11;
  uint64_t CFStringForOSTypeValue;

  if (a1[8])
  {
    v6 = CFGetAllocator(a1);
    Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v8 = Mutable;
      v9 = CFGetAllocator(a1);
      v10 = CFStringCreateMutable(v9, 0);
      if (v10)
      {
        v11 = v10;
        CFStringAppendFormat(v10, 0, CFSTR("%s."), a4);
        CFStringForOSTypeValue = FigGetCFStringForOSTypeValue();
        FigAtomStreamGetCurrentAtomGlobalOffset();
        CFStringAppendFormat(v11, 0, CFSTR(" Atom: '%@' Offset: %lld"), CFStringForOSTypeValue, 0);
        FigCFDictionarySetInt64();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt64();
        CFDictionarySetValue(v8, (const void *)*MEMORY[0x1E0CA2EF0], v11);
        FigCFDictionarySetInt32();
        FigAssetAnalysisReporterAddMessage();
        CFRelease(v11);
      }
      CFRelease(v8);
    }
  }
}

const __CFArray *MovieTrackGetNumDataSources(uint64_t a1)
{
  const __CFArray *result;

  result = *(const __CFArray **)(a1 + 64);
  if (result)
    return (const __CFArray *)CFArrayGetCount(result);
  return result;
}

uint64_t MovieTrackGetDataSourceAtIndex(_QWORD *a1, uint64_t a2, CFIndex idx, BOOL *a4, _QWORD *a5)
{
  const __CFArray *Count;
  CMBlockBufferRef *ValueAtIndex;
  CMBlockBufferRef *v12;
  uint64_t result;
  CFURLRef v14;
  CMBlockBufferRef v15;
  size_t v16;
  const char *v17;
  const __CFAllocator *v18;
  uint64_t CMBaseObject;
  void (*v20)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  const __CFURL *v21;
  CFTypeRef cf;
  size_t totalLengthOut;
  char *dataPointerOut;

  if (idx < 0)
    return FigSignalErrorAt();
  Count = *(const __CFArray **)(a2 + 64);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count <= idx)
    return FigSignalErrorAt();
  ValueAtIndex = (CMBlockBufferRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 64), idx);
  v12 = ValueAtIndex;
  totalLengthOut = 0;
  if (!ValueAtIndex[2])
  {
    dataPointerOut = 0;
    if (*(_DWORD *)ValueAtIndex)
    {
      result = CMBlockBufferGetDataPointer(ValueAtIndex[1], 0, 0, &totalLengthOut, &dataPointerOut);
      if ((_DWORD)result)
        return result;
      if (*(_DWORD *)v12 != 1970433056)
      {
LABEL_19:
        result = FigSignalErrorAt();
        if ((_DWORD)result)
          return result;
        goto LABEL_20;
      }
      if (!totalLengthOut)
        goto LABEL_17;
      v16 = 0;
      while (dataPointerOut[v16])
      {
        if (totalLengthOut == ++v16)
          goto LABEL_17;
      }
      if (!v16 || v16 >= totalLengthOut)
      {
LABEL_17:
        v17 = "Bad string in url data ref";
LABEL_18:
        MovieInformationReportParsingFailureMessage(a1, a2, (uint64_t)v17, 2);
        goto LABEL_19;
      }
      cf = 0;
      v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      CMBaseObject = CMByteStreamGetCMBaseObject();
      v20 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
      if (v20)
      {
        v20(CMBaseObject, *MEMORY[0x1E0CA2098], v18, &cf);
        v21 = (const __CFURL *)cf;
      }
      else
      {
        v21 = 0;
      }
      v14 = CFURLCreateWithBytes(v18, (const UInt8 *)dataPointerOut, v16, 0x8000100u, v21);
      if (cf)
        CFRelease(cf);
      if (!v14)
      {
        v17 = "Could not create CFURL for url data ref";
        goto LABEL_18;
      }
    }
    else
    {
      v14 = 0;
    }
    v12[2] = v14;
    v15 = v12[1];
    if (v15)
    {
      CFRelease(v15);
      v12[1] = 0;
    }
  }
LABEL_20:
  *a5 = v12[2];
  result = 0;
  if (a4)
    *a4 = *(_DWORD *)v12 == 0;
  return result;
}

uint64_t MovieTrackSetDataSourceAtIndex(_QWORD *a1, uint64_t a2, CFIndex idx, int a4, const void *a5)
{
  const __CFArray *Count;
  _QWORD *ValueAtIndex;
  _QWORD *v12;
  int v13;
  const void *v14;
  const void *v15;

  if (idx < 0)
    goto LABEL_15;
  Count = *(const __CFArray **)(a2 + 64);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count <= idx)
  {
LABEL_15:
    MovieInformationReportParsingFailureMessage(a1, a2, (uint64_t)"Data source index is invalid", 2);
    return FigSignalErrorAt();
  }
  else
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 64), idx);
    v12 = ValueAtIndex;
    if (a4)
      v13 = 0;
    else
      v13 = 1970433056;
    *(_DWORD *)ValueAtIndex = v13;
    v14 = (const void *)ValueAtIndex[2];
    ValueAtIndex[2] = a5;
    if (a5)
      CFRetain(a5);
    if (v14)
      CFRelease(v14);
    v15 = (const void *)v12[1];
    if (v15)
    {
      CFRelease(v15);
      v12[1] = 0;
    }
    return 0;
  }
}

void MovieInformationReportParsingFailureMessage(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v4;
  const __CFAllocator *v9;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v11;
  const __CFAllocator *v12;
  __CFString *v13;
  __CFString *v14;

  v4 = a1 + 8;
  if (!a1)
    v4 = (_QWORD *)(a2 + 640);
  if (*v4)
  {
    v9 = CFGetAllocator(a1);
    Mutable = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v11 = Mutable;
      v12 = CFGetAllocator(a1);
      v13 = CFStringCreateMutable(v12, 0);
      if (v13)
      {
        v14 = v13;
        CFStringAppendFormat(v13, 0, CFSTR("%s."), a3);
        if (a2)
        {
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
        }
        FigCFDictionarySetInt64();
        CFDictionarySetValue(v11, (const void *)*MEMORY[0x1E0CA2EF0], v14);
        FigCFDictionarySetInt32();
        if (a4 == 7)
          FigAssetAnalysisReporterEditAndCombineMessage();
        else
          FigAssetAnalysisReporterAddMessage();
        CFRelease(v14);
      }
      CFRelease(v11);
    }
  }
}

uint64_t MovieTrackCopyExternalDataReferenceSchemes(_QWORD *a1, uint64_t a2, const __CFArray **a3)
{
  const __CFArray *v6;
  CFIndex Count;
  const __CFArray *Mutable;
  CFIndex v9;
  const __CFAllocator *v10;
  const CFArrayCallBacks *v11;
  uint64_t DataSourceAtIndex;
  CFStringRef v13;
  CFStringRef v14;
  uint64_t v15;
  uint64_t v17;
  CFURLRef anURL;
  CFRange v19;

  v6 = *(const __CFArray **)(a2 + 64);
  if (v6)
    Count = CFArrayGetCount(v6);
  else
    Count = 0;
  *a3 = 0;
  MEMORY[0x19402EA0C](*(_QWORD *)(a2 + 32));
  if (Count < 1)
  {
    Mutable = 0;
LABEL_17:
    *a3 = Mutable;
    MEMORY[0x19402EA24](*(_QWORD *)(a2 + 32));
    return 0;
  }
  else
  {
    Mutable = 0;
    v9 = 0;
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v11 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    while (1)
    {
      anURL = 0;
      DataSourceAtIndex = MovieTrackGetDataSourceAtIndex(a1, a2, v9, 0, &anURL);
      if ((_DWORD)DataSourceAtIndex)
        break;
      if (anURL)
      {
        v13 = CFURLCopyScheme(anURL);
        if (v13)
        {
          v14 = v13;
          if (!Mutable)
          {
            Mutable = CFArrayCreateMutable(v10, 0, v11);
            if (!Mutable)
            {
              v17 = FigSignalErrorAt();
              MEMORY[0x19402EA24](*(_QWORD *)(a2 + 32));
              CFRelease(v14);
              return v17;
            }
          }
          v19.length = CFArrayGetCount(Mutable);
          v19.location = 0;
          if (!CFArrayContainsValue(Mutable, v19, v14))
            CFArrayAppendValue(Mutable, v14);
          CFRelease(v14);
        }
      }
      if (Count == ++v9)
        goto LABEL_17;
    }
    v15 = DataSourceAtIndex;
    MEMORY[0x19402EA24](*(_QWORD *)(a2 + 32));
    if (Mutable)
      CFRelease(Mutable);
  }
  return v15;
}

uint64_t MovieTrackCopySyncSampleCombinations(const __CFAllocator *a1, uint64_t a2, CFMutableArrayRef *a3)
{
  const __CFDictionary *v4;
  const void *Value;
  uint64_t v7;
  CFIndex v8;
  CFMutableArrayRef Mutable;
  const CFArrayCallBacks *v10;
  const __CFData *ValueAtIndex;
  _DWORD capacity[3];

  memset(capacity, 0, sizeof(capacity));
  *a3 = 0;
  v4 = *(const __CFDictionary **)(a2 + 80);
  if (v4 && (Value = CFDictionaryGetValue(v4, (const void *)0x73796E63)) != 0)
  {
    v7 = MovieSampleGroupDescriptionArrayCopyInfo((uint64_t)Value, 0, &capacity[1], capacity, 0, 0);
    if (capacity[0])
    {
      if (capacity[0] < 1)
      {
        Mutable = 0;
LABEL_12:
        *a3 = Mutable;
      }
      else
      {
        v8 = 0;
        Mutable = 0;
        v10 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
        while (1)
        {
          ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)&capacity[1], v8);
          if (CFDataGetLength(ValueAtIndex) != 1)
            break;
          CFDataGetBytePtr(ValueAtIndex);
          if (!Mutable)
          {
            Mutable = CFArrayCreateMutable(a1, capacity[0], v10);
            if (!Mutable)
            {
              v7 = FigSignalErrorAt();
              goto LABEL_13;
            }
          }
          FigCFArrayAppendInt();
          if (++v8 >= capacity[0])
            goto LABEL_12;
        }
        v7 = FigSignalErrorAt();
        if (Mutable)
          CFRelease(Mutable);
      }
    }
  }
  else
  {
    v7 = 0;
  }
LABEL_13:
  if (*(_QWORD *)&capacity[1])
    CFRelease(*(CFTypeRef *)&capacity[1]);
  return v7;
}

uint64_t MovieTrackCopyTemporalLevelCombinations(const __CFAllocator *a1, uint64_t a2, CFMutableArrayRef *a3)
{
  const __CFDictionary *v4;
  const void *Value;
  uint64_t v8;
  uint64_t v9;
  CFIndex v10;
  CFMutableArrayRef v11;
  const void *v12;
  const __CFData *ValueAtIndex;
  const UInt8 *BytePtr;
  int v15;
  __CFDictionary *Mutable;
  CFDataRef v17;
  CFDataRef v18;
  CFDataRef v19;
  CFDataRef v20;
  uint64_t v22;
  CFMutableArrayRef *v23;
  unsigned int v24;
  void *key;
  __int128 v26;
  int v27;
  int v28;
  const __CFArray *v29;

  v29 = 0;
  v28 = 0;
  *a3 = 0;
  v4 = *(const __CFDictionary **)(a2 + 80);
  if (!v4 || (Value = CFDictionaryGetValue(v4, (const void *)0x7473636C)) == 0)
  {
    v9 = 0;
    goto LABEL_16;
  }
  v8 = MovieSampleGroupDescriptionArrayCopyInfo((uint64_t)Value, 0, &v29, &v28, 0, 0);
  v9 = v8;
  if (!v28)
    goto LABEL_16;
  v23 = a3;
  v24 = v8;
  if (v28 < 1)
  {
    v11 = 0;
LABEL_15:
    *v23 = v11;
    v9 = v24;
    goto LABEL_16;
  }
  v22 = a2;
  v10 = 0;
  v11 = 0;
  key = (void *)*MEMORY[0x1E0CA2390];
  v12 = (const void *)*MEMORY[0x1E0CA2380];
  while (1)
  {
    ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(v29, v10);
    v26 = 0uLL;
    v27 = 0;
    if (CFDataGetLength(ValueAtIndex) != 20)
    {
      MovieInformationReportParsingFailureMessage(0, v22, (uint64_t)"Invalid tscl sample group description size", 2);
      Mutable = 0;
LABEL_21:
      v9 = FigSignalErrorAt();
      if (!v11)
        goto LABEL_23;
LABEL_22:
      CFRelease(v11);
      goto LABEL_23;
    }
    BytePtr = CFDataGetBytePtr(ValueAtIndex);
    v15 = *((_DWORD *)BytePtr + 4);
    v26 = *(_OWORD *)BytePtr;
    v27 = v15;
    Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
      goto LABEL_21;
    v17 = CFDataCreate(a1, (const UInt8 *)&v26 + 2, 4);
    if (!v17)
      goto LABEL_21;
    v18 = v17;
    v19 = CFDataCreate(a1, (const UInt8 *)&v26 + 6, 6);
    if (!v19)
      break;
    v20 = v19;
    FigCFDictionarySetInt();
    FigCFDictionarySetInt();
    FigCFDictionarySetInt();
    FigCFDictionarySetInt();
    CFDictionarySetValue(Mutable, key, v18);
    CFDictionarySetValue(Mutable, v12, v20);
    FigCFDictionarySetInt();
    if (!v11)
    {
      v11 = CFArrayCreateMutable(a1, v28, MEMORY[0x1E0C9B378]);
      if (!v11)
      {
        v9 = FigSignalErrorAt();
        CFRelease(v18);
        CFRelease(v20);
        goto LABEL_24;
      }
    }
    CFArrayAppendValue(v11, Mutable);
    CFRelease(Mutable);
    CFRelease(v18);
    CFRelease(v20);
    if (++v10 >= v28)
      goto LABEL_15;
  }
  v9 = FigSignalErrorAt();
  CFRelease(v18);
  if (v11)
    goto LABEL_22;
LABEL_23:
  if (!Mutable)
    goto LABEL_16;
LABEL_24:
  CFRelease(Mutable);
LABEL_16:
  if (v29)
    CFRelease(v29);
  return v9;
}

uint64_t MovieTrackCopySampleGroupDescriptionDictionary(const __CFAllocator *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  CFIndex Count;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v8;

  *a3 = 0;
  if (!FigCFDictionaryGetCount())
    return 0;
  Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a2 + 80));
  Mutable = CFDictionaryCreateMutable(a1, Count, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v8 = Mutable;
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(a2 + 80), (CFDictionaryApplierFunction)SampleGroupDescCollectingApplierFunction, Mutable);
    *a3 = v8;
    return 0;
  }
  return FigSignalErrorAt();
}

void SampleGroupDescCollectingApplierFunction(unsigned int a1, uint64_t a2, void *a3)
{
  const __CFAllocator *v5;
  CFArrayRef Copy;
  CFArrayRef v7;
  const __CFAllocator *v8;
  CFStringRef v9;
  CFArrayRef theArray;

  theArray = 0;
  MovieSampleGroupDescriptionArrayCopyInfo(a2, 0, &theArray, 0, 0, 0);
  if (!theArray)
    return;
  if (!CFArrayGetCount(theArray))
    goto LABEL_13;
  v5 = CFGetAllocator(a3);
  Copy = CFArrayCreateCopy(v5, theArray);
  if (!Copy)
  {
    FigSignalErrorAt();
LABEL_13:
    v9 = 0;
    goto LABEL_7;
  }
  v7 = Copy;
  v8 = CFGetAllocator(a3);
  v9 = CFStringCreateWithFormat(v8, 0, CFSTR("%c%c%c%c"), HIBYTE(a1), BYTE2(a1), BYTE1(a1), a1);
  if (v9)
    CFDictionarySetValue((CFMutableDictionaryRef)a3, v9, v7);
  else
    FigSignalErrorAt();
  CFRelease(v7);
LABEL_7:
  if (theArray)
    CFRelease(theArray);
  if (v9)
    CFRelease(v9);
}

uint64_t MovieTrackCopySampleGroupDescriptionArrays(uint64_t a1, _QWORD *a2)
{
  CFTypeRef v3;

  v3 = *(CFTypeRef *)(a1 + 80);
  if (v3)
    v3 = CFRetain(v3);
  *a2 = v3;
  return 0;
}

uint64_t MovieTrackAppendSampleGroupDescriptions(void *a1, const __CFDictionary *a2)
{
  const __CFAllocator *v4;
  CFIndex Count;
  uint64_t v6;
  CFIndex v7;
  const void **v8;
  const void **v9;
  uint64_t v10;
  const __CFArray *v11;
  CFIndex v12;
  uint64_t appended;
  CFIndex v15;
  const __CFData *ValueAtIndex;
  const UInt8 *BytePtr;
  size_t Length;
  uint64_t v19;
  CFAllocatorRef allocator;
  CFTypeRef cf;

  v4 = CFGetAllocator(a1);
  cf = 0;
  Count = CFDictionaryGetCount(a2);
  if (!Count)
    return 0;
  v6 = Count;
  v7 = 8 * Count;
  v8 = (const void **)CFAllocatorAllocate(v4, 8 * Count, 0);
  if (!v8)
  {
    v19 = FigSignalErrorAt();
    v9 = 0;
    goto LABEL_25;
  }
  v9 = (const void **)CFAllocatorAllocate(v4, v7, 0);
  if (!v9)
  {
    v19 = FigSignalErrorAt();
    goto LABEL_25;
  }
  CFDictionaryGetKeysAndValues(a2, v8, v9);
  if (v6 < 1)
  {
    v19 = 0;
    goto LABEL_25;
  }
  allocator = v4;
  v10 = 0;
  while (1)
  {
    v11 = (const __CFArray *)v9[v10];
    v12 = v11 ? CFArrayGetCount((CFArrayRef)v9[v10]) : 0;
    if (FigCFStringGetOSTypeValue() && v12 != 0)
      break;
LABEL_20:
    if (++v10 == v6)
    {
      v19 = 0;
      goto LABEL_23;
    }
  }
  appended = MovieTrackAddAndRetainSampleGroupDescriptionArray(a1, 0, &cf);
  if ((_DWORD)appended)
    goto LABEL_22;
  if (v12 < 1)
  {
LABEL_18:
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    goto LABEL_20;
  }
  v15 = 0;
  while (1)
  {
    ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(v11, v15);
    BytePtr = CFDataGetBytePtr(ValueAtIndex);
    Length = CFDataGetLength(ValueAtIndex);
    appended = MovieSampleGroupDescriptionArrayAppendDescriptionUniquely((uint64_t)cf, Length, BytePtr, 0);
    if ((_DWORD)appended)
      break;
    if (v12 == ++v15)
      goto LABEL_18;
  }
LABEL_22:
  v19 = appended;
LABEL_23:
  v4 = allocator;
LABEL_25:
  if (cf)
    CFRelease(cf);
  if (v9)
    CFAllocatorDeallocate(v4, v9);
  if (v8)
    CFAllocatorDeallocate(v4, v8);
  return v19;
}

uint64_t MovieTrackAddAndRetainSampleGroupDescriptionArray(void *a1, int a2, _QWORD *a3)
{
  CFTypeRef v6;
  uint64_t v7;
  const __CFAllocator *v8;
  uint64_t v9;
  uint64_t v10;
  CFTypeRef v11;
  CFTypeRef cf;

  cf = 0;
  MovieTrackCopySampleGroupDescriptionArray((uint64_t)a1, a2, (const __CFDictionary **)&cf);
  v6 = cf;
  if (cf)
  {
    if (!a3)
    {
      v7 = 0;
LABEL_11:
      CFRelease(v6);
      return v7;
    }
    goto LABEL_8;
  }
  v8 = CFGetAllocator(a1);
  v9 = MovieSampleGroupDescriptionArrayCreate(v8, a2, (uint64_t *)&cf);
  v6 = cf;
  if ((_DWORD)v9)
  {
    v7 = v9;
    if (!cf)
      return v7;
    goto LABEL_11;
  }
  v10 = MovieTrackAddSampleGroupDescriptionArray((CFMutableDictionaryRef *)a1, cf);
  v7 = v10;
  v6 = cf;
  if (a3 && !(_DWORD)v10)
  {
    if (!cf)
    {
      v11 = 0;
      goto LABEL_9;
    }
LABEL_8:
    v11 = CFRetain(v6);
    v6 = cf;
LABEL_9:
    v7 = 0;
    *a3 = v11;
  }
  if (v6)
    goto LABEL_11;
  return v7;
}

uint64_t MovieTrackAppendSyncSampleCombinations(void *a1, const __CFArray *a2)
{
  const __CFAllocator *v4;
  CFMutableDictionaryRef Mutable;
  CFIndex Count;
  uint64_t v7;
  CFMutableArrayRef v8;
  __CFArray *v9;
  CFIndex v10;
  const void *v11;
  const void *ValueAtIndex;
  uint64_t VideoSyncSampleEntryFromSampleAttachment;
  CFDataRef v14;
  CFDataRef v15;
  const __CFDictionary *v16;
  uint64_t appended;
  uint64_t v18;
  UInt8 bytes[2];
  void *values;
  void *keys;

  v4 = CFGetAllocator(a1);
  values = 0;
  keys = CFSTR("sync");
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!a2 || (Count = CFArrayGetCount(a2)) == 0)
  {
    v18 = 0;
    goto LABEL_21;
  }
  v7 = Count;
  v8 = CFArrayCreateMutable(v4, Count, MEMORY[0x1E0C9B378]);
  values = v8;
  if (!v8)
  {
LABEL_23:
    VideoSyncSampleEntryFromSampleAttachment = FigSignalErrorAt();
LABEL_24:
    v18 = VideoSyncSampleEntryFromSampleAttachment;
LABEL_21:
    v16 = 0;
    if (!Mutable)
      goto LABEL_15;
LABEL_14:
    CFRelease(Mutable);
    goto LABEL_15;
  }
  if (v7 >= 1)
  {
    v9 = v8;
    v10 = 0;
    v11 = (const void *)*MEMORY[0x1E0CA25F8];
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a2, v10);
      *(_WORD *)bytes = 0;
      CFDictionarySetValue(Mutable, v11, ValueAtIndex);
      VideoSyncSampleEntryFromSampleAttachment = FigMovieGetVideoSyncSampleEntryFromSampleAttachment((uint64_t)Mutable, &bytes[1], (BOOL *)bytes);
      if ((_DWORD)VideoSyncSampleEntryFromSampleAttachment)
        goto LABEL_24;
      if (bytes[0])
      {
        v14 = CFDataCreate(v4, &bytes[1], 1);
        if (!v14)
          goto LABEL_23;
        v15 = v14;
        CFArrayAppendValue(v9, v14);
        CFRelease(v15);
      }
    }
    while (v7 != ++v10);
  }
  v16 = CFDictionaryCreate(v4, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v16)
    appended = MovieTrackAppendSampleGroupDescriptions(a1, v16);
  else
    appended = FigSignalErrorAt();
  v18 = appended;
  if (Mutable)
    goto LABEL_14;
LABEL_15:
  if (v16)
    CFRelease(v16);
  if (values)
    CFRelease(values);
  return v18;
}

uint64_t MovieTrackAppendTemporalLevelCombinations(const void *a1, const __CFArray *a2)
{
  CFAllocatorRef v4;
  const __CFAllocator *v5;
  CFIndex Count;
  uint64_t v7;
  CFMutableArrayRef Mutable;
  __CFArray *v9;
  CFIndex v10;
  const __CFAllocator *v11;
  const CFDictionaryKeyCallBacks *v12;
  const CFDictionaryValueCallBacks *v13;
  const __CFDictionary *v14;
  uint64_t VideoTemporalLayerEntryFromSampleAttachment;
  CFDataRef v16;
  CFDataRef v17;
  const __CFDictionary *v18;
  const __CFDictionary *v19;
  uint64_t appended;
  void *v22;
  char v23;
  UInt8 bytes[8];
  uint64_t v25;
  int v26;
  void *values;
  CFTypeRef cf;
  void *keys;

  v4 = CFGetAllocator(a1);
  keys = CFSTR("tscl");
  if (!a2)
    return 0;
  v5 = v4;
  Count = CFArrayGetCount(a2);
  if (!Count)
    return 0;
  v7 = Count;
  Mutable = CFArrayCreateMutable(v5, Count, MEMORY[0x1E0C9B378]);
  cf = Mutable;
  if (Mutable)
  {
    v22 = (void *)a1;
    if (v7 < 1)
    {
LABEL_13:
      v18 = CFDictionaryCreate(v5, (const void **)&keys, &cf, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v18)
      {
        v19 = v18;
        appended = MovieTrackAppendSampleGroupDescriptions(v22, v18);
        CFRelease(v19);
      }
      else
      {
        appended = FigSignalErrorAt();
      }
      v14 = 0;
    }
    else
    {
      v9 = Mutable;
      v10 = 0;
      v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v12 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
      v13 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
      while (1)
      {
        values = 0;
        values = (void *)CFArrayGetValueAtIndex(a2, v10);
        v14 = CFDictionaryCreate(v11, MEMORY[0x1E0CA2600], (const void **)&values, 1, v12, v13);
        *(_QWORD *)bytes = 0;
        v25 = 0;
        v26 = 0;
        v23 = 0;
        VideoTemporalLayerEntryFromSampleAttachment = FigMovieGetVideoTemporalLayerEntryFromSampleAttachment(v14, (uint64_t)bytes, &v23);
        if ((_DWORD)VideoTemporalLayerEntryFromSampleAttachment)
          break;
        if (v23)
        {
          v16 = CFDataCreate(v5, bytes, 20);
          if (!v16)
          {
            VideoTemporalLayerEntryFromSampleAttachment = FigSignalErrorAt();
            break;
          }
          v17 = v16;
          CFArrayAppendValue(v9, v16);
          CFRelease(v17);
        }
        if (v14)
          CFRelease(v14);
        if (v7 == ++v10)
          goto LABEL_13;
      }
      appended = VideoTemporalLayerEntryFromSampleAttachment;
    }
    if (cf)
      CFRelease(cf);
    if (v14)
      CFRelease(v14);
    return appended;
  }
  return FigSignalErrorAt();
}

uint64_t MovieTrackCopyDataSourceForSampleDescriptionID(_QWORD *a1, uint64_t a2, int a3, _QWORD *a4, _QWORD *a5)
{
  CFIndex v9;
  uint64_t SampleDescriptionInformationAtIndex;
  const void *v11;
  CFTypeRef v12;
  CFTypeRef v13;
  uint64_t v14;
  BOOL v16;
  CFTypeRef cf;
  CFIndex idx;

  v9 = a3 - 1;
  cf = 0;
  idx = -1;
  v16 = 0;
  MEMORY[0x19402EA0C](*(_QWORD *)(a2 + 32));
  SampleDescriptionInformationAtIndex = MovieTrackGetSampleDescriptionInformationAtIndex(a2, v9, 0, &idx);
  if ((_DWORD)SampleDescriptionInformationAtIndex
    || (SampleDescriptionInformationAtIndex = MovieTrackGetDataSourceAtIndex(a1, a2, idx, &v16, &cf),
        (_DWORD)SampleDescriptionInformationAtIndex))
  {
    v14 = SampleDescriptionInformationAtIndex;
    goto LABEL_15;
  }
  if (v16 && (v11 = (const void *)a1[6]) != 0)
  {
    cf = 0;
    if (!a5)
      goto LABEL_10;
    v12 = CFRetain(v11);
  }
  else
  {
    if (!a5)
      goto LABEL_10;
    v12 = 0;
  }
  *a5 = v12;
LABEL_10:
  if (a4)
  {
    v13 = cf;
    if (cf)
      v13 = CFRetain(cf);
    v14 = 0;
    *a4 = v13;
  }
  else
  {
    v14 = 0;
  }
LABEL_15:
  MEMORY[0x19402EA24](*(_QWORD *)(a2 + 32));
  return v14;
}

uint64_t MovieTrackGetSampleDescriptionInformationAtIndex(uint64_t a1, CFIndex a2, _QWORD *a3, _QWORD *a4)
{
  const __CFArray *v5;
  _QWORD *ValueAtIndex;

  v5 = *(const __CFArray **)(a1 + 56);
  if (!v5 || a2 < 0 || CFArrayGetCount(v5) <= a2)
    return FigSignalErrorAt();
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), a2);
  if (a3)
    *a3 = *ValueAtIndex;
  if (a4)
    *a4 = ValueAtIndex[1];
  return 0;
}

uint64_t MovieTrackAddParsedDataReference(uint64_t a1, int a2, int a3, const void *a4)
{
  int v6;
  CFMutableArrayRef Mutable;
  _DWORD *v8;
  _QWORD *v9;
  CFTypeRef v10;
  const char *v12;

  if (a3 == 1)
  {
    v6 = 0;
    goto LABEL_5;
  }
  if (a3)
  {
    v12 = "Unexpected value for data reference flags";
LABEL_15:
    MovieInformationReportParsingFailureMessage(0, a1, (uint64_t)v12, 2);
    return FigSignalErrorAt();
  }
  v6 = a2;
  if (!a4)
  {
    v12 = "External data reference must have reference data";
    goto LABEL_15;
  }
LABEL_5:
  if (!*(_QWORD *)(a1 + 64))
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
    *(_QWORD *)(a1 + 64) = Mutable;
    if (!Mutable)
      return FigSignalErrorAt();
  }
  v8 = malloc_type_calloc(1uLL, 0x18uLL, 0x1060040ABACF81FuLL);
  if (!v8)
    return FigSignalErrorAt();
  v9 = v8;
  *v8 = v6;
  if (a4)
    v10 = CFRetain(a4);
  else
    v10 = 0;
  v9[1] = v10;
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 64), v9);
  return 0;
}

uint64_t TotalRunDataSize(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  int v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;

  v2 = *(unsigned int *)(a2 + 48);
  if ((v2 & 2) == 0)
    return (*(_DWORD *)(a1 + 64) * *(_DWORD *)(a2 + 36));
  v4 = *(_DWORD *)(a2 + 36);
  if (v4 < 1)
    return 0;
  result = 0;
  v5 = kPerSampleInfo_SizeInInt32s[v2];
  v6 = (unsigned int *)(a2 + 4 * kPerSampleInfo_SizeIndex[v2] + 52);
  v7 = 4 * v5;
  do
  {
    result += bswap32(*v6);
    v6 = (unsigned int *)((char *)v6 + v7);
    --v4;
  }
  while (v4);
  return result;
}

CMTime *GetRevisedTrackDuration@<X0>(CMTime *result@<X0>, CMTime *a2@<X8>)
{
  int value;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  CMTimeRange v10;

  value = result[34].value;
  v3 = (value - 1);
  if (value < 1)
  {
LABEL_6:
    v7 = MEMORY[0x1E0CA2E68];
    *(_OWORD *)&a2->value = *MEMORY[0x1E0CA2E68];
    a2->epoch = *(_QWORD *)(v7 + 16);
  }
  else
  {
    v4 = (_OWORD *)(result[33].epoch + 96 * v3 + 48);
    v5 = v3 + 1;
    while ((*((_BYTE *)v4 - 36) & 1) == 0)
    {
      v4 -= 6;
      if (v5-- <= 1)
        goto LABEL_6;
    }
    v8 = *v4;
    v9 = v4[2];
    *(_OWORD *)&v10.start.epoch = v4[1];
    *(_OWORD *)&v10.duration.timescale = v9;
    *(_OWORD *)&v10.start.value = v8;
    return CMTimeRangeGetEnd(a2, &v10);
  }
  return result;
}

uint64_t MovieDurationWithFragmentContribution@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  CMTimeEpoch epoch;
  uint64_t v5;
  CMTime v6;
  CMTime time1;
  CMTime v8;
  CMTime v9;

  v2 = result;
  if (*(_BYTE *)(result + 155))
  {
    *(_OWORD *)a2 = *(_OWORD *)(result + 160);
    epoch = *(_QWORD *)(result + 176);
  }
  else
  {
    v9 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    memset(&v8, 0, sizeof(v8));
    if (*(uint64_t *)(result + 304) >= 1)
    {
      v5 = 0;
      do
      {
        GetRevisedTrackDuration(*(CMTime **)(*(_QWORD *)(v2 + 320) + 8 * v5), &v8);
        time1 = v8;
        v6 = v9;
        result = CMTimeCompare(&time1, &v6);
        if ((int)result >= 1)
          v9 = v8;
        ++v5;
      }
      while (v5 < *(_QWORD *)(v2 + 304));
    }
    *(_OWORD *)a2 = *(_OWORD *)&v9.value;
    epoch = v9.epoch;
  }
  *(_QWORD *)(a2 + 16) = epoch;
  return result;
}

void FreeSampleAuxInfo(uint64_t a1)
{
  CFTypeRef *v2;

  if (a1)
  {
    v2 = *(CFTypeRef **)(a1 + 88);
    if (v2)
    {
      if (v2[2])
      {
        CFRelease(v2[2]);
        v2 = *(CFTypeRef **)(a1 + 88);
      }
      if (v2[3])
      {
        CFRelease(v2[3]);
        v2 = *(CFTypeRef **)(a1 + 88);
      }
      if (v2[4])
      {
        CFRelease(v2[4]);
        v2 = *(CFTypeRef **)(a1 + 88);
      }
      free(v2);
      *(_QWORD *)(a1 + 88) = 0;
    }
  }
}

void MovieTrackDisposeFragments(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 728);
  if (v2)
  {
    FreeFragmentInfos(v2);
    v3 = *(_QWORD *)(a1 + 728);
    *(_QWORD *)(v3 + 56) = 0;
    *(_DWORD *)(v3 + 8) = 0;
    *(_QWORD *)v3 = 0;
  }
}

void FreeFragmentInfos(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;

  v1 = *(_QWORD **)(a1 + 56);
  if (v1)
  {
    do
    {
      v2 = (_QWORD *)*v1;
      v3 = (_QWORD *)v1[9];
      if (v3)
      {
        do
        {
          v4 = (_QWORD *)*v3;
          free(v3);
          v3 = v4;
        }
        while (v4);
      }
      v5 = (const void *)v1[12];
      if (v5)
      {
        CFRelease(v5);
        v1[12] = 0;
      }
      v6 = (const void *)v1[13];
      if (v6)
      {
        CFRelease(v6);
        v1[13] = 0;
      }
      v7 = (const void *)v1[14];
      if (v7)
      {
        CFRelease(v7);
        v1[14] = 0;
      }
      v8 = (const void *)v1[15];
      if (v8)
      {
        CFRelease(v8);
        v1[15] = 0;
      }
      v9 = (const void *)v1[16];
      if (v9)
      {
        CFRelease(v9);
        v1[16] = 0;
      }
      v10 = (const void *)v1[17];
      if (v10)
      {
        CFRelease(v10);
        v1[17] = 0;
      }
      v11 = (const void *)v1[18];
      if (v11)
      {
        CFRelease(v11);
        v1[18] = 0;
      }
      v12 = (const void *)v1[19];
      if (v12)
      {
        CFRelease(v12);
        v1[19] = 0;
      }
      v13 = (const void *)v1[20];
      if (v13)
      {
        CFRelease(v13);
        v1[20] = 0;
      }
      v14 = (const void *)v1[21];
      if (v14)
      {
        CFRelease(v14);
        v1[21] = 0;
      }
      FreeSampleAuxInfo((uint64_t)v1);
      free(v1);
      v1 = v2;
    }
    while (v2);
  }
}

uint64_t MovieSampleAccessorStepCursor(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _BOOL4 v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t result;

  v5 = *(unsigned int *)(a1 + 80);
  if (a3)
    *a3 = 0;
  v6 = v5 + a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (a2 >= 1)
  {
    if (!HIDWORD(v6))
    {
      LODWORD(v8) = *(_DWORD *)(v7 + 288);
      v9 = *(_QWORD *)(v7 + 728);
      if (v9)
      {
        if (*(_QWORD *)(v9 + 56) && v5 > v8)
          goto LABEL_42;
      }
      if (*(_BYTE *)(v7 + 240))
        LODWORD(v8) = (int)v8 / *(_DWORD *)(v7 + 244);
      v11 = v8 < v6;
      if (v8 >= v6)
        v12 = v5 + a2;
      else
        v12 = v8;
      if (v9)
        v13 = v8 >= v6;
      else
        v13 = 1;
      if (v13)
      {
        LODWORD(v8) = v12;
        goto LABEL_45;
      }
      if (*(_QWORD *)(v9 + 56))
      {
        ResetFragmentCursor(v7, a1 + 184);
        *(_DWORD *)(a1 + 184) = *(_DWORD *)(a1 + 80);
        *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)(a1 + 208) + 16);
LABEL_42:
        result = StepFragmentCursorTo(a1, v6);
        if (a3)
          *a3 = (*(_DWORD *)(a1 + 80) - v5);
        return result;
      }
      v11 = 1;
LABEL_45:
      while (*(_DWORD *)(a1 + 112) + *(_DWORD *)(a1 + 116) <= v8)
      {
        result = stepDownEntry(a1);
        if ((_DWORD)result)
          return result;
      }
      goto LABEL_53;
    }
    return FigSignalErrorAt();
  }
  v14 = *(_QWORD *)(v7 + 728);
  if (!v14 || (v15 = *(_QWORD *)(v14 + 56)) == 0 || v5 <= *(_DWORD *)(v7 + 288))
  {
    v11 = v5 <= -a2;
    if (v5 <= -a2)
      v8 = 1;
    else
      v8 = v5 + a2;
    if (HIDWORD(v8))
      return FigSignalErrorAt();
    while (*(_DWORD *)(a1 + 116) > v8)
    {
      result = stepUpEntry(a1);
      if ((_DWORD)result)
        return result;
    }
LABEL_53:
    LODWORD(result) = 0;
    goto LABEL_54;
  }
  v11 = v6 < 1;
  if (v6 <= 1)
    v8 = 1;
  else
    v8 = v5 + a2;
  if (HIDWORD(v8))
    return FigSignalErrorAt();
  if (*(_DWORD *)(v15 + 32) > v8)
  {
    v16 = *(_DWORD *)(a1 + 184);
    *(_DWORD *)(a1 + 80) = v16;
    if (v16 >= v8)
    {
      if (v16 > v8)
      {
        while (*(_DWORD *)(a1 + 116) > v8)
        {
          result = stepUpEntry(a1);
          if ((_DWORD)result)
            return result;
        }
      }
    }
    else
    {
      while (*(_DWORD *)(a1 + 112) + *(_DWORD *)(a1 + 116) <= v8)
      {
        result = stepDownEntry(a1);
        if ((_DWORD)result)
          return result;
      }
    }
    goto LABEL_53;
  }
  LODWORD(result) = StepFragmentCursorTo(a1, v8);
LABEL_54:
  if (a3)
    *a3 = v8 - v5;
  *(_DWORD *)(a1 + 80) = v8;
  if (v11)
    return 4294954456;
  else
    return result;
}

uint64_t StepFragmentCursorTo(uint64_t a1, unsigned int a2)
{
  uint64_t *v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(uint64_t **)(a1 + 208);
  v3 = *((_DWORD *)v2 + 4);
  v4 = *((_DWORD *)v2 + 9);
  if (v4 + v3 <= a2)
  {
    while (1)
    {
      v2 = (uint64_t *)*v2;
      if (!v2)
      {
        v6 = **(_QWORD **)(a1 + 200);
        if (!v6)
        {
          a2 = v3 + v4 - 1;
LABEL_13:
          v7 = 4294954456;
          goto LABEL_14;
        }
        *(_QWORD *)(a1 + 200) = v6;
        v2 = *(uint64_t **)(v6 + 72);
      }
      *(_QWORD *)(a1 + 208) = v2;
      v3 = *((_DWORD *)v2 + 4);
      v4 = *((_DWORD *)v2 + 9);
      if (v4 + v3 > a2)
        goto LABEL_11;
    }
  }
  while (v3 > a2)
  {
    v2 = (uint64_t *)v2[1];
    if (!v2)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 200) + 8);
      if (!v5)
        goto LABEL_13;
      *(_QWORD *)(a1 + 200) = v5;
      v2 = *(uint64_t **)(v5 + 80);
    }
    *(_QWORD *)(a1 + 208) = v2;
    v3 = *((_DWORD *)v2 + 4);
  }
LABEL_11:
  v7 = 0;
LABEL_14:
  *(_DWORD *)(a1 + 80) = a2;
  return v7;
}

uint64_t AssureTrackFragmentFixups(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  int v3;
  uint64_t *i;

  v1 = *(_QWORD *)(result + 728);
  if (!*(_BYTE *)(v1 + 12))
  {
    v2 = *(uint64_t **)(v1 + 56);
    if (v2)
    {
      v3 = *(_DWORD *)(result + 288);
      do
      {
        *((_DWORD *)v2 + 8) += v3;
        for (i = (uint64_t *)v2[9]; i; i = (uint64_t *)*i)
          *((_DWORD *)i + 4) += v3;
        v2 = (uint64_t *)*v2;
      }
      while (v2);
    }
    *(_BYTE *)(v1 + 12) = 1;
  }
  return result;
}

uint64_t MovieTrackGetSampleCount(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = *(unsigned int *)(a1 + 288);
  v3 = *(_QWORD *)(a1 + 728);
  if (v3)
    return (*(_DWORD *)(v3 + 8) + result);
  return result;
}

uint64_t MovieSampleAccessorMoveToSampleForDTS(uint64_t a1, CMTime *a2, char *a3, char *a4)
{
  int32_t v8;
  int v9;
  BOOL v10;
  CMTimeValue v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  CMTimeValue value;
  unsigned int v16;
  uint64_t **v17;
  CMTimeValue v18;
  uint64_t v19;
  uint64_t *v20;
  CMTimeValue v21;
  CMTimeValue v22;
  uint64_t v23;
  char v24;
  char v25;
  int v26;
  uint64_t v27;
  BOOL v28;
  CMTimeValue v29;
  BOOL v30;
  char v31;
  uint64_t *v32;
  uint64_t *v33;
  int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  int v39;
  int v40;
  uint64_t v41;
  unsigned int *v42;
  CMTimeValue v43;
  uint64_t v44;
  CMTime v45;
  CMTime v46;

  memset(&v46, 0, sizeof(v46));
  v8 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 232);
  v45 = *a2;
  CMTimeConvertScale(&v46, &v45, v8, kCMTimeRoundingMethod_RoundTowardNegativeInfinity);
  v9 = a2->flags & 9;
  v10 = (~a2->flags & 5) == 0 || v9 == 9;
  if (v10)
  {
    v10 = v9 == 9;
    v11 = 0x8000000000000000;
    if (!v10)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    v46.value = v11;
  }
  result = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(result + 728);
  if (!v13 || (v14 = *(_QWORD *)(v13 + 56)) == 0)
  {
    value = v46.value;
LABEL_24:
    if (value >= *(_QWORD *)(a1 + 96))
    {
      while (1)
      {
        while (1)
        {
          v22 = *(_QWORD *)(a1 + 96);
          v23 = *(_QWORD *)(a1 + 104);
          v27 = *(unsigned int *)(a1 + 112) * v23;
          v28 = ((unsigned __int128)*(unsigned int *)(a1 + 112) * v23) >> 64 != v27 >> 63;
          v29 = v22 + v27;
          v30 = __OFADD__(v22, v27);
          if (!v28 && !v30)
            break;
          result = FigSignalErrorAt();
          if ((_DWORD)result)
            goto LABEL_38;
        }
        v21 = v46.value;
        if (v46.value < v29)
          break;
        result = stepDownEntry(a1);
        if ((_DWORD)result)
          goto LABEL_38;
      }
LABEL_28:
      v24 = 0;
      v25 = 0;
      v26 = *(_DWORD *)(a1 + 116) + (v21 - v22) / v23;
    }
    else
    {
      while (1)
      {
        result = stepUpEntry(a1);
        if ((_DWORD)result)
          break;
        v21 = v46.value;
        v22 = *(_QWORD *)(a1 + 96);
        if (v46.value >= v22)
        {
          v23 = *(_QWORD *)(a1 + 104);
          goto LABEL_28;
        }
      }
LABEL_38:
      if (v46.value >= *(_QWORD *)(a1 + 96))
      {
        v24 = 0;
        v26 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 288);
        v25 = 1;
      }
      else
      {
        v25 = 0;
        v26 = 1;
        v24 = 1;
      }
    }
    *(_DWORD *)(a1 + 80) = v26;
    *a3 = v24;
    *a4 = v25;
    return result;
  }
  if (*(_DWORD *)(a1 + 80) <= *(_DWORD *)(result + 288))
  {
    value = v46.value;
    if (v46.value < *(_QWORD *)(result + 224))
      goto LABEL_24;
  }
  if (*(_DWORD *)(a1 + 80) <= *(_DWORD *)(result + 288))
  {
    v16 = *(_DWORD *)(v14 + 32);
    ResetFragmentCursor(result, a1 + 184);
    *(_DWORD *)(a1 + 184) = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)(a1 + 208) + 16);
    result = StepFragmentCursorTo(a1, v16);
  }
  value = v46.value;
  *a4 = 0;
  v17 = *(uint64_t ***)(a1 + 200);
  v18 = (CMTimeValue)v17[2];
  if (value >= v18)
  {
    LOBYTE(v20) = 1;
  }
  else
  {
    v19 = *(_QWORD *)(a1 + 208);
    do
    {
      v19 = *(_QWORD *)(v19 + 8);
      if (!v19)
      {
        v20 = v17[1];
        if (!v20)
          goto LABEL_22;
        *(_QWORD *)(a1 + 200) = v20;
        v19 = v20[10];
        v17 = (uint64_t **)v20;
      }
      *(_QWORD *)(a1 + 208) = v19;
    }
    while (value < *(_QWORD *)(v19 + 24));
    LOBYTE(v20) = 1;
LABEL_22:
    v18 = (CMTimeValue)v17[2];
  }
  if (value >= v18)
  {
    while (value >= (uint64_t)v17[2] + (uint64_t)v17[3])
    {
      v32 = *v17;
      if (!*v17)
      {
        v37 = v17[9];
        do
        {
          v38 = v37;
          if (!v37)
            break;
          v37 = (uint64_t *)*v37;
        }
        while (*v38);
        v31 = 0;
        *(_QWORD *)(a1 + 208) = v38;
        *(_DWORD *)(a1 + 80) = *((_DWORD *)v38 + 4) + *((_DWORD *)v38 + 9) - 1;
        *a4 = 1;
        if (a3)
          goto LABEL_46;
        goto LABEL_47;
      }
      *(_QWORD *)(a1 + 200) = v32;
      *(_QWORD *)(a1 + 208) = v32[9];
      v17 = (uint64_t **)v32;
      if ((v20 & 1) == 0)
      {
        v31 = 0;
        if (a3)
          goto LABEL_46;
        goto LABEL_47;
      }
    }
    v33 = v17[9];
    if (v33 && value >= v33[3])
    {
      do
      {
        v35 = v33;
        v33 = (uint64_t *)*v33;
      }
      while (v33 && value >= v33[3]);
      *(_QWORD *)(a1 + 208) = v35;
      v36 = *((unsigned int *)v35 + 12);
      if ((v36 & 1) != 0)
      {
        v39 = *((_DWORD *)v35 + 9);
        if (v39 < 1)
        {
          v40 = 0;
        }
        else
        {
          v40 = 0;
          v41 = kPerSampleInfo_SizeInInt32s[v36];
          v42 = (unsigned int *)v35 + 13;
          v43 = v35[3];
          v44 = 4 * v41;
          while (1)
          {
            v43 += bswap32(*v42);
            if (v43 > value)
              break;
            ++v40;
            v42 = (unsigned int *)((char *)v42 + v44);
            if (v39 == v40)
            {
              v40 = *((_DWORD *)v35 + 9);
              break;
            }
          }
        }
        v31 = 0;
        v34 = *((_DWORD *)v35 + 4) + v40;
      }
      else
      {
        v31 = 0;
        v34 = *((_DWORD *)v35 + 4) + (value - v35[3]) / *((unsigned int *)v17 + 15);
      }
    }
    else
    {
      v31 = 0;
      *(_QWORD *)(a1 + 208) = v33;
      v34 = *((_DWORD *)v33 + 4);
    }
    *(_DWORD *)(a1 + 80) = v34;
    if (a3)
      goto LABEL_46;
  }
  else
  {
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)(a1 + 208) + 16);
    v31 = 1;
    if (a3)
LABEL_46:
      *a3 = v31;
  }
LABEL_47:
  if (value < v18 && *(_DWORD *)(*(_QWORD *)(a1 + 8) + 288))
  {
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a1 + 184);
    goto LABEL_24;
  }
  return result;
}

uint64_t MovieTrackGetMediaTimeScale(uint64_t a1)
{
  return *(unsigned int *)(a1 + 232);
}

uint64_t MovieSampleAccessorMoveToLastSampleInDecodeOrder(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 728);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 56);
    if (v4)
    {
      v5 = *(_DWORD *)(v4 + 32);
      v6 = *(_DWORD *)(v3 + 8);
      if (*(_DWORD *)(a1 + 80) <= *(_DWORD *)(v2 + 288))
      {
        ResetFragmentCursor(v2, a1 + 184);
        *(_DWORD *)(a1 + 184) = *(_DWORD *)(a1 + 80);
        *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)(a1 + 208) + 16);
      }
      StepFragmentCursorTo(a1, v5 + v6 - 1);
      return 0;
    }
  }
  while (!stepDownEntry(a1))
    ;
  v7 = *(_DWORD *)(a1 + 116) + *(_DWORD *)(a1 + 112) - 1;
  *(_DWORD *)(a1 + 80) = v7;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_DWORD *)(v8 + 244);
  v10 = *(_DWORD *)(v8 + 288);
  if (v9)
    v10 /= v9;
  if (v7 == v10)
    return 0;
  return FigSignalErrorAt();
}

uint64_t MovieSampleAccessorCreate(const void *a1, uint64_t a2, const void ***a3)
{
  int v6;
  uint64_t v7;
  const void **v8;
  CFTypeRef v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_DWORD *)(a2 + 288);
  v7 = *(_QWORD *)(a2 + 728);
  if (v7 && *(_QWORD *)(v7 + 56))
    v6 += *(_DWORD *)(v7 + 8);
  if (!v6)
  {
    v8 = 0;
    v11 = 4294954454;
LABEL_11:
    MovieSampleAccessorDispose(v8);
    v8 = 0;
    goto LABEL_12;
  }
  v8 = (const void **)malloc_type_calloc(1uLL, 0xD8uLL, 0x106004069928606uLL);
  if (v8)
  {
    if (a1)
      v9 = CFRetain(a1);
    else
      v9 = 0;
    *v8 = v9;
    v8[1] = CFRetain((CFTypeRef)a2);
    v10 = resetTrackCursor((uint64_t)v8);
  }
  else
  {
    v10 = FigSignalErrorAt();
  }
  v11 = v10;
  if ((_DWORD)v10)
    goto LABEL_11;
LABEL_12:
  *a3 = v8;
  return v11;
}

void MovieSampleAccessorDispose(const void **a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;

  if (a1)
  {
    v2 = *a1;
    if (v2)
    {
      CFRelease(v2);
      *a1 = 0;
    }
    v3 = a1[1];
    if (v3)
    {
      CFRelease(v3);
      a1[1] = 0;
    }
    v4 = a1[2];
    if (v4)
    {
      CFRelease(v4);
      a1[2] = 0;
    }
    v5 = a1[3];
    if (v5)
    {
      CFRelease(v5);
      a1[3] = 0;
    }
    v6 = a1[4];
    if (v6)
    {
      CFRelease(v6);
      a1[4] = 0;
    }
    v7 = a1[5];
    if (v7)
    {
      CFRelease(v7);
      a1[5] = 0;
    }
    v8 = a1[6];
    if (v8)
    {
      CFRelease(v8);
      a1[6] = 0;
    }
    v9 = a1[7];
    if (v9)
    {
      CFRelease(v9);
      a1[7] = 0;
    }
    v10 = a1[8];
    if (v10)
    {
      CFRelease(v10);
      a1[8] = 0;
    }
    v11 = a1[9];
    if (v11)
      CFRelease(v11);
    free(a1);
  }
}

uint64_t MovieSampleAccessorCopy(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  CFTypeRef v8;
  CFTypeRef v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const __CFDictionary *v18;
  const __CFAllocator *v19;
  CFIndex Count;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_DWORD *)(v4 + 288);
  v6 = *(_QWORD *)(v4 + 728);
  if (v6 && *(_QWORD *)(v6 + 56))
    v5 += *(_DWORD *)(v6 + 8);
  if (!v5)
  {
    v7 = 0;
    v23 = 4294954454;
    goto LABEL_28;
  }
  v7 = malloc_type_calloc(1uLL, 0xD8uLL, 0x106004069928606uLL);
  if (!v7)
  {
LABEL_30:
    v11 = FigSignalErrorAt();
LABEL_31:
    v23 = v11;
    goto LABEL_28;
  }
  v8 = *(CFTypeRef *)a1;
  if (*(_QWORD *)a1)
    v8 = CFRetain(v8);
  *v7 = v8;
  v9 = *(CFTypeRef *)(a1 + 8);
  if (v9)
    v9 = CFRetain(v9);
  v7[1] = v9;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    v11 = MovieSampleGroupAccessorCopy(v10, v7 + 2);
    if ((_DWORD)v11)
      goto LABEL_31;
  }
  v12 = *(_QWORD *)(a1 + 24);
  if (v12)
  {
    v11 = MovieSampleGroupAccessorCopy(v12, v7 + 3);
    if ((_DWORD)v11)
      goto LABEL_31;
  }
  v13 = *(_QWORD *)(a1 + 32);
  if (v13)
  {
    v11 = MovieSampleGroupAccessorCopy(v13, v7 + 4);
    if ((_DWORD)v11)
      goto LABEL_31;
  }
  v14 = *(_QWORD *)(a1 + 40);
  if (v14)
  {
    v11 = MovieSampleGroupAccessorCopy(v14, v7 + 5);
    if ((_DWORD)v11)
      goto LABEL_31;
  }
  v15 = *(_QWORD *)(a1 + 48);
  if (v15)
  {
    v11 = MovieSampleGroupAccessorCopy(v15, v7 + 6);
    if ((_DWORD)v11)
      goto LABEL_31;
  }
  v16 = *(_QWORD *)(a1 + 56);
  if (v16)
  {
    v11 = MovieSampleGroupAccessorCopy(v16, v7 + 7);
    if ((_DWORD)v11)
      goto LABEL_31;
  }
  v17 = *(_QWORD *)(a1 + 64);
  if (v17)
  {
    v11 = MovieSampleGroupAccessorCopy(v17, v7 + 8);
    if ((_DWORD)v11)
      goto LABEL_31;
  }
  v18 = *(const __CFDictionary **)(a1 + 72);
  if (v18)
  {
    v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Count = CFDictionaryGetCount(v18);
    Mutable = CFDictionaryCreateMutable(v19, Count, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v22 = Mutable;
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 72), (CFDictionaryApplierFunction)CopyMovieSampleGroupAccessorIntoNewDictionary, Mutable);
      v7[9] = v22;
      goto LABEL_27;
    }
    goto LABEL_30;
  }
LABEL_27:
  v23 = 0;
  *((_OWORD *)v7 + 5) = *(_OWORD *)(a1 + 80);
  v24 = *(_OWORD *)(a1 + 96);
  v25 = *(_OWORD *)(a1 + 112);
  v26 = *(_OWORD *)(a1 + 144);
  *((_OWORD *)v7 + 8) = *(_OWORD *)(a1 + 128);
  *((_OWORD *)v7 + 9) = v26;
  *((_OWORD *)v7 + 6) = v24;
  *((_OWORD *)v7 + 7) = v25;
  v27 = *(_OWORD *)(a1 + 160);
  v28 = *(_OWORD *)(a1 + 176);
  v29 = *(_OWORD *)(a1 + 192);
  v7[26] = *(_QWORD *)(a1 + 208);
  *((_OWORD *)v7 + 11) = v28;
  *((_OWORD *)v7 + 12) = v29;
  *((_OWORD *)v7 + 10) = v27;
  *a2 = v7;
  v7 = 0;
LABEL_28:
  MovieSampleAccessorDispose((const void **)v7);
  return v23;
}

void CopyMovieSampleGroupAccessorIntoNewDictionary(const void *a1, uint64_t a2, __CFDictionary *a3)
{
  void *value;

  value = 0;
  MovieSampleGroupAccessorCopy(a2, (uint64_t *)&value);
  if (value)
  {
    CFDictionarySetValue(a3, a1, value);
    CFRelease(value);
  }
}

uint64_t MovieSampleAccessorGetDTSTimeValue(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 728);
  if (v2 && *(_QWORD *)(v2 + 56) && *(_DWORD *)(a1 + 80) > *(_DWORD *)(v1 + 288))
    return FragmentCursorGetDTSTimeValue(a1);
  else
    return *(_QWORD *)(a1 + 96) + *(_QWORD *)(a1 + 104) * (*(_DWORD *)(a1 + 80) - *(_DWORD *)(a1 + 116));
}

uint64_t FragmentCursorGetDTSTimeValue(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 208);
  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_DWORD *)(a1 + 80);
  v4 = *(_DWORD *)(v1 + 16);
  LODWORD(v5) = v3 - v4;
  if (v3 < v4 || v3 >= *(_DWORD *)(v1 + 36) + v4)
  {
    FigSignalErrorAt();
  }
  else
  {
    v6 = *(unsigned int *)(v1 + 48);
    if ((v6 & 1) != 0)
    {
      if ((int)v5 >= 1)
      {
        v5 = (int)v5;
        v7 = (unsigned int *)(v1 + 52);
        v8 = 4 * kPerSampleInfo_SizeInInt32s[v6];
        do
        {
          v2 += bswap32(*v7);
          v7 = (unsigned int *)((char *)v7 + v8);
          --v5;
        }
        while (v5);
      }
    }
    else
    {
      v2 += (*(_DWORD *)(*(_QWORD *)(a1 + 200) + 60) * v5);
    }
  }
  return v2;
}

uint64_t MovieSampleAccessorGetPTSTimeValue(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t DTSTimeValue;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  OpaqueCMBlockBuffer *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  OpaqueCMBlockBuffer *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t destination;

  v2 = *(_DWORD *)(a1 + 80);
  v3 = *(_DWORD *)(a1 + 132);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 728);
  if (v5 && *(_QWORD *)(v5 + 56) && v2 > *(_DWORD *)(v4 + 288))
  {
    DTSTimeValue = FragmentCursorGetDTSTimeValue(a1);
    v7 = *(_DWORD **)(a1 + 208);
    v8 = v7[12];
    if ((v8 & 8) != 0)
    {
      v27 = *(_DWORD *)(a1 + 80);
      v28 = v7[4];
      if (v27 >= v28 && v27 < v7[9] + v28)
      {
        v9 = (int)bswap32(v7[kPerSampleInfo_SizeInInt32s[v8] * (int)(v27 - v28)
                           + 13
                           + kPerSampleInfo_CompTimeOffIndex[v8]]);
        return v9 + DTSTimeValue;
      }
      v29 = DTSTimeValue;
      FigSignalErrorAt();
      DTSTimeValue = v29;
    }
    v9 = 0;
    return v9 + DTSTimeValue;
  }
  v10 = *(OpaqueCMBlockBuffer **)(v4 + 464);
  if (v10)
  {
    v11 = *(int *)(a1 + 128);
    destination = 0;
    CMBlockBufferCopyDataBytes(v10, 8 * v11, 8uLL, &destination);
    v12 = *(_DWORD *)(a1 + 132);
    v13 = v12 + bswap32(destination);
    if (v12 > v2 || v2 >= v13)
    {
      do
      {
        v15 = *(_DWORD *)(a1 + 128);
        if (v2 >= v3)
        {
          v19 = v15 + 1;
          v18 = *(_QWORD *)(a1 + 8);
          if (v19 >= *(_DWORD *)(v18 + 456))
            goto LABEL_20;
          *(_DWORD *)(a1 + 128) = v19;
        }
        else
        {
          v16 = v15 - 1;
          if (v15 < 1)
            goto LABEL_20;
          *(_DWORD *)(a1 + 128) = v16;
          v17 = *(_QWORD *)(a1 + 8);
          destination = 0;
          CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v17 + 464), 8 * v16, 8uLL, &destination);
          v13 = *(_DWORD *)(a1 + 132) - bswap32(destination);
          v18 = *(_QWORD *)(a1 + 8);
        }
        *(_DWORD *)(a1 + 132) = v13;
        v20 = *(OpaqueCMBlockBuffer **)(v18 + 464);
        v21 = *(int *)(a1 + 128);
        destination = 0;
        CMBlockBufferCopyDataBytes(v20, 8 * v21, 8uLL, &destination);
        v22 = *(_DWORD *)(a1 + 132);
        v13 = v22 + bswap32(destination);
      }
      while (v22 > v2 || v2 >= v13);
    }
    v23 = *(_QWORD *)(a1 + 8);
    v24 = *(int *)(a1 + 128);
    destination = 0;
    CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v23 + 464), 8 * v24, 8uLL, &destination);
    v25 = (int)bswap32(HIDWORD(destination));
  }
  else
  {
LABEL_20:
    v25 = 0;
  }
  return MovieSampleAccessorGetDTSTimeValue(a1) + v25;
}

BOOL MovieSampleTableHaveCompositionOffsetTable(uint64_t a1)
{
  return *(_QWORD *)(a1 + 464) != 0;
}

uint64_t MovieSampleTableGetCompositionOffsetDisplayOffset(uint64_t a1, int a2)
{
  uint64_t destination;

  destination = 0;
  CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 464), 8 * a2, 8uLL, &destination);
  return bswap32(HIDWORD(destination));
}

uint64_t MovieSampleTableNumCompositionOffsetEntries(uint64_t a1)
{
  return *(unsigned int *)(a1 + 456);
}

uint64_t MovieSampleAccessorGetSampleDuration(uint64_t a1, CMTime *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _DWORD *v14;
  uint64_t v15;
  unsigned int v16;
  int64_t PTSTimeValue;
  int64_t v18;
  int64_t v19;
  unsigned int v21;
  CMTime rhs;
  CMTime lhs;
  CMTime v24;
  _OWORD v25[13];
  uint64_t v26;

  v4 = *(_OWORD *)(a1 + 176);
  v25[10] = *(_OWORD *)(a1 + 160);
  v25[11] = v4;
  v25[12] = *(_OWORD *)(a1 + 192);
  v26 = *(_QWORD *)(a1 + 208);
  v5 = *(_OWORD *)(a1 + 112);
  v25[6] = *(_OWORD *)(a1 + 96);
  v25[7] = v5;
  v6 = *(_OWORD *)(a1 + 144);
  v25[8] = *(_OWORD *)(a1 + 128);
  v25[9] = v6;
  v7 = *(_OWORD *)(a1 + 48);
  v25[2] = *(_OWORD *)(a1 + 32);
  v25[3] = v7;
  v8 = *(_OWORD *)(a1 + 80);
  v25[4] = *(_OWORD *)(a1 + 64);
  v25[5] = v8;
  v9 = *(_OWORD *)(a1 + 16);
  v25[0] = *(_OWORD *)a1;
  v25[1] = v9;
  MovieSampleAccessorStepFwdPTS((uint64_t)v25);
  if (v10 == -12840)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v12 = *(_QWORD *)(v11 + 728);
    if (v12 && *(_QWORD *)(v12 + 56) && (v13 = *(_DWORD *)(a1 + 80), v13 > *(_DWORD *)(v11 + 288)))
    {
      v14 = *(_DWORD **)(a1 + 208);
      v15 = v14[12];
      if ((v15 & 1) != 0)
      {
        v21 = v14[4];
        if (v13 < v21 || v13 >= v14[9] + v21)
        {
          FigSignalErrorAt();
          v16 = 0;
        }
        else
        {
          v16 = bswap32(v14[kPerSampleInfo_SizeInInt32s[v15] * (int)(v13 - v21) + 13]);
        }
      }
      else
      {
        v16 = *(_DWORD *)(*(_QWORD *)(a1 + 200) + 60);
      }
      v19 = v16;
      v11 = *(_QWORD *)(a1 + 8);
    }
    else
    {
      v19 = *(_QWORD *)(a1 + 104);
    }
    CMTimeMake(&v24, v19, *(_DWORD *)(v11 + 232));
  }
  else
  {
    PTSTimeValue = MovieSampleAccessorGetPTSTimeValue((uint64_t)v25);
    CMTimeMake(&lhs, PTSTimeValue, *(_DWORD *)(*((_QWORD *)&v25[0] + 1) + 232));
    v18 = MovieSampleAccessorGetPTSTimeValue(a1);
    CMTimeMake(&rhs, v18, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 232));
    CMTimeSubtract(&v24, &lhs, &rhs);
  }
  *a2 = v24;
  return 0;
}

__n128 MovieSampleAccessorStepFwdPTS(uint64_t a1)
{
  uint64_t PTSTimeValue;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __n128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  __n128 result;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  CMTime v26;
  _OWORD v27[5];
  __int128 v28;
  __n128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  char v38;
  __int128 v39;
  __n128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v47 = 0;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  PTSTimeValue = MovieSampleAccessorGetPTSTimeValue(a1);
  v3 = PTSTimeValue;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 728);
  if (v5 && *(_QWORD *)(v5 + 56) && *(_DWORD *)(a1 + 80) > *(_DWORD *)(v4 + 288))
  {
    if (!*(_BYTE *)(v5 + 13))
    {
      v8 = 0;
      v9 = 0;
      goto LABEL_8;
    }
    v6 = (int *)(v5 + 32);
    v7 = (int *)(v5 + 36);
  }
  else
  {
    v6 = (int *)(v4 + 112);
    v7 = (int *)(v4 + 116);
  }
  v8 = *v6;
  v9 = *v7;
LABEL_8:
  v10 = *(_OWORD *)(a1 + 160);
  v11 = *(_OWORD *)(a1 + 192);
  v34 = *(_OWORD *)(a1 + 176);
  v35 = v11;
  v12 = *(__n128 *)(a1 + 96);
  v13 = *(_OWORD *)(a1 + 128);
  v14 = *(_OWORD *)(a1 + 144);
  v30 = *(_OWORD *)(a1 + 112);
  v31 = v13;
  v38 = 0;
  v36 = *(_QWORD *)(a1 + 208);
  v32 = v14;
  v33 = v10;
  v15 = *(_OWORD *)(a1 + 48);
  v27[2] = *(_OWORD *)(a1 + 32);
  v27[3] = v15;
  v16 = *(_OWORD *)(a1 + 80);
  v27[4] = *(_OWORD *)(a1 + 64);
  v28 = v16;
  v29 = v12;
  v17 = *(_OWORD *)(a1 + 16);
  v27[0] = *(_OWORD *)a1;
  v27[1] = v17;
  CMTimeMake(&v26, (PTSTimeValue - v8) & ~((PTSTimeValue - v8) >> 63), *(_DWORD *)(*((_QWORD *)&v27[0] + 1) + 232));
  MovieSampleAccessorMoveToSampleForDTS((uint64_t)v27, &v26, &v38, &v37);
  v18 = 0;
  v19 = 0;
  v20 = 1;
  do
  {
    while (1)
    {
      v21 = MovieSampleAccessorGetPTSTimeValue((uint64_t)v27);
      if (v21 <= v3)
        break;
      if (v20 & 1 | (v21 < v18))
      {
        v45 = v34;
        v46 = v35;
        v47 = v36;
        v41 = v30;
        v42 = v31;
        v43 = v32;
        v44 = v33;
        v19 = v21 - v9;
        v18 = v21;
        v39 = v28;
        v40 = v29;
      }
      if (MovieSampleAccessorGetDTSTimeValue((uint64_t)v27) <= v19)
      {
        v20 = 0;
        if (!MovieSampleAccessorStepCursor((uint64_t)v27, 1, 0))
          continue;
      }
      goto LABEL_18;
    }
  }
  while (!MovieSampleAccessorStepCursor((uint64_t)v27, 1, 0));
  if ((v20 & 1) != 0)
    return result;
LABEL_18:
  *(_QWORD *)(a1 + 208) = v47;
  v23 = v46;
  *(_OWORD *)(a1 + 176) = v45;
  *(_OWORD *)(a1 + 192) = v23;
  v24 = v42;
  *(_OWORD *)(a1 + 112) = v41;
  *(_OWORD *)(a1 + 128) = v24;
  v25 = v44;
  *(_OWORD *)(a1 + 144) = v43;
  *(_OWORD *)(a1 + 160) = v25;
  result = v40;
  *(_OWORD *)(a1 + 80) = v39;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

CMTime *MovieSampleAccessorGetPTS@<X0>(uint64_t a1@<X0>, CMTime *a2@<X8>)
{
  int64_t PTSTimeValue;

  PTSTimeValue = MovieSampleAccessorGetPTSTimeValue(a1);
  return CMTimeMake(a2, PTSTimeValue, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 232));
}

CMTime *MovieSampleAccessorGetDTS@<X0>(uint64_t a1@<X0>, CMTime *a2@<X8>)
{
  int64_t DTSTimeValue;

  DTSTimeValue = MovieSampleAccessorGetDTSTimeValue(a1);
  return CMTimeMake(a2, DTSTimeValue, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 232));
}

__n128 MovieSampleAccessorMoveToSampleAtPTS(uint64_t a1, uint64_t a2, _BYTE *a3, _BYTE *a4)
{
  int32_t v8;
  int v9;
  BOOL v10;
  CMTimeValue v11;
  __n128 result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  CMTimeValue PTSTimeValue;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *v29;
  _OWORD *v30;
  uint64_t v31;
  uint64_t v32;
  CMTimeValue v33;
  __int128 v34;
  __int128 v35;
  __n128 v36;
  int v37;
  _BYTE *v38;
  int64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __n128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE *v48;
  _BYTE *v49;
  __int16 v50;
  CMTime v51;
  _BYTE time[32];
  __int128 v53;
  __n128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  int v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  memset(&v51, 0, sizeof(v51));
  v8 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 232);
  *(_OWORD *)time = *(_OWORD *)a2;
  *(_QWORD *)&time[16] = *(_QWORD *)(a2 + 16);
  CMTimeConvertScale(&v51, (CMTime *)time, v8, kCMTimeRoundingMethod_RoundTowardNegativeInfinity);
  v9 = *(_DWORD *)(a2 + 12) & 9;
  if ((~*(_DWORD *)(a2 + 12) & 5) == 0 || v9 == 9)
  {
    v10 = v9 == 9;
    v11 = 0x8000000000000000;
    if (!v10)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    v51.value = v11;
  }
  v50 = 0;
  *(CMTime *)time = v51;
  MovieSampleAccessorMoveToSampleForDTS(a1, (CMTime *)time, (char *)&v50 + 1, (char *)&v50);
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(v13 + 728);
  if (v14)
    LODWORD(v14) = *(unsigned __int8 *)(v14 + 13) != 0;
  if (!*(_BYTE *)(v13 + 720) && !(_DWORD)v14)
  {
    if (a3)
      *a3 = HIBYTE(v50);
    if (a4)
      *a4 = v50;
    return result;
  }
  v16 = *(int *)(v13 + 112);
  v15 = *(int *)(v13 + 116);
  v17 = 0x7FFFFFFFFFFFFFFFLL;
  if (v51.value <= 0)
    v17 = 0x8000000000000000;
  v18 = __OFSUB__(v51.value, v15);
  v19 = v51.value - v15;
  if (v18)
    v20 = v17;
  else
    v20 = v19;
  if (a3)
    *a3 = 0;
  if (a4)
    *a4 = 0;
  v21 = 0;
  do
  {
    if (MovieSampleAccessorStepCursor(a1, 1, 0))
      break;
    PTSTimeValue = MovieSampleAccessorGetPTSTimeValue(a1);
    if (PTSTimeValue == v51.value)
      return result;
    if (PTSTimeValue > v51.value)
      v21 = 1;
  }
  while (MovieSampleAccessorGetDTSTimeValue(a1) <= v20);
  v58 = 0uLL;
  v59 = 0;
  memset(time, 0, sizeof(time));
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0;
  v23 = *(_QWORD *)(a1 + 8);
  v24 = *(_DWORD *)(v23 + 288);
  v25 = *(_QWORD *)(v23 + 728);
  v48 = a3;
  v49 = a4;
  if (v25)
    v24 += *(_DWORD *)(v25 + 8);
  v26 = 0;
  v27 = 0;
  v28 = 0;
  if (*(_DWORD *)(a1 + 80) + 1 <= v24)
    v21 = 1;
  v29 = (__int128 *)(a1 + 84);
  v30 = (_OWORD *)(a1 + 112);
  v31 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    v32 = MovieSampleAccessorGetPTSTimeValue(a1);
    v33 = v32;
    if (v51.value == v32)
      break;
    if ((v32 & 0x8000000000000000) == 0 && v51.value > v32 && v51.value - v32 < v31)
    {
      v26 = *(_DWORD *)(a1 + 80);
      v58 = *v29;
      v59 = *(_DWORD *)(a1 + 100);
      v27 = *(_QWORD *)(a1 + 104);
      v34 = *(_OWORD *)(a1 + 192);
      v55 = *(_OWORD *)(a1 + 176);
      v56 = v34;
      v57 = *(_QWORD *)(a1 + 208);
      v35 = *(_OWORD *)(a1 + 128);
      *(_OWORD *)time = *v30;
      *(_OWORD *)&time[16] = v35;
      v36 = *(__n128 *)(a1 + 160);
      v31 = v51.value - v32;
      v28 = v32;
      v53 = *(_OWORD *)(a1 + 144);
      v54 = v36;
    }
    if (v51.value < v32)
      v21 = 1;
  }
  while ((!v26 || MovieSampleAccessorGetDTSTimeValue(a1) + v16 > v28)
       && !MovieSampleAccessorStepCursor(a1, -1, 0));
  if (v33 != v51.value)
  {
    if (v26 && (v21 || v28 + v27 > v51.value))
    {
      *(_DWORD *)(a1 + 80) = v26;
      *v29 = v58;
      *(_DWORD *)(a1 + 100) = v59;
      *(_QWORD *)(a1 + 104) = v27;
      v46 = v56;
      *(_OWORD *)(a1 + 176) = v55;
      *(_OWORD *)(a1 + 192) = v46;
      *(_QWORD *)(a1 + 208) = v57;
      v47 = *(_OWORD *)&time[16];
      *v30 = *(_OWORD *)time;
      *(_OWORD *)(a1 + 128) = v47;
      result = v54;
      *(_OWORD *)(a1 + 144) = v53;
      *(__n128 *)(a1 + 160) = result;
      return result;
    }
    if (v51.value >= v33)
    {
      v39 = 0x8000000000000000;
      do
      {
        v40 = MovieSampleAccessorGetPTSTimeValue(a1);
        if (v39 < v40)
        {
          v26 = *(_DWORD *)(a1 + 80);
          v58 = *v29;
          v59 = *(_DWORD *)(a1 + 100);
          v27 = *(_QWORD *)(a1 + 104);
          v41 = *(_OWORD *)(a1 + 192);
          v55 = *(_OWORD *)(a1 + 176);
          v56 = v41;
          v57 = *(_QWORD *)(a1 + 208);
          v42 = *(_OWORD *)(a1 + 128);
          *(_OWORD *)time = *v30;
          *(_OWORD *)&time[16] = v42;
          v43 = *(__n128 *)(a1 + 160);
          v39 = v40;
          v53 = *(_OWORD *)(a1 + 144);
          v54 = v43;
        }
      }
      while (!MovieSampleAccessorStepCursor(a1, 1, 0));
      *(_DWORD *)(a1 + 80) = v26;
      *v29 = v58;
      *(_DWORD *)(a1 + 100) = v59;
      *(_QWORD *)(a1 + 104) = v27;
      v44 = v56;
      *(_OWORD *)(a1 + 176) = v55;
      *(_OWORD *)(a1 + 192) = v44;
      *(_QWORD *)(a1 + 208) = v57;
      v45 = *(_OWORD *)&time[16];
      *v30 = *(_OWORD *)time;
      *(_OWORD *)(a1 + 128) = v45;
      result = v54;
      *(_OWORD *)(a1 + 144) = v53;
      *(__n128 *)(a1 + 160) = result;
      v38 = v49;
      if (!v49)
        return result;
    }
    else
    {
      v37 = resetTrackCursor(a1);
      v38 = v48;
      if (!v48 || v37)
        return result;
    }
    *v38 = 1;
  }
  return result;
}

void MovieSampleAccessorStepBackPTS(uint64_t a1)
{
  uint64_t PTSTimeValue;
  BOOL v3;
  int64_t v4;
  CMTime v5;
  __int16 v6;

  PTSTimeValue = MovieSampleAccessorGetPTSTimeValue(a1);
  v3 = PTSTimeValue < 1;
  v4 = PTSTimeValue - 1;
  if (!v3)
  {
    v6 = 0;
    CMTimeMake(&v5, v4, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 232));
    MovieSampleAccessorMoveToSampleAtPTS(a1, (uint64_t)&v5, (_BYTE *)&v6 + 1, &v6);
  }
}

uint64_t MovieSampleAccessorGetSampleLocation(uint64_t a1, uint64_t *a2, unint64_t a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v9;
  unsigned int v10;
  _DWORD *v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;

  v4 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v4 + 719))
    return FigSignalErrorAt();
  v9 = *(_QWORD *)(v4 + 728);
  if (v9)
  {
    if (*(_QWORD *)(v9 + 56))
    {
      v10 = *(_DWORD *)(a1 + 80);
      if (v10 > *(_DWORD *)(v4 + 288))
      {
        v11 = *(_DWORD **)(a1 + 208);
        v12 = v11[4];
        v13 = v10 - v12;
        if (v10 < v12 || v10 >= v11[9] + v12)
        {
          FigSignalErrorAt();
          if (a4)
          {
LABEL_46:
            result = 0;
            *a4 = *(_DWORD *)(*(_QWORD *)(a1 + 200) + 56);
            return result;
          }
        }
        else
        {
          if (a2)
          {
            v14 = *(_QWORD *)(a1 + 200);
            v15 = *(_QWORD *)(v14 + 48) + (int)v11[8];
            v16 = v11[12];
            if ((v16 & 2) != 0)
            {
              if (v13 < 1)
              {
                v17 = 0;
              }
              else
              {
                v17 = 0;
                v30 = kPerSampleInfo_SizeInInt32s[v16];
                v31 = &v11[kPerSampleInfo_SizeIndex[v16] + 13];
                v32 = 4 * v30;
                v33 = v13;
                do
                {
                  v17 += bswap32(*v31);
                  v31 = (unsigned int *)((char *)v31 + v32);
                  --v33;
                }
                while (v33);
              }
            }
            else
            {
              v17 = (*(_DWORD *)(v14 + 64) * v13);
            }
            *a2 = v15 + v17;
          }
          if (a3)
          {
            v34 = v11[12];
            if ((v34 & 2) != 0)
              v35 = bswap32(v11[kPerSampleInfo_SizeInInt32s[v34] * v13 + 13 + kPerSampleInfo_SizeIndex[v34]]);
            else
              v35 = *(unsigned int *)(*(_QWORD *)(a1 + 200) + 64);
            *(_QWORD *)a3 = v35;
          }
          if (a4)
            goto LABEL_46;
        }
        return 0;
      }
    }
  }
  v36 = 0;
  result = locateChunk(a1, &v36, a4);
  if ((_DWORD)result)
    return result;
  if (!((unint64_t)a2 | a3))
    return 0;
  v19 = *(_QWORD *)(a1 + 8);
  LODWORD(v20) = *(_DWORD *)(v19 + 248);
  v21 = v36;
  result = CheckChunkNumber(v19, v36);
  if ((_DWORD)result)
    return result;
  v22 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 616))();
  if (!(_DWORD)v20)
    LODWORD(v20) = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 292);
  v20 = (int)v20;
  if (*(_DWORD *)(a1 + 160) == v21)
  {
    v23 = *(_DWORD *)(a1 + 164);
    v24 = *(_DWORD *)(a1 + 80);
    if (v23 && v23 == v24 - 1)
    {
      if (!(_DWORD)v20)
      {
        v20 = (*(int (**)(void))(*(_QWORD *)(a1 + 8) + 592))();
        v24 = *(_DWORD *)(a1 + 80);
      }
      v22 = *(_QWORD *)(a1 + 176) + *(_QWORD *)(a1 + 168);
      v25 = v20;
      goto LABEL_28;
    }
  }
  else
  {
    v24 = *(_DWORD *)(a1 + 80);
  }
  v26 = (v24 - *(_DWORD *)(a1 + 140)) % *(_DWORD *)(a1 + 148);
  v27 = v24 - v26;
  if (v24 >= v26)
  {
    v28 = 0;
    do
    {
      v25 = (int)v20;
      if (!(_DWORD)v20)
      {
        v25 = (*(int (**)(void))(*(_QWORD *)(a1 + 8) + 592))();
        v24 = *(_DWORD *)(a1 + 80);
      }
      v22 += v28;
      ++v27;
      v28 = v25;
    }
    while (v27 <= v24);
  }
  else
  {
    v25 = 0;
  }
LABEL_28:
  *(_DWORD *)(a1 + 160) = v21;
  *(_DWORD *)(a1 + 164) = v24;
  *(_QWORD *)(a1 + 168) = v22;
  *(_QWORD *)(a1 + 176) = v25;
  if (a2)
    *a2 = v22;
  if (!a3)
    return 0;
  result = 0;
  v29 = *(int *)(*(_QWORD *)(a1 + 8) + 248);
  if (!(_DWORD)v29)
    v29 = v25;
  *(_QWORD *)a3 = v29;
  return result;
}

uint64_t MovieSampleTableGetCommonSampleSize(uint64_t a1)
{
  return *(unsigned int *)(a1 + 292);
}

uint64_t MovieSampleAccessorGetChunkDetails(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, _QWORD *a6, BOOL *a7, BOOL *a8, _BYTE *a9)
{
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t result;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD v34[5];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;

  if (a9)
    *a9 = 1;
  v17 = *(_QWORD *)(a1 + 8);
  v18 = *(_QWORD *)(v17 + 728);
  if (v18)
  {
    if (*(_QWORD *)(v18 + 56))
    {
      v19 = *(_DWORD *)(a1 + 80);
      if (v19 > *(_DWORD *)(v17 + 288))
      {
        if (a3)
          *a3 = *(_QWORD *)(*(_QWORD *)(a1 + 200) + 48) + *(int *)(*(_QWORD *)(a1 + 208) + 32);
        if (a4)
          *a4 = TotalRunDataSize(*(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 208));
        if (a5)
          *a5 = *(int *)(*(_QWORD *)(a1 + 208) + 36);
        if (a6)
          *a6 = v19 - *(_DWORD *)(*(_QWORD *)(a1 + 208) + 16);
        if (a7)
          *a7 = (*(_DWORD *)(*(_QWORD *)(a1 + 208) + 48) & 2) == 0;
        if (a8)
          *a8 = (*(_DWORD *)(*(_QWORD *)(a1 + 208) + 48) & 1) == 0;
        if (a2)
        {
          result = 0;
          v21 = *(_DWORD *)(*(_QWORD *)(a1 + 200) + 56);
LABEL_42:
          *a2 = v21;
          return result;
        }
        return 0;
      }
    }
  }
  v44 = 0;
  result = locateChunk(a1, (_DWORD *)&v44 + 1, &v44);
  if (!(_DWORD)result)
  {
    result = CheckChunkNumber(*(_QWORD *)(a1 + 8), SHIDWORD(v44));
    if (!(_DWORD)result)
    {
      v22 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 616))();
      v23 = v22;
      if (a3)
        *a3 = v22;
      if (a4)
      {
        v24 = *(_OWORD *)(a1 + 176);
        v40 = *(_OWORD *)(a1 + 160);
        v41 = v24;
        v42 = *(_OWORD *)(a1 + 192);
        v43 = *(_QWORD *)(a1 + 208);
        v25 = *(_OWORD *)(a1 + 112);
        v36 = *(_OWORD *)(a1 + 96);
        v37 = v25;
        v26 = *(_OWORD *)(a1 + 144);
        v38 = *(_OWORD *)(a1 + 128);
        v39 = v26;
        v27 = *(_OWORD *)(a1 + 48);
        v34[2] = *(_OWORD *)(a1 + 32);
        v34[3] = v27;
        v28 = *(_OWORD *)(a1 + 80);
        v34[4] = *(_OWORD *)(a1 + 64);
        v35 = v28;
        v29 = *(_OWORD *)(a1 + 16);
        v34[0] = *(_OWORD *)a1;
        v34[1] = v29;
        v32 = 0;
        v33 = 0;
        LODWORD(v35) = DWORD1(v39) + v35 + ~((v35 - HIDWORD(v38)) % DWORD1(v39));
        result = MovieSampleAccessorGetSampleLocation((uint64_t)v34, &v33, (unint64_t)&v32, 0);
        if ((_DWORD)result)
          return result;
        *a4 = v33 - v23 + v32;
      }
      v30 = *(int *)(a1 + 148);
      if (a5)
        *a5 = v30;
      if (a6)
        *a6 = (*(_DWORD *)(a1 + 80) - *(_DWORD *)(a1 + 140)) % v30;
      if (a7)
      {
        v31 = (_DWORD)v30 == 1 || *(_DWORD *)(*(_QWORD *)(a1 + 8) + 292) != 0;
        *a7 = v31;
      }
      if (a8)
      {
        if ((_DWORD)v30 != 1)
          LOBYTE(v30) = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 408) == 1;
        *a8 = v30;
      }
      if (a2)
      {
        result = 0;
        v21 = v44;
        goto LABEL_42;
      }
      return 0;
    }
  }
  return result;
}

uint64_t MovieSampleTableNumTimeToSampleEntries(uint64_t a1)
{
  return *(unsigned int *)(a1 + 408);
}

uint64_t MovieSampleAccessorComputePlayableHorizon(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int64_t PTSTimeValue;
  uint64_t v15;
  uint64_t SampleLocation;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t *);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  signed int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, CMTime *);
  uint64_t v37;
  BOOL v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  int v45;
  _BOOL4 v46;
  int v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  int v52;
  int64_t v53;
  uint64_t v54;
  int64_t v55;
  int32_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  CMTime rhs;
  CMTime lhs;
  CMTime v67;
  CMTime v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _OWORD v72[6];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  __int128 destination;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;

  v4 = *(_OWORD *)(a1 + 176);
  v5 = *(_OWORD *)(a1 + 192);
  v6 = *(_OWORD *)(a1 + 144);
  v77 = *(_OWORD *)(a1 + 160);
  v78 = v4;
  v79 = v5;
  v7 = *(_OWORD *)(a1 + 112);
  v8 = *(_OWORD *)(a1 + 128);
  v9 = *(_OWORD *)(a1 + 80);
  v73 = *(_OWORD *)(a1 + 96);
  v74 = v7;
  v75 = v8;
  v76 = v6;
  v10 = *(_OWORD *)(a1 + 48);
  v11 = *(_OWORD *)(a1 + 64);
  v12 = *(_OWORD *)(a1 + 16);
  v72[2] = *(_OWORD *)(a1 + 32);
  v72[3] = v10;
  v80 = *(_QWORD *)(a1 + 208);
  v72[4] = v11;
  v72[5] = v9;
  v72[0] = *(_OWORD *)a1;
  v72[1] = v12;
  v70 = 0;
  v71 = 0;
  v69 = 0;
  v68 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v67 = v68;
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 728);
  if (v13 && *(_QWORD *)(v13 + 56))
  {
    PTSTimeValue = MovieSampleAccessorGetPTSTimeValue(a1);
    CMTimeMake(&v67, PTSTimeValue, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 232));
    MovieTrackGetMediaDuration(*(_QWORD *)(a1 + 8), (uint64_t)&v68);
    v15 = 0;
    goto LABEL_61;
  }
  SampleLocation = MovieSampleAccessorGetSampleLocation(a1, &v70, (unint64_t)&v71, 0);
  if ((_DWORD)SampleLocation)
    goto LABEL_66;
  v17 = v70;
  if ((v71 | v70) < 0
    || (v18 = *(_QWORD *)a1, v19 = *(_QWORD *)(*(_QWORD *)a1 + 72), (uint64_t)v19 <= v70)
    || v71 + v70 > v19)
  {
    SampleLocation = FigSignalErrorAt();
    if (!(_DWORD)SampleLocation)
    {
      v18 = *(_QWORD *)a1;
      v17 = v70;
      goto LABEL_10;
    }
LABEL_66:
    v15 = SampleLocation;
    goto LABEL_61;
  }
LABEL_10:
  v20 = *(_QWORD *)(v18 + 48);
  v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v21)
  {
    v15 = 4294954514;
    goto LABEL_61;
  }
  SampleLocation = v21(v20, v17, &v69);
  if ((_DWORD)SampleLocation)
    goto LABEL_66;
  if (!v69)
  {
    v15 = 0;
    v24 = MEMORY[0x1E0CA2E68];
    *(_OWORD *)a2 = *MEMORY[0x1E0CA2E68];
    v25 = *(_QWORD *)(v24 + 16);
    goto LABEL_62;
  }
  v64 = v70 + v69;
  v63 = *(_DWORD *)(a1 + 80);
  v22 = *(_DWORD *)(a1 + 136);
  v60 = a2;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 432) == 1)
    v23 = 1;
  else
    v23 = *(_DWORD *)(a1 + 140);
  v61 = 0;
  v62 = 0;
  lhs.value = 0;
  rhs.value = 0;
  v26 = *(_DWORD *)(a1 + 144);
  v27 = *(_DWORD *)(a1 + 148);
  v28 = v23 + (v63 - v23) / v27 * v27;
  while (1)
  {
    v29 = v23 + v26 * v27;
    if (v28 < v23)
    {
      v30 = *(_QWORD *)(a1 + 8);
LABEL_36:
      v47 = v22 + 1;
      v48 = *(_DWORD *)(v30 + 432);
      if (v22 + 1 >= v48)
        goto LABEL_52;
      if (v48 != 1)
      {
        DWORD2(destination) = 0;
        *(_QWORD *)&destination = 0;
        CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v30 + 440), 12 * v47, 0xCuLL, &destination);
        v27 = bswap32(DWORD1(destination));
        v30 = *(_QWORD *)(a1 + 8);
      }
      v27 /= *(int *)(v30 + 244);
      if (v22 + 2 == *(_DWORD *)(v30 + 432))
      {
        v49 = (*(uint64_t (**)(void))(v30 + 624))() + 1;
      }
      else
      {
        DWORD2(destination) = 0;
        *(_QWORD *)&destination = 0;
        CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v30 + 440), 12 * (v22 + 2), 0xCuLL, &destination);
        v49 = bswap32(destination);
      }
      v50 = *(_QWORD *)(a1 + 8);
      DWORD2(destination) = 0;
      *(_QWORD *)&destination = 0;
      CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v50 + 440), 12 * v47, 0xCuLL, &destination);
      v46 = 0;
      v26 = v49 - bswap32(destination);
      ++v22;
      v23 = v29;
      goto LABEL_43;
    }
    v30 = *(_QWORD *)(a1 + 8);
    if (v28 >= v29)
      goto LABEL_36;
    DWORD2(destination) = 0;
    *(_QWORD *)&destination = 0;
    CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v30 + 440), 12 * v22, 0xCuLL, &destination);
    v31 = bswap32(destination);
    v32 = CheckChunkNumber(*(_QWORD *)(a1 + 8), v31 - 1);
    if ((_DWORD)v32
      || (v33 = (v28 - v23) / v27, v32 = CheckChunkNumber(*(_QWORD *)(a1 + 8), v33 + v31 - 1), (_DWORD)v32))
    {
LABEL_65:
      v15 = v32;
      goto LABEL_64;
    }
    v34 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 616))();
    if (v34 >= v64)
      break;
LABEL_29:
    if ((int)(v33 + v31) < (*(int (**)(void))(*(_QWORD *)(a1 + 8) + 624))()
      && ((v37 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 616))(), v34 < v37) ? (v38 = v37 <= v64) : (v38 = 0), v38))
    {
      v46 = 0;
      v28 += v27;
      v61 = 1;
      v62 = v28;
    }
    else
    {
      v95 = 0;
      v39 = *(_OWORD *)(a1 + 176);
      v91 = *(_OWORD *)(a1 + 160);
      v92 = v39;
      v93 = *(_OWORD *)(a1 + 192);
      v94 = *(_QWORD *)(a1 + 208);
      v40 = *(_OWORD *)(a1 + 112);
      v87 = *(_OWORD *)(a1 + 96);
      v88 = v40;
      v41 = *(_OWORD *)(a1 + 144);
      v89 = *(_OWORD *)(a1 + 128);
      v90 = v41;
      v42 = *(_OWORD *)(a1 + 48);
      v83 = *(_OWORD *)(a1 + 32);
      v84 = v42;
      v43 = *(_OWORD *)(a1 + 80);
      v85 = *(_OWORD *)(a1 + 64);
      v86 = v43;
      v44 = *(_OWORD *)(a1 + 16);
      v45 = v28 + v27;
      destination = *(_OWORD *)a1;
      v82 = v44;
      MovieSampleAccessorStepCursor((uint64_t)&destination, (v28 + v27 + ~(_DWORD)v86), 0);
      if (MovieSampleAccessorGetSampleLocation((uint64_t)&destination, &lhs.value, (unint64_t)&v95, 0))
      {
        v46 = 1;
      }
      else
      {
        v46 = v95 + lhs.value > (unint64_t)v64;
        if (v95 + lhs.value <= (unint64_t)v64)
          v28 += v27;
      }
      if (v28 <= v63)
        v51 = v63;
      else
        v51 = v28;
      v61 = 1;
      v62 = v51;
      v28 = v45;
    }
LABEL_43:
    if (v46)
      goto LABEL_52;
  }
  v35 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  v36 = *(uint64_t (**)(uint64_t, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v36)
  {
    v15 = 4294954514;
LABEL_64:
    a2 = v60;
    goto LABEL_61;
  }
  v32 = v36(v35, v34, &rhs);
  if ((_DWORD)v32)
    goto LABEL_65;
  if (rhs.value)
  {
    v64 = rhs.value + v34;
    goto LABEL_29;
  }
LABEL_52:
  if (v61)
    v52 = v62;
  else
    v52 = v63;
  v53 = MovieSampleAccessorGetPTSTimeValue(a1);
  CMTimeMake(&v67, v53, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 232));
  v54 = MovieSampleAccessorStepCursor((uint64_t)v72, (v52 - *(_DWORD *)(a1 + 80)), 0);
  if ((_DWORD)v54 == -12840)
  {
    MovieSampleAccessorMoveToSampleAtPTS((uint64_t)v72, MEMORY[0x1E0CA2E30], 0, 0);
    v15 = v57;
    a2 = v60;
    if ((_DWORD)v57)
      goto LABEL_61;
    v58 = MovieSampleAccessorGetPTSTimeValue((uint64_t)v72);
    v55 = *((_QWORD *)&v73 + 1) + v58;
    v56 = *(_DWORD *)(*((_QWORD *)&v72[0] + 1) + 232);
  }
  else
  {
    v15 = v54;
    a2 = v60;
    if ((_DWORD)v54)
      goto LABEL_61;
    v55 = MovieSampleAccessorGetPTSTimeValue((uint64_t)v72);
    v56 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 232);
  }
  CMTimeMake(&v68, v55, v56);
LABEL_61:
  lhs = v68;
  rhs = v67;
  CMTimeSubtract((CMTime *)&destination, &lhs, &rhs);
  *(_OWORD *)a2 = destination;
  v25 = v82;
LABEL_62:
  *(_QWORD *)(a2 + 16) = v25;
  return v15;
}

double MovieTrackGetMediaDuration@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  int64_t *v5;
  CMTime v6;
  CMTime rhs;
  CMTime v8;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  CMTimeMake((CMTime *)a2, *(_QWORD *)(a1 + 224), *(_DWORD *)(a1 + 232));
  v5 = *(int64_t **)(a1 + 728);
  if (v5)
  {
    if (v5[7])
    {
      CMTimeMake(&rhs, *v5, *(_DWORD *)(a1 + 232));
      v6 = *(CMTime *)a2;
      CMTimeAdd(&v8, &v6, &rhs);
      result = *(double *)&v8.value;
      *(CMTime *)a2 = v8;
    }
  }
  return result;
}

uint64_t MovieSampleAccessorGetDependencyInfo(uint64_t a1, _BYTE *a2, char *a3, _BYTE *a4, _BYTE *a5, _DWORD *a6, BOOL *a7)
{
  BOOL *v7;
  _BYTE *v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t SampleFlags;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  OpaqueCMBlockBuffer *v19;
  OpaqueCMBlockBuffer *v20;
  int v22;
  signed int v23;
  uint64_t v24;
  signed int v25;
  char v26;
  int v27;
  signed int v28;
  int v29;
  uint64_t v30;
  OpaqueCMBlockBuffer *v31;
  int v32;
  signed int v33;
  uint64_t v34;
  signed int v35;
  char v36;
  int v37;
  signed int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int destination;

  v7 = a7;
  v9 = a4;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(v13 + 728);
  if (v14 && *(_QWORD *)(v14 + 56) && *(_DWORD *)(a1 + 80) > *(_DWORD *)(v13 + 288))
  {
    SampleFlags = FragmentCursorGetSampleFlags(a1);
    if (a2)
      *a2 = (SampleFlags & 0x10000) == 0;
    if (a3)
      *a3 = 0;
    if (a6)
      *a6 = 2;
    if (v7)
      *v7 = (SampleFlags & 0xC00000) == 0x800000;
    v16 = FragmentCursorGetSampleFlags(a1);
    if (v9 && a5)
    {
      v17 = v16;
      v18 = *(_QWORD *)(a1 + 200);
      v19 = *(OpaqueCMBlockBuffer **)(v18 + 96);
      if (!v19
        || CMBlockBufferCopyDataBytes(v19, (*(_DWORD *)(a1 + 80) - *(_DWORD *)(v18 + 32)), 1uLL, a5))
      {
        *a5 = (v17 >> 20) & 0x7F;
      }
      *v9 = 1;
    }
  }
  else
  {
    if (a2)
    {
      v20 = *(OpaqueCMBlockBuffer **)(v13 + 488);
      if (v20)
      {
        v22 = *(_DWORD *)(v13 + 480);
        if (v22)
        {
          v23 = *(_DWORD *)(a1 + 80);
          v24 = *(int *)(a1 + 152);
          destination = 0;
          CMBlockBufferCopyDataBytes(v20, 4 * v24, 4uLL, &destination);
          v25 = bswap32(destination);
          v26 = 1;
          if (v25 < v23)
            v27 = 1;
          else
            v27 = -1;
          if (v25 != v23)
          {
            v28 = v25;
            while (1)
            {
              v29 = *(_DWORD *)(a1 + 152);
              if (v25 >= v23)
              {
                v26 = 0;
                if (v28 < v23 || !v29)
                  break;
              }
              else
              {
                v26 = 0;
                if (v28 > v23 || v29 + 1 == v22)
                  break;
              }
              *(_DWORD *)(a1 + 152) = v29 + v27;
              destination = 0;
              CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v13 + 488), 4 * (v29 + v27), 4uLL, &destination);
              v28 = bswap32(destination);
              if (v28 == v23)
                goto LABEL_33;
            }
          }
        }
        else
        {
          v26 = 0;
        }
      }
      else
      {
LABEL_33:
        v26 = 1;
      }
      *a2 = v26;
      v9 = a4;
      v7 = a7;
    }
    if (a3)
    {
      v30 = *(_QWORD *)(a1 + 8);
      v31 = *(OpaqueCMBlockBuffer **)(v30 + 512);
      if (v31 && (v32 = *(_DWORD *)(v30 + 504)) != 0)
      {
        v33 = *(_DWORD *)(a1 + 80);
        v34 = *(int *)(a1 + 156);
        destination = 0;
        CMBlockBufferCopyDataBytes(v31, 4 * v34, 4uLL, &destination);
        v35 = bswap32(destination);
        v36 = 1;
        if (v35 < v33)
          v37 = 1;
        else
          v37 = -1;
        if (v35 != v33)
        {
          v38 = v35;
          do
          {
            v39 = *(_DWORD *)(a1 + 156);
            if (v35 >= v33)
            {
              v36 = 0;
              if (v38 < v33 || !v39)
                goto LABEL_53;
            }
            else
            {
              v36 = 0;
              if (v38 > v33 || v39 + 1 == v32)
                goto LABEL_53;
            }
            *(_DWORD *)(a1 + 156) = v39 + v37;
            destination = 0;
            CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v30 + 512), 4 * (v39 + v37), 4uLL, &destination);
            v38 = bswap32(destination);
          }
          while (v38 != v33);
          v36 = 1;
        }
      }
      else
      {
        v36 = 0;
      }
LABEL_53:
      *a3 = v36;
    }
    if (v9 && a5)
    {
      v40 = *(_QWORD *)(a1 + 8);
      v41 = *(_QWORD *)(v40 + 536);
      if (v41)
      {
        *a5 = MovieSampleTableGetSampleDependencyFlags(v40, *(_DWORD *)(a1 + 80) - 1);
        LOBYTE(v41) = 1;
      }
      *v9 = v41;
    }
    if (a6)
      *a6 = 2;
    if (v7)
    {
      v42 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)(v42 + 536))
        *v7 = (MovieSampleTableGetSampleDependencyFlags(v42, *(_DWORD *)(a1 + 80) - 1) & 8) != 0;
      else
        *v7 = 0;
    }
  }
  return 0;
}

uint64_t FragmentCursorGetSampleFlags(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;

  v1 = *(_DWORD *)(a1 + 80);
  v2 = *(_QWORD *)(a1 + 208);
  v3 = *(_DWORD *)(v2 + 16);
  if (v1 == v3 && *(_BYTE *)(v2 + 40))
  {
    v4 = *(_DWORD *)(v2 + 44);
  }
  else
  {
    v5 = *(unsigned int *)(v2 + 48);
    if ((v5 & 4) == 0)
      return *(unsigned int *)(*(_QWORD *)(a1 + 200) + 68);
    if (v1 < v3 || v1 >= *(_DWORD *)(v2 + 36) + v3)
    {
      FigSignalErrorAt();
      return 0;
    }
    v4 = *(_DWORD *)(v2 + 4 * kPerSampleInfo_SizeInInt32s[v5] * (int)(v1 - v3) + 4 * kPerSampleInfo_FlagsIndex[v5] + 52);
  }
  return bswap32(v4);
}

BOOL MovieSampleTableHaveSampleDependencyTable(uint64_t a1)
{
  return *(_QWORD *)(a1 + 536) != 0;
}

uint64_t MovieSampleTableGetSampleDependencyFlags(uint64_t a1, int a2)
{
  uint64_t result;
  unsigned __int8 destination;

  result = 0;
  destination = 0;
  if (*(_DWORD *)(a1 + 528) > a2)
  {
    CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 536), a2, 1uLL, &destination);
    return destination;
  }
  return result;
}

const __CFArray *MovieTrackGetNumSampleDescriptions(uint64_t a1)
{
  const __CFArray *result;

  result = *(const __CFArray **)(a1 + 56);
  if (result)
    return (const __CFArray *)CFArrayGetCount(result);
  return result;
}

_QWORD *MovieInformationClearChangeBits(_QWORD *result, int a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  result[5] = 0;
  if (a2)
  {
    v2 = result[38];
    if (v2 >= 1)
    {
      v3 = (uint64_t *)result[40];
      do
      {
        v4 = *v3++;
        *(_QWORD *)(v4 + 16) = 0;
        --v2;
      }
      while (v2);
    }
  }
  return result;
}

uint64_t MovieInformationGetTrackCount(uint64_t a1)
{
  return *(_QWORD *)(a1 + 304);
}

uint64_t MovieInformationFindTrackForTrackIndex(uint64_t a1, uint64_t a2)
{
  if (a2 < 0 || *(_QWORD *)(a1 + 304) <= a2)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * a2);
}

uint64_t MovieInformationGetChangeBits(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t MovieTrackFindOrAddSampleDescription(uint64_t a1, const void *a2, const void *a3, _DWORD *a4)
{
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v9;
  const __CFArray *v10;
  CFIndex FirstIndexOfValue;
  CFIndex i;
  const __CFArray *Count;
  _QWORD *v14;
  _QWORD *v15;
  CFTypeRef v16;
  int v17;
  CFIndex v18;
  _QWORD *ValueAtIndex;
  int v22;
  _QWORD *v23;
  CFRange v25;

  if (!*(_QWORD *)(a1 + 56))
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
    *(_QWORD *)(a1 + 56) = Mutable;
    if (!Mutable)
      return FigSignalErrorAt();
  }
  if (!*(_QWORD *)(a1 + 64))
  {
    v9 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
    *(_QWORD *)(a1 + 64) = v9;
    if (!v9)
      return FigSignalErrorAt();
  }
  v10 = *(const __CFArray **)(a1 + 48);
  if (!v10)
  {
    v10 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(a1 + 48) = v10;
    if (!v10)
      return FigSignalErrorAt();
  }
  v25.length = CFArrayGetCount(v10);
  v25.location = 0;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v10, v25, a2);
  for (i = 0; ; ++i)
  {
    Count = *(const __CFArray **)(a1 + 64);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (i >= (uint64_t)Count)
      break;
    CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 64), i);
    if (FigCFEqual())
    {
      if (FirstIndexOfValue != -1)
      {
        v18 = CFArrayGetCount(*(CFArrayRef *)(a1 + 56));
        while (v18-- >= 1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), v18);
          if (*ValueAtIndex == FirstIndexOfValue && ValueAtIndex[1] == i)
          {
            v22 = v18 + 1;
            if (a4)
              goto LABEL_32;
            return 0;
          }
        }
      }
      goto LABEL_28;
    }
  }
  v14 = malloc_type_malloc(0x18uLL, 0x1060040ABACF81FuLL);
  if (!v14)
    return FigSignalErrorAt();
  v15 = v14;
  v14[1] = 0;
  if (a3)
  {
    v16 = CFRetain(a3);
    v17 = 1970433056;
  }
  else
  {
    v17 = 0;
    v16 = 0;
  }
  v15[2] = v16;
  *(_DWORD *)v15 = v17;
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 64), v15);
  i = CFArrayGetCount(*(CFArrayRef *)(a1 + 64)) - 1;
LABEL_28:
  if (FirstIndexOfValue == -1)
  {
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 48), a2);
    FirstIndexOfValue = CFArrayGetCount(*(CFArrayRef *)(a1 + 48)) - 1;
    *(_QWORD *)(a1 + 16) |= 4uLL;
  }
  v23 = malloc_type_malloc(0x10uLL, 0x1000040451B5BE8uLL);
  if (!v23)
    return FigSignalErrorAt();
  *v23 = FirstIndexOfValue;
  v23[1] = i;
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 56), v23);
  v22 = CFArrayGetCount(*(CFArrayRef *)(a1 + 56));
  if (a4)
LABEL_32:
    *a4 = v22;
  return 0;
}

uint64_t MovieSampleAccessorGetFormatDescription(uint64_t a1, const void **a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  int v8;
  int v9;

  v8 = 0;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 728);
  if (v5 && *(_QWORD *)(v5 + 56) && *(_DWORD *)(a1 + 80) > *(_DWORD *)(v4 + 288))
  {
    v6 = *(_DWORD *)(*(_QWORD *)(a1 + 200) + 56);
    v8 = v6;
  }
  else
  {
    result = locateChunk(a1, &v9, &v8);
    if ((_DWORD)result)
      return result;
    v4 = *(_QWORD *)(a1 + 8);
    v6 = v8;
  }
  return GetFormatDescriptionForSampleDescriptionID(v4, v6, a2);
}

uint64_t GetFormatDescriptionForSampleDescriptionID(uint64_t a1, int a2, const void **a3)
{
  uint64_t SampleDescriptionInformationAtIndex;
  CFIndex idx;

  idx = -1;
  SampleDescriptionInformationAtIndex = MovieTrackGetSampleDescriptionInformationAtIndex(a1, a2 - 1, &idx, 0);
  if (!(_DWORD)SampleDescriptionInformationAtIndex)
    *a3 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), idx);
  return SampleDescriptionInformationAtIndex;
}

uint64_t MovieSampleAccessorGetRollValue(uint64_t a1, _WORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t Basic;
  unsigned int v8;
  const __CFData *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFDataRef theData;

  theData = 0;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 728);
  if (v5 && *(_QWORD *)(v5 + 56) && *(_DWORD *)(a1 + 80) > *(_DWORD *)(v4 + 288))
  {
    v6 = (uint64_t *)(*(_QWORD *)(a1 + 200) + 120);
    Basic = MovieSampleGroupTypeSpecMakeBasic(1919904876);
    v9 = (const __CFData *)FragmentCursorEnsureAccessorAndCopySampleGroupDescription(a1, v6, Basic, v8);
    v10 = 0;
    theData = v9;
  }
  else
  {
    v12 = (uint64_t *)(a1 + 16);
    v11 = *(_QWORD *)(a1 + 16);
    if (v11)
    {
      v10 = 0;
    }
    else
    {
      v14 = MovieSampleGroupTypeSpecMakeBasic(1919904876);
      v15 = *(_QWORD *)(v4 + 72);
      if (v15)
        v10 = MovieSampleGroupCollectionLookupAndRetainSampleGroup(v15, v14, v13);
      else
        v10 = 0;
      if (MovieSampleGroupAccessorCreate(v10, (uint64_t *)(a1 + 16)))
        goto LABEL_21;
      v11 = *v12;
    }
    if (MovieSampleGroupAccessorCopyDescriptionForSample(v11, *(unsigned int *)(a1 + 80), &theData))
      goto LABEL_21;
    v9 = theData;
  }
  if (v9 && CFDataGetLength(v9) == 2)
  {
    *a2 = bswap32(*(unsigned __int16 *)CFDataGetBytePtr(theData)) >> 16;
    v16 = 1;
    if (!v10)
      goto LABEL_18;
    goto LABEL_17;
  }
LABEL_21:
  v16 = 0;
  if (v10)
LABEL_17:
    CFRelease(v10);
LABEL_18:
  if (theData)
    CFRelease(theData);
  return v16;
}

uint64_t MovieSampleAccessorGetIndependentFramePrerollPacketCount(uint64_t a1, _WORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t Basic;
  unsigned int v8;
  const __CFData *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFDataRef theData;

  theData = 0;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 728);
  if (v5 && *(_QWORD *)(v5 + 56) && *(_DWORD *)(a1 + 80) > *(_DWORD *)(v4 + 288))
  {
    v6 = (uint64_t *)(*(_QWORD *)(a1 + 200) + 128);
    Basic = MovieSampleGroupTypeSpecMakeBasic(1886547820);
    v9 = (const __CFData *)FragmentCursorEnsureAccessorAndCopySampleGroupDescription(a1, v6, Basic, v8);
    v10 = 0;
    theData = v9;
  }
  else
  {
    v12 = (uint64_t *)(a1 + 24);
    v11 = *(_QWORD *)(a1 + 24);
    if (v11)
    {
      v10 = 0;
    }
    else
    {
      v14 = MovieSampleGroupTypeSpecMakeBasic(1886547820);
      v15 = *(_QWORD *)(v4 + 72);
      if (v15)
        v10 = MovieSampleGroupCollectionLookupAndRetainSampleGroup(v15, v14, v13);
      else
        v10 = 0;
      if (MovieSampleGroupAccessorCreate(v10, (uint64_t *)(a1 + 24)))
        goto LABEL_21;
      v11 = *v12;
    }
    if (MovieSampleGroupAccessorCopyDescriptionForSample(v11, *(unsigned int *)(a1 + 80), &theData))
      goto LABEL_21;
    v9 = theData;
  }
  if (v9 && CFDataGetLength(v9) == 2)
  {
    *a2 = bswap32(*(unsigned __int16 *)CFDataGetBytePtr(theData)) >> 16;
    v16 = 1;
    if (!v10)
      goto LABEL_18;
    goto LABEL_17;
  }
LABEL_21:
  v16 = 0;
  if (v10)
LABEL_17:
    CFRelease(v10);
LABEL_18:
  if (theData)
    CFRelease(theData);
  return v16;
}

BOOL MovieSampleAccessorCopySeamIdentifier(uint64_t a1, CFStringRef *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t Basic;
  unsigned int v8;
  const __CFData *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  const __CFAllocator *v16;
  const __CFUUID *v17;
  const __CFAllocator *v18;
  CFStringRef v19;
  _BOOL8 v20;
  CFDataRef theData;
  CFUUIDBytes v23;

  theData = 0;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 728);
  if (v5 && *(_QWORD *)(v5 + 56) && *(_DWORD *)(a1 + 80) > *(_DWORD *)(v4 + 288))
  {
    v6 = (uint64_t *)(*(_QWORD *)(a1 + 200) + 136);
    Basic = MovieSampleGroupTypeSpecMakeBasic(1936023917);
    v9 = (const __CFData *)FragmentCursorEnsureAccessorAndCopySampleGroupDescription(a1, v6, Basic, v8);
    v10 = 0;
    theData = v9;
  }
  else
  {
    v12 = (uint64_t *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 32);
    if (v11)
    {
      v10 = 0;
    }
    else
    {
      v14 = MovieSampleGroupTypeSpecMakeBasic(1936023917);
      v15 = *(_QWORD *)(v4 + 72);
      if (v15)
        v10 = MovieSampleGroupCollectionLookupAndRetainSampleGroup(v15, v14, v13);
      else
        v10 = 0;
      if (MovieSampleGroupAccessorCreate(v10, (uint64_t *)(a1 + 32)))
        goto LABEL_23;
      v11 = *v12;
    }
    if (MovieSampleGroupAccessorCopyDescriptionForSample(v11, *(unsigned int *)(a1 + 80), &theData))
      goto LABEL_23;
    v9 = theData;
  }
  if (v9 && CFDataGetLength(v9) == 16)
  {
    v16 = CFGetAllocator(theData);
    v23 = *(CFUUIDBytes *)CFDataGetBytePtr(theData);
    v17 = CFUUIDCreateFromUUIDBytes(v16, v23);
    v18 = CFGetAllocator(theData);
    v19 = CFUUIDCreateString(v18, v17);
    v20 = v19 != 0;
    *a2 = v19;
    if (!v10)
      goto LABEL_18;
    goto LABEL_17;
  }
LABEL_23:
  v20 = 0;
  v17 = 0;
  if (v10)
LABEL_17:
    CFRelease(v10);
LABEL_18:
  if (theData)
    CFRelease(theData);
  if (v17)
    CFRelease(v17);
  return v20;
}

uint64_t MovieSampleAccessorGetSyncValues(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t Basic;
  unsigned int v8;
  const __CFData *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFDataRef theData;

  theData = 0;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 728);
  if (v5 && *(_QWORD *)(v5 + 56) && *(_DWORD *)(a1 + 80) > *(_DWORD *)(v4 + 288))
  {
    v6 = (uint64_t *)(*(_QWORD *)(a1 + 200) + 168);
    Basic = MovieSampleGroupTypeSpecMakeBasic(1937337955);
    v9 = (const __CFData *)FragmentCursorEnsureAccessorAndCopySampleGroupDescription(a1, v6, Basic, v8);
    v10 = 0;
    theData = v9;
  }
  else
  {
    v12 = (uint64_t *)(a1 + 40);
    v11 = *(_QWORD *)(a1 + 40);
    if (v11)
    {
      v10 = 0;
    }
    else
    {
      v14 = MovieSampleGroupTypeSpecMakeBasic(1937337955);
      v15 = *(_QWORD *)(v4 + 72);
      if (v15)
        v10 = MovieSampleGroupCollectionLookupAndRetainSampleGroup(v15, v14, v13);
      else
        v10 = 0;
      if (MovieSampleGroupAccessorCreate(v10, (uint64_t *)(a1 + 40)))
        goto LABEL_21;
      v11 = *v12;
    }
    if (MovieSampleGroupAccessorCopyDescriptionForSample(v11, *(unsigned int *)(a1 + 80), &theData))
      goto LABEL_21;
    v9 = theData;
  }
  if (v9 && CFDataGetLength(v9) == 1)
  {
    *a2 = *CFDataGetBytePtr(theData) & 0x3F;
    v16 = 1;
    if (!v10)
      goto LABEL_18;
    goto LABEL_17;
  }
LABEL_21:
  v16 = 0;
  if (v10)
LABEL_17:
    CFRelease(v10);
LABEL_18:
  if (theData)
    CFRelease(theData);
  return v16;
}

uint64_t MovieSampleAccessorGetTsclValues(uint64_t a1, UInt8 *a2, _BYTE *a3, BOOL *a4, _BYTE *a5, _DWORD *a6, uint64_t a7, _BYTE *a8, _BYTE *a9, _BYTE *a10, _BYTE *a11, _BYTE *a12)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t Basic;
  unsigned int v24;
  const __CFData *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  const UInt8 *BytePtr;
  int v33;
  uint64_t v34;
  CFDataRef theData;

  theData = 0;
  v20 = *(_QWORD *)(a1 + 8);
  v21 = *(_QWORD *)(v20 + 728);
  if (v21 && *(_QWORD *)(v21 + 56) && *(_DWORD *)(a1 + 80) > *(_DWORD *)(v20 + 288))
  {
    v22 = (uint64_t *)(*(_QWORD *)(a1 + 200) + 144);
    Basic = MovieSampleGroupTypeSpecMakeBasic(1953719148);
    v25 = (const __CFData *)FragmentCursorEnsureAccessorAndCopySampleGroupDescription(a1, v22, Basic, v24);
    v26 = 0;
    theData = v25;
  }
  else
  {
    v28 = (uint64_t *)(a1 + 48);
    v27 = *(_QWORD *)(a1 + 48);
    if (v27)
    {
      v26 = 0;
    }
    else
    {
      v30 = MovieSampleGroupTypeSpecMakeBasic(1953719148);
      v31 = *(_QWORD *)(v20 + 72);
      if (v31)
        v26 = MovieSampleGroupCollectionLookupAndRetainSampleGroup(v31, v30, v29);
      else
        v26 = 0;
      if (MovieSampleGroupAccessorCreate(v26, (uint64_t *)(a1 + 48)))
        goto LABEL_21;
      v27 = *v28;
    }
    if (MovieSampleGroupAccessorCopyDescriptionForSample(v27, *(unsigned int *)(a1 + 80), &theData))
      goto LABEL_21;
    v25 = theData;
  }
  if (v25 && CFDataGetLength(v25) == 20)
  {
    BytePtr = CFDataGetBytePtr(theData);
    *a2 = *BytePtr;
    *a3 = BytePtr[1] >> 6;
    *a4 = (BytePtr[1] & 0x20) != 0;
    *a5 = BytePtr[1] & 0x1F;
    *a6 = *(_DWORD *)(BytePtr + 2);
    v33 = *(_DWORD *)(BytePtr + 6);
    *(_WORD *)(a7 + 4) = *((_WORD *)BytePtr + 5);
    *(_DWORD *)a7 = v33;
    *a8 = BytePtr[12];
    *a9 = BytePtr[13];
    *a10 = BytePtr[15];
    *a11 = BytePtr[17];
    *a12 = BytePtr[18];
    v34 = 1;
    if (!v26)
      goto LABEL_18;
    goto LABEL_17;
  }
LABEL_21:
  v34 = 0;
  if (v26)
LABEL_17:
    CFRelease(v26);
LABEL_18:
  if (theData)
    CFRelease(theData);
  return v34;
}

BOOL MovieSampleAccessorIsInTsas(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t Basic;
  unsigned int v6;
  const __CFData *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  CFDataRef theData;

  theData = 0;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 728);
  if (v3 && *(_QWORD *)(v3 + 56) && *(_DWORD *)(a1 + 80) > *(_DWORD *)(v2 + 288))
  {
    v4 = (uint64_t *)(*(_QWORD *)(a1 + 200) + 152);
    Basic = MovieSampleGroupTypeSpecMakeBasic(1953718643);
    v7 = (const __CFData *)FragmentCursorEnsureAccessorAndCopySampleGroupDescription(a1, v4, Basic, v6);
    v8 = 0;
    theData = v7;
  }
  else
  {
    v10 = (uint64_t *)(a1 + 56);
    v9 = *(_QWORD *)(a1 + 56);
    if (v9)
    {
      v8 = 0;
    }
    else
    {
      v12 = MovieSampleGroupTypeSpecMakeBasic(1953718643);
      v13 = *(_QWORD *)(v2 + 72);
      if (v13)
        v8 = MovieSampleGroupCollectionLookupAndRetainSampleGroup(v13, v12, v11);
      else
        v8 = 0;
      if (MovieSampleGroupAccessorCreate(v8, (uint64_t *)(a1 + 56)))
        goto LABEL_20;
      v9 = *v10;
    }
    if (MovieSampleGroupAccessorCopyDescriptionForSample(v9, *(unsigned int *)(a1 + 80), &theData))
      goto LABEL_20;
    v7 = theData;
  }
  if (v7)
  {
    v14 = CFDataGetLength(v7) == 0;
    if (!v8)
      goto LABEL_17;
    goto LABEL_16;
  }
LABEL_20:
  v14 = 0;
  if (v8)
LABEL_16:
    CFRelease(v8);
LABEL_17:
  if (theData)
    CFRelease(theData);
  return v14;
}

BOOL MovieSampleAccessorIsInStsa(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t Basic;
  unsigned int v6;
  const __CFData *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  CFDataRef theData;

  theData = 0;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 728);
  if (v3 && *(_QWORD *)(v3 + 56) && *(_DWORD *)(a1 + 80) > *(_DWORD *)(v2 + 288))
  {
    v4 = (uint64_t *)(*(_QWORD *)(a1 + 200) + 160);
    Basic = MovieSampleGroupTypeSpecMakeBasic(1937011553);
    v7 = (const __CFData *)FragmentCursorEnsureAccessorAndCopySampleGroupDescription(a1, v4, Basic, v6);
    v8 = 0;
    theData = v7;
  }
  else
  {
    v10 = (uint64_t *)(a1 + 64);
    v9 = *(_QWORD *)(a1 + 64);
    if (v9)
    {
      v8 = 0;
    }
    else
    {
      v12 = MovieSampleGroupTypeSpecMakeBasic(1937011553);
      v13 = *(_QWORD *)(v2 + 72);
      if (v13)
        v8 = MovieSampleGroupCollectionLookupAndRetainSampleGroup(v13, v12, v11);
      else
        v8 = 0;
      if (MovieSampleGroupAccessorCreate(v8, (uint64_t *)(a1 + 64)))
        goto LABEL_20;
      v9 = *v10;
    }
    if (MovieSampleGroupAccessorCopyDescriptionForSample(v9, *(unsigned int *)(a1 + 80), &theData))
      goto LABEL_20;
    v7 = theData;
  }
  if (v7)
  {
    v14 = CFDataGetLength(v7) == 0;
    if (!v8)
      goto LABEL_17;
    goto LABEL_16;
  }
LABEL_20:
  v14 = 0;
  if (v8)
LABEL_16:
    CFRelease(v8);
LABEL_17:
  if (theData)
    CFRelease(theData);
  return v14;
}

uint64_t MovieSampleAccessorCreateSampleGroupDataDictionary(const __CFAllocator *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  uint64_t v6;
  uint64_t v7;
  const __CFDictionary *v8;
  CFMutableDictionaryRef Mutable;
  CFIndex Count;
  CFMutableDictionaryRef v11;
  CFMutableDictionaryRef v12;
  _QWORD v14[2];

  *a3 = 0;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(v6 + 728);
  if (v7 && *(_QWORD *)(v7 + 56) && *(_DWORD *)(a2 + 80) > *(_DWORD *)(v6 + 288))
    return FigSignalErrorAt();
  v8 = *(const __CFDictionary **)(a2 + 72);
  if (!v8)
  {
    if (!MovieSampleGroupCollectionGetCount(*(_QWORD *)(v6 + 72)))
      return 0;
    Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *(_QWORD *)(a2 + 72) = Mutable;
    if (!Mutable)
      return FigSignalErrorAt();
    MovieSampleGroupCollectionApplyFunction(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 72), (uint64_t)AllSampleGroupCollectionApplierFunction, (uint64_t)Mutable);
    v8 = *(const __CFDictionary **)(a2 + 72);
    if (!v8)
      goto LABEL_11;
  }
  Count = CFDictionaryGetCount(v8);
  if (!Count)
  {
LABEL_11:
    v12 = 0;
    goto LABEL_12;
  }
  v14[0] = 0;
  v11 = CFDictionaryCreateMutable(a1, Count, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v11)
  {
    v12 = v11;
    LODWORD(v14[0]) = *(_DWORD *)(a2 + 80);
    v14[1] = v11;
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(a2 + 72), (CFDictionaryApplierFunction)CopySampleGroupAccessorDataApplierFunction, v14);
LABEL_12:
    *a3 = v12;
    return 0;
  }
  return FigSignalErrorAt();
}

void AllSampleGroupCollectionApplierFunction(_QWORD *a1, __CFDictionary *a2)
{
  void *key;
  void *value;

  key = 0;
  value = 0;
  MovieSampleGroupAccessorCreate(a1, (uint64_t *)&value);
  if (value)
  {
    MovieSampleGroupCopyGroupTypeKeyString((uint64_t)a1, &key);
    if (key)
      CFDictionarySetValue(a2, key, value);
    else
      FigSignalErrorAt();
  }
  if (key)
    CFRelease(key);
  if (value)
    CFRelease(value);
}

void CopySampleGroupAccessorDataApplierFunction(const void *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  void *value;

  value = 0;
  MovieSampleGroupAccessorCopyDescriptionForSample(a2, *(unsigned int *)a3, &value);
  if (value)
  {
    CFDictionarySetValue(a3[1], a1, value);
    CFRelease(value);
  }
}

uint64_t MovieSampleAccessorCreateSampleDependencyAttributeDictionary(CFAllocatorRef allocator, uint64_t a2, __CFDictionary **a3)
{
  uint64_t v6;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v8;
  const void **v9;
  char v10;
  const void **v11;
  const void **v12;
  const void **v13;
  const void **v14;
  const void **v15;
  const opaqueCMFormatDescription *v16;
  __CFDictionary *v17;
  CFDataRef v18;
  CFDataRef v19;
  uint64_t result;
  uint64_t v21;
  UInt8 v22[8];
  __int16 v23;
  CMFormatDescriptionRef desc;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  UInt8 bytes[4];
  __int16 v32;
  __int16 v33;
  __int16 v34;
  __int16 v35;

  v6 = *(_QWORD *)(a2 + 8);
  if (*(_DWORD *)(v6 + 24) == 1936684398 && !*(_QWORD *)(v6 + 536))
  {
    desc = 0;
    MovieSampleAccessorGetFormatDescription(a2, (const void **)&desc);
    if (FigAudioFormatDescriptionEmploysDependentPackets()
      || (v21 = *(_QWORD *)(a2 + 8), *(_DWORD *)(v21 + 24) == 1936684398)
      && (*(_QWORD *)(v21 + 488) || MovieTrackHasIndependentFramePrerollPacketCount(v21)))
    {
      *(_QWORD *)v22 = 0;
      *(_WORD *)bytes = 0;
      LOBYTE(v23) = 0;
      MovieSampleAccessorGetDependencyInfo(a2, &v23, 0, 0, 0, 0, 0);
      if (!(_BYTE)v23)
        MovieSampleAccessorGetIndependentFramePrerollPacketCount(a2, bytes);
      result = FigPacketDependencyInfoCopyAsSampleDependencyAttributeDictionary();
      *a3 = *(__CFDictionary **)v22;
    }
    else
    {
      result = 0;
      *a3 = 0;
    }
  }
  else
  {
    v35 = 0;
    v33 = 0;
    v32 = 0;
    *(_DWORD *)bytes = 0;
    *(_WORD *)&v22[4] = 0;
    *(_DWORD *)v22 = 0;
    v30 = 0;
    v25 = 0;
    Mutable = CFDictionaryCreateMutable(allocator, 8, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v8 = Mutable;
      v34 = 0;
      MovieSampleAccessorGetDependencyInfo(a2, (_BYTE *)&v34 + 1, (char *)&v34, &v35, (_BYTE *)&v35 + 1, 0, 0);
      v9 = (const void **)MEMORY[0x1E0C9AE50];
      if (!HIBYTE(v34))
        CFDictionarySetValue(v8, (const void *)*MEMORY[0x1E0CA2620], (const void *)*MEMORY[0x1E0C9AE50]);
      if ((_BYTE)v34)
        CFDictionarySetValue(v8, (const void *)*MEMORY[0x1E0CA2628], *v9);
      if ((_BYTE)v35)
      {
        v10 = HIBYTE(v35);
        v11 = (const void **)MEMORY[0x1E0C9AE40];
        if ((v35 & 0xC00) != 0 && (HIBYTE(v35) & 0xC) != 0xC)
        {
          if ((v35 & 0x400) != 0)
            v12 = v9;
          else
            v12 = (const void **)MEMORY[0x1E0C9AE40];
          CFDictionarySetValue(v8, (const void *)*MEMORY[0x1E0CA2618], *v12);
          v10 = HIBYTE(v35);
        }
        if ((v10 & 0x30) != 0 && (v10 & 0x30) != 0x30)
        {
          if ((v10 & 0x10) != 0)
            v13 = v9;
          else
            v13 = v11;
          CFDictionarySetValue(v8, (const void *)*MEMORY[0x1E0CA25C8], *v13);
          v10 = HIBYTE(v35);
        }
        if ((v10 & 3) != 0 && (v10 & 3) != 3)
        {
          if ((v10 & 1) != 0)
            v14 = v9;
          else
            v14 = v11;
          CFDictionarySetValue(v8, (const void *)*MEMORY[0x1E0CA2610], *v14);
          v10 = HIBYTE(v35);
        }
        if ((v10 & 0x40) != 0)
          v15 = v9;
        else
          v15 = v11;
        CFDictionarySetValue(v8, (const void *)*MEMORY[0x1E0CA25E0], *v15);
      }
      desc = 0;
      MovieSampleAccessorGetFormatDescription(a2, (const void **)&desc);
      v16 = desc;
      CMFormatDescriptionGetMediaSubType(desc);
      if (MovieSampleAccessorGetTsclValues(a2, (UInt8 *)&v33 + 1, &v33, (BOOL *)&v32 + 1, &v32, bytes, (uint64_t)v22, &v30, &v29, &v28, &v27, &v26))
      {
        v17 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v18 = CFDataCreate(allocator, bytes, 4);
        v19 = CFDataCreate(allocator, v22, 6);
        FigCFDictionarySetInt();
        FigCFDictionarySetInt();
        FigCFDictionarySetInt();
        FigCFDictionarySetInt();
        CFDictionarySetValue(v17, (const void *)*MEMORY[0x1E0CA2390], v18);
        CFDictionarySetValue(v17, (const void *)*MEMORY[0x1E0CA2380], v19);
        FigCFDictionarySetInt();
        CFDictionarySetValue(v8, (const void *)*MEMORY[0x1E0CA2600], v17);
      }
      else
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
      }
      if (MovieSampleAccessorGetSyncValues(a2, &v25))
        FigCFDictionarySetInt();
      if (MovieSampleAccessorIsInTsas(a2))
        CFDictionarySetValue(v8, (const void *)*MEMORY[0x1E0CA2608], *v9);
      if (MovieSampleAccessorIsInStsa(a2))
        CFDictionarySetValue(v8, (const void *)*MEMORY[0x1E0CA25F0], *v9);
      if (v16)
      {
        if (CMFormatDescriptionGetMediaType(v16) == 1936684398)
        {
          if (FigAudioFormatDescriptionEmploysDependentPackets())
          {
            v23 = 0;
            if (HIBYTE(v34) || MovieSampleAccessorGetIndependentFramePrerollPacketCount(a2, &v23))
              FigCFDictionarySetInt();
          }
        }
      }
      if (!CFDictionaryGetCount(v8))
      {
        CFRelease(v8);
        v8 = 0;
      }
      *a3 = v8;
      if (v17)
        CFRelease(v17);
      if (v18)
        CFRelease(v18);
      if (v19)
        CFRelease(v19);
      return 0;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t MovieSampleAccessorCopyCryptorIV(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  const void *ValueAtIndex;
  CFArrayRef theArray;

  theArray = 0;
  if (!a2)
    return 0;
  v3 = MovieSampleAccessorCopyCryptorIVArray(a1, 1, &theArray);
  if ((_DWORD)v3)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
    *a2 = CFRetain(ValueAtIndex);
    CFRelease(theArray);
  }
  return v3;
}

uint64_t MovieSampleAccessorCopyCryptorIVArray(uint64_t a1, CFIndex a2, CFArrayRef *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  const __CFArray *v8;
  CFIndex Count;
  uint64_t v11;
  CFIndex v12;
  const __CFAllocator *v14;
  __CFArray *Mutable;
  __CFArray *v16;
  const __CFAllocator *v17;
  CFArrayRef Copy;
  CFRange v19;

  v3 = 0;
  if (a2 >= 1 && a3)
  {
    v6 = *(_QWORD *)(a1 + 200);
    if (!v6)
      return 0;
    v7 = *(_QWORD *)(v6 + 88);
    if (!v7)
      return 0;
    v8 = *(const __CFArray **)(v7 + 24);
    if (!v8)
      return 0;
    Count = CFArrayGetCount(v8);
    v11 = *(_QWORD *)(a1 + 200);
    v12 = (*(_DWORD *)(a1 + 80) - *(_DWORD *)(v11 + 32));
    if (v12 + a2 > Count)
      return 0;
    v14 = CFGetAllocator(*(CFTypeRef *)(*(_QWORD *)(v11 + 88) + 24));
    Mutable = CFArrayCreateMutable(v14, a2, MEMORY[0x1E0C9B378]);
    if (!Mutable)
    {
      FigSignalErrorAt();
      return 0;
    }
    v16 = Mutable;
    v19.location = v12;
    v19.length = a2;
    CFArrayAppendArray(Mutable, *(CFArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 88) + 24), v19);
    v17 = CFGetAllocator(v16);
    Copy = CFArrayCreateCopy(v17, v16);
    *a3 = Copy;
    if (Copy)
    {
      v3 = 1;
    }
    else
    {
      FigSignalErrorAt();
      v3 = 0;
    }
    CFRelease(v16);
  }
  return v3;
}

uint64_t MovieSampleAccessorCopyCryptorSubsampleAuxData(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  const void *ValueAtIndex;
  CFArrayRef theArray;

  theArray = 0;
  if (!a2)
    return 0;
  v3 = MovieSampleAccessorCopyCryptorSubsampleAuxDataArray(a1, 1, &theArray);
  if ((_DWORD)v3)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
    *a2 = CFRetain(ValueAtIndex);
    CFRelease(theArray);
  }
  return v3;
}

uint64_t MovieSampleAccessorCopyCryptorSubsampleAuxDataArray(uint64_t a1, CFIndex a2, CFArrayRef *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  const __CFArray *v8;
  CFIndex Count;
  uint64_t v11;
  CFIndex v12;
  const __CFAllocator *v14;
  __CFArray *Mutable;
  __CFArray *v16;
  const __CFAllocator *v17;
  CFArrayRef Copy;
  CFRange v19;

  v3 = 0;
  if (a2 >= 1 && a3)
  {
    v6 = *(_QWORD *)(a1 + 200);
    if (!v6)
      return 0;
    v7 = *(_QWORD *)(v6 + 88);
    if (!v7)
      return 0;
    v8 = *(const __CFArray **)(v7 + 32);
    if (!v8)
      return 0;
    Count = CFArrayGetCount(v8);
    v11 = *(_QWORD *)(a1 + 200);
    v12 = (*(_DWORD *)(a1 + 80) - *(_DWORD *)(v11 + 32));
    if (v12 + a2 > Count)
      return 0;
    v14 = CFGetAllocator(*(CFTypeRef *)(*(_QWORD *)(v11 + 88) + 32));
    Mutable = CFArrayCreateMutable(v14, a2, MEMORY[0x1E0C9B378]);
    if (!Mutable)
    {
      FigSignalErrorAt();
      return 0;
    }
    v16 = Mutable;
    v19.location = v12;
    v19.length = a2;
    CFArrayAppendArray(Mutable, *(CFArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 88) + 32), v19);
    v17 = CFGetAllocator(v16);
    Copy = CFArrayCreateCopy(v17, v16);
    *a3 = Copy;
    if (Copy)
    {
      v3 = 1;
    }
    else
    {
      FigSignalErrorAt();
      v3 = 0;
    }
    CFRelease(v16);
  }
  return v3;
}

uint64_t MovieTrackAddSampleGroupDescriptionArray(CFMutableDictionaryRef *cf, const void *a2)
{
  const __CFAllocator *v4;
  CFMutableDictionaryRef Mutable;
  uint64_t result;
  void *key;

  LODWORD(key) = 0;
  if (!cf[10])
  {
    v4 = CFGetAllocator(cf);
    Mutable = CFDictionaryCreateMutable(v4, 0, 0, MEMORY[0x1E0C9B3A0]);
    cf[10] = Mutable;
    if (!Mutable)
      return FigSignalErrorAt();
  }
  result = MovieSampleGroupDescriptionArrayCopyInfo((uint64_t)a2, &key, 0, 0, 0, 0);
  if (!(_DWORD)result)
  {
    if (CFDictionaryGetValue(cf[10], (const void *)(int)key))
    {
      return FigSignalErrorAt();
    }
    else
    {
      CFDictionarySetValue(cf[10], (const void *)(int)key, a2);
      return 0;
    }
  }
  return result;
}

uint64_t MovieTrackCopySampleGroupDescriptionArray(uint64_t a1, int a2, const __CFDictionary **a3)
{
  const __CFDictionary *Value;

  Value = *(const __CFDictionary **)(a1 + 80);
  if (Value)
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(Value, (const void *)a2);
    if (Value)
      Value = (const __CFDictionary *)CFRetain(Value);
  }
  *a3 = Value;
  return 0;
}

uint64_t MovieTrackAddSampleGroup(uint64_t *cf, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  const __CFAllocator *v6;
  uint64_t result;

  v5 = cf + 9;
  v4 = cf[9];
  if (!v4)
  {
    v6 = CFGetAllocator(cf);
    result = MovieSampleGroupCollectionCreate(v6, v5);
    if ((_DWORD)result)
      return result;
    v4 = *v5;
  }
  return MovieSampleGroupCollectionAddSampleGroup(v4, a2);
}

uint64_t MovieTrackAddAndRetainSampleGroup(_QWORD *a1, unint64_t a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v8;
  CFTypeRef v9;
  uint64_t v10;
  uint64_t v11;
  const __CFAllocator *v12;
  uint64_t v13;
  CFTypeRef v15;
  CFTypeRef cf;

  v15 = 0;
  v8 = a1[9];
  if (v8)
  {
    v9 = MovieSampleGroupCollectionLookupAndRetainSampleGroup(v8, a2, a3);
    cf = v9;
    if (v9)
    {
      if (!a4)
      {
        v10 = 0;
        goto LABEL_14;
      }
      goto LABEL_12;
    }
  }
  else
  {
    cf = 0;
  }
  v11 = MovieTrackAddAndRetainSampleGroupDescriptionArray(a1, a2, &v15);
  if ((_DWORD)v11
    || (v12 = CFGetAllocator(a1), v11 = MovieSampleGroupCreate(v12, a2, a3, (uint64_t *)&cf), (_DWORD)v11)
    || (v11 = MovieSampleGroupSetDescriptionArray((uint64_t)cf, v15), (_DWORD)v11))
  {
    v10 = v11;
  }
  else
  {
    v13 = MovieTrackAddSampleGroup(a1, (uint64_t)cf);
    v10 = v13;
    if (a4 && !(_DWORD)v13)
    {
      v9 = cf;
      if (!cf)
      {
LABEL_13:
        v10 = 0;
        *a4 = v9;
        goto LABEL_14;
      }
LABEL_12:
      v9 = CFRetain(v9);
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v15)
    CFRelease(v15);
  if (cf)
    CFRelease(cf);
  return v10;
}

uint64_t MovieTrackRemoveSampleGroupInfoForGroupingType(uint64_t a1, int a2)
{
  uint64_t v4;
  __CFDictionary *v5;

  v4 = *(_QWORD *)(a1 + 72);
  if (v4)
    MovieSampleGroupCollectionRemoveAllGroupsWithGroupingType(v4, a2);
  v5 = *(__CFDictionary **)(a1 + 80);
  if (v5)
    CFDictionaryRemoveValue(v5, (const void *)a2);
  return 0;
}

uint64_t MovieTrackRemoveAllSampleGroups(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 72);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 72) = 0;
  }
  v3 = *(const void **)(a1 + 80);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 80) = 0;
  }
  return 0;
}

uint64_t MovieTrackCopySampleGroupArray(uint64_t a1, CFArrayRef *a2)
{
  uint64_t v3;
  CFArrayRef v4;

  v3 = *(_QWORD *)(a1 + 72);
  if (v3)
    v4 = MovieSampleGroupCollectionCopySampleGroupArray((const __CFAllocator *)*MEMORY[0x1E0C9AE00], v3);
  else
    v4 = 0;
  *a2 = v4;
  return 0;
}

uint64_t MovieTrackSetSampleOverrides(uint64_t a1, int a2, int a3)
{
  BOOL v3;
  char v4;

  *(_DWORD *)(a1 + 244) = a3;
  *(_DWORD *)(a1 + 248) = a2;
  if (a2)
    v3 = a3 == 0;
  else
    v3 = 1;
  v4 = !v3;
  *(_BYTE *)(a1 + 240) = v4;
  return 0;
}

uint64_t MovieTrackGetSampleOverrides(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (a2)
    *a2 = *(_DWORD *)(a1 + 248);
  if (a3)
    *a3 = *(_DWORD *)(a1 + 244);
  return *(unsigned __int8 *)(a1 + 240);
}

uint64_t MovieTrackSetCleanApertureDimensions(uint64_t a1, float a2, float a3)
{
  *(_BYTE *)(a1 + 252) = 1;
  *(float *)(a1 + 256) = a2;
  *(float *)(a1 + 260) = a3;
  *(_QWORD *)(a1 + 16) |= 0x200uLL;
  return 0;
}

uint64_t MovieTrackSetProductionApertureDimensions(uint64_t a1, float a2, float a3)
{
  *(_BYTE *)(a1 + 264) = 1;
  *(float *)(a1 + 268) = a2;
  *(float *)(a1 + 272) = a3;
  *(_QWORD *)(a1 + 16) |= 0x4000uLL;
  return 0;
}

uint64_t MovieTrackSetEncodedPixelsDimensions(uint64_t a1, float a2, float a3)
{
  *(_BYTE *)(a1 + 276) = 1;
  *(float *)(a1 + 280) = a2;
  *(float *)(a1 + 284) = a3;
  *(_QWORD *)(a1 + 16) |= 0x8000uLL;
  return 0;
}

uint64_t MovieTrackGetLoadSettings(uint64_t a1, _OWORD *a2)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 882);
  if (a2)
  {
    if ((_DWORD)result)
    {
      *a2 = *(_OWORD *)(a1 + 866);
      return *(unsigned __int8 *)(a1 + 882);
    }
  }
  return result;
}

uint64_t MovieTrackSetLoadSettings(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)(a1 + 882) = 1;
  *(_QWORD *)(a1 + 866) = a2;
  *(_QWORD *)(a1 + 874) = a3;
  *(_QWORD *)(a1 + 16) |= 0x40000uLL;
  return 0;
}

uint64_t MovieTrackSetExtendedLanguageTagString(uint64_t a1, CFTypeRef cf)
{
  const void *v3;

  v3 = *(const void **)(a1 + 848);
  *(_QWORD *)(a1 + 848) = cf;
  if (cf)
    CFRetain(cf);
  if (v3)
    CFRelease(v3);
  *(_QWORD *)(a1 + 16) |= 0x100uLL;
  return 0;
}

uint64_t MovieTrackSetExcludeFromAutoSelection(uint64_t a1, char a2)
{
  *(_BYTE *)(a1 + 885) = a2;
  *(_QWORD *)(a1 + 16) |= 0x800uLL;
  return 0;
}

uint64_t MovieTrackSetEnabled(uint64_t a1, char a2)
{
  *(_BYTE *)(a1 + 200) = a2;
  *(_QWORD *)(a1 + 16) |= 0x40uLL;
  return 0;
}

uint64_t MovieTrackSetDurationIsAll1s(uint64_t a1, char a2)
{
  *(_BYTE *)(a1 + 201) = a2;
  return 0;
}

uint64_t MovieTrackUsesAudibleDRM(uint64_t a1)
{
  const __CFArray *v1;
  const __CFArray *v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex v5;
  uint64_t v6;

  v1 = MovieTrackCopyFormatDescriptionArray(a1);
  if (!v1)
    return 0;
  v2 = v1;
  Count = CFArrayGetCount(v1);
  if (Count < 1)
  {
LABEL_6:
    v6 = 0;
  }
  else
  {
    v4 = Count;
    v5 = 0;
    while (1)
    {
      CFArrayGetValueAtIndex(v2, v5);
      if (FigAudioFormatDescriptionUsesAudibleDRM())
        break;
      if (v4 == ++v5)
        goto LABEL_6;
    }
    v6 = 1;
  }
  CFRelease(v2);
  return v6;
}

CFArrayRef MovieTrackCopyFormatDescriptionArray(uint64_t a1)
{
  CFArrayRef result;
  const __CFAllocator *v3;

  result = *(CFArrayRef *)(a1 + 48);
  if (result)
  {
    v3 = CFGetAllocator(result);
    return CFArrayCreateCopy(v3, *(CFArrayRef *)(a1 + 48));
  }
  return result;
}

uint64_t MovieTrackAudibleContentIsAuthorized(uint64_t a1, uint64_t a2)
{
  const __CFArray *v2;
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  uint64_t v7;

  if (!*(_BYTE *)(a1 + 296))
    return 0;
  v2 = MovieTrackCopyFormatDescriptionArray(a2);
  if (!v2)
    return 0;
  v3 = v2;
  Count = CFArrayGetCount(v2);
  if (Count < 1)
  {
LABEL_7:
    v7 = 0;
  }
  else
  {
    v5 = Count;
    v6 = 0;
    while (1)
    {
      CFArrayGetValueAtIndex(v3, v6);
      if (FigAudioFormatDescriptionAudibleContentIsAuthorized())
        break;
      if (v5 == ++v6)
        goto LABEL_7;
    }
    v7 = 1;
  }
  CFRelease(v3);
  return v7;
}

uint64_t MovieTrackEstablishFirstFragmentBaseDecodeTime(int a1, uint64_t a2, int64_t value)
{
  CMTime *v3;
  CMTime v5;

  if ((*(_BYTE *)(a2 + 756) & 1) == 0)
  {
    v3 = (CMTime *)(a2 + 744);
    CMTimeMake(&v5, value, *(_DWORD *)(a2 + 232));
    *v3 = v5;
  }
  return 0;
}

uint64_t MovieTrackGetDisplayTimeRange(_QWORD *a1, uint64_t a2, CMTime *a3, CMTime *a4)
{
  uint64_t v8;
  uint64_t v9;
  const void **v10;
  uint64_t v11;
  uint64_t v12;
  int64_t PTSTimeValue;
  uint64_t SampleInDecodeOrder;
  uint64_t v15;
  int64_t v16;
  CMTime v18;
  CMTime lhs;
  CMTime v20;
  const void **v21;
  CMTime v22;
  CMTime v23;

  memset(&v23, 0, sizeof(v23));
  v21 = 0;
  v8 = MoovAssureSampleTableParsed(a1, a2);
  if ((_DWORD)v8)
  {
    v12 = v8;
    v10 = 0;
    goto LABEL_13;
  }
  v9 = MovieSampleAccessorCreate(a1, a2, &v21);
  if ((_DWORD)v9)
  {
    v12 = v9;
    v10 = v21;
    goto LABEL_13;
  }
  v10 = v21;
  if (!a3)
    goto LABEL_7;
  do
    MovieSampleAccessorStepBackPTS((uint64_t)v10);
  while (!(_DWORD)v11);
  v12 = v11;
  if ((_DWORD)v11 == -12840)
  {
    PTSTimeValue = MovieSampleAccessorGetPTSTimeValue((uint64_t)v10);
    CMTimeMake(&v22, PTSTimeValue, *((_DWORD *)v10[1] + 58));
    *a3 = v22;
LABEL_7:
    if (a4)
    {
      SampleInDecodeOrder = MovieSampleAccessorMoveToLastSampleInDecodeOrder((uint64_t)v10);
      if ((_DWORD)SampleInDecodeOrder)
      {
        v12 = SampleInDecodeOrder;
      }
      else
      {
        do
          MovieSampleAccessorStepFwdPTS((uint64_t)v10);
        while (!(_DWORD)v15);
        v12 = v15;
        if ((_DWORD)v15 == -12840)
        {
          memset(&v22, 0, sizeof(v22));
          v16 = MovieSampleAccessorGetPTSTimeValue((uint64_t)v10);
          CMTimeMake(&v23, v16, *((_DWORD *)v10[1] + 58));
          MovieSampleAccessorGetSampleDuration((uint64_t)v10, &v22);
          lhs = v23;
          v18 = v22;
          CMTimeAdd(&v20, &lhs, &v18);
          v12 = 0;
          *a4 = v20;
        }
      }
    }
    else
    {
      v12 = 0;
    }
  }
LABEL_13:
  MovieSampleAccessorDispose(v10);
  return v12;
}

uint64_t MovieTrackGetCompositionOffsetRange(_QWORD *a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t result;

  result = MoovAssureSampleTableParsed(a1, a2);
  if (!(_DWORD)result)
  {
    if (a3)
      *a3 = *(_DWORD *)(a2 + 116);
    if (a4)
      *a4 = *(_DWORD *)(a2 + 112);
  }
  return result;
}

uint64_t MovieTrackFragmentGetCompositionOffsetRange(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t result;

  if (!a3)
  {
    if (!a4)
      return 0;
    return TrackFragmentBuilderGetMaxDecodeToDisplay(*(_QWORD *)(a2 + 768), a4);
  }
  result = TrackFragmentBuilderGetMinDecodeToDisplay(*(_QWORD *)(a2 + 768), a3);
  if (a4 && !(_DWORD)result)
    return TrackFragmentBuilderGetMaxDecodeToDisplay(*(_QWORD *)(a2 + 768), a4);
  return result;
}

const __CFArray *MovieTrackGetNumFormatDescriptions(uint64_t a1)
{
  const __CFArray *result;

  result = *(const __CFArray **)(a1 + 48);
  if (result)
    return (const __CFArray *)CFArrayGetCount(result);
  return result;
}

uint64_t MovieTrackReplaceFormatDescriptionArray(uint64_t a1, CFArrayRef theArray)
{
  CFIndex Count;
  const __CFArray *v5;
  CFIndex v6;
  CFIndex v7;
  CFIndex i;
  const opaqueCMFormatDescription *ValueAtIndex;
  CMMediaType MediaType;
  int v11;
  const __CFAllocator *v13;
  CFMutableArrayRef MutableCopy;
  CFMutableArrayRef v15;
  const void *v16;

  if (!theArray)
    return FigSignalErrorAt();
  Count = CFArrayGetCount(theArray);
  v5 = *(const __CFArray **)(a1 + 48);
  if (v5)
    v5 = (const __CFArray *)CFArrayGetCount(v5);
  if ((const __CFArray *)Count != v5)
    return FigSignalErrorAt();
  v6 = CFArrayGetCount(theArray);
  if (v6 >= 1)
  {
    v7 = v6;
    for (i = 0; v7 != i; ++i)
    {
      ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(theArray, i);
      MediaType = CMFormatDescriptionGetMediaType(ValueAtIndex);
      v11 = *(_DWORD *)(a1 + 24);
      if (MediaType != v11)
      {
        if (v11 != 1885954932 && MediaType == 1986618469)
        {
          if (v11 != 1635088502)
            return FigSignalErrorAt();
        }
        else if (MediaType != 1986618469 || v11 != 1885954932)
        {
          return FigSignalErrorAt();
        }
      }
    }
  }
  v13 = CFGetAllocator((CFTypeRef)a1);
  MutableCopy = CFArrayCreateMutableCopy(v13, 0, theArray);
  v15 = MutableCopy;
  v16 = *(const void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = MutableCopy;
  if (MutableCopy)
    CFRetain(MutableCopy);
  if (v16)
    CFRelease(v16);
  *(_QWORD *)(a1 + 16) |= 4uLL;
  if (v15)
    CFRelease(v15);
  return 0;
}

uint64_t MovieTrackSetMediaTimeScale(uint64_t a1, int a2)
{
  int v2;
  uint64_t v3;

  if (!a2)
    return FigSignalErrorAt();
  v2 = *(_DWORD *)(a1 + 288);
  v3 = *(_QWORD *)(a1 + 728);
  if (v3)
    v2 += *(_DWORD *)(v3 + 8);
  if (v2)
    return FigSignalErrorAt();
  *(_DWORD *)(a1 + 232) = a2;
  return 0;
}

uint64_t MovieTrackGetTrackDurationValue(uint64_t a1)
{
  return *(_QWORD *)(a1 + 136);
}

uint64_t MovieTrackGetMediaDurationValue(uint64_t a1)
{
  return *(_QWORD *)(a1 + 224);
}

uint64_t FigPersistentTrackIDToTrackIndex(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 304);
  if (v2 < 1)
    return -1;
  result = 0;
  v5 = *(_QWORD *)(a1 + 320);
  while (*(_DWORD *)(*(_QWORD *)(v5 + 8 * result) + 144) != a2)
  {
    if (v2 == ++result)
      return -1;
  }
  return result;
}

uint64_t MovieInformationFindTrackForTrackID(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t *i;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 304);
  if (v2 < 1)
    return 0;
  for (i = *(uint64_t **)(a1 + 320); ; ++i)
  {
    result = *i;
    if (*(_DWORD *)(*i + 144) == a2)
      break;
    if (!--v2)
      return 0;
  }
  return result;
}

uint64_t MovieInformationFindNthTrackOfType(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 304);
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = *(uint64_t **)(a1 + 320);
    do
    {
      result = *v5;
      if (*(_DWORD *)(*v5 + 24) == a3)
      {
        if (v4 == a2)
          return result;
        ++v4;
      }
      ++v5;
      --v3;
    }
    while (v3);
  }
  return 0;
}

uint64_t MovieInformationHasCompressedMovieAtom(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 87);
}

BOOL MovieTrackIsValid(uint64_t a1)
{
  return a1 && !*(_BYTE *)(a1 + 896);
}

uint64_t MovieTrackGetBasicInfo(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (!a1)
    return FigSignalErrorAt();
  if (a2)
    *a2 = *(_DWORD *)(a1 + 24);
  if (a3)
    *a3 = *(_DWORD *)(a1 + 144);
  return 0;
}

uint64_t MovieTrackGetTrackTimeInfo(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  if (a2)
    *a2 = *(_QWORD *)(a1 + 120);
  if (a3)
    *a3 = *(_QWORD *)(a1 + 128);
  return 0;
}

uint64_t MovieTrackGetMediaTimeInfo(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  if (a2)
    *a2 = *(_QWORD *)(a1 + 208);
  if (a3)
    *a3 = *(_QWORD *)(a1 + 216);
  return 0;
}

uint64_t MovieTrackSetParsedTrackID(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 144) = a2;
  return 0;
}

uint64_t MovieTrackSetParsedTrackCreateAndModTimes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 120) = a2;
  *(_QWORD *)(a1 + 128) = a3;
  return 0;
}

uint64_t MovieTrackSetParsedMediaCreateAndModTimes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 208) = a2;
  *(_QWORD *)(a1 + 216) = a3;
  return 0;
}

uint64_t MovieTrackSetParsedDuration(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 136) = a2;
  return 0;
}

uint64_t MovieTrackIsEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 200);
}

uint64_t MovieTrackIsExcludedFromAutoSelection(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 885);
}

float MovieTrackGetVolume(uint64_t a1)
{
  return *(float *)(a1 + 196);
}

uint64_t MovieTrackSetVolume(uint64_t a1, float a2)
{
  *(float *)(a1 + 196) = a2;
  *(_QWORD *)(a1 + 16) |= 0x10000uLL;
  return 0;
}

BOOL MovieTrackHasEditList(uint64_t a1)
{
  return *(_BYTE *)(a1 + 722) && *(_DWORD *)(a1 + 824) != 1;
}

uint64_t MovieTrackGetEditSegmentCount(uint64_t a1)
{
  return *(int *)(a1 + 816);
}

uint64_t MovieTrackFragmentGetEditSegmentCount(uint64_t a1)
{
  return *(int *)(a1 + 792);
}

uint64_t MovieTrackGetEditSegmentWithIndex(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t result;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  if (a2 < 0 || *(int *)(a1 + 816) <= a2)
    return 4294954513;
  result = 0;
  v5 = (_OWORD *)(*(_QWORD *)(a1 + 808) + 96 * a2);
  v6 = v5[1];
  *a3 = *v5;
  a3[1] = v6;
  v7 = v5[2];
  v8 = v5[3];
  v9 = v5[5];
  a3[4] = v5[4];
  a3[5] = v9;
  a3[2] = v7;
  a3[3] = v8;
  return result;
}

uint64_t MovieTrackFragmentGetEditSegmentWithIndex(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t result;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  if (a2 < 0 || *(int *)(a1 + 792) <= a2)
    return 4294954513;
  result = 0;
  v5 = (_OWORD *)(*(_QWORD *)(a1 + 784) + 96 * a2);
  v6 = v5[1];
  *a3 = *v5;
  a3[1] = v6;
  v7 = v5[2];
  v8 = v5[3];
  v9 = v5[5];
  a3[4] = v5[4];
  a3[5] = v9;
  a3[2] = v7;
  a3[3] = v8;
  return result;
}

uint64_t MovieTrackFindEditIndexForTrackTime(uint64_t a1, CMTime *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t result;
  CMTime v15;
  CMTime time1;

  if (*(_DWORD *)(a1 + 816) && (v5 = *(_QWORD *)(a1 + 808)) != 0)
  {
    time1 = *a2;
    v15 = *(CMTime *)(v5 + 48);
    if (CMTimeCompare(&time1, &v15) < 0)
    {
      result = 0;
      v8 = 0;
    }
    else
    {
      v7 = *(int *)(a1 + 816);
      v8 = v7 - 1;
      if ((int)v7 < 2)
      {
LABEL_8:
        result = 0;
      }
      else
      {
        v9 = 0;
        v10 = 144;
        while (1)
        {
          v11 = *(_QWORD *)(a1 + 808) + v10;
          time1 = *a2;
          v12 = *(_OWORD *)v11;
          v15.epoch = *(_QWORD *)(v11 + 16);
          *(_OWORD *)&v15.value = v12;
          if (CMTimeCompare(&time1, &v15) < 0)
            break;
          v13 = v9 + 2;
          ++v9;
          v10 += 96;
          if (v13 >= *(int *)(a1 + 816))
            goto LABEL_8;
        }
        result = 0;
        v8 = v9;
      }
    }
  }
  else
  {
    v8 = 0;
    result = 4294954775;
  }
  *a3 = v8;
  return result;
}

__n128 MovieTrackGetSpatialInformation(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  __n128 result;
  __int128 v5;

  if (a2)
  {
    result.n128_u32[0] = *(_DWORD *)(a1 + 188);
    *a2 = result.n128_u32[0];
  }
  if (a3)
  {
    result.n128_u32[0] = *(_DWORD *)(a1 + 192);
    *a3 = result.n128_u32[0];
  }
  if (a4)
  {
    result = *(__n128 *)(a1 + 152);
    v5 = *(_OWORD *)(a1 + 168);
    *(_DWORD *)(a4 + 32) = *(_DWORD *)(a1 + 184);
    *(__n128 *)a4 = result;
    *(_OWORD *)(a4 + 16) = v5;
  }
  return result;
}

uint64_t MovieTrackSetSpatialInformation(uint64_t a1, __int128 *a2, float a3, float a4)
{
  uint64_t v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;

  *(float *)(a1 + 188) = a3;
  *(float *)(a1 + 192) = a4;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4 | 0x400;
  v5 = &kIdentityMatrix_0;
  if (a2)
    v5 = a2;
  v6 = *v5;
  v7 = v5[1];
  *(_DWORD *)(a1 + 184) = *((_DWORD *)v5 + 8);
  *(_OWORD *)(a1 + 168) = v7;
  *(_OWORD *)(a1 + 152) = v6;
  *(_QWORD *)(a1 + 16) = v4 | 0x80400;
  return 0;
}

uint64_t MovieTrackSetTrackDimensions(uint64_t a1, float a2, float a3)
{
  *(float *)(a1 + 188) = a2;
  *(float *)(a1 + 192) = a3;
  *(_QWORD *)(a1 + 16) |= 0x400uLL;
  return 0;
}

uint64_t MovieTrackSetTrackMatrix(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  if (a2)
  {
    v2 = *(_OWORD *)a2;
    v3 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 32);
  }
  else
  {
    *(_DWORD *)(a1 + 184) = 1065353216;
    v2 = kIdentityMatrix_0;
    v3 = unk_1932FCD44;
  }
  *(_OWORD *)(a1 + 152) = v2;
  *(_OWORD *)(a1 + 168) = v3;
  *(_QWORD *)(a1 + 16) |= 0x80000uLL;
  return 0;
}

float MovieTrackGetCleanApertureDimensions(uint64_t a1, float *a2, float *a3)
{
  float result;

  if (*(_BYTE *)(a1 + 252))
  {
    if (a2)
    {
      result = *(float *)(a1 + 256);
      *a2 = result;
    }
    if (a3)
    {
      result = *(float *)(a1 + 260);
      *a3 = result;
    }
  }
  return result;
}

float MovieTrackGetProductionApertureDimensions(uint64_t a1, float *a2, float *a3)
{
  float result;

  if (*(_BYTE *)(a1 + 264))
  {
    if (a2)
    {
      result = *(float *)(a1 + 268);
      *a2 = result;
    }
    if (a3)
    {
      result = *(float *)(a1 + 272);
      *a3 = result;
    }
  }
  return result;
}

float MovieTrackGetEncodedPixelsDimensions(uint64_t a1, float *a2, float *a3)
{
  float result;

  if (*(_BYTE *)(a1 + 276))
  {
    if (a2)
    {
      result = *(float *)(a1 + 280);
      *a2 = result;
    }
    if (a3)
    {
      result = *(float *)(a1 + 284);
      *a3 = result;
    }
  }
  return result;
}

uint64_t MovieTrackGetLanguageInformation(uint64_t result, _WORD *a2, _QWORD *a3, _QWORD *a4)
{
  if (a2)
    *a2 = *(_WORD *)(result + 236);
  if (a3)
    *a3 = *(_QWORD *)(result + 856);
  if (a4)
    *a4 = *(_QWORD *)(result + 848);
  return result;
}

uint64_t MovieTrackSetParsedLanguageCode(uint64_t a1, __int16 a2)
{
  *(_WORD *)(a1 + 716) = a2;
  return 0;
}

uint64_t MovieTrackSetLanguageCodeString(uint64_t a1, const __CFString *cf)
{
  const void *v4;

  if (!cf)
    return FigSignalErrorAt();
  v4 = *(const void **)(a1 + 856);
  *(_QWORD *)(a1 + 856) = cf;
  CFRetain(cf);
  if (v4)
    CFRelease(v4);
  *(_WORD *)(a1 + 236) = FigGetISOLanguageCodeForString(cf);
  *(_QWORD *)(a1 + 16) |= 0x80uLL;
  return 0;
}

uint64_t MovieTrackGetAlternateGroupID(uint64_t a1)
{
  return *(__int16 *)(a1 + 864);
}

uint64_t MovieTrackGetProvisionalAlternateGroupID(uint64_t a1, _WORD *a2)
{
  if (a2)
    *a2 = *(_WORD *)(a1 + 738);
  return *(unsigned __int8 *)(a1 + 740);
}

uint64_t MovieTrackGetDefaultAlternateGroupID(uint64_t a1)
{
  return *(__int16 *)(a1 + 150);
}

uint64_t MovieTrackGetLayer(uint64_t a1)
{
  return *(__int16 *)(a1 + 148);
}

uint64_t MovieTrackSetAlternateGroupID(uint64_t a1, __int16 a2)
{
  uint64_t v2;

  *(_WORD *)(a1 + 150) = a2;
  v2 = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(a1 + 740) = 1;
  *(_WORD *)(a1 + 738) = 0;
  *(_WORD *)(a1 + 864) = a2;
  *(_QWORD *)(a1 + 16) = v2 | 0xC01000;
  return 0;
}

uint64_t MovieTrackSetDefaultAlternateGroupID(uint64_t a1, __int16 a2)
{
  *(_WORD *)(a1 + 150) = a2;
  *(_QWORD *)(a1 + 16) |= 0x800000uLL;
  return 0;
}

uint64_t MovieTrackSetProvisionalAlternateGroupID(uint64_t a1, __int16 a2)
{
  *(_BYTE *)(a1 + 740) = 1;
  *(_WORD *)(a1 + 738) = a2;
  *(_QWORD *)(a1 + 16) |= 0x400000uLL;
  return 0;
}

uint64_t MovieTrackClearProvisionalAlternateGroupID(uint64_t a1)
{
  *(_BYTE *)(a1 + 740) = 0;
  *(_WORD *)(a1 + 738) = 0;
  *(_QWORD *)(a1 + 16) |= 0x400000uLL;
  return 0;
}

uint64_t MovieTrackSetLayer(uint64_t a1, __int16 a2)
{
  *(_WORD *)(a1 + 148) = a2;
  *(_QWORD *)(a1 + 16) |= 0x20000uLL;
  return 0;
}

uint64_t MovieTrackGetTimecodeMustBeShown(uint64_t a1, _BYTE *a2)
{
  if (*(_DWORD *)(a1 + 24) != 1953325924 || !*(_BYTE *)(a1 + 883))
    return FigSignalErrorAt();
  *a2 = *(_BYTE *)(a1 + 884);
  return 0;
}

uint64_t MovieTrackSetTimecodeSpecifics(uint64_t a1, char a2)
{
  *(_BYTE *)(a1 + 883) = 1;
  *(_BYTE *)(a1 + 884) = a2;
  return 0;
}

uint64_t MovieTrackGetTrackType(uint64_t a1)
{
  const __CFArray *v2;
  uint64_t result;
  const opaqueCMFormatDescription *ValueAtIndex;
  FourCharCode MediaSubType;

  v2 = *(const __CFArray **)(a1 + 48);
  if (!v2 || !CFArrayGetCount(v2))
    return *(unsigned int *)(a1 + 24);
  result = *(unsigned int *)(a1 + 24);
  if ((_DWORD)result != 1885954932)
  {
    if ((_DWORD)result == 1635088502)
    {
      return 1635088502;
    }
    else
    {
      ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), 0);
      result = CMFormatDescriptionGetMediaType(ValueAtIndex);
      if ((_DWORD)result == 1953325924)
      {
        MediaSubType = CMFormatDescriptionGetMediaSubType(ValueAtIndex);
        if (MediaSubType == 1668167220 || MediaSubType == 1952658996)
          return 1952658996;
        else
          return 1953325924;
      }
    }
  }
  return result;
}

uint64_t MovieTrackGetMediaType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t MovieTrackGetMediaTypeForSampleDescriptionID(uint64_t a1, int a2, CMMediaType *a3)
{
  uint64_t FormatDescriptionForSampleDescriptionID;
  CMFormatDescriptionRef desc;

  desc = 0;
  FormatDescriptionForSampleDescriptionID = GetFormatDescriptionForSampleDescriptionID(a1, a2, (const void **)&desc);
  if (!(_DWORD)FormatDescriptionForSampleDescriptionID)
    *a3 = CMFormatDescriptionGetMediaType(desc);
  return FormatDescriptionForSampleDescriptionID;
}

uint64_t MovieTrackSetParsedTrackType(uint64_t a1, int a2)
{
  int v3;

  if (a2 == 1953325924 || a2 == 1952658996)
    v3 = 1953325924;
  else
    v3 = a2;
  *(_DWORD *)(a1 + 24) = v3;
  return 0;
}

uint64_t MovieTrackSetTrackExtendsDefaultValues(_DWORD *a1, int a2, int a3, int a4, int a5)
{
  a1[225] = a2;
  a1[226] = a3;
  a1[227] = a4;
  a1[228] = a5;
  return 0;
}

uint64_t MovieTrackGetTrackExtendsDefaultValues(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  if (a2)
    *a2 = a1[225];
  if (a3)
    *a3 = a1[226];
  if (a4)
    *a4 = a1[227];
  if (a5)
    *a5 = a1[228];
  return 0;
}

uint64_t MovieTrackSetParsedMediaDuration(uint64_t a1, uint64_t a2, int a3)
{
  *(_QWORD *)(a1 + 224) = a2;
  *(_DWORD *)(a1 + 232) = a3;
  return 0;
}

CFDictionaryRef MovieTrackCreateAdvanceDecodeDeltaDictionary(const __CFAllocator *a1, _QWORD *a2, uint64_t a3)
{
  CMTime time;

  if (MoovAssureSampleTableParsed(a2, a3))
    return 0;
  CMTimeMake(&time, -*(_DWORD *)(a3 + 116) & (*(int *)(a3 + 116) >> 31), *(_DWORD *)(a3 + 232));
  return CMTimeCopyAsDictionary(&time, a1);
}

uint64_t MovieTrackCreateSampleDescriptionAtomLocationDictionary(uint64_t a1, __CFDictionary **a2)
{
  const __CFAllocator *v4;
  CFNumberRef v5;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  __CFDictionary *Mutable;
  __CFDictionary *v10;
  CFNumberRef v11;

  if (*(_QWORD *)(a1 + 648)
    && *(_QWORD *)(a1 + 656)
    && (v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00],
        (v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, (const void *)(a1 + 648))) != 0))
  {
    v6 = v5;
    v7 = CFNumberCreate(v4, kCFNumberSInt64Type, (const void *)(a1 + 656));
    if (v7)
    {
      v8 = v7;
      Mutable = CFDictionaryCreateMutable(v4, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (Mutable)
      {
        v10 = Mutable;
        CFDictionarySetValue(Mutable, CFSTR("Offset"), v6);
        CFDictionarySetValue(v10, CFSTR("Length"), v8);
        *a2 = v10;
      }
      else
      {
        FigSignalErrorAt();
      }
      CFRelease(v6);
      v11 = v8;
    }
    else
    {
      FigSignalErrorAt();
      v11 = v6;
    }
    CFRelease(v11);
  }
  else
  {
    FigSignalErrorAt();
  }
  return 0;
}

uint64_t MovieTrackHasRollInformation(uint64_t a1)
{
  unsigned int v2;
  uint64_t Basic;
  uint64_t result;

  Basic = MovieSampleGroupTypeSpecMakeBasic(1919904876);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return MovieSampleGroupCollectionHasSampleGroup(result, Basic, v2);
  return result;
}

uint64_t MovieTrackHasIndependentFramePrerollPacketCount(uint64_t a1)
{
  unsigned int v2;
  uint64_t Basic;
  uint64_t result;

  Basic = MovieSampleGroupTypeSpecMakeBasic(1886547820);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return MovieSampleGroupCollectionHasSampleGroup(result, Basic, v2);
  return result;
}

uint64_t MovieTrackHasSeamSamples(uint64_t a1)
{
  unsigned int v2;
  uint64_t Basic;
  uint64_t result;

  Basic = MovieSampleGroupTypeSpecMakeBasic(1936023917);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return MovieSampleGroupCollectionHasSampleGroup(result, Basic, v2);
  return result;
}

BOOL MovieTrackHasAudioDependencyInformation(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 24) != 1936684398)
    return 0;
  if (*(_QWORD *)(a1 + 488))
    return 1;
  return MovieTrackHasIndependentFramePrerollPacketCount(a1) != 0;
}

BOOL MovieSampleTableHaveSyncSampleTable(uint64_t a1)
{
  return *(_QWORD *)(a1 + 488) != 0;
}

BOOL MovieTrackEditsExcludeAudioPrimingAndRemainderDuration(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 24) != 1936684398 || !*(_BYTE *)(a1 + 722) || *(_DWORD *)(a1 + 824) == 1)
    return 0;
  if (MovieTrackHasRollInformation(a1))
    return 1;
  if (*(_DWORD *)(a1 + 24) != 1936684398)
    return 0;
  return *(_QWORD *)(a1 + 488) || MovieTrackHasIndependentFramePrerollPacketCount(a1) != 0;
}

uint64_t MovieTrackCreateEditSegmentArray(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v4;
  int v5;
  size_t v6;
  CMTime *v7;
  CMTime *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  int64_t v15;
  unsigned int *v16;
  unsigned int v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  int v28;
  CMTime *v29;
  CMTime *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  CMTimeEpoch v34;
  int32_t v35;
  int32_t v36;
  int32_t v37;
  CMTime *v38;
  CMTime *v39;
  CMTime *v40;
  CMTime *v41;
  int v42;
  int v43;
  const void **v44;
  int SampleInDecodeOrder;
  int64_t DTSTimeValue;
  int32_t v47;
  CMTimeEpoch epoch;
  __int128 v49;
  CMTimeScale timescale;
  CMTimeEpoch v51;
  int v52;
  uint64_t result;
  int v54;
  unsigned int *v55;
  uint64_t v56;
  CMTime *v58;
  int64_t value;
  int64_t valuea[2];
  CMTime rhs;
  CMTime v62;
  CMTime v63;
  CMTime v64;
  CMTime v65;
  CMTime v66;
  CMTime time2;
  CMTime time;
  CMTime lhs;
  const void **v70;

  v2 = a2;
  if (!*(_BYTE *)(a2 + 722))
  {
    memset(&v64, 0, sizeof(v64));
    CMTimeMake(&v64, *(_QWORD *)(a2 + 136), *(_DWORD *)(a1 + 240));
    memset(&v63, 0, sizeof(v63));
    CMTimeMake(&v63, *(_QWORD *)(v2 + 224), *(_DWORD *)(v2 + 232));
    v62 = v63;
    *(_DWORD *)(v2 + 824) = 0;
    v29 = (CMTime *)malloc_type_malloc(0x60uLL, 0x1000040565EDBD2uLL);
    if (!v29)
      return FigSignalErrorAt();
    v30 = v29;
    v31 = MEMORY[0x1E0CA2E68];
    v32 = *MEMORY[0x1E0CA2E68];
    *(_OWORD *)&v29[2].value = *MEMORY[0x1E0CA2E68];
    v33 = v2;
    v34 = *(_QWORD *)(v31 + 16);
    v29[2].epoch = v34;
    v29->epoch = v34;
    *(_OWORD *)valuea = v32;
    *(_OWORD *)&v29->value = v32;
    v29[3] = v64;
    v29[1] = v63;
    v35 = *(_DWORD *)(a1 + 240);
    v36 = *(_DWORD *)(v33 + 232);
    if (v35 != v36)
    {
      if (v35 >= v36)
        v37 = v36;
      else
        v37 = *(_DWORD *)(a1 + 240);
      v38 = v29;
      CMTimeMake(&rhs, 1, v37);
      lhs = v63;
      CMTimeAdd(&v62, &lhs, &rhs);
      v30 = v38;
    }
    v39 = v30 + 3;
    v40 = v30;
    v41 = v30 + 1;
    lhs = v62;
    time = v64;
    if (CMTimeCompare(&lhs, &time) < 0)
    {
      lhs.epoch = v34;
      v70 = 0;
      *(_OWORD *)&lhs.value = *(_OWORD *)valuea;
      time = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
      time2 = time;
      v42 = MoovAssureSampleTableParsed((_QWORD *)a1, a2);
      if (v42)
      {
        SampleInDecodeOrder = v42;
        v44 = 0;
      }
      else
      {
        v43 = MovieSampleAccessorCreate((const void *)a1, a2, &v70);
        v44 = v70;
        if (v43)
        {
          SampleInDecodeOrder = v43;
        }
        else
        {
          SampleInDecodeOrder = MovieSampleAccessorMoveToLastSampleInDecodeOrder((uint64_t)v70);
          if (!SampleInDecodeOrder)
          {
            DTSTimeValue = MovieSampleAccessorGetDTSTimeValue((uint64_t)v44);
            CMTimeMake(&time, DTSTimeValue, *((_DWORD *)v44[1] + 58));
            MovieSampleAccessorGetSampleDuration((uint64_t)v44, &time2);
            v66 = time;
            v65 = time2;
            CMTimeAdd(&lhs, &v66, &v65);
          }
        }
      }
      v66 = lhs;
      MovieSampleAccessorDispose(v44);
      if (!SampleInDecodeOrder)
      {
        lhs = v66;
        time = v63;
        if (CMTimeCompare(&lhs, &time) >= 1)
        {
          v47 = *(_DWORD *)(a2 + 232);
          time = v66;
          CMTimeConvertScale(&lhs, &time, v47, kCMTimeRoundingMethod_QuickTime);
          v63 = lhs;
          epoch = lhs.epoch;
          v49 = *(_OWORD *)&lhs.value;
          timescale = lhs.timescale;
          *(_QWORD *)(a2 + 224) = lhs.value;
          *(_DWORD *)(a2 + 232) = timescale;
          v41->epoch = epoch;
          *(_OWORD *)&v41->value = v49;
        }
      }
    }
    time = *v41;
    time2 = *v39;
    CMTimeMinimum(&lhs, &time, &time2);
    *(_OWORD *)&v41->value = *(_OWORD *)&lhs.value;
    v51 = lhs.epoch;
    v41->epoch = lhs.epoch;
    *(_OWORD *)&v39->value = *(_OWORD *)&v41->value;
    v39->epoch = v51;
    v5 = 1;
    v28 = 1;
    v2 = a2;
    v8 = v40;
    goto LABEL_38;
  }
  v4 = *(unsigned int **)(a2 + 704);
  if (!v4)
  {
    v8 = 0;
    v5 = 0;
    v28 = 0;
    v52 = 1;
LABEL_37:
    *(_DWORD *)(a2 + 824) = v52;
    goto LABEL_38;
  }
  v5 = bswap32(v4[1]);
  if (v5 < 1)
  {
    v8 = 0;
    v28 = 0;
    v52 = 2;
    goto LABEL_37;
  }
  *(_DWORD *)(a2 + 824) = 3;
  if (v5 <= 4)
    v6 = 4;
  else
    v6 = v5;
  v7 = (CMTime *)malloc_type_calloc(v6, 0x60uLL, 0x1000040565EDBD2uLL);
  if (!v7)
    return FigSignalErrorAt();
  v8 = v7;
  v9 = 0;
  v10 = 0;
  v11 = v5;
  v12 = 0;
  v55 = v4 + 2;
  v13 = v4 + 6;
  v54 = v11;
  v56 = 96 * v11;
  v14 = v4 + 3;
  v58 = v7;
  do
  {
    if (**(_BYTE **)(v2 + 704))
    {
      v15 = bswap64(*((_QWORD *)v13 - 1));
      value = bswap64(*((_QWORD *)v13 - 2));
      v16 = v13;
    }
    else
    {
      v15 = (int)bswap32(*v14);
      value = bswap32(*(v14 - 1));
      v16 = &v55[3 * v10 + 2];
    }
    v17 = *v16;
    v18 = (char *)&v8[v9 / 0x18];
    if (v15 == -1)
    {
      v20 = MEMORY[0x1E0CA2E18];
      *(_OWORD *)v18 = *MEMORY[0x1E0CA2E18];
      *((_QWORD *)v18 + 2) = *(_QWORD *)(v20 + 16);
    }
    else
    {
      CMTimeMake(&lhs, v15, *(_DWORD *)(v2 + 232));
      v8 = v58;
      v19 = *(_OWORD *)&lhs.value;
      *((_QWORD *)v18 + 2) = lhs.epoch;
      *(_OWORD *)v18 = v19;
    }
    v21 = (char *)&v8[v9 / 0x18];
    v22 = (uint64_t)&v8[v9 / 0x18 + 3];
    CMTimeMake(&lhs, value, *(_DWORD *)(a1 + 240));
    v23 = *(_OWORD *)&lhs.value;
    *((_QWORD *)v21 + 11) = lhs.epoch;
    *(_OWORD *)(v21 + 72) = v23;
    CMTimeMake(&lhs, v12, *(_DWORD *)(a1 + 240));
    v24 = *(_OWORD *)&lhs.value;
    *((_QWORD *)v21 + 8) = lhs.epoch;
    *((_OWORD *)v21 + 3) = v24;
    v25 = v21 + 24;
    if (v17 == 256)
    {
      *(_OWORD *)v25 = *(_OWORD *)v22;
      *((_QWORD *)v25 + 2) = *(_QWORD *)(v22 + 16);
    }
    else
    {
      v26 = *(_OWORD *)v22;
      time.epoch = *(_QWORD *)(v22 + 16);
      *(_OWORD *)&time.value = v26;
      CMTimeMultiplyByFloat64(&lhs, &time, (double)bswap32(v17) * 0.0000152587891);
      v27 = *(_OWORD *)&lhs.value;
      *((_QWORD *)v25 + 2) = lhs.epoch;
      *(_OWORD *)v25 = v27;
    }
    v8 = v58;
    v12 += value;
    ++v10;
    v13 += 5;
    v9 += 96;
    v14 += 3;
    v2 = a2;
  }
  while (v56 != v9);
  v5 = v54;
  v28 = v6;
LABEL_38:
  result = 0;
  *(_QWORD *)(v2 + 808) = v8;
  *(_DWORD *)(v2 + 820) = v28;
  *(_DWORD *)(v2 + 816) = v5;
  return result;
}

uint64_t MovieTrackAddRunContributionToEditSegmentArray(uint64_t a1, uint64_t a2, int64_t a3, int64_t value)
{
  CMTime *v8;
  uint64_t v9;
  CMTime *v10;
  uint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  int v17;
  void *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  CMTime v47;
  CMTime v48;
  CMTime v49;
  CMTime v50;
  CMTime v51;
  CMTime v52;
  CMTime rhs;
  CMTime lhs;
  CMTime v55;
  CMTime v56;
  CMTime v57;
  CMTime v58;

  memset(&v58, 0, sizeof(v58));
  memset(&v57, 0, sizeof(v57));
  memset(&v56, 0, sizeof(v56));
  switch(*(_DWORD *)(a2 + 824))
  {
    case 0:
      v8 = *(CMTime **)(a2 + 808);
      CMTimeMake(&v55, value, *(_DWORD *)(a2 + 232));
      v8[1] = v55;
      v9 = *(_QWORD *)(a2 + 808);
      *(_OWORD *)(v9 + 72) = *(_OWORD *)(v9 + 24);
      *(_QWORD *)(v9 + 88) = *(_QWORD *)(v9 + 40);
      goto LABEL_12;
    case 2:
      *(_DWORD *)(a2 + 820) = 4;
      *(_QWORD *)(a2 + 808) = malloc_type_calloc(4uLL, 0x60uLL, 0x1000040565EDBD2uLL);
      *(_DWORD *)(a2 + 816) = 1;
      CMTimeMake(&lhs, value, *(_DWORD *)(a2 + 232));
      CMTimeMake(&rhs, a3, *(_DWORD *)(a2 + 232));
      CMTimeSubtract(&v58, &lhs, &rhs);
      v10 = *(CMTime **)(a2 + 808);
      CMTimeMake(&v55, 0, *(_DWORD *)(a1 + 240));
      v10[2] = v55;
      *(CMTime *)(*(_QWORD *)(a2 + 808) + 72) = v58;
      v11 = *(_QWORD *)(a2 + 808);
      CMTimeMake(&v55, a3, *(_DWORD *)(a2 + 232));
      v12 = *(_OWORD *)&v55.value;
      *(_QWORD *)(v11 + 16) = v55.epoch;
      *(_OWORD *)v11 = v12;
      *(CMTime *)(*(_QWORD *)(a2 + 808) + 24) = v58;
      *(_DWORD *)(a2 + 824) = 4;
      goto LABEL_12;
    case 3:
      v13 = *(_DWORD *)(a2 + 816);
      v14 = v13;
      v15 = v13 - 1;
      v16 = *(void **)(a2 + 808);
      if ((*((_BYTE *)v16 + 96 * v15 + 12) & 1) != 0)
      {
        CMTimeMake(&v52, value, *(_DWORD *)(a2 + 232));
        v37 = *(_QWORD *)(a2 + 808) + 96 * v15;
        v38 = *(_OWORD *)v37;
        v55.epoch = *(_QWORD *)(v37 + 16);
        *(_OWORD *)&v55.value = v38;
        CMTimeSubtract(&v57, &v52, &v55);
        v39 = *(_QWORD *)(a2 + 808) + 96 * v15;
        v55 = v57;
        v40 = *(_OWORD *)(v39 + 24);
        v51.epoch = *(_QWORD *)(v39 + 40);
        *(_OWORD *)&v51.value = v40;
        CMTimeSubtract(&v56, &v55, &v51);
        v41 = *(_QWORD *)(a2 + 808) + 96 * v15;
        v42 = *(_OWORD *)(v41 + 72);
        v51.epoch = *(_QWORD *)(v41 + 88);
        *(_OWORD *)&v51.value = v42;
        v50 = v56;
        CMTimeAdd(&v55, &v51, &v50);
        v43 = *(_OWORD *)&v55.value;
        *(_QWORD *)(v41 + 88) = v55.epoch;
        *(_OWORD *)(v41 + 72) = v43;
        v44 = *(_QWORD *)(a2 + 808) + 96 * v15;
        v45 = *(_OWORD *)&v57.value;
        *(_QWORD *)(v44 + 40) = v57.epoch;
        *(_OWORD *)(v44 + 24) = v45;
      }
      else
      {
        if (*(_DWORD *)(a2 + 820) <= v13)
        {
          v17 = v13 + 1;
          v18 = malloc_type_realloc(v16, 96 * (v14 + 1), 0x1000040565EDBD2uLL);
          if (!v18)
            return FigSignalErrorAt();
          *(_QWORD *)(a2 + 808) = v18;
          *(_DWORD *)(a2 + 820) = v17;
          v13 = *(_DWORD *)(a2 + 816);
        }
        CMTimeMake(&v49, value, *(_DWORD *)(a2 + 232));
        CMTimeMake(&v48, a3, *(_DWORD *)(a2 + 232));
        CMTimeSubtract(&v58, &v49, &v48);
        v19 = *(_QWORD *)(a2 + 808) + 96 * v13;
        CMTimeMake(&v55, 0, *(_DWORD *)(a1 + 240));
        v20 = *(_OWORD *)&v55.value;
        *(_QWORD *)(v19 + 64) = v55.epoch;
        *(_OWORD *)(v19 + 48) = v20;
        v21 = *(_QWORD *)(a2 + 808) + 96 * v13;
        v22 = *(_OWORD *)&v58.value;
        *(_QWORD *)(v21 + 88) = v58.epoch;
        *(_OWORD *)(v21 + 72) = v22;
        v23 = *(_QWORD *)(a2 + 808) + 96 * v13;
        CMTimeMake(&v55, a3, *(_DWORD *)(a2 + 232));
        v24 = *(_OWORD *)&v55.value;
        *(_QWORD *)(v23 + 16) = v55.epoch;
        *(_OWORD *)v23 = v24;
        v25 = *(_QWORD *)(a2 + 808) + 96 * v13;
        v26 = *(_OWORD *)&v58.value;
        *(_QWORD *)(v25 + 40) = v58.epoch;
        *(_OWORD *)(v25 + 24) = v26;
        ++*(_DWORD *)(a2 + 816);
      }
      *(_DWORD *)(a2 + 824) = 4;
LABEL_12:
      *(_QWORD *)(a2 + 16) |= 2uLL;
      return 0;
    case 4:
      v27 = 96 * *(int *)(a2 + 816);
      CMTimeMake(&v47, value, *(_DWORD *)(a2 + 232));
      v27 -= 96;
      v28 = *(_QWORD *)(a2 + 808) + v27;
      v29 = *(_OWORD *)v28;
      v55.epoch = *(_QWORD *)(v28 + 16);
      *(_OWORD *)&v55.value = v29;
      CMTimeSubtract(&v57, &v47, &v55);
      v30 = *(_QWORD *)(a2 + 808) + v27;
      v55 = v57;
      v31 = *(_OWORD *)(v30 + 24);
      v51.epoch = *(_QWORD *)(v30 + 40);
      *(_OWORD *)&v51.value = v31;
      CMTimeSubtract(&v56, &v55, &v51);
      v32 = *(_QWORD *)(a2 + 808) + v27;
      v33 = *(_OWORD *)(v32 + 72);
      v51.epoch = *(_QWORD *)(v32 + 88);
      *(_OWORD *)&v51.value = v33;
      v50 = v56;
      CMTimeAdd(&v55, &v51, &v50);
      v34 = *(_OWORD *)&v55.value;
      *(_QWORD *)(v32 + 88) = v55.epoch;
      *(_OWORD *)(v32 + 72) = v34;
      v35 = *(_QWORD *)(a2 + 808) + v27;
      v36 = *(_OWORD *)&v57.value;
      *(_QWORD *)(v35 + 40) = v57.epoch;
      *(_OWORD *)(v35 + 24) = v36;
      goto LABEL_12;
    default:
      return 0;
  }
}

uint64_t MovieTrackCreateEditSegmentArrayFromFragmentEditList(uint64_t a1, uint64_t a2, int a3)
{
  void *v4;
  _QWORD *v5;
  unsigned int *v6;
  int v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  char *v14;
  int64_t v15;
  int64_t v16;
  unsigned int *v17;
  unsigned int v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  int v29;
  int v30;
  uint64_t v31;
  int v33;
  int v34;
  unsigned int *v35;
  char *v36;
  uint64_t v38;
  CMTime time;
  CMTime v40;

  if (!*(_BYTE *)(a2 + 722) || !*(_BYTE *)(a2 + 727))
    return 0;
  v4 = *(void **)(a2 + 808);
  v38 = a2;
  if (v4)
  {
    v5 = (_QWORD *)(a2 + 808);
    free(v4);
    a2 = v38;
    *v5 = 0;
    v5[1] = 0;
  }
  v6 = *(unsigned int **)(a2 + 704);
  if (!v6)
  {
    v7 = 0;
    v30 = 1;
LABEL_25:
    v14 = 0;
    v29 = 0;
    *(_DWORD *)(a2 + 824) = v30;
LABEL_26:
    *(_QWORD *)(a2 + 808) = v14;
    *(_DWORD *)(a2 + 820) = v29;
    *(_DWORD *)(a2 + 816) = v7;
    v31 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = v31 | 2;
    if (a3)
    {
      if (*(_BYTE *)(a2 + 898))
        *(_QWORD *)(a2 + 16) = v31 | 0x200002;
      UpdateDurationsForEditSegmentChange((CMTime *)a1, a2);
    }
    return 0;
  }
  v7 = bswap32(v6[1]);
  if (v7 < 1)
  {
    v30 = 2;
    goto LABEL_25;
  }
  *(_DWORD *)(a2 + 824) = 5;
  if (v7 <= 4)
    v8 = 4;
  else
    v8 = v7;
  v36 = (char *)malloc_type_calloc(v8, 0x60uLL, 0x1000040565EDBD2uLL);
  if (v36)
  {
    v33 = v8;
    v34 = a3;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = v6 + 6;
    v35 = v6 + 2;
    v13 = v6 + 3;
    a2 = v38;
    v14 = v36;
    do
    {
      if (**(_BYTE **)(a2 + 704))
      {
        v15 = bswap64(*((_QWORD *)v12 - 1));
        v16 = bswap64(*((_QWORD *)v12 - 2));
        v17 = v12;
      }
      else
      {
        v15 = (int)bswap32(*v13);
        v16 = bswap32(*(v13 - 1));
        v17 = &v35[3 * v10 + 2];
      }
      v18 = *v17;
      v19 = &v14[v9];
      if (v15 == -1)
      {
        v21 = MEMORY[0x1E0CA2E18];
        *(_OWORD *)v19 = *MEMORY[0x1E0CA2E18];
        *((_QWORD *)v19 + 2) = *(_QWORD *)(v21 + 16);
      }
      else
      {
        CMTimeMake(&v40, v15, *(_DWORD *)(a2 + 232));
        v20 = *(_OWORD *)&v40.value;
        *((_QWORD *)v19 + 2) = v40.epoch;
        *(_OWORD *)v19 = v20;
      }
      v22 = &v14[v9];
      v23 = (uint64_t)&v14[v9 + 72];
      CMTimeMake(&v40, v16, *(_DWORD *)(a1 + 240));
      v24 = *(_OWORD *)&v40.value;
      *((_QWORD *)v22 + 11) = v40.epoch;
      *(_OWORD *)(v22 + 72) = v24;
      CMTimeMake(&v40, v11, *(_DWORD *)(a1 + 240));
      v25 = *(_OWORD *)&v40.value;
      *((_QWORD *)v22 + 8) = v40.epoch;
      *((_OWORD *)v22 + 3) = v25;
      v26 = v22 + 24;
      if (v18 == 256)
      {
        *(_OWORD *)v26 = *(_OWORD *)v23;
        *((_QWORD *)v26 + 2) = *(_QWORD *)(v23 + 16);
      }
      else
      {
        v27 = *(_OWORD *)v23;
        time.epoch = *(_QWORD *)(v23 + 16);
        *(_OWORD *)&time.value = v27;
        CMTimeMultiplyByFloat64(&v40, &time, (double)bswap32(v18) * 0.0000152587891);
        v28 = *(_OWORD *)&v40.value;
        *((_QWORD *)v26 + 2) = v40.epoch;
        *(_OWORD *)v26 = v28;
      }
      a2 = v38;
      v11 += v16;
      ++v10;
      v12 += 5;
      v9 += 96;
      v13 += 3;
      v14 = v36;
    }
    while (96 * v7 != v9);
    a3 = v34;
    v29 = v33;
    goto LABEL_26;
  }
  return FigSignalErrorAt();
}

void NoteEditSegmentModification(uint64_t a1, uint64_t a2, CMTime *a3, int a4)
{
  uint64_t v4;
  const __CFAllocator *v5;
  CFDictionaryRef v6;
  CMTime cf;

  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v4 | 2;
  if (*(_BYTE *)(a2 + 898))
    *(_QWORD *)(a2 + 16) = v4 | 0x200002;
  if (!a4 && *(_QWORD *)(a1 + 32))
  {
    cf = *a3;
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    cf.value = (CMTimeValue)CMTimeCopyAsDictionary(&cf, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
    if (cf.value)
      v6 = CFDictionaryCreate(v5, (const void **)kMovieInformationPayloadKey_AffectedTrackTime, (const void **)&cf, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    else
      v6 = 0;
    CMNotificationCenterGetDefaultLocalCenter();
    FigDeferNotificationToDispatchQueue();
    if (v6)
      CFRelease(v6);
    if (cf.value)
      CFRelease((CFTypeRef)cf.value);
  }
}

CMTime *UpdateDurationsForEditSegmentChange(CMTime *result, uint64_t a2)
{
  CMTime *v3;
  int v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  int32_t value;
  uint64_t epoch;
  CMTimeEpoch v13;
  uint64_t *v14;
  uint64_t v15;
  CMTimeEpoch v16;
  CMTime start;
  CMTime time;
  CMTimeRange range;

  v3 = result;
  start = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v4 = *(_DWORD *)(a2 + 816);
  v5 = (v4 - 1);
  if (v4 >= 1)
  {
    v6 = (_OWORD *)(*(_QWORD *)(a2 + 808) + 96 * v5 + 48);
    v7 = v5 + 1;
    while ((*((_BYTE *)v6 - 36) & 1) == 0)
    {
      v6 -= 6;
      if (v7-- <= 1)
        goto LABEL_8;
    }
    v9 = *v6;
    v10 = v6[2];
    *(_OWORD *)&range.start.epoch = v6[1];
    *(_OWORD *)&range.duration.timescale = v10;
    *(_OWORD *)&range.start.value = v9;
    CMTimeRangeGetEnd(&start, &range);
    value = v3[10].value;
    time = start;
    result = CMTimeConvertScale(&range.start, &time, value, kCMTimeRoundingMethod_QuickTime);
    start = range.start;
  }
LABEL_8:
  if (start.value != *(_QWORD *)(a2 + 136))
  {
    *(_QWORD *)(a2 + 136) = start.value;
    epoch = v3[12].epoch;
    if (epoch < 1)
    {
      v13 = 0;
    }
    else
    {
      v13 = 0;
      v14 = *(uint64_t **)&v3[13].timescale;
      do
      {
        v15 = *v14++;
        v16 = *(_QWORD *)(v15 + 136);
        if (v16 > v13)
          v13 = v16;
        --epoch;
      }
      while (epoch);
    }
    if (v3[9].epoch != v13)
    {
      v3[9].epoch = v13;
      v3[1].epoch |= 1uLL;
    }
  }
  return result;
}

uint64_t MovieTrackIntegrateFragmentSampleGroups(uint64_t a1, uint64_t a2)
{
  if (a2)
    MovieSampleGroupCollectionApplyFunction(a2, (uint64_t)IntegrateFragmentSampleGroupCollectionApplier, a1);
  return 0;
}

void IntegrateFragmentSampleGroupCollectionApplier(uint64_t a1, uint64_t a2)
{
  int v4;
  CFTypeRef v5;
  unint64_t v6;
  unsigned int v7;
  CFTypeRef cf;

  cf = 0;
  v7 = 0;
  v6 = 0;
  if (!MovieSampleGroupGetInfo(a1, (uint64_t)&v6, 0, 0, 0))
  {
    v4 = MovieTrackAddAndRetainSampleGroup((_QWORD *)a2, v6, v7, &cf);
    v5 = cf;
    if (!v4)
    {
      MovieSampleGroupIntegrateSampleGroup(*(_DWORD *)(a2 + 288), (uint64_t)cf, a1);
      v5 = cf;
    }
    if (v5)
      CFRelease(v5);
  }
}

uint64_t MovieTrackInitializeLowestDisplayStartTimeAndHighestDisplayEndTime(_QWORD *a1, uint64_t a2)
{
  CMTimeValue value;
  CMTimeValue v4;
  int v6;
  uint64_t v7;
  CMTime v8;
  CMTime v9;

  if (*(_BYTE *)(a2 + 576))
  {
    value = (int)bswap32(*(_DWORD *)(a2 + 568));
    v4 = (int)bswap32(*(_DWORD *)(a2 + 572));
LABEL_3:
    *(_QWORD *)(a2 + 104) = v4;
    *(_QWORD *)(a2 + 88) = value;
    *(_QWORD *)(a2 + 96) = 0xFFFFFFFF80000000;
    return 0;
  }
  if (*(_QWORD *)(a2 + 416))
  {
    v6 = *(_DWORD *)(a2 + 288);
    v7 = *(_QWORD *)(a2 + 728);
    if (v7)
      v6 += *(_DWORD *)(v7 + 8);
    if (v6)
    {
      v9 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
      v8 = v9;
      if (!MovieTrackGetDisplayTimeRange(a1, a2, &v9, &v8))
      {
        value = v9.value;
        v4 = v8.value;
        goto LABEL_3;
      }
    }
  }
  return 0;
}

uint64_t MovieSampleTableHaveCompositionShiftLeastInfo(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 576);
}

BOOL MovieSampleTableHaveTimeToSampleTable(uint64_t a1)
{
  return *(_QWORD *)(a1 + 416) != 0;
}

CMBlockBufferRef MovieTrackReviseParsedSampleCount(uint64_t a1, int a2)
{
  CMBlockBufferRef result;
  CMBlockBufferRef v4;
  BOOL v5;
  const void *v6;
  int v7;
  size_t v8;
  int v9;
  uint64_t v10;
  size_t v11;
  CMBlockBufferRef blockBufferOut;

  blockBufferOut = 0;
  *(_DWORD *)(a1 + 288) = a2;
  if (!*(_DWORD *)(a1 + 312))
  {
    if (!*(_DWORD *)(a1 + 340))
      return 0;
    *(_DWORD *)(a1 + 340) = a2;
    if (!*(_QWORD *)(a1 + 344))
      return 0;
    v7 = *(_DWORD *)(a1 + 336);
    v8 = a2;
    v9 = a2 + 2;
    if (a2 >= -1)
      v9 = a2 + 1;
    v10 = (uint64_t)v9 >> 1;
    if (v7 != 4)
      v10 = 0;
    if (v7 != 8)
      v8 = v10;
    if (v7 == 16)
      v11 = 2 * a2;
    else
      v11 = v8;
    result = (CMBlockBufferRef)CMBlockBufferCreateWithBufferReference((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CMBlockBufferRef *)(a1 + 344), 0, v11, 0, &blockBufferOut);
    if ((_DWORD)result)
      return result;
    result = blockBufferOut;
    if (!blockBufferOut)
      return result;
    v6 = *(const void **)(a1 + 344);
    *(_QWORD *)(a1 + 344) = blockBufferOut;
    goto LABEL_22;
  }
  *(_DWORD *)(a1 + 312) = a2;
  if (!*(_QWORD *)(a1 + 320))
    return 0;
  result = (CMBlockBufferRef)CMBlockBufferCreateWithBufferReference((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CMBlockBufferRef *)(a1 + 320), 0, 4 * a2, 0, &blockBufferOut);
  v4 = blockBufferOut;
  if ((_DWORD)result)
    v5 = 1;
  else
    v5 = blockBufferOut == 0;
  if (!v5)
  {
    v6 = *(const void **)(a1 + 320);
    *(_QWORD *)(a1 + 320) = blockBufferOut;
    result = v4;
LABEL_22:
    CFRetain(result);
    if (v6)
      CFRelease(v6);
    result = blockBufferOut;
    if (blockBufferOut)
    {
      CFRelease(blockBufferOut);
      return 0;
    }
  }
  return result;
}

uint64_t MovieTrackReviseSampleDependencyTable(uint64_t a1, int a2)
{
  uint64_t v4;
  CMBlockBufferRef v5;
  BOOL v6;
  const void *v7;
  CMBlockBufferRef blockBufferOut;

  blockBufferOut = 0;
  v4 = CMBlockBufferCreateWithBufferReference((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CMBlockBufferRef *)(a1 + 536), 0, a2, 0, &blockBufferOut);
  v5 = blockBufferOut;
  if ((_DWORD)v4)
    v6 = 1;
  else
    v6 = blockBufferOut == 0;
  if (!v6)
  {
    v7 = *(const void **)(a1 + 536);
    *(_QWORD *)(a1 + 536) = blockBufferOut;
    CFRetain(v5);
    if (v7)
      CFRelease(v7);
    if (blockBufferOut)
      CFRelease(blockBufferOut);
    *(_DWORD *)(a1 + 528) = a2;
  }
  return v4;
}

uint64_t MovieTrackReviseSyncSampleTable(uint64_t a1, signed int a2)
{
  uint64_t v3;
  size_t v5;
  unsigned int v6;
  uint64_t v7;
  CFTypeRef v8;
  const void *v9;
  CFTypeRef cf;
  unsigned int destination;

  v3 = *(unsigned int *)(a1 + 480);
  cf = 0;
  if ((int)v3 < 1)
    goto LABEL_10;
  v5 = 0;
  v6 = 0;
  while (1)
  {
    destination = 0;
    CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 488), v5, 4uLL, &destination);
    if ((int)bswap32(destination) > a2)
      break;
    ++v6;
    v5 += 4;
    if (4 * v3 == v5)
    {
      v6 = v3;
      break;
    }
  }
  if (v6)
  {
    v7 = CMBlockBufferCreateWithBufferReference((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CMBlockBufferRef *)(a1 + 488), 0, 4 * v6, 0, (CMBlockBufferRef *)&cf);
    v8 = cf;
    if ((_DWORD)v7)
      goto LABEL_14;
    v9 = *(const void **)(a1 + 488);
    *(_QWORD *)(a1 + 488) = cf;
    if (v8)
      CFRetain(v8);
  }
  else
  {
LABEL_10:
    v6 = 0;
    v9 = *(const void **)(a1 + 488);
    *(_QWORD *)(a1 + 488) = 0;
  }
  if (v9)
    CFRelease(v9);
  v7 = 0;
  *(_DWORD *)(a1 + 480) = v6;
  v8 = cf;
LABEL_14:
  if (v8)
    CFRelease(v8);
  return v7;
}

uint64_t MovieSampleTableNumSyncSampleEntries(uint64_t a1)
{
  return *(unsigned int *)(a1 + 480);
}

uint64_t MovieSampleTableGetSyncSampleNumber(uint64_t a1, int a2)
{
  unsigned int destination;

  destination = 0;
  CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 488), 4 * a2, 4uLL, &destination);
  return bswap32(destination);
}

uint64_t MovieTrackRevisePartialSyncSampleTable(uint64_t a1, signed int a2)
{
  uint64_t v3;
  size_t v5;
  unsigned int v6;
  uint64_t v7;
  CFTypeRef v8;
  const void *v9;
  CFTypeRef cf;
  unsigned int destination;

  v3 = *(unsigned int *)(a1 + 504);
  cf = 0;
  if ((int)v3 < 1)
    goto LABEL_10;
  v5 = 0;
  v6 = 0;
  while (1)
  {
    destination = 0;
    CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 512), v5, 4uLL, &destination);
    if ((int)bswap32(destination) > a2)
      break;
    ++v6;
    v5 += 4;
    if (4 * v3 == v5)
    {
      v6 = v3;
      break;
    }
  }
  if (v6)
  {
    v7 = CMBlockBufferCreateWithBufferReference((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CMBlockBufferRef *)(a1 + 512), 0, 4 * v6, 0, (CMBlockBufferRef *)&cf);
    v8 = cf;
    if ((_DWORD)v7)
      goto LABEL_14;
    v9 = *(const void **)(a1 + 512);
    *(_QWORD *)(a1 + 512) = cf;
    if (v8)
      CFRetain(v8);
  }
  else
  {
LABEL_10:
    v6 = 0;
    v9 = *(const void **)(a1 + 512);
    *(_QWORD *)(a1 + 512) = 0;
  }
  if (v9)
    CFRelease(v9);
  v7 = 0;
  *(_DWORD *)(a1 + 504) = v6;
  v8 = cf;
LABEL_14:
  if (v8)
    CFRelease(v8);
  return v7;
}

uint64_t MovieSampleTableNumPartialSyncSampleEntries(uint64_t a1)
{
  return *(unsigned int *)(a1 + 504);
}

uint64_t MovieTrackReviseCompositionOffsetTable(uint64_t a1, int a2)
{
  uint64_t v3;
  size_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  CMBlockBufferRef v9;
  BOOL v10;
  int v11;
  const void *v12;
  uint64_t v13;
  CMBlockBufferRef theSourceBuffer;
  uint64_t destination;

  v3 = *(unsigned int *)(a1 + 456);
  theSourceBuffer = 0;
  if ((int)v3 < 1)
  {
    v7 = 0;
    v12 = *(const void **)(a1 + 464);
    *(_QWORD *)(a1 + 464) = 0;
    if (!v12)
      goto LABEL_16;
    goto LABEL_15;
  }
  v5 = 0;
  v6 = 0;
  v7 = 1;
  while (1)
  {
    destination = 0;
    CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 464), v5, 8uLL, &destination);
    v6 += bswap32(destination);
    if (a2 <= v6)
      break;
    v5 += 8;
    ++v7;
    if (8 * v3 == v5)
    {
      v7 = v3;
      break;
    }
  }
  v8 = CMBlockBufferCreateWithBufferReference((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CMBlockBufferRef *)(a1 + 464), 0, 8 * v7, 0, &theSourceBuffer);
  if (!(_DWORD)v8)
  {
    v9 = theSourceBuffer;
    v10 = __OFSUB__(a2, v6);
    v11 = a2 - v6;
    if (v11 < 0 == v10)
    {
LABEL_12:
      v12 = *(const void **)(a1 + 464);
      *(_QWORD *)(a1 + 464) = v9;
      if (v9)
        CFRetain(v9);
      if (!v12)
        goto LABEL_16;
LABEL_15:
      CFRelease(v12);
LABEL_16:
      v13 = 0;
      *(_DWORD *)(a1 + 456) = v7;
      goto LABEL_17;
    }
    destination = 0;
    v8 = CMBlockBufferCopyDataBytes(theSourceBuffer, 8 * (v7 - 1), 8uLL, &destination);
    if (!(_DWORD)v8)
    {
      LODWORD(destination) = bswap32(bswap32(destination) + v11);
      v8 = CMBlockBufferReplaceDataBytes(&destination, theSourceBuffer, 8 * (v7 - 1), 8uLL);
      if (!(_DWORD)v8)
      {
        v9 = theSourceBuffer;
        goto LABEL_12;
      }
    }
  }
  v13 = v8;
LABEL_17:
  if (theSourceBuffer)
    CFRelease(theSourceBuffer);
  return v13;
}

uint64_t MovieTrackComputeNominalFrameRate(_QWORD *a1, uint64_t a2, float *a3)
{
  uint64_t v6;
  float v7;
  uint64_t v8;
  int v9;
  __int128 *v10;
  __int128 v11;
  CMTimeEpoch v12;
  uint64_t v13;
  const void **v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t PTSTimeValue;
  uint64_t v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  unsigned int v22;
  unsigned int v23;
  CMTimeEpoch v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double Seconds;
  uint64_t v35;
  float v36;
  float *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  CMTimeEpoch v41;
  CMTimeRange time1;
  CMTime v43;
  CMTime time2;
  const void **v45;

  v45 = 0;
  v6 = MoovAssureSampleTableParsed(a1, a2);
  v7 = 0.0;
  if ((_DWORD)v6)
  {
    v26 = v6;
    v14 = 0;
    goto LABEL_16;
  }
  v8 = *(_QWORD *)(a2 + 224);
  if (!v8)
  {
    v14 = 0;
    goto LABEL_15;
  }
  v9 = *(_DWORD *)(a2 + 288);
  if (*(_DWORD *)(a2 + 816) != 1)
    goto LABEL_9;
  v10 = *(__int128 **)(a2 + 808);
  if ((*((_DWORD *)v10 + 3) & 0x1D) != 1)
    goto LABEL_9;
  v11 = *v10;
  time1.start.epoch = *((_QWORD *)v10 + 2);
  *(_OWORD *)&time1.start.value = v11;
  v40 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&time2.value = *MEMORY[0x1E0CA2E68];
  v12 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  time2.epoch = v12;
  if (CMTimeCompare(&time1.start, &time2))
  {
    v41 = v12;
    v13 = MovieSampleAccessorCreate(a1, a2, &v45);
    v14 = v45;
    if ((_DWORD)v13)
    {
      v26 = v13;
      goto LABEL_16;
    }
    v15 = *(_QWORD *)(a2 + 808);
    *(_OWORD *)&time1.start.value = *(_OWORD *)v15;
    time1.start.epoch = *(_QWORD *)(v15 + 16);
    MovieSampleAccessorMoveToSampleAtPTS((uint64_t)v45, (uint64_t)&time1, 0, 0);
    v16 = *((_DWORD *)v14 + 20);
    PTSTimeValue = MovieSampleAccessorGetPTSTimeValue((uint64_t)v14);
    v18 = PTSTimeValue - MovieSampleAccessorGetDTSTimeValue((uint64_t)v14);
    v19 = *(__int128 **)(a2 + 808);
    v20 = *v19;
    v21 = v19[2];
    *(_OWORD *)&time1.start.epoch = v19[1];
    *(_OWORD *)&time1.duration.timescale = v21;
    *(_OWORD *)&time1.start.value = v20;
    CMTimeRangeGetEnd(&v43, &time1);
    MovieSampleAccessorMoveToSampleAtPTS((uint64_t)v14, (uint64_t)&v43, 0, 0);
    v22 = *((_DWORD *)v14 + 20);
    v39 = MovieSampleAccessorGetPTSTimeValue((uint64_t)v14);
    if (v18 == v39 - MovieSampleAccessorGetDTSTimeValue((uint64_t)v14))
    {
      v23 = v22;
      v24 = v41;
    }
    else
    {
      v37 = a3;
      v38 = PTSTimeValue;
      v28 = -120;
      v23 = v22;
      v29 = v22;
      while (v28 && v23 > v16)
      {
        MovieSampleAccessorStepBackPTS((uint64_t)v14);
        v23 = *((_DWORD *)v14 + 20);
        v30 = MovieSampleAccessorGetPTSTimeValue((uint64_t)v14);
        ++v28;
        if (v18 == v30 - MovieSampleAccessorGetDTSTimeValue((uint64_t)v14))
        {
          v39 = v30;
          goto LABEL_25;
        }
      }
      v23 = v29;
LABEL_25:
      v24 = v41;
      a3 = v37;
      PTSTimeValue = v38;
    }
    if (v23 > v16)
    {
      v7 = (float)(v23 - v16) / (float)((float)(v39 - PTSTimeValue) / (float)*(int *)(a2 + 232));
      v31 = *(_QWORD *)(a2 + 808);
      *(_OWORD *)&time1.start.value = *(_OWORD *)(v31 + 24);
      time1.start.epoch = *(_QWORD *)(v31 + 40);
      time2 = *(CMTime *)(v31 + 72);
      if (CMTimeCompare(&time1.start, &time2))
      {
        v32 = *(_QWORD *)(a2 + 808);
        *(_OWORD *)&time1.start.value = *(_OWORD *)(v32 + 72);
        time1.start.epoch = *(_QWORD *)(v32 + 88);
        *(_OWORD *)&time2.value = v40;
        time2.epoch = v24;
        if (CMTimeCompare(&time1.start, &time2) >= 1)
        {
          v33 = *(_QWORD *)(a2 + 808);
          *(_OWORD *)&time1.start.value = *(_OWORD *)(v33 + 24);
          time1.start.epoch = *(_QWORD *)(v33 + 40);
          Seconds = CMTimeGetSeconds(&time1.start);
          v35 = *(_QWORD *)(a2 + 808);
          *(_OWORD *)&time1.start.value = *(_OWORD *)(v35 + 72);
          time1.start.epoch = *(_QWORD *)(v35 + 88);
          v26 = 0;
          v36 = Seconds / CMTimeGetSeconds(&time1.start);
          v7 = v7 * v36;
          goto LABEL_16;
        }
      }
LABEL_15:
      v26 = 0;
      goto LABEL_16;
    }
  }
  else
  {
LABEL_9:
    v14 = 0;
  }
  v25 = *(_QWORD *)(a2 + 728);
  if (v25 && *(_QWORD *)(v25 + 56))
  {
    v8 += *(_QWORD *)v25;
    v9 += *(_DWORD *)(v25 + 8);
  }
  v26 = 0;
  v7 = (double)v9 * (double)*(int *)(a2 + 232) / (double)v8;
LABEL_16:
  MovieSampleAccessorDispose(v14);
  if (a3)
    *a3 = v7;
  return v26;
}

uint64_t MovieTrackComputePeakDataRate(_QWORD *a1, uint64_t a2, float *a3)
{
  uint64_t v6;
  uint64_t v7;
  const void **v8;
  int64_t DTSTimeValue;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  CMTimeValue value;
  uint64_t ChunkDetails;
  int64_t v19;
  CMTimeValue v20;
  uint64_t v21;
  __int128 *v22;
  __int128 *v23;
  __int128 *v24;
  __int128 *v25;
  __int128 *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 *v30;
  __int128 v31;
  __int128 *v32;
  __int128 *v33;
  uint64_t v34;
  float *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  CMTime v40;
  uint64_t v41;
  const void **v42;

  v41 = 0;
  v42 = 0;
  v6 = MoovAssureSampleTableParsed(a1, a2);
  if ((_DWORD)v6)
  {
    v34 = v6;
    v8 = 0;
LABEL_38:
    v16 = 0;
    goto LABEL_33;
  }
  v7 = MovieSampleAccessorCreate(a1, a2, &v42);
  v8 = v42;
  if ((_DWORD)v7)
  {
    v34 = v7;
    goto LABEL_38;
  }
  DTSTimeValue = MovieSampleAccessorGetDTSTimeValue((uint64_t)v42);
  CMTimeMake(&v40, DTSTimeValue, *((_DWORD *)v8[1] + 58));
  v10 = *(int *)(a2 + 232);
  if ((int)v10 < 1)
  {
    v34 = 0;
    goto LABEL_38;
  }
  v36 = a3;
  v37 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  value = v40.value;
  while (1)
  {
    v38 = 0;
    v39 = 0;
    v8 = v42;
    ChunkDetails = MovieSampleAccessorGetChunkDetails((uint64_t)v42, 0, 0, &v39, &v38, 0, 0, 0, 0);
    if ((_DWORD)ChunkDetails)
      break;
    if (!v38)
      goto LABEL_32;
    MovieSampleAccessorStepCursor((uint64_t)v8, v38, &v41);
    if (!v41 && v14 >= 1 && v14 < v10)
    {
      if ((uint64_t)(v13 / v14) > v15)
        v15 = v13 / v14;
      goto LABEL_32;
    }
    v19 = MovieSampleAccessorGetDTSTimeValue((uint64_t)v8);
    CMTimeMake(&v40, v19, *((_DWORD *)v8[1] + 58));
    v20 = v40.value;
    v21 = v40.value - value;
    if (v21 >= 1)
    {
      if (v14 >= v10)
      {
        v32 = &v16[v12];
        v14 -= *((_QWORD *)v32 + 1);
        v13 -= *(_QWORD *)v32;
        *((_QWORD *)v32 + 1) = v21;
        *(_QWORD *)v32 = v39;
        if (v12 + 1 == v11)
          v12 = 0;
        else
          ++v12;
      }
      else
      {
        if (v11 == v37)
        {
          v22 = (__int128 *)malloc_type_calloc(v37 + 30, 0x10uLL, 0x1000040451B5BE8uLL);
          v23 = v22;
          v24 = v22;
          if (v12 < v37)
          {
            v25 = &v16[v12];
            v26 = v22;
            v27 = v37 - (uint64_t)v12;
            do
            {
              v24 = v26 + 1;
              v28 = *v25++;
              *v26++ = v28;
              --v27;
            }
            while (v27);
          }
          if (v12 >= 1)
          {
            v29 = v12;
            v30 = v16;
            do
            {
              v31 = *v30++;
              *v24++ = v31;
              --v29;
            }
            while (v29);
          }
          free(v16);
          v12 = 0;
          v37 += 30;
          v16 = v23;
        }
        else
        {
          v23 = v16;
        }
        v33 = &v23[v11];
        *((_QWORD *)v33 + 1) = v21;
        *(_QWORD *)v33 = v39;
        ++v11;
      }
      v14 += v21;
      v13 += v39;
      if (v14 >= v10 && (uint64_t)(v13 / v14) > v15)
        v15 = v13 / v14;
    }
    value = v20;
    if (!v41)
    {
      v8 = v42;
LABEL_32:
      v34 = 0;
      *v36 = (float)(int)v10 * (float)v15;
      goto LABEL_33;
    }
  }
  v34 = ChunkDetails;
LABEL_33:
  MovieSampleAccessorDispose(v8);
  free(v16);
  return v34;
}

uint64_t MovieTrackComputeTotalTrackBytes(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *i;

  MEMORY[0x19402EA0C](*(_QWORD *)(a2 + 32));
  v6 = *(_QWORD *)(a2 + 840);
  if (!v6)
  {
    v9 = MoovAssureSampleTableParsed(a1, a2);
    if ((_DWORD)v9)
    {
      v7 = v9;
      goto LABEL_3;
    }
    v10 = *(_DWORD *)(a2 + 248);
    if (v10 || (v10 = *(_DWORD *)(a2 + 292)) != 0)
    {
      v11 = *(_DWORD *)(a2 + 244);
      v12 = *(_DWORD *)(a2 + 288);
      if (v11)
        v12 /= v11;
      v6 = v10 * (uint64_t)v12;
    }
    else if (*(int *)(a2 + 288) < 1)
    {
      v6 = 0;
    }
    else
    {
      v6 = 0;
      v13 = 0;
      do
      {
        v6 += (*(int (**)(uint64_t, uint64_t))(a2 + 592))(a2, v13);
        v13 = (v13 + 1);
      }
      while ((int)v13 < *(_DWORD *)(a2 + 288));
    }
    *(_QWORD *)(a2 + 840) = v6;
    v14 = *(_QWORD *)(a2 + 728);
    if (v14)
    {
      v15 = *(_QWORD **)(v14 + 56);
      if (v15)
      {
        v16 = 0;
        do
        {
          for (i = (_QWORD *)v15[9]; i; i = (_QWORD *)*i)
            v16 += TotalRunDataSize((uint64_t)v15, (uint64_t)i);
          v15 = (_QWORD *)*v15;
        }
        while (v15);
        v6 += v16;
        *(_QWORD *)(a2 + 840) = v6;
      }
    }
  }
  v7 = 0;
  *a3 = v6;
LABEL_3:
  MEMORY[0x19402EA24](*(_QWORD *)(a2 + 32));
  return v7;
}

uint64_t MovieTrackCopyLatentBaseDecodeTimeStampOfFirstTrackFragmentDictionary(CFAllocatorRef allocator, uint64_t a2, CFDictionaryRef *a3)
{
  CFDictionaryRef v4;
  CMTime v6;

  if ((*(_BYTE *)(a2 + 756) & 1) != 0)
  {
    v6 = *(CMTime *)(a2 + 744);
    v4 = CMTimeCopyAsDictionary(&v6, allocator);
  }
  else
  {
    v4 = 0;
  }
  *a3 = v4;
  return 0;
}

uint64_t MovieTrackComputeMinSampleDuration(_QWORD *a1, uint64_t a2, CMTime *a3)
{
  uint64_t v6;
  uint64_t ChunkDetails;
  const void **v8;
  uint64_t v9;
  int v10;
  uint64_t v13;
  uint64_t v15;
  BOOL v16;
  CMTime v17;
  const void **v18;

  v18 = 0;
  v17 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
  v6 = MoovAssureSampleTableParsed(a1, a2);
  if ((_DWORD)v6)
  {
    v13 = v6;
    v8 = 0;
  }
  else
  {
    ChunkDetails = MovieSampleAccessorCreate(a1, a2, &v18);
    v8 = v18;
    if (!(_DWORD)ChunkDetails)
    {
      while (1)
      {
        v16 = 0;
        v15 = 0;
        ChunkDetails = MovieSampleAccessorGetChunkDetails((uint64_t)v8, 0, 0, 0, &v15, 0, 0, &v16, 0);
        if ((_DWORD)ChunkDetails)
          break;
        if (v16)
        {
          UpdateMinSampleDuration((uint64_t)v8, &v17);
          if (MovieSampleAccessorStepCursor((uint64_t)v8, v15, 0))
            goto LABEL_16;
        }
        else if (v15 >= 1)
        {
          v9 = 1;
          do
          {
            UpdateMinSampleDuration((uint64_t)v8, &v17);
            v10 = MovieSampleAccessorStepCursor((uint64_t)v8, 1, 0);
          }
          while (v9++ < v15 && v10 == 0);
          if (v10)
          {
LABEL_16:
            v13 = 0;
            goto LABEL_17;
          }
        }
      }
    }
    v13 = ChunkDetails;
  }
LABEL_17:
  *a3 = v17;
  MovieSampleAccessorDispose(v8);
  return v13;
}

double UpdateMinSampleDuration(uint64_t a1, CMTime *a2)
{
  double result;
  CMTime v4;
  CMTime time1;
  CMTime v6;

  memset(&v6, 0, sizeof(v6));
  MovieSampleAccessorGetSampleDuration(a1, &v6);
  time1 = v6;
  v4 = *a2;
  if (CMTimeCompare(&time1, &v4) < 0)
  {
    result = *(double *)&v6.value;
    *a2 = v6;
  }
  return result;
}

uint64_t MovieTrackComputeMaxEditRate(_QWORD *a1, uint64_t a2, float *a3)
{
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  float v10;
  CMTime *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  double Seconds;
  uint64_t v18;
  __int128 v19;
  CMTime v21;
  CMTime time1;

  v5 = MoovAssureSampleTableParsed(a1, a2);
  v6 = 1.0;
  if (!(_DWORD)v5 && *(int *)(a2 + 816) >= 1)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 1.0;
    v11 = (CMTime *)MEMORY[0x1E0CA2E68];
    while (1)
    {
      v12 = *(_QWORD *)(a2 + 808);
      if ((*(_DWORD *)(v12 + v7 + 12) & 0x1D) != 1)
        goto LABEL_11;
      if ((*(_DWORD *)(v12 + v7 + 36) & 0x1D) != 1)
        goto LABEL_11;
      v13 = v12 + v7;
      v14 = *(_OWORD *)(v13 + 24);
      time1.epoch = *(_QWORD *)(v13 + 40);
      *(_OWORD *)&time1.value = v14;
      v21 = *v11;
      if (CMTimeCompare(&time1, &v21) < 1)
        goto LABEL_11;
      v15 = *(_QWORD *)(a2 + 808) + v7;
      v16 = *(_OWORD *)(v15 + 24);
      time1.epoch = *(_QWORD *)(v15 + 40);
      *(_OWORD *)&time1.value = v16;
      Seconds = CMTimeGetSeconds(&time1);
      v18 = *(_QWORD *)(a2 + 808) + v7;
      v19 = *(_OWORD *)(v18 + 72);
      time1.epoch = *(_QWORD *)(v18 + 88);
      *(_OWORD *)&time1.value = v19;
      v6 = Seconds / CMTimeGetSeconds(&time1);
      if (v9)
      {
        if (v10 >= v6)
          break;
      }
      v9 = 1;
LABEL_12:
      ++v8;
      v7 += 96;
      v10 = v6;
      if (v8 >= *(int *)(a2 + 816))
        goto LABEL_13;
    }
    v9 = 1;
LABEL_11:
    v6 = v10;
    goto LABEL_12;
  }
LABEL_13:
  *a3 = v6;
  return v5;
}

uint64_t MovieTrackAddParsedSampleDescriptionAndDataRefIndex(uint64_t a1, OpaqueCMBlockBuffer *a2, int a3)
{
  const __CFAllocator *v6;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v8;
  CFIndex i;
  const __CFArray *v10;
  CFIndex v11;
  const __CFArray *v12;
  OpaqueCMBlockBuffer *ValueAtIndex;
  unint64_t v14;
  unint64_t v15;
  int v16;
  _QWORD *v17;
  size_t v19;
  size_t totalLengthOut;
  size_t v21;
  size_t lengthAtOffsetOut;
  char *v23;
  char *dataPointerOut;

  if (!*(_QWORD *)(a1 + 40))
  {
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(a1 + 40) = Mutable;
    if (!Mutable)
      return FigSignalErrorAt();
    v8 = CFArrayCreateMutable(v6, 0, 0);
    *(_QWORD *)(a1 + 56) = v8;
    if (!v8)
      return FigSignalErrorAt();
  }
  for (i = 0; ; ++i)
  {
    v10 = *(const __CFArray **)(a1 + 40);
    v11 = v10 ? CFArrayGetCount(v10) : 0;
    v12 = *(const __CFArray **)(a1 + 40);
    if (i >= v11)
      break;
    ValueAtIndex = (OpaqueCMBlockBuffer *)CFArrayGetValueAtIndex(v12, i);
    v23 = 0;
    dataPointerOut = 0;
    v21 = 0;
    lengthAtOffsetOut = 0;
    v19 = 0;
    totalLengthOut = 0;
    if (!CMBlockBufferGetDataPointer(a2, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut)
      && lengthAtOffsetOut == totalLengthOut
      && !CMBlockBufferGetDataPointer(ValueAtIndex, 0, &v21, &v19, &v23)
      && v21 == v19
      && totalLengthOut == v21
      && totalLengthOut >= 0x10)
    {
      v14 = bswap64(*(_QWORD *)dataPointerOut);
      v15 = bswap64(*(_QWORD *)v23);
      if (v14 == v15
        && (v14 = bswap64(*(_QWORD *)(dataPointerOut + 6)), v15 = bswap64(*(_QWORD *)(v23 + 6)), v14 == v15))
      {
        v16 = 0;
      }
      else
      {
        v16 = v14 < v15 ? -1 : 1;
      }
      if (v21 != 16 && !v16)
        v16 = memcmp(dataPointerOut + 16, v23 + 16, v21 - 16);
      if (!v16)
        goto LABEL_27;
    }
  }
  CFArrayAppendValue(v12, a2);
  i = CFArrayGetCount(*(CFArrayRef *)(a1 + 40)) - 1;
LABEL_27:
  v17 = malloc_type_malloc(0x10uLL, 0x1000040451B5BE8uLL);
  if (!v17)
    return FigSignalErrorAt();
  *v17 = i;
  v17[1] = a3 - 1;
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 56), v17);
  return 0;
}

void MovieTrackRemoveAllSampleDescriptions(uint64_t a1)
{
  const void *v2;

  ReleaseSampleDescriptionInfoArray(a1);
  ReleaseDataReferenceInfoArray(a1);
  v2 = *(const void **)(a1 + 48);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 48) = 0;
  }
}

uint64_t MovieTrackIsSelfContained(uint64_t a1)
{
  const __CFArray *v2;
  CFIndex Count;
  _QWORD *v4;
  CFIndex v5;
  uint64_t v6;

  v2 = *(const __CFArray **)(a1 + 64);
  if (v2)
  {
    Count = CFArrayGetCount(v2);
    v4 = (_QWORD *)(a1 + 32);
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 32));
    if (Count < 1)
    {
LABEL_6:
      v6 = 1;
    }
    else
    {
      v5 = 0;
      while (!*(_DWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 64), v5))
      {
        if (Count == ++v5)
          goto LABEL_6;
      }
      v6 = 0;
    }
  }
  else
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 32));
    v6 = 1;
    v4 = (_QWORD *)(a1 + 32);
  }
  MEMORY[0x19402EA24](*v4);
  return v6;
}

uint64_t MovieTrackContainsUnsupportedDataReferences(uint64_t a1, uint64_t a2)
{
  const __CFArray *v3;
  CFIndex Count;
  _QWORD *v5;
  CFIndex v6;
  int v7;
  uint64_t v9;

  v3 = *(const __CFArray **)(a2 + 64);
  if (v3)
  {
    Count = CFArrayGetCount(v3);
    v5 = (_QWORD *)(a2 + 32);
    MEMORY[0x19402EA0C](*(_QWORD *)(a2 + 32));
    if (Count < 1)
    {
LABEL_10:
      v9 = 0;
    }
    else
    {
      v6 = 0;
      while (1)
      {
        v7 = *(_DWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 64), v6);
        if (v7 != 1970433056 && v7 != 0)
          break;
        if (++v6 >= Count)
          goto LABEL_10;
      }
      v9 = 1;
    }
  }
  else
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(a2 + 32));
    v9 = 0;
    v5 = (_QWORD *)(a2 + 32);
  }
  MEMORY[0x19402EA24](*v5);
  return v9;
}

uint64_t MovieTrackIsFrameReorderingRequired(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  size_t v4;
  int v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t destination;

  if (!*(_BYTE *)(a2 + 720)
    || MoovAssureSampleTableParsed(a1, a2)
    || (v3 = *(unsigned int *)(a2 + 456), (int)v3 < 2))
  {
LABEL_7:
    result = 0;
  }
  else
  {
    destination = 0;
    v4 = 8;
    CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a2 + 464), 0, 8uLL, &destination);
    v5 = HIDWORD(destination);
    v6 = 8 * v3;
    while (1)
    {
      destination = 0;
      CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a2 + 464), v4, 8uLL, &destination);
      if (HIDWORD(destination) != v5)
        break;
      v4 += 8;
      if (v6 == v4)
        goto LABEL_7;
    }
    result = 1;
  }
  v8 = *(_QWORD *)(a2 + 728);
  if (v8 && *(_QWORD *)(v8 + 56))
  {
    if (*(_BYTE *)(v8 + 13))
      return 1;
    else
      return result;
  }
  return result;
}

uint64_t MovieTrackIsChapterTrack(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _DWORD *i;

  v2 = *(_QWORD *)(a1 + 328);
  if (v2 < 1)
    return 0;
  for (i = (_DWORD *)(*(_QWORD *)(a1 + 344) + 8); *(i - 2) != 1667785072 || *i != *(_DWORD *)(a2 + 144); i += 3)
  {
    if (!--v2)
      return 0;
  }
  return 1;
}

uint64_t MovieInformationContainsChapters(uint64_t a1)
{
  uint64_t v1;
  int *v2;
  int v3;

  v1 = *(_QWORD *)(a1 + 328);
  if (v1 < 1)
    return 0;
  v2 = *(int **)(a1 + 344);
  while (1)
  {
    v3 = *v2;
    v2 += 3;
    if (v3 == 1667785072)
      break;
    if (!--v1)
      return 0;
  }
  return 1;
}

uint64_t MovieInformationRemoveOneTrackReference(uint64_t *a1, int a2, int a3, int a4)
{
  uint64_t v4;
  _DWORD *v9;
  size_t v10;
  uint64_t v11;

  v4 = a1[41];
  if (v4 >= 1)
  {
    v9 = (_DWORD *)a1[43];
    v10 = 12 * v4 - 12;
    v11 = v4;
    while (*v9 != a2 || v9[1] != a3 || v9[2] != a4)
    {
      v10 -= 12;
      v9 += 3;
      if (!--v11)
        return 0;
    }
    if (v11 != 1)
    {
      memmove(v9, v9 + 3, v10);
      v4 = a1[41];
    }
    a1[41] = v4 - 1;
    NoteTrackReferenceChange(a1, a2, a3, a4);
  }
  return 0;
}

uint64_t *NoteTrackReferenceChange(uint64_t *result, int a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = result[38];
  if (v4 <= 0)
    goto LABEL_14;
  v5 = result[40];
  v6 = (uint64_t *)v5;
  v7 = result[38];
  do
  {
    v8 = *v6;
    if (*(_DWORD *)(*v6 + 144) == a3)
      goto LABEL_6;
    ++v6;
    --v7;
  }
  while (v7);
  v8 = 0;
LABEL_6:
  while (1)
  {
    v9 = *(_QWORD *)v5;
    if (*(_DWORD *)(*(_QWORD *)v5 + 144) == a4)
      break;
    v5 += 8;
    if (!--v4)
    {
      v9 = 0;
      break;
    }
  }
  if (v8)
    *(_QWORD *)(v8 + 16) |= 0x100000uLL;
  if (!v9)
  {
LABEL_14:
    v13 = result[5];
    result += 5;
    v12 = v13 | 0x100;
    *result = v13 | 0x100;
    if (a2 != 1667785072)
      return result;
    goto LABEL_15;
  }
  v10 = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(v9 + 16) = v10 | 0x100000;
  if (a2 == 1667785072)
  {
    *(_QWORD *)(v9 + 16) = v10 | 0x300000;
    *(_BYTE *)(v9 + 898) = 1;
    v11 = result[5];
    result += 5;
    v12 = v11 | 0x100;
LABEL_15:
    *result = v12 | 0x4000;
    return result;
  }
  result[5] |= 0x100uLL;
  return result;
}

uint64_t MovieInformationRemoveAllTrackReferences(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v1 = a1[41];
  if (v1)
  {
    if (v1 >= 1)
    {
      v3 = 0;
      v4 = 0;
      do
      {
        NoteTrackReferenceChange(a1, *(_DWORD *)(a1[43] + v3), *(_DWORD *)(a1[43] + v3 + 4), *(_DWORD *)(a1[43] + v3 + 8));
        ++v4;
        v3 += 12;
      }
      while (v4 < a1[41]);
    }
    a1[41] = 0;
  }
  return 0;
}

uint64_t MovieInformationSetAudibleGroupID(uint64_t a1, int a2)
{
  *(_BYTE *)(a1 + 296) = 1;
  *(_DWORD *)(a1 + 300) = a2;
  return 0;
}

uint64_t MovieInformationAddOneTrackReference(uint64_t *a1, int a2, int a3, int a4)
{
  uint64_t result;
  int v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int *v14;
  int v15;
  int *v16;

  result = 0;
  if (a3 && a4)
  {
    if (a2 == 1952658996)
      v8 = 1953325924;
    else
      v8 = a2;
    v9 = a1[41];
    if (v9 < 1)
    {
LABEL_12:
      result = EnsureTrackReferenceArrayCapacityForAddition(a1);
      if (!(_DWORD)result)
      {
        v11 = a1[41];
        if (v11 < 1)
        {
          v13 = 0;
LABEL_21:
          if (v11 != v13)
          {
            memmove((void *)(a1[43] + 12 * v13 + 12), (const void *)(a1[43] + 12 * v13), 12 * (v11 - v13));
            v11 = a1[41];
          }
        }
        else
        {
          v12 = 0;
          v13 = 0;
          v14 = (int *)a1[43];
          do
          {
            v15 = *v14;
            v14 += 3;
            if (v15 == v8)
            {
              v12 = 1;
            }
            else if (v12)
            {
              goto LABEL_21;
            }
            ++v13;
          }
          while (v11 != v13);
          v13 = a1[41];
        }
        v16 = (int *)(a1[43] + 12 * v13);
        *v16 = v8;
        v16[1] = a3;
        v16[2] = a4;
        a1[41] = v11 + 1;
        NoteTrackReferenceChange(a1, v8, a3, a4);
        return 0;
      }
    }
    else
    {
      v10 = (_DWORD *)(a1[43] + 8);
      while (*(v10 - 2) != v8 || *(v10 - 1) != a3 || *v10 != a4)
      {
        v10 += 3;
        if (!--v9)
          goto LABEL_12;
      }
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t EnsureTrackReferenceArrayCapacityForAddition(_QWORD *a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v1 = a1[41];
  if (v1 != a1[42])
    return 0;
  v3 = (void *)a1[43];
  if (v3)
  {
    v4 = v1 + 4;
    v5 = malloc_type_realloc(v3, 12 * (v1 + 4), 0x10000403E1C8BA9uLL);
    if (v5)
    {
      a1[42] = v4;
      a1[43] = v5;
      return 0;
    }
  }
  else
  {
    *(_OWORD *)(a1 + 41) = xmmword_1932FCD00;
    v6 = malloc_type_malloc(0x60uLL, 0x10000403E1C8BA9uLL);
    a1[43] = v6;
    if (v6)
      return 0;
  }
  return FigSignalErrorAt();
}

uint64_t MovieInformationAddNewPerTrackInfo(_QWORD *a1, _BYTE *cf)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  CFTypeRef v9;
  uint64_t v10;
  CFTypeRef v11;

  if (cf[896])
    return FigSignalErrorAt();
  v4 = a1[38];
  if (v4 == a1[39])
  {
    v5 = (void *)a1[40];
    if (v5)
    {
      v6 = v4 + 4;
      v7 = malloc_type_realloc(v5, 8 * (v4 + 4), 0x2004093837F09uLL);
      if (v7)
      {
        a1[39] = v6;
        a1[40] = v7;
        goto LABEL_7;
      }
    }
    else
    {
      *((_OWORD *)a1 + 19) = xmmword_1932FCD00;
      v8 = malloc_type_malloc(0x40uLL, 0x2004093837F09uLL);
      a1[40] = v8;
      if (v8)
        goto LABEL_7;
    }
    return FigSignalErrorAt();
  }
LABEL_7:
  v9 = CFRetain(cf);
  v10 = a1[38];
  *(_QWORD *)(a1[40] + 8 * v10) = v9;
  a1[38] = v10 + 1;
  v11 = (CFTypeRef)a1[8];
  if (v11)
    v11 = CFRetain(v11);
  *((_QWORD *)cf + 80) = v11;
  if (a1[4])
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRegisterForBarrierSupport();
    cf[897] = 1;
  }
  return 0;
}

void MovieTrackEvaluateParsedLanguageCode(uint64_t a1, int a2)
{
  const __CFAllocator *v3;
  const __CFString *StringForLanguageCode;
  int v5;
  const char *v6;
  CFStringRef v7;

  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  StringForLanguageCode = FigCreateStringForLanguageCode((const __CFAllocator *)*MEMORY[0x1E0C9AE00], *(unsigned __int16 *)(a1 + 716), a2);
  MovieTrackSetLanguageCodeString(a1, StringForLanguageCode);
  if (StringForLanguageCode)
    CFRelease(StringForLanguageCode);
  if (!*(_QWORD *)(a1 + 848))
  {
    v5 = *(__int16 *)(a1 + 716);
    if (v5 > 83)
    {
      switch(v5)
      {
        case 84:
          v6 = "ms-Arab";
          break;
        case 146:
          v6 = "ga-Latg";
          break;
        case 150:
          v6 = "az";
          break;
        default:
          return;
      }
    }
    else
    {
      switch(*(_WORD *)(a1 + 716))
      {
        case '1':
          v6 = "az-Cyrl";
          break;
        case '2':
          v6 = "az-Arab";
          break;
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
          return;
        case '9':
          v6 = "mn-Mong";
          break;
        case ':':
          v6 = "mn";
          break;
        default:
          if (v5 == 19)
          {
            v6 = "zh-Hant";
          }
          else
          {
            if (v5 != 33)
              return;
            v6 = "zh-Hans";
          }
          break;
      }
    }
    v7 = CFStringCreateWithCStringNoCopy(v3, v6, 0x600u, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    if (v7)
      *(_QWORD *)(a1 + 848) = v7;
  }
}

void MovieTrackEvaluateAlternateTrackGroupAssignment(uint64_t a1)
{
  int v2;
  int v3;
  const __CFArray *v4;
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v7;
  const opaqueCMFormatDescription *ValueAtIndex;
  CFIndex v9;
  BOOL v10;
  FourCharCode MediaSubType;

  v2 = *(unsigned __int16 *)(a1 + 150);
  if (*(_BYTE *)(a1 + 740))
  {
    v3 = *(unsigned __int16 *)(a1 + 738);
    v4 = MovieTrackCopyFormatDescriptionArray(a1);
    if (!v4)
      goto LABEL_15;
    v5 = v4;
    Count = CFArrayGetCount(v4);
    if (Count < 1)
    {
      CFRelease(v5);
      goto LABEL_15;
    }
    v7 = Count;
    ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(v5, 0);
    if (CMFormatDescriptionGetMediaType(ValueAtIndex) == 1952807028)
    {
      v9 = 1;
      v10 = 1;
      do
      {
        MediaSubType = CMFormatDescriptionGetMediaSubType(ValueAtIndex);
        if (MediaSubType != 1937142900 && MediaSubType != 2021028980 && MediaSubType != 2004251764)
          break;
        if (!FigValidateRequiredFeaturesOfFormatDescription(ValueAtIndex))
          break;
        v10 = v9 < v7;
        if (v7 == v9)
          break;
        ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(v5, v9++);
      }
      while (CMFormatDescriptionGetMediaType(ValueAtIndex) == 1952807028);
      CFRelease(v5);
      if (v10)
        goto LABEL_18;
LABEL_15:
      if (*(unsigned __int16 *)(a1 + 864) == v3)
        return;
      *(_WORD *)(a1 + 864) = v3;
      goto LABEL_20;
    }
    CFRelease(v5);
  }
LABEL_18:
  if (*(unsigned __int16 *)(a1 + 864) == v2)
    return;
  *(_WORD *)(a1 + 864) = v2;
LABEL_20:
  *(_QWORD *)(a1 + 16) |= 0x1000uLL;
}

void MovieTrackCreateEnhancedGaplessInfo(uint64_t a1, uint64_t a2)
{
  const __CFArray *v3;
  const __CFArray *v4;
  const AudioFormatListItem *ValueAtIndex;
  CMTime v6;
  CMTime v7;
  uint64_t v8;
  int64_t v9;
  CFTypeRef v10;

  v10 = 0;
  if (*(_DWORD *)(a2 + 24) == 1936684398)
  {
    if (*(_QWORD *)(a2 + 832))
    {
      FigSignalErrorAt();
    }
    else
    {
      MovieInformationCreateiTunesMetadataReader(a1, &v10);
      if (!v10)
        return;
      v3 = MovieTrackCopyFormatDescriptionArray(a2);
      if (v3)
      {
        v4 = v3;
        if (CFArrayGetCount(v3) >= 1)
        {
          v8 = 0;
          v9 = 0;
          if (FigGaplessInfoFetchiTunesParametersFromMetadataReader((uint64_t)v10, (uint64_t)&v8))
          {
            ValueAtIndex = (const AudioFormatListItem *)CFArrayGetValueAtIndex(v4, 0);
            memset(&v7, 0, sizeof(v7));
            MovieTrackGetMediaDuration(a2, (uint64_t)&v7);
            v6 = v7;
            *(_QWORD *)(a2 + 832) = FigGaplessInfoCreateEnhanced_CorrectingWithUneditedDuration(ValueAtIndex, &v6, v8, SHIDWORD(v8), v9);
          }
        }
        CFRelease(v4);
      }
    }
    if (v10)
      CFRelease(v10);
  }
}

uint64_t MovieInformationCreateiTunesMetadataReader(uint64_t a1, _QWORD *a2)
{
  const __CFDictionary *v4;
  const void *Value;

  v4 = *(const __CFDictionary **)(a1 + 352);
  if (v4 && (Value = CFDictionaryGetValue(v4, CFSTR("com.apple.itunes"))) != 0)
    return FigMetadataReaderCreateForiTunesMetadataArray(*MEMORY[0x1E0C9AE00], Value, a2);
  else
    return MovieInformationCreateiTunesMetadataReaderFromByteStream(a1, a2);
}

uint64_t MovieTrackCopyEnhancedGaplessInfo(uint64_t a1, _QWORD *a2)
{
  CFTypeRef v4;

  if (!a2)
    return FigSignalErrorAt();
  if (*(_DWORD *)(a1 + 24) != 1936684398)
    return 4294954516;
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 32));
  v4 = *(CFTypeRef *)(a1 + 832);
  if (v4)
    v4 = CFRetain(v4);
  *a2 = v4;
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 32));
  return 0;
}

uint64_t MovieTrackInvalidateEnhancedGaplessInfo(uint64_t result)
{
  uint64_t v1;
  const void *v2;

  if (*(_DWORD *)(result + 24) == 1936684398)
  {
    v1 = result;
    MEMORY[0x19402EA0C](*(_QWORD *)(result + 32));
    v2 = *(const void **)(v1 + 832);
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)(v1 + 832) = 0;
    }
    JUMPOUT(0x19402EA24);
  }
  return result;
}

uint64_t MovieTrackCreate(uint64_t *a1)
{
  double Current;
  uint64_t Instance;
  uint64_t v4;
  unint64_t v5;
  const __CFString *v6;
  uint64_t v7;

  Current = CFAbsoluteTimeGetCurrent();
  if (sRegisterMoviePerTrackInfoTypeOnce != -1)
    dispatch_once_f(&sRegisterMoviePerTrackInfoTypeOnce, 0, (dispatch_function_t)RegisterMoviePerTrackInfoType);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v4 = FigReentrantMutexCreate();
    *(_QWORD *)(Instance + 32) = v4;
    if (v4)
    {
      v5 = (unint64_t)(Current + *MEMORY[0x1E0C9ADE8]);
      *(_BYTE *)(Instance + 200) = 1;
      *(_DWORD *)(Instance + 184) = 1065353216;
      *(_OWORD *)(Instance + 152) = kIdentityMatrix_0;
      *(_OWORD *)(Instance + 168) = unk_1932FCD44;
      *(_QWORD *)(Instance + 120) = v5;
      *(_QWORD *)(Instance + 128) = v5;
      *(_DWORD *)(Instance + 196) = 1065353216;
      *(_DWORD *)(Instance + 232) = 0;
      *(_QWORD *)(Instance + 208) = v5;
      *(_QWORD *)(Instance + 216) = v5;
      *(_OWORD *)(Instance + 88) = xmmword_1932FCD10;
      *(_QWORD *)(Instance + 104) = 0x8000000000000000;
      *(_QWORD *)(Instance + 112) = 0;
      *(_DWORD *)(Instance + 296) = 0x80000000;
      *(_QWORD *)(Instance + 304) = 0x8000000000000000;
      v6 = (const __CFString *)CFRetain(CFSTR("und"));
      *(_QWORD *)(Instance + 856) = v6;
      v7 = 0;
      *(_WORD *)(Instance + 236) = FigGetISOLanguageCodeForString(v6);
      *(_QWORD *)(Instance + 584) = GetNumSamples_stsz;
      *(_QWORD *)(Instance + 592) = GetSampleSize_stsz;
      *(_QWORD *)(Instance + 600) = GetSampleSizeFieldSize_stsz;
      *(_QWORD *)(Instance + 608) = GetSizeTable_stsz;
      *(_QWORD *)(Instance + 616) = GetChunkOffset_stco;
      *(_QWORD *)(Instance + 624) = GetChunkCount_stco;
      *(_QWORD *)(Instance + 632) = GetChunkTable_stco;
    }
    else
    {
      v7 = FigSignalErrorAt();
      if ((_DWORD)v7)
      {
        CFRelease((CFTypeRef)Instance);
        Instance = 0;
      }
    }
  }
  else
  {
    v7 = FigSignalErrorAt();
  }
  *a1 = Instance;
  return v7;
}

uint64_t MovieInformationGetNextTrackID(uint64_t a1)
{
  return *(unsigned int *)(a1 + 252);
}

uint64_t MovieInformationGetBasicMetrics(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t a5)
{
  __int128 v5;
  __int128 v6;

  if (a2)
    *a2 = *(_DWORD *)(a1 + 244);
  if (a3)
    *a3 = *(_DWORD *)(a1 + 248);
  if (a4)
    *a4 = *(_DWORD *)(a1 + 240);
  if (a5)
  {
    v5 = *(_OWORD *)(a1 + 256);
    v6 = *(_OWORD *)(a1 + 272);
    *(_DWORD *)(a5 + 32) = *(_DWORD *)(a1 + 288);
    *(_OWORD *)a5 = v5;
    *(_OWORD *)(a5 + 16) = v6;
  }
  return 0;
}

uint64_t MovieInformationGetTimeInfo(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  if (a2)
    *a2 = *(_QWORD *)(a1 + 216);
  if (a3)
    *a3 = *(_QWORD *)(a1 + 224);
  return 0;
}

uint64_t MovieInformationGetMoovLocation(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  if (a2)
    *a2 = *(_QWORD *)(a1 + 96);
  if (a3)
    *a3 = *(_QWORD *)(a1 + 104);
  return 0;
}

double MovieInformationGetMovieDuration@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v5;
  uint64_t v6;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  CMTimeMake((CMTime *)a2, *(_QWORD *)(a1 + 232), *(_DWORD *)(a1 + 240));
  if (*(_BYTE *)(a1 + 157))
  {
    MovieDurationWithFragmentContribution(a1, (uint64_t)&v5);
    result = *(double *)&v5;
    *(_OWORD *)a2 = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t MovieInformationGetPSSHDataEntries(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(a1 + 360);
  return 0;
}

uint64_t MovieInformationMetadataFormatIsAvailable(_QWORD *a1, CFTypeRef cf1)
{
  const __CFString *v4;
  uint64_t v5;
  uint64_t result;

  v4 = CFSTR("com.apple.quicktime.udta");
  if (CFEqual(cf1, CFSTR("com.apple.quicktime.udta")))
  {
    v5 = a1[14];
  }
  else
  {
    v4 = CFSTR("org.mp4ra");
    if (CFEqual(cf1, CFSTR("org.mp4ra")))
    {
      v5 = a1[15];
    }
    else
    {
      v4 = CFSTR("com.apple.quicktime.mdta");
      if (CFEqual(cf1, CFSTR("com.apple.quicktime.mdta")))
      {
        v5 = a1[16];
      }
      else
      {
        v4 = CFSTR("com.apple.itunes");
        result = CFEqual(cf1, CFSTR("com.apple.itunes"));
        if (!(_DWORD)result)
          return result;
        v5 = a1[17];
      }
    }
  }
  if (v5 > 0)
    return 1;
  result = a1[44];
  if (result)
    return CFDictionaryGetValue((CFDictionaryRef)result, v4) != 0;
  return result;
}

const __CFDictionary *MovieInformationGetMovieMetadataItemArray(uint64_t a1, const void *a2)
{
  const __CFDictionary *result;

  result = *(const __CFDictionary **)(a1 + 352);
  if (result)
    return (const __CFDictionary *)CFDictionaryGetValue(result, a2);
  return result;
}

uint64_t MovieInformationCreateQuickTimeUserDataReader(uint64_t *a1, _QWORD *a2)
{
  const __CFDictionary *v4;
  const void *Value;

  v4 = (const __CFDictionary *)a1[44];
  if (v4 && (Value = CFDictionaryGetValue(v4, CFSTR("com.apple.quicktime.udta"))) != 0)
    return FigMetadataReaderCreateForQuickTimeUserDataArray(*MEMORY[0x1E0C9AE00], Value, a2);
  else
    return MovieInformationCreateQuickTimeUserDataReaderFromByteStream(a1, a2);
}

uint64_t MovieInformationCreateQuickTimeUserDataReaderFromByteStream(uint64_t *a1, _QWORD *a2)
{
  CFAllocatorRef v4;

  if (a1[14] < 1)
  {
    *a2 = 0;
    return 0;
  }
  else
  {
    v4 = CFGetAllocator(a1);
    return FigMetadataReaderCreateForQuickTimeUserData((uint64_t)v4, a1[7], a1[14], (uint64_t)a2);
  }
}

uint64_t MovieInformationCreateISOUserDataReader(uint64_t *a1, _QWORD *a2)
{
  const __CFDictionary *v4;
  const void *Value;

  v4 = (const __CFDictionary *)a1[44];
  if (v4 && (Value = CFDictionaryGetValue(v4, CFSTR("org.mp4ra"))) != 0)
    return FigMetadataReaderCreateForISOUserDataArray(*MEMORY[0x1E0C9AE00], Value, a2);
  else
    return MovieInformationCreateISOUserDataReaderFromByteStream(a1, a2);
}

uint64_t MovieInformationCreateISOUserDataReaderFromByteStream(uint64_t *a1, _QWORD *a2)
{
  CFAllocatorRef v4;

  if (a1[15] < 1)
  {
    *a2 = 0;
    return 0;
  }
  else
  {
    v4 = CFGetAllocator(a1);
    return FigMetadataReaderCreateForISOUserData((uint64_t)v4, a1[7], a1[15], (uint64_t)a2);
  }
}

uint64_t MovieInformationCreateQuickTimeMetadataReader(uint64_t a1, _QWORD *a2)
{
  const __CFDictionary *v4;
  const void *Value;

  v4 = *(const __CFDictionary **)(a1 + 352);
  if (v4 && (Value = CFDictionaryGetValue(v4, CFSTR("com.apple.quicktime.mdta"))) != 0)
    return FigMetadataReaderCreateForQuickTimeMetadataArray(*MEMORY[0x1E0C9AE00], Value, a2);
  else
    return MovieInformationCreateQuickTimeMetadataReaderFromByteStream(a1, a2);
}

uint64_t MovieInformationCreateQuickTimeMetadataReaderFromByteStream(uint64_t a1, _QWORD *a2)
{
  CFAllocatorRef v4;

  if (*(uint64_t *)(a1 + 128) < 1)
  {
    *a2 = 0;
    return 0;
  }
  else
  {
    v4 = CFGetAllocator((CFTypeRef)a1);
    return FigMetadataReaderCreateForQuickTimeMetadata((uint64_t)v4, *(const void **)(a1 + 56), *(_QWORD *)(a1 + 128), a2);
  }
}

uint64_t MovieInformationCreateiTunesMetadataReaderFromByteStream(uint64_t a1, _QWORD *a2)
{
  CFAllocatorRef v4;

  if (*(uint64_t *)(a1 + 136) < 1)
  {
    *a2 = 0;
    return 0;
  }
  else
  {
    v4 = CFGetAllocator((CFTypeRef)a1);
    return FigMetadataReaderCreateForiTunes((uint64_t)v4, *(const void **)(a1 + 56), *(_QWORD *)(a1 + 136), a2);
  }
}

uint64_t MovieTrackSupplementQuickTimeUserDataFromBlockBuffer(const void *a1, uint64_t *a2, uint64_t a3)
{
  CFAllocatorRef v6;
  uint64_t v7;
  const __CFAllocator *v8;
  const __CFAllocator *v9;
  uint64_t ConcatenationOfTwoArrays;
  uint64_t v11;
  void *v12;
  CFDictionaryRef v13;
  const __CFAllocator *v14;
  CFTypeRef v16;
  CFTypeRef v17;
  CFArrayRef theArray;
  CFTypeRef cf;

  theArray = 0;
  cf = 0;
  v16 = 0;
  v17 = 0;
  v6 = CFGetAllocator(a1);
  v7 = FigMetadataReaderCreateForQuickTimeUserDataBlockBuffer((uint64_t)v6, a3, &cf);
  if ((_DWORD)v7)
    goto LABEL_29;
  v8 = CFGetAllocator(a1);
  v7 = FigMetadataCopyAllMetadataItems(v8, (uint64_t)cf, &theArray);
  if ((_DWORD)v7)
    goto LABEL_29;
  if (!theArray || CFArrayGetCount(theArray) < 1)
  {
    v11 = 0;
LABEL_10:
    v12 = 0;
    v13 = 0;
    goto LABEL_15;
  }
  v7 = MovieTrackCreateQuickTimeUserDataReader((uint64_t)a1, a2, &v17);
  if ((_DWORD)v7)
  {
LABEL_29:
    v11 = v7;
    goto LABEL_10;
  }
  if (v17)
  {
    v9 = CFGetAllocator(a1);
    v7 = FigMetadataCopyAllMetadataItems(v9, (uint64_t)v17, (__CFArray **)&v16);
    if (!(_DWORD)v7)
    {
      ConcatenationOfTwoArrays = FigCFArrayCreateConcatenationOfTwoArrays();
      goto LABEL_13;
    }
    goto LABEL_29;
  }
  LODWORD(ConcatenationOfTwoArrays) = (_DWORD)theArray;
  if (!theArray)
  {
    v12 = 0;
    goto LABEL_14;
  }
  ConcatenationOfTwoArrays = (uint64_t)CFRetain(theArray);
LABEL_13:
  v12 = (void *)ConcatenationOfTwoArrays;
LABEL_14:
  MovieTrackSetTrackMetadataItemArray(ConcatenationOfTwoArrays, (uint64_t)a2, CFSTR("com.apple.quicktime.udta"), v12);
  v14 = CFGetAllocator(a1);
  v13 = CFDictionaryCreate(v14, (const void **)&kFigMetadataFormat_QuickTimeUserData, (const void **)&theArray, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  PostTrackMetadataSupplementedNotification((uint64_t)a1, (uint64_t)a2, v13);
  v11 = 0;
LABEL_15:
  if (cf)
    CFRelease(cf);
  if (theArray)
    CFRelease(theArray);
  if (v17)
    CFRelease(v17);
  if (v16)
    CFRelease(v16);
  if (v12)
    CFRelease(v12);
  if (v13)
    CFRelease(v13);
  return v11;
}

uint64_t MovieTrackCreateQuickTimeUserDataReader(uint64_t a1, uint64_t *cf, _QWORD *a3)
{
  const __CFDictionary *v6;
  const void *Value;

  v6 = (const __CFDictionary *)cf[111];
  if (v6 && (Value = CFDictionaryGetValue(v6, CFSTR("com.apple.quicktime.udta"))) != 0)
    return FigMetadataReaderCreateForQuickTimeUserDataArray(*MEMORY[0x1E0C9AE00], Value, a3);
  else
    return MovieTrackCreateQuickTimeUserDataReaderFromByteStream(a1, cf, a3);
}

uint64_t MovieTrackSetTrackMetadataItemArray(int a1, uint64_t a2, void *key, void *value)
{
  __CFDictionary *Mutable;
  uint64_t result;
  uint64_t v9;

  Mutable = *(__CFDictionary **)(a2 + 888);
  if (!Mutable)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *(_QWORD *)(a2 + 888) = Mutable;
  }
  CFDictionarySetValue(Mutable, key, value);
  result = FigCFEqual();
  if ((_DWORD)result)
  {
    v9 = 8;
  }
  else
  {
    result = FigCFEqual();
    if ((_DWORD)result)
    {
      v9 = 32;
    }
    else
    {
      result = FigCFEqual();
      v9 = 16 * ((_DWORD)result != 0);
    }
  }
  *(_QWORD *)(a2 + 16) |= v9;
  return result;
}

void PostTrackMetadataSupplementedNotification(uint64_t a1, uint64_t a2, void *a3)
{
  CFNumberRef v4;
  CFNumberRef v5;
  CFIndex v6;
  const __CFAllocator *v7;
  CFDictionaryRef v8;
  CFDictionaryRef v9;
  uint64_t v10;
  void *values;
  CFNumberRef v12;
  void *keys;
  const __CFString *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v14 = 0;
  v12 = 0;
  if ((*(_BYTE *)(a1 + 16) & 4) == 0 && !*(_QWORD *)(a1 + 32))
    return;
  keys = CFSTR("Metadata");
  values = a3;
  if (!*(_DWORD *)(a1 + 184))
  {
    v5 = 0;
    goto LABEL_7;
  }
  v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, (const void *)(a1 + 188));
  v5 = v4;
  if (!v4)
  {
LABEL_7:
    v6 = 1;
    goto LABEL_8;
  }
  v14 = CFSTR("SequenceNumber");
  v12 = v4;
  v6 = 2;
LABEL_8:
  v7 = CFGetAllocator((CFTypeRef)a1);
  v8 = CFDictionaryCreate(v7, (const void **)&keys, (const void **)&values, v6, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)(a1 + 32);
    CMNotificationCenterGetDefaultLocalCenter();
    if (v10)
      FigDeferNotificationToDispatchQueue();
    else
      CMNotificationCenterPostNotification();
    CFRelease(v9);
  }
  if (v5)
    CFRelease(v5);
}

uint64_t MovieTrackSupplementISOUserDataFromBlockBuffer(const void *a1, uint64_t *a2, uint64_t a3)
{
  CFAllocatorRef v6;
  uint64_t v7;
  const __CFAllocator *v8;
  const __CFAllocator *v9;
  uint64_t ConcatenationOfTwoArrays;
  uint64_t v11;
  void *v12;
  CFDictionaryRef v13;
  const __CFAllocator *v14;
  CFTypeRef v16;
  CFTypeRef v17;
  CFArrayRef theArray;
  CFTypeRef cf;

  theArray = 0;
  cf = 0;
  v16 = 0;
  v17 = 0;
  v6 = CFGetAllocator(a1);
  v7 = FigMetadataReaderCreateForISOUserDataBlockBuffer((uint64_t)v6, a3, &cf);
  if ((_DWORD)v7)
    goto LABEL_29;
  v8 = CFGetAllocator(a1);
  v7 = FigMetadataCopyAllMetadataItems(v8, (uint64_t)cf, &theArray);
  if ((_DWORD)v7)
    goto LABEL_29;
  if (!theArray || CFArrayGetCount(theArray) < 1)
  {
    v11 = 0;
LABEL_10:
    v12 = 0;
    v13 = 0;
    goto LABEL_15;
  }
  v7 = MovieTrackCreateISOUserDataReader((uint64_t)a1, a2, &v17);
  if ((_DWORD)v7)
  {
LABEL_29:
    v11 = v7;
    goto LABEL_10;
  }
  if (v17)
  {
    v9 = CFGetAllocator(a1);
    v7 = FigMetadataCopyAllMetadataItems(v9, (uint64_t)v17, (__CFArray **)&v16);
    if (!(_DWORD)v7)
    {
      ConcatenationOfTwoArrays = FigCFArrayCreateConcatenationOfTwoArrays();
      goto LABEL_13;
    }
    goto LABEL_29;
  }
  LODWORD(ConcatenationOfTwoArrays) = (_DWORD)theArray;
  if (!theArray)
  {
    v12 = 0;
    goto LABEL_14;
  }
  ConcatenationOfTwoArrays = (uint64_t)CFRetain(theArray);
LABEL_13:
  v12 = (void *)ConcatenationOfTwoArrays;
LABEL_14:
  MovieTrackSetTrackMetadataItemArray(ConcatenationOfTwoArrays, (uint64_t)a2, CFSTR("org.mp4ra"), v12);
  v14 = CFGetAllocator(a1);
  v13 = CFDictionaryCreate(v14, (const void **)&kFigMetadataFormat_ISOUserData, (const void **)&theArray, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  PostTrackMetadataSupplementedNotification((uint64_t)a1, (uint64_t)a2, v13);
  v11 = 0;
LABEL_15:
  if (cf)
    CFRelease(cf);
  if (theArray)
    CFRelease(theArray);
  if (v17)
    CFRelease(v17);
  if (v16)
    CFRelease(v16);
  if (v12)
    CFRelease(v12);
  if (v13)
    CFRelease(v13);
  return v11;
}

uint64_t MovieTrackCreateISOUserDataReader(uint64_t a1, uint64_t *cf, _QWORD *a3)
{
  const __CFDictionary *v6;
  const void *Value;

  v6 = (const __CFDictionary *)cf[111];
  if (v6 && (Value = CFDictionaryGetValue(v6, CFSTR("org.mp4ra"))) != 0)
    return FigMetadataReaderCreateForISOUserDataArray(*MEMORY[0x1E0C9AE00], Value, a3);
  else
    return MovieTrackCreateISOUserDataReaderFromByteStream(a1, cf, a3);
}

uint64_t MovieTrackMetadataFormatIsAvailable(int a1, _QWORD *a2, CFTypeRef cf1)
{
  const __CFString *v5;
  uint64_t v6;
  uint64_t result;

  v5 = CFSTR("com.apple.quicktime.udta");
  if (CFEqual(cf1, CFSTR("com.apple.quicktime.udta")))
  {
    v6 = a2[84];
  }
  else
  {
    v5 = CFSTR("org.mp4ra");
    if (CFEqual(cf1, CFSTR("org.mp4ra")))
    {
      v6 = a2[85];
    }
    else
    {
      v5 = CFSTR("com.apple.quicktime.mdta");
      result = CFEqual(cf1, CFSTR("com.apple.quicktime.mdta"));
      if (!(_DWORD)result)
        return result;
      v6 = a2[86];
    }
  }
  if (v6 > 0)
    return 1;
  result = a2[111];
  if (result)
    return CFDictionaryGetValue((CFDictionaryRef)result, v5) != 0;
  return result;
}

const __CFDictionary *MovieTrackGetTrackMetadataItemArray(uint64_t a1, const void *a2)
{
  const __CFDictionary *result;

  result = *(const __CFDictionary **)(a1 + 888);
  if (result)
    return (const __CFDictionary *)CFDictionaryGetValue(result, a2);
  return result;
}

uint64_t MovieTrackCreateQuickTimeUserDataReaderFromByteStream(uint64_t a1, uint64_t *cf, _QWORD *a3)
{
  CFAllocatorRef v6;

  if (cf[84] < 1)
  {
    *a3 = 0;
    return 0;
  }
  else
  {
    v6 = CFGetAllocator(cf);
    return FigMetadataReaderCreateForQuickTimeUserData((uint64_t)v6, *(_QWORD *)(a1 + 56), cf[84], (uint64_t)a3);
  }
}

uint64_t MovieTrackCreateISOUserDataReaderFromByteStream(uint64_t a1, uint64_t *cf, _QWORD *a3)
{
  CFAllocatorRef v6;

  if (cf[85] < 1)
  {
    *a3 = 0;
    return 0;
  }
  else
  {
    v6 = CFGetAllocator(cf);
    return FigMetadataReaderCreateForISOUserData((uint64_t)v6, *(_QWORD *)(a1 + 56), cf[85], (uint64_t)a3);
  }
}

uint64_t MovieTrackCreateQuickTimeMetadataReader(uint64_t a1, uint64_t *cf, _QWORD *a3)
{
  const __CFDictionary *v6;
  const void *Value;

  v6 = (const __CFDictionary *)cf[111];
  if (v6 && (Value = CFDictionaryGetValue(v6, CFSTR("com.apple.quicktime.mdta"))) != 0)
    return FigMetadataReaderCreateForQuickTimeMetadataArray(*MEMORY[0x1E0C9AE00], Value, a3);
  else
    return MovieTrackCreateQuickTimeMetadataReaderFromByteStream(a1, cf, a3);
}

uint64_t MovieTrackCreateQuickTimeMetadataReaderFromByteStream(uint64_t a1, uint64_t *cf, _QWORD *a3)
{
  CFAllocatorRef v6;

  if (cf[86] < 1)
  {
    *a3 = 0;
    return 0;
  }
  else
  {
    v6 = CFGetAllocator(cf);
    return FigMetadataReaderCreateForQuickTimeMetadata((uint64_t)v6, *(const void **)(a1 + 56), cf[86], a3);
  }
}

uint64_t MovieInformationCreateTrackReferenceDictionary(const __CFAllocator *a1, uint64_t a2, CFDictionaryRef *a3)
{
  uint64_t v4;
  const void **v6;
  const void **v7;
  const void **v8;
  const void **v9;
  uint64_t v10;
  CFIndex v11;
  CFIndex v12;
  int v13;
  uint64_t v14;
  const __CFAllocator *v15;
  uint64_t v16;
  CFTypeRef *v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  CFNumberRef *v21;
  CFTypeRef *v22;
  uint64_t v23;
  CFDictionaryRef v24;
  uint64_t i;
  const void *v26;
  const void *v27;
  CFDictionaryRef *v29;
  void **values;
  const void **v31;
  uint64_t valuePtr;

  v4 = *(_QWORD *)(a2 + 328);
  if (v4)
  {
    valuePtr = 0;
    v6 = (const void **)malloc_type_malloc(8 * v4, 0x6004044C4A2DFuLL);
    if (v6)
    {
      v7 = (const void **)malloc_type_malloc(8 * *(_QWORD *)(a2 + 328), 0x6004044C4A2DFuLL);
      if (v7)
      {
        v8 = (const void **)malloc_type_malloc(16 * *(_QWORD *)(a2 + 328), 0x503AC094uLL);
        if (v8)
        {
          v9 = v8;
          if (*(uint64_t *)(a2 + 328) >= 1)
          {
            values = (void **)v7;
            v31 = v6;
            v29 = a3;
            v10 = 0;
            v11 = 0;
            v12 = 0;
            v13 = 0;
            v14 = 0;
            v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            do
            {
              v16 = *(_QWORD *)(a2 + 344);
              if (*(_DWORD *)(v16 + 12 * v14) != v13)
              {
                if (v10)
                {
                  v31[v12] = CopyKeyStringForTrackReferenceOSType(a1, v13);
                  values[v12++] = CFArrayCreate(a1, v9, v11, MEMORY[0x1E0C9B378]);
                  if (v11 < 1)
                  {
                    v11 = 0;
                  }
                  else
                  {
                    v17 = v9;
                    do
                    {
                      if (*v17)
                        CFRelease(*v17);
                      ++v17;
                      --v11;
                    }
                    while (v11);
                  }
                }
                v10 = 0;
                v16 = *(_QWORD *)(a2 + 344);
                v13 = *(_DWORD *)(v16 + 12 * v14);
              }
              v18 = v16 + 12 * v14;
              HIDWORD(valuePtr) = *(_DWORD *)(v18 + 4);
              v19 = *(_DWORD *)(v18 + 8);
              LODWORD(valuePtr) = v19;
              if (HIDWORD(valuePtr))
                v20 = v19 == 0;
              else
                v20 = 1;
              if (!v20)
              {
                v21 = (CFNumberRef *)&v9[v11];
                *v21 = CFNumberCreate(v15, kCFNumberSInt32Type, (char *)&valuePtr + 4);
                v11 += 2;
                v21[1] = CFNumberCreate(v15, kCFNumberSInt32Type, &valuePtr);
                ++v10;
              }
              ++v14;
            }
            while (v14 < *(_QWORD *)(a2 + 328));
            if (!v10)
            {
              a3 = v29;
              v7 = (const void **)values;
              v6 = v31;
              goto LABEL_32;
            }
            v6 = v31;
            v31[v12] = CopyKeyStringForTrackReferenceOSType(a1, v13);
            v7 = (const void **)values;
            values[v12++] = CFArrayCreate(a1, v9, v11, MEMORY[0x1E0C9B378]);
            if (v11 >= 1)
            {
              v22 = v9;
              a3 = v29;
              do
              {
                if (*v22)
                  CFRelease(*v22);
                ++v22;
                --v11;
              }
              while (v11);
LABEL_32:
              if (v12)
              {
LABEL_33:
                v24 = CFDictionaryCreate(a1, v6, v7, v12, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                if (v12 >= 1)
                {
                  for (i = 0; i != v12; ++i)
                  {
                    v26 = v6[i];
                    if (v26)
                      CFRelease(v26);
                    v27 = v7[i];
                    if (v27)
                      CFRelease(v27);
                  }
                }
                v23 = 0;
                goto LABEL_43;
              }
              goto LABEL_42;
            }
            a3 = v29;
            if (v12)
              goto LABEL_33;
          }
LABEL_42:
          v23 = 0;
          v24 = 0;
LABEL_43:
          free(v6);
          free(v7);
          free(v9);
          goto LABEL_44;
        }
      }
    }
    else
    {
      v7 = 0;
    }
    v23 = FigSignalErrorAt();
    v24 = 0;
    v9 = 0;
    goto LABEL_43;
  }
  v23 = 0;
  v24 = 0;
LABEL_44:
  *a3 = v24;
  return v23;
}

CFDictionaryRef MovieInformationCreateQTLoadSettingsDictionary(const __CFAllocator *a1, uint64_t a2, _BYTE *a3)
{
  const __CFAllocator *v6;
  int *v7;
  int64_t v8;
  CFIndex v9;
  CFDictionaryRef v10;
  uint64_t i;
  const void *v12;
  CMTime v14;
  CMTime time;
  void *keys[4];
  void *values;
  CFNumberRef v18;
  CFDictionaryRef v19;
  CFDictionaryRef v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v18 = 0;
  v19 = 0;
  v20 = 0;
  keys[0] = CFSTR("DefaultHints");
  keys[1] = CFSTR("PreloadFlags");
  keys[2] = CFSTR("PreloadStart");
  keys[3] = CFSTR("PreloadDuration");
  if (!a3[882])
    return 0;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, a3 + 878);
  if (values)
  {
    v18 = CFNumberCreate(v6, kCFNumberSInt32Type, a3 + 874);
    if (v18)
    {
      v7 = (int *)(a3 + 866);
      v8 = *v7;
      if ((_DWORD)v8 == -1)
      {
        v9 = 2;
        goto LABEL_10;
      }
      CMTimeMake(&time, v8, *(_DWORD *)(a2 + 240));
      v19 = CMTimeCopyAsDictionary(&time, a1);
      if (v19)
      {
        CMTimeMake(&v14, v7[1], *(_DWORD *)(a2 + 240));
        v20 = CMTimeCopyAsDictionary(&v14, a1);
        if (v20)
        {
          v9 = 4;
LABEL_10:
          v10 = CFDictionaryCreate(a1, (const void **)keys, (const void **)&values, v9, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          goto LABEL_11;
        }
      }
    }
  }
  FigSignalErrorAt();
  v10 = 0;
LABEL_11:
  for (i = 0; i != 32; i += 8)
  {
    v12 = *(void **)((char *)&values + i);
    if (v12)
      CFRelease(v12);
  }
  return v10;
}

__CFArray *MovieInformationCreateAlternateGroupArray(const __CFAllocator *a1, uint64_t a2)
{
  uint64_t v2;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  const void **v9;
  const void **v10;
  uint64_t v11;
  uint64_t v12;
  CFIndex v13;
  const __CFAllocator *v14;
  const CFArrayCallBacks *v15;
  int v16;
  CFIndex v17;
  const void **v18;
  int v19;
  char *v20;
  int v21;
  CFNumberRef v22;
  __CFArray *Mutable;
  const void **v24;
  const void *v25;
  int valuePtr;

  v2 = *(_QWORD *)(a2 + 304);
  if (v2 < 1)
    return 0;
  v5 = 0;
  v6 = *(uint64_t **)(a2 + 320);
  v7 = *(_QWORD *)(a2 + 304);
  do
  {
    v8 = *v6++;
    if (*(_WORD *)(v8 + 864))
      v5 = 1;
    --v7;
  }
  while (v7);
  if (!v5)
    return 0;
  v9 = (const void **)malloc_type_malloc(16 * v2, 0x10200400CC4F872uLL);
  if (!v9)
    return 0;
  v10 = v9;
  valuePtr = 0;
  v11 = *(_QWORD *)(a2 + 304);
  if (v11 <= 0)
  {
    Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v15 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    do
    {
      v16 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a2 + 320) + 8 * v12) + 864);
      if (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 320) + 8 * v12) + 864))
      {
        if (v13 < 1)
        {
          v17 = 0;
LABEL_17:
          ++v13;
          v20 = (char *)&v10[2 * v17];
          *(_WORD *)v20 = v16;
          *((_QWORD *)v20 + 1) = CFArrayCreateMutable(a1, 0, v15);
          v11 = *(_QWORD *)(a2 + 304);
        }
        else
        {
          v17 = 0;
          v18 = v10;
          while (1)
          {
            v19 = *(unsigned __int16 *)v18;
            v18 += 2;
            if (v19 == v16)
              break;
            if (v13 == ++v17)
            {
              v17 = v13;
              goto LABEL_17;
            }
          }
        }
        if (v11 <= v12)
          v21 = 0;
        else
          v21 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 320) + 8 * v12) + 144);
        valuePtr = v21;
        v22 = CFNumberCreate(v14, kCFNumberSInt32Type, &valuePtr);
        CFArrayAppendValue((CFMutableArrayRef)v10[2 * v17 + 1], v22);
        CFRelease(v22);
        v11 = *(_QWORD *)(a2 + 304);
      }
      ++v12;
    }
    while (v12 < v11);
    Mutable = CFArrayCreateMutable(a1, v13, MEMORY[0x1E0C9B378]);
    if (v13 >= 1)
    {
      v24 = v10 + 1;
      do
      {
        CFArrayAppendValue(Mutable, *v24);
        v25 = *v24;
        v24 += 2;
        CFRelease(v25);
        --v13;
      }
      while (v13);
    }
  }
  free(v10);
  return Mutable;
}

uint64_t MovieInformationSetByteStream(uint64_t a1, const void *a2)
{
  uint64_t CMBaseObject;
  uint64_t (*v5)(uint64_t, uint64_t, _QWORD, CFNumberRef *);
  uint64_t v6;
  uint64_t result;
  const void *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, _QWORD, _QWORD, CFNumberRef *);
  int v11;
  CFNumberRef v12;
  BOOL v13;
  CFStringRef v14;
  char IsISOExtension;
  uint64_t v16;
  CFNumberRef number;

  number = 0;
  CMBaseObject = CMByteStreamGetCMBaseObject();
  v5 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
  if (!v5)
    return 4294954514;
  v6 = *MEMORY[0x1E0CA2070];
  v16 = 0;
  result = v5(CMBaseObject, v6, 0, &number);
  if ((_DWORD)result)
    return result;
  CFNumberGetValue(number, kCFNumberSInt64Type, &v16);
  CFRelease(number);
  v8 = *(const void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = a2;
  if (a2)
    CFRetain(a2);
  if (v8)
    CFRelease(v8);
  *(_QWORD *)(a1 + 72) = v16;
  number = 0;
  v9 = CMByteStreamGetCMBaseObject();
  v10 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
  if (v10)
  {
    v11 = v10(v9, *MEMORY[0x1E0CA2098], 0, &number);
    v12 = number;
    if (v11)
      v13 = 1;
    else
      v13 = number == 0;
    if (v13)
    {
      v14 = 0;
      if (!number)
      {
LABEL_21:
        if (v14)
          CFRelease(v14);
        return 0;
      }
    }
    else
    {
      v14 = CFURLCopyPathExtension(number);
      IsISOExtension = FigCFStringIsISOExtension(v14);
      *(_BYTE *)(a1 + 83) = IsISOExtension;
      if (v14 && CFStringCompare(CFSTR("aax"), v14, 1uLL) == kCFCompareEqualTo)
        *(_BYTE *)(a1 + 152) = 1;
      *(_BYTE *)(a1 + 208) = FigCFStringIsHEIFExtension(v14);
      v12 = number;
      if (!number)
        goto LABEL_21;
    }
    CFRelease(v12);
    goto LABEL_21;
  }
  return 0;
}

uint64_t MovieInformationCheckForMovieTimescaleAnomaly_7135294(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v1 = *(uint64_t **)(result + 320);
  if (!v1)
    return result;
  v2 = *(_QWORD *)(result + 304);
  if (v2 < 1)
    return result;
  v3 = *v1;
  if (*(_BYTE *)(result + 81))
  {
    if (v2 != 1 || *(_BYTE *)(result + 82) != 0)
      return result;
  }
  else if (v2 != 1 || *(_BYTE *)(result + 83) == 0)
  {
    return result;
  }
  if (*(_DWORD *)(v3 + 24) == 1936684398 && !*(_BYTE *)(v3 + 722))
  {
    v6 = *(_QWORD *)(v3 + 728);
    if ((!v6 || !*(_QWORD *)(v6 + 56)) && *(_DWORD *)(result + 240) == 600)
    {
      v7 = *(_DWORD *)(v3 + 232);
      if (v7 != 600)
      {
        v8 = *(_QWORD *)(v3 + 136);
        if (v8 == *(_QWORD *)(v3 + 224) && v8 == *(_QWORD *)(result + 232))
          *(_DWORD *)(result + 240) = v7;
      }
    }
  }
  return result;
}

uint64_t MovieInformationSetParsedNextTrackID(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 252) = a2;
  return 0;
}

uint64_t MovieInformationSetParsedCreateAndModTimes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 216) = a2;
  *(_QWORD *)(a1 + 224) = a3;
  return 0;
}

uint64_t MovieInformationSetParsedMovieDuration(uint64_t a1, uint64_t a2, int a3)
{
  *(_QWORD *)(a1 + 232) = a2;
  *(_DWORD *)(a1 + 240) = a3;
  return 0;
}

uint64_t MovieInformationSetMovieTimeScale(uint64_t a1, int a2)
{
  if (*(_QWORD *)(a1 + 232))
    return FigSignalErrorAt();
  *(_DWORD *)(a1 + 240) = a2;
  *(_QWORD *)(a1 + 40) |= 0x8000uLL;
  return 0;
}

uint64_t MovieInformationSetPreferredRate(uint64_t a1, float a2)
{
  *(float *)(a1 + 244) = a2;
  *(_QWORD *)(a1 + 40) |= 0x200uLL;
  return 0;
}

uint64_t MovieInformationSetPreferredVolume(uint64_t a1, float a2)
{
  *(float *)(a1 + 248) = a2;
  *(_QWORD *)(a1 + 40) |= 0x400uLL;
  return 0;
}

uint64_t MovieInformationSetMovieMatrix(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  if (a2)
  {
    v2 = *(_OWORD *)a2;
    v3 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 32);
  }
  else
  {
    *(_DWORD *)(a1 + 288) = 1065353216;
    v2 = kIdentityMatrix_0;
    v3 = unk_1932FCD44;
  }
  *(_OWORD *)(a1 + 256) = v2;
  *(_OWORD *)(a1 + 272) = v3;
  *(_QWORD *)(a1 + 40) |= 0x800uLL;
  return 0;
}

uint64_t MovieInformationSetPSSHDataEntries(uint64_t a1, CFTypeRef cf)
{
  const void *v3;

  v3 = *(const void **)(a1 + 360);
  *(_QWORD *)(a1 + 360) = cf;
  if (cf)
    CFRetain(cf);
  if (v3)
    CFRelease(v3);
  *(_QWORD *)(a1 + 40) |= 0x20000uLL;
  return 0;
}

uint64_t MovieInformationAllTracksAreSelfContained(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 304);
  if (v1 < 1)
    return 1;
  v3 = 0;
  do
  {
    if (*(_QWORD *)(a1 + 304) <= v3)
      v4 = 0;
    else
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v3);
    result = MovieTrackIsSelfContained(v4);
    ++v3;
  }
  while (v3 < v1 && (_DWORD)result);
  return result;
}

uint64_t MovieInformationCreateTrack(uint64_t a1, int a2, int a3, _DWORD *a4, _QWORD *a5)
{
  int v9;
  uint64_t v10;
  _DWORD *v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  CFDictionaryRef v15;
  uint64_t v16;
  CFTypeRef cf;
  void *values;

  cf = 0;
  if (*(_DWORD *)(a1 + 252) <= a3)
    v9 = a3;
  else
    v9 = *(_DWORD *)(a1 + 252);
  *(_DWORD *)(a1 + 252) = v9 + 1;
  v10 = MovieTrackCreate((uint64_t *)&cf);
  if ((_DWORD)v10)
  {
    v16 = v10;
    v11 = cf;
    if (!cf)
      return v16;
    goto LABEL_17;
  }
  v11 = cf;
  v12 = 0.0;
  if (a2 == 1936684398)
    v12 = 1.0;
  *((float *)cf + 49) = v12;
  v11[6] = a2;
  v11[36] = v9;
  v13 = MovieInformationAddNewPerTrackInfo((_QWORD *)a1, v11);
  if ((_DWORD)v13)
  {
    v16 = v13;
LABEL_17:
    CFRelease(v11);
    return v16;
  }
  v14 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 40) |= 0x2002uLL;
  if (v14)
  {
    values = v11;
    v15 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&kMovieInformationPayloadKey_TrackInfo, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CMNotificationCenterGetDefaultLocalCenter();
    FigDeferNotificationToDispatchQueue();
    if (v15)
      CFRelease(v15);
  }
  *a5 = v11;
  v16 = 0;
  if (a4)
    *a4 = v9;
  return v16;
}

uint64_t MovieInformationRemoveTrack(uint64_t *a1, _DWORD *cf)
{
  uint64_t v2;
  uint64_t v3;
  CFTypeRef *v6;
  size_t v7;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  CFDictionaryRef v26;
  uint64_t v27;
  void *values;

  v2 = a1[38];
  v3 = v2 - 1;
  if (v2 < 1)
    return FigSignalErrorAt();
  v6 = (CFTypeRef *)a1[40];
  v7 = 8 * v2 - 8;
  while (*v6 != cf)
  {
    v7 -= 8;
    ++v6;
    if (!--v2)
      return FigSignalErrorAt();
  }
  if (v2 != 1)
  {
    memmove(v6, v6 + 1, v7);
    v3 = a1[38] - 1;
  }
  a1[38] = v3;
  if (cf)
  {
    v9 = cf[36];
LABEL_10:
    v10 = 132;
    if (!*((_WORD *)cf + 432))
      v10 = 4;
    if (*((_BYTE *)cf + 200))
      v11 = v10 | 0x2000;
    else
      v11 = v10;
    v12 = a1[41];
    if (v12 >= 1)
    {
      for (i = 0; i < v12; ++i)
      {
        v14 = a1[43];
        v15 = v14 + 12 * i;
        v16 = *(_DWORD *)(v15 + 4);
        v17 = *(_DWORD *)(v15 + 8);
        if (v16 != v9)
        {
          v18 = v17 == v9;
          v17 = v9;
          if (!v18)
            continue;
        }
        NoteTrackReferenceChange(a1, *(_DWORD *)(v14 + 12 * i), v16, v17);
        v19 = a1[41];
        if (v19 + ~i)
        {
          memmove((void *)(a1[43] + 12 * i), (const void *)(a1[43] + 12 * i + 12), 12 * (v19 + ~i));
          v19 = a1[41];
        }
        v12 = v19 - 1;
        a1[41] = v12;
        --i;
      }
    }
    v20 = a1[38];
    if (v20 < 1)
    {
      v21 = 0;
    }
    else
    {
      v21 = 0;
      v22 = (uint64_t *)a1[40];
      do
      {
        v23 = *v22++;
        v24 = *(_QWORD *)(v23 + 136);
        if (v24 > v21)
          v21 = v24;
        --v20;
      }
      while (v20);
    }
    if (a1[29] == v21)
    {
      v25 = a1[5];
    }
    else
    {
      a1[29] = v21;
      v25 = a1[5] | 1;
    }
    *((_BYTE *)cf + 896) = 1;
    a1[5] = v25 | v11;
    if (a1[4])
    {
      values = cf;
      v26 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&kMovieInformationPayloadKey_TrackInfo, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CMNotificationCenterGetDefaultLocalCenter();
      FigDeferNotificationToDispatchQueue();
      if (v26)
        CFRelease(v26);
    }
    v27 = 0;
    goto LABEL_38;
  }
  v27 = FigSignalErrorAt();
  if (!(_DWORD)v27)
  {
    v9 = 0;
    goto LABEL_10;
  }
LABEL_38:
  CFRelease(cf);
  return v27;
}

uint64_t MovieSampleTableGetSampleCountAtIndex(uint64_t a1, int a2)
{
  uint64_t destination;

  destination = 0;
  CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 416), 8 * a2, 8uLL, &destination);
  return bswap32(destination);
}

uint64_t MovieSampleTableGetSampleToChunkFirstChunk(uint64_t a1, int a2)
{
  uint64_t v3;
  int v4;

  v4 = 0;
  v3 = 0;
  CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 440), 12 * a2, 0xCuLL, &v3);
  return bswap32(v3);
}

uint64_t MovieSampleTableGetSampleToChunkSamplesPerChunk(uint64_t a1, int a2)
{
  uint64_t v3;
  int v4;

  v4 = 0;
  v3 = 0;
  CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 440), 12 * a2, 0xCuLL, &v3);
  return bswap32(HIDWORD(v3));
}

uint64_t MovieSampleTableGetSampleToChunkSampleDescriptionID(uint64_t a1, int a2)
{
  uint64_t v3;
  unsigned int v4;

  v4 = 0;
  v3 = 0;
  CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 440), 12 * a2, 0xCuLL, &v3);
  return bswap32(v4);
}

uint64_t MovieSampleTableNumSampleToChunkEntries(uint64_t a1)
{
  return *(unsigned int *)(a1 + 432);
}

uint64_t MovieSampleTableNumChunkTableEntries(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 624))();
}

BOOL MovieSampleTableHaveChunkOffsetTable(uint64_t a1)
{
  return *(_QWORD *)(a1 + 368) || *(_QWORD *)(a1 + 392) != 0;
}

BOOL MovieSampleTableHave64BitChunkOffsetTable(uint64_t a1)
{
  return *(_QWORD *)(a1 + 392) != 0;
}

uint64_t MovieSampleTableNumSampleSizeEntries(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 584))();
}

uint64_t MovieSampleTableGetMinSampleSizeFieldSize(uint64_t a1)
{
  return *(unsigned int *)(a1 + 296);
}

uint64_t MovieSampleTableGetSampleSizeTable(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 608))();
}

BOOL MovieSampleTableHaveSampleToChunkTable(uint64_t a1)
{
  return *(_QWORD *)(a1 + 440) != 0;
}

BOOL MovieSampleTableHavePartialSyncSampleTable(uint64_t a1)
{
  return *(_QWORD *)(a1 + 512) != 0;
}

uint64_t MovieSampleTableNumSampleDependencyEntries(uint64_t a1)
{
  return *(unsigned int *)(a1 + 528);
}

uint64_t MovieSampleTableGetMaxDecodeToDisplay(uint64_t a1)
{
  return bswap32(*(_DWORD *)(a1 + 564));
}

uint64_t MovieSampleTableGetMinDecodeToDisplay(uint64_t a1)
{
  return bswap32(*(_DWORD *)(a1 + 560));
}

uint64_t MovieSampleTableGetSampleToChunkTable(uint64_t a1)
{
  return *(_QWORD *)(a1 + 440);
}

uint64_t MovieSampleTableGetTimeToSampleTable(uint64_t a1)
{
  return *(_QWORD *)(a1 + 416);
}

uint64_t MovieSampleTableGetChunkOffsetTable(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 632))();
}

uint64_t MovieSampleTableGetCompositionOffsetTable(uint64_t a1)
{
  return *(_QWORD *)(a1 + 464);
}

uint64_t MovieSampleTableGetSyncSampleTable(uint64_t a1)
{
  return *(_QWORD *)(a1 + 488);
}

uint64_t MovieSampleTableGetPartialSyncSampleTable(uint64_t a1)
{
  return *(_QWORD *)(a1 + 512);
}

uint64_t MovieSampleTableGetSampleDependencyTable(uint64_t a1)
{
  return *(_QWORD *)(a1 + 536);
}

uint64_t MovieSampleTableSet_stsz(uint64_t a1, int a2, int a3, CFTypeRef cf)
{
  const void *v7;

  *(_DWORD *)(a1 + 312) = a2;
  *(_DWORD *)(a1 + 316) = a3;
  v7 = *(const void **)(a1 + 320);
  *(_QWORD *)(a1 + 320) = cf;
  if (cf)
    CFRetain(cf);
  if (v7)
    CFRelease(v7);
  *(_QWORD *)(a1 + 584) = GetNumSamples_stsz;
  *(_QWORD *)(a1 + 600) = GetSampleSizeFieldSize_stsz;
  *(_QWORD *)(a1 + 608) = GetSizeTable_stsz;
  *(_QWORD *)(a1 + 592) = GetSampleSize_stsz;
  *(_DWORD *)(a1 + 292) = a3;
  *(_DWORD *)(a1 + 288) = a2;
  return 0;
}

uint64_t GetNumSamples_stsz(uint64_t a1)
{
  return *(unsigned int *)(a1 + 312);
}

uint64_t GetSampleSizeFieldSize_stsz()
{
  return 32;
}

uint64_t GetSizeTable_stsz(uint64_t a1)
{
  return *(_QWORD *)(a1 + 320);
}

uint64_t GetSampleSize_stsz(uint64_t a1, int a2)
{
  uint64_t result;
  unsigned int destination;

  result = *(unsigned int *)(a1 + 316);
  destination = result;
  if (!(_DWORD)result)
  {
    CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 320), 4 * a2, 4uLL, &destination);
    return bswap32(destination);
  }
  return result;
}

uint64_t MovieSampleTableSet_stz2(uint64_t a1, int a2, int a3, CFTypeRef cf)
{
  const void *v6;
  uint64_t (*v7)(uint64_t, int);

  *(_DWORD *)(a1 + 288) = a2;
  *(_DWORD *)(a1 + 340) = a2;
  *(_DWORD *)(a1 + 336) = a3;
  v6 = *(const void **)(a1 + 344);
  *(_QWORD *)(a1 + 344) = cf;
  if (cf)
    CFRetain(cf);
  if (v6)
    CFRelease(v6);
  *(_QWORD *)(a1 + 584) = GetNumSamples_stz2;
  *(_QWORD *)(a1 + 600) = GetSampleSizeFieldSize_stz2;
  *(_QWORD *)(a1 + 608) = GetSizeTable_stz2;
  switch(a3)
  {
    case 16:
      v7 = GetSampleSize_stz2_16;
      goto LABEL_11;
    case 8:
      v7 = GetSampleSize_stz2_8;
      goto LABEL_11;
    case 4:
      v7 = GetSampleSize_stz2_4;
LABEL_11:
      *(_QWORD *)(a1 + 592) = v7;
      return 0;
  }
  MovieInformationReportParsingFailureMessage(0, a1, (uint64_t)"Unexpected stz2 field size", 2);
  return FigSignalErrorAt();
}

uint64_t GetNumSamples_stz2(uint64_t a1)
{
  return *(unsigned int *)(a1 + 340);
}

uint64_t GetSampleSizeFieldSize_stz2(uint64_t a1)
{
  return *(unsigned int *)(a1 + 336);
}

uint64_t GetSizeTable_stz2(uint64_t a1)
{
  return *(_QWORD *)(a1 + 344);
}

uint64_t GetSampleSize_stz2_4(uint64_t a1, int a2)
{
  char v2;
  int v3;
  unsigned __int8 destination;

  v2 = a2;
  if (a2 >= 0)
    v3 = a2;
  else
    v3 = a2 + 1;
  destination = 0;
  CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 344), (uint64_t)v3 >> 1, 1uLL, &destination);
  if ((v2 & 1) != 0)
    return destination & 0xF;
  else
    return destination >> 4;
}

uint64_t GetSampleSize_stz2_8(uint64_t a1, int a2)
{
  unsigned __int8 destination;

  destination = 0;
  CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 344), a2, 1uLL, &destination);
  return destination;
}

uint64_t GetSampleSize_stz2_16(uint64_t a1, int a2)
{
  unsigned __int16 destination;

  destination = 0;
  CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 344), 2 * a2, 2uLL, &destination);
  return bswap32(destination) >> 16;
}

uint64_t MovieSampleTableSet_stco(uint64_t a1, int a2, CFTypeRef cf)
{
  const void *v4;

  *(_DWORD *)(a1 + 360) = a2;
  v4 = *(const void **)(a1 + 368);
  *(_QWORD *)(a1 + 368) = cf;
  if (cf)
    CFRetain(cf);
  if (v4)
    CFRelease(v4);
  *(_QWORD *)(a1 + 616) = GetChunkOffset_stco;
  *(_QWORD *)(a1 + 624) = GetChunkCount_stco;
  *(_QWORD *)(a1 + 632) = GetChunkTable_stco;
  return 0;
}

uint64_t GetChunkOffset_stco(uint64_t a1, int a2)
{
  unsigned int destination;

  destination = 0;
  CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 368), 4 * a2, 4uLL, &destination);
  return bswap32(destination);
}

uint64_t GetChunkCount_stco(uint64_t a1)
{
  return *(unsigned int *)(a1 + 360);
}

uint64_t GetChunkTable_stco(uint64_t a1)
{
  return *(_QWORD *)(a1 + 368);
}

uint64_t MovieSampleTableSet_co64(uint64_t a1, int a2, CFTypeRef cf)
{
  const void *v4;

  *(_DWORD *)(a1 + 384) = a2;
  v4 = *(const void **)(a1 + 392);
  *(_QWORD *)(a1 + 392) = cf;
  if (cf)
    CFRetain(cf);
  if (v4)
    CFRelease(v4);
  *(_QWORD *)(a1 + 616) = GetChunkOffset_co64;
  *(_QWORD *)(a1 + 624) = GetChunkCount_co64;
  *(_QWORD *)(a1 + 632) = GetChunkTable_co64;
  return 0;
}

unint64_t GetChunkOffset_co64(uint64_t a1, int a2)
{
  unint64_t destination;

  destination = 0;
  CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 392), 8 * a2, 8uLL, &destination);
  return bswap64(destination);
}

uint64_t GetChunkCount_co64(uint64_t a1)
{
  return *(unsigned int *)(a1 + 384);
}

uint64_t GetChunkTable_co64(uint64_t a1)
{
  return *(_QWORD *)(a1 + 392);
}

uint64_t MovieSampleTableSet_stts(uint64_t a1, int a2, CFTypeRef cf)
{
  const void *v3;

  *(_DWORD *)(a1 + 408) = a2;
  v3 = *(const void **)(a1 + 416);
  *(_QWORD *)(a1 + 416) = cf;
  if (cf)
    CFRetain(cf);
  if (v3)
    CFRelease(v3);
  return 0;
}

uint64_t MovieSampleTableSet_stsc(uint64_t a1, int a2, CFTypeRef cf)
{
  const void *v3;

  *(_DWORD *)(a1 + 432) = a2;
  v3 = *(const void **)(a1 + 440);
  *(_QWORD *)(a1 + 440) = cf;
  if (cf)
    CFRetain(cf);
  if (v3)
    CFRelease(v3);
  return 0;
}

uint64_t MovieSampleTableSet_ctts(uint64_t a1, int a2, CFTypeRef cf)
{
  const void *v5;

  *(_DWORD *)(a1 + 456) = a2;
  v5 = *(const void **)(a1 + 464);
  *(_QWORD *)(a1 + 464) = cf;
  if (cf)
    CFRetain(cf);
  if (v5)
    CFRelease(v5);
  *(_BYTE *)(a1 + 720) = a2 > 0;
  return 0;
}

uint64_t MovieSampleTableSet_stss(uint64_t a1, int a2, CFTypeRef cf)
{
  const void *v3;

  *(_DWORD *)(a1 + 480) = a2;
  v3 = *(const void **)(a1 + 488);
  *(_QWORD *)(a1 + 488) = cf;
  if (cf)
    CFRetain(cf);
  if (v3)
    CFRelease(v3);
  return 0;
}

uint64_t MovieSampleTableSet_stps(uint64_t a1, int a2, CFTypeRef cf)
{
  const void *v3;

  *(_DWORD *)(a1 + 504) = a2;
  v3 = *(const void **)(a1 + 512);
  *(_QWORD *)(a1 + 512) = cf;
  if (cf)
    CFRetain(cf);
  if (v3)
    CFRelease(v3);
  return 0;
}

uint64_t MovieSampleTableSet_sdtp(uint64_t a1, int a2, CFTypeRef cf)
{
  const void *v3;

  *(_DWORD *)(a1 + 528) = a2;
  v3 = *(const void **)(a1 + 536);
  *(_QWORD *)(a1 + 536) = cf;
  if (cf)
    CFRetain(cf);
  if (v3)
    CFRelease(v3);
  return 0;
}

uint64_t MovieSampleTableSet_cslg(uint64_t a1, CMBlockBufferRef theSourceBuffer)
{
  uint64_t result;

  if (!theSourceBuffer)
    return 0;
  result = CMBlockBufferCopyDataBytes(theSourceBuffer, 0, 0x18uLL, (void *)(a1 + 552));
  if (!(_DWORD)result)
    *(_BYTE *)(a1 + 576) = 1;
  return result;
}

uint64_t MovieInformationLockForRead(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return FigReadWriteLockLockForRead();
  return result;
}

uint64_t MovieInformationUnlockForRead(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return FigReadWriteLockUnlockForRead();
  return result;
}

uint64_t MovieInformationLockForWrite(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    return FigReadWriteLockLockForWrite();
  else
    return FigSignalErrorAt();
}

uint64_t MovieInformationUnlockForWrite(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const __CFAllocator *v4;
  const CFDictionaryValueCallBacks *v5;
  uint64_t v6;
  uint64_t v7;
  CFDictionaryRef v8;
  const __CFAllocator *v9;
  CFDictionaryRef v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  void *values;

  if (!*(_QWORD *)(a1 + 24))
    return FigSignalErrorAt();
  if (*(_QWORD *)(a1 + 32))
  {
    v2 = *(_QWORD *)(a1 + 304);
    if (v2 >= 1)
    {
      v3 = 0;
      v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v5 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
      do
      {
        if (*(_QWORD *)(a1 + 304) <= v3)
          v6 = 0;
        else
          v6 = *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v3);
        if (*(_BYTE *)(v6 + 898) && (*(_BYTE *)(a1 + 40) & 1) != 0)
          *(_QWORD *)(v6 + 16) |= 0x200000uLL;
        v7 = *(_QWORD *)(v6 + 16);
        if ((v7 & 0x1000) != 0)
        {
          *(_QWORD *)(a1 + 40) |= 0x80uLL;
          if ((v7 & 0x400000) == 0)
          {
LABEL_13:
            if ((v7 & 0x800000) == 0)
              goto LABEL_14;
            goto LABEL_21;
          }
        }
        else if ((v7 & 0x400000) == 0)
        {
          goto LABEL_13;
        }
        *(_QWORD *)(a1 + 40) |= 0x80uLL;
        if ((v7 & 0x800000) == 0)
        {
LABEL_14:
          if ((v7 & 4) == 0)
            goto LABEL_15;
          goto LABEL_22;
        }
LABEL_21:
        *(_QWORD *)(a1 + 40) |= 0x80uLL;
        if ((v7 & 4) == 0)
        {
LABEL_15:
          if ((v7 & 0x40) == 0)
            goto LABEL_16;
          goto LABEL_23;
        }
LABEL_22:
        *(_QWORD *)(a1 + 40) |= 0x1000uLL;
        if ((v7 & 0x40) == 0)
        {
LABEL_16:
          if ((v7 & 0x200000) != 0)
            goto LABEL_24;
          goto LABEL_17;
        }
LABEL_23:
        *(_QWORD *)(a1 + 40) |= 0x2000uLL;
        if ((v7 & 0x200000) != 0)
        {
LABEL_24:
          *(_QWORD *)(a1 + 40) |= 0x4000uLL;
LABEL_25:
          values = CFNumberCreate(v4, kCFNumberSInt64Type, (const void *)(v6 + 16));
          if (values)
            v8 = CFDictionaryCreate(v4, (const void **)&kMovieInformationPayloadKey_ChangeBits, (const void **)&values, 1, MEMORY[0x1E0C9B390], v5);
          else
            v8 = 0;
          CMNotificationCenterGetDefaultLocalCenter();
          FigDeferNotificationToDispatchQueue();
          if (v8)
            CFRelease(v8);
          if (values)
            CFRelease(values);
          goto LABEL_32;
        }
LABEL_17:
        if (v7)
          goto LABEL_25;
LABEL_32:
        ++v3;
      }
      while (v2 != v3);
    }
    if (*(_QWORD *)(a1 + 40))
    {
      v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, (const void *)(a1 + 40));
      if (values)
        v10 = CFDictionaryCreate(v9, (const void **)&kMovieInformationPayloadKey_ChangeBits, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      else
        v10 = 0;
      CMNotificationCenterGetDefaultLocalCenter();
      FigDeferNotificationToDispatchQueue();
      if (v10)
        CFRelease(v10);
      if (values)
        CFRelease(values);
    }
    *(_QWORD *)(a1 + 40) = 0;
    v11 = *(_QWORD *)(a1 + 304);
    if (v11 >= 1)
    {
      v12 = *(uint64_t **)(a1 + 320);
      do
      {
        v13 = *v12++;
        *(_QWORD *)(v13 + 16) = 0;
        --v11;
      }
      while (v11);
    }
  }
  v14 = FigReadWriteLockUnlockForWrite();
  v15 = *(NSObject **)(a1 + 32);
  if (v15)
    dispatch_sync_f(v15, 0, (dispatch_function_t)WaitingNoOp);
  return v14;
}

BOOL MovieInformationIsMutable(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) != 0;
}

uint64_t MovieInformationContainsFragments(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 156);
}

uint64_t MovieInformationCouldContainFragments(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 154);
}

uint64_t MovieInformationGetLastMovieFragmentInformation(uint64_t a1, _DWORD *a2)
{
  if (!*(_DWORD *)(a1 + 184))
    return 0;
  if (a2)
    *a2 = *(_DWORD *)(a1 + 188);
  return 1;
}

__n128 MovieInformationGetMovieExtendsDuration@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;

  v2 = MEMORY[0x1E0CA2E18];
  result = *(__n128 *)MEMORY[0x1E0CA2E18];
  *(_OWORD *)a2 = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v2 + 16);
  if (a1[9].n128_u8[11])
  {
    result = a1[10];
    *(__n128 *)a2 = result;
    *(_QWORD *)(a2 + 16) = a1[11].n128_u64[0];
  }
  return result;
}

uint64_t MovieInformationEstablishFirstParsedFragmentSequenceNumber(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 184) = 1;
  *(_DWORD *)(a1 + 188) = a2;
  *(_DWORD *)(a1 + 192) = a2;
  *(_QWORD *)(a1 + 40) |= 0x10000uLL;
  return 0;
}

uint64_t MovieInformationUpdateLastParsedFragmentSequenceNumber(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 188) = a2;
  *(_QWORD *)(a1 + 40) |= 0x10000uLL;
  return 0;
}

uint64_t MovieInformationGetFirstFragmentSequenceNumber(uint64_t a1, _DWORD *a2)
{
  if (*(_DWORD *)(a1 + 184) != 1)
    return 0;
  *a2 = *(_DWORD *)(a1 + 192);
  return 1;
}

uint64_t MovieInformationGetParsedFragmentCount(_DWORD *a1, _DWORD *a2)
{
  if (a1[46] != 1)
    return 0;
  *a2 = a1[47] - a1[48] + 1;
  return 1;
}

uint64_t MovieInformationEnsureMutationsWillNotify(uint64_t a1)
{
  dispatch_queue_t v2;

  if (*(_QWORD *)(a1 + 32))
    return 0;
  v2 = dispatch_queue_create("MovieInformationNotifications", 0);
  *(_QWORD *)(a1 + 32) = v2;
  if (v2)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRegisterForBarrierSupport();
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t MovieInformationCreate(uint64_t a1, int a2, uint64_t *a3)
{
  double Current;
  uint64_t Instance;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v16;

  Current = CFAbsoluteTimeGetCurrent();
  if (sRegisterMovieInformationTypeOnce != -1)
    dispatch_once_f(&sRegisterMovieInformationTypeOnce, 0, (dispatch_function_t)RegisterMovieInformationType);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v7 = Instance;
  if ((a2 & 1) != 0
    && (*(_QWORD *)(Instance + 24) = FigReadWriteLockCreate(), (a2 & 2) != 0)
    && (v8 = MovieInformationEnsureMutationsWillNotify(v7), (_DWORD)v8))
  {
    v16 = v8;
    CFRelease((CFTypeRef)v7);
    return v16;
  }
  else
  {
    result = 0;
    v10 = (unint64_t)(Current + *MEMORY[0x1E0C9ADE8]);
    *(_DWORD *)(v7 + 16) = a2;
    *(_DWORD *)(v7 + 252) = 1;
    *(_DWORD *)(v7 + 240) = 600;
    *(_DWORD *)(v7 + 288) = 1065353216;
    *(_OWORD *)(v7 + 256) = kIdentityMatrix_0;
    *(_OWORD *)(v7 + 272) = unk_1932FCD44;
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)(v7 + 244) = _D0;
    *(_QWORD *)(v7 + 216) = v10;
    *(_QWORD *)(v7 + 224) = v10;
    *a3 = v7;
  }
  return result;
}

uint64_t MovieInformationCreateDeepCopy(const __CFAllocator *a1, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  const void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  CFMutableArrayRef Mutable;
  CFIndex Count;
  CFIndex v22;
  CFIndex v23;
  OpaqueCMBlockBuffer *ValueAtIndex;
  uint64_t v25;
  CFMutableArrayRef v26;
  CFIndex v27;
  CFIndex v28;
  CFIndex v29;
  _OWORD *v30;
  _OWORD *v31;
  const __CFArray *v32;
  CFIndex v33;
  CFMutableArrayRef MutableCopy;
  CFMutableArrayRef v35;
  CFIndex v36;
  CFIndex v37;
  CFIndex v38;
  const void *v39;
  OpaqueCMBlockBuffer *v40;
  _DWORD *v41;
  _QWORD *v42;
  CFTypeRef v43;
  const __CFAllocator *v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  OpaqueCMBlockBuffer *v55;
  uint64_t v56;
  CMBlockBufferRef v57;
  uint64_t v58;
  OpaqueCMBlockBuffer *v59;
  uint64_t v60;
  uint64_t v61;
  OpaqueCMBlockBuffer *v62;
  uint64_t v63;
  OpaqueCMBlockBuffer *v64;
  uint64_t v65;
  OpaqueCMBlockBuffer *v66;
  uint64_t v67;
  OpaqueCMBlockBuffer *v68;
  uint64_t v69;
  OpaqueCMBlockBuffer *v70;
  uint64_t v71;
  OpaqueCMBlockBuffer *v72;
  uint64_t v73;
  OpaqueCMBlockBuffer *v74;
  uint64_t v75;
  OpaqueCMBlockBuffer *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  const __CFDictionary *v82;
  const __CFString *v83;
  const __CFString *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  const __CFAllocator *allocator;
  CFTypeRef v97;
  CMBlockBufferRef blockBufferOut;
  CFTypeRef cf;
  CMBlockBufferRef v100;

  v6 = a2;
  v97 = 0;
  if (*(_QWORD *)(a2 + 24))
  {
    v8 = FigReadWriteLockLockForRead();
    if ((_DWORD)v8)
    {
      v58 = v8;
      goto LABEL_149;
    }
  }
  v9 = MovieInformationCreate((uint64_t)a1, a3 & 3, (uint64_t *)&v97);
  v10 = v97;
  if ((_DWORD)v9)
    goto LABEL_152;
  v11 = *(const void **)(v6 + 48);
  if (v11)
  {
    v9 = MovieInformationSetByteStream((uint64_t)v97, v11);
    if ((_DWORD)v9)
      goto LABEL_152;
  }
  *(_OWORD *)(v10 + 27) = *(_OWORD *)(v6 + 216);
  v12 = *(_OWORD *)(v6 + 232);
  v13 = *(_OWORD *)(v6 + 248);
  v14 = *(_OWORD *)(v6 + 280);
  *(_OWORD *)(v10 + 33) = *(_OWORD *)(v6 + 264);
  *(_OWORD *)(v10 + 35) = v14;
  *(_OWORD *)(v10 + 31) = v13;
  *(_OWORD *)(v10 + 29) = v12;
  blockBufferOut = 0;
  cf = 0;
  v95 = *(_QWORD *)(v6 + 304);
  if (v95 < 1)
  {
    v58 = 0;
    goto LABEL_139;
  }
  v93 = a4;
  v15 = 0;
  v16 = *(_QWORD *)(v6 + 24);
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v94 = v6;
  while (1)
  {
    if (*(_QWORD *)(v6 + 304) <= v15)
      v17 = 0;
    else
      v17 = *(_QWORD *)(*(_QWORD *)(v6 + 320) + 8 * v15);
    v18 = MovieTrackCreate((uint64_t *)&cf);
    if ((_DWORD)v18)
    {
      v58 = v18;
      goto LABEL_138;
    }
    v19 = (char *)cf;
    *((_DWORD *)cf + 6) = *(_DWORD *)(v17 + 24);
    if (*(_QWORD *)(v17 + 40))
    {
      Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
      *((_QWORD *)v19 + 5) = Mutable;
      if (!Mutable)
        goto LABEL_135;
      Count = CFArrayGetCount(*(CFArrayRef *)(v17 + 40));
      if (Count >= 1)
      {
        v22 = Count;
        v23 = 0;
        do
        {
          ValueAtIndex = (OpaqueCMBlockBuffer *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v17 + 40), v23);
          v25 = CMBlockBufferCreateContiguous(a1, ValueAtIndex, a1, 0, 0, 0, 2u, &blockBufferOut);
          if ((_DWORD)v25)
            goto LABEL_136;
          CFArrayAppendValue(*((CFMutableArrayRef *)v19 + 5), blockBufferOut);
          if (blockBufferOut)
          {
            CFRelease(blockBufferOut);
            blockBufferOut = 0;
          }
        }
        while (v22 != ++v23);
      }
    }
    if (*(_QWORD *)(v17 + 56))
    {
      v26 = CFArrayCreateMutable(allocator, 0, 0);
      *((_QWORD *)v19 + 7) = v26;
      if (!v26)
        goto LABEL_135;
      v27 = CFArrayGetCount(*(CFArrayRef *)(v17 + 56));
      if (v27 >= 1)
      {
        v28 = v27;
        v29 = 0;
        while (1)
        {
          v30 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v17 + 56), v29);
          v31 = malloc_type_malloc(0x10uLL, 0x1000040451B5BE8uLL);
          if (!v31)
            break;
          *v31 = *v30;
          CFArrayAppendValue(*((CFMutableArrayRef *)v19 + 7), v31);
          if (v28 == ++v29)
            goto LABEL_26;
        }
LABEL_135:
        v25 = FigSignalErrorAt();
        goto LABEL_136;
      }
    }
LABEL_26:
    v32 = *(const __CFArray **)(v17 + 48);
    if (v32)
    {
      v33 = CFArrayGetCount(v32);
      MutableCopy = CFArrayCreateMutableCopy(a1, v33, *(CFArrayRef *)(v17 + 48));
      *((_QWORD *)v19 + 6) = MutableCopy;
      if (!MutableCopy)
        goto LABEL_135;
    }
    if (*(_QWORD *)(v17 + 64))
    {
      v35 = CFArrayCreateMutable(allocator, 0, 0);
      *((_QWORD *)v19 + 8) = v35;
      if (!v35)
        goto LABEL_135;
      v36 = CFArrayGetCount(*(CFArrayRef *)(v17 + 64));
      if (v36 >= 1)
      {
        v37 = v36;
        v38 = 0;
        while (1)
        {
          v39 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v17 + 64), v38);
          v40 = (OpaqueCMBlockBuffer *)*((_QWORD *)v39 + 1);
          if (v40)
          {
            v25 = CMBlockBufferCreateContiguous(a1, v40, a1, 0, 0, 0, 2u, &blockBufferOut);
            if ((_DWORD)v25)
              break;
          }
          v41 = malloc_type_calloc(1uLL, 0x18uLL, 0x1060040ABACF81FuLL);
          if (!v41)
            goto LABEL_135;
          v42 = v41;
          *v41 = *(_DWORD *)v39;
          v43 = (CFTypeRef)*((_QWORD *)v39 + 2);
          if (v43)
            v43 = CFRetain(v43);
          v42[1] = blockBufferOut;
          v42[2] = v43;
          blockBufferOut = 0;
          CFArrayAppendValue(*((CFMutableArrayRef *)v19 + 8), v42);
          if (v37 == ++v38)
            goto LABEL_38;
        }
LABEL_136:
        v58 = v25;
LABEL_137:
        v6 = v94;
        goto LABEL_138;
      }
    }
LABEL_38:
    v100 = 0;
    if (MovieSampleGroupCollectionGetCount(*(_QWORD *)(v17 + 72)))
    {
      v44 = CFGetAllocator(v19);
      v45 = MovieSampleGroupCollectionCreate(v44, (uint64_t *)&v100);
      if ((_DWORD)v45)
      {
        v58 = v45;
        if (v100)
          CFRelease(v100);
        goto LABEL_137;
      }
      MovieSampleGroupCollectionApplyFunction(*(_QWORD *)(v17 + 72), (uint64_t)SampleGroupDeepCopyApplier, (uint64_t)v100);
      *((_QWORD *)v19 + 9) = v100;
    }
    *((_QWORD *)v19 + 14) = *(_QWORD *)(v17 + 112);
    v46 = *(_OWORD *)(v17 + 120);
    *(_OWORD *)(v19 + 136) = *(_OWORD *)(v17 + 136);
    *(_OWORD *)(v19 + 120) = v46;
    v47 = *(_OWORD *)(v17 + 152);
    v48 = *(_OWORD *)(v17 + 168);
    v49 = *(_OWORD *)(v17 + 184);
    *((_QWORD *)v19 + 25) = *(_QWORD *)(v17 + 200);
    *(_OWORD *)(v19 + 184) = v49;
    *(_OWORD *)(v19 + 168) = v48;
    *(_OWORD *)(v19 + 152) = v47;
    v50 = *(_OWORD *)(v17 + 224);
    *((_OWORD *)v19 + 13) = *(_OWORD *)(v17 + 208);
    *((_OWORD *)v19 + 14) = v50;
    v19[240] = *(_BYTE *)(v17 + 240);
    *(_QWORD *)(v19 + 244) = *(_QWORD *)(v17 + 244);
    v51 = *(_QWORD *)(v17 + 252);
    *((_DWORD *)v19 + 65) = *(_DWORD *)(v17 + 260);
    *(_QWORD *)(v19 + 252) = v51;
    v52 = *(_QWORD *)(v17 + 264);
    *((_DWORD *)v19 + 68) = *(_DWORD *)(v17 + 272);
    *((_QWORD *)v19 + 33) = v52;
    v53 = *(_QWORD *)(v17 + 276);
    *((_DWORD *)v19 + 71) = *(_DWORD *)(v17 + 284);
    *(_QWORD *)(v19 + 276) = v53;
    *((_QWORD *)v19 + 36) = *(_QWORD *)(v17 + 288);
    *(_OWORD *)(v19 + 88) = *(_OWORD *)(v17 + 88);
    *((_QWORD *)v19 + 13) = *(_QWORD *)(v17 + 104);
    *((_DWORD *)v19 + 74) = *(_DWORD *)(v17 + 296);
    *((_QWORD *)v19 + 38) = *(_QWORD *)(v17 + 304);
    *((_WORD *)v19 + 432) = *(_WORD *)(v17 + 864);
    v100 = 0;
    *((_QWORD *)v19 + 73) = GetNumSamples_stsz;
    *((_QWORD *)v19 + 74) = GetSampleSize_stsz;
    *((_QWORD *)v19 + 75) = GetSampleSizeFieldSize_stsz;
    *((_QWORD *)v19 + 76) = GetSizeTable_stsz;
    *((_QWORD *)v19 + 77) = GetChunkOffset_stco;
    *((_QWORD *)v19 + 78) = GetChunkCount_stco;
    *((_QWORD *)v19 + 79) = GetChunkTable_stco;
    v54 = *(_DWORD *)(v17 + 312);
    if (v54)
    {
      v55 = *(OpaqueCMBlockBuffer **)(v17 + 320);
      if (v55)
      {
        if (v16)
          v56 = CMBlockBufferCreateContiguous(a1, v55, a1, 0, 0, 0, 2u, &v100);
        else
          v56 = CMBlockBufferCreateWithBufferReference(a1, v55, 0, 0, 0, &v100);
        v58 = v56;
        v57 = v100;
        if ((_DWORD)v56)
          goto LABEL_159;
        v54 = *(_DWORD *)(v17 + 312);
      }
      else
      {
        v57 = 0;
      }
      MovieSampleTableSet_stsz((uint64_t)v19, v54, *(_DWORD *)(v17 + 316), v57);
      if (v100)
      {
        CFRelease(v100);
        v100 = 0;
      }
    }
    v59 = *(OpaqueCMBlockBuffer **)(v17 + 344);
    if (v59)
      break;
LABEL_59:
    v62 = *(OpaqueCMBlockBuffer **)(v17 + 368);
    if (v62)
    {
      if (v16)
        v63 = CMBlockBufferCreateContiguous(a1, v62, a1, 0, 0, 0, 2u, &v100);
      else
        v63 = CMBlockBufferCreateWithBufferReference(a1, v62, 0, 0, 0, &v100);
      v58 = v63;
      v57 = v100;
      if ((_DWORD)v63)
        goto LABEL_159;
      MovieSampleTableSet_stco((uint64_t)v19, *(_DWORD *)(v17 + 360), v100);
      if (v100)
      {
        CFRelease(v100);
        v100 = 0;
      }
    }
    v64 = *(OpaqueCMBlockBuffer **)(v17 + 392);
    if (v64)
    {
      if (v16)
        v65 = CMBlockBufferCreateContiguous(a1, v64, a1, 0, 0, 0, 2u, &v100);
      else
        v65 = CMBlockBufferCreateWithBufferReference(a1, v64, 0, 0, 0, &v100);
      v58 = v65;
      v57 = v100;
      if ((_DWORD)v65)
        goto LABEL_159;
      MovieSampleTableSet_co64((uint64_t)v19, *(_DWORD *)(v17 + 384), v100);
      if (v100)
      {
        CFRelease(v100);
        v100 = 0;
      }
    }
    v66 = *(OpaqueCMBlockBuffer **)(v17 + 416);
    if (v66)
    {
      if (v16)
        v67 = CMBlockBufferCreateContiguous(a1, v66, a1, 0, 0, 0, 2u, &v100);
      else
        v67 = CMBlockBufferCreateWithBufferReference(a1, v66, 0, 0, 0, &v100);
      v58 = v67;
      v57 = v100;
      if ((_DWORD)v67)
        goto LABEL_159;
      MovieSampleTableSet_stts((uint64_t)v19, *(_DWORD *)(v17 + 408), v100);
      if (v100)
      {
        CFRelease(v100);
        v100 = 0;
      }
    }
    v68 = *(OpaqueCMBlockBuffer **)(v17 + 440);
    if (v68)
    {
      if (v16)
        v69 = CMBlockBufferCreateContiguous(a1, v68, a1, 0, 0, 0, 2u, &v100);
      else
        v69 = CMBlockBufferCreateWithBufferReference(a1, v68, 0, 0, 0, &v100);
      v58 = v69;
      v57 = v100;
      if ((_DWORD)v69)
        goto LABEL_159;
      MovieSampleTableSet_stsc((uint64_t)v19, *(_DWORD *)(v17 + 432), v100);
      if (v100)
      {
        CFRelease(v100);
        v100 = 0;
      }
    }
    v70 = *(OpaqueCMBlockBuffer **)(v17 + 464);
    if (v70)
    {
      if (v16)
        v71 = CMBlockBufferCreateContiguous(a1, v70, a1, 0, 0, 0, 2u, &v100);
      else
        v71 = CMBlockBufferCreateWithBufferReference(a1, v70, 0, 0, 0, &v100);
      v58 = v71;
      v57 = v100;
      if ((_DWORD)v71)
        goto LABEL_159;
      MovieSampleTableSet_ctts((uint64_t)v19, *(_DWORD *)(v17 + 456), v100);
      if (v100)
      {
        CFRelease(v100);
        v100 = 0;
      }
    }
    v72 = *(OpaqueCMBlockBuffer **)(v17 + 488);
    if (v72)
    {
      if (v16)
      {
        if (CMBlockBufferIsEmpty(*(CMBlockBufferRef *)(v17 + 488)))
          v73 = CMBlockBufferCreateEmpty(a1, 0, 0, &v100);
        else
          v73 = CMBlockBufferCreateContiguous(a1, *(CMBlockBufferRef *)(v17 + 488), a1, 0, 0, 0, 2u, &v100);
      }
      else
      {
        v73 = CMBlockBufferCreateWithBufferReference(a1, v72, 0, 0, 0, &v100);
      }
      v58 = v73;
      v57 = v100;
      if ((_DWORD)v73)
        goto LABEL_159;
      MovieSampleTableSet_stss((uint64_t)v19, *(_DWORD *)(v17 + 480), v100);
      if (v100)
      {
        CFRelease(v100);
        v100 = 0;
      }
    }
    v74 = *(OpaqueCMBlockBuffer **)(v17 + 512);
    if (v74)
    {
      if (v16)
      {
        if (CMBlockBufferIsEmpty(*(CMBlockBufferRef *)(v17 + 512)))
          v75 = CMBlockBufferCreateEmpty(a1, 0, 0, &v100);
        else
          v75 = CMBlockBufferCreateContiguous(a1, *(CMBlockBufferRef *)(v17 + 512), a1, 0, 0, 0, 2u, &v100);
      }
      else
      {
        v75 = CMBlockBufferCreateWithBufferReference(a1, v74, 0, 0, 0, &v100);
      }
      v58 = v75;
      v57 = v100;
      if ((_DWORD)v75)
        goto LABEL_159;
      MovieSampleTableSet_stps((uint64_t)v19, *(_DWORD *)(v17 + 504), v100);
      if (v100)
      {
        CFRelease(v100);
        v100 = 0;
      }
    }
    v76 = *(OpaqueCMBlockBuffer **)(v17 + 536);
    if (v76)
    {
      if (v16)
        v77 = CMBlockBufferCreateContiguous(a1, v76, a1, 0, 0, 0, 2u, &v100);
      else
        v77 = CMBlockBufferCreateWithBufferReference(a1, v76, 0, 0, 0, &v100);
      v58 = v77;
      v57 = v100;
      if ((_DWORD)v77)
        goto LABEL_159;
      MovieSampleTableSet_sdtp((uint64_t)v19, *(_DWORD *)(v17 + 528), v100);
      if (v100)
        CFRelease(v100);
    }
    if (*(_BYTE *)(v17 + 576))
    {
      v19[576] = 1;
      v78 = *(_OWORD *)(v17 + 552);
      *((_QWORD *)v19 + 71) = *(_QWORD *)(v17 + 568);
      *(_OWORD *)(v19 + 552) = v78;
    }
    v19[722] = *(_BYTE *)(v17 + 722);
    *((_QWORD *)v19 + 102) = *(_QWORD *)(v17 + 816);
    *((_DWORD *)v19 + 206) = *(_DWORD *)(v17 + 824);
    v79 = *(int *)(v17 + 820);
    if ((_DWORD)v79)
    {
      v80 = malloc_type_malloc(96 * v79, 0x1000040565EDBD2uLL);
      *((_QWORD *)v19 + 101) = v80;
      if (!v80)
        goto LABEL_135;
      v81 = *(int *)(v17 + 816);
      if ((_DWORD)v81)
        memcpy(v80, *(const void **)(v17 + 808), 96 * v81);
    }
    v82 = *(const __CFDictionary **)(v17 + 832);
    if (v82)
      *((_QWORD *)v19 + 104) = CFDictionaryCreateCopy(a1, v82);
    *((_QWORD *)v19 + 105) = *(_QWORD *)(v17 + 840);
    v83 = *(const __CFString **)(v17 + 856);
    if (v83)
      *((_QWORD *)v19 + 107) = CFStringCreateCopy(a1, v83);
    v84 = *(const __CFString **)(v17 + 848);
    if (v84)
      *((_QWORD *)v19 + 106) = CFStringCreateCopy(a1, v84);
    *(_OWORD *)(v19 + 866) = *(_OWORD *)(v17 + 866);
    *(_DWORD *)(v19 + 882) = *(_DWORD *)(v17 + 882);
    v25 = MovieInformationAddNewPerTrackInfo(v10, v19);
    if ((_DWORD)v25)
      goto LABEL_136;
    CFRelease(v19);
    cf = 0;
    ++v15;
    v6 = v94;
    if (v15 == v95)
    {
      v58 = 0;
LABEL_138:
      a4 = v93;
      goto LABEL_139;
    }
  }
  if (v16)
    v60 = CMBlockBufferCreateContiguous(a1, v59, a1, 0, 0, 0, 2u, &v100);
  else
    v60 = CMBlockBufferCreateWithBufferReference(a1, v59, 0, 0, 0, &v100);
  v58 = v60;
  v57 = v100;
  if ((_DWORD)v60)
    goto LABEL_159;
  v61 = MovieSampleTableSet_stz2((uint64_t)v19, *(_DWORD *)(v17 + 340), *(_DWORD *)(v17 + 336), v100);
  v57 = v100;
  if (!(_DWORD)v61)
  {
    if (v100)
    {
      CFRelease(v100);
      v100 = 0;
    }
    goto LABEL_59;
  }
  v58 = v61;
LABEL_159:
  a4 = v93;
  v6 = v94;
  if (v57)
    CFRelease(v57);
LABEL_139:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (cf)
    CFRelease(cf);
  if ((_DWORD)v58)
    goto LABEL_153;
  if (*(uint64_t *)(v6 + 328) < 1)
  {
LABEL_148:
    v58 = 0;
    *a4 = v10;
  }
  else
  {
    v85 = 0;
    v86 = 0;
    while (1)
    {
      v9 = EnsureTrackReferenceArrayCapacityForAddition(v10);
      if ((_DWORD)v9)
        break;
      v87 = v10[43] + 12 * v10[41];
      *(_DWORD *)(v87 + 8) = 0;
      *(_QWORD *)v87 = 0;
      v88 = v10[41];
      v89 = v10[43] + 12 * v88;
      v10[41] = v88 + 1;
      v90 = (uint64_t *)(*(_QWORD *)(v6 + 344) + v85);
      v91 = *v90;
      *(_DWORD *)(v89 + 8) = *((_DWORD *)v90 + 2);
      *(_QWORD *)v89 = v91;
      ++v86;
      v85 += 12;
      if (v86 >= *(_QWORD *)(v6 + 328))
        goto LABEL_148;
    }
LABEL_152:
    v58 = v9;
LABEL_153:
    if (v10)
      CFRelease(v10);
  }
LABEL_149:
  if (*(_QWORD *)(v6 + 24))
    FigReadWriteLockUnlockForRead();
  return v58;
}

uint64_t MovieTrackAddFragmentRun(CMTime *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  size_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  signed int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  signed int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  BOOL v26;
  _BOOL4 v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  _BOOL4 v53;
  int v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _WORD *v71;
  int v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  unsigned int *v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *);
  uint64_t v83;
  void (*v84)(uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *);
  int64_t v85;
  int64_t v86;
  int64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int *v94;
  uint64_t v95;
  unsigned int v96;
  signed int v97;
  int64_t v98;
  int64_t v99;
  int v100;
  uint64_t v101;
  unsigned int *v102;
  uint64_t v103;
  const __CFAllocator *v104;
  uint64_t v105;
  void *v106;
  void *v107;
  uint64_t v108;
  int v109;
  int v110;
  void (*v111)(uint64_t, uint64_t, _QWORD, unint64_t *, unint64_t *);
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  unsigned int *v116;
  uint64_t v117;
  void (*v118)(uint64_t, uint64_t, _QWORD, unint64_t *, unint64_t *);
  uint64_t v119;
  void (*v120)(uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *);
  uint64_t v121;
  void (*v122)(uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *);
  uint64_t v124;
  CMTime *v125;
  unint64_t destination;
  unsigned int v127;
  unint64_t v128;
  unint64_t v129;

  v129 = 0;
  v10 = (*(uint64_t (**)(uint64_t))(a2 + 624))(a2);
  v11 = *(_QWORD *)(a3 + 48) + *(int *)(a4 + 32);
  v12 = *(_QWORD *)(a2 + 392);
  if (v11 > 4000000000)
  {
    if (!v12)
      UpgradeTo64BitChunkOffsets(a2, v8, v9);
    goto LABEL_5;
  }
  if (v12)
  {
LABEL_5:
    MakeTableReadyToWrite((OpaqueCMBlockBuffer **)(a2 + 392), (uint64_t *)(a2 + 400));
    destination = bswap64(v11);
    CMByteStreamAppend();
    ++*(_DWORD *)(a2 + 384);
    goto LABEL_6;
  }
  MakeTableReadyToWrite((OpaqueCMBlockBuffer **)(a2 + 368), (uint64_t *)(a2 + 376));
  LODWORD(destination) = bswap32(v11);
  CMByteStreamAppend();
  ++*(_DWORD *)(a2 + 360);
LABEL_6:
  v13 = *(_DWORD *)(a2 + 432);
  if (v13)
  {
    v127 = 0;
    destination = 0;
    CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a2 + 440), 12 * v13 - 12, 0xCuLL, &destination);
    v14 = bswap32(v127);
    v15 = 12 * *(int *)(a2 + 432);
    v127 = 0;
    destination = 0;
    CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a2 + 440), v15 - 12, 0xCuLL, &destination);
    v13 = bswap32(HIDWORD(destination));
  }
  else
  {
    v14 = 0;
  }
  if (v14 != *(_DWORD *)(a3 + 56) || *(_DWORD *)(a4 + 36) != v13)
  {
    v129 = 0;
    MakeTableReadyToWrite((OpaqueCMBlockBuffer **)(a2 + 440), (uint64_t *)(a2 + 448));
    destination = __PAIR64__(bswap32(*(_DWORD *)(a4 + 36)), bswap32(v10 + 1));
    v127 = bswap32(*(_DWORD *)(a3 + 56));
    CMByteStreamAppend();
    ++*(_DWORD *)(a2 + 432);
  }
  v16 = UpgradeTo32BitSampleSizes(a2);
  v17 = *(_DWORD *)(a2 + 292);
  v18 = *(_DWORD *)(a2 + 288);
  v19 = *(_QWORD *)(a2 + 728);
  if (v19)
    v18 += *(_DWORD *)(v19 + 8);
  if (!v17)
  {
    MakeTableReadyToWrite((OpaqueCMBlockBuffer **)(a2 + 320), (uint64_t *)(a2 + 328));
LABEL_23:
    AddFragmentRunSampleSizes(a3, a4);
    goto LABEL_24;
  }
  v20 = *(unsigned int *)(a4 + 48);
  if ((v20 & 2) == 0)
  {
    if (*(_DWORD *)(a3 + 64) == v17)
      goto LABEL_24;
    v21 = bswap32(v17);
    goto LABEL_18;
  }
  v44 = *(int *)(a4 + 36);
  if ((int)v44 >= 1)
  {
    v45 = kPerSampleInfo_SizeInInt32s[v20];
    v46 = (_DWORD *)(a4 + 4 * kPerSampleInfo_SizeIndex[v20] + 52);
    v21 = bswap32(v17);
    while (*v46 == v21)
    {
      v46 += v45;
      if (!--v44)
        goto LABEL_24;
    }
LABEL_18:
    destination = 0;
    MakeTableReadyToWrite((OpaqueCMBlockBuffer **)(a2 + 320), (uint64_t *)(a2 + 328));
    LODWORD(v129) = v21;
    if (*(int *)(a2 + 288) >= 1)
    {
      v22 = 0;
      do
      {
        CMByteStreamAppend();
        ++v22;
      }
      while (v22 < *(int *)(a2 + 288));
    }
    *(_DWORD *)(a2 + 316) = 0;
    *(_DWORD *)(a2 + 292) = 0;
    goto LABEL_23;
  }
LABEL_24:
  v23 = *(int *)(a4 + 36);
  v24 = *(_DWORD *)(a2 + 312) + v23;
  *(_DWORD *)(a2 + 312) = v24;
  *(_DWORD *)(a2 + 288) = v24;
  *(_QWORD *)(a2 + 840) = 0;
  *(_QWORD *)(a2 + 16) |= 0x2001uLL;
  if (!(_DWORD)v16)
  {
    v25 = *(_QWORD *)(a2 + 488);
    if (v25)
    {
      v26 = 0;
      v27 = *(_DWORD *)(a2 + 480) == 0;
    }
    else
    {
      v28 = *(_QWORD *)(a2 + 728);
      if (v28)
        v24 += *(_DWORD *)(v28 + 8);
      v27 = 0;
      v26 = v24 != 0;
    }
    v29 = v18 + 1;
    LODWORD(v129) = 0;
    destination = 0;
    if (!v26 && !v27)
    {
LABEL_32:
      MakeTableReadyToWrite((OpaqueCMBlockBuffer **)(a2 + 488), (uint64_t *)(a2 + 496));
      v30 = *(unsigned int *)(a4 + 48);
      if ((v30 & 4) != 0)
      {
        v39 = *(_DWORD *)(a4 + 36);
        if (v39 >= 1)
        {
          v40 = 0;
          v41 = a4 + 4 * kPerSampleInfo_FlagsIndex[v30] + 52;
          v42 = 4 * kPerSampleInfo_SizeInInt32s[v30];
          do
          {
            if ((_DWORD)v40 || (v43 = a4 + 44, !*(_BYTE *)(a4 + 40)))
              v43 = v41;
            if ((*(_BYTE *)(v43 + 1) & 1) == 0)
            {
              LODWORD(v129) = bswap32(v29 + v40);
              CMByteStreamAppend();
              ++*(_DWORD *)(a2 + 480);
              v39 = *(_DWORD *)(a4 + 36);
            }
            ++v40;
            v41 += v42;
          }
          while (v40 < v39);
        }
      }
      else
      {
        v31 = *(_DWORD *)(a4 + 36);
        if (v31 >= 1)
        {
          v32 = 0;
          while ((_DWORD)v32 || !*(_BYTE *)(a4 + 40))
          {
            if ((*(_DWORD *)(a3 + 68) & 0x10000) == 0)
              goto LABEL_37;
LABEL_38:
            if (++v32 >= v31)
              goto LABEL_93;
          }
          if ((bswap32(*(_DWORD *)(a4 + 44)) & 0x10000) != 0)
            goto LABEL_38;
LABEL_37:
          LODWORD(v129) = bswap32(v29 + v32);
          CMByteStreamAppend();
          ++*(_DWORD *)(a2 + 480);
          v31 = *(_DWORD *)(a4 + 36);
          goto LABEL_38;
        }
      }
LABEL_93:
      if (*(_QWORD *)(a2 + 536))
      {
        destination = 0;
      }
      else
      {
        v58 = *(unsigned int *)(a4 + 48);
        if ((v58 & 4) != 0)
        {
          v66 = *(_DWORD *)(a4 + 36);
          if (v66 < 1)
            goto LABEL_128;
          v67 = 0;
          v68 = kPerSampleInfo_SizeInInt32s[v58];
          v69 = a4 + 4 * kPerSampleInfo_FlagsIndex[v58] + 52;
          v70 = 4 * v68;
          while (1)
          {
            if (v67 || (v71 = (_WORD *)(a4 + 44), !*(_BYTE *)(a4 + 40)))
              v71 = (_WORD *)v69;
            if ((*v71 & 0xF007) != 0)
              break;
            ++v67;
            v69 += v70;
            if (v66 == v67)
              goto LABEL_128;
          }
        }
        else
        {
          v59 = *(_DWORD *)(a4 + 36);
          if (v59 < 1)
            goto LABEL_128;
          v60 = 0;
          while (1)
          {
            v61 = v60 || !*(_BYTE *)(a4 + 40) ? *(_DWORD *)(a3 + 68) : bswap32(*(_DWORD *)(a4 + 44));
            if ((v61 & 0x7F00000) != 0)
              break;
            if (v59 == ++v60)
              goto LABEL_128;
          }
        }
        destination = 0;
        if (v18 >= 1)
        {
          v104 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          v105 = a3;
          v106 = CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (v18 + 1), 0);
          bzero(v106, (v18 + 1));
          v107 = v106;
          a3 = v105;
          CMBlockBufferCreateWithMemoryBlock(v104, v107, (v18 + 1), v104, 0, 0, (v18 + 1), 0, (CMBlockBufferRef *)(a2 + 536));
          *(_DWORD *)(a2 + 528) = v29;
        }
      }
      MakeTableReadyToWrite((OpaqueCMBlockBuffer **)(a2 + 536), (uint64_t *)(a2 + 544));
      v55 = *(unsigned int *)(a4 + 48);
      if ((v55 & 4) != 0)
      {
        if (*(int *)(a4 + 36) >= 1)
        {
          v62 = 0;
          v63 = a4 + 4 * kPerSampleInfo_FlagsIndex[v55] + 52;
          v64 = 4 * kPerSampleInfo_SizeInInt32s[v55];
          do
          {
            if (v62 || (v65 = (unsigned int *)(a4 + 44), !*(_BYTE *)(a4 + 40)))
              v65 = (unsigned int *)v63;
            LOBYTE(v129) = (bswap32(*v65) >> 20) & 0x7F;
            CMByteStreamAppend();
            ++*(_DWORD *)(a2 + 528);
            ++v62;
            v63 += v64;
          }
          while (v62 < *(_DWORD *)(a4 + 36));
        }
      }
      else if (*(int *)(a4 + 36) >= 1)
      {
        v56 = 0;
        do
        {
          if (v56 || !*(_BYTE *)(a4 + 40))
            v57 = *(_DWORD *)(a3 + 68);
          else
            v57 = bswap32(*(_DWORD *)(a4 + 44));
          LOBYTE(v129) = (v57 >> 20) & 0x7F;
          CMByteStreamAppend();
          ++*(_DWORD *)(a2 + 528);
          ++v56;
        }
        while (v56 < *(_DWORD *)(a4 + 36));
      }
LABEL_128:
      v128 = 0;
      v129 = 0;
      MakeReadyToWrite_stts(a2);
      v72 = *(_DWORD *)(a2 + 408);
      if (v72)
      {
        v73 = v72 - 1;
        destination = 0;
        CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a2 + 416), 8 * (v72 - 1), 8uLL, &destination);
        v74 = bswap32(destination);
        destination = 0;
        CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a2 + 416), 8 * v73, 8uLL, &destination);
        v75 = bswap32(HIDWORD(destination));
      }
      else
      {
        v74 = 0;
        v73 = 0;
        v75 = 0xFFFFFFFFLL;
      }
      v76 = *(unsigned int *)(a4 + 48);
      v124 = a3;
      v125 = a1;
      if ((v76 & 1) != 0)
      {
        v77 = *(_DWORD *)(a4 + 36);
        if (v77 >= 1)
        {
          v78 = 0;
          v79 = (unsigned int *)(a4 + 52);
          v80 = 4 * kPerSampleInfo_SizeInInt32s[v76];
          do
          {
            a3 = bswap32(*v79);
            if ((_DWORD)v75 == (_DWORD)a3)
            {
              ++v74;
              a3 = v75;
            }
            else
            {
              if (v74)
              {
                v128 = _byteswap_uint64(__PAIR64__(v74, v75));
                v81 = *(_QWORD *)(a2 + 424);
                v82 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
                if (v82)
                  v82(v81, 8, 8 * v73, &v128, &v129);
                ++v73;
                v77 = *(_DWORD *)(a4 + 36);
              }
              v74 = 1;
            }
            ++v78;
            v79 = (unsigned int *)((char *)v79 + v80);
            v75 = a3;
          }
          while (v78 < v77);
LABEL_146:
          if (!v74)
            goto LABEL_149;
          goto LABEL_147;
        }
      }
      else
      {
        LODWORD(a3) = *(_DWORD *)(a3 + 60);
        if ((_DWORD)v75 != (_DWORD)a3)
        {
          if (v74)
            ++v73;
          v74 = *(_DWORD *)(a4 + 36);
          if (!v74)
          {
LABEL_149:
            *(_DWORD *)(a2 + 408) = v73 + 1;
            v85 = *(_QWORD *)(a2 + 88);
            v86 = *(_QWORD *)(a2 + 104);
            v87 = *(_QWORD *)(a2 + 224);
            *(_QWORD *)(a4 + 24) = v87;
            v88 = *(unsigned int *)(a4 + 48);
            if ((v88 & 8) != 0)
            {
              v90 = *(_DWORD *)(a4 + 36);
              if (v90)
              {
                v91 = 0;
                v89 = 0;
                v92 = kPerSampleInfo_CompTimeOffIndex[v88];
                v93 = *(unsigned int *)(v124 + 60);
                v94 = (unsigned int *)(a4 + 52);
                v95 = 4 * kPerSampleInfo_SizeInInt32s[v88];
                do
                {
                  if ((v88 & 1) != 0)
                    v93 = bswap32(*v94);
                  v96 = v94[v92];
                  v97 = bswap32(v96);
                  if (v96)
                  {
                    if (v97 > *(_DWORD *)(a2 + 112))
                      *(_DWORD *)(a2 + 112) = v97;
                    if (v97 < *(_DWORD *)(a2 + 116))
                      *(_DWORD *)(a2 + 116) = v97;
                    v91 = 1;
                  }
                  v98 = v87 + v97;
                  if (v98 < v85)
                    v85 = v98;
                  v99 = v98 + v93;
                  if (v99 > v86)
                    v86 = v99;
                  v87 += v93;
                  v89 += v93;
                  v94 = (unsigned int *)((char *)v94 + v95);
                  --v90;
                }
                while (v90);
              }
              else
              {
                v89 = 0;
                v91 = 0;
              }
            }
            else
            {
              if ((v88 & 1) != 0)
              {
                v100 = *(_DWORD *)(a4 + 36);
                if (v100)
                {
                  v89 = 0;
                  v101 = kPerSampleInfo_SizeInInt32s[v88];
                  v102 = (unsigned int *)(a4 + 52);
                  v103 = 4 * v101;
                  do
                  {
                    v89 += bswap32(*v102);
                    v102 = (unsigned int *)((char *)v102 + v103);
                    --v100;
                  }
                  while (v100);
                }
                else
                {
                  v89 = 0;
                }
              }
              else
              {
                v89 = (*(_DWORD *)(v124 + 60) * *(_DWORD *)(a4 + 36));
              }
              v91 = 0;
              v86 = v89 + v87;
              v85 = v87;
            }
            MovieTrackAddRunContributionToEditSegmentArray((uint64_t)v125, a2, v85, v86);
            *(_QWORD *)(a2 + 88) = v85;
            *(_QWORD *)(a2 + 104) = v86;
            *(_QWORD *)(a2 + 224) += v89;
            v108 = *(_QWORD *)(a2 + 16);
            *(_QWORD *)(a2 + 16) = v108 | 2;
            if (*(_BYTE *)(a2 + 898))
              *(_QWORD *)(a2 + 16) = v108 | 0x200002;
            UpdateDurationsForEditSegmentChange(v125, a2);
            v128 = 0;
            v129 = 0;
            MakeReadyToWrite_ctts(a2);
            v109 = *(_DWORD *)(a2 + 456);
            if (v109)
            {
              v110 = v109 - 1;
              destination = 0;
              CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a2 + 464), 8 * (v109 - 1), 8uLL, &destination);
              v18 = bswap32(destination);
              destination = 0;
              CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a2 + 464), 8 * v110, 8uLL, &destination);
              v111 = (void (*)(uint64_t, uint64_t, _QWORD, unint64_t *, unint64_t *))bswap32(HIDWORD(destination));
              if (!v91)
                goto LABEL_203;
            }
            else
            {
              if (v18 < 1)
              {
                v111 = 0;
                v18 = 0;
              }
              else
              {
                v129 = bswap32(v18);
                v112 = *(_QWORD *)(a2 + 472);
                v111 = *(void (**)(uint64_t, uint64_t, _QWORD, unint64_t *, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
                if (v111)
                {
                  v111(v112, 8, 0, &v129, &v128);
                  v111 = 0;
                }
              }
              v110 = 0;
              if (!v91)
                goto LABEL_203;
            }
            v113 = *(unsigned int *)(a4 + 48);
            if ((v113 & 8) != 0)
            {
              v114 = *(_DWORD *)(a4 + 36);
              if (v114 < 1)
              {
                LODWORD(v118) = (_DWORD)v111;
                if (v18)
                {
LABEL_209:
                  v129 = _byteswap_uint64(__PAIR64__(v18, v118));
                  v121 = *(_QWORD *)(a2 + 472);
                  v122 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
                  if (v122)
                    v122(v121, 8, 8 * v110, &v129, &v128);
                }
LABEL_211:
                v16 = 0;
                *(_DWORD *)(a2 + 456) = v110 + 1;
                return v16;
              }
              v115 = 0;
              v116 = (unsigned int *)(a4 + 4 * kPerSampleInfo_CompTimeOffIndex[v113] + 52);
              v117 = 4 * kPerSampleInfo_SizeInInt32s[v113];
              do
              {
                v118 = (void (*)(uint64_t, uint64_t, _QWORD, unint64_t *, unint64_t *))bswap32(*v116);
                if ((_DWORD)v111 == (_DWORD)v118)
                {
                  ++v18;
                  v118 = v111;
                }
                else
                {
                  if (v18)
                  {
                    v129 = _byteswap_uint64(__PAIR64__(v18, v111));
                    v119 = *(_QWORD *)(a2 + 472);
                    v120 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
                    if (v120)
                      v120(v119, 8, 8 * v110, &v129, &v128);
                    ++v110;
                    v114 = *(_DWORD *)(a4 + 36);
                  }
                  v18 = 1;
                }
                ++v115;
                v116 = (unsigned int *)((char *)v116 + v117);
                v111 = v118;
              }
              while (v115 < v114);
LABEL_208:
              if (v18)
                goto LABEL_209;
              goto LABEL_211;
            }
LABEL_203:
            LODWORD(v118) = 0;
            if ((_DWORD)v111)
              v18 = *(_DWORD *)(a4 + 36);
            else
              v18 += *(_DWORD *)(a4 + 36);
            if ((_DWORD)v111)
              ++v110;
            goto LABEL_208;
          }
LABEL_147:
          v128 = _byteswap_uint64(__PAIR64__(v74, a3));
          v83 = *(_QWORD *)(a2 + 424);
          v84 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
          if (v84)
            v84(v83, 8, 8 * v73, &v128, &v129);
          goto LABEL_149;
        }
        v74 += *(_DWORD *)(a4 + 36);
      }
      LODWORD(a3) = v75;
      goto LABEL_146;
    }
    v33 = *(unsigned int *)(a4 + 48);
    if ((v33 & 4) != 0)
    {
      if ((int)v23 < 1)
        goto LABEL_91;
      v34 = 0;
      v35 = 0;
      v47 = 0;
      v48 = kPerSampleInfo_SizeInInt32s[v33];
      v49 = a4 + 4 * kPerSampleInfo_FlagsIndex[v33] + 52;
      v50 = 4 * v48;
      v37 = 1;
      do
      {
        if ((_DWORD)v47 || (v51 = a4 + 44, !*(_BYTE *)(a4 + 40)))
          v51 = v49;
        v52 = *(unsigned __int8 *)(v51 + 1);
        v37 &= v52 << 31 >> 31;
        if ((v52 & 1) != 0)
          v34 = 1;
        else
          v35 = 1;
        ++v47;
        v49 += v50;
      }
      while (v23 != v47);
    }
    else
    {
      if ((int)v23 < 1)
        goto LABEL_91;
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v37 = 1;
      do
      {
        if ((_DWORD)v36 || !*(_BYTE *)(a4 + 40))
          v38 = *(_DWORD *)(a3 + 68);
        else
          v38 = bswap32(*(_DWORD *)(a4 + 44));
        v37 &= (int)(v38 << 15) >> 31;
        if ((v38 & 0x10000) != 0)
          v34 = 1;
        else
          v35 = 1;
        ++v36;
      }
      while (v23 != v36);
    }
    if (v34)
    {
      v53 = v35 != 0;
    }
    else
    {
      v26 = 0;
      v53 = 0;
    }
    if (v26)
    {
      MakeTableReadyToWrite((OpaqueCMBlockBuffer **)(a2 + 488), (uint64_t *)(a2 + 496));
      if (v18 >= 1)
      {
        v54 = 0;
        do
        {
          LODWORD(v129) = bswap32(++v54);
          CMByteStreamAppend();
          ++*(_DWORD *)(a2 + 480);
        }
        while (v18 != v54);
      }
      if (v53)
        goto LABEL_32;
    }
    else if (v53)
    {
      goto LABEL_32;
    }
    if (!(_BYTE)v37)
      goto LABEL_93;
    v25 = *(_QWORD *)(a2 + 488);
LABEL_91:
    if (!v25)
      CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, (CMBlockBufferRef *)(a2 + 488));
    goto LABEL_93;
  }
  return v16;
}

uint64_t MovieTrackExtendMediaDecodeDurationToDisplayEndTime(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int32_t v5;
  uint64_t result;
  CMTimeFlags flags;
  uint64_t v8;
  CMTimeValue value;
  CMTimeScale timescale;
  CMTimeEpoch epoch;
  CMTime v12;
  CMTime lhs;
  CMTime time1;
  CMTime v15;
  CMTime v16;

  v5 = *(_DWORD *)(a2 + 232);
  v16 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v15 = v16;
  result = MovieTrackGetDisplayTimeRange(a1, a2, 0, &v16);
  if (!(_DWORD)result)
  {
    MovieTrackGetMediaDuration(a2, (uint64_t)&v15);
    lhs = v16;
    v12 = v15;
    CMTimeSubtract(&time1, &lhs, &v12);
    lhs = time1;
    CMTimeConvertScale(&time1, &lhs, v5, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    flags = time1.flags;
    v8 = MEMORY[0x1E0CA2E68];
    if ((time1.flags & 0x1D) != 1
      || (value = time1.value,
          timescale = time1.timescale,
          epoch = time1.epoch,
          lhs = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68],
          CMTimeCompare(&time1, &lhs) < 0))
    {
      value = *(_QWORD *)v8;
      timescale = *(_DWORD *)(v8 + 8);
      flags = *(_DWORD *)(v8 + 12);
      epoch = *(_QWORD *)(v8 + 16);
    }
    if (value < 1)
    {
      if (!a3)
        return 0;
    }
    else
    {
      result = MovieHeaderExtendLastSampleDecodeDuration(a2, value);
      if (!a3 || (_DWORD)result)
        return result;
    }
    result = 0;
    *(_QWORD *)a3 = value;
    *(_DWORD *)(a3 + 8) = timescale;
    *(_DWORD *)(a3 + 12) = flags;
    *(_QWORD *)(a3 + 16) = epoch;
  }
  return result;
}

uint64_t MovieHeaderExtendLastSampleDecodeDuration(uint64_t a1, uint64_t a2)
{
  int v2;
  int v5;
  unsigned int v6;
  signed int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t result;
  int v12;
  uint64_t destination;

  v2 = *(_DWORD *)(a1 + 408);
  if (!v2)
    return FigSignalErrorAt();
  v5 = v2 - 1;
  destination = 0;
  CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 416), 8 * (v2 - 1), 8uLL, &destination);
  v6 = destination;
  destination = 0;
  CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 416), 8 * (v2 - 1), 8uLL, &destination);
  if (!v6)
    return FigSignalErrorAt();
  v7 = bswap32(HIDWORD(destination));
  v8 = a2 + v7;
  MakeReadyToWrite_stts(a1);
  if (v8 != (int)v8)
    return FigSignalErrorAt();
  if (v6 == 0x1000000)
  {
    if (v2 == 1
      || (v9 = v2 - 2,
          destination = 0,
          CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 416), 8 * v9, 8uLL, &destination),
          v10 = bswap32(HIDWORD(destination)),
          v8 != v10))
    {
      result = WriteTimeToSampleNumEntry(a1, 1u, (int)a2 + v7, v5);
      if ((_DWORD)result)
        return result;
      goto LABEL_14;
    }
    destination = 0;
    CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 416), 8 * v9, 8uLL, &destination);
    result = WriteTimeToSampleNumEntry(a1, bswap32(destination) + 1, v10, v9);
    if (!(_DWORD)result)
    {
      result = WriteTimeToSampleNumEntry(a1, 0, 0, v5);
      if (!(_DWORD)result)
      {
        v12 = -1;
LABEL_12:
        *(_DWORD *)(a1 + 408) += v12;
LABEL_14:
        result = 0;
        *(_QWORD *)(a1 + 224) += a2;
      }
    }
  }
  else
  {
    result = WriteTimeToSampleNumEntry(a1, bswap32(v6) - 1, v7, v2 - 1);
    if (!(_DWORD)result)
    {
      v12 = 1;
      result = WriteTimeToSampleNumEntry(a1, 1u, (int)a2 + v7, v2);
      if (!(_DWORD)result)
        goto LABEL_12;
    }
  }
  return result;
}

uint64_t MovieTrackSetLastSampleDecodeDuration(uint64_t a1, CMTime *a2)
{
  int32_t v4;
  int v5;
  signed int v6;
  CMTime v8;
  CMTime time1;

  if ((a2->flags & 0x1D) != 1)
    return FigSignalErrorAt();
  v4 = *(_DWORD *)(a1 + 232);
  v5 = *(_DWORD *)(a1 + 408);
  time1 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v8 = *a2;
  if ((CMTimeCompare(&time1, &v8) & 0x80000000) == 0 || !v5)
    return FigSignalErrorAt();
  time1.value = 0;
  CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 416), 8 * (v5 - 1), 8uLL, &time1);
  v6 = bswap32(HIDWORD(time1.value));
  v8 = *a2;
  CMTimeConvertScale(&time1, &v8, v4, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
  *a2 = time1;
  if (a2->value == v6)
    return 0;
  else
    return MovieHeaderExtendLastSampleDecodeDuration(a1, a2->value - v6);
}

uint64_t MovieTrackNoteSampleEncryptionAtomPresent(uint64_t result)
{
  *(_BYTE *)(result + 724) = 1;
  return result;
}

uint64_t MovieTrackIsSampleEncryptionAtomPresent(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 724);
}

uint64_t MovieTrackNoteSampleAuxInfoSizesAtomPresent(uint64_t result)
{
  *(_BYTE *)(result + 725) = 1;
  return result;
}

uint64_t MovieTrackNoteSampleAuxInfoOffsetsAtomPresent(uint64_t result)
{
  *(_BYTE *)(result + 726) = 1;
  return result;
}

BOOL MovieTrackBothSampleAuxInfoAtomsPresent(uint64_t a1)
{
  return *(_BYTE *)(a1 + 725) && *(_BYTE *)(a1 + 726) != 0;
}

uint64_t MovieInformationBeginBuildingMovieFragment(uint64_t a1, char a2, int a3)
{
  uint64_t v5;
  uint64_t *v6;
  const __CFAllocator *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  const void *v12;
  CFIndex Count;
  const __CFAllocator *v14;
  CFMutableDictionaryRef Mutable;
  const __CFDictionary *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;

  v20 = *(_QWORD *)(a1 + 304);
  if (v20 < 1)
    return 0;
  v5 = 0;
  if (a3)
    v6 = &v23;
  else
    v6 = 0;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  while (1)
  {
    if (*(_QWORD *)(a1 + 304) <= v5)
      v8 = 0;
    else
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v5);
    v23 = 0;
    v24 = 0uLL;
    v22 = 0;
    if (*(_QWORD *)(v8 + 768))
      return FigSignalErrorAt();
    if (a3)
    {
      v9 = *(_DWORD *)(v8 + 144);
      v24 = *(_OWORD *)(v8 + 900);
      HIDWORD(v23) = v9;
    }
    v10 = *(_QWORD *)(v8 + 224);
    v11 = *(_DWORD *)(v8 + 24);
    v12 = *(const void **)(v8 + 80);
    if (v12)
    {
      Count = FigCFDictionaryGetCount();
      v14 = CFGetAllocator(v12);
      Mutable = CFDictionaryCreateMutable(v14, Count, 0, MEMORY[0x1E0C9B3A0]);
      if (Mutable)
      {
        v16 = Mutable;
        CFDictionaryApplyFunction((CFDictionaryRef)v12, (CFDictionaryApplierFunction)DeepCopySampleGroupDescriptionArraysApplierFunction, Mutable);
        goto LABEL_17;
      }
      v17 = FigSignalErrorAt();
      if ((_DWORD)v17)
        return v17;
    }
    v16 = 0;
LABEL_17:
    v18 = TrackFragmentBuilderCreate(v11, v16, v10, (uint64_t)v6, v7, &v22);
    if ((_DWORD)v18)
      break;
    if (v16)
      CFRelease(v16);
    *(_QWORD *)(v8 + 768) = v22;
    *(_BYTE *)(v8 + 776) = a2;
    if (v20 == ++v5)
      return 0;
  }
  v17 = v18;
  if (v16)
    CFRelease(v16);
  return v17;
}

void MovieInformationReleaseMovieHeaderSampleTables(uint64_t a1)
{
  uint64_t v1;
  uint64_t i;
  _QWORD *v4;

  v1 = *(_QWORD *)(a1 + 304);
  if (v1 >= 1)
  {
    for (i = 0; i != v1; ++i)
    {
      if (*(_QWORD *)(a1 + 304) <= i)
        v4 = 0;
      else
        v4 = *(_QWORD **)(*(_QWORD *)(a1 + 320) + 8 * i);
      FreeAllSampleTables(v4);
    }
  }
}

void FreeAllSampleTables(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;

  v2 = (const void *)a1[40];
  if (v2)
  {
    CFRelease(v2);
    a1[40] = 0;
  }
  v3 = (const void *)a1[43];
  if (v3)
  {
    CFRelease(v3);
    a1[43] = 0;
  }
  v4 = (const void *)a1[46];
  if (v4)
  {
    CFRelease(v4);
    a1[46] = 0;
  }
  v5 = (const void *)a1[49];
  if (v5)
  {
    CFRelease(v5);
    a1[49] = 0;
  }
  v6 = (const void *)a1[52];
  if (v6)
  {
    CFRelease(v6);
    a1[52] = 0;
  }
  v7 = (const void *)a1[55];
  if (v7)
  {
    CFRelease(v7);
    a1[55] = 0;
  }
  v8 = (const void *)a1[58];
  if (v8)
  {
    CFRelease(v8);
    a1[58] = 0;
  }
  v9 = (const void *)a1[61];
  if (v9)
  {
    CFRelease(v9);
    a1[61] = 0;
  }
  v10 = (const void *)a1[64];
  if (v10)
  {
    CFRelease(v10);
    a1[64] = 0;
  }
  v11 = (const void *)a1[67];
  if (v11)
  {
    CFRelease(v11);
    a1[67] = 0;
  }
  v12 = (const void *)a1[41];
  if (v12)
  {
    CFRelease(v12);
    a1[41] = 0;
  }
  v13 = (const void *)a1[44];
  if (v13)
  {
    CFRelease(v13);
    a1[44] = 0;
  }
  v14 = (const void *)a1[47];
  if (v14)
  {
    CFRelease(v14);
    a1[47] = 0;
  }
  v15 = (const void *)a1[50];
  if (v15)
  {
    CFRelease(v15);
    a1[50] = 0;
  }
  v16 = (const void *)a1[53];
  if (v16)
  {
    CFRelease(v16);
    a1[53] = 0;
  }
  v17 = (const void *)a1[56];
  if (v17)
  {
    CFRelease(v17);
    a1[56] = 0;
  }
  v18 = (const void *)a1[59];
  if (v18)
  {
    CFRelease(v18);
    a1[59] = 0;
  }
  v19 = (const void *)a1[62];
  if (v19)
  {
    CFRelease(v19);
    a1[62] = 0;
  }
  v20 = (const void *)a1[65];
  if (v20)
  {
    CFRelease(v20);
    a1[65] = 0;
  }
  v21 = (const void *)a1[68];
  if (v21)
  {
    CFRelease(v21);
    a1[68] = 0;
  }
}

void MovieInformationReleaseMovieFragmentSampleTables(uint64_t a1)
{
  uint64_t v1;
  uint64_t i;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 304);
  if (v1 >= 1)
  {
    for (i = 0; i != v1; ++i)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * i) + 768);
      if (v4)
        TrackFragmentBuilderSampleTableRelease(v4);
    }
  }
}

uint64_t MovieTrackFragmentGetTrackFragmentHeaderSampleDescriptionIndex(uint64_t a1, _DWORD *a2, _BYTE *a3)
{
  return TrackFragmentBuilderGetTrackFragmentHeaderSampleDescriptionIndex(*(_QWORD *)(a1 + 768), a2, a3);
}

uint64_t MovieTrackFragmentGetTrackFragmentHeaderDefaultSampleDuration(uint64_t a1, _DWORD *a2, _BYTE *a3)
{
  return TrackFragmentBuilderGetTrackFragmentHeaderDefaultSampleDuration(*(_QWORD *)(a1 + 768), a2, a3);
}

uint64_t MovieTrackFragmentGetTrackFragmentHeaderDefaultSampleSize(uint64_t a1, _DWORD *a2, _BYTE *a3)
{
  return TrackFragmentBuilderGetTrackFragmentHeaderDefaultSampleSize(*(_QWORD *)(a1 + 768), a2, a3);
}

uint64_t MovieTrackFragmentGetTrackFragmentHeaderDefaultSampleFlags(uint64_t a1, _DWORD *a2, _BYTE *a3)
{
  return TrackFragmentBuilderGetTrackFragmentHeaderDefaultSampleFlags(*(_QWORD *)(a1 + 768), a2, a3);
}

uint64_t MovieTrackFragmentGetSampleAuxInformation(uint64_t a1, _BYTE *a2, _DWORD *a3, _QWORD *a4, _QWORD *a5, _BYTE *a6)
{
  return TrackFragmentBuilderGetSampleAuxInformation(*(_QWORD *)(a1 + 768), a2, a3, a4, a5, a6);
}

uint64_t MovieTrackFragmentCopySampleGroupDescriptionArrays(uint64_t a1, _QWORD *a2)
{
  return TrackFragmentBuilderCopySampleGroupDescriptionArrays(*(_QWORD *)(a1 + 768), a2);
}

uint64_t MovieTrackFragmentCopySampleGroupArray(uint64_t a1, CFArrayRef *a2)
{
  return TrackFragmentBuilderCopySampleGroupArray(*(_QWORD *)(a1 + 768), a2);
}

uint64_t MovieTrackFragmentSetInitialBaseMediaDecodeTimeValue(uint64_t a1, uint64_t a2)
{
  return TrackFragmentBuilderSetInitialBaseMediaDecodeTimeValue(*(_QWORD *)(a1 + 768), a2);
}

uint64_t MovieTrackFragmentGetTrackFragmentBaseMediaDecodeTimeValue(uint64_t a1, _QWORD *a2, char *a3)
{
  return TrackFragmentBuilderGetTrackFragmentBaseMediaDecodeTimeValue(*(_QWORD **)(a1 + 768), a2, a3);
}

uint64_t MovieTrackFragmentGetTrackFragmentLowestDisplayStartTimeValue(uint64_t a1, _QWORD *a2)
{
  return TrackFragmentBuilderGetTrackFragmentLowestDisplayStartTimeValue(*(_QWORD **)(a1 + 768), a2);
}

uint64_t MovieTrackFragmentGetTrackFragmentMediaDecodeDuration(uint64_t a1, _QWORD *a2)
{
  return TrackFragmentBuilderGetTrackFragmentMediaDecodeDuration(*(_QWORD *)(a1 + 768), a2);
}

uint64_t MovieTrackFragmentNumTrackRuns(uint64_t a1, _DWORD *a2)
{
  return TrackFragmentBuilderNumTrackRuns(*(_QWORD *)(a1 + 768), a2);
}

uint64_t MovieTrackFragmentNumSamplesAtTrackRunIndex(uint64_t a1, CFIndex a2, _DWORD *a3)
{
  return TrackFragmentBuilderNumSamplesAtTrackRunIndex(*(_QWORD *)(a1 + 768), a2, a3);
}

uint64_t MovieTrackFragmentGetDataOffsetAtTrackRunIndex(uint64_t a1, CFIndex a2, _QWORD *a3)
{
  return TrackFragmentBuilderGetDataOffsetAtTrackRunIndex(*(_QWORD *)(a1 + 768), a2, a3);
}

uint64_t MovieTrackFragmentGetFirstSampleFlagsAtTrackRunIndex(uint64_t a1, CFIndex a2, _DWORD *a3, _BYTE *a4)
{
  return TrackFragmentBuilderGetFirstSampleFlagsAtTrackRunIndex(*(_QWORD *)(a1 + 768), a2, a3, a4);
}

uint64_t MovieTrackFragmentGetSampleDurationArrayBbufAtTrackRunIndex(uint64_t a1, CFIndex a2, _DWORD *a3, _QWORD *a4)
{
  return TrackFragmentBuilderGetSampleDurationArrayBbufAtTrackRunIndex(*(_QWORD *)(a1 + 768), a2, a3, a4);
}

uint64_t MovieTrackFragmentGetSampleSizeArrayBbufAtTrackRunIndex(uint64_t a1, CFIndex a2, _DWORD *a3, _QWORD *a4)
{
  return TrackFragmentBuilderGetSampleSizeArrayBbufAtTrackRunIndex(*(_QWORD *)(a1 + 768), a2, a3, a4);
}

uint64_t MovieTrackFragmentGetSampleFlagsArrayBbufAtTrackRunIndex(uint64_t a1, CFIndex a2, _DWORD *a3, _QWORD *a4)
{
  return TrackFragmentBuilderGetSampleFlagsArrayBbufAtTrackRunIndex(*(_QWORD *)(a1 + 768), a2, a3, a4);
}

uint64_t MovieTrackFragmentGetSampleCompositionTimeOffsetArrayBbufAtTrackRunIndex(uint64_t a1, CFIndex a2, _DWORD *a3, _QWORD *a4)
{
  return TrackFragmentBuilderGetSampleCompositionTimeOffsetArrayBbufAtTrackRunIndex(*(_QWORD *)(a1 + 768), a2, a3, a4);
}

uint64_t MovieTrackAppendSampleInformation(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t *a10, const __CFArray *a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v19;
  uint64_t v20;
  int32_t v21;
  uint64_t v22;
  _BOOL4 v23;
  _DWORD *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t result;
  uint64_t v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  size_t v37;
  unsigned int v38;
  unsigned int value_high;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, uint64_t, uint64_t, CMTime *, CMTime *);
  int v50;
  size_t v51;
  uint64_t v52;
  CMTimeValue v53;
  uint64_t v54;
  CMTime *v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  int v68;
  signed int v69;
  int v70;
  uint64_t v71;
  CFIndex v72;
  int v73;
  int v74;
  const void *ValueAtIndex;
  unsigned int v76;
  uint64_t v77;
  __int16 v78;
  int v79;
  int v80;
  unsigned int value_low;
  BOOL v82;
  _BOOL4 v83;
  CFIndex v84;
  const void *v85;
  unint64_t v86;
  unsigned int v87;
  CFIndex v88;
  const __CFDictionary *v89;
  unint64_t v90;
  unsigned int v91;
  CFIndex v92;
  unint64_t v93;
  unsigned int v94;
  BOOL v95;
  CFIndex v96;
  unint64_t v97;
  unsigned int v98;
  BOOL v99;
  uint64_t v100;
  unint64_t v101;
  unsigned int v102;
  CFIndex v103;
  const void *v104;
  unint64_t v105;
  unsigned int v106;
  CFIndex v107;
  int SeamUUIDBytesFromSampleAttachmentArray;
  unint64_t v109;
  unsigned int v110;
  unint64_t Basic;
  unsigned int v112;
  unint64_t v113;
  unsigned int v114;
  unint64_t v115;
  unsigned int v116;
  unint64_t v117;
  unsigned int v118;
  unint64_t v119;
  unsigned int v120;
  unint64_t v121;
  unsigned int v122;
  int64_t v123;
  CMTimeValue v124;
  int64_t v125;
  int64_t v126;
  CMTimeValue v127;
  unint64_t v128;
  CMTimeValue v129;
  uint64_t v130;
  CMTime *v131;
  CMTimeValue v132;
  uint64_t v133;
  CMTimeValue v134;
  CMTimeValue v135;
  int64_t v136;
  unint64_t v137;
  int64_t v138;
  int64_t v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t (*v144)(uint64_t, uint64_t, uint64_t, CMTime *, CMTime *);
  uint64_t *p_value;
  int64_t *v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  CMTime *v150;
  CMMediaType v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unsigned int v156;
  signed int v157;
  _BOOL4 v159;
  int v160;
  uint64_t *v161;
  int64_t v162;
  int64_t value;
  unint64_t v164;
  _BYTE v165[32];
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  CMMediaType v169;
  CMTime rhs;
  CMTime lhs;
  CMTime destination;
  char v173;
  _WORD v174[9];

  v14 = a8;
  v15 = a7;
  v16 = a5;
  v20 = a13;
  v19 = a14;
  v162 = 0;
  value = 0;
  v21 = *(_DWORD *)(a2 + 232);
  v22 = *(_QWORD *)(a2 + 768);
  if (v22)
    v23 = *(_BYTE *)(a2 + 776) != 0;
  else
    v23 = 1;
  v159 = v23;
  if (a6 != (int)a6 || a7 != (int)a7 || a9 != (int)a9)
    return FigSignalErrorAt();
  if (a7 >= 1)
  {
    v24 = (_DWORD *)(a8 + 32);
    v25 = a7;
    while (v21 == *(v24 - 6) && v21 == *v24 && v21 == v24[6])
    {
      v24 += 18;
      if (!--v25)
        goto LABEL_13;
    }
    return FigSignalErrorAt();
  }
LABEL_13:
  if (!v159)
    goto LABEL_255;
  v153 = a6;
  v169 = 0;
  v26 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 48);
  v166 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 32);
  v167 = v26;
  v168 = *(_QWORD *)(MEMORY[0x1E0CA2E90] + 64);
  v27 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 16);
  *(_OWORD *)v165 = *MEMORY[0x1E0CA2E90];
  *(_OWORD *)&v165[16] = v27;
  v164 = 0;
  result = MovieTrackGetMediaTypeForSampleDescriptionID(a2, a5, &v169);
  if ((_DWORD)result)
    return result;
  v151 = v169;
  if (v169 == 1936684398)
  {
    if (*(_BYTE *)(a2 + 240))
    {
      v29 = *(int *)(a2 + 244);
      v30 = *(int *)(a2 + 248);
      v31 = *(_OWORD *)(v14 + 48);
      v166 = *(_OWORD *)(v14 + 32);
      v167 = v31;
      v168 = *(_QWORD *)(v14 + 64);
      v32 = *(_OWORD *)(v14 + 16);
      *(_OWORD *)v165 = *(_OWORD *)v14;
      *(_OWORD *)&v165[16] = v32;
      v33 = *a10 / v30;
      v164 = v33;
      if ((_DWORD)a9 != 1
        || v33 != 1
        || (v34 = *(_QWORD *)v165 / v29, *(uint64_t *)v165 /= v29, (_DWORD)v15 != 1)
        || v34 != 1)
      {
        result = FigSignalErrorAt();
        if ((_DWORD)result)
          return result;
        goto LABEL_254;
      }
      v35 = v29 * v153;
      v150 = (CMTime *)v165;
      v161 = (uint64_t *)&v164;
    }
    else
    {
      v161 = a10;
      v150 = (CMTime *)v14;
      v35 = v153;
    }
  }
  else
  {
    v161 = a10;
    v150 = (CMTime *)v14;
    v35 = v153;
  }
  v152 = v14;
  v154 = a4;
  v155 = v15;
  v156 = v16;
  v157 = v35;
  if (a3)
  {
    rhs.value = 0;
    v36 = *(_DWORD *)(a2 + 432);
    if (v36 < 1)
    {
      v41 = 0;
      v40 = 0;
      v43 = 0;
      v44 = 0;
      v45 = 0;
      v42 = 1;
    }
    else
    {
      destination.timescale = 0;
      destination.value = 0;
      v37 = 12 * (v36 - 1);
      CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a2 + 440), v37, 0xCuLL, &destination);
      v38 = destination.value;
      destination.timescale = 0;
      destination.value = 0;
      CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a2 + 440), v37, 0xCuLL, &destination);
      value_high = HIDWORD(destination.value);
      destination.timescale = 0;
      destination.value = 0;
      CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a2 + 440), v37, 0xCuLL, &destination);
      v40 = bswap32(value_high);
      v41 = bswap32(destination.timescale);
      v42 = bswap32(v38) + 1;
      if (v36 == 1)
      {
        v43 = 0;
        v44 = 0;
        v45 = 0;
      }
      else
      {
        destination.timescale = 0;
        destination.value = 0;
        CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a2 + 440), 12 * (v36 - 2), 0xCuLL, &destination);
        v44 = bswap32(destination.timescale);
        destination.timescale = 0;
        destination.value = 0;
        CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a2 + 440), 12 * (v36 - 2), 0xCuLL, &destination);
        v45 = bswap32(HIDWORD(destination.value));
        v43 = v36 - 1;
      }
      v19 = a14;
    }
    if (v44 == v41 && v45 == v40)
      v47 = v43;
    else
      v47 = v43 + 1;
    MakeTableReadyToWrite((OpaqueCMBlockBuffer **)(a2 + 440), (uint64_t *)(a2 + 448));
    lhs.value = bswap32(v42);
    lhs.timescale = bswap32(v156);
    v48 = *(_QWORD *)(a2 + 448);
    v49 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CMTime *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 16);
    if (!v49)
      return 4294954514;
    result = v49(v48, 12, 12 * v47, &lhs, &rhs);
    if ((_DWORD)result)
      return result;
    *(_DWORD *)(a2 + 432) = v47 + 1;
    lhs.value = 0;
    v52 = *(_QWORD *)(a2 + 392);
    LODWORD(v15) = v155;
    if (v154 <= 4000000000)
    {
      v14 = v152;
      if (!v52)
      {
        MakeTableReadyToWrite((OpaqueCMBlockBuffer **)(a2 + 368), (uint64_t *)(a2 + 376));
        LODWORD(rhs.value) = bswap32(v154);
        result = CMByteStreamAppend();
        if ((_DWORD)result)
          return result;
        ++*(_DWORD *)(a2 + 360);
        v53 = v154;
        goto LABEL_46;
      }
    }
    else
    {
      v14 = v152;
      if (!v52)
        UpgradeTo64BitChunkOffsets(a2, v50, v51);
    }
    MakeTableReadyToWrite((OpaqueCMBlockBuffer **)(a2 + 392), (uint64_t *)(a2 + 400));
    destination.value = bswap64(v154);
    result = CMByteStreamAppend();
    if ((_DWORD)result)
      return result;
    ++*(_DWORD *)(a2 + 384);
    v53 = destination.value;
LABEL_46:
    v35 = v157;
    if (*(_QWORD *)(a2 + 304) > v53)
      v53 = *(_QWORD *)(a2 + 304);
    *(_QWORD *)(a2 + 304) = v53;
  }
  if ((_DWORD)v15 == 1)
  {
    result = AddSampleToTimeToSampleTable(a2, v35, v150->value);
    if ((_DWORD)result)
      return result;
    if (v151 == 1986618469)
    {
      memset(&destination, 0, sizeof(destination));
      lhs = v150[1];
      rhs = v150[2];
      CMTimeSubtract(&destination, &lhs, &rhs);
      result = AddSampleToCompositionOffsetTable(a2, v157, destination.value);
      if ((_DWORD)result)
        return result;
    }
  }
  else if ((int)v15 >= 1)
  {
    v54 = (int)v155;
    v55 = v150 + 1;
    do
    {
      result = AddSampleToTimeToSampleTable(a2, 1, v55[-1].value);
      if ((_DWORD)result)
        return result;
      if (v151 == 1986618469)
      {
        memset(&destination, 0, sizeof(destination));
        v56 = *(_OWORD *)&v55->value;
        lhs.epoch = v55->epoch;
        *(_OWORD *)&lhs.value = v56;
        v57 = *(_OWORD *)&v55[1].value;
        rhs.epoch = v55[1].epoch;
        *(_OWORD *)&rhs.value = v57;
        CMTimeSubtract(&destination, &lhs, &rhs);
        result = AddSampleToCompositionOffsetTable(a2, 1u, destination.value);
        if ((_DWORD)result)
          return result;
      }
      v55 += 3;
      --v54;
    }
    while (v54);
  }
  v58 = *(int *)(a2 + 292);
  v59 = *(_DWORD *)(a2 + 288);
  v60 = *(_QWORD *)(a2 + 728);
  if (v60)
    v59 += *(_DWORD *)(v60 + 8);
  v16 = v156;
  if ((_DWORD)a9 != 1 || v59)
  {
    if ((_DWORD)a9 == 1 && *v161 == v58)
      goto LABEL_106;
    LODWORD(lhs.value) = 0;
    destination.value = 0;
    if (!(*(uint64_t (**)(uint64_t))(a2 + 608))(a2))
    {
      MakeTableReadyToWrite((OpaqueCMBlockBuffer **)(a2 + 320), (uint64_t *)(a2 + 328));
      if (v59)
      {
        LODWORD(lhs.value) = bswap32(v58);
        if (v59 >= 1)
        {
          v62 = v59;
          while (1)
          {
            result = CMByteStreamAppend();
            if ((_DWORD)result)
              break;
            if (!--v62)
              goto LABEL_74;
          }
LABEL_271:
          v14 = v152;
          goto LABEL_272;
        }
LABEL_74:
        *(_DWORD *)(a2 + 316) = 0;
        *(_DWORD *)(a2 + 292) = 0;
        if ((int)v58 < 0x10000)
        {
          if ((int)v58 <= 255)
          {
            if ((int)v58 <= 15)
              v63 = 4;
            else
              v63 = 8;
          }
          else
          {
            v63 = 16;
          }
        }
        else
        {
          v63 = 32;
        }
        if (*(_DWORD *)(a2 + 296) > v63)
          v63 = *(_DWORD *)(a2 + 296);
        *(_DWORD *)(a2 + 296) = v63;
      }
    }
    if (v157 < 1)
    {
LABEL_105:
      v20 = a13;
      v14 = v152;
      v16 = v156;
      goto LABEL_106;
    }
    v64 = 0;
    while (1)
    {
      v65 = (_DWORD)a9 == 1 ? 0 : v64;
      v66 = v161[v65];
      if (v66 >> 31)
        break;
      MakeTableReadyToWrite((OpaqueCMBlockBuffer **)(a2 + 320), (uint64_t *)(a2 + 328));
      LODWORD(lhs.value) = bswap32(v66);
      result = CMByteStreamAppend();
      if ((_DWORD)result)
        goto LABEL_270;
      if (v66 <= 0xF)
        v67 = 4;
      else
        v67 = 8;
      if (v66 > 0xFF)
        v67 = 16;
      if (WORD1(v66))
        v68 = 32;
      else
        v68 = v67;
      if (*(_DWORD *)(a2 + 296) > v68)
        v68 = *(_DWORD *)(a2 + 296);
      *(_DWORD *)(a2 + 296) = v68;
      if (v157 == ++v64)
        goto LABEL_105;
    }
    result = FigSignalErrorAt();
LABEL_270:
    v20 = a13;
    v16 = v156;
    goto LABEL_271;
  }
  v61 = *v161;
  if ((unint64_t)*v161 >> 31)
  {
    result = FigSignalErrorAt();
LABEL_272:
    v15 = v155;
    v69 = v157;
    if ((_DWORD)result)
      return result;
    goto LABEL_107;
  }
  *(_DWORD *)(a2 + 316) = v61;
  *(_DWORD *)(a2 + 292) = v61;
LABEL_106:
  v69 = v157;
  *(_DWORD *)(a2 + 312) += v157;
  *(_QWORD *)(a2 + 840) = 0;
  *(_QWORD *)(a2 + 16) |= 0x2000uLL;
  v15 = v155;
LABEL_107:
  v70 = *(_DWORD *)(a2 + 288);
  v71 = *(_QWORD *)(a2 + 728);
  if (v71)
    v70 += *(_DWORD *)(v71 + 8);
  v160 = v70;
  v149 = v69 - 1;
  if (v69 < 1)
    goto LABEL_140;
  v148 = v19;
  v72 = 0;
  v73 = v70;
  v74 = v70;
  while (1)
  {
    v174[0] = 0;
    v173 = 0;
    if (a11)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a11, v72);
      if (ValueAtIndex)
        FigMovieGetSampleDependencyFlagsFromSampleAttachments((uint64_t)ValueAtIndex, (char *)v174 + 1, v174, &v173);
    }
    v76 = v73 + v72 + 1;
    v77 = *(_QWORD *)(a2 + 488);
    destination.value = 0;
    if (!v77)
      break;
    if (!LOBYTE(v174[0]))
    {
      LODWORD(lhs.value) = bswap32(v76);
      MakeTableReadyToWrite((OpaqueCMBlockBuffer **)(a2 + 488), (uint64_t *)(a2 + 496));
      v78 = CMByteStreamAppend();
      if (v78)
        goto LABEL_138;
      ++*(_DWORD *)(a2 + 480);
LABEL_123:
      v73 = v160;
    }
LABEL_124:
    if (v173)
    {
      LODWORD(lhs.value) = bswap32(v76);
      destination.value = 0;
      MakeTableReadyToWrite((OpaqueCMBlockBuffer **)(a2 + 512), (uint64_t *)(a2 + 520));
      v78 = CMByteStreamAppend();
      if (v78)
        goto LABEL_138;
      ++*(_DWORD *)(a2 + 504);
    }
    LOBYTE(lhs.value) = HIBYTE(v174[0]);
    destination.value = 0;
    if (!*(_QWORD *)(a2 + 536))
    {
      if (!HIBYTE(v174[0]))
      {
        result = 0;
        goto LABEL_135;
      }
      LOBYTE(rhs.value) = 0;
      MakeTableReadyToWrite((OpaqueCMBlockBuffer **)(a2 + 536), (uint64_t *)(a2 + 544));
      v80 = v74;
      if (v76 >= 2)
      {
        do
        {
          v78 = CMByteStreamAppend();
          if (v78)
            goto LABEL_138;
          ++*(_DWORD *)(a2 + 528);
        }
        while (--v80);
      }
      v73 = v160;
    }
    MakeTableReadyToWrite((OpaqueCMBlockBuffer **)(a2 + 536), (uint64_t *)(a2 + 544));
    v78 = CMByteStreamAppend();
    if (v78)
      goto LABEL_138;
    ++*(_DWORD *)(a2 + 528);
    result = v78;
LABEL_135:
    ++v72;
    ++v74;
    if (v72 == v69)
      goto LABEL_139;
  }
  if (!LOBYTE(v174[0]))
    goto LABEL_124;
  MakeTableReadyToWrite((OpaqueCMBlockBuffer **)(a2 + 488), (uint64_t *)(a2 + 496));
  if (v76 < 2)
    goto LABEL_124;
  v79 = 0;
  while (1)
  {
    LODWORD(lhs.value) = bswap32(++v79);
    v78 = CMByteStreamAppend();
    if (v78)
      break;
    ++*(_DWORD *)(a2 + 480);
    if (v74 == v79)
      goto LABEL_123;
  }
LABEL_138:
  result = v78;
LABEL_139:
  v19 = v148;
  v20 = a13;
  v14 = v152;
  v15 = v155;
  v16 = v156;
  v69 = v157;
  if (!(_DWORD)result)
  {
LABEL_140:
    if (v151 == 1986618469)
    {
      LOBYTE(destination.value) = 0;
      if (!a11)
      {
        Basic = MovieSampleGroupTypeSpecMakeBasic(1937337955);
        result = AddSampleGroupForGroupType((_QWORD *)a2, Basic, v112, 0, v69, 0, 0, 0, 0, &destination);
        if ((_DWORD)result || !LOBYTE(destination.value))
        {
          if ((_DWORD)result)
            return result;
        }
        else
        {
          *(_QWORD *)(a2 + 16) |= 0x5000000uLL;
        }
        LOBYTE(lhs.value) = 0;
        v115 = MovieSampleGroupTypeSpecMakeBasic(1953719148);
        result = AddSampleGroupForGroupType((_QWORD *)a2, v115, v116, 1, v69, 0, 0, 0, 0, &lhs);
        if ((_DWORD)result || !LOBYTE(lhs.value))
        {
          if ((_DWORD)result)
            return result;
        }
        else
        {
          *(_QWORD *)(a2 + 16) |= 0x5000000uLL;
        }
        LOBYTE(destination.value) = 0;
        v117 = MovieSampleGroupTypeSpecMakeBasic(1953718643);
        result = AddSampleGroupForGroupType((_QWORD *)a2, v117, v118, 1, v69, 0, 0, 0, 0, &destination);
        if ((_DWORD)result || !LOBYTE(destination.value))
        {
          if ((_DWORD)result)
            return result;
        }
        else
        {
          *(_QWORD *)(a2 + 16) |= 0x5000000uLL;
        }
        LOBYTE(destination.value) = 0;
        v119 = MovieSampleGroupTypeSpecMakeBasic(1937011553);
        result = AddSampleGroupForGroupType((_QWORD *)a2, v119, v120, 1, v69, 0, 0, 0, 0, &destination);
        if (!(_DWORD)result && LOBYTE(destination.value))
        {
          result = 0;
          *(_QWORD *)(a2 + 16) |= 0x5000000uLL;
        }
        goto LABEL_223;
      }
      if (v69 <= 0)
      {
LABEL_180:
        result = 0;
        goto LABEL_223;
      }
      v84 = 0;
      while (1)
      {
        LOBYTE(lhs.value) = 0;
        LOBYTE(rhs.value) = 0;
        v85 = CFArrayGetValueAtIndex(a11, v84);
        result = FigMovieGetVideoSyncSampleEntryFromSampleAttachment((uint64_t)v85, &lhs, (BOOL *)&rhs);
        if ((_DWORD)result)
          break;
        v86 = MovieSampleGroupTypeSpecMakeBasic(1937337955);
        result = AddSampleGroupForGroupType((_QWORD *)a2, v86, v87, 0, 1u, v84, LOBYTE(rhs.value), 1uLL, &lhs, &destination);
        if ((_DWORD)result)
          break;
        if (LOBYTE(destination.value))
          *(_QWORD *)(a2 + 16) |= 0x5000000uLL;
        if (v69 == ++v84)
        {
          v88 = 0;
          LOBYTE(lhs.value) = 0;
          while (1)
          {
            memset(&destination, 0, 20);
            LOBYTE(rhs.value) = 0;
            v89 = (const __CFDictionary *)CFArrayGetValueAtIndex(a11, v88);
            result = FigMovieGetVideoTemporalLayerEntryFromSampleAttachment(v89, (uint64_t)&destination, (char *)&rhs);
            if ((_DWORD)result)
              return result;
            v90 = MovieSampleGroupTypeSpecMakeBasic(1953719148);
            result = AddSampleGroupForGroupType((_QWORD *)a2, v90, v91, 1, 1u, v88, LOBYTE(rhs.value), 0x14uLL, &destination, &lhs);
            if ((_DWORD)result)
              return result;
            if (LOBYTE(lhs.value))
              *(_QWORD *)(a2 + 16) |= 0x5000000uLL;
            if (v69 == ++v88)
            {
              v92 = 0;
              LOBYTE(destination.value) = 0;
              v16 = v156;
              do
              {
                LOBYTE(lhs.value) = 0;
                CFArrayGetValueAtIndex(a11, v92);
                FigCFDictionaryGetBooleanIfPresent();
                v93 = MovieSampleGroupTypeSpecMakeBasic(1953718643);
                result = AddSampleGroupForGroupType((_QWORD *)a2, v93, v94, 1, 1u, v92, LOBYTE(lhs.value), 0, 0, &destination);
                if ((_DWORD)result)
                  v95 = 1;
                else
                  v95 = LOBYTE(destination.value) == 0;
                if (v95)
                {
                  if ((_DWORD)result)
                    return result;
                }
                else
                {
                  *(_QWORD *)(a2 + 16) |= 0x5000000uLL;
                }
                ++v92;
              }
              while (v69 != v92);
              v96 = 0;
              LOBYTE(destination.value) = 0;
              do
              {
                LOBYTE(lhs.value) = 0;
                CFArrayGetValueAtIndex(a11, v96);
                FigCFDictionaryGetBooleanIfPresent();
                v97 = MovieSampleGroupTypeSpecMakeBasic(1937011553);
                result = AddSampleGroupForGroupType((_QWORD *)a2, v97, v98, 1, 1u, v96, LOBYTE(lhs.value), 0, 0, &destination);
                if ((_DWORD)result)
                  v99 = 1;
                else
                  v99 = LOBYTE(destination.value) == 0;
                if (v99)
                {
                  if ((_DWORD)result)
                    goto LABEL_223;
                }
                else
                {
                  *(_QWORD *)(a2 + 16) |= 0x5000000uLL;
                }
                ++v96;
              }
              while (v69 != v96);
              goto LABEL_180;
            }
          }
        }
      }
    }
    else
    {
      if (v151 != 1936684398)
        goto LABEL_224;
      LOWORD(destination.value) = 0;
      LOBYTE(lhs.value) = 0;
      LOBYTE(rhs.value) = 0;
      HIBYTE(v174[0]) = 0;
      if (!a12)
      {
        v83 = 0;
        value_low = 0;
        goto LABEL_182;
      }
      result = FigMovieGetAudioRollRecoveryValueFromSampleBufferAttachment(a12, &destination, (BOOL *)&lhs, (_BYTE *)v174 + 1);
      if (!(_DWORD)result)
      {
        value_low = LOWORD(destination.value);
        v82 = !LOBYTE(lhs.value) || HIBYTE(v174[0]) == 0;
        v83 = !v82;
LABEL_182:
        v100 = v69;
        LOWORD(destination.value) = __rev16(value_low);
        v101 = MovieSampleGroupTypeSpecMakeBasic(1919904876);
        result = AddSampleGroupForGroupType((_QWORD *)a2, v101, v102, 0, v69, 0, v83, 2uLL, &destination, &rhs);
        if (LOBYTE(rhs.value))
          *(_QWORD *)(a2 + 16) |= 0x3000000uLL;
        if (!(_DWORD)result)
        {
          LOBYTE(lhs.value) = 0;
          if (a11)
          {
            if (v69 > 0)
            {
              v103 = 0;
              while (1)
              {
                LOWORD(destination.value) = 0;
                LOBYTE(rhs.value) = 0;
                v104 = CFArrayGetValueAtIndex(a11, v103);
                result = FigMovieGetAudioIndependentSampleDecoderRefreshCountFromSampleAttachment((uint64_t)v104, &destination, &rhs);
                if ((_DWORD)result)
                  return result;
                LOWORD(destination.value) = bswap32(LOWORD(destination.value)) >> 16;
                v105 = MovieSampleGroupTypeSpecMakeBasic(1886547820);
                result = AddSampleGroupForGroupType((_QWORD *)a2, v105, v106, 0, 1u, v103, LOBYTE(rhs.value), 2uLL, &destination, &lhs);
                if ((_DWORD)result)
                  return result;
                if (LOBYTE(lhs.value))
                  *(_QWORD *)(a2 + 16) |= 0x9000000uLL;
                if (v69 == ++v103)
                {
                  v107 = 0;
                  LOBYTE(lhs.value) = 0;
                  do
                  {
                    destination.value = 0;
                    *(_QWORD *)&destination.timescale = 0;
                    SeamUUIDBytesFromSampleAttachmentArray = FigMovieGetSeamUUIDBytesFromSampleAttachmentArray(a11, v107, (CFUUIDBytes *)&destination);
                    v109 = MovieSampleGroupTypeSpecMakeBasic(1936023917);
                    result = AddSampleGroupForGroupType((_QWORD *)a2, v109, v110, 0, 1u, v107, SeamUUIDBytesFromSampleAttachmentArray, 0x10uLL, &destination, &lhs);
                    if ((_DWORD)result || !LOBYTE(lhs.value))
                    {
                      if ((_DWORD)result)
                        goto LABEL_222;
                    }
                    else
                    {
                      *(_QWORD *)(a2 + 16) |= 0x11000000uLL;
                    }
                    ++v107;
                  }
                  while (v100 != v107);
                  break;
                }
              }
            }
            result = 0;
          }
          else
          {
            v113 = MovieSampleGroupTypeSpecMakeBasic(1886547820);
            result = AddSampleGroupForGroupType((_QWORD *)a2, v113, v114, 0, v69, 0, 0, 0, 0, &lhs);
            if ((_DWORD)result || !LOBYTE(lhs.value))
            {
              if ((_DWORD)result)
                return result;
            }
            else
            {
              *(_QWORD *)(a2 + 16) |= 0x9000000uLL;
            }
            LOBYTE(lhs.value) = 0;
            v121 = MovieSampleGroupTypeSpecMakeBasic(1936023917);
            result = AddSampleGroupForGroupType((_QWORD *)a2, v121, v122, 0, v69, 0, 0, 0, 0, &lhs);
            if (!(_DWORD)result && LOBYTE(lhs.value))
            {
              result = 0;
              *(_QWORD *)(a2 + 16) |= 0x11000000uLL;
            }
          }
LABEL_222:
          v16 = v156;
LABEL_223:
          v14 = v152;
          v15 = v155;
          v69 = v157;
          if ((_DWORD)result)
            return result;
LABEL_224:
          v123 = *(_QWORD *)(a2 + 224);
          if ((_DWORD)v15 == 1)
          {
            v124 = v150[1].value - v150[2].value;
            v125 = v124 + v123;
            v126 = v124 + v123 + v150->value * v149;
            v127 = v150->value * v69;
            v128 = v126 + v150->value;
            LODWORD(v129) = v124;
            goto LABEL_240;
          }
          if ((int)v15 < 1)
          {
            v127 = 0;
            LODWORD(v124) = 0x7FFFFFFF;
            LODWORD(v129) = 0x80000000;
            v125 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else
          {
            v127 = 0;
            v130 = v15;
            v131 = v150 + 1;
            LODWORD(v129) = 0x80000000;
            v126 = 0x8000000000000000;
            v125 = 0x7FFFFFFFFFFFFFFFLL;
            LODWORD(v132) = 0x7FFFFFFF;
            v128 = 0x8000000000000000;
            v133 = *(_QWORD *)(a2 + 224);
            do
            {
              v134 = v131[-1].value;
              v135 = v131->value - v131[1].value;
              v136 = v135 + v133;
              v133 += v134;
              v127 += v134;
              if (v136 < v125)
                v125 = v136;
              v137 = v136 + v134;
              if (v126 < v136)
                v128 = v137;
              if (v126 <= v136)
                v126 = v136;
              if (v135 < (int)v132)
                v132 = v131->value - v131[1].value;
              if (v135 > (int)v129)
                v129 = v131->value - v131[1].value;
              v131 += 3;
              --v130;
            }
            while (v130);
            LODWORD(v124) = v132;
LABEL_240:
            v138 = *(_QWORD *)(a2 + 88);
            v139 = *(_QWORD *)(a2 + 96);
            if (v125 < v138)
              v138 = v125;
            *(_QWORD *)(a2 + 88) = v138;
            if (v139 < v126)
            {
              *(_QWORD *)(a2 + 96) = v126;
              *(_QWORD *)(a2 + 104) = v128;
            }
          }
          a4 = v154;
          v140 = *(_DWORD *)(a2 + 116);
          if ((int)v124 < v140)
            v140 = v124;
          if ((int)v129 <= *(_DWORD *)(a2 + 112))
            LODWORD(v129) = *(_DWORD *)(a2 + 112);
          *(_DWORD *)(a2 + 112) = v129;
          *(_DWORD *)(a2 + 116) = v140;
          *(_QWORD *)(a2 + 224) = v127 + v123;
          v162 = v123;
          value = v125;
          lhs.value = 0;
          v141 = 12 * *(int *)(a2 + 432);
          destination.timescale = 0;
          destination.value = 0;
          v142 = v141 - 12;
          CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a2 + 440), v141 - 12, 0xCuLL, &destination);
          LODWORD(destination.value) = bswap32(bswap32(HIDWORD(destination.value)) + v69);
          v143 = *(_QWORD *)(a2 + 448);
          v144 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CMTime *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 16);
          if (!v144)
            return 4294954514;
          result = v144(v143, 4, v142 + 4, &destination, &lhs);
          if ((_DWORD)result)
            return result;
          *(_DWORD *)(a2 + 288) += v157;
LABEL_254:
          v22 = *(_QWORD *)(a2 + 768);
          a6 = v153;
LABEL_255:
          if (!v22)
            goto LABEL_261;
          p_value = &value;
          if (v159)
            p_value = 0;
          v146 = &v162;
          if (v159)
            v146 = 0;
          result = TrackFragmentBuilderAppendSampleInformation(v22, a3, a4, v16, a6, v15, (_QWORD *)v14, a9, (uint64_t)a10, a11, a12, p_value, v146);
          if (!(_DWORD)result)
          {
LABEL_261:
            if (v20)
            {
              CMTimeMake((CMTime *)v165, value, v21);
              *(_OWORD *)v20 = *(_OWORD *)v165;
              *(_QWORD *)(v20 + 16) = *(_QWORD *)&v165[16];
            }
            if (v19)
            {
              CMTimeMake((CMTime *)v165, v162, v21);
              *(_OWORD *)v19 = *(_OWORD *)v165;
              *(_QWORD *)(v19 + 16) = *(_QWORD *)&v165[16];
            }
            v147 = *(_QWORD *)(a2 + 16);
            *(_QWORD *)(a2 + 16) = v147 | 0x2001;
            result = 0;
            if (*(_BYTE *)(a2 + 898))
              *(_QWORD *)(a2 + 16) = v147 | 0x202001;
          }
        }
      }
    }
  }
  return result;
}

uint64_t MovieInformationPerformPostParsingForHeaderWriting(uint64_t a1)
{
  uint64_t v2;
  int v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  int v21;
  const __CFAllocator *v22;
  __CFArray *Mutable;
  uint64_t MetadataItemsPerFormatDictionary;
  const __CFAllocator *v25;
  uint64_t v26;
  uint64_t v27;
  const __CFArray *v28;
  CFIndex Count;
  uint64_t CMBaseObject;
  void (*v31)(uint64_t, uint64_t, _QWORD, void **);
  CFIndex v32;
  uint64_t DataSourceAtIndex;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t, uint64_t, void **, uint64_t *);
  __CFArray *v47;
  uint64_t v49;
  const __CFAllocator *allocator;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  void *value;
  int v55;

  v2 = *(_QWORD *)(a1 + 304);
  if (v2 < 2)
  {
    if (v2 == 1)
    {
      v19 = **(_QWORD **)(a1 + 320);
      if (v19)
      {
        v20 = *(_DWORD *)(v19 + 144);
      }
      else
      {
        FigSignalErrorAt();
        v20 = 0;
      }
      v21 = *(_DWORD *)(a1 + 252);
      if (v20 >= v21)
      {
        v21 = v20 + 1;
        *(_DWORD *)(a1 + 252) = v20 + 1;
      }
      if (!v20)
      {
        *(_DWORD *)(v19 + 144) = v21;
        *(_DWORD *)(a1 + 252) = v21 + 1;
      }
    }
  }
  else
  {
    v3 = *(_DWORD *)(a1 + 252);
    v4 = (char *)malloc_type_calloc(*(_QWORD *)(a1 + 304), 8uLL, 0x100004090D0E795uLL);
    if (v4)
    {
      v5 = v4;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      do
      {
        if (*(_QWORD *)(a1 + 304) > v7 && (v9 = *(_QWORD *)(*(_QWORD *)(a1 + 320) + v6)) != 0)
          v8 = *(_DWORD *)(v9 + 144);
        else
          FigSignalErrorAt();
        if (v8 >= v3)
        {
          v3 = v8 + 1;
          *(_DWORD *)(a1 + 252) = v8 + 1;
        }
        *(_DWORD *)&v5[v6] = v8;
        ++v7;
        v6 += 8;
      }
      while (v2 != v7);
      v10 = 0;
      v11 = v5 - 8;
      v12 = 1;
      do
      {
        v13 = &v5[8 * v10];
        if (*(_DWORD *)v13)
        {
          v14 = v12;
          v15 = v11;
          while (--v14 >= 1)
          {
            v16 = *(_DWORD *)v15;
            v15 -= 8;
            if (v16 == *(_DWORD *)v13)
              goto LABEL_16;
          }
        }
        else
        {
LABEL_16:
          v13[4] = 1;
          *(_DWORD *)v13 = v3++;
          *(_DWORD *)(a1 + 252) = v3;
        }
        ++v10;
        v11 += 8;
        ++v12;
      }
      while (v10 != v2);
      v17 = 0;
      v18 = v5;
      do
      {
        if (v18[4])
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v17) + 144) = *(_DWORD *)v18;
        ++v17;
        v18 += 8;
      }
      while (v2 != v17);
      free(v5);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
  v22 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  value = 0;
  allocator = v22;
  Mutable = CFArrayCreateMutable(v22, 4, MEMORY[0x1E0C9B378]);
  MovieInformationCreateQuickTimeMetadataReaderFromByteStream(a1, &value);
  if (value)
  {
    CFArrayAppendValue(Mutable, value);
    if (value)
    {
      CFRelease(value);
      value = 0;
    }
  }
  MovieInformationCreateQuickTimeUserDataReaderFromByteStream((uint64_t *)a1, &value);
  if (value)
  {
    CFArrayAppendValue(Mutable, value);
    if (value)
    {
      CFRelease(value);
      value = 0;
    }
  }
  MovieInformationCreateISOUserDataReaderFromByteStream((uint64_t *)a1, &value);
  if (value)
  {
    CFArrayAppendValue(Mutable, value);
    if (value)
    {
      CFRelease(value);
      value = 0;
    }
  }
  MovieInformationCreateiTunesMetadataReaderFromByteStream(a1, &value);
  if (value)
  {
    CFArrayAppendValue(Mutable, value);
    if (value)
      CFRelease(value);
  }
  MetadataItemsPerFormatDictionary = createMetadataItemsPerFormatDictionary(Mutable, allocator, (__CFDictionary **)(a1 + 352));
  if (Mutable)
    CFRelease(Mutable);
  v25 = allocator;
  if (!(_DWORD)MetadataItemsPerFormatDictionary)
  {
    v51 = *(_QWORD *)(a1 + 304);
    if (v51 >= 1)
    {
      v26 = 0;
      v49 = *MEMORY[0x1E0CA2098];
      do
      {
        if (*(_QWORD *)(a1 + 304) <= v26)
          v27 = 0;
        else
          v27 = *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v26);
        if (*(int *)(v27 + 288) >= 1)
        {
          value = 0;
          v28 = *(const __CFArray **)(v27 + 64);
          if (v28)
            Count = CFArrayGetCount(v28);
          else
            Count = 0;
          CMBaseObject = CMByteStreamGetCMBaseObject();
          v31 = *(void (**)(uint64_t, uint64_t, _QWORD, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
          if (v31)
            v31(CMBaseObject, v49, 0, &value);
          if (Count < 1)
          {
            MetadataItemsPerFormatDictionary = 0;
          }
          else
          {
            v32 = 0;
            while (1)
            {
              v52 = 0;
              DataSourceAtIndex = MovieTrackGetDataSourceAtIndex((_QWORD *)a1, v27, v32, &v52, &v53);
              if ((_DWORD)DataSourceAtIndex)
                break;
              if (v52)
              {
                if (!value)
                {
                  DataSourceAtIndex = FigSignalErrorAt();
                  break;
                }
                DataSourceAtIndex = MovieTrackSetDataSourceAtIndex((_QWORD *)a1, v27, v32, 1, value);
                if ((_DWORD)DataSourceAtIndex)
                  break;
              }
              if (Count == ++v32)
              {
                MetadataItemsPerFormatDictionary = 0;
                goto LABEL_66;
              }
            }
            MetadataItemsPerFormatDictionary = DataSourceAtIndex;
          }
LABEL_66:
          if (value)
            CFRelease(value);
          if ((_DWORD)MetadataItemsPerFormatDictionary)
            return MetadataItemsPerFormatDictionary;
          v34 = UpgradeTo32BitSampleSizes(v27);
          if ((_DWORD)v34)
            return v34;
          if ((*(int (**)(uint64_t))(v27 + 584))(v27) >= 1)
          {
            v35 = 0;
            do
            {
              v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 592))(v27, v35);
              if (v36 <= 15)
                v37 = 4;
              else
                v37 = 8;
              if (v36 > 255)
                v37 = 16;
              if (v36 >= 0x10000)
                v37 = 32;
              if (*(_DWORD *)(v27 + 296) > v37)
                v37 = *(_DWORD *)(v27 + 296);
              *(_DWORD *)(v27 + 296) = v37;
              v35 = (v35 + 1);
            }
            while ((int)v35 < (*(int (**)(uint64_t))(v27 + 584))(v27));
          }
          if ((*(int (**)(uint64_t))(v27 + 624))(v27) >= 1)
          {
            v38 = 0;
            do
            {
              v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 616))(v27, v38);
              v40 = *(_QWORD *)(v27 + 304);
              if (v40 <= v39)
                v40 = v39;
              *(_QWORD *)(v27 + 304) = v40;
              v38 = (v38 + 1);
            }
            while ((int)v38 < (*(int (**)(uint64_t))(v27 + 624))(v27));
          }
          if (*(_QWORD *)(v27 + 440))
          {
            v41 = (*(uint64_t (**)(uint64_t))(v27 + 624))(v27);
            v42 = *(int *)(v27 + 432);
            v55 = 0;
            value = 0;
            CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v27 + 440), 12 * (int)v42 - 12, 0xCuLL, &value);
            v43 = HIDWORD(value);
            v55 = 0;
            value = 0;
            CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v27 + 440), 12 * (int)v42 - 12, 0xCuLL, &value);
            v44 = v55;
            v55 = 0;
            v53 = 0;
            value = 0;
            MakeTableReadyToWrite((OpaqueCMBlockBuffer **)(v27 + 440), (uint64_t *)(v27 + 448));
            value = (void *)__PAIR64__(v43, bswap32(v41));
            v55 = v44;
            v45 = *(_QWORD *)(v27 + 448);
            v46 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 16);
            if (!v46)
              return 4294954514;
            v34 = v46(v45, 12, 12 * v42, &value, &v53);
            if ((_DWORD)v34)
              return v34;
            *(_DWORD *)(v27 + 432) = v42 + 1;
            v25 = allocator;
          }
        }
        value = 0;
        v47 = CFArrayCreateMutable(v25, 3, MEMORY[0x1E0C9B378]);
        MovieTrackCreateQuickTimeMetadataReaderFromByteStream(a1, (uint64_t *)v27, &value);
        if (value)
        {
          CFArrayAppendValue(v47, value);
          if (value)
          {
            CFRelease(value);
            value = 0;
          }
        }
        MovieTrackCreateQuickTimeUserDataReaderFromByteStream(a1, (uint64_t *)v27, &value);
        if (value)
        {
          CFArrayAppendValue(v47, value);
          if (value)
          {
            CFRelease(value);
            value = 0;
          }
        }
        MovieTrackCreateISOUserDataReaderFromByteStream(a1, (uint64_t *)v27, &value);
        if (value)
        {
          CFArrayAppendValue(v47, value);
          if (value)
            CFRelease(value);
        }
        MetadataItemsPerFormatDictionary = createMetadataItemsPerFormatDictionary(v47, v25, (__CFDictionary **)(v27 + 888));
        if (v47)
          CFRelease(v47);
        if ((_DWORD)MetadataItemsPerFormatDictionary)
          return MetadataItemsPerFormatDictionary;
        ++v26;
      }
      while (v26 != v51);
    }
    return 0;
  }
  return MetadataItemsPerFormatDictionary;
}

uint64_t createMetadataItemsPerFormatDictionary(const __CFArray *a1, CFAllocatorRef allocator, __CFDictionary **a3)
{
  __CFDictionary *Mutable;
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  const __CFAllocator *v9;
  const CFArrayCallBacks *v10;
  const void *ValueAtIndex;
  uint64_t v12;
  uint64_t FigBaseObject;
  uint64_t (*v14)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *);
  uint64_t v15;
  CFTypeRef cf;
  CFTypeRef v19;

  cf = 0;
  v19 = 0;
  Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (a1 && (Count = CFArrayGetCount(a1), Count >= 1))
  {
    v7 = Count;
    v8 = 0;
    v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v10 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, v8);
      v12 = FigMetadataCopyAllMetadataItems(allocator, (uint64_t)ValueAtIndex, (__CFArray **)&v19);
      if ((_DWORD)v12)
        break;
      if (!v19)
        v19 = CFArrayCreate(v9, 0, 0, v10);
      FigBaseObject = FigMetadataReaderGetFigBaseObject(ValueAtIndex);
      v14 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
      if (!v14)
      {
        v15 = 4294954514;
        goto LABEL_15;
      }
      v12 = v14(FigBaseObject, CFSTR("format"), allocator, &cf);
      if ((_DWORD)v12)
        break;
      CFDictionaryAddValue(Mutable, cf, v19);
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      if (v19)
      {
        CFRelease(v19);
        v19 = 0;
      }
      if (v7 == ++v8)
        goto LABEL_14;
    }
    v15 = v12;
  }
  else
  {
LABEL_14:
    v15 = 0;
    *a3 = Mutable;
    Mutable = 0;
  }
LABEL_15:
  if (cf)
    CFRelease(cf);
  if (v19)
    CFRelease(v19);
  if (Mutable)
    CFRelease(Mutable);
  return v15;
}

uint64_t UpgradeTo32BitSampleSizes(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  CMBlockBufferRef v4;
  uint64_t v5;
  unsigned int v6;
  char *v7;
  void *v8;
  const void *v9;
  const void *v10;
  char *dataPointerOut;
  CMBlockBufferRef theBuffer;

  theBuffer = 0;
  if (!(*(unsigned int (**)(void))(a1 + 584))() || (*(int (**)(uint64_t))(a1 + 600))(a1) > 31)
    return 0;
  dataPointerOut = 0;
  v2 = *(int *)(a1 + 340);
  v3 = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 4 * v2, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 4 * v2, 1u, &theBuffer);
  v4 = theBuffer;
  if (!(_DWORD)v3)
  {
    CMBlockBufferGetDataPointer(theBuffer, 0, 0, 0, &dataPointerOut);
    if ((int)v2 >= 1)
    {
      v5 = 0;
      do
      {
        v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 592))(a1, v5);
        v7 = dataPointerOut;
        *(_DWORD *)dataPointerOut = bswap32(v6);
        dataPointerOut = v7 + 4;
        v5 = (v5 + 1);
      }
      while ((_DWORD)v2 != (_DWORD)v5);
    }
    *(_DWORD *)(a1 + 312) = v2;
    v8 = theBuffer;
    if (theBuffer)
      v8 = (void *)CFRetain(theBuffer);
    *(_QWORD *)(a1 + 320) = v8;
    *(_DWORD *)(a1 + 316) = 0;
    *(_DWORD *)(a1 + 292) = 0;
    *(_DWORD *)(a1 + 340) = 0;
    v9 = *(const void **)(a1 + 344);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(a1 + 344) = 0;
    }
    v10 = *(const void **)(a1 + 352);
    if (v10)
    {
      CFRelease(v10);
      *(_QWORD *)(a1 + 352) = 0;
    }
    v3 = 0;
    *(_QWORD *)(a1 + 584) = GetNumSamples_stsz;
    *(_QWORD *)(a1 + 592) = GetSampleSize_stsz;
    *(_QWORD *)(a1 + 600) = GetSampleSizeFieldSize_stsz;
    *(_QWORD *)(a1 + 608) = GetSizeTable_stsz;
    v4 = theBuffer;
  }
  if (v4)
    CFRelease(v4);
  return v3;
}

void MakeTableReadyToWrite(OpaqueCMBlockBuffer **a1, uint64_t *a2)
{
  OpaqueCMBlockBuffer *v2;
  uint64_t v3;
  OpaqueCMBlockBuffer *v5;
  CMBlockBufferRef v6;
  CMBlockBufferRef blockBufferOut;

  v2 = *a1;
  v3 = *a2;
  blockBufferOut = 0;
  if (!v3)
  {
    if (!CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0x10u, 0, &blockBufferOut))
    {
      if (v2 && CMBlockBufferGetDataLength(v2))
        CMBlockBufferAppendBufferReference(blockBufferOut, v2, 0, 0, 0);
      v5 = *a1;
      v6 = blockBufferOut;
      *a1 = blockBufferOut;
      if (v6)
        CFRetain(v6);
      if (v5)
        CFRelease(v5);
      CMByteStreamCreateWritableForBlockBuffer();
    }
    if (blockBufferOut)
      CFRelease(blockBufferOut);
  }
}

uint64_t MovieInformationSetMovieMetadataItemArray(uint64_t a1, void *key, void *value)
{
  __CFDictionary *Mutable;
  uint64_t result;
  uint64_t v8;

  Mutable = *(__CFDictionary **)(a1 + 352);
  if (!Mutable)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *(_QWORD *)(a1 + 352) = Mutable;
  }
  CFDictionarySetValue(Mutable, key, value);
  result = FigCFEqual();
  if ((_DWORD)result)
  {
    v8 = 8;
  }
  else
  {
    result = FigCFEqual();
    if ((_DWORD)result)
    {
      v8 = 64;
    }
    else
    {
      result = FigCFEqual();
      if ((_DWORD)result)
      {
        v8 = 32;
      }
      else
      {
        result = FigCFEqual();
        v8 = 16 * ((_DWORD)result != 0);
      }
    }
  }
  *(_QWORD *)(a1 + 40) |= v8;
  return result;
}

uint64_t MovieTrackInsertEmptySegment(CMTime *a1, uint64_t a2, __int128 *a3)
{
  CMTimeEpoch v6;
  int v7;
  BOOL v8;
  int v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  uint64_t result;
  __int128 v14;
  __int128 v15;
  _BYTE v16[32];
  CMTimeRange v17;
  CMTimeRange v18;
  CMTimeRange time1;
  CMTime time2;
  CMTime v21;

  *(_OWORD *)v16 = a3[1];
  *(_OWORD *)&v16[16] = a3[2];
  v15 = *a3;
  *(_OWORD *)&v21.value = *MEMORY[0x1E0CA2E68];
  v6 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v21.epoch = v6;
  *(_OWORD *)&time1.start.value = *(_OWORD *)&v16[8];
  time1.start.epoch = *(_QWORD *)&v16[24];
  v14 = *(_OWORD *)&v21.value;
  *(_OWORD *)&time2.value = *(_OWORD *)&v21.value;
  time2.epoch = v6;
  if (CMTimeCompare(&time1.start, &time2) < 1)
    return 4294954516;
  *(_OWORD *)&time1.start.value = v15;
  time1.start.epoch = *(_QWORD *)v16;
  *(_OWORD *)&time2.value = v14;
  time2.epoch = v6;
  if (CMTimeCompare(&time1.start, &time2) < 0)
    return 4294954516;
  v7 = *(_DWORD *)(a2 + 816);
  v8 = __OFSUB__(v7, 1);
  v9 = v7 - 1;
  if (v9 < 0 != v8)
    return 4294954516;
  v10 = (_OWORD *)(*(_QWORD *)(a2 + 808) + 96 * v9);
  v11 = v10[3];
  v12 = v10[5];
  *(_OWORD *)&time1.start.epoch = v10[4];
  *(_OWORD *)&time1.duration.timescale = v12;
  *(_OWORD *)&time1.start.value = v11;
  CMTimeRangeGetEnd(&v21, &time1);
  *(_OWORD *)&time1.start.value = v15;
  time1.start.epoch = *(_QWORD *)v16;
  time2 = v21;
  if ((CMTimeCompare(&time1.start, &time2) & 0x80000000) == 0)
    goto LABEL_6;
  *(_OWORD *)&time1.start.value = v15;
  time1.start.epoch = *(_QWORD *)v16;
  time2 = *(CMTime *)&v16[8];
  CMTimeRangeMake(&v18, &time1.start, &time2);
  *(_OWORD *)&time1.start.value = *MEMORY[0x1E0CA2E18];
  time1.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  time2 = *(CMTime *)&v16[8];
  CMTimeRangeMake(&v17, &time1.start, &time2);
  result = InsertMediaSegmentIntoTrack(a2 + 808, (uint64_t)&v18, (uint64_t)&v17);
  if (!(_DWORD)result)
  {
LABEL_6:
    MovieTrackInvalidateEnhancedGaplessInfo(a2);
    *(_OWORD *)&time1.start.value = *a3;
    time1.start.epoch = *((_QWORD *)a3 + 2);
    NoteEditSegmentModification((uint64_t)a1, a2, &time1.start, 0);
    UpdateDurationsForEditSegmentChange(a1, a2);
    return 0;
  }
  return result;
}

uint64_t MovieTrackInsertMediaSegment(CMTime *a1, uint64_t a2, _OWORD *a3, __int128 *a4)
{
  __int128 v8;
  __int128 v9;
  uint64_t result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE time1[32];
  __int128 v15;

  if ((*((_DWORD *)a4 + 3) & 0x1D) != 1)
    return 4294954516;
  *(_OWORD *)time1 = *a4;
  *(_QWORD *)&time1[16] = *((_QWORD *)a4 + 2);
  v11 = *MEMORY[0x1E0CA2E68];
  *(_QWORD *)&v12 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  if (CMTimeCompare((CMTime *)time1, (CMTime *)&v11) < 0)
    return 4294954516;
  v8 = a3[1];
  *(_OWORD *)time1 = *a3;
  *(_OWORD *)&time1[16] = v8;
  v15 = a3[2];
  v9 = a4[1];
  v11 = *a4;
  v12 = v9;
  v13 = a4[2];
  result = InsertMediaSegmentIntoTrack(a2 + 808, (uint64_t)time1, (uint64_t)&v11);
  if (!(_DWORD)result)
  {
    MovieTrackInvalidateEnhancedGaplessInfo(a2);
    *(_OWORD *)time1 = *a3;
    *(_QWORD *)&time1[16] = *((_QWORD *)a3 + 2);
    NoteEditSegmentModification((uint64_t)a1, a2, (CMTime *)time1, 0);
    UpdateDurationsForEditSegmentChange(a1, a2);
    return 0;
  }
  return result;
}

uint64_t InsertMediaSegmentIntoTrack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 *v6;
  CMTimeEpoch v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  CMTimeFlags v16;
  CMTimeEpoch v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  uint64_t result;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  signed int v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  unsigned int EditIndexStartingAtTimeInTrackSplitEditIfNecessary;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  CMTime v52;
  CMTimeRange lhs;
  CMTime v54;
  CMTime v55;
  CMTime v56;
  CMTime rhs;
  _BYTE time1[32];
  _BYTE v59[32];
  _BYTE v60[32];
  CMTime v61;
  _BYTE time2[32];
  _BYTE v63[28];
  CMTimeValue v64;
  CMTimeScale v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v6 = (__int128 *)MEMORY[0x1E0CA2E68];
  if ((*(_DWORD *)(a3 + 12) & 0x1D) == 1)
  {
    *(_OWORD *)time1 = *(_OWORD *)a3;
    *(_QWORD *)&time1[16] = *(_QWORD *)(a3 + 16);
    *(_OWORD *)time2 = *MEMORY[0x1E0CA2E68];
    *(_QWORD *)&time2[16] = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    if (CMTimeCompare((CMTime *)time1, (CMTime *)time2) < 0)
      return 4294954516;
  }
  *(_OWORD *)time1 = *(_OWORD *)(a3 + 24);
  *(_QWORD *)&time1[16] = *(_QWORD *)(a3 + 40);
  v51 = *v6;
  *(_OWORD *)time2 = *v6;
  v7 = *((_QWORD *)v6 + 2);
  *(_QWORD *)&time2[16] = v7;
  if (CMTimeCompare((CMTime *)time1, (CMTime *)time2) < 0)
    return 4294954516;
  v8 = *(_DWORD *)(a2 + 12);
  if ((v8 & 1) != 0)
  {
    *(_OWORD *)time1 = *(_OWORD *)a2;
    *(_QWORD *)&time1[16] = *(_QWORD *)(a2 + 16);
    *(_OWORD *)time2 = v51;
    *(_QWORD *)&time2[16] = v7;
    if (CMTimeCompare((CMTime *)time1, (CMTime *)time2) < 0)
      return 4294954516;
    v8 = *(_DWORD *)(a2 + 12);
  }
  if ((v8 & 1) == 0)
  {
    *(_OWORD *)time2 = v51;
    *(_QWORD *)&time2[16] = v7;
    v9 = *(_DWORD *)(a1 + 8);
    v10 = __OFSUB__(v9, 1);
    v11 = v9 - 1;
    if (v11 < 0 == v10)
    {
      v12 = (_OWORD *)(*(_QWORD *)a1 + 96 * v11);
      v13 = v12[3];
      v14 = v12[5];
      *(_OWORD *)&time1[16] = v12[4];
      *(_OWORD *)v59 = v14;
      *(_OWORD *)time1 = v13;
      CMTimeRangeGetEnd((CMTime *)time2, (CMTimeRange *)time1);
    }
    *(_OWORD *)a2 = *(_OWORD *)time2;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)&time2[16];
  }
  *(_OWORD *)&v63[12] = 0u;
  v15 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)time2 = *(_OWORD *)a3;
  *(_OWORD *)&time2[16] = v15;
  *(_OWORD *)v63 = 0u;
  *(_OWORD *)v63 = *(_OWORD *)(a3 + 32);
  *(_QWORD *)&v63[16] = *(_QWORD *)a2;
  v16 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)&v63[24] = *(_DWORD *)(a2 + 8);
  v17 = *(_QWORD *)(a2 + 16);
  v52.epoch = *(_QWORD *)(a2 + 40);
  *(_OWORD *)&v52.value = *(_OWORD *)(a2 + 24);
  *(_OWORD *)&v61.value = v51;
  v61.epoch = v7;
  v18 = *(int *)(a1 + 8);
  v64 = *(_QWORD *)a2;
  v65 = *(_DWORD *)(a2 + 8);
  if ((int)v18 >= 1)
  {
    v19 = (_OWORD *)(*(_QWORD *)a1 + 96 * (v18 - 1));
    v20 = v19[3];
    v21 = v19[5];
    *(_OWORD *)&time1[16] = v19[4];
    *(_OWORD *)v59 = v21;
    *(_OWORD *)time1 = v20;
    CMTimeRangeGetEnd(&v61, (CMTimeRange *)time1);
  }
  if ((v16 & 1) != 0)
  {
    *(_QWORD *)time1 = v64;
    *(_QWORD *)&time1[8] = __PAIR64__(v16, v65);
    *(_QWORD *)&time1[16] = v17;
    lhs.start = v61;
    if (CMTimeCompare((CMTime *)time1, &lhs.start))
    {
      *(_QWORD *)time1 = v64;
      *(_QWORD *)&time1[8] = __PAIR64__(v16, v65);
      *(_QWORD *)&time1[16] = v17;
      lhs.start = v61;
      if (CMTimeCompare((CMTime *)time1, &lhs.start) >= 1)
      {
        result = InsertUninitializedEditsIntoTrack((char **)a1, *(_DWORD *)(a1 + 8), 2u);
        if (!(_DWORD)result)
        {
          v23 = *(_QWORD *)a1 + 96 * v18;
          v24 = *(_OWORD *)&v61.value;
          *(_QWORD *)(v23 + 64) = v61.epoch;
          *(_OWORD *)(v23 + 48) = v24;
          v25 = *(_QWORD *)a1 + 96 * v18;
          lhs.start.value = v64;
          lhs.start.timescale = v65;
          lhs.start.flags = v16;
          lhs.start.epoch = v17;
          rhs = v61;
          CMTimeSubtract((CMTime *)time1, &lhs.start, &rhs);
          result = 0;
          v26 = *(_OWORD *)time1;
          *(_QWORD *)(v25 + 88) = *(_QWORD *)&time1[16];
          *(_OWORD *)(v25 + 72) = v26;
          v27 = *(_QWORD *)a1 + 96 * v18;
          v28 = *MEMORY[0x1E0CA2E18];
          *(_QWORD *)(v27 + 16) = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
          *(_OWORD *)v27 = v28;
          v29 = *(_QWORD *)a1 + 96 * v18;
          *(_OWORD *)(v29 + 24) = v51;
          *(_QWORD *)(v29 + 40) = v7;
          v30 = *(_QWORD *)a1 + 96 * ((int)v18 + 1);
LABEL_23:
          *(_OWORD *)v30 = *(_OWORD *)time2;
          *(_OWORD *)(v30 + 16) = *(_OWORD *)&time2[16];
          *(_OWORD *)(v30 + 32) = *(_OWORD *)v63;
          *(_OWORD *)(v30 + 44) = *(_OWORD *)&v63[12];
          *(_DWORD *)(v30 + 60) = v16;
          *(_QWORD *)(v30 + 64) = v17;
          *(_OWORD *)(v30 + 72) = *(_OWORD *)&v52.value;
          *(_QWORD *)(v30 + 88) = v52.epoch;
          return result;
        }
        return result;
      }
      v33 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 48);
      *(_OWORD *)v59 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 32);
      *(_OWORD *)&v59[16] = v33;
      v34 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 80);
      *(_OWORD *)v60 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 64);
      *(_OWORD *)&v60[16] = v34;
      v35 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 16);
      *(_OWORD *)time1 = *MEMORY[0x1E0CA2E20];
      *(_OWORD *)&time1[16] = v35;
      *(_OWORD *)&rhs.value = v51;
      rhs.epoch = v7;
      *(_OWORD *)&v56.value = v51;
      v56.epoch = v7;
      *(_OWORD *)&lhs.start.value = v51;
      lhs.start.epoch = v7;
      v55 = v52;
      CMTimeAdd(&v56, &lhs.start, &v55);
      lhs.start.value = v64;
      lhs.start.timescale = v65;
      lhs.start.flags = v16;
      lhs.start.epoch = v17;
      EditIndexStartingAtTimeInTrackSplitEditIfNecessary = FindEditIndexStartingAtTimeInTrackSplitEditIfNecessary(a1, &lhs.start);
      if ((EditIndexStartingAtTimeInTrackSplitEditIfNecessary & 0x80000000) == 0)
      {
        v37 = EditIndexStartingAtTimeInTrackSplitEditIfNecessary;
        if ((signed int)EditIndexStartingAtTimeInTrackSplitEditIfNecessary < *(_DWORD *)(a1 + 8))
        {
          v38 = EditIndexStartingAtTimeInTrackSplitEditIfNecessary - 1;
          if (EditIndexStartingAtTimeInTrackSplitEditIfNecessary)
            v39 = v38;
          else
            v39 = 0;
          v40 = EditIndexStartingAtTimeInTrackSplitEditIfNecessary;
          v41 = *(_QWORD *)a1 + 96 * EditIndexStartingAtTimeInTrackSplitEditIfNecessary;
          v42 = *(_OWORD *)(v41 + 48);
          v55.epoch = *(_QWORD *)(v41 + 64);
          *(_OWORD *)&v55.value = v42;
          v54 = v56;
          CMTimeAdd(&lhs.start, &v55, &v54);
          v43 = *(_OWORD *)&lhs.start.value;
          *(_QWORD *)(v41 + 64) = lhs.start.epoch;
          *(_OWORD *)(v41 + 48) = v43;
          if (!v37)
            goto LABEL_34;
          *(_OWORD *)time1 = *(_OWORD *)time2;
          *(_OWORD *)&time1[16] = *(_OWORD *)&time2[16];
          *(_OWORD *)v59 = *(_OWORD *)v63;
          *(_OWORD *)&v59[12] = *(_OWORD *)&v63[12];
          *(_DWORD *)&v59[28] = v16;
          *(_OWORD *)&v60[8] = *(_OWORD *)&v52.value;
          v44 = *(_QWORD *)a1 + 96 * v38;
          *(_QWORD *)v60 = v17;
          *(_QWORD *)&v60[24] = v52.epoch;
          if (CombineEditSegmentsIfPossible(v44, (uint64_t)time1, v44))
          {
            if (CombineEditSegmentsIfPossible(*(_QWORD *)a1 + 96 * v38, *(_QWORD *)a1 + 96 * v40, *(_QWORD *)a1 + 96 * v38))
            {
              result = DeleteEditsFromTrack(a1, v37--, 1);
              if ((_DWORD)result)
                return result;
            }
            else
            {
              --v37;
            }
          }
          else
          {
LABEL_34:
            *(_OWORD *)time1 = *(_OWORD *)time2;
            *(_OWORD *)&time1[16] = *(_OWORD *)&time2[16];
            *(_OWORD *)v59 = *(_OWORD *)v63;
            *(_OWORD *)&v59[12] = *(_OWORD *)&v63[12];
            *(_DWORD *)&v59[28] = v16;
            *(_OWORD *)&v60[8] = *(_OWORD *)&v52.value;
            v45 = *(_QWORD *)a1 + 96 * v40;
            *(_QWORD *)v60 = v17;
            *(_QWORD *)&v60[24] = v52.epoch;
            if (!CombineEditSegmentsIfPossible((uint64_t)time1, v45, v45))
            {
              result = InsertUninitializedEditsIntoTrack((char **)a1, v37, 1u);
              if ((_DWORD)result)
                return result;
              v46 = *(_QWORD *)a1 + 96 * v40;
              *(_OWORD *)v46 = *(_OWORD *)time2;
              *(_OWORD *)(v46 + 16) = *(_OWORD *)&time2[16];
              *(_OWORD *)(v46 + 32) = *(_OWORD *)v63;
              *(_OWORD *)(v46 + 44) = *(_OWORD *)&v63[12];
              *(_DWORD *)(v46 + 60) = v16;
              *(_QWORD *)(v46 + 64) = v17;
              *(_OWORD *)(v46 + 72) = *(_OWORD *)&v52.value;
              *(_QWORD *)(v46 + 88) = v52.epoch;
            }
            v38 = v37;
          }
          v47 = (_OWORD *)(*(_QWORD *)a1 + 96 * v38);
          v48 = v47[3];
          v49 = v47[5];
          *(_OWORD *)&lhs.start.epoch = v47[4];
          *(_OWORD *)&lhs.duration.timescale = v49;
          *(_OWORD *)&lhs.start.value = v48;
          CMTimeRangeGetEnd(&rhs, &lhs);
          v50 = v37 + 1;
          lhs.start = rhs;
          UpdateTrackStartTimes(a1, v50, (__int128 *)&lhs.start.value);
          DeleteEditsWithZeroDuration(a1, v39, v50);
          return 0;
        }
      }
      return 4294954516;
    }
  }
  v31 = *(_DWORD *)(a1 + 8);
  if (v31 >= 1)
  {
    *(_OWORD *)time1 = *(_OWORD *)time2;
    *(_OWORD *)&time1[16] = *(_OWORD *)&time2[16];
    *(_OWORD *)v59 = *(_OWORD *)v63;
    *(_OWORD *)&v59[12] = *(_OWORD *)&v63[12];
    *(_DWORD *)&v59[28] = v16;
    *(_OWORD *)&v60[8] = *(_OWORD *)&v52.value;
    v32 = *(_QWORD *)a1 + 96 * (v31 - 1);
    *(_QWORD *)v60 = v17;
    *(_QWORD *)&v60[24] = v52.epoch;
    if (CombineEditSegmentsIfPossible(v32, (uint64_t)time1, v32))
      return 0;
    v31 = *(_DWORD *)(a1 + 8);
  }
  result = InsertUninitializedEditsIntoTrack((char **)a1, v31, 1u);
  if (!(_DWORD)result)
  {
    v30 = *(_QWORD *)a1 + 96 * (int)v18;
    goto LABEL_23;
  }
  return result;
}

uint64_t MovieTrackFragmentInsertMediaSegment(uint64_t a1, _OWORD *a2, __int128 *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE time1[32];
  __int128 v13;

  if ((*((_DWORD *)a3 + 3) & 0x1D) != 1)
    return 4294954516;
  *(_OWORD *)time1 = *a3;
  *(_QWORD *)&time1[16] = *((_QWORD *)a3 + 2);
  v9 = *MEMORY[0x1E0CA2E68];
  *(_QWORD *)&v10 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  if (CMTimeCompare((CMTime *)time1, (CMTime *)&v9) < 0)
    return 4294954516;
  v6 = a2[1];
  *(_OWORD *)time1 = *a2;
  *(_OWORD *)&time1[16] = v6;
  v13 = a2[2];
  v7 = a3[1];
  v9 = *a3;
  v10 = v7;
  v11 = a3[2];
  return InsertMediaSegmentIntoTrack(a1 + 784, (uint64_t)time1, (uint64_t)&v9);
}

uint64_t MovieTrackScaleSegment(CMTime *a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  CMTimeEpoch v7;
  double Seconds;
  double v9;
  int v10;
  BOOL v11;
  int v12;
  _QWORD *v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  int EditIndexStartingAtTimeInTrackSplitEditIfNecessary;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t result;
  int v31;
  int v32;
  __int128 v33;
  CMTime v34;
  CMTime v35;
  __int128 v36;
  CMTimeEpoch v37;
  CMTimeRange lhs;
  CMTime rhs;
  CMTime v40;
  CMTime v41;

  v36 = *a3;
  v37 = *((_QWORD *)a3 + 2);
  *(_OWORD *)&v35.value = *(__int128 *)((char *)a3 + 24);
  v35.epoch = *((_QWORD *)a3 + 5);
  *(_OWORD *)&v34.value = *(_OWORD *)a4;
  v34.epoch = *(_QWORD *)(a4 + 16);
  v33 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&v41.value = *MEMORY[0x1E0CA2E68];
  v7 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v41.epoch = v7;
  memset(&v40, 0, sizeof(v40));
  *(_OWORD *)&lhs.start.value = *a3;
  lhs.start.epoch = *((_QWORD *)a3 + 2);
  rhs = *(CMTime *)((_BYTE *)a3 + 1);
  CMTimeAdd(&v40, &lhs.start, &rhs);
  *(_OWORD *)&lhs.start.value = *(_OWORD *)&v34.value;
  lhs.start.epoch = v34.epoch;
  Seconds = CMTimeGetSeconds(&lhs.start);
  *(_OWORD *)&lhs.start.value = *(_OWORD *)&v35.value;
  lhs.start.epoch = v35.epoch;
  v9 = CMTimeGetSeconds(&lhs.start);
  *(_OWORD *)&lhs.start.value = *(_OWORD *)&v35.value;
  lhs.start.epoch = v35.epoch;
  rhs = v34;
  if (!CMTimeCompare(&lhs.start, &rhs))
    goto LABEL_32;
  *(_OWORD *)&lhs.start.value = *(_OWORD *)&v35.value;
  lhs.start.epoch = v35.epoch;
  *(_OWORD *)&rhs.value = v33;
  rhs.epoch = v7;
  if (CMTimeCompare(&lhs.start, &rhs) < 1)
    return 4294954516;
  *(_OWORD *)&lhs.start.value = *(_OWORD *)&v34.value;
  lhs.start.epoch = v34.epoch;
  *(_OWORD *)&rhs.value = v33;
  rhs.epoch = v7;
  if (CMTimeCompare(&lhs.start, &rhs) < 1)
    return 4294954516;
  *(_OWORD *)&lhs.start.value = v36;
  lhs.start.epoch = v37;
  *(_OWORD *)&rhs.value = v33;
  rhs.epoch = v7;
  if (CMTimeCompare(&lhs.start, &rhs) < 0)
    return 4294954516;
  v10 = *(_DWORD *)(a2 + 816);
  v11 = __OFSUB__(v10, 1);
  v12 = v10 - 1;
  if (v12 < 0 != v11)
    return 4294954516;
  v13 = (_QWORD *)(a2 + 808);
  v14 = (_OWORD *)(*(_QWORD *)(a2 + 808) + 96 * v12);
  v15 = v14[3];
  v16 = v14[5];
  *(_OWORD *)&lhs.start.epoch = v14[4];
  *(_OWORD *)&lhs.duration.timescale = v16;
  *(_OWORD *)&lhs.start.value = v15;
  CMTimeRangeGetEnd(&v41, &lhs);
  *(_OWORD *)&lhs.start.value = v36;
  lhs.start.epoch = v37;
  rhs = v41;
  if ((CMTimeCompare(&lhs.start, &rhs) & 0x80000000) == 0)
  {
LABEL_32:
    MovieTrackInvalidateEnhancedGaplessInfo(a2);
    *(_OWORD *)&lhs.start.value = *a3;
    lhs.start.epoch = *((_QWORD *)a3 + 2);
    NoteEditSegmentModification((uint64_t)a1, a2, &lhs.start, 0);
    UpdateDurationsForEditSegmentChange(a1, a2);
    return 0;
  }
  *(_OWORD *)&lhs.start.value = v36;
  lhs.start.epoch = v37;
  EditIndexStartingAtTimeInTrackSplitEditIfNecessary = FindEditIndexStartingAtTimeInTrackSplitEditIfNecessary(a2 + 808, &lhs.start);
  if (EditIndexStartingAtTimeInTrackSplitEditIfNecessary < 0)
    return 4294954516;
  v18 = EditIndexStartingAtTimeInTrackSplitEditIfNecessary;
  if (EditIndexStartingAtTimeInTrackSplitEditIfNecessary >= *(_DWORD *)(a2 + 816))
    return 4294954516;
  lhs.start = v40;
  rhs = v41;
  if ((CMTimeCompare(&lhs.start, &rhs) & 0x80000000) == 0)
  {
    v19 = *(_DWORD *)(a2 + 816);
    goto LABEL_13;
  }
  lhs.start = v40;
  v20 = FindEditIndexStartingAtTimeInTrackSplitEditIfNecessary(a2 + 808, &lhs.start);
  if (v20 < 0)
    return 4294954516;
  v19 = v20;
  if (v20 >= *(_DWORD *)(a2 + 816))
    return 4294954516;
LABEL_13:
  if (v18 == v19 - 1
    && (v21 = *v13 + 96 * v18,
        v22 = *(_OWORD *)(v21 + 72),
        lhs.start.epoch = *(_QWORD *)(v21 + 88),
        *(_OWORD *)&lhs.start.value = v22,
        rhs = v35,
        !CMTimeCompare(&lhs.start, &rhs)))
  {
    v29 = *v13 + 96 * v18;
    *(_OWORD *)(v29 + 72) = *(_OWORD *)&v34.value;
    *(_QWORD *)(v29 + 88) = v34.epoch;
  }
  else
  {
    v23 = v19 - v18;
    if (v19 > v18)
    {
      v24 = 96 * v18 + 72;
      v25 = Seconds / v9;
      do
      {
        v26 = *v13 + v24;
        v27 = *(_OWORD *)v26;
        rhs.epoch = *(_QWORD *)(v26 + 16);
        *(_OWORD *)&rhs.value = v27;
        CMTimeMultiplyByFloat64(&lhs.start, &rhs, v25);
        v28 = *(_OWORD *)&lhs.start.value;
        *(_QWORD *)(v26 + 16) = lhs.start.epoch;
        *(_OWORD *)v26 = v28;
        v24 += 96;
        --v23;
      }
      while (v23);
    }
  }
  *(_OWORD *)&lhs.start.value = v36;
  lhs.start.epoch = v37;
  UpdateTrackStartTimes(a2 + 808, v18, (__int128 *)&lhs.start.value);
  if (v18 < 1
    || v18 >= *(_DWORD *)(a2 + 816)
    || !CombineEditSegmentsIfPossible(*v13 + 96 * (v18 - 1), *v13 + 96 * v18, *v13 + 96 * (v18 - 1))|| (result = DeleteEditsFromTrack(a2 + 808, v18, 1), --v19, !(_DWORD)result))
  {
    if (v19 < 1
      || v19 >= *(_DWORD *)(a2 + 816)
      || !CombineEditSegmentsIfPossible(*v13 + 96 * (v19 - 1), *v13 + 96 * v19, *v13 + 96 * (v19 - 1))|| (result = DeleteEditsFromTrack(a2 + 808, v19, 1), --v19, !(_DWORD)result))
    {
      v31 = *(_DWORD *)(a2 + 816);
      if (v19 >= v31)
        v32 = v31 - 1;
      else
        v32 = v19;
      DeleteEditsWithZeroDuration(a2 + 808, v18 - (v18 > 0), v32);
      goto LABEL_32;
    }
  }
  return result;
}

uint64_t MovieTrackDeleteSegment(CMTime *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  CMTime v8;
  CMTime v9;

  v9 = *(CMTime *)a3;
  v8 = *(CMTime *)(a3 + 24);
  v6 = DeleteTrackSegment(a2 + 808, (uint64_t)&v9, &v8);
  if (!(_DWORD)v6)
  {
    MovieTrackInvalidateEnhancedGaplessInfo(a2);
    v9 = *(CMTime *)a3;
    NoteEditSegmentModification((uint64_t)a1, a2, &v9, 0);
    UpdateDurationsForEditSegmentChange(a1, a2);
  }
  return v6;
}

uint64_t DeleteTrackSegment(uint64_t a1, uint64_t a2, CMTime *a3)
{
  CMTimeEpoch epoch;
  int v7;
  BOOL v8;
  int v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  signed int EditIndexStartingAtTimeInTrackSplitEditIfNecessary;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int128 v24;
  CMTimeRange lhs;
  CMTime rhs;
  CMTime v27;
  CMTime v28;

  v28 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v24 = *(_OWORD *)&v28.value;
  epoch = v28.epoch;
  memset(&v27, 0, sizeof(v27));
  *(_OWORD *)&lhs.start.value = *(_OWORD *)a2;
  lhs.start.epoch = *(_QWORD *)(a2 + 16);
  rhs = *a3;
  CMTimeAdd(&v27, &lhs.start, &rhs);
  *(_OWORD *)&lhs.start.value = *(_OWORD *)&a3->value;
  lhs.start.epoch = a3->epoch;
  *(_OWORD *)&rhs.value = v24;
  rhs.epoch = epoch;
  if (!CMTimeCompare(&lhs.start, &rhs))
    return 0;
  *(_OWORD *)&lhs.start.value = *(_OWORD *)&a3->value;
  lhs.start.epoch = a3->epoch;
  *(_OWORD *)&rhs.value = v24;
  rhs.epoch = epoch;
  if (CMTimeCompare(&lhs.start, &rhs) < 1)
    return 4294954516;
  *(_OWORD *)&lhs.start.value = *(_OWORD *)a2;
  lhs.start.epoch = *(_QWORD *)(a2 + 16);
  *(_OWORD *)&rhs.value = v24;
  rhs.epoch = epoch;
  if (CMTimeCompare(&lhs.start, &rhs) < 0)
    return 4294954516;
  v7 = *(_DWORD *)(a1 + 8);
  v8 = __OFSUB__(v7, 1);
  v9 = v7 - 1;
  if (v9 < 0 != v8)
    return 0;
  v10 = (_OWORD *)(*(_QWORD *)a1 + 96 * v9);
  v11 = v10[3];
  v12 = v10[5];
  *(_OWORD *)&lhs.start.epoch = v10[4];
  *(_OWORD *)&lhs.duration.timescale = v12;
  *(_OWORD *)&lhs.start.value = v11;
  CMTimeRangeGetEnd(&v28, &lhs);
  *(_OWORD *)&lhs.start.value = *(_OWORD *)a2;
  lhs.start.epoch = *(_QWORD *)(a2 + 16);
  rhs = v28;
  if ((CMTimeCompare(&lhs.start, &rhs) & 0x80000000) == 0)
    return 0;
  *(_OWORD *)&lhs.start.value = *(_OWORD *)a2;
  lhs.start.epoch = *(_QWORD *)(a2 + 16);
  EditIndexStartingAtTimeInTrackSplitEditIfNecessary = FindEditIndexStartingAtTimeInTrackSplitEditIfNecessary(a1, &lhs.start);
  if (EditIndexStartingAtTimeInTrackSplitEditIfNecessary < 0)
    return 4294954516;
  v14 = EditIndexStartingAtTimeInTrackSplitEditIfNecessary;
  if (EditIndexStartingAtTimeInTrackSplitEditIfNecessary >= *(_DWORD *)(a1 + 8))
    return 4294954516;
  lhs.start = v27;
  rhs = v28;
  if (CMTimeCompare(&lhs.start, &rhs) < 0)
  {
    lhs.start = v27;
    v15 = FindEditIndexStartingAtTimeInTrackSplitEditIfNecessary(a1, &lhs.start);
    if ((v15 & 0x80000000) == 0 && v15 < *(_DWORD *)(a1 + 8))
      goto LABEL_13;
    return 4294954516;
  }
  v15 = *(_DWORD *)(a1 + 8);
LABEL_13:
  v17 = DeleteEditsFromTrack(a1, v14, (int)(v15 - v14));
  if ((_DWORD)v17)
    return v17;
  *(_OWORD *)&lhs.start.value = *(_OWORD *)a2;
  lhs.start.epoch = *(_QWORD *)(a2 + 16);
  UpdateTrackStartTimes(a1, v14, (__int128 *)&lhs.start.value);
  if (v14)
  {
    v18 = *(_DWORD *)(a1 + 8);
    if ((int)v14 >= v18)
      goto LABEL_19;
    v19 = *(_QWORD *)a1 + 96 * (v14 - 1);
    if (CombineEditSegmentsIfPossible(v19, *(_QWORD *)a1 + 96 * v14, v19))
    {
      v17 = DeleteEditsFromTrack(a1, v14, 1);
      if ((_DWORD)v17)
        return v17;
    }
  }
  v18 = *(_DWORD *)(a1 + 8);
LABEL_19:
  v20 = (v18 - 1);
  if (v18 < 1 || (*(_DWORD *)(*(_QWORD *)a1 + 96 * v20 + 12) & 0x1D) == 1)
  {
    v16 = 0;
  }
  else
  {
    v16 = DeleteEditsFromTrack(a1, v20, 1);
    v18 = *(_DWORD *)(a1 + 8);
  }
  if ((int)v14 >= v18)
    v21 = v18 - 1;
  else
    v21 = v14;
  if (v14)
    v22 = v14 - 1;
  else
    v22 = 0;
  if (v21 >= (int)v22)
    DeleteEditsWithZeroDuration(a1, v22, v21);
  return v16;
}

uint64_t MovieTrackFragmentDeleteSegment(uint64_t a1, __int128 *a2)
{
  CMTime v3;
  __int128 v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *((_QWORD *)a2 + 2);
  v3 = *(CMTime *)((_BYTE *)a2 + 1);
  return DeleteTrackSegment(a1 + 784, (uint64_t)&v4, &v3);
}

uint64_t MovieInformationSetParsedIFFItemInformation(uint64_t a1, CFTypeRef cf)
{
  if (!cf || *(_QWORD *)(a1 + 200))
    return FigSignalErrorAt();
  *(_QWORD *)(a1 + 200) = CFRetain(cf);
  return 0;
}

uint64_t MovieInformationCopyIFFItemInformation(uint64_t a1, _QWORD *a2)
{
  CFTypeRef v3;

  v3 = *(CFTypeRef *)(a1 + 200);
  if (v3)
    v3 = CFRetain(v3);
  *a2 = v3;
  return 0;
}

void MovieInformationSetAssetAnalysisReporter(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  v2 = *(const void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
}

uint64_t MovieInformationGetAssetAnalysisReporter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t FragmentCursorEnsureAccessorAndCopySampleGroupDescription(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v11;

  v11 = 0;
  v5 = *a2;
  if (*a2)
  {
    v6 = 0;
  }
  else
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 200) + 104);
    if (!v7)
      return v11;
    v9 = MovieSampleGroupCollectionLookupAndRetainSampleGroup(v7, a3, a4);
    if (!v9)
      return v11;
    v6 = v9;
    if (MovieSampleGroupAccessorCreate(v9, a2))
    {
LABEL_8:
      CFRelease(v6);
      return v11;
    }
    v5 = *a2;
  }
  MovieSampleGroupAccessorCopyDescriptionForSample(v5, (*(_DWORD *)(a1 + 80) - *(_DWORD *)(*(_QWORD *)(a1 + 208) + 16) + 1), &v11);
  if (v6)
    goto LABEL_8;
  return v11;
}

uint64_t PostDeferredMovieInformationNotification()
{
  return CMNotificationCenterPostNotification();
}

uint64_t RegisterMoviePerTrackInfoType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sMoviePerTrackInfoID = result;
  return result;
}

void InitMoviePerTrackInfo(uint64_t a1)
{
  bzero((void *)(a1 + 16), 0x388uLL);
}

void FinalizeMoviePerTrackInfo(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  uint64_t v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;

  ReleaseSampleDescriptionInfoArray(a1);
  ReleaseDataReferenceInfoArray(a1);
  v2 = *(const void **)(a1 + 48);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 48) = 0;
  }
  v3 = *(const void **)(a1 + 856);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 856) = 0;
  }
  v4 = *(const void **)(a1 + 848);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 848) = 0;
  }
  v5 = *(const void **)(a1 + 72);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 72) = 0;
  }
  v6 = *(const void **)(a1 + 80);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 80) = 0;
  }
  v7 = *(_QWORD *)(a1 + 728);
  if (v7)
  {
    FreeFragmentInfos(v7);
    free(*(void **)(a1 + 728));
    *(_QWORD *)(a1 + 728) = 0;
  }
  FreeAllSampleTables((_QWORD *)a1);
  v8 = *(const void **)(a1 + 696);
  if (v8)
    CFRelease(v8);
  v9 = *(const void **)(a1 + 640);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 640) = 0;
  }
  free(*(void **)(a1 + 808));
  *(_QWORD *)(a1 + 808) = 0;
  v10 = *(const void **)(a1 + 832);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a1 + 832) = 0;
  }
  v11 = *(const void **)(a1 + 888);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(a1 + 888) = 0;
  }
  if (*(_QWORD *)(a1 + 32))
  {
    FigSimpleMutexDestroy();
    *(_QWORD *)(a1 + 32) = 0;
  }
  if (*(_BYTE *)(a1 + 897))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterUnregisterForBarrierSupport();
    *(_BYTE *)(a1 + 897) = 0;
  }
  TrackFragmentBuilderRelease(*(const __CFAllocator ***)(a1 + 768));
  *(_QWORD *)(a1 + 768) = 0;
  free(*(void **)(a1 + 784));
  *(_QWORD *)(a1 + 784) = 0;
}

uint64_t RegisterMovieInformationType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sMovieInformationID = result;
  return result;
}

double InitMovieInformation(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[21] = 0u;
  a1[22] = 0u;
  a1[19] = 0u;
  a1[20] = 0u;
  a1[17] = 0u;
  a1[18] = 0u;
  a1[15] = 0u;
  a1[16] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

uint64_t FinalizeMovieInformation(uint64_t a1)
{
  const void *v2;
  uint64_t v3;
  uint64_t i;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  NSObject *v11;

  v2 = *(const void **)(a1 + 48);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 48) = 0;
  }
  v3 = *(_QWORD *)(a1 + 304);
  if (v3 >= 1)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(const void **)(*(_QWORD *)(a1 + 320) + 8 * i);
      if (v5)
      {
        CFRelease(v5);
        *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * i) = 0;
        v3 = *(_QWORD *)(a1 + 304);
      }
    }
  }
  free(*(void **)(a1 + 320));
  free(*(void **)(a1 + 344));
  v6 = *(const void **)(a1 + 56);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 56) = 0;
  }
  v7 = *(const void **)(a1 + 64);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 64) = 0;
  }
  v8 = *(const void **)(a1 + 352);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a1 + 352) = 0;
  }
  v9 = *(const void **)(a1 + 360);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 360) = 0;
  }
  v10 = *(const void **)(a1 + 200);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a1 + 200) = 0;
  }
  if (*(_QWORD *)(a1 + 32))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterUnregisterForBarrierSupport();
    v11 = *(NSObject **)(a1 + 32);
    if (v11)
    {
      dispatch_release(v11);
      *(_QWORD *)(a1 + 32) = 0;
    }
  }
  return FigReadWriteLockDestroy();
}

void SampleGroupDeepCopyApplier(uint64_t a1, CFTypeRef cf)
{
  const __CFAllocator *v4;
  CFTypeRef cfa;

  cfa = 0;
  v4 = CFGetAllocator(cf);
  if (!MovieSampleGroupCreateDeepCopy(v4, a1, &cfa))
    MovieSampleGroupCollectionAddSampleGroup((uint64_t)cf, (uint64_t)cfa);
  if (cfa)
    CFRelease(cfa);
}

void UpgradeTo64BitChunkOffsets(uint64_t a1, int a2, size_t dataLength)
{
  int v4;
  OSStatus v5;
  CMBlockBufferRef v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  void *v10;
  const void *v11;
  const void *v12;
  char *dataPointerOut;
  CMBlockBufferRef theBuffer;

  dataPointerOut = 0;
  theBuffer = 0;
  v4 = *(_DWORD *)(a1 + 360);
  if (v4)
  {
    v5 = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 8 * v4, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 8 * v4, 1u, &theBuffer);
    v6 = theBuffer;
    if (v5)
      goto LABEL_14;
    CMBlockBufferGetDataPointer(theBuffer, 0, 0, 0, &dataPointerOut);
    if (v4 >= 1)
    {
      v7 = 0;
      do
      {
        v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 616))(a1, v7);
        v9 = dataPointerOut;
        *(_QWORD *)dataPointerOut = bswap64(v8);
        dataPointerOut = v9 + 8;
        v7 = (v7 + 1);
      }
      while (v4 != (_DWORD)v7);
    }
    *(_DWORD *)(a1 + 384) = v4;
    v10 = theBuffer;
    if (theBuffer)
      v10 = (void *)CFRetain(theBuffer);
    *(_QWORD *)(a1 + 392) = v10;
  }
  *(_DWORD *)(a1 + 360) = 0;
  v11 = *(const void **)(a1 + 368);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(a1 + 368) = 0;
  }
  v12 = *(const void **)(a1 + 376);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(a1 + 376) = 0;
  }
  *(_QWORD *)(a1 + 616) = GetChunkOffset_co64;
  *(_QWORD *)(a1 + 624) = GetChunkCount_co64;
  *(_QWORD *)(a1 + 632) = GetChunkTable_co64;
  v6 = theBuffer;
LABEL_14:
  if (v6)
    CFRelease(v6);
}

uint64_t AddFragmentRunSampleSizes(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(unsigned int *)(a2 + 48);
  if ((v3 & 2) != 0)
  {
    if (*(int *)(a2 + 36) >= 1)
    {
      v6 = 0;
      v7 = a2 + 4 * kPerSampleInfo_SizeIndex[v3] + 52;
      v8 = 4 * kPerSampleInfo_SizeInInt32s[v3];
      do
      {
        result = CMByteStreamAppend();
        if ((_DWORD)result)
          break;
        ++v6;
        v7 += v8;
      }
      while (v6 < *(int *)(a2 + 36));
    }
  }
  else if (*(int *)(a2 + 36) >= 1)
  {
    v4 = 0;
    do
    {
      result = CMByteStreamAppend();
      if ((_DWORD)result)
        break;
      ++v4;
    }
    while (v4 < *(int *)(a2 + 36));
  }
  return result;
}

void MakeReadyToWrite_stts(uint64_t a1)
{
  OpaqueCMBlockBuffer *v2;
  size_t v3;
  const void *v4;
  CMBlockBufferRef v5;
  uint64_t destination;
  CMBlockBufferRef blockBufferOut;

  blockBufferOut = 0;
  if (!*(_QWORD *)(a1 + 424))
  {
    if (!CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0x10u, 0, &blockBufferOut))
    {
      v2 = *(OpaqueCMBlockBuffer **)(a1 + 416);
      if (v2)
      {
        destination = 0;
        v3 = 8 * *(int *)(a1 + 408) - 8;
        CMBlockBufferCopyDataBytes(v2, v3, 8uLL, &destination);
        if (*(int *)(a1 + 408) >= 2)
          CMBlockBufferAppendBufferReference(blockBufferOut, *(CMBlockBufferRef *)(a1 + 416), 0, v3, 0);
        if (CMByteStreamCreateWritableForBlockBuffer())
          goto LABEL_13;
        CMByteStreamAppend();
        goto LABEL_9;
      }
      if (!CMByteStreamCreateWritableForBlockBuffer())
      {
LABEL_9:
        v4 = *(const void **)(a1 + 416);
        v5 = blockBufferOut;
        *(_QWORD *)(a1 + 416) = blockBufferOut;
        if (v5)
          CFRetain(v5);
        if (v4)
          CFRelease(v4);
      }
    }
LABEL_13:
    if (blockBufferOut)
      CFRelease(blockBufferOut);
  }
}

void MakeReadyToWrite_ctts(uint64_t a1)
{
  OpaqueCMBlockBuffer *v2;
  size_t v3;
  const void *v4;
  CMBlockBufferRef v5;
  uint64_t destination;
  CMBlockBufferRef blockBufferOut;

  blockBufferOut = 0;
  if (!*(_QWORD *)(a1 + 472))
  {
    if (!CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0x10u, 0, &blockBufferOut))
    {
      v2 = *(OpaqueCMBlockBuffer **)(a1 + 464);
      if (v2)
      {
        destination = 0;
        v3 = 8 * *(int *)(a1 + 456) - 8;
        CMBlockBufferCopyDataBytes(v2, v3, 8uLL, &destination);
        if (*(int *)(a1 + 456) >= 2)
          CMBlockBufferAppendBufferReference(blockBufferOut, *(CMBlockBufferRef *)(a1 + 464), 0, v3, 0);
        if (CMByteStreamCreateWritableForBlockBuffer())
          goto LABEL_14;
        CMByteStreamAppend();
        goto LABEL_9;
      }
      if (!CMByteStreamCreateWritableForBlockBuffer())
      {
LABEL_9:
        v4 = *(const void **)(a1 + 464);
        v5 = blockBufferOut;
        *(_QWORD *)(a1 + 464) = blockBufferOut;
        if (v5)
          CFRetain(v5);
        if (v4)
          CFRelease(v4);
        *(_BYTE *)(a1 + 720) = 1;
      }
    }
LABEL_14:
    if (blockBufferOut)
      CFRelease(blockBufferOut);
  }
}

uint64_t WriteTimeToSampleNumEntry(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, _DWORD *, uint64_t *);
  uint64_t v8;
  _DWORD v9[2];

  v8 = 0;
  v9[0] = bswap32(a2);
  v9[1] = bswap32(a3);
  v5 = *(_QWORD *)(a1 + 424);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _DWORD *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 16);
  if (v6)
    return v6(v5, 8, 8 * a4, v9, &v8);
  else
    return 4294954514;
}

void DeepCopySampleGroupDescriptionArraysApplierFunction(const void *a1, uint64_t a2, void *cf)
{
  const __CFAllocator *v6;
  void *value;

  value = 0;
  v6 = CFGetAllocator(cf);
  if (MovieSampleGroupCreateDescriptionArrayDeepCopy(v6, a2, &value))
    FigSignalErrorAt();
  else
    CFDictionaryAddValue((CFMutableDictionaryRef)cf, a1, value);
  if (value)
    CFRelease(value);
}

uint64_t AddSampleToTimeToSampleTable(uint64_t a1, int a2, uint64_t a3)
{
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  _BOOL4 v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t *);
  uint64_t result;
  uint64_t v18;
  unint64_t destination;

  if (a3 != (int)a3)
    return FigSignalErrorAt();
  v18 = 0;
  MakeReadyToWrite_stts(a1);
  v6 = *(_DWORD *)(a1 + 408);
  if (!v6)
  {
    v7 = 0;
    v9 = 0;
    v11 = a3 == -1;
    v10 = -1;
LABEL_6:
    v6 = v7;
    goto LABEL_7;
  }
  v7 = v6 - 1;
  destination = 0;
  CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 416), 8 * (v6 - 1), 8uLL, &destination);
  v8 = destination;
  v9 = bswap32(destination);
  destination = 0;
  CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 416), 8 * (v6 - 1), 8uLL, &destination);
  v10 = bswap32(HIDWORD(destination));
  v11 = v10 == a3;
  if (!v8)
    goto LABEL_6;
LABEL_7:
  if (v11)
    v12 = v9;
  else
    v12 = 0;
  if (v11)
    v13 = v7;
  else
    v13 = v6;
  v14 = v12 + a2;
  if (!v14)
    goto LABEL_18;
  if (!v11)
    v10 = a3;
  destination = _byteswap_uint64(__PAIR64__(v14, v10));
  v15 = *(_QWORD *)(a1 + 424);
  v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 16);
  if (!v16)
    return 4294954514;
  result = v16(v15, 8, 8 * v13, &destination, &v18);
  if (!(_DWORD)result)
  {
LABEL_18:
    result = 0;
    *(_DWORD *)(a1 + 408) = v13 + 1;
  }
  return result;
}

uint64_t AddSampleToCompositionOffsetTable(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t *);
  uint64_t result;
  uint64_t v14;
  unint64_t destination;

  v3 = a3;
  if (a3 != (int)a3)
    return FigSignalErrorAt();
  v14 = 0;
  MakeReadyToWrite_ctts(a1);
  v6 = *(_DWORD *)(a1 + 456);
  if (!v6)
    goto LABEL_13;
  destination = 0;
  CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 464), 8 * (v6 - 1), 8uLL, &destination);
  v7 = destination;
  destination = 0;
  CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 464), 8 * (v6 - 1), 8uLL, &destination);
  if (*(_DWORD *)(a1 + 456))
  {
    v8 = bswap32(HIDWORD(destination));
    v9 = bswap32(v7) + a2;
    if (v7)
      v10 = v6;
    else
      v10 = v6 - 1;
    if (v8 == v3)
    {
      LODWORD(v3) = v8;
      a2 = v9;
      --v6;
    }
    else
    {
      v6 = v10;
    }
    if (!a2)
      goto LABEL_16;
    goto LABEL_14;
  }
  if (v7)
  {
LABEL_13:
    if (!a2)
    {
LABEL_16:
      result = 0;
      *(_DWORD *)(a1 + 456) = v6 + 1;
      return result;
    }
    goto LABEL_14;
  }
  --v6;
  if (!a2)
    goto LABEL_16;
LABEL_14:
  destination = _byteswap_uint64(__PAIR64__(a2, v3));
  v11 = *(_QWORD *)(a1 + 472);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 16);
  if (!v12)
    return 4294954514;
  result = v12(v11, 8, 8 * v6, &destination, &v14);
  if (!(_DWORD)result)
    goto LABEL_16;
  return result;
}

uint64_t AddSampleGroupForGroupType(_QWORD *cf, unint64_t a2, unsigned int a3, int a4, unsigned int a5, int a6, int a7, size_t a8, const void *a9, _BYTE *a10)
{
  CFTypeRef v17;
  BOOL v19;
  char v20;
  const __CFAllocator *v21;
  int v22;
  uint64_t v23;
  uint64_t appended;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v29;
  char v30;
  CFTypeRef cfa;
  CFTypeRef v32;

  cfa = 0;
  v30 = 0;
  v17 = (CFTypeRef)cf[9];
  if (v17)
    v17 = MovieSampleGroupCollectionLookupAndRetainSampleGroup((uint64_t)v17, a2, a3);
  v32 = v17;
  if (a7)
    v19 = v17 == 0;
  else
    v19 = 0;
  v20 = v19;
  if (!v19)
    goto LABEL_23;
  v21 = CFGetAllocator(cf);
  v22 = *((_DWORD *)cf + 72);
  v23 = cf[91];
  if (v23)
    v22 += *(_DWORD *)(v23 + 8);
  if (a4)
  {
    appended = MovieSampleGroupCreateCompact(v21, a2, a3, &v32);
    if ((_DWORD)appended)
      goto LABEL_37;
  }
  else
  {
    appended = MovieSampleGroupCreate(v21, a2, a3, (uint64_t *)&v32);
    if ((_DWORD)appended)
      goto LABEL_37;
  }
  appended = MovieTrackAddAndRetainSampleGroupDescriptionArray(cf, a2, &cfa);
  if ((_DWORD)appended)
    goto LABEL_37;
  appended = MovieSampleGroupSetDescriptionArray((uint64_t)v32, cfa);
  if ((_DWORD)appended)
    goto LABEL_37;
  appended = MovieTrackAddSampleGroup(cf, (uint64_t)v32);
  if ((_DWORD)appended)
    goto LABEL_37;
  if (!(v22 + a6)
    || (v25 = MovieSampleGroupAppendSamplesWithDescriptionIndex((uint64_t)v32, v22 + a6, 0), !(_DWORD)v25))
  {
    v17 = v32;
LABEL_23:
    if (!v17)
    {
      v27 = 0;
LABEL_31:
      v25 = 0;
      *a10 = v20 | v27;
      goto LABEL_32;
    }
    v29 = 0;
    if (!a7)
    {
      v26 = 0;
LABEL_29:
      appended = MovieSampleGroupAppendSamplesWithDescriptionIndex((uint64_t)v17, a5, v26);
      if (!(_DWORD)appended)
      {
        v27 = v30 != 0;
        goto LABEL_31;
      }
      goto LABEL_37;
    }
    appended = MovieSampleGroupAddDescription((uint64_t)v17, a8, a9, (uint64_t)&v29, &v30);
    if (!(_DWORD)appended)
    {
      v17 = v32;
      v26 = v29;
      goto LABEL_29;
    }
LABEL_37:
    v25 = appended;
  }
LABEL_32:
  if (cfa)
    CFRelease(cfa);
  if (v32)
    CFRelease(v32);
  return v25;
}

uint64_t CombineEditSegmentsIfPossible(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int32_t v6;
  int32_t v7;
  __int128 v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int32_t v14;
  double Seconds;
  double v16;
  double v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  CMTime v26;
  CMTime rhs;
  CMTime v28;
  CMTimeRange time1;
  __int128 v30;
  _BYTE v31[32];
  CMTime v32;
  CMTime time2;
  CMTime v34;
  __int128 v35;
  CMTimeEpoch v36;
  CMTime v37;
  __int128 v38;
  CMTimeEpoch v39;

  v38 = *(_OWORD *)(a1 + 72);
  v39 = *(_QWORD *)(a1 + 88);
  v37 = *(CMTime *)(a2 + 72);
  v35 = *(_OWORD *)(a1 + 24);
  v36 = *(_QWORD *)(a1 + 40);
  v34 = *(CMTime *)(a2 + 24);
  *(_OWORD *)&time1.start.value = *(_OWORD *)(a1 + 72);
  time1.start.epoch = *(_QWORD *)(a1 + 88);
  time2 = *(CMTime *)(a1 + 24);
  v6 = CMTimeCompare(&time1.start, &time2);
  time1.start = v37;
  time2 = v34;
  v7 = CMTimeCompare(&time1.start, &time2);
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v32 = time2;
  v8 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)&time1.start.value = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&time1.start.epoch = v8;
  *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(a1 + 80);
  CMTimeRangeGetEnd(&v28, &time1);
  *(_OWORD *)&time1.start.value = *(_OWORD *)(a2 + 48);
  time1.start.epoch = *(_QWORD *)(a2 + 64);
  if (CMTimeCompare(&v28, &time1.start))
    return 0;
  if ((*(_BYTE *)(a1 + 12) & 1) == 0 && (*(_BYTE *)(a2 + 12) & 1) == 0)
  {
    *(_OWORD *)&time1.start.value = v38;
    time1.start.epoch = v39;
    rhs = v37;
    CMTimeAdd(&time2, &time1.start, &rhs);
    *(_OWORD *)a3 = *(_OWORD *)a1;
    v10 = *(_OWORD *)(a1 + 16);
    v11 = *(_OWORD *)(a1 + 32);
    v12 = *(_OWORD *)(a1 + 48);
    *(_QWORD *)(a3 + 64) = *(_QWORD *)(a1 + 64);
    *(_OWORD *)(a3 + 32) = v11;
    *(_OWORD *)(a3 + 48) = v12;
    *(_OWORD *)(a3 + 16) = v10;
    *(CMTime *)(a3 + 72) = time2;
    return 1;
  }
  v13 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&time1.start.value = *(_OWORD *)a1;
  *(_OWORD *)&time1.start.epoch = v13;
  *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(a1 + 32);
  CMTimeRangeGetEnd(&v26, &time1);
  *(_OWORD *)&time1.start.value = *(_OWORD *)a2;
  time1.start.epoch = *(_QWORD *)(a2 + 16);
  v14 = CMTimeCompare(&v26, &time1.start);
  result = 0;
  if (!v14 && (v6 != 0) == (v7 != 0))
  {
    if (!v6)
      goto LABEL_12;
    if (!v7)
      goto LABEL_12;
    *(_OWORD *)&time1.start.value = v38;
    time1.start.epoch = v39;
    Seconds = CMTimeGetSeconds(&time1.start);
    time1.start = v34;
    v16 = Seconds * CMTimeGetSeconds(&time1.start);
    time1.start = v37;
    v17 = CMTimeGetSeconds(&time1.start);
    *(_OWORD *)&time1.start.value = v35;
    time1.start.epoch = v36;
    if (v16 == v17 * CMTimeGetSeconds(&time1.start))
    {
LABEL_12:
      *(_OWORD *)&time1.start.value = v38;
      time1.start.epoch = v39;
      rhs = v37;
      CMTimeAdd(&time2, &time1.start, &rhs);
      *(_OWORD *)&time1.start.value = v35;
      time1.start.epoch = v36;
      rhs = v34;
      CMTimeAdd(&v32, &time1.start, &rhs);
      v18 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(a1 + 32);
      v30 = v18;
      v19 = *(_QWORD *)(a1 + 64);
      v20 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)&time1.start.value = *(_OWORD *)a1;
      time1.start.epoch = v20;
      *(CMTime *)&v31[8] = time2;
      *(_QWORD *)v31 = v19;
      time1.duration = v32;
      v21 = *MEMORY[0x1E0CA2E18];
      v22 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      *(_QWORD *)(a1 + 16) = v22;
      *(_OWORD *)a1 = v21;
      *(_QWORD *)(a2 + 16) = v22;
      *(_OWORD *)a2 = v21;
      v23 = *(_OWORD *)&time1.start.epoch;
      *(_OWORD *)a3 = *(_OWORD *)&time1.start.value;
      *(_OWORD *)(a3 + 16) = v23;
      v24 = *(_OWORD *)&v31[16];
      *(_OWORD *)(a3 + 64) = *(_OWORD *)v31;
      *(_OWORD *)(a3 + 80) = v24;
      v25 = v30;
      result = 1;
      *(_OWORD *)(a3 + 32) = *(_OWORD *)&time1.duration.timescale;
      *(_OWORD *)(a3 + 48) = v25;
      return result;
    }
    return 0;
  }
  return result;
}

uint64_t InsertUninitializedEditsIntoTrack(char **a1, unsigned int a2, unsigned int a3)
{
  int v5;
  int v6;
  uint64_t v8;
  int v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t result;

  if ((a2 & 0x80000000) != 0)
    return 4294954516;
  v5 = *((_DWORD *)a1 + 2);
  v6 = v5 - a2;
  if (v5 < (int)a2)
    return 4294954516;
  v8 = *((int *)a1 + 3);
  if ((int)v8 - v5 >= (int)a3)
  {
    v15 = a3;
    if (v6 > 0)
      memmove(&(*a1)[96 * a2 + 96 * a3], &(*a1)[96 * a2], 96 * v6);
    bzero(&(*a1)[96 * a2], 96 * v15);
    goto LABEL_15;
  }
  if ((int)v8 <= 2147483642)
  {
    v9 = v8 + 5;
    v10 = (char *)malloc_type_calloc(v8 + 5, 0x60uLL, 0x1000040565EDBD2uLL);
    v11 = v10;
    v12 = *a1;
    if (*a1)
    {
      v13 = *((int *)a1 + 2) - (uint64_t)(int)a2;
      if (a2)
      {
        memmove(v10, v12, 96 * a2);
        v12 = *a1;
      }
      if ((int)v13 >= 1)
      {
        memmove(&v11[96 * a2 + 96 * a3], &v12[96 * a2], 96 * v13);
        v12 = *a1;
      }
      free(v12);
    }
    *a1 = v11;
    *((_DWORD *)a1 + 3) = v9;
LABEL_15:
    result = 0;
    *((_DWORD *)a1 + 2) += a3;
    return result;
  }
  return FigSignalErrorAt();
}

uint64_t FindEditIndexStartingAtTimeInTrackSplitEditIfNecessary(uint64_t a1, CMTime *a2)
{
  int v2;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  unsigned int v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  CMTimeRange v31;
  CMTime rhs;
  CMTime v33;
  CMTime time2;
  CMTimeRange range;
  CMTime v36;

  v33 = *a2;
  v2 = *(_DWORD *)(a1 + 8);
  if (!v2)
    return 0xFFFFFFFFLL;
  v5 = 0;
  v6 = v2 - 1;
  if (v2 <= 1)
    goto LABEL_13;
  while (1)
  {
    v7 = ((int)v5 + v6) >> 1;
    v8 = *(_QWORD *)a1 + 96 * v7;
    *(_OWORD *)&v31.start.value = *(_OWORD *)(v8 + 48);
    v31.start.epoch = *(_QWORD *)(v8 + 64);
    memset(&v36, 0, sizeof(v36));
    v9 = *(_OWORD *)(v8 + 48);
    v10 = *(_OWORD *)(v8 + 80);
    *(_OWORD *)&range.start.epoch = *(_OWORD *)(v8 + 64);
    *(_OWORD *)&range.duration.timescale = v10;
    *(_OWORD *)&range.start.value = v9;
    CMTimeRangeGetEnd(&v36, &range);
    range.start = v33;
    time2 = v36;
    if (CMTimeCompare(&range.start, &time2) < 1)
      break;
    v5 = (v7 + 1);
LABEL_8:
    if ((int)v5 >= v6)
      goto LABEL_12;
  }
  range.start = v33;
  time2 = v36;
  if (!CMTimeCompare(&range.start, &time2))
  {
    v5 = (v7 + 1);
    goto LABEL_12;
  }
  range.start = v33;
  time2 = v31.start;
  if (CMTimeCompare(&range.start, &time2) < 0)
  {
    v6 = v7 - 1;
    goto LABEL_8;
  }
  v5 = (((int)v5 + v6) >> 1);
LABEL_12:
  if ((v5 & 0x80000000) == 0)
  {
LABEL_13:
    v11 = *(_QWORD *)a1 + 96 * v5;
    v12 = *(_OWORD *)(v11 + 48);
    range.start.epoch = *(_QWORD *)(v11 + 64);
    *(_OWORD *)&range.start.value = v12;
    *(_OWORD *)&v31.start.value = *(_OWORD *)&a2->value;
    v31.start.epoch = a2->epoch;
    if (CMTimeCompare(&range.start, &v31.start))
    {
      v13 = v5;
      v14 = (__int128 *)(*(_QWORD *)a1 + 96 * v5);
      v36 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      time2 = v36;
      v33 = v36;
      rhs = *a2;
      v15 = v14[3];
      v16 = v14[5];
      *(_OWORD *)&range.start.epoch = v14[4];
      *(_OWORD *)&range.duration.timescale = v16;
      *(_OWORD *)&range.start.value = v15;
      v17 = *v14;
      v18 = v14[2];
      *(_OWORD *)&v31.start.epoch = v14[1];
      *(_OWORD *)&v31.duration.timescale = v18;
      *(_OWORD *)&v31.start.value = v17;
      CMTimeMapTimeFromRangeToRange(&v36, &rhs, &range, &v31);
      v5 = (v5 + 1);
      if (!InsertUninitializedEditsIntoTrack((char **)a1, v5, 1u))
      {
        v19 = *(_QWORD *)a1 + 96 * v13;
        *(_OWORD *)&range.start.value = *(_OWORD *)&a2->value;
        range.start.epoch = a2->epoch;
        v20 = *(_OWORD *)(v19 + 48);
        v31.start.epoch = *(_QWORD *)(v19 + 64);
        *(_OWORD *)&v31.start.value = v20;
        CMTimeSubtract(&time2, &range.start, &v31.start);
        range.start = v36;
        v21 = *(_OWORD *)v19;
        v31.start.epoch = *(_QWORD *)(v19 + 16);
        *(_OWORD *)&v31.start.value = v21;
        CMTimeSubtract(&v33, &range.start, &v31.start);
        v22 = *(_OWORD *)&a2->value;
        *(_QWORD *)(v19 + 160) = a2->epoch;
        *(_OWORD *)(v19 + 144) = v22;
        v23 = *(_OWORD *)(v19 + 72);
        v31.start.epoch = *(_QWORD *)(v19 + 88);
        *(_OWORD *)&v31.start.value = v23;
        rhs = time2;
        CMTimeSubtract(&range.start, &v31.start, &rhs);
        v24 = *(_OWORD *)&range.start.value;
        *(_QWORD *)(v19 + 184) = range.start.epoch;
        *(_OWORD *)(v19 + 168) = v24;
        v25 = *(_OWORD *)&v36.value;
        *(_QWORD *)(v19 + 112) = v36.epoch;
        *(_OWORD *)(v19 + 96) = v25;
        v26 = *(_OWORD *)(v19 + 24);
        v31.start.epoch = *(_QWORD *)(v19 + 40);
        *(_OWORD *)&v31.start.value = v26;
        rhs = v33;
        CMTimeSubtract(&range.start, &v31.start, &rhs);
        v27 = *(_OWORD *)&range.start.value;
        *(_QWORD *)(v19 + 136) = range.start.epoch;
        *(_OWORD *)(v19 + 120) = v27;
        v28 = *(_OWORD *)&time2.value;
        *(_QWORD *)(v19 + 88) = time2.epoch;
        *(_OWORD *)(v19 + 72) = v28;
        v29 = *(_OWORD *)&v33.value;
        *(_QWORD *)(v19 + 40) = v33.epoch;
        *(_OWORD *)(v19 + 24) = v29;
        return v5;
      }
      return 0xFFFFFFFFLL;
    }
  }
  return v5;
}

uint64_t DeleteEditsFromTrack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  int v7;

  v3 = *(_DWORD *)(a1 + 8);
  v4 = v3 - (a3 + a2);
  if (v3 < a3 + a2)
    return 4294954516;
  if (v4 >= 1)
  {
    memmove((void *)(*(_QWORD *)a1 + 96 * a2), (const void *)(*(_QWORD *)a1 + 96 * (a3 + a2)), 96 * v4);
    v3 = *(_DWORD *)(a1 + 8);
  }
  v7 = v3 - a3;
  *(_DWORD *)(a1 + 8) = v7;
  bzero((void *)(*(_QWORD *)a1 + 96 * v7), 96 * a3);
  return 0;
}

double UpdateTrackStartTimes(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  double result;
  CMTimeRange v13;
  CMTime v14;

  if (*(int *)(a1 + 8) > a2)
  {
    v4 = a2;
    v6 = 96 * a2 + 48;
    do
    {
      v7 = *(_QWORD *)a1 + v6;
      v8 = *a3;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v7 = v8;
      v9 = (__int128 *)(*(_QWORD *)a1 + v6);
      v10 = *v9;
      v11 = v9[2];
      *(_OWORD *)&v13.start.epoch = v9[1];
      *(_OWORD *)&v13.duration.timescale = v11;
      *(_OWORD *)&v13.start.value = v10;
      CMTimeRangeGetEnd(&v14, &v13);
      result = *(double *)&v14.value;
      *(CMTime *)a3 = v14;
      ++v4;
      v6 += 96;
    }
    while (v4 < *(int *)(a1 + 8));
  }
  return result;
}

uint64_t DeleteEditsWithZeroDuration(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  CMTimeEpoch v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  CMTime time2;
  CMTime time1;

  if ((a2 & 0x8000000000000000) == 0)
  {
    v3 = a3;
    v4 = a2;
    v5 = (_QWORD *)result;
    v6 = *(int *)(result + 8);
    v7 = v6 > a3 && a2 <= a3;
    if (v7 && v6 > a2)
    {
      v12 = *MEMORY[0x1E0CA2E68];
      v9 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
      do
      {
        v10 = *v5 + 96 * v4;
        v11 = *(_OWORD *)(v10 + 72);
        time1.epoch = *(_QWORD *)(v10 + 88);
        *(_OWORD *)&time1.value = v11;
        *(_OWORD *)&time2.value = v12;
        time2.epoch = v9;
        result = CMTimeCompare(&time1, &time2);
        if ((_DWORD)result)
        {
          ++v4;
        }
        else
        {
          result = DeleteEditsFromTrack((uint64_t)v5, v4, 1);
          if ((_DWORD)result)
            return result;
          --v3;
        }
      }
      while (v4 <= v3);
    }
  }
  return result;
}

uint64_t FigMutableCompositionGetClassID()
{
  MEMORY[0x19402F294](&FigMutableCompositionGetClassID_sRegisterFigMutableCompositionBaseTypeOnce, RegisterFigMutableCompositionBaseType);
  return sFigMutableCompositionClassID;
}

uint64_t RegisterFigMutableCompositionBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigMutableCompositionGetTypeID()
{
  MEMORY[0x19402F294](&FigMutableCompositionGetClassID_sRegisterFigMutableCompositionBaseTypeOnce, RegisterFigMutableCompositionBaseType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigMutableCompositionCreate(const __CFAllocator *a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t DerivedStorage;
  _QWORD *v9;
  _QWORD *v10;
  const CFDictionaryValueCallBacks *v11;
  _QWORD *v13;

  v13 = 0;
  MEMORY[0x19402F294](&FigMutableCompositionGetClassID_sRegisterFigMutableCompositionBaseTypeOnce, RegisterFigMutableCompositionBaseType);
  v7 = CMDerivedObjectCreate();
  if (!(_DWORD)v7)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v9 = malloc_type_calloc(0x30uLL, 1uLL, 0x11650DE8uLL);
    *(_DWORD *)v9 = 1;
    v9[2] = 0;
    v9[3] = 0;
    v9[4] = FigSimpleMutexCreate();
    v9[5] = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v13 = v9;
    v9[1] = a2;
    if (a2)
      CFRetain(a2);
    v10 = malloc_type_calloc(0xA8uLL, 1uLL, 0x92C34DB9uLL);
    *v10 = 0x100000001;
    v10[1] = FigSimpleMutexCreate();
    v10[2] = 0;
    *((_DWORD *)v10 + 6) = 1;
    v10[4] = 0;
    v10[5] = CFBagCreateMutable(a1, 0, MEMORY[0x1E0C9B388]);
    v10[7] = FigSimpleMutexCreate();
    v11 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    v10[8] = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v10[9] = FigSimpleMutexCreate();
    *((_OWORD *)v10 + 5) = 0u;
    *((_OWORD *)v10 + 6) = 0u;
    v10[14] = 0;
    v10[15] = FigSimpleMutexCreate();
    v10[16] = 64;
    v10[17] = malloc_type_calloc(0x40uLL, 0x10uLL, 0x1060040C2E02434uLL);
    v10[18] = 1;
    v10[19] = CFDictionaryCreateMutable(a1, 0, 0, v11);
    v10[20] = v9;
    FigAtomicIncrement32();
    *(_QWORD *)(DerivedStorage + 8) = v10;
    *a4 = 0;
  }
  compositionSharedCache_releaseAndClear(&v13);
  return v7;
}

void compositionSharedCache_releaseAndClear(_QWORD **a1)
{
  _QWORD *v1;
  const void *v2;
  const void *v3;
  __CFDictionary *v4;
  const void *v5;

  v1 = *a1;
  *a1 = 0;
  if (v1 && !FigAtomicDecrement32())
  {
    v2 = (const void *)v1[1];
    if (v2)
    {
      CFRelease(v2);
      v1[1] = 0;
    }
    v1[2] = 0;
    v3 = (const void *)v1[3];
    if (v3)
    {
      CFRelease(v3);
      v1[3] = 0;
    }
    if (v1[4])
    {
      FigSimpleMutexDestroy();
      v1[4] = 0;
    }
    v4 = (__CFDictionary *)v1[5];
    if (v4)
    {
      CFDictionaryRemoveAllValues(v4);
      v5 = (const void *)v1[5];
      if (v5)
        CFRelease(v5);
    }
    free(v1);
  }
}

CFStringRef FigMutableCompositionCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigMutableComposition %p]"), a1);
}

void mutableComposition_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v1 = *(const void **)(DerivedStorage + 24);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  compositionTable_releaseAndClear((uint64_t *)(DerivedStorage + 8));
}

__CFString *mutableComposition_CopyDebugDescription()
{
  uint64_t DerivedStorage;
  __CFString *Mutable;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __CFString *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v2 = *(_QWORD *)(DerivedStorage + 8);
  v3 = *(_QWORD *)(v2 + 32);
  CFStringAppend(Mutable, CFSTR("[FigMutableComposition]{\n"));
  if (*(uint64_t *)(v2 + 16) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = compositionTableTrack_CopyDebugDescription(v3);
      if (v4)
        CFStringAppend(Mutable, CFSTR(",\n"));
      CFStringAppend(Mutable, CFSTR("  "));
      CFStringAppend(Mutable, v5);
      if (v5)
        CFRelease(v5);
      ++v4;
      v3 += 168;
    }
    while (v4 < *(_QWORD *)(v2 + 16));
  }
  CFStringAppend(Mutable, CFSTR("\n}"));
  return Mutable;
}

uint64_t mutableComposition_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t *v8;
  uint64_t v9;
  const void *v10;
  const __CFDictionary *v11;
  uint64_t result;
  const __CFDictionary *v13;
  uint64_t v14;
  const __CFDictionary *MutableCopy;
  CFIndex Count;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v8 = (uint64_t *)DerivedStorage;
  v9 = *(_QWORD *)(DerivedStorage + 8);
  if (CFEqual(a2, CFSTR("MutableComposition_ByteStreamProvider")))
  {
    v10 = *(const void **)(*(_QWORD *)(v8[1] + 160) + 8);
    if (v10)
    {
LABEL_4:
      v11 = (const __CFDictionary *)CFRetain(v10);
LABEL_8:
      v13 = v11;
LABEL_12:
      result = 0;
      *a4 = v13;
      return result;
    }
LABEL_11:
    v13 = 0;
    goto LABEL_12;
  }
  if (CFEqual(a2, CFSTR("MutableComposition_AssetCreationFlags")))
  {
    v11 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, (const void *)(*(_QWORD *)(v8[1] + 160) + 16));
    goto LABEL_8;
  }
  if (CFEqual(a2, CFSTR("MutableComposition_AssetCreationOptions")))
  {
    v10 = *(const void **)(*(_QWORD *)(v8[1] + 160) + 24);
    if (v10)
      goto LABEL_4;
    goto LABEL_11;
  }
  if (CFEqual(a2, CFSTR("MutableComposition_Metadata")))
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(v9 + 72));
    *a4 = CFDictionaryCreateCopy(a3, *(CFDictionaryRef *)(v8[1] + 80));
    v14 = *(_QWORD *)(v9 + 72);
LABEL_19:
    MEMORY[0x19402EF04](v14);
    return 0;
  }
  if (CFEqual(a2, CFSTR("MutableComposition_TrackReferenceDictionary")))
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(v9 + 8));
    MutableCopy = *(const __CFDictionary **)(v9 + 48);
    if (MutableCopy)
    {
      Count = CFDictionaryGetCount(MutableCopy);
      MutableCopy = CFDictionaryCreateMutableCopy(a3, Count, *(CFDictionaryRef *)(v9 + 48));
    }
    *a4 = MutableCopy;
    v14 = *(_QWORD *)(v9 + 8);
    goto LABEL_19;
  }
  if (CFEqual(a2, CFSTR("MediaSelectionArray")))
    return FigCreateMediaSelectionArrayFromFormatReaderProperties(*v8, 1, 0, a4);
  else
    return 4294954512;
}

uint64_t mutableComposition_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  const __CFAllocator *v8;
  __CFDictionary *Mutable;
  CFTypeID v10;
  uint64_t v11;
  CFTypeID v13;
  uint64_t v14;
  const void *v15;
  CFTypeID v16;
  CFDictionaryRef Copy;
  _QWORD *v18;
  CFTypeID v19;
  int64_t v20;
  const void **v21;
  const void **v22;
  void *v23;
  const __CFString *v24;
  const void *v25;
  CFTypeID v26;
  CFTypeID v28;
  CFIndex v29;
  CFIndex v30;
  CFIndex v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  int v36;
  uint64_t v37;
  CFTypeID v38;
  CFIndex Count;
  CFIndex v40;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v42;
  CFTypeID v43;
  const void *v44;
  const void *v45;
  const void *v46;
  const __CFDictionary *v47;
  const void *v48;
  const void *v49;
  const void *v50;
  const void *v51;
  const void *v52;
  char v53;
  void *value;
  void *valuea;
  const void **key;
  uint64_t valuePtr;
  int v58;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  v7 = *(_QWORD *)(DerivedStorage + 8);
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!CFEqual(a2, CFSTR("MutableComposition_AssetCreationFlags")))
  {
    if (CFEqual(a2, CFSTR("MutableComposition_AssetCreationOptions")))
    {
      if (a3)
      {
        v13 = CFGetTypeID(a3);
        if (v13 != CFDictionaryGetTypeID())
        {
LABEL_48:
          v11 = 0;
          goto LABEL_49;
        }
        v14 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 160);
        v15 = *(const void **)(v14 + 24);
        *(_QWORD *)(v14 + 24) = a3;
        CFRetain(a3);
      }
      else
      {
        v37 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 160);
        v15 = *(const void **)(v37 + 24);
        *(_QWORD *)(v37 + 24) = 0;
      }
      if (v15)
        CFRelease(v15);
      goto LABEL_48;
    }
    if (!CFEqual(a2, CFSTR("MutableComposition_TrackReferenceDictionary")))
    {
      if (!CFEqual(a2, CFSTR("MutableComposition_Metadata")))
      {
        v11 = 4294954512;
        goto LABEL_49;
      }
      if (a3)
      {
        v38 = CFGetTypeID(a3);
        if (v38 == CFArrayGetTypeID())
        {
          Count = CFArrayGetCount((CFArrayRef)a3);
          MEMORY[0x19402EEEC](*(_QWORD *)(v7 + 72));
          if (Count >= 1)
          {
            v40 = 0;
            valuea = (void *)*MEMORY[0x1E0C9AE50];
            do
            {
              ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)a3, v40);
              if (ValueAtIndex)
              {
                v42 = ValueAtIndex;
                v43 = CFGetTypeID(ValueAtIndex);
                if (v43 == CFDictionaryGetTypeID())
                {
                  v44 = CFDictionaryGetValue(v42, CFSTR("format"));
                  v45 = CFDictionaryGetValue(v42, CFSTR("items"));
                  if (v44)
                  {
                    v46 = v45;
                    if (v45)
                    {
                      v47 = *(const __CFDictionary **)(v7 + 80);
                      if (!v47)
                      {
                        v47 = CFDictionaryCreateMutable(v8, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                        *(_QWORD *)(v7 + 80) = v47;
                      }
                      CFDictionaryGetValue(v47, v44);
                      if (!FigCFEqual())
                      {
                        CFDictionarySetValue(Mutable, v44, valuea);
                        CFDictionarySetValue(Mutable, CFSTR("MetadataReaderTypes"), valuea);
                        CFDictionarySetValue(Mutable, CFSTR("MetadataReaders"), valuea);
                        if (FigCFEqual())
                        {
                          v48 = *(const void **)(v7 + 96);
                          if (v48)
                          {
                            CFRelease(v48);
                            *(_QWORD *)(v7 + 96) = 0;
                          }
                        }
                        if (FigCFEqual())
                        {
                          v49 = *(const void **)(v7 + 104);
                          if (v49)
                          {
                            CFRelease(v49);
                            *(_QWORD *)(v7 + 104) = 0;
                          }
                        }
                        if (FigCFEqual())
                        {
                          v50 = *(const void **)(v7 + 88);
                          if (v50)
                          {
                            CFRelease(v50);
                            *(_QWORD *)(v7 + 88) = 0;
                          }
                        }
                        if (FigCFEqual())
                        {
                          v51 = *(const void **)(v7 + 112);
                          if (v51)
                          {
                            CFRelease(v51);
                            *(_QWORD *)(v7 + 112) = 0;
                          }
                        }
                      }
                      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v7 + 80), v44, v46);
                    }
                  }
                }
              }
              ++v40;
            }
            while (Count != v40);
          }
          MEMORY[0x19402EF04](*(_QWORD *)(v7 + 72));
        }
      }
      goto LABEL_48;
    }
    if (a3)
    {
      v16 = CFGetTypeID(a3);
      if (v16 != CFDictionaryGetTypeID())
      {
        v11 = FigSignalErrorAt();
        goto LABEL_49;
      }
      Copy = CFDictionaryCreateCopy(v8, (CFDictionaryRef)a3);
      v18 = (_QWORD *)(v7 + 8);
      MEMORY[0x19402EEEC](*(_QWORD *)(v7 + 8));
      if (Copy)
      {
        v19 = CFGetTypeID(Copy);
        if (v19 != CFDictionaryGetTypeID())
        {
          LOBYTE(v24) = 0;
          v21 = 0;
          v22 = 0;
          v11 = 4294954516;
          goto LABEL_91;
        }
        v20 = CFDictionaryGetCount(Copy);
        v21 = (const void **)malloc_type_calloc(v20, 8uLL, 0x6004044C4A2DFuLL);
        if (v21)
        {
          v22 = (const void **)malloc_type_calloc(v20, 8uLL, 0x6004044C4A2DFuLL);
          if (v22)
          {
            CFDictionaryGetKeysAndValues(Copy, v21, v22);
            if (v20 < 1)
            {
              v11 = 0;
              LOBYTE(v24) = 1;
            }
            else
            {
              v23 = 0;
              value = (void *)v20;
              key = v21;
              while (1)
              {
                v24 = (const __CFString *)v21[(_QWORD)v23];
                if (!v24)
                  break;
                v25 = v22[(_QWORD)v23];
                v26 = CFGetTypeID(v21[(_QWORD)v23]);
                if (v26 != CFStringGetTypeID() || v25 == 0)
                  goto LABEL_88;
                v28 = CFGetTypeID(v25);
                if (v28 != CFArrayGetTypeID())
                  goto LABEL_88;
                if (!GetTrackReferenceOSTypeFromKeyString(v24))
                  goto LABEL_88;
                v29 = CFArrayGetCount((CFArrayRef)v25);
                v30 = v29;
                if ((v29 & 1) != 0)
                  goto LABEL_88;
                if (v29 >= 1)
                {
                  v31 = 0;
                  while (1)
                  {
                    LODWORD(valuePtr) = 0;
                    v58 = 0;
                    if (!FigCFArrayGetInt32AtIndex())
                      break;
                    if (!FigCFArrayGetInt32AtIndex())
                      break;
                    v32 = *(_QWORD *)(v7 + 16);
                    if (v32 < 1)
                      break;
                    v33 = *(_QWORD *)(v7 + 16);
                    v34 = *(_QWORD *)(v7 + 32);
                    while (*(_DWORD *)(v34 + 4) != (_DWORD)valuePtr)
                    {
                      v34 += 168;
                      if (!--v33)
                      {
                        v34 = 0;
                        break;
                      }
                    }
                    v35 = (int *)(*(_QWORD *)(v7 + 32) + 4);
                    while (1)
                    {
                      v36 = *v35;
                      v35 += 42;
                      if (v36 == v58)
                        break;
                      if (!--v32)
                        goto LABEL_88;
                    }
                    if (!v34)
                      break;
                    v31 += 2;
                    if (v31 >= v30)
                      goto LABEL_43;
                  }
LABEL_88:
                  LOBYTE(v24) = 0;
                  break;
                }
LABEL_43:
                v23 = (char *)v23 + 1;
                LOBYTE(v24) = 1;
                v21 = key;
                if (v23 == value)
                {
                  v11 = 0;
                  goto LABEL_91;
                }
              }
              v11 = 4294954516;
              v21 = key;
            }
LABEL_91:
            free(v21);
            free(v22);
            if ((v24 & 1) == 0)
            {
              MEMORY[0x19402EF04](*v18);
LABEL_95:
              CFRelease(Copy);
LABEL_96:
              CFDictionarySetValue(Mutable, CFSTR("TrackReferenceDictionary"), (const void *)*MEMORY[0x1E0C9AE50]);
              goto LABEL_49;
            }
            v52 = *(const void **)(v7 + 48);
            *(_QWORD *)(v7 + 48) = Copy;
            CFRetain(Copy);
            v53 = 0;
            if (!v52)
            {
LABEL_82:
              MEMORY[0x19402EF04](*v18);
              v11 = 0;
              if ((v53 & 1) != 0)
                goto LABEL_96;
              goto LABEL_95;
            }
LABEL_81:
            CFRelease(v52);
            goto LABEL_82;
          }
          LOBYTE(v24) = 0;
        }
        else
        {
          LOBYTE(v24) = 0;
          v22 = 0;
        }
        v11 = 4294954510;
        goto LABEL_91;
      }
    }
    else
    {
      v18 = (_QWORD *)(v7 + 8);
      MEMORY[0x19402EEEC](*(_QWORD *)(v7 + 8));
    }
    Copy = 0;
    v52 = *(const void **)(v7 + 48);
    *(_QWORD *)(v7 + 48) = 0;
    v53 = 1;
    if (!v52)
      goto LABEL_82;
    goto LABEL_81;
  }
  if (!a3)
    goto LABEL_48;
  v10 = CFGetTypeID(a3);
  if (v10 != CFNumberGetTypeID())
    goto LABEL_48;
  valuePtr = 0;
  CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt64Type, &valuePtr);
  v11 = 0;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) + 160) + 16) = valuePtr;
LABEL_49:
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (Mutable)
    CFRelease(Mutable);
  return v11;
}

void compositionTable_releaseAndClear(uint64_t *a1)
{
  uint64_t v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  uint64_t *v7;
  uint64_t v8;
  __CFBag *v9;
  const void *v10;
  const void *v11;
  __CFDictionary *v12;
  const void *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __CFDictionary *v18;
  const void *v19;

  v1 = *a1;
  *a1 = 0;
  if (v1 && !FigAtomicDecrement32())
  {
    if (*(_QWORD *)(v1 + 8))
    {
      FigSimpleMutexDestroy();
      *(_QWORD *)(v1 + 8) = 0;
    }
    if (*(_QWORD *)(v1 + 72))
    {
      FigSimpleMutexDestroy();
      *(_QWORD *)(v1 + 72) = 0;
    }
    v2 = *(const void **)(v1 + 80);
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)(v1 + 80) = 0;
    }
    v3 = *(const void **)(v1 + 88);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(v1 + 88) = 0;
    }
    v4 = *(const void **)(v1 + 96);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(v1 + 96) = 0;
    }
    v5 = *(const void **)(v1 + 104);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(v1 + 104) = 0;
    }
    v6 = *(const void **)(v1 + 112);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(v1 + 112) = 0;
    }
    v7 = *(uint64_t **)(v1 + 32);
    if (v7)
    {
      if (*(uint64_t *)(v1 + 16) >= 1)
      {
        v8 = 0;
        do
        {
          compositionTableTrack_releaseAndClear(v1, v7);
          ++v8;
          v7 += 21;
        }
        while (v8 < *(_QWORD *)(v1 + 16));
        v7 = *(uint64_t **)(v1 + 32);
      }
      free(v7);
      *(_QWORD *)(v1 + 32) = 0;
    }
    v9 = *(__CFBag **)(v1 + 40);
    if (v9)
    {
      CFBagRemoveAllValues(v9);
      v10 = *(const void **)(v1 + 40);
      if (v10)
      {
        CFRelease(v10);
        *(_QWORD *)(v1 + 40) = 0;
      }
    }
    v11 = *(const void **)(v1 + 48);
    if (v11)
    {
      CFRelease(v11);
      *(_QWORD *)(v1 + 48) = 0;
    }
    if (*(_QWORD *)(v1 + 56))
    {
      FigSimpleMutexDestroy();
      *(_QWORD *)(v1 + 56) = 0;
    }
    v12 = *(__CFDictionary **)(v1 + 64);
    if (v12)
    {
      CFDictionaryRemoveAllValues(v12);
      v13 = *(const void **)(v1 + 64);
      if (v13)
      {
        CFRelease(v13);
        *(_QWORD *)(v1 + 64) = 0;
      }
    }
    if (*(_QWORD *)(v1 + 120))
    {
      FigSimpleMutexDestroy();
      *(_QWORD *)(v1 + 120) = 0;
    }
    v14 = *(char **)(v1 + 136);
    if (v14)
    {
      v15 = *(_QWORD *)(v1 + 144);
      if (v15 >= 2)
      {
        v16 = 1;
        v17 = 16;
        do
        {
          if (*(_QWORD *)&v14[v17])
          {
            CFRelease(*(CFTypeRef *)&v14[v17]);
            v14 = *(char **)(v1 + 136);
            v15 = *(_QWORD *)(v1 + 144);
            *(_QWORD *)&v14[v17] = 0;
          }
          ++v16;
          v17 += 16;
        }
        while (v16 < v15);
      }
      free(v14);
      *(_QWORD *)(v1 + 136) = 0;
    }
    v18 = *(__CFDictionary **)(v1 + 152);
    if (v18)
    {
      CFDictionaryRemoveAllValues(v18);
      v19 = *(const void **)(v1 + 152);
      if (v19)
      {
        CFRelease(v19);
        *(_QWORD *)(v1 + 152) = 0;
      }
    }
    compositionSharedCache_releaseAndClear((_QWORD **)(v1 + 160));
    free((void *)v1);
  }
}

void compositionTableTrack_releaseAndClear(uint64_t a1, uint64_t *a2)
{
  void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;

  compositionEditSegment_releaseSegmentsAndRemoveURLsFromBag(a2[2], a2[1], *(CFMutableBagRef *)(a1 + 40));
  v3 = (void *)a2[2];
  if (v3)
  {
    a2[2] = 0;
    free(v3);
  }
  v4 = (const void *)a2[4];
  if (v4)
  {
    CFRelease(v4);
    a2[4] = 0;
  }
  v5 = (const void *)a2[5];
  if (v5)
  {
    CFRelease(v5);
    a2[5] = 0;
  }
  v6 = (const void *)a2[6];
  if (v6)
  {
    CFRelease(v6);
    a2[6] = 0;
  }
  v7 = (const void *)a2[7];
  if (v7)
  {
    CFRelease(v7);
    a2[7] = 0;
  }
  v8 = (const void *)a2[8];
  if (v8)
  {
    CFRelease(v8);
    a2[8] = 0;
  }
  v9 = (const void *)a2[9];
  if (v9)
  {
    CFRelease(v9);
    a2[9] = 0;
  }
  v10 = (const void *)a2[15];
  if (v10)
  {
    CFRelease(v10);
    a2[15] = 0;
  }
  v11 = (const void *)a2[16];
  if (v11)
  {
    CFRelease(v11);
    a2[16] = 0;
  }
  v12 = (const void *)a2[17];
  if (v12)
  {
    CFRelease(v12);
    a2[17] = 0;
  }
  v13 = (const void *)a2[18];
  if (v13)
  {
    CFRelease(v13);
    a2[18] = 0;
  }
  v14 = (const void *)a2[19];
  if (v14)
  {
    CFRelease(v14);
    a2[19] = 0;
  }
  v15 = (const void *)a2[10];
  if (v15)
  {
    CFRelease(v15);
    a2[10] = 0;
  }
  v16 = (const void *)a2[11];
  if (v16)
  {
    CFRelease(v16);
    a2[11] = 0;
  }
  v17 = (const void *)a2[12];
  if (v17)
  {
    CFRelease(v17);
    a2[12] = 0;
  }
  v18 = (const void *)a2[13];
  if (v18)
  {
    CFRelease(v18);
    a2[13] = 0;
  }
  v19 = (const void *)a2[14];
  if (v19)
  {
    CFRelease(v19);
    a2[14] = 0;
  }
}

void compositionEditSegment_releaseSegmentsAndRemoveURLsFromBag(uint64_t a1, uint64_t a2, CFMutableBagRef theBag)
{
  uint64_t v3;
  const void **v5;

  if (a1)
  {
    v3 = a2;
    if (a2 >= 1)
    {
      v5 = (const void **)(a1 + 96);
      do
      {
        if ((*((_DWORD *)v5 - 21) & 0x1D) == 1)
        {
          if (theBag && *v5)
            CFBagRemoveValue(theBag, *v5);
          if (*v5)
          {
            CFRelease(*v5);
            *v5 = 0;
          }
        }
        v5 = (const void **)((char *)v5 + 108);
        --v3;
      }
      while (v3);
    }
  }
}

__CFString *compositionTableTrack_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  int v7;
  __int128 v8;
  Float64 Seconds;
  uint64_t v10;
  __int128 v11;
  Float64 v12;
  __int128 *v13;
  __int128 v14;
  Float64 v15;
  uint64_t v16;
  __int128 v17;
  Float64 v18;
  Float64 v19;
  uint64_t v20;
  __int128 v21;
  Float64 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  CMTime time;
  unsigned int v29;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v3 = *(unsigned int *)(a1 + 4);
  v29 = bswap32(*(_DWORD *)a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("{ trackID %d, mediaType %.4s, "), v3, &v29);
  CFStringAppendFormat(Mutable, 0, CFSTR("editCount %d"), *(_QWORD *)(a1 + 8));
  if (*(uint64_t *)(a1 + 8) >= 1)
  {
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = (__int128 *)(*(_QWORD *)(a1 + 16) + v4);
      v7 = *((_DWORD *)v6 + 3) & 0x1D;
      v6 += 3;
      v8 = *v6;
      time.epoch = *((_QWORD *)v6 + 2);
      *(_OWORD *)&time.value = v8;
      if (v7 == 1)
      {
        Seconds = CMTimeGetSeconds(&time);
        v10 = *(_QWORD *)(a1 + 16) + v4;
        v11 = *(_OWORD *)(v10 + 72);
        time.epoch = *(_QWORD *)(v10 + 88);
        *(_OWORD *)&time.value = v11;
        v12 = CMTimeGetSeconds(&time);
        v13 = (__int128 *)(*(_QWORD *)(a1 + 16) + v4);
        v14 = *v13;
        time.epoch = *((_QWORD *)v13 + 2);
        *(_OWORD *)&time.value = v14;
        v15 = CMTimeGetSeconds(&time);
        v16 = *(_QWORD *)(a1 + 16) + v4;
        v17 = *(_OWORD *)(v16 + 24);
        time.epoch = *(_QWORD *)(v16 + 40);
        *(_OWORD *)&time.value = v17;
        v18 = CMTimeGetSeconds(&time);
        CFStringAppendFormat(Mutable, 0, CFSTR(", [%1.3f,+%1.3f] -> [%1.3f,+%1.3f] of asset %@ trackID %d"), *(_QWORD *)&Seconds, *(_QWORD *)&v12, *(_QWORD *)&v15, *(_QWORD *)&v18, *(_QWORD *)(*(_QWORD *)(a1 + 16) + v4 + 96), *(unsigned int *)(*(_QWORD *)(a1 + 16) + v4 + 104));
      }
      else
      {
        v19 = CMTimeGetSeconds(&time);
        v20 = *(_QWORD *)(a1 + 16) + v4;
        v21 = *(_OWORD *)(v20 + 72);
        time.epoch = *(_QWORD *)(v20 + 88);
        *(_OWORD *)&time.value = v21;
        v23 = CMTimeGetSeconds(&time);
        CFStringAppendFormat(Mutable, 0, CFSTR(", [%1.3f,+%1.3f] -> empty"), *(_QWORD *)&v19, *(_QWORD *)&v23, v24, v25, v26, v27);
      }
      ++v5;
      v4 += 108;
    }
    while (v5 < *(_QWORD *)(a1 + 8));
  }
  CFStringAppendFormat(Mutable, 0, CFSTR(" }"));
  return Mutable;
}

uint64_t mutableComposition_CreateMutableCopy(const __CFAllocator *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((const __CFAllocator *)*MEMORY[0x1E0C9AE38] == a1)
    return 4294954516;
  v6 = DerivedStorage;
  if ((_UNKNOWN *)CMBaseObjectGetVTable() != &kMutableComposition_VTable)
    return FigSignalErrorAt();
  MEMORY[0x19402F294](&FigMutableCompositionGetClassID_sRegisterFigMutableCompositionBaseTypeOnce, RegisterFigMutableCompositionBaseType);
  result = CMDerivedObjectCreate();
  if (!(_DWORD)result)
  {
    v8 = CMBaseObjectGetDerivedStorage();
    compositionTable_createCopy(a1, *(_QWORD *)(v6 + 8), (_QWORD *)(v8 + 8));
    result = 0;
    *a3 = 0;
  }
  return result;
}

uint64_t mutableComposition_CopyFormatReader(const void *a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v8;
  uint64_t v9;
  uint64_t v10;
  CFTypeRef v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = CFGetAllocator(a1);
  if (a2 || !*(_QWORD *)DerivedStorage)
  {
    FigFormatReaderGetClassID();
    v9 = CMDerivedObjectCreate();
    if ((_DWORD)v9)
      return v9;
    v10 = CMBaseObjectGetDerivedStorage();
    if (a2)
    {
      compositionTable_createCopy((const __CFAllocator *)*MEMORY[0x1E0C9AE38], *(_QWORD *)(DerivedStorage + 8), (_QWORD *)v10);
    }
    else
    {
      *(_QWORD *)v10 = *(_QWORD *)(DerivedStorage + 8);
      FigAtomicIncrement32();
      *(_QWORD *)DerivedStorage = CFRetain(0);
    }
    *(_QWORD *)(v10 + 8) = FigSimpleMutexCreate();
    *(_QWORD *)(v10 + 16) = CFDictionaryCreateMutable(v8, 0, 0, MEMORY[0x1E0C9B3A0]);
    *(_BYTE *)(v10 + 24) = a2 == 0;
    v11 = 0;
  }
  else
  {
    v11 = CFRetain(*(CFTypeRef *)DerivedStorage);
  }
  v9 = 0;
  *a4 = v11;
  return v9;
}

uint64_t mutableComposition_GetTrackCompatibleWithAssetTrack(uint64_t a1, const void *a2, uint64_t a3, _DWORD *a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  CFTypeRef v10;
  uint64_t (*v11)(CFTypeRef, uint64_t, CFTypeRef *, int *);
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t FigBaseObject;
  uint64_t (*v16)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  int v17;
  CFTypeRef v18;
  uint64_t CompatibleTrackForFormatDescriptionArrayAndMediaType;
  int v20;
  uint64_t v21;
  int v23;
  CFTypeRef v24;
  CFTypeRef v25;
  CFTypeRef cf;

  v7 = *(_QWORD **)(CMBaseObjectGetDerivedStorage() + 8);
  v24 = 0;
  v25 = 0;
  v23 = 0;
  if (!a2)
  {
    v21 = 4294954516;
    goto LABEL_17;
  }
  v8 = *MEMORY[0x1E0C9AE00];
  v9 = compositionSharedCache_copyFormatReaderForAssetURL(v7[20], a2, (const __CFAllocator *)*MEMORY[0x1E0C9AE00], (uint64_t)&v25);
  if (!(_DWORD)v9)
  {
    MEMORY[0x19402EEEC](v7[1]);
    v10 = v25;
    v11 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 56);
    if (!v11)
    {
      v21 = 4294954514;
LABEL_14:
      MEMORY[0x19402EF04](v7[1]);
      goto LABEL_15;
    }
    v12 = v11(v10, a3, &v24, &v23);
    if ((_DWORD)v12)
    {
      v21 = v12;
      goto LABEL_14;
    }
    v13 = v7[2];
    v14 = v23;
    cf = 0;
    FigBaseObject = FigTrackReaderGetFigBaseObject(v24);
    v16 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
    if (!v16)
    {
LABEL_13:
      v21 = 4294954453;
      goto LABEL_14;
    }
    v17 = v16(FigBaseObject, CFSTR("TrackFormatDescriptionArray"), v8, &cf);
    v18 = cf;
    if (v17)
    {
      CompatibleTrackForFormatDescriptionArrayAndMediaType = -1;
      if (!cf)
      {
LABEL_9:
        if ((CompatibleTrackForFormatDescriptionArrayAndMediaType & 0x8000000000000000) == 0)
        {
          v20 = *(_DWORD *)(v7[4] + 168 * CompatibleTrackForFormatDescriptionArrayAndMediaType + 4);
          MEMORY[0x19402EF04](v7[1]);
          v21 = 0;
          if (a4)
            *a4 = v20;
          goto LABEL_15;
        }
        goto LABEL_13;
      }
    }
    else
    {
      CompatibleTrackForFormatDescriptionArrayAndMediaType = compositionTable_findCompatibleTrackForFormatDescriptionArrayAndMediaType((uint64_t)v7, 0, v13, cf, v14);
      v18 = cf;
      if (!cf)
        goto LABEL_9;
    }
    CFRelease(v18);
    goto LABEL_9;
  }
  v21 = v9;
LABEL_15:
  if (v24)
    CFRelease(v24);
LABEL_17:
  if (v25)
    CFRelease(v25);
  return v21;
}

uint64_t mutableComposition_AddTrack(uint64_t a1, int a2, uint64_t a3, int a4, _DWORD *a5)
{
  _QWORD *DerivedStorage;
  uint64_t v9;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v9 = DerivedStorage[1];
  MEMORY[0x19402EEEC](*(_QWORD *)(v9 + 8));
  compositionTable_addTrack(v9, a2, a4, a5, 0);
  ++*(_DWORD *)(v9 + 4);
  MEMORY[0x19402EF04](*(_QWORD *)(v9 + 8));
  if (*DerivedStorage)
    mutableComposition_postPossiblyDeferredTracksChangedNotification();
  return 0;
}

void mutableComposition_DeleteTrack(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFDictionary *Mutable;
  int64_t Count;
  const void **v10;
  uint64_t v11;
  int64_t v12;
  const void *v13;
  const __CFArray *v14;
  CFMutableArrayRef v15;
  CFIndex v16;
  CFIndex v17;
  CFIndex v18;
  CFIndex v19;
  uint64_t v20;
  uint64_t v21;
  const void **v22;
  const __CFAllocator *v23;
  void **keys;

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  MEMORY[0x19402EEEC](*(_QWORD *)(v3 + 8));
  v4 = *(_QWORD *)(v3 + 16);
  if (v4 < 1)
  {
LABEL_5:
    FigSignalErrorAt();
    goto LABEL_38;
  }
  v5 = *(_QWORD *)(v3 + 32);
  v6 = -v4;
  v7 = 1;
  while (*(_DWORD *)(v5 + 4) != a2)
  {
    v5 += 168;
    ++v7;
    if (v6 + v7 == 1)
      goto LABEL_5;
  }
  if (!*(_QWORD *)(v3 + 48))
  {
LABEL_35:
    compositionTableTrack_releaseAndClear(v3, (uint64_t *)v5);
    v20 = *(_QWORD *)(v3 + 16);
    if (v20 > v7)
    {
      memmove((void *)v5, (const void *)(v5 + 168), 168 * (v20 - v7));
      v20 = *(_QWORD *)(v3 + 16);
    }
    *(_QWORD *)(v3 + 16) = v20 - 1;
    *(_DWORD *)(v3 + 4) += 2;
LABEL_38:
    MEMORY[0x19402EF04](*(_QWORD *)(v3 + 8));
    compositionTable_discardUnusedAssets(v3);
  }
  v23 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B3A0]);
  Count = CFDictionaryGetCount(*(CFDictionaryRef *)(v3 + 48));
  keys = (void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
  if (!keys)
  {
    v10 = 0;
    if (!Mutable)
      goto LABEL_34;
    goto LABEL_33;
  }
  v10 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
  if (v10)
  {
    v21 = v3;
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(v3 + 48), (const void **)keys, v10);
    if (Count < 1)
    {
LABEL_23:
      if (!CFDictionaryGetCount(Mutable))
      {
        v3 = v21;
        if (!Mutable)
          goto LABEL_34;
        goto LABEL_33;
      }
      v3 = v21;
      v15 = *(CFMutableArrayRef *)(v21 + 48);
      *(_QWORD *)(v21 + 48) = Mutable;
      if (Mutable)
        CFRetain(Mutable);
      if (!v15)
        goto LABEL_32;
      goto LABEL_31;
    }
    v11 = 0;
    v22 = v10;
    while (1)
    {
      v12 = Count;
      v13 = keys[v11];
      v14 = (const __CFArray *)v10[v11];
      v15 = CFArrayCreateMutable(v23, 0, MEMORY[0x1E0C9B378]);
      v16 = CFArrayGetCount(v14);
      if (v16 >= 1)
        break;
LABEL_20:
      if (v15)
        CFRelease(v15);
      ++v11;
      Count = v12;
      v10 = v22;
      if (v11 == v12)
        goto LABEL_23;
    }
    v17 = v16;
    v18 = 0;
    while (FigCFArrayGetInt32AtIndex())
    {
      v19 = v18 + 1;
      if (!FigCFArrayGetInt32AtIndex())
        break;
      if (*(_DWORD *)(v5 + 4))
      {
        FigCFArrayAppendInt32();
        FigCFArrayAppendInt32();
        if (v15)
        {
          if (CFArrayGetCount(v15))
            CFDictionarySetValue(Mutable, v13, v15);
        }
      }
      v18 = v19 + 1;
      if (v18 >= v17)
        goto LABEL_20;
    }
    v10 = v22;
    v3 = v21;
    if (v15)
LABEL_31:
      CFRelease(v15);
  }
LABEL_32:
  if (!Mutable)
  {
LABEL_34:
    free(keys);
    free(v10);
    goto LABEL_35;
  }
LABEL_33:
  CFRelease(Mutable);
  goto LABEL_34;
}

uint64_t mutableComposition_SetTrackEditList(uint64_t a1, int a2, uint64_t a3, const void *a4)
{
  uint64_t DerivedStorage;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _OWORD *v30;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3 < 0)
    return FigSignalErrorAt();
  v8 = (_QWORD *)DerivedStorage;
  v9 = *(_QWORD *)(DerivedStorage + 8);
  result = compositionEditSegment_validateSegments((uint64_t)a4, a3, 1);
  if (!(_DWORD)result)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(v9 + 8));
    v11 = *(_QWORD *)(v9 + 16);
    if (v11 < 1)
    {
LABEL_7:
      FigSignalErrorAt();
      v13 = 0;
    }
    else
    {
      v12 = (uint64_t *)(*(_QWORD *)(v9 + 32) + 16);
      while (*((_DWORD *)v12 - 3) != a2)
      {
        v12 += 21;
        if (!--v11)
          goto LABEL_7;
      }
      compositionEditSegment_releaseSegmentsAndRemoveURLsFromBag(*v12, *(v12 - 1), *(CFMutableBagRef *)(v9 + 40));
      if (v12[1] < a3)
      {
        free((void *)*v12);
        *v12 = (uint64_t)malloc_type_calloc(a3, 0x6CuLL, 0x1060040CB727B4DuLL);
        v12[1] = a3;
      }
      *(v12 - 1) = a3;
      if (a3 >= 1)
      {
        compositionEditSegment_copySegmentsAndAddURLsToBag((CFTypeRef *)*v12, a4, a3, *(__CFBag **)(v9 + 40));
        v14 = a3 - 1;
        if (a3 == 1)
        {
          v15 = *(v12 - 1);
        }
        else
        {
          v16 = (__int128 *)*v12;
          *(v12 - 1) = 0;
          v17 = v16;
          do
          {
            v18 = (__int128 *)((char *)v16 + 108);
            if (!compositionEditSegment_combineEditSegmentsIfPossible((uint64_t)v16, (uint64_t)v16 + 108, (uint64_t)v16 + 108, *(__CFBag **)(v9 + 40)))
            {
              if (v16 != v17)
              {
                v19 = *v16;
                v20 = v16[2];
                v17[1] = v16[1];
                v17[2] = v20;
                *v17 = v19;
                v21 = v16[3];
                v22 = v16[4];
                v23 = v16[5];
                *(__int128 *)((char *)v17 + 92) = *(__int128 *)((char *)v16 + 92);
                v17[4] = v22;
                v17[5] = v23;
                v17[3] = v21;
                v16[2] = 0u;
                v16[3] = 0u;
                v16[4] = 0u;
                v16[5] = 0u;
                *(__int128 *)((char *)v16 + 92) = 0u;
                *v16 = 0u;
                v16[1] = 0u;
              }
              v17 = (__int128 *)((char *)v17 + 108);
              ++*(v12 - 1);
            }
            v16 = (__int128 *)((char *)v16 + 108);
            --v14;
          }
          while (v14);
          if (v18 != v17)
          {
            v24 = *v18;
            v25 = v18[2];
            v17[1] = v18[1];
            v17[2] = v25;
            *v17 = v24;
            v26 = v18[3];
            v27 = v18[4];
            v28 = v18[5];
            *(__int128 *)((char *)v17 + 92) = *(__int128 *)((char *)v18 + 92);
            v17[4] = v27;
            v17[5] = v28;
            v17[3] = v26;
            v18[2] = 0u;
            v18[3] = 0u;
            v18[4] = 0u;
            v18[5] = 0u;
            *(__int128 *)((char *)v18 + 92) = 0u;
            *v18 = 0u;
            v18[1] = 0u;
          }
          v15 = *(v12 - 1) + 1;
          *(v12 - 1) = v15;
        }
        if (v15 >= 1)
        {
          v29 = *v12 + 108 * v15;
          if ((*(_DWORD *)(v29 - 96) & 0x1D) != 1)
          {
            v30 = (_OWORD *)(v29 - 108);
            *(_OWORD *)((char *)v30 + 92) = 0u;
            v30[4] = 0u;
            v30[5] = 0u;
            v30[2] = 0u;
            v30[3] = 0u;
            *v30 = 0u;
            v30[1] = 0u;
            --*(v12 - 1);
          }
        }
      }
      ++*(_DWORD *)(v9 + 4);
      v13 = 1;
    }
    MEMORY[0x19402EF04](*(_QWORD *)(v9 + 8));
    if (v13)
    {
      if (*v8)
        mutableComposition_postPossiblyDeferredTracksChangedNotification();
    }
    compositionTable_discardUnusedAssets(v9);
  }
  return result;
}

uint64_t mutableComposition_CopyTrackEditList(uint64_t a1, int a2, _QWORD *a3, uint64_t a4, CFTypeRef *a5)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFTypeRef *v15;

  v9 = *(_QWORD **)(CMBaseObjectGetDerivedStorage() + 8);
  MEMORY[0x19402EEEC](v9[1]);
  v10 = v9[2];
  if (v10 >= 1)
  {
    v11 = v9[4] + 8;
    while (*(_DWORD *)(v11 - 4) != a2)
    {
      v11 += 168;
      if (!--v10)
        goto LABEL_5;
    }
    if (a3)
      *a3 = *(_QWORD *)v11;
    if (!a5)
      goto LABEL_17;
    v13 = *(_QWORD *)v11;
    if (*(_QWORD *)v11 <= a4)
    {
      if (v13 >= 1)
      {
        memcpy(a5, *(const void **)(v11 + 8), 108 * v13);
        v13 = *(_QWORD *)v11;
        if (*(uint64_t *)v11 >= 1)
        {
          v14 = 0;
          v15 = a5 + 12;
          do
          {
            if (*v15)
            {
              CFRetain(*v15);
              v13 = *(_QWORD *)v11;
            }
            ++v14;
            v15 = (CFTypeRef *)((char *)v15 + 108);
          }
          while (v14 < v13);
        }
      }
      bzero((char *)a5 + 108 * v13, 108 * (a4 - v13));
LABEL_17:
      v12 = 0;
      goto LABEL_18;
    }
  }
LABEL_5:
  v12 = FigSignalErrorAt();
LABEL_18:
  MEMORY[0x19402EF04](v9[1]);
  return v12;
}

uint64_t mutableComposition_AddFormatReaderForURL(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CFAllocatorRef v10;
  void *v11;
  void *value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    if (a3)
    {
      v6 = *(_QWORD *)(DerivedStorage + 8);
      if ((_UNKNOWN *)CMBaseObjectGetVTable() != &kComposite_FormatReader_VTable)
      {
        v7 = *(_QWORD *)(v6 + 160);
        value = 0;
        MEMORY[0x19402EEEC](*(_QWORD *)(v7 + 32));
        if (CFDictionaryContainsKey(*(CFDictionaryRef *)(v7 + 40), a2))
        {
          v8 = 0;
        }
        else
        {
          v10 = CFGetAllocator(a3);
          v8 = FigAssetCreateWithFormatReader((uint64_t)v10, a3, 0, 0, &value);
          if (value)
          {
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(v7 + 40), a2, value);
            v11 = value;
            MEMORY[0x19402EF04](*(_QWORD *)(v7 + 32));
            if (v11)
            {
              MEMORY[0x19402EEEC](*(_QWORD *)(v6 + 56));
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(v6 + 64), a2, v11);
              MEMORY[0x19402EF04](*(_QWORD *)(v6 + 56));
              CFRelease(v11);
            }
            return v8;
          }
        }
        MEMORY[0x19402EF04](*(_QWORD *)(v7 + 32));
        return v8;
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t mutableComposition_CopyTrackProperty(uint64_t a1, int a2, const void *a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef v12;
  CFTypeRef *v14;

  v8 = *(_QWORD **)(CMBaseObjectGetDerivedStorage() + 8);
  MEMORY[0x19402EEEC](v8[1]);
  v9 = v8[2];
  if (v9 >= 1)
  {
    v10 = v8[4] + 104;
    while (*(_DWORD *)(v10 - 100) != a2)
    {
      v10 += 168;
      if (!--v9)
        goto LABEL_5;
    }
    if (CFEqual(a3, CFSTR("MutableCompositionTrack_NaturalTimeScale")) || CFEqual(a3, CFSTR("TrackTimescale")))
    {
      v12 = *(CFTypeRef *)(v10 - 72);
      if (!v12)
      {
LABEL_10:
        v11 = 0;
        *a5 = v12;
        goto LABEL_11;
      }
    }
    else if (CFEqual(a3, CFSTR("MutableCompositionTrack_LanguageCode")) || CFEqual(a3, CFSTR("TrackLanguageCode")))
    {
      v12 = *(CFTypeRef *)(v10 - 64);
      if (!v12)
        goto LABEL_10;
    }
    else if (CFEqual(a3, CFSTR("MutableCompositionTrack_AlternateGroupID"))
           || CFEqual(a3, CFSTR("AlternateGroupID"))
           || CFEqual(a3, CFSTR("MutableCompositionTrack_AlternateGroupID")))
    {
      v12 = *(CFTypeRef *)v10;
      if (!*(_QWORD *)v10)
        goto LABEL_10;
    }
    else if (CFEqual(a3, CFSTR("MutableCompositionTrack_ExtendedLanguageTag"))
           || CFEqual(a3, CFSTR("ExtendedLanguageTagString")))
    {
      v12 = *(CFTypeRef *)(v10 - 56);
      if (!v12)
        goto LABEL_10;
    }
    else if (CFEqual(a3, CFSTR("MutableCompositionTrack_PreferredTransform")) || CFEqual(a3, CFSTR("TrackMatrix")))
    {
      v12 = *(CFTypeRef *)(v10 - 48);
      if (!v12)
        goto LABEL_10;
    }
    else if (CFEqual(a3, CFSTR("MutableCompositionTrack_Volume")))
    {
      v12 = *(CFTypeRef *)(v10 - 40);
      if (!v12)
        goto LABEL_10;
    }
    else if (CFEqual(a3, CFSTR("MutableCompositionTrack_Metadata")))
    {
      v12 = *(CFTypeRef *)(v10 - 32);
      if (!v12)
        goto LABEL_10;
    }
    else if (CFEqual(a3, CFSTR("MutableCompositionTrack_Enabled")) || CFEqual(a3, CFSTR("TrackEnabled")))
    {
      v14 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      if (!*(_BYTE *)(v10 + 56))
        v14 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
      v12 = *v14;
      if (!*v14)
        goto LABEL_10;
    }
    else if (CFEqual(a3, CFSTR("MutableCompositionTrack_FormatDescriptionReplacementTable")))
    {
      v12 = *(CFTypeRef *)(v10 + 8);
      if (!v12)
        goto LABEL_10;
    }
    else if (CFEqual(a3, CFSTR("MutableCompositionTrack_Layer")))
    {
      v12 = *(CFTypeRef *)(v10 + 16);
      if (!v12)
        goto LABEL_10;
    }
    else if (CFEqual(a3, CFSTR("MutableCompositionTrack_CleanApertureDimensions")))
    {
      v12 = *(CFTypeRef *)(v10 + 24);
      if (!v12)
        goto LABEL_10;
    }
    else if (CFEqual(a3, CFSTR("MutableCompositionTrack_ProductionApertureDimensions")))
    {
      v12 = *(CFTypeRef *)(v10 + 32);
      if (!v12)
        goto LABEL_10;
    }
    else if (CFEqual(a3, CFSTR("MutableCompositionTrack_EncodedPixelsDimensions")))
    {
      v12 = *(CFTypeRef *)(v10 + 40);
      if (!v12)
        goto LABEL_10;
    }
    else
    {
      if (!CFEqual(a3, CFSTR("MutableCompositionTrack_LoadSettings")))
      {
        v11 = 4294954512;
        goto LABEL_11;
      }
      v12 = *(CFTypeRef *)(v10 + 48);
      if (!v12)
        goto LABEL_10;
    }
    v12 = CFRetain(v12);
    goto LABEL_10;
  }
LABEL_5:
  v11 = 4294954516;
LABEL_11:
  MEMORY[0x19402EF04](v8[1]);
  return v11;
}

uint64_t mutableComposition_SetTrackProperty(uint64_t a1, uint64_t a2, const void *a3, const __CFString *a4)
{
  uint64_t DerivedStorage;
  _QWORD *v8;
  uint64_t *v9;
  const __CFAllocator *v10;
  __CFDictionary *Mutable;
  uint64_t v12;
  BOOL *v13;
  char v14;
  uint64_t v15;
  CFTypeID v17;
  const void *v18;
  CFTypeID v19;
  CFStringRef Copy;
  const void *v21;
  char v22;
  __CFString **v23;
  CFTypeID v24;
  CFStringRef v25;
  const void *v26;
  char v27;
  CFTypeID v28;
  CFArrayRef v29;
  const void *v30;
  char v31;
  CFTypeID v32;
  const void *v33;
  CFTypeID v34;
  const void *v35;
  CFTypeID v36;
  CFIndex v37;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v39;
  CFTypeID v40;
  const void *v41;
  const void *v42;
  const void *v43;
  const __CFDictionary *v44;
  __CFDictionary *v45;
  CFTypeRef *v46;
  CFTypeID v47;
  uint64_t v48;
  CFTypeID v49;
  const void *v50;
  CFTypeID v51;
  CFDictionaryRef DictionaryRepresentation;
  CFDictionaryRef v53;
  const void *v54;
  CFTypeID v55;
  CFDictionaryRef v56;
  CFDictionaryRef v57;
  const void *v58;
  const void *v59;
  CFTypeID v60;
  CFDictionaryRef v61;
  CFDictionaryRef v62;
  const void *v63;
  const void *v64;
  CFTypeID v65;
  CFDictionaryRef v66;
  const void *v67;
  char v68;
  uint64_t v69;
  uint64_t (*v70)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  const void *v71;
  void *value;
  CFIndex Count;
  CGSize valuePtr;
  CFTypeRef v75;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = *(_QWORD **)(DerivedStorage + 8);
  v75 = 0;
  if (!a3)
    return FigSignalErrorAt();
  v9 = (uint64_t *)DerivedStorage;
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  MEMORY[0x19402EEEC](v8[1]);
  v12 = v8[2];
  if (v12 < 1)
  {
LABEL_6:
    v14 = 0;
    v15 = 4294954516;
    goto LABEL_160;
  }
  v13 = (BOOL *)(v8[4] + 160);
  while (*((_DWORD *)v13 - 39) != (_DWORD)a2)
  {
    v13 += 168;
    if (!--v12)
      goto LABEL_6;
  }
  if (CFEqual(a3, CFSTR("MutableCompositionTrack_NaturalTimeScale")) || CFEqual(a3, CFSTR("TrackTimescale")))
  {
    if (!a4)
    {
      v18 = (const void *)*((_QWORD *)v13 - 16);
      *((_QWORD *)v13 - 16) = 0;
LABEL_14:
      if (v18)
        CFRelease(v18);
      goto LABEL_30;
    }
    v17 = CFGetTypeID(a4);
    if (v17 == CFNumberGetTypeID())
    {
      v18 = (const void *)*((_QWORD *)v13 - 16);
      *((_QWORD *)v13 - 16) = a4;
      CFRetain(a4);
      goto LABEL_14;
    }
    goto LABEL_153;
  }
  if (CFEqual(a3, CFSTR("MutableCompositionTrack_LanguageCode")) || CFEqual(a3, CFSTR("TrackLanguageCode")))
  {
    if (!a4)
    {
      v21 = (const void *)*((_QWORD *)v13 - 15);
      *((_QWORD *)v13 - 15) = 0;
      goto LABEL_23;
    }
    v19 = CFGetTypeID(a4);
    if (v19 == CFStringGetTypeID())
    {
      Copy = CFStringCreateCopy(v10, a4);
      a4 = Copy;
      v21 = (const void *)*((_QWORD *)v13 - 15);
      *((_QWORD *)v13 - 15) = Copy;
      if (Copy)
      {
        CFRetain(Copy);
        v22 = 0;
LABEL_24:
        if (v21)
          CFRelease(v21);
        if ((v22 & 1) == 0)
          CFRelease(a4);
        v23 = kFigTrackProperty_LanguageCode;
        goto LABEL_29;
      }
LABEL_23:
      v22 = 1;
      goto LABEL_24;
    }
LABEL_153:
    v15 = FigSignalErrorAt();
    goto LABEL_154;
  }
  if (CFEqual(a3, CFSTR("MutableCompositionTrack_ExtendedLanguageTag"))
    || CFEqual(a3, CFSTR("ExtendedLanguageTagString")))
  {
    if (a4)
    {
      v24 = CFGetTypeID(a4);
      if (v24 != CFStringGetTypeID())
        goto LABEL_153;
      v25 = CFStringCreateCopy(v10, a4);
      a4 = v25;
      v26 = (const void *)*((_QWORD *)v13 - 14);
      *((_QWORD *)v13 - 14) = v25;
      if (v25)
      {
        CFRetain(v25);
        v27 = 0;
LABEL_39:
        if (v26)
          CFRelease(v26);
        if ((v27 & 1) == 0)
          CFRelease(a4);
        v23 = kFigTrackProperty_ExtendedLanguageTagString;
        goto LABEL_29;
      }
    }
    else
    {
      v26 = (const void *)*((_QWORD *)v13 - 14);
      *((_QWORD *)v13 - 14) = 0;
    }
    v27 = 1;
    goto LABEL_39;
  }
  if (CFEqual(a3, CFSTR("MutableCompositionTrack_PreferredTransform")) || CFEqual(a3, CFSTR("TrackMatrix")))
  {
    if (a4)
    {
      v28 = CFGetTypeID(a4);
      if (v28 != CFArrayGetTypeID())
        goto LABEL_153;
      v29 = CFArrayCreateCopy(v10, (CFArrayRef)a4);
      a4 = (const __CFString *)v29;
      v30 = (const void *)*((_QWORD *)v13 - 13);
      *((_QWORD *)v13 - 13) = v29;
      if (v29)
      {
        CFRetain(v29);
        v31 = 0;
LABEL_52:
        if (v30)
          CFRelease(v30);
        if ((v31 & 1) == 0)
          CFRelease(a4);
        v23 = kFigTrackProperty_Matrix;
        goto LABEL_29;
      }
    }
    else
    {
      v30 = (const void *)*((_QWORD *)v13 - 13);
      *((_QWORD *)v13 - 13) = 0;
    }
    v31 = 1;
    goto LABEL_52;
  }
  if (CFEqual(a3, CFSTR("MutableCompositionTrack_Volume")) || CFEqual(a3, CFSTR("Volume")))
  {
    if (a4)
    {
      v32 = CFGetTypeID(a4);
      if (v32 != CFNumberGetTypeID())
        goto LABEL_153;
      v33 = (const void *)*((_QWORD *)v13 - 12);
      *((_QWORD *)v13 - 12) = a4;
      CFRetain(a4);
    }
    else
    {
      v33 = (const void *)*((_QWORD *)v13 - 12);
      *((_QWORD *)v13 - 12) = 0;
    }
    if (v33)
      CFRelease(v33);
    v23 = kFigTrackProperty_Volume;
    goto LABEL_29;
  }
  if (CFEqual(a3, CFSTR("MutableCompositionTrack_AlternateGroupID")) || CFEqual(a3, CFSTR("AlternateGroupID")))
  {
    if (!a4 || (v34 = CFGetTypeID(a4), v34 == CFNumberGetTypeID()))
    {
      LOWORD(valuePtr.width) = 0;
      CFNumberGetValue((CFNumberRef)a4, kCFNumberSInt16Type, &valuePtr);
      v35 = (const void *)*((_QWORD *)v13 - 7);
      if (LOWORD(valuePtr.width))
      {
        *((_QWORD *)v13 - 7) = a4;
        if (a4)
          CFRetain(a4);
        if (v35)
          CFRelease(v35);
      }
      else if (v35)
      {
        CFRelease(*((CFTypeRef *)v13 - 7));
        *((_QWORD *)v13 - 7) = 0;
      }
      v23 = kFigTrackProperty_AlternateGroupID;
      goto LABEL_29;
    }
    goto LABEL_153;
  }
  if (CFEqual(a3, CFSTR("MutableCompositionTrack_Metadata")))
  {
    if (!a4)
      goto LABEL_30;
    v36 = CFGetTypeID(a4);
    if (v36 != CFArrayGetTypeID())
      goto LABEL_153;
    Count = CFArrayGetCount((CFArrayRef)a4);
    if (Count < 1)
      goto LABEL_30;
    v37 = 0;
    value = (void *)*MEMORY[0x1E0C9AE50];
    while (1)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)a4, v37);
      if (!ValueAtIndex)
        goto LABEL_100;
      v39 = ValueAtIndex;
      v40 = CFGetTypeID(ValueAtIndex);
      if (v40 != CFDictionaryGetTypeID())
        goto LABEL_100;
      v41 = CFDictionaryGetValue(v39, CFSTR("format"));
      v42 = CFDictionaryGetValue(v39, CFSTR("items"));
      if (v41)
      {
        v43 = v42;
        if (v42)
        {
          v44 = (const __CFDictionary *)*((_QWORD *)v13 - 11);
          if (v44)
          {
            CFDictionaryGetValue(v44, v41);
            if (FigCFEqual())
              goto LABEL_100;
            v45 = (__CFDictionary *)*((_QWORD *)v13 - 11);
          }
          else
          {
            v45 = CFDictionaryCreateMutable(v10, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            *((_QWORD *)v13 - 11) = v45;
          }
          CFDictionarySetValue(v45, v41, v43);
        }
      }
      CFDictionarySetValue(Mutable, v41, value);
      CFDictionarySetValue(Mutable, CFSTR("MetadataReaderTypes"), value);
      CFDictionarySetValue(Mutable, CFSTR("MetadataReaders"), value);
      if (FigCFEqual())
      {
        v46 = (CFTypeRef *)(v13 - 72);
        goto LABEL_98;
      }
      if (FigCFEqual())
      {
        v46 = (CFTypeRef *)(v13 - 64);
        goto LABEL_98;
      }
      if (FigCFEqual())
      {
        v46 = (CFTypeRef *)(v13 - 80);
LABEL_98:
        if (*v46)
        {
          CFRelease(*v46);
          *v46 = 0;
        }
      }
LABEL_100:
      v15 = 0;
      if (Count == ++v37)
        goto LABEL_154;
    }
  }
  if (CFEqual(a3, CFSTR("MutableCompositionTrack_Enabled")) || CFEqual(a3, CFSTR("IsEnabled")))
  {
    if (a4)
    {
      v47 = CFGetTypeID(a4);
      if (v47 != CFBooleanGetTypeID())
        goto LABEL_153;
    }
    *v13 = CFBooleanGetValue((CFBooleanRef)a4) != 0;
    v23 = kFigTrackProperty_Enabled;
LABEL_29:
    CFDictionarySetValue(Mutable, *v23, (const void *)*MEMORY[0x1E0C9AE50]);
LABEL_30:
    v15 = 0;
    goto LABEL_154;
  }
  if (CFEqual(a3, CFSTR("MutableCompositionTrack_FormatDescriptionReplacementTable")))
  {
    v48 = compositionTableTrack_setFormatDescriptionReplacementTable((uint64_t)(v13 - 160), a4);
    v15 = 0;
    if ((_DWORD)v48)
    {
      v14 = 0;
      v15 = v48;
      goto LABEL_160;
    }
    goto LABEL_154;
  }
  if (CFEqual(a3, CFSTR("MutableCompositionTrack_Layer")))
  {
    if (a4)
    {
      v49 = CFGetTypeID(a4);
      if (v49 != CFNumberGetTypeID())
        goto LABEL_153;
      v50 = (const void *)*((_QWORD *)v13 - 5);
      *((_QWORD *)v13 - 5) = a4;
      CFRetain(a4);
    }
    else
    {
      v50 = (const void *)*((_QWORD *)v13 - 5);
      *((_QWORD *)v13 - 5) = 0;
    }
    if (v50)
      CFRelease(v50);
    v23 = kFigTrackProperty_Layer;
    goto LABEL_29;
  }
  if (CFEqual(a3, CFSTR("MutableCompositionTrack_CleanApertureDimensions")))
  {
    if (!a4)
    {
      v59 = (const void *)*((_QWORD *)v13 - 4);
      if (v59)
      {
        CFRelease(v59);
        *((_QWORD *)v13 - 4) = 0;
      }
      goto LABEL_136;
    }
    v51 = CFGetTypeID(a4);
    if (v51 != CFDictionaryGetTypeID())
      goto LABEL_153;
    valuePtr.width = 0.0;
    valuePtr.height = 0.0;
    if (!CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)a4, &valuePtr))
      goto LABEL_153;
    DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(valuePtr);
    if (DictionaryRepresentation)
    {
      v53 = DictionaryRepresentation;
      v54 = (const void *)*((_QWORD *)v13 - 4);
      *((_QWORD *)v13 - 4) = DictionaryRepresentation;
      CFRetain(DictionaryRepresentation);
      if (v54)
        CFRelease(v54);
      CFRelease(v53);
LABEL_136:
      v23 = kFigTrackProperty_CleanApertureDimensions;
      goto LABEL_29;
    }
LABEL_179:
    v15 = FigSignalErrorAt();
    v14 = 0;
    goto LABEL_160;
  }
  if (CFEqual(a3, CFSTR("MutableCompositionTrack_ProductionApertureDimensions")))
  {
    if (a4)
    {
      v55 = CFGetTypeID(a4);
      if (v55 != CFDictionaryGetTypeID())
        goto LABEL_153;
      valuePtr.width = 0.0;
      valuePtr.height = 0.0;
      if (!CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)a4, &valuePtr))
        goto LABEL_153;
      v56 = CGSizeCreateDictionaryRepresentation(valuePtr);
      if (!v56)
        goto LABEL_179;
      v57 = v56;
      v58 = (const void *)*((_QWORD *)v13 - 3);
      *((_QWORD *)v13 - 3) = v56;
      CFRetain(v56);
      if (v58)
        CFRelease(v58);
      CFRelease(v57);
    }
    else
    {
      v64 = (const void *)*((_QWORD *)v13 - 3);
      if (v64)
      {
        CFRelease(v64);
        *((_QWORD *)v13 - 3) = 0;
      }
    }
    v23 = kFigTrackProperty_ProductionApertureDimensions;
    goto LABEL_29;
  }
  if (CFEqual(a3, CFSTR("MutableCompositionTrack_EncodedPixelsDimensions")))
  {
    if (a4)
    {
      v60 = CFGetTypeID(a4);
      if (v60 != CFDictionaryGetTypeID())
        goto LABEL_153;
      valuePtr.width = 0.0;
      valuePtr.height = 0.0;
      if (!CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)a4, &valuePtr))
        goto LABEL_153;
      v61 = CGSizeCreateDictionaryRepresentation(valuePtr);
      if (!v61)
        goto LABEL_179;
      v62 = v61;
      v63 = (const void *)*((_QWORD *)v13 - 2);
      *((_QWORD *)v13 - 2) = v61;
      CFRetain(v61);
      if (v63)
        CFRelease(v63);
      CFRelease(v62);
    }
    else
    {
      v71 = (const void *)*((_QWORD *)v13 - 2);
      if (v71)
      {
        CFRelease(v71);
        *((_QWORD *)v13 - 2) = 0;
      }
    }
    v23 = kFigTrackProperty_EncodedPixelsDimensions;
    goto LABEL_29;
  }
  if (CFEqual(a3, CFSTR("MutableCompositionTrack_LoadSettings")))
  {
    if (a4)
    {
      v65 = CFGetTypeID(a4);
      if (v65 != CFDictionaryGetTypeID())
        goto LABEL_153;
      v66 = CFDictionaryCreateCopy(v10, (CFDictionaryRef)a4);
      a4 = (const __CFString *)v66;
      v67 = (const void *)*((_QWORD *)v13 - 1);
      *((_QWORD *)v13 - 1) = v66;
      if (v66)
      {
        CFRetain(v66);
        v68 = 0;
LABEL_174:
        if (v67)
          CFRelease(v67);
        if ((v68 & 1) == 0)
          CFRelease(a4);
        v23 = kFigTrackProperty_QTLoadSettings;
        goto LABEL_29;
      }
    }
    else
    {
      v67 = (const void *)*((_QWORD *)v13 - 1);
      *((_QWORD *)v13 - 1) = 0;
    }
    v68 = 1;
    goto LABEL_174;
  }
  v15 = 4294954512;
LABEL_154:
  MEMORY[0x19402EF04](v8[1]);
  if (CFDictionaryGetCount(Mutable))
  {
    v69 = *v9;
    if (v69)
    {
      v70 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 56);
      if (!v70)
      {
        v14 = 1;
        v15 = 4294954514;
        goto LABEL_160;
      }
      v15 = v70(v69, a2, &v75, 0);
      if (!(_DWORD)v15)
      {
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
      }
    }
  }
  v14 = 1;
LABEL_160:
  if (v75)
    CFRelease(v75);
  if (Mutable)
    CFRelease(Mutable);
  if ((v14 & 1) == 0)
    MEMORY[0x19402EF04](v8[1]);
  return v15;
}

uint64_t mutableComposition_InsertAssetSegmentIntoTrack(uint64_t a1, int a2, uint64_t a3, int a4, CMTime *a5, CMTime *a6, uint64_t a7)
{
  uint64_t DerivedStorage;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t inserted;
  __int128 v22;
  uint64_t v23;
  CMTime time2;
  CMTime time1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v14 = 4294954516;
  if (!a3)
    return v14;
  if (!a4)
    return v14;
  if ((a5->flags & 0x1D) != 1)
    return v14;
  v15 = (_QWORD *)DerivedStorage;
  v16 = *(_QWORD *)(DerivedStorage + 8);
  time1 = *a5;
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (CMTimeCompare(&time1, &time2) < 0)
    return v14;
  v17 = *(_DWORD *)(a7 + 12);
  if ((v17 & 0x1D) != 1 && (v17 & 1) != 0)
    return v14;
  MEMORY[0x19402EEEC](*(_QWORD *)(v16 + 8));
  v19 = *(_QWORD *)(v16 + 16);
  if (v19 < 1)
  {
LABEL_12:
    MEMORY[0x19402EF04](*(_QWORD *)(v16 + 8), v18);
    return v14;
  }
  v18 = *(_QWORD *)(v16 + 32);
  while (*(_DWORD *)(v18 + 4) != a2)
  {
    v18 += 168;
    if (!--v19)
    {
      v14 = 4294954516;
      goto LABEL_12;
    }
  }
  time1 = *a5;
  time2 = *a6;
  v22 = *(_OWORD *)a7;
  v23 = *(_QWORD *)(a7 + 16);
  inserted = compositionTable_insertAssetSegmentIntoTrack(v16, (_QWORD *)v18, a3, a4, (uint64_t)&time1, (uint64_t)&time2, &v22);
  if ((_DWORD)inserted)
  {
    v14 = inserted;
    goto LABEL_12;
  }
  ++*(_DWORD *)(v16 + 4);
  MEMORY[0x19402EF04](*(_QWORD *)(v16 + 8));
  if (*v15)
    mutableComposition_postPossiblyDeferredTracksChangedNotification();
  return 0;
}

uint64_t mutableComposition_InsertAssetSegment(uint64_t a1, const void *a2, CMTime *a3, CMTime *a4, CMTime *a5)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  _QWORD *v10;
  CMTimeEpoch v11;
  CMTimeFlags flags;
  uint64_t v13;
  CFTypeRef v14;
  uint64_t (*v15)(CFTypeRef, uint64_t *);
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CFTypeRef v21;
  uint64_t (*v22)(CFTypeRef, uint64_t, CFTypeRef *, int *, CMTime *);
  uint64_t inserted;
  uint64_t FigBaseObject;
  uint64_t (*v25)(uint64_t, const __CFString *, uint64_t, const void **);
  CMTimeEpoch v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v34;
  uint64_t v35;
  const void *v37;
  CMTime time1;
  __int128 v40;
  CMTimeEpoch v41;
  __int128 v42;
  CMTimeEpoch epoch;
  __int128 v44;
  CMTimeEpoch v45;
  const void *v46;
  int value;
  uint64_t v48;
  CMTime time2;
  CFTypeRef v50;
  int v51;
  const void *v52;
  uint64_t v53;
  CFTypeRef v54[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = *(_QWORD *)(DerivedStorage + 8);
  v53 = 0;
  v54[0] = 0;
  v52 = 0;
  v51 = 0;
  v50 = 0;
  v37 = a2;
  if (!a2)
  {
    v17 = 0;
    v32 = 4294954516;
    goto LABEL_52;
  }
  if ((a3->flags & 0x1D) != 1)
    goto LABEL_57;
  v10 = (_QWORD *)DerivedStorage;
  time1 = *a3;
  v34 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&time2.value = *MEMORY[0x1E0CA2E68];
  v11 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  time2.epoch = v11;
  if (CMTimeCompare(&time1, &time2) < 0)
    goto LABEL_57;
  time1 = *a4;
  *(_OWORD *)&time2.value = v34;
  time2.epoch = v11;
  if (CMTimeCompare(&time1, &time2) < 1)
    goto LABEL_57;
  flags = a5->flags;
  if ((flags & 0x1D) != 1 && (flags & 1) != 0)
    goto LABEL_57;
  if ((flags & 0x1D) == 1)
  {
    time1 = *a5;
    *(_OWORD *)&time2.value = v34;
    time2.epoch = v11;
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      v13 = FigSignalErrorAt();
      goto LABEL_62;
    }
  }
  v35 = *MEMORY[0x1E0C9AE00];
  v13 = compositionSharedCache_copyFormatReaderForAssetURL(*(_QWORD *)(v9 + 160), v37, (const __CFAllocator *)*MEMORY[0x1E0C9AE00], (uint64_t)v54);
  if ((_DWORD)v13)
  {
LABEL_62:
    v32 = v13;
    v17 = 0;
    goto LABEL_50;
  }
  v14 = v54[0];
  if (!v54[0])
  {
LABEL_57:
    v17 = 0;
    v32 = 4294954516;
    goto LABEL_50;
  }
  v15 = *(uint64_t (**)(CFTypeRef, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v15)
  {
    v17 = 0;
    v32 = 4294954514;
    goto LABEL_50;
  }
  v13 = v15(v14, &v53);
  if ((_DWORD)v13)
    goto LABEL_62;
  MEMORY[0x19402EEEC](*(_QWORD *)(v9 + 8));
  if ((a5->flags & 0x1D) != 1)
  {
    compositionTable_getDuration((CMTime *)v9, &time1);
    *a5 = time1;
  }
  v16 = (uint64_t *)malloc_type_calloc(*(_QWORD *)(v9 + 16), 8uLL, 0x100004000313F17uLL);
  v17 = v16;
  if (v16)
  {
    v18 = *(_QWORD *)(v9 + 16);
    v48 = 0;
    if (v18 >= 1)
    {
      v19 = 0;
      do
      {
        v16[v19] = v19;
        v19 = v48 + 1;
        v48 = v19;
      }
      while (v19 < *(_QWORD *)(v9 + 16));
    }
    if (v53 < 1)
    {
      v30 = v18;
LABEL_46:
      time1 = *a5;
      time2 = *a4;
      inserted = tableTrack_InsertEmptyEditsInTracks(a1, v17, v30, (uint64_t)&time1, &time2);
      if (!(_DWORD)inserted)
      {
        ++*(_DWORD *)(v9 + 4);
        MEMORY[0x19402EF04](*(_QWORD *)(v9 + 8));
        if (*v10)
          mutableComposition_postPossiblyDeferredTracksChangedNotification();
        v32 = 0;
        goto LABEL_50;
      }
LABEL_58:
      v32 = inserted;
    }
    else
    {
      v20 = 0;
      while (1)
      {
        LODWORD(time2.value) = 0;
        v21 = v54[0];
        v22 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *, int *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 48);
        if (!v22)
          break;
        inserted = v22(v21, v20, &v50, &v51, &time2);
        if ((_DWORD)inserted)
          goto LABEL_58;
        FigBaseObject = FigTrackReaderGetFigBaseObject(v50);
        v25 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
        if (!v25)
          break;
        inserted = v25(FigBaseObject, CFSTR("TrackFormatDescriptionArray"), v35, &v52);
        if ((_DWORD)inserted)
          goto LABEL_58;
        v42 = *(_OWORD *)&a5->value;
        epoch = a5->epoch;
        v44 = *(_OWORD *)&a4->value;
        v45 = a4->epoch;
        *(_OWORD *)&time1.value = *(_OWORD *)&a3->value;
        v26 = a3->epoch;
        v41 = v45;
        v40 = v44;
        time1.epoch = v26;
        v46 = v37;
        value = time2.value;
        v48 = 0;
        inserted = compositionTable_insertEditSegmentsFromAsset(a1, v17, v18, v52, v51, (uint64_t)&time1, 1, &v48);
        if ((_DWORD)inserted)
          goto LABEL_58;
        if (v18 < 1)
        {
          v30 = v18;
        }
        else
        {
          v27 = 0;
          v28 = 0;
          v29 = v48;
          v30 = v18;
          do
          {
            v31 = v17[v28];
            if (v31 == v29)
            {
              --v30;
            }
            else
            {
              if (v28 != v27)
                v17[v27] = v31;
              ++v27;
            }
            ++v28;
          }
          while (v18 != v28);
        }
        if (v52)
        {
          CFRelease(v52);
          v52 = 0;
        }
        if (v50)
        {
          CFRelease(v50);
          v50 = 0;
        }
        ++v20;
        v18 = v30;
        if (v20 >= v53)
          goto LABEL_46;
      }
      v32 = 4294954514;
    }
  }
  else
  {
    v32 = 4294954510;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v9 + 8));
LABEL_50:
  if (v50)
    CFRelease(v50);
LABEL_52:
  if (v54[0])
    CFRelease(v54[0]);
  if (v52)
    CFRelease(v52);
  free(v17);
  return v32;
}

uint64_t mutableComposition_InsertEmptyTrackSegment(uint64_t a1, int a2, CMTime *a3, CMTime *a4)
{
  uint64_t DerivedStorage;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inserted;
  CMTime v15;
  CMTime v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((a3->flags & 0x1D) != 1)
    return 4294954516;
  v8 = (_QWORD *)DerivedStorage;
  v9 = *(_QWORD *)(DerivedStorage + 8);
  MEMORY[0x19402EEEC](*(_QWORD *)(v9 + 8));
  v10 = *(_QWORD *)(v9 + 16);
  if (v10 < 1)
  {
LABEL_6:
    v12 = 4294954516;
LABEL_7:
    MEMORY[0x19402EF04](*(_QWORD *)(v9 + 8));
    return v12;
  }
  v11 = *(_QWORD *)(v9 + 32);
  while (*(_DWORD *)(v11 + 4) != a2)
  {
    v11 += 168;
    if (!--v10)
      goto LABEL_6;
  }
  v16 = *a3;
  v15 = *a4;
  inserted = compositionTable_insertEmptyTrackSegment(v9, (_QWORD *)v11, &v16, &v15);
  if ((_DWORD)inserted)
  {
    v12 = inserted;
    goto LABEL_7;
  }
  ++*(_DWORD *)(v9 + 4);
  MEMORY[0x19402EF04](*(_QWORD *)(v9 + 8));
  if (*v8)
    mutableComposition_postPossiblyDeferredTracksChangedNotification();
  return 0;
}

uint64_t mutableComposition_InsertEmptySegment(uint64_t a1, uint64_t a2, CMTime *a3)
{
  uint64_t DerivedStorage;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CMTime *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t inserted;
  int v20;
  uint64_t v21;
  CMTime time2;
  CMTime v24;
  CMTimeRange range;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((*(_DWORD *)(a2 + 12) & 0x1D) != 1)
    return 4294954516;
  v6 = (_QWORD *)DerivedStorage;
  v7 = *(_QWORD *)(DerivedStorage + 8);
  MEMORY[0x19402EEEC](*(_QWORD *)(v7 + 8));
  v8 = *(_QWORD *)(v7 + 16);
  if (v8 < 1)
  {
    v20 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = (CMTime *)MEMORY[0x1E0CA2E68];
    do
    {
      v13 = *(_QWORD *)(v7 + 32);
      v14 = (_QWORD *)(v13 + v9);
      if (*(uint64_t *)(v13 + v9 + 8) >= 1)
      {
        v24 = *v12;
        v15 = v14[1];
        if (v15 >= 1)
        {
          v16 = *(_QWORD *)(v13 + v9 + 16) + 108 * v15;
          v17 = *(_OWORD *)(v16 - 60);
          v18 = *(_OWORD *)(v16 - 28);
          *(_OWORD *)&range.start.epoch = *(_OWORD *)(v16 - 44);
          *(_OWORD *)&range.duration.timescale = v18;
          *(_OWORD *)&range.start.value = v17;
          CMTimeRangeGetEnd(&v24, &range);
        }
        *(_OWORD *)&range.start.value = *(_OWORD *)a2;
        range.start.epoch = *(_QWORD *)(a2 + 16);
        time2 = v24;
        if (CMTimeCompare(&range.start, &time2) < 0)
        {
          *(_OWORD *)&range.start.value = *(_OWORD *)a2;
          range.start.epoch = *(_QWORD *)(a2 + 16);
          time2 = *a3;
          inserted = compositionTable_insertEmptyTrackSegment(v7, v14, &range.start, &time2);
          if ((_DWORD)inserted)
          {
            v21 = inserted;
            MEMORY[0x19402EF04](*(_QWORD *)(v7 + 8));
            return v21;
          }
          ++v11;
        }
        v8 = *(_QWORD *)(v7 + 16);
      }
      ++v10;
      v9 += 168;
    }
    while (v10 < v8);
    if (v11 < 1)
    {
      v20 = 0;
    }
    else
    {
      ++*(_DWORD *)(v7 + 4);
      v20 = 1;
    }
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v7 + 8));
  v21 = 0;
  if (v20 && *v6)
  {
    mutableComposition_postPossiblyDeferredTracksChangedNotification();
    return 0;
  }
  return v21;
}

uint64_t mutableComposition_DeleteTrackSegment(uint64_t a1, int a2, CMTime *a3, CMTime *a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  CMTime v11;
  CMTime v12;

  v7 = *(_QWORD **)(CMBaseObjectGetDerivedStorage() + 8);
  MEMORY[0x19402EEEC](v7[1]);
  v8 = v7[2];
  if (v8 >= 1)
  {
    v9 = v7[4];
    do
    {
      if (*(_DWORD *)(v9 + 4) == a2)
      {
        v12 = *a3;
        v11 = *a4;
        compositionTable_deleteTrackSegment((uint64_t)v7, (_QWORD *)v9, &v12, &v11);
        MEMORY[0x19402EF04](v7[1]);
        compositionTable_discardUnusedAssets((uint64_t)v7);
      }
      v9 += 168;
      --v8;
    }
    while (v8);
  }
  MEMORY[0x19402EF04](v7[1]);
  return 4294954516;
}

uint64_t mutableComposition_DeleteSegment(uint64_t a1, uint64_t a2, CMTime *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  CMTime *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v19;
  CMTime time2;
  CMTime v21;
  CMTimeRange range;

  v5 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  MEMORY[0x19402EEEC](*(_QWORD *)(v5 + 8));
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 < 1)
  {
LABEL_12:
    MEMORY[0x19402EF04](*(_QWORD *)(v5 + 8));
    compositionTable_discardUnusedAssets(v5);
  }
  v7 = 0;
  v8 = v6 + 1;
  v9 = 168 * v6;
  v10 = (CMTime *)MEMORY[0x1E0CA2E68];
  while (1)
  {
    v11 = *(_QWORD *)(v5 + 32);
    v12 = v11 + v9;
    if (*(uint64_t *)(v11 + v9 - 160) < 1)
      goto LABEL_9;
    v21 = *v10;
    v13 = *(_QWORD *)(v12 - 160);
    if (v13 >= 1)
    {
      v14 = *(_QWORD *)(v11 + v9 - 152) + 108 * v13;
      v15 = *(_OWORD *)(v14 - 60);
      v16 = *(_OWORD *)(v14 - 28);
      *(_OWORD *)&range.start.epoch = *(_OWORD *)(v14 - 44);
      *(_OWORD *)&range.duration.timescale = v16;
      *(_OWORD *)&range.start.value = v15;
      CMTimeRangeGetEnd(&v21, &range);
    }
    *(_OWORD *)&range.start.value = *(_OWORD *)a2;
    range.start.epoch = *(_QWORD *)(a2 + 16);
    time2 = v21;
    if ((CMTimeCompare(&range.start, &time2) & 0x80000000) == 0)
      goto LABEL_9;
    *(_OWORD *)&range.start.value = *(_OWORD *)a2;
    range.start.epoch = *(_QWORD *)(a2 + 16);
    time2 = *a3;
    v17 = compositionTable_deleteTrackSegment(v5, (_QWORD *)(v12 - 168), &range.start, &time2);
    if ((_DWORD)v17)
      break;
    ++v7;
LABEL_9:
    --v8;
    v9 -= 168;
    if (v8 <= 1)
    {
      if (v7 >= 1)
        ++*(_DWORD *)(v5 + 4);
      goto LABEL_12;
    }
  }
  v19 = v17;
  MEMORY[0x19402EF04](*(_QWORD *)(v5 + 8));
  return v19;
}

uint64_t mutableComposition_ScaleTrackSegment(uint64_t a1, int a2, __int128 *a3, CMTime *a4, CMTime *a5)
{
  _QWORD *DerivedStorage;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CMTime v16;
  CMTime v17;
  __int128 v18;
  uint64_t v19;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v10 = DerivedStorage[1];
  MEMORY[0x19402EEEC](*(_QWORD *)(v10 + 8));
  v11 = *(_QWORD *)(v10 + 16);
  if (v11 < 1)
  {
LABEL_5:
    v13 = 4294954516;
LABEL_6:
    MEMORY[0x19402EF04](*(_QWORD *)(v10 + 8));
    return v13;
  }
  v12 = *(_QWORD *)(v10 + 32);
  while (*(_DWORD *)(v12 + 4) != a2)
  {
    v12 += 168;
    if (!--v11)
      goto LABEL_5;
  }
  v18 = *a3;
  v19 = *((_QWORD *)a3 + 2);
  v17 = *a4;
  v16 = *a5;
  v14 = compositionTable_scaleTrackSegment(v10, (_QWORD *)v12, (uint64_t)&v18, &v17, &v16);
  if ((_DWORD)v14)
  {
    v13 = v14;
    goto LABEL_6;
  }
  ++*(_DWORD *)(v10 + 4);
  MEMORY[0x19402EF04](*(_QWORD *)(v10 + 8));
  if (*DerivedStorage)
    mutableComposition_postPossiblyDeferredTracksChangedNotification();
  return 0;
}

uint64_t mutableComposition_ScaleSegment(uint64_t a1, uint64_t a2, CMTime *a3, CMTime *a4)
{
  _QWORD *DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CMTime *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _QWORD *v24;
  CMTime v25;
  CMTime time2;
  CMTime v27;
  CMTimeRange range;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v8 = DerivedStorage[1];
  MEMORY[0x19402EEEC](*(_QWORD *)(v8 + 8));
  v9 = *(_QWORD *)(v8 + 16);
  if (v9 < 1)
  {
    v21 = 0;
  }
  else
  {
    v24 = DerivedStorage;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = (CMTime *)MEMORY[0x1E0CA2E68];
    do
    {
      v14 = *(_QWORD *)(v8 + 32);
      v15 = (_QWORD *)(v14 + v10);
      if (*(uint64_t *)(v14 + v10 + 8) >= 1)
      {
        v27 = *v13;
        v16 = v15[1];
        if (v16 >= 1)
        {
          v17 = *(_QWORD *)(v14 + v10 + 16) + 108 * v16;
          v18 = *(_OWORD *)(v17 - 60);
          v19 = *(_OWORD *)(v17 - 28);
          *(_OWORD *)&range.start.epoch = *(_OWORD *)(v17 - 44);
          *(_OWORD *)&range.duration.timescale = v19;
          *(_OWORD *)&range.start.value = v18;
          CMTimeRangeGetEnd(&v27, &range);
        }
        *(_OWORD *)&range.start.value = *(_OWORD *)a2;
        range.start.epoch = *(_QWORD *)(a2 + 16);
        time2 = v27;
        if (CMTimeCompare(&range.start, &time2) < 0)
        {
          *(_OWORD *)&range.start.value = *(_OWORD *)a2;
          range.start.epoch = *(_QWORD *)(a2 + 16);
          time2 = *a3;
          v25 = *a4;
          v20 = compositionTable_scaleTrackSegment(v8, v15, (uint64_t)&range, &time2, &v25);
          if ((_DWORD)v20)
          {
            v22 = v20;
            MEMORY[0x19402EF04](*(_QWORD *)(v8 + 8));
            return v22;
          }
          ++v12;
        }
        v9 = *(_QWORD *)(v8 + 16);
      }
      ++v11;
      v10 += 168;
    }
    while (v11 < v9);
    if (v12 < 1)
    {
      v21 = 0;
    }
    else
    {
      ++*(_DWORD *)(v8 + 4);
      v21 = 1;
    }
    DerivedStorage = v24;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v8 + 8));
  v22 = 0;
  if (v21 && *DerivedStorage)
  {
    mutableComposition_postPossiblyDeferredTracksChangedNotification();
    return 0;
  }
  return v22;
}

uint64_t mutableComposition_DeferTracksChangedNotifications()
{
  *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 16) = 1;
  return 0;
}

uint64_t mutableComposition_PostDeferredTracksChangedNotification()
{
  uint64_t DerivedStorage;
  uint64_t v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(DerivedStorage + 16) = 0;
  if (*(_BYTE *)(DerivedStorage + 17))
  {
    v1 = DerivedStorage;
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    *(_BYTE *)(v1 + 17) = 0;
  }
  return 0;
}

uint64_t mutableComposition_InsertSegmentArrayIntoTrack(uint64_t a1, int a2, const __CFArray *a3, const __CFArray *a4, const __CFArray *a5, const __CFArray *a6, CMTime *a7)
{
  uint64_t DerivedStorage;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  CMTimeFlags flags;
  int64_t Count;
  CFIndex v18;
  const void *ValueAtIndex;
  unint64_t v20;
  const void *v21;
  _QWORD *v22;
  CFTypeID TypeID;
  CFTypeID v24;
  CMTimeFlags v25;
  CMTimeEpoch v26;
  CFTypeID v27;
  CMTimeFlags v28;
  CMTimeEpoch v29;
  CFTypeID v30;
  CFTypeID v31;
  _OWORD *v32;
  CFTypeID v33;
  uint64_t v34;
  uint64_t v35;
  CMTimeScale v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t CFTypeID;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t i;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  int v59;
  BOOL v60;
  CMTime *v61;
  CMTime *v62;
  uint64_t v63;
  uint64_t inserted;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  _QWORD *v69;
  CMTime *v70;
  uint64_t v72;
  const __CFArray *v74;
  int64_t v75;
  const __CFArray *theArray;
  CMTimeEpoch epoch;
  __int128 v80;
  int valuePtr;
  CMTime time2;
  CMTime v83;
  CMTime v84;
  CMTime v85;
  CMTimeRange time1;
  CMTimeValue v87;
  CMTimeScale v88;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = 0;
  v12 = *(_QWORD *)(DerivedStorage + 8);
  v85 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v84 = v85;
  v80 = *(_OWORD *)&v85.value;
  v83 = v85;
  epoch = v85.epoch;
  v13 = 4294954516;
  theArray = a3;
  if (!a3 || !a4 || !a5)
  {
    v14 = 0;
    goto LABEL_65;
  }
  v14 = 0;
  if (a6)
  {
    v15 = (_QWORD *)DerivedStorage;
    flags = a7->flags;
    if ((flags & 0x1D) == 1 || (flags & 1) == 0)
    {
      if ((flags & 0x1D) == 1
        && (*(_OWORD *)&time1.start.value = *(_OWORD *)&a7->value,
            time1.start.epoch = a7->epoch,
            time2 = v85,
            CMTimeCompare(&time1.start, &time2) < 0))
      {
        v13 = FigSignalErrorAt();
      }
      else
      {
        Count = CFArrayGetCount(theArray);
        if (CFArrayGetCount(a4) == Count && CFArrayGetCount(a5) == Count && CFArrayGetCount(a6) == Count)
        {
          if (Count < 1)
          {
            v11 = 0;
            v14 = 0;
            v13 = 0;
            goto LABEL_65;
          }
          v14 = malloc_type_calloc(Count, 8uLL, 0x2004093837F09uLL);
          if (!v14)
          {
            v11 = 0;
            v13 = 4294954510;
            goto LABEL_65;
          }
          v11 = malloc_type_calloc(Count, 8uLL, 0x100004000313F17uLL);
          if (!v11)
          {
            v13 = 4294954510;
            goto LABEL_61;
          }
          v69 = v15;
          v70 = a7;
          v72 = v12;
          v18 = 0;
          v74 = a4;
          v75 = Count;
          while (1)
          {
            valuePtr = 0;
            ValueAtIndex = CFArrayGetValueAtIndex(theArray, v18);
            if (!ValueAtIndex)
            {
              v22 = 0;
LABEL_83:
              v47 = 0;
              v13 = 4294954516;
              goto LABEL_51;
            }
            v21 = ValueAtIndex;
            v22 = CFArrayGetValueAtIndex(a4, v18);
            if (!v22)
              goto LABEL_83;
            TypeID = CFNumberGetTypeID();
            if (TypeID != CFGetTypeID(v22))
              goto LABEL_66;
            CFNumberGetValue((CFNumberRef)v22, kCFNumberSInt32Type, &valuePtr);
            v22 = CFArrayGetValueAtIndex(a5, v18);
            if (!v22)
              goto LABEL_83;
            v24 = CFDictionaryGetTypeID();
            if (v24 != CFGetTypeID(v22))
              goto LABEL_66;
            CMTimeMakeFromDictionary(&time1.start, (CFDictionaryRef)v22);
            value = time1.start.value;
            v25 = time1.start.flags;
            timescale = time1.start.timescale;
            v26 = time1.start.epoch;
            v22 = CFArrayGetValueAtIndex(a6, v18);
            if (!v22)
              goto LABEL_83;
            v27 = CFDictionaryGetTypeID();
            if (v27 != CFGetTypeID(v22))
              goto LABEL_66;
            CMTimeMakeFromDictionary(&time1.start, (CFDictionaryRef)v22);
            v87 = time1.start.value;
            v28 = time1.start.flags;
            v88 = time1.start.timescale;
            if ((time1.start.flags & 0x1D) != 1
              || (v29 = time1.start.epoch,
                  time1.start.value = v87,
                  time1.start.timescale = v88,
                  *(_OWORD *)&time2.value = v80,
                  time2.epoch = epoch,
                  CMTimeCompare(&time1.start, &time2) < 0))
            {
LABEL_66:
              v13 = FigSignalErrorAt();
              v22 = 0;
              v47 = 0;
LABEL_50:
              Count = v75;
              goto LABEL_51;
            }
            v30 = CFURLGetTypeID();
            if (v30 == CFGetTypeID(v21) || (v31 = CFNullGetTypeID(), v31 == CFGetTypeID(v21)))
            {
              v11[v18] = 1;
              v32 = malloc_type_calloc(1uLL, 0x6CuLL, 0x1060040CB727B4DuLL);
              v14[v18] = v32;
              if (!v32)
                goto LABEL_66;
              if ((v25 & 0x1D) == 1)
              {
                time1.start.value = value;
                time1.start.timescale = timescale;
                time1.start.flags = v25;
                time1.start.epoch = v26;
                *(_OWORD *)&time2.value = v80;
                time2.epoch = epoch;
                if (CMTimeCompare(&time1.start, &time2) < 0)
                  goto LABEL_66;
                v33 = CFURLGetTypeID();
                if (v33 != CFGetTypeID(v21) || !valuePtr)
                  goto LABEL_66;
                *(_QWORD *)(v14[v18] + 96) = CFRetain(v21);
                v34 = v14[v18];
                *(_DWORD *)(v34 + 104) = valuePtr;
                *(_QWORD *)v34 = value;
                *(_DWORD *)(v34 + 8) = timescale;
                *(_DWORD *)(v34 + 12) = v25;
                *(_QWORD *)(v34 + 16) = v26;
                v35 = v14[v18];
                v36 = v88;
                *(_QWORD *)(v35 + 24) = v87;
                *(_DWORD *)(v35 + 32) = v36;
                *(_DWORD *)(v35 + 36) = v28;
                *(_QWORD *)(v35 + 40) = v29;
                v32 = (_OWORD *)v14[v18];
              }
              v37 = MEMORY[0x1E0CA2E18];
              v32[3] = *MEMORY[0x1E0CA2E18];
              *((_QWORD *)v32 + 8) = *(_QWORD *)(v37 + 16);
              v38 = v14[v18];
              *(_QWORD *)(v38 + 72) = v87;
              *(_DWORD *)(v38 + 80) = v88;
              *(_DWORD *)(v38 + 84) = v28;
              *(_QWORD *)(v38 + 88) = v29;
            }
            else
            {
              MEMORY[0x19402F294](&FigMutableCompositionGetClassID_sRegisterFigMutableCompositionBaseTypeOnce, RegisterFigMutableCompositionBaseType);
              CFTypeID = CMBaseClassGetCFTypeID();
              if (CFTypeID != CFGetTypeID(v21))
                goto LABEL_66;
              if ((_UNKNOWN *)CMBaseObjectGetVTable() != &kMutableComposition_VTable)
                goto LABEL_66;
              if ((v25 & 0x1D) != 1)
                goto LABEL_66;
              time1.start.value = value;
              time1.start.timescale = timescale;
              time1.start.flags = v25;
              time1.start.epoch = v26;
              *(_OWORD *)&time2.value = v80;
              time2.epoch = epoch;
              if (CMTimeCompare(&time1.start, &time2) < 0 || !valuePtr)
                goto LABEL_66;
              v22 = *(_QWORD **)(CMBaseObjectGetDerivedStorage() + 8);
              MEMORY[0x19402EEEC](v22[1]);
              v40 = v22[2];
              if (v40 < 1)
              {
LABEL_49:
                v47 = 1;
                v13 = 4294954516;
                goto LABEL_50;
              }
              v20 = v22[4];
              while (*(_DWORD *)(v20 + 4) != valuePtr)
              {
                v20 += 168;
                if (!--v40)
                  goto LABEL_49;
              }
              time1.start.value = value;
              v41 = (uint64_t)v22;
              v42 = &v14[v18];
              time1.start.timescale = timescale;
              time1.start.flags = v25;
              time1.start.epoch = v26;
              v43 = (_QWORD *)v41;
              time2.value = v87;
              time2.timescale = v88;
              time2.flags = v28;
              v44 = &v11[v18];
              time2.epoch = v29;
              v45 = compositionTable_copyAssetSegmentsFromTrackForTimeRange(v41, v20, &time1.start, (uint64_t)&time2, v42, v44);
              if ((_DWORD)v45)
              {
                v13 = v45;
                v47 = 1;
                goto LABEL_81;
              }
              MEMORY[0x19402EF04](v43[1]);
              v46 = compositionEditSegment_validateSegments(*v42, *v44, 0);
              if ((_DWORD)v46)
              {
                v13 = v46;
                v47 = 0;
LABEL_81:
                Count = v75;
                v22 = v43;
LABEL_51:
                if (v47 && v22)
                {
                  v48 = v22[1];
LABEL_60:
                  MEMORY[0x19402EF04](v48, v20);
                }
LABEL_61:
                for (i = 0; i != Count; ++i)
                {
                  v52 = v14[i];
                  if (v52)
                  {
                    compositionEditSegment_releaseSegmentsAndRemoveURLsFromBag(v52, v11[i], 0);
                    free((void *)v14[i]);
                  }
                }
                goto LABEL_65;
              }
              mutableComposition_addAssetsForURLsFromCompositionForSegments(a1, (uint64_t)v21, *v42, *v44);
            }
            a4 = v74;
            Count = v75;
            if (++v18 == v75)
            {
              MEMORY[0x19402EEEC](*(_QWORD *)(v72 + 8));
              v49 = *(_QWORD *)(v72 + 16);
              if (v49 < 1)
              {
LABEL_58:
                v13 = 4294954516;
LABEL_59:
                v48 = *(_QWORD *)(v72 + 8);
                goto LABEL_60;
              }
              v50 = *(_QWORD *)(v72 + 32);
              while (*(_DWORD *)(v50 + 4) != a2)
              {
                v50 += 168;
                if (!--v49)
                  goto LABEL_58;
              }
              *(_OWORD *)&time2.value = v80;
              time2.epoch = epoch;
              v54 = *(_QWORD *)(v50 + 8);
              if (v54 >= 1)
              {
                v55 = *(_QWORD *)(v50 + 16) + 108 * v54;
                v56 = *(_OWORD *)(v55 - 60);
                v57 = *(_OWORD *)(v55 - 28);
                *(_OWORD *)&time1.start.epoch = *(_OWORD *)(v55 - 44);
                *(_OWORD *)&time1.duration.timescale = v57;
                *(_OWORD *)&time1.start.value = v56;
                CMTimeRangeGetEnd(&time2, &time1);
              }
              v58 = 0;
              v83.epoch = time2.epoch;
              v59 = v70->flags & 0x1D;
              *(_OWORD *)&v83.value = *(_OWORD *)&time2.value;
              v60 = v59 == 1;
              v61 = &v83;
              if (v60)
                v61 = v70;
              v84 = *v61;
              v85 = v84;
              do
              {
                v62 = (CMTime *)v14[v58];
                v63 = v11[v58];
                time1.start = v85;
                compositionEditSegment_adjustSegmentStartTimes(v62, v63, &time1.start);
                inserted = compositionTable_insertEditSegmentsIntoTrack(v72, (_QWORD *)v50, v14[v58], v11[v58]);
                if ((_DWORD)inserted)
                {
                  v13 = inserted;
                  goto LABEL_59;
                }
                if ((uint64_t)v11[v58] >= 1)
                {
                  v65 = 0;
                  v66 = 72;
                  do
                  {
                    v67 = v14[v58] + v66;
                    time1.start = v85;
                    v68 = *(_OWORD *)v67;
                    time2.epoch = *(_QWORD *)(v67 + 16);
                    *(_OWORD *)&time2.value = v68;
                    CMTimeAdd(&v85, &time1.start, &time2);
                    ++v65;
                    v66 += 108;
                  }
                  while (v65 < v11[v58]);
                }
                ++v58;
              }
              while (v58 != v75);
              ++*(_DWORD *)(v72 + 4);
              MEMORY[0x19402EF04](*(_QWORD *)(v72 + 8));
              if (*v69)
                mutableComposition_postPossiblyDeferredTracksChangedNotification();
              v13 = 0;
              goto LABEL_61;
            }
          }
        }
      }
    }
    v11 = 0;
    v14 = 0;
  }
LABEL_65:
  free(v14);
  free(v11);
  return v13;
}

uint64_t mutableComposition_AddAssetForURL(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t v5;
  uint64_t (*v6)(const void *, const __CFString *, int *, _QWORD, _QWORD);
  uint64_t v7;
  CFAllocatorRef v8;
  uint64_t CMBaseObject;
  uint64_t (*v10)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *);
  uint64_t v11;
  CFTypeRef cf;
  int v14;

  v5 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  v14 = 0;
  cf = 0;
  if (a2 && a3)
  {
    v6 = *(uint64_t (**)(const void *, const __CFString *, int *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 8);
    if (v6)
    {
      v7 = v6(a3, CFSTR("assetProperty_FormatReader"), &v14, 0, 0);
      if ((_DWORD)v7)
        return v7;
      if (v14 != 2)
        goto LABEL_9;
      v8 = CFGetAllocator(a3);
      CMBaseObject = FigAssetGetCMBaseObject(a3);
      v10 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
      if (v10)
      {
        v11 = v10(CMBaseObject, CFSTR("assetProperty_FormatReader"), v8, &cf);
        if ((_DWORD)v11)
        {
          if (cf)
            CFRelease(cf);
          return v11;
        }
        if ((_UNKNOWN *)CMBaseObjectGetVTable() != &kComposite_FormatReader_VTable)
LABEL_9:
          compositionTable_addAssetForURL(v5, a2, a3);
        return FigSignalErrorAt();
      }
    }
    return 4294954514;
  }
  return FigSignalErrorAt();
}

uint64_t mutableComposition_InsertMutableCompositionSegmentIntoTrack(uint64_t a1, int a2, const void *a3, int a4, uint64_t a5, CMTime *a6, uint64_t a7)
{
  uint64_t DerivedStorage;
  _QWORD *v14;
  uint64_t CFTypeID;
  CFTypeID v16;
  uint64_t v17;
  uint64_t v18;
  CMTime *v19;
  CMTimeEpoch v20;
  int v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  CMTimeEpoch epoch;
  uint64_t inserted;
  _QWORD *v37;
  CMTime *v38;
  uint64_t v40;
  __int128 v41;
  CMTime time2;
  uint64_t v43;
  CMTime *v44;
  CMTimeRange time1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v40 = *(_QWORD *)(DerivedStorage + 8);
  v43 = 0;
  v44 = 0;
  if (!a3)
  {
    v17 = 0;
    v19 = 0;
    v18 = 4294954516;
    goto LABEL_27;
  }
  v14 = (_QWORD *)DerivedStorage;
  v38 = a6;
  MEMORY[0x19402F294](&FigMutableCompositionGetClassID_sRegisterFigMutableCompositionBaseTypeOnce, RegisterFigMutableCompositionBaseType);
  CFTypeID = CMBaseClassGetCFTypeID();
  v16 = CFGetTypeID(a3);
  v17 = 0;
  v18 = 4294954516;
  v19 = 0;
  if (a4 && CFTypeID == v16)
  {
    if ((*(_DWORD *)(a5 + 12) & 0x1D) == 1)
    {
      v37 = v14;
      *(_OWORD *)&time1.start.value = *(_OWORD *)a5;
      time1.start.epoch = *(_QWORD *)(a5 + 16);
      v41 = *MEMORY[0x1E0CA2E68];
      *(_OWORD *)&time2.value = *MEMORY[0x1E0CA2E68];
      v20 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
      time2.epoch = v20;
      if ((CMTimeCompare(&time1.start, &time2) & 0x80000000) == 0)
      {
        v21 = *(_DWORD *)(a7 + 12);
        if ((v21 & 0x1D) == 1 || (v21 & 1) == 0)
        {
          if ((v21 & 0x1D) != 1
            || (*(_OWORD *)&time1.start.value = *(_OWORD *)a7,
                time1.start.epoch = *(_QWORD *)(a7 + 16),
                *(_OWORD *)&time2.value = v41,
                time2.epoch = v20,
                (CMTimeCompare(&time1.start, &time2) & 0x80000000) == 0))
          {
            if ((_UNKNOWN *)CMBaseObjectGetVTable() == &kMutableComposition_VTable)
            {
              v22 = *(_QWORD **)(CMBaseObjectGetDerivedStorage() + 8);
              MEMORY[0x19402EEEC](v22[1]);
              v24 = v22[2];
              if (v24 < 1)
              {
                v17 = 0;
                v19 = 0;
              }
              else
              {
                v23 = v22[4];
                while (*(_DWORD *)(v23 + 4) != a4)
                {
                  v23 += 168;
                  if (!--v24)
                  {
                    v17 = 0;
                    v19 = 0;
                    v18 = 4294954516;
                    goto LABEL_17;
                  }
                }
                *(_OWORD *)&time1.start.value = *(_OWORD *)a5;
                time1.start.epoch = *(_QWORD *)(a5 + 16);
                time2 = *v38;
                v26 = compositionTable_copyAssetSegmentsFromTrackForTimeRange((uint64_t)v22, v23, &time1.start, (uint64_t)&time2, &v44, &v43);
                if (!(_DWORD)v26)
                {
                  MEMORY[0x19402EF04](v22[1]);
                  v17 = v43;
                  v19 = v44;
                  v27 = compositionEditSegment_validateSegments((uint64_t)v44, v43, 0);
                  if ((_DWORD)v27)
                  {
                    v18 = v27;
                    goto LABEL_27;
                  }
                  mutableComposition_addAssetsForURLsFromCompositionForSegments(a1, (uint64_t)a3, (uint64_t)v19, v17);
                  MEMORY[0x19402EEEC](*(_QWORD *)(v40 + 8));
                  v28 = *(_QWORD *)(v40 + 16);
                  if (v28 < 1)
                  {
LABEL_24:
                    v18 = 4294954516;
                  }
                  else
                  {
                    v29 = *(_QWORD *)(v40 + 32);
                    while (*(_DWORD *)(v29 + 4) != a2)
                    {
                      v29 += 168;
                      if (!--v28)
                        goto LABEL_24;
                    }
                    if ((*(_DWORD *)(a7 + 12) & 0x1D) != 1)
                    {
                      *(_OWORD *)&time2.value = v41;
                      time2.epoch = v20;
                      v31 = *(_QWORD *)(v29 + 8);
                      if (v31 >= 1)
                      {
                        v32 = *(_QWORD *)(v29 + 16) + 108 * v31;
                        v33 = *(_OWORD *)(v32 - 60);
                        v34 = *(_OWORD *)(v32 - 28);
                        *(_OWORD *)&time1.start.epoch = *(_OWORD *)(v32 - 44);
                        *(_OWORD *)&time1.duration.timescale = v34;
                        *(_OWORD *)&time1.start.value = v33;
                        CMTimeRangeGetEnd(&time2, &time1);
                      }
                      time1.start = time2;
                      epoch = time2.epoch;
                      *(_OWORD *)a7 = *(_OWORD *)&time2.value;
                      *(_QWORD *)(a7 + 16) = epoch;
                    }
                    *(_OWORD *)&time1.start.value = *(_OWORD *)a7;
                    time1.start.epoch = *(_QWORD *)(a7 + 16);
                    compositionEditSegment_adjustSegmentStartTimes(v19, v17, &time1.start);
                    inserted = compositionTable_insertEditSegmentsIntoTrack(v40, (_QWORD *)v29, (uint64_t)v19, v17);
                    if (!(_DWORD)inserted)
                    {
                      ++*(_DWORD *)(v40 + 4);
                      MEMORY[0x19402EF04](*(_QWORD *)(v40 + 8));
                      if (*v37)
                        mutableComposition_postPossiblyDeferredTracksChangedNotification();
                      v18 = 0;
                      goto LABEL_27;
                    }
                    v18 = inserted;
                  }
                  v25 = *(_QWORD *)(v40 + 8);
LABEL_26:
                  MEMORY[0x19402EF04](v25, v23);
                  goto LABEL_27;
                }
                v18 = v26;
                v17 = v43;
                v19 = v44;
              }
LABEL_17:
              v25 = v22[1];
              goto LABEL_26;
            }
          }
          v18 = FigSignalErrorAt();
        }
      }
    }
    v17 = 0;
    v19 = 0;
  }
LABEL_27:
  compositionEditSegment_releaseSegmentsAndRemoveURLsFromBag((uint64_t)v19, v17, 0);
  free(v19);
  return v18;
}

uint64_t mutableComposition_InsertMutableCompositionSegment(uint64_t a1, const void *a2, CMTime *a3, CMTime *a4, CMTime *a5)
{
  uint64_t DerivedStorage;
  _QWORD *v9;
  uint64_t v10;
  uint64_t CFTypeID;
  CMTimeEpoch v12;
  CMTimeFlags flags;
  uint64_t v14;
  int64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  const void **v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  CMTime *v37;
  uint64_t v38;
  uint64_t inserted;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t i;
  uint64_t v47;
  const void *v48;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  _QWORD *v55;
  const void **v56;
  uint64_t v57;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  CMTime time2;
  CMTime time1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    goto LABEL_63;
  v9 = (_QWORD *)DerivedStorage;
  v10 = *(_QWORD *)(DerivedStorage + 8);
  MEMORY[0x19402F294](&FigMutableCompositionGetClassID_sRegisterFigMutableCompositionBaseTypeOnce, RegisterFigMutableCompositionBaseType);
  CFTypeID = CMBaseClassGetCFTypeID();
  if (CFTypeID != CFGetTypeID(a2))
    goto LABEL_63;
  if ((a3->flags & 0x1D) != 1)
    goto LABEL_63;
  time1 = *a3;
  v60 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&time2.value = *MEMORY[0x1E0CA2E68];
  v12 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  time2.epoch = v12;
  if (CMTimeCompare(&time1, &time2) < 0
    || (time1 = *a4, *(_OWORD *)&time2.value = v60, time2.epoch = v12, CMTimeCompare(&time1, &time2) < 1)
    || (flags = a5->flags, (flags & 0x1D) != 1) && (flags & 1) != 0)
  {
LABEL_63:
    v33 = 0;
    v18 = 0;
    v17 = 0;
    v16 = 0;
    v32 = 0;
    v45 = 4294954516;
    goto LABEL_56;
  }
  if ((flags & 0x1D) == 1
    && (time1 = *a5, *(_OWORD *)&time2.value = v60, time2.epoch = v12, CMTimeCompare(&time1, &time2) < 0)
    || (_UNKNOWN *)CMBaseObjectGetVTable() != &kMutableComposition_VTable)
  {
    v45 = FigSignalErrorAt();
    v33 = 0;
    v18 = 0;
    v17 = 0;
    v16 = 0;
    v32 = 0;
    goto LABEL_56;
  }
  v14 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  MEMORY[0x19402EEEC](*(_QWORD *)(v14 + 8));
  v61 = v14;
  v15 = *(_QWORD *)(v14 + 16);
  v16 = malloc_type_calloc(v15, 8uLL, 0x2004093837F09uLL);
  if (!v16)
  {
    v17 = 0;
    goto LABEL_66;
  }
  v17 = malloc_type_calloc(v15, 8uLL, 0x100004000313F17uLL);
  if (!v17)
  {
LABEL_66:
    v18 = 0;
LABEL_67:
    v45 = FigSignalErrorAt();
    v33 = 0;
LABEL_62:
    MEMORY[0x19402EF04](*(_QWORD *)(v61 + 8));
    v32 = 0;
    goto LABEL_47;
  }
  v18 = (const void **)malloc_type_calloc(v15, 8uLL, 0x6004044C4A2DFuLL);
  if (!v18)
    goto LABEL_67;
  v19 = malloc_type_calloc(v15, 4uLL, 0x100004052888210uLL);
  if (!v19)
    goto LABEL_67;
  v57 = (uint64_t)a2;
  v50 = v9;
  v51 = a1;
  v53 = v19;
  v54 = v10;
  v52 = v15;
  if (v15 >= 1)
  {
    v20 = 0;
    v21 = 0;
    v22 = v52;
    v23 = v19;
    v55 = v16;
    v56 = v18;
    while (1)
    {
      v24 = (unsigned int *)(*(_QWORD *)(v61 + 32) + v20);
      v25 = &v16[v21];
      v26 = v17;
      v27 = &v17[v21];
      time1 = *a3;
      time2 = *a4;
      v28 = compositionTable_copyAssetSegmentsFromTrackForTimeRange(v61, (unint64_t)v24, &time1, (uint64_t)&time2, v25, v27);
      if ((_DWORD)v28 || (v28 = compositionEditSegment_validateSegments(*v25, *v27, 0), (_DWORD)v28))
      {
        v45 = v28;
        v17 = v26;
        v16 = v55;
        v18 = v56;
        goto LABEL_61;
      }
      *v23 = *v24;
      v18 = v56;
      v29 = compositionTableTrack_copyTrackFormatDescriptionArrayForTrackCompatibility(v61, v24, &v56[v21]);
      v17 = v26;
      if ((_DWORD)v29)
        break;
      ++v21;
      ++v23;
      v20 += 168;
      --v22;
      v16 = v55;
      if (!v22)
        goto LABEL_21;
    }
    v45 = v29;
    v16 = v55;
LABEL_61:
    v15 = v52;
    v33 = v53;
    goto LABEL_62;
  }
LABEL_21:
  MEMORY[0x19402EF04](*(_QWORD *)(v61 + 8));
  v30 = v54;
  MEMORY[0x19402EEEC](*(_QWORD *)(v54 + 8));
  if ((a5->flags & 0x1D) != 1)
  {
    compositionTable_getDuration((CMTime *)v54, &time1);
    *a5 = time1;
  }
  v31 = (uint64_t *)malloc_type_calloc(*(_QWORD *)(v54 + 16), 8uLL, 0x100004000313F17uLL);
  v32 = v31;
  v15 = v52;
  v33 = v53;
  if (v31)
  {
    v34 = *(_QWORD *)(v54 + 16);
    v62 = 0;
    if (v34 >= 1)
    {
      v35 = 0;
      do
      {
        v31[v35] = v35;
        v62 = ++v35;
      }
      while (v35 < *(_QWORD *)(v54 + 16));
    }
    if (v52 < 1)
    {
      v43 = v34;
LABEL_43:
      time1 = *a5;
      time2 = *a4;
      inserted = tableTrack_InsertEmptyEditsInTracks(v51, v32, v43, (uint64_t)&time1, &time2);
      if (!(_DWORD)inserted)
      {
        ++*(_DWORD *)(v54 + 4);
        MEMORY[0x19402EF04](*(_QWORD *)(v54 + 8));
        if (*v50)
          mutableComposition_postPossiblyDeferredTracksChangedNotification();
        v45 = 0;
        goto LABEL_47;
      }
    }
    else
    {
      v36 = 0;
      while (1)
      {
        v62 = 0;
        mutableComposition_addAssetsForURLsFromCompositionForSegments(v51, v57, v16[v36], v17[v36]);
        v37 = (CMTime *)v16[v36];
        v38 = v17[v36];
        time1 = *a5;
        compositionEditSegment_adjustSegmentStartTimes(v37, v38, &time1);
        inserted = compositionTable_insertEditSegmentsFromAsset(v51, v32, v34, v18[v36], *((_DWORD *)v53 + v36), v16[v36], v17[v36], &v62);
        if ((_DWORD)inserted)
          break;
        if (v34 < 1)
        {
          v43 = v34;
        }
        else
        {
          v40 = 0;
          v41 = 0;
          v42 = v62;
          v43 = v34;
          do
          {
            v44 = v32[v41];
            if (v44 == v42)
            {
              --v43;
            }
            else
            {
              if (v41 != v40)
                v32[v40] = v44;
              ++v40;
            }
            ++v41;
          }
          while (v34 != v41);
        }
        ++v36;
        v34 = v43;
        if (v36 == v52)
          goto LABEL_43;
      }
    }
    v45 = inserted;
    v30 = v54;
  }
  else
  {
    v45 = 4294954510;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v30 + 8));
LABEL_47:
  if (v16 && v15 >= 1)
  {
    for (i = 0; i != v15; ++i)
    {
      v47 = v16[i];
      if (v47)
      {
        compositionEditSegment_releaseSegmentsAndRemoveURLsFromBag(v47, v17[i], 0);
        free((void *)v16[i]);
      }
      if (v18)
      {
        v48 = v18[i];
        if (v48)
          CFRelease(v48);
      }
    }
  }
LABEL_56:
  free(v16);
  free(v17);
  free(v18);
  free(v33);
  free(v32);
  return v45;
}

uint64_t mutableComposition_GetTrackCompatibleWithMutableCompositionTrack(uint64_t a1, const void *a2, int a3, _DWORD *a4)
{
  _QWORD *v7;
  uint64_t CFTypeID;
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  const void *v13;
  int v14;
  uint64_t v15;
  uint64_t CompatibleTrackForFormatDescriptionArrayAndMediaType;
  int v17;
  const void *v19;

  v7 = *(_QWORD **)(CMBaseObjectGetDerivedStorage() + 8);
  v19 = 0;
  if (!a2)
    return 4294954516;
  if (!a3)
    return FigSignalErrorAt();
  MEMORY[0x19402F294](&FigMutableCompositionGetClassID_sRegisterFigMutableCompositionBaseTypeOnce, RegisterFigMutableCompositionBaseType);
  CFTypeID = CMBaseClassGetCFTypeID();
  if (CFTypeID != CFGetTypeID(a2))
    return 4294954516;
  if ((_UNKNOWN *)CMBaseObjectGetVTable() == &kMutableComposition_VTable)
  {
    v9 = *(_QWORD **)(CMBaseObjectGetDerivedStorage() + 8);
    MEMORY[0x19402EEEC](v9[1]);
    v10 = v9[2];
    if (v10 < 1)
    {
LABEL_9:
      v12 = FigSignalErrorAt();
      v13 = 0;
    }
    else
    {
      v11 = (unsigned int *)v9[4];
      while (v11[1] != a3)
      {
        v11 += 42;
        if (!--v10)
          goto LABEL_9;
      }
      v14 = *v11;
      v15 = compositionTableTrack_copyTrackFormatDescriptionArrayForTrackCompatibility((uint64_t)v9, v11, &v19);
      if (!(_DWORD)v15)
      {
        MEMORY[0x19402EF04](v9[1]);
        MEMORY[0x19402EEEC](v7[1]);
        v13 = v19;
        CompatibleTrackForFormatDescriptionArrayAndMediaType = compositionTable_findCompatibleTrackForFormatDescriptionArrayAndMediaType((uint64_t)v7, 0, v7[2], v19, v14);
        if (CompatibleTrackForFormatDescriptionArrayAndMediaType < 0)
        {
          MEMORY[0x19402EF04](v7[1]);
          v12 = 4294954453;
          if (!v13)
            return v12;
        }
        else
        {
          v17 = *(_DWORD *)(v7[4] + 168 * CompatibleTrackForFormatDescriptionArrayAndMediaType + 4);
          MEMORY[0x19402EF04](v7[1]);
          v12 = 0;
          if (a4)
            *a4 = v17;
          if (!v13)
            return v12;
        }
LABEL_17:
        CFRelease(v13);
        return v12;
      }
      v12 = v15;
      v13 = v19;
    }
    MEMORY[0x19402EF04](v9[1]);
    if (!v13)
      return v12;
    goto LABEL_17;
  }
  return FigSignalErrorAt();
}

uint64_t mutableComposition_CopyAsset(const void *a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage;
  CFAllocatorRef v9;
  uint64_t v10;
  uint64_t (*v11)(const void *, uint64_t, uint64_t, CFTypeRef *);
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  CFTypeRef cf;
  CFTypeRef v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = CFGetAllocator(a1);
  v17 = 0;
  if (!a4)
    return 0;
  v10 = (uint64_t)v9;
  if (!(_DWORD)a2)
  {
    v14 = *(const void **)(DerivedStorage + 24);
    if (v14)
    {
      v17 = CFRetain(v14);
      goto LABEL_12;
    }
  }
  cf = 0;
  v11 = *(uint64_t (**)(const void *, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 16);
  if (!v11)
    return 4294954514;
  v12 = v11(a1, a2, a3, &cf);
  if ((_DWORD)v12)
    return v12;
  v13 = FigAssetCreateWithFormatReader(v10, cf, 0, 0, &v17);
  CFRelease(cf);
  if (!(_DWORD)a2 && !(_DWORD)v13)
  {
    *(_QWORD *)(DerivedStorage + 24) = CFRetain(v17);
LABEL_12:
    v13 = 0;
    *a4 = v17;
    return v13;
  }
  if (!(_DWORD)v13)
    goto LABEL_12;
  return v13;
}

uint64_t compositionTable_createCopy(const __CFAllocator *a1, uint64_t a2, _QWORD *a3)
{
  void *v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CFTypeRef *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const __CFDictionary *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const __CFDictionary *v30;
  const __CFDictionary *v31;
  const void *v32;
  __int128 v33;
  const void *v34;
  const void *v35;
  const void *v36;
  size_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const void *v42;
  uint64_t result;

  v6 = malloc_type_calloc(0xA8uLL, 1uLL, 0x119764C8uLL);
  if ((const __CFAllocator *)*MEMORY[0x1E0C9AE38] == a1)
    a1 = CFGetAllocator(*(CFTypeRef *)(a2 + 64));
  v7 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v6 = 1;
  *((_DWORD *)v6 + 1) = v7;
  *((_QWORD *)v6 + 1) = FigSimpleMutexCreate();
  MEMORY[0x19402EEEC](*(_QWORD *)(a2 + 8));
  *((_QWORD *)v6 + 9) = FigSimpleMutexCreate();
  v8 = *(_QWORD *)(a2 + 16);
  *((_QWORD *)v6 + 2) = v8;
  *((_DWORD *)v6 + 6) = *(_DWORD *)(a2 + 24);
  if (v8 < 1)
  {
    *((_QWORD *)v6 + 4) = 0;
  }
  else
  {
    v9 = malloc_type_malloc(168 * v8, 0x1060040CA997719uLL);
    *((_QWORD *)v6 + 4) = v9;
    memcpy(v9, *(const void **)(a2 + 32), 168 * *((_QWORD *)v6 + 2));
    if (*((uint64_t *)v6 + 2) >= 1)
    {
      v10 = 0;
      v11 = *((_QWORD *)v6 + 4);
      do
      {
        v12 = *(_QWORD *)(v11 + 24);
        if (v12 < 1)
        {
          *(_QWORD *)(v11 + 16) = 0;
        }
        else
        {
          v13 = (char *)malloc_type_malloc(108 * v12, 0x1060040CB727B4DuLL);
          v14 = v13;
          v15 = *(_QWORD *)(v11 + 8);
          if (v15 <= 0)
          {
            *(_QWORD *)(v11 + 16) = v13;
          }
          else
          {
            memcpy(v13, *(const void **)(v11 + 16), 108 * v15);
            v16 = *(_QWORD *)(v11 + 8);
            *(_QWORD *)(v11 + 16) = v14;
            if (v16 >= 1)
            {
              v17 = 0;
              v18 = (CFTypeRef *)(v14 + 96);
              do
              {
                if (*v18)
                {
                  CFRetain(*v18);
                  v16 = *(_QWORD *)(v11 + 8);
                }
                ++v17;
                v18 = (CFTypeRef *)((char *)v18 + 108);
              }
              while (v17 < v16);
            }
          }
        }
        v19 = *(const void **)(v11 + 32);
        if (v19)
          CFRetain(v19);
        v20 = *(const void **)(v11 + 40);
        if (v20)
          CFRetain(v20);
        v21 = *(const void **)(v11 + 48);
        if (v21)
          CFRetain(v21);
        v22 = *(const void **)(v11 + 56);
        if (v22)
          CFRetain(v22);
        v23 = *(const void **)(v11 + 64);
        if (v23)
          CFRetain(v23);
        v24 = *(const __CFDictionary **)(v11 + 72);
        if (v24)
          *(_QWORD *)(v11 + 72) = CFDictionaryCreateMutableCopy(a1, 0, v24);
        v25 = *(const void **)(v11 + 96);
        if (v25)
          CFRetain(v25);
        v26 = *(const void **)(v11 + 80);
        if (v26)
          CFRetain(v26);
        v27 = *(const void **)(v11 + 88);
        if (v27)
          CFRetain(v27);
        v28 = *(const void **)(v11 + 104);
        if (v28)
          CFRetain(v28);
        v29 = *(const void **)(v11 + 112);
        if (v29)
          CFRetain(v29);
        ++v10;
        v11 += 168;
      }
      while (v10 < *((_QWORD *)v6 + 2));
    }
  }
  *((_QWORD *)v6 + 5) = CFBagCreateMutableCopy(a1, 0, *(CFBagRef *)(a2 + 40));
  v30 = *(const __CFDictionary **)(a2 + 48);
  if (v30)
    *((_QWORD *)v6 + 6) = CFDictionaryCreateMutableCopy(a1, 0, v30);
  MEMORY[0x19402EF04](*(_QWORD *)(a2 + 8));
  MEMORY[0x19402EEEC](*(_QWORD *)(a2 + 72));
  v31 = *(const __CFDictionary **)(a2 + 80);
  if (v31)
    *((_QWORD *)v6 + 10) = CFDictionaryCreateMutableCopy(a1, 0, v31);
  v32 = *(const void **)(a2 + 112);
  *((_QWORD *)v6 + 14) = v32;
  *((_QWORD *)v6 + 11) = *(_QWORD *)(a2 + 88);
  v33 = *(_OWORD *)(a2 + 96);
  *((_OWORD *)v6 + 6) = v33;
  if (v32)
  {
    CFRetain(v32);
    v34 = (const void *)*((_QWORD *)v6 + 12);
    if (!v34)
      goto LABEL_48;
    goto LABEL_47;
  }
  v34 = (const void *)v33;
  if ((_QWORD)v33)
LABEL_47:
    CFRetain(v34);
LABEL_48:
  v35 = (const void *)*((_QWORD *)v6 + 11);
  if (v35)
    CFRetain(v35);
  v36 = (const void *)*((_QWORD *)v6 + 13);
  if (v36)
    CFRetain(v36);
  MEMORY[0x19402EF04](*(_QWORD *)(a2 + 72));
  *((_QWORD *)v6 + 7) = FigSimpleMutexCreate();
  MEMORY[0x19402EEEC](*(_QWORD *)(a2 + 56));
  *((_QWORD *)v6 + 8) = CFDictionaryCreateMutableCopy(a1, 0, *(CFDictionaryRef *)(a2 + 64));
  MEMORY[0x19402EF04](*(_QWORD *)(a2 + 56));
  *((_QWORD *)v6 + 15) = FigSimpleMutexCreate();
  MEMORY[0x19402EEEC](*(_QWORD *)(a2 + 120));
  v37 = *(_QWORD *)(a2 + 128);
  *((_QWORD *)v6 + 16) = v37;
  v38 = malloc_type_calloc(v37, 0x10uLL, 0x1060040C2E02434uLL);
  *((_QWORD *)v6 + 17) = v38;
  memcpy(v38, *(const void **)(a2 + 136), 16 * *((_QWORD *)v6 + 16));
  v39 = *(_QWORD *)(a2 + 144);
  *((_QWORD *)v6 + 18) = v39;
  if (v39 >= 2)
  {
    v40 = 1;
    v41 = 16;
    do
    {
      v42 = *(const void **)(*((_QWORD *)v6 + 17) + v41);
      if (v42)
      {
        CFRetain(v42);
        v39 = *((_QWORD *)v6 + 18);
      }
      ++v40;
      v41 += 16;
    }
    while (v40 < v39);
  }
  *((_QWORD *)v6 + 19) = CFDictionaryCreateMutableCopy(a1, 0, *(CFDictionaryRef *)(a2 + 152));
  MEMORY[0x19402EF04](*(_QWORD *)(a2 + 120));
  *((_QWORD *)v6 + 20) = *(_QWORD *)(a2 + 160);
  result = FigAtomicIncrement32();
  *a3 = v6;
  return result;
}

void composite_formatReader_Finalize()
{
  uint64_t *DerivedStorage;
  __CFDictionary *v1;
  const void *v2;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  compositionTable_releaseAndClear(DerivedStorage);
  if (DerivedStorage[1])
  {
    FigSimpleMutexDestroy();
    DerivedStorage[1] = 0;
  }
  v1 = (__CFDictionary *)DerivedStorage[2];
  if (v1)
  {
    CFDictionaryRemoveAllValues(v1);
    v2 = (const void *)DerivedStorage[2];
    if (v2)
    {
      CFRelease(v2);
      DerivedStorage[2] = 0;
    }
  }
}

__CFString *composite_formatReader_CopyDebugDescription()
{
  uint64_t DerivedStorage;
  __CFString *Mutable;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __CFString *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v2 = *(_QWORD *)DerivedStorage;
  v3 = *(_QWORD *)(*(_QWORD *)DerivedStorage + 32);
  CFStringAppend(Mutable, CFSTR("[Composite FigFormatReader]{\n"));
  if (*(uint64_t *)(v2 + 16) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = compositionTableTrack_CopyDebugDescription(v3);
      if (v4)
        CFStringAppend(Mutable, CFSTR(",\n"));
      CFStringAppend(Mutable, CFSTR("  "));
      CFStringAppend(Mutable, v5);
      if (v5)
        CFRelease(v5);
      ++v4;
      v3 += 168;
    }
    while (v4 < *(_QWORD *)(v2 + 16));
  }
  CFStringAppend(Mutable, CFSTR("\n}"));
  return Mutable;
}

uint64_t composite_formatReader_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFMutableDictionaryRef *a4)
{
  _QWORD **DerivedStorage;
  _QWORD *v9;
  _QWORD **v10;
  CFTypeRef *v11;
  __CFDictionary *v12;
  uint64_t v14;
  uint64_t v15;
  const __CFDictionary *v16;
  CFMutableDictionaryRef MutableCopy;
  uint64_t v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  __CFArray *Mutable;
  __CFArray *v24;
  CFMutableArrayRef v25;
  __CFArray *v26;
  const __CFDictionary *v27;
  const __CFDictionary *v28;
  const __CFDictionary *v29;
  const __CFDictionary *v30;
  CMTime v31;
  CMTime v32;
  const void *v33;
  const void *v34;
  const void *v35;
  const void *v36;

  DerivedStorage = (_QWORD **)CMBaseObjectGetDerivedStorage();
  v9 = *DerivedStorage;
  v36 = 0;
  v34 = 0;
  v35 = 0;
  v33 = 0;
  if (!a2)
    return FigSignalErrorAt();
  v10 = DerivedStorage;
  if (!CFEqual(a2, CFSTR("Identifier")))
  {
    if (CFEqual(a2, CFSTR("Duration"))
      || CFEqual(a2, CFSTR("NominalDuration"))
      || CFEqual(a2, CFSTR("EstimatedDuration")))
    {
      v14 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
      v32 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      MEMORY[0x19402EEEC](*(_QWORD *)(v14 + 8));
      compositionTable_getDuration((CMTime *)v14, &v32);
      MEMORY[0x19402EF04](*(_QWORD *)(v14 + 8));
      v31 = v32;
      v12 = CMTimeCopyAsDictionary(&v31, a3);
      goto LABEL_10;
    }
    if (CFEqual(a2, CFSTR("AccurateDurationIsKnown")) || CFEqual(a2, CFSTR("SampleCursorTimeAccuracyIsExact")))
    {
      v11 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      goto LABEL_4;
    }
    if (CFEqual(a2, CFSTR("TrackReferenceDictionary")))
    {
      MEMORY[0x19402EEEC](v9[1]);
      v16 = (const __CFDictionary *)v9[6];
      if (v16)
        MutableCopy = CFDictionaryCreateMutableCopy(a3, 0, v16);
      else
        MutableCopy = 0;
      *a4 = MutableCopy;
      MEMORY[0x19402EF04](v9[1]);
      return 0;
    }
    if (CFEqual(a2, CFSTR("CanMutate")))
    {
      v11 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      if (!*((_BYTE *)v10 + 24))
        v11 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
      goto LABEL_4;
    }
    if (CFEqual(a2, CFSTR("AlternateGroupArray")))
    {
      v12 = compositeFormatReader_copyAlternateGroupArray(a1, a3);
      goto LABEL_10;
    }
    if (CFEqual(a2, CFSTR("QuickTimeUserDataReader")))
    {
      v18 = compositionTable_copyQuickTimeUserDataReader(v9, a4);
      if (!(_DWORD)v18)
        goto LABEL_29;
      return v18;
    }
    if (CFEqual(a2, CFSTR("QuickTimeMetadataReader")))
    {
      v18 = compositionTable_copyQuickTimeMetadataReader(v9, a4);
      if ((_DWORD)v18)
        return v18;
LABEL_29:
      if (*a4)
        return 0;
      else
        return 4294954513;
    }
    if (CFEqual(a2, CFSTR("ISOUserDataReader")))
    {
      v18 = compositionTable_copyISOUserDataReader(v9, a4);
      if ((_DWORD)v18)
        return v18;
      goto LABEL_29;
    }
    if (CFEqual(a2, CFSTR("iTunesMetadataReader")))
    {
      v18 = compositionTable_copyiTunesMetadataReader(v9, a4);
      if ((_DWORD)v18)
        return v18;
      goto LABEL_29;
    }
    if (CFEqual(a2, CFSTR("MetadataReaders")))
    {
      compositionTable_copyQuickTimeUserDataReader(v9, &v36);
      compositionTable_copyQuickTimeMetadataReader(v9, &v35);
      compositionTable_copyISOUserDataReader(v9, &v34);
      compositionTable_copyiTunesMetadataReader(v9, &v33);
      v19 = v36;
      v20 = v34;
      v21 = v35;
      v22 = v33;
      if (!v36 && !v34 && !v35 && !v33)
        return 0;
      Mutable = CFArrayCreateMutable(a3, 0, MEMORY[0x1E0C9B378]);
      if (Mutable)
      {
        v24 = Mutable;
        if (v21)
          CFArrayAppendValue(Mutable, v21);
        if (v22)
          CFArrayAppendValue(v24, v22);
        if (v19)
          CFArrayAppendValue(v24, v19);
        if (v20)
          CFArrayAppendValue(v24, v20);
        v15 = 0;
        *a4 = v24;
        if (!v19)
          goto LABEL_57;
      }
      else
      {
        v15 = FigSignalErrorAt();
        if (!v19)
          goto LABEL_57;
      }
      CFRelease(v19);
LABEL_57:
      if (v21)
        CFRelease(v21);
      if (v20)
        CFRelease(v20);
      if (v22)
        CFRelease(v22);
      return v15;
    }
    if (!CFEqual(a2, CFSTR("MetadataReaderTypes")))
      return 4294954512;
    v25 = CFArrayCreateMutable(a3, 0, MEMORY[0x1E0C9B378]);
    if (v25)
    {
      v26 = v25;
      v27 = (const __CFDictionary *)v9[10];
      if (v27)
      {
        if (CFDictionaryGetValue(v27, CFSTR("com.apple.itunes")))
          CFArrayAppendValue(v26, CFSTR("iTunesMetadataReader"));
        v28 = (const __CFDictionary *)v9[10];
        if (v28)
        {
          if (CFDictionaryGetValue(v28, CFSTR("com.apple.quicktime.mdta")))
            CFArrayAppendValue(v26, CFSTR("QuickTimeMetadataReader"));
          v29 = (const __CFDictionary *)v9[10];
          if (v29)
          {
            if (CFDictionaryGetValue(v29, CFSTR("com.apple.quicktime.udta")))
              CFArrayAppendValue(v26, CFSTR("QuickTimeUserDataReader"));
            v30 = (const __CFDictionary *)v9[10];
            if (v30 && CFDictionaryGetValue(v30, CFSTR("org.mp4ra")))
              CFArrayAppendValue(v26, CFSTR("ISOUserDataReader"));
          }
        }
      }
      if (CFArrayGetCount(v26) >= 1)
      {
        v15 = 0;
        *a4 = v26;
        return v15;
      }
      CFRelease(v26);
      return 0;
    }
    return FigSignalErrorAt();
  }
  v11 = (CFTypeRef *)kFigFormatReaderIdentifier_Composite;
LABEL_4:
  v12 = (__CFDictionary *)CFRetain(*v11);
LABEL_10:
  v15 = 0;
  *a4 = v12;
  return v15;
}

CFMutableArrayRef compositeFormatReader_copyAlternateGroupArray(uint64_t a1, const __CFAllocator *a2)
{
  uint64_t DerivedStorage;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  __CFDictionary *Mutable;
  uint64_t v10;
  uint64_t v11;
  const CFArrayCallBacks *v12;
  uint64_t v13;
  const void *v14;
  CFMutableArrayRef v15;
  CFIndex Count;
  CFMutableArrayRef v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(_QWORD **)DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(*(_QWORD *)DerivedStorage + 8));
  v5 = v4[2];
  if (v5 < 1)
    goto LABEL_19;
  v6 = 0;
  v7 = (uint64_t *)(v4[4] + 104);
  do
  {
    v8 = *v7;
    v7 += 21;
    if (v8)
      v6 = 1;
    --v5;
  }
  while (v5);
  if (v6)
  {
    Mutable = CFDictionaryCreateMutable(a2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if ((uint64_t)v4[2] >= 1)
    {
      v10 = 0;
      v11 = 0;
      v12 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      do
      {
        v13 = v4[4] + v10;
        v14 = *(const void **)(v13 + 104);
        if (v14)
        {
          if (CFDictionaryGetValue(Mutable, *(const void **)(v13 + 104)))
          {
            FigCFArrayAppendInt32();
          }
          else
          {
            v15 = CFArrayCreateMutable(a2, 0, v12);
            FigCFArrayAppendInt32();
            CFDictionarySetValue(Mutable, v14, v15);
            if (v15)
              CFRelease(v15);
          }
        }
        ++v11;
        v10 += 168;
      }
      while (v11 < v4[2]);
    }
    Count = CFDictionaryGetCount(Mutable);
    v17 = CFArrayCreateMutable(a2, Count, MEMORY[0x1E0C9B378]);
    if (v17)
      CFDictionaryApplyFunction(Mutable, (CFDictionaryApplierFunction)copyValuesToArray, v17);
    MEMORY[0x19402EF04](v4[1]);
    if (Mutable)
      CFRelease(Mutable);
  }
  else
  {
LABEL_19:
    MEMORY[0x19402EF04](v4[1]);
    return 0;
  }
  return v17;
}

uint64_t compositionTable_copyQuickTimeUserDataReader(_QWORD *a1, _QWORD *a2)
{
  CFTypeRef v4;
  CFTypeRef *v5;
  uint64_t v6;
  const __CFDictionary *v7;
  const void *Value;

  MEMORY[0x19402EEEC](a1[9]);
  v5 = (CFTypeRef *)(a1 + 11);
  v4 = (CFTypeRef)a1[11];
  if (v4)
  {
    v6 = 0;
LABEL_8:
    v4 = CFRetain(v4);
    goto LABEL_9;
  }
  v7 = (const __CFDictionary *)a1[10];
  if (v7 && (Value = CFDictionaryGetValue(v7, CFSTR("com.apple.quicktime.udta"))) != 0)
    v6 = FigMetadataReaderCreateForQuickTimeUserDataArray(*MEMORY[0x1E0C9AE00], Value, a1 + 11);
  else
    v6 = 0;
  v4 = *v5;
  if (*v5)
    goto LABEL_8;
LABEL_9:
  *a2 = v4;
  MEMORY[0x19402EF04](a1[9]);
  return v6;
}

uint64_t compositionTable_copyQuickTimeMetadataReader(_QWORD *a1, _QWORD *a2)
{
  CFTypeRef v4;
  CFTypeRef *v5;
  uint64_t v6;
  const __CFDictionary *v7;
  const void *Value;

  MEMORY[0x19402EEEC](a1[9]);
  v5 = (CFTypeRef *)(a1 + 12);
  v4 = (CFTypeRef)a1[12];
  if (v4)
  {
    v6 = 0;
LABEL_8:
    v4 = CFRetain(v4);
    goto LABEL_9;
  }
  v7 = (const __CFDictionary *)a1[10];
  if (v7 && (Value = CFDictionaryGetValue(v7, CFSTR("com.apple.quicktime.mdta"))) != 0)
    v6 = FigMetadataReaderCreateForQuickTimeMetadataArray(*MEMORY[0x1E0C9AE00], Value, a1 + 12);
  else
    v6 = 0;
  v4 = *v5;
  if (*v5)
    goto LABEL_8;
LABEL_9:
  *a2 = v4;
  MEMORY[0x19402EF04](a1[9]);
  return v6;
}

uint64_t compositionTable_copyISOUserDataReader(_QWORD *a1, _QWORD *a2)
{
  CFTypeRef v4;
  CFTypeRef *v5;
  uint64_t v6;
  const __CFDictionary *v7;
  const void *Value;

  MEMORY[0x19402EEEC](a1[9]);
  v5 = (CFTypeRef *)(a1 + 13);
  v4 = (CFTypeRef)a1[13];
  if (v4)
  {
    v6 = 0;
LABEL_8:
    v4 = CFRetain(v4);
    goto LABEL_9;
  }
  v7 = (const __CFDictionary *)a1[10];
  if (v7 && (Value = CFDictionaryGetValue(v7, CFSTR("org.mp4ra"))) != 0)
    v6 = FigMetadataReaderCreateForISOUserDataArray(*MEMORY[0x1E0C9AE00], Value, a1 + 13);
  else
    v6 = 0;
  v4 = *v5;
  if (*v5)
    goto LABEL_8;
LABEL_9:
  *a2 = v4;
  MEMORY[0x19402EF04](a1[9]);
  return v6;
}

uint64_t compositionTable_copyiTunesMetadataReader(_QWORD *a1, _QWORD *a2)
{
  CFTypeRef v4;
  CFTypeRef *v5;
  uint64_t ForiTunesMetadataArray;
  const __CFDictionary *v7;
  const void *Value;

  MEMORY[0x19402EEEC](a1[9]);
  v5 = (CFTypeRef *)(a1 + 14);
  v4 = (CFTypeRef)a1[14];
  if (v4)
  {
    ForiTunesMetadataArray = 0;
LABEL_8:
    v4 = CFRetain(v4);
    goto LABEL_9;
  }
  v7 = (const __CFDictionary *)a1[10];
  if (v7 && (Value = CFDictionaryGetValue(v7, CFSTR("com.apple.itunes"))) != 0)
    ForiTunesMetadataArray = FigMetadataReaderCreateForiTunesMetadataArray(*MEMORY[0x1E0C9AE00], Value, a1 + 14);
  else
    ForiTunesMetadataArray = 0;
  v4 = *v5;
  if (*v5)
    goto LABEL_8;
LABEL_9:
  *a2 = v4;
  MEMORY[0x19402EF04](a1[9]);
  return ForiTunesMetadataArray;
}

CMTime *compositionTable_getDuration@<X0>(CMTime *result@<X0>, CMTime *a2@<X8>)
{
  uint64_t v3;
  CMTimeEpoch v4;
  CMTime *v5;
  CMTimeEpoch v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  CMTime time2;
  CMTime v14;
  CMTimeRange range;

  v3 = MEMORY[0x1E0CA2E68];
  v12 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&a2->value = *MEMORY[0x1E0CA2E68];
  v4 = *(_QWORD *)(v3 + 16);
  a2->epoch = v4;
  if (result->epoch >= 1)
  {
    v5 = result;
    v6 = 0;
    v7 = (_QWORD *)(*(_QWORD *)&result[1].timescale + 16);
    do
    {
      *(_OWORD *)&v14.value = v12;
      v14.epoch = v4;
      v8 = *(v7 - 1);
      if (v8 >= 1)
      {
        v9 = *v7 + 108 * v8;
        v10 = *(_OWORD *)(v9 - 60);
        v11 = *(_OWORD *)(v9 - 28);
        *(_OWORD *)&range.start.epoch = *(_OWORD *)(v9 - 44);
        *(_OWORD *)&range.duration.timescale = v11;
        *(_OWORD *)&range.start.value = v10;
        CMTimeRangeGetEnd(&v14, &range);
      }
      v7 += 21;
      *(_OWORD *)&range.start.value = *(_OWORD *)&a2->value;
      range.start.epoch = a2->epoch;
      time2 = v14;
      result = CMTimeMaximum(a2, &range.start, &time2);
      ++v6;
    }
    while (v6 < v5->epoch);
  }
  return result;
}

void copyValuesToArray(int a1, const void *a2, CFMutableArrayRef theArray)
{
  CFArrayAppendValue(theArray, a2);
}

uint64_t composite_formatReader_GetTrackCount(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(_QWORD *)DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(*(_QWORD *)DerivedStorage + 8));
  v5 = *(_QWORD *)(v4 + 8);
  *a2 = *(_QWORD *)(v4 + 16);
  MEMORY[0x19402EF04](v5);
  return 0;
}

uint64_t composite_formatReader_CopyTrackByIndex(const void *a1, uint64_t a2, _QWORD *a3, _DWORD *a4, int *a5)
{
  uint64_t DerivedStorage;
  _QWORD *v11;
  int v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = *(_QWORD **)DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(*(_QWORD *)DerivedStorage + 8));
  if (a2 < 0 || v11[2] <= a2)
  {
    MEMORY[0x19402EF04](v11[1]);
    return 4294954453;
  }
  else
  {
    v12 = *(_DWORD *)(v11[4] + 168 * a2 + 4);
    MEMORY[0x19402EF04](v11[1]);
    if (a5)
      *a5 = v12;
    return composite_formatReader_CopyTrackByID(a1, v12, a3, a4);
  }
}

uint64_t composite_formatReader_CopyTrackByID(const void *a1, int a2, _QWORD *a3, _DWORD *a4)
{
  uint64_t DerivedStorage;
  _QWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  const void *Value;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  const __CFDictionary *v24;
  const void *v25;
  uint64_t v27;
  int v28;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = *(_QWORD **)DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(*(_QWORD *)DerivedStorage + 8));
  v10 = v9[2];
  if (v10 < 1)
  {
LABEL_5:
    MEMORY[0x19402EF04](v9[1]);
    return 4294954453;
  }
  else
  {
    v11 = (_DWORD *)(v9[4] + 4);
    while (*v11 != a2)
    {
      v11 += 42;
      if (!--v10)
        goto LABEL_5;
    }
    if (a4)
      *a4 = *(v11 - 1);
    MEMORY[0x19402EF04](v9[1]);
    if (!a3)
      return 0;
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 16), (const void *)a2);
    *a3 = Value;
    if (Value)
      CFRetain(Value);
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 8));
    if (*a3)
      return 0;
    CFGetAllocator(a1);
    v14 = CMBaseObjectGetDerivedStorage();
    v15 = *(_QWORD **)v14;
    MEMORY[0x19402EEEC](*(_QWORD *)(*(_QWORD *)v14 + 8));
    v16 = v15[2];
    if (v16 < 1)
    {
LABEL_16:
      MEMORY[0x19402EF04](v15[1]);
      v12 = 4294954453;
    }
    else
    {
      v17 = (_DWORD *)(v15[4] + 4);
      while (*v17 != a2)
      {
        v17 += 42;
        if (!--v16)
          goto LABEL_16;
      }
      v18 = *(v17 - 1);
      MEMORY[0x19402EF04](v15[1]);
      FigTrackReaderGetClassID();
      v19 = CMDerivedObjectCreate();
      if ((_DWORD)v19)
        goto LABEL_31;
      v20 = CMBaseObjectGetDerivedStorage();
      FigEditCursorServiceGetClassID();
      v19 = CMDerivedObjectCreate();
      if ((_DWORD)v19
        || (v28 = v18,
            v21 = CMBaseObjectGetDerivedStorage(),
            FigEditCursorServiceGetClassID(),
            v19 = CMDerivedObjectCreate(),
            (_DWORD)v19)
        || (v27 = CMBaseObjectGetDerivedStorage(),
            FigSampleCursorServiceGetClassID(),
            v19 = CMDerivedObjectCreate(),
            (_DWORD)v19))
      {
LABEL_31:
        v12 = v19;
      }
      else
      {
        v22 = CMBaseObjectGetDerivedStorage();
        *(_QWORD *)v20 = v15;
        FigAtomicIncrement32();
        *(_DWORD *)(v20 + 8) = a2;
        *(_DWORD *)(v20 + 12) = v28;
        *(_QWORD *)(v20 + 16) = 0;
        *(_QWORD *)(v20 + 24) = 0;
        *(_QWORD *)(v20 + 32) = 0;
        *(_QWORD *)v21 = v15;
        FigAtomicIncrement32();
        *(_DWORD *)(v21 + 8) = a2;
        *(_DWORD *)(v21 + 12) = v28;
        *(_QWORD *)v27 = v15;
        FigAtomicIncrement32();
        *(_DWORD *)(v27 + 8) = v28;
        *(_QWORD *)v22 = v15;
        FigAtomicIncrement32();
        v12 = 0;
        *(_DWORD *)(v22 + 8) = a2;
        *(_DWORD *)(v22 + 12) = v28;
      }
    }
    if (!(_DWORD)v12)
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
      v23 = CFDictionaryContainsKey(*(CFDictionaryRef *)(DerivedStorage + 16), (const void *)a2);
      v24 = *(const __CFDictionary **)(DerivedStorage + 16);
      if (v23)
      {
        v25 = CFDictionaryGetValue(v24, (const void *)a2);
      }
      else
      {
        CFDictionarySetValue(v24, (const void *)a2, 0);
        v25 = 0;
      }
      *a3 = v25;
      if (v25)
        CFRetain(v25);
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 8));
      return 0;
    }
  }
  return v12;
}

uint64_t composite_formatReader_CopyTrackByType(const void *a1, uint64_t a2, int a3, _QWORD *a4, int *a5)
{
  uint64_t DerivedStorage;
  _QWORD *v11;
  uint64_t v12;
  int *v13;
  int v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = *(_QWORD **)DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(*(_QWORD *)DerivedStorage + 8));
  v12 = v11[2];
  if (v12 < 1)
  {
LABEL_7:
    MEMORY[0x19402EF04](v11[1]);
    return 4294954453;
  }
  v13 = (int *)(v11[4] + 4);
  while (*(v13 - 1) != a3)
  {
LABEL_6:
    v13 += 42;
    if (!--v12)
      goto LABEL_7;
  }
  if (a2)
  {
    --a2;
    goto LABEL_6;
  }
  v15 = *v13;
  MEMORY[0x19402EF04](v11[1]);
  if (!v15)
    return 4294954453;
  if (a5)
    *a5 = v15;
  return composite_formatReader_CopyTrackByID(a1, v15, a4, 0);
}

void composite_trackReader_Finalize()
{
  uint64_t *DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  compositionTable_releaseAndClear(DerivedStorage);
  v1 = (const void *)DerivedStorage[2];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[2] = 0;
  }
  v2 = (const void *)DerivedStorage[3];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[3] = 0;
  }
  v3 = (const void *)DerivedStorage[4];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[4] = 0;
  }
}

__CFString *composite_trackReader_CopyDebugDescription(uint64_t a1)
{
  _DWORD *DerivedStorage;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __CFString *Mutable;
  __CFString *v8;
  uint64_t v9;
  unsigned int v11;

  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage;
  v4 = *(_QWORD *)DerivedStorage;
  v5 = *(_QWORD *)(*(_QWORD *)DerivedStorage + 16);
  if (v5 < 1)
  {
LABEL_5:
    v6 = 0;
  }
  else
  {
    v6 = *(_QWORD *)(v4 + 32);
    while (*(_DWORD *)(v6 + 4) != DerivedStorage[2])
    {
      v6 += 168;
      if (!--v5)
        goto LABEL_5;
    }
  }
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<Composite FigTrackReader %p>"), a1);
  if (v6)
  {
    v8 = compositionTableTrack_CopyDebugDescription(v6);
    CFStringAppend(Mutable, v8);
    if (v8)
      CFRelease(v8);
  }
  else
  {
    v9 = v3[2];
    v11 = bswap32(v3[3]);
    CFStringAppendFormat(Mutable, 0, CFSTR("{ trackID %d, mediaType %.4s, table %p, "), v9, &v11, v4);
    CFStringAppend(Mutable, CFSTR("trackID not found in table"));
    CFStringAppendFormat(Mutable, 0, CFSTR(" }"));
  }
  return Mutable;
}

uint64_t composite_trackReader_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, __CFArray **a4)
{
  _QWORD **DerivedStorage;
  _QWORD **v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t MaxEditRate;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  const CFArrayCallBacks *v19;
  __CFArray *Mutable;
  CFMutableArrayRef v21;
  CFMutableArrayRef v22;
  uint64_t v23;
  uint64_t v24;
  const __CFArray *v25;
  const void **v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  const void *v32;
  __CFArray *v33;
  void *v34;
  const void *v35;
  CFIndex v36;
  const void *ValueAtIndex;
  uint64_t v38;
  uint64_t FigBaseObject;
  uint64_t (*v40)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v41;
  CFIndex j;
  CFIndex Count;
  const void *v44;
  uint64_t v45;
  const void **v46;
  uint64_t v47;
  const void **v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const void **v52;
  uint64_t v53;
  const void **v54;
  __int128 v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  CFDictionaryRef *v71;
  __CFArray *v72;
  __CFArray *v73;
  const void *v74;
  const void *v75;
  const void *v76;
  CFMutableArrayRef v77;
  __CFArray *v78;
  CFIndex v79;
  __CFArray *v80;
  uint64_t v81;
  const void **v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  __CFArray *v88;
  _QWORD *v89;
  _OWORD valuePtr[3];
  unsigned int v91;
  void *value;
  CFTypeRef v93;

  DerivedStorage = (_QWORD **)CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v9 = DerivedStorage;
  v10 = *DerivedStorage;
  if (CFEqual(a2, CFSTR("SecondaryEditCursorService")))
  {
    *a4 = (__CFArray *)v9[2];
    v11 = v9[2];
LABEL_7:
    CFRetain(v11);
    return 0;
  }
  if (CFEqual(a2, CFSTR("EditCursorService")))
  {
    *a4 = (__CFArray *)v9[3];
    v11 = v9[3];
    goto LABEL_7;
  }
  if (CFEqual(a2, CFSTR("TrackEnabled")))
  {
    MEMORY[0x19402EEEC](v10[1]);
    v14 = v10[2];
    if (v14 >= 1)
    {
      v15 = (_BYTE *)(v10[4] + 160);
      while (*((_DWORD *)v15 - 39) != *((_DWORD *)v9 + 2))
      {
        v15 += 168;
        if (!--v14)
          goto LABEL_14;
      }
      v26 = (const void **)MEMORY[0x1E0C9AE50];
      if (!*v15)
        v26 = (const void **)MEMORY[0x1E0C9AE40];
      v27 = (void *)*v26;
      if (!*v26)
        goto LABEL_29;
      goto LABEL_28;
    }
    goto LABEL_14;
  }
  if (CFEqual(a2, CFSTR("TrackFormatDescriptionArray")))
  {
    v17 = CMBaseObjectGetDerivedStorage();
    v89 = *(_QWORD **)v17;
    *(_QWORD *)&valuePtr[0] = 0;
    v18 = *(_DWORD *)(v17 + 8);
    v87 = *(_DWORD *)(v17 + 12);
    v93 = 0;
    v19 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    Mutable = CFArrayCreateMutable(a3, 0, MEMORY[0x1E0C9B378]);
    v21 = CFArrayCreateMutable(a3, 0, v19);
    v22 = v21;
    value = 0;
    if (Mutable && v21)
    {
      v91 = 0;
      MEMORY[0x19402EEEC](v89[1]);
      v23 = v89[2];
      if (v23 >= 1)
      {
        v24 = v89[4];
        while (*(_DWORD *)(v24 + 4) != v18)
        {
          v24 += 168;
          if (!--v23)
            goto LABEL_23;
        }
        v25 = *(const __CFArray **)(v24 + 112);
        if (v25)
          CFRetain(*(CFTypeRef *)(v24 + 112));
        v28 = *(_QWORD *)(v24 + 8);
        if (v28 >= 1)
        {
          v29 = 0;
          for (i = 0; i < v28; ++i)
          {
            v31 = *(_QWORD *)(v24 + 16) + v29;
            if ((*(_DWORD *)(v31 + 12) & 0x1D) == 1)
            {
              v32 = *(const void **)(v31 + 96);
              v91 = *(_DWORD *)(v31 + 104);
              CFArrayAppendValue(Mutable, v32);
              FigCFArrayAppendInt32();
              v28 = *(_QWORD *)(v24 + 8);
            }
            v29 += 108;
          }
        }
        MEMORY[0x19402EF04](v89[1]);
        goto LABEL_41;
      }
LABEL_23:
      MaxEditRate = FigSignalErrorAt();
      MEMORY[0x19402EF04](v89[1]);
      v25 = 0;
      if (!(_DWORD)MaxEditRate)
      {
LABEL_41:
        if (CFArrayGetCount(Mutable))
        {
          v88 = v22;
          v33 = CFArrayCreateMutable(a3, 0, MEMORY[0x1E0C9B378]);
          if (CFArrayGetCount(Mutable) < 1)
          {
            v35 = 0;
LABEL_62:
            MaxEditRate = 0;
            *a4 = v33;
            v33 = 0;
          }
          else
          {
            v34 = 0;
            v35 = 0;
            v36 = 0;
            while (1)
            {
              ValueAtIndex = CFArrayGetValueAtIndex(Mutable, v36);
              FigCFArrayGetInt32AtIndex();
              if (v35)
              {
                CFRelease(v35);
                *(_QWORD *)&valuePtr[0] = 0;
              }
              v38 = compositionTable_copyConcreteTrackReaderForAssetURLTrackIDMediaType((uint64_t)v89, ValueAtIndex, v91, v87, a3, (CFTypeRef *)valuePtr);
              if ((_DWORD)v38)
              {
                MaxEditRate = v38;
                v35 = *(const void **)&valuePtr[0];
                goto LABEL_70;
              }
              if (v93)
              {
                CFRelease(v93);
                v93 = 0;
              }
              v35 = *(const void **)&valuePtr[0];
              FigBaseObject = FigTrackReaderGetFigBaseObject(*(_QWORD *)&valuePtr[0]);
              v40 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
              if (!v40)
              {
                MaxEditRate = 4294954514;
                goto LABEL_70;
              }
              v41 = v40(FigBaseObject, CFSTR("TrackFormatDescriptionArray"), a3, &v93);
              if ((_DWORD)v41)
                break;
              for (j = 0; ; ++j)
              {
                Count = (CFIndex)v93;
                if (v93)
                  Count = CFArrayGetCount((CFArrayRef)v93);
                if (j >= Count)
                  break;
                v44 = CFArrayGetValueAtIndex((CFArrayRef)v93, j);
                if (v34)
                {
                  CFRelease(v34);
                  value = 0;
                }
                mutableComposition_copyReplacedFormatDescription(v25, v44, &value);
                v34 = value;
                CFArrayAppendValue(v33, value);
              }
              if (++v36 >= CFArrayGetCount(Mutable))
                goto LABEL_62;
            }
            MaxEditRate = v41;
          }
LABEL_70:
          if (v35)
            CFRelease(v35);
          if (v33)
            CFRelease(v33);
          v22 = v88;
        }
        else
        {
          MaxEditRate = 4294954775;
        }
      }
    }
    else
    {
      MaxEditRate = FigSignalErrorAt();
      v25 = 0;
    }
    if (v93)
      CFRelease(v93);
    if (Mutable)
      CFRelease(Mutable);
    if (v22)
      CFRelease(v22);
    if (v25)
      CFRelease(v25);
    if (value)
      CFRelease(value);
    if ((_DWORD)MaxEditRate == -12521)
    {
      MaxEditRate = 0;
      *a4 = 0;
    }
    return MaxEditRate;
  }
  if (CFEqual(a2, CFSTR("TrackDimensions")))
    return composite_trackReader_copyPropertyFromFirstNonEmptyEdit(a1, (uint64_t)a2, a3, (uint64_t)a4);
  if (CFEqual(a2, CFSTR("TrackTimescale")))
  {
    MEMORY[0x19402EEEC](v10[1]);
    v45 = v10[2];
    if (v45 < 1)
      goto LABEL_94;
    v46 = (const void **)(v10[4] + 32);
    while (*((_DWORD *)v46 - 7) != *((_DWORD *)v9 + 2))
    {
      v46 += 21;
      if (!--v45)
        goto LABEL_94;
    }
    v27 = (void *)*v46;
    if (!*v46)
    {
LABEL_94:
      MEMORY[0x19402EF04](v10[1]);
      return compositionTable_copyTrackMediaTimeScale(v10, *((_DWORD *)v9 + 2), *((unsigned int *)v9 + 3), a3, a4);
    }
LABEL_28:
    v27 = (void *)CFRetain(v27);
LABEL_29:
    MaxEditRate = 0;
    *a4 = (__CFArray *)v27;
    goto LABEL_30;
  }
  if (CFEqual(a2, CFSTR("AlternateGroupID")))
  {
    MEMORY[0x19402EEEC](v10[1]);
    v47 = v10[2];
    if (v47 >= 1)
    {
      v48 = (const void **)(v10[4] + 104);
      while (*((_DWORD *)v48 - 25) != *((_DWORD *)v9 + 2))
      {
        v48 += 21;
        if (!--v47)
          goto LABEL_14;
      }
      goto LABEL_107;
    }
LABEL_14:
    v16 = FigSignalErrorAt();
LABEL_15:
    MaxEditRate = v16;
LABEL_30:
    MEMORY[0x19402EF04](v10[1]);
    return MaxEditRate;
  }
  if (CFEqual(a2, CFSTR("TrackLanguageCode")))
  {
    MEMORY[0x19402EEEC](v10[1]);
    v49 = v10[2];
    if (v49 < 1)
      goto LABEL_14;
    v48 = (const void **)(v10[4] + 40);
    while (*((_DWORD *)v48 - 9) != *((_DWORD *)v9 + 2))
    {
      v48 += 21;
      if (!--v49)
        goto LABEL_14;
    }
LABEL_107:
    v27 = (void *)*v48;
    if (!*v48)
      goto LABEL_29;
    goto LABEL_28;
  }
  if (CFEqual(a2, CFSTR("ExtendedLanguageTagString")))
  {
    MEMORY[0x19402EEEC](v10[1]);
    v50 = v10[2];
    if (v50 < 1)
      goto LABEL_14;
    v48 = (const void **)(v10[4] + 48);
    while (*((_DWORD *)v48 - 11) != *((_DWORD *)v9 + 2))
    {
      v48 += 21;
      if (!--v50)
        goto LABEL_14;
    }
    goto LABEL_107;
  }
  if (CFEqual(a2, CFSTR("TrackMatrix")))
  {
    MEMORY[0x19402EEEC](v10[1]);
    v51 = v10[2];
    if (v51 < 1)
      goto LABEL_124;
    v52 = (const void **)(v10[4] + 56);
    while (*((_DWORD *)v52 - 13) != *((_DWORD *)v9 + 2))
    {
      v52 += 21;
      if (!--v51)
        goto LABEL_124;
    }
    v27 = (void *)*v52;
    if (!*v52)
    {
LABEL_124:
      v55 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
      valuePtr[0] = *MEMORY[0x1E0C9BAA8];
      valuePtr[1] = v55;
      valuePtr[2] = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
      v27 = FigCreate3x3MatrixArrayFromCGAffineTransform(a3, valuePtr);
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  if (CFEqual(a2, CFSTR("Volume")))
  {
    MEMORY[0x19402EEEC](v10[1]);
    v53 = v10[2];
    if (v53 < 1)
      goto LABEL_128;
    v54 = (const void **)(v10[4] + 64);
    while (*((_DWORD *)v54 - 15) != *((_DWORD *)v9 + 2))
    {
      v54 += 21;
      if (!--v53)
        goto LABEL_128;
    }
    v27 = (void *)*v54;
    if (!*v54)
    {
LABEL_128:
      LODWORD(valuePtr[0]) = 1065353216;
      v27 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloatType, valuePtr);
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  if (CFEqual(a2, CFSTR("UneditedSampleCount")))
    return 4294954513;
  if (CFEqual(a2, CFSTR("MediaCharacteristicArray")))
    return FigMediaCharacteristicsCopyMediaCharacteristicsForTrackReader(*MEMORY[0x1E0C9AE00], a1, a4);
  if (CFEqual(a2, CFSTR("NominalFrameRate")))
  {
    MEMORY[0x19402EEEC](v10[1]);
    v56 = v10[2];
    if (v56 >= 1)
    {
      v57 = (int *)(v10[4] + 4);
      while (*v57 != *((_DWORD *)v9 + 2))
      {
        v57 += 42;
        if (!--v56)
          goto LABEL_142;
      }
      MEMORY[0x19402EF04](v10[1]);
      return compositionTable_copyTrackNominalFrameRate(v10, *v57, *(v57 - 1), (const __CFAllocator *)*MEMORY[0x1E0C9AE00], a4);
    }
    goto LABEL_142;
  }
  if (!CFEqual(a2, CFSTR("EstimatedDataRate")))
  {
    if (CFEqual(a2, CFSTR("QuickTimeUserDataReader")))
    {
      MEMORY[0x19402EEEC](v10[1]);
      v60 = v10[2];
      if (v60 < 1)
        goto LABEL_14;
      v61 = v10[4];
      while (*(_DWORD *)(v61 + 4) != *((_DWORD *)v9 + 2))
      {
        v61 += 168;
        if (!--v60)
          goto LABEL_14;
      }
      v16 = compositionTableTrack_assureQuickTimeUserDataReaderCreated(v61);
      if ((_DWORD)v16)
        goto LABEL_15;
      v27 = *(void **)(v61 + 80);
      if (v27)
        goto LABEL_28;
LABEL_177:
      MaxEditRate = 4294954513;
      goto LABEL_30;
    }
    if (CFEqual(a2, CFSTR("ISOUserDataReader")))
    {
      MEMORY[0x19402EEEC](v10[1]);
      v62 = v10[2];
      if (v62 < 1)
        goto LABEL_14;
      v63 = v10[4];
      while (*(_DWORD *)(v63 + 4) != *((_DWORD *)v9 + 2))
      {
        v63 += 168;
        if (!--v62)
          goto LABEL_14;
      }
      v16 = compositionTableTrack_assureISOUserDataReaderCreated(v63);
      if ((_DWORD)v16)
        goto LABEL_15;
      v27 = *(void **)(v63 + 88);
      if (v27)
        goto LABEL_28;
      goto LABEL_177;
    }
    if (CFEqual(a2, CFSTR("QuickTimeMetadataReader")))
    {
      MEMORY[0x19402EEEC](v10[1]);
      v64 = v10[2];
      if (v64 < 1)
        goto LABEL_14;
      v65 = v10[4];
      while (*(_DWORD *)(v65 + 4) != *((_DWORD *)v9 + 2))
      {
        v65 += 168;
        if (!--v64)
          goto LABEL_14;
      }
      v16 = compositionTableTrack_assureQuickTimeMetadataReaderCreated(v65);
      if ((_DWORD)v16)
        goto LABEL_15;
      v27 = *(void **)(v65 + 96);
      if (v27)
        goto LABEL_28;
      goto LABEL_177;
    }
    if (CFEqual(a2, CFSTR("MetadataReaders")))
    {
      MEMORY[0x19402EEEC](v10[1]);
      v66 = v10[2];
      if (v66 < 1)
        goto LABEL_14;
      v67 = *((_DWORD *)v9 + 2);
      v68 = v10[4];
      while (*(_DWORD *)(v68 + 4) != v67)
      {
        v68 += 168;
        if (!--v66)
          goto LABEL_14;
      }
      v16 = compositionTableTrack_assureQuickTimeUserDataReaderCreated(v68);
      if ((_DWORD)v16)
        goto LABEL_15;
      v16 = compositionTableTrack_assureQuickTimeMetadataReaderCreated(v68);
      if ((_DWORD)v16)
        goto LABEL_15;
      v16 = compositionTableTrack_assureISOUserDataReaderCreated(v68);
      if ((_DWORD)v16)
        goto LABEL_15;
      if (*(_QWORD *)(v68 + 80) || *(_QWORD *)(v68 + 88) || *(_QWORD *)(v68 + 96))
      {
        v72 = CFArrayCreateMutable(a3, 0, MEMORY[0x1E0C9B378]);
        if (v72)
        {
          v73 = v72;
          v74 = *(const void **)(v68 + 96);
          if (v74)
            CFArrayAppendValue(v72, v74);
          v75 = *(const void **)(v68 + 80);
          if (v75)
            CFArrayAppendValue(v73, v75);
          v76 = *(const void **)(v68 + 88);
          if (v76)
            CFArrayAppendValue(v73, v76);
          MaxEditRate = 0;
          *a4 = v73;
          goto LABEL_30;
        }
        goto LABEL_14;
      }
    }
    else if (CFEqual(a2, CFSTR("MetadataReaderTypes")))
    {
      MEMORY[0x19402EEEC](v10[1]);
      v69 = v10[2];
      if (v69 < 1)
        goto LABEL_14;
      v70 = *((_DWORD *)v9 + 2);
      v71 = (CFDictionaryRef *)(v10[4] + 72);
      while (*((_DWORD *)v71 - 17) != v70)
      {
        v71 += 21;
        if (!--v69)
          goto LABEL_14;
      }
      v77 = CFArrayCreateMutable(a3, 0, MEMORY[0x1E0C9B378]);
      if (!v77)
        goto LABEL_14;
      v78 = v77;
      if (*v71)
      {
        if (CFDictionaryGetValue(*v71, CFSTR("com.apple.quicktime.udta")))
          CFArrayAppendValue(v78, CFSTR("QuickTimeUserDataReader"));
        if (*v71)
        {
          if (CFDictionaryGetValue(*v71, CFSTR("org.mp4ra")))
            CFArrayAppendValue(v78, CFSTR("ISOUserDataReader"));
          if (*v71 && CFDictionaryGetValue(*v71, CFSTR("com.apple.quicktime.mdta")))
            CFArrayAppendValue(v78, CFSTR("QuickTimeMetadataReader"));
        }
      }
      v79 = CFArrayGetCount(v78);
      if (v79 <= 0)
        v80 = 0;
      else
        v80 = v78;
      *a4 = v80;
      if (v79 <= 0)
        CFRelease(v78);
    }
    else
    {
      if (CFEqual(a2, CFSTR("MinSampleDuration")))
        return compositionTable_copyTrackMinSampleDuration(v10, *((_DWORD *)v9 + 2), a3, a4);
      if (CFEqual(a2, CFSTR("MaxEditRate")))
      {
        LODWORD(valuePtr[0]) = 1065353216;
        MaxEditRate = compositionTable_getMaxEditRate(v10, *((_DWORD *)v9 + 2), (float *)valuePtr);
        if (!(_DWORD)MaxEditRate)
          *a4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat32Type, valuePtr);
        return MaxEditRate;
      }
      if (CFEqual(a2, CFSTR("EditsExcludePrimingAndRemainderDuration")))
      {
        MaxEditRate = 0;
        *a4 = (__CFArray *)*MEMORY[0x1E0C9AE50];
        return MaxEditRate;
      }
      if (CFEqual(a2, CFSTR("HasAudioSampleDependencyInformation")))
        return compositionTable_copyTrackHasAudioSampleDependencyInformation(v10, *((_DWORD *)v9 + 2), a4);
      if (CFEqual(a2, CFSTR("TrackLayer")))
      {
        MEMORY[0x19402EEEC](v10[1]);
        v81 = v10[2];
        if (v81 < 1)
          goto LABEL_215;
        v82 = (const void **)(v10[4] + 120);
        while (*((_DWORD *)v82 - 29) != *((_DWORD *)v9 + 2))
        {
          MaxEditRate = 0;
          v82 += 21;
          if (!--v81)
            goto LABEL_30;
        }
      }
      else if (CFEqual(a2, CFSTR("CleanApertureDimensions")))
      {
        MEMORY[0x19402EEEC](v10[1]);
        v83 = v10[2];
        if (v83 < 1)
          goto LABEL_215;
        v82 = (const void **)(v10[4] + 128);
        while (*((_DWORD *)v82 - 31) != *((_DWORD *)v9 + 2))
        {
          MaxEditRate = 0;
          v82 += 21;
          if (!--v83)
            goto LABEL_30;
        }
      }
      else if (CFEqual(a2, CFSTR("ProductionApertureDimensions")))
      {
        MEMORY[0x19402EEEC](v10[1]);
        v84 = v10[2];
        if (v84 < 1)
          goto LABEL_215;
        v82 = (const void **)(v10[4] + 136);
        while (*((_DWORD *)v82 - 33) != *((_DWORD *)v9 + 2))
        {
          MaxEditRate = 0;
          v82 += 21;
          if (!--v84)
            goto LABEL_30;
        }
      }
      else if (CFEqual(a2, CFSTR("EncodedPixelsDimensions")))
      {
        MEMORY[0x19402EEEC](v10[1]);
        v85 = v10[2];
        if (v85 < 1)
          goto LABEL_215;
        v82 = (const void **)(v10[4] + 144);
        while (*((_DWORD *)v82 - 35) != *((_DWORD *)v9 + 2))
        {
          MaxEditRate = 0;
          v82 += 21;
          if (!--v85)
            goto LABEL_30;
        }
      }
      else
      {
        if (!CFEqual(a2, CFSTR("TrackQTLoadSettings")))
          return 4294954512;
        MEMORY[0x19402EEEC](v10[1]);
        v86 = v10[2];
        if (v86 < 1)
          goto LABEL_215;
        v82 = (const void **)(v10[4] + 152);
        while (*((_DWORD *)v82 - 37) != *((_DWORD *)v9 + 2))
        {
          MaxEditRate = 0;
          v82 += 21;
          if (!--v86)
            goto LABEL_30;
        }
      }
      v27 = (void *)*v82;
      if (*v82)
        goto LABEL_28;
    }
LABEL_215:
    MaxEditRate = 0;
    goto LABEL_30;
  }
  MEMORY[0x19402EEEC](v10[1]);
  v58 = v10[2];
  if (v58 < 1)
  {
LABEL_142:
    MEMORY[0x19402EF04](v10[1]);
    return FigSignalErrorAt();
  }
  v59 = (int *)(v10[4] + 4);
  while (*v59 != *((_DWORD *)v9 + 2))
  {
    v59 += 42;
    if (!--v58)
      goto LABEL_142;
  }
  MEMORY[0x19402EF04](v10[1]);
  return compositionTable_copyTrackEstimatedDataRate(v10, *v59, *(v59 - 1), (const __CFAllocator *)*MEMORY[0x1E0C9AE00], a4);
}

uint64_t composite_trackReader_copyPropertyFromFirstNonEmptyEdit(uint64_t a1, uint64_t a2, const __CFAllocator *a3, uint64_t a4)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return compositionTable_copyTrackPropertyFromFirstNonEmptyEdit(*(_QWORD **)DerivedStorage, *(_DWORD *)(DerivedStorage + 8), *(unsigned int *)(DerivedStorage + 12), a2, a3, a4);
}

uint64_t compositionTable_copyTrackMediaTimeScale(_QWORD *a1, int a2, uint64_t a3, const __CFAllocator *a4, _QWORD *a5)
{
  uint64_t NonEmptyEdit;
  uint64_t v7;
  void *v8;
  int v10;
  CFNumberRef number;
  int valuePtr;

  valuePtr = 0;
  number = 0;
  v10 = 600;
  NonEmptyEdit = compositionTable_copyTrackPropertyFromFirstNonEmptyEdit(a1, a2, a3, (uint64_t)CFSTR("TrackTimescale"), a4, (uint64_t)&number);
  if ((_DWORD)NonEmptyEdit == -12521)
    goto LABEL_4;
  v7 = NonEmptyEdit;
  if ((_DWORD)NonEmptyEdit)
    goto LABEL_6;
  CFNumberGetValue(number, kCFNumberIntType, &valuePtr);
  if (valuePtr <= 599)
  {
LABEL_4:
    v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &v10);
  }
  else
  {
    v8 = number;
    if (number)
      v8 = (void *)CFRetain(number);
  }
  v7 = 0;
  *a5 = v8;
LABEL_6:
  if (number)
    CFRelease(number);
  return v7;
}

uint64_t compositionTable_copyTrackNominalFrameRate(_QWORD *a1, int a2, unsigned int a3, const __CFAllocator *a4, _QWORD *a5)
{
  uint64_t v6;
  void *v7;
  uint64_t result;
  uint64_t v9;
  CFTypeRef cf;
  int valuePtr;

  valuePtr = 0;
  cf = 0;
  v6 = compositionTable_copyAverageTrackPropertyFromNonEmptyEdits(a1, a2, a3, (uint64_t)CFSTR("NominalFrameRate"), a4, (CFNumberRef *)&cf);
  if ((_DWORD)v6 == -12521)
  {
    v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat32Type, &valuePtr);
LABEL_5:
    result = 0;
    *a5 = v7;
    return result;
  }
  if (!(_DWORD)v6)
  {
    v7 = (void *)cf;
    goto LABEL_5;
  }
  v9 = v6;
  if (cf)
    CFRelease(cf);
  return v9;
}

uint64_t compositionTable_copyTrackEstimatedDataRate(_QWORD *a1, int a2, unsigned int a3, const __CFAllocator *a4, _QWORD *a5)
{
  uint64_t v6;
  void *v7;
  uint64_t result;
  uint64_t v9;
  CFTypeRef cf;
  int valuePtr;

  valuePtr = 0;
  cf = 0;
  v6 = compositionTable_copyAverageTrackPropertyFromNonEmptyEdits(a1, a2, a3, (uint64_t)CFSTR("EstimatedDataRate"), a4, (CFNumberRef *)&cf);
  if ((_DWORD)v6 == -12521)
  {
    v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat32Type, &valuePtr);
LABEL_5:
    result = 0;
    *a5 = v7;
    return result;
  }
  if (!(_DWORD)v6)
  {
    v7 = (void *)cf;
    goto LABEL_5;
  }
  v9 = v6;
  if (cf)
    CFRelease(cf);
  return v9;
}

uint64_t compositionTableTrack_assureQuickTimeUserDataReaderCreated(uint64_t a1)
{
  _QWORD *v1;
  const __CFDictionary *v3;
  const void *Value;

  v1 = (_QWORD *)(a1 + 80);
  if (!*(_QWORD *)(a1 + 80)
    && (v3 = *(const __CFDictionary **)(a1 + 72)) != 0
    && (Value = CFDictionaryGetValue(v3, CFSTR("com.apple.quicktime.udta"))) != 0)
  {
    return FigMetadataReaderCreateForQuickTimeUserDataArray(*MEMORY[0x1E0C9AE00], Value, v1);
  }
  else
  {
    return 0;
  }
}

uint64_t compositionTableTrack_assureISOUserDataReaderCreated(uint64_t a1)
{
  _QWORD *v1;
  const __CFDictionary *v3;
  const void *Value;

  v1 = (_QWORD *)(a1 + 88);
  if (!*(_QWORD *)(a1 + 88)
    && (v3 = *(const __CFDictionary **)(a1 + 72)) != 0
    && (Value = CFDictionaryGetValue(v3, CFSTR("org.mp4ra"))) != 0)
  {
    return FigMetadataReaderCreateForISOUserDataArray(*MEMORY[0x1E0C9AE00], Value, v1);
  }
  else
  {
    return 0;
  }
}

uint64_t compositionTableTrack_assureQuickTimeMetadataReaderCreated(uint64_t a1)
{
  _QWORD *v1;
  const __CFDictionary *v3;
  const void *Value;

  v1 = (_QWORD *)(a1 + 96);
  if (!*(_QWORD *)(a1 + 96)
    && (v3 = *(const __CFDictionary **)(a1 + 72)) != 0
    && (Value = CFDictionaryGetValue(v3, CFSTR("com.apple.quicktime.mdta"))) != 0)
  {
    return FigMetadataReaderCreateForQuickTimeMetadataArray(*MEMORY[0x1E0C9AE00], Value, v1);
  }
  else
  {
    return 0;
  }
}

uint64_t compositionTable_copyTrackMinSampleDuration(_QWORD *a1, int a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  CMTimeValue v8;
  CMTimeFlags v9;
  CMTimeEpoch v10;
  uint64_t v11;
  uint64_t v12;
  CMTimeFlags flags;
  _QWORD *v14;
  uint64_t v15;
  CMTimeEpoch v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const __CFAllocator *v20;
  uint64_t v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  CFTypeRef v25;
  uint64_t FigBaseObject;
  uint64_t (*v27)(uint64_t, const __CFString *, const __CFAllocator *, const __CFDictionary **);
  CMTimeValue v29;
  const __CFAllocator *v30;
  CFDictionaryRef *v31;
  CMTimeScale v32;
  CMTimeEpoch epoch;
  CMTime time2;
  CMTime time1;
  CMTime v36;
  CMTime time;
  const __CFDictionary *v38;
  CFTypeRef v39;
  CMTimeValue v40;
  CMTimeScale v41;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v8 = *MEMORY[0x1E0CA2E18];
  v39 = 0;
  v40 = v8;
  v9 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
  v32 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  v41 = v32;
  v10 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v11 = MEMORY[0x1E0CA2E30];
  v38 = 0;
  value = *MEMORY[0x1E0CA2E30];
  timescale = *(_DWORD *)(MEMORY[0x1E0CA2E30] + 8);
  MEMORY[0x19402EEEC](a1[1]);
  v12 = a1[2];
  if (v12 < 1)
  {
LABEL_5:
    v15 = FigSignalErrorAt();
    flags = v9;
    v16 = v10;
    goto LABEL_25;
  }
  flags = *(_DWORD *)(v11 + 12);
  v14 = (_QWORD *)(a1[4] + 8);
  while (*((_DWORD *)v14 - 1) != a2)
  {
    v14 += 21;
    if (!--v12)
      goto LABEL_5;
  }
  epoch = *(_QWORD *)(v11 + 16);
  v29 = v8;
  v30 = a3;
  v31 = a4;
  v17 = *v14;
  if ((uint64_t)*v14 >= 1)
  {
    v18 = 0;
    v15 = 0;
    v19 = 0;
    v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    while (1)
    {
      v21 = v14[1] + v18;
      if ((*(_DWORD *)(v21 + 12) & 0x1D) == 1)
      {
        v22 = *(const void **)(v21 + 96);
        v23 = *(unsigned int *)(v21 + 104);
        *(_OWORD *)&time.value = *MEMORY[0x1E0CA2E18];
        time.epoch = v10;
        v24 = compositionTable_copyConcreteTrackReaderForAssetURLTrackIDMediaType((uint64_t)a1, v22, v23, *((unsigned int *)v14 - 2), v20, &v39);
        if ((_DWORD)v24)
        {
          v15 = v24;
          flags = v9;
          v16 = v10;
          a3 = v30;
          a4 = v31;
          v8 = v29;
          goto LABEL_25;
        }
        v25 = v39;
        FigBaseObject = FigTrackReaderGetFigBaseObject(v39);
        v27 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, const __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (v27)
        {
          v15 = v27(FigBaseObject, CFSTR("MinSampleDuration"), v20, &v38);
          if (!(_DWORD)v15)
          {
            CMTimeMakeFromDictionary(&time, v38);
            time1.value = value;
            time1.timescale = timescale;
            time1.flags = flags;
            time1.epoch = epoch;
            time2 = time;
            CMTimeMinimum(&v36, &time1, &time2);
            value = v36.value;
            flags = v36.flags;
            timescale = v36.timescale;
            epoch = v36.epoch;
          }
        }
        else
        {
          v15 = 4294954514;
        }
        if (v38)
        {
          CFRelease(v38);
          v38 = 0;
        }
        if (v25)
        {
          CFRelease(v25);
          v39 = 0;
        }
        v17 = *v14;
      }
      ++v19;
      v18 += 108;
      if (v19 >= v17)
        goto LABEL_22;
    }
  }
  v15 = 0;
LABEL_22:
  a3 = v30;
  a4 = v31;
  v8 = v29;
  v16 = epoch;
  if ((~flags & 5) == 0)
  {
    value = v29;
    timescale = v32;
    flags = v9;
    v16 = v10;
  }
  v40 = value;
  v41 = timescale;
LABEL_25:
  MEMORY[0x19402EF04](a1[1]);
  if (v38)
    CFRelease(v38);
  if (v39)
    CFRelease(v39);
  if ((_DWORD)v15 == -12521)
  {
    v40 = v8;
    v41 = v32;
    v16 = v10;
    flags = v9;
LABEL_32:
    time.value = v40;
    time.timescale = v41;
    time.flags = flags;
    time.epoch = v16;
    v15 = 0;
    *a4 = CMTimeCopyAsDictionary(&time, a3);
    return v15;
  }
  if (!(_DWORD)v15)
    goto LABEL_32;
  return v15;
}

uint64_t compositionTable_getMaxEditRate(_QWORD *a1, int a2, float *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  const __CFAllocator *v13;
  float v14;
  uint64_t v15;
  CFTypeRef v16;
  uint64_t FigBaseObject;
  uint64_t (*v18)(uint64_t, const __CFString *, const __CFAllocator *, CFNumberRef *);
  uint64_t v19;
  __int128 *v20;
  __int128 v21;
  CMTimeFlags v22;
  CMTimeEpoch v23;
  __int128 v24;
  CMTimeFlags v25;
  double Seconds;
  float v27;
  float *v29;
  CMTimeEpoch v30;
  int v31;
  CMTime time;
  float valuePtr;
  CFNumberRef number;
  CFTypeRef cf;
  __int128 v36;
  __int128 v37;
  CMTimeScale v38;
  __int128 v39;
  __int128 v40;
  CMTimeScale v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  number = 0;
  cf = 0;
  MEMORY[0x19402EEEC](a1[1]);
  v6 = a1[2];
  if (v6 < 1)
  {
LABEL_5:
    v8 = FigSignalErrorAt();
LABEL_6:
    v9 = v8;
  }
  else
  {
    v7 = (_QWORD *)(a1[4] + 8);
    while (*((_DWORD *)v7 - 1) != a2)
    {
      v7 += 21;
      if (!--v6)
        goto LABEL_5;
    }
    v29 = a3;
    if ((uint64_t)*v7 < 1)
    {
      v9 = 0;
      v14 = 1.0;
    }
    else
    {
      v10 = 0;
      v9 = 0;
      v11 = 0;
      v12 = 0;
      v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v14 = 1.0;
      do
      {
        v15 = v7[1] + v10;
        if ((*(_DWORD *)(v15 + 12) & 0x1D) == 1)
        {
          v8 = compositionTable_copyConcreteTrackReaderForAssetURLTrackIDMediaType((uint64_t)a1, *(const void **)(v15 + 96), *(unsigned int *)(v15 + 104), *((unsigned int *)v7 - 2), v13, &cf);
          if ((_DWORD)v8)
            goto LABEL_6;
          v16 = cf;
          FigBaseObject = FigTrackReaderGetFigBaseObject(cf);
          v18 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
          if (v18)
          {
            v19 = v18(FigBaseObject, CFSTR("MaxEditRate"), v13, &number);
            if ((_DWORD)v19)
            {
              v9 = v19;
            }
            else
            {
              v31 = v11;
              valuePtr = 1.0;
              CFNumberGetValue(number, kCFNumberFloat32Type, &valuePtr);
              v20 = (__int128 *)(v7[1] + v10);
              v21 = v20[1];
              v39 = *v20;
              v40 = v21;
              v22 = *((_DWORD *)v20 + 9);
              v41 = *((_DWORD *)v20 + 8);
              v23 = *((_QWORD *)v20 + 5);
              v24 = v20[4];
              v36 = v20[3];
              v37 = v24;
              v38 = *((_DWORD *)v20 + 20);
              if ((v22 & 0x1D) == 1)
              {
                v25 = *((_DWORD *)v20 + 21);
                if ((v25 & 0x1D) == 1)
                {
                  v30 = *((_QWORD *)v20 + 11);
                  time.value = *((_QWORD *)&v40 + 1);
                  time.timescale = v41;
                  time.flags = v22;
                  time.epoch = v23;
                  if (CMTimeGetSeconds(&time) != 0.0)
                  {
                    time.value = *((_QWORD *)&v37 + 1);
                    time.timescale = v38;
                    time.flags = v25;
                    time.epoch = v30;
                    if (CMTimeGetSeconds(&time) != 0.0)
                    {
                      time.value = *((_QWORD *)&v40 + 1);
                      time.timescale = v41;
                      time.flags = v22;
                      time.epoch = v23;
                      Seconds = CMTimeGetSeconds(&time);
                      time.value = *((_QWORD *)&v37 + 1);
                      time.timescale = v38;
                      time.flags = v25;
                      time.epoch = v30;
                      v27 = Seconds / CMTimeGetSeconds(&time);
                      valuePtr = valuePtr * v27;
                    }
                  }
                }
              }
              if (v31)
              {
                if (v14 < valuePtr)
                  v14 = valuePtr;
              }
              else
              {
                v14 = valuePtr;
              }
              v9 = 0;
              v11 = 1;
            }
          }
          else
          {
            v9 = 4294954514;
          }
          if (number)
          {
            CFRelease(number);
            number = 0;
          }
          if (v16)
          {
            CFRelease(v16);
            cf = 0;
          }
        }
        ++v12;
        v10 += 108;
      }
      while (v12 < *v7);
    }
    *v29 = v14;
  }
  MEMORY[0x19402EF04](a1[1]);
  if (number)
    CFRelease(number);
  if (cf)
    CFRelease(cf);
  return v9;
}

uint64_t compositionTable_copyTrackHasAudioSampleDependencyInformation(_QWORD *a1, int a2, _QWORD *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  CFTypeRef *v10;
  uint64_t v11;
  uint64_t v12;
  const __CFAllocator *v13;
  CFTypeRef v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  CFTypeRef v20;
  uint64_t FigBaseObject;
  uint64_t (*v22)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  CFTypeRef v23;
  BOOL v24;
  CFTypeRef v25;
  CFTypeRef v27;
  _QWORD *v28;
  CFTypeRef cf;
  CFTypeRef v30;

  v30 = 0;
  MEMORY[0x19402EEEC](a1[1]);
  v6 = a1[2];
  if (v6 >= 1)
  {
    v7 = (_QWORD *)(a1[4] + 8);
    while (*((_DWORD *)v7 - 1) != a2)
    {
      v7 += 21;
      if (!--v6)
        goto LABEL_5;
    }
    v11 = *v7;
    if ((uint64_t)*v7 > 0)
    {
      v28 = a3;
      v12 = 0;
      v8 = 0;
      v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v14 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
      v15 = 1;
      while (1)
      {
        v16 = v7[1] + v12;
        if ((*(_DWORD *)(v16 + 12) & 0x1D) == 1)
          break;
        v9 = 0;
LABEL_26:
        if (v15 < v11)
        {
          v12 += 108;
          ++v15;
          if (!v9)
            continue;
        }
        goto LABEL_6;
      }
      v17 = *(const void **)(v16 + 96);
      v18 = *(unsigned int *)(v16 + 104);
      cf = 0;
      v19 = compositionTable_copyConcreteTrackReaderForAssetURLTrackIDMediaType((uint64_t)a1, v17, v18, *((unsigned int *)v7 - 2), v13, &v30);
      if ((_DWORD)v19)
      {
        v8 = v19;
        v27 = v30;
        MEMORY[0x19402EF04](a1[1]);
        if (v27)
          CFRelease(v27);
        return v8;
      }
      v20 = v30;
      FigBaseObject = FigTrackReaderGetFigBaseObject(v30);
      v22 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v22)
      {
        v8 = v22(FigBaseObject, CFSTR("HasAudioSampleDependencyInformation"), v13, &cf);
        v23 = cf;
        if ((_DWORD)v8)
          v24 = 0;
        else
          v24 = cf == v14;
        v9 = v24;
        if (!cf)
          goto LABEL_22;
      }
      else
      {
        v9 = 0;
        v8 = 4294954514;
        v23 = cf;
        if (!cf)
          goto LABEL_22;
      }
      CFRelease(v23);
      cf = 0;
LABEL_22:
      if (v20)
      {
        CFRelease(v20);
        v30 = 0;
      }
      v11 = *v7;
      goto LABEL_26;
    }
    MEMORY[0x19402EF04](a1[1]);
    goto LABEL_32;
  }
LABEL_5:
  v28 = a3;
  v8 = FigSignalErrorAt();
  v9 = 0;
LABEL_6:
  MEMORY[0x19402EF04](a1[1]);
  if (!(_DWORD)v8)
  {
    a3 = v28;
    if (v9)
    {
      v10 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
LABEL_33:
      v25 = *v10;
      if (*v10)
        v25 = CFRetain(v25);
      v8 = 0;
      *a3 = v25;
      return v8;
    }
LABEL_32:
    v10 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    goto LABEL_33;
  }
  return v8;
}

uint64_t compositionTable_copyConcreteTrackReaderForAssetURLTrackIDMediaType(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const __CFAllocator *a5, CFTypeRef *a6)
{
  uint64_t v9;
  const void *v10;
  uint64_t (*v11)(const void *, uint64_t, CFTypeRef *, int *);
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(const void *, _QWORD, uint64_t, CFTypeRef *, _QWORD);
  int v16;
  CFTypeRef cf;
  const void *v18;

  cf = 0;
  v18 = 0;
  v9 = compositionTable_copyFormatReaderForAssetURL(a1, a2, a5, &v18);
  if ((_DWORD)v9)
  {
    v13 = v9;
    v10 = v18;
    if (v18)
      goto LABEL_14;
    goto LABEL_15;
  }
  if (!(_DWORD)a3)
  {
    v10 = v18;
    v14 = *(uint64_t (**)(const void *, _QWORD, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 64);
    if (v14)
    {
      v12 = v14(v10, 0, a4, &cf, 0);
      if ((_DWORD)v12)
      {
LABEL_7:
        v13 = v12;
        if (!v10)
          goto LABEL_15;
LABEL_14:
        CFRelease(v10);
        goto LABEL_15;
      }
      goto LABEL_11;
    }
LABEL_13:
    v13 = 4294954514;
    if (!v10)
      goto LABEL_15;
    goto LABEL_14;
  }
  v16 = 0;
  v10 = v18;
  v11 = *(uint64_t (**)(const void *, uint64_t, CFTypeRef *, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 56);
  if (!v11)
    goto LABEL_13;
  v12 = v11(v10, a3, &cf, &v16);
  if ((_DWORD)v12)
    goto LABEL_7;
  if (v16 != (_DWORD)a4)
  {
    v12 = FigSignalErrorAt();
    goto LABEL_7;
  }
LABEL_11:
  v13 = 0;
  *a6 = cf;
  cf = 0;
  if (v10)
    goto LABEL_14;
LABEL_15:
  if (cf)
    CFRelease(cf);
  return v13;
}

void mutableComposition_copyReplacedFormatDescription(CFArrayRef theArray, CFTypeRef cf, _QWORD *a3)
{
  CFIndex v6;
  CFIndex Count;
  const __CFDictionary *ValueAtIndex;
  const opaqueCMFormatDescription *Value;
  const void *v10;
  CFTypeRef v11;

  if (cf)
    CFRetain(cf);
  v6 = 0;
  do
  {
    if (theArray)
      Count = CFArrayGetCount(theArray);
    else
      Count = 0;
    if (v6 >= Count)
    {
      v11 = cf;
      goto LABEL_14;
    }
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v6);
    Value = (const opaqueCMFormatDescription *)CFDictionaryGetValue(ValueAtIndex, CFSTR("MutableCompositionFormatDescriptionReplacementTableKey_OldFormatDescription"));
    MEMORY[0x19402F294](&mutableComposition_ignoredKeysForFormatDescriptionEquality_once, mutableComposition_makeIgnoredKeysForFormatDescriptionEquality);
    ++v6;
  }
  while (!CMFormatDescriptionEqualIgnoringExtensionKeys(Value, (CMFormatDescriptionRef)cf, (CFTypeRef)sIgnoredKeysForFormatDescriptionEquality, 0));
  v10 = CFDictionaryGetValue(ValueAtIndex, CFSTR("MutableCompositionFormatDescriptionReplacementTableKey_NewFormatDescription"));
  v11 = v10;
  if (v10)
    CFRetain(v10);
  if (cf)
    CFRelease(cf);
LABEL_14:
  *a3 = v11;
}

uint64_t compositionTable_copyFormatReaderForAssetURL(uint64_t a1, const void *a2, const __CFAllocator *a3, _QWORD *a4)
{
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t CMBaseObject;
  uint64_t (*v12)(uint64_t, const __CFString *, const __CFAllocator *, _QWORD);
  uint64_t v13;
  uint64_t (*v15)(uint64_t, const __CFString *, const __CFAllocator *, _QWORD);
  void *value;

  v15 = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 56));
  v8 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), a2);
  value = v8;
  if (v8)
  {
    v9 = v8;
    CFRetain(v8);
  }
  else
  {
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 56));
    v10 = compositionSharedCache_copyAssetForAssetURL(*(_QWORD *)(a1 + 160), a2, a3, &value);
    if ((_DWORD)v10)
    {
      v13 = v10;
      v12 = 0;
      v9 = value;
      goto LABEL_8;
    }
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 56));
    v9 = value;
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 64), a2, value);
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 56));
  CMBaseObject = FigAssetGetCMBaseObject(v9);
  v12 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
  if (v12)
  {
    v13 = v12(CMBaseObject, CFSTR("assetProperty_FormatReader"), a3, &v15);
    v12 = v15;
  }
  else
  {
    v13 = 4294954514;
  }
LABEL_8:
  *a4 = v12;
  if (v9)
    CFRelease(v9);
  return v13;
}

uint64_t compositionSharedCache_copyAssetForAssetURL(uint64_t a1, const void *a2, const __CFAllocator *a3, _QWORD *a4)
{
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, const void *, _QWORD, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v12;
  CFAllocatorRef v13;
  uint64_t v14;
  CFTypeRef v16;
  CFTypeRef cf;
  void *value;

  cf = 0;
  value = 0;
  v16 = 0;
  compositionSharedCache_copyAssetForAssetURLFromCache(a1, a2, &value);
  v8 = value;
  if (value)
  {
    v9 = 0;
LABEL_14:
    v14 = 0;
    *a4 = v8;
    value = 0;
    goto LABEL_15;
  }
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = *(uint64_t (**)(uint64_t, const void *, _QWORD, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                               + 8);
    if (!v11)
    {
      v14 = 4294954514;
      goto LABEL_23;
    }
    v12 = v11(v10, a2, 0, 0, *MEMORY[0x1E0C9AE00], &v16);
    if (!(_DWORD)v12)
    {
      v12 = FigFormatReaderCreateForStream((uint64_t)v16, a3, 0, &cf);
      if (!(_DWORD)v12)
      {
        v13 = CFGetAllocator(cf);
        v12 = FigAssetCreateWithFormatReader((uint64_t)v13, cf, 0, 0, &value);
        if (!(_DWORD)v12)
        {
LABEL_8:
          MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 32));
          if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 40), a2))
          {
            v9 = value;
            value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), a2);
            CFRetain(value);
          }
          else
          {
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), a2, value);
            v9 = 0;
          }
          MEMORY[0x19402EF04](*(_QWORD *)(a1 + 32));
          v8 = value;
          goto LABEL_14;
        }
      }
    }
  }
  else
  {
    v12 = FigAssetCreateWithURL((uint64_t)a3, (uint64_t)a2, *(_QWORD *)(a1 + 16), *(const void **)(a1 + 24), &value);
    if (!(_DWORD)v12)
      goto LABEL_8;
  }
  v14 = v12;
LABEL_23:
  if (value)
    CFRelease(value);
  v9 = 0;
LABEL_15:
  if (cf)
    CFRelease(cf);
  if (v9)
    CFRelease(v9);
  if (v16)
    CFRelease(v16);
  return v14;
}

uint64_t compositionSharedCache_copyAssetForAssetURLFromCache(uint64_t result, const void *a2, _QWORD *a3)
{
  const void *v4;
  uint64_t v5;
  const void *Value;

  v4 = a2;
  if (a2)
  {
    v5 = result;
    MEMORY[0x19402EEEC](*(_QWORD *)(result + 32));
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 40), v4);
    v4 = Value;
    if (Value)
      CFRetain(Value);
    result = MEMORY[0x19402EF04](*(_QWORD *)(v5 + 32));
  }
  *a3 = v4;
  return result;
}

void mutableComposition_makeIgnoredKeysForFormatDescriptionEquality()
{
  __CFArray *Mutable;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  CFArrayAppendValue(Mutable, (const void *)*MEMORY[0x1E0CA2278]);
  CFArrayAppendValue(Mutable, (const void *)*MEMORY[0x1E0CA2270]);
  sIgnoredKeysForFormatDescriptionEquality = (uint64_t)Mutable;
}

uint64_t compositionTable_copyTrackPropertyFromFirstNonEmptyEdit(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, const __CFAllocator *a5, uint64_t a6)
{
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  const void *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  CFTypeRef v22;
  uint64_t FigBaseObject;
  uint64_t (*v24)(uint64_t, uint64_t, const __CFAllocator *, uint64_t);
  CFTypeRef cf;

  cf = 0;
  MEMORY[0x19402EEEC](a1[1]);
  v12 = a1[2];
  if (v12 < 1)
  {
LABEL_5:
    v14 = FigSignalErrorAt();
LABEL_11:
    v17 = 0;
    v18 = 0;
    v19 = 1;
    goto LABEL_12;
  }
  v13 = (_QWORD *)(a1[4] + 8);
  while (*((_DWORD *)v13 - 1) != a2)
  {
    v13 += 21;
    if (!--v12)
      goto LABEL_5;
  }
  v15 = *v13;
  if ((uint64_t)*v13 < 1)
  {
LABEL_10:
    v14 = 0;
    goto LABEL_11;
  }
  v16 = (unsigned int *)(v13[1] + 104);
  while ((*(v16 - 23) & 0x1D) != 1)
  {
    v16 += 27;
    if (!--v15)
      goto LABEL_10;
  }
  v17 = (const void *)*((_QWORD *)v16 - 1);
  v18 = *v16;
  if (v17)
    CFRetain(*((CFTypeRef *)v16 - 1));
  v14 = 0;
  v19 = 0;
LABEL_12:
  MEMORY[0x19402EF04](a1[1]);
  if (v14)
    v20 = v14;
  else
    v20 = 4294954775;
  if (v14 || (v19 & 1) != 0)
    goto LABEL_22;
  v21 = compositionTable_copyConcreteTrackReaderForAssetURLTrackIDMediaType((uint64_t)a1, v17, v18, a3, a5, &cf);
  v22 = cf;
  if ((_DWORD)v21)
  {
LABEL_20:
    v20 = v21;
    if (!v22)
      goto LABEL_22;
    goto LABEL_21;
  }
  FigBaseObject = FigTrackReaderGetFigBaseObject(cf);
  v24 = *(uint64_t (**)(uint64_t, uint64_t, const __CFAllocator *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (v24)
  {
    v21 = v24(FigBaseObject, a4, a5, a6);
    goto LABEL_20;
  }
  v20 = 4294954514;
  if (v22)
LABEL_21:
    CFRelease(v22);
LABEL_22:
  if (v17)
    CFRelease(v17);
  return v20;
}

uint64_t compositionTable_copyAverageTrackPropertyFromNonEmptyEdits(_QWORD *a1, int a2, unsigned int a3, uint64_t a4, const __CFAllocator *a5, CFNumberRef *a6)
{
  const __CFAllocator *v10;
  const CFArrayCallBacks *v11;
  CFMutableArrayRef Mutable;
  const __CFArray *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  CFIndex v28;
  const __CFDictionary *ValueAtIndex;
  CFDictionaryRef v30;
  CFTypeRef v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  CFIndex Count;
  CFIndex v36;
  CFIndex v37;
  double v38;
  CMTimeEpoch v39;
  const void *v40;
  const __CFDictionary *v41;
  uint64_t FigBaseObject;
  uint64_t (*v43)(uint64_t, uint64_t, const __CFAllocator *, const __CFNumber **);
  uint64_t v44;
  double v45;
  double Seconds;
  CFNumberRef *v47;
  const __CFAllocator *v48;
  uint64_t v49;
  __CFArray *theArray;
  __int128 v53;
  const __CFAllocator *allocator;
  CMTime lhs;
  CMTime rhs;
  CMTime time;
  CMTime v58;
  const __CFNumber *v59;
  CMTime v60;
  double valuePtr;
  CFTypeRef v62;

  valuePtr = 0.0;
  v62 = 0;
  v60 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v59 = 0;
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v11 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  allocator = v10;
  v13 = CFArrayCreateMutable(v10, 0, v11);
  MEMORY[0x19402EEEC](a1[1]);
  v14 = a1[2];
  if (v14 < 1)
  {
LABEL_5:
    FigSignalErrorAt();
    goto LABEL_6;
  }
  v15 = (_QWORD *)(a1[4] + 16);
  while (*((_DWORD *)v15 - 3) != a2)
  {
    v15 += 21;
    if (!--v14)
      goto LABEL_5;
  }
  v18 = *(v15 - 1);
  if (v18 <= 0)
  {
LABEL_6:
    MEMORY[0x19402EF04](a1[1]);
    v16 = 4294954775;
    goto LABEL_7;
  }
  v48 = a5;
  v49 = (uint64_t)a1;
  v47 = a6;
  theArray = Mutable;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  if (v18 >= 100)
    v23 = 100;
  else
    v23 = *(v15 - 1);
  do
  {
    v24 = *v15 + v19;
    if ((*(_DWORD *)(v24 + 12) & 0x1D) == 1)
    {
      v58 = *(CMTime *)(v24 + 24);
      v25 = *(_QWORD *)(v24 + 96);
      v26 = *(_DWORD *)(v24 + 104);
      if (v21 && (v21 == v25 ? (v27 = v20 == v26) : (v27 = 0), v27))
      {
        v28 = CFArrayGetCount(v13) - 1;
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v13, v28);
        memset(&time, 0, sizeof(time));
        CMTimeMakeFromDictionary(&rhs, ValueAtIndex);
        lhs = v58;
        CMTimeAdd(&time, &lhs, &rhs);
        lhs = time;
        v30 = CMTimeCopyAsDictionary(&lhs, allocator);
        CFArraySetValueAtIndex(v13, v28, v30);
        v31 = 0;
      }
      else
      {
        v32 = compositionTable_copyConcreteTrackReaderForAssetURLTrackIDMediaType(v49, *(const void **)(v24 + 96), *(unsigned int *)(v24 + 104), a3, v48, &v62);
        if ((_DWORD)v32)
        {
          v16 = v32;
          MEMORY[0x19402EF04](*(_QWORD *)(v49 + 8));
          goto LABEL_46;
        }
        v31 = v62;
        CFArrayAppendValue(theArray, v62);
        time = v58;
        v30 = CMTimeCopyAsDictionary(&time, allocator);
        CFArrayAppendValue(v13, v30);
        v21 = v25;
        v20 = v26;
      }
      v33 = *v15 + v19;
      time = v60;
      v34 = *(_OWORD *)(v33 + 72);
      lhs.epoch = *(_QWORD *)(v33 + 88);
      *(_OWORD *)&lhs.value = v34;
      CMTimeAdd(&v60, &time, &lhs);
      if (v30)
        CFRelease(v30);
      if (v31)
      {
        CFRelease(v31);
        v62 = 0;
      }
      v22 = 1;
    }
    v19 += 108;
    --v23;
  }
  while (v23);
  MEMORY[0x19402EF04](*(_QWORD *)(v49 + 8));
  if (!v22)
  {
    v16 = 4294954775;
LABEL_46:
    Mutable = theArray;
    goto LABEL_7;
  }
  Mutable = theArray;
  Count = CFArrayGetCount(theArray);
  if (Count < 1)
  {
    v38 = 0.0;
LABEL_48:
    v58 = v60;
    valuePtr = v38 / CMTimeGetSeconds(&v58);
    v16 = 0;
    *v47 = CFNumberCreate(allocator, kCFNumberFloat64Type, &valuePtr);
  }
  else
  {
    v36 = Count;
    v37 = 0;
    v38 = 0.0;
    v53 = *MEMORY[0x1E0CA2E18];
    v39 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    while (1)
    {
      lhs.value = 0;
      *(_OWORD *)&v58.value = v53;
      v58.epoch = v39;
      v40 = CFArrayGetValueAtIndex(theArray, v37);
      v41 = (const __CFDictionary *)CFArrayGetValueAtIndex(v13, v37);
      CMTimeMakeFromDictionary(&v58, v41);
      FigBaseObject = FigTrackReaderGetFigBaseObject(v40);
      v43 = *(uint64_t (**)(uint64_t, uint64_t, const __CFAllocator *, const __CFNumber **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (!v43)
      {
        v16 = 4294954514;
        goto LABEL_7;
      }
      v44 = v43(FigBaseObject, a4, v48, &v59);
      if ((_DWORD)v44)
        break;
      CFNumberGetValue(v59, kCFNumberFloat64Type, &lhs);
      v45 = *(double *)&lhs.value;
      time = v58;
      Seconds = CMTimeGetSeconds(&time);
      if (v59)
      {
        CFRelease(v59);
        v59 = 0;
      }
      v38 = v38 + v45 * Seconds;
      if (v36 == ++v37)
        goto LABEL_48;
    }
    v16 = v44;
  }
LABEL_7:
  if (Mutable)
    CFRelease(Mutable);
  if (v13)
    CFRelease(v13);
  if (v62)
    CFRelease(v62);
  if (v59)
    CFRelease(v59);
  return v16;
}

uint64_t composite_trackReader_GetTrackInfo(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
    *a2 = *(_DWORD *)(DerivedStorage + 8);
  if (a3)
    *a3 = *(_DWORD *)(DerivedStorage + 12);
  return 0;
}

uint64_t composite_trackReader_CopySampleCursorService(uint64_t a1, CFTypeRef *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *a2 = CFRetain(*(CFTypeRef *)(DerivedStorage + 32));
  return 0;
}

void compositeSuper_editCursorService_Finalize()
{
  uint64_t *DerivedStorage;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  compositionTable_releaseAndClear(DerivedStorage);
}

__CFString *compositeSuper_editCursorService_CopyDebugDescription(uint64_t a1)
{
  _DWORD *DerivedStorage;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __CFString *Mutable;
  __CFString *v8;
  uint64_t v9;
  unsigned int v11;

  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage;
  v4 = *(_QWORD *)DerivedStorage;
  v5 = *(_QWORD *)(*(_QWORD *)DerivedStorage + 16);
  if (v5 < 1)
  {
LABEL_5:
    v6 = 0;
  }
  else
  {
    v6 = *(_QWORD *)(v4 + 32);
    while (*(_DWORD *)(v6 + 4) != DerivedStorage[2])
    {
      v6 += 168;
      if (!--v5)
        goto LABEL_5;
    }
  }
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<CompositeSuper FigEditCursorService %p>"), a1);
  if (v6)
  {
    v8 = compositionTableTrack_CopyDebugDescription(v6);
    CFStringAppend(Mutable, v8);
    if (v8)
      CFRelease(v8);
  }
  else
  {
    v9 = v3[2];
    v11 = bswap32(v3[3]);
    CFStringAppendFormat(Mutable, 0, CFSTR("{ trackID %d, mediaType %.4s, table %p, "), v9, &v11, v4);
    CFStringAppend(Mutable, CFSTR("trackID not found in table"));
    CFStringAppendFormat(Mutable, 0, CFSTR(" }"));
  }
  return Mutable;
}

uint64_t compositeSuper_editCursorService_CreateCursorAtTrackTime(const void *a1, CMTime *a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  CMTime v20;
  CMTime time1;
  uint64_t v22;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = *(_QWORD *)DerivedStorage;
  v22 = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(v7 + 8));
  v8 = *(_QWORD *)(v7 + 16);
  if (v8 < 1)
  {
LABEL_5:
    v11 = FigSignalErrorAt();
    v12 = *(_DWORD *)(v7 + 4);
    MEMORY[0x19402EF04](*(_QWORD *)(v7 + 8));
    if ((_DWORD)v11)
      return v11;
    v13 = 0;
  }
  else
  {
    v9 = *(_DWORD *)(DerivedStorage + 8);
    v10 = (uint64_t *)(*(_QWORD *)(v7 + 32) + 8);
    while (*((_DWORD *)v10 - 1) != v9)
    {
      v10 += 21;
      if (!--v8)
        goto LABEL_5;
    }
    if (*v10 < 1)
    {
      MEMORY[0x19402EF04](*(_QWORD *)(v7 + 8));
      return 4294954775;
    }
    v14 = 0;
    v15 = 156;
    do
    {
      v13 = v14++;
      if (v14 >= *v10)
        break;
      v16 = v10[1] + v15;
      v17 = *(_OWORD *)v16;
      time1.epoch = *(_QWORD *)(v16 + 16);
      *(_OWORD *)&time1.value = v17;
      v20 = *a2;
      v15 += 108;
    }
    while (CMTimeCompare(&time1, &v20) < 1);
    v12 = *(_DWORD *)(v7 + 4);
    MEMORY[0x19402EF04](*(_QWORD *)(v7 + 8));
  }
  CFGetAllocator(a1);
  FigEditCursorGetClassID();
  v11 = CMDerivedObjectCreate();
  if (!(_DWORD)v11)
  {
    v18 = CMBaseObjectGetDerivedStorage();
    *(_QWORD *)v18 = a1;
    CFRetain(a1);
    *(_QWORD *)(v18 + 8) = v13;
    *(_DWORD *)(v18 + 16) = v12;
    *a3 = v22;
  }
  return v11;
}

void compositeSuper_editCursor_Finalize()
{
  CFTypeRef *DerivedStorage;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    *DerivedStorage = 0;
  }
}

__CFString *compositeSuper_editCursor_CopyDebugDescription(uint64_t a1)
{
  _QWORD *DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<CompositeSuper FigEditCursor %p>{ service %p, editIndex %d }"), a1, *DerivedStorage, DerivedStorage[1]);
  return Mutable;
}

uint64_t compositeSuper_editCursor_Copy(const void *a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  const void *v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFGetAllocator(a1);
  FigEditCursorGetClassID();
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    v6 = CMBaseObjectGetDerivedStorage();
    v7 = *(const void **)DerivedStorage;
    *(_QWORD *)v6 = *(_QWORD *)DerivedStorage;
    CFRetain(v7);
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(DerivedStorage + 8);
    *(_DWORD *)(v6 + 16) = *(_DWORD *)(DerivedStorage + 16);
    *a2 = 0;
  }
  return v5;
}

uint64_t compositeSuper_editCursor_Step(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  _DWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = (_DWORD *)CMBaseObjectGetDerivedStorage();
  v5 = *(_QWORD **)v4;
  MEMORY[0x19402EEEC](*(_QWORD *)(*(_QWORD *)v4 + 8));
  v6 = v5[2];
  if (v6 < 1)
  {
LABEL_5:
    v8 = 0;
  }
  else
  {
    v7 = (_QWORD *)(v5[4] + 8);
    while (*((_DWORD *)v7 - 1) != v4[2])
    {
      v7 += 21;
      if (!--v6)
        goto LABEL_5;
    }
    v8 = *v7;
  }
  MEMORY[0x19402EF04](v5[1]);
  if (v8)
  {
    v9 = *(_QWORD *)(DerivedStorage + 8) + a2;
    result = 4294954776;
    if (v9 < 0)
    {
      v9 = 0;
    }
    else
    {
      if (v9 >= v8)
        result = 4294954776;
      else
        result = 0;
      if (v9 >= v8)
        v9 = v8 - 1;
    }
  }
  else
  {
    v9 = 0;
    result = 4294954775;
  }
  *(_QWORD *)(DerivedStorage + 8) = v9;
  return result;
}

uint64_t compositeSuper_editCursor_GetEditSegment(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  const void *v8;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  CFTypeRef v26;
  uint64_t v27;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = (_DWORD *)CMBaseObjectGetDerivedStorage();
  v5 = *(_QWORD *)v4;
  MEMORY[0x19402EEEC](*(_QWORD *)(*(_QWORD *)v4 + 8));
  if (*(_DWORD *)(v5 + 4) != *(_DWORD *)(DerivedStorage + 16))
    goto LABEL_6;
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 < 1)
    goto LABEL_6;
  v7 = (_QWORD *)(*(_QWORD *)(v5 + 32) + 8);
  while (*((_DWORD *)v7 - 1) != v4[2])
  {
    v7 += 21;
    if (!--v6)
      goto LABEL_6;
  }
  v10 = *(_QWORD *)(DerivedStorage + 8);
  if (v10 < 0 || v10 >= *v7)
  {
LABEL_6:
    v8 = (const void *)FigSignalErrorAt();
    MEMORY[0x19402EF04](*(_QWORD *)(v5 + 8));
    if (!(_DWORD)v8)
    {
      if ((*(_DWORD *)(a2 + 12) & 0x1D) == 1)
        return 4294954511;
      else
        return 0;
    }
  }
  else
  {
    v11 = v7[1] + 108 * v10;
    v12 = *(_OWORD *)(v11 + 16);
    *(_OWORD *)a2 = *(_OWORD *)v11;
    *(_OWORD *)(a2 + 16) = v12;
    v13 = *(_OWORD *)(v11 + 32);
    v14 = *(_OWORD *)(v11 + 48);
    v15 = *(_OWORD *)(v11 + 80);
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(v11 + 64);
    *(_OWORD *)(a2 + 80) = v15;
    *(_OWORD *)(a2 + 32) = v13;
    *(_OWORD *)(a2 + 48) = v14;
    v8 = *(const void **)(v11 + 96);
    v16 = *(_DWORD *)(v11 + 104);
    if (v8)
      CFRetain(*(CFTypeRef *)(v11 + 96));
    MEMORY[0x19402EF04](*(_QWORD *)(v5 + 8));
    if ((*(_DWORD *)(a2 + 12) & 0x1D) == 1)
    {
      if (!v8)
        return 4294954511;
      v17 = v4[3];
      MEMORY[0x19402EEEC](*(_QWORD *)(v5 + 120));
      v18 = *(_QWORD *)(v5 + 144);
      if (v18 < 2)
      {
        v20 = 1;
      }
      else
      {
        v19 = 0;
        v20 = 1;
        while (1)
        {
          v21 = *(const void **)(*(_QWORD *)(v5 + 136) + v19 + 16);
          if (v21)
          {
            if (CFEqual(v21, v8))
            {
              v22 = *(_QWORD *)(v5 + 136) + v19;
              if (*(_DWORD *)(v22 + 24) == v16 && *(_DWORD *)(v22 + 28) == v17)
                break;
            }
          }
          ++v20;
          v18 = *(_QWORD *)(v5 + 144);
          v19 += 16;
          if (v20 >= v18)
            goto LABEL_28;
        }
        v18 = *(_QWORD *)(v5 + 144);
      }
LABEL_28:
      if (v20 == v18)
      {
        *(_QWORD *)(v5 + 144) = v18 + 1;
        v23 = *(_QWORD *)(v5 + 128);
        if (v18 >= v23)
        {
          v24 = 2 * v23;
          v25 = malloc_type_calloc(2 * v23, 0x10uLL, 0x1060040C2E02434uLL);
          memcpy(v25, *(const void **)(v5 + 136), 16 * *(_QWORD *)(v5 + 128));
          free(*(void **)(v5 + 136));
          *(_QWORD *)(v5 + 128) = v24;
          *(_QWORD *)(v5 + 136) = v25;
        }
        v26 = CFRetain(v8);
        v27 = *(_QWORD *)(v5 + 136) + 16 * v18;
        *(_QWORD *)v27 = v26;
        *(_DWORD *)(v27 + 8) = v16;
        *(_DWORD *)(v27 + 12) = v17;
      }
      MEMORY[0x19402EF04](*(_QWORD *)(v5 + 120));
      *(_QWORD *)(a2 + 16) = v20;
    }
    if (v8)
    {
      CFRelease(v8);
      return 0;
    }
  }
  return (uint64_t)v8;
}

void compositeProxy_editCursorService_Finalize()
{
  uint64_t *DerivedStorage;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  compositionTable_releaseAndClear(DerivedStorage);
}

__CFString *compositeProxy_editCursorService_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<CompositeProxy FigEditCursorService %p>"), a1);
  return Mutable;
}

uint64_t compositeProxy_editCursorService_CreateCursorAtTrackTime(const void *a1, __int128 *a2, _QWORD *a3)
{
  unsigned int *DerivedStorage;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  const __CFAllocator *v12;
  uint64_t v13;
  CFTypeRef v14;
  uint64_t v15;
  uint64_t v16;
  CFAllocatorRef v17;
  uint64_t FigBaseObject;
  uint64_t (*v19)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *);
  uint64_t v20;
  CFTypeRef v21;
  uint64_t (*v22)(CFTypeRef, CFTypeRef *, CFTypeRef *);
  uint64_t v23;
  _QWORD *v24;
  CFTypeRef v25;
  _DWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  void (*v29)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v30;
  const __CFAllocator *v31;
  uint64_t v32;
  uint64_t TrackGaplessSourceTimeRange;
  CFTypeRef v34;
  const __CFAllocator *v35;
  __int128 v36;
  CFTypeRef v37;
  CFTypeRef v39[2];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  CFTypeRef cf;
  __int128 v45;
  _BYTE v46[32];
  CFTypeRef v47;
  CFTypeRef v48;
  CFTypeRef v49;
  CFTypeRef v50;
  CFTypeRef v51;

  DerivedStorage = (unsigned int *)CMBaseObjectGetDerivedStorage();
  v50 = 0;
  v51 = 0;
  v48 = 0;
  v49 = 0;
  v47 = 0;
  v7 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  v45 = *MEMORY[0x1E0CA2E40];
  *(_OWORD *)v46 = v7;
  *(_OWORD *)&v46[16] = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
  cf = 0;
  *a3 = 0;
  v8 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  v9 = *(_QWORD *)DerivedStorage;
  v10 = *(_DWORD *)(*(_QWORD *)DerivedStorage + 4);
  v11 = DerivedStorage[2];
  v12 = CFGetAllocator(a1);
  v13 = compositionTable_copyConcreteTrackReaderForEpoch(v9, v8, v11, v12, &v51);
  if ((_DWORD)v13 == -12843)
  {
    v14 = 0;
    v15 = 4294954775;
    goto LABEL_36;
  }
  v15 = v13;
  if ((_DWORD)v13)
    goto LABEL_35;
  v16 = (uint64_t)v51;
  v17 = CFGetAllocator(a1);
  FigBaseObject = FigTrackReaderGetFigBaseObject(v16);
  v19 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
  if (!v19)
    goto LABEL_11;
  v20 = v19(FigBaseObject, CFSTR("EditCursorService"), v17, &v50);
  if ((_DWORD)v20 == -12784)
  {
    CFGetAllocator(a1);
    FigEditCursorGetClassID();
    v23 = CMDerivedObjectCreate();
    if (!(_DWORD)v23)
    {
      v27 = (_QWORD *)CMBaseObjectGetDerivedStorage();
      *v27 = *(_QWORD *)DerivedStorage;
      FigAtomicIncrement32();
      v27[1] = v8;
      v26 = v27 + 2;
      goto LABEL_14;
    }
    goto LABEL_34;
  }
  v15 = v20;
  if ((_DWORD)v20)
  {
LABEL_35:
    v14 = 0;
    goto LABEL_36;
  }
  v21 = v50;
  v42 = *a2;
  v43 = *((_QWORD *)a2 + 2);
  v22 = *(uint64_t (**)(CFTypeRef, CFTypeRef *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v22)
  {
LABEL_11:
    v14 = 0;
    v15 = 4294954514;
    goto LABEL_36;
  }
  *(_OWORD *)v39 = v42;
  *(_QWORD *)&v40 = v43;
  v23 = v22(v21, v39, &v49);
  if ((_DWORD)v23 || (CFGetAllocator(a1), FigEditCursorGetClassID(), v23 = CMDerivedObjectCreate(), (_DWORD)v23))
  {
LABEL_34:
    v15 = v23;
    goto LABEL_35;
  }
  v24 = (_QWORD *)CMBaseObjectGetDerivedStorage();
  *v24 = *(_QWORD *)DerivedStorage;
  FigAtomicIncrement32();
  v25 = v49;
  v49 = 0;
  v24[1] = v25;
  v24[2] = v8;
  v26 = v24 + 3;
LABEL_14:
  *v26 = v10;
  if (DerivedStorage[2] != 1936684398)
    goto LABEL_30;
  v28 = FigTrackReaderGetFigBaseObject(v16);
  v29 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
  if (v29)
    v29(v28, CFSTR("EditsExcludePrimingAndRemainderDuration"), *MEMORY[0x1E0C9AE00], &v47);
  if (v47 == (CFTypeRef)*MEMORY[0x1E0C9AE50])
  {
LABEL_30:
    v14 = 0;
    goto LABEL_31;
  }
  v30 = *(_QWORD *)DerivedStorage;
  v31 = CFGetAllocator(a1);
  v39[0] = 0;
  if (v8 < 1 || *(_QWORD *)(v30 + 144) <= v8)
  {
    TrackGaplessSourceTimeRange = FigSignalErrorAt();
    v14 = 0;
    if ((_DWORD)TrackGaplessSourceTimeRange)
      goto LABEL_52;
    goto LABEL_21;
  }
  v32 = compositionTable_copyFormatReaderForAssetURL(v30, *(const void **)(*(_QWORD *)(v30 + 136) + 16 * v8), v31, v39);
  v14 = v39[0];
  if ((_DWORD)v32)
  {
    v15 = v32;
    if (v39[0])
      CFRelease(v39[0]);
    goto LABEL_35;
  }
LABEL_21:
  TrackGaplessSourceTimeRange = FigGaplessInfoGetTrackGaplessSourceTimeRange((uint64_t)v14, v16, &v45);
  if (!(_DWORD)TrackGaplessSourceTimeRange)
  {
    if ((BYTE12(v45) & 0x1D) == 1 || (v46[20] & 0x1D) == 1)
    {
      if ((BYTE12(v45) & 1) == 0)
      {
        v45 = *MEMORY[0x1E0CA2E68];
        *(_QWORD *)v46 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
      }
      if ((v46[20] & 1) == 0)
      {
        *(_OWORD *)&v46[8] = *MEMORY[0x1E0CA2E30];
        *(_QWORD *)&v46[24] = *(_QWORD *)(MEMORY[0x1E0CA2E30] + 16);
      }
      *((_QWORD *)a2 + 2) = v8;
      v34 = v48;
      v35 = CFGetAllocator(a1);
      *(_OWORD *)v39 = v45;
      v40 = *(_OWORD *)v46;
      v36 = *a2;
      v41 = *(_OWORD *)&v46[16];
      v42 = v36;
      v43 = *((_QWORD *)a2 + 2);
      TrackGaplessSourceTimeRange = FigGaplessAudioEditCursorCreate(v34, (uint64_t)v39, (uint64_t)&v42, v35, &cf);
      if (!(_DWORD)TrackGaplessSourceTimeRange)
      {
        v37 = cf;
LABEL_33:
        v15 = 0;
        *a3 = v37;
        cf = 0;
        goto LABEL_36;
      }
      goto LABEL_52;
    }
LABEL_31:
    v37 = v48;
    if (v48)
      v37 = CFRetain(v48);
    goto LABEL_33;
  }
LABEL_52:
  v15 = TrackGaplessSourceTimeRange;
LABEL_36:
  if (v51)
    CFRelease(v51);
  if (v50)
    CFRelease(v50);
  if (v49)
    CFRelease(v49);
  if (v48)
    CFRelease(v48);
  if (v47)
    CFRelease(v47);
  if (v14)
    CFRelease(v14);
  if (cf)
    CFRelease(cf);
  return v15;
}

uint64_t compositionTable_copyConcreteTrackReaderForEpoch(uint64_t a1, uint64_t a2, uint64_t a3, const __CFAllocator *a4, _QWORD *a5)
{
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *value;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 120));
  v10 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 152), (const void *)a2);
  value = v10;
  if (v10)
  {
    v11 = v10;
    CFRetain(v10);
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 120));
    v12 = 0;
    *a5 = v11;
    return v12;
  }
  if (a2 < 1 || *(_QWORD *)(a1 + 144) <= a2)
  {
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 120));
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 136);
    v15 = *(const void **)(v14 + 16 * a2);
    if (v15)
    {
      CFRetain(*(CFTypeRef *)(v14 + 16 * a2));
      v14 = *(_QWORD *)(a1 + 136);
    }
    v16 = *(unsigned int *)(v14 + 16 * a2 + 8);
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 120));
    if (v15)
    {
      v17 = compositionTable_copyConcreteTrackReaderForAssetURLTrackIDMediaType(a1, v15, v16, a3, a4, (CFTypeRef *)&value);
      if (!(_DWORD)v17)
      {
        MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 120));
        v18 = value;
        CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 152), (const void *)a2, value);
        MEMORY[0x19402EF04](*(_QWORD *)(a1 + 120));
        if (v18)
        {
          v12 = 0;
          *a5 = v18;
LABEL_12:
          CFRelease(v15);
          return v12;
        }
        v17 = FigSignalErrorAt();
      }
      v12 = v17;
      goto LABEL_12;
    }
  }
  return FigSignalErrorAt();
}

void compositeProxy_editCursor_Finalize()
{
  uint64_t *DerivedStorage;
  const void *v1;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  compositionTable_releaseAndClear(DerivedStorage);
  v1 = (const void *)DerivedStorage[1];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[1] = 0;
  }
}

__CFString *compositeProxy_editCursor_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<CompositeProxy FigEditCursor %p>{ concreteEditCursor %p, epoch %d }"), a1, *(_QWORD *)(DerivedStorage + 8), *(_QWORD *)(DerivedStorage + 16));
  return Mutable;
}

uint64_t compositeProxy_editCursor_Copy(const void *a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, CFTypeRef *);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v5 = *(_QWORD *)(DerivedStorage + 8);
  v6 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v6)
  {
    v7 = v6(v5, &cf);
    if ((_DWORD)v7)
    {
      v8 = v7;
    }
    else
    {
      CFGetAllocator(a1);
      FigEditCursorGetClassID();
      v8 = CMDerivedObjectCreate();
      if (!(_DWORD)v8)
      {
        v9 = CMBaseObjectGetDerivedStorage();
        *(_QWORD *)v9 = *(_QWORD *)DerivedStorage;
        FigAtomicIncrement32();
        *(_QWORD *)(v9 + 8) = cf;
        cf = 0;
        *(_QWORD *)(v9 + 16) = *(_QWORD *)(DerivedStorage + 16);
        *(_DWORD *)(v9 + 24) = *(_DWORD *)(DerivedStorage + 24);
        *a2 = 0;
      }
    }
  }
  else
  {
    v8 = 4294954514;
  }
  if (cf)
    CFRelease(cf);
  return v8;
}

uint64_t compositeProxy_editCursor_Step(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v4)
    return v4(v3, a2);
  else
    return 4294954514;
}

uint64_t compositeProxy_editCursor_GetEditSegment(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(_QWORD *)(DerivedStorage + 8);
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v5)
    return 4294954514;
  result = v5(v4, a2);
  if (!(_DWORD)result)
  {
    v7 = *(_QWORD *)(DerivedStorage + 16);
    *(_QWORD *)(a2 + 64) = v7;
    *(_QWORD *)(a2 + 16) = v7;
  }
  return result;
}

void compositeSimple_editCursor_Finalize()
{
  uint64_t *DerivedStorage;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  compositionTable_releaseAndClear(DerivedStorage);
}

__CFString *compositeSimple_editCursor_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<CompositeSimple FigEditCursor %p>{ epoch %d }"), a1, *(_QWORD *)(DerivedStorage + 8));
  return Mutable;
}

uint64_t compositeSimple_editCursor_Copy(const void *a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFGetAllocator(a1);
  FigEditCursorGetClassID();
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    v6 = CMBaseObjectGetDerivedStorage();
    *(_QWORD *)v6 = *(_QWORD *)DerivedStorage;
    FigAtomicIncrement32();
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(DerivedStorage + 8);
    *(_DWORD *)(v6 + 16) = *(_DWORD *)(DerivedStorage + 16);
    *a2 = 0;
  }
  return v5;
}

uint64_t compositeSimple_editCursor_Step()
{
  return 4294954776;
}

uint64_t compositeSimple_editCursor_GetEditSegment(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = MEMORY[0x1E0CA2E68];
  v5 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)(a2 + 48) = *MEMORY[0x1E0CA2E68];
  v6 = *(_QWORD *)(v4 + 16);
  *(_QWORD *)(a2 + 64) = v6;
  v7 = MEMORY[0x1E0CA2E30];
  v8 = *MEMORY[0x1E0CA2E30];
  *(_OWORD *)(a2 + 72) = *MEMORY[0x1E0CA2E30];
  v9 = *(_QWORD *)(v7 + 16);
  *(_QWORD *)(a2 + 88) = v9;
  *(_OWORD *)a2 = v5;
  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 40) = v9;
  *(_OWORD *)(a2 + 24) = v8;
  v10 = *(_QWORD *)(DerivedStorage + 8);
  *(_QWORD *)(a2 + 64) = v10;
  *(_QWORD *)(a2 + 16) = v10;
  return 0;
}

void compositeProxy_sampleCursorService_Finalize()
{
  uint64_t *DerivedStorage;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  compositionTable_releaseAndClear(DerivedStorage);
}

CFTypeRef compositeProxy_sampleCursorService_CopyDebugDescription()
{
  return CFRetain(CFSTR("[CompositeProxy FigSampleCursorService]"));
}

uint64_t compositeProxy_sampleCursorService_CreateCursorAtPresentationTimeStamp(const void *a1, __int128 *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _DWORD *DerivedStorage;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  const __CFAllocator *v15;
  uint64_t v16;
  uint64_t ProxySampleCursor;
  CFTypeRef v18;
  unsigned int (*v19)(CFTypeRef, CFTypeRef *);
  CFAllocatorRef v20;
  uint64_t FigBaseObject;
  uint64_t (*v22)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *);
  uint64_t v23;
  CFTypeRef v24;
  uint64_t (*v25)(CFTypeRef, __int128 *, CFTypeRef *, uint64_t, uint64_t);
  uint64_t v26;
  __int128 v28;
  uint64_t v29;
  CFTypeRef v30;
  CFTypeRef v31;
  CFTypeRef cf;
  __int128 v33;
  uint64_t v34;

  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  v31 = 0;
  cf = 0;
  v30 = 0;
  *a3 = 0;
  v11 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  v12 = *(_QWORD *)DerivedStorage;
  v13 = *(_DWORD *)(*(_QWORD *)DerivedStorage + 4);
  v14 = DerivedStorage[3];
  v15 = CFGetAllocator(a1);
  v16 = compositionTable_copyConcreteTrackReaderForEpoch(v12, v11, v14, v15, &cf);
  if ((_DWORD)v16 == -12843)
  {
    ProxySampleCursor = 4294954454;
    goto LABEL_13;
  }
  ProxySampleCursor = v16;
  if (!(_DWORD)v16)
  {
    v18 = cf;
    v19 = *(unsigned int (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (!v19 || v19(v18, &v31))
    {
      v20 = CFGetAllocator(a1);
      FigBaseObject = FigTrackReaderGetFigBaseObject(v18);
      v22 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
      if (!v22)
        goto LABEL_12;
      v23 = v22(FigBaseObject, CFSTR("CaptionSampleCursorService"), v20, &v31);
      if ((_DWORD)v23)
        goto LABEL_20;
    }
    v24 = v31;
    v28 = *a2;
    v29 = *((_QWORD *)a2 + 2);
    v25 = *(uint64_t (**)(CFTypeRef, __int128 *, CFTypeRef *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 8);
    if (v25)
    {
      v33 = v28;
      v34 = v29;
      v23 = v25(v24, &v33, &v30, a4, a5);
      if (!(_DWORD)v23)
      {
        CFGetAllocator(a1);
        ProxySampleCursor = compositeProxy_createProxySampleCursor();
        if (!(_DWORD)ProxySampleCursor)
        {
          v26 = CMBaseObjectGetDerivedStorage();
          *(_QWORD *)v26 = *(_QWORD *)DerivedStorage;
          FigAtomicIncrement32();
          *(_QWORD *)(v26 + 16) = v30;
          *(_DWORD *)(v26 + 8) = DerivedStorage[2];
          *(_QWORD *)(v26 + 24) = v11;
          *(_DWORD *)(v26 + 32) = v13;
          *a3 = 0;
          v30 = 0;
        }
        goto LABEL_13;
      }
LABEL_20:
      ProxySampleCursor = v23;
      goto LABEL_13;
    }
LABEL_12:
    ProxySampleCursor = 4294954514;
  }
LABEL_13:
  if (cf)
    CFRelease(cf);
  if (v31)
    CFRelease(v31);
  if (v30)
    CFRelease(v30);
  return ProxySampleCursor;
}

uint64_t compositeProxy_sampleCursorService_CreateCursorNearPresentationTimeStamp(const void *a1, __int128 *a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  _DWORD *DerivedStorage;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const __CFAllocator *v16;
  uint64_t v17;
  uint64_t ProxySampleCursor;
  CFTypeRef v19;
  uint64_t (*v20)(CFTypeRef, CFTypeRef *);
  uint64_t v21;
  CFTypeRef v22;
  uint64_t (*v23)(CFTypeRef, __int128 *, uint64_t, CFTypeRef *, uint64_t, uint64_t);
  uint64_t v24;
  int v26;
  __int128 v27;
  uint64_t v28;
  CFTypeRef v29;
  CFTypeRef v30;
  CFTypeRef cf;
  __int128 v32;
  uint64_t v33;

  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  v30 = 0;
  cf = 0;
  v29 = 0;
  *a4 = 0;
  v13 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  v14 = *(_QWORD *)DerivedStorage;
  v26 = *(_DWORD *)(*(_QWORD *)DerivedStorage + 4);
  v15 = DerivedStorage[3];
  v16 = CFGetAllocator(a1);
  v17 = compositionTable_copyConcreteTrackReaderForEpoch(v14, v13, v15, v16, &cf);
  if ((_DWORD)v17 == -12843)
  {
    ProxySampleCursor = 4294954454;
    goto LABEL_11;
  }
  ProxySampleCursor = v17;
  if (!(_DWORD)v17)
  {
    v19 = cf;
    v20 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v20)
    {
      v21 = v20(v19, &v30);
      if ((_DWORD)v21)
        goto LABEL_18;
      v22 = v30;
      v27 = *a2;
      v28 = *((_QWORD *)a2 + 2);
      v23 = *(uint64_t (**)(CFTypeRef, __int128 *, uint64_t, CFTypeRef *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v23)
      {
        v32 = v27;
        v33 = v28;
        v21 = v23(v22, &v32, a3, &v29, a5, a6);
        if (!(_DWORD)v21)
        {
          CFGetAllocator(a1);
          ProxySampleCursor = compositeProxy_createProxySampleCursor();
          if (!(_DWORD)ProxySampleCursor)
          {
            v24 = CMBaseObjectGetDerivedStorage();
            *(_QWORD *)v24 = *(_QWORD *)DerivedStorage;
            FigAtomicIncrement32();
            *(_QWORD *)(v24 + 16) = v29;
            *(_DWORD *)(v24 + 8) = DerivedStorage[2];
            *(_QWORD *)(v24 + 24) = v13;
            *(_DWORD *)(v24 + 32) = v26;
            *a4 = 0;
            v29 = 0;
          }
          goto LABEL_11;
        }
LABEL_18:
        ProxySampleCursor = v21;
        goto LABEL_11;
      }
    }
    ProxySampleCursor = 4294954514;
  }
LABEL_11:
  if (cf)
    CFRelease(cf);
  if (v30)
    CFRelease(v30);
  if (v29)
    CFRelease(v29);
  return ProxySampleCursor;
}

uint64_t compositeProxy_createProxySampleCursor()
{
  unsigned int v0;
  unsigned int v1;
  _QWORD v3[2];

  v0 = *(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72) != 0;
  if (*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64))
    v0 |= 2u;
  if (*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80))
    v0 |= 4u;
  if (*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 144))
    v0 |= 8u;
  if (*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 152))
    v0 |= 0x10u;
  if (*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 112))
    v1 = v0 | 0x20;
  else
    v1 = v0;
  v3[1] = 0;
  v3[0] = v1;
  if (sCompositeProxySampleCursorVTableSetupOnce != -1)
    dispatch_once_f(&sCompositeProxySampleCursorVTableSetupOnce, 0, (dispatch_function_t)compositeProxySampleCursorSetupOnce);
  dispatch_sync_f((dispatch_queue_t)sCompositeProxySampleCursorVTableQueue, v3, (dispatch_function_t)compositeProxy_SampleCursor_getVTableWithOptionalMethodsWork);
  FigSampleCursorGetClassID();
  return CMDerivedObjectCreate();
}

CFMutableDictionaryRef compositeProxySampleCursorSetupOnce()
{
  CFMutableDictionaryRef result;

  sCompositeProxySampleCursorVTableQueue = (uint64_t)dispatch_queue_create("com.apple.coremedia.compositeproxysamplecursor.vtables", 0);
  result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0);
  sCompositeProxySampleCursorVTableDictionary = (uint64_t)result;
  return result;
}

void compositeProxy_SampleCursor_getVTableWithOptionalMethodsWork(int *a1)
{
  const void *v2;
  _QWORD *Value;
  _OWORD *v4;

  v2 = (const void *)*a1;
  Value = CFDictionaryGetValue((CFDictionaryRef)sCompositeProxySampleCursorVTableDictionary, v2);
  if (!Value)
  {
    Value = malloc_type_malloc(0x18uLL, 0x6004045F868BCuLL);
    v4 = malloc_type_malloc(0xF0uLL, 0x108004055DB6A7AuLL);
    v4[12] = xmmword_1E2FA47D8;
    v4[13] = unk_1E2FA47E8;
    v4[14] = xmmword_1E2FA47F8;
    v4[8] = xmmword_1E2FA4798;
    v4[9] = *(_OWORD *)&off_1E2FA47A8;
    v4[10] = xmmword_1E2FA47B8;
    v4[11] = *(_OWORD *)&off_1E2FA47C8;
    v4[4] = xmmword_1E2FA4758;
    v4[5] = *(_OWORD *)&off_1E2FA4768;
    v4[6] = xmmword_1E2FA4778;
    v4[7] = *(_OWORD *)&off_1E2FA4788;
    *v4 = kCompositeProxy_SampleCursor_FigSampleCursorClass;
    v4[1] = unk_1E2FA4728;
    v4[2] = xmmword_1E2FA4738;
    v4[3] = *(_OWORD *)&off_1E2FA4748;
    if ((v2 & 2) != 0)
    {
      if ((v2 & 1) != 0)
        goto LABEL_4;
    }
    else
    {
      *((_QWORD *)v4 + 8) = 0;
      if ((v2 & 1) != 0)
      {
LABEL_4:
        if ((v2 & 4) != 0)
          goto LABEL_5;
        goto LABEL_13;
      }
    }
    *((_QWORD *)v4 + 9) = 0;
    if ((v2 & 4) != 0)
    {
LABEL_5:
      if ((v2 & 8) != 0)
        goto LABEL_6;
      goto LABEL_14;
    }
LABEL_13:
    *((_QWORD *)v4 + 10) = 0;
    if ((v2 & 8) != 0)
    {
LABEL_6:
      if ((v2 & 0x10) != 0)
        goto LABEL_7;
      goto LABEL_15;
    }
LABEL_14:
    *((_QWORD *)v4 + 18) = 0;
    if ((v2 & 0x10) != 0)
    {
LABEL_7:
      if ((v2 & 0x20) != 0)
      {
LABEL_9:
        *Value = 0;
        Value[1] = &kCompositeProxy_SampleCursor_BaseClass;
        Value[2] = v4;
        CFDictionarySetValue((CFMutableDictionaryRef)sCompositeProxySampleCursorVTableDictionary, v2, Value);
        goto LABEL_10;
      }
LABEL_8:
      *((_QWORD *)v4 + 14) = 0;
      goto LABEL_9;
    }
LABEL_15:
    *((_QWORD *)v4 + 19) = 0;
    if ((v2 & 0x20) != 0)
      goto LABEL_9;
    goto LABEL_8;
  }
LABEL_10:
  *((_QWORD *)a1 + 1) = Value;
}

uint64_t compositeProxy_sampleCursor_Copy(const void *a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, CFTypeRef *);
  uint64_t v7;
  CFTypeRef v8;
  uint64_t ProxySampleCursor;
  uint64_t v10;
  CFTypeRef v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v12 = 0;
  v5 = *(_QWORD *)(DerivedStorage + 16);
  v6 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v6)
    return 4294954514;
  v7 = v6(v5, &v12);
  v8 = v12;
  if ((_DWORD)v7)
  {
    ProxySampleCursor = v7;
    if (!v12)
      return ProxySampleCursor;
    goto LABEL_8;
  }
  CFGetAllocator(a1);
  ProxySampleCursor = compositeProxy_createProxySampleCursor();
  if ((_DWORD)ProxySampleCursor)
  {
    v8 = v12;
    if (!v12)
      return ProxySampleCursor;
LABEL_8:
    CFRelease(v8);
    return ProxySampleCursor;
  }
  v10 = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)v10 = *(_QWORD *)DerivedStorage;
  FigAtomicIncrement32();
  *(_QWORD *)(v10 + 16) = v12;
  *(_DWORD *)(v10 + 8) = *(_DWORD *)(DerivedStorage + 8);
  *(_QWORD *)(v10 + 24) = *(_QWORD *)(DerivedStorage + 24);
  *(_DWORD *)(v10 + 32) = *(_DWORD *)(DerivedStorage + 32);
  *a2 = 0;
  return ProxySampleCursor;
}

uint64_t compositeProxy_sampleCursor_CompareInDecodeOrder()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = CMBaseObjectGetDerivedStorage();
  v2 = *(_QWORD *)(DerivedStorage + 24);
  v3 = *(_QWORD *)(v1 + 24);
  if (v2 < v3)
    return -1;
  if (v2 > v3)
    return 1;
  v5 = *(_QWORD *)(DerivedStorage + 16);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (v6)
    v8 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  else
    v8 = 0;
  if (v7 == v8 && (v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 32)) != 0)
    return v9(v5, v6);
  else
    return 0;
}

uint64_t compositeProxy_sampleCursor_GetPresentationTimeStamp(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(_QWORD *)(DerivedStorage + 16);
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v5)
    return 4294954514;
  result = v5(v4, a2);
  if (!(_DWORD)result)
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(DerivedStorage + 24);
  return result;
}

uint64_t compositeProxy_sampleCursor_GetDecodeTimeStamp(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(_QWORD *)(DerivedStorage + 16);
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (!v5)
    return 4294954514;
  result = v5(v4, a2);
  if (!(_DWORD)result)
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(DerivedStorage + 24);
  return result;
}

uint64_t compositeProxy_sampleCursor_GetDuration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (v4)
    return v4(v3, a2);
  else
    return 4294954514;
}

uint64_t compositeProxy_sampleCursor_GetDependencyInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v9 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 64);
  if (v10)
    return v10(v9, a2, a3, a4, a5);
  else
    return 4294954514;
}

uint64_t compositeProxy_sampleCursor_GetMPEG2FrameType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  v7 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  if (v8)
    return v8(v7, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t compositeProxy_sampleCursor_TestReorderingBoundary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = CMBaseObjectGetDerivedStorage();
  v6 = *(_QWORD *)(DerivedStorage + 24);
  v7 = *(_QWORD *)(v5 + 24);
  if (v6 != v7)
  {
    if ((_DWORD)a3 == 1)
      return v6 > v7;
    if (!(_DWORD)a3)
      return v6 < v7;
  }
  v9 = *(_QWORD *)(DerivedStorage + 16);
  v10 = *(_QWORD *)(v5 + 16);
  v11 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (v10)
    v12 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  else
    v12 = 0;
  if (v11 == v12 && (v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 80)) != 0)
    return v13(v9, v10, a3);
  else
    return 0;
}

uint64_t compositeProxy_sampleCursor_CreateSampleBuffer(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, CMSampleBufferRef *);
  uint64_t SampleTimingInfoArray;
  size_t v12;
  malloc_type_id_t v13;
  CMFormatDescriptionRef v14;
  const __CFArray *v15;
  CMSampleTimingInfo *v16;
  uint64_t v17;
  uint64_t v18;
  CMItemCount v19;
  CMTimeEpoch v20;
  CMTimeEpoch *p_epoch;
  const __CFAllocator *v22;
  CMFormatDescriptionRef FormatDescription;
  uint64_t CopyWithNewFormatDescription;
  void *v25;
  CMItemCount timingArrayEntriesNeededOut;
  CMFormatDescriptionRef v28;
  CFTypeRef cf;
  CMSampleBufferRef sampleBufferOut;
  CMSampleBufferRef sbuf;

  sampleBufferOut = 0;
  sbuf = 0;
  v28 = 0;
  cf = 0;
  timingArrayEntriesNeededOut = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = DerivedStorage;
  if (a2)
  {
    v7 = CMBaseObjectGetDerivedStorage();
    v8 = *(_QWORD *)(v6 + 16);
    if (v7)
      v9 = *(_QWORD *)(v7 + 16);
    else
      v9 = 0;
  }
  else
  {
    v9 = 0;
    v8 = *(_QWORD *)(DerivedStorage + 16);
  }
  v10 = *(uint64_t (**)(uint64_t, uint64_t, CMSampleBufferRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 112);
  if (!v10)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 4294954514;
    goto LABEL_29;
  }
  SampleTimingInfoArray = v10(v8, v9, &sbuf);
  if ((_DWORD)SampleTimingInfoArray)
    goto LABEL_25;
  SampleTimingInfoArray = CMSampleBufferGetSampleTimingInfoArray(sbuf, 0, 0, &timingArrayEntriesNeededOut);
  if ((_DWORD)SampleTimingInfoArray)
    goto LABEL_25;
  if (timingArrayEntriesNeededOut)
  {
    if ((unint64_t)timingArrayEntriesNeededOut > 0x38E38E38E38E38ELL)
      goto LABEL_24;
    v12 = 72 * timingArrayEntriesNeededOut;
    if (!(72 * timingArrayEntriesNeededOut))
      goto LABEL_24;
    v13 = 1556728742;
  }
  else
  {
    v12 = 0;
    v13 = 1270757447;
  }
  v16 = (CMSampleTimingInfo *)malloc_type_malloc(v12, v13);
  if (!v16)
  {
LABEL_24:
    SampleTimingInfoArray = FigSignalErrorAt();
LABEL_25:
    v17 = SampleTimingInfoArray;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    goto LABEL_29;
  }
  v18 = CMSampleBufferGetSampleTimingInfoArray(sbuf, timingArrayEntriesNeededOut, v16, 0);
  if ((_DWORD)v18)
    goto LABEL_40;
  v19 = timingArrayEntriesNeededOut;
  if (timingArrayEntriesNeededOut)
  {
    v20 = *(_QWORD *)(v6 + 24);
    p_epoch = &v16->presentationTimeStamp.epoch;
    do
    {
      *p_epoch = v20;
      p_epoch[3] = v20;
      p_epoch += 9;
      --v19;
    }
    while (v19);
  }
  v22 = CFGetAllocator(sbuf);
  v18 = CMSampleBufferCreateCopyWithNewTiming(v22, sbuf, timingArrayEntriesNeededOut, v16, &sampleBufferOut);
  if ((_DWORD)v18)
  {
LABEL_40:
    v17 = v18;
    v14 = 0;
    v15 = 0;
  }
  else
  {
    v15 = (const __CFArray *)compositeProxy_sampleCursor_copyFormatDescriptionReplacementTable();
    FormatDescription = CMSampleBufferGetFormatDescription(sampleBufferOut);
    mutableComposition_copyReplacedFormatDescription(v15, FormatDescription, &v28);
    v14 = v28;
    if (v28 == FormatDescription)
    {
      v25 = sampleBufferOut;
      if (sampleBufferOut)
        CFRetain(sampleBufferOut);
      goto LABEL_28;
    }
    CFGetAllocator(sbuf);
    CopyWithNewFormatDescription = FigSampleBufferCreateCopyWithNewFormatDescription();
    if (!(_DWORD)CopyWithNewFormatDescription)
    {
      v25 = (void *)cf;
LABEL_28:
      v17 = 0;
      *a3 = v25;
      cf = 0;
      goto LABEL_29;
    }
    v17 = CopyWithNewFormatDescription;
  }
LABEL_29:
  if (sbuf)
    CFRelease(sbuf);
  if (sampleBufferOut)
    CFRelease(sampleBufferOut);
  if (cf)
    CFRelease(cf);
  if (v14)
    CFRelease(v14);
  if (v15)
    CFRelease(v15);
  free(v16);
  return v17;
}

uint64_t compositeProxy_sampleCursor_StepByDecodeTime(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, __int128 *);
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  v6 = *a2;
  v7 = *((_QWORD *)a2 + 2);
  v4 = *(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
  if (!v4)
    return 4294954514;
  v8 = v6;
  v9 = v7;
  return v4(v3, &v8);
}

uint64_t compositeProxy_sampleCursor_StepByPresentationTime(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, __int128 *);
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  v6 = *a2;
  v7 = *((_QWORD *)a2 + 2);
  v4 = *(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 128);
  if (!v4)
    return 4294954514;
  v8 = v6;
  v9 = v7;
  return v4(v3, &v8);
}

uint64_t compositeProxy_sampleCursor_CopySampleLocation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v9 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 144);
  if (v10)
    return v10(v9, a2, a3, a4, a5);
  else
    return 4294954514;
}

uint64_t compositeProxy_sampleCursor_CopyChunkDetails(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v17 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 152);
  if (v18)
    return v18(v17, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  else
    return 4294954514;
}

uint64_t compositeProxy_sampleCursor_CopyFormatDescription(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, CFTypeRef *);
  uint64_t v5;
  uint64_t v6;
  CFTypeRef cf;
  CFTypeRef v9;

  cf = 0;
  v9 = 0;
  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  v4 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 160);
  if (v4)
  {
    v5 = v4(v3, &v9);
    if ((_DWORD)v5)
    {
      v6 = v5;
    }
    else
    {
      v6 = (uint64_t)compositeProxy_sampleCursor_copyFormatDescriptionReplacementTable();
      mutableComposition_copyReplacedFormatDescription((CFArrayRef)v6, v9, &cf);
      if (a2)
      {
        *a2 = cf;
        cf = 0;
      }
      if (v6)
      {
        CFRelease((CFTypeRef)v6);
        v6 = 0;
      }
    }
  }
  else
  {
    v6 = 4294954514;
  }
  if (cf)
    CFRelease(cf);
  if (v9)
    CFRelease(v9);
  return v6;
}

uint64_t compositeProxy_sampleCursor_StepInDecodeOrderAndReportStepsTaken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  v5 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
  if (v6)
    return v6(v5, a2, a3);
  else
    return 4294954514;
}

uint64_t compositeProxy_sampleCursor_StepInPresentationOrderAndReportStepsTaken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  v5 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 176);
  if (v6)
    return v6(v5, a2, a3);
  else
    return 4294954514;
}

CFTypeRef compositeProxy_sampleCursor_copyFormatDescriptionReplacementTable()
{
  _DWORD *DerivedStorage;
  _QWORD *v1;
  uint64_t v2;
  CFTypeRef *v3;
  CFTypeRef v4;

  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(*(_QWORD *)DerivedStorage + 8));
  v1 = *(_QWORD **)DerivedStorage;
  if (DerivedStorage[8] == *(_DWORD *)(*(_QWORD *)DerivedStorage + 4) && (v2 = v1[2], v2 >= 1))
  {
    v3 = (CFTypeRef *)(v1[4] + 112);
    while (*((_DWORD *)v3 - 27) != DerivedStorage[2])
    {
      v3 += 21;
      if (!--v2)
        goto LABEL_6;
    }
    v4 = *v3;
    if (*v3)
    {
      CFRetain(*v3);
      v1 = *(_QWORD **)DerivedStorage;
    }
  }
  else
  {
LABEL_6:
    v4 = 0;
  }
  MEMORY[0x19402EF04](v1[1]);
  return v4;
}

void compositeProxy_sampleCursor_Finalize()
{
  uint64_t *DerivedStorage;
  const void *v1;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  compositionTable_releaseAndClear(DerivedStorage);
  v1 = (const void *)DerivedStorage[2];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[2] = 0;
  }
}

CFStringRef compositeProxy_sampleCursor_CopyDebugDescription()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return CFCopyDescription(*(CFTypeRef *)(DerivedStorage + 16));
}

uint64_t compositeProxy_sampleCursor_CopyProperty(uint64_t a1, uint64_t a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  int v9;
  uint64_t FigBaseObject;
  uint64_t (*v11)(uint64_t, uint64_t, const __CFAllocator *, CFDictionaryRef *);
  uint64_t v12;
  CFDictionaryRef v13;
  BOOL v14;
  CMTimeRange v16;
  CMTimeRange v17;
  CFDictionaryRef v18;

  v18 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && a4)
  {
    v8 = DerivedStorage;
    v9 = FigCFEqual();
    FigBaseObject = FigSampleCursorGetFigBaseObject(*(_QWORD *)(v8 + 16));
    v11 = *(uint64_t (**)(uint64_t, uint64_t, const __CFAllocator *, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
    if (v9)
    {
      if (v11)
      {
        v12 = v11(FigBaseObject, a2, a3, &v18);
        v13 = v18;
        if ((_DWORD)v12)
          v14 = 1;
        else
          v14 = v18 == 0;
        if (!v14)
        {
          memset(&v17, 0, sizeof(v17));
          CMTimeRangeMakeFromDictionary(&v17, v18);
          if (!v17.start.epoch)
            v17.start.epoch = *(_QWORD *)(v8 + 24);
          v16 = v17;
          *a4 = CMTimeRangeCopyAsDictionary(&v16, a3);
          v13 = v18;
        }
        if (v13)
          CFRelease(v13);
        return v12;
      }
    }
    else if (v11)
    {
      return v11(FigBaseObject, a2, a3, a4);
    }
    return 4294954514;
  }
  return FigSignalErrorAt();
}

uint64_t compositionSharedCache_copyFormatReaderForAssetURL(uint64_t a1, const void *a2, const __CFAllocator *a3, uint64_t a4)
{
  uint64_t v5;
  CFTypeRef v6;
  CFAllocatorRef v7;
  uint64_t CMBaseObject;
  uint64_t (*v9)(uint64_t, const __CFString *, CFAllocatorRef, uint64_t);
  uint64_t v10;
  CFTypeRef cf;

  cf = 0;
  v5 = compositionSharedCache_copyAssetForAssetURL(a1, a2, a3, &cf);
  v6 = cf;
  if (!(_DWORD)v5)
  {
    v7 = CFGetAllocator(cf);
    CMBaseObject = FigAssetGetCMBaseObject(v6);
    v9 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
    if (!v9)
    {
      v10 = 4294954514;
      if (!v6)
        return v10;
      goto LABEL_5;
    }
    v5 = v9(CMBaseObject, CFSTR("assetProperty_FormatReader"), v7, a4);
  }
  v10 = v5;
  if (v6)
LABEL_5:
    CFRelease(v6);
  return v10;
}

uint64_t compositionTable_findCompatibleTrackForFormatDescriptionArrayAndMediaType(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, int a5)
{
  const void *v5;
  const void *v6;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t result;
  int v16;
  CFTypeRef v17;
  CFTypeRef cf1[11];

  if (a2 < a3)
  {
    cf1[9] = v5;
    cf1[10] = v6;
    v10 = a2;
    v12 = 168 * a2;
    v13 = -1;
    while (1)
    {
      v14 = (unsigned int *)(*(_QWORD *)(a1 + 32) + v12);
      cf1[0] = 0;
      if (*v14 == a5)
      {
        result = v10;
        if (!a4)
          goto LABEL_10;
        v16 = compositionTableTrack_copyTrackFormatDescriptionArrayForTrackCompatibility(a1, v14, cf1);
        v17 = cf1[0];
        if (!v16)
        {
          result = v10;
          if (cf1[0])
          {
            if (CFEqual(cf1[0], a4))
              v13 = v10;
LABEL_9:
            CFRelease(v17);
            result = v13;
          }
LABEL_10:
          v13 = result;
          if ((result & 0x8000000000000000) == 0)
            return result;
          goto LABEL_11;
        }
        if (cf1[0])
          goto LABEL_9;
      }
LABEL_11:
      ++v10;
      v12 += 168;
      result = v13;
      if (a3 == v10)
        return result;
    }
  }
  return -1;
}

uint64_t compositionTableTrack_copyTrackFormatDescriptionArrayForTrackCompatibility(uint64_t a1, unsigned int *a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t FigBaseObject;
  uint64_t (*v12)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v13;
  CFTypeRef v14;
  CFTypeRef v16;
  CFTypeRef cf;

  v16 = 0;
  cf = 0;
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 > (unint64_t)a2)
    return 4294954516;
  if (v3 + 168 * *(_QWORD *)(a1 + 16) <= (unint64_t)a2)
  {
    v13 = 4294954516;
  }
  else
  {
    v5 = *((_QWORD *)a2 + 1);
    v6 = v5 - 1;
    if (v5 < 1 || (v7 = *((_QWORD *)a2 + 2), (v8 = *(const void **)(v7 + 108 * v6 + 96)) == 0))
    {
      v14 = 0;
LABEL_11:
      v13 = 0;
      *a3 = v14;
      cf = 0;
      goto LABEL_12;
    }
    v9 = *MEMORY[0x1E0C9AE00];
    v10 = compositionTable_copyConcreteTrackReaderForAssetURLTrackIDMediaType(a1, v8, *(unsigned int *)(v7 + 108 * v6 + 104), *a2, (const __CFAllocator *)*MEMORY[0x1E0C9AE00], &v16);
    if ((_DWORD)v10)
    {
      v13 = v10;
    }
    else
    {
      FigBaseObject = FigTrackReaderGetFigBaseObject(v16);
      v12 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
      if (v12)
      {
        v13 = v12(FigBaseObject, CFSTR("TrackFormatDescriptionArray"), v9, &cf);
        v14 = cf;
        if ((_DWORD)v13)
        {
          if (cf)
            CFRelease(cf);
          goto LABEL_12;
        }
        goto LABEL_11;
      }
      v13 = 4294954514;
    }
  }
LABEL_12:
  if (v16)
    CFRelease(v16);
  return v13;
}

void compositionTable_addTrack(uint64_t a1, int a2, int a3, _DWORD *a4, uint64_t *a5)
{
  int v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int v13;
  char *v14;
  char *v15;
  const void *v16;
  char *v17;

  if (a3)
  {
    v9 = a3;
    v10 = *(_QWORD *)(a1 + 16);
    if (v10 >= 1)
    {
      v11 = (int *)(*(_QWORD *)(a1 + 32) + 4);
      v12 = *(_QWORD *)(a1 + 16);
      while (1)
      {
        v13 = *v11;
        v11 += 42;
        if (v13 == a3)
          break;
        if (!--v12)
          goto LABEL_9;
      }
      v9 = *(_DWORD *)(a1 + 24);
    }
  }
  else
  {
    v9 = *(_DWORD *)(a1 + 24);
    v10 = *(_QWORD *)(a1 + 16);
  }
LABEL_9:
  *(_QWORD *)(a1 + 16) = v10 + 1;
  v14 = (char *)malloc_type_calloc(0xA8uLL, v10 + 1, 0x75602335uLL);
  v15 = v14;
  v16 = *(const void **)(a1 + 32);
  if (v16)
  {
    memcpy(v14, v16, 168 * v10);
    free(*(void **)(a1 + 32));
  }
  *(_QWORD *)(a1 + 32) = v15;
  v17 = &v15[168 * v10];
  *(_DWORD *)v17 = a2;
  *((_DWORD *)v17 + 1) = v9;
  *(_OWORD *)(v17 + 8) = 0u;
  *(_OWORD *)(v17 + 24) = 0u;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  v17[160] = 1;
  *((_QWORD *)v17 + 14) = 0;
  if (v9 >= *(_DWORD *)(a1 + 24))
    *(_DWORD *)(a1 + 24) = v9 + 1;
  if (a4)
    *a4 = v9;
  if (a5)
    *a5 = v10;
}

uint64_t mutableComposition_postPossiblyDeferredTracksChangedNotification()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(result + 16))
  {
    *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return CMNotificationCenterPostNotification();
  }
  return result;
}

void compositionTable_discardUnusedAssets(uint64_t a1)
{
  CFIndex Count;
  CFIndex v3;
  const void **v4;
  uint64_t i;
  const void *v6;
  uint64_t j;
  const void *v8;
  uint64_t k;
  const void *v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  const void *v17;
  const void *Value;
  const void *v19;
  uint64_t m;
  const void *v21;
  uint64_t v22;
  CFIndex v23;
  CFIndex v24;
  size_t v25;
  const void **v26;
  const void **v27;
  uint64_t n;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 56));
  Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 64));
  if (Count <= 0)
  {
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 56));
    goto LABEL_38;
  }
  v3 = Count;
  v4 = (const void **)malloc_type_malloc(8 * Count, 0x6004044C4A2DFuLL);
  CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 64), v4, 0);
  for (i = 0; i != v3; ++i)
  {
    v6 = v4[i];
    if (v6)
      CFRetain(v6);
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 56));
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 8));
  for (j = 0; j != v3; ++j)
  {
    if (CFBagContainsValue(*(CFBagRef *)(a1 + 40), v4[j]))
    {
      v8 = v4[j];
      if (v8)
      {
        CFRelease(v8);
        v4[j] = 0;
      }
    }
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 8));
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 56));
  for (k = 0; k != v3; ++k)
  {
    v10 = v4[k];
    if (v10)
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 64), v10);
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 56));
  v11 = 0;
  while (1)
  {
    v12 = v4[v11];
    if (v12)
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 120));
      v13 = *(_QWORD *)(a1 + 144);
      if (v13 >= 2)
      {
        v14 = 1;
        do
        {
          v15 = *(const void **)(*(_QWORD *)(a1 + 136) + 16 * v14);
          if (v15)
          {
            if (CFEqual(v15, v12))
            {
              v16 = *(_QWORD *)(a1 + 136);
              v17 = *(const void **)(v16 + 16 * v14);
              if (v17)
              {
                CFRelease(v17);
                v16 = *(_QWORD *)(a1 + 136);
                *(_QWORD *)(v16 + 16 * v14) = 0;
              }
              *(_QWORD *)(v16 + 16 * v14 + 8) = 0;
              Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 152), (const void *)v14);
              if (Value)
              {
                v19 = Value;
                CFRetain(Value);
                CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 152), (const void *)v14);
                MEMORY[0x19402EF04](*(_QWORD *)(a1 + 120));
                CFRelease(v19);
              }
              else
              {
                MEMORY[0x19402EF04](*(_QWORD *)(a1 + 120));
              }
              ++v14;
              MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 120));
              v13 = *(_QWORD *)(a1 + 144);
              continue;
            }
            v13 = *(_QWORD *)(a1 + 144);
          }
          ++v14;
        }
        while (v14 < v13);
      }
      MEMORY[0x19402EF04](*(_QWORD *)(a1 + 120));
    }
    if (++v11 == v3)
    {
      for (m = 0; m != v3; ++m)
      {
        v21 = v4[m];
        if (v21)
        {
          CFRelease(v21);
          v4[m] = 0;
        }
      }
      free(v4);
LABEL_38:
      v22 = *(_QWORD *)(a1 + 160);
      MEMORY[0x19402EEEC](*(_QWORD *)(v22 + 32));
      v23 = CFDictionaryGetCount(*(CFDictionaryRef *)(v22 + 40));
      if (v23 >= 1)
      {
        v24 = v23;
        v25 = 8 * v23;
        v26 = (const void **)malloc_type_malloc(8 * v23, 0x6004044C4A2DFuLL);
        v27 = (const void **)malloc_type_malloc(v25, 0x6004044C4A2DFuLL);
        CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(v22 + 40), v26, v27);
        for (n = 0; n != v24; ++n)
        {
          if (CFGetRetainCount(v27[n]) == 1)
            CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v22 + 40), v26[n]);
        }
        free(v26);
        free(v27);
      }
      JUMPOUT(0x19402EF04);
    }
  }
}

uint64_t compositionEditSegment_validateSegments(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  __int128 v8;
  CMTimeFlags v9;
  CMTimeEpoch v10;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  CMTimeValue v13;
  _QWORD *v14;
  unint64_t v15;
  CFTypeRef *i;
  CFTypeRef v17;
  CFTypeID v18;
  CMTimeRange v19;
  CMTime v20;
  CMTime v21;
  CMTime rhs;
  CMTime lhs;
  CMTime time2;
  CMTimeValue value;
  CMTimeScale timescale;
  CMTimeValue v27;
  CMTimeScale v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a2 - 1;
  if (a2 < 1)
    return 0;
  if (!a1)
    return FigSignalErrorAt();
  v5 = a2;
  if (!a3
    || (*(_OWORD *)&v19.start.value = *(_OWORD *)(a1 + 48),
        v19.start.epoch = *(_QWORD *)(a1 + 64),
        time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68],
        !CMTimeCompare(&v19.start, &time2)))
  {
    if (v5 < 2)
    {
LABEL_14:
      v14 = (_QWORD *)(a1 + 64);
      v15 = v5;
      while (!*v14 && !v14[3] && !*(v14 - 6) && !*(v14 - 3))
      {
        v14 = (_QWORD *)((char *)v14 + 108);
        if (!--v15)
        {
          for (i = (CFTypeRef *)(a1 + 96); ; i = (CFTypeRef *)((char *)i + 108))
          {
            v17 = *i;
            if ((*((_DWORD *)i - 21) & 0x1D) == 1)
            {
              if (!v17)
                return FigSignalErrorAt();
              v18 = CFURLGetTypeID();
              if (v18 != CFGetTypeID(*i))
                return FigSignalErrorAt();
            }
            else if (v17)
            {
              return FigSignalErrorAt();
            }
            result = 0;
            if (!--v5)
              return result;
          }
        }
      }
    }
    else
    {
      v7 = a1 + 156;
      while (1)
      {
        memset(&v20, 0, sizeof(v20));
        v8 = *(_OWORD *)(v7 - 92);
        *(_OWORD *)&v19.start.value = *(_OWORD *)(v7 - 108);
        *(_OWORD *)&v19.start.epoch = v8;
        *(_OWORD *)&v19.duration.timescale = *(_OWORD *)(v7 - 76);
        CMTimeRangeGetEnd(&v20, &v19);
        v27 = *(_QWORD *)v7;
        v9 = *(_DWORD *)(v7 + 12);
        v28 = *(_DWORD *)(v7 + 8);
        v10 = *(_QWORD *)(v7 + 16);
        value = v20.value;
        flags = v20.flags;
        timescale = v20.timescale;
        epoch = v20.epoch;
        if ((v9 & 0x1F) != 3 && (v20.flags & 0x1F) != 3)
          goto LABEL_31;
        memset(&v19, 0, 24);
        v13 = *(_QWORD *)v7;
        rhs.epoch = v20.epoch;
        lhs.value = v13;
        lhs.timescale = *(_DWORD *)(v7 + 8);
        lhs.flags = v9;
        lhs.epoch = v10;
        rhs.value = v20.value;
        rhs.timescale = v20.timescale;
        rhs.flags = v20.flags;
        CMTimeSubtract(&time2, &lhs, &rhs);
        CMTimeAbsoluteValue(&v19.start, &time2);
        CMTimeMake(&v21, 1, 1000000000);
        lhs = v19.start;
        if (CMTimeCompare(&lhs, &v21) > 0)
        {
LABEL_31:
          v19.start.value = v27;
          v19.start.timescale = v28;
          v19.start.flags = v9;
          v19.start.epoch = v10;
          lhs.value = value;
          lhs.timescale = timescale;
          lhs.flags = flags;
          lhs.epoch = epoch;
          if (CMTimeCompare(&v19.start, &lhs))
            break;
        }
        v7 += 108;
        if (!--v3)
          goto LABEL_14;
      }
    }
  }
  return FigSignalErrorAt();
}

void compositionEditSegment_copySegmentsAndAddURLsToBag(CFTypeRef *a1, const void *a2, uint64_t a3, __CFBag *a4)
{
  uint64_t v5;
  CFTypeRef *v7;

  v5 = a3;
  memcpy(a1, a2, 108 * a3);
  if (v5 >= 1)
  {
    v7 = a1 + 12;
    do
    {
      if ((*((_DWORD *)v7 - 21) & 0x1D) == 1)
      {
        if (*v7)
          CFRetain(*v7);
        if (a4)
        {
          if (*v7)
            CFBagAddValue(a4, *v7);
        }
      }
      else
      {
        *v7 = 0;
      }
      v7 = (CFTypeRef *)((char *)v7 + 108);
      --v5;
    }
    while (v5);
  }
}

uint64_t compositionEditSegment_combineEditSegmentsIfPossible(uint64_t a1, uint64_t a2, uint64_t a3, __CFBag *a4)
{
  int32_t v8;
  int32_t v9;
  __int128 v10;
  uint64_t result;
  const void *v12;
  const void *v13;
  __int128 v14;
  int32_t v15;
  double Seconds;
  double v17;
  double v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  const void *v23;
  const void *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  CMTime v35;
  CMTime rhs;
  CMTime v37;
  CMTimeRange time1;
  __int128 v39;
  _BYTE v40[44];
  CMTime v41;
  CMTime time2;
  CMTime v43;
  __int128 v44;
  CMTimeEpoch v45;
  CMTime v46;
  __int128 v47;
  CMTimeEpoch v48;

  v47 = *(_OWORD *)(a1 + 72);
  v48 = *(_QWORD *)(a1 + 88);
  v46 = *(CMTime *)(a2 + 72);
  v44 = *(_OWORD *)(a1 + 24);
  v45 = *(_QWORD *)(a1 + 40);
  v43 = *(CMTime *)(a2 + 24);
  *(_OWORD *)&time1.start.value = *(_OWORD *)(a1 + 72);
  time1.start.epoch = *(_QWORD *)(a1 + 88);
  time2 = *(CMTime *)(a1 + 24);
  v8 = CMTimeCompare(&time1.start, &time2);
  time1.start = v46;
  time2 = v43;
  v9 = CMTimeCompare(&time1.start, &time2);
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v41 = time2;
  v10 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)&time1.start.value = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&time1.start.epoch = v10;
  *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(a1 + 80);
  CMTimeRangeGetEnd(&v37, &time1);
  *(_OWORD *)&time1.start.value = *(_OWORD *)(a2 + 48);
  time1.start.epoch = *(_QWORD *)(a2 + 64);
  if (CMTimeCompare(&v37, &time1.start))
    return 0;
  v12 = *(const void **)(a1 + 96);
  v13 = *(const void **)(a2 + 96);
  if (!v12)
  {
    if (!v13)
    {
      *(_OWORD *)&time1.start.value = v47;
      time1.start.epoch = v48;
      rhs = v46;
      CMTimeAdd(&time2, &time1.start, &rhs);
      v28 = *(_OWORD *)(a1 + 92);
      v29 = *(_OWORD *)(a1 + 48);
      v30 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)(a3 + 64) = *(_OWORD *)(a1 + 64);
      *(_OWORD *)(a3 + 80) = v30;
      *(_OWORD *)(a3 + 92) = v28;
      v31 = *(_OWORD *)(a1 + 16);
      v32 = *(_OWORD *)(a1 + 32);
      *(_OWORD *)a3 = *(_OWORD *)a1;
      *(_OWORD *)(a3 + 16) = v31;
      *(_OWORD *)(a3 + 32) = v32;
      *(_OWORD *)(a3 + 48) = v29;
      *(CMTime *)(a3 + 72) = time2;
      return 1;
    }
    return 0;
  }
  if (!v13)
    return 0;
  result = CFEqual(v12, v13);
  if ((_DWORD)result)
  {
    if (*(_DWORD *)(a1 + 104) != *(_DWORD *)(a2 + 104))
      return 0;
    v14 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)&time1.start.value = *(_OWORD *)a1;
    *(_OWORD *)&time1.start.epoch = v14;
    *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(a1 + 32);
    CMTimeRangeGetEnd(&v35, &time1);
    *(_OWORD *)&time1.start.value = *(_OWORD *)a2;
    time1.start.epoch = *(_QWORD *)(a2 + 16);
    v15 = CMTimeCompare(&v35, &time1.start);
    result = 0;
    if (!v15 && (v8 != 0) == (v9 != 0))
    {
      if (!v8)
        goto LABEL_13;
      if (!v9)
        goto LABEL_13;
      *(_OWORD *)&time1.start.value = v47;
      time1.start.epoch = v48;
      Seconds = CMTimeGetSeconds(&time1.start);
      time1.start = v43;
      v17 = Seconds * CMTimeGetSeconds(&time1.start);
      time1.start = v46;
      v18 = CMTimeGetSeconds(&time1.start);
      *(_OWORD *)&time1.start.value = v44;
      time1.start.epoch = v45;
      if (v17 == v18 * CMTimeGetSeconds(&time1.start))
      {
LABEL_13:
        *(_OWORD *)&time1.start.value = v47;
        time1.start.epoch = v48;
        rhs = v46;
        CMTimeAdd(&time2, &time1.start, &rhs);
        *(_OWORD *)&time1.start.value = v44;
        time1.start.epoch = v45;
        rhs = v43;
        CMTimeAdd(&v41, &time1.start, &rhs);
        *(_OWORD *)&v40[28] = *(_OWORD *)(a1 + 92);
        v19 = *(_OWORD *)(a1 + 80);
        *(_OWORD *)v40 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)&v40[16] = v19;
        v20 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&time1.start.value = *(_OWORD *)a1;
        *(_OWORD *)&time1.start.epoch = v20;
        v39 = *(_OWORD *)(a1 + 48);
        *(CMTime *)&v40[8] = time2;
        time1.duration = v41;
        *(_QWORD *)(a1 + 96) = 0;
        *(_DWORD *)(a1 + 104) = 0;
        v21 = *MEMORY[0x1E0CA2E18];
        v22 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
        *(_QWORD *)(a1 + 16) = v22;
        *(_OWORD *)a1 = v21;
        if ((*(_DWORD *)(a2 + 12) & 0x1D) == 1)
        {
          if (!a4)
            goto LABEL_17;
          v23 = *(const void **)(a2 + 96);
          if (v23)
          {
            v33 = v21;
            CFBagRemoveValue(a4, v23);
            v21 = v33;
LABEL_17:
            v24 = *(const void **)(a2 + 96);
            if (v24)
            {
              v34 = v21;
              CFRelease(v24);
              v21 = v34;
              *(_QWORD *)(a2 + 96) = 0;
            }
          }
        }
        *(_DWORD *)(a2 + 104) = 0;
        *(_OWORD *)a2 = v21;
        *(_QWORD *)(a2 + 16) = v22;
        v25 = *(_OWORD *)&v40[16];
        *(_OWORD *)(a3 + 64) = *(_OWORD *)v40;
        *(_OWORD *)(a3 + 80) = v25;
        *(_OWORD *)(a3 + 92) = *(_OWORD *)&v40[28];
        v26 = *(_OWORD *)&time1.start.epoch;
        *(_OWORD *)a3 = *(_OWORD *)&time1.start.value;
        *(_OWORD *)(a3 + 16) = v26;
        v27 = v39;
        result = 1;
        *(_OWORD *)(a3 + 32) = *(_OWORD *)&time1.duration.timescale;
        *(_OWORD *)(a3 + 48) = v27;
        return result;
      }
      return 0;
    }
  }
  return result;
}

uint64_t compositionTableTrack_setFormatDescriptionReplacementTable(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4;
  const __CFAllocator *v5;
  CFIndex Count;
  CFMutableArrayRef Mutable;
  CFIndex v8;
  CFMutableDictionaryRef MutableCopy;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v11;
  CFTypeID v12;
  const void *Value;
  const void *v14;
  const void *v15;
  CFTypeID v16;
  CFTypeID v17;
  const void *v18;
  uint64_t v19;
  const void *v20;
  uint64_t v22;

  if (!cf)
  {
    v18 = *(const void **)(a1 + 112);
    *(_QWORD *)(a1 + 112) = 0;
    if (v18)
      CFRelease(v18);
    return 0;
  }
  v4 = CFGetTypeID(cf);
  if (v4 == CFArrayGetTypeID())
  {
    v22 = a1;
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Count = CFArrayGetCount((CFArrayRef)cf);
    Mutable = CFArrayCreateMutable(v5, Count, MEMORY[0x1E0C9B378]);
    if (CFArrayGetCount((CFArrayRef)cf) < 1)
    {
      MutableCopy = 0;
LABEL_19:
      v20 = *(const void **)(v22 + 112);
      *(_QWORD *)(v22 + 112) = Mutable;
      if (Mutable)
        CFRetain(Mutable);
      if (v20)
        CFRelease(v20);
      v19 = 0;
      if (!MutableCopy)
        goto LABEL_25;
    }
    else
    {
      v8 = 0;
      MutableCopy = 0;
      while (1)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)cf, v8);
        if (!ValueAtIndex)
          break;
        v11 = ValueAtIndex;
        v12 = CFGetTypeID(ValueAtIndex);
        if (v12 != CFDictionaryGetTypeID())
          break;
        Value = CFDictionaryGetValue(v11, CFSTR("MutableCompositionFormatDescriptionReplacementTableKey_OldFormatDescription"));
        v14 = CFDictionaryGetValue(v11, CFSTR("MutableCompositionFormatDescriptionReplacementTableKey_NewFormatDescription"));
        if (!Value)
          break;
        v15 = v14;
        v16 = CFGetTypeID(Value);
        if (v16 != CMFormatDescriptionGetTypeID())
          break;
        if (!v15)
          break;
        v17 = CFGetTypeID(v15);
        if (v17 != CMFormatDescriptionGetTypeID())
          break;
        if (MutableCopy)
          CFRelease(MutableCopy);
        MutableCopy = CFDictionaryCreateMutableCopy(v5, 0, v11);
        CFArrayAppendValue(Mutable, MutableCopy);
        if (++v8 >= CFArrayGetCount((CFArrayRef)cf))
          goto LABEL_19;
      }
      v19 = FigSignalErrorAt();
      if (!MutableCopy)
        goto LABEL_25;
    }
    CFRelease(MutableCopy);
LABEL_25:
    if (Mutable)
      CFRelease(Mutable);
    return v19;
  }
  return FigSignalErrorAt();
}

uint64_t compositionTable_insertAssetSegmentIntoTrack(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, __int128 *a7)
{
  __int128 *v14;
  CMTimeEpoch v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  CMTimeEpoch epoch;
  uint64_t v23;
  __int128 v25;
  CMTime time2;
  _OWORD v27[3];
  __int128 v28;
  _OWORD v29[3];
  CMTimeRange time1;

  memset(v29, 0, 44);
  v28 = 0u;
  memset(v27, 0, sizeof(v27));
  v14 = (__int128 *)MEMORY[0x1E0CA2E68];
  if ((*(_DWORD *)(a5 + 12) & 0x1D) == 1)
  {
    *(_OWORD *)&time1.start.value = *(_OWORD *)a5;
    time1.start.epoch = *(_QWORD *)(a5 + 16);
    time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    if (CMTimeCompare(&time1.start, &time2) < 0)
      return 4294954516;
  }
  *(_OWORD *)&time1.start.value = *(_OWORD *)a6;
  time1.start.epoch = *(_QWORD *)(a6 + 16);
  v25 = *v14;
  *(_OWORD *)&time2.value = *v14;
  v15 = *((_QWORD *)v14 + 2);
  time2.epoch = v15;
  if (CMTimeCompare(&time1.start, &time2) < 1)
    return 4294954516;
  v16 = *((_DWORD *)a7 + 3);
  if ((v16 & 0x1D) != 1 && (v16 & 1) != 0)
    return 4294954516;
  if ((v16 & 0x1D) == 1)
  {
    *(_OWORD *)&time1.start.value = *a7;
    time1.start.epoch = *((_QWORD *)a7 + 2);
    *(_OWORD *)&time2.value = v25;
    time2.epoch = v15;
    if (CMTimeCompare(&time1.start, &time2) < 0)
      return FigSignalErrorAt();
  }
  v17 = *(_QWORD *)(a1 + 32);
  if (v17 > (unint64_t)a2 || v17 + 168 * *(_QWORD *)(a1 + 16) <= (unint64_t)a2)
    return 4294954516;
  if ((*((_DWORD *)a7 + 3) & 0x1D) != 1)
  {
    *(_OWORD *)&time2.value = v25;
    time2.epoch = v15;
    v18 = a2[1];
    if (v18 >= 1)
    {
      v19 = a2[2] + 108 * v18;
      v20 = *(_OWORD *)(v19 - 60);
      v21 = *(_OWORD *)(v19 - 28);
      *(_OWORD *)&time1.start.epoch = *(_OWORD *)(v19 - 44);
      *(_OWORD *)&time1.duration.timescale = v21;
      *(_OWORD *)&time1.start.value = v20;
      CMTimeRangeGetEnd(&time2, &time1);
    }
    time1.start = time2;
    epoch = time2.epoch;
    *a7 = *(_OWORD *)&time2.value;
    *((_QWORD *)a7 + 2) = epoch;
  }
  v28 = *a7;
  *(_QWORD *)&v29[0] = *((_QWORD *)a7 + 2);
  *(_OWORD *)((char *)v29 + 8) = *(_OWORD *)a6;
  v23 = *(_QWORD *)(a6 + 16);
  v27[0] = *(_OWORD *)a5;
  *(_QWORD *)&v27[1] = *(_QWORD *)(a5 + 16);
  *((_QWORD *)&v27[2] + 1) = v23;
  *(_OWORD *)((char *)&v27[1] + 8) = *(_OWORD *)((char *)v29 + 8);
  *((_QWORD *)&v29[1] + 1) = v23;
  *(_QWORD *)&v29[2] = a3;
  DWORD2(v29[2]) = a4;
  return compositionTable_insertEditSegmentsIntoTrack(a1, a2, (uint64_t)v27, 1);
}

uint64_t compositionTable_insertEditSegmentsIntoTrack(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  CMTimeFlags v10;
  CMTimeEpoch v11;
  CMTimeEpoch v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  _DWORD *v16;
  BOOL v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t result;
  CFTypeRef *v24;
  __CFBag *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t EditIndexStartingAtTimeInTrackSplitEditIfNecessary;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  _OWORD *v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  int v43;
  CMTimeFlags v44;
  CMTimeEpoch v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  CMTimeEpoch v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  CMTimeRange time2;
  CMTime v59;
  CMTime rhs;
  CMTime v61;
  CMTime v62;
  CMTimeRange range;
  __int128 v64;
  __int128 v65;
  _BYTE v66[28];
  __int128 v67;
  CMTimeEpoch epoch;
  CMTimeValue v69;
  CMTimeScale v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 > (unint64_t)a2 || v4 + 168 * *(_QWORD *)(a1 + 16) <= (unint64_t)a2)
    return 4294954516;
  v7 = a4;
  if (a4 < 1)
    return 0;
  v8 = (_DWORD *)a3;
  v9 = a2[1];
  v69 = *(_QWORD *)(a3 + 48);
  v10 = *(_DWORD *)(a3 + 60);
  v70 = *(_DWORD *)(a3 + 56);
  v11 = *(_QWORD *)(a3 + 64);
  v57 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&time2.start.value = *MEMORY[0x1E0CA2E68];
  v12 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  time2.start.epoch = v12;
  if (v9 >= 1)
  {
    v13 = a2[2] + 108 * v9;
    v14 = *(_OWORD *)(v13 - 60);
    v15 = *(_OWORD *)(v13 - 28);
    *(_OWORD *)&range.start.epoch = *(_OWORD *)(v13 - 44);
    *(_OWORD *)&range.duration.timescale = v15;
    *(_OWORD *)&range.start.value = v14;
    CMTimeRangeGetEnd(&time2.start, &range);
  }
  v67 = *(_OWORD *)&time2.start.value;
  epoch = time2.start.epoch;
  if ((v10 & 1) == 0
    || (range.start.value = v69,
        range.start.timescale = v70,
        range.start.flags = v10,
        range.start.epoch = v11,
        *(_OWORD *)&time2.start.value = v67,
        time2.start.epoch = epoch,
        !CMTimeCompare(&range.start, &time2.start)))
  {
    if ((uint64_t)a2[1] >= 1)
    {
      v65 = 0u;
      memset(v66, 0, sizeof(v66));
      v64 = 0u;
      memset(&range, 0, sizeof(range));
      compositionEditSegment_copySegmentsAndAddURLsToBag((CFTypeRef *)&range, v8, 1, 0);
      v18 = a2[2] + 108 * a2[1] - 108;
      v19 = compositionEditSegment_combineEditSegmentsIfPossible(v18, (uint64_t)&range, v18, 0);
      v8 += 27 * v19;
      v7 += (char)-(char)v19;
      compositionEditSegment_releaseSegmentsAndRemoveURLsFromBag((uint64_t)&range, 1, 0);
    }
    v20 = 108 * v7 - 96;
    while (1)
    {
      v17 = v7-- < 1;
      if (v17)
        break;
      v21 = *(_DWORD *)((char *)v8 + v20) & 0x1D;
      v20 -= 108;
      if (v21 == 1)
      {
        v22 = v7 + 1;
        result = compositionTable_insertUninitializedEditsIntoTrack(a1, a2, a2[1], v22);
        if ((_DWORD)result)
          return result;
        v24 = (CFTypeRef *)(a2[2] + 108 * v9);
        v25 = *(__CFBag **)(a1 + 40);
        v26 = v8;
        v27 = v22;
LABEL_47:
        compositionEditSegment_copySegmentsAndAddURLsToBag(v24, v26, v27, v25);
        return 0;
      }
    }
    return 0;
  }
  range.start.value = v69;
  range.start.timescale = v70;
  range.start.flags = v10;
  range.start.epoch = v11;
  *(_OWORD *)&time2.start.value = v67;
  time2.start.epoch = epoch;
  if (CMTimeCompare(&range.start, &time2.start) >= 1)
  {
    v16 = &v8[27 * v7];
    while ((v8[3] & 0x1D) != 1)
    {
      v8 += 27;
      v17 = v7-- <= 1;
      if (v17)
      {
        v7 = 0;
        goto LABEL_42;
      }
    }
    v16 = v8;
LABEL_42:
    v42 = 108 * v7 - 96;
    while (1)
    {
      v17 = v7-- < 1;
      if (v17)
        return 0;
      v43 = *(_DWORD *)((char *)v16 + v42) & 0x1D;
      v42 -= 108;
      if (v43 == 1)
      {
        v69 = *((_QWORD *)v16 + 6);
        v44 = v16[15];
        v70 = v16[14];
        v45 = *((_QWORD *)v16 + 8);
        result = compositionTable_insertUninitializedEditsIntoTrack(a1, a2, a2[1], v7 + 2);
        if ((_DWORD)result)
          return result;
        v46 = v7 + 1;
        v47 = 108 * v9;
        v48 = a2[2] + 108 * v9;
        v49 = v67;
        *(_OWORD *)(v48 + 48) = v67;
        v50 = epoch;
        *(_QWORD *)(v48 + 64) = epoch;
        v51 = a2[2] + 108 * v9;
        time2.start.value = v69;
        time2.start.timescale = v70;
        time2.start.flags = v44;
        time2.start.epoch = v45;
        *(_OWORD *)&v62.value = v49;
        v62.epoch = v50;
        CMTimeSubtract(&range.start, &time2.start, &v62);
        v52 = *(_OWORD *)&range.start.value;
        *(_QWORD *)(v51 + 88) = range.start.epoch;
        *(_OWORD *)(v51 + 72) = v52;
        v53 = a2[2] + v47;
        v54 = MEMORY[0x1E0CA2E18];
        *(_OWORD *)v53 = *MEMORY[0x1E0CA2E18];
        *(_QWORD *)(v53 + 16) = *(_QWORD *)(v54 + 16);
        v55 = a2[2] + v47;
        *(_OWORD *)(v55 + 24) = v57;
        *(_QWORD *)(v55 + 40) = v12;
        v56 = a2[2] + v47;
        *(_QWORD *)(v56 + 96) = 0;
        *(_DWORD *)(v56 + 104) = 0;
        v24 = (CFTypeRef *)(v56 + 108);
        v25 = *(__CFBag **)(a1 + 40);
        v26 = v16;
        v27 = v46;
        goto LABEL_47;
      }
    }
  }
  v65 = 0u;
  memset(v66, 0, sizeof(v66));
  v64 = 0u;
  memset(&range, 0, sizeof(range));
  *(_OWORD *)&v62.value = v57;
  v62.epoch = v12;
  *(_OWORD *)&v61.value = v57;
  v28 = 18;
  v29 = v7;
  v61.epoch = v12;
  do
  {
    time2.start = v61;
    rhs = *(CMTime *)&v8[v28];
    CMTimeAdd(&v61, &time2.start, &rhs);
    v28 += 27;
    --v29;
  }
  while (v29);
  time2.start.value = v69;
  time2.start.timescale = v70;
  time2.start.flags = v10;
  time2.start.epoch = v11;
  EditIndexStartingAtTimeInTrackSplitEditIfNecessary = compositionTable_findEditIndexStartingAtTimeInTrackSplitEditIfNecessary(a1, a2, &time2.start);
  if (EditIndexStartingAtTimeInTrackSplitEditIfNecessary < 0)
    return 4294954516;
  v31 = EditIndexStartingAtTimeInTrackSplitEditIfNecessary;
  if (EditIndexStartingAtTimeInTrackSplitEditIfNecessary >= a2[1])
    return 4294954516;
  v32 = EditIndexStartingAtTimeInTrackSplitEditIfNecessary - 1;
  if (EditIndexStartingAtTimeInTrackSplitEditIfNecessary)
    v33 = EditIndexStartingAtTimeInTrackSplitEditIfNecessary - 1;
  else
    v33 = 0;
  v34 = a2[2] + 108 * EditIndexStartingAtTimeInTrackSplitEditIfNecessary;
  v35 = *(_OWORD *)(v34 + 48);
  rhs.epoch = *(_QWORD *)(v34 + 64);
  *(_OWORD *)&rhs.value = v35;
  v59 = v61;
  CMTimeAdd(&time2.start, &rhs, &v59);
  v36 = *(_OWORD *)&time2.start.value;
  *(_QWORD *)(v34 + 64) = time2.start.epoch;
  *(_OWORD *)(v34 + 48) = v36;
  if (!v31)
  {
LABEL_35:
    v37 = v7 - 1;
    if (v7 >= 1)
    {
      compositionEditSegment_copySegmentsAndAddURLsToBag((CFTypeRef *)&range, &v8[27 * v37], 1, *(__CFBag **)(a1 + 40));
      v38 = compositionEditSegment_combineEditSegmentsIfPossible((uint64_t)&range, a2[2] + 108 * v31, a2[2] + 108 * v31, *(__CFBag **)(a1 + 40));
      compositionEditSegment_releaseSegmentsAndRemoveURLsFromBag((uint64_t)&range, 1, *(CFMutableBagRef *)(a1 + 40));
      if (!v38 || (--v7, v37))
      {
        result = compositionTable_insertUninitializedEditsIntoTrack(a1, a2, v31, v7);
        if ((_DWORD)result)
          return result;
        compositionEditSegment_copySegmentsAndAddURLsToBag((CFTypeRef *)(a2[2] + 108 * v31), v8, v7, *(__CFBag **)(a1 + 40));
        v31 = v31 + v7 - 1;
      }
    }
    v39 = (_OWORD *)(a2[2] + 108 * v31);
    v40 = v39[3];
    v41 = v39[5];
    *(_OWORD *)&time2.start.epoch = v39[4];
    *(_OWORD *)&time2.duration.timescale = v41;
    *(_OWORD *)&time2.start.value = v40;
    CMTimeRangeGetEnd(&v62, &time2);
    time2.start = v62;
    compositionTableTrack_updateTrackStartTimes((uint64_t)a2, v31 + 1, (__int128 *)&time2.start.value);
    compositionTable_deleteEditsWithZeroDuration(a1, (unint64_t)a2, v33, v31 + 1);
    return 0;
  }
  compositionEditSegment_copySegmentsAndAddURLsToBag((CFTypeRef *)&range, v8, 1, *(__CFBag **)(a1 + 40));
  if (!compositionEditSegment_combineEditSegmentsIfPossible(a2[2] + 108 * v32, (uint64_t)&range, a2[2] + 108 * v32, *(__CFBag **)(a1 + 40))|| (v8 += 27, --v7, v7))
  {
LABEL_34:
    compositionEditSegment_releaseSegmentsAndRemoveURLsFromBag((uint64_t)&range, 1, *(CFMutableBagRef *)(a1 + 40));
    goto LABEL_35;
  }
  if (!compositionEditSegment_combineEditSegmentsIfPossible(a2[2] + 108 * v32, a2[2] + 108 * v31, a2[2] + 108 * v32, *(__CFBag **)(a1 + 40))|| (result = compositionTable_deleteEditsFromTrack(a1, (unint64_t)a2, v31, 1), !(_DWORD)result))
  {
    v7 = 0;
    --v31;
    goto LABEL_34;
  }
  return result;
}

uint64_t compositionTable_insertUninitializedEditsIntoTrack(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4 > (unint64_t)a2)
    return 4294954516;
  result = 4294954516;
  if ((a3 & 0x8000000000000000) == 0 && v4 + 168 * *(_QWORD *)(a1 + 16) > (unint64_t)a2)
  {
    v9 = a2[1];
    v10 = v9 - a3;
    if (v9 >= a3)
    {
      v12 = a2[3];
      if (v12 - v9 >= a4)
      {
        if (v10 >= 1)
          memmove((void *)(a2[2] + 108 * a3 + 108 * a4), (const void *)(a2[2] + 108 * a3), 108 * v10);
        bzero((void *)(a2[2] + 108 * a3), 108 * a4);
      }
      else
      {
        v13 = 5;
        if (a4 > 5)
          v13 = a4;
        v14 = v12 + v13;
        v15 = (char *)malloc_type_calloc(v12 + v13, 0x6CuLL, 0x1060040CB727B4DuLL);
        v16 = v15;
        v17 = (char *)a2[2];
        if (v17)
        {
          v18 = a2[1] - a3;
          if (a3)
          {
            memmove(v15, v17, 108 * a3);
            v17 = (char *)a2[2];
          }
          if (v18 >= 1)
          {
            memmove(&v16[108 * a3 + 108 * a4], &v17[108 * a3], 108 * v18);
            v17 = (char *)a2[2];
          }
          free(v17);
        }
        a2[2] = v16;
        a2[3] = v14;
      }
      result = 0;
      a2[1] += a4;
    }
  }
  return result;
}

uint64_t compositionTable_findEditIndexStartingAtTimeInTrackSplitEditIfNecessary(uint64_t a1, _QWORD *a2, CMTime *a3)
{
  unint64_t v3;
  uint64_t EditSegmentByTime;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  const void *v26;
  CMTimeEpoch epoch;
  CMTimeEpoch v28;
  const void *v29;
  CMTimeRange v31;
  CMTimeRange time1;
  CMTime rhs;
  CMTime v34;
  CMTime v35;
  CMTime v36;

  v3 = *(_QWORD *)(a1 + 32);
  if (v3 > (unint64_t)a2 || v3 + 168 * *(_QWORD *)(a1 + 16) <= (unint64_t)a2)
    return -1;
  *(_OWORD *)&time1.start.value = *(_OWORD *)&a3->value;
  time1.start.epoch = a3->epoch;
  EditSegmentByTime = compositionTableTrack_findEditSegmentByTime((uint64_t)a2, (uint64_t)&time1);
  v8 = EditSegmentByTime;
  if ((EditSegmentByTime & 0x8000000000000000) == 0)
  {
    v9 = a2[2] + 108 * EditSegmentByTime;
    v10 = *(_OWORD *)(v9 + 48);
    time1.start.epoch = *(_QWORD *)(v9 + 64);
    *(_OWORD *)&time1.start.value = v10;
    *(_OWORD *)&v31.start.value = *(_OWORD *)&a3->value;
    v31.start.epoch = a3->epoch;
    if (CMTimeCompare(&time1.start, &v31.start))
    {
      v11 = (__int128 *)(a2[2] + 108 * v8);
      v36 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      v35 = v36;
      v34 = v36;
      rhs = *a3;
      v12 = v11[3];
      v13 = v11[5];
      *(_OWORD *)&time1.start.epoch = v11[4];
      *(_OWORD *)&time1.duration.timescale = v13;
      *(_OWORD *)&time1.start.value = v12;
      v14 = *v11;
      v15 = v11[2];
      *(_OWORD *)&v31.start.epoch = v11[1];
      *(_OWORD *)&v31.duration.timescale = v15;
      *(_OWORD *)&v31.start.value = v14;
      CMTimeMapTimeFromRangeToRange(&v36, &rhs, &time1, &v31);
      v16 = v8 + 1;
      if (compositionTable_insertUninitializedEditsIntoTrack(a1, a2, v8 + 1, 1))
        return -1;
      v17 = a2[2] + 108 * v8;
      *(_OWORD *)&time1.start.value = *(_OWORD *)&a3->value;
      time1.start.epoch = a3->epoch;
      v18 = *(_OWORD *)(v17 + 48);
      v31.start.epoch = *(_QWORD *)(v17 + 64);
      *(_OWORD *)&v31.start.value = v18;
      CMTimeSubtract(&v35, &time1.start, &v31.start);
      time1.start = v36;
      v19 = *(_OWORD *)v17;
      v31.start.epoch = *(_QWORD *)(v17 + 16);
      *(_OWORD *)&v31.start.value = v19;
      CMTimeSubtract(&v34, &time1.start, &v31.start);
      v20 = *(_OWORD *)&a3->value;
      *(_QWORD *)(v17 + 172) = a3->epoch;
      *(_OWORD *)(v17 + 156) = v20;
      v21 = *(_OWORD *)(v17 + 72);
      v31.start.epoch = *(_QWORD *)(v17 + 88);
      *(_OWORD *)&v31.start.value = v21;
      rhs = v35;
      CMTimeSubtract(&time1.start, &v31.start, &rhs);
      v22 = *(_OWORD *)&time1.start.value;
      *(_QWORD *)(v17 + 196) = time1.start.epoch;
      *(_OWORD *)(v17 + 180) = v22;
      v23 = *(_OWORD *)&v36.value;
      *(_QWORD *)(v17 + 124) = v36.epoch;
      *(_OWORD *)(v17 + 108) = v23;
      v24 = *(_OWORD *)(v17 + 24);
      v31.start.epoch = *(_QWORD *)(v17 + 40);
      *(_OWORD *)&v31.start.value = v24;
      rhs = v34;
      CMTimeSubtract(&time1.start, &v31.start, &rhs);
      v25 = *(_OWORD *)&time1.start.value;
      *(_QWORD *)(v17 + 148) = time1.start.epoch;
      *(_OWORD *)(v17 + 132) = v25;
      v26 = *(const void **)(v17 + 96);
      *(_QWORD *)(v17 + 204) = v26;
      *(_DWORD *)(v17 + 212) = *(_DWORD *)(v17 + 104);
      epoch = v35.epoch;
      *(_OWORD *)(v17 + 72) = *(_OWORD *)&v35.value;
      *(_QWORD *)(v17 + 88) = epoch;
      v28 = v34.epoch;
      *(_OWORD *)(v17 + 24) = *(_OWORD *)&v34.value;
      *(_QWORD *)(v17 + 40) = v28;
      if ((*(_DWORD *)(v17 + 120) & 0x1D) == 1)
      {
        if (v26)
        {
          CFRetain(v26);
          v29 = *(const void **)(v17 + 204);
          if (v29)
            CFBagAddValue(*(CFMutableBagRef *)(a1 + 40), v29);
        }
      }
      return v16;
    }
  }
  return v8;
}

uint64_t compositionTable_deleteEditsFromTrack(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4 > a2)
    return 4294954516;
  if (v4 + 168 * *(_QWORD *)(a1 + 16) <= a2)
    return 4294954516;
  v8 = a4 + a3;
  if (a4 + a3 > *(_QWORD *)(a2 + 8))
    return 4294954516;
  compositionEditSegment_releaseSegmentsAndRemoveURLsFromBag(*(_QWORD *)(a2 + 16) + 108 * a3, a4, *(CFMutableBagRef *)(a1 + 40));
  v9 = *(_QWORD *)(a2 + 8);
  if (v9 - v8 >= 1)
  {
    memmove((void *)(*(_QWORD *)(a2 + 16) + 108 * a3), (const void *)(*(_QWORD *)(a2 + 16) + 108 * v8), 108 * (v9 - v8));
    v9 = *(_QWORD *)(a2 + 8);
  }
  v10 = v9 - a4;
  *(_QWORD *)(a2 + 8) = v10;
  bzero((void *)(*(_QWORD *)(a2 + 16) + 108 * v10), 108 * a4);
  return 0;
}

double compositionTableTrack_updateTrackStartTimes(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  double result;
  CMTimeRange v13;
  CMTime v14;

  if (*(_QWORD *)(a1 + 8) > a2)
  {
    v4 = a2;
    v6 = 108 * a2 + 48;
    do
    {
      v7 = *(_QWORD *)(a1 + 16) + v6;
      v8 = *a3;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v7 = v8;
      v9 = (__int128 *)(*(_QWORD *)(a1 + 16) + v6);
      v10 = *v9;
      v11 = v9[2];
      *(_OWORD *)&v13.start.epoch = v9[1];
      *(_OWORD *)&v13.duration.timescale = v11;
      *(_OWORD *)&v13.start.value = v10;
      CMTimeRangeGetEnd(&v14, &v13);
      result = *(double *)&v14.value;
      *(CMTime *)a3 = v14;
      ++v4;
      v6 += 108;
    }
    while (v4 < *(_QWORD *)(a1 + 8));
  }
  return result;
}

uint64_t compositionTable_deleteEditsWithZeroDuration(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  uint64_t v10;
  CMTimeEpoch v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  CMTime time2;
  CMTime time1;

  if ((a3 & 0x8000000000000000) == 0)
  {
    v4 = a4;
    v5 = a3;
    v7 = *(_QWORD *)(a2 + 8);
    v8 = v7 > a4 && a3 <= a4;
    if (v8 && v7 > a3)
    {
      v10 = result;
      v14 = *MEMORY[0x1E0CA2E68];
      v11 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
      do
      {
        v12 = *(_QWORD *)(a2 + 16) + 108 * v5;
        v13 = *(_OWORD *)(v12 + 72);
        time1.epoch = *(_QWORD *)(v12 + 88);
        *(_OWORD *)&time1.value = v13;
        *(_OWORD *)&time2.value = v14;
        time2.epoch = v11;
        result = CMTimeCompare(&time1, &time2);
        if ((_DWORD)result)
        {
          ++v5;
        }
        else
        {
          result = compositionTable_deleteEditsFromTrack(v10, a2, v5, 1);
          if ((_DWORD)result)
            return result;
          --v4;
        }
      }
      while (v5 <= v4);
    }
  }
  return result;
}

uint64_t compositionTableTrack_findEditSegmentByTime(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  CMTime v12;
  CMTimeRange range;
  CMTime v14;
  CMTime v15;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return -1;
  if (v2 >= 2)
  {
    v5 = 0;
    v6 = v2 - 1;
    while (1)
    {
      v7 = (v6 + v5) >> 1;
      v8 = *(_QWORD *)(a1 + 16) + 108 * v7;
      v15 = *(CMTime *)(v8 + 48);
      memset(&v14, 0, sizeof(v14));
      v9 = *(_OWORD *)(v8 + 48);
      v10 = *(_OWORD *)(v8 + 80);
      *(_OWORD *)&range.start.epoch = *(_OWORD *)(v8 + 64);
      *(_OWORD *)&range.duration.timescale = v10;
      *(_OWORD *)&range.start.value = v9;
      CMTimeRangeGetEnd(&v14, &range);
      *(_OWORD *)&range.start.value = *(_OWORD *)a2;
      range.start.epoch = *(_QWORD *)(a2 + 16);
      v12 = v14;
      if (CMTimeCompare(&range.start, &v12) < 1)
      {
        *(_OWORD *)&range.start.value = *(_OWORD *)a2;
        range.start.epoch = *(_QWORD *)(a2 + 16);
        v12 = v14;
        if (!CMTimeCompare(&range.start, &v12))
          return v7 + 1;
        *(_OWORD *)&range.start.value = *(_OWORD *)a2;
        range.start.epoch = *(_QWORD *)(a2 + 16);
        v12 = v15;
        if ((CMTimeCompare(&range.start, &v12) & 0x80000000) == 0)
          return (v6 + v5) >> 1;
        v6 = v7 - 1;
      }
      else
      {
        v5 = v7 + 1;
      }
      if (v5 >= v6)
        return v5;
    }
  }
  return 0;
}

uint64_t compositionTable_insertEditSegmentsFromAsset(uint64_t a1, uint64_t *a2, uint64_t a3, const void *a4, int a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t CompatibleTrackForFormatDescriptionArrayAndMediaType;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;

  v15 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  v16 = *(_QWORD *)(v15 + 16);
  v17 = v15;
  v18 = 0;
  while (1)
  {
    CompatibleTrackForFormatDescriptionArrayAndMediaType = compositionTable_findCompatibleTrackForFormatDescriptionArrayAndMediaType(v17, v18, v16, a4, a5);
    if (CompatibleTrackForFormatDescriptionArrayAndMediaType < 0)
    {
      v24 = CompatibleTrackForFormatDescriptionArrayAndMediaType;
      compositionTable_addTrack(v15, a5, 0, 0, &v24);
      CompatibleTrackForFormatDescriptionArrayAndMediaType = v24;
      goto LABEL_9;
    }
    v20 = a2;
    v21 = a3;
    if (a3 >= 1)
      break;
LABEL_6:
    v18 = CompatibleTrackForFormatDescriptionArrayAndMediaType + 1;
    v16 = *(_QWORD *)(v15 + 16);
    v17 = v15;
  }
  while (1)
  {
    v22 = *v20++;
    if (v22 == CompatibleTrackForFormatDescriptionArrayAndMediaType)
      break;
    if (!--v21)
      goto LABEL_6;
  }
  v24 = CompatibleTrackForFormatDescriptionArrayAndMediaType;
LABEL_9:
  result = compositionTable_insertEditSegmentsIntoTrack(v15, (_QWORD *)(*(_QWORD *)(v15 + 32) + 168 * CompatibleTrackForFormatDescriptionArrayAndMediaType), a6, a7);
  if (a8)
  {
    if (!(_DWORD)result)
      *a8 = v24;
  }
  return result;
}

uint64_t tableTrack_InsertEmptyEditsInTracks(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, CMTime *a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  CMTime *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t result;
  CMTime v21;
  CMTime v22;
  CMTimeRange range;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3 < 1)
    return 0;
  v10 = *(_QWORD *)(DerivedStorage + 8);
  v11 = (CMTime *)MEMORY[0x1E0CA2E68];
  while (1)
  {
    v13 = *a2++;
    v12 = v13;
    v14 = *(_QWORD *)(v10 + 32);
    v15 = (_QWORD *)(v14 + 168 * v13);
    if ((uint64_t)v15[1] >= 1)
    {
      v22 = *v11;
      v16 = v15[1];
      if (v16 >= 1)
      {
        v17 = *(_QWORD *)(v14 + 168 * v12 + 16) + 108 * v16;
        v18 = *(_OWORD *)(v17 - 60);
        v19 = *(_OWORD *)(v17 - 28);
        *(_OWORD *)&range.start.epoch = *(_OWORD *)(v17 - 44);
        *(_OWORD *)&range.duration.timescale = v19;
        *(_OWORD *)&range.start.value = v18;
        CMTimeRangeGetEnd(&v22, &range);
      }
      *(_OWORD *)&range.start.value = *(_OWORD *)a4;
      range.start.epoch = *(_QWORD *)(a4 + 16);
      v21 = v22;
      if (CMTimeCompare(&range.start, &v21) < 0)
      {
        *(_OWORD *)&range.start.value = *(_OWORD *)a4;
        range.start.epoch = *(_QWORD *)(a4 + 16);
        v21 = *a5;
        result = compositionTable_insertEmptyTrackSegment(v10, v15, &range.start, &v21);
        if ((_DWORD)result)
          break;
      }
    }
    if (!--a3)
      return 0;
  }
  return result;
}

uint64_t compositionTable_insertEmptyTrackSegment(uint64_t a1, _QWORD *a2, CMTime *a3, CMTime *a4)
{
  CMTimeEpoch v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v15;
  CMTime start;
  CMTime time2;
  CMTimeRange time1;

  *(_OWORD *)&time1.start.value = *(_OWORD *)&a4->value;
  time1.start.epoch = a4->epoch;
  v15 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&time2.value = *MEMORY[0x1E0CA2E68];
  v8 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  time2.epoch = v8;
  if (CMTimeCompare(&time1.start, &time2) < 1)
    return 4294954516;
  *(_OWORD *)&time1.start.value = *(_OWORD *)&a3->value;
  time1.start.epoch = a3->epoch;
  *(_OWORD *)&time2.value = v15;
  time2.epoch = v8;
  if (CMTimeCompare(&time1.start, &time2) < 0)
    return 4294954516;
  v9 = *(_QWORD *)(a1 + 32);
  if (v9 > (unint64_t)a2)
    return 4294954516;
  if (v9 + 168 * *(_QWORD *)(a1 + 16) <= (unint64_t)a2)
    return 4294954516;
  v10 = a2[1];
  if (v10 < 1)
    return 4294954516;
  *(_OWORD *)&time2.value = v15;
  time2.epoch = v8;
  v11 = a2[2] + 108 * v10;
  v12 = *(_OWORD *)(v11 - 60);
  v13 = *(_OWORD *)(v11 - 28);
  *(_OWORD *)&time1.start.epoch = *(_OWORD *)(v11 - 44);
  *(_OWORD *)&time1.duration.timescale = v13;
  *(_OWORD *)&time1.start.value = v12;
  CMTimeRangeGetEnd(&time2, &time1);
  time1.start = time2;
  time2 = *a3;
  start = time1.start;
  if ((CMTimeCompare(&time2, &start) & 0x80000000) == 0)
    return 0;
  time2 = *a4;
  start = *a3;
  return compositionTable_insertAssetSegmentIntoTrack(a1, a2, 0, 0, MEMORY[0x1E0CA2E18], (uint64_t)&time2, (__int128 *)&start.value);
}

uint64_t compositionTable_deleteTrackSegment(uint64_t a1, _QWORD *a2, CMTime *a3, CMTime *a4)
{
  CMTimeEpoch v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t EditIndexStartingAtTimeInTrackSplitEditIfNecessary;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v24;
  CMTime time2;
  CMTime rhs;
  CMTime v27;
  CMTimeRange lhs;

  memset(&v27, 0, sizeof(v27));
  *(_OWORD *)&lhs.start.value = *(_OWORD *)&a3->value;
  lhs.start.epoch = a3->epoch;
  rhs = *a4;
  CMTimeAdd(&v27, &lhs.start, &rhs);
  *(_OWORD *)&lhs.start.value = *(_OWORD *)&a4->value;
  lhs.start.epoch = a4->epoch;
  v24 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&rhs.value = *MEMORY[0x1E0CA2E68];
  v8 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  rhs.epoch = v8;
  if (!CMTimeCompare(&lhs.start, &rhs))
    return 0;
  *(_OWORD *)&lhs.start.value = *(_OWORD *)&a4->value;
  lhs.start.epoch = a4->epoch;
  *(_OWORD *)&rhs.value = v24;
  rhs.epoch = v8;
  if (CMTimeCompare(&lhs.start, &rhs) < 1)
    return 4294954516;
  *(_OWORD *)&lhs.start.value = *(_OWORD *)&a3->value;
  lhs.start.epoch = a3->epoch;
  *(_OWORD *)&rhs.value = v24;
  rhs.epoch = v8;
  if (CMTimeCompare(&lhs.start, &rhs) < 0)
    return 4294954516;
  v9 = *(_QWORD *)(a1 + 32);
  if (v9 > (unint64_t)a2 || v9 + 168 * *(_QWORD *)(a1 + 16) <= (unint64_t)a2)
    return 4294954516;
  v10 = a2[1];
  if (v10 < 1)
    return 0;
  *(_OWORD *)&rhs.value = v24;
  rhs.epoch = v8;
  v11 = a2[2] + 108 * v10;
  v12 = *(_OWORD *)(v11 - 60);
  v13 = *(_OWORD *)(v11 - 28);
  *(_OWORD *)&lhs.start.epoch = *(_OWORD *)(v11 - 44);
  *(_OWORD *)&lhs.duration.timescale = v13;
  *(_OWORD *)&lhs.start.value = v12;
  CMTimeRangeGetEnd(&rhs, &lhs);
  lhs.start = rhs;
  rhs = *a3;
  time2 = lhs.start;
  if ((CMTimeCompare(&rhs, &time2) & 0x80000000) == 0)
    return 0;
  rhs = *a3;
  EditIndexStartingAtTimeInTrackSplitEditIfNecessary = compositionTable_findEditIndexStartingAtTimeInTrackSplitEditIfNecessary(a1, a2, &rhs);
  if (EditIndexStartingAtTimeInTrackSplitEditIfNecessary < 0)
    return 4294954516;
  v15 = EditIndexStartingAtTimeInTrackSplitEditIfNecessary;
  if (EditIndexStartingAtTimeInTrackSplitEditIfNecessary >= a2[1])
    return 4294954516;
  rhs = v27;
  time2 = lhs.start;
  if (CMTimeCompare(&rhs, &time2) < 0)
  {
    rhs = v27;
    v16 = compositionTable_findEditIndexStartingAtTimeInTrackSplitEditIfNecessary(a1, a2, &rhs);
    if ((v16 & 0x8000000000000000) == 0 && v16 < a2[1])
      goto LABEL_15;
    return 4294954516;
  }
  v16 = a2[1];
LABEL_15:
  v18 = compositionTable_deleteEditsFromTrack(a1, (unint64_t)a2, v15, v16 - v15);
  if ((_DWORD)v18)
    return v18;
  rhs = *a3;
  compositionTableTrack_updateTrackStartTimes((uint64_t)a2, v15, (__int128 *)&rhs.value);
  if (v15)
  {
    v19 = a2[1];
    if (v15 >= v19)
      goto LABEL_21;
    if (compositionEditSegment_combineEditSegmentsIfPossible(a2[2] + 108 * v15 - 108, a2[2] + 108 * v15, a2[2] + 108 * v15 - 108, *(__CFBag **)(a1 + 40)))
    {
      v18 = compositionTable_deleteEditsFromTrack(a1, (unint64_t)a2, v15, 1);
      if ((_DWORD)v18)
        return v18;
    }
  }
  v19 = a2[1];
LABEL_21:
  v20 = v19 - 1;
  if (v19 < 1 || (*(_DWORD *)(a2[2] + 108 * v20 + 12) & 0x1D) == 1)
  {
    v17 = 0;
  }
  else
  {
    v17 = compositionTable_deleteEditsFromTrack(a1, (unint64_t)a2, v20, 1);
    v19 = a2[1];
  }
  if (v15 >= v19)
    v21 = v19 - 1;
  else
    v21 = v15;
  if (v15)
    v22 = v15 - 1;
  else
    v22 = 0;
  if (v21 >= v22)
    compositionTable_deleteEditsWithZeroDuration(a1, (unint64_t)a2, v22, v21);
  return v17;
}

uint64_t compositionTable_scaleTrackSegment(uint64_t a1, _QWORD *a2, uint64_t a3, CMTime *a4, CMTime *a5)
{
  CMTimeEpoch v10;
  double Seconds;
  double v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t EditIndexStartingAtTimeInTrackSplitEditIfNecessary;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  CMTime rhs;
  CMTime v37;
  CMTime v38;
  CMTimeRange lhs;

  v35 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&v38.value = *MEMORY[0x1E0CA2E68];
  v10 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v38.epoch = v10;
  *(_OWORD *)&lhs.start.value = *(_OWORD *)a3;
  lhs.start.epoch = *(_QWORD *)(a3 + 16);
  rhs = *a4;
  memset(&v37, 0, sizeof(v37));
  CMTimeAdd(&v37, &lhs.start, &rhs);
  *(_OWORD *)&lhs.start.value = *(_OWORD *)&a5->value;
  lhs.start.epoch = a5->epoch;
  Seconds = CMTimeGetSeconds(&lhs.start);
  *(_OWORD *)&lhs.start.value = *(_OWORD *)&a4->value;
  lhs.start.epoch = a4->epoch;
  v12 = CMTimeGetSeconds(&lhs.start);
  *(_OWORD *)&lhs.start.value = *(_OWORD *)&a4->value;
  lhs.start.epoch = a4->epoch;
  rhs = *a5;
  result = CMTimeCompare(&lhs.start, &rhs);
  if (!(_DWORD)result)
    return result;
  *(_OWORD *)&lhs.start.value = *(_OWORD *)&a4->value;
  lhs.start.epoch = a4->epoch;
  *(_OWORD *)&rhs.value = v35;
  rhs.epoch = v10;
  if (CMTimeCompare(&lhs.start, &rhs) < 1)
    return 4294954516;
  *(_OWORD *)&lhs.start.value = *(_OWORD *)&a5->value;
  lhs.start.epoch = a5->epoch;
  *(_OWORD *)&rhs.value = v35;
  rhs.epoch = v10;
  if (CMTimeCompare(&lhs.start, &rhs) < 1)
    return 4294954516;
  *(_OWORD *)&lhs.start.value = *(_OWORD *)a3;
  lhs.start.epoch = *(_QWORD *)(a3 + 16);
  *(_OWORD *)&rhs.value = v35;
  rhs.epoch = v10;
  if (CMTimeCompare(&lhs.start, &rhs) < 0)
    return 4294954516;
  v14 = *(_QWORD *)(a1 + 32);
  if (v14 > (unint64_t)a2)
    return 4294954516;
  if (v14 + 168 * *(_QWORD *)(a1 + 16) <= (unint64_t)a2)
    return 4294954516;
  v15 = a2[1];
  if (v15 < 1)
    return 4294954516;
  *(_OWORD *)&rhs.value = v35;
  rhs.epoch = v10;
  v16 = a2[2] + 108 * v15;
  v17 = *(_OWORD *)(v16 - 60);
  v18 = *(_OWORD *)(v16 - 28);
  *(_OWORD *)&lhs.start.epoch = *(_OWORD *)(v16 - 44);
  *(_OWORD *)&lhs.duration.timescale = v18;
  *(_OWORD *)&lhs.start.value = v17;
  CMTimeRangeGetEnd(&rhs, &lhs);
  v38 = rhs;
  *(_OWORD *)&lhs.start.value = *(_OWORD *)a3;
  lhs.start.epoch = *(_QWORD *)(a3 + 16);
  if ((CMTimeCompare(&lhs.start, &rhs) & 0x80000000) == 0)
    return 0;
  *(_OWORD *)&lhs.start.value = *(_OWORD *)a3;
  lhs.start.epoch = *(_QWORD *)(a3 + 16);
  EditIndexStartingAtTimeInTrackSplitEditIfNecessary = compositionTable_findEditIndexStartingAtTimeInTrackSplitEditIfNecessary(a1, a2, &lhs.start);
  if (EditIndexStartingAtTimeInTrackSplitEditIfNecessary < 0)
    return 4294954516;
  v20 = EditIndexStartingAtTimeInTrackSplitEditIfNecessary;
  if (EditIndexStartingAtTimeInTrackSplitEditIfNecessary >= a2[1])
    return 4294954516;
  lhs.start = v37;
  rhs = v38;
  if ((CMTimeCompare(&lhs.start, &rhs) & 0x80000000) == 0)
  {
    v21 = a2[1];
    goto LABEL_15;
  }
  lhs.start = v37;
  v22 = compositionTable_findEditIndexStartingAtTimeInTrackSplitEditIfNecessary(a1, a2, &lhs.start);
  if (v22 < 0)
    return 4294954516;
  v21 = v22;
  if (v22 >= a2[1])
    return 4294954516;
LABEL_15:
  if (v20 == v21 - 1
    && (v23 = a2[2] + 108 * v20,
        v24 = *(_OWORD *)(v23 + 72),
        lhs.start.epoch = *(_QWORD *)(v23 + 88),
        *(_OWORD *)&lhs.start.value = v24,
        rhs = *a4,
        !CMTimeCompare(&lhs.start, &rhs)))
  {
    v31 = a2[2] + 108 * v20;
    v32 = *(_OWORD *)&a5->value;
    *(_QWORD *)(v31 + 88) = a5->epoch;
    *(_OWORD *)(v31 + 72) = v32;
  }
  else
  {
    v25 = v21 - v20;
    if (v21 > v20)
    {
      v26 = 108 * v20 + 72;
      v27 = Seconds / v12;
      do
      {
        v28 = a2[2] + v26;
        v29 = *(_OWORD *)v28;
        rhs.epoch = *(_QWORD *)(v28 + 16);
        *(_OWORD *)&rhs.value = v29;
        CMTimeMultiplyByFloat64(&lhs.start, &rhs, v27);
        v30 = *(_OWORD *)&lhs.start.value;
        *(_QWORD *)(v28 + 16) = lhs.start.epoch;
        *(_OWORD *)v28 = v30;
        v26 += 108;
        --v25;
      }
      while (v25);
    }
  }
  *(_OWORD *)&lhs.start.value = *(_OWORD *)a3;
  lhs.start.epoch = *(_QWORD *)(a3 + 16);
  compositionTableTrack_updateTrackStartTimes((uint64_t)a2, v20, (__int128 *)&lhs.start.value);
  if (v20 < 1
    || v20 >= a2[1]
    || !compositionEditSegment_combineEditSegmentsIfPossible(a2[2] + 108 * v20 - 108, a2[2] + 108 * v20, a2[2] + 108 * v20 - 108, *(__CFBag **)(a1 + 40))|| (result = compositionTable_deleteEditsFromTrack(a1, (unint64_t)a2, v20, 1), --v21, !(_DWORD)result))
  {
    if (v21 < 1
      || v21 >= a2[1]
      || !compositionEditSegment_combineEditSegmentsIfPossible(a2[2] + 108 * v21 - 108, a2[2] + 108 * v21, a2[2] + 108 * v21 - 108, *(__CFBag **)(a1 + 40))|| (result = compositionTable_deleteEditsFromTrack(a1, (unint64_t)a2, v21, 1), --v21, !(_DWORD)result))
    {
      v33 = a2[1];
      if (v21 >= v33)
        v34 = v33 - 1;
      else
        v34 = v21;
      compositionTable_deleteEditsWithZeroDuration(a1, (unint64_t)a2, v20 - (v20 > 0), v34);
      return 0;
    }
  }
  return result;
}

uint64_t compositionTable_copyAssetSegmentsFromTrackForTimeRange(uint64_t a1, unint64_t a2, CMTime *a3, uint64_t a4, _QWORD *a5, uint64_t *a6)
{
  CMTimeEpoch epoch;
  CMTimeEpoch v13;
  unint64_t v14;
  uint64_t EditSegmentByTime;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  CFTypeRef *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v49;
  __int128 v50;
  _QWORD *v51;
  CMTimeRange rhs;
  CMTime v53;
  CMTime dur;
  CMTime v55;
  CMTime time2;
  CMTimeRange lhs;
  CMTime v58;
  CMTime v59;
  CMTime v60;

  v60 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v49 = *(_OWORD *)&v60.value;
  epoch = v60.epoch;
  memset(&v59, 0, sizeof(v59));
  *(_OWORD *)&lhs.start.value = *(_OWORD *)&a3->value;
  lhs.start.epoch = a3->epoch;
  *(_OWORD *)&rhs.start.value = *(_OWORD *)a4;
  rhs.start.epoch = *(_QWORD *)(a4 + 16);
  CMTimeAdd(&v59, &lhs.start, &rhs.start);
  *(_OWORD *)&v58.value = v49;
  v58.epoch = epoch;
  if ((a3->flags & 0x1D) != 1)
    goto LABEL_28;
  *(_OWORD *)&lhs.start.value = *(_OWORD *)&a3->value;
  lhs.start.epoch = a3->epoch;
  v50 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&rhs.start.value = *MEMORY[0x1E0CA2E68];
  v13 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  rhs.start.epoch = v13;
  if (CMTimeCompare(&lhs.start, &rhs.start) < 0
    || (*(_DWORD *)(a4 + 12) & 0x1D) != 1
    || (*(_OWORD *)&lhs.start.value = *(_OWORD *)a4,
        lhs.start.epoch = *(_QWORD *)(a4 + 16),
        *(_OWORD *)&rhs.start.value = v50,
        rhs.start.epoch = v13,
        CMTimeCompare(&lhs.start, &rhs.start) < 1)
    || (v14 = *(_QWORD *)(a1 + 32), v14 > a2)
    || v14 + 168 * *(_QWORD *)(a1 + 16) <= a2)
  {
LABEL_28:
    v25 = 0;
    v47 = 4294954516;
    goto LABEL_27;
  }
  if (*(uint64_t *)(a2 + 8) >= 1)
  {
    v51 = a5;
    *(_OWORD *)&lhs.start.value = *(_OWORD *)&a3->value;
    lhs.start.epoch = a3->epoch;
    EditSegmentByTime = compositionTableTrack_findEditSegmentByTime(a2, (uint64_t)&lhs);
    lhs.start = v59;
    v16 = compositionTableTrack_findEditSegmentByTime(a2, (uint64_t)&lhs);
    v17 = (_OWORD *)(*(_QWORD *)(a2 + 16) + 108 * EditSegmentByTime);
    v18 = v17[3];
    v19 = v17[5];
    *(_OWORD *)&lhs.start.epoch = v17[4];
    *(_OWORD *)&lhs.duration.timescale = v19;
    *(_OWORD *)&lhs.start.value = v18;
    CMTimeRangeGetEnd(&v60, &lhs);
    v20 = (_OWORD *)(*(_QWORD *)(a2 + 16) + 108 * v16);
    v21 = v20[3];
    v22 = v20[5];
    *(_OWORD *)&lhs.start.epoch = v20[4];
    *(_OWORD *)&lhs.duration.timescale = v22;
    *(_OWORD *)&lhs.start.value = v21;
    CMTimeRangeGetEnd(&v58, &lhs);
    *(_OWORD *)&lhs.start.value = *(_OWORD *)&a3->value;
    lhs.start.epoch = a3->epoch;
    rhs.start = v60;
    v23 = v16 - EditSegmentByTime;
    if (CMTimeCompare(&lhs.start, &rhs.start) < 0)
      v24 = v23 + 1;
    else
      v24 = 0;
    lhs.start = v59;
    rhs.start = v58;
    if (CMTimeCompare(&lhs.start, &rhs.start) <= 0)
      v25 = v24;
    else
      v25 = v24 + 1;
    if (v25 > 0)
    {
      v26 = (CFTypeRef *)malloc_type_calloc(v25, 0x6CuLL, 0x1060040CB727B4DuLL);
      if (v26)
      {
        v27 = (char *)v26;
        if (v24 < 1)
        {
          v28 = v24;
        }
        else
        {
          v28 = v23 + 1;
          compositionEditSegment_copySegmentsAndAddURLsToBag(v26, (const void *)(*(_QWORD *)(a2 + 16) + 108 * EditSegmentByTime), v24, 0);
          *(_OWORD *)&lhs.start.value = *(_OWORD *)&a3->value;
          lhs.start.epoch = a3->epoch;
          *(_OWORD *)&rhs.start.value = *((_OWORD *)v27 + 3);
          rhs.start.epoch = *((_QWORD *)v27 + 8);
          if (CMTimeCompare(&lhs.start, &rhs.start) >= 1)
          {
            *(_OWORD *)&time2.value = v49;
            time2.epoch = epoch;
            *(_OWORD *)&v55.value = v49;
            v55.epoch = epoch;
            *(_OWORD *)&dur.value = v49;
            dur.epoch = epoch;
            *(_OWORD *)&lhs.start.value = *(_OWORD *)&a3->value;
            lhs.start.epoch = a3->epoch;
            *(_OWORD *)&rhs.start.value = *((_OWORD *)v27 + 3);
            rhs.start.epoch = *((_QWORD *)v27 + 8);
            CMTimeSubtract(&time2, &lhs.start, &rhs.start);
            v53 = *a3;
            v29 = *((_OWORD *)v27 + 4);
            *(_OWORD *)&lhs.start.value = *((_OWORD *)v27 + 3);
            *(_OWORD *)&lhs.start.epoch = v29;
            *(_OWORD *)&lhs.duration.timescale = *((_OWORD *)v27 + 5);
            v30 = *(_OWORD *)v27;
            v31 = *((_OWORD *)v27 + 2);
            *(_OWORD *)&rhs.start.epoch = *((_OWORD *)v27 + 1);
            *(_OWORD *)&rhs.duration.timescale = v31;
            *(_OWORD *)&rhs.start.value = v30;
            CMTimeMapTimeFromRangeToRange(&dur, &v53, &lhs, &rhs);
            lhs.start = dur;
            v32 = *(_OWORD *)v27;
            rhs.start.epoch = *((_QWORD *)v27 + 2);
            *(_OWORD *)&rhs.start.value = v32;
            CMTimeSubtract(&v55, &lhs.start, &rhs.start);
            v33 = *(_OWORD *)&a3->value;
            *((_QWORD *)v27 + 8) = a3->epoch;
            *((_OWORD *)v27 + 3) = v33;
            *(_OWORD *)&rhs.start.value = *(_OWORD *)(v27 + 72);
            rhs.start.epoch = *((_QWORD *)v27 + 11);
            v53 = time2;
            CMTimeSubtract(&lhs.start, &rhs.start, &v53);
            *(_OWORD *)(v27 + 72) = *(_OWORD *)&lhs.start.value;
            *((_QWORD *)v27 + 11) = lhs.start.epoch;
            v34 = *(_OWORD *)&dur.value;
            *((_QWORD *)v27 + 2) = dur.epoch;
            *(_OWORD *)v27 = v34;
            *(_OWORD *)&rhs.start.value = *(_OWORD *)(v27 + 24);
            rhs.start.epoch = *((_QWORD *)v27 + 5);
            v53 = v55;
            CMTimeSubtract(&lhs.start, &rhs.start, &v53);
            *(_OWORD *)(v27 + 24) = *(_OWORD *)&lhs.start.value;
            *((_QWORD *)v27 + 5) = lhs.start.epoch;
          }
          lhs.start = v59;
          rhs.start = v58;
          if (CMTimeCompare(&lhs.start, &rhs.start) < 0)
          {
            memset(&time2, 0, sizeof(time2));
            v35 = &v27[108 * v24];
            lhs.start = v59;
            v36 = *(_OWORD *)(v35 - 60);
            rhs.start.epoch = *(_QWORD *)(v35 - 44);
            *(_OWORD *)&rhs.start.value = v36;
            CMTimeSubtract(&time2, &lhs.start, &rhs.start);
            memset(&v55, 0, sizeof(v55));
            dur = time2;
            v37 = *(_OWORD *)(v35 - 60);
            v38 = *(_OWORD *)(v35 - 28);
            *(_OWORD *)&lhs.start.epoch = *(_OWORD *)(v35 - 44);
            *(_OWORD *)&lhs.duration.timescale = v38;
            *(_OWORD *)&lhs.start.value = v37;
            v39 = *(_OWORD *)(v35 - 108);
            v40 = *(_OWORD *)(v35 - 76);
            *(_OWORD *)&rhs.start.epoch = *(_OWORD *)(v35 - 92);
            *(_OWORD *)&rhs.duration.timescale = v40;
            *(_OWORD *)&rhs.start.value = v39;
            CMTimeMapDurationFromRangeToRange(&v55, &dur, &lhs, &rhs);
            v41 = *(_OWORD *)&time2.value;
            *(_QWORD *)(v35 - 20) = time2.epoch;
            *(_OWORD *)(v35 - 36) = v41;
            v42 = *(_OWORD *)&v55.value;
            *(_QWORD *)(v35 - 68) = v55.epoch;
            *(_OWORD *)(v35 - 84) = v42;
          }
        }
        a5 = v51;
        if (v25 <= v28)
          goto LABEL_26;
        goto LABEL_25;
      }
    }
LABEL_29:
    v47 = FigSignalErrorAt();
    goto LABEL_27;
  }
  *(_OWORD *)&v58.value = v50;
  v58.epoch = v13;
  v25 = 1;
  v27 = (char *)malloc_type_calloc(1uLL, 0x6CuLL, 0x1060040CB727B4DuLL);
  if (!v27)
    goto LABEL_29;
LABEL_25:
  v43 = &v27[108 * v25];
  rhs.start = v58;
  time2 = *a3;
  CMTimeMaximum(&lhs.start, &rhs.start, &time2);
  v44 = *(_OWORD *)&lhs.start.value;
  *(_QWORD *)(v43 - 44) = lhs.start.epoch;
  *(_OWORD *)(v43 - 60) = v44;
  rhs.start = v59;
  v45 = *(_OWORD *)(v43 - 60);
  time2.epoch = *(_QWORD *)(v43 - 44);
  *(_OWORD *)&time2.value = v45;
  CMTimeSubtract(&lhs.start, &rhs.start, &time2);
  v46 = *(_OWORD *)&lhs.start.value;
  *(_QWORD *)(v43 - 20) = lhs.start.epoch;
  *(_OWORD *)(v43 - 36) = v46;
LABEL_26:
  v47 = 0;
  *a6 = v25;
  *a5 = v27;
  v25 = 0;
LABEL_27:
  compositionEditSegment_releaseSegmentsAndRemoveURLsFromBag(0, v25, 0);
  return v47;
}

uint64_t mutableComposition_addAssetsForURLsFromCompositionForSegments(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  const void **v12;
  const void *v13;
  const void *v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = CMBaseObjectGetDerivedStorage();
  v10 = *(_QWORD *)(DerivedStorage + 8);
  v11 = *(_QWORD *)(result + 8);
  v14 = 0;
  if (a1 != a2 && a4 >= 1)
  {
    v12 = (const void **)(a3 + 96);
    do
    {
      if ((*((_DWORD *)v12 - 21) & 0x1D) == 1)
      {
        v13 = *v12;
        if (*v12)
        {
          result = compositionSharedCache_copyAssetForAssetURLFromCache(*(_QWORD *)(v11 + 160), *v12, &v14);
          if (v14)
            compositionTable_addAssetForURL(v10, v13, v14);
        }
      }
      v12 = (const void **)((char *)v12 + 108);
      --a4;
    }
    while (a4);
  }
  return result;
}

CMTime *compositionEditSegment_adjustSegmentStartTimes(CMTime *result, uint64_t a2, CMTime *a3)
{
  uint64_t v3;
  CMTime *v4;
  __int128 v5;
  CMTimeRange v6;
  CMTime v7;

  v7 = *a3;
  if (a2 >= 1)
  {
    v3 = a2;
    v4 = result + 2;
    do
    {
      *v4 = v7;
      v5 = *(_OWORD *)&v4->epoch;
      *(_OWORD *)&v6.start.value = *(_OWORD *)&v4->value;
      *(_OWORD *)&v6.start.epoch = v5;
      *(_OWORD *)&v6.duration.timescale = *(_OWORD *)&v4[1].timescale;
      result = CMTimeRangeGetEnd(&v7, &v6);
      v4 = (CMTime *)((char *)v4 + 108);
      --v3;
    }
    while (v3);
  }
  return result;
}

void compositionTable_addAssetForURL(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 160);
  MEMORY[0x19402EEEC](*(_QWORD *)(v6 + 32));
  if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(v6 + 40), a2))
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v6 + 40), a2, a3);
    MEMORY[0x19402EF04](*(_QWORD *)(v6 + 32));
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 56));
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 64), a2, a3);
  }
  JUMPOUT(0x19402EF04);
}

uint64_t FigMetadataConverterGetClassID()
{
  MEMORY[0x19402F294](&FigMetadataConverterGetClassID_sRegisterFigMetadataConverterBaseTypeOnce, RegisterFigMetadataConverterBaseType);
  return sFigMetadataConverterClassID;
}

uint64_t RegisterFigMetadataConverterBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigMetadataConverterGetCFTypeID()
{
  MEMORY[0x19402F294](&FigMetadataConverterGetClassID_sRegisterFigMetadataConverterBaseTypeOnce, RegisterFigMetadataConverterBaseType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigMetadataCreateConverter(CFTypeRef cf1, const void *a2, const __CFDictionary *a3, int a4, _QWORD *a5)
{
  CFTypeRef v11;

  if (!a5 || !cf1 || !a2)
    return FigSignalErrorAt();
  if (CFEqual(cf1, CFSTR("com.apple.quicktime.udta"))
    || CFEqual(cf1, CFSTR("org.mp4ra"))
    || CFEqual(cf1, CFSTR("com.apple.quicktime.mdta")))
  {
    if (CFEqual(a2, CFSTR("com.apple.quicktime.udta"))
      || CFEqual(a2, CFSTR("org.mp4ra"))
      || CFEqual(a2, CFSTR("com.apple.quicktime.mdta")))
    {
      return FigMetadataConverterCreateForQuickTime(a4, cf1, a2, a3, a5);
    }
    v11 = a2;
  }
  else
  {
    if (!CFEqual(cf1, CFSTR("com.apple.itunes")))
      return FigSignalErrorAt();
    if (CFEqual(a2, CFSTR("com.apple.quicktime.udta"))
      || CFEqual(a2, CFSTR("com.apple.quicktime.mdta"))
      || CFEqual(a2, CFSTR("org.mp4ra")))
    {
      return FigMetadataConverterCreateForQuickTimeToFromiTunes(a4, cf1, a2, (uint64_t)a3, a5);
    }
    v11 = cf1;
  }
  if (CFEqual(v11, CFSTR("com.apple.itunes")))
    return FigMetadataConverterCreateForQuickTimeToFromiTunes(a4, cf1, a2, (uint64_t)a3, a5);
  return FigSignalErrorAt();
}

CFStringRef FigMetadataConverterBaseCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigMetadataConverter %p]"), a1);
}

uint64_t FigPartialSampleTableBrokerGetTypeID()
{
  if (FigPartialSampleTableBrokerGetTypeID_sRegisterFigPartialSampleTableBrokerTypeOnce != -1)
    dispatch_once_f(&FigPartialSampleTableBrokerGetTypeID_sRegisterFigPartialSampleTableBrokerTypeOnce, 0, (dispatch_function_t)registerFigPartialSampleTableBrokerType);
  return sFigPartialSampleTableBrokerID;
}

uint64_t registerFigPartialSampleTableBrokerType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigPartialSampleTableBrokerID = result;
  return result;
}

uint64_t FigPartialSampleTableBrokerCreate(const __CFAllocator *a1, _QWORD *a2)
{
  uint64_t Instance;
  _QWORD *v5;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v7;
  uint64_t v8;
  uint64_t v10;

  if (!a2)
    return FigSignalErrorAt();
  if (FigPartialSampleTableBrokerGetTypeID_sRegisterFigPartialSampleTableBrokerTypeOnce != -1)
    dispatch_once_f(&FigPartialSampleTableBrokerGetTypeID_sRegisterFigPartialSampleTableBrokerTypeOnce, 0, (dispatch_function_t)registerFigPartialSampleTableBrokerType);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v5 = (_QWORD *)Instance;
  Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  v5[3] = Mutable;
  if (Mutable
    && (v7 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]), (v5[4] = v7) != 0)
    && (v8 = FigSimpleMutexCreate(), (v5[2] = v8) != 0))
  {
    *a2 = v5;
    return 0;
  }
  else
  {
    v10 = FigSignalErrorAt();
    CFRelease(v5);
    return v10;
  }
}

const void *FigPartialSampleTableBrokerOfferNewPartialSampleTable(uint64_t a1, const void *a2)
{
  uint64_t DecodeTimeRange;
  CFIndex i;
  const __CFArray *Count;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  const void *v10;
  CFIndex j;
  const __CFArray *v12;
  uint64_t v13;
  CFMutableArrayRef *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  CMTime time2;
  CMTime time1;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v17 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  v18 = *MEMORY[0x1E0CA2E40];
  v24 = *MEMORY[0x1E0CA2E40];
  v25 = v17;
  v16 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
  v26 = v16;
  DecodeTimeRange = FigPartialSampleTableGetDecodeTimeRange((uint64_t)a2, &v24, 0);
  if ((_DWORD)DecodeTimeRange)
    return (const void *)DecodeTimeRange;
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
  for (i = 0; ; ++i)
  {
    Count = *(const __CFArray **)(a1 + 24);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (i >= (uint64_t)Count)
      break;
    CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), i);
    v7 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v7)
    {
      v8 = (const void *)v7;
      v21 = v18;
      v22 = v17;
      v23 = v16;
      if ((const void *)v7 == a2)
      {
        v10 = (const void *)FigSignalErrorAt();
        v8 = a2;
        goto LABEL_16;
      }
      v9 = FigPartialSampleTableGetDecodeTimeRange(v7, &v21, 0);
      if ((_DWORD)v9)
      {
        v10 = (const void *)v9;
        goto LABEL_16;
      }
      *(_OWORD *)&time1.value = v21;
      time1.epoch = v22;
      *(_OWORD *)&time2.value = v24;
      time2.epoch = v25;
      if (CMTimeCompare(&time1, &time2) > 0)
        goto LABEL_14;
      CFRelease(v8);
    }
    else
    {
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 24), i--);
    }
  }
  v8 = 0;
LABEL_14:
  v10 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
  CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a1 + 24), i, v10);
  if (v10)
  {
    CFRelease(v10);
    v10 = 0;
  }
LABEL_16:
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  if (v8)
    CFRelease(v8);
  if (!(_DWORD)v10)
  {
    v24 = v18;
    v25 = v17;
    v26 = v16;
    v10 = (const void *)FigPartialSampleTableGetDecodeTimeRange((uint64_t)a2, &v24, 0);
    if (!(_DWORD)v10)
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
      for (j = 0; ; ++j)
      {
        v12 = *(const __CFArray **)(a1 + 32);
        if (v12)
          v12 = (const __CFArray *)CFArrayGetCount(v12);
        if (j >= (uint64_t)v12)
          break;
        CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), j);
        v13 = FigCFWeakReferenceHolderCopyReferencedObject();
        if (v13)
        {
          v14 = (CFMutableArrayRef *)v13;
          v21 = v24;
          v22 = v25;
          v23 = v26;
          if (pstBroker_tableTimeRangeIsRelevantToInterestToken(&v21, v13))
            CFArrayAppendValue(v14[9], a2);
          CFRelease(v14);
        }
        else
        {
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 32), j--);
        }
      }
      MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
    }
  }
  return v10;
}

uint64_t FigPartialSampleTableBrokerFindAndRetainPartialSampleTableCoveringDecodeTime(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  __int128 v3;
  CFIndex i;
  const __CFArray *Count;
  uint64_t v9;
  const void *v10;
  uint64_t DecodeTimeRange;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  CMTime v16;
  CMTime time1;
  CMTimeRange otherRange;
  CMTimeRange range;
  CMTime time2;
  CMTimeRange v21;

  v3 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  *(_OWORD *)&v21.start.value = *MEMORY[0x1E0CA2E40];
  *(_OWORD *)&v21.start.epoch = v3;
  *(_OWORD *)&v21.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
  if ((*(_DWORD *)(a2 + 12) & 0x1D) != 1 || (*(_DWORD *)(a2 + 36) & 0x1D) != 1 || !a3)
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
  for (i = 0; ; ++i)
  {
    Count = *(const __CFArray **)(a1 + 24);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (i >= (uint64_t)Count)
    {
      v10 = 0;
LABEL_17:
      *a3 = v10;
      MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
      return 0;
    }
    CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), i);
    v9 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (!v9)
    {
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 24), i--);
      continue;
    }
    v10 = (const void *)v9;
    DecodeTimeRange = FigPartialSampleTableGetDecodeTimeRange(v9, &v21, 0);
    if ((_DWORD)DecodeTimeRange)
      break;
    v12 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)&range.start.value = *(_OWORD *)a2;
    *(_OWORD *)&range.start.epoch = v12;
    *(_OWORD *)&range.duration.timescale = *(_OWORD *)(a2 + 32);
    CMTimeRangeGetEnd(&time2, &range);
    *(_OWORD *)&range.start.value = *(_OWORD *)&v21.start.value;
    range.start.epoch = v21.start.epoch;
    if (CMTimeCompare(&range.start, &time2) > 0)
      break;
    range = v21;
    v13 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)&otherRange.start.value = *(_OWORD *)a2;
    *(_OWORD *)&otherRange.start.epoch = v13;
    *(_OWORD *)&otherRange.duration.timescale = *(_OWORD *)(a2 + 32);
    if (CMTimeRangeContainsTimeRange(&range, &otherRange))
    {
      range = v21;
      CMTimeRangeGetEnd(&time1, &range);
      v14 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)&range.start.value = *(_OWORD *)a2;
      *(_OWORD *)&range.start.epoch = v14;
      *(_OWORD *)&range.duration.timescale = *(_OWORD *)(a2 + 32);
      CMTimeRangeGetEnd(&v16, &range);
      if (CMTimeCompare(&time1, &v16) > 0)
        goto LABEL_17;
    }
    CFRelease(v10);
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  CFRelease(v10);
  return DecodeTimeRange;
}

uint64_t FigPartialSampleTableBrokerCopyInterestTokenForAdjacentTables(uint64_t a1, uint64_t a2, __CFArray **a3)
{
  const __CFAllocator *v6;
  __CFArray *Mutable;
  __int128 v8;
  uint64_t DecodeTimeRange;
  const __CFAllocator *v10;
  const void *v11;
  uint64_t v12;
  const __CFAllocator *v13;
  const void *v14;
  uint64_t v15;
  __int128 v17;
  CMTimeEpoch v18;
  CMTimeRange v19;
  CMTime v20;
  __int128 v21;
  CMTimeEpoch epoch;
  CMTimeRange v23;
  const void *v24;

  v24 = 0;
  v6 = CFGetAllocator((CFTypeRef)a1);
  Mutable = CFArrayCreateMutable(v6, 2, MEMORY[0x1E0C9B378]);
  v8 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  *(_OWORD *)&v23.start.value = *MEMORY[0x1E0CA2E40];
  *(_OWORD *)&v23.start.epoch = v8;
  *(_OWORD *)&v23.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
  v21 = *MEMORY[0x1E0CA2E18];
  epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  if (!a3)
  {
    DecodeTimeRange = FigSignalErrorAt();
LABEL_24:
    v15 = DecodeTimeRange;
    goto LABEL_17;
  }
  DecodeTimeRange = FigPartialSampleTableGetDecodeTimeRange(a2, &v23, (uint64_t)&v21);
  if ((_DWORD)DecodeTimeRange)
    goto LABEL_24;
  CMTimeMake(&v19.start, 2, 1);
  v21 = *(_OWORD *)&v19.start.value;
  epoch = v19.start.epoch;
  v10 = CFGetAllocator((CFTypeRef)a1);
  v19 = v23;
  CMTimeRangeGetEnd(&v20, &v19);
  *(_OWORD *)&v19.start.value = v21;
  v19.start.epoch = epoch;
  DecodeTimeRange = FigPartialSampleTableBrokerInterestTokenCreate(v10, (__int128 *)&v20.value, (__int128 *)&v19.start.value, 1, &v24);
  if ((_DWORD)DecodeTimeRange)
    goto LABEL_24;
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
  v11 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), v11);
  if (v11)
    CFRelease(v11);
  v12 = pstBroker_associateRelevantTablesWithNewInterestToken(a1, (uint64_t)v24);
  if ((_DWORD)v12)
    goto LABEL_22;
  CFArrayAppendValue(Mutable, v24);
  if (v24)
  {
    CFRelease(v24);
    v24 = 0;
  }
  v13 = CFGetAllocator((CFTypeRef)a1);
  *(_OWORD *)&v19.start.value = *(_OWORD *)&v23.start.value;
  v19.start.epoch = v23.start.epoch;
  v17 = v21;
  v18 = epoch;
  v12 = FigPartialSampleTableBrokerInterestTokenCreate(v13, (__int128 *)&v19.start.value, &v17, -1, &v24);
  if ((_DWORD)v12)
    goto LABEL_22;
  v14 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), v14);
  if (v14)
    CFRelease(v14);
  v12 = pstBroker_associateRelevantTablesWithNewInterestToken(a1, (uint64_t)v24);
  if ((_DWORD)v12)
  {
LABEL_22:
    v15 = v12;
  }
  else
  {
    CFArrayAppendValue(Mutable, v24);
    if (v24)
    {
      CFRelease(v24);
      v24 = 0;
    }
    v15 = 0;
    *a3 = Mutable;
    Mutable = 0;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
LABEL_17:
  if (v24)
    CFRelease(v24);
  if (Mutable)
    CFRelease(Mutable);
  return v15;
}

uint64_t FigPartialSampleTableBrokerInterestTokenCreate(const __CFAllocator *a1, __int128 *a2, __int128 *a3, char a4, _QWORD *a5)
{
  uint64_t Instance;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  CFMutableArrayRef Mutable;
  uint64_t v16;

  if (!a5)
    return FigSignalErrorAt();
  if (FigPartialSampleTableBrokerInterestTokenGetTypeID_sRegisterFigPartialSampleTableBrokerInterestTokenTypeOnce != -1)
    dispatch_once_f(&FigPartialSampleTableBrokerInterestTokenGetTypeID_sRegisterFigPartialSampleTableBrokerInterestTokenTypeOnce, 0, (dispatch_function_t)registerFigPartialSampleTableBrokerInterestTokenType);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v11 = (_QWORD *)Instance;
  v12 = *a2;
  *(_QWORD *)(Instance + 32) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(Instance + 16) = v12;
  v13 = *a3;
  *(_QWORD *)(Instance + 56) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(Instance + 40) = v13;
  *(_BYTE *)(Instance + 64) = a4;
  Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  v11[9] = Mutable;
  if (Mutable)
  {
    *a5 = v11;
    return 0;
  }
  else
  {
    v16 = FigSignalErrorAt();
    CFRelease(v11);
    return v16;
  }
}

uint64_t pstBroker_associateRelevantTablesWithNewInterestToken(uint64_t a1, uint64_t a2)
{
  CFIndex v4;
  __int128 *v5;
  const __CFArray *Count;
  uint64_t v7;
  const void *v8;
  __int128 v9;
  uint64_t DecodeTimeRange;
  uint64_t v11;
  __int128 v13[3];
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v4 = 0;
  v5 = (__int128 *)MEMORY[0x1E0CA2E40];
  while (1)
  {
    Count = *(const __CFArray **)(a1 + 24);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (v4 >= (uint64_t)Count)
      return 0;
    CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v4);
    v7 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (!v7)
    {
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 24), v4--);
      goto LABEL_11;
    }
    v8 = (const void *)v7;
    v9 = v5[1];
    v14 = *v5;
    v15 = v9;
    v16 = v5[2];
    DecodeTimeRange = FigPartialSampleTableGetDecodeTimeRange(v7, &v14, 0);
    if ((_DWORD)DecodeTimeRange)
      break;
    v13[0] = v14;
    v13[1] = v15;
    v13[2] = v16;
    if (pstBroker_tableTimeRangeIsRelevantToInterestToken(v13, a2))
      CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 72), v8);
    CFRelease(v8);
LABEL_11:
    ++v4;
  }
  v11 = DecodeTimeRange;
  CFRelease(v8);
  return v11;
}

_QWORD *FigPartialSampleTableBroker_Init(_QWORD *result)
{
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  return result;
}

uint64_t FigPartialSampleTableBroker_Finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  uint64_t result;

  v2 = (const void *)a1[3];
  if (v2)
  {
    CFRelease(v2);
    a1[3] = 0;
  }
  v3 = (const void *)a1[4];
  if (v3)
  {
    CFRelease(v3);
    a1[4] = 0;
  }
  result = FigSimpleMutexDestroy();
  a1[2] = 0;
  return result;
}

__CFString *FigPartialSampleTableBroker_CopyDescription(const void *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigPartialSampleTableBroker %p>"), a1);
  return Mutable;
}

uint64_t pstBroker_tableTimeRangeIsRelevantToInterestToken(__int128 *a1, uint64_t a2)
{
  CMTimeEpoch v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t result;
  _OWORD *v10;
  int v11;
  __int128 v12;
  __int128 v13;
  CMTime rhs;
  CMTime v15;
  CMTime time1;
  CMTimeRange otherRange;
  CMTimeRange range;
  CMTimeRange v19;
  CMTime end;
  CMTime start;
  CMTimeRange v22;

  if (*(char *)(a2 + 64) < 0)
  {
    start = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    *(_OWORD *)&end.value = *(_OWORD *)(a2 + 16);
    v4 = *(_QWORD *)(a2 + 32);
  }
  else
  {
    start = *(CMTime *)(a2 + 16);
    *(_OWORD *)&end.value = *MEMORY[0x1E0CA2E30];
    v4 = *(_QWORD *)(MEMORY[0x1E0CA2E30] + 16);
  }
  end.epoch = v4;
  memset(&v22, 0, sizeof(v22));
  CMTimeRangeFromTimeToTime(&v22, &start, &end);
  v5 = *a1;
  v6 = a1[2];
  *(_OWORD *)&range.start.epoch = a1[1];
  *(_OWORD *)&range.duration.timescale = v6;
  memset(&v19, 0, sizeof(v19));
  otherRange = v22;
  *(_OWORD *)&range.start.value = v5;
  CMTimeRangeGetIntersection(&v19, &range, &otherRange);
  v7 = a1[1];
  *(_OWORD *)&range.start.value = *a1;
  v8 = a1[2];
  *(_OWORD *)&range.start.epoch = v7;
  *(_OWORD *)&range.duration.timescale = v8;
  *(_OWORD *)&otherRange.start.value = *(_OWORD *)(a2 + 16);
  otherRange.start.epoch = *(_QWORD *)(a2 + 32);
  if (!CMTimeRangeContainsTime(&range, &otherRange.start))
  {
LABEL_10:
    v10 = (_OWORD *)(a2 + 16);
    v11 = *(char *)(a2 + 64);
    if (v11 < 1)
      goto LABEL_18;
    if ((v19.start.flags & 1) != 0
      && (v19.duration.flags & 1) != 0
      && !v19.duration.epoch
      && (v19.duration.value & 0x8000000000000000) == 0)
    {
      range.start = v19.duration;
      *(_OWORD *)&otherRange.start.value = *MEMORY[0x1E0CA2E68];
      otherRange.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
      if (!CMTimeCompare(&range.start, &otherRange.start))
        goto LABEL_17;
    }
    *(_OWORD *)&range.start.value = *a1;
    range.start.epoch = *((_QWORD *)a1 + 2);
    *(_OWORD *)&otherRange.start.value = *v10;
    otherRange.start.epoch = *(_QWORD *)(a2 + 32);
    CMTimeSubtract(&time1, &range.start, &otherRange.start);
    *(_OWORD *)&range.start.value = *(_OWORD *)(a2 + 40);
    range.start.epoch = *(_QWORD *)(a2 + 56);
    if (CMTimeCompare(&time1, &range.start) >= 1)
    {
LABEL_17:
      LOBYTE(v11) = *(_BYTE *)(a2 + 64);
LABEL_18:
      if ((v11 & 0x80) == 0)
        return 0;
      if ((v19.start.flags & 1) != 0
        && (v19.duration.flags & 1) != 0
        && !v19.duration.epoch
        && (v19.duration.value & 0x8000000000000000) == 0)
      {
        range.start = v19.duration;
        *(_OWORD *)&otherRange.start.value = *MEMORY[0x1E0CA2E68];
        otherRange.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
        if (!CMTimeCompare(&range.start, &otherRange.start))
          return 0;
      }
      v12 = a1[1];
      *(_OWORD *)&range.start.value = *a1;
      v13 = a1[2];
      *(_OWORD *)&range.start.epoch = v12;
      *(_OWORD *)&range.duration.timescale = v13;
      CMTimeRangeGetEnd(&rhs, &range);
      *(_OWORD *)&range.start.value = *v10;
      range.start.epoch = *(_QWORD *)(a2 + 32);
      CMTimeSubtract(&v15, &range.start, &rhs);
      *(_OWORD *)&range.start.value = *(_OWORD *)(a2 + 40);
      range.start.epoch = *(_QWORD *)(a2 + 56);
      if (CMTimeCompare(&v15, &range.start) >= 1)
        return 0;
    }
    return 1;
  }
  if ((v19.start.flags & 1) == 0)
    return 1;
  result = 1;
  if ((v19.duration.flags & 1) != 0 && !v19.duration.epoch && (v19.duration.value & 0x8000000000000000) == 0)
  {
    range.start = v19.duration;
    *(_OWORD *)&otherRange.start.value = *MEMORY[0x1E0CA2E68];
    otherRange.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    if (CMTimeCompare(&range.start, &otherRange.start))
      return 1;
    goto LABEL_10;
  }
  return result;
}

uint64_t registerFigPartialSampleTableBrokerInterestTokenType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigPartialSampleTableBrokerInterestTokenID = result;
  return result;
}

double FigPartialSampleTableBrokerInterestToken_Init(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

void FigPartialSampleTableBrokerInterestToken_Finalize(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 72);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 72) = 0;
  }
}

__CFString *FigPartialSampleTableBrokerInterestToken_CopyDescription(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  Float64 Seconds;
  double v5;
  char v6;
  const __CFArray *Count;
  CMTime time;

  v2 = CFGetAllocator((CFTypeRef)a1);
  Mutable = CFStringCreateMutable(v2, 0);
  time = *(CMTime *)(a1 + 16);
  Seconds = CMTimeGetSeconds(&time);
  time = *(CMTime *)(a1 + 40);
  v5 = CMTimeGetSeconds(&time);
  v6 = *(_BYTE *)(a1 + 64);
  Count = *(const __CFArray **)(a1 + 72);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigPartialSampleTableBrokerInterestToken %p - %.3f[%+.3f] - %ld candidates>"), a1, *(_QWORD *)&Seconds, v5 * (double)v6, Count);
  return Mutable;
}

uint64_t FigMetadataConverterCreateForQuickTime(int a1, CFTypeRef cf1, const void *a3, const __CFDictionary *a4, _QWORD *a5)
{
  uint64_t v9;
  _QWORD *DerivedStorage;
  const void *Value;

  if (!a5
    || !cf1
    || !a3
    || !CFEqual(cf1, CFSTR("com.apple.quicktime.udta"))
    && !CFEqual(cf1, CFSTR("org.mp4ra"))
    && !CFEqual(cf1, CFSTR("com.apple.quicktime.mdta"))
    || !CFEqual(a3, CFSTR("com.apple.quicktime.udta"))
    && !CFEqual(a3, CFSTR("org.mp4ra"))
    && !CFEqual(a3, CFSTR("com.apple.quicktime.mdta")))
  {
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, CFSTR("com.apple.quicktime.udta")) && CFEqual(a3, CFSTR("com.apple.quicktime.mdta")))
    return 4294954814;
  FigMetadataConverterGetClassID();
  v9 = CMDerivedObjectCreate();
  if (!(_DWORD)v9)
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    *DerivedStorage = CFRetain(cf1);
    DerivedStorage[1] = CFRetain(a3);
    if (a4)
    {
      Value = CFDictionaryGetValue(a4, CFSTR("DestFileFormat"));
      if (Value)
        Value = CFRetain(Value);
      DerivedStorage[2] = Value;
    }
    v9 = 0;
    *a5 = 0;
  }
  return v9;
}

void qtiso_FigMetadataConverterFinalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 16);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
}

__CFString *qtiso_FigMetadataConverterCopyDebugDescription()
{
  __CFString *Mutable;
  uint64_t DerivedStorage;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFStringAppendFormat(Mutable, 0, CFSTR(" FigQuickTimeISOMetadataConverter %p\n"), DerivedStorage);
  if (*(_QWORD *)(DerivedStorage + 8))
    CFStringAppendFormat(Mutable, 0, CFSTR("  Destination Format = %@\n"), *(_QWORD *)(DerivedStorage + 8));
  return Mutable;
}

uint64_t qtiso_FigMetadataConverterCreateConvertedItem(const void *a1, const __CFDictionary *a2, const __CFAllocator *a3, __CFDictionary **a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  const __CFString *v10;
  const __CFString *v11;
  CFTypeRef *v12;
  uint64_t v13;
  CFTypeID TypeID;
  const void *v15;
  uint64_t v16;
  __CFDictionary **v17;
  uint64_t v18;
  const __CFDictionary *OSTypeKeyToStringKeyMapping;
  CFTypeID v20;
  const void *v21;
  const __CFAllocator *v22;
  uint64_t v23;
  const __CFDictionary *v24;
  CFTypeID v25;
  CFTypeID v26;
  uint64_t *v27;
  uint64_t v28;
  CFTypeID v29;
  const void *v30;
  const __CFAllocator *v31;
  uint64_t v32;
  const void *v33;
  const void *v34;
  int v35;
  const void *v36;
  const void *v37;
  CFIndex Count;
  __CFDictionary *MutableCopy;
  char v40;
  const __CFString *v41;
  const void *v42;
  const void *v43;
  CFTypeID v44;
  const __CFAllocator *v45;
  CFTypeID v46;
  const __CFAllocator *v47;
  CFStringRef v48;
  CFTypeRef v49;
  CFTypeID v50;
  CFNumberRef v51;
  const __CFString *v52;
  CFTypeID v53;
  CFTypeID v54;
  CFLocaleRef v55;
  CFLocaleRef v56;
  __CFString **v57;
  int v58;
  const void *v60;
  const void *v61;
  CFTypeID v62;
  CFTypeID v63;
  const void *v64;
  CFNumberRef v65;
  void *value;
  __CFDictionary **v67;
  uint64_t v68;
  CFMutableDictionaryRef theDict;
  __CFDictionary *theDicta;
  float valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v9 = DerivedStorage;
    v10 = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("key"));
    if (v10)
    {
      v11 = v10;
      v12 = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
      if (CFEqual(*v12, CFSTR("com.apple.quicktime.mdta")))
      {
        v13 = CMBaseObjectGetDerivedStorage();
        TypeID = CFStringGetTypeID();
        if (TypeID == CFGetTypeID(v11))
        {
          if (CFEqual(*(CFTypeRef *)(v13 + 8), CFSTR("com.apple.quicktime.mdta")))
          {
            CFRetain(v11);
            v15 = v11;
LABEL_7:
            CFRetain(v15);
            goto LABEL_61;
          }
          if (!CFEqual(*(CFTypeRef *)(v13 + 8), CFSTR("com.apple.quicktime.udta"))
            && CFEqual(*(CFTypeRef *)(v13 + 8), CFSTR("org.mp4ra"))
            && (v34 = *(const void **)(v13 + 16)) != 0
            && (CFEqual(v34, CFSTR("iso.mp4"))
             || (v37 = *(const void **)(v13 + 16)) != 0 && CFEqual(v37, CFSTR("iso.3gp"))))
          {
            MEMORY[0x19402F294](&gCreateKeyArrayOnce, qtiso_setUpKeyMapping);
            v15 = CFDictionaryGetValue((CFDictionaryRef)gQTMetadataKeyTo3GPKeyDict, v11);
            CFRetain(v11);
            if (v15)
              goto LABEL_7;
          }
          else
          {
            CFRetain(v11);
          }
          CFRelease(v11);
        }
        return 4294954813;
      }
      v16 = v9;
      v17 = a4;
      if (CFEqual(*v12, CFSTR("org.mp4ra")))
      {
        theDict = a3;
        valuePtr = 0.0;
        v18 = CMBaseObjectGetDerivedStorage();
        OSTypeKeyToStringKeyMapping = (const __CFDictionary *)FigISOUserDataGetOSTypeKeyToStringKeyMapping();
        v20 = CFGetTypeID(v11);
        if (v20 == CFNumberGetTypeID())
        {
          CFNumberGetValue((CFNumberRef)v11, kCFNumberSInt32Type, &valuePtr);
          v21 = CFDictionaryGetValue(OSTypeKeyToStringKeyMapping, (const void *)LODWORD(valuePtr));
          a4 = v17;
          a3 = theDict;
          if (!v21 || (v11 = (const __CFString *)CFRetain(v21)) == 0)
          {
            valuePtr = COERCE_FLOAT(bswap32(LODWORD(valuePtr)));
            v22 = CFGetAllocator(a1);
            v11 = CFStringCreateWithFormat(v22, 0, CFSTR("%c%c%c%c"), SLOBYTE(valuePtr), SBYTE1(valuePtr), SBYTE2(valuePtr), SHIBYTE(valuePtr));
            if (!v11)
              goto LABEL_59;
          }
LABEL_19:
          v15 = v11;
          if (CFEqual(*(CFTypeRef *)(v18 + 8), CFSTR("org.mp4ra")))
            goto LABEL_50;
          if (CFEqual(*(CFTypeRef *)(v18 + 8), CFSTR("com.apple.quicktime.udta")))
          {
            v27 = &g3GPKeyToUserDataKeyDict;
            goto LABEL_47;
          }
          if (CFEqual(*(CFTypeRef *)(v18 + 8), CFSTR("com.apple.quicktime.mdta")))
          {
            v27 = &g3GPKeyToQTMetadataKeyDict;
LABEL_47:
            MEMORY[0x19402F294](&gCreateKeyArrayOnce, qtiso_setUpKeyMapping);
            v15 = CFDictionaryGetValue((CFDictionaryRef)*v27, v11);
            a3 = theDict;
            if (!v15)
              goto LABEL_60;
            goto LABEL_50;
          }
LABEL_59:
          v15 = 0;
          goto LABEL_60;
        }
        v26 = CFGetTypeID(v11);
        if (v26 == CFStringGetTypeID())
        {
          v11 = (const __CFString *)CFRetain(v11);
          a4 = v17;
          a3 = theDict;
          if (!v11)
            goto LABEL_59;
          goto LABEL_19;
        }
        v11 = 0;
      }
      else
      {
        if (!CFEqual(*v12, CFSTR("com.apple.quicktime.udta")))
          return 4294954813;
        theDict = a3;
        valuePtr = 0.0;
        v23 = CMBaseObjectGetDerivedStorage();
        v24 = (const __CFDictionary *)FigUserDataGetOSTypeKeyToStringKeyMapping();
        v25 = CFGetTypeID(v11);
        if (v25 == CFNumberGetTypeID())
        {
          CFNumberGetValue((CFNumberRef)v11, kCFNumberSInt32Type, &valuePtr);
        }
        else
        {
          v29 = CFGetTypeID(v11);
          if (v29 != CFStringGetTypeID()
            || !FigUserDataStringKeyToOSTypeKey(v11, (unsigned int *)&valuePtr))
          {
            v15 = 0;
            v11 = 0;
            goto LABEL_44;
          }
        }
        v30 = CFDictionaryGetValue(v24, (const void *)LODWORD(valuePtr));
        if (v30 && (v11 = (const __CFString *)CFRetain(v30)) != 0
          || (valuePtr = COERCE_FLOAT(bswap32(LODWORD(valuePtr))),
              v31 = CFGetAllocator(a1),
              (v11 = CFStringCreateWithFormat(v31, 0, CFSTR("%c%c%c%c"), SLOBYTE(valuePtr), SBYTE1(valuePtr), SBYTE2(valuePtr), SHIBYTE(valuePtr))) != 0))
        {
          v32 = v23;
          if (CFEqual(*(CFTypeRef *)(v23 + 8), CFSTR("org.mp4ra")))
          {
            v33 = *(const void **)(v23 + 16);
            a3 = theDict;
            if (!v33)
            {
              v15 = 0;
              v9 = v16;
              goto LABEL_60;
            }
            v9 = v16;
            if (!CFEqual(v33, CFSTR("iso.mp4")))
            {
              v36 = *(const void **)(v32 + 16);
              if (!v36 || !CFEqual(v36, CFSTR("iso.3gp")))
                goto LABEL_59;
            }
            MEMORY[0x19402F294](&gCreateKeyArrayOnce, qtiso_setUpKeyMapping);
            v15 = CFDictionaryGetValue((CFDictionaryRef)gUserDataKeyTo3GPKeyDict, v11);
            if (!v15)
            {
LABEL_60:
              if (!v15)
              {
                MutableCopy = 0;
                v28 = 4294954813;
                v40 = 1;
                goto LABEL_96;
              }
LABEL_61:
              if (a4)
              {
                if (CFEqual(v11, v15))
                {
                  Count = CFDictionaryGetCount(a2);
                  MutableCopy = CFDictionaryCreateMutableCopy(a3, Count, a2);
LABEL_90:
                  if (CFEqual(*(CFTypeRef *)(v9 + 8), CFSTR("com.apple.quicktime.mdta")))
                  {
                    v57 = kFigQuickTimeMetadataKeyspace;
                  }
                  else
                  {
                    v58 = CFEqual(*(CFTypeRef *)(v9 + 8), CFSTR("com.apple.quicktime.udta"));
                    v57 = kFigUserDataKeyspace;
                    if (!v58)
                      v57 = kFigISOUserDataKeyspace;
                  }
                  CFDictionarySetValue(MutableCopy, CFSTR("keyspace"), *v57);
                  v40 = 0;
                  v28 = 0;
                  *a4 = MutableCopy;
                  goto LABEL_95;
                }
                v67 = a4;
                v68 = v9;
                theDicta = CFDictionaryCreateMutable(a3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                if (theDicta)
                {
                  v41 = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("value"));
                  v42 = CFDictionaryGetValue(a2, CFSTR("locale"));
                  v43 = CFDictionaryGetValue(a2, CFSTR("languageCode"));
                  if (CFEqual(v15, CFSTR("yrrc")))
                  {
                    value = (void *)v15;
                    v44 = CFGetTypeID(v41);
                    if (v44 == CFNumberGetTypeID())
                    {
LABEL_83:
                      MutableCopy = theDicta;
                      CFDictionaryAddValue(theDicta, CFSTR("key"), v15);
                      CFDictionaryAddValue(theDicta, CFSTR("value"), v41);
                      a4 = v67;
                      goto LABEL_90;
                    }
                    v50 = CFGetTypeID(v41);
                    MutableCopy = theDicta;
                    if (v50 == CFStringGetTypeID())
                    {
                      valuePtr = COERCE_FLOAT(CFStringGetIntValue(v41));
                      if ((LODWORD(valuePtr) & 0x80000000) != 0)
                      {
                        v28 = 4294954813;
                      }
                      else
                      {
                        v51 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
                        if (v51)
                        {
                          v49 = v51;
                          CFDictionaryAddValue(theDicta, CFSTR("key"), v15);
                          CFDictionaryAddValue(theDicta, CFSTR("value"), v49);
LABEL_89:
                          CFRelease(v49);
                          goto LABEL_90;
                        }
                        v28 = FigSignalErrorAt();
                      }
                      v40 = 0;
                      goto LABEL_129;
                    }
LABEL_103:
                    v40 = 0;
                    v28 = 4294954813;
                    goto LABEL_96;
                  }
                  if (CFEqual(v15, CFSTR("com.apple.quicktime.year")))
                  {
                    v45 = a3;
                    v46 = CFGetTypeID(v41);
                    if (v46 == CFNumberGetTypeID())
                    {
                      LOWORD(valuePtr) = 0;
                      MutableCopy = theDicta;
                      if (CFNumberGetValue((CFNumberRef)v41, kCFNumberSInt16Type, &valuePtr))
                      {
                        v47 = v45;
                        v48 = CFStringCreateWithFormat(v45, 0, CFSTR("%d"), SLOWORD(valuePtr));
                        if (v48)
                        {
                          v49 = v48;
                          goto LABEL_86;
                        }
                        v28 = FigSignalErrorAt();
                      }
                      else
                      {
                        v28 = 4294954813;
                      }
                      v40 = 0;
                      goto LABEL_96;
                    }
                    v54 = CFGetTypeID(v41);
                    MutableCopy = theDicta;
                    if (v54 != CFStringGetTypeID())
                      goto LABEL_103;
                    v49 = CFRetain(v41);
                    v47 = v45;
LABEL_86:
                    v9 = v68;
                    CFDictionaryAddValue(MutableCopy, CFSTR("key"), v15);
                    CFDictionaryAddValue(MutableCopy, CFSTR("value"), v49);
                    v55 = CFLocaleCreate(v47, CFSTR("en"));
                    if (v55)
                    {
                      v56 = v55;
                      CFDictionaryAddValue(MutableCopy, CFSTR("locale"), v55);
                      CFRelease(v56);
                    }
                    if (!v49)
                      goto LABEL_90;
                    goto LABEL_89;
                  }
                  v52 = v41;
                  if (CFEqual(v15, CFSTR("com.apple.quicktime.rating.user")) || CFEqual(v15, CFSTR("urat")))
                  {
                    valuePtr = 0.0;
                    v53 = CFGetTypeID(v41);
                    if (v53 == CFNumberGetTypeID())
                    {
                      CFNumberGetValue((CFNumberRef)v41, kCFNumberFloat32Type, &valuePtr);
                      if (valuePtr >= 0.0 && valuePtr <= 5.0)
                        goto LABEL_83;
                    }
                    v40 = 0;
                    v28 = 4294954813;
LABEL_130:
                    MutableCopy = theDicta;
                    goto LABEL_96;
                  }
                  value = (void *)v15;
                  if (CFEqual(v15, CFSTR("com.apple.quicktime.artwork")) || CFEqual(v15, CFSTR("thmb")))
                  {
                    v60 = CFDictionaryGetValue(a2, CFSTR("dataType"));
                    v61 = CFDictionaryGetValue(a2, CFSTR("dataTypeNamespace"));
                    v62 = CFGetTypeID(v52);
                    v40 = 0;
                    v28 = 4294954813;
                    MutableCopy = theDicta;
                    if (v62 != CFDataGetTypeID() || !v60)
                      goto LABEL_96;
                    CFDictionaryAddValue(theDicta, CFSTR("dataType"), v60);
                    if (v61)
                      CFDictionaryAddValue(theDicta, CFSTR("dataTypeNamespace"), v61);
                    CFDictionaryAddValue(theDicta, CFSTR("key"), v15);
                    CFDictionaryAddValue(theDicta, CFSTR("value"), v52);
                    a4 = v67;
                    v9 = v68;
                    goto LABEL_90;
                  }
                  v63 = CFGetTypeID(v41);
                  if (v63 != CFStringGetTypeID())
                  {
                    v40 = 0;
                    v28 = 4294954813;
LABEL_129:
                    v15 = value;
                    goto LABEL_130;
                  }
                  CFDictionaryAddValue(theDicta, CFSTR("key"), v15);
                  CFDictionaryAddValue(theDicta, CFSTR("value"), v41);
                  if (v42)
                  {
                    CFDictionaryAddValue(theDicta, CFSTR("locale"), v42);
                    a4 = v67;
                    v64 = v43;
                    if (!v43)
                    {
LABEL_124:
                      MutableCopy = theDicta;
                      goto LABEL_90;
                    }
                  }
                  else
                  {
                    a4 = v67;
                    v64 = v43;
                    if (!v43)
                    {
                      LOWORD(valuePtr) = FigMetadataGetPackedISO639_2T(CFSTR("und"));
                      v65 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt16Type, &valuePtr);
                      CFDictionaryAddValue(theDicta, CFSTR("languageCode"), v65);
                      if (v65)
                        CFRelease(v65);
                      a4 = v67;
                      goto LABEL_124;
                    }
                  }
                  MutableCopy = theDicta;
                  CFDictionaryAddValue(theDicta, CFSTR("languageCode"), v64);
                  goto LABEL_90;
                }
                v28 = FigSignalErrorAt();
                v40 = 0;
              }
              else
              {
                v40 = 0;
                v28 = 0;
              }
LABEL_95:
              MutableCopy = 0;
LABEL_96:
              if (v11)
                CFRelease(v11);
              if ((v40 & 1) == 0)
                CFRelease(v15);
              if (MutableCopy)
                CFRelease(MutableCopy);
              return v28;
            }
LABEL_50:
            CFRetain(v15);
            goto LABEL_60;
          }
          v35 = CFEqual(*(CFTypeRef *)(v23 + 8), CFSTR("com.apple.quicktime.udta"));
          v15 = v11;
          v9 = v16;
          a3 = theDict;
          if (v35)
            goto LABEL_50;
          CFEqual(*(CFTypeRef *)(v32 + 8), CFSTR("com.apple.quicktime.mdta"));
          goto LABEL_59;
        }
      }
      v15 = 0;
LABEL_44:
      a4 = v17;
      v9 = v16;
      a3 = theDict;
      goto LABEL_60;
    }
  }
  return FigSignalErrorAt();
}

CFDictionaryRef qtiso_setUpKeyMapping()
{
  const __CFAllocator *v0;
  const CFDictionaryKeyCallBacks *v1;
  const CFDictionaryValueCallBacks *v2;
  const CFDictionaryKeyCallBacks *v3;
  const CFDictionaryValueCallBacks *v4;
  CFDictionaryRef result;
  const __CFAllocator *allocator;
  void *v7[2];
  void *v8[2];
  void *values[2];
  void *keys[2];
  void *v11;
  const __CFString *v12;
  const __CFString *v13;
  const __CFString *v14;
  const __CFString *v15;
  const __CFString *v16;
  const __CFString *v17;
  const __CFString *v18;
  const __CFString *v19;
  const __CFString *v20;
  const __CFString *v21;
  const __CFString *v22;
  void *v23;
  const __CFString *v24;
  const __CFString *v25;
  const __CFString *v26;
  const __CFString *v27;
  const __CFString *v28;
  const __CFString *v29;
  const __CFString *v30;
  const __CFString *v31;
  const __CFString *v32;
  const __CFString *v33;
  const __CFString *v34;
  void *v35;
  const __CFString *v36;
  const __CFString *v37;
  const __CFString *v38;
  const __CFString *v39;
  const __CFString *v40;
  const __CFString *v41;
  const __CFString *v42;
  const __CFString *v43;
  const __CFString *v44;
  const __CFString *v45;
  const __CFString *v46;
  const __CFString *v47;
  const __CFString *v48;
  const __CFString *v49;
  const __CFString *v50;
  const __CFString *v51;
  const __CFString *v52;
  const __CFString *v53;
  void *v54;
  const __CFString *v55;
  const __CFString *v56;
  const __CFString *v57;
  const __CFString *v58;
  const __CFString *v59;
  const __CFString *v60;
  const __CFString *v61;
  const __CFString *v62;
  const __CFString *v63;
  const __CFString *v64;
  const __CFString *v65;
  const __CFString *v66;
  const __CFString *v67;
  const __CFString *v68;
  const __CFString *v69;
  const __CFString *v70;
  const __CFString *v71;
  const __CFString *v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  keys[0] = CFSTR("@cpy");
  keys[1] = CFSTR("@day");
  values[0] = CFSTR("cprt");
  values[1] = CFSTR("date");
  v7[0] = CFSTR("cprt");
  v8[0] = CFSTR("com.apple.quicktime.copyright");
  v8[1] = CFSTR("com.apple.quicktime.creationdate");
  v7[1] = CFSTR("date");
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v1 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v2 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  gUserDataKeyToMP4KeyDict = (uint64_t)CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  gQTMetadataKeyToMP4KeyDict = (uint64_t)CFDictionaryCreate(v0, (const void **)v8, (const void **)v7, 2, v1, v2);
  v54 = CFSTR("@cpy");
  v55 = CFSTR("@aut");
  v56 = CFSTR("@prf");
  v57 = CFSTR("@prd");
  v58 = CFSTR("@pub");
  v59 = CFSTR("@dir");
  v60 = CFSTR("@ART");
  v61 = CFSTR("@ope");
  v62 = CFSTR("@gen");
  v63 = CFSTR("@xyz");
  v64 = CFSTR("@nam");
  v65 = CFSTR("tnam");
  v66 = CFSTR("@des");
  v67 = CFSTR("@inf");
  v68 = CFSTR("tagc");
  v69 = CFSTR("@day");
  v70 = CFSTR("ludt");
  v35 = CFSTR("cprt");
  v36 = CFSTR("auth");
  v37 = CFSTR("perf");
  v38 = CFSTR("perf");
  v39 = CFSTR("perf");
  v40 = CFSTR("perf");
  v41 = CFSTR("perf");
  v42 = CFSTR("perf");
  v43 = CFSTR("gnre");
  v44 = CFSTR("loci");
  v45 = CFSTR("titl");
  v46 = CFSTR("titl");
  v47 = CFSTR("dscp");
  v48 = CFSTR("dscp");
  v49 = CFSTR("tagc");
  v50 = CFSTR("date");
  v51 = CFSTR("ludt");
  v23 = CFSTR("cprt");
  v24 = CFSTR("auth");
  v25 = CFSTR("perf");
  v26 = CFSTR("gnre");
  v27 = CFSTR("loci");
  v28 = CFSTR("titl");
  v29 = CFSTR("dscp");
  v30 = CFSTR("tagc");
  v31 = CFSTR("date");
  v32 = CFSTR("ludt");
  v11 = CFSTR("@cpy");
  v12 = CFSTR("@aut");
  v13 = CFSTR("@prf");
  v14 = CFSTR("@gen");
  v15 = CFSTR("@xyz");
  v16 = CFSTR("@nam");
  v17 = CFSTR("@des");
  v18 = CFSTR("tagc");
  v19 = CFSTR("@day");
  v20 = CFSTR("ludt");
  v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  gUserDataKeyTo3GPKeyDict = (uint64_t)CFDictionaryCreate(allocator, (const void **)&v54, (const void **)&v35, 17, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  g3GPKeyToUserDataKeyDict = (uint64_t)CFDictionaryCreate(allocator, (const void **)&v23, (const void **)&v11, 10, v3, v4);
  v54 = CFSTR("com.apple.quicktime.copyright");
  v55 = CFSTR("com.apple.quicktime.author");
  v56 = CFSTR("com.apple.quicktime.genre");
  v57 = CFSTR("com.apple.quicktime.location.ISO6709");
  v58 = CFSTR("com.apple.quicktime.displayname");
  v59 = CFSTR("com.apple.quicktime.title");
  v60 = CFSTR("com.apple.quicktime.year");
  v61 = CFSTR("com.apple.quicktime.creationdate");
  v62 = CFSTR("com.apple.quicktime.description");
  v63 = CFSTR("com.apple.quicktime.information");
  v64 = CFSTR("com.apple.quicktime.performer");
  v65 = CFSTR("com.apple.quicktime.producer");
  v66 = CFSTR("com.apple.quicktime.publisher");
  v67 = CFSTR("com.apple.quicktime.director");
  v68 = CFSTR("com.apple.quicktime.artist");
  v69 = CFSTR("com.apple.quicktime.originalartist");
  v70 = CFSTR("com.apple.quicktime.rating.user");
  v71 = CFSTR("com.apple.quicktime.collection.user");
  v72 = CFSTR("com.apple.quicktime.artwork");
  v35 = CFSTR("cprt");
  v36 = CFSTR("auth");
  v37 = CFSTR("gnre");
  v38 = CFSTR("loci");
  v39 = CFSTR("titl");
  v40 = CFSTR("titl");
  v41 = CFSTR("yrrc");
  v42 = CFSTR("date");
  v43 = CFSTR("dscp");
  v44 = CFSTR("dscp");
  v45 = CFSTR("perf");
  v46 = CFSTR("perf");
  v47 = CFSTR("perf");
  v48 = CFSTR("perf");
  v49 = CFSTR("perf");
  v50 = CFSTR("perf");
  v51 = CFSTR("urat");
  v52 = CFSTR("coll");
  v53 = CFSTR("thmb");
  v23 = CFSTR("cprt");
  v24 = CFSTR("auth");
  v25 = CFSTR("gnre");
  v26 = CFSTR("loci");
  v27 = CFSTR("titl");
  v28 = CFSTR("yrrc");
  v29 = CFSTR("date");
  v30 = CFSTR("dscp");
  v31 = CFSTR("perf");
  v32 = CFSTR("urat");
  v33 = CFSTR("coll");
  v34 = CFSTR("thmb");
  v11 = CFSTR("com.apple.quicktime.copyright");
  v12 = CFSTR("com.apple.quicktime.author");
  v13 = CFSTR("com.apple.quicktime.genre");
  v14 = CFSTR("com.apple.quicktime.location.ISO6709");
  v15 = CFSTR("com.apple.quicktime.displayname");
  v16 = CFSTR("com.apple.quicktime.year");
  v17 = CFSTR("com.apple.quicktime.creationdate");
  v18 = CFSTR("com.apple.quicktime.description");
  v19 = CFSTR("com.apple.quicktime.performer");
  v20 = CFSTR("com.apple.quicktime.rating.user");
  v21 = CFSTR("com.apple.quicktime.collection.user");
  v22 = CFSTR("com.apple.quicktime.artwork");
  gQTMetadataKeyTo3GPKeyDict = (uint64_t)CFDictionaryCreate(allocator, (const void **)&v54, (const void **)&v35, 19, v3, v4);
  result = CFDictionaryCreate(allocator, (const void **)&v23, (const void **)&v11, 12, v3, v4);
  g3GPKeyToQTMetadataKeyDict = (uint64_t)result;
  return result;
}

uint64_t FigCDSNotificationInputCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (a1 && a2 && a3 && a5)
  {
    *a5 = 0;
    FigCDSInputGetClassID();
    CMDerivedObjectCreate();
  }
  return FigSignalErrorAt();
}

uint64_t FigCDSNotificationInputSetPlayer(uint64_t a1, uint64_t a2)
{
  _QWORD v4[2];

  v4[0] = CMBaseObjectGetDerivedStorage();
  v4[1] = a2;
  if (*(_QWORD *)v4[0])
    dispatch_sync_f(*(dispatch_queue_t *)v4[0], v4, (dispatch_function_t)setPlayerDo_1);
  return 0;
}

void setPlayerDo_1(uint64_t *a1)
{
  uint64_t v1;
  const void *v2;
  const void *v3;
  uint64_t FigBaseObject;
  void (*v5)(uint64_t, const __CFString *, _QWORD, uint64_t *);
  uint64_t v6;
  uint64_t v7[2];

  v1 = *a1;
  v2 = (const void *)a1[1];
  if (*(_QWORD *)(*a1 + 8))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    v3 = *(const void **)(v1 + 8);
  }
  else
  {
    v3 = 0;
  }
  *(_QWORD *)(v1 + 8) = v2;
  if (v2)
    CFRetain(v2);
  if (v3)
    CFRelease(v3);
  if (*(_QWORD *)(v1 + 8))
  {
    v6 = 0;
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterAddListener();
    FigBaseObject = FigPlayerGetFigBaseObject(*(_QWORD *)(v1 + 8));
    v5 = *(void (**)(uint64_t, const __CFString *, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
    if (v5)
    {
      v5(FigBaseObject, CFSTR("LastSentSubtitleSample"), *MEMORY[0x1E0C9AE00], &v6);
      if (v6)
      {
        v7[0] = v1;
        v7[1] = v6;
        digestSubtitleSampleDo_2(v7);
      }
    }
  }
}

uint64_t FigCDSNotificationInputSetNonForcedSubtitleDisplay(uint64_t a1, unsigned __int8 a2)
{
  _QWORD v4[2];

  v4[0] = CMBaseObjectGetDerivedStorage();
  v4[1] = a2;
  if (*(_QWORD *)v4[0])
    dispatch_sync_f(*(dispatch_queue_t *)v4[0], v4, (dispatch_function_t)SetNonForcedSubtitleDisplayEnabledDo);
  return 0;
}

unsigned __int8 *SetNonForcedSubtitleDisplayEnabledDo(unsigned __int8 *result)
{
  int v1;

  v1 = result[8];
  if (*(unsigned __int8 *)(*(_QWORD *)result + 40) != v1)
    *(_BYTE *)(*(_QWORD *)result + 40) = v1;
  return result;
}

void figCDSNotificationInput_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 8))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    v1 = *(const void **)(DerivedStorage + 8);
    if (v1)
    {
      CFRelease(v1);
      *(_QWORD *)(DerivedStorage + 8) = 0;
    }
  }
  if (*(_QWORD *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
}

__CFString *figCDSNotificationInput_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigCDSNotificationInput %p>"), a1);
  return Mutable;
}

void subtitleChangedCallback_0(int a1, dispatch_queue_t *a2, int a3, int a4, CFTypeRef cf)
{
  CFTypeRef v6;
  _QWORD v7[2];

  if (cf)
  {
    v6 = CFRetain(cf);
    if (v6)
    {
      v7[0] = a2;
      v7[1] = v6;
      if (*a2)
        dispatch_sync_f(*a2, v7, (dispatch_function_t)digestSubtitleSampleDo_2);
    }
  }
}

void digestSubtitleSampleDo_2(uint64_t *a1)
{
  const void *v1;
  uint64_t v2;
  const __CFDictionary *Value;
  const __CFDictionary *v4;
  int64_t Count;
  size_t v6;
  const void **v7;
  const void **v8;
  uint64_t v9;
  const void *v10;
  CFTypeID v11;
  const void *v12;
  CFTypeID v13;
  const void *v14;
  const __CFDictionary *v15;
  CFTypeRef v16;
  uint64_t ProtocolVTable;
  uint64_t v18;
  void (*v19)(CFTypeRef, const void *);
  CFTypeRef v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(CFTypeRef, _QWORD);
  const __CFNumber *v25;
  CFTypeRef v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(CFTypeRef, uint64_t);
  CFTypeRef v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(CFTypeRef, double, double);
  CFTypeRef v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(CFTypeRef, double, double);
  const __CFNumber *v43;
  uint64_t v44;
  const __CFArray *v45;
  const void *v46;
  const void *v47;
  const __CFArray *v48;
  const __CFArray *v49;
  CFIndex v50;
  CFIndex v51;
  CFIndex i;
  const __CFAttributedString *ValueAtIndex;
  const __CFAttributedString *v54;
  void *v55;
  void *v56;
  void *key;
  int v58;
  char v59;
  CFDictionaryRef theDict;
  double v61;
  double v62;
  double v63;
  double v64;
  unsigned int valuePtr;
  double v66;
  CFTypeRef cf;

  v2 = *a1;
  v1 = (const void *)a1[1];
  theDict = 0;
  v59 = 0;
  if (FigSubtitleSampleCreateFromPropertyListAndInsertInfoForRenderer(v1, &theDict, &v59, *MEMORY[0x1E0C9D628], *(CGFloat *)(MEMORY[0x1E0C9D628] + 8), *(CGFloat *)(MEMORY[0x1E0C9D628] + 16), *(CGFloat *)(MEMORY[0x1E0C9D628] + 24)))goto LABEL_56;
  if (!theDict)
    goto LABEL_55;
  Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("SubtitleContentMetadata"));
  if (Value)
  {
    v4 = (const __CFDictionary *)CFDictionaryGetValue(Value, (const void *)*MEMORY[0x1E0CA2C38]);
    Count = CFDictionaryGetCount(v4);
    if (Count >= 1)
    {
      v6 = Count;
      v7 = (const void **)malloc_type_calloc(Count, 8uLL, 0xC0040B8AA526DuLL);
      v8 = (const void **)malloc_type_calloc(v6, 8uLL, 0xC0040B8AA526DuLL);
      CFDictionaryGetKeysAndValues(v4, v7, v8);
      v9 = 0;
      v56 = (void *)*MEMORY[0x1E0CA2CC0];
      key = (void *)*MEMORY[0x1E0CA2CA8];
      v55 = (void *)*MEMORY[0x1E0CA2CB0];
      do
      {
        v10 = v8[v9];
        if (v10)
        {
          v11 = CFGetTypeID(v10);
          if (v11 == CFDictionaryGetTypeID())
          {
            v12 = v7[v9];
            if (v12)
            {
              v13 = CFGetTypeID(v12);
              if (v13 == CFStringGetTypeID())
              {
                v14 = v7[v9];
                v15 = (const __CFDictionary *)v8[v9];
                cf = 0;
                FigCDSStackLayoutRegionCreate(&cf);
                v66 = 0.0;
                valuePtr = 0;
                v63 = 0.0;
                v64 = 0.0;
                v61 = 0.0;
                v62 = 0.0;
                v16 = cf;
                FigCDSRegionProtocolGetProtocolID();
                ProtocolVTable = CMBaseObjectGetProtocolVTable();
                if (ProtocolVTable)
                {
                  v18 = *(_QWORD *)(ProtocolVTable + 16);
                  if (v18)
                  {
                    v19 = *(void (**)(CFTypeRef, const void *))(v18 + 8);
                    if (v19)
                      v19(v16, v14);
                  }
                }
                if (FigCFDictionaryGetCGFloatIfPresent())
                {
                  v20 = cf;
                  v21 = v66;
                  FigCDSRegionProtocolGetProtocolID();
                  v22 = CMBaseObjectGetProtocolVTable();
                  if (v22)
                  {
                    v23 = *(_QWORD *)(v22 + 16);
                    if (v23)
                    {
                      v24 = *(void (**)(CFTypeRef, _QWORD))(v23 + 24);
                      if (v24)
                        v24(v20, (int)v21);
                    }
                  }
                  v25 = (const __CFNumber *)CFDictionaryGetValue(v15, key);
                  if (v25)
                  {
                    CFNumberGetValue(v25, kCFNumberIntType, &valuePtr);
                    v26 = cf;
                    v27 = valuePtr;
                    FigCDSRegionProtocolGetProtocolID();
                    v28 = CMBaseObjectGetProtocolVTable();
                    if (v28)
                    {
                      v29 = *(_QWORD *)(v28 + 16);
                      if (v29)
                      {
                        v30 = *(void (**)(CFTypeRef, uint64_t))(v29 + 40);
                        if (v30)
                          v30(v26, v27);
                      }
                    }
                    if (CFDictionaryGetValue(v15, v56)
                      && FigCFDictionaryGetCGFloatIfPresent()
                      && FigCFDictionaryGetCGFloatIfPresent())
                    {
                      v31 = cf;
                      v33 = v63;
                      v32 = v64;
                      FigCDSRegionProtocolGetProtocolID();
                      v34 = CMBaseObjectGetProtocolVTable();
                      if (v34)
                      {
                        v35 = *(_QWORD *)(v34 + 16);
                        if (v35)
                        {
                          v36 = *(void (**)(CFTypeRef, double, double))(v35 + 72);
                          if (v36)
                            v36(v31, v32, 100.0 - v33);
                        }
                      }
                      if (CFDictionaryGetValue(v15, v55)
                        && FigCFDictionaryGetCGFloatIfPresent()
                        && FigCFDictionaryGetCGFloatIfPresent())
                      {
                        v37 = cf;
                        v39 = v61;
                        v38 = v62;
                        FigCDSRegionProtocolGetProtocolID();
                        v40 = CMBaseObjectGetProtocolVTable();
                        if (v40)
                        {
                          v41 = *(_QWORD *)(v40 + 16);
                          if (v41)
                          {
                            v42 = *(void (**)(CFTypeRef, double, double))(v41 + 56);
                            if (v42)
                              v42(v37, v38, v39);
                          }
                        }
                        (*(void (**)(CFTypeRef, _QWORD))(v2 + 24))(cf, *(_QWORD *)(v2 + 32));
                      }
                    }
                  }
                }
                if (cf)
                  CFRelease(cf);
              }
            }
          }
        }
        ++v9;
      }
      while (v6 != v9);
      free(v7);
      free(v8);
    }
  }
  v58 = 0;
  v43 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("SubtitleFormat"));
  CFNumberGetValue(v43, kCFNumberSInt32Type, &v58);
  if (((v58 - 2004251764) & 0xFEFFFFFF) != 0)
    v44 = 3;
  else
    v44 = 4;
  v45 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("SubtitleTimeRange"));
  v46 = CFDictionaryGetValue(theDict, CFSTR("kFigSubtitleRenderer_TextBox"));
  v47 = CFDictionaryGetValue(theDict, CFSTR("SubtitleExtendedLanguageTag"));
  v48 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("SubtitleContent"));
  if (v48)
  {
    v49 = v48;
    v50 = CFArrayGetCount(v48);
    if (v50)
    {
      v51 = v50;
      if (v50 >= 1)
      {
        for (i = 0; i != v51; ++i)
        {
          ValueAtIndex = (const __CFAttributedString *)CFArrayGetValueAtIndex(v49, i);
          if (ValueAtIndex)
          {
            v54 = ValueAtIndex;
            if (CFAttributedStringGetLength(ValueAtIndex))
              outputCueAsFigCDSCaption_0(v2, v44, v45, (uint64_t)v47, v46, v54);
          }
        }
      }
      goto LABEL_56;
    }
LABEL_55:
    outputCueAsFigCDSCaption_0(v2, 5, 0, 0, 0, 0);
  }
LABEL_56:
  if (theDict)
    CFRelease(theDict);
  if (v1)
    CFRelease(v1);
}

void outputCueAsFigCDSCaption_0(uint64_t a1, uint64_t a2, const __CFArray *a3, uint64_t a4, const void *a5, const __CFAttributedString *a6)
{
  CFTypeRef v12;
  uint64_t ProtocolVTable;
  uint64_t v14;
  uint64_t (*v15)(CFTypeRef, uint64_t);
  __CFDictionary *Mutable;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v18;
  CFTypeRef v19;
  double FigBaseObject;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(CFTypeRef, double, double);
  CFTypeRef v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(CFTypeRef, uint64_t);
  CFTypeRef v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(CFTypeRef, __CFDictionary *);
  CFTypeRef Attribute;
  const void *v35;
  CFTypeRef v36;
  const void *v37;
  CFTypeRef v38;
  const void *v39;
  CFTypeRef v40;
  const void *v41;
  CFTypeRef v42;
  const void *v43;
  CFTypeRef v44;
  const void *v45;
  CFTypeRef v46;
  CFTypeRef v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(CFTypeRef, const __CFAttributedString *);
  CMTime v51;
  CMTime v52;
  CMTime v53;
  CFTypeRef cf;
  CFRange effectiveRange;

  effectiveRange.location = 0;
  effectiveRange.length = 0;
  cf = 0;
  FigCDSCaptionCreate(&cf);
  v12 = cf;
  FigCDSCaptionProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v14 = *(_QWORD *)(ProtocolVTable + 16);
    if (v14)
    {
      v15 = *(uint64_t (**)(CFTypeRef, uint64_t))(v14 + 40);
      if (v15)
        ProtocolVTable = v15(v12, a2);
    }
  }
  if ((_DWORD)a2 == 5)
  {
    (*(void (**)(CFTypeRef, _QWORD))(a1 + 16))(cf, *(_QWORD *)(a1 + 32));
LABEL_7:
    Mutable = 0;
    goto LABEL_45;
  }
  if (!a6)
    goto LABEL_7;
  if (a3)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a3, 0);
    v18 = (const __CFDictionary *)CFArrayGetValueAtIndex(a3, 1);
    memset(&v53, 0, sizeof(v53));
    CMTimeMakeFromDictionary(&v53, ValueAtIndex);
    memset(&v52, 0, sizeof(v52));
    CMTimeMakeFromDictionary(&v52, v18);
    v51 = v53;
    CMTimeGetSeconds(&v51);
    v51 = v52;
    CMTimeGetSeconds(&v51);
  }
  v19 = cf;
  FigBaseObject = FigBytePumpGetFigBaseObject(ProtocolVTable);
  v22 = v21;
  FigCDSIntervalProtocolGetProtocolID();
  v23 = CMBaseObjectGetProtocolVTable();
  if (v23)
  {
    v24 = *(_QWORD *)(v23 + 16);
    if (v24)
    {
      v25 = *(void (**)(CFTypeRef, double, double))(v24 + 16);
      if (v25)
        v25(v19, FigBaseObject, v22);
    }
  }
  v26 = cf;
  FigCDSCaptionProtocolGetProtocolID();
  v27 = CMBaseObjectGetProtocolVTable();
  if (v27)
  {
    v28 = *(_QWORD *)(v27 + 16);
    if (v28)
    {
      v29 = *(void (**)(CFTypeRef, uint64_t))(v28 + 56);
      if (v29)
        v29(v26, a4);
    }
  }
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v30 = cf;
  FigCDSCaptionProtocolGetProtocolID();
  v31 = CMBaseObjectGetProtocolVTable();
  if (v31)
  {
    v32 = *(_QWORD *)(v31 + 16);
    if (v32)
    {
      v33 = *(void (**)(CFTypeRef, __CFDictionary *))(v32 + 8);
      if (v33)
        v33(v30, Mutable);
    }
  }
  Attribute = CFAttributedStringGetAttribute(a6, 0, (CFStringRef)*MEMORY[0x1E0CA2AB0], &effectiveRange);
  if (Attribute)
    CFDictionarySetValue(Mutable, CFSTR("region"), Attribute);
  if (a5)
    CFDictionarySetValue(Mutable, CFSTR("textbox"), a5);
  if ((_DWORD)a2 == 4)
  {
    v35 = (const void *)*MEMORY[0x1E0CA2B40];
    v36 = CFAttributedStringGetAttribute(a6, 0, (CFStringRef)*MEMORY[0x1E0CA2B40], &effectiveRange);
    if (v36)
      CFDictionarySetValue(Mutable, v35, v36);
    v37 = (const void *)*MEMORY[0x1E0CA2B20];
    v38 = CFAttributedStringGetAttribute(a6, 0, (CFStringRef)*MEMORY[0x1E0CA2B20], &effectiveRange);
    if (v38)
      CFDictionarySetValue(Mutable, v37, v38);
    v39 = (const void *)*MEMORY[0x1E0CA2A88];
    v40 = CFAttributedStringGetAttribute(a6, 0, (CFStringRef)*MEMORY[0x1E0CA2A88], &effectiveRange);
    if (v40)
      CFDictionarySetValue(Mutable, v39, v40);
    v41 = (const void *)*MEMORY[0x1E0CA2A80];
    v42 = CFAttributedStringGetAttribute(a6, 0, (CFStringRef)*MEMORY[0x1E0CA2A80], &effectiveRange);
    if (v42)
      CFDictionarySetValue(Mutable, v41, v42);
    v43 = (const void *)*MEMORY[0x1E0CA29D8];
    v44 = CFAttributedStringGetAttribute(a6, 0, (CFStringRef)*MEMORY[0x1E0CA29D8], &effectiveRange);
    if (v44)
      CFDictionarySetValue(Mutable, v43, v44);
    v45 = (const void *)*MEMORY[0x1E0CA29E0];
    v46 = CFAttributedStringGetAttribute(a6, 0, (CFStringRef)*MEMORY[0x1E0CA29E0], &effectiveRange);
    if (v46)
      CFDictionarySetValue(Mutable, v45, v46);
  }
  v47 = cf;
  FigCDSCaptionProtocolGetProtocolID();
  v48 = CMBaseObjectGetProtocolVTable();
  if (v48)
  {
    v49 = *(_QWORD *)(v48 + 16);
    if (v49)
    {
      v50 = *(void (**)(CFTypeRef, const __CFAttributedString *))(v49 + 24);
      if (v50)
        v50(v47, a6);
    }
  }
  (*(void (**)(CFTypeRef, _QWORD))(a1 + 16))(cf, *(_QWORD *)(a1 + 32));
LABEL_45:
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
}

uint64_t start_1()
{
  return 0;
}

uint64_t stop_1()
{
  return 0;
}

uint64_t FigMetadataCreateSampleBuffer(const __CFAllocator *a1, uint64_t a2, uint64_t a3, CMFormatDescriptionRef desc, const CMSampleTimingInfo *a5, CMSampleBufferRef *a6)
{
  uint64_t appended;
  CFDataRef *v13;
  uint64_t v14;
  size_t sampleSizeArray;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  CMBlockBufferRef blockBufferOut;

  blockBufferOut = 0;
  v20 = 0;
  v18 = 0u;
  v19 = 0u;
  v17 = 0u;
  sampleSizeArray = 0;
  if (CMFormatDescriptionGetMediaSubType(desc) == 1835360888)
  {
    appended = CMBlockBufferCreateEmpty(a1, 8u, 0, &blockBufferOut);
    if (!(_DWORD)appended)
    {
      appended = FigAtomWriterInitWithBlockBuffer();
      if (!(_DWORD)appended)
      {
        if (a2 < 1)
        {
LABEL_10:
          sampleSizeArray = CMBlockBufferGetDataLength(blockBufferOut);
          appended = CMSampleBufferCreate(a1, blockBufferOut, 1u, 0, 0, desc, 1, 1, a5, 1, &sampleSizeArray, a6);
        }
        else
        {
          v13 = (CFDataRef *)(a3 + 4);
          while (1)
          {
            appended = FigAtomWriterBeginAtom();
            if ((_DWORD)appended)
              break;
            CFDataGetBytePtr(*v13);
            CFDataGetLength(*v13);
            appended = FigAtomWriterAppendData();
            if ((_DWORD)appended)
              break;
            appended = FigAtomWriterEndAtom();
            if ((_DWORD)appended)
              break;
            v13 = (CFDataRef *)((char *)v13 + 12);
            if (!--a2)
              goto LABEL_10;
          }
        }
      }
    }
  }
  else
  {
    appended = FigSignalErrorAt();
  }
  v14 = appended;
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  return v14;
}

char *FigCaptionRendererLayoutDecouple_CreateTextObject(const void *a1)
{
  char *v2;
  CFTypeRef v3;
  CFMutableArrayRef Mutable;

  v2 = (char *)malloc_type_calloc(1uLL, 0xD0uLL, 0x10200404F51ABCFuLL);
  if (v2)
  {
    if (a1)
      v3 = CFRetain(a1);
    else
      v3 = 0;
    *((_QWORD *)v2 + 25) = v3;
    *((_DWORD *)v2 + 48) = 0;
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
    *((_QWORD *)v2 + 4) = Mutable;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(v2 + 40) = _Q0;
    *(_OWORD *)(v2 + 56) = _Q0;
    if (!Mutable)
    {
      free(v2);
      return 0;
    }
  }
  return v2;
}

void FigCaptionRendererLayoutDecouple_ReleaseTextObject(_QWORD *a1)
{
  const void *v2;
  const void *v3;

  if (a1)
  {
    v2 = (const void *)a1[25];
    if (v2)
      CFRelease(v2);
    v3 = (const void *)a1[4];
    if (v3)
      CFRelease(v3);
    free(a1);
  }
}

uint64_t FigCaptionRendererLayoutDecouple_ApplyDecouplingAndSafeRegion(uint64_t a1, float64x2_t *a2)
{
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, CFArrayRef *);
  uint64_t v7;
  CFIndex Count;
  uint64_t v9;
  CFMutableArrayRef Mutable;
  __CFArray *v11;
  uint64_t v12;
  __int128 *v13;
  __int128 *v14;
  const void *ValueAtIndex;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(const void *, const char **);
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(const void *, __int128 *);
  uint64_t v24;
  uint64_t v25;
  void (*v26)(const void *, __int128 *);
  __int128 v27;
  __int128 v28;
  char *TextObject;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, float64x2_t *);
  double v34;
  double v35;
  double v36;
  double v37;
  unsigned int v38;
  float64_t v39;
  float64_t v40;
  float64x2_t v41;
  CFIndex v42;
  float64x2_t v43;
  CFIndex v44;
  float64x2_t *v50;
  float64x2_t v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  uint64_t v59;
  CFIndex v61;
  CFIndex v62;
  CFIndex i;
  double *v64;
  uint64_t v65;
  double v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, double, double);
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t);
  _QWORD *v74;
  float64_t v75;
  float64x2_t v76;
  float64_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  const char *v87;
  CFArrayRef v88;

  v88 = 0;
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable || (v5 = *(_QWORD *)(ProtocolVTable + 16)) == 0)
  {
    v59 = 4294954508;
LABEL_45:
    FigSignalErrorAt();
    return v59;
  }
  v6 = *(uint64_t (**)(uint64_t, CFArrayRef *))(v5 + 24);
  if (!v6)
  {
    v59 = 4294954514;
    goto LABEL_45;
  }
  v7 = v6(a1, &v88);
  if ((_DWORD)v7)
  {
    v59 = v7;
    goto LABEL_45;
  }
  Count = CFArrayGetCount(v88);
  if (!Count)
    return 0;
  v9 = Count;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
  if (!Mutable)
    return 0;
  v11 = Mutable;
  if (v9 >= 1)
  {
    v12 = v9 + 1;
    v13 = (__int128 *)MEMORY[0x1E0C9D538];
    v14 = (__int128 *)MEMORY[0x1E0C9D820];
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v88, v12 - 2);
      v87 = 0;
      FigCaptionRendererBaseProtocolGetProtocolID();
      v16 = CMBaseObjectGetProtocolVTable();
      if (!v16 || (v17 = *(_QWORD *)(v16 + 16)) == 0)
      {
        v59 = 4294954508;
        goto LABEL_51;
      }
      v18 = *(uint64_t (**)(const void *, const char **))(v17 + 8);
      if (!v18)
      {
        v59 = 4294954514;
        goto LABEL_51;
      }
      v19 = v18(ValueAtIndex, &v87);
      if ((_DWORD)v19)
        break;
      if (v87 && !strcmp(v87, "FigCaptionRendererCaption"))
      {
        v20 = *v13;
        v85 = *v14;
        v86 = v20;
        FigCaptionRendererNodeProtocolGetProtocolID();
        v21 = CMBaseObjectGetProtocolVTable();
        if (v21)
        {
          v22 = *(_QWORD *)(v21 + 16);
          if (v22)
          {
            v23 = *(void (**)(const void *, __int128 *))(v22 + 120);
            if (v23)
              v23(ValueAtIndex, &v85);
          }
        }
        FigCaptionRendererNodeProtocolGetProtocolID();
        v24 = CMBaseObjectGetProtocolVTable();
        if (v24)
        {
          v25 = *(_QWORD *)(v24 + 16);
          if (v25)
          {
            v26 = *(void (**)(const void *, __int128 *))(v25 + 136);
            if (v26)
              v26(ValueAtIndex, &v86);
          }
        }
        v27 = v86;
        v28 = v85;
        TextObject = FigCaptionRendererLayoutDecouple_CreateTextObject(ValueAtIndex);
        if (!TextObject)
          goto LABEL_69;
        *(_OWORD *)TextObject = v27;
        *((_OWORD *)TextObject + 1) = v28;
        CFArrayAppendValue(v11, TextObject);
      }
      if ((unint64_t)--v12 <= 1)
        goto LABEL_26;
    }
    v59 = v19;
LABEL_51:
    FigSignalErrorAt();
    goto LABEL_70;
  }
LABEL_26:
  v30 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  v83 = *(float64x2_t *)MEMORY[0x1E0C9D628];
  v84 = v30;
  FigCaptionRendererNodeProtocolGetProtocolID();
  v31 = CMBaseObjectGetProtocolVTable();
  if (v31)
  {
    v32 = *(_QWORD *)(v31 + 16);
    if (v32)
    {
      v33 = *(void (**)(uint64_t, float64x2_t *))(v32 + 104);
      if (v33)
        v33(a1, &v83);
    }
  }
  v34 = FCRGetOverscanSafeRectForViewport((uint64_t)a2);
  v38 = fcr_applyDecouplingAndSafeRegion(v11, v83.f64[0], v83.f64[1], *(double *)&v84, *((double *)&v84 + 1), v34 - v83.f64[0], v35 - v83.f64[1], v36, v37);
  if (!CFPreferencesGetAppBooleanValue(CFSTR("disable_caption_repositioning"), CFSTR("com.apple.coremedia"), 0))
  {
    if (a2[24].f64[0] < -0.5 || a2[24].f64[1] < -0.5)
    {
      FCRGetVideoPresentationBounds(a2[23].f64[0], a2[23].f64[1], a2[21].f64[0], a2[21].f64[1], a2[22].f64[0], a2[22].f64[1]);
      v41.f64[0] = v40;
      v41.f64[1] = v39;
      if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vclezq_f64(v41), (int32x4_t)vclezq_f64(a2[22])))) & 1) == 0)
      {
        v82 = v83;
        v77 = v39;
        v79 = a2[21];
        v75 = v40;
        v76 = a2[22];
        v42 = CFArrayGetCount(v11);
        v43.f64[0] = v77;
        if (v42 >= 1)
        {
          v44 = 0;
          __asm { FMOV            V0.2D, #0.5 }
          v81 = _Q0;
          v43.f64[1] = v75;
          v78 = vdivq_f64(v76, v43);
          v80 = vaddq_f64(vmulq_f64(v76, _Q0), v79);
          do
          {
            v50 = (float64x2_t *)CFArrayGetValueAtIndex(v11, v44);
            v51 = vmulq_f64(v50[1], v81);
            *v50 = vsubq_f64(vsubq_f64(vmlaq_f64(v80, v78, vsubq_f64(vaddq_f64(vaddq_f64(v82, *v50), v51), v80)), v51), v82);
            ++v44;
          }
          while (v44 < CFArrayGetCount(v11));
        }
      }
      if (a2[24].f64[0] < -0.5)
      {
        v52 = FCRGetOverscanSafeRectAspectFill(a2[21].f64[0], a2[21].f64[1], a2[22].f64[0], a2[22].f64[1]);
        fcr_applyDecouplingAndSafeRegion(v11, v83.f64[0], v83.f64[1], *(double *)&v84, *((double *)&v84 + 1), v52, v53, v54, v55);
      }
      v38 = 1;
    }
    v56 = a2[28].f64[0];
    if (v56 <= 0.0)
    {
      v58 = a2[29].f64[0];
      v57 = a2[26].f64[0];
      if (v58 <= 0.0 && v57 <= 0.0 && a2[27].f64[0] <= 0.0)
        goto LABEL_55;
    }
    else
    {
      v57 = a2[26].f64[0];
      v58 = a2[29].f64[0];
    }
    if ((fcr_moveIntoSafeRegion(v11, a2[21].f64[0] + v57, a2[21].f64[1] + v58, a2[22].f64[0] - (v57 + a2[27].f64[0]), a2[22].f64[1] - (v56 + v58)) & 1) != 0)
    {
LABEL_56:
      v61 = CFArrayGetCount(v11);
      if (v61 >= 1)
      {
        v62 = v61;
        for (i = 0; i != v62; ++i)
        {
          v64 = (double *)CFArrayGetValueAtIndex(v11, i);
          if (v64)
          {
            v65 = *((_QWORD *)v64 + 25);
            if (v65)
            {
              v66 = *v64;
              v67 = v64[1];
              FigCaptionRendererNodeProtocolGetProtocolID();
              v68 = CMBaseObjectGetProtocolVTable();
              if (v68)
              {
                v69 = *(_QWORD *)(v68 + 16);
                if (v69)
                {
                  v70 = *(void (**)(uint64_t, double, double))(v69 + 128);
                  if (v70)
                    v70(v65, v66, v67);
                }
              }
              FigCaptionRendererNodeProtocolGetProtocolID();
              v71 = CMBaseObjectGetProtocolVTable();
              if (v71)
              {
                v72 = *(_QWORD *)(v71 + 16);
                if (v72)
                {
                  v73 = *(void (**)(uint64_t, uint64_t))(v72 + 232);
                  if (v73)
                    v73(v65, 1);
                }
              }
            }
          }
        }
      }
      goto LABEL_69;
    }
  }
LABEL_55:
  if (v38)
    goto LABEL_56;
LABEL_69:
  v59 = 0;
LABEL_70:
  if (CFArrayGetCount(v11) >= 1)
  {
    do
    {
      v74 = CFArrayGetValueAtIndex(v11, 0);
      CFArrayRemoveValueAtIndex(v11, 0);
      FigCaptionRendererLayoutDecouple_ReleaseTextObject(v74);
    }
    while (CFArrayGetCount(v11) > 0);
  }
  CFRelease(v11);
  return v59;
}

CFMutableDataRef fcr_applyDecouplingAndSafeRegion(const __CFArray *a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  CFIndex Count;
  CFIndex v17;
  CFIndex v18;
  CFMutableDataRef result;
  double v20;
  double v21;
  double v22;
  double v27;
  double v28;
  const __CFArray *v29;
  CFIndex v30;
  CFIndex v31;
  CFIndex i;
  __CFArray **ValueAtIndex;
  __CFArray **v34;
  __CFArray *v35;
  CFIndex v36;
  CFIndex v37;
  CFIndex v38;
  int v39;
  CFIndex v40;
  CFIndex v41;
  const void *v42;
  const void *v43;
  CFIndex v44;
  CFMutableArrayRef *v45;
  CFMutableArrayRef *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  CFIndex j;
  double *v61;
  __CFArray *MutableCopy;
  const __CFArray *v63;
  double *v64;
  double *v65;
  CFIndex k;
  double v67;
  double v68;
  double *v69;
  double *v70;
  CFIndex m;
  double v72;
  double v73;
  CFIndex v74;
  CFIndex v75;
  CFIndex v76;
  CFIndex v77;
  double v78;
  char *v79;
  char *v80;
  double v81;
  double v82;
  double v83;
  double v84;
  CFIndex v85;
  CFIndex v86;
  CFIndex v87;
  double v88;
  double *v89;
  double *v90;
  double v91;
  double *v92;
  double *v93;
  double *v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double *v101;
  double *v102;
  double v103;
  double v104;
  double v105;
  double *v106;
  double *v107;
  CGFloat v108;
  CGFloat v109;
  double v110;
  double v111;
  BOOL v112;
  uint64_t v113;
  uint64_t v114;
  double v115;
  double v116;
  BOOL v117;
  uint64_t v118;
  uint64_t v119;
  char *v121;
  CFIndex v122;
  uint64_t v123;
  int64_t v124;
  const UInt8 *BytePtr;
  uint64_t v126;
  int v127;
  CFIndex v128;
  const UInt8 *v129;
  const void *v130;
  CFIndex v131;
  const UInt8 *v132;
  CFIndex v133;
  CFIndex v134;
  CFIndex n;
  uint64_t v136;
  uint64_t v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  CFIndex v143;
  const __CFData *theData;
  const __CFAllocator *allocator;
  uint64_t v146;
  double v147;
  double v148;
  CFIndex v150;
  __int128 v152;
  int v153;
  CFIndex v154;
  CFIndex v155;
  _OWORD v156[13];
  _OWORD v157[14];
  CFRange v158;
  CFRange v159;

  Count = CFArrayGetCount(a1);
  v17 = Count - 1;
  if (Count < 1)
  {
    LODWORD(result) = 0;
    goto LABEL_115;
  }
  v18 = Count;
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  result = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (!result)
  {
LABEL_115:
    v137 = 0;
    goto LABEL_111;
  }
  v138 = a6;
  v139 = a7;
  v140 = a8;
  v141 = a9;
  v143 = v17 * v18;
  theData = result;
  if (v17 * v18 < 1)
  {
    v146 = 0;
    goto LABEL_108;
  }
  v146 = 0;
  v20 = a2;
  v21 = a2 + a4;
  v22 = a3 + a5;
  __asm { FMOV            V0.2D, #-1.0 }
  v152 = _Q0;
  v27 = -1.0;
  v28 = 1.0;
  v29 = a1;
  v142 = a3;
  v147 = v22;
  v148 = a2 + a4;
  do
  {
    if (!v29)
      goto LABEL_109;
    v30 = CFArrayGetCount(v29);
    if (v30 >= 1)
    {
      v31 = v30;
      for (i = 0; i != v31; ++i)
      {
        ValueAtIndex = (__CFArray **)CFArrayGetValueAtIndex(v29, i);
        if (ValueAtIndex)
        {
          v34 = ValueAtIndex;
          v35 = ValueAtIndex[4];
          if (v35)
            CFArrayRemoveAllValues(v35);
          *(_OWORD *)(v34 + 5) = v152;
          *(_OWORD *)(v34 + 7) = v152;
          v34[22] = 0;
          v34[23] = 0;
          v34[21] = 0;
          *(_OWORD *)(v34 + 9) = 0u;
          *(_OWORD *)(v34 + 11) = 0u;
          *(_OWORD *)(v34 + 13) = 0u;
          *(_OWORD *)(v34 + 15) = 0u;
          *(_OWORD *)(v34 + 17) = 0u;
          *(_OWORD *)(v34 + 19) = 0u;
        }
      }
    }
    v36 = CFArrayGetCount(v29);
    if (v36 <= 1)
      goto LABEL_109;
    v37 = v36;
    v38 = 0;
    v39 = 0;
    v40 = v36 - 2;
    do
    {
      v41 = v38;
      v42 = CFArrayGetValueAtIndex(v29, v38++);
      if (v42 && v38 < v37)
      {
        v43 = v42;
        v44 = v38;
        do
        {
          v45 = (CFMutableArrayRef *)CFArrayGetValueAtIndex(v29, v44);
          if (v45)
          {
            v46 = v45;
            v47 = *((_OWORD *)v43 + 11);
            v157[10] = *((_OWORD *)v43 + 10);
            v157[11] = v47;
            v157[12] = *((_OWORD *)v43 + 12);
            v48 = *((_OWORD *)v43 + 7);
            v157[6] = *((_OWORD *)v43 + 6);
            v157[7] = v48;
            v49 = *((_OWORD *)v43 + 9);
            v157[8] = *((_OWORD *)v43 + 8);
            v157[9] = v49;
            v50 = *((_OWORD *)v43 + 3);
            v157[2] = *((_OWORD *)v43 + 2);
            v157[3] = v50;
            v51 = *((_OWORD *)v43 + 5);
            v157[4] = *((_OWORD *)v43 + 4);
            v157[5] = v51;
            v52 = *((_OWORD *)v43 + 1);
            v157[0] = *(_OWORD *)v43;
            v157[1] = v52;
            v53 = *((_OWORD *)v45 + 11);
            v156[10] = *((_OWORD *)v45 + 10);
            v156[11] = v53;
            v156[12] = *((_OWORD *)v45 + 12);
            v54 = *((_OWORD *)v45 + 7);
            v156[6] = *((_OWORD *)v45 + 6);
            v156[7] = v54;
            v55 = *((_OWORD *)v45 + 9);
            v156[8] = *((_OWORD *)v45 + 8);
            v156[9] = v55;
            v56 = *((_OWORD *)v45 + 3);
            v156[2] = *((_OWORD *)v45 + 2);
            v156[3] = v56;
            v57 = *((_OWORD *)v45 + 5);
            v156[4] = *((_OWORD *)v45 + 4);
            v156[5] = v57;
            v58 = *((_OWORD *)v45 + 1);
            v156[0] = *(_OWORD *)v45;
            v156[1] = v58;
            if (fcr_isOverlap((double *)v157, (double *)v156))
            {
              CFArrayAppendValue(*((CFMutableArrayRef *)v43 + 4), v46);
              CFArrayAppendValue(v46[4], v43);
              v39 = 1;
            }
          }
          ++v44;
        }
        while (v37 != v44);
      }
    }
    while (v41 != v40);
    if (!v39)
    {
LABEL_109:
      ++v146;
      break;
    }
    v59 = CFArrayGetCount(v29);
    if (v59 >= 1)
    {
      for (j = 0; j != v59; ++j)
      {
        v61 = (double *)CFArrayGetValueAtIndex(v29, j);
        v61[5] = v20;
        v61[6] = v21;
        v61[7] = v22;
        v61[8] = a3;
      }
    }
    MutableCopy = CFArrayCreateMutableCopy(allocator, 0, v29);
    if (MutableCopy)
    {
      v63 = MutableCopy;
      v158.location = 0;
      v158.length = v59;
      CFArraySortValues(MutableCopy, v158, (CFComparatorFunction)fcr_objComparatorX, 0);
      v64 = (double *)CFArrayGetValueAtIndex(v63, 0);
      v65 = v64;
      v64[5] = v20;
      if (v59 >= 2)
      {
        for (k = 1; k != v59; ++k)
        {
          v64 = (double *)CFArrayGetValueAtIndex(v63, k);
          v67 = v64[2] * 0.5;
          v68 = v65[2] * 0.5;
          v65[6] = v68 + *v64 + v67 + v27;
          v64[5] = v68 + *v65 + v28 - v67;
          v65 = v64;
        }
      }
      v64[6] = v21;
      v159.location = 0;
      v159.length = v59;
      CFArraySortValues(v63, v159, (CFComparatorFunction)fcr_objComparatorY, 0);
      v69 = (double *)CFArrayGetValueAtIndex(v63, 0);
      v70 = v69;
      v69[8] = a3;
      if (v59 >= 2)
      {
        for (m = 1; m != v59; ++m)
        {
          v69 = (double *)CFArrayGetValueAtIndex(v63, m);
          v72 = v69[3] * 0.5;
          v73 = v70[3] * 0.5;
          v70[7] = v73 + v69[1] + v72 + v27;
          v69[8] = v73 + v70[1] + v28 - v72;
          v70 = v69;
        }
      }
      v69[7] = v22;
      CFRelease(v63);
    }
    v74 = CFArrayGetCount(v29);
    if (v74 < 1)
      break;
    v75 = v74;
    v153 = 0;
    v76 = 0;
    v77 = -1;
    v78 = 0.0;
    v150 = v74;
    do
    {
      v79 = (char *)CFArrayGetValueAtIndex(v29, v76);
      if (!v79)
        goto LABEL_77;
      v80 = v79;
      if (*((int *)v79 + 48) > 0)
      {
        v153 = 1;
        goto LABEL_77;
      }
      v154 = v76;
      v155 = v77;
      v82 = *((double *)v79 + 5);
      v81 = *((double *)v79 + 6);
      v83 = *((double *)v79 + 7);
      v84 = *((double *)v79 + 8);
      v85 = CFArrayGetCount(*((CFArrayRef *)v79 + 4));
      if (v85 >= 1)
      {
        v86 = v85;
        v87 = 0;
        v88 = *(double *)v80 + *((double *)v80 + 2) * 0.5;
        v89 = (double *)(v80 + 96);
        v90 = (double *)(v80 + 72);
        v91 = *((double *)v80 + 1) + *((double *)v80 + 3) * 0.5;
        v92 = (double *)(v80 + 128);
        v93 = (double *)(v80 + 152);
        do
        {
          v94 = (double *)CFArrayGetValueAtIndex(*((CFArrayRef *)v80 + 4), v87);
          v95 = v94[3];
          v96 = v94[2] * 0.5;
          v97 = v94[1];
          v98 = *v94 + v96;
          v99 = *((double *)v80 + 3);
          v100 = v96 + *((double *)v80 + 2) * 0.5 - vabdd_f64(v88, v98);
          if (v88 >= v98)
          {
            v101 = (double *)(v80 + 96);
            v102 = (double *)(v80 + 112);
            if (*v89 == 0.0 || (v101 = (double *)(v80 + 96), v102 = (double *)(v80 + 112), v100 < *v89))
LABEL_48:
              *v101 = v100;
          }
          else
          {
            v101 = (double *)(v80 + 72);
            v102 = (double *)(v80 + 88);
            if (*v90 == 0.0)
              goto LABEL_48;
            v101 = (double *)(v80 + 72);
            v102 = (double *)(v80 + 88);
            if (v100 < *v90)
              goto LABEL_48;
          }
          v103 = v95 * 0.5;
          v104 = v97 + v103;
          v105 = v103 + v99 * 0.5 - vabdd_f64(v91, v97 + v103);
          *v102 = v105 + *v102;
          if (v91 >= v104)
          {
            v106 = (double *)(v80 + 128);
            v107 = (double *)(v80 + 136);
            if (*v92 != 0.0)
            {
              v106 = (double *)(v80 + 128);
              v107 = (double *)(v80 + 136);
              if (v105 >= *v92)
                goto LABEL_56;
            }
          }
          else
          {
            v106 = (double *)(v80 + 152);
            v107 = (double *)(v80 + 160);
            if (*v93 != 0.0)
            {
              v106 = (double *)(v80 + 152);
              v107 = (double *)(v80 + 160);
              if (v105 >= *v93)
                goto LABEL_56;
            }
          }
          *v106 = v105;
LABEL_56:
          *v107 = v100 + *v107;
          ++v87;
        }
        while (v86 != v87);
      }
      v108 = v81 - v82;
      v109 = v83 - v84;
      *((double *)v80 + 9) = -*((double *)v80 + 9);
      *((double *)v80 + 19) = -*((double *)v80 + 19);
      fcr_validateMove((CGRect *)v80, (uint64_t)(v80 + 72), v82, v84, v108, v109);
      fcr_validateMove((CGRect *)v80, (uint64_t)(v80 + 96), v82, v84, v108, v109);
      fcr_validateMove((CGRect *)v80, (uint64_t)(v80 + 144), v82, v84, v108, v109);
      fcr_validateMove((CGRect *)v80, (uint64_t)(v80 + 120), v82, v84, v108, v109);
      v110 = *((double *)v80 + 11);
      v111 = *((double *)v80 + 14);
      v112 = v110 <= v111;
      if (v110 <= v111)
        v110 = *((double *)v80 + 14);
      v113 = 96;
      if (!v112)
        v113 = 72;
      v114 = *(_QWORD *)&v80[v113];
      v115 = *((double *)v80 + 17);
      v116 = *((double *)v80 + 20);
      v117 = v115 <= v116;
      if (v115 <= v116)
        v115 = *((double *)v80 + 20);
      v118 = 152;
      if (!v117)
        v118 = 128;
      v119 = *(_QWORD *)&v80[v118];
      if (v110 > 0.0 || v115 > 0.0)
      {
        _NF = v110 > 0.0 && *((double *)v80 + 2) < *((double *)v80 + 3);
        v21 = v148;
        v20 = a2;
        v22 = v147;
        v27 = -1.0;
        v28 = 1.0;
        v76 = v154;
        v77 = v155;
        v75 = v150;
        if (_NF)
        {
          *((_QWORD *)v80 + 21) = v114;
          *((_QWORD *)v80 + 22) = 0;
          *((double *)v80 + 23) = v110;
        }
        else
        {
          *((_QWORD *)v80 + 21) = 0;
          v110 = v115;
          *((_QWORD *)v80 + 22) = v119;
          *((double *)v80 + 23) = v115;
        }
        v29 = a1;
      }
      else
      {
        *((_QWORD *)v80 + 21) = 0;
        *((_QWORD *)v80 + 22) = 0;
        v110 = 0.0;
        *((_QWORD *)v80 + 23) = 0;
        v75 = v150;
        v29 = a1;
        v21 = v148;
        v20 = a2;
        v22 = v147;
        v27 = -1.0;
        v28 = 1.0;
        v76 = v154;
        v77 = v155;
      }
      if (v78 < v110)
      {
        v77 = v76;
        v78 = v110;
      }
LABEL_77:
      ++v76;
    }
    while (v76 != v75);
    if (v78 <= 0.0 || v77 < 0)
    {
      a3 = v142;
      if (!v153)
        break;
      v133 = CFArrayGetCount(v29);
      if (v133 >= 1)
      {
        v134 = v133;
        for (n = 0; n != v134; ++n)
          *((_DWORD *)CFArrayGetValueAtIndex(v29, n) + 48) = 0;
      }
      v136 = v146 - 1;
    }
    else
    {
      v121 = (char *)CFArrayGetValueAtIndex(v29, v77);
      a3 = v142;
      if (v121)
      {
        *(float64x2_t *)v121 = vaddq_f64(*(float64x2_t *)(v121 + 168), *(float64x2_t *)v121);
        ++*((_DWORD *)v121 + 48);
      }
      v122 = CFArrayGetCount(v29);
      if (v122)
      {
        v123 = v122;
        v124 = CFDataGetLength(theData) / (unint64_t)(208 * v122);
        if (v124 >= 1)
        {
          BytePtr = CFDataGetBytePtr(theData);
          v126 = 0;
          while (1)
          {
            if (v123 < 1)
            {
              v127 = 0;
            }
            else
            {
              v127 = 0;
              v128 = 0;
              v129 = BytePtr;
              do
              {
                v130 = CFArrayGetValueAtIndex(a1, v128);
                if (!memcmp(v129, v130, 0xD0uLL))
                  ++v127;
                ++v128;
                v129 += 208;
              }
              while (v123 != v128);
            }
            if (v123 == v127)
              break;
            ++v126;
            BytePtr += 208 * v123;
            if (v126 == v124)
              goto LABEL_94;
          }
LABEL_108:
          v29 = a1;
          break;
        }
LABEL_94:
        if (v123 < 1)
        {
          v29 = a1;
        }
        else
        {
          v131 = 0;
          v29 = a1;
          do
          {
            v132 = (const UInt8 *)CFArrayGetValueAtIndex(a1, v131);
            CFDataAppendBytes(theData, v132, 208);
            ++v131;
          }
          while (v123 != v131);
        }
      }
      v136 = v146;
    }
    v146 = v136 + 1;
  }
  while (v136 + 1 < v143);
  CFRelease(theData);
  LODWORD(result) = fcr_moveIntoSafeRegion(v29, v138, v139, v140, v141);
  v137 = v146;
LABEL_111:
  if (v137 > 1)
    return (CFMutableDataRef)1;
  else
    return (CFMutableDataRef)result;
}

uint64_t fcr_moveIntoSafeRegion(CFArrayRef theArray, double a2, double a3, double a4, double a5)
{
  char v5;
  const __CFArray *MutableCopy;
  const __CFArray *v11;
  char v12;
  double v13;
  uint64_t Count;
  CFIndex v15;
  char v16;
  double v17;
  double *ValueAtIndex;
  double v19;
  double v20;
  CFIndex v21;
  double *v22;
  CFIndex v23;
  double *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  double v37;
  char v38;
  double v39;
  uint64_t v40;
  CFIndex v41;
  char v42;
  double v43;
  double *v44;
  double v45;
  double v46;
  CFIndex v47;
  double *v48;
  CFIndex v49;
  double *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  double v63;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  CFRange v93;
  CFRange v94;

  v5 = 0;
  if (a4 > 0.0 && a5 > 0.0)
  {
    MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theArray);
    if (MutableCopy)
    {
      v11 = MutableCopy;
      v65 = 0;
      v66 = 0;
      v12 = fcr_sweepBottomUp(MutableCopy, (double *)&v66, a3);
      v13 = a3 + a5;
      Count = CFArrayGetCount(v11);
      v93.location = 0;
      v93.length = Count;
      CFArraySortValues(v11, v93, (CFComparatorFunction)fcr_objComparatorTop, 0);
      if (Count < 1)
      {
        v16 = 0;
      }
      else
      {
        v15 = 0;
        v16 = 0;
        v17 = a3 + a5;
        do
        {
          ValueAtIndex = (double *)CFArrayGetValueAtIndex(v11, v15);
          v19 = ValueAtIndex[1];
          v20 = ValueAtIndex[3];
          if (v19 + v20 > v13)
          {
            v19 = v13 - v20;
            ValueAtIndex[1] = v13 - v20;
            v16 = 1;
          }
          v17 = fmin(v17, v19);
          ++v15;
        }
        while (Count != v15);
        if ((v16 & (Count > 1)) == 1)
        {
          v21 = 1;
          do
          {
            v22 = (double *)CFArrayGetValueAtIndex(v11, v21);
            v23 = 0;
            do
            {
              v24 = (double *)CFArrayGetValueAtIndex(v11, v23);
              v25 = *((_OWORD *)v22 + 11);
              v90 = *((_OWORD *)v22 + 10);
              v91 = v25;
              v92 = *((_OWORD *)v22 + 12);
              v26 = *((_OWORD *)v22 + 7);
              v86 = *((_OWORD *)v22 + 6);
              v87 = v26;
              v27 = *((_OWORD *)v22 + 9);
              v88 = *((_OWORD *)v22 + 8);
              v89 = v27;
              v28 = *((_OWORD *)v22 + 3);
              v82 = *((_OWORD *)v22 + 2);
              v83 = v28;
              v29 = *((_OWORD *)v22 + 5);
              v84 = *((_OWORD *)v22 + 4);
              v85 = v29;
              v30 = *((_OWORD *)v22 + 1);
              v80 = *(_OWORD *)v22;
              v81 = v30;
              v31 = *((_OWORD *)v24 + 11);
              v77 = *((_OWORD *)v24 + 10);
              v78 = v31;
              v79 = *((_OWORD *)v24 + 12);
              v32 = *((_OWORD *)v24 + 7);
              v73 = *((_OWORD *)v24 + 6);
              v74 = v32;
              v33 = *((_OWORD *)v24 + 9);
              v75 = *((_OWORD *)v24 + 8);
              v76 = v33;
              v34 = *((_OWORD *)v24 + 3);
              v69 = *((_OWORD *)v24 + 2);
              v70 = v34;
              v35 = *((_OWORD *)v24 + 5);
              v71 = *((_OWORD *)v24 + 4);
              v72 = v35;
              v36 = *((_OWORD *)v24 + 1);
              v67 = *(_OWORD *)v24;
              v68 = v36;
              if (fcr_isOverlap((double *)&v80, (double *)&v67))
              {
                v37 = v24[1] - v22[3];
                v22[1] = v37;
                v17 = fmin(v17, v37);
              }
              ++v23;
            }
            while (v21 != v23);
            ++v21;
          }
          while (v21 != Count);
          v16 = 1;
        }
        v13 = v17;
      }
      if (v13 < a3)
        fcr_sweepBottomUp(v11, (double *)&v66, (a3 + v13) * 0.5);
      v38 = fcr_sweepLeftRight(v11, (double *)&v65, a2);
      v39 = a2 + a4;
      v40 = CFArrayGetCount(v11);
      v94.location = 0;
      v94.length = v40;
      CFArraySortValues(v11, v94, (CFComparatorFunction)fcr_objComparatorRight, 0);
      if (v40 < 1)
      {
        v42 = 0;
      }
      else
      {
        v41 = 0;
        v42 = 0;
        v43 = a2 + a4;
        do
        {
          v44 = (double *)CFArrayGetValueAtIndex(v11, v41);
          v45 = *v44;
          v46 = v44[2];
          if (*v44 + v46 > v39)
          {
            v45 = v39 - v46;
            *v44 = v39 - v46;
            v42 = 1;
          }
          v43 = fmin(v43, v45);
          ++v41;
        }
        while (v40 != v41);
        if ((v42 & (v40 > 1)) == 1)
        {
          v47 = 1;
          do
          {
            v48 = (double *)CFArrayGetValueAtIndex(v11, v47);
            v49 = 0;
            do
            {
              v50 = (double *)CFArrayGetValueAtIndex(v11, v49);
              v51 = *((_OWORD *)v48 + 11);
              v90 = *((_OWORD *)v48 + 10);
              v91 = v51;
              v92 = *((_OWORD *)v48 + 12);
              v52 = *((_OWORD *)v48 + 7);
              v86 = *((_OWORD *)v48 + 6);
              v87 = v52;
              v53 = *((_OWORD *)v48 + 9);
              v88 = *((_OWORD *)v48 + 8);
              v89 = v53;
              v54 = *((_OWORD *)v48 + 3);
              v82 = *((_OWORD *)v48 + 2);
              v83 = v54;
              v55 = *((_OWORD *)v48 + 5);
              v84 = *((_OWORD *)v48 + 4);
              v85 = v55;
              v56 = *((_OWORD *)v48 + 1);
              v80 = *(_OWORD *)v48;
              v81 = v56;
              v57 = *((_OWORD *)v50 + 11);
              v77 = *((_OWORD *)v50 + 10);
              v78 = v57;
              v79 = *((_OWORD *)v50 + 12);
              v58 = *((_OWORD *)v50 + 7);
              v73 = *((_OWORD *)v50 + 6);
              v74 = v58;
              v59 = *((_OWORD *)v50 + 9);
              v75 = *((_OWORD *)v50 + 8);
              v76 = v59;
              v60 = *((_OWORD *)v50 + 3);
              v69 = *((_OWORD *)v50 + 2);
              v70 = v60;
              v61 = *((_OWORD *)v50 + 5);
              v71 = *((_OWORD *)v50 + 4);
              v72 = v61;
              v62 = *((_OWORD *)v50 + 1);
              v67 = *(_OWORD *)v50;
              v68 = v62;
              if (fcr_isOverlap((double *)&v80, (double *)&v67))
              {
                v63 = *v50 - v48[2];
                *v48 = v63;
                v43 = fmin(v43, v63);
              }
              ++v49;
            }
            while (v47 != v49);
            ++v47;
          }
          while (v47 != v40);
          v42 = 1;
        }
        v39 = v43;
      }
      v5 = v42 | v38 | v16 | v12;
      if (v39 < a2)
        fcr_sweepLeftRight(v11, (double *)&v65, (a2 + v39) * 0.5);
      CFRelease(v11);
    }
    else
    {
      v5 = 0;
    }
  }
  return v5 & 1;
}

BOOL fcr_isOverlap(double *a1, double *a2)
{
  return vabdd_f64(*a1 + a1[2] * 0.5, *a2 + a2[2] * 0.5) < a1[2] * 0.5 + a2[2] * 0.5 + -3.0
      && vabdd_f64(a1[1] + a1[3] * 0.5, a2[1] + a2[3] * 0.5) < a2[3] * 0.5 + a1[3] * 0.5 + -3.0;
}

uint64_t fcr_objComparatorX(double *a1, double *a2)
{
  double v2;
  double v3;

  v2 = *a1 + a1[2] * 0.5;
  v3 = *a2 + a2[2] * 0.5;
  if (v2 < v3)
    return -1;
  else
    return v2 > v3;
}

uint64_t fcr_objComparatorY(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;

  v2 = *(double *)(a1 + 8) + *(double *)(a1 + 24) * 0.5;
  v3 = *(double *)(a2 + 8) + *(double *)(a2 + 24) * 0.5;
  if (v2 < v3)
    return -1;
  else
    return v2 > v3;
}

void fcr_validateMove(CGRect *a1, uint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  double MaxY;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v21;
  double v22;
  double v23;
  double v25;
  double v26;
  double MaxX;
  double MinY;
  double MinX;
  CGRect v31;
  CGRect v32;
  CGRect v33;
  CGRect v34;

  MinX = CGRectGetMinX(*a1);
  MaxX = CGRectGetMaxX(*a1);
  MinY = CGRectGetMinY(*a1);
  MaxY = CGRectGetMaxY(*a1);
  v31.origin.x = a3;
  v31.origin.y = a4;
  v31.size.width = a5;
  v31.size.height = a6;
  v13 = CGRectGetMinX(v31);
  v32.origin.x = a3;
  v32.origin.y = a4;
  v32.size.width = a5;
  v32.size.height = a6;
  v14 = CGRectGetMaxX(v32);
  v33.origin.x = a3;
  v33.origin.y = a4;
  v33.size.width = a5;
  v33.size.height = a6;
  v15 = CGRectGetMinY(v33);
  v34.origin.x = a3;
  v34.origin.y = a4;
  v34.size.width = a5;
  v34.size.height = a6;
  v16 = CGRectGetMaxY(v34);
  v17 = *(double *)a2;
  v18 = MinX + *(double *)a2;
  if (v18 < v13)
    v17 = v13 - MinX;
  v19 = MaxX + v17;
  if (MaxX + v17 > v14)
    v17 = v14 - MaxX;
  if (v18 < v13 || v19 > v14)
    *(double *)a2 = v17;
  v21 = *(double *)(a2 + 8);
  v22 = MinY + v21;
  if (MinY + v21 < v15)
    v21 = v15 - MinY;
  v23 = MaxY + v21;
  if (MaxY + v21 > v16)
    v21 = v16 - MaxY;
  if (v22 < v15 || v23 > v16)
    *(double *)(a2 + 8) = v21;
  v25 = fabs(v17);
  v26 = fabs(v21);
  if (v25 <= 3.0 && v26 <= 3.0)
    *(_QWORD *)(a2 + 16) = 0;
}

uint64_t fcr_sweepBottomUp(const __CFArray *a1, double *a2, double a3)
{
  uint64_t Count;
  CFIndex v7;
  char v8;
  double *ValueAtIndex;
  double v10;
  CFIndex v11;
  double *v12;
  CFIndex v13;
  double *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  double v27;
  _OWORD v29[13];
  _OWORD v30[13];
  CFRange v31;

  Count = CFArrayGetCount(a1);
  *a2 = a3;
  v31.location = 0;
  v31.length = Count;
  CFArraySortValues(a1, v31, (CFComparatorFunction)fcr_objComparatorBottom, 0);
  if (Count < 1)
  {
    v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    do
    {
      ValueAtIndex = (double *)CFArrayGetValueAtIndex(a1, v7);
      v10 = ValueAtIndex[1];
      if (v10 < a3)
      {
        ValueAtIndex[1] = a3;
        v8 = 1;
        v10 = a3;
      }
      *a2 = fmax(*a2, v10 + ValueAtIndex[3]);
      ++v7;
    }
    while (Count != v7);
    if ((v8 & (Count > 1)) == 1)
    {
      v11 = 1;
      do
      {
        v12 = (double *)CFArrayGetValueAtIndex(a1, v11);
        v13 = 0;
        do
        {
          v14 = (double *)CFArrayGetValueAtIndex(a1, v13);
          v15 = *((_OWORD *)v12 + 11);
          v30[10] = *((_OWORD *)v12 + 10);
          v30[11] = v15;
          v30[12] = *((_OWORD *)v12 + 12);
          v16 = *((_OWORD *)v12 + 7);
          v30[6] = *((_OWORD *)v12 + 6);
          v30[7] = v16;
          v17 = *((_OWORD *)v12 + 9);
          v30[8] = *((_OWORD *)v12 + 8);
          v30[9] = v17;
          v18 = *((_OWORD *)v12 + 3);
          v30[2] = *((_OWORD *)v12 + 2);
          v30[3] = v18;
          v19 = *((_OWORD *)v12 + 5);
          v30[4] = *((_OWORD *)v12 + 4);
          v30[5] = v19;
          v20 = *((_OWORD *)v12 + 1);
          v30[0] = *(_OWORD *)v12;
          v30[1] = v20;
          v21 = *((_OWORD *)v14 + 11);
          v29[10] = *((_OWORD *)v14 + 10);
          v29[11] = v21;
          v29[12] = *((_OWORD *)v14 + 12);
          v22 = *((_OWORD *)v14 + 7);
          v29[6] = *((_OWORD *)v14 + 6);
          v29[7] = v22;
          v23 = *((_OWORD *)v14 + 9);
          v29[8] = *((_OWORD *)v14 + 8);
          v29[9] = v23;
          v24 = *((_OWORD *)v14 + 3);
          v29[2] = *((_OWORD *)v14 + 2);
          v29[3] = v24;
          v25 = *((_OWORD *)v14 + 5);
          v29[4] = *((_OWORD *)v14 + 4);
          v29[5] = v25;
          v26 = *((_OWORD *)v14 + 1);
          v29[0] = *(_OWORD *)v14;
          v29[1] = v26;
          if (fcr_isOverlap((double *)v30, (double *)v29))
          {
            v27 = v14[1] + v14[3];
            v12[1] = v27;
            *a2 = fmax(*a2, v27 + v12[3]);
          }
          ++v13;
        }
        while (v11 != v13);
        ++v11;
      }
      while (v11 != Count);
    }
  }
  return v8 & 1;
}

uint64_t fcr_sweepLeftRight(const __CFArray *a1, double *a2, double a3)
{
  uint64_t Count;
  CFIndex v7;
  char v8;
  double *ValueAtIndex;
  double v10;
  CFIndex v11;
  double *v12;
  CFIndex v13;
  double *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  double v27;
  _OWORD v29[13];
  _OWORD v30[13];
  CFRange v31;

  Count = CFArrayGetCount(a1);
  *a2 = a3;
  v31.location = 0;
  v31.length = Count;
  CFArraySortValues(a1, v31, (CFComparatorFunction)fcr_objComparatorLeft, 0);
  if (Count < 1)
  {
    v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    do
    {
      ValueAtIndex = (double *)CFArrayGetValueAtIndex(a1, v7);
      v10 = *ValueAtIndex;
      if (*ValueAtIndex < a3)
      {
        *ValueAtIndex = a3;
        v8 = 1;
        v10 = a3;
      }
      *a2 = fmax(*a2, v10 + ValueAtIndex[2]);
      ++v7;
    }
    while (Count != v7);
    if ((v8 & (Count > 1)) == 1)
    {
      v11 = 1;
      do
      {
        v12 = (double *)CFArrayGetValueAtIndex(a1, v11);
        v13 = 0;
        do
        {
          v14 = (double *)CFArrayGetValueAtIndex(a1, v13);
          v15 = *((_OWORD *)v12 + 11);
          v30[10] = *((_OWORD *)v12 + 10);
          v30[11] = v15;
          v30[12] = *((_OWORD *)v12 + 12);
          v16 = *((_OWORD *)v12 + 7);
          v30[6] = *((_OWORD *)v12 + 6);
          v30[7] = v16;
          v17 = *((_OWORD *)v12 + 9);
          v30[8] = *((_OWORD *)v12 + 8);
          v30[9] = v17;
          v18 = *((_OWORD *)v12 + 3);
          v30[2] = *((_OWORD *)v12 + 2);
          v30[3] = v18;
          v19 = *((_OWORD *)v12 + 5);
          v30[4] = *((_OWORD *)v12 + 4);
          v30[5] = v19;
          v20 = *((_OWORD *)v12 + 1);
          v30[0] = *(_OWORD *)v12;
          v30[1] = v20;
          v21 = *((_OWORD *)v14 + 11);
          v29[10] = *((_OWORD *)v14 + 10);
          v29[11] = v21;
          v29[12] = *((_OWORD *)v14 + 12);
          v22 = *((_OWORD *)v14 + 7);
          v29[6] = *((_OWORD *)v14 + 6);
          v29[7] = v22;
          v23 = *((_OWORD *)v14 + 9);
          v29[8] = *((_OWORD *)v14 + 8);
          v29[9] = v23;
          v24 = *((_OWORD *)v14 + 3);
          v29[2] = *((_OWORD *)v14 + 2);
          v29[3] = v24;
          v25 = *((_OWORD *)v14 + 5);
          v29[4] = *((_OWORD *)v14 + 4);
          v29[5] = v25;
          v26 = *((_OWORD *)v14 + 1);
          v29[0] = *(_OWORD *)v14;
          v29[1] = v26;
          if (fcr_isOverlap((double *)v30, (double *)v29))
          {
            v27 = *v14 + v14[2];
            *v12 = v27;
            *a2 = fmax(*a2, v27 + v12[2]);
          }
          ++v13;
        }
        while (v11 != v13);
        ++v11;
      }
      while (v11 != Count);
    }
  }
  return v8 & 1;
}

uint64_t fcr_objComparatorBottom(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;

  v2 = *(double *)(a1 + 8);
  v3 = *(double *)(a2 + 8);
  if (v2 < v3)
    return -1;
  else
    return v2 > v3;
}

uint64_t fcr_objComparatorTop(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;

  v2 = *(double *)(a1 + 8) + *(double *)(a1 + 24);
  v3 = *(double *)(a2 + 8) + *(double *)(a2 + 24);
  if (v2 > v3)
    return -1;
  else
    return v2 < v3;
}

uint64_t fcr_objComparatorLeft(double *a1, double *a2)
{
  if (*a1 < *a2)
    return -1;
  else
    return *a1 > *a2;
}

uint64_t fcr_objComparatorRight(double *a1, double *a2)
{
  double v2;
  double v3;

  v2 = *a1 + a1[2];
  v3 = *a2 + a2[2];
  if (v2 > v3)
    return -1;
  else
    return v2 < v3;
}

uint64_t FigMetadataConverterCreateForQuickTimeToFromiTunes(int a1, CFTypeRef cf1, CFTypeRef cf2, uint64_t a4, _QWORD *a5)
{
  const __CFString *v8;
  CFTypeRef v9;
  uint64_t v10;
  _QWORD *DerivedStorage;
  CFTypeRef v12;
  CFTypeRef v13;

  if (!a5)
    return FigSignalErrorAt();
  if (!CFEqual(cf1, cf2))
  {
    if (CFEqual(cf1, CFSTR("com.apple.quicktime.udta"))
      || CFEqual(cf1, CFSTR("org.mp4ra"))
      || CFEqual(cf1, CFSTR("com.apple.quicktime.mdta")))
    {
      v8 = CFSTR("com.apple.itunes");
      v9 = cf2;
    }
    else
    {
      if (!CFEqual(cf1, CFSTR("com.apple.itunes")))
        return FigSignalErrorAt();
      if (CFEqual(cf2, CFSTR("com.apple.quicktime.udta")) || CFEqual(cf2, CFSTR("org.mp4ra")))
        goto LABEL_8;
      v9 = cf2;
      v8 = CFSTR("com.apple.quicktime.mdta");
    }
    if (CFEqual(v9, v8))
      goto LABEL_8;
    return FigSignalErrorAt();
  }
LABEL_8:
  FigMetadataConverterGetClassID();
  v10 = CMDerivedObjectCreate();
  if (!(_DWORD)v10)
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    if (cf1)
      v12 = CFRetain(cf1);
    else
      v12 = 0;
    *DerivedStorage = v12;
    if (cf2)
      v13 = CFRetain(cf2);
    else
      v13 = 0;
    v10 = 0;
    DerivedStorage[1] = v13;
    *a5 = 0;
  }
  return v10;
}

void qtitunes_FigMetadataConverterFinalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
}

__CFString *qtitunes_FigMetadataConverterCopyDebugDescription()
{
  __CFString *Mutable;
  uint64_t DerivedStorage;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFStringAppendFormat(Mutable, 0, CFSTR(" FigQuickTimeiTunesMetadataConverter %p\n"), DerivedStorage);
  if (*(_QWORD *)(DerivedStorage + 8))
    CFStringAppendFormat(Mutable, 0, CFSTR("  Destination Format = %@\n"), *(_QWORD *)(DerivedStorage + 8));
  return Mutable;
}

uint64_t qtitunes_FigMetadataConverterCreateConvertedItem(uint64_t a1, const __CFDictionary *a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  uint64_t DerivedStorage;
  CFTypeRef *v9;
  const __CFString *Value;
  const __CFString *v11;
  uint64_t v12;
  CFTypeRef *v13;
  uint64_t v14;
  const __CFDictionary *OSTypeKeyToShortStringKeyMapping;
  CFTypeID v16;
  const __CFDictionary *OSTypeKeyToStringKeyMapping;
  CFTypeID v18;
  CFTypeID v19;
  uint64_t *v20;
  const __CFDictionary *v21;
  CFTypeID v22;
  CFTypeID v23;
  const __CFDictionary *v24;
  CFTypeID v25;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v27;
  __CFDictionary *v28;
  uint64_t *v29;
  const void *v30;
  int v31;
  CFTypeID v32;
  const __CFString *v33;
  const void *v34;
  CFTypeID v35;
  CFNumberRef v36;
  CFNumberRef v37;
  CFLocaleRef v38;
  CFLocaleRef v39;
  CFNumberRef v40;
  CFNumberRef v41;
  uint64_t *v42;
  const void *v43;
  const __CFString *v44;
  int v45;
  CFTypeID v46;
  CFNumberRef v47;
  const __CFString *v48;
  uint64_t ConvertedItem_DestinationiTunes;
  const __CFNumber *v50;
  const __CFLocale *v52;
  uint64_t v53;
  CFMutableDictionaryRef theDict;
  __CFDictionary *theDicta;
  int v56;
  unsigned int valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v9 = (CFTypeRef *)DerivedStorage;
    Value = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("key"));
    if (Value)
    {
      v11 = Value;
      if (CFEqual(*v9, v9[1]))
      {
        if (a4)
        {
          v12 = 0;
          *a4 = CFDictionaryCreateCopy(a3, a2);
          return v12;
        }
        return 0;
      }
      v13 = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
      if (CFEqual(*v13, CFSTR("com.apple.itunes")))
      {
        valuePtr = 0;
        v14 = CMBaseObjectGetDerivedStorage();
        OSTypeKeyToShortStringKeyMapping = (const __CFDictionary *)FigiTunesMetadataGetOSTypeKeyToShortStringKeyMapping();
        v16 = CFGetTypeID(v11);
        if (v16 == CFNumberGetTypeID())
        {
          CFNumberGetValue((CFNumberRef)v11, kCFNumberSInt32Type, &valuePtr);
        }
        else
        {
          v19 = CFGetTypeID(v11);
          if (v19 != CFStringGetTypeID() || !FigiTunesMetadataShortStringKeyToOSTypeKey(v11, &valuePtr))
            return 4294954813;
        }
        v11 = (const __CFString *)CFDictionaryGetValue(OSTypeKeyToShortStringKeyMapping, (const void *)valuePtr);
        if (!v11)
          goto LABEL_36;
        if (CFEqual(*(CFTypeRef *)(v14 + 8), CFSTR("com.apple.quicktime.udta")))
        {
          v20 = &giTunesKeyToUserDataKeyDict;
        }
        else if (CFEqual(*(CFTypeRef *)(v14 + 8), CFSTR("org.mp4ra")))
        {
          v20 = &giTunesKeyToISOUserDataKeyDict;
        }
        else
        {
          if (!CFEqual(*(CFTypeRef *)(v14 + 8), CFSTR("com.apple.quicktime.mdta")))
            return 4294954813;
          v20 = &giTunesKeyToQTMetadataKeyDict;
        }
        MEMORY[0x19402F294](&gCreateKeyArrayOnce_0, qtitunes_setUpKeyMapping);
        v24 = (const __CFDictionary *)*v20;
      }
      else if (CFEqual(*v13, CFSTR("com.apple.quicktime.udta")))
      {
        valuePtr = 0;
        OSTypeKeyToStringKeyMapping = (const __CFDictionary *)FigUserDataGetOSTypeKeyToStringKeyMapping();
        v18 = CFGetTypeID(v11);
        if (v18 == CFNumberGetTypeID())
        {
          CFNumberGetValue((CFNumberRef)v11, kCFNumberSInt32Type, &valuePtr);
        }
        else
        {
          v23 = CFGetTypeID(v11);
          if (v23 != CFStringGetTypeID() || !FigUserDataStringKeyToOSTypeKey(v11, &valuePtr))
            return 4294954813;
        }
        v11 = (const __CFString *)CFDictionaryGetValue(OSTypeKeyToStringKeyMapping, (const void *)valuePtr);
        if (!v11)
          goto LABEL_36;
        MEMORY[0x19402F294](&gCreateKeyArrayOnce_0, qtitunes_setUpKeyMapping);
        v24 = (const __CFDictionary *)gUserDataKeyToiTunesKeyDict;
      }
      else if (CFEqual(*v13, CFSTR("org.mp4ra")))
      {
        valuePtr = 0;
        v21 = (const __CFDictionary *)FigISOUserDataGetOSTypeKeyToStringKeyMapping();
        v22 = CFGetTypeID(v11);
        if (v22 == CFNumberGetTypeID())
        {
          CFNumberGetValue((CFNumberRef)v11, kCFNumberSInt32Type, &valuePtr);
        }
        else
        {
          v25 = CFGetTypeID(v11);
          if (v25 != CFStringGetTypeID() || !FigISOUserDataStringKeyToOSTypeKey(v11, &valuePtr))
            return 4294954813;
        }
        v11 = (const __CFString *)CFDictionaryGetValue(v21, (const void *)valuePtr);
        if (!v11)
          goto LABEL_36;
        MEMORY[0x19402F294](&gCreateKeyArrayOnce_0, qtitunes_setUpKeyMapping);
        v24 = (const __CFDictionary *)gISOUserDataKeyToiTunesKeyDict;
      }
      else
      {
        if (!CFEqual(*v13, CFSTR("com.apple.quicktime.mdta")))
        {
          v11 = 0;
          if (!a4)
            return 0;
          goto LABEL_38;
        }
        MEMORY[0x19402F294](&gCreateKeyArrayOnce_0, qtitunes_setUpKeyMapping);
        v24 = (const __CFDictionary *)gQTMetadataKeyToiTunesKeyDict;
      }
      v11 = (const __CFString *)CFDictionaryGetValue(v24, v11);
LABEL_36:
      if (v11)
      {
        if (!a4)
          return 0;
LABEL_38:
        Mutable = CFDictionaryCreateMutable(a3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (!Mutable)
          return FigSignalErrorAt();
        v27 = Mutable;
        if (CFEqual(v9[1], CFSTR("com.apple.quicktime.mdta")))
        {
          v28 = v27;
          v29 = (uint64_t *)CMBaseObjectGetDerivedStorage();
          valuePtr = 1;
          v30 = CFDictionaryGetValue(a2, CFSTR("value"));
          theDict = (CFMutableDictionaryRef)v11;
          v31 = CFEqual(v11, CFSTR("com.apple.quicktime.artwork"));
          v32 = CFGetTypeID(v30);
          if (v31)
          {
            if (v32 == CFDataGetTypeID()
              && !FigMetadataGetNumericalDataTypeForMetadataProperties(*v29, a2, (uint64_t)CFSTR("com.apple.quicktime.mdta"), &valuePtr, 0)&& valuePtr <= 0x1B&& ((1 << valuePtr) & 0x8006000) != 0)
            {
              v39 = 0;
              v27 = v28;
LABEL_56:
              v40 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
              if (v40)
              {
                v41 = v40;
                CFDictionaryAddValue(v27, CFSTR("dataType"), v40);
                CFDictionaryAddValue(v27, CFSTR("dataTypeNamespace"), CFSTR("com.apple.quicktime.mdta"));
                CFDictionaryAddValue(v27, CFSTR("key"), theDict);
                CFDictionaryAddValue(v27, CFSTR("value"), v30);
                CFDictionaryAddValue(v27, CFSTR("keyspace"), CFSTR("mdta"));
                CFRelease(v41);
                v12 = 0;
              }
              else
              {
                v12 = FigSignalErrorAt();
              }
              goto LABEL_58;
            }
          }
          else if (v32 == CFStringGetTypeID())
          {
            v38 = CFLocaleCreate(a3, CFSTR("en"));
            v27 = v28;
            if (!v38)
            {
              v12 = FigSignalErrorAt();
              goto LABEL_60;
            }
            v39 = v38;
            CFDictionaryAddValue(v28, CFSTR("locale"), v38);
            valuePtr = 1;
            goto LABEL_56;
          }
          v12 = 4294954813;
          v27 = v28;
          goto LABEL_44;
        }
        if (CFEqual(v9[1], CFSTR("com.apple.quicktime.udta")))
        {
          v33 = v11;
          v34 = CFDictionaryGetValue(a2, CFSTR("value"));
          v35 = CFGetTypeID(v34);
          if (v35 != CFStringGetTypeID())
          {
            v12 = 4294954813;
            goto LABEL_44;
          }
          valuePtr = 0;
          v36 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
          if (v36)
          {
            v37 = v36;
            CFDictionaryAddValue(v27, CFSTR("key"), v33);
            CFDictionaryAddValue(v27, CFSTR("value"), v34);
            CFDictionaryAddValue(v27, CFSTR("languageCode"), v37);
            CFDictionaryAddValue(v27, CFSTR("keyspace"), CFSTR("udta"));
            CFRelease(v37);
LABEL_61:
            v12 = 0;
            *a4 = v27;
            return v12;
          }
          ConvertedItem_DestinationiTunes = FigSignalErrorAt();
          if (!(_DWORD)ConvertedItem_DestinationiTunes)
            goto LABEL_61;
          goto LABEL_79;
        }
        if (!CFEqual(v9[1], CFSTR("org.mp4ra")))
        {
          if (CFEqual(v9[1], CFSTR("com.apple.itunes")))
          {
            ConvertedItem_DestinationiTunes = qtitunes_FigMetadataConverterCreateConvertedItem_DestinationiTunes(a1, a2, v11, v27);
            if (!(_DWORD)ConvertedItem_DestinationiTunes)
              goto LABEL_61;
          }
          else
          {
            ConvertedItem_DestinationiTunes = FigSignalErrorAt();
          }
LABEL_79:
          v12 = ConvertedItem_DestinationiTunes;
          goto LABEL_44;
        }
        theDicta = v27;
        v42 = (uint64_t *)CMBaseObjectGetDerivedStorage();
        v56 = 1;
        valuePtr = 0;
        v43 = CFDictionaryGetValue(a2, CFSTR("value"));
        v44 = v11;
        v45 = CFEqual(v11, CFSTR("thmb"));
        v46 = CFGetTypeID(v43);
        if (v45)
        {
          if (v46 == CFDataGetTypeID()
            && !FigMetadataGetNumericalDataTypeForMetadataProperties(*v42, a2, (uint64_t)CFSTR("com.apple.itunes"), &v56, 0)&& v56 == 13)
          {
            v27 = theDicta;
            CFDictionaryAddValue(theDicta, CFSTR("dataType"), (const void *)*MEMORY[0x1E0CA5BA8]);
            CFDictionaryAddValue(theDicta, CFSTR("dataTypeNamespace"), CFSTR("com.apple.uti"));
            v47 = 0;
            v39 = 0;
            v48 = v44;
            goto LABEL_85;
          }
        }
        else if (v46 == CFStringGetTypeID())
        {
          v50 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("languageCode"));
          if (v50)
          {
            v47 = v50;
            CFRetain(v50);
          }
          else
          {
            valuePtr = 0;
            v47 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
            if (!v47)
            {
              v12 = FigSignalErrorAt();
              v27 = theDicta;
              goto LABEL_60;
            }
          }
          CFDictionaryAddValue(theDicta, CFSTR("languageCode"), v47);
          v52 = (const __CFLocale *)CFDictionaryGetValue(a2, CFSTR("locale"));
          v48 = v44;
          if (v52)
          {
            v39 = v52;
            CFRetain(v52);
          }
          else
          {
            v39 = CFLocaleCreate(a3, CFSTR("en"));
            if (!v39)
            {
              v53 = FigSignalErrorAt();
              v27 = theDicta;
LABEL_86:
              CFRelease(v47);
              v12 = v53;
LABEL_58:
              if (v39)
                CFRelease(v39);
LABEL_60:
              if (!(_DWORD)v12)
                goto LABEL_61;
LABEL_44:
              CFRelease(v27);
              return v12;
            }
          }
          v27 = theDicta;
          CFDictionaryAddValue(theDicta, CFSTR("locale"), v39);
LABEL_85:
          CFDictionaryAddValue(v27, CFSTR("key"), v48);
          CFDictionaryAddValue(v27, CFSTR("value"), v43);
          CFDictionaryAddValue(v27, CFSTR("keyspace"), CFSTR("uiso"));
          v53 = 0;
          v12 = 0;
          if (!v47)
            goto LABEL_58;
          goto LABEL_86;
        }
        v12 = 4294954813;
        v27 = theDicta;
        goto LABEL_44;
      }
      return 4294954813;
    }
  }
  return FigSignalErrorAt();
}

uint64_t qtitunes_FigMetadataConverterCreateConvertedItem_DestinationiTunes(uint64_t a1, const __CFDictionary *a2, const void *a3, __CFDictionary *a4)
{
  uint64_t *DerivedStorage;
  const void *Value;
  int v9;
  CFTypeID v10;
  uint64_t result;
  const __CFLocale *v12;
  const __CFNumber *v13;
  CFNumberRef v14;
  CFNumberRef v15;
  const __CFString *v16;
  unsigned int v17;
  int valuePtr;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v17 = 1;
  valuePtr = 0;
  Value = CFDictionaryGetValue(a2, CFSTR("value"));
  v9 = CFEqual(a3, CFSTR("covr"));
  v10 = CFGetTypeID(Value);
  if (!v9)
  {
    if (v10 != CFStringGetTypeID())
      return 4294954813;
    v12 = (const __CFLocale *)CFDictionaryGetValue(a2, CFSTR("locale"));
    v13 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("languageCode"));
    if (v13)
    {
      CFNumberGetValue(v13, kCFNumberSInt32Type, &valuePtr);
      if (valuePtr && valuePtr != 5575)
        return 4294954813;
    }
    else if (v12)
    {
      v16 = (const __CFString *)CFLocaleGetValue(v12, (CFLocaleKey)*MEMORY[0x1E0C9B088]);
      if (v16)
      {
        if (CFStringCompare(v16, CFSTR("en"), 0))
          return 4294954813;
      }
    }
LABEL_17:
    CFDictionaryAddValue(a4, CFSTR("key"), a3);
    CFDictionaryAddValue(a4, CFSTR("value"), Value);
    CFDictionaryAddValue(a4, CFSTR("keyspace"), CFSTR("itsk"));
    return 0;
  }
  if (v10 != CFDataGetTypeID()
    || FigMetadataGetNumericalDataTypeForMetadataProperties(*DerivedStorage, a2, (uint64_t)CFSTR("com.apple.itunes"), &v17, 0))
  {
    return 4294954813;
  }
  result = 4294954813;
  if (v17 <= 0x1B && ((1 << v17) & 0x8006000) != 0)
  {
    v14 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &v17);
    if (!v14)
      return FigSignalErrorAt();
    v15 = v14;
    CFDictionaryAddValue(a4, CFSTR("dataType"), v14);
    CFDictionaryAddValue(a4, CFSTR("dataTypeNamespace"), CFSTR("com.apple.itunes"));
    CFRelease(v15);
    goto LABEL_17;
  }
  return result;
}

CFDictionaryRef qtitunes_setUpKeyMapping()
{
  const __CFAllocator *v0;
  const CFDictionaryKeyCallBacks *v1;
  const CFDictionaryValueCallBacks *v2;
  const CFDictionaryKeyCallBacks *v3;
  const CFDictionaryValueCallBacks *v4;
  CFDictionaryRef result;
  const __CFAllocator *allocator;
  void *v7;
  const __CFString *v8;
  const __CFString *v9;
  const __CFString *v10;
  const __CFString *v11;
  const __CFString *v12;
  const __CFString *v13;
  const __CFString *v14;
  const __CFString *v15;
  const __CFString *v16;
  const __CFString *v17;
  const __CFString *v18;
  const __CFString *v19;
  const __CFString *v20;
  const __CFString *v21;
  const __CFString *v22;
  const __CFString *v23;
  const __CFString *v24;
  const __CFString *v25;
  const __CFString *v26;
  const __CFString *v27;
  void *v28;
  const __CFString *v29;
  const __CFString *v30;
  const __CFString *v31;
  const __CFString *v32;
  const __CFString *v33;
  const __CFString *v34;
  const __CFString *v35;
  const __CFString *v36;
  const __CFString *v37;
  const __CFString *v38;
  const __CFString *v39;
  const __CFString *v40;
  const __CFString *v41;
  const __CFString *v42;
  const __CFString *v43;
  const __CFString *v44;
  const __CFString *v45;
  const __CFString *v46;
  const __CFString *v47;
  const __CFString *v48;
  void *values;
  const __CFString *v50;
  const __CFString *v51;
  const __CFString *v52;
  const __CFString *v53;
  const __CFString *v54;
  const __CFString *v55;
  const __CFString *v56;
  const __CFString *v57;
  const __CFString *v58;
  const __CFString *v59;
  const __CFString *v60;
  const __CFString *v61;
  const __CFString *v62;
  const __CFString *v63;
  const __CFString *v64;
  const __CFString *v65;
  const __CFString *v66;
  const __CFString *v67;
  const __CFString *v68;
  const __CFString *v69;
  const __CFString *v70;
  const __CFString *v71;
  void *keys;
  const __CFString *v73;
  const __CFString *v74;
  const __CFString *v75;
  const __CFString *v76;
  const __CFString *v77;
  const __CFString *v78;
  const __CFString *v79;
  const __CFString *v80;
  const __CFString *v81;
  const __CFString *v82;
  const __CFString *v83;
  const __CFString *v84;
  const __CFString *v85;
  const __CFString *v86;
  const __CFString *v87;
  const __CFString *v88;
  const __CFString *v89;
  const __CFString *v90;
  const __CFString *v91;
  const __CFString *v92;
  const __CFString *v93;
  const __CFString *v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  keys = CFSTR("com.apple.quicktime.arranger");
  v73 = CFSTR("com.apple.quicktime.album");
  v74 = CFSTR("com.apple.quicktime.artist");
  v75 = CFSTR("com.apple.quicktime.author");
  v76 = CFSTR("com.apple.quicktime.comment");
  v77 = CFSTR("com.apple.quicktime.copyright");
  v78 = CFSTR("com.apple.quicktime.artwork");
  v79 = CFSTR("com.apple.quicktime.creationdate");
  v80 = CFSTR("com.apple.quicktime.description");
  v81 = CFSTR("com.apple.quicktime.information");
  v82 = CFSTR("com.apple.quicktime.director");
  v83 = CFSTR("com.apple.quicktime.encodedby");
  v84 = CFSTR("com.apple.quicktime.displayname");
  v85 = CFSTR("com.apple.quicktime.title");
  v86 = CFSTR("com.apple.quicktime.genre");
  v87 = CFSTR("com.apple.quicktime.make");
  v88 = CFSTR("com.apple.quicktime.originalartist");
  v89 = CFSTR("com.apple.quicktime.performer");
  v90 = CFSTR("com.apple.quicktime.producer");
  v91 = CFSTR("com.apple.quicktime.publisher");
  v92 = CFSTR("com.apple.quicktime.composer");
  v93 = CFSTR("com.apple.quicktime.credits");
  v94 = CFSTR("com.apple.quicktime.phonogramrights");
  v7 = CFSTR("com.apple.quicktime.arranger");
  v8 = CFSTR("com.apple.quicktime.album");
  values = CFSTR("@arg");
  v50 = CFSTR("@alb");
  v9 = CFSTR("com.apple.quicktime.artist");
  v51 = CFSTR("@ART");
  v52 = CFSTR("@aut");
  v10 = CFSTR("com.apple.quicktime.author");
  v11 = CFSTR("com.apple.quicktime.comment");
  v53 = CFSTR("@cmt");
  v54 = CFSTR("cprt");
  v12 = CFSTR("com.apple.quicktime.copyright");
  v13 = CFSTR("com.apple.quicktime.artwork");
  v14 = CFSTR("com.apple.quicktime.creationdate");
  v55 = CFSTR("covr");
  v56 = CFSTR("@day");
  v15 = CFSTR("com.apple.quicktime.description");
  v57 = CFSTR("@des");
  v58 = CFSTR("@des");
  v16 = CFSTR("com.apple.quicktime.director");
  v59 = CFSTR("@dir");
  v60 = CFSTR("@enc");
  v17 = CFSTR("com.apple.quicktime.encodedby");
  v61 = CFSTR("@nam");
  v62 = CFSTR("@nam");
  v18 = CFSTR("com.apple.quicktime.displayname");
  v19 = CFSTR("com.apple.quicktime.genre");
  v63 = CFSTR("@gen");
  v64 = CFSTR("@mak");
  v20 = CFSTR("com.apple.quicktime.make");
  v21 = CFSTR("com.apple.quicktime.originalartist");
  v22 = CFSTR("com.apple.quicktime.performer");
  v65 = CFSTR("@ope");
  v66 = CFSTR("@prf");
  v23 = CFSTR("com.apple.quicktime.producer");
  v67 = CFSTR("@prd");
  v68 = CFSTR("@pub");
  v24 = CFSTR("com.apple.quicktime.publisher");
  v25 = CFSTR("com.apple.quicktime.composer");
  v69 = CFSTR("@wrt");
  v70 = CFSTR("@src");
  v26 = CFSTR("com.apple.quicktime.credits");
  v71 = CFSTR("@phg");
  v28 = CFSTR("@arg");
  v29 = CFSTR("@alb");
  v30 = CFSTR("@ART");
  v31 = CFSTR("@aut");
  v32 = CFSTR("@cmt");
  v33 = CFSTR("cprt");
  v34 = CFSTR("covr");
  v35 = CFSTR("@day");
  v36 = CFSTR("@des");
  v37 = CFSTR("@dir");
  v38 = CFSTR("@enc");
  v39 = CFSTR("@nam");
  v40 = CFSTR("@gen");
  v41 = CFSTR("@mak");
  v42 = CFSTR("@ope");
  v43 = CFSTR("@prf");
  v44 = CFSTR("@prd");
  v45 = CFSTR("@pub");
  v46 = CFSTR("@wrt");
  v47 = CFSTR("@src");
  v48 = CFSTR("@phg");
  v27 = CFSTR("com.apple.quicktime.phonogramrights");
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v1 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v2 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  gQTMetadataKeyToiTunesKeyDict = (uint64_t)CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&keys, (const void **)&values, 23, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  giTunesKeyToQTMetadataKeyDict = (uint64_t)CFDictionaryCreate(v0, (const void **)&v28, (const void **)&v7, 21, v1, v2);
  v80 = CFSTR("@inf");
  v84 = CFSTR("tnam");
  v28 = CFSTR("@arg");
  values = CFSTR("@arg");
  v50 = CFSTR("@alb");
  v29 = CFSTR("@alb");
  v53 = CFSTR("@cmt");
  v32 = CFSTR("@cmt");
  v59 = CFSTR("@enc");
  v37 = CFSTR("@enc");
  v62 = CFSTR("@gen");
  v39 = CFSTR("@gen");
  v40 = CFSTR("@mak");
  v63 = CFSTR("@mak");
  v68 = CFSTR("@wrt");
  v45 = CFSTR("@wrt");
  v46 = CFSTR("@src");
  v69 = CFSTR("@src");
  v70 = CFSTR("@phg");
  v47 = CFSTR("@phg");
  v7 = CFSTR("@arg");
  keys = CFSTR("@arg");
  v73 = CFSTR("@alb");
  v8 = CFSTR("@alb");
  v74 = CFSTR("@ART");
  v75 = CFSTR("@aut");
  v9 = CFSTR("@ART");
  v10 = CFSTR("@aut");
  v76 = CFSTR("@cmt");
  v77 = CFSTR("@cpy");
  v11 = CFSTR("@cmt");
  v12 = CFSTR("@cpy");
  v78 = CFSTR("@day");
  v79 = CFSTR("@des");
  v81 = CFSTR("@dir");
  v13 = CFSTR("@day");
  v14 = CFSTR("@des");
  v15 = CFSTR("@dir");
  v16 = CFSTR("@enc");
  v82 = CFSTR("@enc");
  v83 = CFSTR("@nam");
  v85 = CFSTR("@gen");
  v17 = CFSTR("@nam");
  v18 = CFSTR("@gen");
  v19 = CFSTR("@mak");
  v86 = CFSTR("@mak");
  v87 = CFSTR("@ope");
  v20 = CFSTR("@ope");
  v88 = CFSTR("@prf");
  v89 = CFSTR("@prd");
  v21 = CFSTR("@prf");
  v22 = CFSTR("@prd");
  v90 = CFSTR("@pub");
  v91 = CFSTR("@wrt");
  v23 = CFSTR("@pub");
  v24 = CFSTR("@wrt");
  v25 = CFSTR("@src");
  v26 = CFSTR("@phg");
  v92 = CFSTR("@src");
  v93 = CFSTR("@phg");
  v61 = CFSTR("@nam");
  v67 = CFSTR("@pub");
  v36 = CFSTR("@dir");
  v38 = CFSTR("@nam");
  v44 = CFSTR("@pub");
  v51 = CFSTR("@ART");
  v52 = CFSTR("@aut");
  v54 = CFSTR("cprt");
  v55 = CFSTR("@day");
  v56 = CFSTR("@des");
  v57 = CFSTR("@des");
  v58 = CFSTR("@dir");
  v60 = CFSTR("@nam");
  v64 = CFSTR("@ope");
  v65 = CFSTR("@prf");
  v66 = CFSTR("@prd");
  v30 = CFSTR("@ART");
  v31 = CFSTR("@aut");
  v33 = CFSTR("cprt");
  v34 = CFSTR("@day");
  v35 = CFSTR("@des");
  v41 = CFSTR("@ope");
  v42 = CFSTR("@prf");
  v43 = CFSTR("@prd");
  v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  gUserDataKeyToiTunesKeyDict = (uint64_t)CFDictionaryCreate(allocator, (const void **)&keys, (const void **)&values, 22, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  giTunesKeyToUserDataKeyDict = (uint64_t)CFDictionaryCreate(allocator, (const void **)&v7, (const void **)&v28, 20, v3, v4);
  v28 = CFSTR("cprt");
  v29 = CFSTR("perf");
  v30 = CFSTR("auth");
  v31 = CFSTR("dscp");
  v32 = CFSTR("titl");
  v33 = CFSTR("yrrc");
  v34 = CFSTR("thmb");
  v7 = CFSTR("cprt");
  v8 = CFSTR("@prf");
  v9 = CFSTR("@aut");
  v10 = CFSTR("@des");
  v11 = CFSTR("@nam");
  v12 = CFSTR("@day");
  v13 = CFSTR("covr");
  keys = CFSTR("cprt");
  v73 = CFSTR("@prf");
  v74 = CFSTR("@pub");
  v75 = CFSTR("@prd");
  v76 = CFSTR("@dir");
  v77 = CFSTR("@ART");
  v78 = CFSTR("@ope");
  v79 = CFSTR("@aut");
  v80 = CFSTR("@des");
  v81 = CFSTR("@nam");
  v82 = CFSTR("@day");
  v83 = CFSTR("covr");
  values = CFSTR("cprt");
  v50 = CFSTR("perf");
  v51 = CFSTR("perf");
  v52 = CFSTR("perf");
  v53 = CFSTR("perf");
  v54 = CFSTR("perf");
  v55 = CFSTR("perf");
  v56 = CFSTR("auth");
  v57 = CFSTR("dscp");
  v58 = CFSTR("titl");
  v59 = CFSTR("yrrc");
  v60 = CFSTR("thmb");
  gISOUserDataKeyToiTunesKeyDict = (uint64_t)CFDictionaryCreate(allocator, (const void **)&v28, (const void **)&v7, 7, v3, v4);
  result = CFDictionaryCreate(allocator, (const void **)&keys, (const void **)&values, 12, v3, v4);
  giTunesKeyToISOUserDataKeyDict = (uint64_t)result;
  return result;
}

uint64_t MTCopyStringsForMediaTypeAndSubType(unsigned int a1, uint64_t a2, CFStringRef *a3, CFStringRef *a4)
{
  __CFBundle *BundleWithIdentifier;
  __CFBundle *v9;
  uint64_t result;
  CFStringRef v11;
  OSStatus Property;
  const __CFString *v13;
  const __CFAllocator *v14;
  const __CFString *v15;
  const __CFString *v16;
  CFStringRef v17;
  _OWORD inSpecifier[2];
  uint64_t v19;
  UInt32 ioPropertyDataSize;
  const __CFString *outPropertyData;
  unsigned int v22;

  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.MediaToolbox"));
  if (!BundleWithIdentifier)
    return FigSignalErrorAt();
  v9 = BundleWithIdentifier;
  v22 = bswap32(a1);
  if (a3)
  {
    result = FigCopyMediaTypeString(BundleWithIdentifier, a1, a3);
    if ((_DWORD)result)
      return result;
    v11 = *a3;
    if (!a4)
      return 0;
  }
  else
  {
    v11 = 0;
    if (!a4)
      return 0;
  }
  outPropertyData = 0;
  if (!a1)
    return FigSignalErrorAt();
  if ((_DWORD)a2)
  {
    if (a1 == 1936684398)
    {
      v19 = 0;
      memset(inSpecifier, 0, sizeof(inSpecifier));
      ioPropertyDataSize = 8;
      DWORD2(inSpecifier[0]) = a2;
      Property = AudioFormatGetProperty(0x666E616Du, 0x28u, inSpecifier, &ioPropertyDataSize, &outPropertyData);
      v13 = outPropertyData;
      if (Property)
      {
        if (!outPropertyData)
          goto LABEL_19;
        return 0;
      }
      *a4 = outPropertyData;
      if (v13)
        return 0;
    }
LABEL_19:
    LODWORD(inSpecifier[0]) = bswap32(a2);
    v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (a1 == 1986618469 && a2 <= 0x28)
      v15 = CFStringCreateWithFormat(v14, 0, CFSTR("%.4s%d"), &v22, a2, *(_QWORD *)&inSpecifier[0]);
    else
      v15 = CFStringCreateWithFormat(v14, 0, CFSTR("%.4s%.4s"), &v22, inSpecifier, *(_QWORD *)&inSpecifier[0]);
    v16 = v15;
    if (v15)
    {
      v17 = CFBundleCopyLocalizedString(v9, v15, v15, CFSTR("MediaAndSubtypes"));
      *a4 = v17;
      if (v17 == v16)
      {
        CFRelease(v16);
        *a4 = CFStringCreateWithFormat(v14, 0, CFSTR("%.4s"), inSpecifier);
      }
      CFRelease(v16);
      return 0;
    }
    return FigSignalErrorAt();
  }
  if (a1 != 1868720741 && a1 != 1936749172 && a1 != 1885433455)
    return 0;
  if (v11)
  {
    *a4 = (CFStringRef)CFRetain(v11);
    return 0;
  }
  result = FigCopyMediaTypeString(v9, a1, a4);
  if (!(_DWORD)result)
    return 0;
  return result;
}

uint64_t FigCopyMediaTypeString(__CFBundle *a1, unsigned int a2, CFStringRef *a3)
{
  const __CFString *v5;
  const __CFString *v6;
  unsigned int v8;

  v8 = bswap32(a2);
  if (!a2)
    return FigSignalErrorAt();
  v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%.4s"), &v8);
  if (!v5)
    return FigSignalErrorAt();
  v6 = v5;
  *a3 = CFBundleCopyLocalizedString(a1, v5, v5, CFSTR("MediaAndSubtypes"));
  CFRelease(v6);
  return 0;
}

CFStringRef MTCopyLocalizedNameForMediaType(CMMediaType mediaType)
{
  CFStringRef v2;

  v2 = 0;
  MTCopyStringsForMediaTypeAndSubType(mediaType, 0, &v2, 0);
  return v2;
}

CFStringRef MTCopyLocalizedNameForMediaSubType(CMMediaType mediaType, FourCharCode mediaSubType)
{
  CFStringRef v3;

  v3 = 0;
  MTCopyStringsForMediaTypeAndSubType(mediaType, *(uint64_t *)&mediaSubType, 0, &v3);
  return v3;
}

__CFBundle *MTCopyLocalizedStringForVideoDynamicRange(int a1)
{
  __CFBundle *result;
  const __CFString *v3;

  result = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.MediaToolbox"));
  if (result)
  {
    if ((a1 - 1) > 9)
      v3 = CFSTR("VideoDynamicRangeUnknown");
    else
      v3 = off_1E2FA4C28[a1 - 1];
    return (__CFBundle *)CFBundleCopyLocalizedString(result, v3, v3, CFSTR("MediaAndSubtypes"));
  }
  return result;
}

uint64_t MTGetVideoDynamicRangeQualityGrade(int a1)
{
  if ((a1 - 1) > 9)
    return 0;
  else
    return byte_1932FCE88[a1 - 1];
}

__CFString *MTCopyStringForColorInfo(int a1, CMFormatDescriptionRef desc)
{
  const __CFString *Extension;
  const __CFString *v4;
  const __CFString *v5;
  CFPropertyListRef v6;
  signed int MediaSubType;
  int v8;
  unsigned __int16 v9;
  int v10;
  CFTypeID v11;
  CFTypeID v13;
  CFTypeID v15;
  __CFString *Mutable;
  int v17;
  CFTypeRef *v18;
  const __CFString *v19;
  const void *v21;
  int v22;
  char v23;
  const __CFString *v24;
  const void *v25;
  int v26;
  unsigned __int16 IntegerCodePointForString;
  unsigned __int16 v28;
  unsigned __int16 v29;
  const __CFString *v30;

  if (a1 != 1986618469)
    return 0;
  Extension = (const __CFString *)CMFormatDescriptionGetExtension(desc, (CFStringRef)*MEMORY[0x1E0CA8D68]);
  v4 = (const __CFString *)CMFormatDescriptionGetExtension(desc, (CFStringRef)*MEMORY[0x1E0CA8E98]);
  v5 = (const __CFString *)CMFormatDescriptionGetExtension(desc, (CFStringRef)*MEMORY[0x1E0CA8EE8]);
  v6 = CMFormatDescriptionGetExtension(desc, (CFStringRef)*MEMORY[0x1E0CA2220]);
  MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
  v8 = 0;
  if (MediaSubType <= 1685481572)
  {
    if (MediaSubType == 1667524657 || MediaSubType == 1684895096)
    {
LABEL_13:
      if (!Extension)
        return 0;
      goto LABEL_14;
    }
    v10 = 1685481521;
  }
  else
  {
    if (MediaSubType > 1902405732)
    {
      if (MediaSubType == 1902405733)
        goto LABEL_13;
      v9 = 28024;
    }
    else
    {
      if (MediaSubType == 1685481573)
        goto LABEL_13;
      v9 = 26673;
    }
    v10 = v9 | 0x71640000;
  }
  if (MediaSubType == v10)
    goto LABEL_13;
  v8 = 1;
  if (!Extension)
    return 0;
LABEL_14:
  v11 = CFGetTypeID(Extension);
  if (v11 == CFStringGetTypeID() && v4 != 0)
  {
    v13 = CFGetTypeID(v4);
    if (v13 == CFStringGetTypeID() && v5 != 0)
    {
      v15 = CFGetTypeID(v5);
      if (v15 == CFStringGetTypeID())
      {
        Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
        v17 = CFEqual(Extension, (CFTypeRef)*MEMORY[0x1E0CA8DA0]);
        v18 = (CFTypeRef *)MEMORY[0x1E0CA8D88];
        if (v17 && CFEqual(v4, (CFTypeRef)*MEMORY[0x1E0CA8D88]) && CFEqual(v5, (CFTypeRef)*MEMORY[0x1E0CA8F10]))
        {
          v19 = CFSTR("SD ");
          goto LABEL_60;
        }
        v21 = (const void *)*MEMORY[0x1E0CA8EB0];
        if (CFEqual(Extension, (CFTypeRef)*MEMORY[0x1E0CA8EB0])
          && CFEqual(v4, v21)
          && CFEqual(v5, (CFTypeRef)*MEMORY[0x1E0CA8F10]))
        {
          v19 = CFSTR("PAL ");
          goto LABEL_60;
        }
        if (CFEqual(Extension, *v18) && CFEqual(v4, v21))
        {
          v22 = CFEqual(v5, (CFTypeRef)*MEMORY[0x1E0CA8F18]);
          if (v22)
            v23 = 0;
          else
            v23 = v8;
          if (v22)
            v19 = CFSTR("HD ");
          else
            v19 = CFSTR("Dolby Vision ");
          if ((v23 & 1) == 0)
            goto LABEL_60;
        }
        else if (!v8)
        {
          v19 = CFSTR("Dolby Vision ");
          goto LABEL_60;
        }
        if (CFEqual(Extension, (CFTypeRef)*MEMORY[0x1E0CA2120]))
        {
          v24 = CFSTR("P3 D65 ");
        }
        else if (CFEqual(Extension, (CFTypeRef)*MEMORY[0x1E0CA2108]))
        {
          v24 = CFSTR("BT.2020 ");
        }
        else
        {
          if (!CFEqual(Extension, (CFTypeRef)*MEMORY[0x1E0CA20F8]))
          {
LABEL_53:
            v25 = (const void *)*MEMORY[0x1E0CA2338];
            v26 = CFEqual(v4, (CFTypeRef)*MEMORY[0x1E0CA2338]);
            if (v6 && v26)
            {
              v19 = CFSTR("HDR10 ");
            }
            else if (CFEqual(v4, (CFTypeRef)*MEMORY[0x1E0CA2318]))
            {
              v19 = CFSTR("HLG ");
            }
            else
            {
              if (!CFEqual(v4, v25))
              {
LABEL_61:
                IntegerCodePointForString = CVColorPrimariesGetIntegerCodePointForString(Extension);
                v28 = CVTransferFunctionGetIntegerCodePointForString(v4);
                v29 = CVYCbCrMatrixGetIntegerCodePointForString(v5);
                v30 = CFStringCreateWithFormat(0, 0, CFSTR("(%d-%d-%d)"), IntegerCodePointForString, v28, v29);
                CFStringAppend(Mutable, v30);
                CFRelease(v30);
                return Mutable;
              }
              v19 = CFSTR("PQ ");
            }
LABEL_60:
            CFStringAppend(Mutable, v19);
            goto LABEL_61;
          }
          v24 = CFSTR("DCI P3 ");
        }
        CFStringAppend(Mutable, v24);
        goto LABEL_53;
      }
    }
  }
  return 0;
}

uint64_t FigComputeMovieDimensions(uint64_t a1, CGRect *a2)
{
  uint64_t v4;
  uint64_t FigBaseObject;
  unsigned int (*v6)(uint64_t, const __CFString *, uint64_t, const __CFArray **);
  _OWORD *v7;
  __int128 v8;
  uint64_t (*v9)(uint64_t, uint64_t *);
  uint64_t v10;
  uint64_t v11;
  int v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  uint64_t (*v17)(uint64_t, uint64_t, CFTypeRef *, int *, _QWORD);
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, const __CFString *, uint64_t, CFBooleanRef *);
  int Value;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *);
  const __CFDictionary *v24;
  const __CFNumber *v25;
  const __CFNumber *v26;
  float v27;
  float v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  __int128 v31;
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  uint64_t v36;
  CGAffineTransform valuePtr;
  CGAffineTransform v39;
  CFTypeRef cf;
  CFDictionaryRef theDict;
  CFBooleanRef BOOLean;
  int v43;
  CFTypeRef v44;
  uint64_t v45;
  CGAffineTransform v46;
  const __CFArray *v47;
  float v48[3];
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;

  v47 = 0;
  memset(&v46, 0, sizeof(v46));
  v44 = 0;
  v45 = 0;
  v4 = *MEMORY[0x1E0C9AE00];
  FigBaseObject = FigFormatReaderGetFigBaseObject(a1);
  v6 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, const __CFArray **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
  v7 = (_OWORD *)MEMORY[0x1E0C9BAA8];
  if (v6 && !v6(FigBaseObject, CFSTR("MovieMatrix"), v4, &v47))
  {
    MatrixArrayToCGAffineTransform(v47, &v46.a);
    CFRelease(v47);
  }
  else
  {
    v8 = v7[1];
    *(_OWORD *)&v46.a = *v7;
    *(_OWORD *)&v46.c = v8;
    *(_OWORD *)&v46.tx = v7[2];
  }
  v9 = *(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v9)
    return 4294954514;
  v10 = v9(a1, &v45);
  if ((_DWORD)v10)
    return v10;
  if (v45 < 1)
  {
    v16 = 0.0;
    v15 = 0.0;
    v14 = 0.0;
    v13 = 0.0;
LABEL_36:
    v39 = v46;
    v53.origin.x = v13;
    v53.origin.y = v14;
    v53.size.width = v15;
    v53.size.height = v16;
    v36 = 0;
    *a2 = CGRectApplyAffineTransform(v53, &v39);
    return v36;
  }
  v11 = 0;
  v12 = 0;
  v13 = 0.0;
  v14 = 0.0;
  v15 = 0.0;
  v16 = 0.0;
  while (1)
  {
    v43 = 0;
    BOOLean = 0;
    v17 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, int *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 48);
    if (!v17)
      goto LABEL_32;
    v18 = v17(a1, v11, &v44, &v43, 0);
    if ((_DWORD)v18)
      goto LABEL_38;
    v19 = FigTrackReaderGetFigBaseObject(v44);
    v20 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
    if (!v20)
    {
LABEL_32:
      v36 = 4294954514;
      goto LABEL_33;
    }
    v18 = v20(v19, CFSTR("TrackEnabled"), v4, &BOOLean);
    if ((_DWORD)v18)
      goto LABEL_38;
    Value = CFBooleanGetValue(BOOLean);
    CFRelease(BOOLean);
    if (Value)
      break;
LABEL_27:
    if (v44)
    {
      CFRelease(v44);
      v44 = 0;
    }
    if (++v11 >= v45)
      goto LABEL_36;
  }
  cf = 0;
  theDict = 0;
  memset(&v39, 0, sizeof(v39));
  v22 = FigTrackReaderGetFigBaseObject(v44);
  v23 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
  if (!v23)
    goto LABEL_32;
  v18 = v23(v22, CFSTR("TrackDimensions"), v4, &theDict);
  if (!(_DWORD)v18)
  {
    v24 = theDict;
    LODWORD(valuePtr.a) = 0;
    v48[0] = 0.0;
    v25 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("Width"));
    CFNumberGetValue(v25, kCFNumberFloat32Type, &valuePtr);
    v26 = (const __CFNumber *)CFDictionaryGetValue(v24, CFSTR("Height"));
    CFNumberGetValue(v26, kCFNumberFloat32Type, v48);
    v27 = *(float *)&valuePtr.a;
    v28 = v48[0];
    CFRelease(theDict);
    if (v27 == 0.0 || v28 == 0.0)
    {
      height = v16;
      width = v15;
      y = v14;
      x = v13;
    }
    else
    {
      v29 = FigTrackReaderGetFigBaseObject(v44);
      v30 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
      if (v30 && !v30(v29, CFSTR("TrackMatrix"), v4, &cf))
      {
        MatrixArrayToCGAffineTransform((const __CFArray *)cf, &v39.a);
        CFRelease(cf);
      }
      else
      {
        v31 = v7[1];
        *(_OWORD *)&v39.a = *v7;
        *(_OWORD *)&v39.c = v31;
        *(_OWORD *)&v39.tx = v7[2];
      }
      v49.size.width = v27;
      v49.size.height = v28;
      valuePtr = v39;
      v49.origin.x = 0.0;
      v49.origin.y = 0.0;
      v50 = CGRectApplyAffineTransform(v49, &valuePtr);
      x = v50.origin.x;
      y = v50.origin.y;
      width = v50.size.width;
      height = v50.size.height;
      if (v12)
      {
        v51.origin.x = v13;
        v51.origin.y = v14;
        v51.size.width = v15;
        v51.size.height = v16;
        v52 = CGRectUnion(v51, *(CGRect *)&x);
        x = v52.origin.x;
        y = v52.origin.y;
        width = v52.size.width;
        height = v52.size.height;
      }
      v12 = 1;
    }
    v16 = height;
    v15 = width;
    v14 = y;
    v13 = x;
    goto LABEL_27;
  }
LABEL_38:
  v36 = v18;
LABEL_33:
  if (v44)
    CFRelease(v44);
  return v36;
}

double MatrixArrayToCGAffineTransform@<D0>(const __CFArray *a1@<X0>, double *a2@<X8>)
{
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v5;
  const __CFNumber *v6;
  const __CFNumber *v7;
  const __CFNumber *v8;
  const __CFNumber *v9;
  double result;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float valuePtr;

  valuePtr = 0.0;
  v18 = 0.0;
  v16 = 0;
  v17 = 0;
  ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, 0);
  CFNumberGetValue(ValueAtIndex, kCFNumberFloat32Type, &valuePtr);
  v5 = (const __CFNumber *)CFArrayGetValueAtIndex(a1, 1);
  CFNumberGetValue(v5, kCFNumberFloat32Type, &v18);
  v6 = (const __CFNumber *)CFArrayGetValueAtIndex(a1, 3);
  CFNumberGetValue(v6, kCFNumberFloat32Type, (char *)&v17 + 4);
  v7 = (const __CFNumber *)CFArrayGetValueAtIndex(a1, 4);
  CFNumberGetValue(v7, kCFNumberFloat32Type, &v17);
  v8 = (const __CFNumber *)CFArrayGetValueAtIndex(a1, 6);
  CFNumberGetValue(v8, kCFNumberFloat32Type, (char *)&v16 + 4);
  v9 = (const __CFNumber *)CFArrayGetValueAtIndex(a1, 7);
  CFNumberGetValue(v9, kCFNumberFloat32Type, &v16);
  result = valuePtr;
  v11 = v18;
  v12 = *((float *)&v17 + 1);
  v13 = *(float *)&v17;
  v14 = *((float *)&v16 + 1);
  v15 = *(float *)&v16;
  *a2 = valuePtr;
  a2[1] = v11;
  a2[2] = v12;
  a2[3] = v13;
  a2[4] = v14;
  a2[5] = v15;
  return result;
}

uint64_t FigGetTrackUneditedDurationWithPossibleFallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t FigBaseObject;
  void (*v7)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef v8;
  uint64_t v9;
  void (*value)(uint64_t, const __CFString *, uint64_t, CMTime *);
  uint64_t v11;
  void (*v12)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v13;
  void (*v14)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeID v15;
  CMTimeEpoch epoch;
  uint64_t v17;
  CMTime cf;
  CFTypeRef v20;

  v20 = 0;
  v5 = *MEMORY[0x1E0C9AE00];
  FigBaseObject = FigTrackReaderGetFigBaseObject(a2);
  v7 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
  if (!v7 || (v7(FigBaseObject, CFSTR("UneditedTrackDuration"), v5, &v20), (v8 = v20) == 0))
  {
    cf.value = 0;
    v9 = FigFormatReaderGetFigBaseObject(a1);
    value = *(void (**)(uint64_t, const __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
    if (value)
    {
      value(v9, CFSTR("SampleCursorTimeAccuracyIsExact"), v5, &cf);
      value = (void (*)(uint64_t, const __CFString *, uint64_t, CMTime *))cf.value;
    }
    if (value != (void (*)(uint64_t, const __CFString *, uint64_t, CMTime *))*MEMORY[0x1E0C9AE50])
    {
      v11 = FigFormatReaderGetFigBaseObject(a1);
      v12 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
      if (v12)
        v12(v11, CFSTR("EstimatedDuration"), v5, &v20);
    }
    if (!v20)
    {
      v13 = FigFormatReaderGetFigBaseObject(a1);
      v14 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
      if (v14)
        v14(v13, CFSTR("NominalDuration"), v5, &v20);
    }
    if (cf.value)
      CFRelease((CFTypeRef)cf.value);
    v8 = v20;
    if (!v20)
      goto LABEL_16;
  }
  v15 = CFGetTypeID(v8);
  if (v15 == CFDictionaryGetTypeID())
  {
    CMTimeMakeFromDictionary(&cf, (CFDictionaryRef)v20);
    *(_OWORD *)a3 = *(_OWORD *)&cf.value;
    epoch = cf.epoch;
  }
  else
  {
LABEL_16:
    v17 = MEMORY[0x1E0CA2E68];
    *(_OWORD *)a3 = *MEMORY[0x1E0CA2E68];
    epoch = *(_QWORD *)(v17 + 16);
  }
  *(_QWORD *)(a3 + 16) = epoch;
  if (v20)
    CFRelease(v20);
  return 0;
}

uint64_t FigCFStringIsISOExtension(CFStringRef theString2)
{
  uint64_t v2;

  if (!theString2)
    return 0;
  v2 = 1;
  if (CFStringCompare(CFSTR("m4a"), theString2, 1uLL))
  {
    v2 = 1;
    if (CFStringCompare(CFSTR("m4p"), theString2, 1uLL))
    {
      v2 = 1;
      if (CFStringCompare(CFSTR("m4v"), theString2, 1uLL))
      {
        v2 = 1;
        if (CFStringCompare(CFSTR("m4b"), theString2, 1uLL))
        {
          v2 = 1;
          if (CFStringCompare(CFSTR("m4r"), theString2, 1uLL))
          {
            v2 = 1;
            if (CFStringCompare(CFSTR("mp4"), theString2, 1uLL))
            {
              v2 = 1;
              if (CFStringCompare(CFSTR("aax"), theString2, 1uLL))
              {
                v2 = 1;
                if (CFStringCompare(CFSTR("3gp"), theString2, 1uLL))
                {
                  v2 = 1;
                  if (CFStringCompare(CFSTR("3gpp"), theString2, 1uLL))
                  {
                    v2 = 1;
                    if (CFStringCompare(CFSTR("3g2"), theString2, 1uLL))
                    {
                      v2 = 1;
                      if (CFStringCompare(CFSTR("3gp2"), theString2, 1uLL))
                        return 0;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v2;
}

uint64_t FigCFStringIsHEIFExtension(CFStringRef theString2)
{
  uint64_t v2;

  if (!theString2)
    return 0;
  v2 = 1;
  if (CFStringCompare(CFSTR("heic"), theString2, 1uLL))
  {
    v2 = 1;
    if (CFStringCompare(CFSTR("heics"), theString2, 1uLL))
    {
      v2 = 1;
      if (CFStringCompare(CFSTR("heif"), theString2, 1uLL))
      {
        v2 = 1;
        if (CFStringCompare(CFSTR("heifs"), theString2, 1uLL))
        {
          v2 = 1;
          if (CFStringCompare(CFSTR("hif"), theString2, 1uLL))
          {
            v2 = 1;
            if (CFStringCompare(CFSTR("avci"), theString2, 1uLL))
            {
              v2 = 1;
              if (CFStringCompare(CFSTR("avcs"), theString2, 1uLL))
              {
                v2 = 1;
                if (CFStringCompare(CFSTR("avif"), theString2, 1uLL))
                {
                  v2 = 1;
                  if (CFStringCompare(CFSTR("avis"), theString2, 1uLL))
                    return 0;
                }
              }
            }
          }
        }
      }
    }
  }
  return v2;
}

uint64_t FigFileTypeIsISOFileType()
{
  uint64_t result;

  if (FigCFEqual())
    return 1;
  if (FigCFEqual())
    return 1;
  if (FigCFEqual())
    return 1;
  result = FigCFEqual();
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t FigFileTypeDoesSupportExternalSampleReferences()
{
  return FigCFEqual();
}

const __CFString *FigGetFileTypeForMovieFamilyExtension(CFStringRef theString2)
{
  const __CFArray *AllIdentifiersForTag;
  const __CFArray *v3;
  CFIndex Count;
  const void *v5;
  CFIndex v6;
  const void *ValueAtIndex;
  const void *Value;
  const void *v9;
  CFIndex FirstIndexOfValue;
  CFRange v12;

  if (!theString2)
    return 0;
  if (CFStringCompare(CFSTR("mov"), theString2, 1uLL) == kCFCompareEqualTo)
    return CFSTR("com.apple.quicktime-movie");
  AllIdentifiersForTag = UTTypeCreateAllIdentifiersForTag((CFStringRef)*MEMORY[0x1E0CA5A88], theString2, (CFStringRef)*MEMORY[0x1E0CA5AD8]);
  v3 = AllIdentifiersForTag;
  if (AllIdentifiersForTag)
    Count = CFArrayGetCount(AllIdentifiersForTag);
  else
    Count = 0;
  if (FigGetFileTypeForMovieFamilyExtension_sMovieFamilyTypesOnce != -1)
    dispatch_once(&FigGetFileTypeForMovieFamilyExtension_sMovieFamilyTypesOnce, &__block_literal_global_59);
  if (Count < 1)
  {
LABEL_16:
    v5 = 0;
    if (!v3)
      return (const __CFString *)v5;
    goto LABEL_19;
  }
  v6 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v3, v6);
    Value = CFDictionaryGetValue((CFDictionaryRef)FigGetFileTypeForMovieFamilyExtension_sMovieFamilySubstitutions, ValueAtIndex);
    v9 = Value ? Value : ValueAtIndex;
    v12.length = FigGetFileTypeForMovieFamilyExtension_sNumMovieFamilyTypes;
    v12.location = 0;
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue((CFArrayRef)FigGetFileTypeForMovieFamilyExtension_sMovieFamilyTypes, v12, v9);
    if (FirstIndexOfValue != -1)
      break;
    if (Count == ++v6)
      goto LABEL_16;
  }
  v5 = CFArrayGetValueAtIndex((CFArrayRef)FigGetFileTypeForMovieFamilyExtension_sMovieFamilyTypes, FirstIndexOfValue);
  if (v3)
LABEL_19:
    CFRelease(v3);
  return (const __CFString *)v5;
}

CFStringRef FigCreateStringForLanguageCode(const __CFAllocator *a1, unsigned int a2, int a3)
{
  unsigned int v3;

  if (!a3 && (a2 < 0x401 || a2 == 0x7FFF))
  {
    if (a2 > 0x97)
      v3 = 21956;
    else
      v3 = kQTCodeToISO639_2_T_LanguageBits[a2];
  }
  else if (a2)
  {
    v3 = a2;
  }
  else
  {
    v3 = 21956;
  }
  return CFStringCreateWithFormat(a1, 0, CFSTR("%c%c%c"), (v3 >> 10) | 0x60, (v3 >> 5) & 0x1F | 0x60, v3 & 0x1F | 0x60);
}

uint64_t FigGetISOLanguageCodeForString(const __CFString *a1)
{
  UniChar CharacterAtIndex;
  UniChar v3;

  CharacterAtIndex = CFStringGetCharacterAtIndex(a1, 0);
  v3 = CFStringGetCharacterAtIndex(a1, 1);
  return (unsigned __int16)(CFStringGetCharacterAtIndex(a1, 2) + 32 * v3 + (CharacterAtIndex << 10) + 29600);
}

BOOL FigValidateRequiredFeaturesOfFormatDescription(const opaqueCMFormatDescription *a1)
{
  CFPropertyListRef Extension;
  CFIndex v3;
  CFTypeID v4;
  CFIndex Count;
  const __CFArray *Value;
  const __CFArray *v7;
  CFIndex v8;
  FourCharCode MediaSubType;
  CFIndex v10;
  uint64_t v11;
  const __CFString *ValueAtIndex;
  uint64_t v13;
  char buffer[256];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v3 = 0;
    v11 = 0;
    v8 = 0;
    return !v8 && v3 == v11;
  }
  Extension = CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E0CA28A8]);
  v3 = (CFIndex)Extension;
  if (!Extension)
  {
    v7 = 0;
LABEL_8:
    v8 = 0;
    goto LABEL_11;
  }
  v4 = CFGetTypeID(Extension);
  if (v4 != CFDictionaryGetTypeID())
  {
    v7 = 0;
    v3 = 0;
    goto LABEL_8;
  }
  Count = CFDictionaryGetCount((CFDictionaryRef)v3);
  Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v3, (const void *)*MEMORY[0x1E0CA28E0]);
  v7 = Value;
  if (Value)
    v3 = CFArrayGetCount(Value);
  else
    v3 = 0;
  v8 = Count - (v7 != 0);
LABEL_11:
  if (CMFormatDescriptionGetMediaType(a1) == 1952807028
    && ((MediaSubType = CMFormatDescriptionGetMediaSubType(a1), MediaSubType == 1937142900)
     || MediaSubType == 2021028980
     || MediaSubType == 2004251764)
    && v3 >= 1)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v7, v10);
      v13 = 0;
      while (!CFStringGetCString(ValueAtIndex, buffer, 256, 0x600u)
           || strncmp(buffer, sWebVTTSupportedFeatures[v13], 0x100uLL))
      {
        if (++v13 == 3)
          goto LABEL_23;
      }
      ++v11;
LABEL_23:
      ++v10;
    }
    while (v10 != v3);
  }
  else
  {
    v11 = 0;
  }
  return !v8 && v3 == v11;
}

BOOL MTShouldPlayHDRVideo(const __CFArray *a1)
{
  int v2;
  _BOOL8 result;
  int v4;

  v4 = 0;
  v2 = FPSupport_IsInLowPowerMode();
  result = 0;
  if (!v2)
  {
    FPSupport_GetCurrentDisplayModeVideoRangeAndSizeAndFrameRate(a1, &v4, 0, 0);
    return v4 > 1;
  }
  return result;
}

uint64_t FigCryptGetKeySize(int a1)
{
  if ((a1 - 1) < 3)
    return qword_1932FCE98[a1 - 1];
  FigSignalErrorAt();
  return 0;
}

uint64_t FigCryptGetBlockSize(int a1)
{
  if ((a1 - 1) < 3)
    return 16;
  FigSignalErrorAt();
  return 0;
}

uint64_t FigCryptGetTagSize(int a1)
{
  if (a1 == 3)
    return 16;
  FigSignalErrorAt();
  return 0;
}

uint64_t FigCryptCreateForDecrypt(int a1, const void *a2, uint64_t a3, const void *a4, const void *a5, size_t a6, _QWORD *a7)
{
  uint64_t BlockSize;
  uint64_t v14;
  _QWORD *cryptorRef;
  _QWORD *v16;
  uint64_t v17;
  CFTypeRef v19;
  CFTypeRef v20;

  if (!a7)
    return FigSignalErrorAt();
  *a7 = 0;
  BlockSize = FigCryptGetBlockSize(a1);
  if (!BlockSize)
    return FigSignalErrorAt();
  v14 = BlockSize;
  cryptorRef = malloc_type_calloc(1uLL, 0x38uLL, 0x10600408152BA4BuLL);
  if (!cryptorRef)
    return FigSignalErrorAt();
  v16 = cryptorRef;
  *((_DWORD *)cryptorRef + 8) = a1;
  cryptorRef[1] = v14;
  if (a1 == 3)
  {
    if (CCCryptorCreateWithMode(1u, 0xBu, 0, 0, 0, a5, a6, 0, 0, 0, 0, (CCCryptorRef *)cryptorRef))
    {
LABEL_6:
      v17 = FigSignalErrorAt();
      free(v16);
      return v17;
    }
  }
  else if (CCCryptorCreate(1u, 0, a1 == 1, a5, a6, 0, (CCCryptorRef *)cryptorRef))
  {
    goto LABEL_6;
  }
  if (a2)
    v19 = CFRetain(a2);
  else
    v19 = (CFTypeRef)*MEMORY[0x1E0C9AE00];
  v16[2] = v19;
  if (a4)
    v20 = CFRetain(a4);
  else
    v20 = (CFTypeRef)*MEMORY[0x1E0C9AE00];
  v16[3] = v20;
  *a7 = v16;
  return 0;
}

uint64_t FigCryptSetIV(uint64_t a1, void *iv)
{
  int v3;
  _CCCryptor *v4;
  uint64_t result;

  if (!a1)
    return FigSignalErrorAt();
  v3 = *(_DWORD *)(a1 + 32);
  v4 = *(_CCCryptor **)a1;
  if (v3 == 3)
  {
    if (CCCryptorGCMReset())
      return FigSignalErrorAt();
    result = CCCryptorGCMSetIV();
  }
  else
  {
    result = CCCryptorReset(v4, iv);
  }
  if ((_DWORD)result)
    return FigSignalErrorAt();
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t FigCryptDecryptMemory(uint64_t a1, int a2, int a3, const void *a4, size_t a5, size_t *a6, char *a7, size_t a8, size_t *a9, _BYTE *a10)
{
  size_t v13;
  size_t v17;
  size_t OutputLength;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t result;
  CCCryptorStatus v26;
  size_t v27;
  BOOL v28;
  int v29;
  size_t v30;
  size_t v31;
  size_t v32;
  CCCryptorStatus v33;
  size_t v35;
  size_t dataOutMoved;

  dataOutMoved = 0;
  if (!a1)
    return FigSignalErrorAt();
  if (!a10)
    return FigSignalErrorAt();
  v13 = a5;
  if (!a2 && (!a5 || !a4 || !a6))
    return FigSignalErrorAt();
  if (!a7 || !a9 || *(_QWORD *)(a1 + 8) > a8)
    return FigSignalErrorAt();
  *a10 = 0;
  if (a4)
    v17 = a5;
  else
    v17 = 0;
  if (!v17)
  {
    v13 = 0;
    goto LABEL_28;
  }
  OutputLength = CCCryptorGetOutputLength(*(CCCryptorRef *)a1, v17, a2 != 0);
  if (a2 && OutputLength > a8)
    OutputLength = CCCryptorGetOutputLength(*(CCCryptorRef *)a1, v17, 0);
  if (OutputLength <= a8)
    goto LABEL_22;
  v19 = *(_QWORD *)(a1 + 40);
  v20 = *(_QWORD *)(a1 + 48);
  v21 = v19 >= v20;
  v22 = v19 - v20;
  if (!v21 || (v23 = *(_QWORD *)(a1 + 8), v21 = v23 >= v22, v24 = v23 - v22, !v21))
  {
    result = FigSignalErrorAt();
    if ((_DWORD)result)
      return result;
LABEL_22:
    if (v13)
      goto LABEL_23;
    goto LABEL_28;
  }
  v32 = (-(uint64_t)v23 & a8) + v24;
  if (v32 < v17)
    v13 = v32;
  if (v13)
  {
LABEL_23:
    while (1)
    {
      v26 = CCCryptorUpdate(*(CCCryptorRef *)a1, a4, v13, a7, a8, &dataOutMoved);
      if (v26 != -4301)
        break;
      v27 = *(_QWORD *)(a1 + 8);
      v28 = v13 > v27;
      v13 -= v27;
      if (!v28)
        return FigSignalErrorAt();
    }
    if (v26)
      return FigSignalErrorAt();
  }
LABEL_28:
  if (a2)
  {
    v29 = *(_DWORD *)(a1 + 32);
    if (v29 != 2)
    {
      if (a4 && v29 == 3 && dataOutMoved == v17)
      {
        if (CCCryptorGCMFinalize())
          return FigSignalErrorAt();
      }
      else if (v13 == v17 && a8 - dataOutMoved >= *(_QWORD *)(a1 + 8))
      {
        v35 = 0;
        v33 = CCCryptorFinal(*(CCCryptorRef *)a1, &a7[dataOutMoved], a8 - dataOutMoved, &v35);
        if (!a3 && v33)
          return FigSignalErrorAt();
        dataOutMoved += v35;
        *a10 = 0;
      }
      else
      {
        *a10 = 1;
      }
    }
  }
  v30 = dataOutMoved;
  v31 = *(_QWORD *)(a1 + 48) + dataOutMoved;
  *(_QWORD *)(a1 + 40) += v13;
  *(_QWORD *)(a1 + 48) = v31;
  if (a6)
    *a6 = v13;
  result = 0;
  *a9 = v30;
  return result;
}

void FigCryptDispose(CCCryptorRef *a1)
{
  CCCryptorRef v2;
  CCCryptorRef v3;

  if (a1)
  {
    v2 = a1[2];
    if (v2)
      CFRelease(v2);
    v3 = a1[3];
    if (v3)
      CFRelease(v3);
    if (*a1)
      CCCryptorRelease(*a1);
    free(a1);
  }
}

uint64_t FigBufferedAirPlayOutputGetClassID()
{
  if (FigBufferedAirPlayOutputGetClassID_sRegisterFigBufferedAirPlayOutputBaseTypeOnce != -1)
    dispatch_once(&FigBufferedAirPlayOutputGetClassID_sRegisterFigBufferedAirPlayOutputBaseTypeOnce, &__block_literal_global_60);
  return FigBufferedAirPlayOutputGetClassID_sFigBufferedAirPlayOutputClassID;
}

CFStringRef FigBufferedAirPlayOutputBaseCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigBufferedAirPlayOutput %p]"), a1);
}

uint64_t FigBufferedAirPlayOutputGetTypeID()
{
  if (FigBufferedAirPlayOutputGetClassID_sRegisterFigBufferedAirPlayOutputBaseTypeOnce != -1)
    dispatch_once(&FigBufferedAirPlayOutputGetClassID_sRegisterFigBufferedAirPlayOutputBaseTypeOnce, &__block_literal_global_60);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigBufferedAirPlayOutputCreate(const __CFAllocator *a1, const void *a2, const void *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t CMBaseObject;
  uint64_t (*v16)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, _QWORD, const __CFAllocator *, uint64_t);
  OpaqueCMClock *HostTimeClock;
  uint64_t v21;
  CMTimebaseRef v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, const __CFString *, _QWORD, uint64_t);
  const __CFAllocator *v29;
  CFMutableDictionaryRef Mutable;
  uint64_t UInt32;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v35;
  __CFNotificationCenter *DarwinNotifyCenter;
  CFTypeRef v38;
  CFTypeRef cf;
  CMTimebaseRef timebaseOut;
  CMClockRef sourceClock;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a2 && a3 && a4)
  {
    if (FigBufferedAirPlayOutputGetClassID_sRegisterFigBufferedAirPlayOutputBaseTypeOnce != -1)
      dispatch_once(&FigBufferedAirPlayOutputGetClassID_sRegisterFigBufferedAirPlayOutputBaseTypeOnce, &__block_literal_global_60);
    v8 = CMDerivedObjectCreate();
    if ((_DWORD)v8)
      return v8;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v38 = 0;
    cf = 0;
    v10 = FigSimpleMutexCreate();
    *(_QWORD *)(DerivedStorage + 8) = v10;
    if (!v10)
      goto LABEL_46;
    v11 = FigDispatchQueueCreateWithPriority();
    *(_QWORD *)(DerivedStorage + 16) = v11;
    if (!v11
      || (v12 = FigDispatchQueueCreateWithPriority(), (*(_QWORD *)(DerivedStorage + 24) = v12) == 0)
      || (v13 = FigDispatchQueueCreateWithPriority(), (*(_QWORD *)(DerivedStorage + 32) = v13) == 0)
      || (v14 = FigDispatchQueueCreateWithPriority(), (*(_QWORD *)(DerivedStorage + 40) = v14) == 0))
    {
LABEL_46:
      v21 = 4294954510;
      goto LABEL_39;
    }
    *(_QWORD *)(DerivedStorage + 48) = CFRetain(a2);
    *(_QWORD *)(DerivedStorage + 56) = CFRetain(a3);
    *(_DWORD *)(DerivedStorage + 140) = -998653952;
    *(_BYTE *)(DerivedStorage + 137) = 0;
    CMBaseObject = FigEndpointGetCMBaseObject();
    v16 = *(uint64_t (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
    if (v16)
    {
      v17 = v16(CMBaseObject, *MEMORY[0x1E0CA44A8], a1, &cf);
      if ((_DWORD)v17)
        goto LABEL_50;
      *(_BYTE *)(DerivedStorage + 136) = cf == (CFTypeRef)*MEMORY[0x1E0C9AE50];
      if (_os_feature_enabled_impl())
      {
        v17 = FigEndpointStreamAudioEngineCreateForEndpointStream(*(_QWORD *)(DerivedStorage + 56), DerivedStorage + 72);
        if ((_DWORD)v17)
          goto LABEL_50;
        goto LABEL_19;
      }
      v18 = FigEndpointStreamGetCMBaseObject();
      v19 = *(uint64_t (**)(uint64_t, _QWORD, const __CFAllocator *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
      if (v19)
      {
        v17 = v19(v18, *MEMORY[0x1E0CA4748], a1, DerivedStorage + 72);
        if (!(_DWORD)v17)
        {
LABEL_19:
          sourceClock = 0;
          timebaseOut = 0;
          if (CMTimeSyncClockCreateForSystemDomainClockIdentifier())
          {
            HostTimeClock = CMClockGetHostTimeClock();
            sourceClock = HostTimeClock;
            if (HostTimeClock)
              CFRetain(HostTimeClock);
          }
          v21 = CMTimebaseCreateWithSourceClock(a1, sourceClock, &timebaseOut);
          if ((_DWORD)v21)
          {
            if (sourceClock)
              CFRelease(sourceClock);
            if (timebaseOut)
              CFRelease(timebaseOut);
            goto LABEL_39;
          }
          v22 = timebaseOut;
          *(_QWORD *)(DerivedStorage + 144) = sourceClock;
          *(_QWORD *)(DerivedStorage + 152) = v22;
          *(_QWORD *)(DerivedStorage + 176) = 0;
          *(_DWORD *)(DerivedStorage + 192) = -999;
          v23 = MEMORY[0x1E0CA2E18];
          v24 = *MEMORY[0x1E0CA2E18];
          *(_OWORD *)(DerivedStorage + 84) = *MEMORY[0x1E0CA2E18];
          v25 = *(_QWORD *)(v23 + 16);
          *(_QWORD *)(DerivedStorage + 100) = v25;
          v26 = MEMORY[0x1E0CA2E68];
          *(_OWORD *)(DerivedStorage + 112) = *MEMORY[0x1E0CA2E68];
          *(_QWORD *)(DerivedStorage + 128) = *(_QWORD *)(v26 + 16);
          *(_BYTE *)(DerivedStorage + 108) = 1;
          *(_OWORD *)(DerivedStorage + 240) = v24;
          *(_QWORD *)(DerivedStorage + 256) = v25;
          v27 = FigEndpointStreamAudioEngineGetCMBaseObject(*(_QWORD *)(DerivedStorage + 72));
          v28 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
          if (v28)
          {
            v29 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v17 = v28(v27, CFSTR("inputSampleBufferConsumer"), *MEMORY[0x1E0C9AE00], DerivedStorage + 176);
            if (!(_DWORD)v17)
            {
              Mutable = CFDictionaryCreateMutable(v29, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              *(_QWORD *)(DerivedStorage + 160) = Mutable;
              if (!Mutable)
              {
                v21 = 4294950535;
                goto LABEL_39;
              }
              CMBaseObjectGetDerivedStorage();
              FigCFDictionarySetValue();
              v17 = FigSampleBufferConsumerInputForBufferedAirPlayOutputCreate(0, *(const void **)(DerivedStorage + 176), "SBCInput4BAO", (_QWORD *)(DerivedStorage + 184));
              if (!(_DWORD)v17)
              {
                random();
                UInt32 = FigCFNumberCreateUInt32();
                *(_QWORD *)(DerivedStorage + 272) = UInt32;
                if (UInt32)
                {
                  *(_BYTE *)(DerivedStorage + 264) = FigGetCFPreferenceNumberWithDefault();
                  *(_BYTE *)(DerivedStorage + 265) = 1;
                  v32 = FigEndpointStreamGetCMBaseObject();
                  v33 = *(unsigned int (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                  if (v33 && !v33(v32, *MEMORY[0x1E0CA4740], a1, &v38) && v38 == (CFTypeRef)*MEMORY[0x1E0C9AE40])
                    *(_BYTE *)(DerivedStorage + 265) = 0;
                  if (dword_1EE2A3188)
                  {
                    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                  }
                  v35 = CMBaseObjectGetDerivedStorage();
                  if (*(_QWORD *)(v35 + 56) && *(_QWORD *)(v35 + 72))
                  {
                    CMNotificationCenterGetDefaultLocalCenter();
                    FigNotificationCenterAddWeakListeners();
                    CMNotificationCenterGetDefaultLocalCenter();
                    FigNotificationCenterAddWeakListeners();
                    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
                    CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)fbapo_airPlayPrefsChangedCallback, CFSTR("com.apple.airplay.bufferedAVAudioSessionOverrideChanged"), 0, (CFNotificationSuspensionBehavior)0);
                  }
                }
                v21 = 0;
                goto LABEL_39;
              }
            }
            goto LABEL_50;
          }
          goto LABEL_34;
        }
LABEL_50:
        v21 = v17;
        goto LABEL_39;
      }
    }
LABEL_34:
    v21 = 4294954514;
LABEL_39:
    if (cf)
      CFRelease(cf);
    if (v38)
      CFRelease(v38);
    if (!(_DWORD)v21)
    {
      CMBaseObjectGetDerivedStorage();
      *a4 = 0;
    }
    return v21;
  }
  return FigSignalErrorAt();
}

uint64_t fbapo_invalidate(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v6;
  __CFNotificationCenter *DarwinNotifyCenter;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
  if (!*(_BYTE *)DerivedStorage)
  {
    v3 = CMBaseObjectGetDerivedStorage();
    fbapo_amIActiveEndpointStreamClient();
    if (!*(_BYTE *)v3)
    {
      *(_BYTE *)v3 = 1;
      fbapo_setAudioSessionID((uint64_t)a1, 0);
      v4 = *(_QWORD *)(v3 + 72);
      if (v4)
      {
        v5 = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (v5)
          v5(v4, 0, 0, 0);
        *(_BYTE *)(v3 + 80) = 0;
      }
      *(_DWORD *)(v3 + 192) = -999;
      *(_DWORD *)(v3 + 140) = -998653952;
      v6 = CMBaseObjectGetDerivedStorage();
      if (*(_QWORD *)(v6 + 56) && *(_QWORD *)(v6 + 72))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListeners();
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListeners();
        DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
        CFNotificationCenterRemoveObserver(DarwinNotifyCenter, a1, CFSTR("com.apple.airplay.bufferedAVAudioSessionOverrideChanged"), 0);
      }
      v8 = *(const void **)(v3 + 56);
      if (v8)
      {
        CFRelease(v8);
        *(_QWORD *)(v3 + 56) = 0;
      }
      v9 = *(const void **)(v3 + 48);
      if (v9)
      {
        CFRelease(v9);
        *(_QWORD *)(v3 + 48) = 0;
      }
      v10 = *(const void **)(v3 + 64);
      if (v10)
      {
        CFRelease(v10);
        *(_QWORD *)(v3 + 64) = 0;
      }
      v11 = *(const void **)(v3 + 176);
      if (v11)
      {
        CFRelease(v11);
        *(_QWORD *)(v3 + 176) = 0;
      }
      v12 = *(const void **)(v3 + 160);
      if (v12)
      {
        CFRelease(v12);
        *(_QWORD *)(v3 + 160) = 0;
      }
      v13 = *(const void **)(v3 + 144);
      if (v13)
      {
        CFRelease(v13);
        *(_QWORD *)(v3 + 144) = 0;
      }
      v14 = *(const void **)(v3 + 152);
      if (v14)
      {
        CFRelease(v14);
        *(_QWORD *)(v3 + 152) = 0;
      }
      v15 = *(const void **)(v3 + 72);
      if (v15)
      {
        CFRelease(v15);
        *(_QWORD *)(v3 + 72) = 0;
      }
      v16 = *(const void **)(v3 + 200);
      if (v16)
      {
        CFRelease(v16);
        *(_QWORD *)(v3 + 200) = 0;
      }
      v17 = *(const void **)(v3 + 184);
      if (v17)
      {
        CFRelease(v17);
        *(_QWORD *)(v3 + 184) = 0;
      }
    }
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 8));
  return 0;
}

uint64_t fbapo_finalize(const void *a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  fbapo_invalidate(a1);
  v3 = *(const void **)(DerivedStorage + 272);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 272) = 0;
  }
  v4 = *(NSObject **)(DerivedStorage + 16);
  if (v4)
  {
    dispatch_sync(v4, &__block_literal_global_107);
    dispatch_release(*(dispatch_object_t *)(DerivedStorage + 16));
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v5 = *(NSObject **)(DerivedStorage + 32);
  if (v5)
  {
    dispatch_sync(v5, &__block_literal_global_109_0);
    dispatch_release(*(dispatch_object_t *)(DerivedStorage + 32));
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  v6 = *(NSObject **)(DerivedStorage + 24);
  if (v6)
  {
    dispatch_sync(v6, &__block_literal_global_111);
    dispatch_release(*(dispatch_object_t *)(DerivedStorage + 24));
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v7 = *(NSObject **)(DerivedStorage + 40);
  if (v7)
  {
    dispatch_sync(v7, &__block_literal_global_113_0);
    dispatch_release(*(dispatch_object_t *)(DerivedStorage + 40));
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  result = *(_QWORD *)(DerivedStorage + 8);
  if (result)
  {
    result = FigSimpleMutexDestroy();
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  return result;
}

__CFString *fbapo_copyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigBufferedAirPlayOutput %p; endpointStream=%@>"),
    a1,
    *(_QWORD *)(DerivedStorage + 56));
  return Mutable;
}

uint64_t fbapo_copyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, const __CFString **a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFString *value;
  uint64_t CMBaseObject;
  uint64_t (*v15)(uint64_t, _QWORD, _QWORD, const __CFString **);
  uint64_t v16;
  uint64_t (*v17)(uint64_t, _QWORD, _QWORD, const __CFBoolean **);
  CFBooleanRef v18;
  unsigned int SInt32;
  CFTypeRef *v20;
  const __CFString *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, const __CFString *, _QWORD, const __CFDictionary **);
  CFDictionaryRef v26;
  const __CFString *v27;
  CFTypeID TypeID;
  const __CFAllocator *v29;
  const __CFAllocator *v30;
  uint64_t v31;
  void (*v32)(uint64_t, _QWORD, const __CFAllocator *, CFBooleanRef *);
  int64_t v33;
  uint64_t v34;
  const __CFString **v35;
  uint64_t v36;
  void (*v37)(uint64_t, _QWORD, _QWORD, CMTime *);
  const __CFString *v38;
  int v39;
  const __CFBoolean *v40;
  CMTime time;
  const __CFDictionary *v42;
  CFBooleanRef BOOLean;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
  v9 = CMBaseObjectGetDerivedStorage();
  v40 = 0;
  if (CFEqual(a2, CFSTR("EnableLocalPlayback")) || CFEqual(a2, CFSTR("LocalPlaybackVolume")))
  {
    v10 = FigSignalErrorAt();
LABEL_4:
    v11 = v10;
    goto LABEL_5;
  }
  if (CFEqual(a2, CFSTR("PreferredClock")))
  {
    value = *(const __CFString **)(v9 + 144);
    if (!value)
      goto LABEL_12;
    goto LABEL_11;
  }
  if (CFEqual(a2, CFSTR("ZeroBasedTimebase")))
  {
    value = *(const __CFString **)(v9 + 152);
    if (!value)
    {
LABEL_12:
      v11 = 0;
      *a4 = value;
      goto LABEL_5;
    }
    goto LABEL_11;
  }
  if (CFEqual(a2, CFSTR("MaximumNumberOfOutputChannels")))
  {
    CMBaseObject = FigEndpointStreamGetCMBaseObject();
    v15 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, const __CFString **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
    if (v15)
    {
      v10 = v15(CMBaseObject, *MEMORY[0x1E0CA4798], *MEMORY[0x1E0C9AE00], a4);
      goto LABEL_4;
    }
LABEL_24:
    v11 = 4294954514;
    goto LABEL_5;
  }
  if (!CFEqual(a2, CFSTR("AtmosIsSupported")))
  {
    if (!CFEqual(a2, CFSTR("PrerollDuration")))
    {
      if (CFEqual(a2, CFSTR("AudioMode")))
      {
        time.value = 0;
        TypeID = CFStringGetTypeID();
        if (fbapo_getCachedValue(a1, TypeID, &time))
        {
          value = CFSTR("AudioMode_Default");
        }
        else
        {
          value = (const __CFString *)time.value;
          if (!time.value)
            goto LABEL_12;
        }
        goto LABEL_11;
      }
      if (CFEqual(a2, CFSTR("IsActiveConfigurationInvalid")))
      {
        v34 = CMBaseObjectGetDerivedStorage();
        LOBYTE(time.value) = 0;
        FigSimpleMutexCheckIsLockedOnThisThread();
        if (*(_BYTE *)(v34 + 80) || (fbapo_supportsFormatChangeWithoutReconfiguration(a1, &time), !LOBYTE(time.value)))
          v35 = (const __CFString **)MEMORY[0x1E0C9AE50];
        else
          v35 = (const __CFString **)MEMORY[0x1E0C9AE40];
      }
      else
      {
        if (CFEqual(a2, CFSTR("SupportsReceiverSideSoundCheck")))
        {
          CMBaseObjectGetDerivedStorage();
          time.value = 0;
          v36 = FigEndpointStreamGetCMBaseObject();
          v37 = *(void (**)(uint64_t, _QWORD, _QWORD, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
          if (v37)
            v37(v36, *MEMORY[0x1E0CA47F8], *MEMORY[0x1E0C9AE00], &time);
          v38 = (const __CFString *)*MEMORY[0x1E0C9AE50];
          v39 = FigCFEqual();
          if (time.value)
            CFRelease((CFTypeRef)time.value);
          if (v39)
            value = v38;
          else
            value = (const __CFString *)*MEMORY[0x1E0C9AE40];
          goto LABEL_11;
        }
        if (CFEqual(a2, CFSTR("UniqueID")))
        {
          value = *(const __CFString **)(v9 + 272);
          goto LABEL_11;
        }
        if (!CFEqual(a2, CFSTR("ALACIsAllowed")))
        {
          if (!CFEqual(a2, CFSTR("SourceSampleBufferConsumer")))
          {
            if (!CFEqual(a2, CFSTR("LoggingID")))
            {
              v11 = 4294954512;
              goto LABEL_5;
            }
            value = CFStringCreateWithCString(a3, (const char *)(v9 + 208), 0x8000100u);
            goto LABEL_12;
          }
          value = *(const __CFString **)(v9 + 184);
          goto LABEL_11;
        }
        v35 = (const __CFString **)MEMORY[0x1E0C9AE50];
        if (!*(_BYTE *)(v9 + 265))
          v35 = (const __CFString **)MEMORY[0x1E0C9AE40];
      }
      value = *v35;
LABEL_11:
      value = (const __CFString *)CFRetain(value);
      goto LABEL_12;
    }
    v22 = CMBaseObjectGetDerivedStorage();
    v42 = 0;
    BOOLean = 0;
    if (*(_QWORD *)(v22 + 56))
    {
      v23 = v22;
      if (fbapo_audioEngineIsResumed())
      {
        v24 = FigEndpointStreamAudioEngineGetCMBaseObject(*(_QWORD *)(v23 + 72));
        v25 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, const __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (!v25)
        {
          v11 = 4294954514;
          goto LABEL_60;
        }
        v11 = v25(v24, CFSTR("prerollDuration"), *MEMORY[0x1E0C9AE00], &v42);
        v26 = v42;
        if (!a4 || (_DWORD)v11)
          goto LABEL_52;
        if (!v42)
        {
          v27 = 0;
LABEL_51:
          v11 = 0;
          *a4 = v27;
LABEL_52:
          if (!v26)
            goto LABEL_60;
          goto LABEL_55;
        }
LABEL_50:
        v27 = (const __CFString *)CFRetain(v26);
        v26 = v42;
        goto LABEL_51;
      }
      v30 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v31 = FigEndpointStreamGetCMBaseObject();
      v32 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
      if (v32 && (v32(v31, *MEMORY[0x1E0CA4778], v30, &BOOLean), BOOLean) && CFBooleanGetValue(BOOLean))
        v33 = 5000;
      else
        v33 = 1000;
      CMTimeMake(&time, v33, 1000);
      v29 = v30;
    }
    else
    {
      CMTimeMake(&time, 1000, 1000);
      v29 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    }
    v26 = CMTimeCopyAsDictionary(&time, v29);
    v42 = v26;
    if (!v26)
    {
      v11 = 4294951816;
      goto LABEL_60;
    }
    if (!a4)
    {
      v11 = 0;
LABEL_55:
      CFRelease(v26);
LABEL_60:
      v18 = BOOLean;
      goto LABEL_61;
    }
    goto LABEL_50;
  }
  v16 = FigEndpointStreamGetCMBaseObject();
  v17 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, const __CFBoolean **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
  if (!v17)
    goto LABEL_24;
  v11 = v17(v16, *MEMORY[0x1E0CA4798], *MEMORY[0x1E0C9AE00], &v40);
  v18 = v40;
  if (!(_DWORD)v11)
  {
    SInt32 = FigCFNumberGetSInt32();
    v20 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    if (SInt32 <= 7)
      v20 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    v21 = (const __CFString *)*v20;
    if (*v20)
      v21 = (const __CFString *)CFRetain(v21);
    *a4 = v21;
    v18 = v40;
  }
LABEL_61:
  if (v18)
    CFRelease(v18);
LABEL_5:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 8));
  return v11;
}

uint64_t fbapo_setProperty(uint64_t a1, const void *a2, const __CFString *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  CFTypeID TypeID;
  uint64_t CMBaseObject;
  uint64_t (*v10)(uint64_t, __CFString *, const __CFString *);
  __CFString **v11;
  uint64_t v12;
  CFTypeID v13;
  uint64_t SInt32;
  uint64_t Float32;
  const void *v17;
  uint64_t v18;
  void (*v19)(uint64_t, _QWORD, const void *);
  const void *v20;
  CFTypeID v21;
  CFTypeID v22;
  const void *v23;
  CFTypeID v24;
  int Value;
  uint64_t v26;
  uint64_t v27;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeID v29;
  CFTypeID v30;
  CFTypeID v31;
  char *v32;
  uint64_t v33;
  void (*v34)(uint64_t, _QWORD, _QWORD, _QWORD);
  NSObject *v35;
  CMClockRef HostTimeClock;
  NSObject *v37;
  CFTypeID v38;
  unsigned int v39;
  CFTypeID v40;
  CMClockRef v41;
  uint64_t v42;
  void (*v43)(uint64_t, _QWORD, uint64_t);
  NSObject *v44;
  CFTypeID v45;
  CMTime type;
  CMTime v47;
  CMTime rhs;
  CMTime valuePtr[5];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
  v7 = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("Muted")))
  {
    if (a3)
    {
      TypeID = CFBooleanGetTypeID();
      if (TypeID == CFGetTypeID(a3))
      {
        CMBaseObject = FigEndpointGetCMBaseObject();
        v10 = *(uint64_t (**)(uint64_t, __CFString *, const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 56);
        if (v10)
        {
          v11 = (__CFString **)MEMORY[0x1E0CA42B8];
LABEL_6:
          v12 = v10(CMBaseObject, *v11, a3);
LABEL_17:
          SInt32 = v12;
          goto LABEL_18;
        }
        goto LABEL_103;
      }
    }
    goto LABEL_16;
  }
  if (CFEqual(a2, CFSTR("Volume")))
  {
    if (!a3)
      goto LABEL_16;
    v13 = CFNumberGetTypeID();
    if (v13 != CFGetTypeID(a3))
      goto LABEL_16;
    LODWORD(valuePtr[0].value) = 0;
    if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 136))
    {
      if (!CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, valuePtr)
        || *(float *)&valuePtr[0].value < 0.0
        || *(float *)&valuePtr[0].value > 1.0)
      {
        FigSignalErrorAt();
        goto LABEL_28;
      }
      if (*(float *)&valuePtr[0].value != 0.0)
        log(*(float *)&valuePtr[0].value);
      Float32 = FigCFNumberCreateFloat32();
      if (!Float32)
        goto LABEL_28;
      v17 = (const void *)Float32;
      v18 = FigEndpointGetCMBaseObject();
      v19 = *(void (**)(uint64_t, _QWORD, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v19)
        v19(v18, *MEMORY[0x1E0CA44B8], v17);
      v20 = v17;
      goto LABEL_27;
    }
LABEL_28:
    SInt32 = 0;
    goto LABEL_18;
  }
  if (CFEqual(a2, CFSTR("EnableLocalPlayback")) || CFEqual(a2, CFSTR("LocalPlaybackVolume")))
    goto LABEL_16;
  if (CFEqual(a2, CFSTR("AudioMode")))
  {
    if (a3)
    {
      v21 = CFGetTypeID(a3);
      if (v21 == CFStringGetTypeID())
      {
        v12 = fbapo_setAndCacheAudioMode(a1, a3, 1);
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (CFEqual(a2, CFSTR("FigAudioSession")))
  {
    if (!a3 || (v22 = CFGetTypeID(a3), v22 == FigAudioSessionGetTypeID()))
    {
      v12 = fbapo_setAndCacheFigAudioSession(a1, a3, 1);
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (CFEqual(a2, CFSTR("ClientID")))
  {
    v23 = *(const void **)(v7 + 200);
    *(_QWORD *)(v7 + 200) = a3;
    if (a3)
      CFRetain(a3);
    if (!v23)
      goto LABEL_28;
    v20 = v23;
    goto LABEL_27;
  }
  if (!CFEqual(a2, CFSTR("IsPiPMuted")))
  {
    if (CFEqual(a2, CFSTR("ClientPID")))
    {
      if (a3)
      {
        v29 = CFGetTypeID(a3);
        if (v29 == CFNumberGetTypeID())
        {
          CMBaseObject = FigEndpointStreamAudioEngineGetCMBaseObject(*(_QWORD *)(v7 + 72));
          v10 = *(uint64_t (**)(uint64_t, __CFString *, const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 56);
          if (v10)
          {
            v11 = kFigEndpointStreamAudioEngineProperty_ClientPID;
            goto LABEL_6;
          }
LABEL_103:
          SInt32 = 4294954514;
          goto LABEL_18;
        }
      }
LABEL_16:
      v12 = FigSignalErrorAt();
      goto LABEL_17;
    }
    if (CFEqual(a2, CFSTR("ClientAuditToken")))
    {
      if (!a3 || (v30 = CFGetTypeID(a3), v30 == CFDataGetTypeID()))
      {
        CMBaseObject = FigEndpointStreamAudioEngineGetCMBaseObject(*(_QWORD *)(v7 + 72));
        v10 = *(uint64_t (**)(uint64_t, __CFString *, const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 56);
        if (v10)
        {
          v11 = kFigEndpointStreamAudioEngineProperty_ClientAuditToken;
          goto LABEL_6;
        }
        goto LABEL_103;
      }
      goto LABEL_16;
    }
    if (CFEqual(a2, CFSTR("LoggingID")))
    {
      if (a3)
      {
        v31 = CFGetTypeID(a3);
        if (v31 == CFStringGetTypeID())
        {
          *(_BYTE *)(v7 + 208) = 0;
          v32 = (char *)(v7 + 208);
          CFStringGetCString(a3, v32, 20, 0x600u);
          CMBaseObject = FigEndpointStreamAudioEngineGetCMBaseObject(*((_QWORD *)v32 - 17));
          v10 = *(uint64_t (**)(uint64_t, __CFString *, const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 56);
          if (v10)
          {
            v11 = kFigEndpointStreamAudioEngineProperty_LoggingID;
            goto LABEL_6;
          }
          goto LABEL_103;
        }
      }
      goto LABEL_16;
    }
    if (!CFEqual(a2, CFSTR("AudioProcessingTap")))
    {
      if (CFEqual(a2, CFSTR("CompressionLatency")))
      {
        if (a3)
        {
          v40 = CFGetTypeID(a3);
          if (v40 == CFNumberGetTypeID())
          {
            CMBaseObject = FigEndpointStreamAudioEngineGetCMBaseObject(*(_QWORD *)(v7 + 72));
            v10 = *(uint64_t (**)(uint64_t, __CFString *, const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 56);
            if (v10)
            {
              v11 = kFigEndpointStreamAudioEngineProperty_CompressionLatency;
              goto LABEL_6;
            }
            goto LABEL_103;
          }
        }
      }
      else
      {
        if (!CFEqual(a2, CFSTR("IsParticipatingInCoordinatedPlayback")))
        {
          SInt32 = 4294954512;
          goto LABEL_18;
        }
        if (a3)
        {
          v45 = CFGetTypeID(a3);
          if (v45 == CFBooleanGetTypeID())
          {
            CMBaseObject = FigEndpointStreamAudioEngineGetCMBaseObject(*(_QWORD *)(v7 + 72));
            v10 = *(uint64_t (**)(uint64_t, __CFString *, const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 56);
            if (v10)
            {
              v11 = kFigEndpointStreamAudioEngineProperty_IsParticipatingInCoordinatedPlayback;
              goto LABEL_6;
            }
            goto LABEL_103;
          }
        }
      }
      goto LABEL_16;
    }
    if (a3 && (v38 = MTAudioProcessingTapGetTypeID(), v38 != CFGetTypeID(a3)))
    {
      SInt32 = FigSignalErrorAt();
    }
    else
    {
      fbapo_setAndCacheAudioProcessingTap(a1, (uint64_t)a3, 1);
      SInt32 = 0;
    }
    fbapo_setAndCacheAudioProcessingTap(a1, (uint64_t)a3, 1);
    goto LABEL_18;
  }
  if (!a3)
    goto LABEL_16;
  v24 = CFGetTypeID(a3);
  if (v24 != CFBooleanGetTypeID())
    goto LABEL_16;
  Value = CFBooleanGetValue((CFBooleanRef)a3);
  v26 = CMBaseObjectGetDerivedStorage();
  if (*(unsigned __int8 *)(v26 + 168) == Value)
    goto LABEL_28;
  v27 = v26;
  if (dword_1EE2A3188)
  {
    LODWORD(v47.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (Value)
  {
    v33 = *(_QWORD *)(v27 + 72);
    v34 = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v34)
      v34(v33, 0, 0, 0);
    if (dword_1EE2A3188)
    {
      LODWORD(v47.value) = 0;
      LOBYTE(type.value) = 0;
      v35 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_77;
  }
  if (!fbapo_audioEngineIsResumed())
  {
LABEL_77:
    SInt32 = 0;
    *(_BYTE *)(v27 + 168) = Value;
    goto LABEL_18;
  }
  memset(&v47, 0, sizeof(v47));
  HostTimeClock = CMClockGetHostTimeClock();
  CMSyncGetTime(&v47, HostTimeClock);
  if (*(_QWORD *)(v27 + 56))
  {
    if (dword_1EE2A3188)
    {
      LODWORD(type.value) = 0;
      v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v12 = FigEndpointStreamSuspendSync();
    if ((_DWORD)v12)
      goto LABEL_17;
    v41 = CMClockGetHostTimeClock();
    CMSyncGetTime(&type, v41);
    rhs = v47;
    CMTimeSubtract(valuePtr, &type, &rhs);
    rhs = valuePtr[0];
    CMTimeConvertScale(valuePtr, &rhs, 1000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    if (6000 - LODWORD(valuePtr[0].value) <= 1)
      v39 = 1;
    else
      v39 = 6000 - LODWORD(valuePtr[0].value);
    if (v39 < 0x1F5)
    {
      SInt32 = 0;
      goto LABEL_92;
    }
  }
  else
  {
    v39 = 6000;
  }
  SInt32 = FigCFNumberCreateSInt32();
  v42 = FigEndpointStreamGetCMBaseObject();
  v43 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v43)
    v43(v42, *MEMORY[0x1E0CA47C0], SInt32);
LABEL_92:
  if (dword_1EE2A3188)
  {
    v44 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  FigEndpointStreamAudioEngineSetEndpointStreamSync(*(_QWORD *)(v27 + 72), *(_QWORD *)(v27 + 56), v39);
  *(_BYTE *)(v27 + 168) = 0;
  if (SInt32)
  {
    v20 = (const void *)SInt32;
LABEL_27:
    CFRelease(v20);
    goto LABEL_28;
  }
LABEL_18:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 8));
  return SInt32;
}

uint64_t fbapo_amIActiveEndpointStreamClient()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t CMBaseObject;
  unsigned int (*v3)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  BOOL v4;
  uint64_t v5;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (*(_BYTE *)DerivedStorage)
    return 0;
  v1 = DerivedStorage;
  if (!*(_QWORD *)(DerivedStorage + 176))
    return 0;
  if (!fbapo_audioEngineIsResumed())
    return 0;
  CMBaseObject = FigEndpointStreamAudioEngineGetCMBaseObject(*(_QWORD *)(v1 + 72));
  v3 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
  if (!v3)
    return 0;
  if (v3(CMBaseObject, CFSTR("endpointStream"), *MEMORY[0x1E0C9AE00], &cf))
    v4 = 1;
  else
    v4 = cf == 0;
  v5 = !v4;
  if (cf)
    CFRelease(cf);
  return v5;
}

uint64_t fbapo_setAudioSessionID(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t CMBaseObject;
  uint64_t (*v5)(uint64_t, _QWORD, uint64_t);

  if (!*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 56))
    return 0;
  result = fbapo_amIActiveEndpointStreamClient();
  if ((_DWORD)result)
  {
    CMBaseObject = FigEndpointStreamGetCMBaseObject();
    v5 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v5)
      return v5(CMBaseObject, *MEMORY[0x1E0CA46B0], a2);
    else
      return 4294954514;
  }
  return result;
}

uint64_t fbapo_audioEngineIsResumed()
{
  uint64_t DerivedStorage;
  uint64_t CMBaseObject;
  uint64_t (*v2)(uint64_t, const __CFString *, _QWORD, CFBooleanRef *);
  int v3;
  CFBooleanRef v4;
  uint64_t Value;
  CFBooleanRef BOOLean;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  BOOLean = 0;
  CMBaseObject = FigEndpointStreamAudioEngineGetCMBaseObject(*(_QWORD *)(DerivedStorage + 72));
  v2 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
  if (!v2)
    return 0;
  v3 = v2(CMBaseObject, CFSTR("isResumed"), *MEMORY[0x1E0C9AE00], &BOOLean);
  v4 = BOOLean;
  if (v3)
  {
    Value = 0;
    if (!BOOLean)
      return Value;
    goto LABEL_4;
  }
  Value = CFBooleanGetValue(BOOLean);
  v4 = BOOLean;
  if (BOOLean)
LABEL_4:
    CFRelease(v4);
  return Value;
}

void fbapo_endpointStreamSupportedAudioFormatsChangedCallback(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = 0;
  if (dword_1EE2A3188)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
  if (!*(_BYTE *)(DerivedStorage + 80)
    && !fbapo_supportsFormatChangeWithoutReconfiguration((uint64_t)a2, &v5)
    && !v5)
  {
    *(_BYTE *)(DerivedStorage + 80) = 1;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 8));
  if (!v5)
    fbapo_postNotificationInternal(a2, (uint64_t)CFSTR("ActiveConfigurationDidBecomeInvalid"), 0);
}

void fbapo_endpointStreamInterruptionCallback(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t DerivedStorage;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  int v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, __CFDictionary *);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v6 = Mutable;
    v7 = CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0CA4718]);
    if (v7 || CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0CA4720]))
    {
      if (dword_1EE2A3188)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (v7)
      {
        if (*(_QWORD *)(DerivedStorage + 64))
        {
          CFDictionaryAddValue(v6, CFSTR("NotifyOthers"), (const void *)*MEMORY[0x1E0C9AE50]);
          v9 = *(_QWORD *)(DerivedStorage + 64);
          if (v9)
          {
            v10 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
            if (v10)
            {
              v11 = *(void (**)(uint64_t, __CFDictionary *))(v10 + 88);
              if (v11)
                v11(v9, v6);
            }
          }
        }
      }
    }
    CFRelease(v6);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t fbapo_endpointStreamALACStreamingSupportChangedCallback()
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A3188)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
  if (FigCFDictionaryGetBooleanIfPresent())
    *(_BYTE *)(DerivedStorage + 265) = 1;
  if (dword_1EE2A3188)
  {
    v2 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 8));
}

uint64_t fbapo_supportsFormatChangeWithoutReconfiguration(uint64_t a1, _BYTE *a2)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v5;
  uint64_t CMBaseObject;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  os_log_type_t type[8];
  CFArrayRef v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigSimpleMutexCheckIsLockedOnThisThread();
  if (!a2)
    return 4294949976;
  if (!*(_QWORD *)(DerivedStorage + 72))
    return 4294949976;
  if (fbapo_audioEngineIsResumed())
  {
    fbapo_doesEndpointStreamSupportMixedSampleRates();
    if (dword_1EE2A3188)
    {
      LODWORD(v11) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMBaseObject = FigEndpointStreamAudioEngineGetCMBaseObject(*(_QWORD *)(DerivedStorage + 72));
    v7 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v7)
    {
      v8 = v7(CMBaseObject);
      if (!(_DWORD)v8)
        return FigSignalErrorAt();
      return v8;
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    v5 = 0;
    *a2 = 0;
  }
  return v5;
}

void fbapo_postNotificationInternal(const void *a1, uint64_t a2, const void *a3)
{
  uint64_t DerivedStorage;
  NSObject *v7;
  _QWORD block[7];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3)
    CFRetain(a3);
  CFRetain(a1);
  v7 = *(NSObject **)(DerivedStorage + 24);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __fbapo_postNotificationInternal_block_invoke;
  block[3] = &__block_descriptor_tmp_99;
  block[4] = a2;
  block[5] = a1;
  block[6] = a3;
  dispatch_async(v7, block);
}

BOOL fbapo_doesEndpointStreamSupportMixedSampleRates()
{
  uint64_t CMBaseObject;
  unsigned int (*v1)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  _BOOL8 v2;
  CFTypeRef cf;

  CMBaseObjectGetDerivedStorage();
  cf = 0;
  CMBaseObject = FigEndpointStreamGetCMBaseObject();
  v1 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
  v2 = v1 && !v1(CMBaseObject, *MEMORY[0x1E0CA47F0], *MEMORY[0x1E0C9AE00], &cf) && FigCFEqual();
  if (cf)
    CFRelease(cf);
  return v2;
}

uint64_t fbapo_channelLayoutTagHash(int a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;

  if (a1 == 12845066)
    v1 = 64;
  else
    v1 = 0;
  if (a1 == 12779530)
    v2 = 32;
  else
    v2 = v1;
  if (a1 == 12713992)
    v3 = 16;
  else
    v3 = v2;
  if (a1 == 12648464)
    v4 = 256;
  else
    v4 = 0;
  if (a1 == 12582924)
    v5 = 128;
  else
    v5 = v4;
  if (a1 <= 12713991)
    v6 = v5;
  else
    v6 = v3;
  if (a1 == 8388616)
    v7 = 8;
  else
    v7 = 0;
  if (a1 == 8126470)
    v8 = 4;
  else
    v8 = v7;
  if (a1 == 6619138)
    v9 = 2;
  else
    v9 = 0;
  if (a1 == 6553601)
    v10 = 1;
  else
    v10 = v9;
  if (a1 <= 8126469)
    v11 = v10;
  else
    v11 = v8;
  if (a1 <= 12582923)
    return v11;
  else
    return v6;
}

void __fbapo_postNotificationInternal_block_invoke(uint64_t a1)
{
  const void *v2;

  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  v2 = *(const void **)(a1 + 48);
  if (v2)
    CFRelease(v2);
  fbapo_releaseAsync(*(_QWORD *)(a1 + 40));
}

void fbapo_releaseAsync(uint64_t a1)
{
  NSObject *global_queue;
  _QWORD block[5];

  if (a1)
  {
    global_queue = dispatch_get_global_queue(0, 0);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __fbapo_releaseAsync_block_invoke;
    block[3] = &__block_descriptor_tmp_100;
    block[4] = a1;
    dispatch_async(global_queue, block);
  }
}

void __fbapo_releaseAsync_block_invoke(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

uint64_t fbapo_audioEngineEndpointStreamEvictedCallback()
{
  uint64_t result;

  FigCFDictionaryGetValue();
  result = FigCFEqual();
  if (!(_DWORD)result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return CMNotificationCenterPostNotification();
  }
  return result;
}

uint64_t fbapo_audioEngineBufferingPriorityChangedCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage;
  const void *Value;
  const void *v8;
  NSObject *v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD block[30];

  block[29] = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Value = CFDictionaryGetValue(a5, CFSTR("bufferingPriority"));
  v8 = Value;
  if (Value)
    CFRetain(Value);
  v9 = *(NSObject **)(DerivedStorage + 40);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __fbapo_audioEngineBufferingPriorityChangedCallback_block_invoke;
  block[3] = &__block_descriptor_tmp_105_0;
  block[4] = DerivedStorage;
  block[5] = v8;
  dispatch_async(v9, block);
  if (dword_1EE2A3188)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

void fbapo_audioEnginePrerollDurationChangedCallback(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  CFTypeID v6;
  CMTime v7;

  fbapo_postNotificationInternal(a2, (uint64_t)CFSTR("prerollDurationChanged"), a5);
  if (a5)
  {
    v6 = CFGetTypeID(a5);
    if (v6 == CFDictionaryGetTypeID())
      CMTimeMakeFromDictionary(&v7, (CFDictionaryRef)a5);
  }
}

void fbapo_audioEngineActiveConfigurationDidBecomeInvalidCallback(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
  if (*(_QWORD *)(DerivedStorage + 72) == a4
    && fbapo_audioEngineIsResumed()
    && !*(_BYTE *)(DerivedStorage + 80))
  {
    *(_BYTE *)(DerivedStorage + 80) = 1;
    fbapo_postNotificationInternal(a2, (uint64_t)CFSTR("ActiveConfigurationDidBecomeInvalid"), 0);
  }
  JUMPOUT(0x19402EF04);
}

void fbapo_audioEngineDecryptionNotSupportedCallback(uint64_t a1, const void *a2)
{
  uint64_t MutableCopy;
  const void *v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  MutableCopy = FigCFDictionaryCreateMutableCopy();
  if (MutableCopy)
  {
    v4 = (const void *)MutableCopy;
    if (dword_1EE2A3188)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    fbapo_postNotificationInternal(a2, (uint64_t)CFSTR("decryptionNotSupported"), v4);
    CFRelease(v4);
  }
}

uint64_t fbapo_audioEngineFormatInfoChangedCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v9;
  void (*v10)(uint64_t, _QWORD, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
  v7 = *(_QWORD *)(DerivedStorage + 64);
  if (v7)
  {
    if (!dword_1EE2A3188
      || (os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type(),
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT),
          fig_log_call_emit_and_clean_up_after_send_and_compose(),
          (v7 = *(_QWORD *)(DerivedStorage + 64)) != 0))
    {
      v9 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
      if (v9)
      {
        v10 = *(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 56);
        if (v10)
          v10(v7, *MEMORY[0x1E0D496F0], a5);
      }
    }
  }
  return MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 8));
}

void __fbapo_audioEngineBufferingPriorityChangedCallback_block_invoke(uint64_t a1)
{
  const __CFString *v2;
  const void *v3;

  MEMORY[0x19402EEEC](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
  if (FigCFEqual())
  {
    v2 = CFSTR("urgent");
  }
  else if (FigCFEqual())
  {
    v2 = CFSTR("default");
  }
  else
  {
    if (!FigCFEqual())
      goto LABEL_8;
    v2 = CFSTR("relaxed");
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 232) = v2;
LABEL_8:
  MEMORY[0x19402EF04](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
}

uint64_t fbapo_getCachedValue(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  const void *Value;
  const void *v7;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 160), CFSTR("AudioMode"));
  if (!Value)
    return 4294954513;
  v7 = Value;
  if (CFGetTypeID(Value) != a2)
    return 4294954513;
  result = 0;
  *a3 = v7;
  return result;
}

uint64_t fbapo_setAndCacheAudioMode(uint64_t a1, const __CFString *a2, int a3)
{
  int CFPreferenceNumberWithDefault;
  const __CFString *v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t *v8;
  uint64_t v9;
  uint64_t CMBaseObject;
  uint64_t (*v11)(uint64_t, _QWORD, uint64_t);
  uint64_t result;

  CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  if (CFPreferenceNumberWithDefault == 1)
  {
    v6 = CFSTR("AudioMode_Default");
  }
  else
  {
    v6 = a2;
    if (CFPreferenceNumberWithDefault != 2)
      goto LABEL_9;
    v6 = CFSTR("AudioMode_MoviePlayback");
  }
  if (v6 != a2 && dword_1EE2A3188)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_9:
  if (CFEqual(v6, CFSTR("AudioMode_Default")))
  {
    v8 = (uint64_t *)MEMORY[0x1E0CA46C0];
  }
  else if (CFEqual(v6, CFSTR("AudioMode_MoviePlayback")))
  {
    v8 = (uint64_t *)MEMORY[0x1E0CA46C8];
  }
  else
  {
    if (!CFEqual(v6, CFSTR("AudioMode_SpokenAudio")))
      return 4294949976;
    v8 = (uint64_t *)MEMORY[0x1E0CA46D0];
  }
  v9 = *v8;
  if (!fbapo_amIActiveEndpointStreamClient())
  {
    if (!a3)
      return 0;
LABEL_21:
    CMBaseObjectGetDerivedStorage();
    FigCFDictionarySetValue();
    return 0;
  }
  CMBaseObject = FigEndpointStreamGetCMBaseObject();
  v11 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v11)
    return 4294954514;
  result = v11(CMBaseObject, *MEMORY[0x1E0CA4750], v9);
  if (a3 && !(_DWORD)result)
    goto LABEL_21;
  return result;
}

uint64_t fbapo_setAndCacheFigAudioSession(uint64_t a1, const void *a2, int a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(const void *, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (!a2)
    return 4294948075;
  v7 = DerivedStorage;
  v8 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (v8)
  {
    v9 = *(uint64_t (**)(const void *, const __CFString *, _QWORD, CFTypeRef *))(v8 + 8);
    if (v9)
    {
      v10 = v9(a2, CFSTR("FAS_SourceSessionID"), *MEMORY[0x1E0C9AE00], &cf);
      if ((_DWORD)v10)
      {
        v12 = v10;
      }
      else
      {
        v11 = fbapo_setAudioSessionID(a1, (uint64_t)cf);
        v12 = v11;
        if (a3 && !(_DWORD)v11)
        {
          CMBaseObjectGetDerivedStorage();
          FigCFDictionarySetValue();
          v13 = *(const void **)(v7 + 64);
          *(_QWORD *)(v7 + 64) = a2;
          CFRetain(a2);
          if (v13)
            CFRelease(v13);
          v12 = 0;
        }
      }
    }
    else
    {
      v12 = 4294948071;
    }
  }
  else
  {
    v12 = 4294948075;
  }
  if (cf)
    CFRelease(cf);
  return v12;
}

void fbapo_setAndCacheAudioProcessingTap(uint64_t a1, uint64_t a2, int a3)
{
  const void *UInt64;
  BOOL v6;
  NSObject *v7;
  uint64_t CMBaseObject;
  uint64_t (*v9)(uint64_t, _QWORD, const void *);
  int v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD v12[25];

  v12[24] = *MEMORY[0x1E0C80C00];
  v12[0] = 0;
  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 56) && fbapo_amIActiveEndpointStreamClient())
  {
    if (MTAudioProcessingTapIsProxyTap(a2))
    {
      if (MTProxyAudioProcessingTapGetObjectID(a2, v12))
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        return;
      }
      UInt64 = (const void *)FigCFNumberCreateUInt64();
      if (UInt64)
        v6 = v12[0] == 0;
      else
        v6 = 1;
      if (v6)
      {
        FigSignalErrorAt();
        goto LABEL_20;
      }
    }
    else
    {
      if (a2)
      {
        v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      UInt64 = 0;
    }
    CMBaseObject = FigEndpointStreamGetCMBaseObject();
    v9 = *(uint64_t (**)(uint64_t, _QWORD, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (!v9)
      goto LABEL_20;
    v10 = v9(CMBaseObject, *MEMORY[0x1E0CA4758], UInt64);
    if (!a3 || v10)
      goto LABEL_20;
  }
  else
  {
    if (!a3)
      return;
    UInt64 = 0;
  }
  CMBaseObjectGetDerivedStorage();
  FigCFDictionarySetValue();
LABEL_20:
  if (UInt64)
    CFRelease(UInt64);
}

uint64_t fbapo_setRateAndAnchorTime(const void *a1, char a2, CMTime *a3, __int128 *a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v17;
  Float64 Seconds;
  char *v19;
  CFTypeRef v20;
  __int128 v21;
  __int128 v22;
  CFTypeRef v23;
  const void *MutableCopy;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  NSObject *v29;
  Float64 v30;
  CMTime time;
  Float64 v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
  if (dword_1EE2A3188)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_BYTE *)DerivedStorage)
  {
    MutableCopy = 0;
    v19 = 0;
    a8 = 4294954511;
  }
  else
  {
    if (a9 != 0.0)
    {
      if (*MEMORY[0x1E0CA1FB8])
      {
        v17 = fig_log_handle();
        if (os_signpost_enabled(v17))
        {
          time = *a3;
          Seconds = CMTimeGetSeconds(&time);
          LODWORD(time.value) = 134218496;
          *(CMTimeValue *)((char *)&time.value + 4) = (CMTimeValue)a1;
          LOWORD(time.flags) = 2048;
          *(double *)((char *)&time.flags + 2) = a9;
          HIWORD(time.epoch) = 2048;
          v35 = Seconds;
          _os_signpost_emit_with_name_impl(&dword_1928EC000, v17, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "WHA_BAO_SetRateAndAnchorTime", " enableTelemetry=YES bao=%llu, rate=%1.2f, mediaTime=%1.3f", (uint8_t *)&time, 0x20u);
        }
      }
      if (*MEMORY[0x1E0CA1FA8])
      {
        time = *a3;
        CMTimeGetSeconds(&time);
        fig_gm_ktrace_wrapper();
      }
    }
    v19 = (char *)malloc_type_calloc(1uLL, 0x68uLL, 0x10A00400FDB3E6BuLL);
    if (v19)
    {
      if (a1)
        v20 = CFRetain(a1);
      else
        v20 = 0;
      *(_QWORD *)v19 = v20;
      v19[8] = a2;
      *((double *)v19 + 2) = a9;
      v21 = *(_OWORD *)&a3->value;
      *((_QWORD *)v19 + 5) = a3->epoch;
      *(_OWORD *)(v19 + 24) = v21;
      v22 = *a4;
      *((_QWORD *)v19 + 8) = *((_QWORD *)a4 + 2);
      *((_OWORD *)v19 + 3) = v22;
      *((_QWORD *)v19 + 10) = a6;
      *((_QWORD *)v19 + 11) = a7;
      if (a5)
        v23 = CFRetain(a5);
      else
        v23 = 0;
      *((_QWORD *)v19 + 9) = v23;
      if (!a8)
      {
        MutableCopy = 0;
        goto LABEL_22;
      }
      MutableCopy = (const void *)FigCFDictionaryCreateMutableCopy();
      if (MutableCopy)
      {
        FigCFDictionaryGetValue();
        v25 = FigCFDictionaryCreateMutableCopy();
        if (v25)
        {
          a8 = v25;
          FigCFDictionarySetValue();
          *((_QWORD *)v19 + 12) = CFRetain(MutableCopy);
LABEL_22:
          v26 = CMBaseObjectGetDerivedStorage();
          FigSimpleMutexCheckIsLockedOnThisThread();
          if (dword_1EE2A3188)
          {
            v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (a1)
            dispatch_async_f(*(dispatch_queue_t *)(v26 + 16), v19, (dispatch_function_t)fbapo_setRateAndAnchorTimeDispatch);
          if (a8)
          {
            CFRelease((CFTypeRef)a8);
            a8 = 0;
          }
          goto LABEL_28;
        }
      }
      a8 = 4294951816;
    }
    else
    {
      MutableCopy = 0;
      a8 = 4294949975;
    }
  }
  free(v19);
  if (a9 != 0.0)
  {
    if (*MEMORY[0x1E0CA1FB8])
    {
      v29 = fig_log_handle();
      if (os_signpost_enabled(v29))
      {
        time = *a3;
        v30 = CMTimeGetSeconds(&time);
        LODWORD(time.value) = 134218752;
        *(CMTimeValue *)((char *)&time.value + 4) = (CMTimeValue)a1;
        LOWORD(time.flags) = 2048;
        *(double *)((char *)&time.flags + 2) = a9;
        HIWORD(time.epoch) = 2048;
        v35 = v30;
        v36 = 2048;
        v37 = (int)a8;
        _os_signpost_emit_with_name_impl(&dword_1928EC000, v29, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "WHA_BAO_SetRateAndAnchorTime", " enableTelemetry=YES bao=%llu, rate=%1.2f, mediaTime=%1.3f, error=%llu", (uint8_t *)&time, 0x2Au);
      }
    }
    if (*MEMORY[0x1E0CA1FA8])
    {
      time = *a3;
      CMTimeGetSeconds(&time);
      fig_gm_ktrace_wrapper();
    }
  }
LABEL_28:
  if (MutableCopy)
    CFRelease(MutableCopy);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 8));
  return a8;
}

uint64_t fbapo_flush()
{
  uint64_t DerivedStorage;
  uint64_t v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)DerivedStorage)
    v1 = 4294954511;
  else
    v1 = fbapo_flushInternal();
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 8));
  return v1;
}

uint64_t fbapo_flushWithinTimeRange(uint64_t a1, __int128 *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, _BYTE *);
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE rhs[32];
  __int128 v14;
  _BYTE v15[32];
  __int128 v16;
  _BYTE lhs[32];
  __int128 v18;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)DerivedStorage)
  {
    v8 = 4294954511;
  }
  else
  {
    v10 = *a2;
    v11 = a2[1];
    v12 = a2[2];
    v4 = CMBaseObjectGetDerivedStorage();
    *(_OWORD *)v15 = v10;
    *(_OWORD *)&v15[16] = v11;
    v16 = v12;
    *(_OWORD *)lhs = v10;
    *(_QWORD *)&lhs[16] = v11;
    *(_OWORD *)rhs = *(_OWORD *)(v4 + 112);
    *(_QWORD *)&rhs[16] = *(_QWORD *)(v4 + 128);
    CMTimeSubtract((CMTime *)v15, (CMTime *)lhs, (CMTime *)rhs);
    v5 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)(v4 + 240) = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)(v4 + 256) = *(_QWORD *)(v5 + 16);
    v6 = *(_QWORD *)(v4 + 72);
    *(_OWORD *)rhs = *(_OWORD *)v15;
    *(_OWORD *)&rhs[16] = *(_OWORD *)&v15[16];
    v14 = v16;
    v7 = *(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (v7)
    {
      *(_OWORD *)lhs = *(_OWORD *)rhs;
      *(_OWORD *)&lhs[16] = *(_OWORD *)&rhs[16];
      v18 = v14;
      v8 = v7(v6, lhs);
    }
    else
    {
      v8 = 4294954514;
    }
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 8));
  return v8;
}

uint64_t fbapo_reset(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)DerivedStorage)
  {
    v6 = 4294954511;
  }
  else if (a2 && (v5 = fbapo_flushInternal(), (_DWORD)v5))
  {
    v6 = v5;
  }
  else
  {
    v4 = fbapo_resetInternal();
    v6 = 0;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 8), v4);
  return v6;
}

uint64_t fbapo_setConnectionActive(const void *a1, int a2, int a3, const void *a4)
{
  uint64_t DerivedStorage;
  int v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  uint64_t v17;
  void (*v18)(uint64_t, _QWORD, _QWORD, _QWORD);
  _QWORD block[7];
  os_log_type_t type;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)DerivedStorage)
  {
    v14 = 4294954511;
LABEL_13:
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 8));
    return v14;
  }
  v9 = *(_DWORD *)(DerivedStorage + 192);
  if (a2 == 1 && v9 == 1 || !a2 && !v9)
  {
    if (dword_1EE2A3188)
    {
      v22 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v14 = 0;
    goto LABEL_13;
  }
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
  if (!Mutable)
  {
    v14 = 4294949975;
    goto LABEL_13;
  }
  v12 = Mutable;
  FigCFDictionarySetValue();
  fbapo_postNotificationInternal(a1, (uint64_t)CFSTR("GoActive"), v12);
  if (a2)
  {
    if (dword_1EE2A3188)
    {
      v22 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (*(_BYTE *)(DerivedStorage + 264))
    {
      if (a1)
        CFRetain(a1);
      if (a4)
        CFRetain(a4);
      v16 = *(NSObject **)(DerivedStorage + 16);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __fbapo_setConnectionActive_block_invoke;
      block[3] = &__block_descriptor_tmp_129;
      block[4] = DerivedStorage;
      block[5] = a1;
      block[6] = a4;
      dispatch_async(v16, block);
    }
    *(_DWORD *)(DerivedStorage + 192) = 1;
  }
  else
  {
    if (dword_1EE2A3188)
    {
      v22 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    fbapo_resetInternal();
    v17 = *(_QWORD *)(DerivedStorage + 72);
    v18 = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v18)
      v18(v17, 0, 0, 0);
    *(_BYTE *)(DerivedStorage + 80) = 0;
    *(_DWORD *)(DerivedStorage + 192) = 0;
    if (a3)
      fbapo_postNotificationInternal(a1, (uint64_t)CFSTR("PrerollLost"), 0);
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 8));
  CFRelease(v12);
  return 0;
}

uint64_t fbapo_stopForReconfiguration()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, CFMutableDictionaryRef);
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)DerivedStorage)
  {
    v8 = 4294954511;
    goto LABEL_13;
  }
  v1 = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A3188)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_QWORD *)(v1 + 72))
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
    {
      v8 = 4294954510;
      goto LABEL_13;
    }
    v4 = Mutable;
    v5 = FigEndpointStreamAudioEngineSuspendSync(*(_QWORD *)(v1 + 72), 0, 3000);
    if (!(_DWORD)v5)
    {
      *(_BYTE *)(v1 + 80) = 0;
      v6 = *(_QWORD *)(v1 + 72);
      v7 = *(uint64_t (**)(uint64_t, CFMutableDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (!v7)
      {
        v8 = 4294954514;
        goto LABEL_12;
      }
      v5 = v7(v6, v4);
    }
    v8 = v5;
LABEL_12:
    CFRelease(v4);
    goto LABEL_13;
  }
  v8 = 0;
LABEL_13:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 8));
  return v8;
}

uint64_t fbapo_setEndOfSiriTTSUtteranceMediaTime(uint64_t a1, __int128 *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, __int128 *);
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)DerivedStorage)
  {
    v6 = 4294954511;
  }
  else
  {
    v4 = *(_QWORD *)(DerivedStorage + 72);
    v8 = *a2;
    v9 = *((_QWORD *)a2 + 2);
    v5 = *(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
    if (v5)
    {
      v10 = v8;
      v11 = v9;
      v6 = v5(v4, &v10);
    }
    else
    {
      v6 = 4294954514;
    }
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 8));
  return v6;
}

uint64_t fbapo_applyVolueFade(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, __int128 *);
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)DerivedStorage)
  {
    v8 = 4294954511;
  }
  else if ((a2 - 1) > 1)
  {
    v8 = 4294949976;
  }
  else
  {
    v6 = *(_QWORD *)(DerivedStorage + 72);
    v10 = *a3;
    v11 = *((_QWORD *)a3 + 2);
    v7 = *(uint64_t (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
    if (v7)
    {
      v12 = v10;
      v13 = v11;
      v8 = v7(v6, a2, &v12);
    }
    else
    {
      v8 = 4294954514;
    }
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 8));
  return v8;
}

uint64_t fbapo_copyTransportFormatDescriptionForSourceContentFormatDescription(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, CFTypeRef *);
  uint64_t result;

  v5 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 56);
  FigEndpointStreamAirPlayGetClassID();
  if (!CMBaseObjectIsMemberOfClass())
    v5 = 0;
  v6 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 24);
  if (!v6 || (result = v6(v5, a2, a3), (_DWORD)result))
  {
    if (*a3)
      CFRelease(*a3);
    return FigEndpointStreamAudioFormatDescriptionCreate();
  }
  return result;
}

uint64_t fbapo_doesSupportPassthroughOfFormatDescription(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, _QWORD, _QWORD, CFStringRef *);
  int v10;
  CFStringRef v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  int IsMemberOfClass;
  uint64_t (*v16)(uint64_t, uint64_t, char *);
  uint64_t result;
  int v18;
  char v19;
  CFStringRef theString;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v19 = 0;
  if (!a3)
  {
    result = FigSignalErrorAt();
    LOBYTE(v16) = 0;
    goto LABEL_28;
  }
  v6 = DerivedStorage;
  theString = 0;
  v7 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 64);
  if (!v7)
    goto LABEL_25;
  v8 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (!v8)
    goto LABEL_15;
  v9 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFStringRef *))(v8 + 48);
  if (!v9)
    goto LABEL_15;
  v10 = v9(v7, *MEMORY[0x1E0D497D0], *MEMORY[0x1E0C9AE00], &theString);
  v11 = theString;
  if (v10)
    v12 = 1;
  else
    v12 = theString == 0;
  if (!v12)
  {
    if (FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || CFStringHasPrefix(theString, CFSTR("com.apple.cmta")))
    {
      v13 = 1;
      goto LABEL_16;
    }
LABEL_15:
    v13 = 0;
LABEL_16:
    v11 = theString;
    if (!theString)
      goto LABEL_18;
    goto LABEL_17;
  }
  v13 = 0;
  if (theString)
LABEL_17:
    CFRelease(v11);
LABEL_18:
  if (!v13)
  {
LABEL_25:
    LOBYTE(v16) = 0;
    goto LABEL_26;
  }
  v14 = *(_QWORD *)(v6 + 56);
  FigEndpointStreamAirPlayGetClassID();
  IsMemberOfClass = CMBaseObjectIsMemberOfClass();
  LOBYTE(v16) = 0;
  if (!IsMemberOfClass)
  {
    result = 0;
    goto LABEL_28;
  }
  result = 0;
  if (v14)
  {
    v16 = *(uint64_t (**)(uint64_t, uint64_t, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 32);
    if (v16)
    {
      v18 = v16(v14, a2, &v19);
      result = 0;
      if (v18)
        LOBYTE(v16) = 0;
      else
        LOBYTE(v16) = v19;
      goto LABEL_28;
    }
LABEL_26:
    result = 0;
  }
LABEL_28:
  *a3 = (_BYTE)v16;
  return result;
}

void fbapo_setRateAndAnchorTimeDispatch(uint64_t a1)
{
  void *v2;
  int v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  CMTimeEpoch v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  OpaqueCMClock *HostTimeClock;
  int active;
  uint64_t v11;
  uint64_t v12;
  char flags;
  CMTime *p_type;
  char *v15;
  uint64_t v16;
  int v17;
  OpaqueCMClock *v18;
  NSObject *v19;
  unsigned int v20;
  unsigned int v21;
  const char *v22;
  Float64 Seconds;
  Float64 v24;
  uint64_t v25;
  void (*v26)(uint64_t, CMTime *, CMTime *, void (*)(uint64_t, int, CMTime *, CMTime *, const void *, uint64_t *, Float64), char *, uint64_t, __n128);
  __n128 v27;
  NSObject *v28;
  Float64 v29;
  NSObject *v30;
  NSObject *v31;
  uint64_t DerivedStorage;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD block[5];
  int v38;
  CMTime v39;
  CMTime v40;
  CMTime v41;
  CMTime v42;
  CMTime type;
  CMTime v44;
  os_log_type_t v45;
  unsigned int v46;
  CMTime v47;
  CMTime v48;
  const char *v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  double v53;
  __int16 v54;
  Float64 v55;
  __int16 v56;
  Float64 v57;
  __int16 v58;
  void (*v59)(uint64_t, int, CMTime *, CMTime *, const void *, uint64_t *, Float64);
  __int16 v60;
  char *v61;
  CMTime time;
  double v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  CMTime v67;
  int v68;
  CMTime v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v2 = *(void **)a1;
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = *(double *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 72);
  v34 = *(_QWORD *)(a1 + 88);
  v35 = *(_QWORD *)(a1 + 80);
  v36 = *(_QWORD *)(a1 + 96);
  v40 = *(CMTime *)(a1 + 24);
  v39 = *(CMTime *)(a1 + 48);
  v6 = CMBaseObjectGetDerivedStorage();
  v33 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)&v44.value = *MEMORY[0x1E0CA2E18];
  v7 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v44.epoch = v7;
  MEMORY[0x19402EEEC](*(_QWORD *)(v6 + 8));
  if (dword_1EE2A3188)
  {
    LODWORD(v47.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_BYTE *)v6)
  {
    v17 = -12785;
    goto LABEL_37;
  }
  if (v3)
  {
    if (v4 != 0.0)
    {
      HostTimeClock = CMClockGetHostTimeClock();
      CMClockGetTime(&v44, HostTimeClock);
      active = fbapo_becomeActiveEndpointStreamAudioEngineClient(v2, v5);
      if (active)
      {
        v17 = active;
        goto LABEL_37;
      }
    }
  }
  type = v40;
  v42 = v39;
  v41 = v44;
  v11 = CMBaseObjectGetDerivedStorage();
  v12 = v11;
  flags = v40.flags;
  if ((v40.flags & 1) != 0)
  {
    p_type = &type;
  }
  else
  {
    p_type = (CMTime *)(v11 + 84);
    if ((*(_BYTE *)(v11 + 96) & 1) == 0)
      p_type = (CMTime *)MEMORY[0x1E0CA2E68];
  }
  v47 = *p_type;
  v15 = (char *)malloc_type_calloc(1uLL, 0x68uLL, 0x10A0040D348C322uLL);
  if (v15)
  {
    if (v4 == 0.0)
    {
      *(_OWORD *)&v47.value = v33;
      v47.epoch = v7;
    }
    v16 = *(_QWORD *)(v12 + 56);
    FigEndpointStreamAirPlayGetClassID();
    v17 = -17324;
    if (CMBaseObjectIsMemberOfClass() && v16)
    {
      *(_QWORD *)v15 = CFRetain(v2);
      *((double *)v15 + 1) = v4;
      *(CMTime *)(v15 + 16) = v40;
      *((_QWORD *)v15 + 5) = v35;
      *((_QWORD *)v15 + 6) = v34;
      v18 = CMClockGetHostTimeClock();
      CMClockGetTime(&time, v18);
      *(CMTime *)(v15 + 80) = time;
      *(CMTime *)(v15 + 56) = v41;
      if (dword_1EE2A3188)
      {
        v46 = 0;
        v45 = OS_LOG_TYPE_DEFAULT;
        v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v20 = v46;
        if (os_log_type_enabled(v19, v45))
          v21 = v20;
        else
          v21 = v20 & 0xFFFFFFFE;
        if (v21)
        {
          if (v2)
            v22 = (const char *)(CMBaseObjectGetDerivedStorage() + 208);
          else
            v22 = "";
          time = v47;
          Seconds = CMTimeGetSeconds(&time);
          time = v39;
          v24 = CMTimeGetSeconds(&time);
          LODWORD(v48.value) = 136317186;
          *(CMTimeValue *)((char *)&v48.value + 4) = (CMTimeValue)"fbapo_setRateAndAnchorTimeInternal";
          LOWORD(v48.flags) = 2048;
          *(_QWORD *)((char *)&v48.flags + 2) = v2;
          HIWORD(v48.epoch) = 2082;
          v49 = v22;
          v50 = 2048;
          v51 = v16;
          v52 = 2048;
          v53 = v4;
          v54 = 2048;
          v55 = Seconds;
          v56 = 2048;
          v57 = v24;
          v58 = 2048;
          v59 = fbapo_setRateAndAnchorTimeCallback;
          v60 = 2048;
          v61 = v15;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v25 = *(_QWORD *)(v12 + 72);
      v26 = *(void (**)(uint64_t, CMTime *, CMTime *, void (*)(uint64_t, int, CMTime *, CMTime *, const void *, uint64_t *, Float64), char *, uint64_t, __n128))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
      if (v26)
      {
        v27.n128_u64[0] = 1.0;
        if (v4 == 0.0)
          v27.n128_f64[0] = 0.0;
        time = v47;
        v48 = v42;
        v26(v25, &time, &v48, fbapo_setRateAndAnchorTimeCallback, v15, v36, v27);
      }
      else
      {
        fbapo_setRateAndAnchorTimeCallback(v25, -12782, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], 0, (uint64_t *)v15, 0.0);
      }
      v17 = 0;
      if (v4 != 0.0 && (flags & 1) != 0 && *(_BYTE *)(v12 + 108))
      {
        v17 = 0;
        *(CMTime *)(v12 + 112) = type;
        *(_BYTE *)(v12 + 108) = 0;
      }
      goto LABEL_37;
    }
  }
  else
  {
    v17 = -12786;
  }
  if (v35)
  {
    if (v2)
      CFRetain(v2);
    v31 = *(NSObject **)(v12 + 24);
    time.value = MEMORY[0x1E0C809B0];
    *(_QWORD *)&time.timescale = 0x40000000;
    time.epoch = (CMTimeEpoch)__fbapo_setRateAndAnchorTimeInternal_block_invoke;
    v63 = COERCE_DOUBLE(&__block_descriptor_tmp_127_0);
    *(double *)&v64 = v4;
    v67 = v40;
    v68 = v17;
    *((_QWORD *)&v64 + 1) = v2;
    v65 = v35;
    v66 = v34;
    v69 = v39;
    dispatch_async(v31, &time);
  }
  if (v15)
  {
    if (*(_QWORD *)v15)
      CFRelease(*(CFTypeRef *)v15);
    free(v15);
  }
LABEL_37:
  if (v4 == 0.0 || !v17)
  {
    MEMORY[0x19402EF04](*(_QWORD *)(v6 + 8));
    if (!v17)
      goto LABEL_48;
  }
  else
  {
    if (*MEMORY[0x1E0CA1FB8])
    {
      v28 = fig_log_handle();
      if (os_signpost_enabled(v28))
      {
        time = v40;
        v29 = CMTimeGetSeconds(&time);
        LODWORD(time.value) = 134218752;
        *(CMTimeValue *)((char *)&time.value + 4) = (CMTimeValue)v2;
        LOWORD(time.flags) = 2048;
        *(double *)((char *)&time.flags + 2) = v4;
        HIWORD(time.epoch) = 2048;
        v63 = v29;
        LOWORD(v64) = 2048;
        *(_QWORD *)((char *)&v64 + 2) = v17;
        _os_signpost_emit_with_name_impl(&dword_1928EC000, v28, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "WHA_BAO_SetRateAndAnchorTime", " enableTelemetry=YES bao=%llu, rate=%1.2f, mediaTime=%1.3f, error=%llu", (uint8_t *)&time, 0x2Au);
      }
    }
    if (*MEMORY[0x1E0CA1FA8])
    {
      time = v40;
      CMTimeGetSeconds(&time);
      fig_gm_ktrace_wrapper();
    }
    MEMORY[0x19402EF04](*(_QWORD *)(v6 + 8));
  }
  if (*(_QWORD *)(a1 + 80))
  {
    v30 = *(NSObject **)(DerivedStorage + 24);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __fbapo_setRateAndAnchorTimeDispatch_block_invoke;
    block[3] = &__block_descriptor_tmp_124;
    block[4] = a1;
    v38 = v17;
    dispatch_async(v30, block);
    return;
  }
LABEL_48:
  fbapo_setRateAndAnchorTimeDispatchContextDestroy((uint64_t *)a1);
}

void __fbapo_setRateAndAnchorTimeDispatch_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _BOOL4 v4;
  CMTimeValue v5;
  uint64_t v6;
  Float64 Seconds;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, CMTime *, __int128 *, _QWORD, float);
  uint64_t v11;
  float v12;
  __int128 v13;
  uint64_t v14;
  CMTime time;
  Float64 v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (*(double *)(v2 + 16) != 0.0)
  {
    if (*MEMORY[0x1E0CA1FB8])
    {
      v3 = fig_log_handle();
      v4 = os_signpost_enabled(v3);
      v2 = *(_QWORD *)(a1 + 32);
      if (v4)
      {
        v5 = *(_QWORD *)v2;
        v6 = *(_QWORD *)(v2 + 16);
        time = *(CMTime *)(v2 + 24);
        Seconds = CMTimeGetSeconds(&time);
        v8 = *(int *)(a1 + 40);
        LODWORD(time.value) = 134218752;
        *(CMTimeValue *)((char *)&time.value + 4) = v5;
        LOWORD(time.flags) = 2048;
        *(_QWORD *)((char *)&time.flags + 2) = v6;
        HIWORD(time.epoch) = 2048;
        v16 = Seconds;
        v17 = 2048;
        v18 = v8;
        _os_signpost_emit_with_name_impl(&dword_1928EC000, v3, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "WHA_BAO_SetRateAndAnchorTime", " enableTelemetry=YES bao=%llu, rate=%1.2f, mediaTime=%1.3f, error=%llu", (uint8_t *)&time, 0x2Au);
        v2 = *(_QWORD *)(a1 + 32);
      }
    }
    if (*MEMORY[0x1E0CA1FA8])
    {
      time = *(CMTime *)(v2 + 24);
      CMTimeGetSeconds(&time);
      fig_gm_ktrace_wrapper();
      v2 = *(_QWORD *)(a1 + 32);
    }
  }
  v10 = *(void (**)(uint64_t, uint64_t, CMTime *, __int128 *, _QWORD, float))(v2 + 80);
  v9 = *(_QWORD *)(v2 + 88);
  v11 = *(unsigned int *)(a1 + 40);
  v12 = *(double *)(v2 + 16);
  time = *(CMTime *)(v2 + 24);
  v13 = *(_OWORD *)(v2 + 48);
  v14 = *(_QWORD *)(v2 + 64);
  v10(v9, v11, &time, &v13, 0, v12);
  fbapo_setRateAndAnchorTimeDispatchContextDestroy(*(uint64_t **)(a1 + 32));
}

void fbapo_setRateAndAnchorTimeDispatchContextDestroy(uint64_t *a1)
{
  const void *v2;
  const void *v3;

  if (a1)
  {
    v2 = (const void *)a1[12];
    if (v2)
    {
      CFRelease(v2);
      a1[12] = 0;
    }
    v3 = (const void *)a1[9];
    if (v3)
    {
      CFRelease(v3);
      a1[9] = 0;
    }
    fbapo_releaseAsync(*a1);
    free(a1);
  }
}

uint64_t fbapo_becomeActiveEndpointStreamAudioEngineClient(void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _BYTE *v6;
  NSObject *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t CMBaseObject;
  void (*v12)(uint64_t, _QWORD, uint64_t);
  uint64_t v13;
  NSObject *v14;
  _BOOL4 doesEndpointStreamSupportMixedSampleRates;
  NSObject *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, _QWORD, _QWORD, CFArrayRef *);
  const __CFAllocator *v19;
  uint64_t v20;
  CFIndex Count;
  CFIndex v22;
  __CFArray *Mutable;
  double v24;
  NSObject *v25;
  const void *SInt32;
  CFMutableDictionaryRef v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, _QWORD, const __CFAllocator *, uint64_t *);
  uint64_t v31;
  NSObject *v32;
  int v33;
  CFIndex i;
  const void *ValueAtIndex;
  double *ASBD;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  NSObject *v41;
  CMClockRef HostTimeClock;
  uint64_t Value;
  uint64_t v44;
  NSObject *v45;
  CMClockRef v46;
  unsigned int v47;
  uint64_t v48;
  void (*v49)(uint64_t, _QWORD, const void *);
  NSObject *v50;
  const __CFAllocator *allocator;
  NSObject *v53;
  uint64_t v54;
  CMTime type;
  CFTypeRef cf;
  CMTime v57;
  uint64_t v58;
  CFArrayRef theArray;
  CMTime rhs;
  CMTime buf;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A3188)
  {
    LODWORD(v57.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v6 = (_BYTE *)MEMORY[0x1E0CA1FB8];
  if (*MEMORY[0x1E0CA1FB8])
  {
    v7 = fig_log_handle();
    if (os_signpost_enabled(v7))
    {
      LODWORD(buf.value) = 134217984;
      *(CMTimeValue *)((char *)&buf.value + 4) = (CMTimeValue)a1;
      _os_signpost_emit_with_name_impl(&dword_1928EC000, v7, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "WHA_BAO_BecomeActiveEndpointStream", " enableTelemetry=YES bao=%llu", (uint8_t *)&buf, 0xCu);
    }
  }
  v8 = (_DWORD *)MEMORY[0x1E0CA1FA8];
  if (*MEMORY[0x1E0CA1FA8])
    fig_gm_ktrace_wrapper();
  FigSimpleMutexCheckIsLockedOnThisThread();
  if (fbapo_amIActiveEndpointStreamClient()
    || *(_BYTE *)(DerivedStorage + 168) && fbapo_audioEngineIsResumed())
  {
    goto LABEL_81;
  }
  v9 = fbapo_setAudioSessionID((uint64_t)a1, 0);
  if ((_DWORD)v9)
  {
    v28 = v9;
    goto LABEL_82;
  }
  v10 = *(_QWORD *)(DerivedStorage + 200);
  CMBaseObject = FigEndpointStreamGetCMBaseObject();
  v12 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v12)
    v12(CMBaseObject, *MEMORY[0x1E0CA4770], v10);
  v13 = CMBaseObjectGetDerivedStorage();
  v58 = 0;
  theArray = 0;
  v57 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  cf = 0;
  if (dword_1EE2A3188)
  {
    LODWORD(type.value) = 0;
    v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  doesEndpointStreamSupportMixedSampleRates = fbapo_doesEndpointStreamSupportMixedSampleRates();
  if (dword_1EE2A3188)
  {
    LODWORD(type.value) = 0;
    v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v54 = v13;
  v17 = FigEndpointStreamGetCMBaseObject();
  v18 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v18)
  {
    SInt32 = 0;
    v27 = 0;
    Mutable = 0;
LABEL_27:
    v28 = 4294954514;
    goto LABEL_70;
  }
  v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v20 = v18(v17, *MEMORY[0x1E0CA47D8], *MEMORY[0x1E0C9AE00], &theArray);
  if ((_DWORD)v20)
  {
LABEL_90:
    v28 = v20;
    SInt32 = 0;
    v27 = 0;
    Mutable = 0;
    goto LABEL_70;
  }
  if (!theArray)
  {
    v20 = FigSignalErrorAt();
    goto LABEL_90;
  }
  Count = CFArrayGetCount(theArray);
  if (Count < 1)
  {
    SInt32 = 0;
    v27 = 0;
    Mutable = 0;
    v28 = 4294949976;
    goto LABEL_70;
  }
  v22 = Count;
  Mutable = CFArrayCreateMutable(v19, 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    SInt32 = 0;
    v27 = 0;
LABEL_96:
    v28 = 4294954510;
    goto LABEL_70;
  }
  if (a2)
  {
    allocator = v19;
    v24 = *(double *)FigEndpointStreamAudioFormatDescriptionGetASBD();
    v58 = a2;
    if (dword_1EE2A3188)
    {
      LODWORD(type.value) = 0;
      v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
LABEL_33:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_34;
    }
    goto LABEL_34;
  }
  v29 = FigEndpointStreamGetCMBaseObject();
  v30 = *(uint64_t (**)(uint64_t, _QWORD, const __CFAllocator *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (!v30)
  {
    SInt32 = 0;
    v27 = 0;
    goto LABEL_27;
  }
  v31 = v30(v29, *MEMORY[0x1E0CA47B8], v19, &v58);
  if ((_DWORD)v31)
  {
LABEL_94:
    v28 = v31;
    SInt32 = 0;
    v27 = 0;
    goto LABEL_70;
  }
  allocator = v19;
  v24 = *(double *)FigEndpointStreamAudioFormatDescriptionGetASBD();
  if (dword_1EE2A3188)
  {
    LODWORD(type.value) = 0;
    v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
    goto LABEL_33;
  }
LABEL_34:
  v33 = 0;
  for (i = 0; i != v22; ++i)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
    ASBD = (double *)FigEndpointStreamAudioFormatDescriptionGetASBD();
    if (doesEndpointStreamSupportMixedSampleRates || *ASBD == v24)
    {
      CFArrayAppendValue(Mutable, ValueAtIndex);
      v33 = 1;
    }
  }
  if (dword_1EE2A3188)
  {
    LODWORD(type.value) = 0;
    v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!v33 || !*(_QWORD *)(v54 + 176))
  {
    v31 = FigSignalErrorAt();
    goto LABEL_94;
  }
  v27 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v27)
  {
    SInt32 = 0;
    goto LABEL_96;
  }
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  v38 = *(_QWORD *)(v54 + 64);
  if (v38)
  {
    v39 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    if (v39)
    {
      v40 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(v39 + 8);
      if (v40)
        v40(v38, CFSTR("FAS_CoreSessionID"), allocator, &cf);
    }
    if (dword_1EE2A3188)
    {
      LODWORD(type.value) = 0;
      v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    FigCFDictionarySetValue();
  }
  HostTimeClock = CMClockGetHostTimeClock();
  CMSyncGetTime(&v57, HostTimeClock);
  Value = FigCFDictionaryGetValue();
  if (Value)
  {
    mach_absolute_time();
    FigCFDictionarySetInt64();
  }
  v44 = FigEndpointStreamAudioEngineResumeSync(*(_QWORD *)(v54 + 72), (uint64_t)v27, 6000);
  if ((_DWORD)v44)
  {
    v28 = v44;
    SInt32 = 0;
  }
  else if (*(_BYTE *)(v54 + 168))
  {
    if (dword_1EE2A3188)
    {
      LODWORD(type.value) = 0;
      v45 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    SInt32 = 0;
    v28 = 0;
  }
  else
  {
    v46 = CMClockGetHostTimeClock();
    CMSyncGetTime(&type, v46);
    rhs = v57;
    CMTimeSubtract(&buf, &type, &rhs);
    rhs = buf;
    CMTimeConvertScale(&buf, &rhs, 1000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    if (6000 - LODWORD(buf.value) <= 1)
      v47 = 1;
    else
      v47 = 6000 - LODWORD(buf.value);
    if (v47 < 0x1F5)
    {
      SInt32 = 0;
    }
    else
    {
      SInt32 = (const void *)FigCFNumberCreateSInt32();
      v48 = FigEndpointStreamGetCMBaseObject();
      v49 = *(void (**)(uint64_t, _QWORD, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v49)
        v49(v48, *MEMORY[0x1E0CA47C0], SInt32);
    }
    if (dword_1EE2A3188)
    {
      v53 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (Value)
    {
      mach_absolute_time();
      FigCFDictionarySetInt64();
    }
    v28 = FigEndpointStreamAudioEngineSetEndpointStreamSync(*(_QWORD *)(v54 + 72), *(_QWORD *)(v54 + 56), v47);
  }
LABEL_70:
  if (cf)
    CFRelease(cf);
  if (theArray)
    CFRelease(theArray);
  if (Mutable)
    CFRelease(Mutable);
  if (v27)
    CFRelease(v27);
  if (SInt32)
    CFRelease(SInt32);
  v8 = (_DWORD *)MEMORY[0x1E0CA1FA8];
  v6 = (_BYTE *)MEMORY[0x1E0CA1FB8];
  if (!(_DWORD)v28)
  {
LABEL_81:
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(DerivedStorage + 160), (CFDictionaryApplierFunction)fbapo_applyCachedPropertiesForBecomeActiveIterator, a1);
    v28 = 0;
  }
LABEL_82:
  if (*v6)
  {
    v50 = fig_log_handle();
    if (os_signpost_enabled(v50))
    {
      LODWORD(buf.value) = 134218240;
      *(CMTimeValue *)((char *)&buf.value + 4) = (CMTimeValue)a1;
      LOWORD(buf.flags) = 2048;
      *(_QWORD *)((char *)&buf.flags + 2) = (int)v28;
      _os_signpost_emit_with_name_impl(&dword_1928EC000, v50, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "WHA_BAO_BecomeActiveEndpointStream", " enableTelemetry=YES bao=%llu, error=%llu", (uint8_t *)&buf, 0x16u);
    }
  }
  if (*v8)
    fig_gm_ktrace_wrapper();
  return v28;
}

void fbapo_applyCachedPropertiesForBecomeActiveIterator(const void *a1, const __CFString *a2, uint64_t a3)
{
  const __CFString *v6;
  uint64_t v7;

  if (CFEqual(a1, CFSTR("AudioMode")))
  {
    fbapo_setAndCacheAudioMode(a3, a2, 0);
  }
  else if (CFEqual(a1, CFSTR("FigAudioSession")))
  {
    if ((const __CFString *)*MEMORY[0x1E0C9B0D0] == a2)
      v6 = 0;
    else
      v6 = a2;
    fbapo_setAndCacheFigAudioSession(a3, v6, 0);
  }
  else if (CFEqual(a1, CFSTR("AudioProcessingTap")))
  {
    if ((const __CFString *)*MEMORY[0x1E0C9B0D0] == a2)
      v7 = 0;
    else
      v7 = (uint64_t)a2;
    fbapo_setAndCacheAudioProcessingTap(a3, v7, 0);
  }
}

void fbapo_setRateAndAnchorTimeCallback(uint64_t a1, int a2, CMTime *a3, CMTime *a4, const void *a5, uint64_t *a6, Float64 a7)
{
  uint64_t v8;
  uint64_t DerivedStorage;
  OpaqueCMClock *HostTimeClock;
  OpaqueCMClock *v14;
  uint64_t v15;
  CMTime *v16;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int value;
  unsigned int v19;
  uint64_t v20;
  Float64 Seconds;
  Float64 v22;
  NSObject *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  Float64 v27;
  Float64 v28;
  Float64 v29;
  Float64 v30;
  Float64 v31;
  int v32;
  CMClockRef v33;
  const void *v34;
  NSObject *v35;
  OpaqueCMTimebase *v36;
  CFTypeRef v37;
  NSObject *v38;
  NSObject *v39;
  _QWORD block[9];
  __int128 v44;
  CMTimeEpoch epoch;
  int v46;
  __int128 v47;
  CMTimeEpoch v48;
  os_log_type_t v49;
  os_log_type_t type[4];
  CMTime v51;
  CMTime v52;
  CMTime v53;
  CMTime v54;
  CMTime v55;
  CMTime v56;
  CMTime rhs;
  uint64_t v58;
  __int16 v59;
  _BYTE v60[54];
  __int16 v61;
  Float64 v62;
  CMTime lhs;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v56 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v55 = v56;
  v54 = v56;
  v8 = *a6;
  if (*a6)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    lhs = *(CMTime *)(a6 + 10);
    rhs = *(CMTime *)(a6 + 7);
    CMTimeSubtract(&v56, &lhs, &rhs);
    HostTimeClock = CMClockGetHostTimeClock();
    CMClockGetTime(&v53, HostTimeClock);
    lhs = *(CMTime *)(a6 + 10);
    CMTimeSubtract(&v55, &v53, &lhs);
    v14 = CMClockGetHostTimeClock();
    CMClockGetTime(&v52, v14);
    lhs = *(CMTime *)(a6 + 7);
    CMTimeSubtract(&v54, &v52, &lhs);
    if ((*(_BYTE *)(DerivedStorage + 252) & 1) != 0)
    {
      rhs = v54;
      v51 = *(CMTime *)(DerivedStorage + 240);
      CMTimeAdd(&lhs, &rhs, &v51);
      v54 = lhs;
    }
    if (dword_1EE2A3188)
    {
      v15 = a1;
      v16 = a4;
      LODWORD(v51.value) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      value = v51.value;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
        v19 = value;
      else
        v19 = value & 0xFFFFFFFE;
      if (v19)
      {
        v20 = CMBaseObjectGetDerivedStorage() + 208;
        lhs = *a3;
        Seconds = CMTimeGetSeconds(&lhs);
        lhs = *v16;
        v22 = CMTimeGetSeconds(&lhs);
        LODWORD(rhs.value) = 136316930;
        *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fbapo_setRateAndAnchorTimeCallback";
        LOWORD(rhs.flags) = 2048;
        *(_QWORD *)((char *)&rhs.flags + 2) = v8;
        HIWORD(rhs.epoch) = 2082;
        v58 = v20;
        v59 = 2048;
        *(_QWORD *)v60 = v15;
        *(_WORD *)&v60[8] = 2048;
        *(Float64 *)&v60[10] = a7;
        *(_WORD *)&v60[18] = 2048;
        *(Float64 *)&v60[20] = Seconds;
        *(_WORD *)&v60[28] = 2048;
        *(Float64 *)&v60[30] = v22;
        *(_WORD *)&v60[38] = 2048;
        *(_QWORD *)&v60[40] = a6;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      a4 = v16;
      if (dword_1EE2A3188)
      {
        LODWORD(v51.value) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v24 = v51.value;
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          v25 = v24;
        else
          v25 = v24 & 0xFFFFFFFE;
        if (v25)
        {
          v26 = CMBaseObjectGetDerivedStorage() + 208;
          lhs = *v16;
          v27 = CMTimeGetSeconds(&lhs);
          lhs = *(CMTime *)(DerivedStorage + 240);
          v28 = CMTimeGetSeconds(&lhs);
          lhs = v56;
          v29 = CMTimeGetSeconds(&lhs);
          lhs = v55;
          v30 = CMTimeGetSeconds(&lhs);
          lhs = v54;
          v31 = CMTimeGetSeconds(&lhs);
          LODWORD(rhs.value) = 136317442;
          *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fbapo_setRateAndAnchorTimeCallback";
          LOWORD(rhs.flags) = 2048;
          *(_QWORD *)((char *)&rhs.flags + 2) = v8;
          HIWORD(rhs.epoch) = 2082;
          v58 = v26;
          v59 = 1024;
          *(_DWORD *)v60 = a2;
          *(_WORD *)&v60[4] = 2048;
          *(Float64 *)&v60[6] = a7;
          *(_WORD *)&v60[14] = 2048;
          *(Float64 *)&v60[16] = v27;
          *(_WORD *)&v60[24] = 2048;
          *(Float64 *)&v60[26] = v28;
          *(_WORD *)&v60[34] = 2048;
          *(Float64 *)&v60[36] = v29;
          *(_WORD *)&v60[44] = 2048;
          *(Float64 *)&v60[46] = v30;
          v61 = 2048;
          v62 = v31;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    v32 = a2;
    if (!a2)
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
      if (!*(_BYTE *)DerivedStorage)
      {
        memset(&v51, 0, sizeof(v51));
        v33 = CMClockGetHostTimeClock();
        v34 = *(const void **)(DerivedStorage + 144);
        lhs = *a4;
        CMSyncConvertTime(&v51, &lhs, v33, v34);
        if (dword_1EE2A3188)
        {
          *(_DWORD *)type = 0;
          v49 = OS_LOG_TYPE_DEFAULT;
          v35 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v32 = 0;
        }
        v36 = *(OpaqueCMTimebase **)(DerivedStorage + 152);
        lhs = *a3;
        rhs = v51;
        CMTimebaseSetRateAndAnchorTime(v36, a7, &lhs, &rhs);
      }
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 8));
    }
    v37 = a5;
    if (a5)
      v37 = CFRetain(a5);
    v38 = *(NSObject **)(DerivedStorage + 40);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __fbapo_setRateAndAnchorTimeCallback_block_invoke;
    block[3] = &__block_descriptor_tmp_128;
    v44 = *(_OWORD *)&a3->value;
    epoch = a3->epoch;
    v46 = v32;
    block[4] = DerivedStorage;
    *(Float64 *)&block[5] = a7;
    block[6] = v8;
    block[7] = a6;
    v47 = *(_OWORD *)&a4->value;
    v48 = a4->epoch;
    block[8] = v37;
    dispatch_async(v38, block);
  }
  else if (dword_1EE2A3188)
  {
    v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

void __fbapo_setRateAndAnchorTimeInternal_block_invoke(uint64_t a1)
{
  double v2;
  NSObject *v3;
  CMTimeValue v4;
  uint64_t v5;
  Float64 Seconds;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, CMTime *, __int128 *, _QWORD, float);
  uint64_t v10;
  float v11;
  __int128 v12;
  uint64_t v13;
  CMTime time;
  Float64 v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = *(double *)(a1 + 32);
  if (v2 != 0.0)
  {
    if (*MEMORY[0x1E0CA1FB8])
    {
      v3 = fig_log_handle();
      if (os_signpost_enabled(v3))
      {
        v5 = *(_QWORD *)(a1 + 32);
        v4 = *(_QWORD *)(a1 + 40);
        time = *(CMTime *)(a1 + 64);
        Seconds = CMTimeGetSeconds(&time);
        v7 = *(int *)(a1 + 88);
        LODWORD(time.value) = 134218752;
        *(CMTimeValue *)((char *)&time.value + 4) = v4;
        LOWORD(time.flags) = 2048;
        *(_QWORD *)((char *)&time.flags + 2) = v5;
        HIWORD(time.epoch) = 2048;
        v15 = Seconds;
        v16 = 2048;
        v17 = v7;
        _os_signpost_emit_with_name_impl(&dword_1928EC000, v3, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "WHA_BAO_SetRateAndAnchorTime", " enableTelemetry=YES bao=%llu, rate=%1.2f, mediaTime=%1.3f, error=%llu", (uint8_t *)&time, 0x2Au);
      }
    }
    v2 = *(double *)(a1 + 32);
    if (*MEMORY[0x1E0CA1FA8])
    {
      time = *(CMTime *)(a1 + 64);
      CMTimeGetSeconds(&time);
      fig_gm_ktrace_wrapper();
      v2 = *(double *)(a1 + 32);
    }
  }
  v9 = *(void (**)(uint64_t, uint64_t, CMTime *, __int128 *, _QWORD, float))(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  v10 = *(unsigned int *)(a1 + 88);
  v11 = v2;
  time = *(CMTime *)(a1 + 64);
  v12 = *(_OWORD *)(a1 + 92);
  v13 = *(_QWORD *)(a1 + 108);
  v9(v8, v10, &time, &v12, 0, v11);
  fbapo_releaseAsync(*(_QWORD *)(a1 + 40));
}

void __fbapo_setRateAndAnchorTimeCallback_block_invoke(uint64_t a1)
{
  CMTime *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __int128 v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  CMTimeEpoch v11;
  double v12;
  NSObject *v13;
  CMTimeValue v14;
  uint64_t v15;
  Float64 Seconds;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, CMTime *, CMTime *, uint64_t, float);
  float v21;
  const void *v22;
  CMTime v23;
  CMTime v24;
  CMTime rhs;
  CMTime time;
  Float64 v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v24 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v2 = (CMTime *)(a1 + 72);
  v23 = *(CMTime *)(a1 + 72);
  v3 = *(_DWORD *)(a1 + 96);
  if (v3 <= -17581)
  {
    if (v3 == -17582)
    {
      v4 = 4294949971;
      goto LABEL_18;
    }
    if (v3 == -17581)
    {
      v4 = 4294949973;
      goto LABEL_18;
    }
    goto LABEL_10;
  }
  v4 = 0;
  if (v3 != -17580 && v3)
  {
LABEL_10:
    v4 = *(unsigned int *)(a1 + 96);
    goto LABEL_18;
  }
  if (!v3)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
    v5 = *(_QWORD *)(a1 + 32);
    if (!*(_BYTE *)v5 && (*(double *)(a1 + 40) != 0.0 || (*(_BYTE *)(v5 + 96) & 1) != 0))
    {
      if (dword_1EE2A3188)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v5 = *(_QWORD *)(a1 + 32);
      }
      v7 = *(_OWORD *)&v2->value;
      *(_QWORD *)(v5 + 100) = v2->epoch;
      *(_OWORD *)(v5 + 84) = v7;
      v5 = *(_QWORD *)(a1 + 32);
    }
    MEMORY[0x19402EF04](*(_QWORD *)(v5 + 8));
  }
LABEL_18:
  v8 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)(v8 + 40))
  {
    v9 = *(double *)(v8 + 8);
    if (v9 != 0.0)
    {
      time = v23;
      CMTimeMultiplyByFloat64(&v23, &time, v9);
      v8 = *(_QWORD *)(a1 + 56);
    }
    if ((*(_BYTE *)(v8 + 28) & 1) != 0)
    {
      *(_OWORD *)&time.value = *(_OWORD *)(v8 + 16);
      v11 = *(_QWORD *)(v8 + 32);
    }
    else
    {
      v10 = *(_QWORD *)(a1 + 32);
      *(_OWORD *)&time.value = *(_OWORD *)(v10 + 112);
      v11 = *(_QWORD *)(v10 + 128);
    }
    time.epoch = v11;
    rhs = v23;
    CMTimeAdd(&v24, &time, &rhs);
    v12 = *(double *)(a1 + 40);
    if (v12 != 0.0)
    {
      if (*MEMORY[0x1E0CA1FB8])
      {
        v13 = fig_log_handle();
        if (os_signpost_enabled(v13))
        {
          v15 = *(_QWORD *)(a1 + 40);
          v14 = *(_QWORD *)(a1 + 48);
          time = *v2;
          Seconds = CMTimeGetSeconds(&time);
          LODWORD(time.value) = 134218752;
          *(CMTimeValue *)((char *)&time.value + 4) = v14;
          LOWORD(time.flags) = 2048;
          *(_QWORD *)((char *)&time.flags + 2) = v15;
          HIWORD(time.epoch) = 2048;
          v27 = Seconds;
          v28 = 2048;
          v29 = (int)v4;
          _os_signpost_emit_with_name_impl(&dword_1928EC000, v13, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "WHA_BAO_SetRateAndAnchorTime", " enableTelemetry=YES bao=%llu, rate=%1.2f, mediaTime=%1.3f, error=%llu", (uint8_t *)&time, 0x2Au);
        }
      }
      v12 = *(double *)(a1 + 40);
      if (*MEMORY[0x1E0CA1FA8])
      {
        time = *v2;
        CMTimeGetSeconds(&time);
        fig_gm_ktrace_wrapper();
        v12 = *(double *)(a1 + 40);
      }
    }
    v18 = *(_QWORD *)(a1 + 56);
    v17 = *(_QWORD *)(a1 + 64);
    v20 = *(void (**)(uint64_t, uint64_t, CMTime *, CMTime *, uint64_t, float))(v18 + 40);
    v19 = *(_QWORD *)(v18 + 48);
    v21 = v12;
    time = v24;
    rhs = *(CMTime *)(a1 + 100);
    v20(v19, v4, &time, &rhs, v17, v21);
  }
  v22 = *(const void **)(a1 + 64);
  if (v22)
    CFRelease(v22);
  fbapo_releaseAsync(**(_QWORD **)(a1 + 56));
  **(_QWORD **)(a1 + 56) = 0;
  free(*(void **)(a1 + 56));
}

uint64_t fbapo_flushInternal()
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  const __CFAllocator *v8;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v10;
  CMTimeFlags v11;
  CMTimeEpoch v12;
  CFDictionaryRef v13;
  CFDictionaryRef v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, __CFDictionary *);
  CMTime time;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A3188)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMTimebaseSetRate(*(CMTimebaseRef *)(DerivedStorage + 152), 0.0);
  v2 = CMBaseObjectGetDerivedStorage();
  v3 = *(_QWORD *)(v2 + 184);
  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  if (!v4)
    return 4294954514;
  v5 = v4(v3);
  if ((_DWORD)v5)
    return v5;
  v6 = *(_QWORD *)(v2 + 176);
  if (!v6)
    goto LABEL_8;
  v7 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  if (!v7)
    return 4294954514;
  v5 = v7(v6);
  if ((_DWORD)v5)
    return v5;
LABEL_8:
  if (!*(_QWORD *)(v2 + 56))
    return 0;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return 4294954510;
  v10 = Mutable;
  v11 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
  if ((v11 & 0x1D) == 1)
  {
    v12 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    time.value = *MEMORY[0x1E0CA2E18];
    time.timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
    time.flags = v11;
    time.epoch = v12;
    v13 = CMTimeCopyAsDictionary(&time, v8);
    if (v13)
    {
      v14 = v13;
      CFDictionarySetValue(v10, CFSTR("AnchorTime"), v13);
      CFDictionarySetValue(v10, CFSTR("TimelineReset"), (const void *)*MEMORY[0x1E0C9AE50]);
      CFRelease(v14);
      v15 = 0;
    }
    else
    {
      v15 = 4294954510;
    }
  }
  else
  {
    v16 = *(_QWORD *)(v2 + 72);
    v17 = *(uint64_t (**)(uint64_t, __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v17)
    {
      v15 = v17(v16, v10);
      if (!(_DWORD)v15)
        *(_BYTE *)(v2 + 108) = 1;
    }
    else
    {
      v15 = 4294954514;
    }
  }
  CFRelease(v10);
  return v15;
}

__n128 fbapo_resetInternal()
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v2;
  __n128 result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A3188)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(_DWORD *)(DerivedStorage + 192) = -999;
  v2 = MEMORY[0x1E0CA2E18];
  result = *(__n128 *)MEMORY[0x1E0CA2E18];
  *(_OWORD *)(DerivedStorage + 240) = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(DerivedStorage + 256) = *(_QWORD *)(v2 + 16);
  return result;
}

void __fbapo_setConnectionActive_block_invoke(uint64_t a1)
{
  BOOL v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v4;

  MEMORY[0x19402EEEC](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
  if (fbapo_becomeActiveEndpointStreamAudioEngineClient(*(void **)(a1 + 40), *(_QWORD *)(a1 + 48)))
    v2 = dword_1EE2A3188 == 0;
  else
    v2 = 1;
  if (!v2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
  v4 = *(const void **)(a1 + 48);
  if (v4)
    CFRelease(v4);
  fbapo_releaseAsync(*(_QWORD *)(a1 + 40));
}

void fbapo_airPlayPrefsChangedCallback(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  CFTypeID TypeID;
  const __CFString *v5;
  const __CFString *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
  TypeID = CFStringGetTypeID();
  if (fbapo_getCachedValue(a2, TypeID, &v6))
    v5 = CFSTR("AudioMode_Default");
  else
    v5 = v6;
  fbapo_setAndCacheAudioMode(a2, v5, 0);
  JUMPOUT(0x19402EF04);
}

uint64_t FigCaptionRendererLegibleOutputCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  if (a1 && a2 && a3 && a5)
  {
    *a5 = 0;
    FigCaptionRendererOutputGetClassID();
    CMDerivedObjectCreate();
  }
  return FigSignalErrorAt();
}

__CFString *FigCaptionRendererLegibleOutput_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigCaptionRendererLegibleOutput %p>"), a1);
  return Mutable;
}

uint64_t transactionBegin_2()
{
  return 0;
}

uint64_t transactionFlush_2()
{
  return 0;
}

uint64_t transactionCommit_2()
{
  return 0;
}

uint64_t setNeedsDisplayInRect_2()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
    (*(void (**)(_QWORD, _QWORD))(DerivedStorage + 88))(*(_QWORD *)DerivedStorage, *(_QWORD *)(DerivedStorage + 72));
  return 0;
}

double getBounds_2()
{
  return *(double *)(CMBaseObjectGetDerivedStorage() + 8);
}

uint64_t setBounds_2(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 8) = a1;
  *(double *)(DerivedStorage + 16) = a2;
  *(double *)(DerivedStorage + 24) = a3;
  *(double *)(DerivedStorage + 32) = a4;
  (*(void (**)(_QWORD, uint64_t, double, double, double, double))(DerivedStorage + 80))(*(_QWORD *)(DerivedStorage + 72), a6, a1, a2, a3, a4);
  return 0;
}

uint64_t setVideoBounds_2(double a1, double a2, double a3, double a4)
{
  double *DerivedStorage;

  DerivedStorage = (double *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[5] = a1;
  DerivedStorage[6] = a2;
  DerivedStorage[7] = a3;
  DerivedStorage[8] = a4;
  return 0;
}

int clear_2(void)
{
  return 0;
}

uint64_t FigCaptionStyleSegmentGetTypeID()
{
  MEMORY[0x19402F294](&FigCaptionStyleSegmentGetTypeID_sRegisterFigCaptionStyleSegmentOnce, styleSegment_Register);
  return sFigCaptionStyleSegmentID;
}

uint64_t styleSegment_Register()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigCaptionStyleSegmentID = result;
  return result;
}

CFIndex FigCaptionStyleSegmentGetTextLength(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  const __CFString *v3;

  if (!a1)
    return 0;
  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
    return 0;
  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v2)
  {
    v3 = (const __CFString *)v2(v1);
    if (!v3)
      return 0;
  }
  else
  {
    v3 = &stru_1E2FD85F8;
  }
  return CFStringGetLength(v3);
}

uint64_t FigCaptionStyleSegmentCopyText(uint64_t a1, const __CFString **a2)
{
  const __CFString *v4;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);

  if (a1)
  {
    v4 = *(const __CFString **)(a1 + 16);
    if (!v4)
    {
      v6 = *(_QWORD *)(a1 + 24);
      if (!v6)
      {
        v4 = 0;
        goto LABEL_4;
      }
      v7 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v7)
      {
        v4 = (const __CFString *)v7(v6);
        if (!v4)
        {
          *(_QWORD *)(a1 + 16) = 0;
          goto LABEL_4;
        }
      }
      else
      {
        v4 = &stru_1E2FD85F8;
      }
      v4 = (const __CFString *)CFRetain(v4);
      *(_QWORD *)(a1 + 16) = v4;
      if (!v4)
        goto LABEL_4;
    }
    v4 = (const __CFString *)CFRetain(v4);
LABEL_4:
    *a2 = v4;
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t FigCaptionStyleSegmentCopyCaptionData(uint64_t a1, _QWORD *a2)
{
  CFTypeRef v3;

  if (!a1 || !a2)
    return FigSignalErrorAt();
  v3 = *(CFTypeRef *)(a1 + 24);
  if (v3)
    v3 = CFRetain(v3);
  *a2 = v3;
  return 0;
}

uint64_t FigCaptionStyleSegmentCopyAttributes(uint64_t a1, _QWORD *a2)
{
  CFTypeRef v3;

  if (!a1)
    return FigSignalErrorAt();
  v3 = *(CFTypeRef *)(a1 + 32);
  if (v3)
    v3 = CFRetain(v3);
  *a2 = v3;
  return 0;
}

uint64_t FigCaptionStyleSegmentGeneratorGetTypeID()
{
  MEMORY[0x19402F294](&FigCaptionStyleSegmentGeneratorGetTypeID_sRegisterFigCaptionStyleSegmentGeneratorOnce, fcstylesegmenter_Register);
  return sFigCaptionStyleSegmentGeneratorID;
}

uint64_t fcstylesegmenter_Register()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigCaptionStyleSegmentGeneratorID = result;
  return result;
}

uint64_t FigCaptionStyleSegmentGeneratorPerform(uint64_t a1)
{
  CFMutableArrayRef *v1;
  uint64_t v2;
  uint64_t v3;
  const __CFAllocator *v4;
  uint64_t CMBaseObject;
  uint64_t (*v6)(uint64_t, uint64_t, const __CFAllocator *, CMTimeRange *);
  uint64_t v7;
  CFMutableArrayRef Mutable;
  uint64_t (*v9)(uint64_t);
  const __CFString *v10;
  uint64_t v11;
  CFIndex Length;
  CFIndex Count;
  CFIndex v14;
  CFIndex v15;
  const void *ValueAtIndex;
  const void *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, const void *, const __CFAllocator *, _QWORD, _BYTE *);
  uint64_t v20;
  CFIndex v21;
  CFIndex v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  uint64_t v26;
  CFTypeRef v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, const __CFAllocator *, _BYTE *);
  uint64_t v30;
  CFIndex v31;
  __CFArray *v32;
  CFIndex v33;
  CFIndex v34;
  CFIndex i;
  const void *v36;
  const __CFDictionary *v37;
  CFIndex v38;
  size_t v39;
  const void **v40;
  size_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const __CFDictionary *Value;
  CFMutableArrayRef v47;
  uint64_t v48;
  CFIndex v49;
  CFMutableArrayRef *v50;
  CMTime *v51;
  __CFArray *v52;
  CFMutableArrayRef *v53;
  const __CFAllocator *allocator;
  CMTimeRange v55;
  CMTimeRange v56;
  uint64_t v57;
  CFTypeRef cf;
  CMTimeRange theArray;
  _BYTE start[56];
  const __CFDictionary *v61;
  uint64_t v62;
  CFTypeRef v63[2];
  CFRange v64;
  CFRange v65;

  cf = 0;
  if (!a1)
    return FigSignalErrorAt();
  v1 = (CFMutableArrayRef *)a1;
  v2 = *(_QWORD *)(a1 + 64);
  theArray.start.value = 0;
  v3 = *MEMORY[0x1E0CA3368];
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  CMBaseObject = FigCaptionDataGetCMBaseObject();
  v6 = *(uint64_t (**)(uint64_t, uint64_t, const __CFAllocator *, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
  v53 = v1;
  if (v6)
  {
    v7 = v6(CMBaseObject, v3, v4, &theArray);
    if ((_DWORD)v7)
    {
      v11 = v7;
      Mutable = 0;
    }
    else
    {
      Mutable = CFArrayCreateMutable(v4, 0, MEMORY[0x1E0C9B378]);
      if (Mutable)
      {
        v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (v9)
          v10 = (const __CFString *)v9(v2);
        else
          v10 = &stru_1E2FD85F8;
        Length = CFStringGetLength(v10);
        Count = CFArrayGetCount((CFArrayRef)theArray.start.value);
        if (Count)
        {
          v14 = Count;
          v15 = 0;
          while (1)
          {
            ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)theArray.start.value, v15);
            *(_QWORD *)start = 0;
            *(_QWORD *)&start[8] = 0;
            if (Length)
              break;
LABEL_16:
            if (++v15 == v14)
              goto LABEL_17;
          }
          v17 = ValueAtIndex;
          v18 = 0;
          while (1)
          {
            v19 = *(uint64_t (**)(uint64_t, uint64_t, const void *, const __CFAllocator *, _QWORD, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
            if (!v19)
            {
              v11 = 4294954514;
              goto LABEL_19;
            }
            v20 = v19(v2, v18, v17, v4, 0, start);
            if ((_DWORD)v20)
              break;
            v18 = *(_QWORD *)&start[8] + *(_QWORD *)start;
            FigCFArrayAppendCFIndex();
            if (v18 == Length)
              goto LABEL_16;
          }
          v11 = v20;
LABEL_19:
          CFRelease(Mutable);
          Mutable = 0;
        }
        else
        {
LABEL_17:
          v64.length = CFArrayGetCount(Mutable);
          v64.location = 0;
          CFArraySortValues(Mutable, v64, (CFComparatorFunction)MEMORY[0x1E0C98910], 0);
          v11 = 0;
        }
        v1 = v53;
      }
      else
      {
        v11 = FigSignalErrorAt();
      }
    }
  }
  else
  {
    Mutable = 0;
    v11 = 4294954514;
  }
  if (theArray.start.value)
    CFRelease((CFTypeRef)theArray.start.value);
  if (!(_DWORD)v11)
  {
    v21 = CFArrayGetCount(Mutable);
    if (v21)
    {
      v22 = v21;
      v48 = v3;
      v23 = 0;
      v24 = 0;
      v50 = v1 + 5;
      v51 = (CMTime *)(v1 + 2);
      v25 = (const void *)*MEMORY[0x1E0CA35E0];
      v49 = v21;
      allocator = v4;
      v52 = Mutable;
      while (1)
      {
        v57 = 0;
        FigCFArrayGetCFIndexAtIndex();
        if (v57 != v24)
          break;
LABEL_69:
        if (++v23 == v22)
        {
          v11 = 0;
          goto LABEL_78;
        }
      }
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      v26 = FigCaptionDataCopySubrange();
      if ((_DWORD)v26)
        goto LABEL_84;
      v27 = cf;
      *(CMTime *)start = *v51;
      *(_OWORD *)&theArray.start.value = *(_OWORD *)v50;
      theArray.start.epoch = (CMTimeEpoch)v50[2];
      CMTimeRangeFromTimeToTime(&v56, (CMTime *)start, &theArray.start);
      *(_QWORD *)start = 0;
      v28 = FigCaptionDataGetCMBaseObject();
      v29 = *(uint64_t (**)(uint64_t, uint64_t, const __CFAllocator *, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
      if (v29)
      {
        v30 = v29(v28, v48, v4, start);
        if ((_DWORD)v30)
        {
          v11 = v30;
          v32 = 0;
        }
        else
        {
          v31 = CFArrayGetCount(*(CFArrayRef *)start);
          v32 = CFArrayCreateMutable(v4, v31, MEMORY[0x1E0C9B378]);
          if (v32)
          {
            v33 = CFArrayGetCount(*(CFArrayRef *)start);
            if (v33)
            {
              v34 = v33;
              for (i = 0; i != v34; ++i)
              {
                v36 = CFArrayGetValueAtIndex(*(CFArrayRef *)start, i);
                if (!CFEqual(v36, v25))
                  CFArrayAppendValue(v32, v36);
              }
            }
            v11 = 0;
          }
          else
          {
            v11 = FigSignalErrorAt();
          }
        }
      }
      else
      {
        v32 = 0;
        v11 = 4294954514;
      }
      if (*(_QWORD *)start)
        CFRelease(*(CFTypeRef *)start);
      if ((_DWORD)v11)
      {
LABEL_65:
        if (v32)
          CFRelease(v32);
        Mutable = v52;
        if ((_DWORD)v11)
          goto LABEL_78;
        v24 = v57;
        v4 = allocator;
        goto LABEL_69;
      }
      theArray = v56;
      v63[0] = 0;
      v37 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v61 = v37;
      v62 = 0;
      *(CMTimeRange *)&start[8] = theArray;
      *(_QWORD *)start = v27;
      v65.length = CFArrayGetCount(v32);
      v65.location = 0;
      CFArrayApplyFunction(v32, v65, (CFArrayApplierFunction)fcstylesegmenter_buildTimeToAttributesMap, start);
      if ((_DWORD)v62 || (v38 = CFDictionaryGetCount(v37), v38 < 1))
      {
        v44 = 0;
        v40 = 0;
        v11 = 0;
      }
      else
      {
        v39 = v38;
        v40 = 0;
        if (!((unint64_t)v38 >> 61))
        {
          v41 = 8 * v38;
          if (8 * v39)
            v40 = (const void **)malloc_type_malloc(v41, 0x5CC9CBA6uLL);
        }
        CFDictionaryGetKeysAndValues(v37, v40, 0);
        qsort_r(v40, v39, 8uLL, 0, (int (__cdecl *)(void *, const void *, const void *))fcstylesegmenter_compareCFNumber);
        v42 = figCaptionStyleSegmentCreate(v63);
        if ((_DWORD)v42)
        {
          v11 = v42;
        }
        else
        {
          v43 = 0;
          v44 = (void *)v63[0];
          do
          {
            Value = (const __CFDictionary *)CFDictionaryGetValue(v37, v40[v43]);
            if (!v43)
              CFDictionaryApplyFunction(Value, (CFDictionaryApplierFunction)fcstylesegmenter_addAttribute, v44);
            ++v43;
          }
          while (v39 != v43);
          v11 = figCaptionStyleSegmentSetCaptionData((uint64_t)v44, v27);
          if (!(_DWORD)v11)
          {
            v63[0] = 0;
            goto LABEL_55;
          }
        }
        v44 = 0;
      }
LABEL_55:
      if (v37)
        CFRelease(v37);
      free(v40);
      if (v63[0])
        CFRelease(v63[0]);
      if ((_DWORD)v11)
      {
        if (!v44)
          goto LABEL_64;
      }
      else
      {
        if (!v44)
        {
          v11 = fcstylesegmenter_setCaptionData(v53, v27);
          goto LABEL_64;
        }
        CFArrayAppendValue(v53[9], v44);
      }
      CFRelease(v44);
LABEL_64:
      v22 = v49;
      goto LABEL_65;
    }
    *(CMTime *)start = *(CMTime *)(v1 + 2);
    *(_OWORD *)&theArray.start.value = *(_OWORD *)(v1 + 5);
    v47 = v1[8];
    theArray.start.epoch = (CMTimeEpoch)v1[7];
    CMTimeRangeFromTimeToTime(&v55, (CMTime *)start, &theArray.start);
    v26 = fcstylesegmenter_setCaptionData(v1, v47);
LABEL_84:
    v11 = v26;
    if (!Mutable)
      goto LABEL_80;
    goto LABEL_79;
  }
LABEL_78:
  if (Mutable)
LABEL_79:
    CFRelease(Mutable);
LABEL_80:
  if (cf)
    CFRelease(cf);
  return v11;
}

uint64_t fcstylesegmenter_setCaptionData(CFMutableArrayRef *a1, const void *a2)
{
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  int v8[2];

  *(_QWORD *)v8 = 0;
  CFGetAllocator(a1);
  v4 = figCaptionStyleSegmentCreate(v8);
  v5 = *(const void **)v8;
  if ((_DWORD)v4)
  {
    v6 = v4;
    if (!*(_QWORD *)v8)
      return v6;
    goto LABEL_5;
  }
  v6 = figCaptionStyleSegmentSetCaptionData(*(uint64_t *)v8, a2);
  if (!(_DWORD)v6)
    CFArrayAppendValue(a1[9], v5);
  if (v5)
LABEL_5:
    CFRelease(v5);
  return v6;
}

CFIndex FigCaptionStyleSegmentGeneratorGetSegmentCount(uint64_t a1)
{
  const __CFArray *v1;

  if (a1 && (v1 = *(const __CFArray **)(a1 + 72)) != 0)
    return CFArrayGetCount(v1);
  else
    return 0;
}

const void *FigCaptionStyleSegmentGeneratorGetSegmentAtIndex(uint64_t a1, CFIndex a2)
{
  const __CFArray *v3;

  if (a1)
  {
    v3 = *(const __CFArray **)(a1 + 72);
    if (v3)
    {
      if ((a2 & 0x8000000000000000) == 0 && CFArrayGetCount(v3) > a2)
        return CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), a2);
      FigSignalErrorAt();
    }
  }
  return 0;
}

uint64_t FigCaptionStyleSegmentGeneratorCreate(uint64_t a1, const void *a2, __int128 *a3, uint64_t *a4)
{
  const __CFAllocator *v7;
  uint64_t Instance;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v10;
  CMTimeEpoch epoch;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  CMTimeRange v16;
  CMTime v17;

  if (!a4 || !a2)
    return FigSignalErrorAt();
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MEMORY[0x19402F294](&FigCaptionStyleSegmentGeneratorGetTypeID_sRegisterFigCaptionStyleSegmentGeneratorOnce, fcstylesegmenter_Register);
  Instance = _CFRuntimeCreateInstance();
  Mutable = CFArrayCreateMutable(v7, 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v10 = Mutable;
    *(_QWORD *)(Instance + 64) = CFRetain(a2);
    CMTimeMake(&v16.start, 0, 1000);
    epoch = v16.start.epoch;
    *(_OWORD *)(Instance + 16) = *(_OWORD *)&v16.start.value;
    *(_QWORD *)(Instance + 32) = epoch;
    CMTimeMake(&v16.start, 10000, 1000);
    *(_OWORD *)(Instance + 40) = *(_OWORD *)&v16.start.value;
    *(_QWORD *)(Instance + 56) = v16.start.epoch;
    v12 = *a3;
    *(_QWORD *)(Instance + 32) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(Instance + 16) = v12;
    v13 = a3[1];
    *(_OWORD *)&v16.start.value = *a3;
    *(_OWORD *)&v16.start.epoch = v13;
    *(_OWORD *)&v16.duration.timescale = a3[2];
    CMTimeRangeGetEnd(&v17, &v16);
    v14 = 0;
    *(CMTime *)(Instance + 40) = v17;
    *(_QWORD *)(Instance + 72) = v10;
    *a4 = Instance;
  }
  else
  {
    v14 = FigSignalErrorAt();
    if (Instance)
      CFRelease((CFTypeRef)Instance);
  }
  return v14;
}

_QWORD *styleSegment_Init(_QWORD *result)
{
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  return result;
}

void styleSegment_Finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)a1[4];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[3];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[2];
  if (v4)
    CFRelease(v4);
}

CFStringRef styleSegment_CopyFormattingDesc(uint64_t a1)
{
  const __CFString *v2;
  uint64_t (*v3)(const __CFString *);
  CFIndex Length;
  const __CFString *v5;

  v2 = *(const __CFString **)(a1 + 24);
  if (!v2)
  {
    Length = 0;
    goto LABEL_8;
  }
  v3 = *(uint64_t (**)(const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v3)
  {
    v2 = &stru_1E2FD85F8;
    goto LABEL_7;
  }
  Length = v3(v2);
  v2 = (const __CFString *)Length;
  if (Length)
LABEL_7:
    Length = CFStringGetLength(v2);
LABEL_8:
  if (v2)
    v5 = v2;
  else
    v5 = &stru_1E2FD85F8;
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigCaptionStyleSegment %p]  CaptionData: %p text:<%@> length:%ld\nattributes = %p"), a1, *(_QWORD *)(a1 + 24), v5, Length, *(_QWORD *)(a1 + 32));
}

double fcstylesegmenter_Init(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

void fcstylesegmenter_Finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 72);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 64);
  if (v3)
    CFRelease(v3);
}

__CFString *fcstylesegmenter_CopyDebugDesc(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("[FigCaptionStyleSegmentGenerator(%p) captionData:%p segments:%p]"), a1, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
  return Mutable;
}

void fcstylesegmenter_buildTimeToAttributesMap(const void *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t, _QWORD, const void *, _QWORD, CFTypeRef *, _QWORD);
  int v6;
  CFTypeID v7;
  uint64_t KeyFrameCount;
  uint64_t v9;
  uint64_t v10;
  __CFDictionary *AttributeDictionaryForAnimationTime;
  __CFDictionary *v12;
  CMTime v13;
  uint64_t v14;
  CFTypeRef v15;
  CFTypeRef cf;

  v15 = 0;
  cf = 0;
  if (*((_DWORD *)a2 + 16))
    goto LABEL_26;
  v4 = *a2;
  v5 = *(uint64_t (**)(uint64_t, _QWORD, const void *, _QWORD, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 24);
  if (v5)
  {
    v6 = v5(v4, 0, a1, *MEMORY[0x1E0C9AE00], &cf, 0);
    if (!v6)
    {
      if (cf)
      {
        v7 = CFGetTypeID(cf);
        if (v7 == FigCaptionDynamicStyleGetTypeID())
        {
          KeyFrameCount = FigCaptionDynamicStyleGetKeyFrameCount();
          if (KeyFrameCount < 1)
            goto LABEL_24;
          v9 = KeyFrameCount;
          v10 = 0;
          while (1)
          {
            v14 = 0;
            if (v15)
            {
              CFRelease(v15);
              v15 = 0;
            }
            v6 = FigCaptionDynamicStyleCopyKeyFrameValueAtIndex();
            if (v6)
              break;
            if ((*((_DWORD *)a2 + 11) & 0x1D) == 1)
            {
              v13 = *(CMTime *)(a2 + 4);
              CMTimeGetSeconds(&v13);
            }
            AttributeDictionaryForAnimationTime = (__CFDictionary *)insertOrGetAttributeDictionaryForAnimationTime((const __CFDictionary *)a2[7]);
            if (!AttributeDictionaryForAnimationTime || !v15)
              goto LABEL_21;
            CFDictionarySetValue(AttributeDictionaryForAnimationTime, a1, v15);
            if (v9 == ++v10)
              goto LABEL_24;
          }
LABEL_22:
          if (!v6)
            goto LABEL_24;
          goto LABEL_23;
        }
        if (cf)
        {
          v12 = (__CFDictionary *)insertOrGetAttributeDictionaryForAnimationTime((const __CFDictionary *)a2[7]);
          if (v12)
          {
            CFDictionarySetValue(v12, a1, cf);
            goto LABEL_24;
          }
        }
      }
LABEL_21:
      v6 = FigSignalErrorAt();
      goto LABEL_22;
    }
  }
  else
  {
    v6 = -12782;
  }
LABEL_23:
  *((_DWORD *)a2 + 16) = v6;
LABEL_24:
  if (v15)
    CFRelease(v15);
LABEL_26:
  if (cf)
    CFRelease(cf);
}

CFComparisonResult fcstylesegmenter_compareCFNumber(uint64_t a1, CFNumberRef *a2, CFNumberRef *a3)
{
  return CFNumberCompare(*a2, *a3, 0);
}

uint64_t figCaptionStyleSegmentCreate(_QWORD *a1)
{
  const __CFAllocator *v2;
  uint64_t Instance;
  _QWORD *v4;
  CFMutableDictionaryRef Mutable;
  uint64_t v7;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MEMORY[0x19402F294](&FigCaptionStyleSegmentGetTypeID_sRegisterFigCaptionStyleSegmentOnce, styleSegment_Register);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v4 = (_QWORD *)Instance;
  Mutable = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v4[4] = Mutable;
    *a1 = v4;
    return 0;
  }
  else
  {
    v7 = FigSignalErrorAt();
    CFRelease(v4);
    return v7;
  }
}

void fcstylesegmenter_addAttribute(void *key, void *value, _QWORD *cf)
{
  __CFDictionary *Mutable;
  const __CFAllocator *v7;

  if (cf)
  {
    Mutable = (__CFDictionary *)cf[4];
    if (Mutable)
    {
      if (!value)
      {
        CFDictionaryRemoveValue(Mutable, key);
        return;
      }
      goto LABEL_7;
    }
    if (value)
    {
      v7 = CFGetAllocator(cf);
      Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      cf[4] = Mutable;
LABEL_7:
      CFDictionarySetValue(Mutable, key, value);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t figCaptionStyleSegmentSetCaptionData(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  if (!a1)
    return FigSignalErrorAt();
  v2 = *(const void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
  return 0;
}

uint64_t FigTTMLTreeGetTypeID()
{
  MEMORY[0x19402F294](&FigTTMLTreeGetTypeID_sRegisterFigTTMLTreeOnce, figTTMLTreeRegisterFigTTMLTree);
  return sFigTTMLTreeID;
}

uint64_t figTTMLTreeRegisterFigTTMLTree()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigTTMLTreeID = result;
  return result;
}

uint64_t FigTTMLTreeCreate(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t CMBaseObject;
  uint64_t (*v7)(uint64_t, _QWORD, _QWORD, CFNumberRef *);
  const __CFAllocator *v8;
  uint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  unsigned int (*v12)(uint64_t, unint64_t, _QWORD, _BYTE *, uint64_t *);
  uint64_t v13;
  uint64_t v14;
  uint64_t Instance;
  uint64_t v16;
  CFTypeRef cf;
  uint64_t v19;
  unint64_t valuePtr;
  CFNumberRef number;

  valuePtr = 0;
  number = 0;
  cf = 0;
  v19 = 0;
  v5 = FigTTMLGetLibXMLAccess();
  if (!v5)
    goto LABEL_22;
  CMBaseObject = CMByteStreamGetCMBaseObject();
  v7 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v7)
  {
    v10 = 0;
    v13 = 0;
    v16 = 4294954514;
    goto LABEL_15;
  }
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v9 = v7(CMBaseObject, *MEMORY[0x1E0CA2070], *MEMORY[0x1E0C9AE00], &number);
  if ((_DWORD)v9)
    goto LABEL_23;
  CFNumberGetValue(number, kCFNumberSInt64Type, &valuePtr);
  if (valuePtr >= 0x7FFFFFFF)
  {
LABEL_22:
    v9 = FigSignalErrorAt();
LABEL_23:
    v16 = v9;
    v10 = 0;
    goto LABEL_14;
  }
  v10 = malloc_type_malloc(valuePtr + 1, 0xD511040BuLL);
  if (!v10
    || (v11 = valuePtr,
        (v12 = *(unsigned int (**)(uint64_t, unint64_t, _QWORD, _BYTE *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8)) == 0)
    || v12(a2, v11, 0, v10, &v19)
    || v19 != valuePtr)
  {
    v16 = FigSignalErrorAt();
LABEL_14:
    v13 = 0;
    goto LABEL_15;
  }
  v10[v19] = 0;
  v13 = (*(uint64_t (**)(_BYTE *, _QWORD, _QWORD, _QWORD, _QWORD))(v5 + 128))(v10, valuePtr, 0, 0, 0);
  FigTTMLMoveCurrentNodeTo(v13, 1);
  v14 = FigTTMLRootCreate(v8, v13, &cf);
  if (!(_DWORD)v14)
  {
    MEMORY[0x19402F294](&FigTTMLTreeGetTypeID_sRegisterFigTTMLTreeOnce, figTTMLTreeRegisterFigTTMLTree);
    Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      v16 = 0;
      *(_QWORD *)(Instance + 16) = cf;
      cf = 0;
      *a3 = Instance;
      goto LABEL_15;
    }
    v14 = FigSignalErrorAt();
  }
  v16 = v14;
LABEL_15:
  free(v10);
  if (number)
    CFRelease(number);
  if (cf)
    CFRelease(cf);
  if (v13)
    (*(void (**)(uint64_t))(v5 + 64))(v13);
  return v16;
}

uint64_t FigTTMLTreeCreateWithCString(uint64_t a1, char *__s, uint64_t *a3)
{
  size_t v6;
  uint64_t result;

  v6 = strlen(__s);
  result = FigCreateBlockBufferCopyingMemoryBlock();
  if (!(_DWORD)result)
  {
    result = CMBlockBufferReplaceDataBytes(__s, 0, 0, v6);
    if (!(_DWORD)result)
    {
      result = CMByteStreamCreateForBlockBuffer();
      if (!(_DWORD)result)
        return FigTTMLTreeCreate(a1, 0, a3);
    }
  }
  return result;
}

uint64_t FigTTMLTreeGetParameters(uint64_t a1, _QWORD *a2)
{
  return FigTTMLRootGetParameters(*(_QWORD *)(a1 + 16), a2);
}

uint64_t FigTTMLTreeCopyFeatureAndExtensionSet(uint64_t a1, unsigned int a2, CFMutableSetRef *a3)
{
  const void *HeadNode;
  CFMutableSetRef Mutable;
  uint64_t v7;
  _QWORD v9[2];

  HeadNode = (const void *)FigTTMLRootGetHeadNode();
  Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]);
  v9[1] = Mutable;
  v9[0] = a2;
  if (a3)
  {
    v7 = FigTTMLTreeWalkFromNode(HeadNode, 0, (uint64_t (*)(const void *, uint64_t))figTTMLTreeBuildFeatureAndExtensionSet, (uint64_t)v9);
    if (!(_DWORD)v7)
    {
      *a3 = Mutable;
      return v7;
    }
  }
  else
  {
    v7 = FigSignalErrorAt();
  }
  if (Mutable)
    CFRelease(Mutable);
  return v7;
}

uint64_t FigTTMLTreeWalkFromNode(const void *a1, uint64_t (*a2)(const void *, uint64_t), uint64_t (*a3)(const void *, uint64_t), uint64_t a4)
{
  const __CFAllocator *v8;
  const CFArrayCallBacks *v9;
  __CFArray *Mutable;
  __CFArray *v11;
  const void *v12;
  const void *v13;
  CFIndex Count;
  const void *ValueAtIndex;
  CFIndex v16;
  const __CFBoolean *v17;
  uint64_t v18;
  CFIndex v19;
  CFIndex v20;
  CFIndex v21;
  uint64_t v22;
  uint64_t v23;
  CFIndex v24;
  CFIndex v25;
  const void *v26;
  CFArrayRef theArray;

  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v9 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v11 = CFArrayCreateMutable(v8, 0, v9);
  theArray = 0;
  CFArrayAppendValue(Mutable, a1);
  v12 = (const void *)*MEMORY[0x1E0C9AE40];
  CFArrayAppendValue(v11, (const void *)*MEMORY[0x1E0C9AE40]);
  if (CFArrayGetCount(Mutable))
  {
    v13 = (const void *)*MEMORY[0x1E0C9AE50];
    do
    {
      Count = CFArrayGetCount(Mutable);
      ValueAtIndex = CFArrayGetValueAtIndex(Mutable, Count - 1);
      v16 = CFArrayGetCount(v11);
      v17 = (const __CFBoolean *)CFArrayGetValueAtIndex(v11, v16 - 1);
      if (CFBooleanGetValue(v17))
      {
        if (a3)
        {
          v18 = a3(ValueAtIndex, a4);
          if ((_DWORD)v18)
          {
LABEL_24:
            v23 = v18;
            if (!Mutable)
              goto LABEL_19;
LABEL_18:
            CFRelease(Mutable);
            goto LABEL_19;
          }
        }
        v19 = CFArrayGetCount(Mutable);
        CFArrayRemoveValueAtIndex(Mutable, v19 - 1);
        v20 = CFArrayGetCount(v11);
        CFArrayRemoveValueAtIndex(v11, v20 - 1);
      }
      else
      {
        v21 = CFArrayGetCount(v11);
        CFArraySetValueAtIndex(v11, v21 - 1, v13);
        if (a2)
        {
          v22 = a2(ValueAtIndex, a4);
          if ((_DWORD)v22 == -16573)
            continue;
          v23 = v22;
          if ((_DWORD)v22)
            goto LABEL_17;
        }
        v18 = FigTTMLNodeCopyChildNodeArray((uint64_t)ValueAtIndex, (uint64_t)&theArray);
        if ((_DWORD)v18)
          goto LABEL_24;
        v24 = CFArrayGetCount(theArray);
        v25 = v24 - 1;
        if (v24 >= 1)
        {
          do
          {
            v26 = CFArrayGetValueAtIndex(theArray, v25);
            CFArrayAppendValue(Mutable, v26);
            CFArrayAppendValue(v11, v12);
            --v25;
          }
          while (v25 != -1);
        }
        if (theArray)
        {
          CFRelease(theArray);
          theArray = 0;
        }
      }
    }
    while (CFArrayGetCount(Mutable));
  }
  v23 = 0;
LABEL_17:
  if (Mutable)
    goto LABEL_18;
LABEL_19:
  if (v11)
    CFRelease(v11);
  if (theArray)
    CFRelease(theArray);
  return v23;
}

uint64_t figTTMLTreeBuildFeatureAndExtensionSet(uint64_t a1, uint64_t a2)
{
  uint64_t NodeType;
  uint64_t ParentNode;
  const __CFString *v6;
  int v7;
  const __CFAllocator *v8;
  const __CFURL *v9;
  const __CFURL *v10;
  const __CFURL *v11;
  __CFSet *v12;
  CFStringRef v13;
  uint64_t v14;
  CFStringRef URLString;
  CFTypeRef cf1;
  void *value;
  CFDictionaryRef theDict;
  int v20;

  v20 = 0;
  value = &stru_1E2FD85F8;
  theDict = 0;
  cf1 = CFSTR("required");
  NodeType = FigTTMLNodeGetNodeType(a1, (uint64_t)&v20);
  if (!(_DWORD)NodeType)
  {
    if ((v20 & 0xFFFFFFFE) != 0x12)
    {
LABEL_26:
      v14 = 0;
      goto LABEL_27;
    }
    ParentNode = FigTTMLNodeGetParentNode();
    NodeType = FigTTMLNodeCopyAttributes(ParentNode, &theDict);
    if (!(_DWORD)NodeType)
    {
      if (theDict)
      {
        CFDictionaryGetValueIfPresent(theDict, CFSTR("http://www.w3.org/XML/1998/namespace base"), (const void **)&value);
        if (theDict)
        {
          CFRelease(theDict);
          theDict = 0;
        }
      }
      NodeType = FigTTMLNodeCopyAttributes(a1, &theDict);
      if (!(_DWORD)NodeType)
      {
        v6 = CFSTR("required");
        if (theDict)
        {
          CFDictionaryGetValueIfPresent(theDict, CFSTR("value"), &cf1);
          v6 = (const __CFString *)cf1;
        }
        if (CFEqual(v6, CFSTR("optional")))
        {
          v7 = 1;
        }
        else if (CFEqual(cf1, CFSTR("required")))
        {
          v7 = 2;
        }
        else
        {
          v7 = 4 * (CFEqual(cf1, CFSTR("use")) != 0);
        }
        if ((*(_DWORD *)a2 & v7) == 0)
          goto LABEL_26;
        URLString = 0;
        NodeType = FigTTMLNodeCopyNodeValue(a1, &URLString);
        if (!(_DWORD)NodeType)
        {
          if (URLString)
          {
            v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v9 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFStringRef)value, 0);
            v10 = CFURLCreateWithString(v8, URLString, v9);
            v11 = CFURLCopyAbsoluteURL(v10);
            v12 = *(__CFSet **)(a2 + 8);
            v13 = CFURLGetString(v11);
            CFSetSetValue(v12, v13);
            if (URLString)
              CFRelease(URLString);
            if (v11)
              CFRelease(v11);
            if (v10)
              CFRelease(v10);
            if (v9)
              CFRelease(v9);
            goto LABEL_26;
          }
          NodeType = FigSignalErrorAt();
        }
      }
    }
  }
  v14 = NodeType;
LABEL_27:
  if (theDict)
    CFRelease(theDict);
  return v14;
}

uint64_t FigTTMLTreeCopySliceTimeRangeArray(uint64_t a1, __CFArray **a2)
{
  const __CFAllocator *v4;
  const CFArrayCallBacks *v5;
  const __CFArray *Mutable;
  CFMutableArrayRef v7;
  uint64_t v8;
  CFIndex Count;
  CFIndex v10;
  CFIndex v11;
  CMTime *v12;
  const __CFDictionary *ValueAtIndex;
  CMTimeFlags flags;
  CMTimeFlags v15;
  CMTimeValue v16;
  CMTimeEpoch epoch;
  CMTimeScale v18;
  CFDictionaryRef v19;
  CFDictionaryRef v20;
  uint64_t v21;
  __CFArray **v23;
  __CFArray *theArray;
  CMTime rhs;
  CMTime duration;
  CMTimeRange lhs;
  CMTime v28;
  CMTime v29;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v32;
  CFRange v33;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v5 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v7 = CFArrayCreateMutable(v4, 0, v5);
  v29 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  if (!a2)
  {
    v8 = FigSignalErrorAt();
    goto LABEL_19;
  }
  v8 = FigTTMLTreeWalkFromNode(*(const void **)(a1 + 16), 0, (uint64_t (*)(const void *, uint64_t))figTTMLTreeAppendSliceTimeToArray, (uint64_t)Mutable);
  if ((_DWORD)v8)
  {
LABEL_19:
    v21 = v8;
    goto LABEL_20;
  }
  v23 = a2;
  theArray = v7;
  v33.length = CFArrayGetCount(Mutable);
  v33.location = 0;
  CFArraySortValues(Mutable, v33, (CFComparatorFunction)figTTMLTreeCompareSliceTime, 0);
  Count = CFArrayGetCount(Mutable);
  if (Count < 1)
  {
LABEL_13:
    v21 = 0;
    *v23 = theArray;
    goto LABEL_14;
  }
  v10 = Count;
  v11 = 0;
  v12 = (CMTime *)MEMORY[0x1E0CA2E68];
  while (1)
  {
    memset(&v28, 0, sizeof(v28));
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, v11);
    CMTimeMakeFromDictionary(&v28, ValueAtIndex);
    lhs.start = v28;
    rhs = v29;
    CMTimeSubtract(&duration, &lhs.start, &rhs);
    rhs = v29;
    CMTimeRangeMake(&lhs, &rhs, &duration);
    value = lhs.start.value;
    flags = lhs.start.flags;
    timescale = lhs.start.timescale;
    if ((lhs.start.flags & 1) == 0)
      goto LABEL_12;
    v15 = lhs.duration.flags;
    if ((lhs.duration.flags & 1) == 0)
      goto LABEL_12;
    if (lhs.duration.epoch)
      goto LABEL_12;
    v16 = lhs.duration.value;
    if (lhs.duration.value < 0)
      goto LABEL_12;
    epoch = lhs.start.epoch;
    v18 = lhs.duration.timescale;
    lhs.start.value = lhs.duration.value;
    lhs.start.timescale = lhs.duration.timescale;
    lhs.start.flags = lhs.duration.flags;
    lhs.start.epoch = 0;
    rhs = *v12;
    if (!CMTimeCompare(&lhs.start, &rhs))
      goto LABEL_12;
    lhs.start.value = value;
    lhs.start.timescale = timescale;
    lhs.start.flags = flags;
    lhs.start.epoch = epoch;
    lhs.duration.value = v16;
    lhs.duration.timescale = v18;
    lhs.duration.flags = v15;
    lhs.duration.epoch = 0;
    v19 = CMTimeRangeCopyAsDictionary(&lhs, v4);
    if (!v19)
      break;
    v20 = v19;
    CFArrayAppendValue(theArray, v19);
    CFRelease(v20);
LABEL_12:
    v29 = v28;
    if (v10 == ++v11)
      goto LABEL_13;
  }
  v21 = FigSignalErrorAt();
  v7 = theArray;
LABEL_20:
  if (v7)
    CFRelease(v7);
LABEL_14:
  if (Mutable)
    CFRelease(Mutable);
  return v21;
}

uint64_t figTTMLTreeAppendSliceTimeToArray(uint64_t a1)
{
  uint64_t result;
  CMTime *v3;
  CMTime v4;
  CMTime v5;
  char v6;
  CMTimeRange time1;
  CMTime v8;
  CMTime time2;
  int v10;
  CMTimeRange v11;

  memset(&v11, 0, sizeof(v11));
  v10 = 0;
  result = FigTTMLNodeGetNodeType(a1, (uint64_t)&v10);
  if (!(_DWORD)result)
  {
    if ((v10 & 0xFFFFFFFB) != 0xA)
      return 0;
    result = FigTTMLNodeGetActiveTimeRange(a1, (uint64_t)&v11);
    if ((_DWORD)result)
      return result;
    if ((v11.start.flags & 1) == 0)
      return 0;
    result = 0;
    if ((v11.duration.flags & 1) != 0 && !v11.duration.epoch && (v11.duration.value & 0x8000000000000000) == 0)
    {
      if (v10 == 10)
      {
        *(_OWORD *)&time1.start.value = *(_OWORD *)&v11.start.value;
        time1.start.epoch = v11.start.epoch;
        time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
        if (CMTimeCompare(&time1.start, &time2))
        {
          *(_OWORD *)&time1.start.value = *(_OWORD *)&v11.start.value;
          time1.start.epoch = v11.start.epoch;
          FigCFArrayAppendCMTime();
        }
        time1 = v11;
        CMTimeRangeGetEnd(&v8, &time1);
        if ((v8.flags & 0x1D) != 1)
          return 0;
        time1 = v11;
        v3 = (CMTime *)&v6;
      }
      else
      {
        if ((v11.start.flags & 0x1D) == 1)
        {
          *(_OWORD *)&time1.start.value = *(_OWORD *)&v11.start.value;
          time1.start.epoch = v11.start.epoch;
          FigCFArrayAppendCMTime();
        }
        time1 = v11;
        CMTimeRangeGetEnd(&v5, &time1);
        if ((v5.flags & 0x1D) != 1)
          return 0;
        time1 = v11;
        v3 = &v4;
      }
      CMTimeRangeGetEnd(v3, &time1);
      FigCFArrayAppendCMTime();
      return 0;
    }
  }
  return result;
}

uint64_t figTTMLTreeCompareSliceTime(const __CFDictionary *a1, const __CFDictionary *a2)
{
  CMTime v4;
  CMTime time1;
  CMTime v6;
  CMTime v7;

  memset(&v7, 0, sizeof(v7));
  CMTimeMakeFromDictionary(&v7, a1);
  memset(&v6, 0, sizeof(v6));
  CMTimeMakeFromDictionary(&v6, a2);
  time1 = v7;
  v4 = v6;
  return CMTimeCompare(&time1, &v4);
}

uint64_t FigTTMLTreeCopyActiveRegionArray(uint64_t a1, __int128 *a2, CFMutableArrayRef *a3)
{
  CFMutableArrayRef Mutable;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  CFMutableArrayRef v11;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v9 = *a2;
  v10 = *((_QWORD *)a2 + 2);
  v11 = Mutable;
  v7 = FigTTMLTreeWalkFromNode(*(const void **)(a1 + 16), figTTMLTreeAppendActiveRegionsForTime, 0, (uint64_t)&v9);
  if ((_DWORD)v7)
  {
    if (Mutable)
      CFRelease(Mutable);
  }
  else
  {
    *a3 = Mutable;
  }
  return v7;
}

uint64_t figTTMLTreeAppendActiveRegionsForTime(const void *a1, uint64_t a2)
{
  uint64_t NodeType;
  uint64_t ActiveTimeRange;
  CMTime v7;
  CMTimeRange range;
  CMTimeRange v9;
  int v10;

  v10 = 0;
  NodeType = FigTTMLNodeGetNodeType((uint64_t)a1, (uint64_t)&v10);
  if ((_DWORD)NodeType)
    return NodeType;
  if (v10 == 2)
    return 4294950723;
  if (v10 != 10)
    return 0;
  memset(&v9, 0, sizeof(v9));
  ActiveTimeRange = FigTTMLNodeGetActiveTimeRange((uint64_t)a1, (uint64_t)&v9);
  if (!(_DWORD)ActiveTimeRange)
  {
    range = v9;
    v7 = *(CMTime *)a2;
    if (CMTimeRangeContainsTime(&range, &v7))
      CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 24), a1);
  }
  return ActiveTimeRange;
}

uint64_t FigTTMLTreeGetRootNode(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t FigTTMLTreeGetBodyNode()
{
  return FigTTMLRootGetBodyNode();
}

const void *FigTTMLTreeGetNodeByID(uint64_t a1, void *key)
{
  const __CFDictionary *v3;
  const __CFAllocator *v5;
  CFMutableDictionaryRef Mutable;

  v3 = *(const __CFDictionary **)(a1 + 24);
  if (v3)
    return CFDictionaryGetValue(v3, key);
  v5 = CFGetAllocator((CFTypeRef)a1);
  Mutable = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v3 = Mutable;
    if (!FigTTMLTreeWalkFromNode(*(const void **)(a1 + 16), (uint64_t (*)(const void *, uint64_t))figTTMLTreeBuildIDToNodeDictionary, 0, (uint64_t)Mutable))
    {
      *(_QWORD *)(a1 + 24) = v3;
      return CFDictionaryGetValue(v3, key);
    }
    CFRelease(v3);
  }
  else
  {
    FigSignalErrorAt();
  }
  return 0;
}

uint64_t figTTMLTreeBuildIDToNodeDictionary(const void *a1, __CFDictionary *a2)
{
  const void *XMLID;

  XMLID = FigTTMLNodeGetXMLID();
  if (XMLID)
    CFDictionaryAddValue(a2, XMLID, a1);
  return 0;
}

uint64_t FigTTMLTreeAppendActiveNodesToArray(uint64_t *cf, uint64_t a2, __CFArray *a3)
{
  uint64_t v6;
  uint64_t *v7;
  CFAllocatorRef v8;
  uint64_t result;
  __int128 v10;
  uint64_t v11;

  if (!a3)
    return FigSignalErrorAt();
  v7 = cf + 4;
  v6 = cf[4];
  if (!v6)
  {
    v8 = CFGetAllocator(cf);
    result = FigTTMLIntervalTreeCreate((uint64_t)v8, (uint64_t)cf, v7);
    if ((_DWORD)result)
      return result;
    v6 = *v7;
  }
  v10 = *(_OWORD *)a2;
  v11 = *(_QWORD *)(a2 + 16);
  return FigTTMLIntervalTreeAppendActiveNodesToArray(v6, &v10, a3);
}

_QWORD *figTTMLTree_Init(_QWORD *result)
{
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  return result;
}

void figTTMLTree_Finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)a1[4];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[3];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[2];
  if (v4)
    CFRelease(v4);
}

CFStringRef figTTMLTree_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigTTMLTree %p]"), a1);
}

CFStringRef figTTMLTree_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigTTMLTree %p]"), a1);
}

uint64_t FigCaptionTimelineGeneratorGetTypeID()
{
  MEMORY[0x19402F294](&FigCaptionTimelineGeneratorGetTypeID_sRegisterFigCaptionTimelineGeneratorOnce, fctg_registerFigCaptionTimelineGenerator);
  return sFigCaptionTimelineGeneratorID;
}

uint64_t fctg_registerFigCaptionTimelineGenerator()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigCaptionTimelineGeneratorID = result;
  return result;
}

uint64_t FigCaptionTimelineGeneratorCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t Instance;

  if (!a2)
    return FigSignalErrorAt();
  if (!a4)
    return FigSignalErrorAt();
  MEMORY[0x19402F294](&FigCaptionTimelineGeneratorGetTypeID_sRegisterFigCaptionTimelineGeneratorOnce, fctg_registerFigCaptionTimelineGenerator);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  *(_QWORD *)(Instance + 24) = a2;
  *(_QWORD *)(Instance + 32) = a3;
  *a4 = Instance;
  return 0;
}

uint64_t FigCaptionTimelineGeneratorAddSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  const __CFArray *v4;
  CFIndex Count;
  CFIndex i;
  uint64_t v7;
  const void *CaptionData;
  CFIndex v9;
  char *ValueAtIndex;
  __int128 v11;
  __int128 v12;
  char *v13;
  char *v14;
  CFTypeRef v15;
  __int128 v16;
  CFIndex v17;
  _BYTE *v18;
  uint64_t v19;
  const __CFString *v21;
  const __CFString *v22;
  uint64_t SliceCount;
  _BOOL4 v24;
  CMTime v25;
  CMTime v26;
  CMTime v27;
  CMTime v28;
  CMTime v29[2];
  CMTime v30;
  CMTime v31;
  CMTime v32;
  CMTime v33;
  CMTime v34;
  CMTime v35;
  CMTime v36;
  CMTime lhs;
  CMTime v38;
  CMTimeRange v39;
  CMTime v40;
  CMTime v41;
  CMTime duration;
  CMTime start;
  CMTimeRange v44;
  CMTime v45;
  CMTime v46;
  CMTimeRange rhs;
  CMTime v48;
  CMTime time2;
  CMTime v50;
  CMTime v51;

  if (a1 && a2)
  {
    if (FigSampleBufferGetCaptionGroup())
    {
      v4 = *(const __CFArray **)(a1 + 16);
      if (v4)
      {
        Count = CFArrayGetCount(v4);
        v24 = Count > 0;
        if (Count < 1)
        {
          v24 = 0;
        }
        else
        {
          for (i = 0; i != Count; ++i)
            *((_BYTE *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), i) + 129) = 0;
        }
      }
      else
      {
        v24 = 0;
        Count = 0;
      }
      memset(&v44, 0, sizeof(v44));
      CMSampleBufferGetOutputPresentationTimeStamp(&start, a2);
      CMSampleBufferGetOutputDuration(&duration, a2);
      CMTimeRangeMake(&v44, &start, &duration);
      SliceCount = FigCaptionGroupGetSliceCount();
      if (SliceCount)
      {
        v7 = 0;
        v22 = (const __CFString *)*MEMORY[0x1E0CA2728];
        v21 = (const __CFString *)*MEMORY[0x1E0CA2720];
        do
        {
          CaptionData = (const void *)FigCaptionGroupGetCaptionData();
          memset(&v41, 0, sizeof(v41));
          fctg_getAttachmentTime(a2, v22, &v41);
          memset(&v40, 0, sizeof(v40));
          fctg_getAttachmentTime(a2, v21, &v40);
          memset(&v39, 0, sizeof(v39));
          CMSampleBufferGetPresentationTimeStamp(&lhs, a2);
          rhs.start = v41;
          CMTimeAdd(&v38, &lhs, &rhs.start);
          CMSampleBufferGetDuration(&v35, a2);
          rhs.start = v41;
          v29[0] = v40;
          CMTimeAdd(&v34, &rhs.start, v29);
          CMTimeSubtract(&v36, &v35, &v34);
          CMTimeRangeMake(&v39, &v38, &v36);
          memset(&v33, 0, sizeof(v33));
          FigCaptionGroupGetDurationBeforeSlice();
          rhs.start = v41;
          CMTimeAdd(&v33, &v32, &rhs.start);
          memset(&v31, 0, sizeof(v31));
          FigCaptionGroupGetDurationAfterSlice();
          rhs.start = v40;
          CMTimeAdd(&v31, &v30, &rhs.start);
          if (v24)
          {
            v9 = 0;
            while (1)
            {
              ValueAtIndex = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v9);
              *(_OWORD *)&v29[0].value = *(_OWORD *)&v39.start.value;
              *(_OWORD *)&v29[0].epoch = *(_OWORD *)&v39.start.epoch;
              *(_OWORD *)&v29[1].timescale = *(_OWORD *)&v39.duration.timescale;
              v28 = v33;
              v27 = v31;
              v26 = v44.start;
              memset(&v51, 0, sizeof(v51));
              *(_OWORD *)&rhs.start.value = *(_OWORD *)(ValueAtIndex + 56);
              rhs.start.epoch = *((_QWORD *)ValueAtIndex + 9);
              v50 = *(CMTime *)(ValueAtIndex + 104);
              CMTimeAdd(&v51, &rhs.start, &v50);
              memset(&v50, 0, sizeof(v50));
              v11 = *(_OWORD *)(ValueAtIndex + 8);
              v12 = *(_OWORD *)(ValueAtIndex + 40);
              *(_OWORD *)&rhs.start.epoch = *(_OWORD *)(ValueAtIndex + 24);
              *(_OWORD *)&rhs.duration.timescale = v12;
              *(_OWORD *)&rhs.start.value = v11;
              CMTimeRangeGetEnd(&v50, &rhs);
              if (!ValueAtIndex[128])
              {
                rhs.start = v51;
                time2 = v29[0];
                if (!CMTimeCompare(&rhs.start, &time2))
                {
                  rhs.start = v50;
                  time2 = v26;
                  if (!CMTimeCompare(&rhs.start, &time2))
                  {
                    memset(&v48, 0, sizeof(v48));
                    rhs.start = v29[0];
                    time2 = v28;
                    CMTimeSubtract(&v48, &rhs.start, &time2);
                    *(_OWORD *)&rhs.start.value = *(_OWORD *)(ValueAtIndex + 56);
                    rhs.start.epoch = *((_QWORD *)ValueAtIndex + 9);
                    time2 = v48;
                    if (!CMTimeCompare(&rhs.start, &time2))
                    {
                      memset(&v46, 0, sizeof(v46));
                      rhs.start = v28;
                      time2 = v29[1];
                      CMTimeAdd(&v45, &rhs.start, &time2);
                      rhs.start = v27;
                      CMTimeAdd(&v46, &v45, &rhs.start);
                      *(_OWORD *)&rhs.start.value = *((_OWORD *)ValueAtIndex + 5);
                      rhs.start.epoch = *((_QWORD *)ValueAtIndex + 12);
                      time2 = v46;
                      if (!CMTimeCompare(&rhs.start, &time2))
                      {
                        if (CFEqual(*(CFTypeRef *)ValueAtIndex, CaptionData))
                          break;
                      }
                    }
                  }
                }
              }
              if (Count == ++v9)
                goto LABEL_22;
            }
            v51 = v44.duration;
            v50 = v39.duration;
            v29[0] = *(CMTime *)(ValueAtIndex + 32);
            CMTimeAdd(&rhs.start, v29, &v51);
            *((_OWORD *)ValueAtIndex + 2) = *(_OWORD *)&rhs.start.value;
            *((_QWORD *)ValueAtIndex + 6) = rhs.start.epoch;
            v29[0] = *(CMTime *)(ValueAtIndex + 104);
            v51 = v50;
            CMTimeAdd(&rhs.start, v29, &v51);
            *(_OWORD *)(ValueAtIndex + 104) = *(_OWORD *)&rhs.start.value;
            *((_QWORD *)ValueAtIndex + 15) = rhs.start.epoch;
            ValueAtIndex[129] = 1;
          }
          else
          {
LABEL_22:
            rhs = v44;
            *(_OWORD *)&v29[0].value = *(_OWORD *)&v39.start.value;
            *(_OWORD *)&v29[0].epoch = *(_OWORD *)&v39.start.epoch;
            *(_OWORD *)&v29[1].timescale = *(_OWORD *)&v39.duration.timescale;
            v46 = v33;
            v45 = v31;
            v13 = (char *)malloc_type_calloc(1uLL, 0x90uLL, 0x1060040E0E536C3uLL);
            if (!v13)
            {
              FigSignalErrorAt();
              goto LABEL_40;
            }
            v14 = v13;
            if (CaptionData)
              v15 = CFRetain(CaptionData);
            else
              v15 = 0;
            v16 = *(_OWORD *)&rhs.start.epoch;
            *(_OWORD *)(v14 + 8) = *(_OWORD *)&rhs.start.value;
            *(_QWORD *)v14 = v15;
            *(_OWORD *)(v14 + 24) = v16;
            *(_OWORD *)(v14 + 40) = *(_OWORD *)&rhs.duration.timescale;
            v50 = v29[0];
            time2 = v46;
            CMTimeSubtract(&v51, &v50, &time2);
            *(CMTime *)(v14 + 56) = v51;
            v51 = v46;
            v50 = v29[1];
            CMTimeAdd(&v48, &v51, &v50);
            v50 = v45;
            CMTimeAdd(&v51, &v48, &v50);
            *(CMTime *)(v14 + 80) = v51;
            v50 = v29[1];
            time2 = v46;
            CMTimeAdd(&v51, &v50, &time2);
            *(CMTime *)(v14 + 104) = v51;
            v14[128] = 0;
            CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 16), v14);
          }
          ++v7;
        }
        while (v7 != SliceCount);
      }
      if (v24)
      {
        v17 = 0;
        do
        {
          v18 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v17);
          if (!v18[129])
            v18[128] = 1;
          ++v17;
        }
        while (Count != v17);
      }
      memset(&v25, 0, sizeof(v25));
      rhs = v44;
      CMTimeRangeGetEnd(&v25, &rhs);
      do
        rhs.start = v25;
      while ((fctg_generateAndOutputCaptions(a1, (uint64_t)&rhs) & 1) != 0);
    }
    v19 = 0;
  }
  else
  {
LABEL_40:
    v19 = FigSignalErrorAt();
  }
  fctg_freeBuddingCaption(0);
  return v19;
}

CMTime *fctg_getAttachmentTime@<X0>(const void *a1@<X0>, const __CFString *a2@<X1>, CMTime *a3@<X8>)
{
  uint64_t v4;
  CMTime *result;
  const __CFDictionary *v6;
  CFTypeID v7;

  v4 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)&a3->value = *MEMORY[0x1E0CA2E68];
  a3->epoch = *(_QWORD *)(v4 + 16);
  result = (CMTime *)CMGetAttachment(a1, a2, 0);
  if (result)
  {
    v6 = (const __CFDictionary *)result;
    v7 = CFGetTypeID(result);
    result = (CMTime *)CFDictionaryGetTypeID();
    if ((CMTime *)v7 == result)
      return CMTimeMakeFromDictionary(a3, v6);
  }
  return result;
}

uint64_t fctg_generateAndOutputCaptions(uint64_t a1, uint64_t a2)
{
  CFIndex Count;
  _OWORD *v5;
  CFIndex i;
  char *ValueAtIndex;
  __int128 v8;
  CFIndex j;
  char *v10;
  __int128 v11;
  CFIndex v12;
  CMTime *v13;
  char *v14;
  __int128 v15;
  __CFArray *Mutable;
  CFIndex k;
  _BYTE *v18;
  _BYTE *v19;
  __int128 v20;
  CFTypeRef v21;
  CFAllocatorRef v22;
  CFTypeRef v23;
  unsigned int (*v24)(CFTypeRef, CMTimeRange *);
  uint64_t v25;
  uint64_t CMBaseObject;
  unsigned int (*v27)(uint64_t, const __CFString *, uint64_t);
  CFIndex v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  unsigned int (*v33)(__CFArray *, CMTimeRange *, uint64_t);
  uint64_t v34;
  CMTime v36;
  CMTime v37;
  CMTime v38;
  CMTime v39;
  CMTime v40;
  CMTime time;
  CMTime v42;
  CMTimeRange rhs;
  CMTime time2;
  CMTime duration;
  CMTimeRange v46;
  CFTypeRef v47;
  CMTimeRange lhs;

  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 16));
  v47 = 0;
  memset(&v46, 0, sizeof(v46));
  v5 = (_OWORD *)(a1 + 40);
  *(_OWORD *)&lhs.start.value = *(_OWORD *)a2;
  lhs.start.epoch = *(_QWORD *)(a2 + 16);
  *(_OWORD *)&rhs.start.value = *(_OWORD *)(a1 + 40);
  rhs.start.epoch = *(_QWORD *)(a1 + 56);
  CMTimeSubtract(&duration, &lhs.start, &rhs.start);
  *(_OWORD *)&lhs.start.value = *(_OWORD *)(a1 + 40);
  lhs.start.epoch = *(_QWORD *)(a1 + 56);
  CMTimeRangeMake(&v46, &lhs.start, &duration);
  if (Count)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), i);
      lhs = *(CMTimeRange *)(ValueAtIndex + 8);
      *(_OWORD *)&rhs.start.value = *v5;
      rhs.start.epoch = *(_QWORD *)(a1 + 56);
      v8 = *(_OWORD *)(ValueAtIndex + 8);
      time2.epoch = *((_QWORD *)ValueAtIndex + 3);
      *(_OWORD *)&time2.value = v8;
      if (CMTimeCompare(&rhs.start, &time2))
      {
        rhs = v46;
        time2 = lhs.start;
        if (CMTimeRangeContainsTime(&rhs, &time2))
        {
          time2 = lhs.start;
          *(_OWORD *)&v42.value = *v5;
          v42.epoch = *(_QWORD *)(a1 + 56);
          CMTimeSubtract(&rhs.start, &time2, &v42);
          v46.duration = rhs.start;
        }
      }
    }
    for (j = 0; j != Count; ++j)
    {
      v10 = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), j);
      if (v10[128])
      {
        lhs = *(CMTimeRange *)(v10 + 8);
        *(_OWORD *)&rhs.start.value = *(_OWORD *)&lhs.start.value;
        *(_OWORD *)&rhs.start.epoch = *(_OWORD *)&lhs.start.epoch;
        v11 = *v5;
        *(_OWORD *)&rhs.duration.timescale = *(_OWORD *)&lhs.duration.timescale;
        *(_OWORD *)&time2.value = v11;
        time2.epoch = *(_QWORD *)(a1 + 56);
        if (CMTimeRangeContainsTime(&rhs, &time2))
        {
          rhs = lhs;
          CMTimeRangeGetEnd(&time, &rhs);
          rhs = v46;
          if (CMTimeRangeContainsTime(&rhs, &time))
          {
            rhs = lhs;
            CMTimeRangeGetEnd(&v40, &rhs);
            time2 = v46.start;
            CMTimeSubtract(&rhs.start, &v40, &time2);
            v46.duration = rhs.start;
          }
        }
      }
    }
    v12 = 0;
    v13 = (CMTime *)MEMORY[0x1E0CA2E68];
    do
    {
      v14 = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v12);
      if (!v14[128])
      {
        *(_OWORD *)&lhs.start.value = *v5;
        lhs.start.epoch = *(_QWORD *)(a1 + 56);
        v15 = *(_OWORD *)(v14 + 8);
        rhs.start.epoch = *((_QWORD *)v14 + 3);
        *(_OWORD *)&rhs.start.value = v15;
        if (!CMTimeCompare(&lhs.start, &rhs.start))
          v46.duration = *v13;
      }
      ++v12;
    }
    while (Count != v12);
  }
  lhs = v46;
  CMTimeRangeGetEnd(&v39, &lhs);
  if ((v39.flags & 1) != 0)
  {
    lhs = v46;
    CMTimeRangeGetEnd(&v38, &lhs);
    if ((v38.flags & 4) != 0)
      v46.duration = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  }
  if ((v46.start.flags & 1) == 0
    || (v46.duration.flags & 1) == 0
    || v46.duration.epoch
    || v46.duration.value < 0
    || (lhs.start = v46.duration,
        *(_OWORD *)&rhs.start.value = *MEMORY[0x1E0CA2E68],
        rhs.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16),
        CMTimeCompare(&lhs.start, &rhs.start)))
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (Count)
    {
      for (k = 0; Count != k; ++k)
      {
        v18 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), k);
        if (v18[128])
        {
          v19 = v18;
          lhs = v46;
          CMTimeRangeGetEnd(&v37, &lhs);
          v20 = *(_OWORD *)(v19 + 8);
          lhs.start.epoch = *((_QWORD *)v19 + 3);
          *(_OWORD *)&lhs.start.value = v20;
          if (CMTimeCompare(&lhs.start, &v37) < 0)
          {
            v21 = (CFTypeRef)*((_QWORD *)v19 + 17);
            if (!v21)
            {
              if (v47)
              {
                CFRelease(v47);
                v47 = 0;
              }
              v22 = CFGetAllocator((CFTypeRef)a1);
              if (FigCaptionCreateMutable((uint64_t)v22, &v47))
                goto LABEL_55;
              v23 = v47;
              rhs = *(CMTimeRange *)(v19 + 8);
              v24 = *(unsigned int (**)(CFTypeRef, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 16);
              if (!v24)
                goto LABEL_55;
              lhs = rhs;
              if (v24(v23, &lhs))
                goto LABEL_55;
              v25 = *(_QWORD *)v19;
              CMBaseObject = FigCaptionGetCMBaseObject(v47);
              v27 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 56);
              if (!v27 || v27(CMBaseObject, CFSTR("CaptionData"), v25))
                goto LABEL_55;
              v21 = CFRetain(v47);
              *((_QWORD *)v19 + 17) = v21;
            }
            CFArrayAppendValue(Mutable, v21);
          }
        }
      }
    }
    if (CFArrayGetCount(*(CFArrayRef *)(a1 + 16)) >= 1)
    {
      v28 = 0;
      do
      {
        v29 = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v28);
        memset(&rhs, 0, 24);
        v30 = *(_OWORD *)(v29 + 8);
        v31 = *(_OWORD *)(v29 + 40);
        *(_OWORD *)&lhs.start.epoch = *(_OWORD *)(v29 + 24);
        *(_OWORD *)&lhs.duration.timescale = v31;
        *(_OWORD *)&lhs.start.value = v30;
        CMTimeRangeGetEnd(&rhs.start, &lhs);
        lhs = v46;
        CMTimeRangeGetEnd(&v36, &lhs);
        *(_OWORD *)&lhs.start.value = *(_OWORD *)&rhs.start.value;
        lhs.start.epoch = rhs.start.epoch;
        if (CMTimeCompare(&lhs.start, &v36) <= 0)
        {
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 16), v28);
          fctg_freeBuddingCaption((const void **)v29);
        }
        else
        {
          ++v28;
        }
      }
      while (v28 < CFArrayGetCount(*(CFArrayRef *)(a1 + 16)));
    }
    v33 = *(unsigned int (**)(__CFArray *, CMTimeRange *, uint64_t))(a1 + 24);
    v32 = *(_QWORD *)(a1 + 32);
    lhs = v46;
    if (!v33(Mutable, &lhs, v32))
    {
      lhs = v46;
      CMTimeRangeGetEnd(&rhs.start, &lhs);
      *v5 = *(_OWORD *)&rhs.start.value;
      *(_QWORD *)(a1 + 56) = rhs.start.epoch;
      v34 = 1;
      goto LABEL_49;
    }
  }
  else
  {
    Mutable = 0;
  }
LABEL_55:
  v34 = 0;
LABEL_49:
  if (v47)
    CFRelease(v47);
  if (Mutable)
    CFRelease(Mutable);
  return v34;
}

void fctg_freeBuddingCaption(const void **a1)
{
  const void *v2;
  const void *v3;

  if (a1)
  {
    v2 = *a1;
    if (v2)
      CFRelease(v2);
    v3 = a1[17];
    if (v3)
      CFRelease(v3);
    free(a1);
  }
}

uint64_t FigCaptionTimelineGeneratorFinish(uint64_t a1)
{
  const __CFArray *v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex i;
  uint64_t v6;

  if (!a1)
    return FigSignalErrorAt();
  v2 = *(const __CFArray **)(a1 + 16);
  if (v2)
  {
    Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      v4 = Count;
      for (i = 0; i != v4; ++i)
        *((_BYTE *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), i) + 128) = 1;
    }
  }
  v6 = MEMORY[0x1E0CA2E30];
  while ((fctg_generateAndOutputCaptions(a1, v6) & 1) != 0)
    ;
  return 0;
}

__n128 fctg_Init(uint64_t a1)
{
  const __CFAllocator *v2;
  uint64_t v3;
  __n128 result;

  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v2 = CFGetAllocator((CFTypeRef)a1);
  *(_QWORD *)(a1 + 16) = CFArrayCreateMutable(v2, 0, 0);
  v3 = MEMORY[0x1E0CA2E68];
  result = *(__n128 *)MEMORY[0x1E0CA2E68];
  *(_OWORD *)(a1 + 40) = *MEMORY[0x1E0CA2E68];
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(v3 + 16);
  return result;
}

void fctg_Finalize(uint64_t a1)
{
  CFIndex Count;
  CFIndex v3;
  CFIndex i;
  const void **ValueAtIndex;
  const void *v6;

  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 16));
  if (Count)
  {
    v3 = Count;
    for (i = 0; i != v3; ++i)
    {
      ValueAtIndex = (const void **)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), i);
      fctg_freeBuddingCaption(ValueAtIndex);
    }
  }
  v6 = *(const void **)(a1 + 16);
  if (v6)
    CFRelease(v6);
}

CFStringRef fctg_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigCaptionTimelineGenerator %p]"), a1);
}

CFStringRef fctg_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigCaptionTimelineGenerator %p]"), a1);
}

uint64_t FigCaptionRendererLayoutContextCreate(_QWORD *a1)
{
  const __CFAllocator *v2;
  _QWORD *Instance;
  CFMutableDictionaryRef Mutable;
  uint64_t v6;

  *a1 = 0;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MEMORY[0x19402F294](&FigCaptionRendererLayoutContextLocalGetTypeID_sRegisterFigCaptionRendererLayoutContextOnce, RegisterFigCaptionRendererLayoutContextClass);
  Instance = (_QWORD *)_CFRuntimeCreateInstance();
  Mutable = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  Instance[3] = Mutable;
  if (Mutable)
  {
    *a1 = Instance;
    return 0;
  }
  else
  {
    v6 = FigSignalErrorAt();
    CFRelease(Instance);
    return v6;
  }
}

uint64_t FigCaptionRendererLayoutContextSetSubtitleSample(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  if (!a1)
    return FigSignalErrorAt();
  v2 = *(const void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
  return 0;
}

uint64_t FigCaptionRendererLayoutContextGetSubtitleSample(uint64_t a1, _QWORD *a2)
{
  if (!a1 || !a2)
    return FigSignalErrorAt();
  *a2 = *(_QWORD *)(a1 + 16);
  return 0;
}

uint64_t FigCaptionRendererLayoutContextSetMapping(uint64_t a1, const void *a2, const void *a3)
{
  if (!a1 || !a2 || !a3)
    return FigSignalErrorAt();
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), a2, a3);
  return 0;
}

uint64_t FigCaptionRendererLayoutContextGetMapping(uint64_t a1, const void *a2, const void **a3)
{
  if (!a1 || !a2 || !a3)
    return FigSignalErrorAt();
  *a3 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), a2);
  return 0;
}

uint64_t RegisterFigCaptionRendererLayoutContextClass()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigCaptionRendererLayoutContextID = result;
  return result;
}

uint64_t FigCaptionRendererLayoutContextInit(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

void FigCaptionRendererLayoutContext_Finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 16);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 24);
  if (v3)
    CFRelease(v3);
}

__CFString *FigCaptionRendererLayoutContextCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigCaptionRendererLayoutContext %p>"), a1);
  return Mutable;
}

uint64_t RegisterFigCrossTalkerBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigCrossTalkerGetTypeID()
{
  MEMORY[0x19402F294](&FigCrossTalkerGetClassID_sRegisterFigCrossTalkerBaseTypeOnce, RegisterFigCrossTalkerBaseType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigCrossTalkerCreate(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;

  if (!a2)
    return FigSignalErrorAt();
  MEMORY[0x19402F294](&FigCrossTalkerGetClassID_sRegisterFigCrossTalkerBaseTypeOnce, RegisterFigCrossTalkerBaseType);
  v3 = CMDerivedObjectCreate();
  if (!(_DWORD)v3)
  {
    MEMORY[0] = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (MEMORY[0])
    {
      v3 = 0;
      MEMORY[8] = dispatch_queue_create("com.apple.coremedia.crosstalker", 0);
      *a2 = 0;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return v3;
}

CFStringRef FigCrossTalkerCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigCrossTalker %p]"), a1);
}

void fct_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v2;

  if (a1)
    DerivedStorage = CMBaseObjectGetDerivedStorage();
  else
    DerivedStorage = 0;
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v2 = *(NSObject **)(DerivedStorage + 8);
  if (v2)
  {
    dispatch_release(v2);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
}

__CFString *fct_CopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  const void *v4;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  CMBaseObjectGetDerivedStorage();
  v4 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, CFSTR("<CrossTalker: %p %@>"), a1, v4);
  if (v4)
    CFRelease(v4);
  return Mutable;
}

uint64_t fct_CopyProperty(uint64_t DerivedStorage, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v6;
  _QWORD v8[3];
  CFTypeRef cf;

  v6 = DerivedStorage;
  if (DerivedStorage)
    DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8[0] = 0;
  v8[1] = v6;
  v8[2] = a2;
  cf = 0;
  if (!a2 || !a4)
    return FigSignalErrorAt();
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 8), v8, (dispatch_function_t)fct_CopyProperty_f);
  if (LODWORD(v8[0]))
  {
    if (cf)
      CFRelease(cf);
  }
  else
  {
    *a4 = cf;
  }
  return 0;
}

uint64_t fct_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  CFTypeID v7;
  _QWORD v9[4];

  if (a1)
    DerivedStorage = CMBaseObjectGetDerivedStorage();
  else
    DerivedStorage = 0;
  v9[0] = 0;
  v9[1] = a1;
  v9[2] = a2;
  v9[3] = a3;
  if (!a2)
    return FigSignalErrorAt();
  if (!a3)
  {
LABEL_8:
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 8), v9, (dispatch_function_t)fct_SetProperty_f);
    return LODWORD(v9[0]);
  }
  if (CFEqual(a2, CFSTR("HDRVideoPlaybackActive")))
  {
    v7 = CFGetTypeID(a3);
    if (v7 == CFBooleanGetTypeID())
      goto LABEL_8;
    return FigSignalErrorAt();
  }
  return 4294954512;
}

CFTypeRef fct_CopyProperty_f(uint64_t a1)
{
  CFDictionaryRef *DerivedStorage;
  CFTypeRef *v3;
  CFTypeRef result;

  DerivedStorage = (CFDictionaryRef *)CMBaseObjectGetDerivedStorage();
  v3 = (CFTypeRef *)(a1 + 24);
  result = (CFTypeRef)CFDictionaryGetValueIfPresent(*DerivedStorage, *(const void **)(a1 + 16), (const void **)(a1 + 24));
  if ((_DWORD)result)
  {
    result = *v3;
    if (*v3)
      return CFRetain(result);
  }
  else
  {
    *(_DWORD *)a1 = -12784;
  }
  return result;
}

void fct_SetProperty_f(uint64_t a1)
{
  CFDictionaryRef *DerivedStorage;
  const void *Value;
  __CFDictionary *v4;
  const void *v5;
  const void *v6;

  DerivedStorage = (CFDictionaryRef *)CMBaseObjectGetDerivedStorage();
  Value = CFDictionaryGetValue(*DerivedStorage, *(const void **)(a1 + 16));
  v4 = *DerivedStorage;
  v5 = *(const void **)(a1 + 16);
  v6 = *(const void **)(a1 + 24);
  if (v6)
  {
    CFDictionarySetValue(v4, v5, v6);
    if (!Value)
      return;
    goto LABEL_3;
  }
  CFDictionaryRemoveValue(v4, v5);
  if (Value)
LABEL_3:
    CFEqual(Value, *(CFTypeRef *)(a1 + 24));
}

uint64_t FigSymptomsManagerTriggerScorecardsUpdate()
{
  return 4294949656;
}

uint64_t FigSymptomsManagerGetBandwidthPredictionFromLastUpdate(_QWORD *a1, _DWORD *a2)
{
  if (a1)
    *a1 = 0;
  if (a2)
    *a2 = 0;
  return 4294949656;
}

uint64_t FigSymptomsReportStreamingAssetDownloadStart(uint64_t a1, CMTime *a2, int a3, int a4, int a5, uuid_t out)
{
  const char *CStringPtrAndBufferToFree;
  CMTime v11;
  char outa[40];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  memset(outa, 0, 37);
  if (!out)
    return 4294954516;
  uuid_generate_random(out);
  if (uuid_is_null(out))
    return 4294954510;
  uuid_unparse(out, outa);
  softLinksymptom_create((uint64_t)"com.apple.coremedia.assetdownload.event");
  symptom_set_qualifier();
  symptom_set_additional_qualifier();
  if (a1)
  {
    v11.value = 0;
    CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
    if (CStringPtrAndBufferToFree)
    {
      strlen(CStringPtrAndBufferToFree);
      symptom_set_additional_qualifier();
    }
    free((void *)v11.value);
  }
  symptom_set_qualifier();
  if ((a2->flags & 0x1D) == 1)
  {
    v11 = *a2;
    CMTimeGetSeconds(&v11);
    symptom_set_qualifier();
  }
  symptom_send();
  return 0;
}

uint64_t FigSymptomsReportStreamingAssetDownloadEnd(const unsigned __int8 *a1)
{
  _BYTE v3[37];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  memset(v3, 0, sizeof(v3));
  if (uuid_is_null(a1))
    return 4294954516;
  uuid_unparse(a1, v3);
  softLinksymptom_create((uint64_t)"com.apple.coremedia.assetdownload.event");
  symptom_set_qualifier();
  symptom_set_additional_qualifier();
  symptom_send();
  return 0;
}

uint64_t FigSymptomsReportStreamingAssetDownloadPause(const unsigned __int8 *a1)
{
  _BYTE v3[37];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  memset(v3, 0, sizeof(v3));
  if (uuid_is_null(a1))
    return 4294954516;
  uuid_unparse(a1, v3);
  softLinksymptom_create((uint64_t)"com.apple.coremedia.assetdownload.event");
  symptom_set_qualifier();
  symptom_set_additional_qualifier();
  symptom_send();
  return 0;
}

uint64_t FigSymptomsReportStreamingAssetDownloadResume(const unsigned __int8 *a1)
{
  _BYTE v3[37];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  memset(v3, 0, sizeof(v3));
  if (uuid_is_null(a1))
    return 4294954516;
  uuid_unparse(a1, v3);
  softLinksymptom_create((uint64_t)"com.apple.coremedia.assetdownload.event");
  symptom_set_qualifier();
  symptom_set_additional_qualifier();
  symptom_send();
  return 0;
}

uint64_t initsymptom_create(uint64_t a1)
{
  if (SymptomReporterLibrary_sOnce != -1)
    dispatch_once(&SymptomReporterLibrary_sOnce, &__block_literal_global_61);
  softLinksymptom_create = (uint64_t (*)())dlsym((void *)SymptomReporterLibrary_sLib, "symptom_create");
  return ((uint64_t (*)(uint64_t))softLinksymptom_create)(a1);
}

uint64_t figCSSTokenizerRegisterFigCSSTokenizer()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigCSSTokenizerID = result;
  return result;
}

uint64_t FigCSSTokenizerCreateWithTextContainer(uint64_t a1, const void *a2, uint64_t *a3)
{
  uint64_t Instance;
  uint64_t v6;
  uint64_t Length;

  if (!a2)
    return FigSignalErrorAt();
  if (!a3)
    return FigSignalErrorAt();
  MEMORY[0x19402F294](&FigCSSTokenizerGetTypeID_sRegisterFigCSSTokenizerOnce, figCSSTokenizerRegisterFigCSSTokenizer);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v6 = Instance;
  *(_QWORD *)(Instance + 16) = CFRetain(a2);
  *(_QWORD *)(v6 + 40) = -1;
  *(_BYTE *)(v6 + 56) = 0;
  *(_DWORD *)(v6 + 28) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  Length = FigTextContainerGetLength((uint64_t)a2, (_QWORD *)(v6 + 48));
  if ((_DWORD)Length)
    CFRelease((CFTypeRef)v6);
  else
    *a3 = v6;
  return Length;
}

uint64_t FigCSSTokenizerProduceTokenArray(char *cf, _QWORD *a2)
{
  _QWORD *v2;
  const void *v4;
  const __CFAllocator *v5;
  CFMutableArrayRef Mutable;
  CFTypeRef v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFAllocator *v12;
  __CFString *v13;
  const __CFAllocator *v14;
  CFMutableStringRef v15;
  __CFString *v16;
  CFRange v17;
  CFIndex v18;
  const __CFAllocator *v19;
  CFStringRef i;
  const __CFAllocator *v21;
  CFStringRef v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v31;
  const __CFAllocator *v32;
  const __CFAllocator *v33;
  uint64_t TokenType;
  CFAllocatorRef v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  const __CFAllocator *v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int v43;
  BOOL v44;
  BOOL v45;
  unsigned int v46;
  unint64_t v47;
  unsigned int v48;
  unsigned int v49;
  const __CFAllocator *v50;
  unsigned int v51;
  uint64_t v52;
  const __CFAllocator *v53;
  CFAllocatorRef v54;
  const __CFAllocator *v55;
  const __CFAllocator *v56;
  CFStringRef v57;
  int v58;
  CFTypeRef v59;
  _QWORD *v61;
  unsigned int *v62;
  uint64_t *v63;
  uint64_t v64;
  __CFString *v65;
  CFTypeRef v66;
  int v67;
  UniChar chars[2];
  int v69;
  uint64_t v70;
  CFRange v71;

  v70 = *MEMORY[0x1E0C80C00];
  if (!cf)
    return FigSignalErrorAt();
  v2 = a2;
  if (!a2)
    return FigSignalErrorAt();
  if (*((_DWORD *)cf + 7))
  {
    v4 = (const void *)*((_QWORD *)cf + 4);
    if (v4)
    {
      CFRelease(v4);
      *((_QWORD *)cf + 4) = 0;
    }
    *((_DWORD *)cf + 7) = 0;
    *((_QWORD *)cf + 5) = -1;
    cf[56] = 0;
    *((_QWORD *)cf + 8) = 0;
  }
  v5 = CFGetAllocator(cf);
  Mutable = CFArrayCreateMutable(v5, 0, MEMORY[0x1E0C9B378]);
  *((_QWORD *)cf + 4) = Mutable;
  if (!Mutable)
  {
    TokenType = FigSignalErrorAt();
    goto LABEL_224;
  }
  v61 = v2;
  v7 = 0;
  v62 = (unsigned int *)(cf + 72);
  v63 = (uint64_t *)(cf + 64);
  do
  {
    if (v7)
      CFRelease(v7);
    v8 = 0;
    v67 = 65533;
    v65 = 0;
    v66 = 0;
LABEL_12:
    if (!cf[26])
      goto LABEL_29;
    v9 = *((_QWORD *)cf + 2);
    v10 = *((_QWORD *)cf + 5);
    v11 = *((_QWORD *)cf + 6);
    v12 = CFGetAllocator(cf);
    v13 = CFStringCreateMutable(v12, 0);
    if (!v13 || (v14 = CFGetAllocator(cf), (v15 = CFStringCreateMutable(v14, 0)) == 0))
    {
      FigSignalErrorAt();
      v16 = 0;
LABEL_76:
      i = 0;
      goto LABEL_23;
    }
    v16 = v15;
    v17.location = v10 & ~(v10 >> 63);
    if (v11 - v17.location < 1)
    {
      if (v10 < 1)
      {
        v33 = CFGetAllocator(cf);
        v22 = CFStringCreateWithFormat(v33, 0, CFSTR("<empty text buffer>"));
        i = 0;
        if (!v22)
          goto LABEL_23;
LABEL_22:
        CFShow(v22);
        CFRelease(v22);
        goto LABEL_23;
      }
      if (v17.location >= 5)
        v31 = 5;
      else
        v31 = v10 & ~(v10 >> 63);
      v71.location = v17.location - v31;
      v71.length = v31;
      if (FigTextContainerGetCharactersForRange(v9, v71, chars))
        goto LABEL_76;
      v32 = CFGetAllocator(cf);
      for (i = CFStringCreateWithCharacters(v32, chars, v31); v31; --v31)
      {
        CFStringAppendCString(v13, " ", 0x600u);
        CFStringAppendCString(v16, " ", 0x600u);
      }
    }
    else
    {
      if (v11 - v17.location >= 10)
        v18 = 10;
      else
        v18 = v11 - v17.location;
      v17.length = v18;
      if (FigTextContainerGetCharactersForRange(v9, v17, chars))
        goto LABEL_76;
      v19 = CFGetAllocator(cf);
      i = CFStringCreateWithCharacters(v19, chars, v18);
    }
    CFStringAppendCString(v13, "^", 0x600u);
    CFStringAppendCString(v16, "|", 0x600u);
    v21 = CFGetAllocator(cf);
    v22 = CFStringCreateWithFormat(v21, 0, CFSTR("%@\n%@\n%@"), i, v13, v16);
    if (v22)
      goto LABEL_22;
LABEL_23:
    if (v13)
      CFRelease(v13);
    if (v16)
      CFRelease(v16);
    if (i)
      CFRelease(i);
LABEL_29:
    v67 = 0;
    do
    {
      v23 = *((_QWORD *)cf + 6);
      if (!v23 || *((_QWORD *)cf + 5) >= v23)
        goto LABEL_204;
      v24 = v8;
      if (_figCSSTokenizer_consume_next_input_code_point((uint64_t)cf, &v67))
      {
        _figCSSTokenizer_PeekAheadBuffer((uint64_t)cf, 3, v62, 0xCuLL, v63);
        v25 = v67;
        if (v67 == 10 || v67 == 9 || v67 == 32)
        {
          *(_DWORD *)chars = 0;
          while (1)
          {
            v37 = *((_QWORD *)cf + 6);
            if (!v37
              || *((_QWORD *)cf + 5) >= v37
              || !_figCSSTokenizer_consume_next_input_code_point((uint64_t)cf, chars))
            {
              break;
            }
            if (*(_DWORD *)chars != 10 && *(_DWORD *)chars != 9 && *(_DWORD *)chars != 32)
            {
              cf[56] = 1;
              break;
            }
          }
          v35 = CFGetAllocator(cf);
          v36 = 2;
          goto LABEL_155;
        }
        if (v67 == 34)
        {
          v38 = (uint64_t)cf;
          v39 = 34;
        }
        else
        {
          if (v67 == 35)
          {
            v42 = *v63;
            if (*v63 >= 1)
            {
              if ((v43 = *v62, *v62 >= 0x41) && v43 <= 0x5A
                || (v43 <= 0x7A ? (v44 = v43 < 0x61) : (v44 = 1),
                    !v44
                 || v43 >= 0x80
                 || v43 == 95
                 || (v43 <= 0x39 ? (v45 = v43 < 0x30) : (v45 = 1),
                     !v45 || v43 == 45 || v42 >= 2 && v43 == 92 && *((_DWORD *)cf + 19) != 10)))
              {
                v46 = v42 >= 3
                   && _figCSSTokenizer_check_if_three_code_points_would_start_an_identifier(v43, *((_DWORD *)cf + 19), *((_DWORD *)cf + 20));
                v41 = _figCSSTokenizer_consume_a_name((uint64_t)cf, &v65);
                if ((_DWORD)v41)
                  goto LABEL_213;
                v50 = CFGetAllocator(cf);
                v41 = FigCSSHashTokenCreate(v50, v46, v65, &v66);
                if ((_DWORD)v41)
                  goto LABEL_213;
                goto LABEL_205;
              }
            }
            goto LABEL_202;
          }
          if (v67 == 36)
          {
            if (*v63 < 0 || *v62 != 61)
              goto LABEL_202;
            _figCSSTokenizer_consume_next_input_code_point((uint64_t)cf, 0);
            v35 = CFGetAllocator(cf);
            v36 = 28;
            goto LABEL_155;
          }
          if (v67 != 39)
          {
            if (v67 == 40)
            {
              v35 = CFGetAllocator(cf);
              v36 = 16;
              goto LABEL_155;
            }
            if (v67 == 41)
            {
              v35 = CFGetAllocator(cf);
              v36 = 17;
              goto LABEL_155;
            }
            if (v67 == 42)
            {
              if (*v63 < 0 || *v62 != 61)
                goto LABEL_202;
              *(_DWORD *)chars = 0;
              _figCSSTokenizer_consume_next_input_code_point((uint64_t)cf, chars);
              v35 = CFGetAllocator(cf);
              v36 = 29;
              goto LABEL_155;
            }
            if (v67 == 43)
            {
              if (*v63 < 0)
                goto LABEL_202;
            }
            else
            {
              if (v67 == 44)
              {
                v35 = CFGetAllocator(cf);
                v36 = 12;
                goto LABEL_155;
              }
              if (v67 == 45)
              {
                v47 = *v63;
                if (*v63 < 1)
                  goto LABEL_202;
                v48 = *v62;
                if (*v62 < 0x30 || v48 > 0x39)
                {
                  if (v47 < 3)
                  {
                    if (v47 != 2 || v48 != 45)
                      goto LABEL_202;
                    v49 = *((_DWORD *)cf + 19);
                  }
                  else
                  {
                    v49 = *((_DWORD *)cf + 19);
                    if (_figCSSTokenizer_check_if_three_code_points_would_start_an_identifier(*v62, v49, *((_DWORD *)cf + 20)))
                    {
                      goto LABEL_164;
                    }
                    if (v48 != 45)
                      goto LABEL_202;
                  }
                  if (v49 != 62)
                    goto LABEL_202;
                  _figCSSTokenizer_consume_next_input_code_point((uint64_t)cf, 0);
                  _figCSSTokenizer_consume_next_input_code_point((uint64_t)cf, 0);
                  v35 = CFGetAllocator(cf);
                  v36 = 25;
                  goto LABEL_155;
                }
LABEL_151:
                cf[56] = 1;
                v41 = _figCSSTokenizer_consume_a_numeric_token(cf, &v66);
                if (!(_DWORD)v41)
                  goto LABEL_205;
                goto LABEL_213;
              }
              if (v67 != 46)
              {
                if (v67 == 47)
                {
                  if (*v63 < 0 || *v62 != 42)
                    goto LABEL_202;
                  v64 = 0;
                  _figCSSTokenizer_consume_next_input_code_point((uint64_t)cf, 0);
                  while (!_figCSSTokenizer_PeekAheadBuffer((uint64_t)cf, 2, chars, 8uLL, &v64))
                  {
                    v26 = v64;
                    if (!v64)
                      goto LABEL_12;
                    v27 = *(_DWORD *)chars;
                    v28 = v69;
                    _figCSSTokenizer_consume_next_input_code_point((uint64_t)cf, 0);
                    if (v26 >= 2 && v27 == 42 && v28 == 47)
                    {
                      _figCSSTokenizer_consume_next_input_code_point((uint64_t)cf, 0);
                      goto LABEL_12;
                    }
                  }
                  v25 = v67;
                }
                switch(v25)
                {
                  case ':':
                    v35 = CFGetAllocator(cf);
                    v36 = 13;
                    goto LABEL_155;
                  case ';':
                    v35 = CFGetAllocator(cf);
                    v36 = 14;
                    goto LABEL_155;
                  case '<':
                    if (*v63 >= 3 && (*v62 == 33 || *((_DWORD *)cf + 19) == 45 || *((_DWORD *)cf + 20) == 45))
                    {
                      _figCSSTokenizer_consume_next_input_code_point((uint64_t)cf, 0);
                      _figCSSTokenizer_consume_next_input_code_point((uint64_t)cf, 0);
                      _figCSSTokenizer_consume_next_input_code_point((uint64_t)cf, 0);
                      v35 = CFGetAllocator(cf);
                      v36 = 26;
                      goto LABEL_155;
                    }
LABEL_202:
                    v53 = CFGetAllocator(cf);
                    v41 = FigCSSCodePointTokenCreate(v53, 5, v67, &v66);
                    if ((_DWORD)v41)
                      goto LABEL_213;
                    goto LABEL_205;
                  case '@':
                    if (*v63 >= 3
                      && _figCSSTokenizer_check_if_three_code_points_would_start_an_identifier(*((_DWORD *)cf + 18), *((_DWORD *)cf + 19), *((_DWORD *)cf + 20)))
                    {
                      _figCSSTokenizer_consume_a_name((uint64_t)cf, &v65);
                      v40 = CFGetAllocator(cf);
                      v41 = FigCSSStringValueTokenCreate(v40, 8, v65, &v66);
                      if (!(_DWORD)v41)
                        goto LABEL_205;
                      goto LABEL_213;
                    }
LABEL_216:
                    v55 = CFGetAllocator(cf);
                    FigCSSCodePointTokenCreate(v55, 5, v67, &v66);
                    goto LABEL_205;
                  case '[':
                    v35 = CFGetAllocator(cf);
                    v36 = 20;
                    goto LABEL_155;
                  case '\\':
                    if (*v63 < 1 || *v62 == 10)
                      goto LABEL_202;
                    goto LABEL_164;
                  case ']':
                    v35 = CFGetAllocator(cf);
                    v36 = 21;
                    goto LABEL_155;
                  case '^':
                    if (*v63 < 0 || *v62 != 61)
                      goto LABEL_202;
                    *(_DWORD *)chars = 0;
                    _figCSSTokenizer_consume_next_input_code_point((uint64_t)cf, chars);
                    v35 = CFGetAllocator(cf);
                    v36 = 27;
                    goto LABEL_155;
                  case '{':
                    v35 = CFGetAllocator(cf);
                    v36 = 18;
                    goto LABEL_155;
                  case '}':
                    v35 = CFGetAllocator(cf);
                    v36 = 19;
                    goto LABEL_155;
                }
                if (v25 < 0x30 || v25 > 0x39)
                {
                  if (v25 == 85 || v25 == 117)
                  {
                    if (*v63 >= 2 && *v62 == 43)
                    {
                      v51 = *((_DWORD *)cf + 19);
                      if (FigCSSCodePointIs_hex_digit(v51) || v51 == 63)
                      {
                        v41 = FigSignalErrorAt();
                        if ((_DWORD)v41)
                          goto LABEL_213;
                        goto LABEL_205;
                      }
                    }
                    goto LABEL_164;
                  }
                  if (FigCSSCodePointIs_name_start_code_point(v25))
                  {
LABEL_164:
                    cf[56] = 1;
                    v41 = _figCSSTokenizer_consume_an_ident_like_token(cf, &v66);
                    if ((_DWORD)v41)
                      goto LABEL_213;
                    goto LABEL_205;
                  }
                  if (v25 == 124)
                  {
                    if (*v63 < 1)
                      goto LABEL_216;
                    if (*v62 == 61)
                    {
                      _figCSSTokenizer_consume_next_input_code_point((uint64_t)cf, 0);
                      v35 = CFGetAllocator(cf);
                      v36 = 31;
                    }
                    else
                    {
                      if (*v62 != 124)
                        goto LABEL_216;
                      _figCSSTokenizer_consume_next_input_code_point((uint64_t)cf, 0);
                      v35 = CFGetAllocator(cf);
                      v36 = 15;
                    }
                  }
                  else
                  {
                    if (v25 != 126)
                    {
                      v52 = *((_QWORD *)cf + 6);
                      if (v52 && *((_QWORD *)cf + 5) < v52)
                        goto LABEL_202;
LABEL_204:
                      v54 = CFGetAllocator(cf);
                      v41 = FigCSSEOFTokenCreate((uint64_t)v54, &v66);
                      if (!(_DWORD)v41)
                        goto LABEL_205;
LABEL_213:
                      TokenType = v41;
                      goto LABEL_77;
                    }
                    if (*v63 < 1 || *v62 != 61)
                      goto LABEL_202;
                    _figCSSTokenizer_consume_next_input_code_point((uint64_t)cf, 0);
                    v35 = CFGetAllocator(cf);
                    v36 = 30;
                  }
LABEL_155:
                  v41 = FigCSSSimpleTokenCreate((uint64_t)v35, v36, &v66);
                  if ((_DWORD)v41)
                    goto LABEL_213;
LABEL_205:
                  TokenType = 0;
                  v7 = v66;
                  v66 = 0;
                  goto LABEL_206;
                }
                goto LABEL_151;
              }
              if (*v63 < 1)
                goto LABEL_202;
            }
            if (*v62 < 0x30 || *v62 > 0x39)
              goto LABEL_202;
            goto LABEL_151;
          }
          v38 = (uint64_t)cf;
          v39 = 39;
        }
        v41 = _figCSSTokenizer_consume_a_string_token(v38, v39, &v66);
        if (!(_DWORD)v41)
          goto LABEL_205;
        goto LABEL_213;
      }
      v8 = 1;
    }
    while (!v24);
    TokenType = 4294949486;
LABEL_77:
    if (v66)
      CFRelease(v66);
    v7 = 0;
LABEL_206:
    if (v65)
      CFRelease(v65);
    if ((_DWORD)TokenType)
      break;
    if (!v7)
    {
      TokenType = 0;
      break;
    }
    *(_DWORD *)chars = 0;
    CFArrayAppendValue(*((CFMutableArrayRef *)cf + 4), v7);
    TokenType = FigCSSTokenGetTokenType((uint64_t)v7, chars);
    if ((_DWORD)TokenType)
      break;
  }
  while (*(_DWORD *)chars != 1);
  if (cf[24])
  {
    v56 = CFGetAllocator(cf);
    v57 = CFStringCreateWithFormat(v56, 0, CFSTR("tokens: %@"), *((_QWORD *)cf + 4));
    if (v57)
      CFRelease(v57);
  }
  if (v7)
    CFRelease(v7);
  v2 = v61;
LABEL_224:
  if ((_DWORD)TokenType)
    v58 = 2;
  else
    v58 = 1;
  *((_DWORD *)cf + 7) = v58;
  if (!(_DWORD)TokenType)
  {
    v59 = (CFTypeRef)*((_QWORD *)cf + 4);
    if (v59)
      v59 = CFRetain(v59);
    TokenType = 0;
    *v2 = v59;
  }
  return TokenType;
}

double figCSSTokenizer_Init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 80) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void figCSSTokenizer_Finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 16);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 32);
  if (v3)
    CFRelease(v3);
}

CFStringRef figCSSTokenizer_CopyFormattingDesc(_QWORD *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("[FigCSSTokenizer <%p> textContainer:<%p> tokens:<%p> textLength:<%ld> currentIndex:%ld]"), a1, a1[2], a1[4], a1[6], a1[5]);
}

CFStringRef figCSSTokenizer_CopyDebugDesc(_QWORD *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("[FigCSSTokenizer <%p> textContainer:<%p> tokens:<%p> textLength:<%ld> currentIndex:%ld]"), a1, a1[2], a1[4], a1[6], a1[5]);
}

uint64_t _figCSSTokenizer_consume_next_input_code_point(uint64_t a1, _DWORD *a2)
{
  CFRange v3;
  uint64_t v4;
  UniChar buffer;

  v3.location = *(_QWORD *)(a1 + 40);
  if (!*(_BYTE *)(a1 + 56) || v3.location < 0)
    *(_QWORD *)(a1 + 40) = ++v3.location;
  v4 = 0;
  *(_BYTE *)(a1 + 56) = 0;
  if (v3.location < *(_QWORD *)(a1 + 48))
  {
    buffer = 0;
    v3.length = (CFIndex)&buffer;
    if (FigTextContainerGetCharacterAtIndex(*(_QWORD *)(a1 + 16), v3))
    {
      return 0;
    }
    else
    {
      if (a2)
        *a2 = buffer;
      return 1;
    }
  }
  return v4;
}

uint64_t _figCSSTokenizer_consume_a_string_token(uint64_t a1, int a2, CFTypeRef *a3)
{
  const __CFAllocator *v6;
  __CFString *Mutable;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  UniChar *v12;
  const __CFAllocator *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  CFAllocatorRef v18;
  __int16 v19;
  int v20;
  UniChar chars[4];
  int v22;
  int v23;
  CFTypeRef cf;

  cf = 0;
  v23 = 65533;
  v6 = CFGetAllocator((CFTypeRef)a1);
  Mutable = CFStringCreateMutable(v6, 0);
  if (Mutable)
  {
    v8 = *(_QWORD *)(a1 + 48);
    if (v8)
    {
      while (1)
      {
        v9 = *(_QWORD *)(a1 + 40);
        v10 = _figCSSTokenizer_consume_next_input_code_point(a1, &v23);
        if (!v10 && v9 < v8)
        {
          v17 = *(_QWORD *)(a1 + 48);
          if (!v17 || *(_QWORD *)(a1 + 40) >= v17)
            goto LABEL_23;
          goto LABEL_24;
        }
        if (v9 >= v8)
          goto LABEL_23;
        if (!v10)
          goto LABEL_24;
        if (v23 == a2)
          goto LABEL_23;
        if (v23 == 10)
        {
          *(_BYTE *)(a1 + 56) = 1;
          v18 = CFGetAllocator((CFTypeRef)a1);
          v14 = FigCSSSimpleTokenCreate((uint64_t)v18, 4, &cf);
          if (!(_DWORD)v14)
            goto LABEL_24;
          goto LABEL_34;
        }
        if (v23 != 92)
          break;
        *(_QWORD *)chars = 0;
        _figCSSTokenizer_PeekAheadBuffer(a1, 1, &v22, 4uLL, (uint64_t *)chars);
        v11 = *(_QWORD *)(a1 + 48);
        if (!v11 || *(_QWORD *)(a1 + 40) >= v11 || *(uint64_t *)chars < 1)
          goto LABEL_17;
        if (v22 != 10)
        {
          if (v23 != 92 || *(_DWORD *)(a1 + 72) == 10)
            goto LABEL_17;
          v20 = 0;
          v19 = 0;
          _figCSSTokenizer_consume_an_escaped_code_point(a1, &v20);
          v19 = v20;
          v12 = (UniChar *)&v19;
          goto LABEL_16;
        }
        _figCSSTokenizer_consume_next_input_code_point(a1, 0);
LABEL_17:
        v8 = *(_QWORD *)(a1 + 48);
        if (!v8)
          goto LABEL_22;
      }
      chars[0] = v23;
      v12 = chars;
LABEL_16:
      CFStringAppendCharacters(Mutable, v12, 1);
      goto LABEL_17;
    }
LABEL_22:
    _figCSSTokenizer_consume_next_input_code_point(a1, &v23);
LABEL_23:
    v13 = CFGetAllocator((CFTypeRef)a1);
    v14 = FigCSSStringValueTokenCreate(v13, 3, Mutable, &cf);
    if (!(_DWORD)v14)
    {
LABEL_24:
      v15 = 0;
      *a3 = cf;
      cf = 0;
      goto LABEL_25;
    }
  }
  else
  {
    v14 = FigSignalErrorAt();
  }
LABEL_34:
  v15 = v14;
  if (cf)
    CFRelease(cf);
LABEL_25:
  if (Mutable)
    CFRelease(Mutable);
  return v15;
}

BOOL _figCSSTokenizer_check_if_three_code_points_would_start_an_identifier(unsigned int a1, unsigned int a2, int a3)
{
  BOOL v4;
  BOOL v5;
  _BOOL8 result;
  BOOL v9;
  BOOL v10;

  if (a1 != 45)
  {
    if (a1 < 0x41 || a1 > 0x5A)
    {
      v9 = a1 > 0x7A || a1 < 0x61;
      v10 = v9 && a1 < 0x80;
      if (v10 && a1 != 95)
        return a1 == 92 && a2 != 10;
    }
    return 1;
  }
  if (a2 >= 0x41 && a2 <= 0x5A)
    return 1;
  v4 = a2 > 0x7A || a2 < 0x61;
  v5 = v4 && a2 < 0x80;
  if (!v5 || a2 == 95)
    return 1;
  result = 0;
  if (a2 == 92 && a3 != 10)
    return 1;
  return result;
}

uint64_t _figCSSTokenizer_consume_a_name(uint64_t a1, __CFString **a2)
{
  const __CFAllocator *v4;
  CFMutableStringRef Mutable;
  __CFString *v6;
  UniChar v7;
  BOOL v9;
  BOOL v10;
  BOOL v12;
  int v15;
  UniChar chars;
  unsigned int v17;

  v17 = 65533;
  v4 = CFGetAllocator((CFTypeRef)a1);
  Mutable = CFStringCreateMutable(v4, 0);
  if (!Mutable)
    return FigSignalErrorAt();
  v6 = Mutable;
  if (!_figCSSTokenizer_consume_next_input_code_point(a1, &v17))
    goto LABEL_28;
  while (1)
  {
    chars = 0;
    _figCSSTokenizer_PeekAheadBuffer(a1, 3, (_DWORD *)(a1 + 72), 0xCuLL, (uint64_t *)(a1 + 64));
    v7 = v17;
    if (v17 >= 0x41 && v17 <= 0x5A)
      goto LABEL_27;
    v9 = v17 > 0x7A || v17 < 0x61;
    v10 = v9 && v17 < 0x80;
    if (!v10 || v17 == 95)
      goto LABEL_27;
    v12 = v17 > 0x39 || v17 < 0x30;
    if (!v12 || v17 == 45)
      goto LABEL_27;
    if (v17 != 92 || *(_DWORD *)(a1 + 72) == 10)
      break;
    v15 = 0;
    _figCSSTokenizer_consume_an_escaped_code_point(a1, &v15);
    v7 = v15;
LABEL_27:
    chars = v7;
    CFStringAppendCharacters(v6, &chars, 1);
    if (!_figCSSTokenizer_consume_next_input_code_point(a1, &v17))
      goto LABEL_28;
  }
  *(_BYTE *)(a1 + 56) = 1;
LABEL_28:
  *a2 = v6;
  return 0;
}

uint64_t _figCSSTokenizer_consume_a_numeric_token(const void *a1, CFTypeRef *a2)
{
  uint64_t v3;
  const __CFAllocator *v4;
  __CFString *Mutable;
  int v6;
  CFIndex v7;
  unsigned int v9;
  uint64_t v10;
  uint64_t v12;
  unsigned int v14;
  uint64_t v15;
  CFIndex v16;
  uint64_t v17;
  const __CFString *v19;
  uint64_t v20;
  CFIndex v21;
  uint64_t v22;
  BOOL v23;
  const __CFAllocator *v24;
  CFStringRef v25;
  uint64_t v26;
  CFIndex *p_length;
  uint64_t v28;
  CFIndex v29;
  CFStringRef v30;
  CFStringRef v31;
  const __CFString *v32;
  CFStringRef v33;
  double v34;
  double v35;
  double v36;
  CFIndex v37;
  const __CFAllocator *v38;
  const __CFString *v39;
  const __CFString *v40;
  SInt32 IntValue;
  CFIndex v42;
  const __CFAllocator *v43;
  const __CFString *v44;
  const __CFString *v45;
  SInt32 v46;
  int Length;
  CFRange v48;
  double v49;
  double v50;
  CFIndex v51;
  const __CFAllocator *v52;
  const __CFString *v53;
  const __CFString *v54;
  SInt32 v55;
  double v56;
  double v57;
  uint64_t v58;
  unsigned int v59;
  const __CFAllocator *v60;
  __CFString *v61;
  uint64_t v62;
  uint64_t v63;
  const __CFAllocator *v64;
  const __CFAllocator *v65;
  CFIndex range;
  int v68;
  CFIndex v69;
  CFIndex v70;
  CFIndex v71;
  const void *v72;
  CFTypeRef *v73;
  __CFString *v74;
  CFTypeRef cf;
  uint64_t v76;
  UniChar chars;
  __int16 v78;
  int v79;
  CFRange v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  CFRange v85;
  __int128 v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  UniChar buffer[10];
  uint64_t v91;
  CFRange v92;
  CFRange v93;
  CFRange v94;
  CFRange v95;

  v3 = (uint64_t)a1;
  v91 = *MEMORY[0x1E0C80C00];
  v74 = 0;
  cf = 0;
  v79 = 65533;
  v84 = xmmword_1932FCF38;
  v85 = (CFRange)unk_1932FCF48;
  v86 = xmmword_1932FCF58;
  v80 = (CFRange)xmmword_1932FCEF8;
  v81 = unk_1932FCF08;
  v82 = xmmword_1932FCF18;
  v83 = unk_1932FCF28;
  v4 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v4, 0);
  if (!Mutable)
  {
    FigSignalErrorAt();
    v57 = 0.0;
    v9 = 1;
    goto LABEL_106;
  }
  v76 = 0;
  _figCSSTokenizer_PeekAheadBuffer(v3, 3, (_DWORD *)(v3 + 72), 0xCuLL, (uint64_t *)(v3 + 64));
  if (*(uint64_t *)(v3 + 64) >= 1 && ((v6 = *(_DWORD *)(v3 + 72), v6 == 43) || v6 == 45))
  {
    v68 = 1;
    v80.length = 1;
    _figCSSTokenizer_consume_next_input_code_point(v3, &v79);
    chars = v79;
    CFStringAppendCharacters(Mutable, &chars, 1);
    range = 1;
  }
  else
  {
    range = 0;
    v68 = 0;
  }
  v7 = 0;
  if (!_figCSSTokenizer_PeekAheadBuffer(v3, 1, &v87, 4uLL, &v76) && v76 >= 1)
  {
    v7 = 0;
    do
    {
      if (v87 < 0x30 || v87 > 0x39)
        break;
      ++v7;
      _figCSSTokenizer_consume_next_input_code_point(v3, &v79);
      chars = v79;
      CFStringAppendCharacters(Mutable, &chars, 1);
      if (_figCSSTokenizer_PeekAheadBuffer(v3, 1, &v87, 4uLL, &v76))
        break;
    }
    while (v76 > 0);
    *((_QWORD *)&v81 + 1) = v7;
  }
  v9 = 0;
  v10 = 0;
  if (!_figCSSTokenizer_PeekAheadBuffer(v3, 2, &v87, 8uLL, &v76) && v76 >= 2)
  {
    if (v87 == 46)
    {
      v9 = 0;
      v10 = 0;
      if (v88 >= 0x30 && v88 <= 0x39)
      {
        v10 = 1;
        *((_QWORD *)&v82 + 1) = 1;
        _figCSSTokenizer_consume_next_input_code_point(v3, &v79);
        chars = v79;
        _figCSSTokenizer_consume_next_input_code_point(v3, &v79);
        v78 = v79;
        CFStringAppendCharacters(Mutable, &chars, 2);
        if (!_figCSSTokenizer_PeekAheadBuffer(v3, 1, &v87, 4uLL, &v76) && v76 >= 1)
        {
          v10 = 1;
          do
          {
            if (v87 < 0x30 || v87 > 0x39)
              break;
            ++v10;
            _figCSSTokenizer_consume_next_input_code_point(v3, &v79);
            chars = v79;
            CFStringAppendCharacters(Mutable, &chars, 1);
            if (_figCSSTokenizer_PeekAheadBuffer(v3, 1, &v87, 4uLL, &v76))
              break;
          }
          while (v76 > 0);
        }
        *((_QWORD *)&v83 + 1) = v10;
        v9 = 1;
      }
    }
    else
    {
      v10 = 0;
      v9 = 0;
    }
  }
  v12 = 0;
  v73 = a2;
  if (_figCSSTokenizer_PeekAheadBuffer(v3, 3, &v87, 0xCuLL, &v76) || v76 < 1)
    goto LABEL_64;
  if (v87 != 69 && v87 != 101)
    goto LABEL_65;
  if ((unint64_t)v76 >= 3)
  {
    v14 = v88;
    if ((v88 == 43 || v88 == 45) && v89 >= 0x30 && v89 <= 0x39)
    {
      v15 = 1;
      *((_QWORD *)&v84 + 1) = 1;
      v85.length = 1;
      *((_QWORD *)&v86 + 1) = 1;
      _figCSSTokenizer_consume_next_input_code_point(v3, &v79);
      chars = v79;
      _figCSSTokenizer_consume_next_input_code_point(v3, &v79);
      v78 = v79;
      v16 = 3;
      v17 = 2;
      goto LABEL_53;
    }
    goto LABEL_50;
  }
  if (v76 == 2)
  {
    v14 = v88;
LABEL_50:
    v12 = 0;
    if (v14 >= 0x30)
    {
      v15 = 0;
      if (v14 > 0x39)
        goto LABEL_66;
      v17 = 1;
      *((_QWORD *)&v84 + 1) = 1;
      *((_QWORD *)&v86 + 1) = 1;
      _figCSSTokenizer_consume_next_input_code_point(v3, &v79);
      v15 = 0;
      chars = v79;
      v16 = 2;
LABEL_53:
      _figCSSTokenizer_consume_next_input_code_point(v3, &v79);
      *(&chars + v17) = v79;
      CFStringAppendCharacters(Mutable, &chars, v16);
      v12 = 1;
      v9 = 1;
      if (!_figCSSTokenizer_PeekAheadBuffer(v3, 1, &v87, 4uLL, &v76) && v76 >= 1)
      {
        v12 = 1;
        do
        {
          if (v87 < 0x30 || v87 > 0x39)
            break;
          ++v12;
          _figCSSTokenizer_consume_next_input_code_point(v3, &v79);
          chars = v79;
          CFStringAppendCharacters(Mutable, &chars, 1);
          if (_figCSSTokenizer_PeekAheadBuffer(v3, 1, &v87, 4uLL, &v76))
            break;
        }
        while (v76 > 0);
        *((_QWORD *)&v86 + 1) = v12;
        v9 = 1;
      }
      goto LABEL_66;
    }
LABEL_64:
    v15 = 0;
    goto LABEL_66;
  }
LABEL_65:
  v12 = 0;
  v15 = 0;
LABEL_66:
  v69 = v15;
  v71 = v10;
  v19 = Mutable;
  v20 = 0;
  v21 = 0;
  do
  {
    v22 = *(CFIndex *)((char *)&v80.length + v20);
    if (v22)
    {
      *(CFIndex *)((char *)&v80.location + v20) = v21;
      v21 += v22;
    }
    v20 += 16;
  }
  while (v20 != 112);
  v70 = v12;
  v72 = (const void *)v3;
  if (*(_BYTE *)(v3 + 25))
    v23 = v7 <= 0;
  else
    v23 = 1;
  if (!v23)
  {
    v24 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v25 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("repr: %@"), Mutable);
    if (v25)
      CFRelease(v25);
    v26 = 0;
    p_length = &v80.length;
    do
    {
      v28 = *(p_length - 1);
      if ((v28 & 0x8000000000000000) == 0)
      {
        v29 = *p_length;
        v30 = CFStringCreateWithSubstring(v24, v19, *(CFRange *)(p_length - 1));
        v31 = v30;
        if (v30)
          v32 = v30;
        else
          v32 = &stru_1E2FD85F8;
        v33 = CFStringCreateWithFormat(v24, 0, CFSTR("[%d] {%ld, %ld} : %@"), v26, v28, v29, v32);
        if (v33)
          CFRelease(v33);
        if (v31)
          CFRelease(v31);
      }
      ++v26;
      p_length += 2;
    }
    while (v26 != 7);
  }
  v34 = 1.0;
  Mutable = (__CFString *)v19;
  a2 = v73;
  if (v68)
  {
    v92.location = v80.location;
    v92.length = range;
    CFStringGetCharacters(v19, v92, buffer);
    if (buffer[0] == 45)
      v34 = -1.0;
    else
      v34 = 1.0;
  }
  v35 = 0.0;
  v36 = 0.0;
  v3 = (uint64_t)v72;
  if (v7 >= 1)
  {
    v37 = v81;
    v38 = CFGetAllocator(v72);
    v93.location = v37;
    v93.length = v7;
    v39 = CFStringCreateWithSubstring(v38, v19, v93);
    if (v39)
    {
      v40 = v39;
      IntValue = CFStringGetIntValue(v39);
      CFRelease(v40);
      v36 = (double)IntValue;
    }
  }
  if (v71 >= 1
    && (v42 = v83,
        v43 = CFGetAllocator(v72),
        v94.location = v42,
        v94.length = v71,
        (v44 = CFStringCreateWithSubstring(v43, v19, v94)) != 0))
  {
    v45 = v44;
    v46 = CFStringGetIntValue(v44);
    Length = CFStringGetLength(v45);
    CFRelease(v45);
    v35 = (double)v46;
  }
  else
  {
    Length = 0;
  }
  v48.length = v69;
  if (v69 < 1)
  {
    v49 = 1.0;
  }
  else
  {
    v48.location = v85.location;
    CFStringGetCharacters(v19, v48, buffer);
    if (buffer[0] == 45)
      v49 = -1.0;
    else
      v49 = 1.0;
  }
  v50 = 0.0;
  if (v70 >= 1)
  {
    v51 = v86;
    v52 = CFGetAllocator(v72);
    v95.location = v51;
    v95.length = v70;
    v53 = CFStringCreateWithSubstring(v52, v19, v95);
    if (v53)
    {
      v54 = v53;
      v55 = CFStringGetIntValue(v53);
      CFRelease(v54);
      v50 = (double)v55;
    }
  }
  v56 = v34 * (v36 + v35 * __exp10((double)-Length));
  v57 = __exp10(v49 * v50) * v56;
LABEL_106:
  _figCSSTokenizer_PeekAheadBuffer(v3, 3, (_DWORD *)(v3 + 72), 0xCuLL, (uint64_t *)(v3 + 64));
  v58 = *(_QWORD *)(v3 + 64);
  if (v58 < 3)
  {
    if (v58 < 1)
      goto LABEL_115;
    v59 = *(_DWORD *)(v3 + 72);
  }
  else
  {
    v59 = *(_DWORD *)(v3 + 72);
    if (_figCSSTokenizer_check_if_three_code_points_would_start_an_identifier(v59, *(_DWORD *)(v3 + 76), *(_DWORD *)(v3 + 80)))
    {
      _figCSSTokenizer_consume_a_name(v3, &v74);
      v60 = CFGetAllocator((CFTypeRef)v3);
      v61 = v74;
      v62 = FigCSSDimensionTokenCreate(v60, (uint64_t)Mutable, v9, v74, &cf, v57);
      if ((_DWORD)v62)
        goto LABEL_109;
LABEL_117:
      v63 = 0;
      *a2 = cf;
      cf = 0;
      goto LABEL_118;
    }
  }
  if (v59 == 37)
  {
    _figCSSTokenizer_consume_next_input_code_point(v3, 0);
    v64 = CFGetAllocator((CFTypeRef)v3);
    v62 = FigCSSPercentageTokenCreate(v64, (uint64_t)Mutable, v9, &cf, v57);
    goto LABEL_116;
  }
LABEL_115:
  v65 = CFGetAllocator((CFTypeRef)v3);
  v62 = FigCSSNumberTokenCreate(v65, (uint64_t)Mutable, v9, &cf, v57);
LABEL_116:
  v61 = 0;
  if (!(_DWORD)v62)
    goto LABEL_117;
LABEL_109:
  v63 = v62;
  if (cf)
    CFRelease(cf);
LABEL_118:
  if (v61)
    CFRelease(v61);
  if (Mutable)
    CFRelease(Mutable);
  return v63;
}

uint64_t _figCSSTokenizer_consume_an_ident_like_token(const void *a1, _QWORD *a2)
{
  uint64_t v4;
  const __CFString *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  CFTypeRef v9;
  const __CFAllocator *v10;
  int v11;
  uint64_t v13;
  int v14;
  CFTypeRef cf;
  CFTypeRef v16;

  cf = 0;
  v16 = 0;
  v4 = _figCSSTokenizer_consume_a_name((uint64_t)a1, (__CFString **)&v16);
  if ((_DWORD)v4)
  {
    v8 = v4;
    goto LABEL_18;
  }
  v5 = (const __CFString *)v16;
  if (!v16)
  {
    v9 = 0;
LABEL_17:
    v8 = 0;
    *a2 = v9;
    cf = 0;
    goto LABEL_18;
  }
  v13 = 0;
  _figCSSTokenizer_PeekAheadBuffer((uint64_t)a1, 1, &v14, 4uLL, &v13);
  if (CFStringCompare(v5, CFSTR("url"), 1uLL) || v13 < 1)
  {
    if (v13 < 1)
      goto LABEL_14;
    v6 = v14;
  }
  else
  {
    v6 = v14;
    if (v14 == 40)
    {
      _figCSSTokenizer_consume_next_input_code_point((uint64_t)a1, 0);
      v7 = FigSignalErrorAt();
      if ((_DWORD)v7)
        goto LABEL_7;
      goto LABEL_16;
    }
  }
  if (v6 == 40)
  {
    _figCSSTokenizer_consume_next_input_code_point((uint64_t)a1, 0);
    v10 = CFGetAllocator(a1);
    v11 = 32;
    goto LABEL_15;
  }
LABEL_14:
  v10 = CFGetAllocator(a1);
  v11 = 7;
LABEL_15:
  v7 = FigCSSStringValueTokenCreate(v10, v11, v5, &cf);
  if (!(_DWORD)v7)
  {
LABEL_16:
    v9 = cf;
    goto LABEL_17;
  }
LABEL_7:
  v8 = v7;
  if (cf)
    CFRelease(cf);
LABEL_18:
  if (v16)
    CFRelease(v16);
  return v8;
}

uint64_t _figCSSTokenizer_PeekAheadBuffer(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4, uint64_t *a5)
{
  uint64_t CharactersForRange;
  _DWORD *v7;
  CFIndex v9;
  CFIndex v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  UniChar *v14;
  UniChar *v16;
  uint64_t v17;
  int v18;
  char v19;
  CFRange v20;

  if (a4 > 4 * a2)
    return 4294949487;
  v7 = a3;
  v9 = *(_QWORD *)(a1 + 40) - (*(_BYTE *)(a1 + 56) != 0) + 1;
  v10 = *(_QWORD *)(a1 + 48) - v9;
  if (a2 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      *v11++ = 0;
      --v12;
    }
    while (v12);
  }
  if (v10 >= a2)
    v13 = a2;
  else
    v13 = v10;
  if (v13 <= 0)
  {
    if (!a5)
      return 0;
LABEL_23:
    CharactersForRange = 0;
    *a5 = v13;
    return CharactersForRange;
  }
  if ((unint64_t)v13 < 4)
  {
    v14 = (UniChar *)&v19;
  }
  else
  {
    v14 = (UniChar *)malloc_type_calloc(2uLL, v13, 0x236E3B9FuLL);
    if (!v14)
      return FigSignalErrorAt();
  }
  v20.location = v9;
  v20.length = v13;
  CharactersForRange = FigTextContainerGetCharactersForRange(*(_QWORD *)(a1 + 16), v20, v14);
  if (!(_DWORD)CharactersForRange)
  {
    v16 = v14;
    v17 = v13;
    do
    {
      v18 = *v16++;
      *v7++ = v18;
      --v17;
    }
    while (v17);
  }
  if ((unint64_t)v13 >= 4)
    free(v14);
  if (a5 && !(_DWORD)CharactersForRange)
    goto LABEL_23;
  return CharactersForRange;
}

BOOL FigCSSCodePointIs_hex_digit(unsigned int a1)
{
  if (a1 >= 0x30 && a1 <= 0x39)
    return 1;
  if (a1 >= 0x41 && a1 <= 0x46)
    return 1;
  return a1 >= 0x61 && a1 <= 0x66;
}

BOOL FigCSSCodePointIs_name_start_code_point(unsigned int a1)
{
  BOOL v1;
  BOOL v2;
  BOOL v3;

  v1 = a1 >= 0x41 && a1 <= 0x5A;
  if (!v1 && (a1 <= 0x7A ? (v2 = a1 < 0x61) : (v2 = 1), v2 ? (v3 = a1 < 0x80) : (v3 = 0), v3))
    return a1 == 95;
  else
    return 1;
}

uint64_t _figCSSTokenizer_consume_an_escaped_code_point(uint64_t a1, int *a2)
{
  int v4;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  BOOL v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  _DWORD v33[5];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = 65533;
  v31 = 65533;
  v30 = 0;
  v28 = 0;
  result = _figCSSTokenizer_consume_next_input_code_point(a1, &v31);
  if ((v31 < 0x30 || v31 > 0x39) && (v31 < 0x41 || v31 > 0x46) && (v31 < 0x61 || v31 > 0x66))
  {
    v9 = *(_QWORD *)(a1 + 48);
    if (v9)
    {
      if (*(_QWORD *)(a1 + 40) >= v9)
        v4 = 65533;
      else
        v4 = v31;
    }
    goto LABEL_70;
  }
  v32 = v31;
  _figCSSTokenizer_PeekAheadBuffer(a1, 5, v33, 0x14uLL, &v30);
  v10 = v30;
  if (v30 >= 5)
    v10 = 5;
  if (v10 < 1)
  {
    v17 = 1;
  }
  else
  {
    v11 = 1;
    while (1)
    {
      v12 = v33[v11 - 1];
      if ((v12 < 0x30 || v12 > 0x39) && (v12 < 0x41 || v12 > 0x46) && (v12 < 0x61 || v12 > 0x66))
        break;
      v17 = v11 + 1;
      _figCSSTokenizer_consume_next_input_code_point(a1, 0);
      v16 = v30;
      if (v30 >= 5)
        v16 = 5;
      v23 = v11++ < v16;
      if (!v23)
        goto LABEL_39;
    }
    v17 = v11;
  }
LABEL_39:
  result = _figCSSTokenizer_PeekAheadBuffer(a1, 1, &v29, 4uLL, &v28);
  if (!(_DWORD)result && v28 >= 1 && (v29 == 10 || v29 == 9 || v29 == 32))
    result = _figCSSTokenizer_consume_next_input_code_point(a1, 0);
  v18 = 0;
  v19 = &v32;
  v4 = 65533;
  while (1)
  {
    v21 = *v19++;
    v20 = v21;
    v18 *= 16;
    v22 = v21 - 48;
    v23 = v21 < 0x30 || v20 > 0x39;
    if (!v23)
      goto LABEL_61;
    v24 = v20 - 65;
    if (v20 < 0x41 || v20 > 0x46)
    {
      v24 = v20 - 97;
      if (v20 < 0x61 || v20 > 0x66)
        break;
    }
    v22 = v24 + 10;
LABEL_61:
    v18 += v22;
    if (!--v17)
    {
      if (!v18)
        goto LABEL_70;
      goto LABEL_63;
    }
  }
  result = FigSignalErrorAt();
  if (!v18)
    goto LABEL_70;
LABEL_63:
  v27 = v18 > 0xD8FF || v18 < 0xD800;
  if (v27 && v18 <= 0x10FFFF)
    v4 = v18;
LABEL_70:
  *a2 = v4;
  return result;
}

uint64_t FigSampleBufferAudioDeviceRendererProtocolGetProtocolID()
{
  MEMORY[0x19402F294](&FigSampleBufferAudioDeviceRendererProtocolGetProtocolID_sRegisterFigSampleBufferAudioDeviceRendererProtocolTypeOnce, registerFigSampleBufferAudioDeviceRendererProtocolType);
  return sFigSampleBufferAudioDeviceRendererProtocolID;
}

uint64_t registerFigSampleBufferAudioDeviceRendererProtocolType()
{
  return FigBaseProtocolRegisterProtocol();
}

void FigVideoCompositionInstructionGetNormalizedTime(const __CFDictionary *a1, CMTime *a2)
{
  const __CFDictionary *Value;
  const __CFDictionary *v5;
  CMTime v6;
  CMTime rhs;
  CMTime lhs;
  CMTime v9;
  CMTime v10;
  CMTime v11;

  Value = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("StartTime"));
  CMTimeMakeFromDictionary(&v11, Value);
  v5 = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("EndTime"));
  CMTimeMakeFromDictionary(&v10, v5);
  lhs = v10;
  rhs = v11;
  CMTimeSubtract(&v9, &lhs, &rhs);
  rhs = *a2;
  v6 = v11;
  CMTimeSubtract(&lhs, &rhs, &v6);
  rhs = lhs;
  CMTimeGetSeconds(&rhs);
  rhs = v9;
  CMTimeGetSeconds(&rhs);
}

float FigVideoCompositionInstructionEvaluateTweenedOpacity(const void *a1, float a2)
{
  float v2;
  CFTypeID v5;
  CFIndex Count;
  CFIndex v7;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v9;
  CFIndex v10;
  const __CFNumber *v11;
  CFIndex v12;
  const __CFNumber *v13;
  uint64_t v15;
  uint64_t valuePtr;

  v2 = 0.0;
  if (a1)
  {
    v5 = CFGetTypeID(a1);
    if (v5 == CFArrayGetTypeID())
    {
      Count = CFArrayGetCount((CFArrayRef)a1);
      if (Count >= 4)
      {
        v7 = Count;
        if ((Count & 1) == 0)
        {
          v15 = 0;
          valuePtr = 0;
          ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)a1, 0);
          CFNumberGetValue(ValueAtIndex, kCFNumberFloat32Type, (char *)&valuePtr + 4);
          v9 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)a1, 1);
          CFNumberGetValue(v9, kCFNumberFloat32Type, (char *)&v15 + 4);
          if (*((float *)&valuePtr + 1) <= a2)
          {
            v10 = 2;
            while (1)
            {
              v11 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)a1, v10);
              CFNumberGetValue(v11, kCFNumberFloat32Type, &valuePtr);
              v12 = v10 + 1;
              v13 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)a1, v12);
              CFNumberGetValue(v13, kCFNumberFloat32Type, &v15);
              if (*(float *)&valuePtr > a2)
                break;
              HIDWORD(valuePtr) = valuePtr;
              v2 = *(float *)&v15;
              HIDWORD(v15) = v15;
              v10 = v12 + 1;
              if (v10 >= v7)
                return v2;
            }
            return *((float *)&v15 + 1)
                 + (float)((float)((float)(*(float *)&v15 - *((float *)&v15 + 1))
                                 * (float)(a2 - *((float *)&valuePtr + 1)))
                         / (float)(*(float *)&valuePtr - *((float *)&valuePtr + 1)));
          }
          else
          {
            return *((float *)&v15 + 1);
          }
        }
      }
    }
  }
  return v2;
}

void FigVideoCompositionInstructionEvaluateTweenedAffineMatrix(const __CFArray *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  CFTypeID v6;
  CFIndex Count;
  CFIndex v8;
  const __CFNumber *ValueAtIndex;
  const __CFArray *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  CFIndex v15;
  const __CFNumber *v16;
  CFIndex v17;
  const __CFArray *v18;
  __int128 v19;
  float v20;
  float v21;
  double v22;
  float v23;
  double v24;
  double v25;
  BOOL v26;
  CGFloat *v27;
  uint64_t i;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  CGAffineTransform v33;
  CGAffineTransform v34;
  uint64_t valuePtr;
  CGAffineTransform v36;
  CGAffineTransform v37;
  __int128 v38;
  _OWORD __x[4];
  CGFloat v40;
  double v41;
  double v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  memset(&v34, 0, sizeof(v34));
  memset(&v33, 0, sizeof(v33));
  if (a1
    && (v6 = CFGetTypeID(a1), v6 == CFArrayGetTypeID())
    && (Count = CFArrayGetCount(a1), Count >= 4)
    && (v8 = Count, (Count & 1) == 0))
  {
    valuePtr = 0;
    ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, 0);
    CFNumberGetValue(ValueAtIndex, kCFNumberFloat32Type, (char *)&valuePtr + 4);
    v10 = (const __CFArray *)CFArrayGetValueAtIndex(a1, 1);
    FigGetCGAffineTransformFrom3x2MatrixArray(v10, &v34.a);
    if (*((float *)&valuePtr + 1) <= a3)
    {
      v15 = 2;
      while (1)
      {
        v16 = (const __CFNumber *)CFArrayGetValueAtIndex(a1, v15);
        CFNumberGetValue(v16, kCFNumberFloat32Type, &valuePtr);
        v17 = v15 + 1;
        v18 = (const __CFArray *)CFArrayGetValueAtIndex(a1, v17);
        FigGetCGAffineTransformFrom3x2MatrixArray(v18, &v33.a);
        if (*(float *)&valuePtr > a3)
          break;
        HIDWORD(valuePtr) = valuePtr;
        v34 = v33;
        v15 = v17 + 1;
        if (v15 >= v8)
        {
          v19 = *(_OWORD *)&v33.c;
          *(_OWORD *)a2 = *(_OWORD *)&v33.a;
          *(_OWORD *)(a2 + 16) = v19;
          v12 = *(_OWORD *)&v33.tx;
          goto LABEL_8;
        }
      }
      v20 = a3 - *((float *)&valuePtr + 1);
      v21 = *(float *)&valuePtr - *((float *)&valuePtr + 1);
      v38 = *(_OWORD *)&v34.a;
      __x[0] = *(_OWORD *)&v34.c;
      __x[1] = *(_OWORD *)&v34.tx;
      v37 = v33;
      vci_CGAffineTransformDecompose((uint64_t)&v38, (uint64_t)&v40, 1, 1);
      vci_CGAffineTransformDecompose((uint64_t)&v37, (uint64_t)&v38, 1, 1);
      if ((v40 >= 0.0 || *((double *)&v38 + 1) >= 0.0) && (v41 >= 0.0 || *(double *)&v38 >= 0.0))
      {
        v22 = v42;
      }
      else
      {
        v40 = -v40;
        v41 = -v41;
        v22 = v42 + dbl_1932FCF70[v42 < 0.0];
      }
      v23 = v20 / v21;
      v24 = fmod(v22, 6.28318531);
      v42 = v24;
      v25 = fmod(*(long double *)__x, 6.28318531);
      *(double *)__x = v25;
      if (vabdd_f64(v24, v25) > 3.14159265)
      {
        v26 = v24 <= v25;
        if (v24 > v25)
          v25 = v24;
        v27 = (CGFloat *)&v38;
        if (!v26)
          v27 = &v40;
        v27[2] = v25 + -6.28318531;
      }
      for (i = 0; i != 72; i += 8)
        *(CGFloat *)((char *)&v40 + i) = *(CGFloat *)((char *)&v40 + i)
                                       + v23 * (*(double *)((char *)&__x[-1] + i) - *(CGFloat *)((char *)&v40 + i));
      v29 = v44;
      *(_OWORD *)a2 = v43;
      *(_OWORD *)(a2 + 16) = v29;
      *(_OWORD *)(a2 + 32) = v45;
      v30 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)&v37.a = *(_OWORD *)a2;
      *(_OWORD *)&v37.c = v30;
      *(_OWORD *)&v37.tx = *(_OWORD *)(a2 + 32);
      CGAffineTransformRotate((CGAffineTransform *)a2, &v37, v42);
      v31 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)&v36.a = *(_OWORD *)a2;
      *(_OWORD *)&v36.c = v31;
      *(_OWORD *)&v36.tx = *(_OWORD *)(a2 + 32);
      CGAffineTransformScale(&v37, &v36, v40, v41);
      v32 = *(_OWORD *)&v37.c;
      *(_OWORD *)a2 = *(_OWORD *)&v37.a;
      *(_OWORD *)(a2 + 16) = v32;
      v12 = *(_OWORD *)&v37.tx;
    }
    else
    {
      v11 = *(_OWORD *)&v34.c;
      *(_OWORD *)a2 = *(_OWORD *)&v34.a;
      *(_OWORD *)(a2 + 16) = v11;
      v12 = *(_OWORD *)&v34.tx;
    }
  }
  else
  {
    v13 = MEMORY[0x1E0C9BAA8];
    v14 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
    *(_OWORD *)a2 = *MEMORY[0x1E0C9BAA8];
    *(_OWORD *)(a2 + 16) = v14;
    v12 = *(_OWORD *)(v13 + 32);
  }
LABEL_8:
  *(_OWORD *)(a2 + 32) = v12;
}

uint64_t FigVideoCompositionInstructionEvaluateTweenedCropRectangle(uint64_t result, float a2)
{
  const __CFArray *v3;
  CFTypeID v4;
  CFIndex v5;
  const void *ValueAtIndex;
  const __CFNumber *v7;
  CFTypeID TypeID;
  CFIndex i;
  const __CFNumber *v10;
  CFIndex v11;
  const void *v12;
  CFTypeID v13;
  CGRect v14;
  CGRect rect;
  float v16;
  float valuePtr;

  if (result)
  {
    v3 = (const __CFArray *)result;
    v4 = CFGetTypeID((CFTypeRef)result);
    result = CFArrayGetTypeID();
    if (v4 == result)
    {
      result = CFArrayGetCount(v3);
      if (result >= 4)
      {
        v5 = result;
        if ((result & 1) == 0)
        {
          valuePtr = 0.0;
          v16 = 0.0;
          memset(&rect, 0, sizeof(rect));
          memset(&v14, 0, sizeof(v14));
          ValueAtIndex = CFArrayGetValueAtIndex(v3, 1);
          v7 = (const __CFNumber *)CFArrayGetValueAtIndex(v3, 0);
          CFNumberGetValue(v7, kCFNumberFloat32Type, &valuePtr);
          TypeID = CFDictionaryGetTypeID();
          result = CFGetTypeID(ValueAtIndex);
          if (TypeID == result)
          {
            result = CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)ValueAtIndex, &rect);
            if ((_DWORD)result)
            {
              if (valuePtr <= a2)
              {
                for (i = 2; i < v5; i = v11 + 1)
                {
                  v10 = (const __CFNumber *)CFArrayGetValueAtIndex(v3, i);
                  CFNumberGetValue(v10, kCFNumberFloat32Type, &v16);
                  v11 = i + 1;
                  v12 = CFArrayGetValueAtIndex(v3, v11);
                  v13 = CFDictionaryGetTypeID();
                  result = CFGetTypeID(v12);
                  if (v13 == result)
                  {
                    result = CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)v12, &v14);
                    if ((_DWORD)result)
                    {
                      if (v16 > a2)
                        return result;
                      valuePtr = v16;
                      rect = v14;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t FigVideoCompositionInstructionArrayIsValid(uint64_t result, uint64_t a2, uint64_t a3)
{
  const __CFArray *v5;
  CFTypeID v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  CFIndex v10;
  const void *ValueAtIndex;
  const void *v12;
  CFTypeID TypeID;
  const void *Value;
  const void *v15;
  CFTypeID v16;
  const __CFDictionary *v17;
  const void *v18;
  const void *v19;
  CFTypeID v20;
  const __CFDictionary *v21;
  CMTime v22;
  CMTime time1;
  CMTime v24;
  CMTime v25;
  CMTime v26;

  memset(&v26, 0, sizeof(v26));
  if (result)
  {
    v5 = (const __CFArray *)result;
    v6 = CFGetTypeID((CFTypeRef)result);
    if (v6 != CFArrayGetTypeID())
      return 0;
    Count = CFArrayGetCount(v5);
    if (Count)
    {
      v8 = Count;
      v9 = 0;
      v10 = Count - 1;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v5, v9);
        memset(&v25, 0, sizeof(v25));
        memset(&v24, 0, sizeof(v24));
        if (!ValueAtIndex)
          break;
        v12 = ValueAtIndex;
        TypeID = CFDictionaryGetTypeID();
        if (TypeID != CFGetTypeID(v12))
          break;
        Value = CFDictionaryGetValue((CFDictionaryRef)v12, CFSTR("StartTime"));
        if (!Value)
          break;
        v15 = Value;
        v16 = CFDictionaryGetTypeID();
        if (v16 != CFGetTypeID(v15))
          break;
        v17 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v12, CFSTR("StartTime"));
        CMTimeMakeFromDictionary(&v25, v17);
        v18 = CFDictionaryGetValue((CFDictionaryRef)v12, CFSTR("EndTime"));
        if (!v18)
          break;
        v19 = v18;
        v20 = CFDictionaryGetTypeID();
        if (v20 != CFGetTypeID(v19))
          break;
        v21 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v12, CFSTR("EndTime"));
        CMTimeMakeFromDictionary(&v24, v21);
        if (!v9 && (*(_BYTE *)(a2 + 12) & 1) != 0)
        {
          time1 = v25;
          v22 = *(CMTime *)a2;
          if (CMTimeCompare(&time1, &v22) > 0)
            break;
        }
        if (v10 == v9 && (*(_BYTE *)(a3 + 12) & 1) != 0)
        {
          time1 = v24;
          v22 = *(CMTime *)a3;
          if (CMTimeCompare(&time1, &v22) < 0)
            break;
        }
        if (v9)
        {
          time1 = v26;
          v22 = v25;
          if (CMTimeCompare(&time1, &v22))
            break;
        }
        time1 = v25;
        v22 = v24;
        if (CMTimeCompare(&time1, &v22) >= 1)
          break;
        v26 = v24;
        ++v9;
        result = 1;
        if (v8 == v9)
          return result;
      }
      return 0;
    }
    return 1;
  }
  return result;
}

double FigVideoCompositionInstructionCGAffineTransformDecompose(_OWORD *a1, int a2, int a3, _OWORD *a4, double *a5, double *a6, double *a7)
{
  __int128 v11;
  double result;
  __int128 v13;
  _OWORD v14[3];
  double v15;
  double v16;
  double v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v11 = a1[1];
  v14[0] = *a1;
  v14[1] = v11;
  v14[2] = a1[2];
  result = vci_CGAffineTransformDecompose((uint64_t)v14, (uint64_t)&v15, a2, a3);
  if (a5)
  {
    result = v15;
    *a5 = v15;
  }
  if (a6)
  {
    result = v16;
    *a6 = v16;
  }
  if (a7)
  {
    result = v17;
    *a7 = v17;
  }
  if (a4)
  {
    v13 = v19;
    *a4 = v18;
    a4[1] = v13;
    result = *(double *)&v20;
    a4[2] = v20;
  }
  return result;
}

double vci_CGAffineTransformDecompose(uint64_t a1, uint64_t a2, int a3, int a4)
{
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  double v25;
  double v26;
  __int128 v28;
  __int128 v29;
  double result;
  CGAffineTransform v31;
  CGAffineTransform v32;

  v8 = *(double *)(a1 + 8);
  v9 = *(double *)(a1 + 16);
  v10 = *(double *)(a1 + 24);
  v11 = sqrt(v8 * v8 + *(double *)a1 * *(double *)a1);
  v12 = sqrt(v10 * v10 + v9 * v9);
  v13 = *(double *)a1 * v10 - v9 * v8;
  v14 = -v12;
  v15 = -v11;
  if (*(double *)a1 < v10)
    v14 = v12;
  else
    v15 = v11;
  if (v13 < 0.0)
    v16 = v15;
  else
    v16 = v11;
  if (v13 < 0.0)
    v17 = v14;
  else
    v17 = v12;
  v18 = 1.0 / v16;
  v19 = 0.0;
  if (v16 == 0.0)
    v18 = 0.0;
  v20 = 1.0 / v17;
  if (v17 == 0.0)
    v20 = 0.0;
  v21 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v31.a = *(_OWORD *)a1;
  *(_OWORD *)&v31.c = v21;
  *(_OWORD *)&v31.tx = *(_OWORD *)(a1 + 32);
  CGAffineTransformScale(&v32, &v31, v18, v20);
  v22 = *(_OWORD *)&v32.c;
  *(_OWORD *)a1 = *(_OWORD *)&v32.a;
  *(_OWORD *)(a1 + 16) = v22;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)&v32.tx;
  if (a4)
  {
    v19 = atan2(*(long double *)(a1 + 8), *(long double *)a1);
    v23 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)&v31.a = *(_OWORD *)a1;
    *(_OWORD *)&v31.c = v23;
    *(_OWORD *)&v31.tx = *(_OWORD *)(a1 + 32);
    CGAffineTransformRotate(&v32, &v31, -v19);
    v24 = *(_OWORD *)&v32.c;
    *(_OWORD *)a1 = *(_OWORD *)&v32.a;
    *(_OWORD *)(a1 + 16) = v24;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)&v32.tx;
  }
  if (!a3)
  {
    v25 = -1.0;
    if (v17 < 0.0)
      v26 = -1.0;
    else
      v26 = 1.0;
    if (v17 < 0.0 || v16 < 0.0)
      v19 = -v19;
    if (v16 >= 0.0)
      v25 = 1.0;
    v28 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)&v31.a = *(_OWORD *)a1;
    *(_OWORD *)&v31.c = v28;
    *(_OWORD *)&v31.tx = *(_OWORD *)(a1 + 32);
    CGAffineTransformScale(&v32, &v31, v25, v26);
    v29 = *(_OWORD *)&v32.c;
    *(_OWORD *)a1 = *(_OWORD *)&v32.a;
    *(_OWORD *)(a1 + 16) = v29;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)&v32.tx;
    v16 = fabs(v16);
    v17 = fabs(v17);
  }
  *(double *)a2 = v16;
  *(double *)(a2 + 8) = v17;
  *(double *)(a2 + 16) = v19;
  *(_QWORD *)(a2 + 24) = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 32);
  result = *(double *)(a1 + 40);
  *(double *)(a2 + 64) = result;
  return result;
}

uint64_t FigVideoCompositionInstructionCopyRequiredTrackIDArrayForTime(const __CFAllocator *a1, CFTypeRef cf, CMTime *a3, __CFArray **a4)
{
  CFTypeID v8;
  const void *v9;
  const void *Value;
  float v11;
  float v12;
  const __CFArray *v13;
  const void *v14;
  CFMutableArrayRef Mutable;
  __CFArray *MutableCopy;
  const void *v17;
  CFTypeID v18;
  CFMutableArrayRef v19;
  CFIndex Count;
  CFIndex v21;
  CFIndex v22;
  const __CFString *v23;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v25;
  CFTypeID v26;
  float v27;
  const void *v28;
  const void *v29;
  CFTypeID v30;
  const void *v31;
  const void *v32;
  const __CFString *v33;
  CFTypeID v34;
  BOOL v35;
  CFTypeID v36;
  uint64_t v37;
  __CFArray **v39;
  CMTime v40;
  int v41;

  v41 = 0;
  if (cf)
  {
    v8 = CFGetTypeID(cf);
    if (v8 == CFDictionaryGetTypeID())
    {
      if (a4)
      {
        v9 = (const void *)*MEMORY[0x1E0C9AE50];
        Value = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("ContainsTweening"));
        v11 = 0.0;
        if (v9 == Value)
        {
          v40 = *a3;
          FigVideoCompositionInstructionGetNormalizedTime((const __CFDictionary *)cf, &v40);
          v11 = v12;
        }
        FigCFDictionaryGetInt32IfPresent();
        v13 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("LayerStack"));
        v14 = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("RequiredVideoTrackIDArray"));
        if (v41)
        {
          Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
          if (Mutable)
          {
            MutableCopy = Mutable;
            FigCFArrayAppendInt32();
            goto LABEL_35;
          }
        }
        else
        {
          v17 = v14;
          if (v13 && (v18 = CFGetTypeID(v13), v18 == CFArrayGetTypeID()))
          {
            v19 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
            if (v19)
            {
              MutableCopy = v19;
              Count = CFArrayGetCount(v13);
              if (Count >= 1)
              {
                v21 = Count;
                v39 = a4;
                v22 = 0;
                v23 = CFSTR("ConstantOpacity");
                while (1)
                {
                  LODWORD(v40.value) = 1065353216;
                  ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v13, v22);
                  if (!ValueAtIndex)
                    break;
                  v25 = ValueAtIndex;
                  v26 = CFGetTypeID(ValueAtIndex);
                  if (v26 != CFDictionaryGetTypeID())
                    break;
                  if (!FigCFDictionaryGetFloatIfPresent())
                    LODWORD(v40.value) = 1065353216;
                  if (v9 == Value
                    && (v31 = CFDictionaryGetValue(v25, CFSTR("TweenedOpacity"))) != 0
                    && (v32 = v31, v33 = v23, v34 = CFGetTypeID(v31), v35 = v34 == CFArrayGetTypeID(), v23 = v33, v35))
                  {
                    v27 = FigVideoCompositionInstructionEvaluateTweenedOpacity(v32, v11);
                    *(float *)&v40.value = v27;
                  }
                  else
                  {
                    v27 = *(float *)&v40.value;
                  }
                  if (v27 > 0.0)
                  {
                    v28 = CFDictionaryGetValue(v25, CFSTR("SourceVideoTrackID"));
                    if (!v28)
                      break;
                    v29 = v28;
                    v30 = CFGetTypeID(v28);
                    if (v30 != CFNumberGetTypeID())
                      break;
                    CFArrayAppendValue(MutableCopy, v29);
                  }
                  if (v21 == ++v22)
                  {
                    a4 = v39;
                    goto LABEL_35;
                  }
                }
                v37 = FigSignalErrorAt();
                CFRelease(MutableCopy);
                return v37;
              }
              goto LABEL_35;
            }
          }
          else
          {
            if (!v17 || (v36 = CFGetTypeID(v17), v36 != CFArrayGetTypeID()))
            {
              MutableCopy = 0;
              goto LABEL_35;
            }
            MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, (CFArrayRef)v17);
            if (MutableCopy)
            {
LABEL_35:
              v37 = 0;
              *a4 = MutableCopy;
              return v37;
            }
          }
        }
        return FigSignalErrorAt();
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigVideoCompositionInstructionCopyRequiredSampleDataTrackIDArrayForTime(int a1, CFTypeRef cf, uint64_t a3, const __CFArray **a4)
{
  CFTypeID v6;
  const __CFArray *Value;
  const __CFArray *v8;
  CFTypeID v9;

  if (!cf)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(cf);
  if (v6 != CFDictionaryGetTypeID() || !a4)
    return FigSignalErrorAt();
  Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("RequiredSampleDataTrackIDArray"));
  if (!Value)
    goto LABEL_9;
  v8 = Value;
  v9 = CFGetTypeID(Value);
  if (v9 != CFArrayGetTypeID())
  {
    Value = 0;
    goto LABEL_9;
  }
  Value = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v8);
  if (Value)
  {
LABEL_9:
    *a4 = Value;
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t FigVideoCompositionInstructionGetLayerCountExcludingBackground(const void *a1, CFIndex *a2)
{
  CFTypeID v4;
  const void *Value;
  const void *v6;
  CFTypeID v7;
  const __CFArray *v8;
  CFTypeID v9;
  CFIndex Count;
  uint64_t result;

  if (!a1 || (v4 = CFGetTypeID(a1), v4 != CFDictionaryGetTypeID()) || !a2)
  {
    result = FigSignalErrorAt();
    goto LABEL_12;
  }
  FigCFDictionaryGetInt32IfPresent();
  Value = CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("LayerStack"));
  v6 = CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("RequiredVideoTrackIDArray"));
  if (!Value || (v7 = CFGetTypeID(Value), v7 != CFArrayGetTypeID()))
  {
    if (v6)
    {
      v9 = CFGetTypeID(v6);
      if (v9 == CFArrayGetTypeID())
      {
        v8 = (const __CFArray *)v6;
        goto LABEL_10;
      }
    }
    result = 0;
LABEL_12:
    Count = 0;
    goto LABEL_13;
  }
  v8 = (const __CFArray *)Value;
LABEL_10:
  Count = CFArrayGetCount(v8);
  result = 0;
LABEL_13:
  *a2 = Count;
  return result;
}

uint64_t FigVirtualDisplayProcessorAccessoryCreate(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  FigVirtualDisplayProcessorGetClassID();
  v4 = CMDerivedObjectCreate();
  if ((_DWORD)v4)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_DWORD *)(DerivedStorage + 32) = 0;
    *(_QWORD *)(DerivedStorage + 8) = dispatch_semaphore_create(0);
    *(_QWORD *)DerivedStorage = dispatch_queue_create("FVDProcessorAccessoryQueue", 0);
    *a3 = 0;
  }
  return v4;
}

void pa_finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  NSObject *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD block[5];
  os_log_type_t type;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 32))
  {
    v11 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v3 = *(NSObject **)DerivedStorage;
  if (*(_QWORD *)DerivedStorage)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __pa_finalize_block_invoke;
    block[3] = &__block_descriptor_tmp_79;
    block[4] = a1;
    dispatch_sync(v3, block);
    if (*(_QWORD *)DerivedStorage)
    {
      dispatch_release(*(dispatch_object_t *)DerivedStorage);
      *(_QWORD *)DerivedStorage = 0;
    }
  }
  v4 = *(NSObject **)(DerivedStorage + 8);
  if (v4)
  {
    dispatch_release(v4);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 24);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 16);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v7 = *(const void **)(DerivedStorage + 48);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
}

uint64_t pa_copyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  const __CFString *v7;
  const __CFString **v8;
  CFTypeRef v9;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("processorType")))
  {
    v7 = CFSTR("AccessoryProcessor");
LABEL_7:
    v9 = CFRetain(v7);
    result = 0;
    *a4 = v9;
    return result;
  }
  if (CFEqual(a2, CFSTR("IsIdle")))
  {
    v8 = (const __CFString **)MEMORY[0x1E0C9AE40];
    if (*(_DWORD *)(DerivedStorage + 32) != 2)
      v8 = (const __CFString **)MEMORY[0x1E0C9AE50];
    v7 = *v8;
    goto LABEL_7;
  }
  return 4294954512;
}

uint64_t pa_setProperty()
{
  return 4294954512;
}

void __pa_finalize_block_invoke(uint64_t a1)
{
  pa_cleanup(*(const void **)(a1 + 32));
}

void pa_cleanup(const void *a1)
{
  _QWORD *DerivedStorage;
  __CFNotificationCenter *DistributedCenter;
  uint64_t v4;
  void (*v5)(uint64_t, _QWORD);
  uint64_t v6;
  void (*v7)(uint64_t, _QWORD);
  const void *v8;
  const void *v9;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  DistributedCenter = CFNotificationCenterGetDistributedCenter();
  CFNotificationCenterRemoveObserver(DistributedCenter, a1, 0, 0);
  v4 = DerivedStorage[2];
  if (v4)
  {
    v5 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
    if (v5)
      v5(v4, 0);
  }
  v6 = DerivedStorage[3];
  if (v6)
  {
    v7 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v7)
      v7(v6, 0);
    v8 = (const void *)DerivedStorage[3];
    if (v8)
    {
      CFRelease(v8);
      DerivedStorage[3] = 0;
    }
  }
  v9 = (const void *)DerivedStorage[6];
  if (v9)
  {
    CFRelease(v9);
    DerivedStorage[6] = 0;
  }
}

uint64_t pa_plugSink(uint64_t a1, uint64_t a2)
{
  NSObject **DerivedStorage;
  NSObject *v4;
  uint64_t v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD block[7];
  os_log_type_t type;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v11 = 0;
  v12 = &v11;
  v13 = 0x2000000000;
  v14 = 0;
  DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v4 = *DerivedStorage;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __pa_plugSink_block_invoke;
    block[3] = &unk_1E2FA56E0;
    block[5] = DerivedStorage;
    block[6] = a2;
    block[4] = &v11;
    dispatch_sync(v4, block);
    v5 = *((unsigned int *)v12 + 6);
  }
  else
  {
    v10 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v5 = 4294955226;
    *((_DWORD *)v12 + 6) = -12070;
  }
  _Block_object_dispose(&v11, 8);
  return v5;
}

uint64_t pa_unplugSink(uint64_t a1, uint64_t a2)
{
  NSObject **DerivedStorage;
  NSObject *v4;
  uint64_t v5;
  _QWORD block[7];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 0;
  DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  v4 = *DerivedStorage;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __pa_unplugSink_block_invoke;
  block[3] = &unk_1E2FA5708;
  block[5] = DerivedStorage;
  block[6] = a2;
  block[4] = &v8;
  dispatch_sync(v4, block);
  v5 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v5;
}

uint64_t pa_start(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD block[7];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 0;
  v4 = *(NSObject **)CMBaseObjectGetDerivedStorage();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __pa_start_block_invoke;
  block[3] = &unk_1E2FA5730;
  block[4] = &v8;
  block[5] = a1;
  block[6] = a2;
  dispatch_sync(v4, block);
  v5 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v5;
}

uint64_t pa_stop(uint64_t a1)
{
  NSObject **DerivedStorage;
  NSObject *v3;
  _QWORD v5[6];

  DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  v3 = *DerivedStorage;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = __pa_stop_block_invoke;
  v5[3] = &__block_descriptor_tmp_29_3;
  v5[4] = DerivedStorage;
  v5[5] = a1;
  dispatch_sync(v3, v5);
  return 0;
}

uint64_t pa_suspend()
{
  NSObject **DerivedStorage;
  NSObject *v1;
  _QWORD block[5];

  DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  v1 = *DerivedStorage;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __pa_suspend_block_invoke;
  block[3] = &__block_descriptor_tmp_30_0;
  block[4] = DerivedStorage;
  dispatch_sync(v1, block);
  return 0;
}

uint64_t pa_resume()
{
  NSObject **DerivedStorage;
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  v1 = *DerivedStorage;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = __pa_resume_block_invoke;
  v4[3] = &unk_1E2FA57E0;
  v4[4] = &v5;
  v4[5] = DerivedStorage;
  dispatch_sync(v1, v4);
  v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

CFTypeRef *__pa_plugSink_block_invoke(CFTypeRef *result)
{
  CFTypeRef *v1;
  _DWORD *v2;

  v1 = result;
  v2 = result[5];
  if (v2[8] || *((_QWORD *)v2 + 2))
  {
    *(_DWORD *)(*((_QWORD *)result[4] + 1) + 24) = -12070;
  }
  else
  {
    result = (CFTypeRef *)CFRetain(result[6]);
    *((_QWORD *)v1[5] + 2) = v1[6];
  }
  return result;
}

void __pa_unplugSink_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;

  v2 = a1[5];
  if (!*(_DWORD *)(v2 + 32) && (v3 = *(const void **)(v2 + 16), v3 == (const void *)a1[6]))
  {
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(a1[5] + 16) = 0;
    }
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = -12070;
  }
}

void __pa_start_block_invoke(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  int CFPreferenceNumberWithDefault;
  const __CFAllocator *v7;
  uint64_t v8;
  CFStringRef v9;
  uint64_t CMBaseObject;
  unsigned int (*v11)(uint64_t, const __CFString *, CFStringRef);
  CFTypeRef v12;
  unsigned int (*v13)(CFTypeRef, _QWORD, _QWORD);
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v19;
  NSObject *v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, const __CFString *, _QWORD, _QWORD *);
  int v25;
  __CFNotificationCenter *DistributedCenter;
  NSObject *v27;
  unsigned int v28;
  unsigned int v29;
  NSObject *v30;
  unsigned int v31;
  unsigned int v32;
  NSObject *v33;
  CFTypeRef v34;
  os_log_type_t type;
  os_log_type_t v36[4];
  CFTypeRef cf;
  _QWORD v38[16];
  _QWORD v39[3];
  int v40;
  uint64_t v41;

  v1 = a1;
  v41 = *MEMORY[0x1E0C80C00];
  v2 = *(const void **)(a1 + 40);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v34 = 0;
  if (*(_DWORD *)(DerivedStorage + 32) || (v4 = DerivedStorage, !*(_QWORD *)(DerivedStorage + 16)))
  {
    LODWORD(cf) = 0;
    v36[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_45:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v25 = -12070;
    goto LABEL_30;
  }
  v5 = CMBaseObjectGetDerivedStorage();
  CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  *(_DWORD *)(v5 + 36) = CFPreferenceNumberWithDefault;
  if (CFPreferenceNumberWithDefault <= 63)
  {
    v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    LODWORD(cf) = 0;
    v36[0] = OS_LOG_TYPE_DEFAULT;
    v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
    goto LABEL_45;
  }
  *(_DWORD *)(v5 + 40) = CFPreferenceNumberWithDefault;
  if (!FigGetCFPreferenceNumberWithDefault())
    goto LABEL_25;
  cf = 0;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v8 = getpid();
  v9 = CFStringCreateWithFormat(v7, 0, CFSTR("/tmp/vdpaccessory-tap-%d-%d.mov"), v8, ++tapSinkCreate_count);
  if (FigVirtualDisplaySinkFileWriterCreate((uint64_t)v7, &cf))
  {
    v15 = v1;
    *(_DWORD *)v36 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
    goto LABEL_19;
  }
  CMBaseObject = FigVirtualDisplaySinkGetCMBaseObject(cf);
  v11 = *(unsigned int (**)(uint64_t, const __CFString *, CFStringRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 56);
  if (!v11)
  {
    v15 = v1;
LABEL_12:
    *(_DWORD *)v36 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
LABEL_19:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v1 = v15;
LABEL_20:
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    goto LABEL_22;
  }
  if (v11(CMBaseObject, CFSTR("Destination"), v9))
  {
    v15 = v1;
    goto LABEL_12;
  }
  v12 = cf;
  v13 = *(unsigned int (**)(CFTypeRef, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v13)
  {
    v14 = v1;
    goto LABEL_14;
  }
  if (v13(v12, 0, 0))
  {
    v14 = v1;
LABEL_14:
    *(_DWORD *)v36 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
    v1 = v14;
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_20;
  }
LABEL_22:
  if (v9)
    CFRelease(v9);
  *(_QWORD *)(v5 + 24) = cf;
LABEL_25:
  FigGetCFPreferenceDoubleWithDefault();
  *(float *)&v21 = v21;
  *(_DWORD *)(v5 + 56) = LODWORD(v21);
  v39[0] = 0;
  v39[1] = v39;
  v39[2] = 0x2000000000;
  v40 = 0;
  v22 = CMBaseObjectGetDerivedStorage();
  v23 = *(_QWORD *)(v22 + 16);
  v38[0] = MEMORY[0x1E0C809B0];
  v38[1] = 0x40000000;
  v38[2] = __pa_copySinkProperty_block_invoke;
  v38[3] = &unk_1E2FA5758;
  v38[4] = v39;
  v38[5] = &v34;
  v38[6] = v22;
  v24 = *(void (**)(uint64_t, const __CFString *, _QWORD, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 48);
  if (v24)
    v24(v23, CFSTR("displayInfo"), 0, v38);
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v22 + 8), 0xFFFFFFFFFFFFFFFFLL);
  v25 = *(_DWORD *)(v39[1] + 24);
  _Block_object_dispose(v39, 8);
  if (!v25)
  {
    if (v34)
    {
      FigCFDictionaryGetBooleanIfPresent();
      *(_DWORD *)(v4 + 32) = 2;
      DistributedCenter = CFNotificationCenterGetDistributedCenter();
      CFNotificationCenterAddObserver(DistributedCenter, v2, (CFNotificationCallback)pa_handleNotification, CFSTR("com.apple.stevenote.AudioDataValues"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
      v25 = 0;
      goto LABEL_30;
    }
    LODWORD(cf) = 0;
    v36[0] = OS_LOG_TYPE_DEFAULT;
    v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v31 = cf;
    if (os_log_type_enabled(v30, v36[0]))
      v32 = v31;
    else
      v32 = v31 & 0xFFFFFFFE;
    if (v32)
    {
      LODWORD(v39[0]) = 136315394;
      *(_QWORD *)((char *)v39 + 4) = "pa_startInternal";
      WORD2(v39[1]) = 1024;
      *(_DWORD *)((char *)&v39[1] + 6) = 463;
      _os_log_send_and_compose_impl();
    }
    goto LABEL_45;
  }
  LODWORD(cf) = 0;
  v36[0] = OS_LOG_TYPE_DEFAULT;
  v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  v28 = cf;
  if (os_log_type_enabled(v27, v36[0]))
    v29 = v28;
  else
    v29 = v28 & 0xFFFFFFFE;
  if (v29)
  {
    LODWORD(v39[0]) = 136315650;
    *(_QWORD *)((char *)v39 + 4) = "pa_startInternal";
    WORD2(v39[1]) = 1024;
    *(_DWORD *)((char *)&v39[1] + 6) = 462;
    WORD1(v39[2]) = 1024;
    HIDWORD(v39[2]) = v25;
    _os_log_send_and_compose_impl();
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_30:
  if (v34)
    CFRelease(v34);
  if (v25)
    pa_cleanup(v2);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24) = v25;
}

void pa_handleNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v7;
  _QWORD v8[6];

  v7 = *(NSObject **)CMBaseObjectGetDerivedStorage();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = __pa_handleNotification_block_invoke;
  v8[3] = &__block_descriptor_tmp_20_0;
  v8[4] = a2;
  v8[5] = a5;
  dispatch_sync(v7, v8);
}

intptr_t __pa_copySinkProperty_block_invoke(uint64_t a1, int a2, CFTypeRef cf)
{
  CFTypeRef v5;

  if (!a2)
  {
    if (cf)
      v5 = CFRetain(cf);
    else
      v5 = 0;
    **(_QWORD **)(a1 + 40) = v5;
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 48) + 8));
}

void __pa_handleNotification_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CMTime v3;
  uint64_t v4;
  int v5;
  CMSampleBufferRef sbuf;
  CMSampleTimingInfo sampleTimingArray;
  CMSampleBufferRef sampleBufferOut;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 40);
  sbuf = 0;
  v5 = 0;
  v4 = 0;
  memset(&v3, 0, sizeof(v3));
  if (*(_DWORD *)(CMBaseObjectGetDerivedStorage() + 32) == 2)
  {
    if (v1)
      FigCFDictionaryGetInt32IfPresent();
    LODWORD(sampleTimingArray.duration.value) = 0;
    LOBYTE(sampleBufferOut) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (sbuf)
    CFRelease(sbuf);
}

void __pa_stop_block_invoke(uint64_t a1)
{
  uint64_t v1;
  const void *v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(const void **)(a1 + 40);
  *(_DWORD *)(v1 + 32) = 0;
  pa_cleanup(v2);
}

uint64_t __pa_suspend_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t (*v4)(uint64_t, const __CFString *, _QWORD, _QWORD);

  v1 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v1 + 32) = 1;
  v2 = *(_QWORD *)(v1 + 16);
  result = CMBaseObjectGetVTable();
  v4 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, _QWORD))(*(_QWORD *)(result + 16) + 56);
  if (v4)
    return v4(v2, CFSTR("clearScreen"), *MEMORY[0x1E0C9AE50], 0);
  return result;
}

uint64_t __pa_resume_block_invoke(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 40);
  if (*(_DWORD *)(v1 + 32) == 1)
    *(_DWORD *)(v1 + 32) = 2;
  else
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = -12070;
  return result;
}

uint64_t FigCaptionRendererTTMLRegionCreate(_QWORD *a1)
{
  uint64_t v2;
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  CFTypeRef v12;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  *a1 = 0;
  *(_QWORD *)&v14 = 0;
  MEMORY[0x19402F294](&FigCaptionRendererTTMLRegionGetClassID_sRegisterFigCaptionRendererTTMLRegionBaseTypeOnce, RegisterFigCaptionRendererTTMLRegionBaseType);
  v2 = CMDerivedObjectCreate();
  if (!(_DWORD)v2)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v16 = 0;
    FigCaptionRendererNodeCreate(&v16);
    v4 = v16;
    *(_QWORD *)DerivedStorage = v16;
    FigCaptionRendererNodeProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      v6 = *(_QWORD *)(ProtocolVTable + 16);
      if (v6)
      {
        v7 = *(void (**)(uint64_t, uint64_t))(v6 + 216);
        if (v7)
          v7(v4, 1);
      }
    }
    v8 = *(_QWORD *)DerivedStorage;
    FigCaptionRendererNodeProtocolGetProtocolID();
    v9 = CMBaseObjectGetProtocolVTable();
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 16);
      if (v10)
      {
        v11 = *(void (**)(uint64_t, uint64_t))(v10 + 232);
        if (v11)
          v11(v8, 1);
      }
    }
    FigGeometryDimensionMake();
    FigGeometryDimensionMake();
    FigGeometrySizeMake();
    *(_OWORD *)(DerivedStorage + 176) = v14;
    *(_OWORD *)(DerivedStorage + 192) = v15;
    v12 = (CFTypeRef)*MEMORY[0x1E0CA2D48];
    if (*MEMORY[0x1E0CA2D48])
      v12 = CFRetain(v12);
    *(_QWORD *)(DerivedStorage + 152) = v12;
    *a1 = 0;
  }
  return v2;
}

uint64_t FigCaptionRendererTTMLRegionSetColor(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  CFTypeRef v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
    v4 = CFRetain(a2);
  else
    v4 = 0;
  *(_QWORD *)(DerivedStorage + 72) = v4;
  return 0;
}

uint64_t FigCaptionRendererTTMLRegionSetInvisible(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 144) = *MEMORY[0x1E0C9AE50] == a2;
  return 0;
}

uint64_t FigCaptionRendererTTMLRegionGetInvisible(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  _QWORD *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = (_QWORD *)MEMORY[0x1E0C9AE50];
  if (!*(_BYTE *)(DerivedStorage + 144))
    v4 = (_QWORD *)MEMORY[0x1E0C9AE40];
  *a2 = *v4;
  return 0;
}

uint64_t FigCaptionRendererTTMLRegionSetWidth(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 80) = a2;
  *(_QWORD *)(DerivedStorage + 88) = a3;
  return 0;
}

uint64_t FigCaptionRendererTTMLRegionSetHeight(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 96) = a2;
  *(_QWORD *)(DerivedStorage + 104) = a3;
  return 0;
}

uint64_t FigCaptionRendererTTMLRegionSetPositionX(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 112) = a2;
  *(_QWORD *)(DerivedStorage + 120) = a3;
  return 0;
}

uint64_t FigCaptionRendererTTMLRegionSetPositionY(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 128) = a2;
  *(_QWORD *)(DerivedStorage + 136) = a3;
  return 0;
}

uint64_t FigCaptionRendererTTMLRegionSetShowBackground(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(const void **)(DerivedStorage + 152);
  *(_QWORD *)(DerivedStorage + 152) = a2;
  if (a2)
    CFRetain(a2);
  if (v4)
    CFRelease(v4);
  return 0;
}

uint64_t FigCaptionRendererTTMLRegionSetWritingMode(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(const void **)(DerivedStorage + 160);
  *(_QWORD *)(DerivedStorage + 160) = a2;
  if (a2)
    CFRetain(a2);
  if (v4)
    CFRelease(v4);
  return 0;
}

uint64_t FigCaptionRendererTTMLRegionGetWritingMode(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
    *a2 = *(_QWORD *)(DerivedStorage + 160);
  return 0;
}

uint64_t FigCaptionRendererTTMLRegionSetCellResolution(uint64_t a1, _OWORD *a2)
{
  uint64_t DerivedStorage;
  __int128 v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = a2[1];
  *(_OWORD *)(DerivedStorage + 176) = *a2;
  *(_OWORD *)(DerivedStorage + 192) = v4;
  return 0;
}

uint64_t FigCaptionRendererTTMLRegionGetCellResolution(uint64_t a1, _OWORD *a2)
{
  uint64_t DerivedStorage;
  __int128 v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v4 = *(_OWORD *)(DerivedStorage + 192);
    *a2 = *(_OWORD *)(DerivedStorage + 176);
    a2[1] = v4;
  }
  return 0;
}

uint64_t FigCaptionRendererTTMLRegionSetClipOverflow(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 145) = *MEMORY[0x1E0C9AE50] == a2;
  return 0;
}

uint64_t FigCaptionRendererTTMLRegionSetDisplayAlignment(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(const void **)(DerivedStorage + 168);
  *(_QWORD *)(DerivedStorage + 168) = a2;
  if (a2)
    CFRetain(a2);
  if (v4)
    CFRelease(v4);
  return 0;
}

uint64_t FigCaptionRendererTTMLRegionSetDisplayAspectRatio(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 208) = a2;
  return 0;
}

void FigCaptionRendererTTMLRegionFinalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 72);
  if (v1)
    CFRelease(v1);
  v2 = *(const void **)(DerivedStorage + 24);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(DerivedStorage + 152);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(DerivedStorage + 160);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(DerivedStorage + 168);
  if (v5)
    CFRelease(v5);
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
}

__CFString *FigCaptionRendererTTMLRegionCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererTTMLRegion: <%p>"), a1);
  return Mutable;
}

__CFString *FigCaptionRendererTTMLRegion_FigCaptionRendererBaseProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererTTMLRegion <FigCaptionRendererBaseProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererBaseProtocol_GetClassName(uint64_t a1, _QWORD *a2)
{
  *a2 = "FigCaptionRendererTTMLRegion";
  return 0;
}

__CFString *FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererTTMLRegion <FigCaptionRendererNodeProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_SetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_GetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_GetChildren(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 24);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_HasChildNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t ProtocolVTable;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  v5 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v7 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v7)
    return 4294954508;
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  if (v8)
    return v8(v5, a2, a3);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_AddChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, char **);
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  char *__s1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  __s1 = 0;
  FigCaptionRendererBaseProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable || (v5 = *(_QWORD *)(ProtocolVTable + 16)) == 0)
  {
    v13 = 4294954508;
LABEL_11:
    FigSignalErrorAt();
    return v13;
  }
  v6 = *(uint64_t (**)(uint64_t, char **))(v5 + 8);
  if (!v6)
  {
    v13 = 4294954514;
    goto LABEL_11;
  }
  v7 = v6(a2, &__s1);
  if ((_DWORD)v7)
  {
    v13 = v7;
    goto LABEL_11;
  }
  v8 = strcmp(__s1, "FigCaptionRendererTTMLRegion");
  v9 = *(_QWORD *)(DerivedStorage + 160);
  if (v8)
  {
    FigCaptionRendererCaptionProtocolGetProtocolID();
    v10 = CMBaseObjectGetProtocolVTable();
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 16);
      if (v11)
      {
        v12 = *(void (**)(uint64_t, uint64_t))(v11 + 112);
        if (v12)
          v12(a2, v9);
      }
    }
  }
  else
  {
    FigCaptionRendererTTMLRegionSetWritingMode(a2, *(const void **)(DerivedStorage + 160));
  }
  v15 = *(_QWORD *)DerivedStorage;
  FigCaptionRendererNodeProtocolGetProtocolID();
  v16 = CMBaseObjectGetProtocolVTable();
  if (!v16)
    return 4294954508;
  v17 = *(_QWORD *)(v16 + 16);
  if (!v17)
    return 4294954508;
  v18 = *(uint64_t (**)(uint64_t, uint64_t))(v17 + 40);
  if (v18)
    return v18(v15, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_RemoveChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_RemovelAllChildrenNodes()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 56);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_SetViewport(double a1, double a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t ProtocolVTable;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, double, double, double, double);

  v8 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v10 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v10)
    return 4294954508;
  v11 = *(uint64_t (**)(uint64_t, double, double, double, double))(v10 + 64);
  if (v11)
    return v11(v8, a1, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_GetViewport(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 72);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_SetFCRBounds(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _OWORD *);
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[4];

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v8 = *a2;
  v9 = a2[1];
  v10 = a2[2];
  v11 = a2[3];
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, _OWORD *))(v5 + 80);
  if (!v6)
    return 4294954514;
  v12[0] = v8;
  v12[1] = v9;
  v12[2] = v10;
  v12[3] = v11;
  return v6(v3, v12);
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_GetFCRBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 88);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_SetCGBounds(double a1, double a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t ProtocolVTable;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, double, double, double, double);

  v8 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v10 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v10)
    return 4294954508;
  v11 = *(uint64_t (**)(uint64_t, double, double, double, double))(v10 + 96);
  if (v11)
    return v11(v8, a1, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_GetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 104);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_SetCGSize(double a1, double a2)
{
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, double, double);

  v4 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v6 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v6)
    return 4294954508;
  v7 = *(uint64_t (**)(uint64_t, double, double))(v6 + 112);
  if (v7)
    return v7(v4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_GetCGSize(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable
    && (v5 = *(_QWORD *)(ProtocolVTable + 16)) != 0
    && (v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 120)) != 0)
  {
    return v6(v3, a2);
  }
  else
  {
    return 4294954508;
  }
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_SetCGOrigin(double a1, double a2)
{
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, double, double);

  v4 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v6 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v6)
    return 4294954508;
  v7 = *(uint64_t (**)(uint64_t, double, double))(v6 + 128);
  if (v7)
    return v7(v4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_GetCGOrigin(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 136);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_SetPaddings(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t ProtocolVTable;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v15 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v15)
    return 4294954508;
  v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 144);
  if (v16)
    return v16(v13, a2, a3, a4, a5, a6, a7);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_GetInsetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 152);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_PurgeImageCache()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 160);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_SetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 168);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_GetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 176);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_GetImageCacheWidth(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 184);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_GetImageCacheHeight(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 192);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_AllocateImageBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 200);
  if (v10)
    return v10(v7, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_GetImageBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 208);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_SetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 216);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_GetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 224);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_SetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 232);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_GetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 240);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_HasActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 248);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_SetZOrder(double a1)
{
  uint64_t v2;
  uint64_t ProtocolVTable;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, double);

  v2 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v4 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v4)
    return 4294954508;
  v5 = *(uint64_t (**)(uint64_t, double))(v4 + 256);
  if (v5)
    return v5(v2, a1);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_GetZOrder(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 264);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_ResetNodeTree()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 272);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_Draw(const void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t DerivedStorage;
  CGSize v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  void (*v10)(const void *, _OWORD *);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(const void *, _OWORD *);
  const __CFString *v14;
  _BOOL4 v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(const void *, CGRect *);
  CGSize size;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(const void *, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(const void *, void **);
  const __CFString *v29;
  CGColorSpace *v30;
  CGColorSpace *v31;
  CGContext *v32;
  CGContext *v33;
  __int128 v34;
  CGColorSpace *v35;
  CGColor *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(const void *, CGAffineTransform *);
  CGSize v40;
  CGImageRef Image;
  CGImage *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(const void *, CGImage *);
  uint64_t v46;
  uint64_t v47;
  void (*v48)(const void *, CGAffineTransform *);
  const void *Value;
  double d;
  CGSize v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(const void *, CGRect *);
  double MidY;
  CGFloat v56;
  CGFloat v57;
  double c;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(const void *, double, double);
  double MidX;
  double v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(const void *, double, double);
  uint64_t v67;
  uint64_t v68;
  void (*v69)(const void *, CGRect *);
  CGFloat x;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(const void *, _QWORD);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  CGSize v80;
  CGPoint v81;
  void *data;
  CGRect v83;
  _OWORD v84[2];
  _OWORD v85[2];
  CGAffineTransform v86;
  uint64_t v87;
  CGRect v88;
  CGRect v89;
  CGRect v90;
  CGRect v91;

  v87 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
  v85[0] = *MEMORY[0x1E0C9D628];
  v85[1] = v7;
  v80 = v7;
  v81 = (CGPoint)v85[0];
  v84[0] = v85[0];
  v84[1] = v7;
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v9 = *(_QWORD *)(ProtocolVTable + 16);
    if (v9)
    {
      v10 = *(void (**)(const void *, _OWORD *))(v9 + 72);
      if (v10)
        v10(a1, v85);
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  v11 = CMBaseObjectGetProtocolVTable();
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 16);
    if (v12)
    {
      v13 = *(void (**)(const void *, _OWORD *))(v12 + 104);
      if (v13)
        v13(a1, v84);
    }
  }
  v14 = *(const __CFString **)(DerivedStorage + 152);
  if (!v14)
    goto LABEL_12;
  if (CFStringCompare(v14, (CFStringRef)*MEMORY[0x1E0CA2D40], 1uLL) == kCFCompareEqualTo)
  {
    v16 = (_BYTE *)(DerivedStorage + 216);
    if (*(_BYTE *)(DerivedStorage + 216))
      goto LABEL_18;
    goto LABEL_17;
  }
  if (CFStringCompare(*(CFStringRef *)(DerivedStorage + 152), (CFStringRef)*MEMORY[0x1E0CA2D48], 1uLL))
    goto LABEL_12;
  v86.a = 0.0;
  FigCaptionRendererNodeProtocolGetProtocolID();
  v37 = CMBaseObjectGetProtocolVTable();
  if (v37)
  {
    v38 = *(_QWORD *)(v37 + 16);
    if (v38)
    {
      v39 = *(void (**)(const void *, CGAffineTransform *))(v38 + 24);
      if (v39)
        v39(a1, &v86);
    }
  }
  if (*(_QWORD *)&v86.a)
    v15 = CFArrayGetCount(*(CFArrayRef *)&v86.a) > 0;
  else
LABEL_12:
    v15 = 0;
  v16 = (_BYTE *)(DerivedStorage + 216);
  if (*(_BYTE *)(DerivedStorage + 216))
    goto LABEL_18;
  if (!v15)
    goto LABEL_50;
LABEL_17:
  if (!*(_QWORD *)(DerivedStorage + 72))
    goto LABEL_50;
LABEL_18:
  v83.origin = v81;
  v83.size = v80;
  FigCaptionRendererNodeProtocolGetProtocolID();
  v17 = CMBaseObjectGetProtocolVTable();
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 16);
    if (v18)
    {
      v19 = *(void (**)(const void *, CGRect *))(v18 + 104);
      if (v19)
        v19(a1, &v83);
    }
  }
  size = v83.size;
  v21 = *(unsigned int *)(a2 + 332);
  FigCaptionRendererNodeProtocolGetProtocolID();
  v22 = CMBaseObjectGetProtocolVTable();
  if (!v22)
    return 4294954508;
  v23 = *(_QWORD *)(v22 + 16);
  if (!v23)
    return 4294954508;
  v24 = *(uint64_t (**)(const void *, uint64_t, uint64_t, uint64_t))(v23 + 200);
  if (!v24)
    return 4294954514;
  LODWORD(v3) = vcvtpd_s64_f64(size.width);
  LODWORD(v2) = vcvtpd_s64_f64(size.height);
  v25 = v24(a1, v3, v2, v21);
  if (!(_DWORD)v25)
  {
    data = 0;
    FigCaptionRendererNodeProtocolGetProtocolID();
    v26 = CMBaseObjectGetProtocolVTable();
    if (v26)
    {
      v27 = *(_QWORD *)(v26 + 16);
      if (v27)
      {
        v28 = *(void (**)(const void *, void **))(v27 + 208);
        if (v28)
          v28(a1, &data);
      }
    }
    if (!data)
    {
      FigSignalErrorAt();
      return 0;
    }
    v29 = (const __CFString *)*MEMORY[0x1E0C9DA10];
    v30 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
    if (!v30)
      return FigSignalErrorAt();
    v31 = v30;
    v32 = CGBitmapContextCreate(data, *(_DWORD *)(a2 + 332) * (int)v3, *(_DWORD *)(a2 + 332) * (int)v2, 8uLL, 4 * *(_DWORD *)(a2 + 332) * (int)v3, v30, 0x4001u);
    if (!v32)
    {
      v78 = FigSignalErrorAt();
      CGColorSpaceRelease(v31);
      return v78;
    }
    v33 = v32;
    CGContextScaleCTM(v32, (double)*(int *)(a2 + 332), (double)*(int *)(a2 + 332));
    v34 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
    *(_OWORD *)&v86.a = *MEMORY[0x1E0C9BAA8];
    *(_OWORD *)&v86.c = v34;
    *(_OWORD *)&v86.tx = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
    CGContextSetTextMatrix(v33, &v86);
    CGColorSpaceRelease(v31);
    if (*v16)
    {
      v35 = CGColorSpaceCreateWithName(v29);
      *(_OWORD *)&v86.a = xmmword_1932FCF98;
      *(_OWORD *)&v86.c = unk_1932FCFA8;
      v36 = CGColorCreate(v35, &v86.a);
    }
    else
    {
      v35 = 0;
      v36 = *(CGColor **)(DerivedStorage + 72);
    }
    CGContextSaveGState(v33);
    v40 = v83.size;
    CGContextSetShadowWithColor(v33, *MEMORY[0x1E0C9D820], 0.0, 0);
    CGContextSetFillColorWithColor(v33, v36);
    v88.origin.x = 0.0;
    v88.origin.y = 0.0;
    v88.size = v40;
    CGContextFillRect(v33, v88);
    CGContextRestoreGState(v33);
    if (*v16)
    {
      CGColorRelease(v36);
      CFRelease(v35);
    }
    Image = CGBitmapContextCreateImage(v33);
    if (!Image)
    {
      v78 = FigSignalErrorAt();
      CGContextRelease(v33);
      return v78;
    }
    v42 = Image;
    FigCaptionRendererNodeProtocolGetProtocolID();
    v43 = CMBaseObjectGetProtocolVTable();
    if (v43)
    {
      v44 = *(_QWORD *)(v43 + 16);
      if (v44)
      {
        v45 = *(void (**)(const void *, CGImage *))(v44 + 168);
        if (v45)
          v45(a1, v42);
      }
    }
    CGImageRelease(v42);
    CGContextRelease(v33);
LABEL_50:
    if (*(_QWORD *)(a2 + 296))
    {
      *(CGPoint *)&v86.a = v81;
      *(CGSize *)&v86.c = v80;
      FigCaptionRendererNodeProtocolGetProtocolID();
      v46 = CMBaseObjectGetProtocolVTable();
      if (v46)
      {
        v47 = *(_QWORD *)(v46 + 16);
        if (v47)
        {
          v48 = *(void (**)(const void *, CGAffineTransform *))(v47 + 104);
          if (v48)
            v48(a1, &v86);
        }
      }
      Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 296), a1);
      if (*(_DWORD *)(a2 + 328))
      {
        d = v86.d;
      }
      else
      {
        v51 = *(CGSize *)(MEMORY[0x1E0C9D648] + 16);
        v83.origin = (CGPoint)*MEMORY[0x1E0C9D648];
        v83.size = v51;
        FigCaptionRendererNodeProtocolGetProtocolID();
        v52 = CMBaseObjectGetProtocolVTable();
        if (v52)
        {
          v53 = *(_QWORD *)(v52 + 16);
          if (v53)
          {
            v54 = *(void (**)(const void *, CGRect *))(v53 + 72);
            if (v54)
              v54(a1, &v83);
          }
        }
        v89.origin.x = v86.a;
        v89.origin.y = v86.b;
        v89.size.width = v86.c;
        v89.size.height = v86.d;
        MidY = CGRectGetMidY(v89);
        v56 = CGRectGetMidY(v83);
        v57 = v56 + v56 - MidY;
        d = v86.d;
        v86.b = v57 + v86.d * -0.5;
      }
      c = v86.c;
      FigCaptionRendererOutputNodeProtocolGetProtocolID();
      v59 = CMBaseObjectGetProtocolVTable();
      if (v59)
      {
        v60 = *(_QWORD *)(v59 + 16);
        if (v60)
        {
          v61 = *(void (**)(const void *, double, double))(v60 + 88);
          if (v61)
            v61(Value, c, d);
        }
      }
      v90.origin.x = v86.a;
      v90.origin.y = v86.b;
      v90.size.width = v86.c;
      v90.size.height = v86.d;
      MidX = CGRectGetMidX(v90);
      v91.origin.x = v86.a;
      v91.origin.y = v86.b;
      v91.size.width = v86.c;
      v91.size.height = v86.d;
      v63 = CGRectGetMidY(v91);
      FigCaptionRendererOutputNodeProtocolGetProtocolID();
      v64 = CMBaseObjectGetProtocolVTable();
      if (v64)
      {
        v65 = *(_QWORD *)(v64 + 16);
        if (v65)
        {
          v66 = *(void (**)(const void *, double, double))(v65 + 72);
          if (v66)
            v66(Value, MidX, v63);
        }
      }
      v83.origin.x = 0.0;
      FigCaptionRendererNodeProtocolGetProtocolID();
      v67 = CMBaseObjectGetProtocolVTable();
      if (v67
        && (v68 = *(_QWORD *)(v67 + 16)) != 0
        && (v69 = *(void (**)(const void *, CGRect *))(v68 + 176)) != 0)
      {
        v69(a1, &v83);
        x = v83.origin.x;
      }
      else
      {
        x = 0.0;
      }
      FigCaptionRendererOutputNodeProtocolGetProtocolID();
      v71 = CMBaseObjectGetProtocolVTable();
      if (v71)
      {
        v72 = *(_QWORD *)(v71 + 16);
        if (v72)
        {
          v73 = *(void (**)(const void *, _QWORD))(v72 + 120);
          if (v73)
            v73(Value, *(_QWORD *)&x);
        }
      }
    }
    v74 = *(_QWORD *)DerivedStorage;
    FigCaptionRendererNodeProtocolGetProtocolID();
    v75 = CMBaseObjectGetProtocolVTable();
    if (v75)
    {
      v76 = *(_QWORD *)(v75 + 16);
      if (v76)
      {
        v77 = *(uint64_t (**)(uint64_t, uint64_t))(v76 + 280);
        if (v77)
          return v77(v74, a2);
        return 4294954514;
      }
    }
    return 4294954508;
  }
  return v25;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_Layout(uint64_t a1, float64x2_t *a2)
{
  uint64_t DerivedStorage;
  uint64_t *v5;
  char v6;
  double v7;
  char v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v14;
  double v15;
  char v16;
  double v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  char v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  BOOL v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  uint64_t v60;
  uint64_t ProtocolVTable;
  uint64_t v62;
  void (*v63)(uint64_t, __int128 *);
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, __int128 *);
  double v68;
  double v69;
  double v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, CFArrayRef *);
  CFIndex Count;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, __int128 *);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(uint64_t, __int128 *);
  double v85;
  double v86;
  const __CFString *v87;
  const __CFString *v88;
  const __CFString *v89;
  const void *v90;
  unint64_t v91;
  double v92;
  double v93;
  const void *ValueAtIndex;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(const void *, __int128 *);
  const __CFString *v98;
  double v99;
  double v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(const void *, char **);
  uint64_t v104;
  uint64_t v105;
  void (*v106)(const void *, double, double);
  uint64_t v107;
  uint64_t v108;
  void (*v109)(const void *, uint64_t);
  uint64_t v110;
  uint64_t v111;
  void (*v112)(const void *, CFDictionaryRef *);
  const void *Value;
  const void *v114;
  double v115;
  int v116;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double x;
  double y;
  double width;
  double height;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(uint64_t, double, double, double, double);
  double v132;
  CFTypeRef v133;
  CFTypeRef v134;
  CFTypeRef v135;
  CFTypeRef v136;
  CFTypeRef cf2[2];
  const void *cf2a;
  __int128 v139;
  __int128 v140;
  CFDictionaryRef theDict;
  char *__s1;
  __int128 v143;
  __int128 v144;
  double v145[3];
  CFArrayRef theArray;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  CGRect v151;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v6 = 0;
  v7 = -1.0;
  v8 = 0;
  v9 = v5[11];
  if ((int)v9 > 1886679839)
  {
    if ((_DWORD)v9 == 1886679840 || (_DWORD)v9 == 1886920736)
    {
      FigGeometryDimensionGetCGFloat();
      v7 = v14;
      v6 = 0;
    }
  }
  else if ((_DWORD)v9 == 622862368)
  {
    FigGeometryDimensionGetCGFloat();
    v6 = 1;
    v7 = v15 / 100.0;
  }
  else if ((_DWORD)v9 == 1667591276)
  {
    FigGeometryDimensionGetCGFloat();
    v11 = v10;
    FigGeometryDimensionGetCGFloat();
    v6 = 1;
    v7 = v11 / v12;
  }
  v16 = FCRRectNull;
  v17 = -1.0;
  v18 = v5[13];
  if ((int)v18 > 1886679839)
  {
    if ((_DWORD)v18 == 1886679840 || (_DWORD)v18 == 1886920736)
    {
      FigGeometryDimensionGetCGFloat();
      v17 = v22;
      v8 = 0;
    }
  }
  else if ((_DWORD)v18 == 622862368)
  {
    FigGeometryDimensionGetCGFloat();
    v8 = 1;
    v17 = v23 / 100.0;
  }
  else if ((_DWORD)v18 == 1667591276)
  {
    FigGeometryDimensionGetCGFloat();
    v20 = v19;
    FigGeometryDimensionGetCGFloat();
    v8 = 1;
    v17 = v20 / v21;
  }
  v24 = 0;
  v25 = -1.0;
  v26 = v5[15];
  if ((int)v26 > 1886679839)
  {
    if ((_DWORD)v26 == 1886679840 || (_DWORD)v26 == 1886920736)
    {
      FigGeometryDimensionGetCGFloat();
      v25 = v30;
      v16 = 0;
    }
  }
  else if ((_DWORD)v26 == 622862368)
  {
    FigGeometryDimensionGetCGFloat();
    if (v44 / 100.0 < 0.0 || (FigGeometryDimensionGetCGFloat(), v25 = 1.0, v45 / 100.0 <= 1.0))
    {
      FigGeometryDimensionGetCGFloat();
      if (v56 / 100.0 >= 0.0)
      {
        FigGeometryDimensionGetCGFloat();
        v16 = 1;
        v25 = v132 / 100.0;
      }
      else
      {
        v16 = 1;
        v25 = 0.0;
      }
    }
    else
    {
      v16 = 1;
    }
  }
  else if ((_DWORD)v26 == 1667591276)
  {
    FigGeometryDimensionGetCGFloat();
    v28 = v27;
    FigGeometryDimensionGetCGFloat();
    v16 = 1;
    v25 = v28 / v29;
  }
  v31 = -1.0;
  v32 = v5[17];
  if ((int)v32 > 1886679839)
  {
    if ((_DWORD)v32 == 1886679840 || (_DWORD)v32 == 1886920736)
    {
      FigGeometryDimensionGetCGFloat();
      v31 = v43;
      v24 = 0;
    }
  }
  else
  {
    if ((_DWORD)v32 == 622862368)
    {
      v46 = (_DWORD)v18 == 1886920736 || (_DWORD)v18 == 1886679840;
      v31 = 1.0;
      if (v46)
        v47 = 1.0;
      else
        v47 = v17;
      FigGeometryDimensionGetCGFloat();
      v49 = v48 / -100.0 + 1.0;
      v50 = 0.0;
      if (v49 >= 0.0)
      {
        FigGeometryDimensionGetCGFloat();
        v50 = v51 / -100.0 + 1.0;
      }
      if (v50 - v47 <= 1.0)
      {
        FigGeometryDimensionGetCGFloat();
        v53 = v52 / -100.0 + 1.0;
        v54 = 0.0;
        if (v53 >= 0.0)
        {
          FigGeometryDimensionGetCGFloat();
          v54 = v55 / -100.0 + 1.0;
        }
        v31 = v54 - v47;
      }
      goto LABEL_55;
    }
    if ((_DWORD)v32 == 1667591276)
    {
      FigGeometryDimensionGetCGFloat();
      v34 = v33;
      FigGeometryDimensionGetCGFloat();
      v36 = v34 / v35;
      v31 = 1.0;
      if (1.0 - v36 < 0.0
        || (FigGeometryDimensionGetCGFloat(), v38 = v37, FigGeometryDimensionGetCGFloat(), 1.0 - v38 / v39 <= 1.0))
      {
        FigGeometryDimensionGetCGFloat();
        v41 = v40;
        FigGeometryDimensionGetCGFloat();
        if (1.0 - v41 / v42 >= 0.0)
        {
          FigGeometryDimensionGetCGFloat();
          v58 = v57;
          FigGeometryDimensionGetCGFloat();
          v31 = 1.0 - v58 / v59;
        }
        else
        {
          v31 = 0.0;
        }
      }
LABEL_55:
      v24 = 1;
    }
  }
  v60 = *v5;
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v62 = *(_QWORD *)(ProtocolVTable + 16);
    if (v62)
    {
      v63 = *(void (**)(uint64_t, __int128 *))(v62 + 80);
      if (v63)
      {
        LOBYTE(v147) = v16;
        *(_DWORD *)((char *)&v147 + 1) = 0;
        DWORD1(v147) = 0;
        *((double *)&v147 + 1) = v25;
        LOBYTE(v148) = v24;
        *(_DWORD *)((char *)&v148 + 1) = 0;
        DWORD1(v148) = 0;
        *((double *)&v148 + 1) = v31;
        LOBYTE(v149) = v6;
        *(_DWORD *)((char *)&v149 + 1) = 0;
        DWORD1(v149) = 0;
        *((double *)&v149 + 1) = v7;
        LOBYTE(v150) = v8;
        DWORD1(v150) = 0;
        *(_DWORD *)((char *)&v150 + 1) = 0;
        *((double *)&v150 + 1) = v17;
        v63(v60, &v147);
      }
    }
  }
  v64 = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v147 = FCRRectNull;
  v148 = *(_OWORD *)&byte_1932FABC0;
  v149 = xmmword_1932FABD0;
  v150 = *(_OWORD *)&byte_1932FABE0;
  FigCaptionRendererNodeProtocolGetProtocolID();
  v65 = CMBaseObjectGetProtocolVTable();
  if (v65)
  {
    v66 = *(_QWORD *)(v65 + 16);
    if (v66)
    {
      v67 = *(void (**)(uint64_t, __int128 *))(v66 + 88);
      if (v67)
        v67(a1, &v147);
    }
  }
  v68 = FCRGetVideoPresentationBounds(a2[23].f64[0], a2[23].f64[1], a2[21].f64[0], a2[21].f64[1], a2[22].f64[0], a2[22].f64[1]);
  if (*((double *)&v149 + 1) != -1.0)
  {
    v118 = v68 + *((double *)&v147 + 1) * v70;
    v119 = v68 + *((double *)&v147 + 1);
    if ((_BYTE)v147)
      v119 = v118;
    v120 = v69 + *((double *)&v148 + 1) * v71;
    v121 = v69 + *((double *)&v148 + 1);
    if ((_BYTE)v148)
      v121 = v120;
    if (!(_BYTE)v149)
      v70 = 1.0;
    v122 = *((double *)&v149 + 1) * v70;
    if (!(_BYTE)v150)
      v71 = 1.0;
    v123 = *((double *)&v150 + 1) * v71;
    v151 = CGRectIntegral(*(CGRect *)&v119);
    x = v151.origin.x;
    y = v151.origin.y;
    width = v151.size.width;
    height = v151.size.height;
    v128 = *v64;
    FigCaptionRendererNodeProtocolGetProtocolID();
    v129 = CMBaseObjectGetProtocolVTable();
    if (v129)
    {
      v130 = *(_QWORD *)(v129 + 16);
      if (v130)
      {
        v131 = *(void (**)(uint64_t, double, double, double, double))(v130 + 96);
        if (v131)
          v131(v128, x, y, width, height);
      }
    }
  }
  theArray = 0;
  v72 = *(_QWORD *)DerivedStorage;
  FigCaptionRendererNodeProtocolGetProtocolID();
  v73 = CMBaseObjectGetProtocolVTable();
  if (v73)
  {
    v74 = *(_QWORD *)(v73 + 16);
    if (v74)
    {
      v75 = *(void (**)(uint64_t, CFArrayRef *))(v74 + 24);
      if (v75)
        v75(v72, &theArray);
    }
  }
  Count = CFArrayGetCount(theArray);
  *(_OWORD *)cf2 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  v139 = *MEMORY[0x1E0C9D628];
  v147 = *MEMORY[0x1E0C9D628];
  v148 = *(_OWORD *)cf2;
  v77 = *(_QWORD *)DerivedStorage;
  FigCaptionRendererNodeProtocolGetProtocolID();
  v78 = CMBaseObjectGetProtocolVTable();
  if (v78)
  {
    v79 = *(_QWORD *)(v78 + 16);
    if (v79)
    {
      v80 = *(void (**)(uint64_t, __int128 *))(v79 + 104);
      if (v80)
        v80(v77, &v147);
    }
  }
  v144 = v139;
  *(_OWORD *)v145 = *(_OWORD *)cf2;
  v81 = *(_QWORD *)DerivedStorage;
  FigCaptionRendererNodeProtocolGetProtocolID();
  v82 = CMBaseObjectGetProtocolVTable();
  if (v82)
  {
    v83 = *(_QWORD *)(v82 + 16);
    if (v83)
    {
      v84 = *(void (**)(uint64_t, __int128 *))(v83 + 152);
      if (v84)
        v84(v81, &v144);
    }
  }
  if (Count >= 1)
  {
    v85 = *(double *)&v144 - *(double *)&v147;
    v86 = *((double *)&v144 + 1) - *((double *)&v147 + 1);
    v87 = (const __CFString *)*MEMORY[0x1E0CA2BB8];
    v88 = (const __CFString *)*MEMORY[0x1E0CA2BC8];
    v89 = (const __CFString *)*MEMORY[0x1E0CA2BC0];
    v90 = (const void *)*MEMORY[0x1E0CA2958];
    cf2a = (const void *)*MEMORY[0x1E0CA2948];
    v136 = (CFTypeRef)*MEMORY[0x1E0CA2928];
    v135 = (CFTypeRef)*MEMORY[0x1E0CA2938];
    v134 = (CFTypeRef)*MEMORY[0x1E0CA2930];
    v91 = Count + 1;
    v140 = *MEMORY[0x1E0C9D820];
    v92 = *((double *)&v144 + 1) - *((double *)&v147 + 1);
    v93 = *(double *)&v144 - *(double *)&v147;
    v133 = (CFTypeRef)*MEMORY[0x1E0CA2940];
    do
    {
      v143 = v140;
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v91 - 2);
      FigCaptionRendererNodeProtocolGetProtocolID();
      v95 = CMBaseObjectGetProtocolVTable();
      if (v95)
      {
        v96 = *(_QWORD *)(v95 + 16);
        if (v96)
        {
          v97 = *(void (**)(const void *, __int128 *))(v96 + 120);
          if (v97)
            v97(ValueAtIndex, &v143);
        }
      }
      v98 = *(const __CFString **)(DerivedStorage + 168);
      if (v98)
      {
        v99 = v86;
        if (CFStringCompare(v98, v87, 1uLL))
        {
          if (CFStringCompare(*(CFStringRef *)(DerivedStorage + 168), v88, 1uLL) == kCFCompareEqualTo)
          {
            v100 = (v145[1] - *((double *)&v143 + 1)) * 0.5;
            goto LABEL_90;
          }
          v99 = v92;
          if (CFStringCompare(*(CFStringRef *)(DerivedStorage + 168), v89, 1uLL) == kCFCompareEqualTo)
          {
            v100 = v145[1] - *((double *)&v143 + 1);
LABEL_90:
            v99 = v86 + v100;
          }
        }
      }
      else
      {
        v99 = v92;
      }
      __s1 = 0;
      FigCaptionRendererBaseProtocolGetProtocolID();
      v101 = CMBaseObjectGetProtocolVTable();
      if (v101)
      {
        v102 = *(_QWORD *)(v101 + 16);
        if (v102)
        {
          v103 = *(void (**)(const void *, char **))(v102 + 8);
          if (v103)
            v103(ValueAtIndex, &__s1);
        }
      }
      if (!__s1 || strcmp(__s1, "FigCaptionRendererCaption"))
        goto LABEL_97;
      theDict = 0;
      FigCaptionRendererCaptionProtocolGetProtocolID();
      v110 = CMBaseObjectGetProtocolVTable();
      if (v110)
      {
        v111 = *(_QWORD *)(v110 + 16);
        if (v111)
        {
          v112 = *(void (**)(const void *, CFDictionaryRef *))(v111 + 16);
          if (v112)
            v112(ValueAtIndex, &theDict);
        }
      }
      if (!theDict)
        goto LABEL_97;
      Value = CFDictionaryGetValue(theDict, v90);
      if (!Value)
        goto LABEL_97;
      v114 = Value;
      v93 = v85;
      if (CFEqual(Value, cf2a))
        goto LABEL_97;
      if (CFEqual(v114, v136))
      {
        v115 = v145[0];
LABEL_116:
        v93 = v85 + v115 - *(double *)&v143;
        goto LABEL_97;
      }
      if (CFEqual(v114, v135))
      {
        v115 = v145[0];
LABEL_119:
        v93 = v85 + (v115 - *(double *)&v143) * 0.5;
        goto LABEL_97;
      }
      v93 = v85;
      if (!CFEqual(v114, v134))
      {
        v116 = CFEqual(v114, v133);
        v115 = v145[0];
        if (v116)
          goto LABEL_116;
        goto LABEL_119;
      }
LABEL_97:
      FigCaptionRendererNodeProtocolGetProtocolID();
      v104 = CMBaseObjectGetProtocolVTable();
      if (v104)
      {
        v105 = *(_QWORD *)(v104 + 16);
        if (v105)
        {
          v106 = *(void (**)(const void *, double, double))(v105 + 128);
          if (v106)
            v106(ValueAtIndex, v93, v99);
        }
      }
      FigCaptionRendererNodeProtocolGetProtocolID();
      v107 = CMBaseObjectGetProtocolVTable();
      if (v107)
      {
        v108 = *(_QWORD *)(v107 + 16);
        if (v108)
        {
          v109 = *(void (**)(const void *, uint64_t))(v108 + 232);
          if (v109)
            v109(ValueAtIndex, 1);
        }
      }
      v92 = v99 + *((double *)&v143 + 1);
      --v91;
    }
    while (v91 > 1);
  }
  FigCaptionRendererLayoutDecouple_ApplyDecouplingAndSafeRegion(a1, a2);
  return 0;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_ExecActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 296);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_Compose(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  const __CFDictionary *v5;
  const void *Value;
  uint64_t ProtocolVTable;
  uint64_t v8;
  void (*v9)(const void *, _QWORD);
  CGPath *Mutable;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(const void *, char *);
  uint64_t v16;
  uint64_t v17;
  void (*v18)(const void *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  void (*v21)(const void *, __int16 *);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(const void *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  void (*v27)(const void *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  CGSize v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(const void *, CGRect *);
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(const void *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  void (*v42)(const void *, CFArrayRef *);
  CFIndex Count;
  CFIndex v44;
  CFIndex v45;
  const void *ValueAtIndex;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(const void *, CGRect *);
  CGSize v51;
  CGPoint v52;
  CFArrayRef theArray;
  CGRect v54;
  __int16 v55;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 144) == 1)
  {
    v5 = *(const __CFDictionary **)(a2 + 296);
    if (v5)
    {
      Value = CFDictionaryGetValue(v5, a1);
      FigCaptionRendererOutputNodeProtocolGetProtocolID();
      ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable)
      {
        v8 = *(_QWORD *)(ProtocolVTable + 16);
        if (v8)
        {
          v9 = *(void (**)(const void *, _QWORD))(v8 + 120);
          if (v9)
            v9(Value, 0);
        }
      }
    }
    Mutable = 0;
    v11 = 0;
  }
  else
  {
    v12 = DerivedStorage;
    v55 = 0;
    FigCaptionRendererNodeProtocolGetProtocolID();
    v13 = CMBaseObjectGetProtocolVTable();
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 16);
      if (v14)
      {
        v15 = *(void (**)(const void *, char *))(v14 + 248);
        if (v15)
        {
          v15(a1, (char *)&v55 + 1);
          if (HIBYTE(v55))
          {
            FigCaptionRendererNodeProtocolGetProtocolID();
            v16 = CMBaseObjectGetProtocolVTable();
            if (v16)
            {
              v17 = *(_QWORD *)(v16 + 16);
              if (v17)
              {
                v18 = *(void (**)(const void *, uint64_t))(v17 + 296);
                if (v18)
                  v18(a1, a2);
              }
            }
          }
        }
      }
    }
    FigCaptionRendererNodeProtocolGetProtocolID();
    v19 = CMBaseObjectGetProtocolVTable();
    if (v19)
    {
      v20 = *(_QWORD *)(v19 + 16);
      if (v20)
      {
        v21 = *(void (**)(const void *, __int16 *))(v20 + 240);
        if (v21)
          v21(a1, &v55);
      }
    }
    if ((_BYTE)v55)
    {
      FigCaptionRendererNodeProtocolGetProtocolID();
      v22 = CMBaseObjectGetProtocolVTable();
      if (v22)
      {
        v23 = *(_QWORD *)(v22 + 16);
        if (v23)
        {
          v24 = *(void (**)(const void *, uint64_t))(v23 + 288);
          if (v24)
            v24(a1, a2);
        }
      }
    }
    FigCaptionRendererNodeProtocolGetProtocolID();
    v25 = CMBaseObjectGetProtocolVTable();
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 16);
      if (v26)
      {
        v27 = *(void (**)(const void *, uint64_t))(v26 + 280);
        if (v27)
          v27(a1, a2);
      }
    }
    v28 = *(_QWORD *)v12;
    FigCaptionRendererNodeProtocolGetProtocolID();
    v29 = CMBaseObjectGetProtocolVTable();
    if (v29 && (v30 = *(_QWORD *)(v29 + 16)) != 0)
    {
      v31 = *(uint64_t (**)(uint64_t, uint64_t))(v30 + 304);
      if (v31)
        v11 = v31(v28, a2);
      else
        v11 = 4294954514;
    }
    else
    {
      v11 = 4294954508;
    }
    if (!*(_BYTE *)(v12 + 145))
      goto LABEL_57;
    if (*(_QWORD *)(a2 + 296))
    {
      v32 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
      v54.origin = (CGPoint)*MEMORY[0x1E0C9D628];
      v54.size = v32;
      FigCaptionRendererNodeProtocolGetProtocolID();
      v33 = CMBaseObjectGetProtocolVTable();
      if (v33)
      {
        v34 = *(_QWORD *)(v33 + 16);
        if (v34)
        {
          v35 = *(void (**)(const void *, CGRect *))(v34 + 104);
          if (v35)
            v35(a1, &v54);
        }
      }
      v36 = CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 296), a1);
      FigCaptionRendererOutputNodeProtocolGetProtocolID();
      v37 = CMBaseObjectGetProtocolVTable();
      if (v37)
      {
        v38 = *(_QWORD *)(v37 + 16);
        if (v38)
        {
          v39 = *(void (**)(const void *, uint64_t))(v38 + 104);
          if (v39)
            v39(v36, 1);
        }
      }
    }
    if (*(_QWORD *)(a2 + 320))
    {
      Mutable = CGPathCreateMutable();
      theArray = 0;
      FigCaptionRendererNodeProtocolGetProtocolID();
      v40 = CMBaseObjectGetProtocolVTable();
      if (v40)
      {
        v41 = *(_QWORD *)(v40 + 16);
        if (v41)
        {
          v42 = *(void (**)(const void *, CFArrayRef *))(v41 + 24);
          if (v42)
          {
            v42(a1, &theArray);
            if (theArray)
            {
              Count = CFArrayGetCount(theArray);
              if (Count >= 1)
              {
                v44 = Count;
                v45 = 0;
                v51 = *(CGSize *)(MEMORY[0x1E0C9D648] + 16);
                v52 = (CGPoint)*MEMORY[0x1E0C9D648];
                do
                {
                  ValueAtIndex = CFArrayGetValueAtIndex(theArray, v45);
                  v54.origin = v52;
                  v54.size = v51;
                  FigCaptionRendererNodeProtocolGetProtocolID();
                  v47 = CMBaseObjectGetProtocolVTable();
                  if (v47)
                  {
                    v48 = *(_QWORD *)(v47 + 16);
                    if (v48)
                    {
                      v49 = *(void (**)(const void *, CGRect *))(v48 + 104);
                      if (v49)
                        v49(ValueAtIndex, &v54);
                    }
                  }
                  CGPathAddRect(Mutable, 0, v54);
                  ++v45;
                }
                while (v44 != v45);
              }
              CGContextAddPath(*(CGContextRef *)(a2 + 320), Mutable);
              CGContextClip(*(CGContextRef *)(a2 + 320));
            }
          }
        }
      }
    }
    else
    {
LABEL_57:
      Mutable = 0;
    }
  }
  CGPathRelease(Mutable);
  return v11;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_OnChildUpdateDisplayRequest(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  void (*v4)(_OWORD *, uint64_t);
  uint64_t v5;
  __int128 v6;
  _OWORD v8[2];
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(void (**)(_OWORD *, uint64_t))(DerivedStorage + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(DerivedStorage + 8);
    v6 = *(_OWORD *)(a2 + 16);
    v8[0] = *(_OWORD *)a2;
    v8[1] = v6;
    v9 = *(_QWORD *)(a2 + 32);
    v4(v8, v5);
  }
  return 0;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_AddAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 320);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_RemoveAllActions()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 328);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_SetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 336);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_GetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 344);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_SelectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, double, double);

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, double, double))(v9 + 352);
  if (v10)
    return v10(v7, a4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_UnselectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, double, double);

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, double, double))(v9 + 360);
  if (v10)
    return v10(v7, a4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_IsSelected(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 368);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_BeginScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 376);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererNodeProtocol_EndScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 384);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

__CFString *FigCaptionRendererTTMLRegion_FigCaptionRendererRegionProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererTTMLRegion <FigCaptionRendererRegionProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererRegionProtocol_SetRegionID(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(const void **)(DerivedStorage + 24);
  *(_QWORD *)(DerivedStorage + 24) = a2;
  if (a2)
    CFRetain(a2);
  if (v4)
    CFRelease(v4);
  return 0;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererRegionProtocol_GetRegionID(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 24);
  return 0;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererRegionProtocol_SetWidth(uint64_t a1, int a2)
{
  *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 32) = a2;
  return 0;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererRegionProtocol_GetWidth(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 32);
  return 0;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererRegionProtocol_SetLines(uint64_t a1, int a2)
{
  *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 36) = a2;
  return 0;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererRegionProtocol_GetLines(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 36);
  return 0;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererRegionProtocol_SetRegionAnchor(double a1, double a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 40) = a1;
  *(double *)(DerivedStorage + 48) = a2;
  return 0;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererRegionProtocol_GetRegionAnchor(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 40);
  return 0;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererRegionProtocol_SetViewportAnchor(double a1, double a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 56) = a1;
  *(double *)(DerivedStorage + 64) = a2;
  return 0;
}

uint64_t FigCaptionRendererTTMLRegion_FigCaptionRendererRegionProtocol_GetViewportAnchor(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 56);
  return 0;
}

uint64_t RegisterFigCaptionRendererTTMLRegionBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFTypeRef FigCaptionRendererTTMLRegionBaseCopyFormattingDesc()
{
  return CFRetain(CFSTR("[FigCaptionRendererTTMLRegion]"));
}

uint64_t FigVideoCompositionProcessorGetTypeID()
{
  MEMORY[0x19402F294](&sRegisterFigVideoCompositionProcessorTypeOnce, RegisterFigVideoCompositionProcessorType);
  return sFigVideoCompositionProcessorTypeID;
}

uint64_t RegisterFigVideoCompositionProcessorType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigVideoCompositionProcessorTypeID = result;
  return result;
}

uint64_t FigVideoCompositionProcessorCreateWithImageQueue(const __CFAllocator *a1, char a2, const void *a3, CMTime *a4, int a5, void *a6, CMTime *a7, CMTime *a8, const void *a9, uint64_t *a10)
{
  const __CFArray *v17;
  uint64_t v18;
  CMTime v20;
  CMTime v21;
  CMTime v22;
  void *values;

  values = a6;
  v17 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 1, MEMORY[0x1E0C9B378]);
  v22 = *a4;
  v21 = *a7;
  v20 = *a8;
  v18 = FigVideoCompositionProcessorCreateWithImageQueueArray(a1, a2, a3, &v22, a5, v17, &v21, &v20, a9, a10);
  if (v17)
    CFRelease(v17);
  return v18;
}

uint64_t FigVideoCompositionProcessorCreateWithImageQueueArray(const __CFAllocator *a1, char a2, const void *a3, CMTime *a4, int a5, const __CFArray *a6, CMTime *a7, CMTime *a8, const void *a9, uint64_t *a10)
{
  const void *UInt32;
  CMTimeEpoch v16;
  uint64_t Instance;
  uint64_t Mutable;
  const __CFAllocator *v19;
  uint64_t v20;
  uint64_t v21;
  CFTypeRef v22;
  CFTypeRef v23;
  CFTypeRef v24;
  CFTypeRef v25;
  CFTypeRef v26;
  CFTypeRef v27;
  CFTypeRef v28;
  int v29;
  CFNumberRef v30;
  uint64_t FigBaseObject;
  void (*v32)(uint64_t, const __CFString *, CFNumberRef);
  uint64_t v33;
  void (*v34)(uint64_t, const __CFString *, _QWORD);
  uint64_t (*v35)(const void *, void (*)(uint64_t), uint64_t);
  __int128 v40;
  CMTime time2;
  CMTime time1;
  int valuePtr;
  CFNumberRef number;
  CFTypeRef cf;
  CFTypeRef v46;
  CFTypeRef v47;
  CFTypeRef v48;
  CFTypeRef v49;
  CFTypeRef v50;
  CFTypeRef v51;
  CFTypeRef v52[2];

  v51 = 0;
  v52[0] = 0;
  v49 = 0;
  v50 = 0;
  v47 = 0;
  v48 = 0;
  cf = 0;
  v46 = 0;
  number = 0;
  valuePtr = 0;
  fig_note_initialize_category_with_default_work_cf();
  UInt32 = a3;
  fig_note_initialize_category_with_default_work_cf();
  if (!a3)
  {
    v20 = FigSignalErrorAt();
LABEL_42:
    Instance = 0;
    goto LABEL_44;
  }
  if ((a4->flags & 0x1D) != 1)
    goto LABEL_24;
  time1 = *a4;
  v40 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&time2.value = *MEMORY[0x1E0CA2E68];
  v16 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  time2.epoch = v16;
  if (CMTimeCompare(&time1, &time2) <= 0)
    goto LABEL_24;
  if (!a6)
    goto LABEL_24;
  if (!CFArrayGetCount(a6))
    goto LABEL_24;
  if ((a8->flags & 0x1D) != 1)
    goto LABEL_24;
  time1 = *a8;
  *(_OWORD *)&time2.value = v40;
  time2.epoch = v16;
  if (CMTimeCompare(&time1, &time2) < 0
    || (a7->flags & 0x1D) != 1
    || (time1 = *a7, *(_OWORD *)&time2.value = v40, time2.epoch = v16, CMTimeCompare(&time1, &time2) <= 0)
    || (time1 = *a7, time2 = *a8, CMTimeCompare(&time1, &time2) < 0)
    || !a9)
  {
LABEL_24:
    v20 = FigSignalErrorAt();
    Instance = 0;
LABEL_25:
    UInt32 = 0;
    goto LABEL_44;
  }
  MEMORY[0x19402F294](&sRegisterFigVideoCompositionProcessorTypeOnce, RegisterFigVideoCompositionProcessorType);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    Mutable = FigSignalErrorAt();
LABEL_70:
    v20 = Mutable;
    goto LABEL_25;
  }
  Mutable = FigVCPPreprocessParametersCreateMutable((uint64_t)a1, (uint64_t *)&v49);
  if ((_DWORD)Mutable)
    goto LABEL_70;
  Mutable = FigVCPSourceArrayCreateEmpty(a1, Instance, (uint64_t *)v52);
  if ((_DWORD)Mutable)
    goto LABEL_70;
  Mutable = FigVCPSourceArrayCreateEmpty(a1, Instance, (uint64_t *)&v51);
  if ((_DWORD)Mutable)
    goto LABEL_70;
  time1 = *a4;
  Mutable = FigVCPTimingCreate(a1, (uint64_t)&time1, a5, a2 & 2, (a2 & 1) == 0, Instance, (uint64_t *)&v50);
  if ((_DWORD)Mutable)
    goto LABEL_70;
  time1 = *a7;
  time2 = *a8;
  Mutable = FigVCPOutputCreate((uint64_t)a1, a6, &time1, &time2, Instance, &v48);
  if ((_DWORD)Mutable)
    goto LABEL_70;
  Mutable = FigVCPOutputConformerCreate((uint64_t)a1, Instance, &v47);
  if ((_DWORD)Mutable)
    goto LABEL_70;
  Mutable = FigVCPCompositorHostCreate(a1, a3, Instance, &v46);
  if ((_DWORD)Mutable)
    goto LABEL_70;
  v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = FigVCPCompositorHostCopyProperty((uint64_t)v46, CFSTR("VideoCompositionProcessor_SourcePixelBufferAttributes"), *MEMORY[0x1E0C9AE00], (uint64_t)&cf);
  if ((_DWORD)Mutable)
    goto LABEL_70;
  Mutable = FigVCPPreprocessParametersSetProperty((uint64_t)v49, CFSTR("VideoCompositionProcessor_SourcePixelBufferAttributes"), (uint64_t)cf);
  if ((_DWORD)Mutable)
    goto LABEL_70;
  Mutable = FigVCPCompositorHostCopyProperty((uint64_t)v46, CFSTR("SourceColorConformanceCapabilityLevel"), (uint64_t)v19, (uint64_t)&number);
  if ((_DWORD)Mutable)
    goto LABEL_70;
  CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
  UInt32 = (const void *)FigCFNumberCreateUInt32();
  v21 = FigVCPPreprocessParametersSetProperty((uint64_t)v49, CFSTR("FigVCPPreprocessParametersProperty_ColorConformanceLevel"), (uint64_t)UInt32);
  if ((_DWORD)v21)
    goto LABEL_67;
  *(_BYTE *)(Instance + 20) = 0;
  v23 = v51;
  v22 = v52[0];
  v51 = 0;
  v52[0] = 0;
  *(_QWORD *)(Instance + 32) = v22;
  *(_QWORD *)(Instance + 40) = v23;
  v25 = v49;
  v24 = v50;
  v49 = 0;
  v50 = 0;
  *(_QWORD *)(Instance + 24) = v25;
  v27 = v47;
  v26 = v48;
  v47 = 0;
  v48 = 0;
  *(_QWORD *)(Instance + 112) = v27;
  *(_QWORD *)(Instance + 120) = v26;
  v28 = v46;
  *(_QWORD *)(Instance + 96) = v24;
  *(_QWORD *)(Instance + 104) = v28;
  v46 = 0;
  if ((a2 & 4) == 0)
  {
    v29 = 1;
LABEL_31:
    *(_DWORD *)(Instance + 136) = v29;
    goto LABEL_32;
  }
  if (*(_DWORD *)(Instance + 136) != 3)
  {
    v29 = 3;
    goto LABEL_31;
  }
LABEL_32:
  LODWORD(time1.value) = 0;
  v30 = CFNumberCreate(v19, kCFNumberSInt32Type, &time1);
  FigBaseObject = FigActivitySchedulerGetFigBaseObject(a9);
  v32 = *(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v32)
    v32(FigBaseObject, CFSTR("ClientPID"), v30);
  CFRelease(v30);
  v33 = FigActivitySchedulerGetFigBaseObject(a9);
  v34 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v34)
    v34(v33, CFSTR("ThrottleForBackground"), *MEMORY[0x1E0C9AE40]);
  v35 = *(uint64_t (**)(const void *, void (*)(uint64_t), uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 8);
  if (!v35)
  {
    v20 = 4294954514;
    goto LABEL_44;
  }
  v21 = v35(a9, videoprocessor_processUntilHighWaterMet, Instance);
  if (!(_DWORD)v21)
  {
    *(_QWORD *)(Instance + 128) = CFRetain(a9);
    *(_QWORD *)(Instance + 216) = 0x7FFFFFFFLL;
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    v21 = FigVCPCompositorHostSetOutputCallback(*(_QWORD *)(Instance + 104), (uint64_t)videoprocessor_frameCompleteCallback);
    if (!(_DWORD)v21)
    {
      v21 = FigVCPCompositorHostSetCompletePrerollCallback(*(_QWORD *)(Instance + 104), (uint64_t)videoprocessor_completePrerollCallback);
      if (!(_DWORD)v21)
      {
        v20 = FigVCPCompositorHostSetDidReachEndOfOutputCallback(*(_QWORD *)(Instance + 104), (uint64_t)videoprocessor_didReachEndOfOutputCallback);
        if ((_DWORD)v20)
          goto LABEL_44;
        *a10 = Instance;
        goto LABEL_42;
      }
    }
  }
LABEL_67:
  v20 = v21;
LABEL_44:
  if (cf)
    CFRelease(cf);
  if (number)
    CFRelease(number);
  if (UInt32)
    CFRelease(UInt32);
  if (v46)
    CFRelease(v46);
  if (v47)
    CFRelease(v47);
  if (v48)
    CFRelease(v48);
  if (v49)
    CFRelease(v49);
  if (v50)
    CFRelease(v50);
  if (v52[0])
    CFRelease(v52[0]);
  if (v51)
    CFRelease(v51);
  if (Instance)
    CFRelease((CFTypeRef)Instance);
  return v20;
}

void videoprocessor_processUntilHighWaterMet(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  CFTypeRef v3;
  CFTypeRef v4;
  CFTypeRef v5;
  int64_t Count;
  CFTypeRef *v7;
  _DWORD *v8;
  _DWORD *v9;
  const __CFArray *v10;
  _QWORD *v11;
  int SourceTrackIDForFrameTiming;
  const void *SourceWithTrackID;
  int v14;
  int CanAccomodateFrame;
  int updated;
  uint64_t v17;
  int32_t v18;
  float Rate;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  double Seconds;
  double v23;
  double v24;
  int v25;
  BOOL v26;
  int v27;
  BOOL v28;
  CFIndex v29;
  char v30;
  const void *SourceAtIndex;
  const __CFArray *v32;
  int TrackID;
  int v34;
  CFIndex v35;
  char v36;
  const void *v37;
  const __CFArray *v38;
  int v39;
  CMTimeValue value;
  const __CFArray *v41;
  int v42;
  uint64_t v43;
  CFAllocatorRef v44;
  int v45;
  CFIndex v46;
  const void *v47;
  const CFDictionaryKeyCallBacks *v48;
  const CFDictionaryValueCallBacks *v49;
  CFIndex v50;
  const void *v51;
  CFTypeRef v52;
  const __CFArray *v53;
  int v54;
  const void *SInt32;
  int v56;
  CFIndex v57;
  const void *v58;
  const void *v59;
  const __CFArray *v60;
  int v61;
  CFTypeRef v62;
  CFTypeRef v63;
  uint64_t PendingFramesCount;
  char v65;
  uint64_t v66;
  uint64_t v67;
  CFTypeRef v68;
  char v69;
  uint64_t v70;
  const __CFArray *v71;
  const __CFArray *v72;
  uint64_t v73;
  CFTypeRef *v74;
  const void *v75;
  uint64_t i;
  const void *v77;
  void *v78;
  const void *v79;
  _DWORD *v80;
  int32_t newTimescale;
  uint64_t *v82;
  CMTimeEpoch v83;
  CMTimeFlags v84;
  CFTypeRef *v85;
  _BOOL4 v86;
  CFTypeRef *v87;
  _QWORD *v88;
  OpaqueCMTimebase *timebase;
  __n128 *v90;
  _BOOL4 HasReachedTheEnd;
  uint64_t v92;
  _DWORD *v93;
  CFMutableDictionaryRef v94;
  CFMutableDictionaryRef Mutable;
  uint64_t v96;
  const __CFAllocator *allocator;
  _DWORD *v98;
  int v99;
  _BYTE v100[80];
  __int128 v101;
  _OWORD v102[2];
  CMTime v103;
  CMTime v104;
  _BYTE time1[32];
  __int128 v106;
  CMTime v107;
  uint64_t v108;
  __int128 v109;
  CFTypeRef v110;
  CFTypeRef v111;
  CFTypeRef cf;
  CFTypeRef v113;
  CFTypeRef v114;
  CMTime rhs;
  CMTime time2;
  CMTime v117;
  uint64_t v118;
  int v119;
  CMTimeValue v120;
  CMTimeScale timescale;
  uint64_t v122;

  v1 = a1;
  v122 = *MEMORY[0x1E0C80C00];
  memset(v102, 0, sizeof(v102));
  v101 = 0u;
  memset(v100, 0, sizeof(v100));
  FigVCPTimingCopyProcessingState(*(_QWORD *)(a1 + 96), (uint64_t)v100);
  MEMORY[0x19402EEEC](*(_QWORD *)(v1 + 168));
  if (!*(_BYTE *)(v1 + 160))
  {
    MEMORY[0x19402EF04](*(_QWORD *)(v1 + 168));
    goto LABEL_227;
  }
  v113 = 0;
  v114 = 0;
  cf = 0;
  v111 = 0;
  v110 = 0;
  v2 = *(_QWORD *)(v1 + 96);
  v86 = FigVCPTimingUsesTimebase(v2);
  v88 = videoprocessor_loadAndRetainAtomically(v1, (CFTypeRef *)(v1 + 88));
  v87 = (CFTypeRef *)(v1 + 120);
  v3 = videoprocessor_loadAndRetainAtomically(v1, (CFTypeRef *)(v1 + 120));
  v82 = (uint64_t *)(v1 + 32);
  v4 = videoprocessor_loadAndRetainAtomically(v1, (CFTypeRef *)(v1 + 32));
  v5 = videoprocessor_loadAndRetainAtomically(v1, (CFTypeRef *)(v1 + 40));
  timebase = (OpaqueCMTimebase *)FigVCPTimingCopyTimebase(v2);
  v99 = *(unsigned __int8 *)(v1 + 2256);
  Count = (int64_t)FigVCPSourceArrayGetCount((uint64_t)v4);
  v7 = (CFTypeRef *)malloc_type_calloc(Count, 8uLL, 0x2004093837F09uLL);
  if (!v7)
  {
    CanAccomodateFrame = FigSignalErrorAt();
    v98 = 0;
    v94 = 0;
    Mutable = 0;
    SInt32 = 0;
    v11 = 0;
    v78 = 0;
    goto LABEL_199;
  }
  v90 = (__n128 *)v2;
  v8 = malloc_type_calloc(Count, 4uLL, 0x100004052888210uLL);
  v93 = v8;
  if (!v8)
  {
    CanAccomodateFrame = FigSignalErrorAt();
    v98 = 0;
    v94 = 0;
    Mutable = 0;
    SInt32 = 0;
    v11 = 0;
    goto LABEL_186;
  }
  v9 = v8;
  v10 = FigVCPSourceArrayGetCount((uint64_t)v5);
  v11 = malloc_type_calloc((size_t)v10, 8uLL, 0x2004093837F09uLL);
  v96 = (uint64_t)v10;
  if (!v11 || (v98 = malloc_type_calloc((size_t)v10, 4uLL, 0x100004052888210uLL)) == 0)
  {
    CanAccomodateFrame = FigSignalErrorAt();
    v98 = 0;
    goto LABEL_9;
  }
  if (BYTE14(v102[1]))
  {
    SourceTrackIDForFrameTiming = FigVCPTimingGetSourceTrackIDForFrameTiming((uint64_t)v90);
    SourceWithTrackID = FigVCPSourceArrayGetSourceWithTrackID((uint64_t)v4, SourceTrackIDForFrameTiming);
    v14 = FigVCPProcessingStateSetCurrentTimeWithSourceFrameTiming((uint64_t)v100, (uint64_t)SourceWithTrackID);
    if (v14)
    {
      CanAccomodateFrame = v14;
LABEL_9:
      v94 = 0;
      Mutable = 0;
LABEL_178:
      SInt32 = 0;
      goto LABEL_186;
    }
  }
  if (!*(_BYTE *)(v1 + 160))
  {
    v94 = 0;
    Mutable = 0;
    SInt32 = 0;
    CanAccomodateFrame = 0;
    goto LABEL_186;
  }
  v94 = 0;
  Mutable = 0;
  v84 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
  v83 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v80 = (_DWORD *)(v1 + 240);
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v85 = (CFTypeRef *)(v1 + 144);
  v79 = (const void *)*MEMORY[0x1E0C9AE50];
  v92 = v1;
  while (1)
  {
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (v111)
    {
      CFRelease(v111);
      v111 = 0;
    }
    if (v110)
    {
      CFRelease(v110);
      v110 = 0;
    }
    if (BYTE14(v102[1]))
    {
LABEL_176:
      SInt32 = 0;
      CanAccomodateFrame = 0;
      goto LABEL_186;
    }
    HasReachedTheEnd = FigVCPProcessingStateHasReachedTheEnd((uint64_t)v100);
    if (HasReachedTheEnd)
    {
      if (v86)
        goto LABEL_179;
      if (FigVCPCompositorHostIsAcceptingRequest(*(_QWORD *)(v1 + 104)))
      {
        FigVCPCompositorHostStopAcceptingRequest(*(_QWORD *)(v1 + 104));
        videoprocessor_setUpcomingImageInfo(v1);
      }
      if (FigVCPSourceArrayNoMoreImagesOnAnySource((uint64_t)v4))
      {
LABEL_179:
        SInt32 = 0;
        CanAccomodateFrame = 0;
        *(_BYTE *)(v1 + 160) = 0;
        goto LABEL_186;
      }
    }
    if (*(_BYTE *)(v1 + 20))
    {
      updated = videoprocessor_updateCoreAnimationThrottling(v1, *(unsigned __int8 *)(v1 + 20));
      if (updated)
        goto LABEL_184;
    }
    if ((_BYTE)v101)
    {
      v109 = 0uLL;
      v108 = 0;
      FigVCPTimingGetOutputFrameDuration(v90, (__n128 *)&v108);
      v107 = *(CMTime *)((char *)v102 + 4);
      v17 = v108;
      v18 = v109;
      v118 = *(_QWORD *)((char *)&v109 + 4);
      v119 = HIDWORD(v109);
      Rate = CMTimebaseGetRate(timebase);
      memset(&v117, 0, sizeof(v117));
      CMTimebaseGetTime(&v117, timebase);
      v120 = *MEMORY[0x1E0CA2E18];
      timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
      newTimescale = v18;
      if (Rate <= 0.0 || (*(CMTime *)time1 = v117, time2 = v107, CMTimeCompare((CMTime *)time1, &time2) < 1))
      {
        epoch = v83;
        flags = v84;
        if (Rate >= 0.0)
          goto LABEL_34;
        *(CMTime *)time1 = v117;
        time2 = v107;
        epoch = v83;
        flags = v84;
        if ((CMTimeCompare((CMTime *)time1, &time2) & 0x80000000) == 0)
          goto LABEL_34;
        *(CMTime *)time1 = v117;
        CMTimeConvertScale(&time2, (CMTime *)time1, newTimescale, kCMTimeRoundingMethod_RoundTowardNegativeInfinity);
        flags = time2.flags;
        timescale = time2.timescale;
        v120 = time2.value + (time2.value % v17 + v17) / v17 * v17 - (time2.value % v17 + v17);
        epoch = time2.epoch;
        *(CMTime *)time1 = v107;
        Seconds = CMTimeGetSeconds((CMTime *)time1);
        time2 = v107;
        rhs.value = v120;
        rhs.timescale = timescale;
        rhs.flags = flags;
        rhs.epoch = epoch;
      }
      else
      {
        *(CMTime *)time1 = v117;
        CMTimeConvertScale(&time2, (CMTime *)time1, v18, kCMTimeRoundingMethod_RoundTowardPositiveInfinity);
        flags = time2.flags;
        timescale = time2.timescale;
        v120 = ((v17 - time2.value) % v17 + v17) % v17 + time2.value;
        epoch = time2.epoch;
        *(CMTime *)time1 = v107;
        Seconds = CMTimeGetSeconds((CMTime *)time1);
        time2.value = v120;
        time2.timescale = timescale;
        time2.flags = flags;
        time2.epoch = epoch;
        rhs = v107;
      }
      CMTimeSubtract((CMTime *)time1, &time2, &rhs);
      v23 = CMTimeGetSeconds((CMTime *)time1);
      time2.value = v17;
      time2.timescale = newTimescale;
      *(_QWORD *)&time2.flags = v118;
      HIDWORD(time2.epoch) = v119;
      v24 = CMTimeGetSeconds(&time2);
      FigVCPTallyUpdateSkips(v80, Seconds, v23, v24);
LABEL_34:
      if ((flags & 1) != 0)
      {
        *(_QWORD *)((char *)v102 + 4) = v120;
        HIDWORD(v102[0]) = timescale;
        LODWORD(v102[1]) = flags;
        *(_QWORD *)((char *)&v102[1] + 4) = epoch;
      }
      v1 = v92;
    }
    if (!HasReachedTheEnd)
    {
      LOBYTE(rhs.value) = 0;
      memset(&v117, 0, sizeof(v117));
      time2 = *(CMTime *)((char *)v102 + 4);
      *(_OWORD *)time1 = *(_OWORD *)&v100[24];
      *(_OWORD *)&time1[16] = *(_OWORD *)&v100[40];
      v106 = *(_OWORD *)&v100[56];
      FigVCPGetFoldedTime(&time2, (uint64_t)time1, &v117);
      *(CMTime *)time1 = v117;
      v42 = FigVCPInstructionSourceCopyInstructionAtTime(v88, (uint64_t)time1, (BOOL *)&rhs, &cf);
      if (v42 == -12301)
      {
        if (BYTE12(v102[1]))
        {
          videoprocessor_sendSeekCompleteNotification();
          CanAccomodateFrame = 0;
          BYTE12(v102[1]) = 0;
        }
        else
        {
          CanAccomodateFrame = 0;
        }
        goto LABEL_178;
      }
      CanAccomodateFrame = v42;
      if (v42)
        goto LABEL_178;
      if (LOBYTE(rhs.value))
      {
        HIBYTE(v102[1]) = 1;
        *(_BYTE *)(v1 + 200) = 0;
      }
    }
    if (FigVCPOutputWasJustFlushed())
      HIBYTE(v102[1]) = 1;
    if (cf)
    {
      memset(&v117, 0, sizeof(v117));
      time2 = *(CMTime *)((char *)v102 + 4);
      *(_OWORD *)time1 = *(_OWORD *)&v100[24];
      *(_OWORD *)&time1[16] = *(_OWORD *)&v100[40];
      v106 = *(_OWORD *)&v100[56];
      FigVCPGetFoldedTime(&time2, (uint64_t)time1, &v117);
      *(CMTime *)time1 = v117;
      v25 = FigVideoCompositionInstructionCopyRequiredTrackIDArrayForTime(allocator, cf, (CMTime *)time1, (__CFArray **)&v111);
      if (v111)
        v26 = v25 == 0;
      else
        v26 = 0;
      if (!v26 && v111)
      {
        CFRelease(v111);
        v111 = 0;
      }
      *(CMTime *)time1 = v117;
      v27 = FigVideoCompositionInstructionCopyRequiredSampleDataTrackIDArrayForTime((int)allocator, cf, (uint64_t)time1, (const __CFArray **)&v110);
      if (v110)
        v28 = v27 == 0;
      else
        v28 = 0;
      if (!v28 && v110)
      {
        CFRelease(v110);
        v110 = 0;
      }
    }
    if ((uint64_t)FigVCPSourceArrayGetCount((uint64_t)v4) >= 1)
    {
      v29 = 0;
      v30 = 1;
      do
      {
        SourceAtIndex = FigVCPSourceArrayGetSourceAtIndex((uint64_t)v4, v29);
        LOBYTE(v117.value) = 0;
        v32 = (const __CFArray *)v111;
        TrackID = FigVCPSourceGetTrackID();
        if (videoprocessor_isTrackRequired(v32, TrackID))
        {
          LOBYTE(time2.value) = 0;
          *(_OWORD *)time1 = *(_OWORD *)((char *)v102 + 4);
          *(_QWORD *)&time1[16] = *(_QWORD *)((char *)&v102[1] + 4);
          v34 = FigVCPSourceCheckSampleAvailability((uint64_t)SourceAtIndex, *(unsigned int *)&v100[76], BYTE2(v101), (__int128 *)time1, (uint64_t)&v117, (uint64_t)&time2);
          if (v34)
            goto LABEL_180;
          if (!LOBYTE(time2.value))
            v30 = 0;
          if (LOBYTE(v117.value))
          {
            *(_OWORD *)time1 = *(_OWORD *)((char *)v102 + 4);
            *(_QWORD *)&time1[16] = *(_QWORD *)((char *)&v102[1] + 4);
            v34 = FigVCPSourceSetCurrentTime((uint64_t)SourceAtIndex, *(unsigned int *)&v100[76], (__int128 *)time1);
            if (v34)
            {
LABEL_180:
              CanAccomodateFrame = v34;
              SInt32 = 0;
              goto LABEL_182;
            }
          }
        }
        ++v29;
      }
      while (v29 < (uint64_t)FigVCPSourceArrayGetCount((uint64_t)v4));
      v26 = v30 == 0;
      v1 = v92;
      v9 = v93;
      if (v26)
        goto LABEL_176;
    }
    if ((uint64_t)FigVCPSourceArrayGetCount((uint64_t)v5) >= 1)
    {
      v35 = 0;
      v36 = 1;
      do
      {
        v37 = FigVCPSourceArrayGetSourceAtIndex((uint64_t)v5, v35);
        LOBYTE(v117.value) = 0;
        v38 = (const __CFArray *)v110;
        v39 = FigVCPSourceGetTrackID();
        if (v38 && videoprocessor_isTrackRequired(v38, v39))
        {
          LOBYTE(time2.value) = 0;
          *(_OWORD *)time1 = *(_OWORD *)((char *)v102 + 4);
          *(_QWORD *)&time1[16] = *(_QWORD *)((char *)&v102[1] + 4);
          v34 = FigVCPSourceCheckSampleAvailability((uint64_t)v37, *(unsigned int *)&v100[76], BYTE2(v101), (__int128 *)time1, (uint64_t)&v117, (uint64_t)&time2);
          if (v34)
            goto LABEL_180;
          if (!LOBYTE(time2.value))
            v36 = 0;
          if (LOBYTE(v117.value))
          {
            *(_OWORD *)time1 = *(_OWORD *)((char *)v102 + 4);
            *(_QWORD *)&time1[16] = *(_QWORD *)((char *)&v102[1] + 4);
            v34 = FigVCPSourceSetCurrentTime((uint64_t)v37, *(unsigned int *)&v100[76], (__int128 *)time1);
            if (v34)
              goto LABEL_180;
          }
        }
        ++v35;
      }
      while (v35 < (uint64_t)FigVCPSourceArrayGetCount((uint64_t)v5));
      v26 = v36 == 0;
      v1 = v92;
      v9 = v93;
      if (v26)
        goto LABEL_176;
    }
    if (!*(_BYTE *)(v1 + 200))
    {
      time2.value = 0;
      updated = FigVideoCompositionInstructionGetLayerCountExcludingBackground(cf, &time2.value);
      if (updated)
        goto LABEL_184;
      value = time2.value;
      *(_QWORD *)time1 = 0;
      v117.value = 0;
      if (v4)
        v41 = FigVCPSourceArrayGetCount((uint64_t)v4);
      else
        v41 = 0;
      if (!FigVCPCompositorHostDoesRequireDifferentSourcePixelBufferAttributesForMultiSource(*(_QWORD *)(v1 + 104))
        || ((v43 = *(_QWORD *)(v1 + 104), value > 1) || (uint64_t)v41 >= 2
          ? (v45 = FigVCPCompositorHostCopySourcePixelBufferAttributesForMultiSource(*(_QWORD *)(v1 + 104), time1))
          : (v44 = CFGetAllocator((CFTypeRef)v1),
             v45 = FigVCPCompositorHostCopyProperty(v43, CFSTR("VideoCompositionProcessor_SourcePixelBufferAttributes"), (uint64_t)v44, (uint64_t)time1)), v45))
      {
LABEL_98:
        if (*(_QWORD *)time1)
          CFRelease(*(CFTypeRef *)time1);
      }
      else if (*(_QWORD *)time1)
      {
        FigVCPPreprocessParametersSetProperty(*(_QWORD *)(v1 + 24), CFSTR("VideoCompositionProcessor_SourcePixelBufferAttributes"), *(uint64_t *)time1);
        if ((uint64_t)FigVCPSourceArrayGetCount((uint64_t)v4) >= 1)
        {
          v46 = 0;
          do
          {
            if (v117.value)
            {
              CFRelease((CFTypeRef)v117.value);
              v117.value = 0;
            }
            if (FigVCPPreprocessParametersCreateCopy((uint64_t)allocator, *(_QWORD *)(v1 + 24), &v117.value))break;
            v47 = FigVCPSourceArrayGetSourceAtIndex((uint64_t)v4, v46);
            FigVCPSourceSetPreprocessParameters((uint64_t)v47, (const void *)v117.value);
            if (v117.value)
            {
              CFRelease((CFTypeRef)v117.value);
              v117.value = 0;
            }
            ++v46;
          }
          while (v46 < (uint64_t)FigVCPSourceArrayGetCount((uint64_t)v4));
        }
        goto LABEL_98;
      }
      if (v117.value)
        CFRelease((CFTypeRef)v117.value);
      *(_BYTE *)(v1 + 200) = 1;
      v9 = v93;
    }
    if (v99)
    {
      if (v114)
      {
        CFRelease(v114);
        v114 = 0;
      }
      if (v113)
      {
        CFRelease(v113);
        v113 = 0;
      }
      if (Mutable)
        CFRelease(Mutable);
      if (v94)
        CFRelease(v94);
      v48 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
      v49 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
      Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v94 = CFDictionaryCreateMutable(allocator, 0, v48, v49);
    }
    if ((uint64_t)FigVCPSourceArrayGetCount((uint64_t)v4) >= 1)
      break;
LABEL_129:
    if ((uint64_t)FigVCPSourceArrayGetCount((uint64_t)v5) >= 1)
    {
      v57 = 0;
      do
      {
        v58 = FigVCPSourceArrayGetSourceAtIndex((uint64_t)v5, v57);
        v59 = (const void *)v11[v57];
        if (v59)
        {
          CFRelease(v59);
          v11[v57] = 0;
        }
        v98[v57] = FigVCPSourceGetTrackID();
        v60 = (const __CFArray *)v110;
        v61 = FigVCPSourceGetTrackID();
        if (v60 && videoprocessor_isTrackRequired(v60, v61))
        {
          *(_QWORD *)time1 = 0;
          if (v99)
          {
            FigVCPSourceGetTrackID();
            SInt32 = (const void *)FigCFNumberCreateSInt32();
            v56 = FigVCPSourceCopyTimedSampleBuffers((uint64_t)v58, *(unsigned int *)&v100[76], (uint64_t)&v113);
            if (v56)
              goto LABEL_181;
            FigCFDictionarySetValue();
            if (SInt32)
              CFRelease(SInt32);
            if (v113)
            {
              CFRelease(v113);
              v113 = 0;
            }
          }
          else
          {
            v34 = FigVCPSourceCopySampleBuffer((uint64_t)v58, (uint64_t)time1);
            if (v34)
              goto LABEL_180;
            v11[v57] = *(_QWORD *)time1;
          }
        }
        ++v57;
      }
      while (v57 < (uint64_t)FigVCPSourceArrayGetCount((uint64_t)v5));
    }
    v1 = v92;
    v62 = videoprocessor_loadAndRetainAtomically(v92, v85);
    if (v62)
    {
      CFRelease(v62);
      HIBYTE(v102[1]) = 1;
    }
    v63 = videoprocessor_loadAndRetainAtomically(v92, v87);
    PendingFramesCount = FigVCPCompositorHostGetPendingFramesCount();
    CanAccomodateFrame = FigVCPOutputAllOutputsCanAccomodateFrame((uint64_t)v63, PendingFramesCount);
    if (v63)
      CFRelease(v63);
    if (!CanAccomodateFrame)
      goto LABEL_185;
    if (!HasReachedTheEnd)
    {
      if (HIBYTE(v102[1])
        || FigVCPTimingRepeatIdenticalFrames((uint64_t)v90)
        || v79 == CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("ContainsTweening")))
      {
        v65 = 0;
      }
      else
      {
        if (BYTE12(v102[1]))
        {
          videoprocessor_sendSeekCompleteNotification();
          BYTE12(v102[1]) = 0;
        }
        if (v86
          && FigVCPSourceArrayNoMoreImagesOnAnySource(*v82)
          && videoprocessor_willCompositionInstructionContinueForever((const __CFDictionary *)cf, *(int *)&v100[76]))
        {
          goto LABEL_176;
        }
        ++*(_DWORD *)(v92 + 2252);
        v65 = 1;
      }
      v66 = *(_QWORD *)(v92 + 104);
      v117 = *(CMTime *)((char *)v102 + 4);
      time2 = *(CMTime *)v100;
      *(_OWORD *)time1 = *(_OWORD *)&v100[24];
      *(_OWORD *)&time1[16] = *(_OWORD *)&v100[40];
      v106 = *(_OWORD *)&v100[56];
      updated = FigVCPCompositorHostAnticipateRendering(v66, &v117, (uint64_t)&time2, *(int *)&v100[76], (__int128 *)time1);
      if (updated)
        goto LABEL_184;
      if ((v65 & 1) == 0)
      {
        HIBYTE(v102[1]) = 0;
        v67 = *(_QWORD *)(v92 + 104);
        v68 = cf;
        if (v99)
        {
          v117 = *(CMTime *)((char *)v102 + 4);
          *(_OWORD *)time1 = *(_OWORD *)&v100[24];
          *(_OWORD *)&time1[16] = *(_OWORD *)&v100[40];
          v106 = *(_OWORD *)&v100[56];
          FigVCPGetFoldedTime(&v117, (uint64_t)time1, &v104);
          *(_OWORD *)time1 = *(_OWORD *)((char *)v102 + 4);
          *(_QWORD *)&time1[16] = *(_QWORD *)((char *)&v102[1] + 4);
          updated = FigVCPCompositorHostPrepareToComposeFromWindow(v67, v68, (__int128 *)time1, (__int128 *)&v104.value, SBYTE13(v102[1]), *(int *)&v100[72], *(int *)&v100[76], Mutable, v94);
          if (updated)
            goto LABEL_184;
        }
        else
        {
          v117 = *(CMTime *)((char *)v102 + 4);
          *(_OWORD *)time1 = *(_OWORD *)&v100[24];
          *(_OWORD *)&time1[16] = *(_OWORD *)&v100[40];
          v106 = *(_OWORD *)&v100[56];
          FigVCPGetFoldedTime(&v117, (uint64_t)time1, &v103);
          v69 = BYTE13(v102[1]);
          v70 = *(_QWORD *)&v100[72];
          v71 = FigVCPSourceArrayGetCount((uint64_t)v4);
          v72 = FigVCPSourceArrayGetCount((uint64_t)v5);
          *(_OWORD *)time1 = *(_OWORD *)((char *)v102 + 4);
          *(_QWORD *)&time1[16] = *(_QWORD *)((char *)&v102[1] + 4);
          v73 = (uint64_t)v71;
          v1 = v92;
          updated = FigVCPCompositorHostPrepareToCompose(v67, v68, (__int128 *)time1, (__int128 *)&v103.value, v69, v70, SHIDWORD(v70), v73, (uint64_t)v93, (uint64_t)v7, (uint64_t)v72, (uint64_t)v98, (uint64_t)v11);
          if (updated)
            goto LABEL_184;
        }
        updated = videoprocessor_setUpcomingImageInfo(v1);
        if (updated)
          goto LABEL_184;
        updated = FigVCPCompositorHostComposeFrameAsync(*(_QWORD **)(v1 + 104));
        if (updated)
          goto LABEL_184;
      }
      updated = FigVCPProcessingStateAdvanceCurrentTime((uint64_t)v100, (uint64_t)v4, (uint64_t)v90);
      if (updated)
      {
LABEL_184:
        CanAccomodateFrame = updated;
LABEL_185:
        SInt32 = 0;
        goto LABEL_186;
      }
      v9 = v93;
      if (!FigVCPTimingIsProcessingStateFresh((uint64_t)v90, (uint64_t)v100))
        goto LABEL_176;
    }
    if (!*(_BYTE *)(v1 + 160))
      goto LABEL_176;
  }
  v50 = 0;
  while (2)
  {
    v51 = FigVCPSourceArrayGetSourceAtIndex((uint64_t)v4, v50);
    v52 = v7[v50];
    if (v52)
    {
      CFRelease(v52);
      v7[v50] = 0;
    }
    v9[v50] = FigVCPSourceGetTrackID();
    v53 = (const __CFArray *)v111;
    v54 = FigVCPSourceGetTrackID();
    if (!videoprocessor_isTrackRequired(v53, v54))
      goto LABEL_128;
    LOBYTE(v117.value) = 0;
    *(_QWORD *)time1 = 0;
    if (!v99)
    {
      v34 = FigVCPSourceCopyConformedImage((uint64_t)v51, (uint64_t)&v117, (uint64_t)time1);
      if (v34)
        goto LABEL_180;
      v7[v50] = *(CFTypeRef *)time1;
LABEL_126:
      if (LOBYTE(v117.value))
        HIBYTE(v102[1]) = 1;
LABEL_128:
      if (++v50 >= (uint64_t)FigVCPSourceArrayGetCount((uint64_t)v4))
        goto LABEL_129;
      continue;
    }
    break;
  }
  FigVCPSourceGetTrackID();
  SInt32 = (const void *)FigCFNumberCreateSInt32();
  v56 = FigVCPSourceCopyConformedTimedImages((uint64_t)v51, *(unsigned int *)&v100[76], (uint64_t)&v117, (uint64_t)&v114);
  if (!v56)
  {
    FigCFDictionarySetValue();
    if (SInt32)
      CFRelease(SInt32);
    if (v114)
    {
      CFRelease(v114);
      v114 = 0;
    }
    goto LABEL_126;
  }
LABEL_181:
  CanAccomodateFrame = v56;
LABEL_182:
  v1 = v92;
LABEL_186:
  if (Count >= 1)
  {
    v74 = v7;
    do
    {
      if (*v74)
        CFRelease(*v74);
      ++v74;
      --Count;
    }
    while (Count);
  }
  if (!v11)
  {
    v78 = v93;
LABEL_199:
    v75 = v88;
    goto LABEL_200;
  }
  v75 = v88;
  if (v96 >= 1)
  {
    for (i = 0; i != v96; ++i)
    {
      v77 = (const void *)v11[i];
      if (v77)
        CFRelease(v77);
    }
  }
  v78 = v93;
LABEL_200:
  if (timebase)
    CFRelease(timebase);
  if (v75)
    CFRelease(v75);
  if (v4)
    CFRelease(v4);
  if (v5)
    CFRelease(v5);
  if (v3)
    CFRelease(v3);
  if (v111)
    CFRelease(v111);
  if (v110)
    CFRelease(v110);
  if (cf)
    CFRelease(cf);
  if (v114)
    CFRelease(v114);
  if (v113)
    CFRelease(v113);
  if (Mutable)
    CFRelease(Mutable);
  if (v94)
    CFRelease(v94);
  if (SInt32)
    CFRelease(SInt32);
  free(v78);
  free(v7);
  free(v98);
  free(v11);
  MEMORY[0x19402EF04](*(_QWORD *)(v1 + 168));
  if (!CanAccomodateFrame)
LABEL_227:
    FigVCPTimingSaveProcessingState(*(_QWORD *)(v1 + 96), (uint64_t)v100);
  videoprocessor_reportProcessingError(v1);
}

uint64_t videoprocessor_OnLowOutputQueueLevel(uint64_t a1, uint64_t a2)
{
  return videoprocessor_triggerProcessing(a2);
}

void videoprocessor_frameCompleteCallback(__n128 *a1, uint64_t a2)
{
  uint64_t CompositionStartTime;
  uint64_t UpTimeNanoseconds;
  int CompletionStatus;
  __CVBuffer *v7;
  CFTypeRef v8;
  __n128 *v9;
  __CVBuffer *ComposedFrame;
  CFTypeRef v11;
  int v12;
  int v13;
  int v14;
  __CVBuffer *v15;
  int HDRStats;
  int IsImmediateFrame;
  __n128 *v18;
  uint64_t RenderedFrameWithHDRMetadata;
  int v20;
  __n128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  CFTypeRef cf;
  __int128 v27;
  uint64_t v28;
  __CVBuffer *v29;
  CFTypeRef v30;

  cf = 0;
  v24 = *MEMORY[0x1E0CA2E18];
  v25 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  CompositionStartTime = FigVCPPendingFrameGetCompositionStartTime((uint64_t)a1);
  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  CompletionStatus = FigVCPPendingFrameGetCompletionStatus((uint64_t)a1);
  v7 = 0;
  if (CompletionStatus == -12508)
    goto LABEL_41;
  v8 = 0;
  v9 = 0;
  if (!CompletionStatus)
  {
    FigVCPPendingFrameGetFrameTime(a1, (__n128 *)&v24);
    ComposedFrame = (__CVBuffer *)FigVCPPendingFrameGetComposedFrame((uint64_t)a1);
    FigVCPTallyUpdateTimingInfo(a2 + 208, CompositionStartTime, UpTimeNanoseconds);
    if (FigVCPPendingFrameSkipCoreAnimationPostProcessing((uint64_t)a1))
    {
      v7 = 0;
      goto LABEL_21;
    }
    v22 = v24;
    v23 = v25;
    v29 = 0;
    v30 = 0;
    v11 = videoprocessor_loadAndRetainAtomically(a2, (CFTypeRef *)(a2 + 144));
    if (v11)
    {
      v12 = FigVCPOutputConformerCopyProperty(*(_QWORD *)(a2 + 112), CFSTR("VideoCompositionProcessor_DestinationPixelBufferDesiredAttributes"), *MEMORY[0x1E0C9AE00], &v30);
      if (v12)
      {
        v14 = v12;
        goto LABEL_10;
      }
      v27 = v22;
      v28 = v23;
      v13 = FigVCPCoreAnimationPostProcessorCopyPixelBufferAtTime((uint64_t)v11, (uint64_t)&v27, ComposedFrame, (uint64_t)v30, (CFTypeRef *)&v29);
      v7 = v29;
      if (v13)
      {
        v14 = v13;
        if (!v29)
        {
LABEL_15:
          if (v30)
            CFRelease(v30);
          if (v11)
            CFRelease(v11);
          if (v14)
          {
            v8 = 0;
LABEL_48:
            v9 = 0;
            goto LABEL_46;
          }
          ComposedFrame = v7;
LABEL_21:
          v8 = videoprocessor_loadAndRetainAtomically(a2, (CFTypeRef *)(a2 + 120));
          if (!FigVCPOutputConformerCopyConformedPixelBuffer(*(_QWORD *)(a2 + 112), ComposedFrame, (CVPixelBufferRef *)&cf))
          {
            v15 = (__CVBuffer *)cf;
            FigVCPPendingFrameSetRenderedFrame((uint64_t)a1, cf);
            HDRStats = FigVCPPendingFrameShouldGenerateHDRStats((uint64_t)a1, v15);
            IsImmediateFrame = FigVCPPendingFrameIsImmediateFrame((uint64_t)a1);
            if (HDRStats)
            {
              if (IsImmediateFrame)
                FigVCPCompositorHostDropEarlierPendingFrames(*(_QWORD *)(a2 + 104), (uint64_t)a1);
              if (!FigVCPOutputCalculateAndStoreHDRStats((uint64_t)v8, (uint64_t)v15, (uint64_t)a1))
              {
                v9 = 0;
                while (1)
                {
                  if (v9)
                    CFRelease(v9);
                  v18 = (__n128 *)FigVCPCompositorHostRemoveRetainedPendingFrameForOutput(*(_QWORD *)(a2 + 104));
                  v9 = v18;
                  if (!v18)
                    break;
                  RenderedFrameWithHDRMetadata = FigVCPPendingFrameGetRenderedFrameWithHDRMetadata((uint64_t)v18);
                  FigVCPPendingFrameGetFrameTime(v9, &v21);
                  v20 = FigVCPPendingFrameIsImmediateFrame((uint64_t)v9);
                  if (FigVCPOutputEnqueueImage((uint64_t)v8, RenderedFrameWithHDRMetadata, (__int128 *)&v21, v20))goto LABEL_46;
                  FigVCPCompositorHostFinishOutputFrame(*(_QWORD *)(a2 + 104));
                  if (FigVCPPendingFrameIsImmediateFrame((uint64_t)v9))
                  {
                    FigVCPPendingFrameGetOrder((uint64_t)v9);
                    videoprocessor_sendSeekCompleteNotification();
                  }
                }
LABEL_37:
                if (!v8)
                  goto LABEL_39;
                goto LABEL_38;
              }
            }
            else
            {
              v27 = v24;
              v28 = v25;
              if (!FigVCPOutputEnqueueImage((uint64_t)v8, (uint64_t)v15, &v27, IsImmediateFrame))
              {
                FigVCPCompositorHostRemovePendingFrame(*(_QWORD *)(a2 + 104), (uint64_t)a1);
                FigVCPPendingFrameSetRenderComplete();
                if (FigVCPPendingFrameIsImmediateFrame((uint64_t)a1))
                {
                  FigVCPPendingFrameGetOrder((uint64_t)a1);
                  videoprocessor_sendSeekCompleteNotification();
                }
                v9 = 0;
                goto LABEL_37;
              }
            }
          }
          goto LABEL_48;
        }
        CFRelease(v29);
LABEL_10:
        v7 = 0;
        goto LABEL_15;
      }
    }
    else if (ComposedFrame)
    {
      v7 = (__CVBuffer *)CFRetain(ComposedFrame);
    }
    else
    {
      v7 = 0;
    }
    v14 = 0;
    v29 = 0;
    goto LABEL_15;
  }
LABEL_46:
  videoprocessor_reportProcessingError(a2);
  if (v8)
LABEL_38:
    CFRelease(v8);
LABEL_39:
  if (v9)
    CFRelease(v9);
LABEL_41:
  if (cf)
    CFRelease(cf);
  if (v7)
    CFRelease(v7);
}

void videoprocessor_completePrerollCallback()
{
  CFMutableDictionaryRef Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
  if (Mutable)
    CFRelease(Mutable);
}

uint64_t videoprocessor_didReachEndOfOutputCallback(uint64_t a1)
{
  videoprocessor_setUpcomingImageInfo(a1);
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t FigVideoCompositionProcessorSetOutputDurationHighAndLowWaterLevels(uint64_t a1, CMTime *a2, CMTime *a3)
{
  CFTypeRef v5;
  CMTimeEpoch v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  CMTime time2;
  CMTime time1;

  v5 = videoprocessor_loadAndRetainAtomically(a1, (CFTypeRef *)(a1 + 120));
  if (!FigVCPIsValid())
    goto LABEL_11;
  if ((a3->flags & 0x1D) != 1)
    goto LABEL_11;
  time1 = *a3;
  v10 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&time2.value = *MEMORY[0x1E0CA2E68];
  v6 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  time2.epoch = v6;
  if (CMTimeCompare(&time1, &time2) < 0)
    goto LABEL_11;
  if ((a2->flags & 0x1D) == 1
    && (time1 = *a2, *(_OWORD *)&time2.value = v10, time2.epoch = v6, CMTimeCompare(&time1, &time2) > 0)
    && (time1 = *a3, time2 = *a2, CMTimeCompare(&time1, &time2) < 1))
  {
    time1 = *a2;
    time2 = *a3;
    v7 = FigVCPOutputSetOutputDurationHighAndLowWaterLevels((uint64_t)v5, &time1, &time2);
  }
  else
  {
LABEL_11:
    v7 = FigSignalErrorAt();
  }
  v8 = v7;
  if (v5)
    CFRelease(v5);
  return v8;
}

CFTypeRef videoprocessor_loadAndRetainAtomically(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v4;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 176));
  if (*a2)
    v4 = CFRetain(*a2);
  else
    v4 = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 176));
  return v4;
}

void FigVideoCompositionProcessorInvalidate(uint64_t a1)
{
  CFTypeRef v2;
  CFTypeRef v3;
  const void *v4;
  CFTypeRef v5;
  const void *v6;
  uint64_t FigBaseObject;
  uint64_t v8;
  void (*v9)(uint64_t);

  if (a1 && FigVCPInvalidatePrologue())
  {
    *(_BYTE *)(a1 + 160) = 0;
    v2 = videoprocessor_loadAndRetainAtomically(a1, (CFTypeRef *)(a1 + 120));
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    v3 = videoprocessor_loadAndRetainAtomically(a1, (CFTypeRef *)(a1 + 32));
    v4 = v3;
    if (v3)
      FigVCPSourceArrayApplyFunction((uint64_t)v3, (uint64_t (*)(const void *, uint64_t))videoprocessor_invalidateSource, 0);
    v5 = videoprocessor_loadAndRetainAtomically(a1, (CFTypeRef *)(a1 + 40));
    v6 = v5;
    if (v5)
      FigVCPSourceArrayApplyFunction((uint64_t)v5, (uint64_t (*)(const void *, uint64_t))videoprocessor_invalidateSource, 0);
    FigVCPTimingInvalidate(*(_QWORD *)(a1 + 96));
    FigVCPCompositorHostInvalidate(*(_QWORD *)(a1 + 104));
    FigVCPOutputInvalidate((uint64_t)v2);
    FigBaseObject = FigActivitySchedulerGetFigBaseObject(*(_QWORD *)(a1 + 128));
    if (FigBaseObject)
    {
      v8 = FigBaseObject;
      v9 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v9)
        v9(v8);
    }
    FigVCPInvalidateEpilogue();
    if (v2)
      CFRelease(v2);
    if (v4)
      CFRelease(v4);
    if (v6)
      CFRelease(v6);
  }
}

uint64_t FigVideoCompositionProcessorStop(uint64_t a1)
{
  *(_BYTE *)(a1 + 160) = 0;
  return 0;
}

uint64_t FigVideoCompositionProcessorSetSourceVisualContext(uint64_t a1, int a2, int a3, _OWORD *a4, const void *a5)
{
  uint64_t Copy;
  CFTypeRef v11;
  const __CFAllocator *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v18;
  _OWORD v19[6];
  const void *v20;
  const void *v21;

  v20 = 0;
  v21 = 0;
  if (!FigVCPIsValid())
  {
    Copy = FigSignalErrorAt();
LABEL_14:
    v18 = Copy;
    v11 = 0;
    goto LABEL_6;
  }
  if (a3 == 1986618469)
  {
    Copy = FigVCPPreprocessParametersCreateCopy(*MEMORY[0x1E0C9AE00], *(_QWORD *)(a1 + 24), (uint64_t *)&v20);
    if ((_DWORD)Copy)
      goto LABEL_14;
  }
  v11 = videoprocessor_loadAndRetainAtomically(a1, (CFTypeRef *)(a1 + 32));
  v12 = CFGetAllocator(v11);
  v13 = a4[3];
  v19[2] = a4[2];
  v19[3] = v13;
  v14 = a4[5];
  v19[4] = a4[4];
  v19[5] = v14;
  v15 = a4[1];
  v19[0] = *a4;
  v19[1] = v15;
  v16 = FigVCPSourceArrayCopyAndAddNewVisualContext(v12, (uint64_t)v11, a2, a3, a5, v20, v19, (uint64_t)videoprocessor_AvailableTimeRangeChanged, a1, &v21);
  if (!(_DWORD)v16)
    videoprocessor_releaseAssignAndRetainAtomically(a1, (const void **)(a1 + 32), v21);
  v18 = v16;
LABEL_6:
  if (v20)
    CFRelease(v20);
  if (v11)
    CFRelease(v11);
  if (v21)
    CFRelease(v21);
  return v18;
}

uint64_t videoprocessor_AvailableTimeRangeChanged(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = FigVCPSourceShouldTriggerWhenAvailabilityChanges();
  if ((_DWORD)result)
    return videoprocessor_triggerProcessing(a2);
  return result;
}

void videoprocessor_releaseAssignAndRetainAtomically(uint64_t a1, const void **a2, const void *a3)
{
  const void *v5;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 176));
  v5 = *a2;
  *a2 = a3;
  if (a3)
    CFRetain(a3);
  if (v5)
    CFRelease(v5);
  JUMPOUT(0x19402EF04);
}

uint64_t videoprocessor_triggerProcessing(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);

  if (*(_BYTE *)(result + 160))
  {
    v1 = *(_QWORD *)(result + 128);
    result = CMBaseObjectGetVTable();
    v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 16);
    if (v2)
      return v2(v1);
  }
  return result;
}

uint64_t FigVideoCompositionProcessorSetSourceVisualContextGroup(uint64_t a1, int a2, int a3, _OWORD *a4, uint64_t a5)
{
  const void *ValueAtIndex;
  uint64_t Copy;
  CFTypeRef v11;
  const __CFAllocator *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v18;
  _OWORD v19[6];
  const void *v20;
  const void *v21;

  v20 = 0;
  v21 = 0;
  if (!a1)
  {
    FigSignalErrorAt();
    v18 = 0;
    goto LABEL_12;
  }
  if (a5)
  {
    ValueAtIndex = (const void *)FigCFArrayGetValueAtIndex();
    if (FigVCPIsValid())
    {
      if (a3 != 1986618469
        || (Copy = FigVCPPreprocessParametersCreateCopy(*MEMORY[0x1E0C9AE00], *(_QWORD *)(a1 + 24), (uint64_t *)&v20),
            !(_DWORD)Copy))
      {
        v11 = videoprocessor_loadAndRetainAtomically(a1, (CFTypeRef *)(a1 + 32));
        v12 = CFGetAllocator(v11);
        v13 = a4[3];
        v19[2] = a4[2];
        v19[3] = v13;
        v14 = a4[5];
        v19[4] = a4[4];
        v19[5] = v14;
        v15 = a4[1];
        v19[0] = *a4;
        v19[1] = v15;
        v16 = FigVCPSourceArrayCopyAndAddNewVisualContext(v12, (uint64_t)v11, a2, a3, ValueAtIndex, v20, v19, (uint64_t)videoprocessor_AvailableTimeRangeChanged, a1, &v21);
        if (!(_DWORD)v16)
          videoprocessor_releaseAssignAndRetainAtomically(a1, (const void **)(a1 + 32), v21);
        v18 = v16;
        goto LABEL_8;
      }
    }
    else
    {
      Copy = FigSignalErrorAt();
    }
    v18 = Copy;
  }
  else
  {
    FigSignalErrorAt();
    v18 = 0;
  }
  v11 = 0;
LABEL_8:
  if (v20)
    CFRelease(v20);
  if (v11)
    CFRelease(v11);
LABEL_12:
  if (v21)
    CFRelease(v21);
  return v18;
}

uint64_t FigVideoCompositionProcessorSetAnimationLayer(uint64_t a1, int a2, const void *a3, const __CFArray *a4, uint64_t a5, const void *a6)
{
  uint64_t RenderSize;
  CFTypeRef v13;
  const __CFAllocator *v14;
  uint64_t v15;
  uint64_t v17;
  CGSize v18;
  CFTypeRef cf;
  CFTypeRef v20;
  CFTypeRef v21;

  v20 = 0;
  v21 = 0;
  cf = 0;
  if (!FigVCPIsValid()
    || a2 && a4
    || a4 && CFArrayGetCount(a4) <= 0
    || a5
    || *(_DWORD *)(a1 + 136) == 1 && a3 && *(_BYTE *)(a1 + 20))
  {
    RenderSize = FigSignalErrorAt();
    goto LABEL_27;
  }
  if (!a2)
  {
    RenderSize = FigVCPCoreAnimationPostProcessorCreate(*MEMORY[0x1E0C9AE00], a3, a4, a6, &v20);
    if (!(_DWORD)RenderSize)
      videoprocessor_releaseAssignAndRetainAtomically(a1, (const void **)(a1 + 144), v20);
    goto LABEL_27;
  }
  v18.width = 0.0;
  v18.height = 0.0;
  RenderSize = FigVCPCompositorHostGetRenderSize(*(_QWORD *)(a1 + 104), &v18);
  if ((_DWORD)RenderSize
    || (RenderSize = FigVCPPreprocessParametersCreateCopy(*MEMORY[0x1E0C9AE00], *(_QWORD *)(a1 + 24), (uint64_t *)&cf),
        (_DWORD)RenderSize))
  {
LABEL_27:
    v17 = RenderSize;
    v13 = 0;
    goto LABEL_17;
  }
  v13 = videoprocessor_loadAndRetainAtomically(a1, (CFTypeRef *)(a1 + 32));
  v14 = CFGetAllocator(v13);
  v15 = FigVCPSourceArrayCopyAndAddNewCoreAnimationSource(v14, (uint64_t)v13, a2, a3, a6, cf, &v21, v18.width, v18.height);
  if (!(_DWORD)v15)
    videoprocessor_releaseAssignAndRetainAtomically(a1, (const void **)(a1 + 32), v21);
  v17 = v15;
LABEL_17:
  if (cf)
    CFRelease(cf);
  if (v20)
    CFRelease(v20);
  if (v21)
    CFRelease(v21);
  if (v13)
    CFRelease(v13);
  return v17;
}

